TranslationUnitDecl 0x12b827008 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x12b827eb8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x12b8275d0 '__int128'
|-TypedefDecl 0x12b827f28 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x12b8275f0 'unsigned __int128'
|-TypedefDecl 0x12b8f7c30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12b8f7a00 'struct __NSConstantString_tag'
|   `-Record 0x12b827f80 '__NSConstantString_tag'
|-TypedefDecl 0x12b8f7c98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x12b827790 '__SVInt8_t'
|-TypedefDecl 0x12b8f7d00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x12b8277b0 '__SVInt16_t'
|-TypedefDecl 0x12b8f7d68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x12b8277d0 '__SVInt32_t'
|-TypedefDecl 0x12b8f7dd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x12b8277f0 '__SVInt64_t'
|-TypedefDecl 0x12b8f7e38 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x12b827810 '__SVUint8_t'
|-TypedefDecl 0x12b8f7ea0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x12b827830 '__SVUint16_t'
|-TypedefDecl 0x12b8f7f08 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x12b827850 '__SVUint32_t'
|-TypedefDecl 0x12b8f7f70 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x12b827870 '__SVUint64_t'
|-TypedefDecl 0x12b8f7fd8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x12b827890 '__SVFloat16_t'
|-TypedefDecl 0x12b8f8040 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x12b8278b0 '__SVFloat32_t'
|-TypedefDecl 0x12b8f80a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x12b8278d0 '__SVFloat64_t'
|-TypedefDecl 0x12b8f8110 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x12b8278f0 '__SVBfloat16_t'
|-TypedefDecl 0x12b8f8178 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x12b827910 '__clang_svint8x2_t'
|-TypedefDecl 0x12b8f81e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x12b827930 '__clang_svint16x2_t'
|-TypedefDecl 0x12b8f8248 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x12b827950 '__clang_svint32x2_t'
|-TypedefDecl 0x12b8f82b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x12b827970 '__clang_svint64x2_t'
|-TypedefDecl 0x12b8f8318 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x12b827990 '__clang_svuint8x2_t'
|-TypedefDecl 0x12b8f8380 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x12b8279b0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12b8f83e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x12b8279d0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12b8f8450 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x12b8279f0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12b8f84b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x12b827a10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12b8f8520 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x12b827a30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12b8f8588 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x12b827a50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12b8f85f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x12b827a70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12b8f8658 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x12b827a90 '__clang_svint8x3_t'
|-TypedefDecl 0x12b8f86c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x12b827ab0 '__clang_svint16x3_t'
|-TypedefDecl 0x12b8f8728 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x12b827ad0 '__clang_svint32x3_t'
|-TypedefDecl 0x12b8f8790 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x12b827af0 '__clang_svint64x3_t'
|-TypedefDecl 0x12b8f87f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x12b827b10 '__clang_svuint8x3_t'
|-TypedefDecl 0x12b8f8860 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x12b827b30 '__clang_svuint16x3_t'
|-TypedefDecl 0x12b8f88c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x12b827b50 '__clang_svuint32x3_t'
|-TypedefDecl 0x12b8f8930 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x12b827b70 '__clang_svuint64x3_t'
|-TypedefDecl 0x12b8f8998 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x12b827b90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12b8f9200 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x12b827bb0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12b8f9268 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x12b827bd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12b8f92d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x12b827bf0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12b8f9338 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x12b827c10 '__clang_svint8x4_t'
|-TypedefDecl 0x12b8f93a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x12b827c30 '__clang_svint16x4_t'
|-TypedefDecl 0x12b8f9408 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x12b827c50 '__clang_svint32x4_t'
|-TypedefDecl 0x12b8f9470 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x12b827c70 '__clang_svint64x4_t'
|-TypedefDecl 0x12b8f94d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x12b827c90 '__clang_svuint8x4_t'
|-TypedefDecl 0x12b8f9540 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x12b827cb0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12b8f95a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x12b827cd0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12b8f9610 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x12b827cf0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12b8f9678 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x12b827d10 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12b8f96e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x12b827d30 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12b8f9748 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x12b827d50 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12b8f97b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x12b827d70 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12b8f9818 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x12b827d90 '__SVBool_t'
|-TypedefDecl 0x12b8f9880 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x12b827db0 '__clang_svboolx2_t'
|-TypedefDecl 0x12b8f98e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x12b827dd0 '__clang_svboolx4_t'
|-TypedefDecl 0x12b8f9950 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x12b827df0 '__SVCount_t'
|-TypedefDecl 0x12b8f99f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12b8f99b0 'char *'
|   `-BuiltinType 0x12b8270b0 'char'
|-TypedefDecl 0x12b8f9a68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12b8f99b0 'char *'
|   `-BuiltinType 0x12b8270b0 'char'
|-FunctionDecl 0x12b8f9c88 <dataset_diviso_filec/func15517_vuln.c:1:1, line:81:1> line:1:7 invalid encode_base64 'char *(int *, int)'
| |-ParmVarDecl 0x12b8f9b28 <col:21, col:27> col:27 invalid src 'int *'
| |-ParmVarDecl 0x12b8f9ba8 <col:31, col:38> col:38 invalid ssize 'int'
| `-CompoundStmt 0x12b9172a8 <line:2:1, line:81:1>
|   |-DeclStmt 0x12b8f9dc0 <line:3:3, col:15>
|   | `-VarDecl 0x12b8f9d58 <col:3, col:9> col:9 used outbuf 'char *'
|   |-DeclStmt 0x12b8f9e58 <line:4:3, col:15>
|   | `-VarDecl 0x12b8f9df0 <col:3, col:9> col:9 used retbuf 'char *'
|   |-DeclStmt 0x12b8f9ef0 <line:5:3, col:10>
|   | `-VarDecl 0x12b8f9e88 <col:3, col:7> col:7 used pos 'int'
|   |-DeclStmt 0x12b8fa0a8 <line:6:3, col:17>
|   | |-VarDecl 0x12b8f9f20 <col:3, col:7> col:7 used i 'int'
|   | |-VarDecl 0x12b8f9fa0 <col:3, col:10> col:10 used l 'int'
|   | `-VarDecl 0x12b8fa020 <col:3, col:13> col:13 used left 'int'
|   |-DeclStmt 0x12b8fa140 <line:7:3, col:23>
|   | `-VarDecl 0x12b8fa0d8 <col:3, col:17> col:17 used triple 'unsigned long'
|   |-IfStmt 0x12b9135e8 <line:11:3, line:14:3>
|   | |-BinaryOperator 0x12b9132e0 <line:11:7, col:20> 'int' contains-errors '||'
|   | | |-UnaryOperator 0x12b913288 <col:7, col:8> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | | | `-ImplicitCastExpr 0x12b913270 <col:8> '<dependent type>' contains-errors <LValueToRValue>
|   | | |   `-RecoveryExpr 0x12b8fa170 <col:8> '<dependent type>' contains-errors lvalue
|   | | `-BinaryOperator 0x12b9132c0 <col:15, col:20> 'int' contains-errors '=='
|   | |   |-RecoveryExpr 0x12b8fa1c0 <col:15> '<dependent type>' contains-errors lvalue
|   | |   `-RecoveryExpr 0x12b9132a0 <col:20> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x12b9135c8 <col:25, line:14:3>
|   |   |-CallExpr 0x12b913550 <line:12:5, col:34> '<dependent type>' contains-errors
|   |   | |-DeclRefExpr 0x12b913460 <col:5> 'int ()' Function 0x12b9133a8 'log_msg' 'int ()'
|   |   | |-RecoveryExpr 0x12b913530 <col:13> '<dependent type>' contains-errors lvalue
|   |   | `-StringLiteral 0x12b9134e0 <col:29> 'char[4]' lvalue "STR"
|   |   `-ReturnStmt 0x12b9135b8 <line:13:5, col:12>
|   |     `-RecoveryExpr 0x12b913598 <col:12> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x12b913860 <line:19:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x12b913820 <col:3> 'int' lvalue Var 0x12b8f9f20 'i' 'int'
|   | `-IntegerLiteral 0x12b913840 <col:7> 'int' 0
|   |-BinaryOperator 0x12b9138d8 <line:20:3, col:12> 'unsigned long' '='
|   | |-DeclRefExpr 0x12b913880 <col:3> 'unsigned long' lvalue Var 0x12b8fa0d8 'triple' 'unsigned long'
|   | `-ImplicitCastExpr 0x12b9138c0 <col:12> 'unsigned long' <IntegralCast>
|   |   `-IntegerLiteral 0x12b9138a0 <col:12> 'int' 0
|   |-BinaryOperator 0x12b913938 <line:21:3, col:9> 'int' '='
|   | |-DeclRefExpr 0x12b9138f8 <col:3> 'int' lvalue Var 0x12b8f9e88 'pos' 'int'
|   | `-IntegerLiteral 0x12b913918 <col:9> 'int' 0
|   |-BinaryOperator 0x12b913998 <line:22:3, col:10> 'int' contains-errors '='
|   | |-DeclRefExpr 0x12b913958 <col:3> 'int' lvalue Var 0x12b8fa020 'left' 'int'
|   | `-RecoveryExpr 0x12b913978 <col:10> '<dependent type>' contains-errors lvalue
|   |-CallExpr 0x12b913a88 <line:23:3, col:39> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x12b9139b8 <col:3> 'int ()' Function 0x12b9133a8 'log_msg' 'int ()'
|   | |-RecoveryExpr 0x12b913a68 <col:11> '<dependent type>' contains-errors lvalue
|   | |-StringLiteral 0x12b9139f0 <col:28> 'char[4]' lvalue "STR"
|   | `-DeclRefExpr 0x12b913a10 <col:35> 'int' lvalue Var 0x12b8fa020 'left' 'int'
|   |-WhileStmt 0x12b915ff8 <line:25:3, line:72:3>
|   | |-BinaryOperator 0x12b913b18 <line:25:10, col:18> 'int' '!='
|   | | |-ImplicitCastExpr 0x12b913b00 <col:10> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x12b913ac0 <col:10> 'int' lvalue Var 0x12b8fa020 'left' 'int'
|   | | `-IntegerLiteral 0x12b913ae0 <col:18> 'int' 0
|   | `-CompoundStmt 0x12b915fc8 <line:26:5, line:72:3>
|   |   |-UnaryOperator 0x12b913b58 <line:27:7, col:8> 'int' postfix '++'
|   |   | `-DeclRefExpr 0x12b913b38 <col:7> 'int' lvalue Var 0x12b8f9f20 'i' 'int'
|   |   |-UnaryOperator 0x12b913b90 <line:28:7, col:11> 'int' postfix '--'
|   |   | `-DeclRefExpr 0x12b913b70 <col:7> 'int' lvalue Var 0x12b8fa020 'left' 'int'
|   |   |-BinaryOperator 0x12b913e08 <line:30:7, col:32> 'unsigned long' contains-errors '='
|   |   | |-DeclRefExpr 0x12b913ba8 <col:7> 'unsigned long' lvalue Var 0x12b8fa0d8 'triple' 'unsigned long'
|   |   | `-BinaryOperator 0x12b913de8 <col:16, col:32> '<dependent type>' contains-errors '|'
|   |   |   |-ParenExpr 0x12b913d78 <col:16, col:27> 'unsigned long'
|   |   |   | `-BinaryOperator 0x12b913d58 <col:17, col:26> 'unsigned long' '<<'
|   |   |   |   |-ImplicitCastExpr 0x12b913d40 <col:17> 'unsigned long' <LValueToRValue>
|   |   |   |   | `-DeclRefExpr 0x12b913bc8 <col:17> 'unsigned long' lvalue Var 0x12b8fa0d8 'triple' 'unsigned long'
|   |   |   |   `-IntegerLiteral 0x12b913be8 <col:26> 'int' 8
|   |   |   `-UnaryOperator 0x12b913dd0 <col:31, col:32> '<dependent type>' contains-errors prefix '*' cannot overflow
|   |   |     `-ImplicitCastExpr 0x12b913db8 <col:32> '<dependent type>' contains-errors <LValueToRValue>
|   |   |       `-RecoveryExpr 0x12b913d98 <col:32> '<dependent type>' contains-errors lvalue
|   |   `-IfStmt 0x12b915fa8 <line:31:7, line:70:4>
|   |     |-BinaryOperator 0x12b913f18 <line:31:11, col:29> 'int' '||'
|   |     | |-BinaryOperator 0x12b913e80 <col:11, col:16> 'int' '=='
|   |     | | |-ImplicitCastExpr 0x12b913e68 <col:11> 'int' <LValueToRValue>
|   |     | | | `-DeclRefExpr 0x12b913e28 <col:11> 'int' lvalue Var 0x12b8f9f20 'i' 'int'
|   |     | | `-IntegerLiteral 0x12b913e48 <col:16> 'int' 3
|   |     | `-BinaryOperator 0x12b913ef8 <col:21, col:29> 'int' '=='
|   |     |   |-ImplicitCastExpr 0x12b913ee0 <col:21> 'int' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x12b913ea0 <col:21> 'int' lvalue Var 0x12b8fa020 'left' 'int'
|   |     |   `-IntegerLiteral 0x12b913ec0 <col:29> 'int' 0
|   |     `-CompoundStmt 0x12b915f70 <line:32:2, line:70:4>
|   |       |-SwitchStmt 0x12b913f70 <line:33:4, line:43:6>
|   |       | |-ImplicitCastExpr 0x12b913f58 <line:33:12> 'int' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x12b913f38 <col:12> 'int' lvalue Var 0x12b8f9f20 'i' 'int'
|   |       | `-CompoundStmt 0x12b915200 <line:34:6, line:43:6>
|   |       |   |-CaseStmt 0x12b913fd0 <line:35:6, line:36:25>
|   |       |   | |-ConstantExpr 0x12b913fb8 <line:35:11> 'int'
|   |       |   | | `-IntegerLiteral 0x12b913f98 <col:11> 'int' 1
|   |       |   | `-BinaryOperator 0x12b914090 <line:36:8, col:25> 'unsigned long' '='
|   |       |   |   |-DeclRefExpr 0x12b913ff8 <col:8> 'unsigned long' lvalue Var 0x12b8fa0d8 'triple' 'unsigned long'
|   |       |   |   `-BinaryOperator 0x12b914070 <col:17, col:25> 'unsigned long' '<<'
|   |       |   |     |-ImplicitCastExpr 0x12b914058 <col:17> 'unsigned long' <LValueToRValue>
|   |       |   |     | `-DeclRefExpr 0x12b914018 <col:17> 'unsigned long' lvalue Var 0x12b8fa0d8 'triple' 'unsigned long'
|   |       |   |     `-IntegerLiteral 0x12b914038 <col:25> 'int' 4
|   |       |   |-BreakStmt 0x12b9140b0 <line:37:8>
|   |       |   |-CaseStmt 0x12b9140f0 <line:38:6, line:39:25>
|   |       |   | |-ConstantExpr 0x12b9140d8 <line:38:11> 'int'
|   |       |   | | `-IntegerLiteral 0x12b9140b8 <col:11> 'int' 2
|   |       |   | `-BinaryOperator 0x12b9141b0 <line:39:8, col:25> 'unsigned long' '='
|   |       |   |   |-DeclRefExpr 0x12b914118 <col:8> 'unsigned long' lvalue Var 0x12b8fa0d8 'triple' 'unsigned long'
|   |       |   |   `-BinaryOperator 0x12b914190 <col:17, col:25> 'unsigned long' '<<'
|   |       |   |     |-ImplicitCastExpr 0x12b914178 <col:17> 'unsigned long' <LValueToRValue>
|   |       |   |     | `-DeclRefExpr 0x12b914138 <col:17> 'unsigned long' lvalue Var 0x12b8fa0d8 'triple' 'unsigned long'
|   |       |   |     `-IntegerLiteral 0x12b914158 <col:25> 'int' 2
|   |       |   |-BreakStmt 0x12b9141d0 <line:40:8>
|   |       |   `-DefaultStmt 0x12b9141e0 <line:41:6, line:42:8>
|   |       |     `-BreakStmt 0x12b9141d8 <col:8>
|   |       |-ForStmt 0x12b9158d0 <line:44:4, line:51:8>
|   |       | |-BinaryOperator 0x12b915290 <line:44:9, col:13> 'int' '='
|   |       | | |-DeclRefExpr 0x12b915238 <col:9> 'int' lvalue Var 0x12b8f9fa0 'l' 'int'
|   |       | | `-ImplicitCastExpr 0x12b915278 <col:13> 'int' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x12b915258 <col:13> 'int' lvalue Var 0x12b8f9f20 'i' 'int'
|   |       | |-<<<NULL>>>
|   |       | |-BinaryOperator 0x12b915308 <col:16, col:21> 'int' '>='
|   |       | | |-ImplicitCastExpr 0x12b9152f0 <col:16> 'int' <LValueToRValue>
|   |       | | | `-DeclRefExpr 0x12b9152b0 <col:16> 'int' lvalue Var 0x12b8f9fa0 'l' 'int'
|   |       | | `-IntegerLiteral 0x12b9152d0 <col:21> 'int' 0
|   |       | |-UnaryOperator 0x12b915348 <col:24, col:25> 'int' postfix '--'
|   |       | | `-DeclRefExpr 0x12b915328 <col:24> 'int' lvalue Var 0x12b8f9fa0 'l' 'int'
|   |       | `-CompoundStmt 0x12b9158a0 <col:28, line:51:8>
|   |       |   |-DeclStmt 0x12b9153e0 <line:46:6, col:12>
|   |       |   | `-VarDecl 0x12b915378 <col:6, col:10> col:10 used rr 'int'
|   |       |   |-BinaryOperator 0x12b915598 <line:47:6, col:32> 'int' '='
|   |       |   | |-DeclRefExpr 0x12b9153f8 <col:6> 'int' lvalue Var 0x12b915378 'rr' 'int'
|   |       |   | `-ImplicitCastExpr 0x12b915580 <col:11, col:32> 'int' <IntegralCast>
|   |       |   |   `-BinaryOperator 0x12b915560 <col:11, col:32> 'unsigned long' '&'
|   |       |   |     |-ImplicitCastExpr 0x12b915548 <col:11> 'unsigned long' <IntegralCast>
|   |       |   |     | `-IntegerLiteral 0x12b915418 <col:11> 'int' 63
|   |       |   |     `-ParenExpr 0x12b915528 <col:18, col:32> 'unsigned long'
|   |       |   |       `-BinaryOperator 0x12b915508 <col:19, col:31> 'unsigned long' '>>'
|   |       |   |         |-ImplicitCastExpr 0x12b9154f0 <col:19> 'unsigned long' <LValueToRValue>
|   |       |   |         | `-DeclRefExpr 0x12b915438 <col:19> 'unsigned long' lvalue Var 0x12b8fa0d8 'triple' 'unsigned long'
|   |       |   |         `-ParenExpr 0x12b9154d0 <col:27, col:31> 'int'
|   |       |   |           `-BinaryOperator 0x12b9154b0 <col:28, col:30> 'int' '*'
|   |       |   |             |-IntegerLiteral 0x12b915458 <col:28> 'int' 6
|   |       |   |             `-ImplicitCastExpr 0x12b915498 <col:30> 'int' <LValueToRValue>
|   |       |   |               `-DeclRefExpr 0x12b915478 <col:30> 'int' lvalue Var 0x12b8f9fa0 'l' 'int'
|   |       |   |-CallExpr 0x12b915778 <line:48:6, col:21> 'int'
|   |       |   | |-ImplicitCastExpr 0x12b915760 <col:6> 'int (*)()' <FunctionToPointerDecay>
|   |       |   | | `-DeclRefExpr 0x12b915698 <col:6> 'int ()' Function 0x12b9155e0 'assert' 'int ()'
|   |       |   | `-BinaryOperator 0x12b915710 <col:14, col:19> 'int' '<'
|   |       |   |   |-ImplicitCastExpr 0x12b9156f8 <col:14> 'int' <LValueToRValue>
|   |       |   |   | `-DeclRefExpr 0x12b9156b8 <col:14> 'int' lvalue Var 0x12b915378 'rr' 'int'
|   |       |   |   `-IntegerLiteral 0x12b9156d8 <col:19> 'int' 64
|   |       |   `-UnaryOperator 0x12b915888 <line:50:6, col:9> 'int' postfix '++'
|   |       |     `-DeclRefExpr 0x12b915868 <col:6> 'int' lvalue Var 0x12b8f9e88 'pos' 'int'
|   |       |-IfStmt 0x12b915e78 <line:52:4, line:67:8>
|   |       | |-BinaryOperator 0x12b915960 <line:52:8, col:16> 'int' '=='
|   |       | | |-ImplicitCastExpr 0x12b915948 <col:8> 'int' <LValueToRValue>
|   |       | | | `-DeclRefExpr 0x12b915908 <col:8> 'int' lvalue Var 0x12b8fa020 'left' 'int'
|   |       | | `-IntegerLiteral 0x12b915928 <col:16> 'int' 0
|   |       | `-SwitchStmt 0x12b9159b8 <line:53:6, line:67:8>
|   |       |   |-ImplicitCastExpr 0x12b9159a0 <line:53:13> 'int' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x12b915980 <col:13> 'int' lvalue Var 0x12b8f9f20 'i' 'int'
|   |       |   `-CompoundStmt 0x12b915e20 <line:54:8, line:67:8>
|   |       |     |-CaseStmt 0x12b915a18 <line:55:8, line:56:15>
|   |       |     | |-ConstantExpr 0x12b915a00 <line:55:13> 'int'
|   |       |     | | `-IntegerLiteral 0x12b9159e0 <col:13> 'int' 2
|   |       |     | `-BinaryOperator 0x12b915b00 <line:56:3, col:15> 'char' '='
|   |       |     |   |-ArraySubscriptExpr 0x12b915ab0 <col:3, col:13> 'char' lvalue
|   |       |     |   | |-ImplicitCastExpr 0x12b915a80 <col:3> 'char *' <LValueToRValue>
|   |       |     |   | | `-DeclRefExpr 0x12b915a40 <col:3> 'char *' lvalue Var 0x12b8f9d58 'outbuf' 'char *'
|   |       |     |   | `-ImplicitCastExpr 0x12b915a98 <col:10> 'int' <LValueToRValue>
|   |       |     |   |   `-DeclRefExpr 0x12b915a60 <col:10> 'int' lvalue Var 0x12b8f9e88 'pos' 'int'
|   |       |     |   `-ImplicitCastExpr 0x12b915ae8 <col:15> 'char' <IntegralCast>
|   |       |     |     `-CharacterLiteral 0x12b915ad0 <col:15> 'int' 61
|   |       |     |-UnaryOperator 0x12b915b40 <line:57:3, col:6> 'int' postfix '++'
|   |       |     | `-DeclRefExpr 0x12b915b20 <col:3> 'int' lvalue Var 0x12b8f9e88 'pos' 'int'
|   |       |     |-BreakStmt 0x12b915b58 <line:58:3>
|   |       |     |-CaseStmt 0x12b915b98 <line:59:8, line:60:15>
|   |       |     | |-ConstantExpr 0x12b915b80 <line:59:13> 'int'
|   |       |     | | `-IntegerLiteral 0x12b915b60 <col:13> 'int' 1
|   |       |     | `-BinaryOperator 0x12b915c80 <line:60:3, col:15> 'char' '='
|   |       |     |   |-ArraySubscriptExpr 0x12b915c30 <col:3, col:13> 'char' lvalue
|   |       |     |   | |-ImplicitCastExpr 0x12b915c00 <col:3> 'char *' <LValueToRValue>
|   |       |     |   | | `-DeclRefExpr 0x12b915bc0 <col:3> 'char *' lvalue Var 0x12b8f9d58 'outbuf' 'char *'
|   |       |     |   | `-ImplicitCastExpr 0x12b915c18 <col:10> 'int' <LValueToRValue>
|   |       |     |   |   `-DeclRefExpr 0x12b915be0 <col:10> 'int' lvalue Var 0x12b8f9e88 'pos' 'int'
|   |       |     |   `-ImplicitCastExpr 0x12b915c68 <col:15> 'char' <IntegralCast>
|   |       |     |     `-CharacterLiteral 0x12b915c50 <col:15> 'int' 61
|   |       |     |-UnaryOperator 0x12b915cc0 <line:61:3, col:6> 'int' postfix '++'
|   |       |     | `-DeclRefExpr 0x12b915ca0 <col:3> 'int' lvalue Var 0x12b8f9e88 'pos' 'int'
|   |       |     |-BinaryOperator 0x12b915d98 <line:62:3, col:15> 'char' '='
|   |       |     | |-ArraySubscriptExpr 0x12b915d48 <col:3, col:13> 'char' lvalue
|   |       |     | | |-ImplicitCastExpr 0x12b915d18 <col:3> 'char *' <LValueToRValue>
|   |       |     | | | `-DeclRefExpr 0x12b915cd8 <col:3> 'char *' lvalue Var 0x12b8f9d58 'outbuf' 'char *'
|   |       |     | | `-ImplicitCastExpr 0x12b915d30 <col:10> 'int' <LValueToRValue>
|   |       |     | |   `-DeclRefExpr 0x12b915cf8 <col:10> 'int' lvalue Var 0x12b8f9e88 'pos' 'int'
|   |       |     | `-ImplicitCastExpr 0x12b915d80 <col:15> 'char' <IntegralCast>
|   |       |     |   `-CharacterLiteral 0x12b915d68 <col:15> 'int' 61
|   |       |     |-UnaryOperator 0x12b915dd8 <line:63:3, col:6> 'int' postfix '++'
|   |       |     | `-DeclRefExpr 0x12b915db8 <col:3> 'int' lvalue Var 0x12b8f9e88 'pos' 'int'
|   |       |     |-BreakStmt 0x12b915df0 <line:64:3>
|   |       |     `-DefaultStmt 0x12b915e00 <line:65:8, line:66:3>
|   |       |       `-BreakStmt 0x12b915df8 <col:3>
|   |       |-BinaryOperator 0x12b915ef0 <line:68:4, col:13> 'unsigned long' '='
|   |       | |-DeclRefExpr 0x12b915e98 <col:4> 'unsigned long' lvalue Var 0x12b8fa0d8 'triple' 'unsigned long'
|   |       | `-ImplicitCastExpr 0x12b915ed8 <col:13> 'unsigned long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x12b915eb8 <col:13> 'int' 0
|   |       `-BinaryOperator 0x12b915f50 <line:69:4, col:8> 'int' '='
|   |         |-DeclRefExpr 0x12b915f10 <col:4> 'int' lvalue Var 0x12b8f9f20 'i' 'int'
|   |         `-IntegerLiteral 0x12b915f30 <col:8> 'int' 0
|   |-BinaryOperator 0x12b916a18 <line:75:3, col:52> 'char *' '='
|   | |-DeclRefExpr 0x12b916018 <col:3> 'char *' lvalue Var 0x12b8f9df0 'retbuf' 'char *'
|   | `-CStyleCastExpr 0x12b9169f0 <col:10, col:52> 'char *' <IntegralToPointer>
|   |   `-CallExpr 0x12b916170 <col:17, col:52> 'int'
|   |     |-ImplicitCastExpr 0x12b916158 <col:17> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x12b916038 <col:17> 'int ()' Function 0x12b913650 'checked_malloc' 'int ()'
|   |     `-BinaryOperator 0x12b916138 <col:32, col:51> 'unsigned long' '*'
|   |       |-UnaryExprOrTypeTraitExpr 0x12b916068 <col:32, col:43> 'unsigned long' sizeof 'char'
|   |       `-ImplicitCastExpr 0x12b916120 <col:45, col:51> 'unsigned long' <IntegralCast>
|   |         `-ParenExpr 0x12b916100 <col:45, col:51> 'int'
|   |           `-BinaryOperator 0x12b9160e0 <col:46, col:50> 'int' '+'
|   |             |-ImplicitCastExpr 0x12b9160c8 <col:46> 'int' <LValueToRValue>
|   |             | `-DeclRefExpr 0x12b916088 <col:46> 'int' lvalue Var 0x12b8f9e88 'pos' 'int'
|   |             `-IntegerLiteral 0x12b9160a8 <col:50> 'int' 1
|   |-CallExpr 0x12b916e18 <line:76:3, col:27> 'void *'
|   | |-ImplicitCastExpr 0x12b916e00 <col:3> 'void *(*)(void *, const void *, unsigned long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x12b916d08 <col:3> 'void *(void *, const void *, unsigned long)' Function 0x12b916ab8 'memcpy' 'void *(void *, const void *, unsigned long)'
|   | |-ImplicitCastExpr 0x12b916e68 <col:10> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x12b916e50 <col:10> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x12b916d28 <col:10> 'char *' lvalue Var 0x12b8f9df0 'retbuf' 'char *'
|   | |-ImplicitCastExpr 0x12b916e98 <col:17> 'const void *' <BitCast>
|   | | `-ImplicitCastExpr 0x12b916e80 <col:17> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x12b916d48 <col:17> 'char *' lvalue Var 0x12b8f9d58 'outbuf' 'char *'
|   | `-ImplicitCastExpr 0x12b916ec8 <col:24> 'unsigned long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x12b916eb0 <col:24> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x12b916d68 <col:24> 'int' lvalue Var 0x12b8f9e88 'pos' 'int'
|   |-BinaryOperator 0x12b916fa0 <line:77:3, col:15> 'char' '='
|   | |-ArraySubscriptExpr 0x12b916f50 <col:3, col:13> 'char' lvalue
|   | | |-ImplicitCastExpr 0x12b916f20 <col:3> 'char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x12b916ee0 <col:3> 'char *' lvalue Var 0x12b8f9df0 'retbuf' 'char *'
|   | | `-ImplicitCastExpr 0x12b916f38 <col:10> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x12b916f00 <col:10> 'int' lvalue Var 0x12b8f9e88 'pos' 'int'
|   | `-ImplicitCastExpr 0x12b916f88 <col:15> 'char' <IntegralCast>
|   |   `-CharacterLiteral 0x12b916f70 <col:15> 'int' 0
|   |-CallExpr 0x12b917208 <line:78:3, col:14> 'void'
|   | |-ImplicitCastExpr 0x12b9171f0 <col:3> 'void (*)(void *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x12b917168 <col:3> 'void (void *)' Function 0x12b916ff8 'free' 'void (void *)'
|   | `-ImplicitCastExpr 0x12b917248 <col:8> 'void *' <BitCast>
|   |   `-ImplicitCastExpr 0x12b917230 <col:8> 'char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x12b917188 <col:8> 'char *' lvalue Var 0x12b8f9d58 'outbuf' 'char *'
|   `-ReturnStmt 0x12b917298 <line:80:3, col:10>
|     `-ImplicitCastExpr 0x12b917280 <col:10> 'char *' <LValueToRValue>
|       `-DeclRefExpr 0x12b917260 <col:10> 'char *' lvalue Var 0x12b8f9df0 'retbuf' 'char *'
|-FunctionDecl 0x12b916ab8 <line:76:3> col:3 implicit used memcpy 'void *(void *, const void *, unsigned long)' extern
| |-ParmVarDecl 0x12b916bb8 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x12b916c20 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x12b916c88 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x12b916b60 <<invalid sloc>> Implicit 882
`-FunctionDecl 0x12b916ff8 <line:78:3> col:3 implicit used free 'void (void *)' extern
  |-ParmVarDecl 0x12b9170f8 <<invalid sloc>> <invalid sloc> 'void *'
  `-BuiltinAttr 0x12b9170a0 <<invalid sloc>> Implicit 873
