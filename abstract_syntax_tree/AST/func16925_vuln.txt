TranslationUnitDecl 0x15103be08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x15103ccb8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x15103c3d0 '__int128'
|-TypedefDecl 0x15103cd28 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x15103c3f0 'unsigned __int128'
|-TypedefDecl 0x150814230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x150814000 'struct __NSConstantString_tag'
|   `-Record 0x15103cd80 '__NSConstantString_tag'
|-TypedefDecl 0x150814298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x15103c590 '__SVInt8_t'
|-TypedefDecl 0x150814300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x15103c5b0 '__SVInt16_t'
|-TypedefDecl 0x150814368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x15103c5d0 '__SVInt32_t'
|-TypedefDecl 0x1508143d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x15103c5f0 '__SVInt64_t'
|-TypedefDecl 0x150814438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x15103c610 '__SVUint8_t'
|-TypedefDecl 0x1508144a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x15103c630 '__SVUint16_t'
|-TypedefDecl 0x150814508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x15103c650 '__SVUint32_t'
|-TypedefDecl 0x150814570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x15103c670 '__SVUint64_t'
|-TypedefDecl 0x1508145d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x15103c690 '__SVFloat16_t'
|-TypedefDecl 0x150814640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x15103c6b0 '__SVFloat32_t'
|-TypedefDecl 0x1508146a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x15103c6d0 '__SVFloat64_t'
|-TypedefDecl 0x150814710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x15103c6f0 '__SVBfloat16_t'
|-TypedefDecl 0x150814778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x15103c710 '__clang_svint8x2_t'
|-TypedefDecl 0x1508147e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x15103c730 '__clang_svint16x2_t'
|-TypedefDecl 0x150814848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x15103c750 '__clang_svint32x2_t'
|-TypedefDecl 0x1508148b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x15103c770 '__clang_svint64x2_t'
|-TypedefDecl 0x150814918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x15103c790 '__clang_svuint8x2_t'
|-TypedefDecl 0x150814980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x15103c7b0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1508149e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x15103c7d0 '__clang_svuint32x2_t'
|-TypedefDecl 0x150814a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x15103c7f0 '__clang_svuint64x2_t'
|-TypedefDecl 0x150814ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x15103c810 '__clang_svfloat16x2_t'
|-TypedefDecl 0x150814b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x15103c830 '__clang_svfloat32x2_t'
|-TypedefDecl 0x150814b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x15103c850 '__clang_svfloat64x2_t'
|-TypedefDecl 0x150814bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x15103c870 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x150814c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x15103c890 '__clang_svint8x3_t'
|-TypedefDecl 0x150814cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x15103c8b0 '__clang_svint16x3_t'
|-TypedefDecl 0x150814d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x15103c8d0 '__clang_svint32x3_t'
|-TypedefDecl 0x150814d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x15103c8f0 '__clang_svint64x3_t'
|-TypedefDecl 0x150814df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x15103c910 '__clang_svuint8x3_t'
|-TypedefDecl 0x150814e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x15103c930 '__clang_svuint16x3_t'
|-TypedefDecl 0x150814ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x15103c950 '__clang_svuint32x3_t'
|-TypedefDecl 0x150814f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x15103c970 '__clang_svuint64x3_t'
|-TypedefDecl 0x150814f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x15103c990 '__clang_svfloat16x3_t'
|-TypedefDecl 0x15081d600 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x15103c9b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x15081d668 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x15103c9d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x15081d6d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x15103c9f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x15081d738 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x15103ca10 '__clang_svint8x4_t'
|-TypedefDecl 0x15081d7a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x15103ca30 '__clang_svint16x4_t'
|-TypedefDecl 0x15081d808 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x15103ca50 '__clang_svint32x4_t'
|-TypedefDecl 0x15081d870 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x15103ca70 '__clang_svint64x4_t'
|-TypedefDecl 0x15081d8d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x15103ca90 '__clang_svuint8x4_t'
|-TypedefDecl 0x15081d940 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x15103cab0 '__clang_svuint16x4_t'
|-TypedefDecl 0x15081d9a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x15103cad0 '__clang_svuint32x4_t'
|-TypedefDecl 0x15081da10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x15103caf0 '__clang_svuint64x4_t'
|-TypedefDecl 0x15081da78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x15103cb10 '__clang_svfloat16x4_t'
|-TypedefDecl 0x15081dae0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x15103cb30 '__clang_svfloat32x4_t'
|-TypedefDecl 0x15081db48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x15103cb50 '__clang_svfloat64x4_t'
|-TypedefDecl 0x15081dbb0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x15103cb70 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x15081dc18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x15103cb90 '__SVBool_t'
|-TypedefDecl 0x15081dc80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x15103cbb0 '__clang_svboolx2_t'
|-TypedefDecl 0x15081dce8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x15103cbd0 '__clang_svboolx4_t'
|-TypedefDecl 0x15081dd50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x15103cbf0 '__SVCount_t'
|-TypedefDecl 0x15081ddf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x15081ddb0 'char *'
|   `-BuiltinType 0x15103beb0 'char'
|-TypedefDecl 0x15081de68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x15081ddb0 'char *'
|   `-BuiltinType 0x15103beb0 'char'
|-FunctionDecl 0x15081e140 <dataset_diviso_filec/func16925_vuln.c:1:1, line:26:1> line:1:6 invalid fli_read_brun 'void (int *, int *, unsigned char *)'
| |-ParmVarDecl 0x15081df28 <col:20, col:26> col:26 invalid f 'int *'
| |-ParmVarDecl 0x15081dfa8 <col:29, col:43> col:43 invalid fli_header 'int *'
| |-ParmVarDecl 0x15081e058 <col:55, col:70> col:70 used framebuf 'unsigned char *'
| `-CompoundStmt 0x151088988 <line:2:1, line:26:1>
|   |-DeclStmt 0x15081e280 <line:3:2, col:19>
|   | `-VarDecl 0x15081e218 <col:2, col:17> col:17 used yc 'unsigned short'
|   |-DeclStmt 0x15081e318 <line:4:2, col:20>
|   | `-VarDecl 0x15081e2b0 <col:2, col:17> col:17 used pos 'unsigned char *'
|   `-ForStmt 0x151088950 <line:5:2, line:25:2>
|     |-BinaryOperator 0x15081e388 <line:5:7, col:10> 'unsigned short' '='
|     | |-DeclRefExpr 0x15081e330 <col:7> 'unsigned short' lvalue Var 0x15081e218 'yc' 'unsigned short'
|     | `-ImplicitCastExpr 0x15081e370 <col:10> 'unsigned short' <IntegralCast>
|     |   `-IntegerLiteral 0x15081e350 <col:10> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x15081e430 <col:13, col:30> 'int' contains-errors '<'
|     | |-DeclRefExpr 0x15081e3a8 <col:13> 'unsigned short' lvalue Var 0x15081e218 'yc' 'unsigned short'
|     | `-CXXDependentScopeMemberExpr 0x15081e3e8 <col:18, col:30> '<dependent type>' contains-errors lvalue ->height
|     |   `-RecoveryExpr 0x15081e3c8 <col:18> '<dependent type>' contains-errors lvalue
|     |-UnaryOperator 0x15081e470 <col:38, col:40> 'unsigned short' postfix '++' cannot overflow
|     | `-DeclRefExpr 0x15081e450 <col:38> 'unsigned short' lvalue Var 0x15081e218 'yc' 'unsigned short'
|     `-CompoundStmt 0x151088918 <col:44, line:25:2>
|       |-DeclStmt 0x150840e88 <line:6:3, col:30>
|       | |-VarDecl 0x15081e4a0 <col:3, col:18> col:18 used xc 'unsigned short'
|       | |-VarDecl 0x15081e520 <col:3, col:22> col:22 used pc 'unsigned short'
|       | `-VarDecl 0x150840e00 <col:3, col:26> col:26 used pcnt 'unsigned short'
|       |-BinaryOperator 0x150841088 <line:7:3, col:21> 'unsigned short' contains-errors '='
|       | |-DeclRefExpr 0x150840ea0 <col:3> 'unsigned short' lvalue Var 0x15081e520 'pc' 'unsigned short'
|       | `-CallExpr 0x150841060 <col:6, col:21> '<dependent type>' contains-errors
|       |   |-DeclRefExpr 0x150841020 <col:6> 'int ()' Function 0x150840f68 'fli_read_char' 'int ()'
|       |   `-RecoveryExpr 0x150841040 <col:20> '<dependent type>' contains-errors lvalue
|       |-BinaryOperator 0x150841100 <line:8:3, col:6> 'unsigned short' '='
|       | |-DeclRefExpr 0x1508410a8 <col:3> 'unsigned short' lvalue Var 0x15081e4a0 'xc' 'unsigned short'
|       | `-ImplicitCastExpr 0x1508410e8 <col:6> 'unsigned short' <IntegralCast>
|       |   `-IntegerLiteral 0x1508410c8 <col:6> 'int' 0
|       |-BinaryOperator 0x150841248 <line:9:3, col:39> 'unsigned char *' contains-errors '='
|       | |-DeclRefExpr 0x150841120 <col:3> 'unsigned char *' lvalue Var 0x15081e2b0 'pos' 'unsigned char *'
|       | `-BinaryOperator 0x150841228 <col:7, col:39> '<dependent type>' contains-errors '+'
|       |   |-DeclRefExpr 0x150841140 <col:7> 'unsigned char *' lvalue ParmVar 0x15081e058 'framebuf' 'unsigned char *'
|       |   `-ParenExpr 0x150841208 <col:16, col:39> '<dependent type>' contains-errors
|       |     `-BinaryOperator 0x1508411e8 <col:17, col:37> '<dependent type>' contains-errors '*'
|       |       |-CXXDependentScopeMemberExpr 0x150841180 <col:17, col:29> '<dependent type>' contains-errors lvalue ->width
|       |       | `-RecoveryExpr 0x150841160 <col:17> '<dependent type>' contains-errors lvalue
|       |       `-DeclRefExpr 0x1508411c8 <col:37> 'unsigned short' lvalue Var 0x15081e218 'yc' 'unsigned short'
|       `-ForStmt 0x1510888e0 <line:10:3, line:24:3>
|         |-BinaryOperator 0x1508412c0 <line:10:8, col:13> 'unsigned short' '='
|         | |-DeclRefExpr 0x150841268 <col:8> 'unsigned short' lvalue Var 0x150840e00 'pcnt' 'unsigned short'
|         | `-ImplicitCastExpr 0x1508412a8 <col:13> 'unsigned short' <LValueToRValue>
|         |   `-DeclRefExpr 0x150841288 <col:13> 'unsigned short' lvalue Var 0x15081e520 'pc' 'unsigned short'
|         |-<<<NULL>>>
|         |-BinaryOperator 0x150841350 <col:17, col:22> 'int' '>'
|         | |-ImplicitCastExpr 0x150841338 <col:17> 'int' <IntegralCast>
|         | | `-ImplicitCastExpr 0x150841320 <col:17> 'unsigned short' <LValueToRValue>
|         | |   `-DeclRefExpr 0x1508412e0 <col:17> 'unsigned short' lvalue Var 0x150840e00 'pcnt' 'unsigned short'
|         | `-IntegerLiteral 0x150841300 <col:22> 'int' 0
|         |-UnaryOperator 0x150841390 <col:25, col:29> 'unsigned short' postfix '--' cannot overflow
|         | `-DeclRefExpr 0x150841370 <col:25> 'unsigned short' lvalue Var 0x150840e00 'pcnt' 'unsigned short'
|         `-CompoundStmt 0x1510888b8 <col:33, line:24:3>
|           |-DeclStmt 0x150841428 <line:11:4, col:21>
|           | `-VarDecl 0x1508413c0 <col:4, col:19> col:19 used ps 'unsigned short'
|           |-BinaryOperator 0x1508414c8 <line:12:4, col:22> 'unsigned short' contains-errors '='
|           | |-DeclRefExpr 0x150841440 <col:4> 'unsigned short' lvalue Var 0x1508413c0 'ps' 'unsigned short'
|           | `-CallExpr 0x1508414a0 <col:7, col:22> '<dependent type>' contains-errors
|           |   |-DeclRefExpr 0x150841460 <col:7> 'int ()' Function 0x150840f68 'fli_read_char' 'int ()'
|           |   `-RecoveryExpr 0x150841480 <col:21> '<dependent type>' contains-errors lvalue
|           `-IfStmt 0x151088888 <line:13:4, line:23:4> has_else
|             |-BinaryOperator 0x150841558 <line:13:8, col:13> 'int' '&'
|             | |-ImplicitCastExpr 0x150841540 <col:8> 'int' <IntegralCast>
|             | | `-ImplicitCastExpr 0x150841528 <col:8> 'unsigned short' <LValueToRValue>
|             | |   `-DeclRefExpr 0x1508414e8 <col:8> 'unsigned short' lvalue Var 0x1508413c0 'ps' 'unsigned short'
|             | `-IntegerLiteral 0x150841508 <col:13> 'int' 128
|             |-CompoundStmt 0x150841940 <col:19, line:18:4>
|             | |-DeclStmt 0x1508415f8 <line:14:5, col:23>
|             | | `-VarDecl 0x150841590 <col:5, col:20> col:20 used len 'unsigned short'
|             | `-ForStmt 0x150841908 <line:15:5, line:17:5>
|             |   |-BinaryOperator 0x1508416f0 <line:15:10, col:28> 'unsigned short' '='
|             |   | |-DeclRefExpr 0x150841610 <col:10> 'unsigned short' lvalue Var 0x150841590 'len' 'unsigned short'
|             |   | `-ImplicitCastExpr 0x1508416d8 <col:14, col:28> 'unsigned short' <IntegralCast>
|             |   |   `-UnaryOperator 0x1508416c0 <col:14, col:28> 'int' prefix '-' cannot overflow
|             |   |     `-ImplicitCastExpr 0x1508416a8 <col:15, col:28> 'int' <IntegralCast>
|             |   |       `-CStyleCastExpr 0x150841680 <col:15, col:28> 'signed char' <IntegralCast>
|             |   |         `-ImplicitCastExpr 0x150841668 <col:28> 'unsigned short' <LValueToRValue> part_of_explicit_cast
|             |   |           `-DeclRefExpr 0x150841630 <col:28> 'unsigned short' lvalue Var 0x1508413c0 'ps' 'unsigned short'
|             |   |-<<<NULL>>>
|             |   |-BinaryOperator 0x150841780 <col:32, col:36> 'int' '>'
|             |   | |-ImplicitCastExpr 0x150841768 <col:32> 'int' <IntegralCast>
|             |   | | `-ImplicitCastExpr 0x150841750 <col:32> 'unsigned short' <LValueToRValue>
|             |   | |   `-DeclRefExpr 0x150841710 <col:32> 'unsigned short' lvalue Var 0x150841590 'len' 'unsigned short'
|             |   | `-IntegerLiteral 0x150841730 <col:36> 'int' 0
|             |   |-UnaryOperator 0x1508417c0 <col:39, col:42> 'unsigned short' postfix '--' cannot overflow
|             |   | `-DeclRefExpr 0x1508417a0 <col:39> 'unsigned short' lvalue Var 0x150841590 'len' 'unsigned short'
|             |   `-CompoundStmt 0x1508418f0 <col:46, line:17:5>
|             |     `-BinaryOperator 0x1508418d0 <line:16:6, col:31> 'unsigned char' contains-errors '='
|             |       |-ArraySubscriptExpr 0x150841848 <col:6, col:14> 'unsigned char' lvalue
|             |       | |-ImplicitCastExpr 0x150841830 <col:6> 'unsigned char *' <LValueToRValue>
|             |       | | `-DeclRefExpr 0x1508417d8 <col:6> 'unsigned char *' lvalue Var 0x15081e2b0 'pos' 'unsigned char *'
|             |       | `-UnaryOperator 0x150841818 <col:10, col:12> 'unsigned short' postfix '++' cannot overflow
|             |       |   `-DeclRefExpr 0x1508417f8 <col:10> 'unsigned short' lvalue Var 0x15081e4a0 'xc' 'unsigned short'
|             |       `-CallExpr 0x1508418a8 <col:16, col:31> '<dependent type>' contains-errors
|             |         |-DeclRefExpr 0x150841868 <col:16> 'int ()' Function 0x150840f68 'fli_read_char' 'int ()'
|             |         `-RecoveryExpr 0x150841888 <col:30> '<dependent type>' contains-errors lvalue
|             `-CompoundStmt 0x151088858 <line:18:11, line:23:4>
|               |-DeclStmt 0x1508419e0 <line:19:5, col:22>
|               | `-VarDecl 0x150841978 <col:5, col:19> col:19 used val 'unsigned char'
|               |-BinaryOperator 0x150841a80 <line:20:5, col:24> 'unsigned char' contains-errors '='
|               | |-DeclRefExpr 0x1508419f8 <col:5> 'unsigned char' lvalue Var 0x150841978 'val' 'unsigned char'
|               | `-CallExpr 0x150841a58 <col:9, col:24> '<dependent type>' contains-errors
|               |   |-DeclRefExpr 0x150841a18 <col:9> 'int ()' Function 0x150840f68 'fli_read_char' 'int ()'
|               |   `-RecoveryExpr 0x150841a38 <col:23> '<dependent type>' contains-errors lvalue
|               |-CallExpr 0x151088708 <line:21:5, col:31> 'void *'
|               | |-ImplicitCastExpr 0x1510886f0 <col:5> 'void *(*)(void *, int, unsigned long)' <FunctionToPointerDecay>
|               | | `-DeclRefExpr 0x151088560 <col:5> 'void *(void *, int, unsigned long)' Function 0x151088310 'memset' 'void *(void *, int, unsigned long)'
|               | |-ImplicitCastExpr 0x151088740 <col:12, col:21> 'void *' <BitCast>
|               | | `-UnaryOperator 0x151088630 <col:12, col:21> 'unsigned char *' prefix '&' cannot overflow
|               | |   `-ParenExpr 0x151088610 <col:13, col:21> 'unsigned char' lvalue
|               | |     `-ArraySubscriptExpr 0x1510885f0 <col:14, col:20> 'unsigned char' lvalue
|               | |       |-ImplicitCastExpr 0x1510885c0 <col:14> 'unsigned char *' <LValueToRValue>
|               | |       | `-DeclRefExpr 0x151088580 <col:14> 'unsigned char *' lvalue Var 0x15081e2b0 'pos' 'unsigned char *'
|               | |       `-ImplicitCastExpr 0x1510885d8 <col:18> 'unsigned short' <LValueToRValue>
|               | |         `-DeclRefExpr 0x1510885a0 <col:18> 'unsigned short' lvalue Var 0x15081e4a0 'xc' 'unsigned short'
|               | |-ImplicitCastExpr 0x151088770 <col:24> 'int' <IntegralCast>
|               | | `-ImplicitCastExpr 0x151088758 <col:24> 'unsigned char' <LValueToRValue>
|               | |   `-DeclRefExpr 0x151088648 <col:24> 'unsigned char' lvalue Var 0x150841978 'val' 'unsigned char'
|               | `-ImplicitCastExpr 0x1510887a0 <col:29> 'unsigned long' <IntegralCast>
|               |   `-ImplicitCastExpr 0x151088788 <col:29> 'unsigned short' <LValueToRValue>
|               |     `-DeclRefExpr 0x151088668 <col:29> 'unsigned short' lvalue Var 0x1508413c0 'ps' 'unsigned short'
|               `-CompoundAssignOperator 0x151088828 <line:22:5, col:9> 'unsigned short' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|                 |-DeclRefExpr 0x1510887b8 <col:5> 'unsigned short' lvalue Var 0x15081e4a0 'xc' 'unsigned short'
|                 `-ImplicitCastExpr 0x151088810 <col:9> 'int' <IntegralCast>
|                   `-ImplicitCastExpr 0x1510887f8 <col:9> 'unsigned short' <LValueToRValue>
|                     `-DeclRefExpr 0x1510887d8 <col:9> 'unsigned short' lvalue Var 0x1508413c0 'ps' 'unsigned short'
`-FunctionDecl 0x151088310 <line:21:5> col:5 implicit used memset 'void *(void *, int, unsigned long)' extern
  |-ParmVarDecl 0x151088410 <<invalid sloc>> <invalid sloc> 'void *'
  |-ParmVarDecl 0x151088478 <<invalid sloc>> <invalid sloc> 'int'
  |-ParmVarDecl 0x1510884e0 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x1510883b8 <<invalid sloc>> Implicit 900
