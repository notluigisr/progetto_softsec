TranslationUnitDecl 0x12683c408 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x12683d2b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x12683c9d0 '__int128'
|-TypedefDecl 0x12683d328 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x12683c9f0 'unsigned __int128'
|-TypedefDecl 0x12701e830 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12701e600 'struct __NSConstantString_tag'
|   `-Record 0x12683d380 '__NSConstantString_tag'
|-TypedefDecl 0x12701e898 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x12683cb90 '__SVInt8_t'
|-TypedefDecl 0x12701e900 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x12683cbb0 '__SVInt16_t'
|-TypedefDecl 0x12701e968 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x12683cbd0 '__SVInt32_t'
|-TypedefDecl 0x12701e9d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x12683cbf0 '__SVInt64_t'
|-TypedefDecl 0x12701ea38 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x12683cc10 '__SVUint8_t'
|-TypedefDecl 0x12701eaa0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x12683cc30 '__SVUint16_t'
|-TypedefDecl 0x12701eb08 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x12683cc50 '__SVUint32_t'
|-TypedefDecl 0x12701eb70 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x12683cc70 '__SVUint64_t'
|-TypedefDecl 0x12701ebd8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x12683cc90 '__SVFloat16_t'
|-TypedefDecl 0x12701ec40 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x12683ccb0 '__SVFloat32_t'
|-TypedefDecl 0x12701eca8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x12683ccd0 '__SVFloat64_t'
|-TypedefDecl 0x12701ed10 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x12683ccf0 '__SVBfloat16_t'
|-TypedefDecl 0x12701ed78 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x12683cd10 '__clang_svint8x2_t'
|-TypedefDecl 0x12701ede0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x12683cd30 '__clang_svint16x2_t'
|-TypedefDecl 0x12701ee48 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x12683cd50 '__clang_svint32x2_t'
|-TypedefDecl 0x12701eeb0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x12683cd70 '__clang_svint64x2_t'
|-TypedefDecl 0x12701ef18 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x12683cd90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12701ef80 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x12683cdb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12701efe8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x12683cdd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12701f050 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x12683cdf0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12701f0b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x12683ce10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12701f120 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x12683ce30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12701f188 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x12683ce50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12701f1f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x12683ce70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12701f258 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x12683ce90 '__clang_svint8x3_t'
|-TypedefDecl 0x12701f2c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x12683ceb0 '__clang_svint16x3_t'
|-TypedefDecl 0x12701f328 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x12683ced0 '__clang_svint32x3_t'
|-TypedefDecl 0x12701f390 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x12683cef0 '__clang_svint64x3_t'
|-TypedefDecl 0x12701f3f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x12683cf10 '__clang_svuint8x3_t'
|-TypedefDecl 0x12701f460 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x12683cf30 '__clang_svuint16x3_t'
|-TypedefDecl 0x12701f4c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x12683cf50 '__clang_svuint32x3_t'
|-TypedefDecl 0x12701f530 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x12683cf70 '__clang_svuint64x3_t'
|-TypedefDecl 0x12701f598 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x12683cf90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12701fe00 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x12683cfb0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12701fe68 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x12683cfd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12701fed0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x12683cff0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12701ff38 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x12683d010 '__clang_svint8x4_t'
|-TypedefDecl 0x12701ffa0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x12683d030 '__clang_svint16x4_t'
|-TypedefDecl 0x127020008 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x12683d050 '__clang_svint32x4_t'
|-TypedefDecl 0x127020070 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x12683d070 '__clang_svint64x4_t'
|-TypedefDecl 0x1270200d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x12683d090 '__clang_svuint8x4_t'
|-TypedefDecl 0x127020140 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x12683d0b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x1270201a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x12683d0d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x127020210 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x12683d0f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x127020278 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x12683d110 '__clang_svfloat16x4_t'
|-TypedefDecl 0x1270202e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x12683d130 '__clang_svfloat32x4_t'
|-TypedefDecl 0x127020348 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x12683d150 '__clang_svfloat64x4_t'
|-TypedefDecl 0x1270203b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x12683d170 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x127020418 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x12683d190 '__SVBool_t'
|-TypedefDecl 0x127020480 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x12683d1b0 '__clang_svboolx2_t'
|-TypedefDecl 0x1270204e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x12683d1d0 '__clang_svboolx4_t'
|-TypedefDecl 0x127020550 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x12683d1f0 '__SVCount_t'
|-TypedefDecl 0x1270205f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1270205b0 'char *'
|   `-BuiltinType 0x12683c4b0 'char'
|-TypedefDecl 0x127020668 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1270205b0 'char *'
|   `-BuiltinType 0x12683c4b0 'char'
|-FunctionDecl 0x1270209e8 <dataset_diviso_filec/func20988_vuln.c:1:1, line:60:1> line:1:5 invalid _XF86LoadQueryLocaleFont 'int (int *, const char *, int **, int *)'
| |-ParmVarDecl 0x127020728 <line:2:4, col:13> col:13 invalid dpy 'int *'
| |-ParmVarDecl 0x1270207a8 <line:3:4, col:18> col:18 used name 'const char *'
| |-ParmVarDecl 0x127020860 <line:4:4, col:18> col:18 invalid xfp 'int **'
| |-ParmVarDecl 0x1270208e0 <line:5:4, col:10> col:10 invalid fidp 'int *'
| `-CompoundStmt 0x12603a200 <line:6:1, line:60:1>
|   |-DeclStmt 0x127020b30 <line:7:5, col:10>
|   | `-VarDecl 0x127020ac8 <col:5, col:9> col:9 used l 'int'
|   |-DeclStmt 0x127020c60 <line:8:5, col:28>
|   | |-VarDecl 0x127020b60 <col:5, col:17> col:17 used charset 'const char *'
|   | `-VarDecl 0x127020be0 <col:5, col:27> col:27 used p 'const char *'
|   |-DeclStmt 0x127020d88 <line:9:5, col:18>
|   | `-VarDecl 0x127020d20 <col:5, col:17> col:10 used buf 'char[256]'
|   |-IfStmt 0x126035048 <line:13:5, line:14:9>
|   | |-UnaryOperator 0x126035000 <line:13:9, col:10> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x127020dd8 <col:10> 'const char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x127020db8 <col:10> 'const char *' lvalue ParmVar 0x1270207a8 'name' 'const char *'
|   | `-ReturnStmt 0x126035038 <line:14:2, col:9>
|   |   `-IntegerLiteral 0x126035018 <col:9> 'int' 0
|   |-BinaryOperator 0x126035788 <line:15:5, col:26> 'int' '='
|   | |-DeclRefExpr 0x126035068 <col:5> 'int' lvalue Var 0x127020ac8 'l' 'int'
|   | `-CStyleCastExpr 0x126035760 <col:9, col:26> 'int' <IntegralCast>
|   |   `-CallExpr 0x126035708 <col:15, col:26> 'unsigned long'
|   |     |-ImplicitCastExpr 0x1260356f0 <col:15> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x126035660 <col:15> 'unsigned long (const char *)' Function 0x1260354f0 'strlen' 'unsigned long (const char *)'
|   |     `-ImplicitCastExpr 0x126035730 <col:22> 'const char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x126035680 <col:22> 'const char *' lvalue ParmVar 0x1270207a8 'name' 'const char *'
|   |-IfStmt 0x126035b00 <line:16:5, line:17:9>
|   | |-BinaryOperator 0x126035ab0 <line:16:9, col:55> 'int' '||'
|   | | |-BinaryOperator 0x126035958 <col:9, col:33> 'int' '||'
|   | | | |-BinaryOperator 0x126035800 <col:9, col:13> 'int' '<'
|   | | | | |-ImplicitCastExpr 0x1260357e8 <col:9> 'int' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x1260357a8 <col:9> 'int' lvalue Var 0x127020ac8 'l' 'int'
|   | | | | `-IntegerLiteral 0x1260357c8 <col:13> 'int' 2
|   | | | `-BinaryOperator 0x126035938 <col:18, col:33> 'int' '!='
|   | | |   |-ImplicitCastExpr 0x126035920 <col:18, col:28> 'int' <IntegralCast>
|   | | |   | `-ImplicitCastExpr 0x126035908 <col:18, col:28> 'char' <LValueToRValue>
|   | | |   |   `-ArraySubscriptExpr 0x1260358d0 <col:18, col:28> 'const char' lvalue
|   | | |   |     |-ImplicitCastExpr 0x1260358b8 <col:18> 'const char *' <LValueToRValue>
|   | | |   |     | `-DeclRefExpr 0x126035820 <col:18> 'const char *' lvalue ParmVar 0x1270207a8 'name' 'const char *'
|   | | |   |     `-BinaryOperator 0x126035898 <col:23, col:27> 'int' '-'
|   | | |   |       |-ImplicitCastExpr 0x126035880 <col:23> 'int' <LValueToRValue>
|   | | |   |       | `-DeclRefExpr 0x126035840 <col:23> 'int' lvalue Var 0x127020ac8 'l' 'int'
|   | | |   |       `-IntegerLiteral 0x126035860 <col:27> 'int' 1
|   | | |   `-CharacterLiteral 0x1260358f0 <col:33> 'int' 42
|   | | `-BinaryOperator 0x126035a90 <col:40, col:55> 'int' '!='
|   | |   |-ImplicitCastExpr 0x126035a78 <col:40, col:50> 'int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x126035a60 <col:40, col:50> 'char' <LValueToRValue>
|   | |   |   `-ArraySubscriptExpr 0x126035a28 <col:40, col:50> 'const char' lvalue
|   | |   |     |-ImplicitCastExpr 0x126035a10 <col:40> 'const char *' <LValueToRValue>
|   | |   |     | `-DeclRefExpr 0x126035978 <col:40> 'const char *' lvalue ParmVar 0x1270207a8 'name' 'const char *'
|   | |   |     `-BinaryOperator 0x1260359f0 <col:45, col:49> 'int' '-'
|   | |   |       |-ImplicitCastExpr 0x1260359d8 <col:45> 'int' <LValueToRValue>
|   | |   |       | `-DeclRefExpr 0x126035998 <col:45> 'int' lvalue Var 0x127020ac8 'l' 'int'
|   | |   |       `-IntegerLiteral 0x1260359b8 <col:49> 'int' 2
|   | |   `-CharacterLiteral 0x126035a48 <col:55> 'int' 45
|   | `-ReturnStmt 0x126035af0 <line:17:2, col:9>
|   |   `-IntegerLiteral 0x126035ad0 <col:9> 'int' 0
|   |-BinaryOperator 0x126035b98 <line:18:5, col:15> 'const char *' contains-errors '='
|   | |-DeclRefExpr 0x126035b20 <col:5> 'const char *' lvalue Var 0x127020b60 'charset' 'const char *'
|   | `-RecoveryExpr 0x126035b78 <col:15> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x126037eb0 <line:21:5, line:22:41>
|   | |-RecoveryExpr 0x126035e48 <line:21:9, col:36> '_Bool' contains-errors
|   | `-BinaryOperator 0x126037e90 <line:22:2, col:41> 'const char *' contains-errors '='
|   |   |-DeclRefExpr 0x126035e68 <col:2> 'const char *' lvalue Var 0x127020b60 'charset' 'const char *'
|   |   `-CallExpr 0x126037e60 <col:12, col:41> '<dependent type>' contains-errors
|   |     |-DeclRefExpr 0x126035f68 <col:12> 'int ()' Function 0x126035eb0 'XLC_PUBLIC' 'int ()'
|   |     |-RecoveryExpr 0x126037e20 <col:23> '<dependent type>' contains-errors lvalue
|   |     `-RecoveryExpr 0x126037e40 <col:28> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x1260388b8 <line:23:5, line:27:5>
|   | |-BinaryOperator 0x1260386f0 <line:23:9, col:111> 'int' '||'
|   | | |-BinaryOperator 0x1260384c8 <col:9, col:81> 'int' '||'
|   | | | |-BinaryOperator 0x1260383c0 <col:9, col:62> 'int' '||'
|   | | | | |-BinaryOperator 0x126038310 <col:9, col:52> 'int' '||'
|   | | | | | |-UnaryOperator 0x126037f08 <col:9, col:10> 'int' prefix '!' cannot overflow
|   | | | | | | `-ImplicitCastExpr 0x126037ef0 <col:10> 'const char *' <LValueToRValue>
|   | | | | | |   `-DeclRefExpr 0x126037ed0 <col:10> 'const char *' lvalue Var 0x127020b60 'charset' 'const char *'
|   | | | | | `-BinaryOperator 0x1260382f0 <col:21, col:52> 'int' '=='
|   | | | | |   |-ParenExpr 0x126038298 <col:21, col:47> 'const char *'
|   | | | | |   | `-BinaryOperator 0x126038278 <col:22, col:46> 'const char *' '='
|   | | | | |   |   |-DeclRefExpr 0x126037f20 <col:22> 'const char *' lvalue Var 0x127020be0 'p' 'const char *'
|   | | | | |   |   `-ImplicitCastExpr 0x126038260 <col:26, col:46> 'const char *' <NoOp>
|   | | | | |   |     `-CallExpr 0x126038218 <col:26, col:46> 'char *'
|   | | | | |   |       |-ImplicitCastExpr 0x126038200 <col:26> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   | | | | |   |       | `-DeclRefExpr 0x126038160 <col:26> 'char *(const char *, int)' Function 0x126037f80 'strrchr' 'char *(const char *, int)'
|   | | | | |   |       |-ImplicitCastExpr 0x126038248 <col:34> 'const char *' <LValueToRValue>
|   | | | | |   |       | `-DeclRefExpr 0x126038180 <col:34> 'const char *' lvalue Var 0x127020b60 'charset' 'const char *'
|   | | | | |   |       `-CharacterLiteral 0x1260381a0 <col:43> 'int' 45
|   | | | | |   `-ImplicitCastExpr 0x1260382d8 <col:52> 'const char *' <NullToPointer>
|   | | | | |     `-IntegerLiteral 0x1260382b8 <col:52> 'int' 0
|   | | | | `-BinaryOperator 0x1260383a0 <col:57, col:62> 'int' '=='
|   | | | |   |-ImplicitCastExpr 0x126038370 <col:57> 'const char *' <LValueToRValue>
|   | | | |   | `-DeclRefExpr 0x126038330 <col:57> 'const char *' lvalue Var 0x127020be0 'p' 'const char *'
|   | | | |   `-ImplicitCastExpr 0x126038388 <col:62> 'const char *' <LValueToRValue>
|   | | | |     `-DeclRefExpr 0x126038350 <col:62> 'const char *' lvalue Var 0x127020b60 'charset' 'const char *'
|   | | | `-BinaryOperator 0x1260384a8 <col:73, col:81> 'int' '=='
|   | | |   |-ImplicitCastExpr 0x126038490 <col:73, col:76> 'int' <IntegralCast>
|   | | |   | `-ImplicitCastExpr 0x126038478 <col:73, col:76> 'char' <LValueToRValue>
|   | | |   |   `-ArraySubscriptExpr 0x126038438 <col:73, col:76> 'const char' lvalue
|   | | |   |     |-ImplicitCastExpr 0x126038420 <col:73> 'const char *' <LValueToRValue>
|   | | |   |     | `-DeclRefExpr 0x1260383e0 <col:73> 'const char *' lvalue Var 0x127020be0 'p' 'const char *'
|   | | |   |     `-IntegerLiteral 0x126038400 <col:75> 'int' 1
|   | | |   `-IntegerLiteral 0x126038458 <col:81> 'int' 0
|   | | `-ParenExpr 0x1260386d0 <col:86, col:111> 'int'
|   | |   `-BinaryOperator 0x1260386b0 <col:87, col:110> 'int' '&&'
|   | |     |-BinaryOperator 0x1260385a8 <col:87, col:95> 'int' '=='
|   | |     | |-ImplicitCastExpr 0x126038590 <col:87, col:90> 'int' <IntegralCast>
|   | |     | | `-ImplicitCastExpr 0x126038578 <col:87, col:90> 'char' <LValueToRValue>
|   | |     | |   `-ArraySubscriptExpr 0x126038540 <col:87, col:90> 'const char' lvalue
|   | |     | |     |-ImplicitCastExpr 0x126038528 <col:87> 'const char *' <LValueToRValue>
|   | |     | |     | `-DeclRefExpr 0x1260384e8 <col:87> 'const char *' lvalue Var 0x127020be0 'p' 'const char *'
|   | |     | |     `-IntegerLiteral 0x126038508 <col:89> 'int' 1
|   | |     | `-CharacterLiteral 0x126038560 <col:95> 'int' 42
|   | |     `-BinaryOperator 0x126038690 <col:102, col:110> 'int' '=='
|   | |       |-ImplicitCastExpr 0x126038678 <col:102, col:105> 'int' <IntegralCast>
|   | |       | `-ImplicitCastExpr 0x126038660 <col:102, col:105> 'char' <LValueToRValue>
|   | |       |   `-ArraySubscriptExpr 0x126038620 <col:102, col:105> 'const char' lvalue
|   | |       |     |-ImplicitCastExpr 0x126038608 <col:102> 'const char *' <LValueToRValue>
|   | |       |     | `-DeclRefExpr 0x1260385c8 <col:102> 'const char *' lvalue Var 0x127020be0 'p' 'const char *'
|   | |       |     `-IntegerLiteral 0x1260385e8 <col:104> 'int' 2
|   | |       `-IntegerLiteral 0x126038640 <col:110> 'int' 0
|   | `-CompoundStmt 0x126038898 <col:114, line:27:5>
|   |   |-BinaryOperator 0x1260387c0 <line:25:2, col:12> 'const char *' '='
|   |   | |-DeclRefExpr 0x126038710 <col:2> 'const char *' lvalue Var 0x127020b60 'charset' 'const char *'
|   |   | `-ImplicitCastExpr 0x1260387a8 <col:12> 'const char *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x126038790 <col:12> 'char *' <ArrayToPointerDecay>
|   |   |     `-StringLiteral 0x126038770 <col:12> 'char[4]' lvalue "STR"
|   |   `-BinaryOperator 0x126038878 <line:26:2, col:16> 'const char *' '='
|   |     |-DeclRefExpr 0x1260387e0 <col:2> 'const char *' lvalue Var 0x127020be0 'p' 'const char *'
|   |     `-BinaryOperator 0x126038858 <col:6, col:16> 'const char *' '+'
|   |       |-ImplicitCastExpr 0x126038840 <col:6> 'const char *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x126038800 <col:6> 'const char *' lvalue Var 0x127020b60 'charset' 'const char *'
|   |       `-IntegerLiteral 0x126038820 <col:16> 'int' 7
|   |-IfStmt 0x126038ac0 <line:28:5, line:29:9>
|   | |-BinaryOperator 0x126038a70 <line:28:9, col:33> 'int' '<'
|   | | |-BinaryOperator 0x126038a18 <col:9, col:29> 'long' '-'
|   | | | |-ImplicitCastExpr 0x126038a00 <col:9, col:13> 'long' <IntegralCast>
|   | | | | `-BinaryOperator 0x126038930 <col:9, col:13> 'int' '-'
|   | | | |   |-ImplicitCastExpr 0x126038918 <col:9> 'int' <LValueToRValue>
|   | | | |   | `-DeclRefExpr 0x1260388d8 <col:9> 'int' lvalue Var 0x127020ac8 'l' 'int'
|   | | | |   `-IntegerLiteral 0x1260388f8 <col:13> 'int' 2
|   | | | `-ParenExpr 0x1260389e0 <col:17, col:29> 'long'
|   | | |   `-BinaryOperator 0x1260389c0 <col:18, col:22> 'long' '-'
|   | | |     |-ImplicitCastExpr 0x126038990 <col:18> 'const char *' <LValueToRValue>
|   | | |     | `-DeclRefExpr 0x126038950 <col:18> 'const char *' lvalue Var 0x127020be0 'p' 'const char *'
|   | | |     `-ImplicitCastExpr 0x1260389a8 <col:22> 'const char *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x126038970 <col:22> 'const char *' lvalue Var 0x127020b60 'charset' 'const char *'
|   | | `-ImplicitCastExpr 0x126038a58 <col:33> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x126038a38 <col:33> 'int' 0
|   | `-ReturnStmt 0x126038ab0 <line:29:2, col:9>
|   |   `-IntegerLiteral 0x126038a90 <col:9> 'int' 0
|   |-IfStmt 0x1260392d0 <line:30:5, line:31:9>
|   | |-CallExpr 0x126039250 <line:30:9, col:81> 'int'
|   | | |-ImplicitCastExpr 0x126039238 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x126038bc0 <col:9> 'int ()' Function 0x126038b08 '_XlcNCompareISOLatin1' 'int ()'
|   | | |-BinaryOperator 0x126038d60 <col:31, col:58> 'const char *' '-'
|   | | | |-BinaryOperator 0x126038c90 <col:31, col:42> 'const char *' '-'
|   | | | | |-BinaryOperator 0x126038c50 <col:31, col:38> 'const char *' '+'
|   | | | | | |-ImplicitCastExpr 0x126038c20 <col:31> 'const char *' <LValueToRValue>
|   | | | | | | `-DeclRefExpr 0x126038be0 <col:31> 'const char *' lvalue ParmVar 0x1270207a8 'name' 'const char *'
|   | | | | | `-ImplicitCastExpr 0x126038c38 <col:38> 'int' <LValueToRValue>
|   | | | | |   `-DeclRefExpr 0x126038c00 <col:38> 'int' lvalue Var 0x127020ac8 'l' 'int'
|   | | | | `-IntegerLiteral 0x126038c70 <col:42> 'int' 2
|   | | | `-ParenExpr 0x126038d40 <col:46, col:58> 'long'
|   | | |   `-BinaryOperator 0x126038d20 <col:47, col:51> 'long' '-'
|   | | |     |-ImplicitCastExpr 0x126038cf0 <col:47> 'const char *' <LValueToRValue>
|   | | |     | `-DeclRefExpr 0x126038cb0 <col:47> 'const char *' lvalue Var 0x127020be0 'p' 'const char *'
|   | | |     `-ImplicitCastExpr 0x126038d08 <col:51> 'const char *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x126038cd0 <col:51> 'const char *' lvalue Var 0x127020b60 'charset' 'const char *'
|   | | |-ImplicitCastExpr 0x126039288 <col:61> 'const char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x126038d80 <col:61> 'const char *' lvalue Var 0x127020b60 'charset' 'const char *'
|   | | `-BinaryOperator 0x126039218 <col:70, col:74> 'long' '-'
|   | |   |-ImplicitCastExpr 0x126038de0 <col:70> 'const char *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x126038da0 <col:70> 'const char *' lvalue Var 0x127020be0 'p' 'const char *'
|   | |   `-ImplicitCastExpr 0x126039200 <col:74> 'const char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x126038dc0 <col:74> 'const char *' lvalue Var 0x127020b60 'charset' 'const char *'
|   | `-ReturnStmt 0x1260392c0 <line:31:2, col:9>
|   |   `-IntegerLiteral 0x1260392a0 <col:9> 'int' 0
|   |-IfStmt 0x1260394a0 <line:32:5, line:33:9>
|   | |-RecoveryExpr 0x126039440 <line:32:9, col:32> '<dependent type>' contains-errors lvalue
|   | | |-CallExpr 0x1260393a0 <col:9, col:21> 'unsigned long'
|   | | | |-ImplicitCastExpr 0x126039388 <col:9> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1260392f0 <col:9> 'unsigned long (const char *)' Function 0x1260354f0 'strlen' 'unsigned long (const char *)'
|   | | | `-BinaryOperator 0x126039368 <col:16, col:20> 'const char *' '+'
|   | | |   |-ImplicitCastExpr 0x126039350 <col:16> 'const char *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x126039310 <col:16> 'const char *' lvalue Var 0x127020be0 'p' 'const char *'
|   | | |   `-IntegerLiteral 0x126039330 <col:20> 'int' 1
|   | | `-ParenExpr 0x126039420 <col:25, col:32> '<overloaded function type>' lvalue
|   | |   `-UnresolvedLookupExpr 0x1260393e0 <col:26> '<overloaded function type>' lvalue (no ADL) = 'size_t' empty
|   | `-ReturnStmt 0x126039490 <line:33:2, col:9>
|   |   `-IntegerLiteral 0x126039470 <col:9> 'int' 0
|   |-CallExpr 0x1260397b8 <line:34:5, col:21> 'char *'
|   | |-ImplicitCastExpr 0x1260397a0 <col:5> 'char *(*)(char *, const char *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1260396e0 <col:5> 'char *(char *, const char *)' Function 0x126039500 'strcpy' 'char *(char *, const char *)'
|   | |-ImplicitCastExpr 0x1260397e8 <col:12> 'char *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x126039700 <col:12> 'char[256]' lvalue Var 0x127020d20 'buf' 'char[256]'
|   | `-ImplicitCastExpr 0x126039800 <col:17> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x126039720 <col:17> 'const char *' lvalue ParmVar 0x1270207a8 'name' 'const char *'
|   |-CallExpr 0x126039998 <line:35:5, col:30> 'char *'
|   | |-ImplicitCastExpr 0x126039980 <col:5> 'char *(*)(char *, const char *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x126039818 <col:5> 'char *(char *, const char *)' Function 0x126039500 'strcpy' 'char *(char *, const char *)'
|   | |-BinaryOperator 0x1260398e8 <col:12, col:22> 'char *' '-'
|   | | |-BinaryOperator 0x1260398a8 <col:12, col:18> 'char *' '+'
|   | | | |-ImplicitCastExpr 0x126039878 <col:12> 'char *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x126039838 <col:12> 'char[256]' lvalue Var 0x127020d20 'buf' 'char[256]'
|   | | | `-ImplicitCastExpr 0x126039890 <col:18> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x126039858 <col:18> 'int' lvalue Var 0x127020ac8 'l' 'int'
|   | | `-IntegerLiteral 0x1260398c8 <col:22> 'int' 1
|   | `-BinaryOperator 0x126039960 <col:25, col:29> 'const char *' '+'
|   |   |-ImplicitCastExpr 0x126039948 <col:25> 'const char *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x126039908 <col:25> 'const char *' lvalue Var 0x127020be0 'p' 'const char *'
|   |   `-IntegerLiteral 0x126039928 <col:29> 'int' 1
|   |-IfStmt 0x126039b88 <line:37:5, line:38:9>
|   | |-RecoveryExpr 0x126039b38 <line:37:9, col:10> '_Bool' contains-errors
|   | `-ReturnStmt 0x126039b78 <line:38:2, col:9>
|   |   `-IntegerLiteral 0x126039b58 <col:9> 'int' 0
|   |-IfStmt 0x12603a110 <line:39:5, line:58:5> has_else
|   | |-RecoveryExpr 0x126039ba8 <line:39:9> '<dependent type>' contains-errors lvalue
|   | |-CompoundStmt 0x126039c88 <col:14, line:43:5>
|   | `-IfStmt 0x12603a0e0 <col:12, line:58:5> has_else
|   |   |-RecoveryExpr 0x126039c98 <line:43:16> '<dependent type>' contains-errors lvalue
|   |   |-CompoundStmt 0x126039f98 <col:22, line:56:5>
|   |   | `-IfStmt 0x126039de8 <line:44:2, line:50:2>
|   |   |   |-RecoveryExpr 0x126039cb8 <line:44:6, col:10> '_Bool' contains-errors
|   |   |   `-CompoundStmt 0x126039dd8 <col:20, line:50:2>
|   |   `-CompoundStmt 0x12603a0d0 <line:56:12, line:58:5>
|   `-ReturnStmt 0x12603a160 <line:59:5, col:12>
|     `-IntegerLiteral 0x12603a140 <col:12> 'int' 1
|-FunctionDecl 0x1260354f0 <line:15:15> col:15 implicit used strlen 'unsigned long (const char *)' extern
| |-ParmVarDecl 0x1260355f0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x126035598 <<invalid sloc>> Implicit 902
|-FunctionDecl 0x126037f80 <line:23:26> col:26 implicit used strrchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x126038080 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1260380e8 <<invalid sloc>> <invalid sloc> 'int'
| `-BuiltinAttr 0x126038028 <<invalid sloc>> Implicit 896
`-FunctionDecl 0x126039500 <line:34:5> col:5 implicit used strcpy 'char *(char *, const char *)' extern
  |-ParmVarDecl 0x126039600 <<invalid sloc>> <invalid sloc> 'char *'
  |-ParmVarDecl 0x126039668 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x1260395a8 <<invalid sloc>> Implicit 885
