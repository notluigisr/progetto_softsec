TranslationUnitDecl 0x149855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1498564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x149855bd0 '__int128'
|-TypedefDecl 0x149856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x149855bf0 'unsigned __int128'
|-TypedefDecl 0x149926230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x149926000 'struct __NSConstantString_tag'
|   `-Record 0x149856580 '__NSConstantString_tag'
|-TypedefDecl 0x149926298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x149855d90 '__SVInt8_t'
|-TypedefDecl 0x149926300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x149855db0 '__SVInt16_t'
|-TypedefDecl 0x149926368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x149855dd0 '__SVInt32_t'
|-TypedefDecl 0x1499263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x149855df0 '__SVInt64_t'
|-TypedefDecl 0x149926438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x149855e10 '__SVUint8_t'
|-TypedefDecl 0x1499264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x149855e30 '__SVUint16_t'
|-TypedefDecl 0x149926508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x149855e50 '__SVUint32_t'
|-TypedefDecl 0x149926570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x149855e70 '__SVUint64_t'
|-TypedefDecl 0x1499265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x149855e90 '__SVFloat16_t'
|-TypedefDecl 0x149926640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x149855eb0 '__SVFloat32_t'
|-TypedefDecl 0x1499266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x149855ed0 '__SVFloat64_t'
|-TypedefDecl 0x149926710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x149855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x149926778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x149855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1499267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x149855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x149926848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x149855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1499268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x149855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x149926918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x149855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x149926980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x149855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1499269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x149855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x149926a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x149855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x149926ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x149856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x149926b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x149856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x149926b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x149856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x149926bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x149856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x149926c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x149856090 '__clang_svint8x3_t'
|-TypedefDecl 0x149926cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1498560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x149926d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1498560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x149926d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1498560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x149926df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x149856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x149926e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x149856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x149926ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x149856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x149926f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x149856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x149926f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x149856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x149927800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1498561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x149927868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1498561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1499278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1498561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x149927938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x149856210 '__clang_svint8x4_t'
|-TypedefDecl 0x1499279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x149856230 '__clang_svint16x4_t'
|-TypedefDecl 0x149927a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x149856250 '__clang_svint32x4_t'
|-TypedefDecl 0x149927a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x149856270 '__clang_svint64x4_t'
|-TypedefDecl 0x149927ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x149856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x149927b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1498562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x149927ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1498562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x149927c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1498562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x149927c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x149856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x149927ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x149856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x149927d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x149856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x149927db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x149856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x149927e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x149856390 '__SVBool_t'
|-TypedefDecl 0x149927e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1498563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x149927ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1498563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x149927f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1498563f0 '__SVCount_t'
|-TypedefDecl 0x149927ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x149927fb0 'char *'
|   `-BuiltinType 0x1498556b0 'char'
|-TypedefDecl 0x149928068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x149927fb0 'char *'
|   `-BuiltinType 0x1498556b0 'char'
|-FunctionDecl 0x149928528 <dataset_diviso_filec/func6421_nonvuln.c:1:1, line:30:1> line:1:20 invalid ConvertRGBToHCL 'int (const double, const double, const double, double *, double *, double *)'
| |-ParmVarDecl 0x1499280f0 <col:36, col:49> col:49 used red 'const double'
| |-ParmVarDecl 0x149928170 <col:53, col:66> col:66 used green 'const double'
| |-ParmVarDecl 0x1499281f0 <line:2:3, col:16> col:16 used blue 'const double'
| |-ParmVarDecl 0x1499282a8 <col:21, col:29> col:29 used hue 'double *'
| |-ParmVarDecl 0x149928328 <col:33, col:41> col:41 used chroma 'double *'
| |-ParmVarDecl 0x1499283a8 <col:48, col:56> col:56 used luma 'double *'
| `-CompoundStmt 0x14b00c568 <line:3:1, line:30:1>
|   |-DeclStmt 0x1499287a0 <line:4:3, line:7:8>
|   | |-VarDecl 0x149928618 <line:4:3, line:5:5> col:5 used c 'double'
|   | |-VarDecl 0x149928698 <line:4:3, line:6:5> col:5 used h 'double'
|   | `-VarDecl 0x149928718 <line:4:3, line:7:5> col:5 used max 'double'
|   |-BinaryOperator 0x14992a120 <line:13:3, col:42> 'double' '='
|   | |-DeclRefExpr 0x149929e60 <col:3> 'double' lvalue Var 0x149928718 'max' 'double'
|   | `-ImplicitCastExpr 0x14992a108 <col:7, col:42> 'double' <IntegralToFloating>
|   |   `-CallExpr 0x14992a0c0 <col:7, col:42> 'int'
|   |     |-ImplicitCastExpr 0x14992a0a8 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x149929f60 <col:7> 'int ()' Function 0x149929ea8 'MagickMax' 'int ()'
|   |     |-ImplicitCastExpr 0x14992a0f0 <col:17> 'double' <LValueToRValue>
|   |     | `-DeclRefExpr 0x149929f80 <col:17> 'const double' lvalue ParmVar 0x1499280f0 'red' 'const double'
|   |     `-CallExpr 0x14992a048 <col:21, col:41> 'int'
|   |       |-ImplicitCastExpr 0x14992a030 <col:21> 'int (*)()' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x149929fa0 <col:21> 'int ()' Function 0x149929ea8 'MagickMax' 'int ()'
|   |       |-ImplicitCastExpr 0x14992a078 <col:31> 'double' <LValueToRValue>
|   |       | `-DeclRefExpr 0x149929fc0 <col:31> 'const double' lvalue ParmVar 0x149928170 'green' 'const double'
|   |       `-ImplicitCastExpr 0x14992a090 <col:37> 'double' <LValueToRValue>
|   |         `-DeclRefExpr 0x149929fe0 <col:37> 'const double' lvalue ParmVar 0x1499281f0 'blue' 'const double'
|   |-BinaryOperator 0x14992a450 <line:14:3, col:53> 'double' '='
|   | |-DeclRefExpr 0x14992a140 <col:3> 'double' lvalue Var 0x149928618 'c' 'double'
|   | `-BinaryOperator 0x14992a430 <col:5, col:53> 'double' '-'
|   |   |-ImplicitCastExpr 0x14992a418 <col:5> 'double' <LValueToRValue>
|   |   | `-DeclRefExpr 0x14992a160 <col:5> 'double' lvalue Var 0x149928718 'max' 'double'
|   |   `-CStyleCastExpr 0x14992a3f0 <col:9, col:53> 'double' <IntegralToFloating>
|   |     `-CallExpr 0x14992a390 <col:18, col:53> 'int'
|   |       |-ImplicitCastExpr 0x14992a378 <col:18> 'int (*)()' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x14992a260 <col:18> 'int ()' Function 0x14992a1a8 'MagickMin' 'int ()'
|   |       |-ImplicitCastExpr 0x14992a3c0 <col:28> 'double' <LValueToRValue>
|   |       | `-DeclRefExpr 0x14992a280 <col:28> 'const double' lvalue ParmVar 0x1499280f0 'red' 'const double'
|   |       `-CallExpr 0x14992a318 <col:32, col:52> 'int'
|   |         |-ImplicitCastExpr 0x14992a300 <col:32> 'int (*)()' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x14992a2a0 <col:32> 'int ()' Function 0x14992a1a8 'MagickMin' 'int ()'
|   |         |-ImplicitCastExpr 0x14992a348 <col:42> 'double' <LValueToRValue>
|   |         | `-DeclRefExpr 0x14992a2c0 <col:42> 'const double' lvalue ParmVar 0x149928170 'green' 'const double'
|   |         `-ImplicitCastExpr 0x14992a360 <col:48> 'double' <LValueToRValue>
|   |           `-DeclRefExpr 0x14992a2e0 <col:48> 'const double' lvalue ParmVar 0x1499281f0 'blue' 'const double'
|   |-BinaryOperator 0x14992a4b0 <line:15:3, col:5> 'double' '='
|   | |-DeclRefExpr 0x14992a470 <col:3> 'double' lvalue Var 0x149928698 'h' 'double'
|   | `-FloatingLiteral 0x14992a490 <col:5> 'double' 0.000000e+00
|   |-IfStmt 0x14b00be70 <line:16:3, line:26:29> has_else
|   | |-BinaryOperator 0x14b00ab60 <line:16:7, col:17> 'int' contains-errors '<'
|   | | |-CallExpr 0x14b00ab00 <col:7, col:13> 'double'
|   | | | |-ImplicitCastExpr 0x14b00aae8 <col:7> 'double (*)(double)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x14992aaf0 <col:7> 'double (double)' Function 0x14992a930 'fabs' 'double (double)'
|   | | | `-ImplicitCastExpr 0x14b00ab28 <col:12> 'double' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x14992ab10 <col:12> 'double' lvalue Var 0x149928618 'c' 'double'
|   | | `-RecoveryExpr 0x14b00ab40 <col:17> '<dependent type>' contains-errors lvalue
|   | |-BinaryOperator 0x14b00abc0 <line:17:5, col:7> 'double' '='
|   | | |-DeclRefExpr 0x14b00ab80 <col:5> 'double' lvalue Var 0x149928698 'h' 'double'
|   | | `-FloatingLiteral 0x14b00aba0 <col:7> 'double' 0.000000e+00
|   | `-IfStmt 0x14b00be40 <line:19:5, line:26:29> has_else
|   |   |-BinaryOperator 0x14b00af10 <line:19:9, col:25> 'int' contains-errors '<'
|   |   | |-CallExpr 0x14b00aec8 <col:9, col:21> 'double'
|   |   | | |-ImplicitCastExpr 0x14b00aeb0 <col:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | `-DeclRefExpr 0x14b00abe0 <col:9> 'double (double)' Function 0x14992a930 'fabs' 'double (double)'
|   |   | | `-BinaryOperator 0x14b00ae90 <col:14, col:18> 'double' '-'
|   |   | |   |-ImplicitCastExpr 0x14b00ae60 <col:14> 'double' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x14b00ac00 <col:14> 'const double' lvalue ParmVar 0x1499280f0 'red' 'const double'
|   |   | |   `-ImplicitCastExpr 0x14b00ae78 <col:18> 'double' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x14b00ac20 <col:18> 'double' lvalue Var 0x149928718 'max' 'double'
|   |   | `-RecoveryExpr 0x14b00aef0 <col:25> '<dependent type>' contains-errors lvalue
|   |   |-BinaryOperator 0x14b00b3c8 <line:20:7, col:36> 'double' '='
|   |   | |-DeclRefExpr 0x14b00af30 <col:7> 'double' lvalue Var 0x149928698 'h' 'double'
|   |   | `-CallExpr 0x14b00b398 <col:9, col:36> 'double'
|   |   |   |-ImplicitCastExpr 0x14b00b380 <col:9> 'double (*)(double, double)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x14b00b1c0 <col:9> 'double (double, double)' Function 0x14b00af90 'fmod' 'double (double, double)'
|   |   |   |-BinaryOperator 0x14b00b308 <col:14, col:29> 'double' '+'
|   |   |   | |-BinaryOperator 0x14b00b2c8 <col:14, col:27> 'double' '/'
|   |   |   | | |-ParenExpr 0x14b00b270 <col:14, col:25> 'double'
|   |   |   | | | `-BinaryOperator 0x14b00b250 <col:15, col:21> 'double' '-'
|   |   |   | | |   |-ImplicitCastExpr 0x14b00b220 <col:15> 'double' <LValueToRValue>
|   |   |   | | |   | `-DeclRefExpr 0x14b00b1e0 <col:15> 'const double' lvalue ParmVar 0x149928170 'green' 'const double'
|   |   |   | | |   `-ImplicitCastExpr 0x14b00b238 <col:21> 'double' <LValueToRValue>
|   |   |   | | |     `-DeclRefExpr 0x14b00b200 <col:21> 'const double' lvalue ParmVar 0x1499281f0 'blue' 'const double'
|   |   |   | | `-ImplicitCastExpr 0x14b00b2b0 <col:27> 'double' <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x14b00b290 <col:27> 'double' lvalue Var 0x149928618 'c' 'double'
|   |   |   | `-FloatingLiteral 0x14b00b2e8 <col:29> 'double' 6.000000e+00
|   |   |   `-FloatingLiteral 0x14b00b328 <col:33> 'double' 6.000000e+00
|   |   `-IfStmt 0x14b00be10 <line:22:7, line:26:29> has_else
|   |     |-BinaryOperator 0x14b00b718 <line:22:11, col:29> 'int' contains-errors '<'
|   |     | |-CallExpr 0x14b00b6d0 <col:11, col:25> 'double'
|   |     | | |-ImplicitCastExpr 0x14b00b6b8 <col:11> 'double (*)(double)' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x14b00b3e8 <col:11> 'double (double)' Function 0x14992a930 'fabs' 'double (double)'
|   |     | | `-BinaryOperator 0x14b00b698 <col:16, col:22> 'double' '-'
|   |     | |   |-ImplicitCastExpr 0x14b00b668 <col:16> 'double' <LValueToRValue>
|   |     | |   | `-DeclRefExpr 0x14b00b408 <col:16> 'const double' lvalue ParmVar 0x149928170 'green' 'const double'
|   |     | |   `-ImplicitCastExpr 0x14b00b680 <col:22> 'double' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x14b00b428 <col:22> 'double' lvalue Var 0x149928718 'max' 'double'
|   |     | `-RecoveryExpr 0x14b00b6f8 <col:29> '<dependent type>' contains-errors lvalue
|   |     |-BinaryOperator 0x14b00b8c0 <line:23:9, col:26> 'double' '='
|   |     | |-DeclRefExpr 0x14b00b738 <col:9> 'double' lvalue Var 0x149928698 'h' 'double'
|   |     | `-BinaryOperator 0x14b00b8a0 <col:11, col:26> 'double' '+'
|   |     |   |-ParenExpr 0x14b00b860 <col:11, col:24> 'double'
|   |     |   | `-BinaryOperator 0x14b00b840 <col:12, col:23> 'double' '/'
|   |     |   |   |-ParenExpr 0x14b00b7e8 <col:12, col:21> 'double'
|   |     |   |   | `-BinaryOperator 0x14b00b7c8 <col:13, col:18> 'double' '-'
|   |     |   |   |   |-ImplicitCastExpr 0x14b00b798 <col:13> 'double' <LValueToRValue>
|   |     |   |   |   | `-DeclRefExpr 0x14b00b758 <col:13> 'const double' lvalue ParmVar 0x1499281f0 'blue' 'const double'
|   |     |   |   |   `-ImplicitCastExpr 0x14b00b7b0 <col:18> 'double' <LValueToRValue>
|   |     |   |   |     `-DeclRefExpr 0x14b00b778 <col:18> 'const double' lvalue ParmVar 0x1499280f0 'red' 'const double'
|   |     |   |   `-ImplicitCastExpr 0x14b00b828 <col:23> 'double' <LValueToRValue>
|   |     |   |     `-DeclRefExpr 0x14b00b808 <col:23> 'double' lvalue Var 0x149928618 'c' 'double'
|   |     |   `-FloatingLiteral 0x14b00b880 <col:26> 'double' 2.000000e+00
|   |     `-IfStmt 0x14b00bdf0 <line:25:9, line:26:29>
|   |       |-BinaryOperator 0x14b00bc28 <line:25:13, col:30> 'int' contains-errors '<'
|   |       | |-CallExpr 0x14b00bbe0 <col:13, col:26> 'double'
|   |       | | |-ImplicitCastExpr 0x14b00bbc8 <col:13> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | | | `-DeclRefExpr 0x14b00b8e0 <col:13> 'double (double)' Function 0x14992a930 'fabs' 'double (double)'
|   |       | | `-BinaryOperator 0x14b00bba8 <col:18, col:23> 'double' '-'
|   |       | |   |-ImplicitCastExpr 0x14b00bb78 <col:18> 'double' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x14b00b900 <col:18> 'const double' lvalue ParmVar 0x1499281f0 'blue' 'const double'
|   |       | |   `-ImplicitCastExpr 0x14b00bb90 <col:23> 'double' <LValueToRValue>
|   |       | |     `-DeclRefExpr 0x14b00b920 <col:23> 'double' lvalue Var 0x149928718 'max' 'double'
|   |       | `-RecoveryExpr 0x14b00bc08 <col:30> '<dependent type>' contains-errors lvalue
|   |       `-BinaryOperator 0x14b00bdd0 <line:26:11, col:29> 'double' '='
|   |         |-DeclRefExpr 0x14b00bc48 <col:11> 'double' lvalue Var 0x149928698 'h' 'double'
|   |         `-BinaryOperator 0x14b00bdb0 <col:13, col:29> 'double' '+'
|   |           |-ParenExpr 0x14b00bd70 <col:13, col:27> 'double'
|   |           | `-BinaryOperator 0x14b00bd50 <col:14, col:26> 'double' '/'
|   |           |   |-ParenExpr 0x14b00bcf8 <col:14, col:24> 'double'
|   |           |   | `-BinaryOperator 0x14b00bcd8 <col:15, col:19> 'double' '-'
|   |           |   |   |-ImplicitCastExpr 0x14b00bca8 <col:15> 'double' <LValueToRValue>
|   |           |   |   | `-DeclRefExpr 0x14b00bc68 <col:15> 'const double' lvalue ParmVar 0x1499280f0 'red' 'const double'
|   |           |   |   `-ImplicitCastExpr 0x14b00bcc0 <col:19> 'double' <LValueToRValue>
|   |           |   |     `-DeclRefExpr 0x14b00bc88 <col:19> 'const double' lvalue ParmVar 0x149928170 'green' 'const double'
|   |           |   `-ImplicitCastExpr 0x14b00bd38 <col:26> 'double' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x14b00bd18 <col:26> 'double' lvalue Var 0x149928618 'c' 'double'
|   |           `-FloatingLiteral 0x14b00bd90 <col:29> 'double' 4.000000e+00
|   |-BinaryOperator 0x14b00bf88 <line:27:3, col:14> 'double' '='
|   | |-UnaryOperator 0x14b00bed8 <col:3, col:4> 'double' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x14b00bec0 <col:4> 'double *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x14b00bea0 <col:4> 'double *' lvalue ParmVar 0x1499282a8 'hue' 'double *'
|   | `-ParenExpr 0x14b00bf68 <col:8, col:14> 'double'
|   |   `-BinaryOperator 0x14b00bf48 <col:9, col:11> 'double' '/'
|   |     |-ImplicitCastExpr 0x14b00bf30 <col:9> 'double' <LValueToRValue>
|   |     | `-DeclRefExpr 0x14b00bef0 <col:9> 'double' lvalue Var 0x149928698 'h' 'double'
|   |     `-FloatingLiteral 0x14b00bf10 <col:11> 'double' 6.000000e+00
|   |-BinaryOperator 0x14b00c110 <line:28:3, col:24> 'double' contains-errors '='
|   | |-UnaryOperator 0x14b00c0b8 <col:3, col:4> 'double' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x14b00c0a0 <col:4> 'double *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x14b00bfa8 <col:4> 'double *' lvalue ParmVar 0x149928328 'chroma' 'double *'
|   | `-BinaryOperator 0x14b00c0f0 <col:11, col:24> '<dependent type>' contains-errors '*'
|   |   |-RecoveryExpr 0x14b00c0d0 <col:11> '<dependent type>' contains-errors lvalue
|   |   `-DeclRefExpr 0x14b00c010 <col:24> 'double' lvalue Var 0x149928618 'c' 'double'
|   `-BinaryOperator 0x14b00c548 <line:29:3, col:64> 'double' contains-errors '='
|     |-UnaryOperator 0x14b00c3e8 <col:3, col:4> 'double' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x14b00c3d0 <col:4> 'double *' <LValueToRValue>
|     |   `-DeclRefExpr 0x14b00c130 <col:4> 'double *' lvalue ParmVar 0x1499283a8 'luma' 'double *'
|     `-BinaryOperator 0x14b00c528 <col:9, col:64> '<dependent type>' contains-errors '*'
|       |-RecoveryExpr 0x14b00c400 <col:9> '<dependent type>' contains-errors lvalue
|       `-ParenExpr 0x14b00c508 <col:22, col:64> 'double'
|         `-BinaryOperator 0x14b00c4e8 <col:23, col:60> 'double' '+'
|           |-BinaryOperator 0x14b00c490 <col:23, col:45> 'double' '+'
|           | |-BinaryOperator 0x14b00c438 <col:23, col:32> 'double' '*'
|           | | |-FloatingLiteral 0x14b00c198 <col:23> 'double' 2.988390e-01
|           | | `-ImplicitCastExpr 0x14b00c420 <col:32> 'double' <LValueToRValue>
|           | |   `-DeclRefExpr 0x14b00c1b8 <col:32> 'const double' lvalue ParmVar 0x1499280f0 'red' 'const double'
|           | `-BinaryOperator 0x14b00c470 <col:36, col:45> 'double' '*'
|           |   |-FloatingLiteral 0x14b00c210 <col:36> 'double' 5.868110e-01
|           |   `-ImplicitCastExpr 0x14b00c458 <col:45> 'double' <LValueToRValue>
|           |     `-DeclRefExpr 0x14b00c230 <col:45> 'const double' lvalue ParmVar 0x149928170 'green' 'const double'
|           `-BinaryOperator 0x14b00c4c8 <col:51, col:60> 'double' '*'
|             |-FloatingLiteral 0x14b00c2a8 <col:51> 'double' 1.143500e-01
|             `-ImplicitCastExpr 0x14b00c4b0 <col:60> 'double' <LValueToRValue>
|               `-DeclRefExpr 0x14b00c2c8 <col:60> 'const double' lvalue ParmVar 0x1499281f0 'blue' 'const double'
|-FunctionDecl 0x14992a930 <line:16:7> col:7 implicit used fabs 'double (double)' extern
| |-ParmVarDecl 0x14992aa30 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x14992a9d8 <<invalid sloc>> Implicit 1004
| |-NoThrowAttr 0x14992aaa0 <col:7> Implicit
| `-ConstAttr 0x14992aac8 <col:7> Implicit
`-FunctionDecl 0x14b00af90 <line:20:9> col:9 implicit used fmod 'double (double, double)' extern
  |-ParmVarDecl 0x14b00b090 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x14b00b0f8 <<invalid sloc>> <invalid sloc> 'double'
  |-BuiltinAttr 0x14b00b038 <<invalid sloc>> Implicit 1013
  |-ConstAttr 0x14b00b170 <col:9> Implicit
  `-NoThrowAttr 0x14b00b198 <col:9> Implicit
