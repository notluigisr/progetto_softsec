TranslationUnitDecl 0x147055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1470564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x147055bd0 '__int128'
|-TypedefDecl 0x147056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x147055bf0 'unsigned __int128'
|-TypedefDecl 0x147126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x147126000 'struct __NSConstantString_tag'
|   `-Record 0x147056580 '__NSConstantString_tag'
|-TypedefDecl 0x147126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x147055d90 '__SVInt8_t'
|-TypedefDecl 0x147126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x147055db0 '__SVInt16_t'
|-TypedefDecl 0x147126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x147055dd0 '__SVInt32_t'
|-TypedefDecl 0x1471263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x147055df0 '__SVInt64_t'
|-TypedefDecl 0x147126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x147055e10 '__SVUint8_t'
|-TypedefDecl 0x1471264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x147055e30 '__SVUint16_t'
|-TypedefDecl 0x147126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x147055e50 '__SVUint32_t'
|-TypedefDecl 0x147126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x147055e70 '__SVUint64_t'
|-TypedefDecl 0x1471265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x147055e90 '__SVFloat16_t'
|-TypedefDecl 0x147126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x147055eb0 '__SVFloat32_t'
|-TypedefDecl 0x1471266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x147055ed0 '__SVFloat64_t'
|-TypedefDecl 0x147126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x147055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x147126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x147055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1471267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x147055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x147126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x147055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1471268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x147055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x147126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x147055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x147126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x147055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1471269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x147055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x147126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x147055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x147126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x147056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x147126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x147056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x147126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x147056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x147126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x147056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x147126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x147056090 '__clang_svint8x3_t'
|-TypedefDecl 0x147126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1470560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x147126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1470560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x147126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1470560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x147126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x147056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x147126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x147056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x147126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x147056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x147126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x147056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x147126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x147056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x147127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1470561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x147127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1470561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1471278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1470561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x147127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x147056210 '__clang_svint8x4_t'
|-TypedefDecl 0x1471279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x147056230 '__clang_svint16x4_t'
|-TypedefDecl 0x147127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x147056250 '__clang_svint32x4_t'
|-TypedefDecl 0x147127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x147056270 '__clang_svint64x4_t'
|-TypedefDecl 0x147127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x147056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x147127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1470562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x147127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1470562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x147127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1470562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x147127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x147056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x147127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x147056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x147127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x147056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x147127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x147056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x147127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x147056390 '__SVBool_t'
|-TypedefDecl 0x147127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1470563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x147127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1470563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x147127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1470563f0 '__SVCount_t'
|-TypedefDecl 0x147127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x147127fb0 'char *'
|   `-BuiltinType 0x1470556b0 'char'
|-TypedefDecl 0x147128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x147127fb0 'char *'
|   `-BuiltinType 0x1470556b0 'char'
|-FunctionDecl 0x147128668 <dataset_diviso_filec/func24050_vuln.c:1:1, line:29:1> line:1:1 invalid fmtfloat 'int (double, char, int, int, int, int, int, int, int *)'
| |-ParmVarDecl 0x1471280d8 <col:10, col:17> col:17 used value 'double'
| |-ParmVarDecl 0x147128150 <col:24, col:29> col:29 used type 'char'
| |-ParmVarDecl 0x1471281d0 <col:35, col:39> col:39 used forcesign 'int'
| |-ParmVarDecl 0x147128250 <col:50, col:54> col:54 used leftjust 'int'
| |-ParmVarDecl 0x1471282d0 <line:2:4, col:8> col:8 used minlen 'int'
| |-ParmVarDecl 0x147128350 <col:16, col:20> col:20 used zpad 'int'
| |-ParmVarDecl 0x1471283d0 <col:26, col:30> col:30 used precision 'int'
| |-ParmVarDecl 0x147128450 <col:41, col:45> col:45 used pointflag 'int'
| |-ParmVarDecl 0x147128518 <line:3:4, col:18> col:18 invalid target 'int *'
| `-CompoundStmt 0x147143900 <line:4:1, line:29:1>
|   |-DeclStmt 0x147141800 <line:5:2, col:21>
|   | `-VarDecl 0x147128770 <col:2, col:20> col:8 used signvalue 'int' cinit
|   |   `-IntegerLiteral 0x1471287d8 <col:20> 'int' 0
|   |-DeclStmt 0x147141898 <line:6:2, col:14>
|   | `-VarDecl 0x147141830 <col:2, col:8> col:8 used vallen 'int'
|   |-DeclStmt 0x1471419b8 <line:7:2, col:15>
|   | `-VarDecl 0x147141950 <col:2, col:14> col:8 used fmt 'char[32]'
|   |-DeclStmt 0x147141ad8 <line:8:2, col:20>
|   | `-VarDecl 0x147141a70 <col:2, col:19> col:8 used convert 'char[512]'
|   |-DeclStmt 0x147141b90 <line:9:2, col:18>
|   | `-VarDecl 0x147141b08 <col:2, col:17> col:8 used padlen 'int' cinit
|   |   `-IntegerLiteral 0x147141b70 <col:17> 'int' 0
|   |-IfStmt 0x147142610 <line:12:2, line:15:27> has_else
|   | |-ImplicitCastExpr 0x147141bc8 <line:12:6> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x147141ba8 <col:6> 'int' lvalue ParmVar 0x147128450 'pointflag' 'int'
|   | |-CallExpr 0x1471423c8 <line:13:3, col:38> 'int'
|   | | |-ImplicitCastExpr 0x1471423b0 <col:3> 'int (*)(char *, const char *, ...)' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x147142268 <col:3> 'int (char *, const char *, ...)' Function 0x147142050 'sprintf' 'int (char *, const char *, ...)'
|   | | |-ImplicitCastExpr 0x147142408 <col:11> 'char *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x147142288 <col:11> 'char[32]' lvalue Var 0x147141950 'fmt' 'char[32]'
|   | | |-ImplicitCastExpr 0x147142438 <col:16> 'const char *' <NoOp>
|   | | | `-ImplicitCastExpr 0x147142420 <col:16> 'char *' <ArrayToPointerDecay>
|   | | |   `-StringLiteral 0x1471422f0 <col:16> 'char[4]' lvalue "STR"
|   | | |-ImplicitCastExpr 0x147142450 <col:23> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x147142310 <col:23> 'int' lvalue ParmVar 0x1471283d0 'precision' 'int'
|   | | `-ImplicitCastExpr 0x147142480 <col:34> 'int' <IntegralCast>
|   | |   `-ImplicitCastExpr 0x147142468 <col:34> 'char' <LValueToRValue>
|   | |     `-DeclRefExpr 0x147142330 <col:34> 'char' lvalue ParmVar 0x147128150 'type' 'char'
|   | `-CallExpr 0x147142560 <line:15:3, col:27> 'int'
|   |   |-ImplicitCastExpr 0x147142548 <col:3> 'int (*)(char *, const char *, ...)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x147142498 <col:3> 'int (char *, const char *, ...)' Function 0x147142050 'sprintf' 'int (char *, const char *, ...)'
|   |   |-ImplicitCastExpr 0x147142598 <col:11> 'char *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x1471424b8 <col:11> 'char[32]' lvalue Var 0x147141950 'fmt' 'char[32]'
|   |   |-ImplicitCastExpr 0x1471425c8 <col:16> 'const char *' <NoOp>
|   |   | `-ImplicitCastExpr 0x1471425b0 <col:16> 'char *' <ArrayToPointerDecay>
|   |   |   `-StringLiteral 0x1471424d8 <col:16> 'char[4]' lvalue "STR"
|   |   `-ImplicitCastExpr 0x1471425f8 <col:23> 'int' <IntegralCast>
|   |     `-ImplicitCastExpr 0x1471425e0 <col:23> 'char' <LValueToRValue>
|   |       `-DeclRefExpr 0x1471424f8 <col:23> 'char' lvalue ParmVar 0x147128150 'type' 'char'
|   |-IfStmt 0x147142ff8 <line:17:2, line:18:12>
|   | |-CallExpr 0x147142f18 <line:17:6, col:52> 'int'
|   | | |-ImplicitCastExpr 0x147142f00 <col:6> 'int (*)()' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x1471427a0 <col:6> 'int ()' Function 0x1471426e8 'adjust_sign' 'int ()'
|   | | |-ParenExpr 0x147142e50 <col:18, col:28> 'int'
|   | | | `-BinaryOperator 0x147142e30 <col:19, col:27> 'int' '<'
|   | | |   |-ImplicitCastExpr 0x147142e00 <col:19> 'double' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x1471427c0 <col:19> 'double' lvalue ParmVar 0x1471280d8 'value' 'double'
|   | | |   `-ImplicitCastExpr 0x147142e18 <col:27> 'double' <IntegralToFloating>
|   | | |     `-IntegerLiteral 0x1471427e0 <col:27> 'int' 0
|   | | |-ImplicitCastExpr 0x147142f50 <col:31> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x147142e70 <col:31> 'int' lvalue ParmVar 0x1471281d0 'forcesign' 'int'
|   | | `-UnaryOperator 0x147142eb0 <col:42, col:43> 'int *' prefix '&' cannot overflow
|   | |   `-DeclRefExpr 0x147142e90 <col:43> 'int' lvalue Var 0x147128770 'signvalue' 'int'
|   | `-BinaryOperator 0x147142fd8 <line:18:3, col:12> 'double' '='
|   |   |-DeclRefExpr 0x147142f68 <col:3> 'double' lvalue ParmVar 0x1471280d8 'value' 'double'
|   |   `-UnaryOperator 0x147142fc0 <col:11, col:12> 'double' prefix '-'
|   |     `-ImplicitCastExpr 0x147142fa8 <col:12> 'double' <LValueToRValue>
|   |       `-DeclRefExpr 0x147142f88 <col:12> 'double' lvalue ParmVar 0x1471280d8 'value' 'double'
|   |-BinaryOperator 0x147143198 <line:20:2, col:38> 'int' '='
|   | |-DeclRefExpr 0x147143018 <col:2> 'int' lvalue Var 0x147141830 'vallen' 'int'
|   | `-CallExpr 0x147143100 <col:11, col:38> 'int'
|   |   |-ImplicitCastExpr 0x1471430e8 <col:11> 'int (*)(char *, const char *, ...)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x147143038 <col:11> 'int (char *, const char *, ...)' Function 0x147142050 'sprintf' 'int (char *, const char *, ...)'
|   |   |-ImplicitCastExpr 0x147143138 <col:19> 'char *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x147143058 <col:19> 'char[512]' lvalue Var 0x147141a70 'convert' 'char[512]'
|   |   |-ImplicitCastExpr 0x147143168 <col:28> 'const char *' <NoOp>
|   |   | `-ImplicitCastExpr 0x147143150 <col:28> 'char *' <ArrayToPointerDecay>
|   |   |   `-DeclRefExpr 0x147143078 <col:28> 'char[32]' lvalue Var 0x147141950 'fmt' 'char[32]'
|   |   `-ImplicitCastExpr 0x147143180 <col:33> 'double' <LValueToRValue>
|   |     `-DeclRefExpr 0x147143098 <col:33> 'double' lvalue ParmVar 0x1471280d8 'value' 'double'
|   |-CallExpr 0x147143368 <line:22:2, col:49> 'int'
|   | |-ImplicitCastExpr 0x147143350 <col:2> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x147143298 <col:2> 'int ()' Function 0x1471431e0 'adjust_padlen' 'int ()'
|   | |-ImplicitCastExpr 0x1471433a8 <col:16> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x1471432b8 <col:16> 'int' lvalue ParmVar 0x1471282d0 'minlen' 'int'
|   | |-ImplicitCastExpr 0x1471433c0 <col:24> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x1471432d8 <col:24> 'int' lvalue Var 0x147141830 'vallen' 'int'
|   | |-ImplicitCastExpr 0x1471433d8 <col:32> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x1471432f8 <col:32> 'int' lvalue ParmVar 0x147128250 'leftjust' 'int'
|   | `-UnaryOperator 0x147143338 <col:42, col:43> 'int *' prefix '&' cannot overflow
|   |   `-DeclRefExpr 0x147143318 <col:43> 'int' lvalue Var 0x147141b08 'padlen' 'int'
|   |-CallExpr 0x1471435a0 <line:24:2, col:47> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x1471434d0 <col:2> 'int ()' Function 0x147143418 'leading_pad' 'int ()'
|   | |-DeclRefExpr 0x1471434f0 <col:14> 'int' lvalue ParmVar 0x147128350 'zpad' 'int'
|   | |-UnaryOperator 0x147143530 <col:20, col:21> 'int *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x147143510 <col:21> 'int' lvalue Var 0x147128770 'signvalue' 'int'
|   | |-UnaryOperator 0x147143568 <col:32, col:33> 'int *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x147143548 <col:33> 'int' lvalue Var 0x147141b08 'padlen' 'int'
|   | `-RecoveryExpr 0x147143580 <col:41> '<dependent type>' contains-errors lvalue
|   |-CallExpr 0x147143740 <line:26:2, col:31> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x1471436c0 <col:2> 'int ()' Function 0x147143608 'dostr' 'int ()'
|   | |-DeclRefExpr 0x1471436e0 <col:8> 'char[512]' lvalue Var 0x147141a70 'convert' 'char[512]'
|   | |-DeclRefExpr 0x147143700 <col:17> 'int' lvalue Var 0x147141830 'vallen' 'int'
|   | `-RecoveryExpr 0x147143720 <col:25> '<dependent type>' contains-errors lvalue
|   `-CallExpr 0x1471438d0 <line:28:2, col:30> '<dependent type>' contains-errors
|     |-DeclRefExpr 0x147143858 <col:2> 'int ()' Function 0x1471437a0 'trailing_pad' 'int ()'
|     |-UnaryOperator 0x147143898 <col:15, col:16> 'int *' prefix '&' cannot overflow
|     | `-DeclRefExpr 0x147143878 <col:16> 'int' lvalue Var 0x147141b08 'padlen' 'int'
|     `-RecoveryExpr 0x1471438b0 <col:24> '<dependent type>' contains-errors lvalue
`-FunctionDecl 0x147142050 <line:13:3> col:3 implicit used sprintf 'int (char *, const char *, ...)' extern
  |-ParmVarDecl 0x147142150 <<invalid sloc>> <invalid sloc> 'char *'
  |-ParmVarDecl 0x1471421b8 <<invalid sloc>> <invalid sloc> 'const char *'
  |-BuiltinAttr 0x1471420f8 <<invalid sloc>> Implicit 906
  `-FormatAttr 0x147142230 <col:3> Implicit printf 2 3
