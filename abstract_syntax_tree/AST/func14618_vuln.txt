TranslationUnitDecl 0x122055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1220564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x122055bd0 '__int128'
|-TypedefDecl 0x122056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x122055bf0 'unsigned __int128'
|-TypedefDecl 0x122126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x122126000 'struct __NSConstantString_tag'
|   `-Record 0x122056580 '__NSConstantString_tag'
|-TypedefDecl 0x122126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x122055d90 '__SVInt8_t'
|-TypedefDecl 0x122126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x122055db0 '__SVInt16_t'
|-TypedefDecl 0x122126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x122055dd0 '__SVInt32_t'
|-TypedefDecl 0x1221263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x122055df0 '__SVInt64_t'
|-TypedefDecl 0x122126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x122055e10 '__SVUint8_t'
|-TypedefDecl 0x1221264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x122055e30 '__SVUint16_t'
|-TypedefDecl 0x122126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x122055e50 '__SVUint32_t'
|-TypedefDecl 0x122126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x122055e70 '__SVUint64_t'
|-TypedefDecl 0x1221265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x122055e90 '__SVFloat16_t'
|-TypedefDecl 0x122126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x122055eb0 '__SVFloat32_t'
|-TypedefDecl 0x1221266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x122055ed0 '__SVFloat64_t'
|-TypedefDecl 0x122126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x122055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x122126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x122055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1221267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x122055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x122126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x122055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1221268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x122055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x122126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x122055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x122126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x122055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1221269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x122055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x122126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x122055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x122126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x122056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x122126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x122056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x122126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x122056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x122126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x122056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x122126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x122056090 '__clang_svint8x3_t'
|-TypedefDecl 0x122126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1220560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x122126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1220560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x122126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1220560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x122126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x122056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x122126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x122056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x122126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x122056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x122126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x122056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x122126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x122056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x122127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1220561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x122127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1220561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1221278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1220561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x122127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x122056210 '__clang_svint8x4_t'
|-TypedefDecl 0x1221279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x122056230 '__clang_svint16x4_t'
|-TypedefDecl 0x122127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x122056250 '__clang_svint32x4_t'
|-TypedefDecl 0x122127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x122056270 '__clang_svint64x4_t'
|-TypedefDecl 0x122127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x122056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x122127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1220562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x122127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1220562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x122127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1220562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x122127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x122056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x122127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x122056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x122127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x122056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x122127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x122056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x122127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x122056390 '__SVBool_t'
|-TypedefDecl 0x122127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1220563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x122127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1220563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x122127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1220563f0 '__SVCount_t'
|-TypedefDecl 0x122127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x122127fb0 'char *'
|   `-BuiltinType 0x1220556b0 'char'
|-TypedefDecl 0x122128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x122127fb0 'char *'
|   `-BuiltinType 0x1220556b0 'char'
|-FunctionDecl 0x122128238 <dataset_diviso_filec/func14618_vuln.c:1:1, line:23:1> line:1:1 sh_backslash_quote 'int (char *, char *)'
| |-ParmVarDecl 0x1221280d8 <line:2:6, col:12> col:12 used string 'char *'
| |-ParmVarDecl 0x122128158 <line:3:6, col:12> col:12 used table 'char *'
| `-CompoundStmt 0x122144b98 <line:4:1, line:23:1>
|   |-DeclStmt 0x1221283b8 <line:5:3, col:8>
|   | `-VarDecl 0x122128350 <col:3, col:7> col:7 used c 'int'
|   |-DeclStmt 0x1221285f8 <line:6:3, col:41>
|   | |-VarDecl 0x1221283e8 <col:3, col:9> col:9 used result 'char *'
|   | |-VarDecl 0x122128468 <col:3, col:18> col:18 used r 'char *'
|   | |-VarDecl 0x1221284e8 <col:3, col:22> col:22 used s 'char *'
|   | `-VarDecl 0x122128568 <col:3, col:26> col:26 used backslash_table 'char *'
|   |-BinaryOperator 0x1221411d0 <line:8:3, col:52> 'char *' '='
|   | |-DeclRefExpr 0x122128610 <col:3> 'char *' lvalue Var 0x1221283e8 'result' 'char *'
|   | `-CStyleCastExpr 0x1221411a8 <col:12, col:52> 'char *' <IntegralToPointer>
|   |   `-CallExpr 0x122141168 <col:20, col:52> 'int'
|   |     |-ImplicitCastExpr 0x122141150 <col:20> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x122128760 <col:20> 'int ()' Function 0x1221286a8 'xmalloc' 'int ()'
|   |     `-BinaryOperator 0x122141100 <col:29, col:51> 'unsigned long' '+'
|   |       |-BinaryOperator 0x1221410a8 <col:29, col:47> 'unsigned long' '*'
|   |       | |-ImplicitCastExpr 0x122141090 <col:29> 'unsigned long' <IntegralCast>
|   |       | | `-IntegerLiteral 0x122128780 <col:29> 'int' 2
|   |       | `-CallExpr 0x122141038 <col:33, col:47> 'unsigned long'
|   |       |   |-ImplicitCastExpr 0x122141020 <col:33> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |       |   | `-DeclRefExpr 0x122140f90 <col:33> 'unsigned long (const char *)' Function 0x122140e20 'strlen' 'unsigned long (const char *)'
|   |       |   `-ImplicitCastExpr 0x122141078 <col:41> 'const char *' <NoOp>
|   |       |     `-ImplicitCastExpr 0x122141060 <col:41> 'char *' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x122140fb0 <col:41> 'char *' lvalue ParmVar 0x1221280d8 'string' 'char *'
|   |       `-ImplicitCastExpr 0x1221410e8 <col:51> 'unsigned long' <IntegralCast>
|   |         `-IntegerLiteral 0x1221410c8 <col:51> 'int' 1
|   |-BinaryOperator 0x122141308 <line:10:3, col:37> 'char *' contains-errors '='
|   | |-DeclRefExpr 0x1221411f0 <col:3> 'char *' lvalue Var 0x122128568 'backslash_table' 'char *'
|   | `-ConditionalOperator 0x1221412d8 <col:21, col:37> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x122141210 <col:21> 'char *' lvalue ParmVar 0x122128158 'table' 'char *'
|   |   |-DeclRefExpr 0x122141230 <col:29> 'char *' lvalue ParmVar 0x122128158 'table' 'char *'
|   |   `-RecoveryExpr 0x1221412b8 <col:37> '<dependent type>' contains-errors lvalue
|   |-ForStmt 0x122144a40 <line:11:3, line:19:5>
|   | |-BinaryOperator 0x122141418 <line:11:8, col:24> 'char *' ','
|   | | |-BinaryOperator 0x122141380 <col:8, col:12> 'char *' '='
|   | | | |-DeclRefExpr 0x122141328 <col:8> 'char *' lvalue Var 0x122128468 'r' 'char *'
|   | | | `-ImplicitCastExpr 0x122141368 <col:12> 'char *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x122141348 <col:12> 'char *' lvalue Var 0x1221283e8 'result' 'char *'
|   | | `-BinaryOperator 0x1221413f8 <col:20, col:24> 'char *' '='
|   | |   |-DeclRefExpr 0x1221413a0 <col:20> 'char *' lvalue Var 0x1221284e8 's' 'char *'
|   | |   `-ImplicitCastExpr 0x1221413e0 <col:24> 'char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1221413c0 <col:24> 'char *' lvalue ParmVar 0x1221280d8 'string' 'char *'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x122141550 <col:32, col:44> 'int' '&&'
|   | | |-ImplicitCastExpr 0x122141538 <col:32> 'char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x122141438 <col:32> 'char *' lvalue Var 0x1221284e8 's' 'char *'
|   | | `-ParenExpr 0x122141518 <col:37, col:44> 'int'
|   | |   `-BinaryOperator 0x1221414f8 <col:38, col:43> 'int' '='
|   | |     |-DeclRefExpr 0x122141458 <col:38> 'int' lvalue Var 0x122128350 'c' 'int'
|   | |     `-ImplicitCastExpr 0x1221414e0 <col:42, col:43> 'int' <IntegralCast>
|   | |       `-ImplicitCastExpr 0x1221414c8 <col:42, col:43> 'char' <LValueToRValue>
|   | |         `-UnaryOperator 0x1221414b0 <col:42, col:43> 'char' lvalue prefix '*' cannot overflow
|   | |           `-ImplicitCastExpr 0x122141498 <col:43> 'char *' <LValueToRValue>
|   | |             `-DeclRefExpr 0x122141478 <col:43> 'char *' lvalue Var 0x1221284e8 's' 'char *'
|   | |-UnaryOperator 0x122141590 <col:47, col:48> 'char *' postfix '++'
|   | | `-DeclRefExpr 0x122141570 <col:47> 'char *' lvalue Var 0x1221284e8 's' 'char *'
|   | `-CompoundStmt 0x122144a20 <line:12:5, line:19:5>
|   |   |-IfStmt 0x122141928 <line:14:7, line:17:9> has_else
|   |   | |-BinaryOperator 0x122141688 <line:14:11, col:33> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x122141670 <col:11, col:28> 'int' <IntegralCast>
|   |   | | | `-ImplicitCastExpr 0x122141658 <col:11, col:28> 'char' <LValueToRValue>
|   |   | | |   `-ArraySubscriptExpr 0x122141618 <col:11, col:28> 'char' lvalue
|   |   | | |     |-ImplicitCastExpr 0x1221415e8 <col:11> 'char *' <LValueToRValue>
|   |   | | |     | `-DeclRefExpr 0x1221415a8 <col:11> 'char *' lvalue Var 0x122128568 'backslash_table' 'char *'
|   |   | | |     `-ImplicitCastExpr 0x122141600 <col:27> 'int' <LValueToRValue>
|   |   | | |       `-DeclRefExpr 0x1221415c8 <col:27> 'int' lvalue Var 0x122128350 'c' 'int'
|   |   | | `-IntegerLiteral 0x122141638 <col:33> 'int' 1
|   |   | |-BinaryOperator 0x122141728 <line:15:2, col:9> 'char' '='
|   |   | | |-UnaryOperator 0x1221416e0 <col:2, col:4> 'char' lvalue prefix '*' cannot overflow
|   |   | | | `-UnaryOperator 0x1221416c8 <col:3, col:4> 'char *' postfix '++'
|   |   | | |   `-DeclRefExpr 0x1221416a8 <col:3> 'char *' lvalue Var 0x122128468 'r' 'char *'
|   |   | | `-ImplicitCastExpr 0x122141710 <col:9> 'char' <IntegralCast>
|   |   | |   `-CharacterLiteral 0x1221416f8 <col:9> 'int' 92
|   |   | `-IfStmt 0x122141908 <line:16:12, line:17:9>
|   |   |   |-BinaryOperator 0x122141848 <line:16:16, col:33> 'int' '&&'
|   |   |   | |-BinaryOperator 0x122141798 <col:16, col:21> 'int' '=='
|   |   |   | | |-ImplicitCastExpr 0x122141780 <col:16> 'int' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x122141748 <col:16> 'int' lvalue Var 0x122128350 'c' 'int'
|   |   |   | | `-CharacterLiteral 0x122141768 <col:21> 'int' 35
|   |   |   | `-BinaryOperator 0x122141828 <col:28, col:33> 'int' '=='
|   |   |   |   |-ImplicitCastExpr 0x1221417f8 <col:28> 'char *' <LValueToRValue>
|   |   |   |   | `-DeclRefExpr 0x1221417b8 <col:28> 'char *' lvalue Var 0x1221284e8 's' 'char *'
|   |   |   |   `-ImplicitCastExpr 0x122141810 <col:33> 'char *' <LValueToRValue>
|   |   |   |     `-DeclRefExpr 0x1221417d8 <col:33> 'char *' lvalue ParmVar 0x1221280d8 'string' 'char *'
|   |   |   `-BinaryOperator 0x1221418e8 <line:17:2, col:9> 'char' '='
|   |   |     |-UnaryOperator 0x1221418a0 <col:2, col:4> 'char' lvalue prefix '*' cannot overflow
|   |   |     | `-UnaryOperator 0x122141888 <col:3, col:4> 'char *' postfix '++'
|   |   |     |   `-DeclRefExpr 0x122141868 <col:3> 'char *' lvalue Var 0x122128468 'r' 'char *'
|   |   |     `-ImplicitCastExpr 0x1221418d0 <col:9> 'char' <IntegralCast>
|   |   |       `-CharacterLiteral 0x1221418b8 <col:9> 'int' 92
|   |   `-BinaryOperator 0x122144a00 <line:18:7, col:14> 'char' '='
|   |     |-UnaryOperator 0x122141990 <col:7, col:9> 'char' lvalue prefix '*' cannot overflow
|   |     | `-UnaryOperator 0x122141978 <col:8, col:9> 'char *' postfix '++'
|   |     |   `-DeclRefExpr 0x122141958 <col:8> 'char *' lvalue Var 0x122128468 'r' 'char *'
|   |     `-ImplicitCastExpr 0x1221419e0 <col:14> 'char' <IntegralCast>
|   |       `-ImplicitCastExpr 0x1221419c8 <col:14> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x1221419a8 <col:14> 'int' lvalue Var 0x122128350 'c' 'int'
|   |-BinaryOperator 0x122144af8 <line:21:3, col:8> 'char' '='
|   | |-UnaryOperator 0x122144ab0 <col:3, col:4> 'char' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x122144a98 <col:4> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x122144a78 <col:4> 'char *' lvalue Var 0x122128468 'r' 'char *'
|   | `-ImplicitCastExpr 0x122144ae0 <col:8> 'char' <IntegralCast>
|   |   `-CharacterLiteral 0x122144ac8 <col:8> 'int' 0
|   `-ReturnStmt 0x122144b88 <line:22:3, col:17>
|     `-ImplicitCastExpr 0x122144b70 <col:10, col:17> 'int' <PointerToIntegral>
|       `-ImplicitCastExpr 0x122144b58 <col:10, col:17> 'char *' <LValueToRValue>
|         `-ParenExpr 0x122144b38 <col:10, col:17> 'char *' lvalue
|           `-DeclRefExpr 0x122144b18 <col:11> 'char *' lvalue Var 0x1221283e8 'result' 'char *'
`-FunctionDecl 0x122140e20 <line:8:33> col:33 implicit used strlen 'unsigned long (const char *)' extern
  |-ParmVarDecl 0x122140f20 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x122140ec8 <<invalid sloc>> Implicit 902
