TranslationUnitDecl 0x127835208 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1278360b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1278357d0 '__int128'
|-TypedefDecl 0x127836128 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1278357f0 'unsigned __int128'
|-TypedefDecl 0x12907b830 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12907b600 'struct __NSConstantString_tag'
|   `-Record 0x127836180 '__NSConstantString_tag'
|-TypedefDecl 0x12907b898 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x127835990 '__SVInt8_t'
|-TypedefDecl 0x12907b900 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x1278359b0 '__SVInt16_t'
|-TypedefDecl 0x12907b968 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x1278359d0 '__SVInt32_t'
|-TypedefDecl 0x12907b9d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x1278359f0 '__SVInt64_t'
|-TypedefDecl 0x12907ba38 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x127835a10 '__SVUint8_t'
|-TypedefDecl 0x12907baa0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x127835a30 '__SVUint16_t'
|-TypedefDecl 0x12907bb08 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x127835a50 '__SVUint32_t'
|-TypedefDecl 0x12907bb70 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x127835a70 '__SVUint64_t'
|-TypedefDecl 0x12907bbd8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x127835a90 '__SVFloat16_t'
|-TypedefDecl 0x12907bc40 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x127835ab0 '__SVFloat32_t'
|-TypedefDecl 0x12907bca8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x127835ad0 '__SVFloat64_t'
|-TypedefDecl 0x12907bd10 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x127835af0 '__SVBfloat16_t'
|-TypedefDecl 0x12907bd78 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x127835b10 '__clang_svint8x2_t'
|-TypedefDecl 0x12907bde0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x127835b30 '__clang_svint16x2_t'
|-TypedefDecl 0x12907be48 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x127835b50 '__clang_svint32x2_t'
|-TypedefDecl 0x12907beb0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x127835b70 '__clang_svint64x2_t'
|-TypedefDecl 0x12907bf18 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x127835b90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12907bf80 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x127835bb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12907bfe8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x127835bd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12907c050 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x127835bf0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12907c0b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x127835c10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12907c120 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x127835c30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12907c188 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x127835c50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12907c1f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x127835c70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12907c258 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x127835c90 '__clang_svint8x3_t'
|-TypedefDecl 0x12907c2c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x127835cb0 '__clang_svint16x3_t'
|-TypedefDecl 0x12907c328 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x127835cd0 '__clang_svint32x3_t'
|-TypedefDecl 0x12907c390 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x127835cf0 '__clang_svint64x3_t'
|-TypedefDecl 0x12907c3f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x127835d10 '__clang_svuint8x3_t'
|-TypedefDecl 0x12907c460 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x127835d30 '__clang_svuint16x3_t'
|-TypedefDecl 0x12907c4c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x127835d50 '__clang_svuint32x3_t'
|-TypedefDecl 0x12907c530 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x127835d70 '__clang_svuint64x3_t'
|-TypedefDecl 0x12907c598 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x127835d90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12907c600 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x127835db0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12907c668 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x127835dd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12907c6d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x127835df0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12907c738 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x127835e10 '__clang_svint8x4_t'
|-TypedefDecl 0x12907c7a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x127835e30 '__clang_svint16x4_t'
|-TypedefDecl 0x12907c808 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x127835e50 '__clang_svint32x4_t'
|-TypedefDecl 0x12907c870 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x127835e70 '__clang_svint64x4_t'
|-TypedefDecl 0x12907c8d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x127835e90 '__clang_svuint8x4_t'
|-TypedefDecl 0x12907c940 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x127835eb0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12907c9a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x127835ed0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12907ca10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x127835ef0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12907ca78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x127835f10 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12907cae0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x127835f30 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12907cb48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x127835f50 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12907cbb0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x127835f70 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12907cc18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x127835f90 '__SVBool_t'
|-TypedefDecl 0x12907cc80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x127835fb0 '__clang_svboolx2_t'
|-TypedefDecl 0x12907cce8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x127835fd0 '__clang_svboolx4_t'
|-TypedefDecl 0x12907cd50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x127835ff0 '__SVCount_t'
|-TypedefDecl 0x12907cdf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12907cdb0 'char *'
|   `-BuiltinType 0x1278352b0 'char'
|-TypedefDecl 0x12907ce68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12907cdb0 'char *'
|   `-BuiltinType 0x1278352b0 'char'
|-FunctionDecl 0x129095800 <dataset_diviso_filec/func5951_nonvuln.c:1:1, line:72:1> line:1:1 parselanaddr 'int (struct lan_addr_s *, const char *)'
| |-ParmVarDecl 0x12907d448 <col:14, col:34> col:34 used lan_addr 'struct lan_addr_s *'
| |-ParmVarDecl 0x12907d4c8 <col:44, col:57> col:57 used str 'const char *'
| `-CompoundStmt 0x128076400 <line:2:1, line:72:1>
|   |-DeclStmt 0x129095980 <line:3:2, col:16>
|   | `-VarDecl 0x129095918 <col:2, col:15> col:15 used p 'const char *'
|   |-DeclStmt 0x129095a18 <line:4:2, col:7>
|   | `-VarDecl 0x1290959b0 <col:2, col:6> col:6 used n 'int'
|   |-DeclStmt 0x129095b38 <line:5:2, col:14>
|   | `-VarDecl 0x129095ad0 <col:2, col:13> col:7 used tmp 'char[16]'
|   |-BinaryOperator 0x129095ef8 <line:8:2, col:6> 'const char *' '='
|   | |-DeclRefExpr 0x129095ea0 <col:2> 'const char *' lvalue Var 0x129095918 'p' 'const char *'
|   | `-ImplicitCastExpr 0x129095ee0 <col:6> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x129095ec0 <col:6> 'const char *' lvalue ParmVar 0x12907d4c8 'str' 'const char *'
|   |-WhileStmt 0x1290963f0 <line:9:2, line:10:4>
|   | |-BinaryOperator 0x129096398 <line:9:8, col:38> 'int' '&&'
|   | | |-BinaryOperator 0x129096050 <col:8, col:20> 'int' '&&'
|   | | | |-ImplicitCastExpr 0x129096038 <col:8, col:9> 'int' <IntegralCast>
|   | | | | `-ImplicitCastExpr 0x129096020 <col:8, col:9> 'char' <LValueToRValue>
|   | | | |   `-UnaryOperator 0x129095f50 <col:8, col:9> 'const char' lvalue prefix '*' cannot overflow
|   | | | |     `-ImplicitCastExpr 0x129095f38 <col:9> 'const char *' <LValueToRValue>
|   | | | |       `-DeclRefExpr 0x129095f18 <col:9> 'const char *' lvalue Var 0x129095918 'p' 'const char *'
|   | | | `-BinaryOperator 0x129096000 <col:14, col:20> 'int' '!='
|   | | |   |-ImplicitCastExpr 0x129095fe8 <col:14, col:15> 'int' <IntegralCast>
|   | | |   | `-ImplicitCastExpr 0x129095fd0 <col:14, col:15> 'char' <LValueToRValue>
|   | | |   |   `-UnaryOperator 0x129095fa0 <col:14, col:15> 'const char' lvalue prefix '*' cannot overflow
|   | | |   |     `-ImplicitCastExpr 0x129095f88 <col:15> 'const char *' <LValueToRValue>
|   | | |   |       `-DeclRefExpr 0x129095f68 <col:15> 'const char *' lvalue Var 0x129095918 'p' 'const char *'
|   | | |   `-CharacterLiteral 0x129095fb8 <col:20> 'int' 47
|   | | `-UnaryOperator 0x129096380 <col:27, col:38> 'int' prefix '!' cannot overflow
|   | |   `-CallExpr 0x129096328 <col:28, col:38> 'int'
|   | |     |-ImplicitCastExpr 0x129096310 <col:28> 'int (*)(int)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x129096268 <col:28> 'int (int)' Function 0x1290960a8 'isspace' 'int (int)'
|   | |     `-ImplicitCastExpr 0x129096368 <col:36, col:37> 'int' <IntegralCast>
|   | |       `-ImplicitCastExpr 0x129096350 <col:36, col:37> 'char' <LValueToRValue>
|   | |         `-UnaryOperator 0x1290962c0 <col:36, col:37> 'const char' lvalue prefix '*' cannot overflow
|   | |           `-ImplicitCastExpr 0x1290962a8 <col:37> 'const char *' <LValueToRValue>
|   | |             `-DeclRefExpr 0x129096288 <col:37> 'const char *' lvalue Var 0x129095918 'p' 'const char *'
|   | `-UnaryOperator 0x1290963d8 <line:10:3, col:4> 'const char *' postfix '++'
|   |   `-DeclRefExpr 0x1290963b8 <col:3> 'const char *' lvalue Var 0x129095918 'p' 'const char *'
|   |-BinaryOperator 0x1290964d8 <line:11:2, col:10> 'int' '='
|   | |-DeclRefExpr 0x129096410 <col:2> 'int' lvalue Var 0x1290959b0 'n' 'int'
|   | `-ImplicitCastExpr 0x1290964c0 <col:6, col:10> 'int' <IntegralCast>
|   |   `-BinaryOperator 0x1290964a0 <col:6, col:10> 'long' '-'
|   |     |-ImplicitCastExpr 0x129096470 <col:6> 'const char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x129096430 <col:6> 'const char *' lvalue Var 0x129095918 'p' 'const char *'
|   |     `-ImplicitCastExpr 0x129096488 <col:10> 'const char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x129096450 <col:10> 'const char *' lvalue ParmVar 0x12907d4c8 'str' 'const char *'
|   |-IfStmt 0x12800eab0 <line:12:2, line:27:2> has_else
|   | |-BinaryOperator 0x127840f18 <line:12:5, col:57> 'int' contains-errors '&&'
|   | | |-UnaryOperator 0x1290967c0 <col:5, col:20> 'int' prefix '!' cannot overflow
|   | | | `-CallExpr 0x129096768 <col:6, col:20> 'int'
|   | | |   |-ImplicitCastExpr 0x129096750 <col:6> 'int (*)(int)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x1290966b8 <col:6> 'int (int)' Function 0x1290964f8 'isdigit' 'int (int)'
|   | | |   `-ImplicitCastExpr 0x1290967a8 <col:14, col:19> 'int' <IntegralCast>
|   | | |     `-ImplicitCastExpr 0x129096790 <col:14, col:19> 'char' <LValueToRValue>
|   | | |       `-ArraySubscriptExpr 0x129096730 <col:14, col:19> 'const char' lvalue
|   | | |         |-ImplicitCastExpr 0x129096718 <col:14> 'const char *' <LValueToRValue>
|   | | |         | `-DeclRefExpr 0x1290966d8 <col:14> 'const char *' lvalue ParmVar 0x12907d4c8 'str' 'const char *'
|   | | |         `-IntegerLiteral 0x1290966f8 <col:18> 'int' 0
|   | | `-BinaryOperator 0x127840ef8 <col:25, col:57> 'int' contains-errors '<'
|   | |   |-ImplicitCastExpr 0x127840ee0 <col:25> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x1290967d8 <col:25> 'int' lvalue Var 0x1290959b0 'n' 'int'
|   | |   `-CStyleCastExpr 0x127840eb8 <col:29, col:57> 'int' contains-errors <Dependent>
|   | |     `-UnaryExprOrTypeTraitExpr 0x127840e80 <col:34, col:57> 'unsigned long' contains-errors sizeof
|   | |       `-ParenExpr 0x127840e60 <col:40, col:57> '<dependent type>' contains-errors lvalue
|   | |         `-RecoveryExpr 0x127840e38 <col:41, col:51> '<dependent type>' contains-errors lvalue
|   | |           `-DeclRefExpr 0x127840e00 <col:41> 'struct lan_addr_s *' lvalue ParmVar 0x12907d448 'lan_addr' 'struct lan_addr_s *' non_odr_use_unevaluated
|   | |-CompoundStmt 0x127841900 <col:60, line:20:2>
|   | | |-CallExpr 0x127841310 <line:14:3, col:34> '<dependent type>' contains-errors
|   | | | |-DeclRefExpr 0x127841208 <col:3> 'void *(void *, const void *, unsigned long)' Function 0x127840fb8 'memcpy' 'void *(void *, const void *, unsigned long)'
|   | | | |-RecoveryExpr 0x127841260 <col:10, col:20> '<dependent type>' contains-errors lvalue
|   | | | | `-DeclRefExpr 0x127841228 <col:10> 'struct lan_addr_s *' lvalue ParmVar 0x12907d448 'lan_addr' 'struct lan_addr_s *'
|   | | | |-DeclRefExpr 0x127841288 <col:28> 'const char *' lvalue ParmVar 0x12907d4c8 'str' 'const char *'
|   | | | `-DeclRefExpr 0x1278412a8 <col:33> 'int' lvalue Var 0x1290959b0 'n' 'int'
|   | | |-BinaryOperator 0x127841430 <line:15:3, col:25> '<dependent type>' contains-errors '='
|   | | | |-ArraySubscriptExpr 0x1278413f8 <col:3, col:21> '<dependent type>' contains-errors lvalue
|   | | | | |-ImplicitCastExpr 0x1278413c8 <col:3, col:13> '<dependent type>' contains-errors <LValueToRValue>
|   | | | | | `-RecoveryExpr 0x127841380 <col:3, col:13> '<dependent type>' contains-errors lvalue
|   | | | | |   `-DeclRefExpr 0x127841348 <col:3> 'struct lan_addr_s *' lvalue ParmVar 0x12907d448 'lan_addr' 'struct lan_addr_s *'
|   | | | | `-ImplicitCastExpr 0x1278413e0 <col:20> 'int' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x1278413a8 <col:20> 'int' lvalue Var 0x1290959b0 'n' 'int'
|   | | | `-CharacterLiteral 0x127841418 <col:25> 'int' 0
|   | | `-IfStmt 0x1278418e0 <line:16:3, line:18:9>
|   | |   |-BinaryOperator 0x127841858 <line:16:6, line:17:52> 'int' contains-errors '<'
|   | |   | |-CallExpr 0x1278417f0 <line:16:6, line:17:48> '<dependent type>' contains-errors
|   | |   | | |-DeclRefExpr 0x127841580 <line:16:6> 'int ()' Function 0x1278414c8 'getifaddr' 'int ()'
|   | |   | | |-RecoveryExpr 0x1278415d8 <col:16, col:26> '<dependent type>' contains-errors lvalue
|   | |   | | | `-DeclRefExpr 0x1278415a0 <col:16> 'struct lan_addr_s *' lvalue ParmVar 0x12907d448 'lan_addr' 'struct lan_addr_s *'
|   | |   | | |-RecoveryExpr 0x127841638 <col:34, col:44> '<dependent type>' contains-errors lvalue
|   | |   | | | `-DeclRefExpr 0x127841600 <col:34> 'struct lan_addr_s *' lvalue ParmVar 0x12907d448 'lan_addr' 'struct lan_addr_s *'
|   | |   | | |-UnaryExprOrTypeTraitExpr 0x1278416e0 <col:49, col:69> 'unsigned long' contains-errors sizeof
|   | |   | | | `-ParenExpr 0x1278416c0 <col:55, col:69> '<dependent type>' contains-errors lvalue
|   | |   | | |   `-RecoveryExpr 0x127841698 <col:56, col:66> '<dependent type>' contains-errors lvalue
|   | |   | | |     `-DeclRefExpr 0x127841660 <col:56> 'struct lan_addr_s *' lvalue ParmVar 0x12907d448 'lan_addr' 'struct lan_addr_s *' non_odr_use_unevaluated
|   | |   | | |-UnaryOperator 0x127841760 <line:17:16, col:27> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | |   | | | `-RecoveryExpr 0x127841738 <col:17, col:27> '<dependent type>' contains-errors lvalue
|   | |   | | |   `-DeclRefExpr 0x127841700 <col:17> 'struct lan_addr_s *' lvalue ParmVar 0x12907d448 'lan_addr' 'struct lan_addr_s *'
|   | |   | | `-UnaryOperator 0x1278417d8 <col:33, col:44> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | |   | |   `-RecoveryExpr 0x1278417b0 <col:34, col:44> '<dependent type>' contains-errors lvalue
|   | |   | |     `-DeclRefExpr 0x127841778 <col:34> 'struct lan_addr_s *' lvalue ParmVar 0x12907d448 'lan_addr' 'struct lan_addr_s *'
|   | |   | `-IntegerLiteral 0x127841838 <col:52> 'int' 0
|   | |   `-GotoStmt 0x1278418c8 <line:18:4, col:9> 'parselan_error' 0x127841878
|   | `-CompoundStmt 0x12800ea80 <line:20:9, line:27:2>
|   |   |-IfStmt 0x1278419b8 <line:21:3, line:22:9>
|   |   | |-BinaryOperator 0x127841980 <line:21:6, col:8> 'int' '>'
|   |   | | |-ImplicitCastExpr 0x127841968 <col:6> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x127841928 <col:6> 'int' lvalue Var 0x1290959b0 'n' 'int'
|   |   | | `-IntegerLiteral 0x127841948 <col:8> 'int' 15
|   |   | `-GotoStmt 0x1278419a0 <line:22:4, col:9> 'parselan_error' 0x127841878
|   |   |-CallExpr 0x127841ae0 <line:23:3, col:31> '<dependent type>' contains-errors
|   |   | |-DeclRefExpr 0x1278419d8 <col:3> 'void *(void *, const void *, unsigned long)' Function 0x127840fb8 'memcpy' 'void *(void *, const void *, unsigned long)'
|   |   | |-RecoveryExpr 0x127841a30 <col:10, col:20> '<dependent type>' contains-errors lvalue
|   |   | | `-DeclRefExpr 0x1278419f8 <col:10> 'struct lan_addr_s *' lvalue ParmVar 0x12907d448 'lan_addr' 'struct lan_addr_s *'
|   |   | |-DeclRefExpr 0x127841a58 <col:25> 'const char *' lvalue ParmVar 0x12907d4c8 'str' 'const char *'
|   |   | `-DeclRefExpr 0x127841a78 <col:30> 'int' lvalue Var 0x1290959b0 'n' 'int'
|   |   |-BinaryOperator 0x127841c00 <line:24:3, col:22> '<dependent type>' contains-errors '='
|   |   | |-ArraySubscriptExpr 0x127841bc8 <col:3, col:18> '<dependent type>' contains-errors lvalue
|   |   | | |-ImplicitCastExpr 0x127841b98 <col:3, col:13> '<dependent type>' contains-errors <LValueToRValue>
|   |   | | | `-RecoveryExpr 0x127841b50 <col:3, col:13> '<dependent type>' contains-errors lvalue
|   |   | | |   `-DeclRefExpr 0x127841b18 <col:3> 'struct lan_addr_s *' lvalue ParmVar 0x12907d448 'lan_addr' 'struct lan_addr_s *'
|   |   | | `-ImplicitCastExpr 0x127841bb0 <col:17> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x127841b78 <col:17> 'int' lvalue Var 0x1290959b0 'n' 'int'
|   |   | `-CharacterLiteral 0x127841be8 <col:22> 'int' 0
|   |   `-IfStmt 0x12800ea60 <line:25:3, line:26:9>
|   |     |-UnaryOperator 0x12800ea30 <line:25:6, col:47> '<dependent type>' contains-errors prefix '!' cannot overflow
|   |     | `-CallExpr 0x12800ea00 <col:7, col:47> '<dependent type>' contains-errors
|   |     |   |-DeclRefExpr 0x127841d00 <col:7> 'int ()' Function 0x127841c48 'inet_aton' 'int ()'
|   |     |   |-RecoveryExpr 0x127841d58 <col:17, col:27> '<dependent type>' contains-errors lvalue
|   |     |   | `-DeclRefExpr 0x127841d20 <col:17> 'struct lan_addr_s *' lvalue ParmVar 0x12907d448 'lan_addr' 'struct lan_addr_s *'
|   |     |   `-UnaryOperator 0x127841de0 <col:32, col:43> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |     |     `-RecoveryExpr 0x127841db8 <col:33, col:43> '<dependent type>' contains-errors lvalue
|   |     |       `-DeclRefExpr 0x127841d80 <col:33> 'struct lan_addr_s *' lvalue ParmVar 0x12907d448 'lan_addr' 'struct lan_addr_s *'
|   |     `-GotoStmt 0x12800ea48 <line:26:4, col:9> 'parselan_error' 0x127841878
|   |-IfStmt 0x1280761b0 <line:28:2, line:53:2> has_else
|   | |-BinaryOperator 0x12800eb78 <line:28:5, col:11> 'int' '=='
|   | | |-ImplicitCastExpr 0x12800eb60 <col:5, col:6> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x12800eb48 <col:5, col:6> 'char' <LValueToRValue>
|   | | |   `-UnaryOperator 0x12800eb18 <col:5, col:6> 'const char' lvalue prefix '*' cannot overflow
|   | | |     `-ImplicitCastExpr 0x12800eb00 <col:6> 'const char *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x12800eae0 <col:6> 'const char *' lvalue Var 0x129095918 'p' 'const char *'
|   | | `-CharacterLiteral 0x12800eb30 <col:11> 'int' 47
|   | |-CompoundStmt 0x128075f20 <col:16, line:50:2>
|   | | |-DeclStmt 0x12800ec50 <line:29:3, col:23>
|   | | | `-VarDecl 0x12800ebb0 <col:3, col:22> col:16 used q 'const char *' cinit
|   | | |   `-UnaryOperator 0x12800ec38 <col:20, col:22> 'const char *' prefix '++'
|   | | |     `-DeclRefExpr 0x12800ec18 <col:22> 'const char *' lvalue Var 0x129095918 'p' 'const char *'
|   | | |-WhileStmt 0x12800ee20 <line:30:3, line:31:5>
|   | | | |-BinaryOperator 0x12800edc8 <line:30:9, col:25> 'int' '&&'
|   | | | | |-ImplicitCastExpr 0x12800edb0 <col:9, col:10> 'int' <IntegralCast>
|   | | | | | `-ImplicitCastExpr 0x12800ed98 <col:9, col:10> 'char' <LValueToRValue>
|   | | | | |   `-UnaryOperator 0x12800eca0 <col:9, col:10> 'const char' lvalue prefix '*' cannot overflow
|   | | | | |     `-ImplicitCastExpr 0x12800ec88 <col:10> 'const char *' <LValueToRValue>
|   | | | | |       `-DeclRefExpr 0x12800ec68 <col:10> 'const char *' lvalue Var 0x129095918 'p' 'const char *'
|   | | | | `-CallExpr 0x12800ed40 <col:15, col:25> 'int'
|   | | | |   |-ImplicitCastExpr 0x12800ed28 <col:15> 'int (*)(int)' <FunctionToPointerDecay>
|   | | | |   | `-DeclRefExpr 0x12800ecb8 <col:15> 'int (int)' Function 0x1290964f8 'isdigit' 'int (int)'
|   | | | |   `-ImplicitCastExpr 0x12800ed80 <col:23, col:24> 'int' <IntegralCast>
|   | | | |     `-ImplicitCastExpr 0x12800ed68 <col:23, col:24> 'char' <LValueToRValue>
|   | | | |       `-UnaryOperator 0x12800ed10 <col:23, col:24> 'const char' lvalue prefix '*' cannot overflow
|   | | | |         `-ImplicitCastExpr 0x12800ecf8 <col:24> 'const char *' <LValueToRValue>
|   | | | |           `-DeclRefExpr 0x12800ecd8 <col:24> 'const char *' lvalue Var 0x129095918 'p' 'const char *'
|   | | | `-UnaryOperator 0x12800ee08 <line:31:4, col:5> 'const char *' postfix '++'
|   | | |   `-DeclRefExpr 0x12800ede8 <col:4> 'const char *' lvalue Var 0x129095918 'p' 'const char *'
|   | | `-IfStmt 0x128075ef0 <line:32:3, line:49:3> has_else
|   | |   |-BinaryOperator 0x12800eed8 <line:32:6, col:10> 'int' '=='
|   | |   | |-ImplicitCastExpr 0x12800eec0 <col:6, col:7> 'int' <IntegralCast>
|   | |   | | `-ImplicitCastExpr 0x12800eea8 <col:6, col:7> 'char' <LValueToRValue>
|   | |   | |   `-UnaryOperator 0x12800ee78 <col:6, col:7> 'const char' lvalue prefix '*' cannot overflow
|   | |   | |     `-ImplicitCastExpr 0x12800ee60 <col:7> 'const char *' <LValueToRValue>
|   | |   | |       `-DeclRefExpr 0x12800ee40 <col:7> 'const char *' lvalue Var 0x129095918 'p' 'const char *'
|   | |   | `-CharacterLiteral 0x12800ee90 <col:10> 'int' 46
|   | |   |-CompoundStmt 0x12800f758 <col:15, line:43:3>
|   | |   | |-WhileStmt 0x12800f1a8 <line:34:4, line:35:6>
|   | |   | | |-BinaryOperator 0x12800f150 <line:34:10, col:39> 'int' '&&'
|   | |   | | | |-ImplicitCastExpr 0x12800f138 <col:10, col:11> 'int' <IntegralCast>
|   | |   | | | | `-ImplicitCastExpr 0x12800f120 <col:10, col:11> 'char' <LValueToRValue>
|   | |   | | | |   `-UnaryOperator 0x12800ef30 <col:10, col:11> 'const char' lvalue prefix '*' cannot overflow
|   | |   | | | |     `-ImplicitCastExpr 0x12800ef18 <col:11> 'const char *' <LValueToRValue>
|   | |   | | | |       `-DeclRefExpr 0x12800eef8 <col:11> 'const char *' lvalue Var 0x129095918 'p' 'const char *'
|   | |   | | | `-ParenExpr 0x12800f100 <col:16, col:39> 'int'
|   | |   | | |   `-BinaryOperator 0x12800f0e0 <col:17, col:38> 'int' '||'
|   | |   | | |     |-BinaryOperator 0x12800efe0 <col:17, col:21> 'int' '=='
|   | |   | | |     | |-ImplicitCastExpr 0x12800efc8 <col:17, col:18> 'int' <IntegralCast>
|   | |   | | |     | | `-ImplicitCastExpr 0x12800efb0 <col:17, col:18> 'char' <LValueToRValue>
|   | |   | | |     | |   `-UnaryOperator 0x12800ef80 <col:17, col:18> 'const char' lvalue prefix '*' cannot overflow
|   | |   | | |     | |     `-ImplicitCastExpr 0x12800ef68 <col:18> 'const char *' <LValueToRValue>
|   | |   | | |     | |       `-DeclRefExpr 0x12800ef48 <col:18> 'const char *' lvalue Var 0x129095918 'p' 'const char *'
|   | |   | | |     | `-CharacterLiteral 0x12800ef98 <col:21> 'int' 46
|   | |   | | |     `-CallExpr 0x12800f088 <col:28, col:38> 'int'
|   | |   | | |       |-ImplicitCastExpr 0x12800f070 <col:28> 'int (*)(int)' <FunctionToPointerDecay>
|   | |   | | |       | `-DeclRefExpr 0x12800f000 <col:28> 'int (int)' Function 0x1290964f8 'isdigit' 'int (int)'
|   | |   | | |       `-ImplicitCastExpr 0x12800f0c8 <col:36, col:37> 'int' <IntegralCast>
|   | |   | | |         `-ImplicitCastExpr 0x12800f0b0 <col:36, col:37> 'char' <LValueToRValue>
|   | |   | | |           `-UnaryOperator 0x12800f058 <col:36, col:37> 'const char' lvalue prefix '*' cannot overflow
|   | |   | | |             `-ImplicitCastExpr 0x12800f040 <col:37> 'const char *' <LValueToRValue>
|   | |   | | |               `-DeclRefExpr 0x12800f020 <col:37> 'const char *' lvalue Var 0x129095918 'p' 'const char *'
|   | |   | | `-UnaryOperator 0x12800f190 <line:35:5, col:6> 'const char *' postfix '++'
|   | |   | |   `-DeclRefExpr 0x12800f170 <col:5> 'const char *' lvalue Var 0x129095918 'p' 'const char *'
|   | |   | |-BinaryOperator 0x12800f290 <line:36:4, col:12> 'int' '='
|   | |   | | |-DeclRefExpr 0x12800f1c8 <col:4> 'int' lvalue Var 0x1290959b0 'n' 'int'
|   | |   | | `-ImplicitCastExpr 0x12800f278 <col:8, col:12> 'int' <IntegralCast>
|   | |   | |   `-BinaryOperator 0x12800f258 <col:8, col:12> 'long' '-'
|   | |   | |     |-ImplicitCastExpr 0x12800f228 <col:8> 'const char *' <LValueToRValue>
|   | |   | |     | `-DeclRefExpr 0x12800f1e8 <col:8> 'const char *' lvalue Var 0x129095918 'p' 'const char *'
|   | |   | |     `-ImplicitCastExpr 0x12800f240 <col:12> 'const char *' <LValueToRValue>
|   | |   | |       `-DeclRefExpr 0x12800f208 <col:12> 'const char *' lvalue Var 0x12800ebb0 'q' 'const char *'
|   | |   | |-IfStmt 0x12800f340 <line:37:4, line:38:10>
|   | |   | | |-BinaryOperator 0x12800f308 <line:37:7, col:9> 'int' '>'
|   | |   | | | |-ImplicitCastExpr 0x12800f2f0 <col:7> 'int' <LValueToRValue>
|   | |   | | | | `-DeclRefExpr 0x12800f2b0 <col:7> 'int' lvalue Var 0x1290959b0 'n' 'int'
|   | |   | | | `-IntegerLiteral 0x12800f2d0 <col:9> 'int' 15
|   | |   | | `-GotoStmt 0x12800f328 <line:38:5, col:10> 'parselan_error' 0x127841878
|   | |   | |-CallExpr 0x12800f478 <line:39:4, col:20> 'void *'
|   | |   | | |-ImplicitCastExpr 0x12800f460 <col:4> 'void *(*)(void *, const void *, unsigned long)' <FunctionToPointerDecay>
|   | |   | | | `-DeclRefExpr 0x12800f360 <col:4> 'void *(void *, const void *, unsigned long)' Function 0x127840fb8 'memcpy' 'void *(void *, const void *, unsigned long)'
|   | |   | | |-ImplicitCastExpr 0x12800f4c8 <col:11> 'void *' <BitCast>
|   | |   | | | `-ImplicitCastExpr 0x12800f4b0 <col:11> 'char *' <ArrayToPointerDecay>
|   | |   | | |   `-DeclRefExpr 0x12800f380 <col:11> 'char[16]' lvalue Var 0x129095ad0 'tmp' 'char[16]'
|   | |   | | |-ImplicitCastExpr 0x12800f4f8 <col:16> 'const void *' <BitCast>
|   | |   | | | `-ImplicitCastExpr 0x12800f4e0 <col:16> 'const char *' <LValueToRValue>
|   | |   | | |   `-DeclRefExpr 0x12800f3a0 <col:16> 'const char *' lvalue Var 0x12800ebb0 'q' 'const char *'
|   | |   | | `-ImplicitCastExpr 0x12800f528 <col:19> 'unsigned long' <IntegralCast>
|   | |   | |   `-ImplicitCastExpr 0x12800f510 <col:19> 'int' <LValueToRValue>
|   | |   | |     `-DeclRefExpr 0x12800f3c0 <col:19> 'int' lvalue Var 0x1290959b0 'n' 'int'
|   | |   | |-BinaryOperator 0x12800f600 <line:40:4, col:13> 'char' '='
|   | |   | | |-ArraySubscriptExpr 0x12800f5b0 <col:4, col:9> 'char' lvalue
|   | |   | | | |-ImplicitCastExpr 0x12800f580 <col:4> 'char *' <ArrayToPointerDecay>
|   | |   | | | | `-DeclRefExpr 0x12800f540 <col:4> 'char[16]' lvalue Var 0x129095ad0 'tmp' 'char[16]'
|   | |   | | | `-ImplicitCastExpr 0x12800f598 <col:8> 'int' <LValueToRValue>
|   | |   | | |   `-DeclRefExpr 0x12800f560 <col:8> 'int' lvalue Var 0x1290959b0 'n' 'int'
|   | |   | | `-ImplicitCastExpr 0x12800f5e8 <col:13> 'char' <IntegralCast>
|   | |   | |   `-CharacterLiteral 0x12800f5d0 <col:13> 'int' 0
|   | |   | `-IfStmt 0x12800f738 <line:41:4, line:42:10>
|   | |   |   |-UnaryOperator 0x12800f708 <line:41:7, col:38> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | |   |   | `-CallExpr 0x12800f6d8 <col:8, col:38> '<dependent type>' contains-errors
|   | |   |   |   |-DeclRefExpr 0x12800f620 <col:8> 'int ()' Function 0x127841c48 'inet_aton' 'int ()'
|   | |   |   |   |-DeclRefExpr 0x12800f640 <col:18> 'char[16]' lvalue Var 0x129095ad0 'tmp' 'char[16]'
|   | |   |   |   `-UnaryOperator 0x12800f6c0 <col:23, col:34> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | |   |   |     `-RecoveryExpr 0x12800f698 <col:24, col:34> '<dependent type>' contains-errors lvalue
|   | |   |   |       `-DeclRefExpr 0x12800f660 <col:24> 'struct lan_addr_s *' lvalue ParmVar 0x12907d448 'lan_addr' 'struct lan_addr_s *'
|   | |   |   `-GotoStmt 0x12800f720 <line:42:5, col:10> 'parselan_error' 0x127841878
|   | |   `-CompoundStmt 0x128075ec8 <line:43:10, line:49:3>
|   | |     |-DeclStmt 0x12800f9c8 <line:45:4, col:23>
|   | |     | `-VarDecl 0x12800f7b0 <col:4, col:22> col:8 used nbits 'int' cinit
|   | |     |   `-CallExpr 0x12800f988 <col:16, col:22> 'int'
|   | |     |     |-ImplicitCastExpr 0x12800f970 <col:16> 'int (*)()' <FunctionToPointerDecay>
|   | |     |     | `-DeclRefExpr 0x12800f8f8 <col:16> 'int ()' Function 0x12800f840 'atoi' 'int ()'
|   | |     |     `-ImplicitCastExpr 0x12800f9b0 <col:21> 'const char *' <LValueToRValue>
|   | |     |       `-DeclRefExpr 0x12800f918 <col:21> 'const char *' lvalue Var 0x12800ebb0 'q' 'const char *'
|   | |     |-IfStmt 0x128075b08 <line:46:4, line:47:10>
|   | |     | |-BinaryOperator 0x128075ad0 <line:46:7, col:29> 'int' '||'
|   | |     | | |-BinaryOperator 0x128075a38 <col:7, col:15> 'int' '>'
|   | |     | | | |-ImplicitCastExpr 0x128075a20 <col:7> 'int' <LValueToRValue>
|   | |     | | | | `-DeclRefExpr 0x12800f9e0 <col:7> 'int' lvalue Var 0x12800f7b0 'nbits' 'int'
|   | |     | | | `-IntegerLiteral 0x128075a00 <col:15> 'int' 32
|   | |     | | `-BinaryOperator 0x128075ab0 <col:21, col:29> 'int' '<'
|   | |     | |   |-ImplicitCastExpr 0x128075a98 <col:21> 'int' <LValueToRValue>
|   | |     | |   | `-DeclRefExpr 0x128075a58 <col:21> 'int' lvalue Var 0x12800f7b0 'nbits' 'int'
|   | |     | |   `-IntegerLiteral 0x128075a78 <col:29> 'int' 0
|   | |     | `-GotoStmt 0x128075af0 <line:47:5, col:10> 'parselan_error' 0x127841878
|   | |     `-BinaryOperator 0x128075ea8 <line:48:4, col:75> '<dependent type>' contains-errors '='
|   | |       |-CXXDependentScopeMemberExpr 0x128075b88 <col:4, col:19> '<dependent type>' contains-errors lvalue .s_addr
|   | |       | `-RecoveryExpr 0x128075b60 <col:4, col:14> '<dependent type>' contains-errors lvalue
|   | |       |   `-DeclRefExpr 0x128075b28 <col:4> 'struct lan_addr_s *' lvalue ParmVar 0x12907d448 'lan_addr' 'struct lan_addr_s *'
|   | |       `-CallExpr 0x128075e80 <col:28, col:75> 'int'
|   | |         |-ImplicitCastExpr 0x128075e68 <col:28> 'int (*)()' <FunctionToPointerDecay>
|   | |         | `-DeclRefExpr 0x128075cb0 <col:28> 'int ()' Function 0x128075bf8 'htonl' 'int ()'
|   | |         `-ConditionalOperator 0x128075e38 <col:34, col:74> 'unsigned int'
|   | |           |-ImplicitCastExpr 0x128075e08 <col:34> 'int' <LValueToRValue>
|   | |           | `-DeclRefExpr 0x128075cd0 <col:34> 'int' lvalue Var 0x12800f7b0 'nbits' 'int'
|   | |           |-ParenExpr 0x128075dc8 <col:42, col:70> 'unsigned int'
|   | |           | `-BinaryOperator 0x128075da8 <col:43, col:69> 'unsigned int' '<<'
|   | |           |   |-IntegerLiteral 0x128075cf0 <col:43> 'unsigned int' 4294967295
|   | |           |   `-ParenExpr 0x128075d88 <col:58, col:69> 'int'
|   | |           |     `-BinaryOperator 0x128075d68 <col:59, col:64> 'int' '-'
|   | |           |       |-IntegerLiteral 0x128075d10 <col:59> 'int' 32
|   | |           |       `-ImplicitCastExpr 0x128075d50 <col:64> 'int' <LValueToRValue>
|   | |           |         `-DeclRefExpr 0x128075d30 <col:64> 'int' lvalue Var 0x12800f7b0 'nbits' 'int'
|   | |           `-ImplicitCastExpr 0x128075e20 <col:74> 'unsigned int' <IntegralCast>
|   | |             `-IntegerLiteral 0x128075de8 <col:74> 'int' 0
|   | `-IfStmt 0x128076190 <line:50:9, line:53:2>
|   |   |-BinaryOperator 0x128076010 <line:50:12, col:37> 'int' contains-errors '=='
|   |   | |-CXXDependentScopeMemberExpr 0x128075fa8 <col:12, col:27> '<dependent type>' contains-errors lvalue .s_addr
|   |   | | `-RecoveryExpr 0x128075f80 <col:12, col:22> '<dependent type>' contains-errors lvalue
|   |   | |   `-DeclRefExpr 0x128075f48 <col:12> 'struct lan_addr_s *' lvalue ParmVar 0x12907d448 'lan_addr' 'struct lan_addr_s *'
|   |   | `-IntegerLiteral 0x128075ff0 <col:37> 'int' 0
|   |   `-CompoundStmt 0x128076178 <col:40, line:53:2>
|   |     `-BinaryOperator 0x128076158 <line:52:3, col:44> '<dependent type>' contains-errors '='
|   |       |-CXXDependentScopeMemberExpr 0x128076090 <col:3, col:18> '<dependent type>' contains-errors lvalue .s_addr
|   |       | `-RecoveryExpr 0x128076068 <col:3, col:13> '<dependent type>' contains-errors lvalue
|   |       |   `-DeclRefExpr 0x128076030 <col:3> 'struct lan_addr_s *' lvalue ParmVar 0x12907d448 'lan_addr' 'struct lan_addr_s *'
|   |       `-CallExpr 0x128076130 <col:27, col:44> 'int'
|   |         |-ImplicitCastExpr 0x128076118 <col:27> 'int (*)()' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x1280760d8 <col:27> 'int ()' Function 0x128075bf8 'htonl' 'int ()'
|   |         `-IntegerLiteral 0x1280760f8 <col:33> 'unsigned int' 4294967040
|   |-ReturnStmt 0x128076200 <line:67:2, col:9>
|   | `-IntegerLiteral 0x1280761e0 <col:9> 'int' 0
|   |-LabelStmt 0x128076398 <line:68:1, col:15> 'parselan_error'
|   | `-NullStmt 0x128076390 <col:15>
|   `-ReturnStmt 0x1280763f0 <line:71:2, col:10>
|     `-UnaryOperator 0x1280763d8 <col:9, col:10> 'int' prefix '-'
|       `-IntegerLiteral 0x1280763b8 <col:10> 'int' 1
|-FunctionDecl 0x129095b98 <line:7:2> col:2 implicit used memset 'void *(void *, int, unsigned long)' extern
| |-ParmVarDecl 0x129095c98 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x129095d00 <<invalid sloc>> <invalid sloc> 'int'
| |-ParmVarDecl 0x129095d68 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x129095c40 <<invalid sloc>> Implicit 900
|-FunctionDecl 0x1290960a8 <line:9:28> col:28 implicit used isspace 'int (int)' extern
| |-ParmVarDecl 0x1290961a8 <<invalid sloc>> <invalid sloc> 'int'
| |-BuiltinAttr 0x129096150 <<invalid sloc>> Implicit 929
| |-NoThrowAttr 0x129096218 <col:28> Implicit
| `-PureAttr 0x129096240 <col:28> Implicit
|-FunctionDecl 0x1290964f8 <line:12:6> col:6 implicit used isdigit 'int (int)' extern
| |-ParmVarDecl 0x1290965f8 <<invalid sloc>> <invalid sloc> 'int'
| |-BuiltinAttr 0x1290965a0 <<invalid sloc>> Implicit 924
| |-NoThrowAttr 0x129096668 <col:6> Implicit
| `-PureAttr 0x129096690 <col:6> Implicit
`-FunctionDecl 0x127840fb8 <line:14:3> col:3 implicit used memcpy 'void *(void *, const void *, unsigned long)' extern
  |-ParmVarDecl 0x1278410b8 <<invalid sloc>> <invalid sloc> 'void *'
  |-ParmVarDecl 0x127841120 <<invalid sloc>> <invalid sloc> 'const void *'
  |-ParmVarDecl 0x127841188 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x127841060 <<invalid sloc>> Implicit 882
