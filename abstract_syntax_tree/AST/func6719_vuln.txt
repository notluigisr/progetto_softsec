TranslationUnitDecl 0x128855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1288564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x128855bd0 '__int128'
|-TypedefDecl 0x128856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x128855bf0 'unsigned __int128'
|-TypedefDecl 0x12900be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12900bc00 'struct __NSConstantString_tag'
|   `-Record 0x128856580 '__NSConstantString_tag'
|-TypedefDecl 0x12900be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x128855d90 '__SVInt8_t'
|-TypedefDecl 0x12900bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x128855db0 '__SVInt16_t'
|-TypedefDecl 0x12900bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x128855dd0 '__SVInt32_t'
|-TypedefDecl 0x12900bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x128855df0 '__SVInt64_t'
|-TypedefDecl 0x12900c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x128855e10 '__SVUint8_t'
|-TypedefDecl 0x12900c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x128855e30 '__SVUint16_t'
|-TypedefDecl 0x12900c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x128855e50 '__SVUint32_t'
|-TypedefDecl 0x12900c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x128855e70 '__SVUint64_t'
|-TypedefDecl 0x12900c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x128855e90 '__SVFloat16_t'
|-TypedefDecl 0x12900c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x128855eb0 '__SVFloat32_t'
|-TypedefDecl 0x12900c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x128855ed0 '__SVFloat64_t'
|-TypedefDecl 0x12900c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x128855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12900c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x128855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12900c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x128855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12900c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x128855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12900c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x128855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12900c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x128855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12900c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x128855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12900c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x128855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12900c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x128855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12900c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x128856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12900c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x128856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12900c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x128856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12900c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x128856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12900c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x128856090 '__clang_svint8x3_t'
|-TypedefDecl 0x12900c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1288560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12900c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1288560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12900c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1288560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12900c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x128856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12900ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x128856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12900cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x128856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12900cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x128856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12900cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x128856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12900d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1288561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12900d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1288561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12900d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1288561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12900d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x128856210 '__clang_svint8x4_t'
|-TypedefDecl 0x12900d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x128856230 '__clang_svint16x4_t'
|-TypedefDecl 0x12900d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x128856250 '__clang_svint32x4_t'
|-TypedefDecl 0x12900d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x128856270 '__clang_svint64x4_t'
|-TypedefDecl 0x12900d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x128856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12900d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1288562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12900d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1288562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12900d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1288562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12900d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x128856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12900d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x128856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12900d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x128856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12900d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x128856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12900da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x128856390 '__SVBool_t'
|-TypedefDecl 0x12900da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1288563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12900dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1288563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12900db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1288563f0 '__SVCount_t'
|-TypedefDecl 0x12900dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12900dbb0 'char *'
|   `-BuiltinType 0x1288556b0 'char'
|-TypedefDecl 0x12900dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12900dbb0 'char *'
|   `-BuiltinType 0x1288556b0 'char'
`-FunctionDecl 0x12900dfd8 <dataset_diviso_filec/func6719_vuln.c:1:1, line:90:1> line:1:20 invalid ParseImageResourceBlocks 'int *(int *, const unsigned char *, int, int *)' static
  |-ParmVarDecl 0x12900dd28 <col:45, col:52> col:52 referenced invalid image 'int *'
  |-ParmVarDecl 0x12900ddd8 <line:2:3, col:24> col:24 used blocks 'const unsigned char *'
  |-ParmVarDecl 0x12900de58 <col:31, col:38> col:38 invalid length 'int'
  |-ParmVarDecl 0x12900ded8 <line:3:3, col:22> col:22 invalid has_merged_image 'int *'
  `-CompoundStmt 0x12a00c2e0 <line:4:1, line:90:1>
    |-DeclStmt 0x12900e120 <line:5:3, line:6:7>
    | `-VarDecl 0x12900e0b8 <line:5:3, line:6:6> col:6 used p 'const unsigned char *'
    |-DeclStmt 0x12900e1d0 <line:11:3, line:12:16>
    | `-VarDecl 0x12900e168 <line:11:3, line:12:5> col:5 used name_length 'unsigned char'
    |-DeclStmt 0x12900e268 <line:14:3, line:15:10>
    | `-VarDecl 0x12900e200 <line:14:3, line:15:5> col:5 used count 'unsigned int'
    |-DeclStmt 0x12900e398 <line:17:3, line:19:15>
    | |-VarDecl 0x12900e298 <line:17:3, line:18:5> col:5 used id 'unsigned short'
    | `-VarDecl 0x12900e318 <line:17:3, line:19:5> col:5 used short_sans 'unsigned short'
    |-CallExpr 0x1290277c0 <line:24:3, col:36> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x129027718 <col:3> 'int ()' Function 0x129027660 'SetStringInfoDatum' 'int ()'
    | |-RecoveryExpr 0x1290277a0 <col:22> '<dependent type>' contains-errors lvalue
    | `-DeclRefExpr 0x129027750 <col:30> 'const unsigned char *' lvalue ParmVar 0x12900ddd8 'blocks' 'const unsigned char *'
    |-CallExpr 0x1290279c0 <line:25:3, col:34> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x1290278d0 <col:3> 'int ()' Function 0x129027818 'SetStringInfoName' 'int ()'
    | |-RecoveryExpr 0x1290279a0 <col:21> '<dependent type>' contains-errors lvalue
    | `-StringLiteral 0x129027950 <col:29> 'char[4]' lvalue "STR"
    `-ForStmt 0x12a00c2a8 <line:26:3, line:88:3>
      |-BinaryOperator 0x129027a48 <line:26:8, col:10> 'const unsigned char *' '='
      | |-DeclRefExpr 0x1290279f0 <col:8> 'const unsigned char *' lvalue Var 0x12900e0b8 'p' 'const unsigned char *'
      | `-ImplicitCastExpr 0x129027a30 <col:10> 'const unsigned char *' <LValueToRValue>
      |   `-DeclRefExpr 0x129027a10 <col:10> 'const unsigned char *' lvalue ParmVar 0x12900ddd8 'blocks' 'const unsigned char *'
      |-<<<NULL>>>
      |-BinaryOperator 0x129027c38 <col:18, col:57> 'int' contains-errors '&&'
      | |-ParenExpr 0x129027af8 <col:18, col:30> 'int'
      | | `-BinaryOperator 0x129027ad8 <col:19, col:24> 'int' '>='
      | |   |-ImplicitCastExpr 0x129027aa8 <col:19> 'const unsigned char *' <LValueToRValue>
      | |   | `-DeclRefExpr 0x129027a68 <col:19> 'const unsigned char *' lvalue Var 0x12900e0b8 'p' 'const unsigned char *'
      | |   `-ImplicitCastExpr 0x129027ac0 <col:24> 'const unsigned char *' <LValueToRValue>
      | |     `-DeclRefExpr 0x129027a88 <col:24> 'const unsigned char *' lvalue ParmVar 0x12900ddd8 'blocks' 'const unsigned char *'
      | `-ParenExpr 0x129027c18 <col:35, col:57> 'int' contains-errors
      |   `-BinaryOperator 0x129027bf8 <col:36, col:56> 'int' contains-errors '<'
      |     |-DeclRefExpr 0x129027b18 <col:36> 'const unsigned char *' lvalue Var 0x12900e0b8 'p' 'const unsigned char *'
      |     `-ParenExpr 0x129027bd8 <col:40, col:56> '<dependent type>' contains-errors
      |       `-BinaryOperator 0x129027bb8 <col:41, col:55> '<dependent type>' contains-errors '-'
      |         |-BinaryOperator 0x129027b78 <col:41, col:48> '<dependent type>' contains-errors '+'
      |         | |-DeclRefExpr 0x129027b38 <col:41> 'const unsigned char *' lvalue ParmVar 0x12900ddd8 'blocks' 'const unsigned char *'
      |         | `-RecoveryExpr 0x129027b58 <col:48> '<dependent type>' contains-errors lvalue
      |         `-IntegerLiteral 0x129027b98 <col:55> 'int' 7
      |-<<<NULL>>>
      `-CompoundStmt 0x12a00c248 <line:27:3, line:88:3>
        |-IfStmt 0x129027ef0 <line:28:5, line:29:7>
        | |-BinaryOperator 0x129027ec8 <line:28:9, col:53> 'int' '!='
        | | |-CallExpr 0x129027e58 <col:9, col:48> 'int'
        | | | |-ImplicitCastExpr 0x129027e40 <col:9> 'int (*)()' <FunctionToPointerDecay>
        | | | | `-DeclRefExpr 0x129027d38 <col:9> 'int ()' Function 0x129027c80 'LocaleNCompare' 'int ()'
        | | | |-CStyleCastExpr 0x129027da8 <col:24, col:39> 'const char *' <BitCast>
        | | | | `-ImplicitCastExpr 0x129027d90 <col:39> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
        | | | |   `-DeclRefExpr 0x129027d58 <col:39> 'const unsigned char *' lvalue Var 0x12900e0b8 'p' 'const unsigned char *'
        | | | |-ImplicitCastExpr 0x129027e90 <col:41> 'char *' <ArrayToPointerDecay>
        | | | | `-StringLiteral 0x129027dd0 <col:41> 'char[4]' lvalue "STR"
        | | | `-IntegerLiteral 0x129027df0 <col:47> 'int' 4
        | | `-IntegerLiteral 0x129027ea8 <col:53> 'int' 0
        | `-BreakStmt 0x129027ee8 <line:29:7>
        |-CompoundAssignOperator 0x129027f50 <line:30:5, col:8> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
        | |-DeclRefExpr 0x129027f10 <col:5> 'const unsigned char *' lvalue Var 0x12900e0b8 'p' 'const unsigned char *'
        | `-IntegerLiteral 0x129027f30 <col:8> 'int' 4
        |-BinaryOperator 0x1290281f8 <line:31:5, col:37> 'const unsigned char *' contains-errors '='
        | |-DeclRefExpr 0x129027f80 <col:5> 'const unsigned char *' lvalue Var 0x12900e0b8 'p' 'const unsigned char *'
        | `-CallExpr 0x1290281c0 <col:7, col:37> '<dependent type>' contains-errors
        |   |-DeclRefExpr 0x129028080 <col:7> 'int ()' Function 0x129027fc8 'PushShortPixel' 'int ()'
        |   |-RecoveryExpr 0x1290281a0 <col:22> '<dependent type>' contains-errors lvalue
        |   |-DeclRefExpr 0x1290280b8 <col:32> 'const unsigned char *' lvalue Var 0x12900e0b8 'p' 'const unsigned char *'
        |   `-UnaryOperator 0x129028130 <col:34, col:35> 'unsigned short *' prefix '&' cannot overflow
        |     `-DeclRefExpr 0x1290280d8 <col:35> 'unsigned short' lvalue Var 0x12900e298 'id' 'unsigned short'
        |-BinaryOperator 0x12a00a660 <line:32:5, col:35> 'const unsigned char *' '='
        | |-DeclRefExpr 0x129028218 <col:5> 'const unsigned char *' lvalue Var 0x12900e0b8 'p' 'const unsigned char *'
        | `-ImplicitCastExpr 0x12a00a648 <col:7, col:35> 'const unsigned char *' <IntegralToPointer>
        |   `-CallExpr 0x12a00a600 <col:7, col:35> 'int'
        |     |-ImplicitCastExpr 0x1290283c8 <col:7> 'int (*)()' <FunctionToPointerDecay>
        |     | `-DeclRefExpr 0x129028318 <col:7> 'int ()' Function 0x129028260 'PushCharPixel' 'int ()'
        |     |-ImplicitCastExpr 0x12a00a630 <col:21> 'const unsigned char *' <LValueToRValue>
        |     | `-DeclRefExpr 0x129028338 <col:21> 'const unsigned char *' lvalue Var 0x12900e0b8 'p' 'const unsigned char *'
        |     `-UnaryOperator 0x1290283b0 <col:23, col:24> 'unsigned char *' prefix '&' cannot overflow
        |       `-DeclRefExpr 0x129028358 <col:24> 'unsigned char' lvalue Var 0x12900e168 'name_length' 'unsigned char'
        |-IfStmt 0x12a00a788 <line:33:5, line:34:18>
        | |-BinaryOperator 0x12a00a730 <line:33:9, col:28> 'int' '=='
        | | |-BinaryOperator 0x12a00a6f0 <col:9, col:23> 'int' '%'
        | | | |-ImplicitCastExpr 0x12a00a6d8 <col:9> 'int' <IntegralCast>
        | | | | `-ImplicitCastExpr 0x12a00a6c0 <col:9> 'unsigned char' <LValueToRValue>
        | | | |   `-DeclRefExpr 0x12a00a680 <col:9> 'unsigned char' lvalue Var 0x12900e168 'name_length' 'unsigned char'
        | | | `-IntegerLiteral 0x12a00a6a0 <col:23> 'int' 2
        | | `-IntegerLiteral 0x12a00a710 <col:28> 'int' 0
        | `-UnaryOperator 0x12a00a770 <line:34:7, col:18> 'unsigned char' postfix '++' cannot overflow
        |   `-DeclRefExpr 0x12a00a750 <col:7> 'unsigned char' lvalue Var 0x12900e168 'name_length' 'unsigned char'
        |-CompoundAssignOperator 0x12a00a818 <line:35:5, col:8> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
        | |-DeclRefExpr 0x12a00a7a8 <col:5> 'const unsigned char *' lvalue Var 0x12900e0b8 'p' 'const unsigned char *'
        | `-ImplicitCastExpr 0x12a00a800 <col:8> 'int' <IntegralCast>
        |   `-ImplicitCastExpr 0x12a00a7e8 <col:8> 'unsigned char' <LValueToRValue>
        |     `-DeclRefExpr 0x12a00a7c8 <col:8> 'unsigned char' lvalue Var 0x12900e168 'name_length' 'unsigned char'
        |-IfStmt 0x12a00a950 <line:36:5, line:37:7>
        | |-BinaryOperator 0x12a00a928 <line:36:9, col:29> 'int' contains-errors '>'
        | | |-DeclRefExpr 0x12a00a848 <col:9> 'const unsigned char *' lvalue Var 0x12900e0b8 'p' 'const unsigned char *'
        | | `-ParenExpr 0x12a00a908 <col:13, col:29> '<dependent type>' contains-errors
        | |   `-BinaryOperator 0x12a00a8e8 <col:14, col:28> '<dependent type>' contains-errors '-'
        | |     |-BinaryOperator 0x12a00a8a8 <col:14, col:21> '<dependent type>' contains-errors '+'
        | |     | |-DeclRefExpr 0x12a00a868 <col:14> 'const unsigned char *' lvalue ParmVar 0x12900ddd8 'blocks' 'const unsigned char *'
        | |     | `-RecoveryExpr 0x12a00a888 <col:21> '<dependent type>' contains-errors lvalue
        | |     `-IntegerLiteral 0x12a00a8c8 <col:28> 'int' 4
        | `-BreakStmt 0x12a00a948 <line:37:7>
        |-IfStmt 0x12a00ac70 <line:39:5, line:40:7>
        | |-BinaryOperator 0x12a00ac48 <line:39:9, col:35> 'int' contains-errors '>'
        | | |-ParenExpr 0x12a00aba8 <col:9, col:17> 'const unsigned char *'
        | | | `-BinaryOperator 0x12a00ab88 <col:10, col:12> 'const unsigned char *' '+'
        | | |   |-ImplicitCastExpr 0x12a00ab58 <col:10> 'const unsigned char *' <LValueToRValue>
        | | |   | `-DeclRefExpr 0x12a00ab18 <col:10> 'const unsigned char *' lvalue Var 0x12900e0b8 'p' 'const unsigned char *'
        | | |   `-ImplicitCastExpr 0x12a00ab70 <col:12> 'unsigned int' <LValueToRValue>
        | | |     `-DeclRefExpr 0x12a00ab38 <col:12> 'unsigned int' lvalue Var 0x12900e200 'count' 'unsigned int'
        | | `-ParenExpr 0x12a00ac28 <col:21, col:35> '<dependent type>' contains-errors
        | |   `-BinaryOperator 0x12a00ac08 <col:22, col:29> '<dependent type>' contains-errors '+'
        | |     |-DeclRefExpr 0x12a00abc8 <col:22> 'const unsigned char *' lvalue ParmVar 0x12900ddd8 'blocks' 'const unsigned char *'
        | |     `-RecoveryExpr 0x12a00abe8 <col:29> '<dependent type>' contains-errors lvalue
        | `-BreakStmt 0x12a00ac68 <line:40:7>
        |-SwitchStmt 0x12a00ace0 <line:41:5, line:85:5>
        | |-ImplicitCastExpr 0x12a00acc8 <line:41:13> 'int' <IntegralCast>
        | | `-ImplicitCastExpr 0x12a00acb0 <col:13> 'unsigned short' <LValueToRValue>
        | |   `-DeclRefExpr 0x12a00ac90 <col:13> 'unsigned short' lvalue Var 0x12900e298 'id' 'unsigned short'
        | `-CompoundStmt 0x12a00c0c0 <line:42:5, line:85:5>
        |   |-CaseStmt 0x12a00ad40 <line:43:7, line:72:7>
        |   | |-ConstantExpr 0x12a00ad28 <line:43:12> 'int'
        |   | | `-IntegerLiteral 0x12a00ad08 <col:12> 'int' 1005
        |   | `-CompoundStmt 0x12a00bc30 <line:44:7, line:72:7>
        |   |   |-DeclStmt 0x12a00ade0 <line:45:9, line:46:31>
        |   |   | `-VarDecl 0x12a00ad78 <line:45:9, line:46:11> col:11 invalid value 'char'
        |   |   |-DeclStmt 0x12a00ae78 <line:48:9, line:49:21>
        |   |   | `-VarDecl 0x12a00ae10 <line:48:9, line:49:11> col:11 used resolution 'unsigned short'
        |   |   |-IfStmt 0x12a00af28 <line:52:9, line:53:11>
        |   |   | |-BinaryOperator 0x12a00af00 <line:52:13, col:21> 'int' '<'
        |   |   | | |-ImplicitCastExpr 0x12a00aed0 <col:13> 'unsigned int' <LValueToRValue>
        |   |   | | | `-DeclRefExpr 0x12a00ae90 <col:13> 'unsigned int' lvalue Var 0x12900e200 'count' 'unsigned int'
        |   |   | | `-ImplicitCastExpr 0x12a00aee8 <col:21> 'unsigned int' <IntegralCast>
        |   |   | |   `-IntegerLiteral 0x12a00aeb0 <col:21> 'int' 16
        |   |   | `-BreakStmt 0x12a00af20 <line:53:11>
        |   |   |-BinaryOperator 0x12a00b0e8 <line:55:9, col:38> '<dependent type>' contains-errors '='
        |   |   | |-CXXDependentScopeMemberExpr 0x12a00b028 <col:9, col:16> '<dependent type>' contains-errors lvalue ->x_resolution
        |   |   | | `-RecoveryExpr 0x12a00b000 <col:9> '<dependent type>' contains-errors lvalue
        |   |   | |   `-DeclRefExpr 0x12a00afe0 <col:9> 'int *' lvalue ParmVar 0x12900dd28 'image' 'int *'
        |   |   | `-CStyleCastExpr 0x12a00b0c0 <col:29, col:38> 'double' <IntegralToFloating>
        |   |   |   `-ImplicitCastExpr 0x12a00b0a8 <col:38> 'unsigned short' <LValueToRValue> part_of_explicit_cast
        |   |   |     `-DeclRefExpr 0x12a00b070 <col:38> 'unsigned short' lvalue Var 0x12a00ae10 'resolution' 'unsigned short'
        |   |   |-CStyleCastExpr 0x12a00b458 <line:58:9, col:50> 'void' contains-errors <ToVoid>
        |   |   | `-CallExpr 0x12a00b410 <col:16, col:50> '<dependent type>' contains-errors
        |   |   |   |-DeclRefExpr 0x12a00b390 <col:16> 'int ()' Function 0x12a00b2d8 'SetImageProperty' 'int ()'
        |   |   |   |-RecoveryExpr 0x12a00b3b0 <col:33> '<dependent type>' contains-errors lvalue
        |   |   |   |-StringLiteral 0x12a00b3d0 <col:39> 'char[4]' lvalue "STR"
        |   |   |   `-RecoveryExpr 0x12a00b3f0 <col:45> '<dependent type>' contains-errors lvalue
        |   |   |-BinaryOperator 0x12a00b7f8 <line:63:9, col:38> '<dependent type>' contains-errors '='
        |   |   | |-CXXDependentScopeMemberExpr 0x12a00b738 <col:9, col:16> '<dependent type>' contains-errors lvalue ->y_resolution
        |   |   | | `-RecoveryExpr 0x12a00b710 <col:9> '<dependent type>' contains-errors lvalue
        |   |   | |   `-DeclRefExpr 0x12a00b6f0 <col:9> 'int *' lvalue ParmVar 0x12900dd28 'image' 'int *'
        |   |   | `-CStyleCastExpr 0x12a00b7d0 <col:29, col:38> 'double' <IntegralToFloating>
        |   |   |   `-ImplicitCastExpr 0x12a00b7b8 <col:38> 'unsigned short' <LValueToRValue> part_of_explicit_cast
        |   |   |     `-DeclRefExpr 0x12a00b780 <col:38> 'unsigned short' lvalue Var 0x12a00ae10 'resolution' 'unsigned short'
        |   |   |-CStyleCastExpr 0x12a00b9a8 <line:66:9, col:50> 'void' contains-errors <ToVoid>
        |   |   | `-CallExpr 0x12a00b960 <col:16, col:50> '<dependent type>' contains-errors
        |   |   |   |-DeclRefExpr 0x12a00b8e0 <col:16> 'int ()' Function 0x12a00b2d8 'SetImageProperty' 'int ()'
        |   |   |   |-RecoveryExpr 0x12a00b900 <col:33> '<dependent type>' contains-errors lvalue
        |   |   |   |-StringLiteral 0x12a00b920 <col:39> 'char[4]' lvalue "STR"
        |   |   |   `-RecoveryExpr 0x12a00b940 <col:45> '<dependent type>' contains-errors lvalue
        |   |   `-BreakStmt 0x12a00bc28 <line:71:9>
        |   |-CaseStmt 0x12a00bcb8 <line:73:7, line:79:7>
        |   | |-ConstantExpr 0x12a00bca0 <line:73:12> 'int'
        |   | | `-IntegerLiteral 0x12a00bc80 <col:12> 'int' 1057
        |   | `-CompoundStmt 0x12a00bfd0 <line:74:7, line:79:7>
        |   |   |-CompoundAssignOperator 0x12a00bf98 <line:77:9, col:12> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
        |   |   | |-DeclRefExpr 0x12a00bf40 <col:9> 'const unsigned char *' lvalue Var 0x12900e0b8 'p' 'const unsigned char *'
        |   |   | `-ImplicitCastExpr 0x12a00bf80 <col:12> 'unsigned int' <LValueToRValue>
        |   |   |   `-DeclRefExpr 0x12a00bf60 <col:12> 'unsigned int' lvalue Var 0x12900e200 'count' 'unsigned int'
        |   |   `-BreakStmt 0x12a00bfc8 <line:78:9>
        |   `-DefaultStmt 0x12a00c0a0 <line:80:7, line:84:7>
        |     `-CompoundStmt 0x12a00c080 <line:81:7, line:84:7>
        |       |-CompoundAssignOperator 0x12a00c048 <line:82:9, col:12> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
        |       | |-DeclRefExpr 0x12a00bff0 <col:9> 'const unsigned char *' lvalue Var 0x12900e0b8 'p' 'const unsigned char *'
        |       | `-ImplicitCastExpr 0x12a00c030 <col:12> 'unsigned int' <LValueToRValue>
        |       |   `-DeclRefExpr 0x12a00c010 <col:12> 'unsigned int' lvalue Var 0x12900e200 'count' 'unsigned int'
        |       `-BreakStmt 0x12a00c078 <line:83:9>
        `-IfStmt 0x12a00c228 <line:86:5, line:87:8>
          |-BinaryOperator 0x12a00c1d0 <line:86:9, col:27> 'int' '!='
          | |-ParenExpr 0x12a00c178 <col:9, col:22> 'unsigned int'
          | | `-BinaryOperator 0x12a00c158 <col:10, col:18> 'unsigned int' '&'
          | |   |-ImplicitCastExpr 0x12a00c128 <col:10> 'unsigned int' <LValueToRValue>
          | |   | `-DeclRefExpr 0x12a00c0e8 <col:10> 'unsigned int' lvalue Var 0x12900e200 'count' 'unsigned int'
          | |   `-ImplicitCastExpr 0x12a00c140 <col:18> 'unsigned int' <IntegralCast>
          | |     `-IntegerLiteral 0x12a00c108 <col:18> 'int' 1
          | `-ImplicitCastExpr 0x12a00c1b8 <col:27> 'unsigned int' <IntegralCast>
          |   `-IntegerLiteral 0x12a00c198 <col:27> 'int' 0
          `-UnaryOperator 0x12a00c210 <line:87:7, col:8> 'const unsigned char *' postfix '++'
            `-DeclRefExpr 0x12a00c1f0 <col:7> 'const unsigned char *' lvalue Var 0x12900e0b8 'p' 'const unsigned char *'
