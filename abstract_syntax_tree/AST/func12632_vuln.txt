TranslationUnitDecl 0x11e855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x11e8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x11e855bd0 '__int128'
|-TypedefDecl 0x11e856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x11e855bf0 'unsigned __int128'
|-TypedefDecl 0x11e926a30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x11e926800 'struct __NSConstantString_tag'
|   `-Record 0x11e856580 '__NSConstantString_tag'
|-TypedefDecl 0x11e926a98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x11e855d90 '__SVInt8_t'
|-TypedefDecl 0x11e926b00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x11e855db0 '__SVInt16_t'
|-TypedefDecl 0x11e926b68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x11e855dd0 '__SVInt32_t'
|-TypedefDecl 0x11e926bd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x11e855df0 '__SVInt64_t'
|-TypedefDecl 0x11e926c38 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x11e855e10 '__SVUint8_t'
|-TypedefDecl 0x11e926ca0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x11e855e30 '__SVUint16_t'
|-TypedefDecl 0x11e926d08 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x11e855e50 '__SVUint32_t'
|-TypedefDecl 0x11e926d70 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x11e855e70 '__SVUint64_t'
|-TypedefDecl 0x11e926dd8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x11e855e90 '__SVFloat16_t'
|-TypedefDecl 0x11e926e40 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x11e855eb0 '__SVFloat32_t'
|-TypedefDecl 0x11e926ea8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x11e855ed0 '__SVFloat64_t'
|-TypedefDecl 0x11e926f10 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x11e855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x11e926f78 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x11e855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x11e926fe0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x11e855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x11e927048 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x11e855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x11e9270b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x11e855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x11e927118 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x11e855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x11e927180 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x11e855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x11e9271e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x11e855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x11e927250 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x11e855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x11e9272b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x11e856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x11e927320 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x11e856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x11e927388 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x11e856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x11e9273f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x11e856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x11e927458 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x11e856090 '__clang_svint8x3_t'
|-TypedefDecl 0x11e9274c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x11e8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x11e927528 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x11e8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x11e927590 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x11e8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x11e9275f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x11e856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x11e927660 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x11e856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x11e9276c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x11e856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x11e927730 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x11e856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x11e927798 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x11e856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x11e928000 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x11e8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x11e928068 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x11e8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x11e9280d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x11e8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x11e928138 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x11e856210 '__clang_svint8x4_t'
|-TypedefDecl 0x11e9281a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x11e856230 '__clang_svint16x4_t'
|-TypedefDecl 0x11e928208 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x11e856250 '__clang_svint32x4_t'
|-TypedefDecl 0x11e928270 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x11e856270 '__clang_svint64x4_t'
|-TypedefDecl 0x11e9282d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x11e856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x11e928340 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x11e8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x11e9283a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x11e8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x11e928410 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x11e8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x11e928478 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x11e856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x11e9284e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x11e856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x11e928548 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x11e856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x11e9285b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x11e856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x11e928618 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x11e856390 '__SVBool_t'
|-TypedefDecl 0x11e928680 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x11e8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x11e9286e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x11e8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x11e928750 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x11e8563f0 '__SVCount_t'
|-TypedefDecl 0x11e9287f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x11e9287b0 'char *'
|   `-BuiltinType 0x11e8556b0 'char'
|-TypedefDecl 0x11e928868 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x11e9287b0 'char *'
|   `-BuiltinType 0x11e8556b0 'char'
`-FunctionDecl 0x11e928b68 <dataset_diviso_filec/func12632_vuln.c:1:1, line:81:1> line:1:1 invalid mobility_opt_print 'int (int *, const char *, const unsigned int)'
  |-ParmVarDecl 0x11e928928 <col:20, col:40> col:40 invalid ndo 'int *'
  |-ParmVarDecl 0x11e9289a8 <line:2:20, col:34> col:34 used bp 'const char *'
  |-ParmVarDecl 0x11e928a28 <col:38, col:53> col:53 used len 'const unsigned int'
  `-CompoundStmt 0x11e944940 <line:3:1, line:81:1>
    |-DeclStmt 0x11e928d40 <line:4:2, col:20>
    | |-VarDecl 0x11e928c40 <col:2, col:11> col:11 used i 'unsigned int'
    | `-VarDecl 0x11e928cc0 <col:2, col:14> col:14 used optlen 'unsigned int'
    |-ForStmt 0x11e944888 <line:6:2, line:76:2>
    | |-BinaryOperator 0x11e928db0 <line:6:7, col:11> 'unsigned int' '='
    | | |-DeclRefExpr 0x11e928d58 <col:7> 'unsigned int' lvalue Var 0x11e928c40 'i' 'unsigned int'
    | | `-ImplicitCastExpr 0x11e928d98 <col:11> 'unsigned int' <IntegralCast>
    | |   `-IntegerLiteral 0x11e928d78 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x11e928e40 <col:14, col:18> 'int' '<'
    | | |-ImplicitCastExpr 0x11e928e10 <col:14> 'unsigned int' <LValueToRValue>
    | | | `-DeclRefExpr 0x11e928dd0 <col:14> 'unsigned int' lvalue Var 0x11e928c40 'i' 'unsigned int'
    | | `-ImplicitCastExpr 0x11e928e28 <col:18> 'unsigned int' <LValueToRValue>
    | |   `-DeclRefExpr 0x11e928df0 <col:18> 'const unsigned int' lvalue ParmVar 0x11e928a28 'len' 'const unsigned int'
    | |-CompoundAssignOperator 0x11e928eb8 <col:23, col:28> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    | | |-DeclRefExpr 0x11e928e60 <col:23> 'unsigned int' lvalue Var 0x11e928c40 'i' 'unsigned int'
    | | `-ImplicitCastExpr 0x11e928ea0 <col:28> 'unsigned int' <LValueToRValue>
    | |   `-DeclRefExpr 0x11e928e80 <col:28> 'unsigned int' lvalue Var 0x11e928cc0 'optlen' 'unsigned int'
    | `-CompoundStmt 0x11e944850 <col:36, line:76:2>
    |   |-CallExpr 0x11e9421b8 <line:7:3, col:18> 'int'
    |   | |-ImplicitCastExpr 0x11e9421a0 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x11e9420b8 <col:3> 'int ()' Function 0x11e942000 'ND_TCHECK' 'int ()'
    |   | `-ImplicitCastExpr 0x11e9421f8 <col:13, col:17> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x11e9421e0 <col:13, col:17> 'char' <LValueToRValue>
    |   |     `-ArraySubscriptExpr 0x11e942148 <col:13, col:17> 'const char' lvalue
    |   |       |-ImplicitCastExpr 0x11e942118 <col:13> 'const char *' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x11e9420d8 <col:13> 'const char *' lvalue ParmVar 0x11e9289a8 'bp' 'const char *'
    |   |       `-ImplicitCastExpr 0x11e942130 <col:16> 'unsigned int' <LValueToRValue>
    |   |         `-DeclRefExpr 0x11e9420f8 <col:16> 'unsigned int' lvalue Var 0x11e928c40 'i' 'unsigned int'
    |   |-IfStmt 0x11e942910 <line:8:3, line:17:3> has_else
    |   | |-BinaryOperator 0x11e942398 <line:8:7, col:16> 'int' contains-errors '=='
    |   | | |-ArraySubscriptExpr 0x11e942358 <col:7, col:11> 'const char' lvalue
    |   | | | |-ImplicitCastExpr 0x11e942328 <col:7> 'const char *' <LValueToRValue>
    |   | | | | `-DeclRefExpr 0x11e942210 <col:7> 'const char *' lvalue ParmVar 0x11e9289a8 'bp' 'const char *'
    |   | | | `-ImplicitCastExpr 0x11e942340 <col:10> 'unsigned int' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x11e942230 <col:10> 'unsigned int' lvalue Var 0x11e928c40 'i' 'unsigned int'
    |   | | `-RecoveryExpr 0x11e942378 <col:16> '<dependent type>' contains-errors lvalue
    |   | |-BinaryOperator 0x11e942410 <line:9:4, col:13> 'unsigned int' '='
    |   | | |-DeclRefExpr 0x11e9423b8 <col:4> 'unsigned int' lvalue Var 0x11e928cc0 'optlen' 'unsigned int'
    |   | | `-ImplicitCastExpr 0x11e9423f8 <col:13> 'unsigned int' <IntegralCast>
    |   | |   `-IntegerLiteral 0x11e9423d8 <col:13> 'int' 1
    |   | `-CompoundStmt 0x11e9428f8 <line:10:8, line:17:3>
    |   |   `-IfStmt 0x11e9428c8 <line:11:4, line:16:10> has_else
    |   |     |-BinaryOperator 0x11e9424f8 <line:11:8, col:16> 'int' '<'
    |   |     | |-BinaryOperator 0x11e9424a0 <col:8, col:12> 'unsigned int' '+'
    |   |     | | |-ImplicitCastExpr 0x11e942470 <col:8> 'unsigned int' <LValueToRValue>
    |   |     | | | `-DeclRefExpr 0x11e942430 <col:8> 'unsigned int' lvalue Var 0x11e928c40 'i' 'unsigned int'
    |   |     | | `-ImplicitCastExpr 0x11e942488 <col:12> 'unsigned int' <IntegralCast>
    |   |     | |   `-IntegerLiteral 0x11e942450 <col:12> 'int' 1
    |   |     | `-ImplicitCastExpr 0x11e9424e0 <col:16> 'unsigned int' <LValueToRValue>
    |   |     |   `-DeclRefExpr 0x11e9424c0 <col:16> 'const unsigned int' lvalue ParmVar 0x11e928a28 'len' 'const unsigned int'
    |   |     |-CompoundStmt 0x11e942840 <col:21, line:14:4>
    |   |     | |-CallExpr 0x11e942638 <line:12:5, col:24> 'int'
    |   |     | | |-ImplicitCastExpr 0x11e942620 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |   |     | | | `-DeclRefExpr 0x11e942518 <col:5> 'int ()' Function 0x11e942000 'ND_TCHECK' 'int ()'
    |   |     | | `-ImplicitCastExpr 0x11e942678 <col:15, col:23> 'int' <IntegralCast>
    |   |     | |   `-ImplicitCastExpr 0x11e942660 <col:15, col:23> 'char' <LValueToRValue>
    |   |     | |     `-ArraySubscriptExpr 0x11e942600 <col:15, col:23> 'const char' lvalue
    |   |     | |       |-ImplicitCastExpr 0x11e9425e8 <col:15> 'const char *' <LValueToRValue>
    |   |     | |       | `-DeclRefExpr 0x11e942538 <col:15> 'const char *' lvalue ParmVar 0x11e9289a8 'bp' 'const char *'
    |   |     | |       `-BinaryOperator 0x11e9425c8 <col:18, col:22> 'unsigned int' '+'
    |   |     | |         |-ImplicitCastExpr 0x11e942598 <col:18> 'unsigned int' <LValueToRValue>
    |   |     | |         | `-DeclRefExpr 0x11e942558 <col:18> 'unsigned int' lvalue Var 0x11e928c40 'i' 'unsigned int'
    |   |     | |         `-ImplicitCastExpr 0x11e9425b0 <col:22> 'unsigned int' <IntegralCast>
    |   |     | |           `-IntegerLiteral 0x11e942578 <col:22> 'int' 1
    |   |     | `-BinaryOperator 0x11e942820 <line:13:5, col:26> 'unsigned int' '='
    |   |     |   |-DeclRefExpr 0x11e942690 <col:5> 'unsigned int' lvalue Var 0x11e928cc0 'optlen' 'unsigned int'
    |   |     |   `-ImplicitCastExpr 0x11e942808 <col:14, col:26> 'unsigned int' <IntegralCast>
    |   |     |     `-BinaryOperator 0x11e9427e8 <col:14, col:26> 'int' '+'
    |   |     |       |-ImplicitCastExpr 0x11e9427d0 <col:14, col:22> 'int' <IntegralCast>
    |   |     |       | `-ImplicitCastExpr 0x11e9427b8 <col:14, col:22> 'char' <LValueToRValue>
    |   |     |       |   `-ArraySubscriptExpr 0x11e942778 <col:14, col:22> 'const char' lvalue
    |   |     |       |     |-ImplicitCastExpr 0x11e942760 <col:14> 'const char *' <LValueToRValue>
    |   |     |       |     | `-DeclRefExpr 0x11e9426b0 <col:14> 'const char *' lvalue ParmVar 0x11e9289a8 'bp' 'const char *'
    |   |     |       |     `-BinaryOperator 0x11e942740 <col:17, col:21> 'unsigned int' '+'
    |   |     |       |       |-ImplicitCastExpr 0x11e942710 <col:17> 'unsigned int' <LValueToRValue>
    |   |     |       |       | `-DeclRefExpr 0x11e9426d0 <col:17> 'unsigned int' lvalue Var 0x11e928c40 'i' 'unsigned int'
    |   |     |       |       `-ImplicitCastExpr 0x11e942728 <col:21> 'unsigned int' <IntegralCast>
    |   |     |       |         `-IntegerLiteral 0x11e9426f0 <col:21> 'int' 1
    |   |     |       `-IntegerLiteral 0x11e942798 <col:26> 'int' 2
    |   |     `-GotoStmt 0x11e9428b0 <line:16:5, col:10> 'trunc' 0x11e942860
    |   |-IfStmt 0x11e942a40 <line:18:3, line:19:9>
    |   | |-BinaryOperator 0x11e942a08 <line:18:7, col:20> 'int' '>'
    |   | | |-BinaryOperator 0x11e9429b0 <col:7, col:11> 'unsigned int' '+'
    |   | | | |-ImplicitCastExpr 0x11e942980 <col:7> 'unsigned int' <LValueToRValue>
    |   | | | | `-DeclRefExpr 0x11e942940 <col:7> 'unsigned int' lvalue Var 0x11e928c40 'i' 'unsigned int'
    |   | | | `-ImplicitCastExpr 0x11e942998 <col:11> 'unsigned int' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x11e942960 <col:11> 'unsigned int' lvalue Var 0x11e928cc0 'optlen' 'unsigned int'
    |   | | `-ImplicitCastExpr 0x11e9429f0 <col:20> 'unsigned int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x11e9429d0 <col:20> 'const unsigned int' lvalue ParmVar 0x11e928a28 'len' 'const unsigned int'
    |   | `-GotoStmt 0x11e942a28 <line:19:4, col:9> 'trunc' 0x11e942860
    |   |-CallExpr 0x11e942b80 <line:20:3, col:27> 'int'
    |   | |-ImplicitCastExpr 0x11e942b68 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x11e942a60 <col:3> 'int ()' Function 0x11e942000 'ND_TCHECK' 'int ()'
    |   | `-ImplicitCastExpr 0x11e942bc0 <col:13, col:26> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x11e942ba8 <col:13, col:26> 'char' <LValueToRValue>
    |   |     `-ArraySubscriptExpr 0x11e942b48 <col:13, col:26> 'const char' lvalue
    |   |       |-ImplicitCastExpr 0x11e942b30 <col:13> 'const char *' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x11e942a80 <col:13> 'const char *' lvalue ParmVar 0x11e9289a8 'bp' 'const char *'
    |   |       `-BinaryOperator 0x11e942b10 <col:16, col:20> 'unsigned int' '+'
    |   |         |-ImplicitCastExpr 0x11e942ae0 <col:16> 'unsigned int' <LValueToRValue>
    |   |         | `-DeclRefExpr 0x11e942aa0 <col:16> 'unsigned int' lvalue Var 0x11e928c40 'i' 'unsigned int'
    |   |         `-ImplicitCastExpr 0x11e942af8 <col:20> 'unsigned int' <LValueToRValue>
    |   |           `-DeclRefExpr 0x11e942ac0 <col:20> 'unsigned int' lvalue Var 0x11e928cc0 'optlen' 'unsigned int'
    |   `-SwitchStmt 0x11e942c98 <line:22:3, line:75:3>
    |     |-ImplicitCastExpr 0x11e942c80 <line:22:11, col:15> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x11e942c68 <col:11, col:15> 'char' <LValueToRValue>
    |     |   `-ArraySubscriptExpr 0x11e942c48 <col:11, col:15> 'const char' lvalue
    |     |     |-ImplicitCastExpr 0x11e942c18 <col:11> 'const char *' <LValueToRValue>
    |     |     | `-DeclRefExpr 0x11e942bd8 <col:11> 'const char *' lvalue ParmVar 0x11e9289a8 'bp' 'const char *'
    |     |     `-ImplicitCastExpr 0x11e942c30 <col:14> 'unsigned int' <LValueToRValue>
    |     |       `-DeclRefExpr 0x11e942bf8 <col:14> 'unsigned int' lvalue Var 0x11e928c40 'i' 'unsigned int'
    |     `-CompoundStmt 0x11e944788 <col:18, line:75:3>
    |       |-CallExpr 0x11e942ea0 <line:24:4, col:25> '<dependent type>' contains-errors
    |       | |-DeclRefExpr 0x11e942db8 <col:4> 'int ()' Function 0x11e942d00 'ND_PRINT' 'int ()'
    |       | `-ParenExpr 0x11e942e80 <col:13, col:24> 'char[4]' contains-errors
    |       |   `-BinaryOperator 0x11e942e60 <col:14, col:19> 'char[4]' contains-errors ','
    |       |     |-RecoveryExpr 0x11e942dd8 <col:14> '<dependent type>' contains-errors lvalue
    |       |     `-StringLiteral 0x11e942e40 <col:19> 'char[4]' lvalue "STR"
    |       |-BreakStmt 0x11e942ec8 <line:25:4>
    |       |-IfStmt 0x11f008990 <line:27:4, line:30:4>
    |       | |-BinaryOperator 0x11f008870 <line:27:8, col:18> 'int' contains-errors '<'
    |       | | |-BinaryOperator 0x11f008830 <col:8, col:14> 'unsigned int' '-'
    |       | | | |-ImplicitCastExpr 0x11f008800 <col:8> 'unsigned int' <LValueToRValue>
    |       | | | | `-DeclRefExpr 0x11e942ee8 <col:8> 'const unsigned int' lvalue ParmVar 0x11e928a28 'len' 'const unsigned int'
    |       | | | `-ImplicitCastExpr 0x11f008818 <col:14> 'unsigned int' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x11e942f08 <col:14> 'unsigned int' lvalue Var 0x11e928c40 'i' 'unsigned int'
    |       | | `-RecoveryExpr 0x11f008850 <col:18> '<dependent type>' contains-errors lvalue
    |       | `-CompoundStmt 0x11f008970 <col:34, line:30:4>
    |       |   |-CallExpr 0x11f008930 <line:28:5, col:26> '<dependent type>' contains-errors
    |       |   | |-DeclRefExpr 0x11f008890 <col:5> 'int ()' Function 0x11e942d00 'ND_PRINT' 'int ()'
    |       |   | `-ParenExpr 0x11f008910 <col:14, col:25> 'char[4]' contains-errors
    |       |   |   `-BinaryOperator 0x11f0088f0 <col:15, col:20> 'char[4]' contains-errors ','
    |       |   |     |-RecoveryExpr 0x11f0088b0 <col:15> '<dependent type>' contains-errors lvalue
    |       |   |     `-StringLiteral 0x11f0088d0 <col:20> 'char[4]' lvalue "STR"
    |       |   `-GotoStmt 0x11f008958 <line:29:5, col:10> 'trunc' 0x11e942860
    |       |-CallExpr 0x11f008a50 <line:31:4, col:25> '<dependent type>' contains-errors
    |       | |-DeclRefExpr 0x11f0089b0 <col:4> 'int ()' Function 0x11e942d00 'ND_PRINT' 'int ()'
    |       | `-ParenExpr 0x11f008a30 <col:13, col:24> 'char[4]' contains-errors
    |       |   `-BinaryOperator 0x11f008a10 <col:14, col:19> 'char[4]' contains-errors ','
    |       |     |-RecoveryExpr 0x11f0089d0 <col:14> '<dependent type>' contains-errors lvalue
    |       |     `-StringLiteral 0x11f0089f0 <col:19> 'char[4]' lvalue "STR"
    |       |-BreakStmt 0x11f008a78 <line:32:4>
    |       |-IfStmt 0x11f008d40 <line:34:4, line:37:4>
    |       | |-BinaryOperator 0x11f008c20 <line:34:8, col:18> 'int' contains-errors '<'
    |       | | |-BinaryOperator 0x11f008be0 <col:8, col:14> 'unsigned int' '-'
    |       | | | |-ImplicitCastExpr 0x11f008bb0 <col:8> 'unsigned int' <LValueToRValue>
    |       | | | | `-DeclRefExpr 0x11f008a98 <col:8> 'const unsigned int' lvalue ParmVar 0x11e928a28 'len' 'const unsigned int'
    |       | | | `-ImplicitCastExpr 0x11f008bc8 <col:14> 'unsigned int' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x11f008ab8 <col:14> 'unsigned int' lvalue Var 0x11e928c40 'i' 'unsigned int'
    |       | | `-RecoveryExpr 0x11f008c00 <col:18> '<dependent type>' contains-errors lvalue
    |       | `-CompoundStmt 0x11f008d20 <col:42, line:37:4>
    |       |   |-CallExpr 0x11f008ce0 <line:35:5, col:26> '<dependent type>' contains-errors
    |       |   | |-DeclRefExpr 0x11f008c40 <col:5> 'int ()' Function 0x11e942d00 'ND_PRINT' 'int ()'
    |       |   | `-ParenExpr 0x11f008cc0 <col:14, col:25> 'char[4]' contains-errors
    |       |   |   `-BinaryOperator 0x11f008ca0 <col:15, col:20> 'char[4]' contains-errors ','
    |       |   |     |-RecoveryExpr 0x11f008c60 <col:15> '<dependent type>' contains-errors lvalue
    |       |   |     `-StringLiteral 0x11f008c80 <col:20> 'char[4]' lvalue "STR"
    |       |   `-GotoStmt 0x11f008d08 <line:36:5, col:10> 'trunc' 0x11e942860
    |       |-CallExpr 0x11f008f78 <line:39:4, col:29> 'int'
    |       | |-ImplicitCastExpr 0x11f008f60 <col:4> 'int (*)()' <FunctionToPointerDecay>
    |       | | `-DeclRefExpr 0x11f008e40 <col:4> 'int ()' Function 0x11f008d88 'ND_TCHECK_16BITS' 'int ()'
    |       | `-UnaryOperator 0x11f008f48 <col:21, col:28> 'const char *' prefix '&' cannot overflow
    |       |   `-ArraySubscriptExpr 0x11f008f28 <col:22, col:28> 'const char' lvalue
    |       |     |-ImplicitCastExpr 0x11f008f10 <col:22> 'const char *' <LValueToRValue>
    |       |     | `-DeclRefExpr 0x11f008e60 <col:22> 'const char *' lvalue ParmVar 0x11e9289a8 'bp' 'const char *'
    |       |     `-BinaryOperator 0x11f008ef0 <col:25, col:27> 'unsigned int' '+'
    |       |       |-ImplicitCastExpr 0x11f008ec0 <col:25> 'unsigned int' <LValueToRValue>
    |       |       | `-DeclRefExpr 0x11f008e80 <col:25> 'unsigned int' lvalue Var 0x11e928c40 'i' 'unsigned int'
    |       |       `-ImplicitCastExpr 0x11f008ed8 <col:27> 'unsigned int' <IntegralCast>
    |       |         `-IntegerLiteral 0x11f008ea0 <col:27> 'int' 2
    |       |-CallExpr 0x11f0092e0 <line:40:4, line:41:35> '<dependent type>' contains-errors
    |       | |-DeclRefExpr 0x11f008fa0 <line:40:4> 'int ()' Function 0x11e942d00 'ND_PRINT' 'int ()'
    |       | `-ParenExpr 0x11f0092c0 <col:13, line:41:34> 'int' contains-errors
    |       |   `-BinaryOperator 0x11f0092a0 <line:40:14, line:41:33> 'int' contains-errors ','
    |       |     |-BinaryOperator 0x11f009000 <line:40:14, col:19> 'char[4]' contains-errors ','
    |       |     | |-RecoveryExpr 0x11f008fc0 <col:14> '<dependent type>' contains-errors lvalue
    |       |     | `-StringLiteral 0x11f008fe0 <col:19> 'char[4]' lvalue "STR"
    |       |     `-BinaryOperator 0x11f009280 <line:41:5, col:33> 'int' '<<'
    |       |       |-CallExpr 0x11f009238 <col:5, col:28> 'int'
    |       |       | |-ImplicitCastExpr 0x11f009220 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |       |       | | `-DeclRefExpr 0x11f009100 <col:5> 'int ()' Function 0x11f009048 'EXTRACT_16BITS' 'int ()'
    |       |       | `-UnaryOperator 0x11f009208 <col:20, col:27> 'const char *' prefix '&' cannot overflow
    |       |       |   `-ArraySubscriptExpr 0x11f0091e8 <col:21, col:27> 'const char' lvalue
    |       |       |     |-ImplicitCastExpr 0x11f0091d0 <col:21> 'const char *' <LValueToRValue>
    |       |       |     | `-DeclRefExpr 0x11f009120 <col:21> 'const char *' lvalue ParmVar 0x11e9289a8 'bp' 'const char *'
    |       |       |     `-BinaryOperator 0x11f0091b0 <col:24, col:26> 'unsigned int' '+'
    |       |       |       |-ImplicitCastExpr 0x11f009180 <col:24> 'unsigned int' <LValueToRValue>
    |       |       |       | `-DeclRefExpr 0x11f009140 <col:24> 'unsigned int' lvalue Var 0x11e928c40 'i' 'unsigned int'
    |       |       |       `-ImplicitCastExpr 0x11f009198 <col:26> 'unsigned int' <IntegralCast>
    |       |       |         `-IntegerLiteral 0x11f009160 <col:26> 'int' 2
    |       |       `-IntegerLiteral 0x11f009260 <col:33> 'int' 2
    |       |-BreakStmt 0x11f009308 <line:42:4>
    |       |-IfStmt 0x11f0095d0 <line:44:4, line:47:4>
    |       | |-BinaryOperator 0x11f0094b0 <line:44:8, col:18> 'int' contains-errors '<'
    |       | | |-BinaryOperator 0x11f009470 <col:8, col:14> 'unsigned int' '-'
    |       | | | |-ImplicitCastExpr 0x11f009440 <col:8> 'unsigned int' <LValueToRValue>
    |       | | | | `-DeclRefExpr 0x11f009328 <col:8> 'const unsigned int' lvalue ParmVar 0x11e928a28 'len' 'const unsigned int'
    |       | | | `-ImplicitCastExpr 0x11f009458 <col:14> 'unsigned int' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x11f009348 <col:14> 'unsigned int' lvalue Var 0x11e928c40 'i' 'unsigned int'
    |       | | `-RecoveryExpr 0x11f009490 <col:18> '<dependent type>' contains-errors lvalue
    |       | `-CompoundStmt 0x11f0095b0 <col:41, line:47:4>
    |       |   |-CallExpr 0x11f009570 <line:45:5, col:26> '<dependent type>' contains-errors
    |       |   | |-DeclRefExpr 0x11f0094d0 <col:5> 'int ()' Function 0x11e942d00 'ND_PRINT' 'int ()'
    |       |   | `-ParenExpr 0x11f009550 <col:14, col:25> 'char[4]' contains-errors
    |       |   |   `-BinaryOperator 0x11f009530 <col:15, col:20> 'char[4]' contains-errors ','
    |       |   |     |-RecoveryExpr 0x11f0094f0 <col:15> '<dependent type>' contains-errors lvalue
    |       |   |     `-StringLiteral 0x11f009510 <col:20> 'char[4]' lvalue "STR"
    |       |   `-GotoStmt 0x11f009598 <line:46:5, col:10> 'trunc' 0x11e942860
    |       |-CallExpr 0x11e943510 <line:48:4, col:56> '<dependent type>' contains-errors
    |       | |-DeclRefExpr 0x11f0095f0 <col:4> 'int ()' Function 0x11e942d00 'ND_PRINT' 'int ()'
    |       | `-ParenExpr 0x11e9434f0 <col:13, col:55> '<dependent type>' contains-errors
    |       |   `-BinaryOperator 0x11e9434d0 <col:14, col:54> '<dependent type>' contains-errors ','
    |       |     |-BinaryOperator 0x11f009650 <col:14, col:19> 'char[4]' contains-errors ','
    |       |     | |-RecoveryExpr 0x11f009610 <col:14> '<dependent type>' contains-errors lvalue
    |       |     | `-StringLiteral 0x11f009630 <col:19> 'char[4]' lvalue "STR"
    |       |     `-CallExpr 0x11e9434a0 <col:26, col:54> '<dependent type>' contains-errors
    |       |       |-DeclRefExpr 0x11f009750 <col:26> 'int ()' Function 0x11f009698 'ip6addr_string' 'int ()'
    |       |       |-RecoveryExpr 0x11f009770 <col:41> '<dependent type>' contains-errors lvalue
    |       |       `-UnaryOperator 0x11e943488 <col:46, col:53> 'const char *' prefix '&' cannot overflow
    |       |         `-ArraySubscriptExpr 0x11e943468 <col:47, col:53> 'const char' lvalue
    |       |           |-ImplicitCastExpr 0x11e943450 <col:47> 'const char *' <LValueToRValue>
    |       |           | `-DeclRefExpr 0x11f009790 <col:47> 'const char *' lvalue ParmVar 0x11e9289a8 'bp' 'const char *'
    |       |           `-BinaryOperator 0x11e943430 <col:50, col:52> 'unsigned int' '+'
    |       |             |-ImplicitCastExpr 0x11e943400 <col:50> 'unsigned int' <LValueToRValue>
    |       |             | `-DeclRefExpr 0x11f0097b0 <col:50> 'unsigned int' lvalue Var 0x11e928c40 'i' 'unsigned int'
    |       |             `-ImplicitCastExpr 0x11e943418 <col:52> 'unsigned int' <IntegralCast>
    |       |               `-IntegerLiteral 0x11f0097d0 <col:52> 'int' 2
    |       |-BreakStmt 0x11e943538 <line:49:4>
    |       |-IfStmt 0x11e943800 <line:51:4, line:54:4>
    |       | |-BinaryOperator 0x11e9436e0 <line:51:8, col:18> 'int' contains-errors '<'
    |       | | |-BinaryOperator 0x11e9436a0 <col:8, col:14> 'unsigned int' '-'
    |       | | | |-ImplicitCastExpr 0x11e943670 <col:8> 'unsigned int' <LValueToRValue>
    |       | | | | `-DeclRefExpr 0x11e943558 <col:8> 'const unsigned int' lvalue ParmVar 0x11e928a28 'len' 'const unsigned int'
    |       | | | `-ImplicitCastExpr 0x11e943688 <col:14> 'unsigned int' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x11e943578 <col:14> 'unsigned int' lvalue Var 0x11e928c40 'i' 'unsigned int'
    |       | | `-RecoveryExpr 0x11e9436c0 <col:18> '<dependent type>' contains-errors lvalue
    |       | `-CompoundStmt 0x11e9437e0 <col:42, line:54:4>
    |       |   |-CallExpr 0x11e9437a0 <line:52:5, col:26> '<dependent type>' contains-errors
    |       |   | |-DeclRefExpr 0x11e943700 <col:5> 'int ()' Function 0x11e942d00 'ND_PRINT' 'int ()'
    |       |   | `-ParenExpr 0x11e943780 <col:14, col:25> 'char[4]' contains-errors
    |       |   |   `-BinaryOperator 0x11e943760 <col:15, col:20> 'char[4]' contains-errors ','
    |       |   |     |-RecoveryExpr 0x11e943720 <col:15> '<dependent type>' contains-errors lvalue
    |       |   |     `-StringLiteral 0x11e943740 <col:20> 'char[4]' lvalue "STR"
    |       |   `-GotoStmt 0x11e9437c8 <line:53:5, col:10> 'trunc' 0x11e942860
    |       |-CallExpr 0x11e943958 <line:55:4, col:29> 'int'
    |       | |-ImplicitCastExpr 0x11e943940 <col:4> 'int (*)()' <FunctionToPointerDecay>
    |       | | `-DeclRefExpr 0x11e943820 <col:4> 'int ()' Function 0x11f008d88 'ND_TCHECK_16BITS' 'int ()'
    |       | `-UnaryOperator 0x11e943928 <col:21, col:28> 'const char *' prefix '&' cannot overflow
    |       |   `-ArraySubscriptExpr 0x11e943908 <col:22, col:28> 'const char' lvalue
    |       |     |-ImplicitCastExpr 0x11e9438f0 <col:22> 'const char *' <LValueToRValue>
    |       |     | `-DeclRefExpr 0x11e943840 <col:22> 'const char *' lvalue ParmVar 0x11e9289a8 'bp' 'const char *'
    |       |     `-BinaryOperator 0x11e9438d0 <col:25, col:27> 'unsigned int' '+'
    |       |       |-ImplicitCastExpr 0x11e9438a0 <col:25> 'unsigned int' <LValueToRValue>
    |       |       | `-DeclRefExpr 0x11e943860 <col:25> 'unsigned int' lvalue Var 0x11e928c40 'i' 'unsigned int'
    |       |       `-ImplicitCastExpr 0x11e9438b8 <col:27> 'unsigned int' <IntegralCast>
    |       |         `-IntegerLiteral 0x11e943880 <col:27> 'int' 2
    |       |-CallExpr 0x11e943ab8 <line:56:4, col:29> 'int'
    |       | |-ImplicitCastExpr 0x11e943aa0 <col:4> 'int (*)()' <FunctionToPointerDecay>
    |       | | `-DeclRefExpr 0x11e943980 <col:4> 'int ()' Function 0x11f008d88 'ND_TCHECK_16BITS' 'int ()'
    |       | `-UnaryOperator 0x11e943a88 <col:21, col:28> 'const char *' prefix '&' cannot overflow
    |       |   `-ArraySubscriptExpr 0x11e943a68 <col:22, col:28> 'const char' lvalue
    |       |     |-ImplicitCastExpr 0x11e943a50 <col:22> 'const char *' <LValueToRValue>
    |       |     | `-DeclRefExpr 0x11e9439a0 <col:22> 'const char *' lvalue ParmVar 0x11e9289a8 'bp' 'const char *'
    |       |     `-BinaryOperator 0x11e943a30 <col:25, col:27> 'unsigned int' '+'
    |       |       |-ImplicitCastExpr 0x11e943a00 <col:25> 'unsigned int' <LValueToRValue>
    |       |       | `-DeclRefExpr 0x11e9439c0 <col:25> 'unsigned int' lvalue Var 0x11e928c40 'i' 'unsigned int'
    |       |       `-ImplicitCastExpr 0x11e943a18 <col:27> 'unsigned int' <IntegralCast>
    |       |         `-IntegerLiteral 0x11e9439e0 <col:27> 'int' 4
    |       |-CallExpr 0x11e943e80 <line:57:4, line:59:30> '<dependent type>' contains-errors
    |       | |-DeclRefExpr 0x11e943ae0 <line:57:4> 'int ()' Function 0x11e942d00 'ND_PRINT' 'int ()'
    |       | `-ParenExpr 0x11e943e60 <col:13, line:59:29> 'int' contains-errors
    |       |   `-BinaryOperator 0x11e943e40 <line:57:14, line:59:28> 'int' contains-errors ','
    |       |     |-BinaryOperator 0x11e943cc0 <line:57:14, line:58:28> 'int' contains-errors ','
    |       |     | |-BinaryOperator 0x11e943b40 <line:57:14, col:19> 'char[4]' contains-errors ','
    |       |     | | |-RecoveryExpr 0x11e943b00 <col:14> '<dependent type>' contains-errors lvalue
    |       |     | | `-StringLiteral 0x11e943b20 <col:19> 'char[4]' lvalue "STR"
    |       |     | `-CallExpr 0x11e943c98 <line:58:5, col:28> 'int'
    |       |     |   |-ImplicitCastExpr 0x11e943c80 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |       |     |   | `-DeclRefExpr 0x11e943b60 <col:5> 'int ()' Function 0x11f009048 'EXTRACT_16BITS' 'int ()'
    |       |     |   `-UnaryOperator 0x11e943c68 <col:20, col:27> 'const char *' prefix '&' cannot overflow
    |       |     |     `-ArraySubscriptExpr 0x11e943c48 <col:21, col:27> 'const char' lvalue
    |       |     |       |-ImplicitCastExpr 0x11e943c30 <col:21> 'const char *' <LValueToRValue>
    |       |     |       | `-DeclRefExpr 0x11e943b80 <col:21> 'const char *' lvalue ParmVar 0x11e9289a8 'bp' 'const char *'
    |       |     |       `-BinaryOperator 0x11e943c10 <col:24, col:26> 'unsigned int' '+'
    |       |     |         |-ImplicitCastExpr 0x11e943be0 <col:24> 'unsigned int' <LValueToRValue>
    |       |     |         | `-DeclRefExpr 0x11e943ba0 <col:24> 'unsigned int' lvalue Var 0x11e928c40 'i' 'unsigned int'
    |       |     |         `-ImplicitCastExpr 0x11e943bf8 <col:26> 'unsigned int' <IntegralCast>
    |       |     |           `-IntegerLiteral 0x11e943bc0 <col:26> 'int' 2
    |       |     `-CallExpr 0x11e943e18 <line:59:5, col:28> 'int'
    |       |       |-ImplicitCastExpr 0x11e943e00 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |       |       | `-DeclRefExpr 0x11e943ce0 <col:5> 'int ()' Function 0x11f009048 'EXTRACT_16BITS' 'int ()'
    |       |       `-UnaryOperator 0x11e943de8 <col:20, col:27> 'const char *' prefix '&' cannot overflow
    |       |         `-ArraySubscriptExpr 0x11e943dc8 <col:21, col:27> 'const char' lvalue
    |       |           |-ImplicitCastExpr 0x11e943db0 <col:21> 'const char *' <LValueToRValue>
    |       |           | `-DeclRefExpr 0x11e943d00 <col:21> 'const char *' lvalue ParmVar 0x11e9289a8 'bp' 'const char *'
    |       |           `-BinaryOperator 0x11e943d90 <col:24, col:26> 'unsigned int' '+'
    |       |             |-ImplicitCastExpr 0x11e943d60 <col:24> 'unsigned int' <LValueToRValue>
    |       |             | `-DeclRefExpr 0x11e943d20 <col:24> 'unsigned int' lvalue Var 0x11e928c40 'i' 'unsigned int'
    |       |             `-ImplicitCastExpr 0x11e943d78 <col:26> 'unsigned int' <IntegralCast>
    |       |               `-IntegerLiteral 0x11e943d40 <col:26> 'int' 4
    |       |-BreakStmt 0x11e943ea8 <line:60:4>
    |       |-IfStmt 0x11e944170 <line:62:4, line:65:4>
    |       | |-BinaryOperator 0x11e944050 <line:62:8, col:18> 'int' contains-errors '<'
    |       | | |-BinaryOperator 0x11e944010 <col:8, col:14> 'unsigned int' '-'
    |       | | | |-ImplicitCastExpr 0x11e943fe0 <col:8> 'unsigned int' <LValueToRValue>
    |       | | | | `-DeclRefExpr 0x11e943ec8 <col:8> 'const unsigned int' lvalue ParmVar 0x11e928a28 'len' 'const unsigned int'
    |       | | | `-ImplicitCastExpr 0x11e943ff8 <col:14> 'unsigned int' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x11e943ee8 <col:14> 'unsigned int' lvalue Var 0x11e928c40 'i' 'unsigned int'
    |       | | `-RecoveryExpr 0x11e944030 <col:18> '<dependent type>' contains-errors lvalue
    |       | `-CompoundStmt 0x11e944150 <col:39, line:65:4>
    |       |   |-CallExpr 0x11e944110 <line:63:5, col:26> '<dependent type>' contains-errors
    |       |   | |-DeclRefExpr 0x11e944070 <col:5> 'int ()' Function 0x11e942d00 'ND_PRINT' 'int ()'
    |       |   | `-ParenExpr 0x11e9440f0 <col:14, col:25> 'char[4]' contains-errors
    |       |   |   `-BinaryOperator 0x11e9440d0 <col:15, col:20> 'char[4]' contains-errors ','
    |       |   |     |-RecoveryExpr 0x11e944090 <col:15> '<dependent type>' contains-errors lvalue
    |       |   |     `-StringLiteral 0x11e9440b0 <col:20> 'char[4]' lvalue "STR"
    |       |   `-GotoStmt 0x11e944138 <line:64:5, col:10> 'trunc' 0x11e942860
    |       |-CallExpr 0x11e944230 <line:66:4, col:25> '<dependent type>' contains-errors
    |       | |-DeclRefExpr 0x11e944190 <col:4> 'int ()' Function 0x11e942d00 'ND_PRINT' 'int ()'
    |       | `-ParenExpr 0x11e944210 <col:13, col:24> 'char[4]' contains-errors
    |       |   `-BinaryOperator 0x11e9441f0 <col:14, col:19> 'char[4]' contains-errors ','
    |       |     |-RecoveryExpr 0x11e9441b0 <col:14> '<dependent type>' contains-errors lvalue
    |       |     `-StringLiteral 0x11e9441d0 <col:19> 'char[4]' lvalue "STR"
    |       |-BreakStmt 0x11e944258 <line:67:4>
    |       |-DefaultStmt 0x11e9444e0 <line:68:3, line:72:4>
    |       | `-IfStmt 0x11e9444c0 <line:69:4, line:72:4>
    |       |   |-RecoveryExpr 0x11e9442f0 <line:69:8, col:18> '_Bool' contains-errors
    |       |   `-CompoundStmt 0x11e9444a0 <col:34, line:72:4>
    |       |     |-CallExpr 0x11e944460 <line:70:5, col:33> '<dependent type>' contains-errors
    |       |     | |-DeclRefExpr 0x11e944310 <col:5> 'int ()' Function 0x11e942d00 'ND_PRINT' 'int ()'
    |       |     | `-ParenExpr 0x11e944440 <col:14, col:32> 'const char' contains-errors
    |       |     |   `-BinaryOperator 0x11e944420 <col:15, col:31> 'const char' contains-errors ','
    |       |     |     |-BinaryOperator 0x11e944370 <col:15, col:20> 'char[4]' contains-errors ','
    |       |     |     | |-RecoveryExpr 0x11e944330 <col:15> '<dependent type>' contains-errors lvalue
    |       |     |     | `-StringLiteral 0x11e944350 <col:20> 'char[4]' lvalue "STR"
    |       |     |     `-ArraySubscriptExpr 0x11e944400 <col:27, col:31> 'const char' lvalue
    |       |     |       |-ImplicitCastExpr 0x11e9443d0 <col:27> 'const char *' <LValueToRValue>
    |       |     |       | `-DeclRefExpr 0x11e944390 <col:27> 'const char *' lvalue ParmVar 0x11e9289a8 'bp' 'const char *'
    |       |     |       `-ImplicitCastExpr 0x11e9443e8 <col:30> 'unsigned int' <LValueToRValue>
    |       |     |         `-DeclRefExpr 0x11e9443b0 <col:30> 'unsigned int' lvalue Var 0x11e928c40 'i' 'unsigned int'
    |       |     `-GotoStmt 0x11e944488 <line:71:5, col:10> 'trunc' 0x11e942860
    |       |-CallExpr 0x11e944758 <line:73:4, col:43> '<dependent type>' contains-errors
    |       | |-DeclRefExpr 0x11e944500 <col:4> 'int ()' Function 0x11e942d00 'ND_PRINT' 'int ()'
    |       | `-ParenExpr 0x11e944738 <col:13, col:42> 'const char' contains-errors
    |       |   `-BinaryOperator 0x11e944718 <col:14, col:41> 'const char' contains-errors ','
    |       |     |-BinaryOperator 0x11e944610 <col:14, col:30> 'const char' contains-errors ','
    |       |     | |-BinaryOperator 0x11e944560 <col:14, col:19> 'char[4]' contains-errors ','
    |       |     | | |-RecoveryExpr 0x11e944520 <col:14> '<dependent type>' contains-errors lvalue
    |       |     | | `-StringLiteral 0x11e944540 <col:19> 'char[4]' lvalue "STR"
    |       |     | `-ArraySubscriptExpr 0x11e9445f0 <col:26, col:30> 'const char' lvalue
    |       |     |   |-ImplicitCastExpr 0x11e9445c0 <col:26> 'const char *' <LValueToRValue>
    |       |     |   | `-DeclRefExpr 0x11e944580 <col:26> 'const char *' lvalue ParmVar 0x11e9289a8 'bp' 'const char *'
    |       |     |   `-ImplicitCastExpr 0x11e9445d8 <col:29> 'unsigned int' <LValueToRValue>
    |       |     |     `-DeclRefExpr 0x11e9445a0 <col:29> 'unsigned int' lvalue Var 0x11e928c40 'i' 'unsigned int'
    |       |     `-ArraySubscriptExpr 0x11e9446f8 <col:33, col:41> 'const char' lvalue
    |       |       |-ImplicitCastExpr 0x11e9446e0 <col:33> 'const char *' <LValueToRValue>
    |       |       | `-DeclRefExpr 0x11e944630 <col:33> 'const char *' lvalue ParmVar 0x11e9289a8 'bp' 'const char *'
    |       |       `-BinaryOperator 0x11e9446c0 <col:36, col:40> 'unsigned int' '+'
    |       |         |-ImplicitCastExpr 0x11e944690 <col:36> 'unsigned int' <LValueToRValue>
    |       |         | `-DeclRefExpr 0x11e944650 <col:36> 'unsigned int' lvalue Var 0x11e928c40 'i' 'unsigned int'
    |       |         `-ImplicitCastExpr 0x11e9446a8 <col:40> 'unsigned int' <IntegralCast>
    |       |           `-IntegerLiteral 0x11e944670 <col:40> 'int' 1
    |       `-BreakStmt 0x11e944780 <line:74:4>
    |-ReturnStmt 0x11e9448e0 <line:77:2, col:9>
    | `-IntegerLiteral 0x11e9448c0 <col:9> 'int' 0
    `-LabelStmt 0x11e944920 <line:79:1, line:80:9> 'trunc'
      `-ReturnStmt 0x11e944910 <col:2, col:9>
        `-IntegerLiteral 0x11e9448f0 <col:9> 'int' 1
