TranslationUnitDecl 0x120055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1200564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x120055bd0 '__int128'
|-TypedefDecl 0x120056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x120055bf0 'unsigned __int128'
|-TypedefDecl 0x10500be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x10500bc00 'struct __NSConstantString_tag'
|   `-Record 0x120056580 '__NSConstantString_tag'
|-TypedefDecl 0x10500be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x120055d90 '__SVInt8_t'
|-TypedefDecl 0x10500bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x120055db0 '__SVInt16_t'
|-TypedefDecl 0x10500bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x120055dd0 '__SVInt32_t'
|-TypedefDecl 0x10500bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x120055df0 '__SVInt64_t'
|-TypedefDecl 0x10500c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x120055e10 '__SVUint8_t'
|-TypedefDecl 0x10500c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x120055e30 '__SVUint16_t'
|-TypedefDecl 0x10500c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x120055e50 '__SVUint32_t'
|-TypedefDecl 0x10500c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x120055e70 '__SVUint64_t'
|-TypedefDecl 0x10500c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x120055e90 '__SVFloat16_t'
|-TypedefDecl 0x10500c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x120055eb0 '__SVFloat32_t'
|-TypedefDecl 0x10500c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x120055ed0 '__SVFloat64_t'
|-TypedefDecl 0x10500c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x120055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x10500c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x120055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x10500c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x120055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x10500c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x120055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x10500c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x120055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x10500c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x120055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x10500c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x120055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x10500c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x120055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x10500c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x120055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x10500c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x120056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x10500c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x120056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x10500c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x120056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x10500c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x120056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x10500c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x120056090 '__clang_svint8x3_t'
|-TypedefDecl 0x10500c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1200560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x10500c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1200560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x10500c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1200560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x10500c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x120056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x10500ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x120056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x10500cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x120056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x10500cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x120056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x10500cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x120056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x10500d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1200561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x10500d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1200561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x10500d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1200561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x10500d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x120056210 '__clang_svint8x4_t'
|-TypedefDecl 0x10500d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x120056230 '__clang_svint16x4_t'
|-TypedefDecl 0x10500d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x120056250 '__clang_svint32x4_t'
|-TypedefDecl 0x10500d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x120056270 '__clang_svint64x4_t'
|-TypedefDecl 0x10500d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x120056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x10500d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1200562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x10500d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1200562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x10500d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1200562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x10500d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x120056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x10500d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x120056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x10500d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x120056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x10500d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x120056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x10500da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x120056390 '__SVBool_t'
|-TypedefDecl 0x10500da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1200563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x10500dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1200563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x10500db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1200563f0 '__SVCount_t'
|-TypedefDecl 0x10500dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x10500dbb0 'char *'
|   `-BuiltinType 0x1200556b0 'char'
|-TypedefDecl 0x10500dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x10500dbb0 'char *'
|   `-BuiltinType 0x1200556b0 'char'
|-FunctionDecl 0x10500e008 <dataset_diviso_filec/func19178_vuln.c:1:1, line:76:1> line:1:1 invalid _inplace_spans 'int (void *, int, int, const int *, unsigned int)'
| |-ParmVarDecl 0x10500dcd8 <col:17, col:23> col:23 used abstract_renderer 'void *'
| |-ParmVarDecl 0x10500dd58 <line:2:3, col:7> col:7 used y 'int'
| |-ParmVarDecl 0x10500ddd8 <col:10, col:14> col:14 used h 'int'
| |-ParmVarDecl 0x10500de70 <line:3:3, col:33> col:33 referenced invalid spans 'const int *'
| |-ParmVarDecl 0x10500def0 <line:4:3, col:12> col:12 used num_spans 'unsigned int'
| `-CompoundStmt 0x1050293a0 <line:5:1, line:76:1>
|   |-DeclStmt 0x10500e240 <line:8:5, col:15>
|   | |-VarDecl 0x10500e140 <col:5, col:9> col:9 used x0 'int'
|   | `-VarDecl 0x10500e1c0 <col:5, col:13> col:13 used x1 'int'
|   |-IfStmt 0x10500e330 <line:10:5, line:11:9>
|   | |-BinaryOperator 0x10500e2c8 <line:10:9, col:22> 'int' '=='
|   | | |-ImplicitCastExpr 0x10500e298 <col:9> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x10500e258 <col:9> 'unsigned int' lvalue ParmVar 0x10500def0 'num_spans' 'unsigned int'
|   | | `-ImplicitCastExpr 0x10500e2b0 <col:22> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x10500e278 <col:22> 'int' 0
|   | `-ReturnStmt 0x10500e320 <line:11:2, col:9>
|   |   `-RecoveryExpr 0x10500e300 <col:9> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x1050275d0 <line:13:5, line:21:5>
|   | |-BinaryOperator 0x107009ee0 <line:13:9, col:48> 'int' contains-errors '&&'
|   | | |-BinaryOperator 0x10500e3c0 <col:9, col:22> 'int' '=='
|   | | | |-ImplicitCastExpr 0x10500e390 <col:9> 'unsigned int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x10500e350 <col:9> 'unsigned int' lvalue ParmVar 0x10500def0 'num_spans' 'unsigned int'
|   | | | `-ImplicitCastExpr 0x10500e3a8 <col:22> 'unsigned int' <IntegralCast>
|   | | |   `-IntegerLiteral 0x10500e370 <col:22> 'int' 2
|   | | `-BinaryOperator 0x107009ec0 <col:27, col:48> 'int' contains-errors '=='
|   | |   |-CXXDependentScopeMemberExpr 0x107009e58 <col:27, col:36> '<dependent type>' contains-errors lvalue .coverage
|   | |   | `-ArraySubscriptExpr 0x107009e38 <col:27, col:34> '<dependent type>' contains-errors lvalue
|   | |   |   |-ImplicitCastExpr 0x107009e20 <col:27> '<dependent type>' contains-errors <LValueToRValue>
|   | |   |   | `-RecoveryExpr 0x10500e3e0 <col:27> '<dependent type>' contains-errors lvalue
|   | |   |   `-IntegerLiteral 0x107009e00 <col:33> 'int' 0
|   | |   `-IntegerLiteral 0x107009ea0 <col:48> 'int' 255
|   | `-CompoundStmt 0x1050275b0 <col:54, line:21:5>
|   |   |-CallExpr 0x1050274e8 <line:14:2, line:19:33> '<dependent type>' contains-errors
|   |   | |-DeclRefExpr 0x10700a060 <line:14:2> 'int ()' Function 0x107009fa8 'pixman_image_composite32' 'int ()'
|   |   | |-CXXDependentScopeMemberExpr 0x10700a8c8 <col:28, col:31> '<dependent type>' contains-errors lvalue ->op
|   |   | | `-RecoveryExpr 0x10700a8a8 <col:28> '<dependent type>' contains-errors lvalue
|   |   | |-CXXDependentScopeMemberExpr 0x10700a930 <col:35, col:38> '<dependent type>' contains-errors lvalue ->src
|   |   | | `-RecoveryExpr 0x10700a910 <col:35> '<dependent type>' contains-errors lvalue
|   |   | |-RecoveryExpr 0x10700a978 <col:43> '<dependent type>' contains-errors lvalue
|   |   | |-CXXDependentScopeMemberExpr 0x10700aa48 <col:49, col:64> '<dependent type>' contains-errors lvalue .dst
|   |   | | `-CXXDependentScopeMemberExpr 0x10700aa00 <col:49, col:54> '<dependent type>' contains-errors lvalue .composite
|   |   | |   `-CXXDependentScopeMemberExpr 0x10700a9b8 <col:49, col:52> '<dependent type>' contains-errors lvalue ->u
|   |   | |     `-RecoveryExpr 0x10700a998 <col:49> '<dependent type>' contains-errors lvalue
|   |   | |-BinaryOperator 0x10700ac08 <line:15:7, col:35> '<dependent type>' contains-errors '+'
|   |   | | |-CXXDependentScopeMemberExpr 0x10700aac8 <col:7, col:16> '<dependent type>' contains-errors lvalue .x
|   |   | | | `-ArraySubscriptExpr 0x10700aaa8 <col:7, col:14> '<dependent type>' contains-errors lvalue
|   |   | | |   |-ImplicitCastExpr 0x10700aa90 <col:7> '<dependent type>' contains-errors <LValueToRValue>
|   |   | | |   | `-RecoveryExpr 0x10700a248 <col:7> '<dependent type>' contains-errors lvalue
|   |   | | |   `-IntegerLiteral 0x10700a268 <col:13> 'int' 0
|   |   | | `-CXXDependentScopeMemberExpr 0x10700abc0 <col:20, col:35> '<dependent type>' contains-errors lvalue .src_x
|   |   | |   `-CXXDependentScopeMemberExpr 0x10700ab78 <col:20, col:25> '<dependent type>' contains-errors lvalue .composite
|   |   | |     `-CXXDependentScopeMemberExpr 0x10700ab30 <col:20, col:23> '<dependent type>' contains-errors lvalue ->u
|   |   | |       `-RecoveryExpr 0x10700ab10 <col:20> '<dependent type>' contains-errors lvalue
|   |   | |-BinaryOperator 0x10700ad20 <line:16:7, col:26> '<dependent type>' contains-errors '+'
|   |   | | |-DeclRefExpr 0x10700a418 <col:7> 'int' lvalue ParmVar 0x10500dd58 'y' 'int'
|   |   | | `-CXXDependentScopeMemberExpr 0x10700acd8 <col:11, col:26> '<dependent type>' contains-errors lvalue .src_y
|   |   | |   `-CXXDependentScopeMemberExpr 0x10700ac90 <col:11, col:16> '<dependent type>' contains-errors lvalue .composite
|   |   | |     `-CXXDependentScopeMemberExpr 0x10700ac48 <col:11, col:14> '<dependent type>' contains-errors lvalue ->u
|   |   | |       `-RecoveryExpr 0x10700ac28 <col:11> '<dependent type>' contains-errors lvalue
|   |   | |-IntegerLiteral 0x10700a548 <line:17:7> 'int' 0
|   |   | |-IntegerLiteral 0x10700a568 <col:10> 'int' 0
|   |   | |-CXXDependentScopeMemberExpr 0x10700ad78 <line:18:7, col:16> '<dependent type>' contains-errors lvalue .x
|   |   | | `-ArraySubscriptExpr 0x10700ad58 <col:7, col:14> '<dependent type>' contains-errors lvalue
|   |   | |   |-ImplicitCastExpr 0x10700ad40 <col:7> '<dependent type>' contains-errors <LValueToRValue>
|   |   | |   | `-RecoveryExpr 0x10700a588 <col:7> '<dependent type>' contains-errors lvalue
|   |   | |   `-IntegerLiteral 0x10700a5a8 <col:13> 'int' 0
|   |   | |-DeclRefExpr 0x10700a648 <col:19> 'int' lvalue ParmVar 0x10500dd58 'y' 'int'
|   |   | |-BinaryOperator 0x1050274c8 <line:19:7, col:29> '<dependent type>' contains-errors '-'
|   |   | | |-CXXDependentScopeMemberExpr 0x105027400 <col:7, col:16> '<dependent type>' contains-errors lvalue .x
|   |   | | | `-ArraySubscriptExpr 0x10700add8 <col:7, col:14> '<dependent type>' contains-errors lvalue
|   |   | | |   |-ImplicitCastExpr 0x10700adc0 <col:7> '<dependent type>' contains-errors <LValueToRValue>
|   |   | | |   | `-RecoveryExpr 0x10700a668 <col:7> '<dependent type>' contains-errors lvalue
|   |   | | |   `-IntegerLiteral 0x10700a688 <col:13> 'int' 1
|   |   | | `-CXXDependentScopeMemberExpr 0x105027480 <col:20, col:29> '<dependent type>' contains-errors lvalue .x
|   |   | |   `-ArraySubscriptExpr 0x105027460 <col:20, col:27> '<dependent type>' contains-errors lvalue
|   |   | |     |-ImplicitCastExpr 0x105027448 <col:20> '<dependent type>' contains-errors <LValueToRValue>
|   |   | |     | `-RecoveryExpr 0x10700a728 <col:20> '<dependent type>' contains-errors lvalue
|   |   | |     `-IntegerLiteral 0x10700a748 <col:26> 'int' 0
|   |   | `-DeclRefExpr 0x10700a808 <col:32> 'int' lvalue ParmVar 0x10500ddd8 'h' 'int'
|   |   `-ReturnStmt 0x1050275a0 <line:20:2, col:9>
|   |     `-RecoveryExpr 0x105027580 <col:9> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x105027728 <line:24:5, col:24> 'int' contains-errors '='
|   | |-DeclRefExpr 0x105027608 <col:5> 'int' lvalue Var 0x10500e1c0 'x1' 'int'
|   | `-BinaryOperator 0x105027708 <col:10, col:24> 'int' contains-errors '='
|   |   |-DeclRefExpr 0x105027628 <col:10> 'int' lvalue Var 0x10500e140 'x0' 'int'
|   |   `-CXXDependentScopeMemberExpr 0x1050276c0 <col:15, col:24> '<dependent type>' contains-errors lvalue .x
|   |     `-ArraySubscriptExpr 0x1050276a0 <col:15, col:22> '<dependent type>' contains-errors lvalue
|   |       |-ImplicitCastExpr 0x105027688 <col:15> '<dependent type>' contains-errors <LValueToRValue>
|   |       | `-RecoveryExpr 0x105027648 <col:15> '<dependent type>' contains-errors lvalue
|   |       `-IntegerLiteral 0x105027668 <col:21> 'int' 0
|   |-DoStmt 0x105029130 <line:25:5, line:64:29>
|   | |-CompoundStmt 0x105029068 <line:25:8, line:64:5>
|   | | |-DeclStmt 0x105027968 <line:26:2, col:35>
|   | | | `-VarDecl 0x105027760 <col:2, col:34> col:6 used len 'int' cinit
|   | | |   `-BinaryOperator 0x105027948 <col:12, col:34> '<dependent type>' contains-errors '-'
|   | | |     |-CXXDependentScopeMemberExpr 0x105027840 <col:12, col:21> '<dependent type>' contains-errors lvalue .x
|   | | |     | `-ArraySubscriptExpr 0x105027820 <col:12, col:19> '<dependent type>' contains-errors lvalue
|   | | |     |   |-ImplicitCastExpr 0x105027808 <col:12> '<dependent type>' contains-errors <LValueToRValue>
|   | | |     |   | `-RecoveryExpr 0x1050277c8 <col:12> '<dependent type>' contains-errors lvalue
|   | | |     |   `-IntegerLiteral 0x1050277e8 <col:18> 'int' 1
|   | | |     `-CXXDependentScopeMemberExpr 0x105027900 <col:25, col:34> '<dependent type>' contains-errors lvalue .x
|   | | |       `-ArraySubscriptExpr 0x1050278e0 <col:25, col:32> '<dependent type>' contains-errors lvalue
|   | | |         |-ImplicitCastExpr 0x1050278c8 <col:25> '<dependent type>' contains-errors <LValueToRValue>
|   | | |         | `-RecoveryExpr 0x105027888 <col:25> '<dependent type>' contains-errors lvalue
|   | | |         `-IntegerLiteral 0x1050278a8 <col:31> 'int' 0
|   | | |-BinaryOperator 0x105027b78 <line:27:2, col:21> '<dependent type>' contains-errors '='
|   | | | |-UnaryOperator 0x105027ae0 <col:2, col:7> '<dependent type>' contains-errors prefix '*' cannot overflow
|   | | | | `-UnaryOperator 0x105027ac8 <col:3, col:7> '<dependent type>' contains-errors postfix '++' cannot overflow
|   | | | |   `-RecoveryExpr 0x105027aa8 <col:3> '<dependent type>' contains-errors lvalue
|   | | | `-CXXDependentScopeMemberExpr 0x105027b30 <col:12, col:21> '<dependent type>' contains-errors lvalue .coverage
|   | | |   `-ArraySubscriptExpr 0x105027b10 <col:12, col:19> '<dependent type>' contains-errors lvalue
|   | | |     |-ImplicitCastExpr 0x105027af8 <col:12> '<dependent type>' contains-errors <LValueToRValue>
|   | | |     | `-RecoveryExpr 0x1050279c8 <col:12> '<dependent type>' contains-errors lvalue
|   | | |     `-IntegerLiteral 0x1050279e8 <col:18> 'int' 0
|   | | |-IfStmt 0x105028ee8 <line:28:2, line:61:2>
|   | | | |-BinaryOperator 0x105027bf0 <line:28:6, col:12> 'int' contains-errors '>'
|   | | | | |-ImplicitCastExpr 0x105027bd8 <col:6> 'int' contains-errors <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x105027b98 <col:6> 'int' contains-errors lvalue Var 0x105027760 'len' 'int'
|   | | | | `-IntegerLiteral 0x105027bb8 <col:12> 'int' 1
|   | | | `-CompoundStmt 0x105028ed0 <col:15, line:61:2>
|   | | |   `-IfStmt 0x105028ea0 <line:29:6, line:60:6> has_else
|   | | |     |-BinaryOperator 0x105028018 <line:29:10, col:67> 'int' contains-errors '&&'
|   | | |     | |-BinaryOperator 0x105027f58 <col:10, col:32> 'int' contains-errors '>='
|   | | |     | | |-DeclRefExpr 0x105027c10 <col:10> 'int' contains-errors lvalue Var 0x105027760 'len' 'int'
|   | | |     | | `-CXXDependentScopeMemberExpr 0x105027f10 <col:17, col:32> '<dependent type>' contains-errors lvalue .run_length
|   | | |     | |   `-CXXDependentScopeMemberExpr 0x105027ec8 <col:17, col:22> '<dependent type>' contains-errors lvalue .composite
|   | | |     | |     `-CXXDependentScopeMemberExpr 0x105027e80 <col:17, col:20> '<dependent type>' contains-errors lvalue ->u
|   | | |     | |       `-RecoveryExpr 0x105027e60 <col:17> '<dependent type>' contains-errors lvalue
|   | | |     | `-BinaryOperator 0x105027ff8 <col:46, col:67> 'int' contains-errors '=='
|   | | |     |   |-CXXDependentScopeMemberExpr 0x105027fb0 <col:46, col:55> '<dependent type>' contains-errors lvalue .coverage
|   | | |     |   | `-ArraySubscriptExpr 0x105027f90 <col:46, col:53> '<dependent type>' contains-errors lvalue
|   | | |     |   |   |-ImplicitCastExpr 0x105027f78 <col:46> '<dependent type>' contains-errors <LValueToRValue>
|   | | |     |   |   | `-RecoveryExpr 0x105027d40 <col:46> '<dependent type>' contains-errors lvalue
|   | | |     |   |   `-IntegerLiteral 0x105027d60 <col:52> 'int' 0
|   | | |     |   `-IntegerLiteral 0x105027e00 <col:67> 'int' 255
|   | | |     |-CompoundStmt 0x105028600 <col:73, line:46:6>
|   | | |     | |-IfStmt 0x105028268 <line:30:3, line:37:3>
|   | | |     | | |-BinaryOperator 0x1050280a8 <line:30:7, col:13> 'int' '!='
|   | | |     | | | |-ImplicitCastExpr 0x105028078 <col:7> 'int' <LValueToRValue>
|   | | |     | | | | `-DeclRefExpr 0x105028038 <col:7> 'int' lvalue Var 0x10500e1c0 'x1' 'int'
|   | | |     | | | `-ImplicitCastExpr 0x105028090 <col:13> 'int' <LValueToRValue>
|   | | |     | | |   `-DeclRefExpr 0x105028058 <col:13> 'int' lvalue Var 0x10500e140 'x0' 'int'
|   | | |     | | `-CompoundStmt 0x105028258 <col:17, line:37:3>
|   | | |     | `-BinaryOperator 0x1050285e0 <line:45:3, col:17> 'int' contains-errors '='
|   | | |     |   |-DeclRefExpr 0x105028500 <col:3> 'int' lvalue Var 0x10500e140 'x0' 'int'
|   | | |     |   `-CXXDependentScopeMemberExpr 0x105028598 <col:8, col:17> '<dependent type>' contains-errors lvalue .x
|   | | |     |     `-ArraySubscriptExpr 0x105028578 <col:8, col:15> '<dependent type>' contains-errors lvalue
|   | | |     |       |-ImplicitCastExpr 0x105028560 <col:8> '<dependent type>' contains-errors <LValueToRValue>
|   | | |     |       | `-RecoveryExpr 0x105028520 <col:8> '<dependent type>' contains-errors lvalue
|   | | |     |       `-IntegerLiteral 0x105028540 <col:14> 'int' 1
|   | | |     `-IfStmt 0x105028e70 <line:46:13, line:60:6> has_else
|   | | |       |-BinaryOperator 0x105028700 <line:46:17, col:38> 'int' contains-errors '=='
|   | | |       | |-CXXDependentScopeMemberExpr 0x105028698 <col:17, col:26> '<dependent type>' contains-errors lvalue .coverage
|   | | |       | | `-ArraySubscriptExpr 0x105028678 <col:17, col:24> '<dependent type>' contains-errors lvalue
|   | | |       | |   |-ImplicitCastExpr 0x105028660 <col:17> '<dependent type>' contains-errors <LValueToRValue>
|   | | |       | |   | `-RecoveryExpr 0x105028620 <col:17> '<dependent type>' contains-errors lvalue
|   | | |       | |   `-IntegerLiteral 0x105028640 <col:23> 'int' 0
|   | | |       | `-IntegerLiteral 0x1050286e0 <col:38> 'int' 0
|   | | |       |-CompoundStmt 0x105028a70 <col:43, line:57:6>
|   | | |       | |-IfStmt 0x105028950 <line:47:3, line:54:3>
|   | | |       | | |-BinaryOperator 0x105028790 <line:47:7, col:13> 'int' '!='
|   | | |       | | | |-ImplicitCastExpr 0x105028760 <col:7> 'int' <LValueToRValue>
|   | | |       | | | | `-DeclRefExpr 0x105028720 <col:7> 'int' lvalue Var 0x10500e1c0 'x1' 'int'
|   | | |       | | | `-ImplicitCastExpr 0x105028778 <col:13> 'int' <LValueToRValue>
|   | | |       | | |   `-DeclRefExpr 0x105028740 <col:13> 'int' lvalue Var 0x10500e140 'x0' 'int'
|   | | |       | | `-CompoundStmt 0x105028940 <col:17, line:54:3>
|   | | |       | `-BinaryOperator 0x105028a50 <line:56:3, col:17> 'int' contains-errors '='
|   | | |       |   |-DeclRefExpr 0x105028970 <col:3> 'int' lvalue Var 0x10500e140 'x0' 'int'
|   | | |       |   `-CXXDependentScopeMemberExpr 0x105028a08 <col:8, col:17> '<dependent type>' contains-errors lvalue .x
|   | | |       |     `-ArraySubscriptExpr 0x1050289e8 <col:8, col:15> '<dependent type>' contains-errors lvalue
|   | | |       |       |-ImplicitCastExpr 0x1050289d0 <col:8> '<dependent type>' contains-errors <LValueToRValue>
|   | | |       |       | `-RecoveryExpr 0x105028990 <col:8> '<dependent type>' contains-errors lvalue
|   | | |       |       `-IntegerLiteral 0x1050289b0 <col:14> 'int' 1
|   | | |       `-CompoundStmt 0x105028e60 <line:57:12, line:60:6>
|   | | |-BinaryOperator 0x105028fe8 <line:62:2, col:16> 'int' contains-errors '='
|   | | | |-DeclRefExpr 0x105028f08 <col:2> 'int' lvalue Var 0x10500e1c0 'x1' 'int'
|   | | | `-CXXDependentScopeMemberExpr 0x105028fa0 <col:7, col:16> '<dependent type>' contains-errors lvalue .x
|   | | |   `-ArraySubscriptExpr 0x105028f80 <col:7, col:14> '<dependent type>' contains-errors lvalue
|   | | |     |-ImplicitCastExpr 0x105028f68 <col:7> '<dependent type>' contains-errors <LValueToRValue>
|   | | |     | `-RecoveryExpr 0x105028f28 <col:7> '<dependent type>' contains-errors lvalue
|   | | |     `-IntegerLiteral 0x105028f48 <col:13> 'int' 1
|   | | `-UnaryOperator 0x105029050 <line:63:2, col:7> '<dependent type>' contains-errors postfix '++' cannot overflow
|   | |   `-RecoveryExpr 0x105029028 <col:2> '<dependent type>' contains-errors lvalue
|   | |     `-DeclRefExpr 0x105029008 <col:2> 'const int *' lvalue ParmVar 0x10500de70 'spans' 'const int *'
|   | `-BinaryOperator 0x105029110 <line:64:14, col:28> 'int' '>'
|   |   |-UnaryOperator 0x1050290c0 <col:14, col:16> 'unsigned int' prefix '--'
|   |   | `-DeclRefExpr 0x1050290a0 <col:16> 'unsigned int' lvalue ParmVar 0x10500def0 'num_spans' 'unsigned int'
|   |   `-ImplicitCastExpr 0x1050290f8 <col:28> 'unsigned int' <IntegralCast>
|   |     `-IntegerLiteral 0x1050290d8 <col:28> 'int' 1
|   `-IfStmt 0x105029380 <line:66:5, line:73:5>
|     |-BinaryOperator 0x1050291c0 <line:66:9, col:15> 'int' '!='
|     | |-ImplicitCastExpr 0x105029190 <col:9> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x105029150 <col:9> 'int' lvalue Var 0x10500e1c0 'x1' 'int'
|     | `-ImplicitCastExpr 0x1050291a8 <col:15> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x105029170 <col:15> 'int' lvalue Var 0x10500e140 'x0' 'int'
|     `-CompoundStmt 0x105029370 <col:19, line:73:5>
`-FunctionDecl 0x105028ad8 <line:58:3> col:3 implicit used memset 'void *(void *, int, unsigned long)' extern
  |-ParmVarDecl 0x105028bd8 <<invalid sloc>> <invalid sloc> 'void *'
  |-ParmVarDecl 0x105028c40 <<invalid sloc>> <invalid sloc> 'int'
  |-ParmVarDecl 0x105028ca8 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x105028b80 <<invalid sloc>> Implicit 900
