TranslationUnitDecl 0x14201b408 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x14201c2b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x14201b9d0 '__int128'
|-TypedefDecl 0x14201c328 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x14201b9f0 'unsigned __int128'
|-TypedefDecl 0x1420ee030 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x1420ede00 'struct __NSConstantString_tag'
|   `-Record 0x14201c380 '__NSConstantString_tag'
|-TypedefDecl 0x1420ee098 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x14201bb90 '__SVInt8_t'
|-TypedefDecl 0x1420ee100 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x14201bbb0 '__SVInt16_t'
|-TypedefDecl 0x1420ee168 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x14201bbd0 '__SVInt32_t'
|-TypedefDecl 0x1420ee1d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x14201bbf0 '__SVInt64_t'
|-TypedefDecl 0x1420ee238 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x14201bc10 '__SVUint8_t'
|-TypedefDecl 0x1420ee2a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x14201bc30 '__SVUint16_t'
|-TypedefDecl 0x1420ee308 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x14201bc50 '__SVUint32_t'
|-TypedefDecl 0x1420ee370 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x14201bc70 '__SVUint64_t'
|-TypedefDecl 0x1420ee3d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x14201bc90 '__SVFloat16_t'
|-TypedefDecl 0x1420ee440 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x14201bcb0 '__SVFloat32_t'
|-TypedefDecl 0x1420ee4a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x14201bcd0 '__SVFloat64_t'
|-TypedefDecl 0x1420ee510 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x14201bcf0 '__SVBfloat16_t'
|-TypedefDecl 0x1420ee578 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x14201bd10 '__clang_svint8x2_t'
|-TypedefDecl 0x1420ee5e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x14201bd30 '__clang_svint16x2_t'
|-TypedefDecl 0x1420ee648 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x14201bd50 '__clang_svint32x2_t'
|-TypedefDecl 0x1420ee6b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x14201bd70 '__clang_svint64x2_t'
|-TypedefDecl 0x1420ee718 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x14201bd90 '__clang_svuint8x2_t'
|-TypedefDecl 0x1420ee780 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x14201bdb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1420ee7e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x14201bdd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x1420ee850 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x14201bdf0 '__clang_svuint64x2_t'
|-TypedefDecl 0x1420ee8b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x14201be10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x1420ee920 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x14201be30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x1420ee988 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x14201be50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x1420ee9f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x14201be70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x1420eea58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x14201be90 '__clang_svint8x3_t'
|-TypedefDecl 0x1420eeac0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x14201beb0 '__clang_svint16x3_t'
|-TypedefDecl 0x1420eeb28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x14201bed0 '__clang_svint32x3_t'
|-TypedefDecl 0x1420eeb90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x14201bef0 '__clang_svint64x3_t'
|-TypedefDecl 0x1420eebf8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x14201bf10 '__clang_svuint8x3_t'
|-TypedefDecl 0x1420eec60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x14201bf30 '__clang_svuint16x3_t'
|-TypedefDecl 0x1420eecc8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x14201bf50 '__clang_svuint32x3_t'
|-TypedefDecl 0x1420eed30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x14201bf70 '__clang_svuint64x3_t'
|-TypedefDecl 0x1420eed98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x14201bf90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x1420ef600 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x14201bfb0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x1420ef668 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x14201bfd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1420ef6d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x14201bff0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x1420ef738 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x14201c010 '__clang_svint8x4_t'
|-TypedefDecl 0x1420ef7a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x14201c030 '__clang_svint16x4_t'
|-TypedefDecl 0x1420ef808 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x14201c050 '__clang_svint32x4_t'
|-TypedefDecl 0x1420ef870 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x14201c070 '__clang_svint64x4_t'
|-TypedefDecl 0x1420ef8d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x14201c090 '__clang_svuint8x4_t'
|-TypedefDecl 0x1420ef940 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x14201c0b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x1420ef9a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x14201c0d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x1420efa10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x14201c0f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x1420efa78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x14201c110 '__clang_svfloat16x4_t'
|-TypedefDecl 0x1420efae0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x14201c130 '__clang_svfloat32x4_t'
|-TypedefDecl 0x1420efb48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x14201c150 '__clang_svfloat64x4_t'
|-TypedefDecl 0x1420efbb0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x14201c170 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x1420efc18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x14201c190 '__SVBool_t'
|-TypedefDecl 0x1420efc80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x14201c1b0 '__clang_svboolx2_t'
|-TypedefDecl 0x1420efce8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x14201c1d0 '__clang_svboolx4_t'
|-TypedefDecl 0x1420efd50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x14201c1f0 '__SVCount_t'
|-TypedefDecl 0x1420efdf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1420efdb0 'char *'
|   `-BuiltinType 0x14201b4b0 'char'
|-TypedefDecl 0x1420efe68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1420efdb0 'char *'
|   `-BuiltinType 0x14201b4b0 'char'
`-FunctionDecl 0x1420f0068 <dataset_diviso_filec/func18273_nonvuln.c:1:1, line:41:1> line:1:1 read_limits 'int (long *, long *)'
  |-ParmVarDecl 0x1420eff08 <col:13, col:19> col:19 used minval 'long *'
  |-ParmVarDecl 0x1420eff88 <col:27, col:33> col:33 used maxval 'long *'
  `-CompoundStmt 0x142109538 <line:2:1, line:41:1>
    |-DeclStmt 0x1420f0238 <line:3:5, col:25>
    | `-VarDecl 0x1420f0180 <col:5, col:20> col:10 used reverse 'int' cinit
    |   `-RecoveryExpr 0x1420f0218 <col:20> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x1420f02d0 <line:4:5, col:23>
    | `-VarDecl 0x1420f0268 <col:5, col:13> col:13 used first_char 'char *'
    |-DeclStmt 0x1420f0368 <line:5:5, col:13>
    | `-VarDecl 0x1420f0300 <col:5, col:10> col:10 used tmp 'long'
    |-IfStmt 0x1420f0558 <line:7:5, line:12:5>
    | |-BinaryOperator 0x1420f0488 <line:7:9, col:22> 'int' contains-errors '=='
    | | |-UnaryOperator 0x1420f0470 <col:9, col:10> '<dependent type>' contains-errors prefix '*' cannot overflow
    | | | `-ImplicitCastExpr 0x1420f0458 <col:10> '<dependent type>' contains-errors <LValueToRValue>
    | | |   `-RecoveryExpr 0x1420f0438 <col:10> '<dependent type>' contains-errors lvalue
    | | `-CharacterLiteral 0x1420f03c8 <col:22> 'int' 45
    | `-CompoundStmt 0x1420f0540 <line:8:5, line:12:5>
    |   `-BinaryOperator 0x1420f0520 <line:11:2, col:12> 'int' contains-errors '='
    |     |-DeclRefExpr 0x1420f04a8 <col:2> 'int' contains-errors lvalue Var 0x1420f0180 'reverse' 'int'
    |     `-RecoveryExpr 0x1420f0500 <col:12> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x143809a60 <line:13:5, col:18> 'char *' contains-errors '='
    | |-DeclRefExpr 0x1420f0578 <col:5> 'char *' lvalue Var 0x1420f0268 'first_char' 'char *'
    | `-ImplicitCastExpr 0x143809a18 <col:18> 'char *' contains-errors <IntegralToPointer>
    |   `-ImplicitCastExpr 0x143809a00 <col:18> 'int' contains-errors <LValueToRValue>
    |     `-DeclRefExpr 0x1420f05d0 <col:18> 'int' contains-errors lvalue Var 0x1420f0180 'reverse' 'int'
    |-BinaryOperator 0x143809d68 <line:14:5, col:34> 'long' contains-errors '='
    | |-UnaryOperator 0x143809c90 <col:5, col:6> 'long' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x143809c78 <col:6> 'long *' <LValueToRValue>
    | |   `-DeclRefExpr 0x143809a80 <col:6> 'long *' lvalue ParmVar 0x1420eff08 'minval' 'long *'
    | `-ImplicitCastExpr 0x143809d50 <col:15, col:34> 'long' contains-errors <IntegralCast>
    |   `-CallExpr 0x143809d28 <col:15, col:34> 'int' contains-errors
    |     |-ImplicitCastExpr 0x143809d10 <col:15> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x143809be0 <col:15> 'int ()' Function 0x143809b28 'getdigits' 'int ()'
    |     `-UnaryOperator 0x143809cc8 <col:25, col:26> 'int *' contains-errors prefix '&' cannot overflow
    |       `-DeclRefExpr 0x143809ca8 <col:26> 'int' contains-errors lvalue Var 0x1420f0180 'reverse' 'int'
    |-IfStmt 0x14380a7f8 <line:15:5, line:25:12> has_else
    | |-BinaryOperator 0x143809e90 <line:15:9, col:22> 'int' contains-errors '=='
    | | |-UnaryOperator 0x143809e78 <col:9, col:10> '<dependent type>' contains-errors prefix '*' cannot overflow
    | | | `-ImplicitCastExpr 0x143809e60 <col:10> '<dependent type>' contains-errors <LValueToRValue>
    | | |   `-RecoveryExpr 0x143809e40 <col:10> '<dependent type>' contains-errors lvalue
    | | `-CharacterLiteral 0x143809dd0 <col:22> 'int' 44
    | |-CompoundStmt 0x14380a3f0 <line:16:5, line:21:5>
    | | `-IfStmt 0x14380a3c0 <line:17:2, line:20:16> has_else
    | |   |-CallExpr 0x14380a0a8 <line:17:6, col:29> '<dependent type>' contains-errors
    | |   | |-DeclRefExpr 0x143809f90 <col:6> 'int ()' Function 0x143809ed8 'vim_isdigit' 'int ()'
    | |   | `-UnaryOperator 0x14380a090 <col:18, col:21> '<dependent type>' contains-errors prefix '*' cannot overflow
    | |   |   `-UnaryOperator 0x14380a078 <col:19, col:21> '<dependent type>' contains-errors prefix '++' cannot overflow
    | |   |     `-RecoveryExpr 0x14380a058 <col:21> '<dependent type>' contains-errors lvalue
    | |   |-BinaryOperator 0x14380a278 <line:18:6, col:35> 'long' contains-errors '='
    | |   | |-UnaryOperator 0x14380a1d0 <col:6, col:7> 'long' lvalue prefix '*' cannot overflow
    | |   | | `-ImplicitCastExpr 0x14380a1b8 <col:7> 'long *' <LValueToRValue>
    | |   | |   `-DeclRefExpr 0x14380a0d0 <col:7> 'long *' lvalue ParmVar 0x1420eff88 'maxval' 'long *'
    | |   | `-ImplicitCastExpr 0x14380a260 <col:16, col:35> 'long' contains-errors <IntegralCast>
    | |   |   `-CallExpr 0x14380a238 <col:16, col:35> 'int' contains-errors
    | |   |     |-ImplicitCastExpr 0x14380a220 <col:16> 'int (*)()' <FunctionToPointerDecay>
    | |   |     | `-DeclRefExpr 0x14380a120 <col:16> 'int ()' Function 0x143809b28 'getdigits' 'int ()'
    | |   |     `-UnaryOperator 0x14380a208 <col:26, col:27> 'int *' contains-errors prefix '&' cannot overflow
    | |   |       `-DeclRefExpr 0x14380a1e8 <col:27> 'int' contains-errors lvalue Var 0x1420f0180 'reverse' 'int'
    | |   `-BinaryOperator 0x14380a3a0 <line:20:6, col:16> 'long' contains-errors '='
    | |     |-UnaryOperator 0x14380a368 <col:6, col:7> 'long' lvalue prefix '*' cannot overflow
    | |     | `-ImplicitCastExpr 0x14380a350 <col:7> 'long *' <LValueToRValue>
    | |     |   `-DeclRefExpr 0x14380a298 <col:7> 'long *' lvalue ParmVar 0x1420eff88 'maxval' 'long *'
    | |     `-RecoveryExpr 0x14380a380 <col:16> '<dependent type>' contains-errors lvalue
    | `-IfStmt 0x14380a7c8 <line:22:10, line:25:12> has_else
    |   |-CallExpr 0x14380a570 <line:22:14, col:37> 'int'
    |   | |-ImplicitCastExpr 0x14380a558 <col:14> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x14380a4e8 <col:14> 'int ()' Function 0x14380a430 'VIM_ISDIGIT' 'int ()'
    |   | `-ImplicitCastExpr 0x14380a5b0 <col:26, col:27> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x14380a598 <col:26, col:27> 'char' <LValueToRValue>
    |   |     `-UnaryOperator 0x14380a540 <col:26, col:27> 'char' lvalue prefix '*' cannot overflow
    |   |       `-ImplicitCastExpr 0x14380a528 <col:27> 'char *' <LValueToRValue>
    |   |         `-DeclRefExpr 0x14380a508 <col:27> 'char *' lvalue Var 0x1420f0268 'first_char' 'char *'
    |   |-BinaryOperator 0x14380a680 <line:23:2, col:13> 'long' '='
    |   | |-UnaryOperator 0x14380a600 <col:2, col:3> 'long' lvalue prefix '*' cannot overflow
    |   | | `-ImplicitCastExpr 0x14380a5e8 <col:3> 'long *' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x14380a5c8 <col:3> 'long *' lvalue ParmVar 0x1420eff88 'maxval' 'long *'
    |   | `-ImplicitCastExpr 0x14380a668 <col:12, col:13> 'long' <LValueToRValue>
    |   |   `-UnaryOperator 0x14380a650 <col:12, col:13> 'long' lvalue prefix '*' cannot overflow
    |   |     `-ImplicitCastExpr 0x14380a638 <col:13> 'long *' <LValueToRValue>
    |   |       `-DeclRefExpr 0x14380a618 <col:13> 'long *' lvalue ParmVar 0x1420eff08 'minval' 'long *'
    |   `-BinaryOperator 0x14380a7a8 <line:25:2, col:12> 'long' contains-errors '='
    |     |-UnaryOperator 0x14380a770 <col:2, col:3> 'long' lvalue prefix '*' cannot overflow
    |     | `-ImplicitCastExpr 0x14380a758 <col:3> 'long *' <LValueToRValue>
    |     |   `-DeclRefExpr 0x14380a6a0 <col:3> 'long *' lvalue ParmVar 0x1420eff88 'maxval' 'long *'
    |     `-RecoveryExpr 0x14380a788 <col:12> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x1421093e0 <line:33:5, line:38:5>
    | |-BinaryOperator 0x142109170 <line:33:9, col:73> 'int' contains-errors '||'
    | | |-ParenExpr 0x142108fe8 <col:9, col:39> 'int' contains-errors
    | | | `-BinaryOperator 0x142108fc8 <col:10, col:33> 'int' contains-errors '&&'
    | | |   |-UnaryOperator 0x142108ec0 <col:10, col:11> 'int' contains-errors prefix '!' cannot overflow
    | | |   | `-ImplicitCastExpr 0x142108ea8 <col:11> 'int' contains-errors <LValueToRValue>
    | | |   |   `-DeclRefExpr 0x142108e88 <col:11> 'int' contains-errors lvalue Var 0x1420f0180 'reverse' 'int'
    | | |   `-BinaryOperator 0x142108fa8 <col:22, col:33> 'int' '>'
    | | |     |-ImplicitCastExpr 0x142108f78 <col:22, col:23> 'long' <LValueToRValue>
    | | |     | `-UnaryOperator 0x142108f10 <col:22, col:23> 'long' lvalue prefix '*' cannot overflow
    | | |     |   `-ImplicitCastExpr 0x142108ef8 <col:23> 'long *' <LValueToRValue>
    | | |     |     `-DeclRefExpr 0x142108ed8 <col:23> 'long *' lvalue ParmVar 0x1420eff08 'minval' 'long *'
    | | |     `-ImplicitCastExpr 0x142108f90 <col:32, col:33> 'long' <LValueToRValue>
    | | |       `-UnaryOperator 0x142108f60 <col:32, col:33> 'long' lvalue prefix '*' cannot overflow
    | | |         `-ImplicitCastExpr 0x142108f48 <col:33> 'long *' <LValueToRValue>
    | | |           `-DeclRefExpr 0x142108f28 <col:33> 'long *' lvalue ParmVar 0x1420eff88 'maxval' 'long *'
    | | `-ParenExpr 0x142109150 <col:44, col:73> 'int' contains-errors
    | |   `-BinaryOperator 0x142109130 <col:45, col:67> 'int' contains-errors '&&'
    | |     |-ImplicitCastExpr 0x142109118 <col:45> 'int' contains-errors <LValueToRValue>
    | |     | `-DeclRefExpr 0x142109008 <col:45> 'int' contains-errors lvalue Var 0x1420f0180 'reverse' 'int'
    | |     `-BinaryOperator 0x1421090f8 <col:56, col:67> 'int' '<'
    | |       |-ImplicitCastExpr 0x1421090c8 <col:56, col:57> 'long' <LValueToRValue>
    | |       | `-UnaryOperator 0x142109060 <col:56, col:57> 'long' lvalue prefix '*' cannot overflow
    | |       |   `-ImplicitCastExpr 0x142109048 <col:57> 'long *' <LValueToRValue>
    | |       |     `-DeclRefExpr 0x142109028 <col:57> 'long *' lvalue ParmVar 0x1420eff08 'minval' 'long *'
    | |       `-ImplicitCastExpr 0x1421090e0 <col:66, col:67> 'long' <LValueToRValue>
    | |         `-UnaryOperator 0x1421090b0 <col:66, col:67> 'long' lvalue prefix '*' cannot overflow
    | |           `-ImplicitCastExpr 0x142109098 <col:67> 'long *' <LValueToRValue>
    | |             `-DeclRefExpr 0x142109078 <col:67> 'long *' lvalue ParmVar 0x1420eff88 'maxval' 'long *'
    | `-CompoundStmt 0x1421093b8 <line:34:5, line:38:5>
    |   |-BinaryOperator 0x142109218 <line:35:2, col:9> 'long' '='
    |   | |-DeclRefExpr 0x142109190 <col:2> 'long' lvalue Var 0x1420f0300 'tmp' 'long'
    |   | `-ImplicitCastExpr 0x142109200 <col:8, col:9> 'long' <LValueToRValue>
    |   |   `-UnaryOperator 0x1421091e8 <col:8, col:9> 'long' lvalue prefix '*' cannot overflow
    |   |     `-ImplicitCastExpr 0x1421091d0 <col:9> 'long *' <LValueToRValue>
    |   |       `-DeclRefExpr 0x1421091b0 <col:9> 'long *' lvalue ParmVar 0x1420eff08 'minval' 'long *'
    |   |-BinaryOperator 0x1421092f0 <line:36:2, col:13> 'long' '='
    |   | |-UnaryOperator 0x142109270 <col:2, col:3> 'long' lvalue prefix '*' cannot overflow
    |   | | `-ImplicitCastExpr 0x142109258 <col:3> 'long *' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x142109238 <col:3> 'long *' lvalue ParmVar 0x1420eff08 'minval' 'long *'
    |   | `-ImplicitCastExpr 0x1421092d8 <col:12, col:13> 'long' <LValueToRValue>
    |   |   `-UnaryOperator 0x1421092c0 <col:12, col:13> 'long' lvalue prefix '*' cannot overflow
    |   |     `-ImplicitCastExpr 0x1421092a8 <col:13> 'long *' <LValueToRValue>
    |   |       `-DeclRefExpr 0x142109288 <col:13> 'long *' lvalue ParmVar 0x1420eff88 'maxval' 'long *'
    |   `-BinaryOperator 0x142109398 <line:37:2, col:12> 'long' '='
    |     |-UnaryOperator 0x142109348 <col:2, col:3> 'long' lvalue prefix '*' cannot overflow
    |     | `-ImplicitCastExpr 0x142109330 <col:3> 'long *' <LValueToRValue>
    |     |   `-DeclRefExpr 0x142109310 <col:3> 'long *' lvalue ParmVar 0x1420eff88 'maxval' 'long *'
    |     `-ImplicitCastExpr 0x142109380 <col:12> 'long' <LValueToRValue>
    |       `-DeclRefExpr 0x142109360 <col:12> 'long' lvalue Var 0x1420f0300 'tmp' 'long'
    `-CallExpr 0x142109518 <line:39:5, col:13> 'int'
      `-ImplicitCastExpr 0x142109500 <col:5> 'int (*)()' <FunctionToPointerDecay>
        `-DeclRefExpr 0x1421094e0 <col:5> 'int ()' Function 0x142109428 'skipchr' 'int ()'
