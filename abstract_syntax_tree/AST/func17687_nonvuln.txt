TranslationUnitDecl 0x133055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1330564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x133055bd0 '__int128'
|-TypedefDecl 0x133056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x133055bf0 'unsigned __int128'
|-TypedefDecl 0x133126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x133126000 'struct __NSConstantString_tag'
|   `-Record 0x133056580 '__NSConstantString_tag'
|-TypedefDecl 0x133126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x133055d90 '__SVInt8_t'
|-TypedefDecl 0x133126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x133055db0 '__SVInt16_t'
|-TypedefDecl 0x133126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x133055dd0 '__SVInt32_t'
|-TypedefDecl 0x1331263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x133055df0 '__SVInt64_t'
|-TypedefDecl 0x133126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x133055e10 '__SVUint8_t'
|-TypedefDecl 0x1331264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x133055e30 '__SVUint16_t'
|-TypedefDecl 0x133126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x133055e50 '__SVUint32_t'
|-TypedefDecl 0x133126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x133055e70 '__SVUint64_t'
|-TypedefDecl 0x1331265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x133055e90 '__SVFloat16_t'
|-TypedefDecl 0x133126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x133055eb0 '__SVFloat32_t'
|-TypedefDecl 0x1331266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x133055ed0 '__SVFloat64_t'
|-TypedefDecl 0x133126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x133055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x133126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x133055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1331267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x133055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x133126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x133055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1331268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x133055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x133126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x133055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x133126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x133055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1331269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x133055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x133126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x133055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x133126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x133056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x133126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x133056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x133126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x133056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x133126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x133056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x133126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x133056090 '__clang_svint8x3_t'
|-TypedefDecl 0x133126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1330560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x133126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1330560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x133126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1330560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x133126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x133056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x133126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x133056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x133126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x133056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x133126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x133056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x133126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x133056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x133127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1330561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x133127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1330561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1331278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1330561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x133127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x133056210 '__clang_svint8x4_t'
|-TypedefDecl 0x1331279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x133056230 '__clang_svint16x4_t'
|-TypedefDecl 0x133127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x133056250 '__clang_svint32x4_t'
|-TypedefDecl 0x133127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x133056270 '__clang_svint64x4_t'
|-TypedefDecl 0x133127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x133056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x133127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1330562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x133127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1330562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x133127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1330562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x133127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x133056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x133127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x133056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x133127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x133056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x133127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x133056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x133127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x133056390 '__SVBool_t'
|-TypedefDecl 0x133127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1330563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x133127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1330563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x133127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1330563f0 '__SVCount_t'
|-TypedefDecl 0x133127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x133127fb0 'char *'
|   `-BuiltinType 0x1330556b0 'char'
|-TypedefDecl 0x133128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x133127fb0 'char *'
|   `-BuiltinType 0x1330556b0 'char'
`-FunctionDecl 0x1331282f8 <dataset_diviso_filec/func17687_nonvuln.c:1:1, line:23:2> line:1:12 ipv6_hex 'int (unsigned char *, const char *, int)' static
  |-ParmVarDecl 0x133128108 <col:21, col:36> col:36 used out 'unsigned char *'
  |-ParmVarDecl 0x133128188 <col:41, col:53> col:53 used in 'const char *'
  |-ParmVarDecl 0x133128208 <col:57, col:61> col:61 used inlen 'int'
  `-CompoundStmt 0x1331414f0 <line:2:2, line:23:2>
    |-DeclStmt 0x133128480 <line:3:2, col:17>
    | `-VarDecl 0x133128418 <col:2, col:16> col:16 used c 'unsigned char'
    |-DeclStmt 0x133128550 <line:4:2, col:22>
    | `-VarDecl 0x1331284b0 <col:2, col:21> col:15 used num 'unsigned int' cinit
    |   `-ImplicitCastExpr 0x133128538 <col:21> 'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x133128518 <col:21> 'int' 0
    |-IfStmt 0x133128610 <line:5:2, line:6:10>
    | |-BinaryOperator 0x1331285c0 <line:5:6, col:14> 'int' '>'
    | | |-ImplicitCastExpr 0x1331285a8 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x133128568 <col:6> 'int' lvalue ParmVar 0x133128208 'inlen' 'int'
    | | `-IntegerLiteral 0x133128588 <col:14> 'int' 4
    | `-ReturnStmt 0x133128600 <line:6:3, col:10>
    |   `-IntegerLiteral 0x1331285e0 <col:10> 'int' 0
    |-WhileStmt 0x133141238 <line:7:2, line:19:3>
    | |-UnaryOperator 0x133128650 <line:7:8, col:13> 'int' postfix '--'
    | | `-DeclRefExpr 0x133128630 <col:8> 'int' lvalue ParmVar 0x133128208 'inlen' 'int'
    | `-CompoundStmt 0x133141210 <line:8:3, line:19:3>
    |   |-BinaryOperator 0x133128708 <line:9:3, col:10> 'unsigned char' '='
    |   | |-DeclRefExpr 0x133128668 <col:3> 'unsigned char' lvalue Var 0x133128418 'c' 'unsigned char'
    |   | `-ImplicitCastExpr 0x1331286f0 <col:7, col:10> 'unsigned char' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x1331286d8 <col:7, col:10> 'char' <LValueToRValue>
    |   |     `-UnaryOperator 0x1331286c0 <col:7, col:10> 'const char' lvalue prefix '*' cannot overflow
    |   |       `-UnaryOperator 0x1331286a8 <col:8, col:10> 'const char *' postfix '++'
    |   |         `-DeclRefExpr 0x133128688 <col:8> 'const char *' lvalue ParmVar 0x133128188 'in' 'const char *'
    |   |-CompoundAssignOperator 0x133128780 <line:10:3, col:11> 'unsigned int' '<<=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    |   | |-DeclRefExpr 0x133128728 <col:3> 'unsigned int' lvalue Var 0x1331284b0 'num' 'unsigned int'
    |   | `-IntegerLiteral 0x133128748 <col:11> 'int' 4
    |   `-IfStmt 0x1331411e0 <line:11:3, line:18:11> has_else
    |     |-BinaryOperator 0x133140b00 <line:11:7, col:30> 'int' '&&'
    |     | |-ParenExpr 0x133140a38 <col:7, col:16> 'int'
    |     | | `-BinaryOperator 0x133140a18 <col:8, col:13> 'int' '>='
    |     | |   |-ImplicitCastExpr 0x133140a00 <col:8> 'int' <IntegralCast>
    |     | |   | `-ImplicitCastExpr 0x1331287e8 <col:8> 'unsigned char' <LValueToRValue>
    |     | |   |   `-DeclRefExpr 0x1331287b0 <col:8> 'unsigned char' lvalue Var 0x133128418 'c' 'unsigned char'
    |     | |   `-CharacterLiteral 0x1331287d0 <col:13> 'int' 48
    |     | `-ParenExpr 0x133140ae0 <col:21, col:30> 'int'
    |     |   `-BinaryOperator 0x133140ac0 <col:22, col:27> 'int' '<='
    |     |     |-ImplicitCastExpr 0x133140aa8 <col:22> 'int' <IntegralCast>
    |     |     | `-ImplicitCastExpr 0x133140a90 <col:22> 'unsigned char' <LValueToRValue>
    |     |     |   `-DeclRefExpr 0x133140a58 <col:22> 'unsigned char' lvalue Var 0x133128418 'c' 'unsigned char'
    |     |     `-CharacterLiteral 0x133140a78 <col:27> 'int' 57
    |     |-CompoundAssignOperator 0x133140be0 <line:12:4, col:15> 'unsigned int' '|=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    |     | |-DeclRefExpr 0x133140b20 <col:4> 'unsigned int' lvalue Var 0x1331284b0 'num' 'unsigned int'
    |     | `-ImplicitCastExpr 0x133140bc8 <col:11, col:15> 'unsigned int' <IntegralCast>
    |     |   `-BinaryOperator 0x133140ba8 <col:11, col:15> 'int' '-'
    |     |     |-ImplicitCastExpr 0x133140b90 <col:11> 'int' <IntegralCast>
    |     |     | `-ImplicitCastExpr 0x133140b78 <col:11> 'unsigned char' <LValueToRValue>
    |     |     |   `-DeclRefExpr 0x133140b40 <col:11> 'unsigned char' lvalue Var 0x133128418 'c' 'unsigned char'
    |     |     `-CharacterLiteral 0x133140b60 <col:15> 'int' 48
    |     `-IfStmt 0x1331411b0 <line:13:8, line:18:11> has_else
    |       |-BinaryOperator 0x133140d60 <line:13:12, col:35> 'int' '&&'
    |       | |-ParenExpr 0x133140c98 <col:12, col:21> 'int'
    |       | | `-BinaryOperator 0x133140c78 <col:13, col:18> 'int' '>='
    |       | |   |-ImplicitCastExpr 0x133140c60 <col:13> 'int' <IntegralCast>
    |       | |   | `-ImplicitCastExpr 0x133140c48 <col:13> 'unsigned char' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x133140c10 <col:13> 'unsigned char' lvalue Var 0x133128418 'c' 'unsigned char'
    |       | |   `-CharacterLiteral 0x133140c30 <col:18> 'int' 65
    |       | `-ParenExpr 0x133140d40 <col:26, col:35> 'int'
    |       |   `-BinaryOperator 0x133140d20 <col:27, col:32> 'int' '<='
    |       |     |-ImplicitCastExpr 0x133140d08 <col:27> 'int' <IntegralCast>
    |       |     | `-ImplicitCastExpr 0x133140cf0 <col:27> 'unsigned char' <LValueToRValue>
    |       |     |   `-DeclRefExpr 0x133140cb8 <col:27> 'unsigned char' lvalue Var 0x133128418 'c' 'unsigned char'
    |       |     `-CharacterLiteral 0x133140cd8 <col:32> 'int' 70
    |       |-CompoundAssignOperator 0x133140e80 <line:14:4, col:21> 'unsigned int' '|=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    |       | |-DeclRefExpr 0x133140d80 <col:4> 'unsigned int' lvalue Var 0x1331284b0 'num' 'unsigned int'
    |       | `-ImplicitCastExpr 0x133140e68 <col:11, col:21> 'unsigned int' <IntegralCast>
    |       |   `-BinaryOperator 0x133140e48 <col:11, col:21> 'int' '+'
    |       |     |-BinaryOperator 0x133140e08 <col:11, col:15> 'int' '-'
    |       |     | |-ImplicitCastExpr 0x133140df0 <col:11> 'int' <IntegralCast>
    |       |     | | `-ImplicitCastExpr 0x133140dd8 <col:11> 'unsigned char' <LValueToRValue>
    |       |     | |   `-DeclRefExpr 0x133140da0 <col:11> 'unsigned char' lvalue Var 0x133128418 'c' 'unsigned char'
    |       |     | `-CharacterLiteral 0x133140dc0 <col:15> 'int' 65
    |       |     `-IntegerLiteral 0x133140e28 <col:21> 'int' 10
    |       `-IfStmt 0x133141180 <line:15:8, line:18:11> has_else
    |         |-BinaryOperator 0x133141000 <line:15:12, col:35> 'int' '&&'
    |         | |-ParenExpr 0x133140f38 <col:12, col:21> 'int'
    |         | | `-BinaryOperator 0x133140f18 <col:13, col:18> 'int' '>='
    |         | |   |-ImplicitCastExpr 0x133140f00 <col:13> 'int' <IntegralCast>
    |         | |   | `-ImplicitCastExpr 0x133140ee8 <col:13> 'unsigned char' <LValueToRValue>
    |         | |   |   `-DeclRefExpr 0x133140eb0 <col:13> 'unsigned char' lvalue Var 0x133128418 'c' 'unsigned char'
    |         | |   `-CharacterLiteral 0x133140ed0 <col:18> 'int' 97
    |         | `-ParenExpr 0x133140fe0 <col:26, col:35> 'int'
    |         |   `-BinaryOperator 0x133140fc0 <col:27, col:32> 'int' '<='
    |         |     |-ImplicitCastExpr 0x133140fa8 <col:27> 'int' <IntegralCast>
    |         |     | `-ImplicitCastExpr 0x133140f90 <col:27> 'unsigned char' <LValueToRValue>
    |         |     |   `-DeclRefExpr 0x133140f58 <col:27> 'unsigned char' lvalue Var 0x133128418 'c' 'unsigned char'
    |         |     `-CharacterLiteral 0x133140f78 <col:32> 'int' 102
    |         |-CompoundAssignOperator 0x133141120 <line:16:4, col:22> 'unsigned int' '|=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    |         | |-DeclRefExpr 0x133141020 <col:4> 'unsigned int' lvalue Var 0x1331284b0 'num' 'unsigned int'
    |         | `-ImplicitCastExpr 0x133141108 <col:12, col:22> 'unsigned int' <IntegralCast>
    |         |   `-BinaryOperator 0x1331410e8 <col:12, col:22> 'int' '+'
    |         |     |-BinaryOperator 0x1331410a8 <col:12, col:16> 'int' '-'
    |         |     | |-ImplicitCastExpr 0x133141090 <col:12> 'int' <IntegralCast>
    |         |     | | `-ImplicitCastExpr 0x133141078 <col:12> 'unsigned char' <LValueToRValue>
    |         |     | |   `-DeclRefExpr 0x133141040 <col:12> 'unsigned char' lvalue Var 0x133128418 'c' 'unsigned char'
    |         |     | `-CharacterLiteral 0x133141060 <col:16> 'int' 97
    |         |     `-IntegerLiteral 0x1331410c8 <col:22> 'int' 10
    |         `-ReturnStmt 0x133141170 <line:18:4, col:11>
    |           `-IntegerLiteral 0x133141150 <col:11> 'int' 0
    |-BinaryOperator 0x133141360 <line:20:2, col:18> 'unsigned char' '='
    | |-ArraySubscriptExpr 0x1331412b0 <col:2, col:7> 'unsigned char' lvalue
    | | |-ImplicitCastExpr 0x133141298 <col:2> 'unsigned char *' <LValueToRValue>
    | | | `-DeclRefExpr 0x133141258 <col:2> 'unsigned char *' lvalue ParmVar 0x133128108 'out' 'unsigned char *'
    | | `-IntegerLiteral 0x133141278 <col:6> 'int' 0
    | `-ImplicitCastExpr 0x133141348 <col:11, col:18> 'unsigned char' <IntegralCast>
    |   `-BinaryOperator 0x133141328 <col:11, col:18> 'unsigned int' '>>'
    |     |-ImplicitCastExpr 0x133141310 <col:11> 'unsigned int' <LValueToRValue>
    |     | `-DeclRefExpr 0x1331412d0 <col:11> 'unsigned int' lvalue Var 0x1331284b0 'num' 'unsigned int'
    |     `-IntegerLiteral 0x1331412f0 <col:18> 'int' 8
    |-BinaryOperator 0x1331414a0 <line:21:2, col:17> 'unsigned char' '='
    | |-ArraySubscriptExpr 0x1331413d8 <col:2, col:7> 'unsigned char' lvalue
    | | |-ImplicitCastExpr 0x1331413c0 <col:2> 'unsigned char *' <LValueToRValue>
    | | | `-DeclRefExpr 0x133141380 <col:2> 'unsigned char *' lvalue ParmVar 0x133128108 'out' 'unsigned char *'
    | | `-IntegerLiteral 0x1331413a0 <col:6> 'int' 1
    | `-ImplicitCastExpr 0x133141488 <col:11, col:17> 'unsigned char' <IntegralCast>
    |   `-BinaryOperator 0x133141468 <col:11, col:17> 'unsigned int' '&'
    |     |-ImplicitCastExpr 0x133141438 <col:11> 'unsigned int' <LValueToRValue>
    |     | `-DeclRefExpr 0x1331413f8 <col:11> 'unsigned int' lvalue Var 0x1331284b0 'num' 'unsigned int'
    |     `-ImplicitCastExpr 0x133141450 <col:17> 'unsigned int' <IntegralCast>
    |       `-IntegerLiteral 0x133141418 <col:17> 'int' 255
    `-ReturnStmt 0x1331414e0 <line:22:2, col:9>
      `-IntegerLiteral 0x1331414c0 <col:9> 'int' 1
