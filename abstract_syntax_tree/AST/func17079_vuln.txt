TranslationUnitDecl 0x130055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1300564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x130055bd0 '__int128'
|-TypedefDecl 0x130056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x130055bf0 'unsigned __int128'
|-TypedefDecl 0x12800be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12800bc00 'struct __NSConstantString_tag'
|   `-Record 0x130056580 '__NSConstantString_tag'
|-TypedefDecl 0x12800be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x130055d90 '__SVInt8_t'
|-TypedefDecl 0x12800bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x130055db0 '__SVInt16_t'
|-TypedefDecl 0x12800bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x130055dd0 '__SVInt32_t'
|-TypedefDecl 0x12800bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x130055df0 '__SVInt64_t'
|-TypedefDecl 0x12800c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x130055e10 '__SVUint8_t'
|-TypedefDecl 0x12800c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x130055e30 '__SVUint16_t'
|-TypedefDecl 0x12800c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x130055e50 '__SVUint32_t'
|-TypedefDecl 0x12800c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x130055e70 '__SVUint64_t'
|-TypedefDecl 0x12800c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x130055e90 '__SVFloat16_t'
|-TypedefDecl 0x12800c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x130055eb0 '__SVFloat32_t'
|-TypedefDecl 0x12800c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x130055ed0 '__SVFloat64_t'
|-TypedefDecl 0x12800c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x130055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12800c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x130055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12800c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x130055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12800c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x130055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12800c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x130055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12800c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x130055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12800c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x130055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12800c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x130055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12800c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x130055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12800c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x130056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12800c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x130056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12800c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x130056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12800c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x130056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12800c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x130056090 '__clang_svint8x3_t'
|-TypedefDecl 0x12800c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1300560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12800c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1300560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12800c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1300560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12800c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x130056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12800ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x130056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12800cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x130056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12800cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x130056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12800cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x130056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12800d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1300561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12800d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1300561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12800d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1300561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12800d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x130056210 '__clang_svint8x4_t'
|-TypedefDecl 0x12800d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x130056230 '__clang_svint16x4_t'
|-TypedefDecl 0x12800d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x130056250 '__clang_svint32x4_t'
|-TypedefDecl 0x12800d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x130056270 '__clang_svint64x4_t'
|-TypedefDecl 0x12800d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x130056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12800d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1300562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12800d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1300562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12800d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1300562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12800d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x130056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12800d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x130056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12800d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x130056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12800d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x130056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12800da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x130056390 '__SVBool_t'
|-TypedefDecl 0x12800da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1300563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12800dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1300563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12800db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1300563f0 '__SVCount_t'
|-TypedefDecl 0x12800dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12800dbb0 'char *'
|   `-BuiltinType 0x1300556b0 'char'
|-TypedefDecl 0x12800dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12800dbb0 'char *'
|   `-BuiltinType 0x1300556b0 'char'
|-FunctionDecl 0x12800de88 <dataset_diviso_filec/func17079_vuln.c:1:1, line:97:1> line:1:5 invalid load_env 'int (char *, int *)'
| |-ParmVarDecl 0x12800dcd8 <col:14, col:20> col:20 used envstr 'char *'
| |-ParmVarDecl 0x12800dda8 <col:28, col:35> col:35 invalid f 'int *'
| `-CompoundStmt 0x12802d460 <col:38, line:97:1>
|   |-DeclStmt 0x12800dfc0 <line:2:2, col:14>
|   | `-VarDecl 0x12800df58 <col:2, col:7> col:7 used filepos 'long'
|   |-DeclStmt 0x12800e058 <line:3:2, col:14>
|   | `-VarDecl 0x12800dff0 <col:2, col:6> col:6 used fileline 'int'
|   |-DeclStmt 0x128027628 <line:4:2, col:22>
|   | |-EnumDecl 0x12800e070 <col:2, col:7> col:7 env_state
|   | `-VarDecl 0x12800e188 <col:2, col:17> col:17 referenced invalid state 'enum env_state'
|   |-DeclStmt 0x128027860 <line:5:2, col:32>
|   | |-VarDecl 0x128027650 <col:2, col:7> col:7 used quotechar 'char'
|   | |-VarDecl 0x1280276d0 <col:2, col:19> col:19 used c 'char *'
|   | |-VarDecl 0x128027750 <col:2, col:23> col:23 used str 'char *'
|   | `-VarDecl 0x1280277d0 <col:2, col:29> col:29 used val 'char *'
|   |-BinaryOperator 0x128027a58 <line:7:2, col:19> 'long' contains-errors '='
|   | |-DeclRefExpr 0x128027878 <col:2> 'long' lvalue Var 0x12800df58 'filepos' 'long'
|   | `-CallExpr 0x128027a30 <col:12, col:19> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x1280279f0 <col:12> 'int ()' Function 0x128027938 'ftell' 'int ()'
|   |   `-RecoveryExpr 0x128027a10 <col:18> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x128027af0 <line:8:2, col:13> 'int' contains-errors '='
|   | |-DeclRefExpr 0x128027a78 <col:2> 'int' lvalue Var 0x12800dff0 'fileline' 'int'
|   | `-RecoveryExpr 0x128027ad0 <col:13> '<dependent type>' contains-errors lvalue
|   |-CallExpr 0x128027c30 <line:9:2, col:17> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x128027bf0 <col:2> 'int ()' Function 0x128027b38 'skip_comments' 'int ()'
|   | `-RecoveryExpr 0x128027c10 <col:16> '<dependent type>' contains-errors lvalue
|   |-CallExpr 0x1280281d0 <line:13:2, col:30> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x128028028 <col:2> 'int ()' Function 0x128027f70 'Debug' 'int ()'
|   | |-RecoveryExpr 0x128028140 <col:8> '<dependent type>' contains-errors lvalue
|   | `-ParenExpr 0x1280281b0 <col:15, col:29> 'char *'
|   |   `-BinaryOperator 0x128028190 <col:16, col:23> 'char *' ','
|   |     |-ImplicitCastExpr 0x128028160 <col:16> 'char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x128028060 <col:16> 'char[4]' lvalue "STR"
|   |     `-ImplicitCastExpr 0x128028178 <col:23> 'char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x128028080 <col:23> 'char *' lvalue ParmVar 0x12800dcd8 'envstr' 'char *'
|   |-BinaryOperator 0x128028258 <line:15:2, col:8> 'char *' '='
|   | |-DeclRefExpr 0x128028200 <col:2> 'char *' lvalue Var 0x128027750 'str' 'char *'
|   | `-ImplicitCastExpr 0x128028240 <col:8> 'char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x128028220 <col:8> 'char *' lvalue ParmVar 0x12800dcd8 'envstr' 'char *'
|   |-BinaryOperator 0x128028318 <line:16:2, col:10> '<dependent type>' contains-errors '='
|   | |-RecoveryExpr 0x128028298 <col:2> '<dependent type>' contains-errors lvalue
|   | | `-DeclRefExpr 0x128028278 <col:2> 'enum env_state' lvalue Var 0x12800e188 'state' 'enum env_state'
|   | `-RecoveryExpr 0x1280282f8 <col:10> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x128028388 <line:17:2, col:14> 'char' '='
|   | |-DeclRefExpr 0x128028338 <col:2> 'char' lvalue Var 0x128027650 'quotechar' 'char'
|   | `-ImplicitCastExpr 0x128028370 <col:14> 'char' <IntegralCast>
|   |   `-CharacterLiteral 0x128028358 <col:14> 'int' 0
|   |-BinaryOperator 0x12802a000 <line:18:2, col:6> 'char *' '='
|   | |-DeclRefExpr 0x1280283a8 <col:2> 'char *' lvalue Var 0x1280276d0 'c' 'char *'
|   | `-ImplicitCastExpr 0x1280283e8 <col:6> 'char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1280283c8 <col:6> 'char *' lvalue ParmVar 0x12800dcd8 'envstr' 'char *'
|   |-WhileStmt 0x12802cb18 <line:19:2, line:81:2>
|   | |-BinaryOperator 0x12802a158 <line:19:9, col:28> 'int' contains-errors '&&'
|   | | |-BinaryOperator 0x12802a108 <col:9, col:18> 'int' contains-errors '!='
|   | | | |-RecoveryExpr 0x12802a020 <col:9> '<dependent type>' contains-errors lvalue
|   | | | `-RecoveryExpr 0x12802a0e8 <col:18> '<dependent type>' contains-errors lvalue
|   | | `-UnaryOperator 0x12802a140 <col:27, col:28> 'char' lvalue prefix '*' cannot overflow
|   | |   `-ImplicitCastExpr 0x12802a128 <col:28> 'char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x12802a078 <col:28> 'char *' lvalue Var 0x1280276d0 'c' 'char *'
|   | `-CompoundStmt 0x12802cb00 <col:31, line:81:2>
|   |   `-SwitchStmt 0x12802a1b0 <line:20:3, line:80:3>
|   |     |-ImplicitCastExpr 0x12802a198 <line:20:11> '<dependent type>' contains-errors <LValueToRValue>
|   |     | `-RecoveryExpr 0x12802a178 <col:11> '<dependent type>' contains-errors lvalue
|   |     `-CompoundStmt 0x12802ca98 <col:18, line:80:3>
|   |       |-IfStmt 0x12802a440 <line:23:4, line:24:19>
|   |       | |-BinaryOperator 0x12802a378 <line:23:8, col:28> 'int' '||'
|   |       | | |-BinaryOperator 0x12802a2a0 <col:8, col:14> 'int' '=='
|   |       | | | |-ImplicitCastExpr 0x12802a288 <col:8, col:9> 'int' <IntegralCast>
|   |       | | | | `-ImplicitCastExpr 0x12802a270 <col:8, col:9> 'char' <LValueToRValue>
|   |       | | | |   `-UnaryOperator 0x12802a240 <col:8, col:9> 'char' lvalue prefix '*' cannot overflow
|   |       | | | |     `-ImplicitCastExpr 0x12802a228 <col:9> 'char *' <LValueToRValue>
|   |       | | | |       `-DeclRefExpr 0x12802a208 <col:9> 'char *' lvalue Var 0x1280276d0 'c' 'char *'
|   |       | | | `-CharacterLiteral 0x12802a258 <col:14> 'int' 39
|   |       | | `-BinaryOperator 0x12802a358 <col:22, col:28> 'int' '=='
|   |       | |   |-ImplicitCastExpr 0x12802a340 <col:22, col:23> 'int' <IntegralCast>
|   |       | |   | `-ImplicitCastExpr 0x12802a328 <col:22, col:23> 'char' <LValueToRValue>
|   |       | |   |   `-UnaryOperator 0x12802a2f8 <col:22, col:23> 'char' lvalue prefix '*' cannot overflow
|   |       | |   |     `-ImplicitCastExpr 0x12802a2e0 <col:23> 'char *' <LValueToRValue>
|   |       | |   |       `-DeclRefExpr 0x12802a2c0 <col:23> 'char *' lvalue Var 0x1280276d0 'c' 'char *'
|   |       | |   `-CharacterLiteral 0x12802a310 <col:28> 'int' 34
|   |       | `-BinaryOperator 0x12802a420 <line:24:5, col:19> 'char' '='
|   |       |   |-DeclRefExpr 0x12802a398 <col:5> 'char' lvalue Var 0x128027650 'quotechar' 'char'
|   |       |   `-ImplicitCastExpr 0x12802a408 <col:17, col:19> 'char' <LValueToRValue>
|   |       |     `-UnaryOperator 0x12802a3f0 <col:17, col:19> 'char' lvalue prefix '*' cannot overflow
|   |       |       `-UnaryOperator 0x12802a3d8 <col:18, col:19> 'char *' postfix '++'
|   |       |         `-DeclRefExpr 0x12802a3b8 <col:18> 'char *' lvalue Var 0x1280276d0 'c' 'char *'
|   |       |-UnaryOperator 0x12802a4a8 <line:25:4, col:9> '<dependent type>' contains-errors postfix '++' cannot overflow
|   |       | `-RecoveryExpr 0x12802a480 <col:4> '<dependent type>' contains-errors lvalue
|   |       |   `-DeclRefExpr 0x12802a460 <col:4> 'enum env_state' lvalue Var 0x12800e188 'state' 'enum env_state'
|   |       |-IfStmt 0x12802c0b8 <line:29:4, line:52:4> has_else
|   |       | |-ImplicitCastExpr 0x12802a510 <line:29:8> 'char' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x12802a4f0 <col:8> 'char' lvalue Var 0x128027650 'quotechar' 'char'
|   |       | |-CompoundStmt 0x12802aa18 <col:19, line:39:4>
|   |       | | |-IfStmt 0x12802a6e0 <line:30:5, line:34:5>
|   |       | | | |-BinaryOperator 0x12802a5f8 <line:30:9, col:15> 'int' '=='
|   |       | | | | |-ImplicitCastExpr 0x12802a5c8 <col:9, col:10> 'int' <IntegralCast>
|   |       | | | | | `-ImplicitCastExpr 0x12802a598 <col:9, col:10> 'char' <LValueToRValue>
|   |       | | | | |   `-UnaryOperator 0x12802a560 <col:9, col:10> 'char' lvalue prefix '*' cannot overflow
|   |       | | | | |     `-ImplicitCastExpr 0x12802a548 <col:10> 'char *' <LValueToRValue>
|   |       | | | | |       `-DeclRefExpr 0x12802a528 <col:10> 'char *' lvalue Var 0x1280276d0 'c' 'char *'
|   |       | | | | `-ImplicitCastExpr 0x12802a5e0 <col:15> 'int' <IntegralCast>
|   |       | | | |   `-ImplicitCastExpr 0x12802a5b0 <col:15> 'char' <LValueToRValue>
|   |       | | | |     `-DeclRefExpr 0x12802a578 <col:15> 'char' lvalue Var 0x128027650 'quotechar' 'char'
|   |       | | | `-CompoundStmt 0x12802a6b8 <col:26, line:34:5>
|   |       | | |   |-UnaryOperator 0x12802a660 <line:31:6, col:11> '<dependent type>' contains-errors postfix '++' cannot overflow
|   |       | | |   | `-RecoveryExpr 0x12802a638 <col:6> '<dependent type>' contains-errors lvalue
|   |       | | |   |   `-DeclRefExpr 0x12802a618 <col:6> 'enum env_state' lvalue Var 0x12800e188 'state' 'enum env_state'
|   |       | | |   |-UnaryOperator 0x12802a698 <line:32:6, col:7> 'char *' postfix '++'
|   |       | | |   | `-DeclRefExpr 0x12802a678 <col:6> 'char *' lvalue Var 0x1280276d0 'c' 'char *'
|   |       | | |   `-BreakStmt 0x12802a6b0 <line:33:6>
|   |       | | `-IfStmt 0x12802a9f8 <line:35:5, line:38:5>
|   |       | |   |-BinaryOperator 0x12802a8f0 <line:35:9, col:32> 'int' contains-errors '&&'
|   |       | |   | |-BinaryOperator 0x12802a850 <col:9, col:18> 'int' contains-errors '=='
|   |       | |   | | |-RecoveryExpr 0x12802a700 <col:9> '<dependent type>' contains-errors lvalue
|   |       | |   | | `-RecoveryExpr 0x12802a830 <col:18> '<dependent type>' contains-errors lvalue
|   |       | |   | `-BinaryOperator 0x12802a8d0 <col:26, col:32> 'int' '=='
|   |       | |   |   |-ImplicitCastExpr 0x12802a8b8 <col:26, col:27> 'int' <IntegralCast>
|   |       | |   |   | `-ImplicitCastExpr 0x12802a8a0 <col:26, col:27> 'char' <LValueToRValue>
|   |       | |   |   |   `-UnaryOperator 0x12802a888 <col:26, col:27> 'char' lvalue prefix '*' cannot overflow
|   |       | |   |   |     `-ImplicitCastExpr 0x12802a870 <col:27> 'char *' <LValueToRValue>
|   |       | |   |   |       `-DeclRefExpr 0x12802a758 <col:27> 'char *' lvalue Var 0x1280276d0 'c' 'char *'
|   |       | |   |   `-CharacterLiteral 0x12802a7a8 <col:32> 'int' 61
|   |       | |   `-CompoundStmt 0x12802a9d8 <col:37, line:38:5>
|   |       | |     |-BinaryOperator 0x12802a9b0 <line:36:6, col:14> '<dependent type>' contains-errors '='
|   |       | |     | |-RecoveryExpr 0x12802a930 <col:6> '<dependent type>' contains-errors lvalue
|   |       | |     | | `-DeclRefExpr 0x12802a910 <col:6> 'enum env_state' lvalue Var 0x12800e188 'state' 'enum env_state'
|   |       | |     | `-RecoveryExpr 0x12802a990 <col:14> '<dependent type>' contains-errors lvalue
|   |       | |     `-BreakStmt 0x12802a9d0 <line:37:6>
|   |       | `-CompoundStmt 0x12802c0a0 <line:40:9, line:52:4>
|   |       |   `-IfStmt 0x12802c080 <line:41:5, line:51:5>
|   |       |     |-BinaryOperator 0x12802aab0 <line:41:9, col:18> 'int' contains-errors '=='
|   |       |     | |-RecoveryExpr 0x12802aa38 <col:9> '<dependent type>' contains-errors lvalue
|   |       |     | `-RecoveryExpr 0x12802aa90 <col:18> '<dependent type>' contains-errors lvalue
|   |       |     `-CompoundStmt 0x12802c060 <col:24, line:51:5>
|   |       |       |-IfStmt 0x12802aee0 <line:42:6, line:46:6>
|   |       |       | |-CallExpr 0x12802add8 <line:42:10, col:36> 'int'
|   |       |       | | |-ImplicitCastExpr 0x12802adc0 <col:10> 'int (*)(int)' <FunctionToPointerDecay>
|   |       |       | | | `-DeclRefExpr 0x12802acc8 <col:10> 'int (int)' Function 0x12802ab08 'isspace' 'int (int)'
|   |       |       | | `-ImplicitCastExpr 0x12802ae00 <col:18, col:35> 'int' <IntegralCast>
|   |       |       | |   `-CStyleCastExpr 0x12802ad68 <col:18, col:35> 'unsigned char' <IntegralCast>
|   |       |       | |     `-ImplicitCastExpr 0x12802ad50 <col:34, col:35> 'char' <LValueToRValue> part_of_explicit_cast
|   |       |       | |       `-UnaryOperator 0x12802ad20 <col:34, col:35> 'char' lvalue prefix '*' cannot overflow
|   |       |       | |         `-ImplicitCastExpr 0x12802ad08 <col:35> 'char *' <LValueToRValue>
|   |       |       | |           `-DeclRefExpr 0x12802ace8 <col:35> 'char *' lvalue Var 0x1280276d0 'c' 'char *'
|   |       |       | `-CompoundStmt 0x12802aeb8 <col:39, line:46:6>
|   |       |       |   |-UnaryOperator 0x12802ae38 <line:43:7, col:8> 'char *' postfix '++'
|   |       |       |   | `-DeclRefExpr 0x12802ae18 <col:7> 'char *' lvalue Var 0x1280276d0 'c' 'char *'
|   |       |       |   |-UnaryOperator 0x12802ae98 <line:44:7, col:12> '<dependent type>' contains-errors postfix '++' cannot overflow
|   |       |       |   | `-RecoveryExpr 0x12802ae70 <col:7> '<dependent type>' contains-errors lvalue
|   |       |       |   |   `-DeclRefExpr 0x12802ae50 <col:7> 'enum env_state' lvalue Var 0x12800e188 'state' 'enum env_state'
|   |       |       |   `-BreakStmt 0x12802aeb0 <line:45:7>
|   |       |       `-IfStmt 0x12802c040 <line:47:6, line:50:6>
|   |       |         |-BinaryOperator 0x12802af98 <line:47:10, col:16> 'int' '=='
|   |       |         | |-ImplicitCastExpr 0x12802af80 <col:10, col:11> 'int' <IntegralCast>
|   |       |         | | `-ImplicitCastExpr 0x12802af68 <col:10, col:11> 'char' <LValueToRValue>
|   |       |         | |   `-UnaryOperator 0x12802af38 <col:10, col:11> 'char' lvalue prefix '*' cannot overflow
|   |       |         | |     `-ImplicitCastExpr 0x12802af20 <col:11> 'char *' <LValueToRValue>
|   |       |         | |       `-DeclRefExpr 0x12802af00 <col:11> 'char *' lvalue Var 0x1280276d0 'c' 'char *'
|   |       |         | `-CharacterLiteral 0x12802af50 <col:16> 'int' 61
|   |       |         `-CompoundStmt 0x12802c020 <col:21, line:50:6>
|   |       |           |-UnaryOperator 0x12802c000 <line:48:7, col:12> '<dependent type>' contains-errors postfix '++' cannot overflow
|   |       |           | `-RecoveryExpr 0x12802afd8 <col:7> '<dependent type>' contains-errors lvalue
|   |       |           |   `-DeclRefExpr 0x12802afb8 <col:7> 'enum env_state' lvalue Var 0x12800e188 'state' 'enum env_state'
|   |       |           `-BreakStmt 0x12802c018 <line:49:7>
|   |       |-BinaryOperator 0x12802c1a0 <line:53:4, col:15> 'char' '='
|   |       | |-UnaryOperator 0x12802c120 <col:4, col:8> 'char' lvalue prefix '*' cannot overflow
|   |       | | `-UnaryOperator 0x12802c108 <col:5, col:8> 'char *' postfix '++'
|   |       | |   `-DeclRefExpr 0x12802c0e8 <col:5> 'char *' lvalue Var 0x128027750 'str' 'char *'
|   |       | `-ImplicitCastExpr 0x12802c188 <col:13, col:15> 'char' <LValueToRValue>
|   |       |   `-UnaryOperator 0x12802c170 <col:13, col:15> 'char' lvalue prefix '*' cannot overflow
|   |       |     `-UnaryOperator 0x12802c158 <col:14, col:15> 'char *' postfix '++'
|   |       |       `-DeclRefExpr 0x12802c138 <col:14> 'char *' lvalue Var 0x1280276d0 'c' 'char *'
|   |       |-BreakStmt 0x12802c1c0 <line:54:4>
|   |       |-IfStmt 0x12802c660 <line:57:4, line:66:4> has_else
|   |       | |-BinaryOperator 0x12802c260 <line:57:8, col:14> 'int' '=='
|   |       | | |-ImplicitCastExpr 0x12802c248 <col:8, col:9> 'int' <IntegralCast>
|   |       | | | `-ImplicitCastExpr 0x12802c230 <col:8, col:9> 'char' <LValueToRValue>
|   |       | | |   `-UnaryOperator 0x12802c200 <col:8, col:9> 'char' lvalue prefix '*' cannot overflow
|   |       | | |     `-ImplicitCastExpr 0x12802c1e8 <col:9> 'char *' <LValueToRValue>
|   |       | | |       `-DeclRefExpr 0x12802c1c8 <col:9> 'char *' lvalue Var 0x1280276d0 'c' 'char *'
|   |       | | `-CharacterLiteral 0x12802c218 <col:14> 'int' 61
|   |       | |-CompoundStmt 0x12802c4a0 <col:19, line:62:4>
|   |       | | |-UnaryOperator 0x12802c2c8 <line:58:5, col:10> '<dependent type>' contains-errors postfix '++' cannot overflow
|   |       | | | `-RecoveryExpr 0x12802c2a0 <col:5> '<dependent type>' contains-errors lvalue
|   |       | | |   `-DeclRefExpr 0x12802c280 <col:5> 'enum env_state' lvalue Var 0x12800e188 'state' 'enum env_state'
|   |       | | |-BinaryOperator 0x12802c330 <line:59:5, col:17> 'char' '='
|   |       | | | |-DeclRefExpr 0x12802c2e0 <col:5> 'char' lvalue Var 0x128027650 'quotechar' 'char'
|   |       | | | `-ImplicitCastExpr 0x12802c318 <col:17> 'char' <IntegralCast>
|   |       | | |   `-CharacterLiteral 0x12802c300 <col:17> 'int' 0
|   |       | | |-BinaryOperator 0x12802c408 <line:60:5, col:15> 'char' '='
|   |       | | | |-UnaryOperator 0x12802c388 <col:5, col:9> 'char' lvalue prefix '*' cannot overflow
|   |       | | | | `-UnaryOperator 0x12802c370 <col:6, col:9> 'char *' postfix '++'
|   |       | | | |   `-DeclRefExpr 0x12802c350 <col:6> 'char *' lvalue Var 0x128027750 'str' 'char *'
|   |       | | | `-ImplicitCastExpr 0x12802c3f0 <col:14, col:15> 'char' <LValueToRValue>
|   |       | | |   `-UnaryOperator 0x12802c3d8 <col:14, col:15> 'char' lvalue prefix '*' cannot overflow
|   |       | | |     `-ImplicitCastExpr 0x12802c3c0 <col:15> 'char *' <LValueToRValue>
|   |       | | |       `-DeclRefExpr 0x12802c3a0 <col:15> 'char *' lvalue Var 0x1280276d0 'c' 'char *'
|   |       | | `-BinaryOperator 0x12802c480 <line:61:5, col:11> 'char *' '='
|   |       | |   |-DeclRefExpr 0x12802c428 <col:5> 'char *' lvalue Var 0x1280277d0 'val' 'char *'
|   |       | |   `-ImplicitCastExpr 0x12802c468 <col:11> 'char *' <LValueToRValue>
|   |       | |     `-DeclRefExpr 0x12802c448 <col:11> 'char *' lvalue Var 0x128027750 'str' 'char *'
|   |       | `-CompoundStmt 0x12802c650 <line:63:9, line:66:4>
|   |       |-UnaryOperator 0x12802c6b0 <line:67:4, col:5> 'char *' postfix '++'
|   |       | `-DeclRefExpr 0x12802c690 <col:4> 'char *' lvalue Var 0x1280276d0 'c' 'char *'
|   |       |-BreakStmt 0x12802c6c8 <line:68:4>
|   |       |-IfStmt 0x12802c888 <line:72:4, line:75:10> has_else
|   |       | |-CallExpr 0x12802c7b0 <line:72:8, col:34> 'int'
|   |       | | |-ImplicitCastExpr 0x12802c798 <col:8> 'int (*)(int)' <FunctionToPointerDecay>
|   |       | | | `-DeclRefExpr 0x12802c6d0 <col:8> 'int (int)' Function 0x12802ab08 'isspace' 'int (int)'
|   |       | | `-ImplicitCastExpr 0x12802c7d8 <col:16, col:33> 'int' <IntegralCast>
|   |       | |   `-CStyleCastExpr 0x12802c770 <col:16, col:33> 'unsigned char' <IntegralCast>
|   |       | |     `-ImplicitCastExpr 0x12802c758 <col:32, col:33> 'char' <LValueToRValue> part_of_explicit_cast
|   |       | |       `-UnaryOperator 0x12802c728 <col:32, col:33> 'char' lvalue prefix '*' cannot overflow
|   |       | |         `-ImplicitCastExpr 0x12802c710 <col:33> 'char *' <LValueToRValue>
|   |       | |           `-DeclRefExpr 0x12802c6f0 <col:33> 'char *' lvalue Var 0x1280276d0 'c' 'char *'
|   |       | |-UnaryOperator 0x12802c810 <line:73:5, col:6> 'char *' postfix '++'
|   |       | | `-DeclRefExpr 0x12802c7f0 <col:5> 'char *' lvalue Var 0x1280276d0 'c' 'char *'
|   |       | `-UnaryOperator 0x12802c870 <line:75:5, col:10> '<dependent type>' contains-errors postfix '++' cannot overflow
|   |       |   `-RecoveryExpr 0x12802c848 <col:5> '<dependent type>' contains-errors lvalue
|   |       |     `-DeclRefExpr 0x12802c828 <col:5> 'enum env_state' lvalue Var 0x12800e188 'state' 'enum env_state'
|   |       |-BreakStmt 0x12802c8b8 <line:76:4>
|   |       `-DefaultStmt 0x12802ca78 <line:78:3, line:79:10>
|   |         `-CallExpr 0x12802ca58 <col:4, col:10> 'void'
|   |           `-ImplicitCastExpr 0x12802ca40 <col:4> 'void (*)(void) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |             `-DeclRefExpr 0x12802c9f0 <col:4> 'void (void) __attribute__((noreturn))' Function 0x12802c8f0 'abort' 'void (void) __attribute__((noreturn))'
|   |-IfStmt 0x12802d038 <line:82:2, line:89:2>
|   | |-RecoveryExpr 0x12802cbe8 <line:82:6, col:69> '_Bool' contains-errors
|   | `-CompoundStmt 0x12802d018 <col:72, line:89:2>
|   |   |-IfStmt 0x12802ce50 <line:84:3, line:86:3>
|   |   | |-CallExpr 0x12802ce08 <line:84:7, col:26> '<dependent type>' contains-errors
|   |   | | |-DeclRefExpr 0x12802cd88 <col:7> 'int ()' Function 0x12802ccd0 'fseek' 'int ()'
|   |   | | |-RecoveryExpr 0x12802cda8 <col:13> '<dependent type>' contains-errors lvalue
|   |   | | |-DeclRefExpr 0x12802cdc8 <col:16> 'long' lvalue Var 0x12800df58 'filepos' 'long'
|   |   | | `-IntegerLiteral 0x12802cde8 <col:25> 'int' 0
|   |   | `-CompoundStmt 0x12802ce40 <col:29, line:86:3>
|   |   `-CallExpr 0x12802cfd8 <line:87:3, col:23> 'int'
|   |     |-ImplicitCastExpr 0x12802cfc0 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x12802cf50 <col:3> 'int ()' Function 0x12802ce98 'Set_LineNum' 'int ()'
|   |     `-ImplicitCastExpr 0x12802d000 <col:15> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x12802cf70 <col:15> 'int' lvalue Var 0x12800dff0 'fileline' 'int'
|   |-BinaryOperator 0x12802d0d8 <line:90:2, col:9> 'char' '='
|   | |-UnaryOperator 0x12802d090 <col:2, col:3> 'char' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x12802d078 <col:3> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x12802d058 <col:3> 'char *' lvalue Var 0x128027750 'str' 'char *'
|   | `-ImplicitCastExpr 0x12802d0c0 <col:9> 'char' <IntegralCast>
|   |   `-CharacterLiteral 0x12802d0a8 <col:9> 'int' 0
|   `-IfStmt 0x12802d440 <line:91:2, line:95:2>
|     |-RecoveryExpr 0x12802d118 <line:91:6, col:15> '_Bool' contains-errors
|     `-CompoundStmt 0x12802d428 <col:22, line:95:2>
|       `-WhileStmt 0x12802d408 <line:93:3, line:94:15>
|         |-BinaryOperator 0x12802d328 <line:93:10, col:53> 'int' '&&'
|         | |-BinaryOperator 0x12802d1a8 <col:10, col:16> 'int' '>'
|         | | |-ImplicitCastExpr 0x12802d178 <col:10> 'char *' <LValueToRValue>
|         | | | `-DeclRefExpr 0x12802d138 <col:10> 'char *' lvalue Var 0x128027750 'str' 'char *'
|         | | `-ImplicitCastExpr 0x12802d190 <col:16> 'char *' <LValueToRValue>
|         | |   `-DeclRefExpr 0x12802d158 <col:16> 'char *' lvalue Var 0x1280277d0 'val' 'char *'
|         | `-CallExpr 0x12802d2e8 <col:23, col:53> 'int'
|         |   |-ImplicitCastExpr 0x12802d2d0 <col:23> 'int (*)(int)' <FunctionToPointerDecay>
|         |   | `-DeclRefExpr 0x12802d1c8 <col:23> 'int (int)' Function 0x12802ab08 'isspace' 'int (int)'
|         |   `-ImplicitCastExpr 0x12802d310 <col:31, col:52> 'int' <IntegralCast>
|         |     `-CStyleCastExpr 0x12802d2a8 <col:31, col:52> 'unsigned char' <IntegralCast>
|         |       `-ImplicitCastExpr 0x12802d290 <col:46, col:52> 'char' <LValueToRValue> part_of_explicit_cast
|         |         `-ArraySubscriptExpr 0x12802d258 <col:46, col:52> 'char' lvalue
|         |           |-ImplicitCastExpr 0x12802d240 <col:46> 'char *' <LValueToRValue>
|         |           | `-DeclRefExpr 0x12802d1e8 <col:46> 'char *' lvalue Var 0x128027750 'str' 'char *'
|         |           `-UnaryOperator 0x12802d228 <col:50, col:51> 'int' prefix '-'
|         |             `-IntegerLiteral 0x12802d208 <col:51> 'int' 1
|         `-BinaryOperator 0x12802d3e8 <line:94:4, col:15> 'char' '='
|           |-UnaryOperator 0x12802d3a0 <col:4, col:11> 'char' lvalue prefix '*' cannot overflow
|           | `-ParenExpr 0x12802d380 <col:5, col:11> 'char *'
|           |   `-UnaryOperator 0x12802d368 <col:6, col:8> 'char *' prefix '--'
|           |     `-DeclRefExpr 0x12802d348 <col:8> 'char *' lvalue Var 0x128027750 'str' 'char *'
|           `-ImplicitCastExpr 0x12802d3d0 <col:15> 'char' <IntegralCast>
|             `-CharacterLiteral 0x12802d3b8 <col:15> 'int' 0
|-FunctionDecl 0x12802ab08 <line:42:10> col:10 implicit used isspace 'int (int)' extern
| |-ParmVarDecl 0x12802ac08 <<invalid sloc>> <invalid sloc> 'int'
| |-BuiltinAttr 0x12802abb0 <<invalid sloc>> Implicit 929
| |-NoThrowAttr 0x12802ac78 <col:10> Implicit
| `-PureAttr 0x12802aca0 <col:10> Implicit
`-FunctionDecl 0x12802c8f0 <line:79:4> col:4 implicit used abort 'void (void) __attribute__((noreturn))' extern
  `-BuiltinAttr 0x12802c998 <<invalid sloc>> Implicit 867
