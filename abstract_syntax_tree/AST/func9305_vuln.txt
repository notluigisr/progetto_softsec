TranslationUnitDecl 0x139055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1390564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x139055bd0 '__int128'
|-TypedefDecl 0x139056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x139055bf0 'unsigned __int128'
|-TypedefDecl 0x139126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x139126000 'struct __NSConstantString_tag'
|   `-Record 0x139056580 '__NSConstantString_tag'
|-TypedefDecl 0x139126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x139055d90 '__SVInt8_t'
|-TypedefDecl 0x139126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x139055db0 '__SVInt16_t'
|-TypedefDecl 0x139126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x139055dd0 '__SVInt32_t'
|-TypedefDecl 0x1391263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x139055df0 '__SVInt64_t'
|-TypedefDecl 0x139126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x139055e10 '__SVUint8_t'
|-TypedefDecl 0x1391264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x139055e30 '__SVUint16_t'
|-TypedefDecl 0x139126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x139055e50 '__SVUint32_t'
|-TypedefDecl 0x139126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x139055e70 '__SVUint64_t'
|-TypedefDecl 0x1391265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x139055e90 '__SVFloat16_t'
|-TypedefDecl 0x139126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x139055eb0 '__SVFloat32_t'
|-TypedefDecl 0x1391266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x139055ed0 '__SVFloat64_t'
|-TypedefDecl 0x139126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x139055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x139126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x139055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1391267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x139055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x139126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x139055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1391268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x139055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x139126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x139055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x139126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x139055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1391269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x139055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x139126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x139055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x139126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x139056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x139126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x139056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x139126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x139056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x139126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x139056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x139126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x139056090 '__clang_svint8x3_t'
|-TypedefDecl 0x139126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1390560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x139126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1390560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x139126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1390560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x139126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x139056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x139126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x139056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x139126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x139056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x139126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x139056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x139126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x139056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x139127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1390561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x139127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1390561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1391278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1390561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x139127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x139056210 '__clang_svint8x4_t'
|-TypedefDecl 0x1391279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x139056230 '__clang_svint16x4_t'
|-TypedefDecl 0x139127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x139056250 '__clang_svint32x4_t'
|-TypedefDecl 0x139127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x139056270 '__clang_svint64x4_t'
|-TypedefDecl 0x139127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x139056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x139127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1390562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x139127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1390562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x139127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1390562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x139127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x139056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x139127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x139056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x139127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x139056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x139127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x139056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x139127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x139056390 '__SVBool_t'
|-TypedefDecl 0x139127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1390563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x139127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1390563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x139127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1390563f0 '__SVCount_t'
|-TypedefDecl 0x139127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x139127fb0 'char *'
|   `-BuiltinType 0x1390556b0 'char'
|-TypedefDecl 0x139128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x139127fb0 'char *'
|   `-BuiltinType 0x1390556b0 'char'
|-FunctionDecl 0x1391281a8 <dataset_diviso_filec/func9305_vuln.c:1:1, line:63:1> line:1:1 cvtchar 'int (const char *)'
| |-ParmVarDecl 0x1391280d8 <col:9, col:30> col:30 used sp 'const char *' register
| `-CompoundStmt 0x139145338 <line:3:1, line:63:1>
|   |-DeclStmt 0x139128358 <line:4:5, col:24>
|   | `-VarDecl 0x1391282b8 <col:5, col:23> col:19 used c 'unsigned char' cinit
|   |   `-ImplicitCastExpr 0x139128340 <col:23> 'unsigned char' <IntegralCast>
|   |     `-IntegerLiteral 0x139128320 <col:23> 'int' 0
|   |-DeclStmt 0x1391283f0 <line:5:5, col:12>
|   | `-VarDecl 0x139128388 <col:5, col:9> col:9 used len 'int'
|   |-SwitchStmt 0x139128488 <line:7:5, line:48:5>
|   | |-ImplicitCastExpr 0x139128470 <line:7:13, col:14> 'int' <IntegralCast>
|   | | `-ImplicitCastExpr 0x139128458 <col:13, col:14> 'char' <LValueToRValue>
|   | |   `-UnaryOperator 0x139128440 <col:13, col:14> 'const char' lvalue prefix '*' cannot overflow
|   | |     `-ImplicitCastExpr 0x139128428 <col:14> 'const char *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x139128408 <col:14> 'const char *' lvalue ParmVar 0x1391280d8 'sp' 'const char *'
|   | `-CompoundStmt 0x139143f38 <col:18, line:48:5>
|   |   |-CaseStmt 0x1391284e0 <line:8:5, line:35:2>
|   |   | |-ConstantExpr 0x1391284c8 <line:8:10> 'int'
|   |   | | `-CharacterLiteral 0x1391284b0 <col:10> 'int' 92
|   |   | `-SwitchStmt 0x139128588 <line:9:2, line:35:2>
|   |   |   |-ImplicitCastExpr 0x139128570 <line:9:10, col:13> 'int' <IntegralCast>
|   |   |   | `-ImplicitCastExpr 0x139128558 <col:10, col:13> 'char' <LValueToRValue>
|   |   |   |   `-UnaryOperator 0x139128540 <col:10, col:13> 'const char' lvalue prefix '*' cannot overflow
|   |   |   |     `-UnaryOperator 0x139128528 <col:11, col:13> 'const char *' prefix '++'
|   |   |   |       `-DeclRefExpr 0x139128508 <col:13> 'const char *' lvalue ParmVar 0x1391280d8 'sp' 'const char *'
|   |   |   `-CompoundStmt 0x139143878 <col:17, line:35:2>
|   |   |     |-CaseStmt 0x1391285e0 <line:10:2, line:14:19>
|   |   |     | |-ConstantExpr 0x1391285c8 <line:10:7> 'int'
|   |   |     | | `-CharacterLiteral 0x1391285b0 <col:7> 'int' 39
|   |   |     | `-CaseStmt 0x139128638 <line:11:2, line:14:19>
|   |   |     |   |-ConstantExpr 0x139128620 <line:11:7> 'int'
|   |   |     |   | `-CharacterLiteral 0x139128608 <col:7> 'int' 36
|   |   |     |   `-CaseStmt 0x139128690 <line:12:2, line:14:19>
|   |   |     |     |-ConstantExpr 0x139128678 <line:12:7> 'int'
|   |   |     |     | `-CharacterLiteral 0x139128660 <col:7> 'int' 92
|   |   |     |     `-CaseStmt 0x1391286e8 <line:13:2, line:14:19>
|   |   |     |       |-ConstantExpr 0x1391286d0 <line:13:7> 'int'
|   |   |     |       | `-CharacterLiteral 0x1391286b8 <col:7> 'int' 37
|   |   |     |       `-BinaryOperator 0x139140be8 <line:14:6, col:19> 'unsigned char' '='
|   |   |     |         |-DeclRefExpr 0x139128710 <col:6> 'unsigned char' lvalue Var 0x1391282b8 'c' 'unsigned char'
|   |   |     |         `-ImplicitCastExpr 0x139140bd0 <col:10, col:19> 'unsigned char' <IntegralCast>
|   |   |     |           `-CallExpr 0x139140b78 <col:10, col:19> 'int'
|   |   |     |             |-ImplicitCastExpr 0x139140b60 <col:10> 'int (*)()' <FunctionToPointerDecay>
|   |   |     |             | `-DeclRefExpr 0x139140ab8 <col:10> 'int ()' Function 0x139140a00 'UChar' 'int ()'
|   |   |     |             `-ImplicitCastExpr 0x139140bb8 <col:16, col:17> 'int' <IntegralCast>
|   |   |     |               `-ImplicitCastExpr 0x139140ba0 <col:16, col:17> 'char' <LValueToRValue>
|   |   |     |                 `-UnaryOperator 0x139140b10 <col:16, col:17> 'const char' lvalue prefix '*' cannot overflow
|   |   |     |                   `-ImplicitCastExpr 0x139140af8 <col:17> 'const char *' <LValueToRValue>
|   |   |     |                     `-DeclRefExpr 0x139140ad8 <col:17> 'const char *' lvalue ParmVar 0x1391280d8 'sp' 'const char *'
|   |   |     |-BinaryOperator 0x139140c48 <line:15:6, col:12> 'int' '='
|   |   |     | |-DeclRefExpr 0x139140c08 <col:6> 'int' lvalue Var 0x139128388 'len' 'int'
|   |   |     | `-IntegerLiteral 0x139140c28 <col:12> 'int' 2
|   |   |     |-BreakStmt 0x139140c68 <line:16:6>
|   |   |     |-CaseStmt 0x139140ca0 <line:17:2, line:18:10>
|   |   |     | |-ConstantExpr 0x139140c88 <line:17:7> 'int'
|   |   |     | | `-CharacterLiteral 0x139140c70 <col:7> 'int' 0
|   |   |     | `-BinaryOperator 0x139140d18 <line:18:6, col:10> 'unsigned char' '='
|   |   |     |   |-DeclRefExpr 0x139140cc8 <col:6> 'unsigned char' lvalue Var 0x1391282b8 'c' 'unsigned char'
|   |   |     |   `-ImplicitCastExpr 0x139140d00 <col:10> 'unsigned char' <IntegralCast>
|   |   |     |     `-CharacterLiteral 0x139140ce8 <col:10> 'int' 92
|   |   |     |-BinaryOperator 0x139140d78 <line:19:6, col:12> 'int' '='
|   |   |     | |-DeclRefExpr 0x139140d38 <col:6> 'int' lvalue Var 0x139128388 'len' 'int'
|   |   |     | `-IntegerLiteral 0x139140d58 <col:12> 'int' 1
|   |   |     |-BreakStmt 0x139140d98 <line:20:6>
|   |   |     |-CaseStmt 0x139140dd0 <line:21:2, line:25:12>
|   |   |     | |-ConstantExpr 0x139140db8 <line:21:7> 'int'
|   |   |     | | `-CharacterLiteral 0x139140da0 <col:7> 'int' 48
|   |   |     | `-CaseStmt 0x139140e28 <line:22:2, line:25:12>
|   |   |     |   |-ConstantExpr 0x139140e10 <line:22:7> 'int'
|   |   |     |   | `-CharacterLiteral 0x139140df8 <col:7> 'int' 49
|   |   |     |   `-CaseStmt 0x139140e80 <line:23:2, line:25:12>
|   |   |     |     |-ConstantExpr 0x139140e68 <line:23:7> 'int'
|   |   |     |     | `-CharacterLiteral 0x139140e50 <col:7> 'int' 50
|   |   |     |     `-CaseStmt 0x139140ed8 <line:24:2, line:25:12>
|   |   |     |       |-ConstantExpr 0x139140ec0 <line:24:7> 'int'
|   |   |     |       | `-CharacterLiteral 0x139140ea8 <col:7> 'int' 51
|   |   |     |       `-BinaryOperator 0x139140f40 <line:25:6, col:12> 'int' '='
|   |   |     |         |-DeclRefExpr 0x139140f00 <col:6> 'int' lvalue Var 0x139128388 'len' 'int'
|   |   |     |         `-IntegerLiteral 0x139140f20 <col:12> 'int' 1
|   |   |     |-WhileStmt 0x139141988 <line:26:6, line:29:6>
|   |   |     | |-CallExpr 0x1391416c8 <line:26:13, col:31> 'int'
|   |   |     | | |-ImplicitCastExpr 0x1391416b0 <col:13> 'int (*)(int)' <FunctionToPointerDecay>
|   |   |     | | | `-DeclRefExpr 0x139141580 <col:13> 'int (int)' Function 0x1391413c0 'isdigit' 'int (int)'
|   |   |     | | `-CallExpr 0x139141628 <col:21, col:30> 'int'
|   |   |     | |   |-ImplicitCastExpr 0x139141610 <col:21> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | |   | `-DeclRefExpr 0x1391415a0 <col:21> 'int ()' Function 0x139140a00 'UChar' 'int ()'
|   |   |     | |   `-ImplicitCastExpr 0x139141668 <col:27, col:28> 'int' <IntegralCast>
|   |   |     | |     `-ImplicitCastExpr 0x139141650 <col:27, col:28> 'char' <LValueToRValue>
|   |   |     | |       `-UnaryOperator 0x1391415f8 <col:27, col:28> 'const char' lvalue prefix '*' cannot overflow
|   |   |     | |         `-ImplicitCastExpr 0x1391415e0 <col:28> 'const char *' <LValueToRValue>
|   |   |     | |           `-DeclRefExpr 0x1391415c0 <col:28> 'const char *' lvalue ParmVar 0x1391280d8 'sp' 'const char *'
|   |   |     | `-CompoundStmt 0x139141968 <col:34, line:29:6>
|   |   |     |   |-BinaryOperator 0x139141910 <line:27:3, col:34> 'unsigned char' '='
|   |   |     |   | |-DeclRefExpr 0x1391416f0 <col:3> 'unsigned char' lvalue Var 0x1391282b8 'c' 'unsigned char'
|   |   |     |   | `-ImplicitCastExpr 0x1391418f8 <col:7, col:34> 'unsigned char' <IntegralCast>
|   |   |     |   |   `-CallExpr 0x1391418d0 <col:7, col:34> 'int'
|   |   |     |   |     |-ImplicitCastExpr 0x1391418b8 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   |   |     |   |     | `-DeclRefExpr 0x139141710 <col:7> 'int ()' Function 0x139140a00 'UChar' 'int ()'
|   |   |     |   |     `-BinaryOperator 0x139141898 <col:13, col:33> 'int' '+'
|   |   |     |   |       |-BinaryOperator 0x1391417a0 <col:13, col:17> 'int' '*'
|   |   |     |   |       | |-IntegerLiteral 0x139141730 <col:13> 'int' 8
|   |   |     |   |       | `-ImplicitCastExpr 0x139141788 <col:17> 'int' <IntegralCast>
|   |   |     |   |       |   `-ImplicitCastExpr 0x139141770 <col:17> 'unsigned char' <LValueToRValue>
|   |   |     |   |       |     `-DeclRefExpr 0x139141750 <col:17> 'unsigned char' lvalue Var 0x1391282b8 'c' 'unsigned char'
|   |   |     |   |       `-ParenExpr 0x139141878 <col:21, col:33> 'int'
|   |   |     |   |         `-BinaryOperator 0x139141858 <col:22, col:30> 'int' '-'
|   |   |     |   |           |-ImplicitCastExpr 0x139141840 <col:22, col:25> 'int' <IntegralCast>
|   |   |     |   |           | `-ImplicitCastExpr 0x139141828 <col:22, col:25> 'char' <LValueToRValue>
|   |   |     |   |           |   `-UnaryOperator 0x1391417f8 <col:22, col:25> 'const char' lvalue prefix '*' cannot overflow
|   |   |     |   |           |     `-UnaryOperator 0x1391417e0 <col:23, col:25> 'const char *' postfix '++'
|   |   |     |   |           |       `-DeclRefExpr 0x1391417c0 <col:23> 'const char *' lvalue ParmVar 0x1391280d8 'sp' 'const char *'
|   |   |     |   |           `-CharacterLiteral 0x139141810 <col:30> 'int' 48
|   |   |     |   `-UnaryOperator 0x139141950 <line:28:3, col:6> 'int' postfix '++'
|   |   |     |     `-DeclRefExpr 0x139141930 <col:3> 'int' lvalue Var 0x139128388 'len' 'int'
|   |   |     |-BreakStmt 0x1391419a8 <line:30:6>
|   |   |     |-DefaultStmt 0x1391436f8 <line:31:2, line:32:19>
|   |   |     | `-BinaryOperator 0x1391436d8 <col:6, col:19> 'unsigned char' '='
|   |   |     |   |-DeclRefExpr 0x1391419b0 <col:6> 'unsigned char' lvalue Var 0x1391282b8 'c' 'unsigned char'
|   |   |     |   `-ImplicitCastExpr 0x1391436c0 <col:10, col:19> 'unsigned char' <IntegralCast>
|   |   |     |     `-CallExpr 0x139143668 <col:10, col:19> 'int'
|   |   |     |       |-ImplicitCastExpr 0x139143650 <col:10> 'int (*)()' <FunctionToPointerDecay>
|   |   |     |       | `-DeclRefExpr 0x1391419d0 <col:10> 'int ()' Function 0x139140a00 'UChar' 'int ()'
|   |   |     |       `-ImplicitCastExpr 0x1391436a8 <col:16, col:17> 'int' <IntegralCast>
|   |   |     |         `-ImplicitCastExpr 0x139143690 <col:16, col:17> 'char' <LValueToRValue>
|   |   |     |           `-UnaryOperator 0x139143638 <col:16, col:17> 'const char' lvalue prefix '*' cannot overflow
|   |   |     |             `-ImplicitCastExpr 0x139143620 <col:17> 'const char *' <LValueToRValue>
|   |   |     |               `-DeclRefExpr 0x139143600 <col:17> 'const char *' lvalue ParmVar 0x1391280d8 'sp' 'const char *'
|   |   |     |-BinaryOperator 0x139143850 <line:33:6, col:30> 'int' '='
|   |   |     | |-DeclRefExpr 0x139143718 <col:6> 'int' lvalue Var 0x139128388 'len' 'int'
|   |   |     | `-ConditionalOperator 0x139143820 <col:12, col:30> 'int'
|   |   |     |   |-ParenExpr 0x1391437c0 <col:12, col:22> 'int'
|   |   |     |   | `-BinaryOperator 0x1391437a0 <col:13, col:18> 'int' '!='
|   |   |     |   |   |-ImplicitCastExpr 0x139143788 <col:13> 'int' <IntegralCast>
|   |   |     |   |   | `-ImplicitCastExpr 0x139143770 <col:13> 'unsigned char' <LValueToRValue>
|   |   |     |   |   |   `-DeclRefExpr 0x139143738 <col:13> 'unsigned char' lvalue Var 0x1391282b8 'c' 'unsigned char'
|   |   |     |   |   `-CharacterLiteral 0x139143758 <col:18> 'int' 0
|   |   |     |   |-IntegerLiteral 0x1391437e0 <col:26> 'int' 2
|   |   |     |   `-IntegerLiteral 0x139143800 <col:30> 'int' 1
|   |   |     `-BreakStmt 0x139143870 <line:34:6>
|   |   |-BreakStmt 0x1391438e8 <line:36:2>
|   |   |-CaseStmt 0x139143920 <line:37:5, line:38:17>
|   |   | |-ConstantExpr 0x139143908 <line:37:10> 'int'
|   |   | | `-CharacterLiteral 0x1391438f0 <col:10> 'int' 94
|   |   | `-BinaryOperator 0x139143a60 <line:38:2, col:17> 'unsigned char' '='
|   |   |   |-DeclRefExpr 0x139143948 <col:2> 'unsigned char' lvalue Var 0x1391282b8 'c' 'unsigned char'
|   |   |   `-ImplicitCastExpr 0x139143a48 <col:6, col:17> 'unsigned char' <IntegralCast>
|   |   |     `-CallExpr 0x1391439f0 <col:6, col:17> 'int'
|   |   |       |-ImplicitCastExpr 0x1391439d8 <col:6> 'int (*)()' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x139143968 <col:6> 'int ()' Function 0x139140a00 'UChar' 'int ()'
|   |   |       `-ImplicitCastExpr 0x139143a30 <col:12, col:15> 'int' <IntegralCast>
|   |   |         `-ImplicitCastExpr 0x139143a18 <col:12, col:15> 'char' <LValueToRValue>
|   |   |           `-UnaryOperator 0x1391439c0 <col:12, col:15> 'const char' lvalue prefix '*' cannot overflow
|   |   |             `-UnaryOperator 0x1391439a8 <col:13, col:15> 'const char *' prefix '++'
|   |   |               `-DeclRefExpr 0x139143988 <col:15> 'const char *' lvalue ParmVar 0x1391280d8 'sp' 'const char *'
|   |   |-IfStmt 0x139143bf0 <line:39:2, line:42:11> has_else
|   |   | |-BinaryOperator 0x139143ae8 <line:39:6, col:11> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x139143ad0 <col:6> 'int' <IntegralCast>
|   |   | | | `-ImplicitCastExpr 0x139143ab8 <col:6> 'unsigned char' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x139143a80 <col:6> 'unsigned char' lvalue Var 0x1391282b8 'c' 'unsigned char'
|   |   | | `-CharacterLiteral 0x139143aa0 <col:11> 'int' 63
|   |   | |-BinaryOperator 0x139143b60 <line:40:6, col:10> 'unsigned char' '='
|   |   | | |-DeclRefExpr 0x139143b08 <col:6> 'unsigned char' lvalue Var 0x1391282b8 'c' 'unsigned char'
|   |   | | `-ImplicitCastExpr 0x139143b48 <col:10> 'unsigned char' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x139143b28 <col:10> 'int' 127
|   |   | `-CompoundAssignOperator 0x139143bc0 <line:42:6, col:11> 'unsigned char' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |   |-DeclRefExpr 0x139143b80 <col:6> 'unsigned char' lvalue Var 0x1391282b8 'c' 'unsigned char'
|   |   |   `-IntegerLiteral 0x139143ba0 <col:11> 'int' 31
|   |   |-BinaryOperator 0x139143c60 <line:43:2, col:8> 'int' '='
|   |   | |-DeclRefExpr 0x139143c20 <col:2> 'int' lvalue Var 0x139128388 'len' 'int'
|   |   | `-IntegerLiteral 0x139143c40 <col:8> 'int' 2
|   |   |-BreakStmt 0x139143c80 <line:44:2>
|   |   |-DefaultStmt 0x139143dc0 <line:45:5, line:46:15>
|   |   | `-BinaryOperator 0x139143da0 <col:2, col:15> 'unsigned char' '='
|   |   |   |-DeclRefExpr 0x139143c88 <col:2> 'unsigned char' lvalue Var 0x1391282b8 'c' 'unsigned char'
|   |   |   `-ImplicitCastExpr 0x139143d88 <col:6, col:15> 'unsigned char' <IntegralCast>
|   |   |     `-CallExpr 0x139143d30 <col:6, col:15> 'int'
|   |   |       |-ImplicitCastExpr 0x139143d18 <col:6> 'int (*)()' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x139143ca8 <col:6> 'int ()' Function 0x139140a00 'UChar' 'int ()'
|   |   |       `-ImplicitCastExpr 0x139143d70 <col:12, col:13> 'int' <IntegralCast>
|   |   |         `-ImplicitCastExpr 0x139143d58 <col:12, col:13> 'char' <LValueToRValue>
|   |   |           `-UnaryOperator 0x139143d00 <col:12, col:13> 'const char' lvalue prefix '*' cannot overflow
|   |   |             `-ImplicitCastExpr 0x139143ce8 <col:13> 'const char *' <LValueToRValue>
|   |   |               `-DeclRefExpr 0x139143cc8 <col:13> 'const char *' lvalue ParmVar 0x1391280d8 'sp' 'const char *'
|   |   `-BinaryOperator 0x139143f18 <line:47:2, col:26> 'int' '='
|   |     |-DeclRefExpr 0x139143de0 <col:2> 'int' lvalue Var 0x139128388 'len' 'int'
|   |     `-ConditionalOperator 0x139143ee8 <col:8, col:26> 'int'
|   |       |-ParenExpr 0x139143e88 <col:8, col:18> 'int'
|   |       | `-BinaryOperator 0x139143e68 <col:9, col:14> 'int' '!='
|   |       |   |-ImplicitCastExpr 0x139143e50 <col:9> 'int' <IntegralCast>
|   |       |   | `-ImplicitCastExpr 0x139143e38 <col:9> 'unsigned char' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x139143e00 <col:9> 'unsigned char' lvalue Var 0x1391282b8 'c' 'unsigned char'
|   |       |   `-CharacterLiteral 0x139143e20 <col:14> 'int' 0
|   |       |-IntegerLiteral 0x139143ea8 <col:22> 'int' 1
|   |       `-IntegerLiteral 0x139143ec8 <col:26> 'int' 0
|   |-IfStmt 0x1391452c0 <line:49:5, line:61:5> has_else
|   | |-BinaryOperator 0x139144478 <line:49:9, col:66> 'int' '&&'
|   | | |-BinaryOperator 0x1391443d0 <col:9, col:53> 'int' '&&'
|   | | | |-BinaryOperator 0x139144328 <col:9, col:40> 'int' '&&'
|   | | | | |-BinaryOperator 0x139144280 <col:9, col:28> 'int' '&&'
|   | | | | | |-CallExpr 0x1391441a0 <col:9, col:18> 'int'
|   | | | | | | |-ImplicitCastExpr 0x139144188 <col:9> 'int (*)(int)' <FunctionToPointerDecay>
|   | | | | | | | `-DeclRefExpr 0x139144148 <col:9> 'int (int)' Function 0x139143f88 'isgraph' 'int (int)'
|   | | | | | | `-ImplicitCastExpr 0x1391441e0 <col:17> 'int' <IntegralCast>
|   | | | | | |   `-ImplicitCastExpr 0x1391441c8 <col:17> 'unsigned char' <LValueToRValue>
|   | | | | | |     `-DeclRefExpr 0x139144168 <col:17> 'unsigned char' lvalue Var 0x1391282b8 'c' 'unsigned char'
|   | | | | | `-BinaryOperator 0x139144260 <col:23, col:28> 'int' '!='
|   | | | | |   |-ImplicitCastExpr 0x139144248 <col:23> 'int' <IntegralCast>
|   | | | | |   | `-ImplicitCastExpr 0x139144230 <col:23> 'unsigned char' <LValueToRValue>
|   | | | | |   |   `-DeclRefExpr 0x1391441f8 <col:23> 'unsigned char' lvalue Var 0x1391282b8 'c' 'unsigned char'
|   | | | | |   `-CharacterLiteral 0x139144218 <col:28> 'int' 44
|   | | | | `-BinaryOperator 0x139144308 <col:35, col:40> 'int' '!='
|   | | | |   |-ImplicitCastExpr 0x1391442f0 <col:35> 'int' <IntegralCast>
|   | | | |   | `-ImplicitCastExpr 0x1391442d8 <col:35> 'unsigned char' <LValueToRValue>
|   | | | |   |   `-DeclRefExpr 0x1391442a0 <col:35> 'unsigned char' lvalue Var 0x1391282b8 'c' 'unsigned char'
|   | | | |   `-CharacterLiteral 0x1391442c0 <col:40> 'int' 39
|   | | | `-BinaryOperator 0x1391443b0 <col:48, col:53> 'int' '!='
|   | | |   |-ImplicitCastExpr 0x139144398 <col:48> 'int' <IntegralCast>
|   | | |   | `-ImplicitCastExpr 0x139144380 <col:48> 'unsigned char' <LValueToRValue>
|   | | |   |   `-DeclRefExpr 0x139144348 <col:48> 'unsigned char' lvalue Var 0x1391282b8 'c' 'unsigned char'
|   | | |   `-CharacterLiteral 0x139144368 <col:53> 'int' 92
|   | | `-BinaryOperator 0x139144458 <col:61, col:66> 'int' '!='
|   | |   |-ImplicitCastExpr 0x139144440 <col:61> 'int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x139144428 <col:61> 'unsigned char' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x1391443f0 <col:61> 'unsigned char' lvalue Var 0x1391282b8 'c' 'unsigned char'
|   | |   `-CharacterLiteral 0x139144410 <col:66> 'int' 58
|   | |-CompoundStmt 0x139144c38 <col:71, line:53:5>
|   | `-IfStmt 0x1391452a0 <col:12, line:61:5>
|   |   |-BinaryOperator 0x139144cb0 <line:53:16, col:21> 'int' '!='
|   |   | |-ImplicitCastExpr 0x139144c98 <col:16> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x139144c80 <col:16> 'unsigned char' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x139144c48 <col:16> 'unsigned char' lvalue Var 0x1391282b8 'c' 'unsigned char'
|   |   | `-CharacterLiteral 0x139144c68 <col:21> 'int' 0
|   |   `-CompoundStmt 0x139145290 <col:27, line:61:5>
|   `-ReturnStmt 0x139145328 <line:62:5, col:12>
|     `-ImplicitCastExpr 0x139145310 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1391452f0 <col:12> 'int' lvalue Var 0x139128388 'len' 'int'
|-FunctionDecl 0x1391413c0 <line:26:13> col:13 implicit used isdigit 'int (int)' extern
| |-ParmVarDecl 0x1391414c0 <<invalid sloc>> <invalid sloc> 'int'
| |-BuiltinAttr 0x139141468 <<invalid sloc>> Implicit 924
| |-NoThrowAttr 0x139141530 <col:13> Implicit
| `-PureAttr 0x139141558 <col:13> Implicit
`-FunctionDecl 0x139143f88 <line:49:9> col:9 implicit used isgraph 'int (int)' extern
  |-ParmVarDecl 0x139144088 <<invalid sloc>> <invalid sloc> 'int'
  |-BuiltinAttr 0x139144030 <<invalid sloc>> Implicit 925
  |-NoThrowAttr 0x1391440f8 <col:9> Implicit
  `-PureAttr 0x139144120 <col:9> Implicit
