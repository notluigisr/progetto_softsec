TranslationUnitDecl 0x12e055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x12e0564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x12e055bd0 '__int128'
|-TypedefDecl 0x12e056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x12e055bf0 'unsigned __int128'
|-TypedefDecl 0x12e126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12e126000 'struct __NSConstantString_tag'
|   `-Record 0x12e056580 '__NSConstantString_tag'
|-TypedefDecl 0x12e126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x12e055d90 '__SVInt8_t'
|-TypedefDecl 0x12e126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x12e055db0 '__SVInt16_t'
|-TypedefDecl 0x12e126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x12e055dd0 '__SVInt32_t'
|-TypedefDecl 0x12e1263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x12e055df0 '__SVInt64_t'
|-TypedefDecl 0x12e126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x12e055e10 '__SVUint8_t'
|-TypedefDecl 0x12e1264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x12e055e30 '__SVUint16_t'
|-TypedefDecl 0x12e126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x12e055e50 '__SVUint32_t'
|-TypedefDecl 0x12e126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x12e055e70 '__SVUint64_t'
|-TypedefDecl 0x12e1265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x12e055e90 '__SVFloat16_t'
|-TypedefDecl 0x12e126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x12e055eb0 '__SVFloat32_t'
|-TypedefDecl 0x12e1266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x12e055ed0 '__SVFloat64_t'
|-TypedefDecl 0x12e126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x12e055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12e126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x12e055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12e1267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x12e055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12e126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x12e055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12e1268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x12e055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12e126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x12e055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12e126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x12e055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12e1269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x12e055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12e126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x12e055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12e126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x12e056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12e126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x12e056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12e126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x12e056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12e126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x12e056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12e126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x12e056090 '__clang_svint8x3_t'
|-TypedefDecl 0x12e126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x12e0560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12e126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x12e0560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12e126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x12e0560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12e126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x12e056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12e126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x12e056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12e126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x12e056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12e126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x12e056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12e126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x12e056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12e127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x12e0561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12e127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x12e0561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12e1278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x12e0561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12e127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x12e056210 '__clang_svint8x4_t'
|-TypedefDecl 0x12e1279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x12e056230 '__clang_svint16x4_t'
|-TypedefDecl 0x12e127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x12e056250 '__clang_svint32x4_t'
|-TypedefDecl 0x12e127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x12e056270 '__clang_svint64x4_t'
|-TypedefDecl 0x12e127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x12e056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12e127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x12e0562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12e127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x12e0562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12e127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x12e0562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12e127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x12e056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12e127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x12e056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12e127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x12e056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12e127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x12e056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12e127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x12e056390 '__SVBool_t'
|-TypedefDecl 0x12e127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x12e0563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12e127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x12e0563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12e127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x12e0563f0 '__SVCount_t'
|-TypedefDecl 0x12e127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12e127fb0 'char *'
|   `-BuiltinType 0x12e0556b0 'char'
|-TypedefDecl 0x12e128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12e127fb0 'char *'
|   `-BuiltinType 0x12e0556b0 'char'
|-FunctionDecl 0x12e1281a8 <dataset_diviso_filec/func8822_vuln.c:1:1, line:35:1> line:1:12 parse_one_option 'int (const char *)' static
| |-ParmVarDecl 0x12e1280d8 <col:29, col:41> col:41 used option 'const char *'
| `-CompoundStmt 0x12e1434c8 <line:2:1, line:35:1>
|   |-IfStmt 0x12e143468 <line:3:2, line:32:2> has_else
|   | |-CallExpr 0x12e128528 <line:3:6, col:40> 'int'
|   | | |-ImplicitCastExpr 0x12e128510 <col:6> 'int (*)()' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x12e1283d0 <col:6> 'int ()' Function 0x12e128318 'skip_prefix' 'int ()'
|   | | |-ImplicitCastExpr 0x12e128560 <col:18> 'const char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x12e1283f0 <col:18> 'const char *' lvalue ParmVar 0x12e1280d8 'option' 'const char *'
|   | | |-ImplicitCastExpr 0x12e128578 <col:26> 'char *' <ArrayToPointerDecay>
|   | | | `-StringLiteral 0x12e128450 <col:26> 'char[4]' lvalue "STR"
|   | | `-UnaryOperator 0x12e1284c0 <col:33, col:34> 'const char **' prefix '&' cannot overflow
|   | |   `-DeclRefExpr 0x12e128470 <col:34> 'const char *' lvalue ParmVar 0x12e1280d8 'option' 'const char *'
|   | |-CompoundStmt 0x12e141e60 <col:43, line:15:2>
|   | | |-DeclStmt 0x12e128610 <line:4:3, col:18>
|   | | | `-VarDecl 0x12e1285a8 <col:3, col:17> col:17 used v 'unsigned long'
|   | | |-IfStmt 0x12e141860 <line:5:3, line:6:11>
|   | | | |-UnaryOperator 0x12e141818 <line:5:7, col:34> 'int' prefix '!' cannot overflow
|   | | | | `-CallExpr 0x12e1287d0 <col:8, col:34> 'int'
|   | | | |   |-ImplicitCastExpr 0x12e1287b8 <col:8> 'int (*)()' <FunctionToPointerDecay>
|   | | | |   | `-DeclRefExpr 0x12e128708 <col:8> 'int ()' Function 0x12e128650 'git_parse_ulong' 'int ()'
|   | | | |   |-ImplicitCastExpr 0x12e141800 <col:24> 'const char *' <LValueToRValue>
|   | | | |   | `-DeclRefExpr 0x12e128728 <col:24> 'const char *' lvalue ParmVar 0x12e1280d8 'option' 'const char *'
|   | | | |   `-UnaryOperator 0x12e1287a0 <col:32, col:33> 'unsigned long *' prefix '&' cannot overflow
|   | | | |     `-DeclRefExpr 0x12e128748 <col:33> 'unsigned long' lvalue Var 0x12e1285a8 'v' 'unsigned long'
|   | | | `-ReturnStmt 0x12e141850 <line:6:4, col:11>
|   | | |   `-IntegerLiteral 0x12e141830 <col:11> 'int' 0
|   | | `-IfStmt 0x12e141e10 <line:7:3, line:13:3> has_else
|   | |   |-BinaryOperator 0x12e1418f0 <line:7:7, col:11> 'int' '<'
|   | |   | |-ImplicitCastExpr 0x12e1418c0 <col:7> 'unsigned long' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x12e141880 <col:7> 'unsigned long' lvalue Var 0x12e1285a8 'v' 'unsigned long'
|   | |   | `-ImplicitCastExpr 0x12e1418d8 <col:11> 'unsigned long' <IntegralCast>
|   | |   |   `-IntegerLiteral 0x12e1418a0 <col:11> 'int' 8192
|   | |   |-CompoundStmt 0x12e141b90 <col:17, line:10:3>
|   | |   | |-CallExpr 0x12e141a68 <line:8:4, col:20> 'int'
|   | |   | | |-ImplicitCastExpr 0x12e141a50 <col:4> 'int (*)()' <FunctionToPointerDecay>
|   | |   | | | `-DeclRefExpr 0x12e1419f0 <col:4> 'int ()' Function 0x12e141938 'warning' 'int ()'
|   | |   | | |-ImplicitCastExpr 0x12e141a98 <col:12> 'char *' <ArrayToPointerDecay>
|   | |   | | | `-StringLiteral 0x12e141a10 <col:12> 'char[4]' lvalue "STR"
|   | |   | | `-ImplicitCastExpr 0x12e141ab0 <col:19> 'unsigned long' <LValueToRValue>
|   | |   | |   `-DeclRefExpr 0x12e141a30 <col:19> 'unsigned long' lvalue Var 0x12e1285a8 'v' 'unsigned long'
|   | |   | `-CompoundAssignOperator 0x12e141b60 <line:9:4, col:16> 'unsigned long' '*=' ComputeLHSTy='unsigned long' ComputeResultTy='unsigned long'
|   | |   |   |-DeclRefExpr 0x12e141ac8 <col:4> 'unsigned long' lvalue Var 0x12e1285a8 'v' 'unsigned long'
|   | |   |   `-ImplicitCastExpr 0x12e141b48 <col:9, col:16> 'unsigned long' <IntegralCast>
|   | |   |     `-BinaryOperator 0x12e141b28 <col:9, col:16> 'int' '*'
|   | |   |       |-IntegerLiteral 0x12e141ae8 <col:9> 'int' 1024
|   | |   |       `-IntegerLiteral 0x12e141b08 <col:16> 'int' 1024
|   | |   `-IfStmt 0x12e141df0 <line:10:10, line:13:3>
|   | |     |-BinaryOperator 0x12e141c60 <line:10:14, col:25> 'int' '<'
|   | |     | |-ImplicitCastExpr 0x12e141c30 <col:14> 'unsigned long' <LValueToRValue>
|   | |     | | `-DeclRefExpr 0x12e141bb0 <col:14> 'unsigned long' lvalue Var 0x12e1285a8 'v' 'unsigned long'
|   | |     | `-ImplicitCastExpr 0x12e141c48 <col:18, col:25> 'unsigned long' <IntegralCast>
|   | |     |   `-BinaryOperator 0x12e141c10 <col:18, col:25> 'int' '*'
|   | |     |     |-IntegerLiteral 0x12e141bd0 <col:18> 'int' 1024
|   | |     |     `-IntegerLiteral 0x12e141bf0 <col:25> 'int' 1024
|   | |     `-CompoundStmt 0x12e141dd0 <col:31, line:13:3>
|   | |       |-CallExpr 0x12e141cd8 <line:11:4, col:17> 'int'
|   | |       | |-ImplicitCastExpr 0x12e141cc0 <col:4> 'int (*)()' <FunctionToPointerDecay>
|   | |       | | `-DeclRefExpr 0x12e141c80 <col:4> 'int ()' Function 0x12e141938 'warning' 'int ()'
|   | |       | `-ImplicitCastExpr 0x12e141d00 <col:12> 'char *' <ArrayToPointerDecay>
|   | |       |   `-StringLiteral 0x12e141ca0 <col:12> 'char[4]' lvalue "STR"
|   | |       `-BinaryOperator 0x12e141db0 <line:12:4, col:15> 'unsigned long' '='
|   | |         |-DeclRefExpr 0x12e141d18 <col:4> 'unsigned long' lvalue Var 0x12e1285a8 'v' 'unsigned long'
|   | |         `-ImplicitCastExpr 0x12e141d98 <col:8, col:15> 'unsigned long' <IntegralCast>
|   | |           `-BinaryOperator 0x12e141d78 <col:8, col:15> 'int' '*'
|   | |             |-IntegerLiteral 0x12e141d38 <col:8> 'int' 1024
|   | |             `-IntegerLiteral 0x12e141d58 <col:15> 'int' 1024
|   | `-IfStmt 0x12e143438 <line:15:9, line:32:2> has_else
|   |   |-CallExpr 0x12e141f38 <line:15:13, col:47> 'int'
|   |   | |-ImplicitCastExpr 0x12e141f20 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x12e141e88 <col:13> 'int ()' Function 0x12e128318 'skip_prefix' 'int ()'
|   |   | |-ImplicitCastExpr 0x12e141f70 <col:25> 'const char *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x12e141ea8 <col:25> 'const char *' lvalue ParmVar 0x12e1280d8 'option' 'const char *'
|   |   | |-ImplicitCastExpr 0x12e141f88 <col:33> 'char *' <ArrayToPointerDecay>
|   |   | | `-StringLiteral 0x12e141ec8 <col:33> 'char[4]' lvalue "STR"
|   |   | `-UnaryOperator 0x12e141f08 <col:40, col:41> 'const char **' prefix '&' cannot overflow
|   |   |   `-DeclRefExpr 0x12e141ee8 <col:41> 'const char *' lvalue ParmVar 0x12e1280d8 'option' 'const char *'
|   |   |-CompoundStmt 0x12e142198 <col:50, line:20:2>
|   |   | |-DeclStmt 0x12e142020 <line:16:3, col:18>
|   |   | | `-VarDecl 0x12e141fb8 <col:3, col:17> col:17 used v 'unsigned long'
|   |   | `-IfStmt 0x12e142158 <line:17:3, line:18:11>
|   |   |   |-UnaryOperator 0x12e142110 <line:17:7, col:34> 'int' prefix '!' cannot overflow
|   |   |   | `-CallExpr 0x12e1420c8 <col:8, col:34> 'int'
|   |   |   |   |-ImplicitCastExpr 0x12e1420b0 <col:8> 'int (*)()' <FunctionToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x12e142038 <col:8> 'int ()' Function 0x12e128650 'git_parse_ulong' 'int ()'
|   |   |   |   |-ImplicitCastExpr 0x12e1420f8 <col:24> 'const char *' <LValueToRValue>
|   |   |   |   | `-DeclRefExpr 0x12e142058 <col:24> 'const char *' lvalue ParmVar 0x12e1280d8 'option' 'const char *'
|   |   |   |   `-UnaryOperator 0x12e142098 <col:32, col:33> 'unsigned long *' prefix '&' cannot overflow
|   |   |   |     `-DeclRefExpr 0x12e142078 <col:33> 'unsigned long' lvalue Var 0x12e141fb8 'v' 'unsigned long'
|   |   |   `-ReturnStmt 0x12e142148 <line:18:4, col:11>
|   |   |     `-IntegerLiteral 0x12e142128 <col:11> 'int' 0
|   |   `-IfStmt 0x12e143408 <line:20:9, line:32:2> has_else
|   |     |-CallExpr 0x12e142268 <line:20:13, col:47> 'int'
|   |     | |-ImplicitCastExpr 0x12e142250 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x12e1421b8 <col:13> 'int ()' Function 0x12e128318 'skip_prefix' 'int ()'
|   |     | |-ImplicitCastExpr 0x12e1422a0 <col:25> 'const char *' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x12e1421d8 <col:25> 'const char *' lvalue ParmVar 0x12e1280d8 'option' 'const char *'
|   |     | |-ImplicitCastExpr 0x12e1422b8 <col:33> 'char *' <ArrayToPointerDecay>
|   |     | | `-StringLiteral 0x12e1421f8 <col:33> 'char[4]' lvalue "STR"
|   |     | `-UnaryOperator 0x12e142238 <col:40, col:41> 'const char **' prefix '&' cannot overflow
|   |     |   `-DeclRefExpr 0x12e142218 <col:41> 'const char *' lvalue ParmVar 0x12e1280d8 'option' 'const char *'
|   |     |-CompoundStmt 0x12e142448 <col:50, line:22:2>
|   |     | `-CallExpr 0x12e142408 <line:21:3, col:22> 'int'
|   |     |   |-ImplicitCastExpr 0x12e1423f0 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x12e1423b0 <col:3> 'int ()' Function 0x12e1422f8 'option_depth' 'int ()'
|   |     |   `-ImplicitCastExpr 0x12e142430 <col:16> 'const char *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x12e1423d0 <col:16> 'const char *' lvalue ParmVar 0x12e1280d8 'option' 'const char *'
|   |     `-IfStmt 0x12e1433d8 <line:22:9, line:32:2> has_else
|   |       |-CallExpr 0x12e142510 <line:22:13, col:47> 'int'
|   |       | |-ImplicitCastExpr 0x12e1424f8 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x12e142460 <col:13> 'int ()' Function 0x12e128318 'skip_prefix' 'int ()'
|   |       | |-ImplicitCastExpr 0x12e142548 <col:25> 'const char *' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x12e142480 <col:25> 'const char *' lvalue ParmVar 0x12e1280d8 'option' 'const char *'
|   |       | |-ImplicitCastExpr 0x12e142560 <col:33> 'char *' <ArrayToPointerDecay>
|   |       | | `-StringLiteral 0x12e1424a0 <col:33> 'char[4]' lvalue "STR"
|   |       | `-UnaryOperator 0x12e1424e0 <col:40, col:41> 'const char **' prefix '&' cannot overflow
|   |       |   `-DeclRefExpr 0x12e1424c0 <col:41> 'const char *' lvalue ParmVar 0x12e1280d8 'option' 'const char *'
|   |       |-CompoundStmt 0x12e1426f0 <col:50, line:24:2>
|   |       | `-CallExpr 0x12e1426b0 <line:23:3, col:32> 'int'
|   |       |   |-ImplicitCastExpr 0x12e142698 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   |       |   | `-DeclRefExpr 0x12e142658 <col:3> 'int ()' Function 0x12e1425a0 'option_active_branches' 'int ()'
|   |       |   `-ImplicitCastExpr 0x12e1426d8 <col:26> 'const char *' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x12e142678 <col:26> 'const char *' lvalue ParmVar 0x12e1280d8 'option' 'const char *'
|   |       `-IfStmt 0x12e1433a8 <line:24:9, line:32:2> has_else
|   |         |-CallExpr 0x12e1427b8 <line:24:13, col:47> 'int'
|   |         | |-ImplicitCastExpr 0x12e1427a0 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |         | | `-DeclRefExpr 0x12e142708 <col:13> 'int ()' Function 0x12e128318 'skip_prefix' 'int ()'
|   |         | |-ImplicitCastExpr 0x12e142800 <col:25> 'const char *' <LValueToRValue>
|   |         | | `-DeclRefExpr 0x12e142728 <col:25> 'const char *' lvalue ParmVar 0x12e1280d8 'option' 'const char *'
|   |         | |-ImplicitCastExpr 0x12e142818 <col:33> 'char *' <ArrayToPointerDecay>
|   |         | | `-StringLiteral 0x12e142748 <col:33> 'char[4]' lvalue "STR"
|   |         | `-UnaryOperator 0x12e142788 <col:40, col:41> 'const char **' prefix '&' cannot overflow
|   |         |   `-DeclRefExpr 0x12e142768 <col:41> 'const char *' lvalue ParmVar 0x12e1280d8 'option' 'const char *'
|   |         |-CompoundStmt 0x12e1429a8 <col:50, line:26:2>
|   |         | `-CallExpr 0x12e142968 <line:25:3, col:34> 'int'
|   |         |   |-ImplicitCastExpr 0x12e142950 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   |         |   | `-DeclRefExpr 0x12e142910 <col:3> 'int ()' Function 0x12e142858 'option_export_pack_edges' 'int ()'
|   |         |   `-ImplicitCastExpr 0x12e142990 <col:28> 'const char *' <LValueToRValue>
|   |         |     `-DeclRefExpr 0x12e142930 <col:28> 'const char *' lvalue ParmVar 0x12e1280d8 'option' 'const char *'
|   |         `-IfStmt 0x12e143378 <line:26:9, line:32:2> has_else
|   |           |-UnaryOperator 0x12e143150 <line:26:13, col:34> 'int' prefix '!' cannot overflow
|   |           | `-CallExpr 0x12e1430d8 <col:14, col:34> 'int'
|   |           |   |-ImplicitCastExpr 0x12e1430c0 <col:14> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |           |   | `-DeclRefExpr 0x12e143000 <col:14> 'int (const char *, const char *)' Function 0x12e142e20 'strcmp' 'int (const char *, const char *)'
|   |           |   |-ImplicitCastExpr 0x12e143108 <col:21> 'const char *' <LValueToRValue>
|   |           |   | `-DeclRefExpr 0x12e143020 <col:21> 'const char *' lvalue ParmVar 0x12e1280d8 'option' 'const char *'
|   |           |   `-ImplicitCastExpr 0x12e143138 <col:29> 'const char *' <NoOp>
|   |           |     `-ImplicitCastExpr 0x12e143120 <col:29> 'char *' <ArrayToPointerDecay>
|   |           |       `-StringLiteral 0x12e143040 <col:29> 'char[4]' lvalue "STR"
|   |           |-CompoundStmt 0x12e143188 <col:37, line:28:2>
|   |           `-IfStmt 0x12e143348 <col:9, line:32:2> has_else
|   |             |-UnaryOperator 0x12e1432b8 <line:28:13, col:34> 'int' prefix '!' cannot overflow
|   |             | `-CallExpr 0x12e143240 <col:14, col:34> 'int'
|   |             |   |-ImplicitCastExpr 0x12e143228 <col:14> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |             |   | `-DeclRefExpr 0x12e143198 <col:14> 'int (const char *, const char *)' Function 0x12e142e20 'strcmp' 'int (const char *, const char *)'
|   |             |   |-ImplicitCastExpr 0x12e143270 <col:21> 'const char *' <LValueToRValue>
|   |             |   | `-DeclRefExpr 0x12e1431b8 <col:21> 'const char *' lvalue ParmVar 0x12e1280d8 'option' 'const char *'
|   |             |   `-ImplicitCastExpr 0x12e1432a0 <col:29> 'const char *' <NoOp>
|   |             |     `-ImplicitCastExpr 0x12e143288 <col:29> 'char *' <ArrayToPointerDecay>
|   |             |       `-StringLiteral 0x12e1431d8 <col:29> 'char[4]' lvalue "STR"
|   |             |-CompoundStmt 0x12e1432f0 <col:37, line:30:2>
|   |             `-CompoundStmt 0x12e143330 <col:9, line:32:2>
|   |               `-ReturnStmt 0x12e143320 <line:31:3, col:10>
|   |                 `-IntegerLiteral 0x12e143300 <col:10> 'int' 0
|   `-ReturnStmt 0x12e1434b8 <line:34:2, col:9>
|     `-IntegerLiteral 0x12e143498 <col:9> 'int' 1
`-FunctionDecl 0x12e142e20 <line:26:14> col:14 implicit used strcmp 'int (const char *, const char *)' extern
  |-ParmVarDecl 0x12e142f20 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x12e142f88 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x12e142ec8 <<invalid sloc>> Implicit 887
