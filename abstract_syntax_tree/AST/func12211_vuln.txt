TranslationUnitDecl 0x15b855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x15b8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x15b855bd0 '__int128'
|-TypedefDecl 0x15b856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x15b855bf0 'unsigned __int128'
|-TypedefDecl 0x15b926230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x15b926000 'struct __NSConstantString_tag'
|   `-Record 0x15b856580 '__NSConstantString_tag'
|-TypedefDecl 0x15b926298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x15b855d90 '__SVInt8_t'
|-TypedefDecl 0x15b926300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x15b855db0 '__SVInt16_t'
|-TypedefDecl 0x15b926368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x15b855dd0 '__SVInt32_t'
|-TypedefDecl 0x15b9263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x15b855df0 '__SVInt64_t'
|-TypedefDecl 0x15b926438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x15b855e10 '__SVUint8_t'
|-TypedefDecl 0x15b9264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x15b855e30 '__SVUint16_t'
|-TypedefDecl 0x15b926508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x15b855e50 '__SVUint32_t'
|-TypedefDecl 0x15b926570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x15b855e70 '__SVUint64_t'
|-TypedefDecl 0x15b9265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x15b855e90 '__SVFloat16_t'
|-TypedefDecl 0x15b926640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x15b855eb0 '__SVFloat32_t'
|-TypedefDecl 0x15b9266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x15b855ed0 '__SVFloat64_t'
|-TypedefDecl 0x15b926710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x15b855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x15b926778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x15b855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x15b9267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x15b855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x15b926848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x15b855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x15b9268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x15b855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x15b926918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x15b855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x15b926980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x15b855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x15b9269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x15b855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x15b926a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x15b855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x15b926ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x15b856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x15b926b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x15b856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x15b926b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x15b856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x15b926bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x15b856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x15b926c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x15b856090 '__clang_svint8x3_t'
|-TypedefDecl 0x15b926cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x15b8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x15b926d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x15b8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x15b926d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x15b8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x15b926df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x15b856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x15b926e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x15b856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x15b926ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x15b856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x15b926f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x15b856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x15b926f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x15b856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x15b927800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x15b8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x15b927868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x15b8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x15b9278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x15b8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x15b927938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x15b856210 '__clang_svint8x4_t'
|-TypedefDecl 0x15b9279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x15b856230 '__clang_svint16x4_t'
|-TypedefDecl 0x15b927a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x15b856250 '__clang_svint32x4_t'
|-TypedefDecl 0x15b927a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x15b856270 '__clang_svint64x4_t'
|-TypedefDecl 0x15b927ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x15b856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x15b927b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x15b8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x15b927ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x15b8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x15b927c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x15b8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x15b927c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x15b856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x15b927ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x15b856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x15b927d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x15b856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x15b927db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x15b856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x15b927e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x15b856390 '__SVBool_t'
|-TypedefDecl 0x15b927e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x15b8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x15b927ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x15b8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x15b927f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x15b8563f0 '__SVCount_t'
|-TypedefDecl 0x15b927ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x15b927fb0 'char *'
|   `-BuiltinType 0x15b8556b0 'char'
|-TypedefDecl 0x15b928068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x15b927fb0 'char *'
|   `-BuiltinType 0x15b8556b0 'char'
|-FunctionDecl 0x15b9281a8 <dataset_diviso_filec/func12211_vuln.c:1:1, line:21:1> line:1:1 set_cs_start 'int (char *)'
| |-ParmVarDecl 0x15b9280d8 <col:14, col:20> col:20 used line 'char *'
| `-CompoundStmt 0x15b942290 <line:2:1, line:21:1>
|   |-DeclStmt 0x15b928440 <line:3:3, col:18>
|   | |-VarDecl 0x15b9282b8 <col:3, col:9> col:9 used p 'char *'
|   | |-VarDecl 0x15b928338 <col:3, col:13> col:13 used q 'char *'
|   | `-VarDecl 0x15b9283b8 <col:3, col:17> col:17 used r 'char *'
|   `-IfStmt 0x15b942270 <line:5:3, line:20:3>
|     |-ParenExpr 0x15b940eb8 <line:5:7, col:31> 'char *'
|     | `-BinaryOperator 0x15b940e98 <col:8, col:30> 'char *' '='
|     |   |-DeclRefExpr 0x15b928458 <col:8> 'char *' lvalue Var 0x15b9282b8 'p' 'char *'
|     |   `-CallExpr 0x15b940e08 <col:12, col:30> 'char *'
|     |     |-ImplicitCastExpr 0x15b940df0 <col:12> 'char *(*)(const char *, const char *)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x15b940cf0 <col:12> 'char *(const char *, const char *)' Function 0x15b940b10 'strstr' 'char *(const char *, const char *)'
|     |     |-ImplicitCastExpr 0x15b940e50 <col:19> 'const char *' <NoOp>
|     |     | `-ImplicitCastExpr 0x15b940e38 <col:19> 'char *' <LValueToRValue>
|     |     |   `-DeclRefExpr 0x15b940d10 <col:19> 'char *' lvalue ParmVar 0x15b9280d8 'line' 'char *'
|     |     `-ImplicitCastExpr 0x15b940e80 <col:25> 'const char *' <NoOp>
|     |       `-ImplicitCastExpr 0x15b940e68 <col:25> 'char *' <ArrayToPointerDecay>
|     |         `-StringLiteral 0x15b940d70 <col:25> 'char[4]' lvalue "STR"
|     `-CompoundStmt 0x15b942238 <col:34, line:20:3>
|       |-IfStmt 0x15b941038 <line:7:5, line:8:7>
|       | |-UnaryOperator 0x15b941010 <line:7:9, col:28> 'int' prefix '!' cannot overflow
|       | | `-CallExpr 0x15b940f80 <col:10, col:28> 'char *'
|       | |   |-ImplicitCastExpr 0x15b940f68 <col:10> 'char *(*)(const char *, const char *)' <FunctionToPointerDecay>
|       | |   | `-DeclRefExpr 0x15b940ed8 <col:10> 'char *(const char *, const char *)' Function 0x15b940b10 'strstr' 'char *(const char *, const char *)'
|       | |   |-ImplicitCastExpr 0x15b940fc8 <col:17> 'const char *' <NoOp>
|       | |   | `-ImplicitCastExpr 0x15b940fb0 <col:17> 'char *' <LValueToRValue>
|       | |   |   `-DeclRefExpr 0x15b940ef8 <col:17> 'char *' lvalue ParmVar 0x15b9280d8 'line' 'char *'
|       | |   `-ImplicitCastExpr 0x15b940ff8 <col:23> 'const char *' <NoOp>
|       | |     `-ImplicitCastExpr 0x15b940fe0 <col:23> 'char *' <ArrayToPointerDecay>
|       | |       `-StringLiteral 0x15b940f18 <col:23> 'char[4]' lvalue "STR"
|       | `-ReturnStmt 0x15b941028 <line:8:7>
|       |-BinaryOperator 0x15b9410d8 <line:10:5, col:10> 'char' '='
|       | |-UnaryOperator 0x15b941090 <col:5, col:6> 'char' lvalue prefix '*' cannot overflow
|       | | `-ImplicitCastExpr 0x15b941078 <col:6> 'char *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x15b941058 <col:6> 'char *' lvalue Var 0x15b9282b8 'p' 'char *'
|       | `-ImplicitCastExpr 0x15b9410c0 <col:10> 'char' <IntegralCast>
|       |   `-CharacterLiteral 0x15b9410a8 <col:10> 'int' 0
|       |-BinaryOperator 0x15b941458 <line:11:5, col:26> 'char *' '='
|       | |-DeclRefExpr 0x15b9410f8 <col:5> 'char *' lvalue Var 0x15b928338 'q' 'char *'
|       | `-CallExpr 0x15b9413f8 <col:9, col:26> 'char *'
|       |   |-ImplicitCastExpr 0x15b9413e0 <col:9> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x15b941340 <col:9> 'char *(const char *, int)' Function 0x15b941160 'strrchr' 'char *(const char *, int)'
|       |   |-ImplicitCastExpr 0x15b941440 <col:17> 'const char *' <NoOp>
|       |   | `-ImplicitCastExpr 0x15b941428 <col:17> 'char *' <LValueToRValue>
|       |   |   `-DeclRefExpr 0x15b941360 <col:17> 'char *' lvalue ParmVar 0x15b9280d8 'line' 'char *'
|       |   `-CharacterLiteral 0x15b941380 <col:23> 'int' 47
|       |-IfStmt 0x15b942178 <line:12:5, line:18:5>
|       | |-ImplicitCastExpr 0x15b941498 <line:12:9> 'char *' <LValueToRValue>
|       | | `-DeclRefExpr 0x15b941478 <col:9> 'char *' lvalue Var 0x15b928338 'q' 'char *'
|       | `-CompoundStmt 0x15b942148 <col:12, line:18:5>
|       |   |-BinaryOperator 0x15b941540 <line:13:7, col:11> 'char *' contains-errors '='
|       |   | |-DeclRefExpr 0x15b9414b0 <col:7> 'char *' lvalue Var 0x15b9283b8 'r' 'char *'
|       |   | `-RecoveryExpr 0x15b941520 <col:11> '<dependent type>' contains-errors lvalue
|       |   |-UnaryOperator 0x15b941580 <line:14:7, col:9> 'char *' prefix '++'
|       |   | `-DeclRefExpr 0x15b941560 <col:9> 'char *' lvalue Var 0x15b928338 'q' 'char *'
|       |   |-WhileStmt 0x15b942088 <line:15:7, line:16:11>
|       |   | |-BinaryOperator 0x15b941980 <line:15:14, col:36> 'int' '&&'
|       |   | | |-UnaryOperator 0x15b9418b0 <col:14, col:25> 'int' prefix '!' cannot overflow
|       |   | | | `-CallExpr 0x15b941858 <col:15, col:25> 'int'
|       |   | | |   |-ImplicitCastExpr 0x15b941840 <col:15> 'int (*)(int)' <FunctionToPointerDecay>
|       |   | | |   | `-DeclRefExpr 0x15b941798 <col:15> 'int (int)' Function 0x15b9415d8 'isspace' 'int (int)'
|       |   | | |   `-ImplicitCastExpr 0x15b941898 <col:23, col:24> 'int' <IntegralCast>
|       |   | | |     `-ImplicitCastExpr 0x15b941880 <col:23, col:24> 'char' <LValueToRValue>
|       |   | | |       `-UnaryOperator 0x15b9417f0 <col:23, col:24> 'char' lvalue prefix '*' cannot overflow
|       |   | | |         `-ImplicitCastExpr 0x15b9417d8 <col:24> 'char *' <LValueToRValue>
|       |   | | |           `-DeclRefExpr 0x15b9417b8 <col:24> 'char *' lvalue Var 0x15b928338 'q' 'char *'
|       |   | | `-BinaryOperator 0x15b941960 <col:30, col:36> 'int' '!='
|       |   | |   |-ImplicitCastExpr 0x15b941948 <col:30, col:31> 'int' <IntegralCast>
|       |   | |   | `-ImplicitCastExpr 0x15b941930 <col:30, col:31> 'char' <LValueToRValue>
|       |   | |   |   `-UnaryOperator 0x15b941900 <col:30, col:31> 'char' lvalue prefix '*' cannot overflow
|       |   | |   |     `-ImplicitCastExpr 0x15b9418e8 <col:31> 'char *' <LValueToRValue>
|       |   | |   |       `-DeclRefExpr 0x15b9418c8 <col:31> 'char *' lvalue Var 0x15b928338 'q' 'char *'
|       |   | |   `-CharacterLiteral 0x15b941918 <col:36> 'int' 123
|       |   | `-BinaryOperator 0x15b942068 <line:16:2, col:11> 'char' '='
|       |   |   |-UnaryOperator 0x15b9419d8 <col:2, col:4> 'char' lvalue prefix '*' cannot overflow
|       |   |   | `-UnaryOperator 0x15b9419c0 <col:3, col:4> 'char *' postfix '++'
|       |   |   |   `-DeclRefExpr 0x15b9419a0 <col:3> 'char *' lvalue Var 0x15b9283b8 'r' 'char *'
|       |   |   `-ImplicitCastExpr 0x15b942050 <col:9, col:11> 'char' <LValueToRValue>
|       |   |     `-UnaryOperator 0x15b942038 <col:9, col:11> 'char' lvalue prefix '*' cannot overflow
|       |   |       `-UnaryOperator 0x15b942020 <col:10, col:11> 'char *' postfix '++'
|       |   |         `-DeclRefExpr 0x15b942000 <col:10> 'char *' lvalue Var 0x15b928338 'q' 'char *'
|       |   `-BinaryOperator 0x15b942128 <line:17:7, col:12> 'char' '='
|       |     |-UnaryOperator 0x15b9420e0 <col:7, col:8> 'char' lvalue prefix '*' cannot overflow
|       |     | `-ImplicitCastExpr 0x15b9420c8 <col:8> 'char *' <LValueToRValue>
|       |     |   `-DeclRefExpr 0x15b9420a8 <col:8> 'char *' lvalue Var 0x15b9283b8 'r' 'char *'
|       |     `-ImplicitCastExpr 0x15b942110 <col:12> 'char' <IntegralCast>
|       |       `-CharacterLiteral 0x15b9420f8 <col:12> 'int' 0
|       `-BinaryOperator 0x15b942218 <line:19:5, col:10> 'char' '='
|         |-UnaryOperator 0x15b9421d0 <col:5, col:6> 'char' lvalue prefix '*' cannot overflow
|         | `-ImplicitCastExpr 0x15b9421b8 <col:6> 'char *' <LValueToRValue>
|         |   `-DeclRefExpr 0x15b942198 <col:6> 'char *' lvalue Var 0x15b9282b8 'p' 'char *'
|         `-ImplicitCastExpr 0x15b942200 <col:10> 'char' <IntegralCast>
|           `-CharacterLiteral 0x15b9421e8 <col:10> 'int' 115
|-FunctionDecl 0x15b940b10 <line:5:12> col:12 implicit used strstr 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x15b940c10 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x15b940c78 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x15b940bb8 <<invalid sloc>> Implicit 898
|-FunctionDecl 0x15b941160 <line:11:9> col:9 implicit used strrchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x15b941260 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x15b9412c8 <<invalid sloc>> <invalid sloc> 'int'
| `-BuiltinAttr 0x15b941208 <<invalid sloc>> Implicit 896
`-FunctionDecl 0x15b9415d8 <line:15:15> col:15 implicit used isspace 'int (int)' extern
  |-ParmVarDecl 0x15b9416d8 <<invalid sloc>> <invalid sloc> 'int'
  |-BuiltinAttr 0x15b941680 <<invalid sloc>> Implicit 929
  |-NoThrowAttr 0x15b941748 <col:15> Implicit
  `-PureAttr 0x15b941770 <col:15> Implicit
