TranslationUnitDecl 0x122855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1228564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x122855bd0 '__int128'
|-TypedefDecl 0x122856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x122855bf0 'unsigned __int128'
|-TypedefDecl 0x122926230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x122926000 'struct __NSConstantString_tag'
|   `-Record 0x122856580 '__NSConstantString_tag'
|-TypedefDecl 0x122926298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x122855d90 '__SVInt8_t'
|-TypedefDecl 0x122926300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x122855db0 '__SVInt16_t'
|-TypedefDecl 0x122926368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x122855dd0 '__SVInt32_t'
|-TypedefDecl 0x1229263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x122855df0 '__SVInt64_t'
|-TypedefDecl 0x122926438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x122855e10 '__SVUint8_t'
|-TypedefDecl 0x1229264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x122855e30 '__SVUint16_t'
|-TypedefDecl 0x122926508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x122855e50 '__SVUint32_t'
|-TypedefDecl 0x122926570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x122855e70 '__SVUint64_t'
|-TypedefDecl 0x1229265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x122855e90 '__SVFloat16_t'
|-TypedefDecl 0x122926640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x122855eb0 '__SVFloat32_t'
|-TypedefDecl 0x1229266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x122855ed0 '__SVFloat64_t'
|-TypedefDecl 0x122926710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x122855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x122926778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x122855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1229267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x122855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x122926848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x122855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1229268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x122855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x122926918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x122855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x122926980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x122855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1229269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x122855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x122926a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x122855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x122926ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x122856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x122926b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x122856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x122926b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x122856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x122926bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x122856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x122926c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x122856090 '__clang_svint8x3_t'
|-TypedefDecl 0x122926cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1228560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x122926d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1228560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x122926d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1228560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x122926df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x122856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x122926e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x122856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x122926ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x122856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x122926f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x122856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x122926f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x122856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x122927800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1228561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x122927868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1228561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1229278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1228561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x122927938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x122856210 '__clang_svint8x4_t'
|-TypedefDecl 0x1229279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x122856230 '__clang_svint16x4_t'
|-TypedefDecl 0x122927a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x122856250 '__clang_svint32x4_t'
|-TypedefDecl 0x122927a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x122856270 '__clang_svint64x4_t'
|-TypedefDecl 0x122927ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x122856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x122927b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1228562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x122927ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1228562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x122927c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1228562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x122927c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x122856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x122927ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x122856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x122927d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x122856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x122927db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x122856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x122927e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x122856390 '__SVBool_t'
|-TypedefDecl 0x122927e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1228563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x122927ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1228563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x122927f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1228563f0 '__SVCount_t'
|-TypedefDecl 0x122927ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x122927fb0 'char *'
|   `-BuiltinType 0x1228556b0 'char'
|-TypedefDecl 0x122928068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x122927fb0 'char *'
|   `-BuiltinType 0x1228556b0 'char'
|-FunctionDecl 0x1229281a8 <dataset_diviso_filec/func10422_nonvuln.c:1:1, line:17:1> line:1:1 string_to_cipher_algo 'int (const char *)'
| |-ParmVarDecl 0x1229280d8 <col:24, col:36> col:36 used string 'const char *'
| `-CompoundStmt 0x1229418b0 <line:2:1, line:17:1>
|   |-DeclStmt 0x122928320 <line:3:3, col:10>
|   | `-VarDecl 0x1229282b8 <col:3, col:7> col:7 used val 'int'
|   |-BinaryOperator 0x122928688 <line:5:3, col:66> 'int' '='
|   | |-DeclRefExpr 0x122928338 <col:3> 'int' lvalue Var 0x1229282b8 'val' 'int'
|   | `-CallExpr 0x122928660 <col:9, col:66> 'int'
|   |   |-ImplicitCastExpr 0x122928648 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x122928480 <col:9> 'int ()' Function 0x1229283c8 'map_cipher_gcry_to_openpgp' 'int ()'
|   |   `-CallExpr 0x122928608 <col:37, col:65> 'int'
|   |     |-ImplicitCastExpr 0x1229285f0 <col:37> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x122928580 <col:37> 'int ()' Function 0x1229284c8 'gcry_cipher_map_name' 'int ()'
|   |     `-ImplicitCastExpr 0x122928630 <col:59> 'const char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x1229285a0 <col:59> 'const char *' lvalue ParmVar 0x1229280d8 'string' 'const char *'
|   |-IfStmt 0x122941848 <line:6:3, line:14:5>
|   | |-BinaryOperator 0x122940b58 <line:6:7, col:58> 'int' '&&'
|   | | |-BinaryOperator 0x122928730 <col:7, col:15> 'int' '&&'
|   | | | |-UnaryOperator 0x1229286e0 <col:7, col:8> 'int' prefix '!' cannot overflow
|   | | | | `-ImplicitCastExpr 0x1229286c8 <col:8> 'int' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x1229286a8 <col:8> 'int' lvalue Var 0x1229282b8 'val' 'int'
|   | | | `-ImplicitCastExpr 0x122928718 <col:15> 'const char *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1229286f8 <col:15> 'const char *' lvalue ParmVar 0x1229280d8 'string' 'const char *'
|   | | `-ParenExpr 0x122940b38 <col:25, col:58> 'int'
|   | |   `-BinaryOperator 0x122940b18 <col:26, col:55> 'int' '||'
|   | |     |-BinaryOperator 0x122940a18 <col:26, col:37> 'int' '=='
|   | |     | |-ImplicitCastExpr 0x122940a00 <col:26, col:34> 'int' <IntegralCast>
|   | |     | | `-ImplicitCastExpr 0x1229287e0 <col:26, col:34> 'char' <LValueToRValue>
|   | |     | |   `-ArraySubscriptExpr 0x1229287a8 <col:26, col:34> 'const char' lvalue
|   | |     | |     |-ImplicitCastExpr 0x122928790 <col:26> 'const char *' <LValueToRValue>
|   | |     | |     | `-DeclRefExpr 0x122928750 <col:26> 'const char *' lvalue ParmVar 0x1229280d8 'string' 'const char *'
|   | |     | |     `-IntegerLiteral 0x122928770 <col:33> 'int' 0
|   | |     | `-CharacterLiteral 0x1229287c8 <col:37> 'int' 83
|   | |     `-BinaryOperator 0x122940af8 <col:44, col:55> 'int' '=='
|   | |       |-ImplicitCastExpr 0x122940ae0 <col:44, col:52> 'int' <IntegralCast>
|   | |       | `-ImplicitCastExpr 0x122940ac8 <col:44, col:52> 'char' <LValueToRValue>
|   | |       |   `-ArraySubscriptExpr 0x122940a90 <col:44, col:52> 'const char' lvalue
|   | |       |     |-ImplicitCastExpr 0x122940a78 <col:44> 'const char *' <LValueToRValue>
|   | |       |     | `-DeclRefExpr 0x122940a38 <col:44> 'const char *' lvalue ParmVar 0x1229280d8 'string' 'const char *'
|   | |       |     `-IntegerLiteral 0x122940a58 <col:51> 'int' 0
|   | |       `-CharacterLiteral 0x122940ab0 <col:55> 'int' 115
|   | `-CompoundStmt 0x122941818 <line:7:5, line:14:5>
|   |   |-DeclStmt 0x122940bf8 <line:8:7, col:19>
|   |   | `-VarDecl 0x122940b90 <col:7, col:13> col:13 used endptr 'char *'
|   |   |-UnaryOperator 0x122940c30 <line:10:7, col:13> 'const char *' postfix '++'
|   |   | `-DeclRefExpr 0x122940c10 <col:7> 'const char *' lvalue ParmVar 0x1229280d8 'string' 'const char *'
|   |   |-BinaryOperator 0x1229414c0 <line:11:7, col:40> 'int' '='
|   |   | |-DeclRefExpr 0x122940c48 <col:7> 'int' lvalue Var 0x1229282b8 'val' 'int'
|   |   | `-ImplicitCastExpr 0x1229414a8 <col:13, col:40> 'int' <IntegralCast>
|   |   |   `-CallExpr 0x122941458 <col:13, col:40> 'long'
|   |   |     |-ImplicitCastExpr 0x122941440 <col:13> 'long (*)(const char *, char **, int)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x122941360 <col:13> 'long (const char *, char **, int)' Function 0x122941110 'strtol' 'long (const char *, char **, int)'
|   |   |     |-ImplicitCastExpr 0x122941490 <col:21> 'const char *' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x122941380 <col:21> 'const char *' lvalue ParmVar 0x1229280d8 'string' 'const char *'
|   |   |     |-UnaryOperator 0x1229413c0 <col:29, col:30> 'char **' prefix '&' cannot overflow
|   |   |     | `-DeclRefExpr 0x1229413a0 <col:30> 'char *' lvalue Var 0x122940b90 'endptr' 'char *'
|   |   |     `-IntegerLiteral 0x1229413d8 <col:38> 'int' 10
|   |   `-IfStmt 0x1229417f8 <line:12:7, line:13:15>
|   |     |-BinaryOperator 0x122941778 <line:12:11, col:63> 'int' '||'
|   |     | |-BinaryOperator 0x1229415e0 <col:11, col:24> 'int' '||'
|   |     | | |-UnaryOperator 0x122941548 <col:11, col:13> 'int' prefix '!' cannot overflow
|   |     | | | `-ImplicitCastExpr 0x122941530 <col:12, col:13> 'char' <LValueToRValue>
|   |     | | |   `-UnaryOperator 0x122941518 <col:12, col:13> 'const char' lvalue prefix '*' cannot overflow
|   |     | | |     `-ImplicitCastExpr 0x122941500 <col:13> 'const char *' <LValueToRValue>
|   |     | | |       `-DeclRefExpr 0x1229414e0 <col:13> 'const char *' lvalue ParmVar 0x1229280d8 'string' 'const char *'
|   |     | | `-ImplicitCastExpr 0x1229415c8 <col:23, col:24> 'int' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x1229415b0 <col:23, col:24> 'char' <LValueToRValue>
|   |     | |     `-UnaryOperator 0x122941598 <col:23, col:24> 'char' lvalue prefix '*' cannot overflow
|   |     | |       `-ImplicitCastExpr 0x122941580 <col:24> 'char *' <LValueToRValue>
|   |     | |         `-DeclRefExpr 0x122941560 <col:24> 'char *' lvalue Var 0x122940b90 'endptr' 'char *'
|   |     | `-CallExpr 0x122941738 <col:34, col:63> 'int'
|   |     |   |-ImplicitCastExpr 0x122941720 <col:34> 'int (*)()' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x1229416e0 <col:34> 'int ()' Function 0x122941628 'openpgp_cipher_test_algo' 'int ()'
|   |     |   `-ImplicitCastExpr 0x122941760 <col:60> 'int' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x122941700 <col:60> 'int' lvalue Var 0x1229282b8 'val' 'int'
|   |     `-BinaryOperator 0x1229417d8 <line:13:9, col:15> 'int' '='
|   |       |-DeclRefExpr 0x122941798 <col:9> 'int' lvalue Var 0x1229282b8 'val' 'int'
|   |       `-IntegerLiteral 0x1229417b8 <col:15> 'int' 0
|   `-ReturnStmt 0x1229418a0 <line:16:3, col:10>
|     `-ImplicitCastExpr 0x122941888 <col:10> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x122941868 <col:10> 'int' lvalue Var 0x1229282b8 'val' 'int'
`-FunctionDecl 0x122941110 <line:11:13> col:13 implicit used strtol 'long (const char *, char **, int)' extern
  |-ParmVarDecl 0x122941210 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x122941278 <<invalid sloc>> <invalid sloc> 'char **'
  |-ParmVarDecl 0x1229412e0 <<invalid sloc>> <invalid sloc> 'int'
  `-BuiltinAttr 0x1229411b8 <<invalid sloc>> Implicit 877
