TranslationUnitDecl 0x120044208 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1200450b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1200447d0 '__int128'
|-TypedefDecl 0x120045128 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1200447f0 'unsigned __int128'
|-TypedefDecl 0x10780be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x10780bc00 'struct __NSConstantString_tag'
|   `-Record 0x120045180 '__NSConstantString_tag'
|-TypedefDecl 0x10780be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x120044990 '__SVInt8_t'
|-TypedefDecl 0x10780bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x1200449b0 '__SVInt16_t'
|-TypedefDecl 0x10780bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x1200449d0 '__SVInt32_t'
|-TypedefDecl 0x10780bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x1200449f0 '__SVInt64_t'
|-TypedefDecl 0x10780c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x120044a10 '__SVUint8_t'
|-TypedefDecl 0x10780c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x120044a30 '__SVUint16_t'
|-TypedefDecl 0x10780c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x120044a50 '__SVUint32_t'
|-TypedefDecl 0x10780c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x120044a70 '__SVUint64_t'
|-TypedefDecl 0x10780c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x120044a90 '__SVFloat16_t'
|-TypedefDecl 0x10780c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x120044ab0 '__SVFloat32_t'
|-TypedefDecl 0x10780c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x120044ad0 '__SVFloat64_t'
|-TypedefDecl 0x10780c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x120044af0 '__SVBfloat16_t'
|-TypedefDecl 0x10780c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x120044b10 '__clang_svint8x2_t'
|-TypedefDecl 0x10780c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x120044b30 '__clang_svint16x2_t'
|-TypedefDecl 0x10780c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x120044b50 '__clang_svint32x2_t'
|-TypedefDecl 0x10780c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x120044b70 '__clang_svint64x2_t'
|-TypedefDecl 0x10780c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x120044b90 '__clang_svuint8x2_t'
|-TypedefDecl 0x10780c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x120044bb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x10780c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x120044bd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x10780c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x120044bf0 '__clang_svuint64x2_t'
|-TypedefDecl 0x10780c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x120044c10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x10780c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x120044c30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x10780c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x120044c50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x10780c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x120044c70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x10780c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x120044c90 '__clang_svint8x3_t'
|-TypedefDecl 0x10780c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x120044cb0 '__clang_svint16x3_t'
|-TypedefDecl 0x10780c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x120044cd0 '__clang_svint32x3_t'
|-TypedefDecl 0x10780c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x120044cf0 '__clang_svint64x3_t'
|-TypedefDecl 0x10780c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x120044d10 '__clang_svuint8x3_t'
|-TypedefDecl 0x10780ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x120044d30 '__clang_svuint16x3_t'
|-TypedefDecl 0x10780cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x120044d50 '__clang_svuint32x3_t'
|-TypedefDecl 0x10780cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x120044d70 '__clang_svuint64x3_t'
|-TypedefDecl 0x10780cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x120044d90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x10780d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x120044db0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x10780d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x120044dd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x10780d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x120044df0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x10780d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x120044e10 '__clang_svint8x4_t'
|-TypedefDecl 0x10780d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x120044e30 '__clang_svint16x4_t'
|-TypedefDecl 0x10780d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x120044e50 '__clang_svint32x4_t'
|-TypedefDecl 0x10780d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x120044e70 '__clang_svint64x4_t'
|-TypedefDecl 0x10780d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x120044e90 '__clang_svuint8x4_t'
|-TypedefDecl 0x10780d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x120044eb0 '__clang_svuint16x4_t'
|-TypedefDecl 0x10780d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x120044ed0 '__clang_svuint32x4_t'
|-TypedefDecl 0x10780d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x120044ef0 '__clang_svuint64x4_t'
|-TypedefDecl 0x10780d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x120044f10 '__clang_svfloat16x4_t'
|-TypedefDecl 0x10780d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x120044f30 '__clang_svfloat32x4_t'
|-TypedefDecl 0x10780d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x120044f50 '__clang_svfloat64x4_t'
|-TypedefDecl 0x10780d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x120044f70 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x10780da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x120044f90 '__SVBool_t'
|-TypedefDecl 0x10780da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x120044fb0 '__clang_svboolx2_t'
|-TypedefDecl 0x10780dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x120044fd0 '__clang_svboolx4_t'
|-TypedefDecl 0x10780db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x120044ff0 '__SVCount_t'
|-TypedefDecl 0x10780dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x10780dbb0 'char *'
|   `-BuiltinType 0x1200442b0 'char'
|-TypedefDecl 0x10780dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x10780dbb0 'char *'
|   `-BuiltinType 0x1200442b0 'char'
`-FunctionDecl 0x10780e008 <dataset_diviso_filec/func796_vuln.c:1:1, line:42:1> line:1:1 invalid _fill_xrgb32_lerp_spans 'int (void *, int, int, const int *, unsigned int)'
  |-ParmVarDecl 0x10780dcd8 <col:26, col:32> col:32 used abstract_renderer 'void *'
  |-ParmVarDecl 0x10780dd58 <col:51, col:55> col:55 used y 'int'
  |-ParmVarDecl 0x10780ddd8 <col:58, col:62> col:62 used h 'int'
  |-ParmVarDecl 0x10780de70 <line:2:5, col:35> col:35 referenced invalid spans 'const int *'
  |-ParmVarDecl 0x10780def0 <col:42, col:51> col:51 used num_spans 'unsigned int'
  `-CompoundStmt 0x12005a178 <line:3:1, line:42:1>
    |-IfStmt 0x10780e1e8 <line:6:5, line:7:9>
    | |-BinaryOperator 0x10780e180 <line:6:9, col:22> 'int' '=='
    | | |-ImplicitCastExpr 0x10780e150 <col:9> 'unsigned int' <LValueToRValue>
    | | | `-DeclRefExpr 0x10780e110 <col:9> 'unsigned int' lvalue ParmVar 0x10780def0 'num_spans' 'unsigned int'
    | | `-ImplicitCastExpr 0x10780e168 <col:22> 'unsigned int' <IntegralCast>
    | |   `-IntegerLiteral 0x10780e130 <col:22> 'int' 0
    | `-ReturnStmt 0x10780e1d8 <line:7:2, col:9>
    |   `-RecoveryExpr 0x10780e1b8 <col:9> '<dependent type>' contains-errors lvalue
    `-IfStmt 0x12005a148 <line:9:5, line:39:5> has_else
      |-CallExpr 0x120058c48 <line:9:9, col:22> 'int'
      | |-ImplicitCastExpr 0x120058c30 <col:9> 'int (*)()' <FunctionToPointerDecay>
      | | `-DeclRefExpr 0x10780e360 <col:9> 'int ()' Function 0x10780e2a8 'likely' 'int ()'
      | `-BinaryOperator 0x10780e3d8 <col:16, col:21> 'int' '=='
      |   |-ImplicitCastExpr 0x10780e3c0 <col:16> 'int' <LValueToRValue>
      |   | `-DeclRefExpr 0x10780e380 <col:16> 'int' lvalue ParmVar 0x10780ddd8 'h' 'int'
      |   `-IntegerLiteral 0x10780e3a0 <col:21> 'int' 1
      |-CompoundStmt 0x120059950 <col:25, line:22:5>
      | `-DoStmt 0x120059930 <line:10:2, line:21:26>
      |   |-CompoundStmt 0x120059880 <line:10:5, line:21:2>
      |   | |-IfStmt 0x120059800 <line:12:6, line:19:6>
      |   | | |-RecoveryExpr 0x120058c88 <line:12:10> '<dependent type>' contains-errors lvalue
      |   | | `-CompoundStmt 0x1200597e0 <col:13, line:19:6>
      |   | |   |-DeclStmt 0x120058ec8 <line:13:3, col:36>
      |   | |   | `-VarDecl 0x120058cc0 <col:3, col:35> col:7 used len 'int' cinit
      |   | |   |   `-BinaryOperator 0x120058ea8 <col:13, col:35> '<dependent type>' contains-errors '-'
      |   | |   |     |-CXXDependentScopeMemberExpr 0x120058da0 <col:13, col:22> '<dependent type>' contains-errors lvalue .x
      |   | |   |     | `-ArraySubscriptExpr 0x120058d80 <col:13, col:20> '<dependent type>' contains-errors lvalue
      |   | |   |     |   |-ImplicitCastExpr 0x120058d68 <col:13> '<dependent type>' contains-errors <LValueToRValue>
      |   | |   |     |   | `-RecoveryExpr 0x120058d28 <col:13> '<dependent type>' contains-errors lvalue
      |   | |   |     |   `-IntegerLiteral 0x120058d48 <col:19> 'int' 1
      |   | |   |     `-CXXDependentScopeMemberExpr 0x120058e60 <col:26, col:35> '<dependent type>' contains-errors lvalue .x
      |   | |   |       `-ArraySubscriptExpr 0x120058e40 <col:26, col:33> '<dependent type>' contains-errors lvalue
      |   | |   |         |-ImplicitCastExpr 0x120058e28 <col:26> '<dependent type>' contains-errors <LValueToRValue>
      |   | |   |         | `-RecoveryExpr 0x120058de8 <col:26> '<dependent type>' contains-errors lvalue
      |   | |   |         `-IntegerLiteral 0x120058e08 <col:32> 'int' 0
      |   | |   `-WhileStmt 0x1200597c0 <line:15:3, line:18:3>
      |   | |     |-UnaryOperator 0x120059290 <line:15:10, col:13> 'int' contains-errors postfix '--'
      |   | |     | `-DeclRefExpr 0x120059270 <col:10> 'int' contains-errors lvalue Var 0x120058cc0 'len' 'int'
      |   | |     `-CompoundStmt 0x1200597a8 <col:17, line:18:3>
      |   | |       `-BinaryOperator 0x120059788 <line:16:7, col:43> '<dependent type>' contains-errors '='
      |   | |         |-UnaryOperator 0x1200595d0 <col:7, col:8> '<dependent type>' contains-errors prefix '*' cannot overflow
      |   | |         | `-ImplicitCastExpr 0x1200595b8 <col:8> '<dependent type>' contains-errors <LValueToRValue>
      |   | |         |   `-RecoveryExpr 0x120059598 <col:8> '<dependent type>' contains-errors lvalue
      |   | |         `-CallExpr 0x120059750 <col:12, col:43> '<dependent type>' contains-errors
      |   | |           |-DeclRefExpr 0x1200593d0 <col:12> 'int ()' Function 0x120059318 'lerp8x4' 'int ()'
      |   | |           |-CXXDependentScopeMemberExpr 0x120059698 <col:21, col:31> '<dependent type>' contains-errors lvalue .pixel
      |   | |           | `-CXXDependentScopeMemberExpr 0x120059650 <col:21, col:26> '<dependent type>' contains-errors lvalue .fill
      |   | |           |   `-CXXDependentScopeMemberExpr 0x120059608 <col:21, col:24> '<dependent type>' contains-errors lvalue ->u
      |   | |           |     `-RecoveryExpr 0x1200595e8 <col:21> '<dependent type>' contains-errors lvalue
      |   | |           |-RecoveryExpr 0x1200596e0 <col:38> '<dependent type>' contains-errors lvalue
      |   | |           `-UnaryOperator 0x120059738 <col:41, col:42> '<dependent type>' contains-errors prefix '*' cannot overflow
      |   | |             `-ImplicitCastExpr 0x120059720 <col:42> '<dependent type>' contains-errors <LValueToRValue>
      |   | |               `-RecoveryExpr 0x120059700 <col:42> '<dependent type>' contains-errors lvalue
      |   | `-UnaryOperator 0x120059868 <line:20:6, col:11> '<dependent type>' contains-errors postfix '++' cannot overflow
      |   |   `-RecoveryExpr 0x120059840 <col:6> '<dependent type>' contains-errors lvalue
      |   |     `-DeclRefExpr 0x120059820 <col:6> 'const int *' lvalue ParmVar 0x10780de70 'spans' 'const int *'
      |   `-BinaryOperator 0x120059910 <line:21:11, col:25> 'int' '>'
      |     |-UnaryOperator 0x1200598c0 <col:11, col:13> 'unsigned int' prefix '--'
      |     | `-DeclRefExpr 0x1200598a0 <col:13> 'unsigned int' lvalue ParmVar 0x10780def0 'num_spans' 'unsigned int'
      |     `-ImplicitCastExpr 0x1200598f8 <col:25> 'unsigned int' <IntegralCast>
      |       `-IntegerLiteral 0x1200598d8 <col:25> 'int' 1
      `-CompoundStmt 0x12005a130 <line:22:12, line:39:5>
        `-DoStmt 0x12005a110 <line:23:2, line:38:26>
          |-CompoundStmt 0x12005a060 <line:23:5, line:38:2>
          | |-IfStmt 0x120059fe0 <line:25:6, line:36:6>
          | | |-RecoveryExpr 0x120059968 <line:25:10> '_Bool' contains-errors
          | | `-CompoundStmt 0x120059fc0 <col:13, line:36:6>
          | |   |-DeclStmt 0x120059b10 <line:26:3, col:21>
          | |   | |-VarDecl 0x1200599a0 <col:3, col:12> col:7 used yy 'int' cinit
          | |   | | `-ImplicitCastExpr 0x120059a28 <col:12> 'int' <LValueToRValue>
          | |   | |   `-DeclRefExpr 0x120059a08 <col:12> 'int' lvalue ParmVar 0x10780dd58 'y' 'int'
          | |   | `-VarDecl 0x120059a58 <col:3, col:20> col:15 used hh 'int' cinit
          | |   |   `-ImplicitCastExpr 0x120059ae0 <col:20> 'int' <LValueToRValue>
          | |   |     `-DeclRefExpr 0x120059ac0 <col:20> 'int' lvalue ParmVar 0x10780ddd8 'h' 'int'
          | |   `-DoStmt 0x120059fa0 <line:27:3, line:35:16>
          | |     |-CompoundStmt 0x120059f40 <line:27:6, line:35:3>
          | |     | |-DeclStmt 0x120059d48 <line:28:7, col:40>
          | |     | | `-VarDecl 0x120059b40 <col:7, col:39> col:11 used len 'int' cinit
          | |     | |   `-BinaryOperator 0x120059d28 <col:17, col:39> '<dependent type>' contains-errors '-'
          | |     | |     |-CXXDependentScopeMemberExpr 0x120059c20 <col:17, col:26> '<dependent type>' contains-errors lvalue .x
          | |     | |     | `-ArraySubscriptExpr 0x120059c00 <col:17, col:24> '<dependent type>' contains-errors lvalue
          | |     | |     |   |-ImplicitCastExpr 0x120059be8 <col:17> '<dependent type>' contains-errors <LValueToRValue>
          | |     | |     |   | `-RecoveryExpr 0x120059ba8 <col:17> '<dependent type>' contains-errors lvalue
          | |     | |     |   `-IntegerLiteral 0x120059bc8 <col:23> 'int' 1
          | |     | |     `-CXXDependentScopeMemberExpr 0x120059ce0 <col:30, col:39> '<dependent type>' contains-errors lvalue .x
          | |     | |       `-ArraySubscriptExpr 0x120059cc0 <col:30, col:37> '<dependent type>' contains-errors lvalue
          | |     | |         |-ImplicitCastExpr 0x120059ca8 <col:30> '<dependent type>' contains-errors <LValueToRValue>
          | |     | |         | `-RecoveryExpr 0x120059c68 <col:30> '<dependent type>' contains-errors lvalue
          | |     | |         `-IntegerLiteral 0x120059c88 <col:36> 'int' 0
          | |     | |-WhileStmt 0x120059ee8 <line:30:7, line:33:7>
          | |     | | |-UnaryOperator 0x120059ea0 <line:30:14, col:17> 'int' contains-errors postfix '--'
          | |     | | | `-DeclRefExpr 0x120059e80 <col:14> 'int' contains-errors lvalue Var 0x120059b40 'len' 'int'
          | |     | | `-CompoundStmt 0x120059ed8 <col:21, line:33:7>
          | |     | `-UnaryOperator 0x120059f28 <line:34:7, col:9> 'int' postfix '++'
          | |     |   `-DeclRefExpr 0x120059f08 <col:7> 'int' lvalue Var 0x1200599a0 'yy' 'int'
          | |     `-UnaryOperator 0x120059f88 <line:35:12, col:14> 'int' prefix '--'
          | |       `-DeclRefExpr 0x120059f68 <col:14> 'int' lvalue Var 0x120059a58 'hh' 'int'
          | `-UnaryOperator 0x12005a048 <line:37:6, col:11> '<dependent type>' contains-errors postfix '++' cannot overflow
          |   `-RecoveryExpr 0x12005a020 <col:6> '<dependent type>' contains-errors lvalue
          |     `-DeclRefExpr 0x12005a000 <col:6> 'const int *' lvalue ParmVar 0x10780de70 'spans' 'const int *'
          `-BinaryOperator 0x12005a0f0 <line:38:11, col:25> 'int' '>'
            |-UnaryOperator 0x12005a0a0 <col:11, col:13> 'unsigned int' prefix '--'
            | `-DeclRefExpr 0x12005a080 <col:13> 'unsigned int' lvalue ParmVar 0x10780def0 'num_spans' 'unsigned int'
            `-ImplicitCastExpr 0x12005a0d8 <col:25> 'unsigned int' <IntegralCast>
              `-IntegerLiteral 0x12005a0b8 <col:25> 'int' 1
