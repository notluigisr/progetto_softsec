TranslationUnitDecl 0x151055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1510564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x151055bd0 '__int128'
|-TypedefDecl 0x151056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x151055bf0 'unsigned __int128'
|-TypedefDecl 0x15180be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x15180bc00 'struct __NSConstantString_tag'
|   `-Record 0x151056580 '__NSConstantString_tag'
|-TypedefDecl 0x15180be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x151055d90 '__SVInt8_t'
|-TypedefDecl 0x15180bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x151055db0 '__SVInt16_t'
|-TypedefDecl 0x15180bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x151055dd0 '__SVInt32_t'
|-TypedefDecl 0x15180bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x151055df0 '__SVInt64_t'
|-TypedefDecl 0x15180c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x151055e10 '__SVUint8_t'
|-TypedefDecl 0x15180c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x151055e30 '__SVUint16_t'
|-TypedefDecl 0x15180c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x151055e50 '__SVUint32_t'
|-TypedefDecl 0x15180c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x151055e70 '__SVUint64_t'
|-TypedefDecl 0x15180c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x151055e90 '__SVFloat16_t'
|-TypedefDecl 0x15180c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x151055eb0 '__SVFloat32_t'
|-TypedefDecl 0x15180c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x151055ed0 '__SVFloat64_t'
|-TypedefDecl 0x15180c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x151055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x15180c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x151055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x15180c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x151055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x15180c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x151055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x15180c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x151055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x15180c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x151055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x15180c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x151055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x15180c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x151055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x15180c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x151055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x15180c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x151056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x15180c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x151056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x15180c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x151056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x15180c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x151056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x15180c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x151056090 '__clang_svint8x3_t'
|-TypedefDecl 0x15180c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1510560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x15180c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1510560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x15180c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1510560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x15180c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x151056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x15180ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x151056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x15180cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x151056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x15180cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x151056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x15180cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x151056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x15180d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1510561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x15180d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1510561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x15180d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1510561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x15180d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x151056210 '__clang_svint8x4_t'
|-TypedefDecl 0x15180d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x151056230 '__clang_svint16x4_t'
|-TypedefDecl 0x15180d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x151056250 '__clang_svint32x4_t'
|-TypedefDecl 0x15180d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x151056270 '__clang_svint64x4_t'
|-TypedefDecl 0x15180d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x151056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x15180d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1510562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x15180d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1510562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x15180d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1510562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x15180d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x151056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x15180d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x151056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x15180d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x151056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x15180d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x151056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x15180da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x151056390 '__SVBool_t'
|-TypedefDecl 0x15180da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1510563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x15180dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1510563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x15180db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1510563f0 '__SVCount_t'
|-TypedefDecl 0x15180dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x15180dbb0 'char *'
|   `-BuiltinType 0x1510556b0 'char'
|-TypedefDecl 0x15180dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x15180dbb0 'char *'
|   `-BuiltinType 0x1510556b0 'char'
|-FunctionDecl 0x151826688 <dataset_diviso_filec/func20901_vuln.c:1:1, line:41:1> line:1:14 ask_new_field 'char *(struct chfn_control *, const char *, char *)' static
| |-ParmVarDecl 0x15180e248 <col:28, col:49> col:49 used ctl 'struct chfn_control *'
| |-ParmVarDecl 0x15180e2c8 <col:54, col:66> col:66 used question 'const char *'
| |-ParmVarDecl 0x15180e348 <line:2:7, col:13> col:13 used def_val 'char *'
| `-CompoundStmt 0x15182d300 <line:3:1, line:41:1>
|   |-DeclStmt 0x151826810 <line:4:2, col:9>
|   | `-VarDecl 0x1518267a8 <col:2, col:6> col:6 used len 'int'
|   |-DeclStmt 0x1518268f8 <line:5:2, col:18>
|   | `-VarDecl 0x151826840 <col:2, col:14> col:8 used buf 'char *' cinit
|   |   `-RecoveryExpr 0x1518268d8 <col:14> '<dependent type>' contains-errors lvalue
|   |-RecoveryExpr 0x1518269f0 <line:7:2, col:17> '<dependent type>' contains-errors lvalue
|   | |-UnaryExprOrTypeTraitExpr 0x1518269d0 <col:2, col:9> 'unsigned long' contains-errors sizeof
|   | | `-RecoveryExpr 0x1518269b0 <col:9> '<dependent type>' contains-errors lvalue
|   | `-IntegerLiteral 0x151826948 <col:17> 'int' 0
|   |-IfStmt 0x151826b20 <line:10:2, line:11:13>
|   | |-UnaryOperator 0x151826a58 <line:10:6, col:7> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x151826a40 <col:7> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x151826a20 <col:7> 'char *' lvalue ParmVar 0x15180e348 'def_val' 'char *'
|   | `-BinaryOperator 0x151826b00 <line:11:3, col:13> 'char *' '='
|   |   |-DeclRefExpr 0x151826a70 <col:3> 'char *' lvalue ParmVar 0x15180e348 'def_val' 'char *'
|   |   `-ImplicitCastExpr 0x151826ae8 <col:13> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x151826ad0 <col:13> 'char[1]' lvalue ""
|   |-WhileStmt 0x15182d1f8 <line:12:2, line:38:2>
|   | |-RecoveryExpr 0x151826b58 <line:12:9> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x15182d198 <col:15, line:38:2>
|   |   |-CallExpr 0x151826e98 <line:13:3, col:34> 'int'
|   |   | |-ImplicitCastExpr 0x151826e80 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x151826d68 <col:3> 'int (const char *, ...)' Function 0x151826bc0 'printf' 'int (const char *, ...)'
|   |   | |-ImplicitCastExpr 0x151826ee8 <col:10> 'const char *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x151826ed0 <col:10> 'char *' <ArrayToPointerDecay>
|   |   | |   `-StringLiteral 0x151826dd0 <col:10> 'char[4]' lvalue "STR"
|   |   | |-ImplicitCastExpr 0x151826f00 <col:17> 'const char *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x151826df0 <col:17> 'const char *' lvalue ParmVar 0x15180e2c8 'question' 'const char *'
|   |   | `-ImplicitCastExpr 0x151826f18 <col:27> 'char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x151826e10 <col:27> 'char *' lvalue ParmVar 0x15180e348 'def_val' 'char *'
|   |   |-CallExpr 0x1518270c0 <line:14:3, col:17> '<dependent type>' contains-errors
|   |   | |-DeclRefExpr 0x151827040 <col:3> 'int ()' Function 0x151826f88 '__fpurge' 'int ()'
|   |   | `-RecoveryExpr 0x1518270a0 <col:12> '<dependent type>' contains-errors lvalue
|   |   |-CallExpr 0x151827248 <line:19:3, col:14> 'int'
|   |   | |-ImplicitCastExpr 0x151827230 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1518271c8 <col:3> 'int ()' Function 0x151827110 'putchar' 'int ()'
|   |   | `-CharacterLiteral 0x1518271e8 <col:11> 'int' 32
|   |   |-CallExpr 0x1518273d0 <line:20:3, col:16> '<dependent type>' contains-errors
|   |   | |-DeclRefExpr 0x151827350 <col:3> 'int ()' Function 0x151827298 'fflush' 'int ()'
|   |   | `-RecoveryExpr 0x1518273b0 <col:10> '<dependent type>' contains-errors lvalue
|   |   |-IfStmt 0x15182a658 <line:21:3, line:23:31>
|   |   | |-BinaryOperator 0x15182a2d0 <line:21:7, col:38> 'int' contains-errors '<'
|   |   | | |-CallExpr 0x15182a298 <col:7, col:34> '<dependent type>' contains-errors
|   |   | | | |-DeclRefExpr 0x1518274d8 <col:7> 'int ()' Function 0x151827420 'getline' 'int ()'
|   |   | | | |-UnaryOperator 0x151827550 <col:15, col:16> 'char **' contains-errors prefix '&' cannot overflow
|   |   | | | | `-DeclRefExpr 0x1518274f8 <col:16> 'char *' contains-errors lvalue Var 0x151826840 'buf' 'char *'
|   |   | | | |-UnaryOperator 0x15182a260 <col:21, col:22> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   | | | | `-RecoveryExpr 0x15182a240 <col:22> '<dependent type>' contains-errors lvalue
|   |   | | | `-RecoveryExpr 0x15182a278 <col:29> '<dependent type>' contains-errors lvalue
|   |   | | `-IntegerLiteral 0x15182a200 <col:38> 'int' 0
|   |   | `-CallExpr 0x15182a628 <line:23:4, col:31> '<dependent type>' contains-errors
|   |   |   |-DeclRefExpr 0x15182a3d0 <col:4> 'int ()' Function 0x15182a318 'errx' 'int ()'
|   |   |   |-RecoveryExpr 0x15182a5b0 <col:9> '<dependent type>' contains-errors lvalue
|   |   |   `-CallExpr 0x15182a5e8 <col:23, col:30> 'int'
|   |   |     |-ImplicitCastExpr 0x15182a5d0 <col:23> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x15182a4e8 <col:23> 'int ()' Function 0x15182a430 '_' 'int ()'
|   |   |     `-ImplicitCastExpr 0x15182a610 <col:25> 'char *' <ArrayToPointerDecay>
|   |   |       `-StringLiteral 0x15182a508 <col:25> 'char[4]' lvalue "STR"
|   |   |-CallExpr 0x15182a840 <line:25:3, col:41> 'int' contains-errors
|   |   | |-ImplicitCastExpr 0x15182a828 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x15182a758 <col:3> 'int ()' Function 0x15182a6a0 'ltrim_whitespace' 'int ()'
|   |   | `-CStyleCastExpr 0x15182a800 <col:20, col:38> 'unsigned char *' contains-errors <BitCast>
|   |   |   `-ImplicitCastExpr 0x15182a7e8 <col:38> 'char *' contains-errors <LValueToRValue> part_of_explicit_cast
|   |   |     `-DeclRefExpr 0x15182a778 <col:38> 'char *' contains-errors lvalue Var 0x151826840 'buf' 'char *'
|   |   |-BinaryOperator 0x15182aa40 <line:26:3, col:47> 'int' contains-errors '='
|   |   | |-DeclRefExpr 0x15182a868 <col:3> 'int' lvalue Var 0x1518267a8 'len' 'int'
|   |   | `-CallExpr 0x15182aa18 <col:9, col:47> 'int' contains-errors
|   |   |   |-ImplicitCastExpr 0x15182aa00 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x15182a968 <col:9> 'int ()' Function 0x15182a8b0 'rtrim_whitespace' 'int ()'
|   |   |   `-CStyleCastExpr 0x15182a9d8 <col:26, col:44> 'unsigned char *' contains-errors <BitCast>
|   |   |     `-ImplicitCastExpr 0x15182a9c0 <col:44> 'char *' contains-errors <LValueToRValue> part_of_explicit_cast
|   |   |       `-DeclRefExpr 0x15182a988 <col:44> 'char *' contains-errors lvalue Var 0x151826840 'buf' 'char *'
|   |   |-IfStmt 0x15182af40 <line:27:3, line:30:3>
|   |   | |-BinaryOperator 0x15182aab8 <line:27:7, col:14> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x15182aaa0 <col:7> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x15182aa60 <col:7> 'int' lvalue Var 0x1518267a8 'len' 'int'
|   |   | | `-IntegerLiteral 0x15182aa80 <col:14> 'int' 0
|   |   | `-CompoundStmt 0x15182af20 <col:17, line:30:3>
|   |   |   |-CallExpr 0x15182ad28 <line:28:4, col:12> 'void' contains-errors
|   |   |   | |-ImplicitCastExpr 0x15182ad10 <col:4> 'void (*)(void *)' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x15182ac88 <col:4> 'void (void *)' Function 0x15182ab18 'free' 'void (void *)'
|   |   |   | `-ImplicitCastExpr 0x15182ad68 <col:9> 'void *' contains-errors <BitCast>
|   |   |   |   `-ImplicitCastExpr 0x15182ad50 <col:9> 'char *' contains-errors <LValueToRValue>
|   |   |   |     `-DeclRefExpr 0x15182aca8 <col:9> 'char *' contains-errors lvalue Var 0x151826840 'buf' 'char *'
|   |   |   `-ReturnStmt 0x15182af10 <line:29:4, col:26>
|   |   |     `-ImplicitCastExpr 0x15182aef8 <col:11, col:26> 'char *' <IntegralToPointer>
|   |   |       `-CallExpr 0x15182aeb8 <col:11, col:26> 'int'
|   |   |         |-ImplicitCastExpr 0x15182aea0 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |   |         | `-DeclRefExpr 0x15182ae60 <col:11> 'int ()' Function 0x15182ada8 'xstrdup' 'int ()'
|   |   |         `-ImplicitCastExpr 0x15182aee0 <col:19> 'char *' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x15182ae80 <col:19> 'char *' lvalue ParmVar 0x15180e348 'def_val' 'char *'
|   |   |-IfStmt 0x15182cf58 <line:31:3, line:35:3>
|   |   | |-UnaryOperator 0x15182ccf8 <line:31:7, col:29> 'int' contains-errors prefix '!' cannot overflow
|   |   | | `-CallExpr 0x15182cc68 <col:8, col:29> 'int' contains-errors
|   |   | |   |-ImplicitCastExpr 0x15182cc50 <col:8> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x15182b180 <col:8> 'int (const char *, const char *)' Function 0x15182afa0 'strcasecmp' 'int (const char *, const char *)'
|   |   | |   |-ImplicitCastExpr 0x15182ccb0 <col:19> 'const char *' contains-errors <NoOp>
|   |   | |   | `-ImplicitCastExpr 0x15182cc98 <col:19> 'char *' contains-errors <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x15182b1a0 <col:19> 'char *' contains-errors lvalue Var 0x151826840 'buf' 'char *'
|   |   | |   `-ImplicitCastExpr 0x15182cce0 <col:24> 'const char *' <NoOp>
|   |   | |     `-ImplicitCastExpr 0x15182ccc8 <col:24> 'char *' <ArrayToPointerDecay>
|   |   | |       `-StringLiteral 0x15182b1c0 <col:24> 'char[4]' lvalue "STR"
|   |   | `-CompoundStmt 0x15182cf30 <col:32, line:35:3>
|   |   |   |-CallExpr 0x15182cd80 <line:32:4, col:12> 'void' contains-errors
|   |   |   | |-ImplicitCastExpr 0x15182cd68 <col:4> 'void (*)(void *)' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x15182cd10 <col:4> 'void (void *)' Function 0x15182ab18 'free' 'void (void *)'
|   |   |   | `-ImplicitCastExpr 0x15182cdc0 <col:9> 'void *' contains-errors <BitCast>
|   |   |   |   `-ImplicitCastExpr 0x15182cda8 <col:9> 'char *' contains-errors <LValueToRValue>
|   |   |   |     `-DeclRefExpr 0x15182cd30 <col:9> 'char *' contains-errors lvalue Var 0x151826840 'buf' 'char *'
|   |   |   |-BinaryOperator 0x15182ce58 <line:33:4, col:19> '<dependent type>' contains-errors '='
|   |   |   | |-RecoveryExpr 0x15182ce10 <col:4, col:9> '<dependent type>' contains-errors lvalue
|   |   |   | | `-DeclRefExpr 0x15182cdd8 <col:4> 'struct chfn_control *' lvalue ParmVar 0x15180e248 'ctl' 'struct chfn_control *'
|   |   |   | `-IntegerLiteral 0x15182ce38 <col:19> 'int' 1
|   |   |   `-ReturnStmt 0x15182cf20 <line:34:4, col:21>
|   |   |     `-ImplicitCastExpr 0x15182cf08 <col:11, col:21> 'char *' <IntegralToPointer>
|   |   |       `-CallExpr 0x15182cec8 <col:11, col:21> 'int'
|   |   |         |-ImplicitCastExpr 0x15182ceb0 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |   |         | `-DeclRefExpr 0x15182ce78 <col:11> 'int ()' Function 0x15182ada8 'xstrdup' 'int ()'
|   |   |         `-ImplicitCastExpr 0x15182cef0 <col:19> 'char *' <ArrayToPointerDecay>
|   |   |           `-StringLiteral 0x15182ce98 <col:19> 'char[1]' lvalue ""
|   |   `-IfStmt 0x15182d178 <line:36:3, line:37:4>
|   |     |-BinaryOperator 0x15182d150 <line:36:7, col:44> 'int' contains-errors '>='
|   |     | |-CallExpr 0x15182d0d0 <col:7, col:39> 'int' contains-errors
|   |     | | |-ImplicitCastExpr 0x15182d0b8 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x15182d058 <col:7> 'int ()' Function 0x15182cfa0 'check_gecos_string' 'int ()'
|   |     | | |-ImplicitCastExpr 0x15182d100 <col:26> 'const char *' <LValueToRValue>
|   |     | | | `-DeclRefExpr 0x15182d078 <col:26> 'const char *' lvalue ParmVar 0x15180e2c8 'question' 'const char *'
|   |     | | `-ImplicitCastExpr 0x15182d118 <col:36> 'char *' contains-errors <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x15182d098 <col:36> 'char *' contains-errors lvalue Var 0x151826840 'buf' 'char *'
|   |     | `-IntegerLiteral 0x15182d130 <col:44> 'int' 0
|   |     `-BreakStmt 0x15182d170 <line:37:4>
|   |-BinaryOperator 0x15182d298 <line:39:2, col:17> '<dependent type>' contains-errors '='
|   | |-RecoveryExpr 0x15182d250 <col:2, col:7> '<dependent type>' contains-errors lvalue
|   | | `-DeclRefExpr 0x15182d218 <col:2> 'struct chfn_control *' lvalue ParmVar 0x15180e248 'ctl' 'struct chfn_control *'
|   | `-IntegerLiteral 0x15182d278 <col:17> 'int' 1
|   `-ReturnStmt 0x15182d2f0 <line:40:2, col:9>
|     `-ImplicitCastExpr 0x15182d2d8 <col:9> 'char *' contains-errors <LValueToRValue>
|       `-DeclRefExpr 0x15182d2b8 <col:9> 'char *' contains-errors lvalue Var 0x151826840 'buf' 'char *'
|-FunctionDecl 0x151826bc0 <line:13:3> col:3 implicit used printf 'int (const char *, ...)' extern
| |-ParmVarDecl 0x151826cc0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-BuiltinAttr 0x151826c68 <<invalid sloc>> Implicit 903
| `-FormatAttr 0x151826d30 <col:3> Implicit printf 1 2
|-FunctionDecl 0x15182ab18 <line:28:4> col:4 implicit used free 'void (void *)' extern
| |-ParmVarDecl 0x15182ac18 <<invalid sloc>> <invalid sloc> 'void *'
| `-BuiltinAttr 0x15182abc0 <<invalid sloc>> Implicit 873
`-FunctionDecl 0x15182afa0 <line:31:8> col:8 implicit used strcasecmp 'int (const char *, const char *)' extern
  |-ParmVarDecl 0x15182b0a0 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x15182b108 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x15182b048 <<invalid sloc>> Implicit 957
