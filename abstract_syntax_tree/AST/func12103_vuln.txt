TranslationUnitDecl 0x128055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1280564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x128055bd0 '__int128'
|-TypedefDecl 0x128056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x128055bf0 'unsigned __int128'
|-TypedefDecl 0x10080be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x10080bc00 'struct __NSConstantString_tag'
|   `-Record 0x128056580 '__NSConstantString_tag'
|-TypedefDecl 0x10080be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x128055d90 '__SVInt8_t'
|-TypedefDecl 0x10080bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x128055db0 '__SVInt16_t'
|-TypedefDecl 0x10080bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x128055dd0 '__SVInt32_t'
|-TypedefDecl 0x10080bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x128055df0 '__SVInt64_t'
|-TypedefDecl 0x10080c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x128055e10 '__SVUint8_t'
|-TypedefDecl 0x10080c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x128055e30 '__SVUint16_t'
|-TypedefDecl 0x10080c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x128055e50 '__SVUint32_t'
|-TypedefDecl 0x10080c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x128055e70 '__SVUint64_t'
|-TypedefDecl 0x10080c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x128055e90 '__SVFloat16_t'
|-TypedefDecl 0x10080c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x128055eb0 '__SVFloat32_t'
|-TypedefDecl 0x10080c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x128055ed0 '__SVFloat64_t'
|-TypedefDecl 0x10080c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x128055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x10080c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x128055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x10080c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x128055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x10080c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x128055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x10080c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x128055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x10080c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x128055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x10080c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x128055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x10080c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x128055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x10080c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x128055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x10080c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x128056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x10080c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x128056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x10080c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x128056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x10080c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x128056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x10080c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x128056090 '__clang_svint8x3_t'
|-TypedefDecl 0x10080c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1280560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x10080c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1280560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x10080c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1280560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x10080c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x128056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x10080ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x128056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x10080cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x128056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x10080cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x128056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x10080cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x128056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x10080d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1280561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x10080d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1280561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x10080d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1280561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x10080d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x128056210 '__clang_svint8x4_t'
|-TypedefDecl 0x10080d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x128056230 '__clang_svint16x4_t'
|-TypedefDecl 0x10080d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x128056250 '__clang_svint32x4_t'
|-TypedefDecl 0x10080d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x128056270 '__clang_svint64x4_t'
|-TypedefDecl 0x10080d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x128056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x10080d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1280562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x10080d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1280562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x10080d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1280562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x10080d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x128056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x10080d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x128056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x10080d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x128056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x10080d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x128056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x10080da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x128056390 '__SVBool_t'
|-TypedefDecl 0x10080da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1280563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x10080dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1280563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x10080db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1280563f0 '__SVCount_t'
|-TypedefDecl 0x10080dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x10080dbb0 'char *'
|   `-BuiltinType 0x1280556b0 'char'
|-TypedefDecl 0x10080dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x10080dbb0 'char *'
|   `-BuiltinType 0x1280556b0 'char'
|-FunctionDecl 0x10080dfa8 <dataset_diviso_filec/func12103_vuln.c:1:1, line:59:1> line:1:15 invalid split_line 'char **(const int *, const char *, const char *, int)' static
| |-ParmVarDecl 0x10080dcf0 <col:26, col:44> col:44 invalid server 'const int *'
| |-ParmVarDecl 0x10080dd70 <col:52, col:64> col:64 used line 'const char *'
| |-ParmVarDecl 0x10080ddf0 <line:2:5, col:17> col:17 used target 'const char *'
| |-ParmVarDecl 0x10080de70 <col:25, col:29> col:29 used len 'int'
| `-CompoundStmt 0x10082a6f8 <line:3:1, line:59:1>
|   |-DeclStmt 0x102808590 <line:4:2, col:45>
|   | `-VarDecl 0x10080e088 <col:2, col:44> col:14 used start 'const char *' cinit
|   |   `-ImplicitCastExpr 0x10080e358 <col:22, col:44> 'const char *' <IntegralToPointer>
|   |     `-CallExpr 0x10080e318 <col:22, col:44> 'int'
|   |       |-ImplicitCastExpr 0x10080e300 <col:22> 'int (*)()' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x10080e250 <col:22> 'int ()' Function 0x10080e198 'settings_get_str' 'int ()'
|   |       `-ImplicitCastExpr 0x10080e340 <col:39> 'char *' <ArrayToPointerDecay>
|   |         `-StringLiteral 0x10080e2b0 <col:39> 'char[4]' lvalue "STR"
|   |-DeclStmt 0x1028086d8 <line:5:2, col:43>
|   | `-VarDecl 0x1028085c0 <col:2, col:42> col:14 used end 'const char *' cinit
|   |   `-ImplicitCastExpr 0x1028086c0 <col:20, col:42> 'const char *' <IntegralToPointer>
|   |     `-CallExpr 0x102808680 <col:20, col:42> 'int'
|   |       |-ImplicitCastExpr 0x102808668 <col:20> 'int (*)()' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x102808628 <col:20> 'int ()' Function 0x10080e198 'settings_get_str' 'int ()'
|   |       `-ImplicitCastExpr 0x1028086a8 <col:37> 'char *' <ArrayToPointerDecay>
|   |         `-StringLiteral 0x102808648 <col:37> 'char[4]' lvalue "STR"
|   |-DeclStmt 0x102808908 <line:7:2, col:57>
|   | `-VarDecl 0x102808708 <col:2, col:56> col:8 used recoded_start 'char *' cinit
|   |   `-CallExpr 0x1028088d0 <col:24, col:56> '<dependent type>' contains-errors
|   |     |-DeclRefExpr 0x102808850 <col:24> 'int ()' Function 0x102808798 'recode_out' 'int ()'
|   |     |-RecoveryExpr 0x102808870 <col:35> '<dependent type>' contains-errors lvalue
|   |     |-DeclRefExpr 0x102808890 <col:43> 'const char *' lvalue Var 0x10080e088 'start' 'const char *'
|   |     `-DeclRefExpr 0x1028088b0 <col:50> 'const char *' lvalue ParmVar 0x10080ddf0 'target' 'const char *'
|   |-DeclStmt 0x102808a58 <line:8:2, col:53>
|   | `-VarDecl 0x102808938 <col:2, col:52> col:8 used recoded_end 'char *' cinit
|   |   `-CallExpr 0x102808a20 <col:22, col:52> '<dependent type>' contains-errors
|   |     |-DeclRefExpr 0x1028089a0 <col:22> 'int ()' Function 0x102808798 'recode_out' 'int ()'
|   |     |-RecoveryExpr 0x1028089c0 <col:33> '<dependent type>' contains-errors lvalue
|   |     |-DeclRefExpr 0x1028089e0 <col:41> 'const char *' lvalue Var 0x1028085c0 'end' 'const char *'
|   |     `-DeclRefExpr 0x102808a00 <col:46> 'const char *' lvalue ParmVar 0x10080ddf0 'target' 'const char *'
|   |-DeclStmt 0x102808af0 <line:9:2, col:14>
|   | `-VarDecl 0x102808a88 <col:2, col:9> col:9 used lines 'char **'
|   |-DeclStmt 0x102808b88 <line:10:2, col:7>
|   | `-VarDecl 0x102808b20 <col:2, col:6> col:6 used i 'int'
|   |-CompoundAssignOperator 0x102808f48 <line:13:2, col:51> 'int' contains-errors '-=' ComputeLHSTy='unsigned long' ComputeResultTy='unsigned long'
|   | |-DeclRefExpr 0x102808ba0 <col:2> 'int' lvalue ParmVar 0x10080de70 'len' 'int'
|   | `-BinaryOperator 0x102808f28 <col:9, col:51> 'unsigned long' contains-errors '+'
|   |   |-CallExpr 0x102808e08 <col:9, col:29> 'unsigned long' contains-errors
|   |   | |-ImplicitCastExpr 0x102808df0 <col:9> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x102808d68 <col:9> 'unsigned long (const char *)' Function 0x102808bf8 'strlen' 'unsigned long (const char *)'
|   |   | `-ImplicitCastExpr 0x102808e48 <col:16> 'const char *' contains-errors <NoOp>
|   |   |   `-ImplicitCastExpr 0x102808e30 <col:16> 'char *' contains-errors <LValueToRValue>
|   |   |     `-DeclRefExpr 0x102808d88 <col:16> 'char *' contains-errors lvalue Var 0x102808708 'recoded_start' 'char *'
|   |   `-CallExpr 0x102808ed0 <col:33, col:51> 'unsigned long' contains-errors
|   |     |-ImplicitCastExpr 0x102808eb8 <col:33> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x102808e60 <col:33> 'unsigned long (const char *)' Function 0x102808bf8 'strlen' 'unsigned long (const char *)'
|   |     `-ImplicitCastExpr 0x102808f10 <col:40> 'const char *' contains-errors <NoOp>
|   |       `-ImplicitCastExpr 0x102808ef8 <col:40> 'char *' contains-errors <LValueToRValue>
|   |         `-DeclRefExpr 0x102808e80 <col:40> 'char *' contains-errors lvalue Var 0x102808938 'recoded_end' 'char *'
|   |-IfStmt 0x100827e70 <line:14:2, line:19:2>
|   | |-BinaryOperator 0x102808fd0 <line:14:6, col:13> 'int' '<='
|   | | |-ImplicitCastExpr 0x102808fb8 <col:6> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x102808f78 <col:6> 'int' lvalue ParmVar 0x10080de70 'len' 'int'
|   | | `-IntegerLiteral 0x102808f98 <col:13> 'int' 0
|   | `-CompoundStmt 0x100827e48 <col:16, line:19:2>
|   |   |-CallExpr 0x102809128 <line:16:3, col:23> 'int' contains-errors
|   |   | |-ImplicitCastExpr 0x102809110 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1028090d0 <col:3> 'int ()' Function 0x102809018 'g_free' 'int ()'
|   |   | `-ImplicitCastExpr 0x102809150 <col:10> 'char *' contains-errors <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1028090f0 <col:10> 'char *' contains-errors lvalue Var 0x102808708 'recoded_start' 'char *'
|   |   |-CallExpr 0x1028091c0 <line:17:3, col:21> 'int' contains-errors
|   |   | |-ImplicitCastExpr 0x1028091a8 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x102809168 <col:3> 'int ()' Function 0x102809018 'g_free' 'int ()'
|   |   | `-ImplicitCastExpr 0x1028091e8 <col:10> 'char *' contains-errors <LValueToRValue>
|   |   |   `-DeclRefExpr 0x102809188 <col:10> 'char *' contains-errors lvalue Var 0x102808938 'recoded_end' 'char *'
|   |   `-ReturnStmt 0x100827e38 <line:18:3, col:10>
|   |     `-RecoveryExpr 0x100827e18 <col:10> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x100828118 <line:21:2, col:57> 'char **' contains-errors '='
|   | |-DeclRefExpr 0x100827e90 <col:2> 'char **' lvalue Var 0x102808a88 'lines' 'char **'
|   | `-CallExpr 0x1008280d0 <col:10, col:57> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x100827f90 <col:10> 'int ()' Function 0x100827ed8 'recode_split' 'int ()'
|   |   |-RecoveryExpr 0x100827fb0 <col:23> '<dependent type>' contains-errors lvalue
|   |   |-DeclRefExpr 0x100827fd0 <col:31> 'const char *' lvalue ParmVar 0x10080dd70 'line' 'const char *'
|   |   |-DeclRefExpr 0x100827ff0 <col:37> 'const char *' lvalue ParmVar 0x10080ddf0 'target' 'const char *'
|   |   |-DeclRefExpr 0x100828010 <col:45> 'int' lvalue ParmVar 0x10080de70 'len' 'int'
|   |   `-RecoveryExpr 0x1008280b0 <col:50> '<dependent type>' contains-errors lvalue
|   |-ForStmt 0x10082a548 <line:22:2, line:54:2>
|   | |-BinaryOperator 0x100828178 <line:22:7, col:11> 'int' '='
|   | | |-DeclRefExpr 0x100828138 <col:7> 'int' lvalue Var 0x102808b20 'i' 'int'
|   | | `-IntegerLiteral 0x100828158 <col:11> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x100828320 <col:14, col:26> 'int' contains-errors '!='
|   | | |-ArraySubscriptExpr 0x1008282e0 <col:14, col:21> 'char *' lvalue
|   | | | |-ImplicitCastExpr 0x1008282b0 <col:14> 'char **' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x100828198 <col:14> 'char **' lvalue Var 0x102808a88 'lines' 'char **'
|   | | | `-ImplicitCastExpr 0x1008282c8 <col:20> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1008281b8 <col:20> 'int' lvalue Var 0x102808b20 'i' 'int'
|   | | `-RecoveryExpr 0x100828300 <col:26> '<dependent type>' contains-errors lvalue
|   | |-UnaryOperator 0x100828360 <col:32, col:33> 'int' postfix '++'
|   | | `-DeclRefExpr 0x100828340 <col:32> 'int' lvalue Var 0x102808b20 'i' 'int'
|   | `-CompoundStmt 0x10082a528 <col:37, line:54:2>
|   |   |-IfStmt 0x100828a20 <line:23:3, line:28:3>
|   |   | |-BinaryOperator 0x1008284a8 <line:23:7, col:27> 'int' '&&'
|   |   | | |-BinaryOperator 0x1008283d0 <col:7, col:12> 'int' '!='
|   |   | | | |-ImplicitCastExpr 0x1008283b8 <col:7> 'int' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x100828378 <col:7> 'int' lvalue Var 0x102808b20 'i' 'int'
|   |   | | | `-IntegerLiteral 0x100828398 <col:12> 'int' 0
|   |   | | `-BinaryOperator 0x100828488 <col:17, col:27> 'int' '!='
|   |   | |   |-ImplicitCastExpr 0x100828470 <col:17, col:18> 'int' <IntegralCast>
|   |   | |   | `-ImplicitCastExpr 0x100828458 <col:17, col:18> 'char' <LValueToRValue>
|   |   | |   |   `-UnaryOperator 0x100828428 <col:17, col:18> 'const char' lvalue prefix '*' cannot overflow
|   |   | |   |     `-ImplicitCastExpr 0x100828410 <col:18> 'const char *' <LValueToRValue>
|   |   | |   |       `-DeclRefExpr 0x1008283f0 <col:18> 'const char *' lvalue Var 0x10080e088 'start' 'const char *'
|   |   | |   `-CharacterLiteral 0x100828440 <col:27> 'int' 0
|   |   | `-CompoundStmt 0x1008289f8 <col:33, line:28:3>
|   |   |   |-DeclStmt 0x1008285f0 <line:25:4, col:24>
|   |   |   | `-VarDecl 0x1008284e0 <col:4, col:23> col:10 used tmp 'char *' cinit
|   |   |   |   `-ImplicitCastExpr 0x1008285d8 <col:16, col:23> 'char *' <LValueToRValue>
|   |   |   |     `-ArraySubscriptExpr 0x1008285b8 <col:16, col:23> 'char *' lvalue
|   |   |   |       |-ImplicitCastExpr 0x100828588 <col:16> 'char **' <LValueToRValue>
|   |   |   |       | `-DeclRefExpr 0x100828548 <col:16> 'char **' lvalue Var 0x102808a88 'lines' 'char **'
|   |   |   |       `-ImplicitCastExpr 0x1008285a0 <col:22> 'int' <LValueToRValue>
|   |   |   |         `-DeclRefExpr 0x100828568 <col:22> 'int' lvalue Var 0x102808b20 'i' 'int'
|   |   |   |-BinaryOperator 0x100828940 <line:26:4, col:43> 'char *' contains-errors '='
|   |   |   | |-ArraySubscriptExpr 0x1008288c8 <col:4, col:11> 'char *' lvalue
|   |   |   | | |-ImplicitCastExpr 0x100828898 <col:4> 'char **' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x100828608 <col:4> 'char **' lvalue Var 0x102808a88 'lines' 'char **'
|   |   |   | | `-ImplicitCastExpr 0x1008288b0 <col:10> 'int' <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x100828628 <col:10> 'int' lvalue Var 0x102808b20 'i' 'int'
|   |   |   | `-CallExpr 0x100828908 <col:15, col:43> '<dependent type>' contains-errors
|   |   |   |   |-DeclRefExpr 0x100828778 <col:15> 'int ()' Function 0x1008286c0 'g_strconcat' 'int ()'
|   |   |   |   |-DeclRefExpr 0x100828798 <col:27> 'const char *' lvalue Var 0x10080e088 'start' 'const char *'
|   |   |   |   |-DeclRefExpr 0x1008287b8 <col:34> 'char *' lvalue Var 0x1008284e0 'tmp' 'char *'
|   |   |   |   `-RecoveryExpr 0x1008288e8 <col:39> '<dependent type>' contains-errors lvalue
|   |   |   `-CallExpr 0x1008289b8 <line:27:4, col:14> 'int'
|   |   |     |-ImplicitCastExpr 0x1008289a0 <col:4> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x100828960 <col:4> 'int ()' Function 0x102809018 'g_free' 'int ()'
|   |   |     `-ImplicitCastExpr 0x1008289e0 <col:11> 'char *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x100828980 <col:11> 'char *' lvalue Var 0x1008284e0 'tmp' 'char *'
|   |   `-IfStmt 0x10082a508 <line:29:3, line:53:3>
|   |     |-BinaryOperator 0x100828dc0 <line:29:7, col:39> 'int' contains-errors '&&'
|   |     | |-BinaryOperator 0x100828d20 <col:7, col:23> 'int' contains-errors '!='
|   |     | | |-ArraySubscriptExpr 0x100828ce0 <col:7, col:18> 'char *' lvalue
|   |     | | | |-ImplicitCastExpr 0x100828cc8 <col:7> 'char **' <LValueToRValue>
|   |     | | | | `-DeclRefExpr 0x100828a40 <col:7> 'char **' lvalue Var 0x102808a88 'lines' 'char **'
|   |     | | | `-BinaryOperator 0x100828ca8 <col:13, col:17> 'int' '+'
|   |     | | |   |-ImplicitCastExpr 0x100828c90 <col:13> 'int' <LValueToRValue>
|   |     | | |   | `-DeclRefExpr 0x100828a60 <col:13> 'int' lvalue Var 0x102808b20 'i' 'int'
|   |     | | |   `-IntegerLiteral 0x100828a80 <col:17> 'int' 1
|   |     | | `-RecoveryExpr 0x100828d00 <col:23> '<dependent type>' contains-errors lvalue
|   |     | `-BinaryOperator 0x100828da0 <col:31, col:39> 'int' '!='
|   |     |   |-ImplicitCastExpr 0x100828d88 <col:31, col:32> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x100828d70 <col:31, col:32> 'char' <LValueToRValue>
|   |     |   |   `-UnaryOperator 0x100828d58 <col:31, col:32> 'const char' lvalue prefix '*' cannot overflow
|   |     |   |     `-ImplicitCastExpr 0x100828d40 <col:32> 'const char *' <LValueToRValue>
|   |     |   |       `-DeclRefExpr 0x100828b48 <col:32> 'const char *' lvalue Var 0x1028085c0 'end' 'const char *'
|   |     |   `-CharacterLiteral 0x100828b98 <col:39> 'int' 0
|   |     `-CompoundStmt 0x10082a4e0 <col:45, line:53:3>
|   |       |-DeclStmt 0x100829310 <line:31:4, col:24>
|   |       | `-VarDecl 0x100829200 <col:4, col:23> col:10 used tmp 'char *' cinit
|   |       |   `-ImplicitCastExpr 0x1008292f8 <col:16, col:23> 'char *' <LValueToRValue>
|   |       |     `-ArraySubscriptExpr 0x1008292d8 <col:16, col:23> 'char *' lvalue
|   |       |       |-ImplicitCastExpr 0x1008292a8 <col:16> 'char **' <LValueToRValue>
|   |       |       | `-DeclRefExpr 0x100829268 <col:16> 'char **' lvalue Var 0x102808a88 'lines' 'char **'
|   |       |       `-ImplicitCastExpr 0x1008292c0 <col:22> 'int' <LValueToRValue>
|   |       |         `-DeclRefExpr 0x100829288 <col:22> 'int' lvalue Var 0x102808b20 'i' 'int'
|   |       |-IfStmt 0x10082a338 <line:33:4, line:49:4>
|   |       | |-BinaryOperator 0x100829530 <line:33:8, col:24> 'int' contains-errors '=='
|   |       | | |-ArraySubscriptExpr 0x1008294f0 <col:8, col:19> 'char *' lvalue
|   |       | | | |-ImplicitCastExpr 0x1008294d8 <col:8> 'char **' <LValueToRValue>
|   |       | | | | `-DeclRefExpr 0x100829328 <col:8> 'char **' lvalue Var 0x102808a88 'lines' 'char **'
|   |       | | | `-BinaryOperator 0x1008294b8 <col:14, col:18> 'int' '+'
|   |       | | |   |-ImplicitCastExpr 0x1008294a0 <col:14> 'int' <LValueToRValue>
|   |       | | |   | `-DeclRefExpr 0x100829348 <col:14> 'int' lvalue Var 0x102808b20 'i' 'int'
|   |       | | |   `-IntegerLiteral 0x100829368 <col:18> 'int' 2
|   |       | | `-RecoveryExpr 0x100829510 <col:24> '<dependent type>' contains-errors lvalue
|   |       | `-CompoundStmt 0x10082a310 <col:30, line:49:4>
|   |       |   |-DeclStmt 0x100829738 <line:35:5, line:37:20>
|   |       |   | `-VarDecl 0x100829568 <line:35:5, line:37:19> line:35:11 used recoded_l 'char *' cinit
|   |       |   |   `-CallExpr 0x100829700 <col:23, line:37:19> '<dependent type>' contains-errors
|   |       |   |     |-DeclRefExpr 0x1008295d0 <line:35:23> 'int ()' Function 0x102808798 'recode_out' 'int ()'
|   |       |   |     |-RecoveryExpr 0x1008295f0 <col:34> '<dependent type>' contains-errors lvalue
|   |       |   |     |-ArraySubscriptExpr 0x1008296c0 <line:36:13, col:22> 'char *' lvalue
|   |       |   |     | |-ImplicitCastExpr 0x1008296a8 <col:13> 'char **' <LValueToRValue>
|   |       |   |     | | `-DeclRefExpr 0x100829610 <col:13> 'char **' lvalue Var 0x102808a88 'lines' 'char **'
|   |       |   |     | `-BinaryOperator 0x100829688 <col:19, col:21> 'int' '+'
|   |       |   |     |   |-ImplicitCastExpr 0x100829670 <col:19> 'int' <LValueToRValue>
|   |       |   |     |   | `-DeclRefExpr 0x100829630 <col:19> 'int' lvalue Var 0x102808b20 'i' 'int'
|   |       |   |     |   `-IntegerLiteral 0x100829650 <col:21> 'int' 1
|   |       |   |     `-DeclRefExpr 0x1008296e0 <line:37:13> 'const char *' lvalue ParmVar 0x10080ddf0 'target' 'const char *'
|   |       |   |-IfStmt 0x10082a258 <line:38:5, line:47:5>
|   |       |   | |-BinaryOperator 0x1008298e0 <line:38:9, col:48> 'int' contains-errors '<='
|   |       |   | | |-CallExpr 0x1008297c0 <col:9, col:25> 'unsigned long' contains-errors
|   |       |   | | | |-ImplicitCastExpr 0x1008297a8 <col:9> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |       |   | | | | `-DeclRefExpr 0x100829750 <col:9> 'unsigned long (const char *)' Function 0x102808bf8 'strlen' 'unsigned long (const char *)'
|   |       |   | | | `-ImplicitCastExpr 0x100829800 <col:16> 'const char *' contains-errors <NoOp>
|   |       |   | | |   `-ImplicitCastExpr 0x1008297e8 <col:16> 'char *' contains-errors <LValueToRValue>
|   |       |   | | |     `-DeclRefExpr 0x100829770 <col:16> 'char *' contains-errors lvalue Var 0x100829568 'recoded_l' 'char *'
|   |       |   | | `-CallExpr 0x100829888 <col:30, col:48> 'unsigned long' contains-errors
|   |       |   | |   |-ImplicitCastExpr 0x100829870 <col:30> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |       |   | |   | `-DeclRefExpr 0x100829818 <col:30> 'unsigned long (const char *)' Function 0x102808bf8 'strlen' 'unsigned long (const char *)'
|   |       |   | |   `-ImplicitCastExpr 0x1008298c8 <col:37> 'const char *' contains-errors <NoOp>
|   |       |   | |     `-ImplicitCastExpr 0x1008298b0 <col:37> 'char *' contains-errors <LValueToRValue>
|   |       |   | |       `-DeclRefExpr 0x100829838 <col:37> 'char *' contains-errors lvalue Var 0x102808938 'recoded_end' 'char *'
|   |       |   | `-CompoundStmt 0x10082a220 <col:51, line:47:5>
|   |       |   |   |-BinaryOperator 0x100829ce8 <line:39:6, line:40:19> 'char *' contains-errors '='
|   |       |   |   | |-ArraySubscriptExpr 0x100829c00 <line:39:6, col:13> 'char *' lvalue
|   |       |   |   | | |-ImplicitCastExpr 0x100829bd0 <col:6> 'char **' <LValueToRValue>
|   |       |   |   | | | `-DeclRefExpr 0x100829900 <col:6> 'char **' lvalue Var 0x102808a88 'lines' 'char **'
|   |       |   |   | | `-ImplicitCastExpr 0x100829be8 <col:12> 'int' <LValueToRValue>
|   |       |   |   | |   `-DeclRefExpr 0x100829920 <col:12> 'int' lvalue Var 0x102808b20 'i' 'int'
|   |       |   |   | `-CallExpr 0x100829cb0 <col:17, line:40:19> '<dependent type>' contains-errors
|   |       |   |   |   |-DeclRefExpr 0x100829990 <line:39:17> 'int ()' Function 0x1008286c0 'g_strconcat' 'int ()'
|   |       |   |   |   |-DeclRefExpr 0x1008299b0 <col:29> 'char *' lvalue Var 0x100829200 'tmp' 'char *'
|   |       |   |   |   |-ArraySubscriptExpr 0x100829c70 <col:34, col:43> 'char *' lvalue
|   |       |   |   |   | |-ImplicitCastExpr 0x100829c58 <col:34> 'char **' <LValueToRValue>
|   |       |   |   |   | | `-DeclRefExpr 0x1008299d0 <col:34> 'char **' lvalue Var 0x102808a88 'lines' 'char **'
|   |       |   |   |   | `-BinaryOperator 0x100829c38 <col:40, col:42> 'int' '+'
|   |       |   |   |   |   |-ImplicitCastExpr 0x100829c20 <col:40> 'int' <LValueToRValue>
|   |       |   |   |   |   | `-DeclRefExpr 0x1008299f0 <col:40> 'int' lvalue Var 0x102808b20 'i' 'int'
|   |       |   |   |   |   `-IntegerLiteral 0x100829a10 <col:42> 'int' 1
|   |       |   |   |   `-RecoveryExpr 0x100829c90 <line:40:15> '<dependent type>' contains-errors lvalue
|   |       |   |   |-CallExpr 0x100829ef0 <line:41:6, col:32> 'int'
|   |       |   |   | |-ImplicitCastExpr 0x100829ed8 <col:6> 'int (*)()' <FunctionToPointerDecay>
|   |       |   |   | | `-DeclRefExpr 0x100829de8 <col:6> 'int ()' Function 0x100829d30 'g_free_and_null' 'int ()'
|   |       |   |   | `-ImplicitCastExpr 0x100829f18 <col:22, col:31> 'char *' <LValueToRValue>
|   |       |   |   |   `-ArraySubscriptExpr 0x100829eb8 <col:22, col:31> 'char *' lvalue
|   |       |   |   |     |-ImplicitCastExpr 0x100829ea0 <col:22> 'char **' <LValueToRValue>
|   |       |   |   |     | `-DeclRefExpr 0x100829e08 <col:22> 'char **' lvalue Var 0x102808a88 'lines' 'char **'
|   |       |   |   |     `-BinaryOperator 0x100829e80 <col:28, col:30> 'int' '+'
|   |       |   |   |       |-ImplicitCastExpr 0x100829e68 <col:28> 'int' <LValueToRValue>
|   |       |   |   |       | `-DeclRefExpr 0x100829e28 <col:28> 'int' lvalue Var 0x102808b20 'i' 'int'
|   |       |   |   |       `-IntegerLiteral 0x100829e48 <col:30> 'int' 1
|   |       |   |   |-CallExpr 0x10082a140 <line:44:6, col:22> 'int' contains-errors
|   |       |   |   | |-ImplicitCastExpr 0x10082a128 <col:6> 'int (*)()' <FunctionToPointerDecay>
|   |       |   |   | | `-DeclRefExpr 0x10082a0e8 <col:6> 'int ()' Function 0x102809018 'g_free' 'int ()'
|   |       |   |   | `-ImplicitCastExpr 0x10082a168 <col:13> 'char *' contains-errors <LValueToRValue>
|   |       |   |   |   `-DeclRefExpr 0x10082a108 <col:13> 'char *' contains-errors lvalue Var 0x100829568 'recoded_l' 'char *'
|   |       |   |   |-CallExpr 0x10082a1d8 <line:45:6, col:16> 'int'
|   |       |   |   | |-ImplicitCastExpr 0x10082a1c0 <col:6> 'int (*)()' <FunctionToPointerDecay>
|   |       |   |   | | `-DeclRefExpr 0x10082a180 <col:6> 'int ()' Function 0x102809018 'g_free' 'int ()'
|   |       |   |   | `-ImplicitCastExpr 0x10082a200 <col:13> 'char *' <LValueToRValue>
|   |       |   |   |   `-DeclRefExpr 0x10082a1a0 <col:13> 'char *' lvalue Var 0x100829200 'tmp' 'char *'
|   |       |   |   `-BreakStmt 0x10082a218 <line:46:6>
|   |       |   `-CallExpr 0x10082a2d0 <line:48:5, col:21> 'int' contains-errors
|   |       |     |-ImplicitCastExpr 0x10082a2b8 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   |       |     | `-DeclRefExpr 0x10082a278 <col:5> 'int ()' Function 0x102809018 'g_free' 'int ()'
|   |       |     `-ImplicitCastExpr 0x10082a2f8 <col:12> 'char *' contains-errors <LValueToRValue>
|   |       |       `-DeclRefExpr 0x10082a298 <col:12> 'char *' contains-errors lvalue Var 0x100829568 'recoded_l' 'char *'
|   |       `-CallExpr 0x10082a4a0 <line:52:4, col:14> 'int'
|   |         |-ImplicitCastExpr 0x10082a488 <col:4> 'int (*)()' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x10082a448 <col:4> 'int ()' Function 0x102809018 'g_free' 'int ()'
|   |         `-ImplicitCastExpr 0x10082a4c8 <col:11> 'char *' <LValueToRValue>
|   |           `-DeclRefExpr 0x10082a468 <col:11> 'char *' lvalue Var 0x100829200 'tmp' 'char *'
|   |-CallExpr 0x10082a5d8 <line:56:2, col:22> 'int' contains-errors
|   | |-ImplicitCastExpr 0x10082a5c0 <col:2> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x10082a580 <col:2> 'int ()' Function 0x102809018 'g_free' 'int ()'
|   | `-ImplicitCastExpr 0x10082a600 <col:9> 'char *' contains-errors <LValueToRValue>
|   |   `-DeclRefExpr 0x10082a5a0 <col:9> 'char *' contains-errors lvalue Var 0x102808708 'recoded_start' 'char *'
|   |-CallExpr 0x10082a670 <line:57:2, col:20> 'int' contains-errors
|   | |-ImplicitCastExpr 0x10082a658 <col:2> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x10082a618 <col:2> 'int ()' Function 0x102809018 'g_free' 'int ()'
|   | `-ImplicitCastExpr 0x10082a698 <col:9> 'char *' contains-errors <LValueToRValue>
|   |   `-DeclRefExpr 0x10082a638 <col:9> 'char *' contains-errors lvalue Var 0x102808938 'recoded_end' 'char *'
|   `-ReturnStmt 0x10082a6e8 <line:58:2, col:9>
|     `-ImplicitCastExpr 0x10082a6d0 <col:9> 'char **' <LValueToRValue>
|       `-DeclRefExpr 0x10082a6b0 <col:9> 'char **' lvalue Var 0x102808a88 'lines' 'char **'
`-FunctionDecl 0x102808bf8 <line:13:9> col:9 implicit used strlen 'unsigned long (const char *)' extern
  |-ParmVarDecl 0x102808cf8 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x102808ca0 <<invalid sloc>> Implicit 902
