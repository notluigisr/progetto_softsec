TranslationUnitDecl 0x120855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1208564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x120855bd0 '__int128'
|-TypedefDecl 0x120856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x120855bf0 'unsigned __int128'
|-TypedefDecl 0x12100be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12100bc00 'struct __NSConstantString_tag'
|   `-Record 0x120856580 '__NSConstantString_tag'
|-TypedefDecl 0x12100be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x120855d90 '__SVInt8_t'
|-TypedefDecl 0x12100bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x120855db0 '__SVInt16_t'
|-TypedefDecl 0x12100bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x120855dd0 '__SVInt32_t'
|-TypedefDecl 0x12100bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x120855df0 '__SVInt64_t'
|-TypedefDecl 0x12100c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x120855e10 '__SVUint8_t'
|-TypedefDecl 0x12100c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x120855e30 '__SVUint16_t'
|-TypedefDecl 0x12100c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x120855e50 '__SVUint32_t'
|-TypedefDecl 0x12100c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x120855e70 '__SVUint64_t'
|-TypedefDecl 0x12100c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x120855e90 '__SVFloat16_t'
|-TypedefDecl 0x12100c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x120855eb0 '__SVFloat32_t'
|-TypedefDecl 0x12100c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x120855ed0 '__SVFloat64_t'
|-TypedefDecl 0x12100c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x120855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12100c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x120855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12100c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x120855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12100c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x120855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12100c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x120855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12100c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x120855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12100c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x120855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12100c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x120855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12100c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x120855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12100c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x120856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12100c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x120856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12100c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x120856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12100c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x120856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12100c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x120856090 '__clang_svint8x3_t'
|-TypedefDecl 0x12100c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1208560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12100c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1208560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12100c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1208560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12100c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x120856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12100ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x120856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12100cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x120856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12100cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x120856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12100cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x120856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12100d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1208561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12100d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1208561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12100d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1208561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12100d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x120856210 '__clang_svint8x4_t'
|-TypedefDecl 0x12100d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x120856230 '__clang_svint16x4_t'
|-TypedefDecl 0x12100d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x120856250 '__clang_svint32x4_t'
|-TypedefDecl 0x12100d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x120856270 '__clang_svint64x4_t'
|-TypedefDecl 0x12100d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x120856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12100d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1208562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12100d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1208562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12100d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1208562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12100d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x120856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12100d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x120856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12100d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x120856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12100d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x120856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12100da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x120856390 '__SVBool_t'
|-TypedefDecl 0x12100da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1208563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12100dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1208563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12100db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1208563f0 '__SVCount_t'
|-TypedefDecl 0x12100dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12100dbb0 'char *'
|   `-BuiltinType 0x1208556b0 'char'
|-TypedefDecl 0x12100dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12100dbb0 'char *'
|   `-BuiltinType 0x1208556b0 'char'
|-FunctionDecl 0x12100de88 <dataset_diviso_filec/func12097_nonvuln.c:1:1, line:53:1> line:1:1 tls_openssl_options_parse 'int (char *, long *)'
| |-ParmVarDecl 0x12100dcf0 <col:27, col:35> col:35 used option_spec 'char *'
| |-ParmVarDecl 0x12100dda8 <col:48, col:54> col:54 used results 'long *'
| `-CompoundStmt 0x12102a7a0 <line:2:1, line:53:1>
|   |-DeclStmt 0x12100e0a0 <line:3:1, col:18>
|   | |-VarDecl 0x12100dfa0 <col:1, col:6> col:6 used result 'long'
|   | `-VarDecl 0x12100e020 <col:1, col:14> col:14 used item 'long'
|   |-DeclStmt 0x12100e1d0 <line:4:1, col:16>
|   | |-VarDecl 0x12100e0d0 <col:1, col:9> col:9 used s 'char *'
|   | `-VarDecl 0x12100e150 <col:1, col:13> col:13 used end 'char *'
|   |-DeclStmt 0x12100e260 <line:5:1, col:14>
|   | `-VarDecl 0x12100e1f8 <col:1, col:8> col:8 used keep_c 'char'
|   |-BinaryOperator 0x12100e2b8 <line:8:1, col:10> 'long' '='
|   | |-DeclRefExpr 0x12100e278 <col:1> 'long' lvalue Var 0x12100dfa0 'result' 'long'
|   | `-IntegerLiteral 0x12100e298 <col:10> 'long' 0
|   |-IfStmt 0x121028488 <line:14:1, line:18:3>
|   | |-BinaryOperator 0x12100e350 <line:14:5, col:20> 'int' contains-errors '=='
|   | | |-DeclRefExpr 0x12100e2d8 <col:5> 'char *' lvalue ParmVar 0x12100dcf0 'option_spec' 'char *'
|   | | `-RecoveryExpr 0x12100e330 <col:20> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x121028468 <line:15:3, line:18:3>
|   |   |-BinaryOperator 0x121028400 <line:16:3, col:14> 'long' '='
|   |   | |-UnaryOperator 0x12100e3a8 <col:3, col:4> 'long' lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x12100e390 <col:4> 'long *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x12100e370 <col:4> 'long *' lvalue ParmVar 0x12100dda8 'results' 'long *'
|   |   | `-ImplicitCastExpr 0x12100e3e0 <col:14> 'long' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x12100e3c0 <col:14> 'long' lvalue Var 0x12100dfa0 'result' 'long'
|   |   `-ReturnStmt 0x121028458 <line:17:3, col:10>
|   |     `-RecoveryExpr 0x121028438 <col:10> '<dependent type>' contains-errors lvalue
|   |-ForStmt 0x12102a6c0 <line:20:1, line:49:3>
|   | |-BinaryOperator 0x121028500 <line:20:6, col:8> 'char *' '='
|   | | |-DeclRefExpr 0x1210284a8 <col:6> 'char *' lvalue Var 0x12100e0d0 's' 'char *'
|   | | `-ImplicitCastExpr 0x1210284e8 <col:8> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1210284c8 <col:8> 'char *' lvalue ParmVar 0x12100dcf0 'option_spec' 'char *'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1210285b8 <col:21, col:27> 'int' '!='
|   | | |-ImplicitCastExpr 0x1210285a0 <col:21, col:22> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x121028588 <col:21, col:22> 'char' <LValueToRValue>
|   | | |   `-UnaryOperator 0x121028558 <col:21, col:22> 'char' lvalue prefix '*' cannot overflow
|   | | |     `-ImplicitCastExpr 0x121028540 <col:22> 'char *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x121028520 <col:22> 'char *' lvalue Var 0x12100e0d0 's' 'char *'
|   | | `-CharacterLiteral 0x121028570 <col:27> 'int' 0
|   | |-<<<NULL>>>
|   | `-CompoundStmt 0x12102a660 <line:21:3, line:49:3>
|   |   |-WhileStmt 0x121028d48 <line:22:3, col:25>
|   |   | |-CallExpr 0x121028cb8 <col:10, col:20> 'int'
|   |   | | |-ImplicitCastExpr 0x121028ca0 <col:10> 'int (*)(int)' <FunctionToPointerDecay>
|   |   | | | `-DeclRefExpr 0x121028c00 <col:10> 'int (int)' Function 0x121028a40 'isspace' 'int (int)'
|   |   | | `-ImplicitCastExpr 0x121028cf8 <col:18, col:19> 'int' <IntegralCast>
|   |   | |   `-ImplicitCastExpr 0x121028ce0 <col:18, col:19> 'char' <LValueToRValue>
|   |   | |     `-UnaryOperator 0x121028c58 <col:18, col:19> 'char' lvalue prefix '*' cannot overflow
|   |   | |       `-ImplicitCastExpr 0x121028c40 <col:19> 'char *' <LValueToRValue>
|   |   | |         `-DeclRefExpr 0x121028c20 <col:19> 'char *' lvalue Var 0x12100e0d0 's' 'char *'
|   |   | `-UnaryOperator 0x121028d30 <col:23, col:25> 'char *' prefix '++'
|   |   |   `-DeclRefExpr 0x121028d10 <col:25> 'char *' lvalue Var 0x12100e0d0 's' 'char *'
|   |   |-IfStmt 0x121028e28 <line:23:3, line:24:5>
|   |   | |-BinaryOperator 0x121028e00 <line:23:7, col:13> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x121028de8 <col:7, col:8> 'int' <IntegralCast>
|   |   | | | `-ImplicitCastExpr 0x121028dd0 <col:7, col:8> 'char' <LValueToRValue>
|   |   | | |   `-UnaryOperator 0x121028da0 <col:7, col:8> 'char' lvalue prefix '*' cannot overflow
|   |   | | |     `-ImplicitCastExpr 0x121028d88 <col:8> 'char *' <LValueToRValue>
|   |   | | |       `-DeclRefExpr 0x121028d68 <col:8> 'char *' lvalue Var 0x12100e0d0 's' 'char *'
|   |   | | `-CharacterLiteral 0x121028db8 <col:13> 'int' 0
|   |   | `-BreakStmt 0x121028e20 <line:24:5>
|   |   |-IfStmt 0x121029a58 <line:25:3, line:30:5>
|   |   | |-BinaryOperator 0x121028fb8 <line:25:7, col:26> 'int' '&&'
|   |   | | |-BinaryOperator 0x121028ee0 <col:7, col:13> 'int' '!='
|   |   | | | |-ImplicitCastExpr 0x121028ec8 <col:7, col:8> 'int' <IntegralCast>
|   |   | | | | `-ImplicitCastExpr 0x121028eb0 <col:7, col:8> 'char' <LValueToRValue>
|   |   | | | |   `-UnaryOperator 0x121028e80 <col:7, col:8> 'char' lvalue prefix '*' cannot overflow
|   |   | | | |     `-ImplicitCastExpr 0x121028e68 <col:8> 'char *' <LValueToRValue>
|   |   | | | |       `-DeclRefExpr 0x121028e48 <col:8> 'char *' lvalue Var 0x12100e0d0 's' 'char *'
|   |   | | | `-CharacterLiteral 0x121028e98 <col:13> 'int' 43
|   |   | | `-BinaryOperator 0x121028f98 <col:20, col:26> 'int' '!='
|   |   | |   |-ImplicitCastExpr 0x121028f80 <col:20, col:21> 'int' <IntegralCast>
|   |   | |   | `-ImplicitCastExpr 0x121028f68 <col:20, col:21> 'char' <LValueToRValue>
|   |   | |   |   `-UnaryOperator 0x121028f38 <col:20, col:21> 'char' lvalue prefix '*' cannot overflow
|   |   | |   |     `-ImplicitCastExpr 0x121028f20 <col:21> 'char *' <LValueToRValue>
|   |   | |   |       `-DeclRefExpr 0x121028f00 <col:21> 'char *' lvalue Var 0x12100e0d0 's' 'char *'
|   |   | |   `-CharacterLiteral 0x121028f50 <col:26> 'int' 45
|   |   | `-CompoundStmt 0x121029a30 <line:26:5, line:30:5>
|   |   |   |-CallExpr 0x121029170 <line:27:5, col:16> '<dependent type>' contains-errors
|   |   |   | |-DeclRefExpr 0x1210290f0 <col:5> 'int ()' Function 0x121029038 'DEBUG' 'int ()'
|   |   |   | `-RecoveryExpr 0x121029150 <col:11> '<dependent type>' contains-errors lvalue
|   |   |   |-CallExpr 0x121029378 <col:18, line:28:17> 'int'
|   |   |   | |-ImplicitCastExpr 0x121029360 <line:27:18> 'int (*)()' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x121029278 <col:18> 'int ()' Function 0x1210291c0 'debug_printf' 'int ()'
|   |   |   | |-ImplicitCastExpr 0x1210293a8 <col:31, line:28:9> 'char *' <ArrayToPointerDecay>
|   |   |   | | `-StringLiteral 0x1210292e0 <line:27:31, line:28:9> 'char[7]' lvalue "STRSTR"
|   |   |   | `-ImplicitCastExpr 0x1210293c0 <col:16> 'char *' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x121029308 <col:16> 'char *' lvalue Var 0x12100e0d0 's' 'char *'
|   |   |   `-ReturnStmt 0x121029a20 <line:29:5, col:12>
|   |   |     `-RecoveryExpr 0x121029a00 <col:12> '<dependent type>' contains-errors lvalue
|   |   |-ForStmt 0x121029dd8 <line:32:3, col:59>
|   |   | |-BinaryOperator 0x121029b88 <col:8, col:14> 'char *' '='
|   |   | | |-DeclRefExpr 0x121029b30 <col:8> 'char *' lvalue Var 0x12100e150 'end' 'char *'
|   |   | | `-ImplicitCastExpr 0x121029b70 <col:14> 'char *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x121029b50 <col:14> 'char *' lvalue Var 0x12100e0d0 's' 'char *'
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x121029d78 <col:17, col:48> 'int' '&&'
|   |   | | |-ParenExpr 0x121029c60 <col:17, col:30> 'int'
|   |   | | | `-BinaryOperator 0x121029c40 <col:18, col:26> 'int' '!='
|   |   | | |   |-ImplicitCastExpr 0x121029c28 <col:18, col:19> 'int' <IntegralCast>
|   |   | | |   | `-ImplicitCastExpr 0x121029c10 <col:18, col:19> 'char' <LValueToRValue>
|   |   | | |   |   `-UnaryOperator 0x121029be0 <col:18, col:19> 'char' lvalue prefix '*' cannot overflow
|   |   | | |   |     `-ImplicitCastExpr 0x121029bc8 <col:19> 'char *' <LValueToRValue>
|   |   | | |   |       `-DeclRefExpr 0x121029ba8 <col:19> 'char *' lvalue Var 0x12100e150 'end' 'char *'
|   |   | | |   `-CharacterLiteral 0x121029bf8 <col:26> 'int' 0
|   |   | | `-UnaryOperator 0x121029d60 <col:35, col:48> 'int' prefix '!' cannot overflow
|   |   | |   `-CallExpr 0x121029d08 <col:36, col:48> 'int'
|   |   | |     |-ImplicitCastExpr 0x121029cf0 <col:36> 'int (*)(int)' <FunctionToPointerDecay>
|   |   | |     | `-DeclRefExpr 0x121029c80 <col:36> 'int (int)' Function 0x121028a40 'isspace' 'int (int)'
|   |   | |     `-ImplicitCastExpr 0x121029d48 <col:44, col:45> 'int' <IntegralCast>
|   |   | |       `-ImplicitCastExpr 0x121029d30 <col:44, col:45> 'char' <LValueToRValue>
|   |   | |         `-UnaryOperator 0x121029cd8 <col:44, col:45> 'char' lvalue prefix '*' cannot overflow
|   |   | |           `-ImplicitCastExpr 0x121029cc0 <col:45> 'char *' <LValueToRValue>
|   |   | |             `-DeclRefExpr 0x121029ca0 <col:45> 'char *' lvalue Var 0x12100e150 'end' 'char *'
|   |   | |-UnaryOperator 0x121029db8 <col:51, col:53> 'char *' prefix '++'
|   |   | | `-DeclRefExpr 0x121029d98 <col:53> 'char *' lvalue Var 0x12100e150 'end' 'char *'
|   |   | `-NullStmt 0x121029dd0 <col:59>
|   |   |-BinaryOperator 0x121029e98 <line:33:3, col:13> 'char' '='
|   |   | |-DeclRefExpr 0x121029e10 <col:3> 'char' lvalue Var 0x12100e1f8 'keep_c' 'char'
|   |   | `-ImplicitCastExpr 0x121029e80 <col:12, col:13> 'char' <LValueToRValue>
|   |   |   `-UnaryOperator 0x121029e68 <col:12, col:13> 'char' lvalue prefix '*' cannot overflow
|   |   |     `-ImplicitCastExpr 0x121029e50 <col:13> 'char *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x121029e30 <col:13> 'char *' lvalue Var 0x12100e150 'end' 'char *'
|   |   |-BinaryOperator 0x121029f38 <line:34:3, col:10> 'char' '='
|   |   | |-UnaryOperator 0x121029ef0 <col:3, col:4> 'char' lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x121029ed8 <col:4> 'char *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x121029eb8 <col:4> 'char *' lvalue Var 0x12100e150 'end' 'char *'
|   |   | `-ImplicitCastExpr 0x121029f20 <col:10> 'char' <IntegralCast>
|   |   |   `-CharacterLiteral 0x121029f08 <col:10> 'int' 0
|   |   |-IfStmt 0x12102a388 <line:36:3, line:40:5>
|   |   | |-UnaryOperator 0x12102a190 <line:36:7, col:8> '<dependent type>' contains-errors prefix '!' cannot overflow
|   |   | | `-ImplicitCastExpr 0x12102a178 <col:8> '<dependent type>' contains-errors <LValueToRValue>
|   |   | |   `-RecoveryExpr 0x12102a158 <col:8> '<dependent type>' contains-errors lvalue
|   |   | `-CompoundStmt 0x12102a368 <line:37:5, line:40:5>
|   |   |   |-CallExpr 0x12102a228 <line:38:5, col:16> '<dependent type>' contains-errors
|   |   |   | |-DeclRefExpr 0x12102a1a8 <col:5> 'int ()' Function 0x121029038 'DEBUG' 'int ()'
|   |   |   | `-RecoveryExpr 0x12102a208 <col:11> '<dependent type>' contains-errors lvalue
|   |   |   `-CallExpr 0x12102a308 <col:18, col:39> 'int'
|   |   |     |-ImplicitCastExpr 0x12102a2f0 <col:18> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x12102a250 <col:18> 'int ()' Function 0x1210291c0 'debug_printf' 'int ()'
|   |   |     |-ImplicitCastExpr 0x12102a338 <col:31> 'char *' <ArrayToPointerDecay>
|   |   |     | `-StringLiteral 0x12102a2b0 <col:31> 'char[4]' lvalue "STR"
|   |   |     `-ImplicitCastExpr 0x12102a350 <col:38> 'char *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x12102a2d0 <col:38> 'char *' lvalue Var 0x12100e0d0 's' 'char *'
|   |   |-IfStmt 0x12102a510 <line:43:3, line:46:16> has_else
|   |   | |-RecoveryExpr 0x12102a3c8 <line:43:7> '_Bool' contains-errors
|   |   | |-CompoundAssignOperator 0x12102a440 <line:44:5, col:15> 'long' '|=' ComputeLHSTy='long' ComputeResultTy='long'
|   |   | | |-DeclRefExpr 0x12102a3e8 <col:5> 'long' lvalue Var 0x12100dfa0 'result' 'long'
|   |   | | `-ImplicitCastExpr 0x12102a428 <col:15> 'long' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x12102a408 <col:15> 'long' lvalue Var 0x12100e020 'item' 'long'
|   |   | `-CompoundAssignOperator 0x12102a4e0 <line:46:5, col:16> 'long' '&=' ComputeLHSTy='long' ComputeResultTy='long'
|   |   |   |-DeclRefExpr 0x12102a470 <col:5> 'long' lvalue Var 0x12100dfa0 'result' 'long'
|   |   |   `-UnaryOperator 0x12102a4c8 <col:15, col:16> 'long' prefix '~' cannot overflow
|   |   |     `-ImplicitCastExpr 0x12102a4b0 <col:16> 'long' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x12102a490 <col:16> 'long' lvalue Var 0x12100e020 'item' 'long'
|   |   |-BinaryOperator 0x12102a5c8 <line:47:3, col:10> 'char' '='
|   |   | |-UnaryOperator 0x12102a578 <col:3, col:4> 'char' lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x12102a560 <col:4> 'char *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x12102a540 <col:4> 'char *' lvalue Var 0x12100e150 'end' 'char *'
|   |   | `-ImplicitCastExpr 0x12102a5b0 <col:10> 'char' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x12102a590 <col:10> 'char' lvalue Var 0x12100e1f8 'keep_c' 'char'
|   |   `-BinaryOperator 0x12102a640 <line:48:3, col:7> 'char *' '='
|   |     |-DeclRefExpr 0x12102a5e8 <col:3> 'char *' lvalue Var 0x12100e0d0 's' 'char *'
|   |     `-ImplicitCastExpr 0x12102a628 <col:7> 'char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x12102a608 <col:7> 'char *' lvalue Var 0x12100e150 'end' 'char *'
|   `-BinaryOperator 0x12102a780 <line:51:1, col:12> 'long' '='
|     |-UnaryOperator 0x12102a730 <col:1, col:2> 'long' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x12102a718 <col:2> 'long *' <LValueToRValue>
|     |   `-DeclRefExpr 0x12102a6f8 <col:2> 'long *' lvalue ParmVar 0x12100dda8 'results' 'long *'
|     `-ImplicitCastExpr 0x12102a768 <col:12> 'long' <LValueToRValue>
|       `-DeclRefExpr 0x12102a748 <col:12> 'long' lvalue Var 0x12100dfa0 'result' 'long'
`-FunctionDecl 0x121028a40 <line:22:10> col:10 implicit used isspace 'int (int)' extern
  |-ParmVarDecl 0x121028b40 <<invalid sloc>> <invalid sloc> 'int'
  |-BuiltinAttr 0x121028ae8 <<invalid sloc>> Implicit 929
  |-NoThrowAttr 0x121028bb0 <col:10> Implicit
  `-PureAttr 0x121028bd8 <col:10> Implicit
