TranslationUnitDecl 0x120855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1208564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x120855bd0 '__int128'
|-TypedefDecl 0x120856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x120855bf0 'unsigned __int128'
|-TypedefDecl 0x12180be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12180bc00 'struct __NSConstantString_tag'
|   `-Record 0x120856580 '__NSConstantString_tag'
|-TypedefDecl 0x12180be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x120855d90 '__SVInt8_t'
|-TypedefDecl 0x12180bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x120855db0 '__SVInt16_t'
|-TypedefDecl 0x12180bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x120855dd0 '__SVInt32_t'
|-TypedefDecl 0x12180bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x120855df0 '__SVInt64_t'
|-TypedefDecl 0x12180c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x120855e10 '__SVUint8_t'
|-TypedefDecl 0x12180c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x120855e30 '__SVUint16_t'
|-TypedefDecl 0x12180c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x120855e50 '__SVUint32_t'
|-TypedefDecl 0x12180c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x120855e70 '__SVUint64_t'
|-TypedefDecl 0x12180c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x120855e90 '__SVFloat16_t'
|-TypedefDecl 0x12180c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x120855eb0 '__SVFloat32_t'
|-TypedefDecl 0x12180c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x120855ed0 '__SVFloat64_t'
|-TypedefDecl 0x12180c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x120855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12180c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x120855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12180c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x120855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12180c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x120855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12180c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x120855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12180c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x120855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12180c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x120855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12180c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x120855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12180c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x120855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12180c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x120856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12180c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x120856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12180c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x120856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12180c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x120856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12180c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x120856090 '__clang_svint8x3_t'
|-TypedefDecl 0x12180c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1208560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12180c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1208560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12180c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1208560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12180c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x120856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12180ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x120856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12180cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x120856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12180cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x120856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12180cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x120856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12180d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1208561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12180d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1208561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12180d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1208561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12180d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x120856210 '__clang_svint8x4_t'
|-TypedefDecl 0x12180d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x120856230 '__clang_svint16x4_t'
|-TypedefDecl 0x12180d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x120856250 '__clang_svint32x4_t'
|-TypedefDecl 0x12180d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x120856270 '__clang_svint64x4_t'
|-TypedefDecl 0x12180d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x120856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12180d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1208562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12180d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1208562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12180d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1208562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12180d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x120856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12180d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x120856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12180d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x120856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12180d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x120856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12180da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x120856390 '__SVBool_t'
|-TypedefDecl 0x12180da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1208563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12180dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1208563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12180db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1208563f0 '__SVCount_t'
|-TypedefDecl 0x12180dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12180dbb0 'char *'
|   `-BuiltinType 0x1208556b0 'char'
|-TypedefDecl 0x12180dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12180dbb0 'char *'
|   `-BuiltinType 0x1208556b0 'char'
|-FunctionDecl 0x12180ddf8 <dataset_diviso_filec/func13317_nonvuln.c:1:1, line:83:1> line:1:23 invalid GetMVGMacros 'int *(const char *)' static
| |-ParmVarDecl 0x12180dcf0 <col:36, col:48> col:48 used primitive 'const char *'
| `-CompoundStmt 0x12280b2c8 <line:2:1, line:83:1>
|   |-DeclStmt 0x12180dfc0 <line:3:3, line:5:11>
|   | |-VarDecl 0x12180dec0 <line:3:3, line:4:6> col:6 used macro 'char *'
|   | `-VarDecl 0x12180df40 <line:3:3, line:5:6> col:6 used token 'char *'
|   |-DeclStmt 0x12180e058 <line:7:3, line:8:7>
|   | `-VarDecl 0x12180dff0 <line:7:3, line:8:6> col:6 used q 'const char *'
|   |-UnaryExprOrTypeTraitExpr 0x12180e0c8 <line:10:3, line:11:5> 'unsigned long' contains-errors sizeof
|   | `-RecoveryExpr 0x12180e0a8 <col:5> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x120923c78 <line:19:3, line:20:27> 'char *' contains-errors '='
|   | |-DeclRefExpr 0x12180e1a8 <line:19:3> 'char *' lvalue Var 0x12180dec0 'macro' 'char *'
|   | `-CallExpr 0x120923c40 <col:10, line:20:27> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x12180e320 <line:19:10> 'int ()' Function 0x12180e268 'NewSplayTree' 'int ()'
|   |   |-RecoveryExpr 0x12180e3e0 <col:23> '<dependent type>' contains-errors lvalue
|   |   |-RecoveryExpr 0x120923c00 <col:39> '<dependent type>' contains-errors lvalue
|   |   `-RecoveryExpr 0x120923c20 <line:20:5> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x1209242a0 <line:21:3, col:32> 'char *' '='
|   | |-DeclRefExpr 0x120923c98 <col:3> 'char *' lvalue Var 0x12180dec0 'macro' 'char *'
|   | `-ImplicitCastExpr 0x120923e68 <col:9, col:32> 'char *' <IntegralToPointer>
|   |   `-CallExpr 0x120923e28 <col:9, col:32> 'int'
|   |     |-ImplicitCastExpr 0x120923e10 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x120923d98 <col:9> 'int ()' Function 0x120923ce0 'AcquireString' 'int ()'
|   |     `-ImplicitCastExpr 0x120923e50 <col:23> 'const char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x120923db8 <col:23> 'const char *' lvalue ParmVar 0x12180dcf0 'primitive' 'const char *'
|   |-BinaryOperator 0x120924390 <line:22:3, col:32> 'char *' '='
|   | |-DeclRefExpr 0x1209242c0 <col:3> 'char *' lvalue Var 0x12180df40 'token' 'char *'
|   | `-ImplicitCastExpr 0x120924378 <col:9, col:32> 'char *' <IntegralToPointer>
|   |   `-CallExpr 0x120924338 <col:9, col:32> 'int'
|   |     |-ImplicitCastExpr 0x120924320 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1209242e0 <col:9> 'int ()' Function 0x120923ce0 'AcquireString' 'int ()'
|   |     `-ImplicitCastExpr 0x120924360 <col:23> 'const char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x120924300 <col:23> 'const char *' lvalue ParmVar 0x12180dcf0 'primitive' 'const char *'
|   |-ForStmt 0x12280afd0 <line:24:3, line:79:3>
|   | |-BinaryOperator 0x120924768 <line:24:8, col:10> 'const char *' '='
|   | | |-DeclRefExpr 0x120924710 <col:8> 'const char *' lvalue Var 0x12180dff0 'q' 'const char *'
|   | | `-ImplicitCastExpr 0x120924750 <col:10> 'const char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x120924730 <col:10> 'const char *' lvalue ParmVar 0x12180dcf0 'primitive' 'const char *'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x120924820 <col:21, col:27> 'int' '!='
|   | | |-ImplicitCastExpr 0x120924808 <col:21, col:22> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x1209247f0 <col:21, col:22> 'char' <LValueToRValue>
|   | | |   `-UnaryOperator 0x1209247c0 <col:21, col:22> 'const char' lvalue prefix '*' cannot overflow
|   | | |     `-ImplicitCastExpr 0x1209247a8 <col:22> 'const char *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x120924788 <col:22> 'const char *' lvalue Var 0x12180dff0 'q' 'const char *'
|   | | `-CharacterLiteral 0x1209247d8 <col:27> 'int' 0
|   | |-<<<NULL>>>
|   | `-CompoundStmt 0x12280afa8 <line:25:3, line:79:3>
|   |   |-IfStmt 0x120924a30 <line:26:5, line:27:7>
|   |   | |-RecoveryExpr 0x120924a08 <line:26:9, col:43> '_Bool' contains-errors
|   |   | `-BreakStmt 0x120924a28 <line:27:7>
|   |   |-IfStmt 0x120924b10 <line:28:5, line:29:7>
|   |   | |-BinaryOperator 0x120924ae8 <line:28:9, col:19> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x120924ad0 <col:9, col:10> 'int' <IntegralCast>
|   |   | | | `-ImplicitCastExpr 0x120924ab8 <col:9, col:10> 'char' <LValueToRValue>
|   |   | | |   `-UnaryOperator 0x120924a88 <col:9, col:10> 'char' lvalue prefix '*' cannot overflow
|   |   | | |     `-ImplicitCastExpr 0x120924a70 <col:10> 'char *' <LValueToRValue>
|   |   | | |       `-DeclRefExpr 0x120924a50 <col:10> 'char *' lvalue Var 0x12180df40 'token' 'char *'
|   |   | | `-CharacterLiteral 0x120924aa0 <col:19> 'int' 0
|   |   | `-BreakStmt 0x120924b08 <line:29:7>
|   |   `-IfStmt 0x12280af88 <line:30:5, line:78:7>
|   |     |-BinaryOperator 0x122809b48 <line:30:9, col:39> 'int' '=='
|   |     | |-CallExpr 0x122809ac8 <col:9, col:34> 'int'
|   |     | | |-ImplicitCastExpr 0x122809ab0 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x122809a10 <col:9> 'int ()' Function 0x120924b58 'LocaleCompare' 'int ()'
|   |     | | |-ImplicitCastExpr 0x122809af8 <col:23> 'char *' <ArrayToPointerDecay>
|   |     | | | `-StringLiteral 0x122809a70 <col:23> 'char[4]' lvalue "STR"
|   |     | | `-ImplicitCastExpr 0x122809b10 <col:29> 'char *' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x122809a90 <col:29> 'char *' lvalue Var 0x12180df40 'token' 'char *'
|   |     | `-IntegerLiteral 0x122809b28 <col:39> 'int' 0
|   |     `-CompoundStmt 0x12280af68 <line:31:7, line:78:7>
|   |       |-DeclStmt 0x122809c80 <line:32:9, line:34:17>
|   |       | |-VarDecl 0x122809b80 <line:32:9, line:33:12> col:12 used end 'const char *'
|   |       | `-VarDecl 0x122809c00 <line:32:9, line:34:12> col:12 used start 'const char *'
|   |       `-IfStmt 0x12280af48 <line:37:9, line:77:11>
|   |         |-BinaryOperator 0x122809dc8 <line:37:13, col:19> 'int' '=='
|   |         | |-ImplicitCastExpr 0x122809db0 <col:13, col:14> 'int' <IntegralCast>
|   |         | | `-ImplicitCastExpr 0x122809d98 <col:13, col:14> 'char' <LValueToRValue>
|   |         | |   `-UnaryOperator 0x122809d68 <col:13, col:14> 'const char' lvalue prefix '*' cannot overflow
|   |         | |     `-ImplicitCastExpr 0x122809d50 <col:14> 'const char *' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x122809d30 <col:14> 'const char *' lvalue Var 0x12180dff0 'q' 'const char *'
|   |         | `-CharacterLiteral 0x122809d80 <col:19> 'int' 34
|   |         `-CompoundStmt 0x12280af10 <line:38:11, line:77:11>
|   |           |-DeclStmt 0x122809e60 <line:39:13, line:40:37>
|   |           | `-VarDecl 0x122809df8 <line:39:13, line:40:15> col:15 invalid name 'char'
|   |           |-DeclStmt 0x122809ef8 <line:42:13, line:43:17>
|   |           | `-VarDecl 0x122809e90 <line:42:13, line:43:16> col:16 used p 'const char *'
|   |           |-BinaryOperator 0x12280a000 <line:50:13, col:19> 'const char *' '='
|   |           | |-DeclRefExpr 0x122809fa8 <col:13> 'const char *' lvalue Var 0x122809c00 'start' 'const char *'
|   |           | `-ImplicitCastExpr 0x122809fe8 <col:19> 'const char *' <LValueToRValue>
|   |           |   `-DeclRefExpr 0x122809fc8 <col:19> 'const char *' lvalue Var 0x12180dff0 'q' 'const char *'
|   |           |-BinaryOperator 0x12280a078 <line:51:13, col:17> 'const char *' '='
|   |           | |-DeclRefExpr 0x12280a020 <col:13> 'const char *' lvalue Var 0x122809b80 'end' 'const char *'
|   |           | `-ImplicitCastExpr 0x12280a060 <col:17> 'const char *' <LValueToRValue>
|   |           |   `-DeclRefExpr 0x12280a040 <col:17> 'const char *' lvalue Var 0x12180dff0 'q' 'const char *'
|   |           `-ForStmt 0x12280aed8 <line:54:13, line:76:13>
|   |             |-BinaryOperator 0x12280a250 <line:54:18, col:20> 'const char *' '='
|   |             | |-DeclRefExpr 0x12280a1f8 <col:18> 'const char *' lvalue Var 0x122809e90 'p' 'const char *'
|   |             | `-ImplicitCastExpr 0x12280a238 <col:20> 'const char *' <LValueToRValue>
|   |             |   `-DeclRefExpr 0x12280a218 <col:20> 'const char *' lvalue Var 0x12180dff0 'q' 'const char *'
|   |             |-<<<NULL>>>
|   |             |-BinaryOperator 0x12280a308 <col:23, col:29> 'int' '!='
|   |             | |-ImplicitCastExpr 0x12280a2f0 <col:23, col:24> 'int' <IntegralCast>
|   |             | | `-ImplicitCastExpr 0x12280a2d8 <col:23, col:24> 'char' <LValueToRValue>
|   |             | |   `-UnaryOperator 0x12280a2a8 <col:23, col:24> 'const char' lvalue prefix '*' cannot overflow
|   |             | |     `-ImplicitCastExpr 0x12280a290 <col:24> 'const char *' <LValueToRValue>
|   |             | |       `-DeclRefExpr 0x12280a270 <col:24> 'const char *' lvalue Var 0x122809e90 'p' 'const char *'
|   |             | `-CharacterLiteral 0x12280a2c0 <col:29> 'int' 0
|   |             |-<<<NULL>>>
|   |             `-CompoundStmt 0x12280aea8 <line:55:13, line:76:13>
|   |               |-IfStmt 0x12280a408 <line:56:15, line:57:17>
|   |               | |-RecoveryExpr 0x12280a3e0 <line:56:19, col:53> '_Bool' contains-errors
|   |               | `-BreakStmt 0x12280a400 <line:57:17>
|   |               |-IfStmt 0x12280a4e8 <line:58:15, line:59:17>
|   |               | |-BinaryOperator 0x12280a4c0 <line:58:19, col:29> 'int' '=='
|   |               | | |-ImplicitCastExpr 0x12280a4a8 <col:19, col:20> 'int' <IntegralCast>
|   |               | | | `-ImplicitCastExpr 0x12280a490 <col:19, col:20> 'char' <LValueToRValue>
|   |               | | |   `-UnaryOperator 0x12280a460 <col:19, col:20> 'char' lvalue prefix '*' cannot overflow
|   |               | | |     `-ImplicitCastExpr 0x12280a448 <col:20> 'char *' <LValueToRValue>
|   |               | | |       `-DeclRefExpr 0x12280a428 <col:20> 'char *' lvalue Var 0x12180df40 'token' 'char *'
|   |               | | `-CharacterLiteral 0x12280a478 <col:29> 'int' 0
|   |               | `-BreakStmt 0x12280a4e0 <line:59:17>
|   |               |-IfStmt 0x12280a7d8 <line:60:15, line:64:17>
|   |               | |-BinaryOperator 0x12280a600 <line:60:19, col:49> 'int' '=='
|   |               | | |-CallExpr 0x12280a580 <col:19, col:44> 'int'
|   |               | | | |-ImplicitCastExpr 0x12280a568 <col:19> 'int (*)()' <FunctionToPointerDecay>
|   |               | | | | `-DeclRefExpr 0x12280a508 <col:19> 'int ()' Function 0x120924b58 'LocaleCompare' 'int ()'
|   |               | | | |-ImplicitCastExpr 0x12280a5b0 <col:33> 'char *' <LValueToRValue>
|   |               | | | | `-DeclRefExpr 0x12280a528 <col:33> 'char *' lvalue Var 0x12180df40 'token' 'char *'
|   |               | | | `-ImplicitCastExpr 0x12280a5c8 <col:39> 'char *' <ArrayToPointerDecay>
|   |               | | |   `-StringLiteral 0x12280a548 <col:39> 'char[4]' lvalue "STR"
|   |               | | `-IntegerLiteral 0x12280a5e0 <col:49> 'int' 0
|   |               | `-CompoundStmt 0x12280a7c0 <line:61:17, line:64:17>
|   |               |   `-BinaryOperator 0x12280a7a0 <line:62:19, col:39> 'const char *' '='
|   |               |     |-DeclRefExpr 0x12280a620 <col:19> 'const char *' lvalue Var 0x122809b80 'end' 'const char *'
|   |               |     `-BinaryOperator 0x12280a780 <col:23, col:39> 'const char *' '-'
|   |               |       |-BinaryOperator 0x12280a740 <col:23, col:37> 'const char *' '-'
|   |               |       | |-ImplicitCastExpr 0x12280a728 <col:23> 'const char *' <LValueToRValue>
|   |               |       | | `-DeclRefExpr 0x12280a640 <col:23> 'const char *' lvalue Var 0x122809e90 'p' 'const char *'
|   |               |       | `-CallExpr 0x12280a6d0 <col:25, col:37> 'unsigned long'
|   |               |       |   |-ImplicitCastExpr 0x12280a6b8 <col:25> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |               |       |   | `-DeclRefExpr 0x12280a660 <col:25> 'unsigned long (const char *)' Function 0x1209243e8 'strlen' 'unsigned long (const char *)'
|   |               |       |   `-ImplicitCastExpr 0x12280a710 <col:32> 'const char *' <NoOp>
|   |               |       |     `-ImplicitCastExpr 0x12280a6f8 <col:32> 'char *' <LValueToRValue>
|   |               |       |       `-DeclRefExpr 0x12280a680 <col:32> 'char *' lvalue Var 0x12180df40 'token' 'char *'
|   |               |       `-IntegerLiteral 0x12280a760 <col:39> 'int' 1
|   |               `-IfStmt 0x12280ae88 <line:67:15, line:75:17>
|   |                 |-RecoveryExpr 0x12280a9e0 <line:67:19, col:43> '_Bool' contains-errors
|   |                 `-CompoundStmt 0x12280ae70 <line:68:17, line:75:17>
|   |                   `-BreakStmt 0x12280ae68 <line:74:19>
|   |-BinaryOperator 0x12280b1b8 <line:80:3, col:28> 'char *' '='
|   | |-DeclRefExpr 0x12280b008 <col:3> 'char *' lvalue Var 0x12180df40 'token' 'char *'
|   | `-ImplicitCastExpr 0x12280b1a0 <col:9, col:28> 'char *' <IntegralToPointer>
|   |   `-CallExpr 0x12280b160 <col:9, col:28> 'int'
|   |     |-ImplicitCastExpr 0x12280b148 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x12280b108 <col:9> 'int ()' Function 0x12280b050 'DestroyString' 'int ()'
|   |     `-ImplicitCastExpr 0x12280b188 <col:23> 'char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x12280b128 <col:23> 'char *' lvalue Var 0x12180df40 'token' 'char *'
|   `-BinaryOperator 0x12280b2a8 <line:81:3, col:28> 'char *' '='
|     |-DeclRefExpr 0x12280b1d8 <col:3> 'char *' lvalue Var 0x12180dec0 'macro' 'char *'
|     `-ImplicitCastExpr 0x12280b290 <col:9, col:28> 'char *' <IntegralToPointer>
|       `-CallExpr 0x12280b250 <col:9, col:28> 'int'
|         |-ImplicitCastExpr 0x12280b238 <col:9> 'int (*)()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x12280b1f8 <col:9> 'int ()' Function 0x12280b050 'DestroyString' 'int ()'
|         `-ImplicitCastExpr 0x12280b278 <col:23> 'char *' <LValueToRValue>
|           `-DeclRefExpr 0x12280b218 <col:23> 'char *' lvalue Var 0x12180dec0 'macro' 'char *'
`-FunctionDecl 0x1209243e8 <line:23:10> col:10 implicit used strlen 'unsigned long (const char *)' extern
  |-ParmVarDecl 0x1209244e8 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x120924490 <<invalid sloc>> Implicit 902
