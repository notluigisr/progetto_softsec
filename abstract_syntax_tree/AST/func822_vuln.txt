TranslationUnitDecl 0x11d055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x11d0564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x11d055bd0 '__int128'
|-TypedefDecl 0x11d056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x11d055bf0 'unsigned __int128'
|-TypedefDecl 0x11d126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x11d126000 'struct __NSConstantString_tag'
|   `-Record 0x11d056580 '__NSConstantString_tag'
|-TypedefDecl 0x11d126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x11d055d90 '__SVInt8_t'
|-TypedefDecl 0x11d126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x11d055db0 '__SVInt16_t'
|-TypedefDecl 0x11d126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x11d055dd0 '__SVInt32_t'
|-TypedefDecl 0x11d1263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x11d055df0 '__SVInt64_t'
|-TypedefDecl 0x11d126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x11d055e10 '__SVUint8_t'
|-TypedefDecl 0x11d1264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x11d055e30 '__SVUint16_t'
|-TypedefDecl 0x11d126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x11d055e50 '__SVUint32_t'
|-TypedefDecl 0x11d126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x11d055e70 '__SVUint64_t'
|-TypedefDecl 0x11d1265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x11d055e90 '__SVFloat16_t'
|-TypedefDecl 0x11d126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x11d055eb0 '__SVFloat32_t'
|-TypedefDecl 0x11d1266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x11d055ed0 '__SVFloat64_t'
|-TypedefDecl 0x11d126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x11d055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x11d126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x11d055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x11d1267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x11d055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x11d126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x11d055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x11d1268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x11d055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x11d126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x11d055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x11d126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x11d055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x11d1269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x11d055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x11d126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x11d055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x11d126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x11d056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x11d126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x11d056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x11d126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x11d056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x11d126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x11d056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x11d126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x11d056090 '__clang_svint8x3_t'
|-TypedefDecl 0x11d126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x11d0560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x11d126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x11d0560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x11d126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x11d0560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x11d126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x11d056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x11d126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x11d056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x11d126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x11d056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x11d126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x11d056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x11d126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x11d056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x11d127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x11d0561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x11d127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x11d0561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x11d1278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x11d0561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x11d127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x11d056210 '__clang_svint8x4_t'
|-TypedefDecl 0x11d1279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x11d056230 '__clang_svint16x4_t'
|-TypedefDecl 0x11d127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x11d056250 '__clang_svint32x4_t'
|-TypedefDecl 0x11d127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x11d056270 '__clang_svint64x4_t'
|-TypedefDecl 0x11d127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x11d056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x11d127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x11d0562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x11d127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x11d0562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x11d127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x11d0562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x11d127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x11d056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x11d127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x11d056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x11d127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x11d056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x11d127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x11d056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x11d127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x11d056390 '__SVBool_t'
|-TypedefDecl 0x11d127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x11d0563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x11d127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x11d0563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x11d127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x11d0563f0 '__SVCount_t'
|-TypedefDecl 0x11d127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x11d127fb0 'char *'
|   `-BuiltinType 0x11d0556b0 'char'
|-TypedefDecl 0x11d128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x11d127fb0 'char *'
|   `-BuiltinType 0x11d0556b0 'char'
|-FunctionDecl 0x11d128408 <dataset_diviso_filec/func822_vuln.c:1:1, line:40:1> line:1:12 invalid decode_bit_string 'int (const int *, int, void *, int, int)' static
| |-ParmVarDecl 0x11d1280f0 <col:30, col:41> col:41 invalid inbuf 'const int *'
| |-ParmVarDecl 0x11d128170 <col:48, col:55> col:55 invalid inlen 'int'
| |-ParmVarDecl 0x11d1281f0 <col:62, col:68> col:68 used outbuf 'void *'
| |-ParmVarDecl 0x11d128270 <line:2:9, col:16> col:16 invalid outlen 'int'
| |-ParmVarDecl 0x11d1282f0 <col:24, col:28> col:28 used invert 'int'
| `-CompoundStmt 0x11d80ad98 <line:3:1, line:40:1>
|   |-DeclStmt 0x11d128578 <line:4:2, col:22>
|   | `-VarDecl 0x11d1284f0 <col:2, col:12> col:12 referenced invalid in 'const int *'
|   |-DeclStmt 0x11d1286d0 <line:6:2, col:28>
|   | `-VarDecl 0x11d1285d8 <col:2, col:24> col:6 used zero_bits 'int' cinit
|   |   `-BinaryOperator 0x11d1286b0 <col:18, col:24> '<dependent type>' contains-errors '&'
|   |     |-UnaryOperator 0x11d128678 <col:18, col:19> '<dependent type>' contains-errors prefix '*' cannot overflow
|   |     | `-ImplicitCastExpr 0x11d128660 <col:19> '<dependent type>' contains-errors <LValueToRValue>
|   |     |   `-RecoveryExpr 0x11d128640 <col:19> '<dependent type>' contains-errors lvalue
|   |     `-IntegerLiteral 0x11d128690 <col:24> 'int' 7
|   |-BinaryOperator 0x11d1287e0 <line:7:2, col:31> 'unsigned long' contains-errors '='
|   | |-UnaryExprOrTypeTraitExpr 0x11d1287c0 <col:2, col:9> 'unsigned long' contains-errors sizeof
|   | | `-RecoveryExpr 0x11d1287a0 <col:9> '<dependent type>' contains-errors lvalue
|   | `-BinaryOperator 0x11d128760 <col:23, col:31> '<dependent type>' contains-errors '-'
|   |   |-RecoveryExpr 0x11d128720 <col:23> '<dependent type>' contains-errors lvalue
|   |   `-IntegerLiteral 0x11d128740 <col:31> 'int' 1
|   |-DeclStmt 0x11d808938 <line:8:2, col:18>
|   | |-VarDecl 0x11d808818 <col:2, col:6> col:6 used i 'int'
|   | `-VarDecl 0x11d808898 <col:2, col:17> col:9 used count 'int' cinit
|   |   `-IntegerLiteral 0x11d808900 <col:17> 'int' 0
|   |-CallExpr 0x11d8090c0 <line:10:2, col:26> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x11d809010 <col:2> 'void *(void *, int, unsigned long)' Function 0x11d808dc0 'memset' 'void *(void *, int, unsigned long)'
|   | |-DeclRefExpr 0x11d809030 <col:9> 'void *' lvalue ParmVar 0x11d1281f0 'outbuf' 'void *'
|   | |-IntegerLiteral 0x11d809050 <col:17> 'int' 0
|   | `-RecoveryExpr 0x11d809070 <col:20> '<dependent type>' contains-errors lvalue
|   |-UnaryOperator 0x11d809140 <line:11:2, col:4> '<dependent type>' contains-errors postfix '++' cannot overflow
|   | `-RecoveryExpr 0x11d809118 <col:2> '<dependent type>' contains-errors lvalue
|   |   `-DeclRefExpr 0x11d8090f8 <col:2> 'const int *' lvalue Var 0x11d1284f0 'in' 'const int *'
|   |-IfStmt 0x11d809238 <line:12:2, line:13:10>
|   | |-BinaryOperator 0x11d8091d0 <line:12:6, col:15> 'int' contains-errors '<'
|   | | |-RecoveryExpr 0x11d809158 <col:6> '<dependent type>' contains-errors lvalue
|   | | `-RecoveryExpr 0x11d8091b0 <col:15> '<dependent type>' contains-errors lvalue
|   | `-ReturnStmt 0x11d809228 <line:13:3, col:10>
|   |   `-RecoveryExpr 0x11d809208 <col:10> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x11d809300 <line:14:2, line:15:10>
|   | |-BinaryOperator 0x11d809298 <line:14:6, col:14> 'int' contains-errors '<'
|   | | |-RecoveryExpr 0x11d809258 <col:6> '<dependent type>' contains-errors lvalue
|   | | `-IntegerLiteral 0x11d809278 <col:14> 'int' 1
|   | `-ReturnStmt 0x11d8092f0 <line:15:3, col:10>
|   |   `-RecoveryExpr 0x11d8092d0 <col:10> '<dependent type>' contains-errors lvalue
|   |-WhileStmt 0x11d80ac78 <line:16:2, line:38:2>
|   | |-RecoveryExpr 0x11d809338 <line:16:9> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x11d80ac38 <col:22, line:38:2>
|   |   |-DeclStmt 0x11d8093d8 <line:20:3, col:17>
|   |   | `-VarDecl 0x11d809370 <col:3, col:7> col:7 used bits_to_go 'int'
|   |   |-BinaryOperator 0x11d8094c8 <line:22:3, col:10> '<dependent type>' contains-errors '='
|   |   | |-UnaryOperator 0x11d8094b0 <col:3, col:4> '<dependent type>' contains-errors prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x11d809498 <col:4> '<dependent type>' contains-errors <LValueToRValue>
|   |   | |   `-RecoveryExpr 0x11d809478 <col:4> '<dependent type>' contains-errors lvalue
|   |   | `-IntegerLiteral 0x11d809438 <col:10> 'int' 0
|   |   |-IfStmt 0x11d809698 <line:23:3, line:26:17> has_else
|   |   | |-BinaryOperator 0x11d809560 <line:23:7, col:22> 'int' contains-errors '=='
|   |   | | |-RecoveryExpr 0x11d809540 <col:7> '<dependent type>' contains-errors lvalue
|   |   | | `-IntegerLiteral 0x11d809500 <col:22> 'int' 1
|   |   | |-BinaryOperator 0x11d809618 <line:24:4, col:21> 'int' contains-errors '='
|   |   | | |-DeclRefExpr 0x11d809580 <col:4> 'int' lvalue Var 0x11d809370 'bits_to_go' 'int'
|   |   | | `-BinaryOperator 0x11d8095f8 <col:17, col:21> 'int' contains-errors '-'
|   |   | |   |-IntegerLiteral 0x11d8095a0 <col:17> 'int' 8
|   |   | |   `-ImplicitCastExpr 0x11d8095e0 <col:21> 'int' contains-errors <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x11d8095c0 <col:21> 'int' contains-errors lvalue Var 0x11d1285d8 'zero_bits' 'int'
|   |   | `-BinaryOperator 0x11d809678 <line:26:4, col:17> 'int' '='
|   |   |   |-DeclRefExpr 0x11d809638 <col:4> 'int' lvalue Var 0x11d809370 'bits_to_go' 'int'
|   |   |   `-IntegerLiteral 0x11d809658 <col:17> 'int' 8
|   |   |-IfStmt 0x11d80ab70 <line:27:3, line:33:3> has_else
|   |   | |-ImplicitCastExpr 0x11d8096e8 <line:27:7> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x11d8096c8 <col:7> 'int' lvalue ParmVar 0x11d1282f0 'invert' 'int'
|   |   | |-ForStmt 0x11d80a9c8 <line:28:4, line:30:4>
|   |   | | |-BinaryOperator 0x11d809740 <line:28:9, col:13> 'int' '='
|   |   | | | |-DeclRefExpr 0x11d809700 <col:9> 'int' lvalue Var 0x11d808818 'i' 'int'
|   |   | | | `-IntegerLiteral 0x11d809720 <col:13> 'int' 0
|   |   | | |-<<<NULL>>>
|   |   | | |-BinaryOperator 0x11d8097d0 <col:16, col:20> 'int' '<'
|   |   | | | |-ImplicitCastExpr 0x11d8097a0 <col:16> 'int' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x11d809760 <col:16> 'int' lvalue Var 0x11d808818 'i' 'int'
|   |   | | | `-ImplicitCastExpr 0x11d8097b8 <col:20> 'int' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x11d809780 <col:20> 'int' lvalue Var 0x11d809370 'bits_to_go' 'int'
|   |   | | |-UnaryOperator 0x11d80a420 <col:32, col:33> 'int' postfix '++'
|   |   | | | `-DeclRefExpr 0x11d80a400 <col:32> 'int' lvalue Var 0x11d808818 'i' 'int'
|   |   | | `-CompoundStmt 0x11d80a9b0 <col:37, line:30:4>
|   |   | |   `-CompoundAssignOperator 0x11d80a980 <line:29:5, col:39> '<dependent type>' contains-errors '|=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   |   | |     |-UnaryOperator 0x11d80a840 <col:5, col:6> '<dependent type>' contains-errors prefix '*' cannot overflow
|   |   | |     | `-ImplicitCastExpr 0x11d80a828 <col:6> '<dependent type>' contains-errors <LValueToRValue>
|   |   | |     |   `-RecoveryExpr 0x11d80a808 <col:6> '<dependent type>' contains-errors lvalue
|   |   | |     `-BinaryOperator 0x11d80a960 <col:13, col:39> '<dependent type>' contains-errors '<<'
|   |   | |       |-ParenExpr 0x11d80a940 <col:13, col:34> '<dependent type>' contains-errors
|   |   | |       | `-BinaryOperator 0x11d80a920 <col:14, col:33> '<dependent type>' contains-errors '&'
|   |   | |       |   |-ParenExpr 0x11d80a900 <col:14, col:29> '<dependent type>' contains-errors
|   |   | |       |   | `-BinaryOperator 0x11d80a8e0 <col:15, col:28> '<dependent type>' contains-errors '>>'
|   |   | |       |   |   |-UnaryOperator 0x11d80a870 <col:15, col:16> '<dependent type>' contains-errors prefix '*' cannot overflow
|   |   | |       |   |   | `-ImplicitCastExpr 0x11d80a858 <col:16> '<dependent type>' contains-errors <LValueToRValue>
|   |   | |       |   |   |   `-RecoveryExpr 0x11d80a480 <col:16> '<dependent type>' contains-errors lvalue
|   |   | |       |   |   `-ParenExpr 0x11d80a8c0 <col:22, col:28> 'int'
|   |   | |       |   |     `-BinaryOperator 0x11d80a8a0 <col:23, col:27> 'int' '-'
|   |   | |       |   |       |-IntegerLiteral 0x11d80a4d0 <col:23> 'int' 7
|   |   | |       |   |       `-ImplicitCastExpr 0x11d80a888 <col:27> 'int' <LValueToRValue>
|   |   | |       |   |         `-DeclRefExpr 0x11d80a4f0 <col:27> 'int' lvalue Var 0x11d808818 'i' 'int'
|   |   | |       |   `-IntegerLiteral 0x11d80a650 <col:33> 'int' 1
|   |   | |       `-DeclRefExpr 0x11d80a798 <col:39> 'int' lvalue Var 0x11d808818 'i' 'int'
|   |   | `-CompoundStmt 0x11d80ab58 <line:31:8, line:33:3>
|   |   |   `-BinaryOperator 0x11d80ab38 <line:32:4, col:12> '<dependent type>' contains-errors '='
|   |   |     |-UnaryOperator 0x11d80aaf0 <col:4, col:5> '<dependent type>' contains-errors prefix '*' cannot overflow
|   |   |     | `-ImplicitCastExpr 0x11d80aad8 <col:5> '<dependent type>' contains-errors <LValueToRValue>
|   |   |     |   `-RecoveryExpr 0x11d80aab8 <col:5> '<dependent type>' contains-errors lvalue
|   |   |     `-UnaryOperator 0x11d80ab20 <col:11, col:12> '<dependent type>' contains-errors prefix '*' cannot overflow
|   |   |       `-ImplicitCastExpr 0x11d80ab08 <col:12> '<dependent type>' contains-errors <LValueToRValue>
|   |   |         `-RecoveryExpr 0x11d80aa48 <col:12> '<dependent type>' contains-errors lvalue
|   |   |-UnaryOperator 0x11d80abe8 <line:35:3, col:5> '<dependent type>' contains-errors postfix '++' cannot overflow
|   |   | `-RecoveryExpr 0x11d80abc0 <col:3> '<dependent type>' contains-errors lvalue
|   |   |   `-DeclRefExpr 0x11d80aba0 <col:3> 'const int *' lvalue Var 0x11d1284f0 'in' 'const int *'
|   |   `-UnaryOperator 0x11d80ac20 <line:37:3, col:8> 'int' postfix '++'
|   |     `-DeclRefExpr 0x11d80ac00 <col:3> 'int' lvalue Var 0x11d808898 'count' 'int'
|   `-ReturnStmt 0x11d80ad88 <line:39:2, col:23>
|     `-BinaryOperator 0x11d80ad68 <col:9, col:23> 'int' contains-errors '-'
|       |-ParenExpr 0x11d80ad10 <col:9, col:19> 'int'
|       | `-BinaryOperator 0x11d80acf0 <col:10, col:18> 'int' '*'
|       |   |-ImplicitCastExpr 0x11d80acd8 <col:10> 'int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x11d80ac98 <col:10> 'int' lvalue Var 0x11d808898 'count' 'int'
|       |   `-IntegerLiteral 0x11d80acb8 <col:18> 'int' 8
|       `-ImplicitCastExpr 0x11d80ad50 <col:23> 'int' contains-errors <LValueToRValue>
|         `-DeclRefExpr 0x11d80ad30 <col:23> 'int' contains-errors lvalue Var 0x11d1285d8 'zero_bits' 'int'
`-FunctionDecl 0x11d808dc0 <line:10:2> col:2 implicit used memset 'void *(void *, int, unsigned long)' extern
  |-ParmVarDecl 0x11d808ec0 <<invalid sloc>> <invalid sloc> 'void *'
  |-ParmVarDecl 0x11d808f28 <<invalid sloc>> <invalid sloc> 'int'
  |-ParmVarDecl 0x11d808f90 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x11d808e68 <<invalid sloc>> Implicit 900
