TranslationUnitDecl 0x145855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1458564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x145855bd0 '__int128'
|-TypedefDecl 0x145856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x145855bf0 'unsigned __int128'
|-TypedefDecl 0x145926230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x145926000 'struct __NSConstantString_tag'
|   `-Record 0x145856580 '__NSConstantString_tag'
|-TypedefDecl 0x145926298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x145855d90 '__SVInt8_t'
|-TypedefDecl 0x145926300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x145855db0 '__SVInt16_t'
|-TypedefDecl 0x145926368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x145855dd0 '__SVInt32_t'
|-TypedefDecl 0x1459263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x145855df0 '__SVInt64_t'
|-TypedefDecl 0x145926438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x145855e10 '__SVUint8_t'
|-TypedefDecl 0x1459264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x145855e30 '__SVUint16_t'
|-TypedefDecl 0x145926508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x145855e50 '__SVUint32_t'
|-TypedefDecl 0x145926570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x145855e70 '__SVUint64_t'
|-TypedefDecl 0x1459265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x145855e90 '__SVFloat16_t'
|-TypedefDecl 0x145926640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x145855eb0 '__SVFloat32_t'
|-TypedefDecl 0x1459266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x145855ed0 '__SVFloat64_t'
|-TypedefDecl 0x145926710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x145855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x145926778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x145855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1459267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x145855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x145926848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x145855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1459268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x145855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x145926918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x145855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x145926980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x145855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1459269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x145855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x145926a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x145855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x145926ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x145856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x145926b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x145856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x145926b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x145856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x145926bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x145856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x145926c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x145856090 '__clang_svint8x3_t'
|-TypedefDecl 0x145926cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1458560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x145926d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1458560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x145926d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1458560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x145926df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x145856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x145926e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x145856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x145926ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x145856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x145926f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x145856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x145926f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x145856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x145927800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1458561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x145927868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1458561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1459278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1458561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x145927938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x145856210 '__clang_svint8x4_t'
|-TypedefDecl 0x1459279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x145856230 '__clang_svint16x4_t'
|-TypedefDecl 0x145927a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x145856250 '__clang_svint32x4_t'
|-TypedefDecl 0x145927a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x145856270 '__clang_svint64x4_t'
|-TypedefDecl 0x145927ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x145856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x145927b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1458562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x145927ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1458562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x145927c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1458562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x145927c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x145856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x145927ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x145856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x145927d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x145856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x145927db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x145856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x145927e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x145856390 '__SVBool_t'
|-TypedefDecl 0x145927e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1458563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x145927ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1458563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x145927f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1458563f0 '__SVCount_t'
|-TypedefDecl 0x145927ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x145927fb0 'char *'
|   `-BuiltinType 0x1458556b0 'char'
|-TypedefDecl 0x145928068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x145927fb0 'char *'
|   `-BuiltinType 0x1458556b0 'char'
`-FunctionDecl 0x1459284a8 <dataset_diviso_filec/func46_vuln.c:1:1, line:53:1> line:1:1 asn1_get_tag_der 'int (const unsigned char *, int, unsigned char *, int *, unsigned long *)'
  |-ParmVarDecl 0x145928108 <col:19, col:40> col:40 used der 'const unsigned char *'
  |-ParmVarDecl 0x145928188 <col:45, col:49> col:49 used der_len 'int'
  |-ParmVarDecl 0x145928238 <line:2:5, col:20> col:20 used cls 'unsigned char *'
  |-ParmVarDecl 0x1459282e8 <col:25, col:30> col:30 used len 'int *'
  |-ParmVarDecl 0x145928398 <col:35, col:50> col:50 used tag 'unsigned long *'
  `-CompoundStmt 0x14680a348 <line:3:1, line:53:1>
    |-DeclStmt 0x145928640 <line:4:3, col:19>
    | `-VarDecl 0x1459285d8 <col:3, col:16> col:16 used ris 'unsigned int'
    |-DeclStmt 0x1459286d8 <line:5:3, col:11>
    | `-VarDecl 0x145928670 <col:3, col:7> col:7 used punt 'int'
    |-IfStmt 0x145940bb8 <line:7:3, line:8:12>
    | |-BinaryOperator 0x145940b50 <line:7:7, col:44> 'int' contains-errors '||'
    | | |-BinaryOperator 0x145940af0 <col:7, col:32> 'int' contains-errors '||'
    | | | |-BinaryOperator 0x145940a98 <col:7, col:14> 'int' contains-errors '=='
    | | | | |-DeclRefExpr 0x1459286f0 <col:7> 'const unsigned char *' lvalue ParmVar 0x145928108 'der' 'const unsigned char *'
    | | | | `-RecoveryExpr 0x145940a78 <col:14> '<dependent type>' contains-errors lvalue
    | | | `-BinaryOperator 0x145940ad0 <col:22, col:32> 'int' '<'
    | | |   |-ImplicitCastExpr 0x145940ab8 <col:22> 'int' <LValueToRValue>
    | | |   | `-DeclRefExpr 0x145928760 <col:22> 'int' lvalue ParmVar 0x145928188 'der_len' 'int'
    | | |   `-IntegerLiteral 0x145928780 <col:32> 'int' 2
    | | `-BinaryOperator 0x145940b30 <col:37, col:44> 'int' contains-errors '=='
    | |   |-DeclRefExpr 0x145940a00 <col:37> 'int *' lvalue ParmVar 0x1459282e8 'len' 'int *'
    | |   `-RecoveryExpr 0x145940b10 <col:44> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x145940ba8 <line:8:5, col:12>
    |   `-RecoveryExpr 0x145940b88 <col:12> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x145940d28 <line:10:3, col:19> 'unsigned char' '='
    | |-UnaryOperator 0x145940c10 <col:3, col:4> 'unsigned char' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x145940bf8 <col:4> 'unsigned char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x145940bd8 <col:4> 'unsigned char *' lvalue ParmVar 0x145928238 'cls' 'unsigned char *'
    | `-ImplicitCastExpr 0x145940d10 <col:10, col:19> 'unsigned char' <IntegralCast>
    |   `-BinaryOperator 0x145940cf0 <col:10, col:19> 'int' '&'
    |     |-ImplicitCastExpr 0x145940cd8 <col:10, col:15> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x145940cc0 <col:10, col:15> 'unsigned char' <LValueToRValue>
    |     |   `-ArraySubscriptExpr 0x145940c80 <col:10, col:15> 'const unsigned char' lvalue
    |     |     |-ImplicitCastExpr 0x145940c68 <col:10> 'const unsigned char *' <LValueToRValue>
    |     |     | `-DeclRefExpr 0x145940c28 <col:10> 'const unsigned char *' lvalue ParmVar 0x145928108 'der' 'const unsigned char *'
    |     |     `-IntegerLiteral 0x145940c48 <col:14> 'int' 0
    |     `-IntegerLiteral 0x145940ca0 <col:19> 'int' 224
    |-IfStmt 0x14680a1b8 <line:11:3, line:48:5> has_else
    | |-BinaryOperator 0x145940e70 <line:11:7, col:26> 'int' '!='
    | | |-ParenExpr 0x145940e30 <col:7, col:21> 'int'
    | | | `-BinaryOperator 0x145940e10 <col:8, col:17> 'int' '&'
    | | |   |-ImplicitCastExpr 0x145940df8 <col:8, col:13> 'int' <IntegralCast>
    | | |   | `-ImplicitCastExpr 0x145940de0 <col:8, col:13> 'unsigned char' <LValueToRValue>
    | | |   |   `-ArraySubscriptExpr 0x145940da0 <col:8, col:13> 'const unsigned char' lvalue
    | | |   |     |-ImplicitCastExpr 0x145940d88 <col:8> 'const unsigned char *' <LValueToRValue>
    | | |   |     | `-DeclRefExpr 0x145940d48 <col:8> 'const unsigned char *' lvalue ParmVar 0x145928108 'der' 'const unsigned char *'
    | | |   |     `-IntegerLiteral 0x145940d68 <col:12> 'int' 0
    | | |   `-IntegerLiteral 0x145940dc0 <col:17> 'int' 31
    | | `-IntegerLiteral 0x145940e50 <col:26> 'int' 31
    | |-CompoundStmt 0x145941060 <line:12:5, line:16:5>
    | | |-BinaryOperator 0x145940f00 <line:14:7, col:14> 'int' '='
    | | | |-UnaryOperator 0x145940ec8 <col:7, col:8> 'int' lvalue prefix '*' cannot overflow
    | | | | `-ImplicitCastExpr 0x145940eb0 <col:8> 'int *' <LValueToRValue>
    | | | |   `-DeclRefExpr 0x145940e90 <col:8> 'int *' lvalue ParmVar 0x1459282e8 'len' 'int *'
    | | | `-IntegerLiteral 0x145940ee0 <col:14> 'int' 1
    | | `-BinaryOperator 0x145941040 <line:15:7, col:22> 'unsigned int' '='
    | |   |-DeclRefExpr 0x145940f20 <col:7> 'unsigned int' lvalue Var 0x1459285d8 'ris' 'unsigned int'
    | |   `-ImplicitCastExpr 0x145941028 <col:13, col:22> 'unsigned int' <IntegralCast>
    | |     `-BinaryOperator 0x145941008 <col:13, col:22> 'int' '&'
    | |       |-ImplicitCastExpr 0x145940ff0 <col:13, col:18> 'int' <IntegralCast>
    | |       | `-ImplicitCastExpr 0x145940fd8 <col:13, col:18> 'unsigned char' <LValueToRValue>
    | |       |   `-ArraySubscriptExpr 0x145940f98 <col:13, col:18> 'const unsigned char' lvalue
    | |       |     |-ImplicitCastExpr 0x145940f80 <col:13> 'const unsigned char *' <LValueToRValue>
    | |       |     | `-DeclRefExpr 0x145940f40 <col:13> 'const unsigned char *' lvalue ParmVar 0x145928108 'der' 'const unsigned char *'
    | |       |     `-IntegerLiteral 0x145940f60 <col:17> 'int' 0
    | |       `-IntegerLiteral 0x145940fb8 <col:22> 'int' 31
    | `-CompoundStmt 0x14680a158 <line:18:5, line:48:5>
    |   |-BinaryOperator 0x1459410c0 <line:20:7, col:14> 'int' '='
    |   | |-DeclRefExpr 0x145941080 <col:7> 'int' lvalue Var 0x145928670 'punt' 'int'
    |   | `-IntegerLiteral 0x1459410a0 <col:14> 'int' 1
    |   |-BinaryOperator 0x145941138 <line:21:7, col:13> 'unsigned int' '='
    |   | |-DeclRefExpr 0x1459410e0 <col:7> 'unsigned int' lvalue Var 0x1459285d8 'ris' 'unsigned int'
    |   | `-ImplicitCastExpr 0x145941120 <col:13> 'unsigned int' <IntegralCast>
    |   |   `-IntegerLiteral 0x145941100 <col:13> 'int' 0
    |   |-WhileStmt 0x146809980 <line:22:7, line:33:2>
    |   | |-BinaryOperator 0x1459412e8 <line:22:14, col:45> 'int' '&&'
    |   | | |-BinaryOperator 0x1459411c8 <col:14, col:22> 'int' '<='
    |   | | | |-ImplicitCastExpr 0x145941198 <col:14> 'int' <LValueToRValue>
    |   | | | | `-DeclRefExpr 0x145941158 <col:14> 'int' lvalue Var 0x145928670 'punt' 'int'
    |   | | | `-ImplicitCastExpr 0x1459411b0 <col:22> 'int' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x145941178 <col:22> 'int' lvalue ParmVar 0x145928188 'der_len' 'int'
    |   | | `-BinaryOperator 0x1459412c8 <col:33, col:45> 'int' '&'
    |   | |   |-ImplicitCastExpr 0x1459412b0 <col:33, col:41> 'int' <IntegralCast>
    |   | |   | `-ImplicitCastExpr 0x145941298 <col:33, col:41> 'unsigned char' <LValueToRValue>
    |   | |   |   `-ArraySubscriptExpr 0x145941258 <col:33, col:41> 'const unsigned char' lvalue
    |   | |   |     |-ImplicitCastExpr 0x145941228 <col:33> 'const unsigned char *' <LValueToRValue>
    |   | |   |     | `-DeclRefExpr 0x1459411e8 <col:33> 'const unsigned char *' lvalue ParmVar 0x145928108 'der' 'const unsigned char *'
    |   | |   |     `-ImplicitCastExpr 0x145941240 <col:37> 'int' <LValueToRValue>
    |   | |   |       `-DeclRefExpr 0x145941208 <col:37> 'int' lvalue Var 0x145928670 'punt' 'int'
    |   | |   `-IntegerLiteral 0x145941278 <col:45> 'int' 128
    |   | `-CompoundStmt 0x146809948 <line:23:2, line:33:2>
    |   |   |-IfStmt 0x145941558 <line:25:4, line:26:13>
    |   |   | |-CallExpr 0x1459414c8 <line:25:8, col:39> 'int'
    |   |   | | |-ImplicitCastExpr 0x1459414b0 <col:8> 'int (*)()' <FunctionToPointerDecay>
    |   |   | | | `-DeclRefExpr 0x145941420 <col:8> 'int ()' Function 0x145941368 'INT_MULTIPLY_OVERFLOW' 'int ()'
    |   |   | | |-ImplicitCastExpr 0x1459414f8 <col:31> 'unsigned int' <LValueToRValue>
    |   |   | | | `-DeclRefExpr 0x145941440 <col:31> 'unsigned int' lvalue Var 0x1459285d8 'ris' 'unsigned int'
    |   |   | | `-IntegerLiteral 0x145941460 <col:36> 'int' 128
    |   |   | `-ReturnStmt 0x145941548 <line:26:6, col:13>
    |   |   |   `-RecoveryExpr 0x145941528 <col:13> '<dependent type>' contains-errors lvalue
    |   |   |-CompoundAssignOperator 0x1459415d0 <line:27:4, col:11> 'unsigned int' '*=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    |   |   | |-DeclRefExpr 0x145941578 <col:4> 'unsigned int' lvalue Var 0x1459285d8 'ris' 'unsigned int'
    |   |   | `-ImplicitCastExpr 0x1459415b8 <col:11> 'unsigned int' <IntegralCast>
    |   |   |   `-IntegerLiteral 0x145941598 <col:11> 'int' 128
    |   |   |-IfStmt 0x145941968 <line:29:4, line:30:13>
    |   |   | |-CallExpr 0x1459418d8 <line:29:8, col:62> 'int'
    |   |   | | |-ImplicitCastExpr 0x1459418c0 <col:8> 'int (*)()' <FunctionToPointerDecay>
    |   |   | | | `-DeclRefExpr 0x1459416e0 <col:8> 'int ()' Function 0x145941628 'INT_ADD_OVERFLOW' 'int ()'
    |   |   | | |-ImplicitCastExpr 0x145941908 <col:26> 'unsigned int' <LValueToRValue>
    |   |   | | | `-DeclRefExpr 0x145941700 <col:26> 'unsigned int' lvalue Var 0x1459285d8 'ris' 'unsigned int'
    |   |   | | `-ParenExpr 0x1459418a0 <col:31, col:61> 'unsigned int'
    |   |   | |   `-CStyleCastExpr 0x145941878 <col:32, col:60> 'unsigned int' <IntegralCast>
    |   |   | |     `-ParenExpr 0x145941858 <col:43, col:60> 'int'
    |   |   | |       `-BinaryOperator 0x145941800 <col:44, col:56> 'int' '&'
    |   |   | |         |-ImplicitCastExpr 0x1459417e8 <col:44, col:52> 'int' <IntegralCast>
    |   |   | |         | `-ImplicitCastExpr 0x1459417d0 <col:44, col:52> 'unsigned char' <LValueToRValue>
    |   |   | |         |   `-ArraySubscriptExpr 0x145941790 <col:44, col:52> 'const unsigned char' lvalue
    |   |   | |         |     |-ImplicitCastExpr 0x145941760 <col:44> 'const unsigned char *' <LValueToRValue>
    |   |   | |         |     | `-DeclRefExpr 0x145941720 <col:44> 'const unsigned char *' lvalue ParmVar 0x145928108 'der' 'const unsigned char *'
    |   |   | |         |     `-ImplicitCastExpr 0x145941778 <col:48> 'int' <LValueToRValue>
    |   |   | |         |       `-DeclRefExpr 0x145941740 <col:48> 'int' lvalue Var 0x145928670 'punt' 'int'
    |   |   | |         `-IntegerLiteral 0x1459417b0 <col:56> 'int' 127
    |   |   | `-ReturnStmt 0x145941958 <line:30:6, col:13>
    |   |   |   `-RecoveryExpr 0x145941938 <col:13> '<dependent type>' contains-errors lvalue
    |   |   |-CompoundAssignOperator 0x1468098e0 <line:31:4, col:28> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    |   |   | |-DeclRefExpr 0x145941988 <col:4> 'unsigned int' lvalue Var 0x1459285d8 'ris' 'unsigned int'
    |   |   | `-ImplicitCastExpr 0x1468098c8 <col:11, col:28> 'unsigned int' <IntegralCast>
    |   |   |   `-ParenExpr 0x1468098a8 <col:11, col:28> 'int'
    |   |   |     `-BinaryOperator 0x146809888 <col:12, col:24> 'int' '&'
    |   |   |       |-ImplicitCastExpr 0x146809870 <col:12, col:20> 'int' <IntegralCast>
    |   |   |       | `-ImplicitCastExpr 0x146809858 <col:12, col:20> 'unsigned char' <LValueToRValue>
    |   |   |       |   `-ArraySubscriptExpr 0x146809818 <col:12, col:20> 'const unsigned char' lvalue
    |   |   |       |     |-ImplicitCastExpr 0x1459419e8 <col:12> 'const unsigned char *' <LValueToRValue>
    |   |   |       |     | `-DeclRefExpr 0x1459419a8 <col:12> 'const unsigned char *' lvalue ParmVar 0x145928108 'der' 'const unsigned char *'
    |   |   |       |     `-ImplicitCastExpr 0x146809800 <col:16> 'int' <LValueToRValue>
    |   |   |       |       `-DeclRefExpr 0x1459419c8 <col:16> 'int' lvalue Var 0x145928670 'punt' 'int'
    |   |   |       `-IntegerLiteral 0x146809838 <col:24> 'int' 127
    |   |   `-UnaryOperator 0x146809930 <line:32:4, col:8> 'int' postfix '++'
    |   |     `-DeclRefExpr 0x146809910 <col:4> 'int' lvalue Var 0x145928670 'punt' 'int'
    |   |-IfStmt 0x146809a78 <line:35:7, line:36:9>
    |   | |-BinaryOperator 0x146809a10 <line:35:11, col:19> 'int' '>='
    |   | | |-ImplicitCastExpr 0x1468099e0 <col:11> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x1468099a0 <col:11> 'int' lvalue Var 0x145928670 'punt' 'int'
    |   | | `-ImplicitCastExpr 0x1468099f8 <col:19> 'int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x1468099c0 <col:19> 'int' lvalue ParmVar 0x145928188 'der_len' 'int'
    |   | `-ReturnStmt 0x146809a68 <line:36:2, col:9>
    |   |   `-RecoveryExpr 0x146809a48 <col:9> '<dependent type>' contains-errors lvalue
    |   |-IfStmt 0x146809ba0 <line:38:7, line:39:9>
    |   | |-CallExpr 0x146809b10 <line:38:11, col:42> 'int'
    |   | | |-ImplicitCastExpr 0x146809af8 <col:11> 'int (*)()' <FunctionToPointerDecay>
    |   | | | `-DeclRefExpr 0x146809a98 <col:11> 'int ()' Function 0x145941368 'INT_MULTIPLY_OVERFLOW' 'int ()'
    |   | | |-ImplicitCastExpr 0x146809b40 <col:34> 'unsigned int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x146809ab8 <col:34> 'unsigned int' lvalue Var 0x1459285d8 'ris' 'unsigned int'
    |   | | `-IntegerLiteral 0x146809ad8 <col:39> 'int' 128
    |   | `-ReturnStmt 0x146809b90 <line:39:2, col:9>
    |   |   `-RecoveryExpr 0x146809b70 <col:9> '<dependent type>' contains-errors lvalue
    |   |-CompoundAssignOperator 0x146809c18 <line:40:7, col:14> 'unsigned int' '*=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    |   | |-DeclRefExpr 0x146809bc0 <col:7> 'unsigned int' lvalue Var 0x1459285d8 'ris' 'unsigned int'
    |   | `-ImplicitCastExpr 0x146809c00 <col:14> 'unsigned int' <IntegralCast>
    |   |   `-IntegerLiteral 0x146809be0 <col:14> 'int' 128
    |   |-IfStmt 0x146809ed0 <line:42:7, line:43:9>
    |   | |-CallExpr 0x146809e40 <line:42:11, col:65> 'int'
    |   | | |-ImplicitCastExpr 0x146809e28 <col:11> 'int (*)()' <FunctionToPointerDecay>
    |   | | | `-DeclRefExpr 0x146809c48 <col:11> 'int ()' Function 0x145941628 'INT_ADD_OVERFLOW' 'int ()'
    |   | | |-ImplicitCastExpr 0x146809e70 <col:29> 'unsigned int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x146809c68 <col:29> 'unsigned int' lvalue Var 0x1459285d8 'ris' 'unsigned int'
    |   | | `-ParenExpr 0x146809e08 <col:34, col:64> 'unsigned int'
    |   | |   `-CStyleCastExpr 0x146809de0 <col:35, col:63> 'unsigned int' <IntegralCast>
    |   | |     `-ParenExpr 0x146809dc0 <col:46, col:63> 'int'
    |   | |       `-BinaryOperator 0x146809d68 <col:47, col:59> 'int' '&'
    |   | |         |-ImplicitCastExpr 0x146809d50 <col:47, col:55> 'int' <IntegralCast>
    |   | |         | `-ImplicitCastExpr 0x146809d38 <col:47, col:55> 'unsigned char' <LValueToRValue>
    |   | |         |   `-ArraySubscriptExpr 0x146809cf8 <col:47, col:55> 'const unsigned char' lvalue
    |   | |         |     |-ImplicitCastExpr 0x146809cc8 <col:47> 'const unsigned char *' <LValueToRValue>
    |   | |         |     | `-DeclRefExpr 0x146809c88 <col:47> 'const unsigned char *' lvalue ParmVar 0x145928108 'der' 'const unsigned char *'
    |   | |         |     `-ImplicitCastExpr 0x146809ce0 <col:51> 'int' <LValueToRValue>
    |   | |         |       `-DeclRefExpr 0x146809ca8 <col:51> 'int' lvalue Var 0x145928670 'punt' 'int'
    |   | |         `-IntegerLiteral 0x146809d18 <col:59> 'int' 127
    |   | `-ReturnStmt 0x146809ec0 <line:43:2, col:9>
    |   |   `-RecoveryExpr 0x146809ea0 <col:9> '<dependent type>' contains-errors lvalue
    |   |-CompoundAssignOperator 0x14680a048 <line:44:7, col:31> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    |   | |-DeclRefExpr 0x146809ef0 <col:7> 'unsigned int' lvalue Var 0x1459285d8 'ris' 'unsigned int'
    |   | `-ImplicitCastExpr 0x14680a030 <col:14, col:31> 'unsigned int' <IntegralCast>
    |   |   `-ParenExpr 0x14680a010 <col:14, col:31> 'int'
    |   |     `-BinaryOperator 0x146809ff0 <col:15, col:27> 'int' '&'
    |   |       |-ImplicitCastExpr 0x146809fd8 <col:15, col:23> 'int' <IntegralCast>
    |   |       | `-ImplicitCastExpr 0x146809fc0 <col:15, col:23> 'unsigned char' <LValueToRValue>
    |   |       |   `-ArraySubscriptExpr 0x146809f80 <col:15, col:23> 'const unsigned char' lvalue
    |   |       |     |-ImplicitCastExpr 0x146809f50 <col:15> 'const unsigned char *' <LValueToRValue>
    |   |       |     | `-DeclRefExpr 0x146809f10 <col:15> 'const unsigned char *' lvalue ParmVar 0x145928108 'der' 'const unsigned char *'
    |   |       |     `-ImplicitCastExpr 0x146809f68 <col:19> 'int' <LValueToRValue>
    |   |       |       `-DeclRefExpr 0x146809f30 <col:19> 'int' lvalue Var 0x145928670 'punt' 'int'
    |   |       `-IntegerLiteral 0x146809fa0 <col:27> 'int' 127
    |   |-UnaryOperator 0x14680a098 <line:45:7, col:11> 'int' postfix '++'
    |   | `-DeclRefExpr 0x14680a078 <col:7> 'int' lvalue Var 0x145928670 'punt' 'int'
    |   `-BinaryOperator 0x14680a138 <line:47:7, col:14> 'int' '='
    |     |-UnaryOperator 0x14680a0e8 <col:7, col:8> 'int' lvalue prefix '*' cannot overflow
    |     | `-ImplicitCastExpr 0x14680a0d0 <col:8> 'int *' <LValueToRValue>
    |     |   `-DeclRefExpr 0x14680a0b0 <col:8> 'int *' lvalue ParmVar 0x1459282e8 'len' 'int *'
    |     `-ImplicitCastExpr 0x14680a120 <col:14> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x14680a100 <col:14> 'int' lvalue Var 0x145928670 'punt' 'int'
    |-IfStmt 0x14680a2e0 <line:50:3, line:51:12>
    | |-ImplicitCastExpr 0x14680a208 <line:50:7> 'unsigned long *' <LValueToRValue>
    | | `-DeclRefExpr 0x14680a1e8 <col:7> 'unsigned long *' lvalue ParmVar 0x145928398 'tag' 'unsigned long *'
    | `-BinaryOperator 0x14680a2c0 <line:51:5, col:12> 'unsigned long' '='
    |   |-UnaryOperator 0x14680a258 <col:5, col:6> 'unsigned long' lvalue prefix '*' cannot overflow
    |   | `-ImplicitCastExpr 0x14680a240 <col:6> 'unsigned long *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x14680a220 <col:6> 'unsigned long *' lvalue ParmVar 0x145928398 'tag' 'unsigned long *'
    |   `-ImplicitCastExpr 0x14680a2a8 <col:12> 'unsigned long' <IntegralCast>
    |     `-ImplicitCastExpr 0x14680a290 <col:12> 'unsigned int' <LValueToRValue>
    |       `-DeclRefExpr 0x14680a270 <col:12> 'unsigned int' lvalue Var 0x1459285d8 'ris' 'unsigned int'
    `-ReturnStmt 0x14680a338 <line:52:3, col:10>
      `-RecoveryExpr 0x14680a318 <col:10> '<dependent type>' contains-errors lvalue
