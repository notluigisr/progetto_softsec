TranslationUnitDecl 0x130855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1308564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x130855bd0 '__int128'
|-TypedefDecl 0x130856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x130855bf0 'unsigned __int128'
|-TypedefDecl 0x13100be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13100bc00 'struct __NSConstantString_tag'
|   `-Record 0x130856580 '__NSConstantString_tag'
|-TypedefDecl 0x13100be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x130855d90 '__SVInt8_t'
|-TypedefDecl 0x13100bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x130855db0 '__SVInt16_t'
|-TypedefDecl 0x13100bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x130855dd0 '__SVInt32_t'
|-TypedefDecl 0x13100bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x130855df0 '__SVInt64_t'
|-TypedefDecl 0x13100c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x130855e10 '__SVUint8_t'
|-TypedefDecl 0x13100c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x130855e30 '__SVUint16_t'
|-TypedefDecl 0x13100c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x130855e50 '__SVUint32_t'
|-TypedefDecl 0x13100c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x130855e70 '__SVUint64_t'
|-TypedefDecl 0x13100c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x130855e90 '__SVFloat16_t'
|-TypedefDecl 0x13100c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x130855eb0 '__SVFloat32_t'
|-TypedefDecl 0x13100c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x130855ed0 '__SVFloat64_t'
|-TypedefDecl 0x13100c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x130855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13100c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x130855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13100c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x130855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13100c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x130855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13100c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x130855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13100c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x130855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13100c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x130855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13100c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x130855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13100c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x130855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13100c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x130856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13100c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x130856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13100c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x130856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13100c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x130856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13100c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x130856090 '__clang_svint8x3_t'
|-TypedefDecl 0x13100c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1308560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13100c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1308560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13100c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1308560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13100c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x130856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13100ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x130856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13100cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x130856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13100cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x130856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13100cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x130856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13100d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1308561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13100d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1308561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13100d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1308561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13100d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x130856210 '__clang_svint8x4_t'
|-TypedefDecl 0x13100d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x130856230 '__clang_svint16x4_t'
|-TypedefDecl 0x13100d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x130856250 '__clang_svint32x4_t'
|-TypedefDecl 0x13100d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x130856270 '__clang_svint64x4_t'
|-TypedefDecl 0x13100d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x130856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13100d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1308562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13100d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1308562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13100d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1308562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13100d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x130856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13100d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x130856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13100d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x130856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13100d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x130856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13100da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x130856390 '__SVBool_t'
|-TypedefDecl 0x13100da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1308563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13100dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1308563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13100db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1308563f0 '__SVCount_t'
|-TypedefDecl 0x13100dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13100dbb0 'char *'
|   `-BuiltinType 0x1308556b0 'char'
|-TypedefDecl 0x13100dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13100dbb0 'char *'
|   `-BuiltinType 0x1308556b0 'char'
`-FunctionDecl 0x13100dee8 <dataset_diviso_filec/func6014_nonvuln.c:1:1, line:35:1> line:1:1 msg_outtrans_special 'int (char *, int, int)'
  |-ParmVarDecl 0x13100dcf0 <line:2:5, col:13> col:13 used strstart 'char *'
  |-ParmVarDecl 0x13100dd70 <line:3:5, col:10> col:10 used from 'int'
  |-ParmVarDecl 0x13100ddf0 <line:4:5, col:10> col:10 used maxlen 'int'
  `-CompoundStmt 0x13102b848 <line:5:1, line:35:1>
    |-DeclStmt 0x13100e0a8 <line:6:5, col:27>
    | `-VarDecl 0x13100e008 <col:5, col:19> col:13 used str 'char *' cinit
    |   `-ImplicitCastExpr 0x13100e090 <col:19> 'char *' <LValueToRValue>
    |     `-DeclRefExpr 0x13100e070 <col:19> 'char *' lvalue ParmVar 0x13100dcf0 'strstart' 'char *'
    |-DeclStmt 0x13100e160 <line:7:5, col:20>
    | `-VarDecl 0x13100e0d8 <col:5, col:19> col:10 used retval 'int' cinit
    |   `-IntegerLiteral 0x13100e140 <col:19> 'int' 0
    |-DeclStmt 0x13100e1f8 <line:8:5, col:15>
    | `-VarDecl 0x13100e190 <col:5, col:11> col:11 used text 'char *'
    |-DeclStmt 0x13100e290 <line:9:5, col:14>
    | `-VarDecl 0x13100e228 <col:5, col:10> col:10 used attr 'int'
    |-DeclStmt 0x13100e328 <line:10:5, col:13>
    | `-VarDecl 0x13100e2c0 <col:5, col:10> col:10 used len 'int'
    |-BinaryOperator 0x131026780 <line:12:5, col:25> 'int' contains-errors '='
    | |-DeclRefExpr 0x13100e340 <col:5> 'int' lvalue Var 0x13100e228 'attr' 'int'
    | `-CallExpr 0x131026758 <col:12, col:25> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x1310266b8 <col:12> 'int ()' Function 0x131026600 'HL_ATTR' 'int ()'
    |   `-RecoveryExpr 0x131026738 <col:20> '<dependent type>' contains-errors lvalue
    |-WhileStmt 0x13102b7e0 <line:13:5, line:33:5>
    | |-BinaryOperator 0x1310268a8 <line:13:12, col:20> 'int' contains-errors '!='
    | | |-UnaryOperator 0x131026870 <col:12, col:13> 'char' lvalue prefix '*' cannot overflow
    | | | `-ImplicitCastExpr 0x131026858 <col:13> 'char *' <LValueToRValue>
    | | |   `-DeclRefExpr 0x1310267a0 <col:13> 'char *' lvalue Var 0x13100e008 'str' 'char *'
    | | `-RecoveryExpr 0x131026888 <col:20> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x13102b7b8 <line:14:5, line:33:5>
    |   |-IfStmt 0x131027368 <line:16:2, line:22:43> has_else
    |   | |-RecoveryExpr 0x131026b68 <line:16:6, col:52> '_Bool' contains-errors
    |   | |-CompoundStmt 0x131026c80 <line:17:2, line:20:2>
    |   | | |-BinaryOperator 0x131026c28 <line:18:6, col:13> 'char *' '='
    |   | | | |-DeclRefExpr 0x131026b88 <col:6> 'char *' lvalue Var 0x13100e190 'text' 'char *'
    |   | | | `-ImplicitCastExpr 0x131026c10 <col:13> 'char *' <ArrayToPointerDecay>
    |   | | |   `-StringLiteral 0x131026bf0 <col:13> 'char[4]' lvalue "STR"
    |   | | `-UnaryOperator 0x131026c68 <line:19:6, col:8> 'char *' prefix '++'
    |   | |   `-DeclRefExpr 0x131026c48 <col:8> 'char *' lvalue Var 0x13100e008 'str' 'char *'
    |   | `-BinaryOperator 0x131027348 <line:22:6, col:43> 'char *' '='
    |   |   |-DeclRefExpr 0x131026ca0 <col:6> 'char *' lvalue Var 0x13100e190 'text' 'char *'
    |   |   `-CStyleCastExpr 0x131027320 <col:13, col:43> 'char *' <IntegralToPointer>
    |   |     `-CallExpr 0x131026e98 <col:21, col:43> 'int'
    |   |       |-ImplicitCastExpr 0x131026e80 <col:21> 'int (*)()' <FunctionToPointerDecay>
    |   |       | `-DeclRefExpr 0x131026da0 <col:21> 'int ()' Function 0x131026ce8 'str2special' 'int ()'
    |   |       |-UnaryOperator 0x131026e10 <col:33, col:34> 'char **' prefix '&' cannot overflow
    |   |       | `-DeclRefExpr 0x131026dc0 <col:34> 'char *' lvalue Var 0x13100e008 'str' 'char *'
    |   |       `-ImplicitCastExpr 0x131026ec8 <col:39> 'int' <LValueToRValue>
    |   |         `-DeclRefExpr 0x131026e28 <col:39> 'int' lvalue ParmVar 0x13100dd70 'from' 'int'
    |   |-IfStmt 0x13102b4b8 <line:27:2, line:28:6>
    |   | |-BinaryOperator 0x13102b490 <line:27:6, col:36> 'int' '&&'
    |   | | |-BinaryOperator 0x13102b388 <col:6, col:15> 'int' '>'
    |   | | | |-ImplicitCastExpr 0x13102b370 <col:6> 'int' <LValueToRValue>
    |   | | | | `-DeclRefExpr 0x13102b330 <col:6> 'int' lvalue ParmVar 0x13100ddf0 'maxlen' 'int'
    |   | | | `-IntegerLiteral 0x13102b350 <col:15> 'int' 0
    |   | | `-BinaryOperator 0x13102b470 <col:20, col:36> 'int' '>='
    |   | |   |-BinaryOperator 0x13102b418 <col:20, col:29> 'int' '+'
    |   | |   | |-ImplicitCastExpr 0x13102b3e8 <col:20> 'int' <LValueToRValue>
    |   | |   | | `-DeclRefExpr 0x13102b3a8 <col:20> 'int' lvalue Var 0x13100e0d8 'retval' 'int'
    |   | |   | `-ImplicitCastExpr 0x13102b400 <col:29> 'int' <LValueToRValue>
    |   | |   |   `-DeclRefExpr 0x13102b3c8 <col:29> 'int' lvalue Var 0x13100e2c0 'len' 'int'
    |   | |   `-ImplicitCastExpr 0x13102b458 <col:36> 'int' <LValueToRValue>
    |   | |     `-DeclRefExpr 0x13102b438 <col:36> 'int' lvalue ParmVar 0x13100ddf0 'maxlen' 'int'
    |   | `-BreakStmt 0x13102b4b0 <line:28:6>
    |   `-CompoundAssignOperator 0x13102b788 <line:32:2, col:12> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |     |-DeclRefExpr 0x13102b730 <col:2> 'int' lvalue Var 0x13100e0d8 'retval' 'int'
    |     `-ImplicitCastExpr 0x13102b770 <col:12> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x13102b750 <col:12> 'int' lvalue Var 0x13100e2c0 'len' 'int'
    `-ReturnStmt 0x13102b838 <line:34:5, col:12>
      `-ImplicitCastExpr 0x13102b820 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x13102b800 <col:12> 'int' lvalue Var 0x13100e0d8 'retval' 'int'
