TranslationUnitDecl 0x160029008 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x160029eb8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1600295d0 '__int128'
|-TypedefDecl 0x160029f28 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1600295f0 'unsigned __int128'
|-TypedefDecl 0x1600f9c30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x1600f9a00 'struct __NSConstantString_tag'
|   `-Record 0x160029f80 '__NSConstantString_tag'
|-TypedefDecl 0x1600f9c98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x160029790 '__SVInt8_t'
|-TypedefDecl 0x1600f9d00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x1600297b0 '__SVInt16_t'
|-TypedefDecl 0x1600f9d68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x1600297d0 '__SVInt32_t'
|-TypedefDecl 0x1600f9dd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x1600297f0 '__SVInt64_t'
|-TypedefDecl 0x1600f9e38 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x160029810 '__SVUint8_t'
|-TypedefDecl 0x1600f9ea0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x160029830 '__SVUint16_t'
|-TypedefDecl 0x1600f9f08 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x160029850 '__SVUint32_t'
|-TypedefDecl 0x1600f9f70 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x160029870 '__SVUint64_t'
|-TypedefDecl 0x1600f9fd8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x160029890 '__SVFloat16_t'
|-TypedefDecl 0x1600fa040 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x1600298b0 '__SVFloat32_t'
|-TypedefDecl 0x1600fa0a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x1600298d0 '__SVFloat64_t'
|-TypedefDecl 0x1600fa110 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x1600298f0 '__SVBfloat16_t'
|-TypedefDecl 0x1600fa178 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x160029910 '__clang_svint8x2_t'
|-TypedefDecl 0x1600fa1e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x160029930 '__clang_svint16x2_t'
|-TypedefDecl 0x1600fa248 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x160029950 '__clang_svint32x2_t'
|-TypedefDecl 0x1600fa2b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x160029970 '__clang_svint64x2_t'
|-TypedefDecl 0x1600fa318 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x160029990 '__clang_svuint8x2_t'
|-TypedefDecl 0x1600fa380 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x1600299b0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1600fa3e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x1600299d0 '__clang_svuint32x2_t'
|-TypedefDecl 0x1600fa450 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x1600299f0 '__clang_svuint64x2_t'
|-TypedefDecl 0x1600fa4b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x160029a10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x1600fa520 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x160029a30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x1600fa588 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x160029a50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x1600fa5f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x160029a70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x1600fa658 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x160029a90 '__clang_svint8x3_t'
|-TypedefDecl 0x1600fa6c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x160029ab0 '__clang_svint16x3_t'
|-TypedefDecl 0x1600fa728 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x160029ad0 '__clang_svint32x3_t'
|-TypedefDecl 0x1600fa790 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x160029af0 '__clang_svint64x3_t'
|-TypedefDecl 0x1600fa7f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x160029b10 '__clang_svuint8x3_t'
|-TypedefDecl 0x1600fa860 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x160029b30 '__clang_svuint16x3_t'
|-TypedefDecl 0x1600fa8c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x160029b50 '__clang_svuint32x3_t'
|-TypedefDecl 0x1600fa930 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x160029b70 '__clang_svuint64x3_t'
|-TypedefDecl 0x1600fa998 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x160029b90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x1600fb200 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x160029bb0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x1600fb268 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x160029bd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1600fb2d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x160029bf0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x1600fb338 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x160029c10 '__clang_svint8x4_t'
|-TypedefDecl 0x1600fb3a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x160029c30 '__clang_svint16x4_t'
|-TypedefDecl 0x1600fb408 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x160029c50 '__clang_svint32x4_t'
|-TypedefDecl 0x1600fb470 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x160029c70 '__clang_svint64x4_t'
|-TypedefDecl 0x1600fb4d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x160029c90 '__clang_svuint8x4_t'
|-TypedefDecl 0x1600fb540 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x160029cb0 '__clang_svuint16x4_t'
|-TypedefDecl 0x1600fb5a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x160029cd0 '__clang_svuint32x4_t'
|-TypedefDecl 0x1600fb610 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x160029cf0 '__clang_svuint64x4_t'
|-TypedefDecl 0x1600fb678 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x160029d10 '__clang_svfloat16x4_t'
|-TypedefDecl 0x1600fb6e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x160029d30 '__clang_svfloat32x4_t'
|-TypedefDecl 0x1600fb748 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x160029d50 '__clang_svfloat64x4_t'
|-TypedefDecl 0x1600fb7b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x160029d70 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x1600fb818 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x160029d90 '__SVBool_t'
|-TypedefDecl 0x1600fb880 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x160029db0 '__clang_svboolx2_t'
|-TypedefDecl 0x1600fb8e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x160029dd0 '__clang_svboolx4_t'
|-TypedefDecl 0x1600fb950 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x160029df0 '__SVCount_t'
|-TypedefDecl 0x1600fb9f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1600fb9b0 'char *'
|   `-BuiltinType 0x1600290b0 'char'
|-TypedefDecl 0x1600fba68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1600fb9b0 'char *'
|   `-BuiltinType 0x1600290b0 'char'
|-FunctionDecl 0x1600fbed8 <dataset_diviso_filec/func15736_vuln.c:1:1, line:33:1> line:1:1 test_function 'int (char *(*)(char *, int *, const char *, ...))'
| |-ParmVarDecl 0x1600fbdc0 <col:16, col:75> col:25 used my_asnprintf 'char *(*)(char *, int *, const char *, ...)'
| `-CompoundStmt 0x15781e918 <line:2:1, line:33:1>
|   |-DeclStmt 0x1600fc0d8 <line:3:3, col:14>
|   | `-VarDecl 0x1600fc070 <col:3, col:13> col:8 used buf 'char[8]'
|   |-DeclStmt 0x1600fc170 <line:4:3, col:11>
|   | `-VarDecl 0x1600fc108 <col:3, col:7> col:7 used size 'int'
|   |-ForStmt 0x1601172e0 <line:6:3, line:14:5>
|   | |-BinaryOperator 0x1600fc1c8 <line:6:8, col:15> 'int' '='
|   | | |-DeclRefExpr 0x1600fc188 <col:8> 'int' lvalue Var 0x1600fc108 'size' 'int'
|   | | `-IntegerLiteral 0x1600fc1a8 <col:15> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x160115258 <col:18, col:26> 'int' '<='
|   | | |-ImplicitCastExpr 0x160115240 <col:18> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x160115200 <col:18> 'int' lvalue Var 0x1600fc108 'size' 'int'
|   | | `-IntegerLiteral 0x160115220 <col:26> 'int' 8
|   | |-UnaryOperator 0x160115298 <col:29, col:33> 'int' postfix '++'
|   | | `-DeclRefExpr 0x160115278 <col:29> 'int' lvalue Var 0x1600fc108 'size' 'int'
|   | `-CompoundStmt 0x1601172a0 <line:7:5, line:14:5>
|   |   |-RecoveryExpr 0x1601153a8 <line:8:7, col:23> '<dependent type>' contains-errors lvalue
|   |   | |-UnaryExprOrTypeTraitExpr 0x160115388 <col:7, col:14> 'unsigned long' contains-errors sizeof
|   |   | | `-RecoveryExpr 0x160115368 <col:14> '<dependent type>' contains-errors lvalue
|   |   | `-DeclRefExpr 0x160115300 <col:23> 'int' lvalue Var 0x1600fc108 'size' 'int'
|   |   |-DeclStmt 0x160115618 <line:9:7, col:64>
|   |   | `-VarDecl 0x1601153f0 <col:7, col:63> col:13 used result 'char *' cinit
|   |   |   `-CallExpr 0x1601155d8 <col:22, col:63> '<dependent type>' contains-errors
|   |   |     |-DeclRefExpr 0x160115458 <col:22> 'char *(*)(char *, int *, const char *, ...)' lvalue ParmVar 0x1600fbdc0 'my_asnprintf' 'char *(*)(char *, int *, const char *, ...)'
|   |   |     |-RecoveryExpr 0x160115580 <col:36> '<dependent type>' contains-errors lvalue
|   |   |     |-UnaryOperator 0x1601155c0 <col:42, col:43> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   |     | `-RecoveryExpr 0x1601155a0 <col:43> '<dependent type>' contains-errors lvalue
|   |   |     |-StringLiteral 0x160115500 <col:51> 'char[4]' lvalue "STR"
|   |   |     `-IntegerLiteral 0x160115520 <col:58> 'int' 12345
|   |   |-CallExpr 0x160115820 <line:10:7, col:29> '<dependent type>' contains-errors
|   |   | |-DeclRefExpr 0x160115740 <col:7> 'int ()' Function 0x160115688 'ASSERT' 'int ()'
|   |   | `-BinaryOperator 0x160115800 <col:15, col:25> 'int' contains-errors '!='
|   |   |   |-DeclRefExpr 0x160115760 <col:15> 'char *' contains-errors lvalue Var 0x1601153f0 'result' 'char *'
|   |   |   `-RecoveryExpr 0x1601157e0 <col:25> '<dependent type>' contains-errors lvalue
|   |   |-CallExpr 0x1601160a8 <line:11:7, col:42> 'int' contains-errors
|   |   | |-ImplicitCastExpr 0x160116090 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x160115848 <col:7> 'int ()' Function 0x160115688 'ASSERT' 'int ()'
|   |   | `-BinaryOperator 0x160116038 <col:15, col:41> 'int' contains-errors '=='
|   |   |   |-CallExpr 0x160115f88 <col:15, col:36> 'int' contains-errors
|   |   |   | |-ImplicitCastExpr 0x160115f70 <col:15> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x160115eb0 <col:15> 'int (const char *, const char *)' Function 0x160115cd0 'strcmp' 'int (const char *, const char *)'
|   |   |   | |-ImplicitCastExpr 0x160115fd0 <col:23> 'const char *' contains-errors <NoOp>
|   |   |   | | `-ImplicitCastExpr 0x160115fb8 <col:23> 'char *' contains-errors <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x160115ed0 <col:23> 'char *' contains-errors lvalue Var 0x1601153f0 'result' 'char *'
|   |   |   | `-ImplicitCastExpr 0x160116000 <col:31> 'const char *' <NoOp>
|   |   |   |   `-ImplicitCastExpr 0x160115fe8 <col:31> 'char *' <ArrayToPointerDecay>
|   |   |   |     `-StringLiteral 0x160115ef0 <col:31> 'char[4]' lvalue "STR"
|   |   |   `-IntegerLiteral 0x160116018 <col:41> 'int' 0
|   |   |-CallExpr 0x1601161b0 <line:12:7, col:26> '<dependent type>' contains-errors
|   |   | |-DeclRefExpr 0x1601160d0 <col:7> 'int ()' Function 0x160115688 'ASSERT' 'int ()'
|   |   | `-BinaryOperator 0x160116190 <col:15, col:25> 'int' contains-errors '=='
|   |   |   |-RecoveryExpr 0x160116170 <col:15> '<dependent type>' contains-errors lvalue
|   |   |   `-IntegerLiteral 0x160116108 <col:25> 'int' 5
|   |   `-CallExpr 0x160117248 <line:13:7, col:19> 'void' contains-errors
|   |     |-ImplicitCastExpr 0x160117230 <col:7> 'void (*)(void *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1601171a8 <col:7> 'void (void *)' Function 0x160117038 'free' 'void (void *)'
|   |     `-ImplicitCastExpr 0x160117288 <col:13> 'void *' contains-errors <BitCast>
|   |       `-ImplicitCastExpr 0x160117270 <col:13> 'char *' contains-errors <LValueToRValue>
|   |         `-DeclRefExpr 0x1601171c8 <col:13> 'char *' contains-errors lvalue Var 0x1601153f0 'result' 'char *'
|   `-ForStmt 0x15781e8e0 <line:16:3, line:32:5>
|     |-BinaryOperator 0x160117358 <line:16:8, col:15> 'int' '='
|     | |-DeclRefExpr 0x160117318 <col:8> 'int' lvalue Var 0x1600fc108 'size' 'int'
|     | `-IntegerLiteral 0x160117338 <col:15> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x1601173d0 <col:18, col:26> 'int' '<='
|     | |-ImplicitCastExpr 0x1601173b8 <col:18> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x160117378 <col:18> 'int' lvalue Var 0x1600fc108 'size' 'int'
|     | `-IntegerLiteral 0x160117398 <col:26> 'int' 8
|     |-UnaryOperator 0x160117410 <col:29, col:33> 'int' postfix '++'
|     | `-DeclRefExpr 0x1601173f0 <col:29> 'int' lvalue Var 0x1600fc108 'size' 'int'
|     `-CompoundStmt 0x15781e880 <line:17:5, line:32:5>
|       |-UnaryExprOrTypeTraitExpr 0x160117498 <line:18:7, col:14> 'unsigned long' contains-errors sizeof
|       | `-RecoveryExpr 0x160117478 <col:14> '<dependent type>' contains-errors lvalue
|       |-DeclStmt 0x160117538 <line:19:7, col:19>
|       | `-VarDecl 0x1601174d0 <col:7, col:13> col:13 used result 'char *'
|       |-CallExpr 0x160117918 <line:21:7, col:28> 'void *'
|       | |-ImplicitCastExpr 0x160117900 <col:7> 'void *(*)(void *, const void *, unsigned long)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x160117818 <col:7> 'void *(void *, const void *, unsigned long)' Function 0x1601175c8 'memcpy' 'void *(void *, const void *, unsigned long)'
|       | |-ImplicitCastExpr 0x160117968 <col:15> 'void *' <BitCast>
|       | | `-ImplicitCastExpr 0x160117950 <col:15> 'char *' <ArrayToPointerDecay>
|       | |   `-DeclRefExpr 0x160117838 <col:15> 'char[8]' lvalue Var 0x1600fc070 'buf' 'char[8]'
|       | |-ImplicitCastExpr 0x160117998 <col:20> 'const void *' <BitCast>
|       | | `-ImplicitCastExpr 0x160117980 <col:20> 'char *' <ArrayToPointerDecay>
|       | |   `-StringLiteral 0x160117858 <col:20> 'char[4]' lvalue "STR"
|       | `-ImplicitCastExpr 0x1601179b0 <col:27> 'unsigned long' <IntegralCast>
|       |   `-IntegerLiteral 0x160117878 <col:27> 'int' 8
|       |-BinaryOperator 0x160117b90 <line:23:7, col:56> 'char *' contains-errors '='
|       | |-DeclRefExpr 0x1601179e8 <col:7> 'char *' lvalue Var 0x1601174d0 'result' 'char *'
|       | `-CallExpr 0x160117b50 <col:16, col:56> '<dependent type>' contains-errors
|       |   |-DeclRefExpr 0x160117a08 <col:16> 'char *(*)(char *, int *, const char *, ...)' lvalue ParmVar 0x1600fbdc0 'my_asnprintf' 'char *(*)(char *, int *, const char *, ...)'
|       |   |-DeclRefExpr 0x160117a28 <col:30> 'char[8]' lvalue Var 0x1600fc070 'buf' 'char[8]'
|       |   |-UnaryOperator 0x160117b38 <col:35, col:36> '<dependent type>' contains-errors prefix '&' cannot overflow
|       |   | `-RecoveryExpr 0x160117b18 <col:36> '<dependent type>' contains-errors lvalue
|       |   |-StringLiteral 0x160117a78 <col:44> 'char[4]' lvalue "STR"
|       |   `-IntegerLiteral 0x160117a98 <col:51> 'int' 12345
|       |-CallExpr 0x160117c90 <line:24:7, col:29> '<dependent type>' contains-errors
|       | |-DeclRefExpr 0x160117bb0 <col:7> 'int ()' Function 0x160115688 'ASSERT' 'int ()'
|       | `-BinaryOperator 0x160117c70 <col:15, col:25> 'int' contains-errors '!='
|       |   |-DeclRefExpr 0x160117bd0 <col:15> 'char *' lvalue Var 0x1601174d0 'result' 'char *'
|       |   `-RecoveryExpr 0x160117c50 <col:25> '<dependent type>' contains-errors lvalue
|       |-CallExpr 0x160117e68 <line:25:7, col:42> 'int'
|       | |-ImplicitCastExpr 0x160117e50 <col:7> 'int (*)()' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x160117cb8 <col:7> 'int ()' Function 0x160115688 'ASSERT' 'int ()'
|       | `-BinaryOperator 0x160117e30 <col:15, col:41> 'int' '=='
|       |   |-CallExpr 0x160117d80 <col:15, col:36> 'int'
|       |   | |-ImplicitCastExpr 0x160117d68 <col:15> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|       |   | | `-DeclRefExpr 0x160117cd8 <col:15> 'int (const char *, const char *)' Function 0x160115cd0 'strcmp' 'int (const char *, const char *)'
|       |   | |-ImplicitCastExpr 0x160117dc8 <col:23> 'const char *' <NoOp>
|       |   | | `-ImplicitCastExpr 0x160117db0 <col:23> 'char *' <LValueToRValue>
|       |   | |   `-DeclRefExpr 0x160117cf8 <col:23> 'char *' lvalue Var 0x1601174d0 'result' 'char *'
|       |   | `-ImplicitCastExpr 0x160117df8 <col:31> 'const char *' <NoOp>
|       |   |   `-ImplicitCastExpr 0x160117de0 <col:31> 'char *' <ArrayToPointerDecay>
|       |   |     `-StringLiteral 0x160117d18 <col:31> 'char[4]' lvalue "STR"
|       |   `-IntegerLiteral 0x160117e10 <col:41> 'int' 0
|       |-CallExpr 0x160117f70 <line:26:7, col:26> '<dependent type>' contains-errors
|       | |-DeclRefExpr 0x160117e90 <col:7> 'int ()' Function 0x160115688 'ASSERT' 'int ()'
|       | `-BinaryOperator 0x160117f50 <col:15, col:25> 'int' contains-errors '=='
|       |   |-RecoveryExpr 0x160117f30 <col:15> '<dependent type>' contains-errors lvalue
|       |   `-IntegerLiteral 0x160117ec8 <col:25> 'int' 5
|       |-IfStmt 0x15781e110 <line:27:7, line:28:30>
|       | |-BinaryOperator 0x15781e000 <line:27:11, col:18> 'int' '<'
|       | | |-ImplicitCastExpr 0x160117fd8 <col:11> 'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x160117f98 <col:11> 'int' lvalue Var 0x1600fc108 'size' 'int'
|       | | `-IntegerLiteral 0x160117fb8 <col:18> 'int' 6
|       | `-CallExpr 0x15781e0e8 <line:28:9, col:30> 'int'
|       |   |-ImplicitCastExpr 0x15781e0d0 <col:9> 'int (*)()' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x15781e020 <col:9> 'int ()' Function 0x160115688 'ASSERT' 'int ()'
|       |   `-BinaryOperator 0x15781e0b0 <col:17, col:27> 'int' '!='
|       |     |-ImplicitCastExpr 0x15781e080 <col:17> 'char *' <LValueToRValue>
|       |     | `-DeclRefExpr 0x15781e040 <col:17> 'char *' lvalue Var 0x1601174d0 'result' 'char *'
|       |     `-ImplicitCastExpr 0x15781e098 <col:27> 'char *' <ArrayToPointerDecay>
|       |       `-DeclRefExpr 0x15781e060 <col:27> 'char[8]' lvalue Var 0x1600fc070 'buf' 'char[8]'
|       |-CallExpr 0x15781e6e0 <line:29:7, col:63> 'int'
|       | |-ImplicitCastExpr 0x15781e6c8 <col:7> 'int (*)()' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x15781e130 <col:7> 'int ()' Function 0x160115688 'ASSERT' 'int ()'
|       | `-BinaryOperator 0x15781e6a8 <col:15, col:62> 'int' '=='
|       |   |-CallExpr 0x15781e608 <col:15, col:57> 'int'
|       |   | |-ImplicitCastExpr 0x15781e5f0 <col:15> 'int (*)(const void *, const void *, unsigned long)' <FunctionToPointerDecay>
|       |   | | `-DeclRefExpr 0x15781e3e8 <col:15> 'int (const void *, const void *, unsigned long)' Function 0x15781e198 'memcmp' 'int (const void *, const void *, unsigned long)'
|       |   | |-ImplicitCastExpr 0x15781e640 <col:23, col:29> 'const void *' <BitCast>
|       |   | | `-BinaryOperator 0x15781e478 <col:23, col:29> 'char *' '+'
|       |   | |   |-ImplicitCastExpr 0x15781e448 <col:23> 'char *' <ArrayToPointerDecay>
|       |   | |   | `-DeclRefExpr 0x15781e408 <col:23> 'char[8]' lvalue Var 0x1600fc070 'buf' 'char[8]'
|       |   | |   `-ImplicitCastExpr 0x15781e460 <col:29> 'int' <LValueToRValue>
|       |   | |     `-DeclRefExpr 0x15781e428 <col:29> 'int' lvalue Var 0x1600fc108 'size' 'int'
|       |   | |-ImplicitCastExpr 0x15781e658 <col:35, col:46> 'const void *' <BitCast>
|       |   | | `-UnaryOperator 0x15781e528 <col:35, col:46> 'char *' prefix '&' cannot overflow
|       |   | |   `-ArraySubscriptExpr 0x15781e508 <col:36, col:46> 'char' lvalue
|       |   | |     |-ImplicitCastExpr 0x15781e4d8 <col:36> 'char *' <ArrayToPointerDecay>
|       |   | |     | `-StringLiteral 0x15781e498 <col:36> 'char[4]' lvalue "STR"
|       |   | |     `-ImplicitCastExpr 0x15781e4f0 <col:42> 'int' <LValueToRValue>
|       |   | |       `-DeclRefExpr 0x15781e4b8 <col:42> 'int' lvalue Var 0x1600fc108 'size' 'int'
|       |   | `-ImplicitCastExpr 0x15781e670 <col:49, col:53> 'unsigned long' <IntegralCast>
|       |   |   `-BinaryOperator 0x15781e598 <col:49, col:53> 'int' '-'
|       |   |     |-IntegerLiteral 0x15781e540 <col:49> 'int' 8
|       |   |     `-ImplicitCastExpr 0x15781e580 <col:53> 'int' <LValueToRValue>
|       |   |       `-DeclRefExpr 0x15781e560 <col:53> 'int' lvalue Var 0x1600fc108 'size' 'int'
|       |   `-IntegerLiteral 0x15781e688 <col:62> 'int' 0
|       `-IfStmt 0x15781e860 <line:30:7, line:31:21>
|         |-BinaryOperator 0x15781e778 <line:30:11, col:21> 'int' '!='
|         | |-ImplicitCastExpr 0x15781e748 <col:11> 'char *' <LValueToRValue>
|         | | `-DeclRefExpr 0x15781e708 <col:11> 'char *' lvalue Var 0x1601174d0 'result' 'char *'
|         | `-ImplicitCastExpr 0x15781e760 <col:21> 'char *' <ArrayToPointerDecay>
|         |   `-DeclRefExpr 0x15781e728 <col:21> 'char[8]' lvalue Var 0x1600fc070 'buf' 'char[8]'
|         `-CallExpr 0x15781e808 <line:31:9, col:21> 'void'
|           |-ImplicitCastExpr 0x15781e7f0 <col:9> 'void (*)(void *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x15781e798 <col:9> 'void (void *)' Function 0x160117038 'free' 'void (void *)'
|           `-ImplicitCastExpr 0x15781e848 <col:15> 'void *' <BitCast>
|             `-ImplicitCastExpr 0x15781e830 <col:15> 'char *' <LValueToRValue>
|               `-DeclRefExpr 0x15781e7b8 <col:15> 'char *' lvalue Var 0x1601174d0 'result' 'char *'
|-FunctionDecl 0x160115cd0 <line:11:15> col:15 implicit used strcmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x160115dd0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x160115e38 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x160115d78 <<invalid sloc>> Implicit 887
|-FunctionDecl 0x160117038 <line:13:7> col:7 implicit used free 'void (void *)' extern
| |-ParmVarDecl 0x160117138 <<invalid sloc>> <invalid sloc> 'void *'
| `-BuiltinAttr 0x1601170e0 <<invalid sloc>> Implicit 873
|-FunctionDecl 0x1601175c8 <line:21:7> col:7 implicit used memcpy 'void *(void *, const void *, unsigned long)' extern
| |-ParmVarDecl 0x1601176c8 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x160117730 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x160117798 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x160117670 <<invalid sloc>> Implicit 882
`-FunctionDecl 0x15781e198 <line:29:15> col:15 implicit used memcmp 'int (const void *, const void *, unsigned long)' extern
  |-ParmVarDecl 0x15781e298 <<invalid sloc>> <invalid sloc> 'const void *'
  |-ParmVarDecl 0x15781e300 <<invalid sloc>> <invalid sloc> 'const void *'
  |-ParmVarDecl 0x15781e368 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x15781e240 <<invalid sloc>> Implicit 883
