TranslationUnitDecl 0x11c855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x11c8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x11c855bd0 '__int128'
|-TypedefDecl 0x11c856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x11c855bf0 'unsigned __int128'
|-TypedefDecl 0x11d00be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x11d00bc00 'struct __NSConstantString_tag'
|   `-Record 0x11c856580 '__NSConstantString_tag'
|-TypedefDecl 0x11d00be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x11c855d90 '__SVInt8_t'
|-TypedefDecl 0x11d00bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x11c855db0 '__SVInt16_t'
|-TypedefDecl 0x11d00bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x11c855dd0 '__SVInt32_t'
|-TypedefDecl 0x11d00bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x11c855df0 '__SVInt64_t'
|-TypedefDecl 0x11d00c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x11c855e10 '__SVUint8_t'
|-TypedefDecl 0x11d00c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x11c855e30 '__SVUint16_t'
|-TypedefDecl 0x11d00c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x11c855e50 '__SVUint32_t'
|-TypedefDecl 0x11d00c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x11c855e70 '__SVUint64_t'
|-TypedefDecl 0x11d00c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x11c855e90 '__SVFloat16_t'
|-TypedefDecl 0x11d00c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x11c855eb0 '__SVFloat32_t'
|-TypedefDecl 0x11d00c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x11c855ed0 '__SVFloat64_t'
|-TypedefDecl 0x11d00c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x11c855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x11d00c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x11c855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x11d00c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x11c855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x11d00c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x11c855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x11d00c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x11c855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x11d00c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x11c855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x11d00c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x11c855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x11d00c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x11c855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x11d00c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x11c855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x11d00c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x11c856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x11d00c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x11c856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x11d00c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x11c856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x11d00c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x11c856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x11d00c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x11c856090 '__clang_svint8x3_t'
|-TypedefDecl 0x11d00c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x11c8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x11d00c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x11c8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x11d00c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x11c8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x11d00c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x11c856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x11d00ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x11c856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x11d00cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x11c856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x11d00cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x11c856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x11d00cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x11c856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x11d00d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x11c8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x11d00d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x11c8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x11d00d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x11c8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x11d00d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x11c856210 '__clang_svint8x4_t'
|-TypedefDecl 0x11d00d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x11c856230 '__clang_svint16x4_t'
|-TypedefDecl 0x11d00d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x11c856250 '__clang_svint32x4_t'
|-TypedefDecl 0x11d00d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x11c856270 '__clang_svint64x4_t'
|-TypedefDecl 0x11d00d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x11c856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x11d00d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x11c8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x11d00d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x11c8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x11d00d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x11c8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x11d00d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x11c856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x11d00d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x11c856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x11d00d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x11c856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x11d00d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x11c856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x11d00da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x11c856390 '__SVBool_t'
|-TypedefDecl 0x11d00da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x11c8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x11d00dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x11c8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x11d00db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x11c8563f0 '__SVCount_t'
|-TypedefDecl 0x11d00dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x11d00dbb0 'char *'
|   `-BuiltinType 0x11c8556b0 'char'
|-TypedefDecl 0x11d00dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x11d00dbb0 'char *'
|   `-BuiltinType 0x11c8556b0 'char'
|-FunctionDecl 0x11d00df68 <dataset_diviso_filec/func566_vuln.c:1:1, line:20:1> line:1:1 prepend_default_options 'int (const char *, int *, char ***)'
| |-ParmVarDecl 0x11d00dcd8 <col:26, col:38> col:38 used options 'const char *'
| |-ParmVarDecl 0x11d00dd88 <col:47, col:52> col:52 used pargc 'int *'
| |-ParmVarDecl 0x11d00de70 <col:59, col:67> col:67 used pargv 'char ***'
| `-CompoundStmt 0x11d0299f0 <line:2:1, line:20:1>
|   |-IfStmt 0x11d0299a0 <line:3:3, line:17:5>
|   | |-BinaryOperator 0x11d00e128 <line:3:7, col:19> 'int' '&&'
|   | | |-ImplicitCastExpr 0x11d00e0e0 <col:7> 'const char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x11d00e070 <col:7> 'const char *' lvalue ParmVar 0x11d00dcd8 'options' 'const char *'
|   | | `-ImplicitCastExpr 0x11d00e110 <col:18, col:19> 'int' <IntegralCast>
|   | |   `-ImplicitCastExpr 0x11d00e0f8 <col:18, col:19> 'char' <LValueToRValue>
|   | |     `-UnaryOperator 0x11d00e0c8 <col:18, col:19> 'const char' lvalue prefix '*' cannot overflow
|   | |       `-ImplicitCastExpr 0x11d00e0b0 <col:19> 'const char *' <LValueToRValue>
|   | |         `-DeclRefExpr 0x11d00e090 <col:19> 'const char *' lvalue ParmVar 0x11d00dcd8 'options' 'const char *'
|   | `-CompoundStmt 0x11d029938 <line:4:5, line:17:5>
|   |   |-DeclStmt 0x11d026cc8 <line:5:7, col:49>
|   |   | `-VarDecl 0x11d00e160 <col:7, col:48> col:13 used buf 'char *' cinit
|   |   |   `-ImplicitCastExpr 0x11d026cb0 <col:19, col:48> 'char *' <IntegralToPointer>
|   |   |     `-CallExpr 0x11d026c88 <col:19, col:48> 'int'
|   |   |       |-ImplicitCastExpr 0x11d026c70 <col:19> 'int (*)()' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x11d00e2f0 <col:19> 'int ()' Function 0x11d00e238 'xmalloc' 'int ()'
|   |   |       `-BinaryOperator 0x11d026c20 <col:28, col:47> 'unsigned long' '+'
|   |   |         |-CallExpr 0x11d026ba8 <col:28, col:43> 'unsigned long'
|   |   |         | |-ImplicitCastExpr 0x11d026b90 <col:28> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |   |         | | `-DeclRefExpr 0x11d026b00 <col:28> 'unsigned long (const char *)' Function 0x11d026990 'strlen' 'unsigned long (const char *)'
|   |   |         | `-ImplicitCastExpr 0x11d026bd0 <col:36> 'const char *' <LValueToRValue>
|   |   |         |   `-DeclRefExpr 0x11d026b20 <col:36> 'const char *' lvalue ParmVar 0x11d00dcd8 'options' 'const char *'
|   |   |         `-ImplicitCastExpr 0x11d026c08 <col:47> 'unsigned long' <IntegralCast>
|   |   |           `-IntegerLiteral 0x11d026be8 <col:47> 'int' 1
|   |   |-DeclStmt 0x11d026ed0 <line:6:7, col:66>
|   |   | `-VarDecl 0x11d026cf8 <col:7, col:11> col:11 used prepended 'int'
|   |   |-DeclStmt 0x11d026fd0 <line:7:7, col:24>
|   |   | `-VarDecl 0x11d026f00 <col:7, col:19> col:11 used argc 'int' cinit
|   |   |   `-ImplicitCastExpr 0x11d026fb8 <col:18, col:19> 'int' <LValueToRValue>
|   |   |     `-UnaryOperator 0x11d026fa0 <col:18, col:19> 'int' lvalue prefix '*' cannot overflow
|   |   |       `-ImplicitCastExpr 0x11d026f88 <col:19> 'int *' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x11d026f68 <col:19> 'int *' lvalue ParmVar 0x11d00dd88 'pargc' 'int *'
|   |   |-DeclStmt 0x11d027120 <line:8:7, col:33>
|   |   | `-VarDecl 0x11d027038 <col:7, col:28> col:20 used argv 'char *const *' cinit
|   |   |   `-ImplicitCastExpr 0x11d027108 <col:27, col:28> 'char *const *' <NoOp>
|   |   |     `-ImplicitCastExpr 0x11d0270f0 <col:27, col:28> 'char **' <LValueToRValue>
|   |   |       `-UnaryOperator 0x11d0270d8 <col:27, col:28> 'char **' lvalue prefix '*' cannot overflow
|   |   |         `-ImplicitCastExpr 0x11d0270c0 <col:28> 'char ***' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x11d0270a0 <col:28> 'char ***' lvalue ParmVar 0x11d00de70 'pargv' 'char ***'
|   |   |-DeclStmt 0x11d0273c8 <line:9:7, col:64>
|   |   | `-VarDecl 0x11d027150 <col:7, col:63> col:14 used pp 'char **' cinit
|   |   |   `-ImplicitCastExpr 0x11d0273b0 <col:19, col:63> 'char **' <IntegralToPointer>
|   |   |     `-CallExpr 0x11d027388 <col:19, col:63> 'int'
|   |   |       |-ImplicitCastExpr 0x11d027370 <col:19> 'int (*)()' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x11d0271b8 <col:19> 'int ()' Function 0x11d00e238 'xmalloc' 'int ()'
|   |   |       `-BinaryOperator 0x11d027350 <col:28, col:61> 'unsigned long' '*'
|   |   |         |-ImplicitCastExpr 0x11d027338 <col:28, col:49> 'unsigned long' <IntegralCast>
|   |   |         | `-ParenExpr 0x11d0272a8 <col:28, col:49> 'int'
|   |   |         |   `-BinaryOperator 0x11d027288 <col:29, col:48> 'int' '+'
|   |   |         |     |-BinaryOperator 0x11d027248 <col:29, col:41> 'int' '+'
|   |   |         |     | |-ImplicitCastExpr 0x11d027218 <col:29> 'int' <LValueToRValue>
|   |   |         |     | | `-DeclRefExpr 0x11d0271d8 <col:29> 'int' lvalue Var 0x11d026cf8 'prepended' 'int'
|   |   |         |     | `-ImplicitCastExpr 0x11d027230 <col:41> 'int' <LValueToRValue>
|   |   |         |     |   `-DeclRefExpr 0x11d0271f8 <col:41> 'int' lvalue Var 0x11d026f00 'argc' 'int'
|   |   |         |     `-IntegerLiteral 0x11d027268 <col:48> 'int' 1
|   |   |         `-UnaryExprOrTypeTraitExpr 0x11d027318 <col:53, col:61> 'unsigned long' sizeof
|   |   |           `-UnaryOperator 0x11d027300 <col:60, col:61> 'char *' lvalue prefix '*' cannot overflow
|   |   |             `-ImplicitCastExpr 0x11d0272e8 <col:61> 'char **' <LValueToRValue>
|   |   |               `-DeclRefExpr 0x11d0272c8 <col:61> 'char **' lvalue Var 0x11d027150 'pp' 'char **' non_odr_use_unevaluated
|   |   |-BinaryOperator 0x11d0274c0 <line:10:7, col:28> 'int' '='
|   |   | |-UnaryOperator 0x11d027418 <col:7, col:8> 'int' lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x11d027400 <col:8> 'int *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x11d0273e0 <col:8> 'int *' lvalue ParmVar 0x11d00dd88 'pargc' 'int *'
|   |   | `-BinaryOperator 0x11d0274a0 <col:16, col:28> 'int' '+'
|   |   |   |-ImplicitCastExpr 0x11d027470 <col:16> 'int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x11d027430 <col:16> 'int' lvalue Var 0x11d026cf8 'prepended' 'int'
|   |   |   `-ImplicitCastExpr 0x11d027488 <col:28> 'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x11d027450 <col:28> 'int' lvalue Var 0x11d026f00 'argc' 'int'
|   |   |-BinaryOperator 0x11d027568 <line:11:7, col:16> 'char **' '='
|   |   | |-UnaryOperator 0x11d027518 <col:7, col:8> 'char **' lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x11d027500 <col:8> 'char ***' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x11d0274e0 <col:8> 'char ***' lvalue ParmVar 0x11d00de70 'pargv' 'char ***'
|   |   | `-ImplicitCastExpr 0x11d027550 <col:16> 'char **' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x11d027530 <col:16> 'char **' lvalue Var 0x11d027150 'pp' 'char **'
|   |   |-BinaryOperator 0x11d029648 <line:12:7, col:20> 'char *' '='
|   |   | |-UnaryOperator 0x11d0275c0 <col:7, col:10> 'char *' lvalue prefix '*' cannot overflow
|   |   | | `-UnaryOperator 0x11d0275a8 <col:8, col:10> 'char **' postfix '++'
|   |   | |   `-DeclRefExpr 0x11d027588 <col:8> 'char **' lvalue Var 0x11d027150 'pp' 'char **'
|   |   | `-ImplicitCastExpr 0x11d029630 <col:15, col:20> 'char *' <LValueToRValue>
|   |   |   `-UnaryOperator 0x11d029618 <col:15, col:20> 'char *const' lvalue prefix '*' cannot overflow
|   |   |     `-UnaryOperator 0x11d029600 <col:16, col:20> 'char *const *' postfix '++'
|   |   |       `-DeclRefExpr 0x11d0275d8 <col:16> 'char *const *' lvalue Var 0x11d027038 'argv' 'char *const *'
|   |   |-CompoundAssignOperator 0x11d0297a0 <line:13:7, col:43> 'char **' '+=' ComputeLHSTy='char **' ComputeResultTy='char **'
|   |   | |-DeclRefExpr 0x11d029668 <col:7> 'char **' lvalue Var 0x11d027150 'pp' 'char **'
|   |   | `-CallExpr 0x11d029720 <col:13, col:43> 'int'
|   |   |   |-ImplicitCastExpr 0x11d029708 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x11d029688 <col:13> 'int ()' Function 0x11d026d88 'prepend_args' 'int ()'
|   |   |   |-ImplicitCastExpr 0x11d029758 <col:27> 'const char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x11d0296a8 <col:27> 'const char *' lvalue ParmVar 0x11d00dcd8 'options' 'const char *'
|   |   |   |-ImplicitCastExpr 0x11d029770 <col:36> 'char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x11d0296c8 <col:36> 'char *' lvalue Var 0x11d00e160 'buf' 'char *'
|   |   |   `-ImplicitCastExpr 0x11d029788 <col:41> 'char **' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x11d0296e8 <col:41> 'char **' lvalue Var 0x11d027150 'pp' 'char **'
|   |   |-WhileStmt 0x11d0298d0 <line:14:7, line:15:9>
|   |   | |-ParenExpr 0x11d0298a8 <line:14:14, col:30> 'char *'
|   |   | | `-BinaryOperator 0x11d029888 <col:15, col:28> 'char *' '='
|   |   | |   |-UnaryOperator 0x11d029808 <col:15, col:18> 'char *' lvalue prefix '*' cannot overflow
|   |   | |   | `-UnaryOperator 0x11d0297f0 <col:16, col:18> 'char **' postfix '++'
|   |   | |   |   `-DeclRefExpr 0x11d0297d0 <col:16> 'char **' lvalue Var 0x11d027150 'pp' 'char **'
|   |   | |   `-ImplicitCastExpr 0x11d029870 <col:23, col:28> 'char *' <LValueToRValue>
|   |   | |     `-UnaryOperator 0x11d029858 <col:23, col:28> 'char *const' lvalue prefix '*' cannot overflow
|   |   | |       `-UnaryOperator 0x11d029840 <col:24, col:28> 'char *const *' postfix '++'
|   |   | |         `-DeclRefExpr 0x11d029820 <col:24> 'char *const *' lvalue Var 0x11d027038 'argv' 'char *const *'
|   |   | `-ContinueStmt 0x11d0298c8 <line:15:9>
|   |   `-ReturnStmt 0x11d029928 <line:16:7, col:14>
|   |     `-ImplicitCastExpr 0x11d029910 <col:14> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x11d0298f0 <col:14> 'int' lvalue Var 0x11d026cf8 'prepended' 'int'
|   `-ReturnStmt 0x11d0299e0 <line:19:3, col:10>
|     `-IntegerLiteral 0x11d0299c0 <col:10> 'int' 0
`-FunctionDecl 0x11d026990 <line:5:28> col:28 implicit used strlen 'unsigned long (const char *)' extern
  |-ParmVarDecl 0x11d026a90 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x11d026a38 <<invalid sloc>> Implicit 902
