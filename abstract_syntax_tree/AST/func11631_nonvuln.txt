TranslationUnitDecl 0x136055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1360564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x136055bd0 '__int128'
|-TypedefDecl 0x136056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x136055bf0 'unsigned __int128'
|-TypedefDecl 0x136126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x136126000 'struct __NSConstantString_tag'
|   `-Record 0x136056580 '__NSConstantString_tag'
|-TypedefDecl 0x136126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x136055d90 '__SVInt8_t'
|-TypedefDecl 0x136126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x136055db0 '__SVInt16_t'
|-TypedefDecl 0x136126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x136055dd0 '__SVInt32_t'
|-TypedefDecl 0x1361263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x136055df0 '__SVInt64_t'
|-TypedefDecl 0x136126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x136055e10 '__SVUint8_t'
|-TypedefDecl 0x1361264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x136055e30 '__SVUint16_t'
|-TypedefDecl 0x136126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x136055e50 '__SVUint32_t'
|-TypedefDecl 0x136126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x136055e70 '__SVUint64_t'
|-TypedefDecl 0x1361265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x136055e90 '__SVFloat16_t'
|-TypedefDecl 0x136126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x136055eb0 '__SVFloat32_t'
|-TypedefDecl 0x1361266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x136055ed0 '__SVFloat64_t'
|-TypedefDecl 0x136126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x136055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x136126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x136055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1361267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x136055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x136126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x136055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1361268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x136055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x136126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x136055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x136126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x136055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1361269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x136055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x136126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x136055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x136126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x136056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x136126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x136056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x136126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x136056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x136126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x136056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x136126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x136056090 '__clang_svint8x3_t'
|-TypedefDecl 0x136126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1360560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x136126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1360560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x136126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1360560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x136126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x136056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x136126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x136056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x136126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x136056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x136126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x136056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x136126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x136056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x136127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1360561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x136127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1360561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1361278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1360561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x136127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x136056210 '__clang_svint8x4_t'
|-TypedefDecl 0x1361279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x136056230 '__clang_svint16x4_t'
|-TypedefDecl 0x136127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x136056250 '__clang_svint32x4_t'
|-TypedefDecl 0x136127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x136056270 '__clang_svint64x4_t'
|-TypedefDecl 0x136127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x136056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x136127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1360562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x136127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1360562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x136127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1360562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x136127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x136056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x136127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x136056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x136127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x136056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x136127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x136056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x136127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x136056390 '__SVBool_t'
|-TypedefDecl 0x136127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1360563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x136127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1360563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x136127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1360563f0 '__SVCount_t'
|-TypedefDecl 0x136127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x136127fb0 'char *'
|   `-BuiltinType 0x1360556b0 'char'
|-TypedefDecl 0x136128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x136127fb0 'char *'
|   `-BuiltinType 0x1360556b0 'char'
|-FunctionDecl 0x136128468 <dataset_diviso_filec/func11631_nonvuln.c:1:1, line:53:1> line:1:8 invalid fill_out_embedded_options 'char **(int *, char *, int, int, int)'
| |-ParmVarDecl 0x136128128 <col:34, col:42> col:42 invalid stream 'int *'
| |-ParmVarDecl 0x1361281a8 <line:2:34, col:40> col:40 used options 'char *'
| |-ParmVarDecl 0x136128228 <line:3:34, col:38> col:38 used options_type 'int'
| |-ParmVarDecl 0x1361282a8 <line:4:34, col:38> col:38 used slen 'int'
| |-ParmVarDecl 0x136128328 <col:44, col:48> col:48 used cnt 'int'
| `-CompoundStmt 0x13680abf0 <line:5:1, line:53:1>
|   |-DeclStmt 0x136128650 <line:6:3, col:16>
|   | |-VarDecl 0x136128550 <col:3, col:8> col:8 used ind 'int'
|   | `-VarDecl 0x1361285d0 <col:3, col:13> col:13 used len 'int'
|   |-DeclStmt 0x1361286e0 <line:7:3, col:9>
|   | `-VarDecl 0x136128678 <col:3, col:8> col:8 used c 'char'
|   |-DeclStmt 0x136128778 <line:8:3, col:12>
|   | `-VarDecl 0x136128710 <col:3, col:9> col:9 used ptr 'char *'
|   |-DeclStmt 0x1361418a0 <line:9:3, col:28>
|   | `-VarDecl 0x136141800 <col:3, col:24> col:10 used options_list 'char **' cinit
|   |   `-RecoveryExpr 0x136141880 <col:24> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x1361423b8 <line:11:3, line:16:3>
|   | |-UnaryOperator 0x136142108 <line:11:7, col:60> 'int' contains-errors prefix '!' cannot overflow
|   | | `-ParenExpr 0x1361420e8 <col:8, col:60> 'char **' contains-errors
|   | |   `-BinaryOperator 0x1361420c8 <col:9, col:59> 'char **' contains-errors '='
|   | |     |-DeclRefExpr 0x1361418b8 <col:9> 'char **' contains-errors lvalue Var 0x136141800 'options_list' 'char **'
|   | |     `-CStyleCastExpr 0x1361420a0 <col:23, col:59> 'char **' <BitCast>
|   | |       `-CallExpr 0x136142028 <col:33, col:59> 'void *'
|   | |         |-ImplicitCastExpr 0x136142010 <col:33> 'void *(*)(unsigned long, unsigned long)' <FunctionToPointerDecay>
|   | |         | `-DeclRefExpr 0x136141f50 <col:33> 'void *(unsigned long, unsigned long)' Function 0x136141d40 'calloc' 'void *(unsigned long, unsigned long)'
|   | |         |-ImplicitCastExpr 0x136142070 <col:40> 'unsigned long' <IntegralCast>
|   | |         | `-ImplicitCastExpr 0x136142058 <col:40> 'int' <LValueToRValue>
|   | |         |   `-DeclRefExpr 0x136141f70 <col:40> 'int' lvalue ParmVar 0x136128328 'cnt' 'int'
|   | |         `-UnaryExprOrTypeTraitExpr 0x136141fa8 <col:45, col:58> 'unsigned long' sizeof 'char *'
|   | `-CompoundStmt 0x136142398 <line:12:3, line:16:3>
|   |   |-CallExpr 0x136142320 <line:13:5, line:14:24> '<dependent type>' contains-errors
|   |   | |-DeclRefExpr 0x136142280 <line:13:5> 'int ()' Function 0x1361421c8 'PerlIO_printf' 'int ()'
|   |   | |-RecoveryExpr 0x1361422a0 <col:19> '<dependent type>' contains-errors lvalue
|   |   | `-StringLiteral 0x136142300 <line:14:19> 'char[4]' lvalue "STR"
|   |   `-ReturnStmt 0x136142388 <line:15:5, col:12>
|   |     `-RecoveryExpr 0x136142368 <col:12> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x136142430 <line:18:3, col:8> 'char *' '='
|   | |-DeclRefExpr 0x1361423d8 <col:3> 'char *' lvalue Var 0x136128710 'ptr' 'char *'
|   | `-ImplicitCastExpr 0x136142418 <col:8> 'char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1361423f8 <col:8> 'char *' lvalue ParmVar 0x1361281a8 'options' 'char *'
|   |-BinaryOperator 0x136142490 <line:19:3, col:8> 'int' '='
|   | |-DeclRefExpr 0x136142450 <col:3> 'int' lvalue Var 0x136128550 'ind' 'int'
|   | `-IntegerLiteral 0x136142470 <col:8> 'int' 0
|   |-IfStmt 0x1361425f8 <line:21:3, line:25:3>
|   | |-BinaryOperator 0x136142508 <line:21:7, col:23> 'int' '=='
|   | | |-ImplicitCastExpr 0x1361424f0 <col:7> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1361424b0 <col:7> 'int' lvalue ParmVar 0x136128228 'options_type' 'int'
|   | | `-IntegerLiteral 0x1361424d0 <col:23> 'int' 0
|   | `-CompoundStmt 0x1361425e8 <line:22:3, line:25:3>
|   |-IfStmt 0x136809f18 <line:27:3, line:34:3>
|   | |-BinaryOperator 0x136142670 <line:27:7, col:23> 'int' '=='
|   | | |-ImplicitCastExpr 0x136142658 <col:7> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x136142618 <col:7> 'int' lvalue ParmVar 0x136128228 'options_type' 'int'
|   | | `-IntegerLiteral 0x136142638 <col:23> 'int' 1
|   | `-CompoundStmt 0x136809ef8 <line:28:3, line:34:3>
|   |   |-IfStmt 0x136809ea0 <line:30:5, line:31:14>
|   |   | |-UnaryOperator 0x136809e40 <line:30:9, col:50> 'int' contains-errors prefix '!' cannot overflow
|   |   | | `-ParenExpr 0x136809e20 <col:10, col:50> 'char *' contains-errors
|   |   | |   `-BinaryOperator 0x136809e00 <col:11, col:49> 'char *' contains-errors '='
|   |   | |     |-ArraySubscriptExpr 0x1361426e8 <col:11, col:25> 'char *' contains-errors lvalue
|   |   | |     | |-ImplicitCastExpr 0x1361426d0 <col:11> 'char **' contains-errors <LValueToRValue>
|   |   | |     | | `-DeclRefExpr 0x136142690 <col:11> 'char **' contains-errors lvalue Var 0x136141800 'options_list' 'char **'
|   |   | |     | `-IntegerLiteral 0x1361426b0 <col:24> 'int' 0
|   |   | |     `-ImplicitCastExpr 0x1361427d8 <col:28, col:49> 'char *' <BitCast>
|   |   | |       `-CallExpr 0x136142790 <col:28, col:49> 'void *'
|   |   | |         |-ImplicitCastExpr 0x136142778 <col:28> 'void *(*)(unsigned long, unsigned long)' <FunctionToPointerDecay>
|   |   | |         | `-DeclRefExpr 0x136142708 <col:28> 'void *(unsigned long, unsigned long)' Function 0x136141d40 'calloc' 'void *(unsigned long, unsigned long)'
|   |   | |         |-ImplicitCastExpr 0x1361427c0 <col:35> 'unsigned long' <IntegralCast>
|   |   | |         | `-IntegerLiteral 0x136142728 <col:35> 'int' 1
|   |   | |         `-UnaryExprOrTypeTraitExpr 0x136142758 <col:37, col:48> 'unsigned long' sizeof 'char'
|   |   | `-ReturnStmt 0x136809e90 <line:31:7, col:14>
|   |   |   `-RecoveryExpr 0x136809e70 <col:14> '<dependent type>' contains-errors lvalue
|   |   `-UnaryOperator 0x136809ee0 <line:33:5, col:8> 'int' postfix '++'
|   |     `-DeclRefExpr 0x136809ec0 <col:5> 'int' lvalue Var 0x136128550 'ind' 'int'
|   |-WhileStmt 0x13680ab88 <line:36:3, line:51:3>
|   | |-ParenExpr 0x136809fe0 <line:36:10, col:20> 'char'
|   | | `-BinaryOperator 0x136809fc0 <col:11, col:18> 'char' '='
|   | |   |-DeclRefExpr 0x136809f38 <col:11> 'char' lvalue Var 0x136128678 'c' 'char'
|   | |   `-ImplicitCastExpr 0x136809fa8 <col:14, col:18> 'char' <LValueToRValue>
|   | |     `-UnaryOperator 0x136809f90 <col:14, col:18> 'char' lvalue prefix '*' cannot overflow
|   | |       `-UnaryOperator 0x136809f78 <col:15, col:18> 'char *' postfix '++'
|   | |         `-DeclRefExpr 0x136809f58 <col:15> 'char *' lvalue Var 0x136128710 'ptr' 'char *'
|   | `-CompoundStmt 0x13680ab68 <line:37:3, line:51:3>
|   |   |-UnaryOperator 0x13680a020 <line:38:5, col:9> 'int' postfix '--'
|   |   | `-DeclRefExpr 0x13680a000 <col:5> 'int' lvalue ParmVar 0x1361282a8 'slen' 'int'
|   |   `-IfStmt 0x13680ab48 <line:39:5, line:50:5>
|   |     |-BinaryOperator 0x13680a110 <line:39:9, col:22> 'int' '||'
|   |     | |-BinaryOperator 0x13680a0a0 <col:9, col:14> 'int' '=='
|   |     | | |-ImplicitCastExpr 0x13680a088 <col:9> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x13680a070 <col:9> 'char' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x13680a038 <col:9> 'char' lvalue Var 0x136128678 'c' 'char'
|   |     | | `-CharacterLiteral 0x13680a058 <col:14> 'int' 44
|   |     | `-UnaryOperator 0x13680a0f8 <col:21, col:22> 'int' prefix '!' cannot overflow
|   |     |   `-ImplicitCastExpr 0x13680a0e0 <col:22> 'int' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x13680a0c0 <col:22> 'int' lvalue ParmVar 0x1361282a8 'slen' 'int'
|   |     `-CompoundStmt 0x13680ab08 <line:40:5, line:50:5>
|   |       |-BinaryOperator 0x13680a1f8 <line:41:7, col:18> 'int' '='
|   |       | |-DeclRefExpr 0x13680a130 <col:7> 'int' lvalue Var 0x1361285d0 'len' 'int'
|   |       | `-ImplicitCastExpr 0x13680a1e0 <col:12, col:18> 'int' <IntegralCast>
|   |       |   `-BinaryOperator 0x13680a1c0 <col:12, col:18> 'long' '-'
|   |       |     |-ImplicitCastExpr 0x13680a190 <col:12> 'char *' <LValueToRValue>
|   |       |     | `-DeclRefExpr 0x13680a150 <col:12> 'char *' lvalue Var 0x136128710 'ptr' 'char *'
|   |       |     `-ImplicitCastExpr 0x13680a1a8 <col:18> 'char *' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x13680a170 <col:18> 'char *' lvalue ParmVar 0x1361281a8 'options' 'char *'
|   |       |-IfStmt 0x13680a2d8 <line:42:7, line:43:12>
|   |       | |-BinaryOperator 0x13680a280 <line:42:11, col:16> 'int' '=='
|   |       | | |-ImplicitCastExpr 0x13680a268 <col:11> 'int' <IntegralCast>
|   |       | | | `-ImplicitCastExpr 0x13680a250 <col:11> 'char' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x13680a218 <col:11> 'char' lvalue Var 0x136128678 'c' 'char'
|   |       | | `-CharacterLiteral 0x13680a238 <col:16> 'int' 44
|   |       | `-UnaryOperator 0x13680a2c0 <line:43:9, col:12> 'int' postfix '--'
|   |       |   `-DeclRefExpr 0x13680a2a0 <col:9> 'int' lvalue Var 0x1361285d0 'len' 'int'
|   |       |-IfStmt 0x13680a568 <line:44:7, line:45:16>
|   |       | |-UnaryOperator 0x13680a508 <line:44:11, col:57> 'int' contains-errors prefix '!' cannot overflow
|   |       | | `-ParenExpr 0x13680a4e8 <col:12, col:57> 'char *' contains-errors
|   |       | |   `-BinaryOperator 0x13680a4c8 <col:13, col:56> 'char *' contains-errors '='
|   |       | |     |-ArraySubscriptExpr 0x13680a368 <col:13, col:29> 'char *' contains-errors lvalue
|   |       | |     | |-ImplicitCastExpr 0x13680a338 <col:13> 'char **' contains-errors <LValueToRValue>
|   |       | |     | | `-DeclRefExpr 0x13680a2f8 <col:13> 'char **' contains-errors lvalue Var 0x136141800 'options_list' 'char **'
|   |       | |     | `-ImplicitCastExpr 0x13680a350 <col:26> 'int' <LValueToRValue>
|   |       | |     |   `-DeclRefExpr 0x13680a318 <col:26> 'int' lvalue Var 0x136128550 'ind' 'int'
|   |       | |     `-ImplicitCastExpr 0x13680a4b0 <col:31, col:56> 'char *' <BitCast>
|   |       | |       `-CallExpr 0x13680a468 <col:31, col:56> 'void *'
|   |       | |         |-ImplicitCastExpr 0x13680a450 <col:31> 'void *(*)(unsigned long, unsigned long)' <FunctionToPointerDecay>
|   |       | |         | `-DeclRefExpr 0x13680a388 <col:31> 'void *(unsigned long, unsigned long)' Function 0x136141d40 'calloc' 'void *(unsigned long, unsigned long)'
|   |       | |         |-ImplicitCastExpr 0x13680a498 <col:38, col:42> 'unsigned long' <IntegralCast>
|   |       | |         | `-BinaryOperator 0x13680a400 <col:38, col:42> 'int' '+'
|   |       | |         |   |-ImplicitCastExpr 0x13680a3e8 <col:38> 'int' <LValueToRValue>
|   |       | |         |   | `-DeclRefExpr 0x13680a3a8 <col:38> 'int' lvalue Var 0x1361285d0 'len' 'int'
|   |       | |         |   `-IntegerLiteral 0x13680a3c8 <col:42> 'int' 1
|   |       | |         `-UnaryExprOrTypeTraitExpr 0x13680a430 <col:44, col:55> 'unsigned long' sizeof 'char'
|   |       | `-ReturnStmt 0x13680a558 <line:45:9, col:16>
|   |       |   `-RecoveryExpr 0x13680a538 <col:16> '<dependent type>' contains-errors lvalue
|   |       |-CallExpr 0x13680a9a8 <line:47:7, col:46> 'char *' contains-errors
|   |       | |-ImplicitCastExpr 0x13680a990 <col:7> 'char *(*)(char *, const char *, unsigned long)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x13680a828 <col:7> 'char *(char *, const char *, unsigned long)' Function 0x13680a5d8 'strncpy' 'char *(char *, const char *, unsigned long)'
|   |       | |-ImplicitCastExpr 0x13680a9e0 <col:15, col:31> 'char *' contains-errors <LValueToRValue>
|   |       | | `-ArraySubscriptExpr 0x13680a8b8 <col:15, col:31> 'char *' contains-errors lvalue
|   |       | |   |-ImplicitCastExpr 0x13680a888 <col:15> 'char **' contains-errors <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x13680a848 <col:15> 'char **' contains-errors lvalue Var 0x136141800 'options_list' 'char **'
|   |       | |   `-ImplicitCastExpr 0x13680a8a0 <col:28> 'int' <LValueToRValue>
|   |       | |     `-DeclRefExpr 0x13680a868 <col:28> 'int' lvalue Var 0x136128550 'ind' 'int'
|   |       | |-ImplicitCastExpr 0x13680aa10 <col:34> 'const char *' <NoOp>
|   |       | | `-ImplicitCastExpr 0x13680a9f8 <col:34> 'char *' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x13680a8d8 <col:34> 'char *' lvalue ParmVar 0x1361281a8 'options' 'char *'
|   |       | `-ImplicitCastExpr 0x13680aa40 <col:43> 'unsigned long' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x13680aa28 <col:43> 'int' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x13680a8f8 <col:43> 'int' lvalue Var 0x1361285d0 'len' 'int'
|   |       |-UnaryOperator 0x13680aa78 <line:48:7, col:10> 'int' postfix '++'
|   |       | `-DeclRefExpr 0x13680aa58 <col:7> 'int' lvalue Var 0x136128550 'ind' 'int'
|   |       `-BinaryOperator 0x13680aae8 <line:49:7, col:16> 'char *' '='
|   |         |-DeclRefExpr 0x13680aa90 <col:7> 'char *' lvalue ParmVar 0x1361281a8 'options' 'char *'
|   |         `-ImplicitCastExpr 0x13680aad0 <col:16> 'char *' <LValueToRValue>
|   |           `-DeclRefExpr 0x13680aab0 <col:16> 'char *' lvalue Var 0x136128710 'ptr' 'char *'
|   `-ReturnStmt 0x13680abe0 <line:52:3, col:10>
|     `-ImplicitCastExpr 0x13680abc8 <col:10> 'char **' contains-errors <LValueToRValue>
|       `-DeclRefExpr 0x13680aba8 <col:10> 'char **' contains-errors lvalue Var 0x136141800 'options_list' 'char **'
|-FunctionDecl 0x136141d40 <line:11:33> col:33 implicit used calloc 'void *(unsigned long, unsigned long)' extern
| |-ParmVarDecl 0x136141e40 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-ParmVarDecl 0x136141ea8 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-BuiltinAttr 0x136141de8 <<invalid sloc>> Implicit 868
| `-AllocSizeAttr 0x136141f20 <col:33> Implicit 1 2
`-FunctionDecl 0x13680a5d8 <line:47:7> col:7 implicit used strncpy 'char *(char *, const char *, unsigned long)' extern
  |-ParmVarDecl 0x13680a6d8 <<invalid sloc>> <invalid sloc> 'char *'
  |-ParmVarDecl 0x13680a740 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x13680a7a8 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x13680a680 <<invalid sloc>> Implicit 886
