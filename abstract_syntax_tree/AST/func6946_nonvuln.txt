TranslationUnitDecl 0x140013e08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x140014cb8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1400143d0 '__int128'
|-TypedefDecl 0x140014d28 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1400143f0 'unsigned __int128'
|-TypedefDecl 0x14804d630 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x14804d400 'struct __NSConstantString_tag'
|   `-Record 0x140014d80 '__NSConstantString_tag'
|-TypedefDecl 0x14804d698 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x140014590 '__SVInt8_t'
|-TypedefDecl 0x14804d700 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x1400145b0 '__SVInt16_t'
|-TypedefDecl 0x14804d768 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x1400145d0 '__SVInt32_t'
|-TypedefDecl 0x14804d7d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x1400145f0 '__SVInt64_t'
|-TypedefDecl 0x14804d838 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x140014610 '__SVUint8_t'
|-TypedefDecl 0x14804d8a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x140014630 '__SVUint16_t'
|-TypedefDecl 0x14804d908 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x140014650 '__SVUint32_t'
|-TypedefDecl 0x14804d970 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x140014670 '__SVUint64_t'
|-TypedefDecl 0x14804d9d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x140014690 '__SVFloat16_t'
|-TypedefDecl 0x14804da40 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x1400146b0 '__SVFloat32_t'
|-TypedefDecl 0x14804daa8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x1400146d0 '__SVFloat64_t'
|-TypedefDecl 0x14804db10 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x1400146f0 '__SVBfloat16_t'
|-TypedefDecl 0x14804db78 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x140014710 '__clang_svint8x2_t'
|-TypedefDecl 0x14804dbe0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x140014730 '__clang_svint16x2_t'
|-TypedefDecl 0x14804dc48 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x140014750 '__clang_svint32x2_t'
|-TypedefDecl 0x14804dcb0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x140014770 '__clang_svint64x2_t'
|-TypedefDecl 0x14804dd18 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x140014790 '__clang_svuint8x2_t'
|-TypedefDecl 0x14804dd80 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x1400147b0 '__clang_svuint16x2_t'
|-TypedefDecl 0x14804dde8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x1400147d0 '__clang_svuint32x2_t'
|-TypedefDecl 0x14804de50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x1400147f0 '__clang_svuint64x2_t'
|-TypedefDecl 0x14804deb8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x140014810 '__clang_svfloat16x2_t'
|-TypedefDecl 0x14804df20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x140014830 '__clang_svfloat32x2_t'
|-TypedefDecl 0x14804df88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x140014850 '__clang_svfloat64x2_t'
|-TypedefDecl 0x14804dff0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x140014870 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x14804e058 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x140014890 '__clang_svint8x3_t'
|-TypedefDecl 0x14804e0c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1400148b0 '__clang_svint16x3_t'
|-TypedefDecl 0x14804e128 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1400148d0 '__clang_svint32x3_t'
|-TypedefDecl 0x14804e190 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1400148f0 '__clang_svint64x3_t'
|-TypedefDecl 0x14804e1f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x140014910 '__clang_svuint8x3_t'
|-TypedefDecl 0x14804e260 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x140014930 '__clang_svuint16x3_t'
|-TypedefDecl 0x14804e2c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x140014950 '__clang_svuint32x3_t'
|-TypedefDecl 0x14804e330 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x140014970 '__clang_svuint64x3_t'
|-TypedefDecl 0x14804e398 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x140014990 '__clang_svfloat16x3_t'
|-TypedefDecl 0x14804ec00 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1400149b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x14804ec68 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1400149d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x14804ecd0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1400149f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x14804ed38 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x140014a10 '__clang_svint8x4_t'
|-TypedefDecl 0x14804eda0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x140014a30 '__clang_svint16x4_t'
|-TypedefDecl 0x14804ee08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x140014a50 '__clang_svint32x4_t'
|-TypedefDecl 0x14804ee70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x140014a70 '__clang_svint64x4_t'
|-TypedefDecl 0x14804eed8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x140014a90 '__clang_svuint8x4_t'
|-TypedefDecl 0x14804ef40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x140014ab0 '__clang_svuint16x4_t'
|-TypedefDecl 0x14804efa8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x140014ad0 '__clang_svuint32x4_t'
|-TypedefDecl 0x14804f010 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x140014af0 '__clang_svuint64x4_t'
|-TypedefDecl 0x14804f078 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x140014b10 '__clang_svfloat16x4_t'
|-TypedefDecl 0x14804f0e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x140014b30 '__clang_svfloat32x4_t'
|-TypedefDecl 0x14804f148 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x140014b50 '__clang_svfloat64x4_t'
|-TypedefDecl 0x14804f1b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x140014b70 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x14804f218 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x140014b90 '__SVBool_t'
|-TypedefDecl 0x14804f280 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x140014bb0 '__clang_svboolx2_t'
|-TypedefDecl 0x14804f2e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x140014bd0 '__clang_svboolx4_t'
|-TypedefDecl 0x14804f350 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x140014bf0 '__SVCount_t'
|-TypedefDecl 0x14804f3f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x14804f3b0 'char *'
|   `-BuiltinType 0x140013eb0 'char'
|-TypedefDecl 0x14804f468 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x14804f3b0 'char *'
|   `-BuiltinType 0x140013eb0 'char'
|-FunctionDecl 0x14804f5c0 <dataset_diviso_filec/func6946_nonvuln.c:1:1, line:42:1> line:1:13 ga_osrelease_replace_special 'void (char *)' static
| |-ParmVarDecl 0x14804f4f0 <col:42, col:49> col:49 used value 'char *'
| `-CompoundStmt 0x148067ef0 <line:2:1, line:42:1>
|   |-DeclStmt 0x14804f850 <line:3:5, col:25>
|   | |-VarDecl 0x14804f6d0 <col:5, col:12> col:12 used p 'char *'
|   | |-VarDecl 0x14804f750 <col:5, col:16> col:16 used p2 'char *'
|   | `-VarDecl 0x14804f7c8 <col:5, col:20> col:20 used quote 'char'
|   |-IfStmt 0x1480660a8 <line:6:5, line:16:5>
|   | |-BinaryOperator 0x14804fa68 <line:6:9, col:47> 'int' '||'
|   | | |-ParenExpr 0x14804f948 <col:9, col:25> 'int'
|   | | | `-BinaryOperator 0x14804f928 <col:10, col:22> 'int' '!='
|   | | |   |-ImplicitCastExpr 0x14804f910 <col:10, col:17> 'int' <IntegralCast>
|   | | |   | `-ImplicitCastExpr 0x14804f8f8 <col:10, col:17> 'char' <LValueToRValue>
|   | | |   |   `-ArraySubscriptExpr 0x14804f8c0 <col:10, col:17> 'char' lvalue
|   | | |   |     |-ImplicitCastExpr 0x14804f8a8 <col:10> 'char *' <LValueToRValue>
|   | | |   |     | `-DeclRefExpr 0x14804f868 <col:10> 'char *' lvalue ParmVar 0x14804f4f0 'value' 'char *'
|   | | |   |     `-IntegerLiteral 0x14804f888 <col:16> 'int' 0
|   | | |   `-CharacterLiteral 0x14804f8e0 <col:22> 'int' 34
|   | | `-ParenExpr 0x14804fa48 <col:30, col:47> 'int'
|   | |   `-BinaryOperator 0x14804fa28 <col:31, col:43> 'int' '=='
|   | |     |-ImplicitCastExpr 0x14804fa10 <col:31, col:38> 'int' <IntegralCast>
|   | |     | `-ImplicitCastExpr 0x14804f9f8 <col:31, col:38> 'char' <LValueToRValue>
|   | |     |   `-ArraySubscriptExpr 0x14804f9c0 <col:31, col:38> 'char' lvalue
|   | |     |     |-ImplicitCastExpr 0x14804f9a8 <col:31> 'char *' <LValueToRValue>
|   | |     |     | `-DeclRefExpr 0x14804f968 <col:31> 'char *' lvalue ParmVar 0x14804f4f0 'value' 'char *'
|   | |     |     `-IntegerLiteral 0x14804f988 <col:37> 'int' 0
|   | |     `-CharacterLiteral 0x14804f9e0 <col:43> 'int' 39
|   | `-CompoundStmt 0x148066070 <col:50, line:16:5>
|   |   |-BinaryOperator 0x148065c28 <line:7:9, col:30> 'char *' '='
|   |   | |-DeclRefExpr 0x14804fa88 <col:9> 'char *' lvalue Var 0x14804f6d0 'p' 'char *'
|   |   | `-CallExpr 0x148065bc8 <col:13, col:30> 'char *'
|   |   |   |-ImplicitCastExpr 0x148065bb0 <col:13> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x148065b10 <col:13> 'char *(const char *, int)' Function 0x148065930 'strchr' 'char *(const char *, int)'
|   |   |   |-ImplicitCastExpr 0x148065c10 <col:20> 'const char *' <NoOp>
|   |   |   | `-ImplicitCastExpr 0x148065bf8 <col:20> 'char *' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x148065b30 <col:20> 'char *' lvalue ParmVar 0x14804f4f0 'value' 'char *'
|   |   |   `-CharacterLiteral 0x148065b50 <col:27> 'int' 32
|   |   |-IfStmt 0x148065da0 <line:8:9, line:10:9>
|   |   | |-BinaryOperator 0x148065cc0 <line:8:13, col:18> 'int' contains-errors '!='
|   |   | | |-DeclRefExpr 0x148065c48 <col:13> 'char *' lvalue Var 0x14804f6d0 'p' 'char *'
|   |   | | `-RecoveryExpr 0x148065ca0 <col:18> '<dependent type>' contains-errors lvalue
|   |   | `-CompoundStmt 0x148065d88 <col:24, line:10:9>
|   |   |   `-BinaryOperator 0x148065d68 <line:9:13, col:18> 'char' '='
|   |   |     |-UnaryOperator 0x148065d18 <col:13, col:14> 'char' lvalue prefix '*' cannot overflow
|   |   |     | `-ImplicitCastExpr 0x148065d00 <col:14> 'char *' <LValueToRValue>
|   |   |     |   `-DeclRefExpr 0x148065ce0 <col:14> 'char *' lvalue Var 0x14804f6d0 'p' 'char *'
|   |   |     `-ImplicitCastExpr 0x148065d50 <col:18> 'char' <IntegralCast>
|   |   |       `-IntegerLiteral 0x148065d30 <col:18> 'int' 0
|   |   |-BinaryOperator 0x148065ec8 <line:11:9, col:30> 'char *' '='
|   |   | |-DeclRefExpr 0x148065dc0 <col:9> 'char *' lvalue Var 0x14804f6d0 'p' 'char *'
|   |   | `-CallExpr 0x148065e68 <col:13, col:30> 'char *'
|   |   |   |-ImplicitCastExpr 0x148065e50 <col:13> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x148065de0 <col:13> 'char *(const char *, int)' Function 0x148065930 'strchr' 'char *(const char *, int)'
|   |   |   |-ImplicitCastExpr 0x148065eb0 <col:20> 'const char *' <NoOp>
|   |   |   | `-ImplicitCastExpr 0x148065e98 <col:20> 'char *' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x148065e00 <col:20> 'char *' lvalue ParmVar 0x14804f4f0 'value' 'char *'
|   |   |   `-CharacterLiteral 0x148065e20 <col:27> 'int' 59
|   |   |-IfStmt 0x148066040 <line:12:9, line:14:9>
|   |   | |-BinaryOperator 0x148065f60 <line:12:13, col:18> 'int' contains-errors '!='
|   |   | | |-DeclRefExpr 0x148065ee8 <col:13> 'char *' lvalue Var 0x14804f6d0 'p' 'char *'
|   |   | | `-RecoveryExpr 0x148065f40 <col:18> '<dependent type>' contains-errors lvalue
|   |   | `-CompoundStmt 0x148066028 <col:24, line:14:9>
|   |   |   `-BinaryOperator 0x148066008 <line:13:13, col:18> 'char' '='
|   |   |     |-UnaryOperator 0x148065fb8 <col:13, col:14> 'char' lvalue prefix '*' cannot overflow
|   |   |     | `-ImplicitCastExpr 0x148065fa0 <col:14> 'char *' <LValueToRValue>
|   |   |     |   `-DeclRefExpr 0x148065f80 <col:14> 'char *' lvalue Var 0x14804f6d0 'p' 'char *'
|   |   |     `-ImplicitCastExpr 0x148065ff0 <col:18> 'char' <IntegralCast>
|   |   |       `-IntegerLiteral 0x148065fd0 <col:18> 'int' 0
|   |   `-ReturnStmt 0x148066060 <line:15:9>
|   |-BinaryOperator 0x148066178 <line:18:5, col:20> 'char' '='
|   | |-DeclRefExpr 0x1480660c8 <col:5> 'char' lvalue Var 0x14804f7c8 'quote' 'char'
|   | `-ImplicitCastExpr 0x148066160 <col:13, col:20> 'char' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x148066140 <col:13, col:20> 'char' lvalue
|   |     |-ImplicitCastExpr 0x148066128 <col:13> 'char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1480660e8 <col:13> 'char *' lvalue ParmVar 0x14804f4f0 'value' 'char *'
|   |     `-IntegerLiteral 0x148066108 <col:19> 'int' 0
|   |-BinaryOperator 0x1480661f0 <line:19:5, col:10> 'char *' '='
|   | |-DeclRefExpr 0x148066198 <col:5> 'char *' lvalue Var 0x14804f750 'p2' 'char *'
|   | `-ImplicitCastExpr 0x1480661d8 <col:10> 'char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1480661b8 <col:10> 'char *' lvalue ParmVar 0x14804f4f0 'value' 'char *'
|   |-BinaryOperator 0x1480662a8 <line:20:5, col:17> 'char *' '='
|   | |-DeclRefExpr 0x148066210 <col:5> 'char *' lvalue Var 0x14804f6d0 'p' 'char *'
|   | `-BinaryOperator 0x148066288 <col:9, col:17> 'char *' '+'
|   |   |-ImplicitCastExpr 0x148066270 <col:9> 'char *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x148066230 <col:9> 'char *' lvalue ParmVar 0x14804f4f0 'value' 'char *'
|   |   `-IntegerLiteral 0x148066250 <col:17> 'int' 1
|   `-WhileStmt 0x148067ed0 <line:21:5, line:41:5>
|     |-BinaryOperator 0x148066368 <line:21:12, col:18> 'int' '!='
|     | |-ImplicitCastExpr 0x148066350 <col:12, col:13> 'int' <IntegralCast>
|     | | `-ImplicitCastExpr 0x148066338 <col:12, col:13> 'char' <LValueToRValue>
|     | |   `-UnaryOperator 0x148066300 <col:12, col:13> 'char' lvalue prefix '*' cannot overflow
|     | |     `-ImplicitCastExpr 0x1480662e8 <col:13> 'char *' <LValueToRValue>
|     | |       `-DeclRefExpr 0x1480662c8 <col:13> 'char *' lvalue Var 0x14804f6d0 'p' 'char *'
|     | `-IntegerLiteral 0x148066318 <col:18> 'int' 0
|     `-CompoundStmt 0x148067eb0 <col:21, line:41:5>
|       |-IfStmt 0x148067d68 <line:22:9, line:39:9> has_else
|       | |-BinaryOperator 0x148066420 <line:22:13, col:19> 'int' '=='
|       | | |-ImplicitCastExpr 0x148066408 <col:13, col:14> 'int' <IntegralCast>
|       | | | `-ImplicitCastExpr 0x1480663f0 <col:13, col:14> 'char' <LValueToRValue>
|       | | |   `-UnaryOperator 0x1480663c0 <col:13, col:14> 'char' lvalue prefix '*' cannot overflow
|       | | |     `-ImplicitCastExpr 0x1480663a8 <col:14> 'char *' <LValueToRValue>
|       | | |       `-DeclRefExpr 0x148066388 <col:14> 'char *' lvalue Var 0x14804f6d0 'p' 'char *'
|       | | `-CharacterLiteral 0x1480663d8 <col:19> 'int' 92
|       | |-CompoundStmt 0x148067b68 <col:25, line:36:9>
|       | | |-UnaryOperator 0x148066460 <line:23:13, col:14> 'char *' postfix '++'
|       | | | `-DeclRefExpr 0x148066440 <col:13> 'char *' lvalue Var 0x14804f6d0 'p' 'char *'
|       | | `-SwitchStmt 0x1480664f8 <line:24:13, line:35:13>
|       | |   |-ImplicitCastExpr 0x1480664e0 <line:24:21, col:22> 'int' <IntegralCast>
|       | |   | `-ImplicitCastExpr 0x1480664c8 <col:21, col:22> 'char' <LValueToRValue>
|       | |   |   `-UnaryOperator 0x1480664b0 <col:21, col:22> 'char' lvalue prefix '*' cannot overflow
|       | |   |     `-ImplicitCastExpr 0x148066498 <col:22> 'char *' <LValueToRValue>
|       | |   |       `-DeclRefExpr 0x148066478 <col:22> 'char *' lvalue Var 0x14804f6d0 'p' 'char *'
|       | |   `-CompoundStmt 0x148067b40 <col:25, line:35:13>
|       | |     |-CaseStmt 0x148066550 <line:25:13, line:30:17>
|       | |     | |-ConstantExpr 0x148066538 <line:25:18> 'int'
|       | |     | | `-CharacterLiteral 0x148066520 <col:18> 'int' 36
|       | |     | `-CaseStmt 0x1480665a8 <line:26:13, line:30:17>
|       | |     |   |-ConstantExpr 0x148066590 <line:26:18> 'int'
|       | |     |   | `-CharacterLiteral 0x148066578 <col:18> 'int' 39
|       | |     |   `-CaseStmt 0x148067a00 <line:27:13, line:30:17>
|       | |     |     |-ConstantExpr 0x1480665e8 <line:27:18> 'int'
|       | |     |     | `-CharacterLiteral 0x1480665d0 <col:18> 'int' 34
|       | |     |     `-CaseStmt 0x148067a58 <line:28:13, line:30:17>
|       | |     |       |-ConstantExpr 0x148067a40 <line:28:18> 'int'
|       | |     |       | `-CharacterLiteral 0x148067a28 <col:18> 'int' 92
|       | |     |       `-CaseStmt 0x148067ab0 <line:29:13, line:30:17>
|       | |     |         |-ConstantExpr 0x148067a98 <line:29:18> 'int'
|       | |     |         | `-CharacterLiteral 0x148067a80 <col:18> 'int' 96
|       | |     |         `-BreakStmt 0x148067ad8 <line:30:17>
|       | |     |-DefaultStmt 0x148067b18 <line:31:13, line:33:18>
|       | |     | `-UnaryOperator 0x148067b00 <col:17, col:18> 'char *' postfix '--'
|       | |     |   `-DeclRefExpr 0x148067ae0 <col:17> 'char *' lvalue Var 0x14804f6d0 'p' 'char *'
|       | |     `-BreakStmt 0x148067b38 <line:34:17>
|       | `-IfStmt 0x148067d48 <line:36:16, line:39:9>
|       |   |-BinaryOperator 0x148067c58 <line:36:20, col:26> 'int' '=='
|       |   | |-ImplicitCastExpr 0x148067c28 <col:20, col:21> 'int' <IntegralCast>
|       |   | | `-ImplicitCastExpr 0x148067bf8 <col:20, col:21> 'char' <LValueToRValue>
|       |   | |   `-UnaryOperator 0x148067bc0 <col:20, col:21> 'char' lvalue prefix '*' cannot overflow
|       |   | |     `-ImplicitCastExpr 0x148067ba8 <col:21> 'char *' <LValueToRValue>
|       |   | |       `-DeclRefExpr 0x148067b88 <col:21> 'char *' lvalue Var 0x14804f6d0 'p' 'char *'
|       |   | `-ImplicitCastExpr 0x148067c40 <col:26> 'int' <IntegralCast>
|       |   |   `-ImplicitCastExpr 0x148067c10 <col:26> 'char' <LValueToRValue>
|       |   |     `-DeclRefExpr 0x148067bd8 <col:26> 'char' lvalue Var 0x14804f7c8 'quote' 'char'
|       |   `-CompoundStmt 0x148067d28 <col:33, line:39:9>
|       |     |-BinaryOperator 0x148067d00 <line:37:13, col:19> 'char' '='
|       |     | |-UnaryOperator 0x148067cb0 <col:13, col:14> 'char' lvalue prefix '*' cannot overflow
|       |     | | `-ImplicitCastExpr 0x148067c98 <col:14> 'char *' <LValueToRValue>
|       |     | |   `-DeclRefExpr 0x148067c78 <col:14> 'char *' lvalue Var 0x14804f750 'p2' 'char *'
|       |     | `-ImplicitCastExpr 0x148067ce8 <col:19> 'char' <IntegralCast>
|       |     |   `-IntegerLiteral 0x148067cc8 <col:19> 'int' 0
|       |     `-BreakStmt 0x148067d20 <line:38:13>
|       `-BinaryOperator 0x148067e90 <line:40:9, col:24> 'char' '='
|         |-UnaryOperator 0x148067df0 <col:9, col:15> 'char' lvalue prefix '*' cannot overflow
|         | `-ParenExpr 0x148067dd0 <col:10, col:15> 'char *'
|         |   `-UnaryOperator 0x148067db8 <col:11, col:13> 'char *' postfix '++'
|         |     `-DeclRefExpr 0x148067d98 <col:11> 'char *' lvalue Var 0x14804f750 'p2' 'char *'
|         `-ImplicitCastExpr 0x148067e78 <col:19, col:24> 'char' <LValueToRValue>
|           `-UnaryOperator 0x148067e60 <col:19, col:24> 'char' lvalue prefix '*' cannot overflow
|             `-ParenExpr 0x148067e40 <col:20, col:24> 'char *'
|               `-UnaryOperator 0x148067e28 <col:21, col:22> 'char *' postfix '++'
|                 `-DeclRefExpr 0x148067e08 <col:21> 'char *' lvalue Var 0x14804f6d0 'p' 'char *'
`-FunctionDecl 0x148065930 <line:7:13> col:13 implicit used strchr 'char *(const char *, int)' extern
  |-ParmVarDecl 0x148065a30 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x148065a98 <<invalid sloc>> <invalid sloc> 'int'
  `-BuiltinAttr 0x1480659d8 <<invalid sloc>> Implicit 893
