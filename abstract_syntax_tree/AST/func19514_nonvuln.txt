TranslationUnitDecl 0x129027008 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x129027eb8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1290275d0 '__int128'
|-TypedefDecl 0x129027f28 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1290275f0 'unsigned __int128'
|-TypedefDecl 0x12a00be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12a00bc00 'struct __NSConstantString_tag'
|   `-Record 0x129027f80 '__NSConstantString_tag'
|-TypedefDecl 0x12a00be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x129027790 '__SVInt8_t'
|-TypedefDecl 0x12a00bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x1290277b0 '__SVInt16_t'
|-TypedefDecl 0x12a00bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x1290277d0 '__SVInt32_t'
|-TypedefDecl 0x12a00bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x1290277f0 '__SVInt64_t'
|-TypedefDecl 0x12a00c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x129027810 '__SVUint8_t'
|-TypedefDecl 0x12a00c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x129027830 '__SVUint16_t'
|-TypedefDecl 0x12a00c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x129027850 '__SVUint32_t'
|-TypedefDecl 0x12a00c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x129027870 '__SVUint64_t'
|-TypedefDecl 0x12a00c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x129027890 '__SVFloat16_t'
|-TypedefDecl 0x12a00c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x1290278b0 '__SVFloat32_t'
|-TypedefDecl 0x12a00c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x1290278d0 '__SVFloat64_t'
|-TypedefDecl 0x12a00c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x1290278f0 '__SVBfloat16_t'
|-TypedefDecl 0x12a00c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x129027910 '__clang_svint8x2_t'
|-TypedefDecl 0x12a00c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x129027930 '__clang_svint16x2_t'
|-TypedefDecl 0x12a00c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x129027950 '__clang_svint32x2_t'
|-TypedefDecl 0x12a00c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x129027970 '__clang_svint64x2_t'
|-TypedefDecl 0x12a00c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x129027990 '__clang_svuint8x2_t'
|-TypedefDecl 0x12a00c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x1290279b0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12a00c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x1290279d0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12a00c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x1290279f0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12a00c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x129027a10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12a00c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x129027a30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12a00c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x129027a50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12a00c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x129027a70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12a00c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x129027a90 '__clang_svint8x3_t'
|-TypedefDecl 0x12a00c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x129027ab0 '__clang_svint16x3_t'
|-TypedefDecl 0x12a00c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x129027ad0 '__clang_svint32x3_t'
|-TypedefDecl 0x12a00c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x129027af0 '__clang_svint64x3_t'
|-TypedefDecl 0x12a00c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x129027b10 '__clang_svuint8x3_t'
|-TypedefDecl 0x12a00ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x129027b30 '__clang_svuint16x3_t'
|-TypedefDecl 0x12a00cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x129027b50 '__clang_svuint32x3_t'
|-TypedefDecl 0x12a00cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x129027b70 '__clang_svuint64x3_t'
|-TypedefDecl 0x12a00cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x129027b90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12a00d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x129027bb0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12a00d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x129027bd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12a00d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x129027bf0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12a00d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x129027c10 '__clang_svint8x4_t'
|-TypedefDecl 0x12a00d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x129027c30 '__clang_svint16x4_t'
|-TypedefDecl 0x12a00d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x129027c50 '__clang_svint32x4_t'
|-TypedefDecl 0x12a00d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x129027c70 '__clang_svint64x4_t'
|-TypedefDecl 0x12a00d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x129027c90 '__clang_svuint8x4_t'
|-TypedefDecl 0x12a00d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x129027cb0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12a00d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x129027cd0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12a00d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x129027cf0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12a00d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x129027d10 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12a00d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x129027d30 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12a00d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x129027d50 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12a00d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x129027d70 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12a00da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x129027d90 '__SVBool_t'
|-TypedefDecl 0x12a00da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x129027db0 '__clang_svboolx2_t'
|-TypedefDecl 0x12a00dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x129027dd0 '__clang_svboolx4_t'
|-TypedefDecl 0x12a00db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x129027df0 '__SVCount_t'
|-TypedefDecl 0x12a00dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12a00dbb0 'char *'
|   `-BuiltinType 0x1290270b0 'char'
|-TypedefDecl 0x12a00dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12a00dbb0 'char *'
|   `-BuiltinType 0x1290270b0 'char'
`-FunctionDecl 0x12a00ddf8 <dataset_diviso_filec/func19514_nonvuln.c:1:1, line:66:14> line:2:1 invalid mono_reflection_type_get_handle 'int *(int *)'
  |-ParmVarDecl 0x12a00dd28 <col:34, col:54> col:54 referenced invalid ref 'int *'
  `-CompoundStmt 0x12a028040 <line:3:1, line:66:14>
    |-IfStmt 0x12a00df58 <line:5:2, line:6:10>
    | |-UnaryOperator 0x12a00def8 <line:5:6, col:7> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x12a00dee0 <col:7> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x12a00dec0 <col:7> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x12a00df48 <line:6:3, col:10>
    |   `-RecoveryExpr 0x12a00df28 <col:10> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x12a00e058 <line:7:2, line:8:15>
    | |-CXXDependentScopeMemberExpr 0x12a00df98 <line:7:6, col:11> '<dependent type>' contains-errors lvalue ->type
    | | `-RecoveryExpr 0x12a00df78 <col:6> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x12a00e048 <line:8:3, col:15>
    |   `-CXXDependentScopeMemberExpr 0x12a00e000 <col:10, col:15> '<dependent type>' contains-errors lvalue ->type
    |     `-RecoveryExpr 0x12a00dfe0 <col:10> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x1290f4cd0 <line:10:2, line:15:2>
    | |-CallExpr 0x12a00e210 <line:10:6, col:22> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x12a00e1d0 <col:6> 'int ()' Function 0x12a00e118 'is_usertype' 'int ()'
    | | `-RecoveryExpr 0x12a00e1f0 <col:19> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x1290f4ca8 <col:25, line:15:2>
    |   |-BinaryOperator 0x12a00e3c8 <line:11:3, col:61> '<dependent type>' contains-errors '='
    |   | |-RecoveryExpr 0x12a00e258 <col:3> '<dependent type>' contains-errors lvalue
    |   | | `-DeclRefExpr 0x12a00e238 <col:3> 'int *' lvalue ParmVar 0x12a00dd28 'ref' 'int *'
    |   | `-CallExpr 0x12a00e3a0 <col:9, col:61> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x12a00e360 <col:9> 'int ()' Function 0x12a00e2a8 'mono_reflection_type_get_underlying_system_type' 'int ()'
    |   |   `-RecoveryExpr 0x12a00e380 <col:58> '<dependent type>' contains-errors lvalue
    |   |-CallExpr 0x1290f4b80 <line:12:3, col:31> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x1290f4ae0 <col:3> 'int ()' Function 0x1290f4a28 'g_assert' 'int ()'
    |   | `-UnaryOperator 0x1290f4b68 <col:13, col:30> '<dependent type>' contains-errors prefix '!' cannot overflow
    |   |   `-CallExpr 0x1290f4b40 <col:14, col:30> '<dependent type>' contains-errors
    |   |     |-DeclRefExpr 0x1290f4b00 <col:14> 'int ()' Function 0x12a00e118 'is_usertype' 'int ()'
    |   |     `-RecoveryExpr 0x1290f4b20 <col:27> '<dependent type>' contains-errors lvalue
    |   `-IfStmt 0x1290f4c88 <line:13:3, line:14:16>
    |     |-CXXDependentScopeMemberExpr 0x1290f4bc8 <line:13:7, col:12> '<dependent type>' contains-errors lvalue ->type
    |     | `-RecoveryExpr 0x1290f4ba8 <col:7> '<dependent type>' contains-errors lvalue
    |     `-ReturnStmt 0x1290f4c78 <line:14:4, col:16>
    |       `-CXXDependentScopeMemberExpr 0x1290f4c30 <col:11, col:16> '<dependent type>' contains-errors lvalue ->type
    |         `-RecoveryExpr 0x1290f4c10 <col:11> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x12a027c88 <line:19:2, line:63:2> has_else
    | |-CallExpr 0x1290f4f98 <line:19:6, col:25> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x1290f4f18 <col:6> 'int ()' Function 0x1290f4e60 'is_sre_array' 'int ()'
    | | `-RecoveryExpr 0x1290f4f78 <col:20> '<dependent type>' contains-errors lvalue
    | |-CompoundStmt 0x1290f53e0 <col:28, line:30:2>
    | `-IfStmt 0x12a027c58 <col:9, line:63:2> has_else
    |   |-RecoveryExpr 0x1290f54f0 <line:30:13, col:32> '_Bool' contains-errors
    |   |-CompoundStmt 0x1290f5570 <col:35, line:38:2>
    |   `-IfStmt 0x12a027c28 <col:9, line:63:2> has_else
    |     |-RecoveryExpr 0x1290f5680 <line:38:13, col:34> '_Bool' contains-errors
    |     |-CompoundStmt 0x1290f57e0 <col:37, line:46:2>
    |     `-IfStmt 0x12a027c08 <col:9, line:63:2>
    |       |-RecoveryExpr 0x1290f58f0 <line:46:13, col:43> '_Bool' contains-errors
    |       `-CompoundStmt 0x12a027be8 <col:46, line:63:2>
    |         |-DeclStmt 0x12a027480 <line:49:3, col:15>
    |         | |-VarDecl 0x1290f5928 <col:3, col:7> col:7 used i 'int'
    |         | `-VarDecl 0x12a027400 <col:3, col:10> col:10 used count 'int'
    |         `-ForStmt 0x12a027970 <line:53:3, line:56:3>
    |           |-BinaryOperator 0x12a027718 <line:53:8, col:12> 'int' '='
    |           | |-DeclRefExpr 0x12a0276d8 <col:8> 'int' lvalue Var 0x1290f5928 'i' 'int'
    |           | `-IntegerLiteral 0x12a0276f8 <col:12> 'int' 0
    |           |-<<<NULL>>>
    |           |-BinaryOperator 0x12a0277a8 <col:15, col:19> 'int' '<'
    |           | |-ImplicitCastExpr 0x12a027778 <col:15> 'int' <LValueToRValue>
    |           | | `-DeclRefExpr 0x12a027738 <col:15> 'int' lvalue Var 0x1290f5928 'i' 'int'
    |           | `-ImplicitCastExpr 0x12a027790 <col:19> 'int' <LValueToRValue>
    |           |   `-DeclRefExpr 0x12a027758 <col:19> 'int' lvalue Var 0x12a027400 'count' 'int'
    |           |-UnaryOperator 0x12a0277e8 <col:26, col:28> 'int' prefix '++'
    |           | `-DeclRefExpr 0x12a0277c8 <col:28> 'int' lvalue Var 0x1290f5928 'i' 'int'
    |           `-CompoundStmt 0x12a027960 <col:31, line:56:3>
    `-CallExpr 0x12a028010 <line:65:2, col:74> '<dependent type>' contains-errors
      |-DeclRefExpr 0x12a027d98 <col:2> 'int ()' Function 0x12a027ce0 'g_error' 'int ()'
      |-StringLiteral 0x12a027e00 <col:11> 'char[4]' lvalue "STR"
      `-CallExpr 0x12a027fe8 <col:18, col:73> '<dependent type>' contains-errors
        |-DeclRefExpr 0x12a027f00 <col:18> 'int ()' Function 0x12a027e48 'mono_type_full_name' 'int ()'
        `-UnaryOperator 0x12a027fd0 <col:39, col:64> '<dependent type>' contains-errors prefix '&' cannot overflow
          `-CXXDependentScopeMemberExpr 0x12a027f88 <col:40, col:64> '<dependent type>' contains-errors lvalue ->byval_arg
            `-CallExpr 0x12a027f60 <col:40, col:61> '<dependent type>' contains-errors
              |-DeclRefExpr 0x12a027f20 <col:40> 'int ()' Function 0x1290f4d18 'mono_object_class' 'int ()'
              `-RecoveryExpr 0x12a027f40 <col:58> '<dependent type>' contains-errors lvalue
