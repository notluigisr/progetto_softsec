TranslationUnitDecl 0x132055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1320564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x132055bd0 '__int128'
|-TypedefDecl 0x132056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x132055bf0 'unsigned __int128'
|-TypedefDecl 0x13286da30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13286d800 'struct __NSConstantString_tag'
|   `-Record 0x132056580 '__NSConstantString_tag'
|-TypedefDecl 0x13286da98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x132055d90 '__SVInt8_t'
|-TypedefDecl 0x13286db00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x132055db0 '__SVInt16_t'
|-TypedefDecl 0x13286db68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x132055dd0 '__SVInt32_t'
|-TypedefDecl 0x13286dbd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x132055df0 '__SVInt64_t'
|-TypedefDecl 0x13286dc38 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x132055e10 '__SVUint8_t'
|-TypedefDecl 0x13286dca0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x132055e30 '__SVUint16_t'
|-TypedefDecl 0x13286dd08 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x132055e50 '__SVUint32_t'
|-TypedefDecl 0x13286dd70 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x132055e70 '__SVUint64_t'
|-TypedefDecl 0x13286ddd8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x132055e90 '__SVFloat16_t'
|-TypedefDecl 0x13286de40 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x132055eb0 '__SVFloat32_t'
|-TypedefDecl 0x13286dea8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x132055ed0 '__SVFloat64_t'
|-TypedefDecl 0x13286df10 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x132055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13286df78 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x132055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13286dfe0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x132055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13286e048 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x132055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13286e0b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x132055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13286e118 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x132055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13286e180 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x132055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13286e1e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x132055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13286e250 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x132055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13286e2b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x132056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13286e320 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x132056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13286e388 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x132056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13286e3f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x132056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13286e458 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x132056090 '__clang_svint8x3_t'
|-TypedefDecl 0x13286e4c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1320560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13286e528 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1320560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13286e590 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1320560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13286e5f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x132056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13286e660 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x132056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13286e6c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x132056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13286e730 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x132056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13286e798 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x132056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13286f000 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1320561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13286f068 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1320561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13286f0d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1320561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13286f138 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x132056210 '__clang_svint8x4_t'
|-TypedefDecl 0x13286f1a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x132056230 '__clang_svint16x4_t'
|-TypedefDecl 0x13286f208 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x132056250 '__clang_svint32x4_t'
|-TypedefDecl 0x13286f270 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x132056270 '__clang_svint64x4_t'
|-TypedefDecl 0x13286f2d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x132056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13286f340 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1320562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13286f3a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1320562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13286f410 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1320562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13286f478 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x132056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13286f4e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x132056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13286f548 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x132056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13286f5b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x132056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13286f618 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x132056390 '__SVBool_t'
|-TypedefDecl 0x13286f680 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1320563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13286f6e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1320563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13286f750 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1320563f0 '__SVCount_t'
|-TypedefDecl 0x13286f7f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13286f7b0 'char *'
|   `-BuiltinType 0x1320556b0 'char'
|-TypedefDecl 0x13286f868 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13286f7b0 'char *'
|   `-BuiltinType 0x1320556b0 'char'
|-FunctionDecl 0x13286fac8 <dataset_diviso_filec/func2702_nonvuln.c:1:1, line:54:1> line:1:1 cmd_spec_restrict_file_names 'int (const char *, const char *, void *)'
| |-ParmVarDecl 0x13286f8d8 <col:31, col:43> col:43 used com 'const char *'
| |-ParmVarDecl 0x13286f958 <col:48, col:60> col:60 used val 'const char *'
| |-ParmVarDecl 0x13286f9d8 <col:65, col:71> col:71 place_ignored 'void *'
| `-CompoundStmt 0x13380a2e0 <line:2:1, line:54:1>
|   |-DeclStmt 0x13286fd30 <line:3:3, col:42>
|   | `-VarDecl 0x13286fbe8 <col:3, col:25> col:7 used restrict_os 'int' cinit
|   |   `-CXXDependentScopeMemberExpr 0x13286fce8 <col:21, col:25> '<dependent type>' contains-errors lvalue .restrict_files_os
|   |     `-RecoveryExpr 0x13286fcc8 <col:21> '<dependent type>' contains-errors lvalue
|   |-DeclStmt 0x13286fe90 <line:4:3, col:46>
|   | `-VarDecl 0x13286fd60 <col:3, col:27> col:7 used restrict_ctrl 'int' cinit
|   |   `-CXXDependentScopeMemberExpr 0x13286fe48 <col:23, col:27> '<dependent type>' contains-errors lvalue .restrict_files_ctrl
|   |     `-RecoveryExpr 0x13286fe28 <col:23> '<dependent type>' contains-errors lvalue
|   |-DeclStmt 0x134008800 <line:5:3, col:46>
|   | `-VarDecl 0x13286fec0 <col:3, col:27> col:7 used restrict_case 'int' cinit
|   |   `-CXXDependentScopeMemberExpr 0x13286ffa8 <col:23, col:27> '<dependent type>' contains-errors lvalue .restrict_files_case
|   |     `-RecoveryExpr 0x13286ff88 <col:23> '<dependent type>' contains-errors lvalue
|   |-DeclStmt 0x134008960 <line:6:3, col:54>
|   | `-VarDecl 0x134008830 <col:3, col:31> col:7 used restrict_nonascii 'int' cinit
|   |   `-CXXDependentScopeMemberExpr 0x134008918 <col:27, col:31> '<dependent type>' contains-errors lvalue .restrict_files_nonascii
|   |     `-RecoveryExpr 0x1340088f8 <col:27> '<dependent type>' contains-errors lvalue
|   |-DeclStmt 0x1340089f8 <line:8:3, col:18>
|   | `-VarDecl 0x134008990 <col:3, col:15> col:15 used end 'const char *'
|   `-DoStmt 0x13380a240 <line:12:3, line:44:22>
|     |-CompoundStmt 0x13380a0f0 <line:13:5, line:43:5>
|     | |-BinaryOperator 0x134009188 <line:14:7, col:29> 'const char *' '='
|     | | |-DeclRefExpr 0x134008a10 <col:7> 'const char *' lvalue Var 0x134008990 'end' 'const char *'
|     | | `-ImplicitCastExpr 0x134009170 <col:13, col:29> 'const char *' <NoOp>
|     | |   `-CallExpr 0x134009128 <col:13, col:29> 'char *'
|     | |     |-ImplicitCastExpr 0x134009110 <col:13> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|     | |     | `-DeclRefExpr 0x134009070 <col:13> 'char *(const char *, int)' Function 0x134008e90 'strchr' 'char *(const char *, int)'
|     | |     |-ImplicitCastExpr 0x134009158 <col:21> 'const char *' <LValueToRValue>
|     | |     | `-DeclRefExpr 0x134009090 <col:21> 'const char *' lvalue ParmVar 0x13286f958 'val' 'const char *'
|     | |     `-CharacterLiteral 0x1340090b0 <col:26> 'int' 44
|     | |-IfStmt 0x134009520 <line:15:7, line:16:32>
|     | | |-UnaryOperator 0x1340091e0 <line:15:11, col:12> 'int' prefix '!' cannot overflow
|     | | | `-ImplicitCastExpr 0x1340091c8 <col:12> 'const char *' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x1340091a8 <col:12> 'const char *' lvalue Var 0x134008990 'end' 'const char *'
|     | | `-BinaryOperator 0x134009500 <line:16:9, col:32> 'const char *' '='
|     | |   |-DeclRefExpr 0x1340091f8 <col:9> 'const char *' lvalue Var 0x134008990 'end' 'const char *'
|     | |   `-BinaryOperator 0x1340094e0 <col:15, col:32> 'const char *' '+'
|     | |     |-ImplicitCastExpr 0x1340094c8 <col:15> 'const char *' <LValueToRValue>
|     | |     | `-DeclRefExpr 0x134009218 <col:15> 'const char *' lvalue ParmVar 0x13286f958 'val' 'const char *'
|     | |     `-CallExpr 0x134009488 <col:21, col:32> 'unsigned long'
|     | |       |-ImplicitCastExpr 0x134009470 <col:21> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|     | |       | `-DeclRefExpr 0x1340093e8 <col:21> 'unsigned long (const char *)' Function 0x134009278 'strlen' 'unsigned long (const char *)'
|     | |       `-ImplicitCastExpr 0x1340094b0 <col:29> 'const char *' <LValueToRValue>
|     | |         `-DeclRefExpr 0x134009408 <col:29> 'const char *' lvalue ParmVar 0x13286f958 'val' 'const char *'
|     | |-IfStmt 0x132889f78 <line:18:7, line:39:9> has_else
|     | | |-CallExpr 0x134009718 <line:18:11, col:24> 'int'
|     | | | |-ImplicitCastExpr 0x134009700 <col:11> 'int (*)()' <FunctionToPointerDecay>
|     | | | | `-DeclRefExpr 0x134009650 <col:11> 'int ()' Function 0x134009598 'VAL_IS' 'int ()'
|     | | | `-ImplicitCastExpr 0x134009740 <col:19> 'char *' <ArrayToPointerDecay>
|     | | |   `-StringLiteral 0x1340096b0 <col:19> 'char[4]' lvalue "STR"
|     | | |-BinaryOperator 0x132889098 <line:19:9, col:23> 'int' contains-errors '='
|     | | | |-DeclRefExpr 0x134009758 <col:9> 'int' contains-errors lvalue Var 0x13286fbe8 'restrict_os' 'int'
|     | | | `-RecoveryExpr 0x132889078 <col:23> '<dependent type>' contains-errors lvalue
|     | | `-IfStmt 0x132889f48 <line:20:12, line:39:9> has_else
|     | |   |-CallExpr 0x132889110 <line:20:16, col:29> 'int'
|     | |   | |-ImplicitCastExpr 0x1328890f8 <col:16> 'int (*)()' <FunctionToPointerDecay>
|     | |   | | `-DeclRefExpr 0x1328890b8 <col:16> 'int ()' Function 0x134009598 'VAL_IS' 'int ()'
|     | |   | `-ImplicitCastExpr 0x132889138 <col:24> 'char *' <ArrayToPointerDecay>
|     | |   |   `-StringLiteral 0x1328890d8 <col:24> 'char[4]' lvalue "STR"
|     | |   |-BinaryOperator 0x1328891e0 <line:21:9, col:23> 'int' contains-errors '='
|     | |   | |-DeclRefExpr 0x132889150 <col:9> 'int' contains-errors lvalue Var 0x13286fbe8 'restrict_os' 'int'
|     | |   | `-ImplicitCastExpr 0x1328891c8 <col:23> 'int' contains-errors <LValueToRValue>
|     | |   |   `-DeclRefExpr 0x1328891a8 <col:23> 'int' contains-errors lvalue Var 0x13286fbe8 'restrict_os' 'int'
|     | |   `-IfStmt 0x132889f18 <line:22:12, line:39:9> has_else
|     | |     |-CallExpr 0x132889258 <line:22:16, col:29> 'int'
|     | |     | |-ImplicitCastExpr 0x132889240 <col:16> 'int (*)()' <FunctionToPointerDecay>
|     | |     | | `-DeclRefExpr 0x132889200 <col:16> 'int ()' Function 0x134009598 'VAL_IS' 'int ()'
|     | |     | `-ImplicitCastExpr 0x132889280 <col:24> 'char *' <ArrayToPointerDecay>
|     | |     |   `-StringLiteral 0x132889220 <col:24> 'char[4]' lvalue "STR"
|     | |     |-BinaryOperator 0x132889328 <line:23:9, col:23> 'int' contains-errors '='
|     | |     | |-DeclRefExpr 0x132889298 <col:9> 'int' contains-errors lvalue Var 0x13286fbe8 'restrict_os' 'int'
|     | |     | `-ImplicitCastExpr 0x132889310 <col:23> 'int' contains-errors <LValueToRValue>
|     | |     |   `-DeclRefExpr 0x1328892f0 <col:23> 'int' contains-errors lvalue Var 0x13286fbe8 'restrict_os' 'int'
|     | |     `-IfStmt 0x132889ee8 <line:24:12, line:39:9> has_else
|     | |       |-CallExpr 0x1328893a0 <line:24:16, col:29> 'int'
|     | |       | |-ImplicitCastExpr 0x132889388 <col:16> 'int (*)()' <FunctionToPointerDecay>
|     | |       | | `-DeclRefExpr 0x132889348 <col:16> 'int ()' Function 0x134009598 'VAL_IS' 'int ()'
|     | |       | `-ImplicitCastExpr 0x1328893c8 <col:24> 'char *' <ArrayToPointerDecay>
|     | |       |   `-StringLiteral 0x132889368 <col:24> 'char[4]' lvalue "STR"
|     | |       |-BinaryOperator 0x132889470 <line:25:9, col:25> 'int' contains-errors '='
|     | |       | |-DeclRefExpr 0x1328893e0 <col:9> 'int' contains-errors lvalue Var 0x13286fec0 'restrict_case' 'int'
|     | |       | `-ImplicitCastExpr 0x132889458 <col:25> 'int' contains-errors <LValueToRValue>
|     | |       |   `-DeclRefExpr 0x132889438 <col:25> 'int' contains-errors lvalue Var 0x13286fec0 'restrict_case' 'int'
|     | |       `-IfStmt 0x132889eb8 <line:26:12, line:39:9> has_else
|     | |         |-CallExpr 0x1328894e8 <line:26:16, col:29> 'int'
|     | |         | |-ImplicitCastExpr 0x1328894d0 <col:16> 'int (*)()' <FunctionToPointerDecay>
|     | |         | | `-DeclRefExpr 0x132889490 <col:16> 'int ()' Function 0x134009598 'VAL_IS' 'int ()'
|     | |         | `-ImplicitCastExpr 0x132889510 <col:24> 'char *' <ArrayToPointerDecay>
|     | |         |   `-StringLiteral 0x1328894b0 <col:24> 'char[4]' lvalue "STR"
|     | |         |-BinaryOperator 0x1328895b8 <line:27:9, col:25> 'int' contains-errors '='
|     | |         | |-DeclRefExpr 0x132889528 <col:9> 'int' contains-errors lvalue Var 0x13286fec0 'restrict_case' 'int'
|     | |         | `-ImplicitCastExpr 0x1328895a0 <col:25> 'int' contains-errors <LValueToRValue>
|     | |         |   `-DeclRefExpr 0x132889580 <col:25> 'int' contains-errors lvalue Var 0x13286fec0 'restrict_case' 'int'
|     | |         `-IfStmt 0x132889e88 <line:28:12, line:39:9> has_else
|     | |           |-CallExpr 0x132889630 <line:28:16, col:29> 'int'
|     | |           | |-ImplicitCastExpr 0x132889618 <col:16> 'int (*)()' <FunctionToPointerDecay>
|     | |           | | `-DeclRefExpr 0x1328895d8 <col:16> 'int ()' Function 0x134009598 'VAL_IS' 'int ()'
|     | |           | `-ImplicitCastExpr 0x132889658 <col:24> 'char *' <ArrayToPointerDecay>
|     | |           |   `-StringLiteral 0x1328895f8 <col:24> 'char[4]' lvalue "STR"
|     | |           |-NullStmt 0x132889e80 <line:29:9>
|     | |           `-IfStmt 0x132889e50 <line:30:12, line:39:9> has_else
|     | |             |-CallExpr 0x132889700 <line:30:16, col:29> 'int'
|     | |             | |-ImplicitCastExpr 0x1328896e8 <col:16> 'int (*)()' <FunctionToPointerDecay>
|     | |             | | `-DeclRefExpr 0x1328896a8 <col:16> 'int ()' Function 0x134009598 'VAL_IS' 'int ()'
|     | |             | `-ImplicitCastExpr 0x132889728 <col:24> 'char *' <ArrayToPointerDecay>
|     | |             |   `-StringLiteral 0x1328896c8 <col:24> 'char[4]' lvalue "STR"
|     | |             |-BinaryOperator 0x1328897b8 <line:31:9, col:29> 'int' contains-errors '='
|     | |             | |-DeclRefExpr 0x132889740 <col:9> 'int' contains-errors lvalue Var 0x134008830 'restrict_nonascii' 'int'
|     | |             | `-RecoveryExpr 0x132889798 <col:29> '<dependent type>' contains-errors lvalue
|     | |             `-CompoundStmt 0x132889e38 <line:33:9, line:39:9>
|     | |               `-CallExpr 0x132889df0 <line:34:11, line:37:47> '<dependent type>' contains-errors
|     | |                 |-DeclRefExpr 0x1328898b8 <line:34:11> 'int ()' Function 0x132889800 'fprintf' 'int ()'
|     | |                 |-RecoveryExpr 0x132889d00 <col:20> '<dependent type>' contains-errors lvalue
|     | |                 |-CallExpr 0x132889d38 <col:28, line:36:73> 'int'
|     | |                 | |-ImplicitCastExpr 0x132889d20 <line:34:28> 'int (*)()' <FunctionToPointerDecay>
|     | |                 | | `-DeclRefExpr 0x1328899d0 <col:28> 'int ()' Function 0x132889918 '_' 'int ()'
|     | |                 | `-ImplicitCastExpr 0x132889d60 <col:30> 'char *' <ArrayToPointerDecay>
|     | |                 |   `-StringLiteral 0x132889a30 <col:30> 'char[103]' lvalue "%s: %s: Invalid restriction %s,\n    use [unix|vms|windows],[lowercase|uppercase],[nocontrol],[ascii].\n"
|     | |                 |-RecoveryExpr 0x132889d78 <line:37:20> '<dependent type>' contains-errors lvalue
|     | |                 |-DeclRefExpr 0x132889b20 <col:31> 'const char *' lvalue ParmVar 0x13286f8d8 'com' 'const char *'
|     | |                 `-CallExpr 0x132889db0 <col:36, col:46> 'int'
|     | |                   |-ImplicitCastExpr 0x132889d98 <col:36> 'int (*)()' <FunctionToPointerDecay>
|     | |                   | `-DeclRefExpr 0x132889c20 <col:36> 'int ()' Function 0x132889b68 'quote' 'int ()'
|     | |                   `-ImplicitCastExpr 0x132889dd8 <col:43> 'const char *' <LValueToRValue>
|     | |                     `-DeclRefExpr 0x132889c40 <col:43> 'const char *' lvalue ParmVar 0x13286f958 'val' 'const char *'
|     | `-IfStmt 0x13380a0d0 <line:41:7, line:42:21>
|     |   |-ImplicitCastExpr 0x13380a000 <line:41:11, col:12> 'char' <LValueToRValue>
|     |   | `-UnaryOperator 0x132889fe0 <col:11, col:12> 'const char' lvalue prefix '*' cannot overflow
|     |   |   `-ImplicitCastExpr 0x132889fc8 <col:12> 'const char *' <LValueToRValue>
|     |   |     `-DeclRefExpr 0x132889fa8 <col:12> 'const char *' lvalue Var 0x134008990 'end' 'const char *'
|     |   `-BinaryOperator 0x13380a0b0 <line:42:9, col:21> 'const char *' '='
|     |     |-DeclRefExpr 0x13380a018 <col:9> 'const char *' lvalue ParmVar 0x13286f958 'val' 'const char *'
|     |     `-BinaryOperator 0x13380a090 <col:15, col:21> 'const char *' '+'
|     |       |-ImplicitCastExpr 0x13380a078 <col:15> 'const char *' <LValueToRValue>
|     |       | `-DeclRefExpr 0x13380a038 <col:15> 'const char *' lvalue Var 0x134008990 'end' 'const char *'
|     |       `-IntegerLiteral 0x13380a058 <col:21> 'int' 1
|     `-BinaryOperator 0x13380a220 <line:44:10, col:19> 'int' '&&'
|       |-ImplicitCastExpr 0x13380a1d8 <col:10, col:11> 'int' <IntegralCast>
|       | `-ImplicitCastExpr 0x13380a1c0 <col:10, col:11> 'char' <LValueToRValue>
|       |   `-UnaryOperator 0x13380a158 <col:10, col:11> 'const char' lvalue prefix '*' cannot overflow
|       |     `-ImplicitCastExpr 0x13380a140 <col:11> 'const char *' <LValueToRValue>
|       |       `-DeclRefExpr 0x13380a120 <col:11> 'const char *' lvalue ParmVar 0x13286f958 'val' 'const char *'
|       `-ImplicitCastExpr 0x13380a208 <col:18, col:19> 'int' <IntegralCast>
|         `-ImplicitCastExpr 0x13380a1f0 <col:18, col:19> 'char' <LValueToRValue>
|           `-UnaryOperator 0x13380a1a8 <col:18, col:19> 'const char' lvalue prefix '*' cannot overflow
|             `-ImplicitCastExpr 0x13380a190 <col:19> 'const char *' <LValueToRValue>
|               `-DeclRefExpr 0x13380a170 <col:19> 'const char *' lvalue Var 0x134008990 'end' 'const char *'
|-FunctionDecl 0x134008e90 <line:14:13> col:13 implicit used strchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x134008f90 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x134008ff8 <<invalid sloc>> <invalid sloc> 'int'
| `-BuiltinAttr 0x134008f38 <<invalid sloc>> Implicit 893
`-FunctionDecl 0x134009278 <line:16:21> col:21 implicit used strlen 'unsigned long (const char *)' extern
  |-ParmVarDecl 0x134009378 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x134009320 <<invalid sloc>> Implicit 902
