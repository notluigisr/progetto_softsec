TranslationUnitDecl 0x150055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1500564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x150055bd0 '__int128'
|-TypedefDecl 0x150056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x150055bf0 'unsigned __int128'
|-TypedefDecl 0x150126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x150126000 'struct __NSConstantString_tag'
|   `-Record 0x150056580 '__NSConstantString_tag'
|-TypedefDecl 0x150126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x150055d90 '__SVInt8_t'
|-TypedefDecl 0x150126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x150055db0 '__SVInt16_t'
|-TypedefDecl 0x150126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x150055dd0 '__SVInt32_t'
|-TypedefDecl 0x1501263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x150055df0 '__SVInt64_t'
|-TypedefDecl 0x150126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x150055e10 '__SVUint8_t'
|-TypedefDecl 0x1501264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x150055e30 '__SVUint16_t'
|-TypedefDecl 0x150126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x150055e50 '__SVUint32_t'
|-TypedefDecl 0x150126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x150055e70 '__SVUint64_t'
|-TypedefDecl 0x1501265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x150055e90 '__SVFloat16_t'
|-TypedefDecl 0x150126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x150055eb0 '__SVFloat32_t'
|-TypedefDecl 0x1501266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x150055ed0 '__SVFloat64_t'
|-TypedefDecl 0x150126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x150055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x150126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x150055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1501267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x150055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x150126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x150055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1501268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x150055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x150126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x150055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x150126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x150055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1501269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x150055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x150126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x150055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x150126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x150056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x150126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x150056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x150126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x150056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x150126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x150056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x150126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x150056090 '__clang_svint8x3_t'
|-TypedefDecl 0x150126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1500560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x150126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1500560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x150126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1500560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x150126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x150056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x150126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x150056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x150126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x150056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x150126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x150056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x150126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x150056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x150127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1500561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x150127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1500561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1501278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1500561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x150127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x150056210 '__clang_svint8x4_t'
|-TypedefDecl 0x1501279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x150056230 '__clang_svint16x4_t'
|-TypedefDecl 0x150127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x150056250 '__clang_svint32x4_t'
|-TypedefDecl 0x150127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x150056270 '__clang_svint64x4_t'
|-TypedefDecl 0x150127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x150056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x150127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1500562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x150127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1500562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x150127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1500562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x150127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x150056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x150127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x150056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x150127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x150056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x150127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x150056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x150127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x150056390 '__SVBool_t'
|-TypedefDecl 0x150127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1500563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x150127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1500563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x150127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1500563f0 '__SVCount_t'
|-TypedefDecl 0x150127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x150127fb0 'char *'
|   `-BuiltinType 0x1500556b0 'char'
|-TypedefDecl 0x150128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x150127fb0 'char *'
|   `-BuiltinType 0x1500556b0 'char'
|-FunctionDecl 0x150128348 <dataset_diviso_filec/func5034_vuln.c:1:1, line:13:1> line:1:12 invalid getnum 'int (int *, const char **, int)' static
| |-ParmVarDecl 0x150128128 <col:20, col:31> col:31 invalid L 'int *'
| |-ParmVarDecl 0x1501281d8 <col:34, col:47> col:47 used fmt 'const char **'
| |-ParmVarDecl 0x150128258 <col:52, col:56> col:56 used df 'int'
| `-CompoundStmt 0x150142530 <col:60, line:13:1>
|   `-IfStmt 0x150142500 <line:2:3, line:12:3> has_else
|     |-UnaryOperator 0x150141b90 <line:2:7, col:21> 'int' prefix '!' cannot overflow
|     | `-CallExpr 0x150141b38 <col:8, col:21> 'int'
|     |   |-ImplicitCastExpr 0x150141b20 <col:8> 'int (*)(int)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x150141a50 <col:8> 'int (int)' Function 0x150141890 'isdigit' 'int (int)'
|     |   `-ImplicitCastExpr 0x150141b78 <col:16, col:18> 'int' <IntegralCast>
|     |     `-ImplicitCastExpr 0x150141b60 <col:16, col:18> 'char' <LValueToRValue>
|     |       `-UnaryOperator 0x150141ad8 <col:16, col:18> 'const char' lvalue prefix '*' cannot overflow
|     |         `-ImplicitCastExpr 0x150141ac0 <col:17, col:18> 'const char *' <LValueToRValue>
|     |           `-UnaryOperator 0x150141aa8 <col:17, col:18> 'const char *' lvalue prefix '*' cannot overflow
|     |             `-ImplicitCastExpr 0x150141a90 <col:18> 'const char **' <LValueToRValue>
|     |               `-DeclRefExpr 0x150141a70 <col:18> 'const char **' lvalue ParmVar 0x1501281d8 'fmt' 'const char **'
|     |-ReturnStmt 0x150141be0 <line:3:5, col:12>
|     | `-ImplicitCastExpr 0x150141bc8 <col:12> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x150141ba8 <col:12> 'int' lvalue ParmVar 0x150128258 'df' 'int'
|     `-CompoundStmt 0x1501424d8 <line:4:8, line:12:3>
|       |-DeclStmt 0x150141c90 <line:5:5, col:14>
|       | `-VarDecl 0x150141c08 <col:5, col:13> col:9 used a 'int' cinit
|       |   `-IntegerLiteral 0x150141c70 <col:13> 'int' 0
|       |-DoStmt 0x150142470 <line:6:5, line:10:28>
|       | |-CompoundStmt 0x150142340 <line:6:8, line:10:5>
|       | | |-IfStmt 0x150142120 <line:7:7, line:8:28>
|       | | | |-RecoveryExpr 0x150141ed8 <line:7:11, col:66> '_Bool' contains-errors
|       | | | `-CallExpr 0x1501420f0 <line:8:9, col:28> '<dependent type>' contains-errors
|       | | |   |-DeclRefExpr 0x150142050 <col:9> 'int ()' Function 0x150141f98 'luaL_error' 'int ()'
|       | | |   |-RecoveryExpr 0x150142070 <col:20> '<dependent type>' contains-errors lvalue
|       | | |   `-StringLiteral 0x1501420d0 <col:23> 'char[4]' lvalue "STR"
|       | | `-BinaryOperator 0x150142320 <line:9:7, col:32> 'int' '='
|       | |   |-DeclRefExpr 0x150142140 <col:7> 'int' lvalue Var 0x150141c08 'a' 'int'
|       | |   `-BinaryOperator 0x150142300 <col:11, col:32> 'int' '-'
|       | |     |-BinaryOperator 0x1501422c8 <col:11, col:28> 'int' '+'
|       | |     | |-BinaryOperator 0x1501421b8 <col:11, col:13> 'int' '*'
|       | |     | | |-ImplicitCastExpr 0x1501421a0 <col:11> 'int' <LValueToRValue>
|       | |     | | | `-DeclRefExpr 0x150142160 <col:11> 'int' lvalue Var 0x150141c08 'a' 'int'
|       | |     | | `-IntegerLiteral 0x150142180 <col:13> 'int' 10
|       | |     | `-ImplicitCastExpr 0x1501422b0 <col:18, col:28> 'int' <IntegralCast>
|       | |     |   `-ImplicitCastExpr 0x150142298 <col:18, col:28> 'char' <LValueToRValue>
|       | |     |     `-UnaryOperator 0x150142280 <col:18, col:28> 'const char' lvalue prefix '*' cannot overflow
|       | |     |       `-ParenExpr 0x150142260 <col:19, col:28> 'const char *'
|       | |     |         `-UnaryOperator 0x150142248 <col:20, col:26> 'const char *' postfix '++'
|       | |     |           `-ParenExpr 0x150142228 <col:20, col:25> 'const char *' lvalue
|       | |     |             `-UnaryOperator 0x150142210 <col:21, col:22> 'const char *' lvalue prefix '*' cannot overflow
|       | |     |               `-ImplicitCastExpr 0x1501421f8 <col:22> 'const char **' <LValueToRValue>
|       | |     |                 `-DeclRefExpr 0x1501421d8 <col:22> 'const char **' lvalue ParmVar 0x1501281d8 'fmt' 'const char **'
|       | |     `-CharacterLiteral 0x1501422e8 <col:32> 'int' 48
|       | `-CallExpr 0x150142418 <line:10:14, col:27> 'int'
|       |   |-ImplicitCastExpr 0x150142400 <col:14> 'int (*)(int)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x150142360 <col:14> 'int (int)' Function 0x150141890 'isdigit' 'int (int)'
|       |   `-ImplicitCastExpr 0x150142458 <col:22, col:24> 'int' <IntegralCast>
|       |     `-ImplicitCastExpr 0x150142440 <col:22, col:24> 'char' <LValueToRValue>
|       |       `-UnaryOperator 0x1501423e8 <col:22, col:24> 'const char' lvalue prefix '*' cannot overflow
|       |         `-ImplicitCastExpr 0x1501423d0 <col:23, col:24> 'const char *' <LValueToRValue>
|       |           `-UnaryOperator 0x1501423b8 <col:23, col:24> 'const char *' lvalue prefix '*' cannot overflow
|       |             `-ImplicitCastExpr 0x1501423a0 <col:24> 'const char **' <LValueToRValue>
|       |               `-DeclRefExpr 0x150142380 <col:24> 'const char **' lvalue ParmVar 0x1501281d8 'fmt' 'const char **'
|       `-ReturnStmt 0x1501424c8 <line:11:5, col:12>
|         `-ImplicitCastExpr 0x1501424b0 <col:12> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x150142490 <col:12> 'int' lvalue Var 0x150141c08 'a' 'int'
`-FunctionDecl 0x150141890 <line:2:8> col:8 implicit used isdigit 'int (int)' extern
  |-ParmVarDecl 0x150141990 <<invalid sloc>> <invalid sloc> 'int'
  |-BuiltinAttr 0x150141938 <<invalid sloc>> Implicit 924
  |-NoThrowAttr 0x150141a00 <col:8> Implicit
  `-PureAttr 0x150141a28 <col:8> Implicit
