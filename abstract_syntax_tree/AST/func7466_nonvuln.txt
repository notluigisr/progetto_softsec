TranslationUnitDecl 0x145026408 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1450272b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1450269d0 '__int128'
|-TypedefDecl 0x145027328 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1450269f0 'unsigned __int128'
|-TypedefDecl 0x14600be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x14600bc00 'struct __NSConstantString_tag'
|   `-Record 0x145027380 '__NSConstantString_tag'
|-TypedefDecl 0x14600be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x145026b90 '__SVInt8_t'
|-TypedefDecl 0x14600bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x145026bb0 '__SVInt16_t'
|-TypedefDecl 0x14600bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x145026bd0 '__SVInt32_t'
|-TypedefDecl 0x14600bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x145026bf0 '__SVInt64_t'
|-TypedefDecl 0x14600c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x145026c10 '__SVUint8_t'
|-TypedefDecl 0x14600c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x145026c30 '__SVUint16_t'
|-TypedefDecl 0x14600c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x145026c50 '__SVUint32_t'
|-TypedefDecl 0x14600c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x145026c70 '__SVUint64_t'
|-TypedefDecl 0x14600c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x145026c90 '__SVFloat16_t'
|-TypedefDecl 0x14600c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x145026cb0 '__SVFloat32_t'
|-TypedefDecl 0x14600c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x145026cd0 '__SVFloat64_t'
|-TypedefDecl 0x14600c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x145026cf0 '__SVBfloat16_t'
|-TypedefDecl 0x14600c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x145026d10 '__clang_svint8x2_t'
|-TypedefDecl 0x14600c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x145026d30 '__clang_svint16x2_t'
|-TypedefDecl 0x14600c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x145026d50 '__clang_svint32x2_t'
|-TypedefDecl 0x14600c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x145026d70 '__clang_svint64x2_t'
|-TypedefDecl 0x14600c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x145026d90 '__clang_svuint8x2_t'
|-TypedefDecl 0x14600c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x145026db0 '__clang_svuint16x2_t'
|-TypedefDecl 0x14600c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x145026dd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x14600c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x145026df0 '__clang_svuint64x2_t'
|-TypedefDecl 0x14600c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x145026e10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x14600c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x145026e30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x14600c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x145026e50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x14600c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x145026e70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x14600c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x145026e90 '__clang_svint8x3_t'
|-TypedefDecl 0x14600c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x145026eb0 '__clang_svint16x3_t'
|-TypedefDecl 0x14600c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x145026ed0 '__clang_svint32x3_t'
|-TypedefDecl 0x14600c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x145026ef0 '__clang_svint64x3_t'
|-TypedefDecl 0x14600c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x145026f10 '__clang_svuint8x3_t'
|-TypedefDecl 0x14600ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x145026f30 '__clang_svuint16x3_t'
|-TypedefDecl 0x14600cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x145026f50 '__clang_svuint32x3_t'
|-TypedefDecl 0x14600cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x145026f70 '__clang_svuint64x3_t'
|-TypedefDecl 0x14600cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x145026f90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x14600d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x145026fb0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x14600d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x145026fd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x14600d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x145026ff0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x14600d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x145027010 '__clang_svint8x4_t'
|-TypedefDecl 0x14600d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x145027030 '__clang_svint16x4_t'
|-TypedefDecl 0x14600d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x145027050 '__clang_svint32x4_t'
|-TypedefDecl 0x14600d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x145027070 '__clang_svint64x4_t'
|-TypedefDecl 0x14600d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x145027090 '__clang_svuint8x4_t'
|-TypedefDecl 0x14600d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1450270b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x14600d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1450270d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x14600d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1450270f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x14600d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x145027110 '__clang_svfloat16x4_t'
|-TypedefDecl 0x14600d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x145027130 '__clang_svfloat32x4_t'
|-TypedefDecl 0x14600d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x145027150 '__clang_svfloat64x4_t'
|-TypedefDecl 0x14600d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x145027170 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x14600da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x145027190 '__SVBool_t'
|-TypedefDecl 0x14600da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1450271b0 '__clang_svboolx2_t'
|-TypedefDecl 0x14600dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1450271d0 '__clang_svboolx4_t'
|-TypedefDecl 0x14600db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1450271f0 '__SVCount_t'
|-TypedefDecl 0x14600dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x14600dbb0 'char *'
|   `-BuiltinType 0x1450264b0 'char'
|-TypedefDecl 0x14600dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x14600dbb0 'char *'
|   `-BuiltinType 0x1450264b0 'char'
|-FunctionDecl 0x14600def8 <dataset_diviso_filec/func7466_nonvuln.c:1:1, line:51:1> line:1:13 find_filename_suffix 'const char *(const char *, int, int *)'
| |-ParmVarDecl 0x14600dcd8 <col:34, col:46> col:46 used fn 'const char *'
| |-ParmVarDecl 0x14600dd58 <col:50, col:54> col:54 used fn_len 'int'
| |-ParmVarDecl 0x14600de08 <col:62, col:67> col:67 used len_ptr 'int *'
| `-CompoundStmt 0x14602afc8 <line:2:1, line:51:1>
|   |-DeclStmt 0x14600e118 <line:3:2, col:21>
|   | |-VarDecl 0x14600e018 <col:2, col:14> col:14 used suf 'const char *'
|   | `-VarDecl 0x14600e098 <col:2, col:20> col:20 used s 'const char *'
|   |-DeclStmt 0x14600e1c8 <line:5:2, col:11>
|   | `-VarDecl 0x14600e160 <col:2, col:6> col:6 used s_len 'int'
|   |-WhileStmt 0x14600e380 <line:8:2, col:43>
|   | |-BinaryOperator 0x14600e2d0 <col:9, col:26> 'int' '&&'
|   | | |-ImplicitCastExpr 0x14600e2b8 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x14600e1e0 <col:9> 'int' lvalue ParmVar 0x14600dd58 'fn_len' 'int'
|   | | `-BinaryOperator 0x14600e298 <col:19, col:26> 'int' '=='
|   | |   |-ImplicitCastExpr 0x14600e280 <col:19, col:20> 'int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x14600e268 <col:19, col:20> 'char' <LValueToRValue>
|   | |   |   `-UnaryOperator 0x14600e238 <col:19, col:20> 'const char' lvalue prefix '*' cannot overflow
|   | |   |     `-ImplicitCastExpr 0x14600e220 <col:20> 'const char *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x14600e200 <col:20> 'const char *' lvalue ParmVar 0x14600dcd8 'fn' 'const char *'
|   | |   `-CharacterLiteral 0x14600e250 <col:26> 'int' 46
|   | `-BinaryOperator 0x14600e360 <col:31, col:43> 'int' ','
|   |   |-UnaryOperator 0x14600e310 <col:31, col:33> 'const char *' postfix '++'
|   |   | `-DeclRefExpr 0x14600e2f0 <col:31> 'const char *' lvalue ParmVar 0x14600dcd8 'fn' 'const char *'
|   |   `-UnaryOperator 0x14600e348 <col:37, col:43> 'int' postfix '--'
|   |     `-DeclRefExpr 0x14600e328 <col:37> 'int' lvalue ParmVar 0x14600dd58 'fn_len' 'int'
|   |-IfStmt 0x1460276c0 <line:11:2, line:14:3> has_else
|   | |-BinaryOperator 0x146027558 <line:11:6, col:36> 'int' '&&'
|   | | |-BinaryOperator 0x146027400 <col:6, col:15> 'int' '>'
|   | | | |-ImplicitCastExpr 0x14600e3e0 <col:6> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x14600e3a0 <col:6> 'int' lvalue ParmVar 0x14600dd58 'fn_len' 'int'
|   | | | `-IntegerLiteral 0x14600e3c0 <col:15> 'int' 1
|   | | `-BinaryOperator 0x146027538 <col:20, col:36> 'int' '=='
|   | |   |-ImplicitCastExpr 0x146027520 <col:20, col:31> 'int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x146027508 <col:20, col:31> 'char' <LValueToRValue>
|   | |   |   `-ArraySubscriptExpr 0x1460274d0 <col:20, col:31> 'const char' lvalue
|   | |   |     |-ImplicitCastExpr 0x1460274b8 <col:20> 'const char *' <LValueToRValue>
|   | |   |     | `-DeclRefExpr 0x146027420 <col:20> 'const char *' lvalue ParmVar 0x14600dcd8 'fn' 'const char *'
|   | |   |     `-BinaryOperator 0x146027498 <col:23, col:30> 'int' '-'
|   | |   |       |-ImplicitCastExpr 0x146027480 <col:23> 'int' <LValueToRValue>
|   | |   |       | `-DeclRefExpr 0x146027440 <col:23> 'int' lvalue ParmVar 0x14600dd58 'fn_len' 'int'
|   | |   |       `-IntegerLiteral 0x146027460 <col:30> 'int' 1
|   | |   `-CharacterLiteral 0x1460274f0 <col:36> 'int' 126
|   | |-BinaryOperator 0x146027680 <line:12:3, col:25> '<dependent type>' contains-errors ','
|   | | |-UnaryOperator 0x146027598 <col:3, col:9> 'int' postfix '--'
|   | | | `-DeclRefExpr 0x146027578 <col:3> 'int' lvalue ParmVar 0x14600dd58 'fn_len' 'int'
|   | | `-BinaryOperator 0x146027660 <col:13, col:25> '<dependent type>' contains-errors '='
|   | |   |-RecoveryExpr 0x146027620 <col:13> '<dependent type>' contains-errors lvalue
|   | |   `-RecoveryExpr 0x146027640 <col:25> '<dependent type>' contains-errors lvalue
|   | `-NullStmt 0x1460276b8 <line:14:3>
|   |-BinaryOperator 0x146027798 <line:17:2, col:8> 'const char *' '='
|   | |-DeclRefExpr 0x1460276f0 <col:2> 'const char *' lvalue Var 0x14600e018 'suf' 'const char *'
|   | `-ImplicitCastExpr 0x146027780 <col:8> 'const char *' <NoOp>
|   |   `-ImplicitCastExpr 0x146027768 <col:8> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x146027750 <col:8> 'char[1]' lvalue ""
|   |-BinaryOperator 0x146027828 <line:18:2, col:13> 'int' '='
|   | |-UnaryOperator 0x1460277f0 <col:2, col:3> 'int' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x1460277d8 <col:3> 'int *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1460277b8 <col:3> 'int *' lvalue ParmVar 0x14600de08 'len_ptr' 'int *'
|   | `-IntegerLiteral 0x146027808 <col:13> 'int' 0
|   |-ForStmt 0x14602af48 <line:21:2, line:48:2>
|   | |-BinaryOperator 0x1460278f8 <line:21:7, col:16> 'const char *' '='
|   | | |-DeclRefExpr 0x146027848 <col:7> 'const char *' lvalue Var 0x14600e098 's' 'const char *'
|   | | `-BinaryOperator 0x1460278d8 <col:11, col:16> 'const char *' '+'
|   | |   |-ImplicitCastExpr 0x1460278a8 <col:11> 'const char *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x146027868 <col:11> 'const char *' lvalue ParmVar 0x14600dcd8 'fn' 'const char *'
|   | |   `-ImplicitCastExpr 0x1460278c0 <col:16> 'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x146027888 <col:16> 'int' lvalue ParmVar 0x14600dd58 'fn_len' 'int'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x146027970 <col:24, col:33> 'int' '>'
|   | | |-ImplicitCastExpr 0x146027958 <col:24> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x146027918 <col:24> 'int' lvalue ParmVar 0x14600dd58 'fn_len' 'int'
|   | | `-IntegerLiteral 0x146027938 <col:33> 'int' 1
|   | |-<<<NULL>>>
|   | `-CompoundStmt 0x14602aee8 <col:38, line:48:2>
|   |   |-WhileStmt 0x146027b08 <line:22:3, col:35>
|   |   | |-BinaryOperator 0x146027ad8 <col:10, col:30> 'int' '&&'
|   |   | | |-BinaryOperator 0x146027a28 <col:10, col:18> 'int' '!='
|   |   | | | |-ImplicitCastExpr 0x146027a10 <col:10, col:13> 'int' <IntegralCast>
|   |   | | | | `-ImplicitCastExpr 0x1460279f8 <col:10, col:13> 'char' <LValueToRValue>
|   |   | | | |   `-UnaryOperator 0x1460279c8 <col:10, col:13> 'const char' lvalue prefix '*' cannot overflow
|   |   | | | |     `-UnaryOperator 0x1460279b0 <col:11, col:13> 'const char *' prefix '--'
|   |   | | | |       `-DeclRefExpr 0x146027990 <col:13> 'const char *' lvalue Var 0x14600e098 's' 'const char *'
|   |   | | | `-CharacterLiteral 0x1460279e0 <col:18> 'int' 46
|   |   | | `-BinaryOperator 0x146027ab8 <col:25, col:30> 'int' '!='
|   |   | |   |-ImplicitCastExpr 0x146027a88 <col:25> 'const char *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x146027a48 <col:25> 'const char *' lvalue Var 0x14600e098 's' 'const char *'
|   |   | |   `-ImplicitCastExpr 0x146027aa0 <col:30> 'const char *' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x146027a68 <col:30> 'const char *' lvalue ParmVar 0x14600dcd8 'fn' 'const char *'
|   |   | `-CompoundStmt 0x146027af8 <col:34, col:35>
|   |   |-IfStmt 0x146027bc0 <line:23:3, line:24:4>
|   |   | |-BinaryOperator 0x146027b98 <line:23:7, col:12> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x146027b68 <col:7> 'const char *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x146027b28 <col:7> 'const char *' lvalue Var 0x14600e098 's' 'const char *'
|   |   | | `-ImplicitCastExpr 0x146027b80 <col:12> 'const char *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x146027b48 <col:12> 'const char *' lvalue ParmVar 0x14600dcd8 'fn' 'const char *'
|   |   | `-BreakStmt 0x146027bb8 <line:24:4>
|   |   |-BinaryOperator 0x146027d38 <line:25:3, col:27> 'int' '='
|   |   | |-DeclRefExpr 0x146027be0 <col:3> 'int' lvalue Var 0x14600e160 's_len' 'int'
|   |   | `-ImplicitCastExpr 0x146027d20 <col:11, col:27> 'int' <IntegralCast>
|   |   |   `-BinaryOperator 0x146027d00 <col:11, col:27> 'long' '-'
|   |   |     |-ImplicitCastExpr 0x146027ce8 <col:11> 'long' <IntegralCast>
|   |   |     | `-ImplicitCastExpr 0x146027cd0 <col:11> 'int' <LValueToRValue>
|   |   |     |   `-DeclRefExpr 0x146027c00 <col:11> 'int' lvalue ParmVar 0x14600dd58 'fn_len' 'int'
|   |   |     `-ParenExpr 0x146027cb0 <col:20, col:27> 'long'
|   |   |       `-BinaryOperator 0x146027c90 <col:21, col:25> 'long' '-'
|   |   |         |-ImplicitCastExpr 0x146027c60 <col:21> 'const char *' <LValueToRValue>
|   |   |         | `-DeclRefExpr 0x146027c20 <col:21> 'const char *' lvalue Var 0x14600e098 's' 'const char *'
|   |   |         `-ImplicitCastExpr 0x146027c78 <col:25> 'const char *' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x146027c40 <col:25> 'const char *' lvalue ParmVar 0x14600dcd8 'fn' 'const char *'
|   |   |-BinaryOperator 0x146027e20 <line:26:3, col:16> 'int' '='
|   |   | |-DeclRefExpr 0x146027d58 <col:3> 'int' lvalue ParmVar 0x14600dd58 'fn_len' 'int'
|   |   | `-ImplicitCastExpr 0x146027e08 <col:12, col:16> 'int' <IntegralCast>
|   |   |   `-BinaryOperator 0x146027de8 <col:12, col:16> 'long' '-'
|   |   |     |-ImplicitCastExpr 0x146027db8 <col:12> 'const char *' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x146027d78 <col:12> 'const char *' lvalue Var 0x14600e098 's' 'const char *'
|   |   |     `-ImplicitCastExpr 0x146027dd0 <col:16> 'const char *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x146027d98 <col:16> 'const char *' lvalue ParmVar 0x14600dcd8 'fn' 'const char *'
|   |   |-IfStmt 0x14602a978 <line:27:3, line:36:4> has_else
|   |   | |-BinaryOperator 0x146027e98 <line:27:7, col:16> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x146027e80 <col:7> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x146027e40 <col:7> 'int' lvalue Var 0x14600e160 's_len' 'int'
|   |   | | `-IntegerLiteral 0x146027e60 <col:16> 'int' 4
|   |   | |-CompoundStmt 0x14602a0e8 <col:19, line:31:3>
|   |   | | `-IfStmt 0x14602a0c8 <line:28:4, line:30:5>
|   |   | |   |-BinaryOperator 0x14602a0a0 <line:28:8, line:29:30> 'int' '||'
|   |   | |   | |-BinaryOperator 0x146029ef8 <line:28:8, col:30> 'int' '=='
|   |   | |   | | |-CallExpr 0x146029e78 <col:8, col:25> 'int'
|   |   | |   | | | |-ImplicitCastExpr 0x146029e60 <col:8> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |   | |   | | | | `-DeclRefExpr 0x146029d10 <col:8> 'int (const char *, const char *)' Function 0x146028320 'strcmp' 'int (const char *, const char *)'
|   |   | |   | | | |-BinaryOperator 0x146029d88 <col:15, col:17> 'const char *' '+'
|   |   | |   | | | | |-ImplicitCastExpr 0x146029d70 <col:15> 'const char *' <LValueToRValue>
|   |   | |   | | | | | `-DeclRefExpr 0x146029d30 <col:15> 'const char *' lvalue Var 0x14600e098 's' 'const char *'
|   |   | |   | | | | `-IntegerLiteral 0x146029d50 <col:17> 'int' 1
|   |   | |   | | | `-ImplicitCastExpr 0x146029ec0 <col:20> 'const char *' <NoOp>
|   |   | |   | | |   `-ImplicitCastExpr 0x146029ea8 <col:20> 'char *' <ArrayToPointerDecay>
|   |   | |   | | |     `-StringLiteral 0x146029df0 <col:20> 'char[4]' lvalue "STR"
|   |   | |   | | `-IntegerLiteral 0x146029ed8 <col:30> 'int' 0
|   |   | |   | `-BinaryOperator 0x14602a080 <line:29:8, col:30> 'int' '=='
|   |   | |   |   |-CallExpr 0x14602a000 <col:8, col:25> 'int'
|   |   | |   |   | |-ImplicitCastExpr 0x146029fe8 <col:8> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |   | |   |   | | `-DeclRefExpr 0x146029f18 <col:8> 'int (const char *, const char *)' Function 0x146028320 'strcmp' 'int (const char *, const char *)'
|   |   | |   |   | |-BinaryOperator 0x146029f90 <col:15, col:17> 'const char *' '+'
|   |   | |   |   | | |-ImplicitCastExpr 0x146029f78 <col:15> 'const char *' <LValueToRValue>
|   |   | |   |   | | | `-DeclRefExpr 0x146029f38 <col:15> 'const char *' lvalue Var 0x14600e098 's' 'const char *'
|   |   | |   |   | | `-IntegerLiteral 0x146029f58 <col:17> 'int' 1
|   |   | |   |   | `-ImplicitCastExpr 0x14602a048 <col:20> 'const char *' <NoOp>
|   |   | |   |   |   `-ImplicitCastExpr 0x14602a030 <col:20> 'char *' <ArrayToPointerDecay>
|   |   | |   |   |     `-StringLiteral 0x146029fb0 <col:20> 'char[4]' lvalue "STR"
|   |   | |   |   `-IntegerLiteral 0x14602a060 <col:30> 'int' 0
|   |   | |   `-ContinueStmt 0x14602a0c0 <line:30:5>
|   |   | `-IfStmt 0x14602a948 <line:31:10, line:36:4> has_else
|   |   |   |-BinaryOperator 0x14602a158 <line:31:14, col:23> 'int' '=='
|   |   |   | |-ImplicitCastExpr 0x14602a140 <col:14> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x14602a100 <col:14> 'int' lvalue Var 0x14600e160 's_len' 'int'
|   |   |   | `-IntegerLiteral 0x14602a120 <col:23> 'int' 5
|   |   |   |-CompoundStmt 0x14602a328 <col:26, line:34:3>
|   |   |   | `-IfStmt 0x14602a308 <line:32:4, line:33:5>
|   |   |   |   |-BinaryOperator 0x14602a2e0 <line:32:8, col:30> 'int' '=='
|   |   |   |   | |-CallExpr 0x14602a260 <col:8, col:25> 'int'
|   |   |   |   | | |-ImplicitCastExpr 0x14602a248 <col:8> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |   |   |   | | | `-DeclRefExpr 0x14602a178 <col:8> 'int (const char *, const char *)' Function 0x146028320 'strcmp' 'int (const char *, const char *)'
|   |   |   |   | | |-BinaryOperator 0x14602a1f0 <col:15, col:17> 'const char *' '+'
|   |   |   |   | | | |-ImplicitCastExpr 0x14602a1d8 <col:15> 'const char *' <LValueToRValue>
|   |   |   |   | | | | `-DeclRefExpr 0x14602a198 <col:15> 'const char *' lvalue Var 0x14600e098 's' 'const char *'
|   |   |   |   | | | `-IntegerLiteral 0x14602a1b8 <col:17> 'int' 1
|   |   |   |   | | `-ImplicitCastExpr 0x14602a2a8 <col:20> 'const char *' <NoOp>
|   |   |   |   | |   `-ImplicitCastExpr 0x14602a290 <col:20> 'char *' <ArrayToPointerDecay>
|   |   |   |   | |     `-StringLiteral 0x14602a210 <col:20> 'char[4]' lvalue "STR"
|   |   |   |   | `-IntegerLiteral 0x14602a2c0 <col:30> 'int' 0
|   |   |   |   `-ContinueStmt 0x14602a300 <line:33:5>
|   |   |   `-IfStmt 0x14602a928 <line:34:10, line:36:4>
|   |   |     |-BinaryOperator 0x14602a900 <line:34:14, line:35:38> 'int' contains-errors '&&'
|   |   |     | |-BinaryOperator 0x14602a868 <line:34:14, line:35:18> 'int' contains-errors '&&'
|   |   |     | | |-BinaryOperator 0x14602a7c0 <line:34:14, col:27> 'int' contains-errors '&&'
|   |   |     | | | |-BinaryOperator 0x14602a780 <col:14, col:22> 'int' '>'
|   |   |     | | | | |-ImplicitCastExpr 0x14602a768 <col:14> 'int' <LValueToRValue>
|   |   |     | | | | | `-DeclRefExpr 0x14602a340 <col:14> 'int' lvalue Var 0x14600e160 's_len' 'int'
|   |   |     | | | | `-IntegerLiteral 0x14602a360 <col:22> 'int' 2
|   |   |     | | | `-RecoveryExpr 0x14602a7a0 <col:27> '<dependent type>' contains-errors lvalue
|   |   |     | | `-BinaryOperator 0x14602a848 <line:35:10, col:18> 'int' '=='
|   |   |     | |   |-ImplicitCastExpr 0x14602a830 <col:10, col:13> 'int' <IntegralCast>
|   |   |     | |   | `-ImplicitCastExpr 0x14602a818 <col:10, col:13> 'char' <LValueToRValue>
|   |   |     | |   |   `-ArraySubscriptExpr 0x14602a7f8 <col:10, col:13> 'const char' lvalue
|   |   |     | |   |     |-ImplicitCastExpr 0x14602a7e0 <col:10> 'const char *' <LValueToRValue>
|   |   |     | |   |     | `-DeclRefExpr 0x14602a3f0 <col:10> 'const char *' lvalue Var 0x14600e098 's' 'const char *'
|   |   |     | |   |     `-IntegerLiteral 0x14602a410 <col:12> 'int' 1
|   |   |     | |   `-CharacterLiteral 0x14602a468 <col:18> 'int' 126
|   |   |     | `-CallExpr 0x14602a8d8 <col:25, col:38> 'int'
|   |   |     |   |-ImplicitCastExpr 0x14602a8c0 <col:25> 'int (*)()' <FunctionToPointerDecay>
|   |   |     |   | `-DeclRefExpr 0x14602a600 <col:25> 'int ()' Function 0x14602a548 'isDigit' 'int ()'
|   |   |     |   `-BinaryOperator 0x14602a8a0 <col:33, col:37> 'const char *' '+'
|   |   |     |     |-ImplicitCastExpr 0x14602a888 <col:33> 'const char *' <LValueToRValue>
|   |   |     |     | `-DeclRefExpr 0x14602a620 <col:33> 'const char *' lvalue Var 0x14600e098 's' 'const char *'
|   |   |     |     `-IntegerLiteral 0x14602a640 <col:37> 'int' 2
|   |   |     `-ContinueStmt 0x14602a920 <line:36:4>
|   |   |-BinaryOperator 0x14602aa30 <line:37:3, col:14> 'int' '='
|   |   | |-UnaryOperator 0x14602a9e0 <col:3, col:4> 'int' lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x14602a9c8 <col:4> 'int *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x14602a9a8 <col:4> 'int *' lvalue ParmVar 0x14600de08 'len_ptr' 'int *'
|   |   | `-ImplicitCastExpr 0x14602aa18 <col:14> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x14602a9f8 <col:14> 'int' lvalue Var 0x14600e160 's_len' 'int'
|   |   |-BinaryOperator 0x14602aaa8 <line:38:3, col:9> 'const char *' '='
|   |   | |-DeclRefExpr 0x14602aa50 <col:3> 'const char *' lvalue Var 0x14600e018 'suf' 'const char *'
|   |   | `-ImplicitCastExpr 0x14602aa90 <col:9> 'const char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x14602aa70 <col:9> 'const char *' lvalue Var 0x14600e098 's' 'const char *'
|   |   |-IfStmt 0x14602ab48 <line:39:3, line:40:4>
|   |   | |-BinaryOperator 0x14602ab20 <line:39:7, col:16> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x14602ab08 <col:7> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x14602aac8 <col:7> 'int' lvalue Var 0x14600e160 's_len' 'int'
|   |   | | `-IntegerLiteral 0x14602aae8 <col:16> 'int' 1
|   |   | `-BreakStmt 0x14602ab40 <line:40:4>
|   |   |-ForStmt 0x14602ae38 <line:42:3, line:45:3>
|   |   | |-BinaryOperator 0x14602abd8 <line:42:8, col:18> 'int' ','
|   |   | | |-UnaryOperator 0x14602ab88 <col:8, col:9> 'const char *' postfix '++'
|   |   | | | `-DeclRefExpr 0x14602ab68 <col:8> 'const char *' lvalue Var 0x14600e098 's' 'const char *'
|   |   | | `-UnaryOperator 0x14602abc0 <col:13, col:18> 'int' postfix '--'
|   |   | |   `-DeclRefExpr 0x14602aba0 <col:13> 'int' lvalue Var 0x14600e160 's_len' 'int'
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x14602ac58 <col:22, col:30> 'int' '>'
|   |   | | |-ImplicitCastExpr 0x14602ac40 <col:22> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x14602ac00 <col:22> 'int' lvalue Var 0x14600e160 's_len' 'int'
|   |   | | `-IntegerLiteral 0x14602ac20 <col:30> 'int' 0
|   |   | |-BinaryOperator 0x14602ace8 <col:33, col:43> 'int' ','
|   |   | | |-UnaryOperator 0x14602ac98 <col:33, col:34> 'const char *' postfix '++'
|   |   | | | `-DeclRefExpr 0x14602ac78 <col:33> 'const char *' lvalue Var 0x14600e098 's' 'const char *'
|   |   | | `-UnaryOperator 0x14602acd0 <col:38, col:43> 'int' postfix '--'
|   |   | |   `-DeclRefExpr 0x14602acb0 <col:38> 'int' lvalue Var 0x14600e160 's_len' 'int'
|   |   | `-CompoundStmt 0x14602ae20 <col:47, line:45:3>
|   |   |   `-IfStmt 0x14602ae00 <line:43:4, line:44:12>
|   |   |     |-UnaryOperator 0x14602ada0 <line:43:8, col:18> 'int' prefix '!' cannot overflow
|   |   |     | `-CallExpr 0x14602ad60 <col:9, col:18> 'int'
|   |   |     |   |-ImplicitCastExpr 0x14602ad48 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |   |     |   | `-DeclRefExpr 0x14602ad08 <col:9> 'int ()' Function 0x14602a548 'isDigit' 'int ()'
|   |   |     |   `-ImplicitCastExpr 0x14602ad88 <col:17> 'const char *' <LValueToRValue>
|   |   |     |     `-DeclRefExpr 0x14602ad28 <col:17> 'const char *' lvalue Var 0x14600e098 's' 'const char *'
|   |   |     `-ReturnStmt 0x14602adf0 <line:44:5, col:12>
|   |   |       `-ImplicitCastExpr 0x14602add8 <col:12> 'const char *' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x14602adb8 <col:12> 'const char *' lvalue Var 0x14600e018 'suf' 'const char *'
|   |   `-BinaryOperator 0x14602aec8 <line:47:3, col:7> 'const char *' '='
|   |     |-DeclRefExpr 0x14602ae70 <col:3> 'const char *' lvalue Var 0x14600e098 's' 'const char *'
|   |     `-ImplicitCastExpr 0x14602aeb0 <col:7> 'const char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x14602ae90 <col:7> 'const char *' lvalue Var 0x14600e018 'suf' 'const char *'
|   `-ReturnStmt 0x14602afb8 <line:50:2, col:9>
|     `-ImplicitCastExpr 0x14602afa0 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x14602af80 <col:9> 'const char *' lvalue Var 0x14600e018 'suf' 'const char *'
`-FunctionDecl 0x146028320 <line:28:8> col:8 implicit used strcmp 'int (const char *, const char *)' extern
  |-ParmVarDecl 0x146029c30 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x146029c98 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x1460283c8 <<invalid sloc>> Implicit 887
