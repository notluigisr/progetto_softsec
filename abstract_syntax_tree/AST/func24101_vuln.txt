TranslationUnitDecl 0x147055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1470564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x147055bd0 '__int128'
|-TypedefDecl 0x147056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x147055bf0 'unsigned __int128'
|-TypedefDecl 0x147127030 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x147126e00 'struct __NSConstantString_tag'
|   `-Record 0x147056580 '__NSConstantString_tag'
|-TypedefDecl 0x147127098 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x147055d90 '__SVInt8_t'
|-TypedefDecl 0x147127100 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x147055db0 '__SVInt16_t'
|-TypedefDecl 0x147127168 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x147055dd0 '__SVInt32_t'
|-TypedefDecl 0x1471271d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x147055df0 '__SVInt64_t'
|-TypedefDecl 0x147127238 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x147055e10 '__SVUint8_t'
|-TypedefDecl 0x1471272a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x147055e30 '__SVUint16_t'
|-TypedefDecl 0x147127308 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x147055e50 '__SVUint32_t'
|-TypedefDecl 0x147127370 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x147055e70 '__SVUint64_t'
|-TypedefDecl 0x1471273d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x147055e90 '__SVFloat16_t'
|-TypedefDecl 0x147127440 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x147055eb0 '__SVFloat32_t'
|-TypedefDecl 0x1471274a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x147055ed0 '__SVFloat64_t'
|-TypedefDecl 0x147127510 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x147055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x147127578 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x147055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1471275e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x147055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x147127648 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x147055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1471276b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x147055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x147127718 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x147055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x147127780 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x147055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1471277e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x147055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x147127850 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x147055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x1471278b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x147056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x147127920 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x147056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x147127988 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x147056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x1471279f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x147056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x147127a58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x147056090 '__clang_svint8x3_t'
|-TypedefDecl 0x147127ac0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1470560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x147127b28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1470560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x147127b90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1470560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x147127bf8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x147056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x147127c60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x147056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x147127cc8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x147056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x147127d30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x147056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x147127d98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x147056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x147128600 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1470561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x147128668 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1470561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1471286d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1470561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x147128738 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x147056210 '__clang_svint8x4_t'
|-TypedefDecl 0x1471287a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x147056230 '__clang_svint16x4_t'
|-TypedefDecl 0x147128808 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x147056250 '__clang_svint32x4_t'
|-TypedefDecl 0x147128870 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x147056270 '__clang_svint64x4_t'
|-TypedefDecl 0x1471288d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x147056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x147128940 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1470562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x1471289a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1470562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x147128a10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1470562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x147128a78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x147056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x147128ae0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x147056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x147128b48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x147056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x147128bb0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x147056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x147128c18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x147056390 '__SVBool_t'
|-TypedefDecl 0x147128c80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1470563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x147128ce8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1470563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x147128d50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1470563f0 '__SVCount_t'
|-TypedefDecl 0x147128df8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x147128db0 'char *'
|   `-BuiltinType 0x1470556b0 'char'
|-TypedefDecl 0x147128e68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x147128db0 'char *'
|   `-BuiltinType 0x1470556b0 'char'
|-FunctionDecl 0x147129068 <dataset_diviso_filec/func24101_vuln.c:1:1, line:119:1> line:1:5 main 'int (int, char **)'
| |-ParmVarDecl 0x147128ed8 <col:10, col:14> col:14 used argc 'int'
| |-ParmVarDecl 0x147128f88 <col:20, col:27> col:27 used argv 'char **'
| `-CompoundStmt 0x147146838 <line:2:1, line:119:1>
|   |-DeclStmt 0x1471291e8 <line:3:3, col:12>
|   | `-VarDecl 0x147129180 <col:3, col:7> col:7 used error 'int'
|   |-DeclStmt 0x147129298 <line:5:3, col:13>
|   | `-VarDecl 0x147129230 <col:3, col:9> col:9 used wild 'char *'
|   |-CallExpr 0x1471294a8 <line:7:3, col:18> 'int'
|   | |-ImplicitCastExpr 0x147129490 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1471293c0 <col:3> 'int ()' Function 0x147129308 'MY_INIT' 'int ()'
|   | `-ImplicitCastExpr 0x1471294d0 <col:11, col:17> 'char *' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x147129438 <col:11, col:17> 'char *' lvalue
|   |     |-ImplicitCastExpr 0x147129420 <col:11> 'char **' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1471293e0 <col:11> 'char **' lvalue ParmVar 0x147128f88 'argv' 'char **'
|   |     `-IntegerLiteral 0x147129400 <col:16> 'int' 0
|   |-IfStmt 0x147142ec0 <line:10:3, line:11:11>
|   | |-CallExpr 0x1471427d0 <line:10:7, col:58> 'int'
|   | | |-ImplicitCastExpr 0x1471427b8 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x1471295e0 <col:7> 'int ()' Function 0x147129528 'load_defaults' 'int ()'
|   | | |-ImplicitCastExpr 0x147142810 <col:21> 'char *' <ArrayToPointerDecay>
|   | | | `-StringLiteral 0x147142640 <col:21> 'char[4]' lvalue "STR"
|   | | |-ImplicitCastExpr 0x147142828 <col:27> 'int (*)()' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x147142798 <col:27> 'int ()' Function 0x147129528 'load_defaults' 'int ()'
|   | | |-UnaryOperator 0x1471426d0 <col:47, col:48> 'int *' prefix '&' cannot overflow
|   | | | `-DeclRefExpr 0x147142678 <col:48> 'int' lvalue ParmVar 0x147128ed8 'argc' 'int'
|   | | `-UnaryOperator 0x147142740 <col:53, col:54> 'char ***' prefix '&' cannot overflow
|   | |   `-DeclRefExpr 0x1471426e8 <col:54> 'char **' lvalue ParmVar 0x147128f88 'argv' 'char **'
|   | `-CallExpr 0x147142e98 <line:11:5, col:11> 'void'
|   |   |-ImplicitCastExpr 0x147142e80 <col:5> 'void (*)(int) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x147142e10 <col:5> 'void (int) __attribute__((noreturn))' Function 0x147142ca0 'exit' 'void (int) __attribute__((noreturn))'
|   |   `-IntegerLiteral 0x147142e30 <col:10> 'int' 1
|   |-CallExpr 0x147143080 <line:14:3, col:26> 'int'
|   | |-ImplicitCastExpr 0x147143068 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x147142fd8 <col:3> 'int ()' Function 0x147142f20 'get_options' 'int ()'
|   | |-UnaryOperator 0x147143018 <col:15, col:16> 'int *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x147142ff8 <col:16> 'int' lvalue ParmVar 0x147128ed8 'argc' 'int'
|   | `-UnaryOperator 0x147143050 <col:21, col:22> 'char ***' prefix '&' cannot overflow
|   |   `-DeclRefExpr 0x147143030 <col:22> 'char **' lvalue ParmVar 0x147128f88 'argv' 'char **'
|   |-BinaryOperator 0x147143108 <line:16:3, col:8> 'char *' '='
|   | |-DeclRefExpr 0x1471430b0 <col:3> 'char *' lvalue Var 0x147129230 'wild' 'char *'
|   | `-ImplicitCastExpr 0x1471430f0 <col:8> 'char *' <NullToPointer>
|   |   `-IntegerLiteral 0x1471430d0 <col:8> 'int' 0
|   |-IfStmt 0x147144400 <line:17:3, line:42:3>
|   | |-ImplicitCastExpr 0x147143148 <line:17:7> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x147143128 <col:7> 'int' lvalue ParmVar 0x147128ed8 'argc' 'int'
|   | `-CompoundStmt 0x1471443d8 <line:18:3, line:42:3>
|   |   |-DeclStmt 0x147143360 <line:19:5, col:33>
|   |   | |-VarDecl 0x147143178 <col:5, col:27> col:11 used pos 'char *' cinit
|   |   | | `-ImplicitCastExpr 0x1471432b0 <col:16, col:27> 'char *' <LValueToRValue>
|   |   | |   `-ArraySubscriptExpr 0x147143290 <col:16, col:27> 'char *' lvalue
|   |   | |     |-ImplicitCastExpr 0x147143278 <col:16> 'char **' <LValueToRValue>
|   |   | |     | `-DeclRefExpr 0x1471431e0 <col:16> 'char **' lvalue ParmVar 0x147128f88 'argv' 'char **'
|   |   | |     `-BinaryOperator 0x147143258 <col:21, col:26> 'int' '-'
|   |   | |       |-ImplicitCastExpr 0x147143240 <col:21> 'int' <LValueToRValue>
|   |   | |       | `-DeclRefExpr 0x147143200 <col:21> 'int' lvalue ParmVar 0x147128ed8 'argc' 'int'
|   |   | |       `-IntegerLiteral 0x147143220 <col:26> 'int' 1
|   |   | `-VarDecl 0x1471432e0 <col:5, col:31> col:31 used to 'char *'
|   |   |-ForStmt 0x1471442c8 <line:20:5, line:40:5>
|   |   | |-BinaryOperator 0x1471433d0 <line:20:10, col:14> 'char *' '='
|   |   | | |-DeclRefExpr 0x147143378 <col:10> 'char *' lvalue Var 0x1471432e0 'to' 'char *'
|   |   | | `-ImplicitCastExpr 0x1471433b8 <col:14> 'char *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x147143398 <col:14> 'char *' lvalue Var 0x147143178 'pos' 'char *'
|   |   | |-<<<NULL>>>
|   |   | |-ImplicitCastExpr 0x147143440 <col:20, col:21> 'char' <LValueToRValue>
|   |   | | `-UnaryOperator 0x147143428 <col:20, col:21> 'char' lvalue prefix '*' cannot overflow
|   |   | |   `-ImplicitCastExpr 0x147143410 <col:21> 'char *' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x1471433f0 <col:21> 'char *' lvalue Var 0x147143178 'pos' 'char *'
|   |   | |-BinaryOperator 0x1471434c8 <col:27, col:36> 'char *' ','
|   |   | | |-UnaryOperator 0x147143478 <col:27, col:30> 'char *' postfix '++'
|   |   | | | `-DeclRefExpr 0x147143458 <col:27> 'char *' lvalue Var 0x147143178 'pos' 'char *'
|   |   | | `-UnaryOperator 0x1471434b0 <col:34, col:36> 'char *' postfix '++'
|   |   | |   `-DeclRefExpr 0x147143490 <col:34> 'char *' lvalue Var 0x1471432e0 'to' 'char *'
|   |   | `-CompoundStmt 0x1471442a8 <line:21:5, line:40:5>
|   |   |   |-SwitchStmt 0x147143568 <line:22:7, line:38:7>
|   |   |   | |-ImplicitCastExpr 0x147143550 <line:22:15, col:16> 'int' <IntegralCast>
|   |   |   | | `-ImplicitCastExpr 0x147143538 <col:15, col:16> 'char' <LValueToRValue>
|   |   |   | |   `-UnaryOperator 0x147143520 <col:15, col:16> 'char' lvalue prefix '*' cannot overflow
|   |   |   | |     `-ImplicitCastExpr 0x147143508 <col:16> 'char *' <LValueToRValue>
|   |   |   | |       `-DeclRefExpr 0x1471434e8 <col:16> 'char *' lvalue Var 0x147143178 'pos' 'char *'
|   |   |   | `-CompoundStmt 0x147144180 <col:21, line:38:7>
|   |   |   |   |-CaseStmt 0x1471435c0 <line:23:7, line:24:8>
|   |   |   |   | |-ConstantExpr 0x1471435a8 <line:23:12> 'int'
|   |   |   |   | | `-CharacterLiteral 0x147143590 <col:12> 'int' 42
|   |   |   |   | `-BinaryOperator 0x147143e80 <line:24:2, col:8> 'char' '='
|   |   |   |   |   |-UnaryOperator 0x147143e38 <col:2, col:3> 'char' lvalue prefix '*' cannot overflow
|   |   |   |   |   | `-ImplicitCastExpr 0x147143e20 <col:3> 'char *' <LValueToRValue>
|   |   |   |   |   |   `-DeclRefExpr 0x147143e00 <col:3> 'char *' lvalue Var 0x147143178 'pos' 'char *'
|   |   |   |   |   `-ImplicitCastExpr 0x147143e68 <col:8> 'char' <IntegralCast>
|   |   |   |   |     `-CharacterLiteral 0x147143e50 <col:8> 'int' 37
|   |   |   |   |-BreakStmt 0x147143ec0 <line:26:2>
|   |   |   |   |-CaseStmt 0x147143ef8 <line:27:7, line:28:8>
|   |   |   |   | |-ConstantExpr 0x147143ee0 <line:27:12> 'int'
|   |   |   |   | | `-CharacterLiteral 0x147143ec8 <col:12> 'int' 63
|   |   |   |   | `-BinaryOperator 0x147143fa0 <line:28:2, col:8> 'char' '='
|   |   |   |   |   |-UnaryOperator 0x147143f58 <col:2, col:3> 'char' lvalue prefix '*' cannot overflow
|   |   |   |   |   | `-ImplicitCastExpr 0x147143f40 <col:3> 'char *' <LValueToRValue>
|   |   |   |   |   |   `-DeclRefExpr 0x147143f20 <col:3> 'char *' lvalue Var 0x147143178 'pos' 'char *'
|   |   |   |   |   `-ImplicitCastExpr 0x147143f88 <col:8> 'char' <IntegralCast>
|   |   |   |   |     `-CharacterLiteral 0x147143f70 <col:8> 'int' 95
|   |   |   |   |-BreakStmt 0x147143fe0 <line:30:2>
|   |   |   |   |-CaseStmt 0x147144018 <line:31:7, <invalid sloc>>
|   |   |   |   | |-ConstantExpr 0x147144000 <col:12> 'int'
|   |   |   |   | | `-CharacterLiteral 0x147143fe8 <col:12> 'int' 37
|   |   |   |   | `-CaseStmt 0x147144070 <line:32:7, <invalid sloc>>
|   |   |   |   |   |-ConstantExpr 0x147144058 <col:12> 'int'
|   |   |   |   |   | `-CharacterLiteral 0x147144040 <col:12> 'int' 95
|   |   |   |   |   `-NullStmt 0x1471440b8 <<invalid sloc>>
|   |   |   |   |-BreakStmt 0x1471440c0 <line:34:2>
|   |   |   |   |-CaseStmt 0x1471440f8 <line:35:7, line:36:5>
|   |   |   |   | |-ConstantExpr 0x1471440e0 <line:35:12> 'int'
|   |   |   |   | | `-CharacterLiteral 0x1471440c8 <col:12> 'int' 92
|   |   |   |   | `-UnaryOperator 0x147144140 <line:36:2, col:5> 'char *' postfix '++'
|   |   |   |   |   `-DeclRefExpr 0x147144120 <col:2> 'char *' lvalue Var 0x147143178 'pos' 'char *'
|   |   |   |   `-DefaultStmt 0x147144160 <line:37:7, col:16>
|   |   |   |     `-BreakStmt 0x147144158 <col:16>
|   |   |   `-BinaryOperator 0x147144288 <line:39:7, col:13> 'char' '='
|   |   |     |-UnaryOperator 0x147144208 <col:7, col:8> 'char' lvalue prefix '*' cannot overflow
|   |   |     | `-ImplicitCastExpr 0x1471441f0 <col:8> 'char *' <LValueToRValue>
|   |   |     |   `-DeclRefExpr 0x1471441d0 <col:8> 'char *' lvalue Var 0x1471432e0 'to' 'char *'
|   |   |     `-ImplicitCastExpr 0x147144270 <col:12, col:13> 'char' <LValueToRValue>
|   |   |       `-UnaryOperator 0x147144258 <col:12, col:13> 'char' lvalue prefix '*' cannot overflow
|   |   |         `-ImplicitCastExpr 0x147144240 <col:13> 'char *' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x147144220 <col:13> 'char *' lvalue Var 0x147143178 'pos' 'char *'
|   |   `-BinaryOperator 0x1471443b8 <line:41:5, col:11> 'char' '='
|   |     |-UnaryOperator 0x147144338 <col:5, col:6> 'char' lvalue prefix '*' cannot overflow
|   |     | `-ImplicitCastExpr 0x147144320 <col:6> 'char *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x147144300 <col:6> 'char *' lvalue Var 0x1471432e0 'to' 'char *'
|   |     `-ImplicitCastExpr 0x1471443a0 <col:10, col:11> 'char' <LValueToRValue>
|   |       `-UnaryOperator 0x147144388 <col:10, col:11> 'char' lvalue prefix '*' cannot overflow
|   |         `-ImplicitCastExpr 0x147144370 <col:11> 'char *' <LValueToRValue>
|   |           `-DeclRefExpr 0x147144350 <col:11> 'char *' lvalue Var 0x147143178 'pos' 'char *'
|   |-IfStmt 0x1471446c0 <line:43:3, line:46:22> has_else
|   | |-RecoveryExpr 0x147144438 <line:43:7> '<dependent type>' contains-errors lvalue
|   | |-BinaryOperator 0x147144520 <line:44:5, col:22> 'char *' '='
|   | | |-DeclRefExpr 0x147144458 <col:5> 'char *' lvalue Var 0x147129230 'wild' 'char *'
|   | | `-ImplicitCastExpr 0x147144508 <col:11, col:22> 'char *' <LValueToRValue>
|   | |   `-ArraySubscriptExpr 0x1471444e8 <col:11, col:22> 'char *' lvalue
|   | |     |-ImplicitCastExpr 0x1471444d0 <col:11> 'char **' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x147144478 <col:11> 'char **' lvalue ParmVar 0x147128f88 'argv' 'char **'
|   | |     `-UnaryOperator 0x1471444b8 <col:16, col:18> 'int' prefix '--'
|   | |       `-DeclRefExpr 0x147144498 <col:18> 'int' lvalue ParmVar 0x147128ed8 'argc' 'int'
|   | `-IfStmt 0x1471446a0 <line:45:8, line:46:22>
|   |   |-BinaryOperator 0x147144598 <line:45:12, col:20> 'int' '=='
|   |   | |-ImplicitCastExpr 0x147144580 <col:12> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x147144540 <col:12> 'int' lvalue ParmVar 0x147128ed8 'argc' 'int'
|   |   | `-IntegerLiteral 0x147144560 <col:20> 'int' 3
|   |   `-BinaryOperator 0x147144680 <line:46:5, col:22> 'char *' '='
|   |     |-DeclRefExpr 0x1471445b8 <col:5> 'char *' lvalue Var 0x147129230 'wild' 'char *'
|   |     `-ImplicitCastExpr 0x147144668 <col:11, col:22> 'char *' <LValueToRValue>
|   |       `-ArraySubscriptExpr 0x147144648 <col:11, col:22> 'char *' lvalue
|   |         |-ImplicitCastExpr 0x147144630 <col:11> 'char **' <LValueToRValue>
|   |         | `-DeclRefExpr 0x1471445d8 <col:11> 'char **' lvalue ParmVar 0x147128f88 'argv' 'char **'
|   |         `-UnaryOperator 0x147144618 <col:16, col:18> 'int' prefix '--'
|   |           `-DeclRefExpr 0x1471445f8 <col:18> 'int' lvalue ParmVar 0x147128ed8 'argc' 'int'
|   |-IfStmt 0x147144a08 <line:48:3, line:52:3>
|   | |-BinaryOperator 0x147144748 <line:48:7, col:14> 'int' '>'
|   | | |-ImplicitCastExpr 0x147144730 <col:7> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1471446f0 <col:7> 'int' lvalue ParmVar 0x147128ed8 'argc' 'int'
|   | | `-IntegerLiteral 0x147144710 <col:14> 'int' 2
|   | `-CompoundStmt 0x1471449e8 <line:49:3, line:52:3>
|   |   |-CallExpr 0x147144930 <line:50:5, col:37> '<dependent type>' contains-errors
|   |   | |-DeclRefExpr 0x147144848 <col:5> 'int ()' Function 0x147144790 'fprintf' 'int ()'
|   |   | |-RecoveryExpr 0x1471448f0 <col:13> '<dependent type>' contains-errors lvalue
|   |   | |-StringLiteral 0x147144880 <col:20> 'char[4]' lvalue "STR"
|   |   | `-RecoveryExpr 0x147144910 <col:26> '<dependent type>' contains-errors lvalue
|   |   `-CallExpr 0x1471449c0 <line:51:5, col:11> 'void'
|   |     |-ImplicitCastExpr 0x1471449a8 <col:5> 'void (*)(int) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x147144968 <col:5> 'void (int) __attribute__((noreturn))' Function 0x147142ca0 'exit' 'void (int) __attribute__((noreturn))'
|   |     `-IntegerLiteral 0x147144988 <col:10> 'int' 1
|   |-CallExpr 0x147144bb8 <line:53:3, col:20> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x147144b08 <col:3> 'int ()' Function 0x147144a50 'mysql_init' 'int ()'
|   | `-UnaryOperator 0x147144ba0 <col:14, col:15> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   `-RecoveryExpr 0x147144b80 <col:15> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x147145968 <line:86:3, line:93:3>
|   | |-RecoveryExpr 0x147145770 <line:86:7, line:89:9> '_Bool' contains-errors
|   | `-CompoundStmt 0x147145950 <line:90:3, line:93:3>
|   |   `-CallExpr 0x147145928 <line:92:5, col:11> 'void'
|   |     |-ImplicitCastExpr 0x147145910 <col:5> 'void (*)(int) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1471458d0 <col:5> 'void (int) __attribute__((noreturn))' Function 0x147142ca0 'exit' 'void (int) __attribute__((noreturn))'
|   |     `-IntegerLiteral 0x1471458f0 <col:10> 'int' 1
|   |-SwitchStmt 0x1471459e0 <line:96:3, line:110:3>
|   | |-ImplicitCastExpr 0x1471459c8 <line:96:11> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x1471459a8 <col:11> 'int' lvalue ParmVar 0x147128ed8 'argc' 'int'
|   | `-CompoundStmt 0x1471463b8 <col:17, line:110:3>
|   |   |-CaseStmt 0x147145a40 <line:97:3, <invalid sloc>>
|   |   | |-ConstantExpr 0x147145a28 <col:8> 'int'
|   |   | | `-IntegerLiteral 0x147145a08 <col:8> 'int' 0
|   |   | `-NullStmt 0x147145ba8 <<invalid sloc>>
|   |   |-BreakStmt 0x147145bb0 <col:41>
|   |   |-CaseStmt 0x147145bf0 <line:98:3, <invalid sloc>>
|   |   | |-ConstantExpr 0x147145bd8 <col:8> 'int'
|   |   | | `-IntegerLiteral 0x147145bb8 <col:8> 'int' 1
|   |   | `-NullStmt 0x147145fa8 <<invalid sloc>>
|   |   |-BreakStmt 0x147145fb0 <line:103:5>
|   |   |-DefaultStmt 0x147146390 <line:104:3, col:10>
|   |   | `-NullStmt 0x147146388 <col:10>
|   |   `-BreakStmt 0x1471463b0 <line:109:5>
|   |-CallExpr 0x1471467e0 <line:117:3, col:21> 'void'
|   | |-ImplicitCastExpr 0x1471467c8 <col:3> 'void (*)(int) __attribute__((noreturn))' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x147146700 <col:3> 'void (int) __attribute__((noreturn))' Function 0x147142ca0 'exit' 'void (int) __attribute__((noreturn))'
|   | `-ConditionalOperator 0x147146798 <col:8, col:20> 'int'
|   |   |-ImplicitCastExpr 0x147146780 <col:8> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x147146720 <col:8> 'int' lvalue Var 0x147129180 'error' 'int'
|   |   |-IntegerLiteral 0x147146740 <col:16> 'int' 1
|   |   `-IntegerLiteral 0x147146760 <col:20> 'int' 0
|   `-ReturnStmt 0x147146828 <line:118:3, col:10>
|     `-IntegerLiteral 0x147146808 <col:10> 'int' 0
`-FunctionDecl 0x147142ca0 <line:11:5> col:5 implicit used exit 'void (int) __attribute__((noreturn))' extern
  |-ParmVarDecl 0x147142da0 <<invalid sloc>> <invalid sloc> 'int'
  `-BuiltinAttr 0x147142d48 <<invalid sloc>> Implicit 869
