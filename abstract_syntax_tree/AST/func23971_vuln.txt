TranslationUnitDecl 0x127855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1278564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x127855bd0 '__int128'
|-TypedefDecl 0x127856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x127855bf0 'unsigned __int128'
|-TypedefDecl 0x13000be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13000bc00 'struct __NSConstantString_tag'
|   `-Record 0x127856580 '__NSConstantString_tag'
|-TypedefDecl 0x13000be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x127855d90 '__SVInt8_t'
|-TypedefDecl 0x13000bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x127855db0 '__SVInt16_t'
|-TypedefDecl 0x13000bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x127855dd0 '__SVInt32_t'
|-TypedefDecl 0x13000bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x127855df0 '__SVInt64_t'
|-TypedefDecl 0x13000c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x127855e10 '__SVUint8_t'
|-TypedefDecl 0x13000c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x127855e30 '__SVUint16_t'
|-TypedefDecl 0x13000c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x127855e50 '__SVUint32_t'
|-TypedefDecl 0x13000c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x127855e70 '__SVUint64_t'
|-TypedefDecl 0x13000c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x127855e90 '__SVFloat16_t'
|-TypedefDecl 0x13000c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x127855eb0 '__SVFloat32_t'
|-TypedefDecl 0x13000c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x127855ed0 '__SVFloat64_t'
|-TypedefDecl 0x13000c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x127855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13000c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x127855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13000c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x127855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13000c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x127855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13000c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x127855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13000c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x127855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13000c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x127855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13000c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x127855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13000c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x127855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13000c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x127856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13000c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x127856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13000c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x127856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13000c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x127856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13000c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x127856090 '__clang_svint8x3_t'
|-TypedefDecl 0x13000c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1278560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13000c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1278560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13000c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1278560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13000c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x127856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13000ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x127856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13000cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x127856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13000cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x127856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13000cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x127856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13000d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1278561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13000d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1278561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13000d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1278561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13000d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x127856210 '__clang_svint8x4_t'
|-TypedefDecl 0x13000d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x127856230 '__clang_svint16x4_t'
|-TypedefDecl 0x13000d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x127856250 '__clang_svint32x4_t'
|-TypedefDecl 0x13000d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x127856270 '__clang_svint64x4_t'
|-TypedefDecl 0x13000d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x127856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13000d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1278562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13000d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1278562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13000d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1278562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13000d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x127856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13000d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x127856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13000d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x127856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13000d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x127856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13000da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x127856390 '__SVBool_t'
|-TypedefDecl 0x13000da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1278563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13000dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1278563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13000db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1278563f0 '__SVCount_t'
|-TypedefDecl 0x13000dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13000dbb0 'char *'
|   `-BuiltinType 0x1278556b0 'char'
|-TypedefDecl 0x13000dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13000dbb0 'char *'
|   `-BuiltinType 0x1278556b0 'char'
|-FunctionDecl 0x13000e000 <dataset_diviso_filec/func23971_vuln.c:1:1, line:49:1> line:1:6 invalid ftoa_bounded_extra 'void (int, char *, int, int, int)'
| |-ParmVarDecl 0x13000dcf0 <col:25, col:36> col:36 referenced invalid val 'int'
| |-ParmVarDecl 0x13000dd70 <col:40, col:46> col:46 used str 'char *'
| |-ParmVarDecl 0x13000ddf0 <col:51, col:58> col:58 invalid len 'int'
| |-ParmVarDecl 0x13000de70 <col:63, col:67> col:67 used radix 'int'
| |-ParmVarDecl 0x13000def0 <col:74, col:78> col:78 used fractionalDigits 'int'
| `-CompoundStmt 0x13002a4f8 <col:96, line:49:1>
|   |-DeclStmt 0x13000e170 <line:2:3, col:43>
|   | `-VarDecl 0x13000e0e8 <col:3, col:20> col:20 invalid stopAtError 'const int'
|   `-IfStmt 0x13002a4c8 <line:3:3, line:48:3> has_else
|     |-CallExpr 0x13000e320 <line:3:7, col:16> '<dependent type>' contains-errors
|     | |-DeclRefExpr 0x13000e2e0 <col:7> 'int ()' Function 0x13000e228 'isnan' 'int ()'
|     | `-RecoveryExpr 0x13000e300 <col:13> '<dependent type>' contains-errors lvalue
|     |-CallExpr 0x130027b18 <col:19, col:40> '<dependent type>' contains-errors
|     | |-DeclRefExpr 0x130027a10 <col:19> 'char *(char *, const char *, unsigned long)' Function 0x1300277c0 'strncpy' 'char *(char *, const char *, unsigned long)'
|     | |-DeclRefExpr 0x130027a30 <col:27> 'char *' lvalue ParmVar 0x13000dd70 'str' 'char *'
|     | |-StringLiteral 0x130027a90 <col:31> 'char[4]' lvalue "STR"
|     | `-RecoveryExpr 0x130027ab0 <col:37> '<dependent type>' contains-errors lvalue
|     `-IfStmt 0x13002a498 <line:4:8, line:48:3> has_else
|       |-UnaryOperator 0x130027c98 <line:4:12, col:25> '<dependent type>' contains-errors prefix '!' cannot overflow
|       | `-CallExpr 0x130027c70 <col:13, col:25> '<dependent type>' contains-errors
|       |   |-DeclRefExpr 0x130027c30 <col:13> 'int ()' Function 0x130027b78 'isfinite' 'int ()'
|       |   `-RecoveryExpr 0x130027c50 <col:22> '<dependent type>' contains-errors lvalue
|       |-CompoundStmt 0x130027f40 <col:28, line:7:3>
|       | `-IfStmt 0x130027f10 <line:5:5, line:6:31> has_else
|       |   |-BinaryOperator 0x130027cf0 <line:5:9, col:13> 'int' contains-errors '<'
|       |   | |-RecoveryExpr 0x130027cb0 <col:9> '<dependent type>' contains-errors lvalue
|       |   | `-IntegerLiteral 0x130027cd0 <col:13> 'int' 0
|       |   |-CallExpr 0x130027dd8 <col:16, col:37> '<dependent type>' contains-errors
|       |   | |-DeclRefExpr 0x130027d10 <col:16> 'char *(char *, const char *, unsigned long)' Function 0x1300277c0 'strncpy' 'char *(char *, const char *, unsigned long)'
|       |   | |-DeclRefExpr 0x130027d30 <col:24> 'char *' lvalue ParmVar 0x13000dd70 'str' 'char *'
|       |   | |-StringLiteral 0x130027d50 <col:28> 'char[4]' lvalue "STR"
|       |   | `-RecoveryExpr 0x130027d70 <col:34> '<dependent type>' contains-errors lvalue
|       |   `-CallExpr 0x130027ed8 <line:6:10, col:31> '<dependent type>' contains-errors
|       |     |-DeclRefExpr 0x130027e10 <col:10> 'char *(char *, const char *, unsigned long)' Function 0x1300277c0 'strncpy' 'char *(char *, const char *, unsigned long)'
|       |     |-DeclRefExpr 0x130027e30 <col:18> 'char *' lvalue ParmVar 0x13000dd70 'str' 'char *'
|       |     |-StringLiteral 0x130027e50 <col:22> 'char[4]' lvalue "STR"
|       |     `-RecoveryExpr 0x130027e70 <col:28> '<dependent type>' contains-errors lvalue
|       `-CompoundStmt 0x13002a468 <line:7:10, line:48:3>
|         |-IfStmt 0x1300282c8 <line:8:5, line:12:5>
|         | |-BinaryOperator 0x130027f98 <line:8:9, col:13> 'int' contains-errors '<'
|         | | |-RecoveryExpr 0x130027f58 <col:9> '<dependent type>' contains-errors lvalue
|         | | `-IntegerLiteral 0x130027f78 <col:13> 'int' 0
|         | `-CompoundStmt 0x1300282a0 <col:16, line:12:5>
|         |   |-IfStmt 0x130028108 <line:9:7, col:41>
|         |   | |-BinaryOperator 0x130028010 <col:11, col:20> 'int' contains-errors '<='
|         |   | | |-UnaryOperator 0x130027fd8 <col:11, col:13> '<dependent type>' contains-errors prefix '--' cannot overflow
|         |   | | | `-RecoveryExpr 0x130027fb8 <col:13> '<dependent type>' contains-errors lvalue
|         |   | | `-IntegerLiteral 0x130027ff0 <col:20> 'int' 0
|         |   | `-CompoundStmt 0x1300280e8 <col:23, col:41>
|         |   |   |-BinaryOperator 0x1300280b8 <col:25, col:30> 'char' '='
|         |   |   | |-UnaryOperator 0x130028068 <col:25, col:26> 'char' lvalue prefix '*' cannot overflow
|         |   |   | | `-ImplicitCastExpr 0x130028050 <col:26> 'char *' <LValueToRValue>
|         |   |   | |   `-DeclRefExpr 0x130028030 <col:26> 'char *' lvalue ParmVar 0x13000dd70 'str' 'char *'
|         |   |   | `-ImplicitCastExpr 0x1300280a0 <col:30> 'char' <IntegralCast>
|         |   |   |   `-IntegerLiteral 0x130028080 <col:30> 'int' 0
|         |   |   `-ReturnStmt 0x1300280d8 <col:33>
|         |   |-BinaryOperator 0x1300281c8 <line:10:7, col:18> 'char' '='
|         |   | |-UnaryOperator 0x130028180 <col:7, col:14> 'char' lvalue prefix '*' cannot overflow
|         |   | | `-ParenExpr 0x130028160 <col:8, col:14> 'char *'
|         |   | |   `-UnaryOperator 0x130028148 <col:9, col:12> 'char *' postfix '++'
|         |   | |     `-DeclRefExpr 0x130028128 <col:9> 'char *' lvalue ParmVar 0x13000dd70 'str' 'char *'
|         |   | `-ImplicitCastExpr 0x1300281b0 <col:18> 'char' <IntegralCast>
|         |   |   `-CharacterLiteral 0x130028198 <col:18> 'int' 45
|         |   `-BinaryOperator 0x130028280 <line:11:7, col:14> '<dependent type>' contains-errors '='
|         |     |-RecoveryExpr 0x130028208 <col:7> '<dependent type>' contains-errors lvalue
|         |     | `-DeclRefExpr 0x1300281e8 <col:7> 'int' lvalue ParmVar 0x13000dcf0 'val' 'int'
|         |     `-UnaryOperator 0x130028268 <col:13, col:14> '<dependent type>' contains-errors prefix '-' cannot overflow
|         |       `-ImplicitCastExpr 0x130028250 <col:14> '<dependent type>' contains-errors <LValueToRValue>
|         |         `-RecoveryExpr 0x130028230 <col:14> '<dependent type>' contains-errors lvalue
|         |-WhileStmt 0x131009080 <line:20:5, line:26:5>
|         | |-BinaryOperator 0x1310089e0 <line:20:12, col:17> 'int' contains-errors '>='
|         | | |-RecoveryExpr 0x1310089c0 <col:12> '<dependent type>' contains-errors lvalue
|         | | `-IntegerLiteral 0x131008980 <col:17> 'int' 1
|         | `-CompoundStmt 0x131009050 <col:20, line:26:5>
|         |   |-DeclStmt 0x131008b10 <line:21:7, col:29>
|         |   | `-VarDecl 0x131008a18 <col:7, col:11> col:11 used v 'int'
|         |   |-CompoundAssignOperator 0x131008c38 <line:22:7, col:16> '<dependent type>' contains-errors '-=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|         |   | |-RecoveryExpr 0x131008b48 <col:7> '<dependent type>' contains-errors lvalue
|         |   | | `-DeclRefExpr 0x131008b28 <col:7> 'int' lvalue ParmVar 0x13000dcf0 'val' 'int'
|         |   | `-BinaryOperator 0x131008c18 <col:14, col:16> '<dependent type>' contains-errors '*'
|         |   |   |-DeclRefExpr 0x131008b70 <col:14> 'int' lvalue Var 0x131008a18 'v' 'int'
|         |   |   `-RecoveryExpr 0x131008bf8 <col:16> '<dependent type>' contains-errors lvalue
|         |   |-IfStmt 0x131008db8 <line:23:7, col:41>
|         |   | |-BinaryOperator 0x131008cc0 <col:11, col:20> 'int' contains-errors '<='
|         |   | | |-UnaryOperator 0x131008c88 <col:11, col:13> '<dependent type>' contains-errors prefix '--' cannot overflow
|         |   | | | `-RecoveryExpr 0x131008c68 <col:13> '<dependent type>' contains-errors lvalue
|         |   | | `-IntegerLiteral 0x131008ca0 <col:20> 'int' 0
|         |   | `-CompoundStmt 0x131008d98 <col:23, col:41>
|         |   |   |-BinaryOperator 0x131008d68 <col:25, col:30> 'char' '='
|         |   |   | |-UnaryOperator 0x131008d18 <col:25, col:26> 'char' lvalue prefix '*' cannot overflow
|         |   |   | | `-ImplicitCastExpr 0x131008d00 <col:26> 'char *' <LValueToRValue>
|         |   |   | |   `-DeclRefExpr 0x131008ce0 <col:26> 'char *' lvalue ParmVar 0x13000dd70 'str' 'char *'
|         |   |   | `-ImplicitCastExpr 0x131008d50 <col:30> 'char' <IntegralCast>
|         |   |   |   `-IntegerLiteral 0x131008d30 <col:30> 'int' 0
|         |   |   `-ReturnStmt 0x131008d88 <col:33>
|         |   `-BinaryOperator 0x131009010 <line:24:7, col:25> 'char' '='
|         |     |-UnaryOperator 0x131008e30 <col:7, col:14> 'char' lvalue prefix '*' cannot overflow
|         |     | `-ParenExpr 0x131008e10 <col:8, col:14> 'char *'
|         |     |   `-UnaryOperator 0x131008df8 <col:9, col:12> 'char *' postfix '++'
|         |     |     `-DeclRefExpr 0x131008dd8 <col:9> 'char *' lvalue ParmVar 0x13000dd70 'str' 'char *'
|         |     `-ImplicitCastExpr 0x131008ff8 <col:18, col:25> 'char' <IntegralCast>
|         |       `-CallExpr 0x131008fb8 <col:18, col:25> 'int'
|         |         |-ImplicitCastExpr 0x131008fa0 <col:18> 'int (*)()' <FunctionToPointerDecay>
|         |         | `-DeclRefExpr 0x131008f28 <col:18> 'int ()' Function 0x131008e70 'itoch' 'int ()'
|         |         `-ImplicitCastExpr 0x131008fe0 <col:24> 'int' <LValueToRValue>
|         |           `-DeclRefExpr 0x131008f48 <col:24> 'int' lvalue Var 0x131008a18 'v' 'int'
|         |-IfStmt 0x13002a380 <line:28:5, line:44:5>
|         | |-BinaryOperator 0x131009250 <line:28:9, col:61> 'int' contains-errors '||'
|         | | |-ParenExpr 0x1310091b8 <col:9, col:39> 'int' contains-errors
|         | | | `-BinaryOperator 0x131009198 <col:10, col:38> 'int' contains-errors '&&'
|         | | |   |-ParenExpr 0x131009118 <col:10, col:29> 'int'
|         | | |   | `-BinaryOperator 0x1310090f8 <col:11, col:28> 'int' '<'
|         | | |   |   |-ImplicitCastExpr 0x1310090e0 <col:11> 'int' <LValueToRValue>
|         | | |   |   | `-DeclRefExpr 0x1310090a0 <col:11> 'int' lvalue ParmVar 0x13000def0 'fractionalDigits' 'int'
|         | | |   |   `-IntegerLiteral 0x1310090c0 <col:28> 'int' 0
|         | | |   `-BinaryOperator 0x131009178 <col:34, col:38> 'int' contains-errors '>'
|         | | |     |-RecoveryExpr 0x131009138 <col:34> '<dependent type>' contains-errors lvalue
|         | | |     `-IntegerLiteral 0x131009158 <col:38> 'int' 0
|         | | `-BinaryOperator 0x131009230 <col:44, col:61> 'int' '>'
|         | |   |-ImplicitCastExpr 0x131009218 <col:44> 'int' <LValueToRValue>
|         | |   | `-DeclRefExpr 0x1310091d8 <col:44> 'int' lvalue ParmVar 0x13000def0 'fractionalDigits' 'int'
|         | |   `-IntegerLiteral 0x1310091f8 <col:61> 'int' 0
|         | `-CompoundStmt 0x13002a360 <col:64, line:44:5>
|         |   |-CompoundAssignOperator 0x1310092d8 <line:30:7, col:12> '<dependent type>' contains-errors '*=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|         |   | |-RecoveryExpr 0x131009290 <col:7> '<dependent type>' contains-errors lvalue
|         |   | | `-DeclRefExpr 0x131009270 <col:7> 'int' lvalue ParmVar 0x13000dcf0 'val' 'int'
|         |   | `-DeclRefExpr 0x1310092b8 <col:12> 'int' lvalue ParmVar 0x13000de70 'radix' 'int'
|         |   `-WhileStmt 0x13002a340 <line:31:7, line:43:7>
|         |     |-BinaryOperator 0x1310095c8 <line:31:14, col:110> 'int' contains-errors '||'
|         |     | |-ParenExpr 0x131009510 <col:14, col:84> 'int' contains-errors
|         |     | | `-BinaryOperator 0x1310094f0 <col:15, col:83> 'int' contains-errors '&&'
|         |     | |   |-BinaryOperator 0x131009450 <col:15, col:60> 'int' '&&'
|         |     | |   | |-ParenExpr 0x131009380 <col:15, col:34> 'int'
|         |     | |   | | `-BinaryOperator 0x131009360 <col:16, col:33> 'int' '<'
|         |     | |   | |   |-ImplicitCastExpr 0x131009348 <col:16> 'int' <LValueToRValue>
|         |     | |   | |   | `-DeclRefExpr 0x131009308 <col:16> 'int' lvalue ParmVar 0x13000def0 'fractionalDigits' 'int'
|         |     | |   | |   `-IntegerLiteral 0x131009328 <col:33> 'int' 0
|         |     | |   | `-ParenExpr 0x131009430 <col:39, col:60> 'int'
|         |     | |   |   `-BinaryOperator 0x131009410 <col:40, col:58> 'int' '>'
|         |     | |   |     |-ImplicitCastExpr 0x1310093f8 <col:40> 'int' <LValueToRValue>
|         |     | |   |     | `-DeclRefExpr 0x1310093a0 <col:40> 'int' lvalue ParmVar 0x13000def0 'fractionalDigits' 'int'
|         |     | |   |     `-UnaryOperator 0x1310093e0 <col:57, col:58> 'int' prefix '-'
|         |     | |   |       `-IntegerLiteral 0x1310093c0 <col:58> 'int' 12
|         |     | |   `-ParenExpr 0x1310094d0 <col:65, col:83> 'int' contains-errors
|         |     | |     `-BinaryOperator 0x1310094b0 <col:66, col:72> 'int' contains-errors '>'
|         |     | |       |-RecoveryExpr 0x131009470 <col:66> '<dependent type>' contains-errors lvalue
|         |     | |       `-RecoveryExpr 0x131009490 <col:72> '<dependent type>' contains-errors lvalue
|         |     | `-ParenExpr 0x1310095a8 <col:89, col:110> 'int'
|         |     |   `-BinaryOperator 0x131009588 <col:90, col:109> 'int' '>'
|         |     |     |-ImplicitCastExpr 0x131009570 <col:90> 'int' <LValueToRValue>
|         |     |     | `-DeclRefExpr 0x131009530 <col:90> 'int' lvalue ParmVar 0x13000def0 'fractionalDigits' 'int'
|         |     |     `-IntegerLiteral 0x131009550 <col:109> 'int' 0
|         |     `-CompoundStmt 0x13002a2f8 <col:113, line:43:7>
|         |       |-DeclStmt 0x130029a60 <line:32:9, col:71>
|         |       | `-VarDecl 0x131009600 <col:9, col:70> col:13 used v 'int' cinit
|         |       |   `-CStyleCastExpr 0x130029a38 <col:17, col:70> 'int' contains-errors <Dependent>
|         |       |     `-ParenExpr 0x130029a18 <col:22, col:70> '<dependent type>' contains-errors
|         |       |       `-BinaryOperator 0x1310097b0 <col:23, col:68> '<dependent type>' contains-errors '+'
|         |       |         |-RecoveryExpr 0x131009668 <col:23> '<dependent type>' contains-errors lvalue
|         |       |         `-ParenExpr 0x131009790 <col:27, col:68> 'double'
|         |       |           `-ConditionalOperator 0x131009760 <col:28, col:58> 'double'
|         |       |             |-ParenExpr 0x131009700 <col:28, col:48> 'int'
|         |       |             | `-BinaryOperator 0x1310096e0 <col:29, col:47> 'int' '=='
|         |       |             |   |-ImplicitCastExpr 0x1310096c8 <col:29> 'int' <LValueToRValue>
|         |       |             |   | `-DeclRefExpr 0x131009688 <col:29> 'int' lvalue ParmVar 0x13000def0 'fractionalDigits' 'int'
|         |       |             |   `-IntegerLiteral 0x1310096a8 <col:47> 'int' 1
|         |       |             |-FloatingLiteral 0x131009720 <col:52> 'double' 4.000000e-01
|         |       |             `-FloatingLiteral 0x131009740 <col:58> 'double' 1.000000e-08
|         |       |-BinaryOperator 0x130029b80 <line:33:9, col:23> '<dependent type>' contains-errors '='
|         |       | |-RecoveryExpr 0x130029a98 <col:9> '<dependent type>' contains-errors lvalue
|         |       | | `-DeclRefExpr 0x130029a78 <col:9> 'int' lvalue ParmVar 0x13000dcf0 'val' 'int'
|         |       | `-BinaryOperator 0x130029b60 <col:15, col:23> '<dependent type>' contains-errors '*'
|         |       |   |-ParenExpr 0x130029b20 <col:15, col:21> '<dependent type>' contains-errors
|         |       |   | `-BinaryOperator 0x130029b00 <col:16, col:20> '<dependent type>' contains-errors '-'
|         |       |   |   |-RecoveryExpr 0x130029ac0 <col:16> '<dependent type>' contains-errors lvalue
|         |       |   |   `-DeclRefExpr 0x130029ae0 <col:20> 'int' contains-errors lvalue Var 0x131009600 'v' 'int'
|         |       |   `-DeclRefExpr 0x130029b40 <col:23> 'int' lvalue ParmVar 0x13000de70 'radix' 'int'
|         |       |-IfStmt 0x130029ce8 <line:34:2, col:24>
|         |       | |-BinaryOperator 0x130029c10 <col:6, col:9> 'int' contains-errors '=='
|         |       | | |-ImplicitCastExpr 0x130029be0 <col:6> 'int' contains-errors <LValueToRValue>
|         |       | | | `-DeclRefExpr 0x130029ba0 <col:6> 'int' contains-errors lvalue Var 0x131009600 'v' 'int'
|         |       | | `-ImplicitCastExpr 0x130029bf8 <col:9> 'int' <LValueToRValue>
|         |       | |   `-DeclRefExpr 0x130029bc0 <col:9> 'int' lvalue ParmVar 0x13000de70 'radix' 'int'
|         |       | `-BinaryOperator 0x130029cc8 <col:16, col:24> 'int' contains-errors '='
|         |       |   |-DeclRefExpr 0x130029c30 <col:16> 'int' contains-errors lvalue Var 0x131009600 'v' 'int'
|         |       |   `-BinaryOperator 0x130029ca8 <col:18, col:24> 'int' '-'
|         |       |     |-ImplicitCastExpr 0x130029c90 <col:18> 'int' <LValueToRValue>
|         |       |     | `-DeclRefExpr 0x130029c50 <col:18> 'int' lvalue ParmVar 0x13000de70 'radix' 'int'
|         |       |     `-IntegerLiteral 0x130029c70 <col:24> 'int' 1
|         |       |-IfStmt 0x130029ff0 <line:35:9, line:39:9>
|         |       | |-UnaryOperator 0x130029d88 <line:35:13, col:14> '<dependent type>' contains-errors prefix '!' cannot overflow
|         |       | | `-ImplicitCastExpr 0x130029d70 <col:14> '<dependent type>' contains-errors <LValueToRValue>
|         |       | |   `-RecoveryExpr 0x130029d50 <col:14> '<dependent type>' contains-errors lvalue
|         |       | `-CompoundStmt 0x130029fd0 <col:21, line:39:9>
|         |       |   |-IfStmt 0x130029ef0 <line:37:11, col:45>
|         |       |   | |-BinaryOperator 0x130029df8 <col:15, col:24> 'int' contains-errors '<='
|         |       |   | | |-UnaryOperator 0x130029dc0 <col:15, col:17> '<dependent type>' contains-errors prefix '--' cannot overflow
|         |       |   | | | `-RecoveryExpr 0x130029da0 <col:17> '<dependent type>' contains-errors lvalue
|         |       |   | | `-IntegerLiteral 0x130029dd8 <col:24> 'int' 0
|         |       |   | `-CompoundStmt 0x130029ed0 <col:27, col:45>
|         |       |   |   |-BinaryOperator 0x130029ea0 <col:29, col:34> 'char' '='
|         |       |   |   | |-UnaryOperator 0x130029e50 <col:29, col:30> 'char' lvalue prefix '*' cannot overflow
|         |       |   |   | | `-ImplicitCastExpr 0x130029e38 <col:30> 'char *' <LValueToRValue>
|         |       |   |   | |   `-DeclRefExpr 0x130029e18 <col:30> 'char *' lvalue ParmVar 0x13000dd70 'str' 'char *'
|         |       |   |   | `-ImplicitCastExpr 0x130029e88 <col:34> 'char' <IntegralCast>
|         |       |   |   |   `-IntegerLiteral 0x130029e68 <col:34> 'int' 0
|         |       |   |   `-ReturnStmt 0x130029ec0 <col:37>
|         |       |   `-BinaryOperator 0x130029fb0 <line:38:11, col:20> 'char' '='
|         |       |     |-UnaryOperator 0x130029f68 <col:11, col:18> 'char' lvalue prefix '*' cannot overflow
|         |       |     | `-ParenExpr 0x130029f48 <col:12, col:18> 'char *'
|         |       |     |   `-UnaryOperator 0x130029f30 <col:13, col:16> 'char *' postfix '++'
|         |       |     |     `-DeclRefExpr 0x130029f10 <col:13> 'char *' lvalue ParmVar 0x13000dd70 'str' 'char *'
|         |       |     `-ImplicitCastExpr 0x130029f98 <col:20> 'char' <IntegralCast>
|         |       |       `-CharacterLiteral 0x130029f80 <col:20> 'int' 46
|         |       |-IfStmt 0x13002a160 <line:40:9, col:43>
|         |       | |-BinaryOperator 0x13002a068 <col:13, col:22> 'int' contains-errors '<='
|         |       | | |-UnaryOperator 0x13002a030 <col:13, col:15> '<dependent type>' contains-errors prefix '--' cannot overflow
|         |       | | | `-RecoveryExpr 0x13002a010 <col:15> '<dependent type>' contains-errors lvalue
|         |       | | `-IntegerLiteral 0x13002a048 <col:22> 'int' 0
|         |       | `-CompoundStmt 0x13002a140 <col:25, col:43>
|         |       |   |-BinaryOperator 0x13002a110 <col:27, col:32> 'char' '='
|         |       |   | |-UnaryOperator 0x13002a0c0 <col:27, col:28> 'char' lvalue prefix '*' cannot overflow
|         |       |   | | `-ImplicitCastExpr 0x13002a0a8 <col:28> 'char *' <LValueToRValue>
|         |       |   | |   `-DeclRefExpr 0x13002a088 <col:28> 'char *' lvalue ParmVar 0x13000dd70 'str' 'char *'
|         |       |   | `-ImplicitCastExpr 0x13002a0f8 <col:32> 'char' <IntegralCast>
|         |       |   |   `-IntegerLiteral 0x13002a0d8 <col:32> 'int' 0
|         |       |   `-ReturnStmt 0x13002a130 <col:35>
|         |       |-BinaryOperator 0x13002a2a0 <line:41:9, col:25> 'char' contains-errors '='
|         |       | |-UnaryOperator 0x13002a1d8 <col:9, col:16> 'char' lvalue prefix '*' cannot overflow
|         |       | | `-ParenExpr 0x13002a1b8 <col:10, col:16> 'char *'
|         |       | |   `-UnaryOperator 0x13002a1a0 <col:11, col:14> 'char *' postfix '++'
|         |       | |     `-DeclRefExpr 0x13002a180 <col:11> 'char *' lvalue ParmVar 0x13000dd70 'str' 'char *'
|         |       | `-ImplicitCastExpr 0x13002a288 <col:18, col:25> 'char' contains-errors <IntegralCast>
|         |       |   `-CallExpr 0x13002a248 <col:18, col:25> 'int' contains-errors
|         |       |     |-ImplicitCastExpr 0x13002a230 <col:18> 'int (*)()' <FunctionToPointerDecay>
|         |       |     | `-DeclRefExpr 0x13002a1f0 <col:18> 'int ()' Function 0x131008e70 'itoch' 'int ()'
|         |       |     `-ImplicitCastExpr 0x13002a270 <col:24> 'int' contains-errors <LValueToRValue>
|         |       |       `-DeclRefExpr 0x13002a210 <col:24> 'int' contains-errors lvalue Var 0x131009600 'v' 'int'
|         |       `-UnaryOperator 0x13002a2e0 <line:42:9, col:25> 'int' postfix '--'
|         |         `-DeclRefExpr 0x13002a2c0 <col:9> 'int' lvalue ParmVar 0x13000def0 'fractionalDigits' 'int'
|         `-BinaryOperator 0x13002a448 <line:47:5, col:14> 'char' '='
|           |-UnaryOperator 0x13002a3f8 <col:5, col:12> 'char' lvalue prefix '*' cannot overflow
|           | `-ParenExpr 0x13002a3d8 <col:6, col:12> 'char *'
|           |   `-UnaryOperator 0x13002a3c0 <col:7, col:10> 'char *' postfix '++'
|           |     `-DeclRefExpr 0x13002a3a0 <col:7> 'char *' lvalue ParmVar 0x13000dd70 'str' 'char *'
|           `-ImplicitCastExpr 0x13002a430 <col:14> 'char' <IntegralCast>
|             `-IntegerLiteral 0x13002a410 <col:14> 'int' 0
`-FunctionDecl 0x1300277c0 <line:3:19> col:19 implicit used strncpy 'char *(char *, const char *, unsigned long)' extern
  |-ParmVarDecl 0x1300278c0 <<invalid sloc>> <invalid sloc> 'char *'
  |-ParmVarDecl 0x130027928 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x130027990 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x130027868 <<invalid sloc>> Implicit 886
