TranslationUnitDecl 0x145855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1458564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x145855bd0 '__int128'
|-TypedefDecl 0x145856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x145855bf0 'unsigned __int128'
|-TypedefDecl 0x145926a30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x145926800 'struct __NSConstantString_tag'
|   `-Record 0x145856580 '__NSConstantString_tag'
|-TypedefDecl 0x145926a98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x145855d90 '__SVInt8_t'
|-TypedefDecl 0x145926b00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x145855db0 '__SVInt16_t'
|-TypedefDecl 0x145926b68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x145855dd0 '__SVInt32_t'
|-TypedefDecl 0x145926bd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x145855df0 '__SVInt64_t'
|-TypedefDecl 0x145926c38 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x145855e10 '__SVUint8_t'
|-TypedefDecl 0x145926ca0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x145855e30 '__SVUint16_t'
|-TypedefDecl 0x145926d08 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x145855e50 '__SVUint32_t'
|-TypedefDecl 0x145926d70 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x145855e70 '__SVUint64_t'
|-TypedefDecl 0x145926dd8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x145855e90 '__SVFloat16_t'
|-TypedefDecl 0x145926e40 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x145855eb0 '__SVFloat32_t'
|-TypedefDecl 0x145926ea8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x145855ed0 '__SVFloat64_t'
|-TypedefDecl 0x145926f10 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x145855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x145926f78 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x145855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x145926fe0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x145855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x145927048 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x145855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1459270b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x145855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x145927118 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x145855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x145927180 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x145855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1459271e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x145855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x145927250 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x145855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x1459272b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x145856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x145927320 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x145856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x145927388 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x145856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x1459273f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x145856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x145927458 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x145856090 '__clang_svint8x3_t'
|-TypedefDecl 0x1459274c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1458560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x145927528 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1458560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x145927590 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1458560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x1459275f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x145856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x145927660 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x145856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x1459276c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x145856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x145927730 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x145856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x145927798 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x145856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x145928000 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1458561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x145928068 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1458561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1459280d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1458561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x145928138 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x145856210 '__clang_svint8x4_t'
|-TypedefDecl 0x1459281a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x145856230 '__clang_svint16x4_t'
|-TypedefDecl 0x145928208 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x145856250 '__clang_svint32x4_t'
|-TypedefDecl 0x145928270 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x145856270 '__clang_svint64x4_t'
|-TypedefDecl 0x1459282d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x145856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x145928340 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1458562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x1459283a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1458562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x145928410 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1458562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x145928478 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x145856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x1459284e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x145856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x145928548 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x145856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x1459285b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x145856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x145928618 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x145856390 '__SVBool_t'
|-TypedefDecl 0x145928680 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1458563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x1459286e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1458563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x145928750 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1458563f0 '__SVCount_t'
|-TypedefDecl 0x1459287f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1459287b0 'char *'
|   `-BuiltinType 0x1458556b0 'char'
|-TypedefDecl 0x145928868 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1459287b0 'char *'
|   `-BuiltinType 0x1458556b0 'char'
|-FunctionDecl 0x145928af8 <dataset_diviso_filec/func21447_vuln.c:1:1, line:65:1> line:1:12 unzzip_cat 'int (int, char **, int)' static
| |-ParmVarDecl 0x1459288d8 <col:24, col:28> col:28 used argc 'int'
| |-ParmVarDecl 0x145928988 <col:34, col:42> col:42 used argv 'char **'
| |-ParmVarDecl 0x145928a08 <col:48, col:52> col:52 used extract 'int'
| `-CompoundStmt 0x145948110 <line:2:1, line:65:1>
|   |-DeclStmt 0x145928c80 <line:3:5, col:13>
|   | `-VarDecl 0x145928c18 <col:5, col:9> col:9 used argn 'int'
|   |-IfStmt 0x145942528 <line:6:5, line:10:5>
|   | |-BinaryOperator 0x145928d20 <line:6:9, col:17> 'int' '=='
|   | | |-ImplicitCastExpr 0x145928d08 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x145928cc8 <col:9> 'int' lvalue ParmVar 0x1459288d8 'argc' 'int'
|   | | `-IntegerLiteral 0x145928ce8 <col:17> 'int' 1
|   | `-CompoundStmt 0x145942508 <line:7:5, line:10:5>
|   |   |-CallExpr 0x145942468 <line:8:9, col:30> 'int'
|   |   | |-ImplicitCastExpr 0x145942450 <col:9> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x145942358 <col:9> 'int (const char *, ...)' Function 0x1459421b0 'printf' 'int (const char *, ...)'
|   |   | `-ImplicitCastExpr 0x1459424a8 <<scratch space>:2:1, dataset_diviso_filec/func21447_vuln.c:8:25> 'const char *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x145942490 <<scratch space>:2:1, dataset_diviso_filec/func21447_vuln.c:8:25> 'char *' <ArrayToPointerDecay>
|   |   |     `-StringLiteral 0x1459423c0 <<scratch space>:2:1, dataset_diviso_filec/func21447_vuln.c:8:25> 'char[41]' lvalue "dataset_diviso_filec/func21447_vuln.cSTR"
|   |   `-ReturnStmt 0x1459424f8 <line:9:9, col:16>
|   |     `-RecoveryExpr 0x1459424d8 <col:16> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x145945060 <line:13:5, line:17:5>
|   | |-UnaryOperator 0x145942808 <line:13:9, col:11> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x1459427f0 <col:11> '<dependent type>' contains-errors <LValueToRValue>
|   | |   `-RecoveryExpr 0x1459427d0 <col:11> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x145945038 <col:17, line:17:5>
|   |   |-CallExpr 0x145942c78 <line:14:9, col:43> '<dependent type>' contains-errors
|   |   | |-DeclRefExpr 0x145942900 <col:9> 'int ()' Function 0x145942848 'DBG3' 'int ()'
|   |   | |-StringLiteral 0x145942960 <col:14> 'char[4]' lvalue "STR"
|   |   | |-RecoveryExpr 0x145942bf8 <col:21> '<dependent type>' contains-errors lvalue
|   |   | `-CallExpr 0x145942c50 <col:28, col:42> '<dependent type>' contains-errors
|   |   |   |-DeclRefExpr 0x145942b48 <col:28> 'char *(int)' Function 0x1459429d8 'strerror' 'char *(int)'
|   |   |   `-RecoveryExpr 0x145942c18 <col:37> '<dependent type>' contains-errors lvalue
|   |   |-CallExpr 0x145942e40 <line:15:2, col:16> 'int'
|   |   | |-ImplicitCastExpr 0x145942e28 <col:2> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x145942d90 <col:2> 'int ()' Function 0x145942cd8 'perror' 'int ()'
|   |   | `-ImplicitCastExpr 0x145942e68 <col:9, col:15> 'char *' <LValueToRValue>
|   |   |   `-ArraySubscriptExpr 0x145942e08 <col:9, col:15> 'char *' lvalue
|   |   |     |-ImplicitCastExpr 0x145942df0 <col:9> 'char **' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x145942db0 <col:9> 'char **' lvalue ParmVar 0x145928988 'argv' 'char **'
|   |   |     `-IntegerLiteral 0x145942dd0 <col:14> 'int' 1
|   |   `-ReturnStmt 0x145945028 <line:16:2, col:23>
|   |     `-CallExpr 0x145945000 <col:9, col:23> '<dependent type>' contains-errors
|   |       |-DeclRefExpr 0x145942f60 <col:9> 'int ()' Function 0x145942ea8 'exitcode' 'int ()'
|   |       `-RecoveryExpr 0x145942fc0 <col:18> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x145947fb0 <line:19:5, line:62:5> has_else
|   | |-BinaryOperator 0x1459450d8 <line:19:9, col:17> 'int' '=='
|   | | |-ImplicitCastExpr 0x1459450c0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x145945080 <col:9> 'int' lvalue ParmVar 0x1459288d8 'argc' 'int'
|   | | `-IntegerLiteral 0x1459450a0 <col:17> 'int' 2
|   | |-CompoundStmt 0x145945a10 <line:20:5, line:31:5>
|   | | `-WhileStmt 0x1459458b0 <line:22:2, line:29:2>
|   | |   |-RecoveryExpr 0x1459452a8 <line:22:8, col:35> '_Bool' contains-errors
|   | |   `-CompoundStmt 0x145945898 <line:23:2, line:29:2>
|   | |     `-DeclStmt 0x145945410 <line:24:6, col:32>
|   | |       `-VarDecl 0x1459452e0 <col:6, col:26> col:12 used name 'char *' cinit
|   | |         `-CXXDependentScopeMemberExpr 0x1459453c8 <col:19, col:26> '<dependent type>' contains-errors lvalue ->d_name
|   | |           `-RecoveryExpr 0x1459453a8 <col:19> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x145947f98 <line:33:5, line:62:5>
|   |   `-WhileStmt 0x145947f78 <line:35:2, line:61:2>
|   |     |-RecoveryExpr 0x145945a68 <line:35:8, col:35> '_Bool' contains-errors
|   |     `-CompoundStmt 0x145947f58 <line:36:2, line:61:2>
|   |       |-DeclStmt 0x145945b08 <line:37:6, col:32>
|   |       | `-VarDecl 0x145945aa0 <col:6, col:12> col:12 used name 'char *'
|   |       `-ForStmt 0x145947f20 <line:38:6, line:60:6>
|   |         |-BinaryOperator 0x145945b60 <line:38:11, col:16> 'int' '='
|   |         | |-DeclRefExpr 0x145945b20 <col:11> 'int' lvalue Var 0x145928c18 'argn' 'int'
|   |         | `-IntegerLiteral 0x145945b40 <col:16> 'int' 1
|   |         |-<<<NULL>>>
|   |         |-BinaryOperator 0x145945bf0 <col:19, col:26> 'int' '<'
|   |         | |-ImplicitCastExpr 0x145945bc0 <col:19> 'int' <LValueToRValue>
|   |         | | `-DeclRefExpr 0x145945b80 <col:19> 'int' lvalue Var 0x145928c18 'argn' 'int'
|   |         | `-ImplicitCastExpr 0x145945bd8 <col:26> 'int' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x145945ba0 <col:26> 'int' lvalue ParmVar 0x1459288d8 'argc' 'int'
|   |         |-UnaryOperator 0x145945c30 <col:32, col:36> 'int' postfix '++'
|   |         | `-DeclRefExpr 0x145945c10 <col:32> 'int' lvalue Var 0x145928c18 'argn' 'int'
|   |         `-CompoundStmt 0x145947f08 <line:39:6, line:60:6>
|   |           `-IfStmt 0x145947ee8 <line:40:3, line:59:10>
|   |             |-RecoveryExpr 0x145945df8 <line:40:7, line:41:43> '_Bool' contains-errors
|   |             `-CompoundStmt 0x145947e90 <line:42:10, line:59:10>
|   |               |-DeclStmt 0x145945f28 <line:44:15, col:39>
|   |               | `-VarDecl 0x145945e30 <col:15, col:38> col:21 used zip_name 'char *' cinit
|   |               |   `-ImplicitCastExpr 0x145945f10 <col:32, col:38> 'char *' <LValueToRValue>
|   |               |     `-ArraySubscriptExpr 0x145945ef0 <col:32, col:38> 'char *' lvalue
|   |               |       |-ImplicitCastExpr 0x145945ed8 <col:32> 'char **' <LValueToRValue>
|   |               |       | `-DeclRefExpr 0x145945e98 <col:32> 'char **' lvalue ParmVar 0x145928988 'argv' 'char **'
|   |               |       `-IntegerLiteral 0x145945eb8 <col:37> 'int' 1
|   |               |-DeclStmt 0x145946688 <line:45:15, col:50>
|   |               | `-VarDecl 0x145945f58 <col:15, col:49> col:19 used zip_name_len 'int' cinit
|   |               |   `-ImplicitCastExpr 0x145946670 <col:34, col:49> 'int' <IntegralCast>
|   |               |     `-CallExpr 0x145946618 <col:34, col:49> 'unsigned long'
|   |               |       |-ImplicitCastExpr 0x145946600 <col:34> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |               |       | `-DeclRefExpr 0x145946570 <col:34> 'unsigned long (const char *)' Function 0x145946400 'strlen' 'unsigned long (const char *)'
|   |               |       `-ImplicitCastExpr 0x145946658 <col:41> 'const char *' <NoOp>
|   |               |         `-ImplicitCastExpr 0x145946640 <col:41> 'char *' <LValueToRValue>
|   |               |           `-DeclRefExpr 0x145946590 <col:41> 'char *' lvalue Var 0x145945e30 'zip_name' 'char *'
|   |               |-DeclStmt 0x145946800 <line:46:15, col:42>
|   |               | `-VarDecl 0x1459466b8 <col:15, col:41> col:19 used name_len 'int' cinit
|   |               |   `-ImplicitCastExpr 0x1459467e8 <col:30, col:41> 'int' <IntegralCast>
|   |               |     `-CallExpr 0x145946790 <col:30, col:41> 'unsigned long'
|   |               |       |-ImplicitCastExpr 0x145946778 <col:30> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |               |       | `-DeclRefExpr 0x145946720 <col:30> 'unsigned long (const char *)' Function 0x145946400 'strlen' 'unsigned long (const char *)'
|   |               |       `-ImplicitCastExpr 0x1459467d0 <col:37> 'const char *' <NoOp>
|   |               |         `-ImplicitCastExpr 0x1459467b8 <col:37> 'char *' <LValueToRValue>
|   |               |           `-DeclRefExpr 0x145946740 <col:37> 'char *' lvalue Var 0x145945aa0 'name' 'char *'
|   |               |-DeclStmt 0x145946c10 <line:47:15, col:67>
|   |               | `-VarDecl 0x145946830 <col:15, col:66> col:21 used mix_name 'char *' cinit
|   |               |   `-ImplicitCastExpr 0x145946bf8 <col:32, col:66> 'char *' <BitCast>
|   |               |     `-CallExpr 0x145946bb8 <col:32, col:66> 'void *'
|   |               |       |-ImplicitCastExpr 0x145946ba0 <col:32> 'void *(*)(unsigned long)' <FunctionToPointerDecay>
|   |               |       | `-DeclRefExpr 0x145946a78 <col:32> 'void *(unsigned long)' Function 0x1459468d8 'malloc' 'void *(unsigned long)'
|   |               |       `-ImplicitCastExpr 0x145946be0 <col:39, col:58> 'unsigned long' <IntegralCast>
|   |               |         `-BinaryOperator 0x145946b48 <col:39, col:58> 'int' '+'
|   |               |           |-BinaryOperator 0x145946af0 <col:39, col:54> 'int' '+'
|   |               |           | |-ImplicitCastExpr 0x145946ad8 <col:39> 'int' <LValueToRValue>
|   |               |           | | `-DeclRefExpr 0x145946a98 <col:39> 'int' lvalue Var 0x145945f58 'zip_name_len' 'int'
|   |               |           | `-IntegerLiteral 0x145946ab8 <col:54> 'int' 2
|   |               |           `-ImplicitCastExpr 0x145946b30 <col:58> 'int' <LValueToRValue>
|   |               |             `-DeclRefExpr 0x145946b10 <col:58> 'int' lvalue Var 0x1459466b8 'name_len' 'int'
|   |               |-IfStmt 0x145947158 <line:48:15, line:49:35>
|   |               | |-BinaryOperator 0x1459470c8 <line:48:19, col:77> 'int' '&&'
|   |               | | |-BinaryOperator 0x145946c80 <col:19, col:34> 'int' '>'
|   |               | | | |-ImplicitCastExpr 0x145946c68 <col:19> 'int' <LValueToRValue>
|   |               | | | | `-DeclRefExpr 0x145946c28 <col:19> 'int' lvalue Var 0x145945f58 'zip_name_len' 'int'
|   |               | | | `-IntegerLiteral 0x145946c48 <col:34> 'int' 4
|   |               | | `-UnaryOperator 0x1459470b0 <col:39, col:77> 'int' prefix '!' cannot overflow
|   |               | |   `-CallExpr 0x145947038 <col:40, col:77> 'int'
|   |               | |     |-ImplicitCastExpr 0x145947020 <col:40> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |               | |     | `-DeclRefExpr 0x145946ec0 <col:40> 'int (const char *, const char *)' Function 0x145946ce0 'strcmp' 'int (const char *, const char *)'
|   |               | |     |-ImplicitCastExpr 0x145947068 <col:47, col:69> 'const char *' <NoOp>
|   |               | |     | `-BinaryOperator 0x145946f90 <col:47, col:69> 'char *' '-'
|   |               | |     |   |-BinaryOperator 0x145946f50 <col:47, col:56> 'char *' '+'
|   |               | |     |   | |-ImplicitCastExpr 0x145946f20 <col:47> 'char *' <LValueToRValue>
|   |               | |     |   | | `-DeclRefExpr 0x145946ee0 <col:47> 'char *' lvalue Var 0x145945e30 'zip_name' 'char *'
|   |               | |     |   | `-ImplicitCastExpr 0x145946f38 <col:56> 'int' <LValueToRValue>
|   |               | |     |   |   `-DeclRefExpr 0x145946f00 <col:56> 'int' lvalue Var 0x145945f58 'zip_name_len' 'int'
|   |               | |     |   `-IntegerLiteral 0x145946f70 <col:69> 'int' 4
|   |               | |     `-ImplicitCastExpr 0x145947098 <col:72> 'const char *' <NoOp>
|   |               | |       `-ImplicitCastExpr 0x145947080 <col:72> 'char *' <ArrayToPointerDecay>
|   |               | |         `-StringLiteral 0x145946fb0 <col:72> 'char[4]' lvalue "STR"
|   |               | `-CompoundAssignOperator 0x145947128 <line:49:19, col:35> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   |               |   |-DeclRefExpr 0x1459470e8 <col:19> 'int' lvalue Var 0x145945f58 'zip_name_len' 'int'
|   |               |   `-IntegerLiteral 0x145947108 <col:35> 'int' 4
|   |               |-CallExpr 0x145947598 <line:50:15, col:54> 'void *'
|   |               | |-ImplicitCastExpr 0x145947580 <col:15> 'void *(*)(void *, const void *, unsigned long)' <FunctionToPointerDecay>
|   |               | | `-DeclRefExpr 0x145947480 <col:15> 'void *(void *, const void *, unsigned long)' Function 0x1459471f8 'memcpy' 'void *(void *, const void *, unsigned long)'
|   |               | |-ImplicitCastExpr 0x1459475e8 <col:22> 'void *' <BitCast>
|   |               | | `-ImplicitCastExpr 0x1459475d0 <col:22> 'char *' <LValueToRValue>
|   |               | |   `-DeclRefExpr 0x1459474a0 <col:22> 'char *' lvalue Var 0x145946830 'mix_name' 'char *'
|   |               | |-ImplicitCastExpr 0x145947618 <col:32> 'const void *' <BitCast>
|   |               | | `-ImplicitCastExpr 0x145947600 <col:32> 'char *' <LValueToRValue>
|   |               | |   `-DeclRefExpr 0x1459474c0 <col:32> 'char *' lvalue Var 0x145945e30 'zip_name' 'char *'
|   |               | `-ImplicitCastExpr 0x145947648 <col:42> 'unsigned long' <IntegralCast>
|   |               |   `-ImplicitCastExpr 0x145947630 <col:42> 'int' <LValueToRValue>
|   |               |     `-DeclRefExpr 0x1459474e0 <col:42> 'int' lvalue Var 0x145945f58 'zip_name_len' 'int'
|   |               |-BinaryOperator 0x145947720 <line:51:15, col:40> 'char' '='
|   |               | |-ArraySubscriptExpr 0x1459476d0 <col:15, col:36> 'char' lvalue
|   |               | | |-ImplicitCastExpr 0x1459476a0 <col:15> 'char *' <LValueToRValue>
|   |               | | | `-DeclRefExpr 0x145947660 <col:15> 'char *' lvalue Var 0x145946830 'mix_name' 'char *'
|   |               | | `-ImplicitCastExpr 0x1459476b8 <col:24> 'int' <LValueToRValue>
|   |               | |   `-DeclRefExpr 0x145947680 <col:24> 'int' lvalue Var 0x145945f58 'zip_name_len' 'int'
|   |               | `-ImplicitCastExpr 0x145947708 <col:40> 'char' <IntegralCast>
|   |               |   `-CharacterLiteral 0x1459476f0 <col:40> 'int' 47
|   |               |-CallExpr 0x145947ad8 <line:52:15, col:55> 'char *'
|   |               | |-ImplicitCastExpr 0x145947ac0 <col:15> 'char *(*)(char *, const char *)' <FunctionToPointerDecay>
|   |               | | `-DeclRefExpr 0x145947960 <col:15> 'char *(char *, const char *)' Function 0x145947780 'strcpy' 'char *(char *, const char *)'
|   |               | |-BinaryOperator 0x145947a30 <col:22, col:48> 'char *' '+'
|   |               | | |-BinaryOperator 0x1459479f0 <col:22, col:33> 'char *' '+'
|   |               | | | |-ImplicitCastExpr 0x1459479c0 <col:22> 'char *' <LValueToRValue>
|   |               | | | | `-DeclRefExpr 0x145947980 <col:22> 'char *' lvalue Var 0x145946830 'mix_name' 'char *'
|   |               | | | `-ImplicitCastExpr 0x1459479d8 <col:33> 'int' <LValueToRValue>
|   |               | | |   `-DeclRefExpr 0x1459479a0 <col:33> 'int' lvalue Var 0x145945f58 'zip_name_len' 'int'
|   |               | | `-IntegerLiteral 0x145947a10 <col:48> 'int' 1
|   |               | `-ImplicitCastExpr 0x145947b20 <col:51> 'const char *' <NoOp>
|   |               |   `-ImplicitCastExpr 0x145947b08 <col:51> 'char *' <LValueToRValue>
|   |               |     `-DeclRefExpr 0x145947a50 <col:51> 'char *' lvalue Var 0x145945aa0 'name' 'char *'
|   |               `-BreakStmt 0x145947e88 <line:58:8>
|   `-ReturnStmt 0x145948100 <line:64:5, col:12>
|     `-IntegerLiteral 0x1459480e0 <col:12> 'int' 0
|-FunctionDecl 0x1459421b0 <line:8:9> col:9 implicit used printf 'int (const char *, ...)' extern
| |-ParmVarDecl 0x1459422b0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-BuiltinAttr 0x145942258 <<invalid sloc>> Implicit 903
| `-FormatAttr 0x145942320 <col:9> Implicit printf 1 2
|-FunctionDecl 0x1459429d8 <line:14:28> col:28 implicit used strerror 'char *(int)' extern
| |-ParmVarDecl 0x145942ad8 <<invalid sloc>> <invalid sloc> 'int'
| `-BuiltinAttr 0x145942a80 <<invalid sloc>> Implicit 901
|-FunctionDecl 0x145946400 <line:45:34> col:34 implicit used strlen 'unsigned long (const char *)' extern
| |-ParmVarDecl 0x145946500 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x1459464a8 <<invalid sloc>> Implicit 902
|-FunctionDecl 0x1459468d8 <line:47:32> col:32 implicit used malloc 'void *(unsigned long)' extern
| |-ParmVarDecl 0x1459469d8 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-BuiltinAttr 0x145946980 <<invalid sloc>> Implicit 871
| `-AllocSizeAttr 0x145946a48 <col:32> Implicit 1
|-FunctionDecl 0x145946ce0 <line:48:40> col:40 implicit used strcmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x145946de0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x145946e48 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x145946d88 <<invalid sloc>> Implicit 887
|-FunctionDecl 0x1459471f8 <line:50:15> col:15 implicit used memcpy 'void *(void *, const void *, unsigned long)' extern
| |-ParmVarDecl 0x1459472f8 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x145947360 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x145947400 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x1459472a0 <<invalid sloc>> Implicit 882
`-FunctionDecl 0x145947780 <line:52:15> col:15 implicit used strcpy 'char *(char *, const char *)' extern
  |-ParmVarDecl 0x145947880 <<invalid sloc>> <invalid sloc> 'char *'
  |-ParmVarDecl 0x1459478e8 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x145947828 <<invalid sloc>> Implicit 885
