TranslationUnitDecl 0x11d855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x11d8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x11d855bd0 '__int128'
|-TypedefDecl 0x11d856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x11d855bf0 'unsigned __int128'
|-TypedefDecl 0x11e00be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x11e00bc00 'struct __NSConstantString_tag'
|   `-Record 0x11d856580 '__NSConstantString_tag'
|-TypedefDecl 0x11e00be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x11d855d90 '__SVInt8_t'
|-TypedefDecl 0x11e00bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x11d855db0 '__SVInt16_t'
|-TypedefDecl 0x11e00bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x11d855dd0 '__SVInt32_t'
|-TypedefDecl 0x11e00bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x11d855df0 '__SVInt64_t'
|-TypedefDecl 0x11e00c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x11d855e10 '__SVUint8_t'
|-TypedefDecl 0x11e00c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x11d855e30 '__SVUint16_t'
|-TypedefDecl 0x11e00c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x11d855e50 '__SVUint32_t'
|-TypedefDecl 0x11e00c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x11d855e70 '__SVUint64_t'
|-TypedefDecl 0x11e00c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x11d855e90 '__SVFloat16_t'
|-TypedefDecl 0x11e00c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x11d855eb0 '__SVFloat32_t'
|-TypedefDecl 0x11e00c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x11d855ed0 '__SVFloat64_t'
|-TypedefDecl 0x11e00c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x11d855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x11e00c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x11d855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x11e00c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x11d855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x11e00c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x11d855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x11e00c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x11d855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x11e00c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x11d855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x11e00c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x11d855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x11e00c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x11d855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x11e00c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x11d855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x11e00c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x11d856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x11e00c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x11d856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x11e00c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x11d856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x11e00c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x11d856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x11e00c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x11d856090 '__clang_svint8x3_t'
|-TypedefDecl 0x11e00c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x11d8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x11e00c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x11d8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x11e00c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x11d8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x11e00c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x11d856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x11e00ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x11d856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x11e00cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x11d856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x11e00cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x11d856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x11e00cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x11d856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x11e00d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x11d8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x11e00d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x11d8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x11e00d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x11d8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x11e00d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x11d856210 '__clang_svint8x4_t'
|-TypedefDecl 0x11e00d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x11d856230 '__clang_svint16x4_t'
|-TypedefDecl 0x11e00d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x11d856250 '__clang_svint32x4_t'
|-TypedefDecl 0x11e00d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x11d856270 '__clang_svint64x4_t'
|-TypedefDecl 0x11e00d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x11d856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x11e00d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x11d8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x11e00d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x11d8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x11e00d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x11d8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x11e00d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x11d856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x11e00d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x11d856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x11e00d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x11d856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x11e00d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x11d856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x11e00da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x11d856390 '__SVBool_t'
|-TypedefDecl 0x11e00da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x11d8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x11e00dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x11d8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x11e00db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x11d8563f0 '__SVCount_t'
|-TypedefDecl 0x11e00dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x11e00dbb0 'char *'
|   `-BuiltinType 0x11d8556b0 'char'
|-TypedefDecl 0x11e00dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x11e00dbb0 'char *'
|   `-BuiltinType 0x11d8556b0 'char'
|-FunctionDecl 0x11e00de88 <dataset_diviso_filec/func4604_nonvuln.c:1:1, line:42:1> line:1:1 invalid tile_make_weights 'int (int *, double)'
| |-ParmVarDecl 0x11e00dd28 <col:20, col:43> col:43 referenced invalid dim 'int *'
| |-ParmVarDecl 0x11e00dda8 <line:2:6, col:29> col:29 used scale 'double'
| `-CompoundStmt 0x11e02c248 <line:3:1, line:42:1>
|   |-DeclStmt 0x11e027788 <line:4:3, col:31>
|   | `-VarDecl 0x11e00df58 <col:3, col:30> col:7 used n 'int' cinit
|   |   `-ImplicitCastExpr 0x11e027770 <col:11, col:30> 'int' <FloatingToIntegral>
|   |     `-CallExpr 0x11e027748 <col:11, col:30> 'double'
|   |       |-ImplicitCastExpr 0x11e027730 <col:11> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x11e0275f0 <col:11> 'double (double)' Function 0x11e027430 'ceil' 'double (double)'
|   |       `-BinaryOperator 0x11e0276d8 <col:17, col:29> 'double' '+'
|   |         |-BinaryOperator 0x11e027680 <col:17, col:21> 'double' '/'
|   |         | |-ImplicitCastExpr 0x11e027668 <col:17> 'double' <IntegralToFloating>
|   |         | | `-IntegerLiteral 0x11e027610 <col:17> 'int' 1
|   |         | `-ImplicitCastExpr 0x11e027650 <col:21> 'double' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x11e027630 <col:21> 'double' lvalue ParmVar 0x11e00dda8 'scale' 'double'
|   |         `-ImplicitCastExpr 0x11e0276c0 <col:29> 'double' <IntegralToFloating>
|   |           `-IntegerLiteral 0x11e0276a0 <col:29> 'int' 1
|   |-DeclStmt 0x11e027850 <line:5:3, col:24>
|   | `-VarDecl 0x11e0277e8 <col:3, col:11> col:11 used pixel_weights 'double *'
|   |-DeclStmt 0x11e0278e8 <line:6:3, col:13>
|   | `-VarDecl 0x11e027880 <col:3, col:7> col:7 used offset 'int'
|   |-DeclStmt 0x11e027980 <line:7:3, col:8>
|   | `-VarDecl 0x11e027918 <col:3, col:7> col:7 used i 'int'
|   |-BinaryOperator 0x11e027cf0 <line:9:3, col:65> 'double *' contains-errors '='
|   | |-DeclRefExpr 0x11e027998 <col:3> 'double *' lvalue Var 0x11e0277e8 'pixel_weights' 'double *'
|   | `-CallExpr 0x11e027cc0 <col:19, col:65> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x11e027b10 <col:19> 'int ()' Function 0x11e027a58 'g_try_malloc_n' 'int ()'
|   |   |-BinaryOperator 0x11e027ca0 <col:35, col:53> '<dependent type>' contains-errors '*'
|   |   | |-UnaryExprOrTypeTraitExpr 0x11e027c60 <col:35, col:49> 'unsigned long' sizeof 'double'
|   |   | `-RecoveryExpr 0x11e027c80 <col:53> '<dependent type>' contains-errors lvalue
|   |   `-DeclRefExpr 0x11e027ba0 <col:64> 'int' lvalue Var 0x11e00df58 'n' 'int'
|   |-IfStmt 0x11e027df0 <line:10:3, line:11:12>
|   | |-BinaryOperator 0x11e027d88 <line:10:7, col:24> 'int' contains-errors '=='
|   | | |-DeclRefExpr 0x11e027d10 <col:7> 'double *' lvalue Var 0x11e0277e8 'pixel_weights' 'double *'
|   | | `-RecoveryExpr 0x11e027d68 <col:24> '<dependent type>' contains-errors lvalue
|   | `-ReturnStmt 0x11e027de0 <line:11:5, col:12>
|   |   `-RecoveryExpr 0x11e027dc0 <col:12> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x11e027ec0 <line:13:3, col:12> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x11e027e58 <col:3, col:8> '<dependent type>' contains-errors lvalue ->n
|   | | `-RecoveryExpr 0x11e027e30 <col:3> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x11e027e10 <col:3> 'int *' lvalue ParmVar 0x11e00dd28 'dim' 'int *'
|   | `-DeclRefExpr 0x11e027ea0 <col:12> 'int' lvalue Var 0x11e00df58 'n' 'int'
|   |-BinaryOperator 0x11e027f90 <line:14:3, col:17> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x11e027f28 <col:3, col:8> '<dependent type>' contains-errors lvalue ->offset
|   | | `-RecoveryExpr 0x11e027f00 <col:3> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x11e027ee0 <col:3> 'int *' lvalue ParmVar 0x11e00dd28 'dim' 'int *'
|   | `-IntegerLiteral 0x11e027f70 <col:17> 'int' 0
|   |-BinaryOperator 0x11e028060 <line:15:3, col:18> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x11e027ff8 <col:3, col:8> '<dependent type>' contains-errors lvalue ->weights
|   | | `-RecoveryExpr 0x11e027fd0 <col:3> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x11e027fb0 <col:3> 'int *' lvalue ParmVar 0x11e00dd28 'dim' 'int *'
|   | `-DeclRefExpr 0x11e028040 <col:18> 'double *' lvalue Var 0x11e0277e8 'pixel_weights' 'double *'
|   |-ForStmt 0x11e02c1c8 <line:17:3, line:39:5>
|   | |-BinaryOperator 0x11e0280c0 <line:17:8, col:17> 'int' '='
|   | | |-DeclRefExpr 0x11e028080 <col:8> 'int' lvalue Var 0x11e027880 'offset' 'int'
|   | | `-IntegerLiteral 0x11e0280a0 <col:17> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x11e028158 <col:20, col:29> 'int' contains-errors '<'
|   | | |-DeclRefExpr 0x11e0280e0 <col:20> 'int' lvalue Var 0x11e027880 'offset' 'int'
|   | | `-RecoveryExpr 0x11e028138 <col:29> '<dependent type>' contains-errors lvalue
|   | |-UnaryOperator 0x11e028198 <col:40, col:46> 'int' postfix '++'
|   | | `-DeclRefExpr 0x11e028178 <col:40> 'int' lvalue Var 0x11e027880 'offset' 'int'
|   | `-CompoundStmt 0x11e02c1a0 <line:18:5, line:39:5>
|   |   |-DeclStmt 0x11e0283d0 <line:19:7, col:44>
|   |   | `-VarDecl 0x11e0281c8 <col:7, col:35> col:14 used x 'double' cinit
|   |   |   `-BinaryOperator 0x11e0283b0 <col:18, col:35> '<dependent type>' contains-errors '/'
|   |   |     |-CStyleCastExpr 0x11e028368 <col:18, col:26> 'double' <IntegralToFloating>
|   |   |     | `-ImplicitCastExpr 0x11e028350 <col:26> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     |   `-DeclRefExpr 0x11e028230 <col:26> 'int' lvalue Var 0x11e027880 'offset' 'int'
|   |   |     `-RecoveryExpr 0x11e028390 <col:35> '<dependent type>' contains-errors lvalue
|   |   |-DeclStmt 0x11e02b550 <line:20:7, col:31>
|   |   | `-VarDecl 0x11e02b400 <col:7, col:26> col:14 used a 'double' cinit
|   |   |   `-BinaryOperator 0x11e02b530 <col:18, col:26> 'double' contains-errors '+'
|   |   |     |-ImplicitCastExpr 0x11e02b518 <col:18> 'double' contains-errors <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x11e02b468 <col:18> 'double' contains-errors lvalue Var 0x11e0281c8 'x' 'double'
|   |   |     `-BinaryOperator 0x11e02b4f8 <col:22, col:26> 'double' '/'
|   |   |       |-ImplicitCastExpr 0x11e02b4e0 <col:22> 'double' <IntegralToFloating>
|   |   |       | `-IntegerLiteral 0x11e02b488 <col:22> 'int' 1
|   |   |       `-ImplicitCastExpr 0x11e02b4c8 <col:26> 'double' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x11e02b4a8 <col:26> 'double' lvalue ParmVar 0x11e00dda8 'scale' 'double'
|   |   `-ForStmt 0x11e02c168 <line:22:7, line:38:8>
|   |     |-BinaryOperator 0x11e02b5a8 <line:22:12, col:16> 'int' '='
|   |     | |-DeclRefExpr 0x11e02b568 <col:12> 'int' lvalue Var 0x11e027918 'i' 'int'
|   |     | `-IntegerLiteral 0x11e02b588 <col:16> 'int' 0
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x11e02b638 <col:19, col:23> 'int' '<'
|   |     | |-ImplicitCastExpr 0x11e02b608 <col:19> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x11e02b5c8 <col:19> 'int' lvalue Var 0x11e027918 'i' 'int'
|   |     | `-ImplicitCastExpr 0x11e02b620 <col:23> 'int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x11e02b5e8 <col:23> 'int' lvalue Var 0x11e00df58 'n' 'int'
|   |     |-UnaryOperator 0x11e02b678 <col:26, col:27> 'int' postfix '++'
|   |     | `-DeclRefExpr 0x11e02b658 <col:26> 'int' lvalue Var 0x11e027918 'i' 'int'
|   |     `-CompoundStmt 0x11e02c150 <line:23:9, line:38:8>
|   |       `-IfStmt 0x11e02c120 <line:24:11, line:37:13> has_else
|   |         |-BinaryOperator 0x11e02b718 <line:24:15, col:19> 'int' contains-errors '<'
|   |         | |-ImplicitCastExpr 0x11e02b700 <col:15> 'double' <IntegralToFloating>
|   |         | | `-ImplicitCastExpr 0x11e02b6d0 <col:15> 'int' <LValueToRValue>
|   |         | |   `-DeclRefExpr 0x11e02b690 <col:15> 'int' lvalue Var 0x11e027918 'i' 'int'
|   |         | `-ImplicitCastExpr 0x11e02b6e8 <col:19> 'double' contains-errors <LValueToRValue>
|   |         |   `-DeclRefExpr 0x11e02b6b0 <col:19> 'double' contains-errors lvalue Var 0x11e0281c8 'x' 'double'
|   |         |-CompoundStmt 0x11e02bcc0 <line:25:13, line:30:13>
|   |         | `-IfStmt 0x11e02bc90 <line:26:15, line:29:38> has_else
|   |         |   |-BinaryOperator 0x11e02b800 <line:26:19, col:27> 'int' contains-errors '>'
|   |         |   | |-ImplicitCastExpr 0x11e02b7e8 <col:19, col:23> 'double' <IntegralToFloating>
|   |         |   | | `-BinaryOperator 0x11e02b790 <col:19, col:23> 'int' '+'
|   |         |   | |   |-ImplicitCastExpr 0x11e02b778 <col:19> 'int' <LValueToRValue>
|   |         |   | |   | `-DeclRefExpr 0x11e02b738 <col:19> 'int' lvalue Var 0x11e027918 'i' 'int'
|   |         |   | |   `-IntegerLiteral 0x11e02b758 <col:23> 'int' 1
|   |         |   | `-ImplicitCastExpr 0x11e02b7d0 <col:27> 'double' contains-errors <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x11e02b7b0 <col:27> 'double' contains-errors lvalue Var 0x11e0281c8 'x' 'double'
|   |         |   |-BinaryOperator 0x11e02bba8 <line:27:17, col:62> 'double' contains-errors '='
|   |         |   | |-UnaryOperator 0x11e02b878 <col:17, col:34> 'double' lvalue prefix '*' cannot overflow
|   |         |   | | `-ParenExpr 0x11e02b858 <col:18, col:34> 'double *'
|   |         |   | |   `-UnaryOperator 0x11e02b840 <col:19, col:32> 'double *' postfix '++'
|   |         |   | |     `-DeclRefExpr 0x11e02b820 <col:19> 'double *' lvalue Var 0x11e0277e8 'pixel_weights' 'double *'
|   |         |   | `-BinaryOperator 0x11e02bb88 <col:39, col:62> 'double' contains-errors '*'
|   |         |   |   |-ParenExpr 0x11e02bb30 <col:39, col:58> 'double' contains-errors
|   |         |   |   | `-BinaryOperator 0x11e02bb10 <col:40, col:57> 'double' contains-errors '-'
|   |         |   |   |   |-ImplicitCastExpr 0x11e02baf8 <col:40, col:53> 'double' contains-errors <IntegralToFloating>
|   |         |   |   |   | `-CallExpr 0x11e02ba78 <col:40, col:53> 'int' contains-errors
|   |         |   |   |   |   |-ImplicitCastExpr 0x11e02ba60 <col:40> 'int (*)()' <FunctionToPointerDecay>
|   |         |   |   |   |   | `-DeclRefExpr 0x11e02b970 <col:40> 'int ()' Function 0x11e02b8b8 'MIN' 'int ()'
|   |         |   |   |   |   |-BinaryOperator 0x11e02b9e8 <col:45, col:49> 'int' '+'
|   |         |   |   |   |   | |-ImplicitCastExpr 0x11e02b9d0 <col:45> 'int' <LValueToRValue>
|   |         |   |   |   |   | | `-DeclRefExpr 0x11e02b990 <col:45> 'int' lvalue Var 0x11e027918 'i' 'int'
|   |         |   |   |   |   | `-IntegerLiteral 0x11e02b9b0 <col:49> 'int' 1
|   |         |   |   |   |   `-ImplicitCastExpr 0x11e02baa8 <col:52> 'double' contains-errors <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x11e02ba08 <col:52> 'double' contains-errors lvalue Var 0x11e02b400 'a' 'double'
|   |         |   |   |   `-ImplicitCastExpr 0x11e02bae0 <col:57> 'double' contains-errors <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x11e02bac0 <col:57> 'double' contains-errors lvalue Var 0x11e0281c8 'x' 'double'
|   |         |   |   `-ImplicitCastExpr 0x11e02bb70 <col:62> 'double' <LValueToRValue>
|   |         |   |     `-DeclRefExpr 0x11e02bb50 <col:62> 'double' lvalue ParmVar 0x11e00dda8 'scale' 'double'
|   |         |   `-BinaryOperator 0x11e02bc70 <line:29:17, col:38> 'double' '='
|   |         |     |-UnaryOperator 0x11e02bc20 <col:17, col:34> 'double' lvalue prefix '*' cannot overflow
|   |         |     | `-ParenExpr 0x11e02bc00 <col:18, col:34> 'double *'
|   |         |     |   `-UnaryOperator 0x11e02bbe8 <col:19, col:32> 'double *' postfix '++'
|   |         |     |     `-DeclRefExpr 0x11e02bbc8 <col:19> 'double *' lvalue Var 0x11e0277e8 'pixel_weights' 'double *'
|   |         |     `-ImplicitCastExpr 0x11e02bc58 <col:38> 'double' <IntegralToFloating>
|   |         |       `-IntegerLiteral 0x11e02bc38 <col:38> 'int' 0
|   |         `-CompoundStmt 0x11e02c108 <line:32:13, line:37:13>
|   |           `-IfStmt 0x11e02c0d8 <line:33:15, line:36:38> has_else
|   |             |-BinaryOperator 0x11e02bd60 <line:33:19, col:23> 'int' contains-errors '>'
|   |             | |-ImplicitCastExpr 0x11e02bd18 <col:19> 'double' contains-errors <LValueToRValue>
|   |             | | `-DeclRefExpr 0x11e02bcd8 <col:19> 'double' contains-errors lvalue Var 0x11e02b400 'a' 'double'
|   |             | `-ImplicitCastExpr 0x11e02bd48 <col:23> 'double' <IntegralToFloating>
|   |             |   `-ImplicitCastExpr 0x11e02bd30 <col:23> 'int' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x11e02bcf8 <col:23> 'int' lvalue Var 0x11e027918 'i' 'int'
|   |             |-BinaryOperator 0x11e02bff0 <line:34:17, col:62> 'double' contains-errors '='
|   |             | |-UnaryOperator 0x11e02bdd8 <col:17, col:34> 'double' lvalue prefix '*' cannot overflow
|   |             | | `-ParenExpr 0x11e02bdb8 <col:18, col:34> 'double *'
|   |             | |   `-UnaryOperator 0x11e02bda0 <col:19, col:32> 'double *' postfix '++'
|   |             | |     `-DeclRefExpr 0x11e02bd80 <col:19> 'double *' lvalue Var 0x11e0277e8 'pixel_weights' 'double *'
|   |             | `-BinaryOperator 0x11e02bfd0 <col:39, col:62> 'double' contains-errors '*'
|   |             |   |-ImplicitCastExpr 0x11e02bfb8 <col:39, col:58> 'double' contains-errors <IntegralToFloating>
|   |             |   | `-ParenExpr 0x11e02bf60 <col:39, col:58> 'int' contains-errors
|   |             |   |   `-BinaryOperator 0x11e02bf40 <col:40, col:57> 'int' contains-errors '-'
|   |             |   |     |-CallExpr 0x11e02bec0 <col:40, col:53> 'int' contains-errors
|   |             |   |     | |-ImplicitCastExpr 0x11e02bea8 <col:40> 'int (*)()' <FunctionToPointerDecay>
|   |             |   |     | | `-DeclRefExpr 0x11e02bdf0 <col:40> 'int ()' Function 0x11e02b8b8 'MIN' 'int ()'
|   |             |   |     | |-BinaryOperator 0x11e02be68 <col:45, col:49> 'int' '+'
|   |             |   |     | | |-ImplicitCastExpr 0x11e02be50 <col:45> 'int' <LValueToRValue>
|   |             |   |     | | | `-DeclRefExpr 0x11e02be10 <col:45> 'int' lvalue Var 0x11e027918 'i' 'int'
|   |             |   |     | | `-IntegerLiteral 0x11e02be30 <col:49> 'int' 1
|   |             |   |     | `-ImplicitCastExpr 0x11e02bef0 <col:52> 'double' contains-errors <LValueToRValue>
|   |             |   |     |   `-DeclRefExpr 0x11e02be88 <col:52> 'double' contains-errors lvalue Var 0x11e02b400 'a' 'double'
|   |             |   |     `-ImplicitCastExpr 0x11e02bf28 <col:57> 'int' <LValueToRValue>
|   |             |   |       `-DeclRefExpr 0x11e02bf08 <col:57> 'int' lvalue Var 0x11e027918 'i' 'int'
|   |             |   `-ImplicitCastExpr 0x11e02bfa0 <col:62> 'double' <LValueToRValue>
|   |             |     `-DeclRefExpr 0x11e02bf80 <col:62> 'double' lvalue ParmVar 0x11e00dda8 'scale' 'double'
|   |             `-BinaryOperator 0x11e02c0b8 <line:36:17, col:38> 'double' '='
|   |               |-UnaryOperator 0x11e02c068 <col:17, col:34> 'double' lvalue prefix '*' cannot overflow
|   |               | `-ParenExpr 0x11e02c048 <col:18, col:34> 'double *'
|   |               |   `-UnaryOperator 0x11e02c030 <col:19, col:32> 'double *' postfix '++'
|   |               |     `-DeclRefExpr 0x11e02c010 <col:19> 'double *' lvalue Var 0x11e0277e8 'pixel_weights' 'double *'
|   |               `-ImplicitCastExpr 0x11e02c0a0 <col:38> 'double' <IntegralToFloating>
|   |                 `-IntegerLiteral 0x11e02c080 <col:38> 'int' 0
|   `-ReturnStmt 0x11e02c238 <line:41:3, col:10>
|     `-RecoveryExpr 0x11e02c218 <col:10> '<dependent type>' contains-errors lvalue
`-FunctionDecl 0x11e027430 <line:4:11> col:11 implicit used ceil 'double (double)' extern
  |-ParmVarDecl 0x11e027530 <<invalid sloc>> <invalid sloc> 'double'
  |-BuiltinAttr 0x11e0274d8 <<invalid sloc>> Implicit 1052
  |-NoThrowAttr 0x11e0275a0 <col:11> Implicit
  `-ConstAttr 0x11e0275c8 <col:11> Implicit
