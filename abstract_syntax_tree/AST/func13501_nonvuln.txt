TranslationUnitDecl 0x125855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1258564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x125855bd0 '__int128'
|-TypedefDecl 0x125856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x125855bf0 'unsigned __int128'
|-TypedefDecl 0x12600be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12600bc00 'struct __NSConstantString_tag'
|   `-Record 0x125856580 '__NSConstantString_tag'
|-TypedefDecl 0x12600be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x125855d90 '__SVInt8_t'
|-TypedefDecl 0x12600bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x125855db0 '__SVInt16_t'
|-TypedefDecl 0x12600bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x125855dd0 '__SVInt32_t'
|-TypedefDecl 0x12600bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x125855df0 '__SVInt64_t'
|-TypedefDecl 0x12600c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x125855e10 '__SVUint8_t'
|-TypedefDecl 0x12600c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x125855e30 '__SVUint16_t'
|-TypedefDecl 0x12600c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x125855e50 '__SVUint32_t'
|-TypedefDecl 0x12600c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x125855e70 '__SVUint64_t'
|-TypedefDecl 0x12600c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x125855e90 '__SVFloat16_t'
|-TypedefDecl 0x12600c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x125855eb0 '__SVFloat32_t'
|-TypedefDecl 0x12600c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x125855ed0 '__SVFloat64_t'
|-TypedefDecl 0x12600c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x125855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12600c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x125855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12600c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x125855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12600c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x125855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12600c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x125855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12600c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x125855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12600c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x125855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12600c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x125855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12600c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x125855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12600c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x125856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12600c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x125856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12600c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x125856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12600c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x125856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12600c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x125856090 '__clang_svint8x3_t'
|-TypedefDecl 0x12600c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1258560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12600c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1258560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12600c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1258560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12600c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x125856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12600ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x125856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12600cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x125856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12600cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x125856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12600cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x125856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12600d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1258561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12600d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1258561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12600d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1258561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12600d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x125856210 '__clang_svint8x4_t'
|-TypedefDecl 0x12600d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x125856230 '__clang_svint16x4_t'
|-TypedefDecl 0x12600d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x125856250 '__clang_svint32x4_t'
|-TypedefDecl 0x12600d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x125856270 '__clang_svint64x4_t'
|-TypedefDecl 0x12600d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x125856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12600d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1258562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12600d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1258562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12600d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1258562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12600d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x125856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12600d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x125856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12600d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x125856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12600d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x125856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12600da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x125856390 '__SVBool_t'
|-TypedefDecl 0x12600da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1258563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12600dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1258563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12600db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1258563f0 '__SVCount_t'
|-TypedefDecl 0x12600dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12600dbb0 'char *'
|   `-BuiltinType 0x1258556b0 'char'
|-TypedefDecl 0x12600dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12600dbb0 'char *'
|   `-BuiltinType 0x1258556b0 'char'
`-FunctionDecl 0x12600e038 <dataset_diviso_filec/func13501_nonvuln.c:1:1, line:54:1> line:1:12 invalid auxgetinfo 'int (int *, const char *, int *, int *, int *)' static
  |-ParmVarDecl 0x12600dd28 <col:24, col:35> col:35 invalid L 'int *'
  |-ParmVarDecl 0x12600dda8 <col:38, col:50> col:50 used what 'const char *'
  |-ParmVarDecl 0x12600de28 <col:56, col:67> col:67 referenced invalid ar 'int *'
  |-ParmVarDecl 0x12600dea8 <line:2:24, col:33> col:33 invalid f 'int *'
  |-ParmVarDecl 0x12600df28 <col:36, col:46> col:46 invalid ci 'int *'
  `-CompoundStmt 0x125923328 <col:50, line:54:1>
    |-DeclStmt 0x12600e1a8 <line:3:3, col:17>
    | `-VarDecl 0x12600e120 <col:3, col:16> col:7 used status 'int' cinit
    |   `-IntegerLiteral 0x12600e188 <col:16> 'int' 1
    |-ForStmt 0x1259232a8 <line:4:3, line:52:3>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x12600e210 <line:4:10, col:11> 'char' <LValueToRValue>
    | | `-UnaryOperator 0x12600e1f8 <col:10, col:11> 'const char' lvalue prefix '*' cannot overflow
    | |   `-ImplicitCastExpr 0x12600e1e0 <col:11> 'const char *' <LValueToRValue>
    | |     `-DeclRefExpr 0x12600e1c0 <col:11> 'const char *' lvalue ParmVar 0x12600dda8 'what' 'const char *'
    | |-UnaryOperator 0x12600e248 <col:17, col:21> 'const char *' postfix '++'
    | | `-DeclRefExpr 0x12600e228 <col:17> 'const char *' lvalue ParmVar 0x12600dda8 'what' 'const char *'
    | `-CompoundStmt 0x125923290 <col:25, line:52:3>
    |   `-SwitchStmt 0x12600e2e0 <line:5:5, line:51:5>
    |     |-ImplicitCastExpr 0x12600e2c8 <line:5:13, col:14> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x12600e2b0 <col:13, col:14> 'char' <LValueToRValue>
    |     |   `-UnaryOperator 0x12600e298 <col:13, col:14> 'const char' lvalue prefix '*' cannot overflow
    |     |     `-ImplicitCastExpr 0x12600e280 <col:14> 'const char *' <LValueToRValue>
    |     |       `-DeclRefExpr 0x12600e260 <col:14> 'const char *' lvalue ParmVar 0x12600dda8 'what' 'const char *'
    |     `-CompoundStmt 0x125923240 <col:20, line:51:5>
    |       |-CaseStmt 0x12600e338 <line:6:7, line:9:7>
    |       | |-ConstantExpr 0x12600e320 <line:6:12> 'int'
    |       | | `-CharacterLiteral 0x12600e308 <col:12> 'int' 83
    |       | `-CompoundStmt 0x126027b78 <col:17, line:9:7>
    |       |   |-CallExpr 0x126027b40 <line:7:9, col:23> '<dependent type>' contains-errors
    |       |   | |-DeclRefExpr 0x126027ae0 <col:9> 'int ()' Function 0x126027a28 'funcinfo' 'int ()'
    |       |   | |-RecoveryExpr 0x126027b00 <col:18> '<dependent type>' contains-errors lvalue
    |       |   | `-RecoveryExpr 0x126027b20 <col:22> '<dependent type>' contains-errors lvalue
    |       |   `-BreakStmt 0x126027b70 <line:8:9>
    |       |-CaseStmt 0x126027bc8 <line:10:7, line:13:7>
    |       | |-ConstantExpr 0x126027bb0 <line:10:12> 'int'
    |       | | `-CharacterLiteral 0x126027b98 <col:12> 'int' 108
    |       | `-CompoundStmt 0x126028000 <col:17, line:13:7>
    |       |   |-BinaryOperator 0x126027fd8 <line:11:9, col:69> '<dependent type>' contains-errors '='
    |       |   | |-CXXDependentScopeMemberExpr 0x126027c38 <col:9, col:13> '<dependent type>' contains-errors lvalue ->currentline
    |       |   | | `-RecoveryExpr 0x126027c10 <col:9> '<dependent type>' contains-errors lvalue
    |       |   | |   `-DeclRefExpr 0x126027bf0 <col:9> 'int *' lvalue ParmVar 0x12600de28 'ar' 'int *'
    |       |   | `-ConditionalOperator 0x126027fa8 <col:27, col:69> '<dependent type>' contains-errors
    |       |   |   |-ParenExpr 0x126027e08 <col:27, col:43> 'int' contains-errors
    |       |   |   | `-BinaryOperator 0x126027de8 <col:28, col:42> 'int' contains-errors '&&'
    |       |   |   |   |-RecoveryExpr 0x126027c80 <col:28> '<dependent type>' contains-errors lvalue
    |       |   |   |   `-CallExpr 0x126027dc0 <col:34, col:42> '<dependent type>' contains-errors
    |       |   |   |     |-DeclRefExpr 0x126027d80 <col:34> 'int ()' Function 0x126027cc8 'isLua' 'int ()'
    |       |   |   |     `-RecoveryExpr 0x126027da0 <col:40> '<dependent type>' contains-errors lvalue
    |       |   |   |-CallExpr 0x126027f48 <col:47, col:64> '<dependent type>' contains-errors
    |       |   |   | |-DeclRefExpr 0x126027f08 <col:47> 'int ()' Function 0x126027e50 'getcurrentline' 'int ()'
    |       |   |   | `-RecoveryExpr 0x126027f28 <col:62> '<dependent type>' contains-errors lvalue
    |       |   |   `-UnaryOperator 0x126027f90 <col:68, col:69> 'int' prefix '-'
    |       |   |     `-IntegerLiteral 0x126027f70 <col:69> 'int' 1
    |       |   `-BreakStmt 0x126027ff8 <line:12:9>
    |       |-CaseStmt 0x126028050 <line:14:7, line:25:7>
    |       | |-ConstantExpr 0x126028038 <line:14:12> 'int'
    |       | | `-CharacterLiteral 0x126028020 <col:12> 'int' 117
    |       | `-CompoundStmt 0x1260288e0 <col:17, line:25:7>
    |       |   |-IfStmt 0x1260288a8 <line:16:9, line:23:9> has_else
    |       |   | |-CallExpr 0x126028350 <line:16:13, col:27> '<dependent type>' contains-errors
    |       |   | | |-DeclRefExpr 0x126028310 <col:13> 'int ()' Function 0x126028258 'noLuaClosure' 'int ()'
    |       |   | | `-RecoveryExpr 0x126028330 <col:26> '<dependent type>' contains-errors lvalue
    |       |   | |-CompoundStmt 0x126028518 <col:30, line:19:9>
    |       |   | | |-BinaryOperator 0x126028428 <line:17:11, col:26> '<dependent type>' contains-errors '='
    |       |   | | | |-CXXDependentScopeMemberExpr 0x1260283c0 <col:11, col:15> '<dependent type>' contains-errors lvalue ->isvararg
    |       |   | | | | `-RecoveryExpr 0x126028398 <col:11> '<dependent type>' contains-errors lvalue
    |       |   | | | |   `-DeclRefExpr 0x126028378 <col:11> 'int *' lvalue ParmVar 0x12600de28 'ar' 'int *'
    |       |   | | | `-IntegerLiteral 0x126028408 <col:26> 'int' 1
    |       |   | | `-BinaryOperator 0x1260284f8 <line:18:11, col:25> '<dependent type>' contains-errors '='
    |       |   | |   |-CXXDependentScopeMemberExpr 0x126028490 <col:11, col:15> '<dependent type>' contains-errors lvalue ->nparams
    |       |   | |   | `-RecoveryExpr 0x126028468 <col:11> '<dependent type>' contains-errors lvalue
    |       |   | |   |   `-DeclRefExpr 0x126028448 <col:11> 'int *' lvalue ParmVar 0x12600de28 'ar' 'int *'
    |       |   | |   `-IntegerLiteral 0x1260284d8 <col:25> 'int' 0
    |       |   | `-CompoundStmt 0x126028888 <line:20:14, line:23:9>
    |       |   |   |-BinaryOperator 0x1260286c0 <line:21:11, col:34> '<dependent type>' contains-errors '='
    |       |   |   | |-CXXDependentScopeMemberExpr 0x126028580 <col:11, col:15> '<dependent type>' contains-errors lvalue ->isvararg
    |       |   |   | | `-RecoveryExpr 0x126028558 <col:11> '<dependent type>' contains-errors lvalue
    |       |   |   | |   `-DeclRefExpr 0x126028538 <col:11> 'int *' lvalue ParmVar 0x12600de28 'ar' 'int *'
    |       |   |   | `-CXXDependentScopeMemberExpr 0x126028678 <col:26, col:34> '<dependent type>' contains-errors lvalue ->is_vararg
    |       |   |   |   `-CXXDependentScopeMemberExpr 0x126028630 <col:26, col:31> '<dependent type>' contains-errors lvalue .p
    |       |   |   |     `-CXXDependentScopeMemberExpr 0x1260285e8 <col:26, col:29> '<dependent type>' contains-errors lvalue ->l
    |       |   |   |       `-RecoveryExpr 0x1260285c8 <col:26> '<dependent type>' contains-errors lvalue
    |       |   |   `-BinaryOperator 0x126028868 <line:22:11, col:33> '<dependent type>' contains-errors '='
    |       |   |     |-CXXDependentScopeMemberExpr 0x126028728 <col:11, col:15> '<dependent type>' contains-errors lvalue ->nparams
    |       |   |     | `-RecoveryExpr 0x126028700 <col:11> '<dependent type>' contains-errors lvalue
    |       |   |     |   `-DeclRefExpr 0x1260286e0 <col:11> 'int *' lvalue ParmVar 0x12600de28 'ar' 'int *'
    |       |   |     `-CXXDependentScopeMemberExpr 0x126028820 <col:25, col:33> '<dependent type>' contains-errors lvalue ->numparams
    |       |   |       `-CXXDependentScopeMemberExpr 0x1260287d8 <col:25, col:30> '<dependent type>' contains-errors lvalue .p
    |       |   |         `-CXXDependentScopeMemberExpr 0x126028790 <col:25, col:28> '<dependent type>' contains-errors lvalue ->l
    |       |   |           `-RecoveryExpr 0x126028770 <col:25> '<dependent type>' contains-errors lvalue
    |       |   `-BreakStmt 0x1260288d8 <line:24:9>
    |       |-CaseStmt 0x126028930 <line:26:7, line:29:7>
    |       | |-ConstantExpr 0x126028918 <line:26:12> 'int'
    |       | | `-CharacterLiteral 0x126028900 <col:12> 'int' 116
    |       | `-CompoundStmt 0x1260293e8 <col:17, line:29:7>
    |       |   |-BinaryOperator 0x1260293c0 <line:27:9, col:62> '<dependent type>' contains-errors '='
    |       |   | |-CXXDependentScopeMemberExpr 0x1260289a0 <col:9, col:13> '<dependent type>' contains-errors lvalue ->istailcall
    |       |   | | `-RecoveryExpr 0x126028978 <col:9> '<dependent type>' contains-errors lvalue
    |       |   | |   `-DeclRefExpr 0x126028958 <col:9> 'int *' lvalue ParmVar 0x12600de28 'ar' 'int *'
    |       |   | `-ConditionalOperator 0x126029390 <col:26, col:62> '<dependent type>' contains-errors
    |       |   |   |-ParenExpr 0x126029220 <col:26, col:29> '<dependent type>' contains-errors lvalue
    |       |   |   | `-RecoveryExpr 0x126029200 <col:27> '<dependent type>' contains-errors lvalue
    |       |   |   |-BinaryOperator 0x126029370 <col:33, col:50> '<dependent type>' contains-errors '&'
    |       |   |   | |-CXXDependentScopeMemberExpr 0x126029260 <col:33, col:37> '<dependent type>' contains-errors lvalue ->callstatus
    |       |   |   | | `-RecoveryExpr 0x126029240 <col:33> '<dependent type>' contains-errors lvalue
    |       |   |   | `-RecoveryExpr 0x126029350 <col:50> '<dependent type>' contains-errors lvalue
    |       |   |   `-IntegerLiteral 0x1260292e0 <col:62> 'int' 0
    |       |   `-BreakStmt 0x1260293e0 <line:28:9>
    |       |-CaseStmt 0x126029438 <line:30:7, line:37:7>
    |       | |-ConstantExpr 0x126029420 <line:30:12> 'int'
    |       | | `-CharacterLiteral 0x126029408 <col:12> 'int' 110
    |       | `-CompoundStmt 0x126029a48 <col:17, line:37:7>
    |       |   |-BinaryOperator 0x1260296e8 <line:31:9, col:52> '<dependent type>' contains-errors '='
    |       |   | |-CXXDependentScopeMemberExpr 0x1260294a8 <col:9, col:13> '<dependent type>' contains-errors lvalue ->namewhat
    |       |   | | `-RecoveryExpr 0x126029480 <col:9> '<dependent type>' contains-errors lvalue
    |       |   | |   `-DeclRefExpr 0x126029460 <col:9> 'int *' lvalue ParmVar 0x12600de28 'ar' 'int *'
    |       |   | `-CallExpr 0x1260296b0 <col:24, col:52> '<dependent type>' contains-errors
    |       |   |   |-DeclRefExpr 0x1260295d0 <col:24> 'int ()' Function 0x126029518 'getfuncname' 'int ()'
    |       |   |   |-RecoveryExpr 0x1260295f0 <col:36> '<dependent type>' contains-errors lvalue
    |       |   |   |-RecoveryExpr 0x126029610 <col:39> '<dependent type>' contains-errors lvalue
    |       |   |   `-UnaryOperator 0x126029698 <col:43, col:48> '<dependent type>' contains-errors prefix '&' cannot overflow
    |       |   |     `-CXXDependentScopeMemberExpr 0x126029650 <col:44, col:48> '<dependent type>' contains-errors lvalue ->name
    |       |   |       `-RecoveryExpr 0x126029630 <col:44> '<dependent type>' contains-errors lvalue
    |       |   |-IfStmt 0x126029a20 <line:32:9, line:35:9>
    |       |   | |-BinaryOperator 0x1260297c8 <line:32:13, col:29> 'int' contains-errors '=='
    |       |   | | |-CXXDependentScopeMemberExpr 0x126029728 <col:13, col:17> '<dependent type>' contains-errors lvalue ->namewhat
    |       |   | | | `-RecoveryExpr 0x126029708 <col:13> '<dependent type>' contains-errors lvalue
    |       |   | | `-RecoveryExpr 0x1260297a8 <col:29> '<dependent type>' contains-errors lvalue
    |       |   | `-CompoundStmt 0x126029a00 <col:35, line:35:9>
    |       |   |   |-BinaryOperator 0x1260298d8 <line:33:11, col:26> '<dependent type>' contains-errors '='
    |       |   |   | |-CXXDependentScopeMemberExpr 0x126029830 <col:11, col:15> '<dependent type>' contains-errors lvalue ->namewhat
    |       |   |   | | `-RecoveryExpr 0x126029808 <col:11> '<dependent type>' contains-errors lvalue
    |       |   |   | |   `-DeclRefExpr 0x1260297e8 <col:11> 'int *' lvalue ParmVar 0x12600de28 'ar' 'int *'
    |       |   |   | `-StringLiteral 0x1260298c0 <col:26> 'char[1]' lvalue ""
    |       |   |   `-BinaryOperator 0x1260299e0 <line:34:11, col:22> '<dependent type>' contains-errors '='
    |       |   |     |-CXXDependentScopeMemberExpr 0x126029940 <col:11, col:15> '<dependent type>' contains-errors lvalue ->name
    |       |   |     | `-RecoveryExpr 0x126029918 <col:11> '<dependent type>' contains-errors lvalue
    |       |   |     |   `-DeclRefExpr 0x1260298f8 <col:11> 'int *' lvalue ParmVar 0x12600de28 'ar' 'int *'
    |       |   |     `-RecoveryExpr 0x1260299c0 <col:22> '<dependent type>' contains-errors lvalue
    |       |   `-BreakStmt 0x126029a40 <line:36:9>
    |       |-CaseStmt 0x126029aa0 <line:38:7, line:46:7>
    |       | |-ConstantExpr 0x126029a88 <line:38:12> 'int'
    |       | | `-CharacterLiteral 0x126029a70 <col:12> 'int' 114
    |       | `-CompoundStmt 0x12602a0e0 <col:17, line:46:7>
    |       |   |-IfStmt 0x12602a0a8 <line:39:9, line:44:9> has_else
    |       |   | |-RecoveryExpr 0x126029bc0 <line:39:13, col:55> '_Bool' contains-errors
    |       |   | |-BinaryOperator 0x126029d18 <line:40:11, col:43> '<dependent type>' contains-errors '='
    |       |   | | |-CXXDependentScopeMemberExpr 0x126029c28 <col:11, col:15> '<dependent type>' contains-errors lvalue ->ftransfer
    |       |   | | | `-RecoveryExpr 0x126029c00 <col:11> '<dependent type>' contains-errors lvalue
    |       |   | | |   `-DeclRefExpr 0x126029be0 <col:11> 'int *' lvalue ParmVar 0x12600de28 'ar' 'int *'
    |       |   | | `-BinaryOperator 0x126029cf8 <col:27, col:43> '<dependent type>' contains-errors '='
    |       |   | |   |-CXXDependentScopeMemberExpr 0x126029c90 <col:27, col:31> '<dependent type>' contains-errors lvalue ->ntransfer
    |       |   | |   | `-RecoveryExpr 0x126029c70 <col:27> '<dependent type>' contains-errors lvalue
    |       |   | |   `-IntegerLiteral 0x126029cd8 <col:43> 'int' 0
    |       |   | `-CompoundStmt 0x12602a088 <line:41:14, line:44:9>
    |       |   |   |-BinaryOperator 0x126029ec0 <line:42:11, col:47> '<dependent type>' contains-errors '='
    |       |   |   | |-CXXDependentScopeMemberExpr 0x126029d80 <col:11, col:15> '<dependent type>' contains-errors lvalue ->ftransfer
    |       |   |   | | `-RecoveryExpr 0x126029d58 <col:11> '<dependent type>' contains-errors lvalue
    |       |   |   | |   `-DeclRefExpr 0x126029d38 <col:11> 'int *' lvalue ParmVar 0x12600de28 'ar' 'int *'
    |       |   |   | `-CXXDependentScopeMemberExpr 0x126029e78 <col:27, col:47> '<dependent type>' contains-errors lvalue .ftransfer
    |       |   |   |   `-CXXDependentScopeMemberExpr 0x126029e30 <col:27, col:34> '<dependent type>' contains-errors lvalue .transferinfo
    |       |   |   |     `-CXXDependentScopeMemberExpr 0x126029de8 <col:27, col:31> '<dependent type>' contains-errors lvalue ->u2
    |       |   |   |       `-RecoveryExpr 0x126029dc8 <col:27> '<dependent type>' contains-errors lvalue
    |       |   |   `-BinaryOperator 0x12602a068 <line:43:11, col:47> '<dependent type>' contains-errors '='
    |       |   |     |-CXXDependentScopeMemberExpr 0x126029f28 <col:11, col:15> '<dependent type>' contains-errors lvalue ->ntransfer
    |       |   |     | `-RecoveryExpr 0x126029f00 <col:11> '<dependent type>' contains-errors lvalue
    |       |   |     |   `-DeclRefExpr 0x126029ee0 <col:11> 'int *' lvalue ParmVar 0x12600de28 'ar' 'int *'
    |       |   |     `-CXXDependentScopeMemberExpr 0x12602a020 <col:27, col:47> '<dependent type>' contains-errors lvalue .ntransfer
    |       |   |       `-CXXDependentScopeMemberExpr 0x126029fd8 <col:27, col:34> '<dependent type>' contains-errors lvalue .transferinfo
    |       |   |         `-CXXDependentScopeMemberExpr 0x126029f90 <col:27, col:31> '<dependent type>' contains-errors lvalue ->u2
    |       |   |           `-RecoveryExpr 0x126029f70 <col:27> '<dependent type>' contains-errors lvalue
    |       |   `-BreakStmt 0x12602a0d8 <line:45:9>
    |       |-CaseStmt 0x12602a130 <line:47:7, line:49:9>
    |       | |-ConstantExpr 0x12602a118 <line:47:12> 'int'
    |       | | `-CharacterLiteral 0x12602a100 <col:12> 'int' 76
    |       | `-CaseStmt 0x12602a188 <line:48:7, line:49:9>
    |       |   |-ConstantExpr 0x12602a170 <line:48:12> 'int'
    |       |   | `-CharacterLiteral 0x12602a158 <col:12> 'int' 102
    |       |   `-BreakStmt 0x12602a1b0 <line:49:9>
    |       `-DefaultStmt 0x125923220 <line:50:7, col:25>
    |         `-BinaryOperator 0x125923200 <col:16, col:25> 'int' '='
    |           |-DeclRefExpr 0x12602a1b8 <col:16> 'int' lvalue Var 0x12600e120 'status' 'int'
    |           `-IntegerLiteral 0x12602a1d8 <col:25> 'int' 0
    `-ReturnStmt 0x125923318 <line:53:3, col:10>
      `-ImplicitCastExpr 0x125923300 <col:10> 'int' <LValueToRValue>
        `-DeclRefExpr 0x1259232e0 <col:10> 'int' lvalue Var 0x12600e120 'status' 'int'
