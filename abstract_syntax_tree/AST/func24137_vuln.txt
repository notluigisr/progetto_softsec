TranslationUnitDecl 0x141855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1418564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x141855bd0 '__int128'
|-TypedefDecl 0x141856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x141855bf0 'unsigned __int128'
|-TypedefDecl 0x14200be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x14200bc00 'struct __NSConstantString_tag'
|   `-Record 0x141856580 '__NSConstantString_tag'
|-TypedefDecl 0x14200be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x141855d90 '__SVInt8_t'
|-TypedefDecl 0x14200bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x141855db0 '__SVInt16_t'
|-TypedefDecl 0x14200bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x141855dd0 '__SVInt32_t'
|-TypedefDecl 0x14200bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x141855df0 '__SVInt64_t'
|-TypedefDecl 0x14200c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x141855e10 '__SVUint8_t'
|-TypedefDecl 0x14200c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x141855e30 '__SVUint16_t'
|-TypedefDecl 0x14200c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x141855e50 '__SVUint32_t'
|-TypedefDecl 0x14200c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x141855e70 '__SVUint64_t'
|-TypedefDecl 0x14200c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x141855e90 '__SVFloat16_t'
|-TypedefDecl 0x14200c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x141855eb0 '__SVFloat32_t'
|-TypedefDecl 0x14200c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x141855ed0 '__SVFloat64_t'
|-TypedefDecl 0x14200c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x141855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x14200c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x141855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x14200c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x141855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x14200c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x141855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x14200c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x141855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x14200c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x141855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x14200c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x141855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x14200c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x141855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x14200c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x141855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x14200c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x141856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x14200c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x141856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x14200c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x141856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x14200c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x141856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x14200c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x141856090 '__clang_svint8x3_t'
|-TypedefDecl 0x14200c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1418560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x14200c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1418560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x14200c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1418560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x14200c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x141856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x14200ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x141856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x14200cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x141856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x14200cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x141856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x14200cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x141856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x14200d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1418561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x14200d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1418561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x14200d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1418561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x14200d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x141856210 '__clang_svint8x4_t'
|-TypedefDecl 0x14200d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x141856230 '__clang_svint16x4_t'
|-TypedefDecl 0x14200d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x141856250 '__clang_svint32x4_t'
|-TypedefDecl 0x14200d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x141856270 '__clang_svint64x4_t'
|-TypedefDecl 0x14200d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x141856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x14200d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1418562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x14200d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1418562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x14200d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1418562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x14200d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x141856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x14200d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x141856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x14200d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x141856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x14200d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x141856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x14200da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x141856390 '__SVBool_t'
|-TypedefDecl 0x14200da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1418563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x14200dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1418563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x14200db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1418563f0 '__SVCount_t'
|-TypedefDecl 0x14200dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x14200dbb0 'char *'
|   `-BuiltinType 0x1418556b0 'char'
|-TypedefDecl 0x14200dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x14200dbb0 'char *'
|   `-BuiltinType 0x1418556b0 'char'
`-FunctionDecl 0x14200df18 <dataset_diviso_filec/func24137_vuln.c:1:1, line:57:1> line:1:1 invalid ip_printts 'int (int *, const char *, int)'
  |-ParmVarDecl 0x14200dd28 <col:12, col:32> col:32 invalid ndo 'int *'
  |-ParmVarDecl 0x14200dda8 <line:2:12, col:35> col:35 used cp 'const char *' register
  |-ParmVarDecl 0x14200de28 <col:39, col:45> col:45 invalid length 'int'
  `-CompoundStmt 0x14202a5d0 <line:3:1, line:57:1>
    |-DeclStmt 0x14200e058 <line:4:2, col:20>
    | `-VarDecl 0x14200dff0 <col:2, col:17> col:17 referenced invalid ptr 'int' register
    |-DeclStmt 0x14200e0f0 <line:5:2, col:20>
    | `-VarDecl 0x14200e088 <col:2, col:17> col:17 referenced invalid len 'int' register
    |-DeclStmt 0x14200e188 <line:6:2, col:12>
    | `-VarDecl 0x14200e120 <col:2, col:6> col:6 used hoplen 'int'
    |-DeclStmt 0x14200e220 <line:7:2, col:18>
    | `-VarDecl 0x14200e1b8 <col:2, col:14> col:14 used type 'const char *'
    |-IfStmt 0x142027578 <line:9:2, line:12:2>
    | |-BinaryOperator 0x14200e278 <line:9:6, col:15> 'int' contains-errors '<'
    | | |-RecoveryExpr 0x14200e238 <col:6> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x14200e258 <col:15> 'int' 4
    | `-CompoundStmt 0x142027558 <col:18, line:12:2>
    |   |-CallExpr 0x142027520 <line:10:3, col:32> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x142027400 <col:3> 'int ()' Function 0x14200e338 'ND_PRINT' 'int ()'
    |   | `-ParenExpr 0x142027500 <col:12, col:31> '<dependent type>' contains-errors
    |   |   `-BinaryOperator 0x1420274e0 <col:13, col:25> '<dependent type>' contains-errors ','
    |   |     |-BinaryOperator 0x1420274a0 <col:13, col:18> 'char[4]' contains-errors ','
    |   |     | |-RecoveryExpr 0x142027420 <col:13> '<dependent type>' contains-errors lvalue
    |   |     | `-StringLiteral 0x142027480 <col:18> 'char[4]' lvalue "STR"
    |   |     `-RecoveryExpr 0x1420274c0 <col:25> '<dependent type>' contains-errors lvalue
    |   `-ReturnStmt 0x142027548 <line:11:3>
    |-CallExpr 0x142027638 <line:13:2, col:23> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x142027598 <col:2> 'int ()' Function 0x14200e338 'ND_PRINT' 'int ()'
    | `-ParenExpr 0x142027618 <col:11, col:22> 'char[4]' contains-errors
    |   `-BinaryOperator 0x1420275f8 <col:12, col:17> 'char[4]' contains-errors ','
    |     |-RecoveryExpr 0x1420275b8 <col:12> '<dependent type>' contains-errors lvalue
    |     `-StringLiteral 0x1420275d8 <col:17> 'char[4]' lvalue "STR"
    |-IfStmt 0x142027ae8 <line:15:2, line:16:32>
    | |-BinaryOperator 0x1420279c0 <line:15:6, col:30> '<dependent type>' contains-errors '&'
    | | |-ParenExpr 0x142027908 <col:6, col:17> '<dependent type>' contains-errors
    | | | `-BinaryOperator 0x1420278e8 <col:7, col:16> '<dependent type>' contains-errors '-'
    | | |   |-RecoveryExpr 0x1420278a8 <col:7> '<dependent type>' contains-errors lvalue
    | | |   `-IntegerLiteral 0x1420278c8 <col:16> 'int' 4
    | | `-ParenExpr 0x1420279a0 <col:21, col:30> 'int'
    | |   `-BinaryOperator 0x142027980 <col:22, col:29> 'int' '-'
    | |     |-ImplicitCastExpr 0x142027968 <col:22> 'int' <LValueToRValue>
    | |     | `-DeclRefExpr 0x142027928 <col:22> 'int' lvalue Var 0x14200e120 'hoplen' 'int'
    | |     `-IntegerLiteral 0x142027948 <col:29> 'int' 1
    | `-CallExpr 0x142027ac0 <line:16:3, col:32> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x1420279e0 <col:3> 'int ()' Function 0x14200e338 'ND_PRINT' 'int ()'
    |   `-ParenExpr 0x142027aa0 <col:12, col:31> '<dependent type>' contains-errors
    |     `-BinaryOperator 0x142027a80 <col:13, col:25> '<dependent type>' contains-errors ','
    |       |-BinaryOperator 0x142027a40 <col:13, col:18> 'char[4]' contains-errors ','
    |       | |-RecoveryExpr 0x142027a00 <col:13> '<dependent type>' contains-errors lvalue
    |       | `-StringLiteral 0x142027a20 <col:18> 'char[4]' lvalue "STR"
    |       `-RecoveryExpr 0x142027a60 <col:25> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x142027c38 <line:17:2, col:16> '<dependent type>' contains-errors '='
    | |-RecoveryExpr 0x142027b28 <col:2> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x142027b08 <col:2> 'int' lvalue Var 0x14200dff0 'ptr' 'int'
    | `-BinaryOperator 0x142027c18 <col:8, col:16> 'int' '-'
    |   |-ImplicitCastExpr 0x142027c00 <col:8, col:12> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x142027be8 <col:8, col:12> 'char' <LValueToRValue>
    |   |   `-ArraySubscriptExpr 0x142027ba8 <col:8, col:12> 'const char' lvalue
    |   |     |-ImplicitCastExpr 0x142027b90 <col:8> 'const char *' <LValueToRValue>
    |   |     | `-DeclRefExpr 0x142027b50 <col:8> 'const char *' lvalue ParmVar 0x14200dda8 'cp' 'const char *'
    |   |     `-IntegerLiteral 0x142027b70 <col:11> 'int' 2
    |   `-IntegerLiteral 0x142027bc8 <col:16> 'int' 1
    |-BinaryOperator 0x142027cc0 <line:18:2, col:8> '<dependent type>' contains-errors '='
    | |-RecoveryExpr 0x142027c78 <col:2> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x142027c58 <col:2> 'int' lvalue Var 0x14200e088 'len' 'int'
    | `-IntegerLiteral 0x142027ca0 <col:8> 'int' 0
    |-IfStmt 0x1420280d8 <line:19:2, line:20:31>
    | |-BinaryOperator 0x142027f58 <line:19:6, col:60> 'int' contains-errors '||'
    | | |-BinaryOperator 0x142027e98 <col:6, col:40> 'int' contains-errors '||'
    | | | |-BinaryOperator 0x142027d20 <col:6, col:12> 'int' contains-errors '<'
    | | | | |-RecoveryExpr 0x142027ce0 <col:6> '<dependent type>' contains-errors lvalue
    | | | | `-IntegerLiteral 0x142027d00 <col:12> 'int' 4
    | | | `-ParenExpr 0x142027e78 <col:17, col:40> '<dependent type>' contains-errors
    | | |   `-BinaryOperator 0x142027e58 <col:18, col:39> '<dependent type>' contains-errors '&'
    | | |     |-ParenExpr 0x142027da0 <col:18, col:26> '<dependent type>' contains-errors
    | | |     | `-BinaryOperator 0x142027d80 <col:19, col:25> '<dependent type>' contains-errors '-'
    | | |     |   |-RecoveryExpr 0x142027d40 <col:19> '<dependent type>' contains-errors lvalue
    | | |     |   `-IntegerLiteral 0x142027d60 <col:25> 'int' 4
    | | |     `-ParenExpr 0x142027e38 <col:30, col:39> 'int'
    | | |       `-BinaryOperator 0x142027e18 <col:31, col:38> 'int' '-'
    | | |         |-ImplicitCastExpr 0x142027e00 <col:31> 'int' <LValueToRValue>
    | | |         | `-DeclRefExpr 0x142027dc0 <col:31> 'int' lvalue Var 0x14200e120 'hoplen' 'int'
    | | |         `-IntegerLiteral 0x142027de0 <col:38> 'int' 1
    | | `-BinaryOperator 0x142027f38 <col:45, col:60> 'int' contains-errors '>'
    | |   |-RecoveryExpr 0x142027eb8 <col:45> '<dependent type>' contains-errors lvalue
    | |   `-BinaryOperator 0x142027f18 <col:51, col:60> '<dependent type>' contains-errors '+'
    | |     |-RecoveryExpr 0x142027ed8 <col:51> '<dependent type>' contains-errors lvalue
    | |     `-IntegerLiteral 0x142027ef8 <col:60> 'int' 1
    | `-CallExpr 0x1420280b0 <line:20:3, col:31> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x142027f78 <col:3> 'int ()' Function 0x14200e338 'ND_PRINT' 'int ()'
    |   `-ParenExpr 0x142028090 <col:12, col:30> 'const char' contains-errors
    |     `-BinaryOperator 0x142028070 <col:13, col:29> 'const char' contains-errors ','
    |       |-BinaryOperator 0x142027fd8 <col:13, col:18> 'char[4]' contains-errors ','
    |       | |-RecoveryExpr 0x142027f98 <col:13> '<dependent type>' contains-errors lvalue
    |       | `-StringLiteral 0x142027fb8 <col:18> 'char[4]' lvalue "STR"
    |       `-ArraySubscriptExpr 0x142028050 <col:25, col:29> 'const char' lvalue
    |         |-ImplicitCastExpr 0x142028038 <col:25> 'const char *' <LValueToRValue>
    |         | `-DeclRefExpr 0x142027ff8 <col:25> 'const char *' lvalue ParmVar 0x14200dda8 'cp' 'const char *'
    |         `-IntegerLiteral 0x142028018 <col:28> 'int' 2
    |-SwitchStmt 0x1420281e0 <line:21:2, line:39:2>
    | |-BinaryOperator 0x1420281c0 <line:21:10, col:16> 'int' '&'
    | | |-ImplicitCastExpr 0x1420281a8 <col:10, col:14> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x142028190 <col:10, col:14> 'char' <LValueToRValue>
    | | |   `-ArraySubscriptExpr 0x142028150 <col:10, col:14> 'const char' lvalue
    | | |     |-ImplicitCastExpr 0x142028138 <col:10> 'const char *' <LValueToRValue>
    | | |     | `-DeclRefExpr 0x1420280f8 <col:10> 'const char *' lvalue ParmVar 0x14200dda8 'cp' 'const char *'
    | | |     `-IntegerLiteral 0x142028118 <col:13> 'int' 3
    | | `-IntegerLiteral 0x142028170 <col:16> 'int' 15
    | `-CompoundStmt 0x142029298 <col:21, line:39:2>
    |   |-CallExpr 0x1420282c0 <line:23:3, col:24> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x142028220 <col:3> 'int ()' Function 0x14200e338 'ND_PRINT' 'int ()'
    |   | `-ParenExpr 0x1420282a0 <col:12, col:23> 'char[4]' contains-errors
    |   |   `-BinaryOperator 0x142028280 <col:13, col:18> 'char[4]' contains-errors ','
    |   |     |-RecoveryExpr 0x142028240 <col:13> '<dependent type>' contains-errors lvalue
    |   |     `-StringLiteral 0x142028260 <col:18> 'char[4]' lvalue "STR"
    |   |-BreakStmt 0x1420282e8 <line:24:3>
    |   |-CallExpr 0x1420283a8 <line:26:3, col:24> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x142028308 <col:3> 'int ()' Function 0x14200e338 'ND_PRINT' 'int ()'
    |   | `-ParenExpr 0x142028388 <col:12, col:23> 'char[4]' contains-errors
    |   |   `-BinaryOperator 0x142028368 <col:13, col:18> 'char[4]' contains-errors ','
    |   |     |-RecoveryExpr 0x142028328 <col:13> '<dependent type>' contains-errors lvalue
    |   |     `-StringLiteral 0x142028348 <col:18> 'char[4]' lvalue "STR"
    |   |-BreakStmt 0x1420283d0 <line:27:3>
    |   |-CaseStmt 0x142028e18 <line:30:2, line:31:24>
    |   | |-ConstantExpr 0x142028e00 <line:30:7> 'int'
    |   | | `-IntegerLiteral 0x1420283d8 <col:7> 'int' 2
    |   | `-CallExpr 0x142028ee0 <line:31:3, col:24> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x142028e40 <col:3> 'int ()' Function 0x14200e338 'ND_PRINT' 'int ()'
    |   |   `-ParenExpr 0x142028ec0 <col:12, col:23> 'char[4]' contains-errors
    |   |     `-BinaryOperator 0x142028ea0 <col:13, col:18> 'char[4]' contains-errors ','
    |   |       |-RecoveryExpr 0x142028e60 <col:13> '<dependent type>' contains-errors lvalue
    |   |       `-StringLiteral 0x142028e80 <col:18> 'char[4]' lvalue "STR"
    |   |-BreakStmt 0x142028f08 <line:32:3>
    |   |-CaseStmt 0x142028f48 <line:33:2, line:34:24>
    |   | |-ConstantExpr 0x142028f30 <line:33:7> 'int'
    |   | | `-IntegerLiteral 0x142028f10 <col:7> 'int' 3
    |   | `-CallExpr 0x142029010 <line:34:3, col:24> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x142028f70 <col:3> 'int ()' Function 0x14200e338 'ND_PRINT' 'int ()'
    |   |   `-ParenExpr 0x142028ff0 <col:12, col:23> 'char[4]' contains-errors
    |   |     `-BinaryOperator 0x142028fd0 <col:13, col:18> 'char[4]' contains-errors ','
    |   |       |-RecoveryExpr 0x142028f90 <col:13> '<dependent type>' contains-errors lvalue
    |   |       `-StringLiteral 0x142028fb0 <col:18> 'char[4]' lvalue "STR"
    |   |-BreakStmt 0x142029038 <line:35:3>
    |   |-DefaultStmt 0x142029210 <line:36:2, line:37:35>
    |   | `-CallExpr 0x1420291e8 <col:3, col:35> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x142029040 <col:3> 'int ()' Function 0x14200e338 'ND_PRINT' 'int ()'
    |   |   `-ParenExpr 0x1420291c8 <col:12, col:34> 'int' contains-errors
    |   |     `-BinaryOperator 0x1420291a8 <col:13, col:31> 'int' contains-errors ','
    |   |       |-BinaryOperator 0x1420290a0 <col:13, col:18> 'char[4]' contains-errors ','
    |   |       | |-RecoveryExpr 0x142029060 <col:13> '<dependent type>' contains-errors lvalue
    |   |       | `-StringLiteral 0x142029080 <col:18> 'char[4]' lvalue "STR"
    |   |       `-BinaryOperator 0x142029188 <col:25, col:31> 'int' '&'
    |   |         |-ImplicitCastExpr 0x142029170 <col:25, col:29> 'int' <IntegralCast>
    |   |         | `-ImplicitCastExpr 0x142029158 <col:25, col:29> 'char' <LValueToRValue>
    |   |         |   `-ArraySubscriptExpr 0x142029118 <col:25, col:29> 'const char' lvalue
    |   |         |     |-ImplicitCastExpr 0x142029100 <col:25> 'const char *' <LValueToRValue>
    |   |         |     | `-DeclRefExpr 0x1420290c0 <col:25> 'const char *' lvalue ParmVar 0x14200dda8 'cp' 'const char *'
    |   |         |     `-IntegerLiteral 0x1420290e0 <col:28> 'int' 3
    |   |         `-IntegerLiteral 0x142029138 <col:31> 'int' 15
    |   `-GotoStmt 0x142029280 <line:38:3, col:8> 'done' 0x142029230
    |-BinaryOperator 0x142029368 <line:41:2, col:9> 'const char *' '='
    | |-DeclRefExpr 0x1420292f8 <col:2> 'const char *' lvalue Var 0x14200e1b8 'type' 'const char *'
    | `-ImplicitCastExpr 0x142029350 <col:9> 'const char *' <NoOp>
    |   `-ImplicitCastExpr 0x142029338 <col:9> 'char *' <ArrayToPointerDecay>
    |     `-StringLiteral 0x142029318 <col:9> 'char[4]' lvalue "STR"
    |-ForStmt 0x142029d00 <line:42:2, line:48:2>
    | |-BinaryOperator 0x1420293c8 <line:42:7, col:13> '<dependent type>' contains-errors '='
    | | |-RecoveryExpr 0x142029388 <col:7> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x1420293a8 <col:13> 'int' 4
    | |-<<<NULL>>>
    | |-BinaryOperator 0x142029428 <col:16, col:22> 'int' contains-errors '<'
    | | |-RecoveryExpr 0x1420293e8 <col:16> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x142029408 <col:22> '<dependent type>' contains-errors lvalue
    | |-CompoundAssignOperator 0x142029488 <col:30, col:37> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    | | |-RecoveryExpr 0x142029448 <col:30> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x142029468 <col:37> 'int' lvalue Var 0x14200e120 'hoplen' 'int'
    | `-CompoundStmt 0x142029cd8 <col:45, line:48:2>
    |   |-IfStmt 0x1420295a8 <line:43:3, line:44:11>
    |   | |-BinaryOperator 0x1420294f8 <line:43:7, col:14> 'int' contains-errors '=='
    |   | | |-RecoveryExpr 0x1420294b8 <col:7> '<dependent type>' contains-errors lvalue
    |   | | `-RecoveryExpr 0x1420294d8 <col:14> '<dependent type>' contains-errors lvalue
    |   | `-BinaryOperator 0x142029588 <line:44:4, col:11> 'const char *' '='
    |   |   |-DeclRefExpr 0x142029518 <col:4> 'const char *' lvalue Var 0x14200e1b8 'type' 'const char *'
    |   |   `-ImplicitCastExpr 0x142029570 <col:11> 'const char *' <NoOp>
    |   |     `-ImplicitCastExpr 0x142029558 <col:11> 'char *' <ArrayToPointerDecay>
    |   |       `-StringLiteral 0x142029538 <col:11> 'char[4]' lvalue "STR"
    |   |-CallExpr 0x142029c20 <line:45:3, line:46:56> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x1420295c8 <line:45:3> 'int ()' Function 0x14200e338 'ND_PRINT' 'int ()'
    |   | `-ParenExpr 0x142029c00 <col:12, line:46:55> '<dependent type>' contains-errors
    |   |   `-BinaryOperator 0x142029be0 <line:45:13, line:46:54> '<dependent type>' contains-errors ','
    |   |     |-BinaryOperator 0x1420298c0 <line:45:13, col:63> '<dependent type>' contains-errors ','
    |   |     | |-BinaryOperator 0x142029668 <col:13, col:25> 'const char *' contains-errors ','
    |   |     | | |-BinaryOperator 0x142029628 <col:13, col:18> 'char[4]' contains-errors ','
    |   |     | | | |-RecoveryExpr 0x1420295e8 <col:13> '<dependent type>' contains-errors lvalue
    |   |     | | | `-StringLiteral 0x142029608 <col:18> 'char[4]' lvalue "STR"
    |   |     | | `-DeclRefExpr 0x142029648 <col:25> 'const char *' lvalue Var 0x14200e1b8 'type' 'const char *'
    |   |     | `-CallExpr 0x142029898 <col:31, col:63> '<dependent type>' contains-errors
    |   |     |   |-DeclRefExpr 0x142029768 <col:31> 'int ()' Function 0x1420296b0 'EXTRACT_32BITS' 'int ()'
    |   |     |   `-UnaryOperator 0x142029880 <col:46, col:62> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   |     |     `-ArraySubscriptExpr 0x142029860 <col:47, col:62> '<dependent type>' contains-errors lvalue
    |   |     |       |-ImplicitCastExpr 0x142029848 <col:47> 'const char *' <LValueToRValue>
    |   |     |       | `-DeclRefExpr 0x142029788 <col:47> 'const char *' lvalue ParmVar 0x14200dda8 'cp' 'const char *'
    |   |     |       `-BinaryOperator 0x142029828 <col:50, col:61> '<dependent type>' contains-errors '-'
    |   |     |         |-BinaryOperator 0x1420297e8 <col:50, col:54> '<dependent type>' contains-errors '+'
    |   |     |         | |-RecoveryExpr 0x1420297a8 <col:50> '<dependent type>' contains-errors lvalue
    |   |     |         | `-DeclRefExpr 0x1420297c8 <col:54> 'int' lvalue Var 0x14200e120 'hoplen' 'int'
    |   |     |         `-IntegerLiteral 0x142029808 <col:61> 'int' 4
    |   |     `-ConditionalOperator 0x142029bb0 <line:46:10, col:54> '<dependent type>' contains-errors
    |   |       |-BinaryOperator 0x142029938 <col:10, col:18> 'int' '!='
    |   |       | |-ImplicitCastExpr 0x142029920 <col:10> 'int' <LValueToRValue>
    |   |       | | `-DeclRefExpr 0x1420298e0 <col:10> 'int' lvalue Var 0x14200e120 'hoplen' 'int'
    |   |       | `-IntegerLiteral 0x142029900 <col:18> 'int' 8
    |   |       |-StringLiteral 0x1420299a0 <col:22> 'char[1]' lvalue ""
    |   |       `-CallExpr 0x142029b80 <col:27, col:54> '<dependent type>' contains-errors
    |   |         |-DeclRefExpr 0x142029a98 <col:27> 'int ()' Function 0x1420299e0 'ipaddr_string' 'int ()'
    |   |         |-RecoveryExpr 0x142029ab8 <col:41> '<dependent type>' contains-errors lvalue
    |   |         `-UnaryOperator 0x142029b68 <col:46, col:53> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   |           `-ArraySubscriptExpr 0x142029b48 <col:47, col:53> '<dependent type>' contains-errors lvalue
    |   |             |-ImplicitCastExpr 0x142029b18 <col:47> 'const char *' <LValueToRValue>
    |   |             | `-DeclRefExpr 0x142029ad8 <col:47> 'const char *' lvalue ParmVar 0x14200dda8 'cp' 'const char *'
    |   |             `-ImplicitCastExpr 0x142029b30 <col:50> '<dependent type>' contains-errors <LValueToRValue>
    |   |               `-RecoveryExpr 0x142029af8 <col:50> '<dependent type>' contains-errors lvalue
    |   `-BinaryOperator 0x142029cb8 <line:47:3, col:10> 'const char *' '='
    |     |-DeclRefExpr 0x142029c48 <col:3> 'const char *' lvalue Var 0x14200e1b8 'type' 'const char *'
    |     `-ImplicitCastExpr 0x142029ca0 <col:10> 'const char *' <NoOp>
    |       `-ImplicitCastExpr 0x142029c88 <col:10> 'char *' <ArrayToPointerDecay>
    |         `-StringLiteral 0x142029c68 <col:10> 'char[4]' lvalue "STR"
    |-LabelStmt 0x14202a200 <line:50:1, line:51:23> 'done'
    | `-CallExpr 0x142029dd8 <col:2, col:23> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x142029d38 <col:2> 'int ()' Function 0x14200e338 'ND_PRINT' 'int ()'
    |   `-ParenExpr 0x142029db8 <col:11, col:22> 'char[4]' contains-errors
    |     `-BinaryOperator 0x142029d98 <col:12, col:17> 'char[4]' contains-errors ','
    |       |-RecoveryExpr 0x142029d58 <col:12> '<dependent type>' contains-errors lvalue
    |       `-StringLiteral 0x142029d78 <col:17> 'char[4]' lvalue "STR"
    `-IfStmt 0x14202a5a0 <line:53:2, line:56:24> has_else
      |-BinaryOperator 0x14202a2e8 <line:53:6, col:13> 'int' '>>'
      | |-ImplicitCastExpr 0x14202a2d0 <col:6, col:10> 'int' <IntegralCast>
      | | `-ImplicitCastExpr 0x14202a2b8 <col:6, col:10> 'char' <LValueToRValue>
      | |   `-ArraySubscriptExpr 0x14202a278 <col:6, col:10> 'const char' lvalue
      | |     |-ImplicitCastExpr 0x14202a260 <col:6> 'const char *' <LValueToRValue>
      | |     | `-DeclRefExpr 0x14202a220 <col:6> 'const char *' lvalue ParmVar 0x14200dda8 'cp' 'const char *'
      | |     `-IntegerLiteral 0x14202a240 <col:9> 'int' 3
      | `-IntegerLiteral 0x14202a298 <col:13> 'int' 4
      |-CallExpr 0x14202a4b0 <line:54:3, col:34> '<dependent type>' contains-errors
      | |-DeclRefExpr 0x14202a308 <col:3> 'int ()' Function 0x14200e338 'ND_PRINT' 'int ()'
      | `-ParenExpr 0x14202a490 <col:12, col:33> 'int' contains-errors
      |   `-BinaryOperator 0x14202a470 <col:13, col:32> 'int' contains-errors ','
      |     |-BinaryOperator 0x14202a368 <col:13, col:18> 'char[4]' contains-errors ','
      |     | |-RecoveryExpr 0x14202a328 <col:13> '<dependent type>' contains-errors lvalue
      |     | `-StringLiteral 0x14202a348 <col:18> 'char[4]' lvalue "STR"
      |     `-BinaryOperator 0x14202a450 <col:25, col:32> 'int' '>>'
      |       |-ImplicitCastExpr 0x14202a438 <col:25, col:29> 'int' <IntegralCast>
      |       | `-ImplicitCastExpr 0x14202a420 <col:25, col:29> 'char' <LValueToRValue>
      |       |   `-ArraySubscriptExpr 0x14202a3e0 <col:25, col:29> 'const char' lvalue
      |       |     |-ImplicitCastExpr 0x14202a3c8 <col:25> 'const char *' <LValueToRValue>
      |       |     | `-DeclRefExpr 0x14202a388 <col:25> 'const char *' lvalue ParmVar 0x14200dda8 'cp' 'const char *'
      |       |     `-IntegerLiteral 0x14202a3a8 <col:28> 'int' 3
      |       `-IntegerLiteral 0x14202a400 <col:32> 'int' 4
      `-CallExpr 0x14202a578 <line:56:3, col:24> '<dependent type>' contains-errors
        |-DeclRefExpr 0x14202a4d8 <col:3> 'int ()' Function 0x14200e338 'ND_PRINT' 'int ()'
        `-ParenExpr 0x14202a558 <col:12, col:23> 'char[4]' contains-errors
          `-BinaryOperator 0x14202a538 <col:13, col:18> 'char[4]' contains-errors ','
            |-RecoveryExpr 0x14202a4f8 <col:13> '<dependent type>' contains-errors lvalue
            `-StringLiteral 0x14202a518 <col:18> 'char[4]' lvalue "STR"
