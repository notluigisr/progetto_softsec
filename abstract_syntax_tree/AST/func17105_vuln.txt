TranslationUnitDecl 0x14b855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x14b8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x14b855bd0 '__int128'
|-TypedefDecl 0x14b856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x14b855bf0 'unsigned __int128'
|-TypedefDecl 0x14c00be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x14c00bc00 'struct __NSConstantString_tag'
|   `-Record 0x14b856580 '__NSConstantString_tag'
|-TypedefDecl 0x14c00be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x14b855d90 '__SVInt8_t'
|-TypedefDecl 0x14c00bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x14b855db0 '__SVInt16_t'
|-TypedefDecl 0x14c00bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x14b855dd0 '__SVInt32_t'
|-TypedefDecl 0x14c00bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x14b855df0 '__SVInt64_t'
|-TypedefDecl 0x14c00c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x14b855e10 '__SVUint8_t'
|-TypedefDecl 0x14c00c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x14b855e30 '__SVUint16_t'
|-TypedefDecl 0x14c00c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x14b855e50 '__SVUint32_t'
|-TypedefDecl 0x14c00c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x14b855e70 '__SVUint64_t'
|-TypedefDecl 0x14c00c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x14b855e90 '__SVFloat16_t'
|-TypedefDecl 0x14c00c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x14b855eb0 '__SVFloat32_t'
|-TypedefDecl 0x14c00c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x14b855ed0 '__SVFloat64_t'
|-TypedefDecl 0x14c00c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x14b855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x14c00c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x14b855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x14c00c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x14b855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x14c00c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x14b855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x14c00c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x14b855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x14c00c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x14b855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x14c00c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x14b855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x14c00c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x14b855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x14c00c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x14b855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x14c00c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x14b856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x14c00c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x14b856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x14c00c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x14b856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x14c00c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x14b856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x14c00c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x14b856090 '__clang_svint8x3_t'
|-TypedefDecl 0x14c00c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x14b8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x14c00c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x14b8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x14c00c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x14b8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x14c00c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x14b856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x14c00ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x14b856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x14c00cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x14b856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x14c00cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x14b856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x14c00cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x14b856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x14c00d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x14b8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x14c00d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x14b8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x14c00d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x14b8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x14c00d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x14b856210 '__clang_svint8x4_t'
|-TypedefDecl 0x14c00d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x14b856230 '__clang_svint16x4_t'
|-TypedefDecl 0x14c00d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x14b856250 '__clang_svint32x4_t'
|-TypedefDecl 0x14c00d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x14b856270 '__clang_svint64x4_t'
|-TypedefDecl 0x14c00d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x14b856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x14c00d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x14b8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x14c00d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x14b8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x14c00d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x14b8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x14c00d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x14b856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x14c00d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x14b856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x14c00d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x14b856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x14c00d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x14b856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x14c00da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x14b856390 '__SVBool_t'
|-TypedefDecl 0x14c00da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x14b8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x14c00dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x14b8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x14c00db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x14b8563f0 '__SVCount_t'
|-TypedefDecl 0x14c00dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x14c00dbb0 'char *'
|   `-BuiltinType 0x14b8556b0 'char'
|-TypedefDecl 0x14c00dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x14c00dbb0 'char *'
|   `-BuiltinType 0x14b8556b0 'char'
|-FunctionDecl 0x14c00df10 <dataset_diviso_filec/func17105_vuln.c:1:1, line:63:1> line:1:6 invalid yajl_string_decode 'void (int, const unsigned char *, unsigned int)'
| |-ParmVarDecl 0x14c00dcf0 <col:25, col:34> col:34 invalid buf 'int'
| |-ParmVarDecl 0x14c00dda8 <col:39, col:61> col:61 used str 'const unsigned char *'
| |-ParmVarDecl 0x14c00de28 <line:2:25, col:38> col:38 used len 'unsigned int'
| `-CompoundStmt 0x14c02abd8 <line:3:1, line:63:1>
|   |-DeclStmt 0x14c00e088 <line:4:5, col:25>
|   | `-VarDecl 0x14c00dfe8 <col:5, col:24> col:18 used beg 'unsigned int' cinit
|   |   `-ImplicitCastExpr 0x14c00e070 <col:24> 'unsigned int' <IntegralCast>
|   |     `-IntegerLiteral 0x14c00e050 <col:24> 'int' 0
|   |-DeclStmt 0x14c00e158 <line:5:5, col:25>
|   | `-VarDecl 0x14c00e0b8 <col:5, col:24> col:18 used end 'unsigned int' cinit
|   |   `-ImplicitCastExpr 0x14c00e140 <col:24> 'unsigned int' <IntegralCast>
|   |     `-IntegerLiteral 0x14c00e120 <col:24> 'int' 0
|   |-WhileStmt 0x14c02aa20 <line:7:5, line:61:5>
|   | |-BinaryOperator 0x14c00e1e0 <line:7:12, col:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x14c00e1b0 <col:12> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x14c00e170 <col:12> 'unsigned int' lvalue Var 0x14c00e0b8 'end' 'unsigned int'
|   | | `-ImplicitCastExpr 0x14c00e1c8 <col:18> 'unsigned int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x14c00e190 <col:18> 'unsigned int' lvalue ParmVar 0x14c00de28 'len' 'unsigned int'
|   | `-CompoundStmt 0x14c02aa08 <col:23, line:61:5>
|   |   `-IfStmt 0x14c02a9d8 <line:8:9, line:60:9> has_else
|   |     |-BinaryOperator 0x14c00e2d8 <line:8:13, col:25> 'int' '=='
|   |     | |-ImplicitCastExpr 0x14c00e2c0 <col:13, col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x14c00e2a8 <col:13, col:20> 'unsigned char' <LValueToRValue>
|   |     | |   `-ArraySubscriptExpr 0x14c00e270 <col:13, col:20> 'const unsigned char' lvalue
|   |     | |     |-ImplicitCastExpr 0x14c00e240 <col:13> 'const unsigned char *' <LValueToRValue>
|   |     | |     | `-DeclRefExpr 0x14c00e200 <col:13> 'const unsigned char *' lvalue ParmVar 0x14c00dda8 'str' 'const unsigned char *'
|   |     | |     `-ImplicitCastExpr 0x14c00e258 <col:17> 'unsigned int' <LValueToRValue>
|   |     | |       `-DeclRefExpr 0x14c00e220 <col:17> 'unsigned int' lvalue Var 0x14c00e0b8 'end' 'unsigned int'
|   |     | `-CharacterLiteral 0x14c00e290 <col:25> 'int' 92
|   |     |-CompoundStmt 0x14c02a948 <col:31, line:58:9>
|   |     | |-DeclStmt 0x14c027468 <line:9:13, col:28>
|   |     | | `-VarDecl 0x14c027400 <col:13, col:27> col:18 used utf8Buf 'char[5]'
|   |     | |-DeclStmt 0x14c027590 <line:10:13, col:43>
|   |     | | `-VarDecl 0x14c027498 <col:13, col:38> col:26 used unescaped 'const char *' cinit
|   |     | |   `-ImplicitCastExpr 0x14c027578 <col:38> 'const char *' <NoOp>
|   |     | |     `-ImplicitCastExpr 0x14c027560 <col:38> 'char *' <ArrayToPointerDecay>
|   |     | |       `-StringLiteral 0x14c027540 <col:38> 'char[4]' lvalue "STR"
|   |     | |-CallExpr 0x14c027860 <line:11:13, col:54> '<dependent type>' contains-errors
|   |     | | |-DeclRefExpr 0x14c027700 <col:13> 'int ()' Function 0x14c027648 'yajl_buf_append' 'int ()'
|   |     | | |-RecoveryExpr 0x14c027720 <col:29> '<dependent type>' contains-errors lvalue
|   |     | | |-BinaryOperator 0x14c0277b0 <col:34, col:40> 'const unsigned char *' '+'
|   |     | | | |-ImplicitCastExpr 0x14c027780 <col:34> 'const unsigned char *' <LValueToRValue>
|   |     | | | | `-DeclRefExpr 0x14c027740 <col:34> 'const unsigned char *' lvalue ParmVar 0x14c00dda8 'str' 'const unsigned char *'
|   |     | | | `-ImplicitCastExpr 0x14c027798 <col:40> 'unsigned int' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x14c027760 <col:40> 'unsigned int' lvalue Var 0x14c00dfe8 'beg' 'unsigned int'
|   |     | | `-BinaryOperator 0x14c027840 <col:45, col:51> 'unsigned int' '-'
|   |     | |   |-ImplicitCastExpr 0x14c027810 <col:45> 'unsigned int' <LValueToRValue>
|   |     | |   | `-DeclRefExpr 0x14c0277d0 <col:45> 'unsigned int' lvalue Var 0x14c00e0b8 'end' 'unsigned int'
|   |     | |   `-ImplicitCastExpr 0x14c027828 <col:51> 'unsigned int' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x14c0277f0 <col:51> 'unsigned int' lvalue Var 0x14c00dfe8 'beg' 'unsigned int'
|   |     | |-SwitchStmt 0x14c027958 <line:12:13, line:55:13>
|   |     | | |-ImplicitCastExpr 0x14c027940 <line:12:21, col:30> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x14c027928 <col:21, col:30> 'unsigned char' <LValueToRValue>
|   |     | | |   `-ArraySubscriptExpr 0x14c027908 <col:21, col:30> 'const unsigned char' lvalue
|   |     | | |     |-ImplicitCastExpr 0x14c0278f0 <col:21> 'const unsigned char *' <LValueToRValue>
|   |     | | |     | `-DeclRefExpr 0x14c027898 <col:21> 'const unsigned char *' lvalue ParmVar 0x14c00dda8 'str' 'const unsigned char *'
|   |     | | |     `-UnaryOperator 0x14c0278d8 <col:25, col:27> 'unsigned int' prefix '++'
|   |     | | |       `-DeclRefExpr 0x14c0278b8 <col:27> 'unsigned int' lvalue Var 0x14c00e0b8 'end' 'unsigned int'
|   |     | | `-CompoundStmt 0x14c02a0a8 <col:33, line:55:13>
|   |     | |   |-CaseStmt 0x14c0279b0 <line:13:17, col:39>
|   |     | |   | |-ConstantExpr 0x14c027998 <col:22> 'int'
|   |     | |   | | `-CharacterLiteral 0x14c027980 <col:22> 'int' 114
|   |     | |   | `-BinaryOperator 0x14c027a48 <col:27, col:39> 'const char *' '='
|   |     | |   |   |-DeclRefExpr 0x14c0279d8 <col:27> 'const char *' lvalue Var 0x14c027498 'unescaped' 'const char *'
|   |     | |   |   `-ImplicitCastExpr 0x14c027a30 <col:39> 'const char *' <NoOp>
|   |     | |   |     `-ImplicitCastExpr 0x14c027a18 <col:39> 'char *' <ArrayToPointerDecay>
|   |     | |   |       `-StringLiteral 0x14c0279f8 <col:39> 'char[4]' lvalue "STR"
|   |     | |   |-BreakStmt 0x14c027a68 <col:46>
|   |     | |   |-CaseStmt 0x14c027aa0 <line:14:17, col:39>
|   |     | |   | |-ConstantExpr 0x14c027a88 <col:22> 'int'
|   |     | |   | | `-CharacterLiteral 0x14c027a70 <col:22> 'int' 110
|   |     | |   | `-BinaryOperator 0x14c027b38 <col:27, col:39> 'const char *' '='
|   |     | |   |   |-DeclRefExpr 0x14c027ac8 <col:27> 'const char *' lvalue Var 0x14c027498 'unescaped' 'const char *'
|   |     | |   |   `-ImplicitCastExpr 0x14c027b20 <col:39> 'const char *' <NoOp>
|   |     | |   |     `-ImplicitCastExpr 0x14c027b08 <col:39> 'char *' <ArrayToPointerDecay>
|   |     | |   |       `-StringLiteral 0x14c027ae8 <col:39> 'char[4]' lvalue "STR"
|   |     | |   |-BreakStmt 0x14c027b58 <col:46>
|   |     | |   |-CaseStmt 0x14c027b90 <line:15:17, col:40>
|   |     | |   | |-ConstantExpr 0x14c027b78 <col:22> 'int'
|   |     | |   | | `-CharacterLiteral 0x14c027b60 <col:22> 'int' 92
|   |     | |   | `-BinaryOperator 0x14c027c28 <col:28, col:40> 'const char *' '='
|   |     | |   |   |-DeclRefExpr 0x14c027bb8 <col:28> 'const char *' lvalue Var 0x14c027498 'unescaped' 'const char *'
|   |     | |   |   `-ImplicitCastExpr 0x14c027c10 <col:40> 'const char *' <NoOp>
|   |     | |   |     `-ImplicitCastExpr 0x14c027bf8 <col:40> 'char *' <ArrayToPointerDecay>
|   |     | |   |       `-StringLiteral 0x14c027bd8 <col:40> 'char[4]' lvalue "STR"
|   |     | |   |-BreakStmt 0x14c027c48 <col:47>
|   |     | |   |-CaseStmt 0x14c027c80 <line:16:17, col:39>
|   |     | |   | |-ConstantExpr 0x14c027c68 <col:22> 'int'
|   |     | |   | | `-CharacterLiteral 0x14c027c50 <col:22> 'int' 47
|   |     | |   | `-BinaryOperator 0x14c027d18 <col:27, col:39> 'const char *' '='
|   |     | |   |   |-DeclRefExpr 0x14c027ca8 <col:27> 'const char *' lvalue Var 0x14c027498 'unescaped' 'const char *'
|   |     | |   |   `-ImplicitCastExpr 0x14c027d00 <col:39> 'const char *' <NoOp>
|   |     | |   |     `-ImplicitCastExpr 0x14c027ce8 <col:39> 'char *' <ArrayToPointerDecay>
|   |     | |   |       `-StringLiteral 0x14c027cc8 <col:39> 'char[4]' lvalue "STR"
|   |     | |   |-BreakStmt 0x14c027d38 <col:46>
|   |     | |   |-BinaryOperator 0x14c027db0 <line:18:27, col:39> 'const char *' '='
|   |     | |   | |-DeclRefExpr 0x14c027d40 <col:27> 'const char *' lvalue Var 0x14c027498 'unescaped' 'const char *'
|   |     | |   | `-ImplicitCastExpr 0x14c027d98 <col:39> 'const char *' <NoOp>
|   |     | |   |   `-ImplicitCastExpr 0x14c027d80 <col:39> 'char *' <ArrayToPointerDecay>
|   |     | |   |     `-StringLiteral 0x14c027d60 <col:39> 'char[4]' lvalue "STR"
|   |     | |   |-BreakStmt 0x14c027dd0 <col:46>
|   |     | |   |-CaseStmt 0x14c027e08 <line:19:17, col:39>
|   |     | |   | |-ConstantExpr 0x14c027df0 <col:22> 'int'
|   |     | |   | | `-CharacterLiteral 0x14c027dd8 <col:22> 'int' 98
|   |     | |   | `-BinaryOperator 0x14c027ea0 <col:27, col:39> 'const char *' '='
|   |     | |   |   |-DeclRefExpr 0x14c027e30 <col:27> 'const char *' lvalue Var 0x14c027498 'unescaped' 'const char *'
|   |     | |   |   `-ImplicitCastExpr 0x14c027e88 <col:39> 'const char *' <NoOp>
|   |     | |   |     `-ImplicitCastExpr 0x14c027e70 <col:39> 'char *' <ArrayToPointerDecay>
|   |     | |   |       `-StringLiteral 0x14c027e50 <col:39> 'char[4]' lvalue "STR"
|   |     | |   |-BreakStmt 0x14c027ec0 <col:46>
|   |     | |   |-CaseStmt 0x14c027ef8 <line:20:17, col:39>
|   |     | |   | |-ConstantExpr 0x14c027ee0 <col:22> 'int'
|   |     | |   | | `-CharacterLiteral 0x14c027ec8 <col:22> 'int' 116
|   |     | |   | `-BinaryOperator 0x14c027f90 <col:27, col:39> 'const char *' '='
|   |     | |   |   |-DeclRefExpr 0x14c027f20 <col:27> 'const char *' lvalue Var 0x14c027498 'unescaped' 'const char *'
|   |     | |   |   `-ImplicitCastExpr 0x14c027f78 <col:39> 'const char *' <NoOp>
|   |     | |   |     `-ImplicitCastExpr 0x14c027f60 <col:39> 'char *' <ArrayToPointerDecay>
|   |     | |   |       `-StringLiteral 0x14c027f40 <col:39> 'char[4]' lvalue "STR"
|   |     | |   |-BreakStmt 0x14c027fb0 <col:46>
|   |     | |   |-CaseStmt 0x14c027fe8 <line:21:17, line:52:17>
|   |     | |   | |-ConstantExpr 0x14c027fd0 <line:21:22> 'int'
|   |     | |   | | `-CharacterLiteral 0x14c027fb8 <col:22> 'int' 117
|   |     | |   | `-CompoundStmt 0x14c029e50 <col:27, line:52:17>
|   |     | |   |   |-DeclStmt 0x14c0280c8 <line:22:21, col:47>
|   |     | |   |   | `-VarDecl 0x14c028028 <col:21, col:46> col:34 used codepoint 'unsigned int' cinit
|   |     | |   |   |   `-ImplicitCastExpr 0x14c0280b0 <col:46> 'unsigned int' <IntegralCast>
|   |     | |   |   |     `-IntegerLiteral 0x14c028090 <col:46> 'int' 0
|   |     | |   |   |-CallExpr 0x14c028328 <line:23:21, col:55> 'int'
|   |     | |   |   | |-ImplicitCastExpr 0x14c028310 <col:21> 'int (*)()' <FunctionToPointerDecay>
|   |     | |   |   | | `-DeclRefExpr 0x14c0281c0 <col:21> 'int ()' Function 0x14c028108 'hexToDigit' 'int ()'
|   |     | |   |   | |-UnaryOperator 0x14c028230 <col:32, col:33> 'unsigned int *' prefix '&' cannot overflow
|   |     | |   |   | | `-DeclRefExpr 0x14c0281e0 <col:33> 'unsigned int' lvalue Var 0x14c028028 'codepoint' 'unsigned int'
|   |     | |   |   | `-BinaryOperator 0x14c0282b8 <col:44, col:52> 'const unsigned char *' '+'
|   |     | |   |   |   |-ImplicitCastExpr 0x14c0282a0 <col:44> 'const unsigned char *' <LValueToRValue>
|   |     | |   |   |   | `-DeclRefExpr 0x14c028248 <col:44> 'const unsigned char *' lvalue ParmVar 0x14c00dda8 'str' 'const unsigned char *'
|   |     | |   |   |   `-UnaryOperator 0x14c028288 <col:50, col:52> 'unsigned int' prefix '++'
|   |     | |   |   |     `-DeclRefExpr 0x14c028268 <col:52> 'unsigned int' lvalue Var 0x14c00e0b8 'end' 'unsigned int'
|   |     | |   |   |-CompoundAssignOperator 0x14c0283b0 <line:24:21, col:26> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   |     | |   |   | |-DeclRefExpr 0x14c028358 <col:21> 'unsigned int' lvalue Var 0x14c00e0b8 'end' 'unsigned int'
|   |     | |   |   | `-ImplicitCastExpr 0x14c028398 <col:26> 'unsigned int' <IntegralCast>
|   |     | |   |   |   `-IntegerLiteral 0x14c028378 <col:26> 'int' 3
|   |     | |   |   |-IfStmt 0x14c0295d0 <line:26:21, line:40:21>
|   |     | |   |   | |-BinaryOperator 0x14c028ac8 <line:26:25, col:49> 'int' '=='
|   |     | |   |   | | |-ParenExpr 0x14c028a70 <col:25, col:44> 'unsigned int'
|   |     | |   |   | | | `-BinaryOperator 0x14c028a50 <col:26, col:38> 'unsigned int' '&'
|   |     | |   |   | | |   |-ImplicitCastExpr 0x14c028a20 <col:26> 'unsigned int' <LValueToRValue>
|   |     | |   |   | | |   | `-DeclRefExpr 0x14c0283e0 <col:26> 'unsigned int' lvalue Var 0x14c028028 'codepoint' 'unsigned int'
|   |     | |   |   | | |   `-ImplicitCastExpr 0x14c028a38 <col:38> 'unsigned int' <IntegralCast>
|   |     | |   |   | | |     `-IntegerLiteral 0x14c028a00 <col:38> 'int' 64512
|   |     | |   |   | | `-ImplicitCastExpr 0x14c028ab0 <col:49> 'unsigned int' <IntegralCast>
|   |     | |   |   | |   `-IntegerLiteral 0x14c028a90 <col:49> 'int' 55296
|   |     | |   |   | `-CompoundStmt 0x14c0295b0 <col:57, line:40:21>
|   |     | |   |   |   |-UnaryOperator 0x14c028b08 <line:27:25, col:28> 'unsigned int' postfix '++'
|   |     | |   |   |   | `-DeclRefExpr 0x14c028ae8 <col:25> 'unsigned int' lvalue Var 0x14c00e0b8 'end' 'unsigned int'
|   |     | |   |   |   `-IfStmt 0x14c029580 <line:28:25, line:39:25> has_else
|   |     | |   |   |     |-BinaryOperator 0x14c028d68 <line:28:29, col:65> 'int' '&&'
|   |     | |   |   |     | |-BinaryOperator 0x14c028bf8 <col:29, col:41> 'int' '=='
|   |     | |   |   |     | | |-ImplicitCastExpr 0x14c028be0 <col:29, col:36> 'int' <IntegralCast>
|   |     | |   |   |     | | | `-ImplicitCastExpr 0x14c028bc8 <col:29, col:36> 'unsigned char' <LValueToRValue>
|   |     | |   |   |     | | |   `-ArraySubscriptExpr 0x14c028b90 <col:29, col:36> 'const unsigned char' lvalue
|   |     | |   |   |     | | |     |-ImplicitCastExpr 0x14c028b60 <col:29> 'const unsigned char *' <LValueToRValue>
|   |     | |   |   |     | | |     | `-DeclRefExpr 0x14c028b20 <col:29> 'const unsigned char *' lvalue ParmVar 0x14c00dda8 'str' 'const unsigned char *'
|   |     | |   |   |     | | |     `-ImplicitCastExpr 0x14c028b78 <col:33> 'unsigned int' <LValueToRValue>
|   |     | |   |   |     | | |       `-DeclRefExpr 0x14c028b40 <col:33> 'unsigned int' lvalue Var 0x14c00e0b8 'end' 'unsigned int'
|   |     | |   |   |     | | `-CharacterLiteral 0x14c028bb0 <col:41> 'int' 92
|   |     | |   |   |     | `-BinaryOperator 0x14c028d48 <col:49, col:65> 'int' '=='
|   |     | |   |   |     |   |-ImplicitCastExpr 0x14c028d30 <col:49, col:60> 'int' <IntegralCast>
|   |     | |   |   |     |   | `-ImplicitCastExpr 0x14c028d18 <col:49, col:60> 'unsigned char' <LValueToRValue>
|   |     | |   |   |     |   |   `-ArraySubscriptExpr 0x14c028ce0 <col:49, col:60> 'const unsigned char' lvalue
|   |     | |   |   |     |   |     |-ImplicitCastExpr 0x14c028cc8 <col:49> 'const unsigned char *' <LValueToRValue>
|   |     | |   |   |     |   |     | `-DeclRefExpr 0x14c028c18 <col:49> 'const unsigned char *' lvalue ParmVar 0x14c00dda8 'str' 'const unsigned char *'
|   |     | |   |   |     |   |     `-BinaryOperator 0x14c028ca8 <col:53, col:59> 'unsigned int' '+'
|   |     | |   |   |     |   |       |-ImplicitCastExpr 0x14c028c78 <col:53> 'unsigned int' <LValueToRValue>
|   |     | |   |   |     |   |       | `-DeclRefExpr 0x14c028c38 <col:53> 'unsigned int' lvalue Var 0x14c00e0b8 'end' 'unsigned int'
|   |     | |   |   |     |   |       `-ImplicitCastExpr 0x14c028c90 <col:59> 'unsigned int' <IntegralCast>
|   |     | |   |   |     |   |         `-IntegerLiteral 0x14c028c58 <col:59> 'int' 1
|   |     | |   |   |     |   `-CharacterLiteral 0x14c028d00 <col:65> 'int' 117
|   |     | |   |   |     |-CompoundStmt 0x14c029498 <col:70, line:36:25>
|   |     | |   |   |     | |-DeclStmt 0x14c028e40 <line:29:29, col:55>
|   |     | |   |   |     | | `-VarDecl 0x14c028da0 <col:29, col:54> col:42 used surrogate 'unsigned int' cinit
|   |     | |   |   |     | |   `-ImplicitCastExpr 0x14c028e28 <col:54> 'unsigned int' <IntegralCast>
|   |     | |   |   |     | |     `-IntegerLiteral 0x14c028e08 <col:54> 'int' 0
|   |     | |   |   |     | |-CallExpr 0x14c028f98 <line:30:29, col:65> 'int'
|   |     | |   |   |     | | |-ImplicitCastExpr 0x14c028f80 <col:29> 'int (*)()' <FunctionToPointerDecay>
|   |     | |   |   |     | | | `-DeclRefExpr 0x14c028e58 <col:29> 'int ()' Function 0x14c028108 'hexToDigit' 'int ()'
|   |     | |   |   |     | | |-UnaryOperator 0x14c028e98 <col:40, col:41> 'unsigned int *' prefix '&' cannot overflow
|   |     | |   |   |     | | | `-DeclRefExpr 0x14c028e78 <col:41> 'unsigned int' lvalue Var 0x14c028da0 'surrogate' 'unsigned int'
|   |     | |   |   |     | | `-BinaryOperator 0x14c028f60 <col:52, col:64> 'const unsigned char *' '+'
|   |     | |   |   |     | |   |-BinaryOperator 0x14c028f20 <col:52, col:58> 'const unsigned char *' '+'
|   |     | |   |   |     | |   | |-ImplicitCastExpr 0x14c028ef0 <col:52> 'const unsigned char *' <LValueToRValue>
|   |     | |   |   |     | |   | | `-DeclRefExpr 0x14c028eb0 <col:52> 'const unsigned char *' lvalue ParmVar 0x14c00dda8 'str' 'const unsigned char *'
|   |     | |   |   |     | |   | `-ImplicitCastExpr 0x14c028f08 <col:58> 'unsigned int' <LValueToRValue>
|   |     | |   |   |     | |   |   `-DeclRefExpr 0x14c028ed0 <col:58> 'unsigned int' lvalue Var 0x14c00e0b8 'end' 'unsigned int'
|   |     | |   |   |     | |   `-IntegerLiteral 0x14c028f40 <col:64> 'int' 2
|   |     | |   |   |     | |-BinaryOperator 0x14c0293f0 <line:31:29, line:34:53> 'unsigned int' '='
|   |     | |   |   |     | | |-DeclRefExpr 0x14c028fc8 <line:31:29> 'unsigned int' lvalue Var 0x14c028028 'codepoint' 'unsigned int'
|   |     | |   |   |     | | `-ParenExpr 0x14c0293d0 <line:32:33, line:34:53> 'unsigned int'
|   |     | |   |   |     | |   `-BinaryOperator 0x14c0293b0 <line:32:34, line:34:52> 'unsigned int' '|'
|   |     | |   |   |     | |     |-BinaryOperator 0x14c0292e0 <line:32:34, line:33:71> 'unsigned int' '|'
|   |     | |   |   |     | |     | |-ParenExpr 0x14c0290d8 <line:32:34, col:59> 'unsigned int'
|   |     | |   |   |     | |     | | `-BinaryOperator 0x14c0290b8 <col:35, col:57> 'unsigned int' '<<'
|   |     | |   |   |     | |     | |   |-ParenExpr 0x14c029078 <col:35, col:52> 'unsigned int'
|   |     | |   |   |     | |     | |   | `-BinaryOperator 0x14c029058 <col:36, col:48> 'unsigned int' '&'
|   |     | |   |   |     | |     | |   |   |-ImplicitCastExpr 0x14c029028 <col:36> 'unsigned int' <LValueToRValue>
|   |     | |   |   |     | |     | |   |   | `-DeclRefExpr 0x14c028fe8 <col:36> 'unsigned int' lvalue Var 0x14c028028 'codepoint' 'unsigned int'
|   |     | |   |   |     | |     | |   |   `-ImplicitCastExpr 0x14c029040 <col:48> 'unsigned int' <IntegralCast>
|   |     | |   |   |     | |     | |   |     `-IntegerLiteral 0x14c029008 <col:48> 'int' 63
|   |     | |   |   |     | |     | |   `-IntegerLiteral 0x14c029098 <col:57> 'int' 10
|   |     | |   |   |     | |     | `-ParenExpr 0x14c0292c0 <line:33:34, col:71> 'unsigned int'
|   |     | |   |   |     | |     |   `-BinaryOperator 0x14c0292a0 <col:35, col:69> 'unsigned int' '<<'
|   |     | |   |   |     | |     |     |-ParenExpr 0x14c029260 <col:35, col:64> 'unsigned int'
|   |     | |   |   |     | |     |     | `-BinaryOperator 0x14c029240 <col:36, col:63> 'unsigned int' '+'
|   |     | |   |   |     | |     |     |   |-ParenExpr 0x14c0291e8 <col:36, col:59> 'unsigned int'
|   |     | |   |   |     | |     |     |   | `-BinaryOperator 0x14c0291c8 <col:37, col:56> 'unsigned int' '&'
|   |     | |   |   |     | |     |     |   |   |-ParenExpr 0x14c029170 <col:37, col:52> 'unsigned int'
|   |     | |   |   |     | |     |     |   |   | `-BinaryOperator 0x14c029150 <col:38, col:51> 'unsigned int' '>>'
|   |     | |   |   |     | |     |     |   |   |   |-ImplicitCastExpr 0x14c029138 <col:38> 'unsigned int' <LValueToRValue>
|   |     | |   |   |     | |     |     |   |   |   | `-DeclRefExpr 0x14c0290f8 <col:38> 'unsigned int' lvalue Var 0x14c028028 'codepoint' 'unsigned int'
|   |     | |   |   |     | |     |     |   |   |   `-IntegerLiteral 0x14c029118 <col:51> 'int' 6
|   |     | |   |   |     | |     |     |   |   `-ImplicitCastExpr 0x14c0291b0 <col:56> 'unsigned int' <IntegralCast>
|   |     | |   |   |     | |     |     |   |     `-IntegerLiteral 0x14c029190 <col:56> 'int' 15
|   |     | |   |   |     | |     |     |   `-ImplicitCastExpr 0x14c029228 <col:63> 'unsigned int' <IntegralCast>
|   |     | |   |   |     | |     |     |     `-IntegerLiteral 0x14c029208 <col:63> 'int' 1
|   |     | |   |   |     | |     |     `-IntegerLiteral 0x14c029280 <col:69> 'int' 16
|   |     | |   |   |     | |     `-ParenExpr 0x14c029390 <line:34:34, col:52> 'unsigned int'
|   |     | |   |   |     | |       `-BinaryOperator 0x14c029370 <col:35, col:47> 'unsigned int' '&'
|   |     | |   |   |     | |         |-ImplicitCastExpr 0x14c029340 <col:35> 'unsigned int' <LValueToRValue>
|   |     | |   |   |     | |         | `-DeclRefExpr 0x14c029300 <col:35> 'unsigned int' lvalue Var 0x14c028da0 'surrogate' 'unsigned int'
|   |     | |   |   |     | |         `-ImplicitCastExpr 0x14c029358 <col:47> 'unsigned int' <IntegralCast>
|   |     | |   |   |     | |           `-IntegerLiteral 0x14c029320 <col:47> 'int' 1023
|   |     | |   |   |     | `-CompoundAssignOperator 0x14c029468 <line:35:29, col:36> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   |     | |   |   |     |   |-DeclRefExpr 0x14c029410 <col:29> 'unsigned int' lvalue Var 0x14c00e0b8 'end' 'unsigned int'
|   |     | |   |   |     |   `-ImplicitCastExpr 0x14c029450 <col:36> 'unsigned int' <IntegralCast>
|   |     | |   |   |     |     `-IntegerLiteral 0x14c029430 <col:36> 'int' 5
|   |     | |   |   |     `-CompoundStmt 0x14c029560 <line:36:32, line:39:25>
|   |     | |   |   |       |-BinaryOperator 0x14c029538 <line:37:29, col:41> 'const char *' '='
|   |     | |   |   |       | |-DeclRefExpr 0x14c0294c8 <col:29> 'const char *' lvalue Var 0x14c027498 'unescaped' 'const char *'
|   |     | |   |   |       | `-ImplicitCastExpr 0x14c029520 <col:41> 'const char *' <NoOp>
|   |     | |   |   |       |   `-ImplicitCastExpr 0x14c029508 <col:41> 'char *' <ArrayToPointerDecay>
|   |     | |   |   |       |     `-StringLiteral 0x14c0294e8 <col:41> 'char[4]' lvalue "STR"
|   |     | |   |   |       `-BreakStmt 0x14c029558 <line:38:29>
|   |     | |   |   |-CallExpr 0x14c029748 <line:42:21, col:51> 'int'
|   |     | |   |   | |-ImplicitCastExpr 0x14c029730 <col:21> 'int (*)()' <FunctionToPointerDecay>
|   |     | |   |   | | `-DeclRefExpr 0x14c0296d0 <col:21> 'int ()' Function 0x14c029618 'Utf32toUtf8' 'int ()'
|   |     | |   |   | |-ImplicitCastExpr 0x14c029778 <col:33> 'unsigned int' <LValueToRValue>
|   |     | |   |   | | `-DeclRefExpr 0x14c0296f0 <col:33> 'unsigned int' lvalue Var 0x14c028028 'codepoint' 'unsigned int'
|   |     | |   |   | `-ImplicitCastExpr 0x14c029790 <col:44> 'char *' <ArrayToPointerDecay>
|   |     | |   |   |   `-DeclRefExpr 0x14c029710 <col:44> 'char[5]' lvalue Var 0x14c027400 'utf8Buf' 'char[5]'
|   |     | |   |   |-BinaryOperator 0x14c029818 <line:43:21, col:33> 'const char *' '='
|   |     | |   |   | |-DeclRefExpr 0x14c0297a8 <col:21> 'const char *' lvalue Var 0x14c027498 'unescaped' 'const char *'
|   |     | |   |   | `-ImplicitCastExpr 0x14c029800 <col:33> 'const char *' <NoOp>
|   |     | |   |   |   `-ImplicitCastExpr 0x14c0297e8 <col:33> 'char *' <ArrayToPointerDecay>
|   |     | |   |   |     `-DeclRefExpr 0x14c0297c8 <col:33> 'char[5]' lvalue Var 0x14c027400 'utf8Buf' 'char[5]'
|   |     | |   |   |-IfStmt 0x14c029e28 <line:45:21, line:49:21>
|   |     | |   |   | |-BinaryOperator 0x14c0298a8 <line:45:25, col:38> 'int' '=='
|   |     | |   |   | | |-ImplicitCastExpr 0x14c029878 <col:25> 'unsigned int' <LValueToRValue>
|   |     | |   |   | | | `-DeclRefExpr 0x14c029838 <col:25> 'unsigned int' lvalue Var 0x14c028028 'codepoint' 'unsigned int'
|   |     | |   |   | | `-ImplicitCastExpr 0x14c029890 <col:38> 'unsigned int' <IntegralCast>
|   |     | |   |   | |   `-IntegerLiteral 0x14c029858 <col:38> 'int' 0
|   |     | |   |   | `-CompoundStmt 0x14c029e00 <col:41, line:49:21>
|   |     | |   |   |   |-CallExpr 0x14c029948 <line:46:25, col:58> '<dependent type>' contains-errors
|   |     | |   |   |   | |-DeclRefExpr 0x14c0298c8 <col:25> 'int ()' Function 0x14c027648 'yajl_buf_append' 'int ()'
|   |     | |   |   |   | |-RecoveryExpr 0x14c0298e8 <col:41> '<dependent type>' contains-errors lvalue
|   |     | |   |   |   | |-DeclRefExpr 0x14c029908 <col:46> 'const char *' lvalue Var 0x14c027498 'unescaped' 'const char *'
|   |     | |   |   |   | `-IntegerLiteral 0x14c029928 <col:57> 'int' 1
|   |     | |   |   |   |-BinaryOperator 0x14c0299d8 <line:47:25, col:33> 'unsigned int' '='
|   |     | |   |   |   | |-DeclRefExpr 0x14c029980 <col:25> 'unsigned int' lvalue Var 0x14c00dfe8 'beg' 'unsigned int'
|   |     | |   |   |   | `-UnaryOperator 0x14c0299c0 <col:31, col:33> 'unsigned int' prefix '++'
|   |     | |   |   |   |   `-DeclRefExpr 0x14c0299a0 <col:33> 'unsigned int' lvalue Var 0x14c00e0b8 'end' 'unsigned int'
|   |     | |   |   |   `-ContinueStmt 0x14c0299f8 <line:48:25>
|   |     | |   |   `-BreakStmt 0x14c029e48 <line:51:21>
|   |     | |   `-DefaultStmt 0x14c02a088 <line:53:17, line:54:41>
|   |     | |     `-CallExpr 0x14c02a060 <col:21, col:41> '<dependent type>' contains-errors
|   |     | |       |-DeclRefExpr 0x14c029f80 <col:21> 'int ()' Function 0x14c029ec8 'assert' 'int ()'
|   |     | |       `-BinaryOperator 0x14c02a040 <col:28, col:37> 'int' contains-errors '=='
|   |     | |         |-StringLiteral 0x14c029fa0 <col:28> 'char[4]' lvalue "STR"
|   |     | |         `-RecoveryExpr 0x14c02a020 <col:37> '<dependent type>' contains-errors lvalue
|   |     | |-CallExpr 0x14c02a898 <line:56:13, col:76> '<dependent type>' contains-errors
|   |     | | |-DeclRefExpr 0x14c02a138 <col:13> 'int ()' Function 0x14c027648 'yajl_buf_append' 'int ()'
|   |     | | |-RecoveryExpr 0x14c02a158 <col:29> '<dependent type>' contains-errors lvalue
|   |     | | |-DeclRefExpr 0x14c02a178 <col:34> 'const char *' lvalue Var 0x14c027498 'unescaped' 'const char *'
|   |     | | `-CStyleCastExpr 0x14c02a870 <col:45, col:75> 'unsigned int' <IntegralCast>
|   |     | |   `-CallExpr 0x14c02a818 <col:59, col:75> 'unsigned long'
|   |     | |     |-ImplicitCastExpr 0x14c02a800 <col:59> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |     | |     | `-DeclRefExpr 0x14c02a770 <col:59> 'unsigned long (const char *)' Function 0x14c02a600 'strlen' 'unsigned long (const char *)'
|   |     | |     `-ImplicitCastExpr 0x14c02a840 <col:66> 'const char *' <LValueToRValue>
|   |     | |       `-DeclRefExpr 0x14c02a790 <col:66> 'const char *' lvalue Var 0x14c027498 'unescaped' 'const char *'
|   |     | `-BinaryOperator 0x14c02a928 <line:57:13, col:21> 'unsigned int' '='
|   |     |   |-DeclRefExpr 0x14c02a8d0 <col:13> 'unsigned int' lvalue Var 0x14c00dfe8 'beg' 'unsigned int'
|   |     |   `-UnaryOperator 0x14c02a910 <col:19, col:21> 'unsigned int' prefix '++'
|   |     |     `-DeclRefExpr 0x14c02a8f0 <col:21> 'unsigned int' lvalue Var 0x14c00e0b8 'end' 'unsigned int'
|   |     `-CompoundStmt 0x14c02a9c0 <line:58:16, line:60:9>
|   |       `-UnaryOperator 0x14c02a9a8 <line:59:13, col:16> 'unsigned int' postfix '++'
|   |         `-DeclRefExpr 0x14c02a988 <col:13> 'unsigned int' lvalue Var 0x14c00e0b8 'end' 'unsigned int'
|   `-CallExpr 0x14c02aba0 <line:62:5, col:46> '<dependent type>' contains-errors
|     |-DeclRefExpr 0x14c02aa40 <col:5> 'int ()' Function 0x14c027648 'yajl_buf_append' 'int ()'
|     |-RecoveryExpr 0x14c02aa60 <col:21> '<dependent type>' contains-errors lvalue
|     |-BinaryOperator 0x14c02aaf0 <col:26, col:32> 'const unsigned char *' '+'
|     | |-ImplicitCastExpr 0x14c02aac0 <col:26> 'const unsigned char *' <LValueToRValue>
|     | | `-DeclRefExpr 0x14c02aa80 <col:26> 'const unsigned char *' lvalue ParmVar 0x14c00dda8 'str' 'const unsigned char *'
|     | `-ImplicitCastExpr 0x14c02aad8 <col:32> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x14c02aaa0 <col:32> 'unsigned int' lvalue Var 0x14c00dfe8 'beg' 'unsigned int'
|     `-BinaryOperator 0x14c02ab80 <col:37, col:43> 'unsigned int' '-'
|       |-ImplicitCastExpr 0x14c02ab50 <col:37> 'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x14c02ab10 <col:37> 'unsigned int' lvalue Var 0x14c00e0b8 'end' 'unsigned int'
|       `-ImplicitCastExpr 0x14c02ab68 <col:43> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x14c02ab30 <col:43> 'unsigned int' lvalue Var 0x14c00dfe8 'beg' 'unsigned int'
`-FunctionDecl 0x14c02a600 <line:56:59> col:59 implicit used strlen 'unsigned long (const char *)' extern
  |-ParmVarDecl 0x14c02a700 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x14c02a6a8 <<invalid sloc>> Implicit 902
