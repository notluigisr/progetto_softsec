TranslationUnitDecl 0x13e055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x13e0564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x13e055bd0 '__int128'
|-TypedefDecl 0x13e056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x13e055bf0 'unsigned __int128'
|-TypedefDecl 0x13e80be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13e80bc00 'struct __NSConstantString_tag'
|   `-Record 0x13e056580 '__NSConstantString_tag'
|-TypedefDecl 0x13e80be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x13e055d90 '__SVInt8_t'
|-TypedefDecl 0x13e80bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x13e055db0 '__SVInt16_t'
|-TypedefDecl 0x13e80bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x13e055dd0 '__SVInt32_t'
|-TypedefDecl 0x13e80bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x13e055df0 '__SVInt64_t'
|-TypedefDecl 0x13e80c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x13e055e10 '__SVUint8_t'
|-TypedefDecl 0x13e80c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x13e055e30 '__SVUint16_t'
|-TypedefDecl 0x13e80c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x13e055e50 '__SVUint32_t'
|-TypedefDecl 0x13e80c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x13e055e70 '__SVUint64_t'
|-TypedefDecl 0x13e80c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x13e055e90 '__SVFloat16_t'
|-TypedefDecl 0x13e80c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x13e055eb0 '__SVFloat32_t'
|-TypedefDecl 0x13e80c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x13e055ed0 '__SVFloat64_t'
|-TypedefDecl 0x13e80c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x13e055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13e80c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x13e055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13e80c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x13e055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13e80c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x13e055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13e80c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x13e055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13e80c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x13e055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13e80c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x13e055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13e80c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x13e055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13e80c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x13e055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13e80c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x13e056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13e80c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x13e056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13e80c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x13e056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13e80c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x13e056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13e80c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x13e056090 '__clang_svint8x3_t'
|-TypedefDecl 0x13e80c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x13e0560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13e80c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x13e0560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13e80c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x13e0560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13e80c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x13e056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13e80ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x13e056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13e80cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x13e056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13e80cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x13e056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13e80cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x13e056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13e80d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x13e0561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13e80d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x13e0561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13e80d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x13e0561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13e80d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x13e056210 '__clang_svint8x4_t'
|-TypedefDecl 0x13e80d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x13e056230 '__clang_svint16x4_t'
|-TypedefDecl 0x13e80d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x13e056250 '__clang_svint32x4_t'
|-TypedefDecl 0x13e80d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x13e056270 '__clang_svint64x4_t'
|-TypedefDecl 0x13e80d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x13e056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13e80d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x13e0562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13e80d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x13e0562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13e80d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x13e0562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13e80d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x13e056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13e80d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x13e056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13e80d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x13e056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13e80d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x13e056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13e80da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x13e056390 '__SVBool_t'
|-TypedefDecl 0x13e80da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x13e0563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13e80dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x13e0563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13e80db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x13e0563f0 '__SVCount_t'
|-TypedefDecl 0x13e80dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13e80dbb0 'char *'
|   `-BuiltinType 0x13e0556b0 'char'
|-TypedefDecl 0x13e80dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13e80dbb0 'char *'
|   `-BuiltinType 0x13e0556b0 'char'
`-FunctionDecl 0x13e80df18 <dataset_diviso_filec/func4172_vuln.c:1:1, line:73:1> line:1:1 invalid ip_optprint 'int (int *, const char *, int)'
  |-ParmVarDecl 0x13e80dd28 <col:13, col:33> col:33 invalid ndo 'int *'
  |-ParmVarDecl 0x13e80dda8 <line:2:13, col:36> col:36 used cp 'const char *' register
  |-ParmVarDecl 0x13e80de28 <col:40, col:46> col:46 invalid length 'int'
  `-CompoundStmt 0x13e829f90 <line:3:1, line:73:1>
    |-DeclStmt 0x13e80e058 <line:4:2, col:27>
    | `-VarDecl 0x13e80dff0 <col:2, col:17> col:17 referenced invalid option_len 'int' register
    |-DeclStmt 0x13e80e178 <line:5:2, col:22>
    | `-VarDecl 0x13e80e088 <col:2, col:20> col:14 used sep 'const char *' cinit
    |   `-ImplicitCastExpr 0x13e80e160 <col:20> 'const char *' <NoOp>
    |     `-ImplicitCastExpr 0x13e80e148 <col:20> 'char *' <ArrayToPointerDecay>
    |       `-StringLiteral 0x13e80e130 <col:20> 'char[1]' lvalue ""
    |-ForStmt 0x13e829e50 <line:7:2, line:68:2>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-BinaryOperator 0x13e80e1d0 <line:7:9, col:18> 'int' contains-errors '>'
    | | |-RecoveryExpr 0x13e80e190 <col:9> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x13e80e1b0 <col:18> 'int' 0
    | |-BinaryOperator 0x13e80e2d0 <col:21, col:49> '<dependent type>' contains-errors ','
    | | |-CompoundAssignOperator 0x13e80e230 <col:21, col:27> 'const char *' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    | | | |-DeclRefExpr 0x13e80e1f0 <col:21> 'const char *' lvalue ParmVar 0x13e80dda8 'cp' 'const char *'
    | | | `-RecoveryExpr 0x13e80e210 <col:27> '<dependent type>' contains-errors lvalue
    | | `-CompoundAssignOperator 0x13e80e2a0 <col:39, col:49> '<dependent type>' contains-errors '-=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    | |   |-RecoveryExpr 0x13e80e260 <col:39> '<dependent type>' contains-errors lvalue
    | |   `-RecoveryExpr 0x13e80e280 <col:49> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x13e829e08 <col:61, line:68:2>
    |   |-CallExpr 0x13e8275e0 <line:10:3, col:29> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x13e8274b8 <col:3> 'int ()' Function 0x13e827400 'ND_PRINT' 'int ()'
    |   | `-ParenExpr 0x13e8275c0 <col:12, col:28> 'const char *' contains-errors
    |   |   `-BinaryOperator 0x13e8275a0 <col:13, col:25> 'const char *' contains-errors ','
    |   |     |-BinaryOperator 0x13e827560 <col:13, col:18> 'char[4]' contains-errors ','
    |   |     | |-RecoveryExpr 0x13e8274d8 <col:13> '<dependent type>' contains-errors lvalue
    |   |     | `-StringLiteral 0x13e827540 <col:18> 'char[4]' lvalue "STR"
    |   |     `-DeclRefExpr 0x13e827580 <col:25> 'const char *' lvalue Var 0x13e80e088 'sep' 'const char *'
    |   |-BinaryOperator 0x13e827678 <line:11:3, col:9> 'const char *' '='
    |   | |-DeclRefExpr 0x13e827608 <col:3> 'const char *' lvalue Var 0x13e80e088 'sep' 'const char *'
    |   | `-ImplicitCastExpr 0x13e827660 <col:9> 'const char *' <NoOp>
    |   |   `-ImplicitCastExpr 0x13e827648 <col:9> 'char *' <ArrayToPointerDecay>
    |   |     `-StringLiteral 0x13e827628 <col:9> 'char[4]' lvalue "STR"
    |   |-CallExpr 0x13e827838 <line:13:3, col:16> 'int'
    |   | |-ImplicitCastExpr 0x13e827820 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x13e827778 <col:3> 'int ()' Function 0x13e8276c0 'ND_TCHECK' 'int ()'
    |   | `-ImplicitCastExpr 0x13e827878 <col:13, col:14> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x13e827860 <col:13, col:14> 'char' <LValueToRValue>
    |   |     `-UnaryOperator 0x13e8277d0 <col:13, col:14> 'const char' lvalue prefix '*' cannot overflow
    |   |       `-ImplicitCastExpr 0x13e8277b8 <col:14> 'const char *' <LValueToRValue>
    |   |         `-DeclRefExpr 0x13e827798 <col:14> 'const char *' lvalue ParmVar 0x13e80dda8 'cp' 'const char *'
    |   |-IfStmt 0x13e828118 <line:19:3, line:30:3> has_else
    |   | |-BinaryOperator 0x13e827ca8 <line:19:7, line:20:36> 'int' contains-errors '||'
    |   | | |-BinaryOperator 0x13e827c28 <line:19:7, col:22> 'int' contains-errors '=='
    |   | | | |-RecoveryExpr 0x13e827be8 <col:7> '<dependent type>' contains-errors lvalue
    |   | | | `-RecoveryExpr 0x13e827c08 <col:22> '<dependent type>' contains-errors lvalue
    |   | | `-BinaryOperator 0x13e827c88 <line:20:21, col:36> 'int' contains-errors '=='
    |   | |   |-RecoveryExpr 0x13e827c48 <col:21> '<dependent type>' contains-errors lvalue
    |   | |   `-RecoveryExpr 0x13e827c68 <col:36> '<dependent type>' contains-errors lvalue
    |   | |-BinaryOperator 0x13e827d30 <line:21:4, col:17> '<dependent type>' contains-errors '='
    |   | | |-RecoveryExpr 0x13e827ce8 <col:4> '<dependent type>' contains-errors lvalue
    |   | | | `-DeclRefExpr 0x13e827cc8 <col:4> 'int' lvalue Var 0x13e80dff0 'option_len' 'int'
    |   | | `-IntegerLiteral 0x13e827d10 <col:17> 'int' 1
    |   | `-CompoundStmt 0x13e8280f0 <line:23:8, line:30:3>
    |   |   |-CallExpr 0x13e827e00 <line:24:4, col:19> 'int'
    |   |   | |-ImplicitCastExpr 0x13e827de8 <col:4> 'int (*)()' <FunctionToPointerDecay>
    |   |   | | `-DeclRefExpr 0x13e827d50 <col:4> 'int ()' Function 0x13e8276c0 'ND_TCHECK' 'int ()'
    |   |   | `-ImplicitCastExpr 0x13e827e40 <col:14, col:18> 'int' <IntegralCast>
    |   |   |   `-ImplicitCastExpr 0x13e827e28 <col:14, col:18> 'char' <LValueToRValue>
    |   |   |     `-ArraySubscriptExpr 0x13e827dc8 <col:14, col:18> 'const char' lvalue
    |   |   |       |-ImplicitCastExpr 0x13e827db0 <col:14> 'const char *' <LValueToRValue>
    |   |   |       | `-DeclRefExpr 0x13e827d70 <col:14> 'const char *' lvalue ParmVar 0x13e80dda8 'cp' 'const char *'
    |   |   |       `-IntegerLiteral 0x13e827d90 <col:17> 'int' 1
    |   |   |-BinaryOperator 0x13e827f18 <line:25:4, col:21> '<dependent type>' contains-errors '='
    |   |   | |-RecoveryExpr 0x13e827e78 <col:4> '<dependent type>' contains-errors lvalue
    |   |   | | `-DeclRefExpr 0x13e827e58 <col:4> 'int' lvalue Var 0x13e80dff0 'option_len' 'int'
    |   |   | `-ArraySubscriptExpr 0x13e827ef8 <col:17, col:21> 'const char' lvalue
    |   |   |   |-ImplicitCastExpr 0x13e827ee0 <col:17> 'const char *' <LValueToRValue>
    |   |   |   | `-DeclRefExpr 0x13e827ea0 <col:17> 'const char *' lvalue ParmVar 0x13e80dda8 'cp' 'const char *'
    |   |   |   `-IntegerLiteral 0x13e827ec0 <col:20> 'int' 1
    |   |   `-IfStmt 0x13e8280d0 <line:26:4, line:29:4>
    |   |     |-BinaryOperator 0x13e827f78 <line:26:8, col:21> 'int' contains-errors '<'
    |   |     | |-RecoveryExpr 0x13e827f38 <col:8> '<dependent type>' contains-errors lvalue
    |   |     | `-IntegerLiteral 0x13e827f58 <col:21> 'int' 2
    |   |     `-CompoundStmt 0x13e8280b0 <col:24, line:29:4>
    |   |       |-CallExpr 0x13e828078 <line:27:5, col:38> '<dependent type>' contains-errors
    |   |       | |-DeclRefExpr 0x13e827f98 <col:5> 'int ()' Function 0x13e827400 'ND_PRINT' 'int ()'
    |   |       | `-ParenExpr 0x13e828058 <col:14, col:37> '<dependent type>' contains-errors
    |   |       |   `-BinaryOperator 0x13e828038 <col:15, col:27> '<dependent type>' contains-errors ','
    |   |       |     |-BinaryOperator 0x13e827ff8 <col:15, col:20> 'char[4]' contains-errors ','
    |   |       |     | |-RecoveryExpr 0x13e827fb8 <col:15> '<dependent type>' contains-errors lvalue
    |   |       |     | `-StringLiteral 0x13e827fd8 <col:20> 'char[4]' lvalue "STR"
    |   |       |     `-RecoveryExpr 0x13e828018 <col:27> '<dependent type>' contains-errors lvalue
    |   |       `-ReturnStmt 0x13e8280a0 <line:28:5>
    |   |-IfStmt 0x13e8282e0 <line:32:3, line:35:3>
    |   | |-BinaryOperator 0x13e828188 <line:32:7, col:20> 'int' contains-errors '>'
    |   | | |-RecoveryExpr 0x13e828148 <col:7> '<dependent type>' contains-errors lvalue
    |   | | `-RecoveryExpr 0x13e828168 <col:20> '<dependent type>' contains-errors lvalue
    |   | `-CompoundStmt 0x13e8282c0 <col:28, line:35:3>
    |   |   |-CallExpr 0x13e828288 <line:33:4, col:37> '<dependent type>' contains-errors
    |   |   | |-DeclRefExpr 0x13e8281a8 <col:4> 'int ()' Function 0x13e827400 'ND_PRINT' 'int ()'
    |   |   | `-ParenExpr 0x13e828268 <col:13, col:36> '<dependent type>' contains-errors
    |   |   |   `-BinaryOperator 0x13e828248 <col:14, col:26> '<dependent type>' contains-errors ','
    |   |   |     |-BinaryOperator 0x13e828208 <col:14, col:19> 'char[4]' contains-errors ','
    |   |   |     | |-RecoveryExpr 0x13e8281c8 <col:14> '<dependent type>' contains-errors lvalue
    |   |   |     | `-StringLiteral 0x13e8281e8 <col:19> 'char[4]' lvalue "STR"
    |   |   |     `-RecoveryExpr 0x13e828228 <col:26> '<dependent type>' contains-errors lvalue
    |   |   `-ReturnStmt 0x13e8282b0 <line:34:4>
    |   |-CallExpr 0x13e829270 <line:37:3, col:29> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x13e8283e0 <col:3> 'int ()' Function 0x13e828328 'ND_TCHECK2' 'int ()'
    |   | |-UnaryOperator 0x13e829238 <col:14, col:15> 'const char' lvalue prefix '*' cannot overflow
    |   | | `-ImplicitCastExpr 0x13e829220 <col:15> 'const char *' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x13e829200 <col:15> 'const char *' lvalue ParmVar 0x13e80dda8 'cp' 'const char *'
    |   | `-RecoveryExpr 0x13e829250 <col:19> '<dependent type>' contains-errors lvalue
    |   `-SwitchStmt 0x13e829310 <line:39:3, line:67:3>
    |     |-RecoveryExpr 0x13e8292f0 <line:39:11> '<dependent type>' contains-errors lvalue
    |     `-CompoundStmt 0x13e829da8 <col:24, line:67:3>
    |       |-ReturnStmt 0x13e829350 <line:41:4>
    |       |-CallExpr 0x13e8294d8 <line:44:4, col:34> '<dependent type>' contains-errors
    |       | |-DeclRefExpr 0x13e829458 <col:4> 'int ()' Function 0x13e8293a0 'ip_printts' 'int ()'
    |       | |-RecoveryExpr 0x13e829478 <col:15> '<dependent type>' contains-errors lvalue
    |       | |-DeclRefExpr 0x13e829498 <col:20> 'const char *' lvalue ParmVar 0x13e80dda8 'cp' 'const char *'
    |       | `-RecoveryExpr 0x13e8294b8 <col:24> '<dependent type>' contains-errors lvalue
    |       |-BreakStmt 0x13e829510 <line:45:4>
    |       |-CallExpr 0x13e829678 <line:50:4, col:37> '<dependent type>' contains-errors
    |       | |-DeclRefExpr 0x13e8295f8 <col:4> 'int ()' Function 0x13e829540 'ip_printroute' 'int ()'
    |       | |-RecoveryExpr 0x13e829618 <col:18> '<dependent type>' contains-errors lvalue
    |       | |-DeclRefExpr 0x13e829638 <col:23> 'const char *' lvalue ParmVar 0x13e80dda8 'cp' 'const char *'
    |       | `-RecoveryExpr 0x13e829658 <col:27> '<dependent type>' contains-errors lvalue
    |       |-BreakStmt 0x13e8296b0 <line:51:4>
    |       |-IfStmt 0x13e829848 <line:54:4, line:57:4>
    |       | |-BinaryOperator 0x13e8296f8 <line:54:8, col:21> 'int' contains-errors '<'
    |       | | |-RecoveryExpr 0x13e8296b8 <col:8> '<dependent type>' contains-errors lvalue
    |       | | `-IntegerLiteral 0x13e8296d8 <col:21> 'int' 4
    |       | `-CompoundStmt 0x13e829828 <col:24, line:57:4>
    |       |   |-CallExpr 0x13e8297f8 <line:55:5, col:38> '<dependent type>' contains-errors
    |       |   | |-DeclRefExpr 0x13e829718 <col:5> 'int ()' Function 0x13e827400 'ND_PRINT' 'int ()'
    |       |   | `-ParenExpr 0x13e8297d8 <col:14, col:37> '<dependent type>' contains-errors
    |       |   |   `-BinaryOperator 0x13e8297b8 <col:15, col:27> '<dependent type>' contains-errors ','
    |       |   |     |-BinaryOperator 0x13e829778 <col:15, col:20> 'char[4]' contains-errors ','
    |       |   |     | |-RecoveryExpr 0x13e829738 <col:15> '<dependent type>' contains-errors lvalue
    |       |   |     | `-StringLiteral 0x13e829758 <col:20> 'char[4]' lvalue "STR"
    |       |   |     `-RecoveryExpr 0x13e829798 <col:27> '<dependent type>' contains-errors lvalue
    |       |   `-BreakStmt 0x13e829820 <line:56:5>
    |       |-CallExpr 0x13e829918 <line:58:4, col:19> 'int'
    |       | |-ImplicitCastExpr 0x13e829900 <col:4> 'int (*)()' <FunctionToPointerDecay>
    |       | | `-DeclRefExpr 0x13e829868 <col:4> 'int ()' Function 0x13e8276c0 'ND_TCHECK' 'int ()'
    |       | `-ImplicitCastExpr 0x13e829958 <col:14, col:18> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x13e829940 <col:14, col:18> 'char' <LValueToRValue>
    |       |     `-ArraySubscriptExpr 0x13e8298e0 <col:14, col:18> 'const char' lvalue
    |       |       |-ImplicitCastExpr 0x13e8298c8 <col:14> 'const char *' <LValueToRValue>
    |       |       | `-DeclRefExpr 0x13e829888 <col:14> 'const char *' lvalue ParmVar 0x13e80dda8 'cp' 'const char *'
    |       |       `-IntegerLiteral 0x13e8298a8 <col:17> 'int' 3
    |       |-IfStmt 0x13e829d58 <line:59:4, line:60:50>
    |       | |-BinaryOperator 0x13e829b60 <line:59:8, col:34> 'int' '!='
    |       | | |-CallExpr 0x13e829b18 <col:8, col:29> 'int'
    |       | | | |-ImplicitCastExpr 0x13e829b00 <col:8> 'int (*)()' <FunctionToPointerDecay>
    |       | | | | `-DeclRefExpr 0x13e829a50 <col:8> 'int ()' Function 0x13e829998 'EXTRACT_16BITS' 'int ()'
    |       | | | `-UnaryOperator 0x13e829ae8 <col:23, col:28> 'const char *' prefix '&' cannot overflow
    |       | | |   `-ArraySubscriptExpr 0x13e829ac8 <col:24, col:28> 'const char' lvalue
    |       | | |     |-ImplicitCastExpr 0x13e829ab0 <col:24> 'const char *' <LValueToRValue>
    |       | | |     | `-DeclRefExpr 0x13e829a70 <col:24> 'const char *' lvalue ParmVar 0x13e80dda8 'cp' 'const char *'
    |       | | |     `-IntegerLiteral 0x13e829a90 <col:27> 'int' 2
    |       | | `-IntegerLiteral 0x13e829b40 <col:34> 'int' 0
    |       | `-CallExpr 0x13e829d30 <line:60:5, col:50> '<dependent type>' contains-errors
    |       |   |-DeclRefExpr 0x13e829b80 <col:5> 'int ()' Function 0x13e827400 'ND_PRINT' 'int ()'
    |       |   `-ParenExpr 0x13e829d10 <col:14, col:49> 'int' contains-errors
    |       |     `-BinaryOperator 0x13e829cf0 <col:15, col:48> 'int' contains-errors ','
    |       |       |-BinaryOperator 0x13e829be0 <col:15, col:20> 'char[4]' contains-errors ','
    |       |       | |-RecoveryExpr 0x13e829ba0 <col:15> '<dependent type>' contains-errors lvalue
    |       |       | `-StringLiteral 0x13e829bc0 <col:20> 'char[4]' lvalue "STR"
    |       |       `-CallExpr 0x13e829cc8 <col:27, col:48> 'int'
    |       |         |-ImplicitCastExpr 0x13e829cb0 <col:27> 'int (*)()' <FunctionToPointerDecay>
    |       |         | `-DeclRefExpr 0x13e829c00 <col:27> 'int ()' Function 0x13e829998 'EXTRACT_16BITS' 'int ()'
    |       |         `-UnaryOperator 0x13e829c98 <col:42, col:47> 'const char *' prefix '&' cannot overflow
    |       |           `-ArraySubscriptExpr 0x13e829c78 <col:43, col:47> 'const char' lvalue
    |       |             |-ImplicitCastExpr 0x13e829c60 <col:43> 'const char *' <LValueToRValue>
    |       |             | `-DeclRefExpr 0x13e829c20 <col:43> 'const char *' lvalue ParmVar 0x13e80dda8 'cp' 'const char *'
    |       |             `-IntegerLiteral 0x13e829c40 <col:46> 'int' 2
    |       |-BreakStmt 0x13e829d78 <line:61:4>
    |       `-DefaultStmt 0x13e829d88 <line:65:3, line:66:4>
    |         `-BreakStmt 0x13e829d80 <col:4>
    |-ReturnStmt 0x13e829e88 <line:69:2>
    `-LabelStmt 0x13e829f70 <line:71:1, col:6> 'trunc'
      `-NullStmt 0x13e829f18 <col:6>
