TranslationUnitDecl 0x122855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1228564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x122855bd0 '__int128'
|-TypedefDecl 0x122856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x122855bf0 'unsigned __int128'
|-TypedefDecl 0x12300be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12300bc00 'struct __NSConstantString_tag'
|   `-Record 0x122856580 '__NSConstantString_tag'
|-TypedefDecl 0x12300be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x122855d90 '__SVInt8_t'
|-TypedefDecl 0x12300bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x122855db0 '__SVInt16_t'
|-TypedefDecl 0x12300bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x122855dd0 '__SVInt32_t'
|-TypedefDecl 0x12300bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x122855df0 '__SVInt64_t'
|-TypedefDecl 0x12300c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x122855e10 '__SVUint8_t'
|-TypedefDecl 0x12300c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x122855e30 '__SVUint16_t'
|-TypedefDecl 0x12300c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x122855e50 '__SVUint32_t'
|-TypedefDecl 0x12300c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x122855e70 '__SVUint64_t'
|-TypedefDecl 0x12300c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x122855e90 '__SVFloat16_t'
|-TypedefDecl 0x12300c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x122855eb0 '__SVFloat32_t'
|-TypedefDecl 0x12300c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x122855ed0 '__SVFloat64_t'
|-TypedefDecl 0x12300c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x122855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12300c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x122855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12300c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x122855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12300c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x122855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12300c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x122855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12300c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x122855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12300c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x122855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12300c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x122855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12300c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x122855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12300c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x122856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12300c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x122856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12300c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x122856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12300c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x122856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12300c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x122856090 '__clang_svint8x3_t'
|-TypedefDecl 0x12300c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1228560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12300c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1228560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12300c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1228560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12300c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x122856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12300ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x122856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12300cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x122856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12300cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x122856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12300cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x122856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12300d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1228561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12300d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1228561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12300d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1228561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12300d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x122856210 '__clang_svint8x4_t'
|-TypedefDecl 0x12300d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x122856230 '__clang_svint16x4_t'
|-TypedefDecl 0x12300d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x122856250 '__clang_svint32x4_t'
|-TypedefDecl 0x12300d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x122856270 '__clang_svint64x4_t'
|-TypedefDecl 0x12300d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x122856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12300d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1228562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12300d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1228562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12300d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1228562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12300d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x122856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12300d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x122856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12300d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x122856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12300d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x122856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12300da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x122856390 '__SVBool_t'
|-TypedefDecl 0x12300da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1228563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12300dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1228563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12300db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1228563f0 '__SVCount_t'
|-TypedefDecl 0x12300dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12300dbb0 'char *'
|   `-BuiltinType 0x1228556b0 'char'
|-TypedefDecl 0x12300dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12300dbb0 'char *'
|   `-BuiltinType 0x1228556b0 'char'
|-FunctionDecl 0x12300df88 <dataset_diviso_filec/func12907_nonvuln.c:1:1, line:39:1> line:1:12 cuse_parse_one 'int (char **, char *, char **, char **)' static
| |-ParmVarDecl 0x12300dd08 <col:27, col:34> col:34 used pp 'char **'
| |-ParmVarDecl 0x12300dd88 <col:38, col:44> col:44 used end 'char *'
| |-ParmVarDecl 0x12300de08 <col:49, col:56> col:56 used keyp 'char **'
| |-ParmVarDecl 0x12300de88 <col:62, col:69> col:69 used valp 'char **'
| `-CompoundStmt 0x122923758 <line:2:1, line:39:1>
|   |-DeclStmt 0x12300e180 <line:3:2, col:15>
|   | `-VarDecl 0x12300e0b0 <col:2, col:13> col:8 used p 'char *' cinit
|   |   `-ImplicitCastExpr 0x12300e168 <col:12, col:13> 'char *' <LValueToRValue>
|   |     `-UnaryOperator 0x12300e150 <col:12, col:13> 'char *' lvalue prefix '*' cannot overflow
|   |       `-ImplicitCastExpr 0x12300e138 <col:13> 'char **' <LValueToRValue>
|   |         `-DeclRefExpr 0x12300e118 <col:13> 'char **' lvalue ParmVar 0x12300dd08 'pp' 'char **'
|   |-DeclStmt 0x12300e2b0 <line:4:2, col:17>
|   | |-VarDecl 0x12300e1b0 <col:2, col:8> col:8 used key 'char *'
|   | `-VarDecl 0x12300e230 <col:2, col:14> col:14 used val 'char *'
|   |-WhileStmt 0x123026678 <line:6:2, line:7:4>
|   | |-BinaryOperator 0x123026620 <line:6:9, col:26> 'int' '&&'
|   | | |-BinaryOperator 0x12300e338 <col:9, col:13> 'int' '<'
|   | | | |-ImplicitCastExpr 0x12300e308 <col:9> 'char *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x12300e2c8 <col:9> 'char *' lvalue Var 0x12300e0b0 'p' 'char *'
|   | | | `-ImplicitCastExpr 0x12300e320 <col:13> 'char *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x12300e2e8 <col:13> 'char *' lvalue ParmVar 0x12300dd88 'end' 'char *'
|   | | `-BinaryOperator 0x123026600 <col:20, col:26> 'int' '=='
|   | |   |-ImplicitCastExpr 0x12300e3d8 <col:20, col:21> 'int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x12300e3c0 <col:20, col:21> 'char' <LValueToRValue>
|   | |   |   `-UnaryOperator 0x12300e390 <col:20, col:21> 'char' lvalue prefix '*' cannot overflow
|   | |   |     `-ImplicitCastExpr 0x12300e378 <col:21> 'char *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x12300e358 <col:21> 'char *' lvalue Var 0x12300e0b0 'p' 'char *'
|   | |   `-CharacterLiteral 0x12300e3a8 <col:26> 'int' 0
|   | `-UnaryOperator 0x123026660 <line:7:3, col:4> 'char *' postfix '++'
|   |   `-DeclRefExpr 0x123026640 <col:3> 'char *' lvalue Var 0x12300e0b0 'p' 'char *'
|   |-IfStmt 0x123026758 <line:8:2, line:9:10>
|   | |-BinaryOperator 0x123026708 <line:8:6, col:11> 'int' '=='
|   | | |-ImplicitCastExpr 0x1230266d8 <col:6> 'char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x123026698 <col:6> 'char *' lvalue Var 0x12300e0b0 'p' 'char *'
|   | | `-ImplicitCastExpr 0x1230266f0 <col:11> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1230266b8 <col:11> 'char *' lvalue ParmVar 0x12300dd88 'end' 'char *'
|   | `-ReturnStmt 0x123026748 <line:9:3, col:10>
|   |   `-IntegerLiteral 0x123026728 <col:10> 'int' 0
|   |-IfStmt 0x123026a98 <line:11:2, line:14:2>
|   | |-BinaryOperator 0x123026850 <line:11:6, col:17> 'int' '!='
|   | | |-ImplicitCastExpr 0x123026838 <col:6, col:12> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x123026820 <col:6, col:12> 'char' <LValueToRValue>
|   | | |   `-ArraySubscriptExpr 0x1230267e8 <col:6, col:12> 'char' lvalue
|   | | |     |-ImplicitCastExpr 0x1230267d0 <col:6> 'char *' <LValueToRValue>
|   | | |     | `-DeclRefExpr 0x123026778 <col:6> 'char *' lvalue ParmVar 0x12300dd88 'end' 'char *'
|   | | |     `-UnaryOperator 0x1230267b8 <col:10, col:11> 'int' prefix '-'
|   | | |       `-IntegerLiteral 0x123026798 <col:11> 'int' 1
|   | | `-CharacterLiteral 0x123026808 <col:17> 'int' 0
|   | `-CompoundStmt 0x123026a80 <col:23, line:14:2>
|   |   `-ReturnStmt 0x123026a70 <line:13:3, col:11>
|   |     `-UnaryOperator 0x123026a58 <col:10, col:11> '<dependent type>' contains-errors prefix '-' cannot overflow
|   |       `-ImplicitCastExpr 0x123026a40 <col:11> '<dependent type>' contains-errors <LValueToRValue>
|   |         `-RecoveryExpr 0x123026a20 <col:11> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x123026b50 <line:16:2, col:14> 'char *' '='
|   | |-DeclRefExpr 0x123026ab8 <col:2> 'char *' lvalue Var 0x12300e1b0 'key' 'char *'
|   | `-BinaryOperator 0x123026b30 <col:8, col:14> 'char *' '='
|   |   |-DeclRefExpr 0x123026ad8 <col:8> 'char *' lvalue Var 0x12300e230 'val' 'char *'
|   |   `-ImplicitCastExpr 0x123026b18 <col:14> 'char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x123026af8 <col:14> 'char *' lvalue Var 0x12300e0b0 'p' 'char *'
|   |-CompoundAssignOperator 0x123027260 <line:17:2, col:15> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
|   | |-DeclRefExpr 0x123026b70 <col:2> 'char *' lvalue Var 0x12300e0b0 'p' 'char *'
|   | `-CallExpr 0x123027208 <col:7, col:15> 'unsigned long'
|   |   |-ImplicitCastExpr 0x1230271f0 <col:7> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x123027160 <col:7> 'unsigned long (const char *)' Function 0x123026ff0 'strlen' 'unsigned long (const char *)'
|   |   `-ImplicitCastExpr 0x123027248 <col:14> 'const char *' <NoOp>
|   |     `-ImplicitCastExpr 0x123027230 <col:14> 'char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x123027180 <col:14> 'char *' lvalue Var 0x12300e0b0 'p' 'char *'
|   |-IfStmt 0x1229232b0 <line:19:2, line:26:21> has_else
|   | |-ImplicitCastExpr 0x1230272b0 <line:19:6> 'char **' <LValueToRValue>
|   | | `-DeclRefExpr 0x123027290 <col:6> 'char **' lvalue ParmVar 0x12300de88 'valp' 'char **'
|   | |-CompoundStmt 0x122923190 <col:12, line:25:2>
|   | | |-CallExpr 0x1230274a8 <line:20:3, col:21> 'int'
|   | | | |-ImplicitCastExpr 0x123027490 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1230273a8 <col:3> 'int ()' Function 0x1230272f0 'strsep' 'int ()'
|   | | | |-UnaryOperator 0x1230273e8 <col:10, col:11> 'char **' prefix '&' cannot overflow
|   | | | | `-DeclRefExpr 0x1230273c8 <col:11> 'char *' lvalue Var 0x12300e230 'val' 'char *'
|   | | | `-ImplicitCastExpr 0x1230274d8 <col:16> 'char *' <ArrayToPointerDecay>
|   | | |   `-StringLiteral 0x123027440 <col:16> 'char[4]' lvalue "STR"
|   | | |-IfStmt 0x122922eb0 <line:21:3, line:22:26>
|   | | | |-UnaryOperator 0x123027528 <line:21:7, col:8> 'int' prefix '!' cannot overflow
|   | | | | `-ImplicitCastExpr 0x123027510 <col:8> 'char *' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x1230274f0 <col:8> 'char *' lvalue Var 0x12300e230 'val' 'char *'
|   | | | `-BinaryOperator 0x122922e90 <line:22:4, col:26> 'char *' '='
|   | | |   |-DeclRefExpr 0x123027540 <col:4> 'char *' lvalue Var 0x12300e230 'val' 'char *'
|   | | |   `-BinaryOperator 0x122922e70 <col:10, col:26> 'char *' '+'
|   | | |     |-ImplicitCastExpr 0x122922e58 <col:10> 'char *' <LValueToRValue>
|   | | |     | `-DeclRefExpr 0x123027560 <col:10> 'char *' lvalue Var 0x12300e1b0 'key' 'char *'
|   | | |     `-CallExpr 0x122922e00 <col:16, col:26> 'unsigned long'
|   | | |       |-ImplicitCastExpr 0x1230275d8 <col:16> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   | | |       | `-DeclRefExpr 0x123027580 <col:16> 'unsigned long (const char *)' Function 0x123026ff0 'strlen' 'unsigned long (const char *)'
|   | | |       `-ImplicitCastExpr 0x122922e40 <col:23> 'const char *' <NoOp>
|   | | |         `-ImplicitCastExpr 0x122922e28 <col:23> 'char *' <LValueToRValue>
|   | | |           `-DeclRefExpr 0x1230275a0 <col:23> 'char *' lvalue Var 0x12300e1b0 'key' 'char *'
|   | | |-BinaryOperator 0x122923080 <line:23:3, col:21> 'char *' '='
|   | | | |-DeclRefExpr 0x122922ed0 <col:3> 'char *' lvalue Var 0x12300e1b0 'key' 'char *'
|   | | | `-ImplicitCastExpr 0x122923068 <col:9, col:21> 'char *' <IntegralToPointer>
|   | | |   `-CallExpr 0x122923028 <col:9, col:21> 'int'
|   | | |     |-ImplicitCastExpr 0x122923010 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   | | |     | `-DeclRefExpr 0x122922fd0 <col:9> 'int ()' Function 0x122922f18 'strstrip' 'int ()'
|   | | |     `-ImplicitCastExpr 0x122923050 <col:18> 'char *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x122922ff0 <col:18> 'char *' lvalue Var 0x12300e1b0 'key' 'char *'
|   | | `-BinaryOperator 0x122923170 <line:24:3, col:21> 'char *' '='
|   | |   |-DeclRefExpr 0x1229230a0 <col:3> 'char *' lvalue Var 0x12300e230 'val' 'char *'
|   | |   `-ImplicitCastExpr 0x122923158 <col:9, col:21> 'char *' <IntegralToPointer>
|   | |     `-CallExpr 0x122923118 <col:9, col:21> 'int'
|   | |       |-ImplicitCastExpr 0x122923100 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x1229230c0 <col:9> 'int ()' Function 0x122922f18 'strstrip' 'int ()'
|   | |       `-ImplicitCastExpr 0x122923140 <col:18> 'char *' <LValueToRValue>
|   | |         `-DeclRefExpr 0x1229230e0 <col:18> 'char *' lvalue Var 0x12300e230 'val' 'char *'
|   | `-BinaryOperator 0x122923290 <line:26:3, col:21> 'char *' '='
|   |   |-DeclRefExpr 0x1229231c0 <col:3> 'char *' lvalue Var 0x12300e1b0 'key' 'char *'
|   |   `-ImplicitCastExpr 0x122923278 <col:9, col:21> 'char *' <IntegralToPointer>
|   |     `-CallExpr 0x122923238 <col:9, col:21> 'int'
|   |       |-ImplicitCastExpr 0x122923220 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x1229231e0 <col:9> 'int ()' Function 0x122922f18 'strstrip' 'int ()'
|   |       `-ImplicitCastExpr 0x122923260 <col:18> 'char *' <LValueToRValue>
|   |         `-DeclRefExpr 0x122923200 <col:18> 'char *' lvalue Var 0x12300e1b0 'key' 'char *'
|   |-IfStmt 0x1229234b8 <line:28:2, line:31:2>
|   | |-UnaryOperator 0x1229233a8 <line:28:6, col:17> 'int' prefix '!' cannot overflow
|   | | `-CallExpr 0x122923350 <col:7, col:17> 'unsigned long'
|   | |   |-ImplicitCastExpr 0x122923338 <col:7> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x1229232e0 <col:7> 'unsigned long (const char *)' Function 0x123026ff0 'strlen' 'unsigned long (const char *)'
|   | |   `-ImplicitCastExpr 0x122923390 <col:14> 'const char *' <NoOp>
|   | |     `-ImplicitCastExpr 0x122923378 <col:14> 'char *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x122923300 <col:14> 'char *' lvalue Var 0x12300e1b0 'key' 'char *'
|   | `-CompoundStmt 0x1229234a0 <col:20, line:31:2>
|   |   `-ReturnStmt 0x122923490 <line:30:3, col:11>
|   |     `-UnaryOperator 0x122923478 <col:10, col:11> '<dependent type>' contains-errors prefix '-' cannot overflow
|   |       `-ImplicitCastExpr 0x122923460 <col:11> '<dependent type>' contains-errors <LValueToRValue>
|   |         `-RecoveryExpr 0x122923440 <col:11> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x122923560 <line:33:2, col:8> 'char *' '='
|   | |-UnaryOperator 0x122923510 <col:2, col:3> 'char *' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x1229234f8 <col:3> 'char **' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1229234d8 <col:3> 'char **' lvalue ParmVar 0x12300dd08 'pp' 'char **'
|   | `-ImplicitCastExpr 0x122923548 <col:8> 'char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x122923528 <col:8> 'char *' lvalue Var 0x12300e0b0 'p' 'char *'
|   |-BinaryOperator 0x122923608 <line:34:2, col:10> 'char *' '='
|   | |-UnaryOperator 0x1229235b8 <col:2, col:3> 'char *' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x1229235a0 <col:3> 'char **' <LValueToRValue>
|   | |   `-DeclRefExpr 0x122923580 <col:3> 'char **' lvalue ParmVar 0x12300de08 'keyp' 'char **'
|   | `-ImplicitCastExpr 0x1229235f0 <col:10> 'char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1229235d0 <col:10> 'char *' lvalue Var 0x12300e1b0 'key' 'char *'
|   |-IfStmt 0x122923708 <line:35:2, line:36:11>
|   | |-ImplicitCastExpr 0x122923648 <line:35:6> 'char **' <LValueToRValue>
|   | | `-DeclRefExpr 0x122923628 <col:6> 'char **' lvalue ParmVar 0x12300de88 'valp' 'char **'
|   | `-BinaryOperator 0x1229236e8 <line:36:3, col:11> 'char *' '='
|   |   |-UnaryOperator 0x122923698 <col:3, col:4> 'char *' lvalue prefix '*' cannot overflow
|   |   | `-ImplicitCastExpr 0x122923680 <col:4> 'char **' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x122923660 <col:4> 'char **' lvalue ParmVar 0x12300de88 'valp' 'char **'
|   |   `-ImplicitCastExpr 0x1229236d0 <col:11> 'char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1229236b0 <col:11> 'char *' lvalue Var 0x12300e230 'val' 'char *'
|   `-ReturnStmt 0x122923748 <line:38:2, col:9>
|     `-IntegerLiteral 0x122923728 <col:9> 'int' 1
`-FunctionDecl 0x123026ff0 <line:17:7> col:7 implicit used strlen 'unsigned long (const char *)' extern
  |-ParmVarDecl 0x1230270f0 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x123027098 <<invalid sloc>> Implicit 902
