TranslationUnitDecl 0x13f852608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x13f8534b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x13f852bd0 '__int128'
|-TypedefDecl 0x13f853528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x13f852bf0 'unsigned __int128'
|-TypedefDecl 0x13f923230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13f923000 'struct __NSConstantString_tag'
|   `-Record 0x13f853580 '__NSConstantString_tag'
|-TypedefDecl 0x13f923298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x13f852d90 '__SVInt8_t'
|-TypedefDecl 0x13f923300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x13f852db0 '__SVInt16_t'
|-TypedefDecl 0x13f923368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x13f852dd0 '__SVInt32_t'
|-TypedefDecl 0x13f9233d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x13f852df0 '__SVInt64_t'
|-TypedefDecl 0x13f923438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x13f852e10 '__SVUint8_t'
|-TypedefDecl 0x13f9234a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x13f852e30 '__SVUint16_t'
|-TypedefDecl 0x13f923508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x13f852e50 '__SVUint32_t'
|-TypedefDecl 0x13f923570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x13f852e70 '__SVUint64_t'
|-TypedefDecl 0x13f9235d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x13f852e90 '__SVFloat16_t'
|-TypedefDecl 0x13f923640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x13f852eb0 '__SVFloat32_t'
|-TypedefDecl 0x13f9236a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x13f852ed0 '__SVFloat64_t'
|-TypedefDecl 0x13f923710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x13f852ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13f923778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x13f852f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13f9237e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x13f852f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13f923848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x13f852f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13f9238b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x13f852f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13f923918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x13f852f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13f923980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x13f852fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13f9239e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x13f852fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13f923a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x13f852ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13f923ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x13f853010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13f923b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x13f853030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13f923b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x13f853050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13f923bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x13f853070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13f923c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x13f853090 '__clang_svint8x3_t'
|-TypedefDecl 0x13f923cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x13f8530b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13f923d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x13f8530d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13f923d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x13f8530f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13f923df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x13f853110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13f923e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x13f853130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13f923ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x13f853150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13f923f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x13f853170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13f923f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x13f853190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13f924800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x13f8531b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13f924868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x13f8531d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13f9248d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x13f8531f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13f924938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x13f853210 '__clang_svint8x4_t'
|-TypedefDecl 0x13f9249a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x13f853230 '__clang_svint16x4_t'
|-TypedefDecl 0x13f924a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x13f853250 '__clang_svint32x4_t'
|-TypedefDecl 0x13f924a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x13f853270 '__clang_svint64x4_t'
|-TypedefDecl 0x13f924ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x13f853290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13f924b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x13f8532b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13f924ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x13f8532d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13f924c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x13f8532f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13f924c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x13f853310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13f924ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x13f853330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13f924d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x13f853350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13f924db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x13f853370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13f924e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x13f853390 '__SVBool_t'
|-TypedefDecl 0x13f924e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x13f8533b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13f924ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x13f8533d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13f924f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x13f8533f0 '__SVCount_t'
|-TypedefDecl 0x13f924ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13f924fb0 'char *'
|   `-BuiltinType 0x13f8526b0 'char'
|-TypedefDecl 0x13f925068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13f924fb0 'char *'
|   `-BuiltinType 0x13f8526b0 'char'
|-FunctionDecl 0x13f925288 <dataset_diviso_filec/func12877_vuln.c:1:1, line:58:1> line:1:1 invalid bilinear_magnify_make_weights 'int (int *, double)'
| |-ParmVarDecl 0x13f925128 <col:32, col:55> col:55 referenced invalid dim 'int *'
| |-ParmVarDecl 0x13f9251a8 <line:2:11, col:34> col:34 used scale 'double'
| `-CompoundStmt 0x13f93ec90 <line:3:1, line:58:1>
|   |-DeclStmt 0x13f9253f0 <line:4:3, col:24>
|   | `-VarDecl 0x13f925388 <col:3, col:11> col:11 used pixel_weights 'double *'
|   |-DeclStmt 0x13f925488 <line:5:3, col:8>
|   | `-VarDecl 0x13f925420 <col:3, col:7> col:7 used n 'int'
|   |-DeclStmt 0x13f925520 <line:6:3, col:13>
|   | `-VarDecl 0x13f9254b8 <col:3, col:7> col:7 used offset 'int'
|   |-DeclStmt 0x13f9255b8 <line:7:3, col:8>
|   | `-VarDecl 0x13f925550 <col:3, col:7> col:7 used i 'int'
|   |-IfStmt 0x12f809598 <line:9:3, line:18:5> has_else
|   | |-BinaryOperator 0x13f925628 <line:9:7, col:15> 'int' '>'
|   | | |-ImplicitCastExpr 0x13f925610 <col:7> 'double' <LValueToRValue>
|   | | | `-DeclRefExpr 0x13f9255d0 <col:7> 'double' lvalue ParmVar 0x13f9251a8 'scale' 'double'
|   | | `-FloatingLiteral 0x13f9255f0 <col:15> 'double' 1.000000e+00
|   | |-CompoundStmt 0x12f808cb8 <line:10:5, line:13:5>
|   | | |-BinaryOperator 0x13f925688 <line:11:7, col:11> 'int' '='
|   | | | |-DeclRefExpr 0x13f925648 <col:7> 'int' lvalue Var 0x13f925420 'n' 'int'
|   | | | `-IntegerLiteral 0x13f925668 <col:11> 'int' 2
|   | | `-BinaryOperator 0x12f808c98 <line:12:7, col:41> '<dependent type>' contains-errors '='
|   | |   |-CXXDependentScopeMemberExpr 0x13f9256f0 <col:7, col:12> '<dependent type>' contains-errors lvalue ->offset
|   | |   | `-RecoveryExpr 0x13f9256c8 <col:7> '<dependent type>' contains-errors lvalue
|   | |   |   `-DeclRefExpr 0x13f9256a8 <col:7> 'int *' lvalue ParmVar 0x13f925128 'dim' 'int *'
|   | |   `-BinaryOperator 0x12f808c78 <col:21, col:41> 'double' '*'
|   | |     |-FloatingLiteral 0x13f925738 <col:21> 'double' 5.000000e-01
|   | |     `-ParenExpr 0x12f808c58 <col:27, col:41> 'double'
|   | |       `-BinaryOperator 0x12f808c38 <col:28, col:40> 'double' '-'
|   | |         |-BinaryOperator 0x13f9257c8 <col:28, col:32> 'double' '/'
|   | |         | |-ImplicitCastExpr 0x13f9257b0 <col:28> 'double' <IntegralToFloating>
|   | |         | | `-IntegerLiteral 0x13f925758 <col:28> 'int' 1
|   | |         | `-ImplicitCastExpr 0x13f925798 <col:32> 'double' <LValueToRValue>
|   | |         |   `-DeclRefExpr 0x13f925778 <col:32> 'double' lvalue ParmVar 0x13f9251a8 'scale' 'double'
|   | |         `-ImplicitCastExpr 0x12f808c20 <col:40> 'double' <IntegralToFloating>
|   | |           `-IntegerLiteral 0x12f808c00 <col:40> 'int' 1
|   | `-CompoundStmt 0x12f809578 <line:15:5, line:18:5>
|   |   |-BinaryOperator 0x12f809488 <line:16:7, col:34> 'int' '='
|   |   | |-DeclRefExpr 0x12f808cd8 <col:7> 'int' lvalue Var 0x13f925420 'n' 'int'
|   |   | `-ImplicitCastExpr 0x12f809470 <col:11, col:34> 'int' <FloatingToIntegral>
|   |   |   `-CallExpr 0x12f809448 <col:11, col:34> 'double'
|   |   |     |-ImplicitCastExpr 0x12f809430 <col:11> 'double (*)(double)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x12f809320 <col:11> 'double (double)' Function 0x12f809160 'ceil' 'double (double)'
|   |   |     `-BinaryOperator 0x12f8093d8 <col:17, col:29> 'double' '+'
|   |   |       |-FloatingLiteral 0x12f809340 <col:17> 'double' 1.000000e+00
|   |   |       `-BinaryOperator 0x12f8093b8 <col:23, col:29> 'double' '/'
|   |   |         |-FloatingLiteral 0x12f809360 <col:23> 'double' 1.000000e+00
|   |   |         `-ImplicitCastExpr 0x12f8093a0 <col:29> 'double' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x12f809380 <col:29> 'double' lvalue ParmVar 0x13f9251a8 'scale' 'double'
|   |   `-BinaryOperator 0x12f809558 <line:17:7, col:21> '<dependent type>' contains-errors '='
|   |     |-CXXDependentScopeMemberExpr 0x12f8094f0 <col:7, col:12> '<dependent type>' contains-errors lvalue ->offset
|   |     | `-RecoveryExpr 0x12f8094c8 <col:7> '<dependent type>' contains-errors lvalue
|   |     |   `-DeclRefExpr 0x12f8094a8 <col:7> 'int *' lvalue ParmVar 0x13f925128 'dim' 'int *'
|   |     `-FloatingLiteral 0x12f809538 <col:21> 'double' 0.000000e+00
|   |-BinaryOperator 0x12f809678 <line:20:3, col:12> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x12f809610 <col:3, col:8> '<dependent type>' contains-errors lvalue ->n
|   | | `-RecoveryExpr 0x12f8095e8 <col:3> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x12f8095c8 <col:3> 'int *' lvalue ParmVar 0x13f925128 'dim' 'int *'
|   | `-DeclRefExpr 0x12f809658 <col:12> 'int' lvalue Var 0x13f925420 'n' 'int'
|   |-BinaryOperator 0x12f809980 <line:23:3, col:24> 'double *' contains-errors '='
|   | |-DeclRefExpr 0x12f8098f8 <col:3> 'double *' lvalue Var 0x13f925388 'pixel_weights' 'double *'
|   | `-CXXDependentScopeMemberExpr 0x12f809938 <col:19, col:24> '<dependent type>' contains-errors lvalue ->weights
|   |   `-RecoveryExpr 0x12f809918 <col:19> '<dependent type>' contains-errors lvalue
|   `-ForStmt 0x13f93ec58 <line:25:3, line:57:5>
|     |-BinaryOperator 0x12f8099e0 <line:25:8, col:15> 'int' '='
|     | |-DeclRefExpr 0x12f8099a0 <col:8> 'int' lvalue Var 0x13f9254b8 'offset' 'int'
|     | `-IntegerLiteral 0x12f8099c0 <col:15> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x12f809a78 <col:18, col:27> 'int' contains-errors '<'
|     | |-DeclRefExpr 0x12f809a00 <col:18> 'int' lvalue Var 0x13f9254b8 'offset' 'int'
|     | `-RecoveryExpr 0x12f809a58 <col:27> '<dependent type>' contains-errors lvalue
|     |-UnaryOperator 0x12f809ab8 <col:38, col:44> 'int' postfix '++'
|     | `-DeclRefExpr 0x12f809a98 <col:38> 'int' lvalue Var 0x13f9254b8 'offset' 'int'
|     `-CompoundStmt 0x13f93ec38 <line:26:5, line:57:5>
|       |-DeclStmt 0x12f80c0f0 <line:27:7, col:44>
|       | `-VarDecl 0x12f809ae8 <col:7, col:35> col:14 used x 'double' cinit
|       |   `-BinaryOperator 0x12f80c0d0 <col:18, col:35> '<dependent type>' contains-errors '/'
|       |     |-CStyleCastExpr 0x12f80c088 <col:18, col:26> 'double' <IntegralToFloating>
|       |     | `-ImplicitCastExpr 0x12f80c070 <col:26> 'int' <LValueToRValue> part_of_explicit_cast
|       |     |   `-DeclRefExpr 0x12f809b50 <col:26> 'int' lvalue Var 0x13f9254b8 'offset' 'int'
|       |     `-RecoveryExpr 0x12f80c0b0 <col:35> '<dependent type>' contains-errors lvalue
|       `-IfStmt 0x13f93ec08 <line:29:7, line:56:9> has_else
|         |-BinaryOperator 0x12f80c160 <line:29:11, col:19> 'int' '>'
|         | |-ImplicitCastExpr 0x12f80c148 <col:11> 'double' <LValueToRValue>
|         | | `-DeclRefExpr 0x12f80c108 <col:11> 'double' lvalue ParmVar 0x13f9251a8 'scale' 'double'
|         | `-FloatingLiteral 0x12f80c128 <col:19> 'double' 1.000000e+00
|         |-CompoundStmt 0x12f80c610 <line:30:9, line:33:9>
|         | `-ForStmt 0x12f80c5d8 <line:31:11, line:32:71>
|         |   |-BinaryOperator 0x12f80c1c0 <line:31:16, col:20> 'int' '='
|         |   | |-DeclRefExpr 0x12f80c180 <col:16> 'int' lvalue Var 0x13f925550 'i' 'int'
|         |   | `-IntegerLiteral 0x12f80c1a0 <col:20> 'int' 0
|         |   |-<<<NULL>>>
|         |   |-BinaryOperator 0x12f80c250 <col:23, col:27> 'int' '<'
|         |   | |-ImplicitCastExpr 0x12f80c220 <col:23> 'int' <LValueToRValue>
|         |   | | `-DeclRefExpr 0x12f80c1e0 <col:23> 'int' lvalue Var 0x13f925550 'i' 'int'
|         |   | `-ImplicitCastExpr 0x12f80c238 <col:27> 'int' <LValueToRValue>
|         |   |   `-DeclRefExpr 0x12f80c200 <col:27> 'int' lvalue Var 0x13f925420 'n' 'int'
|         |   |-UnaryOperator 0x12f80c290 <col:30, col:31> 'int' postfix '++'
|         |   | `-DeclRefExpr 0x12f80c270 <col:30> 'int' lvalue Var 0x13f925550 'i' 'int'
|         |   `-BinaryOperator 0x12f80c5b8 <line:32:13, col:71> 'double' contains-errors '='
|         |     |-UnaryOperator 0x12f80c300 <col:13, col:30> 'double' lvalue prefix '*' cannot overflow
|         |     | `-ParenExpr 0x12f80c2e0 <col:14, col:30> 'double *'
|         |     |   `-UnaryOperator 0x12f80c2c8 <col:15, col:28> 'double *' postfix '++'
|         |     |     `-DeclRefExpr 0x12f80c2a8 <col:15> 'double *' lvalue Var 0x13f925388 'pixel_weights' 'double *'
|         |     `-BinaryOperator 0x12f80c598 <col:34, col:71> 'double' contains-errors '*'
|         |       |-ParenExpr 0x12f80c540 <col:34, col:67> 'double' contains-errors
|         |       | `-BinaryOperator 0x12f80c520 <col:35, col:62> 'double' contains-errors '/'
|         |       |   |-ParenExpr 0x12f80c4c8 <col:35, col:58> 'double' contains-errors
|         |       |   | `-ConditionalOperator 0x12f80c498 <col:36, col:57> 'double' contains-errors
|         |       |   |   |-ParenExpr 0x12f80c390 <col:36, col:43> 'int'
|         |       |   |   | `-BinaryOperator 0x12f80c370 <col:37, col:42> 'int' '=='
|         |       |   |   |   |-ImplicitCastExpr 0x12f80c358 <col:37> 'int' <LValueToRValue>
|         |       |   |   |   | `-DeclRefExpr 0x12f80c318 <col:37> 'int' lvalue Var 0x13f925550 'i' 'int'
|         |       |   |   |   `-IntegerLiteral 0x12f80c338 <col:42> 'int' 0
|         |       |   |   |-ParenExpr 0x12f80c440 <col:47, col:53> 'double' contains-errors
|         |       |   |   | `-BinaryOperator 0x12f80c420 <col:48, col:52> 'double' contains-errors '-'
|         |       |   |   |   |-ImplicitCastExpr 0x12f80c408 <col:48> 'double' <IntegralToFloating>
|         |       |   |   |   | `-IntegerLiteral 0x12f80c3b0 <col:48> 'int' 1
|         |       |   |   |   `-ImplicitCastExpr 0x12f80c3f0 <col:52> 'double' contains-errors <LValueToRValue>
|         |       |   |   |     `-DeclRefExpr 0x12f80c3d0 <col:52> 'double' contains-errors lvalue Var 0x12f809ae8 'x' 'double'
|         |       |   |   `-ImplicitCastExpr 0x12f80c480 <col:57> 'double' contains-errors <LValueToRValue>
|         |       |   |     `-DeclRefExpr 0x12f80c460 <col:57> 'double' contains-errors lvalue Var 0x12f809ae8 'x' 'double'
|         |       |   `-ImplicitCastExpr 0x12f80c508 <col:62> 'double' <LValueToRValue>
|         |       |     `-DeclRefExpr 0x12f80c4e8 <col:62> 'double' lvalue ParmVar 0x13f9251a8 'scale' 'double'
|         |       `-ImplicitCastExpr 0x12f80c580 <col:71> 'double' <LValueToRValue>
|         |         `-DeclRefExpr 0x12f80c560 <col:71> 'double' lvalue ParmVar 0x13f9251a8 'scale' 'double'
|         `-CompoundStmt 0x13f93ebe8 <line:35:9, line:56:9>
|           |-DeclStmt 0x12f80c790 <line:36:11, col:35>
|           | `-VarDecl 0x12f80c640 <col:11, col:30> col:18 used a 'double' cinit
|           |   `-BinaryOperator 0x12f80c770 <col:22, col:30> 'double' contains-errors '+'
|           |     |-ImplicitCastExpr 0x12f80c758 <col:22> 'double' contains-errors <LValueToRValue>
|           |     | `-DeclRefExpr 0x12f80c6a8 <col:22> 'double' contains-errors lvalue Var 0x12f809ae8 'x' 'double'
|           |     `-BinaryOperator 0x12f80c738 <col:26, col:30> 'double' '/'
|           |       |-ImplicitCastExpr 0x12f80c720 <col:26> 'double' <IntegralToFloating>
|           |       | `-IntegerLiteral 0x12f80c6c8 <col:26> 'int' 1
|           |       `-ImplicitCastExpr 0x12f80c708 <col:30> 'double' <LValueToRValue>
|           |         `-DeclRefExpr 0x12f80c6e8 <col:30> 'double' lvalue ParmVar 0x13f9251a8 'scale' 'double'
|           `-ForStmt 0x13f93ebb0 <line:39:11, line:55:13>
|             |-BinaryOperator 0x12f80c7e8 <line:39:16, col:20> 'int' '='
|             | |-DeclRefExpr 0x12f80c7a8 <col:16> 'int' lvalue Var 0x13f925550 'i' 'int'
|             | `-IntegerLiteral 0x12f80c7c8 <col:20> 'int' 0
|             |-<<<NULL>>>
|             |-BinaryOperator 0x12f80c878 <col:23, col:27> 'int' '<'
|             | |-ImplicitCastExpr 0x12f80c848 <col:23> 'int' <LValueToRValue>
|             | | `-DeclRefExpr 0x12f80c808 <col:23> 'int' lvalue Var 0x13f925550 'i' 'int'
|             | `-ImplicitCastExpr 0x12f80c860 <col:27> 'int' <LValueToRValue>
|             |   `-DeclRefExpr 0x12f80c828 <col:27> 'int' lvalue Var 0x13f925420 'n' 'int'
|             |-UnaryOperator 0x12f80c8b8 <col:30, col:31> 'int' postfix '++'
|             | `-DeclRefExpr 0x12f80c898 <col:30> 'int' lvalue Var 0x13f925550 'i' 'int'
|             `-CompoundStmt 0x13f93eb98 <line:40:13, line:55:13>
|               `-IfStmt 0x13f93eb68 <line:41:15, line:54:17> has_else
|                 |-BinaryOperator 0x12f80c958 <line:41:19, col:23> 'int' contains-errors '<'
|                 | |-ImplicitCastExpr 0x12f80c940 <col:19> 'double' <IntegralToFloating>
|                 | | `-ImplicitCastExpr 0x12f80c910 <col:19> 'int' <LValueToRValue>
|                 | |   `-DeclRefExpr 0x12f80c8d0 <col:19> 'int' lvalue Var 0x13f925550 'i' 'int'
|                 | `-ImplicitCastExpr 0x12f80c928 <col:23> 'double' contains-errors <LValueToRValue>
|                 |   `-DeclRefExpr 0x12f80c8f0 <col:23> 'double' contains-errors lvalue Var 0x12f809ae8 'x' 'double'
|                 |-CompoundStmt 0x12f80cf00 <line:42:17, line:47:17>
|                 | `-IfStmt 0x12f80ced0 <line:43:19, line:46:42> has_else
|                 |   |-BinaryOperator 0x12f80ca40 <line:43:23, col:31> 'int' contains-errors '>'
|                 |   | |-ImplicitCastExpr 0x12f80ca28 <col:23, col:27> 'double' <IntegralToFloating>
|                 |   | | `-BinaryOperator 0x12f80c9d0 <col:23, col:27> 'int' '+'
|                 |   | |   |-ImplicitCastExpr 0x12f80c9b8 <col:23> 'int' <LValueToRValue>
|                 |   | |   | `-DeclRefExpr 0x12f80c978 <col:23> 'int' lvalue Var 0x13f925550 'i' 'int'
|                 |   | |   `-IntegerLiteral 0x12f80c998 <col:27> 'int' 1
|                 |   | `-ImplicitCastExpr 0x12f80ca10 <col:31> 'double' contains-errors <LValueToRValue>
|                 |   |   `-DeclRefExpr 0x12f80c9f0 <col:31> 'double' contains-errors lvalue Var 0x12f809ae8 'x' 'double'
|                 |   |-BinaryOperator 0x12f80cde8 <line:44:21, col:65> 'double' contains-errors '='
|                 |   | |-UnaryOperator 0x12f80cab8 <col:21, col:38> 'double' lvalue prefix '*' cannot overflow
|                 |   | | `-ParenExpr 0x12f80ca98 <col:22, col:38> 'double *'
|                 |   | |   `-UnaryOperator 0x12f80ca80 <col:23, col:36> 'double *' postfix '++'
|                 |   | |     `-DeclRefExpr 0x12f80ca60 <col:23> 'double *' lvalue Var 0x13f925388 'pixel_weights' 'double *'
|                 |   | `-BinaryOperator 0x12f80cdc8 <col:42, col:65> 'double' contains-errors '*'
|                 |   |   |-ParenExpr 0x12f80cd70 <col:42, col:61> 'double' contains-errors
|                 |   |   | `-BinaryOperator 0x12f80cd50 <col:43, col:60> 'double' contains-errors '-'
|                 |   |   |   |-ImplicitCastExpr 0x12f80cd38 <col:43, col:56> 'double' contains-errors <IntegralToFloating>
|                 |   |   |   | `-CallExpr 0x12f80ccb8 <col:43, col:56> 'int' contains-errors
|                 |   |   |   |   |-ImplicitCastExpr 0x12f80cca0 <col:43> 'int (*)()' <FunctionToPointerDecay>
|                 |   |   |   |   | `-DeclRefExpr 0x12f80cbb0 <col:43> 'int ()' Function 0x12f80caf8 'MIN' 'int ()'
|                 |   |   |   |   |-BinaryOperator 0x12f80cc28 <col:48, col:52> 'int' '+'
|                 |   |   |   |   | |-ImplicitCastExpr 0x12f80cc10 <col:48> 'int' <LValueToRValue>
|                 |   |   |   |   | | `-DeclRefExpr 0x12f80cbd0 <col:48> 'int' lvalue Var 0x13f925550 'i' 'int'
|                 |   |   |   |   | `-IntegerLiteral 0x12f80cbf0 <col:52> 'int' 1
|                 |   |   |   |   `-ImplicitCastExpr 0x12f80cce8 <col:55> 'double' contains-errors <LValueToRValue>
|                 |   |   |   |     `-DeclRefExpr 0x12f80cc48 <col:55> 'double' contains-errors lvalue Var 0x12f80c640 'a' 'double'
|                 |   |   |   `-ImplicitCastExpr 0x12f80cd20 <col:60> 'double' contains-errors <LValueToRValue>
|                 |   |   |     `-DeclRefExpr 0x12f80cd00 <col:60> 'double' contains-errors lvalue Var 0x12f809ae8 'x' 'double'
|                 |   |   `-ImplicitCastExpr 0x12f80cdb0 <col:65> 'double' <LValueToRValue>
|                 |   |     `-DeclRefExpr 0x12f80cd90 <col:65> 'double' lvalue ParmVar 0x13f9251a8 'scale' 'double'
|                 |   `-BinaryOperator 0x12f80ceb0 <line:46:21, col:42> 'double' '='
|                 |     |-UnaryOperator 0x12f80ce60 <col:21, col:38> 'double' lvalue prefix '*' cannot overflow
|                 |     | `-ParenExpr 0x12f80ce40 <col:22, col:38> 'double *'
|                 |     |   `-UnaryOperator 0x12f80ce28 <col:23, col:36> 'double *' postfix '++'
|                 |     |     `-DeclRefExpr 0x12f80ce08 <col:23> 'double *' lvalue Var 0x13f925388 'pixel_weights' 'double *'
|                 |     `-ImplicitCastExpr 0x12f80ce98 <col:42> 'double' <IntegralToFloating>
|                 |       `-IntegerLiteral 0x12f80ce78 <col:42> 'int' 0
|                 `-CompoundStmt 0x13f93eb50 <line:49:17, line:54:17>
|                   `-IfStmt 0x13f93eb20 <line:50:19, line:53:42> has_else
|                     |-BinaryOperator 0x12f80cfa0 <line:50:23, col:27> 'int' contains-errors '>'
|                     | |-ImplicitCastExpr 0x12f80cf58 <col:23> 'double' contains-errors <LValueToRValue>
|                     | | `-DeclRefExpr 0x12f80cf18 <col:23> 'double' contains-errors lvalue Var 0x12f80c640 'a' 'double'
|                     | `-ImplicitCastExpr 0x12f80cf88 <col:27> 'double' <IntegralToFloating>
|                     |   `-ImplicitCastExpr 0x12f80cf70 <col:27> 'int' <LValueToRValue>
|                     |     `-DeclRefExpr 0x12f80cf38 <col:27> 'int' lvalue Var 0x13f925550 'i' 'int'
|                     |-BinaryOperator 0x13f93ea38 <line:51:21, col:65> 'double' contains-errors '='
|                     | |-UnaryOperator 0x13f93e820 <col:21, col:38> 'double' lvalue prefix '*' cannot overflow
|                     | | `-ParenExpr 0x13f93e800 <col:22, col:38> 'double *'
|                     | |   `-UnaryOperator 0x12f80cfe0 <col:23, col:36> 'double *' postfix '++'
|                     | |     `-DeclRefExpr 0x12f80cfc0 <col:23> 'double *' lvalue Var 0x13f925388 'pixel_weights' 'double *'
|                     | `-BinaryOperator 0x13f93ea18 <col:42, col:65> 'double' contains-errors '*'
|                     |   |-ImplicitCastExpr 0x13f93ea00 <col:42, col:61> 'double' contains-errors <IntegralToFloating>
|                     |   | `-ParenExpr 0x13f93e9a8 <col:42, col:61> 'int' contains-errors
|                     |   |   `-BinaryOperator 0x13f93e988 <col:43, col:60> 'int' contains-errors '-'
|                     |   |     |-CallExpr 0x13f93e908 <col:43, col:56> 'int' contains-errors
|                     |   |     | |-ImplicitCastExpr 0x13f93e8f0 <col:43> 'int (*)()' <FunctionToPointerDecay>
|                     |   |     | | `-DeclRefExpr 0x13f93e838 <col:43> 'int ()' Function 0x12f80caf8 'MIN' 'int ()'
|                     |   |     | |-BinaryOperator 0x13f93e8b0 <col:48, col:52> 'int' '+'
|                     |   |     | | |-ImplicitCastExpr 0x13f93e898 <col:48> 'int' <LValueToRValue>
|                     |   |     | | | `-DeclRefExpr 0x13f93e858 <col:48> 'int' lvalue Var 0x13f925550 'i' 'int'
|                     |   |     | | `-IntegerLiteral 0x13f93e878 <col:52> 'int' 1
|                     |   |     | `-ImplicitCastExpr 0x13f93e938 <col:55> 'double' contains-errors <LValueToRValue>
|                     |   |     |   `-DeclRefExpr 0x13f93e8d0 <col:55> 'double' contains-errors lvalue Var 0x12f80c640 'a' 'double'
|                     |   |     `-ImplicitCastExpr 0x13f93e970 <col:60> 'int' <LValueToRValue>
|                     |   |       `-DeclRefExpr 0x13f93e950 <col:60> 'int' lvalue Var 0x13f925550 'i' 'int'
|                     |   `-ImplicitCastExpr 0x13f93e9e8 <col:65> 'double' <LValueToRValue>
|                     |     `-DeclRefExpr 0x13f93e9c8 <col:65> 'double' lvalue ParmVar 0x13f9251a8 'scale' 'double'
|                     `-BinaryOperator 0x13f93eb00 <line:53:21, col:42> 'double' '='
|                       |-UnaryOperator 0x13f93eab0 <col:21, col:38> 'double' lvalue prefix '*' cannot overflow
|                       | `-ParenExpr 0x13f93ea90 <col:22, col:38> 'double *'
|                       |   `-UnaryOperator 0x13f93ea78 <col:23, col:36> 'double *' postfix '++'
|                       |     `-DeclRefExpr 0x13f93ea58 <col:23> 'double *' lvalue Var 0x13f925388 'pixel_weights' 'double *'
|                       `-ImplicitCastExpr 0x13f93eae8 <col:42> 'double' <IntegralToFloating>
|                         `-IntegerLiteral 0x13f93eac8 <col:42> 'int' 0
`-FunctionDecl 0x12f809160 <line:16:11> col:11 implicit used ceil 'double (double)' extern
  |-ParmVarDecl 0x12f809260 <<invalid sloc>> <invalid sloc> 'double'
  |-BuiltinAttr 0x12f809208 <<invalid sloc>> Implicit 1052
  |-NoThrowAttr 0x12f8092d0 <col:11> Implicit
  `-ConstAttr 0x12f8092f8 <col:11> Implicit
