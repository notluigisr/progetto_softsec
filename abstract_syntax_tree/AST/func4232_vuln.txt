TranslationUnitDecl 0x131055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1310564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x131055bd0 '__int128'
|-TypedefDecl 0x131056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x131055bf0 'unsigned __int128'
|-TypedefDecl 0x131836e30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x131836c00 'struct __NSConstantString_tag'
|   `-Record 0x131056580 '__NSConstantString_tag'
|-TypedefDecl 0x131836e98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x131055d90 '__SVInt8_t'
|-TypedefDecl 0x131836f00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x131055db0 '__SVInt16_t'
|-TypedefDecl 0x131836f68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x131055dd0 '__SVInt32_t'
|-TypedefDecl 0x131836fd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x131055df0 '__SVInt64_t'
|-TypedefDecl 0x131837038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x131055e10 '__SVUint8_t'
|-TypedefDecl 0x1318370a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x131055e30 '__SVUint16_t'
|-TypedefDecl 0x131837108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x131055e50 '__SVUint32_t'
|-TypedefDecl 0x131837170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x131055e70 '__SVUint64_t'
|-TypedefDecl 0x1318371d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x131055e90 '__SVFloat16_t'
|-TypedefDecl 0x131837240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x131055eb0 '__SVFloat32_t'
|-TypedefDecl 0x1318372a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x131055ed0 '__SVFloat64_t'
|-TypedefDecl 0x131837310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x131055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x131837378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x131055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1318373e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x131055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x131837448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x131055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1318374b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x131055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x131837518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x131055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x131837580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x131055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1318375e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x131055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x131837650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x131055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x1318376b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x131056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x131837720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x131056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x131837788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x131056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x1318377f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x131056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x131837858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x131056090 '__clang_svint8x3_t'
|-TypedefDecl 0x1318378c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1310560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x131837928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1310560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x131837990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1310560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x1318379f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x131056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x131837a60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x131056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x131837ac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x131056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x131837b30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x131056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x131837b98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x131056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x131838400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1310561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x131838468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1310561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1318384d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1310561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x131838538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x131056210 '__clang_svint8x4_t'
|-TypedefDecl 0x1318385a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x131056230 '__clang_svint16x4_t'
|-TypedefDecl 0x131838608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x131056250 '__clang_svint32x4_t'
|-TypedefDecl 0x131838670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x131056270 '__clang_svint64x4_t'
|-TypedefDecl 0x1318386d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x131056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x131838740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1310562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x1318387a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1310562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x131838810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1310562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x131838878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x131056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x1318388e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x131056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x131838948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x131056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x1318389b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x131056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x131838a18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x131056390 '__SVBool_t'
|-TypedefDecl 0x131838a80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1310563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x131838ae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1310563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x131838b50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1310563f0 '__SVCount_t'
|-TypedefDecl 0x131838bf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x131838bb0 'char *'
|   `-BuiltinType 0x1310556b0 'char'
|-TypedefDecl 0x131838c68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x131838bb0 'char *'
|   `-BuiltinType 0x1310556b0 'char'
`-FunctionDecl 0x131838f48 <dataset_diviso_filec/func4232_vuln.c:1:1, line:33:1> line:1:12 invalid iccrange 'int (int *, int *, float *)' static
  |-ParmVarDecl 0x131838d28 <col:21, col:31> col:31 invalid i_ctx_p 'int *'
  |-ParmVarDecl 0x131838da8 <col:40, col:45> col:45 invalid space 'int *'
  |-ParmVarDecl 0x131838e58 <col:52, col:59> col:59 used ptr 'float *'
  `-CompoundStmt 0x1310d2e40 <line:2:1, line:33:1>
    |-DeclStmt 0x1318391c8 <line:3:5, col:32>
    | |-VarDecl 0x131839020 <col:5, col:9> col:9 used components 'int'
    | |-VarDecl 0x1318390a0 <col:5, col:21> col:21 used i 'int'
    | `-VarDecl 0x131839120 <col:5, col:31> col:24 used code 'int' cinit
    |   `-IntegerLiteral 0x131839188 <col:31> 'int' 0
    |-BinaryOperator 0x131852948 <line:6:5, col:49> 'int' contains-errors '='
    | |-DeclRefExpr 0x131839228 <col:5> 'int' lvalue Var 0x131839120 'code' 'int'
    | `-CallExpr 0x131852908 <col:12, col:49> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x1318393a0 <col:12> 'int ()' Function 0x1318392e8 'array_get' 'int ()'
    |   |-RecoveryExpr 0x1318528b0 <col:22> '<dependent type>' contains-errors lvalue
    |   |-RecoveryExpr 0x1318393d8 <col:31> '<dependent type>' contains-errors lvalue
    |   |-IntegerLiteral 0x131852800 <col:38> 'int' 1
    |   `-UnaryOperator 0x1318528f0 <col:41, col:42> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-RecoveryExpr 0x1318528d0 <col:42> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x131852a28 <line:7:5, line:8:16>
    | |-BinaryOperator 0x1318529c0 <line:7:9, col:16> 'int' '<'
    | | |-ImplicitCastExpr 0x1318529a8 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x131852968 <col:9> 'int' lvalue Var 0x131839120 'code' 'int'
    | | `-IntegerLiteral 0x131852988 <col:16> 'int' 0
    | `-ReturnStmt 0x131852a18 <line:8:9, col:16>
    |   `-ImplicitCastExpr 0x131852a00 <col:16> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x1318529e0 <col:16> 'int' lvalue Var 0x131839120 'code' 'int'
    |-BinaryOperator 0x131852d30 <line:9:5, col:54> 'int' contains-errors '='
    | |-DeclRefExpr 0x131852a48 <col:5> 'int' lvalue Var 0x131839120 'code' 'int'
    | `-CallExpr 0x131852cf8 <col:12, col:54> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x131852b48 <col:12> 'int ()' Function 0x131852a90 'dict_find_string' 'int ()'
    |   |-UnaryOperator 0x131852ca8 <col:29, col:30> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | `-RecoveryExpr 0x131852c88 <col:30> '<dependent type>' contains-errors lvalue
    |   |-StringLiteral 0x131852be0 <col:39> 'char[4]' lvalue "STR"
    |   `-UnaryOperator 0x131852ce0 <col:46, col:47> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-RecoveryExpr 0x131852cc0 <col:47> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x131852e10 <line:10:5, line:11:16>
    | |-BinaryOperator 0x131852da8 <line:10:9, col:16> 'int' '<'
    | | |-ImplicitCastExpr 0x131852d90 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x131852d50 <col:9> 'int' lvalue Var 0x131839120 'code' 'int'
    | | `-IntegerLiteral 0x131852d70 <col:16> 'int' 0
    | `-ReturnStmt 0x131852e00 <line:11:9, col:16>
    |   `-ImplicitCastExpr 0x131852de8 <col:16> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x131852dc8 <col:16> 'int' lvalue Var 0x131839120 'code' 'int'
    |-IfStmt 0x131853040 <line:12:5, line:13:48>
    | |-BinaryOperator 0x131852e88 <line:12:9, col:17> 'int' '=='
    | | |-ImplicitCastExpr 0x131852e70 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x131852e30 <col:9> 'int' lvalue Var 0x131839120 'code' 'int'
    | | `-IntegerLiteral 0x131852e50 <col:17> 'int' 0
    | `-ReturnStmt 0x131853030 <line:13:9, col:48>
    |   `-CallExpr 0x131853008 <col:16, col:48> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x131852f88 <col:16> 'int ()' Function 0x131852ed0 'gs_note_error' 'int ()'
    |     `-RecoveryExpr 0x131852fe8 <col:30> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x1318531f8 <line:14:5, col:33> 'int' contains-errors '='
    | |-DeclRefExpr 0x131853060 <col:5> 'int' lvalue Var 0x131839020 'components' 'int'
    | `-CXXDependentScopeMemberExpr 0x1318531b0 <col:18, col:33> '<dependent type>' contains-errors lvalue .intval
    |   `-CXXDependentScopeMemberExpr 0x131853168 <col:18, col:27> '<dependent type>' contains-errors lvalue ->value
    |     `-RecoveryExpr 0x131853148 <col:18> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x1318533d8 <line:15:5, col:54> 'int' contains-errors '='
    | |-DeclRefExpr 0x131853218 <col:5> 'int' lvalue Var 0x131839120 'code' 'int'
    | `-CallExpr 0x1318533a0 <col:12, col:54> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x131853238 <col:12> 'int ()' Function 0x131852a90 'dict_find_string' 'int ()'
    |   |-UnaryOperator 0x131853350 <col:29, col:30> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | `-RecoveryExpr 0x131853330 <col:30> '<dependent type>' contains-errors lvalue
    |   |-StringLiteral 0x131853288 <col:39> 'char[4]' lvalue "STR"
    |   `-UnaryOperator 0x131853388 <col:46, col:47> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-RecoveryExpr 0x131853368 <col:47> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x1310d2de0 <line:16:5, line:31:5> has_else
    | |-BinaryOperator 0x131853700 <line:16:9, col:48> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x131853658 <col:9, col:16> 'int' '>'
    | | | |-ImplicitCastExpr 0x131853640 <col:9> 'int' <LValueToRValue>
    | | | | `-DeclRefExpr 0x1318533f8 <col:9> 'int' lvalue Var 0x131839120 'code' 'int'
    | | | `-IntegerLiteral 0x131853418 <col:16> 'int' 0
    | | `-UnaryOperator 0x1318536e8 <col:21, col:48> '<dependent type>' contains-errors prefix '!' cannot overflow
    | |   `-CallExpr 0x1318536b8 <col:22, col:48> '<dependent type>' contains-errors
    | |     |-DeclRefExpr 0x131853550 <col:22> 'int ()' Function 0x131853498 'r_has_type' 'int ()'
    | |     |-RecoveryExpr 0x131853678 <col:33> '<dependent type>' contains-errors lvalue
    | |     `-RecoveryExpr 0x131853698 <col:42> '<dependent type>' contains-errors lvalue
    | |-CompoundStmt 0x1310d2980 <col:51, line:26:5>
    | | `-ForStmt 0x1310d2948 <line:17:9, line:25:9>
    | |   |-BinaryOperator 0x131853760 <line:17:14, col:16> 'int' '='
    | |   | |-DeclRefExpr 0x131853720 <col:14> 'int' lvalue Var 0x1318390a0 'i' 'int'
    | |   | `-IntegerLiteral 0x131853740 <col:16> 'int' 0
    | |   |-<<<NULL>>>
    | |   |-BinaryOperator 0x1310d2638 <col:18, col:33> 'int' '<'
    | |   | |-ImplicitCastExpr 0x1310d2620 <col:18> 'int' <LValueToRValue>
    | |   | | `-DeclRefExpr 0x131853780 <col:18> 'int' lvalue Var 0x1318390a0 'i' 'int'
    | |   | `-BinaryOperator 0x1310d2600 <col:20, col:33> 'int' '*'
    | |   |   |-ImplicitCastExpr 0x1318537e0 <col:20> 'int' <LValueToRValue>
    | |   |   | `-DeclRefExpr 0x1318537a0 <col:20> 'int' lvalue Var 0x131839020 'components' 'int'
    | |   |   `-IntegerLiteral 0x1318537c0 <col:33> 'int' 2
    | |   |-UnaryOperator 0x1310d2678 <col:35, col:36> 'int' postfix '++'
    | |   | `-DeclRefExpr 0x1310d2658 <col:35> 'int' lvalue Var 0x1318390a0 'i' 'int'
    | |   `-CompoundStmt 0x1310d2930 <col:40, line:25:9>
    | |     `-IfStmt 0x1310d27b0 <line:19:13, line:20:24>
    | |       |-BinaryOperator 0x1310d2748 <line:19:17, col:24> 'int' '<'
    | |       | |-ImplicitCastExpr 0x1310d2730 <col:17> 'int' <LValueToRValue>
    | |       | | `-DeclRefExpr 0x1310d26f0 <col:17> 'int' lvalue Var 0x131839120 'code' 'int'
    | |       | `-IntegerLiteral 0x1310d2710 <col:24> 'int' 0
    | |       `-ReturnStmt 0x1310d27a0 <line:20:17, col:24>
    | |         `-ImplicitCastExpr 0x1310d2788 <col:24> 'int' <LValueToRValue>
    | |           `-DeclRefExpr 0x1310d2768 <col:24> 'int' lvalue Var 0x131839120 'code' 'int'
    | `-CompoundStmt 0x1310d2dc8 <line:26:12, line:31:5>
    |   `-ForStmt 0x1310d2d90 <line:27:9, line:30:9>
    |     |-BinaryOperator 0x1310d29d8 <line:27:14, col:16> 'int' '='
    |     | |-DeclRefExpr 0x1310d2998 <col:14> 'int' lvalue Var 0x1318390a0 'i' 'int'
    |     | `-IntegerLiteral 0x1310d29b8 <col:16> 'int' 0
    |     |-<<<NULL>>>
    |     |-BinaryOperator 0x1310d2a68 <col:18, col:20> 'int' '<'
    |     | |-ImplicitCastExpr 0x1310d2a38 <col:18> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x1310d29f8 <col:18> 'int' lvalue Var 0x1318390a0 'i' 'int'
    |     | `-ImplicitCastExpr 0x1310d2a50 <col:20> 'int' <LValueToRValue>
    |     |   `-DeclRefExpr 0x1310d2a18 <col:20> 'int' lvalue Var 0x131839020 'components' 'int'
    |     |-UnaryOperator 0x1310d2aa8 <col:31, col:32> 'int' postfix '++'
    |     | `-DeclRefExpr 0x1310d2a88 <col:31> 'int' lvalue Var 0x1318390a0 'i' 'int'
    |     `-CompoundStmt 0x1310d2d70 <col:36, line:30:9>
    |       |-BinaryOperator 0x1310d2bc8 <line:28:13, col:26> 'float' '='
    |       | |-ArraySubscriptExpr 0x1310d2b70 <col:13, col:22> 'float' lvalue
    |       | | |-ImplicitCastExpr 0x1310d2b58 <col:13> 'float *' <LValueToRValue>
    |       | | | `-DeclRefExpr 0x1310d2ac0 <col:13> 'float *' lvalue ParmVar 0x131838e58 'ptr' 'float *'
    |       | | `-BinaryOperator 0x1310d2b38 <col:17, col:21> 'int' '*'
    |       | |   |-ImplicitCastExpr 0x1310d2b20 <col:17> 'int' <LValueToRValue>
    |       | |   | `-DeclRefExpr 0x1310d2ae0 <col:17> 'int' lvalue Var 0x1318390a0 'i' 'int'
    |       | |   `-IntegerLiteral 0x1310d2b00 <col:21> 'int' 2
    |       | `-ImplicitCastExpr 0x1310d2bb0 <col:26> 'float' <IntegralToFloating>
    |       |   `-IntegerLiteral 0x1310d2b90 <col:26> 'int' 0
    |       `-BinaryOperator 0x1310d2d50 <line:29:13, col:32> 'float' '='
    |         |-ArraySubscriptExpr 0x1310d2cf8 <col:13, col:28> 'float' lvalue
    |         | |-ImplicitCastExpr 0x1310d2ce0 <col:13> 'float *' <LValueToRValue>
    |         | | `-DeclRefExpr 0x1310d2be8 <col:13> 'float *' lvalue ParmVar 0x131838e58 'ptr' 'float *'
    |         | `-BinaryOperator 0x1310d2cc0 <col:17, col:27> 'int' '+'
    |         |   |-ParenExpr 0x1310d2c80 <col:17, col:23> 'int'
    |         |   | `-BinaryOperator 0x1310d2c60 <col:18, col:22> 'int' '*'
    |         |   |   |-ImplicitCastExpr 0x1310d2c48 <col:18> 'int' <LValueToRValue>
    |         |   |   | `-DeclRefExpr 0x1310d2c08 <col:18> 'int' lvalue Var 0x1318390a0 'i' 'int'
    |         |   |   `-IntegerLiteral 0x1310d2c28 <col:22> 'int' 2
    |         |   `-IntegerLiteral 0x1310d2ca0 <col:27> 'int' 1
    |         `-ImplicitCastExpr 0x1310d2d38 <col:32> 'float' <IntegralToFloating>
    |           `-IntegerLiteral 0x1310d2d18 <col:32> 'int' 1
    `-ReturnStmt 0x1310d2e30 <line:32:5, col:12>
      `-IntegerLiteral 0x1310d2e10 <col:12> 'int' 0
