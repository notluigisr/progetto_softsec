TranslationUnitDecl 0x120855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1208564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x120855bd0 '__int128'
|-TypedefDecl 0x120856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x120855bf0 'unsigned __int128'
|-TypedefDecl 0x120926230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x120926000 'struct __NSConstantString_tag'
|   `-Record 0x120856580 '__NSConstantString_tag'
|-TypedefDecl 0x120926298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x120855d90 '__SVInt8_t'
|-TypedefDecl 0x120926300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x120855db0 '__SVInt16_t'
|-TypedefDecl 0x120926368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x120855dd0 '__SVInt32_t'
|-TypedefDecl 0x1209263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x120855df0 '__SVInt64_t'
|-TypedefDecl 0x120926438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x120855e10 '__SVUint8_t'
|-TypedefDecl 0x1209264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x120855e30 '__SVUint16_t'
|-TypedefDecl 0x120926508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x120855e50 '__SVUint32_t'
|-TypedefDecl 0x120926570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x120855e70 '__SVUint64_t'
|-TypedefDecl 0x1209265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x120855e90 '__SVFloat16_t'
|-TypedefDecl 0x120926640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x120855eb0 '__SVFloat32_t'
|-TypedefDecl 0x1209266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x120855ed0 '__SVFloat64_t'
|-TypedefDecl 0x120926710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x120855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x120926778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x120855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1209267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x120855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x120926848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x120855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1209268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x120855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x120926918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x120855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x120926980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x120855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1209269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x120855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x120926a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x120855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x120926ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x120856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x120926b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x120856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x120926b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x120856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x120926bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x120856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x120926c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x120856090 '__clang_svint8x3_t'
|-TypedefDecl 0x120926cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1208560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x120926d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1208560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x120926d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1208560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x120926df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x120856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x120926e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x120856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x120926ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x120856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x120926f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x120856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x120926f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x120856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x120927800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1208561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x120927868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1208561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1209278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1208561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x120927938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x120856210 '__clang_svint8x4_t'
|-TypedefDecl 0x1209279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x120856230 '__clang_svint16x4_t'
|-TypedefDecl 0x120927a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x120856250 '__clang_svint32x4_t'
|-TypedefDecl 0x120927a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x120856270 '__clang_svint64x4_t'
|-TypedefDecl 0x120927ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x120856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x120927b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1208562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x120927ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1208562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x120927c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1208562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x120927c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x120856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x120927ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x120856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x120927d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x120856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x120927db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x120856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x120927e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x120856390 '__SVBool_t'
|-TypedefDecl 0x120927e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1208563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x120927ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1208563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x120927f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1208563f0 '__SVCount_t'
|-TypedefDecl 0x120927ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x120927fb0 'char *'
|   `-BuiltinType 0x1208556b0 'char'
|-TypedefDecl 0x120928068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x120927fb0 'char *'
|   `-BuiltinType 0x1208556b0 'char'
|-FunctionDecl 0x1209282c8 <dataset_diviso_filec/func24385_vuln.c:1:1, line:70:1> line:1:1 ldapserver_parse_one 'int (char *, const char *, unsigned int)'
| |-ParmVarDecl 0x1209280d8 <col:23, col:29> col:29 used line 'char *'
| |-ParmVarDecl 0x120928158 <line:2:9, col:21> col:21 used filename 'const char *'
| |-ParmVarDecl 0x1209281d8 <col:31, col:44> col:44 used lineno 'unsigned int'
| `-CompoundStmt 0x122008bc8 <line:3:1, line:70:1>
|   |-DeclStmt 0x120928450 <line:4:3, col:10>
|   | `-VarDecl 0x1209283e8 <col:3, col:9> col:9 used p 'char *'
|   |-DeclStmt 0x1209284e8 <line:5:3, col:13>
|   | `-VarDecl 0x120928480 <col:3, col:9> col:9 used endp 'char *'
|   |-DeclStmt 0x120928598 <line:7:3, col:14>
|   | `-VarDecl 0x120928530 <col:3, col:7> col:7 used fieldno 'int'
|   |-DeclStmt 0x120928650 <line:8:3, col:15>
|   | `-VarDecl 0x1209285c8 <col:3, col:14> col:7 used fail 'int' cinit
|   |   `-IntegerLiteral 0x120928630 <col:14> 'int' 0
|   |-ForStmt 0x121009bb8 <line:12:3, line:61:5>
|   | |-BinaryOperator 0x120940b90 <line:12:8, col:25> 'char *' ','
|   | | |-BinaryOperator 0x120940af8 <col:8, col:18> 'int' '='
|   | | | |-DeclRefExpr 0x120940ab8 <col:8> 'int' lvalue Var 0x120928530 'fieldno' 'int'
|   | | | `-IntegerLiteral 0x120940ad8 <col:18> 'int' 1
|   | | `-BinaryOperator 0x120940b70 <col:21, col:25> 'char *' '='
|   | |   |-DeclRefExpr 0x120940b18 <col:21> 'char *' lvalue Var 0x1209283e8 'p' 'char *'
|   | |   `-ImplicitCastExpr 0x120940b58 <col:25> 'char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x120940b38 <col:25> 'char *' lvalue ParmVar 0x1209280d8 'line' 'char *'
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x120940bd0 <col:31> 'char *' <LValueToRValue>
|   | | `-DeclRefExpr 0x120940bb0 <col:31> 'char *' lvalue Var 0x1209283e8 'p' 'char *'
|   | |-BinaryOperator 0x120940c98 <col:34, col:51> 'int' ','
|   | | |-BinaryOperator 0x120940c40 <col:34, col:38> 'char *' '='
|   | | | |-DeclRefExpr 0x120940be8 <col:34> 'char *' lvalue Var 0x1209283e8 'p' 'char *'
|   | | | `-ImplicitCastExpr 0x120940c28 <col:38> 'char *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x120940c08 <col:38> 'char *' lvalue Var 0x120928480 'endp' 'char *'
|   | | `-UnaryOperator 0x120940c80 <col:44, col:51> 'int' postfix '++'
|   | |   `-DeclRefExpr 0x120940c60 <col:44> 'int' lvalue Var 0x120928530 'fieldno' 'int'
|   | `-CompoundStmt 0x121009b88 <line:13:5, line:61:5>
|   |   |-BinaryOperator 0x120941438 <line:14:7, col:28> 'char *' '='
|   |   | |-DeclRefExpr 0x120940cb8 <col:7> 'char *' lvalue Var 0x120928480 'endp' 'char *'
|   |   | `-CallExpr 0x1209413d8 <col:14, col:28> 'char *'
|   |   |   |-ImplicitCastExpr 0x1209413c0 <col:14> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x120941320 <col:14> 'char *(const char *, int)' Function 0x120941140 'strchr' 'char *(const char *, int)'
|   |   |   |-ImplicitCastExpr 0x120941420 <col:22> 'const char *' <NoOp>
|   |   |   | `-ImplicitCastExpr 0x120941408 <col:22> 'char *' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x120941340 <col:22> 'char *' lvalue Var 0x1209283e8 'p' 'char *'
|   |   |   `-CharacterLiteral 0x120941360 <col:25> 'int' 58
|   |   |-IfStmt 0x120941530 <line:15:7, line:16:12>
|   |   | |-ImplicitCastExpr 0x120941478 <line:15:11> 'char *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x120941458 <col:11> 'char *' lvalue Var 0x120928480 'endp' 'char *'
|   |   | `-BinaryOperator 0x120941510 <line:16:2, col:12> 'char' '='
|   |   |   |-UnaryOperator 0x1209414c8 <col:2, col:7> 'char' lvalue prefix '*' cannot overflow
|   |   |   | `-UnaryOperator 0x1209414b0 <col:3, col:7> 'char *' postfix '++'
|   |   |   |   `-DeclRefExpr 0x120941490 <col:3> 'char *' lvalue Var 0x120928480 'endp' 'char *'
|   |   |   `-ImplicitCastExpr 0x1209414f8 <col:12> 'char' <IntegralCast>
|   |   |     `-CharacterLiteral 0x1209414e0 <col:12> 'int' 0
|   |   |-CallExpr 0x120941688 <line:17:7, col:21> 'int'
|   |   | |-ImplicitCastExpr 0x120941670 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x120941630 <col:7> 'int ()' Function 0x120941578 'trim_spaces' 'int ()'
|   |   | `-ImplicitCastExpr 0x1209416b0 <col:20> 'char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x120941650 <col:20> 'char *' lvalue Var 0x1209283e8 'p' 'char *'
|   |   `-SwitchStmt 0x120941700 <line:18:7, line:60:2>
|   |     |-ImplicitCastExpr 0x1209416e8 <line:18:15> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1209416c8 <col:15> 'int' lvalue Var 0x120928530 'fieldno' 'int'
|   |     `-CompoundStmt 0x121009b20 <line:19:2, line:60:2>
|   |       |-CaseStmt 0x120941760 <line:20:2, line:28:6>
|   |       | |-ConstantExpr 0x120941748 <line:20:7> 'int'
|   |       | | `-IntegerLiteral 0x120941728 <col:7> 'int' 1
|   |       | `-IfStmt 0x121008fe0 <line:21:4, line:28:6> has_else
|   |       |   |-ImplicitCastExpr 0x1209417d8 <line:21:8, col:9> 'char' <LValueToRValue>
|   |       |   | `-UnaryOperator 0x1209417c0 <col:8, col:9> 'char' lvalue prefix '*' cannot overflow
|   |       |   |   `-ImplicitCastExpr 0x1209417a8 <col:9> 'char *' <LValueToRValue>
|   |       |   |     `-DeclRefExpr 0x120941788 <col:9> 'char *' lvalue Var 0x1209283e8 'p' 'char *'
|   |       |   |-NullStmt 0x121008fd8 <line:22:6>
|   |       |   `-CompoundStmt 0x121008fb8 <line:24:6, line:28:6>
|   |       |     |-CallExpr 0x121008ef0 <line:25:8, line:26:21> 'int'
|   |       |     | |-ImplicitCastExpr 0x121008ed8 <line:25:8> 'int (*)()' <FunctionToPointerDecay>
|   |       |     | | `-DeclRefExpr 0x121008cb8 <col:8> 'int ()' Function 0x121008c00 'log_error' 'int ()'
|   |       |     | |-CallExpr 0x121008e58 <col:19, col:26> 'int'
|   |       |     | | |-ImplicitCastExpr 0x121008e40 <col:19> 'int (*)()' <FunctionToPointerDecay>
|   |       |     | | | `-DeclRefExpr 0x121008db8 <col:19> 'int ()' Function 0x121008d00 '_' 'int ()'
|   |       |     | | `-ImplicitCastExpr 0x121008e80 <col:21> 'char *' <ArrayToPointerDecay>
|   |       |     | |   `-StringLiteral 0x121008e20 <col:21> 'char[4]' lvalue "STR"
|   |       |     | |-ImplicitCastExpr 0x121008f28 <line:26:5> 'const char *' <LValueToRValue>
|   |       |     | | `-DeclRefExpr 0x121008e98 <col:5> 'const char *' lvalue ParmVar 0x120928158 'filename' 'const char *'
|   |       |     | `-ImplicitCastExpr 0x121008f40 <col:15> 'unsigned int' <LValueToRValue>
|   |       |     |   `-DeclRefExpr 0x121008eb8 <col:15> 'unsigned int' lvalue ParmVar 0x1209281d8 'lineno' 'unsigned int'
|   |       |     `-BinaryOperator 0x121008f98 <line:27:8, col:15> 'int' '='
|   |       |       |-DeclRefExpr 0x121008f58 <col:8> 'int' lvalue Var 0x1209285c8 'fail' 'int'
|   |       |       `-IntegerLiteral 0x121008f78 <col:15> 'int' 1
|   |       |-BreakStmt 0x121009010 <line:29:4>
|   |       |-CaseStmt 0x121009050 <line:31:2, <invalid sloc>>
|   |       | |-ConstantExpr 0x121009038 <col:7> 'int'
|   |       | | `-IntegerLiteral 0x121009018 <col:7> 'int' 2
|   |       | `-NullStmt 0x121009258 <<invalid sloc>>
|   |       |-BreakStmt 0x121009260 <line:34:4>
|   |       |-CaseStmt 0x1210092a0 <line:36:2, <invalid sloc>>
|   |       | |-ConstantExpr 0x121009288 <col:7> 'int'
|   |       | | `-IntegerLiteral 0x121009268 <col:7> 'int' 3
|   |       | `-NullStmt 0x1210093c8 <<invalid sloc>>
|   |       |-BreakStmt 0x1210093d0 <line:39:4>
|   |       |-CaseStmt 0x121009410 <line:41:2, line:48:9>
|   |       | |-ConstantExpr 0x1210093f8 <line:41:7> 'int'
|   |       | | `-IntegerLiteral 0x1210093d8 <col:7> 'int' 4
|   |       | `-IfStmt 0x121009950 <line:42:4, line:48:9> has_else
|   |       |   |-BinaryOperator 0x121009630 <line:42:8, col:23> 'int' contains-errors '&&'
|   |       |   | |-UnaryOperator 0x121009580 <col:8, col:9> 'char' lvalue prefix '*' cannot overflow
|   |       |   | | `-ImplicitCastExpr 0x121009568 <col:9> 'char *' <LValueToRValue>
|   |       |   | |   `-DeclRefExpr 0x121009438 <col:9> 'char *' lvalue Var 0x1209283e8 'p' 'char *'
|   |       |   | `-UnaryOperator 0x121009618 <col:14, col:23> '<dependent type>' contains-errors prefix '!' cannot overflow
|   |       |   |   `-ImplicitCastExpr 0x121009600 <col:15, col:23> '<dependent type>' contains-errors <LValueToRValue>
|   |       |   |     `-CXXDependentScopeMemberExpr 0x1210095b8 <col:15, col:23> '<dependent type>' contains-errors lvalue ->user
|   |       |   |       `-RecoveryExpr 0x121009598 <col:15> '<dependent type>' contains-errors lvalue
|   |       |   |-CompoundStmt 0x121009828 <line:43:6, line:47:6>
|   |       |   | |-CallExpr 0x121009760 <line:44:8, line:45:21> 'int'
|   |       |   | | |-ImplicitCastExpr 0x121009748 <line:44:8> 'int (*)()' <FunctionToPointerDecay>
|   |       |   | | | `-DeclRefExpr 0x121009650 <col:8> 'int ()' Function 0x121008c00 'log_error' 'int ()'
|   |       |   | | |-CallExpr 0x1210096c8 <col:19, col:26> 'int'
|   |       |   | | | |-ImplicitCastExpr 0x1210096b0 <col:19> 'int (*)()' <FunctionToPointerDecay>
|   |       |   | | | | `-DeclRefExpr 0x121009670 <col:19> 'int ()' Function 0x121008d00 '_' 'int ()'
|   |       |   | | | `-ImplicitCastExpr 0x1210096f0 <col:21> 'char *' <ArrayToPointerDecay>
|   |       |   | | |   `-StringLiteral 0x121009690 <col:21> 'char[4]' lvalue "STR"
|   |       |   | | |-ImplicitCastExpr 0x121009798 <line:45:5> 'const char *' <LValueToRValue>
|   |       |   | | | `-DeclRefExpr 0x121009708 <col:5> 'const char *' lvalue ParmVar 0x120928158 'filename' 'const char *'
|   |       |   | | `-ImplicitCastExpr 0x1210097b0 <col:15> 'unsigned int' <LValueToRValue>
|   |       |   | |   `-DeclRefExpr 0x121009728 <col:15> 'unsigned int' lvalue ParmVar 0x1209281d8 'lineno' 'unsigned int'
|   |       |   | `-BinaryOperator 0x121009808 <line:46:8, col:15> 'int' '='
|   |       |   |   |-DeclRefExpr 0x1210097c8 <col:8> 'int' lvalue Var 0x1209285c8 'fail' 'int'
|   |       |   |   `-IntegerLiteral 0x1210097e8 <col:15> 'int' 1
|   |       |   `-NullStmt 0x121009948 <line:48:9>
|   |       |-BreakStmt 0x121009980 <line:50:4>
|   |       |-CaseStmt 0x1210099c0 <line:52:2, <invalid sloc>>
|   |       | |-ConstantExpr 0x1210099a8 <col:7> 'int'
|   |       | | `-IntegerLiteral 0x121009988 <col:7> 'int' 5
|   |       | `-NullStmt 0x121009ae8 <<invalid sloc>>
|   |       |-BreakStmt 0x121009af0 <line:55:4>
|   |       `-DefaultStmt 0x121009b00 <line:57:2, line:59:4>
|   |         `-BreakStmt 0x121009af8 <col:4>
|   `-IfStmt 0x122008ba8 <line:63:3, line:67:5>
|     |-ImplicitCastExpr 0x122008820 <line:63:7> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x122008800 <col:7> 'int' lvalue Var 0x1209285c8 'fail' 'int'
|     `-CompoundStmt 0x122008b90 <line:64:5, line:67:5>
|       `-CallExpr 0x122008a28 <line:65:7, col:43> 'int'
|         |-ImplicitCastExpr 0x122008a10 <col:7> 'int (*)()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x122008918 <col:7> 'int ()' Function 0x122008860 'log_info' 'int ()'
|         |-CallExpr 0x122008990 <col:17, col:24> 'int'
|         | |-ImplicitCastExpr 0x122008978 <col:17> 'int (*)()' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x122008938 <col:17> 'int ()' Function 0x121008d00 '_' 'int ()'
|         | `-ImplicitCastExpr 0x1220089b8 <col:19> 'char *' <ArrayToPointerDecay>
|         |   `-StringLiteral 0x122008958 <col:19> 'char[4]' lvalue "STR"
|         |-ImplicitCastExpr 0x122008a60 <col:27> 'const char *' <LValueToRValue>
|         | `-DeclRefExpr 0x1220089d0 <col:27> 'const char *' lvalue ParmVar 0x120928158 'filename' 'const char *'
|         `-ImplicitCastExpr 0x122008a78 <col:37> 'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x1220089f0 <col:37> 'unsigned int' lvalue ParmVar 0x1209281d8 'lineno' 'unsigned int'
`-FunctionDecl 0x120941140 <line:14:14> col:14 implicit used strchr 'char *(const char *, int)' extern
  |-ParmVarDecl 0x120941240 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x1209412a8 <<invalid sloc>> <invalid sloc> 'int'
  `-BuiltinAttr 0x1209411e8 <<invalid sloc>> Implicit 893
