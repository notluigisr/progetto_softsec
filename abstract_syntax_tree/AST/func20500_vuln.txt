TranslationUnitDecl 0x12e855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x12e8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x12e855bd0 '__int128'
|-TypedefDecl 0x12e856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x12e855bf0 'unsigned __int128'
|-TypedefDecl 0x12f00be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12f00bc00 'struct __NSConstantString_tag'
|   `-Record 0x12e856580 '__NSConstantString_tag'
|-TypedefDecl 0x12f00be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x12e855d90 '__SVInt8_t'
|-TypedefDecl 0x12f00bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x12e855db0 '__SVInt16_t'
|-TypedefDecl 0x12f00bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x12e855dd0 '__SVInt32_t'
|-TypedefDecl 0x12f00bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x12e855df0 '__SVInt64_t'
|-TypedefDecl 0x12f00c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x12e855e10 '__SVUint8_t'
|-TypedefDecl 0x12f00c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x12e855e30 '__SVUint16_t'
|-TypedefDecl 0x12f00c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x12e855e50 '__SVUint32_t'
|-TypedefDecl 0x12f00c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x12e855e70 '__SVUint64_t'
|-TypedefDecl 0x12f00c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x12e855e90 '__SVFloat16_t'
|-TypedefDecl 0x12f00c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x12e855eb0 '__SVFloat32_t'
|-TypedefDecl 0x12f00c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x12e855ed0 '__SVFloat64_t'
|-TypedefDecl 0x12f00c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x12e855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12f00c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x12e855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12f00c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x12e855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12f00c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x12e855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12f00c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x12e855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12f00c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x12e855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12f00c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x12e855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12f00c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x12e855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12f00c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x12e855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12f00c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x12e856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12f00c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x12e856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12f00c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x12e856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12f00c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x12e856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12f00c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x12e856090 '__clang_svint8x3_t'
|-TypedefDecl 0x12f00c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x12e8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12f00c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x12e8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12f00c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x12e8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12f00c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x12e856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12f00ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x12e856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12f00cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x12e856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12f00cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x12e856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12f00cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x12e856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12f00d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x12e8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12f00d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x12e8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12f00d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x12e8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12f00d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x12e856210 '__clang_svint8x4_t'
|-TypedefDecl 0x12f00d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x12e856230 '__clang_svint16x4_t'
|-TypedefDecl 0x12f00d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x12e856250 '__clang_svint32x4_t'
|-TypedefDecl 0x12f00d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x12e856270 '__clang_svint64x4_t'
|-TypedefDecl 0x12f00d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x12e856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12f00d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x12e8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12f00d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x12e8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12f00d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x12e8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12f00d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x12e856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12f00d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x12e856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12f00d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x12e856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12f00d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x12e856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12f00da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x12e856390 '__SVBool_t'
|-TypedefDecl 0x12f00da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x12e8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12f00dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x12e8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12f00db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x12e8563f0 '__SVCount_t'
|-TypedefDecl 0x12f00dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12f00dbb0 'char *'
|   `-BuiltinType 0x12e8556b0 'char'
|-TypedefDecl 0x12f00dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12f00dbb0 'char *'
|   `-BuiltinType 0x12e8556b0 'char'
|-FunctionDecl 0x12f00de38 <dataset_diviso_filec/func20500_vuln.c:1:1, line:32:1> line:1:12 parse_one_feature 'int (const char *, int)' static
| |-ParmVarDecl 0x12f00dcd8 <col:30, col:42> col:42 used feature 'const char *'
| |-ParmVarDecl 0x12f00dd58 <col:51, col:55> col:55 used from_stream 'int'
| `-CompoundStmt 0x12f029af0 <line:2:1, line:32:1>
|   |-DeclStmt 0x12f00dfb8 <line:3:2, col:17>
|   | `-VarDecl 0x12f00df50 <col:2, col:14> col:14 used arg 'const char *'
|   |-IfStmt 0x12f029a90 <line:5:2, line:29:2> has_else
|   | |-CallExpr 0x12f00e258 <line:5:6, col:38> 'int'
|   | | |-ImplicitCastExpr 0x12f00e240 <col:6> 'int (*)()' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x12f00e100 <col:6> 'int ()' Function 0x12f00e048 'skip_prefix' 'int ()'
|   | | |-ImplicitCastExpr 0x12f00e290 <col:18> 'const char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x12f00e120 <col:18> 'const char *' lvalue ParmVar 0x12f00dcd8 'feature' 'const char *'
|   | | |-ImplicitCastExpr 0x12f00e2a8 <col:27> 'char *' <ArrayToPointerDecay>
|   | | | `-StringLiteral 0x12f00e180 <col:27> 'char[4]' lvalue "STR"
|   | | `-UnaryOperator 0x12f00e1f0 <col:34, col:35> 'const char **' prefix '&' cannot overflow
|   | |   `-DeclRefExpr 0x12f00e1a0 <col:35> 'const char *' lvalue Var 0x12f00df50 'arg' 'const char *'
|   | |-CompoundStmt 0x12f027440 <col:41, line:7:2>
|   | | `-CallExpr 0x12f027400 <line:6:3, col:25> 'int'
|   | |   |-ImplicitCastExpr 0x12f00e3e0 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x12f00e3a0 <col:3> 'int ()' Function 0x12f00e2e8 'option_date_format' 'int ()'
|   | |   `-ImplicitCastExpr 0x12f027428 <col:22> 'const char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x12f00e3c0 <col:22> 'const char *' lvalue Var 0x12f00df50 'arg' 'const char *'
|   | `-IfStmt 0x12f029a60 <line:7:9, line:29:2> has_else
|   |   |-CallExpr 0x12f027508 <line:7:13, col:45> 'int'
|   |   | |-ImplicitCastExpr 0x12f0274f0 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x12f027458 <col:13> 'int ()' Function 0x12f00e048 'skip_prefix' 'int ()'
|   |   | |-ImplicitCastExpr 0x12f027540 <col:25> 'const char *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x12f027478 <col:25> 'const char *' lvalue ParmVar 0x12f00dcd8 'feature' 'const char *'
|   |   | |-ImplicitCastExpr 0x12f027558 <col:34> 'char *' <ArrayToPointerDecay>
|   |   | | `-StringLiteral 0x12f027498 <col:34> 'char[4]' lvalue "STR"
|   |   | `-UnaryOperator 0x12f0274d8 <col:41, col:42> 'const char **' prefix '&' cannot overflow
|   |   |   `-DeclRefExpr 0x12f0274b8 <col:42> 'const char *' lvalue Var 0x12f00df50 'arg' 'const char *'
|   |   |-CompoundStmt 0x12f027750 <col:48, line:9:2>
|   |   | `-CallExpr 0x12f0276e8 <line:8:3, col:42> 'int'
|   |   |   |-ImplicitCastExpr 0x12f0276d0 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x12f027650 <col:3> 'int ()' Function 0x12f027598 'option_import_marks' 'int ()'
|   |   |   |-ImplicitCastExpr 0x12f027720 <col:23> 'const char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x12f027670 <col:23> 'const char *' lvalue Var 0x12f00df50 'arg' 'const char *'
|   |   |   |-ImplicitCastExpr 0x12f027738 <col:28> 'int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x12f027690 <col:28> 'int' lvalue ParmVar 0x12f00dd58 'from_stream' 'int'
|   |   |   `-IntegerLiteral 0x12f0276b0 <col:41> 'int' 0
|   |   `-IfStmt 0x12f029a30 <line:9:9, line:29:2> has_else
|   |     |-CallExpr 0x12f027818 <line:9:13, col:45> 'int'
|   |     | |-ImplicitCastExpr 0x12f027800 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x12f027768 <col:13> 'int ()' Function 0x12f00e048 'skip_prefix' 'int ()'
|   |     | |-ImplicitCastExpr 0x12f027850 <col:25> 'const char *' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x12f027788 <col:25> 'const char *' lvalue ParmVar 0x12f00dcd8 'feature' 'const char *'
|   |     | |-ImplicitCastExpr 0x12f027868 <col:34> 'char *' <ArrayToPointerDecay>
|   |     | | `-StringLiteral 0x12f0277a8 <col:34> 'char[4]' lvalue "STR"
|   |     | `-UnaryOperator 0x12f0277e8 <col:41, col:42> 'const char **' prefix '&' cannot overflow
|   |     |   `-DeclRefExpr 0x12f0277c8 <col:42> 'const char *' lvalue Var 0x12f00df50 'arg' 'const char *'
|   |     |-CompoundStmt 0x12f027980 <col:48, line:11:2>
|   |     | `-CallExpr 0x12f027918 <line:10:3, col:42> 'int'
|   |     |   |-ImplicitCastExpr 0x12f027900 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x12f027880 <col:3> 'int ()' Function 0x12f027598 'option_import_marks' 'int ()'
|   |     |   |-ImplicitCastExpr 0x12f027950 <col:23> 'const char *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x12f0278a0 <col:23> 'const char *' lvalue Var 0x12f00df50 'arg' 'const char *'
|   |     |   |-ImplicitCastExpr 0x12f027968 <col:28> 'int' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x12f0278c0 <col:28> 'int' lvalue ParmVar 0x12f00dd58 'from_stream' 'int'
|   |     |   `-IntegerLiteral 0x12f0278e0 <col:41> 'int' 1
|   |     `-IfStmt 0x12f029a00 <line:11:9, line:29:2> has_else
|   |       |-CallExpr 0x12f027a48 <line:11:13, col:45> 'int'
|   |       | |-ImplicitCastExpr 0x12f027a30 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x12f027998 <col:13> 'int ()' Function 0x12f00e048 'skip_prefix' 'int ()'
|   |       | |-ImplicitCastExpr 0x12f027a80 <col:25> 'const char *' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x12f0279b8 <col:25> 'const char *' lvalue ParmVar 0x12f00dcd8 'feature' 'const char *'
|   |       | |-ImplicitCastExpr 0x12f027a98 <col:34> 'char *' <ArrayToPointerDecay>
|   |       | | `-StringLiteral 0x12f0279d8 <col:34> 'char[4]' lvalue "STR"
|   |       | `-UnaryOperator 0x12f027a18 <col:41, col:42> 'const char **' prefix '&' cannot overflow
|   |       |   `-DeclRefExpr 0x12f0279f8 <col:42> 'const char *' lvalue Var 0x12f00df50 'arg' 'const char *'
|   |       |-CompoundStmt 0x12f027c28 <col:48, line:13:2>
|   |       | `-CallExpr 0x12f027be8 <line:12:3, col:26> 'int'
|   |       |   |-ImplicitCastExpr 0x12f027bd0 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   |       |   | `-DeclRefExpr 0x12f027b90 <col:3> 'int ()' Function 0x12f027ad8 'option_export_marks' 'int ()'
|   |       |   `-ImplicitCastExpr 0x12f027c10 <col:23> 'const char *' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x12f027bb0 <col:23> 'const char *' lvalue Var 0x12f00df50 'arg' 'const char *'
|   |       `-IfStmt 0x12f0299d0 <line:13:9, line:29:2> has_else
|   |         |-UnaryOperator 0x12f0283d0 <line:13:13, col:35> 'int' prefix '!' cannot overflow
|   |         | `-CallExpr 0x12f028358 <col:14, col:35> 'int'
|   |         |   |-ImplicitCastExpr 0x12f028340 <col:14> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |         |   | `-DeclRefExpr 0x12f028280 <col:14> 'int (const char *, const char *)' Function 0x12f0280a0 'strcmp' 'int (const char *, const char *)'
|   |         |   |-ImplicitCastExpr 0x12f028388 <col:21> 'const char *' <LValueToRValue>
|   |         |   | `-DeclRefExpr 0x12f0282a0 <col:21> 'const char *' lvalue ParmVar 0x12f00dcd8 'feature' 'const char *'
|   |         |   `-ImplicitCastExpr 0x12f0283b8 <col:30> 'const char *' <NoOp>
|   |         |     `-ImplicitCastExpr 0x12f0283a0 <col:30> 'char *' <ArrayToPointerDecay>
|   |         |       `-StringLiteral 0x12f0282c0 <col:30> 'char[4]' lvalue "STR"
|   |         |-CompoundStmt 0x12f029000 <col:38, line:15:2>
|   |         | `-NullStmt 0x12f0283e8 <line:14:3>
|   |         `-IfStmt 0x12f0299a0 <line:15:9, line:29:2> has_else
|   |           |-UnaryOperator 0x12f029138 <line:15:13, col:35> 'int' prefix '!' cannot overflow
|   |           | `-CallExpr 0x12f0290c0 <col:14, col:35> 'int'
|   |           |   |-ImplicitCastExpr 0x12f0290a8 <col:14> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |           |   | `-DeclRefExpr 0x12f029018 <col:14> 'int (const char *, const char *)' Function 0x12f0280a0 'strcmp' 'int (const char *, const char *)'
|   |           |   |-ImplicitCastExpr 0x12f0290f0 <col:21> 'const char *' <LValueToRValue>
|   |           |   | `-DeclRefExpr 0x12f029038 <col:21> 'const char *' lvalue ParmVar 0x12f00dcd8 'feature' 'const char *'
|   |           |   `-ImplicitCastExpr 0x12f029120 <col:30> 'const char *' <NoOp>
|   |           |     `-ImplicitCastExpr 0x12f029108 <col:30> 'char *' <ArrayToPointerDecay>
|   |           |       `-StringLiteral 0x12f029058 <col:30> 'char[4]' lvalue "STR"
|   |           |-CompoundStmt 0x12f029158 <col:38, line:17:2>
|   |           | `-NullStmt 0x12f029150 <line:16:3>
|   |           `-IfStmt 0x12f029970 <line:17:9, line:29:2> has_else
|   |             |-UnaryOperator 0x12f029290 <line:17:13, col:35> 'int' prefix '!' cannot overflow
|   |             | `-CallExpr 0x12f029218 <col:14, col:35> 'int'
|   |             |   |-ImplicitCastExpr 0x12f029200 <col:14> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |             |   | `-DeclRefExpr 0x12f029170 <col:14> 'int (const char *, const char *)' Function 0x12f0280a0 'strcmp' 'int (const char *, const char *)'
|   |             |   |-ImplicitCastExpr 0x12f029248 <col:21> 'const char *' <LValueToRValue>
|   |             |   | `-DeclRefExpr 0x12f029190 <col:21> 'const char *' lvalue ParmVar 0x12f00dcd8 'feature' 'const char *'
|   |             |   `-ImplicitCastExpr 0x12f029278 <col:30> 'const char *' <NoOp>
|   |             |     `-ImplicitCastExpr 0x12f029260 <col:30> 'char *' <ArrayToPointerDecay>
|   |             |       `-StringLiteral 0x12f0291b0 <col:30> 'char[4]' lvalue "STR"
|   |             |-CompoundStmt 0x12f0292c8 <col:38, line:19:2>
|   |             `-IfStmt 0x12f029940 <col:9, line:29:2> has_else
|   |               |-UnaryOperator 0x12f0293f8 <line:19:13, col:35> 'int' prefix '!' cannot overflow
|   |               | `-CallExpr 0x12f029380 <col:14, col:35> 'int'
|   |               |   |-ImplicitCastExpr 0x12f029368 <col:14> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |               |   | `-DeclRefExpr 0x12f0292d8 <col:14> 'int (const char *, const char *)' Function 0x12f0280a0 'strcmp' 'int (const char *, const char *)'
|   |               |   |-ImplicitCastExpr 0x12f0293b0 <col:21> 'const char *' <LValueToRValue>
|   |               |   | `-DeclRefExpr 0x12f0292f8 <col:21> 'const char *' lvalue ParmVar 0x12f00dcd8 'feature' 'const char *'
|   |               |   `-ImplicitCastExpr 0x12f0293e0 <col:30> 'const char *' <NoOp>
|   |               |     `-ImplicitCastExpr 0x12f0293c8 <col:30> 'char *' <ArrayToPointerDecay>
|   |               |       `-StringLiteral 0x12f029318 <col:30> 'char[4]' lvalue "STR"
|   |               |-CompoundStmt 0x12f029430 <col:38, line:21:2>
|   |               `-IfStmt 0x12f029910 <col:9, line:29:2> has_else
|   |                 |-UnaryOperator 0x12f029560 <line:21:13, col:35> 'int' prefix '!' cannot overflow
|   |                 | `-CallExpr 0x12f0294e8 <col:14, col:35> 'int'
|   |                 |   |-ImplicitCastExpr 0x12f0294d0 <col:14> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |                 |   | `-DeclRefExpr 0x12f029440 <col:14> 'int (const char *, const char *)' Function 0x12f0280a0 'strcmp' 'int (const char *, const char *)'
|   |                 |   |-ImplicitCastExpr 0x12f029518 <col:21> 'const char *' <LValueToRValue>
|   |                 |   | `-DeclRefExpr 0x12f029460 <col:21> 'const char *' lvalue ParmVar 0x12f00dcd8 'feature' 'const char *'
|   |                 |   `-ImplicitCastExpr 0x12f029548 <col:30> 'const char *' <NoOp>
|   |                 |     `-ImplicitCastExpr 0x12f029530 <col:30> 'char *' <ArrayToPointerDecay>
|   |                 |       `-StringLiteral 0x12f029480 <col:30> 'char[4]' lvalue "STR"
|   |                 |-CompoundStmt 0x12f029598 <col:38, line:23:2>
|   |                 `-IfStmt 0x12f0298e0 <col:9, line:29:2> has_else
|   |                   |-UnaryOperator 0x12f0296c8 <line:23:13, col:35> 'int' prefix '!' cannot overflow
|   |                   | `-CallExpr 0x12f029650 <col:14, col:35> 'int'
|   |                   |   |-ImplicitCastExpr 0x12f029638 <col:14> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |                   |   | `-DeclRefExpr 0x12f0295a8 <col:14> 'int (const char *, const char *)' Function 0x12f0280a0 'strcmp' 'int (const char *, const char *)'
|   |                   |   |-ImplicitCastExpr 0x12f029680 <col:21> 'const char *' <LValueToRValue>
|   |                   |   | `-DeclRefExpr 0x12f0295c8 <col:21> 'const char *' lvalue ParmVar 0x12f00dcd8 'feature' 'const char *'
|   |                   |   `-ImplicitCastExpr 0x12f0296b0 <col:30> 'const char *' <NoOp>
|   |                   |     `-ImplicitCastExpr 0x12f029698 <col:30> 'char *' <ArrayToPointerDecay>
|   |                   |       `-StringLiteral 0x12f0295e8 <col:30> 'char[4]' lvalue "STR"
|   |                   |-CompoundStmt 0x12f029700 <col:38, line:25:2>
|   |                   `-IfStmt 0x12f0298b0 <col:9, line:29:2> has_else
|   |                     |-UnaryOperator 0x12f029830 <line:25:13, col:35> 'int' prefix '!' cannot overflow
|   |                     | `-CallExpr 0x12f0297b8 <col:14, col:35> 'int'
|   |                     |   |-ImplicitCastExpr 0x12f0297a0 <col:14> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |                     |   | `-DeclRefExpr 0x12f029710 <col:14> 'int (const char *, const char *)' Function 0x12f0280a0 'strcmp' 'int (const char *, const char *)'
|   |                     |   |-ImplicitCastExpr 0x12f0297e8 <col:21> 'const char *' <LValueToRValue>
|   |                     |   | `-DeclRefExpr 0x12f029730 <col:21> 'const char *' lvalue ParmVar 0x12f00dcd8 'feature' 'const char *'
|   |                     |   `-ImplicitCastExpr 0x12f029818 <col:30> 'const char *' <NoOp>
|   |                     |     `-ImplicitCastExpr 0x12f029800 <col:30> 'char *' <ArrayToPointerDecay>
|   |                     |       `-StringLiteral 0x12f029750 <col:30> 'char[4]' lvalue "STR"
|   |                     |-CompoundStmt 0x12f029850 <col:38, line:27:2>
|   |                     | `-NullStmt 0x12f029848 <line:26:3>
|   |                     `-CompoundStmt 0x12f029898 <line:27:9, line:29:2>
|   |                       `-ReturnStmt 0x12f029888 <line:28:3, col:10>
|   |                         `-IntegerLiteral 0x12f029868 <col:10> 'int' 0
|   `-ReturnStmt 0x12f029ae0 <line:31:2, col:9>
|     `-IntegerLiteral 0x12f029ac0 <col:9> 'int' 1
`-FunctionDecl 0x12f0280a0 <line:13:14> col:14 implicit used strcmp 'int (const char *, const char *)' extern
  |-ParmVarDecl 0x12f0281a0 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x12f028208 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x12f028148 <<invalid sloc>> Implicit 887
