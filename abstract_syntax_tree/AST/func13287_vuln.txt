TranslationUnitDecl 0x13e855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x13e8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x13e855bd0 '__int128'
|-TypedefDecl 0x13e856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x13e855bf0 'unsigned __int128'
|-TypedefDecl 0x13e926230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13e926000 'struct __NSConstantString_tag'
|   `-Record 0x13e856580 '__NSConstantString_tag'
|-TypedefDecl 0x13e926298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x13e855d90 '__SVInt8_t'
|-TypedefDecl 0x13e926300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x13e855db0 '__SVInt16_t'
|-TypedefDecl 0x13e926368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x13e855dd0 '__SVInt32_t'
|-TypedefDecl 0x13e9263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x13e855df0 '__SVInt64_t'
|-TypedefDecl 0x13e926438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x13e855e10 '__SVUint8_t'
|-TypedefDecl 0x13e9264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x13e855e30 '__SVUint16_t'
|-TypedefDecl 0x13e926508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x13e855e50 '__SVUint32_t'
|-TypedefDecl 0x13e926570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x13e855e70 '__SVUint64_t'
|-TypedefDecl 0x13e9265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x13e855e90 '__SVFloat16_t'
|-TypedefDecl 0x13e926640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x13e855eb0 '__SVFloat32_t'
|-TypedefDecl 0x13e9266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x13e855ed0 '__SVFloat64_t'
|-TypedefDecl 0x13e926710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x13e855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13e926778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x13e855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13e9267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x13e855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13e926848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x13e855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13e9268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x13e855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13e926918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x13e855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13e926980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x13e855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13e9269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x13e855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13e926a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x13e855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13e926ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x13e856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13e926b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x13e856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13e926b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x13e856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13e926bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x13e856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13e926c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x13e856090 '__clang_svint8x3_t'
|-TypedefDecl 0x13e926cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x13e8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13e926d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x13e8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13e926d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x13e8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13e926df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x13e856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13e926e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x13e856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13e926ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x13e856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13e926f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x13e856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13e926f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x13e856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13e927800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x13e8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13e927868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x13e8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13e9278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x13e8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13e927938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x13e856210 '__clang_svint8x4_t'
|-TypedefDecl 0x13e9279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x13e856230 '__clang_svint16x4_t'
|-TypedefDecl 0x13e927a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x13e856250 '__clang_svint32x4_t'
|-TypedefDecl 0x13e927a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x13e856270 '__clang_svint64x4_t'
|-TypedefDecl 0x13e927ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x13e856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13e927b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x13e8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13e927ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x13e8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13e927c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x13e8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13e927c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x13e856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13e927ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x13e856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13e927d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x13e856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13e927db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x13e856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13e927e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x13e856390 '__SVBool_t'
|-TypedefDecl 0x13e927e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x13e8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13e927ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x13e8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13e927f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x13e8563f0 '__SVCount_t'
|-TypedefDecl 0x13e927ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13e927fb0 'char *'
|   `-BuiltinType 0x13e8556b0 'char'
|-TypedefDecl 0x13e928068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13e927fb0 'char *'
|   `-BuiltinType 0x13e8556b0 'char'
`-FunctionDecl 0x13e928500 <dataset_diviso_filec/func13287_vuln.c:1:1, line:20:1> line:1:20 ModulateLCHuv 'void (const double, const double, const double, double *, double *, double *)' static inline
  |-ParmVarDecl 0x13e9280d8 <col:34, col:47> col:47 used percent_luma 'const double'
  |-ParmVarDecl 0x13e928158 <line:2:3, col:16> col:16 used percent_chroma 'const double'
  |-ParmVarDecl 0x13e9281d8 <col:31, col:44> col:44 used percent_hue 'const double'
  |-ParmVarDecl 0x13e928288 <col:56, col:64> col:64 used red 'double *'
  |-ParmVarDecl 0x13e928308 <line:3:3, col:11> col:11 used green 'double *'
  |-ParmVarDecl 0x13e928388 <col:17, col:25> col:25 used blue 'double *'
  `-CompoundStmt 0x13e942370 <line:4:1, line:20:1>
    |-DeclStmt 0x13e9287c0 <line:5:3, line:8:11>
    | |-VarDecl 0x13e928638 <line:5:3, line:6:5> col:5 used hue 'double'
    | |-VarDecl 0x13e9286b8 <line:5:3, line:7:5> col:5 used luma 'double'
    | `-VarDecl 0x13e928738 <line:5:3, line:8:5> col:5 used chroma 'double'
    |-CallExpr 0x13e941b18 <line:11:3, col:57> 'int'
    | |-ImplicitCastExpr 0x13e941b00 <col:3> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x13e941910 <col:3> 'int ()' Function 0x13e941858 'ConvertRGBToLCHuv' 'int ()'
    | |-ImplicitCastExpr 0x13e941b68 <col:21, col:22> 'double' <LValueToRValue>
    | | `-UnaryOperator 0x13e941968 <col:21, col:22> 'double' lvalue prefix '*' cannot overflow
    | |   `-ImplicitCastExpr 0x13e941950 <col:22> 'double *' <LValueToRValue>
    | |     `-DeclRefExpr 0x13e941930 <col:22> 'double *' lvalue ParmVar 0x13e928288 'red' 'double *'
    | |-ImplicitCastExpr 0x13e941b80 <col:26, col:27> 'double' <LValueToRValue>
    | | `-UnaryOperator 0x13e9419b8 <col:26, col:27> 'double' lvalue prefix '*' cannot overflow
    | |   `-ImplicitCastExpr 0x13e9419a0 <col:27> 'double *' <LValueToRValue>
    | |     `-DeclRefExpr 0x13e941980 <col:27> 'double *' lvalue ParmVar 0x13e928308 'green' 'double *'
    | |-ImplicitCastExpr 0x13e941b98 <col:33, col:34> 'double' <LValueToRValue>
    | | `-UnaryOperator 0x13e941a08 <col:33, col:34> 'double' lvalue prefix '*' cannot overflow
    | |   `-ImplicitCastExpr 0x13e9419f0 <col:34> 'double *' <LValueToRValue>
    | |     `-DeclRefExpr 0x13e9419d0 <col:34> 'double *' lvalue ParmVar 0x13e928388 'blue' 'double *'
    | |-UnaryOperator 0x13e941a40 <col:39, col:40> 'double *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x13e941a20 <col:40> 'double' lvalue Var 0x13e9286b8 'luma' 'double'
    | |-UnaryOperator 0x13e941a78 <col:45, col:46> 'double *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x13e941a58 <col:46> 'double' lvalue Var 0x13e928738 'chroma' 'double'
    | `-UnaryOperator 0x13e941ab0 <col:53, col:54> 'double *' prefix '&' cannot overflow
    |   `-DeclRefExpr 0x13e941a90 <col:54> 'double' lvalue Var 0x13e928638 'hue' 'double'
    |-CompoundAssignOperator 0x13e941c48 <line:12:3, col:14> 'double' '*=' ComputeLHSTy='double' ComputeResultTy='double'
    | |-DeclRefExpr 0x13e941bb0 <col:3> 'double' lvalue Var 0x13e9286b8 'luma' 'double'
    | `-BinaryOperator 0x13e941c28 <col:9, col:14> 'double' '*'
    |   |-FloatingLiteral 0x13e941bd0 <col:9> 'double' 1.000000e-02
    |   `-ImplicitCastExpr 0x13e941c10 <col:14> 'double' <LValueToRValue>
    |     `-DeclRefExpr 0x13e941bf0 <col:14> 'const double' lvalue ParmVar 0x13e9280d8 'percent_luma' 'const double'
    |-CompoundAssignOperator 0x13e941d10 <line:13:3, col:16> 'double' '*=' ComputeLHSTy='double' ComputeResultTy='double'
    | |-DeclRefExpr 0x13e941c78 <col:3> 'double' lvalue Var 0x13e928738 'chroma' 'double'
    | `-BinaryOperator 0x13e941cf0 <col:11, col:16> 'double' '*'
    |   |-FloatingLiteral 0x13e941c98 <col:11> 'double' 1.000000e-02
    |   `-ImplicitCastExpr 0x13e941cd8 <col:16> 'double' <LValueToRValue>
    |     `-DeclRefExpr 0x13e941cb8 <col:16> 'const double' lvalue ParmVar 0x13e928158 'percent_chroma' 'const double'
    |-CompoundAssignOperator 0x13e941e78 <line:14:3, col:33> 'double' '+=' ComputeLHSTy='double' ComputeResultTy='double'
    | |-DeclRefExpr 0x13e941d40 <col:3> 'double' lvalue Var 0x13e928638 'hue' 'double'
    | `-BinaryOperator 0x13e941e58 <col:8, col:33> 'double' '*'
    |   |-FloatingLiteral 0x13e941d60 <col:8> 'double' 5.000000e-01
    |   `-ParenExpr 0x13e941e38 <col:12, col:33> 'double'
    |     `-BinaryOperator 0x13e941e18 <col:13, col:30> 'double' '-'
    |       |-BinaryOperator 0x13e941dd8 <col:13, col:18> 'double' '*'
    |       | |-FloatingLiteral 0x13e941d80 <col:13> 'double' 1.000000e-02
    |       | `-ImplicitCastExpr 0x13e941dc0 <col:18> 'double' <LValueToRValue>
    |       |   `-DeclRefExpr 0x13e941da0 <col:18> 'const double' lvalue ParmVar 0x13e9281d8 'percent_hue' 'const double'
    |       `-FloatingLiteral 0x13e941df8 <col:30> 'double' 1.000000e+00
    |-WhileStmt 0x13e941f90 <line:15:3, line:16:10>
    | |-BinaryOperator 0x13e941f00 <line:15:10, col:16> 'int' '<'
    | | |-ImplicitCastExpr 0x13e941ee8 <col:10> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x13e941ea8 <col:10> 'double' lvalue Var 0x13e928638 'hue' 'double'
    | | `-FloatingLiteral 0x13e941ec8 <col:16> 'double' 0.000000e+00
    | `-CompoundAssignOperator 0x13e941f60 <line:16:5, col:10> 'double' '+=' ComputeLHSTy='double' ComputeResultTy='double'
    |   |-DeclRefExpr 0x13e941f20 <col:5> 'double' lvalue Var 0x13e928638 'hue' 'double'
    |   `-FloatingLiteral 0x13e941f40 <col:10> 'double' 1.000000e+00
    |-WhileStmt 0x13e942098 <line:17:3, line:18:10>
    | |-BinaryOperator 0x13e942008 <line:17:10, col:17> 'int' '>='
    | | |-ImplicitCastExpr 0x13e941ff0 <col:10> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x13e941fb0 <col:10> 'double' lvalue Var 0x13e928638 'hue' 'double'
    | | `-FloatingLiteral 0x13e941fd0 <col:17> 'double' 1.000000e+00
    | `-CompoundAssignOperator 0x13e942068 <line:18:5, col:10> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
    |   |-DeclRefExpr 0x13e942028 <col:5> 'double' lvalue Var 0x13e928638 'hue' 'double'
    |   `-FloatingLiteral 0x13e942048 <col:10> 'double' 1.000000e+00
    `-CallExpr 0x13e942290 <line:19:3, col:51> 'int'
      |-ImplicitCastExpr 0x13e942278 <col:3> 'int (*)()' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x13e942198 <col:3> 'int ()' Function 0x13e9420e0 'ConvertLCHuvToRGB' 'int ()'
      |-ImplicitCastExpr 0x13e9422e0 <col:21> 'double' <LValueToRValue>
      | `-DeclRefExpr 0x13e9421b8 <col:21> 'double' lvalue Var 0x13e9286b8 'luma' 'double'
      |-ImplicitCastExpr 0x13e9422f8 <col:26> 'double' <LValueToRValue>
      | `-DeclRefExpr 0x13e9421d8 <col:26> 'double' lvalue Var 0x13e928738 'chroma' 'double'
      |-ImplicitCastExpr 0x13e942310 <col:33> 'double' <LValueToRValue>
      | `-DeclRefExpr 0x13e9421f8 <col:33> 'double' lvalue Var 0x13e928638 'hue' 'double'
      |-ImplicitCastExpr 0x13e942328 <col:37> 'double *' <LValueToRValue>
      | `-DeclRefExpr 0x13e942218 <col:37> 'double *' lvalue ParmVar 0x13e928288 'red' 'double *'
      |-ImplicitCastExpr 0x13e942340 <col:41> 'double *' <LValueToRValue>
      | `-DeclRefExpr 0x13e942238 <col:41> 'double *' lvalue ParmVar 0x13e928308 'green' 'double *'
      `-ImplicitCastExpr 0x13e942358 <col:47> 'double *' <LValueToRValue>
        `-DeclRefExpr 0x13e942258 <col:47> 'double *' lvalue ParmVar 0x13e928388 'blue' 'double *'
