TranslationUnitDecl 0x12e055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x12e0564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x12e055bd0 '__int128'
|-TypedefDecl 0x12e056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x12e055bf0 'unsigned __int128'
|-TypedefDecl 0x12e80be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12e80bc00 'struct __NSConstantString_tag'
|   `-Record 0x12e056580 '__NSConstantString_tag'
|-TypedefDecl 0x12e80be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x12e055d90 '__SVInt8_t'
|-TypedefDecl 0x12e80bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x12e055db0 '__SVInt16_t'
|-TypedefDecl 0x12e80bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x12e055dd0 '__SVInt32_t'
|-TypedefDecl 0x12e80bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x12e055df0 '__SVInt64_t'
|-TypedefDecl 0x12e80c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x12e055e10 '__SVUint8_t'
|-TypedefDecl 0x12e80c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x12e055e30 '__SVUint16_t'
|-TypedefDecl 0x12e80c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x12e055e50 '__SVUint32_t'
|-TypedefDecl 0x12e80c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x12e055e70 '__SVUint64_t'
|-TypedefDecl 0x12e80c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x12e055e90 '__SVFloat16_t'
|-TypedefDecl 0x12e80c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x12e055eb0 '__SVFloat32_t'
|-TypedefDecl 0x12e80c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x12e055ed0 '__SVFloat64_t'
|-TypedefDecl 0x12e80c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x12e055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12e80c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x12e055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12e80c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x12e055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12e80c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x12e055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12e80c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x12e055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12e80c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x12e055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12e80c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x12e055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12e80c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x12e055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12e80c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x12e055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12e80c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x12e056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12e80c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x12e056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12e80c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x12e056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12e80c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x12e056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12e80c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x12e056090 '__clang_svint8x3_t'
|-TypedefDecl 0x12e80c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x12e0560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12e80c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x12e0560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12e80c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x12e0560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12e80c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x12e056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12e80ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x12e056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12e80cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x12e056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12e80cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x12e056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12e80cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x12e056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12e80d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x12e0561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12e80d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x12e0561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12e80d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x12e0561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12e80d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x12e056210 '__clang_svint8x4_t'
|-TypedefDecl 0x12e80d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x12e056230 '__clang_svint16x4_t'
|-TypedefDecl 0x12e80d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x12e056250 '__clang_svint32x4_t'
|-TypedefDecl 0x12e80d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x12e056270 '__clang_svint64x4_t'
|-TypedefDecl 0x12e80d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x12e056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12e80d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x12e0562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12e80d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x12e0562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12e80d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x12e0562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12e80d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x12e056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12e80d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x12e056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12e80d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x12e056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12e80d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x12e056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12e80da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x12e056390 '__SVBool_t'
|-TypedefDecl 0x12e80da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x12e0563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12e80dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x12e0563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12e80db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x12e0563f0 '__SVCount_t'
|-TypedefDecl 0x12e80dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12e80dbb0 'char *'
|   `-BuiltinType 0x12e0556b0 'char'
|-TypedefDecl 0x12e80dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12e80dbb0 'char *'
|   `-BuiltinType 0x12e0556b0 'char'
|-FunctionDecl 0x12e80e038 <dataset_diviso_filec/func24610_vuln.c:1:1, line:73:1> line:1:1 invalid smb_fdata 'int (int *, const char *, const char *, const char *, int)'
| |-ParmVarDecl 0x12e80dd28 <col:11, col:31> col:31 invalid ndo 'int *'
| |-ParmVarDecl 0x12e80dda8 <line:2:11, col:25> col:25 used buf 'const char *'
| |-ParmVarDecl 0x12e80de28 <col:30, col:42> col:42 used fmt 'const char *'
| |-ParmVarDecl 0x12e80dea8 <col:47, col:61> col:61 used maxbuf 'const char *'
| |-ParmVarDecl 0x12e80df28 <line:3:11, col:15> col:15 used unicodestr 'int'
| `-CompoundStmt 0x12e82baa8 <line:4:1, line:73:1>
|   |-DeclStmt 0x12e80e1a8 <line:5:5, col:25>
|   | `-VarDecl 0x12e80e120 <col:5, col:24> col:16 used depth 'int' static cinit
|   |   `-IntegerLiteral 0x12e80e188 <col:24> 'int' 0
|   |-DeclStmt 0x12e80e2c8 <line:6:5, col:16>
|   | `-VarDecl 0x12e80e260 <col:5, col:15> col:10 used s 'char[128]'
|   |-DeclStmt 0x12e80e360 <line:7:5, col:12>
|   | `-VarDecl 0x12e80e2f8 <col:5, col:11> col:11 used p 'char *'
|   |-WhileStmt 0x12e82b6f8 <line:9:5, line:65:5>
|   | |-ImplicitCastExpr 0x12e80e3c8 <line:9:12, col:13> 'char' <LValueToRValue>
|   | | `-UnaryOperator 0x12e80e3b0 <col:12, col:13> 'const char' lvalue prefix '*' cannot overflow
|   | |   `-ImplicitCastExpr 0x12e80e398 <col:13> 'const char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x12e80e378 <col:13> 'const char *' lvalue ParmVar 0x12e80de28 'fmt' 'const char *'
|   | `-CompoundStmt 0x12e82b6e0 <col:18, line:65:5>
|   |   `-SwitchStmt 0x12e827460 <line:10:2, line:64:2>
|   |     |-ImplicitCastExpr 0x12e827448 <line:10:10, col:11> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x12e827430 <col:10, col:11> 'char' <LValueToRValue>
|   |     |   `-UnaryOperator 0x12e827418 <col:10, col:11> 'const char' lvalue prefix '*' cannot overflow
|   |     |     `-ImplicitCastExpr 0x12e827400 <col:11> 'const char *' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x12e80e3e0 <col:11> 'const char *' lvalue ParmVar 0x12e80de28 'fmt' 'const char *'
|   |     `-CompoundStmt 0x12e82b608 <col:16, line:64:2>
|   |       |-CaseStmt 0x12e8274b8 <line:11:2, line:12:9>
|   |       | |-ConstantExpr 0x12e8274a0 <line:11:7> 'int'
|   |       | | `-CharacterLiteral 0x12e827488 <col:7> 'int' 42
|   |       | `-UnaryOperator 0x12e827500 <line:12:6, col:9> 'const char *' postfix '++'
|   |       |   `-DeclRefExpr 0x12e8274e0 <col:6> 'const char *' lvalue ParmVar 0x12e80de28 'fmt' 'const char *'
|   |       |-WhileStmt 0x12e827eb8 <line:13:6, line:23:6>
|   |       | |-BinaryOperator 0x12e827588 <line:13:13, col:19> 'int' '<'
|   |       | | |-ImplicitCastExpr 0x12e827558 <col:13> 'const char *' <LValueToRValue>
|   |       | | | `-DeclRefExpr 0x12e827518 <col:13> 'const char *' lvalue ParmVar 0x12e80dda8 'buf' 'const char *'
|   |       | | `-ImplicitCastExpr 0x12e827570 <col:19> 'const char *' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x12e827538 <col:19> 'const char *' lvalue ParmVar 0x12e80dea8 'maxbuf' 'const char *'
|   |       | `-CompoundStmt 0x12e827e78 <col:27, line:23:6>
|   |       |   |-DeclStmt 0x12e827628 <line:14:3, col:21>
|   |       |   | `-VarDecl 0x12e8275c0 <col:3, col:17> col:17 used buf2 'const char *'
|   |       |   |-UnaryOperator 0x12e827660 <line:15:3, col:8> 'int' postfix '++'
|   |       |   | `-DeclRefExpr 0x12e827640 <col:3> 'int' lvalue Var 0x12e80e120 'depth' 'int'
|   |       |   |-BinaryOperator 0x12e8277a0 <line:16:3, col:53> 'const char *' contains-errors '='
|   |       |   | |-DeclRefExpr 0x12e827678 <col:3> 'const char *' lvalue Var 0x12e8275c0 'buf2' 'const char *'
|   |       |   | `-CallExpr 0x12e827758 <col:10, col:53> '<dependent type>' contains-errors
|   |       |   |   |-RecoveryExpr 0x12e827698 <col:10> '<dependent type>' contains-errors lvalue
|   |       |   |   |-RecoveryExpr 0x12e8276b8 <col:20> '<dependent type>' contains-errors lvalue
|   |       |   |   |-DeclRefExpr 0x12e8276d8 <col:25> 'const char *' lvalue ParmVar 0x12e80dda8 'buf' 'const char *'
|   |       |   |   |-DeclRefExpr 0x12e8276f8 <col:30> 'const char *' lvalue ParmVar 0x12e80de28 'fmt' 'const char *'
|   |       |   |   |-DeclRefExpr 0x12e827718 <col:35> 'const char *' lvalue ParmVar 0x12e80dea8 'maxbuf' 'const char *'
|   |       |   |   `-DeclRefExpr 0x12e827738 <col:43> 'int' lvalue ParmVar 0x12e80df28 'unicodestr' 'int'
|   |       |   |-UnaryOperator 0x12e8277e0 <line:17:3, col:8> 'int' postfix '--'
|   |       |   | `-DeclRefExpr 0x12e8277c0 <col:3> 'int' lvalue Var 0x12e80e120 'depth' 'int'
|   |       |   |-IfStmt 0x12e827de0 <line:20:3, line:21:17>
|   |       |   | |-BinaryOperator 0x12e827918 <line:20:7, col:15> 'int' '=='
|   |       |   | | |-ImplicitCastExpr 0x12e8278e8 <col:7> 'const char *' <LValueToRValue>
|   |       |   | | | `-DeclRefExpr 0x12e8278a8 <col:7> 'const char *' lvalue Var 0x12e8275c0 'buf2' 'const char *'
|   |       |   | | `-ImplicitCastExpr 0x12e827900 <col:15> 'const char *' <LValueToRValue>
|   |       |   | |   `-DeclRefExpr 0x12e8278c8 <col:15> 'const char *' lvalue ParmVar 0x12e80dda8 'buf' 'const char *'
|   |       |   | `-ReturnStmt 0x12e827dd0 <line:21:7, col:17>
|   |       |   |   `-ImplicitCastExpr 0x12e827990 <col:13, col:17> 'int' <PointerToIntegral>
|   |       |   |     `-ImplicitCastExpr 0x12e827978 <col:13, col:17> 'const char *' <LValueToRValue>
|   |       |   |       `-ParenExpr 0x12e827958 <col:13, col:17> 'const char *' lvalue
|   |       |   |         `-DeclRefExpr 0x12e827938 <col:14> 'const char *' lvalue ParmVar 0x12e80dda8 'buf' 'const char *'
|   |       |   `-BinaryOperator 0x12e827e58 <line:22:3, col:9> 'const char *' '='
|   |       |     |-DeclRefExpr 0x12e827e00 <col:3> 'const char *' lvalue ParmVar 0x12e80dda8 'buf' 'const char *'
|   |       |     `-ImplicitCastExpr 0x12e827e40 <col:9> 'const char *' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x12e827e20 <col:9> 'const char *' lvalue Var 0x12e8275c0 'buf2' 'const char *'
|   |       |-ReturnStmt 0x12e827f48 <line:24:6, col:16>
|   |       | `-ImplicitCastExpr 0x12e827f30 <col:12, col:16> 'int' <PointerToIntegral>
|   |       |   `-ImplicitCastExpr 0x12e827f18 <col:12, col:16> 'const char *' <LValueToRValue>
|   |       |     `-ParenExpr 0x12e827ef8 <col:12, col:16> 'const char *' lvalue
|   |       |       `-DeclRefExpr 0x12e827ed8 <col:13> 'const char *' lvalue ParmVar 0x12e80dda8 'buf' 'const char *'
|   |       |-CaseStmt 0x12e827f88 <line:26:2, line:27:9>
|   |       | |-ConstantExpr 0x12e827f70 <line:26:7> 'int'
|   |       | | `-CharacterLiteral 0x12e827f58 <col:7> 'int' 124
|   |       | `-UnaryOperator 0x12e827fd0 <line:27:6, col:9> 'const char *' postfix '++'
|   |       |   `-DeclRefExpr 0x12e827fb0 <col:6> 'const char *' lvalue ParmVar 0x12e80de28 'fmt' 'const char *'
|   |       |-IfStmt 0x12e8280f8 <line:28:6, line:29:13>
|   |       | |-BinaryOperator 0x12e828058 <line:28:10, col:17> 'int' '>='
|   |       | | |-ImplicitCastExpr 0x12e828028 <col:10> 'const char *' <LValueToRValue>
|   |       | | | `-DeclRefExpr 0x12e827fe8 <col:10> 'const char *' lvalue ParmVar 0x12e80dda8 'buf' 'const char *'
|   |       | | `-ImplicitCastExpr 0x12e828040 <col:17> 'const char *' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x12e828008 <col:17> 'const char *' lvalue ParmVar 0x12e80dea8 'maxbuf' 'const char *'
|   |       | `-ReturnStmt 0x12e8280e8 <line:29:3, col:13>
|   |       |   `-ImplicitCastExpr 0x12e8280d0 <col:9, col:13> 'int' <PointerToIntegral>
|   |       |     `-ImplicitCastExpr 0x12e8280b8 <col:9, col:13> 'const char *' <LValueToRValue>
|   |       |       `-ParenExpr 0x12e828098 <col:9, col:13> 'const char *' lvalue
|   |       |         `-DeclRefExpr 0x12e828078 <col:10> 'const char *' lvalue ParmVar 0x12e80dda8 'buf' 'const char *'
|   |       |-BreakStmt 0x12e828118 <line:30:6>
|   |       |-CaseStmt 0x12e828150 <line:32:2, line:33:9>
|   |       | |-ConstantExpr 0x12e828138 <line:32:7> 'int'
|   |       | | `-CharacterLiteral 0x12e828120 <col:7> 'int' 37
|   |       | `-UnaryOperator 0x12e828198 <line:33:6, col:9> 'const char *' postfix '++'
|   |       |   `-DeclRefExpr 0x12e828178 <col:6> 'const char *' lvalue ParmVar 0x12e80de28 'fmt' 'const char *'
|   |       |-BinaryOperator 0x12e828208 <line:34:6, col:12> 'const char *' '='
|   |       | |-DeclRefExpr 0x12e8281b0 <col:6> 'const char *' lvalue ParmVar 0x12e80dda8 'buf' 'const char *'
|   |       | `-ImplicitCastExpr 0x12e8281f0 <col:12> 'const char *' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x12e8281d0 <col:12> 'const char *' lvalue ParmVar 0x12e80dea8 'maxbuf' 'const char *'
|   |       |-BreakStmt 0x12e828228 <line:35:6>
|   |       |-CaseStmt 0x12e828260 <line:37:2, line:38:9>
|   |       | |-ConstantExpr 0x12e828248 <line:37:7> 'int'
|   |       | | `-CharacterLiteral 0x12e828230 <col:7> 'int' 35
|   |       | `-UnaryOperator 0x12e8282a8 <line:38:6, col:9> 'const char *' postfix '++'
|   |       |   `-DeclRefExpr 0x12e828288 <col:6> 'const char *' lvalue ParmVar 0x12e80de28 'fmt' 'const char *'
|   |       |-ReturnStmt 0x12e828330 <line:39:6, col:16>
|   |       | `-ImplicitCastExpr 0x12e828318 <col:12, col:16> 'int' <PointerToIntegral>
|   |       |   `-ImplicitCastExpr 0x12e828300 <col:12, col:16> 'const char *' <LValueToRValue>
|   |       |     `-ParenExpr 0x12e8282e0 <col:12, col:16> 'const char *' lvalue
|   |       |       `-DeclRefExpr 0x12e8282c0 <col:13> 'const char *' lvalue ParmVar 0x12e80dda8 'buf' 'const char *'
|   |       |-BreakStmt 0x12e828340 <line:40:6>
|   |       |-CaseStmt 0x12e828378 <line:42:2, line:43:9>
|   |       | |-ConstantExpr 0x12e828360 <line:42:7> 'int'
|   |       | | `-CharacterLiteral 0x12e828348 <col:7> 'int' 91
|   |       | `-UnaryOperator 0x12e8283c0 <line:43:6, col:9> 'const char *' postfix '++'
|   |       |   `-DeclRefExpr 0x12e8283a0 <col:6> 'const char *' lvalue ParmVar 0x12e80de28 'fmt' 'const char *'
|   |       |-IfStmt 0x12e829ef0 <line:44:6, line:45:13>
|   |       | |-BinaryOperator 0x12e829e50 <line:44:10, col:17> 'int' '>='
|   |       | | |-ImplicitCastExpr 0x12e829e20 <col:10> 'const char *' <LValueToRValue>
|   |       | | | `-DeclRefExpr 0x12e8283d8 <col:10> 'const char *' lvalue ParmVar 0x12e80dda8 'buf' 'const char *'
|   |       | | `-ImplicitCastExpr 0x12e829e38 <col:17> 'const char *' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x12e829e00 <col:17> 'const char *' lvalue ParmVar 0x12e80dea8 'maxbuf' 'const char *'
|   |       | `-ReturnStmt 0x12e829ee0 <line:45:3, col:13>
|   |       |   `-ImplicitCastExpr 0x12e829ec8 <col:9, col:13> 'int' <PointerToIntegral>
|   |       |     `-ImplicitCastExpr 0x12e829eb0 <col:9, col:13> 'const char *' <LValueToRValue>
|   |       |       `-ParenExpr 0x12e829e90 <col:9, col:13> 'const char *' lvalue
|   |       |         `-DeclRefExpr 0x12e829e70 <col:10> 'const char *' lvalue ParmVar 0x12e80dda8 'buf' 'const char *'
|   |       |-CallExpr 0x12e82a2c8 <line:46:6, col:28> 'void *'
|   |       | |-ImplicitCastExpr 0x12e82a2b0 <col:6> 'void *(*)(void *, int, unsigned long)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x12e82a1a8 <col:6> 'void *(void *, int, unsigned long)' Function 0x12e829f58 'memset' 'void *(void *, int, unsigned long)'
|   |       | |-ImplicitCastExpr 0x12e82a318 <col:13> 'void *' <BitCast>
|   |       | | `-ImplicitCastExpr 0x12e82a300 <col:13> 'char *' <ArrayToPointerDecay>
|   |       | |   `-DeclRefExpr 0x12e82a1c8 <col:13> 'char[128]' lvalue Var 0x12e80e260 's' 'char[128]'
|   |       | |-IntegerLiteral 0x12e82a1e8 <col:16> 'int' 0
|   |       | `-UnaryExprOrTypeTraitExpr 0x12e82a248 <col:19, col:27> 'unsigned long' sizeof
|   |       |   `-ParenExpr 0x12e82a228 <col:25, col:27> 'char[128]' lvalue
|   |       |     `-DeclRefExpr 0x12e82a208 <col:26> 'char[128]' lvalue Var 0x12e80e260 's' 'char[128]' non_odr_use_unevaluated
|   |       |-BinaryOperator 0x12e82a670 <line:47:6, col:25> 'char *' '='
|   |       | |-DeclRefExpr 0x12e82a330 <col:6> 'char *' lvalue Var 0x12e80e2f8 'p' 'char *'
|   |       | `-CallExpr 0x12e82a628 <col:10, col:25> 'char *'
|   |       |   |-ImplicitCastExpr 0x12e82a610 <col:10> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   |       |   | `-DeclRefExpr 0x12e82a570 <col:10> 'char *(const char *, int)' Function 0x12e82a390 'strchr' 'char *(const char *, int)'
|   |       |   |-ImplicitCastExpr 0x12e82a658 <col:17> 'const char *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x12e82a590 <col:17> 'const char *' lvalue ParmVar 0x12e80de28 'fmt' 'const char *'
|   |       |   `-CharacterLiteral 0x12e82a5b0 <col:22> 'int' 93
|   |       |-IfStmt 0x12e82a938 <line:48:6, line:51:6>
|   |       | |-BinaryOperator 0x12e82a880 <line:48:10, col:42> 'int' contains-errors '>'
|   |       | | |-RecoveryExpr 0x12e82a7f0 <col:10, col:30> '<dependent type>' contains-errors lvalue
|   |       | | | |-ParenExpr 0x12e82a6e8 <col:10, col:17> '<overloaded function type>' lvalue
|   |       | | | | `-UnresolvedLookupExpr 0x12e82a6a8 <col:11> '<overloaded function type>' lvalue (no ADL) = 'size_t' empty
|   |       | | | `-BinaryOperator 0x12e82a7d0 <col:19, col:29> 'long' '+'
|   |       | | |   |-BinaryOperator 0x12e82a778 <col:19, col:23> 'long' '-'
|   |       | | |   | |-ImplicitCastExpr 0x12e82a748 <col:19> 'char *' <LValueToRValue>
|   |       | | |   | | `-DeclRefExpr 0x12e82a708 <col:19> 'char *' lvalue Var 0x12e80e2f8 'p' 'char *'
|   |       | | |   | `-ImplicitCastExpr 0x12e82a760 <col:23> 'const char *' <LValueToRValue>
|   |       | | |   |   `-DeclRefExpr 0x12e82a728 <col:23> 'const char *' lvalue ParmVar 0x12e80de28 'fmt' 'const char *'
|   |       | | |   `-ImplicitCastExpr 0x12e82a7b8 <col:29> 'long' <IntegralCast>
|   |       | | |     `-IntegerLiteral 0x12e82a798 <col:29> 'int' 1
|   |       | | `-UnaryExprOrTypeTraitExpr 0x12e82a860 <col:34, col:42> 'unsigned long' sizeof
|   |       | |   `-ParenExpr 0x12e82a840 <col:40, col:42> 'char[128]' lvalue
|   |       | |     `-DeclRefExpr 0x12e82a820 <col:41> 'char[128]' lvalue Var 0x12e80e260 's' 'char[128]' non_odr_use_unevaluated
|   |       | `-CompoundStmt 0x12e82a920 <col:45, line:51:6>
|   |       |   `-ReturnStmt 0x12e82a910 <line:50:3, col:13>
|   |       |     `-ImplicitCastExpr 0x12e82a8f8 <col:9, col:13> 'int' <PointerToIntegral>
|   |       |       `-ImplicitCastExpr 0x12e82a8e0 <col:9, col:13> 'const char *' <LValueToRValue>
|   |       |         `-ParenExpr 0x12e82a8c0 <col:9, col:13> 'const char *' lvalue
|   |       |           `-DeclRefExpr 0x12e82a8a0 <col:10> 'const char *' lvalue ParmVar 0x12e80dda8 'buf' 'const char *'
|   |       |-CallExpr 0x12e82ad68 <line:52:6, col:29> 'char *'
|   |       | |-ImplicitCastExpr 0x12e82ad50 <col:6> 'char *(*)(char *, const char *, unsigned long)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x12e82abf8 <col:6> 'char *(char *, const char *, unsigned long)' Function 0x12e82a9a8 'strncpy' 'char *(char *, const char *, unsigned long)'
|   |       | |-ImplicitCastExpr 0x12e82ada0 <col:14> 'char *' <ArrayToPointerDecay>
|   |       | | `-DeclRefExpr 0x12e82ac18 <col:14> 'char[128]' lvalue Var 0x12e80e260 's' 'char[128]'
|   |       | |-ImplicitCastExpr 0x12e82adb8 <col:17> 'const char *' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x12e82ac38 <col:17> 'const char *' lvalue ParmVar 0x12e80de28 'fmt' 'const char *'
|   |       | `-ImplicitCastExpr 0x12e82add0 <col:22, col:26> 'unsigned long' <IntegralCast>
|   |       |   `-BinaryOperator 0x12e82acc8 <col:22, col:26> 'long' '-'
|   |       |     |-ImplicitCastExpr 0x12e82ac98 <col:22> 'char *' <LValueToRValue>
|   |       |     | `-DeclRefExpr 0x12e82ac58 <col:22> 'char *' lvalue Var 0x12e80e2f8 'p' 'char *'
|   |       |     `-ImplicitCastExpr 0x12e82acb0 <col:26> 'const char *' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x12e82ac78 <col:26> 'const char *' lvalue ParmVar 0x12e80de28 'fmt' 'const char *'
|   |       |-BinaryOperator 0x12e82af18 <line:53:6, col:19> 'char' '='
|   |       | |-ArraySubscriptExpr 0x12e82aec8 <col:6, col:15> 'char' lvalue
|   |       | | |-ImplicitCastExpr 0x12e82aeb0 <col:6> 'char *' <ArrayToPointerDecay>
|   |       | | | `-DeclRefExpr 0x12e82ae00 <col:6> 'char[128]' lvalue Var 0x12e80e260 's' 'char[128]'
|   |       | | `-BinaryOperator 0x12e82ae90 <col:8, col:12> 'long' '-'
|   |       | |   |-ImplicitCastExpr 0x12e82ae60 <col:8> 'char *' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x12e82ae20 <col:8> 'char *' lvalue Var 0x12e80e2f8 'p' 'char *'
|   |       | |   `-ImplicitCastExpr 0x12e82ae78 <col:12> 'const char *' <LValueToRValue>
|   |       | |     `-DeclRefExpr 0x12e82ae40 <col:12> 'const char *' lvalue ParmVar 0x12e80de28 'fmt' 'const char *'
|   |       | `-ImplicitCastExpr 0x12e82af00 <col:19> 'char' <IntegralCast>
|   |       |   `-CharacterLiteral 0x12e82aee8 <col:19> 'int' 0
|   |       |-BinaryOperator 0x12e82afe8 <line:54:6, col:16> 'const char *' '='
|   |       | |-DeclRefExpr 0x12e82af38 <col:6> 'const char *' lvalue ParmVar 0x12e80de28 'fmt' 'const char *'
|   |       | `-ImplicitCastExpr 0x12e82afd0 <col:12, col:16> 'const char *' <NoOp>
|   |       |   `-BinaryOperator 0x12e82afb0 <col:12, col:16> 'char *' '+'
|   |       |     |-ImplicitCastExpr 0x12e82af98 <col:12> 'char *' <LValueToRValue>
|   |       |     | `-DeclRefExpr 0x12e82af58 <col:12> 'char *' lvalue Var 0x12e80e2f8 'p' 'char *'
|   |       |     `-IntegerLiteral 0x12e82af78 <col:16> 'int' 1
|   |       |-BinaryOperator 0x12e82b288 <line:55:6, col:54> 'const char *' contains-errors '='
|   |       | |-DeclRefExpr 0x12e82b008 <col:6> 'const char *' lvalue ParmVar 0x12e80dda8 'buf' 'const char *'
|   |       | `-CallExpr 0x12e82b240 <col:12, col:54> '<dependent type>' contains-errors
|   |       |   |-DeclRefExpr 0x12e82b180 <col:12> 'int ()' Function 0x12e82b0c8 'smb_fdata1' 'int ()'
|   |       |   |-RecoveryExpr 0x12e82b1a0 <col:23> '<dependent type>' contains-errors lvalue
|   |       |   |-DeclRefExpr 0x12e82b1c0 <col:28> 'const char *' lvalue ParmVar 0x12e80dda8 'buf' 'const char *'
|   |       |   |-DeclRefExpr 0x12e82b1e0 <col:33> 'char[128]' lvalue Var 0x12e80e260 's' 'char[128]'
|   |       |   |-DeclRefExpr 0x12e82b200 <col:36> 'const char *' lvalue ParmVar 0x12e80dea8 'maxbuf' 'const char *'
|   |       |   `-DeclRefExpr 0x12e82b220 <col:44> 'int' lvalue ParmVar 0x12e80df28 'unicodestr' 'int'
|   |       |-BreakStmt 0x12e82b340 <line:58:6>
|   |       |-DefaultStmt 0x12e82b5a8 <line:60:2, line:61:33>
|   |       | `-CallExpr 0x12e82b580 <col:6, col:33> '<dependent type>' contains-errors
|   |       |   |-DeclRefExpr 0x12e82b428 <col:6> 'int ()' Function 0x12e82b370 'ND_PRINT' 'int ()'
|   |       |   `-ParenExpr 0x12e82b560 <col:15, col:32> 'const char' contains-errors
|   |       |     `-BinaryOperator 0x12e82b540 <col:16, col:29> 'const char' contains-errors ','
|   |       |       |-BinaryOperator 0x12e82b4d0 <col:16, col:21> 'char[4]' contains-errors ','
|   |       |       | |-RecoveryExpr 0x12e82b448 <col:16> '<dependent type>' contains-errors lvalue
|   |       |       | `-StringLiteral 0x12e82b4b0 <col:21> 'char[4]' lvalue "STR"
|   |       |       `-UnaryOperator 0x12e82b528 <col:28, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |       |         `-ImplicitCastExpr 0x12e82b510 <col:29> 'const char *' <LValueToRValue>
|   |       |           `-DeclRefExpr 0x12e82b4f0 <col:29> 'const char *' lvalue ParmVar 0x12e80de28 'fmt' 'const char *'
|   |       |-UnaryOperator 0x12e82b5e8 <line:62:6, col:9> 'const char *' postfix '++'
|   |       | `-DeclRefExpr 0x12e82b5c8 <col:6> 'const char *' lvalue ParmVar 0x12e80de28 'fmt' 'const char *'
|   |       `-BreakStmt 0x12e82b600 <line:63:6>
|   |-IfStmt 0x12e82ba08 <line:66:5, line:71:5>
|   | |-BinaryOperator 0x12e82b7f8 <line:66:9, col:25> 'int' '&&'
|   | | |-UnaryOperator 0x12e82b750 <col:9, col:10> 'int' prefix '!' cannot overflow
|   | | | `-ImplicitCastExpr 0x12e82b738 <col:10> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x12e82b718 <col:10> 'int' lvalue Var 0x12e80e120 'depth' 'int'
|   | | `-BinaryOperator 0x12e82b7d8 <col:19, col:25> 'int' '<'
|   | |   |-ImplicitCastExpr 0x12e82b7a8 <col:19> 'const char *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x12e82b768 <col:19> 'const char *' lvalue ParmVar 0x12e80dda8 'buf' 'const char *'
|   | |   `-ImplicitCastExpr 0x12e82b7c0 <col:25> 'const char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x12e82b788 <col:25> 'const char *' lvalue ParmVar 0x12e80dea8 'maxbuf' 'const char *'
|   | `-CompoundStmt 0x12e82b9f8 <col:33, line:71:5>
|   `-ReturnStmt 0x12e82ba98 <line:72:5, col:15>
|     `-ImplicitCastExpr 0x12e82ba80 <col:11, col:15> 'int' <PointerToIntegral>
|       `-ImplicitCastExpr 0x12e82ba68 <col:11, col:15> 'const char *' <LValueToRValue>
|         `-ParenExpr 0x12e82ba48 <col:11, col:15> 'const char *' lvalue
|           `-DeclRefExpr 0x12e82ba28 <col:12> 'const char *' lvalue ParmVar 0x12e80dda8 'buf' 'const char *'
|-FunctionDecl 0x12e829f58 <line:46:6> col:6 implicit used memset 'void *(void *, int, unsigned long)' extern
| |-ParmVarDecl 0x12e82a058 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x12e82a0c0 <<invalid sloc>> <invalid sloc> 'int'
| |-ParmVarDecl 0x12e82a128 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x12e82a000 <<invalid sloc>> Implicit 900
|-FunctionDecl 0x12e82a390 <line:47:10> col:10 implicit used strchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x12e82a490 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x12e82a4f8 <<invalid sloc>> <invalid sloc> 'int'
| `-BuiltinAttr 0x12e82a438 <<invalid sloc>> Implicit 893
`-FunctionDecl 0x12e82a9a8 <line:52:6> col:6 implicit used strncpy 'char *(char *, const char *, unsigned long)' extern
  |-ParmVarDecl 0x12e82aaa8 <<invalid sloc>> <invalid sloc> 'char *'
  |-ParmVarDecl 0x12e82ab10 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x12e82ab78 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x12e82aa50 <<invalid sloc>> Implicit 886
