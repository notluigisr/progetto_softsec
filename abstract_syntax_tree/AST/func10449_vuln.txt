TranslationUnitDecl 0x13f855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x13f8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x13f855bd0 '__int128'
|-TypedefDecl 0x13f856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x13f855bf0 'unsigned __int128'
|-TypedefDecl 0x13f926230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13f926000 'struct __NSConstantString_tag'
|   `-Record 0x13f856580 '__NSConstantString_tag'
|-TypedefDecl 0x13f926298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x13f855d90 '__SVInt8_t'
|-TypedefDecl 0x13f926300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x13f855db0 '__SVInt16_t'
|-TypedefDecl 0x13f926368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x13f855dd0 '__SVInt32_t'
|-TypedefDecl 0x13f9263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x13f855df0 '__SVInt64_t'
|-TypedefDecl 0x13f926438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x13f855e10 '__SVUint8_t'
|-TypedefDecl 0x13f9264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x13f855e30 '__SVUint16_t'
|-TypedefDecl 0x13f926508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x13f855e50 '__SVUint32_t'
|-TypedefDecl 0x13f926570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x13f855e70 '__SVUint64_t'
|-TypedefDecl 0x13f9265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x13f855e90 '__SVFloat16_t'
|-TypedefDecl 0x13f926640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x13f855eb0 '__SVFloat32_t'
|-TypedefDecl 0x13f9266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x13f855ed0 '__SVFloat64_t'
|-TypedefDecl 0x13f926710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x13f855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13f926778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x13f855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13f9267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x13f855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13f926848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x13f855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13f9268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x13f855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13f926918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x13f855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13f926980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x13f855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13f9269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x13f855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13f926a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x13f855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13f926ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x13f856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13f926b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x13f856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13f926b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x13f856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13f926bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x13f856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13f926c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x13f856090 '__clang_svint8x3_t'
|-TypedefDecl 0x13f926cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x13f8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13f926d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x13f8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13f926d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x13f8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13f926df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x13f856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13f926e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x13f856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13f926ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x13f856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13f926f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x13f856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13f926f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x13f856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13f927800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x13f8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13f927868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x13f8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13f9278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x13f8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13f927938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x13f856210 '__clang_svint8x4_t'
|-TypedefDecl 0x13f9279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x13f856230 '__clang_svint16x4_t'
|-TypedefDecl 0x13f927a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x13f856250 '__clang_svint32x4_t'
|-TypedefDecl 0x13f927a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x13f856270 '__clang_svint64x4_t'
|-TypedefDecl 0x13f927ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x13f856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13f927b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x13f8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13f927ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x13f8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13f927c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x13f8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13f927c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x13f856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13f927ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x13f856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13f927d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x13f856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13f927db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x13f856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13f927e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x13f856390 '__SVBool_t'
|-TypedefDecl 0x13f927e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x13f8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13f927ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x13f8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13f927f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x13f8563f0 '__SVCount_t'
|-TypedefDecl 0x13f927ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13f927fb0 'char *'
|   `-BuiltinType 0x13f8556b0 'char'
|-TypedefDecl 0x13f928068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13f927fb0 'char *'
|   `-BuiltinType 0x13f8556b0 'char'
|-FunctionDecl 0x13f928288 <dataset_diviso_filec/func10449_vuln.c:1:1, line:74:1> line:1:12 invalid msg_parse_fetch 'int (int *, char *)' static
| |-ParmVarDecl 0x13f928128 <col:29, col:42> col:42 referenced invalid h 'int *'
| |-ParmVarDecl 0x13f9281a8 <col:45, col:51> col:51 used s 'char *'
| `-CompoundStmt 0x14800af48 <line:2:1, line:74:1>
|   |-DeclStmt 0x13f9283d0 <line:3:3, col:25>
|   | `-VarDecl 0x13f928368 <col:3, col:8> col:8 invalid tmp 'char'
|   |-DeclStmt 0x13f928468 <line:4:3, col:13>
|   | `-VarDecl 0x13f928400 <col:3, col:9> col:9 used ptmp 'char *'
|   |-IfStmt 0x13f928518 <line:6:3, line:7:13>
|   | |-UnaryOperator 0x13f9284b8 <line:6:7, col:8> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x13f9284a0 <col:8> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x13f928480 <col:8> 'char *' lvalue ParmVar 0x13f9281a8 's' 'char *'
|   | `-ReturnStmt 0x13f928508 <line:7:5, col:13>
|   |   `-UnaryOperator 0x13f9284f0 <col:12, col:13> 'int' prefix '-'
|   |     `-IntegerLiteral 0x13f9284d0 <col:13> 'int' 1
|   |-WhileStmt 0x14800aef8 <line:9:3, line:71:3>
|   | |-ImplicitCastExpr 0x13f928588 <line:9:10, col:11> 'char' <LValueToRValue>
|   | | `-UnaryOperator 0x13f928570 <col:10, col:11> 'char' lvalue prefix '*' cannot overflow
|   | |   `-ImplicitCastExpr 0x13f928558 <col:11> 'char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x13f928538 <col:11> 'char *' lvalue ParmVar 0x13f9281a8 's' 'char *'
|   | `-CompoundStmt 0x14800aed8 <line:10:3, line:71:3>
|   |   |-CallExpr 0x13f928788 <line:11:5, col:14> 'int'
|   |   | |-ImplicitCastExpr 0x13f928770 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x13f928700 <col:5> 'int ()' Function 0x13f928648 'SKIPWS' 'int ()'
|   |   | `-ImplicitCastExpr 0x13f9287b0 <col:13> 'char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x13f928720 <col:13> 'char *' lvalue ParmVar 0x13f9281a8 's' 'char *'
|   |   `-IfStmt 0x14800aea8 <line:13:5, line:70:5> has_else
|   |     |-BinaryOperator 0x13f941a20 <line:13:9, col:44> 'int' '=='
|   |     | |-CallExpr 0x13f941998 <col:9, col:39> 'int'
|   |     | | |-ImplicitCastExpr 0x13f941980 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x13f9418b8 <col:9> 'int ()' Function 0x13f941800 'ascii_strncasecmp' 'int ()'
|   |     | | |-ImplicitCastExpr 0x13f9419d0 <col:28> 'char *' <ArrayToPointerDecay>
|   |     | | | `-StringLiteral 0x13f941920 <col:28> 'char[4]' lvalue "STR"
|   |     | | |-ImplicitCastExpr 0x13f9419e8 <col:35> 'char *' <LValueToRValue>
|   |     | | | `-DeclRefExpr 0x13f941940 <col:35> 'char *' lvalue ParmVar 0x13f9281a8 's' 'char *'
|   |     | | `-IntegerLiteral 0x13f941960 <col:38> 'int' 5
|   |     | `-IntegerLiteral 0x13f941a00 <col:44> 'int' 0
|   |     |-CompoundStmt 0x13f941cf0 <line:14:5, line:17:5>
|   |     | `-IfStmt 0x13f941cd0 <line:15:7, line:16:17>
|   |     |   |-BinaryOperator 0x13f941c68 <line:15:11, col:43> 'int' contains-errors '=='
|   |     |   | |-ParenExpr 0x13f941bf0 <col:11, col:38> 'char *' contains-errors
|   |     |   | | `-BinaryOperator 0x13f941bd0 <col:12, col:37> 'char *' contains-errors '='
|   |     |   | |   |-DeclRefExpr 0x13f941a40 <col:12> 'char *' lvalue ParmVar 0x13f9281a8 's' 'char *'
|   |     |   | |   `-CallExpr 0x13f941ba0 <col:16, col:37> '<dependent type>' contains-errors
|   |     |   | |     |-DeclRefExpr 0x13f941b40 <col:16> 'int ()' Function 0x13f941a88 'msg_parse_flags' 'int ()'
|   |     |   | |     |-RecoveryExpr 0x13f941b60 <col:33> '<dependent type>' contains-errors lvalue
|   |     |   | |     `-DeclRefExpr 0x13f941b80 <col:36> 'char *' lvalue ParmVar 0x13f9281a8 's' 'char *'
|   |     |   | `-RecoveryExpr 0x13f941c48 <col:43> '<dependent type>' contains-errors lvalue
|   |     |   `-ReturnStmt 0x13f941cc0 <line:16:9, col:17>
|   |     |     `-UnaryOperator 0x13f941ca8 <col:16, col:17> 'int' prefix '-'
|   |     |       `-IntegerLiteral 0x13f941c88 <col:17> 'int' 1
|   |     `-IfStmt 0x14800ae78 <line:18:10, line:70:5> has_else
|   |       |-BinaryOperator 0x13f941e28 <line:18:14, col:49> 'int' '=='
|   |       | |-CallExpr 0x13f941da0 <col:14, col:44> 'int'
|   |       | | |-ImplicitCastExpr 0x13f941d88 <col:14> 'int (*)()' <FunctionToPointerDecay>
|   |       | | | `-DeclRefExpr 0x13f941d08 <col:14> 'int ()' Function 0x13f941800 'ascii_strncasecmp' 'int ()'
|   |       | | |-ImplicitCastExpr 0x13f941dd8 <col:33> 'char *' <ArrayToPointerDecay>
|   |       | | | `-StringLiteral 0x13f941d28 <col:33> 'char[4]' lvalue "STR"
|   |       | | |-ImplicitCastExpr 0x13f941df0 <col:40> 'char *' <LValueToRValue>
|   |       | | | `-DeclRefExpr 0x13f941d48 <col:40> 'char *' lvalue ParmVar 0x13f9281a8 's' 'char *'
|   |       | | `-IntegerLiteral 0x13f941d68 <col:43> 'int' 3
|   |       | `-IntegerLiteral 0x13f941e08 <col:49> 'int' 0
|   |       |-CompoundStmt 0x148009000 <line:19:5, line:26:5>
|   |       | |-CompoundAssignOperator 0x13f941e88 <line:20:7, col:12> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
|   |       | | |-DeclRefExpr 0x13f941e48 <col:7> 'char *' lvalue ParmVar 0x13f9281a8 's' 'char *'
|   |       | | `-IntegerLiteral 0x13f941e68 <col:12> 'int' 3
|   |       | |-CallExpr 0x13f941f10 <line:21:7, col:16> 'int'
|   |       | | |-ImplicitCastExpr 0x13f941ef8 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   |       | | | `-DeclRefExpr 0x13f941eb8 <col:7> 'int ()' Function 0x13f928648 'SKIPWS' 'int ()'
|   |       | | `-ImplicitCastExpr 0x13f941f38 <col:15> 'char *' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x13f941ed8 <col:15> 'char *' lvalue ParmVar 0x13f9281a8 's' 'char *'
|   |       | |-IfStmt 0x13f9421f0 <line:22:7, line:23:17>
|   |       | | |-BinaryOperator 0x13f942188 <line:22:11, col:43> 'int' contains-errors '<'
|   |       | | | |-CallExpr 0x13f942138 <col:11, col:39> '<dependent type>' contains-errors
|   |       | | | | |-DeclRefExpr 0x13f942030 <col:11> 'int ()' Function 0x13f941f78 'mutt_atoui' 'int ()'
|   |       | | | | |-DeclRefExpr 0x13f942050 <col:23> 'char *' lvalue ParmVar 0x13f9281a8 's' 'char *'
|   |       | | | | `-UnaryOperator 0x13f942120 <col:26, col:36> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |       | | | |   `-CXXDependentScopeMemberExpr 0x13f9420d8 <col:27, col:36> '<dependent type>' contains-errors lvalue ->uid
|   |       | | | |     `-CXXDependentScopeMemberExpr 0x13f942090 <col:27, col:30> '<dependent type>' contains-errors lvalue ->data
|   |       | | | |       `-RecoveryExpr 0x13f942070 <col:27> '<dependent type>' contains-errors lvalue
|   |       | | | `-IntegerLiteral 0x13f942168 <col:43> 'int' 0
|   |       | | `-ReturnStmt 0x13f9421e0 <line:23:9, col:17>
|   |       | |   `-UnaryOperator 0x13f9421c8 <col:16, col:17> 'int' prefix '-'
|   |       | |     `-IntegerLiteral 0x13f9421a8 <col:17> 'int' 1
|   |       | `-BinaryOperator 0x13f9427e0 <line:25:7, col:28> 'char *' '='
|   |       |   |-DeclRefExpr 0x13f942210 <col:7> 'char *' lvalue ParmVar 0x13f9281a8 's' 'char *'
|   |       |   `-ImplicitCastExpr 0x13f9423a8 <col:11, col:28> 'char *' <IntegralToPointer>
|   |       |     `-CallExpr 0x13f942368 <col:11, col:28> 'int'
|   |       |       |-ImplicitCastExpr 0x13f942350 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |       |       | `-DeclRefExpr 0x13f942310 <col:11> 'int ()' Function 0x13f942258 'imap_next_word' 'int ()'
|   |       |       `-ImplicitCastExpr 0x13f942390 <col:27> 'char *' <LValueToRValue>
|   |       |         `-DeclRefExpr 0x13f942330 <col:27> 'char *' lvalue ParmVar 0x13f9281a8 's' 'char *'
|   |       `-IfStmt 0x14800ae48 <line:27:10, line:70:5> has_else
|   |         |-BinaryOperator 0x148009150 <line:27:14, col:50> 'int' '=='
|   |         | |-CallExpr 0x1480090c8 <col:14, col:45> 'int'
|   |         | | |-ImplicitCastExpr 0x1480090b0 <col:14> 'int (*)()' <FunctionToPointerDecay>
|   |         | | | `-DeclRefExpr 0x148009030 <col:14> 'int ()' Function 0x13f941800 'ascii_strncasecmp' 'int ()'
|   |         | | |-ImplicitCastExpr 0x148009100 <col:33> 'char *' <ArrayToPointerDecay>
|   |         | | | `-StringLiteral 0x148009050 <col:33> 'char[4]' lvalue "STR"
|   |         | | |-ImplicitCastExpr 0x148009118 <col:40> 'char *' <LValueToRValue>
|   |         | | | `-DeclRefExpr 0x148009070 <col:40> 'char *' lvalue ParmVar 0x13f9281a8 's' 'char *'
|   |         | | `-IntegerLiteral 0x148009090 <col:43> 'int' 12
|   |         | `-IntegerLiteral 0x148009130 <col:50> 'int' 0
|   |         |-CompoundStmt 0x148009c48 <line:28:5, line:45:5>
|   |         | |-CompoundAssignOperator 0x1480091b0 <line:29:7, col:12> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
|   |         | | |-DeclRefExpr 0x148009170 <col:7> 'char *' lvalue ParmVar 0x13f9281a8 's' 'char *'
|   |         | | `-IntegerLiteral 0x148009190 <col:12> 'int' 12
|   |         | |-CallExpr 0x148009238 <line:30:7, col:16> 'int'
|   |         | | |-ImplicitCastExpr 0x148009220 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   |         | | | `-DeclRefExpr 0x1480091e0 <col:7> 'int ()' Function 0x13f928648 'SKIPWS' 'int ()'
|   |         | | `-ImplicitCastExpr 0x148009260 <col:15> 'char *' <LValueToRValue>
|   |         | |   `-DeclRefExpr 0x148009200 <col:15> 'char *' lvalue ParmVar 0x13f9281a8 's' 'char *'
|   |         | |-IfStmt 0x148009548 <line:31:7, line:35:7>
|   |         | | |-BinaryOperator 0x148009310 <line:31:11, col:17> 'int' '!='
|   |         | | | |-ImplicitCastExpr 0x1480092f8 <col:11, col:12> 'int' <IntegralCast>
|   |         | | | | `-ImplicitCastExpr 0x1480092e0 <col:11, col:12> 'char' <LValueToRValue>
|   |         | | | |   `-UnaryOperator 0x1480092b0 <col:11, col:12> 'char' lvalue prefix '*' cannot overflow
|   |         | | | |     `-ImplicitCastExpr 0x148009298 <col:12> 'char *' <LValueToRValue>
|   |         | | | |       `-DeclRefExpr 0x148009278 <col:12> 'char *' lvalue ParmVar 0x13f9281a8 's' 'char *'
|   |         | | | `-CharacterLiteral 0x1480092c8 <col:17> 'int' 34
|   |         | | `-CompoundStmt 0x148009530 <line:32:7, line:35:7>
|   |         | |   `-ReturnStmt 0x148009520 <line:34:9, col:17>
|   |         | |     `-UnaryOperator 0x148009508 <col:16, col:17> 'int' prefix '-'
|   |         | |       `-IntegerLiteral 0x1480094e8 <col:17> 'int' 1
|   |         | |-UnaryOperator 0x148009588 <line:36:7, col:8> 'char *' postfix '++'
|   |         | | `-DeclRefExpr 0x148009568 <col:7> 'char *' lvalue ParmVar 0x13f9281a8 's' 'char *'
|   |         | |-BinaryOperator 0x1480095e0 <line:37:7, col:14> 'char *' contains-errors '='
|   |         | | |-DeclRefExpr 0x1480095a0 <col:7> 'char *' lvalue Var 0x13f928400 'ptmp' 'char *'
|   |         | | `-RecoveryExpr 0x1480095c0 <col:14> '<dependent type>' contains-errors lvalue
|   |         | |-WhileStmt 0x148009830 <line:38:7, line:39:21>
|   |         | | |-BinaryOperator 0x148009738 <line:38:14, col:26> 'int' '&&'
|   |         | | | |-ImplicitCastExpr 0x148009720 <col:14, col:15> 'int' <IntegralCast>
|   |         | | | | `-ImplicitCastExpr 0x148009708 <col:14, col:15> 'char' <LValueToRValue>
|   |         | | | |   `-UnaryOperator 0x148009638 <col:14, col:15> 'char' lvalue prefix '*' cannot overflow
|   |         | | | |     `-ImplicitCastExpr 0x148009620 <col:15> 'char *' <LValueToRValue>
|   |         | | | |       `-DeclRefExpr 0x148009600 <col:15> 'char *' lvalue ParmVar 0x13f9281a8 's' 'char *'
|   |         | | | `-BinaryOperator 0x1480096e8 <col:20, col:26> 'int' '!='
|   |         | | |   |-ImplicitCastExpr 0x1480096d0 <col:20, col:21> 'int' <IntegralCast>
|   |         | | |   | `-ImplicitCastExpr 0x1480096b8 <col:20, col:21> 'char' <LValueToRValue>
|   |         | | |   |   `-UnaryOperator 0x148009688 <col:20, col:21> 'char' lvalue prefix '*' cannot overflow
|   |         | | |   |     `-ImplicitCastExpr 0x148009670 <col:21> 'char *' <LValueToRValue>
|   |         | | |   |       `-DeclRefExpr 0x148009650 <col:21> 'char *' lvalue ParmVar 0x13f9281a8 's' 'char *'
|   |         | | |   `-CharacterLiteral 0x1480096a0 <col:26> 'int' 34
|   |         | | `-BinaryOperator 0x148009810 <line:39:9, col:21> 'char' '='
|   |         | |   |-UnaryOperator 0x148009790 <col:9, col:14> 'char' lvalue prefix '*' cannot overflow
|   |         | |   | `-UnaryOperator 0x148009778 <col:10, col:14> 'char *' postfix '++'
|   |         | |   |   `-DeclRefExpr 0x148009758 <col:10> 'char *' lvalue Var 0x13f928400 'ptmp' 'char *'
|   |         | |   `-ImplicitCastExpr 0x1480097f8 <col:19, col:21> 'char' <LValueToRValue>
|   |         | |     `-UnaryOperator 0x1480097e0 <col:19, col:21> 'char' lvalue prefix '*' cannot overflow
|   |         | |       `-UnaryOperator 0x1480097c8 <col:20, col:21> 'char *' postfix '++'
|   |         | |         `-DeclRefExpr 0x1480097a8 <col:20> 'char *' lvalue ParmVar 0x13f9281a8 's' 'char *'
|   |         | |-IfStmt 0x148009950 <line:40:7, line:41:17>
|   |         | | |-BinaryOperator 0x1480098e8 <line:40:11, col:17> 'int' '!='
|   |         | | | |-ImplicitCastExpr 0x1480098d0 <col:11, col:12> 'int' <IntegralCast>
|   |         | | | | `-ImplicitCastExpr 0x1480098b8 <col:11, col:12> 'char' <LValueToRValue>
|   |         | | | |   `-UnaryOperator 0x148009888 <col:11, col:12> 'char' lvalue prefix '*' cannot overflow
|   |         | | | |     `-ImplicitCastExpr 0x148009870 <col:12> 'char *' <LValueToRValue>
|   |         | | | |       `-DeclRefExpr 0x148009850 <col:12> 'char *' lvalue ParmVar 0x13f9281a8 's' 'char *'
|   |         | | | `-CharacterLiteral 0x1480098a0 <col:17> 'int' 34
|   |         | | `-ReturnStmt 0x148009940 <line:41:9, col:17>
|   |         | |   `-UnaryOperator 0x148009928 <col:16, col:17> 'int' prefix '-'
|   |         | |     `-IntegerLiteral 0x148009908 <col:17> 'int' 1
|   |         | |-UnaryOperator 0x148009990 <line:42:7, col:8> 'char *' postfix '++'
|   |         | | `-DeclRefExpr 0x148009970 <col:7> 'char *' lvalue ParmVar 0x13f9281a8 's' 'char *'
|   |         | |-BinaryOperator 0x148009a30 <line:43:7, col:15> 'char' '='
|   |         | | |-UnaryOperator 0x1480099e0 <col:7, col:8> 'char' lvalue prefix '*' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x1480099c8 <col:8> 'char *' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x1480099a8 <col:8> 'char *' lvalue Var 0x13f928400 'ptmp' 'char *'
|   |         | | `-ImplicitCastExpr 0x148009a18 <col:15> 'char' <IntegralCast>
|   |         | |   `-IntegerLiteral 0x1480099f8 <col:15> 'int' 0
|   |         | `-BinaryOperator 0x148009c28 <line:44:7, col:41> '<dependent type>' contains-errors '='
|   |         |   |-CXXDependentScopeMemberExpr 0x148009a98 <col:7, col:10> '<dependent type>' contains-errors lvalue ->received
|   |         |   | `-RecoveryExpr 0x148009a70 <col:7> '<dependent type>' contains-errors lvalue
|   |         |   |   `-DeclRefExpr 0x148009a50 <col:7> 'int *' lvalue ParmVar 0x13f928128 'h' 'int *'
|   |         |   `-CallExpr 0x148009c00 <col:21, col:41> '<dependent type>' contains-errors
|   |         |     |-DeclRefExpr 0x148009bc0 <col:21> 'int ()' Function 0x148009b08 'imap_parse_date' 'int ()'
|   |         |     `-RecoveryExpr 0x148009be0 <col:38> '<dependent type>' contains-errors lvalue
|   |         `-IfStmt 0x14800ae18 <line:46:10, line:70:5> has_else
|   |           |-BinaryOperator 0x148009dc8 <line:46:14, col:50> 'int' '=='
|   |           | |-CallExpr 0x148009d40 <col:14, col:45> 'int'
|   |           | | |-ImplicitCastExpr 0x148009d28 <col:14> 'int (*)()' <FunctionToPointerDecay>
|   |           | | | `-DeclRefExpr 0x148009ca8 <col:14> 'int ()' Function 0x13f941800 'ascii_strncasecmp' 'int ()'
|   |           | | |-ImplicitCastExpr 0x148009d78 <col:33> 'char *' <ArrayToPointerDecay>
|   |           | | | `-StringLiteral 0x148009cc8 <col:33> 'char[4]' lvalue "STR"
|   |           | | |-ImplicitCastExpr 0x148009d90 <col:40> 'char *' <LValueToRValue>
|   |           | | | `-DeclRefExpr 0x148009ce8 <col:40> 'char *' lvalue ParmVar 0x13f9281a8 's' 'char *'
|   |           | | `-IntegerLiteral 0x148009d08 <col:43> 'int' 11
|   |           | `-IntegerLiteral 0x148009da8 <col:50> 'int' 0
|   |           |-CompoundStmt 0x14800a730 <line:47:5, line:56:5>
|   |           | |-CompoundAssignOperator 0x148009e28 <line:48:7, col:12> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
|   |           | | |-DeclRefExpr 0x148009de8 <col:7> 'char *' lvalue ParmVar 0x13f9281a8 's' 'char *'
|   |           | | `-IntegerLiteral 0x148009e08 <col:12> 'int' 11
|   |           | |-CallExpr 0x148009eb0 <line:49:7, col:16> 'int'
|   |           | | |-ImplicitCastExpr 0x148009e98 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   |           | | | `-DeclRefExpr 0x148009e58 <col:7> 'int ()' Function 0x13f928648 'SKIPWS' 'int ()'
|   |           | | `-ImplicitCastExpr 0x148009ed8 <col:15> 'char *' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x148009e78 <col:15> 'char *' lvalue ParmVar 0x13f9281a8 's' 'char *'
|   |           | |-BinaryOperator 0x148009f30 <line:50:7, col:14> 'char *' contains-errors '='
|   |           | | |-DeclRefExpr 0x148009ef0 <col:7> 'char *' lvalue Var 0x13f928400 'ptmp' 'char *'
|   |           | | `-RecoveryExpr 0x148009f10 <col:14> '<dependent type>' contains-errors lvalue
|   |           | |-WhileStmt 0x14800a3f0 <line:51:7, line:52:21>
|   |           | | |-CallExpr 0x14800a2d8 <line:51:14, col:41> 'int'
|   |           | | | |-ImplicitCastExpr 0x14800a2c0 <col:14> 'int (*)(int)' <FunctionToPointerDecay>
|   |           | | | | `-DeclRefExpr 0x14800a1c0 <col:14> 'int (int)' Function 0x14800a000 'isdigit' 'int (int)'
|   |           | | | `-ImplicitCastExpr 0x14800a300 <col:23, col:40> 'int' <IntegralCast>
|   |           | | |   `-CStyleCastExpr 0x14800a260 <col:23, col:40> 'unsigned char' <IntegralCast>
|   |           | | |     `-ImplicitCastExpr 0x14800a248 <col:39, col:40> 'char' <LValueToRValue> part_of_explicit_cast
|   |           | | |       `-UnaryOperator 0x14800a218 <col:39, col:40> 'char' lvalue prefix '*' cannot overflow
|   |           | | |         `-ImplicitCastExpr 0x14800a200 <col:40> 'char *' <LValueToRValue>
|   |           | | |           `-DeclRefExpr 0x14800a1e0 <col:40> 'char *' lvalue ParmVar 0x13f9281a8 's' 'char *'
|   |           | | `-BinaryOperator 0x14800a3d0 <line:52:9, col:21> 'char' '='
|   |           | |   |-UnaryOperator 0x14800a350 <col:9, col:14> 'char' lvalue prefix '*' cannot overflow
|   |           | |   | `-UnaryOperator 0x14800a338 <col:10, col:14> 'char *' postfix '++'
|   |           | |   |   `-DeclRefExpr 0x14800a318 <col:10> 'char *' lvalue Var 0x13f928400 'ptmp' 'char *'
|   |           | |   `-ImplicitCastExpr 0x14800a3b8 <col:19, col:21> 'char' <LValueToRValue>
|   |           | |     `-UnaryOperator 0x14800a3a0 <col:19, col:21> 'char' lvalue prefix '*' cannot overflow
|   |           | |       `-UnaryOperator 0x14800a388 <col:20, col:21> 'char *' postfix '++'
|   |           | |         `-DeclRefExpr 0x14800a368 <col:20> 'char *' lvalue ParmVar 0x13f9281a8 's' 'char *'
|   |           | |-BinaryOperator 0x14800a498 <line:53:7, col:15> 'char' '='
|   |           | | |-UnaryOperator 0x14800a448 <col:7, col:8> 'char' lvalue prefix '*' cannot overflow
|   |           | | | `-ImplicitCastExpr 0x14800a430 <col:8> 'char *' <LValueToRValue>
|   |           | | |   `-DeclRefExpr 0x14800a410 <col:8> 'char *' lvalue Var 0x13f928400 'ptmp' 'char *'
|   |           | | `-ImplicitCastExpr 0x14800a480 <col:15> 'char' <IntegralCast>
|   |           | |   `-IntegerLiteral 0x14800a460 <col:15> 'int' 0
|   |           | `-IfStmt 0x14800a710 <line:54:7, line:55:17>
|   |           |   |-BinaryOperator 0x14800a6a8 <line:54:11, col:49> 'int' contains-errors '<'
|   |           |   | |-CallExpr 0x14800a658 <col:11, col:45> '<dependent type>' contains-errors
|   |           |   | | |-DeclRefExpr 0x14800a598 <col:11> 'int ()' Function 0x14800a4e0 'mutt_atol' 'int ()'
|   |           |   | | |-RecoveryExpr 0x14800a5b8 <col:22> '<dependent type>' contains-errors lvalue
|   |           |   | | `-UnaryOperator 0x14800a640 <col:27, col:31> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |           |   | |   `-CXXDependentScopeMemberExpr 0x14800a5f8 <col:28, col:31> '<dependent type>' contains-errors lvalue ->content_length
|   |           |   | |     `-RecoveryExpr 0x14800a5d8 <col:28> '<dependent type>' contains-errors lvalue
|   |           |   | `-IntegerLiteral 0x14800a688 <col:49> 'int' 0
|   |           |   `-ReturnStmt 0x14800a700 <line:55:9, col:17>
|   |           |     `-UnaryOperator 0x14800a6e8 <col:16, col:17> 'int' prefix '-'
|   |           |       `-IntegerLiteral 0x14800a6c8 <col:17> 'int' 1
|   |           `-IfStmt 0x14800ade8 <line:57:10, line:70:5> has_else
|   |             |-BinaryOperator 0x14800a9a0 <line:57:14, line:58:39> 'int' '||'
|   |             | |-UnaryOperator 0x14800a870 <line:57:14, col:45> 'int' prefix '!' cannot overflow
|   |             | | `-CallExpr 0x14800a808 <col:15, col:45> 'int'
|   |             | |   |-ImplicitCastExpr 0x14800a7f0 <col:15> 'int (*)()' <FunctionToPointerDecay>
|   |             | |   | `-DeclRefExpr 0x14800a770 <col:15> 'int ()' Function 0x13f941800 'ascii_strncasecmp' 'int ()'
|   |             | |   |-ImplicitCastExpr 0x14800a840 <col:34> 'char *' <ArrayToPointerDecay>
|   |             | |   | `-StringLiteral 0x14800a790 <col:34> 'char[4]' lvalue "STR"
|   |             | |   |-ImplicitCastExpr 0x14800a858 <col:41> 'char *' <LValueToRValue>
|   |             | |   | `-DeclRefExpr 0x14800a7b0 <col:41> 'char *' lvalue ParmVar 0x13f9281a8 's' 'char *'
|   |             | |   `-IntegerLiteral 0x14800a7d0 <col:44> 'int' 4
|   |             | `-UnaryOperator 0x14800a988 <line:58:7, col:39> 'int' prefix '!' cannot overflow
|   |             |   `-CallExpr 0x14800a920 <col:8, col:39> 'int'
|   |             |     |-ImplicitCastExpr 0x14800a908 <col:8> 'int (*)()' <FunctionToPointerDecay>
|   |             |     | `-DeclRefExpr 0x14800a888 <col:8> 'int ()' Function 0x13f941800 'ascii_strncasecmp' 'int ()'
|   |             |     |-ImplicitCastExpr 0x14800a958 <col:27> 'char *' <ArrayToPointerDecay>
|   |             |     | `-StringLiteral 0x14800a8a8 <col:27> 'char[4]' lvalue "STR"
|   |             |     |-ImplicitCastExpr 0x14800a970 <col:34> 'char *' <LValueToRValue>
|   |             |     | `-DeclRefExpr 0x14800a8c8 <col:34> 'char *' lvalue ParmVar 0x13f9281a8 's' 'char *'
|   |             |     `-IntegerLiteral 0x14800a8e8 <col:37> 'int' 13
|   |             |-CompoundStmt 0x14800aa08 <line:59:5, line:62:5>
|   |             | `-ReturnStmt 0x14800a9f8 <line:61:7, col:15>
|   |             |   `-UnaryOperator 0x14800a9e0 <col:14, col:15> 'int' prefix '-'
|   |             |     `-IntegerLiteral 0x14800a9c0 <col:15> 'int' 2
|   |             `-IfStmt 0x14800adb8 <line:63:10, line:70:5> has_else
|   |               |-BinaryOperator 0x14800aab8 <line:63:14, col:20> 'int' '=='
|   |               | |-ImplicitCastExpr 0x14800aaa0 <col:14, col:15> 'int' <IntegralCast>
|   |               | | `-ImplicitCastExpr 0x14800aa88 <col:14, col:15> 'char' <LValueToRValue>
|   |               | |   `-UnaryOperator 0x14800aa58 <col:14, col:15> 'char' lvalue prefix '*' cannot overflow
|   |               | |     `-ImplicitCastExpr 0x14800aa40 <col:15> 'char *' <LValueToRValue>
|   |               | |       `-DeclRefExpr 0x14800aa20 <col:15> 'char *' lvalue ParmVar 0x13f9281a8 's' 'char *'
|   |               | `-CharacterLiteral 0x14800aa70 <col:20> 'int' 41
|   |               |-UnaryOperator 0x14800aaf8 <line:64:7, col:8> 'char *' postfix '++'
|   |               | `-DeclRefExpr 0x14800aad8 <col:7> 'char *' lvalue ParmVar 0x13f9281a8 's' 'char *'
|   |               `-IfStmt 0x14800ad98 <line:65:10, line:70:5>
|   |                 |-ImplicitCastExpr 0x14800ab60 <line:65:14, col:15> 'char' <LValueToRValue>
|   |                 | `-UnaryOperator 0x14800ab48 <col:14, col:15> 'char' lvalue prefix '*' cannot overflow
|   |                 |   `-ImplicitCastExpr 0x14800ab30 <col:15> 'char *' <LValueToRValue>
|   |                 |     `-DeclRefExpr 0x14800ab10 <col:15> 'char *' lvalue ParmVar 0x13f9281a8 's' 'char *'
|   |                 `-CompoundStmt 0x14800ad78 <line:66:5, line:70:5>
|   |                   |-CallExpr 0x14800acd0 <line:68:7, col:27> 'int'
|   |                   | |-ImplicitCastExpr 0x14800acb8 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   |                   | | `-DeclRefExpr 0x14800ac58 <col:7> 'int ()' Function 0x14800aba0 'imap_error' 'int ()'
|   |                   | |-ImplicitCastExpr 0x14800ad00 <col:19> 'char *' <ArrayToPointerDecay>
|   |                   | | `-StringLiteral 0x14800ac78 <col:19> 'char[4]' lvalue "STR"
|   |                   | `-ImplicitCastExpr 0x14800ad18 <col:26> 'char *' <LValueToRValue>
|   |                   |   `-DeclRefExpr 0x14800ac98 <col:26> 'char *' lvalue ParmVar 0x13f9281a8 's' 'char *'
|   |                   `-ReturnStmt 0x14800ad68 <line:69:7, col:15>
|   |                     `-UnaryOperator 0x14800ad50 <col:14, col:15> 'int' prefix '-'
|   |                       `-IntegerLiteral 0x14800ad30 <col:15> 'int' 1
|   `-ReturnStmt 0x14800af38 <line:73:3, col:10>
|     `-IntegerLiteral 0x14800af18 <col:10> 'int' 0
`-FunctionDecl 0x14800a000 <line:51:14> col:14 implicit used isdigit 'int (int)' extern
  |-ParmVarDecl 0x14800a100 <<invalid sloc>> <invalid sloc> 'int'
  |-BuiltinAttr 0x14800a0a8 <<invalid sloc>> Implicit 924
  |-NoThrowAttr 0x14800a170 <col:14> Implicit
  `-PureAttr 0x14800a198 <col:14> Implicit
