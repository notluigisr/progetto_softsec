TranslationUnitDecl 0x125055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1250564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x125055bd0 '__int128'
|-TypedefDecl 0x125056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x125055bf0 'unsigned __int128'
|-TypedefDecl 0x12580be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12580bc00 'struct __NSConstantString_tag'
|   `-Record 0x125056580 '__NSConstantString_tag'
|-TypedefDecl 0x12580be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x125055d90 '__SVInt8_t'
|-TypedefDecl 0x12580bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x125055db0 '__SVInt16_t'
|-TypedefDecl 0x12580bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x125055dd0 '__SVInt32_t'
|-TypedefDecl 0x12580bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x125055df0 '__SVInt64_t'
|-TypedefDecl 0x12580c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x125055e10 '__SVUint8_t'
|-TypedefDecl 0x12580c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x125055e30 '__SVUint16_t'
|-TypedefDecl 0x12580c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x125055e50 '__SVUint32_t'
|-TypedefDecl 0x12580c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x125055e70 '__SVUint64_t'
|-TypedefDecl 0x12580c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x125055e90 '__SVFloat16_t'
|-TypedefDecl 0x12580c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x125055eb0 '__SVFloat32_t'
|-TypedefDecl 0x12580c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x125055ed0 '__SVFloat64_t'
|-TypedefDecl 0x12580c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x125055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12580c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x125055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12580c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x125055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12580c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x125055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12580c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x125055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12580c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x125055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12580c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x125055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12580c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x125055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12580c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x125055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12580c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x125056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12580c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x125056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12580c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x125056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12580c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x125056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12580c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x125056090 '__clang_svint8x3_t'
|-TypedefDecl 0x12580c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1250560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12580c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1250560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12580c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1250560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12580c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x125056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12580ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x125056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12580cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x125056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12580cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x125056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12580cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x125056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12580d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1250561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12580d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1250561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12580d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1250561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12580d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x125056210 '__clang_svint8x4_t'
|-TypedefDecl 0x12580d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x125056230 '__clang_svint16x4_t'
|-TypedefDecl 0x12580d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x125056250 '__clang_svint32x4_t'
|-TypedefDecl 0x12580d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x125056270 '__clang_svint64x4_t'
|-TypedefDecl 0x12580d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x125056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12580d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1250562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12580d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1250562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12580d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1250562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12580d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x125056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12580d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x125056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12580d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x125056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12580d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x125056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12580da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x125056390 '__SVBool_t'
|-TypedefDecl 0x12580da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1250563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12580dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1250563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12580db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1250563f0 '__SVCount_t'
|-TypedefDecl 0x12580dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12580dbb0 'char *'
|   `-BuiltinType 0x1250556b0 'char'
|-TypedefDecl 0x12580dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12580dbb0 'char *'
|   `-BuiltinType 0x1250556b0 'char'
|-FunctionDecl 0x12580dee8 <dataset_diviso_filec/func18748_vuln.c:1:1, line:22:1> line:1:6 invalid armass_assemble 'int (const char *, int, int)'
| |-ParmVarDecl 0x12580dcf0 <col:22, col:34> col:34 used str 'const char *'
| |-ParmVarDecl 0x12580dd70 <col:39, col:44> col:44 invalid off 'int'
| |-ParmVarDecl 0x12580ddf0 <col:49, col:53> col:53 used thumb 'int'
| `-CompoundStmt 0x12582a8c0 <col:60, line:22:1>
|   |-DeclStmt 0x12580e0c0 <line:2:2, col:10>
|   | |-VarDecl 0x12580dfc0 <col:2, col:6> col:6 used i 'int'
|   | `-VarDecl 0x12580e040 <col:2, col:9> col:9 used j 'int'
|   |-DeclStmt 0x12580e1e8 <line:3:2, col:15>
|   | `-VarDecl 0x12580e180 <col:2, col:14> col:7 used buf 'char[128]'
|   |-ForStmt 0x125828558 <line:5:2, line:10:2>
|   | |-BinaryOperator 0x12580e280 <line:5:7, col:15> 'int' '='
|   | | |-DeclRefExpr 0x12580e200 <col:7> 'int' lvalue Var 0x12580dfc0 'i' 'int'
|   | | `-BinaryOperator 0x12580e260 <col:11, col:15> 'int' '='
|   | |   |-DeclRefExpr 0x12580e220 <col:11> 'int' lvalue Var 0x12580e040 'j' 'int'
|   | |   `-IntegerLiteral 0x12580e240 <col:15> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x125827aa0 <col:18, col:47> 'int' '&&'
|   | | |-BinaryOperator 0x12580e3a8 <col:18, col:37> 'int' '<'
|   | | | |-ImplicitCastExpr 0x12580e390 <col:18> 'unsigned long' <IntegralCast>
|   | | | | `-ImplicitCastExpr 0x12580e378 <col:18> 'int' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x12580e2a0 <col:18> 'int' lvalue Var 0x12580dfc0 'i' 'int'
|   | | | `-BinaryOperator 0x12580e358 <col:22, col:37> 'unsigned long' '-'
|   | | |   |-UnaryExprOrTypeTraitExpr 0x12580e300 <col:22, col:33> 'unsigned long' sizeof
|   | | |   | `-ParenExpr 0x12580e2e0 <col:29, col:33> 'char[128]' lvalue
|   | | |   |   `-DeclRefExpr 0x12580e2c0 <col:30> 'char[128]' lvalue Var 0x12580e180 'buf' 'char[128]' non_odr_use_unevaluated
|   | | |   `-ImplicitCastExpr 0x12580e340 <col:37> 'unsigned long' <IntegralCast>
|   | | |     `-IntegerLiteral 0x12580e320 <col:37> 'int' 1
|   | | `-ImplicitCastExpr 0x125827a88 <col:42, col:47> 'int' <IntegralCast>
|   | |   `-ImplicitCastExpr 0x125827a70 <col:42, col:47> 'char' <LValueToRValue>
|   | |     `-ArraySubscriptExpr 0x125827a50 <col:42, col:47> 'const char' lvalue
|   | |       |-ImplicitCastExpr 0x125827a20 <col:42> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x12580e3c8 <col:42> 'const char *' lvalue ParmVar 0x12580dcf0 'str' 'const char *'
|   | |       `-ImplicitCastExpr 0x125827a38 <col:46> 'int' <LValueToRValue>
|   | |         `-DeclRefExpr 0x125827a00 <col:46> 'int' lvalue Var 0x12580dfc0 'i' 'int'
|   | |-BinaryOperator 0x125827b30 <col:50, col:56> 'int' ','
|   | | |-UnaryOperator 0x125827ae0 <col:50, col:51> 'int' postfix '++'
|   | | | `-DeclRefExpr 0x125827ac0 <col:50> 'int' lvalue Var 0x12580dfc0 'i' 'int'
|   | | `-UnaryOperator 0x125827b18 <col:55, col:56> 'int' postfix '++'
|   | |   `-DeclRefExpr 0x125827af8 <col:55> 'int' lvalue Var 0x12580e040 'j' 'int'
|   | `-CompoundStmt 0x125828538 <col:60, line:10:2>
|   |   |-IfStmt 0x125827ca8 <line:6:3, line:8:3>
|   |   | |-BinaryOperator 0x125827c28 <line:6:7, col:17> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x125827c10 <col:7, col:12> 'int' <IntegralCast>
|   |   | | | `-ImplicitCastExpr 0x125827bf8 <col:7, col:12> 'char' <LValueToRValue>
|   |   | | |   `-ArraySubscriptExpr 0x125827bc0 <col:7, col:12> 'const char' lvalue
|   |   | | |     |-ImplicitCastExpr 0x125827b90 <col:7> 'const char *' <LValueToRValue>
|   |   | | |     | `-DeclRefExpr 0x125827b50 <col:7> 'const char *' lvalue ParmVar 0x12580dcf0 'str' 'const char *'
|   |   | | |     `-ImplicitCastExpr 0x125827ba8 <col:11> 'int' <LValueToRValue>
|   |   | | |       `-DeclRefExpr 0x125827b70 <col:11> 'int' lvalue Var 0x12580e040 'j' 'int'
|   |   | | `-CharacterLiteral 0x125827be0 <col:17> 'int' 35
|   |   | `-CompoundStmt 0x125827c88 <col:22, line:8:3>
|   |   |   |-UnaryOperator 0x125827c68 <line:7:4, col:5> 'int' postfix '--'
|   |   |   | `-DeclRefExpr 0x125827c48 <col:4> 'int' lvalue Var 0x12580dfc0 'i' 'int'
|   |   |   `-ContinueStmt 0x125827c80 <col:9>
|   |   `-BinaryOperator 0x125828518 <line:9:3, col:38> 'char' '='
|   |     |-ArraySubscriptExpr 0x125827d38 <col:3, col:8> 'char' lvalue
|   |     | |-ImplicitCastExpr 0x125827d08 <col:3> 'char *' <ArrayToPointerDecay>
|   |     | | `-DeclRefExpr 0x125827cc8 <col:3> 'char[128]' lvalue Var 0x12580e180 'buf' 'char[128]'
|   |     | `-ImplicitCastExpr 0x125827d20 <col:7> 'int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x125827ce8 <col:7> 'int' lvalue Var 0x12580dfc0 'i' 'int'
|   |     `-ImplicitCastExpr 0x125828500 <col:12, col:38> 'char' <IntegralCast>
|   |       `-CallExpr 0x1258284d8 <col:12, col:38> 'int'
|   |         |-ImplicitCastExpr 0x1258284c0 <col:12> 'int (*)(int)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x125828380 <col:12> 'int (int)' Function 0x1258281c0 'tolower' 'int (int)'
|   |         `-CStyleCastExpr 0x125828460 <col:21, col:37> 'int' <IntegralCast>
|   |           `-ImplicitCastExpr 0x125828448 <col:32, col:37> 'char' <LValueToRValue> part_of_explicit_cast
|   |             `-ArraySubscriptExpr 0x125828410 <col:32, col:37> 'const char' lvalue
|   |               |-ImplicitCastExpr 0x1258283e0 <col:32> 'const char *' <LValueToRValue>
|   |               | `-DeclRefExpr 0x1258283a0 <col:32> 'const char *' lvalue ParmVar 0x12580dcf0 'str' 'const char *'
|   |               `-ImplicitCastExpr 0x1258283f8 <col:36> 'int' <LValueToRValue>
|   |                 `-DeclRefExpr 0x1258283c0 <col:36> 'int' lvalue Var 0x12580e040 'j' 'int'
|   |-BinaryOperator 0x125828658 <line:11:2, col:11> 'char' '='
|   | |-ArraySubscriptExpr 0x125828600 <col:2, col:7> 'char' lvalue
|   | | |-ImplicitCastExpr 0x1258285d0 <col:2> 'char *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x125828590 <col:2> 'char[128]' lvalue Var 0x12580e180 'buf' 'char[128]'
|   | | `-ImplicitCastExpr 0x1258285e8 <col:6> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1258285b0 <col:6> 'int' lvalue Var 0x12580dfc0 'i' 'int'
|   | `-ImplicitCastExpr 0x125828640 <col:11> 'char' <IntegralCast>
|   |   `-IntegerLiteral 0x125828620 <col:11> 'int' 0
|   |-CallExpr 0x1258288a8 <line:12:2, col:29> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x1258287d0 <col:2> 'int ()' Function 0x125828718 'arm_opcode_parse' 'int ()'
|   | |-UnaryOperator 0x125828890 <col:20, col:21> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | | `-RecoveryExpr 0x125828870 <col:21> '<dependent type>' contains-errors lvalue
|   | `-DeclRefExpr 0x125828820 <col:26> 'char[128]' lvalue Var 0x12580e180 'buf' 'char[128]'
|   |-IfStmt 0x12582a680 <line:14:2, line:16:2>
|   | |-BinaryOperator 0x12582a600 <line:14:6, col:27> 'int' '||'
|   | | |-BinaryOperator 0x125828950 <col:6, col:14> 'int' '<'
|   | | | |-ImplicitCastExpr 0x125828938 <col:6> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x1258288f8 <col:6> 'int' lvalue ParmVar 0x12580ddf0 'thumb' 'int'
|   | | | `-IntegerLiteral 0x125828918 <col:14> 'int' 0
|   | | `-BinaryOperator 0x1258289c8 <col:19, col:27> 'int' '>'
|   | |   |-ImplicitCastExpr 0x1258289b0 <col:19> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x125828970 <col:19> 'int' lvalue ParmVar 0x12580ddf0 'thumb' 'int'
|   | |   `-IntegerLiteral 0x125828990 <col:27> 'int' 1
|   | `-CompoundStmt 0x12582a668 <col:30, line:16:2>
|   |   `-ReturnStmt 0x12582a658 <line:15:3, col:11>
|   |     `-UnaryOperator 0x12582a640 <col:10, col:11> 'int' prefix '-'
|   |       `-IntegerLiteral 0x12582a620 <col:11> 'int' 1
|   |-IfStmt 0x12582a7c8 <line:17:2, line:20:2>
|   | |-RecoveryExpr 0x12582a748 <line:17:6, col:38> '_Bool' contains-errors
|   | `-CompoundStmt 0x12582a7b0 <col:41, line:20:2>
|   |   `-ReturnStmt 0x12582a7a0 <line:19:3, col:11>
|   |     `-UnaryOperator 0x12582a788 <col:10, col:11> 'int' prefix '-'
|   |       `-IntegerLiteral 0x12582a768 <col:11> 'int' 1
|   `-ReturnStmt 0x12582a8b0 <line:21:2, col:13>
|     `-CXXDependentScopeMemberExpr 0x12582a868 <col:9, col:13> '<dependent type>' contains-errors lvalue .o
|       `-RecoveryExpr 0x12582a848 <col:9> '<dependent type>' contains-errors lvalue
`-FunctionDecl 0x1258281c0 <line:9:12> col:12 implicit used tolower 'int (int)' extern
  |-ParmVarDecl 0x1258282c0 <<invalid sloc>> <invalid sloc> 'int'
  |-BuiltinAttr 0x125828268 <<invalid sloc>> Implicit 932
  |-NoThrowAttr 0x125828330 <col:12> Implicit
  `-PureAttr 0x125828358 <col:12> Implicit
