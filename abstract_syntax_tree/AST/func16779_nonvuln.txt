TranslationUnitDecl 0x145028808 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1450296b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x145028dd0 '__int128'
|-TypedefDecl 0x145029728 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x145028df0 'unsigned __int128'
|-TypedefDecl 0x1450c0430 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x1450c0200 'struct __NSConstantString_tag'
|   `-Record 0x145029780 '__NSConstantString_tag'
|-TypedefDecl 0x1450c0498 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x145028f90 '__SVInt8_t'
|-TypedefDecl 0x1450c0500 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x145028fb0 '__SVInt16_t'
|-TypedefDecl 0x1450c0568 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x145028fd0 '__SVInt32_t'
|-TypedefDecl 0x1450c05d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x145028ff0 '__SVInt64_t'
|-TypedefDecl 0x1450c0638 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x145029010 '__SVUint8_t'
|-TypedefDecl 0x1450c06a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x145029030 '__SVUint16_t'
|-TypedefDecl 0x1450c0708 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x145029050 '__SVUint32_t'
|-TypedefDecl 0x1450c0770 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x145029070 '__SVUint64_t'
|-TypedefDecl 0x1450c07d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x145029090 '__SVFloat16_t'
|-TypedefDecl 0x1450c0840 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x1450290b0 '__SVFloat32_t'
|-TypedefDecl 0x1450c08a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x1450290d0 '__SVFloat64_t'
|-TypedefDecl 0x1450c0910 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x1450290f0 '__SVBfloat16_t'
|-TypedefDecl 0x1450c0978 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x145029110 '__clang_svint8x2_t'
|-TypedefDecl 0x1450c09e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x145029130 '__clang_svint16x2_t'
|-TypedefDecl 0x1450c0a48 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x145029150 '__clang_svint32x2_t'
|-TypedefDecl 0x1450c0ab0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x145029170 '__clang_svint64x2_t'
|-TypedefDecl 0x1450c0b18 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x145029190 '__clang_svuint8x2_t'
|-TypedefDecl 0x1450c0b80 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x1450291b0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1450c0be8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x1450291d0 '__clang_svuint32x2_t'
|-TypedefDecl 0x1450c0c50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x1450291f0 '__clang_svuint64x2_t'
|-TypedefDecl 0x1450c0cb8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x145029210 '__clang_svfloat16x2_t'
|-TypedefDecl 0x1450c0d20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x145029230 '__clang_svfloat32x2_t'
|-TypedefDecl 0x1450c0d88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x145029250 '__clang_svfloat64x2_t'
|-TypedefDecl 0x1450c0df0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x145029270 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x1450c0e58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x145029290 '__clang_svint8x3_t'
|-TypedefDecl 0x1450c0ec0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1450292b0 '__clang_svint16x3_t'
|-TypedefDecl 0x1450c0f28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1450292d0 '__clang_svint32x3_t'
|-TypedefDecl 0x1450c0f90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1450292f0 '__clang_svint64x3_t'
|-TypedefDecl 0x1450c0ff8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x145029310 '__clang_svuint8x3_t'
|-TypedefDecl 0x1450c1060 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x145029330 '__clang_svuint16x3_t'
|-TypedefDecl 0x1450c10c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x145029350 '__clang_svuint32x3_t'
|-TypedefDecl 0x1450c1130 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x145029370 '__clang_svuint64x3_t'
|-TypedefDecl 0x1450c1198 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x145029390 '__clang_svfloat16x3_t'
|-TypedefDecl 0x1450c1200 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1450293b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x1450c1268 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1450293d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1450c12d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1450293f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x1450c1338 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x145029410 '__clang_svint8x4_t'
|-TypedefDecl 0x1450c13a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x145029430 '__clang_svint16x4_t'
|-TypedefDecl 0x1450c1408 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x145029450 '__clang_svint32x4_t'
|-TypedefDecl 0x1450c1470 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x145029470 '__clang_svint64x4_t'
|-TypedefDecl 0x1450c14d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x145029490 '__clang_svuint8x4_t'
|-TypedefDecl 0x1450c1540 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1450294b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x1450c15a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1450294d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x1450c1610 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1450294f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x1450c1678 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x145029510 '__clang_svfloat16x4_t'
|-TypedefDecl 0x1450c16e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x145029530 '__clang_svfloat32x4_t'
|-TypedefDecl 0x1450c1748 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x145029550 '__clang_svfloat64x4_t'
|-TypedefDecl 0x1450c17b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x145029570 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x1450c1818 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x145029590 '__SVBool_t'
|-TypedefDecl 0x1450c1880 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1450295b0 '__clang_svboolx2_t'
|-TypedefDecl 0x1450c18e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1450295d0 '__clang_svboolx4_t'
|-TypedefDecl 0x1450c1950 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1450295f0 '__SVCount_t'
|-TypedefDecl 0x1450c19f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1450c19b0 'char *'
|   `-BuiltinType 0x1450288b0 'char'
|-TypedefDecl 0x1450c1a68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1450c19b0 'char *'
|   `-BuiltinType 0x1450288b0 'char'
|-FunctionDecl 0x1450c1cf8 <dataset_diviso_filec/func16779_nonvuln.c:1:1, line:39:1> line:1:1 ofputil_parse_key_value 'int (char **, char **, char **)'
| |-ParmVarDecl 0x1450c1b08 <col:25, col:32> col:32 used stringp 'char **'
| |-ParmVarDecl 0x1450c1b88 <col:41, col:48> col:48 used keyp 'char **'
| |-ParmVarDecl 0x1450c1c08 <col:54, col:61> col:61 used valuep 'char **'
| `-CompoundStmt 0x1450dba88 <line:2:1, line:39:1>
|   |-CompoundAssignOperator 0x1450da8c8 <line:4:5, col:39> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
|   | |-UnaryOperator 0x1450c1e38 <col:5, col:6> 'char *' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x1450c1e20 <col:6> 'char **' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1450c1e00 <col:6> 'char **' lvalue ParmVar 0x1450c1b08 'stringp' 'char **'
|   | `-CallExpr 0x1450da838 <col:17, col:39> 'unsigned long'
|   |   |-ImplicitCastExpr 0x1450da820 <col:17> 'unsigned long (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1450da6f0 <col:17> 'unsigned long (const char *, const char *)' Function 0x1450da510 'strspn' 'unsigned long (const char *, const char *)'
|   |   |-ImplicitCastExpr 0x1450da880 <col:24, col:25> 'const char *' <NoOp>
|   |   | `-ImplicitCastExpr 0x1450da868 <col:24, col:25> 'char *' <LValueToRValue>
|   |   |   `-UnaryOperator 0x1450da748 <col:24, col:25> 'char *' lvalue prefix '*' cannot overflow
|   |   |     `-ImplicitCastExpr 0x1450da730 <col:25> 'char **' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x1450da710 <col:25> 'char **' lvalue ParmVar 0x1450c1b08 'stringp' 'char **'
|   |   `-ImplicitCastExpr 0x1450da8b0 <col:34> 'const char *' <NoOp>
|   |     `-ImplicitCastExpr 0x1450da898 <col:34> 'char *' <ArrayToPointerDecay>
|   |       `-StringLiteral 0x1450da7a0 <col:34> 'char[4]' lvalue "STR"
|   |-IfStmt 0x1450dac40 <line:5:5, line:8:5>
|   | |-BinaryOperator 0x1450da9c0 <line:5:9, col:22> 'int' '=='
|   | | |-ImplicitCastExpr 0x1450da9a8 <col:9, col:11> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x1450da990 <col:9, col:11> 'char' <LValueToRValue>
|   | | |   `-UnaryOperator 0x1450da960 <col:9, col:11> 'char' lvalue prefix '*' cannot overflow
|   | | |     `-ImplicitCastExpr 0x1450da948 <col:10, col:11> 'char *' <LValueToRValue>
|   | | |       `-UnaryOperator 0x1450da930 <col:10, col:11> 'char *' lvalue prefix '*' cannot overflow
|   | | |         `-ImplicitCastExpr 0x1450da918 <col:11> 'char **' <LValueToRValue>
|   | | |           `-DeclRefExpr 0x1450da8f8 <col:11> 'char **' lvalue ParmVar 0x1450c1b08 'stringp' 'char **'
|   | | `-CharacterLiteral 0x1450da978 <col:22> 'int' 0
|   | `-CompoundStmt 0x1450dac28 <col:28, line:8:5>
|   |   `-BinaryOperator 0x1450dabf0 <line:6:9, col:27> 'char *' contains-errors '='
|   |     |-UnaryOperator 0x1450dab68 <col:9, col:10> 'char *' lvalue prefix '*' cannot overflow
|   |     | `-ImplicitCastExpr 0x1450dab50 <col:10> 'char **' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x1450da9e0 <col:10> 'char **' lvalue ParmVar 0x1450c1b88 'keyp' 'char **'
|   |     `-BinaryOperator 0x1450dabd0 <col:17, col:27> 'char *' contains-errors '='
|   |       |-UnaryOperator 0x1450dab98 <col:17, col:18> 'char *' lvalue prefix '*' cannot overflow
|   |       | `-ImplicitCastExpr 0x1450dab80 <col:18> 'char **' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x1450daa30 <col:18> 'char **' lvalue ParmVar 0x1450c1c08 'valuep' 'char **'
|   |       `-RecoveryExpr 0x1450dabb0 <col:27> '<dependent type>' contains-errors lvalue
|   |-DeclStmt 0x1450dad48 <line:11:5, col:25>
|   | `-VarDecl 0x1450dac78 <col:5, col:18> col:11 used key 'char *' cinit
|   |   `-ImplicitCastExpr 0x1450dad30 <col:17, col:18> 'char *' <LValueToRValue>
|   |     `-UnaryOperator 0x1450dad18 <col:17, col:18> 'char *' lvalue prefix '*' cannot overflow
|   |       `-ImplicitCastExpr 0x1450dad00 <col:18> 'char **' <LValueToRValue>
|   |         `-DeclRefExpr 0x1450dace0 <col:18> 'char **' lvalue ParmVar 0x1450c1b08 'stringp' 'char **'
|   |-RecoveryExpr 0x1450db210 <line:12:5, col:40> '<dependent type>' contains-errors lvalue
|   | |-UnaryExprOrTypeTraitExpr 0x1450db118 <col:5, col:12> 'unsigned long' contains-errors sizeof
|   | | `-RecoveryExpr 0x1450db0f8 <col:12> '<dependent type>' contains-errors lvalue
|   | `-CallExpr 0x1450db180 <col:22, col:40> 'unsigned long'
|   |   |-ImplicitCastExpr 0x1450db168 <col:22> 'unsigned long (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1450daf78 <col:22> 'unsigned long (const char *, const char *)' Function 0x1450dad98 'strcspn' 'unsigned long (const char *, const char *)'
|   |   |-ImplicitCastExpr 0x1450db1c8 <col:30> 'const char *' <NoOp>
|   |   | `-ImplicitCastExpr 0x1450db1b0 <col:30> 'char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1450daf98 <col:30> 'char *' lvalue Var 0x1450dac78 'key' 'char *'
|   |   `-ImplicitCastExpr 0x1450db1f8 <col:35> 'const char *' <NoOp>
|   |     `-ImplicitCastExpr 0x1450db1e0 <col:35> 'char *' <ArrayToPointerDecay>
|   |       `-StringLiteral 0x1450dafb8 <col:35> 'char[4]' lvalue "STR"
|   |-DeclStmt 0x1450db2f0 <line:13:5, col:34>
|   | `-VarDecl 0x1450db250 <col:5, col:10> col:10 used key_delim 'char'
|   |-CompoundAssignOperator 0x144021bd0 <line:15:5, col:45> 'char *' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   | |-UnaryOperator 0x144021b08 <col:5, col:6> 'char *' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x144021af0 <col:6> 'char **' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1450db358 <col:6> 'char **' lvalue ParmVar 0x1450c1b08 'stringp' 'char **'
|   | `-BinaryOperator 0x144021bb0 <col:17, col:45> '<dependent type>' contains-errors '+'
|   |   |-RecoveryExpr 0x144021b20 <col:17> '<dependent type>' contains-errors lvalue
|   |   `-ParenExpr 0x144021b90 <col:27, col:45> 'int'
|   |     `-BinaryOperator 0x144021b70 <col:28, col:41> 'int' '!='
|   |       |-ImplicitCastExpr 0x144021b58 <col:28> 'int' <IntegralCast>
|   |       | `-ImplicitCastExpr 0x144021b40 <col:28> 'char' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x1450db3c0 <col:28> 'char' lvalue Var 0x1450db250 'key_delim' 'char'
|   |       `-CharacterLiteral 0x1450db3e0 <col:41> 'int' 0
|   |-DeclStmt 0x144021c80 <line:18:5, col:29>
|   | `-VarDecl 0x144021c18 <col:5, col:17> col:17 used value_delims 'const char *'
|   |-IfStmt 0x144022270 <line:19:5, line:27:5> has_else
|   | |-BinaryOperator 0x144021da8 <line:19:9, col:42> 'int' '||'
|   | | |-BinaryOperator 0x144021d00 <col:9, col:22> 'int' '=='
|   | | | |-ImplicitCastExpr 0x144021ce8 <col:9> 'int' <IntegralCast>
|   | | | | `-ImplicitCastExpr 0x144021cd0 <col:9> 'char' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x144021c98 <col:9> 'char' lvalue Var 0x1450db250 'key_delim' 'char'
|   | | | `-CharacterLiteral 0x144021cb8 <col:22> 'int' 58
|   | | `-BinaryOperator 0x144021d88 <col:29, col:42> 'int' '=='
|   | |   |-ImplicitCastExpr 0x144021d70 <col:29> 'int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x144021d58 <col:29> 'char' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x144021d20 <col:29> 'char' lvalue Var 0x1450db250 'key_delim' 'char'
|   | |   `-CharacterLiteral 0x144021d40 <col:42> 'int' 61
|   | |-CompoundStmt 0x144021e58 <col:47, line:21:5>
|   | | `-BinaryOperator 0x144021e38 <line:20:9, col:24> 'const char *' '='
|   | |   |-DeclRefExpr 0x144021dc8 <col:9> 'const char *' lvalue Var 0x144021c18 'value_delims' 'const char *'
|   | |   `-ImplicitCastExpr 0x144021e20 <col:24> 'const char *' <NoOp>
|   | |     `-ImplicitCastExpr 0x144021e08 <col:24> 'char *' <ArrayToPointerDecay>
|   | |       `-StringLiteral 0x144021de8 <col:24> 'char[4]' lvalue "STR"
|   | `-IfStmt 0x144022240 <line:21:12, line:27:5> has_else
|   |   |-BinaryOperator 0x144021ed8 <line:21:16, col:29> 'int' '=='
|   |   | |-ImplicitCastExpr 0x144021ec0 <col:16> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x144021ea8 <col:16> 'char' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x144021e70 <col:16> 'char' lvalue Var 0x1450db250 'key_delim' 'char'
|   |   | `-CharacterLiteral 0x144021e90 <col:29> 'int' 40
|   |   |-CompoundStmt 0x144021f88 <col:34, line:23:5>
|   |   | `-BinaryOperator 0x144021f68 <line:22:9, col:24> 'const char *' '='
|   |   |   |-DeclRefExpr 0x144021ef8 <col:9> 'const char *' lvalue Var 0x144021c18 'value_delims' 'const char *'
|   |   |   `-ImplicitCastExpr 0x144021f50 <col:24> 'const char *' <NoOp>
|   |   |     `-ImplicitCastExpr 0x144021f38 <col:24> 'char *' <ArrayToPointerDecay>
|   |   |       `-StringLiteral 0x144021f18 <col:24> 'char[4]' lvalue "STR"
|   |   `-CompoundStmt 0x144022218 <line:23:12, line:27:5>
|   |     |-BinaryOperator 0x144022028 <line:24:9, col:17> 'char *' '='
|   |     | |-UnaryOperator 0x144021fd8 <col:9, col:10> 'char *' lvalue prefix '*' cannot overflow
|   |     | | `-ImplicitCastExpr 0x144021fc0 <col:10> 'char **' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x144021fa0 <col:10> 'char **' lvalue ParmVar 0x1450c1b88 'keyp' 'char **'
|   |     | `-ImplicitCastExpr 0x144022010 <col:17> 'char *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x144021ff0 <col:17> 'char *' lvalue Var 0x1450dac78 'key' 'char *'
|   |     |-BinaryOperator 0x1440221b0 <line:25:9, col:25> 'char *' contains-errors '='
|   |     | |-UnaryOperator 0x144022158 <col:9, col:10> 'char *' lvalue prefix '*' cannot overflow
|   |     | | `-ImplicitCastExpr 0x144022140 <col:10> 'char **' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x144022048 <col:10> 'char **' lvalue ParmVar 0x1450c1c08 'valuep' 'char **'
|   |     | `-BinaryOperator 0x144022190 <col:19, col:25> '<dependent type>' contains-errors '+'
|   |     |   |-DeclRefExpr 0x144022098 <col:19> 'char *' lvalue Var 0x1450dac78 'key' 'char *'
|   |     |   `-RecoveryExpr 0x144022170 <col:25> '<dependent type>' contains-errors lvalue
|   |     `-ReturnStmt 0x144022208 <line:26:9, col:16>
|   |       `-RecoveryExpr 0x1440221e8 <col:16> '<dependent type>' contains-errors lvalue
|   |-DeclStmt 0x144022388 <line:30:5, col:27>
|   | `-VarDecl 0x1440222b8 <col:5, col:20> col:11 used value 'char *' cinit
|   |   `-ImplicitCastExpr 0x144022370 <col:19, col:20> 'char *' <LValueToRValue>
|   |     `-UnaryOperator 0x144022358 <col:19, col:20> 'char *' lvalue prefix '*' cannot overflow
|   |       `-ImplicitCastExpr 0x144022340 <col:20> 'char **' <LValueToRValue>
|   |         `-DeclRefExpr 0x144022320 <col:20> 'char **' lvalue ParmVar 0x1450c1b08 'stringp' 'char **'
|   |-RecoveryExpr 0x1440226f8 <line:31:5, col:55> '<dependent type>' contains-errors lvalue
|   | |-UnaryExprOrTypeTraitExpr 0x144022660 <col:5, col:12> 'unsigned long' contains-errors sizeof
|   | | `-RecoveryExpr 0x144022640 <col:12> '<dependent type>' contains-errors lvalue
|   | `-CallExpr 0x144022698 <col:24, col:55> 'int'
|   |   |-ImplicitCastExpr 0x144022680 <col:24> 'int (*)()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1440224f0 <col:24> 'int ()' Function 0x144022438 'parse_value' 'int ()'
|   |   |-ImplicitCastExpr 0x1440226c8 <col:36> 'char *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x144022510 <col:36> 'char *' lvalue Var 0x1440222b8 'value' 'char *'
|   |   `-ImplicitCastExpr 0x1440226e0 <col:43> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x144022530 <col:43> 'const char *' lvalue Var 0x144021c18 'value_delims' 'const char *'
|   |-DeclStmt 0x1440227d8 <line:32:5, col:40>
|   | `-VarDecl 0x144022738 <col:5, col:10> col:10 used value_delim 'char'
|   |-BinaryOperator 0x1440229c0 <line:36:5, col:13> 'char *' '='
|   | |-UnaryOperator 0x144022970 <col:5, col:6> 'char *' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x144022958 <col:6> 'char **' <LValueToRValue>
|   | |   `-DeclRefExpr 0x144022938 <col:6> 'char **' lvalue ParmVar 0x1450c1b88 'keyp' 'char **'
|   | `-ImplicitCastExpr 0x1440229a8 <col:13> 'char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x144022988 <col:13> 'char *' lvalue Var 0x1450dac78 'key' 'char *'
|   `-BinaryOperator 0x1450dba68 <line:37:5, col:15> 'char *' '='
|     |-UnaryOperator 0x1450dba18 <col:5, col:6> 'char *' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x1450dba00 <col:6> 'char **' <LValueToRValue>
|     |   `-DeclRefExpr 0x1440229e0 <col:6> 'char **' lvalue ParmVar 0x1450c1c08 'valuep' 'char **'
|     `-ImplicitCastExpr 0x1450dba50 <col:15> 'char *' <LValueToRValue>
|       `-DeclRefExpr 0x1450dba30 <col:15> 'char *' lvalue Var 0x1440222b8 'value' 'char *'
|-FunctionDecl 0x1450da510 <line:4:17> col:17 implicit used strspn 'unsigned long (const char *, const char *)' extern
| |-ParmVarDecl 0x1450da610 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1450da678 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x1450da5b8 <<invalid sloc>> Implicit 897
`-FunctionDecl 0x1450dad98 <line:12:22> col:22 implicit used strcspn 'unsigned long (const char *, const char *)' extern
  |-ParmVarDecl 0x1450dae98 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x1450daf00 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x1450dae40 <<invalid sloc>> Implicit 894
