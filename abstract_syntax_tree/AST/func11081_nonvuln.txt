TranslationUnitDecl 0x14c826408 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x14c8272b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x14c8269d0 '__int128'
|-TypedefDecl 0x14c827328 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x14c8269f0 'unsigned __int128'
|-TypedefDecl 0x14c053030 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x14c052e00 'struct __NSConstantString_tag'
|   `-Record 0x14c827380 '__NSConstantString_tag'
|-TypedefDecl 0x14c053098 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x14c826b90 '__SVInt8_t'
|-TypedefDecl 0x14c053100 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x14c826bb0 '__SVInt16_t'
|-TypedefDecl 0x14c053168 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x14c826bd0 '__SVInt32_t'
|-TypedefDecl 0x14c0531d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x14c826bf0 '__SVInt64_t'
|-TypedefDecl 0x14c053238 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x14c826c10 '__SVUint8_t'
|-TypedefDecl 0x14c0532a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x14c826c30 '__SVUint16_t'
|-TypedefDecl 0x14c053308 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x14c826c50 '__SVUint32_t'
|-TypedefDecl 0x14c053370 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x14c826c70 '__SVUint64_t'
|-TypedefDecl 0x14c0533d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x14c826c90 '__SVFloat16_t'
|-TypedefDecl 0x14c053440 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x14c826cb0 '__SVFloat32_t'
|-TypedefDecl 0x14c0534a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x14c826cd0 '__SVFloat64_t'
|-TypedefDecl 0x14c053510 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x14c826cf0 '__SVBfloat16_t'
|-TypedefDecl 0x14c053578 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x14c826d10 '__clang_svint8x2_t'
|-TypedefDecl 0x14c0535e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x14c826d30 '__clang_svint16x2_t'
|-TypedefDecl 0x14c053648 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x14c826d50 '__clang_svint32x2_t'
|-TypedefDecl 0x14c0536b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x14c826d70 '__clang_svint64x2_t'
|-TypedefDecl 0x14c053718 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x14c826d90 '__clang_svuint8x2_t'
|-TypedefDecl 0x14c053780 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x14c826db0 '__clang_svuint16x2_t'
|-TypedefDecl 0x14c0537e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x14c826dd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x14c053850 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x14c826df0 '__clang_svuint64x2_t'
|-TypedefDecl 0x14c0538b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x14c826e10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x14c053920 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x14c826e30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x14c053988 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x14c826e50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x14c0539f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x14c826e70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x14c053a58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x14c826e90 '__clang_svint8x3_t'
|-TypedefDecl 0x14c053ac0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x14c826eb0 '__clang_svint16x3_t'
|-TypedefDecl 0x14c053b28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x14c826ed0 '__clang_svint32x3_t'
|-TypedefDecl 0x14c053b90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x14c826ef0 '__clang_svint64x3_t'
|-TypedefDecl 0x14c053bf8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x14c826f10 '__clang_svuint8x3_t'
|-TypedefDecl 0x14c053c60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x14c826f30 '__clang_svuint16x3_t'
|-TypedefDecl 0x14c053cc8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x14c826f50 '__clang_svuint32x3_t'
|-TypedefDecl 0x14c053d30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x14c826f70 '__clang_svuint64x3_t'
|-TypedefDecl 0x14c053d98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x14c826f90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x14c053e00 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x14c826fb0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x14c053e68 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x14c826fd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x14c053ed0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x14c826ff0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x14c053f38 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x14c827010 '__clang_svint8x4_t'
|-TypedefDecl 0x14c053fa0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x14c827030 '__clang_svint16x4_t'
|-TypedefDecl 0x14c054008 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x14c827050 '__clang_svint32x4_t'
|-TypedefDecl 0x14c054070 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x14c827070 '__clang_svint64x4_t'
|-TypedefDecl 0x14c0540d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x14c827090 '__clang_svuint8x4_t'
|-TypedefDecl 0x14c054140 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x14c8270b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x14c0541a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x14c8270d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x14c054210 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x14c8270f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x14c054278 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x14c827110 '__clang_svfloat16x4_t'
|-TypedefDecl 0x14c0542e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x14c827130 '__clang_svfloat32x4_t'
|-TypedefDecl 0x14c054348 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x14c827150 '__clang_svfloat64x4_t'
|-TypedefDecl 0x14c0543b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x14c827170 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x14c054418 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x14c827190 '__SVBool_t'
|-TypedefDecl 0x14c054480 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x14c8271b0 '__clang_svboolx2_t'
|-TypedefDecl 0x14c0544e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x14c8271d0 '__clang_svboolx4_t'
|-TypedefDecl 0x14c054550 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x14c8271f0 '__SVCount_t'
|-TypedefDecl 0x14c0545f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x14c0545b0 'char *'
|   `-BuiltinType 0x14c8264b0 'char'
|-TypedefDecl 0x14c054668 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x14c0545b0 'char *'
|   `-BuiltinType 0x14c8264b0 'char'
|-FunctionDecl 0x14c0547a8 <dataset_diviso_filec/func11081_nonvuln.c:1:1, line:23:1> line:1:12 getreg 'int (const char *)' static
| |-ParmVarDecl 0x14c0546d8 <col:19, col:31> col:31 used str 'const char *'
| `-CompoundStmt 0x14c06f088 <col:36, line:23:1>
|   |-DeclStmt 0x14c054920 <line:2:2, col:7>
|   | `-VarDecl 0x14c0548b8 <col:2, col:6> col:6 used i 'int'
|   |-DeclStmt 0x14c0549b8 <line:3:2, col:10>
|   | `-VarDecl 0x14c054950 <col:2, col:8> col:8 used ep 'char *'
|   |-DeclStmt 0x14c054b20 <line:4:2, col:41>
|   | `-VarDecl 0x14c054a28 <col:2, col:22> col:14 used aliases 'const char *[]'
|   |-IfStmt 0x14c054c88 <line:5:2, line:7:2>
|   | |-BinaryOperator 0x14c054c08 <line:5:6, col:16> 'int' '||'
|   | | |-UnaryOperator 0x14c054b70 <col:6, col:7> 'int' prefix '!' cannot overflow
|   | | | `-ImplicitCastExpr 0x14c054b58 <col:7> 'const char *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x14c054b38 <col:7> 'const char *' lvalue ParmVar 0x14c0546d8 'str' 'const char *'
|   | | `-UnaryOperator 0x14c054bf0 <col:14, col:16> 'int' prefix '!' cannot overflow
|   | |   `-ImplicitCastExpr 0x14c054bd8 <col:15, col:16> 'char' <LValueToRValue>
|   | |     `-UnaryOperator 0x14c054bc0 <col:15, col:16> 'const char' lvalue prefix '*' cannot overflow
|   | |       `-ImplicitCastExpr 0x14c054ba8 <col:16> 'const char *' <LValueToRValue>
|   | |         `-DeclRefExpr 0x14c054b88 <col:16> 'const char *' lvalue ParmVar 0x14c0546d8 'str' 'const char *'
|   | `-CompoundStmt 0x14c054c70 <col:21, line:7:2>
|   |   `-ReturnStmt 0x14c054c60 <line:6:3, col:11>
|   |     `-UnaryOperator 0x14c054c48 <col:10, col:11> 'int' prefix '-'
|   |       `-IntegerLiteral 0x14c054c28 <col:11> 'int' 1
|   |-IfStmt 0x14c06d4e8 <line:8:2, line:16:2>
|   | |-BinaryOperator 0x14c054d40 <line:8:6, col:14> 'int' '=='
|   | | |-ImplicitCastExpr 0x14c054d28 <col:6, col:7> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x14c054d10 <col:6, col:7> 'char' <LValueToRValue>
|   | | |   `-UnaryOperator 0x14c054ce0 <col:6, col:7> 'const char' lvalue prefix '*' cannot overflow
|   | | |     `-ImplicitCastExpr 0x14c054cc8 <col:7> 'const char *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x14c054ca8 <col:7> 'const char *' lvalue ParmVar 0x14c0546d8 'str' 'const char *'
|   | | `-CharacterLiteral 0x14c054cf8 <col:14> 'int' 114
|   | `-CompoundStmt 0x14c06d4c0 <col:19, line:16:2>
|   |   |-DeclStmt 0x14c06d078 <line:9:3, col:38>
|   |   | `-VarDecl 0x14c054d78 <col:3, col:37> col:7 used reg 'int' cinit
|   |   |   `-ImplicitCastExpr 0x14c06d060 <col:13, col:37> 'int' <IntegralCast>
|   |   |     `-CallExpr 0x14c06d028 <col:13, col:37> 'long'
|   |   |       |-ImplicitCastExpr 0x14c06d010 <col:13> 'long (*)(const char *, char **, int)' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x14c06cef0 <col:13> 'long (const char *, char **, int)' Function 0x14c06cca0 'strtol' 'long (const char *, char **, int)'
|   |   |       |-BinaryOperator 0x14c06cf68 <col:21, col:27> 'const char *' '+'
|   |   |       | |-ImplicitCastExpr 0x14c06cf50 <col:21> 'const char *' <LValueToRValue>
|   |   |       | | `-DeclRefExpr 0x14c06cf10 <col:21> 'const char *' lvalue ParmVar 0x14c0546d8 'str' 'const char *'
|   |   |       | `-IntegerLiteral 0x14c06cf30 <col:27> 'int' 1
|   |   |       |-UnaryOperator 0x14c06cfa8 <col:30, col:31> 'char **' prefix '&' cannot overflow
|   |   |       | `-DeclRefExpr 0x14c06cf88 <col:31> 'char *' lvalue Var 0x14c054950 'ep' 'char *'
|   |   |       `-IntegerLiteral 0x14c06cfc0 <col:35> 'int' 10
|   |   |-IfStmt 0x14c06d310 <line:10:3, line:12:3>
|   |   | |-BinaryOperator 0x14c06d290 <line:10:7, col:41> 'int' '||'
|   |   | | |-ParenExpr 0x14c06d170 <col:7, col:21> 'int'
|   |   | | | `-BinaryOperator 0x14c06d150 <col:8, col:17> 'int' '!='
|   |   | | |   |-ImplicitCastExpr 0x14c06d138 <col:8, col:12> 'int' <IntegralCast>
|   |   | | |   | `-ImplicitCastExpr 0x14c06d120 <col:8, col:12> 'char' <LValueToRValue>
|   |   | | |   |   `-ArraySubscriptExpr 0x14c06d0e8 <col:8, col:12> 'char' lvalue
|   |   | | |   |     |-ImplicitCastExpr 0x14c06d0d0 <col:8> 'char *' <LValueToRValue>
|   |   | | |   |     | `-DeclRefExpr 0x14c06d090 <col:8> 'char *' lvalue Var 0x14c054950 'ep' 'char *'
|   |   | | |   |     `-IntegerLiteral 0x14c06d0b0 <col:11> 'int' 0
|   |   | | |   `-CharacterLiteral 0x14c06d108 <col:17> 'int' 0
|   |   | | `-ParenExpr 0x14c06d270 <col:26, col:41> 'int'
|   |   | |   `-BinaryOperator 0x14c06d250 <col:27, col:37> 'int' '=='
|   |   | |     |-ImplicitCastExpr 0x14c06d238 <col:27, col:32> 'int' <IntegralCast>
|   |   | |     | `-ImplicitCastExpr 0x14c06d220 <col:27, col:32> 'char' <LValueToRValue>
|   |   | |     |   `-ArraySubscriptExpr 0x14c06d1e8 <col:27, col:32> 'const char' lvalue
|   |   | |     |     |-ImplicitCastExpr 0x14c06d1d0 <col:27> 'const char *' <LValueToRValue>
|   |   | |     |     | `-DeclRefExpr 0x14c06d190 <col:27> 'const char *' lvalue ParmVar 0x14c0546d8 'str' 'const char *'
|   |   | |     |     `-IntegerLiteral 0x14c06d1b0 <col:31> 'int' 1
|   |   | |     `-CharacterLiteral 0x14c06d208 <col:37> 'int' 0
|   |   | `-CompoundStmt 0x14c06d2f8 <col:44, line:12:3>
|   |   |   `-ReturnStmt 0x14c06d2e8 <line:11:4, col:12>
|   |   |     `-UnaryOperator 0x14c06d2d0 <col:11, col:12> 'int' prefix '-'
|   |   |       `-IntegerLiteral 0x14c06d2b0 <col:12> 'int' 1
|   |   `-IfStmt 0x14c06d4a0 <line:13:3, line:15:3>
|   |     |-BinaryOperator 0x14c06d420 <line:13:7, col:26> 'int' '&&'
|   |     | |-BinaryOperator 0x14c06d388 <col:7, col:13> 'int' '<'
|   |     | | |-ImplicitCastExpr 0x14c06d370 <col:7> 'int' <LValueToRValue>
|   |     | | | `-DeclRefExpr 0x14c06d330 <col:7> 'int' lvalue Var 0x14c054d78 'reg' 'int'
|   |     | | `-IntegerLiteral 0x14c06d350 <col:13> 'int' 16
|   |     | `-BinaryOperator 0x14c06d400 <col:19, col:26> 'int' '>='
|   |     |   |-ImplicitCastExpr 0x14c06d3e8 <col:19> 'int' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x14c06d3a8 <col:19> 'int' lvalue Var 0x14c054d78 'reg' 'int'
|   |     |   `-IntegerLiteral 0x14c06d3c8 <col:26> 'int' 0
|   |     `-CompoundStmt 0x14c06d488 <col:29, line:15:3>
|   |       `-ReturnStmt 0x14c06d478 <line:14:4, col:11>
|   |         `-ImplicitCastExpr 0x14c06d460 <col:11> 'int' <LValueToRValue>
|   |           `-DeclRefExpr 0x14c06d440 <col:11> 'int' lvalue Var 0x14c054d78 'reg' 'int'
|   |-ForStmt 0x14c06f008 <line:17:2, line:21:2>
|   | |-BinaryOperator 0x14c06d548 <line:17:7, col:9> 'int' '='
|   | | |-DeclRefExpr 0x14c06d508 <col:7> 'int' lvalue Var 0x14c0548b8 'i' 'int'
|   | | `-IntegerLiteral 0x14c06d528 <col:9> 'int' 0
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x14c06d630 <col:12, col:21> 'const char *' <LValueToRValue>
|   | | `-ArraySubscriptExpr 0x14c06d610 <col:12, col:21> 'const char *' lvalue
|   | |   |-ImplicitCastExpr 0x14c06d5e0 <col:12> 'const char **' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x14c06d568 <col:12> 'const char *[]' lvalue Var 0x14c054a28 'aliases' 'const char *[]'
|   | |   `-ImplicitCastExpr 0x14c06d5f8 <col:20> 'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x14c06d588 <col:20> 'int' lvalue Var 0x14c0548b8 'i' 'int'
|   | |-UnaryOperator 0x14c06d668 <col:24, col:25> 'int' postfix '++'
|   | | `-DeclRefExpr 0x14c06d648 <col:24> 'int' lvalue Var 0x14c0548b8 'i' 'int'
|   | `-CompoundStmt 0x14c06eff0 <col:29, line:21:2>
|   |   `-IfStmt 0x14c06efd0 <line:18:3, line:20:3>
|   |     |-UnaryOperator 0x14c06ef18 <line:18:7, col:35> 'int' prefix '!' cannot overflow
|   |     | `-CallExpr 0x14c06eeb8 <col:8, col:35> 'int'
|   |     |   |-ImplicitCastExpr 0x14c06eea0 <col:8> 'int (*)()' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x14c06d790 <col:8> 'int ()' Function 0x14c06d6d8 'strcmpnull' 'int ()'
|   |     |   |-ImplicitCastExpr 0x14c06eee8 <col:20> 'const char *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x14c06d7b0 <col:20> 'const char *' lvalue ParmVar 0x14c0546d8 'str' 'const char *'
|   |     |   `-ImplicitCastExpr 0x14c06ef00 <col:25, col:34> 'const char *' <LValueToRValue>
|   |     |     `-ArraySubscriptExpr 0x14c06ee50 <col:25, col:34> 'const char *' lvalue
|   |     |       |-ImplicitCastExpr 0x14c06ee20 <col:25> 'const char **' <ArrayToPointerDecay>
|   |     |       | `-DeclRefExpr 0x14c06d7d0 <col:25> 'const char *[]' lvalue Var 0x14c054a28 'aliases' 'const char *[]'
|   |     |       `-ImplicitCastExpr 0x14c06ee38 <col:33> 'int' <LValueToRValue>
|   |     |         `-DeclRefExpr 0x14c06ee00 <col:33> 'int' lvalue Var 0x14c0548b8 'i' 'int'
|   |     `-CompoundStmt 0x14c06efb8 <col:38, line:20:3>
|   |       `-ReturnStmt 0x14c06efa8 <line:19:4, col:16>
|   |         `-BinaryOperator 0x14c06ef88 <col:11, col:16> 'int' '+'
|   |           |-IntegerLiteral 0x14c06ef30 <col:11> 'int' 10
|   |           `-ImplicitCastExpr 0x14c06ef70 <col:16> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x14c06ef50 <col:16> 'int' lvalue Var 0x14c0548b8 'i' 'int'
|   `-ReturnStmt 0x14c06f078 <line:22:2, col:10>
|     `-UnaryOperator 0x14c06f060 <col:9, col:10> 'int' prefix '-'
|       `-IntegerLiteral 0x14c06f040 <col:10> 'int' 1
`-FunctionDecl 0x14c06cca0 <line:9:13> col:13 implicit used strtol 'long (const char *, char **, int)' extern
  |-ParmVarDecl 0x14c06cda0 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x14c06ce08 <<invalid sloc>> <invalid sloc> 'char **'
  |-ParmVarDecl 0x14c06ce70 <<invalid sloc>> <invalid sloc> 'int'
  `-BuiltinAttr 0x14c06cd48 <<invalid sloc>> Implicit 877
