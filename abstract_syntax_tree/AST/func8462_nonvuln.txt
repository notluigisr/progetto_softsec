TranslationUnitDecl 0x126055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1260564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x126055bd0 '__int128'
|-TypedefDecl 0x126056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x126055bf0 'unsigned __int128'
|-TypedefDecl 0x12680be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12680bc00 'struct __NSConstantString_tag'
|   `-Record 0x126056580 '__NSConstantString_tag'
|-TypedefDecl 0x12680be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x126055d90 '__SVInt8_t'
|-TypedefDecl 0x12680bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x126055db0 '__SVInt16_t'
|-TypedefDecl 0x12680bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x126055dd0 '__SVInt32_t'
|-TypedefDecl 0x12680bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x126055df0 '__SVInt64_t'
|-TypedefDecl 0x12680c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x126055e10 '__SVUint8_t'
|-TypedefDecl 0x12680c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x126055e30 '__SVUint16_t'
|-TypedefDecl 0x12680c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x126055e50 '__SVUint32_t'
|-TypedefDecl 0x12680c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x126055e70 '__SVUint64_t'
|-TypedefDecl 0x12680c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x126055e90 '__SVFloat16_t'
|-TypedefDecl 0x12680c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x126055eb0 '__SVFloat32_t'
|-TypedefDecl 0x12680c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x126055ed0 '__SVFloat64_t'
|-TypedefDecl 0x12680c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x126055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12680c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x126055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12680c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x126055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12680c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x126055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12680c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x126055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12680c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x126055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12680c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x126055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12680c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x126055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12680c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x126055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12680c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x126056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12680c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x126056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12680c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x126056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12680c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x126056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12680c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x126056090 '__clang_svint8x3_t'
|-TypedefDecl 0x12680c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1260560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12680c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1260560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12680c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1260560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12680c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x126056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12680ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x126056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12680cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x126056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12680cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x126056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12680cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x126056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12680d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1260561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12680d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1260561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12680d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1260561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12680d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x126056210 '__clang_svint8x4_t'
|-TypedefDecl 0x12680d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x126056230 '__clang_svint16x4_t'
|-TypedefDecl 0x12680d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x126056250 '__clang_svint32x4_t'
|-TypedefDecl 0x12680d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x126056270 '__clang_svint64x4_t'
|-TypedefDecl 0x12680d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x126056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12680d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1260562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12680d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1260562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12680d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1260562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12680d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x126056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12680d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x126056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12680d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x126056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12680d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x126056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12680da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x126056390 '__SVBool_t'
|-TypedefDecl 0x12680da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1260563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12680dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1260563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12680db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1260563f0 '__SVCount_t'
|-TypedefDecl 0x12680dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12680dbb0 'char *'
|   `-BuiltinType 0x1260556b0 'char'
|-TypedefDecl 0x12680dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12680dbb0 'char *'
|   `-BuiltinType 0x1260556b0 'char'
|-FunctionDecl 0x12680de58 <dataset_diviso_filec/func8462_nonvuln.c:1:1, line:39:1> line:1:1 invalid _warc_rdver 'int (const char *, int)'
| |-ParmVarDecl 0x12680dcd8 <col:13, col:25> col:25 used buf 'const char *'
| |-ParmVarDecl 0x12680dd70 <col:30, col:37> col:37 invalid bsz 'int'
| `-CompoundStmt 0x12682b508 <line:2:1, line:39:1>
|   |-DeclStmt 0x12680e0a0 <line:3:2, col:35>
|   | `-VarDecl 0x12680df90 <col:2, col:30> col:20 used magic 'const char[4]' static cinit
|   |   `-StringLiteral 0x12680e040 <col:30> 'const char[4]' "STR"
|   |-DeclStmt 0x12680e138 <line:4:2, col:15>
|   | `-VarDecl 0x12680e0d0 <col:2, col:14> col:14 used c 'const char *'
|   |-DeclStmt 0x12680e1f0 <line:5:2, col:23>
|   | `-VarDecl 0x12680e168 <col:2, col:21> col:15 used ver 'unsigned int' cinit
|   |   `-IntegerLiteral 0x12680e1d0 <col:21> 'unsigned int' 0
|   |-DeclStmt 0x12680e2a8 <line:6:2, col:23>
|   | `-VarDecl 0x12680e220 <col:2, col:21> col:15 used end 'unsigned int' cinit
|   |   `-IntegerLiteral 0x12680e288 <col:21> 'unsigned int' 0
|   |-IfStmt 0x126827d18 <line:8:2, line:11:2>
|   | |-BinaryOperator 0x126827c80 <line:8:6, col:60> 'int' contains-errors '||'
|   | | |-BinaryOperator 0x12680e300 <col:6, col:12> 'int' contains-errors '<'
|   | | | |-RecoveryExpr 0x12680e2c0 <col:6> '<dependent type>' contains-errors lvalue
|   | | | `-IntegerLiteral 0x12680e2e0 <col:12> 'int' 12
|   | | `-BinaryOperator 0x126827c60 <col:18, col:60> 'int' '!='
|   | |   |-CallExpr 0x126827ba8 <col:18, col:55> 'int'
|   | |   | |-ImplicitCastExpr 0x126827b90 <col:18> 'int (*)(const void *, const void *, unsigned long)' <FunctionToPointerDecay>
|   | |   | | `-DeclRefExpr 0x126827a10 <col:18> 'int (const void *, const void *, unsigned long)' Function 0x1268277c0 'memcmp' 'int (const void *, const void *, unsigned long)'
|   | |   | |-ImplicitCastExpr 0x126827bf8 <col:25> 'const void *' <BitCast>
|   | |   | | `-ImplicitCastExpr 0x126827be0 <col:25> 'const char *' <LValueToRValue>
|   | |   | |   `-DeclRefExpr 0x126827a30 <col:25> 'const char *' lvalue ParmVar 0x12680dcd8 'buf' 'const char *'
|   | |   | |-ImplicitCastExpr 0x126827c28 <col:30> 'const void *' <BitCast>
|   | |   | | `-ImplicitCastExpr 0x126827c10 <col:30> 'const char *' <ArrayToPointerDecay>
|   | |   | |   `-DeclRefExpr 0x126827a50 <col:30> 'const char[4]' lvalue Var 0x12680df90 'magic' 'const char[4]'
|   | |   | `-BinaryOperator 0x126827b08 <col:37, col:53> 'unsigned long' '-'
|   | |   |   |-UnaryExprOrTypeTraitExpr 0x126827ab0 <col:37, col:49> 'unsigned long' sizeof
|   | |   |   | `-ParenExpr 0x126827a90 <col:43, col:49> 'const char[4]' lvalue
|   | |   |   |   `-DeclRefExpr 0x126827a70 <col:44> 'const char[4]' lvalue Var 0x12680df90 'magic' 'const char[4]' non_odr_use_unevaluated
|   | |   |   `-ImplicitCastExpr 0x126827af0 <col:53> 'unsigned long' <IntegralCast>
|   | |   |     `-IntegerLiteral 0x126827ad0 <col:53> 'unsigned int' 1
|   | |   `-IntegerLiteral 0x126827c40 <col:60> 'int' 0
|   | `-CompoundStmt 0x126827d00 <col:63, line:11:2>
|   |   `-ReturnStmt 0x126827cf0 <line:10:3, col:10>
|   |     `-ImplicitCastExpr 0x126827cd8 <col:10> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x126827cc0 <col:10> 'unsigned int' <LValueToRValue>
|   |         `-DeclRefExpr 0x126827ca0 <col:10> 'unsigned int' lvalue Var 0x12680e168 'ver' 'unsigned int'
|   |-CompoundAssignOperator 0x126827e10 <line:13:2, col:25> 'const char *' '+=' ComputeLHSTy='const char *' ComputeResultTy='const char *'
|   | |-DeclRefExpr 0x126827d38 <col:2> 'const char *' lvalue ParmVar 0x12680dcd8 'buf' 'const char *'
|   | `-BinaryOperator 0x126827df0 <col:9, col:25> 'unsigned long' '-'
|   |   |-UnaryExprOrTypeTraitExpr 0x126827d98 <col:9, col:21> 'unsigned long' sizeof
|   |   | `-ParenExpr 0x126827d78 <col:15, col:21> 'const char[4]' lvalue
|   |   |   `-DeclRefExpr 0x126827d58 <col:16> 'const char[4]' lvalue Var 0x12680df90 'magic' 'const char[4]' non_odr_use_unevaluated
|   |   `-ImplicitCastExpr 0x126827dd8 <col:25> 'unsigned long' <IntegralCast>
|   |     `-IntegerLiteral 0x126827db8 <col:25> 'unsigned int' 1
|   |-IfStmt 0x12682b488 <line:15:2, line:37:2>
|   | |-BinaryOperator 0x126829c40 <line:15:6, line:16:36> 'int' '&&'
|   | | |-BinaryOperator 0x1268282b8 <line:15:6, col:56> 'int' '&&'
|   | | | |-CallExpr 0x126828178 <col:6, col:36> 'int'
|   | | | | |-ImplicitCastExpr 0x126828160 <col:6> 'int (*)(int)' <FunctionToPointerDecay>
|   | | | | | `-DeclRefExpr 0x126828038 <col:6> 'int (int)' Function 0x126827e78 'isdigit' 'int (int)'
|   | | | | `-ImplicitCastExpr 0x1268281a0 <col:14, col:35> 'int' <IntegralCast>
|   | | | |   `-CStyleCastExpr 0x126828100 <col:14, col:35> 'unsigned char' <IntegralCast>
|   | | | |     `-ImplicitCastExpr 0x1268280e8 <col:29, col:35> 'char' <LValueToRValue> part_of_explicit_cast
|   | | | |       `-ArraySubscriptExpr 0x1268280b0 <col:29, col:35> 'const char' lvalue
|   | | | |         |-ImplicitCastExpr 0x126828098 <col:29> 'const char *' <LValueToRValue>
|   | | | |         | `-DeclRefExpr 0x126828058 <col:29> 'const char *' lvalue ParmVar 0x12680dcd8 'buf' 'const char *'
|   | | | |         `-IntegerLiteral 0x126828078 <col:33> 'unsigned int' 0
|   | | | `-ParenExpr 0x126828298 <col:41, col:56> 'int'
|   | | |   `-BinaryOperator 0x126828278 <col:42, col:53> 'int' '=='
|   | | |     |-ImplicitCastExpr 0x126828260 <col:42, col:48> 'int' <IntegralCast>
|   | | |     | `-ImplicitCastExpr 0x126828248 <col:42, col:48> 'char' <LValueToRValue>
|   | | |     |   `-ArraySubscriptExpr 0x126828210 <col:42, col:48> 'const char' lvalue
|   | | |     |     |-ImplicitCastExpr 0x1268281f8 <col:42> 'const char *' <LValueToRValue>
|   | | |     |     | `-DeclRefExpr 0x1268281b8 <col:42> 'const char *' lvalue ParmVar 0x12680dcd8 'buf' 'const char *'
|   | | |     |     `-IntegerLiteral 0x1268281d8 <col:46> 'unsigned int' 1
|   | | |     `-CharacterLiteral 0x126828230 <col:53> 'int' 46
|   | | `-CallExpr 0x126829c00 <line:16:6, col:36> 'int'
|   | |   |-ImplicitCastExpr 0x1268283c8 <col:6> 'int (*)(int)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x1268282d8 <col:6> 'int (int)' Function 0x126827e78 'isdigit' 'int (int)'
|   | |   `-ImplicitCastExpr 0x126829c28 <col:14, col:35> 'int' <IntegralCast>
|   | |     `-CStyleCastExpr 0x1268283a0 <col:14, col:35> 'unsigned char' <IntegralCast>
|   | |       `-ImplicitCastExpr 0x126828388 <col:29, col:35> 'char' <LValueToRValue> part_of_explicit_cast
|   | |         `-ArraySubscriptExpr 0x126828350 <col:29, col:35> 'const char' lvalue
|   | |           |-ImplicitCastExpr 0x126828338 <col:29> 'const char *' <LValueToRValue>
|   | |           | `-DeclRefExpr 0x1268282f8 <col:29> 'const char *' lvalue ParmVar 0x12680dcd8 'buf' 'const char *'
|   | |           `-IntegerLiteral 0x126828318 <col:33> 'unsigned int' 2
|   | `-CompoundStmt 0x12682b450 <col:39, line:37:2>
|   |   |-IfStmt 0x126829e08 <line:18:3, line:19:10>
|   |   | |-CallExpr 0x126829d68 <line:18:7, col:37> 'int'
|   |   | | |-ImplicitCastExpr 0x126829d50 <col:7> 'int (*)(int)' <FunctionToPointerDecay>
|   |   | | | `-DeclRefExpr 0x126829c60 <col:7> 'int (int)' Function 0x126827e78 'isdigit' 'int (int)'
|   |   | | `-ImplicitCastExpr 0x126829d90 <col:15, col:36> 'int' <IntegralCast>
|   |   | |   `-CStyleCastExpr 0x126829d28 <col:15, col:36> 'unsigned char' <IntegralCast>
|   |   | |     `-ImplicitCastExpr 0x126829d10 <col:30, col:36> 'char' <LValueToRValue> part_of_explicit_cast
|   |   | |       `-ArraySubscriptExpr 0x126829cd8 <col:30, col:36> 'const char' lvalue
|   |   | |         |-ImplicitCastExpr 0x126829cc0 <col:30> 'const char *' <LValueToRValue>
|   |   | |         | `-DeclRefExpr 0x126829c80 <col:30> 'const char *' lvalue ParmVar 0x12680dcd8 'buf' 'const char *'
|   |   | |         `-IntegerLiteral 0x126829ca0 <col:34> 'unsigned int' 3
|   |   | `-BinaryOperator 0x126829de8 <line:19:4, col:10> 'unsigned int' '='
|   |   |   |-DeclRefExpr 0x126829da8 <col:4> 'unsigned int' lvalue Var 0x12680e220 'end' 'unsigned int'
|   |   |   `-IntegerLiteral 0x126829dc8 <col:10> 'unsigned int' 1
|   |   |-BinaryOperator 0x126829fa0 <line:21:3, col:27> 'unsigned int' '='
|   |   | |-DeclRefExpr 0x126829e28 <col:3> 'unsigned int' lvalue Var 0x12680e168 'ver' 'unsigned int'
|   |   | `-BinaryOperator 0x126829f80 <col:9, col:27> 'unsigned int' '*'
|   |   |   |-ImplicitCastExpr 0x126829f68 <col:9, col:23> 'unsigned int' <IntegralCast>
|   |   |   | `-ParenExpr 0x126829f28 <col:9, col:23> 'int'
|   |   |   |   `-BinaryOperator 0x126829f08 <col:10, col:20> 'int' '-'
|   |   |   |     |-ImplicitCastExpr 0x126829ef0 <col:10, col:16> 'int' <IntegralCast>
|   |   |   |     | `-ImplicitCastExpr 0x126829ed8 <col:10, col:16> 'char' <LValueToRValue>
|   |   |   |     |   `-ArraySubscriptExpr 0x126829ea0 <col:10, col:16> 'const char' lvalue
|   |   |   |     |     |-ImplicitCastExpr 0x126829e88 <col:10> 'const char *' <LValueToRValue>
|   |   |   |     |     | `-DeclRefExpr 0x126829e48 <col:10> 'const char *' lvalue ParmVar 0x12680dcd8 'buf' 'const char *'
|   |   |   |     |     `-IntegerLiteral 0x126829e68 <col:14> 'unsigned int' 0
|   |   |   |     `-CharacterLiteral 0x126829ec0 <col:20> 'int' 48
|   |   |   `-IntegerLiteral 0x126829f48 <col:27> 'unsigned int' 10000
|   |   |-IfStmt 0x12682a550 <line:23:3, line:27:29> has_else
|   |   | |-BinaryOperator 0x12682a018 <line:23:7, col:14> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x12682a000 <col:7> 'unsigned int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x126829fc0 <col:7> 'unsigned int' lvalue Var 0x12680e220 'end' 'unsigned int'
|   |   | | `-IntegerLiteral 0x126829fe0 <col:14> 'unsigned int' 1
|   |   | |-CompoundStmt 0x12682a388 <col:18, line:26:3>
|   |   | | |-CompoundAssignOperator 0x12682a1b0 <line:24:4, col:29> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   |   | | | |-DeclRefExpr 0x12682a038 <col:4> 'unsigned int' lvalue Var 0x12680e168 'ver' 'unsigned int'
|   |   | | | `-BinaryOperator 0x12682a190 <col:11, col:29> 'unsigned int' '*'
|   |   | | |   |-ImplicitCastExpr 0x12682a178 <col:11, col:25> 'unsigned int' <IntegralCast>
|   |   | | |   | `-ParenExpr 0x12682a138 <col:11, col:25> 'int'
|   |   | | |   |   `-BinaryOperator 0x12682a118 <col:12, col:22> 'int' '-'
|   |   | | |   |     |-ImplicitCastExpr 0x12682a100 <col:12, col:18> 'int' <IntegralCast>
|   |   | | |   |     | `-ImplicitCastExpr 0x12682a0e8 <col:12, col:18> 'char' <LValueToRValue>
|   |   | | |   |     |   `-ArraySubscriptExpr 0x12682a0b0 <col:12, col:18> 'const char' lvalue
|   |   | | |   |     |     |-ImplicitCastExpr 0x12682a098 <col:12> 'const char *' <LValueToRValue>
|   |   | | |   |     |     | `-DeclRefExpr 0x12682a058 <col:12> 'const char *' lvalue ParmVar 0x12680dcd8 'buf' 'const char *'
|   |   | | |   |     |     `-IntegerLiteral 0x12682a078 <col:16> 'unsigned int' 2
|   |   | | |   |     `-CharacterLiteral 0x12682a0d0 <col:22> 'int' 48
|   |   | | |   `-IntegerLiteral 0x12682a158 <col:29> 'unsigned int' 1000
|   |   | | `-CompoundAssignOperator 0x12682a358 <line:25:4, col:29> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   |   | |   |-DeclRefExpr 0x12682a1e0 <col:4> 'unsigned int' lvalue Var 0x12680e168 'ver' 'unsigned int'
|   |   | |   `-BinaryOperator 0x12682a338 <col:11, col:29> 'unsigned int' '*'
|   |   | |     |-ImplicitCastExpr 0x12682a320 <col:11, col:25> 'unsigned int' <IntegralCast>
|   |   | |     | `-ParenExpr 0x12682a2e0 <col:11, col:25> 'int'
|   |   | |     |   `-BinaryOperator 0x12682a2c0 <col:12, col:22> 'int' '-'
|   |   | |     |     |-ImplicitCastExpr 0x12682a2a8 <col:12, col:18> 'int' <IntegralCast>
|   |   | |     |     | `-ImplicitCastExpr 0x12682a290 <col:12, col:18> 'char' <LValueToRValue>
|   |   | |     |     |   `-ArraySubscriptExpr 0x12682a258 <col:12, col:18> 'const char' lvalue
|   |   | |     |     |     |-ImplicitCastExpr 0x12682a240 <col:12> 'const char *' <LValueToRValue>
|   |   | |     |     |     | `-DeclRefExpr 0x12682a200 <col:12> 'const char *' lvalue ParmVar 0x12680dcd8 'buf' 'const char *'
|   |   | |     |     |     `-IntegerLiteral 0x12682a220 <col:16> 'unsigned int' 3
|   |   | |     |     `-CharacterLiteral 0x12682a278 <col:22> 'int' 48
|   |   | |     `-IntegerLiteral 0x12682a300 <col:29> 'unsigned int' 100
|   |   | `-CompoundAssignOperator 0x12682a520 <line:27:4, col:29> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   |   |   |-DeclRefExpr 0x12682a3a8 <col:4> 'unsigned int' lvalue Var 0x12680e168 'ver' 'unsigned int'
|   |   |   `-BinaryOperator 0x12682a500 <col:11, col:29> 'unsigned int' '*'
|   |   |     |-ImplicitCastExpr 0x12682a4e8 <col:11, col:25> 'unsigned int' <IntegralCast>
|   |   |     | `-ParenExpr 0x12682a4a8 <col:11, col:25> 'int'
|   |   |     |   `-BinaryOperator 0x12682a488 <col:12, col:22> 'int' '-'
|   |   |     |     |-ImplicitCastExpr 0x12682a470 <col:12, col:18> 'int' <IntegralCast>
|   |   |     |     | `-ImplicitCastExpr 0x12682a458 <col:12, col:18> 'char' <LValueToRValue>
|   |   |     |     |   `-ArraySubscriptExpr 0x12682a420 <col:12, col:18> 'const char' lvalue
|   |   |     |     |     |-ImplicitCastExpr 0x12682a408 <col:12> 'const char *' <LValueToRValue>
|   |   |     |     |     | `-DeclRefExpr 0x12682a3c8 <col:12> 'const char *' lvalue ParmVar 0x12680dcd8 'buf' 'const char *'
|   |   |     |     |     `-IntegerLiteral 0x12682a3e8 <col:16> 'unsigned int' 2
|   |   |     |     `-CharacterLiteral 0x12682a440 <col:22> 'int' 48
|   |   |     `-IntegerLiteral 0x12682a4c8 <col:29> 'unsigned int' 100
|   |   |-BinaryOperator 0x12682a670 <line:29:3, col:18> 'const char *' '='
|   |   | |-DeclRefExpr 0x12682a580 <col:3> 'const char *' lvalue Var 0x12680e0d0 'c' 'const char *'
|   |   | `-BinaryOperator 0x12682a650 <col:7, col:18> 'const char *' '+'
|   |   |   |-BinaryOperator 0x12682a5f8 <col:7, col:13> 'const char *' '+'
|   |   |   | |-ImplicitCastExpr 0x12682a5e0 <col:7> 'const char *' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x12682a5a0 <col:7> 'const char *' lvalue ParmVar 0x12680dcd8 'buf' 'const char *'
|   |   |   | `-IntegerLiteral 0x12682a5c0 <col:13> 'unsigned int' 3
|   |   |   `-ImplicitCastExpr 0x12682a638 <col:18> 'unsigned int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x12682a618 <col:18> 'unsigned int' lvalue Var 0x12680e220 'end' 'unsigned int'
|   |   `-IfStmt 0x12682b420 <line:30:3, line:36:3> has_else
|   |     |-BinaryOperator 0x12682a6e8 <line:30:7, col:14> 'int' '>='
|   |     | |-ImplicitCastExpr 0x12682a6d0 <col:7> 'unsigned int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x12682a690 <col:7> 'unsigned int' lvalue Var 0x12680e168 'ver' 'unsigned int'
|   |     | `-IntegerLiteral 0x12682a6b0 <col:14> 'unsigned int' 1200
|   |     |-CompoundStmt 0x12682a940 <col:21, line:33:3>
|   |     | `-IfStmt 0x12682a920 <line:31:4, line:32:11>
|   |     |   |-BinaryOperator 0x12682a8a0 <line:31:8, col:32> 'int' '!='
|   |     |   | |-CallExpr 0x12682a7d0 <col:8, col:27> 'int'
|   |     |   | | |-ImplicitCastExpr 0x12682a7b8 <col:8> 'int (*)(const void *, const void *, unsigned long)' <FunctionToPointerDecay>
|   |     |   | | | `-DeclRefExpr 0x12682a708 <col:8> 'int (const void *, const void *, unsigned long)' Function 0x1268277c0 'memcmp' 'int (const void *, const void *, unsigned long)'
|   |     |   | | |-ImplicitCastExpr 0x12682a820 <col:15> 'const void *' <BitCast>
|   |     |   | | | `-ImplicitCastExpr 0x12682a808 <col:15> 'const char *' <LValueToRValue>
|   |     |   | | |   `-DeclRefExpr 0x12682a728 <col:15> 'const char *' lvalue Var 0x12680e0d0 'c' 'const char *'
|   |     |   | | |-ImplicitCastExpr 0x12682a850 <col:18> 'const void *' <BitCast>
|   |     |   | | | `-ImplicitCastExpr 0x12682a838 <col:18> 'char *' <ArrayToPointerDecay>
|   |     |   | | |   `-StringLiteral 0x12682a748 <col:18> 'char[4]' lvalue "STR"
|   |     |   | | `-ImplicitCastExpr 0x12682a868 <col:25> 'unsigned long' <IntegralCast>
|   |     |   | |   `-IntegerLiteral 0x12682a768 <col:25> 'unsigned int' 2
|   |     |   | `-IntegerLiteral 0x12682a880 <col:32> 'int' 0
|   |     |   `-BinaryOperator 0x12682a900 <line:32:5, col:11> 'unsigned int' '='
|   |     |     |-DeclRefExpr 0x12682a8c0 <col:5> 'unsigned int' lvalue Var 0x12680e168 'ver' 'unsigned int'
|   |     |     `-IntegerLiteral 0x12682a8e0 <col:11> 'unsigned int' 0
|   |     `-IfStmt 0x12682b400 <line:33:10, line:36:3>
|   |       |-BinaryOperator 0x12682a9b0 <line:33:14, col:20> 'int' '<'
|   |       | |-ImplicitCastExpr 0x12682a998 <col:14> 'unsigned int' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x12682a958 <col:14> 'unsigned int' lvalue Var 0x12680e168 'ver' 'unsigned int'
|   |       | `-IntegerLiteral 0x12682a978 <col:20> 'unsigned int' 1200
|   |       `-CompoundStmt 0x12682abe0 <col:27, line:36:3>
|   |         `-IfStmt 0x12682abc0 <line:34:4, line:35:11>
|   |           |-BinaryOperator 0x12682ab40 <line:34:8, col:27> 'int' '&&'
|   |           | |-BinaryOperator 0x12682aa68 <col:8, col:14> 'int' '!='
|   |           | | |-ImplicitCastExpr 0x12682aa50 <col:8, col:9> 'int' <IntegralCast>
|   |           | | | `-ImplicitCastExpr 0x12682aa38 <col:8, col:9> 'char' <LValueToRValue>
|   |           | | |   `-UnaryOperator 0x12682aa08 <col:8, col:9> 'const char' lvalue prefix '*' cannot overflow
|   |           | | |     `-ImplicitCastExpr 0x12682a9f0 <col:9> 'const char *' <LValueToRValue>
|   |           | | |       `-DeclRefExpr 0x12682a9d0 <col:9> 'const char *' lvalue Var 0x12680e0d0 'c' 'const char *'
|   |           | | `-CharacterLiteral 0x12682aa20 <col:14> 'int' 32
|   |           | `-BinaryOperator 0x12682ab20 <col:21, col:27> 'int' '!='
|   |           |   |-ImplicitCastExpr 0x12682ab08 <col:21, col:22> 'int' <IntegralCast>
|   |           |   | `-ImplicitCastExpr 0x12682aaf0 <col:21, col:22> 'char' <LValueToRValue>
|   |           |   |   `-UnaryOperator 0x12682aac0 <col:21, col:22> 'const char' lvalue prefix '*' cannot overflow
|   |           |   |     `-ImplicitCastExpr 0x12682aaa8 <col:22> 'const char *' <LValueToRValue>
|   |           |   |       `-DeclRefExpr 0x12682aa88 <col:22> 'const char *' lvalue Var 0x12680e0d0 'c' 'const char *'
|   |           |   `-CharacterLiteral 0x12682aad8 <col:27> 'int' 9
|   |           `-BinaryOperator 0x12682aba0 <line:35:5, col:11> 'unsigned int' '='
|   |             |-DeclRefExpr 0x12682ab60 <col:5> 'unsigned int' lvalue Var 0x12680e168 'ver' 'unsigned int'
|   |             `-IntegerLiteral 0x12682ab80 <col:11> 'unsigned int' 0
|   `-ReturnStmt 0x12682b4f8 <line:38:2, col:9>
|     `-ImplicitCastExpr 0x12682b4e0 <col:9> 'int' <IntegralCast>
|       `-ImplicitCastExpr 0x12682b4c8 <col:9> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x12682b4a8 <col:9> 'unsigned int' lvalue Var 0x12680e168 'ver' 'unsigned int'
|-FunctionDecl 0x1268277c0 <line:8:18> col:18 implicit used memcmp 'int (const void *, const void *, unsigned long)' extern
| |-ParmVarDecl 0x1268278c0 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x126827928 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x126827990 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x126827868 <<invalid sloc>> Implicit 883
`-FunctionDecl 0x126827e78 <line:15:6> col:6 implicit used isdigit 'int (int)' extern
  |-ParmVarDecl 0x126827f78 <<invalid sloc>> <invalid sloc> 'int'
  |-BuiltinAttr 0x126827f20 <<invalid sloc>> Implicit 924
  |-NoThrowAttr 0x126827fe8 <col:6> Implicit
  `-PureAttr 0x126828010 <col:6> Implicit
