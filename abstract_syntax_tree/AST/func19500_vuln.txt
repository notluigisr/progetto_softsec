TranslationUnitDecl 0x124031408 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1240322b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1240319d0 '__int128'
|-TypedefDecl 0x124032328 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1240319f0 'unsigned __int128'
|-TypedefDecl 0x124102030 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x124101e00 'struct __NSConstantString_tag'
|   `-Record 0x124032380 '__NSConstantString_tag'
|-TypedefDecl 0x124102098 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x124031b90 '__SVInt8_t'
|-TypedefDecl 0x124102100 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x124031bb0 '__SVInt16_t'
|-TypedefDecl 0x124102168 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x124031bd0 '__SVInt32_t'
|-TypedefDecl 0x1241021d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x124031bf0 '__SVInt64_t'
|-TypedefDecl 0x124102238 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x124031c10 '__SVUint8_t'
|-TypedefDecl 0x1241022a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x124031c30 '__SVUint16_t'
|-TypedefDecl 0x124102308 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x124031c50 '__SVUint32_t'
|-TypedefDecl 0x124102370 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x124031c70 '__SVUint64_t'
|-TypedefDecl 0x1241023d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x124031c90 '__SVFloat16_t'
|-TypedefDecl 0x124102440 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x124031cb0 '__SVFloat32_t'
|-TypedefDecl 0x1241024a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x124031cd0 '__SVFloat64_t'
|-TypedefDecl 0x124102510 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x124031cf0 '__SVBfloat16_t'
|-TypedefDecl 0x124102578 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x124031d10 '__clang_svint8x2_t'
|-TypedefDecl 0x1241025e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x124031d30 '__clang_svint16x2_t'
|-TypedefDecl 0x124102648 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x124031d50 '__clang_svint32x2_t'
|-TypedefDecl 0x1241026b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x124031d70 '__clang_svint64x2_t'
|-TypedefDecl 0x124102718 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x124031d90 '__clang_svuint8x2_t'
|-TypedefDecl 0x124102780 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x124031db0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1241027e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x124031dd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x124102850 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x124031df0 '__clang_svuint64x2_t'
|-TypedefDecl 0x1241028b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x124031e10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x124102920 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x124031e30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x124102988 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x124031e50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x1241029f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x124031e70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x124102a58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x124031e90 '__clang_svint8x3_t'
|-TypedefDecl 0x124102ac0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x124031eb0 '__clang_svint16x3_t'
|-TypedefDecl 0x124102b28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x124031ed0 '__clang_svint32x3_t'
|-TypedefDecl 0x124102b90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x124031ef0 '__clang_svint64x3_t'
|-TypedefDecl 0x124102bf8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x124031f10 '__clang_svuint8x3_t'
|-TypedefDecl 0x124102c60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x124031f30 '__clang_svuint16x3_t'
|-TypedefDecl 0x124102cc8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x124031f50 '__clang_svuint32x3_t'
|-TypedefDecl 0x124102d30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x124031f70 '__clang_svuint64x3_t'
|-TypedefDecl 0x124102d98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x124031f90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x124103600 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x124031fb0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x124103668 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x124031fd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1241036d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x124031ff0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x124103738 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x124032010 '__clang_svint8x4_t'
|-TypedefDecl 0x1241037a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x124032030 '__clang_svint16x4_t'
|-TypedefDecl 0x124103808 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x124032050 '__clang_svint32x4_t'
|-TypedefDecl 0x124103870 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x124032070 '__clang_svint64x4_t'
|-TypedefDecl 0x1241038d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x124032090 '__clang_svuint8x4_t'
|-TypedefDecl 0x124103940 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1240320b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x1241039a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1240320d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x124103a10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1240320f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x124103a78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x124032110 '__clang_svfloat16x4_t'
|-TypedefDecl 0x124103ae0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x124032130 '__clang_svfloat32x4_t'
|-TypedefDecl 0x124103b48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x124032150 '__clang_svfloat64x4_t'
|-TypedefDecl 0x124103bb0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x124032170 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x124103c18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x124032190 '__SVBool_t'
|-TypedefDecl 0x124103c80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1240321b0 '__clang_svboolx2_t'
|-TypedefDecl 0x124103ce8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1240321d0 '__clang_svboolx4_t'
|-TypedefDecl 0x124103d50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1240321f0 '__SVCount_t'
|-TypedefDecl 0x124103df8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x124103db0 'char *'
|   `-BuiltinType 0x1240314b0 'char'
|-TypedefDecl 0x124103e68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x124103db0 'char *'
|   `-BuiltinType 0x1240314b0 'char'
`-FunctionDecl 0x124104038 <dataset_diviso_filec/func19500_vuln.c:1:1, line:38:1> line:1:5 mutt_b64_decode 'int (char *, const char *)'
  |-ParmVarDecl 0x124103ed8 <col:21, col:27> col:27 used out 'char *'
  |-ParmVarDecl 0x124103f58 <col:32, col:44> col:44 used in 'const char *'
  `-CompoundStmt 0x12381dce0 <line:2:1, line:38:1>
    |-DeclStmt 0x1241041d8 <line:3:3, col:14>
    | `-VarDecl 0x124104150 <col:3, col:13> col:7 used len 'int' cinit
    |   `-IntegerLiteral 0x1241041b8 <col:13> 'int' 0
    |-DeclStmt 0x124104270 <line:4:3, col:23>
    | `-VarDecl 0x124104208 <col:3, col:17> col:17 used digit4 'unsigned char'
    |-DoStmt 0x12381dc78 <line:6:3, line:35:32>
    | |-CompoundStmt 0x12381dae0 <line:7:3, line:35:3>
    | | |-DeclStmt 0x1241043b0 <line:8:5, col:39>
    | | | `-VarDecl 0x1241042a0 <col:5, col:38> col:25 used digit1 'const unsigned char' cinit
    | | |   `-ImplicitCastExpr 0x124104398 <col:34, col:38> 'unsigned char' <IntegralCast>
    | | |     `-ImplicitCastExpr 0x124104380 <col:34, col:38> 'char' <LValueToRValue>
    | | |       `-ArraySubscriptExpr 0x124104360 <col:34, col:38> 'const char' lvalue
    | | |         |-ImplicitCastExpr 0x124104348 <col:34> 'const char *' <LValueToRValue>
    | | |         | `-DeclRefExpr 0x124104308 <col:34> 'const char *' lvalue ParmVar 0x124103f58 'in' 'const char *'
    | | |         `-IntegerLiteral 0x124104328 <col:37> 'int' 0
    | | |-IfStmt 0x12411ddb0 <line:9:5, line:10:15>
    | | | |-RecoveryExpr 0x12411dd48 <line:9:9, col:52> '_Bool' contains-errors
    | | | `-ReturnStmt 0x12411dda0 <line:10:7, col:15>
    | | |   `-UnaryOperator 0x12411dd88 <col:14, col:15> 'int' prefix '-'
    | | |     `-IntegerLiteral 0x12411dd68 <col:15> 'int' 1
    | | |-DeclStmt 0x12411def8 <line:11:5, col:39>
    | | | `-VarDecl 0x12411dde8 <col:5, col:38> col:25 used digit2 'const unsigned char' cinit
    | | |   `-ImplicitCastExpr 0x12411dee0 <col:34, col:38> 'unsigned char' <IntegralCast>
    | | |     `-ImplicitCastExpr 0x12411dec8 <col:34, col:38> 'char' <LValueToRValue>
    | | |       `-ArraySubscriptExpr 0x12411dea8 <col:34, col:38> 'const char' lvalue
    | | |         |-ImplicitCastExpr 0x12411de90 <col:34> 'const char *' <LValueToRValue>
    | | |         | `-DeclRefExpr 0x12411de50 <col:34> 'const char *' lvalue ParmVar 0x124103f58 'in' 'const char *'
    | | |         `-IntegerLiteral 0x12411de70 <col:37> 'int' 1
    | | |-IfStmt 0x12411e180 <line:12:5, line:13:15>
    | | | |-RecoveryExpr 0x12411e118 <line:12:9, col:52> '_Bool' contains-errors
    | | | `-ReturnStmt 0x12411e170 <line:13:7, col:15>
    | | |   `-UnaryOperator 0x12411e158 <col:14, col:15> 'int' prefix '-'
    | | |     `-IntegerLiteral 0x12411e138 <col:15> 'int' 1
    | | |-DeclStmt 0x12411e2c8 <line:14:5, col:39>
    | | | `-VarDecl 0x12411e1b8 <col:5, col:38> col:25 used digit3 'const unsigned char' cinit
    | | |   `-ImplicitCastExpr 0x12411e2b0 <col:34, col:38> 'unsigned char' <IntegralCast>
    | | |     `-ImplicitCastExpr 0x12411e298 <col:34, col:38> 'char' <LValueToRValue>
    | | |       `-ArraySubscriptExpr 0x12411e278 <col:34, col:38> 'const char' lvalue
    | | |         |-ImplicitCastExpr 0x12411e260 <col:34> 'const char *' <LValueToRValue>
    | | |         | `-DeclRefExpr 0x12411e220 <col:34> 'const char *' lvalue ParmVar 0x124103f58 'in' 'const char *'
    | | |         `-IntegerLiteral 0x12411e240 <col:37> 'int' 2
    | | |-IfStmt 0x12411e5f8 <line:15:5, line:16:15>
    | | | |-RecoveryExpr 0x12411e590 <line:15:9, col:73> '_Bool' contains-errors
    | | | `-ReturnStmt 0x12411e5e8 <line:16:7, col:15>
    | | |   `-UnaryOperator 0x12411e5d0 <col:14, col:15> 'int' prefix '-'
    | | |     `-IntegerLiteral 0x12411e5b0 <col:15> 'int' 1
    | | |-BinaryOperator 0x12411e6e0 <line:17:5, col:18> 'unsigned char' '='
    | | | |-DeclRefExpr 0x12411e618 <col:5> 'unsigned char' lvalue Var 0x124104208 'digit4' 'unsigned char'
    | | | `-ImplicitCastExpr 0x12411e6c8 <col:14, col:18> 'unsigned char' <IntegralCast>
    | | |   `-ImplicitCastExpr 0x12411e6b0 <col:14, col:18> 'char' <LValueToRValue>
    | | |     `-ArraySubscriptExpr 0x12411e690 <col:14, col:18> 'const char' lvalue
    | | |       |-ImplicitCastExpr 0x12411e678 <col:14> 'const char *' <LValueToRValue>
    | | |       | `-DeclRefExpr 0x12411e638 <col:14> 'const char *' lvalue ParmVar 0x124103f58 'in' 'const char *'
    | | |       `-IntegerLiteral 0x12411e658 <col:17> 'int' 3
    | | |-IfStmt 0x12411ea18 <line:18:5, line:19:15>
    | | | |-RecoveryExpr 0x12411e9b0 <line:18:9, col:73> '_Bool' contains-errors
    | | | `-ReturnStmt 0x12411ea08 <line:19:7, col:15>
    | | |   `-UnaryOperator 0x12411e9f0 <col:14, col:15> 'int' prefix '-'
    | | |     `-IntegerLiteral 0x12411e9d0 <col:15> 'int' 1
    | | |-CompoundAssignOperator 0x12411ea78 <line:20:5, col:11> 'const char *' '+=' ComputeLHSTy='const char *' ComputeResultTy='const char *'
    | | | |-DeclRefExpr 0x12411ea38 <col:5> 'const char *' lvalue ParmVar 0x124103f58 'in' 'const char *'
    | | | `-IntegerLiteral 0x12411ea58 <col:11> 'int' 4
    | | |-BinaryOperator 0x12381d1e0 <line:23:5, col:64> 'char' '='
    | | | |-UnaryOperator 0x12411eae0 <col:5, col:9> 'char' lvalue prefix '*' cannot overflow
    | | | | `-UnaryOperator 0x12411eac8 <col:6, col:9> 'char *' postfix '++'
    | | | |   `-DeclRefExpr 0x12411eaa8 <col:6> 'char *' lvalue ParmVar 0x124103ed8 'out' 'char *'
    | | | `-ImplicitCastExpr 0x12381d1c8 <col:14, col:64> 'char' <IntegralCast>
    | | |   `-BinaryOperator 0x12381d1a8 <col:14, col:64> 'int' '|'
    | | |     |-ParenExpr 0x12381d078 <col:14, col:37> 'int'
    | | |     | `-BinaryOperator 0x12381d058 <col:15, col:36> 'int' '<<'
    | | |     |   |-CallExpr 0x12411eb50 <col:15, col:31> 'int'
    | | |     |   | |-ImplicitCastExpr 0x12411eb38 <col:15> 'int (*)()' <FunctionToPointerDecay>
    | | |     |   | | `-DeclRefExpr 0x12411eaf8 <col:15> 'int ()' Function 0x1241044e8 'base64val' 'int ()'
    | | |     |   | `-ImplicitCastExpr 0x12411eb90 <col:25> 'int' <IntegralCast>
    | | |     |   |   `-ImplicitCastExpr 0x12411eb78 <col:25> 'unsigned char' <LValueToRValue>
    | | |     |   |     `-DeclRefExpr 0x12411eb18 <col:25> 'const unsigned char' lvalue Var 0x1241042a0 'digit1' 'const unsigned char'
    | | |     |   `-IntegerLiteral 0x12411eba8 <col:36> 'int' 2
    | | |     `-ParenExpr 0x12381d188 <col:41, col:64> 'int'
    | | |       `-BinaryOperator 0x12381d168 <col:42, col:63> 'int' '>>'
    | | |         |-CallExpr 0x12381d0f0 <col:42, col:58> 'int'
    | | |         | |-ImplicitCastExpr 0x12381d0d8 <col:42> 'int (*)()' <FunctionToPointerDecay>
    | | |         | | `-DeclRefExpr 0x12381d098 <col:42> 'int ()' Function 0x1241044e8 'base64val' 'int ()'
    | | |         | `-ImplicitCastExpr 0x12381d130 <col:52> 'int' <IntegralCast>
    | | |         |   `-ImplicitCastExpr 0x12381d118 <col:52> 'unsigned char' <LValueToRValue>
    | | |         |     `-DeclRefExpr 0x12381d0b8 <col:52> 'const unsigned char' lvalue Var 0x12411dde8 'digit2' 'const unsigned char'
    | | |         `-IntegerLiteral 0x12381d148 <col:63> 'int' 4
    | | |-UnaryOperator 0x12381d278 <line:24:5, col:8> 'int' postfix '++'
    | | | `-DeclRefExpr 0x12381d258 <col:5> 'int' lvalue Var 0x124104150 'len' 'int'
    | | `-IfStmt 0x12381dac0 <line:25:5, line:34:5>
    | |   |-BinaryOperator 0x12381d2f8 <line:25:9, col:19> 'int' '!='
    | |   | |-ImplicitCastExpr 0x12381d2e0 <col:9> 'int' <IntegralCast>
    | |   | | `-ImplicitCastExpr 0x12381d2c8 <col:9> 'unsigned char' <LValueToRValue>
    | |   | |   `-DeclRefExpr 0x12381d290 <col:9> 'const unsigned char' lvalue Var 0x12411e1b8 'digit3' 'const unsigned char'
    | |   | `-CharacterLiteral 0x12381d2b0 <col:19> 'int' 61
    | |   `-CompoundStmt 0x12381da98 <line:26:5, line:34:5>
    | |     |-BinaryOperator 0x12381d678 <line:27:7, col:75> 'char' '='
    | |     | |-UnaryOperator 0x12381d3a8 <col:7, col:11> 'char' lvalue prefix '*' cannot overflow
    | |     | | `-UnaryOperator 0x12381d390 <col:8, col:11> 'char *' postfix '++'
    | |     | |   `-DeclRefExpr 0x12381d370 <col:8> 'char *' lvalue ParmVar 0x124103ed8 'out' 'char *'
    | |     | `-ImplicitCastExpr 0x12381d660 <col:16, col:75> 'char' <IntegralCast>
    | |     |   `-BinaryOperator 0x12381d640 <col:16, col:75> 'int' '|'
    | |     |     |-ParenExpr 0x12381d510 <col:16, col:48> 'int'
    | |     |     | `-BinaryOperator 0x12381d4f0 <col:17, col:44> 'int' '&'
    | |     |     |   |-ParenExpr 0x12381d4b0 <col:17, col:40> 'int'
    | |     |     |   | `-BinaryOperator 0x12381d490 <col:18, col:39> 'int' '<<'
    | |     |     |   |   |-CallExpr 0x12381d418 <col:18, col:34> 'int'
    | |     |     |   |   | |-ImplicitCastExpr 0x12381d400 <col:18> 'int (*)()' <FunctionToPointerDecay>
    | |     |     |   |   | | `-DeclRefExpr 0x12381d3c0 <col:18> 'int ()' Function 0x1241044e8 'base64val' 'int ()'
    | |     |     |   |   | `-ImplicitCastExpr 0x12381d458 <col:28> 'int' <IntegralCast>
    | |     |     |   |   |   `-ImplicitCastExpr 0x12381d440 <col:28> 'unsigned char' <LValueToRValue>
    | |     |     |   |   |     `-DeclRefExpr 0x12381d3e0 <col:28> 'const unsigned char' lvalue Var 0x12411dde8 'digit2' 'const unsigned char'
    | |     |     |   |   `-IntegerLiteral 0x12381d470 <col:39> 'int' 4
    | |     |     |   `-IntegerLiteral 0x12381d4d0 <col:44> 'int' 240
    | |     |     `-ParenExpr 0x12381d620 <col:52, col:75> 'int'
    | |     |       `-BinaryOperator 0x12381d600 <col:53, col:74> 'int' '>>'
    | |     |         |-CallExpr 0x12381d588 <col:53, col:69> 'int'
    | |     |         | |-ImplicitCastExpr 0x12381d570 <col:53> 'int (*)()' <FunctionToPointerDecay>
    | |     |         | | `-DeclRefExpr 0x12381d530 <col:53> 'int ()' Function 0x1241044e8 'base64val' 'int ()'
    | |     |         | `-ImplicitCastExpr 0x12381d5c8 <col:63> 'int' <IntegralCast>
    | |     |         |   `-ImplicitCastExpr 0x12381d5b0 <col:63> 'unsigned char' <LValueToRValue>
    | |     |         |     `-DeclRefExpr 0x12381d550 <col:63> 'const unsigned char' lvalue Var 0x12411e1b8 'digit3' 'const unsigned char'
    | |     |         `-IntegerLiteral 0x12381d5e0 <col:74> 'int' 2
    | |     |-UnaryOperator 0x12381d6b8 <line:28:7, col:10> 'int' postfix '++'
    | |     | `-DeclRefExpr 0x12381d698 <col:7> 'int' lvalue Var 0x124104150 'len' 'int'
    | |     `-IfStmt 0x12381da78 <line:29:7, line:33:7>
    | |       |-BinaryOperator 0x12381d738 <line:29:11, col:21> 'int' '!='
    | |       | |-ImplicitCastExpr 0x12381d720 <col:11> 'int' <IntegralCast>
    | |       | | `-ImplicitCastExpr 0x12381d708 <col:11> 'unsigned char' <LValueToRValue>
    | |       | |   `-DeclRefExpr 0x12381d6d0 <col:11> 'unsigned char' lvalue Var 0x124104208 'digit4' 'unsigned char'
    | |       | `-CharacterLiteral 0x12381d6f0 <col:21> 'int' 61
    | |       `-CompoundStmt 0x12381da58 <line:30:7, line:33:7>
    | |         |-BinaryOperator 0x12381da00 <line:31:9, col:70> 'char' '='
    | |         | |-UnaryOperator 0x12381d790 <col:9, col:13> 'char' lvalue prefix '*' cannot overflow
    | |         | | `-UnaryOperator 0x12381d778 <col:10, col:13> 'char *' postfix '++'
    | |         | |   `-DeclRefExpr 0x12381d758 <col:10> 'char *' lvalue ParmVar 0x124103ed8 'out' 'char *'
    | |         | `-ImplicitCastExpr 0x12381d9e8 <col:18, col:70> 'char' <IntegralCast>
    | |         |   `-BinaryOperator 0x12381d9c8 <col:18, col:70> 'int' '|'
    | |         |     |-ParenExpr 0x12381d8f8 <col:18, col:50> 'int'
    | |         |     | `-BinaryOperator 0x12381d8d8 <col:19, col:46> 'int' '&'
    | |         |     |   |-ParenExpr 0x12381d898 <col:19, col:42> 'int'
    | |         |     |   | `-BinaryOperator 0x12381d878 <col:20, col:41> 'int' '<<'
    | |         |     |   |   |-CallExpr 0x12381d800 <col:20, col:36> 'int'
    | |         |     |   |   | |-ImplicitCastExpr 0x12381d7e8 <col:20> 'int (*)()' <FunctionToPointerDecay>
    | |         |     |   |   | | `-DeclRefExpr 0x12381d7a8 <col:20> 'int ()' Function 0x1241044e8 'base64val' 'int ()'
    | |         |     |   |   | `-ImplicitCastExpr 0x12381d840 <col:30> 'int' <IntegralCast>
    | |         |     |   |   |   `-ImplicitCastExpr 0x12381d828 <col:30> 'unsigned char' <LValueToRValue>
    | |         |     |   |   |     `-DeclRefExpr 0x12381d7c8 <col:30> 'const unsigned char' lvalue Var 0x12411e1b8 'digit3' 'const unsigned char'
    | |         |     |   |   `-IntegerLiteral 0x12381d858 <col:41> 'int' 6
    | |         |     |   `-IntegerLiteral 0x12381d8b8 <col:46> 'int' 192
    | |         |     `-CallExpr 0x12381d970 <col:54, col:70> 'int'
    | |         |       |-ImplicitCastExpr 0x12381d958 <col:54> 'int (*)()' <FunctionToPointerDecay>
    | |         |       | `-DeclRefExpr 0x12381d918 <col:54> 'int ()' Function 0x1241044e8 'base64val' 'int ()'
    | |         |       `-ImplicitCastExpr 0x12381d9b0 <col:64> 'int' <IntegralCast>
    | |         |         `-ImplicitCastExpr 0x12381d998 <col:64> 'unsigned char' <LValueToRValue>
    | |         |           `-DeclRefExpr 0x12381d938 <col:64> 'unsigned char' lvalue Var 0x124104208 'digit4' 'unsigned char'
    | |         `-UnaryOperator 0x12381da40 <line:32:9, col:12> 'int' postfix '++'
    | |           `-DeclRefExpr 0x12381da20 <col:9> 'int' lvalue Var 0x124104150 'len' 'int'
    | `-BinaryOperator 0x12381dc58 <line:35:12, col:29> 'int' '&&'
    |   |-ImplicitCastExpr 0x12381dc40 <col:12, col:13> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x12381dc28 <col:12, col:13> 'char' <LValueToRValue>
    |   |   `-UnaryOperator 0x12381db88 <col:12, col:13> 'const char' lvalue prefix '*' cannot overflow
    |   |     `-ImplicitCastExpr 0x12381db70 <col:13> 'const char *' <LValueToRValue>
    |   |       `-DeclRefExpr 0x12381db50 <col:13> 'const char *' lvalue ParmVar 0x124103f58 'in' 'const char *'
    |   `-BinaryOperator 0x12381dc08 <col:19, col:29> 'int' '!='
    |     |-ImplicitCastExpr 0x12381dbf0 <col:19> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x12381dbd8 <col:19> 'unsigned char' <LValueToRValue>
    |     |   `-DeclRefExpr 0x12381dba0 <col:19> 'unsigned char' lvalue Var 0x124104208 'digit4' 'unsigned char'
    |     `-CharacterLiteral 0x12381dbc0 <col:29> 'int' 61
    `-ReturnStmt 0x12381dcd0 <line:37:3, col:10>
      `-ImplicitCastExpr 0x12381dcb8 <col:10> 'int' <LValueToRValue>
        `-DeclRefExpr 0x12381dc98 <col:10> 'int' lvalue Var 0x124104150 'len' 'int'
