TranslationUnitDecl 0x128055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1280564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x128055bd0 '__int128'
|-TypedefDecl 0x128056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x128055bf0 'unsigned __int128'
|-TypedefDecl 0x10300be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x10300bc00 'struct __NSConstantString_tag'
|   `-Record 0x128056580 '__NSConstantString_tag'
|-TypedefDecl 0x10300be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x128055d90 '__SVInt8_t'
|-TypedefDecl 0x10300bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x128055db0 '__SVInt16_t'
|-TypedefDecl 0x10300bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x128055dd0 '__SVInt32_t'
|-TypedefDecl 0x10300bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x128055df0 '__SVInt64_t'
|-TypedefDecl 0x10300c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x128055e10 '__SVUint8_t'
|-TypedefDecl 0x10300c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x128055e30 '__SVUint16_t'
|-TypedefDecl 0x10300c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x128055e50 '__SVUint32_t'
|-TypedefDecl 0x10300c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x128055e70 '__SVUint64_t'
|-TypedefDecl 0x10300c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x128055e90 '__SVFloat16_t'
|-TypedefDecl 0x10300c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x128055eb0 '__SVFloat32_t'
|-TypedefDecl 0x10300c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x128055ed0 '__SVFloat64_t'
|-TypedefDecl 0x10300c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x128055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x10300c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x128055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x10300c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x128055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x10300c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x128055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x10300c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x128055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x10300c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x128055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x10300c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x128055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x10300c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x128055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x10300c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x128055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x10300c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x128056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x10300c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x128056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x10300c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x128056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x10300c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x128056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x10300c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x128056090 '__clang_svint8x3_t'
|-TypedefDecl 0x10300c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1280560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x10300c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1280560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x10300c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1280560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x10300c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x128056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x10300ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x128056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x10300cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x128056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x10300cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x128056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x10300cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x128056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x10300d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1280561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x10300d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1280561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x10300d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1280561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x10300d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x128056210 '__clang_svint8x4_t'
|-TypedefDecl 0x10300d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x128056230 '__clang_svint16x4_t'
|-TypedefDecl 0x10300d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x128056250 '__clang_svint32x4_t'
|-TypedefDecl 0x10300d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x128056270 '__clang_svint64x4_t'
|-TypedefDecl 0x10300d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x128056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x10300d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1280562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x10300d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1280562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x10300d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1280562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x10300d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x128056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x10300d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x128056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x10300d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x128056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x10300d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x128056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x10300da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x128056390 '__SVBool_t'
|-TypedefDecl 0x10300da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1280563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x10300dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1280563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x10300db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1280563f0 '__SVCount_t'
|-TypedefDecl 0x10300dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x10300dbb0 'char *'
|   `-BuiltinType 0x1280556b0 'char'
|-TypedefDecl 0x10300dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x10300dbb0 'char *'
|   `-BuiltinType 0x1280556b0 'char'
|-FunctionDecl 0x10300e008 <dataset_diviso_filec/func21455_vuln.c:1:1, line:73:1> line:1:1 referenced invalid convert 'int (int, int, const char *, int, int)'
| |-ParmVarDecl 0x10300dcf0 <line:2:5, col:13> col:13 referenced invalid imOut 'int'
| |-ParmVarDecl 0x10300dd70 <col:20, col:28> col:28 invalid imIn 'int'
| |-ParmVarDecl 0x10300ddf0 <col:34, col:46> col:46 used mode 'const char *'
| |-ParmVarDecl 0x10300de70 <col:52, col:67> col:67 invalid palette 'int'
| |-ParmVarDecl 0x10300def0 <col:76, col:80> col:80 used dither 'int'
| `-CompoundStmt 0x128124aa0 <col:88, line:73:1>
|   |-DeclStmt 0x10300e158 <line:5:5, col:10>
|   | `-VarDecl 0x10300e0f0 <col:5, col:9> col:9 used y 'int'
|   |-IfStmt 0x10300e1e8 <line:7:5, line:9:5>
|   | |-UnaryOperator 0x10300e1a8 <line:7:9, col:10> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x10300e190 <col:10> '<dependent type>' contains-errors <LValueToRValue>
|   | |   `-RecoveryExpr 0x10300e170 <col:10> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x10300e1d8 <col:16, line:9:5>
|   |-IfStmt 0x103028240 <line:11:5, line:22:5> has_else
|   | |-UnaryOperator 0x10300e240 <line:11:9, col:10> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x10300e228 <col:10> 'const char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x10300e208 <col:10> 'const char *' lvalue ParmVar 0x10300ddf0 'mode' 'const char *'
|   | |-CompoundStmt 0x103027868 <col:16, line:17:5>
|   | | |-IfStmt 0x10300e318 <line:13:9, line:15:9>
|   | | | |-UnaryOperator 0x10300e2d8 <line:13:13, col:20> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | | | | `-ImplicitCastExpr 0x10300e2c0 <col:14, col:20> '<dependent type>' contains-errors <LValueToRValue>
|   | | | |   `-CXXDependentScopeMemberExpr 0x10300e278 <col:14, col:20> '<dependent type>' contains-errors lvalue ->palette
|   | | | |     `-RecoveryExpr 0x10300e258 <col:14> '<dependent type>' contains-errors lvalue
|   | | | `-CompoundStmt 0x10300e308 <col:29, line:15:9>
|   | | `-BinaryOperator 0x103027848 <line:16:9, col:31> 'const char *' contains-errors '='
|   | |   |-DeclRefExpr 0x10300e338 <col:9> 'const char *' lvalue ParmVar 0x10300ddf0 'mode' 'const char *'
|   | |   `-CXXDependentScopeMemberExpr 0x103027800 <col:16, col:31> '<dependent type>' contains-errors lvalue ->mode
|   | |     `-CXXDependentScopeMemberExpr 0x10300e378 <col:16, col:22> '<dependent type>' contains-errors lvalue ->palette
|   | |       `-RecoveryExpr 0x10300e358 <col:16> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x103028228 <line:17:12, line:22:5>
|   |   `-IfStmt 0x103028208 <line:19:9, line:21:9>
|   |     |-UnaryOperator 0x103027fd8 <line:19:13, col:37> '<dependent type>' contains-errors prefix '!' cannot overflow
|   |     | `-CallExpr 0x103027fa8 <col:14, col:37> '<dependent type>' contains-errors
|   |     |   |-DeclRefExpr 0x103027ed0 <col:14> 'int (const char *, const char *)' Function 0x103027cf0 'strcmp' 'int (const char *, const char *)'
|   |     |   |-CXXDependentScopeMemberExpr 0x103027f10 <col:21, col:27> '<dependent type>' contains-errors lvalue ->mode
|   |     |   | `-RecoveryExpr 0x103027ef0 <col:21> '<dependent type>' contains-errors lvalue
|   |     |   `-DeclRefExpr 0x103027f58 <col:33> 'const char *' lvalue ParmVar 0x10300ddf0 'mode' 'const char *'
|   |     `-CompoundStmt 0x1030281f0 <col:40, line:21:9>
|   |       `-ReturnStmt 0x1030281e0 <line:20:13, col:44>
|   |         `-CallExpr 0x1030281b0 <col:20, col:44> '<dependent type>' contains-errors
|   |           |-DeclRefExpr 0x103028150 <col:20> 'int ()' Function 0x103028098 'ImagingCopy2' 'int ()'
|   |           |-RecoveryExpr 0x103028170 <col:33> '<dependent type>' contains-errors lvalue
|   |           `-RecoveryExpr 0x103028190 <col:40> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x1030285c0 <line:26:5, line:28:5>
|   | |-BinaryOperator 0x1030283e0 <line:26:9, col:38> 'int' contains-errors '=='
|   | | |-CallExpr 0x103028390 <col:9, col:33> '<dependent type>' contains-errors
|   | | | |-DeclRefExpr 0x103028270 <col:9> 'int (const char *, const char *)' Function 0x103027cf0 'strcmp' 'int (const char *, const char *)'
|   | | | |-CXXDependentScopeMemberExpr 0x1030282b0 <col:16, col:22> '<dependent type>' contains-errors lvalue ->mode
|   | | | | `-RecoveryExpr 0x103028290 <col:16> '<dependent type>' contains-errors lvalue
|   | | | `-StringLiteral 0x103028340 <col:28> 'char[4]' lvalue "STR"
|   | | `-IntegerLiteral 0x1030283c0 <col:38> 'int' 0
|   | `-CompoundStmt 0x1030285a8 <col:41, line:28:5>
|   |   `-ReturnStmt 0x103028598 <line:27:9, col:45>
|   |     `-CallExpr 0x103028560 <col:16, col:45> '<dependent type>' contains-errors
|   |       |-DeclRefExpr 0x1030284e0 <col:16> 'int ()' Function 0x103028428 'frompalette' 'int ()'
|   |       |-RecoveryExpr 0x103028500 <col:28> '<dependent type>' contains-errors lvalue
|   |       |-RecoveryExpr 0x103028520 <col:35> '<dependent type>' contains-errors lvalue
|   |       `-DeclRefExpr 0x103028540 <col:41> 'const char *' lvalue ParmVar 0x10300ddf0 'mode' 'const char *'
|   |-IfStmt 0x1281235e8 <line:30:5, line:32:5>
|   | |-BinaryOperator 0x103028750 <line:30:9, col:32> 'int' '=='
|   | | |-CallExpr 0x1030286b8 <col:9, col:27> 'int'
|   | | | |-ImplicitCastExpr 0x1030286a0 <col:9> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1030285e0 <col:9> 'int (const char *, const char *)' Function 0x103027cf0 'strcmp' 'int (const char *, const char *)'
|   | | | |-ImplicitCastExpr 0x1030286e8 <col:16> 'const char *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x103028600 <col:16> 'const char *' lvalue ParmVar 0x10300ddf0 'mode' 'const char *'
|   | | | `-ImplicitCastExpr 0x103028718 <col:22> 'const char *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x103028700 <col:22> 'char *' <ArrayToPointerDecay>
|   | | |     `-StringLiteral 0x103028620 <col:22> 'char[4]' lvalue "STR"
|   | | `-IntegerLiteral 0x103028730 <col:32> 'int' 0
|   | `-CompoundStmt 0x1281235d0 <col:35, line:32:5>
|   |   `-ReturnStmt 0x1281235c0 <line:31:9, col:60>
|   |     `-CallExpr 0x128123578 <col:16, col:60> '<dependent type>' contains-errors
|   |       |-DeclRefExpr 0x1281234b8 <col:16> 'int ()' Function 0x128123400 'topalette' 'int ()'
|   |       |-RecoveryExpr 0x1281234d8 <col:26> '<dependent type>' contains-errors lvalue
|   |       |-RecoveryExpr 0x1281234f8 <col:33> '<dependent type>' contains-errors lvalue
|   |       |-DeclRefExpr 0x128123518 <col:39> 'const char *' lvalue ParmVar 0x10300ddf0 'mode' 'const char *'
|   |       |-RecoveryExpr 0x128123538 <col:45> '<dependent type>' contains-errors lvalue
|   |       `-DeclRefExpr 0x128123558 <col:54> 'int' lvalue ParmVar 0x10300def0 'dither' 'int'
|   |-IfStmt 0x128123980 <line:34:5, line:36:5>
|   | |-BinaryOperator 0x1281237a0 <line:34:9, col:42> 'int' '&&'
|   | | |-ImplicitCastExpr 0x128123788 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x128123608 <col:9> 'int' lvalue ParmVar 0x10300def0 'dither' 'int'
|   | | `-BinaryOperator 0x128123768 <col:19, col:42> 'int' '=='
|   | |   |-CallExpr 0x1281236d0 <col:19, col:37> 'int'
|   | |   | |-ImplicitCastExpr 0x1281236b8 <col:19> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   | |   | | `-DeclRefExpr 0x128123628 <col:19> 'int (const char *, const char *)' Function 0x103027cf0 'strcmp' 'int (const char *, const char *)'
|   | |   | |-ImplicitCastExpr 0x128123700 <col:26> 'const char *' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x128123648 <col:26> 'const char *' lvalue ParmVar 0x10300ddf0 'mode' 'const char *'
|   | |   | `-ImplicitCastExpr 0x128123730 <col:32> 'const char *' <NoOp>
|   | |   |   `-ImplicitCastExpr 0x128123718 <col:32> 'char *' <ArrayToPointerDecay>
|   | |   |     `-StringLiteral 0x128123668 <col:32> 'char[4]' lvalue "STR"
|   | |   `-IntegerLiteral 0x128123748 <col:42> 'int' 0
|   | `-CompoundStmt 0x128123968 <col:45, line:36:5>
|   |   `-ReturnStmt 0x128123958 <line:35:9, col:45>
|   |     `-CallExpr 0x128123920 <col:16, col:45> '<dependent type>' contains-errors
|   |       |-DeclRefExpr 0x1281238a0 <col:16> 'int ()' Function 0x1281237e8 'tobilevel' 'int ()'
|   |       |-RecoveryExpr 0x1281238c0 <col:26> '<dependent type>' contains-errors lvalue
|   |       |-RecoveryExpr 0x1281238e0 <col:33> '<dependent type>' contains-errors lvalue
|   |       `-DeclRefExpr 0x128123900 <col:39> 'int' lvalue ParmVar 0x10300def0 'dither' 'int'
|   |-BinaryOperator 0x128123a40 <line:40:5, col:15> '<dependent type>' contains-errors '='
|   | |-RecoveryExpr 0x1281239c0 <col:5> '<dependent type>' contains-errors lvalue
|   | | `-DeclRefExpr 0x1281239a0 <col:5> 'int (int, int, const char *, int, int)' Function 0x10300e008 'convert' 'int (int, int, const char *, int, int)'
|   | `-RecoveryExpr 0x128123a20 <col:15> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x128124340 <line:50:5, line:59:5>
|   | |-UnaryOperator 0x128123e18 <line:50:9, col:10> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x128123e00 <col:10> '<dependent type>' contains-errors <LValueToRValue>
|   | |   `-RecoveryExpr 0x128123de0 <col:10> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x128124320 <col:19, line:59:5>
|   |   |-DeclStmt 0x128123f38 <line:54:9, col:29>
|   |   | `-VarDecl 0x128123ed0 <col:9, col:28> col:21 used buf 'char[256]' static
|   |   `-CallExpr 0x1281242c8 <line:56:9, col:45> '<dependent type>' contains-errors
|   |     |-DeclRefExpr 0x1281241b0 <col:9> 'int (char *, const char *, ...)' Function 0x128123f98 'sprintf' 'int (char *, const char *, ...)'
|   |     |-DeclRefExpr 0x1281241d0 <col:17> 'char[256]' lvalue Var 0x128123ed0 'buf' 'char[256]'
|   |     |-StringLiteral 0x1281241f0 <col:22> 'char[4]' lvalue "STR"
|   |     |-CXXDependentScopeMemberExpr 0x128124230 <col:29, col:35> '<dependent type>' contains-errors lvalue ->mode
|   |     | `-RecoveryExpr 0x128124210 <col:29> '<dependent type>' contains-errors lvalue
|   |     `-DeclRefExpr 0x128124278 <col:41> 'const char *' lvalue ParmVar 0x10300ddf0 'mode' 'const char *'
|   |-BinaryOperator 0x128124570 <line:61:5, col:47> '<dependent type>' contains-errors '='
|   | |-RecoveryExpr 0x128124380 <col:5> '<dependent type>' contains-errors lvalue
|   | | `-DeclRefExpr 0x128124360 <col:5> 'int' lvalue ParmVar 0x10300dcf0 'imOut' 'int'
|   | `-CallExpr 0x128124538 <col:13, col:47> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x1281244b8 <col:13> 'int ()' Function 0x128124400 'ImagingNew2Dirty' 'int ()'
|   |   |-DeclRefExpr 0x1281244d8 <col:30> 'const char *' lvalue ParmVar 0x10300ddf0 'mode' 'const char *'
|   |   |-RecoveryExpr 0x1281244f8 <col:36> '<dependent type>' contains-errors lvalue
|   |   `-RecoveryExpr 0x128124518 <col:43> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x1281245f0 <line:62:5, line:64:5>
|   | |-UnaryOperator 0x1281245c8 <line:62:9, col:10> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x1281245b0 <col:10> '<dependent type>' contains-errors <LValueToRValue>
|   | |   `-RecoveryExpr 0x128124590 <col:10> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x1281245e0 <col:17, line:64:5>
|   |-ForStmt 0x128124938 <line:67:5, line:69:5>
|   | |-BinaryOperator 0x128124750 <line:67:10, col:14> 'int' '='
|   | | |-DeclRefExpr 0x128124710 <col:10> 'int' lvalue Var 0x10300e0f0 'y' 'int'
|   | | `-IntegerLiteral 0x128124730 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1281247f8 <col:17, col:27> 'int' contains-errors '<'
|   | | |-DeclRefExpr 0x128124770 <col:17> 'int' lvalue Var 0x10300e0f0 'y' 'int'
|   | | `-CXXDependentScopeMemberExpr 0x1281247b0 <col:21, col:27> '<dependent type>' contains-errors lvalue ->ysize
|   | |   `-RecoveryExpr 0x128124790 <col:21> '<dependent type>' contains-errors lvalue
|   | |-UnaryOperator 0x128124838 <col:34, col:35> 'int' postfix '++'
|   | | `-DeclRefExpr 0x128124818 <col:34> 'int' lvalue Var 0x10300e0f0 'y' 'int'
|   | `-CompoundStmt 0x128124928 <col:39, line:69:5>
|   `-ReturnStmt 0x128124a90 <line:72:5, col:12>
|     `-RecoveryExpr 0x128124a70 <col:12> '<dependent type>' contains-errors lvalue
|-FunctionDecl 0x103027cf0 <line:19:14> col:14 implicit used strcmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x103027df0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x103027e58 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x103027d98 <<invalid sloc>> Implicit 887
`-FunctionDecl 0x128123f98 <line:56:9> col:9 implicit used sprintf 'int (char *, const char *, ...)' extern
  |-ParmVarDecl 0x128124098 <<invalid sloc>> <invalid sloc> 'char *'
  |-ParmVarDecl 0x128124100 <<invalid sloc>> <invalid sloc> 'const char *'
  |-BuiltinAttr 0x128124040 <<invalid sloc>> Implicit 906
  `-FormatAttr 0x128124178 <col:9> Implicit printf 2 3
