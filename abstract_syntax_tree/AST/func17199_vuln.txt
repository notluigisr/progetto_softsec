TranslationUnitDecl 0x140055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1400564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x140055bd0 '__int128'
|-TypedefDecl 0x140056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x140055bf0 'unsigned __int128'
|-TypedefDecl 0x140126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x140126000 'struct __NSConstantString_tag'
|   `-Record 0x140056580 '__NSConstantString_tag'
|-TypedefDecl 0x140126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x140055d90 '__SVInt8_t'
|-TypedefDecl 0x140126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x140055db0 '__SVInt16_t'
|-TypedefDecl 0x140126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x140055dd0 '__SVInt32_t'
|-TypedefDecl 0x1401263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x140055df0 '__SVInt64_t'
|-TypedefDecl 0x140126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x140055e10 '__SVUint8_t'
|-TypedefDecl 0x1401264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x140055e30 '__SVUint16_t'
|-TypedefDecl 0x140126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x140055e50 '__SVUint32_t'
|-TypedefDecl 0x140126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x140055e70 '__SVUint64_t'
|-TypedefDecl 0x1401265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x140055e90 '__SVFloat16_t'
|-TypedefDecl 0x140126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x140055eb0 '__SVFloat32_t'
|-TypedefDecl 0x1401266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x140055ed0 '__SVFloat64_t'
|-TypedefDecl 0x140126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x140055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x140126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x140055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1401267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x140055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x140126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x140055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1401268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x140055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x140126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x140055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x140126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x140055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1401269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x140055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x140126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x140055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x140126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x140056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x140126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x140056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x140126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x140056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x140126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x140056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x140126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x140056090 '__clang_svint8x3_t'
|-TypedefDecl 0x140126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1400560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x140126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1400560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x140126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1400560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x140126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x140056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x140126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x140056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x140126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x140056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x140126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x140056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x140126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x140056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x140127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1400561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x140127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1400561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1401278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1400561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x140127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x140056210 '__clang_svint8x4_t'
|-TypedefDecl 0x1401279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x140056230 '__clang_svint16x4_t'
|-TypedefDecl 0x140127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x140056250 '__clang_svint32x4_t'
|-TypedefDecl 0x140127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x140056270 '__clang_svint64x4_t'
|-TypedefDecl 0x140127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x140056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x140127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1400562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x140127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1400562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x140127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1400562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x140127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x140056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x140127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x140056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x140127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x140056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x140127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x140056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x140127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x140056390 '__SVBool_t'
|-TypedefDecl 0x140127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1400563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x140127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1400563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x140127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1400563f0 '__SVCount_t'
|-TypedefDecl 0x140127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x140127fb0 'char *'
|   `-BuiltinType 0x1400556b0 'char'
|-TypedefDecl 0x140128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x140127fb0 'char *'
|   `-BuiltinType 0x1400556b0 'char'
`-FunctionDecl 0x1401281c8 <dataset_diviso_filec/func17199_vuln.c:1:1, line:22:1> line:1:1 append_command 'int (char *)'
  |-ParmVarDecl 0x1401280f0 <col:16, col:24> col:24 used cmd 'char *'
  `-CompoundStmt 0x140142d48 <line:2:1, line:22:1>
    |-DeclStmt 0x140128378 <line:3:5, col:20>
    | `-VarDecl 0x1401282d8 <col:5, col:17> col:13 used s 'char *' cinit
    |   `-ImplicitCastExpr 0x140128360 <col:17> 'char *' <LValueToRValue>
    |     `-DeclRefExpr 0x140128340 <col:17> 'char *' lvalue ParmVar 0x1401280f0 'cmd' 'char *'
    |-DeclStmt 0x140128410 <line:4:5, col:14>
    | `-VarDecl 0x1401283a8 <col:5, col:13> col:13 used d 'char *'
    |-CallExpr 0x140128630 <line:6:5, col:25> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x140128540 <col:5> 'int ()' Function 0x140128488 'STRCAT' 'int ()'
    | |-RecoveryExpr 0x140128610 <col:12> '<dependent type>' contains-errors lvalue
    | `-StringLiteral 0x1401285c0 <col:20> 'char[4]' lvalue "STR"
    |-BinaryOperator 0x140140aa8 <line:7:5, col:31> 'char *' contains-errors '='
    | |-DeclRefExpr 0x140128660 <col:5> 'char *' lvalue Var 0x1401283a8 'd' 'char *'
    | `-BinaryOperator 0x140140a88 <col:9, col:31> '<dependent type>' contains-errors '+'
    |   |-RecoveryExpr 0x140140a20 <col:9> '<dependent type>' contains-errors lvalue
    |   `-CallExpr 0x140140a60 <col:18, col:31> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x140128778 <col:18> 'int ()' Function 0x1401286c0 'STRLEN' 'int ()'
    |     `-RecoveryExpr 0x140140a40 <col:25> '<dependent type>' contains-errors lvalue
    |-WhileStmt 0x140142c00 <line:8:5, line:20:5>
    | |-BinaryOperator 0x140140d80 <line:8:12, col:42> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x140140cc0 <col:12, col:18> 'int' contains-errors '!='
    | | | |-UnaryOperator 0x140140c88 <col:12, col:13> 'char' lvalue prefix '*' cannot overflow
    | | | | `-ImplicitCastExpr 0x140140c70 <col:13> 'char *' <LValueToRValue>
    | | | |   `-DeclRefExpr 0x140140ac8 <col:13> 'char *' lvalue Var 0x1401282d8 's' 'char *'
    | | | `-RecoveryExpr 0x140140ca0 <col:18> '<dependent type>' contains-errors lvalue
    | | `-BinaryOperator 0x140140d60 <col:25, col:42> 'int' contains-errors '<'
    | |   |-BinaryOperator 0x140140d20 <col:25, col:38> '<dependent type>' contains-errors '+'
    | |   | |-BinaryOperator 0x140140d00 <col:25, col:29> '<dependent type>' contains-errors '-'
    | |   | | |-DeclRefExpr 0x140140b50 <col:25> 'char *' lvalue Var 0x1401283a8 'd' 'char *'
    | |   | | `-RecoveryExpr 0x140140ce0 <col:29> '<dependent type>' contains-errors lvalue
    | |   | `-IntegerLiteral 0x140140ba8 <col:38> 'int' 5
    | |   `-RecoveryExpr 0x140140d40 <col:42> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x1401419e8 <line:9:5, line:20:5>
    |   `-IfStmt 0x1401419b8 <line:10:2, line:19:23> has_else
    |     |-ConditionalOperator 0x1401412a8 <line:10:6, col:56> '<dependent type>' contains-errors
    |     | |-RecoveryExpr 0x1401410b8 <col:6> '<dependent type>' contains-errors lvalue
    |     | |-ParenExpr 0x140141208 <col:17, col:46> 'int'
    |     | | `-BinaryOperator 0x1401411e8 <col:18, col:42> 'int' '&&'
    |     | |   |-BinaryOperator 0x140141140 <col:18, col:26> 'int' '=='
    |     | |   | |-ImplicitCastExpr 0x140141128 <col:18, col:21> 'int' <IntegralCast>
    |     | |   | | `-ImplicitCastExpr 0x140141110 <col:18, col:21> 'char' <LValueToRValue>
    |     | |   | |   `-ArraySubscriptExpr 0x1401410f0 <col:18, col:21> 'char' lvalue
    |     | |   | |     |-ImplicitCastExpr 0x1401410d8 <col:18> 'char *' <LValueToRValue>
    |     | |   | |     | `-DeclRefExpr 0x140140db8 <col:18> 'char *' lvalue Var 0x1401282d8 's' 'char *'
    |     | |   | |     `-IntegerLiteral 0x140140dd8 <col:20> 'int' 0
    |     | |   | `-IntegerLiteral 0x140140e30 <col:26> 'int' 194
    |     | |   `-BinaryOperator 0x1401411c8 <col:34, col:42> 'int' '=='
    |     | |     |-ImplicitCastExpr 0x1401411b0 <col:34, col:37> 'int' <IntegralCast>
    |     | |     | `-ImplicitCastExpr 0x140141198 <col:34, col:37> 'char' <LValueToRValue>
    |     | |     |   `-ArraySubscriptExpr 0x140141178 <col:34, col:37> 'char' lvalue
    |     | |     |     |-ImplicitCastExpr 0x140141160 <col:34> 'char *' <LValueToRValue>
    |     | |     |     | `-DeclRefExpr 0x140140ea0 <col:34> 'char *' lvalue Var 0x1401282d8 's' 'char *'
    |     | |     |     `-IntegerLiteral 0x140140ec0 <col:36> 'int' 1
    |     | |     `-IntegerLiteral 0x140140f18 <col:42> 'int' 160
    |     | `-BinaryOperator 0x140141288 <col:50, col:56> 'int' '=='
    |     |   |-ImplicitCastExpr 0x140141270 <col:50, col:51> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x140141258 <col:50, col:51> 'char' <LValueToRValue>
    |     |   |   `-UnaryOperator 0x140141240 <col:50, col:51> 'char' lvalue prefix '*' cannot overflow
    |     |   |     `-ImplicitCastExpr 0x140141228 <col:51> 'char *' <LValueToRValue>
    |     |   |       `-DeclRefExpr 0x140140fc8 <col:51> 'char *' lvalue Var 0x1401282d8 's' 'char *'
    |     |   `-IntegerLiteral 0x140141018 <col:56> 'int' 160
    |     |-CompoundStmt 0x140141688 <line:11:2, line:15:2>
    |     | |-CompoundAssignOperator 0x140141400 <line:12:6, col:26> 'char *' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    |     | | |-DeclRefExpr 0x1401412d8 <col:6> 'char *' lvalue Var 0x1401282d8 's' 'char *'
    |     | | `-ConditionalOperator 0x1401413d0 <col:11, col:26> '<dependent type>' contains-errors
    |     | |   |-RecoveryExpr 0x1401413b0 <col:11> '<dependent type>' contains-errors lvalue
    |     | |   |-IntegerLiteral 0x140141310 <col:22> 'int' 2
    |     | |   `-IntegerLiteral 0x140141330 <col:26> 'int' 1
    |     | |-CallExpr 0x1401415b8 <line:13:6, col:21> 'int'
    |     | | |-ImplicitCastExpr 0x1401415a0 <col:6> 'int (*)()' <FunctionToPointerDecay>
    |     | | | `-DeclRefExpr 0x140141510 <col:6> 'int ()' Function 0x140141458 'STRCPY' 'int ()'
    |     | | |-ImplicitCastExpr 0x1401415e8 <col:13> 'char *' <LValueToRValue>
    |     | | | `-DeclRefExpr 0x140141530 <col:13> 'char *' lvalue Var 0x1401283a8 'd' 'char *'
    |     | | `-ImplicitCastExpr 0x140141600 <col:16> 'char *' <ArrayToPointerDecay>
    |     | |   `-StringLiteral 0x140141550 <col:16> 'char[4]' lvalue "STR"
    |     | `-CompoundAssignOperator 0x140141658 <line:14:6, col:11> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
    |     |   |-DeclRefExpr 0x140141618 <col:6> 'char *' lvalue Var 0x1401283a8 'd' 'char *'
    |     |   `-IntegerLiteral 0x140141638 <col:11> 'int' 4
    |     `-IfStmt 0x140141988 <line:16:7, line:19:23> has_else
    |       |-RecoveryExpr 0x1401417a8 <line:16:11, col:48> '_Bool' contains-errors
    |       |-BreakStmt 0x1401417c8 <line:17:6>
    |       `-CallExpr 0x140141928 <line:19:6, col:23> 'int'
    |         |-ImplicitCastExpr 0x140141910 <col:6> 'int (*)()' <FunctionToPointerDecay>
    |         | `-DeclRefExpr 0x1401418b0 <col:6> 'int ()' Function 0x1401417f8 'MB_COPY_CHAR' 'int ()'
    |         |-ImplicitCastExpr 0x140141958 <col:19> 'char *' <LValueToRValue>
    |         | `-DeclRefExpr 0x1401418d0 <col:19> 'char *' lvalue Var 0x1401282d8 's' 'char *'
    |         `-ImplicitCastExpr 0x140141970 <col:22> 'char *' <LValueToRValue>
    |           `-DeclRefExpr 0x1401418f0 <col:22> 'char *' lvalue Var 0x1401283a8 'd' 'char *'
    `-BinaryOperator 0x140142d28 <line:21:5, col:10> 'char' contains-errors '='
      |-UnaryOperator 0x140142cf0 <col:5, col:6> 'char' lvalue prefix '*' cannot overflow
      | `-ImplicitCastExpr 0x140142cd8 <col:6> 'char *' <LValueToRValue>
      |   `-DeclRefExpr 0x140142c20 <col:6> 'char *' lvalue Var 0x1401283a8 'd' 'char *'
      `-RecoveryExpr 0x140142d08 <col:10> '<dependent type>' contains-errors lvalue
