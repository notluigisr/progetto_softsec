TranslationUnitDecl 0x13b055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x13b0564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x13b055bd0 '__int128'
|-TypedefDecl 0x13b056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x13b055bf0 'unsigned __int128'
|-TypedefDecl 0x13b126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13b126000 'struct __NSConstantString_tag'
|   `-Record 0x13b056580 '__NSConstantString_tag'
|-TypedefDecl 0x13b126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x13b055d90 '__SVInt8_t'
|-TypedefDecl 0x13b126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x13b055db0 '__SVInt16_t'
|-TypedefDecl 0x13b126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x13b055dd0 '__SVInt32_t'
|-TypedefDecl 0x13b1263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x13b055df0 '__SVInt64_t'
|-TypedefDecl 0x13b126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x13b055e10 '__SVUint8_t'
|-TypedefDecl 0x13b1264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x13b055e30 '__SVUint16_t'
|-TypedefDecl 0x13b126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x13b055e50 '__SVUint32_t'
|-TypedefDecl 0x13b126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x13b055e70 '__SVUint64_t'
|-TypedefDecl 0x13b1265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x13b055e90 '__SVFloat16_t'
|-TypedefDecl 0x13b126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x13b055eb0 '__SVFloat32_t'
|-TypedefDecl 0x13b1266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x13b055ed0 '__SVFloat64_t'
|-TypedefDecl 0x13b126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x13b055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13b126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x13b055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13b1267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x13b055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13b126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x13b055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13b1268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x13b055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13b126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x13b055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13b126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x13b055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13b1269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x13b055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13b126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x13b055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13b126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x13b056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13b126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x13b056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13b126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x13b056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13b126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x13b056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13b126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x13b056090 '__clang_svint8x3_t'
|-TypedefDecl 0x13b126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x13b0560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13b126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x13b0560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13b126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x13b0560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13b126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x13b056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13b126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x13b056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13b126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x13b056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13b126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x13b056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13b126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x13b056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13b127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x13b0561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13b127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x13b0561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13b1278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x13b0561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13b127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x13b056210 '__clang_svint8x4_t'
|-TypedefDecl 0x13b1279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x13b056230 '__clang_svint16x4_t'
|-TypedefDecl 0x13b127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x13b056250 '__clang_svint32x4_t'
|-TypedefDecl 0x13b127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x13b056270 '__clang_svint64x4_t'
|-TypedefDecl 0x13b127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x13b056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13b127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x13b0562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13b127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x13b0562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13b127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x13b0562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13b127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x13b056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13b127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x13b056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13b127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x13b056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13b127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x13b056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13b127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x13b056390 '__SVBool_t'
|-TypedefDecl 0x13b127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x13b0563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13b127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x13b0563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13b127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x13b0563f0 '__SVCount_t'
|-TypedefDecl 0x13b127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13b127fb0 'char *'
|   `-BuiltinType 0x13b0556b0 'char'
|-TypedefDecl 0x13b128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13b127fb0 'char *'
|   `-BuiltinType 0x13b0556b0 'char'
|-FunctionDecl 0x13b1282c8 <dataset_diviso_filec/func18769_nonvuln.c:1:1, line:49:1> line:1:12 unmount_fuse_locked 'int (const char *, int, int)' static
| |-ParmVarDecl 0x13b1280d8 <col:32, col:44> col:44 used mnt 'const char *'
| |-ParmVarDecl 0x13b128158 <col:49, col:53> col:53 used quiet 'int'
| |-ParmVarDecl 0x13b1281d8 <col:60, col:64> col:64 used lazy 'int'
| `-CompoundStmt 0x13b145468 <line:2:1, line:49:1>
|   |-DeclStmt 0x13b128450 <line:3:2, col:9>
|   | `-VarDecl 0x13b1283e8 <col:2, col:6> col:6 used res 'int'
|   |-DeclStmt 0x13b1284e8 <line:4:2, col:12>
|   | `-VarDecl 0x13b128480 <col:2, col:8> col:8 used copy 'char *'
|   |-DeclStmt 0x13b128580 <line:5:2, col:18>
|   | `-VarDecl 0x13b128518 <col:2, col:14> col:14 used last 'const char *'
|   |-DeclStmt 0x13b128708 <line:6:2, col:45>
|   | `-VarDecl 0x13b1285b0 <col:2, col:44> col:6 used umount_flags 'int' cinit
|   |   `-ConditionalOperator 0x13b1286d8 <col:21, col:44> '<dependent type>' contains-errors
|   |     |-DeclRefExpr 0x13b128618 <col:21> 'int' lvalue ParmVar 0x13b1281d8 'lazy' 'int'
|   |     |-RecoveryExpr 0x13b1286b8 <col:28> '<dependent type>' contains-errors lvalue
|   |     `-IntegerLiteral 0x13b128668 <col:44> 'int' 0
|   |-IfStmt 0x13b141c98 <line:8:2, line:12:2>
|   | |-BinaryOperator 0x13b141968 <line:8:6, col:18> 'int' '!='
|   | | |-CallExpr 0x13b141928 <col:6, col:13> 'int'
|   | | | `-ImplicitCastExpr 0x13b141910 <col:6> 'int (*)()' <FunctionToPointerDecay>
|   | | |   `-DeclRefExpr 0x13b1418b8 <col:6> 'int ()' Function 0x13b141800 'getuid' 'int ()'
|   | | `-IntegerLiteral 0x13b141948 <col:18> 'int' 0
|   | `-CompoundStmt 0x13b141c78 <col:21, line:12:2>
|   |   |-BinaryOperator 0x13b141b60 <line:9:3, col:31> 'int' '='
|   |   | |-DeclRefExpr 0x13b141988 <col:3> 'int' lvalue Var 0x13b1283e8 'res' 'int'
|   |   | `-CallExpr 0x13b141b00 <col:9, col:31> 'int'
|   |   |   |-ImplicitCastExpr 0x13b141ae8 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x13b141a88 <col:9> 'int ()' Function 0x13b1419d0 'may_unmount' 'int ()'
|   |   |   |-ImplicitCastExpr 0x13b141b30 <col:21> 'const char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x13b141aa8 <col:21> 'const char *' lvalue ParmVar 0x13b1280d8 'mnt' 'const char *'
|   |   |   `-ImplicitCastExpr 0x13b141b48 <col:26> 'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x13b141ac8 <col:26> 'int' lvalue ParmVar 0x13b128158 'quiet' 'int'
|   |   `-IfStmt 0x13b141c58 <line:10:3, line:11:12>
|   |     |-BinaryOperator 0x13b141bf0 <line:10:7, col:15> 'int' '=='
|   |     | |-ImplicitCastExpr 0x13b141bd8 <col:7> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x13b141b80 <col:7> 'int' lvalue Var 0x13b1283e8 'res' 'int'
|   |     | `-UnaryOperator 0x13b141bc0 <col:14, col:15> 'int' prefix '-'
|   |     |   `-IntegerLiteral 0x13b141ba0 <col:15> 'int' 1
|   |     `-ReturnStmt 0x13b141c48 <line:11:4, col:12>
|   |       `-UnaryOperator 0x13b141c30 <col:11, col:12> 'int' prefix '-'
|   |         `-IntegerLiteral 0x13b141c10 <col:12> 'int' 1
|   |-BinaryOperator 0x13b142398 <line:14:2, col:19> 'char *' '='
|   | |-DeclRefExpr 0x13b141cb8 <col:2> 'char *' lvalue Var 0x13b128480 'copy' 'char *'
|   | `-CallExpr 0x13b142358 <col:9, col:19> 'char *'
|   |   |-ImplicitCastExpr 0x13b142340 <col:9> 'char *(*)(const char *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x13b1422b0 <col:9> 'char *(const char *)' Function 0x13b142140 'strdup' 'char *(const char *)'
|   |   `-ImplicitCastExpr 0x13b142380 <col:16> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x13b1422d0 <col:16> 'const char *' lvalue ParmVar 0x13b1280d8 'mnt' 'const char *'
|   |-IfStmt 0x13b142700 <line:15:2, line:18:2>
|   | |-BinaryOperator 0x13b142430 <line:15:6, col:14> 'int' contains-errors '=='
|   | | |-DeclRefExpr 0x13b1423b8 <col:6> 'char *' lvalue Var 0x13b128480 'copy' 'char *'
|   | | `-RecoveryExpr 0x13b142410 <col:14> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x13b1426e0 <col:20, line:18:2>
|   |   |-CallExpr 0x13b142660 <line:16:3, col:34> '<dependent type>' contains-errors
|   |   | |-DeclRefExpr 0x13b142530 <col:3> 'int ()' Function 0x13b142478 'fprintf' 'int ()'
|   |   | |-RecoveryExpr 0x13b142620 <col:11> '<dependent type>' contains-errors lvalue
|   |   | |-StringLiteral 0x13b1425b0 <col:19> 'char[4]' lvalue "STR"
|   |   | `-RecoveryExpr 0x13b142640 <col:26> '<dependent type>' contains-errors lvalue
|   |   `-ReturnStmt 0x13b1426d0 <line:17:3, col:11>
|   |     `-UnaryOperator 0x13b1426b8 <col:10, col:11> 'int' prefix '-'
|   |       `-IntegerLiteral 0x13b142698 <col:11> 'int' 1
|   |-BinaryOperator 0x13b143bc8 <line:20:2, col:35> 'int' '='
|   | |-DeclRefExpr 0x13b142720 <col:2> 'int' lvalue Var 0x13b1283e8 'res' 'int'
|   | `-CallExpr 0x13b143b80 <col:8, col:35> 'int'
|   |   |-ImplicitCastExpr 0x13b143b68 <col:8> 'int (*)()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x13b143ab8 <col:8> 'int ()' Function 0x13b143a00 'chdir_to_parent' 'int ()'
|   |   |-ImplicitCastExpr 0x13b143bb0 <col:24> 'char *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x13b143ad8 <col:24> 'char *' lvalue Var 0x13b128480 'copy' 'char *'
|   |   `-UnaryOperator 0x13b143b50 <col:30, col:31> 'const char **' prefix '&' cannot overflow
|   |     `-DeclRefExpr 0x13b143af8 <col:31> 'const char *' lvalue Var 0x13b128518 'last' 'const char *'
|   |-IfStmt 0x13b143ce0 <line:21:2, line:22:8>
|   | |-BinaryOperator 0x13b143c58 <line:21:6, col:14> 'int' '=='
|   | | |-ImplicitCastExpr 0x13b143c40 <col:6> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x13b143be8 <col:6> 'int' lvalue Var 0x13b1283e8 'res' 'int'
|   | | `-UnaryOperator 0x13b143c28 <col:13, col:14> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x13b143c08 <col:14> 'int' 1
|   | `-GotoStmt 0x13b143cc8 <line:22:3, col:8> 'out' 0x13b143c78
|   |-IfStmt 0x13b1441e8 <line:24:2, line:30:2> has_else
|   | |-CallExpr 0x13b143e18 <line:24:6, col:30> 'int'
|   | | `-ImplicitCastExpr 0x13b143e00 <col:6> 'int (*)()' <FunctionToPointerDecay>
|   | |   `-DeclRefExpr 0x13b143de0 <col:6> 'int ()' Function 0x13b143d28 'umount_nofollow_support' 'int ()'
|   | |-CompoundStmt 0x13b143ef0 <col:33, line:26:2>
|   | | `-CompoundAssignOperator 0x13b143ec0 <line:25:3, col:19> 'int' contains-errors '|=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   | |   |-DeclRefExpr 0x13b143e38 <col:3> 'int' contains-errors lvalue Var 0x13b1285b0 'umount_flags' 'int'
|   | |   `-RecoveryExpr 0x13b143ea0 <col:19> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x13b1441c8 <line:26:9, line:30:2>
|   |   |-BinaryOperator 0x13b1440e0 <line:27:3, col:33> 'int' '='
|   |   | |-DeclRefExpr 0x13b143f08 <col:3> 'int' lvalue Var 0x13b1283e8 'res' 'int'
|   |   | `-CallExpr 0x13b144080 <col:9, col:33> 'int'
|   |   |   |-ImplicitCastExpr 0x13b144068 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x13b144008 <col:9> 'int ()' Function 0x13b143f50 'check_is_mount' 'int ()'
|   |   |   |-ImplicitCastExpr 0x13b1440b0 <col:24> 'const char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x13b144028 <col:24> 'const char *' lvalue Var 0x13b128518 'last' 'const char *'
|   |   |   `-ImplicitCastExpr 0x13b1440c8 <col:30> 'const char *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x13b144048 <col:30> 'const char *' lvalue ParmVar 0x13b1280d8 'mnt' 'const char *'
|   |   `-IfStmt 0x13b1441a8 <line:28:3, line:29:9>
|   |     |-BinaryOperator 0x13b144170 <line:28:7, col:15> 'int' '=='
|   |     | |-ImplicitCastExpr 0x13b144158 <col:7> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x13b144100 <col:7> 'int' lvalue Var 0x13b1283e8 'res' 'int'
|   |     | `-UnaryOperator 0x13b144140 <col:14, col:15> 'int' prefix '-'
|   |     |   `-IntegerLiteral 0x13b144120 <col:15> 'int' 1
|   |     `-GotoStmt 0x13b144190 <line:29:4, col:9> 'out' 0x13b143c78
|   |-BinaryOperator 0x13b1443f0 <line:32:2, col:34> 'int' contains-errors '='
|   | |-DeclRefExpr 0x13b144218 <col:2> 'int' lvalue Var 0x13b1283e8 'res' 'int'
|   | `-CallExpr 0x13b144390 <col:8, col:34> 'int' contains-errors
|   |   |-ImplicitCastExpr 0x13b144378 <col:8> 'int (*)()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x13b144318 <col:8> 'int ()' Function 0x13b144260 'umount2' 'int ()'
|   |   |-ImplicitCastExpr 0x13b1443c0 <col:16> 'const char *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x13b144338 <col:16> 'const char *' lvalue Var 0x13b128518 'last' 'const char *'
|   |   `-ImplicitCastExpr 0x13b1443d8 <col:22> 'int' contains-errors <LValueToRValue>
|   |     `-DeclRefExpr 0x13b144358 <col:22> 'int' contains-errors lvalue Var 0x13b1285b0 'umount_flags' 'int'
|   |-IfStmt 0x13b144908 <line:33:2, line:36:2>
|   | |-BinaryOperator 0x13b1444f0 <line:33:6, col:20> 'int' '&&'
|   | | |-BinaryOperator 0x13b144480 <col:6, col:14> 'int' '=='
|   | | | |-ImplicitCastExpr 0x13b144468 <col:6> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x13b144410 <col:6> 'int' lvalue Var 0x13b1283e8 'res' 'int'
|   | | | `-UnaryOperator 0x13b144450 <col:13, col:14> 'int' prefix '-'
|   | | |   `-IntegerLiteral 0x13b144430 <col:14> 'int' 1
|   | | `-UnaryOperator 0x13b1444d8 <col:19, col:20> 'int' prefix '!' cannot overflow
|   | |   `-ImplicitCastExpr 0x13b1444c0 <col:20> 'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x13b1444a0 <col:20> 'int' lvalue ParmVar 0x13b128158 'quiet' 'int'
|   | `-CompoundStmt 0x13b1448f0 <col:27, line:36:2>
|   |   `-CallExpr 0x13b1448a8 <line:34:3, line:35:34> '<dependent type>' contains-errors
|   |     |-DeclRefExpr 0x13b144510 <line:34:3> 'int ()' Function 0x13b142478 'fprintf' 'int ()'
|   |     |-RecoveryExpr 0x13b144808 <col:11> '<dependent type>' contains-errors lvalue
|   |     |-StringLiteral 0x13b144548 <col:19> 'char[4]' lvalue "STR"
|   |     |-RecoveryExpr 0x13b144828 <line:35:4> '<dependent type>' contains-errors lvalue
|   |     |-DeclRefExpr 0x13b144580 <col:14> 'const char *' lvalue ParmVar 0x13b1280d8 'mnt' 'const char *'
|   |     `-CallExpr 0x13b144880 <col:19, col:33> '<dependent type>' contains-errors
|   |       |-DeclRefExpr 0x13b144748 <col:19> 'char *(int)' Function 0x13b1445d8 'strerror' 'char *(int)'
|   |       `-RecoveryExpr 0x13b144848 <col:28> '<dependent type>' contains-errors lvalue
|   |-LabelStmt 0x13b145020 <line:38:1, line:40:11> 'out'
|   | `-IfStmt 0x13b145000 <line:39:2, line:40:11>
|   |   |-BinaryOperator 0x13b144998 <line:39:6, col:14> 'int' '=='
|   |   | |-ImplicitCastExpr 0x13b144980 <col:6> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x13b144928 <col:6> 'int' lvalue Var 0x13b1283e8 'res' 'int'
|   |   | `-UnaryOperator 0x13b144968 <col:13, col:14> 'int' prefix '-'
|   |   |   `-IntegerLiteral 0x13b144948 <col:14> 'int' 1
|   |   `-ReturnStmt 0x13b1449f0 <line:40:3, col:11>
|   |     `-UnaryOperator 0x13b1449d8 <col:10, col:11> 'int' prefix '-'
|   |       `-IntegerLiteral 0x13b1449b8 <col:11> 'int' 1
|   |-BinaryOperator 0x13b1451d8 <line:42:2, col:19> 'int' '='
|   | |-DeclRefExpr 0x13b145040 <col:2> 'int' lvalue Var 0x13b1283e8 'res' 'int'
|   | `-CallExpr 0x13b145198 <col:8, col:19> 'int'
|   |   |-ImplicitCastExpr 0x13b145180 <col:8> 'int (*)()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x13b145140 <col:8> 'int ()' Function 0x13b145088 'chdir' 'int ()'
|   |   `-ImplicitCastExpr 0x13b1451c0 <col:14> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x13b145160 <col:14> 'char[4]' lvalue "STR"
|   `-IfStmt 0x13b145328 <line:43:2, line:46:2>
|     |-BinaryOperator 0x13b145268 <line:43:6, col:14> 'int' '=='
|     | |-ImplicitCastExpr 0x13b145250 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x13b1451f8 <col:6> 'int' lvalue Var 0x13b1283e8 'res' 'int'
|     | `-UnaryOperator 0x13b145238 <col:13, col:14> 'int' prefix '-'
|     |   `-IntegerLiteral 0x13b145218 <col:14> 'int' 1
|     `-CompoundStmt 0x13b145310 <col:17, line:46:2>
|       `-ReturnStmt 0x13b145300 <line:45:3, col:11>
|         `-UnaryOperator 0x13b1452e8 <col:10, col:11> 'int' prefix '-'
|           `-IntegerLiteral 0x13b1452c8 <col:11> 'int' 1
|-FunctionDecl 0x13b142140 <line:14:9> col:9 implicit used strdup 'char *(const char *)' extern
| |-ParmVarDecl 0x13b142240 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x13b1421e8 <<invalid sloc>> Implicit 950
`-FunctionDecl 0x13b1445d8 <line:35:19> col:19 implicit used strerror 'char *(int)' extern
  |-ParmVarDecl 0x13b1446d8 <<invalid sloc>> <invalid sloc> 'int'
  `-BuiltinAttr 0x13b144680 <<invalid sloc>> Implicit 901
