TranslationUnitDecl 0x147855208 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1478560b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1478557d0 '__int128'
|-TypedefDecl 0x147856128 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1478557f0 'unsigned __int128'
|-TypedefDecl 0x150030e30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x150030c00 'struct __NSConstantString_tag'
|   `-Record 0x147856180 '__NSConstantString_tag'
|-TypedefDecl 0x150030e98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x147855990 '__SVInt8_t'
|-TypedefDecl 0x150030f00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x1478559b0 '__SVInt16_t'
|-TypedefDecl 0x150030f68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x1478559d0 '__SVInt32_t'
|-TypedefDecl 0x150030fd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x1478559f0 '__SVInt64_t'
|-TypedefDecl 0x150031038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x147855a10 '__SVUint8_t'
|-TypedefDecl 0x1500310a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x147855a30 '__SVUint16_t'
|-TypedefDecl 0x150031108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x147855a50 '__SVUint32_t'
|-TypedefDecl 0x150031170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x147855a70 '__SVUint64_t'
|-TypedefDecl 0x1500311d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x147855a90 '__SVFloat16_t'
|-TypedefDecl 0x150031240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x147855ab0 '__SVFloat32_t'
|-TypedefDecl 0x1500312a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x147855ad0 '__SVFloat64_t'
|-TypedefDecl 0x150031310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x147855af0 '__SVBfloat16_t'
|-TypedefDecl 0x150031378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x147855b10 '__clang_svint8x2_t'
|-TypedefDecl 0x1500313e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x147855b30 '__clang_svint16x2_t'
|-TypedefDecl 0x150031448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x147855b50 '__clang_svint32x2_t'
|-TypedefDecl 0x1500314b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x147855b70 '__clang_svint64x2_t'
|-TypedefDecl 0x150031518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x147855b90 '__clang_svuint8x2_t'
|-TypedefDecl 0x150031580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x147855bb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1500315e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x147855bd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x150031650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x147855bf0 '__clang_svuint64x2_t'
|-TypedefDecl 0x1500316b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x147855c10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x150031720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x147855c30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x150031788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x147855c50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x1500317f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x147855c70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x150031858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x147855c90 '__clang_svint8x3_t'
|-TypedefDecl 0x1500318c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x147855cb0 '__clang_svint16x3_t'
|-TypedefDecl 0x150031928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x147855cd0 '__clang_svint32x3_t'
|-TypedefDecl 0x150031990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x147855cf0 '__clang_svint64x3_t'
|-TypedefDecl 0x1500319f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x147855d10 '__clang_svuint8x3_t'
|-TypedefDecl 0x150031a60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x147855d30 '__clang_svuint16x3_t'
|-TypedefDecl 0x150031ac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x147855d50 '__clang_svuint32x3_t'
|-TypedefDecl 0x150031b30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x147855d70 '__clang_svuint64x3_t'
|-TypedefDecl 0x150031b98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x147855d90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x150032400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x147855db0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x150032468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x147855dd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1500324d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x147855df0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x150032538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x147855e10 '__clang_svint8x4_t'
|-TypedefDecl 0x1500325a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x147855e30 '__clang_svint16x4_t'
|-TypedefDecl 0x150032608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x147855e50 '__clang_svint32x4_t'
|-TypedefDecl 0x150032670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x147855e70 '__clang_svint64x4_t'
|-TypedefDecl 0x1500326d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x147855e90 '__clang_svuint8x4_t'
|-TypedefDecl 0x150032740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x147855eb0 '__clang_svuint16x4_t'
|-TypedefDecl 0x1500327a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x147855ed0 '__clang_svuint32x4_t'
|-TypedefDecl 0x150032810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x147855ef0 '__clang_svuint64x4_t'
|-TypedefDecl 0x150032878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x147855f10 '__clang_svfloat16x4_t'
|-TypedefDecl 0x1500328e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x147855f30 '__clang_svfloat32x4_t'
|-TypedefDecl 0x150032948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x147855f50 '__clang_svfloat64x4_t'
|-TypedefDecl 0x1500329b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x147855f70 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x150032a18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x147855f90 '__SVBool_t'
|-TypedefDecl 0x150032a80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x147855fb0 '__clang_svboolx2_t'
|-TypedefDecl 0x150032ae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x147855fd0 '__clang_svboolx4_t'
|-TypedefDecl 0x150032b50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x147855ff0 '__SVCount_t'
|-TypedefDecl 0x150032bf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x150032bb0 'char *'
|   `-BuiltinType 0x1478552b0 'char'
|-TypedefDecl 0x150032c68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x150032bb0 'char *'
|   `-BuiltinType 0x1478552b0 'char'
`-FunctionDecl 0x150033048 <dataset_diviso_filec/func12471_vuln.c:1:1, line:59:1> line:1:1 _asn1_get_objectid_der 'int (const unsigned char *, int, int *, char *, int)'
  |-ParmVarDecl 0x150032d08 <col:25, col:46> col:46 used der 'const unsigned char *'
  |-ParmVarDecl 0x150032d88 <col:51, col:55> col:55 used der_len 'int'
  |-ParmVarDecl 0x150032e38 <col:64, col:69> col:69 used ret_len 'int *'
  |-ParmVarDecl 0x150032eb8 <line:2:4, col:10> col:10 used str 'char *'
  |-ParmVarDecl 0x150032f38 <col:15, col:19> col:19 used str_size 'int'
  `-CompoundStmt 0x15004b6a0 <line:3:1, line:59:1>
    |-DeclStmt 0x150033300 <line:4:3, col:22>
    | |-VarDecl 0x150033178 <col:3, col:7> col:7 used len_len 'int'
    | |-VarDecl 0x1500331f8 <col:3, col:16> col:16 used len 'int'
    | `-VarDecl 0x150033278 <col:3, col:21> col:21 used k 'int'
    |-DeclStmt 0x150033398 <line:5:3, col:14>
    | `-VarDecl 0x150033330 <col:3, col:7> col:7 used leading 'int'
    |-DeclStmt 0x1510088c8 <line:6:3, col:16>
    | `-VarDecl 0x151008860 <col:3, col:15> col:8 used temp 'char[20]'
    |-DeclStmt 0x1510089f8 <line:7:3, col:26>
    | |-VarDecl 0x1510088f8 <col:3, col:17> col:17 used val 'unsigned long'
    | `-VarDecl 0x151008978 <col:3, col:22> col:22 used val1 'unsigned long'
    |-BinaryOperator 0x151008a80 <line:9:3, col:14> 'int' '='
    | |-UnaryOperator 0x151008a48 <col:3, col:4> 'int' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x151008a30 <col:4> 'int *' <LValueToRValue>
    | |   `-DeclRefExpr 0x151008a10 <col:4> 'int *' lvalue ParmVar 0x150032e38 'ret_len' 'int *'
    | `-IntegerLiteral 0x151008a60 <col:14> 'int' 0
    |-IfStmt 0x151008c40 <line:10:3, line:11:14>
    | |-BinaryOperator 0x151008b50 <line:10:7, col:25> 'int' '&&'
    | | |-ImplicitCastExpr 0x151008b38 <col:7> 'char *' <LValueToRValue>
    | | | `-DeclRefExpr 0x151008aa0 <col:7> 'char *' lvalue ParmVar 0x150032eb8 'str' 'char *'
    | | `-BinaryOperator 0x151008b18 <col:14, col:25> 'int' '>'
    | |   |-ImplicitCastExpr 0x151008b00 <col:14> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x151008ac0 <col:14> 'int' lvalue ParmVar 0x150032f38 'str_size' 'int'
    | |   `-IntegerLiteral 0x151008ae0 <col:25> 'int' 0
    | `-BinaryOperator 0x151008c20 <line:11:5, col:14> 'char' '='
    |   |-ArraySubscriptExpr 0x151008bc8 <col:5, col:10> 'char' lvalue
    |   | |-ImplicitCastExpr 0x151008bb0 <col:5> 'char *' <LValueToRValue>
    |   | | `-DeclRefExpr 0x151008b70 <col:5> 'char *' lvalue ParmVar 0x150032eb8 'str' 'char *'
    |   | `-IntegerLiteral 0x151008b90 <col:9> 'int' 0
    |   `-ImplicitCastExpr 0x151008c08 <col:14> 'char' <IntegralCast>
    |     `-IntegerLiteral 0x151008be8 <col:14> 'int' 0
    |-IfStmt 0x151008e48 <line:13:3, line:14:12>
    | |-BinaryOperator 0x151008de0 <line:13:7, col:33> 'int' contains-errors '||'
    | | |-BinaryOperator 0x151008d88 <col:7, col:14> 'int' contains-errors '=='
    | | | |-DeclRefExpr 0x151008c60 <col:7> 'char *' lvalue ParmVar 0x150032eb8 'str' 'char *'
    | | | `-RecoveryExpr 0x151008d68 <col:14> '<dependent type>' contains-errors lvalue
    | | `-BinaryOperator 0x151008dc0 <col:22, col:33> 'int' '<='
    | |   |-ImplicitCastExpr 0x151008da8 <col:22> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x151008cd0 <col:22> 'int' lvalue ParmVar 0x150032d88 'der_len' 'int'
    | |   `-IntegerLiteral 0x151008cf0 <col:33> 'int' 0
    | `-ReturnStmt 0x151008e38 <line:14:5, col:12>
    |   `-RecoveryExpr 0x151008e18 <col:12> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x1510090f0 <line:16:3, col:52> 'int' '='
    | |-DeclRefExpr 0x151008e68 <col:3> 'int' lvalue Var 0x1500331f8 'len' 'int'
    | `-CallExpr 0x151009088 <col:9, col:52> 'int'
    |   |-ImplicitCastExpr 0x151009070 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x151008fa0 <col:9> 'int ()' Function 0x151008ee8 'asn1_get_length_der' 'int ()'
    |   |-ImplicitCastExpr 0x1510090c0 <col:30> 'const unsigned char *' <LValueToRValue>
    |   | `-DeclRefExpr 0x151008fc0 <col:30> 'const unsigned char *' lvalue ParmVar 0x150032d08 'der' 'const unsigned char *'
    |   |-ImplicitCastExpr 0x1510090d8 <col:35> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x151008fe0 <col:35> 'int' lvalue ParmVar 0x150032d88 'der_len' 'int'
    |   `-UnaryOperator 0x151009020 <col:44, col:45> 'int *' prefix '&' cannot overflow
    |     `-DeclRefExpr 0x151009000 <col:45> 'int' lvalue Var 0x150033178 'len_len' 'int'
    |-IfStmt 0x151009330 <line:18:3, line:19:12>
    | |-BinaryOperator 0x1510092c8 <line:18:7, col:45> 'int' '||'
    | | |-BinaryOperator 0x151009218 <col:7, col:24> 'int' '||'
    | | | |-BinaryOperator 0x151009168 <col:7, col:13> 'int' '<'
    | | | | |-ImplicitCastExpr 0x151009150 <col:7> 'int' <LValueToRValue>
    | | | | | `-DeclRefExpr 0x151009110 <col:7> 'int' lvalue Var 0x1500331f8 'len' 'int'
    | | | | `-IntegerLiteral 0x151009130 <col:13> 'int' 0
    | | | `-BinaryOperator 0x1510091f8 <col:18, col:24> 'int' '>'
    | | |   |-ImplicitCastExpr 0x1510091c8 <col:18> 'int' <LValueToRValue>
    | | |   | `-DeclRefExpr 0x151009188 <col:18> 'int' lvalue Var 0x1500331f8 'len' 'int'
    | | |   `-ImplicitCastExpr 0x1510091e0 <col:24> 'int' <LValueToRValue>
    | | |     `-DeclRefExpr 0x1510091a8 <col:24> 'int' lvalue ParmVar 0x150032d88 'der_len' 'int'
    | | `-BinaryOperator 0x1510092a8 <col:35, col:45> 'int' '>'
    | |   |-ImplicitCastExpr 0x151009278 <col:35> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x151009238 <col:35> 'int' lvalue Var 0x150033178 'len_len' 'int'
    | |   `-ImplicitCastExpr 0x151009290 <col:45> 'int' <LValueToRValue>
    | |     `-DeclRefExpr 0x151009258 <col:45> 'int' lvalue ParmVar 0x150032d88 'der_len' 'int'
    | `-ReturnStmt 0x151009320 <line:19:5, col:12>
    |   `-RecoveryExpr 0x151009300 <col:12> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x151009488 <line:21:3, col:25> 'unsigned long' '='
    | |-DeclRefExpr 0x151009350 <col:3> 'unsigned long' lvalue Var 0x151008978 'val1' 'unsigned long'
    | `-ImplicitCastExpr 0x151009470 <col:10, col:25> 'unsigned long' <IntegralCast>
    |   `-BinaryOperator 0x151009450 <col:10, col:25> 'int' '/'
    |     |-ImplicitCastExpr 0x151009438 <col:10, col:21> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x151009420 <col:10, col:21> 'unsigned char' <LValueToRValue>
    |     |   `-ArraySubscriptExpr 0x1510093e0 <col:10, col:21> 'const unsigned char' lvalue
    |     |     |-ImplicitCastExpr 0x1510093b0 <col:10> 'const unsigned char *' <LValueToRValue>
    |     |     | `-DeclRefExpr 0x151009370 <col:10> 'const unsigned char *' lvalue ParmVar 0x150032d08 'der' 'const unsigned char *'
    |     |     `-ImplicitCastExpr 0x1510093c8 <col:14> 'int' <LValueToRValue>
    |     |       `-DeclRefExpr 0x151009390 <col:14> 'int' lvalue Var 0x150033178 'len_len' 'int'
    |     `-IntegerLiteral 0x151009400 <col:25> 'int' 40
    |-BinaryOperator 0x151009638 <line:22:3, col:31> 'unsigned long' '='
    | |-DeclRefExpr 0x1510094a8 <col:3> 'unsigned long' lvalue Var 0x1510088f8 'val' 'unsigned long'
    | `-BinaryOperator 0x151009618 <col:9, col:31> 'unsigned long' '-'
    |   |-ImplicitCastExpr 0x151009600 <col:9, col:20> 'unsigned long' <IntegralCast>
    |   | `-ImplicitCastExpr 0x1510095e8 <col:9, col:20> 'unsigned char' <LValueToRValue>
    |   |   `-ArraySubscriptExpr 0x151009538 <col:9, col:20> 'const unsigned char' lvalue
    |   |     |-ImplicitCastExpr 0x151009508 <col:9> 'const unsigned char *' <LValueToRValue>
    |   |     | `-DeclRefExpr 0x1510094c8 <col:9> 'const unsigned char *' lvalue ParmVar 0x150032d08 'der' 'const unsigned char *'
    |   |     `-ImplicitCastExpr 0x151009520 <col:13> 'int' <LValueToRValue>
    |   |       `-DeclRefExpr 0x1510094e8 <col:13> 'int' lvalue Var 0x150033178 'len_len' 'int'
    |   `-BinaryOperator 0x1510095c8 <col:24, col:31> 'unsigned long' '*'
    |     |-ImplicitCastExpr 0x151009598 <col:24> 'unsigned long' <LValueToRValue>
    |     | `-DeclRefExpr 0x151009558 <col:24> 'unsigned long' lvalue Var 0x151008978 'val1' 'unsigned long'
    |     `-ImplicitCastExpr 0x1510095b0 <col:31> 'unsigned long' <IntegralCast>
    |       `-IntegerLiteral 0x151009578 <col:31> 'int' 40
    |-CallExpr 0x1478ff1a8 <line:24:3, col:58> 'int'
    | |-ImplicitCastExpr 0x1478ff190 <col:3> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x151009738 <col:3> 'int ()' Function 0x151009680 '_asn1_str_cpy' 'int ()'
    | |-ImplicitCastExpr 0x1478ff1e0 <col:18> 'char *' <LValueToRValue>
    | | `-DeclRefExpr 0x151009758 <col:18> 'char *' lvalue ParmVar 0x150032eb8 'str' 'char *'
    | |-ImplicitCastExpr 0x1478ff1f8 <col:23> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x151009778 <col:23> 'int' lvalue ParmVar 0x150032f38 'str_size' 'int'
    | `-CallExpr 0x1478ff130 <col:33, col:57> 'int'
    |   |-ImplicitCastExpr 0x1478ff118 <col:33> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x1478ff0b8 <col:33> 'int ()' Function 0x1478ff000 '_asn1_ltostr' 'int ()'
    |   |-ImplicitCastExpr 0x1478ff160 <col:47> 'unsigned long' <LValueToRValue>
    |   | `-DeclRefExpr 0x1478ff0d8 <col:47> 'unsigned long' lvalue Var 0x151008978 'val1' 'unsigned long'
    |   `-ImplicitCastExpr 0x1478ff178 <col:53> 'char *' <ArrayToPointerDecay>
    |     `-DeclRefExpr 0x1478ff0f8 <col:53> 'char[20]' lvalue Var 0x151008860 'temp' 'char[20]'
    |-CallExpr 0x1478ff3c8 <line:25:3, col:38> 'int'
    | |-ImplicitCastExpr 0x1478ff3b0 <col:3> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x1478ff2f0 <col:3> 'int ()' Function 0x1478ff238 '_asn1_str_cat' 'int ()'
    | |-ImplicitCastExpr 0x1478ff400 <col:18> 'char *' <LValueToRValue>
    | | `-DeclRefExpr 0x1478ff310 <col:18> 'char *' lvalue ParmVar 0x150032eb8 'str' 'char *'
    | |-ImplicitCastExpr 0x1478ff418 <col:23> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x1478ff330 <col:23> 'int' lvalue ParmVar 0x150032f38 'str_size' 'int'
    | `-ImplicitCastExpr 0x1478ff430 <col:33> 'char *' <ArrayToPointerDecay>
    |   `-StringLiteral 0x1478ff390 <col:33> 'char[4]' lvalue "STR"
    |-CallExpr 0x1478ff598 <line:26:3, col:57> 'int'
    | |-ImplicitCastExpr 0x1478ff580 <col:3> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x1478ff448 <col:3> 'int ()' Function 0x1478ff238 '_asn1_str_cat' 'int ()'
    | |-ImplicitCastExpr 0x1478ff5d0 <col:18> 'char *' <LValueToRValue>
    | | `-DeclRefExpr 0x1478ff468 <col:18> 'char *' lvalue ParmVar 0x150032eb8 'str' 'char *'
    | |-ImplicitCastExpr 0x1478ff5e8 <col:23> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x1478ff488 <col:23> 'int' lvalue ParmVar 0x150032f38 'str_size' 'int'
    | `-CallExpr 0x1478ff520 <col:33, col:56> 'int'
    |   |-ImplicitCastExpr 0x1478ff508 <col:33> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x1478ff4a8 <col:33> 'int ()' Function 0x1478ff000 '_asn1_ltostr' 'int ()'
    |   |-ImplicitCastExpr 0x1478ff550 <col:47> 'unsigned long' <LValueToRValue>
    |   | `-DeclRefExpr 0x1478ff4c8 <col:47> 'unsigned long' lvalue Var 0x1510088f8 'val' 'unsigned long'
    |   `-ImplicitCastExpr 0x1478ff568 <col:52> 'char *' <ArrayToPointerDecay>
    |     `-DeclRefExpr 0x1478ff4e8 <col:52> 'char[20]' lvalue Var 0x151008860 'temp' 'char[20]'
    |-BinaryOperator 0x1478ff658 <line:28:3, col:9> 'unsigned long' '='
    | |-DeclRefExpr 0x1478ff600 <col:3> 'unsigned long' lvalue Var 0x1510088f8 'val' 'unsigned long'
    | `-ImplicitCastExpr 0x1478ff640 <col:9> 'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x1478ff620 <col:9> 'int' 0
    |-BinaryOperator 0x1478ff6b8 <line:29:3, col:13> 'int' '='
    | |-DeclRefExpr 0x1478ff678 <col:3> 'int' lvalue Var 0x150033330 'leading' 'int'
    | `-IntegerLiteral 0x1478ff698 <col:13> 'int' 1
    |-ForStmt 0x15004b300 <line:30:3, line:51:5>
    | |-BinaryOperator 0x1478ff718 <line:30:8, col:12> 'int' '='
    | | |-DeclRefExpr 0x1478ff6d8 <col:8> 'int' lvalue Var 0x150033278 'k' 'int'
    | | `-IntegerLiteral 0x1478ff6f8 <col:12> 'int' 1
    | |-<<<NULL>>>
    | |-BinaryOperator 0x1478ff7a8 <col:15, col:19> 'int' '<'
    | | |-ImplicitCastExpr 0x1478ff778 <col:15> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1478ff738 <col:15> 'int' lvalue Var 0x150033278 'k' 'int'
    | | `-ImplicitCastExpr 0x1478ff790 <col:19> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x1478ff758 <col:19> 'int' lvalue Var 0x1500331f8 'len' 'int'
    | |-UnaryOperator 0x1478ff7e8 <col:24, col:25> 'int' postfix '++'
    | | `-DeclRefExpr 0x1478ff7c8 <col:24> 'int' lvalue Var 0x150033278 'k' 'int'
    | `-CompoundStmt 0x15004b2c0 <line:31:5, line:51:5>
    |   |-IfStmt 0x1478ffa38 <line:33:7, line:34:9>
    |   | |-BinaryOperator 0x1478ff9d0 <line:33:11, col:47> 'int' '&&'
    |   | | |-BinaryOperator 0x1478ff858 <col:11, col:22> 'int' '!='
    |   | | | |-ImplicitCastExpr 0x1478ff840 <col:11> 'int' <LValueToRValue>
    |   | | | | `-DeclRefExpr 0x1478ff800 <col:11> 'int' lvalue Var 0x150033330 'leading' 'int'
    |   | | | `-IntegerLiteral 0x1478ff820 <col:22> 'int' 0
    |   | | `-BinaryOperator 0x1478ff9b0 <col:27, col:47> 'int' '=='
    |   | |   |-ImplicitCastExpr 0x1478ff998 <col:27, col:42> 'int' <IntegralCast>
    |   | |   | `-ImplicitCastExpr 0x1478ff980 <col:27, col:42> 'unsigned char' <LValueToRValue>
    |   | |   |   `-ArraySubscriptExpr 0x1478ff940 <col:27, col:42> 'const unsigned char' lvalue
    |   | |   |     |-ImplicitCastExpr 0x1478ff928 <col:27> 'const unsigned char *' <LValueToRValue>
    |   | |   |     | `-DeclRefExpr 0x1478ff878 <col:27> 'const unsigned char *' lvalue ParmVar 0x150032d08 'der' 'const unsigned char *'
    |   | |   |     `-BinaryOperator 0x1478ff908 <col:31, col:41> 'int' '+'
    |   | |   |       |-ImplicitCastExpr 0x1478ff8d8 <col:31> 'int' <LValueToRValue>
    |   | |   |       | `-DeclRefExpr 0x1478ff898 <col:31> 'int' lvalue Var 0x150033178 'len_len' 'int'
    |   | |   |       `-ImplicitCastExpr 0x1478ff8f0 <col:41> 'int' <LValueToRValue>
    |   | |   |         `-DeclRefExpr 0x1478ff8b8 <col:41> 'int' lvalue Var 0x150033278 'k' 'int'
    |   | |   `-IntegerLiteral 0x1478ff960 <col:47> 'int' 128
    |   | `-ReturnStmt 0x1478ffa28 <line:34:2, col:9>
    |   |   `-RecoveryExpr 0x1478ffa08 <col:9> '<dependent type>' contains-errors lvalue
    |   |-BinaryOperator 0x1478ffa98 <line:35:7, col:17> 'int' '='
    |   | |-DeclRefExpr 0x1478ffa58 <col:7> 'int' lvalue Var 0x150033330 'leading' 'int'
    |   | `-IntegerLiteral 0x1478ffa78 <col:17> 'int' 0
    |   |-IfStmt 0x1478ffca0 <line:38:7, line:39:9>
    |   | |-CallExpr 0x1478ffc10 <line:38:11, col:42> 'int'
    |   | | |-ImplicitCastExpr 0x1478ffbf8 <col:11> 'int (*)()' <FunctionToPointerDecay>
    |   | | | `-DeclRefExpr 0x1478ffb98 <col:11> 'int ()' Function 0x1478ffae0 'INT_LEFT_SHIFT_OVERFLOW' 'int ()'
    |   | | |-ImplicitCastExpr 0x1478ffc40 <col:36> 'unsigned long' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x1478ffbb8 <col:36> 'unsigned long' lvalue Var 0x1510088f8 'val' 'unsigned long'
    |   | | `-IntegerLiteral 0x1478ffbd8 <col:41> 'int' 7
    |   | `-ReturnStmt 0x1478ffc90 <line:39:2, col:9>
    |   |   `-RecoveryExpr 0x1478ffc70 <col:9> '<dependent type>' contains-errors lvalue
    |   |-BinaryOperator 0x1478ffd58 <line:41:7, col:20> 'unsigned long' '='
    |   | |-DeclRefExpr 0x1478ffcc0 <col:7> 'unsigned long' lvalue Var 0x1510088f8 'val' 'unsigned long'
    |   | `-BinaryOperator 0x1478ffd38 <col:13, col:20> 'unsigned long' '<<'
    |   |   |-ImplicitCastExpr 0x1478ffd20 <col:13> 'unsigned long' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x1478ffce0 <col:13> 'unsigned long' lvalue Var 0x1510088f8 'val' 'unsigned long'
    |   |   `-IntegerLiteral 0x1478ffd00 <col:20> 'int' 7
    |   |-CompoundAssignOperator 0x1478fff08 <line:42:7, col:33> 'unsigned long' '|=' ComputeLHSTy='unsigned long' ComputeResultTy='unsigned long'
    |   | |-DeclRefExpr 0x1478ffd78 <col:7> 'unsigned long' lvalue Var 0x1510088f8 'val' 'unsigned long'
    |   | `-ImplicitCastExpr 0x1478ffef0 <col:14, col:33> 'unsigned long' <IntegralCast>
    |   |   `-BinaryOperator 0x1478ffed0 <col:14, col:33> 'int' '&'
    |   |     |-ImplicitCastExpr 0x1478ffeb8 <col:14, col:29> 'int' <IntegralCast>
    |   |     | `-ImplicitCastExpr 0x1478ffea0 <col:14, col:29> 'unsigned char' <LValueToRValue>
    |   |     |   `-ArraySubscriptExpr 0x1478ffe60 <col:14, col:29> 'const unsigned char' lvalue
    |   |     |     |-ImplicitCastExpr 0x1478ffe48 <col:14> 'const unsigned char *' <LValueToRValue>
    |   |     |     | `-DeclRefExpr 0x1478ffd98 <col:14> 'const unsigned char *' lvalue ParmVar 0x150032d08 'der' 'const unsigned char *'
    |   |     |     `-BinaryOperator 0x1478ffe28 <col:18, col:28> 'int' '+'
    |   |     |       |-ImplicitCastExpr 0x1478ffdf8 <col:18> 'int' <LValueToRValue>
    |   |     |       | `-DeclRefExpr 0x1478ffdb8 <col:18> 'int' lvalue Var 0x150033178 'len_len' 'int'
    |   |     |       `-ImplicitCastExpr 0x1478ffe10 <col:28> 'int' <LValueToRValue>
    |   |     |         `-DeclRefExpr 0x1478ffdd8 <col:28> 'int' lvalue Var 0x150033278 'k' 'int'
    |   |     `-IntegerLiteral 0x1478ffe80 <col:33> 'int' 127
    |   `-IfStmt 0x15004b2a0 <line:44:7, line:50:2>
    |     |-UnaryOperator 0x15004aeb0 <line:44:11, col:36> 'int' prefix '!' cannot overflow
    |     | `-ParenExpr 0x15004ae90 <col:12, col:36> 'int'
    |     |   `-BinaryOperator 0x15004ae70 <col:13, col:32> 'int' '&'
    |     |     |-ImplicitCastExpr 0x15004ae58 <col:13, col:28> 'int' <IntegralCast>
    |     |     | `-ImplicitCastExpr 0x15004ae40 <col:13, col:28> 'unsigned char' <LValueToRValue>
    |     |     |   `-ArraySubscriptExpr 0x15004ae00 <col:13, col:28> 'const unsigned char' lvalue
    |     |     |     |-ImplicitCastExpr 0x1478fffe8 <col:13> 'const unsigned char *' <LValueToRValue>
    |     |     |     | `-DeclRefExpr 0x1478fff38 <col:13> 'const unsigned char *' lvalue ParmVar 0x150032d08 'der' 'const unsigned char *'
    |     |     |     `-BinaryOperator 0x1478fffc8 <col:17, col:27> 'int' '+'
    |     |     |       |-ImplicitCastExpr 0x1478fff98 <col:17> 'int' <LValueToRValue>
    |     |     |       | `-DeclRefExpr 0x1478fff58 <col:17> 'int' lvalue Var 0x150033178 'len_len' 'int'
    |     |     |       `-ImplicitCastExpr 0x1478fffb0 <col:27> 'int' <LValueToRValue>
    |     |     |         `-DeclRefExpr 0x1478fff78 <col:27> 'int' lvalue Var 0x150033278 'k' 'int'
    |     |     `-IntegerLiteral 0x15004ae20 <col:32> 'int' 128
    |     `-CompoundStmt 0x15004b270 <line:45:2, line:50:2>
    |       |-CallExpr 0x15004af60 <line:46:4, col:39> 'int'
    |       | |-ImplicitCastExpr 0x15004af48 <col:4> 'int (*)()' <FunctionToPointerDecay>
    |       | | `-DeclRefExpr 0x15004aec8 <col:4> 'int ()' Function 0x1478ff238 '_asn1_str_cat' 'int ()'
    |       | |-ImplicitCastExpr 0x15004af98 <col:19> 'char *' <LValueToRValue>
    |       | | `-DeclRefExpr 0x15004aee8 <col:19> 'char *' lvalue ParmVar 0x150032eb8 'str' 'char *'
    |       | |-ImplicitCastExpr 0x15004afb0 <col:24> 'int' <LValueToRValue>
    |       | | `-DeclRefExpr 0x15004af08 <col:24> 'int' lvalue ParmVar 0x150032f38 'str_size' 'int'
    |       | `-ImplicitCastExpr 0x15004afc8 <col:34> 'char *' <ArrayToPointerDecay>
    |       |   `-StringLiteral 0x15004af28 <col:34> 'char[4]' lvalue "STR"
    |       |-CallExpr 0x15004b130 <line:47:4, col:58> 'int'
    |       | |-ImplicitCastExpr 0x15004b118 <col:4> 'int (*)()' <FunctionToPointerDecay>
    |       | | `-DeclRefExpr 0x15004afe0 <col:4> 'int ()' Function 0x1478ff238 '_asn1_str_cat' 'int ()'
    |       | |-ImplicitCastExpr 0x15004b168 <col:19> 'char *' <LValueToRValue>
    |       | | `-DeclRefExpr 0x15004b000 <col:19> 'char *' lvalue ParmVar 0x150032eb8 'str' 'char *'
    |       | |-ImplicitCastExpr 0x15004b180 <col:24> 'int' <LValueToRValue>
    |       | | `-DeclRefExpr 0x15004b020 <col:24> 'int' lvalue ParmVar 0x150032f38 'str_size' 'int'
    |       | `-CallExpr 0x15004b0b8 <col:34, col:57> 'int'
    |       |   |-ImplicitCastExpr 0x15004b0a0 <col:34> 'int (*)()' <FunctionToPointerDecay>
    |       |   | `-DeclRefExpr 0x15004b040 <col:34> 'int ()' Function 0x1478ff000 '_asn1_ltostr' 'int ()'
    |       |   |-ImplicitCastExpr 0x15004b0e8 <col:48> 'unsigned long' <LValueToRValue>
    |       |   | `-DeclRefExpr 0x15004b060 <col:48> 'unsigned long' lvalue Var 0x1510088f8 'val' 'unsigned long'
    |       |   `-ImplicitCastExpr 0x15004b100 <col:53> 'char *' <ArrayToPointerDecay>
    |       |     `-DeclRefExpr 0x15004b080 <col:53> 'char[20]' lvalue Var 0x151008860 'temp' 'char[20]'
    |       |-BinaryOperator 0x15004b1f0 <line:48:4, col:10> 'unsigned long' '='
    |       | |-DeclRefExpr 0x15004b198 <col:4> 'unsigned long' lvalue Var 0x1510088f8 'val' 'unsigned long'
    |       | `-ImplicitCastExpr 0x15004b1d8 <col:10> 'unsigned long' <IntegralCast>
    |       |   `-IntegerLiteral 0x15004b1b8 <col:10> 'int' 0
    |       `-BinaryOperator 0x15004b250 <line:49:4, col:14> 'int' '='
    |         |-DeclRefExpr 0x15004b210 <col:4> 'int' lvalue Var 0x150033330 'leading' 'int'
    |         `-IntegerLiteral 0x15004b230 <col:14> 'int' 1
    |-IfStmt 0x15004b538 <line:53:3, line:54:12>
    | |-CallExpr 0x15004b490 <line:53:7, col:37> 'int'
    | | |-ImplicitCastExpr 0x15004b478 <col:7> 'int (*)()' <FunctionToPointerDecay>
    | | | `-DeclRefExpr 0x15004b418 <col:7> 'int ()' Function 0x15004b360 'INT_ADD_OVERFLOW' 'int ()'
    | | |-ImplicitCastExpr 0x15004b4c0 <col:25> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x15004b438 <col:25> 'int' lvalue Var 0x1500331f8 'len' 'int'
    | | `-ImplicitCastExpr 0x15004b4d8 <col:30> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x15004b458 <col:30> 'int' lvalue Var 0x150033178 'len_len' 'int'
    | `-ReturnStmt 0x15004b528 <line:54:5, col:12>
    |   `-RecoveryExpr 0x15004b508 <col:12> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x15004b638 <line:56:3, col:20> 'int' '='
    | |-UnaryOperator 0x15004b590 <col:3, col:4> 'int' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x15004b578 <col:4> 'int *' <LValueToRValue>
    | |   `-DeclRefExpr 0x15004b558 <col:4> 'int *' lvalue ParmVar 0x150032e38 'ret_len' 'int *'
    | `-BinaryOperator 0x15004b618 <col:14, col:20> 'int' '+'
    |   |-ImplicitCastExpr 0x15004b5e8 <col:14> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x15004b5a8 <col:14> 'int' lvalue Var 0x1500331f8 'len' 'int'
    |   `-ImplicitCastExpr 0x15004b600 <col:20> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x15004b5c8 <col:20> 'int' lvalue Var 0x150033178 'len_len' 'int'
    `-ReturnStmt 0x15004b690 <line:58:3, col:10>
      `-RecoveryExpr 0x15004b670 <col:10> '<dependent type>' contains-errors lvalue
