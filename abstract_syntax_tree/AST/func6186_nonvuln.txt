TranslationUnitDecl 0x14d855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x14d8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x14d855bd0 '__int128'
|-TypedefDecl 0x14d856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x14d855bf0 'unsigned __int128'
|-TypedefDecl 0x14d926230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x14d926000 'struct __NSConstantString_tag'
|   `-Record 0x14d856580 '__NSConstantString_tag'
|-TypedefDecl 0x14d926298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x14d855d90 '__SVInt8_t'
|-TypedefDecl 0x14d926300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x14d855db0 '__SVInt16_t'
|-TypedefDecl 0x14d926368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x14d855dd0 '__SVInt32_t'
|-TypedefDecl 0x14d9263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x14d855df0 '__SVInt64_t'
|-TypedefDecl 0x14d926438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x14d855e10 '__SVUint8_t'
|-TypedefDecl 0x14d9264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x14d855e30 '__SVUint16_t'
|-TypedefDecl 0x14d926508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x14d855e50 '__SVUint32_t'
|-TypedefDecl 0x14d926570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x14d855e70 '__SVUint64_t'
|-TypedefDecl 0x14d9265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x14d855e90 '__SVFloat16_t'
|-TypedefDecl 0x14d926640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x14d855eb0 '__SVFloat32_t'
|-TypedefDecl 0x14d9266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x14d855ed0 '__SVFloat64_t'
|-TypedefDecl 0x14d926710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x14d855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x14d926778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x14d855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x14d9267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x14d855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x14d926848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x14d855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x14d9268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x14d855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x14d926918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x14d855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x14d926980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x14d855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x14d9269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x14d855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x14d926a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x14d855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x14d926ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x14d856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x14d926b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x14d856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x14d926b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x14d856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x14d926bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x14d856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x14d926c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x14d856090 '__clang_svint8x3_t'
|-TypedefDecl 0x14d926cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x14d8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x14d926d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x14d8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x14d926d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x14d8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x14d926df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x14d856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x14d926e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x14d856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x14d926ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x14d856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x14d926f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x14d856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x14d926f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x14d856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x14d927800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x14d8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x14d927868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x14d8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x14d9278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x14d8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x14d927938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x14d856210 '__clang_svint8x4_t'
|-TypedefDecl 0x14d9279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x14d856230 '__clang_svint16x4_t'
|-TypedefDecl 0x14d927a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x14d856250 '__clang_svint32x4_t'
|-TypedefDecl 0x14d927a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x14d856270 '__clang_svint64x4_t'
|-TypedefDecl 0x14d927ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x14d856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x14d927b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x14d8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x14d927ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x14d8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x14d927c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x14d8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x14d927c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x14d856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x14d927ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x14d856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x14d927d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x14d856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x14d927db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x14d856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x14d927e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x14d856390 '__SVBool_t'
|-TypedefDecl 0x14d927e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x14d8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x14d927ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x14d8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x14d927f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x14d8563f0 '__SVCount_t'
|-TypedefDecl 0x14d927ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x14d927fb0 'char *'
|   `-BuiltinType 0x14d8556b0 'char'
|-TypedefDecl 0x14d928068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x14d927fb0 'char *'
|   `-BuiltinType 0x14d8556b0 'char'
`-FunctionDecl 0x14d9284c8 <dataset_diviso_filec/func6186_nonvuln.c:1:1, line:54:1> line:1:1 invalid my_unescape 'int (int *, char *, const char *, const char *, int, int)'
  |-ParmVarDecl 0x14d928128 <col:13, col:27> col:27 invalid cs 'int *'
  |-ParmVarDecl 0x14d9281a8 <col:31, col:37> col:37 used to 'char *'
  |-ParmVarDecl 0x14d928228 <col:41, col:53> col:53 used str 'const char *'
  |-ParmVarDecl 0x14d9282a8 <col:58, col:70> col:70 used end 'const char *'
  |-ParmVarDecl 0x14d928328 <line:2:13, col:17> col:17 used sep 'int'
  |-ParmVarDecl 0x14d9283a8 <col:22, col:27> col:27 invalid backslash_escapes 'int'
  `-CompoundStmt 0x14d942768 <line:3:1, line:54:1>
    |-DeclStmt 0x14d928658 <line:4:3, col:18>
    | `-VarDecl 0x14d9285b8 <col:3, col:16> col:9 used start 'char *' cinit
    |   `-ImplicitCastExpr 0x14d928640 <col:16> 'char *' <LValueToRValue>
    |     `-DeclRefExpr 0x14d928620 <col:16> 'char *' lvalue ParmVar 0x14d9281a8 'to' 'char *'
    |-ForStmt 0x14d9425d0 <line:5:3, line:51:3>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-BinaryOperator 0x14d9286e0 <line:5:11, col:18> 'int' '!='
    | | |-ImplicitCastExpr 0x14d9286b0 <col:11> 'const char *' <LValueToRValue>
    | | | `-DeclRefExpr 0x14d928670 <col:11> 'const char *' lvalue ParmVar 0x14d928228 'str' 'const char *'
    | | `-ImplicitCastExpr 0x14d9286c8 <col:18> 'const char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x14d928690 <col:18> 'const char *' lvalue ParmVar 0x14d9282a8 'end' 'const char *'
    | |-UnaryOperator 0x14d928720 <col:24, col:27> 'const char *' postfix '++'
    | | `-DeclRefExpr 0x14d928700 <col:24> 'const char *' lvalue ParmVar 0x14d928228 'str' 'const char *'
    | `-CompoundStmt 0x14d9425b8 <line:6:3, line:51:3>
    |   `-IfStmt 0x14d942588 <line:17:5, line:50:16> has_else
    |     |-BinaryOperator 0x14d941910 <line:17:9, col:57> 'int' contains-errors '&&'
    |     | |-BinaryOperator 0x14d941820 <col:9, col:38> 'int' contains-errors '&&'
    |     | | |-RecoveryExpr 0x14d928738 <col:9> '<dependent type>' contains-errors lvalue
    |     | | `-BinaryOperator 0x14d941800 <col:30, col:38> 'int' '=='
    |     | |   |-ImplicitCastExpr 0x14d9287d8 <col:30, col:31> 'int' <IntegralCast>
    |     | |   | `-ImplicitCastExpr 0x14d9287c0 <col:30, col:31> 'char' <LValueToRValue>
    |     | |   |   `-UnaryOperator 0x14d928790 <col:30, col:31> 'const char' lvalue prefix '*' cannot overflow
    |     | |   |     `-ImplicitCastExpr 0x14d928778 <col:31> 'const char *' <LValueToRValue>
    |     | |   |       `-DeclRefExpr 0x14d928758 <col:31> 'const char *' lvalue ParmVar 0x14d928228 'str' 'const char *'
    |     | |   `-CharacterLiteral 0x14d9287a8 <col:38> 'int' 92
    |     | `-BinaryOperator 0x14d9418f0 <col:46, col:57> 'int' '!='
    |     |   |-BinaryOperator 0x14d941898 <col:46, col:52> 'const char *' '+'
    |     |   | |-ImplicitCastExpr 0x14d941880 <col:46> 'const char *' <LValueToRValue>
    |     |   | | `-DeclRefExpr 0x14d941840 <col:46> 'const char *' lvalue ParmVar 0x14d928228 'str' 'const char *'
    |     |   | `-IntegerLiteral 0x14d941860 <col:52> 'int' 1
    |     |   `-ImplicitCastExpr 0x14d9418d8 <col:57> 'const char *' <LValueToRValue>
    |     |     `-DeclRefExpr 0x14d9418b8 <col:57> 'const char *' lvalue ParmVar 0x14d9282a8 'end' 'const char *'
    |     |-CompoundStmt 0x14d9422b8 <line:18:5, line:46:5>
    |     | `-SwitchStmt 0x14d9419b0 <line:19:7, line:45:7>
    |     |   |-ImplicitCastExpr 0x14d941998 <line:19:14, col:17> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x14d941980 <col:14, col:17> 'char' <LValueToRValue>
    |     |   |   `-UnaryOperator 0x14d941968 <col:14, col:17> 'const char' lvalue prefix '*' cannot overflow
    |     |   |     `-UnaryOperator 0x14d941950 <col:15, col:17> 'const char *' prefix '++'
    |     |   |       `-DeclRefExpr 0x14d941930 <col:17> 'const char *' lvalue ParmVar 0x14d928228 'str' 'const char *'
    |     |   `-CompoundStmt 0x14d942230 <col:22, line:45:7>
    |     |     |-CaseStmt 0x14d941a08 <line:20:7, line:21:15>
    |     |     | |-ConstantExpr 0x14d9419f0 <line:20:12> 'int'
    |     |     | | `-CharacterLiteral 0x14d9419d8 <col:12> 'int' 110
    |     |     | `-BinaryOperator 0x14d941ab0 <line:21:9, col:15> 'char' '='
    |     |     |   |-UnaryOperator 0x14d941a68 <col:9, col:12> 'char' lvalue prefix '*' cannot overflow
    |     |     |   | `-UnaryOperator 0x14d941a50 <col:10, col:12> 'char *' postfix '++'
    |     |     |   |   `-DeclRefExpr 0x14d941a30 <col:10> 'char *' lvalue ParmVar 0x14d9281a8 'to' 'char *'
    |     |     |   `-ImplicitCastExpr 0x14d941a98 <col:15> 'char' <IntegralCast>
    |     |     |     `-CharacterLiteral 0x14d941a80 <col:15> 'int' 10
    |     |     |-BreakStmt 0x14d941ad0 <line:22:9>
    |     |     |-CaseStmt 0x14d941b08 <line:23:7, line:24:16>
    |     |     | |-ConstantExpr 0x14d941af0 <line:23:12> 'int'
    |     |     | | `-CharacterLiteral 0x14d941ad8 <col:12> 'int' 116
    |     |     | `-BinaryOperator 0x14d941bb0 <line:24:9, col:16> 'char' '='
    |     |     |   |-UnaryOperator 0x14d941b68 <col:9, col:12> 'char' lvalue prefix '*' cannot overflow
    |     |     |   | `-UnaryOperator 0x14d941b50 <col:10, col:12> 'char *' postfix '++'
    |     |     |   |   `-DeclRefExpr 0x14d941b30 <col:10> 'char *' lvalue ParmVar 0x14d9281a8 'to' 'char *'
    |     |     |   `-ImplicitCastExpr 0x14d941b98 <col:16> 'char' <IntegralCast>
    |     |     |     `-CharacterLiteral 0x14d941b80 <col:16> 'int' 9
    |     |     |-BreakStmt 0x14d941bd0 <line:25:9>
    |     |     |-CaseStmt 0x14d941c08 <line:26:7, line:27:17>
    |     |     | |-ConstantExpr 0x14d941bf0 <line:26:12> 'int'
    |     |     | | `-CharacterLiteral 0x14d941bd8 <col:12> 'int' 114
    |     |     | `-BinaryOperator 0x14d941cb0 <line:27:9, col:17> 'char' '='
    |     |     |   |-UnaryOperator 0x14d941c68 <col:9, col:12> 'char' lvalue prefix '*' cannot overflow
    |     |     |   | `-UnaryOperator 0x14d941c50 <col:10, col:12> 'char *' postfix '++'
    |     |     |   |   `-DeclRefExpr 0x14d941c30 <col:10> 'char *' lvalue ParmVar 0x14d9281a8 'to' 'char *'
    |     |     |   `-ImplicitCastExpr 0x14d941c98 <col:17> 'char' <IntegralCast>
    |     |     |     `-CharacterLiteral 0x14d941c80 <col:17> 'int' 13
    |     |     |-BreakStmt 0x14d941cd0 <line:28:9>
    |     |     |-CaseStmt 0x14d941d08 <line:29:7, line:30:17>
    |     |     | |-ConstantExpr 0x14d941cf0 <line:29:12> 'int'
    |     |     | | `-CharacterLiteral 0x14d941cd8 <col:12> 'int' 98
    |     |     | `-BinaryOperator 0x14d941db0 <line:30:9, col:17> 'char' '='
    |     |     |   |-UnaryOperator 0x14d941d68 <col:9, col:12> 'char' lvalue prefix '*' cannot overflow
    |     |     |   | `-UnaryOperator 0x14d941d50 <col:10, col:12> 'char *' postfix '++'
    |     |     |   |   `-DeclRefExpr 0x14d941d30 <col:10> 'char *' lvalue ParmVar 0x14d9281a8 'to' 'char *'
    |     |     |   `-ImplicitCastExpr 0x14d941d98 <col:17> 'char' <IntegralCast>
    |     |     |     `-CharacterLiteral 0x14d941d80 <col:17> 'int' 8
    |     |     |-BreakStmt 0x14d941dd0 <line:31:9>
    |     |     |-CaseStmt 0x14d941e08 <line:32:7, line:33:16>
    |     |     | |-ConstantExpr 0x14d941df0 <line:32:12> 'int'
    |     |     | | `-CharacterLiteral 0x14d941dd8 <col:12> 'int' 48
    |     |     | `-BinaryOperator 0x14d941eb8 <line:33:9, col:16> 'char' '='
    |     |     |   |-UnaryOperator 0x14d941e68 <col:9, col:12> 'char' lvalue prefix '*' cannot overflow
    |     |     |   | `-UnaryOperator 0x14d941e50 <col:10, col:12> 'char *' postfix '++'
    |     |     |   |   `-DeclRefExpr 0x14d941e30 <col:10> 'char *' lvalue ParmVar 0x14d9281a8 'to' 'char *'
    |     |     |   `-ImplicitCastExpr 0x14d941ea0 <col:16> 'char' <IntegralCast>
    |     |     |     `-IntegerLiteral 0x14d941e80 <col:16> 'int' 0
    |     |     |-BreakStmt 0x14d941ed8 <line:34:9>
    |     |     |-CaseStmt 0x14d941f10 <line:35:7, line:36:15>
    |     |     | |-ConstantExpr 0x14d941ef8 <line:35:12> 'int'
    |     |     | | `-CharacterLiteral 0x14d941ee0 <col:12> 'int' 90
    |     |     | `-BinaryOperator 0x14d941fb8 <line:36:9, col:15> 'char' '='
    |     |     |   |-UnaryOperator 0x14d941f70 <col:9, col:12> 'char' lvalue prefix '*' cannot overflow
    |     |     |   | `-UnaryOperator 0x14d941f58 <col:10, col:12> 'char *' postfix '++'
    |     |     |   |   `-DeclRefExpr 0x14d941f38 <col:10> 'char *' lvalue ParmVar 0x14d9281a8 'to' 'char *'
    |     |     |   `-ImplicitCastExpr 0x14d941fa0 <col:15> 'char' <IntegralCast>
    |     |     |     `-CharacterLiteral 0x14d941f88 <col:15> 'int' 26
    |     |     |-BreakStmt 0x14d941fd8 <line:37:9>
    |     |     |-CaseStmt 0x14d942010 <line:38:7, line:40:16>
    |     |     | |-ConstantExpr 0x14d941ff8 <line:38:12> 'int'
    |     |     | | `-CharacterLiteral 0x14d941fe0 <col:12> 'int' 95
    |     |     | `-CaseStmt 0x14d942068 <line:39:7, line:40:16>
    |     |     |   |-ConstantExpr 0x14d942050 <line:39:12> 'int'
    |     |     |   | `-CharacterLiteral 0x14d942038 <col:12> 'int' 37
    |     |     |   `-BinaryOperator 0x14d942110 <line:40:9, col:16> 'char' '='
    |     |     |     |-UnaryOperator 0x14d9420c8 <col:9, col:12> 'char' lvalue prefix '*' cannot overflow
    |     |     |     | `-UnaryOperator 0x14d9420b0 <col:10, col:12> 'char *' postfix '++'
    |     |     |     |   `-DeclRefExpr 0x14d942090 <col:10> 'char *' lvalue ParmVar 0x14d9281a8 'to' 'char *'
    |     |     |     `-ImplicitCastExpr 0x14d9420f8 <col:16> 'char' <IntegralCast>
    |     |     |       `-CharacterLiteral 0x14d9420e0 <col:16> 'int' 92
    |     |     |-DefaultStmt 0x14d942208 <line:42:7, line:43:17>
    |     |     | `-BinaryOperator 0x14d9421e8 <col:9, col:17> 'char' '='
    |     |     |   |-UnaryOperator 0x14d942168 <col:9, col:12> 'char' lvalue prefix '*' cannot overflow
    |     |     |   | `-UnaryOperator 0x14d942150 <col:10, col:12> 'char *' postfix '++'
    |     |     |   |   `-DeclRefExpr 0x14d942130 <col:10> 'char *' lvalue ParmVar 0x14d9281a8 'to' 'char *'
    |     |     |   `-ImplicitCastExpr 0x14d9421d0 <col:16, col:17> 'char' <LValueToRValue>
    |     |     |     `-UnaryOperator 0x14d9421b8 <col:16, col:17> 'const char' lvalue prefix '*' cannot overflow
    |     |     |       `-ImplicitCastExpr 0x14d9421a0 <col:17> 'const char *' <LValueToRValue>
    |     |     |         `-DeclRefExpr 0x14d942180 <col:17> 'const char *' lvalue ParmVar 0x14d928228 'str' 'const char *'
    |     |     `-BreakStmt 0x14d942228 <line:44:9>
    |     `-IfStmt 0x14d942558 <line:47:10, line:50:16> has_else
    |       |-BinaryOperator 0x14d942388 <line:47:14, col:22> 'int' '=='
    |       | |-ImplicitCastExpr 0x14d942370 <col:14, col:15> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x14d942340 <col:14, col:15> 'char' <LValueToRValue>
    |       | |   `-UnaryOperator 0x14d942308 <col:14, col:15> 'const char' lvalue prefix '*' cannot overflow
    |       | |     `-ImplicitCastExpr 0x14d9422f0 <col:15> 'const char *' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x14d9422d0 <col:15> 'const char *' lvalue ParmVar 0x14d928228 'str' 'const char *'
    |       | `-ImplicitCastExpr 0x14d942358 <col:22> 'int' <LValueToRValue>
    |       |   `-DeclRefExpr 0x14d942320 <col:22> 'int' lvalue ParmVar 0x14d928328 'sep' 'int'
    |       |-BinaryOperator 0x14d942460 <line:48:7, col:18> 'char' '='
    |       | |-UnaryOperator 0x14d9423e0 <col:7, col:10> 'char' lvalue prefix '*' cannot overflow
    |       | | `-UnaryOperator 0x14d9423c8 <col:8, col:10> 'char *' postfix '++'
    |       | |   `-DeclRefExpr 0x14d9423a8 <col:8> 'char *' lvalue ParmVar 0x14d9281a8 'to' 'char *'
    |       | `-ImplicitCastExpr 0x14d942448 <col:14, col:18> 'char' <LValueToRValue>
    |       |   `-UnaryOperator 0x14d942430 <col:14, col:18> 'const char' lvalue prefix '*' cannot overflow
    |       |     `-UnaryOperator 0x14d942418 <col:15, col:18> 'const char *' postfix '++'
    |       |       `-DeclRefExpr 0x14d9423f8 <col:15> 'const char *' lvalue ParmVar 0x14d928228 'str' 'const char *'
    |       `-BinaryOperator 0x14d942538 <line:50:7, col:16> 'char' '='
    |         |-UnaryOperator 0x14d9424b8 <col:7, col:10> 'char' lvalue prefix '*' cannot overflow
    |         | `-UnaryOperator 0x14d9424a0 <col:8, col:10> 'char *' postfix '++'
    |         |   `-DeclRefExpr 0x14d942480 <col:8> 'char *' lvalue ParmVar 0x14d9281a8 'to' 'char *'
    |         `-ImplicitCastExpr 0x14d942520 <col:15, col:16> 'char' <LValueToRValue>
    |           `-UnaryOperator 0x14d942508 <col:15, col:16> 'const char' lvalue prefix '*' cannot overflow
    |             `-ImplicitCastExpr 0x14d9424f0 <col:16> 'const char *' <LValueToRValue>
    |               `-DeclRefExpr 0x14d9424d0 <col:16> 'const char *' lvalue ParmVar 0x14d928228 'str' 'const char *'
    |-BinaryOperator 0x14d942690 <line:52:3, col:8> 'char' '='
    | |-UnaryOperator 0x14d942640 <col:3, col:4> 'char' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x14d942628 <col:4> 'char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x14d942608 <col:4> 'char *' lvalue ParmVar 0x14d9281a8 'to' 'char *'
    | `-ImplicitCastExpr 0x14d942678 <col:8> 'char' <IntegralCast>
    |   `-IntegerLiteral 0x14d942658 <col:8> 'int' 0
    `-ReturnStmt 0x14d942758 <line:53:3, col:15>
      `-ImplicitCastExpr 0x14d942740 <col:10, col:15> 'int' <IntegralCast>
        `-BinaryOperator 0x14d942720 <col:10, col:15> 'long' '-'
          |-ImplicitCastExpr 0x14d9426f0 <col:10> 'char *' <LValueToRValue>
          | `-DeclRefExpr 0x14d9426b0 <col:10> 'char *' lvalue ParmVar 0x14d9281a8 'to' 'char *'
          `-ImplicitCastExpr 0x14d942708 <col:15> 'char *' <LValueToRValue>
            `-DeclRefExpr 0x14d9426d0 <col:15> 'char *' lvalue Var 0x14d9285b8 'start' 'char *'
