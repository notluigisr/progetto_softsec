TranslationUnitDecl 0x120855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1208564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x120855bd0 '__int128'
|-TypedefDecl 0x120856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x120855bf0 'unsigned __int128'
|-TypedefDecl 0x12100be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12100bc00 'struct __NSConstantString_tag'
|   `-Record 0x120856580 '__NSConstantString_tag'
|-TypedefDecl 0x12100be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x120855d90 '__SVInt8_t'
|-TypedefDecl 0x12100bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x120855db0 '__SVInt16_t'
|-TypedefDecl 0x12100bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x120855dd0 '__SVInt32_t'
|-TypedefDecl 0x12100bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x120855df0 '__SVInt64_t'
|-TypedefDecl 0x12100c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x120855e10 '__SVUint8_t'
|-TypedefDecl 0x12100c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x120855e30 '__SVUint16_t'
|-TypedefDecl 0x12100c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x120855e50 '__SVUint32_t'
|-TypedefDecl 0x12100c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x120855e70 '__SVUint64_t'
|-TypedefDecl 0x12100c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x120855e90 '__SVFloat16_t'
|-TypedefDecl 0x12100c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x120855eb0 '__SVFloat32_t'
|-TypedefDecl 0x12100c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x120855ed0 '__SVFloat64_t'
|-TypedefDecl 0x12100c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x120855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12100c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x120855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12100c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x120855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12100c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x120855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12100c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x120855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12100c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x120855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12100c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x120855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12100c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x120855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12100c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x120855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12100c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x120856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12100c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x120856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12100c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x120856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12100c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x120856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12100c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x120856090 '__clang_svint8x3_t'
|-TypedefDecl 0x12100c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1208560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12100c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1208560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12100c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1208560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12100c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x120856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12100ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x120856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12100cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x120856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12100cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x120856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12100cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x120856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12100d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1208561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12100d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1208561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12100d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1208561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12100d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x120856210 '__clang_svint8x4_t'
|-TypedefDecl 0x12100d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x120856230 '__clang_svint16x4_t'
|-TypedefDecl 0x12100d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x120856250 '__clang_svint32x4_t'
|-TypedefDecl 0x12100d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x120856270 '__clang_svint64x4_t'
|-TypedefDecl 0x12100d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x120856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12100d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1208562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12100d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1208562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12100d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1208562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12100d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x120856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12100d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x120856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12100d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x120856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12100d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x120856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12100da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x120856390 '__SVBool_t'
|-TypedefDecl 0x12100da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1208563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12100dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1208563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12100db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1208563f0 '__SVCount_t'
|-TypedefDecl 0x12100dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12100dbb0 'char *'
|   `-BuiltinType 0x1208556b0 'char'
|-TypedefDecl 0x12100dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12100dbb0 'char *'
|   `-BuiltinType 0x1208556b0 'char'
|-FunctionDecl 0x12100e0f8 <dataset_diviso_filec/func22206_nonvuln.c:1:1, line:52:1> line:1:1 invalid addselectionjob 'int (int *, char **, int, int *, int, int)'
| |-ParmVarDecl 0x12100dd28 <col:17, col:23> col:23 invalid pool 'int *'
| |-ParmVarDecl 0x12100ddd8 <col:29, col:36> col:36 used pieces 'char **'
| |-ParmVarDecl 0x12100de58 <col:44, col:48> col:48 used npieces 'int'
| |-ParmVarDecl 0x12100ded8 <col:57, col:64> col:64 invalid jobqueue 'int *'
| |-ParmVarDecl 0x12100df58 <col:74, col:78> col:78 used type 'int'
| |-ParmVarDecl 0x12100dfd8 <col:84, col:88> col:88 used keyname 'int'
| `-CompoundStmt 0x120926148 <line:2:1, line:52:1>
|   |-DeclStmt 0x12100e308 <line:4:3, col:15>
|   | |-VarDecl 0x12100e1e8 <col:3, col:7> col:7 used i 'int'
|   | `-VarDecl 0x12100e268 <col:3, col:14> col:10 used r 'int' cinit
|   |   `-IntegerLiteral 0x12100e2d0 <col:14> 'int' 0
|   |-DeclStmt 0x12100e3a0 <line:5:3, col:15>
|   | `-VarDecl 0x12100e338 <col:3, col:7> col:7 used selflags 'int'
|   |-DeclStmt 0x121027468 <line:7:3, col:11>
|   | `-VarDecl 0x121027400 <col:3, col:9> col:9 used sp 'char *'
|   |-IfStmt 0x121028008 <line:12:3, line:13:49>
|   | |-RecoveryExpr 0x121027ce0 <line:12:7, col:19> '_Bool' contains-errors
|   | `-ReturnStmt 0x121027ff8 <line:13:5, col:49>
|   |   `-CallExpr 0x121027fb8 <col:12, col:49> '<dependent type>' contains-errors
|   |     |-DeclRefExpr 0x121027e60 <col:12> 'int ()' Function 0x121027da8 'pool_error' 'int ()'
|   |     |-RecoveryExpr 0x121027e80 <col:23> '<dependent type>' contains-errors lvalue
|   |     |-UnaryOperator 0x121027ec0 <col:29, col:30> 'int' prefix '-'
|   |     | `-IntegerLiteral 0x121027ea0 <col:30> 'int' 1
|   |     |-StringLiteral 0x121027f20 <col:33> 'char[4]' lvalue "STR"
|   |     `-ArraySubscriptExpr 0x121027f98 <col:40, col:48> 'char *' lvalue
|   |       |-ImplicitCastExpr 0x121027f80 <col:40> 'char **' <LValueToRValue>
|   |       | `-DeclRefExpr 0x121027f40 <col:40> 'char **' lvalue ParmVar 0x12100ddd8 'pieces' 'char **'
|   |       `-IntegerLiteral 0x121027f60 <col:47> 'int' 0
|   |-IfStmt 0x1209235a0 <line:15:3, line:25:5>
|   | |-BinaryOperator 0x1210280b8 <line:15:7, col:17> 'int' '>'
|   | | |-ImplicitCastExpr 0x1210280a0 <col:7> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x121028060 <col:7> 'int' lvalue ParmVar 0x12100de58 'npieces' 'int'
|   | | `-IntegerLiteral 0x121028080 <col:17> 'int' 3
|   | `-CompoundStmt 0x120923580 <line:16:5, line:25:5>
|   |   |-DeclStmt 0x121028240 <line:17:7, col:40>
|   |   | `-VarDecl 0x1210280f0 <col:7, col:39> col:13 used flags 'char *' cinit
|   |   |   `-ImplicitCastExpr 0x121028228 <col:21, col:39> 'char *' <LValueToRValue>
|   |   |     `-ArraySubscriptExpr 0x121028208 <col:21, col:39> 'char *' lvalue
|   |   |       |-ImplicitCastExpr 0x1210281f0 <col:21> 'char **' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x121028158 <col:21> 'char **' lvalue ParmVar 0x12100ddd8 'pieces' 'char **'
|   |   |       `-BinaryOperator 0x1210281d0 <col:28, col:38> 'int' '-'
|   |   |         |-ImplicitCastExpr 0x1210281b8 <col:28> 'int' <LValueToRValue>
|   |   |         | `-DeclRefExpr 0x121028178 <col:28> 'int' lvalue ParmVar 0x12100de58 'npieces' 'int'
|   |   |         `-IntegerLiteral 0x121028198 <col:38> 'int' 1
|   |   `-IfStmt 0x120923560 <line:18:7, line:24:2>
|   |     |-BinaryOperator 0x120923168 <line:18:11, col:56> 'int' '&&'
|   |     | |-BinaryOperator 0x1210282f0 <col:11, col:21> 'int' '=='
|   |     | | |-ImplicitCastExpr 0x1210282d8 <col:11, col:12> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x1210282c0 <col:11, col:12> 'char' <LValueToRValue>
|   |     | | |   `-UnaryOperator 0x121028290 <col:11, col:12> 'char' lvalue prefix '*' cannot overflow
|   |     | | |     `-ImplicitCastExpr 0x121028278 <col:12> 'char *' <LValueToRValue>
|   |     | | |       `-DeclRefExpr 0x121028258 <col:12> 'char *' lvalue Var 0x1210280f0 'flags' 'char *'
|   |     | | `-CharacterLiteral 0x1210282a8 <col:21> 'int' 91
|   |     | `-BinaryOperator 0x120923148 <col:28, col:56> 'int' '=='
|   |     |   |-ImplicitCastExpr 0x120923130 <col:28, col:51> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x120923118 <col:28, col:51> 'char' <LValueToRValue>
|   |     |   |   `-ArraySubscriptExpr 0x1209230e0 <col:28, col:51> 'char' lvalue
|   |     |   |     |-ImplicitCastExpr 0x1209230c8 <col:28> 'char *' <LValueToRValue>
|   |     |   |     | `-DeclRefExpr 0x121028310 <col:28> 'char *' lvalue Var 0x1210280f0 'flags' 'char *'
|   |     |   |     `-BinaryOperator 0x1209230a8 <col:34, col:50> 'unsigned long' '-'
|   |     |   |       |-CallExpr 0x120923018 <col:34, col:46> 'unsigned long'
|   |     |   |       | |-ImplicitCastExpr 0x120923000 <col:34> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |     |   |       | | `-DeclRefExpr 0x120922f70 <col:34> 'unsigned long (const char *)' Function 0x120922e00 'strlen' 'unsigned long (const char *)'
|   |     |   |       | `-ImplicitCastExpr 0x120923058 <col:41> 'const char *' <NoOp>
|   |     |   |       |   `-ImplicitCastExpr 0x120923040 <col:41> 'char *' <LValueToRValue>
|   |     |   |       |     `-DeclRefExpr 0x120922f90 <col:41> 'char *' lvalue Var 0x1210280f0 'flags' 'char *'
|   |     |   |       `-ImplicitCastExpr 0x120923090 <col:50> 'unsigned long' <IntegralCast>
|   |     |   |         `-IntegerLiteral 0x120923070 <col:50> 'int' 1
|   |     |   `-CharacterLiteral 0x120923100 <col:56> 'int' 93
|   |     `-CompoundStmt 0x120923538 <line:19:2, line:24:2>
|   |       |-UnaryOperator 0x1209231a8 <line:20:4, col:11> 'int' postfix '--'
|   |       | `-DeclRefExpr 0x120923188 <col:4> 'int' lvalue ParmVar 0x12100de58 'npieces' 'int'
|   |       |-UnaryOperator 0x1209231e0 <line:21:4, col:9> 'char *' postfix '++'
|   |       | `-DeclRefExpr 0x1209231c0 <col:4> 'char *' lvalue Var 0x1210280f0 'flags' 'char *'
|   |       `-BinaryOperator 0x1209233a8 <line:22:4, col:31> 'char' '='
|   |         |-ArraySubscriptExpr 0x120923350 <col:4, col:27> 'char' lvalue
|   |         | |-ImplicitCastExpr 0x120923338 <col:4> 'char *' <LValueToRValue>
|   |         | | `-DeclRefExpr 0x1209231f8 <col:4> 'char *' lvalue Var 0x1210280f0 'flags' 'char *'
|   |         | `-BinaryOperator 0x120923318 <col:10, col:26> 'unsigned long' '-'
|   |         |   |-CallExpr 0x120923288 <col:10, col:22> 'unsigned long'
|   |         |   | |-ImplicitCastExpr 0x120923270 <col:10> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |         |   | | `-DeclRefExpr 0x120923218 <col:10> 'unsigned long (const char *)' Function 0x120922e00 'strlen' 'unsigned long (const char *)'
|   |         |   | `-ImplicitCastExpr 0x1209232c8 <col:17> 'const char *' <NoOp>
|   |         |   |   `-ImplicitCastExpr 0x1209232b0 <col:17> 'char *' <LValueToRValue>
|   |         |   |     `-DeclRefExpr 0x120923238 <col:17> 'char *' lvalue Var 0x1210280f0 'flags' 'char *'
|   |         |   `-ImplicitCastExpr 0x120923300 <col:26> 'unsigned long' <IntegralCast>
|   |         |     `-IntegerLiteral 0x1209232e0 <col:26> 'int' 1
|   |         `-ImplicitCastExpr 0x120923390 <col:31> 'char' <IntegralCast>
|   |           `-IntegerLiteral 0x120923370 <col:31> 'int' 0
|   |-IfStmt 0x120923718 <line:26:3, line:27:38>
|   | |-BinaryOperator 0x120923618 <line:26:7, col:17> 'int' '<'
|   | | |-ImplicitCastExpr 0x120923600 <col:7> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1209235c0 <col:7> 'int' lvalue ParmVar 0x12100de58 'npieces' 'int'
|   | | `-IntegerLiteral 0x1209235e0 <col:17> 'int' 4
|   | `-ReturnStmt 0x120923708 <line:27:5, col:38>
|   |   `-CallExpr 0x1209236d0 <col:12, col:38> '<dependent type>' contains-errors
|   |     |-DeclRefExpr 0x120923638 <col:12> 'int ()' Function 0x121027da8 'pool_error' 'int ()'
|   |     |-RecoveryExpr 0x120923658 <col:23> '<dependent type>' contains-errors lvalue
|   |     |-UnaryOperator 0x120923698 <col:29, col:30> 'int' prefix '-'
|   |     | `-IntegerLiteral 0x120923678 <col:30> 'int' 1
|   |     `-StringLiteral 0x1209236b0 <col:33> 'char[4]' lvalue "STR"
|   |-BinaryOperator 0x120923978 <line:28:3, col:52> 'int' contains-errors '='
|   | |-DeclRefExpr 0x120923738 <col:3> 'int' lvalue Var 0x12100e338 'selflags' 'int'
|   | `-CallExpr 0x120923948 <col:14, col:52> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x120923838 <col:14> 'int ()' Function 0x120923780 'str2selflags' 'int ()'
|   |   |-RecoveryExpr 0x120923858 <col:27> '<dependent type>' contains-errors lvalue
|   |   `-ArraySubscriptExpr 0x120923928 <col:33, col:51> 'char *' lvalue
|   |     |-ImplicitCastExpr 0x120923910 <col:33> 'char **' <LValueToRValue>
|   |     | `-DeclRefExpr 0x120923878 <col:33> 'char **' lvalue ParmVar 0x12100ddd8 'pieces' 'char **'
|   |     `-BinaryOperator 0x1209238f0 <col:40, col:50> 'int' '-'
|   |       |-ImplicitCastExpr 0x1209238d8 <col:40> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x120923898 <col:40> 'int' lvalue ParmVar 0x12100de58 'npieces' 'int'
|   |       `-IntegerLiteral 0x1209238b8 <col:50> 'int' 1
|   |-ForStmt 0x120923d60 <line:30:3, line:32:13>
|   | |-BinaryOperator 0x120923a48 <line:30:8, col:21> 'char *' '='
|   | | |-DeclRefExpr 0x120923998 <col:8> 'char *' lvalue Var 0x121027400 'sp' 'char *'
|   | | `-ImplicitCastExpr 0x120923a30 <col:13, col:21> 'char *' <LValueToRValue>
|   | |   `-ArraySubscriptExpr 0x120923a10 <col:13, col:21> 'char *' lvalue
|   | |     |-ImplicitCastExpr 0x1209239f8 <col:13> 'char **' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x1209239b8 <col:13> 'char **' lvalue ParmVar 0x12100ddd8 'pieces' 'char **'
|   | |     `-IntegerLiteral 0x1209239d8 <col:20> 'int' 2
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x120923b88 <col:24, col:47> 'int' '<'
|   | | |-ImplicitCastExpr 0x120923b58 <col:24> 'char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x120923a68 <col:24> 'char *' lvalue Var 0x121027400 'sp' 'char *'
|   | | `-ImplicitCastExpr 0x120923b70 <col:29, col:47> 'char *' <LValueToRValue>
|   | |   `-ArraySubscriptExpr 0x120923b38 <col:29, col:47> 'char *' lvalue
|   | |     |-ImplicitCastExpr 0x120923b20 <col:29> 'char **' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x120923a88 <col:29> 'char **' lvalue ParmVar 0x12100ddd8 'pieces' 'char **'
|   | |     `-BinaryOperator 0x120923b00 <col:36, col:46> 'int' '-'
|   | |       |-ImplicitCastExpr 0x120923ae8 <col:36> 'int' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x120923aa8 <col:36> 'int' lvalue ParmVar 0x12100de58 'npieces' 'int'
|   | |       `-IntegerLiteral 0x120923ac8 <col:46> 'int' 2
|   | |-UnaryOperator 0x120923bc8 <col:50, col:52> 'char *' postfix '++'
|   | | `-DeclRefExpr 0x120923ba8 <col:50> 'char *' lvalue Var 0x121027400 'sp' 'char *'
|   | `-IfStmt 0x120923d40 <line:31:5, line:32:13>
|   |   |-BinaryOperator 0x120923c80 <line:31:9, col:16> 'int' '=='
|   |   | |-ImplicitCastExpr 0x120923c68 <col:9, col:10> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x120923c50 <col:9, col:10> 'char' <LValueToRValue>
|   |   | |   `-UnaryOperator 0x120923c18 <col:9, col:10> 'char' lvalue prefix '*' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x120923c00 <col:10> 'char *' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x120923be0 <col:10> 'char *' lvalue Var 0x121027400 'sp' 'char *'
|   |   | `-IntegerLiteral 0x120923c30 <col:16> 'int' 0
|   |   `-BinaryOperator 0x120923d20 <line:32:7, col:13> 'char' '='
|   |     |-UnaryOperator 0x120923cd8 <col:7, col:8> 'char' lvalue prefix '*' cannot overflow
|   |     | `-ImplicitCastExpr 0x120923cc0 <col:8> 'char *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x120923ca0 <col:8> 'char *' lvalue Var 0x121027400 'sp' 'char *'
|   |     `-ImplicitCastExpr 0x120923d08 <col:13> 'char' <IntegralCast>
|   |       `-CharacterLiteral 0x120923cf0 <col:13> 'int' 32
|   |-CallExpr 0x120923f68 <line:33:3, col:18> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x120923eb8 <col:3> 'int ()' Function 0x120923e00 'queue_init' 'int ()'
|   | `-UnaryOperator 0x120923f50 <col:14, col:15> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   `-RecoveryExpr 0x120923f30 <col:15> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x120924620 <line:34:3, line:39:5>
|   | |-RecoveryExpr 0x120924038 <line:34:7, col:72> '_Bool' contains-errors
|   | `-CompoundStmt 0x120924608 <line:35:5, line:39:5>
|   |   `-CallExpr 0x1209245e0 <line:38:7, col:27> '<dependent type>' contains-errors
|   |     |-DeclRefExpr 0x1209245a0 <col:7> 'int ()' Function 0x1209244e8 'queue_empty' 'int ()'
|   |     `-RecoveryExpr 0x1209245c0 <col:19> '<dependent type>' contains-errors lvalue
|   `-ReturnStmt 0x120926138 <line:51:3, col:10>
|     `-ImplicitCastExpr 0x120926120 <col:10> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x120926100 <col:10> 'int' lvalue Var 0x12100e268 'r' 'int'
|-FunctionDecl 0x1210279b0 <line:10:10> col:10 implicit used strcmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x121027ab0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x121027b18 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x121027a58 <<invalid sloc>> Implicit 887
`-FunctionDecl 0x120922e00 <line:18:34> col:34 implicit used strlen 'unsigned long (const char *)' extern
  |-ParmVarDecl 0x120922f00 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x120922ea8 <<invalid sloc>> Implicit 902
