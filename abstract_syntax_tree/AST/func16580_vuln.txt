TranslationUnitDecl 0x14c855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x14c8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x14c855bd0 '__int128'
|-TypedefDecl 0x14c856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x14c855bf0 'unsigned __int128'
|-TypedefDecl 0x14d00be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x14d00bc00 'struct __NSConstantString_tag'
|   `-Record 0x14c856580 '__NSConstantString_tag'
|-TypedefDecl 0x14d00be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x14c855d90 '__SVInt8_t'
|-TypedefDecl 0x14d00bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x14c855db0 '__SVInt16_t'
|-TypedefDecl 0x14d00bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x14c855dd0 '__SVInt32_t'
|-TypedefDecl 0x14d00bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x14c855df0 '__SVInt64_t'
|-TypedefDecl 0x14d00c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x14c855e10 '__SVUint8_t'
|-TypedefDecl 0x14d00c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x14c855e30 '__SVUint16_t'
|-TypedefDecl 0x14d00c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x14c855e50 '__SVUint32_t'
|-TypedefDecl 0x14d00c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x14c855e70 '__SVUint64_t'
|-TypedefDecl 0x14d00c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x14c855e90 '__SVFloat16_t'
|-TypedefDecl 0x14d00c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x14c855eb0 '__SVFloat32_t'
|-TypedefDecl 0x14d00c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x14c855ed0 '__SVFloat64_t'
|-TypedefDecl 0x14d00c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x14c855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x14d00c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x14c855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x14d00c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x14c855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x14d00c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x14c855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x14d00c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x14c855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x14d00c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x14c855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x14d00c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x14c855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x14d00c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x14c855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x14d00c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x14c855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x14d00c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x14c856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x14d00c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x14c856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x14d00c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x14c856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x14d00c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x14c856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x14d00c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x14c856090 '__clang_svint8x3_t'
|-TypedefDecl 0x14d00c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x14c8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x14d00c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x14c8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x14d00c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x14c8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x14d00c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x14c856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x14d00ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x14c856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x14d00cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x14c856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x14d00cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x14c856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x14d00cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x14c856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x14d00d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x14c8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x14d00d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x14c8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x14d00d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x14c8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x14d00d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x14c856210 '__clang_svint8x4_t'
|-TypedefDecl 0x14d00d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x14c856230 '__clang_svint16x4_t'
|-TypedefDecl 0x14d00d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x14c856250 '__clang_svint32x4_t'
|-TypedefDecl 0x14d00d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x14c856270 '__clang_svint64x4_t'
|-TypedefDecl 0x14d00d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x14c856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x14d00d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x14c8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x14d00d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x14c8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x14d00d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x14c8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x14d00d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x14c856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x14d00d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x14c856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x14d00d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x14c856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x14d00d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x14c856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x14d00da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x14c856390 '__SVBool_t'
|-TypedefDecl 0x14d00da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x14c8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x14d00dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x14c8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x14d00db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x14c8563f0 '__SVCount_t'
|-TypedefDecl 0x14d00dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x14d00dbb0 'char *'
|   `-BuiltinType 0x14c8556b0 'char'
|-TypedefDecl 0x14d00dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x14d00dbb0 'char *'
|   `-BuiltinType 0x14c8556b0 'char'
`-FunctionDecl 0x14d00df68 <dataset_diviso_filec/func16580_vuln.c:1:1, line:78:1> line:1:1 invalid mobility_opt_print 'int (int *, const char *, const unsigned int)'
  |-ParmVarDecl 0x14d00dd28 <col:20, col:40> col:40 invalid ndo 'int *'
  |-ParmVarDecl 0x14d00dda8 <line:2:20, col:34> col:34 used bp 'const char *'
  |-ParmVarDecl 0x14d00de28 <col:38, col:53> col:53 used len 'const unsigned int'
  `-CompoundStmt 0x14d80ada0 <line:3:1, line:78:1>
    |-DeclStmt 0x14d00e140 <line:4:2, col:20>
    | |-VarDecl 0x14d00e040 <col:2, col:11> col:11 used i 'unsigned int'
    | `-VarDecl 0x14d00e0c0 <col:2, col:14> col:14 used optlen 'unsigned int'
    |-ForStmt 0x14d80ace8 <line:6:2, line:73:2>
    | |-BinaryOperator 0x14d00e1b0 <line:6:7, col:11> 'unsigned int' '='
    | | |-DeclRefExpr 0x14d00e158 <col:7> 'unsigned int' lvalue Var 0x14d00e040 'i' 'unsigned int'
    | | `-ImplicitCastExpr 0x14d00e198 <col:11> 'unsigned int' <IntegralCast>
    | |   `-IntegerLiteral 0x14d00e178 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x14d00e240 <col:14, col:18> 'int' '<'
    | | |-ImplicitCastExpr 0x14d00e210 <col:14> 'unsigned int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14d00e1d0 <col:14> 'unsigned int' lvalue Var 0x14d00e040 'i' 'unsigned int'
    | | `-ImplicitCastExpr 0x14d00e228 <col:18> 'unsigned int' <LValueToRValue>
    | |   `-DeclRefExpr 0x14d00e1f0 <col:18> 'const unsigned int' lvalue ParmVar 0x14d00de28 'len' 'const unsigned int'
    | |-CompoundAssignOperator 0x14d00e2b8 <col:23, col:28> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    | | |-DeclRefExpr 0x14d00e260 <col:23> 'unsigned int' lvalue Var 0x14d00e040 'i' 'unsigned int'
    | | `-ImplicitCastExpr 0x14d00e2a0 <col:28> 'unsigned int' <LValueToRValue>
    | |   `-DeclRefExpr 0x14d00e280 <col:28> 'unsigned int' lvalue Var 0x14d00e0c0 'optlen' 'unsigned int'
    | `-CompoundStmt 0x14d80acb0 <col:36, line:73:2>
    |   |-CallExpr 0x14c922fb8 <line:7:3, col:18> 'int'
    |   | |-ImplicitCastExpr 0x14c922fa0 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x14c922eb8 <col:3> 'int ()' Function 0x14c922e00 'ND_TCHECK' 'int ()'
    |   | `-ImplicitCastExpr 0x14c922ff8 <col:13, col:17> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x14c922fe0 <col:13, col:17> 'char' <LValueToRValue>
    |   |     `-ArraySubscriptExpr 0x14c922f48 <col:13, col:17> 'const char' lvalue
    |   |       |-ImplicitCastExpr 0x14c922f18 <col:13> 'const char *' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x14c922ed8 <col:13> 'const char *' lvalue ParmVar 0x14d00dda8 'bp' 'const char *'
    |   |       `-ImplicitCastExpr 0x14c922f30 <col:16> 'unsigned int' <LValueToRValue>
    |   |         `-DeclRefExpr 0x14c922ef8 <col:16> 'unsigned int' lvalue Var 0x14d00e040 'i' 'unsigned int'
    |   |-IfStmt 0x14c923710 <line:8:3, line:17:3> has_else
    |   | |-BinaryOperator 0x14c923198 <line:8:7, col:16> 'int' contains-errors '=='
    |   | | |-ArraySubscriptExpr 0x14c923158 <col:7, col:11> 'const char' lvalue
    |   | | | |-ImplicitCastExpr 0x14c923128 <col:7> 'const char *' <LValueToRValue>
    |   | | | | `-DeclRefExpr 0x14c923010 <col:7> 'const char *' lvalue ParmVar 0x14d00dda8 'bp' 'const char *'
    |   | | | `-ImplicitCastExpr 0x14c923140 <col:10> 'unsigned int' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x14c923030 <col:10> 'unsigned int' lvalue Var 0x14d00e040 'i' 'unsigned int'
    |   | | `-RecoveryExpr 0x14c923178 <col:16> '<dependent type>' contains-errors lvalue
    |   | |-BinaryOperator 0x14c923210 <line:9:4, col:13> 'unsigned int' '='
    |   | | |-DeclRefExpr 0x14c9231b8 <col:4> 'unsigned int' lvalue Var 0x14d00e0c0 'optlen' 'unsigned int'
    |   | | `-ImplicitCastExpr 0x14c9231f8 <col:13> 'unsigned int' <IntegralCast>
    |   | |   `-IntegerLiteral 0x14c9231d8 <col:13> 'int' 1
    |   | `-CompoundStmt 0x14c9236f8 <line:10:8, line:17:3>
    |   |   `-IfStmt 0x14c9236c8 <line:11:4, line:16:10> has_else
    |   |     |-BinaryOperator 0x14c9232f8 <line:11:8, col:16> 'int' '<'
    |   |     | |-BinaryOperator 0x14c9232a0 <col:8, col:12> 'unsigned int' '+'
    |   |     | | |-ImplicitCastExpr 0x14c923270 <col:8> 'unsigned int' <LValueToRValue>
    |   |     | | | `-DeclRefExpr 0x14c923230 <col:8> 'unsigned int' lvalue Var 0x14d00e040 'i' 'unsigned int'
    |   |     | | `-ImplicitCastExpr 0x14c923288 <col:12> 'unsigned int' <IntegralCast>
    |   |     | |   `-IntegerLiteral 0x14c923250 <col:12> 'int' 1
    |   |     | `-ImplicitCastExpr 0x14c9232e0 <col:16> 'unsigned int' <LValueToRValue>
    |   |     |   `-DeclRefExpr 0x14c9232c0 <col:16> 'const unsigned int' lvalue ParmVar 0x14d00de28 'len' 'const unsigned int'
    |   |     |-CompoundStmt 0x14c923640 <col:21, line:14:4>
    |   |     | |-CallExpr 0x14c923438 <line:12:5, col:24> 'int'
    |   |     | | |-ImplicitCastExpr 0x14c923420 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |   |     | | | `-DeclRefExpr 0x14c923318 <col:5> 'int ()' Function 0x14c922e00 'ND_TCHECK' 'int ()'
    |   |     | | `-ImplicitCastExpr 0x14c923478 <col:15, col:23> 'int' <IntegralCast>
    |   |     | |   `-ImplicitCastExpr 0x14c923460 <col:15, col:23> 'char' <LValueToRValue>
    |   |     | |     `-ArraySubscriptExpr 0x14c923400 <col:15, col:23> 'const char' lvalue
    |   |     | |       |-ImplicitCastExpr 0x14c9233e8 <col:15> 'const char *' <LValueToRValue>
    |   |     | |       | `-DeclRefExpr 0x14c923338 <col:15> 'const char *' lvalue ParmVar 0x14d00dda8 'bp' 'const char *'
    |   |     | |       `-BinaryOperator 0x14c9233c8 <col:18, col:22> 'unsigned int' '+'
    |   |     | |         |-ImplicitCastExpr 0x14c923398 <col:18> 'unsigned int' <LValueToRValue>
    |   |     | |         | `-DeclRefExpr 0x14c923358 <col:18> 'unsigned int' lvalue Var 0x14d00e040 'i' 'unsigned int'
    |   |     | |         `-ImplicitCastExpr 0x14c9233b0 <col:22> 'unsigned int' <IntegralCast>
    |   |     | |           `-IntegerLiteral 0x14c923378 <col:22> 'int' 1
    |   |     | `-BinaryOperator 0x14c923620 <line:13:5, col:26> 'unsigned int' '='
    |   |     |   |-DeclRefExpr 0x14c923490 <col:5> 'unsigned int' lvalue Var 0x14d00e0c0 'optlen' 'unsigned int'
    |   |     |   `-ImplicitCastExpr 0x14c923608 <col:14, col:26> 'unsigned int' <IntegralCast>
    |   |     |     `-BinaryOperator 0x14c9235e8 <col:14, col:26> 'int' '+'
    |   |     |       |-ImplicitCastExpr 0x14c9235d0 <col:14, col:22> 'int' <IntegralCast>
    |   |     |       | `-ImplicitCastExpr 0x14c9235b8 <col:14, col:22> 'char' <LValueToRValue>
    |   |     |       |   `-ArraySubscriptExpr 0x14c923578 <col:14, col:22> 'const char' lvalue
    |   |     |       |     |-ImplicitCastExpr 0x14c923560 <col:14> 'const char *' <LValueToRValue>
    |   |     |       |     | `-DeclRefExpr 0x14c9234b0 <col:14> 'const char *' lvalue ParmVar 0x14d00dda8 'bp' 'const char *'
    |   |     |       |     `-BinaryOperator 0x14c923540 <col:17, col:21> 'unsigned int' '+'
    |   |     |       |       |-ImplicitCastExpr 0x14c923510 <col:17> 'unsigned int' <LValueToRValue>
    |   |     |       |       | `-DeclRefExpr 0x14c9234d0 <col:17> 'unsigned int' lvalue Var 0x14d00e040 'i' 'unsigned int'
    |   |     |       |       `-ImplicitCastExpr 0x14c923528 <col:21> 'unsigned int' <IntegralCast>
    |   |     |       |         `-IntegerLiteral 0x14c9234f0 <col:21> 'int' 1
    |   |     |       `-IntegerLiteral 0x14c923598 <col:26> 'int' 2
    |   |     `-GotoStmt 0x14c9236b0 <line:16:5, col:10> 'trunc' 0x14c923660
    |   |-IfStmt 0x14c923840 <line:18:3, line:19:9>
    |   | |-BinaryOperator 0x14c923808 <line:18:7, col:20> 'int' '>'
    |   | | |-BinaryOperator 0x14c9237b0 <col:7, col:11> 'unsigned int' '+'
    |   | | | |-ImplicitCastExpr 0x14c923780 <col:7> 'unsigned int' <LValueToRValue>
    |   | | | | `-DeclRefExpr 0x14c923740 <col:7> 'unsigned int' lvalue Var 0x14d00e040 'i' 'unsigned int'
    |   | | | `-ImplicitCastExpr 0x14c923798 <col:11> 'unsigned int' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x14c923760 <col:11> 'unsigned int' lvalue Var 0x14d00e0c0 'optlen' 'unsigned int'
    |   | | `-ImplicitCastExpr 0x14c9237f0 <col:20> 'unsigned int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x14c9237d0 <col:20> 'const unsigned int' lvalue ParmVar 0x14d00de28 'len' 'const unsigned int'
    |   | `-GotoStmt 0x14c923828 <line:19:4, col:9> 'trunc' 0x14c923660
    |   |-CallExpr 0x14c923980 <line:20:3, col:27> 'int'
    |   | |-ImplicitCastExpr 0x14c923968 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x14c923860 <col:3> 'int ()' Function 0x14c922e00 'ND_TCHECK' 'int ()'
    |   | `-ImplicitCastExpr 0x14c9239c0 <col:13, col:26> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x14c9239a8 <col:13, col:26> 'char' <LValueToRValue>
    |   |     `-ArraySubscriptExpr 0x14c923948 <col:13, col:26> 'const char' lvalue
    |   |       |-ImplicitCastExpr 0x14c923930 <col:13> 'const char *' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x14c923880 <col:13> 'const char *' lvalue ParmVar 0x14d00dda8 'bp' 'const char *'
    |   |       `-BinaryOperator 0x14c923910 <col:16, col:20> 'unsigned int' '+'
    |   |         |-ImplicitCastExpr 0x14c9238e0 <col:16> 'unsigned int' <LValueToRValue>
    |   |         | `-DeclRefExpr 0x14c9238a0 <col:16> 'unsigned int' lvalue Var 0x14d00e040 'i' 'unsigned int'
    |   |         `-ImplicitCastExpr 0x14c9238f8 <col:20> 'unsigned int' <LValueToRValue>
    |   |           `-DeclRefExpr 0x14c9238c0 <col:20> 'unsigned int' lvalue Var 0x14d00e0c0 'optlen' 'unsigned int'
    |   `-SwitchStmt 0x14c923a98 <line:22:3, line:72:3>
    |     |-ImplicitCastExpr 0x14c923a80 <line:22:11, col:15> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x14c923a68 <col:11, col:15> 'char' <LValueToRValue>
    |     |   `-ArraySubscriptExpr 0x14c923a48 <col:11, col:15> 'const char' lvalue
    |     |     |-ImplicitCastExpr 0x14c923a18 <col:11> 'const char *' <LValueToRValue>
    |     |     | `-DeclRefExpr 0x14c9239d8 <col:11> 'const char *' lvalue ParmVar 0x14d00dda8 'bp' 'const char *'
    |     |     `-ImplicitCastExpr 0x14c923a30 <col:14> 'unsigned int' <LValueToRValue>
    |     |       `-DeclRefExpr 0x14c9239f8 <col:14> 'unsigned int' lvalue Var 0x14d00e040 'i' 'unsigned int'
    |     `-CompoundStmt 0x14d80ac00 <col:18, line:72:3>
    |       |-CallExpr 0x14c923ca0 <line:24:4, col:25> '<dependent type>' contains-errors
    |       | |-DeclRefExpr 0x14c923bb8 <col:4> 'int ()' Function 0x14c923b00 'ND_PRINT' 'int ()'
    |       | `-ParenExpr 0x14c923c80 <col:13, col:24> 'char[4]' contains-errors
    |       |   `-BinaryOperator 0x14c923c60 <col:14, col:19> 'char[4]' contains-errors ','
    |       |     |-RecoveryExpr 0x14c923bd8 <col:14> '<dependent type>' contains-errors lvalue
    |       |     `-StringLiteral 0x14c923c40 <col:19> 'char[4]' lvalue "STR"
    |       |-BreakStmt 0x14c923cc8 <line:25:4>
    |       |-IfStmt 0x14d808390 <line:27:4, line:30:4>
    |       | |-BinaryOperator 0x14d808270 <line:27:8, col:18> 'int' contains-errors '<'
    |       | | |-BinaryOperator 0x14d808230 <col:8, col:14> 'unsigned int' '-'
    |       | | | |-ImplicitCastExpr 0x14d808200 <col:8> 'unsigned int' <LValueToRValue>
    |       | | | | `-DeclRefExpr 0x14c923ce8 <col:8> 'const unsigned int' lvalue ParmVar 0x14d00de28 'len' 'const unsigned int'
    |       | | | `-ImplicitCastExpr 0x14d808218 <col:14> 'unsigned int' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x14c923d08 <col:14> 'unsigned int' lvalue Var 0x14d00e040 'i' 'unsigned int'
    |       | | `-RecoveryExpr 0x14d808250 <col:18> '<dependent type>' contains-errors lvalue
    |       | `-CompoundStmt 0x14d808370 <col:34, line:30:4>
    |       |   |-CallExpr 0x14d808330 <line:28:5, col:26> '<dependent type>' contains-errors
    |       |   | |-DeclRefExpr 0x14d808290 <col:5> 'int ()' Function 0x14c923b00 'ND_PRINT' 'int ()'
    |       |   | `-ParenExpr 0x14d808310 <col:14, col:25> 'char[4]' contains-errors
    |       |   |   `-BinaryOperator 0x14d8082f0 <col:15, col:20> 'char[4]' contains-errors ','
    |       |   |     |-RecoveryExpr 0x14d8082b0 <col:15> '<dependent type>' contains-errors lvalue
    |       |   |     `-StringLiteral 0x14d8082d0 <col:20> 'char[4]' lvalue "STR"
    |       |   `-GotoStmt 0x14d808358 <line:29:5, col:10> 'trunc' 0x14c923660
    |       |-CallExpr 0x14d808450 <line:31:4, col:25> '<dependent type>' contains-errors
    |       | |-DeclRefExpr 0x14d8083b0 <col:4> 'int ()' Function 0x14c923b00 'ND_PRINT' 'int ()'
    |       | `-ParenExpr 0x14d808430 <col:13, col:24> 'char[4]' contains-errors
    |       |   `-BinaryOperator 0x14d808410 <col:14, col:19> 'char[4]' contains-errors ','
    |       |     |-RecoveryExpr 0x14d8083d0 <col:14> '<dependent type>' contains-errors lvalue
    |       |     `-StringLiteral 0x14d8083f0 <col:19> 'char[4]' lvalue "STR"
    |       |-BreakStmt 0x14d808478 <line:32:4>
    |       |-IfStmt 0x14d808740 <line:34:4, line:37:4>
    |       | |-BinaryOperator 0x14d808620 <line:34:8, col:18> 'int' contains-errors '<'
    |       | | |-BinaryOperator 0x14d8085e0 <col:8, col:14> 'unsigned int' '-'
    |       | | | |-ImplicitCastExpr 0x14d8085b0 <col:8> 'unsigned int' <LValueToRValue>
    |       | | | | `-DeclRefExpr 0x14d808498 <col:8> 'const unsigned int' lvalue ParmVar 0x14d00de28 'len' 'const unsigned int'
    |       | | | `-ImplicitCastExpr 0x14d8085c8 <col:14> 'unsigned int' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x14d8084b8 <col:14> 'unsigned int' lvalue Var 0x14d00e040 'i' 'unsigned int'
    |       | | `-RecoveryExpr 0x14d808600 <col:18> '<dependent type>' contains-errors lvalue
    |       | `-CompoundStmt 0x14d808720 <col:42, line:37:4>
    |       |   |-CallExpr 0x14d8086e0 <line:35:5, col:26> '<dependent type>' contains-errors
    |       |   | |-DeclRefExpr 0x14d808640 <col:5> 'int ()' Function 0x14c923b00 'ND_PRINT' 'int ()'
    |       |   | `-ParenExpr 0x14d8086c0 <col:14, col:25> 'char[4]' contains-errors
    |       |   |   `-BinaryOperator 0x14d8086a0 <col:15, col:20> 'char[4]' contains-errors ','
    |       |   |     |-RecoveryExpr 0x14d808660 <col:15> '<dependent type>' contains-errors lvalue
    |       |   |     `-StringLiteral 0x14d808680 <col:20> 'char[4]' lvalue "STR"
    |       |   `-GotoStmt 0x14d808708 <line:36:5, col:10> 'trunc' 0x14c923660
    |       |-CallExpr 0x14d808aa0 <line:39:4, line:40:35> '<dependent type>' contains-errors
    |       | |-DeclRefExpr 0x14d808760 <line:39:4> 'int ()' Function 0x14c923b00 'ND_PRINT' 'int ()'
    |       | `-ParenExpr 0x14d808a80 <col:13, line:40:34> 'int' contains-errors
    |       |   `-BinaryOperator 0x14d808a60 <line:39:14, line:40:33> 'int' contains-errors ','
    |       |     |-BinaryOperator 0x14d8087c0 <line:39:14, col:19> 'char[4]' contains-errors ','
    |       |     | |-RecoveryExpr 0x14d808780 <col:14> '<dependent type>' contains-errors lvalue
    |       |     | `-StringLiteral 0x14d8087a0 <col:19> 'char[4]' lvalue "STR"
    |       |     `-BinaryOperator 0x14d808a40 <line:40:5, col:33> 'int' '<<'
    |       |       |-CallExpr 0x14d8089f8 <col:5, col:28> 'int'
    |       |       | |-ImplicitCastExpr 0x14d8089e0 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |       |       | | `-DeclRefExpr 0x14d8088c0 <col:5> 'int ()' Function 0x14d808808 'EXTRACT_16BITS' 'int ()'
    |       |       | `-UnaryOperator 0x14d8089c8 <col:20, col:27> 'const char *' prefix '&' cannot overflow
    |       |       |   `-ArraySubscriptExpr 0x14d8089a8 <col:21, col:27> 'const char' lvalue
    |       |       |     |-ImplicitCastExpr 0x14d808990 <col:21> 'const char *' <LValueToRValue>
    |       |       |     | `-DeclRefExpr 0x14d8088e0 <col:21> 'const char *' lvalue ParmVar 0x14d00dda8 'bp' 'const char *'
    |       |       |     `-BinaryOperator 0x14d808970 <col:24, col:26> 'unsigned int' '+'
    |       |       |       |-ImplicitCastExpr 0x14d808940 <col:24> 'unsigned int' <LValueToRValue>
    |       |       |       | `-DeclRefExpr 0x14d808900 <col:24> 'unsigned int' lvalue Var 0x14d00e040 'i' 'unsigned int'
    |       |       |       `-ImplicitCastExpr 0x14d808958 <col:26> 'unsigned int' <IntegralCast>
    |       |       |         `-IntegerLiteral 0x14d808920 <col:26> 'int' 2
    |       |       `-IntegerLiteral 0x14d808a20 <col:33> 'int' 2
    |       |-BreakStmt 0x14d808ac8 <line:41:4>
    |       |-IfStmt 0x14d808d90 <line:43:4, line:46:4>
    |       | |-BinaryOperator 0x14d808c70 <line:43:8, col:18> 'int' contains-errors '<'
    |       | | |-BinaryOperator 0x14d808c30 <col:8, col:14> 'unsigned int' '-'
    |       | | | |-ImplicitCastExpr 0x14d808c00 <col:8> 'unsigned int' <LValueToRValue>
    |       | | | | `-DeclRefExpr 0x14d808ae8 <col:8> 'const unsigned int' lvalue ParmVar 0x14d00de28 'len' 'const unsigned int'
    |       | | | `-ImplicitCastExpr 0x14d808c18 <col:14> 'unsigned int' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x14d808b08 <col:14> 'unsigned int' lvalue Var 0x14d00e040 'i' 'unsigned int'
    |       | | `-RecoveryExpr 0x14d808c50 <col:18> '<dependent type>' contains-errors lvalue
    |       | `-CompoundStmt 0x14d808d70 <col:41, line:46:4>
    |       |   |-CallExpr 0x14d808d30 <line:44:5, col:26> '<dependent type>' contains-errors
    |       |   | |-DeclRefExpr 0x14d808c90 <col:5> 'int ()' Function 0x14c923b00 'ND_PRINT' 'int ()'
    |       |   | `-ParenExpr 0x14d808d10 <col:14, col:25> 'char[4]' contains-errors
    |       |   |   `-BinaryOperator 0x14d808cf0 <col:15, col:20> 'char[4]' contains-errors ','
    |       |   |     |-RecoveryExpr 0x14d808cb0 <col:15> '<dependent type>' contains-errors lvalue
    |       |   |     `-StringLiteral 0x14d808cd0 <col:20> 'char[4]' lvalue "STR"
    |       |   `-GotoStmt 0x14d808d58 <line:45:5, col:10> 'trunc' 0x14c923660
    |       |-CallExpr 0x14d8090c0 <line:47:4, col:56> '<dependent type>' contains-errors
    |       | |-DeclRefExpr 0x14d808db0 <col:4> 'int ()' Function 0x14c923b00 'ND_PRINT' 'int ()'
    |       | `-ParenExpr 0x14d8090a0 <col:13, col:55> '<dependent type>' contains-errors
    |       |   `-BinaryOperator 0x14d809080 <col:14, col:54> '<dependent type>' contains-errors ','
    |       |     |-BinaryOperator 0x14d808e10 <col:14, col:19> 'char[4]' contains-errors ','
    |       |     | |-RecoveryExpr 0x14d808dd0 <col:14> '<dependent type>' contains-errors lvalue
    |       |     | `-StringLiteral 0x14d808df0 <col:19> 'char[4]' lvalue "STR"
    |       |     `-CallExpr 0x14d809050 <col:26, col:54> '<dependent type>' contains-errors
    |       |       |-DeclRefExpr 0x14d808f10 <col:26> 'int ()' Function 0x14d808e58 'ip6addr_string' 'int ()'
    |       |       |-RecoveryExpr 0x14d808f30 <col:41> '<dependent type>' contains-errors lvalue
    |       |       `-UnaryOperator 0x14d809038 <col:46, col:53> 'const char *' prefix '&' cannot overflow
    |       |         `-ArraySubscriptExpr 0x14d809018 <col:47, col:53> 'const char' lvalue
    |       |           |-ImplicitCastExpr 0x14d809000 <col:47> 'const char *' <LValueToRValue>
    |       |           | `-DeclRefExpr 0x14d808f50 <col:47> 'const char *' lvalue ParmVar 0x14d00dda8 'bp' 'const char *'
    |       |           `-BinaryOperator 0x14d808fe0 <col:50, col:52> 'unsigned int' '+'
    |       |             |-ImplicitCastExpr 0x14d808fb0 <col:50> 'unsigned int' <LValueToRValue>
    |       |             | `-DeclRefExpr 0x14d808f70 <col:50> 'unsigned int' lvalue Var 0x14d00e040 'i' 'unsigned int'
    |       |             `-ImplicitCastExpr 0x14d808fc8 <col:52> 'unsigned int' <IntegralCast>
    |       |               `-IntegerLiteral 0x14d808f90 <col:52> 'int' 2
    |       |-BreakStmt 0x14d8090e8 <line:48:4>
    |       |-IfStmt 0x14d809db0 <line:50:4, line:53:4>
    |       | |-BinaryOperator 0x14d809c90 <line:50:8, col:18> 'int' contains-errors '<'
    |       | | |-BinaryOperator 0x14d809c50 <col:8, col:14> 'unsigned int' '-'
    |       | | | |-ImplicitCastExpr 0x14d809c20 <col:8> 'unsigned int' <LValueToRValue>
    |       | | | | `-DeclRefExpr 0x14d809108 <col:8> 'const unsigned int' lvalue ParmVar 0x14d00de28 'len' 'const unsigned int'
    |       | | | `-ImplicitCastExpr 0x14d809c38 <col:14> 'unsigned int' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x14d809128 <col:14> 'unsigned int' lvalue Var 0x14d00e040 'i' 'unsigned int'
    |       | | `-RecoveryExpr 0x14d809c70 <col:18> '<dependent type>' contains-errors lvalue
    |       | `-CompoundStmt 0x14d809d90 <col:42, line:53:4>
    |       |   |-CallExpr 0x14d809d50 <line:51:5, col:26> '<dependent type>' contains-errors
    |       |   | |-DeclRefExpr 0x14d809cb0 <col:5> 'int ()' Function 0x14c923b00 'ND_PRINT' 'int ()'
    |       |   | `-ParenExpr 0x14d809d30 <col:14, col:25> 'char[4]' contains-errors
    |       |   |   `-BinaryOperator 0x14d809d10 <col:15, col:20> 'char[4]' contains-errors ','
    |       |   |     |-RecoveryExpr 0x14d809cd0 <col:15> '<dependent type>' contains-errors lvalue
    |       |   |     `-StringLiteral 0x14d809cf0 <col:20> 'char[4]' lvalue "STR"
    |       |   `-GotoStmt 0x14d809d78 <line:52:5, col:10> 'trunc' 0x14c923660
    |       |-CallExpr 0x14d80a170 <line:54:4, line:56:30> '<dependent type>' contains-errors
    |       | |-DeclRefExpr 0x14d809dd0 <line:54:4> 'int ()' Function 0x14c923b00 'ND_PRINT' 'int ()'
    |       | `-ParenExpr 0x14d80a150 <col:13, line:56:29> 'int' contains-errors
    |       |   `-BinaryOperator 0x14d80a130 <line:54:14, line:56:28> 'int' contains-errors ','
    |       |     |-BinaryOperator 0x14d809fb0 <line:54:14, line:55:28> 'int' contains-errors ','
    |       |     | |-BinaryOperator 0x14d809e30 <line:54:14, col:19> 'char[4]' contains-errors ','
    |       |     | | |-RecoveryExpr 0x14d809df0 <col:14> '<dependent type>' contains-errors lvalue
    |       |     | | `-StringLiteral 0x14d809e10 <col:19> 'char[4]' lvalue "STR"
    |       |     | `-CallExpr 0x14d809f88 <line:55:5, col:28> 'int'
    |       |     |   |-ImplicitCastExpr 0x14d809f70 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |       |     |   | `-DeclRefExpr 0x14d809e50 <col:5> 'int ()' Function 0x14d808808 'EXTRACT_16BITS' 'int ()'
    |       |     |   `-UnaryOperator 0x14d809f58 <col:20, col:27> 'const char *' prefix '&' cannot overflow
    |       |     |     `-ArraySubscriptExpr 0x14d809f38 <col:21, col:27> 'const char' lvalue
    |       |     |       |-ImplicitCastExpr 0x14d809f20 <col:21> 'const char *' <LValueToRValue>
    |       |     |       | `-DeclRefExpr 0x14d809e70 <col:21> 'const char *' lvalue ParmVar 0x14d00dda8 'bp' 'const char *'
    |       |     |       `-BinaryOperator 0x14d809f00 <col:24, col:26> 'unsigned int' '+'
    |       |     |         |-ImplicitCastExpr 0x14d809ed0 <col:24> 'unsigned int' <LValueToRValue>
    |       |     |         | `-DeclRefExpr 0x14d809e90 <col:24> 'unsigned int' lvalue Var 0x14d00e040 'i' 'unsigned int'
    |       |     |         `-ImplicitCastExpr 0x14d809ee8 <col:26> 'unsigned int' <IntegralCast>
    |       |     |           `-IntegerLiteral 0x14d809eb0 <col:26> 'int' 2
    |       |     `-CallExpr 0x14d80a108 <line:56:5, col:28> 'int'
    |       |       |-ImplicitCastExpr 0x14d80a0f0 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |       |       | `-DeclRefExpr 0x14d809fd0 <col:5> 'int ()' Function 0x14d808808 'EXTRACT_16BITS' 'int ()'
    |       |       `-UnaryOperator 0x14d80a0d8 <col:20, col:27> 'const char *' prefix '&' cannot overflow
    |       |         `-ArraySubscriptExpr 0x14d80a0b8 <col:21, col:27> 'const char' lvalue
    |       |           |-ImplicitCastExpr 0x14d80a0a0 <col:21> 'const char *' <LValueToRValue>
    |       |           | `-DeclRefExpr 0x14d809ff0 <col:21> 'const char *' lvalue ParmVar 0x14d00dda8 'bp' 'const char *'
    |       |           `-BinaryOperator 0x14d80a080 <col:24, col:26> 'unsigned int' '+'
    |       |             |-ImplicitCastExpr 0x14d80a050 <col:24> 'unsigned int' <LValueToRValue>
    |       |             | `-DeclRefExpr 0x14d80a010 <col:24> 'unsigned int' lvalue Var 0x14d00e040 'i' 'unsigned int'
    |       |             `-ImplicitCastExpr 0x14d80a068 <col:26> 'unsigned int' <IntegralCast>
    |       |               `-IntegerLiteral 0x14d80a030 <col:26> 'int' 4
    |       |-BreakStmt 0x14d80a198 <line:57:4>
    |       |-IfStmt 0x14d80a460 <line:59:4, line:62:4>
    |       | |-BinaryOperator 0x14d80a340 <line:59:8, col:18> 'int' contains-errors '<'
    |       | | |-BinaryOperator 0x14d80a300 <col:8, col:14> 'unsigned int' '-'
    |       | | | |-ImplicitCastExpr 0x14d80a2d0 <col:8> 'unsigned int' <LValueToRValue>
    |       | | | | `-DeclRefExpr 0x14d80a1b8 <col:8> 'const unsigned int' lvalue ParmVar 0x14d00de28 'len' 'const unsigned int'
    |       | | | `-ImplicitCastExpr 0x14d80a2e8 <col:14> 'unsigned int' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x14d80a1d8 <col:14> 'unsigned int' lvalue Var 0x14d00e040 'i' 'unsigned int'
    |       | | `-RecoveryExpr 0x14d80a320 <col:18> '<dependent type>' contains-errors lvalue
    |       | `-CompoundStmt 0x14d80a440 <col:39, line:62:4>
    |       |   |-CallExpr 0x14d80a400 <line:60:5, col:26> '<dependent type>' contains-errors
    |       |   | |-DeclRefExpr 0x14d80a360 <col:5> 'int ()' Function 0x14c923b00 'ND_PRINT' 'int ()'
    |       |   | `-ParenExpr 0x14d80a3e0 <col:14, col:25> 'char[4]' contains-errors
    |       |   |   `-BinaryOperator 0x14d80a3c0 <col:15, col:20> 'char[4]' contains-errors ','
    |       |   |     |-RecoveryExpr 0x14d80a380 <col:15> '<dependent type>' contains-errors lvalue
    |       |   |     `-StringLiteral 0x14d80a3a0 <col:20> 'char[4]' lvalue "STR"
    |       |   `-GotoStmt 0x14d80a428 <line:61:5, col:10> 'trunc' 0x14c923660
    |       |-CallExpr 0x14d80a520 <line:63:4, col:25> '<dependent type>' contains-errors
    |       | |-DeclRefExpr 0x14d80a480 <col:4> 'int ()' Function 0x14c923b00 'ND_PRINT' 'int ()'
    |       | `-ParenExpr 0x14d80a500 <col:13, col:24> 'char[4]' contains-errors
    |       |   `-BinaryOperator 0x14d80a4e0 <col:14, col:19> 'char[4]' contains-errors ','
    |       |     |-RecoveryExpr 0x14d80a4a0 <col:14> '<dependent type>' contains-errors lvalue
    |       |     `-StringLiteral 0x14d80a4c0 <col:19> 'char[4]' lvalue "STR"
    |       |-BreakStmt 0x14d80a548 <line:64:4>
    |       |-DefaultStmt 0x14d80a8c8 <line:65:3, line:69:4>
    |       | `-IfStmt 0x14d80a8a8 <line:66:4, line:69:4>
    |       |   |-BinaryOperator 0x14d80a6d8 <line:66:8, col:18> 'int' contains-errors '<'
    |       |   | |-BinaryOperator 0x14d80a698 <col:8, col:14> 'unsigned int' '-'
    |       |   | | |-ImplicitCastExpr 0x14d80a668 <col:8> 'unsigned int' <LValueToRValue>
    |       |   | | | `-DeclRefExpr 0x14d80a550 <col:8> 'const unsigned int' lvalue ParmVar 0x14d00de28 'len' 'const unsigned int'
    |       |   | | `-ImplicitCastExpr 0x14d80a680 <col:14> 'unsigned int' <LValueToRValue>
    |       |   | |   `-DeclRefExpr 0x14d80a570 <col:14> 'unsigned int' lvalue Var 0x14d00e040 'i' 'unsigned int'
    |       |   | `-RecoveryExpr 0x14d80a6b8 <col:18> '<dependent type>' contains-errors lvalue
    |       |   `-CompoundStmt 0x14d80a888 <col:34, line:69:4>
    |       |     |-CallExpr 0x14d80a848 <line:67:5, col:33> '<dependent type>' contains-errors
    |       |     | |-DeclRefExpr 0x14d80a6f8 <col:5> 'int ()' Function 0x14c923b00 'ND_PRINT' 'int ()'
    |       |     | `-ParenExpr 0x14d80a828 <col:14, col:32> 'const char' contains-errors
    |       |     |   `-BinaryOperator 0x14d80a808 <col:15, col:31> 'const char' contains-errors ','
    |       |     |     |-BinaryOperator 0x14d80a758 <col:15, col:20> 'char[4]' contains-errors ','
    |       |     |     | |-RecoveryExpr 0x14d80a718 <col:15> '<dependent type>' contains-errors lvalue
    |       |     |     | `-StringLiteral 0x14d80a738 <col:20> 'char[4]' lvalue "STR"
    |       |     |     `-ArraySubscriptExpr 0x14d80a7e8 <col:27, col:31> 'const char' lvalue
    |       |     |       |-ImplicitCastExpr 0x14d80a7b8 <col:27> 'const char *' <LValueToRValue>
    |       |     |       | `-DeclRefExpr 0x14d80a778 <col:27> 'const char *' lvalue ParmVar 0x14d00dda8 'bp' 'const char *'
    |       |     |       `-ImplicitCastExpr 0x14d80a7d0 <col:30> 'unsigned int' <LValueToRValue>
    |       |     |         `-DeclRefExpr 0x14d80a798 <col:30> 'unsigned int' lvalue Var 0x14d00e040 'i' 'unsigned int'
    |       |     `-GotoStmt 0x14d80a870 <line:68:5, col:10> 'trunc' 0x14c923660
    |       |-CallExpr 0x14d80ab40 <line:70:4, col:43> '<dependent type>' contains-errors
    |       | |-DeclRefExpr 0x14d80a8e8 <col:4> 'int ()' Function 0x14c923b00 'ND_PRINT' 'int ()'
    |       | `-ParenExpr 0x14d80ab20 <col:13, col:42> 'const char' contains-errors
    |       |   `-BinaryOperator 0x14d80ab00 <col:14, col:41> 'const char' contains-errors ','
    |       |     |-BinaryOperator 0x14d80a9f8 <col:14, col:30> 'const char' contains-errors ','
    |       |     | |-BinaryOperator 0x14d80a948 <col:14, col:19> 'char[4]' contains-errors ','
    |       |     | | |-RecoveryExpr 0x14d80a908 <col:14> '<dependent type>' contains-errors lvalue
    |       |     | | `-StringLiteral 0x14d80a928 <col:19> 'char[4]' lvalue "STR"
    |       |     | `-ArraySubscriptExpr 0x14d80a9d8 <col:26, col:30> 'const char' lvalue
    |       |     |   |-ImplicitCastExpr 0x14d80a9a8 <col:26> 'const char *' <LValueToRValue>
    |       |     |   | `-DeclRefExpr 0x14d80a968 <col:26> 'const char *' lvalue ParmVar 0x14d00dda8 'bp' 'const char *'
    |       |     |   `-ImplicitCastExpr 0x14d80a9c0 <col:29> 'unsigned int' <LValueToRValue>
    |       |     |     `-DeclRefExpr 0x14d80a988 <col:29> 'unsigned int' lvalue Var 0x14d00e040 'i' 'unsigned int'
    |       |     `-ArraySubscriptExpr 0x14d80aae0 <col:33, col:41> 'const char' lvalue
    |       |       |-ImplicitCastExpr 0x14d80aac8 <col:33> 'const char *' <LValueToRValue>
    |       |       | `-DeclRefExpr 0x14d80aa18 <col:33> 'const char *' lvalue ParmVar 0x14d00dda8 'bp' 'const char *'
    |       |       `-BinaryOperator 0x14d80aaa8 <col:36, col:40> 'unsigned int' '+'
    |       |         |-ImplicitCastExpr 0x14d80aa78 <col:36> 'unsigned int' <LValueToRValue>
    |       |         | `-DeclRefExpr 0x14d80aa38 <col:36> 'unsigned int' lvalue Var 0x14d00e040 'i' 'unsigned int'
    |       |         `-ImplicitCastExpr 0x14d80aa90 <col:40> 'unsigned int' <IntegralCast>
    |       |           `-IntegerLiteral 0x14d80aa58 <col:40> 'int' 1
    |       `-BreakStmt 0x14d80ab68 <line:71:4>
    |-ReturnStmt 0x14d80ad40 <line:74:2, col:9>
    | `-IntegerLiteral 0x14d80ad20 <col:9> 'int' 0
    `-LabelStmt 0x14d80ad80 <line:76:1, line:77:9> 'trunc'
      `-ReturnStmt 0x14d80ad70 <col:2, col:9>
        `-IntegerLiteral 0x14d80ad50 <col:9> 'int' 1
