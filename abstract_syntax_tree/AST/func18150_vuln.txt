TranslationUnitDecl 0x13b855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x13b8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x13b855bd0 '__int128'
|-TypedefDecl 0x13b856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x13b855bf0 'unsigned __int128'
|-TypedefDecl 0x13c00be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13c00bc00 'struct __NSConstantString_tag'
|   `-Record 0x13b856580 '__NSConstantString_tag'
|-TypedefDecl 0x13c00be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x13b855d90 '__SVInt8_t'
|-TypedefDecl 0x13c00bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x13b855db0 '__SVInt16_t'
|-TypedefDecl 0x13c00bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x13b855dd0 '__SVInt32_t'
|-TypedefDecl 0x13c00bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x13b855df0 '__SVInt64_t'
|-TypedefDecl 0x13c00c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x13b855e10 '__SVUint8_t'
|-TypedefDecl 0x13c00c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x13b855e30 '__SVUint16_t'
|-TypedefDecl 0x13c00c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x13b855e50 '__SVUint32_t'
|-TypedefDecl 0x13c00c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x13b855e70 '__SVUint64_t'
|-TypedefDecl 0x13c00c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x13b855e90 '__SVFloat16_t'
|-TypedefDecl 0x13c00c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x13b855eb0 '__SVFloat32_t'
|-TypedefDecl 0x13c00c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x13b855ed0 '__SVFloat64_t'
|-TypedefDecl 0x13c00c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x13b855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13c00c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x13b855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13c00c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x13b855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13c00c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x13b855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13c00c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x13b855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13c00c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x13b855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13c00c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x13b855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13c00c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x13b855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13c00c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x13b855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13c00c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x13b856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13c00c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x13b856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13c00c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x13b856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13c00c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x13b856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13c00c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x13b856090 '__clang_svint8x3_t'
|-TypedefDecl 0x13c00c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x13b8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13c00c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x13b8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13c00c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x13b8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13c00c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x13b856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13c00ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x13b856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13c00cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x13b856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13c00cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x13b856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13c00cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x13b856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13c00d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x13b8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13c00d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x13b8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13c00d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x13b8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13c00d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x13b856210 '__clang_svint8x4_t'
|-TypedefDecl 0x13c00d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x13b856230 '__clang_svint16x4_t'
|-TypedefDecl 0x13c00d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x13b856250 '__clang_svint32x4_t'
|-TypedefDecl 0x13c00d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x13b856270 '__clang_svint64x4_t'
|-TypedefDecl 0x13c00d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x13b856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13c00d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x13b8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13c00d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x13b8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13c00d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x13b8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13c00d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x13b856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13c00d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x13b856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13c00d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x13b856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13c00d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x13b856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13c00da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x13b856390 '__SVBool_t'
|-TypedefDecl 0x13c00da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x13b8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13c00dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x13b8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13c00db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x13b8563f0 '__SVCount_t'
|-TypedefDecl 0x13c00dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13c00dbb0 'char *'
|   `-BuiltinType 0x13b8556b0 'char'
|-TypedefDecl 0x13c00dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13c00dbb0 'char *'
|   `-BuiltinType 0x13b8556b0 'char'
`-FunctionDecl 0x13b9231e8 <dataset_diviso_filec/func18150_vuln.c:1:1, line:21:1> line:1:1 invalid next_state_class 'int (int *, int *, enum CCVALTYPE *, enum CCSTATE *, int *)'
  |-ParmVarDecl 0x13c00dd28 <col:18, col:30> col:30 invalid cc 'int *'
  |-ParmVarDecl 0x13c00dda8 <col:34, col:49> col:49 invalid vs 'int *'
  |-ParmVarDecl 0x13b922e00 <col:53, col:69> col:69 used type 'enum CCVALTYPE *'
  |-ParmVarDecl 0x13b922ff8 <line:2:4, col:18> col:18 used state 'enum CCSTATE *'
  |-ParmVarDecl 0x13b923078 <col:25, col:34> col:34 invalid env 'int *'
  `-CompoundStmt 0x13d009d60 <line:3:1, line:21:1>
    |-DeclStmt 0x13b923338 <line:4:3, col:8>
    | `-VarDecl 0x13b9232d0 <col:3, col:7> col:7 used r 'int'
    |-IfStmt 0x13b9234c0 <line:6:3, line:7:12>
    | |-BinaryOperator 0x13b923458 <line:6:7, col:17> 'int' contains-errors '=='
    | | |-UnaryOperator 0x13b923420 <col:7, col:8> 'enum CCSTATE' lvalue prefix '*' cannot overflow
    | | | `-ImplicitCastExpr 0x13b923408 <col:8> 'enum CCSTATE *' <LValueToRValue>
    | | |   `-DeclRefExpr 0x13b923350 <col:8> 'enum CCSTATE *' lvalue ParmVar 0x13b922ff8 'state' 'enum CCSTATE *'
    | | `-RecoveryExpr 0x13b923438 <col:17> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x13b9234b0 <line:7:5, col:12>
    |   `-RecoveryExpr 0x13b923490 <col:12> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x13d009ac0 <line:9:3, line:16:3>
    | |-BinaryOperator 0x13b923720 <line:9:7, col:39> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x13b923690 <col:7, col:17> 'int' contains-errors '=='
    | | | |-UnaryOperator 0x13b923658 <col:7, col:8> 'enum CCSTATE' lvalue prefix '*' cannot overflow
    | | | | `-ImplicitCastExpr 0x13b923640 <col:8> 'enum CCSTATE *' <LValueToRValue>
    | | | |   `-DeclRefExpr 0x13b9234e0 <col:8> 'enum CCSTATE *' lvalue ParmVar 0x13b922ff8 'state' 'enum CCSTATE *'
    | | | `-RecoveryExpr 0x13b923670 <col:17> '<dependent type>' contains-errors lvalue
    | | `-BinaryOperator 0x13b923700 <col:30, col:39> 'int' contains-errors '!='
    | |   |-UnaryOperator 0x13b9236c8 <col:30, col:31> 'enum CCVALTYPE' lvalue prefix '*' cannot overflow
    | |   | `-ImplicitCastExpr 0x13b9236b0 <col:31> 'enum CCVALTYPE *' <LValueToRValue>
    | |   |   `-DeclRefExpr 0x13b923568 <col:31> 'enum CCVALTYPE *' lvalue ParmVar 0x13b922e00 'type' 'enum CCVALTYPE *'
    | |   `-RecoveryExpr 0x13b9236e0 <col:39> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x13d009aa8 <col:50, line:16:3>
    |   `-IfStmt 0x13d009a78 <line:10:5, line:15:5> has_else
    |     |-BinaryOperator 0x13b923848 <line:10:9, col:18> 'int' contains-errors '=='
    |     | |-UnaryOperator 0x13b923810 <col:9, col:10> 'enum CCVALTYPE' lvalue prefix '*' cannot overflow
    |     | | `-ImplicitCastExpr 0x13b9237f8 <col:10> 'enum CCVALTYPE *' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x13b923740 <col:10> 'enum CCVALTYPE *' lvalue ParmVar 0x13b922e00 'type' 'enum CCVALTYPE *'
    |     | `-RecoveryExpr 0x13b923828 <col:18> '<dependent type>' contains-errors lvalue
    |     |-CallExpr 0x13b923b18 <line:11:7, col:41> '<dependent type>' contains-errors
    |     | |-DeclRefExpr 0x13b9239c0 <col:7> 'int ()' Function 0x13b923908 'BITSET_SET_BIT' 'int ()'
    |     | |-CXXDependentScopeMemberExpr 0x13b923a00 <col:22, col:26> '<dependent type>' contains-errors lvalue ->bs
    |     | | `-RecoveryExpr 0x13b9239e0 <col:22> '<dependent type>' contains-errors lvalue
    |     | `-CStyleCastExpr 0x13b923af0 <col:30, col:40> 'int' contains-errors <Dependent>
    |     |   `-ParenExpr 0x13b923ad0 <col:36, col:40> '<dependent type>' contains-errors
    |     |     `-UnaryOperator 0x13b923a80 <col:37, col:38> '<dependent type>' contains-errors prefix '*' cannot overflow
    |     |       `-ImplicitCastExpr 0x13b923a68 <col:38> '<dependent type>' contains-errors <LValueToRValue>
    |     |         `-RecoveryExpr 0x13b923a48 <col:38> '<dependent type>' contains-errors lvalue
    |     `-IfStmt 0x13d009a58 <line:12:10, line:15:5>
    |       |-BinaryOperator 0x13b923c50 <line:12:14, col:23> 'int' contains-errors '=='
    |       | |-UnaryOperator 0x13b923c18 <col:14, col:15> 'enum CCVALTYPE' lvalue prefix '*' cannot overflow
    |       | | `-ImplicitCastExpr 0x13b923c00 <col:15> 'enum CCVALTYPE *' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x13b923b48 <col:15> 'enum CCVALTYPE *' lvalue ParmVar 0x13b922e00 'type' 'enum CCVALTYPE *'
    |       | `-RecoveryExpr 0x13b923c30 <col:23> '<dependent type>' contains-errors lvalue
    |       `-CompoundStmt 0x13d009a38 <col:39, line:15:5>
    |         |-BinaryOperator 0x13d009938 <line:13:7, col:52> 'int' contains-errors '='
    |         | |-DeclRefExpr 0x13b923c70 <col:7> 'int' lvalue Var 0x13b9232d0 'r' 'int'
    |         | `-CallExpr 0x13d0098f8 <col:11, col:52> '<dependent type>' contains-errors
    |         |   |-DeclRefExpr 0x13b923d70 <col:11> 'int ()' Function 0x13b923cb8 'add_code_range' 'int ()'
    |         |   |-UnaryOperator 0x13d009820 <col:26, col:36> '<dependent type>' contains-errors prefix '&' cannot overflow
    |         |   | `-ParenExpr 0x13d009800 <col:27, col:36> '<dependent type>' contains-errors lvalue
    |         |   |   `-CXXDependentScopeMemberExpr 0x13b923db0 <col:28, col:32> '<dependent type>' contains-errors lvalue ->mbuf
    |         |   |     `-RecoveryExpr 0x13b923d90 <col:28> '<dependent type>' contains-errors lvalue
    |         |   |-RecoveryExpr 0x13d009838 <col:39> '<dependent type>' contains-errors lvalue
    |         |   |-UnaryOperator 0x13d009890 <col:44, col:45> '<dependent type>' contains-errors prefix '*' cannot overflow
    |         |   | `-ImplicitCastExpr 0x13d009878 <col:45> '<dependent type>' contains-errors <LValueToRValue>
    |         |   |   `-RecoveryExpr 0x13d009858 <col:45> '<dependent type>' contains-errors lvalue
    |         |   `-UnaryOperator 0x13d0098e0 <col:49, col:50> '<dependent type>' contains-errors prefix '*' cannot overflow
    |         |     `-ImplicitCastExpr 0x13d0098c8 <col:50> '<dependent type>' contains-errors <LValueToRValue>
    |         |       `-RecoveryExpr 0x13d0098a8 <col:50> '<dependent type>' contains-errors lvalue
    |         `-IfStmt 0x13d009a18 <line:14:7, col:25>
    |           |-BinaryOperator 0x13d0099b0 <col:11, col:15> 'int' '<'
    |           | |-ImplicitCastExpr 0x13d009998 <col:11> 'int' <LValueToRValue>
    |           | | `-DeclRefExpr 0x13d009958 <col:11> 'int' lvalue Var 0x13b9232d0 'r' 'int'
    |           | `-IntegerLiteral 0x13d009978 <col:15> 'int' 0
    |           `-ReturnStmt 0x13d009a08 <col:18, col:25>
    |             `-ImplicitCastExpr 0x13d0099f0 <col:25> 'int' <LValueToRValue>
    |               `-DeclRefExpr 0x13d0099d0 <col:25> 'int' lvalue Var 0x13b9232d0 'r' 'int'
    |-BinaryOperator 0x13d009be8 <line:18:3, col:12> 'enum CCSTATE' contains-errors '='
    | |-UnaryOperator 0x13d009bb0 <col:3, col:4> 'enum CCSTATE' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x13d009b98 <col:4> 'enum CCSTATE *' <LValueToRValue>
    | |   `-DeclRefExpr 0x13d009ae0 <col:4> 'enum CCSTATE *' lvalue ParmVar 0x13b922ff8 'state' 'enum CCSTATE *'
    | `-RecoveryExpr 0x13d009bc8 <col:12> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x13d009d10 <line:19:3, col:12> 'enum CCVALTYPE' contains-errors '='
    | |-UnaryOperator 0x13d009cd8 <col:3, col:4> 'enum CCVALTYPE' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x13d009cc0 <col:4> 'enum CCVALTYPE *' <LValueToRValue>
    | |   `-DeclRefExpr 0x13d009c08 <col:4> 'enum CCVALTYPE *' lvalue ParmVar 0x13b922e00 'type' 'enum CCVALTYPE *'
    | `-RecoveryExpr 0x13d009cf0 <col:12> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x13d009d50 <line:20:3, col:10>
      `-IntegerLiteral 0x13d009d30 <col:10> 'int' 0
