TranslationUnitDecl 0x15d839c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x15d83aab8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x15d83a1d0 '__int128'
|-TypedefDecl 0x15d83ab28 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x15d83a1f0 'unsigned __int128'
|-TypedefDecl 0x15d86ce30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x15d86cc00 'struct __NSConstantString_tag'
|   `-Record 0x15d83ab80 '__NSConstantString_tag'
|-TypedefDecl 0x15d86ce98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x15d83a390 '__SVInt8_t'
|-TypedefDecl 0x15d86cf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x15d83a3b0 '__SVInt16_t'
|-TypedefDecl 0x15d86cf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x15d83a3d0 '__SVInt32_t'
|-TypedefDecl 0x15d86cfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x15d83a3f0 '__SVInt64_t'
|-TypedefDecl 0x15d86d038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x15d83a410 '__SVUint8_t'
|-TypedefDecl 0x15d86d0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x15d83a430 '__SVUint16_t'
|-TypedefDecl 0x15d86d108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x15d83a450 '__SVUint32_t'
|-TypedefDecl 0x15d86d170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x15d83a470 '__SVUint64_t'
|-TypedefDecl 0x15d86d1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x15d83a490 '__SVFloat16_t'
|-TypedefDecl 0x15d86d240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x15d83a4b0 '__SVFloat32_t'
|-TypedefDecl 0x15d86d2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x15d83a4d0 '__SVFloat64_t'
|-TypedefDecl 0x15d86d310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x15d83a4f0 '__SVBfloat16_t'
|-TypedefDecl 0x15d86d378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x15d83a510 '__clang_svint8x2_t'
|-TypedefDecl 0x15d86d3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x15d83a530 '__clang_svint16x2_t'
|-TypedefDecl 0x15d86d448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x15d83a550 '__clang_svint32x2_t'
|-TypedefDecl 0x15d86d4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x15d83a570 '__clang_svint64x2_t'
|-TypedefDecl 0x15d86d518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x15d83a590 '__clang_svuint8x2_t'
|-TypedefDecl 0x15d86d580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x15d83a5b0 '__clang_svuint16x2_t'
|-TypedefDecl 0x15d86d5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x15d83a5d0 '__clang_svuint32x2_t'
|-TypedefDecl 0x15d86d650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x15d83a5f0 '__clang_svuint64x2_t'
|-TypedefDecl 0x15d86d6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x15d83a610 '__clang_svfloat16x2_t'
|-TypedefDecl 0x15d86d720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x15d83a630 '__clang_svfloat32x2_t'
|-TypedefDecl 0x15d86d788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x15d83a650 '__clang_svfloat64x2_t'
|-TypedefDecl 0x15d86d7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x15d83a670 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x15d86d858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x15d83a690 '__clang_svint8x3_t'
|-TypedefDecl 0x15d86d8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x15d83a6b0 '__clang_svint16x3_t'
|-TypedefDecl 0x15d86d928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x15d83a6d0 '__clang_svint32x3_t'
|-TypedefDecl 0x15d86d990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x15d83a6f0 '__clang_svint64x3_t'
|-TypedefDecl 0x15d86d9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x15d83a710 '__clang_svuint8x3_t'
|-TypedefDecl 0x15d86da60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x15d83a730 '__clang_svuint16x3_t'
|-TypedefDecl 0x15d86dac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x15d83a750 '__clang_svuint32x3_t'
|-TypedefDecl 0x15d86db30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x15d83a770 '__clang_svuint64x3_t'
|-TypedefDecl 0x15d86db98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x15d83a790 '__clang_svfloat16x3_t'
|-TypedefDecl 0x15d86e400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x15d83a7b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x15d86e468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x15d83a7d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x15d86e4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x15d83a7f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x15d86e538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x15d83a810 '__clang_svint8x4_t'
|-TypedefDecl 0x15d86e5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x15d83a830 '__clang_svint16x4_t'
|-TypedefDecl 0x15d86e608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x15d83a850 '__clang_svint32x4_t'
|-TypedefDecl 0x15d86e670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x15d83a870 '__clang_svint64x4_t'
|-TypedefDecl 0x15d86e6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x15d83a890 '__clang_svuint8x4_t'
|-TypedefDecl 0x15d86e740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x15d83a8b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x15d86e7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x15d83a8d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x15d86e810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x15d83a8f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x15d86e878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x15d83a910 '__clang_svfloat16x4_t'
|-TypedefDecl 0x15d86e8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x15d83a930 '__clang_svfloat32x4_t'
|-TypedefDecl 0x15d86e948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x15d83a950 '__clang_svfloat64x4_t'
|-TypedefDecl 0x15d86e9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x15d83a970 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x15d86ea18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x15d83a990 '__SVBool_t'
|-TypedefDecl 0x15d86ea80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x15d83a9b0 '__clang_svboolx2_t'
|-TypedefDecl 0x15d86eae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x15d83a9d0 '__clang_svboolx4_t'
|-TypedefDecl 0x15d86eb50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x15d83a9f0 '__SVCount_t'
|-TypedefDecl 0x15d86ebf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x15d86ebb0 'char *'
|   `-BuiltinType 0x15d839cb0 'char'
|-TypedefDecl 0x15d86ec68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x15d86ebb0 'char *'
|   `-BuiltinType 0x15d839cb0 'char'
`-FunctionDecl 0x15d86efa8 <dataset_diviso_filec/func24916_vuln.c:1:1, line:53:1> line:1:1 invalid _asn1_extract_der_octet 'int (int, const unsigned char *, int, unsigned int)'
  |-ParmVarDecl 0x15d86ecf0 <col:26, col:36> col:36 invalid node 'int'
  |-ParmVarDecl 0x15d86eda8 <col:42, col:63> col:63 used der 'const unsigned char *'
  |-ParmVarDecl 0x15d86ee28 <line:2:5, col:9> col:9 used der_len 'int'
  |-ParmVarDecl 0x15d86eea8 <col:18, col:27> col:27 used flags 'unsigned int'
  `-CompoundStmt 0x15c057ea8 <line:3:1, line:53:1>
    |-DeclStmt 0x15d86f188 <line:4:3, col:17>
    | |-VarDecl 0x15d86f088 <col:3, col:7> col:7 used len2 'int'
    | `-VarDecl 0x15d86f108 <col:3, col:13> col:13 used len3 'int'
    |-DeclStmt 0x15d86f2b8 <line:5:3, col:27>
    | |-VarDecl 0x15d86f1b8 <col:3, col:7> col:7 used counter 'int'
    | `-VarDecl 0x15d86f238 <col:3, col:16> col:16 used counter_end 'int'
    |-DeclStmt 0x15d86f350 <line:6:3, col:13>
    | `-VarDecl 0x15d86f2e8 <col:3, col:7> col:7 used result 'int'
    |-BinaryOperator 0x15d86f660 <line:8:3, col:50> 'int' '='
    | |-DeclRefExpr 0x15d86f368 <col:3> 'int' lvalue Var 0x15d86f088 'len2' 'int'
    | `-CallExpr 0x15d86f5f8 <col:10, col:50> 'int'
    |   |-ImplicitCastExpr 0x15d86f5e0 <col:10> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x15d86f4e0 <col:10> 'int ()' Function 0x15d86f428 'asn1_get_length_der' 'int ()'
    |   |-ImplicitCastExpr 0x15d86f630 <col:31> 'const unsigned char *' <LValueToRValue>
    |   | `-DeclRefExpr 0x15d86f500 <col:31> 'const unsigned char *' lvalue ParmVar 0x15d86eda8 'der' 'const unsigned char *'
    |   |-ImplicitCastExpr 0x15d86f648 <col:36> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x15d86f520 <col:36> 'int' lvalue ParmVar 0x15d86ee28 'der_len' 'int'
    |   `-UnaryOperator 0x15d86f590 <col:45, col:46> 'int *' prefix '&' cannot overflow
    |     `-DeclRefExpr 0x15d86f540 <col:46> 'int' lvalue Var 0x15d86f108 'len3' 'int'
    |-IfStmt 0x15d86f758 <line:9:3, line:10:12>
    | |-BinaryOperator 0x15d86f6f0 <line:9:7, col:15> 'int' '<'
    | | |-ImplicitCastExpr 0x15d86f6d8 <col:7> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x15d86f680 <col:7> 'int' lvalue Var 0x15d86f088 'len2' 'int'
    | | `-UnaryOperator 0x15d86f6c0 <col:14, col:15> 'int' prefix '-'
    | |   `-IntegerLiteral 0x15d86f6a0 <col:15> 'int' 1
    | `-ReturnStmt 0x15d86f748 <line:10:5, col:12>
    |   `-RecoveryExpr 0x15d86f728 <col:12> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x15d86f810 <line:12:3, col:20> 'int' '='
    | |-DeclRefExpr 0x15d86f778 <col:3> 'int' lvalue Var 0x15d86f1b8 'counter' 'int'
    | `-BinaryOperator 0x15d86f7f0 <col:13, col:20> 'int' '+'
    |   |-ImplicitCastExpr 0x15d86f7d8 <col:13> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x15d86f798 <col:13> 'int' lvalue Var 0x15d86f108 'len3' 'int'
    |   `-IntegerLiteral 0x15d86f7b8 <col:20> 'int' 1
    |-IfStmt 0x15d86f9f0 <line:14:3, line:17:19> has_else
    | |-BinaryOperator 0x15d86f8a0 <line:14:7, col:16> 'int' '=='
    | | |-ImplicitCastExpr 0x15d86f888 <col:7> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x15d86f830 <col:7> 'int' lvalue Var 0x15d86f088 'len2' 'int'
    | | `-UnaryOperator 0x15d86f870 <col:15, col:16> 'int' prefix '-'
    | |   `-IntegerLiteral 0x15d86f850 <col:16> 'int' 1
    | |-BinaryOperator 0x15d86f958 <line:15:5, col:29> 'int' '='
    | | |-DeclRefExpr 0x15d86f8c0 <col:5> 'int' lvalue Var 0x15d86f238 'counter_end' 'int'
    | | `-BinaryOperator 0x15d86f938 <col:19, col:29> 'int' '-'
    | |   |-ImplicitCastExpr 0x15d86f920 <col:19> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x15d86f8e0 <col:19> 'int' lvalue ParmVar 0x15d86ee28 'der_len' 'int'
    | |   `-IntegerLiteral 0x15d86f900 <col:29> 'int' 2
    | `-BinaryOperator 0x15d86f9d0 <line:17:5, col:19> 'int' '='
    |   |-DeclRefExpr 0x15d86f978 <col:5> 'int' lvalue Var 0x15d86f238 'counter_end' 'int'
    |   `-ImplicitCastExpr 0x15d86f9b8 <col:19> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x15d86f998 <col:19> 'int' lvalue ParmVar 0x15d86ee28 'der_len' 'int'
    |-WhileStmt 0x15c057d88 <line:19:3, line:47:5>
    | |-BinaryOperator 0x15d86fa90 <line:19:10, col:20> 'int' '<'
    | | |-ImplicitCastExpr 0x15d86fa60 <col:10> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x15d86fa20 <col:10> 'int' lvalue Var 0x15d86f1b8 'counter' 'int'
    | | `-ImplicitCastExpr 0x15d86fa78 <col:20> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x15d86fa40 <col:20> 'int' lvalue Var 0x15d86f238 'counter_end' 'int'
    | `-CompoundStmt 0x15c057d50 <line:20:5, line:47:5>
    |   |-BinaryOperator 0x15d86fc40 <line:21:7, col:64> 'int' '='
    |   | |-DeclRefExpr 0x15d86fab0 <col:7> 'int' lvalue Var 0x15d86f088 'len2' 'int'
    |   | `-CallExpr 0x15d86fbf0 <col:14, col:64> 'int'
    |   |   |-ImplicitCastExpr 0x15d86fbd8 <col:14> 'int (*)()' <FunctionToPointerDecay>
    |   |   | `-DeclRefExpr 0x15d86fad0 <col:14> 'int ()' Function 0x15d86f428 'asn1_get_length_der' 'int ()'
    |   |   |-BinaryOperator 0x15d86fb60 <col:35, col:41> 'const unsigned char *' '+'
    |   |   | |-ImplicitCastExpr 0x15d86fb30 <col:35> 'const unsigned char *' <LValueToRValue>
    |   |   | | `-DeclRefExpr 0x15d86faf0 <col:35> 'const unsigned char *' lvalue ParmVar 0x15d86eda8 'der' 'const unsigned char *'
    |   |   | `-ImplicitCastExpr 0x15d86fb48 <col:41> 'int' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x15d86fb10 <col:41> 'int' lvalue Var 0x15d86f1b8 'counter' 'int'
    |   |   |-ImplicitCastExpr 0x15d86fc28 <col:50> 'int' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x15d86fb80 <col:50> 'int' lvalue ParmVar 0x15d86ee28 'der_len' 'int'
    |   |   `-UnaryOperator 0x15d86fbc0 <col:59, col:60> 'int *' prefix '&' cannot overflow
    |   |     `-DeclRefExpr 0x15d86fba0 <col:60> 'int' lvalue Var 0x15d86f108 'len3' 'int'
    |   |-IfStmt 0x15d86ffb8 <line:23:7, line:27:2>
    |   | |-CallExpr 0x15d86fdb8 <line:23:11, col:29> 'int'
    |   | | |-ImplicitCastExpr 0x15d86fda0 <col:11> 'int (*)()' <FunctionToPointerDecay>
    |   | | | `-DeclRefExpr 0x15d86fd40 <col:11> 'int ()' Function 0x15d86fc88 'IS_ERR' 'int ()'
    |   | | |-ImplicitCastExpr 0x15d86fde8 <col:18> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x15d86fd60 <col:18> 'int' lvalue Var 0x15d86f088 'len2' 'int'
    |   | | `-ImplicitCastExpr 0x15d86fe00 <col:24> 'unsigned int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x15d86fd80 <col:24> 'unsigned int' lvalue ParmVar 0x15d86eea8 'flags' 'unsigned int'
    |   | `-CompoundStmt 0x15d86ff98 <line:24:2, line:27:2>
    |   |   |-CallExpr 0x15d86ff30 <line:25:4, col:9> 'int'
    |   |   | `-ImplicitCastExpr 0x15d86ff18 <col:4> 'int (*)()' <FunctionToPointerDecay>
    |   |   |   `-DeclRefExpr 0x15d86fef8 <col:4> 'int ()' Function 0x15d86fe40 'warn' 'int ()'
    |   |   `-ReturnStmt 0x15d86ff88 <line:26:4, col:11>
    |   |     `-RecoveryExpr 0x15d86ff68 <col:11> '<dependent type>' contains-errors lvalue
    |   |-IfStmt 0x15c057b40 <line:29:7, line:43:2> has_else
    |   | |-BinaryOperator 0x15d870030 <line:29:11, col:19> 'int' '>='
    |   | | |-ImplicitCastExpr 0x15d870018 <col:11> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x15d86ffd8 <col:11> 'int' lvalue Var 0x15d86f088 'len2' 'int'
    |   | | `-IntegerLiteral 0x15d86fff8 <col:19> 'int' 0
    |   | |-CompoundStmt 0x15c0576d0 <line:30:2, line:33:2>
    |   | | |-CallExpr 0x15d870218 <line:31:4, col:31> 'int'
    |   | | | |-ImplicitCastExpr 0x15d870200 <col:4> 'int (*)()' <FunctionToPointerDecay>
    |   | | | | `-DeclRefExpr 0x15d870130 <col:4> 'int ()' Function 0x15d870078 'DECR_LEN' 'int ()'
    |   | | | |-ImplicitCastExpr 0x15d870248 <col:13> 'int' <LValueToRValue>
    |   | | | | `-DeclRefExpr 0x15d870150 <col:13> 'int' lvalue ParmVar 0x15d86ee28 'der_len' 'int'
    |   | | | `-BinaryOperator 0x15d8701e0 <col:22, col:27> 'int' '+'
    |   | | |   |-ImplicitCastExpr 0x15d8701b0 <col:22> 'int' <LValueToRValue>
    |   | | |   | `-DeclRefExpr 0x15d870170 <col:22> 'int' lvalue Var 0x15d86f088 'len2' 'int'
    |   | | |   `-ImplicitCastExpr 0x15d8701c8 <col:27> 'int' <LValueToRValue>
    |   | | |     `-DeclRefExpr 0x15d870190 <col:27> 'int' lvalue Var 0x15d86f108 'len3' 'int'
    |   | | `-CallExpr 0x15c057698 <line:32:4, col:56> '<dependent type>' contains-errors
    |   | |   |-DeclRefExpr 0x15d870340 <col:4> 'int ()' Function 0x15d870288 '_asn1_append_value' 'int ()'
    |   | |   |-RecoveryExpr 0x15d870360 <col:24> '<dependent type>' contains-errors lvalue
    |   | |   |-BinaryOperator 0x15c057658 <col:30, col:46> 'const unsigned char *' '+'
    |   | |   | |-BinaryOperator 0x15c057600 <col:30, col:36> 'const unsigned char *' '+'
    |   | |   | | |-ImplicitCastExpr 0x15d8703c0 <col:30> 'const unsigned char *' <LValueToRValue>
    |   | |   | | | `-DeclRefExpr 0x15d870380 <col:30> 'const unsigned char *' lvalue ParmVar 0x15d86eda8 'der' 'const unsigned char *'
    |   | |   | | `-ImplicitCastExpr 0x15d8703d8 <col:36> 'int' <LValueToRValue>
    |   | |   | |   `-DeclRefExpr 0x15d8703a0 <col:36> 'int' lvalue Var 0x15d86f1b8 'counter' 'int'
    |   | |   | `-ImplicitCastExpr 0x15c057640 <col:46> 'int' <LValueToRValue>
    |   | |   |   `-DeclRefExpr 0x15c057620 <col:46> 'int' lvalue Var 0x15d86f108 'len3' 'int'
    |   | |   `-DeclRefExpr 0x15c057678 <col:52> 'int' lvalue Var 0x15d86f088 'len2' 'int'
    |   | `-CompoundStmt 0x15c057b10 <line:35:2, line:43:2>
    |   |   |-CallExpr 0x15c057768 <line:36:4, col:26> 'int'
    |   |   | |-ImplicitCastExpr 0x15c057750 <col:4> 'int (*)()' <FunctionToPointerDecay>
    |   |   | | `-DeclRefExpr 0x15c0576f0 <col:4> 'int ()' Function 0x15d870078 'DECR_LEN' 'int ()'
    |   |   | |-ImplicitCastExpr 0x15c057798 <col:13> 'int' <LValueToRValue>
    |   |   | | `-DeclRefExpr 0x15c057710 <col:13> 'int' lvalue ParmVar 0x15d86ee28 'der_len' 'int'
    |   |   | `-ImplicitCastExpr 0x15c0577b0 <col:22> 'int' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x15c057730 <col:22> 'int' lvalue Var 0x15d86f108 'len3' 'int'
    |   |   |-BinaryOperator 0x15c057990 <line:37:4, line:39:24> 'int' contains-errors '='
    |   |   | |-DeclRefExpr 0x15c0577c8 <line:37:4> 'int' lvalue Var 0x15d86f2e8 'result' 'int'
    |   |   | `-CallExpr 0x15c057950 <line:38:6, line:39:24> '<dependent type>' contains-errors
    |   |   |   |-RecoveryExpr 0x15c0577e8 <line:38:6> '<dependent type>' contains-errors lvalue
    |   |   |   |-RecoveryExpr 0x15c057808 <col:31> '<dependent type>' contains-errors lvalue
    |   |   |   |-BinaryOperator 0x15c0578f0 <col:37, col:53> 'const unsigned char *' '+'
    |   |   |   | |-BinaryOperator 0x15c057898 <col:37, col:43> 'const unsigned char *' '+'
    |   |   |   | | |-ImplicitCastExpr 0x15c057868 <col:37> 'const unsigned char *' <LValueToRValue>
    |   |   |   | | | `-DeclRefExpr 0x15c057828 <col:37> 'const unsigned char *' lvalue ParmVar 0x15d86eda8 'der' 'const unsigned char *'
    |   |   |   | | `-ImplicitCastExpr 0x15c057880 <col:43> 'int' <LValueToRValue>
    |   |   |   | |   `-DeclRefExpr 0x15c057848 <col:43> 'int' lvalue Var 0x15d86f1b8 'counter' 'int'
    |   |   |   | `-ImplicitCastExpr 0x15c0578d8 <col:53> 'int' <LValueToRValue>
    |   |   |   |   `-DeclRefExpr 0x15c0578b8 <col:53> 'int' lvalue Var 0x15d86f108 'len3' 'int'
    |   |   |   |-DeclRefExpr 0x15c057910 <line:39:10> 'int' lvalue ParmVar 0x15d86ee28 'der_len' 'int'
    |   |   |   `-DeclRefExpr 0x15c057930 <col:19> 'unsigned int' lvalue ParmVar 0x15d86eea8 'flags' 'unsigned int'
    |   |   |-IfStmt 0x15c057a90 <line:40:4, line:41:13>
    |   |   | |-BinaryOperator 0x15c057a28 <line:40:8, col:18> 'int' contains-errors '!='
    |   |   | | |-DeclRefExpr 0x15c0579b0 <col:8> 'int' lvalue Var 0x15d86f2e8 'result' 'int'
    |   |   | | `-RecoveryExpr 0x15c057a08 <col:18> '<dependent type>' contains-errors lvalue
    |   |   | `-ReturnStmt 0x15c057a80 <line:41:6, col:13>
    |   |   |   `-ImplicitCastExpr 0x15c057a68 <col:13> 'int' <LValueToRValue>
    |   |   |     `-DeclRefExpr 0x15c057a48 <col:13> 'int' lvalue Var 0x15d86f2e8 'result' 'int'
    |   |   `-BinaryOperator 0x15c057af0 <line:42:4, col:11> 'int' '='
    |   |     |-DeclRefExpr 0x15c057ab0 <col:4> 'int' lvalue Var 0x15d86f088 'len2' 'int'
    |   |     `-IntegerLiteral 0x15c057ad0 <col:11> 'int' 0
    |   |-CallExpr 0x15c057be8 <line:45:7, col:26> 'int'
    |   | |-ImplicitCastExpr 0x15c057bd0 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x15c057b70 <col:7> 'int ()' Function 0x15d870078 'DECR_LEN' 'int ()'
    |   | |-ImplicitCastExpr 0x15c057c18 <col:16> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x15c057b90 <col:16> 'int' lvalue ParmVar 0x15d86ee28 'der_len' 'int'
    |   | `-IntegerLiteral 0x15c057bb0 <col:25> 'int' 1
    |   `-CompoundAssignOperator 0x15c057d20 <line:46:7, col:32> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |     |-DeclRefExpr 0x15c057c30 <col:7> 'int' lvalue Var 0x15d86f1b8 'counter' 'int'
    |     `-BinaryOperator 0x15c057d00 <col:18, col:32> 'int' '+'
    |       |-BinaryOperator 0x15c057cc0 <col:18, col:25> 'int' '+'
    |       | |-ImplicitCastExpr 0x15c057c90 <col:18> 'int' <LValueToRValue>
    |       | | `-DeclRefExpr 0x15c057c50 <col:18> 'int' lvalue Var 0x15d86f088 'len2' 'int'
    |       | `-ImplicitCastExpr 0x15c057ca8 <col:25> 'int' <LValueToRValue>
    |       |   `-DeclRefExpr 0x15c057c70 <col:25> 'int' lvalue Var 0x15d86f108 'len3' 'int'
    |       `-IntegerLiteral 0x15c057ce0 <col:32> 'int' 1
    |-ReturnStmt 0x15c057de0 <line:49:3, col:10>
    | `-RecoveryExpr 0x15c057dc0 <col:10> '<dependent type>' contains-errors lvalue
    `-LabelStmt 0x15c057e88 <line:51:1, line:52:10> 'cleanup'
      `-ReturnStmt 0x15c057e28 <col:3, col:10>
        `-ImplicitCastExpr 0x15c057e10 <col:10> 'int' <LValueToRValue>
          `-DeclRefExpr 0x15c057df0 <col:10> 'int' lvalue Var 0x15d86f2e8 'result' 'int'
