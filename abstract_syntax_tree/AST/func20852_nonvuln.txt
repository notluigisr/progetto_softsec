TranslationUnitDecl 0x123855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1238564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x123855bd0 '__int128'
|-TypedefDecl 0x123856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x123855bf0 'unsigned __int128'
|-TypedefDecl 0x12400be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12400bc00 'struct __NSConstantString_tag'
|   `-Record 0x123856580 '__NSConstantString_tag'
|-TypedefDecl 0x12400be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x123855d90 '__SVInt8_t'
|-TypedefDecl 0x12400bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x123855db0 '__SVInt16_t'
|-TypedefDecl 0x12400bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x123855dd0 '__SVInt32_t'
|-TypedefDecl 0x12400bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x123855df0 '__SVInt64_t'
|-TypedefDecl 0x12400c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x123855e10 '__SVUint8_t'
|-TypedefDecl 0x12400c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x123855e30 '__SVUint16_t'
|-TypedefDecl 0x12400c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x123855e50 '__SVUint32_t'
|-TypedefDecl 0x12400c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x123855e70 '__SVUint64_t'
|-TypedefDecl 0x12400c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x123855e90 '__SVFloat16_t'
|-TypedefDecl 0x12400c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x123855eb0 '__SVFloat32_t'
|-TypedefDecl 0x12400c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x123855ed0 '__SVFloat64_t'
|-TypedefDecl 0x12400c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x123855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12400c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x123855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12400c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x123855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12400c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x123855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12400c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x123855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12400c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x123855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12400c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x123855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12400c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x123855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12400c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x123855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12400c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x123856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12400c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x123856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12400c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x123856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12400c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x123856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12400c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x123856090 '__clang_svint8x3_t'
|-TypedefDecl 0x12400c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1238560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12400c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1238560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12400c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1238560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12400c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x123856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12400ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x123856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12400cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x123856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12400cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x123856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12400cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x123856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12400d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1238561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12400d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1238561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12400d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1238561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12400d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x123856210 '__clang_svint8x4_t'
|-TypedefDecl 0x12400d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x123856230 '__clang_svint16x4_t'
|-TypedefDecl 0x12400d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x123856250 '__clang_svint32x4_t'
|-TypedefDecl 0x12400d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x123856270 '__clang_svint64x4_t'
|-TypedefDecl 0x12400d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x123856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12400d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1238562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12400d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1238562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12400d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1238562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12400d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x123856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12400d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x123856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12400d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x123856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12400d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x123856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12400da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x123856390 '__SVBool_t'
|-TypedefDecl 0x12400da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1238563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12400dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1238563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12400db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1238563f0 '__SVCount_t'
|-TypedefDecl 0x12400dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12400dbb0 'char *'
|   `-BuiltinType 0x1238556b0 'char'
|-TypedefDecl 0x12400dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12400dbb0 'char *'
|   `-BuiltinType 0x1238556b0 'char'
|-FunctionDecl 0x12400dfa8 <dataset_diviso_filec/func20852_nonvuln.c:1:1, line:56:1> line:1:1 invalid vte_sequence_handler_set_title_internal 'int (int *, int *, int, int)'
| |-ParmVarDecl 0x12400dd28 <col:41, col:54> col:54 referenced invalid terminal 'int *'
| |-ParmVarDecl 0x12400dda8 <line:2:6, col:19> col:19 invalid params 'int *'
| |-ParmVarDecl 0x12400de28 <line:3:6, col:15> col:15 invalid icon_title 'int'
| |-ParmVarDecl 0x12400dea8 <line:4:6, col:15> col:15 invalid window_title 'int'
| `-CompoundStmt 0x12402a2b0 <line:5:1, line:56:1>
|   |-DeclStmt 0x12400e140 <line:7:2, col:20>
|   | `-VarDecl 0x12400e0a0 <col:2, col:16> col:8 used title 'char *' cinit
|   |   `-RecoveryExpr 0x12400e120 <col:16> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x12400e2d8 <line:9:2, line:10:3>
|   | |-BinaryOperator 0x12400e2a8 <line:9:6, col:45> 'int' contains-errors '&&'
|   | | |-BinaryOperator 0x12400e248 <col:6, col:20> 'int' contains-errors '=='
|   | | | |-RecoveryExpr 0x12400e158 <col:6> '<dependent type>' contains-errors lvalue
|   | | | `-RecoveryExpr 0x12400e228 <col:20> '<dependent type>' contains-errors lvalue
|   | | `-BinaryOperator 0x12400e288 <col:29, col:45> 'int' contains-errors '=='
|   | |   |-RecoveryExpr 0x12400e1b0 <col:29> '<dependent type>' contains-errors lvalue
|   | |   `-RecoveryExpr 0x12400e268 <col:45> '<dependent type>' contains-errors lvalue
|   | `-ReturnStmt 0x12400e2c8 <line:10:3>
|   `-IfStmt 0x12402a290 <line:14:2, line:55:2>
|     |-RecoveryExpr 0x124027b60 <line:14:6> '<dependent type>' contains-errors lvalue
|     `-CompoundStmt 0x12402a270 <col:13, line:55:2>
|       |-IfStmt 0x124028748 <line:15:3, line:25:3> has_else
|       | |-CallExpr 0x124027ce0 <line:15:7, col:31> '<dependent type>' contains-errors
|       | | |-DeclRefExpr 0x124027c60 <col:7> 'int ()' Function 0x124027ba8 'G_VALUE_HOLDS_LONG' 'int ()'
|       | | `-RecoveryExpr 0x124027cc0 <col:26> '<dependent type>' contains-errors lvalue
|       | |-CompoundStmt 0x1240280b8 <col:34, line:18:3>
|       | | `-BinaryOperator 0x124028098 <line:17:4, col:58> 'char *' contains-errors '='
|       | |   |-DeclRefExpr 0x124027d08 <col:4> 'char *' contains-errors lvalue Var 0x12400e0a0 'title' 'char *'
|       | |   `-CallExpr 0x124028068 <col:12, col:58> '<dependent type>' contains-errors
|       | |     |-DeclRefExpr 0x124027e08 <col:12> 'int ()' Function 0x124027d50 'g_strdup_printf' 'int ()'
|       | |     |-StringLiteral 0x124027e70 <col:28> 'char[4]' lvalue "STR"
|       | |     `-CallExpr 0x124028040 <col:35, col:57> '<dependent type>' contains-errors
|       | |       |-DeclRefExpr 0x124027f70 <col:35> 'int ()' Function 0x124027eb8 'g_value_get_long' 'int ()'
|       | |       `-RecoveryExpr 0x124028020 <col:52> '<dependent type>' contains-errors lvalue
|       | `-IfStmt 0x124028718 <line:19:3, line:25:3> has_else
|       |   |-CallExpr 0x124028230 <line:19:7, col:33> '<dependent type>' contains-errors
|       |   | |-DeclRefExpr 0x1240281b0 <col:7> 'int ()' Function 0x1240280f8 'G_VALUE_HOLDS_STRING' 'int ()'
|       |   | `-RecoveryExpr 0x124028210 <col:28> '<dependent type>' contains-errors lvalue
|       |   |-CompoundStmt 0x124028378 <col:36, line:22:3>
|       |   `-IfStmt 0x1240286f8 <line:23:3, line:25:3>
|       |     |-RecoveryExpr 0x124028488 <line:23:7, col:34> '_Bool' contains-errors
|       |     `-CompoundStmt 0x1240286e8 <col:37, line:25:3>
|       `-IfStmt 0x12402a250 <line:26:3, line:54:3>
|         |-RecoveryExpr 0x124028798 <line:26:7, col:16> '_Bool' contains-errors
|         `-CompoundStmt 0x12402a1f8 <col:22, line:54:3>
|           |-DeclStmt 0x1240288d0 <line:27:4, col:23>
|           | |-VarDecl 0x1240287d0 <col:4, col:10> col:10 used p 'char *'
|           | `-VarDecl 0x124028850 <col:4, col:14> col:14 used validated 'char *'
|           |-DeclStmt 0x124028968 <line:28:4, col:19>
|           | `-VarDecl 0x124028900 <col:4, col:16> col:16 used end 'const char *'
|           |-CallExpr 0x124029258 <line:31:4, col:46> 'int' contains-errors
|           | |-ImplicitCastExpr 0x124029240 <col:4> 'int (*)()' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x124028eb8 <col:4> 'int ()' Function 0x124028e00 'g_utf8_validate' 'int ()'
|           | |-ImplicitCastExpr 0x124029290 <col:20> 'char *' contains-errors <LValueToRValue>
|           | | `-DeclRefExpr 0x124028ed8 <col:20> 'char *' contains-errors lvalue Var 0x12400e0a0 'title' 'char *'
|           | |-CallExpr 0x124029148 <col:27, col:39> 'unsigned long' contains-errors
|           | | |-ImplicitCastExpr 0x124029130 <col:27> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|           | | | `-DeclRefExpr 0x1240290a8 <col:27> 'unsigned long (const char *)' Function 0x124028f38 'strlen' 'unsigned long (const char *)'
|           | | `-ImplicitCastExpr 0x124029188 <col:34> 'const char *' contains-errors <NoOp>
|           | |   `-ImplicitCastExpr 0x124029170 <col:34> 'char *' contains-errors <LValueToRValue>
|           | |     `-DeclRefExpr 0x1240290c8 <col:34> 'char *' contains-errors lvalue Var 0x12400e0a0 'title' 'char *'
|           | `-UnaryOperator 0x1240291f0 <col:42, col:43> 'const char **' prefix '&' cannot overflow
|           |   `-DeclRefExpr 0x1240291a0 <col:43> 'const char *' lvalue Var 0x124028900 'end' 'const char *'
|           |-BinaryOperator 0x1240294f0 <line:32:4, col:44> 'char *' contains-errors '='
|           | |-DeclRefExpr 0x1240292a8 <col:4> 'char *' lvalue Var 0x124028850 'validated' 'char *'
|           | `-ImplicitCastExpr 0x1240294d8 <col:16, col:44> 'char *' contains-errors <IntegralToPointer>
|           |   `-CallExpr 0x124029490 <col:16, col:44> 'int' contains-errors
|           |     |-ImplicitCastExpr 0x124029478 <col:16> 'int (*)()' <FunctionToPointerDecay>
|           |     | `-DeclRefExpr 0x1240293a8 <col:16> 'int ()' Function 0x1240292f0 'g_strndup' 'int ()'
|           |     |-ImplicitCastExpr 0x1240294c0 <col:26> 'char *' contains-errors <LValueToRValue>
|           |     | `-DeclRefExpr 0x1240293c8 <col:26> 'char *' contains-errors lvalue Var 0x12400e0a0 'title' 'char *'
|           |     `-BinaryOperator 0x124029458 <col:33, col:39> 'long' contains-errors '-'
|           |       |-ImplicitCastExpr 0x124029428 <col:33> 'const char *' <LValueToRValue>
|           |       | `-DeclRefExpr 0x1240293e8 <col:33> 'const char *' lvalue Var 0x124028900 'end' 'const char *'
|           |       `-ImplicitCastExpr 0x124029440 <col:39> 'char *' contains-errors <LValueToRValue>
|           |         `-DeclRefExpr 0x124029408 <col:39> 'char *' contains-errors lvalue Var 0x12400e0a0 'title' 'char *'
|           |-ForStmt 0x1240298e8 <line:35:4, line:39:4>
|           | |-BinaryOperator 0x124029568 <line:35:9, col:13> 'char *' '='
|           | | |-DeclRefExpr 0x124029510 <col:9> 'char *' lvalue Var 0x1240287d0 'p' 'char *'
|           | | `-ImplicitCastExpr 0x124029550 <col:13> 'char *' <LValueToRValue>
|           | |   `-DeclRefExpr 0x124029530 <col:13> 'char *' lvalue Var 0x124028850 'validated' 'char *'
|           | |-<<<NULL>>>
|           | |-BinaryOperator 0x124029620 <col:24, col:30> 'int' '!='
|           | | |-ImplicitCastExpr 0x124029608 <col:24, col:25> 'int' <IntegralCast>
|           | | | `-ImplicitCastExpr 0x1240295f0 <col:24, col:25> 'char' <LValueToRValue>
|           | | |   `-UnaryOperator 0x1240295c0 <col:24, col:25> 'char' lvalue prefix '*' cannot overflow
|           | | |     `-ImplicitCastExpr 0x1240295a8 <col:25> 'char *' <LValueToRValue>
|           | | |       `-DeclRefExpr 0x124029588 <col:25> 'char *' lvalue Var 0x1240287d0 'p' 'char *'
|           | | `-CharacterLiteral 0x1240295d8 <col:30> 'int' 0
|           | |-UnaryOperator 0x124029660 <col:36, col:37> 'char *' postfix '++'
|           | | `-DeclRefExpr 0x124029640 <col:36> 'char *' lvalue Var 0x1240287d0 'p' 'char *'
|           | `-CompoundStmt 0x1240298d0 <col:41, line:39:4>
|           |   `-IfStmt 0x1240298b0 <line:36:5, line:38:5>
|           |     |-BinaryOperator 0x1240297d8 <line:36:9, col:25> 'int' '=='
|           |     | |-ParenExpr 0x124029738 <col:9, col:19> 'int'
|           |     | | `-BinaryOperator 0x124029718 <col:10, col:15> 'int' '&'
|           |     | |   |-ImplicitCastExpr 0x124029700 <col:10, col:11> 'int' <IntegralCast>
|           |     | |   | `-ImplicitCastExpr 0x1240296e8 <col:10, col:11> 'char' <LValueToRValue>
|           |     | |   |   `-UnaryOperator 0x1240296b0 <col:10, col:11> 'char' lvalue prefix '*' cannot overflow
|           |     | |   |     `-ImplicitCastExpr 0x124029698 <col:11> 'char *' <LValueToRValue>
|           |     | |   |       `-DeclRefExpr 0x124029678 <col:11> 'char *' lvalue Var 0x1240287d0 'p' 'char *'
|           |     | |   `-IntegerLiteral 0x1240296c8 <col:15> 'int' 31
|           |     | `-ImplicitCastExpr 0x1240297c0 <col:24, col:25> 'int' <IntegralCast>
|           |     |   `-ImplicitCastExpr 0x1240297a8 <col:24, col:25> 'char' <LValueToRValue>
|           |     |     `-UnaryOperator 0x124029790 <col:24, col:25> 'char' lvalue prefix '*' cannot overflow
|           |     |       `-ImplicitCastExpr 0x124029778 <col:25> 'char *' <LValueToRValue>
|           |     |         `-DeclRefExpr 0x124029758 <col:25> 'char *' lvalue Var 0x1240287d0 'p' 'char *'
|           |     `-CompoundStmt 0x124029898 <col:28, line:38:5>
|           |       `-BinaryOperator 0x124029878 <line:37:6, col:11> 'char' '='
|           |         |-UnaryOperator 0x124029830 <col:6, col:7> 'char' lvalue prefix '*' cannot overflow
|           |         | `-ImplicitCastExpr 0x124029818 <col:7> 'char *' <LValueToRValue>
|           |         |   `-DeclRefExpr 0x1240297f8 <col:7> 'char *' lvalue Var 0x1240287d0 'p' 'char *'
|           |         `-ImplicitCastExpr 0x124029860 <col:11> 'char' <IntegralCast>
|           |           `-CharacterLiteral 0x124029848 <col:11> 'int' 32
|           |-IfStmt 0x124029da8 <line:42:4, line:45:4>
|           | |-RecoveryExpr 0x124029920 <line:42:8> '<dependent type>' contains-errors lvalue
|           | `-CompoundStmt 0x124029d88 <col:22, line:45:4>
|           |   |-CallExpr 0x124029af0 <line:43:5, col:48> '<dependent type>' contains-errors
|           |   | |-DeclRefExpr 0x124029a20 <col:5> 'int ()' Function 0x124029968 'g_free' 'int ()'
|           |   | `-CXXDependentScopeMemberExpr 0x124029aa8 <col:13, col:28> '<dependent type>' contains-errors lvalue ->window_title_changed
|           |   |   `-CXXDependentScopeMemberExpr 0x124029a60 <col:13, col:23> '<dependent type>' contains-errors lvalue ->pvt
|           |   |     `-RecoveryExpr 0x124029a40 <col:13> '<dependent type>' contains-errors lvalue
|           |   `-BinaryOperator 0x124029d68 <line:44:5, col:62> '<dependent type>' contains-errors '='
|           |     |-CXXDependentScopeMemberExpr 0x124029ba8 <col:5, col:20> '<dependent type>' contains-errors lvalue ->window_title_changed
|           |     | `-CXXDependentScopeMemberExpr 0x124029b60 <col:5, col:15> '<dependent type>' contains-errors lvalue ->pvt
|           |     |   `-RecoveryExpr 0x124029b38 <col:5> '<dependent type>' contains-errors lvalue
|           |     |     `-DeclRefExpr 0x124029b18 <col:5> 'int *' lvalue ParmVar 0x12400dd28 'terminal' 'int *'
|           |     `-CallExpr 0x124029d28 <col:43, col:62> 'int'
|           |       |-ImplicitCastExpr 0x124029d10 <col:43> 'int (*)()' <FunctionToPointerDecay>
|           |       | `-DeclRefExpr 0x124029cd0 <col:43> 'int ()' Function 0x124029c18 'g_strdup' 'int ()'
|           |       `-ImplicitCastExpr 0x124029d50 <col:53> 'char *' <LValueToRValue>
|           |         `-DeclRefExpr 0x124029cf0 <col:53> 'char *' lvalue Var 0x124028850 'validated' 'char *'
|           |-IfStmt 0x12402a0a8 <line:47:4, line:50:4>
|           | |-RecoveryExpr 0x124029dc8 <line:47:8> '<dependent type>' contains-errors lvalue
|           | `-CompoundStmt 0x12402a088 <col:20, line:50:4>
|           |   |-CallExpr 0x124029ed0 <line:48:5, col:46> '<dependent type>' contains-errors
|           |   | |-DeclRefExpr 0x124029e00 <col:5> 'int ()' Function 0x124029968 'g_free' 'int ()'
|           |   | `-CXXDependentScopeMemberExpr 0x124029e88 <col:13, col:28> '<dependent type>' contains-errors lvalue ->icon_title_changed
|           |   |   `-CXXDependentScopeMemberExpr 0x124029e40 <col:13, col:23> '<dependent type>' contains-errors lvalue ->pvt
|           |   |     `-RecoveryExpr 0x124029e20 <col:13> '<dependent type>' contains-errors lvalue
|           |   `-BinaryOperator 0x12402a068 <line:49:5, col:60> '<dependent type>' contains-errors '='
|           |     |-CXXDependentScopeMemberExpr 0x124029f88 <col:5, col:20> '<dependent type>' contains-errors lvalue ->icon_title_changed
|           |     | `-CXXDependentScopeMemberExpr 0x124029f40 <col:5, col:15> '<dependent type>' contains-errors lvalue ->pvt
|           |     |   `-RecoveryExpr 0x124029f18 <col:5> '<dependent type>' contains-errors lvalue
|           |     |     `-DeclRefExpr 0x124029ef8 <col:5> 'int *' lvalue ParmVar 0x12400dd28 'terminal' 'int *'
|           |     `-CallExpr 0x12402a028 <col:41, col:60> 'int'
|           |       |-ImplicitCastExpr 0x12402a010 <col:41> 'int (*)()' <FunctionToPointerDecay>
|           |       | `-DeclRefExpr 0x124029fd0 <col:41> 'int ()' Function 0x124029c18 'g_strdup' 'int ()'
|           |       `-ImplicitCastExpr 0x12402a050 <col:51> 'char *' <LValueToRValue>
|           |         `-DeclRefExpr 0x124029ff0 <col:51> 'char *' lvalue Var 0x124028850 'validated' 'char *'
|           |-CallExpr 0x12402a120 <line:52:4, col:21> 'int'
|           | |-ImplicitCastExpr 0x12402a108 <col:4> 'int (*)()' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x12402a0c8 <col:4> 'int ()' Function 0x124029968 'g_free' 'int ()'
|           | `-ImplicitCastExpr 0x12402a148 <col:12> 'char *' <LValueToRValue>
|           |   `-DeclRefExpr 0x12402a0e8 <col:12> 'char *' lvalue Var 0x124028850 'validated' 'char *'
|           `-CallExpr 0x12402a1b8 <line:53:4, col:16> 'int' contains-errors
|             |-ImplicitCastExpr 0x12402a1a0 <col:4> 'int (*)()' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x12402a160 <col:4> 'int ()' Function 0x124029968 'g_free' 'int ()'
|             `-ImplicitCastExpr 0x12402a1e0 <col:11> 'char *' contains-errors <LValueToRValue>
|               `-DeclRefExpr 0x12402a180 <col:11> 'char *' contains-errors lvalue Var 0x12400e0a0 'title' 'char *'
`-FunctionDecl 0x124028f38 <line:31:27> col:27 implicit used strlen 'unsigned long (const char *)' extern
  |-ParmVarDecl 0x124029038 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x124028fe0 <<invalid sloc>> Implicit 902
