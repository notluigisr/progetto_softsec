TranslationUnitDecl 0x139055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1390564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x139055bd0 '__int128'
|-TypedefDecl 0x139056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x139055bf0 'unsigned __int128'
|-TypedefDecl 0x13980be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13980bc00 'struct __NSConstantString_tag'
|   `-Record 0x139056580 '__NSConstantString_tag'
|-TypedefDecl 0x13980be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x139055d90 '__SVInt8_t'
|-TypedefDecl 0x13980bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x139055db0 '__SVInt16_t'
|-TypedefDecl 0x13980bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x139055dd0 '__SVInt32_t'
|-TypedefDecl 0x13980bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x139055df0 '__SVInt64_t'
|-TypedefDecl 0x13980c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x139055e10 '__SVUint8_t'
|-TypedefDecl 0x13980c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x139055e30 '__SVUint16_t'
|-TypedefDecl 0x13980c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x139055e50 '__SVUint32_t'
|-TypedefDecl 0x13980c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x139055e70 '__SVUint64_t'
|-TypedefDecl 0x13980c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x139055e90 '__SVFloat16_t'
|-TypedefDecl 0x13980c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x139055eb0 '__SVFloat32_t'
|-TypedefDecl 0x13980c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x139055ed0 '__SVFloat64_t'
|-TypedefDecl 0x13980c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x139055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13980c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x139055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13980c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x139055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13980c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x139055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13980c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x139055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13980c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x139055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13980c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x139055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13980c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x139055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13980c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x139055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13980c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x139056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13980c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x139056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13980c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x139056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13980c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x139056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13980c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x139056090 '__clang_svint8x3_t'
|-TypedefDecl 0x13980c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1390560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13980c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1390560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13980c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1390560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13980c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x139056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13980ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x139056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13980cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x139056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13980cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x139056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13980cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x139056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13980d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1390561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13980d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1390561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13980d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1390561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13980d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x139056210 '__clang_svint8x4_t'
|-TypedefDecl 0x13980d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x139056230 '__clang_svint16x4_t'
|-TypedefDecl 0x13980d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x139056250 '__clang_svint32x4_t'
|-TypedefDecl 0x13980d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x139056270 '__clang_svint64x4_t'
|-TypedefDecl 0x13980d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x139056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13980d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1390562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13980d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1390562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13980d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1390562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13980d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x139056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13980d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x139056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13980d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x139056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13980d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x139056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13980da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x139056390 '__SVBool_t'
|-TypedefDecl 0x13980da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1390563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13980dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1390563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13980db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1390563f0 '__SVCount_t'
|-TypedefDecl 0x13980dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13980dbb0 'char *'
|   `-BuiltinType 0x1390556b0 'char'
|-TypedefDecl 0x13980dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13980dbb0 'char *'
|   `-BuiltinType 0x1390556b0 'char'
|-FunctionDecl 0x13980df18 <dataset_diviso_filec/func6927_vuln.c:1:1, line:58:1> line:1:14 invalid r_socket_http_answer 'char *(int *, int *, int *)' static
| |-ParmVarDecl 0x13980dd28 <col:36, col:45> col:45 invalid s 'int *'
| |-ParmVarDecl 0x13980dda8 <col:48, col:53> col:53 code 'int *'
| |-ParmVarDecl 0x13980de28 <col:59, col:64> col:64 used rlen 'int *'
| `-CompoundStmt 0x13a00b738 <col:70, line:58:1>
|   |-CallExpr 0x13980e1d8 <line:2:2, col:31> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x13980e130 <col:2> 'int ()' Function 0x13980e078 'r_return_val_if_fail' 'int ()'
|   | |-RecoveryExpr 0x13980e150 <col:24> '<dependent type>' contains-errors lvalue
|   | `-RecoveryExpr 0x13980e1b8 <col:27> '<dependent type>' contains-errors lvalue
|   |-DeclStmt 0x13980e288 <line:3:2, col:15>
|   | `-VarDecl 0x13980e220 <col:2, col:14> col:14 used p 'const char *'
|   |-DeclStmt 0x139122d50 <line:4:2, col:44>
|   | |-VarDecl 0x13980e2b8 <col:2, col:6> col:6 used ret 'int'
|   | |-VarDecl 0x13980e338 <col:2, col:17> col:11 used len 'int' cinit
|   | | `-IntegerLiteral 0x13980e3a0 <col:17> 'int' 0
|   | |-VarDecl 0x139122c00 <col:2, col:28> col:20 used bufsz 'int' cinit
|   | | `-IntegerLiteral 0x139122c68 <col:28> 'int' 32768
|   | `-VarDecl 0x139122ca0 <col:2, col:43> col:35 used delta 'int' cinit
|   |   `-IntegerLiteral 0x139122d08 <col:43> 'int' 0
|   |-DeclStmt 0x139123678 <line:5:2, col:41>
|   | |-VarDecl 0x139122d80 <col:2, col:8> col:8 used dn 'char *'
|   | `-VarDecl 0x139122e00 <col:2, col:40> col:13 used buf 'char *' cinit
|   |   `-ImplicitCastExpr 0x139123648 <col:19, col:40> 'char *' <BitCast>
|   |     `-CallExpr 0x1391235e8 <col:19, col:40> 'void *'
|   |       |-ImplicitCastExpr 0x1391235d0 <col:19> 'void *(*)(unsigned long, unsigned long)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x1391234e0 <col:19> 'void *(unsigned long, unsigned long)' Function 0x1391232d0 'calloc' 'void *(unsigned long, unsigned long)'
|   |       |-ImplicitCastExpr 0x139123618 <col:27> 'unsigned long' <IntegralCast>
|   |       | `-IntegerLiteral 0x139123500 <col:27> 'int' 1
|   |       `-ImplicitCastExpr 0x139123630 <col:30, col:38> 'unsigned long' <IntegralCast>
|   |         `-BinaryOperator 0x139123578 <col:30, col:38> 'int' '+'
|   |           |-ImplicitCastExpr 0x139123560 <col:30> 'int' <LValueToRValue>
|   |           | `-DeclRefExpr 0x139123520 <col:30> 'int' lvalue Var 0x139122c00 'bufsz' 'int'
|   |           `-IntegerLiteral 0x139123540 <col:38> 'int' 32
|   |-IfStmt 0x139123740 <line:6:2, line:8:2>
|   | |-UnaryOperator 0x1391236c8 <line:6:6, col:7> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x1391236b0 <col:7> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x139123690 <col:7> 'char *' lvalue Var 0x139122e00 'buf' 'char *'
|   | `-CompoundStmt 0x139123728 <col:12, line:8:2>
|   |   `-ReturnStmt 0x139123718 <line:7:3, col:10>
|   |     `-RecoveryExpr 0x1391236f8 <col:10> '<dependent type>' contains-errors lvalue
|   |-DeclStmt 0x139123818 <line:9:2, col:18>
|   | `-VarDecl 0x139123778 <col:2, col:14> col:8 used res 'char *' cinit
|   |   `-RecoveryExpr 0x1391237f8 <col:14> '<dependent type>' contains-errors lvalue
|   |-DeclStmt 0x139123a08 <line:10:2, col:49>
|   | `-VarDecl 0x139123848 <col:2, col:6> col:6 used olen 'int'
|   |-IfStmt 0x13a009630 <line:11:2, line:17:2> has_else
|   | |-ParenExpr 0x13a0092d8 <line:11:6, col:45> 'char *'
|   | | `-BinaryOperator 0x13a0092b8 <col:7, col:44> 'char *' '='
|   | |   |-DeclRefExpr 0x139123a20 <col:7> 'char *' lvalue Var 0x139122d80 'dn' 'char *'
|   | |   `-CStyleCastExpr 0x13a009290 <col:12, col:44> 'char *' <IntegralToPointer>
|   | |     `-CallExpr 0x13a009218 <col:19, col:44> 'int'
|   | |       |-ImplicitCastExpr 0x13a009200 <col:19> 'int (*)()' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x139123b20 <col:19> 'int ()' Function 0x139123a68 'r_str_casestr' 'int ()'
|   | |       |-ImplicitCastExpr 0x13a009248 <col:34> 'char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x139123b40 <col:34> 'char *' lvalue Var 0x139122e00 'buf' 'char *'
|   | |       `-ImplicitCastExpr 0x13a009260 <col:39> 'char *' <ArrayToPointerDecay>
|   | |         `-StringLiteral 0x139123ba0 <col:39> 'char[4]' lvalue "STR"
|   | |-CompoundStmt 0x13a009368 <col:48, line:13:2>
|   | | `-CompoundAssignOperator 0x13a009338 <line:12:3, col:12> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |   |-DeclRefExpr 0x13a0092f8 <col:3> 'int' lvalue Var 0x139122ca0 'delta' 'int'
|   | |   `-IntegerLiteral 0x13a009318 <col:12> 'int' 2
|   | `-IfStmt 0x13a009600 <line:13:9, line:17:2> has_else
|   |   |-ParenExpr 0x13a0094d8 <line:13:13, col:52> 'char *'
|   |   | `-BinaryOperator 0x13a0094b8 <col:14, col:51> 'char *' '='
|   |   |   |-DeclRefExpr 0x13a009380 <col:14> 'char *' lvalue Var 0x139122d80 'dn' 'char *'
|   |   |   `-CStyleCastExpr 0x13a009490 <col:19, col:51> 'char *' <IntegralToPointer>
|   |   |     `-CallExpr 0x13a009418 <col:26, col:51> 'int'
|   |   |       |-ImplicitCastExpr 0x13a009400 <col:26> 'int (*)()' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x13a0093a0 <col:26> 'int ()' Function 0x139123a68 'r_str_casestr' 'int ()'
|   |   |       |-ImplicitCastExpr 0x13a009448 <col:41> 'char *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x13a0093c0 <col:41> 'char *' lvalue Var 0x139122e00 'buf' 'char *'
|   |   |       `-ImplicitCastExpr 0x13a009460 <col:46> 'char *' <ArrayToPointerDecay>
|   |   |         `-StringLiteral 0x13a0093e0 <col:46> 'char[4]' lvalue "STR"
|   |   |-CompoundStmt 0x13a009568 <col:55, line:15:2>
|   |   | `-CompoundAssignOperator 0x13a009538 <line:14:3, col:12> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |   |-DeclRefExpr 0x13a0094f8 <col:3> 'int' lvalue Var 0x139122ca0 'delta' 'int'
|   |   |   `-IntegerLiteral 0x13a009518 <col:12> 'int' 4
|   |   `-CompoundStmt 0x13a0095e8 <line:15:9, line:17:2>
|   |     `-GotoStmt 0x13a0095d0 <line:16:3, col:8> 'fail' 0x13a009580
|   |-CompoundAssignOperator 0x13a0096b8 <line:19:2, col:10> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x13a009660 <col:2> 'int' lvalue Var 0x139123848 'olen' 'int'
|   | `-ImplicitCastExpr 0x13a0096a0 <col:10> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x13a009680 <col:10> 'int' lvalue Var 0x139122ca0 'delta' 'int'
|   |-BinaryOperator 0x13a009770 <line:20:2, col:8> 'char' '='
|   | |-UnaryOperator 0x13a009720 <col:2, col:3> 'char' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x13a009708 <col:3> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x13a0096e8 <col:3> 'char *' lvalue Var 0x139122d80 'dn' 'char *'
|   | `-ImplicitCastExpr 0x13a009758 <col:8> 'char' <IntegralCast>
|   |   `-IntegerLiteral 0x13a009738 <col:8> 'int' 0
|   |-BinaryOperator 0x13a0098a0 <line:22:2, col:31> 'const char *' '='
|   | |-DeclRefExpr 0x13a009790 <col:2> 'const char *' lvalue Var 0x13980e220 'p' 'const char *'
|   | `-ImplicitCastExpr 0x13a009888 <col:6, col:31> 'const char *' <IntegralToPointer>
|   |   `-CallExpr 0x13a009828 <col:6, col:31> 'int'
|   |     |-ImplicitCastExpr 0x13a009810 <col:6> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x13a0097b0 <col:6> 'int ()' Function 0x139123a68 'r_str_casestr' 'int ()'
|   |     |-ImplicitCastExpr 0x13a009858 <col:21> 'char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x13a0097d0 <col:21> 'char *' lvalue Var 0x139122e00 'buf' 'char *'
|   |     `-ImplicitCastExpr 0x13a009870 <col:26> 'char *' <ArrayToPointerDecay>
|   |       `-StringLiteral 0x13a0097f0 <col:26> 'char[4]' lvalue "STR"
|   |-IfStmt 0x13a009c98 <line:23:2, line:27:2> has_else
|   | |-ImplicitCastExpr 0x13a0098e0 <line:23:6> 'const char *' <LValueToRValue>
|   | | `-DeclRefExpr 0x13a0098c0 <col:6> 'const char *' lvalue Var 0x13980e220 'p' 'const char *'
|   | |-CompoundStmt 0x13a009af0 <col:9, line:25:2>
|   | | `-BinaryOperator 0x13a009ad0 <line:24:3, col:21> 'int' '='
|   | |   |-DeclRefExpr 0x13a0098f8 <col:3> 'int' lvalue Var 0x13980e338 'len' 'int'
|   | |   `-CallExpr 0x13a009aa8 <col:9, col:21> 'int'
|   | |     |-ImplicitCastExpr 0x13a009a90 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x13a0099f8 <col:9> 'int ()' Function 0x13a009940 'atoi' 'int ()'
|   | |     `-BinaryOperator 0x13a009a70 <col:15, col:19> 'const char *' '+'
|   | |       |-ImplicitCastExpr 0x13a009a58 <col:15> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x13a009a18 <col:15> 'const char *' lvalue Var 0x13980e220 'p' 'const char *'
|   | |       `-IntegerLiteral 0x13a009a38 <col:19> 'int' 16
|   | `-CompoundStmt 0x13a009c80 <line:25:9, line:27:2>
|   |   `-BinaryOperator 0x13a009c60 <line:26:3, col:25> 'int' '='
|   |     |-DeclRefExpr 0x13a009b08 <col:3> 'int' lvalue Var 0x13980e338 'len' 'int'
|   |     `-ImplicitCastExpr 0x13a009c48 <col:9, col:25> 'int' <IntegralCast>
|   |       `-BinaryOperator 0x13a009c28 <col:9, col:25> 'long' '-'
|   |         |-ImplicitCastExpr 0x13a009c10 <col:9> 'long' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x13a009bf8 <col:9> 'int' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x13a009b28 <col:9> 'int' lvalue Var 0x139123848 'olen' 'int'
|   |         `-ParenExpr 0x13a009bd8 <col:16, col:25> 'long'
|   |           `-BinaryOperator 0x13a009bb8 <col:17, col:22> 'long' '-'
|   |             |-ImplicitCastExpr 0x13a009b88 <col:17> 'char *' <LValueToRValue>
|   |             | `-DeclRefExpr 0x13a009b48 <col:17> 'char *' lvalue Var 0x139122d80 'dn' 'char *'
|   |             `-ImplicitCastExpr 0x13a009ba0 <col:22> 'char *' <LValueToRValue>
|   |               `-DeclRefExpr 0x13a009b68 <col:22> 'char *' lvalue Var 0x139122e00 'buf' 'char *'
|   |-IfStmt 0x139828320 <line:28:2, line:49:2> has_else
|   | |-BinaryOperator 0x13a009d20 <line:28:6, col:12> 'int' '>'
|   | | |-ImplicitCastExpr 0x13a009d08 <col:6> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x13a009cc8 <col:6> 'int' lvalue Var 0x13980e338 'len' 'int'
|   | | `-IntegerLiteral 0x13a009ce8 <col:12> 'int' 0
|   | |-CompoundStmt 0x139828258 <col:15, line:47:2>
|   | | `-IfStmt 0x139828228 <line:29:3, line:46:3> has_else
|   | |   |-BinaryOperator 0x13a009db0 <line:29:7, col:13> 'int' '>'
|   | |   | |-ImplicitCastExpr 0x13a009d80 <col:7> 'int' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x13a009d40 <col:7> 'int' lvalue Var 0x13980e338 'len' 'int'
|   | |   | `-ImplicitCastExpr 0x13a009d98 <col:13> 'int' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x13a009d60 <col:13> 'int' lvalue Var 0x139123848 'olen' 'int'
|   | |   |-CompoundStmt 0x139827d48 <col:19, line:40:3>
|   | |   | |-BinaryOperator 0x13a00a100 <line:30:4, col:25> 'char *' contains-errors '='
|   | |   | | |-DeclRefExpr 0x13a009dd0 <col:4> 'char *' contains-errors lvalue Var 0x139123778 'res' 'char *'
|   | |   | | `-ImplicitCastExpr 0x13a00a0e8 <col:10, col:25> 'char *' <BitCast>
|   | |   | |   `-CallExpr 0x13a00a0a8 <col:10, col:25> 'void *'
|   | |   | |     |-ImplicitCastExpr 0x13a00a090 <col:10> 'void *(*)(unsigned long)' <FunctionToPointerDecay>
|   | |   | |     | `-DeclRefExpr 0x13a009fc8 <col:10> 'void *(unsigned long)' Function 0x13a009e28 'malloc' 'void *(unsigned long)'
|   | |   | |     `-ImplicitCastExpr 0x13a00a0d0 <col:18, col:24> 'unsigned long' <IntegralCast>
|   | |   | |       `-BinaryOperator 0x13a00a040 <col:18, col:24> 'int' '+'
|   | |   | |         |-ImplicitCastExpr 0x13a00a028 <col:18> 'int' <LValueToRValue>
|   | |   | |         | `-DeclRefExpr 0x13a009fe8 <col:18> 'int' lvalue Var 0x13980e338 'len' 'int'
|   | |   | |         `-IntegerLiteral 0x13a00a008 <col:24> 'int' 2
|   | |   | |-CallExpr 0x1398277b8 <line:31:4, col:33> 'void *' contains-errors
|   | |   | | |-ImplicitCastExpr 0x1398277a0 <col:4> 'void *(*)(void *, const void *, unsigned long)' <FunctionToPointerDecay>
|   | |   | | | `-DeclRefExpr 0x139827650 <col:4> 'void *(void *, const void *, unsigned long)' Function 0x139827400 'memcpy' 'void *(void *, const void *, unsigned long)'
|   | |   | | |-ImplicitCastExpr 0x139827808 <col:12> 'void *' contains-errors <BitCast>
|   | |   | | | `-ImplicitCastExpr 0x1398277f0 <col:12> 'char *' contains-errors <LValueToRValue>
|   | |   | | |   `-DeclRefExpr 0x139827670 <col:12> 'char *' contains-errors lvalue Var 0x139123778 'res' 'char *'
|   | |   | | |-ImplicitCastExpr 0x139827820 <col:17, col:22> 'const void *' <BitCast>
|   | |   | | | `-BinaryOperator 0x139827700 <col:17, col:22> 'char *' '+'
|   | |   | | |   |-ImplicitCastExpr 0x1398276d0 <col:17> 'char *' <LValueToRValue>
|   | |   | | |   | `-DeclRefExpr 0x139827690 <col:17> 'char *' lvalue Var 0x139122d80 'dn' 'char *'
|   | |   | | |   `-ImplicitCastExpr 0x1398276e8 <col:22> 'int' <LValueToRValue>
|   | |   | | |     `-DeclRefExpr 0x1398276b0 <col:22> 'int' lvalue Var 0x139122ca0 'delta' 'int'
|   | |   | | `-ImplicitCastExpr 0x139827850 <col:29> 'unsigned long' <IntegralCast>
|   | |   | |   `-ImplicitCastExpr 0x139827838 <col:29> 'int' <LValueToRValue>
|   | |   | |     `-DeclRefExpr 0x139827720 <col:29> 'int' lvalue Var 0x139123848 'olen' 'int'
|   | |   | |-DoStmt 0x139827c40 <line:32:4, line:38:23>
|   | |   | | |-CompoundStmt 0x139827b90 <line:32:7, line:38:4>
|   | |   | | | |-IfStmt 0x139827ae8 <line:34:5, line:36:5>
|   | |   | | | | |-BinaryOperator 0x139827aa8 <line:34:9, col:15> 'int' '<'
|   | |   | | | | | |-ImplicitCastExpr 0x139827a90 <col:9> 'int' <LValueToRValue>
|   | |   | | | | | | `-DeclRefExpr 0x139827a50 <col:9> 'int' lvalue Var 0x13980e2b8 'ret' 'int'
|   | |   | | | | | `-IntegerLiteral 0x139827a70 <col:15> 'int' 1
|   | |   | | | | `-CompoundStmt 0x139827ad0 <col:18, line:36:5>
|   | |   | | | |   `-BreakStmt 0x139827ac8 <line:35:6>
|   | |   | | | `-CompoundAssignOperator 0x139827b60 <line:37:5, col:13> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |   | | |   |-DeclRefExpr 0x139827b08 <col:5> 'int' lvalue Var 0x139123848 'olen' 'int'
|   | |   | | |   `-ImplicitCastExpr 0x139827b48 <col:13> 'int' <LValueToRValue>
|   | |   | | |     `-DeclRefExpr 0x139827b28 <col:13> 'int' lvalue Var 0x13980e2b8 'ret' 'int'
|   | |   | | `-BinaryOperator 0x139827c20 <line:38:13, col:20> 'int' '<'
|   | |   | |   |-ImplicitCastExpr 0x139827bf0 <col:13> 'int' <LValueToRValue>
|   | |   | |   | `-DeclRefExpr 0x139827bb0 <col:13> 'int' lvalue Var 0x139123848 'olen' 'int'
|   | |   | |   `-ImplicitCastExpr 0x139827c08 <col:20> 'int' <LValueToRValue>
|   | |   | |     `-DeclRefExpr 0x139827bd0 <col:20> 'int' lvalue Var 0x13980e338 'len' 'int'
|   | |   | `-BinaryOperator 0x139827d28 <line:39:4, col:15> 'char' contains-errors '='
|   | |   |   |-ArraySubscriptExpr 0x139827cd0 <col:4, col:11> 'char' contains-errors lvalue
|   | |   |   | |-ImplicitCastExpr 0x139827ca0 <col:4> 'char *' contains-errors <LValueToRValue>
|   | |   |   | | `-DeclRefExpr 0x139827c60 <col:4> 'char *' contains-errors lvalue Var 0x139123778 'res' 'char *'
|   | |   |   | `-ImplicitCastExpr 0x139827cb8 <col:8> 'int' <LValueToRValue>
|   | |   |   |   `-DeclRefExpr 0x139827c80 <col:8> 'int' lvalue Var 0x13980e338 'len' 'int'
|   | |   |   `-ImplicitCastExpr 0x139827d10 <col:15> 'char' <IntegralCast>
|   | |   |     `-IntegerLiteral 0x139827cf0 <col:15> 'int' 0
|   | |   `-CompoundStmt 0x139828208 <line:40:10, line:46:3>
|   | |     |-BinaryOperator 0x139827ea0 <line:41:4, col:25> 'char *' contains-errors '='
|   | |     | |-DeclRefExpr 0x139827d78 <col:4> 'char *' contains-errors lvalue Var 0x139123778 'res' 'char *'
|   | |     | `-ImplicitCastExpr 0x139827e88 <col:10, col:25> 'char *' <BitCast>
|   | |     |   `-CallExpr 0x139827e48 <col:10, col:25> 'void *'
|   | |     |     |-ImplicitCastExpr 0x139827e30 <col:10> 'void *(*)(unsigned long)' <FunctionToPointerDecay>
|   | |     |     | `-DeclRefExpr 0x139827d98 <col:10> 'void *(unsigned long)' Function 0x13a009e28 'malloc' 'void *(unsigned long)'
|   | |     |     `-ImplicitCastExpr 0x139827e70 <col:18, col:24> 'unsigned long' <IntegralCast>
|   | |     |       `-BinaryOperator 0x139827e10 <col:18, col:24> 'int' '+'
|   | |     |         |-ImplicitCastExpr 0x139827df8 <col:18> 'int' <LValueToRValue>
|   | |     |         | `-DeclRefExpr 0x139827db8 <col:18> 'int' lvalue Var 0x13980e338 'len' 'int'
|   | |     |         `-IntegerLiteral 0x139827dd8 <col:24> 'int' 1
|   | |     `-IfStmt 0x1398281e8 <line:42:4, line:45:4>
|   | |       |-ImplicitCastExpr 0x139827ee0 <line:42:8> 'char *' contains-errors <LValueToRValue>
|   | |       | `-DeclRefExpr 0x139827ec0 <col:8> 'char *' contains-errors lvalue Var 0x139123778 'res' 'char *'
|   | |       `-CompoundStmt 0x1398281c8 <col:13, line:45:4>
|   | |         |-CallExpr 0x139828030 <line:43:5, col:33> 'void *' contains-errors
|   | |         | |-ImplicitCastExpr 0x139828018 <col:5> 'void *(*)(void *, const void *, unsigned long)' <FunctionToPointerDecay>
|   | |         | | `-DeclRefExpr 0x139827ef8 <col:5> 'void *(void *, const void *, unsigned long)' Function 0x139827400 'memcpy' 'void *(void *, const void *, unsigned long)'
|   | |         | |-ImplicitCastExpr 0x139828080 <col:13> 'void *' contains-errors <BitCast>
|   | |         | | `-ImplicitCastExpr 0x139828068 <col:13> 'char *' contains-errors <LValueToRValue>
|   | |         | |   `-DeclRefExpr 0x139827f18 <col:13> 'char *' contains-errors lvalue Var 0x139123778 'res' 'char *'
|   | |         | |-ImplicitCastExpr 0x139828098 <col:18, col:23> 'const void *' <BitCast>
|   | |         | | `-BinaryOperator 0x139827fa8 <col:18, col:23> 'char *' '+'
|   | |         | |   |-ImplicitCastExpr 0x139827f78 <col:18> 'char *' <LValueToRValue>
|   | |         | |   | `-DeclRefExpr 0x139827f38 <col:18> 'char *' lvalue Var 0x139122d80 'dn' 'char *'
|   | |         | |   `-ImplicitCastExpr 0x139827f90 <col:23> 'int' <LValueToRValue>
|   | |         | |     `-DeclRefExpr 0x139827f58 <col:23> 'int' lvalue Var 0x139122ca0 'delta' 'int'
|   | |         | `-ImplicitCastExpr 0x1398280c8 <col:30> 'unsigned long' <IntegralCast>
|   | |         |   `-ImplicitCastExpr 0x1398280b0 <col:30> 'int' <LValueToRValue>
|   | |         |     `-DeclRefExpr 0x139827fc8 <col:30> 'int' lvalue Var 0x13980e338 'len' 'int'
|   | |         `-BinaryOperator 0x1398281a8 <line:44:5, col:16> 'char' contains-errors '='
|   | |           |-ArraySubscriptExpr 0x139828150 <col:5, col:12> 'char' contains-errors lvalue
|   | |           | |-ImplicitCastExpr 0x139828120 <col:5> 'char *' contains-errors <LValueToRValue>
|   | |           | | `-DeclRefExpr 0x1398280e0 <col:5> 'char *' contains-errors lvalue Var 0x139123778 'res' 'char *'
|   | |           | `-ImplicitCastExpr 0x139828138 <col:9> 'int' <LValueToRValue>
|   | |           |   `-DeclRefExpr 0x139828100 <col:9> 'int' lvalue Var 0x13980e338 'len' 'int'
|   | |           `-ImplicitCastExpr 0x139828190 <col:16> 'char' <IntegralCast>
|   | |             `-IntegerLiteral 0x139828170 <col:16> 'int' 0
|   | `-CompoundStmt 0x139828308 <line:47:9, line:49:2>
|   |   `-BinaryOperator 0x1398282e8 <line:48:3, col:9> 'char *' contains-errors '='
|   |     |-DeclRefExpr 0x139828270 <col:3> 'char *' contains-errors lvalue Var 0x139123778 'res' 'char *'
|   |     `-RecoveryExpr 0x1398282c8 <col:9> '<dependent type>' contains-errors lvalue
|   |-LabelStmt 0x13a00b470 <line:50:1, line:51:11> 'fail'
|   | `-CallExpr 0x13a00b418 <col:2, col:11> 'void'
|   |   |-ImplicitCastExpr 0x13a00b400 <col:2> 'void (*)(void *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x13a00b370 <col:2> 'void (void *)' Function 0x13a00b200 'free' 'void (void *)'
|   |   `-ImplicitCastExpr 0x13a00b458 <col:8> 'void *' <BitCast>
|   |     `-ImplicitCastExpr 0x13a00b440 <col:8> 'char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x13a00b390 <col:8> 'char *' lvalue Var 0x139122e00 'buf' 'char *'
|   |-CallExpr 0x13a00b5b0 <line:53:2, col:19> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x13a00b570 <col:2> 'int ()' Function 0x13a00b4b8 'r_socket_close' 'int ()'
|   | `-RecoveryExpr 0x13a00b590 <col:18> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x13a00b6d0 <line:54:2, line:56:2>
|   | |-ImplicitCastExpr 0x13a00b5f8 <line:54:6> 'int *' <LValueToRValue>
|   | | `-DeclRefExpr 0x13a00b5d8 <col:6> 'int *' lvalue ParmVar 0x13980de28 'rlen' 'int *'
|   | `-CompoundStmt 0x13a00b6b8 <col:12, line:56:2>
|   |   `-BinaryOperator 0x13a00b698 <line:55:3, col:11> 'int' '='
|   |     |-UnaryOperator 0x13a00b648 <col:3, col:4> 'int' lvalue prefix '*' cannot overflow
|   |     | `-ImplicitCastExpr 0x13a00b630 <col:4> 'int *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x13a00b610 <col:4> 'int *' lvalue ParmVar 0x13980de28 'rlen' 'int *'
|   |     `-ImplicitCastExpr 0x13a00b680 <col:11> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x13a00b660 <col:11> 'int' lvalue Var 0x13980e338 'len' 'int'
|   `-ReturnStmt 0x13a00b728 <line:57:2, col:9>
|     `-ImplicitCastExpr 0x13a00b710 <col:9> 'char *' contains-errors <LValueToRValue>
|       `-DeclRefExpr 0x13a00b6f0 <col:9> 'char *' contains-errors lvalue Var 0x139123778 'res' 'char *'
|-FunctionDecl 0x1391232d0 <line:5:19> col:19 implicit used calloc 'void *(unsigned long, unsigned long)' extern
| |-ParmVarDecl 0x1391233d0 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-ParmVarDecl 0x139123438 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-BuiltinAttr 0x139123378 <<invalid sloc>> Implicit 868
| `-AllocSizeAttr 0x1391234b0 <col:19> Implicit 1 2
|-FunctionDecl 0x13a009e28 <line:30:10> col:10 implicit used malloc 'void *(unsigned long)' extern
| |-ParmVarDecl 0x13a009f28 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-BuiltinAttr 0x13a009ed0 <<invalid sloc>> Implicit 871
| `-AllocSizeAttr 0x13a009f98 <col:10> Implicit 1
|-FunctionDecl 0x139827400 <line:31:4> col:4 implicit used memcpy 'void *(void *, const void *, unsigned long)' extern
| |-ParmVarDecl 0x139827500 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x139827568 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x1398275d0 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x1398274a8 <<invalid sloc>> Implicit 882
`-FunctionDecl 0x13a00b200 <line:51:2> col:2 implicit used free 'void (void *)' extern
  |-ParmVarDecl 0x13a00b300 <<invalid sloc>> <invalid sloc> 'void *'
  `-BuiltinAttr 0x13a00b2a8 <<invalid sloc>> Implicit 873
