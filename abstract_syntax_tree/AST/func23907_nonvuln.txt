TranslationUnitDecl 0x144855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1448564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x144855bd0 '__int128'
|-TypedefDecl 0x144856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x144855bf0 'unsigned __int128'
|-TypedefDecl 0x144926230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x144926000 'struct __NSConstantString_tag'
|   `-Record 0x144856580 '__NSConstantString_tag'
|-TypedefDecl 0x144926298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x144855d90 '__SVInt8_t'
|-TypedefDecl 0x144926300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x144855db0 '__SVInt16_t'
|-TypedefDecl 0x144926368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x144855dd0 '__SVInt32_t'
|-TypedefDecl 0x1449263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x144855df0 '__SVInt64_t'
|-TypedefDecl 0x144926438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x144855e10 '__SVUint8_t'
|-TypedefDecl 0x1449264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x144855e30 '__SVUint16_t'
|-TypedefDecl 0x144926508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x144855e50 '__SVUint32_t'
|-TypedefDecl 0x144926570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x144855e70 '__SVUint64_t'
|-TypedefDecl 0x1449265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x144855e90 '__SVFloat16_t'
|-TypedefDecl 0x144926640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x144855eb0 '__SVFloat32_t'
|-TypedefDecl 0x1449266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x144855ed0 '__SVFloat64_t'
|-TypedefDecl 0x144926710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x144855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x144926778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x144855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1449267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x144855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x144926848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x144855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1449268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x144855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x144926918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x144855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x144926980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x144855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1449269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x144855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x144926a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x144855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x144926ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x144856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x144926b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x144856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x144926b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x144856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x144926bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x144856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x144926c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x144856090 '__clang_svint8x3_t'
|-TypedefDecl 0x144926cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1448560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x144926d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1448560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x144926d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1448560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x144926df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x144856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x144926e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x144856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x144926ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x144856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x144926f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x144856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x144926f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x144856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x144927800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1448561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x144927868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1448561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1449278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1448561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x144927938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x144856210 '__clang_svint8x4_t'
|-TypedefDecl 0x1449279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x144856230 '__clang_svint16x4_t'
|-TypedefDecl 0x144927a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x144856250 '__clang_svint32x4_t'
|-TypedefDecl 0x144927a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x144856270 '__clang_svint64x4_t'
|-TypedefDecl 0x144927ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x144856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x144927b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1448562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x144927ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1448562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x144927c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1448562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x144927c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x144856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x144927ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x144856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x144927d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x144856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x144927db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x144856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x144927e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x144856390 '__SVBool_t'
|-TypedefDecl 0x144927e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1448563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x144927ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1448563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x144927f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1448563f0 '__SVCount_t'
|-TypedefDecl 0x144927ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x144927fb0 'char *'
|   `-BuiltinType 0x1448556b0 'char'
|-TypedefDecl 0x144928068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x144927fb0 'char *'
|   `-BuiltinType 0x1448556b0 'char'
`-FunctionDecl 0x144928288 <dataset_diviso_filec/func23907_nonvuln.c:1:1, line:47:1> line:1:1 invalid decode_xterm_SGR1006 'int (int *, int *)'
  |-ParmVarDecl 0x144928128 <col:22, col:30> col:30 referenced invalid sp 'int *'
  |-ParmVarDecl 0x1449281a8 <col:34, col:43> col:43 referenced invalid eventp 'int *'
  `-CompoundStmt 0x145809090 <line:2:1, line:47:1>
    `-IfStmt 0x145809070 <line:5:5, line:45:5>
      |-CallExpr 0x144928578 <line:5:9, col:27> '<dependent type>' contains-errors
      | |-DeclRefExpr 0x1449284a0 <col:9> 'int ()' Function 0x1449283e8 'read_SGR' 'int ()'
      | |-RecoveryExpr 0x1449284c0 <col:18> '<dependent type>' contains-errors lvalue
      | `-UnaryOperator 0x144928560 <col:22, col:23> '<dependent type>' contains-errors prefix '&' cannot overflow
      |   `-RecoveryExpr 0x144928540 <col:23> '<dependent type>' contains-errors lvalue
      `-CompoundStmt 0x145809018 <col:30, line:45:5>
        |-DeclStmt 0x1449286a8 <line:6:2, col:24>
        | `-VarDecl 0x1449285c0 <col:2, col:6> col:6 used b 'int'
        |-DeclStmt 0x144941820 <line:7:2, col:22>
        | `-VarDecl 0x1449286d8 <col:2, col:21> col:6 used b3 'int' cinit
        |   `-BinaryOperator 0x144941800 <col:11, col:21> 'int' '+'
        |     |-IntegerLiteral 0x144928740 <col:11> 'int' 1
        |     `-ParenExpr 0x1449287d8 <col:15, col:21> 'int'
        |       `-BinaryOperator 0x1449287b8 <col:16, col:20> 'int' '&'
        |         |-ImplicitCastExpr 0x1449287a0 <col:16> 'int' <LValueToRValue>
        |         | `-DeclRefExpr 0x144928760 <col:16> 'int' lvalue Var 0x1449285c0 'b' 'int'
        |         `-IntegerLiteral 0x144928780 <col:20> 'int' 3
        |-DeclStmt 0x1449419b0 <line:8:2, col:30>
        | `-VarDecl 0x144941850 <col:2, col:29> col:6 used wheel 'int' cinit
        |   `-ParenExpr 0x144941990 <col:14, col:29> 'int'
        |     `-BinaryOperator 0x144941970 <col:15, col:27> 'int' '=='
        |       |-ParenExpr 0x144941930 <col:15, col:22> 'int'
        |       | `-BinaryOperator 0x144941910 <col:16, col:20> 'int' '&'
        |       |   |-ImplicitCastExpr 0x1449418f8 <col:16> 'int' <LValueToRValue>
        |       |   | `-DeclRefExpr 0x1449418b8 <col:16> 'int' lvalue Var 0x1449285c0 'b' 'int'
        |       |   `-IntegerLiteral 0x1449418d8 <col:20> 'int' 64
        |       `-IntegerLiteral 0x144941950 <col:27> 'int' 64
        |-IfStmt 0x144941e70 <line:10:2, line:16:2> has_else
        | |-BinaryOperator 0x144941a20 <line:10:6, col:11> 'int' '>='
        | | |-ImplicitCastExpr 0x144941a08 <col:6> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x1449419c8 <col:6> 'int' lvalue Var 0x1449285c0 'b' 'int'
        | | `-IntegerLiteral 0x1449419e8 <col:11> 'int' 132
        | |-CompoundStmt 0x144941b38 <col:16, line:12:2>
        | | `-BinaryOperator 0x144941b18 <line:11:6, col:25> 'int' contains-errors '='
        | |   |-DeclRefExpr 0x144941a40 <col:6> 'int' lvalue Var 0x1449286d8 'b3' 'int'
        | |   `-BinaryOperator 0x144941af8 <col:11, col:25> '<dependent type>' contains-errors '+'
        | |     |-RecoveryExpr 0x144941ad8 <col:11> '<dependent type>' contains-errors lvalue
        | |     `-IntegerLiteral 0x144941a78 <col:25> 'int' 1
        | `-IfStmt 0x144941e40 <line:12:9, line:16:2> has_else
        |   |-BinaryOperator 0x144941ba8 <line:12:13, col:18> 'int' '>='
        |   | |-ImplicitCastExpr 0x144941b90 <col:13> 'int' <LValueToRValue>
        |   | | `-DeclRefExpr 0x144941b50 <col:13> 'int' lvalue Var 0x1449285c0 'b' 'int'
        |   | `-IntegerLiteral 0x144941b70 <col:18> 'int' 128
        |   |-CompoundStmt 0x144941ca0 <col:23, line:14:2>
        |   | `-BinaryOperator 0x144941c80 <line:13:6, col:19> 'int' '='
        |   |   |-DeclRefExpr 0x144941bc8 <col:6> 'int' lvalue Var 0x1449286d8 'b3' 'int'
        |   |   `-ParenExpr 0x144941c60 <col:11, col:19> 'int'
        |   |     `-BinaryOperator 0x144941c40 <col:12, col:16> 'int' '-'
        |   |       |-ImplicitCastExpr 0x144941c28 <col:12> 'int' <LValueToRValue>
        |   |       | `-DeclRefExpr 0x144941be8 <col:12> 'int' lvalue Var 0x1449285c0 'b' 'int'
        |   |       `-IntegerLiteral 0x144941c08 <col:16> 'int' 120
        |   `-IfStmt 0x144941e20 <line:14:9, line:16:2>
        |     |-BinaryOperator 0x144941d10 <line:14:13, col:18> 'int' '>='
        |     | |-ImplicitCastExpr 0x144941cf8 <col:13> 'int' <LValueToRValue>
        |     | | `-DeclRefExpr 0x144941cb8 <col:13> 'int' lvalue Var 0x1449285c0 'b' 'int'
        |     | `-IntegerLiteral 0x144941cd8 <col:18> 'int' 64
        |     `-CompoundStmt 0x144941e08 <col:22, line:16:2>
        |       `-BinaryOperator 0x144941de8 <line:15:6, col:18> 'int' '='
        |         |-DeclRefExpr 0x144941d30 <col:6> 'int' lvalue Var 0x1449286d8 'b3' 'int'
        |         `-ParenExpr 0x144941dc8 <col:11, col:18> 'int'
        |           `-BinaryOperator 0x144941da8 <col:12, col:16> 'int' '-'
        |             |-ImplicitCastExpr 0x144941d90 <col:12> 'int' <LValueToRValue>
        |             | `-DeclRefExpr 0x144941d50 <col:12> 'int' lvalue Var 0x1449285c0 'b' 'int'
        |             `-IntegerLiteral 0x144941d70 <col:16> 'int' 60
        |-BinaryOperator 0x144941f88 <line:18:2, col:15> '<dependent type>' contains-errors '='
        | |-CXXDependentScopeMemberExpr 0x144941ee8 <col:2, col:10> '<dependent type>' contains-errors lvalue ->id
        | | `-RecoveryExpr 0x144941ec0 <col:2> '<dependent type>' contains-errors lvalue
        | |   `-DeclRefExpr 0x144941ea0 <col:2> 'int *' lvalue ParmVar 0x1449281a8 'eventp' 'int *'
        | `-RecoveryExpr 0x144941f68 <col:15> '<dependent type>' contains-errors lvalue
        |-IfStmt 0x1458089b8 <line:19:2, line:32:2> has_else
        | |-BinaryOperator 0x1449420a8 <line:19:6, col:20> 'int' contains-errors '=='
        | | |-CXXDependentScopeMemberExpr 0x144942060 <col:6, col:11> '<dependent type>' contains-errors lvalue .final
        | | | `-RecoveryExpr 0x144942040 <col:6> '<dependent type>' contains-errors lvalue
        | | `-CharacterLiteral 0x144942008 <col:20> 'int' 77
        | |-CompoundStmt 0x1449422c0 <col:25, line:21:2>
        | | `-CStyleCastExpr 0x144942298 <line:20:6, col:46> 'void' contains-errors <ToVoid>
        | |   `-CallExpr 0x144942248 <col:13, col:46> '<dependent type>' contains-errors
        | |     |-DeclRefExpr 0x1449421a8 <col:13> 'int ()' Function 0x1449420f0 'handle_wheel' 'int ()'
        | |     |-RecoveryExpr 0x1449421c8 <col:26> '<dependent type>' contains-errors lvalue
        | |     |-RecoveryExpr 0x1449421e8 <col:30> '<dependent type>' contains-errors lvalue
        | |     |-DeclRefExpr 0x144942208 <col:38> 'int' lvalue Var 0x1449285c0 'b' 'int'
        | |     `-DeclRefExpr 0x144942228 <col:41> 'int' lvalue Var 0x144941850 'wheel' 'int'
        | `-IfStmt 0x145808988 <line:21:9, line:32:2> has_else
        |   |-BinaryOperator 0x144942350 <line:21:13, col:18> 'int' contains-errors '>'
        |   | |-DeclRefExpr 0x1449422d8 <col:13> 'int' lvalue Var 0x1449286d8 'b3' 'int'
        |   | `-RecoveryExpr 0x144942330 <col:18> '<dependent type>' contains-errors lvalue
        |   |-CompoundStmt 0x144942478 <col:31, line:23:2>
        |   | `-BinaryOperator 0x144942458 <line:22:6, col:23> '<dependent type>' contains-errors '='
        |   |   |-CXXDependentScopeMemberExpr 0x1449423b8 <col:6, col:14> '<dependent type>' contains-errors lvalue ->bstate
        |   |   | `-RecoveryExpr 0x144942390 <col:6> '<dependent type>' contains-errors lvalue
        |   |   |   `-DeclRefExpr 0x144942370 <col:6> 'int *' lvalue ParmVar 0x1449281a8 'eventp' 'int *'
        |   |   `-RecoveryExpr 0x144942438 <col:23> '<dependent type>' contains-errors lvalue
        |   `-CompoundStmt 0x145808970 <line:23:9, line:32:2>
        |     `-IfStmt 0x145808940 <line:26:6, line:31:6> has_else
        |       |-BinaryOperator 0x144942550 <line:26:10, col:30> '<dependent type>' contains-errors '&'
        |       | |-CXXDependentScopeMemberExpr 0x1449424b0 <col:10, col:14> '<dependent type>' contains-errors lvalue ->_mouse_bstate
        |       | | `-RecoveryExpr 0x144942490 <col:10> '<dependent type>' contains-errors lvalue
        |       | `-RecoveryExpr 0x144942530 <col:30> '<dependent type>' contains-errors lvalue
        |       |-CompoundStmt 0x145808800 <col:39, line:29:6>
        |       | |-BinaryOperator 0x144942658 <line:27:3, col:20> '<dependent type>' contains-errors '='
        |       | | |-CXXDependentScopeMemberExpr 0x1449425b8 <col:3, col:11> '<dependent type>' contains-errors lvalue ->bstate
        |       | | | `-RecoveryExpr 0x144942590 <col:3> '<dependent type>' contains-errors lvalue
        |       | | |   `-DeclRefExpr 0x144942570 <col:3> 'int *' lvalue ParmVar 0x1449281a8 'eventp' 'int *'
        |       | | `-RecoveryExpr 0x144942638 <col:20> '<dependent type>' contains-errors lvalue
        |       | `-CompoundAssignOperator 0x1449427d0 <line:28:3, col:25> '<dependent type>' contains-errors '&=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
        |       |   |-CXXDependentScopeMemberExpr 0x1449426c0 <col:3, col:7> '<dependent type>' contains-errors lvalue ->_mouse_bstate
        |       |   | `-RecoveryExpr 0x144942698 <col:3> '<dependent type>' contains-errors lvalue
        |       |   |   `-DeclRefExpr 0x144942678 <col:3> 'int *' lvalue ParmVar 0x144928128 'sp' 'int *'
        |       |   `-UnaryOperator 0x1449427b8 <col:24, col:25> '<dependent type>' contains-errors prefix '~' cannot overflow
        |       |     `-ImplicitCastExpr 0x1449427a0 <col:25> '<dependent type>' contains-errors <LValueToRValue>
        |       |       `-RecoveryExpr 0x144942780 <col:25> '<dependent type>' contains-errors lvalue
        |       `-CompoundStmt 0x145808928 <line:29:13, line:31:6>
        |         `-BinaryOperator 0x145808908 <line:30:3, col:20> '<dependent type>' contains-errors '='
        |           |-CXXDependentScopeMemberExpr 0x145808868 <col:3, col:11> '<dependent type>' contains-errors lvalue ->bstate
        |           | `-RecoveryExpr 0x145808840 <col:3> '<dependent type>' contains-errors lvalue
        |           |   `-DeclRefExpr 0x145808820 <col:3> 'int *' lvalue ParmVar 0x1449281a8 'eventp' 'int *'
        |           `-RecoveryExpr 0x1458088e8 <col:20> '<dependent type>' contains-errors lvalue
        |-IfStmt 0x145808b00 <line:33:2, line:35:2>
        | |-BinaryOperator 0x145808a40 <line:33:6, col:10> 'int' '&'
        | | |-ImplicitCastExpr 0x145808a28 <col:6> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x1458089e8 <col:6> 'int' lvalue Var 0x1449285c0 'b' 'int'
        | | `-IntegerLiteral 0x145808a08 <col:10> 'int' 4
        | `-CompoundStmt 0x145808af0 <col:13, line:35:2>
        |-IfStmt 0x145808c38 <line:36:2, line:38:2>
        | |-BinaryOperator 0x145808b78 <line:36:6, col:10> 'int' '&'
        | | |-ImplicitCastExpr 0x145808b60 <col:6> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x145808b20 <col:6> 'int' lvalue Var 0x1449285c0 'b' 'int'
        | | `-IntegerLiteral 0x145808b40 <col:10> 'int' 8
        | `-CompoundStmt 0x145808c28 <col:13, line:38:2>
        `-IfStmt 0x145808d70 <line:39:2, line:41:2>
          |-BinaryOperator 0x145808cb0 <line:39:6, col:10> 'int' '&'
          | |-ImplicitCastExpr 0x145808c98 <col:6> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x145808c58 <col:6> 'int' lvalue Var 0x1449285c0 'b' 'int'
          | `-IntegerLiteral 0x145808c78 <col:10> 'int' 16
          `-CompoundStmt 0x145808d60 <col:14, line:41:2>
