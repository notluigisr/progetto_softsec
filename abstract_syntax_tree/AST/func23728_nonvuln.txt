TranslationUnitDecl 0x131055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1310564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x131055bd0 '__int128'
|-TypedefDecl 0x131056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x131055bf0 'unsigned __int128'
|-TypedefDecl 0x131126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x131126000 'struct __NSConstantString_tag'
|   `-Record 0x131056580 '__NSConstantString_tag'
|-TypedefDecl 0x131126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x131055d90 '__SVInt8_t'
|-TypedefDecl 0x131126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x131055db0 '__SVInt16_t'
|-TypedefDecl 0x131126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x131055dd0 '__SVInt32_t'
|-TypedefDecl 0x1311263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x131055df0 '__SVInt64_t'
|-TypedefDecl 0x131126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x131055e10 '__SVUint8_t'
|-TypedefDecl 0x1311264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x131055e30 '__SVUint16_t'
|-TypedefDecl 0x131126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x131055e50 '__SVUint32_t'
|-TypedefDecl 0x131126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x131055e70 '__SVUint64_t'
|-TypedefDecl 0x1311265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x131055e90 '__SVFloat16_t'
|-TypedefDecl 0x131126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x131055eb0 '__SVFloat32_t'
|-TypedefDecl 0x1311266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x131055ed0 '__SVFloat64_t'
|-TypedefDecl 0x131126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x131055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x131126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x131055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1311267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x131055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x131126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x131055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1311268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x131055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x131126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x131055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x131126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x131055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1311269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x131055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x131126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x131055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x131126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x131056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x131126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x131056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x131126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x131056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x131126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x131056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x131126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x131056090 '__clang_svint8x3_t'
|-TypedefDecl 0x131126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1310560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x131126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1310560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x131126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1310560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x131126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x131056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x131126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x131056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x131126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x131056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x131126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x131056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x131126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x131056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x131127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1310561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x131127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1310561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1311278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1310561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x131127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x131056210 '__clang_svint8x4_t'
|-TypedefDecl 0x1311279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x131056230 '__clang_svint16x4_t'
|-TypedefDecl 0x131127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x131056250 '__clang_svint32x4_t'
|-TypedefDecl 0x131127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x131056270 '__clang_svint64x4_t'
|-TypedefDecl 0x131127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x131056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x131127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1310562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x131127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1310562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x131127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1310562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x131127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x131056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x131127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x131056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x131127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x131056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x131127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x131056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x131127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x131056390 '__SVBool_t'
|-TypedefDecl 0x131127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1310563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x131127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1310563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x131127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1310563f0 '__SVCount_t'
|-TypedefDecl 0x131127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x131127fb0 'char *'
|   `-BuiltinType 0x1310556b0 'char'
|-TypedefDecl 0x131128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x131127fb0 'char *'
|   `-BuiltinType 0x1310556b0 'char'
|-FunctionDecl 0x131128438 <dataset_diviso_filec/func23728_nonvuln.c:1:1, line:37:1> line:1:1 invalid EmitButtonCode 'int (int, char *, unsigned int, int *, int)'
| |-ParmVarDecl 0x1311280f0 <col:16, col:28> col:28 invalid xw 'int'
| |-ParmVarDecl 0x131128170 <line:2:9, col:15> col:15 used line 'char *'
| |-ParmVarDecl 0x1311281f0 <line:3:9, col:18> col:18 used count 'unsigned int'
| |-ParmVarDecl 0x1311282a8 <line:4:9, col:23> col:23 invalid event 'int *'
| |-ParmVarDecl 0x131128328 <line:5:9, col:13> col:13 used button 'int'
| `-CompoundStmt 0x13180b9d8 <line:6:1, line:37:1>
|   |-DeclStmt 0x131128768 <line:8:5, col:14>
|   | `-VarDecl 0x131128700 <col:5, col:9> col:9 used value 'int'
|   |-IfStmt 0x1318097c8 <line:10:5, line:14:5> has_else
|   | |-BinaryOperator 0x131809378 <line:10:9, col:31> 'int' contains-errors '=='
|   | | |-CallExpr 0x1318092f8 <col:9, col:26> '<dependent type>' contains-errors
|   | | | |-DeclRefExpr 0x1318092b8 <col:9> 'int ()' Function 0x131809200 'okSendMousePos' 'int ()'
|   | | | `-RecoveryExpr 0x1318092d8 <col:24> '<dependent type>' contains-errors lvalue
|   | | `-RecoveryExpr 0x131809358 <col:31> '<dependent type>' contains-errors lvalue
|   | |-CompoundStmt 0x1318095c0 <col:42, line:12:5>
|   | | `-BinaryOperator 0x1318095a0 <line:11:2, col:29> 'int' '='
|   | |   |-DeclRefExpr 0x131809398 <col:2> 'int' lvalue Var 0x131128700 'value' 'int'
|   | |   `-CallExpr 0x131809578 <col:10, col:29> 'int'
|   | |     |-ImplicitCastExpr 0x131809560 <col:10> 'int (*)()' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x131809498 <col:10> 'int ()' Function 0x1318093e0 'CharOf' 'int ()'
|   | |     `-BinaryOperator 0x131809508 <col:17, col:23> 'int' '+'
|   | |       |-CharacterLiteral 0x1318094b8 <col:17> 'int' 32
|   | |       `-ImplicitCastExpr 0x1318094f0 <col:23> 'int' <LValueToRValue>
|   | |         `-DeclRefExpr 0x1318094d0 <col:23> 'int' lvalue ParmVar 0x131128328 'button' 'int'
|   | `-CompoundStmt 0x1318097b0 <line:12:12, line:14:5>
|   |   `-BinaryOperator 0x131809790 <line:13:2, col:35> 'int' contains-errors '='
|   |     |-DeclRefExpr 0x1318095d8 <col:2> 'int' lvalue Var 0x131128700 'value' 'int'
|   |     `-CallExpr 0x131809758 <col:10, col:35> '<dependent type>' contains-errors
|   |       |-DeclRefExpr 0x1318096d8 <col:10> 'int ()' Function 0x131809620 'BtnCode' 'int ()'
|   |       |-RecoveryExpr 0x1318096f8 <col:18> '<dependent type>' contains-errors lvalue
|   |       |-RecoveryExpr 0x131809718 <col:22> '<dependent type>' contains-errors lvalue
|   |       `-DeclRefExpr 0x131809738 <col:29> 'int' lvalue ParmVar 0x131128328 'button' 'int'
|   |-SwitchStmt 0x1318098d8 <line:16:5, line:35:5>
|   | |-CXXDependentScopeMemberExpr 0x131809890 <line:16:13, col:21> '<dependent type>' contains-errors lvalue ->extend_coords
|   | | `-RecoveryExpr 0x131809870 <col:13> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x13180b930 <col:36, line:35:5>
|   |   |-DefaultStmt 0x131809a60 <line:17:5, line:18:30>
|   |   | `-BinaryOperator 0x131809a40 <col:2, col:30> 'char' '='
|   |   |   |-ArraySubscriptExpr 0x131809970 <col:2, col:14> 'char' lvalue
|   |   |   | |-ImplicitCastExpr 0x131809958 <col:2> 'char *' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x131809900 <col:2> 'char *' lvalue ParmVar 0x131128170 'line' 'char *'
|   |   |   | `-UnaryOperator 0x131809940 <col:7, col:12> 'unsigned int' postfix '++'
|   |   |   |   `-DeclRefExpr 0x131809920 <col:7> 'unsigned int' lvalue ParmVar 0x1311281f0 'count' 'unsigned int'
|   |   |   `-ImplicitCastExpr 0x131809a28 <col:18, col:30> 'char' <IntegralCast>
|   |   |     `-CallExpr 0x1318099e8 <col:18, col:30> 'int'
|   |   |       |-ImplicitCastExpr 0x1318099d0 <col:18> 'int (*)()' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x131809990 <col:18> 'int ()' Function 0x1318093e0 'CharOf' 'int ()'
|   |   |       `-ImplicitCastExpr 0x131809a10 <col:25> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x1318099b0 <col:25> 'int' lvalue Var 0x131128700 'value' 'int'
|   |   |-BreakStmt 0x131809a80 <line:19:2>
|   |   |-CompoundAssignOperator 0x131809af8 <line:22:2, col:11> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   | |-DeclRefExpr 0x131809ab8 <col:2> 'int' lvalue Var 0x131128700 'value' 'int'
|   |   | `-IntegerLiteral 0x131809ad8 <col:11> 'int' 32
|   |   |-CompoundAssignOperator 0x13180b298 <line:25:2, col:65> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   |   | |-DeclRefExpr 0x131809b40 <col:2> 'unsigned int' lvalue ParmVar 0x1311281f0 'count' 'unsigned int'
|   |   | `-CStyleCastExpr 0x13180b270 <col:11, col:65> 'unsigned int' <IntegralCast>
|   |   |   `-CallExpr 0x13180b1d8 <col:22, col:65> 'int'
|   |   |     |-ImplicitCastExpr 0x13180b1c0 <col:22> 'int (*)(char *, const char *, ...)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x13180b000 <col:22> 'int (char *, const char *, ...)' Function 0x131809fd0 'sprintf' 'int (char *, const char *, ...)'
|   |   |     |-BinaryOperator 0x13180b0d0 <col:30, col:46> 'char *' '+'
|   |   |     | |-CStyleCastExpr 0x13180b070 <col:30, col:39> 'char *' <NoOp>
|   |   |     | | `-ImplicitCastExpr 0x13180b058 <col:39> 'char *' <LValueToRValue> part_of_explicit_cast
|   |   |     | |   `-DeclRefExpr 0x13180b020 <col:39> 'char *' lvalue ParmVar 0x131128170 'line' 'char *'
|   |   |     | `-ImplicitCastExpr 0x13180b0b8 <col:46> 'unsigned int' <LValueToRValue>
|   |   |     |   `-DeclRefExpr 0x13180b098 <col:46> 'unsigned int' lvalue ParmVar 0x1311281f0 'count' 'unsigned int'
|   |   |     |-ImplicitCastExpr 0x13180b228 <col:53> 'const char *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x13180b210 <col:53> 'char *' <ArrayToPointerDecay>
|   |   |     |   `-StringLiteral 0x13180b130 <col:53> 'char[4]' lvalue "STR"
|   |   |     `-ImplicitCastExpr 0x13180b240 <col:60> 'int' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x13180b150 <col:60> 'int' lvalue Var 0x131128700 'value' 'int'
|   |   |-BreakStmt 0x13180b2c8 <line:26:2>
|   |   |-IfStmt 0x13180b8f8 <line:28:2, line:33:2> has_else
|   |   | |-BinaryOperator 0x13180b340 <line:28:6, col:14> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x13180b328 <col:6> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x13180b2e8 <col:6> 'int' lvalue Var 0x131128700 'value' 'int'
|   |   | | `-IntegerLiteral 0x13180b308 <col:14> 'int' 128
|   |   | |-CompoundStmt 0x13180b4c0 <col:19, line:30:2>
|   |   | | `-BinaryOperator 0x13180b4a0 <line:29:6, col:34> 'char' '='
|   |   | |   |-ArraySubscriptExpr 0x13180b3d0 <col:6, col:18> 'char' lvalue
|   |   | |   | |-ImplicitCastExpr 0x13180b3b8 <col:6> 'char *' <LValueToRValue>
|   |   | |   | | `-DeclRefExpr 0x13180b360 <col:6> 'char *' lvalue ParmVar 0x131128170 'line' 'char *'
|   |   | |   | `-UnaryOperator 0x13180b3a0 <col:11, col:16> 'unsigned int' postfix '++'
|   |   | |   |   `-DeclRefExpr 0x13180b380 <col:11> 'unsigned int' lvalue ParmVar 0x1311281f0 'count' 'unsigned int'
|   |   | |   `-ImplicitCastExpr 0x13180b488 <col:22, col:34> 'char' <IntegralCast>
|   |   | |     `-CallExpr 0x13180b448 <col:22, col:34> 'int'
|   |   | |       |-ImplicitCastExpr 0x13180b430 <col:22> 'int (*)()' <FunctionToPointerDecay>
|   |   | |       | `-DeclRefExpr 0x13180b3f0 <col:22> 'int ()' Function 0x1318093e0 'CharOf' 'int ()'
|   |   | |       `-ImplicitCastExpr 0x13180b470 <col:29> 'int' <LValueToRValue>
|   |   | |         `-DeclRefExpr 0x13180b410 <col:29> 'int' lvalue Var 0x131128700 'value' 'int'
|   |   | `-CompoundStmt 0x13180b8d8 <line:30:9, line:33:2>
|   |   |   |-BinaryOperator 0x13180b6b8 <line:31:6, col:48> 'char' '='
|   |   |   | |-ArraySubscriptExpr 0x13180b548 <col:6, col:18> 'char' lvalue
|   |   |   | | |-ImplicitCastExpr 0x13180b530 <col:6> 'char *' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x13180b4d8 <col:6> 'char *' lvalue ParmVar 0x131128170 'line' 'char *'
|   |   |   | | `-UnaryOperator 0x13180b518 <col:11, col:16> 'unsigned int' postfix '++'
|   |   |   | |   `-DeclRefExpr 0x13180b4f8 <col:11> 'unsigned int' lvalue ParmVar 0x1311281f0 'count' 'unsigned int'
|   |   |   | `-ImplicitCastExpr 0x13180b6a0 <col:22, col:48> 'char' <IntegralCast>
|   |   |   |   `-CallExpr 0x13180b678 <col:22, col:48> 'int'
|   |   |   |     |-ImplicitCastExpr 0x13180b660 <col:22> 'int (*)()' <FunctionToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x13180b568 <col:22> 'int ()' Function 0x1318093e0 'CharOf' 'int ()'
|   |   |   |     `-BinaryOperator 0x13180b640 <col:29, col:47> 'int' '+'
|   |   |   |       |-IntegerLiteral 0x13180b588 <col:29> 'int' 192
|   |   |   |       `-ParenExpr 0x13180b620 <col:36, col:47> 'int'
|   |   |   |         `-BinaryOperator 0x13180b600 <col:37, col:46> 'int' '>>'
|   |   |   |           |-ImplicitCastExpr 0x13180b5e8 <col:37> 'int' <LValueToRValue>
|   |   |   |           | `-DeclRefExpr 0x13180b5a8 <col:37> 'int' lvalue Var 0x131128700 'value' 'int'
|   |   |   |           `-IntegerLiteral 0x13180b5c8 <col:46> 'int' 6
|   |   |   `-BinaryOperator 0x13180b8b8 <line:32:6, col:50> 'char' '='
|   |   |     |-ArraySubscriptExpr 0x13180b748 <col:6, col:18> 'char' lvalue
|   |   |     | |-ImplicitCastExpr 0x13180b730 <col:6> 'char *' <LValueToRValue>
|   |   |     | | `-DeclRefExpr 0x13180b6d8 <col:6> 'char *' lvalue ParmVar 0x131128170 'line' 'char *'
|   |   |     | `-UnaryOperator 0x13180b718 <col:11, col:16> 'unsigned int' postfix '++'
|   |   |     |   `-DeclRefExpr 0x13180b6f8 <col:11> 'unsigned int' lvalue ParmVar 0x1311281f0 'count' 'unsigned int'
|   |   |     `-ImplicitCastExpr 0x13180b8a0 <col:22, col:50> 'char' <IntegralCast>
|   |   |       `-CallExpr 0x13180b878 <col:22, col:50> 'int'
|   |   |         |-ImplicitCastExpr 0x13180b860 <col:22> 'int (*)()' <FunctionToPointerDecay>
|   |   |         | `-DeclRefExpr 0x13180b768 <col:22> 'int ()' Function 0x1318093e0 'CharOf' 'int ()'
|   |   |         `-BinaryOperator 0x13180b840 <col:29, col:49> 'int' '+'
|   |   |           |-IntegerLiteral 0x13180b788 <col:29> 'int' 128
|   |   |           `-ParenExpr 0x13180b820 <col:36, col:49> 'int'
|   |   |             `-BinaryOperator 0x13180b800 <col:37, col:45> 'int' '&'
|   |   |               |-ImplicitCastExpr 0x13180b7e8 <col:37> 'int' <LValueToRValue>
|   |   |               | `-DeclRefExpr 0x13180b7a8 <col:37> 'int' lvalue Var 0x131128700 'value' 'int'
|   |   |               `-IntegerLiteral 0x13180b7c8 <col:45> 'int' 63
|   |   `-BreakStmt 0x13180b928 <line:34:2>
|   `-ReturnStmt 0x13180b9c8 <line:36:5, col:12>
|     `-ImplicitCastExpr 0x13180b9b0 <col:12> 'int' <IntegralCast>
|       `-ImplicitCastExpr 0x13180b998 <col:12> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x13180b978 <col:12> 'unsigned int' lvalue ParmVar 0x1311281f0 'count' 'unsigned int'
`-FunctionDecl 0x131809fd0 <line:25:22> col:22 implicit used sprintf 'int (char *, const char *, ...)' extern
  |-ParmVarDecl 0x13180a0d0 <<invalid sloc>> <invalid sloc> 'char *'
  |-ParmVarDecl 0x13180a138 <<invalid sloc>> <invalid sloc> 'const char *'
  |-BuiltinAttr 0x13180a078 <<invalid sloc>> Implicit 906
  `-FormatAttr 0x13180a1b0 <col:22> Implicit printf 2 3
