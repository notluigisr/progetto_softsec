TranslationUnitDecl 0x134055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1340564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x134055bd0 '__int128'
|-TypedefDecl 0x134056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x134055bf0 'unsigned __int128'
|-TypedefDecl 0x13480be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13480bc00 'struct __NSConstantString_tag'
|   `-Record 0x134056580 '__NSConstantString_tag'
|-TypedefDecl 0x13480be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x134055d90 '__SVInt8_t'
|-TypedefDecl 0x13480bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x134055db0 '__SVInt16_t'
|-TypedefDecl 0x13480bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x134055dd0 '__SVInt32_t'
|-TypedefDecl 0x13480bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x134055df0 '__SVInt64_t'
|-TypedefDecl 0x13480c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x134055e10 '__SVUint8_t'
|-TypedefDecl 0x13480c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x134055e30 '__SVUint16_t'
|-TypedefDecl 0x13480c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x134055e50 '__SVUint32_t'
|-TypedefDecl 0x13480c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x134055e70 '__SVUint64_t'
|-TypedefDecl 0x13480c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x134055e90 '__SVFloat16_t'
|-TypedefDecl 0x13480c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x134055eb0 '__SVFloat32_t'
|-TypedefDecl 0x13480c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x134055ed0 '__SVFloat64_t'
|-TypedefDecl 0x13480c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x134055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13480c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x134055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13480c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x134055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13480c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x134055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13480c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x134055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13480c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x134055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13480c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x134055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13480c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x134055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13480c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x134055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13480c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x134056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13480c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x134056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13480c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x134056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13480c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x134056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13480c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x134056090 '__clang_svint8x3_t'
|-TypedefDecl 0x13480c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1340560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13480c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1340560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13480c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1340560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13480c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x134056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13480ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x134056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13480cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x134056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13480cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x134056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13480cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x134056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13480d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1340561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13480d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1340561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13480d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1340561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13480d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x134056210 '__clang_svint8x4_t'
|-TypedefDecl 0x13480d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x134056230 '__clang_svint16x4_t'
|-TypedefDecl 0x13480d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x134056250 '__clang_svint32x4_t'
|-TypedefDecl 0x13480d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x134056270 '__clang_svint64x4_t'
|-TypedefDecl 0x13480d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x134056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13480d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1340562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13480d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1340562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13480d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1340562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13480d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x134056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13480d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x134056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13480d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x134056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13480d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x134056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13480da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x134056390 '__SVBool_t'
|-TypedefDecl 0x13480da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1340563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13480dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1340563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13480db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1340563f0 '__SVCount_t'
|-TypedefDecl 0x13480dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13480dbb0 'char *'
|   `-BuiltinType 0x1340556b0 'char'
|-TypedefDecl 0x13480dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13480dbb0 'char *'
|   `-BuiltinType 0x1340556b0 'char'
`-FunctionDecl 0x13480dee8 <dataset_diviso_filec/func21435_vuln.c:1:1, line:88:1> line:1:13 conv_euctojis 'int (char *, int, const char *)' static
  |-ParmVarDecl 0x13480dcf0 <col:27, col:34> col:34 used outbuf 'char *'
  |-ParmVarDecl 0x13480dd70 <col:42, col:47> col:47 outlen 'int'
  |-ParmVarDecl 0x13480ddf0 <col:55, col:68> col:68 used inbuf 'const char *'
  `-CompoundStmt 0x13482bda8 <line:2:1, line:88:1>
    |-DeclStmt 0x13480e0a8 <line:3:2, col:26>
    | `-VarDecl 0x13480e008 <col:2, col:21> col:16 used in 'const char *' cinit
    |   `-ImplicitCastExpr 0x13480e090 <col:21> 'const char *' <LValueToRValue>
    |     `-DeclRefExpr 0x13480e070 <col:21> 'const char *' lvalue ParmVar 0x13480ddf0 'inbuf' 'const char *'
    |-DeclStmt 0x13480e178 <line:4:2, col:22>
    | `-VarDecl 0x13480e0d8 <col:2, col:16> col:10 used out 'char *' cinit
    |   `-ImplicitCastExpr 0x13480e160 <col:16> 'char *' <LValueToRValue>
    |     `-DeclRefExpr 0x13480e140 <col:16> 'char *' lvalue ParmVar 0x13480dcf0 'outbuf' 'char *'
    |-WhileStmt 0x13482bc60 <line:7:2, line:83:2>
    | |-BinaryOperator 0x13480e228 <line:7:9, col:16> 'int' '!='
    | | |-ImplicitCastExpr 0x13480e210 <col:9, col:10> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x13480e1f8 <col:9, col:10> 'char' <LValueToRValue>
    | | |   `-UnaryOperator 0x13480e1c8 <col:9, col:10> 'const char' lvalue prefix '*' cannot overflow
    | | |     `-ImplicitCastExpr 0x13480e1b0 <col:10> 'const char *' <LValueToRValue>
    | | |       `-DeclRefExpr 0x13480e190 <col:10> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    | | `-CharacterLiteral 0x13480e1e0 <col:16> 'int' 0
    | `-CompoundStmt 0x13482bc48 <col:22, line:83:2>
    |   `-IfStmt 0x13482bc18 <line:8:3, line:82:3> has_else
    |     |-CallExpr 0x134828418 <line:8:7, col:19> 'int'
    |     | |-ImplicitCastExpr 0x134828400 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |     | | `-DeclRefExpr 0x13480e360 <col:7> 'int ()' Function 0x13480e2a8 'IS_ASCII' 'int ()'
    |     | `-ImplicitCastExpr 0x134828458 <col:16, col:17> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x134828440 <col:16, col:17> 'char' <LValueToRValue>
    |     |     `-UnaryOperator 0x13480e3b8 <col:16, col:17> 'const char' lvalue prefix '*' cannot overflow
    |     |       `-ImplicitCastExpr 0x13480e3a0 <col:17> 'const char *' <LValueToRValue>
    |     |         `-DeclRefExpr 0x13480e380 <col:17> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |     |-CompoundStmt 0x134828680 <col:22, line:11:3>
    |     | |-CallExpr 0x134828588 <line:9:4, col:10> 'int'
    |     | | `-ImplicitCastExpr 0x134828570 <col:4> 'int (*)()' <FunctionToPointerDecay>
    |     | |   `-DeclRefExpr 0x134828550 <col:4> 'int ()' Function 0x134828498 'K_OUT' 'int ()'
    |     | `-BinaryOperator 0x134828660 <line:10:4, col:16> 'char' '='
    |     |   |-UnaryOperator 0x1348285e0 <col:4, col:8> 'char' lvalue prefix '*' cannot overflow
    |     |   | `-UnaryOperator 0x1348285c8 <col:5, col:8> 'char *' postfix '++'
    |     |   |   `-DeclRefExpr 0x1348285a8 <col:5> 'char *' lvalue Var 0x13480e0d8 'out' 'char *'
    |     |   `-ImplicitCastExpr 0x134828648 <col:13, col:16> 'char' <LValueToRValue>
    |     |     `-UnaryOperator 0x134828630 <col:13, col:16> 'const char' lvalue prefix '*' cannot overflow
    |     |       `-UnaryOperator 0x134828618 <col:14, col:16> 'const char *' postfix '++'
    |     |         `-DeclRefExpr 0x1348285f8 <col:14> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |     `-IfStmt 0x13482bbe8 <line:11:10, line:82:3> has_else
    |       |-CallExpr 0x134828808 <line:11:14, col:28> 'int'
    |       | |-ImplicitCastExpr 0x1348287f0 <col:14> 'int (*)()' <FunctionToPointerDecay>
    |       | | `-DeclRefExpr 0x134828780 <col:14> 'int ()' Function 0x1348286c8 'iseuckanji' 'int ()'
    |       | `-ImplicitCastExpr 0x134828848 <col:25, col:26> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x134828830 <col:25, col:26> 'char' <LValueToRValue>
    |       |     `-UnaryOperator 0x1348287d8 <col:25, col:26> 'const char' lvalue prefix '*' cannot overflow
    |       |       `-ImplicitCastExpr 0x1348287c0 <col:26> 'const char *' <LValueToRValue>
    |       |         `-DeclRefExpr 0x1348287a0 <col:26> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |       |-CompoundStmt 0x134829258 <col:31, line:25:3>
    |       | `-IfStmt 0x134829228 <line:12:4, line:24:4> has_else
    |       |   |-CallExpr 0x134828948 <line:12:8, col:28> 'int'
    |       |   | |-ImplicitCastExpr 0x134828930 <col:8> 'int (*)()' <FunctionToPointerDecay>
    |       |   | | `-DeclRefExpr 0x134828860 <col:8> 'int ()' Function 0x1348286c8 'iseuckanji' 'int ()'
    |       |   | `-ImplicitCastExpr 0x134828988 <col:19, col:27> 'int' <IntegralCast>
    |       |   |   `-ImplicitCastExpr 0x134828970 <col:19, col:27> 'char' <LValueToRValue>
    |       |   |     `-UnaryOperator 0x134828918 <col:19, col:27> 'const char' lvalue prefix '*' cannot overflow
    |       |   |       `-ParenExpr 0x1348288f8 <col:20, col:27> 'const char *'
    |       |   |         `-BinaryOperator 0x1348288d8 <col:21, col:26> 'const char *' '+'
    |       |   |           |-ImplicitCastExpr 0x1348288c0 <col:21> 'const char *' <LValueToRValue>
    |       |   |           | `-DeclRefExpr 0x134828880 <col:21> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |       |   |           `-IntegerLiteral 0x1348288a0 <col:26> 'int' 1
    |       |   |-CompoundStmt 0x134828d68 <col:31, line:16:4>
    |       |   | |-CallExpr 0x134828ab8 <line:13:5, col:10> 'int'
    |       |   | | `-ImplicitCastExpr 0x134828aa0 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |       |   | |   `-DeclRefExpr 0x134828a80 <col:5> 'int ()' Function 0x1348289c8 'K_IN' 'int ()'
    |       |   | |-BinaryOperator 0x134828c00 <line:14:5, col:22> 'char' '='
    |       |   | | |-UnaryOperator 0x134828b10 <col:5, col:9> 'char' lvalue prefix '*' cannot overflow
    |       |   | | | `-UnaryOperator 0x134828af8 <col:6, col:9> 'char *' postfix '++'
    |       |   | | |   `-DeclRefExpr 0x134828ad8 <col:6> 'char *' lvalue Var 0x13480e0d8 'out' 'char *'
    |       |   | | `-ImplicitCastExpr 0x134828be8 <col:14, col:22> 'char' <IntegralCast>
    |       |   | |   `-BinaryOperator 0x134828bc8 <col:14, col:22> 'int' '&'
    |       |   | |     |-ImplicitCastExpr 0x134828bb0 <col:14, col:17> 'int' <IntegralCast>
    |       |   | |     | `-ImplicitCastExpr 0x134828b98 <col:14, col:17> 'char' <LValueToRValue>
    |       |   | |     |   `-UnaryOperator 0x134828b60 <col:14, col:17> 'const char' lvalue prefix '*' cannot overflow
    |       |   | |     |     `-UnaryOperator 0x134828b48 <col:15, col:17> 'const char *' postfix '++'
    |       |   | |     |       `-DeclRefExpr 0x134828b28 <col:15> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |       |   | |     `-IntegerLiteral 0x134828b78 <col:22> 'int' 127
    |       |   | `-BinaryOperator 0x134828d48 <line:15:5, col:22> 'char' '='
    |       |   |   |-UnaryOperator 0x134828c58 <col:5, col:9> 'char' lvalue prefix '*' cannot overflow
    |       |   |   | `-UnaryOperator 0x134828c40 <col:6, col:9> 'char *' postfix '++'
    |       |   |   |   `-DeclRefExpr 0x134828c20 <col:6> 'char *' lvalue Var 0x13480e0d8 'out' 'char *'
    |       |   |   `-ImplicitCastExpr 0x134828d30 <col:14, col:22> 'char' <IntegralCast>
    |       |   |     `-BinaryOperator 0x134828d10 <col:14, col:22> 'int' '&'
    |       |   |       |-ImplicitCastExpr 0x134828cf8 <col:14, col:17> 'int' <IntegralCast>
    |       |   |       | `-ImplicitCastExpr 0x134828ce0 <col:14, col:17> 'char' <LValueToRValue>
    |       |   |       |   `-UnaryOperator 0x134828ca8 <col:14, col:17> 'const char' lvalue prefix '*' cannot overflow
    |       |   |       |     `-UnaryOperator 0x134828c90 <col:15, col:17> 'const char *' postfix '++'
    |       |   |       |       `-DeclRefExpr 0x134828c70 <col:15> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |       |   |       `-IntegerLiteral 0x134828cc0 <col:22> 'int' 127
    |       |   `-CompoundStmt 0x1348291f8 <line:16:11, line:24:4>
    |       |     |-CallExpr 0x134828dc8 <line:17:5, col:11> 'int'
    |       |     | `-ImplicitCastExpr 0x134828db0 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |       |     |   `-DeclRefExpr 0x134828d90 <col:5> 'int ()' Function 0x134828498 'K_OUT' 'int ()'
    |       |     |-BinaryOperator 0x134828e90 <line:18:5, col:14> 'char' contains-errors '='
    |       |     | |-UnaryOperator 0x134828e20 <col:5, col:9> 'char' lvalue prefix '*' cannot overflow
    |       |     | | `-UnaryOperator 0x134828e08 <col:6, col:9> 'char *' postfix '++'
    |       |     | |   `-DeclRefExpr 0x134828de8 <col:6> 'char *' lvalue Var 0x13480e0d8 'out' 'char *'
    |       |     | `-RecoveryExpr 0x134828e70 <col:14> '<dependent type>' contains-errors lvalue
    |       |     |-UnaryOperator 0x134828ed0 <line:19:5, col:7> 'const char *' postfix '++'
    |       |     | `-DeclRefExpr 0x134828eb0 <col:5> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |       |     `-IfStmt 0x1348291d8 <line:20:5, line:23:5>
    |       |       |-BinaryOperator 0x134829098 <line:20:9, col:37> 'int' '&&'
    |       |       | |-BinaryOperator 0x134828f80 <col:9, col:16> 'int' '!='
    |       |       | | |-ImplicitCastExpr 0x134828f68 <col:9, col:10> 'int' <IntegralCast>
    |       |       | | | `-ImplicitCastExpr 0x134828f50 <col:9, col:10> 'char' <LValueToRValue>
    |       |       | | |   `-UnaryOperator 0x134828f20 <col:9, col:10> 'const char' lvalue prefix '*' cannot overflow
    |       |       | | |     `-ImplicitCastExpr 0x134828f08 <col:10> 'const char *' <LValueToRValue>
    |       |       | | |       `-DeclRefExpr 0x134828ee8 <col:10> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |       |       | | `-CharacterLiteral 0x134828f38 <col:16> 'int' 0
    |       |       | `-UnaryOperator 0x134829080 <col:24, col:37> 'int' prefix '!' cannot overflow
    |       |       |   `-CallExpr 0x134829028 <col:25, col:37> 'int'
    |       |       |     |-ImplicitCastExpr 0x134829010 <col:25> 'int (*)()' <FunctionToPointerDecay>
    |       |       |     | `-DeclRefExpr 0x134828fa0 <col:25> 'int ()' Function 0x13480e2a8 'IS_ASCII' 'int ()'
    |       |       |     `-ImplicitCastExpr 0x134829068 <col:34, col:35> 'int' <IntegralCast>
    |       |       |       `-ImplicitCastExpr 0x134829050 <col:34, col:35> 'char' <LValueToRValue>
    |       |       |         `-UnaryOperator 0x134828ff8 <col:34, col:35> 'const char' lvalue prefix '*' cannot overflow
    |       |       |           `-ImplicitCastExpr 0x134828fe0 <col:35> 'const char *' <LValueToRValue>
    |       |       |             `-DeclRefExpr 0x134828fc0 <col:35> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |       |       `-CompoundStmt 0x1348291b8 <col:40, line:23:5>
    |       |         |-BinaryOperator 0x134829160 <line:21:6, col:15> 'char' contains-errors '='
    |       |         | |-UnaryOperator 0x1348290f0 <col:6, col:10> 'char' lvalue prefix '*' cannot overflow
    |       |         | | `-UnaryOperator 0x1348290d8 <col:7, col:10> 'char *' postfix '++'
    |       |         | |   `-DeclRefExpr 0x1348290b8 <col:7> 'char *' lvalue Var 0x13480e0d8 'out' 'char *'
    |       |         | `-RecoveryExpr 0x134829140 <col:15> '<dependent type>' contains-errors lvalue
    |       |         `-UnaryOperator 0x1348291a0 <line:22:6, col:8> 'const char *' postfix '++'
    |       |           `-DeclRefExpr 0x134829180 <col:6> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |       `-IfStmt 0x13482bbb8 <line:25:10, line:82:3> has_else
    |         |-CallExpr 0x1348293d8 <line:25:14, col:30> 'int'
    |         | |-ImplicitCastExpr 0x1348293c0 <col:14> 'int (*)()' <FunctionToPointerDecay>
    |         | | `-DeclRefExpr 0x134829350 <col:14> 'int ()' Function 0x134829298 'iseuchwkana1' 'int ()'
    |         | `-ImplicitCastExpr 0x134829418 <col:27, col:28> 'int' <IntegralCast>
    |         |   `-ImplicitCastExpr 0x134829400 <col:27, col:28> 'char' <LValueToRValue>
    |         |     `-UnaryOperator 0x1348293a8 <col:27, col:28> 'const char' lvalue prefix '*' cannot overflow
    |         |       `-ImplicitCastExpr 0x134829390 <col:28> 'const char *' <LValueToRValue>
    |         |         `-DeclRefExpr 0x134829370 <col:28> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |         |-CompoundStmt 0x13482ac58 <col:33, line:61:3>
    |         | `-IfStmt 0x13482ac28 <line:26:4, line:60:4> has_else
    |         |   |-CallExpr 0x1348295f8 <line:26:8, col:30> 'int'
    |         |   | |-ImplicitCastExpr 0x1348295e0 <col:8> 'int (*)()' <FunctionToPointerDecay>
    |         |   | | `-DeclRefExpr 0x134829510 <col:8> 'int ()' Function 0x134829458 'iseuchwkana2' 'int ()'
    |         |   | `-ImplicitCastExpr 0x134829638 <col:21, col:29> 'int' <IntegralCast>
    |         |   |   `-ImplicitCastExpr 0x134829620 <col:21, col:29> 'char' <LValueToRValue>
    |         |   |     `-UnaryOperator 0x1348295c8 <col:21, col:29> 'const char' lvalue prefix '*' cannot overflow
    |         |   |       `-ParenExpr 0x1348295a8 <col:22, col:29> 'const char *'
    |         |   |         `-BinaryOperator 0x134829588 <col:23, col:28> 'const char *' '+'
    |         |   |           |-ImplicitCastExpr 0x134829570 <col:23> 'const char *' <LValueToRValue>
    |         |   |           | `-DeclRefExpr 0x134829530 <col:23> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |         |   |           `-IntegerLiteral 0x134829550 <col:28> 'int' 1
    |         |   |-CompoundStmt 0x13482a8c8 <col:33, line:53:4>
    |         |   | `-IfStmt 0x13482a898 <line:27:5, line:52:5> has_else
    |         |   |   |-CXXDependentScopeMemberExpr 0x1348296d0 <line:27:9, col:22> '<dependent type>' contains-errors lvalue .allow_jisx0201_kana
    |         |   |   | `-RecoveryExpr 0x1348296b0 <col:9> '<dependent type>' contains-errors lvalue
    |         |   |   |-CompoundStmt 0x1348299d0 <col:43, line:31:5>
    |         |   |   | |-CallExpr 0x134829830 <line:28:6, col:12> 'int'
    |         |   |   | | `-ImplicitCastExpr 0x134829818 <col:6> 'int (*)()' <FunctionToPointerDecay>
    |         |   |   | |   `-DeclRefExpr 0x1348297f8 <col:6> 'int ()' Function 0x134829740 'HW_IN' 'int ()'
    |         |   |   | |-UnaryOperator 0x134829870 <line:29:6, col:8> 'const char *' postfix '++'
    |         |   |   | | `-DeclRefExpr 0x134829850 <col:6> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |         |   |   | `-BinaryOperator 0x1348299b0 <line:30:6, col:23> 'char' '='
    |         |   |   |   |-UnaryOperator 0x1348298c0 <col:6, col:10> 'char' lvalue prefix '*' cannot overflow
    |         |   |   |   | `-UnaryOperator 0x1348298a8 <col:7, col:10> 'char *' postfix '++'
    |         |   |   |   |   `-DeclRefExpr 0x134829888 <col:7> 'char *' lvalue Var 0x13480e0d8 'out' 'char *'
    |         |   |   |   `-ImplicitCastExpr 0x134829998 <col:15, col:23> 'char' <IntegralCast>
    |         |   |   |     `-BinaryOperator 0x134829978 <col:15, col:23> 'int' '&'
    |         |   |   |       |-ImplicitCastExpr 0x134829960 <col:15, col:18> 'int' <IntegralCast>
    |         |   |   |       | `-ImplicitCastExpr 0x134829948 <col:15, col:18> 'char' <LValueToRValue>
    |         |   |   |       |   `-UnaryOperator 0x134829910 <col:15, col:18> 'const char' lvalue prefix '*' cannot overflow
    |         |   |   |       |     `-UnaryOperator 0x1348298f8 <col:16, col:18> 'const char *' postfix '++'
    |         |   |   |       |       `-DeclRefExpr 0x1348298d8 <col:16> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |         |   |   |       `-IntegerLiteral 0x134829928 <col:23> 'int' 127
    |         |   |   `-CompoundStmt 0x13482a868 <line:31:12, line:52:5>
    |         |   |     |-DeclStmt 0x134829b08 <line:32:6, col:22>
    |         |   |     | `-VarDecl 0x134829aa0 <col:6, col:21> col:13 used jis_ch 'char[2]'
    |         |   |     |-DeclStmt 0x134829ba0 <line:33:6, col:14>
    |         |   |     | `-VarDecl 0x134829b38 <col:6, col:11> col:11 used len 'int'
    |         |   |     |-IfStmt 0x13482a3c0 <line:35:6, line:43:24> has_else
    |         |   |     | |-BinaryOperator 0x134829e38 <line:35:10, line:36:32> 'int' '&&'
    |         |   |     | | |-CallExpr 0x134829ca0 <line:35:10, col:32> 'int'
    |         |   |     | | | |-ImplicitCastExpr 0x134829c88 <col:10> 'int (*)()' <FunctionToPointerDecay>
    |         |   |     | | | | `-DeclRefExpr 0x134829bb8 <col:10> 'int ()' Function 0x134829298 'iseuchwkana1' 'int ()'
    |         |   |     | | | `-ImplicitCastExpr 0x134829ce0 <col:23, col:31> 'int' <IntegralCast>
    |         |   |     | | |   `-ImplicitCastExpr 0x134829cc8 <col:23, col:31> 'char' <LValueToRValue>
    |         |   |     | | |     `-UnaryOperator 0x134829c70 <col:23, col:31> 'const char' lvalue prefix '*' cannot overflow
    |         |   |     | | |       `-ParenExpr 0x134829c50 <col:24, col:31> 'const char *'
    |         |   |     | | |         `-BinaryOperator 0x134829c30 <col:25, col:30> 'const char *' '+'
    |         |   |     | | |           |-ImplicitCastExpr 0x134829c18 <col:25> 'const char *' <LValueToRValue>
    |         |   |     | | |           | `-DeclRefExpr 0x134829bd8 <col:25> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |         |   |     | | |           `-IntegerLiteral 0x134829bf8 <col:30> 'int' 2
    |         |   |     | | `-CallExpr 0x134829de0 <line:36:10, col:32> 'int'
    |         |   |     | |   |-ImplicitCastExpr 0x134829dc8 <col:10> 'int (*)()' <FunctionToPointerDecay>
    |         |   |     | |   | `-DeclRefExpr 0x134829cf8 <col:10> 'int ()' Function 0x134829458 'iseuchwkana2' 'int ()'
    |         |   |     | |   `-ImplicitCastExpr 0x134829e20 <col:23, col:31> 'int' <IntegralCast>
    |         |   |     | |     `-ImplicitCastExpr 0x134829e08 <col:23, col:31> 'char' <LValueToRValue>
    |         |   |     | |       `-UnaryOperator 0x134829db0 <col:23, col:31> 'const char' lvalue prefix '*' cannot overflow
    |         |   |     | |         `-ParenExpr 0x134829d90 <col:24, col:31> 'const char *'
    |         |   |     | |           `-BinaryOperator 0x134829d70 <col:25, col:30> 'const char *' '+'
    |         |   |     | |             |-ImplicitCastExpr 0x134829d58 <col:25> 'const char *' <LValueToRValue>
    |         |   |     | |             | `-DeclRefExpr 0x134829d18 <col:25> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |         |   |     | |             `-IntegerLiteral 0x134829d38 <col:30> 'int' 3
    |         |   |     | |-BinaryOperator 0x13482a1c0 <line:37:7, line:39:29> 'int' '='
    |         |   |     | | |-DeclRefExpr 0x134829e58 <line:37:7> 'int' lvalue Var 0x134829b38 'len' 'int'
    |         |   |     | | `-CallExpr 0x13482a110 <col:13, line:39:29> 'int'
    |         |   |     | |   |-ImplicitCastExpr 0x13482a0f8 <line:37:13> 'int (*)()' <FunctionToPointerDecay>
    |         |   |     | |   | `-DeclRefExpr 0x134829f58 <col:13> 'int ()' Function 0x134829ea0 'conv_jis_hantozen' 'int ()'
    |         |   |     | |   |-ImplicitCastExpr 0x13482a148 <line:38:9> 'char *' <ArrayToPointerDecay>
    |         |   |     | |   | `-DeclRefExpr 0x134829f78 <col:9> 'char[2]' lvalue Var 0x134829aa0 'jis_ch' 'char[2]'
    |         |   |     | |   |-ImplicitCastExpr 0x13482a178 <line:39:9, col:17> 'int' <IntegralCast>
    |         |   |     | |   | `-ImplicitCastExpr 0x13482a160 <col:9, col:17> 'char' <LValueToRValue>
    |         |   |     | |   |   `-UnaryOperator 0x13482a030 <col:9, col:17> 'const char' lvalue prefix '*' cannot overflow
    |         |   |     | |   |     `-ParenExpr 0x13482a010 <col:10, col:17> 'const char *'
    |         |   |     | |   |       `-BinaryOperator 0x134829ff0 <col:11, col:16> 'const char *' '+'
    |         |   |     | |   |         |-ImplicitCastExpr 0x134829fd8 <col:11> 'const char *' <LValueToRValue>
    |         |   |     | |   |         | `-DeclRefExpr 0x134829f98 <col:11> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |         |   |     | |   |         `-IntegerLiteral 0x134829fb8 <col:16> 'int' 1
    |         |   |     | |   `-ImplicitCastExpr 0x13482a1a8 <col:20, col:28> 'int' <IntegralCast>
    |         |   |     | |     `-ImplicitCastExpr 0x13482a190 <col:20, col:28> 'char' <LValueToRValue>
    |         |   |     | |       `-UnaryOperator 0x13482a0e0 <col:20, col:28> 'const char' lvalue prefix '*' cannot overflow
    |         |   |     | |         `-ParenExpr 0x13482a0c0 <col:21, col:28> 'const char *'
    |         |   |     | |           `-BinaryOperator 0x13482a0a0 <col:22, col:27> 'const char *' '+'
    |         |   |     | |             |-ImplicitCastExpr 0x13482a088 <col:22> 'const char *' <LValueToRValue>
    |         |   |     | |             | `-DeclRefExpr 0x13482a048 <col:22> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |         |   |     | |             `-IntegerLiteral 0x13482a068 <col:27> 'int' 3
    |         |   |     | `-BinaryOperator 0x13482a3a0 <line:41:7, line:43:24> 'int' '='
    |         |   |     |   |-DeclRefExpr 0x13482a1e0 <line:41:7> 'int' lvalue Var 0x134829b38 'len' 'int'
    |         |   |     |   `-CallExpr 0x13482a320 <col:13, line:43:24> 'int'
    |         |   |     |     |-ImplicitCastExpr 0x13482a308 <line:41:13> 'int (*)()' <FunctionToPointerDecay>
    |         |   |     |     | `-DeclRefExpr 0x13482a200 <col:13> 'int ()' Function 0x134829ea0 'conv_jis_hantozen' 'int ()'
    |         |   |     |     |-ImplicitCastExpr 0x13482a358 <line:42:9> 'char *' <ArrayToPointerDecay>
    |         |   |     |     | `-DeclRefExpr 0x13482a220 <col:9> 'char[2]' lvalue Var 0x134829aa0 'jis_ch' 'char[2]'
    |         |   |     |     |-ImplicitCastExpr 0x13482a388 <line:43:9, col:17> 'int' <IntegralCast>
    |         |   |     |     | `-ImplicitCastExpr 0x13482a370 <col:9, col:17> 'char' <LValueToRValue>
    |         |   |     |     |   `-UnaryOperator 0x13482a2d8 <col:9, col:17> 'const char' lvalue prefix '*' cannot overflow
    |         |   |     |     |     `-ParenExpr 0x13482a2b8 <col:10, col:17> 'const char *'
    |         |   |     |     |       `-BinaryOperator 0x13482a298 <col:11, col:16> 'const char *' '+'
    |         |   |     |     |         |-ImplicitCastExpr 0x13482a280 <col:11> 'const char *' <LValueToRValue>
    |         |   |     |     |         | `-DeclRefExpr 0x13482a240 <col:11> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |         |   |     |     |         `-IntegerLiteral 0x13482a260 <col:16> 'int' 1
    |         |   |     |     `-CharacterLiteral 0x13482a2f0 <col:20> 'int' 0
    |         |   |     `-IfStmt 0x13482a838 <line:44:6, line:51:6> has_else
    |         |   |       |-BinaryOperator 0x13482a458 <line:44:10, col:17> 'int' '=='
    |         |   |       | |-ImplicitCastExpr 0x13482a440 <col:10> 'int' <LValueToRValue>
    |         |   |       | | `-DeclRefExpr 0x13482a400 <col:10> 'int' lvalue Var 0x134829b38 'len' 'int'
    |         |   |       | `-IntegerLiteral 0x13482a420 <col:17> 'int' 0
    |         |   |       |-CompoundAssignOperator 0x13482a4b8 <line:45:7, col:13> 'const char *' '+=' ComputeLHSTy='const char *' ComputeResultTy='const char *'
    |         |   |       | |-DeclRefExpr 0x13482a478 <col:7> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |         |   |       | `-IntegerLiteral 0x13482a498 <col:13> 'int' 2
    |         |   |       `-CompoundStmt 0x13482a808 <line:46:11, line:51:6>
    |         |   |         |-CallExpr 0x13482a520 <line:47:7, col:12> 'int'
    |         |   |         | `-ImplicitCastExpr 0x13482a508 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |         |   |         |   `-DeclRefExpr 0x13482a4e8 <col:7> 'int ()' Function 0x1348289c8 'K_IN' 'int ()'
    |         |   |         |-CompoundAssignOperator 0x13482a5d8 <line:48:7, col:19> 'const char *' '+=' ComputeLHSTy='const char *' ComputeResultTy='const char *'
    |         |   |         | |-DeclRefExpr 0x13482a540 <col:7> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |         |   |         | `-BinaryOperator 0x13482a5b8 <col:13, col:19> 'int' '*'
    |         |   |         |   |-ImplicitCastExpr 0x13482a5a0 <col:13> 'int' <LValueToRValue>
    |         |   |         |   | `-DeclRefExpr 0x13482a560 <col:13> 'int' lvalue Var 0x134829b38 'len' 'int'
    |         |   |         |   `-IntegerLiteral 0x13482a580 <col:19> 'int' 2
    |         |   |         |-BinaryOperator 0x13482a6e8 <line:49:7, col:24> 'char' '='
    |         |   |         | |-UnaryOperator 0x13482a640 <col:7, col:11> 'char' lvalue prefix '*' cannot overflow
    |         |   |         | | `-UnaryOperator 0x13482a628 <col:8, col:11> 'char *' postfix '++'
    |         |   |         | |   `-DeclRefExpr 0x13482a608 <col:8> 'char *' lvalue Var 0x13480e0d8 'out' 'char *'
    |         |   |         | `-ImplicitCastExpr 0x13482a6d0 <col:16, col:24> 'char' <LValueToRValue>
    |         |   |         |   `-ArraySubscriptExpr 0x13482a6b0 <col:16, col:24> 'char' lvalue
    |         |   |         |     |-ImplicitCastExpr 0x13482a698 <col:16> 'char *' <ArrayToPointerDecay>
    |         |   |         |     | `-DeclRefExpr 0x13482a658 <col:16> 'char[2]' lvalue Var 0x134829aa0 'jis_ch' 'char[2]'
    |         |   |         |     `-IntegerLiteral 0x13482a678 <col:23> 'int' 0
    |         |   |         `-BinaryOperator 0x13482a7e8 <line:50:7, col:24> 'char' '='
    |         |   |           |-UnaryOperator 0x13482a740 <col:7, col:11> 'char' lvalue prefix '*' cannot overflow
    |         |   |           | `-UnaryOperator 0x13482a728 <col:8, col:11> 'char *' postfix '++'
    |         |   |           |   `-DeclRefExpr 0x13482a708 <col:8> 'char *' lvalue Var 0x13480e0d8 'out' 'char *'
    |         |   |           `-ImplicitCastExpr 0x13482a7d0 <col:16, col:24> 'char' <LValueToRValue>
    |         |   |             `-ArraySubscriptExpr 0x13482a7b0 <col:16, col:24> 'char' lvalue
    |         |   |               |-ImplicitCastExpr 0x13482a798 <col:16> 'char *' <ArrayToPointerDecay>
    |         |   |               | `-DeclRefExpr 0x13482a758 <col:16> 'char[2]' lvalue Var 0x134829aa0 'jis_ch' 'char[2]'
    |         |   |               `-IntegerLiteral 0x13482a778 <col:23> 'int' 1
    |         |   `-CompoundStmt 0x13482ac00 <line:53:11, line:60:4>
    |         |     |-CallExpr 0x13482a918 <line:54:5, col:11> 'int'
    |         |     | `-ImplicitCastExpr 0x13482a900 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |         |     |   `-DeclRefExpr 0x13482a8e0 <col:5> 'int ()' Function 0x134828498 'K_OUT' 'int ()'
    |         |     |-UnaryOperator 0x13482a958 <line:55:5, col:7> 'const char *' postfix '++'
    |         |     | `-DeclRefExpr 0x13482a938 <col:5> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |         |     `-IfStmt 0x13482abe0 <line:56:5, line:59:5>
    |         |       |-BinaryOperator 0x13482ab20 <line:56:9, col:37> 'int' '&&'
    |         |       | |-BinaryOperator 0x13482aa08 <col:9, col:16> 'int' '!='
    |         |       | | |-ImplicitCastExpr 0x13482a9f0 <col:9, col:10> 'int' <IntegralCast>
    |         |       | | | `-ImplicitCastExpr 0x13482a9d8 <col:9, col:10> 'char' <LValueToRValue>
    |         |       | | |   `-UnaryOperator 0x13482a9a8 <col:9, col:10> 'const char' lvalue prefix '*' cannot overflow
    |         |       | | |     `-ImplicitCastExpr 0x13482a990 <col:10> 'const char *' <LValueToRValue>
    |         |       | | |       `-DeclRefExpr 0x13482a970 <col:10> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |         |       | | `-CharacterLiteral 0x13482a9c0 <col:16> 'int' 0
    |         |       | `-UnaryOperator 0x13482ab08 <col:24, col:37> 'int' prefix '!' cannot overflow
    |         |       |   `-CallExpr 0x13482aab0 <col:25, col:37> 'int'
    |         |       |     |-ImplicitCastExpr 0x13482aa98 <col:25> 'int (*)()' <FunctionToPointerDecay>
    |         |       |     | `-DeclRefExpr 0x13482aa28 <col:25> 'int ()' Function 0x13480e2a8 'IS_ASCII' 'int ()'
    |         |       |     `-ImplicitCastExpr 0x13482aaf0 <col:34, col:35> 'int' <IntegralCast>
    |         |       |       `-ImplicitCastExpr 0x13482aad8 <col:34, col:35> 'char' <LValueToRValue>
    |         |       |         `-UnaryOperator 0x13482aa80 <col:34, col:35> 'const char' lvalue prefix '*' cannot overflow
    |         |       |           `-ImplicitCastExpr 0x13482aa68 <col:35> 'const char *' <LValueToRValue>
    |         |       |             `-DeclRefExpr 0x13482aa48 <col:35> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |         |       `-CompoundStmt 0x13482abc8 <col:40, line:59:5>
    |         |         `-UnaryOperator 0x13482abb0 <line:58:6, col:8> 'const char *' postfix '++'
    |         |           `-DeclRefExpr 0x13482ab90 <col:6> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |         `-IfStmt 0x13482bb88 <line:61:10, line:82:3> has_else
    |           |-CallExpr 0x13482add8 <line:61:14, col:26> 'int'
    |           | |-ImplicitCastExpr 0x13482adc0 <col:14> 'int (*)()' <FunctionToPointerDecay>
    |           | | `-DeclRefExpr 0x13482ad50 <col:14> 'int ()' Function 0x13482ac98 'iseucaux' 'int ()'
    |           | `-ImplicitCastExpr 0x13482ae18 <col:23, col:24> 'int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x13482ae00 <col:23, col:24> 'char' <LValueToRValue>
    |           |     `-UnaryOperator 0x13482ada8 <col:23, col:24> 'const char' lvalue prefix '*' cannot overflow
    |           |       `-ImplicitCastExpr 0x13482ad90 <col:24> 'const char *' <LValueToRValue>
    |           |         `-DeclRefExpr 0x13482ad70 <col:24> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |           |-CompoundStmt 0x13482ba68 <col:29, line:78:3>
    |           | |-UnaryOperator 0x13482ae50 <line:62:4, col:6> 'const char *' postfix '++'
    |           | | `-DeclRefExpr 0x13482ae30 <col:4> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |           | `-IfStmt 0x13482ba38 <line:63:4, line:77:4> has_else
    |           |   |-BinaryOperator 0x13482b088 <line:63:8, col:47> 'int' '&&'
    |           |   | |-CallExpr 0x13482aef0 <col:8, col:22> 'int'
    |           |   | | |-ImplicitCastExpr 0x13482aed8 <col:8> 'int (*)()' <FunctionToPointerDecay>
    |           |   | | | `-DeclRefExpr 0x13482ae68 <col:8> 'int ()' Function 0x1348286c8 'iseuckanji' 'int ()'
    |           |   | | `-ImplicitCastExpr 0x13482af30 <col:19, col:20> 'int' <IntegralCast>
    |           |   | |   `-ImplicitCastExpr 0x13482af18 <col:19, col:20> 'char' <LValueToRValue>
    |           |   | |     `-UnaryOperator 0x13482aec0 <col:19, col:20> 'const char' lvalue prefix '*' cannot overflow
    |           |   | |       `-ImplicitCastExpr 0x13482aea8 <col:20> 'const char *' <LValueToRValue>
    |           |   | |         `-DeclRefExpr 0x13482ae88 <col:20> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |           |   | `-CallExpr 0x13482b030 <col:27, col:47> 'int'
    |           |   |   |-ImplicitCastExpr 0x13482b018 <col:27> 'int (*)()' <FunctionToPointerDecay>
    |           |   |   | `-DeclRefExpr 0x13482af48 <col:27> 'int ()' Function 0x1348286c8 'iseuckanji' 'int ()'
    |           |   |   `-ImplicitCastExpr 0x13482b070 <col:38, col:46> 'int' <IntegralCast>
    |           |   |     `-ImplicitCastExpr 0x13482b058 <col:38, col:46> 'char' <LValueToRValue>
    |           |   |       `-UnaryOperator 0x13482b000 <col:38, col:46> 'const char' lvalue prefix '*' cannot overflow
    |           |   |         `-ParenExpr 0x13482afe0 <col:39, col:46> 'const char *'
    |           |   |           `-BinaryOperator 0x13482afc0 <col:40, col:45> 'const char *' '+'
    |           |   |             |-ImplicitCastExpr 0x13482afa8 <col:40> 'const char *' <LValueToRValue>
    |           |   |             | `-DeclRefExpr 0x13482af68 <col:40> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |           |   |             `-IntegerLiteral 0x13482af88 <col:45> 'int' 1
    |           |   |-CompoundStmt 0x13482b470 <col:50, line:67:4>
    |           |   | |-CallExpr 0x13482b1c0 <line:64:5, col:12> 'int'
    |           |   | | `-ImplicitCastExpr 0x13482b1a8 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |           |   | |   `-DeclRefExpr 0x13482b188 <col:5> 'int ()' Function 0x13482b0d0 'AUX_IN' 'int ()'
    |           |   | |-BinaryOperator 0x13482b308 <line:65:5, col:22> 'char' '='
    |           |   | | |-UnaryOperator 0x13482b218 <col:5, col:9> 'char' lvalue prefix '*' cannot overflow
    |           |   | | | `-UnaryOperator 0x13482b200 <col:6, col:9> 'char *' postfix '++'
    |           |   | | |   `-DeclRefExpr 0x13482b1e0 <col:6> 'char *' lvalue Var 0x13480e0d8 'out' 'char *'
    |           |   | | `-ImplicitCastExpr 0x13482b2f0 <col:14, col:22> 'char' <IntegralCast>
    |           |   | |   `-BinaryOperator 0x13482b2d0 <col:14, col:22> 'int' '&'
    |           |   | |     |-ImplicitCastExpr 0x13482b2b8 <col:14, col:17> 'int' <IntegralCast>
    |           |   | |     | `-ImplicitCastExpr 0x13482b2a0 <col:14, col:17> 'char' <LValueToRValue>
    |           |   | |     |   `-UnaryOperator 0x13482b268 <col:14, col:17> 'const char' lvalue prefix '*' cannot overflow
    |           |   | |     |     `-UnaryOperator 0x13482b250 <col:15, col:17> 'const char *' postfix '++'
    |           |   | |     |       `-DeclRefExpr 0x13482b230 <col:15> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |           |   | |     `-IntegerLiteral 0x13482b280 <col:22> 'int' 127
    |           |   | `-BinaryOperator 0x13482b450 <line:66:5, col:22> 'char' '='
    |           |   |   |-UnaryOperator 0x13482b360 <col:5, col:9> 'char' lvalue prefix '*' cannot overflow
    |           |   |   | `-UnaryOperator 0x13482b348 <col:6, col:9> 'char *' postfix '++'
    |           |   |   |   `-DeclRefExpr 0x13482b328 <col:6> 'char *' lvalue Var 0x13480e0d8 'out' 'char *'
    |           |   |   `-ImplicitCastExpr 0x13482b438 <col:14, col:22> 'char' <IntegralCast>
    |           |   |     `-BinaryOperator 0x13482b418 <col:14, col:22> 'int' '&'
    |           |   |       |-ImplicitCastExpr 0x13482b400 <col:14, col:17> 'int' <IntegralCast>
    |           |   |       | `-ImplicitCastExpr 0x13482b3e8 <col:14, col:17> 'char' <LValueToRValue>
    |           |   |       |   `-UnaryOperator 0x13482b3b0 <col:14, col:17> 'const char' lvalue prefix '*' cannot overflow
    |           |   |       |     `-UnaryOperator 0x13482b398 <col:15, col:17> 'const char *' postfix '++'
    |           |   |       |       `-DeclRefExpr 0x13482b378 <col:15> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |           |   |       `-IntegerLiteral 0x13482b3c8 <col:22> 'int' 127
    |           |   `-CompoundStmt 0x13482ba18 <line:67:11, line:77:4>
    |           |     |-CallExpr 0x13482b4d0 <line:68:5, col:11> 'int'
    |           |     | `-ImplicitCastExpr 0x13482b4b8 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |           |     |   `-DeclRefExpr 0x13482b498 <col:5> 'int ()' Function 0x134828498 'K_OUT' 'int ()'
    |           |     `-IfStmt 0x13482b9f8 <line:69:5, line:76:5>
    |           |       |-BinaryOperator 0x13482b6a0 <line:69:9, col:37> 'int' '&&'
    |           |       | |-BinaryOperator 0x13482b588 <col:9, col:16> 'int' '!='
    |           |       | | |-ImplicitCastExpr 0x13482b570 <col:9, col:10> 'int' <IntegralCast>
    |           |       | | | `-ImplicitCastExpr 0x13482b558 <col:9, col:10> 'char' <LValueToRValue>
    |           |       | | |   `-UnaryOperator 0x13482b528 <col:9, col:10> 'const char' lvalue prefix '*' cannot overflow
    |           |       | | |     `-ImplicitCastExpr 0x13482b510 <col:10> 'const char *' <LValueToRValue>
    |           |       | | |       `-DeclRefExpr 0x13482b4f0 <col:10> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |           |       | | `-CharacterLiteral 0x13482b540 <col:16> 'int' 0
    |           |       | `-UnaryOperator 0x13482b688 <col:24, col:37> 'int' prefix '!' cannot overflow
    |           |       |   `-CallExpr 0x13482b630 <col:25, col:37> 'int'
    |           |       |     |-ImplicitCastExpr 0x13482b618 <col:25> 'int (*)()' <FunctionToPointerDecay>
    |           |       |     | `-DeclRefExpr 0x13482b5a8 <col:25> 'int ()' Function 0x13480e2a8 'IS_ASCII' 'int ()'
    |           |       |     `-ImplicitCastExpr 0x13482b670 <col:34, col:35> 'int' <IntegralCast>
    |           |       |       `-ImplicitCastExpr 0x13482b658 <col:34, col:35> 'char' <LValueToRValue>
    |           |       |         `-UnaryOperator 0x13482b600 <col:34, col:35> 'const char' lvalue prefix '*' cannot overflow
    |           |       |           `-ImplicitCastExpr 0x13482b5e8 <col:35> 'const char *' <LValueToRValue>
    |           |       |             `-DeclRefExpr 0x13482b5c8 <col:35> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |           |       `-CompoundStmt 0x13482b9d8 <col:40, line:76:5>
    |           |         |-UnaryOperator 0x13482b730 <line:71:6, col:8> 'const char *' postfix '++'
    |           |         | `-DeclRefExpr 0x13482b710 <col:6> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |           |         `-IfStmt 0x13482b9b8 <line:72:6, line:75:6>
    |           |           |-BinaryOperator 0x13482b8f8 <line:72:10, col:38> 'int' '&&'
    |           |           | |-BinaryOperator 0x13482b7e0 <col:10, col:17> 'int' '!='
    |           |           | | |-ImplicitCastExpr 0x13482b7c8 <col:10, col:11> 'int' <IntegralCast>
    |           |           | | | `-ImplicitCastExpr 0x13482b7b0 <col:10, col:11> 'char' <LValueToRValue>
    |           |           | | |   `-UnaryOperator 0x13482b780 <col:10, col:11> 'const char' lvalue prefix '*' cannot overflow
    |           |           | | |     `-ImplicitCastExpr 0x13482b768 <col:11> 'const char *' <LValueToRValue>
    |           |           | | |       `-DeclRefExpr 0x13482b748 <col:11> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |           |           | | `-CharacterLiteral 0x13482b798 <col:17> 'int' 0
    |           |           | `-UnaryOperator 0x13482b8e0 <col:25, col:38> 'int' prefix '!' cannot overflow
    |           |           |   `-CallExpr 0x13482b888 <col:26, col:38> 'int'
    |           |           |     |-ImplicitCastExpr 0x13482b870 <col:26> 'int (*)()' <FunctionToPointerDecay>
    |           |           |     | `-DeclRefExpr 0x13482b800 <col:26> 'int ()' Function 0x13480e2a8 'IS_ASCII' 'int ()'
    |           |           |     `-ImplicitCastExpr 0x13482b8c8 <col:35, col:36> 'int' <IntegralCast>
    |           |           |       `-ImplicitCastExpr 0x13482b8b0 <col:35, col:36> 'char' <LValueToRValue>
    |           |           |         `-UnaryOperator 0x13482b858 <col:35, col:36> 'const char' lvalue prefix '*' cannot overflow
    |           |           |           `-ImplicitCastExpr 0x13482b840 <col:36> 'const char *' <LValueToRValue>
    |           |           |             `-DeclRefExpr 0x13482b820 <col:36> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |           |           `-CompoundStmt 0x13482b9a0 <col:41, line:75:6>
    |           |             `-UnaryOperator 0x13482b988 <line:74:7, col:9> 'const char *' postfix '++'
    |           |               `-DeclRefExpr 0x13482b968 <col:7> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |           `-CompoundStmt 0x13482bb68 <line:78:10, line:82:3>
    |             |-CallExpr 0x13482bac0 <line:79:4, col:10> 'int'
    |             | `-ImplicitCastExpr 0x13482baa8 <col:4> 'int (*)()' <FunctionToPointerDecay>
    |             |   `-DeclRefExpr 0x13482ba88 <col:4> 'int ()' Function 0x134828498 'K_OUT' 'int ()'
    |             `-UnaryOperator 0x13482bb50 <line:81:4, col:6> 'const char *' postfix '++'
    |               `-DeclRefExpr 0x13482bb30 <col:4> 'const char *' lvalue Var 0x13480e008 'in' 'const char *'
    |-CallExpr 0x13482bcb8 <line:85:2, col:8> 'int'
    | `-ImplicitCastExpr 0x13482bca0 <col:2> 'int (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x13482bc80 <col:2> 'int ()' Function 0x134828498 'K_OUT' 'int ()'
    |-BinaryOperator 0x13482bd58 <line:86:2, col:9> 'char' '='
    | |-UnaryOperator 0x13482bd10 <col:2, col:3> 'char' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x13482bcf8 <col:3> 'char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x13482bcd8 <col:3> 'char *' lvalue Var 0x13480e0d8 'out' 'char *'
    | `-ImplicitCastExpr 0x13482bd40 <col:9> 'char' <IntegralCast>
    |   `-CharacterLiteral 0x13482bd28 <col:9> 'int' 0
    `-ReturnStmt 0x13482bd98 <line:87:2, col:9>
      `-IntegerLiteral 0x13482bd78 <col:9> 'int' 0
