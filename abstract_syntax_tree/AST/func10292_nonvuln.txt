TranslationUnitDecl 0x150855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1508564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x150855bd0 '__int128'
|-TypedefDecl 0x150856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x150855bf0 'unsigned __int128'
|-TypedefDecl 0x150926230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x150926000 'struct __NSConstantString_tag'
|   `-Record 0x150856580 '__NSConstantString_tag'
|-TypedefDecl 0x150926298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x150855d90 '__SVInt8_t'
|-TypedefDecl 0x150926300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x150855db0 '__SVInt16_t'
|-TypedefDecl 0x150926368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x150855dd0 '__SVInt32_t'
|-TypedefDecl 0x1509263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x150855df0 '__SVInt64_t'
|-TypedefDecl 0x150926438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x150855e10 '__SVUint8_t'
|-TypedefDecl 0x1509264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x150855e30 '__SVUint16_t'
|-TypedefDecl 0x150926508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x150855e50 '__SVUint32_t'
|-TypedefDecl 0x150926570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x150855e70 '__SVUint64_t'
|-TypedefDecl 0x1509265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x150855e90 '__SVFloat16_t'
|-TypedefDecl 0x150926640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x150855eb0 '__SVFloat32_t'
|-TypedefDecl 0x1509266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x150855ed0 '__SVFloat64_t'
|-TypedefDecl 0x150926710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x150855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x150926778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x150855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1509267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x150855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x150926848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x150855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1509268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x150855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x150926918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x150855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x150926980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x150855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1509269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x150855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x150926a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x150855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x150926ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x150856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x150926b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x150856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x150926b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x150856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x150926bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x150856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x150926c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x150856090 '__clang_svint8x3_t'
|-TypedefDecl 0x150926cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1508560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x150926d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1508560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x150926d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1508560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x150926df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x150856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x150926e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x150856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x150926ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x150856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x150926f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x150856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x150926f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x150856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x150927800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1508561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x150927868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1508561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1509278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1508561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x150927938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x150856210 '__clang_svint8x4_t'
|-TypedefDecl 0x1509279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x150856230 '__clang_svint16x4_t'
|-TypedefDecl 0x150927a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x150856250 '__clang_svint32x4_t'
|-TypedefDecl 0x150927a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x150856270 '__clang_svint64x4_t'
|-TypedefDecl 0x150927ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x150856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x150927b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1508562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x150927ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1508562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x150927c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1508562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x150927c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x150856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x150927ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x150856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x150927d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x150856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x150927db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x150856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x150927e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x150856390 '__SVBool_t'
|-TypedefDecl 0x150927e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1508563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x150927ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1508563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x150927f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1508563f0 '__SVCount_t'
|-TypedefDecl 0x150927ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x150927fb0 'char *'
|   `-BuiltinType 0x1508556b0 'char'
|-TypedefDecl 0x150928068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x150927fb0 'char *'
|   `-BuiltinType 0x1508556b0 'char'
|-FunctionDecl 0x150940b58 <dataset_diviso_filec/func10292_nonvuln.c:1:1, line:40:1> line:1:1 valequal 'int (struct lys_node *, const char *, int, const char *)'
| |-ParmVarDecl 0x150928648 <col:10, col:27> col:27 used node 'struct lys_node *'
| |-ParmVarDecl 0x1509286c8 <col:33, col:45> col:45 used noncan_val 'const char *'
| |-ParmVarDecl 0x150928748 <col:57, col:61> col:61 used noncan_val_len 'int'
| |-ParmVarDecl 0x150940a00 <col:77, col:89> col:89 used can_val 'const char *'
| `-CompoundStmt 0x150944e10 <line:2:1, line:40:1>
|   |-DeclStmt 0x150940ce8 <line:3:5, col:12>
|   | `-VarDecl 0x150940c80 <col:5, col:9> col:9 used ret 'int'
|   |-DeclStmt 0x150940e78 <line:4:5, col:35>
|   | |-RecordDecl 0x150940d00 <col:5, col:12> col:12 struct lyd_node_leaf_list
|   | `-VarDecl 0x150940df8 <col:5, col:31> col:31 referenced invalid leaf 'struct lyd_node_leaf_list'
|   |-DeclStmt 0x150941160 <line:5:5, col:62>
|   | |-RecordDecl 0x150940e90 <col:5, col:12> col:12 struct lys_node_leaf
|   | `-VarDecl 0x150940ff8 <col:5, col:58> col:27 used sleaf 'struct lys_node_leaf *' cinit
|   |   `-CStyleCastExpr 0x150941120 <col:35, col:58> 'struct lys_node_leaf *' <BitCast>
|   |     `-ImplicitCastExpr 0x150941108 <col:58> 'struct lys_node *' <LValueToRValue> part_of_explicit_cast
|   |       `-DeclRefExpr 0x150941060 <col:58> 'struct lys_node *' lvalue ParmVar 0x150928648 'node' 'struct lys_node *'
|   |-CallExpr 0x1509414d0 <line:8:5, col:33> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x150941418 <col:5> 'void *(void *, int, unsigned long)' Function 0x1509411c8 'memset' 'void *(void *, int, unsigned long)'
|   | |-UnaryOperator 0x150941458 <col:12, col:13> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | | `-RecoveryExpr 0x150941438 <col:13> '<dependent type>' contains-errors lvalue
|   | |-IntegerLiteral 0x150941470 <col:19> 'int' 0
|   | `-UnaryExprOrTypeTraitExpr 0x1509414b0 <col:22, col:29> 'unsigned long' contains-errors sizeof
|   |   `-RecoveryExpr 0x150941490 <col:29> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x150941800 <line:9:5, col:81> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x150941550 <col:5, col:10> '<dependent type>' contains-errors lvalue .value_str
|   | | `-RecoveryExpr 0x150941528 <col:5> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x150941508 <col:5> 'struct lyd_node_leaf_list' lvalue Var 0x150940df8 'leaf' 'struct lyd_node_leaf_list'
|   | `-CallExpr 0x1509417c8 <col:22, col:81> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x1509416c0 <col:22> 'int ()' Function 0x150941608 'lydict_insert' 'int ()'
|   |   |-CXXDependentScopeMemberExpr 0x150941740 <col:36, col:50> '<dependent type>' contains-errors lvalue ->ctx
|   |   | `-RecoveryExpr 0x150941718 <col:36, col:42> '<dependent type>' contains-errors lvalue
|   |   |   `-DeclRefExpr 0x1509416e0 <col:36> 'struct lys_node *' lvalue ParmVar 0x150928648 'node' 'struct lys_node *'
|   |   |-DeclRefExpr 0x150941788 <col:55> 'const char *' lvalue ParmVar 0x1509286c8 'noncan_val' 'const char *'
|   |   `-DeclRefExpr 0x1509417a8 <col:67> 'int' lvalue ParmVar 0x150928748 'noncan_val_len' 'int'
|   |-LabelStmt 0x1509419c8 <line:11:1, line:12:35> 'repeat'
|   | `-BinaryOperator 0x150941958 <col:5, col:35> '<dependent type>' contains-errors '='
|   |   |-CXXDependentScopeMemberExpr 0x150941868 <col:5, col:10> '<dependent type>' contains-errors lvalue .value_type
|   |   | `-RecoveryExpr 0x150941840 <col:5> '<dependent type>' contains-errors lvalue
|   |   |   `-DeclRefExpr 0x150941820 <col:5> 'struct lyd_node_leaf_list' lvalue Var 0x150940df8 'leaf' 'struct lyd_node_leaf_list'
|   |   `-CXXDependentScopeMemberExpr 0x150941910 <col:23, col:35> '<dependent type>' contains-errors lvalue .base
|   |     `-RecoveryExpr 0x1509418e8 <col:23, col:30> '<dependent type>' contains-errors lvalue
|   |       `-DeclRefExpr 0x1509418b0 <col:23> 'struct lys_node_leaf *' lvalue Var 0x150940ff8 'sleaf' 'struct lys_node_leaf *'
|   |-BinaryOperator 0x1518082b0 <line:13:5, col:19> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x151808248 <col:5, col:10> '<dependent type>' contains-errors lvalue .schema
|   | | `-RecoveryExpr 0x151808220 <col:5> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x151808200 <col:5> 'struct lyd_node_leaf_list' lvalue Var 0x150940df8 'leaf' 'struct lyd_node_leaf_list'
|   | `-DeclRefExpr 0x151808290 <col:19> 'struct lys_node *' lvalue ParmVar 0x150928648 'node' 'struct lys_node *'
|   |-IfStmt 0x151808eb8 <line:15:5, line:29:5> has_else
|   | |-BinaryOperator 0x151808390 <line:15:9, col:28> 'int' contains-errors '=='
|   | | |-CXXDependentScopeMemberExpr 0x1518082f0 <col:9, col:14> '<dependent type>' contains-errors lvalue .value_type
|   | | | `-RecoveryExpr 0x1518082d0 <col:9> '<dependent type>' contains-errors lvalue
|   | | `-RecoveryExpr 0x151808370 <col:28> '<dependent type>' contains-errors lvalue
|   | |-CompoundStmt 0x1518089a0 <col:45, line:24:5>
|   | | |-IfStmt 0x1518087f0 <line:16:9, line:21:9>
|   | | | |-UnaryOperator 0x151808500 <line:16:13, col:36> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | | | | `-ImplicitCastExpr 0x1518084e8 <col:14, col:36> '<dependent type>' contains-errors <LValueToRValue>
|   | | | |   `-CXXDependentScopeMemberExpr 0x1518084a0 <col:14, col:36> '<dependent type>' contains-errors lvalue .target
|   | | | |     `-CXXDependentScopeMemberExpr 0x151808458 <col:14, col:31> '<dependent type>' contains-errors lvalue .lref
|   | | | |       `-CXXDependentScopeMemberExpr 0x151808410 <col:14, col:26> '<dependent type>' contains-errors lvalue .info
|   | | | |         `-RecoveryExpr 0x1518083e8 <col:14, col:21> '<dependent type>' contains-errors lvalue
|   | | | |           `-DeclRefExpr 0x1518083b0 <col:14> 'struct lys_node_leaf *' lvalue Var 0x150940ff8 'sleaf' 'struct lys_node_leaf *'
|   | | | `-CompoundStmt 0x1518087c8 <col:44, line:21:9>
|   | | |   |-CallExpr 0x1518086c0 <line:18:13, col:37> '<dependent type>' contains-errors
|   | | |   | |-DeclRefExpr 0x1518085f8 <col:13> 'int ()' Function 0x151808540 'LOGINT' 'int ()'
|   | | |   | `-CXXDependentScopeMemberExpr 0x151808678 <col:20, col:34> '<dependent type>' contains-errors lvalue ->ctx
|   | | |   |   `-RecoveryExpr 0x151808650 <col:20, col:26> '<dependent type>' contains-errors lvalue
|   | | |   |     `-DeclRefExpr 0x151808618 <col:20> 'struct lys_node *' lvalue ParmVar 0x150928648 'node' 'struct lys_node *'
|   | | |   |-BinaryOperator 0x151808740 <line:19:13, col:20> 'int' '='
|   | | |   | |-DeclRefExpr 0x1518086e8 <col:13> 'int' lvalue Var 0x150940c80 'ret' 'int'
|   | | |   | `-UnaryOperator 0x151808728 <col:19, col:20> 'int' prefix '-'
|   | | |   |   `-IntegerLiteral 0x151808708 <col:20> 'int' 1
|   | | |   `-GotoStmt 0x1518087b0 <line:20:13, col:18> 'finish' 0x151808760
|   | | |-BinaryOperator 0x151808968 <line:22:9, col:39> 'struct lys_node_leaf *' contains-errors '='
|   | | | |-DeclRefExpr 0x151808810 <col:9> 'struct lys_node_leaf *' lvalue Var 0x150940ff8 'sleaf' 'struct lys_node_leaf *'
|   | | | `-CXXDependentScopeMemberExpr 0x151808920 <col:17, col:39> '<dependent type>' contains-errors lvalue .target
|   | | |   `-CXXDependentScopeMemberExpr 0x1518088d8 <col:17, col:34> '<dependent type>' contains-errors lvalue .lref
|   | | |     `-CXXDependentScopeMemberExpr 0x151808890 <col:17, col:29> '<dependent type>' contains-errors lvalue .info
|   | | |       `-RecoveryExpr 0x151808868 <col:17, col:24> '<dependent type>' contains-errors lvalue
|   | | |         `-DeclRefExpr 0x151808830 <col:17> 'struct lys_node_leaf *' lvalue Var 0x150940ff8 'sleaf' 'struct lys_node_leaf *'
|   | | `-GotoStmt 0x151808988 <line:23:9, col:14> 'repeat' 0x150941978
|   | `-CompoundStmt 0x151808ea0 <line:24:12, line:29:5>
|   |   `-IfStmt 0x151808e80 <line:25:9, line:28:9>
|   |     |-UnaryOperator 0x151808db8 <line:25:13, col:90> '<dependent type>' contains-errors prefix '!' cannot overflow
|   |     | `-CallExpr 0x151808d58 <col:14, col:90> '<dependent type>' contains-errors
|   |     |   |-DeclRefExpr 0x151808aa8 <col:14> 'int ()' Function 0x1518089f0 'lyp_parse_value' 'int ()'
|   |     |   |-UnaryOperator 0x151808b28 <col:30, col:38> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |     |   | `-RecoveryExpr 0x151808b00 <col:31, col:38> '<dependent type>' contains-errors lvalue
|   |     |   |   `-DeclRefExpr 0x151808ac8 <col:31> 'struct lys_node_leaf *' lvalue Var 0x150940ff8 'sleaf' 'struct lys_node_leaf *'
|   |     |   |-UnaryOperator 0x151808ba8 <col:44, col:50> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |     |   | `-CXXDependentScopeMemberExpr 0x151808b60 <col:45, col:50> '<dependent type>' contains-errors lvalue .value_str
|   |     |   |   `-RecoveryExpr 0x151808b40 <col:45> '<dependent type>' contains-errors lvalue
|   |     |   |-RecoveryExpr 0x151808cf8 <col:61> '<dependent type>' contains-errors lvalue
|   |     |   |-UnaryOperator 0x151808bf8 <col:67, col:68> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |     |   | `-RecoveryExpr 0x151808bd8 <col:68> '<dependent type>' contains-errors lvalue
|   |     |   |-RecoveryExpr 0x151808d18 <col:74> '<dependent type>' contains-errors lvalue
|   |     |   |-RecoveryExpr 0x151808d38 <col:80> '<dependent type>' contains-errors lvalue
|   |     |   |-IntegerLiteral 0x151808c40 <col:86> 'int' 0
|   |     |   `-IntegerLiteral 0x151808c60 <col:89> 'int' 0
|   |     `-CompoundStmt 0x151808e60 <col:93, line:28:9>
|   |       |-BinaryOperator 0x151808e28 <line:26:13, col:20> 'int' '='
|   |       | |-DeclRefExpr 0x151808dd0 <col:13> 'int' lvalue Var 0x150940c80 'ret' 'int'
|   |       | `-UnaryOperator 0x151808e10 <col:19, col:20> 'int' prefix '-'
|   |       |   `-IntegerLiteral 0x151808df0 <col:20> 'int' 1
|   |       `-GotoStmt 0x151808e48 <line:27:13, col:18> 'finish' 0x151808760
|   |-IfStmt 0x150944b38 <line:31:5, line:35:5> has_else
|   | |-UnaryOperator 0x150944a30 <line:31:9, col:40> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | | `-CallExpr 0x150944a00 <col:10, col:40> '<dependent type>' contains-errors
|   | |   |-DeclRefExpr 0x151809110 <col:10> 'int (const char *, const char *)' Function 0x151808f30 'strcmp' 'int (const char *, const char *)'
|   | |   |-CXXDependentScopeMemberExpr 0x151809150 <col:17, col:22> '<dependent type>' contains-errors lvalue .value_str
|   | |   | `-RecoveryExpr 0x151809130 <col:17> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x151809198 <col:33> 'const char *' lvalue ParmVar 0x150940a00 'can_val' 'const char *'
|   | |-CompoundStmt 0x150944aa8 <col:43, line:33:5>
|   | | `-BinaryOperator 0x150944a88 <line:32:9, col:15> 'int' '='
|   | |   |-DeclRefExpr 0x150944a48 <col:9> 'int' lvalue Var 0x150940c80 'ret' 'int'
|   | |   `-IntegerLiteral 0x150944a68 <col:15> 'int' 1
|   | `-CompoundStmt 0x150944b20 <line:33:12, line:35:5>
|   |   `-BinaryOperator 0x150944b00 <line:34:9, col:15> 'int' '='
|   |     |-DeclRefExpr 0x150944ac0 <col:9> 'int' lvalue Var 0x150940c80 'ret' 'int'
|   |     `-IntegerLiteral 0x150944ae0 <col:15> 'int' 0
|   |-LabelStmt 0x150944da8 <line:37:1, line:38:52> 'finish'
|   | `-CallExpr 0x150944d78 <col:5, col:52> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x150944c48 <col:5> 'int ()' Function 0x150944b90 'lydict_remove' 'int ()'
|   |   |-CXXDependentScopeMemberExpr 0x150944cc8 <col:19, col:33> '<dependent type>' contains-errors lvalue ->ctx
|   |   | `-RecoveryExpr 0x150944ca0 <col:19, col:25> '<dependent type>' contains-errors lvalue
|   |   |   `-DeclRefExpr 0x150944c68 <col:19> 'struct lys_node *' lvalue ParmVar 0x150928648 'node' 'struct lys_node *'
|   |   `-CXXDependentScopeMemberExpr 0x150944d30 <col:38, col:43> '<dependent type>' contains-errors lvalue .value_str
|   |     `-RecoveryExpr 0x150944d10 <col:38> '<dependent type>' contains-errors lvalue
|   `-ReturnStmt 0x150944e00 <line:39:5, col:12>
|     `-ImplicitCastExpr 0x150944de8 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x150944dc8 <col:12> 'int' lvalue Var 0x150940c80 'ret' 'int'
|-FunctionDecl 0x1509411c8 <line:8:5> col:5 implicit used memset 'void *(void *, int, unsigned long)' extern
| |-ParmVarDecl 0x1509412c8 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x150941330 <<invalid sloc>> <invalid sloc> 'int'
| |-ParmVarDecl 0x150941398 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x150941270 <<invalid sloc>> Implicit 900
`-FunctionDecl 0x151808f30 <line:31:10> col:10 implicit used strcmp 'int (const char *, const char *)' extern
  |-ParmVarDecl 0x151809030 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x151809098 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x151808fd8 <<invalid sloc>> Implicit 887
