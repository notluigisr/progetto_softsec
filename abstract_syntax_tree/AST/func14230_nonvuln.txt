TranslationUnitDecl 0x12a837608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x12a8384b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x12a837bd0 '__int128'
|-TypedefDecl 0x12a838528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x12a837bf0 'unsigned __int128'
|-TypedefDecl 0x12a908630 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12a908400 'struct __NSConstantString_tag'
|   `-Record 0x12a838580 '__NSConstantString_tag'
|-TypedefDecl 0x12a908698 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x12a837d90 '__SVInt8_t'
|-TypedefDecl 0x12a908700 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x12a837db0 '__SVInt16_t'
|-TypedefDecl 0x12a908768 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x12a837dd0 '__SVInt32_t'
|-TypedefDecl 0x12a9087d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x12a837df0 '__SVInt64_t'
|-TypedefDecl 0x12a908838 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x12a837e10 '__SVUint8_t'
|-TypedefDecl 0x12a9088a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x12a837e30 '__SVUint16_t'
|-TypedefDecl 0x12a908908 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x12a837e50 '__SVUint32_t'
|-TypedefDecl 0x12a908970 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x12a837e70 '__SVUint64_t'
|-TypedefDecl 0x12a9089d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x12a837e90 '__SVFloat16_t'
|-TypedefDecl 0x12a908a40 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x12a837eb0 '__SVFloat32_t'
|-TypedefDecl 0x12a908aa8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x12a837ed0 '__SVFloat64_t'
|-TypedefDecl 0x12a908b10 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x12a837ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12a908b78 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x12a837f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12a908be0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x12a837f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12a908c48 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x12a837f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12a908cb0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x12a837f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12a908d18 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x12a837f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12a908d80 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x12a837fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12a908de8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x12a837fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12a908e50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x12a837ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12a908eb8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x12a838010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12a908f20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x12a838030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12a908f88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x12a838050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12a908ff0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x12a838070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12a909058 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x12a838090 '__clang_svint8x3_t'
|-TypedefDecl 0x12a9090c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x12a8380b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12a909128 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x12a8380d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12a909190 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x12a8380f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12a9091f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x12a838110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12a909260 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x12a838130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12a9092c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x12a838150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12a909330 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x12a838170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12a909398 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x12a838190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12a909c00 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x12a8381b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12a909c68 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x12a8381d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12a909cd0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x12a8381f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12a909d38 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x12a838210 '__clang_svint8x4_t'
|-TypedefDecl 0x12a909da0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x12a838230 '__clang_svint16x4_t'
|-TypedefDecl 0x12a909e08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x12a838250 '__clang_svint32x4_t'
|-TypedefDecl 0x12a909e70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x12a838270 '__clang_svint64x4_t'
|-TypedefDecl 0x12a909ed8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x12a838290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12a909f40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x12a8382b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12a909fa8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x12a8382d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12a90a010 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x12a8382f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12a90a078 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x12a838310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12a90a0e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x12a838330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12a90a148 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x12a838350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12a90a1b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x12a838370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12a90a218 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x12a838390 '__SVBool_t'
|-TypedefDecl 0x12a90a280 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x12a8383b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12a90a2e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x12a8383d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12a90a350 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x12a8383f0 '__SVCount_t'
|-TypedefDecl 0x12a90a3f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12a90a3b0 'char *'
|   `-BuiltinType 0x12a8376b0 'char'
|-TypedefDecl 0x12a90a468 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12a90a3b0 'char *'
|   `-BuiltinType 0x12a8376b0 'char'
|-FunctionDecl 0x12a90a688 <dataset_diviso_filec/func14230_nonvuln.c:1:1, line:30:1> line:1:14 invalid to_zval_base64 'int *(int, int)' static
| |-ParmVarDecl 0x12a90a4f0 <col:29, col:43> col:43 invalid type 'int'
| |-ParmVarDecl 0x12a90a570 <col:49, col:60> col:60 invalid data 'int'
| `-CompoundStmt 0x12c80cb70 <line:2:1, line:30:1>
|   |-DeclStmt 0x12a90a7d8 <line:4:2, col:11>
|   | `-VarDecl 0x12a90a770 <col:2, col:8> col:8 used str 'char *'
|   |-DeclStmt 0x12a90a870 <line:5:2, col:13>
|   | `-VarDecl 0x12a90a808 <col:2, col:6> col:6 used str_len 'int'
|   |-CallExpr 0x12a90aa60 <line:7:2, col:19> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x12a90a9e0 <col:2> 'int ()' Function 0x12a90a928 'MAKE_STD_ZVAL' 'int ()'
|   | `-RecoveryExpr 0x12a90aa40 <col:16> '<dependent type>' contains-errors lvalue
|   |-CallExpr 0x12c80a820 <line:8:2, col:25> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x12a90ab68 <col:2> 'int ()' Function 0x12a90aab0 'FIND_XML_NULL' 'int ()'
|   | |-RecoveryExpr 0x12a90ab88 <col:16> '<dependent type>' contains-errors lvalue
|   | `-RecoveryExpr 0x12c80a800 <col:22> '<dependent type>' contains-errors lvalue
|   `-IfStmt 0x12c80cb40 <line:9:2, line:28:2> has_else
|     |-BinaryOperator 0x12c80a8d8 <line:9:6, col:20> 'int' contains-errors '&&'
|     | |-RecoveryExpr 0x12c80a850 <col:6> '<dependent type>' contains-errors lvalue
|     | `-CXXDependentScopeMemberExpr 0x12c80a890 <col:14, col:20> '<dependent type>' contains-errors lvalue ->children
|     |   `-RecoveryExpr 0x12c80a870 <col:14> '<dependent type>' contains-errors lvalue
|     |-CompoundStmt 0x12c80ca18 <col:30, line:26:2>
|     | `-IfStmt 0x12c80c9e8 <line:10:3, line:25:3> has_else
|     |   |-BinaryOperator 0x12c80ab68 <line:10:7, col:72> 'int' contains-errors '&&'
|     |   | |-BinaryOperator 0x12c80ab08 <col:7, col:31> 'int' contains-errors '=='
|     |   | | |-CXXDependentScopeMemberExpr 0x12c80a960 <col:7, col:23> '<dependent type>' contains-errors lvalue ->type
|     |   | | | `-CXXDependentScopeMemberExpr 0x12c80a918 <col:7, col:13> '<dependent type>' contains-errors lvalue ->children
|     |   | | |   `-RecoveryExpr 0x12c80a8f8 <col:7> '<dependent type>' contains-errors lvalue
|     |   | | `-RecoveryExpr 0x12c80aae8 <col:31> '<dependent type>' contains-errors lvalue
|     |   | `-BinaryOperator 0x12c80ab48 <col:48, col:72> 'int' contains-errors '=='
|     |   |   |-CXXDependentScopeMemberExpr 0x12c80aa48 <col:48, col:64> '<dependent type>' contains-errors lvalue ->next
|     |   |   | `-CXXDependentScopeMemberExpr 0x12c80aa00 <col:48, col:54> '<dependent type>' contains-errors lvalue ->children
|     |   |   |   `-RecoveryExpr 0x12c80a9e0 <col:48> '<dependent type>' contains-errors lvalue
|     |   |   `-RecoveryExpr 0x12c80ab28 <col:72> '<dependent type>' contains-errors lvalue
|     |   |-CompoundStmt 0x12c80c220 <col:78, line:17:3>
|     |   | |-CallExpr 0x12c80ad38 <line:11:4, col:47> '<dependent type>' contains-errors
|     |   | | |-DeclRefExpr 0x12c80ac68 <col:4> 'int ()' Function 0x12c80abb0 'whiteSpace_collapse' 'int ()'
|     |   | | `-CXXDependentScopeMemberExpr 0x12c80acf0 <col:24, col:40> '<dependent type>' contains-errors lvalue ->content
|     |   | |   `-CXXDependentScopeMemberExpr 0x12c80aca8 <col:24, col:30> '<dependent type>' contains-errors lvalue ->children
|     |   | |     `-RecoveryExpr 0x12c80ac88 <col:24> '<dependent type>' contains-errors lvalue
|     |   | |-BinaryOperator 0x12c80b748 <line:12:4, col:108> 'char *' contains-errors '='
|     |   | | |-DeclRefExpr 0x12c80ad60 <col:4> 'char *' lvalue Var 0x12a90a770 'str' 'char *'
|     |   | | `-CStyleCastExpr 0x12c80b720 <col:10, col:108> 'char *' contains-errors <Dependent>
|     |   | |   `-CallExpr 0x12c80b6d0 <col:17, col:108> '<dependent type>' contains-errors
|     |   | |     |-DeclRefExpr 0x12c80ae60 <col:17> 'int ()' Function 0x12c80ada8 'php_base64_decode' 'int ()'
|     |   | |     |-CXXDependentScopeMemberExpr 0x12c80aee8 <col:35, col:51> '<dependent type>' contains-errors lvalue ->content
|     |   | |     | `-CXXDependentScopeMemberExpr 0x12c80aea0 <col:35, col:41> '<dependent type>' contains-errors lvalue ->children
|     |   | |     |   `-RecoveryExpr 0x12c80ae80 <col:35> '<dependent type>' contains-errors lvalue
|     |   | |     |-CallExpr 0x12c80b658 <col:60, col:97> 'unsigned long' contains-errors
|     |   | |     | |-ImplicitCastExpr 0x12c80b640 <col:60> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|     |   | |     | | `-DeclRefExpr 0x12c80b500 <col:60> 'unsigned long (const char *)' Function 0x12c80b390 'strlen' 'unsigned long (const char *)'
|     |   | |     | `-ImplicitCastExpr 0x12c80b680 <col:67, col:90> 'const char *' contains-errors <NoOp>
|     |   | |     |   `-CStyleCastExpr 0x12c80b5e8 <col:67, col:90> 'char *' contains-errors <Dependent>
|     |   | |     |     `-CXXDependentScopeMemberExpr 0x12c80b588 <col:74, col:90> '<dependent type>' contains-errors lvalue ->content
|     |   | |     |       `-CXXDependentScopeMemberExpr 0x12c80b540 <col:74, col:80> '<dependent type>' contains-errors lvalue ->children
|     |   | |     |         `-RecoveryExpr 0x12c80b520 <col:74> '<dependent type>' contains-errors lvalue
|     |   | |     `-UnaryOperator 0x12c80b6b8 <col:100, col:101> 'int *' prefix '&' cannot overflow
|     |   | |       `-DeclRefExpr 0x12c80b698 <col:101> 'int' lvalue Var 0x12a90a808 'str_len' 'int'
|     |   | |-IfStmt 0x12c80bfe8 <line:13:4, line:15:4>
|     |   | | |-UnaryOperator 0x12c80b7a0 <line:13:8, col:9> 'int' prefix '!' cannot overflow
|     |   | | | `-ImplicitCastExpr 0x12c80b788 <col:9> 'char *' <LValueToRValue>
|     |   | | |   `-DeclRefExpr 0x12c80b768 <col:9> 'char *' lvalue Var 0x12a90a770 'str' 'char *'
|     |   | | `-CompoundStmt 0x12c80bfd0 <col:14, line:15:4>
|     |   | |   `-CallExpr 0x12c80bfa0 <line:14:5, col:31> '<dependent type>' contains-errors
|     |   | |     |-DeclRefExpr 0x12c80beb8 <col:5> 'int ()' Function 0x12c80be00 'soap_error0' 'int ()'
|     |   | |     |-RecoveryExpr 0x12c80bf80 <col:17> '<dependent type>' contains-errors lvalue
|     |   | |     `-StringLiteral 0x12c80bf30 <col:26> 'char[4]' lvalue "STR"
|     |   | `-CallExpr 0x12c80c1e0 <line:16:4, col:37> '<dependent type>' contains-errors
|     |   |   |-DeclRefExpr 0x12c80c0e8 <col:4> 'int ()' Function 0x12c80c030 'ZVAL_STRINGL' 'int ()'
|     |   |   |-RecoveryExpr 0x12c80c1c0 <col:17> '<dependent type>' contains-errors lvalue
|     |   |   |-DeclRefExpr 0x12c80c120 <col:22> 'char *' lvalue Var 0x12a90a770 'str' 'char *'
|     |   |   |-DeclRefExpr 0x12c80c140 <col:27> 'int' lvalue Var 0x12a90a808 'str_len' 'int'
|     |   |   `-IntegerLiteral 0x12c80c160 <col:36> 'int' 0
|     |   `-IfStmt 0x12c80c9b8 <line:17:10, line:25:3> has_else
|     |     |-BinaryOperator 0x12c80c4c0 <line:17:14, col:88> 'int' contains-errors '&&'
|     |     | |-BinaryOperator 0x12c80c460 <col:14, col:38> 'int' contains-errors '=='
|     |     | | |-CXXDependentScopeMemberExpr 0x12c80c2b8 <col:14, col:30> '<dependent type>' contains-errors lvalue ->type
|     |     | | | `-CXXDependentScopeMemberExpr 0x12c80c270 <col:14, col:20> '<dependent type>' contains-errors lvalue ->children
|     |     | | |   `-RecoveryExpr 0x12c80c250 <col:14> '<dependent type>' contains-errors lvalue
|     |     | | `-RecoveryExpr 0x12c80c440 <col:38> '<dependent type>' contains-errors lvalue
|     |     | `-BinaryOperator 0x12c80c4a0 <col:64, col:88> 'int' contains-errors '=='
|     |     |   |-CXXDependentScopeMemberExpr 0x12c80c3a0 <col:64, col:80> '<dependent type>' contains-errors lvalue ->next
|     |     |   | `-CXXDependentScopeMemberExpr 0x12c80c358 <col:64, col:70> '<dependent type>' contains-errors lvalue ->children
|     |     |   |   `-RecoveryExpr 0x12c80c338 <col:64> '<dependent type>' contains-errors lvalue
|     |     |   `-RecoveryExpr 0x12c80c480 <col:88> '<dependent type>' contains-errors lvalue
|     |     |-CompoundStmt 0x12c80c948 <col:94, line:23:3>
|     |     | |-BinaryOperator 0x12c80c7e8 <line:18:4, col:108> 'char *' contains-errors '='
|     |     | | |-DeclRefExpr 0x12c80c4e0 <col:4> 'char *' lvalue Var 0x12a90a770 'str' 'char *'
|     |     | | `-CStyleCastExpr 0x12c80c7c0 <col:10, col:108> 'char *' contains-errors <Dependent>
|     |     | |   `-CallExpr 0x12c80c770 <col:17, col:108> '<dependent type>' contains-errors
|     |     | |     |-DeclRefExpr 0x12c80c500 <col:17> 'int ()' Function 0x12c80ada8 'php_base64_decode' 'int ()'
|     |     | |     |-CXXDependentScopeMemberExpr 0x12c80c588 <col:35, col:51> '<dependent type>' contains-errors lvalue ->content
|     |     | |     | `-CXXDependentScopeMemberExpr 0x12c80c540 <col:35, col:41> '<dependent type>' contains-errors lvalue ->children
|     |     | |     |   `-RecoveryExpr 0x12c80c520 <col:35> '<dependent type>' contains-errors lvalue
|     |     | |     |-CallExpr 0x12c80c6f8 <col:60, col:97> 'unsigned long' contains-errors
|     |     | |     | |-ImplicitCastExpr 0x12c80c6e0 <col:60> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|     |     | |     | | `-DeclRefExpr 0x12c80c5d0 <col:60> 'unsigned long (const char *)' Function 0x12c80b390 'strlen' 'unsigned long (const char *)'
|     |     | |     | `-ImplicitCastExpr 0x12c80c720 <col:67, col:90> 'const char *' contains-errors <NoOp>
|     |     | |     |   `-CStyleCastExpr 0x12c80c6b8 <col:67, col:90> 'char *' contains-errors <Dependent>
|     |     | |     |     `-CXXDependentScopeMemberExpr 0x12c80c658 <col:74, col:90> '<dependent type>' contains-errors lvalue ->content
|     |     | |     |       `-CXXDependentScopeMemberExpr 0x12c80c610 <col:74, col:80> '<dependent type>' contains-errors lvalue ->children
|     |     | |     |         `-RecoveryExpr 0x12c80c5f0 <col:74> '<dependent type>' contains-errors lvalue
|     |     | |     `-UnaryOperator 0x12c80c758 <col:100, col:101> 'int *' prefix '&' cannot overflow
|     |     | |       `-DeclRefExpr 0x12c80c738 <col:101> 'int' lvalue Var 0x12a90a808 'str_len' 'int'
|     |     | `-IfStmt 0x12c80c8a8 <line:19:4, line:21:4>
|     |     |   |-UnaryOperator 0x12c80c840 <line:19:8, col:9> 'int' prefix '!' cannot overflow
|     |     |   | `-ImplicitCastExpr 0x12c80c828 <col:9> 'char *' <LValueToRValue>
|     |     |   |   `-DeclRefExpr 0x12c80c808 <col:9> 'char *' lvalue Var 0x12a90a770 'str' 'char *'
|     |     |   `-CompoundStmt 0x12c80c898 <col:14, line:21:4>
|     |     `-CompoundStmt 0x12c80c9a8 <line:23:10, line:25:3>
|     `-CompoundStmt 0x12c80cb30 <line:26:9, line:28:2>
`-FunctionDecl 0x12c80b390 <line:12:60> col:60 implicit used strlen 'unsigned long (const char *)' extern
  |-ParmVarDecl 0x12c80b490 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x12c80b438 <<invalid sloc>> Implicit 902
