TranslationUnitDecl 0x134017a08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1340188b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x134017fd0 '__int128'
|-TypedefDecl 0x134018928 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x134017ff0 'unsigned __int128'
|-TypedefDecl 0x1340eae30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x1340eac00 'struct __NSConstantString_tag'
|   `-Record 0x134018980 '__NSConstantString_tag'
|-TypedefDecl 0x1340eae98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x134018190 '__SVInt8_t'
|-TypedefDecl 0x1340eaf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x1340181b0 '__SVInt16_t'
|-TypedefDecl 0x1340eaf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x1340181d0 '__SVInt32_t'
|-TypedefDecl 0x1340eafd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x1340181f0 '__SVInt64_t'
|-TypedefDecl 0x1340eb038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x134018210 '__SVUint8_t'
|-TypedefDecl 0x1340eb0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x134018230 '__SVUint16_t'
|-TypedefDecl 0x1340eb108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x134018250 '__SVUint32_t'
|-TypedefDecl 0x1340eb170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x134018270 '__SVUint64_t'
|-TypedefDecl 0x1340eb1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x134018290 '__SVFloat16_t'
|-TypedefDecl 0x1340eb240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x1340182b0 '__SVFloat32_t'
|-TypedefDecl 0x1340eb2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x1340182d0 '__SVFloat64_t'
|-TypedefDecl 0x1340eb310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x1340182f0 '__SVBfloat16_t'
|-TypedefDecl 0x1340eb378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x134018310 '__clang_svint8x2_t'
|-TypedefDecl 0x1340eb3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x134018330 '__clang_svint16x2_t'
|-TypedefDecl 0x1340eb448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x134018350 '__clang_svint32x2_t'
|-TypedefDecl 0x1340eb4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x134018370 '__clang_svint64x2_t'
|-TypedefDecl 0x1340eb518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x134018390 '__clang_svuint8x2_t'
|-TypedefDecl 0x1340eb580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x1340183b0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1340eb5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x1340183d0 '__clang_svuint32x2_t'
|-TypedefDecl 0x1340eb650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x1340183f0 '__clang_svuint64x2_t'
|-TypedefDecl 0x1340eb6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x134018410 '__clang_svfloat16x2_t'
|-TypedefDecl 0x1340eb720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x134018430 '__clang_svfloat32x2_t'
|-TypedefDecl 0x1340eb788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x134018450 '__clang_svfloat64x2_t'
|-TypedefDecl 0x1340eb7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x134018470 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x1340eb858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x134018490 '__clang_svint8x3_t'
|-TypedefDecl 0x1340eb8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1340184b0 '__clang_svint16x3_t'
|-TypedefDecl 0x1340eb928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1340184d0 '__clang_svint32x3_t'
|-TypedefDecl 0x1340eb990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1340184f0 '__clang_svint64x3_t'
|-TypedefDecl 0x1340eb9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x134018510 '__clang_svuint8x3_t'
|-TypedefDecl 0x1340eba60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x134018530 '__clang_svuint16x3_t'
|-TypedefDecl 0x1340ebac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x134018550 '__clang_svuint32x3_t'
|-TypedefDecl 0x1340ebb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x134018570 '__clang_svuint64x3_t'
|-TypedefDecl 0x1340ebb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x134018590 '__clang_svfloat16x3_t'
|-TypedefDecl 0x1340ec400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1340185b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x1340ec468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1340185d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1340ec4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1340185f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x1340ec538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x134018610 '__clang_svint8x4_t'
|-TypedefDecl 0x1340ec5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x134018630 '__clang_svint16x4_t'
|-TypedefDecl 0x1340ec608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x134018650 '__clang_svint32x4_t'
|-TypedefDecl 0x1340ec670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x134018670 '__clang_svint64x4_t'
|-TypedefDecl 0x1340ec6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x134018690 '__clang_svuint8x4_t'
|-TypedefDecl 0x1340ec740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1340186b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x1340ec7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1340186d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x1340ec810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1340186f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x1340ec878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x134018710 '__clang_svfloat16x4_t'
|-TypedefDecl 0x1340ec8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x134018730 '__clang_svfloat32x4_t'
|-TypedefDecl 0x1340ec948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x134018750 '__clang_svfloat64x4_t'
|-TypedefDecl 0x1340ec9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x134018770 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x1340eca18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x134018790 '__SVBool_t'
|-TypedefDecl 0x1340eca80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1340187b0 '__clang_svboolx2_t'
|-TypedefDecl 0x1340ecae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1340187d0 '__clang_svboolx4_t'
|-TypedefDecl 0x1340ecb50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1340187f0 '__SVCount_t'
|-TypedefDecl 0x1340ecbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1340ecbb0 'char *'
|   `-BuiltinType 0x134017ab0 'char'
|-TypedefDecl 0x1340ecc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1340ecbb0 'char *'
|   `-BuiltinType 0x134017ab0 'char'
|-FunctionDecl 0x1340ed008 <dataset_diviso_filec/func16004_vuln.c:1:1, line:60:1> line:1:1 invalid _blit_xrgb32_lerp_spans 'int (void *, int, int, const int *, unsigned int)'
| |-ParmVarDecl 0x1340eccd8 <col:26, col:32> col:32 used abstract_renderer 'void *'
| |-ParmVarDecl 0x1340ecd58 <col:51, col:55> col:55 used y 'int'
| |-ParmVarDecl 0x1340ecdd8 <col:58, col:62> col:62 used h 'int'
| |-ParmVarDecl 0x1340ece70 <line:2:5, col:35> col:35 referenced invalid spans 'const int *'
| |-ParmVarDecl 0x1340ecef0 <col:42, col:51> col:51 used num_spans 'unsigned int'
| `-CompoundStmt 0x13600a000 <line:3:1, line:60:1>
|   |-IfStmt 0x1340ed1e8 <line:6:5, line:7:9>
|   | |-BinaryOperator 0x1340ed180 <line:6:9, col:22> 'int' '=='
|   | | |-ImplicitCastExpr 0x1340ed150 <col:9> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1340ed110 <col:9> 'unsigned int' lvalue ParmVar 0x1340ecef0 'num_spans' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1340ed168 <col:22> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1340ed130 <col:22> 'int' 0
|   | `-ReturnStmt 0x1340ed1d8 <line:7:2, col:9>
|   |   `-RecoveryExpr 0x1340ed1b8 <col:9> '<dependent type>' contains-errors lvalue
|   `-IfStmt 0x136009fd0 <line:9:5, line:57:5> has_else
|     |-CallExpr 0x134106448 <line:9:9, col:22> 'int'
|     | |-ImplicitCastExpr 0x134106430 <col:9> 'int (*)()' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x1340ed360 <col:9> 'int ()' Function 0x1340ed2a8 'likely' 'int ()'
|     | `-BinaryOperator 0x1340ed3d8 <col:16, col:21> 'int' '=='
|     |   |-ImplicitCastExpr 0x1340ed3c0 <col:16> 'int' <LValueToRValue>
|     |   | `-DeclRefExpr 0x1340ed380 <col:16> 'int' lvalue ParmVar 0x1340ecdd8 'h' 'int'
|     |   `-IntegerLiteral 0x1340ed3a0 <col:21> 'int' 1
|     |-CompoundStmt 0x134107310 <col:25, line:32:5>
|     | `-DoStmt 0x1341072f0 <line:12:2, line:31:26>
|     |   |-CompoundStmt 0x134107240 <line:12:5, line:31:2>
|     |   | |-IfStmt 0x1341071c0 <line:14:6, line:29:6>
|     |   | | |-RecoveryExpr 0x134106938 <line:14:10> '<dependent type>' contains-errors lvalue
|     |   | | `-CompoundStmt 0x1341071a0 <col:13, line:29:6>
|     |   | |   |-DeclStmt 0x134106ba8 <line:17:3, col:36>
|     |   | |   | `-VarDecl 0x1341069a0 <col:3, col:35> col:7 used len 'int' cinit
|     |   | |   |   `-BinaryOperator 0x134106b88 <col:13, col:35> '<dependent type>' contains-errors '-'
|     |   | |   |     |-CXXDependentScopeMemberExpr 0x134106a80 <col:13, col:22> '<dependent type>' contains-errors lvalue .x
|     |   | |   |     | `-ArraySubscriptExpr 0x134106a60 <col:13, col:20> '<dependent type>' contains-errors lvalue
|     |   | |   |     |   |-ImplicitCastExpr 0x134106a48 <col:13> '<dependent type>' contains-errors <LValueToRValue>
|     |   | |   |     |   | `-RecoveryExpr 0x134106a08 <col:13> '<dependent type>' contains-errors lvalue
|     |   | |   |     |   `-IntegerLiteral 0x134106a28 <col:19> 'int' 1
|     |   | |   |     `-CXXDependentScopeMemberExpr 0x134106b40 <col:26, col:35> '<dependent type>' contains-errors lvalue .x
|     |   | |   |       `-ArraySubscriptExpr 0x134106b20 <col:26, col:33> '<dependent type>' contains-errors lvalue
|     |   | |   |         |-ImplicitCastExpr 0x134106b08 <col:26> '<dependent type>' contains-errors <LValueToRValue>
|     |   | |   |         | `-RecoveryExpr 0x134106ac8 <col:26> '<dependent type>' contains-errors lvalue
|     |   | |   |         `-IntegerLiteral 0x134106ae8 <col:32> 'int' 0
|     |   | |   `-IfStmt 0x134107170 <line:18:3, line:28:3> has_else
|     |   | |     |-RecoveryExpr 0x134106be0 <line:18:7, col:12> '_Bool' contains-errors
|     |   | |     |-CompoundStmt 0x134106fe0 <col:18, line:23:3>
|     |   | |     `-CompoundStmt 0x134107158 <col:10, line:28:3>
|     |   | |       `-WhileStmt 0x134107138 <line:24:7, line:27:7>
|     |   | |         |-UnaryOperator 0x134107010 <line:24:14, col:17> 'int' contains-errors postfix '--'
|     |   | |         | `-DeclRefExpr 0x134106ff0 <col:14> 'int' contains-errors lvalue Var 0x1341069a0 'len' 'int'
|     |   | |         `-CompoundStmt 0x134107128 <col:21, line:27:7>
|     |   | `-UnaryOperator 0x134107228 <line:30:6, col:11> '<dependent type>' contains-errors postfix '++' cannot overflow
|     |   |   `-RecoveryExpr 0x134107200 <col:6> '<dependent type>' contains-errors lvalue
|     |   |     `-DeclRefExpr 0x1341071e0 <col:6> 'const int *' lvalue ParmVar 0x1340ece70 'spans' 'const int *'
|     |   `-BinaryOperator 0x1341072d0 <line:31:11, col:25> 'int' '>'
|     |     |-UnaryOperator 0x134107280 <col:11, col:13> 'unsigned int' prefix '--'
|     |     | `-DeclRefExpr 0x134107260 <col:13> 'unsigned int' lvalue ParmVar 0x1340ecef0 'num_spans' 'unsigned int'
|     |     `-ImplicitCastExpr 0x1341072b8 <col:25> 'unsigned int' <IntegralCast>
|     |       `-IntegerLiteral 0x134107298 <col:25> 'int' 1
|     `-CompoundStmt 0x136009fb8 <line:32:12, line:57:5>
|       `-DoStmt 0x136009f98 <line:33:2, line:56:26>
|         |-CompoundStmt 0x136009ee8 <line:33:5, line:56:2>
|         | |-IfStmt 0x136009e68 <line:35:6, line:54:6>
|         | | |-RecoveryExpr 0x134107328 <line:35:10> '_Bool' contains-errors
|         | | `-CompoundStmt 0x136009e48 <col:13, line:54:6>
|         | |   |-DeclStmt 0x1360096d0 <line:36:3, col:21>
|         | |   | |-VarDecl 0x134107360 <col:3, col:12> col:7 used yy 'int' cinit
|         | |   | | `-ImplicitCastExpr 0x1341073e8 <col:12> 'int' <LValueToRValue>
|         | |   | |   `-DeclRefExpr 0x1341073c8 <col:12> 'int' lvalue ParmVar 0x1340ecd58 'y' 'int'
|         | |   | `-VarDecl 0x136009618 <col:3, col:20> col:15 used hh 'int' cinit
|         | |   |   `-ImplicitCastExpr 0x1360096a0 <col:20> 'int' <LValueToRValue>
|         | |   |     `-DeclRefExpr 0x136009680 <col:20> 'int' lvalue ParmVar 0x1340ecdd8 'h' 'int'
|         | |   `-DoStmt 0x136009e28 <line:37:3, line:53:16>
|         | |     |-CompoundStmt 0x136009dc8 <line:37:6, line:53:3>
|         | |     | |-DeclStmt 0x136009b48 <line:40:7, col:40>
|         | |     | | `-VarDecl 0x136009940 <col:7, col:39> col:11 used len 'int' cinit
|         | |     | |   `-BinaryOperator 0x136009b28 <col:17, col:39> '<dependent type>' contains-errors '-'
|         | |     | |     |-CXXDependentScopeMemberExpr 0x136009a20 <col:17, col:26> '<dependent type>' contains-errors lvalue .x
|         | |     | |     | `-ArraySubscriptExpr 0x136009a00 <col:17, col:24> '<dependent type>' contains-errors lvalue
|         | |     | |     |   |-ImplicitCastExpr 0x1360099e8 <col:17> '<dependent type>' contains-errors <LValueToRValue>
|         | |     | |     |   | `-RecoveryExpr 0x1360099a8 <col:17> '<dependent type>' contains-errors lvalue
|         | |     | |     |   `-IntegerLiteral 0x1360099c8 <col:23> 'int' 1
|         | |     | |     `-CXXDependentScopeMemberExpr 0x136009ae0 <col:30, col:39> '<dependent type>' contains-errors lvalue .x
|         | |     | |       `-ArraySubscriptExpr 0x136009ac0 <col:30, col:37> '<dependent type>' contains-errors lvalue
|         | |     | |         |-ImplicitCastExpr 0x136009aa8 <col:30> '<dependent type>' contains-errors <LValueToRValue>
|         | |     | |         | `-RecoveryExpr 0x136009a68 <col:30> '<dependent type>' contains-errors lvalue
|         | |     | |         `-IntegerLiteral 0x136009a88 <col:36> 'int' 0
|         | |     | |-IfStmt 0x136009d60 <line:41:7, line:51:7> has_else
|         | |     | | |-RecoveryExpr 0x136009b80 <line:41:11, col:16> '_Bool' contains-errors
|         | |     | | |-CompoundStmt 0x136009cb0 <col:22, line:46:7>
|         | |     | | `-CompoundStmt 0x136009d48 <col:14, line:51:7>
|         | |     | |   `-WhileStmt 0x136009d28 <line:47:4, line:50:4>
|         | |     | |     |-UnaryOperator 0x136009ce0 <line:47:11, col:14> 'int' contains-errors postfix '--'
|         | |     | |     | `-DeclRefExpr 0x136009cc0 <col:11> 'int' contains-errors lvalue Var 0x136009940 'len' 'int'
|         | |     | |     `-CompoundStmt 0x136009d18 <col:18, line:50:4>
|         | |     | `-UnaryOperator 0x136009db0 <line:52:7, col:9> 'int' postfix '++'
|         | |     |   `-DeclRefExpr 0x136009d90 <col:7> 'int' lvalue Var 0x134107360 'yy' 'int'
|         | |     `-UnaryOperator 0x136009e10 <line:53:12, col:14> 'int' prefix '--'
|         | |       `-DeclRefExpr 0x136009df0 <col:14> 'int' lvalue Var 0x136009618 'hh' 'int'
|         | `-UnaryOperator 0x136009ed0 <line:55:6, col:11> '<dependent type>' contains-errors postfix '++' cannot overflow
|         |   `-RecoveryExpr 0x136009ea8 <col:6> '<dependent type>' contains-errors lvalue
|         |     `-DeclRefExpr 0x136009e88 <col:6> 'const int *' lvalue ParmVar 0x1340ece70 'spans' 'const int *'
|         `-BinaryOperator 0x136009f78 <line:56:11, col:25> 'int' '>'
|           |-UnaryOperator 0x136009f28 <col:11, col:13> 'unsigned int' prefix '--'
|           | `-DeclRefExpr 0x136009f08 <col:13> 'unsigned int' lvalue ParmVar 0x1340ecef0 'num_spans' 'unsigned int'
|           `-ImplicitCastExpr 0x136009f60 <col:25> 'unsigned int' <IntegralCast>
|             `-IntegerLiteral 0x136009f40 <col:25> 'int' 1
`-FunctionDecl 0x134106cf8 <line:22:4> col:4 implicit used memcpy 'void *(void *, const void *, unsigned long)' extern
  |-ParmVarDecl 0x134106df8 <<invalid sloc>> <invalid sloc> 'void *'
  |-ParmVarDecl 0x134106e60 <<invalid sloc>> <invalid sloc> 'const void *'
  |-ParmVarDecl 0x134106ec8 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x134106da0 <<invalid sloc>> Implicit 882
