TranslationUnitDecl 0x14e827e08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x14e828cb8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x14e8283d0 '__int128'
|-TypedefDecl 0x14e828d28 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x14e8283f0 'unsigned __int128'
|-TypedefDecl 0x14e814430 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x14e814200 'struct __NSConstantString_tag'
|   `-Record 0x14e828d80 '__NSConstantString_tag'
|-TypedefDecl 0x14e814498 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x14e828590 '__SVInt8_t'
|-TypedefDecl 0x14e814500 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x14e8285b0 '__SVInt16_t'
|-TypedefDecl 0x14e814568 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x14e8285d0 '__SVInt32_t'
|-TypedefDecl 0x14e8145d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x14e8285f0 '__SVInt64_t'
|-TypedefDecl 0x14e814638 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x14e828610 '__SVUint8_t'
|-TypedefDecl 0x14e8146a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x14e828630 '__SVUint16_t'
|-TypedefDecl 0x14e814708 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x14e828650 '__SVUint32_t'
|-TypedefDecl 0x14e814770 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x14e828670 '__SVUint64_t'
|-TypedefDecl 0x14e8147d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x14e828690 '__SVFloat16_t'
|-TypedefDecl 0x14e814840 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x14e8286b0 '__SVFloat32_t'
|-TypedefDecl 0x14e8148a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x14e8286d0 '__SVFloat64_t'
|-TypedefDecl 0x14e814910 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x14e8286f0 '__SVBfloat16_t'
|-TypedefDecl 0x14e814978 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x14e828710 '__clang_svint8x2_t'
|-TypedefDecl 0x14e8149e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x14e828730 '__clang_svint16x2_t'
|-TypedefDecl 0x14e814a48 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x14e828750 '__clang_svint32x2_t'
|-TypedefDecl 0x14e814ab0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x14e828770 '__clang_svint64x2_t'
|-TypedefDecl 0x14e814b18 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x14e828790 '__clang_svuint8x2_t'
|-TypedefDecl 0x14e814b80 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x14e8287b0 '__clang_svuint16x2_t'
|-TypedefDecl 0x14e814be8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x14e8287d0 '__clang_svuint32x2_t'
|-TypedefDecl 0x14e814c50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x14e8287f0 '__clang_svuint64x2_t'
|-TypedefDecl 0x14e814cb8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x14e828810 '__clang_svfloat16x2_t'
|-TypedefDecl 0x14e814d20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x14e828830 '__clang_svfloat32x2_t'
|-TypedefDecl 0x14e814d88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x14e828850 '__clang_svfloat64x2_t'
|-TypedefDecl 0x14e814df0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x14e828870 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x14e814e58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x14e828890 '__clang_svint8x3_t'
|-TypedefDecl 0x14e814ec0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x14e8288b0 '__clang_svint16x3_t'
|-TypedefDecl 0x14e814f28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x14e8288d0 '__clang_svint32x3_t'
|-TypedefDecl 0x14e814f90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x14e8288f0 '__clang_svint64x3_t'
|-TypedefDecl 0x14e814ff8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x14e828910 '__clang_svuint8x3_t'
|-TypedefDecl 0x14e815060 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x14e828930 '__clang_svuint16x3_t'
|-TypedefDecl 0x14e8150c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x14e828950 '__clang_svuint32x3_t'
|-TypedefDecl 0x14e815130 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x14e828970 '__clang_svuint64x3_t'
|-TypedefDecl 0x14e815198 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x14e828990 '__clang_svfloat16x3_t'
|-TypedefDecl 0x14e893200 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x14e8289b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x14e893268 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x14e8289d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x14e8932d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x14e8289f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x14e893338 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x14e828a10 '__clang_svint8x4_t'
|-TypedefDecl 0x14e8933a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x14e828a30 '__clang_svint16x4_t'
|-TypedefDecl 0x14e893408 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x14e828a50 '__clang_svint32x4_t'
|-TypedefDecl 0x14e893470 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x14e828a70 '__clang_svint64x4_t'
|-TypedefDecl 0x14e8934d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x14e828a90 '__clang_svuint8x4_t'
|-TypedefDecl 0x14e893540 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x14e828ab0 '__clang_svuint16x4_t'
|-TypedefDecl 0x14e8935a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x14e828ad0 '__clang_svuint32x4_t'
|-TypedefDecl 0x14e893610 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x14e828af0 '__clang_svuint64x4_t'
|-TypedefDecl 0x14e893678 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x14e828b10 '__clang_svfloat16x4_t'
|-TypedefDecl 0x14e8936e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x14e828b30 '__clang_svfloat32x4_t'
|-TypedefDecl 0x14e893748 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x14e828b50 '__clang_svfloat64x4_t'
|-TypedefDecl 0x14e8937b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x14e828b70 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x14e893818 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x14e828b90 '__SVBool_t'
|-TypedefDecl 0x14e893880 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x14e828bb0 '__clang_svboolx2_t'
|-TypedefDecl 0x14e8938e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x14e828bd0 '__clang_svboolx4_t'
|-TypedefDecl 0x14e893950 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x14e828bf0 '__SVCount_t'
|-TypedefDecl 0x14e8939f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x14e8939b0 'char *'
|   `-BuiltinType 0x14e827eb0 'char'
|-TypedefDecl 0x14e893a68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x14e8939b0 'char *'
|   `-BuiltinType 0x14e827eb0 'char'
|-FunctionDecl 0x14e893cc8 <dataset_diviso_filec/func6694_vuln.c:1:1, line:67:1> line:1:12 ldb_dn_escape_internal 'int (char *, const char *, int)' static
| |-ParmVarDecl 0x14e893ad8 <col:35, col:41> col:41 used dst 'char *'
| |-ParmVarDecl 0x14e893b58 <col:46, col:58> col:58 used src 'const char *'
| |-ParmVarDecl 0x14e893bd8 <col:63, col:67> col:67 used len 'int'
| `-CompoundStmt 0x158809f98 <line:2:1, line:67:1>
|   |-DeclStmt 0x14e893ee8 <line:3:2, col:19>
|   | |-VarDecl 0x14e893de8 <col:2, col:14> col:14 used p 'const char *'
|   | `-VarDecl 0x14e893e68 <col:2, col:18> col:18 used s 'const char *'
|   |-DeclStmt 0x14e893f80 <line:4:2, col:9>
|   | `-VarDecl 0x14e893f18 <col:2, col:8> col:8 used d 'char *'
|   |-UnaryExprOrTypeTraitExpr 0x14e894008 <line:5:2, col:9> 'unsigned long' contains-errors sizeof
|   | `-RecoveryExpr 0x14e893fe8 <col:9> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x14e8940c0 <line:7:2, col:10> 'const char *' '='
|   | |-DeclRefExpr 0x14e894028 <col:2> 'const char *' lvalue Var 0x14e893de8 'p' 'const char *'
|   | `-BinaryOperator 0x14e8940a0 <col:6, col:10> 'const char *' '='
|   |   |-DeclRefExpr 0x14e894048 <col:6> 'const char *' lvalue Var 0x14e893e68 's' 'const char *'
|   |   `-ImplicitCastExpr 0x14e894088 <col:10> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x14e894068 <col:10> 'const char *' lvalue ParmVar 0x14e893b58 'src' 'const char *'
|   |-BinaryOperator 0x14e894138 <line:8:2, col:6> 'char *' '='
|   | |-DeclRefExpr 0x14e8940e0 <col:2> 'char *' lvalue Var 0x14e893f18 'd' 'char *'
|   | `-ImplicitCastExpr 0x14e894120 <col:6> 'char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x14e894100 <col:6> 'char *' lvalue ParmVar 0x14e893ad8 'dst' 'char *'
|   |-WhileStmt 0x158809ba8 <line:10:2, line:59:2>
|   | |-BinaryOperator 0x14f01e850 <line:10:9, col:19> 'int' '<'
|   | | |-BinaryOperator 0x14e8941c8 <col:9, col:13> 'long' '-'
|   | | | |-ImplicitCastExpr 0x14e894198 <col:9> 'const char *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x14e894158 <col:9> 'const char *' lvalue Var 0x14e893de8 'p' 'const char *'
|   | | | `-ImplicitCastExpr 0x14e8941b0 <col:13> 'const char *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x14e894178 <col:13> 'const char *' lvalue ParmVar 0x14e893b58 'src' 'const char *'
|   | | `-ImplicitCastExpr 0x14f01e838 <col:19> 'long' <IntegralCast>
|   | |   `-ImplicitCastExpr 0x14f01e820 <col:19> 'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x14f01e800 <col:19> 'int' lvalue ParmVar 0x14e893bd8 'len' 'int'
|   | `-CompoundStmt 0x158809b68 <col:24, line:59:2>
|   |   |-CompoundAssignOperator 0x14f01f060 <line:11:3, col:24> 'const char *' '+=' ComputeLHSTy='const char *' ComputeResultTy='const char *'
|   |   | |-DeclRefExpr 0x14f01e870 <col:3> 'const char *' lvalue Var 0x14e893de8 'p' 'const char *'
|   |   | `-CallExpr 0x14f01efe8 <col:8, col:24> 'unsigned long'
|   |   |   |-ImplicitCastExpr 0x14f01efd0 <col:8> 'unsigned long (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x14f01eed0 <col:8> 'unsigned long (const char *, const char *)' Function 0x14f01ecf0 'strcspn' 'unsigned long (const char *, const char *)'
|   |   |   |-ImplicitCastExpr 0x14f01f018 <col:16> 'const char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x14f01eef0 <col:16> 'const char *' lvalue Var 0x14e893de8 'p' 'const char *'
|   |   |   `-ImplicitCastExpr 0x14f01f048 <col:19> 'const char *' <NoOp>
|   |   |     `-ImplicitCastExpr 0x14f01f030 <col:19> 'char *' <ArrayToPointerDecay>
|   |   |       `-StringLiteral 0x14f01ef50 <col:19> 'char[4]' lvalue "STR"
|   |   |-IfStmt 0x14f01f198 <line:13:3, line:14:4>
|   |   | |-BinaryOperator 0x14f01f170 <line:13:7, col:18> 'int' '=='
|   |   | | |-BinaryOperator 0x14f01f100 <col:7, col:11> 'long' '-'
|   |   | | | |-ImplicitCastExpr 0x14f01f0d0 <col:7> 'const char *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x14f01f090 <col:7> 'const char *' lvalue Var 0x14e893de8 'p' 'const char *'
|   |   | | | `-ImplicitCastExpr 0x14f01f0e8 <col:11> 'const char *' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x14f01f0b0 <col:11> 'const char *' lvalue ParmVar 0x14e893b58 'src' 'const char *'
|   |   | | `-ImplicitCastExpr 0x14f01f158 <col:18> 'long' <IntegralCast>
|   |   | |   `-ImplicitCastExpr 0x14f01f140 <col:18> 'int' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x14f01f120 <col:18> 'int' lvalue ParmVar 0x14e893bd8 'len' 'int'
|   |   | `-BreakStmt 0x14f01f190 <line:14:4>
|   |   |-CallExpr 0x14f01f5f8 <line:17:3, col:21> 'void *'
|   |   | |-ImplicitCastExpr 0x14f01f5e0 <col:3> 'void *(*)(void *, const void *, unsigned long)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x14f01f488 <col:3> 'void *(void *, const void *, unsigned long)' Function 0x14f01f238 'memcpy' 'void *(void *, const void *, unsigned long)'
|   |   | |-ImplicitCastExpr 0x14f01f648 <col:10> 'void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x14f01f630 <col:10> 'char *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x14f01f4a8 <col:10> 'char *' lvalue Var 0x14e893f18 'd' 'char *'
|   |   | |-ImplicitCastExpr 0x14f01f678 <col:13> 'const void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x14f01f660 <col:13> 'const char *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x14f01f4c8 <col:13> 'const char *' lvalue Var 0x14e893e68 's' 'const char *'
|   |   | `-ImplicitCastExpr 0x14f01f690 <col:16, col:20> 'unsigned long' <IntegralCast>
|   |   |   `-BinaryOperator 0x14f01f558 <col:16, col:20> 'long' '-'
|   |   |     |-ImplicitCastExpr 0x14f01f528 <col:16> 'const char *' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x14f01f4e8 <col:16> 'const char *' lvalue Var 0x14e893de8 'p' 'const char *'
|   |   |     `-ImplicitCastExpr 0x14f01f540 <col:20> 'const char *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x14f01f508 <col:20> 'const char *' lvalue Var 0x14e893e68 's' 'const char *'
|   |   |-CompoundAssignOperator 0x14f01f778 <line:18:3, col:14> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
|   |   | |-DeclRefExpr 0x14f01f6a8 <col:3> 'char *' lvalue Var 0x14e893f18 'd' 'char *'
|   |   | `-ParenExpr 0x14f01f758 <col:8, col:14> 'long'
|   |   |   `-BinaryOperator 0x14f01f738 <col:9, col:13> 'long' '-'
|   |   |     |-ImplicitCastExpr 0x14f01f708 <col:9> 'const char *' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x14f01f6c8 <col:9> 'const char *' lvalue Var 0x14e893de8 'p' 'const char *'
|   |   |     `-ImplicitCastExpr 0x14f01f720 <col:13> 'const char *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x14f01f6e8 <col:13> 'const char *' lvalue Var 0x14e893e68 's' 'const char *'
|   |   |-SwitchStmt 0x14f030230 <line:20:3, line:57:3>
|   |   | |-ImplicitCastExpr 0x14f030218 <line:20:11, col:12> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x14f030200 <col:11, col:12> 'char' <LValueToRValue>
|   |   | |   `-UnaryOperator 0x14f01f7e0 <col:11, col:12> 'const char' lvalue prefix '*' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x14f01f7c8 <col:12> 'const char *' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x14f01f7a8 <col:12> 'const char *' lvalue Var 0x14e893de8 'p' 'const char *'
|   |   | `-CompoundStmt 0x158809ab0 <col:15, line:57:3>
|   |   |   |-CaseStmt 0x14f030288 <line:21:3, line:29:4>
|   |   |   | |-ConstantExpr 0x14f030270 <line:21:8> 'int'
|   |   |   | | `-CharacterLiteral 0x14f030258 <col:8> 'int' 32
|   |   |   | `-IfStmt 0x14f030768 <line:22:4, line:29:4> has_else
|   |   |   |   |-BinaryOperator 0x14f0304c0 <line:22:8, col:35> 'int' '||'
|   |   |   |   | |-BinaryOperator 0x14f030320 <col:8, col:13> 'int' '=='
|   |   |   |   | | |-ImplicitCastExpr 0x14f0302f0 <col:8> 'const char *' <LValueToRValue>
|   |   |   |   | | | `-DeclRefExpr 0x14f0302b0 <col:8> 'const char *' lvalue Var 0x14e893de8 'p' 'const char *'
|   |   |   |   | | `-ImplicitCastExpr 0x14f030308 <col:13> 'const char *' <LValueToRValue>
|   |   |   |   | |   `-DeclRefExpr 0x14f0302d0 <col:13> 'const char *' lvalue ParmVar 0x14e893b58 'src' 'const char *'
|   |   |   |   | `-BinaryOperator 0x14f0304a0 <col:20, col:35> 'int' '=='
|   |   |   |   |   |-ParenExpr 0x14f0303d0 <col:20, col:26> 'long'
|   |   |   |   |   | `-BinaryOperator 0x14f0303b0 <col:21, col:23> 'long' '-'
|   |   |   |   |   |   |-ImplicitCastExpr 0x14f030380 <col:21> 'const char *' <LValueToRValue>
|   |   |   |   |   |   | `-DeclRefExpr 0x14f030340 <col:21> 'const char *' lvalue Var 0x14e893de8 'p' 'const char *'
|   |   |   |   |   |   `-ImplicitCastExpr 0x14f030398 <col:23> 'const char *' <LValueToRValue>
|   |   |   |   |   |     `-DeclRefExpr 0x14f030360 <col:23> 'const char *' lvalue ParmVar 0x14e893b58 'src' 'const char *'
|   |   |   |   |   `-ImplicitCastExpr 0x14f030488 <col:29, col:35> 'long' <IntegralCast>
|   |   |   |   |     `-ParenExpr 0x14f030468 <col:29, col:35> 'int'
|   |   |   |   |       `-BinaryOperator 0x14f030448 <col:30, col:34> 'int' '-'
|   |   |   |   |         |-ImplicitCastExpr 0x14f030430 <col:30> 'int' <LValueToRValue>
|   |   |   |   |         | `-DeclRefExpr 0x14f0303f0 <col:30> 'int' lvalue ParmVar 0x14e893bd8 'len' 'int'
|   |   |   |   |         `-IntegerLiteral 0x14f030410 <col:34> 'int' 1
|   |   |   |   |-CompoundStmt 0x14f030658 <col:38, line:26:4>
|   |   |   |   | |-BinaryOperator 0x14f030560 <line:24:5, col:12> 'char' '='
|   |   |   |   | | |-UnaryOperator 0x14f030518 <col:5, col:7> 'char' lvalue prefix '*' cannot overflow
|   |   |   |   | | | `-UnaryOperator 0x14f030500 <col:6, col:7> 'char *' postfix '++'
|   |   |   |   | | |   `-DeclRefExpr 0x14f0304e0 <col:6> 'char *' lvalue Var 0x14e893f18 'd' 'char *'
|   |   |   |   | | `-ImplicitCastExpr 0x14f030548 <col:12> 'char' <IntegralCast>
|   |   |   |   | |   `-CharacterLiteral 0x14f030530 <col:12> 'int' 92
|   |   |   |   | `-BinaryOperator 0x14f030638 <line:25:5, col:14> 'char' '='
|   |   |   |   |   |-UnaryOperator 0x14f0305b8 <col:5, col:7> 'char' lvalue prefix '*' cannot overflow
|   |   |   |   |   | `-UnaryOperator 0x14f0305a0 <col:6, col:7> 'char *' postfix '++'
|   |   |   |   |   |   `-DeclRefExpr 0x14f030580 <col:6> 'char *' lvalue Var 0x14e893f18 'd' 'char *'
|   |   |   |   |   `-ImplicitCastExpr 0x14f030620 <col:12, col:14> 'char' <LValueToRValue>
|   |   |   |   |     `-UnaryOperator 0x14f030608 <col:12, col:14> 'const char' lvalue prefix '*' cannot overflow
|   |   |   |   |       `-UnaryOperator 0x14f0305f0 <col:13, col:14> 'const char *' postfix '++'
|   |   |   |   |         `-DeclRefExpr 0x14f0305d0 <col:13> 'const char *' lvalue Var 0x14e893de8 'p' 'const char *'
|   |   |   |   `-CompoundStmt 0x14f030750 <line:26:11, line:29:4>
|   |   |   |     `-BinaryOperator 0x14f030730 <line:28:5, col:14> 'char' '='
|   |   |   |       |-UnaryOperator 0x14f0306b0 <col:5, col:7> 'char' lvalue prefix '*' cannot overflow
|   |   |   |       | `-UnaryOperator 0x14f030698 <col:6, col:7> 'char *' postfix '++'
|   |   |   |       |   `-DeclRefExpr 0x14f030678 <col:6> 'char *' lvalue Var 0x14e893f18 'd' 'char *'
|   |   |   |       `-ImplicitCastExpr 0x14f030718 <col:12, col:14> 'char' <LValueToRValue>
|   |   |   |         `-UnaryOperator 0x14f030700 <col:12, col:14> 'const char' lvalue prefix '*' cannot overflow
|   |   |   |           `-UnaryOperator 0x14f0306e8 <col:13, col:14> 'const char *' postfix '++'
|   |   |   |             `-DeclRefExpr 0x14f0306c8 <col:13> 'const char *' lvalue Var 0x14e893de8 'p' 'const char *'
|   |   |   |-BreakStmt 0x14f030798 <line:30:4>
|   |   |   |-CaseStmt 0x14f0307d0 <line:32:3, line:42:11>
|   |   |   | |-ConstantExpr 0x14f0307b8 <line:32:8> 'int'
|   |   |   | | `-CharacterLiteral 0x14f0307a0 <col:8> 'int' 35
|   |   |   | `-CaseStmt 0x14f030828 <line:34:3, line:42:11>
|   |   |   |   |-ConstantExpr 0x14f030810 <line:34:8> 'int'
|   |   |   |   | `-CharacterLiteral 0x14f0307f8 <col:8> 'int' 44
|   |   |   |   `-CaseStmt 0x14f030880 <line:35:3, line:42:11>
|   |   |   |     |-ConstantExpr 0x14f030868 <line:35:8> 'int'
|   |   |   |     | `-CharacterLiteral 0x14f030850 <col:8> 'int' 43
|   |   |   |     `-CaseStmt 0x14f0308d8 <line:36:3, line:42:11>
|   |   |   |       |-ConstantExpr 0x14f0308c0 <line:36:8> 'int'
|   |   |   |       | `-CharacterLiteral 0x14f0308a8 <col:8> 'int' 34
|   |   |   |       `-CaseStmt 0x14f030930 <line:37:3, line:42:11>
|   |   |   |         |-ConstantExpr 0x14f030918 <line:37:8> 'int'
|   |   |   |         | `-CharacterLiteral 0x14f030900 <col:8> 'int' 92
|   |   |   |         `-CaseStmt 0x14f030988 <line:38:3, line:42:11>
|   |   |   |           |-ConstantExpr 0x14f030970 <line:38:8> 'int'
|   |   |   |           | `-CharacterLiteral 0x14f030958 <col:8> 'int' 60
|   |   |   |           `-CaseStmt 0x14f0309e0 <line:39:3, line:42:11>
|   |   |   |             |-ConstantExpr 0x14f0309c8 <line:39:8> 'int'
|   |   |   |             | `-CharacterLiteral 0x14f0309b0 <col:8> 'int' 62
|   |   |   |             `-CaseStmt 0x14f030a38 <line:40:3, line:42:11>
|   |   |   |               |-ConstantExpr 0x14f030a20 <line:40:8> 'int'
|   |   |   |               | `-CharacterLiteral 0x14f030a08 <col:8> 'int' 63
|   |   |   |               `-BinaryOperator 0x14f030ae0 <line:42:4, col:11> 'char' '='
|   |   |   |                 |-UnaryOperator 0x14f030a98 <col:4, col:6> 'char' lvalue prefix '*' cannot overflow
|   |   |   |                 | `-UnaryOperator 0x14f030a80 <col:5, col:6> 'char *' postfix '++'
|   |   |   |                 |   `-DeclRefExpr 0x14f030a60 <col:5> 'char *' lvalue Var 0x14e893f18 'd' 'char *'
|   |   |   |                 `-ImplicitCastExpr 0x14f030ac8 <col:11> 'char' <IntegralCast>
|   |   |   |                   `-CharacterLiteral 0x14f030ab0 <col:11> 'int' 92
|   |   |   |-BinaryOperator 0x14f030bb8 <line:43:4, col:13> 'char' '='
|   |   |   | |-UnaryOperator 0x14f030b38 <col:4, col:6> 'char' lvalue prefix '*' cannot overflow
|   |   |   | | `-UnaryOperator 0x14f030b20 <col:5, col:6> 'char *' postfix '++'
|   |   |   | |   `-DeclRefExpr 0x14f030b00 <col:5> 'char *' lvalue Var 0x14e893f18 'd' 'char *'
|   |   |   | `-ImplicitCastExpr 0x14f030ba0 <col:11, col:13> 'char' <LValueToRValue>
|   |   |   |   `-UnaryOperator 0x14f030b88 <col:11, col:13> 'const char' lvalue prefix '*' cannot overflow
|   |   |   |     `-UnaryOperator 0x14f030b70 <col:12, col:13> 'const char *' postfix '++'
|   |   |   |       `-DeclRefExpr 0x14f030b50 <col:12> 'const char *' lvalue Var 0x14e893de8 'p' 'const char *'
|   |   |   |-BreakStmt 0x14f030bd8 <line:44:4>
|   |   |   `-DefaultStmt 0x158809a90 <line:46:3, line:56:3>
|   |   |     `-CompoundStmt 0x158809a40 <line:46:12, line:56:3>
|   |   |       |-DeclStmt 0x14f030c60 <line:48:4, col:19>
|   |   |       | `-VarDecl 0x14f030bf8 <col:4, col:18> col:18 used v 'unsigned char'
|   |   |       |-DeclStmt 0x14f030d48 <line:49:4, col:32>
|   |   |       | `-VarDecl 0x14f030c90 <col:4, col:27> col:16 used hexbytes 'const char *' cinit
|   |   |       |   `-ImplicitCastExpr 0x14f030d30 <col:27> 'const char *' <NoOp>
|   |   |       |     `-ImplicitCastExpr 0x14f030d18 <col:27> 'char *' <ArrayToPointerDecay>
|   |   |       |       `-StringLiteral 0x14f030cf8 <col:27> 'char[4]' lvalue "STR"
|   |   |       |-BinaryOperator 0x14f030e58 <line:50:4, col:32> 'unsigned char' '='
|   |   |       | |-DeclRefExpr 0x14f030d60 <col:4> 'unsigned char' lvalue Var 0x14f030bf8 'v' 'unsigned char'
|   |   |       | `-ImplicitCastExpr 0x14f030e40 <col:8, col:32> 'unsigned char' <LValueToRValue>
|   |   |       |   `-UnaryOperator 0x14f030e28 <col:8, col:32> 'const unsigned char' lvalue prefix '*' cannot overflow
|   |   |       |     `-CStyleCastExpr 0x14f030e00 <col:9, col:32> 'const unsigned char *' <BitCast>
|   |   |       |       `-ImplicitCastExpr 0x14f030de8 <col:32> 'const char *' <LValueToRValue> part_of_explicit_cast
|   |   |       |         `-DeclRefExpr 0x14f030d80 <col:32> 'const char *' lvalue Var 0x14e893de8 'p' 'const char *'
|   |   |       |-BinaryOperator 0x14f030ef8 <line:51:4, col:11> 'char' '='
|   |   |       | |-UnaryOperator 0x14f030eb0 <col:4, col:6> 'char' lvalue prefix '*' cannot overflow
|   |   |       | | `-UnaryOperator 0x14f030e98 <col:5, col:6> 'char *' postfix '++'
|   |   |       | |   `-DeclRefExpr 0x14f030e78 <col:5> 'char *' lvalue Var 0x14e893f18 'd' 'char *'
|   |   |       | `-ImplicitCastExpr 0x14f030ee0 <col:11> 'char' <IntegralCast>
|   |   |       |   `-CharacterLiteral 0x14f030ec8 <col:11> 'int' 92
|   |   |       |-BinaryOperator 0x14f031068 <line:52:4, col:24> 'char' '='
|   |   |       | |-UnaryOperator 0x14f030f50 <col:4, col:6> 'char' lvalue prefix '*' cannot overflow
|   |   |       | | `-UnaryOperator 0x14f030f38 <col:5, col:6> 'char *' postfix '++'
|   |   |       | |   `-DeclRefExpr 0x14f030f18 <col:5> 'char *' lvalue Var 0x14e893f18 'd' 'char *'
|   |   |       | `-ImplicitCastExpr 0x14f031050 <col:11, col:24> 'char' <LValueToRValue>
|   |   |       |   `-ArraySubscriptExpr 0x14f031030 <col:11, col:24> 'const char' lvalue
|   |   |       |     |-ImplicitCastExpr 0x14f031018 <col:11> 'const char *' <LValueToRValue>
|   |   |       |     | `-DeclRefExpr 0x14f030f68 <col:11> 'const char *' lvalue Var 0x14f030c90 'hexbytes' 'const char *'
|   |   |       |     `-BinaryOperator 0x14f030ff8 <col:20, col:23> 'int' '>>'
|   |   |       |       |-ImplicitCastExpr 0x14f030fe0 <col:20> 'int' <IntegralCast>
|   |   |       |       | `-ImplicitCastExpr 0x14f030fc8 <col:20> 'unsigned char' <LValueToRValue>
|   |   |       |       |   `-DeclRefExpr 0x14f030f88 <col:20> 'unsigned char' lvalue Var 0x14f030bf8 'v' 'unsigned char'
|   |   |       |       `-IntegerLiteral 0x14f030fa8 <col:23> 'int' 4
|   |   |       |-BinaryOperator 0x14f0311d8 <line:53:4, col:25> 'char' '='
|   |   |       | |-UnaryOperator 0x14f0310c0 <col:4, col:6> 'char' lvalue prefix '*' cannot overflow
|   |   |       | | `-UnaryOperator 0x14f0310a8 <col:5, col:6> 'char *' postfix '++'
|   |   |       | |   `-DeclRefExpr 0x14f031088 <col:5> 'char *' lvalue Var 0x14e893f18 'd' 'char *'
|   |   |       | `-ImplicitCastExpr 0x14f0311c0 <col:11, col:25> 'char' <LValueToRValue>
|   |   |       |   `-ArraySubscriptExpr 0x14f0311a0 <col:11, col:25> 'const char' lvalue
|   |   |       |     |-ImplicitCastExpr 0x14f031188 <col:11> 'const char *' <LValueToRValue>
|   |   |       |     | `-DeclRefExpr 0x14f0310d8 <col:11> 'const char *' lvalue Var 0x14f030c90 'hexbytes' 'const char *'
|   |   |       |     `-BinaryOperator 0x14f031168 <col:20, col:22> 'int' '&'
|   |   |       |       |-ImplicitCastExpr 0x14f031150 <col:20> 'int' <IntegralCast>
|   |   |       |       | `-ImplicitCastExpr 0x14f031138 <col:20> 'unsigned char' <LValueToRValue>
|   |   |       |       |   `-DeclRefExpr 0x14f0310f8 <col:20> 'unsigned char' lvalue Var 0x14f030bf8 'v' 'unsigned char'
|   |   |       |       `-IntegerLiteral 0x14f031118 <col:22> 'int' 15
|   |   |       |-UnaryOperator 0x158809a20 <line:54:4, col:5> 'const char *' postfix '++'
|   |   |       | `-DeclRefExpr 0x158809a00 <col:4> 'const char *' lvalue Var 0x14e893de8 'p' 'const char *'
|   |   |       `-BreakStmt 0x158809a38 <line:55:4>
|   |   `-BinaryOperator 0x158809b48 <line:58:3, col:7> 'const char *' '='
|   |     |-DeclRefExpr 0x158809af0 <col:3> 'const char *' lvalue Var 0x14e893e68 's' 'const char *'
|   |     `-ImplicitCastExpr 0x158809b30 <col:7> 'const char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x158809b10 <col:7> 'const char *' lvalue Var 0x14e893de8 'p' 'const char *'
|   `-CallExpr 0x158809e78 <line:63:2, col:20> '<dependent type>' contains-errors
|     |-DeclRefExpr 0x158809ce8 <col:2> 'void *(void *, const void *, unsigned long)' Function 0x14f01f238 'memcpy' 'void *(void *, const void *, unsigned long)'
|     |-DeclRefExpr 0x158809d08 <col:9> 'char *' lvalue Var 0x14e893f18 'd' 'char *'
|     |-DeclRefExpr 0x158809d28 <col:12> 'const char *' lvalue Var 0x14e893e68 's' 'const char *'
|     `-BinaryOperator 0x158809e28 <col:15, col:19> '<dependent type>' contains-errors '+'
|       |-RecoveryExpr 0x158809e08 <col:15> '<dependent type>' contains-errors lvalue
|       `-IntegerLiteral 0x158809d60 <col:19> 'int' 1
|-FunctionDecl 0x14f01ecf0 <line:11:8> col:8 implicit used strcspn 'unsigned long (const char *, const char *)' extern
| |-ParmVarDecl 0x14f01edf0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x14f01ee58 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x14f01ed98 <<invalid sloc>> Implicit 894
`-FunctionDecl 0x14f01f238 <line:17:3> col:3 implicit used memcpy 'void *(void *, const void *, unsigned long)' extern
  |-ParmVarDecl 0x14f01f338 <<invalid sloc>> <invalid sloc> 'void *'
  |-ParmVarDecl 0x14f01f3a0 <<invalid sloc>> <invalid sloc> 'const void *'
  |-ParmVarDecl 0x14f01f408 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x14f01f2e0 <<invalid sloc>> Implicit 882
