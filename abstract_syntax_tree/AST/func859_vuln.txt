TranslationUnitDecl 0x14e855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x14e8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x14e855bd0 '__int128'
|-TypedefDecl 0x14e856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x14e855bf0 'unsigned __int128'
|-TypedefDecl 0x14e8e3c30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x14e8e3a00 'struct __NSConstantString_tag'
|   `-Record 0x14e856580 '__NSConstantString_tag'
|-TypedefDecl 0x14e8e3c98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x14e855d90 '__SVInt8_t'
|-TypedefDecl 0x14e8e3d00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x14e855db0 '__SVInt16_t'
|-TypedefDecl 0x14e8e3d68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x14e855dd0 '__SVInt32_t'
|-TypedefDecl 0x14e8e3dd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x14e855df0 '__SVInt64_t'
|-TypedefDecl 0x14e8e3e38 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x14e855e10 '__SVUint8_t'
|-TypedefDecl 0x14e8e3ea0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x14e855e30 '__SVUint16_t'
|-TypedefDecl 0x14e8e3f08 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x14e855e50 '__SVUint32_t'
|-TypedefDecl 0x14e8e3f70 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x14e855e70 '__SVUint64_t'
|-TypedefDecl 0x14e8e3fd8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x14e855e90 '__SVFloat16_t'
|-TypedefDecl 0x14e8e4040 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x14e855eb0 '__SVFloat32_t'
|-TypedefDecl 0x14e8e40a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x14e855ed0 '__SVFloat64_t'
|-TypedefDecl 0x14e8e4110 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x14e855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x14e8e4178 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x14e855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x14e8e41e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x14e855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x14e8e4248 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x14e855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x14e8e42b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x14e855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x14e8e4318 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x14e855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x14e8e4380 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x14e855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x14e8e43e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x14e855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x14e8e4450 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x14e855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x14e8e44b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x14e856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x14e8e4520 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x14e856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x14e8e4588 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x14e856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x14e8e45f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x14e856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x14e8e4658 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x14e856090 '__clang_svint8x3_t'
|-TypedefDecl 0x14e8e46c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x14e8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x14e8e4728 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x14e8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x14e8e4790 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x14e8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x14e8e47f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x14e856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x14e8e4860 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x14e856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x14e8e48c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x14e856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x14e8e4930 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x14e856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x14e8e4998 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x14e856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x14e8e5200 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x14e8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x14e8e5268 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x14e8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x14e8e52d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x14e8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x14e8e5338 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x14e856210 '__clang_svint8x4_t'
|-TypedefDecl 0x14e8e53a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x14e856230 '__clang_svint16x4_t'
|-TypedefDecl 0x14e8e5408 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x14e856250 '__clang_svint32x4_t'
|-TypedefDecl 0x14e8e5470 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x14e856270 '__clang_svint64x4_t'
|-TypedefDecl 0x14e8e54d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x14e856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x14e8e5540 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x14e8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x14e8e55a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x14e8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x14e8e5610 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x14e8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x14e8e5678 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x14e856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x14e8e56e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x14e856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x14e8e5748 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x14e856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x14e8e57b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x14e856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x14e8e5818 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x14e856390 '__SVBool_t'
|-TypedefDecl 0x14e8e5880 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x14e8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x14e8e58e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x14e8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x14e8e5950 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x14e8563f0 '__SVCount_t'
|-TypedefDecl 0x14e8e59f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x14e8e59b0 'char *'
|   `-BuiltinType 0x14e8556b0 'char'
|-TypedefDecl 0x14e8e5a68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x14e8e59b0 'char *'
|   `-BuiltinType 0x14e8556b0 'char'
|-FunctionDecl 0x14e8e5e08 <dataset_diviso_filec/func859_vuln.c:1:1, line:72:1> line:1:1 referenced invalid convert 'int (int, int, const char *, int, int)'
| |-ParmVarDecl 0x14e8e5af0 <line:2:5, col:13> col:13 referenced invalid imOut 'int'
| |-ParmVarDecl 0x14e8e5b70 <col:20, col:28> col:28 invalid imIn 'int'
| |-ParmVarDecl 0x14e8e5bf0 <col:34, col:46> col:46 used mode 'const char *'
| |-ParmVarDecl 0x14e8e5c70 <col:52, col:67> col:67 invalid palette 'int'
| |-ParmVarDecl 0x14e8e5cf0 <col:76, col:80> col:80 used dither 'int'
| `-CompoundStmt 0x14e9020a0 <col:88, line:72:1>
|   |-DeclStmt 0x14e8e5f58 <line:5:5, col:10>
|   | `-VarDecl 0x14e8e5ef0 <col:5, col:9> col:9 used y 'int'
|   |-IfStmt 0x14e8e5fe8 <line:7:5, line:9:5>
|   | |-UnaryOperator 0x14e8e5fa8 <line:7:9, col:10> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x14e8e5f90 <col:10> '<dependent type>' contains-errors <LValueToRValue>
|   | |   `-RecoveryExpr 0x14e8e5f70 <col:10> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x14e8e5fd8 <col:16, line:9:5>
|   |-IfStmt 0x14e8ffc40 <line:11:5, line:22:5> has_else
|   | |-UnaryOperator 0x14e8e6040 <line:11:9, col:10> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x14e8e6028 <col:10> 'const char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x14e8e6008 <col:10> 'const char *' lvalue ParmVar 0x14e8e5bf0 'mode' 'const char *'
|   | |-CompoundStmt 0x14e8ff268 <col:16, line:17:5>
|   | | |-IfStmt 0x14e8e6118 <line:13:9, line:15:9>
|   | | | |-UnaryOperator 0x14e8e60d8 <line:13:13, col:20> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | | | | `-ImplicitCastExpr 0x14e8e60c0 <col:14, col:20> '<dependent type>' contains-errors <LValueToRValue>
|   | | | |   `-CXXDependentScopeMemberExpr 0x14e8e6078 <col:14, col:20> '<dependent type>' contains-errors lvalue ->palette
|   | | | |     `-RecoveryExpr 0x14e8e6058 <col:14> '<dependent type>' contains-errors lvalue
|   | | | `-CompoundStmt 0x14e8e6108 <col:29, line:15:9>
|   | | `-BinaryOperator 0x14e8ff248 <line:16:9, col:31> 'const char *' contains-errors '='
|   | |   |-DeclRefExpr 0x14e8e6138 <col:9> 'const char *' lvalue ParmVar 0x14e8e5bf0 'mode' 'const char *'
|   | |   `-CXXDependentScopeMemberExpr 0x14e8ff200 <col:16, col:31> '<dependent type>' contains-errors lvalue ->mode
|   | |     `-CXXDependentScopeMemberExpr 0x14e8e6178 <col:16, col:22> '<dependent type>' contains-errors lvalue ->palette
|   | |       `-RecoveryExpr 0x14e8e6158 <col:16> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x14e8ffc28 <line:17:12, line:22:5>
|   |   `-IfStmt 0x14e8ffc08 <line:19:9, line:21:9>
|   |     |-UnaryOperator 0x14e8ff9d8 <line:19:13, col:37> '<dependent type>' contains-errors prefix '!' cannot overflow
|   |     | `-CallExpr 0x14e8ff9a8 <col:14, col:37> '<dependent type>' contains-errors
|   |     |   |-DeclRefExpr 0x14e8ff8d0 <col:14> 'int (const char *, const char *)' Function 0x14e8ff6f0 'strcmp' 'int (const char *, const char *)'
|   |     |   |-CXXDependentScopeMemberExpr 0x14e8ff910 <col:21, col:27> '<dependent type>' contains-errors lvalue ->mode
|   |     |   | `-RecoveryExpr 0x14e8ff8f0 <col:21> '<dependent type>' contains-errors lvalue
|   |     |   `-DeclRefExpr 0x14e8ff958 <col:33> 'const char *' lvalue ParmVar 0x14e8e5bf0 'mode' 'const char *'
|   |     `-CompoundStmt 0x14e8ffbf0 <col:40, line:21:9>
|   |       `-ReturnStmt 0x14e8ffbe0 <line:20:13, col:44>
|   |         `-CallExpr 0x14e8ffbb0 <col:20, col:44> '<dependent type>' contains-errors
|   |           |-DeclRefExpr 0x14e8ffb50 <col:20> 'int ()' Function 0x14e8ffa98 'ImagingCopy2' 'int ()'
|   |           |-RecoveryExpr 0x14e8ffb70 <col:33> '<dependent type>' contains-errors lvalue
|   |           `-RecoveryExpr 0x14e8ffb90 <col:40> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x14e8fffc0 <line:26:5, line:28:5>
|   | |-BinaryOperator 0x14e8ffde0 <line:26:9, col:38> 'int' contains-errors '=='
|   | | |-CallExpr 0x14e8ffd90 <col:9, col:33> '<dependent type>' contains-errors
|   | | | |-DeclRefExpr 0x14e8ffc70 <col:9> 'int (const char *, const char *)' Function 0x14e8ff6f0 'strcmp' 'int (const char *, const char *)'
|   | | | |-CXXDependentScopeMemberExpr 0x14e8ffcb0 <col:16, col:22> '<dependent type>' contains-errors lvalue ->mode
|   | | | | `-RecoveryExpr 0x14e8ffc90 <col:16> '<dependent type>' contains-errors lvalue
|   | | | `-StringLiteral 0x14e8ffd40 <col:28> 'char[4]' lvalue "STR"
|   | | `-IntegerLiteral 0x14e8ffdc0 <col:38> 'int' 0
|   | `-CompoundStmt 0x14e8fffa8 <col:41, line:28:5>
|   |   `-ReturnStmt 0x14e8fff98 <line:27:9, col:45>
|   |     `-CallExpr 0x14e8fff60 <col:16, col:45> '<dependent type>' contains-errors
|   |       |-DeclRefExpr 0x14e8ffee0 <col:16> 'int ()' Function 0x14e8ffe28 'frompalette' 'int ()'
|   |       |-RecoveryExpr 0x14e8fff00 <col:28> '<dependent type>' contains-errors lvalue
|   |       |-RecoveryExpr 0x14e8fff20 <col:35> '<dependent type>' contains-errors lvalue
|   |       `-DeclRefExpr 0x14e8fff40 <col:41> 'const char *' lvalue ParmVar 0x14e8e5bf0 'mode' 'const char *'
|   |-IfStmt 0x14e900be8 <line:30:5, line:32:5>
|   | |-BinaryOperator 0x14e900150 <line:30:9, col:32> 'int' '=='
|   | | |-CallExpr 0x14e9000b8 <col:9, col:27> 'int'
|   | | | |-ImplicitCastExpr 0x14e9000a0 <col:9> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x14e8fffe0 <col:9> 'int (const char *, const char *)' Function 0x14e8ff6f0 'strcmp' 'int (const char *, const char *)'
|   | | | |-ImplicitCastExpr 0x14e9000e8 <col:16> 'const char *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x14e900000 <col:16> 'const char *' lvalue ParmVar 0x14e8e5bf0 'mode' 'const char *'
|   | | | `-ImplicitCastExpr 0x14e900118 <col:22> 'const char *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x14e900100 <col:22> 'char *' <ArrayToPointerDecay>
|   | | |     `-StringLiteral 0x14e900020 <col:22> 'char[4]' lvalue "STR"
|   | | `-IntegerLiteral 0x14e900130 <col:32> 'int' 0
|   | `-CompoundStmt 0x14e900bd0 <col:35, line:32:5>
|   |   `-ReturnStmt 0x14e900bc0 <line:31:9, col:60>
|   |     `-CallExpr 0x14e900b78 <col:16, col:60> '<dependent type>' contains-errors
|   |       |-DeclRefExpr 0x14e900ab8 <col:16> 'int ()' Function 0x14e900a00 'topalette' 'int ()'
|   |       |-RecoveryExpr 0x14e900ad8 <col:26> '<dependent type>' contains-errors lvalue
|   |       |-RecoveryExpr 0x14e900af8 <col:33> '<dependent type>' contains-errors lvalue
|   |       |-DeclRefExpr 0x14e900b18 <col:39> 'const char *' lvalue ParmVar 0x14e8e5bf0 'mode' 'const char *'
|   |       |-RecoveryExpr 0x14e900b38 <col:45> '<dependent type>' contains-errors lvalue
|   |       `-DeclRefExpr 0x14e900b58 <col:54> 'int' lvalue ParmVar 0x14e8e5cf0 'dither' 'int'
|   |-IfStmt 0x14e900f80 <line:34:5, line:36:5>
|   | |-BinaryOperator 0x14e900da0 <line:34:9, col:42> 'int' '&&'
|   | | |-ImplicitCastExpr 0x14e900d88 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x14e900c08 <col:9> 'int' lvalue ParmVar 0x14e8e5cf0 'dither' 'int'
|   | | `-BinaryOperator 0x14e900d68 <col:19, col:42> 'int' '=='
|   | |   |-CallExpr 0x14e900cd0 <col:19, col:37> 'int'
|   | |   | |-ImplicitCastExpr 0x14e900cb8 <col:19> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   | |   | | `-DeclRefExpr 0x14e900c28 <col:19> 'int (const char *, const char *)' Function 0x14e8ff6f0 'strcmp' 'int (const char *, const char *)'
|   | |   | |-ImplicitCastExpr 0x14e900d00 <col:26> 'const char *' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x14e900c48 <col:26> 'const char *' lvalue ParmVar 0x14e8e5bf0 'mode' 'const char *'
|   | |   | `-ImplicitCastExpr 0x14e900d30 <col:32> 'const char *' <NoOp>
|   | |   |   `-ImplicitCastExpr 0x14e900d18 <col:32> 'char *' <ArrayToPointerDecay>
|   | |   |     `-StringLiteral 0x14e900c68 <col:32> 'char[4]' lvalue "STR"
|   | |   `-IntegerLiteral 0x14e900d48 <col:42> 'int' 0
|   | `-CompoundStmt 0x14e900f68 <col:45, line:36:5>
|   |   `-ReturnStmt 0x14e900f58 <line:35:9, col:45>
|   |     `-CallExpr 0x14e900f20 <col:16, col:45> '<dependent type>' contains-errors
|   |       |-DeclRefExpr 0x14e900ea0 <col:16> 'int ()' Function 0x14e900de8 'tobilevel' 'int ()'
|   |       |-RecoveryExpr 0x14e900ec0 <col:26> '<dependent type>' contains-errors lvalue
|   |       |-RecoveryExpr 0x14e900ee0 <col:33> '<dependent type>' contains-errors lvalue
|   |       `-DeclRefExpr 0x14e900f00 <col:39> 'int' lvalue ParmVar 0x14e8e5cf0 'dither' 'int'
|   |-BinaryOperator 0x14e901040 <line:40:5, col:15> '<dependent type>' contains-errors '='
|   | |-RecoveryExpr 0x14e900fc0 <col:5> '<dependent type>' contains-errors lvalue
|   | | `-DeclRefExpr 0x14e900fa0 <col:5> 'int (int, int, const char *, int, int)' Function 0x14e8e5e08 'convert' 'int (int, int, const char *, int, int)'
|   | `-RecoveryExpr 0x14e901020 <col:15> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x14e901940 <line:50:5, line:58:5>
|   | |-UnaryOperator 0x14e901418 <line:50:9, col:10> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x14e901400 <col:10> '<dependent type>' contains-errors <LValueToRValue>
|   | |   `-RecoveryExpr 0x14e9013e0 <col:10> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x14e901920 <col:19, line:58:5>
|   |   |-DeclStmt 0x14e901538 <line:54:9, col:29>
|   |   | `-VarDecl 0x14e9014d0 <col:9, col:28> col:21 used buf 'char[100]' static
|   |   `-CallExpr 0x14e9018c8 <line:55:9, col:45> '<dependent type>' contains-errors
|   |     |-DeclRefExpr 0x14e9017b0 <col:9> 'int (char *, const char *, ...)' Function 0x14e901598 'sprintf' 'int (char *, const char *, ...)'
|   |     |-DeclRefExpr 0x14e9017d0 <col:17> 'char[100]' lvalue Var 0x14e9014d0 'buf' 'char[100]'
|   |     |-StringLiteral 0x14e9017f0 <col:22> 'char[4]' lvalue "STR"
|   |     |-CXXDependentScopeMemberExpr 0x14e901830 <col:29, col:35> '<dependent type>' contains-errors lvalue ->mode
|   |     | `-RecoveryExpr 0x14e901810 <col:29> '<dependent type>' contains-errors lvalue
|   |     `-DeclRefExpr 0x14e901878 <col:41> 'const char *' lvalue ParmVar 0x14e8e5bf0 'mode' 'const char *'
|   |-BinaryOperator 0x14e901b70 <line:60:5, col:47> '<dependent type>' contains-errors '='
|   | |-RecoveryExpr 0x14e901980 <col:5> '<dependent type>' contains-errors lvalue
|   | | `-DeclRefExpr 0x14e901960 <col:5> 'int' lvalue ParmVar 0x14e8e5af0 'imOut' 'int'
|   | `-CallExpr 0x14e901b38 <col:13, col:47> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x14e901ab8 <col:13> 'int ()' Function 0x14e901a00 'ImagingNew2Dirty' 'int ()'
|   |   |-DeclRefExpr 0x14e901ad8 <col:30> 'const char *' lvalue ParmVar 0x14e8e5bf0 'mode' 'const char *'
|   |   |-RecoveryExpr 0x14e901af8 <col:36> '<dependent type>' contains-errors lvalue
|   |   `-RecoveryExpr 0x14e901b18 <col:43> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x14e901bf0 <line:61:5, line:63:5>
|   | |-UnaryOperator 0x14e901bc8 <line:61:9, col:10> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x14e901bb0 <col:10> '<dependent type>' contains-errors <LValueToRValue>
|   | |   `-RecoveryExpr 0x14e901b90 <col:10> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x14e901be0 <col:17, line:63:5>
|   |-ForStmt 0x14e901f38 <line:66:5, line:68:5>
|   | |-BinaryOperator 0x14e901d50 <line:66:10, col:14> 'int' '='
|   | | |-DeclRefExpr 0x14e901d10 <col:10> 'int' lvalue Var 0x14e8e5ef0 'y' 'int'
|   | | `-IntegerLiteral 0x14e901d30 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x14e901df8 <col:17, col:27> 'int' contains-errors '<'
|   | | |-DeclRefExpr 0x14e901d70 <col:17> 'int' lvalue Var 0x14e8e5ef0 'y' 'int'
|   | | `-CXXDependentScopeMemberExpr 0x14e901db0 <col:21, col:27> '<dependent type>' contains-errors lvalue ->ysize
|   | |   `-RecoveryExpr 0x14e901d90 <col:21> '<dependent type>' contains-errors lvalue
|   | |-UnaryOperator 0x14e901e38 <col:34, col:35> 'int' postfix '++'
|   | | `-DeclRefExpr 0x14e901e18 <col:34> 'int' lvalue Var 0x14e8e5ef0 'y' 'int'
|   | `-CompoundStmt 0x14e901f28 <col:39, line:68:5>
|   `-ReturnStmt 0x14e902090 <line:71:5, col:12>
|     `-RecoveryExpr 0x14e902070 <col:12> '<dependent type>' contains-errors lvalue
|-FunctionDecl 0x14e8ff6f0 <line:19:14> col:14 implicit used strcmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x14e8ff7f0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x14e8ff858 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x14e8ff798 <<invalid sloc>> Implicit 887
`-FunctionDecl 0x14e901598 <line:55:9> col:9 implicit used sprintf 'int (char *, const char *, ...)' extern
  |-ParmVarDecl 0x14e901698 <<invalid sloc>> <invalid sloc> 'char *'
  |-ParmVarDecl 0x14e901700 <<invalid sloc>> <invalid sloc> 'const char *'
  |-BuiltinAttr 0x14e901640 <<invalid sloc>> Implicit 906
  `-FormatAttr 0x14e901778 <col:9> Implicit printf 2 3
