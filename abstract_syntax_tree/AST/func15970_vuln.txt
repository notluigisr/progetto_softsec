TranslationUnitDecl 0x137055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1370564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x137055bd0 '__int128'
|-TypedefDecl 0x137056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x137055bf0 'unsigned __int128'
|-TypedefDecl 0x137126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x137126000 'struct __NSConstantString_tag'
|   `-Record 0x137056580 '__NSConstantString_tag'
|-TypedefDecl 0x137126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x137055d90 '__SVInt8_t'
|-TypedefDecl 0x137126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x137055db0 '__SVInt16_t'
|-TypedefDecl 0x137126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x137055dd0 '__SVInt32_t'
|-TypedefDecl 0x1371263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x137055df0 '__SVInt64_t'
|-TypedefDecl 0x137126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x137055e10 '__SVUint8_t'
|-TypedefDecl 0x1371264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x137055e30 '__SVUint16_t'
|-TypedefDecl 0x137126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x137055e50 '__SVUint32_t'
|-TypedefDecl 0x137126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x137055e70 '__SVUint64_t'
|-TypedefDecl 0x1371265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x137055e90 '__SVFloat16_t'
|-TypedefDecl 0x137126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x137055eb0 '__SVFloat32_t'
|-TypedefDecl 0x1371266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x137055ed0 '__SVFloat64_t'
|-TypedefDecl 0x137126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x137055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x137126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x137055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1371267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x137055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x137126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x137055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1371268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x137055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x137126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x137055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x137126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x137055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1371269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x137055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x137126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x137055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x137126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x137056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x137126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x137056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x137126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x137056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x137126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x137056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x137126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x137056090 '__clang_svint8x3_t'
|-TypedefDecl 0x137126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1370560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x137126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1370560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x137126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1370560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x137126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x137056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x137126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x137056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x137126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x137056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x137126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x137056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x137126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x137056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x137127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1370561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x137127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1370561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1371278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1370561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x137127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x137056210 '__clang_svint8x4_t'
|-TypedefDecl 0x1371279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x137056230 '__clang_svint16x4_t'
|-TypedefDecl 0x137127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x137056250 '__clang_svint32x4_t'
|-TypedefDecl 0x137127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x137056270 '__clang_svint64x4_t'
|-TypedefDecl 0x137127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x137056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x137127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1370562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x137127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1370562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x137127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1370562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x137127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x137056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x137127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x137056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x137127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x137056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x137127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x137056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x137127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x137056390 '__SVBool_t'
|-TypedefDecl 0x137127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1370563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x137127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1370563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x137127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1370563f0 '__SVCount_t'
|-TypedefDecl 0x137127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x137127fb0 'char *'
|   `-BuiltinType 0x1370556b0 'char'
|-TypedefDecl 0x137128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x137127fb0 'char *'
|   `-BuiltinType 0x1370556b0 'char'
|-FunctionDecl 0x137128288 <dataset_diviso_filec/func15970_vuln.c:1:1, line:58:1> line:1:1 invalid bilinear_magnify_make_weights 'int (int *, double)'
| |-ParmVarDecl 0x137128128 <col:32, col:55> col:55 referenced invalid dim 'int *'
| |-ParmVarDecl 0x1371281a8 <line:2:11, col:34> col:34 used scale 'double'
| `-CompoundStmt 0x137145e10 <line:3:1, line:58:1>
|   |-DeclStmt 0x1371283f0 <line:4:3, col:24>
|   | `-VarDecl 0x137128388 <col:3, col:11> col:11 used pixel_weights 'double *'
|   |-DeclStmt 0x137128488 <line:5:3, col:8>
|   | `-VarDecl 0x137128420 <col:3, col:7> col:7 used n 'int'
|   |-DeclStmt 0x137128520 <line:6:3, col:13>
|   | `-VarDecl 0x1371284b8 <col:3, col:7> col:7 used offset 'int'
|   |-DeclStmt 0x1371285b8 <line:7:3, col:8>
|   | `-VarDecl 0x137128550 <col:3, col:7> col:7 used i 'int'
|   |-IfStmt 0x137142198 <line:9:3, line:18:5> has_else
|   | |-BinaryOperator 0x137128628 <line:9:7, col:15> 'int' '>'
|   | | |-ImplicitCastExpr 0x137128610 <col:7> 'double' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1371285d0 <col:7> 'double' lvalue ParmVar 0x1371281a8 'scale' 'double'
|   | | `-FloatingLiteral 0x1371285f0 <col:15> 'double' 1.000000e+00
|   | |-CompoundStmt 0x1371418b8 <line:10:5, line:13:5>
|   | | |-BinaryOperator 0x137128688 <line:11:7, col:11> 'int' '='
|   | | | |-DeclRefExpr 0x137128648 <col:7> 'int' lvalue Var 0x137128420 'n' 'int'
|   | | | `-IntegerLiteral 0x137128668 <col:11> 'int' 2
|   | | `-BinaryOperator 0x137141898 <line:12:7, col:41> '<dependent type>' contains-errors '='
|   | |   |-CXXDependentScopeMemberExpr 0x1371286f0 <col:7, col:12> '<dependent type>' contains-errors lvalue ->offset
|   | |   | `-RecoveryExpr 0x1371286c8 <col:7> '<dependent type>' contains-errors lvalue
|   | |   |   `-DeclRefExpr 0x1371286a8 <col:7> 'int *' lvalue ParmVar 0x137128128 'dim' 'int *'
|   | |   `-BinaryOperator 0x137141878 <col:21, col:41> 'double' '*'
|   | |     |-FloatingLiteral 0x137128738 <col:21> 'double' 5.000000e-01
|   | |     `-ParenExpr 0x137141858 <col:27, col:41> 'double'
|   | |       `-BinaryOperator 0x137141838 <col:28, col:40> 'double' '-'
|   | |         |-BinaryOperator 0x1371287c8 <col:28, col:32> 'double' '/'
|   | |         | |-ImplicitCastExpr 0x1371287b0 <col:28> 'double' <IntegralToFloating>
|   | |         | | `-IntegerLiteral 0x137128758 <col:28> 'int' 1
|   | |         | `-ImplicitCastExpr 0x137128798 <col:32> 'double' <LValueToRValue>
|   | |         |   `-DeclRefExpr 0x137128778 <col:32> 'double' lvalue ParmVar 0x1371281a8 'scale' 'double'
|   | |         `-ImplicitCastExpr 0x137141820 <col:40> 'double' <IntegralToFloating>
|   | |           `-IntegerLiteral 0x137141800 <col:40> 'int' 1
|   | `-CompoundStmt 0x137142178 <line:15:5, line:18:5>
|   |   |-BinaryOperator 0x137142088 <line:16:7, col:34> 'int' '='
|   |   | |-DeclRefExpr 0x1371418d8 <col:7> 'int' lvalue Var 0x137128420 'n' 'int'
|   |   | `-ImplicitCastExpr 0x137142070 <col:11, col:34> 'int' <FloatingToIntegral>
|   |   |   `-CallExpr 0x137142048 <col:11, col:34> 'double'
|   |   |     |-ImplicitCastExpr 0x137142030 <col:11> 'double (*)(double)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x137141f20 <col:11> 'double (double)' Function 0x137141d60 'ceil' 'double (double)'
|   |   |     `-BinaryOperator 0x137141fd8 <col:17, col:29> 'double' '+'
|   |   |       |-FloatingLiteral 0x137141f40 <col:17> 'double' 1.000000e+00
|   |   |       `-BinaryOperator 0x137141fb8 <col:23, col:29> 'double' '/'
|   |   |         |-FloatingLiteral 0x137141f60 <col:23> 'double' 1.000000e+00
|   |   |         `-ImplicitCastExpr 0x137141fa0 <col:29> 'double' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x137141f80 <col:29> 'double' lvalue ParmVar 0x1371281a8 'scale' 'double'
|   |   `-BinaryOperator 0x137142158 <line:17:7, col:21> '<dependent type>' contains-errors '='
|   |     |-CXXDependentScopeMemberExpr 0x1371420f0 <col:7, col:12> '<dependent type>' contains-errors lvalue ->offset
|   |     | `-RecoveryExpr 0x1371420c8 <col:7> '<dependent type>' contains-errors lvalue
|   |     |   `-DeclRefExpr 0x1371420a8 <col:7> 'int *' lvalue ParmVar 0x137128128 'dim' 'int *'
|   |     `-FloatingLiteral 0x137142138 <col:21> 'double' 0.000000e+00
|   |-BinaryOperator 0x137142278 <line:20:3, col:12> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x137142210 <col:3, col:8> '<dependent type>' contains-errors lvalue ->n
|   | | `-RecoveryExpr 0x1371421e8 <col:3> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x1371421c8 <col:3> 'int *' lvalue ParmVar 0x137128128 'dim' 'int *'
|   | `-DeclRefExpr 0x137142258 <col:12> 'int' lvalue Var 0x137128420 'n' 'int'
|   |-BinaryOperator 0x137142660 <line:21:3, col:60> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x1371422e0 <col:3, col:8> '<dependent type>' contains-errors lvalue ->weights
|   | | `-RecoveryExpr 0x1371422b8 <col:3> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x137142298 <col:3> 'int *' lvalue ParmVar 0x137128128 'dim' 'int *'
|   | `-CallExpr 0x137142630 <col:18, col:60> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x137142480 <col:18> 'int ()' Function 0x1371423c8 'g_malloc_n' 'int ()'
|   |   |-BinaryOperator 0x137142610 <col:30, col:48> '<dependent type>' contains-errors '*'
|   |   | |-UnaryExprOrTypeTraitExpr 0x1371425d0 <col:30, col:44> 'unsigned long' sizeof 'double'
|   |   | `-RecoveryExpr 0x1371425f0 <col:48> '<dependent type>' contains-errors lvalue
|   |   `-DeclRefExpr 0x137142510 <col:59> 'int' lvalue Var 0x137128420 'n' 'int'
|   |-BinaryOperator 0x137142708 <line:23:3, col:24> 'double *' contains-errors '='
|   | |-DeclRefExpr 0x137142680 <col:3> 'double *' lvalue Var 0x137128388 'pixel_weights' 'double *'
|   | `-CXXDependentScopeMemberExpr 0x1371426c0 <col:19, col:24> '<dependent type>' contains-errors lvalue ->weights
|   |   `-RecoveryExpr 0x1371426a0 <col:19> '<dependent type>' contains-errors lvalue
|   `-ForStmt 0x137145dd8 <line:25:3, line:57:5>
|     |-BinaryOperator 0x137142768 <line:25:8, col:15> 'int' '='
|     | |-DeclRefExpr 0x137142728 <col:8> 'int' lvalue Var 0x1371284b8 'offset' 'int'
|     | `-IntegerLiteral 0x137142748 <col:15> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x137143e00 <col:18, col:27> 'int' contains-errors '<'
|     | |-DeclRefExpr 0x137142788 <col:18> 'int' lvalue Var 0x1371284b8 'offset' 'int'
|     | `-RecoveryExpr 0x1371427e0 <col:27> '<dependent type>' contains-errors lvalue
|     |-UnaryOperator 0x137143e40 <col:38, col:44> 'int' postfix '++'
|     | `-DeclRefExpr 0x137143e20 <col:38> 'int' lvalue Var 0x1371284b8 'offset' 'int'
|     `-CompoundStmt 0x137145db8 <line:26:5, line:57:5>
|       |-DeclStmt 0x137144078 <line:27:7, col:44>
|       | `-VarDecl 0x137143e70 <col:7, col:35> col:14 used x 'double' cinit
|       |   `-BinaryOperator 0x137144058 <col:18, col:35> '<dependent type>' contains-errors '/'
|       |     |-CStyleCastExpr 0x137144010 <col:18, col:26> 'double' <IntegralToFloating>
|       |     | `-ImplicitCastExpr 0x137143ff8 <col:26> 'int' <LValueToRValue> part_of_explicit_cast
|       |     |   `-DeclRefExpr 0x137143ed8 <col:26> 'int' lvalue Var 0x1371284b8 'offset' 'int'
|       |     `-RecoveryExpr 0x137144038 <col:35> '<dependent type>' contains-errors lvalue
|       `-IfStmt 0x137145d88 <line:29:7, line:56:9> has_else
|         |-BinaryOperator 0x1371440e8 <line:29:11, col:19> 'int' '>'
|         | |-ImplicitCastExpr 0x1371440d0 <col:11> 'double' <LValueToRValue>
|         | | `-DeclRefExpr 0x137144090 <col:11> 'double' lvalue ParmVar 0x1371281a8 'scale' 'double'
|         | `-FloatingLiteral 0x1371440b0 <col:19> 'double' 1.000000e+00
|         |-CompoundStmt 0x137144598 <line:30:9, line:33:9>
|         | `-ForStmt 0x137144560 <line:31:11, line:32:71>
|         |   |-BinaryOperator 0x137144148 <line:31:16, col:20> 'int' '='
|         |   | |-DeclRefExpr 0x137144108 <col:16> 'int' lvalue Var 0x137128550 'i' 'int'
|         |   | `-IntegerLiteral 0x137144128 <col:20> 'int' 0
|         |   |-<<<NULL>>>
|         |   |-BinaryOperator 0x1371441d8 <col:23, col:27> 'int' '<'
|         |   | |-ImplicitCastExpr 0x1371441a8 <col:23> 'int' <LValueToRValue>
|         |   | | `-DeclRefExpr 0x137144168 <col:23> 'int' lvalue Var 0x137128550 'i' 'int'
|         |   | `-ImplicitCastExpr 0x1371441c0 <col:27> 'int' <LValueToRValue>
|         |   |   `-DeclRefExpr 0x137144188 <col:27> 'int' lvalue Var 0x137128420 'n' 'int'
|         |   |-UnaryOperator 0x137144218 <col:30, col:31> 'int' postfix '++'
|         |   | `-DeclRefExpr 0x1371441f8 <col:30> 'int' lvalue Var 0x137128550 'i' 'int'
|         |   `-BinaryOperator 0x137144540 <line:32:13, col:71> 'double' contains-errors '='
|         |     |-UnaryOperator 0x137144288 <col:13, col:30> 'double' lvalue prefix '*' cannot overflow
|         |     | `-ParenExpr 0x137144268 <col:14, col:30> 'double *'
|         |     |   `-UnaryOperator 0x137144250 <col:15, col:28> 'double *' postfix '++'
|         |     |     `-DeclRefExpr 0x137144230 <col:15> 'double *' lvalue Var 0x137128388 'pixel_weights' 'double *'
|         |     `-BinaryOperator 0x137144520 <col:34, col:71> 'double' contains-errors '*'
|         |       |-ParenExpr 0x1371444c8 <col:34, col:67> 'double' contains-errors
|         |       | `-BinaryOperator 0x1371444a8 <col:35, col:62> 'double' contains-errors '/'
|         |       |   |-ParenExpr 0x137144450 <col:35, col:58> 'double' contains-errors
|         |       |   | `-ConditionalOperator 0x137144420 <col:36, col:57> 'double' contains-errors
|         |       |   |   |-ParenExpr 0x137144318 <col:36, col:43> 'int'
|         |       |   |   | `-BinaryOperator 0x1371442f8 <col:37, col:42> 'int' '=='
|         |       |   |   |   |-ImplicitCastExpr 0x1371442e0 <col:37> 'int' <LValueToRValue>
|         |       |   |   |   | `-DeclRefExpr 0x1371442a0 <col:37> 'int' lvalue Var 0x137128550 'i' 'int'
|         |       |   |   |   `-IntegerLiteral 0x1371442c0 <col:42> 'int' 0
|         |       |   |   |-ParenExpr 0x1371443c8 <col:47, col:53> 'double' contains-errors
|         |       |   |   | `-BinaryOperator 0x1371443a8 <col:48, col:52> 'double' contains-errors '-'
|         |       |   |   |   |-ImplicitCastExpr 0x137144390 <col:48> 'double' <IntegralToFloating>
|         |       |   |   |   | `-IntegerLiteral 0x137144338 <col:48> 'int' 1
|         |       |   |   |   `-ImplicitCastExpr 0x137144378 <col:52> 'double' contains-errors <LValueToRValue>
|         |       |   |   |     `-DeclRefExpr 0x137144358 <col:52> 'double' contains-errors lvalue Var 0x137143e70 'x' 'double'
|         |       |   |   `-ImplicitCastExpr 0x137144408 <col:57> 'double' contains-errors <LValueToRValue>
|         |       |   |     `-DeclRefExpr 0x1371443e8 <col:57> 'double' contains-errors lvalue Var 0x137143e70 'x' 'double'
|         |       |   `-ImplicitCastExpr 0x137144490 <col:62> 'double' <LValueToRValue>
|         |       |     `-DeclRefExpr 0x137144470 <col:62> 'double' lvalue ParmVar 0x1371281a8 'scale' 'double'
|         |       `-ImplicitCastExpr 0x137144508 <col:71> 'double' <LValueToRValue>
|         |         `-DeclRefExpr 0x1371444e8 <col:71> 'double' lvalue ParmVar 0x1371281a8 'scale' 'double'
|         `-CompoundStmt 0x137145d68 <line:35:9, line:56:9>
|           |-DeclStmt 0x137144718 <line:36:11, col:35>
|           | `-VarDecl 0x1371445c8 <col:11, col:30> col:18 used a 'double' cinit
|           |   `-BinaryOperator 0x1371446f8 <col:22, col:30> 'double' contains-errors '+'
|           |     |-ImplicitCastExpr 0x1371446e0 <col:22> 'double' contains-errors <LValueToRValue>
|           |     | `-DeclRefExpr 0x137144630 <col:22> 'double' contains-errors lvalue Var 0x137143e70 'x' 'double'
|           |     `-BinaryOperator 0x1371446c0 <col:26, col:30> 'double' '/'
|           |       |-ImplicitCastExpr 0x1371446a8 <col:26> 'double' <IntegralToFloating>
|           |       | `-IntegerLiteral 0x137144650 <col:26> 'int' 1
|           |       `-ImplicitCastExpr 0x137144690 <col:30> 'double' <LValueToRValue>
|           |         `-DeclRefExpr 0x137144670 <col:30> 'double' lvalue ParmVar 0x1371281a8 'scale' 'double'
|           `-ForStmt 0x137145d30 <line:39:11, line:55:13>
|             |-BinaryOperator 0x137144770 <line:39:16, col:20> 'int' '='
|             | |-DeclRefExpr 0x137144730 <col:16> 'int' lvalue Var 0x137128550 'i' 'int'
|             | `-IntegerLiteral 0x137144750 <col:20> 'int' 0
|             |-<<<NULL>>>
|             |-BinaryOperator 0x137144800 <col:23, col:27> 'int' '<'
|             | |-ImplicitCastExpr 0x1371447d0 <col:23> 'int' <LValueToRValue>
|             | | `-DeclRefExpr 0x137144790 <col:23> 'int' lvalue Var 0x137128550 'i' 'int'
|             | `-ImplicitCastExpr 0x1371447e8 <col:27> 'int' <LValueToRValue>
|             |   `-DeclRefExpr 0x1371447b0 <col:27> 'int' lvalue Var 0x137128420 'n' 'int'
|             |-UnaryOperator 0x137144840 <col:30, col:31> 'int' postfix '++'
|             | `-DeclRefExpr 0x137144820 <col:30> 'int' lvalue Var 0x137128550 'i' 'int'
|             `-CompoundStmt 0x137145d18 <line:40:13, line:55:13>
|               `-IfStmt 0x137145ce8 <line:41:15, line:54:17> has_else
|                 |-BinaryOperator 0x1371448e0 <line:41:19, col:23> 'int' contains-errors '<'
|                 | |-ImplicitCastExpr 0x1371448c8 <col:19> 'double' <IntegralToFloating>
|                 | | `-ImplicitCastExpr 0x137144898 <col:19> 'int' <LValueToRValue>
|                 | |   `-DeclRefExpr 0x137144858 <col:19> 'int' lvalue Var 0x137128550 'i' 'int'
|                 | `-ImplicitCastExpr 0x1371448b0 <col:23> 'double' contains-errors <LValueToRValue>
|                 |   `-DeclRefExpr 0x137144878 <col:23> 'double' contains-errors lvalue Var 0x137143e70 'x' 'double'
|                 |-CompoundStmt 0x137145888 <line:42:17, line:47:17>
|                 | `-IfStmt 0x137145858 <line:43:19, line:46:42> has_else
|                 |   |-BinaryOperator 0x1371449c8 <line:43:23, col:31> 'int' contains-errors '>'
|                 |   | |-ImplicitCastExpr 0x1371449b0 <col:23, col:27> 'double' <IntegralToFloating>
|                 |   | | `-BinaryOperator 0x137144958 <col:23, col:27> 'int' '+'
|                 |   | |   |-ImplicitCastExpr 0x137144940 <col:23> 'int' <LValueToRValue>
|                 |   | |   | `-DeclRefExpr 0x137144900 <col:23> 'int' lvalue Var 0x137128550 'i' 'int'
|                 |   | |   `-IntegerLiteral 0x137144920 <col:27> 'int' 1
|                 |   | `-ImplicitCastExpr 0x137144998 <col:31> 'double' contains-errors <LValueToRValue>
|                 |   |   `-DeclRefExpr 0x137144978 <col:31> 'double' contains-errors lvalue Var 0x137143e70 'x' 'double'
|                 |   |-BinaryOperator 0x137144d68 <line:44:21, col:65> 'double' contains-errors '='
|                 |   | |-UnaryOperator 0x137144a40 <col:21, col:38> 'double' lvalue prefix '*' cannot overflow
|                 |   | | `-ParenExpr 0x137144a20 <col:22, col:38> 'double *'
|                 |   | |   `-UnaryOperator 0x137144a08 <col:23, col:36> 'double *' postfix '++'
|                 |   | |     `-DeclRefExpr 0x1371449e8 <col:23> 'double *' lvalue Var 0x137128388 'pixel_weights' 'double *'
|                 |   | `-BinaryOperator 0x137144d48 <col:42, col:65> 'double' contains-errors '*'
|                 |   |   |-ParenExpr 0x137144cf0 <col:42, col:61> 'double' contains-errors
|                 |   |   | `-BinaryOperator 0x137144cd0 <col:43, col:60> 'double' contains-errors '-'
|                 |   |   |   |-ImplicitCastExpr 0x137144cb8 <col:43, col:56> 'double' contains-errors <IntegralToFloating>
|                 |   |   |   | `-CallExpr 0x137144c38 <col:43, col:56> 'int' contains-errors
|                 |   |   |   |   |-ImplicitCastExpr 0x137144c20 <col:43> 'int (*)()' <FunctionToPointerDecay>
|                 |   |   |   |   | `-DeclRefExpr 0x137144b38 <col:43> 'int ()' Function 0x137144a80 'MIN' 'int ()'
|                 |   |   |   |   |-BinaryOperator 0x137144bb0 <col:48, col:52> 'int' '+'
|                 |   |   |   |   | |-ImplicitCastExpr 0x137144b98 <col:48> 'int' <LValueToRValue>
|                 |   |   |   |   | | `-DeclRefExpr 0x137144b58 <col:48> 'int' lvalue Var 0x137128550 'i' 'int'
|                 |   |   |   |   | `-IntegerLiteral 0x137144b78 <col:52> 'int' 1
|                 |   |   |   |   `-ImplicitCastExpr 0x137144c68 <col:55> 'double' contains-errors <LValueToRValue>
|                 |   |   |   |     `-DeclRefExpr 0x137144bd0 <col:55> 'double' contains-errors lvalue Var 0x1371445c8 'a' 'double'
|                 |   |   |   `-ImplicitCastExpr 0x137144ca0 <col:60> 'double' contains-errors <LValueToRValue>
|                 |   |   |     `-DeclRefExpr 0x137144c80 <col:60> 'double' contains-errors lvalue Var 0x137143e70 'x' 'double'
|                 |   |   `-ImplicitCastExpr 0x137144d30 <col:65> 'double' <LValueToRValue>
|                 |   |     `-DeclRefExpr 0x137144d10 <col:65> 'double' lvalue ParmVar 0x1371281a8 'scale' 'double'
|                 |   `-BinaryOperator 0x137145838 <line:46:21, col:42> 'double' '='
|                 |     |-UnaryOperator 0x137144de0 <col:21, col:38> 'double' lvalue prefix '*' cannot overflow
|                 |     | `-ParenExpr 0x137144dc0 <col:22, col:38> 'double *'
|                 |     |   `-UnaryOperator 0x137144da8 <col:23, col:36> 'double *' postfix '++'
|                 |     |     `-DeclRefExpr 0x137144d88 <col:23> 'double *' lvalue Var 0x137128388 'pixel_weights' 'double *'
|                 |     `-ImplicitCastExpr 0x137145820 <col:42> 'double' <IntegralToFloating>
|                 |       `-IntegerLiteral 0x137145800 <col:42> 'int' 0
|                 `-CompoundStmt 0x137145cd0 <line:49:17, line:54:17>
|                   `-IfStmt 0x137145ca0 <line:50:19, line:53:42> has_else
|                     |-BinaryOperator 0x137145928 <line:50:23, col:27> 'int' contains-errors '>'
|                     | |-ImplicitCastExpr 0x1371458e0 <col:23> 'double' contains-errors <LValueToRValue>
|                     | | `-DeclRefExpr 0x1371458a0 <col:23> 'double' contains-errors lvalue Var 0x1371445c8 'a' 'double'
|                     | `-ImplicitCastExpr 0x137145910 <col:27> 'double' <IntegralToFloating>
|                     |   `-ImplicitCastExpr 0x1371458f8 <col:27> 'int' <LValueToRValue>
|                     |     `-DeclRefExpr 0x1371458c0 <col:27> 'int' lvalue Var 0x137128550 'i' 'int'
|                     |-BinaryOperator 0x137145bb8 <line:51:21, col:65> 'double' contains-errors '='
|                     | |-UnaryOperator 0x1371459a0 <col:21, col:38> 'double' lvalue prefix '*' cannot overflow
|                     | | `-ParenExpr 0x137145980 <col:22, col:38> 'double *'
|                     | |   `-UnaryOperator 0x137145968 <col:23, col:36> 'double *' postfix '++'
|                     | |     `-DeclRefExpr 0x137145948 <col:23> 'double *' lvalue Var 0x137128388 'pixel_weights' 'double *'
|                     | `-BinaryOperator 0x137145b98 <col:42, col:65> 'double' contains-errors '*'
|                     |   |-ImplicitCastExpr 0x137145b80 <col:42, col:61> 'double' contains-errors <IntegralToFloating>
|                     |   | `-ParenExpr 0x137145b28 <col:42, col:61> 'int' contains-errors
|                     |   |   `-BinaryOperator 0x137145b08 <col:43, col:60> 'int' contains-errors '-'
|                     |   |     |-CallExpr 0x137145a88 <col:43, col:56> 'int' contains-errors
|                     |   |     | |-ImplicitCastExpr 0x137145a70 <col:43> 'int (*)()' <FunctionToPointerDecay>
|                     |   |     | | `-DeclRefExpr 0x1371459b8 <col:43> 'int ()' Function 0x137144a80 'MIN' 'int ()'
|                     |   |     | |-BinaryOperator 0x137145a30 <col:48, col:52> 'int' '+'
|                     |   |     | | |-ImplicitCastExpr 0x137145a18 <col:48> 'int' <LValueToRValue>
|                     |   |     | | | `-DeclRefExpr 0x1371459d8 <col:48> 'int' lvalue Var 0x137128550 'i' 'int'
|                     |   |     | | `-IntegerLiteral 0x1371459f8 <col:52> 'int' 1
|                     |   |     | `-ImplicitCastExpr 0x137145ab8 <col:55> 'double' contains-errors <LValueToRValue>
|                     |   |     |   `-DeclRefExpr 0x137145a50 <col:55> 'double' contains-errors lvalue Var 0x1371445c8 'a' 'double'
|                     |   |     `-ImplicitCastExpr 0x137145af0 <col:60> 'int' <LValueToRValue>
|                     |   |       `-DeclRefExpr 0x137145ad0 <col:60> 'int' lvalue Var 0x137128550 'i' 'int'
|                     |   `-ImplicitCastExpr 0x137145b68 <col:65> 'double' <LValueToRValue>
|                     |     `-DeclRefExpr 0x137145b48 <col:65> 'double' lvalue ParmVar 0x1371281a8 'scale' 'double'
|                     `-BinaryOperator 0x137145c80 <line:53:21, col:42> 'double' '='
|                       |-UnaryOperator 0x137145c30 <col:21, col:38> 'double' lvalue prefix '*' cannot overflow
|                       | `-ParenExpr 0x137145c10 <col:22, col:38> 'double *'
|                       |   `-UnaryOperator 0x137145bf8 <col:23, col:36> 'double *' postfix '++'
|                       |     `-DeclRefExpr 0x137145bd8 <col:23> 'double *' lvalue Var 0x137128388 'pixel_weights' 'double *'
|                       `-ImplicitCastExpr 0x137145c68 <col:42> 'double' <IntegralToFloating>
|                         `-IntegerLiteral 0x137145c48 <col:42> 'int' 0
`-FunctionDecl 0x137141d60 <line:16:11> col:11 implicit used ceil 'double (double)' extern
  |-ParmVarDecl 0x137141e60 <<invalid sloc>> <invalid sloc> 'double'
  |-BuiltinAttr 0x137141e08 <<invalid sloc>> Implicit 1052
  |-NoThrowAttr 0x137141ed0 <col:11> Implicit
  `-ConstAttr 0x137141ef8 <col:11> Implicit
