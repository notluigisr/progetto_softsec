TranslationUnitDecl 0x136855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1368564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x136855bd0 '__int128'
|-TypedefDecl 0x136856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x136855bf0 'unsigned __int128'
|-TypedefDecl 0x13700be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13700bc00 'struct __NSConstantString_tag'
|   `-Record 0x136856580 '__NSConstantString_tag'
|-TypedefDecl 0x13700be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x136855d90 '__SVInt8_t'
|-TypedefDecl 0x13700bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x136855db0 '__SVInt16_t'
|-TypedefDecl 0x13700bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x136855dd0 '__SVInt32_t'
|-TypedefDecl 0x13700bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x136855df0 '__SVInt64_t'
|-TypedefDecl 0x13700c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x136855e10 '__SVUint8_t'
|-TypedefDecl 0x13700c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x136855e30 '__SVUint16_t'
|-TypedefDecl 0x13700c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x136855e50 '__SVUint32_t'
|-TypedefDecl 0x13700c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x136855e70 '__SVUint64_t'
|-TypedefDecl 0x13700c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x136855e90 '__SVFloat16_t'
|-TypedefDecl 0x13700c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x136855eb0 '__SVFloat32_t'
|-TypedefDecl 0x13700c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x136855ed0 '__SVFloat64_t'
|-TypedefDecl 0x13700c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x136855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13700c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x136855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13700c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x136855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13700c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x136855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13700c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x136855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13700c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x136855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13700c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x136855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13700c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x136855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13700c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x136855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13700c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x136856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13700c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x136856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13700c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x136856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13700c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x136856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13700c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x136856090 '__clang_svint8x3_t'
|-TypedefDecl 0x13700c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1368560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13700c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1368560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13700c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1368560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13700c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x136856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13700ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x136856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13700cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x136856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13700cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x136856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13700cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x136856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13700d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1368561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13700d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1368561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13700d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1368561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13700d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x136856210 '__clang_svint8x4_t'
|-TypedefDecl 0x13700d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x136856230 '__clang_svint16x4_t'
|-TypedefDecl 0x13700d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x136856250 '__clang_svint32x4_t'
|-TypedefDecl 0x13700d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x136856270 '__clang_svint64x4_t'
|-TypedefDecl 0x13700d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x136856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13700d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1368562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13700d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1368562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13700d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1368562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13700d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x136856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13700d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x136856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13700d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x136856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13700d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x136856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13700da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x136856390 '__SVBool_t'
|-TypedefDecl 0x13700da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1368563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13700dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1368563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13700db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1368563f0 '__SVCount_t'
|-TypedefDecl 0x13700dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13700dbb0 'char *'
|   `-BuiltinType 0x1368556b0 'char'
|-TypedefDecl 0x13700dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13700dbb0 'char *'
|   `-BuiltinType 0x1368556b0 'char'
|-FunctionDecl 0x137026930 <dataset_diviso_filec/func4470_vuln.c:1:1, line:28:1> line:1:13 show_entry 'void (struct diff_options *, const char *, struct tree_desc *, const char *, int)' static
| |-ParmVarDecl 0x13700e248 <col:24, col:45> col:45 used opt 'struct diff_options *'
| |-ParmVarDecl 0x13700e2c8 <col:50, col:62> col:62 used prefix 'const char *'
| |-ParmVarDecl 0x1370266c8 <col:70, col:88> col:88 used desc 'struct tree_desc *'
| |-ParmVarDecl 0x137026748 <line:2:10, col:22> col:22 used base 'const char *'
| |-ParmVarDecl 0x1370267c8 <col:28, col:32> col:32 used baselen 'int'
| `-CompoundStmt 0x13702b060 <line:3:1, line:28:1>
|   |-DeclStmt 0x137026ac8 <line:4:2, col:15>
|   | `-VarDecl 0x137026a60 <col:2, col:11> col:11 used mode 'unsigned int'
|   |-DeclStmt 0x137026b60 <line:5:2, col:18>
|   | `-VarDecl 0x137026af8 <col:2, col:14> col:14 used path 'const char *'
|   |-DeclStmt 0x137026f30 <line:6:2, col:68>
|   | `-VarDecl 0x137026bc8 <col:2, col:67> col:23 used sha1 'const unsigned char *' cinit
|   |   `-ImplicitCastExpr 0x137026f18 <col:30, col:67> 'const unsigned char *' <IntegralToPointer>
|   |     `-CallExpr 0x137026ec8 <col:30, col:67> 'int'
|   |       |-ImplicitCastExpr 0x137026eb0 <col:30> 'int (*)()' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x137026d60 <col:30> 'int ()' Function 0x137026ca8 'tree_entry_extract' 'int ()'
|   |       |-ImplicitCastExpr 0x137026f00 <col:49> 'struct tree_desc *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x137026d80 <col:49> 'struct tree_desc *' lvalue ParmVar 0x1370266c8 'desc' 'struct tree_desc *'
|   |       |-UnaryOperator 0x137026df0 <col:55, col:56> 'const char **' prefix '&' cannot overflow
|   |       | `-DeclRefExpr 0x137026da0 <col:56> 'const char *' lvalue Var 0x137026af8 'path' 'const char *'
|   |       `-UnaryOperator 0x137026e60 <col:62, col:63> 'unsigned int *' prefix '&' cannot overflow
|   |         `-DeclRefExpr 0x137026e08 <col:63> 'unsigned int' lvalue Var 0x137026a60 'mode' 'unsigned int'
|   `-IfStmt 0x13702b030 <line:8:2, line:27:2> has_else
|     |-BinaryOperator 0x1370272f0 <line:8:6, col:50> 'int' contains-errors '&&'
|     | |-CallExpr 0x137027268 <col:6, col:33> '<dependent type>' contains-errors
|     | | |-DeclRefExpr 0x137027028 <col:6> 'int ()' Function 0x137026f70 'DIFF_OPT_TST' 'int ()'
|     | | |-DeclRefExpr 0x137027048 <col:19> 'struct diff_options *' lvalue ParmVar 0x13700e248 'opt' 'struct diff_options *'
|     | | `-RecoveryExpr 0x137027248 <col:24> '<dependent type>' contains-errors lvalue
|     | `-CallExpr 0x1370272b0 <col:38, col:50> 'int'
|     |   |-ImplicitCastExpr 0x137027298 <col:38> 'int (*)()' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x137027190 <col:38> 'int ()' Function 0x1370270d8 'S_ISDIR' 'int ()'
|     |   `-ImplicitCastExpr 0x1370272d8 <col:46> 'unsigned int' <LValueToRValue>
|     |     `-DeclRefExpr 0x1370271b0 <col:46> 'unsigned int' lvalue Var 0x137026a60 'mode' 'unsigned int'
|     |-CompoundStmt 0x13702ade0 <col:53, line:25:2>
|     | |-DeclStmt 0x1370274a8 <line:9:3, col:24>
|     | | |-EnumDecl 0x137027310 <col:3, col:8> col:8 object_type
|     | | `-VarDecl 0x137027428 <col:3, col:20> col:20 invalid type 'enum object_type'
|     | |-DeclStmt 0x137029990 <line:10:3, col:43>
|     | | `-VarDecl 0x1370274d8 <col:3, col:42> col:7 used pathlen 'int' cinit
|     | |   `-CallExpr 0x137029930 <col:17, col:42> 'int'
|     | |     |-ImplicitCastExpr 0x137029918 <col:17> 'int (*)()' <FunctionToPointerDecay>
|     | |     | `-DeclRefExpr 0x1370298b8 <col:17> 'int ()' Function 0x137029800 'tree_entry_len' 'int ()'
|     | |     |-ImplicitCastExpr 0x137029960 <col:32> 'const char *' <LValueToRValue>
|     | |     | `-DeclRefExpr 0x1370298d8 <col:32> 'const char *' lvalue Var 0x137026af8 'path' 'const char *'
|     | |     `-ImplicitCastExpr 0x137029978 <col:38> 'const unsigned char *' <LValueToRValue>
|     | |       `-DeclRefExpr 0x1370298f8 <col:38> 'const unsigned char *' lvalue Var 0x137026bc8 'sha1' 'const unsigned char *'
|     | |-DeclStmt 0x137029c78 <line:11:3, col:60>
|     | | `-VarDecl 0x1370299c0 <col:3, col:59> col:9 used newbase 'char *' cinit
|     | |   `-ImplicitCastExpr 0x137029c60 <col:19, col:59> 'char *' <IntegralToPointer>
|     | |     `-CallExpr 0x137029bc0 <col:19, col:59> 'int'
|     | |       |-ImplicitCastExpr 0x137029ba8 <col:19> 'int (*)()' <FunctionToPointerDecay>
|     | |       | `-DeclRefExpr 0x137029b08 <col:19> 'int ()' Function 0x137029a50 'malloc_base' 'int ()'
|     | |       |-ImplicitCastExpr 0x137029c00 <col:31> 'const char *' <LValueToRValue>
|     | |       | `-DeclRefExpr 0x137029b28 <col:31> 'const char *' lvalue ParmVar 0x137026748 'base' 'const char *'
|     | |       |-ImplicitCastExpr 0x137029c18 <col:37> 'int' <LValueToRValue>
|     | |       | `-DeclRefExpr 0x137029b48 <col:37> 'int' lvalue ParmVar 0x1370267c8 'baselen' 'int'
|     | |       |-ImplicitCastExpr 0x137029c30 <col:46> 'const char *' <LValueToRValue>
|     | |       | `-DeclRefExpr 0x137029b68 <col:46> 'const char *' lvalue Var 0x137026af8 'path' 'const char *'
|     | |       `-ImplicitCastExpr 0x137029c48 <col:52> 'int' <LValueToRValue>
|     | |         `-DeclRefExpr 0x137029b88 <col:52> 'int' lvalue Var 0x1370274d8 'pathlen' 'int'
|     | |-DeclStmt 0x137029d48 <line:12:3, col:25>
|     | | `-VarDecl 0x137029ce0 <col:3, col:20> col:20 invalid inner 'struct tree_desc'
|     | |-DeclStmt 0x137029de0 <line:13:3, col:13>
|     | | `-VarDecl 0x137029d78 <col:3, col:9> col:9 used tree 'void *'
|     | |-DeclStmt 0x137029e78 <line:14:3, col:21>
|     | | `-VarDecl 0x137029e10 <col:3, col:17> col:17 used size 'unsigned long'
|     | |-BinaryOperator 0x13702a0b0 <line:16:3, col:43> 'void *' contains-errors '='
|     | | |-DeclRefExpr 0x137029e90 <col:3> 'void *' lvalue Var 0x137029d78 'tree' 'void *'
|     | | `-CallExpr 0x13702a078 <col:10, col:43> '<dependent type>' contains-errors
|     | |   |-DeclRefExpr 0x137029f90 <col:10> 'int ()' Function 0x137029ed8 'read_sha1_file' 'int ()'
|     | |   |-DeclRefExpr 0x137029fb0 <col:25> 'const unsigned char *' lvalue Var 0x137026bc8 'sha1' 'const unsigned char *'
|     | |   |-UnaryOperator 0x137029ff0 <col:31, col:32> '<dependent type>' contains-errors prefix '&' cannot overflow
|     | |   | `-RecoveryExpr 0x137029fd0 <col:32> '<dependent type>' contains-errors lvalue
|     | |   `-UnaryOperator 0x13702a060 <col:38, col:39> 'unsigned long *' prefix '&' cannot overflow
|     | |     `-DeclRefExpr 0x13702a008 <col:39> 'unsigned long' lvalue Var 0x137029e10 'size' 'unsigned long'
|     | |-IfStmt 0x13702a598 <line:17:3, line:18:32>
|     | | |-BinaryOperator 0x13702a238 <line:17:7, col:24> 'int' contains-errors '||'
|     | | | |-UnaryOperator 0x13702a1e0 <col:7, col:8> 'int' prefix '!' cannot overflow
|     | | | | `-ImplicitCastExpr 0x13702a1c8 <col:8> 'void *' <LValueToRValue>
|     | | | |   `-DeclRefExpr 0x13702a0d0 <col:8> 'void *' lvalue Var 0x137029d78 'tree' 'void *'
|     | | | `-BinaryOperator 0x13702a218 <col:16, col:24> 'int' contains-errors '!='
|     | | |   |-RecoveryExpr 0x13702a120 <col:16> '<dependent type>' contains-errors lvalue
|     | | |   `-RecoveryExpr 0x13702a1f8 <col:24> '<dependent type>' contains-errors lvalue
|     | | `-CallExpr 0x13702a550 <line:18:4, col:32> 'int'
|     | |   |-ImplicitCastExpr 0x13702a538 <col:4> 'int (*)()' <FunctionToPointerDecay>
|     | |   | `-DeclRefExpr 0x13702a338 <col:4> 'int ()' Function 0x13702a280 'die' 'int ()'
|     | |   |-ImplicitCastExpr 0x13702a580 <col:8> 'char *' <ArrayToPointerDecay>
|     | |   | `-StringLiteral 0x13702a3a0 <col:8> 'char[4]' lvalue "STR"
|     | |   `-CallExpr 0x13702a4f8 <col:15, col:31> 'int'
|     | |     |-ImplicitCastExpr 0x13702a4e0 <col:15> 'int (*)()' <FunctionToPointerDecay>
|     | |     | `-DeclRefExpr 0x13702a4a0 <col:15> 'int ()' Function 0x13702a3e8 'sha1_to_hex' 'int ()'
|     | |     `-ImplicitCastExpr 0x13702a520 <col:27> 'const unsigned char *' <LValueToRValue>
|     | |       `-DeclRefExpr 0x13702a4c0 <col:27> 'const unsigned char *' lvalue Var 0x137026bc8 'sha1' 'const unsigned char *'
|     | |-CallExpr 0x13702a730 <line:20:3, col:36> '<dependent type>' contains-errors
|     | | |-DeclRefExpr 0x13702a698 <col:3> 'int ()' Function 0x13702a5e0 'init_tree_desc' 'int ()'
|     | | |-UnaryOperator 0x13702a6d8 <col:18, col:19> '<dependent type>' contains-errors prefix '&' cannot overflow
|     | | | `-RecoveryExpr 0x13702a6b8 <col:19> '<dependent type>' contains-errors lvalue
|     | | |-DeclRefExpr 0x13702a6f0 <col:26> 'void *' lvalue Var 0x137029d78 'tree' 'void *'
|     | | `-DeclRefExpr 0x13702a710 <col:32> 'unsigned long' lvalue Var 0x137029e10 'size' 'unsigned long'
|     | |-CallExpr 0x13702aa40 <line:21:3, col:64> '<dependent type>' contains-errors
|     | | |-DeclRefExpr 0x13702a8b8 <col:3> 'int ()' Function 0x13702a800 'show_tree' 'int ()'
|     | | |-DeclRefExpr 0x13702a8d8 <col:13> 'struct diff_options *' lvalue ParmVar 0x13700e248 'opt' 'struct diff_options *'
|     | | |-DeclRefExpr 0x13702a8f8 <col:18> 'const char *' lvalue ParmVar 0x13700e2c8 'prefix' 'const char *'
|     | | |-UnaryOperator 0x13702a938 <col:26, col:27> '<dependent type>' contains-errors prefix '&' cannot overflow
|     | | | `-RecoveryExpr 0x13702a918 <col:27> '<dependent type>' contains-errors lvalue
|     | | |-DeclRefExpr 0x13702a950 <col:34> 'char *' lvalue Var 0x1370299c0 'newbase' 'char *'
|     | | `-BinaryOperator 0x13702aa20 <col:43, col:57> 'int' '+'
|     | |   |-BinaryOperator 0x13702a9c8 <col:43, col:53> 'int' '+'
|     | |   | |-ImplicitCastExpr 0x13702a9b0 <col:43> 'int' <LValueToRValue>
|     | |   | | `-DeclRefExpr 0x13702a970 <col:43> 'int' lvalue ParmVar 0x1370267c8 'baselen' 'int'
|     | |   | `-IntegerLiteral 0x13702a990 <col:53> 'int' 1
|     | |   `-ImplicitCastExpr 0x13702aa08 <col:57> 'int' <LValueToRValue>
|     | |     `-DeclRefExpr 0x13702a9e8 <col:57> 'int' lvalue Var 0x1370274d8 'pathlen' 'int'
|     | |-CallExpr 0x13702acd8 <line:23:3, col:12> 'void'
|     | | |-ImplicitCastExpr 0x13702acc0 <col:3> 'void (*)(void *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x13702ac38 <col:3> 'void (void *)' Function 0x13702aac8 'free' 'void (void *)'
|     | | `-ImplicitCastExpr 0x13702ad00 <col:8> 'void *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x13702ac58 <col:8> 'void *' lvalue Var 0x137029d78 'tree' 'void *'
|     | `-CallExpr 0x13702ad88 <line:24:3, col:15> 'void'
|     |   |-ImplicitCastExpr 0x13702ad70 <col:3> 'void (*)(void *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x13702ad18 <col:3> 'void (void *)' Function 0x13702aac8 'free' 'void (void *)'
|     |   `-ImplicitCastExpr 0x13702adc8 <col:8> 'void *' <BitCast>
|     |     `-ImplicitCastExpr 0x13702adb0 <col:8> 'char *' <LValueToRValue>
|     |       `-DeclRefExpr 0x13702ad38 <col:8> 'char *' lvalue Var 0x1370299c0 'newbase' 'char *'
|     `-CompoundStmt 0x13702b018 <line:25:9, line:27:2>
|       `-CallExpr 0x13702afc8 <line:26:3, col:57> '<dependent type>' contains-errors
|         |-RecoveryExpr 0x13702ae88 <col:3, col:8> '<dependent type>' contains-errors lvalue
|         | `-DeclRefExpr 0x13702ae50 <col:3> 'struct diff_options *' lvalue ParmVar 0x13700e248 'opt' 'struct diff_options *'
|         |-DeclRefExpr 0x13702aeb0 <col:19> 'struct diff_options *' lvalue ParmVar 0x13700e248 'opt' 'struct diff_options *'
|         |-ArraySubscriptExpr 0x13702af28 <col:24, col:32> 'const char' lvalue
|         | |-ImplicitCastExpr 0x13702af10 <col:24> 'const char *' <LValueToRValue>
|         | | `-DeclRefExpr 0x13702aed0 <col:24> 'const char *' lvalue ParmVar 0x13700e2c8 'prefix' 'const char *'
|         | `-IntegerLiteral 0x13702aef0 <col:31> 'int' 0
|         |-DeclRefExpr 0x13702af48 <col:35> 'unsigned int' lvalue Var 0x137026a60 'mode' 'unsigned int'
|         |-DeclRefExpr 0x13702af68 <col:41> 'const unsigned char *' lvalue Var 0x137026bc8 'sha1' 'const unsigned char *'
|         |-DeclRefExpr 0x13702af88 <col:47> 'const char *' lvalue ParmVar 0x137026748 'base' 'const char *'
|         `-DeclRefExpr 0x13702afa8 <col:53> 'const char *' lvalue Var 0x137026af8 'path' 'const char *'
`-FunctionDecl 0x13702aac8 <line:23:3> col:3 implicit used free 'void (void *)' extern
  |-ParmVarDecl 0x13702abc8 <<invalid sloc>> <invalid sloc> 'void *'
  `-BuiltinAttr 0x13702ab70 <<invalid sloc>> Implicit 873
