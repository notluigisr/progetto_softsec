TranslationUnitDecl 0x137055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1370564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x137055bd0 '__int128'
|-TypedefDecl 0x137056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x137055bf0 'unsigned __int128'
|-TypedefDecl 0x13780be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13780bc00 'struct __NSConstantString_tag'
|   `-Record 0x137056580 '__NSConstantString_tag'
|-TypedefDecl 0x13780be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x137055d90 '__SVInt8_t'
|-TypedefDecl 0x13780bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x137055db0 '__SVInt16_t'
|-TypedefDecl 0x13780bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x137055dd0 '__SVInt32_t'
|-TypedefDecl 0x13780bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x137055df0 '__SVInt64_t'
|-TypedefDecl 0x13780c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x137055e10 '__SVUint8_t'
|-TypedefDecl 0x13780c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x137055e30 '__SVUint16_t'
|-TypedefDecl 0x13780c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x137055e50 '__SVUint32_t'
|-TypedefDecl 0x13780c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x137055e70 '__SVUint64_t'
|-TypedefDecl 0x13780c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x137055e90 '__SVFloat16_t'
|-TypedefDecl 0x13780c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x137055eb0 '__SVFloat32_t'
|-TypedefDecl 0x13780c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x137055ed0 '__SVFloat64_t'
|-TypedefDecl 0x13780c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x137055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13780c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x137055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13780c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x137055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13780c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x137055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13780c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x137055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13780c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x137055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13780c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x137055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13780c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x137055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13780c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x137055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13780c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x137056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13780c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x137056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13780c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x137056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13780c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x137056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13780c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x137056090 '__clang_svint8x3_t'
|-TypedefDecl 0x13780c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1370560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13780c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1370560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13780c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1370560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13780c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x137056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13780ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x137056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13780cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x137056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13780cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x137056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13780cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x137056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13780d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1370561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13780d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1370561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13780d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1370561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13780d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x137056210 '__clang_svint8x4_t'
|-TypedefDecl 0x13780d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x137056230 '__clang_svint16x4_t'
|-TypedefDecl 0x13780d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x137056250 '__clang_svint32x4_t'
|-TypedefDecl 0x13780d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x137056270 '__clang_svint64x4_t'
|-TypedefDecl 0x13780d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x137056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13780d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1370562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13780d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1370562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13780d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1370562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13780d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x137056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13780d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x137056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13780d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x137056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13780d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x137056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13780da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x137056390 '__SVBool_t'
|-TypedefDecl 0x13780da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1370563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13780dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1370563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13780db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1370563f0 '__SVCount_t'
|-TypedefDecl 0x13780dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13780dbb0 'char *'
|   `-BuiltinType 0x1370556b0 'char'
|-TypedefDecl 0x13780dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13780dbb0 'char *'
|   `-BuiltinType 0x1370556b0 'char'
|-FunctionDecl 0x13780deb8 <dataset_diviso_filec/func24751_nonvuln.c:1:1, line:28:1> line:1:1 invalid parse_escape 'int (int *, const char **)'
| |-ParmVarDecl 0x13780dd28 <col:14, col:23> col:23 invalid ch_p 'int *'
| |-ParmVarDecl 0x13780ddd8 <col:29, col:42> col:42 used str_p 'const char **'
| `-CompoundStmt 0x13782bc60 <line:2:1, line:28:1>
|   |-IfStmt 0x13782bad0 <line:5:2, line:24:2> has_else
|   | |-BinaryOperator 0x1378286c8 <line:5:6, line:7:55> 'int' '&&'
|   | | |-BinaryOperator 0x1378284f0 <line:5:6, line:7:16> 'int' '&&'
|   | | | |-BinaryOperator 0x1378283d8 <line:5:6, line:6:55> 'int' '&&'
|   | | | | |-BinaryOperator 0x137828200 <line:5:6, line:6:16> 'int' '&&'
|   | | | | | |-BinaryOperator 0x1378280e8 <line:5:6, col:55> 'int' '&&'
|   | | | | | | |-ImplicitCastExpr 0x1378280d0 <col:6, col:16> 'int' <IntegralCast>
|   | | | | | | | `-ImplicitCastExpr 0x1378280b8 <col:6, col:16> 'char' <LValueToRValue>
|   | | | | | | |   `-ArraySubscriptExpr 0x13780e018 <col:6, col:16> 'const char' lvalue
|   | | | | | | |     |-ImplicitCastExpr 0x13780e000 <col:6, col:13> 'const char *' <LValueToRValue>
|   | | | | | | |     | `-ParenExpr 0x13780dfc0 <col:6, col:13> 'const char *' lvalue
|   | | | | | | |     |   `-UnaryOperator 0x13780dfa8 <col:7, col:8> 'const char *' lvalue prefix '*' cannot overflow
|   | | | | | | |     |     `-ImplicitCastExpr 0x13780df90 <col:8> 'const char **' <LValueToRValue>
|   | | | | | | |     |       `-DeclRefExpr 0x13780df70 <col:8> 'const char **' lvalue ParmVar 0x13780ddd8 'str_p' 'const char **'
|   | | | | | | |     `-IntegerLiteral 0x13780dfe0 <col:15> 'int' 0
|   | | | | | | `-CallExpr 0x137828078 <col:21, col:55> 'int'
|   | | | | | |   |-ImplicitCastExpr 0x137828060 <col:21> 'int (*)(int)' <FunctionToPointerDecay>
|   | | | | | |   | `-DeclRefExpr 0x137827ed0 <col:21> 'int (int)' Function 0x137827d10 'isdigit' 'int (int)'
|   | | | | | |   `-ImplicitCastExpr 0x1378280a0 <col:29, col:54> 'int' <IntegralCast>
|   | | | | | |     `-CStyleCastExpr 0x137828008 <col:29, col:54> 'unsigned char' <IntegralCast>
|   | | | | | |       `-ImplicitCastExpr 0x137827ff0 <col:44, col:54> 'char' <LValueToRValue> part_of_explicit_cast
|   | | | | | |         `-ArraySubscriptExpr 0x137827fb8 <col:44, col:54> 'const char' lvalue
|   | | | | | |           |-ImplicitCastExpr 0x137827fa0 <col:44, col:51> 'const char *' <LValueToRValue>
|   | | | | | |           | `-ParenExpr 0x137827f80 <col:44, col:51> 'const char *' lvalue
|   | | | | | |           |   `-UnaryOperator 0x137827f28 <col:45, col:46> 'const char *' lvalue prefix '*' cannot overflow
|   | | | | | |           |     `-ImplicitCastExpr 0x137827f10 <col:46> 'const char **' <LValueToRValue>
|   | | | | | |           |       `-DeclRefExpr 0x137827ef0 <col:46> 'const char **' lvalue ParmVar 0x13780ddd8 'str_p' 'const char **'
|   | | | | | |           `-IntegerLiteral 0x137827f60 <col:53> 'int' 0
|   | | | | | `-ImplicitCastExpr 0x1378281e8 <line:6:6, col:16> 'int' <IntegralCast>
|   | | | | |   `-ImplicitCastExpr 0x1378281d0 <col:6, col:16> 'char' <LValueToRValue>
|   | | | | |     `-ArraySubscriptExpr 0x1378281b0 <col:6, col:16> 'const char' lvalue
|   | | | | |       |-ImplicitCastExpr 0x137828198 <col:6, col:13> 'const char *' <LValueToRValue>
|   | | | | |       | `-ParenExpr 0x137828158 <col:6, col:13> 'const char *' lvalue
|   | | | | |       |   `-UnaryOperator 0x137828140 <col:7, col:8> 'const char *' lvalue prefix '*' cannot overflow
|   | | | | |       |     `-ImplicitCastExpr 0x137828128 <col:8> 'const char **' <LValueToRValue>
|   | | | | |       |       `-DeclRefExpr 0x137828108 <col:8> 'const char **' lvalue ParmVar 0x13780ddd8 'str_p' 'const char **'
|   | | | | |       `-IntegerLiteral 0x137828178 <col:15> 'int' 1
|   | | | | `-CallExpr 0x137828398 <col:21, col:55> 'int'
|   | | | |   |-ImplicitCastExpr 0x137828380 <col:21> 'int (*)(int)' <FunctionToPointerDecay>
|   | | | |   | `-DeclRefExpr 0x137828220 <col:21> 'int (int)' Function 0x137827d10 'isdigit' 'int (int)'
|   | | | |   `-ImplicitCastExpr 0x1378283c0 <col:29, col:54> 'int' <IntegralCast>
|   | | | |     `-CStyleCastExpr 0x137828358 <col:29, col:54> 'unsigned char' <IntegralCast>
|   | | | |       `-ImplicitCastExpr 0x137828340 <col:44, col:54> 'char' <LValueToRValue> part_of_explicit_cast
|   | | | |         `-ArraySubscriptExpr 0x137828308 <col:44, col:54> 'const char' lvalue
|   | | | |           |-ImplicitCastExpr 0x1378282f0 <col:44, col:51> 'const char *' <LValueToRValue>
|   | | | |           | `-ParenExpr 0x1378282d0 <col:44, col:51> 'const char *' lvalue
|   | | | |           |   `-UnaryOperator 0x137828278 <col:45, col:46> 'const char *' lvalue prefix '*' cannot overflow
|   | | | |           |     `-ImplicitCastExpr 0x137828260 <col:46> 'const char **' <LValueToRValue>
|   | | | |           |       `-DeclRefExpr 0x137828240 <col:46> 'const char **' lvalue ParmVar 0x13780ddd8 'str_p' 'const char **'
|   | | | |           `-IntegerLiteral 0x1378282b0 <col:53> 'int' 1
|   | | | `-ImplicitCastExpr 0x1378284d8 <line:7:6, col:16> 'int' <IntegralCast>
|   | | |   `-ImplicitCastExpr 0x1378284c0 <col:6, col:16> 'char' <LValueToRValue>
|   | | |     `-ArraySubscriptExpr 0x1378284a0 <col:6, col:16> 'const char' lvalue
|   | | |       |-ImplicitCastExpr 0x137828488 <col:6, col:13> 'const char *' <LValueToRValue>
|   | | |       | `-ParenExpr 0x137828448 <col:6, col:13> 'const char *' lvalue
|   | | |       |   `-UnaryOperator 0x137828430 <col:7, col:8> 'const char *' lvalue prefix '*' cannot overflow
|   | | |       |     `-ImplicitCastExpr 0x137828418 <col:8> 'const char **' <LValueToRValue>
|   | | |       |       `-DeclRefExpr 0x1378283f8 <col:8> 'const char **' lvalue ParmVar 0x13780ddd8 'str_p' 'const char **'
|   | | |       `-IntegerLiteral 0x137828468 <col:15> 'int' 2
|   | | `-CallExpr 0x137828688 <col:21, col:55> 'int'
|   | |   |-ImplicitCastExpr 0x137828670 <col:21> 'int (*)(int)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x137828510 <col:21> 'int (int)' Function 0x137827d10 'isdigit' 'int (int)'
|   | |   `-ImplicitCastExpr 0x1378286b0 <col:29, col:54> 'int' <IntegralCast>
|   | |     `-CStyleCastExpr 0x137828648 <col:29, col:54> 'unsigned char' <IntegralCast>
|   | |       `-ImplicitCastExpr 0x137828630 <col:44, col:54> 'char' <LValueToRValue> part_of_explicit_cast
|   | |         `-ArraySubscriptExpr 0x1378285f8 <col:44, col:54> 'const char' lvalue
|   | |           |-ImplicitCastExpr 0x1378285e0 <col:44, col:51> 'const char *' <LValueToRValue>
|   | |           | `-ParenExpr 0x1378285c0 <col:44, col:51> 'const char *' lvalue
|   | |           |   `-UnaryOperator 0x137828568 <col:45, col:46> 'const char *' lvalue prefix '*' cannot overflow
|   | |           |     `-ImplicitCastExpr 0x137828550 <col:46> 'const char **' <LValueToRValue>
|   | |           |       `-DeclRefExpr 0x137828530 <col:46> 'const char **' lvalue ParmVar 0x13780ddd8 'str_p' 'const char **'
|   | |           `-IntegerLiteral 0x1378285a0 <col:53> 'int' 2
|   | |-CompoundStmt 0x13782b650 <col:59, line:20:2>
|   | | |-IfStmt 0x13782b4e0 <line:13:3, line:15:3>
|   | | | |-BinaryOperator 0x13782b440 <line:13:7, col:13> 'int' contains-errors '>'
|   | | | | |-RecoveryExpr 0x13782b420 <col:7> '<dependent type>' contains-errors lvalue
|   | | | | `-IntegerLiteral 0x137828bc8 <col:13> 'int' 255
|   | | | `-CompoundStmt 0x13782b4c8 <col:18, line:15:3>
|   | | |   `-GotoStmt 0x13782b4b0 <line:14:4, col:9> 'error' 0x13782b460
|   | | |-CompoundAssignOperator 0x13782b5d8 <line:17:3, col:13> 'const char *' '+=' ComputeLHSTy='const char *' ComputeResultTy='const char *'
|   | | | |-UnaryOperator 0x13782b5a0 <col:3, col:4> 'const char *' lvalue prefix '*' cannot overflow
|   | | | | `-ImplicitCastExpr 0x13782b588 <col:4> 'const char **' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x13782b568 <col:4> 'const char **' lvalue ParmVar 0x13780ddd8 'str_p' 'const char **'
|   | | | `-IntegerLiteral 0x13782b5b8 <col:13> 'int' 3
|   | | `-ReturnStmt 0x13782b640 <line:18:3, col:10>
|   | |   `-RecoveryExpr 0x13782b620 <col:10> '<dependent type>' contains-errors lvalue
|   | `-IfStmt 0x13782bab0 <line:20:9, line:24:2>
|   |   |-BinaryOperator 0x13782b940 <line:20:13, col:63> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x13782b928 <col:13, col:23> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x13782b910 <col:13, col:23> 'char' <LValueToRValue>
|   |   | |   `-ArraySubscriptExpr 0x13782b720 <col:13, col:23> 'const char' lvalue
|   |   | |     |-ImplicitCastExpr 0x13782b708 <col:13, col:20> 'const char *' <LValueToRValue>
|   |   | |     | `-ParenExpr 0x13782b6c8 <col:13, col:20> 'const char *' lvalue
|   |   | |     |   `-UnaryOperator 0x13782b6b0 <col:14, col:15> 'const char *' lvalue prefix '*' cannot overflow
|   |   | |     |     `-ImplicitCastExpr 0x13782b698 <col:15> 'const char **' <LValueToRValue>
|   |   | |     |       `-DeclRefExpr 0x13782b678 <col:15> 'const char **' lvalue ParmVar 0x13780ddd8 'str_p' 'const char **'
|   |   | |     `-IntegerLiteral 0x13782b6e8 <col:22> 'int' 0
|   |   | `-UnaryOperator 0x13782b8f8 <col:28, col:63> 'int' prefix '!' cannot overflow
|   |   |   `-CallExpr 0x13782b8b8 <col:29, col:63> 'int'
|   |   |     |-ImplicitCastExpr 0x13782b8a0 <col:29> 'int (*)(int)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x13782b740 <col:29> 'int (int)' Function 0x137827d10 'isdigit' 'int (int)'
|   |   |     `-ImplicitCastExpr 0x13782b8e0 <col:37, col:62> 'int' <IntegralCast>
|   |   |       `-CStyleCastExpr 0x13782b878 <col:37, col:62> 'unsigned char' <IntegralCast>
|   |   |         `-ImplicitCastExpr 0x13782b860 <col:52, col:62> 'char' <LValueToRValue> part_of_explicit_cast
|   |   |           `-ArraySubscriptExpr 0x13782b828 <col:52, col:62> 'const char' lvalue
|   |   |             |-ImplicitCastExpr 0x13782b810 <col:52, col:59> 'const char *' <LValueToRValue>
|   |   |             | `-ParenExpr 0x13782b7f0 <col:52, col:59> 'const char *' lvalue
|   |   |             |   `-UnaryOperator 0x13782b798 <col:53, col:54> 'const char *' lvalue prefix '*' cannot overflow
|   |   |             |     `-ImplicitCastExpr 0x13782b780 <col:54> 'const char **' <LValueToRValue>
|   |   |             |       `-DeclRefExpr 0x13782b760 <col:54> 'const char **' lvalue ParmVar 0x13780ddd8 'str_p' 'const char **'
|   |   |             `-IntegerLiteral 0x13782b7d0 <col:61> 'int' 0
|   |   `-CompoundStmt 0x13782ba98 <col:66, line:24:2>
|   |     `-ReturnStmt 0x13782ba88 <line:23:3, col:10>
|   |       `-RecoveryExpr 0x13782ba68 <col:10> '<dependent type>' contains-errors lvalue
|   `-LabelStmt 0x13782bc28 <line:25:1, line:26:11> 'error'
|     `-BinaryOperator 0x13782bc08 <col:2, col:11> 'const char *' contains-errors '='
|       |-UnaryOperator 0x13782bbd0 <col:2, col:3> 'const char *' lvalue prefix '*' cannot overflow
|       | `-ImplicitCastExpr 0x13782bbb8 <col:3> 'const char **' <LValueToRValue>
|       |   `-DeclRefExpr 0x13782bb00 <col:3> 'const char **' lvalue ParmVar 0x13780ddd8 'str_p' 'const char **'
|       `-RecoveryExpr 0x13782bbe8 <col:11> '<dependent type>' contains-errors lvalue
`-FunctionDecl 0x137827d10 <line:5:21> col:21 implicit used isdigit 'int (int)' extern
  |-ParmVarDecl 0x137827e10 <<invalid sloc>> <invalid sloc> 'int'
  |-BuiltinAttr 0x137827db8 <<invalid sloc>> Implicit 924
  |-NoThrowAttr 0x137827e80 <col:21> Implicit
  `-PureAttr 0x137827ea8 <col:21> Implicit
