TranslationUnitDecl 0x132855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1328564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x132855bd0 '__int128'
|-TypedefDecl 0x132856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x132855bf0 'unsigned __int128'
|-TypedefDecl 0x13300be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13300bc00 'struct __NSConstantString_tag'
|   `-Record 0x132856580 '__NSConstantString_tag'
|-TypedefDecl 0x13300be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x132855d90 '__SVInt8_t'
|-TypedefDecl 0x13300bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x132855db0 '__SVInt16_t'
|-TypedefDecl 0x13300bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x132855dd0 '__SVInt32_t'
|-TypedefDecl 0x13300bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x132855df0 '__SVInt64_t'
|-TypedefDecl 0x13300c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x132855e10 '__SVUint8_t'
|-TypedefDecl 0x13300c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x132855e30 '__SVUint16_t'
|-TypedefDecl 0x13300c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x132855e50 '__SVUint32_t'
|-TypedefDecl 0x13300c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x132855e70 '__SVUint64_t'
|-TypedefDecl 0x13300c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x132855e90 '__SVFloat16_t'
|-TypedefDecl 0x13300c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x132855eb0 '__SVFloat32_t'
|-TypedefDecl 0x13300c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x132855ed0 '__SVFloat64_t'
|-TypedefDecl 0x13300c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x132855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13300c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x132855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13300c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x132855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13300c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x132855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13300c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x132855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13300c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x132855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13300c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x132855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13300c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x132855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13300c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x132855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13300c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x132856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13300c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x132856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13300c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x132856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13300c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x132856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13300c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x132856090 '__clang_svint8x3_t'
|-TypedefDecl 0x13300c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1328560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13300c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1328560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13300c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1328560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13300c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x132856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13300ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x132856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13300cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x132856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13300cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x132856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13300cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x132856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13300d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1328561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13300d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1328561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13300d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1328561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13300d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x132856210 '__clang_svint8x4_t'
|-TypedefDecl 0x13300d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x132856230 '__clang_svint16x4_t'
|-TypedefDecl 0x13300d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x132856250 '__clang_svint32x4_t'
|-TypedefDecl 0x13300d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x132856270 '__clang_svint64x4_t'
|-TypedefDecl 0x13300d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x132856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13300d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1328562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13300d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1328562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13300d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1328562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13300d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x132856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13300d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x132856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13300d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x132856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13300d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x132856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13300da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x132856390 '__SVBool_t'
|-TypedefDecl 0x13300da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1328563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13300dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1328563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13300db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1328563f0 '__SVCount_t'
|-TypedefDecl 0x13300dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13300dbb0 'char *'
|   `-BuiltinType 0x1328556b0 'char'
|-TypedefDecl 0x13300dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13300dbb0 'char *'
|   `-BuiltinType 0x1328556b0 'char'
|-FunctionDecl 0x13300dfa0 <dataset_diviso_filec/func16978_vuln.c:1:1, line:59:1> line:1:6 invalid jpc_qmfb_split_col 'void (int *, int, int, int)'
| |-ParmVarDecl 0x13300dd28 <col:25, col:36> col:36 invalid a 'int *'
| |-ParmVarDecl 0x13300dda8 <col:39, col:43> col:43 used numrows 'int'
| |-ParmVarDecl 0x13300de28 <col:52, col:56> col:56 used stride 'int'
| |-ParmVarDecl 0x13300dea8 <line:2:3, col:7> col:7 used parity 'int'
| `-CompoundStmt 0x133029a08 <line:3:1, line:59:1>
|   |-DeclStmt 0x13300e330 <line:5:2, col:43>
|   | `-VarDecl 0x13300e080 <col:2, col:42> col:6 used bufsize 'int' cinit
|   |   `-CallExpr 0x13300e2e8 <col:16, col:42> 'int'
|   |     |-ImplicitCastExpr 0x13300e2d0 <col:16> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x13300e240 <col:16> 'int ()' Function 0x13300e188 'JPC_CEILDIVPOW2' 'int ()'
|   |     |-ImplicitCastExpr 0x13300e318 <col:32> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x13300e260 <col:32> 'int' lvalue ParmVar 0x13300dda8 'numrows' 'int'
|   |     `-IntegerLiteral 0x13300e280 <col:41> 'int' 1
|   |-DeclStmt 0x133027800 <line:8:2, col:28>
|   | `-VarDecl 0x13300e390 <col:2, col:22> col:22 referenced invalid srcptr 'int *' register
|   |-DeclStmt 0x133027898 <line:9:2, col:28>
|   | `-VarDecl 0x133027830 <col:2, col:22> col:22 referenced invalid dstptr 'int *' register
|   |-DeclStmt 0x133027930 <line:10:2, col:16>
|   | `-VarDecl 0x1330278c8 <col:2, col:15> col:15 used n 'int' register
|   |-DeclStmt 0x1330279c8 <line:11:2, col:16>
|   | `-VarDecl 0x133027960 <col:2, col:15> col:15 used m 'int' register
|   |-DeclStmt 0x133027a60 <line:12:2, col:15>
|   | `-VarDecl 0x1330279f8 <col:2, col:6> col:6 used hstartcol 'int'
|   |-IfStmt 0x1330282a8 <line:15:2, line:20:2>
|   | |-BinaryOperator 0x133027af0 <line:15:6, col:16> 'int' contains-errors '>'
|   | | |-DeclRefExpr 0x133027a78 <col:6> 'int' lvalue Var 0x13300e080 'bufsize' 'int'
|   | | `-RecoveryExpr 0x133027ad0 <col:16> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x133028290 <col:35, line:20:2>
|   |   `-IfStmt 0x133028270 <line:16:3, line:19:3>
|   |     |-RecoveryExpr 0x133027c60 <line:16:7, col:54> '_Bool' contains-errors
|   |     `-CompoundStmt 0x133028258 <col:57, line:19:3>
|   |       `-CallExpr 0x133028238 <line:18:4, col:10> 'void'
|   |         `-ImplicitCastExpr 0x133028220 <col:4> 'void (*)(void) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |           `-DeclRefExpr 0x1330281d0 <col:4> 'void (void) __attribute__((noreturn))' Function 0x1330280d0 'abort' 'void (void) __attribute__((noreturn))'
|   |-IfStmt 0x133029778 <line:22:2, line:52:2>
|   | |-BinaryOperator 0x133028320 <line:22:6, col:17> 'int' '>='
|   | | |-ImplicitCastExpr 0x133028308 <col:6> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1330282c8 <col:6> 'int' lvalue ParmVar 0x13300dda8 'numrows' 'int'
|   | | `-IntegerLiteral 0x1330282e8 <col:17> 'int' 2
|   | `-CompoundStmt 0x1330296f8 <col:20, line:52:2>
|   |   |-BinaryOperator 0x133028490 <line:23:3, col:41> 'int' '='
|   |   | |-DeclRefExpr 0x133028340 <col:3> 'int' lvalue Var 0x1330279f8 'hstartcol' 'int'
|   |   | `-BinaryOperator 0x133028470 <col:15, col:41> 'int' '>>'
|   |   |   |-ParenExpr 0x133028430 <col:15, col:36> 'int'
|   |   |   | `-BinaryOperator 0x133028410 <col:16, col:30> 'int' '-'
|   |   |   |   |-BinaryOperator 0x1330283b8 <col:16, col:26> 'int' '+'
|   |   |   |   | |-ImplicitCastExpr 0x1330283a0 <col:16> 'int' <LValueToRValue>
|   |   |   |   | | `-DeclRefExpr 0x133028360 <col:16> 'int' lvalue ParmVar 0x13300dda8 'numrows' 'int'
|   |   |   |   | `-IntegerLiteral 0x133028380 <col:26> 'int' 1
|   |   |   |   `-ImplicitCastExpr 0x1330283f8 <col:30> 'int' <LValueToRValue>
|   |   |   |     `-DeclRefExpr 0x1330283d8 <col:30> 'int' lvalue ParmVar 0x13300dea8 'parity' 'int'
|   |   |   `-IntegerLiteral 0x133028450 <col:41> 'int' 1
|   |   |-BinaryOperator 0x133028640 <line:24:3, col:50> 'int' '='
|   |   | |-DeclRefExpr 0x1330284b0 <col:3> 'int' lvalue Var 0x133027960 'm' 'int'
|   |   | `-ConditionalOperator 0x133028610 <col:7, col:50> 'int'
|   |   |   |-ImplicitCastExpr 0x1330285e0 <col:7, col:14> 'int' <LValueToRValue>
|   |   |   | `-ParenExpr 0x1330284f0 <col:7, col:14> 'int' lvalue
|   |   |   |   `-DeclRefExpr 0x1330284d0 <col:8> 'int' lvalue ParmVar 0x13300dea8 'parity' 'int'
|   |   |   |-ImplicitCastExpr 0x1330285f8 <col:18> 'int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x133028510 <col:18> 'int' lvalue Var 0x1330279f8 'hstartcol' 'int'
|   |   |   `-ParenExpr 0x1330285c0 <col:30, col:50> 'int'
|   |   |     `-BinaryOperator 0x1330285a0 <col:31, col:41> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x133028570 <col:31> 'int' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x133028530 <col:31> 'int' lvalue ParmVar 0x13300dda8 'numrows' 'int'
|   |   |       `-ImplicitCastExpr 0x133028588 <col:41> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x133028550 <col:41> 'int' lvalue Var 0x1330279f8 'hstartcol' 'int'
|   |   |-BinaryOperator 0x1330286b8 <line:26:3, col:7> 'int' '='
|   |   | |-DeclRefExpr 0x133028660 <col:3> 'int' lvalue Var 0x1330278c8 'n' 'int'
|   |   | `-ImplicitCastExpr 0x1330286a0 <col:7> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x133028680 <col:7> 'int' lvalue Var 0x133027960 'm' 'int'
|   |   |-BinaryOperator 0x133028778 <line:27:3, col:12> '<dependent type>' contains-errors '='
|   |   | |-RecoveryExpr 0x1330286f8 <col:3> '<dependent type>' contains-errors lvalue
|   |   | | `-DeclRefExpr 0x1330286d8 <col:3> 'int *' lvalue Var 0x133027830 'dstptr' 'int *'
|   |   | `-RecoveryExpr 0x133028758 <col:12> '<dependent type>' contains-errors lvalue
|   |   |-BinaryOperator 0x132923340 <line:28:3, col:36> '<dependent type>' contains-errors '='
|   |   | |-RecoveryExpr 0x1330287b8 <col:3> '<dependent type>' contains-errors lvalue
|   |   | | `-DeclRefExpr 0x133028798 <col:3> 'int *' lvalue Var 0x13300e390 'srcptr' 'int *'
|   |   | `-UnaryOperator 0x132923328 <col:12, col:36> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   |   `-ArraySubscriptExpr 0x132923308 <col:13, col:36> '<dependent type>' contains-errors lvalue
|   |   |     |-ImplicitCastExpr 0x1329232f0 <col:13> '<dependent type>' contains-errors <LValueToRValue>
|   |   |     | `-RecoveryExpr 0x1330287e0 <col:13> '<dependent type>' contains-errors lvalue
|   |   |     `-BinaryOperator 0x1329232d0 <col:15, col:30> 'int' '*'
|   |   |       |-ParenExpr 0x132923278 <col:15, col:26> 'int'
|   |   |       | `-BinaryOperator 0x132923258 <col:16, col:20> 'int' '-'
|   |   |       |   |-IntegerLiteral 0x132923200 <col:16> 'int' 1
|   |   |       |   `-ImplicitCastExpr 0x132923240 <col:20> 'int' <LValueToRValue>
|   |   |       |     `-DeclRefExpr 0x132923220 <col:20> 'int' lvalue ParmVar 0x13300dea8 'parity' 'int'
|   |   |       `-ImplicitCastExpr 0x1329232b8 <col:30> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x132923298 <col:30> 'int' lvalue ParmVar 0x13300de28 'stride' 'int'
|   |   |-WhileStmt 0x1329235e8 <line:29:3, line:33:3>
|   |   | |-BinaryOperator 0x1329233b8 <line:29:10, col:16> 'int' '>'
|   |   | | |-UnaryOperator 0x132923380 <col:10, col:11> 'int' postfix '--'
|   |   | | | `-DeclRefExpr 0x132923360 <col:10> 'int' lvalue Var 0x1330278c8 'n' 'int'
|   |   | | `-IntegerLiteral 0x132923398 <col:16> 'int' 0
|   |   | `-CompoundStmt 0x1329235c0 <col:19, line:33:3>
|   |   |   |-BinaryOperator 0x132923478 <line:30:4, col:15> '<dependent type>' contains-errors '='
|   |   |   | |-UnaryOperator 0x132923410 <col:4, col:5> '<dependent type>' contains-errors prefix '*' cannot overflow
|   |   |   | | `-ImplicitCastExpr 0x1329233f8 <col:5> '<dependent type>' contains-errors <LValueToRValue>
|   |   |   | |   `-RecoveryExpr 0x1329233d8 <col:5> '<dependent type>' contains-errors lvalue
|   |   |   | `-UnaryOperator 0x132923460 <col:14, col:15> '<dependent type>' contains-errors prefix '*' cannot overflow
|   |   |   |   `-ImplicitCastExpr 0x132923448 <col:15> '<dependent type>' contains-errors <LValueToRValue>
|   |   |   |     `-RecoveryExpr 0x132923428 <col:15> '<dependent type>' contains-errors lvalue
|   |   |   |-UnaryOperator 0x1329234b8 <line:31:4, col:6> '<dependent type>' contains-errors prefix '++' cannot overflow
|   |   |   | `-RecoveryExpr 0x132923498 <col:6> '<dependent type>' contains-errors lvalue
|   |   |   `-CompoundAssignOperator 0x132923590 <line:32:4, col:24> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   |   |     |-RecoveryExpr 0x1329234f0 <col:4> '<dependent type>' contains-errors lvalue
|   |   |     | `-DeclRefExpr 0x1329234d0 <col:4> 'int *' lvalue Var 0x13300e390 'srcptr' 'int *'
|   |   |     `-BinaryOperator 0x132923570 <col:14, col:24> 'int' '<<'
|   |   |       |-ImplicitCastExpr 0x132923558 <col:14> 'int' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x132923518 <col:14> 'int' lvalue ParmVar 0x13300de28 'stride' 'int'
|   |   |       `-IntegerLiteral 0x132923538 <col:24> 'int' 1
|   |   |-BinaryOperator 0x1329237b0 <line:35:3, col:36> '<dependent type>' contains-errors '='
|   |   | |-RecoveryExpr 0x132923628 <col:3> '<dependent type>' contains-errors lvalue
|   |   | | `-DeclRefExpr 0x132923608 <col:3> 'int *' lvalue Var 0x133027830 'dstptr' 'int *'
|   |   | `-UnaryOperator 0x132923798 <col:12, col:36> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   |   `-ArraySubscriptExpr 0x132923778 <col:13, col:36> '<dependent type>' contains-errors lvalue
|   |   |     |-ImplicitCastExpr 0x132923760 <col:13> '<dependent type>' contains-errors <LValueToRValue>
|   |   |     | `-RecoveryExpr 0x132923650 <col:13> '<dependent type>' contains-errors lvalue
|   |   |     `-BinaryOperator 0x132923740 <col:15, col:30> 'int' '*'
|   |   |       |-ParenExpr 0x1329236e8 <col:15, col:26> 'int'
|   |   |       | `-BinaryOperator 0x1329236c8 <col:16, col:20> 'int' '-'
|   |   |       |   |-IntegerLiteral 0x132923670 <col:16> 'int' 1
|   |   |       |   `-ImplicitCastExpr 0x1329236b0 <col:20> 'int' <LValueToRValue>
|   |   |       |     `-DeclRefExpr 0x132923690 <col:20> 'int' lvalue ParmVar 0x13300dea8 'parity' 'int'
|   |   |       `-ImplicitCastExpr 0x132923728 <col:30> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x132923708 <col:30> 'int' lvalue ParmVar 0x13300de28 'stride' 'int'
|   |   |-BinaryOperator 0x132923978 <line:36:3, col:36> '<dependent type>' contains-errors '='
|   |   | |-RecoveryExpr 0x1329237f0 <col:3> '<dependent type>' contains-errors lvalue
|   |   | | `-DeclRefExpr 0x1329237d0 <col:3> 'int *' lvalue Var 0x13300e390 'srcptr' 'int *'
|   |   | `-UnaryOperator 0x132923960 <col:12, col:36> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   |   `-ArraySubscriptExpr 0x132923940 <col:13, col:36> '<dependent type>' contains-errors lvalue
|   |   |     |-ImplicitCastExpr 0x132923928 <col:13> '<dependent type>' contains-errors <LValueToRValue>
|   |   |     | `-RecoveryExpr 0x132923818 <col:13> '<dependent type>' contains-errors lvalue
|   |   |     `-BinaryOperator 0x132923908 <col:15, col:30> 'int' '*'
|   |   |       |-ParenExpr 0x1329238b0 <col:15, col:26> 'int'
|   |   |       | `-BinaryOperator 0x132923890 <col:16, col:20> 'int' '-'
|   |   |       |   |-IntegerLiteral 0x132923838 <col:16> 'int' 2
|   |   |       |   `-ImplicitCastExpr 0x132923878 <col:20> 'int' <LValueToRValue>
|   |   |       |     `-DeclRefExpr 0x132923858 <col:20> 'int' lvalue ParmVar 0x13300dea8 'parity' 'int'
|   |   |       `-ImplicitCastExpr 0x1329238f0 <col:30> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x1329238d0 <col:30> 'int' lvalue ParmVar 0x13300de28 'stride' 'int'
|   |   |-BinaryOperator 0x132923ad8 <line:37:3, col:29> 'int' '='
|   |   | |-DeclRefExpr 0x132923998 <col:3> 'int' lvalue Var 0x1330278c8 'n' 'int'
|   |   | `-BinaryOperator 0x132923ab8 <col:7, col:29> 'int' '-'
|   |   |   |-BinaryOperator 0x132923a28 <col:7, col:17> 'int' '-'
|   |   |   | |-ImplicitCastExpr 0x1329239f8 <col:7> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x1329239b8 <col:7> 'int' lvalue ParmVar 0x13300dda8 'numrows' 'int'
|   |   |   | `-ImplicitCastExpr 0x132923a10 <col:17> 'int' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x1329239d8 <col:17> 'int' lvalue Var 0x133027960 'm' 'int'
|   |   |   `-ParenExpr 0x132923a98 <col:21, col:29> 'int'
|   |   |     `-UnaryOperator 0x132923a80 <col:22, col:23> 'int' prefix '!' cannot overflow
|   |   |       `-ImplicitCastExpr 0x132923a68 <col:23> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x132923a48 <col:23> 'int' lvalue ParmVar 0x13300dea8 'parity' 'int'
|   |   |-WhileStmt 0x132923de0 <line:38:3, line:42:3>
|   |   | |-BinaryOperator 0x132923b50 <line:38:10, col:16> 'int' '>'
|   |   | | |-UnaryOperator 0x132923b18 <col:10, col:11> 'int' postfix '--'
|   |   | | | `-DeclRefExpr 0x132923af8 <col:10> 'int' lvalue Var 0x1330278c8 'n' 'int'
|   |   | | `-IntegerLiteral 0x132923b30 <col:16> 'int' 0
|   |   | `-CompoundStmt 0x132923db8 <col:19, line:42:3>
|   |   |   |-BinaryOperator 0x132923c10 <line:39:4, col:15> '<dependent type>' contains-errors '='
|   |   |   | |-UnaryOperator 0x132923ba8 <col:4, col:5> '<dependent type>' contains-errors prefix '*' cannot overflow
|   |   |   | | `-ImplicitCastExpr 0x132923b90 <col:5> '<dependent type>' contains-errors <LValueToRValue>
|   |   |   | |   `-RecoveryExpr 0x132923b70 <col:5> '<dependent type>' contains-errors lvalue
|   |   |   | `-UnaryOperator 0x132923bf8 <col:14, col:15> '<dependent type>' contains-errors prefix '*' cannot overflow
|   |   |   |   `-ImplicitCastExpr 0x132923be0 <col:15> '<dependent type>' contains-errors <LValueToRValue>
|   |   |   |     `-RecoveryExpr 0x132923bc0 <col:15> '<dependent type>' contains-errors lvalue
|   |   |   |-CompoundAssignOperator 0x132923c98 <line:40:4, col:14> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   |   |   | |-RecoveryExpr 0x132923c50 <col:4> '<dependent type>' contains-errors lvalue
|   |   |   | | `-DeclRefExpr 0x132923c30 <col:4> 'int *' lvalue Var 0x133027830 'dstptr' 'int *'
|   |   |   | `-DeclRefExpr 0x132923c78 <col:14> 'int' lvalue ParmVar 0x13300de28 'stride' 'int'
|   |   |   `-CompoundAssignOperator 0x132923d88 <line:41:4, col:24> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   |   |     |-RecoveryExpr 0x132923ce8 <col:4> '<dependent type>' contains-errors lvalue
|   |   |     | `-DeclRefExpr 0x132923cc8 <col:4> 'int *' lvalue Var 0x13300e390 'srcptr' 'int *'
|   |   |     `-BinaryOperator 0x132923d68 <col:14, col:24> 'int' '<<'
|   |   |       |-ImplicitCastExpr 0x132923d50 <col:14> 'int' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x132923d10 <col:14> 'int' lvalue ParmVar 0x13300de28 'stride' 'int'
|   |   |       `-IntegerLiteral 0x132923d30 <col:24> 'int' 1
|   |   |-BinaryOperator 0x132923f48 <line:44:3, col:33> '<dependent type>' contains-errors '='
|   |   | |-RecoveryExpr 0x132923e20 <col:3> '<dependent type>' contains-errors lvalue
|   |   | | `-DeclRefExpr 0x132923e00 <col:3> 'int *' lvalue Var 0x133027830 'dstptr' 'int *'
|   |   | `-UnaryOperator 0x132923f30 <col:12, col:33> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   |   `-ArraySubscriptExpr 0x132923f10 <col:13, col:33> '<dependent type>' contains-errors lvalue
|   |   |     |-ImplicitCastExpr 0x132923ef8 <col:13> '<dependent type>' contains-errors <LValueToRValue>
|   |   |     | `-RecoveryExpr 0x132923e48 <col:13> '<dependent type>' contains-errors lvalue
|   |   |     `-BinaryOperator 0x132923ed8 <col:15, col:27> 'int' '*'
|   |   |       |-ImplicitCastExpr 0x132923ea8 <col:15> 'int' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x132923e68 <col:15> 'int' lvalue Var 0x1330279f8 'hstartcol' 'int'
|   |   |       `-ImplicitCastExpr 0x132923ec0 <col:27> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x132923e88 <col:27> 'int' lvalue ParmVar 0x13300de28 'stride' 'int'
|   |   |-BinaryOperator 0x132924008 <line:45:3, col:12> '<dependent type>' contains-errors '='
|   |   | |-RecoveryExpr 0x132923f88 <col:3> '<dependent type>' contains-errors lvalue
|   |   | | `-DeclRefExpr 0x132923f68 <col:3> 'int *' lvalue Var 0x13300e390 'srcptr' 'int *'
|   |   | `-RecoveryExpr 0x132923fe8 <col:12> '<dependent type>' contains-errors lvalue
|   |   |-BinaryOperator 0x132924080 <line:46:3, col:7> 'int' '='
|   |   | |-DeclRefExpr 0x132924028 <col:3> 'int' lvalue Var 0x1330278c8 'n' 'int'
|   |   | `-ImplicitCastExpr 0x132924068 <col:7> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x132924048 <col:7> 'int' lvalue Var 0x133027960 'm' 'int'
|   |   `-WhileStmt 0x1330296d8 <line:47:3, line:51:3>
|   |     |-BinaryOperator 0x1329240f8 <line:47:10, col:16> 'int' '>'
|   |     | |-UnaryOperator 0x1329240c0 <col:10, col:11> 'int' postfix '--'
|   |     | | `-DeclRefExpr 0x1329240a0 <col:10> 'int' lvalue Var 0x1330278c8 'n' 'int'
|   |     | `-IntegerLiteral 0x1329240d8 <col:16> 'int' 0
|   |     `-CompoundStmt 0x1330296b0 <col:19, line:51:3>
|   |       |-BinaryOperator 0x1329241b8 <line:48:4, col:15> '<dependent type>' contains-errors '='
|   |       | |-UnaryOperator 0x132924150 <col:4, col:5> '<dependent type>' contains-errors prefix '*' cannot overflow
|   |       | | `-ImplicitCastExpr 0x132924138 <col:5> '<dependent type>' contains-errors <LValueToRValue>
|   |       | |   `-RecoveryExpr 0x132924118 <col:5> '<dependent type>' contains-errors lvalue
|   |       | `-UnaryOperator 0x1329241a0 <col:14, col:15> '<dependent type>' contains-errors prefix '*' cannot overflow
|   |       |   `-ImplicitCastExpr 0x132924188 <col:15> '<dependent type>' contains-errors <LValueToRValue>
|   |       |     `-RecoveryExpr 0x132924168 <col:15> '<dependent type>' contains-errors lvalue
|   |       |-CompoundAssignOperator 0x133029648 <line:49:4, col:14> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   |       | |-RecoveryExpr 0x133029600 <col:4> '<dependent type>' contains-errors lvalue
|   |       | | `-DeclRefExpr 0x1329241d8 <col:4> 'int *' lvalue Var 0x133027830 'dstptr' 'int *'
|   |       | `-DeclRefExpr 0x133029628 <col:14> 'int' lvalue ParmVar 0x13300de28 'stride' 'int'
|   |       `-UnaryOperator 0x133029698 <line:50:4, col:6> '<dependent type>' contains-errors prefix '++' cannot overflow
|   |         `-RecoveryExpr 0x133029678 <col:6> '<dependent type>' contains-errors lvalue
|   `-IfStmt 0x1330299e8 <line:55:2, line:57:2>
|     |-BinaryOperator 0x133029828 <line:55:6, col:13> 'int' contains-errors '!='
|     | |-RecoveryExpr 0x1330297e8 <col:6> '<dependent type>' contains-errors lvalue
|     | `-RecoveryExpr 0x133029808 <col:13> '<dependent type>' contains-errors lvalue
|     `-CompoundStmt 0x1330299d0 <col:23, line:57:2>
|       `-CallExpr 0x1330299a8 <line:56:3, col:15> '<dependent type>' contains-errors
|         |-DeclRefExpr 0x133029928 <col:3> 'int ()' Function 0x133029870 'jas_free' 'int ()'
|         `-RecoveryExpr 0x133029988 <col:12> '<dependent type>' contains-errors lvalue
`-FunctionDecl 0x1330280d0 <line:18:4> col:4 implicit used abort 'void (void) __attribute__((noreturn))' extern
  `-BuiltinAttr 0x133028178 <<invalid sloc>> Implicit 867
