TranslationUnitDecl 0x136855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1368564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x136855bd0 '__int128'
|-TypedefDecl 0x136856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x136855bf0 'unsigned __int128'
|-TypedefDecl 0x13700be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13700bc00 'struct __NSConstantString_tag'
|   `-Record 0x136856580 '__NSConstantString_tag'
|-TypedefDecl 0x13700be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x136855d90 '__SVInt8_t'
|-TypedefDecl 0x13700bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x136855db0 '__SVInt16_t'
|-TypedefDecl 0x13700bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x136855dd0 '__SVInt32_t'
|-TypedefDecl 0x13700bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x136855df0 '__SVInt64_t'
|-TypedefDecl 0x13700c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x136855e10 '__SVUint8_t'
|-TypedefDecl 0x13700c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x136855e30 '__SVUint16_t'
|-TypedefDecl 0x13700c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x136855e50 '__SVUint32_t'
|-TypedefDecl 0x13700c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x136855e70 '__SVUint64_t'
|-TypedefDecl 0x13700c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x136855e90 '__SVFloat16_t'
|-TypedefDecl 0x13700c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x136855eb0 '__SVFloat32_t'
|-TypedefDecl 0x13700c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x136855ed0 '__SVFloat64_t'
|-TypedefDecl 0x13700c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x136855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13700c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x136855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13700c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x136855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13700c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x136855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13700c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x136855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13700c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x136855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13700c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x136855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13700c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x136855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13700c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x136855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13700c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x136856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13700c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x136856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13700c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x136856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13700c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x136856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13700c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x136856090 '__clang_svint8x3_t'
|-TypedefDecl 0x13700c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1368560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13700c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1368560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13700c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1368560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13700c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x136856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13700ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x136856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13700cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x136856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13700cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x136856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13700cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x136856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13700d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1368561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13700d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1368561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13700d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1368561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13700d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x136856210 '__clang_svint8x4_t'
|-TypedefDecl 0x13700d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x136856230 '__clang_svint16x4_t'
|-TypedefDecl 0x13700d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x136856250 '__clang_svint32x4_t'
|-TypedefDecl 0x13700d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x136856270 '__clang_svint64x4_t'
|-TypedefDecl 0x13700d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x136856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13700d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1368562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13700d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1368562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13700d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1368562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13700d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x136856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13700d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x136856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13700d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x136856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13700d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x136856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13700da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x136856390 '__SVBool_t'
|-TypedefDecl 0x13700da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1368563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13700dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1368563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13700db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1368563f0 '__SVCount_t'
|-TypedefDecl 0x13700dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13700dbb0 'char *'
|   `-BuiltinType 0x1368556b0 'char'
|-TypedefDecl 0x13700dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13700dbb0 'char *'
|   `-BuiltinType 0x1368556b0 'char'
|-FunctionDecl 0x137026600 <dataset_diviso_filec/func22013_vuln.c:1:1, line:72:1> line:1:1 http_splitheader 'int (struct http *, int)'
| |-ParmVarDecl 0x13700e248 <col:18, col:31> col:31 used hp 'struct http *'
| |-ParmVarDecl 0x13700e2c8 <col:35, col:39> col:39 used req 'int'
| `-CompoundStmt 0x13702c6d0 <line:2:1, line:72:1>
|   |-DeclStmt 0x1370268d0 <line:3:2, col:19>
|   | |-VarDecl 0x137026718 <col:2, col:8> col:8 used p 'char *'
|   | |-VarDecl 0x137026798 <col:2, col:12> col:12 used q 'char *'
|   | `-VarDecl 0x137026848 <col:2, col:17> col:17 used hh 'char **'
|   |-DeclStmt 0x137026968 <line:4:2, col:7>
|   | `-VarDecl 0x137026900 <col:2, col:6> col:6 used n 'int'
|   |-DeclStmt 0x137026a88 <line:5:2, col:14>
|   | `-VarDecl 0x137026a20 <col:2, col:13> col:7 used buf 'char[20]'
|   |-CallExpr 0x137026c78 <line:7:2, col:34> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x137026bd0 <col:2> 'int ()' Function 0x137026b18 'CHECK_OBJ_NOTNULL' 'int ()'
|   | |-DeclRefExpr 0x137026bf0 <col:20> 'struct http *' lvalue ParmVar 0x13700e248 'hp' 'struct http *'
|   | `-RecoveryExpr 0x137026c58 <col:24> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x1370273d8 <line:8:2, line:14:2> has_else
|   | |-ImplicitCastExpr 0x137026cc8 <line:8:6> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x137026ca8 <col:6> 'int' lvalue ParmVar 0x13700e2c8 'req' 'int'
|   | |-CompoundStmt 0x137027188 <col:11, line:11:2>
|   | | |-CallExpr 0x1370270b0 <line:9:3, col:36> '<dependent type>' contains-errors
|   | | | |-DeclRefExpr 0x137026f78 <col:3> 'void *(void *, int, unsigned long)' Function 0x137026d28 'memset' 'void *(void *, int, unsigned long)'
|   | | | |-RecoveryExpr 0x137026fd0 <col:10, col:14> '<dependent type>' contains-errors lvalue
|   | | | | `-DeclRefExpr 0x137026f98 <col:10> 'struct http *' lvalue ParmVar 0x13700e248 'hp' 'struct http *'
|   | | | |-IntegerLiteral 0x137026ff8 <col:19> 'int' 0
|   | | | `-UnaryExprOrTypeTraitExpr 0x137027078 <col:22, col:33> 'unsigned long' contains-errors sizeof
|   | | |   `-RecoveryExpr 0x137027050 <col:29, col:33> '<dependent type>' contains-errors lvalue
|   | | |     `-DeclRefExpr 0x137027018 <col:29> 'struct http *' lvalue ParmVar 0x13700e248 'hp' 'struct http *' non_odr_use_unevaluated
|   | | `-BinaryOperator 0x137027168 <line:10:3, col:12> 'char **' contains-errors '='
|   | |   |-DeclRefExpr 0x1370270e8 <col:3> 'char **' lvalue Var 0x137026848 'hh' 'char **'
|   | |   `-RecoveryExpr 0x137027140 <col:8, col:12> '<dependent type>' contains-errors lvalue
|   | |     `-DeclRefExpr 0x137027108 <col:8> 'struct http *' lvalue ParmVar 0x13700e248 'hp' 'struct http *'
|   | `-CompoundStmt 0x1370273b8 <line:11:9, line:14:2>
|   |   |-CallExpr 0x1370272e0 <line:12:3, col:38> '<dependent type>' contains-errors
|   |   | |-DeclRefExpr 0x1370271a8 <col:3> 'void *(void *, int, unsigned long)' Function 0x137026d28 'memset' 'void *(void *, int, unsigned long)'
|   |   | |-RecoveryExpr 0x137027200 <col:10, col:14> '<dependent type>' contains-errors lvalue
|   |   | | `-DeclRefExpr 0x1370271c8 <col:10> 'struct http *' lvalue ParmVar 0x13700e248 'hp' 'struct http *'
|   |   | |-IntegerLiteral 0x137027228 <col:20> 'int' 0
|   |   | `-UnaryExprOrTypeTraitExpr 0x1370272a8 <col:23, col:34> 'unsigned long' contains-errors sizeof
|   |   |   `-RecoveryExpr 0x137027280 <col:30, col:34> '<dependent type>' contains-errors lvalue
|   |   |     `-DeclRefExpr 0x137027248 <col:30> 'struct http *' lvalue ParmVar 0x13700e248 'hp' 'struct http *' non_odr_use_unevaluated
|   |   `-BinaryOperator 0x137027398 <line:13:3, col:12> 'char **' contains-errors '='
|   |     |-DeclRefExpr 0x137027318 <col:3> 'char **' lvalue Var 0x137026848 'hh' 'char **'
|   |     `-RecoveryExpr 0x137027370 <col:8, col:12> '<dependent type>' contains-errors lvalue
|   |       `-DeclRefExpr 0x137027338 <col:8> 'struct http *' lvalue ParmVar 0x13700e248 'hp' 'struct http *'
|   |-BinaryOperator 0x137027448 <line:16:2, col:6> 'int' '='
|   | |-DeclRefExpr 0x137027408 <col:2> 'int' lvalue Var 0x137026900 'n' 'int'
|   | `-IntegerLiteral 0x137027428 <col:6> 'int' 0
|   |-BinaryOperator 0x1370274e8 <line:17:2, col:10> 'char *' contains-errors '='
|   | |-DeclRefExpr 0x137027468 <col:2> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   | `-RecoveryExpr 0x1370274c0 <col:6, col:10> '<dependent type>' contains-errors lvalue
|   |   `-DeclRefExpr 0x137027488 <col:6> 'struct http *' lvalue ParmVar 0x13700e248 'hp' 'struct http *'
|   |-WhileStmt 0x137029548 <line:20:2, line:21:4>
|   | |-CallExpr 0x1370294b8 <line:20:9, col:21> 'int'
|   | | |-ImplicitCastExpr 0x1370294a0 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x137029400 <col:9> 'int ()' Function 0x137027530 'vct_islws' 'int ()'
|   | | `-ImplicitCastExpr 0x1370294f8 <col:19, col:20> 'int' <IntegralCast>
|   | |   `-ImplicitCastExpr 0x1370294e0 <col:19, col:20> 'char' <LValueToRValue>
|   | |     `-UnaryOperator 0x137029458 <col:19, col:20> 'char' lvalue prefix '*' cannot overflow
|   | |       `-ImplicitCastExpr 0x137029440 <col:20> 'char *' <LValueToRValue>
|   | |         `-DeclRefExpr 0x137029420 <col:20> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   | `-UnaryOperator 0x137029530 <line:21:3, col:4> 'char *' postfix '++'
|   |   `-DeclRefExpr 0x137029510 <col:3> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   |-BinaryOperator 0x137029630 <line:22:2, col:12> 'char *' '='
|   | |-ArraySubscriptExpr 0x1370295d8 <col:2, col:8> 'char *' lvalue
|   | | |-ImplicitCastExpr 0x1370295c0 <col:2> 'char **' <LValueToRValue>
|   | | | `-DeclRefExpr 0x137029568 <col:2> 'char **' lvalue Var 0x137026848 'hh' 'char **'
|   | | `-UnaryOperator 0x1370295a8 <col:5, col:6> 'int' postfix '++'
|   | |   `-DeclRefExpr 0x137029588 <col:5> 'int' lvalue Var 0x137026900 'n' 'int'
|   | `-ImplicitCastExpr 0x137029618 <col:12> 'char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1370295f8 <col:12> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   |-WhileStmt 0x137029780 <line:23:2, line:24:4>
|   | |-UnaryOperator 0x137029730 <line:23:9, col:22> 'int' prefix '!' cannot overflow
|   | | `-CallExpr 0x1370296d8 <col:10, col:22> 'int'
|   | |   |-ImplicitCastExpr 0x1370296c0 <col:10> 'int (*)()' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x137029650 <col:10> 'int ()' Function 0x137027530 'vct_islws' 'int ()'
|   | |   `-ImplicitCastExpr 0x137029718 <col:20, col:21> 'int' <IntegralCast>
|   | |     `-ImplicitCastExpr 0x137029700 <col:20, col:21> 'char' <LValueToRValue>
|   | |       `-UnaryOperator 0x1370296a8 <col:20, col:21> 'char' lvalue prefix '*' cannot overflow
|   | |         `-ImplicitCastExpr 0x137029690 <col:21> 'char *' <LValueToRValue>
|   | |           `-DeclRefExpr 0x137029670 <col:21> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   | `-UnaryOperator 0x137029768 <line:24:3, col:4> 'char *' postfix '++'
|   |   `-DeclRefExpr 0x137029748 <col:3> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   |-CallExpr 0x137029a90 <line:25:2, col:24> 'int'
|   | |-ImplicitCastExpr 0x137029a78 <col:2> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x137029880 <col:2> 'int ()' Function 0x1370297c8 'assert' 'int ()'
|   | `-UnaryOperator 0x137029a60 <col:9, col:23> 'int' prefix '!' cannot overflow
|   |   `-CallExpr 0x137029a08 <col:10, col:23> 'int'
|   |     |-ImplicitCastExpr 0x1370299f0 <col:10> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x137029980 <col:10> 'int ()' Function 0x1370298c8 'vct_iscrlf' 'int ()'
|   |     `-ImplicitCastExpr 0x137029a48 <col:21, col:22> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x137029a30 <col:21, col:22> 'char' <LValueToRValue>
|   |         `-UnaryOperator 0x1370299d8 <col:21, col:22> 'char' lvalue prefix '*' cannot overflow
|   |           `-ImplicitCastExpr 0x1370299c0 <col:22> 'char *' <LValueToRValue>
|   |             `-DeclRefExpr 0x1370299a0 <col:22> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   |-BinaryOperator 0x137029b38 <line:26:2, col:9> 'char' '='
|   | |-UnaryOperator 0x137029af0 <col:2, col:4> 'char' lvalue prefix '*' cannot overflow
|   | | `-UnaryOperator 0x137029ad8 <col:3, col:4> 'char *' postfix '++'
|   | |   `-DeclRefExpr 0x137029ab8 <col:3> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   | `-ImplicitCastExpr 0x137029b20 <col:9> 'char' <IntegralCast>
|   |   `-CharacterLiteral 0x137029b08 <col:9> 'int' 0
|   |-WhileStmt 0x137029d50 <line:29:2, line:30:4>
|   | |-CallExpr 0x137029cc0 <line:29:9, col:20> 'int'
|   | | |-ImplicitCastExpr 0x137029ca8 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x137029c38 <col:9> 'int ()' Function 0x137029b80 'vct_issp' 'int ()'
|   | | `-ImplicitCastExpr 0x137029d00 <col:18, col:19> 'int' <IntegralCast>
|   | |   `-ImplicitCastExpr 0x137029ce8 <col:18, col:19> 'char' <LValueToRValue>
|   | |     `-UnaryOperator 0x137029c90 <col:18, col:19> 'char' lvalue prefix '*' cannot overflow
|   | |       `-ImplicitCastExpr 0x137029c78 <col:19> 'char *' <LValueToRValue>
|   | |         `-DeclRefExpr 0x137029c58 <col:19> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   | `-UnaryOperator 0x137029d38 <line:30:3, col:4> 'char *' postfix '++'
|   |   `-DeclRefExpr 0x137029d18 <col:3> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   |-CallExpr 0x137029ea0 <line:31:2, col:24> 'int'
|   | |-ImplicitCastExpr 0x137029e88 <col:2> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x137029d70 <col:2> 'int ()' Function 0x1370297c8 'assert' 'int ()'
|   | `-UnaryOperator 0x137029e70 <col:9, col:23> 'int' prefix '!' cannot overflow
|   |   `-CallExpr 0x137029e18 <col:10, col:23> 'int'
|   |     |-ImplicitCastExpr 0x137029e00 <col:10> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x137029d90 <col:10> 'int ()' Function 0x1370298c8 'vct_iscrlf' 'int ()'
|   |     `-ImplicitCastExpr 0x137029e58 <col:21, col:22> 'int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x137029e40 <col:21, col:22> 'char' <LValueToRValue>
|   |         `-UnaryOperator 0x137029de8 <col:21, col:22> 'char' lvalue prefix '*' cannot overflow
|   |           `-ImplicitCastExpr 0x137029dd0 <col:22> 'char *' <LValueToRValue>
|   |             `-DeclRefExpr 0x137029db0 <col:22> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   |-BinaryOperator 0x137029f90 <line:32:2, col:12> 'char *' '='
|   | |-ArraySubscriptExpr 0x137029f38 <col:2, col:8> 'char *' lvalue
|   | | |-ImplicitCastExpr 0x137029f20 <col:2> 'char **' <LValueToRValue>
|   | | | `-DeclRefExpr 0x137029ec8 <col:2> 'char **' lvalue Var 0x137026848 'hh' 'char **'
|   | | `-UnaryOperator 0x137029f08 <col:5, col:6> 'int' postfix '++'
|   | |   `-DeclRefExpr 0x137029ee8 <col:5> 'int' lvalue Var 0x137026900 'n' 'int'
|   | `-ImplicitCastExpr 0x137029f78 <col:12> 'char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x137029f58 <col:12> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   |-WhileStmt 0x13702a0e0 <line:33:2, line:34:4>
|   | |-UnaryOperator 0x13702a090 <line:33:9, col:22> 'int' prefix '!' cannot overflow
|   | | `-CallExpr 0x13702a038 <col:10, col:22> 'int'
|   | |   |-ImplicitCastExpr 0x13702a020 <col:10> 'int (*)()' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x137029fb0 <col:10> 'int ()' Function 0x137027530 'vct_islws' 'int ()'
|   | |   `-ImplicitCastExpr 0x13702a078 <col:20, col:21> 'int' <IntegralCast>
|   | |     `-ImplicitCastExpr 0x13702a060 <col:20, col:21> 'char' <LValueToRValue>
|   | |       `-UnaryOperator 0x13702a008 <col:20, col:21> 'char' lvalue prefix '*' cannot overflow
|   | |         `-ImplicitCastExpr 0x137029ff0 <col:21> 'char *' <LValueToRValue>
|   | |           `-DeclRefExpr 0x137029fd0 <col:21> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   | `-UnaryOperator 0x13702a0c8 <line:34:3, col:4> 'char *' postfix '++'
|   |   `-DeclRefExpr 0x13702a0a8 <col:3> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   |-IfStmt 0x13702b2d0 <line:35:2, line:51:2> has_else
|   | |-CallExpr 0x13702a188 <line:35:6, col:19> 'int'
|   | | |-ImplicitCastExpr 0x13702a170 <col:6> 'int (*)()' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x13702a100 <col:6> 'int ()' Function 0x1370298c8 'vct_iscrlf' 'int ()'
|   | | `-ImplicitCastExpr 0x13702a1c8 <col:17, col:18> 'int' <IntegralCast>
|   | |   `-ImplicitCastExpr 0x13702a1b0 <col:17, col:18> 'char' <LValueToRValue>
|   | |     `-UnaryOperator 0x13702a158 <col:17, col:18> 'char' lvalue prefix '*' cannot overflow
|   | |       `-ImplicitCastExpr 0x13702a140 <col:18> 'char *' <LValueToRValue>
|   | |         `-DeclRefExpr 0x13702a120 <col:18> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   | |-CompoundStmt 0x13702ac48 <col:22, line:40:2>
|   | | |-BinaryOperator 0x13702a338 <line:36:3, col:13> 'char *' contains-errors '='
|   | | | |-ArraySubscriptExpr 0x13702a2f8 <col:3, col:9> 'char *' lvalue
|   | | | | |-ImplicitCastExpr 0x13702a2e0 <col:3> 'char **' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x13702a1e0 <col:3> 'char **' lvalue Var 0x137026848 'hh' 'char **'
|   | | | | `-UnaryOperator 0x13702a220 <col:6, col:7> 'int' postfix '++'
|   | | | |   `-DeclRefExpr 0x13702a200 <col:6> 'int' lvalue Var 0x137026900 'n' 'int'
|   | | | `-RecoveryExpr 0x13702a318 <col:13> '<dependent type>' contains-errors lvalue
|   | | |-BinaryOperator 0x13702a3b0 <line:37:3, col:7> 'char *' '='
|   | | | |-DeclRefExpr 0x13702a358 <col:3> 'char *' lvalue Var 0x137026798 'q' 'char *'
|   | | | `-ImplicitCastExpr 0x13702a398 <col:7> 'char *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x13702a378 <col:7> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   | | |-CompoundAssignOperator 0x13702ab78 <line:38:3, col:22> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
|   | | | |-DeclRefExpr 0x13702a3d0 <col:3> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   | | | `-CallExpr 0x13702ab38 <col:8, col:22> 'int'
|   | | |   |-ImplicitCastExpr 0x13702ab20 <col:8> 'int (*)()' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x13702aae0 <col:8> 'int ()' Function 0x13702aa28 'vct_skipcrlf' 'int ()'
|   | | |   `-ImplicitCastExpr 0x13702ab60 <col:21> 'char *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x13702ab00 <col:21> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   | | `-BinaryOperator 0x13702ac28 <line:39:3, col:8> 'char' '='
|   | |   |-UnaryOperator 0x13702abe0 <col:3, col:4> 'char' lvalue prefix '*' cannot overflow
|   | |   | `-ImplicitCastExpr 0x13702abc8 <col:4> 'char *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x13702aba8 <col:4> 'char *' lvalue Var 0x137026798 'q' 'char *'
|   | |   `-ImplicitCastExpr 0x13702ac10 <col:8> 'char' <IntegralCast>
|   | |     `-CharacterLiteral 0x13702abf8 <col:8> 'int' 0
|   | `-CompoundStmt 0x13702b288 <line:40:9, line:51:2>
|   |   |-BinaryOperator 0x13702acf8 <line:41:3, col:10> 'char' '='
|   |   | |-UnaryOperator 0x13702acb0 <col:3, col:5> 'char' lvalue prefix '*' cannot overflow
|   |   | | `-UnaryOperator 0x13702ac98 <col:4, col:5> 'char *' postfix '++'
|   |   | |   `-DeclRefExpr 0x13702ac78 <col:4> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   |   | `-ImplicitCastExpr 0x13702ace0 <col:10> 'char' <IntegralCast>
|   |   |   `-CharacterLiteral 0x13702acc8 <col:10> 'int' 0
|   |   |-WhileStmt 0x13702ae30 <line:43:3, line:44:5>
|   |   | |-CallExpr 0x13702ada0 <line:43:10, col:21> 'int'
|   |   | | |-ImplicitCastExpr 0x13702ad88 <col:10> 'int (*)()' <FunctionToPointerDecay>
|   |   | | | `-DeclRefExpr 0x13702ad18 <col:10> 'int ()' Function 0x137029b80 'vct_issp' 'int ()'
|   |   | | `-ImplicitCastExpr 0x13702ade0 <col:19, col:20> 'int' <IntegralCast>
|   |   | |   `-ImplicitCastExpr 0x13702adc8 <col:19, col:20> 'char' <LValueToRValue>
|   |   | |     `-UnaryOperator 0x13702ad70 <col:19, col:20> 'char' lvalue prefix '*' cannot overflow
|   |   | |       `-ImplicitCastExpr 0x13702ad58 <col:20> 'char *' <LValueToRValue>
|   |   | |         `-DeclRefExpr 0x13702ad38 <col:20> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   |   | `-UnaryOperator 0x13702ae18 <line:44:4, col:5> 'char *' postfix '++'
|   |   |   `-DeclRefExpr 0x13702adf8 <col:4> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   |   |-BinaryOperator 0x13702af18 <line:45:3, col:13> 'char *' '='
|   |   | |-ArraySubscriptExpr 0x13702aec0 <col:3, col:9> 'char *' lvalue
|   |   | | |-ImplicitCastExpr 0x13702aea8 <col:3> 'char **' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x13702ae50 <col:3> 'char **' lvalue Var 0x137026848 'hh' 'char **'
|   |   | | `-UnaryOperator 0x13702ae90 <col:6, col:7> 'int' postfix '++'
|   |   | |   `-DeclRefExpr 0x13702ae70 <col:6> 'int' lvalue Var 0x137026900 'n' 'int'
|   |   | `-ImplicitCastExpr 0x13702af00 <col:13> 'char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x13702aee0 <col:13> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   |   |-WhileStmt 0x13702b068 <line:46:3, line:47:5>
|   |   | |-UnaryOperator 0x13702b018 <line:46:10, col:24> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x13702afc0 <col:11, col:24> 'int'
|   |   | |   |-ImplicitCastExpr 0x13702afa8 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x13702af38 <col:11> 'int ()' Function 0x1370298c8 'vct_iscrlf' 'int ()'
|   |   | |   `-ImplicitCastExpr 0x13702b000 <col:22, col:23> 'int' <IntegralCast>
|   |   | |     `-ImplicitCastExpr 0x13702afe8 <col:22, col:23> 'char' <LValueToRValue>
|   |   | |       `-UnaryOperator 0x13702af90 <col:22, col:23> 'char' lvalue prefix '*' cannot overflow
|   |   | |         `-ImplicitCastExpr 0x13702af78 <col:23> 'char *' <LValueToRValue>
|   |   | |           `-DeclRefExpr 0x13702af58 <col:23> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   |   | `-UnaryOperator 0x13702b050 <line:47:4, col:5> 'char *' postfix '++'
|   |   |   `-DeclRefExpr 0x13702b030 <col:4> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   |   |-BinaryOperator 0x13702b0e0 <line:48:3, col:7> 'char *' '='
|   |   | |-DeclRefExpr 0x13702b088 <col:3> 'char *' lvalue Var 0x137026798 'q' 'char *'
|   |   | `-ImplicitCastExpr 0x13702b0c8 <col:7> 'char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x13702b0a8 <col:7> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   |   |-CompoundAssignOperator 0x13702b1b8 <line:49:3, col:22> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
|   |   | |-DeclRefExpr 0x13702b100 <col:3> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   |   | `-CallExpr 0x13702b178 <col:8, col:22> 'int'
|   |   |   |-ImplicitCastExpr 0x13702b160 <col:8> 'int (*)()' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x13702b120 <col:8> 'int ()' Function 0x13702aa28 'vct_skipcrlf' 'int ()'
|   |   |   `-ImplicitCastExpr 0x13702b1a0 <col:21> 'char *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x13702b140 <col:21> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   |   `-BinaryOperator 0x13702b268 <line:50:3, col:8> 'char' '='
|   |     |-UnaryOperator 0x13702b220 <col:3, col:4> 'char' lvalue prefix '*' cannot overflow
|   |     | `-ImplicitCastExpr 0x13702b208 <col:4> 'char *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x13702b1e8 <col:4> 'char *' lvalue Var 0x137026798 'q' 'char *'
|   |     `-ImplicitCastExpr 0x13702b250 <col:8> 'char' <IntegralCast>
|   |       `-CharacterLiteral 0x13702b238 <col:8> 'int' 0
|   |-CallExpr 0x13702b3b0 <line:52:2, col:15> 'int'
|   | |-ImplicitCastExpr 0x13702b398 <col:2> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x13702b300 <col:2> 'int ()' Function 0x1370297c8 'assert' 'int ()'
|   | `-BinaryOperator 0x13702b378 <col:9, col:14> 'int' '=='
|   |   |-ImplicitCastExpr 0x13702b360 <col:9> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x13702b320 <col:9> 'int' lvalue Var 0x137026900 'n' 'int'
|   |   `-IntegerLiteral 0x13702b340 <col:14> 'int' 3
|   |-WhileStmt 0x13702bc08 <line:54:2, line:64:2>
|   | |-BinaryOperator 0x13702b470 <line:54:9, col:15> 'int' '!='
|   | | |-ImplicitCastExpr 0x13702b458 <col:9, col:10> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x13702b440 <col:9, col:10> 'char' <LValueToRValue>
|   | | |   `-UnaryOperator 0x13702b410 <col:9, col:10> 'char' lvalue prefix '*' cannot overflow
|   | | |     `-ImplicitCastExpr 0x13702b3f8 <col:10> 'char *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x13702b3d8 <col:10> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   | | `-CharacterLiteral 0x13702b428 <col:15> 'int' 0
|   | `-CompoundStmt 0x13702bbc0 <col:21, line:64:2>
|   |   |-CallExpr 0x13702b570 <line:55:3, col:21> '<dependent type>' contains-errors
|   |   | |-DeclRefExpr 0x13702b490 <col:3> 'int ()' Function 0x1370297c8 'assert' 'int ()'
|   |   | `-BinaryOperator 0x13702b550 <col:10, col:14> 'int' contains-errors '<'
|   |   |   |-DeclRefExpr 0x13702b4b0 <col:10> 'int' lvalue Var 0x137026900 'n' 'int'
|   |   |   `-RecoveryExpr 0x13702b530 <col:14> '<dependent type>' contains-errors lvalue
|   |   |-IfStmt 0x13702b680 <line:56:3, line:57:4>
|   |   | |-CallExpr 0x13702b620 <line:56:7, col:20> 'int'
|   |   | | |-ImplicitCastExpr 0x13702b608 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   |   | | | `-DeclRefExpr 0x13702b598 <col:7> 'int ()' Function 0x1370298c8 'vct_iscrlf' 'int ()'
|   |   | | `-ImplicitCastExpr 0x13702b660 <col:18, col:19> 'int' <IntegralCast>
|   |   | |   `-ImplicitCastExpr 0x13702b648 <col:18, col:19> 'char' <LValueToRValue>
|   |   | |     `-UnaryOperator 0x13702b5f0 <col:18, col:19> 'char' lvalue prefix '*' cannot overflow
|   |   | |       `-ImplicitCastExpr 0x13702b5d8 <col:19> 'char *' <LValueToRValue>
|   |   | |         `-DeclRefExpr 0x13702b5b8 <col:19> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   |   | `-BreakStmt 0x13702b678 <line:57:4>
|   |   |-BinaryOperator 0x13702b768 <line:58:3, col:14> 'char *' '='
|   |   | |-ArraySubscriptExpr 0x13702b710 <col:3, col:9> 'char *' lvalue
|   |   | | |-ImplicitCastExpr 0x13702b6f8 <col:3> 'char **' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x13702b6a0 <col:3> 'char **' lvalue Var 0x137026848 'hh' 'char **'
|   |   | | `-UnaryOperator 0x13702b6e0 <col:6, col:7> 'int' postfix '++'
|   |   | |   `-DeclRefExpr 0x13702b6c0 <col:6> 'int' lvalue Var 0x137026900 'n' 'int'
|   |   | `-UnaryOperator 0x13702b750 <col:13, col:14> 'char *' postfix '++'
|   |   |   `-DeclRefExpr 0x13702b730 <col:13> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   |   |-WhileStmt 0x13702b990 <line:59:3, line:60:5>
|   |   | |-BinaryOperator 0x13702b938 <line:59:10, col:38> 'int' '&&'
|   |   | | |-BinaryOperator 0x13702b820 <col:10, col:16> 'int' '!='
|   |   | | | |-ImplicitCastExpr 0x13702b808 <col:10, col:11> 'int' <IntegralCast>
|   |   | | | | `-ImplicitCastExpr 0x13702b7f0 <col:10, col:11> 'char' <LValueToRValue>
|   |   | | | |   `-UnaryOperator 0x13702b7c0 <col:10, col:11> 'char' lvalue prefix '*' cannot overflow
|   |   | | | |     `-ImplicitCastExpr 0x13702b7a8 <col:11> 'char *' <LValueToRValue>
|   |   | | | |       `-DeclRefExpr 0x13702b788 <col:11> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   |   | | | `-CharacterLiteral 0x13702b7d8 <col:16> 'int' 0
|   |   | | `-UnaryOperator 0x13702b920 <col:24, col:38> 'int' prefix '!' cannot overflow
|   |   | |   `-CallExpr 0x13702b8c8 <col:25, col:38> 'int'
|   |   | |     |-ImplicitCastExpr 0x13702b8b0 <col:25> 'int (*)()' <FunctionToPointerDecay>
|   |   | |     | `-DeclRefExpr 0x13702b840 <col:25> 'int ()' Function 0x1370298c8 'vct_iscrlf' 'int ()'
|   |   | |     `-ImplicitCastExpr 0x13702b908 <col:36, col:37> 'int' <IntegralCast>
|   |   | |       `-ImplicitCastExpr 0x13702b8f0 <col:36, col:37> 'char' <LValueToRValue>
|   |   | |         `-UnaryOperator 0x13702b898 <col:36, col:37> 'char' lvalue prefix '*' cannot overflow
|   |   | |           `-ImplicitCastExpr 0x13702b880 <col:37> 'char *' <LValueToRValue>
|   |   | |             `-DeclRefExpr 0x13702b860 <col:37> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   |   | `-UnaryOperator 0x13702b978 <line:60:4, col:5> 'char *' postfix '++'
|   |   |   `-DeclRefExpr 0x13702b958 <col:4> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   |   |-BinaryOperator 0x13702ba18 <line:61:3, col:7> 'char *' '='
|   |   | |-DeclRefExpr 0x13702b9b0 <col:3> 'char *' lvalue Var 0x137026798 'q' 'char *'
|   |   | `-ImplicitCastExpr 0x13702ba00 <col:7> 'char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x13702b9d0 <col:7> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   |   |-CompoundAssignOperator 0x13702baf0 <line:62:3, col:22> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
|   |   | |-DeclRefExpr 0x13702ba38 <col:3> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   |   | `-CallExpr 0x13702bab0 <col:8, col:22> 'int'
|   |   |   |-ImplicitCastExpr 0x13702ba98 <col:8> 'int (*)()' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x13702ba58 <col:8> 'int ()' Function 0x13702aa28 'vct_skipcrlf' 'int ()'
|   |   |   `-ImplicitCastExpr 0x13702bad8 <col:21> 'char *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x13702ba78 <col:21> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   |   `-BinaryOperator 0x13702bba0 <line:63:3, col:8> 'char' '='
|   |     |-UnaryOperator 0x13702bb58 <col:3, col:4> 'char' lvalue prefix '*' cannot overflow
|   |     | `-ImplicitCastExpr 0x13702bb40 <col:4> 'char *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x13702bb20 <col:4> 'char *' lvalue Var 0x137026798 'q' 'char *'
|   |     `-ImplicitCastExpr 0x13702bb88 <col:8> 'char' <IntegralCast>
|   |       `-CharacterLiteral 0x13702bb70 <col:8> 'int' 0
|   |-CompoundAssignOperator 0x13702bce0 <line:65:2, col:21> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
|   | |-DeclRefExpr 0x13702bc28 <col:2> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   | `-CallExpr 0x13702bca0 <col:7, col:21> 'int'
|   |   |-ImplicitCastExpr 0x13702bc88 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x13702bc48 <col:7> 'int ()' Function 0x13702aa28 'vct_skipcrlf' 'int ()'
|   |   `-ImplicitCastExpr 0x13702bcc8 <col:20> 'char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x13702bc68 <col:20> 'char *' lvalue Var 0x137026718 'p' 'char *'
|   `-CallExpr 0x13702be00 <line:66:2, col:19> 'int'
|     |-ImplicitCastExpr 0x13702bde8 <col:2> 'int (*)()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x13702bd10 <col:2> 'int ()' Function 0x1370297c8 'assert' 'int ()'
|     `-BinaryOperator 0x13702bdc8 <col:9, col:15> 'int' '=='
|       |-ImplicitCastExpr 0x13702bdb0 <col:9, col:10> 'int' <IntegralCast>
|       | `-ImplicitCastExpr 0x13702bd98 <col:9, col:10> 'char' <LValueToRValue>
|       |   `-UnaryOperator 0x13702bd68 <col:9, col:10> 'char' lvalue prefix '*' cannot overflow
|       |     `-ImplicitCastExpr 0x13702bd50 <col:10> 'char *' <LValueToRValue>
|       |       `-DeclRefExpr 0x13702bd30 <col:10> 'char *' lvalue Var 0x137026718 'p' 'char *'
|       `-CharacterLiteral 0x13702bd80 <col:15> 'int' 0
|-FunctionDecl 0x137026d28 <line:9:3> col:3 implicit used memset 'void *(void *, int, unsigned long)' extern
| |-ParmVarDecl 0x137026e28 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x137026e90 <<invalid sloc>> <invalid sloc> 'int'
| |-ParmVarDecl 0x137026ef8 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x137026dd0 <<invalid sloc>> Implicit 900
`-FunctionDecl 0x13702c018 <line:69:3> col:3 implicit used sprintf 'int (char *, const char *, ...)' extern
  |-ParmVarDecl 0x13702c118 <<invalid sloc>> <invalid sloc> 'char *'
  |-ParmVarDecl 0x13702c180 <<invalid sloc>> <invalid sloc> 'const char *'
  |-BuiltinAttr 0x13702c0c0 <<invalid sloc>> Implicit 906
  `-FormatAttr 0x13702c1f8 <col:3> Implicit printf 2 3
