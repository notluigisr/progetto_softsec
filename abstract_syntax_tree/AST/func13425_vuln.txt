TranslationUnitDecl 0x146855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1468564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x146855bd0 '__int128'
|-TypedefDecl 0x146856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x146855bf0 'unsigned __int128'
|-TypedefDecl 0x14700be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x14700bc00 'struct __NSConstantString_tag'
|   `-Record 0x146856580 '__NSConstantString_tag'
|-TypedefDecl 0x14700be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x146855d90 '__SVInt8_t'
|-TypedefDecl 0x14700bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x146855db0 '__SVInt16_t'
|-TypedefDecl 0x14700bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x146855dd0 '__SVInt32_t'
|-TypedefDecl 0x14700bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x146855df0 '__SVInt64_t'
|-TypedefDecl 0x14700c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x146855e10 '__SVUint8_t'
|-TypedefDecl 0x14700c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x146855e30 '__SVUint16_t'
|-TypedefDecl 0x14700c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x146855e50 '__SVUint32_t'
|-TypedefDecl 0x14700c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x146855e70 '__SVUint64_t'
|-TypedefDecl 0x14700c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x146855e90 '__SVFloat16_t'
|-TypedefDecl 0x14700c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x146855eb0 '__SVFloat32_t'
|-TypedefDecl 0x14700c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x146855ed0 '__SVFloat64_t'
|-TypedefDecl 0x14700c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x146855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x14700c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x146855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x14700c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x146855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x14700c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x146855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x14700c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x146855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x14700c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x146855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x14700c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x146855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x14700c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x146855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x14700c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x146855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x14700c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x146856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x14700c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x146856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x14700c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x146856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x14700c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x146856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x14700c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x146856090 '__clang_svint8x3_t'
|-TypedefDecl 0x14700c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1468560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x14700c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1468560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x14700c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1468560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x14700c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x146856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x14700ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x146856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x14700cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x146856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x14700cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x146856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x14700cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x146856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x14700d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1468561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x14700d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1468561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x14700d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1468561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x14700d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x146856210 '__clang_svint8x4_t'
|-TypedefDecl 0x14700d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x146856230 '__clang_svint16x4_t'
|-TypedefDecl 0x14700d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x146856250 '__clang_svint32x4_t'
|-TypedefDecl 0x14700d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x146856270 '__clang_svint64x4_t'
|-TypedefDecl 0x14700d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x146856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x14700d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1468562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x14700d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1468562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x14700d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1468562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x14700d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x146856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x14700d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x146856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x14700d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x146856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x14700d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x146856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x14700da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x146856390 '__SVBool_t'
|-TypedefDecl 0x14700da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1468563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x14700dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1468563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x14700db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1468563f0 '__SVCount_t'
|-TypedefDecl 0x14700dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x14700dbb0 'char *'
|   `-BuiltinType 0x1468556b0 'char'
|-TypedefDecl 0x14700dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x14700dbb0 'char *'
|   `-BuiltinType 0x1468556b0 'char'
|-FunctionDecl 0x147027400 <dataset_diviso_filec/func13425_vuln.c:1:1, line:79:1> line:1:9 invalid regcompx 'int *(void *(*)(void *, void *, int), void *, const char *, int, const char **)'
| |-ParmVarDecl 0x14700df90 <col:18, col:58> col:26 used alloc 'void *(*)(void *, void *, int)'
| |-ParmVarDecl 0x14700e010 <col:61, col:67> col:67 used ctx 'void *'
| |-ParmVarDecl 0x14700e090 <line:2:2, col:14> col:14 used pattern 'const char *'
| |-ParmVarDecl 0x14700e110 <col:23, col:27> col:27 used cflags 'int'
| |-ParmVarDecl 0x14700e1c8 <col:35, col:48> col:48 used errorp 'const char **'
| `-CompoundStmt 0x14702c9b8 <line:3:1, line:79:1>
|   |-DeclStmt 0x147027a68 <line:4:2, col:17>
|   | |-RecordDecl 0x1470274d0 <col:2, col:9> col:9 struct cstate
|   | `-VarDecl 0x1470275c8 <col:2, col:16> col:16 referenced invalid g 'struct cstate'
|   |-DeclStmt 0x147027c10 <line:7:2, col:10>
|   | |-VarDecl 0x147027b10 <col:2, col:6> col:6 used i 'int'
|   | `-VarDecl 0x147027b90 <col:2, col:9> col:9 used n 'int'
|   |-BinaryOperator 0x147027d10 <line:9:2, col:13> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x147027c70 <col:2, col:4> '<dependent type>' contains-errors lvalue .pstart
|   | | `-RecoveryExpr 0x147027c48 <col:2> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x147027c28 <col:2> 'struct cstate' lvalue Var 0x1470275c8 'g' 'struct cstate'
|   | `-RecoveryExpr 0x147027cf0 <col:13> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x147027e18 <line:10:2, col:11> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x147027d78 <col:2, col:4> '<dependent type>' contains-errors lvalue .prog
|   | | `-RecoveryExpr 0x147027d50 <col:2> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x147027d30 <col:2> 'struct cstate' lvalue Var 0x1470275c8 'g' 'struct cstate'
|   | `-RecoveryExpr 0x147027df8 <col:11> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x147029278 <line:12:2, line:17:2>
|   | |-CallExpr 0x147028098 <line:12:6, col:21> '<dependent type>' contains-errors
|   | | |-DeclRefExpr 0x147028010 <col:6> 'int ()' Function 0x147027ed8 'setjmp' 'int ()'
|   | | `-CXXDependentScopeMemberExpr 0x147028050 <col:13, col:15> '<dependent type>' contains-errors lvalue .kaboom
|   | |   `-RecoveryExpr 0x147028030 <col:13> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x147029248 <col:24, line:17:2>
|   |   |-IfStmt 0x1470281d0 <line:13:3, col:27>
|   |   | |-ImplicitCastExpr 0x1470280e0 <col:7> 'const char **' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1470280c0 <col:7> 'const char **' lvalue ParmVar 0x14700e1c8 'errorp' 'const char **'
|   |   | `-BinaryOperator 0x1470281b0 <col:15, col:27> 'const char *' contains-errors '='
|   |   |   |-UnaryOperator 0x147028130 <col:15, col:16> 'const char *' lvalue prefix '*' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x147028118 <col:16> 'const char **' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x1470280f8 <col:16> 'const char **' lvalue ParmVar 0x14700e1c8 'errorp' 'const char **'
|   |   |   `-CXXDependentScopeMemberExpr 0x147028168 <col:25, col:27> '<dependent type>' contains-errors lvalue .error
|   |   |     `-RecoveryExpr 0x147028148 <col:25> '<dependent type>' contains-errors lvalue
|   |   |-CallExpr 0x1470282b8 <line:14:3, col:25> '<dependent type>' contains-errors
|   |   | |-DeclRefExpr 0x1470281f0 <col:3> 'void *(*)(void *, void *, int)' lvalue ParmVar 0x14700df90 'alloc' 'void *(*)(void *, void *, int)'
|   |   | |-DeclRefExpr 0x147028210 <col:9> 'void *' lvalue ParmVar 0x14700e010 'ctx' 'void *'
|   |   | |-CXXDependentScopeMemberExpr 0x147028250 <col:14, col:16> '<dependent type>' contains-errors lvalue .pstart
|   |   | | `-RecoveryExpr 0x147028230 <col:14> '<dependent type>' contains-errors lvalue
|   |   | `-IntegerLiteral 0x147028298 <col:24> 'int' 0
|   |   |-CallExpr 0x1470283b8 <line:15:3, col:23> '<dependent type>' contains-errors
|   |   | |-DeclRefExpr 0x1470282f0 <col:3> 'void *(*)(void *, void *, int)' lvalue ParmVar 0x14700df90 'alloc' 'void *(*)(void *, void *, int)'
|   |   | |-DeclRefExpr 0x147028310 <col:9> 'void *' lvalue ParmVar 0x14700e010 'ctx' 'void *'
|   |   | |-CXXDependentScopeMemberExpr 0x147028350 <col:14, col:16> '<dependent type>' contains-errors lvalue .prog
|   |   | | `-RecoveryExpr 0x147028330 <col:14> '<dependent type>' contains-errors lvalue
|   |   | `-IntegerLiteral 0x147028398 <col:22> 'int' 0
|   |   `-ReturnStmt 0x147029238 <line:16:3, col:10>
|   |     `-RecoveryExpr 0x147029218 <col:10> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x147029600 <line:20:2, line:21:16>
|   | |-UnaryOperator 0x147029418 <line:20:6, col:9> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x147029400 <col:7, col:9> '<dependent type>' contains-errors <LValueToRValue>
|   | |   `-CXXDependentScopeMemberExpr 0x1470293b8 <col:7, col:9> '<dependent type>' contains-errors lvalue .prog
|   | |     `-RecoveryExpr 0x147029398 <col:7> '<dependent type>' contains-errors lvalue
|   | `-CallExpr 0x1470295d0 <line:21:3, col:16> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x147029510 <col:3> 'int ()' Function 0x147029458 'die' 'int ()'
|   |   |-UnaryOperator 0x147029550 <col:7, col:8> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   | `-RecoveryExpr 0x147029530 <col:8> '<dependent type>' contains-errors lvalue
|   |   `-StringLiteral 0x1470295b0 <col:11> 'char[4]' lvalue "STR"
|   |-BinaryOperator 0x147029938 <line:22:2, col:24> 'int' '='
|   | |-DeclRefExpr 0x147029620 <col:2> 'int' lvalue Var 0x147027b90 'n' 'int'
|   | `-ImplicitCastExpr 0x147029920 <col:6, col:24> 'int' <IntegralCast>
|   |   `-BinaryOperator 0x147029900 <col:6, col:24> 'unsigned long' '*'
|   |     |-CallExpr 0x147029888 <col:6, col:20> 'unsigned long'
|   |     | |-ImplicitCastExpr 0x147029870 <col:6> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x1470297e8 <col:6> 'unsigned long (const char *)' Function 0x147029678 'strlen' 'unsigned long (const char *)'
|   |     | `-ImplicitCastExpr 0x1470298b0 <col:13> 'const char *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x147029808 <col:13> 'const char *' lvalue ParmVar 0x14700e090 'pattern' 'const char *'
|   |     `-ImplicitCastExpr 0x1470298e8 <col:24> 'unsigned long' <IntegralCast>
|   |       `-IntegerLiteral 0x1470298c8 <col:24> 'int' 2
|   |-IfStmt 0x147029a98 <line:23:2, line:24:16>
|   | |-BinaryOperator 0x1470299d0 <line:23:6, col:10> 'int' contains-errors '>'
|   | | |-DeclRefExpr 0x147029958 <col:6> 'int' lvalue Var 0x147027b90 'n' 'int'
|   | | `-RecoveryExpr 0x1470299b0 <col:10> '<dependent type>' contains-errors lvalue
|   | `-CallExpr 0x147029a68 <line:24:3, col:16> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x1470299f0 <col:3> 'int ()' Function 0x147029458 'die' 'int ()'
|   |   |-UnaryOperator 0x147029a30 <col:7, col:8> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   | `-RecoveryExpr 0x147029a10 <col:8> '<dependent type>' contains-errors lvalue
|   |   `-StringLiteral 0x147029a48 <col:11> 'char[4]' lvalue "STR"
|   |-IfStmt 0x147029e30 <line:25:2, line:29:2>
|   | |-BinaryOperator 0x147029b10 <line:25:6, col:10> 'int' '>'
|   | | |-ImplicitCastExpr 0x147029af8 <col:6> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x147029ab8 <col:6> 'int' lvalue Var 0x147027b90 'n' 'int'
|   | | `-IntegerLiteral 0x147029ad8 <col:10> 'int' 0
|   | `-CompoundStmt 0x147029e18 <col:13, line:29:2>
|   |   `-IfStmt 0x147029df8 <line:27:3, line:28:17>
|   |     |-UnaryOperator 0x147029d38 <line:27:7, col:10> '<dependent type>' contains-errors prefix '!' cannot overflow
|   |     | `-ImplicitCastExpr 0x147029d20 <col:8, col:10> '<dependent type>' contains-errors <LValueToRValue>
|   |     |   `-CXXDependentScopeMemberExpr 0x147029cd8 <col:8, col:10> '<dependent type>' contains-errors lvalue .pstart
|   |     |     `-RecoveryExpr 0x147029cb8 <col:8> '<dependent type>' contains-errors lvalue
|   |     `-CallExpr 0x147029dc8 <line:28:4, col:17> '<dependent type>' contains-errors
|   |       |-DeclRefExpr 0x147029d50 <col:4> 'int ()' Function 0x147029458 'die' 'int ()'
|   |       |-UnaryOperator 0x147029d90 <col:8, col:9> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |       | `-RecoveryExpr 0x147029d70 <col:9> '<dependent type>' contains-errors lvalue
|   |       `-StringLiteral 0x147029da8 <col:12> 'char[4]' lvalue "STR"
|   |-BinaryOperator 0x147029f00 <line:31:2, col:13> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x147029e98 <col:2, col:4> '<dependent type>' contains-errors lvalue .source
|   | | `-RecoveryExpr 0x147029e70 <col:2> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x147029e50 <col:2> 'struct cstate' lvalue Var 0x1470275c8 'g' 'struct cstate'
|   | `-DeclRefExpr 0x147029ee0 <col:13> 'const char *' lvalue ParmVar 0x14700e090 'pattern' 'const char *'
|   |-BinaryOperator 0x147029fd0 <line:32:2, col:14> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x147029f68 <col:2, col:4> '<dependent type>' contains-errors lvalue .ncclass
|   | | `-RecoveryExpr 0x147029f40 <col:2> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x147029f20 <col:2> 'struct cstate' lvalue Var 0x1470275c8 'g' 'struct cstate'
|   | `-IntegerLiteral 0x147029fb0 <col:14> 'int' 0
|   |-BinaryOperator 0x14702a0a0 <line:33:2, col:11> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x14702a038 <col:2, col:4> '<dependent type>' contains-errors lvalue .nsub
|   | | `-RecoveryExpr 0x14702a010 <col:2> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x147029ff0 <col:2> 'struct cstate' lvalue Var 0x1470275c8 'g' 'struct cstate'
|   | `-IntegerLiteral 0x14702a080 <col:11> 'int' 1
|   |-ForStmt 0x14702af40 <line:34:2, line:35:14>
|   | |-BinaryOperator 0x14702a100 <line:34:7, col:11> 'int' '='
|   | | |-DeclRefExpr 0x14702a0c0 <col:7> 'int' lvalue Var 0x147027b10 'i' 'int'
|   | | `-IntegerLiteral 0x14702a0e0 <col:11> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x14702a198 <col:14, col:18> 'int' contains-errors '<'
|   | | |-DeclRefExpr 0x14702a120 <col:14> 'int' lvalue Var 0x147027b10 'i' 'int'
|   | | `-RecoveryExpr 0x14702a178 <col:18> '<dependent type>' contains-errors lvalue
|   | |-UnaryOperator 0x14702a1d8 <col:30, col:32> 'int' prefix '++'
|   | | `-DeclRefExpr 0x14702a1b8 <col:32> 'int' lvalue Var 0x147027b10 'i' 'int'
|   | `-BinaryOperator 0x14702af20 <line:35:3, col:14> '<dependent type>' contains-errors '='
|   |   |-ArraySubscriptExpr 0x14702aee0 <col:3, col:10> '<dependent type>' contains-errors lvalue
|   |   | |-ImplicitCastExpr 0x14702aeb0 <col:3, col:5> '<dependent type>' contains-errors <LValueToRValue>
|   |   | | `-CXXDependentScopeMemberExpr 0x14702ae48 <col:3, col:5> '<dependent type>' contains-errors lvalue .sub
|   |   | |   `-RecoveryExpr 0x14702ae20 <col:3> '<dependent type>' contains-errors lvalue
|   |   | |     `-DeclRefExpr 0x14702ae00 <col:3> 'struct cstate' lvalue Var 0x1470275c8 'g' 'struct cstate'
|   |   | `-ImplicitCastExpr 0x14702aec8 <col:9> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x14702ae90 <col:9> 'int' lvalue Var 0x147027b10 'i' 'int'
|   |   `-IntegerLiteral 0x14702af00 <col:14> 'int' 0
|   |-BinaryOperator 0x14702b070 <line:37:2, col:18> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x14702b008 <col:2, col:10> '<dependent type>' contains-errors lvalue ->flags
|   | | `-CXXDependentScopeMemberExpr 0x14702afc0 <col:2, col:4> '<dependent type>' contains-errors lvalue .prog
|   | |   `-RecoveryExpr 0x14702af98 <col:2> '<dependent type>' contains-errors lvalue
|   | |     `-DeclRefExpr 0x14702af78 <col:2> 'struct cstate' lvalue Var 0x1470275c8 'g' 'struct cstate'
|   | `-DeclRefExpr 0x14702b050 <col:18> 'int' lvalue ParmVar 0x14700e110 'cflags' 'int'
|   |-CallExpr 0x14702b1c8 <line:39:2, col:9> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x14702b170 <col:2> 'int ()' Function 0x14702b0b8 'next' 'int ()'
|   | `-UnaryOperator 0x14702b1b0 <col:7, col:8> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   `-RecoveryExpr 0x14702b190 <col:8> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x14702b498 <line:41:2, line:42:16>
|   | |-BinaryOperator 0x14702b3d0 <line:41:6, col:21> 'int' contains-errors '=='
|   | | |-CXXDependentScopeMemberExpr 0x14702b370 <col:6, col:8> '<dependent type>' contains-errors lvalue .lookahead
|   | | | `-RecoveryExpr 0x14702b350 <col:6> '<dependent type>' contains-errors lvalue
|   | | `-CharacterLiteral 0x14702b3b8 <col:21> 'int' 41
|   | `-CallExpr 0x14702b468 <line:42:3, col:16> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x14702b3f0 <col:3> 'int ()' Function 0x147029458 'die' 'int ()'
|   |   |-UnaryOperator 0x14702b430 <col:7, col:8> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   | `-RecoveryExpr 0x14702b410 <col:8> '<dependent type>' contains-errors lvalue
|   |   `-StringLiteral 0x14702b448 <col:11> 'char[4]' lvalue "STR"
|   |-IfStmt 0x14702b5e8 <line:43:2, line:44:16>
|   | |-RecoveryExpr 0x14702b520 <line:43:6, col:21> '_Bool' contains-errors
|   | `-CallExpr 0x14702b5b8 <line:44:3, col:16> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x14702b540 <col:3> 'int ()' Function 0x147029458 'die' 'int ()'
|   |   |-UnaryOperator 0x14702b580 <col:7, col:8> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   | `-RecoveryExpr 0x14702b560 <col:8> '<dependent type>' contains-errors lvalue
|   |   `-StringLiteral 0x14702b598 <col:11> 'char[4]' lvalue "STR"
|   |-IfStmt 0x14702b8e0 <line:52:2, line:53:16>
|   | |-RecoveryExpr 0x14702b818 <line:52:6, col:19> '_Bool' contains-errors
|   | `-CallExpr 0x14702b8b0 <line:53:3, col:16> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x14702b838 <col:3> 'int ()' Function 0x147029458 'die' 'int ()'
|   |   |-UnaryOperator 0x14702b878 <col:7, col:8> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   | `-RecoveryExpr 0x14702b858 <col:8> '<dependent type>' contains-errors lvalue
|   |   `-StringLiteral 0x14702b890 <col:11> 'char[4]' lvalue "STR"
|   |-BinaryOperator 0x14702ba40 <line:55:2, col:19> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x14702b990 <col:2, col:10> '<dependent type>' contains-errors lvalue ->nsub
|   | | `-CXXDependentScopeMemberExpr 0x14702b948 <col:2, col:4> '<dependent type>' contains-errors lvalue .prog
|   | |   `-RecoveryExpr 0x14702b920 <col:2> '<dependent type>' contains-errors lvalue
|   | |     `-DeclRefExpr 0x14702b900 <col:2> 'struct cstate' lvalue Var 0x1470275c8 'g' 'struct cstate'
|   | `-CXXDependentScopeMemberExpr 0x14702b9f8 <col:17, col:19> '<dependent type>' contains-errors lvalue .nsub
|   |   `-RecoveryExpr 0x14702b9d8 <col:17> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x14702bdd0 <line:57:2, line:58:16>
|   | |-UnaryOperator 0x14702bd10 <line:57:6, col:15> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x14702bcf8 <col:7, col:15> '<dependent type>' contains-errors <LValueToRValue>
|   | |   `-CXXDependentScopeMemberExpr 0x14702bcb0 <col:7, col:15> '<dependent type>' contains-errors lvalue ->start
|   | |     `-CXXDependentScopeMemberExpr 0x14702bc68 <col:7, col:9> '<dependent type>' contains-errors lvalue .prog
|   | |       `-RecoveryExpr 0x14702bc48 <col:7> '<dependent type>' contains-errors lvalue
|   | `-CallExpr 0x14702bda0 <line:58:3, col:16> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x14702bd28 <col:3> 'int ()' Function 0x147029458 'die' 'int ()'
|   |   |-UnaryOperator 0x14702bd68 <col:7, col:8> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   | `-RecoveryExpr 0x14702bd48 <col:8> '<dependent type>' contains-errors lvalue
|   |   `-StringLiteral 0x14702bd80 <col:11> 'char[4]' lvalue "STR"
|   |-CallExpr 0x14702c880 <line:75:2, col:24> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x14702c7b8 <col:2> 'void *(*)(void *, void *, int)' lvalue ParmVar 0x14700df90 'alloc' 'void *(*)(void *, void *, int)'
|   | |-DeclRefExpr 0x14702c7d8 <col:8> 'void *' lvalue ParmVar 0x14700e010 'ctx' 'void *'
|   | |-CXXDependentScopeMemberExpr 0x14702c818 <col:13, col:15> '<dependent type>' contains-errors lvalue .pstart
|   | | `-RecoveryExpr 0x14702c7f8 <col:13> '<dependent type>' contains-errors lvalue
|   | `-IntegerLiteral 0x14702c860 <col:23> 'int' 0
|   `-ReturnStmt 0x14702c9a8 <line:78:2, col:11>
|     `-CXXDependentScopeMemberExpr 0x14702c960 <col:9, col:11> '<dependent type>' contains-errors lvalue .prog
|       `-RecoveryExpr 0x14702c940 <col:9> '<dependent type>' contains-errors lvalue
`-FunctionDecl 0x147029678 <line:22:6> col:6 implicit used strlen 'unsigned long (const char *)' extern
  |-ParmVarDecl 0x147029778 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x147029720 <<invalid sloc>> Implicit 902
