TranslationUnitDecl 0x129855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1298564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x129855bd0 '__int128'
|-TypedefDecl 0x129856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x129855bf0 'unsigned __int128'
|-TypedefDecl 0x129926230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x129926000 'struct __NSConstantString_tag'
|   `-Record 0x129856580 '__NSConstantString_tag'
|-TypedefDecl 0x129926298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x129855d90 '__SVInt8_t'
|-TypedefDecl 0x129926300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x129855db0 '__SVInt16_t'
|-TypedefDecl 0x129926368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x129855dd0 '__SVInt32_t'
|-TypedefDecl 0x1299263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x129855df0 '__SVInt64_t'
|-TypedefDecl 0x129926438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x129855e10 '__SVUint8_t'
|-TypedefDecl 0x1299264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x129855e30 '__SVUint16_t'
|-TypedefDecl 0x129926508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x129855e50 '__SVUint32_t'
|-TypedefDecl 0x129926570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x129855e70 '__SVUint64_t'
|-TypedefDecl 0x1299265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x129855e90 '__SVFloat16_t'
|-TypedefDecl 0x129926640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x129855eb0 '__SVFloat32_t'
|-TypedefDecl 0x1299266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x129855ed0 '__SVFloat64_t'
|-TypedefDecl 0x129926710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x129855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x129926778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x129855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1299267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x129855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x129926848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x129855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1299268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x129855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x129926918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x129855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x129926980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x129855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1299269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x129855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x129926a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x129855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x129926ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x129856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x129926b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x129856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x129926b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x129856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x129926bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x129856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x129926c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x129856090 '__clang_svint8x3_t'
|-TypedefDecl 0x129926cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1298560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x129926d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1298560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x129926d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1298560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x129926df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x129856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x129926e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x129856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x129926ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x129856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x129926f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x129856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x129926f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x129856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x129927800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1298561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x129927868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1298561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1299278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1298561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x129927938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x129856210 '__clang_svint8x4_t'
|-TypedefDecl 0x1299279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x129856230 '__clang_svint16x4_t'
|-TypedefDecl 0x129927a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x129856250 '__clang_svint32x4_t'
|-TypedefDecl 0x129927a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x129856270 '__clang_svint64x4_t'
|-TypedefDecl 0x129927ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x129856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x129927b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1298562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x129927ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1298562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x129927c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1298562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x129927c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x129856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x129927ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x129856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x129927d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x129856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x129927db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x129856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x129927e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x129856390 '__SVBool_t'
|-TypedefDecl 0x129927e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1298563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x129927ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1298563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x129927f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1298563f0 '__SVCount_t'
|-TypedefDecl 0x129927ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x129927fb0 'char *'
|   `-BuiltinType 0x1298556b0 'char'
|-TypedefDecl 0x129928068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x129927fb0 'char *'
|   `-BuiltinType 0x1298556b0 'char'
|-FunctionDecl 0x1299283a0 <dataset_diviso_filec/func9252_vuln.c:1:1, line:67:1> line:1:6 invalid jpc_qmfb_split_col 'void (int *, int, int, int)'
| |-ParmVarDecl 0x129928128 <col:25, col:36> col:36 invalid a 'int *'
| |-ParmVarDecl 0x1299281a8 <col:39, col:43> col:43 used numrows 'int'
| |-ParmVarDecl 0x129928228 <col:52, col:56> col:56 used stride 'int'
| |-ParmVarDecl 0x1299282a8 <line:2:3, col:7> col:7 used parity 'int'
| `-CompoundStmt 0x129944e08 <line:3:1, line:67:1>
|   |-DeclStmt 0x129928730 <line:5:2, col:43>
|   | `-VarDecl 0x129928480 <col:2, col:42> col:6 used bufsize 'int' cinit
|   |   `-CallExpr 0x1299286e8 <col:16, col:42> 'int'
|   |     |-ImplicitCastExpr 0x1299286d0 <col:16> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x129928640 <col:16> 'int ()' Function 0x129928588 'JPC_CEILDIVPOW2' 'int ()'
|   |     |-ImplicitCastExpr 0x129928718 <col:32> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x129928660 <col:32> 'int' lvalue ParmVar 0x1299281a8 'numrows' 'int'
|   |     `-IntegerLiteral 0x129928680 <col:41> 'int' 1
|   |-DeclStmt 0x129941c00 <line:12:2, col:28>
|   | `-VarDecl 0x129928790 <col:2, col:22> col:22 referenced invalid srcptr 'int *' register
|   |-DeclStmt 0x129941c98 <line:13:2, col:28>
|   | `-VarDecl 0x129941c30 <col:2, col:22> col:22 referenced invalid dstptr 'int *' register
|   |-DeclStmt 0x129941d30 <line:14:2, col:16>
|   | `-VarDecl 0x129941cc8 <col:2, col:15> col:15 used n 'int' register
|   |-DeclStmt 0x129941dc8 <line:15:2, col:16>
|   | `-VarDecl 0x129941d60 <col:2, col:15> col:15 used m 'int' register
|   |-DeclStmt 0x129941e60 <line:16:2, col:15>
|   | `-VarDecl 0x129941df8 <col:2, col:6> col:6 used hstartcol 'int'
|   |-IfStmt 0x1299426a8 <line:20:2, line:25:2>
|   | |-BinaryOperator 0x129941ef0 <line:20:6, col:16> 'int' contains-errors '>'
|   | | |-DeclRefExpr 0x129941e78 <col:6> 'int' lvalue Var 0x129928480 'bufsize' 'int'
|   | | `-RecoveryExpr 0x129941ed0 <col:16> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x129942690 <col:35, line:25:2>
|   |   `-IfStmt 0x129942670 <line:21:3, line:24:3>
|   |     |-RecoveryExpr 0x129942060 <line:21:7, col:54> '_Bool' contains-errors
|   |     `-CompoundStmt 0x129942658 <col:57, line:24:3>
|   |       `-CallExpr 0x129942638 <line:23:4, col:10> 'void'
|   |         `-ImplicitCastExpr 0x129942620 <col:4> 'void (*)(void) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |           `-DeclRefExpr 0x1299425d0 <col:4> 'void (void) __attribute__((noreturn))' Function 0x1299424d0 'abort' 'void (void) __attribute__((noreturn))'
|   |-IfStmt 0x129944b78 <line:28:2, line:58:2>
|   | |-BinaryOperator 0x129942720 <line:28:6, col:17> 'int' '>='
|   | | |-ImplicitCastExpr 0x129942708 <col:6> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1299426c8 <col:6> 'int' lvalue ParmVar 0x1299281a8 'numrows' 'int'
|   | | `-IntegerLiteral 0x1299426e8 <col:17> 'int' 2
|   | `-CompoundStmt 0x129944af8 <col:20, line:58:2>
|   |   |-BinaryOperator 0x129942890 <line:29:3, col:41> 'int' '='
|   |   | |-DeclRefExpr 0x129942740 <col:3> 'int' lvalue Var 0x129941df8 'hstartcol' 'int'
|   |   | `-BinaryOperator 0x129942870 <col:15, col:41> 'int' '>>'
|   |   |   |-ParenExpr 0x129942830 <col:15, col:36> 'int'
|   |   |   | `-BinaryOperator 0x129942810 <col:16, col:30> 'int' '-'
|   |   |   |   |-BinaryOperator 0x1299427b8 <col:16, col:26> 'int' '+'
|   |   |   |   | |-ImplicitCastExpr 0x1299427a0 <col:16> 'int' <LValueToRValue>
|   |   |   |   | | `-DeclRefExpr 0x129942760 <col:16> 'int' lvalue ParmVar 0x1299281a8 'numrows' 'int'
|   |   |   |   | `-IntegerLiteral 0x129942780 <col:26> 'int' 1
|   |   |   |   `-ImplicitCastExpr 0x1299427f8 <col:30> 'int' <LValueToRValue>
|   |   |   |     `-DeclRefExpr 0x1299427d8 <col:30> 'int' lvalue ParmVar 0x1299282a8 'parity' 'int'
|   |   |   `-IntegerLiteral 0x129942850 <col:41> 'int' 1
|   |   |-BinaryOperator 0x129942a40 <line:30:3, col:50> 'int' '='
|   |   | |-DeclRefExpr 0x1299428b0 <col:3> 'int' lvalue Var 0x129941d60 'm' 'int'
|   |   | `-ConditionalOperator 0x129942a10 <col:7, col:50> 'int'
|   |   |   |-ImplicitCastExpr 0x1299429e0 <col:7, col:14> 'int' <LValueToRValue>
|   |   |   | `-ParenExpr 0x1299428f0 <col:7, col:14> 'int' lvalue
|   |   |   |   `-DeclRefExpr 0x1299428d0 <col:8> 'int' lvalue ParmVar 0x1299282a8 'parity' 'int'
|   |   |   |-ImplicitCastExpr 0x1299429f8 <col:18> 'int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x129942910 <col:18> 'int' lvalue Var 0x129941df8 'hstartcol' 'int'
|   |   |   `-ParenExpr 0x1299429c0 <col:30, col:50> 'int'
|   |   |     `-BinaryOperator 0x1299429a0 <col:31, col:41> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x129942970 <col:31> 'int' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x129942930 <col:31> 'int' lvalue ParmVar 0x1299281a8 'numrows' 'int'
|   |   |       `-ImplicitCastExpr 0x129942988 <col:41> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x129942950 <col:41> 'int' lvalue Var 0x129941df8 'hstartcol' 'int'
|   |   |-BinaryOperator 0x129942ab8 <line:32:3, col:7> 'int' '='
|   |   | |-DeclRefExpr 0x129942a60 <col:3> 'int' lvalue Var 0x129941cc8 'n' 'int'
|   |   | `-ImplicitCastExpr 0x129942aa0 <col:7> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x129942a80 <col:7> 'int' lvalue Var 0x129941d60 'm' 'int'
|   |   |-BinaryOperator 0x129942b78 <line:33:3, col:12> '<dependent type>' contains-errors '='
|   |   | |-RecoveryExpr 0x129942af8 <col:3> '<dependent type>' contains-errors lvalue
|   |   | | `-DeclRefExpr 0x129942ad8 <col:3> 'int *' lvalue Var 0x129941c30 'dstptr' 'int *'
|   |   | `-RecoveryExpr 0x129942b58 <col:12> '<dependent type>' contains-errors lvalue
|   |   |-BinaryOperator 0x129943b40 <line:34:3, col:36> '<dependent type>' contains-errors '='
|   |   | |-RecoveryExpr 0x129942bb8 <col:3> '<dependent type>' contains-errors lvalue
|   |   | | `-DeclRefExpr 0x129942b98 <col:3> 'int *' lvalue Var 0x129928790 'srcptr' 'int *'
|   |   | `-UnaryOperator 0x129943b28 <col:12, col:36> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   |   `-ArraySubscriptExpr 0x129943b08 <col:13, col:36> '<dependent type>' contains-errors lvalue
|   |   |     |-ImplicitCastExpr 0x129943af0 <col:13> '<dependent type>' contains-errors <LValueToRValue>
|   |   |     | `-RecoveryExpr 0x129942be0 <col:13> '<dependent type>' contains-errors lvalue
|   |   |     `-BinaryOperator 0x129943ad0 <col:15, col:30> 'int' '*'
|   |   |       |-ParenExpr 0x129943a78 <col:15, col:26> 'int'
|   |   |       | `-BinaryOperator 0x129943a58 <col:16, col:20> 'int' '-'
|   |   |       |   |-IntegerLiteral 0x129943a00 <col:16> 'int' 1
|   |   |       |   `-ImplicitCastExpr 0x129943a40 <col:20> 'int' <LValueToRValue>
|   |   |       |     `-DeclRefExpr 0x129943a20 <col:20> 'int' lvalue ParmVar 0x1299282a8 'parity' 'int'
|   |   |       `-ImplicitCastExpr 0x129943ab8 <col:30> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x129943a98 <col:30> 'int' lvalue ParmVar 0x129928228 'stride' 'int'
|   |   |-WhileStmt 0x129943de8 <line:35:3, line:39:3>
|   |   | |-BinaryOperator 0x129943bb8 <line:35:10, col:16> 'int' '>'
|   |   | | |-UnaryOperator 0x129943b80 <col:10, col:11> 'int' postfix '--'
|   |   | | | `-DeclRefExpr 0x129943b60 <col:10> 'int' lvalue Var 0x129941cc8 'n' 'int'
|   |   | | `-IntegerLiteral 0x129943b98 <col:16> 'int' 0
|   |   | `-CompoundStmt 0x129943dc0 <col:19, line:39:3>
|   |   |   |-BinaryOperator 0x129943c78 <line:36:4, col:15> '<dependent type>' contains-errors '='
|   |   |   | |-UnaryOperator 0x129943c10 <col:4, col:5> '<dependent type>' contains-errors prefix '*' cannot overflow
|   |   |   | | `-ImplicitCastExpr 0x129943bf8 <col:5> '<dependent type>' contains-errors <LValueToRValue>
|   |   |   | |   `-RecoveryExpr 0x129943bd8 <col:5> '<dependent type>' contains-errors lvalue
|   |   |   | `-UnaryOperator 0x129943c60 <col:14, col:15> '<dependent type>' contains-errors prefix '*' cannot overflow
|   |   |   |   `-ImplicitCastExpr 0x129943c48 <col:15> '<dependent type>' contains-errors <LValueToRValue>
|   |   |   |     `-RecoveryExpr 0x129943c28 <col:15> '<dependent type>' contains-errors lvalue
|   |   |   |-UnaryOperator 0x129943cb8 <line:37:4, col:6> '<dependent type>' contains-errors prefix '++' cannot overflow
|   |   |   | `-RecoveryExpr 0x129943c98 <col:6> '<dependent type>' contains-errors lvalue
|   |   |   `-CompoundAssignOperator 0x129943d90 <line:38:4, col:24> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   |   |     |-RecoveryExpr 0x129943cf0 <col:4> '<dependent type>' contains-errors lvalue
|   |   |     | `-DeclRefExpr 0x129943cd0 <col:4> 'int *' lvalue Var 0x129928790 'srcptr' 'int *'
|   |   |     `-BinaryOperator 0x129943d70 <col:14, col:24> 'int' '<<'
|   |   |       |-ImplicitCastExpr 0x129943d58 <col:14> 'int' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x129943d18 <col:14> 'int' lvalue ParmVar 0x129928228 'stride' 'int'
|   |   |       `-IntegerLiteral 0x129943d38 <col:24> 'int' 1
|   |   |-BinaryOperator 0x129943fb0 <line:41:3, col:36> '<dependent type>' contains-errors '='
|   |   | |-RecoveryExpr 0x129943e28 <col:3> '<dependent type>' contains-errors lvalue
|   |   | | `-DeclRefExpr 0x129943e08 <col:3> 'int *' lvalue Var 0x129941c30 'dstptr' 'int *'
|   |   | `-UnaryOperator 0x129943f98 <col:12, col:36> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   |   `-ArraySubscriptExpr 0x129943f78 <col:13, col:36> '<dependent type>' contains-errors lvalue
|   |   |     |-ImplicitCastExpr 0x129943f60 <col:13> '<dependent type>' contains-errors <LValueToRValue>
|   |   |     | `-RecoveryExpr 0x129943e50 <col:13> '<dependent type>' contains-errors lvalue
|   |   |     `-BinaryOperator 0x129943f40 <col:15, col:30> 'int' '*'
|   |   |       |-ParenExpr 0x129943ee8 <col:15, col:26> 'int'
|   |   |       | `-BinaryOperator 0x129943ec8 <col:16, col:20> 'int' '-'
|   |   |       |   |-IntegerLiteral 0x129943e70 <col:16> 'int' 1
|   |   |       |   `-ImplicitCastExpr 0x129943eb0 <col:20> 'int' <LValueToRValue>
|   |   |       |     `-DeclRefExpr 0x129943e90 <col:20> 'int' lvalue ParmVar 0x1299282a8 'parity' 'int'
|   |   |       `-ImplicitCastExpr 0x129943f28 <col:30> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x129943f08 <col:30> 'int' lvalue ParmVar 0x129928228 'stride' 'int'
|   |   |-BinaryOperator 0x129944178 <line:42:3, col:36> '<dependent type>' contains-errors '='
|   |   | |-RecoveryExpr 0x129943ff0 <col:3> '<dependent type>' contains-errors lvalue
|   |   | | `-DeclRefExpr 0x129943fd0 <col:3> 'int *' lvalue Var 0x129928790 'srcptr' 'int *'
|   |   | `-UnaryOperator 0x129944160 <col:12, col:36> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   |   `-ArraySubscriptExpr 0x129944140 <col:13, col:36> '<dependent type>' contains-errors lvalue
|   |   |     |-ImplicitCastExpr 0x129944128 <col:13> '<dependent type>' contains-errors <LValueToRValue>
|   |   |     | `-RecoveryExpr 0x129944018 <col:13> '<dependent type>' contains-errors lvalue
|   |   |     `-BinaryOperator 0x129944108 <col:15, col:30> 'int' '*'
|   |   |       |-ParenExpr 0x1299440b0 <col:15, col:26> 'int'
|   |   |       | `-BinaryOperator 0x129944090 <col:16, col:20> 'int' '-'
|   |   |       |   |-IntegerLiteral 0x129944038 <col:16> 'int' 2
|   |   |       |   `-ImplicitCastExpr 0x129944078 <col:20> 'int' <LValueToRValue>
|   |   |       |     `-DeclRefExpr 0x129944058 <col:20> 'int' lvalue ParmVar 0x1299282a8 'parity' 'int'
|   |   |       `-ImplicitCastExpr 0x1299440f0 <col:30> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x1299440d0 <col:30> 'int' lvalue ParmVar 0x129928228 'stride' 'int'
|   |   |-BinaryOperator 0x1299442d8 <line:43:3, col:29> 'int' '='
|   |   | |-DeclRefExpr 0x129944198 <col:3> 'int' lvalue Var 0x129941cc8 'n' 'int'
|   |   | `-BinaryOperator 0x1299442b8 <col:7, col:29> 'int' '-'
|   |   |   |-BinaryOperator 0x129944228 <col:7, col:17> 'int' '-'
|   |   |   | |-ImplicitCastExpr 0x1299441f8 <col:7> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x1299441b8 <col:7> 'int' lvalue ParmVar 0x1299281a8 'numrows' 'int'
|   |   |   | `-ImplicitCastExpr 0x129944210 <col:17> 'int' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x1299441d8 <col:17> 'int' lvalue Var 0x129941d60 'm' 'int'
|   |   |   `-ParenExpr 0x129944298 <col:21, col:29> 'int'
|   |   |     `-UnaryOperator 0x129944280 <col:22, col:23> 'int' prefix '!' cannot overflow
|   |   |       `-ImplicitCastExpr 0x129944268 <col:23> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x129944248 <col:23> 'int' lvalue ParmVar 0x1299282a8 'parity' 'int'
|   |   |-WhileStmt 0x1299445e0 <line:44:3, line:48:3>
|   |   | |-BinaryOperator 0x129944350 <line:44:10, col:16> 'int' '>'
|   |   | | |-UnaryOperator 0x129944318 <col:10, col:11> 'int' postfix '--'
|   |   | | | `-DeclRefExpr 0x1299442f8 <col:10> 'int' lvalue Var 0x129941cc8 'n' 'int'
|   |   | | `-IntegerLiteral 0x129944330 <col:16> 'int' 0
|   |   | `-CompoundStmt 0x1299445b8 <col:19, line:48:3>
|   |   |   |-BinaryOperator 0x129944410 <line:45:4, col:15> '<dependent type>' contains-errors '='
|   |   |   | |-UnaryOperator 0x1299443a8 <col:4, col:5> '<dependent type>' contains-errors prefix '*' cannot overflow
|   |   |   | | `-ImplicitCastExpr 0x129944390 <col:5> '<dependent type>' contains-errors <LValueToRValue>
|   |   |   | |   `-RecoveryExpr 0x129944370 <col:5> '<dependent type>' contains-errors lvalue
|   |   |   | `-UnaryOperator 0x1299443f8 <col:14, col:15> '<dependent type>' contains-errors prefix '*' cannot overflow
|   |   |   |   `-ImplicitCastExpr 0x1299443e0 <col:15> '<dependent type>' contains-errors <LValueToRValue>
|   |   |   |     `-RecoveryExpr 0x1299443c0 <col:15> '<dependent type>' contains-errors lvalue
|   |   |   |-CompoundAssignOperator 0x129944498 <line:46:4, col:14> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   |   |   | |-RecoveryExpr 0x129944450 <col:4> '<dependent type>' contains-errors lvalue
|   |   |   | | `-DeclRefExpr 0x129944430 <col:4> 'int *' lvalue Var 0x129941c30 'dstptr' 'int *'
|   |   |   | `-DeclRefExpr 0x129944478 <col:14> 'int' lvalue ParmVar 0x129928228 'stride' 'int'
|   |   |   `-CompoundAssignOperator 0x129944588 <line:47:4, col:24> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   |   |     |-RecoveryExpr 0x1299444e8 <col:4> '<dependent type>' contains-errors lvalue
|   |   |     | `-DeclRefExpr 0x1299444c8 <col:4> 'int *' lvalue Var 0x129928790 'srcptr' 'int *'
|   |   |     `-BinaryOperator 0x129944568 <col:14, col:24> 'int' '<<'
|   |   |       |-ImplicitCastExpr 0x129944550 <col:14> 'int' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x129944510 <col:14> 'int' lvalue ParmVar 0x129928228 'stride' 'int'
|   |   |       `-IntegerLiteral 0x129944530 <col:24> 'int' 1
|   |   |-BinaryOperator 0x129944748 <line:50:3, col:33> '<dependent type>' contains-errors '='
|   |   | |-RecoveryExpr 0x129944620 <col:3> '<dependent type>' contains-errors lvalue
|   |   | | `-DeclRefExpr 0x129944600 <col:3> 'int *' lvalue Var 0x129941c30 'dstptr' 'int *'
|   |   | `-UnaryOperator 0x129944730 <col:12, col:33> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   |   `-ArraySubscriptExpr 0x129944710 <col:13, col:33> '<dependent type>' contains-errors lvalue
|   |   |     |-ImplicitCastExpr 0x1299446f8 <col:13> '<dependent type>' contains-errors <LValueToRValue>
|   |   |     | `-RecoveryExpr 0x129944648 <col:13> '<dependent type>' contains-errors lvalue
|   |   |     `-BinaryOperator 0x1299446d8 <col:15, col:27> 'int' '*'
|   |   |       |-ImplicitCastExpr 0x1299446a8 <col:15> 'int' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x129944668 <col:15> 'int' lvalue Var 0x129941df8 'hstartcol' 'int'
|   |   |       `-ImplicitCastExpr 0x1299446c0 <col:27> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x129944688 <col:27> 'int' lvalue ParmVar 0x129928228 'stride' 'int'
|   |   |-BinaryOperator 0x129944808 <line:51:3, col:12> '<dependent type>' contains-errors '='
|   |   | |-RecoveryExpr 0x129944788 <col:3> '<dependent type>' contains-errors lvalue
|   |   | | `-DeclRefExpr 0x129944768 <col:3> 'int *' lvalue Var 0x129928790 'srcptr' 'int *'
|   |   | `-RecoveryExpr 0x1299447e8 <col:12> '<dependent type>' contains-errors lvalue
|   |   |-BinaryOperator 0x129944880 <line:52:3, col:7> 'int' '='
|   |   | |-DeclRefExpr 0x129944828 <col:3> 'int' lvalue Var 0x129941cc8 'n' 'int'
|   |   | `-ImplicitCastExpr 0x129944868 <col:7> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x129944848 <col:7> 'int' lvalue Var 0x129941d60 'm' 'int'
|   |   `-WhileStmt 0x129944ad8 <line:53:3, line:57:3>
|   |     |-BinaryOperator 0x1299448f8 <line:53:10, col:16> 'int' '>'
|   |     | |-UnaryOperator 0x1299448c0 <col:10, col:11> 'int' postfix '--'
|   |     | | `-DeclRefExpr 0x1299448a0 <col:10> 'int' lvalue Var 0x129941cc8 'n' 'int'
|   |     | `-IntegerLiteral 0x1299448d8 <col:16> 'int' 0
|   |     `-CompoundStmt 0x129944ab0 <col:19, line:57:3>
|   |       |-BinaryOperator 0x1299449b8 <line:54:4, col:15> '<dependent type>' contains-errors '='
|   |       | |-UnaryOperator 0x129944950 <col:4, col:5> '<dependent type>' contains-errors prefix '*' cannot overflow
|   |       | | `-ImplicitCastExpr 0x129944938 <col:5> '<dependent type>' contains-errors <LValueToRValue>
|   |       | |   `-RecoveryExpr 0x129944918 <col:5> '<dependent type>' contains-errors lvalue
|   |       | `-UnaryOperator 0x1299449a0 <col:14, col:15> '<dependent type>' contains-errors prefix '*' cannot overflow
|   |       |   `-ImplicitCastExpr 0x129944988 <col:15> '<dependent type>' contains-errors <LValueToRValue>
|   |       |     `-RecoveryExpr 0x129944968 <col:15> '<dependent type>' contains-errors lvalue
|   |       |-CompoundAssignOperator 0x129944a48 <line:55:4, col:14> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   |       | |-RecoveryExpr 0x129944a00 <col:4> '<dependent type>' contains-errors lvalue
|   |       | | `-DeclRefExpr 0x1299449d8 <col:4> 'int *' lvalue Var 0x129941c30 'dstptr' 'int *'
|   |       | `-DeclRefExpr 0x129944a28 <col:14> 'int' lvalue ParmVar 0x129928228 'stride' 'int'
|   |       `-UnaryOperator 0x129944a98 <line:56:4, col:6> '<dependent type>' contains-errors prefix '++' cannot overflow
|   |         `-RecoveryExpr 0x129944a78 <col:6> '<dependent type>' contains-errors lvalue
|   `-IfStmt 0x129944de8 <line:62:2, line:64:2>
|     |-BinaryOperator 0x129944c28 <line:62:6, col:13> 'int' contains-errors '!='
|     | |-RecoveryExpr 0x129944be8 <col:6> '<dependent type>' contains-errors lvalue
|     | `-RecoveryExpr 0x129944c08 <col:13> '<dependent type>' contains-errors lvalue
|     `-CompoundStmt 0x129944dd0 <col:23, line:64:2>
|       `-CallExpr 0x129944da8 <line:63:3, col:15> '<dependent type>' contains-errors
|         |-DeclRefExpr 0x129944d28 <col:3> 'int ()' Function 0x129944c70 'jas_free' 'int ()'
|         `-RecoveryExpr 0x129944d88 <col:12> '<dependent type>' contains-errors lvalue
`-FunctionDecl 0x1299424d0 <line:23:4> col:4 implicit used abort 'void (void) __attribute__((noreturn))' extern
  `-BuiltinAttr 0x129942578 <<invalid sloc>> Implicit 867
