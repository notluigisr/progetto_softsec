TranslationUnitDecl 0x15c828208 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x15c8290b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x15c8287d0 '__int128'
|-TypedefDecl 0x15c829128 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x15c8287f0 'unsigned __int128'
|-TypedefDecl 0x15d80be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x15d80bc00 'struct __NSConstantString_tag'
|   `-Record 0x15c829180 '__NSConstantString_tag'
|-TypedefDecl 0x15d80be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x15c828990 '__SVInt8_t'
|-TypedefDecl 0x15d80bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x15c8289b0 '__SVInt16_t'
|-TypedefDecl 0x15d80bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x15c8289d0 '__SVInt32_t'
|-TypedefDecl 0x15d80bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x15c8289f0 '__SVInt64_t'
|-TypedefDecl 0x15d80c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x15c828a10 '__SVUint8_t'
|-TypedefDecl 0x15d80c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x15c828a30 '__SVUint16_t'
|-TypedefDecl 0x15d80c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x15c828a50 '__SVUint32_t'
|-TypedefDecl 0x15d80c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x15c828a70 '__SVUint64_t'
|-TypedefDecl 0x15d80c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x15c828a90 '__SVFloat16_t'
|-TypedefDecl 0x15d80c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x15c828ab0 '__SVFloat32_t'
|-TypedefDecl 0x15d80c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x15c828ad0 '__SVFloat64_t'
|-TypedefDecl 0x15d80c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x15c828af0 '__SVBfloat16_t'
|-TypedefDecl 0x15d80c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x15c828b10 '__clang_svint8x2_t'
|-TypedefDecl 0x15d80c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x15c828b30 '__clang_svint16x2_t'
|-TypedefDecl 0x15d80c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x15c828b50 '__clang_svint32x2_t'
|-TypedefDecl 0x15d80c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x15c828b70 '__clang_svint64x2_t'
|-TypedefDecl 0x15d80c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x15c828b90 '__clang_svuint8x2_t'
|-TypedefDecl 0x15d80c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x15c828bb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x15d80c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x15c828bd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x15d80c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x15c828bf0 '__clang_svuint64x2_t'
|-TypedefDecl 0x15d80c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x15c828c10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x15d80c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x15c828c30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x15d80c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x15c828c50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x15d80c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x15c828c70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x15d80c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x15c828c90 '__clang_svint8x3_t'
|-TypedefDecl 0x15d80c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x15c828cb0 '__clang_svint16x3_t'
|-TypedefDecl 0x15d80c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x15c828cd0 '__clang_svint32x3_t'
|-TypedefDecl 0x15d80c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x15c828cf0 '__clang_svint64x3_t'
|-TypedefDecl 0x15d80c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x15c828d10 '__clang_svuint8x3_t'
|-TypedefDecl 0x15d80ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x15c828d30 '__clang_svuint16x3_t'
|-TypedefDecl 0x15d80cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x15c828d50 '__clang_svuint32x3_t'
|-TypedefDecl 0x15d80cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x15c828d70 '__clang_svuint64x3_t'
|-TypedefDecl 0x15d80cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x15c828d90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x15d80d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x15c828db0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x15d80d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x15c828dd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x15d80d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x15c828df0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x15d80d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x15c828e10 '__clang_svint8x4_t'
|-TypedefDecl 0x15d80d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x15c828e30 '__clang_svint16x4_t'
|-TypedefDecl 0x15d80d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x15c828e50 '__clang_svint32x4_t'
|-TypedefDecl 0x15d80d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x15c828e70 '__clang_svint64x4_t'
|-TypedefDecl 0x15d80d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x15c828e90 '__clang_svuint8x4_t'
|-TypedefDecl 0x15d80d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x15c828eb0 '__clang_svuint16x4_t'
|-TypedefDecl 0x15d80d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x15c828ed0 '__clang_svuint32x4_t'
|-TypedefDecl 0x15d80d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x15c828ef0 '__clang_svuint64x4_t'
|-TypedefDecl 0x15d80d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x15c828f10 '__clang_svfloat16x4_t'
|-TypedefDecl 0x15d80d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x15c828f30 '__clang_svfloat32x4_t'
|-TypedefDecl 0x15d80d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x15c828f50 '__clang_svfloat64x4_t'
|-TypedefDecl 0x15d80d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x15c828f70 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x15d80da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x15c828f90 '__SVBool_t'
|-TypedefDecl 0x15d80da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x15c828fb0 '__clang_svboolx2_t'
|-TypedefDecl 0x15d80dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x15c828fd0 '__clang_svboolx4_t'
|-TypedefDecl 0x15d80db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x15c828ff0 '__SVCount_t'
|-TypedefDecl 0x15d80dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x15d80dbb0 'char *'
|   `-BuiltinType 0x15c8282b0 'char'
|-TypedefDecl 0x15d80dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x15d80dbb0 'char *'
|   `-BuiltinType 0x15c8282b0 'char'
|-FunctionDecl 0x15d80ddf0 <dataset_diviso_filec/func19999_nonvuln.c:1:1, line:69:1> line:1:13 invalid qemu_spice_create_update 'void (int *)' static
| |-ParmVarDecl 0x15d80dd28 <col:38, col:58> col:58 referenced invalid ssd 'int *'
| `-CompoundStmt 0x15c8f68d8 <line:2:1, line:69:1>
|   |-DeclStmt 0x15d80df40 <line:3:5, col:34>
|   | `-VarDecl 0x15d80deb8 <col:5, col:32> col:22 used blksize 'const int' static cinit
|   |   `-IntegerLiteral 0x15d80df20 <col:32> 'int' 32
|   |-DeclStmt 0x15d80e2c0 <line:4:5, col:66>
|   | `-VarDecl 0x15d80df70 <col:5, col:59> col:9 used blocks 'int' cinit
|   |   `-BinaryOperator 0x15d80e2a0 <col:18, col:59> '<dependent type>' contains-errors '/'
|   |     |-ParenExpr 0x15d80e260 <col:18, col:55> '<dependent type>' contains-errors
|   |     | `-BinaryOperator 0x15d80e240 <col:19, col:54> '<dependent type>' contains-errors '-'
|   |     |   |-BinaryOperator 0x15d80e200 <col:19, col:44> '<dependent type>' contains-errors '+'
|   |     |   | |-CallExpr 0x15d80e1b8 <col:19, col:40> '<dependent type>' contains-errors
|   |     |   | | |-DeclRefExpr 0x15d80e130 <col:19> 'int ()' Function 0x15d80e078 'surface_width' 'int ()'
|   |     |   | | `-CXXDependentScopeMemberExpr 0x15d80e170 <col:33, col:38> '<dependent type>' contains-errors lvalue ->ds
|   |     |   | |   `-RecoveryExpr 0x15d80e150 <col:33> '<dependent type>' contains-errors lvalue
|   |     |   | `-DeclRefExpr 0x15d80e1e0 <col:44> 'const int' lvalue Var 0x15d80deb8 'blksize' 'const int'
|   |     |   `-IntegerLiteral 0x15d80e220 <col:54> 'int' 1
|   |     `-DeclRefExpr 0x15d80e280 <col:59> 'const int' lvalue Var 0x15d80deb8 'blksize' 'const int'
|   |-DeclStmt 0x15d827400 <line:5:5, col:26>
|   | `-VarDecl 0x15d80e398 <col:5, col:25> col:9 used dirty_top 'int[blocks]'
|   |-DeclStmt 0x15d827750 <line:6:5, col:34>
|   | |-VarDecl 0x15d827430 <col:5, col:9> col:9 used y 'int'
|   | |-VarDecl 0x15d8274b0 <col:5, col:12> col:12 used yoff 'int'
|   | |-VarDecl 0x15d827530 <col:5, col:18> col:18 used x 'int'
|   | |-VarDecl 0x15d8275b0 <col:5, col:21> col:21 used xoff 'int'
|   | |-VarDecl 0x15d827630 <col:5, col:27> col:27 used blk 'int'
|   | `-VarDecl 0x15d8276b0 <col:5, col:32> col:32 used bw 'int'
|   |-DeclStmt 0x15d827978 <line:7:5, col:47>
|   | `-VarDecl 0x15d827780 <col:5, col:46> col:9 used bpp 'int' cinit
|   |   `-CallExpr 0x15d827950 <col:15, col:46> '<dependent type>' contains-errors
|   |     |-DeclRefExpr 0x15d8278c8 <col:15> 'int ()' Function 0x15d827810 'surface_bytes_per_pixel' 'int ()'
|   |     `-CXXDependentScopeMemberExpr 0x15d827908 <col:39, col:44> '<dependent type>' contains-errors lvalue ->ds
|   |       `-RecoveryExpr 0x15d8278e8 <col:39> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x15d827bc0 <line:10:5, line:12:5>
|   | |-CallExpr 0x15d827b70 <line:10:9, col:45> '<dependent type>' contains-errors
|   | | |-DeclRefExpr 0x15d827ad0 <col:9> 'int ()' Function 0x15d827a18 'qemu_spice_rect_is_empty' 'int ()'
|   | | `-UnaryOperator 0x15d827b58 <col:34, col:40> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | |   `-CXXDependentScopeMemberExpr 0x15d827b10 <col:35, col:40> '<dependent type>' contains-errors lvalue ->dirty
|   | |     `-RecoveryExpr 0x15d827af0 <col:35> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x15d827ba8 <col:48, line:12:5>
|   |   `-ReturnStmt 0x15d827b98 <line:11:9>
|   |-NullStmt 0x15d827be0 <line:12:6>
|   |-IfStmt 0x15d8282b0 <line:14:5, line:18:5>
|   | |-BinaryOperator 0x15d827ca8 <line:14:9, col:25> 'int' contains-errors '=='
|   | | |-CXXDependentScopeMemberExpr 0x15d827c08 <col:9, col:14> '<dependent type>' contains-errors lvalue ->surface
|   | | | `-RecoveryExpr 0x15d827be8 <col:9> '<dependent type>' contains-errors lvalue
|   | | `-RecoveryExpr 0x15d827c88 <col:25> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x15d828290 <col:31, line:18:5>
|   |   |-BinaryOperator 0x15d827f30 <line:15:9, col:55> '<dependent type>' contains-errors '='
|   |   | |-CXXDependentScopeMemberExpr 0x15d827d10 <col:9, col:14> '<dependent type>' contains-errors lvalue ->surface
|   |   | | `-RecoveryExpr 0x15d827ce8 <col:9> '<dependent type>' contains-errors lvalue
|   |   | |   `-DeclRefExpr 0x15d827cc8 <col:9> 'int *' lvalue ParmVar 0x15d80dd28 'ssd' 'int *'
|   |   | `-CallExpr 0x15d827f08 <col:24, col:55> '<dependent type>' contains-errors
|   |   |   |-DeclRefExpr 0x15d827e38 <col:24> 'int ()' Function 0x15d827d80 'pixman_image_ref' 'int ()'
|   |   |   `-CXXDependentScopeMemberExpr 0x15d827ec0 <col:41, col:50> '<dependent type>' contains-errors lvalue ->image
|   |   |     `-CXXDependentScopeMemberExpr 0x15d827e78 <col:41, col:46> '<dependent type>' contains-errors lvalue ->ds
|   |   |       `-RecoveryExpr 0x15d827e58 <col:41> '<dependent type>' contains-errors lvalue
|   |   `-BinaryOperator 0x15d828270 <line:16:9, line:17:64> '<dependent type>' contains-errors '='
|   |     |-CXXDependentScopeMemberExpr 0x15d827f98 <line:16:9, col:14> '<dependent type>' contains-errors lvalue ->mirror
|   |     | `-RecoveryExpr 0x15d827f70 <col:9> '<dependent type>' contains-errors lvalue
|   |     |   `-DeclRefExpr 0x15d827f50 <col:9> 'int *' lvalue ParmVar 0x15d80dd28 'ssd' 'int *'
|   |     `-CallExpr 0x15d828240 <col:24, line:17:64> '<dependent type>' contains-errors
|   |       |-DeclRefExpr 0x15d8280c0 <line:16:24> 'int ()' Function 0x15d828008 'qemu_pixman_mirror_create' 'int ()'
|   |       |-CXXDependentScopeMemberExpr 0x15d828148 <col:50, col:59> '<dependent type>' contains-errors lvalue ->format
|   |       | `-CXXDependentScopeMemberExpr 0x15d828100 <col:50, col:55> '<dependent type>' contains-errors lvalue ->ds
|   |       |   `-RecoveryExpr 0x15d8280e0 <col:50> '<dependent type>' contains-errors lvalue
|   |       `-CXXDependentScopeMemberExpr 0x15d8281f8 <line:17:50, col:59> '<dependent type>' contains-errors lvalue ->image
|   |         `-CXXDependentScopeMemberExpr 0x15d8281b0 <col:50, col:55> '<dependent type>' contains-errors lvalue ->ds
|   |           `-RecoveryExpr 0x15d828190 <col:50> '<dependent type>' contains-errors lvalue
|   |-ForStmt 0x15d829300 <line:20:5, line:22:5>
|   | |-BinaryOperator 0x15d828310 <line:20:10, col:16> 'int' '='
|   | | |-DeclRefExpr 0x15d8282d0 <col:10> 'int' lvalue Var 0x15d827630 'blk' 'int'
|   | | `-IntegerLiteral 0x15d8282f0 <col:16> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x15d8283a0 <col:19, col:25> 'int' contains-errors '<'
|   | | |-ImplicitCastExpr 0x15d828370 <col:19> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x15d828330 <col:19> 'int' lvalue Var 0x15d827630 'blk' 'int'
|   | | `-ImplicitCastExpr 0x15d828388 <col:25> 'int' contains-errors <LValueToRValue>
|   | |   `-DeclRefExpr 0x15d828350 <col:25> 'int' contains-errors lvalue Var 0x15d80df70 'blocks' 'int'
|   | |-UnaryOperator 0x15d8283e0 <col:33, col:36> 'int' postfix '++'
|   | | `-DeclRefExpr 0x15d8283c0 <col:33> 'int' lvalue Var 0x15d827630 'blk' 'int'
|   | `-CompoundStmt 0x15d8292e8 <col:40, line:22:5>
|   |   `-BinaryOperator 0x15d8292c8 <line:21:9, col:27> 'int' contains-errors '='
|   |     |-ArraySubscriptExpr 0x15d829270 <col:9, col:22> 'int' contains-errors lvalue
|   |     | |-ImplicitCastExpr 0x15d829240 <col:9> 'int *' contains-errors <ArrayToPointerDecay>
|   |     | | `-DeclRefExpr 0x15d829200 <col:9> 'int[blocks]' contains-errors lvalue Var 0x15d80e398 'dirty_top' 'int[blocks]'
|   |     | `-ImplicitCastExpr 0x15d829258 <col:19> 'int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x15d829220 <col:19> 'int' lvalue Var 0x15d827630 'blk' 'int'
|   |     `-UnaryOperator 0x15d8292b0 <col:26, col:27> 'int' prefix '-'
|   |       `-IntegerLiteral 0x15d829290 <col:27> 'int' 1
|   |-ForStmt 0x15c8f5cd0 <line:26:5, line:51:5>
|   | |-BinaryOperator 0x15d829768 <line:26:10, col:25> 'int' contains-errors '='
|   | | |-DeclRefExpr 0x15d829698 <col:10> 'int' lvalue Var 0x15d827430 'y' 'int'
|   | | `-CXXDependentScopeMemberExpr 0x15d829720 <col:14, col:25> '<dependent type>' contains-errors lvalue .top
|   | |   `-CXXDependentScopeMemberExpr 0x15d8296d8 <col:14, col:19> '<dependent type>' contains-errors lvalue ->dirty
|   | |     `-RecoveryExpr 0x15d8296b8 <col:14> '<dependent type>' contains-errors lvalue
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x15d829858 <col:30, col:45> 'int' contains-errors '<'
|   | | |-DeclRefExpr 0x15d829788 <col:30> 'int' lvalue Var 0x15d827430 'y' 'int'
|   | | `-CXXDependentScopeMemberExpr 0x15d829810 <col:34, col:45> '<dependent type>' contains-errors lvalue .bottom
|   | |   `-CXXDependentScopeMemberExpr 0x15d8297c8 <col:34, col:39> '<dependent type>' contains-errors lvalue ->dirty
|   | |     `-RecoveryExpr 0x15d8297a8 <col:34> '<dependent type>' contains-errors lvalue
|   | |-UnaryOperator 0x15d829898 <col:53, col:54> 'int' postfix '++'
|   | | `-DeclRefExpr 0x15d829878 <col:53> 'int' lvalue Var 0x15d827430 'y' 'int'
|   | `-CompoundStmt 0x15c8f5cb0 <col:58, line:51:5>
|   |   |-BinaryOperator 0x15d829aa0 <line:27:9, col:42> 'int' contains-errors '='
|   |   | |-DeclRefExpr 0x15d8298b0 <col:9> 'int' lvalue Var 0x15d8274b0 'yoff' 'int'
|   |   | `-BinaryOperator 0x15d829a80 <col:16, col:42> '<dependent type>' contains-errors '*'
|   |   |   |-DeclRefExpr 0x15d8298d0 <col:16> 'int' lvalue Var 0x15d827430 'y' 'int'
|   |   |   `-CallExpr 0x15d829a58 <col:20, col:42> '<dependent type>' contains-errors
|   |   |     |-DeclRefExpr 0x15d8299d0 <col:20> 'int ()' Function 0x15d829918 'surface_stride' 'int ()'
|   |   |     `-CXXDependentScopeMemberExpr 0x15d829a10 <col:35, col:40> '<dependent type>' contains-errors lvalue ->ds
|   |   |       `-RecoveryExpr 0x15d8299f0 <col:35> '<dependent type>' contains-errors lvalue
|   |   `-ForStmt 0x15c8f5c78 <line:28:9, line:50:9>
|   |     |-BinaryOperator 0x15d829b90 <line:28:14, col:29> 'int' contains-errors '='
|   |     | |-DeclRefExpr 0x15d829ac0 <col:14> 'int' lvalue Var 0x15d827530 'x' 'int'
|   |     | `-CXXDependentScopeMemberExpr 0x15d829b48 <col:18, col:29> '<dependent type>' contains-errors lvalue .left
|   |     |   `-CXXDependentScopeMemberExpr 0x15d829b00 <col:18, col:23> '<dependent type>' contains-errors lvalue ->dirty
|   |     |     `-RecoveryExpr 0x15d829ae0 <col:18> '<dependent type>' contains-errors lvalue
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x15d829c80 <col:35, col:50> 'int' contains-errors '<'
|   |     | |-DeclRefExpr 0x15d829bb0 <col:35> 'int' lvalue Var 0x15d827530 'x' 'int'
|   |     | `-CXXDependentScopeMemberExpr 0x15d829c38 <col:39, col:50> '<dependent type>' contains-errors lvalue .right
|   |     |   `-CXXDependentScopeMemberExpr 0x15d829bf0 <col:39, col:44> '<dependent type>' contains-errors lvalue ->dirty
|   |     |     `-RecoveryExpr 0x15d829bd0 <col:39> '<dependent type>' contains-errors lvalue
|   |     |-CompoundAssignOperator 0x15d829cf8 <col:57, col:62> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |     | |-DeclRefExpr 0x15d829ca0 <col:57> 'int' lvalue Var 0x15d827530 'x' 'int'
|   |     | `-ImplicitCastExpr 0x15d829ce0 <col:62> 'int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x15d829cc0 <col:62> 'const int' lvalue Var 0x15d80deb8 'blksize' 'const int'
|   |     `-CompoundStmt 0x15c8f5c48 <col:71, line:50:9>
|   |       |-BinaryOperator 0x15d829e30 <line:29:13, col:24> 'int' contains-errors '='
|   |       | |-DeclRefExpr 0x15d829d80 <col:13> 'int' lvalue Var 0x15d8275b0 'xoff' 'int'
|   |       | `-BinaryOperator 0x15d829e10 <col:20, col:24> 'int' contains-errors '*'
|   |       |   |-ImplicitCastExpr 0x15d829de0 <col:20> 'int' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x15d829da0 <col:20> 'int' lvalue Var 0x15d827530 'x' 'int'
|   |       |   `-ImplicitCastExpr 0x15d829df8 <col:24> 'int' contains-errors <LValueToRValue>
|   |       |     `-DeclRefExpr 0x15d829dc0 <col:24> 'int' contains-errors lvalue Var 0x15d827780 'bpp' 'int'
|   |       |-BinaryOperator 0x15d829f00 <line:30:13, col:23> 'int' '='
|   |       | |-DeclRefExpr 0x15d829e50 <col:13> 'int' lvalue Var 0x15d827630 'blk' 'int'
|   |       | `-BinaryOperator 0x15d829ee0 <col:19, col:23> 'int' '/'
|   |       |   |-ImplicitCastExpr 0x15d829eb0 <col:19> 'int' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x15d829e70 <col:19> 'int' lvalue Var 0x15d827530 'x' 'int'
|   |       |   `-ImplicitCastExpr 0x15d829ec8 <col:23> 'int' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x15d829e90 <col:23> 'const int' lvalue Var 0x15d80deb8 'blksize' 'const int'
|   |       |-BinaryOperator 0x15d82a180 <line:31:13, col:51> 'int' contains-errors '='
|   |       | |-DeclRefExpr 0x15d829f20 <col:13> 'int' lvalue Var 0x15d8276b0 'bw' 'int'
|   |       | `-CallExpr 0x15d82a150 <col:18, col:51> '<dependent type>' contains-errors
|   |       |   |-DeclRefExpr 0x15d82a020 <col:18> 'int ()' Function 0x15d829f68 'MIN' 'int ()'
|   |       |   |-DeclRefExpr 0x15d82a040 <col:22> 'const int' lvalue Var 0x15d80deb8 'blksize' 'const int'
|   |       |   `-BinaryOperator 0x15d82a130 <col:31, col:50> '<dependent type>' contains-errors '-'
|   |       |     |-CXXDependentScopeMemberExpr 0x15d82a0c8 <col:31, col:42> '<dependent type>' contains-errors lvalue .right
|   |       |     | `-CXXDependentScopeMemberExpr 0x15d82a080 <col:31, col:36> '<dependent type>' contains-errors lvalue ->dirty
|   |       |     |   `-RecoveryExpr 0x15d82a060 <col:31> '<dependent type>' contains-errors lvalue
|   |       |     `-DeclRefExpr 0x15d82a110 <col:50> 'int' lvalue Var 0x15d827530 'x' 'int'
|   |       `-IfStmt 0x15c8f5c18 <line:32:13, line:49:13> has_else
|   |         |-BinaryOperator 0x15d82bc60 <line:32:17, line:34:37> 'int' contains-errors '=='
|   |         | |-CallExpr 0x15d82bc28 <line:32:17, line:34:32> '<dependent type>' contains-errors
|   |         | | |-DeclRefExpr 0x15d82b8c0 <line:32:17> 'int (const void *, const void *, unsigned long)' Function 0x15d82b670 'memcmp' 'int (const void *, const void *, unsigned long)'
|   |         | | |-BinaryOperator 0x15d82bb58 <col:24, col:39> '<dependent type>' contains-errors '+'
|   |         | | | |-BinaryOperator 0x15d82bb38 <col:24, col:32> '<dependent type>' contains-errors '+'
|   |         | | | | |-RecoveryExpr 0x15d82bb18 <col:24> '<dependent type>' contains-errors lvalue
|   |         | | | | `-DeclRefExpr 0x15d82b8f8 <col:32> 'int' lvalue Var 0x15d8274b0 'yoff' 'int'
|   |         | | | `-DeclRefExpr 0x15d82b938 <col:39> 'int' lvalue Var 0x15d8275b0 'xoff' 'int'
|   |         | | |-BinaryOperator 0x15d82bbb8 <line:33:24, col:40> '<dependent type>' contains-errors '+'
|   |         | | | |-BinaryOperator 0x15d82bb98 <col:24, col:33> '<dependent type>' contains-errors '+'
|   |         | | | | |-RecoveryExpr 0x15d82bb78 <col:24> '<dependent type>' contains-errors lvalue
|   |         | | | | `-DeclRefExpr 0x15d82b990 <col:33> 'int' lvalue Var 0x15d8274b0 'yoff' 'int'
|   |         | | | `-DeclRefExpr 0x15d82b9d0 <col:40> 'int' lvalue Var 0x15d8275b0 'xoff' 'int'
|   |         | | `-BinaryOperator 0x15d82bc08 <line:34:24, col:29> 'int' contains-errors '*'
|   |         | |   |-ImplicitCastExpr 0x15d82bbd8 <col:24> 'int' <LValueToRValue>
|   |         | |   | `-DeclRefExpr 0x15d82ba10 <col:24> 'int' lvalue Var 0x15d8276b0 'bw' 'int'
|   |         | |   `-ImplicitCastExpr 0x15d82bbf0 <col:29> 'int' contains-errors <LValueToRValue>
|   |         | |     `-DeclRefExpr 0x15d82ba30 <col:29> 'int' contains-errors lvalue Var 0x15d827780 'bpp' 'int'
|   |         | `-IntegerLiteral 0x15d82bad8 <col:37> 'int' 0
|   |         |-CompoundStmt 0x15d82bfc0 <col:40, line:45:13>
|   |         | `-IfStmt 0x15d82bfa0 <line:35:17, line:44:17>
|   |         |   |-BinaryOperator 0x15d82bd60 <line:35:21, col:40> 'int' contains-errors '!='
|   |         |   | |-ImplicitCastExpr 0x15d82bd48 <col:21, col:34> 'int' contains-errors <LValueToRValue>
|   |         |   | | `-ArraySubscriptExpr 0x15d82bcf0 <col:21, col:34> 'int' contains-errors lvalue
|   |         |   | |   |-ImplicitCastExpr 0x15d82bcc0 <col:21> 'int *' contains-errors <ArrayToPointerDecay>
|   |         |   | |   | `-DeclRefExpr 0x15d82bc80 <col:21> 'int[blocks]' contains-errors lvalue Var 0x15d80e398 'dirty_top' 'int[blocks]'
|   |         |   | |   `-ImplicitCastExpr 0x15d82bcd8 <col:31> 'int' <LValueToRValue>
|   |         |   | |     `-DeclRefExpr 0x15d82bca0 <col:31> 'int' lvalue Var 0x15d827630 'blk' 'int'
|   |         |   | `-UnaryOperator 0x15d82bd30 <col:39, col:40> 'int' prefix '-'
|   |         |   |   `-IntegerLiteral 0x15d82bd10 <col:40> 'int' 1
|   |         |   `-CompoundStmt 0x15d82bf88 <col:43, line:44:17>
|   |         |     `-BinaryOperator 0x15d82bf68 <line:43:21, col:39> 'int' contains-errors '='
|   |         |       |-ArraySubscriptExpr 0x15d82bf10 <col:21, col:34> 'int' contains-errors lvalue
|   |         |       | |-ImplicitCastExpr 0x15d82bee0 <col:21> 'int *' contains-errors <ArrayToPointerDecay>
|   |         |       | | `-DeclRefExpr 0x15d82bea0 <col:21> 'int[blocks]' contains-errors lvalue Var 0x15d80e398 'dirty_top' 'int[blocks]'
|   |         |       | `-ImplicitCastExpr 0x15d82bef8 <col:31> 'int' <LValueToRValue>
|   |         |       |   `-DeclRefExpr 0x15d82bec0 <col:31> 'int' lvalue Var 0x15d827630 'blk' 'int'
|   |         |       `-UnaryOperator 0x15d82bf50 <col:38, col:39> 'int' prefix '-'
|   |         |         `-IntegerLiteral 0x15d82bf30 <col:39> 'int' 1
|   |         `-CompoundStmt 0x15c8f5c00 <line:45:20, line:49:13>
|   |           `-IfStmt 0x15d82c1d8 <line:46:17, line:48:17>
|   |             |-BinaryOperator 0x15d82c0b8 <line:46:21, col:40> 'int' contains-errors '=='
|   |             | |-ImplicitCastExpr 0x15d82c0a0 <col:21, col:34> 'int' contains-errors <LValueToRValue>
|   |             | | `-ArraySubscriptExpr 0x15d82c048 <col:21, col:34> 'int' contains-errors lvalue
|   |             | |   |-ImplicitCastExpr 0x15d82c018 <col:21> 'int *' contains-errors <ArrayToPointerDecay>
|   |             | |   | `-DeclRefExpr 0x15d82bfd8 <col:21> 'int[blocks]' contains-errors lvalue Var 0x15d80e398 'dirty_top' 'int[blocks]'
|   |             | |   `-ImplicitCastExpr 0x15d82c030 <col:31> 'int' <LValueToRValue>
|   |             | |     `-DeclRefExpr 0x15d82bff8 <col:31> 'int' lvalue Var 0x15d827630 'blk' 'int'
|   |             | `-UnaryOperator 0x15d82c088 <col:39, col:40> 'int' prefix '-'
|   |             |   `-IntegerLiteral 0x15d82c068 <col:40> 'int' 1
|   |             `-CompoundStmt 0x15d82c1c0 <col:43, line:48:17>
|   |               `-BinaryOperator 0x15d82c1a0 <line:47:21, col:38> 'int' contains-errors '='
|   |                 |-ArraySubscriptExpr 0x15d82c148 <col:21, col:34> 'int' contains-errors lvalue
|   |                 | |-ImplicitCastExpr 0x15d82c118 <col:21> 'int *' contains-errors <ArrayToPointerDecay>
|   |                 | | `-DeclRefExpr 0x15d82c0d8 <col:21> 'int[blocks]' contains-errors lvalue Var 0x15d80e398 'dirty_top' 'int[blocks]'
|   |                 | `-ImplicitCastExpr 0x15d82c130 <col:31> 'int' <LValueToRValue>
|   |                 |   `-DeclRefExpr 0x15d82c0f8 <col:31> 'int' lvalue Var 0x15d827630 'blk' 'int'
|   |                 `-ImplicitCastExpr 0x15d82c188 <col:38> 'int' <LValueToRValue>
|   |                   `-DeclRefExpr 0x15d82c168 <col:38> 'int' lvalue Var 0x15d827430 'y' 'int'
|   |-ForStmt 0x15c8f6468 <line:53:5, line:66:5>
|   | |-BinaryOperator 0x15c8f5dd8 <line:53:10, col:25> 'int' contains-errors '='
|   | | |-DeclRefExpr 0x15c8f5d08 <col:10> 'int' lvalue Var 0x15d827530 'x' 'int'
|   | | `-CXXDependentScopeMemberExpr 0x15c8f5d90 <col:14, col:25> '<dependent type>' contains-errors lvalue .left
|   | |   `-CXXDependentScopeMemberExpr 0x15c8f5d48 <col:14, col:19> '<dependent type>' contains-errors lvalue ->dirty
|   | |     `-RecoveryExpr 0x15c8f5d28 <col:14> '<dependent type>' contains-errors lvalue
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x15c8f5ec8 <col:31, col:46> 'int' contains-errors '<'
|   | | |-DeclRefExpr 0x15c8f5df8 <col:31> 'int' lvalue Var 0x15d827530 'x' 'int'
|   | | `-CXXDependentScopeMemberExpr 0x15c8f5e80 <col:35, col:46> '<dependent type>' contains-errors lvalue .right
|   | |   `-CXXDependentScopeMemberExpr 0x15c8f5e38 <col:35, col:40> '<dependent type>' contains-errors lvalue ->dirty
|   | |     `-RecoveryExpr 0x15c8f5e18 <col:35> '<dependent type>' contains-errors lvalue
|   | |-CompoundAssignOperator 0x15c8f5f40 <col:53, col:58> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | | |-DeclRefExpr 0x15c8f5ee8 <col:53> 'int' lvalue Var 0x15d827530 'x' 'int'
|   | | `-ImplicitCastExpr 0x15c8f5f28 <col:58> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x15c8f5f08 <col:58> 'const int' lvalue Var 0x15d80deb8 'blksize' 'const int'
|   | `-CompoundStmt 0x15c8f6440 <col:67, line:66:5>
|   |   |-BinaryOperator 0x15c8f6020 <line:54:9, col:19> 'int' '='
|   |   | |-DeclRefExpr 0x15c8f5f70 <col:9> 'int' lvalue Var 0x15d827630 'blk' 'int'
|   |   | `-BinaryOperator 0x15c8f6000 <col:15, col:19> 'int' '/'
|   |   |   |-ImplicitCastExpr 0x15c8f5fd0 <col:15> 'int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x15c8f5f90 <col:15> 'int' lvalue Var 0x15d827530 'x' 'int'
|   |   |   `-ImplicitCastExpr 0x15c8f5fe8 <col:19> 'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x15c8f5fb0 <col:19> 'const int' lvalue Var 0x15d80deb8 'blksize' 'const int'
|   |   |-BinaryOperator 0x15c8f61c0 <line:55:9, col:47> 'int' contains-errors '='
|   |   | |-DeclRefExpr 0x15c8f6040 <col:9> 'int' lvalue Var 0x15d8276b0 'bw' 'int'
|   |   | `-CallExpr 0x15c8f6190 <col:14, col:47> '<dependent type>' contains-errors
|   |   |   |-DeclRefExpr 0x15c8f6060 <col:14> 'int ()' Function 0x15d829f68 'MIN' 'int ()'
|   |   |   |-DeclRefExpr 0x15c8f6080 <col:18> 'const int' lvalue Var 0x15d80deb8 'blksize' 'const int'
|   |   |   `-BinaryOperator 0x15c8f6170 <col:27, col:46> '<dependent type>' contains-errors '-'
|   |   |     |-CXXDependentScopeMemberExpr 0x15c8f6108 <col:27, col:38> '<dependent type>' contains-errors lvalue .right
|   |   |     | `-CXXDependentScopeMemberExpr 0x15c8f60c0 <col:27, col:32> '<dependent type>' contains-errors lvalue ->dirty
|   |   |     |   `-RecoveryExpr 0x15c8f60a0 <col:27> '<dependent type>' contains-errors lvalue
|   |   |     `-DeclRefExpr 0x15c8f6150 <col:46> 'int' lvalue Var 0x15d827530 'x' 'int'
|   |   `-IfStmt 0x15c8f6420 <line:56:9, line:65:9>
|   |     |-BinaryOperator 0x15c8f62c0 <line:56:13, col:32> 'int' contains-errors '!='
|   |     | |-ImplicitCastExpr 0x15c8f62a8 <col:13, col:26> 'int' contains-errors <LValueToRValue>
|   |     | | `-ArraySubscriptExpr 0x15c8f6250 <col:13, col:26> 'int' contains-errors lvalue
|   |     | |   |-ImplicitCastExpr 0x15c8f6220 <col:13> 'int *' contains-errors <ArrayToPointerDecay>
|   |     | |   | `-DeclRefExpr 0x15c8f61e0 <col:13> 'int[blocks]' contains-errors lvalue Var 0x15d80e398 'dirty_top' 'int[blocks]'
|   |     | |   `-ImplicitCastExpr 0x15c8f6238 <col:23> 'int' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x15c8f6200 <col:23> 'int' lvalue Var 0x15d827630 'blk' 'int'
|   |     | `-UnaryOperator 0x15c8f6290 <col:31, col:32> 'int' prefix '-'
|   |     |   `-IntegerLiteral 0x15c8f6270 <col:32> 'int' 1
|   |     `-CompoundStmt 0x15c8f6408 <col:35, line:65:9>
|   |       `-BinaryOperator 0x15c8f63e8 <line:64:13, col:31> 'int' contains-errors '='
|   |         |-ArraySubscriptExpr 0x15c8f6390 <col:13, col:26> 'int' contains-errors lvalue
|   |         | |-ImplicitCastExpr 0x15c8f6360 <col:13> 'int *' contains-errors <ArrayToPointerDecay>
|   |         | | `-DeclRefExpr 0x15c8f6320 <col:13> 'int[blocks]' contains-errors lvalue Var 0x15d80e398 'dirty_top' 'int[blocks]'
|   |         | `-ImplicitCastExpr 0x15c8f6378 <col:23> 'int' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x15c8f6340 <col:23> 'int' lvalue Var 0x15d827630 'blk' 'int'
|   |         `-UnaryOperator 0x15c8f63d0 <col:30, col:31> 'int' prefix '-'
|   |           `-IntegerLiteral 0x15c8f63b0 <col:31> 'int' 1
|   `-CallExpr 0x15c8f68a0 <line:68:5, col:46> '<dependent type>' contains-errors
|     |-DeclRefExpr 0x15c8f6738 <col:5> 'void *(void *, int, unsigned long)' Function 0x15c8f64e8 'memset' 'void *(void *, int, unsigned long)'
|     |-UnaryOperator 0x15c8f67c0 <col:12, col:18> '<dependent type>' contains-errors prefix '&' cannot overflow
|     | `-CXXDependentScopeMemberExpr 0x15c8f6778 <col:13, col:18> '<dependent type>' contains-errors lvalue ->dirty
|     |   `-RecoveryExpr 0x15c8f6758 <col:13> '<dependent type>' contains-errors lvalue
|     |-IntegerLiteral 0x15c8f67d8 <col:25> 'int' 0
|     `-UnaryExprOrTypeTraitExpr 0x15c8f6880 <col:28, col:45> 'unsigned long' contains-errors sizeof
|       `-ParenExpr 0x15c8f6860 <col:34, col:45> '<dependent type>' contains-errors lvalue
|         `-CXXDependentScopeMemberExpr 0x15c8f6818 <col:35, col:40> '<dependent type>' contains-errors lvalue ->dirty
|           `-RecoveryExpr 0x15c8f67f8 <col:35> '<dependent type>' contains-errors lvalue
|-FunctionDecl 0x15d82b670 <line:32:17> col:17 implicit used memcmp 'int (const void *, const void *, unsigned long)' extern
| |-ParmVarDecl 0x15d82b770 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x15d82b7d8 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x15d82b840 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x15d82b718 <<invalid sloc>> Implicit 883
`-FunctionDecl 0x15c8f64e8 <line:68:5> col:5 implicit used memset 'void *(void *, int, unsigned long)' extern
  |-ParmVarDecl 0x15c8f65e8 <<invalid sloc>> <invalid sloc> 'void *'
  |-ParmVarDecl 0x15c8f6650 <<invalid sloc>> <invalid sloc> 'int'
  |-ParmVarDecl 0x15c8f66b8 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x15c8f6590 <<invalid sloc>> Implicit 900
