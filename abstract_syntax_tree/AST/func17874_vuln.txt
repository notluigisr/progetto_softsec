TranslationUnitDecl 0x12a855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x12a8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x12a855bd0 '__int128'
|-TypedefDecl 0x12a856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x12a855bf0 'unsigned __int128'
|-TypedefDecl 0x12a926230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12a926000 'struct __NSConstantString_tag'
|   `-Record 0x12a856580 '__NSConstantString_tag'
|-TypedefDecl 0x12a926298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x12a855d90 '__SVInt8_t'
|-TypedefDecl 0x12a926300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x12a855db0 '__SVInt16_t'
|-TypedefDecl 0x12a926368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x12a855dd0 '__SVInt32_t'
|-TypedefDecl 0x12a9263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x12a855df0 '__SVInt64_t'
|-TypedefDecl 0x12a926438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x12a855e10 '__SVUint8_t'
|-TypedefDecl 0x12a9264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x12a855e30 '__SVUint16_t'
|-TypedefDecl 0x12a926508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x12a855e50 '__SVUint32_t'
|-TypedefDecl 0x12a926570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x12a855e70 '__SVUint64_t'
|-TypedefDecl 0x12a9265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x12a855e90 '__SVFloat16_t'
|-TypedefDecl 0x12a926640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x12a855eb0 '__SVFloat32_t'
|-TypedefDecl 0x12a9266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x12a855ed0 '__SVFloat64_t'
|-TypedefDecl 0x12a926710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x12a855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12a926778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x12a855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12a9267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x12a855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12a926848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x12a855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12a9268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x12a855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12a926918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x12a855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12a926980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x12a855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12a9269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x12a855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12a926a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x12a855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12a926ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x12a856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12a926b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x12a856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12a926b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x12a856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12a926bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x12a856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12a926c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x12a856090 '__clang_svint8x3_t'
|-TypedefDecl 0x12a926cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x12a8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12a926d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x12a8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12a926d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x12a8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12a926df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x12a856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12a926e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x12a856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12a926ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x12a856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12a926f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x12a856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12a926f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x12a856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12a927800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x12a8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12a927868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x12a8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12a9278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x12a8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12a927938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x12a856210 '__clang_svint8x4_t'
|-TypedefDecl 0x12a9279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x12a856230 '__clang_svint16x4_t'
|-TypedefDecl 0x12a927a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x12a856250 '__clang_svint32x4_t'
|-TypedefDecl 0x12a927a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x12a856270 '__clang_svint64x4_t'
|-TypedefDecl 0x12a927ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x12a856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12a927b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x12a8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12a927ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x12a8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12a927c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x12a8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12a927c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x12a856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12a927ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x12a856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12a927d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x12a856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12a927db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x12a856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12a927e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x12a856390 '__SVBool_t'
|-TypedefDecl 0x12a927e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x12a8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12a927ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x12a8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12a927f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x12a8563f0 '__SVCount_t'
|-TypedefDecl 0x12a927ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12a927fb0 'char *'
|   `-BuiltinType 0x12a8556b0 'char'
|-TypedefDecl 0x12a928068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12a927fb0 'char *'
|   `-BuiltinType 0x12a8556b0 'char'
|-FunctionDecl 0x12a9282f8 <dataset_diviso_filec/func17874_vuln.c:1:1, line:65:1> line:1:12 unzzip_cat 'int (int, char **, int)' static
| |-ParmVarDecl 0x12a9280d8 <col:24, col:28> col:28 used argc 'int'
| |-ParmVarDecl 0x12a928188 <col:34, col:42> col:42 used argv 'char **'
| |-ParmVarDecl 0x12a928208 <col:48, col:52> col:52 used extract 'int'
| `-CompoundStmt 0x12a944928 <line:2:1, line:65:1>
|   |-DeclStmt 0x12a928480 <line:3:5, col:13>
|   | `-VarDecl 0x12a928418 <col:5, col:9> col:9 used argn 'int'
|   |-IfStmt 0x12a941bb8 <line:7:5, line:10:5>
|   | |-UnaryOperator 0x12a941818 <line:7:9, col:11> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x12a941800 <col:11> '<dependent type>' contains-errors <LValueToRValue>
|   | |   `-RecoveryExpr 0x12a9287d0 <col:11> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x12a941b98 <col:17, line:10:5>
|   |   |-CallExpr 0x12a9419c0 <line:8:2, col:16> 'int'
|   |   | |-ImplicitCastExpr 0x12a9419a8 <col:2> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x12a941910 <col:2> 'int ()' Function 0x12a941858 'perror' 'int ()'
|   |   | `-ImplicitCastExpr 0x12a9419e8 <col:9, col:15> 'char *' <LValueToRValue>
|   |   |   `-ArraySubscriptExpr 0x12a941988 <col:9, col:15> 'char *' lvalue
|   |   |     |-ImplicitCastExpr 0x12a941970 <col:9> 'char **' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x12a941930 <col:9> 'char **' lvalue ParmVar 0x12a928188 'argv' 'char **'
|   |   |     `-IntegerLiteral 0x12a941950 <col:14> 'int' 1
|   |   `-ReturnStmt 0x12a941b88 <line:9:2, col:23>
|   |     `-CallExpr 0x12a941b60 <col:9, col:23> '<dependent type>' contains-errors
|   |       |-DeclRefExpr 0x12a941ae0 <col:9> 'int ()' Function 0x12a941a28 'exitcode' 'int ()'
|   |       `-RecoveryExpr 0x12a941b40 <col:18> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x12a943aa8 <line:12:5, line:33:5>
|   | |-BinaryOperator 0x12a941c30 <line:12:9, col:17> 'int' '=='
|   | | |-ImplicitCastExpr 0x12a941c18 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x12a941bd8 <col:9> 'int' lvalue ParmVar 0x12a9280d8 'argc' 'int'
|   | | `-IntegerLiteral 0x12a941bf8 <col:17> 'int' 2
|   | `-CompoundStmt 0x12a943a78 <line:13:5, line:33:5>
|   |   |-DeclStmt 0x12a941cf0 <line:14:2, col:18>
|   |   | `-VarDecl 0x12a941c68 <col:2, col:17> col:6 used warnings 'int' cinit
|   |   |   `-IntegerLiteral 0x12a941cd0 <col:17> 'int' 0
|   |   |-ForStmt 0x12a9439a8 <line:16:2, line:28:2>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-RecoveryExpr 0x12a941e78 <line:16:9> '<dependent type>' contains-errors lvalue
|   |   | |-BinaryOperator 0x12a942078 <col:17, col:50> '<dependent type>' contains-errors '='
|   |   | | |-RecoveryExpr 0x12a942010 <col:17> '<dependent type>' contains-errors lvalue
|   |   | | `-CallExpr 0x12a942050 <col:25, col:50> '<dependent type>' contains-errors
|   |   | |   |-DeclRefExpr 0x12a941f90 <col:25> 'int ()' Function 0x12a941ed8 'zzip_entry_findnext' 'int ()'
|   |   | |   `-RecoveryExpr 0x12a942030 <col:45> '<dependent type>' contains-errors lvalue
|   |   | `-CompoundStmt 0x12a943980 <line:17:2, line:28:2>
|   |   |   |-DeclStmt 0x12a9422a0 <line:18:6, col:49>
|   |   |   | `-VarDecl 0x12a9420b0 <col:6, col:48> col:12 used name 'char *' cinit
|   |   |   |   `-CallExpr 0x12a942278 <col:19, col:48> '<dependent type>' contains-errors
|   |   |   |     |-DeclRefExpr 0x12a9421f8 <col:19> 'int ()' Function 0x12a942140 'zzip_entry_strdup_name' 'int ()'
|   |   |   |     `-RecoveryExpr 0x12a942258 <col:43> '<dependent type>' contains-errors lvalue
|   |   |   |-IfStmt 0x12a9423b8 <line:20:6, line:23:6>
|   |   |   | |-UnaryOperator 0x12a942308 <line:20:10, col:12> 'int' contains-errors prefix '!' cannot overflow
|   |   |   | | `-ImplicitCastExpr 0x12a9422f0 <col:12> 'char *' contains-errors <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x12a9422d0 <col:12> 'char *' contains-errors lvalue Var 0x12a9420b0 'name' 'char *'
|   |   |   | `-CompoundStmt 0x12a942398 <col:18, line:23:6>
|   |   |   |   |-CompoundAssignOperator 0x12a942360 <line:21:10, col:22> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |   |   | |-DeclRefExpr 0x12a942320 <col:10> 'int' lvalue Var 0x12a941c68 'warnings' 'int'
|   |   |   |   | `-IntegerLiteral 0x12a942340 <col:22> 'int' 1
|   |   |   |   `-ContinueStmt 0x12a942390 <line:22:10>
|   |   |   `-CallExpr 0x12a943928 <line:27:6, col:16> 'void' contains-errors
|   |   |     |-ImplicitCastExpr 0x12a943910 <col:6> 'void (*)(void *)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x12a943888 <col:6> 'void (void *)' Function 0x12a943718 'free' 'void (void *)'
|   |   |     `-ImplicitCastExpr 0x12a943968 <col:12> 'void *' contains-errors <BitCast>
|   |   |       `-ImplicitCastExpr 0x12a943950 <col:12> 'char *' contains-errors <LValueToRValue>
|   |   |         `-DeclRefExpr 0x12a9438a8 <col:12> 'char *' contains-errors lvalue Var 0x12a9420b0 'name' 'char *'
|   |   |-IfStmt 0x12a943a28 <line:29:2, line:31:2>
|   |   | |-ImplicitCastExpr 0x12a943a00 <line:29:6> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x12a9439e0 <col:6> 'int' lvalue Var 0x12a941c68 'warnings' 'int'
|   |   | `-CompoundStmt 0x12a943a18 <col:16, line:31:2>
|   |   `-ReturnStmt 0x12a943a68 <line:32:2, col:9>
|   |     `-IntegerLiteral 0x12a943a48 <col:9> 'int' 0
|   |-IfStmt 0x12a943f28 <line:35:5, line:43:5>
|   | |-BinaryOperator 0x12a943b90 <line:35:9, col:23> 'int' '&&'
|   | | |-BinaryOperator 0x12a943b20 <col:9, col:17> 'int' '=='
|   | | | |-ImplicitCastExpr 0x12a943b08 <col:9> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x12a943ac8 <col:9> 'int' lvalue ParmVar 0x12a9280d8 'argc' 'int'
|   | | | `-IntegerLiteral 0x12a943ae8 <col:17> 'int' 3
|   | | `-UnaryOperator 0x12a943b78 <col:22, col:23> 'int' prefix '!' cannot overflow
|   | |   `-ImplicitCastExpr 0x12a943b60 <col:23> 'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x12a943b40 <col:23> 'int' lvalue ParmVar 0x12a928208 'extract' 'int'
|   | `-CompoundStmt 0x12a943f08 <line:36:5, line:43:5>
|   |   |-WhileStmt 0x12a943eb8 <line:38:2, line:41:2>
|   |   | |-RecoveryExpr 0x12a943d88 <line:38:9, col:66> '_Bool' contains-errors
|   |   | `-CompoundStmt 0x12a943ea8 <line:39:2, line:41:2>
|   |   `-ReturnStmt 0x12a943ef8 <line:42:2, col:9>
|   |     `-IntegerLiteral 0x12a943ed8 <col:9> 'int' 0
|   |-ForStmt 0x12a9448c0 <line:45:5, line:63:5>
|   | |-BinaryOperator 0x12a943f88 <line:45:10, col:15> 'int' '='
|   | | |-DeclRefExpr 0x12a943f48 <col:10> 'int' lvalue Var 0x12a928418 'argn' 'int'
|   | | `-IntegerLiteral 0x12a943f68 <col:15> 'int' 1
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x12a944018 <col:18, col:25> 'int' '<'
|   | | |-ImplicitCastExpr 0x12a943fe8 <col:18> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x12a943fa8 <col:18> 'int' lvalue Var 0x12a928418 'argn' 'int'
|   | | `-ImplicitCastExpr 0x12a944000 <col:25> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x12a943fc8 <col:25> 'int' lvalue ParmVar 0x12a9280d8 'argc' 'int'
|   | |-UnaryOperator 0x12a944058 <col:31, col:35> 'int' postfix '++'
|   | | `-DeclRefExpr 0x12a944038 <col:31> 'int' lvalue Var 0x12a928418 'argn' 'int'
|   | `-CompoundStmt 0x12a9448b0 <line:46:5, line:63:5>
|   `-ReturnStmt 0x12a944918 <line:64:5, col:12>
|     `-IntegerLiteral 0x12a9448f8 <col:12> 'int' 0
`-FunctionDecl 0x12a943718 <line:27:6> col:6 implicit used free 'void (void *)' extern
  |-ParmVarDecl 0x12a943818 <<invalid sloc>> <invalid sloc> 'void *'
  `-BuiltinAttr 0x12a9437c0 <<invalid sloc>> Implicit 873
