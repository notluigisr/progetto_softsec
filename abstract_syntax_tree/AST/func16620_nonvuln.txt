TranslationUnitDecl 0x140055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1400564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x140055bd0 '__int128'
|-TypedefDecl 0x140056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x140055bf0 'unsigned __int128'
|-TypedefDecl 0x140126a30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x140126800 'struct __NSConstantString_tag'
|   `-Record 0x140056580 '__NSConstantString_tag'
|-TypedefDecl 0x140126a98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x140055d90 '__SVInt8_t'
|-TypedefDecl 0x140126b00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x140055db0 '__SVInt16_t'
|-TypedefDecl 0x140126b68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x140055dd0 '__SVInt32_t'
|-TypedefDecl 0x140126bd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x140055df0 '__SVInt64_t'
|-TypedefDecl 0x140126c38 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x140055e10 '__SVUint8_t'
|-TypedefDecl 0x140126ca0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x140055e30 '__SVUint16_t'
|-TypedefDecl 0x140126d08 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x140055e50 '__SVUint32_t'
|-TypedefDecl 0x140126d70 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x140055e70 '__SVUint64_t'
|-TypedefDecl 0x140126dd8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x140055e90 '__SVFloat16_t'
|-TypedefDecl 0x140126e40 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x140055eb0 '__SVFloat32_t'
|-TypedefDecl 0x140126ea8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x140055ed0 '__SVFloat64_t'
|-TypedefDecl 0x140126f10 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x140055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x140126f78 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x140055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x140126fe0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x140055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x140127048 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x140055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1401270b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x140055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x140127118 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x140055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x140127180 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x140055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1401271e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x140055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x140127250 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x140055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x1401272b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x140056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x140127320 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x140056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x140127388 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x140056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x1401273f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x140056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x140127458 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x140056090 '__clang_svint8x3_t'
|-TypedefDecl 0x1401274c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1400560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x140127528 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1400560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x140127590 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1400560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x1401275f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x140056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x140127660 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x140056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x1401276c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x140056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x140127730 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x140056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x140127798 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x140056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x140128000 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1400561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x140128068 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1400561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1401280d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1400561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x140128138 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x140056210 '__clang_svint8x4_t'
|-TypedefDecl 0x1401281a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x140056230 '__clang_svint16x4_t'
|-TypedefDecl 0x140128208 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x140056250 '__clang_svint32x4_t'
|-TypedefDecl 0x140128270 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x140056270 '__clang_svint64x4_t'
|-TypedefDecl 0x1401282d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x140056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x140128340 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1400562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x1401283a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1400562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x140128410 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1400562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x140128478 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x140056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x1401284e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x140056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x140128548 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x140056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x1401285b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x140056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x140128618 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x140056390 '__SVBool_t'
|-TypedefDecl 0x140128680 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1400563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x1401286e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1400563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x140128750 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1400563f0 '__SVCount_t'
|-TypedefDecl 0x1401287f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1401287b0 'char *'
|   `-BuiltinType 0x1400556b0 'char'
|-TypedefDecl 0x140128868 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1401287b0 'char *'
|   `-BuiltinType 0x1400556b0 'char'
`-FunctionDecl 0x140142080 <dataset_diviso_filec/func16620_nonvuln.c:1:1, line:75:1> line:1:12 invalid asn1_check_tlen 'int (long *, int *, unsigned char *, char *, char *, const unsigned char **, long, int, int, char, int *)' static
  |-ParmVarDecl 0x140128908 <col:28, col:34> col:34 used olen 'long *'
  |-ParmVarDecl 0x1401289b8 <col:40, col:45> col:45 used otag 'int *'
  |-ParmVarDecl 0x140128a68 <col:51, col:66> col:66 used oclass 'unsigned char *'
  |-ParmVarDecl 0x140128ae8 <line:2:28, col:34> col:34 used inf 'char *'
  |-ParmVarDecl 0x140128b68 <col:39, col:45> col:45 used cst 'char *'
  |-ParmVarDecl 0x140128c50 <line:3:28, col:50> col:50 used in 'const unsigned char **'
  |-ParmVarDecl 0x140128cd0 <col:54, col:59> col:59 used len 'long'
  |-ParmVarDecl 0x140128d50 <line:4:28, col:32> col:32 used exptag 'int'
  |-ParmVarDecl 0x140128dd0 <col:40, col:44> col:44 used expclass 'int'
  |-ParmVarDecl 0x140128e48 <col:54, col:59> col:59 used opt 'char'
  |-ParmVarDecl 0x140128ee0 <col:64, col:74> col:74 referenced invalid ctx 'int *'
  `-CompoundStmt 0x140145810 <line:5:1, line:75:1>
    |-DeclStmt 0x140142200 <line:6:5, col:10>
    | `-VarDecl 0x140142198 <col:5, col:9> col:9 used i 'int'
    |-DeclStmt 0x140142330 <line:7:5, col:21>
    | |-VarDecl 0x140142230 <col:5, col:9> col:9 used ptag 'int'
    | `-VarDecl 0x1401422b0 <col:5, col:15> col:15 used pclass 'int'
    |-DeclStmt 0x1401423c8 <line:8:5, col:14>
    | `-VarDecl 0x140142360 <col:5, col:10> col:10 used plen 'long'
    |-DeclStmt 0x1401424f8 <line:9:5, col:31>
    | |-VarDecl 0x1401423f8 <col:5, col:26> col:26 used p 'const unsigned char *'
    | `-VarDecl 0x140142478 <col:5, col:30> col:30 used q 'const unsigned char *'
    |-BinaryOperator 0x140142598 <line:10:5, col:10> 'const unsigned char *' '='
    | |-DeclRefExpr 0x140142510 <col:5> 'const unsigned char *' lvalue Var 0x1401423f8 'p' 'const unsigned char *'
    | `-ImplicitCastExpr 0x140142580 <col:9, col:10> 'const unsigned char *' <LValueToRValue>
    |   `-UnaryOperator 0x140142568 <col:9, col:10> 'const unsigned char *' lvalue prefix '*' cannot overflow
    |     `-ImplicitCastExpr 0x140142550 <col:10> 'const unsigned char **' <LValueToRValue>
    |       `-DeclRefExpr 0x140142530 <col:10> 'const unsigned char **' lvalue ParmVar 0x140128c50 'in' 'const unsigned char **'
    |-BinaryOperator 0x140142610 <line:11:5, col:9> 'const unsigned char *' '='
    | |-DeclRefExpr 0x1401425b8 <col:5> 'const unsigned char *' lvalue Var 0x140142478 'q' 'const unsigned char *'
    | `-ImplicitCastExpr 0x1401425f8 <col:9> 'const unsigned char *' <LValueToRValue>
    |   `-DeclRefExpr 0x1401425d8 <col:9> 'const unsigned char *' lvalue Var 0x1401423f8 'p' 'const unsigned char *'
    |-IfStmt 0x140143978 <line:13:5, line:35:5> has_else
    | |-BinaryOperator 0x1401426b8 <line:13:9, col:21> 'int' contains-errors '&&'
    | | |-RecoveryExpr 0x140142630 <col:9> '<dependent type>' contains-errors lvalue
    | | `-CXXDependentScopeMemberExpr 0x140142670 <col:16, col:21> '<dependent type>' contains-errors lvalue ->valid
    | |   `-RecoveryExpr 0x140142650 <col:16> '<dependent type>' contains-errors lvalue
    | |-CompoundStmt 0x140142a30 <col:28, line:19:5>
    | | |-BinaryOperator 0x140142760 <line:14:9, col:18> 'int' contains-errors '='
    | | | |-DeclRefExpr 0x1401426d8 <col:9> 'int' lvalue Var 0x140142198 'i' 'int'
    | | | `-CXXDependentScopeMemberExpr 0x140142718 <col:13, col:18> '<dependent type>' contains-errors lvalue ->ret
    | | |   `-RecoveryExpr 0x1401426f8 <col:13> '<dependent type>' contains-errors lvalue
    | | |-BinaryOperator 0x140142808 <line:15:9, col:21> 'long' contains-errors '='
    | | | |-DeclRefExpr 0x140142780 <col:9> 'long' lvalue Var 0x140142360 'plen' 'long'
    | | | `-CXXDependentScopeMemberExpr 0x1401427c0 <col:16, col:21> '<dependent type>' contains-errors lvalue ->plen
    | | |   `-RecoveryExpr 0x1401427a0 <col:16> '<dependent type>' contains-errors lvalue
    | | |-BinaryOperator 0x1401428b0 <line:16:9, col:23> 'int' contains-errors '='
    | | | |-DeclRefExpr 0x140142828 <col:9> 'int' lvalue Var 0x1401422b0 'pclass' 'int'
    | | | `-CXXDependentScopeMemberExpr 0x140142868 <col:18, col:23> '<dependent type>' contains-errors lvalue ->pclass
    | | |   `-RecoveryExpr 0x140142848 <col:18> '<dependent type>' contains-errors lvalue
    | | |-BinaryOperator 0x140142958 <line:17:9, col:21> 'int' contains-errors '='
    | | | |-DeclRefExpr 0x1401428d0 <col:9> 'int' lvalue Var 0x140142230 'ptag' 'int'
    | | | `-CXXDependentScopeMemberExpr 0x140142910 <col:16, col:21> '<dependent type>' contains-errors lvalue ->ptag
    | | |   `-RecoveryExpr 0x1401428f0 <col:16> '<dependent type>' contains-errors lvalue
    | | `-CompoundAssignOperator 0x140142a00 <line:18:9, col:19> 'const unsigned char *' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    | |   |-DeclRefExpr 0x140142978 <col:9> 'const unsigned char *' lvalue Var 0x1401423f8 'p' 'const unsigned char *'
    | |   `-CXXDependentScopeMemberExpr 0x1401429b8 <col:14, col:19> '<dependent type>' contains-errors lvalue ->hdrlen
    | |     `-RecoveryExpr 0x140142998 <col:14> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x140143958 <line:19:12, line:35:5>
    |   |-BinaryOperator 0x140142da8 <line:20:9, col:59> 'int' '='
    |   | |-DeclRefExpr 0x140142a68 <col:9> 'int' lvalue Var 0x140142198 'i' 'int'
    |   | `-CallExpr 0x140142d48 <col:13, col:59> 'int'
    |   |   |-ImplicitCastExpr 0x140142d30 <col:13> 'int (*)()' <FunctionToPointerDecay>
    |   |   | `-DeclRefExpr 0x140142be0 <col:13> 'int ()' Function 0x140142b28 'ASN1_get_object' 'int ()'
    |   |   |-UnaryOperator 0x140142c20 <col:29, col:30> 'const unsigned char **' prefix '&' cannot overflow
    |   |   | `-DeclRefExpr 0x140142c00 <col:30> 'const unsigned char *' lvalue Var 0x1401423f8 'p' 'const unsigned char *'
    |   |   |-UnaryOperator 0x140142c58 <col:33, col:34> 'long *' prefix '&' cannot overflow
    |   |   | `-DeclRefExpr 0x140142c38 <col:34> 'long' lvalue Var 0x140142360 'plen' 'long'
    |   |   |-UnaryOperator 0x140142c90 <col:40, col:41> 'int *' prefix '&' cannot overflow
    |   |   | `-DeclRefExpr 0x140142c70 <col:41> 'int' lvalue Var 0x140142230 'ptag' 'int'
    |   |   |-UnaryOperator 0x140142cc8 <col:47, col:48> 'int *' prefix '&' cannot overflow
    |   |   | `-DeclRefExpr 0x140142ca8 <col:48> 'int' lvalue Var 0x1401422b0 'pclass' 'int'
    |   |   `-ImplicitCastExpr 0x140142d90 <col:56> 'long' <LValueToRValue>
    |   |     `-DeclRefExpr 0x140142ce0 <col:56> 'long' lvalue ParmVar 0x140128cd0 'len' 'long'
    |   `-IfStmt 0x140143938 <line:21:9, line:34:9>
    |     |-RecoveryExpr 0x140142dc8 <line:21:13> '<dependent type>' contains-errors lvalue
    |     `-CompoundStmt 0x1401438f0 <col:18, line:34:9>
    |       |-BinaryOperator 0x140142e98 <line:22:13, col:24> '<dependent type>' contains-errors '='
    |       | |-CXXDependentScopeMemberExpr 0x140142e30 <col:13, col:18> '<dependent type>' contains-errors lvalue ->ret
    |       | | `-RecoveryExpr 0x140142e08 <col:13> '<dependent type>' contains-errors lvalue
    |       | |   `-DeclRefExpr 0x140142de8 <col:13> 'int *' lvalue ParmVar 0x140128ee0 'ctx' 'int *'
    |       | `-DeclRefExpr 0x140142e78 <col:24> 'int' lvalue Var 0x140142198 'i' 'int'
    |       |-BinaryOperator 0x140142f68 <line:23:13, col:25> '<dependent type>' contains-errors '='
    |       | |-CXXDependentScopeMemberExpr 0x140142f00 <col:13, col:18> '<dependent type>' contains-errors lvalue ->plen
    |       | | `-RecoveryExpr 0x140142ed8 <col:13> '<dependent type>' contains-errors lvalue
    |       | |   `-DeclRefExpr 0x140142eb8 <col:13> 'int *' lvalue ParmVar 0x140128ee0 'ctx' 'int *'
    |       | `-DeclRefExpr 0x140142f48 <col:25> 'long' lvalue Var 0x140142360 'plen' 'long'
    |       |-BinaryOperator 0x140143068 <line:24:13, col:27> '<dependent type>' contains-errors '='
    |       | |-CXXDependentScopeMemberExpr 0x140143000 <col:13, col:18> '<dependent type>' contains-errors lvalue ->pclass
    |       | | `-RecoveryExpr 0x140142fa8 <col:13> '<dependent type>' contains-errors lvalue
    |       | |   `-DeclRefExpr 0x140142f88 <col:13> 'int *' lvalue ParmVar 0x140128ee0 'ctx' 'int *'
    |       | `-DeclRefExpr 0x140143048 <col:27> 'int' lvalue Var 0x1401422b0 'pclass' 'int'
    |       |-BinaryOperator 0x140143138 <line:25:13, col:25> '<dependent type>' contains-errors '='
    |       | |-CXXDependentScopeMemberExpr 0x1401430d0 <col:13, col:18> '<dependent type>' contains-errors lvalue ->ptag
    |       | | `-RecoveryExpr 0x1401430a8 <col:13> '<dependent type>' contains-errors lvalue
    |       | |   `-DeclRefExpr 0x140143088 <col:13> 'int *' lvalue ParmVar 0x140128ee0 'ctx' 'int *'
    |       | `-DeclRefExpr 0x140143118 <col:25> 'int' lvalue Var 0x140142230 'ptag' 'int'
    |       |-BinaryOperator 0x140143278 <line:26:13, col:31> '<dependent type>' contains-errors '='
    |       | |-CXXDependentScopeMemberExpr 0x1401431a0 <col:13, col:18> '<dependent type>' contains-errors lvalue ->hdrlen
    |       | | `-RecoveryExpr 0x140143178 <col:13> '<dependent type>' contains-errors lvalue
    |       | |   `-DeclRefExpr 0x140143158 <col:13> 'int *' lvalue ParmVar 0x140128ee0 'ctx' 'int *'
    |       | `-BinaryOperator 0x140143258 <col:27, col:31> 'long' '-'
    |       |   |-ImplicitCastExpr 0x140143228 <col:27> 'const unsigned char *' <LValueToRValue>
    |       |   | `-DeclRefExpr 0x1401431e8 <col:27> 'const unsigned char *' lvalue Var 0x1401423f8 'p' 'const unsigned char *'
    |       |   `-ImplicitCastExpr 0x140143240 <col:31> 'const unsigned char *' <LValueToRValue>
    |       |     `-DeclRefExpr 0x140143208 <col:31> 'const unsigned char *' lvalue Var 0x140142478 'q' 'const unsigned char *'
    |       |-BinaryOperator 0x140143348 <line:27:13, col:26> '<dependent type>' contains-errors '='
    |       | |-CXXDependentScopeMemberExpr 0x1401432e0 <col:13, col:18> '<dependent type>' contains-errors lvalue ->valid
    |       | | `-RecoveryExpr 0x1401432b8 <col:13> '<dependent type>' contains-errors lvalue
    |       | |   `-DeclRefExpr 0x140143298 <col:13> 'int *' lvalue ParmVar 0x140128ee0 'ctx' 'int *'
    |       | `-IntegerLiteral 0x140143328 <col:26> 'int' 1
    |       `-IfStmt 0x1401438d0 <line:29:13, line:33:13>
    |         |-BinaryOperator 0x140143540 <line:29:17, col:59> 'int' contains-errors '&&'
    |         | |-UnaryOperator 0x140143400 <col:17, col:27> 'int' prefix '!' cannot overflow
    |         | | `-ParenExpr 0x1401433e0 <col:18, col:27> 'int'
    |         | |   `-BinaryOperator 0x1401433c0 <col:19, col:23> 'int' '&'
    |         | |     |-ImplicitCastExpr 0x1401433a8 <col:19> 'int' <LValueToRValue>
    |         | |     | `-DeclRefExpr 0x140143368 <col:19> 'int' lvalue Var 0x140142198 'i' 'int'
    |         | |     `-IntegerLiteral 0x140143388 <col:23> 'int' 129
    |         | `-ParenExpr 0x140143520 <col:32, col:59> 'int' contains-errors
    |         |   `-BinaryOperator 0x140143500 <col:33, col:56> 'int' contains-errors '>'
    |         |     |-ParenExpr 0x1401434c0 <col:33, col:52> '<dependent type>' contains-errors
    |         |     | `-BinaryOperator 0x1401434a0 <col:34, col:46> '<dependent type>' contains-errors '+'
    |         |     |   |-DeclRefExpr 0x140143418 <col:34> 'long' lvalue Var 0x140142360 'plen' 'long'
    |         |     |   `-CXXDependentScopeMemberExpr 0x140143458 <col:41, col:46> '<dependent type>' contains-errors lvalue ->hdrlen
    |         |     |     `-RecoveryExpr 0x140143438 <col:41> '<dependent type>' contains-errors lvalue
    |         |     `-DeclRefExpr 0x1401434e0 <col:56> 'long' lvalue ParmVar 0x140128cd0 'len' 'long'
    |         `-CompoundStmt 0x1401438a8 <col:62, line:33:13>
    |           |-CallExpr 0x140143700 <line:30:17, col:64> '<dependent type>' contains-errors
    |           | |-DeclRefExpr 0x140143640 <col:17> 'int ()' Function 0x140143588 'ASN1err' 'int ()'
    |           | |-RecoveryExpr 0x1401436c0 <col:25> '<dependent type>' contains-errors lvalue
    |           | `-RecoveryExpr 0x1401436e0 <col:49> '<dependent type>' contains-errors lvalue
    |           |-CallExpr 0x140143850 <line:31:17, col:35> '<dependent type>' contains-errors
    |           | |-DeclRefExpr 0x140143810 <col:17> 'int ()' Function 0x140143758 'asn1_tlc_clear' 'int ()'
    |           | `-RecoveryExpr 0x140143830 <col:32> '<dependent type>' contains-errors lvalue
    |           `-ReturnStmt 0x140143898 <line:32:17, col:24>
    |             `-IntegerLiteral 0x140143878 <col:24> 'int' 0
    |-IfStmt 0x140143bd0 <line:37:5, line:41:5>
    | |-BinaryOperator 0x140143a00 <line:37:9, col:13> 'int' '&'
    | | |-ImplicitCastExpr 0x1401439e8 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1401439a8 <col:9> 'int' lvalue Var 0x140142198 'i' 'int'
    | | `-IntegerLiteral 0x1401439c8 <col:13> 'int' 128
    | `-CompoundStmt 0x140143ba8 <col:19, line:41:5>
    |   |-CallExpr 0x140143ae0 <line:38:9, col:65> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x140143a20 <col:9> 'int ()' Function 0x140143588 'ASN1err' 'int ()'
    |   | |-RecoveryExpr 0x140143aa0 <col:17> '<dependent type>' contains-errors lvalue
    |   | `-RecoveryExpr 0x140143ac0 <col:41> '<dependent type>' contains-errors lvalue
    |   |-CallExpr 0x140143b50 <line:39:9, col:27> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x140143b10 <col:9> 'int ()' Function 0x140143758 'asn1_tlc_clear' 'int ()'
    |   | `-RecoveryExpr 0x140143b30 <col:24> '<dependent type>' contains-errors lvalue
    |   `-ReturnStmt 0x140143b98 <line:40:9, col:16>
    |     `-IntegerLiteral 0x140143b78 <col:16> 'int' 0
    |-IfStmt 0x140144ee8 <line:42:5, line:53:5>
    | |-BinaryOperator 0x140143c48 <line:42:9, col:19> 'int' '>='
    | | |-ImplicitCastExpr 0x140143c30 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x140143bf0 <col:9> 'int' lvalue ParmVar 0x140128d50 'exptag' 'int'
    | | `-IntegerLiteral 0x140143c10 <col:19> 'int' 0
    | `-CompoundStmt 0x140144ec8 <col:22, line:53:5>
    |   |-IfStmt 0x140144e40 <line:43:9, line:50:9>
    |   | |-BinaryOperator 0x140143dc8 <line:43:13, col:52> 'int' '||'
    |   | | |-ParenExpr 0x140143cf8 <col:13, col:28> 'int'
    |   | | | `-BinaryOperator 0x140143cd8 <col:14, col:24> 'int' '!='
    |   | | |   |-ImplicitCastExpr 0x140143ca8 <col:14> 'int' <LValueToRValue>
    |   | | |   | `-DeclRefExpr 0x140143c68 <col:14> 'int' lvalue ParmVar 0x140128d50 'exptag' 'int'
    |   | | |   `-ImplicitCastExpr 0x140143cc0 <col:24> 'int' <LValueToRValue>
    |   | | |     `-DeclRefExpr 0x140143c88 <col:24> 'int' lvalue Var 0x140142230 'ptag' 'int'
    |   | | `-ParenExpr 0x140143da8 <col:33, col:52> 'int'
    |   | |   `-BinaryOperator 0x140143d88 <col:34, col:46> 'int' '!='
    |   | |     |-ImplicitCastExpr 0x140143d58 <col:34> 'int' <LValueToRValue>
    |   | |     | `-DeclRefExpr 0x140143d18 <col:34> 'int' lvalue ParmVar 0x140128dd0 'expclass' 'int'
    |   | |     `-ImplicitCastExpr 0x140143d70 <col:46> 'int' <LValueToRValue>
    |   | |       `-DeclRefExpr 0x140143d38 <col:46> 'int' lvalue Var 0x1401422b0 'pclass' 'int'
    |   | `-CompoundStmt 0x140144e10 <col:55, line:50:9>
    |   |   |-IfStmt 0x140143e68 <line:45:13, line:46:25>
    |   |   | |-ImplicitCastExpr 0x140143e08 <line:45:17> 'char' <LValueToRValue>
    |   |   | | `-DeclRefExpr 0x140143de8 <col:17> 'char' lvalue ParmVar 0x140128e48 'opt' 'char'
    |   |   | `-ReturnStmt 0x140143e58 <line:46:17, col:25>
    |   |   |   `-UnaryOperator 0x140143e40 <col:24, col:25> 'int' prefix '-'
    |   |   |     `-IntegerLiteral 0x140143e20 <col:25> 'int' 1
    |   |   |-CallExpr 0x140143ec8 <line:47:13, col:31> '<dependent type>' contains-errors
    |   |   | |-DeclRefExpr 0x140143e88 <col:13> 'int ()' Function 0x140143758 'asn1_tlc_clear' 'int ()'
    |   |   | `-RecoveryExpr 0x140143ea8 <col:28> '<dependent type>' contains-errors lvalue
    |   |   |-CallExpr 0x140143fb0 <line:48:13, col:61> '<dependent type>' contains-errors
    |   |   | |-DeclRefExpr 0x140143ef0 <col:13> 'int ()' Function 0x140143588 'ASN1err' 'int ()'
    |   |   | |-RecoveryExpr 0x140143f70 <col:21> '<dependent type>' contains-errors lvalue
    |   |   | `-RecoveryExpr 0x140143f90 <col:45> '<dependent type>' contains-errors lvalue
    |   |   `-ReturnStmt 0x140144e00 <line:49:13, col:20>
    |   |     `-IntegerLiteral 0x140143fe0 <col:20> 'int' 0
    |   `-CallExpr 0x140144ea0 <line:52:9, col:27> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x140144e60 <col:9> 'int ()' Function 0x140143758 'asn1_tlc_clear' 'int ()'
    |     `-RecoveryExpr 0x140144e80 <col:24> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x1401450c8 <line:55:5, line:56:28>
    | |-BinaryOperator 0x140144f60 <line:55:9, col:13> 'int' '&'
    | | |-ImplicitCastExpr 0x140144f48 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x140144f08 <col:9> 'int' lvalue Var 0x140142198 'i' 'int'
    | | `-IntegerLiteral 0x140144f28 <col:13> 'int' 1
    | `-BinaryOperator 0x1401450a8 <line:56:9, col:28> 'long' '='
    |   |-DeclRefExpr 0x140144f80 <col:9> 'long' lvalue Var 0x140142360 'plen' 'long'
    |   `-BinaryOperator 0x140145088 <col:16, col:28> 'long' '-'
    |     |-ImplicitCastExpr 0x140145070 <col:16> 'long' <LValueToRValue>
    |     | `-DeclRefExpr 0x140144fa0 <col:16> 'long' lvalue ParmVar 0x140128cd0 'len' 'long'
    |     `-ParenExpr 0x140145050 <col:22, col:28> 'long'
    |       `-BinaryOperator 0x140145030 <col:23, col:27> 'long' '-'
    |         |-ImplicitCastExpr 0x140145000 <col:23> 'const unsigned char *' <LValueToRValue>
    |         | `-DeclRefExpr 0x140144fc0 <col:23> 'const unsigned char *' lvalue Var 0x1401423f8 'p' 'const unsigned char *'
    |         `-ImplicitCastExpr 0x140145018 <col:27> 'const unsigned char *' <LValueToRValue>
    |           `-DeclRefExpr 0x140144fe0 <col:27> 'const unsigned char *' lvalue Var 0x140142478 'q' 'const unsigned char *'
    |-IfStmt 0x140145220 <line:58:5, line:59:20>
    | |-ImplicitCastExpr 0x140145108 <line:58:9> 'char *' <LValueToRValue>
    | | `-DeclRefExpr 0x1401450e8 <col:9> 'char *' lvalue ParmVar 0x140128ae8 'inf' 'char *'
    | `-BinaryOperator 0x140145200 <line:59:9, col:20> 'char' '='
    |   |-UnaryOperator 0x140145158 <col:9, col:10> 'char' lvalue prefix '*' cannot overflow
    |   | `-ImplicitCastExpr 0x140145140 <col:10> 'char *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x140145120 <col:10> 'char *' lvalue ParmVar 0x140128ae8 'inf' 'char *'
    |   `-ImplicitCastExpr 0x1401451e8 <col:16, col:20> 'char' <IntegralCast>
    |     `-BinaryOperator 0x1401451c8 <col:16, col:20> 'int' '&'
    |       |-ImplicitCastExpr 0x1401451b0 <col:16> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x140145170 <col:16> 'int' lvalue Var 0x140142198 'i' 'int'
    |       `-IntegerLiteral 0x140145190 <col:20> 'int' 1
    |-IfStmt 0x140145400 <line:61:5, line:62:20>
    | |-ImplicitCastExpr 0x140145260 <line:61:9> 'char *' <LValueToRValue>
    | | `-DeclRefExpr 0x140145240 <col:9> 'char *' lvalue ParmVar 0x140128b68 'cst' 'char *'
    | `-BinaryOperator 0x1401453e0 <line:62:9, col:20> 'char' contains-errors '='
    |   |-UnaryOperator 0x140145388 <col:9, col:10> 'char' lvalue prefix '*' cannot overflow
    |   | `-ImplicitCastExpr 0x140145370 <col:10> 'char *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x140145278 <col:10> 'char *' lvalue ParmVar 0x140128b68 'cst' 'char *'
    |   `-BinaryOperator 0x1401453c0 <col:16, col:20> '<dependent type>' contains-errors '&'
    |     |-DeclRefExpr 0x1401452c8 <col:16> 'int' lvalue Var 0x140142198 'i' 'int'
    |     `-RecoveryExpr 0x1401453a0 <col:20> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x140145500 <line:64:5, line:65:17>
    | |-ImplicitCastExpr 0x140145440 <line:64:9> 'long *' <LValueToRValue>
    | | `-DeclRefExpr 0x140145420 <col:9> 'long *' lvalue ParmVar 0x140128908 'olen' 'long *'
    | `-BinaryOperator 0x1401454e0 <line:65:9, col:17> 'long' '='
    |   |-UnaryOperator 0x140145490 <col:9, col:10> 'long' lvalue prefix '*' cannot overflow
    |   | `-ImplicitCastExpr 0x140145478 <col:10> 'long *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x140145458 <col:10> 'long *' lvalue ParmVar 0x140128908 'olen' 'long *'
    |   `-ImplicitCastExpr 0x1401454c8 <col:17> 'long' <LValueToRValue>
    |     `-DeclRefExpr 0x1401454a8 <col:17> 'long' lvalue Var 0x140142360 'plen' 'long'
    |-IfStmt 0x140145618 <line:67:5, line:68:19>
    | |-ImplicitCastExpr 0x140145540 <line:67:9> 'unsigned char *' <LValueToRValue>
    | | `-DeclRefExpr 0x140145520 <col:9> 'unsigned char *' lvalue ParmVar 0x140128a68 'oclass' 'unsigned char *'
    | `-BinaryOperator 0x1401455f8 <line:68:9, col:19> 'unsigned char' '='
    |   |-UnaryOperator 0x140145590 <col:9, col:10> 'unsigned char' lvalue prefix '*' cannot overflow
    |   | `-ImplicitCastExpr 0x140145578 <col:10> 'unsigned char *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x140145558 <col:10> 'unsigned char *' lvalue ParmVar 0x140128a68 'oclass' 'unsigned char *'
    |   `-ImplicitCastExpr 0x1401455e0 <col:19> 'unsigned char' <IntegralCast>
    |     `-ImplicitCastExpr 0x1401455c8 <col:19> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x1401455a8 <col:19> 'int' lvalue Var 0x1401422b0 'pclass' 'int'
    |-IfStmt 0x140145718 <line:70:5, line:71:17>
    | |-ImplicitCastExpr 0x140145658 <line:70:9> 'int *' <LValueToRValue>
    | | `-DeclRefExpr 0x140145638 <col:9> 'int *' lvalue ParmVar 0x1401289b8 'otag' 'int *'
    | `-BinaryOperator 0x1401456f8 <line:71:9, col:17> 'int' '='
    |   |-UnaryOperator 0x1401456a8 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
    |   | `-ImplicitCastExpr 0x140145690 <col:10> 'int *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x140145670 <col:10> 'int *' lvalue ParmVar 0x1401289b8 'otag' 'int *'
    |   `-ImplicitCastExpr 0x1401456e0 <col:17> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x1401456c0 <col:17> 'int' lvalue Var 0x140142230 'ptag' 'int'
    |-BinaryOperator 0x1401457c0 <line:73:5, col:11> 'const unsigned char *' '='
    | |-UnaryOperator 0x140145770 <col:5, col:6> 'const unsigned char *' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x140145758 <col:6> 'const unsigned char **' <LValueToRValue>
    | |   `-DeclRefExpr 0x140145738 <col:6> 'const unsigned char **' lvalue ParmVar 0x140128c50 'in' 'const unsigned char **'
    | `-ImplicitCastExpr 0x1401457a8 <col:11> 'const unsigned char *' <LValueToRValue>
    |   `-DeclRefExpr 0x140145788 <col:11> 'const unsigned char *' lvalue Var 0x1401423f8 'p' 'const unsigned char *'
    `-ReturnStmt 0x140145800 <line:74:5, col:12>
      `-IntegerLiteral 0x1401457e0 <col:12> 'int' 1
