TranslationUnitDecl 0x122043008 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x122043eb8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1220435d0 '__int128'
|-TypedefDecl 0x122043f28 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1220435f0 'unsigned __int128'
|-TypedefDecl 0x12181d830 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12181d600 'struct __NSConstantString_tag'
|   `-Record 0x122043f80 '__NSConstantString_tag'
|-TypedefDecl 0x12181d898 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x122043790 '__SVInt8_t'
|-TypedefDecl 0x12181d900 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x1220437b0 '__SVInt16_t'
|-TypedefDecl 0x12181d968 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x1220437d0 '__SVInt32_t'
|-TypedefDecl 0x12181d9d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x1220437f0 '__SVInt64_t'
|-TypedefDecl 0x12181da38 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x122043810 '__SVUint8_t'
|-TypedefDecl 0x12181daa0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x122043830 '__SVUint16_t'
|-TypedefDecl 0x12181db08 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x122043850 '__SVUint32_t'
|-TypedefDecl 0x12181db70 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x122043870 '__SVUint64_t'
|-TypedefDecl 0x12181dbd8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x122043890 '__SVFloat16_t'
|-TypedefDecl 0x12181dc40 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x1220438b0 '__SVFloat32_t'
|-TypedefDecl 0x12181dca8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x1220438d0 '__SVFloat64_t'
|-TypedefDecl 0x12181dd10 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x1220438f0 '__SVBfloat16_t'
|-TypedefDecl 0x12181dd78 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x122043910 '__clang_svint8x2_t'
|-TypedefDecl 0x12181dde0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x122043930 '__clang_svint16x2_t'
|-TypedefDecl 0x12181de48 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x122043950 '__clang_svint32x2_t'
|-TypedefDecl 0x12181deb0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x122043970 '__clang_svint64x2_t'
|-TypedefDecl 0x12181df18 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x122043990 '__clang_svuint8x2_t'
|-TypedefDecl 0x12181df80 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x1220439b0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12181dfe8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x1220439d0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12181e050 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x1220439f0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12181e0b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x122043a10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12181e120 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x122043a30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12181e188 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x122043a50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12181e1f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x122043a70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12181e258 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x122043a90 '__clang_svint8x3_t'
|-TypedefDecl 0x12181e2c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x122043ab0 '__clang_svint16x3_t'
|-TypedefDecl 0x12181e328 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x122043ad0 '__clang_svint32x3_t'
|-TypedefDecl 0x12181e390 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x122043af0 '__clang_svint64x3_t'
|-TypedefDecl 0x12181e3f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x122043b10 '__clang_svuint8x3_t'
|-TypedefDecl 0x12181e460 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x122043b30 '__clang_svuint16x3_t'
|-TypedefDecl 0x12181e4c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x122043b50 '__clang_svuint32x3_t'
|-TypedefDecl 0x12181e530 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x122043b70 '__clang_svuint64x3_t'
|-TypedefDecl 0x12181e598 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x122043b90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12181ea00 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x122043bb0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12181ea68 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x122043bd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12181ead0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x122043bf0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12181eb38 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x122043c10 '__clang_svint8x4_t'
|-TypedefDecl 0x12181eba0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x122043c30 '__clang_svint16x4_t'
|-TypedefDecl 0x12181ec08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x122043c50 '__clang_svint32x4_t'
|-TypedefDecl 0x12181ec70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x122043c70 '__clang_svint64x4_t'
|-TypedefDecl 0x12181ecd8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x122043c90 '__clang_svuint8x4_t'
|-TypedefDecl 0x12181ed40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x122043cb0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12181eda8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x122043cd0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12181ee10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x122043cf0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12181ee78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x122043d10 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12181eee0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x122043d30 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12181ef48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x122043d50 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12181efb0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x122043d70 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12181f018 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x122043d90 '__SVBool_t'
|-TypedefDecl 0x12181f080 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x122043db0 '__clang_svboolx2_t'
|-TypedefDecl 0x12181f0e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x122043dd0 '__clang_svboolx4_t'
|-TypedefDecl 0x12181f150 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x122043df0 '__SVCount_t'
|-TypedefDecl 0x12181f1f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12181f1b0 'char *'
|   `-BuiltinType 0x1220430b0 'char'
|-TypedefDecl 0x12181f268 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12181f1b0 'char *'
|   `-BuiltinType 0x1220430b0 'char'
`-FunctionDecl 0x1218394a8 <dataset_diviso_filec/func21450_vuln.c:1:1, line:45:1> line:1:19 check_entry_size_and_hooks 'int (struct arpt_entry *, struct xt_table_info *, const unsigned char *, const unsigned char *, const unsigned int *, const unsigned int *, unsigned int)' static inline
  |-ParmVarDecl 0x12181f848 <col:46, col:65> col:65 used e 'struct arpt_entry *'
  |-ParmVarDecl 0x121839028 <line:2:11, col:33> col:33 used newinfo 'struct xt_table_info *'
  |-ParmVarDecl 0x1218390d8 <line:3:11, col:32> col:32 used base 'const unsigned char *'
  |-ParmVarDecl 0x121839158 <line:4:11, col:32> col:32 used limit 'const unsigned char *'
  |-ParmVarDecl 0x121839208 <line:5:11, col:31> col:31 used hook_entries 'const unsigned int *'
  |-ParmVarDecl 0x121839288 <line:6:11, col:31> col:31 used underflows 'const unsigned int *'
  |-ParmVarDecl 0x121839308 <line:7:11, col:24> col:24 used valid_hooks 'unsigned int'
  `-CompoundStmt 0x12183de00 <line:8:1, line:45:1>
    |-DeclStmt 0x121839650 <line:9:2, col:16>
    | `-VarDecl 0x1218395e8 <col:2, col:15> col:15 used h 'unsigned int'
    |-IfStmt 0x121839b90 <line:11:2, line:15:2>
    | |-RecoveryExpr 0x121839838 <line:11:6, line:12:56> '_Bool' contains-errors
    | `-CompoundStmt 0x121839b70 <col:63, line:15:2>
    |   |-CallExpr 0x121839a68 <line:13:3, col:20> 'int'
    |   | |-ImplicitCastExpr 0x121839a50 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x121839980 <col:3> 'int ()' Function 0x1218398c8 'duprintf' 'int ()'
    |   | |-ImplicitCastExpr 0x121839a98 <col:12> 'char *' <ArrayToPointerDecay>
    |   | | `-StringLiteral 0x1218399e0 <col:12> 'char[4]' lvalue "STR"
    |   | `-ImplicitCastExpr 0x121839ab0 <col:19> 'struct arpt_entry *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x121839a00 <col:19> 'struct arpt_entry *' lvalue ParmVar 0x12181f848 'e' 'struct arpt_entry *'
    |   `-ReturnStmt 0x121839b60 <line:14:3, col:11>
    |     `-UnaryOperator 0x121839b48 <col:10, col:11> '<dependent type>' contains-errors prefix '-' cannot overflow
    |       `-ImplicitCastExpr 0x121839b30 <col:11> '<dependent type>' contains-errors <LValueToRValue>
    |         `-RecoveryExpr 0x121839b10 <col:11> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x121839f08 <line:17:2, line:22:2>
    | |-RecoveryExpr 0x121839d28 <line:17:6, line:18:65> '_Bool' contains-errors
    | `-CompoundStmt 0x121839ee8 <col:68, line:22:2>
    |   |-CallExpr 0x121839e08 <line:19:3, line:20:22> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x121839d48 <line:19:3> 'int ()' Function 0x1218398c8 'duprintf' 'int ()'
    |   | |-StringLiteral 0x121839d68 <col:12> 'char[4]' lvalue "STR"
    |   | |-DeclRefExpr 0x121839d88 <line:20:5> 'struct arpt_entry *' lvalue ParmVar 0x12181f848 'e' 'struct arpt_entry *'
    |   | `-RecoveryExpr 0x121839de0 <col:8, col:11> '<dependent type>' contains-errors lvalue
    |   |   `-DeclRefExpr 0x121839da8 <col:8> 'struct arpt_entry *' lvalue ParmVar 0x12181f848 'e' 'struct arpt_entry *'
    |   `-ReturnStmt 0x121839ed8 <line:21:3, col:11>
    |     `-UnaryOperator 0x121839ec0 <col:10, col:11> '<dependent type>' contains-errors prefix '-' cannot overflow
    |       `-ImplicitCastExpr 0x121839ea8 <col:11> '<dependent type>' contains-errors <LValueToRValue>
    |         `-RecoveryExpr 0x121839e88 <col:11> '<dependent type>' contains-errors lvalue
    |-ForStmt 0x12183d708 <line:25:2, line:39:2>
    | |-BinaryOperator 0x121839f80 <line:25:7, col:11> 'unsigned int' '='
    | | |-DeclRefExpr 0x121839f28 <col:7> 'unsigned int' lvalue Var 0x1218395e8 'h' 'unsigned int'
    | | `-ImplicitCastExpr 0x121839f68 <col:11> 'unsigned int' <IntegralCast>
    | |   `-IntegerLiteral 0x121839f48 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x12183ca20 <col:14, col:18> 'int' contains-errors '<'
    | | |-DeclRefExpr 0x121839fa0 <col:14> 'unsigned int' lvalue Var 0x1218395e8 'h' 'unsigned int'
    | | `-RecoveryExpr 0x12183ca00 <col:18> '<dependent type>' contains-errors lvalue
    | |-UnaryOperator 0x12183ca60 <col:35, col:36> 'unsigned int' postfix '++'
    | | `-DeclRefExpr 0x12183ca40 <col:35> 'unsigned int' lvalue Var 0x1218395e8 'h' 'unsigned int'
    | `-CompoundStmt 0x12183d6e0 <col:40, line:39:2>
    |   |-IfStmt 0x12183cbc0 <line:26:3, line:27:4>
    |   | |-UnaryOperator 0x12183cba0 <line:26:7, col:31> 'int' prefix '!' cannot overflow
    |   | | `-ParenExpr 0x12183cb80 <col:8, col:31> 'unsigned int'
    |   | |   `-BinaryOperator 0x12183cb60 <col:9, col:30> 'unsigned int' '&'
    |   | |     |-ImplicitCastExpr 0x12183cb30 <col:9> 'unsigned int' <LValueToRValue>
    |   | |     | `-DeclRefExpr 0x12183ca78 <col:9> 'unsigned int' lvalue ParmVar 0x121839308 'valid_hooks' 'unsigned int'
    |   | |     `-ImplicitCastExpr 0x12183cb48 <col:23, col:30> 'unsigned int' <IntegralCast>
    |   | |       `-ParenExpr 0x12183cb10 <col:23, col:30> 'int'
    |   | |         `-BinaryOperator 0x12183caf0 <col:24, col:29> 'int' '<<'
    |   | |           |-IntegerLiteral 0x12183ca98 <col:24> 'int' 1
    |   | |           `-ImplicitCastExpr 0x12183cad8 <col:29> 'unsigned int' <LValueToRValue>
    |   | |             `-DeclRefExpr 0x12183cab8 <col:29> 'unsigned int' lvalue Var 0x1218395e8 'h' 'unsigned int'
    |   | `-ContinueStmt 0x12183cbb8 <line:27:4>
    |   |-IfStmt 0x12183cf10 <line:28:3, line:29:43>
    |   | |-BinaryOperator 0x12183cd70 <line:28:7, col:50> 'int' '=='
    |   | | |-BinaryOperator 0x12183cc90 <col:7, col:28> 'long' '-'
    |   | | | |-CStyleCastExpr 0x12183cc30 <col:7, col:24> 'unsigned char *' <BitCast>
    |   | | | | `-ImplicitCastExpr 0x12183cc18 <col:24> 'struct arpt_entry *' <LValueToRValue> part_of_explicit_cast
    |   | | | |   `-DeclRefExpr 0x12183cbe0 <col:24> 'struct arpt_entry *' lvalue ParmVar 0x12181f848 'e' 'struct arpt_entry *'
    |   | | | `-ImplicitCastExpr 0x12183cc78 <col:28> 'const unsigned char *' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x12183cc58 <col:28> 'const unsigned char *' lvalue ParmVar 0x1218390d8 'base' 'const unsigned char *'
    |   | | `-ImplicitCastExpr 0x12183cd58 <col:36, col:50> 'long' <IntegralCast>
    |   | |   `-ImplicitCastExpr 0x12183cd40 <col:36, col:50> 'unsigned int' <LValueToRValue>
    |   | |     `-ArraySubscriptExpr 0x12183cd20 <col:36, col:50> 'const unsigned int' lvalue
    |   | |       |-ImplicitCastExpr 0x12183ccf0 <col:36> 'const unsigned int *' <LValueToRValue>
    |   | |       | `-DeclRefExpr 0x12183ccb0 <col:36> 'const unsigned int *' lvalue ParmVar 0x121839208 'hook_entries' 'const unsigned int *'
    |   | |       `-ImplicitCastExpr 0x12183cd08 <col:49> 'unsigned int' <LValueToRValue>
    |   | |         `-DeclRefExpr 0x12183ccd0 <col:49> 'unsigned int' lvalue Var 0x1218395e8 'h' 'unsigned int'
    |   | `-BinaryOperator 0x12183cef0 <line:29:4, col:43> '<dependent type>' contains-errors '='
    |   |   |-ArraySubscriptExpr 0x12183ce40 <col:4, col:25> '<dependent type>' contains-errors lvalue
    |   |   | |-ImplicitCastExpr 0x12183ce10 <col:4, col:13> '<dependent type>' contains-errors <LValueToRValue>
    |   |   | | `-RecoveryExpr 0x12183cdc8 <col:4, col:13> '<dependent type>' contains-errors lvalue
    |   |   | |   `-DeclRefExpr 0x12183cd90 <col:4> 'struct xt_table_info *' lvalue ParmVar 0x121839028 'newinfo' 'struct xt_table_info *'
    |   |   | `-ImplicitCastExpr 0x12183ce28 <col:24> 'unsigned int' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x12183cdf0 <col:24> 'unsigned int' lvalue Var 0x1218395e8 'h' 'unsigned int'
    |   |   `-ArraySubscriptExpr 0x12183ced0 <col:29, col:43> 'const unsigned int' lvalue
    |   |     |-ImplicitCastExpr 0x12183cea0 <col:29> 'const unsigned int *' <LValueToRValue>
    |   |     | `-DeclRefExpr 0x12183ce60 <col:29> 'const unsigned int *' lvalue ParmVar 0x121839208 'hook_entries' 'const unsigned int *'
    |   |     `-ImplicitCastExpr 0x12183ceb8 <col:42> 'unsigned int' <LValueToRValue>
    |   |       `-DeclRefExpr 0x12183ce80 <col:42> 'unsigned int' lvalue Var 0x1218395e8 'h' 'unsigned int'
    |   `-IfStmt 0x12183d6c0 <line:30:3, line:38:3>
    |     |-BinaryOperator 0x12183d0c0 <line:30:7, col:48> 'int' '=='
    |     | |-BinaryOperator 0x12183cfe0 <col:7, col:28> 'long' '-'
    |     | | |-CStyleCastExpr 0x12183cf80 <col:7, col:24> 'unsigned char *' <BitCast>
    |     | | | `-ImplicitCastExpr 0x12183cf68 <col:24> 'struct arpt_entry *' <LValueToRValue> part_of_explicit_cast
    |     | | |   `-DeclRefExpr 0x12183cf30 <col:24> 'struct arpt_entry *' lvalue ParmVar 0x12181f848 'e' 'struct arpt_entry *'
    |     | | `-ImplicitCastExpr 0x12183cfc8 <col:28> 'const unsigned char *' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x12183cfa8 <col:28> 'const unsigned char *' lvalue ParmVar 0x1218390d8 'base' 'const unsigned char *'
    |     | `-ImplicitCastExpr 0x12183d0a8 <col:36, col:48> 'long' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x12183d090 <col:36, col:48> 'unsigned int' <LValueToRValue>
    |     |     `-ArraySubscriptExpr 0x12183d070 <col:36, col:48> 'const unsigned int' lvalue
    |     |       |-ImplicitCastExpr 0x12183d040 <col:36> 'const unsigned int *' <LValueToRValue>
    |     |       | `-DeclRefExpr 0x12183d000 <col:36> 'const unsigned int *' lvalue ParmVar 0x121839288 'underflows' 'const unsigned int *'
    |     |       `-ImplicitCastExpr 0x12183d058 <col:47> 'unsigned int' <LValueToRValue>
    |     |         `-DeclRefExpr 0x12183d020 <col:47> 'unsigned int' lvalue Var 0x1218395e8 'h' 'unsigned int'
    |     `-CompoundStmt 0x12183d6a0 <col:51, line:38:3>
    |       |-IfStmt 0x12183d500 <line:31:4, line:36:4>
    |       | |-UnaryOperator 0x12183d258 <line:31:8, col:26> 'int' prefix '!' cannot overflow
    |       | | `-CallExpr 0x12183d218 <col:9, col:26> 'int'
    |       | |   |-ImplicitCastExpr 0x12183d200 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |       | |   | `-DeclRefExpr 0x12183d1c0 <col:9> 'int ()' Function 0x12183d108 'check_underflow' 'int ()'
    |       | |   `-ImplicitCastExpr 0x12183d240 <col:25> 'struct arpt_entry *' <LValueToRValue>
    |       | |     `-DeclRefExpr 0x12183d1e0 <col:25> 'struct arpt_entry *' lvalue ParmVar 0x12181f848 'e' 'struct arpt_entry *'
    |       | `-CompoundStmt 0x12183d4e0 <col:29, line:36:4>
    |       |   |-CallExpr 0x12183d3f8 <line:32:5, line:34:17> 'int'
    |       |   | |-ImplicitCastExpr 0x12183d3e0 <line:32:5> 'int (*)()' <FunctionToPointerDecay>
    |       |   | | `-DeclRefExpr 0x12183d350 <col:5> 'int ()' Function 0x12183d298 'pr_err' 'int ()'
    |       |   | `-ImplicitCastExpr 0x12183d420 <col:12, line:34:12> 'char *' <ArrayToPointerDecay>
    |       |   |   `-StringLiteral 0x12183d3b0 <line:32:12, line:34:12> 'char[10]' lvalue "STRSTRSTR"
    |       |   `-ReturnStmt 0x12183d4d0 <line:35:5, col:13>
    |       |     `-UnaryOperator 0x12183d4b8 <col:12, col:13> '<dependent type>' contains-errors prefix '-' cannot overflow
    |       |       `-ImplicitCastExpr 0x12183d4a0 <col:13> '<dependent type>' contains-errors <LValueToRValue>
    |       |         `-RecoveryExpr 0x12183d480 <col:13> '<dependent type>' contains-errors lvalue
    |       `-BinaryOperator 0x12183d680 <line:37:4, col:40> '<dependent type>' contains-errors '='
    |         |-ArraySubscriptExpr 0x12183d5d0 <col:4, col:24> '<dependent type>' contains-errors lvalue
    |         | |-ImplicitCastExpr 0x12183d5a0 <col:4, col:13> '<dependent type>' contains-errors <LValueToRValue>
    |         | | `-RecoveryExpr 0x12183d558 <col:4, col:13> '<dependent type>' contains-errors lvalue
    |         | |   `-DeclRefExpr 0x12183d520 <col:4> 'struct xt_table_info *' lvalue ParmVar 0x121839028 'newinfo' 'struct xt_table_info *'
    |         | `-ImplicitCastExpr 0x12183d5b8 <col:23> 'unsigned int' <LValueToRValue>
    |         |   `-DeclRefExpr 0x12183d580 <col:23> 'unsigned int' lvalue Var 0x1218395e8 'h' 'unsigned int'
    |         `-ArraySubscriptExpr 0x12183d660 <col:28, col:40> 'const unsigned int' lvalue
    |           |-ImplicitCastExpr 0x12183d630 <col:28> 'const unsigned int *' <LValueToRValue>
    |           | `-DeclRefExpr 0x12183d5f0 <col:28> 'const unsigned int *' lvalue ParmVar 0x121839288 'underflows' 'const unsigned int *'
    |           `-ImplicitCastExpr 0x12183d648 <col:39> 'unsigned int' <LValueToRValue>
    |             `-DeclRefExpr 0x12183d610 <col:39> 'unsigned int' lvalue Var 0x1218395e8 'h' 'unsigned int'
    |-BinaryOperator 0x12183d9a8 <line:43:2, col:16> '<dependent type>' contains-errors '='
    | |-RecoveryExpr 0x12183d960 <col:2, col:5> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x12183d928 <col:2> 'struct arpt_entry *' lvalue ParmVar 0x12181f848 'e' 'struct arpt_entry *'
    | `-IntegerLiteral 0x12183d988 <col:16> 'int' 0
    `-ReturnStmt 0x12183d9e8 <line:44:2, col:9>
      `-IntegerLiteral 0x12183d9c8 <col:9> 'int' 0
