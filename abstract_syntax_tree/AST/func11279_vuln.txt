TranslationUnitDecl 0x11d855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x11d8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x11d855bd0 '__int128'
|-TypedefDecl 0x11d856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x11d855bf0 'unsigned __int128'
|-TypedefDecl 0x11d926230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x11d926000 'struct __NSConstantString_tag'
|   `-Record 0x11d856580 '__NSConstantString_tag'
|-TypedefDecl 0x11d926298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x11d855d90 '__SVInt8_t'
|-TypedefDecl 0x11d926300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x11d855db0 '__SVInt16_t'
|-TypedefDecl 0x11d926368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x11d855dd0 '__SVInt32_t'
|-TypedefDecl 0x11d9263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x11d855df0 '__SVInt64_t'
|-TypedefDecl 0x11d926438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x11d855e10 '__SVUint8_t'
|-TypedefDecl 0x11d9264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x11d855e30 '__SVUint16_t'
|-TypedefDecl 0x11d926508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x11d855e50 '__SVUint32_t'
|-TypedefDecl 0x11d926570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x11d855e70 '__SVUint64_t'
|-TypedefDecl 0x11d9265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x11d855e90 '__SVFloat16_t'
|-TypedefDecl 0x11d926640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x11d855eb0 '__SVFloat32_t'
|-TypedefDecl 0x11d9266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x11d855ed0 '__SVFloat64_t'
|-TypedefDecl 0x11d926710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x11d855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x11d926778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x11d855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x11d9267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x11d855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x11d926848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x11d855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x11d9268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x11d855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x11d926918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x11d855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x11d926980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x11d855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x11d9269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x11d855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x11d926a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x11d855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x11d926ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x11d856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x11d926b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x11d856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x11d926b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x11d856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x11d926bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x11d856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x11d926c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x11d856090 '__clang_svint8x3_t'
|-TypedefDecl 0x11d926cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x11d8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x11d926d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x11d8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x11d926d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x11d8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x11d926df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x11d856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x11d926e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x11d856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x11d926ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x11d856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x11d926f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x11d856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x11d926f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x11d856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x11d927800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x11d8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x11d927868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x11d8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x11d9278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x11d8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x11d927938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x11d856210 '__clang_svint8x4_t'
|-TypedefDecl 0x11d9279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x11d856230 '__clang_svint16x4_t'
|-TypedefDecl 0x11d927a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x11d856250 '__clang_svint32x4_t'
|-TypedefDecl 0x11d927a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x11d856270 '__clang_svint64x4_t'
|-TypedefDecl 0x11d927ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x11d856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x11d927b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x11d8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x11d927ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x11d8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x11d927c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x11d8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x11d927c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x11d856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x11d927ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x11d856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x11d927d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x11d856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x11d927db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x11d856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x11d927e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x11d856390 '__SVBool_t'
|-TypedefDecl 0x11d927e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x11d8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x11d927ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x11d8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x11d927f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x11d8563f0 '__SVCount_t'
|-TypedefDecl 0x11d927ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x11d927fb0 'char *'
|   `-BuiltinType 0x11d8556b0 'char'
|-TypedefDecl 0x11d928068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x11d927fb0 'char *'
|   `-BuiltinType 0x11d8556b0 'char'
|-FunctionDecl 0x11d9281c8 <dataset_diviso_filec/func11279_vuln.c:1:1, line:71:1> line:1:18 referenced invalid ParseFloatNumber 'int (const char *)'
| |-ParmVarDecl 0x11d9280f0 <col:35, col:47> col:47 used Buffer 'const char *'
| `-CompoundStmt 0x11d945cb0 <line:2:1, line:71:1>
|   |-DeclStmt 0x11d928318 <line:4:5, col:17>
|   | `-VarDecl 0x11d928290 <col:5, col:16> col:9 used sign 'int' cinit
|   |   `-IntegerLiteral 0x11d9282f8 <col:16> 'int' 1
|   |-IfStmt 0x11d9286b8 <line:6:5, line:10:5>
|   | |-BinaryOperator 0x11d9284a0 <line:6:9, col:38> 'int' '||'
|   | | |-BinaryOperator 0x11d9283c8 <col:9, col:20> 'int' '=='
|   | | | |-ImplicitCastExpr 0x11d9283b0 <col:9, col:10> 'int' <IntegralCast>
|   | | | | `-ImplicitCastExpr 0x11d928398 <col:9, col:10> 'char' <LValueToRValue>
|   | | | |   `-UnaryOperator 0x11d928368 <col:9, col:10> 'const char' lvalue prefix '*' cannot overflow
|   | | | |     `-ImplicitCastExpr 0x11d928350 <col:10> 'const char *' <LValueToRValue>
|   | | | |       `-DeclRefExpr 0x11d928330 <col:10> 'const char *' lvalue ParmVar 0x11d9280f0 'Buffer' 'const char *'
|   | | | `-CharacterLiteral 0x11d928380 <col:20> 'int' 45
|   | | `-BinaryOperator 0x11d928480 <col:27, col:38> 'int' '=='
|   | |   |-ImplicitCastExpr 0x11d928468 <col:27, col:28> 'int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x11d928450 <col:27, col:28> 'char' <LValueToRValue>
|   | |   |   `-UnaryOperator 0x11d928420 <col:27, col:28> 'const char' lvalue prefix '*' cannot overflow
|   | |   |     `-ImplicitCastExpr 0x11d928408 <col:28> 'const char *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x11d9283e8 <col:28> 'const char *' lvalue ParmVar 0x11d9280f0 'Buffer' 'const char *'
|   | |   `-CharacterLiteral 0x11d928438 <col:38> 'int' 43
|   | `-CompoundStmt 0x11d928698 <col:43, line:10:5>
|   |   |-BinaryOperator 0x11d928640 <line:8:10, col:41> 'int' '='
|   |   | |-DeclRefExpr 0x11d9284c0 <col:10> 'int' lvalue Var 0x11d928290 'sign' 'int'
|   |   | `-ConditionalOperator 0x11d928610 <col:17, col:41> 'int'
|   |   |   |-ParenExpr 0x11d928598 <col:17, col:32> 'int'
|   |   |   | `-BinaryOperator 0x11d928578 <col:18, col:29> 'int' '=='
|   |   |   |   |-ImplicitCastExpr 0x11d928560 <col:18, col:19> 'int' <IntegralCast>
|   |   |   |   | `-ImplicitCastExpr 0x11d928548 <col:18, col:19> 'char' <LValueToRValue>
|   |   |   |   |   `-UnaryOperator 0x11d928518 <col:18, col:19> 'const char' lvalue prefix '*' cannot overflow
|   |   |   |   |     `-ImplicitCastExpr 0x11d928500 <col:19> 'const char *' <LValueToRValue>
|   |   |   |   |       `-DeclRefExpr 0x11d9284e0 <col:19> 'const char *' lvalue ParmVar 0x11d9280f0 'Buffer' 'const char *'
|   |   |   |   `-CharacterLiteral 0x11d928530 <col:29> 'int' 45
|   |   |   |-UnaryOperator 0x11d9285d8 <col:36, col:37> 'int' prefix '-'
|   |   |   | `-IntegerLiteral 0x11d9285b8 <col:37> 'int' 1
|   |   |   `-IntegerLiteral 0x11d9285f0 <col:41> 'int' 1
|   |   `-UnaryOperator 0x11d928680 <line:9:10, col:16> 'const char *' postfix '++'
|   |     `-DeclRefExpr 0x11d928660 <col:10> 'const char *' lvalue ParmVar 0x11d9280f0 'Buffer' 'const char *'
|   |-WhileStmt 0x11d942108 <line:13:5, line:17:5>
|   | |-BinaryOperator 0x11d941ec0 <line:13:12, col:44> 'int' '&&'
|   | | |-ImplicitCastExpr 0x11d941ea8 <col:12, col:13> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x11d941e90 <col:12, col:13> 'char' <LValueToRValue>
|   | | |   `-UnaryOperator 0x11d928710 <col:12, col:13> 'const char' lvalue prefix '*' cannot overflow
|   | | |     `-ImplicitCastExpr 0x11d9286f8 <col:13> 'const char *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x11d9286d8 <col:13> 'const char *' lvalue ParmVar 0x11d9280f0 'Buffer' 'const char *'
|   | | `-CallExpr 0x11d941e68 <col:23, col:44> 'int'
|   | |   |-ImplicitCastExpr 0x11d941e50 <col:23> 'int (*)(int)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x11d941d50 <col:23> 'int (int)' Function 0x11d941b90 'isdigit' 'int (int)'
|   | |   `-CStyleCastExpr 0x11d941df0 <col:31, col:38> 'int' <IntegralCast>
|   | |     `-ImplicitCastExpr 0x11d941dd8 <col:37, col:38> 'char' <LValueToRValue> part_of_explicit_cast
|   | |       `-UnaryOperator 0x11d941da8 <col:37, col:38> 'const char' lvalue prefix '*' cannot overflow
|   | |         `-ImplicitCastExpr 0x11d941d90 <col:38> 'const char *' <LValueToRValue>
|   | |           `-DeclRefExpr 0x11d941d70 <col:38> 'const char *' lvalue ParmVar 0x11d9280f0 'Buffer' 'const char *'
|   | `-CompoundStmt 0x11d9420f0 <col:47, line:17:5>
|   |   `-IfStmt 0x11d9420d0 <line:16:9, col:28>
|   |     |-ImplicitCastExpr 0x11d942080 <col:13, col:14> 'char' <LValueToRValue>
|   |     | `-UnaryOperator 0x11d942068 <col:13, col:14> 'const char' lvalue prefix '*' cannot overflow
|   |     |   `-ImplicitCastExpr 0x11d942050 <col:14> 'const char *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x11d942030 <col:14> 'const char *' lvalue ParmVar 0x11d9280f0 'Buffer' 'const char *'
|   |     `-UnaryOperator 0x11d9420b8 <col:22, col:28> 'const char *' postfix '++'
|   |       `-DeclRefExpr 0x11d942098 <col:22> 'const char *' lvalue ParmVar 0x11d9280f0 'Buffer' 'const char *'
|   |-IfStmt 0x11d944a70 <line:19:5, line:34:5>
|   | |-BinaryOperator 0x11d9421c0 <line:19:9, col:20> 'int' '=='
|   | | |-ImplicitCastExpr 0x11d9421a8 <col:9, col:10> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x11d942190 <col:9, col:10> 'char' <LValueToRValue>
|   | | |   `-UnaryOperator 0x11d942160 <col:9, col:10> 'const char' lvalue prefix '*' cannot overflow
|   | | |     `-ImplicitCastExpr 0x11d942148 <col:10> 'const char *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x11d942128 <col:10> 'const char *' lvalue ParmVar 0x11d9280f0 'Buffer' 'const char *'
|   | | `-CharacterLiteral 0x11d942178 <col:20> 'int' 46
|   | `-CompoundStmt 0x11d944a48 <col:25, line:34:5>
|   |   |-DeclStmt 0x11d942280 <line:22:9, col:21>
|   |   | `-VarDecl 0x11d9421f8 <col:9, col:20> col:13 used prec 'int' cinit
|   |   |   `-IntegerLiteral 0x11d942260 <col:20> 'int' 0
|   |   |-IfStmt 0x11d942338 <line:24:9, col:28>
|   |   | |-ImplicitCastExpr 0x11d9422e8 <col:13, col:14> 'char' <LValueToRValue>
|   |   | | `-UnaryOperator 0x11d9422d0 <col:13, col:14> 'const char' lvalue prefix '*' cannot overflow
|   |   | |   `-ImplicitCastExpr 0x11d9422b8 <col:14> 'const char *' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x11d942298 <col:14> 'const char *' lvalue ParmVar 0x11d9280f0 'Buffer' 'const char *'
|   |   | `-UnaryOperator 0x11d942320 <col:22, col:28> 'const char *' postfix '++'
|   |   |   `-DeclRefExpr 0x11d942300 <col:22> 'const char *' lvalue ParmVar 0x11d9280f0 'Buffer' 'const char *'
|   |   `-WhileStmt 0x11d9446c0 <line:26:9, line:31:9>
|   |     |-BinaryOperator 0x11d9424e0 <line:26:16, col:48> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x11d9424c8 <col:16, col:17> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x11d9424b0 <col:16, col:17> 'char' <LValueToRValue>
|   |     | |   `-UnaryOperator 0x11d942390 <col:16, col:17> 'const char' lvalue prefix '*' cannot overflow
|   |     | |     `-ImplicitCastExpr 0x11d942378 <col:17> 'const char *' <LValueToRValue>
|   |     | |       `-DeclRefExpr 0x11d942358 <col:17> 'const char *' lvalue ParmVar 0x11d9280f0 'Buffer' 'const char *'
|   |     | `-CallExpr 0x11d942488 <col:27, col:48> 'int'
|   |     |   |-ImplicitCastExpr 0x11d942470 <col:27> 'int (*)(int)' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x11d9423a8 <col:27> 'int (int)' Function 0x11d941b90 'isdigit' 'int (int)'
|   |     |   `-CStyleCastExpr 0x11d942448 <col:35, col:42> 'int' <IntegralCast>
|   |     |     `-ImplicitCastExpr 0x11d942430 <col:41, col:42> 'char' <LValueToRValue> part_of_explicit_cast
|   |     |       `-UnaryOperator 0x11d942400 <col:41, col:42> 'const char' lvalue prefix '*' cannot overflow
|   |     |         `-ImplicitCastExpr 0x11d9423e8 <col:42> 'const char *' <LValueToRValue>
|   |     |           `-DeclRefExpr 0x11d9423c8 <col:42> 'const char *' lvalue ParmVar 0x11d9280f0 'Buffer' 'const char *'
|   |     `-CompoundStmt 0x11d9446a0 <col:51, line:31:9>
|   |       |-UnaryOperator 0x11d9427b8 <line:29:13, col:17> 'int' postfix '++'
|   |       | `-DeclRefExpr 0x11d942798 <col:13> 'int' lvalue Var 0x11d9421f8 'prec' 'int'
|   |       `-IfStmt 0x11d944680 <line:30:13, col:32>
|   |         |-ImplicitCastExpr 0x11d944630 <col:17, col:18> 'char' <LValueToRValue>
|   |         | `-UnaryOperator 0x11d944618 <col:17, col:18> 'const char' lvalue prefix '*' cannot overflow
|   |         |   `-ImplicitCastExpr 0x11d944600 <col:18> 'const char *' <LValueToRValue>
|   |         |     `-DeclRefExpr 0x11d9427d0 <col:18> 'const char *' lvalue ParmVar 0x11d9280f0 'Buffer' 'const char *'
|   |         `-UnaryOperator 0x11d944668 <col:26, col:32> 'const char *' postfix '++'
|   |           `-DeclRefExpr 0x11d944648 <col:26> 'const char *' lvalue ParmVar 0x11d9280f0 'Buffer' 'const char *'
|   |-IfStmt 0x11d945be8 <line:37:5, line:68:5>
|   | |-BinaryOperator 0x11d944de8 <line:37:9, col:40> 'int' '&&'
|   | | |-ImplicitCastExpr 0x11d944dd0 <col:9, col:10> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x11d944db8 <col:9, col:10> 'char' <LValueToRValue>
|   | | |   `-UnaryOperator 0x11d944ac8 <col:9, col:10> 'const char' lvalue prefix '*' cannot overflow
|   | | |     `-ImplicitCastExpr 0x11d944ab0 <col:10> 'const char *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x11d944a90 <col:10> 'const char *' lvalue ParmVar 0x11d9280f0 'Buffer' 'const char *'
|   | | `-BinaryOperator 0x11d944d98 <col:20, col:40> 'int' '=='
|   | |   |-CallExpr 0x11d944d28 <col:20, col:35> 'int'
|   | |   | |-ImplicitCastExpr 0x11d944d10 <col:20> 'int (*)(int)' <FunctionToPointerDecay>
|   | |   | | `-DeclRefExpr 0x11d944ca0 <col:20> 'int (int)' Function 0x11d944ae0 'toupper' 'int (int)'
|   | |   | `-ImplicitCastExpr 0x11d944d68 <col:28, col:29> 'int' <IntegralCast>
|   | |   |   `-ImplicitCastExpr 0x11d944d50 <col:28, col:29> 'char' <LValueToRValue>
|   | |   |     `-UnaryOperator 0x11d944cf8 <col:28, col:29> 'const char' lvalue prefix '*' cannot overflow
|   | |   |       `-ImplicitCastExpr 0x11d944ce0 <col:29> 'const char *' <LValueToRValue>
|   | |   |         `-DeclRefExpr 0x11d944cc0 <col:29> 'const char *' lvalue ParmVar 0x11d9280f0 'Buffer' 'const char *'
|   | |   `-CharacterLiteral 0x11d944d80 <col:40> 'int' 69
|   | `-CompoundStmt 0x11d945b98 <col:45, line:68:5>
|   |   |-DeclStmt 0x11d944e88 <line:39:9, col:14>
|   |   | `-VarDecl 0x11d944e20 <col:9, col:13> col:13 used e 'int'
|   |   |-DeclStmt 0x11d944f20 <line:40:9, col:16>
|   |   | `-VarDecl 0x11d944eb8 <col:9, col:13> col:13 used sgn 'int'
|   |   |-IfStmt 0x11d944fd8 <line:42:9, col:28>
|   |   | |-ImplicitCastExpr 0x11d944f88 <col:13, col:14> 'char' <LValueToRValue>
|   |   | | `-UnaryOperator 0x11d944f70 <col:13, col:14> 'const char' lvalue prefix '*' cannot overflow
|   |   | |   `-ImplicitCastExpr 0x11d944f58 <col:14> 'const char *' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x11d944f38 <col:14> 'const char *' lvalue ParmVar 0x11d9280f0 'Buffer' 'const char *'
|   |   | `-UnaryOperator 0x11d944fc0 <col:22, col:28> 'const char *' postfix '++'
|   |   |   `-DeclRefExpr 0x11d944fa0 <col:22> 'const char *' lvalue ParmVar 0x11d9280f0 'Buffer' 'const char *'
|   |   |-BinaryOperator 0x11d945038 <line:43:9, col:15> 'int' '='
|   |   | |-DeclRefExpr 0x11d944ff8 <col:9> 'int' lvalue Var 0x11d944eb8 'sgn' 'int'
|   |   | `-IntegerLiteral 0x11d945018 <col:15> 'int' 1
|   |   |-IfStmt 0x11d945498 <line:45:9, line:55:13> has_else
|   |   | |-BinaryOperator 0x11d9450f0 <line:45:13, col:24> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x11d9450d8 <col:13, col:14> 'int' <IntegralCast>
|   |   | | | `-ImplicitCastExpr 0x11d9450c0 <col:13, col:14> 'char' <LValueToRValue>
|   |   | | |   `-UnaryOperator 0x11d945090 <col:13, col:14> 'const char' lvalue prefix '*' cannot overflow
|   |   | | |     `-ImplicitCastExpr 0x11d945078 <col:14> 'const char *' <LValueToRValue>
|   |   | | |       `-DeclRefExpr 0x11d945058 <col:14> 'const char *' lvalue ParmVar 0x11d9280f0 'Buffer' 'const char *'
|   |   | | `-CharacterLiteral 0x11d9450a8 <col:24> 'int' 45
|   |   | |-CompoundStmt 0x11d945248 <col:29, line:49:9>
|   |   | | |-BinaryOperator 0x11d945168 <line:47:13, col:20> 'int' '='
|   |   | | | |-DeclRefExpr 0x11d945110 <col:13> 'int' lvalue Var 0x11d944eb8 'sgn' 'int'
|   |   | | | `-UnaryOperator 0x11d945150 <col:19, col:20> 'int' prefix '-'
|   |   | | |   `-IntegerLiteral 0x11d945130 <col:20> 'int' 1
|   |   | | `-IfStmt 0x11d945228 <line:48:13, col:32>
|   |   | |   |-ImplicitCastExpr 0x11d9451d8 <col:17, col:18> 'char' <LValueToRValue>
|   |   | |   | `-UnaryOperator 0x11d9451c0 <col:17, col:18> 'const char' lvalue prefix '*' cannot overflow
|   |   | |   |   `-ImplicitCastExpr 0x11d9451a8 <col:18> 'const char *' <LValueToRValue>
|   |   | |   |     `-DeclRefExpr 0x11d945188 <col:18> 'const char *' lvalue ParmVar 0x11d9280f0 'Buffer' 'const char *'
|   |   | |   `-UnaryOperator 0x11d945210 <col:26, col:32> 'const char *' postfix '++'
|   |   | |     `-DeclRefExpr 0x11d9451f0 <col:26> 'const char *' lvalue ParmVar 0x11d9280f0 'Buffer' 'const char *'
|   |   | `-IfStmt 0x11d945478 <line:51:13, line:55:13>
|   |   |   |-BinaryOperator 0x11d945300 <line:51:17, col:28> 'int' '=='
|   |   |   | |-ImplicitCastExpr 0x11d9452e8 <col:17, col:18> 'int' <IntegralCast>
|   |   |   | | `-ImplicitCastExpr 0x11d9452d0 <col:17, col:18> 'char' <LValueToRValue>
|   |   |   | |   `-UnaryOperator 0x11d9452a0 <col:17, col:18> 'const char' lvalue prefix '*' cannot overflow
|   |   |   | |     `-ImplicitCastExpr 0x11d945288 <col:18> 'const char *' <LValueToRValue>
|   |   |   | |       `-DeclRefExpr 0x11d945268 <col:18> 'const char *' lvalue ParmVar 0x11d9280f0 'Buffer' 'const char *'
|   |   |   | `-CharacterLiteral 0x11d9452b8 <col:28> 'int' 43
|   |   |   `-CompoundStmt 0x11d945458 <col:33, line:55:13>
|   |   |     |-BinaryOperator 0x11d945378 <line:53:17, col:24> 'int' '='
|   |   |     | |-DeclRefExpr 0x11d945320 <col:17> 'int' lvalue Var 0x11d944eb8 'sgn' 'int'
|   |   |     | `-UnaryOperator 0x11d945360 <col:23, col:24> 'int' prefix '+' cannot overflow
|   |   |     |   `-IntegerLiteral 0x11d945340 <col:24> 'int' 1
|   |   |     `-IfStmt 0x11d945438 <line:54:17, col:36>
|   |   |       |-ImplicitCastExpr 0x11d9453e8 <col:21, col:22> 'char' <LValueToRValue>
|   |   |       | `-UnaryOperator 0x11d9453d0 <col:21, col:22> 'const char' lvalue prefix '*' cannot overflow
|   |   |       |   `-ImplicitCastExpr 0x11d9453b8 <col:22> 'const char *' <LValueToRValue>
|   |   |       |     `-DeclRefExpr 0x11d945398 <col:22> 'const char *' lvalue ParmVar 0x11d9280f0 'Buffer' 'const char *'
|   |   |       `-UnaryOperator 0x11d945420 <col:30, col:36> 'const char *' postfix '++'
|   |   |         `-DeclRefExpr 0x11d945400 <col:30> 'const char *' lvalue ParmVar 0x11d9280f0 'Buffer' 'const char *'
|   |   |-BinaryOperator 0x11d945508 <line:57:13, col:17> 'int' '='
|   |   | |-DeclRefExpr 0x11d9454c8 <col:13> 'int' lvalue Var 0x11d944e20 'e' 'int'
|   |   | `-IntegerLiteral 0x11d9454e8 <col:17> 'int' 0
|   |   |-WhileStmt 0x11d9459d8 <line:58:13, line:64:13>
|   |   | |-BinaryOperator 0x11d9456b0 <line:58:20, col:52> 'int' '&&'
|   |   | | |-ImplicitCastExpr 0x11d945698 <col:20, col:21> 'int' <IntegralCast>
|   |   | | | `-ImplicitCastExpr 0x11d945680 <col:20, col:21> 'char' <LValueToRValue>
|   |   | | |   `-UnaryOperator 0x11d945560 <col:20, col:21> 'const char' lvalue prefix '*' cannot overflow
|   |   | | |     `-ImplicitCastExpr 0x11d945548 <col:21> 'const char *' <LValueToRValue>
|   |   | | |       `-DeclRefExpr 0x11d945528 <col:21> 'const char *' lvalue ParmVar 0x11d9280f0 'Buffer' 'const char *'
|   |   | | `-CallExpr 0x11d945658 <col:31, col:52> 'int'
|   |   | |   |-ImplicitCastExpr 0x11d945640 <col:31> 'int (*)(int)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x11d945578 <col:31> 'int (int)' Function 0x11d941b90 'isdigit' 'int (int)'
|   |   | |   `-CStyleCastExpr 0x11d945618 <col:39, col:46> 'int' <IntegralCast>
|   |   | |     `-ImplicitCastExpr 0x11d945600 <col:45, col:46> 'char' <LValueToRValue> part_of_explicit_cast
|   |   | |       `-UnaryOperator 0x11d9455d0 <col:45, col:46> 'const char' lvalue prefix '*' cannot overflow
|   |   | |         `-ImplicitCastExpr 0x11d9455b8 <col:46> 'const char *' <LValueToRValue>
|   |   | |           `-DeclRefExpr 0x11d945598 <col:46> 'const char *' lvalue ParmVar 0x11d9280f0 'Buffer' 'const char *'
|   |   | `-CompoundStmt 0x11d9459b8 <col:55, line:64:13>
|   |   |   |-IfStmt 0x11d9458d8 <line:60:17, line:61:48>
|   |   |   | |-RecoveryExpr 0x11d945708 <line:60:21, col:50> '_Bool' contains-errors
|   |   |   | `-BinaryOperator 0x11d9458b8 <line:61:21, col:48> 'int' '='
|   |   |   |   |-DeclRefExpr 0x11d945728 <col:21> 'int' lvalue Var 0x11d944e20 'e' 'int'
|   |   |   |   `-BinaryOperator 0x11d945898 <col:25, col:48> 'int' '+'
|   |   |   |     |-BinaryOperator 0x11d9457a0 <col:25, col:29> 'int' '*'
|   |   |   |     | |-ImplicitCastExpr 0x11d945788 <col:25> 'int' <LValueToRValue>
|   |   |   |     | | `-DeclRefExpr 0x11d945748 <col:25> 'int' lvalue Var 0x11d944e20 'e' 'int'
|   |   |   |     | `-IntegerLiteral 0x11d945768 <col:29> 'int' 10
|   |   |   |     `-ParenExpr 0x11d945878 <col:34, col:48> 'int'
|   |   |   |       `-BinaryOperator 0x11d945858 <col:35, col:45> 'int' '-'
|   |   |   |         |-ImplicitCastExpr 0x11d945840 <col:35, col:36> 'int' <IntegralCast>
|   |   |   |         | `-ImplicitCastExpr 0x11d945828 <col:35, col:36> 'char' <LValueToRValue>
|   |   |   |         |   `-UnaryOperator 0x11d9457f8 <col:35, col:36> 'const char' lvalue prefix '*' cannot overflow
|   |   |   |         |     `-ImplicitCastExpr 0x11d9457e0 <col:36> 'const char *' <LValueToRValue>
|   |   |   |         |       `-DeclRefExpr 0x11d9457c0 <col:36> 'const char *' lvalue ParmVar 0x11d9280f0 'Buffer' 'const char *'
|   |   |   |         `-CharacterLiteral 0x11d945810 <col:45> 'int' 48
|   |   |   `-IfStmt 0x11d945998 <line:63:17, col:36>
|   |   |     |-ImplicitCastExpr 0x11d945948 <col:21, col:22> 'char' <LValueToRValue>
|   |   |     | `-UnaryOperator 0x11d945930 <col:21, col:22> 'const char' lvalue prefix '*' cannot overflow
|   |   |     |   `-ImplicitCastExpr 0x11d945918 <col:22> 'const char *' <LValueToRValue>
|   |   |     |     `-DeclRefExpr 0x11d9458f8 <col:22> 'const char *' lvalue ParmVar 0x11d9280f0 'Buffer' 'const char *'
|   |   |     `-UnaryOperator 0x11d945980 <col:30, col:36> 'const char *' postfix '++'
|   |   |       `-DeclRefExpr 0x11d945960 <col:30> 'const char *' lvalue ParmVar 0x11d9280f0 'Buffer' 'const char *'
|   |   `-BinaryOperator 0x11d945aa8 <line:66:13, col:21> 'int' '='
|   |     |-DeclRefExpr 0x11d9459f8 <col:13> 'int' lvalue Var 0x11d944e20 'e' 'int'
|   |     `-BinaryOperator 0x11d945a88 <col:17, col:21> 'int' '*'
|   |       |-ImplicitCastExpr 0x11d945a58 <col:17> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x11d945a18 <col:17> 'int' lvalue Var 0x11d944eb8 'sgn' 'int'
|   |       `-ImplicitCastExpr 0x11d945a70 <col:21> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x11d945a38 <col:21> 'int' lvalue Var 0x11d944e20 'e' 'int'
|   `-ReturnStmt 0x11d945ca0 <line:70:5, col:19>
|     `-BinaryOperator 0x11d945c80 <col:12, col:19> '<dependent type>' contains-errors '*'
|       |-DeclRefExpr 0x11d945c08 <col:12> 'int' lvalue Var 0x11d928290 'sign' 'int'
|       `-RecoveryExpr 0x11d945c60 <col:19> '<dependent type>' contains-errors lvalue
|-FunctionDecl 0x11d941b90 <line:13:23> col:23 implicit used isdigit 'int (int)' extern
| |-ParmVarDecl 0x11d941c90 <<invalid sloc>> <invalid sloc> 'int'
| |-BuiltinAttr 0x11d941c38 <<invalid sloc>> Implicit 924
| |-NoThrowAttr 0x11d941d00 <col:23> Implicit
| `-PureAttr 0x11d941d28 <col:23> Implicit
`-FunctionDecl 0x11d944ae0 <line:37:20> col:20 implicit used toupper 'int (int)' extern
  |-ParmVarDecl 0x11d944be0 <<invalid sloc>> <invalid sloc> 'int'
  |-BuiltinAttr 0x11d944b88 <<invalid sloc>> Implicit 933
  |-NoThrowAttr 0x11d944c50 <col:20> Implicit
  `-PureAttr 0x11d944c78 <col:20> Implicit
