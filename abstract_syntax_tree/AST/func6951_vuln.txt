TranslationUnitDecl 0x127028008 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x127028eb8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1270285d0 '__int128'
|-TypedefDecl 0x127028f28 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1270285f0 'unsigned __int128'
|-TypedefDecl 0x1270f8c30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x1270f8a00 'struct __NSConstantString_tag'
|   `-Record 0x127028f80 '__NSConstantString_tag'
|-TypedefDecl 0x1270f8c98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x127028790 '__SVInt8_t'
|-TypedefDecl 0x1270f8d00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x1270287b0 '__SVInt16_t'
|-TypedefDecl 0x1270f8d68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x1270287d0 '__SVInt32_t'
|-TypedefDecl 0x1270f8dd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x1270287f0 '__SVInt64_t'
|-TypedefDecl 0x1270f8e38 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x127028810 '__SVUint8_t'
|-TypedefDecl 0x1270f8ea0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x127028830 '__SVUint16_t'
|-TypedefDecl 0x1270f8f08 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x127028850 '__SVUint32_t'
|-TypedefDecl 0x1270f8f70 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x127028870 '__SVUint64_t'
|-TypedefDecl 0x1270f8fd8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x127028890 '__SVFloat16_t'
|-TypedefDecl 0x1270f9040 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x1270288b0 '__SVFloat32_t'
|-TypedefDecl 0x1270f90a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x1270288d0 '__SVFloat64_t'
|-TypedefDecl 0x1270f9110 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x1270288f0 '__SVBfloat16_t'
|-TypedefDecl 0x1270f9178 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x127028910 '__clang_svint8x2_t'
|-TypedefDecl 0x1270f91e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x127028930 '__clang_svint16x2_t'
|-TypedefDecl 0x1270f9248 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x127028950 '__clang_svint32x2_t'
|-TypedefDecl 0x1270f92b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x127028970 '__clang_svint64x2_t'
|-TypedefDecl 0x1270f9318 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x127028990 '__clang_svuint8x2_t'
|-TypedefDecl 0x1270f9380 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x1270289b0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1270f93e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x1270289d0 '__clang_svuint32x2_t'
|-TypedefDecl 0x1270f9450 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x1270289f0 '__clang_svuint64x2_t'
|-TypedefDecl 0x1270f94b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x127028a10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x1270f9520 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x127028a30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x1270f9588 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x127028a50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x1270f95f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x127028a70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x1270f9658 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x127028a90 '__clang_svint8x3_t'
|-TypedefDecl 0x1270f96c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x127028ab0 '__clang_svint16x3_t'
|-TypedefDecl 0x1270f9728 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x127028ad0 '__clang_svint32x3_t'
|-TypedefDecl 0x1270f9790 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x127028af0 '__clang_svint64x3_t'
|-TypedefDecl 0x1270f97f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x127028b10 '__clang_svuint8x3_t'
|-TypedefDecl 0x1270f9860 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x127028b30 '__clang_svuint16x3_t'
|-TypedefDecl 0x1270f98c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x127028b50 '__clang_svuint32x3_t'
|-TypedefDecl 0x1270f9930 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x127028b70 '__clang_svuint64x3_t'
|-TypedefDecl 0x1270f9998 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x127028b90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x1270fa200 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x127028bb0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x1270fa268 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x127028bd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1270fa2d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x127028bf0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x1270fa338 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x127028c10 '__clang_svint8x4_t'
|-TypedefDecl 0x1270fa3a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x127028c30 '__clang_svint16x4_t'
|-TypedefDecl 0x1270fa408 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x127028c50 '__clang_svint32x4_t'
|-TypedefDecl 0x1270fa470 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x127028c70 '__clang_svint64x4_t'
|-TypedefDecl 0x1270fa4d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x127028c90 '__clang_svuint8x4_t'
|-TypedefDecl 0x1270fa540 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x127028cb0 '__clang_svuint16x4_t'
|-TypedefDecl 0x1270fa5a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x127028cd0 '__clang_svuint32x4_t'
|-TypedefDecl 0x1270fa610 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x127028cf0 '__clang_svuint64x4_t'
|-TypedefDecl 0x1270fa678 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x127028d10 '__clang_svfloat16x4_t'
|-TypedefDecl 0x1270fa6e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x127028d30 '__clang_svfloat32x4_t'
|-TypedefDecl 0x1270fa748 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x127028d50 '__clang_svfloat64x4_t'
|-TypedefDecl 0x1270fa7b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x127028d70 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x1270fa818 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x127028d90 '__SVBool_t'
|-TypedefDecl 0x1270fa880 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x127028db0 '__clang_svboolx2_t'
|-TypedefDecl 0x1270fa8e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x127028dd0 '__clang_svboolx4_t'
|-TypedefDecl 0x1270fa950 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x127028df0 '__SVCount_t'
|-TypedefDecl 0x1270fa9f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1270fa9b0 'char *'
|   `-BuiltinType 0x1270280b0 'char'
|-TypedefDecl 0x1270faa68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1270fa9b0 'char *'
|   `-BuiltinType 0x1270280b0 'char'
|-FunctionDecl 0x1271134d8 <dataset_diviso_filec/func6951_vuln.c:1:1, line:53:1> line:1:12 rose_parse_ccitt 'int (unsigned char *, struct rose_facilities_struct *, int)' static
| |-ParmVarDecl 0x1270fab08 <col:29, col:44> col:44 used p 'unsigned char *'
| |-ParmVarDecl 0x1270fb0f8 <col:47, col:78> col:78 used facilities 'struct rose_facilities_struct *'
| |-ParmVarDecl 0x1270fb178 <col:90, col:94> col:94 used len 'int'
| `-CompoundStmt 0x1271174f0 <line:2:1, line:53:1>
|   |-DeclStmt 0x127113730 <line:3:2, col:24>
|   | |-VarDecl 0x1271135f8 <col:2, col:16> col:16 used l 'unsigned char'
|   | `-VarDecl 0x127113678 <col:2, col:23> col:19 used n 'unsigned char' cinit
|   |   `-ImplicitCastExpr 0x127113700 <col:23> 'unsigned char' <IntegralCast>
|   |     `-IntegerLiteral 0x1271136e0 <col:23> 'int' 0
|   |-DeclStmt 0x127113858 <line:4:2, col:19>
|   | `-VarDecl 0x1271137f0 <col:2, col:18> col:7 used callsign 'char[11]'
|   |-DoStmt 0x127117470 <line:6:2, line:50:32>
|   | |-CompoundStmt 0x127117300 <line:6:5, line:50:2>
|   | | `-SwitchStmt 0x127113930 <line:7:3, line:49:3>
|   | |   |-BinaryOperator 0x127113910 <line:7:11, col:16> 'int' '&'
|   | |   | |-ImplicitCastExpr 0x1271138f8 <col:11, col:12> 'int' <IntegralCast>
|   | |   | | `-ImplicitCastExpr 0x1271138e0 <col:11, col:12> 'unsigned char' <LValueToRValue>
|   | |   | |   `-UnaryOperator 0x1271138a8 <col:11, col:12> 'unsigned char' lvalue prefix '*' cannot overflow
|   | |   | |     `-ImplicitCastExpr 0x127113890 <col:12> 'unsigned char *' <LValueToRValue>
|   | |   | |       `-DeclRefExpr 0x127113870 <col:12> 'unsigned char *' lvalue ParmVar 0x1270fab08 'p' 'unsigned char *'
|   | |   | `-IntegerLiteral 0x1271138c0 <col:16> 'int' 192
|   | |   `-CompoundStmt 0x127117250 <col:22, line:49:3>
|   | |     |-CaseStmt 0x127113990 <line:8:3, line:9:11>
|   | |     | |-ConstantExpr 0x127113978 <line:8:8> 'int'
|   | |     | | `-IntegerLiteral 0x127113958 <col:8> 'int' 0
|   | |     | `-CompoundAssignOperator 0x1271139f8 <line:9:4, col:11> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|   | |     |   |-DeclRefExpr 0x1271139b8 <col:4> 'unsigned char *' lvalue ParmVar 0x1270fab08 'p' 'unsigned char *'
|   | |     |   `-IntegerLiteral 0x1271139d8 <col:11> 'int' 2
|   | |     |-CompoundAssignOperator 0x127113a68 <line:10:4, col:11> 'unsigned char' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |     | |-DeclRefExpr 0x127113a28 <col:4> 'unsigned char' lvalue Var 0x127113678 'n' 'unsigned char'
|   | |     | `-IntegerLiteral 0x127113a48 <col:11> 'int' 2
|   | |     |-CompoundAssignOperator 0x127113ad8 <line:11:4, col:11> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |     | |-DeclRefExpr 0x127113a98 <col:4> 'int' lvalue ParmVar 0x1270fb178 'len' 'int'
|   | |     | `-IntegerLiteral 0x127113ab8 <col:11> 'int' 2
|   | |     |-BreakStmt 0x127113b08 <line:12:4>
|   | |     |-CaseStmt 0x127113b48 <line:14:3, line:15:11>
|   | |     | |-ConstantExpr 0x127113b30 <line:14:8> 'int'
|   | |     | | `-IntegerLiteral 0x127113b10 <col:8> 'int' 64
|   | |     | `-CompoundAssignOperator 0x127113bb0 <line:15:4, col:11> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|   | |     |   |-DeclRefExpr 0x127113b70 <col:4> 'unsigned char *' lvalue ParmVar 0x1270fab08 'p' 'unsigned char *'
|   | |     |   `-IntegerLiteral 0x127113b90 <col:11> 'int' 3
|   | |     |-CompoundAssignOperator 0x127113c20 <line:16:4, col:11> 'unsigned char' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |     | |-DeclRefExpr 0x127113be0 <col:4> 'unsigned char' lvalue Var 0x127113678 'n' 'unsigned char'
|   | |     | `-IntegerLiteral 0x127113c00 <col:11> 'int' 3
|   | |     |-CompoundAssignOperator 0x127113c90 <line:17:4, col:11> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |     | |-DeclRefExpr 0x127113c50 <col:4> 'int' lvalue ParmVar 0x1270fb178 'len' 'int'
|   | |     | `-IntegerLiteral 0x127113c70 <col:11> 'int' 3
|   | |     |-BreakStmt 0x127113cc0 <line:18:4>
|   | |     |-CaseStmt 0x127113d00 <line:20:3, line:21:11>
|   | |     | |-ConstantExpr 0x127113ce8 <line:20:8> 'int'
|   | |     | | `-IntegerLiteral 0x127113cc8 <col:8> 'int' 128
|   | |     | `-CompoundAssignOperator 0x127113d68 <line:21:4, col:11> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|   | |     |   |-DeclRefExpr 0x127113d28 <col:4> 'unsigned char *' lvalue ParmVar 0x1270fab08 'p' 'unsigned char *'
|   | |     |   `-IntegerLiteral 0x127113d48 <col:11> 'int' 4
|   | |     |-CompoundAssignOperator 0x127113dd8 <line:22:4, col:11> 'unsigned char' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |     | |-DeclRefExpr 0x127113d98 <col:4> 'unsigned char' lvalue Var 0x127113678 'n' 'unsigned char'
|   | |     | `-IntegerLiteral 0x127113db8 <col:11> 'int' 4
|   | |     |-CompoundAssignOperator 0x127113e48 <line:23:4, col:11> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |     | |-DeclRefExpr 0x127113e08 <col:4> 'int' lvalue ParmVar 0x1270fb178 'len' 'int'
|   | |     | `-IntegerLiteral 0x127113e28 <col:11> 'int' 4
|   | |     |-BreakStmt 0x127113e78 <line:24:4>
|   | |     |-CaseStmt 0x127113eb8 <line:26:3, line:27:11>
|   | |     | |-ConstantExpr 0x127113ea0 <line:26:8> 'int'
|   | |     | | `-IntegerLiteral 0x127113e80 <col:8> 'int' 192
|   | |     | `-BinaryOperator 0x127113f90 <line:27:4, col:11> 'unsigned char' '='
|   | |     |   |-DeclRefExpr 0x127113ee0 <col:4> 'unsigned char' lvalue Var 0x1271135f8 'l' 'unsigned char'
|   | |     |   `-ImplicitCastExpr 0x127113f78 <col:8, col:11> 'unsigned char' <LValueToRValue>
|   | |     |     `-ArraySubscriptExpr 0x127113f58 <col:8, col:11> 'unsigned char' lvalue
|   | |     |       |-ImplicitCastExpr 0x127113f40 <col:8> 'unsigned char *' <LValueToRValue>
|   | |     |       | `-DeclRefExpr 0x127113f00 <col:8> 'unsigned char *' lvalue ParmVar 0x1270fab08 'p' 'unsigned char *'
|   | |     |       `-IntegerLiteral 0x127113f20 <col:10> 'int' 1
|   | |     |-IfStmt 0x127114138 <line:30:4, line:31:13>
|   | |     | |-BinaryOperator 0x1271140d0 <line:30:8, col:22> 'int' '||'
|   | |     | | |-BinaryOperator 0x127114020 <col:8, col:12> 'int' '<'
|   | |     | | | |-ImplicitCastExpr 0x127114008 <col:8> 'int' <IntegralCast>
|   | |     | | | | `-ImplicitCastExpr 0x127113ff0 <col:8> 'unsigned char' <LValueToRValue>
|   | |     | | | |   `-DeclRefExpr 0x127113fb0 <col:8> 'unsigned char' lvalue Var 0x1271135f8 'l' 'unsigned char'
|   | |     | | | `-IntegerLiteral 0x127113fd0 <col:12> 'int' 10
|   | |     | | `-BinaryOperator 0x1271140b0 <col:18, col:22> 'int' '>'
|   | |     | |   |-ImplicitCastExpr 0x127114098 <col:18> 'int' <IntegralCast>
|   | |     | |   | `-ImplicitCastExpr 0x127114080 <col:18> 'unsigned char' <LValueToRValue>
|   | |     | |   |   `-DeclRefExpr 0x127114040 <col:18> 'unsigned char' lvalue Var 0x1271135f8 'l' 'unsigned char'
|   | |     | |   `-IntegerLiteral 0x127114060 <col:22> 'int' 20
|   | |     | `-ReturnStmt 0x127114128 <line:31:5, col:13>
|   | |     |   `-UnaryOperator 0x127114110 <col:12, col:13> 'int' prefix '-'
|   | |     |     `-IntegerLiteral 0x1271140f0 <col:13> 'int' 1
|   | |     |-IfStmt 0x127115988 <line:33:4, line:38:4>
|   | |     | |-BinaryOperator 0x127114278 <line:33:8, col:14> 'int' contains-errors '=='
|   | |     | | |-UnaryOperator 0x127114240 <col:8, col:9> 'unsigned char' lvalue prefix '*' cannot overflow
|   | |     | | | `-ImplicitCastExpr 0x127114228 <col:9> 'unsigned char *' <LValueToRValue>
|   | |     | | |   `-DeclRefExpr 0x127114158 <col:9> 'unsigned char *' lvalue ParmVar 0x1270fab08 'p' 'unsigned char *'
|   | |     | | `-RecoveryExpr 0x127114258 <col:14> '<dependent type>' contains-errors lvalue
|   | |     | `-CompoundStmt 0x127115958 <col:35, line:38:4>
|   | |     |   |-CallExpr 0x1271153a0 <line:34:5, col:58> '<dependent type>' contains-errors
|   | |     |   | |-DeclRefExpr 0x127115180 <col:5> 'void *(void *, const void *, unsigned long)' Function 0x127114318 'memcpy' 'void *(void *, const void *, unsigned long)'
|   | |     |   | |-UnaryOperator 0x127115200 <col:12, col:25> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | |     |   | | `-RecoveryExpr 0x1271151d8 <col:13, col:25> '<dependent type>' contains-errors lvalue
|   | |     |   | |   `-DeclRefExpr 0x1271151a0 <col:13> 'struct rose_facilities_struct *' lvalue ParmVar 0x1270fb0f8 'facilities' 'struct rose_facilities_struct *'
|   | |     |   | |-BinaryOperator 0x127115348 <col:38, col:42> 'unsigned char *' '+'
|   | |     |   | | |-ImplicitCastExpr 0x127115330 <col:38> 'unsigned char *' <LValueToRValue>
|   | |     |   | | | `-DeclRefExpr 0x127115218 <col:38> 'unsigned char *' lvalue ParmVar 0x1270fab08 'p' 'unsigned char *'
|   | |     |   | | `-IntegerLiteral 0x127115238 <col:42> 'int' 7
|   | |     |   | `-RecoveryExpr 0x127115368 <col:45> '<dependent type>' contains-errors lvalue
|   | |     |   |-CallExpr 0x127115588 <line:35:5, col:38> 'void *'
|   | |     |   | |-ImplicitCastExpr 0x127115570 <col:5> 'void *(*)(void *, const void *, unsigned long)' <FunctionToPointerDecay>
|   | |     |   | | `-DeclRefExpr 0x1271153d8 <col:5> 'void *(void *, const void *, unsigned long)' Function 0x127114318 'memcpy' 'void *(void *, const void *, unsigned long)'
|   | |     |   | |-ImplicitCastExpr 0x1271155d8 <col:12> 'void *' <BitCast>
|   | |     |   | | `-ImplicitCastExpr 0x1271155c0 <col:12> 'char *' <ArrayToPointerDecay>
|   | |     |   | |   `-DeclRefExpr 0x1271153f8 <col:12> 'char[11]' lvalue Var 0x1271137f0 'callsign' 'char[11]'
|   | |     |   | |-ImplicitCastExpr 0x1271155f0 <col:22, col:26> 'const void *' <BitCast>
|   | |     |   | | `-BinaryOperator 0x127115470 <col:22, col:26> 'unsigned char *' '+'
|   | |     |   | |   |-ImplicitCastExpr 0x127115458 <col:22> 'unsigned char *' <LValueToRValue>
|   | |     |   | |   | `-DeclRefExpr 0x127115418 <col:22> 'unsigned char *' lvalue ParmVar 0x1270fab08 'p' 'unsigned char *'
|   | |     |   | |   `-IntegerLiteral 0x127115438 <col:26> 'int' 12
|   | |     |   | `-ImplicitCastExpr 0x127115608 <col:32, col:36> 'unsigned long' <IntegralCast>
|   | |     |   |   `-BinaryOperator 0x127115500 <col:32, col:36> 'int' '-'
|   | |     |   |     |-ImplicitCastExpr 0x1271154e8 <col:32> 'int' <IntegralCast>
|   | |     |   |     | `-ImplicitCastExpr 0x1271154d0 <col:32> 'unsigned char' <LValueToRValue>
|   | |     |   |     |   `-DeclRefExpr 0x127115490 <col:32> 'unsigned char' lvalue Var 0x1271135f8 'l' 'unsigned char'
|   | |     |   |     `-IntegerLiteral 0x1271154b0 <col:36> 'int' 10
|   | |     |   |-BinaryOperator 0x127115738 <line:36:5, col:24> 'char' '='
|   | |     |   | |-ArraySubscriptExpr 0x1271156e8 <col:5, col:20> 'char' lvalue
|   | |     |   | | |-ImplicitCastExpr 0x1271156d0 <col:5> 'char *' <ArrayToPointerDecay>
|   | |     |   | | | `-DeclRefExpr 0x127115620 <col:5> 'char[11]' lvalue Var 0x1271137f0 'callsign' 'char[11]'
|   | |     |   | | `-BinaryOperator 0x1271156b0 <col:14, col:18> 'int' '-'
|   | |     |   | |   |-ImplicitCastExpr 0x127115698 <col:14> 'int' <IntegralCast>
|   | |     |   | |   | `-ImplicitCastExpr 0x127115680 <col:14> 'unsigned char' <LValueToRValue>
|   | |     |   | |   |   `-DeclRefExpr 0x127115640 <col:14> 'unsigned char' lvalue Var 0x1271135f8 'l' 'unsigned char'
|   | |     |   | |   `-IntegerLiteral 0x127115660 <col:18> 'int' 10
|   | |     |   | `-ImplicitCastExpr 0x127115720 <col:24> 'char' <IntegralCast>
|   | |     |   |   `-CharacterLiteral 0x127115708 <col:24> 'int' 0
|   | |     |   `-CallExpr 0x127115928 <line:37:5, col:46> '<dependent type>' contains-errors
|   | |     |     |-DeclRefExpr 0x127115870 <col:5> 'int ()' Function 0x1271157b8 'asc2ax' 'int ()'
|   | |     |     |-UnaryOperator 0x1271158f0 <col:12, col:25> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | |     |     | `-RecoveryExpr 0x1271158c8 <col:13, col:25> '<dependent type>' contains-errors lvalue
|   | |     |     |   `-DeclRefExpr 0x127115890 <col:13> 'struct rose_facilities_struct *' lvalue ParmVar 0x1270fb0f8 'facilities' 'struct rose_facilities_struct *'
|   | |     |     `-DeclRefExpr 0x127115908 <col:38> 'char[11]' lvalue Var 0x1271137f0 'callsign' 'char[11]'
|   | |     |-IfStmt 0x127116f88 <line:39:4, line:44:4>
|   | |     | |-BinaryOperator 0x127115ab0 <line:39:8, col:14> 'int' contains-errors '=='
|   | |     | | |-UnaryOperator 0x127115a78 <col:8, col:9> 'unsigned char' lvalue prefix '*' cannot overflow
|   | |     | | | `-ImplicitCastExpr 0x127115a60 <col:9> 'unsigned char *' <LValueToRValue>
|   | |     | | |   `-DeclRefExpr 0x1271159a8 <col:9> 'unsigned char *' lvalue ParmVar 0x1270fab08 'p' 'unsigned char *'
|   | |     | | `-RecoveryExpr 0x127115a90 <col:14> '<dependent type>' contains-errors lvalue
|   | |     | `-CompoundStmt 0x127116f58 <col:34, line:44:4>
|   | |     |   |-CallExpr 0x127115cf0 <line:40:5, col:56> '<dependent type>' contains-errors
|   | |     |   | |-DeclRefExpr 0x127115ad0 <col:5> 'void *(void *, const void *, unsigned long)' Function 0x127114318 'memcpy' 'void *(void *, const void *, unsigned long)'
|   | |     |   | |-UnaryOperator 0x127115b50 <col:12, col:25> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | |     |   | | `-RecoveryExpr 0x127115b28 <col:13, col:25> '<dependent type>' contains-errors lvalue
|   | |     |   | |   `-DeclRefExpr 0x127115af0 <col:13> 'struct rose_facilities_struct *' lvalue ParmVar 0x1270fb0f8 'facilities' 'struct rose_facilities_struct *'
|   | |     |   | |-BinaryOperator 0x127115c98 <col:36, col:40> 'unsigned char *' '+'
|   | |     |   | | |-ImplicitCastExpr 0x127115c80 <col:36> 'unsigned char *' <LValueToRValue>
|   | |     |   | | | `-DeclRefExpr 0x127115b68 <col:36> 'unsigned char *' lvalue ParmVar 0x1270fab08 'p' 'unsigned char *'
|   | |     |   | | `-IntegerLiteral 0x127115b88 <col:40> 'int' 7
|   | |     |   | `-RecoveryExpr 0x127115cb8 <col:43> '<dependent type>' contains-errors lvalue
|   | |     |   |-CallExpr 0x127115ea0 <line:41:5, col:36> 'void *'
|   | |     |   | |-ImplicitCastExpr 0x127115e88 <col:5> 'void *(*)(void *, const void *, unsigned long)' <FunctionToPointerDecay>
|   | |     |   | | `-DeclRefExpr 0x127115d28 <col:5> 'void *(void *, const void *, unsigned long)' Function 0x127114318 'memcpy' 'void *(void *, const void *, unsigned long)'
|   | |     |   | |-ImplicitCastExpr 0x127115ef0 <col:12> 'void *' <BitCast>
|   | |     |   | | `-ImplicitCastExpr 0x127115ed8 <col:12> 'char *' <ArrayToPointerDecay>
|   | |     |   | |   `-DeclRefExpr 0x127115d48 <col:12> 'char[11]' lvalue Var 0x1271137f0 'callsign' 'char[11]'
|   | |     |   | |-ImplicitCastExpr 0x127115f08 <col:22, col:26> 'const void *' <BitCast>
|   | |     |   | | `-BinaryOperator 0x127115dc0 <col:22, col:26> 'unsigned char *' '+'
|   | |     |   | |   |-ImplicitCastExpr 0x127115da8 <col:22> 'unsigned char *' <LValueToRValue>
|   | |     |   | |   | `-DeclRefExpr 0x127115d68 <col:22> 'unsigned char *' lvalue ParmVar 0x1270fab08 'p' 'unsigned char *'
|   | |     |   | |   `-IntegerLiteral 0x127115d88 <col:26> 'int' 12
|   | |     |   | `-ImplicitCastExpr 0x127115f20 <col:30, col:34> 'unsigned long' <IntegralCast>
|   | |     |   |   `-BinaryOperator 0x127115e50 <col:30, col:34> 'int' '-'
|   | |     |   |     |-ImplicitCastExpr 0x127115e38 <col:30> 'int' <IntegralCast>
|   | |     |   |     | `-ImplicitCastExpr 0x127115e20 <col:30> 'unsigned char' <LValueToRValue>
|   | |     |   |     |   `-DeclRefExpr 0x127115de0 <col:30> 'unsigned char' lvalue Var 0x1271135f8 'l' 'unsigned char'
|   | |     |   |     `-IntegerLiteral 0x127115e00 <col:34> 'int' 10
|   | |     |   |-BinaryOperator 0x127116e50 <line:42:5, col:24> 'char' '='
|   | |     |   | |-ArraySubscriptExpr 0x127116e00 <col:5, col:20> 'char' lvalue
|   | |     |   | | |-ImplicitCastExpr 0x127115fe8 <col:5> 'char *' <ArrayToPointerDecay>
|   | |     |   | | | `-DeclRefExpr 0x127115f38 <col:5> 'char[11]' lvalue Var 0x1271137f0 'callsign' 'char[11]'
|   | |     |   | | `-BinaryOperator 0x127115fc8 <col:14, col:18> 'int' '-'
|   | |     |   | |   |-ImplicitCastExpr 0x127115fb0 <col:14> 'int' <IntegralCast>
|   | |     |   | |   | `-ImplicitCastExpr 0x127115f98 <col:14> 'unsigned char' <LValueToRValue>
|   | |     |   | |   |   `-DeclRefExpr 0x127115f58 <col:14> 'unsigned char' lvalue Var 0x1271135f8 'l' 'unsigned char'
|   | |     |   | |   `-IntegerLiteral 0x127115f78 <col:18> 'int' 10
|   | |     |   | `-ImplicitCastExpr 0x127116e38 <col:24> 'char' <IntegralCast>
|   | |     |   |   `-CharacterLiteral 0x127116e20 <col:24> 'int' 0
|   | |     |   `-CallExpr 0x127116f28 <line:43:5, col:44> '<dependent type>' contains-errors
|   | |     |     |-DeclRefExpr 0x127116e70 <col:5> 'int ()' Function 0x1271157b8 'asc2ax' 'int ()'
|   | |     |     |-UnaryOperator 0x127116ef0 <col:12, col:25> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | |     |     | `-RecoveryExpr 0x127116ec8 <col:13, col:25> '<dependent type>' contains-errors lvalue
|   | |     |     |   `-DeclRefExpr 0x127116e90 <col:13> 'struct rose_facilities_struct *' lvalue ParmVar 0x1270fb0f8 'facilities' 'struct rose_facilities_struct *'
|   | |     |     `-DeclRefExpr 0x127116f08 <col:36> 'char[11]' lvalue Var 0x1271137f0 'callsign' 'char[11]'
|   | |     |-CompoundAssignOperator 0x127117058 <line:45:4, col:15> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|   | |     | |-DeclRefExpr 0x127116fa8 <col:4> 'unsigned char *' lvalue ParmVar 0x1270fab08 'p' 'unsigned char *'
|   | |     | `-BinaryOperator 0x127117038 <col:11, col:15> 'int' '+'
|   | |     |   |-ImplicitCastExpr 0x127117020 <col:11> 'int' <IntegralCast>
|   | |     |   | `-ImplicitCastExpr 0x127117008 <col:11> 'unsigned char' <LValueToRValue>
|   | |     |   |   `-DeclRefExpr 0x127116fc8 <col:11> 'unsigned char' lvalue Var 0x1271135f8 'l' 'unsigned char'
|   | |     |   `-IntegerLiteral 0x127116fe8 <col:15> 'int' 2
|   | |     |-CompoundAssignOperator 0x127117138 <line:46:4, col:15> 'unsigned char' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |     | |-DeclRefExpr 0x127117088 <col:4> 'unsigned char' lvalue Var 0x127113678 'n' 'unsigned char'
|   | |     | `-BinaryOperator 0x127117118 <col:11, col:15> 'int' '+'
|   | |     |   |-ImplicitCastExpr 0x127117100 <col:11> 'int' <IntegralCast>
|   | |     |   | `-ImplicitCastExpr 0x1271170e8 <col:11> 'unsigned char' <LValueToRValue>
|   | |     |   |   `-DeclRefExpr 0x1271170a8 <col:11> 'unsigned char' lvalue Var 0x1271135f8 'l' 'unsigned char'
|   | |     |   `-IntegerLiteral 0x1271170c8 <col:15> 'int' 2
|   | |     |-CompoundAssignOperator 0x127117218 <line:47:4, col:15> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |     | |-DeclRefExpr 0x127117168 <col:4> 'int' lvalue ParmVar 0x1270fb178 'len' 'int'
|   | |     | `-BinaryOperator 0x1271171f8 <col:11, col:15> 'int' '+'
|   | |     |   |-ImplicitCastExpr 0x1271171e0 <col:11> 'int' <IntegralCast>
|   | |     |   | `-ImplicitCastExpr 0x1271171c8 <col:11> 'unsigned char' <LValueToRValue>
|   | |     |   |   `-DeclRefExpr 0x127117188 <col:11> 'unsigned char' lvalue Var 0x1271135f8 'l' 'unsigned char'
|   | |     |   `-IntegerLiteral 0x1271171a8 <col:15> 'int' 2
|   | |     `-BreakStmt 0x127117248 <line:48:4>
|   | `-BinaryOperator 0x127117450 <line:50:11, col:31> 'int' '&&'
|   |   |-BinaryOperator 0x1271173b8 <col:11, col:17> 'int' '!='
|   |   | |-ImplicitCastExpr 0x1271173a0 <col:11, col:12> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x127117388 <col:11, col:12> 'unsigned char' <LValueToRValue>
|   |   | |   `-UnaryOperator 0x127117350 <col:11, col:12> 'unsigned char' lvalue prefix '*' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x127117338 <col:12> 'unsigned char *' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x127117318 <col:12> 'unsigned char *' lvalue ParmVar 0x1270fab08 'p' 'unsigned char *'
|   |   | `-IntegerLiteral 0x127117368 <col:17> 'int' 0
|   |   `-BinaryOperator 0x127117430 <col:25, col:31> 'int' '>'
|   |     |-ImplicitCastExpr 0x127117418 <col:25> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1271173d8 <col:25> 'int' lvalue ParmVar 0x1270fb178 'len' 'int'
|   |     `-IntegerLiteral 0x1271173f8 <col:31> 'int' 0
|   `-ReturnStmt 0x1271174e0 <line:52:2, col:9>
|     `-ImplicitCastExpr 0x1271174c8 <col:9> 'int' <IntegralCast>
|       `-ImplicitCastExpr 0x1271174b0 <col:9> 'unsigned char' <LValueToRValue>
|         `-DeclRefExpr 0x127117490 <col:9> 'unsigned char' lvalue Var 0x127113678 'n' 'unsigned char'
`-FunctionDecl 0x127114318 <line:34:5> col:5 implicit used memcpy 'void *(void *, const void *, unsigned long)' extern
  |-ParmVarDecl 0x127115030 <<invalid sloc>> <invalid sloc> 'void *'
  |-ParmVarDecl 0x127115098 <<invalid sloc>> <invalid sloc> 'const void *'
  |-ParmVarDecl 0x127115100 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x1271143c0 <<invalid sloc>> Implicit 882
