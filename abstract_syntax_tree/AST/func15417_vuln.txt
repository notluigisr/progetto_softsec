TranslationUnitDecl 0x13d855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x13d8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x13d855bd0 '__int128'
|-TypedefDecl 0x13d856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x13d855bf0 'unsigned __int128'
|-TypedefDecl 0x13d926a30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13d926800 'struct __NSConstantString_tag'
|   `-Record 0x13d856580 '__NSConstantString_tag'
|-TypedefDecl 0x13d926a98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x13d855d90 '__SVInt8_t'
|-TypedefDecl 0x13d926b00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x13d855db0 '__SVInt16_t'
|-TypedefDecl 0x13d926b68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x13d855dd0 '__SVInt32_t'
|-TypedefDecl 0x13d926bd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x13d855df0 '__SVInt64_t'
|-TypedefDecl 0x13d926c38 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x13d855e10 '__SVUint8_t'
|-TypedefDecl 0x13d926ca0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x13d855e30 '__SVUint16_t'
|-TypedefDecl 0x13d926d08 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x13d855e50 '__SVUint32_t'
|-TypedefDecl 0x13d926d70 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x13d855e70 '__SVUint64_t'
|-TypedefDecl 0x13d926dd8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x13d855e90 '__SVFloat16_t'
|-TypedefDecl 0x13d926e40 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x13d855eb0 '__SVFloat32_t'
|-TypedefDecl 0x13d926ea8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x13d855ed0 '__SVFloat64_t'
|-TypedefDecl 0x13d926f10 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x13d855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13d926f78 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x13d855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13d926fe0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x13d855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13d927048 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x13d855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13d9270b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x13d855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13d927118 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x13d855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13d927180 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x13d855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13d9271e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x13d855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13d927250 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x13d855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13d9272b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x13d856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13d927320 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x13d856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13d927388 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x13d856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13d9273f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x13d856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13d927458 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x13d856090 '__clang_svint8x3_t'
|-TypedefDecl 0x13d9274c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x13d8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13d927528 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x13d8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13d927590 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x13d8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13d9275f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x13d856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13d927660 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x13d856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13d9276c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x13d856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13d927730 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x13d856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13d927798 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x13d856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13d928000 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x13d8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13d928068 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x13d8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13d9280d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x13d8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13d928138 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x13d856210 '__clang_svint8x4_t'
|-TypedefDecl 0x13d9281a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x13d856230 '__clang_svint16x4_t'
|-TypedefDecl 0x13d928208 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x13d856250 '__clang_svint32x4_t'
|-TypedefDecl 0x13d928270 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x13d856270 '__clang_svint64x4_t'
|-TypedefDecl 0x13d9282d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x13d856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13d928340 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x13d8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13d9283a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x13d8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13d928410 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x13d8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13d928478 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x13d856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13d9284e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x13d856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13d928548 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x13d856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13d9285b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x13d856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13d928618 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x13d856390 '__SVBool_t'
|-TypedefDecl 0x13d928680 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x13d8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13d9286e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x13d8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13d928750 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x13d8563f0 '__SVCount_t'
|-TypedefDecl 0x13d9287f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13d9287b0 'char *'
|   `-BuiltinType 0x13d8556b0 'char'
|-TypedefDecl 0x13d928868 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13d9287b0 'char *'
|   `-BuiltinType 0x13d8556b0 'char'
`-FunctionDecl 0x13d928b18 <dataset_diviso_filec/func15417_vuln.c:1:1, line:59:1> line:1:18 invalid firebird_handle_doer 'int (int *, const char *, int)' static
  |-ParmVarDecl 0x13d928928 <col:39, col:50> col:50 invalid dbh 'int *'
  |-ParmVarDecl 0x13d9289a8 <col:55, col:67> col:67 used sql 'const char *'
  |-ParmVarDecl 0x13d928a28 <col:72, col:79> col:79 invalid sql_len 'int'
  `-CompoundStmt 0x13d944748 <line:2:1, line:59:1>
    |-DeclStmt 0x13d928d10 <line:5:2, col:59>
    | `-VarDecl 0x13d928c90 <col:2, col:31> col:20 used info_count 'const char[]' static
    |-DeclStmt 0x13d928e38 <line:6:2, col:17>
    | `-VarDecl 0x13d928dd0 <col:2, col:16> col:7 used result 'char[64]'
    |-DeclStmt 0x13d928ef0 <line:7:2, col:13>
    | `-VarDecl 0x13d928e68 <col:2, col:12> col:6 used ret 'int' cinit
    |   `-IntegerLiteral 0x13d928ed0 <col:12> 'int' 0
    |-IfStmt 0x13d942a60 <line:16:2, line:18:2>
    | |-UnaryOperator 0x13d9429e8 <line:16:6, col:74> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-CallExpr 0x13d942998 <col:7, col:74> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x13d9427c0 <col:7> 'int ()' Function 0x13d942708 'firebird_alloc_prepare_stmt' 'int ()'
    | |   |-RecoveryExpr 0x13d9427e0 <col:35> '<dependent type>' contains-errors lvalue
    | |   |-DeclRefExpr 0x13d942800 <col:40> 'const char *' lvalue ParmVar 0x13d9289a8 'sql' 'const char *'
    | |   |-RecoveryExpr 0x13d942820 <col:45> '<dependent type>' contains-errors lvalue
    | |   |-UnaryOperator 0x13d942948 <col:54, col:55> '<dependent type>' contains-errors prefix '&' cannot overflow
    | |   | `-RecoveryExpr 0x13d942928 <col:55> '<dependent type>' contains-errors lvalue
    | |   |-UnaryOperator 0x13d942980 <col:66, col:67> '<dependent type>' contains-errors prefix '&' cannot overflow
    | |   | `-RecoveryExpr 0x13d942960 <col:67> '<dependent type>' contains-errors lvalue
    | |   `-IntegerLiteral 0x13d9428a0 <col:73> 'int' 0
    | `-CompoundStmt 0x13d942a48 <col:77, line:18:2>
    |   `-ReturnStmt 0x13d942a38 <line:17:3, col:11>
    |     `-UnaryOperator 0x13d942a20 <col:10, col:11> 'int' prefix '-'
    |       `-IntegerLiteral 0x13d942a00 <col:11> 'int' 1
    |-IfStmt 0x13d942df0 <line:21:2, line:25:2>
    | |-RecoveryExpr 0x13d942b80 <line:21:6, col:97> '_Bool' contains-errors
    | `-CompoundStmt 0x13d942dc8 <col:100, line:25:2>
    |   |-CallExpr 0x13d942cc0 <line:22:3, col:19> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x13d942c80 <col:3> 'int ()' Function 0x13d942bc8 'RECORD_ERROR' 'int ()'
    |   | `-RecoveryExpr 0x13d942ca0 <col:16> '<dependent type>' contains-errors lvalue
    |   |-BinaryOperator 0x13d942d40 <line:23:3, col:10> 'int' '='
    |   | |-DeclRefExpr 0x13d942ce8 <col:3> 'int' lvalue Var 0x13d928e68 'ret' 'int'
    |   | `-UnaryOperator 0x13d942d28 <col:9, col:10> 'int' prefix '-'
    |   |   `-IntegerLiteral 0x13d942d08 <col:10> 'int' 1
    |   `-GotoStmt 0x13d942db0 <line:24:3, col:8> 'free_statement' 0x13d942d60
    |-IfStmt 0x13d9432b8 <line:28:2, line:33:2>
    | |-RecoveryExpr 0x13d943178 <line:28:6, line:29:26> '_Bool' contains-errors
    | `-CompoundStmt 0x13d943290 <col:29, line:33:2>
    |   |-CallExpr 0x13d9431d8 <line:30:3, col:19> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x13d943198 <col:3> 'int ()' Function 0x13d942bc8 'RECORD_ERROR' 'int ()'
    |   | `-RecoveryExpr 0x13d9431b8 <col:16> '<dependent type>' contains-errors lvalue
    |   |-BinaryOperator 0x13d943258 <line:31:3, col:10> 'int' '='
    |   | |-DeclRefExpr 0x13d943200 <col:3> 'int' lvalue Var 0x13d928e68 'ret' 'int'
    |   | `-UnaryOperator 0x13d943240 <col:9, col:10> 'int' prefix '-'
    |   |   `-IntegerLiteral 0x13d943220 <col:10> 'int' 1
    |   `-GotoStmt 0x13d943278 <line:32:3, col:8> 'free_statement' 0x13d942d60
    |-IfStmt 0x13d9442d8 <line:35:2, line:45:2>
    | |-RecoveryExpr 0x13d943350 <line:35:6, col:19> '_Bool' contains-errors
    | `-CompoundStmt 0x13d9442b8 <col:41, line:45:2>
    |   |-DeclStmt 0x13d943ad0 <line:36:3, col:62>
    |   | |-VarDecl 0x13d943388 <col:3, col:16> col:12 used i 'unsigned int' cinit
    |   | | `-ImplicitCastExpr 0x13d943410 <col:16> 'unsigned int' <IntegralCast>
    |   | |   `-IntegerLiteral 0x13d9433f0 <col:16> 'int' 3
    |   | `-VarDecl 0x13d943440 <col:3, col:61> col:19 used result_size 'unsigned int' cinit
    |   |   `-ImplicitCastExpr 0x13d943aa0 <col:33, col:61> 'unsigned int' <IntegralCast>
    |   |     `-CallExpr 0x13d943a70 <col:33, col:61> 'int'
    |   |       |-ImplicitCastExpr 0x13d943a58 <col:33> 'int (*)()' <FunctionToPointerDecay>
    |   |       | `-DeclRefExpr 0x13d943588 <col:33> 'int ()' Function 0x13d9434d0 'isc_vax_integer' 'int ()'
    |   |       |-UnaryOperator 0x13d943a20 <col:49, col:58> 'char *' prefix '&' cannot overflow
    |   |       | `-ArraySubscriptExpr 0x13d943a00 <col:50, col:58> 'char' lvalue
    |   |       |   |-ImplicitCastExpr 0x13d9435e8 <col:50> 'char *' <ArrayToPointerDecay>
    |   |       |   | `-DeclRefExpr 0x13d9435a8 <col:50> 'char[64]' lvalue Var 0x13d928dd0 'result' 'char[64]'
    |   |       |   `-IntegerLiteral 0x13d9435c8 <col:57> 'int' 1
    |   |       `-IntegerLiteral 0x13d943a38 <col:60> 'int' 2
    |   `-WhileStmt 0x13d944298 <line:38:3, line:44:3>
    |     |-RecoveryExpr 0x13d943c08 <line:38:10, col:43> '_Bool' contains-errors
    |     `-CompoundStmt 0x13d944270 <col:56, line:44:3>
    |       |-DeclStmt 0x13d943e70 <line:39:4, col:54>
    |       | `-VarDecl 0x13d943c40 <col:4, col:53> col:10 used len 'short' cinit
    |       |   `-CStyleCastExpr 0x13d943e48 <col:16, col:53> 'short' <IntegralCast>
    |       |     `-CallExpr 0x13d943e00 <col:23, col:53> 'int'
    |       |       |-ImplicitCastExpr 0x13d943de8 <col:23> 'int (*)()' <FunctionToPointerDecay>
    |       |       | `-DeclRefExpr 0x13d943ca8 <col:23> 'int ()' Function 0x13d9434d0 'isc_vax_integer' 'int ()'
    |       |       |-UnaryOperator 0x13d943db0 <col:39, col:50> 'char *' prefix '&' cannot overflow
    |       |       | `-ArraySubscriptExpr 0x13d943d90 <col:40, col:50> 'char' lvalue
    |       |       |   |-ImplicitCastExpr 0x13d943d78 <col:40> 'char *' <ArrayToPointerDecay>
    |       |       |   | `-DeclRefExpr 0x13d943cc8 <col:40> 'char[64]' lvalue Var 0x13d928dd0 'result' 'char[64]'
    |       |       |   `-BinaryOperator 0x13d943d58 <col:47, col:49> 'unsigned int' '+'
    |       |       |     |-ImplicitCastExpr 0x13d943d28 <col:47> 'unsigned int' <LValueToRValue>
    |       |       |     | `-DeclRefExpr 0x13d943ce8 <col:47> 'unsigned int' lvalue Var 0x13d943388 'i' 'unsigned int'
    |       |       |     `-ImplicitCastExpr 0x13d943d40 <col:49> 'unsigned int' <IntegralCast>
    |       |       |       `-IntegerLiteral 0x13d943d08 <col:49> 'int' 1
    |       |       `-IntegerLiteral 0x13d943dc8 <col:52> 'int' 2
    |       |-IfStmt 0x13d944158 <line:40:4, line:42:4>
    |       | |-RecoveryExpr 0x13d943f18 <line:40:8, col:21> '_Bool' contains-errors
    |       | `-CompoundStmt 0x13d944140 <col:48, line:42:4>
    |       |   `-CompoundAssignOperator 0x13d944110 <line:41:5, col:44> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |       |     |-DeclRefExpr 0x13d943f38 <col:5> 'int' lvalue Var 0x13d928e68 'ret' 'int'
    |       |     `-CallExpr 0x13d9440b0 <col:12, col:44> 'int'
    |       |       |-ImplicitCastExpr 0x13d944098 <col:12> 'int (*)()' <FunctionToPointerDecay>
    |       |       | `-DeclRefExpr 0x13d943f58 <col:12> 'int ()' Function 0x13d9434d0 'isc_vax_integer' 'int ()'
    |       |       |-UnaryOperator 0x13d944060 <col:28, col:39> 'char *' prefix '&' cannot overflow
    |       |       | `-ArraySubscriptExpr 0x13d944040 <col:29, col:39> 'char' lvalue
    |       |       |   |-ImplicitCastExpr 0x13d944028 <col:29> 'char *' <ArrayToPointerDecay>
    |       |       |   | `-DeclRefExpr 0x13d943f78 <col:29> 'char[64]' lvalue Var 0x13d928dd0 'result' 'char[64]'
    |       |       |   `-BinaryOperator 0x13d944008 <col:36, col:38> 'unsigned int' '+'
    |       |       |     |-ImplicitCastExpr 0x13d943fd8 <col:36> 'unsigned int' <LValueToRValue>
    |       |       |     | `-DeclRefExpr 0x13d943f98 <col:36> 'unsigned int' lvalue Var 0x13d943388 'i' 'unsigned int'
    |       |       |     `-ImplicitCastExpr 0x13d943ff0 <col:38> 'unsigned int' <IntegralCast>
    |       |       |       `-IntegerLiteral 0x13d943fb8 <col:38> 'int' 3
    |       |       `-ImplicitCastExpr 0x13d9440f8 <col:41> 'int' <IntegralCast>
    |       |         `-ImplicitCastExpr 0x13d9440e0 <col:41> 'short' <LValueToRValue>
    |       |           `-DeclRefExpr 0x13d944078 <col:41> 'short' lvalue Var 0x13d943c40 'len' 'short'
    |       `-CompoundAssignOperator 0x13d944240 <line:43:4, col:13> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    |         |-DeclRefExpr 0x13d944178 <col:4> 'unsigned int' lvalue Var 0x13d943388 'i' 'unsigned int'
    |         `-ImplicitCastExpr 0x13d944228 <col:9, col:13> 'unsigned int' <IntegralCast>
    |           `-BinaryOperator 0x13d944208 <col:9, col:13> 'int' '+'
    |             |-ImplicitCastExpr 0x13d9441f0 <col:9> 'int' <IntegralCast>
    |             | `-ImplicitCastExpr 0x13d9441d8 <col:9> 'short' <LValueToRValue>
    |             |   `-DeclRefExpr 0x13d944198 <col:9> 'short' lvalue Var 0x13d943c40 'len' 'short'
    |             `-IntegerLiteral 0x13d9441b8 <col:13> 'int' 3
    |-IfStmt 0x13d944500 <line:48:2, line:50:2>
    | |-RecoveryExpr 0x13d944460 <line:48:6, col:68> '_Bool' contains-errors
    | `-CompoundStmt 0x13d9444e8 <col:71, line:50:2>
    |   `-CallExpr 0x13d9444c0 <line:49:3, col:19> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x13d944480 <col:3> 'int ()' Function 0x13d942bc8 'RECORD_ERROR' 'int ()'
    |     `-RecoveryExpr 0x13d9444a0 <col:16> '<dependent type>' contains-errors lvalue
    |-LabelStmt 0x13d9446e0 <line:52:1, line:56:2> 'free_statement'
    | `-IfStmt 0x13d9446c0 <line:54:2, line:56:2>
    |   |-RecoveryExpr 0x13d944620 <line:54:6, col:61> '_Bool' contains-errors
    |   `-CompoundStmt 0x13d9446a8 <col:64, line:56:2>
    |     `-CallExpr 0x13d944680 <line:55:3, col:19> '<dependent type>' contains-errors
    |       |-DeclRefExpr 0x13d944640 <col:3> 'int ()' Function 0x13d942bc8 'RECORD_ERROR' 'int ()'
    |       `-RecoveryExpr 0x13d944660 <col:16> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x13d944738 <line:58:2, col:9>
      `-ImplicitCastExpr 0x13d944720 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x13d944700 <col:9> 'int' lvalue Var 0x13d928e68 'ret' 'int'
