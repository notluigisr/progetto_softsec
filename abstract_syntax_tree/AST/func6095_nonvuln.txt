TranslationUnitDecl 0x13a055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x13a0564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x13a055bd0 '__int128'
|-TypedefDecl 0x13a056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x13a055bf0 'unsigned __int128'
|-TypedefDecl 0x13a126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13a126000 'struct __NSConstantString_tag'
|   `-Record 0x13a056580 '__NSConstantString_tag'
|-TypedefDecl 0x13a126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x13a055d90 '__SVInt8_t'
|-TypedefDecl 0x13a126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x13a055db0 '__SVInt16_t'
|-TypedefDecl 0x13a126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x13a055dd0 '__SVInt32_t'
|-TypedefDecl 0x13a1263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x13a055df0 '__SVInt64_t'
|-TypedefDecl 0x13a126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x13a055e10 '__SVUint8_t'
|-TypedefDecl 0x13a1264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x13a055e30 '__SVUint16_t'
|-TypedefDecl 0x13a126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x13a055e50 '__SVUint32_t'
|-TypedefDecl 0x13a126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x13a055e70 '__SVUint64_t'
|-TypedefDecl 0x13a1265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x13a055e90 '__SVFloat16_t'
|-TypedefDecl 0x13a126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x13a055eb0 '__SVFloat32_t'
|-TypedefDecl 0x13a1266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x13a055ed0 '__SVFloat64_t'
|-TypedefDecl 0x13a126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x13a055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13a126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x13a055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13a1267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x13a055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13a126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x13a055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13a1268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x13a055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13a126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x13a055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13a126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x13a055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13a1269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x13a055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13a126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x13a055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13a126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x13a056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13a126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x13a056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13a126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x13a056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13a126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x13a056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13a126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x13a056090 '__clang_svint8x3_t'
|-TypedefDecl 0x13a126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x13a0560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13a126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x13a0560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13a126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x13a0560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13a126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x13a056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13a126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x13a056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13a126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x13a056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13a126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x13a056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13a126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x13a056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13a127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x13a0561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13a127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x13a0561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13a1278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x13a0561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13a127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x13a056210 '__clang_svint8x4_t'
|-TypedefDecl 0x13a1279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x13a056230 '__clang_svint16x4_t'
|-TypedefDecl 0x13a127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x13a056250 '__clang_svint32x4_t'
|-TypedefDecl 0x13a127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x13a056270 '__clang_svint64x4_t'
|-TypedefDecl 0x13a127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x13a056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13a127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x13a0562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13a127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x13a0562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13a127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x13a0562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13a127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x13a056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13a127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x13a056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13a127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x13a056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13a127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x13a056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13a127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x13a056390 '__SVBool_t'
|-TypedefDecl 0x13a127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x13a0563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13a127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x13a0563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13a127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x13a0563f0 '__SVCount_t'
|-TypedefDecl 0x13a127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13a127fb0 'char *'
|   `-BuiltinType 0x13a0556b0 'char'
|-TypedefDecl 0x13a128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13a127fb0 'char *'
|   `-BuiltinType 0x13a0556b0 'char'
`-FunctionDecl 0x13a128530 <dataset_diviso_filec/func6095_nonvuln.c:1:1, line:30:1> line:1:13 setSat 'void (unsigned char, unsigned char, unsigned char, int, unsigned char *, unsigned char *, unsigned char *)' static
  |-ParmVarDecl 0x13a1280d8 <col:20, col:34> col:34 used rIn 'unsigned char'
  |-ParmVarDecl 0x13a128158 <col:39, col:53> col:53 used gIn 'unsigned char'
  |-ParmVarDecl 0x13a1281d8 <col:58, col:72> col:72 used bIn 'unsigned char'
  |-ParmVarDecl 0x13a128258 <col:77, col:81> col:81 used sat 'int'
  |-ParmVarDecl 0x13a128308 <line:2:6, col:21> col:21 used rOut 'unsigned char *'
  |-ParmVarDecl 0x13a128388 <col:27, col:42> col:42 used gOut 'unsigned char *'
  |-ParmVarDecl 0x13a128408 <col:48, col:63> col:63 used bOut 'unsigned char *'
  `-CompoundStmt 0x13a142008 <col:69, line:30:1>
    |-DeclStmt 0x13a140a00 <line:3:3, col:29>
    | |-VarDecl 0x13a128670 <col:3, col:7> col:7 used rgbMin 'int'
    | |-VarDecl 0x13a1286f0 <col:3, col:15> col:15 used rgbMid 'int'
    | `-VarDecl 0x13a128770 <col:3, col:23> col:23 used rgbMax 'int'
    |-DeclStmt 0x13a140bb8 <line:4:3, col:42>
    | |-VarDecl 0x13a140a30 <col:3, col:18> col:18 used minOut 'unsigned char *'
    | |-VarDecl 0x13a140ab0 <col:3, col:27> col:27 used midOut 'unsigned char *'
    | `-VarDecl 0x13a140b30 <col:3, col:36> col:36 used maxOut 'unsigned char *'
    |-IfStmt 0x13a141110 <line:6:3, line:12:3> has_else
    | |-BinaryOperator 0x13a140c70 <line:6:7, col:13> 'int' '<'
    | | |-ImplicitCastExpr 0x13a140c40 <col:7> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x13a140c10 <col:7> 'unsigned char' <LValueToRValue>
    | | |   `-DeclRefExpr 0x13a140bd0 <col:7> 'unsigned char' lvalue ParmVar 0x13a1280d8 'rIn' 'unsigned char'
    | | `-ImplicitCastExpr 0x13a140c58 <col:13> 'int' <IntegralCast>
    | |   `-ImplicitCastExpr 0x13a140c28 <col:13> 'unsigned char' <LValueToRValue>
    | |     `-DeclRefExpr 0x13a140bf0 <col:13> 'unsigned char' lvalue ParmVar 0x13a128158 'gIn' 'unsigned char'
    | |-CompoundStmt 0x13a140ea0 <col:18, line:9:3>
    | | |-BinaryOperator 0x13a140d00 <line:7:5, col:14> 'int' '='
    | | | |-DeclRefExpr 0x13a140c90 <col:5> 'int' lvalue Var 0x13a128670 'rgbMin' 'int'
    | | | `-ImplicitCastExpr 0x13a140ce8 <col:14> 'int' <IntegralCast>
    | | |   `-ImplicitCastExpr 0x13a140cd0 <col:14> 'unsigned char' <LValueToRValue>
    | | |     `-DeclRefExpr 0x13a140cb0 <col:14> 'unsigned char' lvalue ParmVar 0x13a1280d8 'rIn' 'unsigned char'
    | | |-BinaryOperator 0x13a140d78 <col:20, col:29> 'unsigned char *' '='
    | | | |-DeclRefExpr 0x13a140d20 <col:20> 'unsigned char *' lvalue Var 0x13a140a30 'minOut' 'unsigned char *'
    | | | `-ImplicitCastExpr 0x13a140d60 <col:29> 'unsigned char *' <LValueToRValue>
    | | |   `-DeclRefExpr 0x13a140d40 <col:29> 'unsigned char *' lvalue ParmVar 0x13a128308 'rOut' 'unsigned char *'
    | | |-BinaryOperator 0x13a140e08 <line:8:5, col:14> 'int' '='
    | | | |-DeclRefExpr 0x13a140d98 <col:5> 'int' lvalue Var 0x13a1286f0 'rgbMid' 'int'
    | | | `-ImplicitCastExpr 0x13a140df0 <col:14> 'int' <IntegralCast>
    | | |   `-ImplicitCastExpr 0x13a140dd8 <col:14> 'unsigned char' <LValueToRValue>
    | | |     `-DeclRefExpr 0x13a140db8 <col:14> 'unsigned char' lvalue ParmVar 0x13a128158 'gIn' 'unsigned char'
    | | `-BinaryOperator 0x13a140e80 <col:20, col:29> 'unsigned char *' '='
    | |   |-DeclRefExpr 0x13a140e28 <col:20> 'unsigned char *' lvalue Var 0x13a140ab0 'midOut' 'unsigned char *'
    | |   `-ImplicitCastExpr 0x13a140e68 <col:29> 'unsigned char *' <LValueToRValue>
    | |     `-DeclRefExpr 0x13a140e48 <col:29> 'unsigned char *' lvalue ParmVar 0x13a128388 'gOut' 'unsigned char *'
    | `-CompoundStmt 0x13a1410e0 <line:9:10, line:12:3>
    |   |-BinaryOperator 0x13a140f40 <line:10:5, col:14> 'int' '='
    |   | |-DeclRefExpr 0x13a140ed0 <col:5> 'int' lvalue Var 0x13a128670 'rgbMin' 'int'
    |   | `-ImplicitCastExpr 0x13a140f28 <col:14> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x13a140f10 <col:14> 'unsigned char' <LValueToRValue>
    |   |     `-DeclRefExpr 0x13a140ef0 <col:14> 'unsigned char' lvalue ParmVar 0x13a128158 'gIn' 'unsigned char'
    |   |-BinaryOperator 0x13a140fb8 <col:20, col:29> 'unsigned char *' '='
    |   | |-DeclRefExpr 0x13a140f60 <col:20> 'unsigned char *' lvalue Var 0x13a140a30 'minOut' 'unsigned char *'
    |   | `-ImplicitCastExpr 0x13a140fa0 <col:29> 'unsigned char *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x13a140f80 <col:29> 'unsigned char *' lvalue ParmVar 0x13a128388 'gOut' 'unsigned char *'
    |   |-BinaryOperator 0x13a141048 <line:11:5, col:14> 'int' '='
    |   | |-DeclRefExpr 0x13a140fd8 <col:5> 'int' lvalue Var 0x13a1286f0 'rgbMid' 'int'
    |   | `-ImplicitCastExpr 0x13a141030 <col:14> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x13a141018 <col:14> 'unsigned char' <LValueToRValue>
    |   |     `-DeclRefExpr 0x13a140ff8 <col:14> 'unsigned char' lvalue ParmVar 0x13a1280d8 'rIn' 'unsigned char'
    |   `-BinaryOperator 0x13a1410c0 <col:20, col:29> 'unsigned char *' '='
    |     |-DeclRefExpr 0x13a141068 <col:20> 'unsigned char *' lvalue Var 0x13a140ab0 'midOut' 'unsigned char *'
    |     `-ImplicitCastExpr 0x13a1410a8 <col:29> 'unsigned char *' <LValueToRValue>
    |       `-DeclRefExpr 0x13a141088 <col:29> 'unsigned char *' lvalue ParmVar 0x13a128308 'rOut' 'unsigned char *'
    |-IfStmt 0x13a141938 <line:13:3, line:22:3> has_else
    | |-BinaryOperator 0x13a1411c8 <line:13:7, col:13> 'int' '>'
    | | |-ImplicitCastExpr 0x13a1411b0 <col:7> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x13a141180 <col:7> 'unsigned char' <LValueToRValue>
    | | |   `-DeclRefExpr 0x13a141140 <col:7> 'unsigned char' lvalue ParmVar 0x13a1281d8 'bIn' 'unsigned char'
    | | `-ImplicitCastExpr 0x13a141198 <col:13> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x13a141160 <col:13> 'int' lvalue Var 0x13a1286f0 'rgbMid' 'int'
    | |-CompoundStmt 0x13a1412f0 <col:21, line:15:3>
    | | |-BinaryOperator 0x13a141258 <line:14:5, col:14> 'int' '='
    | | | |-DeclRefExpr 0x13a1411e8 <col:5> 'int' lvalue Var 0x13a128770 'rgbMax' 'int'
    | | | `-ImplicitCastExpr 0x13a141240 <col:14> 'int' <IntegralCast>
    | | |   `-ImplicitCastExpr 0x13a141228 <col:14> 'unsigned char' <LValueToRValue>
    | | |     `-DeclRefExpr 0x13a141208 <col:14> 'unsigned char' lvalue ParmVar 0x13a1281d8 'bIn' 'unsigned char'
    | | `-BinaryOperator 0x13a1412d0 <col:20, col:29> 'unsigned char *' '='
    | |   |-DeclRefExpr 0x13a141278 <col:20> 'unsigned char *' lvalue Var 0x13a140b30 'maxOut' 'unsigned char *'
    | |   `-ImplicitCastExpr 0x13a1412b8 <col:29> 'unsigned char *' <LValueToRValue>
    | |     `-DeclRefExpr 0x13a141298 <col:29> 'unsigned char *' lvalue ParmVar 0x13a128408 'bOut' 'unsigned char *'
    | `-IfStmt 0x13a141908 <line:15:10, line:22:3> has_else
    |   |-BinaryOperator 0x13a141398 <line:15:14, col:20> 'int' '>'
    |   | |-ImplicitCastExpr 0x13a141380 <col:14> 'int' <IntegralCast>
    |   | | `-ImplicitCastExpr 0x13a141350 <col:14> 'unsigned char' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x13a141310 <col:14> 'unsigned char' lvalue ParmVar 0x13a1281d8 'bIn' 'unsigned char'
    |   | `-ImplicitCastExpr 0x13a141368 <col:20> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x13a141330 <col:20> 'int' lvalue Var 0x13a128670 'rgbMin' 'int'
    |   |-CompoundStmt 0x13a1415b0 <col:28, line:18:3>
    |   | |-BinaryOperator 0x13a141410 <line:16:5, col:14> 'int' '='
    |   | | |-DeclRefExpr 0x13a1413b8 <col:5> 'int' lvalue Var 0x13a128770 'rgbMax' 'int'
    |   | | `-ImplicitCastExpr 0x13a1413f8 <col:14> 'int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x13a1413d8 <col:14> 'int' lvalue Var 0x13a1286f0 'rgbMid' 'int'
    |   | |-BinaryOperator 0x13a141488 <col:23, col:32> 'unsigned char *' '='
    |   | | |-DeclRefExpr 0x13a141430 <col:23> 'unsigned char *' lvalue Var 0x13a140b30 'maxOut' 'unsigned char *'
    |   | | `-ImplicitCastExpr 0x13a141470 <col:32> 'unsigned char *' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x13a141450 <col:32> 'unsigned char *' lvalue Var 0x13a140ab0 'midOut' 'unsigned char *'
    |   | |-BinaryOperator 0x13a141518 <line:17:5, col:14> 'int' '='
    |   | | |-DeclRefExpr 0x13a1414a8 <col:5> 'int' lvalue Var 0x13a1286f0 'rgbMid' 'int'
    |   | | `-ImplicitCastExpr 0x13a141500 <col:14> 'int' <IntegralCast>
    |   | |   `-ImplicitCastExpr 0x13a1414e8 <col:14> 'unsigned char' <LValueToRValue>
    |   | |     `-DeclRefExpr 0x13a1414c8 <col:14> 'unsigned char' lvalue ParmVar 0x13a1281d8 'bIn' 'unsigned char'
    |   | `-BinaryOperator 0x13a141590 <col:23, col:32> 'unsigned char *' '='
    |   |   |-DeclRefExpr 0x13a141538 <col:23> 'unsigned char *' lvalue Var 0x13a140ab0 'midOut' 'unsigned char *'
    |   |   `-ImplicitCastExpr 0x13a141578 <col:32> 'unsigned char *' <LValueToRValue>
    |   |     `-DeclRefExpr 0x13a141558 <col:32> 'unsigned char *' lvalue ParmVar 0x13a128408 'bOut' 'unsigned char *'
    |   `-CompoundStmt 0x13a1418c8 <line:18:10, line:22:3>
    |     |-BinaryOperator 0x13a141638 <line:19:5, col:14> 'int' '='
    |     | |-DeclRefExpr 0x13a1415e0 <col:5> 'int' lvalue Var 0x13a128770 'rgbMax' 'int'
    |     | `-ImplicitCastExpr 0x13a141620 <col:14> 'int' <LValueToRValue>
    |     |   `-DeclRefExpr 0x13a141600 <col:14> 'int' lvalue Var 0x13a1286f0 'rgbMid' 'int'
    |     |-BinaryOperator 0x13a1416b0 <col:23, col:32> 'unsigned char *' '='
    |     | |-DeclRefExpr 0x13a141658 <col:23> 'unsigned char *' lvalue Var 0x13a140b30 'maxOut' 'unsigned char *'
    |     | `-ImplicitCastExpr 0x13a141698 <col:32> 'unsigned char *' <LValueToRValue>
    |     |   `-DeclRefExpr 0x13a141678 <col:32> 'unsigned char *' lvalue Var 0x13a140ab0 'midOut' 'unsigned char *'
    |     |-BinaryOperator 0x13a141728 <line:20:5, col:14> 'int' '='
    |     | |-DeclRefExpr 0x13a1416d0 <col:5> 'int' lvalue Var 0x13a1286f0 'rgbMid' 'int'
    |     | `-ImplicitCastExpr 0x13a141710 <col:14> 'int' <LValueToRValue>
    |     |   `-DeclRefExpr 0x13a1416f0 <col:14> 'int' lvalue Var 0x13a128670 'rgbMin' 'int'
    |     |-BinaryOperator 0x13a1417a0 <col:23, col:32> 'unsigned char *' '='
    |     | |-DeclRefExpr 0x13a141748 <col:23> 'unsigned char *' lvalue Var 0x13a140ab0 'midOut' 'unsigned char *'
    |     | `-ImplicitCastExpr 0x13a141788 <col:32> 'unsigned char *' <LValueToRValue>
    |     |   `-DeclRefExpr 0x13a141768 <col:32> 'unsigned char *' lvalue Var 0x13a140a30 'minOut' 'unsigned char *'
    |     |-BinaryOperator 0x13a141830 <line:21:5, col:14> 'int' '='
    |     | |-DeclRefExpr 0x13a1417c0 <col:5> 'int' lvalue Var 0x13a128670 'rgbMin' 'int'
    |     | `-ImplicitCastExpr 0x13a141818 <col:14> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x13a141800 <col:14> 'unsigned char' <LValueToRValue>
    |     |     `-DeclRefExpr 0x13a1417e0 <col:14> 'unsigned char' lvalue ParmVar 0x13a1281d8 'bIn' 'unsigned char'
    |     `-BinaryOperator 0x13a1418a8 <col:23, col:32> 'unsigned char *' '='
    |       |-DeclRefExpr 0x13a141850 <col:23> 'unsigned char *' lvalue Var 0x13a140a30 'minOut' 'unsigned char *'
    |       `-ImplicitCastExpr 0x13a141890 <col:32> 'unsigned char *' <LValueToRValue>
    |         `-DeclRefExpr 0x13a141870 <col:32> 'unsigned char *' lvalue ParmVar 0x13a128408 'bOut' 'unsigned char *'
    |-IfStmt 0x13a141f30 <line:23:3, line:28:3> has_else
    | |-BinaryOperator 0x13a1419d8 <line:23:7, col:16> 'int' '>'
    | | |-ImplicitCastExpr 0x13a1419a8 <col:7> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x13a141968 <col:7> 'int' lvalue Var 0x13a128770 'rgbMax' 'int'
    | | `-ImplicitCastExpr 0x13a1419c0 <col:16> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x13a141988 <col:16> 'int' lvalue Var 0x13a128670 'rgbMin' 'int'
    | |-CompoundStmt 0x13a141de0 <col:24, line:26:3>
    | | |-BinaryOperator 0x13a141cd8 <line:24:5, col:74> 'unsigned char' '='
    | | | |-UnaryOperator 0x13a141a38 <col:5, col:6> 'unsigned char' lvalue prefix '*' cannot overflow
    | | | | `-ImplicitCastExpr 0x13a141a20 <col:6> 'unsigned char *' <LValueToRValue>
    | | | |   `-DeclRefExpr 0x13a141a00 <col:6> 'unsigned char *' lvalue Var 0x13a140ab0 'midOut' 'unsigned char *'
    | | | `-ImplicitCastExpr 0x13a141cc0 <col:15, col:74> 'unsigned char' <IntegralCast>
    | | |   `-BinaryOperator 0x13a141ca0 <col:15, col:74> 'int' '/'
    | | |     |-ImplicitCastExpr 0x13a141c88 <col:15, col:54> 'int' <IntegralCast>
    | | |     | `-CStyleCastExpr 0x13a141bb0 <col:15, col:54> 'unsigned char' <IntegralCast>
    | | |     |   `-ParenExpr 0x13a141b90 <col:30, col:54> 'int'
    | | |     |     `-BinaryOperator 0x13a141b38 <col:31, col:51> 'int' '*'
    | | |     |       |-ParenExpr 0x13a141ae0 <col:31, col:47> 'int'
    | | |     |       | `-BinaryOperator 0x13a141ac0 <col:32, col:41> 'int' '-'
    | | |     |       |   |-ImplicitCastExpr 0x13a141a90 <col:32> 'int' <LValueToRValue>
    | | |     |       |   | `-DeclRefExpr 0x13a141a50 <col:32> 'int' lvalue Var 0x13a1286f0 'rgbMid' 'int'
    | | |     |       |   `-ImplicitCastExpr 0x13a141aa8 <col:41> 'int' <LValueToRValue>
    | | |     |       |     `-DeclRefExpr 0x13a141a70 <col:41> 'int' lvalue Var 0x13a128670 'rgbMin' 'int'
    | | |     |       `-ImplicitCastExpr 0x13a141b20 <col:51> 'int' <LValueToRValue>
    | | |     |         `-DeclRefExpr 0x13a141b00 <col:51> 'int' lvalue ParmVar 0x13a128258 'sat' 'int'
    | | |     `-ParenExpr 0x13a141c68 <col:58, col:74> 'int'
    | | |       `-BinaryOperator 0x13a141c48 <col:59, col:68> 'int' '-'
    | | |         |-ImplicitCastExpr 0x13a141c18 <col:59> 'int' <LValueToRValue>
    | | |         | `-DeclRefExpr 0x13a141bd8 <col:59> 'int' lvalue Var 0x13a128770 'rgbMax' 'int'
    | | |         `-ImplicitCastExpr 0x13a141c30 <col:68> 'int' <LValueToRValue>
    | | |           `-DeclRefExpr 0x13a141bf8 <col:68> 'int' lvalue Var 0x13a128670 'rgbMin' 'int'
    | | `-BinaryOperator 0x13a141dc0 <line:25:5, col:30> 'unsigned char' '='
    | |   |-UnaryOperator 0x13a141d30 <col:5, col:6> 'unsigned char' lvalue prefix '*' cannot overflow
    | |   | `-ImplicitCastExpr 0x13a141d18 <col:6> 'unsigned char *' <LValueToRValue>
    | |   |   `-DeclRefExpr 0x13a141cf8 <col:6> 'unsigned char *' lvalue Var 0x13a140b30 'maxOut' 'unsigned char *'
    | |   `-CStyleCastExpr 0x13a141d98 <col:15, col:30> 'unsigned char' <IntegralCast>
    | |     `-ImplicitCastExpr 0x13a141d80 <col:30> 'int' <LValueToRValue> part_of_explicit_cast
    | |       `-DeclRefExpr 0x13a141d48 <col:30> 'int' lvalue ParmVar 0x13a128258 'sat' 'int'
    | `-CompoundStmt 0x13a141f18 <line:26:10, line:28:3>
    |   `-BinaryOperator 0x13a141ef8 <line:27:5, col:25> 'unsigned char' '='
    |     |-UnaryOperator 0x13a141e38 <col:5, col:6> 'unsigned char' lvalue prefix '*' cannot overflow
    |     | `-ImplicitCastExpr 0x13a141e20 <col:6> 'unsigned char *' <LValueToRValue>
    |     |   `-DeclRefExpr 0x13a141e00 <col:6> 'unsigned char *' lvalue Var 0x13a140ab0 'midOut' 'unsigned char *'
    |     `-BinaryOperator 0x13a141ed8 <col:15, col:25> 'unsigned char' '='
    |       |-UnaryOperator 0x13a141e88 <col:15, col:16> 'unsigned char' lvalue prefix '*' cannot overflow
    |       | `-ImplicitCastExpr 0x13a141e70 <col:16> 'unsigned char *' <LValueToRValue>
    |       |   `-DeclRefExpr 0x13a141e50 <col:16> 'unsigned char *' lvalue Var 0x13a140b30 'maxOut' 'unsigned char *'
    |       `-ImplicitCastExpr 0x13a141ec0 <col:25> 'unsigned char' <IntegralCast>
    |         `-IntegerLiteral 0x13a141ea0 <col:25> 'int' 0
    `-BinaryOperator 0x13a141fe8 <line:29:3, col:13> 'unsigned char' '='
      |-UnaryOperator 0x13a141f98 <col:3, col:4> 'unsigned char' lvalue prefix '*' cannot overflow
      | `-ImplicitCastExpr 0x13a141f80 <col:4> 'unsigned char *' <LValueToRValue>
      |   `-DeclRefExpr 0x13a141f60 <col:4> 'unsigned char *' lvalue Var 0x13a140a30 'minOut' 'unsigned char *'
      `-ImplicitCastExpr 0x13a141fd0 <col:13> 'unsigned char' <IntegralCast>
        `-IntegerLiteral 0x13a141fb0 <col:13> 'int' 0
