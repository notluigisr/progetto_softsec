TranslationUnitDecl 0x157855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1578564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x157855bd0 '__int128'
|-TypedefDecl 0x157856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x157855bf0 'unsigned __int128'
|-TypedefDecl 0x16100be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x16100bc00 'struct __NSConstantString_tag'
|   `-Record 0x157856580 '__NSConstantString_tag'
|-TypedefDecl 0x16100be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x157855d90 '__SVInt8_t'
|-TypedefDecl 0x16100bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x157855db0 '__SVInt16_t'
|-TypedefDecl 0x16100bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x157855dd0 '__SVInt32_t'
|-TypedefDecl 0x16100bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x157855df0 '__SVInt64_t'
|-TypedefDecl 0x16100c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x157855e10 '__SVUint8_t'
|-TypedefDecl 0x16100c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x157855e30 '__SVUint16_t'
|-TypedefDecl 0x16100c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x157855e50 '__SVUint32_t'
|-TypedefDecl 0x16100c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x157855e70 '__SVUint64_t'
|-TypedefDecl 0x16100c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x157855e90 '__SVFloat16_t'
|-TypedefDecl 0x16100c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x157855eb0 '__SVFloat32_t'
|-TypedefDecl 0x16100c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x157855ed0 '__SVFloat64_t'
|-TypedefDecl 0x16100c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x157855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x16100c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x157855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x16100c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x157855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x16100c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x157855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x16100c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x157855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x16100c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x157855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x16100c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x157855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x16100c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x157855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x16100c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x157855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x16100c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x157856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x16100c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x157856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x16100c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x157856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x16100c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x157856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x16100c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x157856090 '__clang_svint8x3_t'
|-TypedefDecl 0x16100c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1578560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x16100c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1578560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x16100c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1578560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x16100c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x157856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x16100ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x157856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x16100cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x157856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x16100cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x157856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x16100cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x157856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x16100d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1578561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x16100d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1578561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x16100d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1578561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x16100d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x157856210 '__clang_svint8x4_t'
|-TypedefDecl 0x16100d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x157856230 '__clang_svint16x4_t'
|-TypedefDecl 0x16100d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x157856250 '__clang_svint32x4_t'
|-TypedefDecl 0x16100d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x157856270 '__clang_svint64x4_t'
|-TypedefDecl 0x16100d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x157856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x16100d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1578562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x16100d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1578562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x16100d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1578562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x16100d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x157856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x16100d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x157856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x16100d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x157856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x16100d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x157856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x16100da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x157856390 '__SVBool_t'
|-TypedefDecl 0x16100da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1578563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x16100dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1578563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x16100db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1578563f0 '__SVCount_t'
|-TypedefDecl 0x16100dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x16100dbb0 'char *'
|   `-BuiltinType 0x1578556b0 'char'
|-TypedefDecl 0x16100dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x16100dbb0 'char *'
|   `-BuiltinType 0x1578556b0 'char'
|-FunctionDecl 0x16100dec8 <dataset_diviso_filec/func21535_vuln.c:1:1, line:75:1> line:1:5 lsm_set_label_at 'int (int, int, char *)'
| |-ParmVarDecl 0x16100dcd8 <col:22, col:26> col:26 used procfd 'int'
| |-ParmVarDecl 0x16100dd58 <col:34, col:38> col:38 used on_exec 'int'
| |-ParmVarDecl 0x16100ddd8 <col:47, col:53> col:53 used lsm_label 'char *'
| `-CompoundStmt 0x16102c010 <col:64, line:75:1>
|   |-DeclStmt 0x16100e088 <line:2:2, col:18>
|   | `-VarDecl 0x16100dfe8 <col:2, col:17> col:6 used labelfd 'int' cinit
|   |   `-UnaryOperator 0x16100e070 <col:16, col:17> 'int' prefix '-'
|   |     `-IntegerLiteral 0x16100e050 <col:17> 'int' 1
|   |-DeclStmt 0x16100e140 <line:3:2, col:13>
|   | `-VarDecl 0x16100e0b8 <col:2, col:12> col:6 used ret 'int' cinit
|   |   `-IntegerLiteral 0x16100e120 <col:12> 'int' 0
|   |-DeclStmt 0x16100e1d8 <line:4:2, col:18>
|   | `-VarDecl 0x16100e170 <col:2, col:14> col:14 used name 'const char *'
|   |-DeclStmt 0x16100e2c0 <line:5:2, col:22>
|   | `-VarDecl 0x16100e208 <col:2, col:18> col:8 used command 'char *' cinit
|   |   `-RecoveryExpr 0x16100e2a0 <col:18> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x161027cd0 <line:7:2, col:18> 'const char *' '='
|   | |-DeclRefExpr 0x16100e2d8 <col:2> 'const char *' lvalue Var 0x16100e170 'name' 'const char *'
|   | `-ImplicitCastExpr 0x161027898 <col:9, col:18> 'const char *' <IntegralToPointer>
|   |   `-CallExpr 0x161027878 <col:9, col:18> 'int'
|   |     `-ImplicitCastExpr 0x161027860 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x161027810 <col:9> 'int ()' Function 0x16100e358 'lsm_name' 'int ()'
|   |-IfStmt 0x161028148 <line:9:2, line:10:8>
|   | |-BinaryOperator 0x1610280c0 <line:9:6, col:29> 'int' '=='
|   | | |-CallExpr 0x161028028 <col:6, col:24> 'int'
|   | | | |-ImplicitCastExpr 0x161028010 <col:6> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x161027f10 <col:6> 'int (const char *, const char *)' Function 0x161027d30 'strcmp' 'int (const char *, const char *)'
|   | | | |-ImplicitCastExpr 0x161028058 <col:13> 'const char *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x161027f30 <col:13> 'const char *' lvalue Var 0x16100e170 'name' 'const char *'
|   | | | `-ImplicitCastExpr 0x161028088 <col:19> 'const char *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x161028070 <col:19> 'char *' <ArrayToPointerDecay>
|   | | |     `-StringLiteral 0x161027f90 <col:19> 'char[4]' lvalue "STR"
|   | | `-IntegerLiteral 0x1610280a0 <col:29> 'int' 0
|   | `-GotoStmt 0x161028130 <line:10:3, col:8> 'out' 0x1610280e0
|   |-IfStmt 0x1610282e0 <line:12:2, line:13:8>
|   | |-BinaryOperator 0x1610282a8 <line:12:6, col:29> 'int' '=='
|   | | |-CallExpr 0x161028210 <col:6, col:24> 'int'
|   | | | |-ImplicitCastExpr 0x1610281f8 <col:6> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x161028168 <col:6> 'int (const char *, const char *)' Function 0x161027d30 'strcmp' 'int (const char *, const char *)'
|   | | | |-ImplicitCastExpr 0x161028240 <col:13> 'const char *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x161028188 <col:13> 'const char *' lvalue Var 0x16100e170 'name' 'const char *'
|   | | | `-ImplicitCastExpr 0x161028270 <col:19> 'const char *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x161028258 <col:19> 'char *' <ArrayToPointerDecay>
|   | | |     `-StringLiteral 0x1610281a8 <col:19> 'char[4]' lvalue "STR"
|   | | `-IntegerLiteral 0x161028288 <col:29> 'int' 0
|   | `-GotoStmt 0x1610282c8 <line:13:3, col:8> 'out' 0x1610280e0
|   |-IfStmt 0x1610284c0 <line:16:2, line:17:13>
|   | |-BinaryOperator 0x161028440 <line:16:6, col:29> 'int' '=='
|   | | |-CallExpr 0x1610283a8 <col:6, col:24> 'int'
|   | | | |-ImplicitCastExpr 0x161028390 <col:6> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x161028300 <col:6> 'int (const char *, const char *)' Function 0x161027d30 'strcmp' 'int (const char *, const char *)'
|   | | | |-ImplicitCastExpr 0x1610283d8 <col:13> 'const char *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x161028320 <col:13> 'const char *' lvalue Var 0x16100e170 'name' 'const char *'
|   | | | `-ImplicitCastExpr 0x161028408 <col:19> 'const char *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x1610283f0 <col:19> 'char *' <ArrayToPointerDecay>
|   | | |     `-StringLiteral 0x161028340 <col:19> 'char[4]' lvalue "STR"
|   | | `-IntegerLiteral 0x161028420 <col:29> 'int' 0
|   | `-BinaryOperator 0x1610284a0 <line:17:3, col:13> 'int' '='
|   |   |-DeclRefExpr 0x161028460 <col:3> 'int' lvalue ParmVar 0x16100dd58 'on_exec' 'int'
|   |   `-IntegerLiteral 0x161028480 <col:13> 'int' 0
|   |-IfStmt 0x161029700 <line:19:2, line:24:2> has_else
|   | |-ImplicitCastExpr 0x161028500 <line:19:6> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x1610284e0 <col:6> 'int' lvalue ParmVar 0x16100dd58 'on_exec' 'int'
|   | |-CompoundStmt 0x161028760 <col:15, line:21:2>
|   | | `-BinaryOperator 0x161028740 <line:20:3, col:41> 'int' contains-errors '='
|   | |   |-DeclRefExpr 0x161028518 <col:3> 'int' lvalue Var 0x16100dfe8 'labelfd' 'int'
|   | |   `-CallExpr 0x161028708 <col:13, col:41> '<dependent type>' contains-errors
|   | |     |-DeclRefExpr 0x161028618 <col:13> 'int ()' Function 0x161028560 'openat' 'int ()'
|   | |     |-DeclRefExpr 0x161028638 <col:20> 'int' lvalue ParmVar 0x16100dcd8 'procfd' 'int'
|   | |     |-StringLiteral 0x161028658 <col:28> 'char[4]' lvalue "STR"
|   | |     `-RecoveryExpr 0x1610286e8 <col:35> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x1610296e8 <line:22:7, line:24:2>
|   |   `-BinaryOperator 0x1610296c8 <line:23:3, col:41> 'int' contains-errors '='
|   |     |-DeclRefExpr 0x161028778 <col:3> 'int' lvalue Var 0x16100dfe8 'labelfd' 'int'
|   |     `-CallExpr 0x161029690 <col:13, col:41> '<dependent type>' contains-errors
|   |       |-DeclRefExpr 0x161028798 <col:13> 'int ()' Function 0x161028560 'openat' 'int ()'
|   |       |-DeclRefExpr 0x1610287b8 <col:20> 'int' lvalue ParmVar 0x16100dcd8 'procfd' 'int'
|   |       |-StringLiteral 0x1610287d8 <col:28> 'char[4]' lvalue "STR"
|   |       `-RecoveryExpr 0x161029670 <col:35> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x1610299d8 <line:26:2, line:30:2>
|   | |-BinaryOperator 0x161029788 <line:26:6, col:16> 'int' '<'
|   | | |-ImplicitCastExpr 0x161029770 <col:6> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x161029730 <col:6> 'int' lvalue Var 0x16100dfe8 'labelfd' 'int'
|   | | `-IntegerLiteral 0x161029750 <col:16> 'int' 0
|   | `-CompoundStmt 0x1610299b0 <col:19, line:30:2>
|   |   |-CallExpr 0x1610298e0 <line:27:3, col:17> 'int'
|   |   | |-ImplicitCastExpr 0x1610298c8 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x161029888 <col:3> 'int ()' Function 0x1610297d0 'SYSERROR' 'int ()'
|   |   | `-ImplicitCastExpr 0x161029908 <col:12> 'char *' <ArrayToPointerDecay>
|   |   |   `-StringLiteral 0x1610298a8 <col:12> 'char[4]' lvalue "STR"
|   |   |-BinaryOperator 0x161029978 <line:28:3, col:10> 'int' '='
|   |   | |-DeclRefExpr 0x161029920 <col:3> 'int' lvalue Var 0x16100e0b8 'ret' 'int'
|   |   | `-UnaryOperator 0x161029960 <col:9, col:10> 'int' prefix '-'
|   |   |   `-IntegerLiteral 0x161029940 <col:10> 'int' 1
|   |   `-GotoStmt 0x161029998 <line:29:3, col:8> 'out' 0x1610280e0
|   |-IfStmt 0x16102baa8 <line:32:2, line:66:2> has_else
|   | |-BinaryOperator 0x161029b38 <line:32:6, col:29> 'int' '=='
|   | | |-CallExpr 0x161029aa0 <col:6, col:24> 'int'
|   | | | |-ImplicitCastExpr 0x161029a88 <col:6> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1610299f8 <col:6> 'int (const char *, const char *)' Function 0x161027d30 'strcmp' 'int (const char *, const char *)'
|   | | | |-ImplicitCastExpr 0x161029ad0 <col:13> 'const char *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x161029a18 <col:13> 'const char *' lvalue Var 0x16100e170 'name' 'const char *'
|   | | | `-ImplicitCastExpr 0x161029b00 <col:19> 'const char *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x161029ae8 <col:19> 'char *' <ArrayToPointerDecay>
|   | | |     `-StringLiteral 0x161029a38 <col:19> 'char[4]' lvalue "STR"
|   | | `-IntegerLiteral 0x161029b18 <col:29> 'int' 0
|   | |-CompoundStmt 0x16102b2a0 <col:32, line:54:2>
|   | | |-DeclStmt 0x161029bd8 <line:33:3, col:11>
|   | | | `-VarDecl 0x161029b70 <col:3, col:7> col:7 used size 'int'
|   | | |-BinaryOperator 0x16102a278 <line:35:3, col:57> 'char *' contains-errors '='
|   | | | |-DeclRefExpr 0x161029bf0 <col:3> 'char *' contains-errors lvalue Var 0x16100e208 'command' 'char *'
|   | | | `-ImplicitCastExpr 0x16102a260 <col:13, col:57> 'char *' <BitCast>
|   | | |   `-CallExpr 0x16102a238 <col:13, col:57> 'void *'
|   | | |     |-ImplicitCastExpr 0x16102a220 <col:13> 'void *(*)(unsigned long)' <FunctionToPointerDecay>
|   | | |     | `-DeclRefExpr 0x161029de8 <col:13> 'void *(unsigned long)' Function 0x161029c48 'malloc' 'void *(unsigned long)'
|   | | |     `-BinaryOperator 0x16102a1d0 <col:20, col:56> 'unsigned long' '+'
|   | | |       |-BinaryOperator 0x16102a178 <col:20, col:52> 'unsigned long' '+'
|   | | |       | |-CallExpr 0x16102a058 <col:20, col:36> 'unsigned long'
|   | | |       | | |-ImplicitCastExpr 0x16102a040 <col:20> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   | | |       | | | `-DeclRefExpr 0x161029fb8 <col:20> 'unsigned long (const char *)' Function 0x161029e48 'strlen' 'unsigned long (const char *)'
|   | | |       | | `-ImplicitCastExpr 0x16102a098 <col:27> 'const char *' <NoOp>
|   | | |       | |   `-ImplicitCastExpr 0x16102a080 <col:27> 'char *' <LValueToRValue>
|   | | |       | |     `-DeclRefExpr 0x161029fd8 <col:27> 'char *' lvalue ParmVar 0x16100ddd8 'lsm_label' 'char *'
|   | | |       | `-CallExpr 0x16102a120 <col:40, col:52> 'unsigned long'
|   | | |       |   |-ImplicitCastExpr 0x16102a108 <col:40> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   | | |       |   | `-DeclRefExpr 0x16102a0b0 <col:40> 'unsigned long (const char *)' Function 0x161029e48 'strlen' 'unsigned long (const char *)'
|   | | |       |   `-ImplicitCastExpr 0x16102a160 <col:47> 'const char *' <NoOp>
|   | | |       |     `-ImplicitCastExpr 0x16102a148 <col:47> 'char *' <ArrayToPointerDecay>
|   | | |       |       `-StringLiteral 0x16102a0d0 <col:47> 'char[4]' lvalue "STR"
|   | | |       `-ImplicitCastExpr 0x16102a1b8 <col:56> 'unsigned long' <IntegralCast>
|   | | |         `-IntegerLiteral 0x16102a198 <col:56> 'int' 1
|   | | |-IfStmt 0x16102a438 <line:36:3, line:40:3>
|   | | | |-UnaryOperator 0x16102a2d0 <line:36:7, col:8> 'int' contains-errors prefix '!' cannot overflow
|   | | | | `-ImplicitCastExpr 0x16102a2b8 <col:8> 'char *' contains-errors <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x16102a298 <col:8> 'char *' contains-errors lvalue Var 0x16100e208 'command' 'char *'
|   | | | `-CompoundStmt 0x16102a410 <col:17, line:40:3>
|   | | |   |-CallExpr 0x16102a340 <line:37:4, col:18> 'int'
|   | | |   | |-ImplicitCastExpr 0x16102a328 <col:4> 'int (*)()' <FunctionToPointerDecay>
|   | | |   | | `-DeclRefExpr 0x16102a2e8 <col:4> 'int ()' Function 0x1610297d0 'SYSERROR' 'int ()'
|   | | |   | `-ImplicitCastExpr 0x16102a368 <col:13> 'char *' <ArrayToPointerDecay>
|   | | |   |   `-StringLiteral 0x16102a308 <col:13> 'char[4]' lvalue "STR"
|   | | |   |-BinaryOperator 0x16102a3d8 <line:38:4, col:11> 'int' '='
|   | | |   | |-DeclRefExpr 0x16102a380 <col:4> 'int' lvalue Var 0x16100e0b8 'ret' 'int'
|   | | |   | `-UnaryOperator 0x16102a3c0 <col:10, col:11> 'int' prefix '-'
|   | | |   |   `-IntegerLiteral 0x16102a3a0 <col:11> 'int' 1
|   | | |   `-GotoStmt 0x16102a3f8 <line:39:4, col:9> 'out' 0x1610280e0
|   | | |-BinaryOperator 0x16102acb0 <line:42:3, col:43> 'int' contains-errors '='
|   | | | |-DeclRefExpr 0x16102a458 <col:3> 'int' lvalue Var 0x161029b70 'size' 'int'
|   | | | `-CallExpr 0x16102ac18 <col:10, col:43> 'int' contains-errors
|   | | |   |-ImplicitCastExpr 0x16102ac00 <col:10> 'int (*)(char *, const char *, ...)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x16102ab18 <col:10> 'int (char *, const char *, ...)' Function 0x16102a4c8 'sprintf' 'int (char *, const char *, ...)'
|   | | |   |-ImplicitCastExpr 0x16102ac50 <col:18> 'char *' contains-errors <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x16102ab38 <col:18> 'char *' contains-errors lvalue Var 0x16100e208 'command' 'char *'
|   | | |   |-ImplicitCastExpr 0x16102ac80 <col:27> 'const char *' <NoOp>
|   | | |   | `-ImplicitCastExpr 0x16102ac68 <col:27> 'char *' <ArrayToPointerDecay>
|   | | |   |   `-StringLiteral 0x16102ab58 <col:27> 'char[4]' lvalue "STR"
|   | | |   `-ImplicitCastExpr 0x16102ac98 <col:34> 'char *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x16102ab78 <col:34> 'char *' lvalue ParmVar 0x16100ddd8 'lsm_label' 'char *'
|   | | |-IfStmt 0x16102ae98 <line:43:3, line:47:3>
|   | | | |-BinaryOperator 0x16102ad28 <line:43:7, col:14> 'int' '<'
|   | | | | |-ImplicitCastExpr 0x16102ad10 <col:7> 'int' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x16102acd0 <col:7> 'int' lvalue Var 0x161029b70 'size' 'int'
|   | | | | `-IntegerLiteral 0x16102acf0 <col:14> 'int' 0
|   | | | `-CompoundStmt 0x16102ae70 <col:17, line:47:3>
|   | | |   |-CallExpr 0x16102ada0 <line:44:4, col:18> 'int'
|   | | |   | |-ImplicitCastExpr 0x16102ad88 <col:4> 'int (*)()' <FunctionToPointerDecay>
|   | | |   | | `-DeclRefExpr 0x16102ad48 <col:4> 'int ()' Function 0x1610297d0 'SYSERROR' 'int ()'
|   | | |   | `-ImplicitCastExpr 0x16102adc8 <col:13> 'char *' <ArrayToPointerDecay>
|   | | |   |   `-StringLiteral 0x16102ad68 <col:13> 'char[4]' lvalue "STR"
|   | | |   |-BinaryOperator 0x16102ae38 <line:45:4, col:11> 'int' '='
|   | | |   | |-DeclRefExpr 0x16102ade0 <col:4> 'int' lvalue Var 0x16100e0b8 'ret' 'int'
|   | | |   | `-UnaryOperator 0x16102ae20 <col:10, col:11> 'int' prefix '-'
|   | | |   |   `-IntegerLiteral 0x16102ae00 <col:11> 'int' 1
|   | | |   `-GotoStmt 0x16102ae58 <line:46:4, col:9> 'out' 0x1610280e0
|   | | `-IfStmt 0x16102b280 <line:49:3, line:53:3>
|   | |   |-BinaryOperator 0x16102b110 <line:49:7, col:43> 'int' contains-errors '<'
|   | |   | |-CallExpr 0x16102b088 <col:7, col:39> 'int' contains-errors
|   | |   | | |-ImplicitCastExpr 0x16102b070 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   | |   | | | `-DeclRefExpr 0x16102af98 <col:7> 'int ()' Function 0x16102aee0 'write' 'int ()'
|   | |   | | |-ImplicitCastExpr 0x16102b0c0 <col:13> 'int' <LValueToRValue>
|   | |   | | | `-DeclRefExpr 0x16102afb8 <col:13> 'int' lvalue Var 0x16100dfe8 'labelfd' 'int'
|   | |   | | |-ImplicitCastExpr 0x16102b0d8 <col:22> 'char *' contains-errors <LValueToRValue>
|   | |   | | | `-DeclRefExpr 0x16102afd8 <col:22> 'char *' contains-errors lvalue Var 0x16100e208 'command' 'char *'
|   | |   | | `-BinaryOperator 0x16102b050 <col:31, col:38> 'int' '+'
|   | |   | |   |-ImplicitCastExpr 0x16102b038 <col:31> 'int' <LValueToRValue>
|   | |   | |   | `-DeclRefExpr 0x16102aff8 <col:31> 'int' lvalue Var 0x161029b70 'size' 'int'
|   | |   | |   `-IntegerLiteral 0x16102b018 <col:38> 'int' 1
|   | |   | `-IntegerLiteral 0x16102b0f0 <col:43> 'int' 0
|   | |   `-CompoundStmt 0x16102b258 <col:46, line:53:3>
|   | |     |-CallExpr 0x16102b188 <line:50:4, col:18> 'int'
|   | |     | |-ImplicitCastExpr 0x16102b170 <col:4> 'int (*)()' <FunctionToPointerDecay>
|   | |     | | `-DeclRefExpr 0x16102b130 <col:4> 'int ()' Function 0x1610297d0 'SYSERROR' 'int ()'
|   | |     | `-ImplicitCastExpr 0x16102b1b0 <col:13> 'char *' <ArrayToPointerDecay>
|   | |     |   `-StringLiteral 0x16102b150 <col:13> 'char[4]' lvalue "STR"
|   | |     |-BinaryOperator 0x16102b220 <line:51:4, col:11> 'int' '='
|   | |     | |-DeclRefExpr 0x16102b1c8 <col:4> 'int' lvalue Var 0x16100e0b8 'ret' 'int'
|   | |     | `-UnaryOperator 0x16102b208 <col:10, col:11> 'int' prefix '-'
|   | |     |   `-IntegerLiteral 0x16102b1e8 <col:11> 'int' 1
|   | |     `-GotoStmt 0x16102b240 <line:52:4, col:9> 'out' 0x1610280e0
|   | `-IfStmt 0x16102ba78 <line:55:7, line:66:2> has_else
|   |   |-BinaryOperator 0x16102b420 <line:55:11, col:34> 'int' '=='
|   |   | |-CallExpr 0x16102b388 <col:11, col:29> 'int'
|   |   | | |-ImplicitCastExpr 0x16102b370 <col:11> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |   | | | `-DeclRefExpr 0x16102b2e0 <col:11> 'int (const char *, const char *)' Function 0x161027d30 'strcmp' 'int (const char *, const char *)'
|   |   | | |-ImplicitCastExpr 0x16102b3b8 <col:18> 'const char *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x16102b300 <col:18> 'const char *' lvalue Var 0x16100e170 'name' 'const char *'
|   |   | | `-ImplicitCastExpr 0x16102b3e8 <col:24> 'const char *' <NoOp>
|   |   | |   `-ImplicitCastExpr 0x16102b3d0 <col:24> 'char *' <ArrayToPointerDecay>
|   |   | |     `-StringLiteral 0x16102b320 <col:24> 'char[4]' lvalue "STR"
|   |   | `-IntegerLiteral 0x16102b400 <col:34> 'int' 0
|   |   |-CompoundStmt 0x16102b7f0 <col:37, line:61:2>
|   |   | `-IfStmt 0x16102b7d0 <line:56:3, line:60:3>
|   |   |   |-BinaryOperator 0x16102b660 <line:56:7, col:58> 'int' '<'
|   |   |   | |-CallExpr 0x16102b5d8 <col:7, col:54> 'int'
|   |   |   | | |-ImplicitCastExpr 0x16102b5c0 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   |   |   | | | `-DeclRefExpr 0x16102b440 <col:7> 'int ()' Function 0x16102aee0 'write' 'int ()'
|   |   |   | | |-ImplicitCastExpr 0x16102b610 <col:13> 'int' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x16102b460 <col:13> 'int' lvalue Var 0x16100dfe8 'labelfd' 'int'
|   |   |   | | |-ImplicitCastExpr 0x16102b628 <col:22> 'char *' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x16102b480 <col:22> 'char *' lvalue ParmVar 0x16100ddd8 'lsm_label' 'char *'
|   |   |   | | `-BinaryOperator 0x16102b5a0 <col:33, col:53> 'unsigned long' '+'
|   |   |   | |   |-CallExpr 0x16102b510 <col:33, col:49> 'unsigned long'
|   |   |   | |   | |-ImplicitCastExpr 0x16102b4f8 <col:33> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |   |   | |   | | `-DeclRefExpr 0x16102b4a0 <col:33> 'unsigned long (const char *)' Function 0x161029e48 'strlen' 'unsigned long (const char *)'
|   |   |   | |   | `-ImplicitCastExpr 0x16102b550 <col:40> 'const char *' <NoOp>
|   |   |   | |   |   `-ImplicitCastExpr 0x16102b538 <col:40> 'char *' <LValueToRValue>
|   |   |   | |   |     `-DeclRefExpr 0x16102b4c0 <col:40> 'char *' lvalue ParmVar 0x16100ddd8 'lsm_label' 'char *'
|   |   |   | |   `-ImplicitCastExpr 0x16102b588 <col:53> 'unsigned long' <IntegralCast>
|   |   |   | |     `-IntegerLiteral 0x16102b568 <col:53> 'int' 1
|   |   |   | `-IntegerLiteral 0x16102b640 <col:58> 'int' 0
|   |   |   `-CompoundStmt 0x16102b7a8 <col:61, line:60:3>
|   |   |     |-CallExpr 0x16102b6d8 <line:57:4, col:18> 'int'
|   |   |     | |-ImplicitCastExpr 0x16102b6c0 <col:4> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | | `-DeclRefExpr 0x16102b680 <col:4> 'int ()' Function 0x1610297d0 'SYSERROR' 'int ()'
|   |   |     | `-ImplicitCastExpr 0x16102b700 <col:13> 'char *' <ArrayToPointerDecay>
|   |   |     |   `-StringLiteral 0x16102b6a0 <col:13> 'char[4]' lvalue "STR"
|   |   |     |-BinaryOperator 0x16102b770 <line:58:4, col:11> 'int' '='
|   |   |     | |-DeclRefExpr 0x16102b718 <col:4> 'int' lvalue Var 0x16100e0b8 'ret' 'int'
|   |   |     | `-UnaryOperator 0x16102b758 <col:10, col:11> 'int' prefix '-'
|   |   |     |   `-IntegerLiteral 0x16102b738 <col:11> 'int' 1
|   |   |     `-GotoStmt 0x16102b790 <line:59:4, col:9> 'out' 0x1610280e0
|   |   `-CompoundStmt 0x16102ba50 <line:62:7, line:66:2>
|   |     |-CallExpr 0x16102b960 <line:63:3, col:20> 'int'
|   |     | |-ImplicitCastExpr 0x16102b948 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x16102b8e8 <col:3> 'int ()' Function 0x16102b830 'ERROR' 'int ()'
|   |     | |-ImplicitCastExpr 0x16102b990 <col:9> 'char *' <ArrayToPointerDecay>
|   |     | | `-StringLiteral 0x16102b908 <col:9> 'char[4]' lvalue "STR"
|   |     | `-ImplicitCastExpr 0x16102b9a8 <col:16> 'const char *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x16102b928 <col:16> 'const char *' lvalue Var 0x16100e170 'name' 'const char *'
|   |     |-BinaryOperator 0x16102ba18 <line:64:3, col:10> 'int' '='
|   |     | |-DeclRefExpr 0x16102b9c0 <col:3> 'int' lvalue Var 0x16100e0b8 'ret' 'int'
|   |     | `-UnaryOperator 0x16102ba00 <col:9, col:10> 'int' prefix '-'
|   |     |   `-IntegerLiteral 0x16102b9e0 <col:10> 'int' 1
|   |     `-GotoStmt 0x16102ba38 <line:65:3, col:8> 'out' 0x1610280e0
|   |-LabelStmt 0x16102bd80 <line:68:1, line:69:14> 'out'
|   | `-CallExpr 0x16102bd28 <col:2, col:14> 'void' contains-errors
|   |   |-ImplicitCastExpr 0x16102bd10 <col:2> 'void (*)(void *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x16102bc88 <col:2> 'void (void *)' Function 0x16102bb18 'free' 'void (void *)'
|   |   `-ImplicitCastExpr 0x16102bd68 <col:7> 'void *' contains-errors <BitCast>
|   |     `-ImplicitCastExpr 0x16102bd50 <col:7> 'char *' contains-errors <LValueToRValue>
|   |       `-DeclRefExpr 0x16102bca8 <col:7> 'char *' contains-errors lvalue Var 0x16100e208 'command' 'char *'
|   |-IfStmt 0x16102bfa8 <line:71:2, line:72:16>
|   | |-BinaryOperator 0x16102be10 <line:71:6, col:18> 'int' '!='
|   | | |-ImplicitCastExpr 0x16102bdf8 <col:6> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x16102bda0 <col:6> 'int' lvalue Var 0x16100dfe8 'labelfd' 'int'
|   | | `-UnaryOperator 0x16102bde0 <col:17, col:18> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x16102bdc0 <col:18> 'int' 1
|   | `-CallExpr 0x16102bf68 <line:72:3, col:16> 'int'
|   |   |-ImplicitCastExpr 0x16102bf50 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x16102bf10 <col:3> 'int ()' Function 0x16102be58 'close' 'int ()'
|   |   `-ImplicitCastExpr 0x16102bf90 <col:9> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x16102bf30 <col:9> 'int' lvalue Var 0x16100dfe8 'labelfd' 'int'
|   `-ReturnStmt 0x16102c000 <line:74:2, col:9>
|     `-ImplicitCastExpr 0x16102bfe8 <col:9> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x16102bfc8 <col:9> 'int' lvalue Var 0x16100e0b8 'ret' 'int'
|-FunctionDecl 0x161027d30 <line:9:6> col:6 implicit used strcmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x161027e30 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x161027e98 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x161027dd8 <<invalid sloc>> Implicit 887
|-FunctionDecl 0x161029c48 <line:35:13> col:13 implicit used malloc 'void *(unsigned long)' extern
| |-ParmVarDecl 0x161029d48 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-BuiltinAttr 0x161029cf0 <<invalid sloc>> Implicit 871
| `-AllocSizeAttr 0x161029db8 <col:13> Implicit 1
|-FunctionDecl 0x161029e48 <col:20> col:20 implicit used strlen 'unsigned long (const char *)' extern
| |-ParmVarDecl 0x161029f48 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x161029ef0 <<invalid sloc>> Implicit 902
|-FunctionDecl 0x16102a4c8 <line:42:10> col:10 implicit used sprintf 'int (char *, const char *, ...)' extern
| |-ParmVarDecl 0x16102aa00 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x16102aa68 <<invalid sloc>> <invalid sloc> 'const char *'
| |-BuiltinAttr 0x16102a570 <<invalid sloc>> Implicit 906
| `-FormatAttr 0x16102aae0 <col:10> Implicit printf 2 3
`-FunctionDecl 0x16102bb18 <line:69:2> col:2 implicit used free 'void (void *)' extern
  |-ParmVarDecl 0x16102bc18 <<invalid sloc>> <invalid sloc> 'void *'
  `-BuiltinAttr 0x16102bbc0 <<invalid sloc>> Implicit 873
