TranslationUnitDecl 0x126055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1260564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x126055bd0 '__int128'
|-TypedefDecl 0x126056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x126055bf0 'unsigned __int128'
|-TypedefDecl 0x12680be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12680bc00 'struct __NSConstantString_tag'
|   `-Record 0x126056580 '__NSConstantString_tag'
|-TypedefDecl 0x12680be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x126055d90 '__SVInt8_t'
|-TypedefDecl 0x12680bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x126055db0 '__SVInt16_t'
|-TypedefDecl 0x12680bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x126055dd0 '__SVInt32_t'
|-TypedefDecl 0x12680bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x126055df0 '__SVInt64_t'
|-TypedefDecl 0x12680c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x126055e10 '__SVUint8_t'
|-TypedefDecl 0x12680c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x126055e30 '__SVUint16_t'
|-TypedefDecl 0x12680c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x126055e50 '__SVUint32_t'
|-TypedefDecl 0x12680c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x126055e70 '__SVUint64_t'
|-TypedefDecl 0x12680c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x126055e90 '__SVFloat16_t'
|-TypedefDecl 0x12680c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x126055eb0 '__SVFloat32_t'
|-TypedefDecl 0x12680c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x126055ed0 '__SVFloat64_t'
|-TypedefDecl 0x12680c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x126055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12680c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x126055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12680c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x126055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12680c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x126055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12680c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x126055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12680c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x126055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12680c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x126055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12680c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x126055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12680c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x126055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12680c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x126056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12680c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x126056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12680c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x126056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12680c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x126056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12680c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x126056090 '__clang_svint8x3_t'
|-TypedefDecl 0x12680c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1260560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12680c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1260560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12680c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1260560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12680c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x126056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12680ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x126056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12680cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x126056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12680cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x126056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12680cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x126056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12680d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1260561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12680d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1260561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12680d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1260561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12680d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x126056210 '__clang_svint8x4_t'
|-TypedefDecl 0x12680d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x126056230 '__clang_svint16x4_t'
|-TypedefDecl 0x12680d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x126056250 '__clang_svint32x4_t'
|-TypedefDecl 0x12680d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x126056270 '__clang_svint64x4_t'
|-TypedefDecl 0x12680d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x126056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12680d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1260562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12680d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1260562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12680d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1260562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12680d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x126056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12680d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x126056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12680d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x126056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12680d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x126056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12680da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x126056390 '__SVBool_t'
|-TypedefDecl 0x12680da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1260563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12680dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1260563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12680db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1260563f0 '__SVCount_t'
|-TypedefDecl 0x12680dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12680dbb0 'char *'
|   `-BuiltinType 0x1260556b0 'char'
|-TypedefDecl 0x12680dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12680dbb0 'char *'
|   `-BuiltinType 0x1260556b0 'char'
|-FunctionDecl 0x12680dda8 <dataset_diviso_filec/func2126_vuln.c:1:1, line:37:1> line:1:1 file_extension 'int (const char *)'
| |-ParmVarDecl 0x12680dcd8 <col:16, col:28> col:28 used s 'const char *'
| `-CompoundStmt 0x126828f30 <line:2:1, line:37:1>
|   |-DeclStmt 0x12680df20 <line:3:3, col:24>
|   | `-VarDecl 0x12680deb8 <col:3, col:15> col:15 used extension 'const char *'
|   |-DeclStmt 0x12680e048 <line:4:3, col:24>
|   | `-VarDecl 0x12680dfe0 <col:3, col:23> col:15 used buf 'char[1024]' static
|   |-IfStmt 0x126122d70 <line:7:3, line:22:17> has_else
|   | |-BinaryOperator 0x12680e0f0 <line:7:7, col:12> 'int' contains-errors '=='
|   | | |-DeclRefExpr 0x12680e060 <col:7> 'const char *' lvalue ParmVar 0x12680dcd8 's' 'const char *'
|   | | `-RecoveryExpr 0x12680e0d0 <col:12> '<dependent type>' contains-errors lvalue
|   | |-NullStmt 0x126122d68 <line:8:5>
|   | `-IfStmt 0x126122d38 <line:9:8, line:22:17> has_else
|   |   |-UnaryOperator 0x126826bd0 <line:9:12, col:33> 'int' prefix '!' cannot overflow
|   |   | `-CallExpr 0x126826b38 <col:13, col:33> 'int'
|   |   |   |-ImplicitCastExpr 0x126826b20 <col:13> 'int (*)(const char *, const char *, unsigned long)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x126826a00 <col:13> 'int (const char *, const char *, unsigned long)' Function 0x1268267b0 'strncmp' 'int (const char *, const char *, unsigned long)'
|   |   |   |-ImplicitCastExpr 0x126826b70 <col:21> 'const char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x126826a20 <col:21> 'const char *' lvalue ParmVar 0x12680dcd8 's' 'const char *'
|   |   |   |-ImplicitCastExpr 0x126826ba0 <col:24> 'const char *' <NoOp>
|   |   |   | `-ImplicitCastExpr 0x126826b88 <col:24> 'char *' <ArrayToPointerDecay>
|   |   |   |   `-StringLiteral 0x126826a80 <col:24> 'char[4]' lvalue "STR"
|   |   |   `-ImplicitCastExpr 0x126826bb8 <col:31> 'unsigned long' <IntegralCast>
|   |   |     `-IntegerLiteral 0x126826aa0 <col:31> 'int' 15
|   |   |-ReturnStmt 0x126826c58 <line:10:5, col:18>
|   |   | `-ImplicitCastExpr 0x126826c40 <col:12, col:18> 'int' <PointerToIntegral>
|   |   |   `-ImplicitCastExpr 0x126826c28 <col:12, col:18> 'char *' <ArrayToPointerDecay>
|   |   |     `-ParenExpr 0x126826c08 <col:12, col:18> 'char[4]' lvalue
|   |   |       `-StringLiteral 0x126826be8 <col:13> 'char[4]' lvalue "STR"
|   |   `-IfStmt 0x126122d08 <line:11:8, line:22:17> has_else
|   |     |-UnaryOperator 0x126826dc8 <line:11:12, col:33> 'int' prefix '!' cannot overflow
|   |     | `-CallExpr 0x126826d30 <col:13, col:33> 'int'
|   |     |   |-ImplicitCastExpr 0x126826d18 <col:13> 'int (*)(const char *, const char *, unsigned long)' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x126826c68 <col:13> 'int (const char *, const char *, unsigned long)' Function 0x1268267b0 'strncmp' 'int (const char *, const char *, unsigned long)'
|   |     |   |-ImplicitCastExpr 0x126826d68 <col:21> 'const char *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x126826c88 <col:21> 'const char *' lvalue ParmVar 0x12680dcd8 's' 'const char *'
|   |     |   |-ImplicitCastExpr 0x126826d98 <col:24> 'const char *' <NoOp>
|   |     |   | `-ImplicitCastExpr 0x126826d80 <col:24> 'char *' <ArrayToPointerDecay>
|   |     |   |   `-StringLiteral 0x126826ca8 <col:24> 'char[4]' lvalue "STR"
|   |     |   `-ImplicitCastExpr 0x126826db0 <col:31> 'unsigned long' <IntegralCast>
|   |     |     `-IntegerLiteral 0x126826cc8 <col:31> 'int' 15
|   |     |-ReturnStmt 0x126826e50 <line:12:5, col:18>
|   |     | `-ImplicitCastExpr 0x126826e38 <col:12, col:18> 'int' <PointerToIntegral>
|   |     |   `-ImplicitCastExpr 0x126826e20 <col:12, col:18> 'char *' <ArrayToPointerDecay>
|   |     |     `-ParenExpr 0x126826e00 <col:12, col:18> 'char[4]' lvalue
|   |     |       `-StringLiteral 0x126826de0 <col:13> 'char[4]' lvalue "STR"
|   |     `-IfStmt 0x126122cd8 <line:13:8, line:22:17> has_else
|   |       |-UnaryOperator 0x126826fc0 <line:13:12, col:33> 'int' prefix '!' cannot overflow
|   |       | `-CallExpr 0x126826f28 <col:13, col:33> 'int'
|   |       |   |-ImplicitCastExpr 0x126826f10 <col:13> 'int (*)(const char *, const char *, unsigned long)' <FunctionToPointerDecay>
|   |       |   | `-DeclRefExpr 0x126826e60 <col:13> 'int (const char *, const char *, unsigned long)' Function 0x1268267b0 'strncmp' 'int (const char *, const char *, unsigned long)'
|   |       |   |-ImplicitCastExpr 0x126826f60 <col:21> 'const char *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x126826e80 <col:21> 'const char *' lvalue ParmVar 0x12680dcd8 's' 'const char *'
|   |       |   |-ImplicitCastExpr 0x126826f90 <col:24> 'const char *' <NoOp>
|   |       |   | `-ImplicitCastExpr 0x126826f78 <col:24> 'char *' <ArrayToPointerDecay>
|   |       |   |   `-StringLiteral 0x126826ea0 <col:24> 'char[4]' lvalue "STR"
|   |       |   `-ImplicitCastExpr 0x126826fa8 <col:31> 'unsigned long' <IntegralCast>
|   |       |     `-IntegerLiteral 0x126826ec0 <col:31> 'int' 16
|   |       |-ReturnStmt 0x126827048 <line:14:5, col:18>
|   |       | `-ImplicitCastExpr 0x126827030 <col:12, col:18> 'int' <PointerToIntegral>
|   |       |   `-ImplicitCastExpr 0x126827018 <col:12, col:18> 'char *' <ArrayToPointerDecay>
|   |       |     `-ParenExpr 0x126826ff8 <col:12, col:18> 'char[4]' lvalue
|   |       |       `-StringLiteral 0x126826fd8 <col:13> 'char[4]' lvalue "STR"
|   |       `-IfStmt 0x126122ca8 <line:15:8, line:22:17> has_else
|   |         |-UnaryOperator 0x1268271b8 <line:15:12, col:33> 'int' prefix '!' cannot overflow
|   |         | `-CallExpr 0x126827120 <col:13, col:33> 'int'
|   |         |   |-ImplicitCastExpr 0x126827108 <col:13> 'int (*)(const char *, const char *, unsigned long)' <FunctionToPointerDecay>
|   |         |   | `-DeclRefExpr 0x126827058 <col:13> 'int (const char *, const char *, unsigned long)' Function 0x1268267b0 'strncmp' 'int (const char *, const char *, unsigned long)'
|   |         |   |-ImplicitCastExpr 0x126827158 <col:21> 'const char *' <LValueToRValue>
|   |         |   | `-DeclRefExpr 0x126827078 <col:21> 'const char *' lvalue ParmVar 0x12680dcd8 's' 'const char *'
|   |         |   |-ImplicitCastExpr 0x126827188 <col:24> 'const char *' <NoOp>
|   |         |   | `-ImplicitCastExpr 0x126827170 <col:24> 'char *' <ArrayToPointerDecay>
|   |         |   |   `-StringLiteral 0x126827098 <col:24> 'char[4]' lvalue "STR"
|   |         |   `-ImplicitCastExpr 0x1268271a0 <col:31> 'unsigned long' <IntegralCast>
|   |         |     `-IntegerLiteral 0x1268270b8 <col:31> 'int' 15
|   |         |-ReturnStmt 0x126827240 <line:16:5, col:18>
|   |         | `-ImplicitCastExpr 0x126827228 <col:12, col:18> 'int' <PointerToIntegral>
|   |         |   `-ImplicitCastExpr 0x126827210 <col:12, col:18> 'char *' <ArrayToPointerDecay>
|   |         |     `-ParenExpr 0x1268271f0 <col:12, col:18> 'char[4]' lvalue
|   |         |       `-StringLiteral 0x1268271d0 <col:13> 'char[4]' lvalue "STR"
|   |         `-IfStmt 0x126122c78 <line:17:8, line:22:17> has_else
|   |           |-BinaryOperator 0x1261227e0 <line:17:12, col:45> 'int' contains-errors '!='
|   |           | |-ParenExpr 0x1261227a0 <col:12, col:40> 'const char *'
|   |           | | `-BinaryOperator 0x126122780 <col:13, col:39> 'const char *' '='
|   |           | |   |-DeclRefExpr 0x126827250 <col:13> 'const char *' lvalue Var 0x12680deb8 'extension' 'const char *'
|   |           | |   `-ImplicitCastExpr 0x126122768 <col:25, col:39> 'const char *' <NoOp>
|   |           | |     `-CallExpr 0x126122720 <col:25, col:39> 'char *'
|   |           | |       |-ImplicitCastExpr 0x126122708 <col:25> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   |           | |       | `-DeclRefExpr 0x126827490 <col:25> 'char *(const char *, int)' Function 0x1268272b0 'strrchr' 'char *(const char *, int)'
|   |           | |       |-ImplicitCastExpr 0x126122750 <col:33> 'const char *' <LValueToRValue>
|   |           | |       | `-DeclRefExpr 0x1268274b0 <col:33> 'const char *' lvalue ParmVar 0x12680dcd8 's' 'const char *'
|   |           | |       `-CharacterLiteral 0x1268274d0 <col:36> 'int' 47
|   |           | `-RecoveryExpr 0x1261227c0 <col:45> '<dependent type>' contains-errors lvalue
|   |           |-UnaryOperator 0x126122820 <line:18:5, col:15> 'const char *' postfix '++'
|   |           | `-DeclRefExpr 0x126122800 <col:5> 'const char *' lvalue Var 0x12680deb8 'extension' 'const char *'
|   |           `-IfStmt 0x126122c48 <line:19:8, line:22:17> has_else
|   |             |-BinaryOperator 0x126122b78 <line:19:12, col:46> 'int' contains-errors '!='
|   |             | |-ParenExpr 0x126122b38 <col:12, col:41> 'const char *'
|   |             | | `-BinaryOperator 0x126122b18 <col:13, col:40> 'const char *' '='
|   |             | |   |-DeclRefExpr 0x126122838 <col:13> 'const char *' lvalue Var 0x12680deb8 'extension' 'const char *'
|   |             | |   `-ImplicitCastExpr 0x126122b00 <col:25, col:40> 'const char *' <NoOp>
|   |             | |     `-CallExpr 0x126122ab8 <col:25, col:40> 'char *'
|   |             | |       |-ImplicitCastExpr 0x126122aa0 <col:25> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   |             | |       | `-DeclRefExpr 0x126122858 <col:25> 'char *(const char *, int)' Function 0x1268272b0 'strrchr' 'char *(const char *, int)'
|   |             | |       |-ImplicitCastExpr 0x126122ae8 <col:33> 'const char *' <LValueToRValue>
|   |             | |       | `-DeclRefExpr 0x126122878 <col:33> 'const char *' lvalue ParmVar 0x12680dcd8 's' 'const char *'
|   |             | |       `-CharacterLiteral 0x126122898 <col:36> 'int' 92
|   |             | `-RecoveryExpr 0x126122b58 <col:46> '<dependent type>' contains-errors lvalue
|   |             |-UnaryOperator 0x126122bb8 <line:20:5, col:15> 'const char *' postfix '++'
|   |             | `-DeclRefExpr 0x126122b98 <col:5> 'const char *' lvalue Var 0x12680deb8 'extension' 'const char *'
|   |             `-BinaryOperator 0x126122c28 <line:22:5, col:17> 'const char *' '='
|   |               |-DeclRefExpr 0x126122bd0 <col:5> 'const char *' lvalue Var 0x12680deb8 'extension' 'const char *'
|   |               `-ImplicitCastExpr 0x126122c10 <col:17> 'const char *' <LValueToRValue>
|   |                 `-DeclRefExpr 0x126122bf0 <col:17> 'const char *' lvalue ParmVar 0x12680dcd8 's' 'const char *'
|   |-IfStmt 0x1261231f0 <line:24:3, line:27:15> has_else
|   | |-BinaryOperator 0x1261230e0 <line:24:7, col:48> 'int' contains-errors '=='
|   | | |-ParenExpr 0x1261230a0 <col:7, col:43> 'const char *'
|   | | | `-BinaryOperator 0x126123080 <col:8, col:42> 'const char *' '='
|   | | |   |-DeclRefExpr 0x126122da0 <col:8> 'const char *' lvalue Var 0x12680deb8 'extension' 'const char *'
|   | | |   `-ImplicitCastExpr 0x126123068 <col:20, col:42> 'const char *' <NoOp>
|   | | |     `-CallExpr 0x126123020 <col:20, col:42> 'char *'
|   | | |       |-ImplicitCastExpr 0x126123008 <col:20> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   | | |       | `-DeclRefExpr 0x126122dc0 <col:20> 'char *(const char *, int)' Function 0x1268272b0 'strrchr' 'char *(const char *, int)'
|   | | |       |-ImplicitCastExpr 0x126123050 <col:28> 'const char *' <LValueToRValue>
|   | | |       | `-DeclRefExpr 0x126122de0 <col:28> 'const char *' lvalue Var 0x12680deb8 'extension' 'const char *'
|   | | |       `-CharacterLiteral 0x126122e00 <col:39> 'int' 46
|   | | `-RecoveryExpr 0x1261230c0 <col:48> '<dependent type>' contains-errors lvalue
|   | |-ReturnStmt 0x1261231a8 <line:25:5, col:15>
|   | | `-ImplicitCastExpr 0x126123190 <col:12, col:15> 'int' <PointerToIntegral>
|   | |   `-ImplicitCastExpr 0x126123178 <col:12, col:15> 'char *' <ArrayToPointerDecay>
|   | |     `-ParenExpr 0x126123158 <col:12, col:15> 'char[1]' lvalue
|   | |       `-StringLiteral 0x126123140 <col:13> 'char[1]' lvalue ""
|   | `-UnaryOperator 0x1261231d8 <line:27:5, col:15> 'const char *' postfix '++'
|   |   `-DeclRefExpr 0x1261231b8 <col:5> 'const char *' lvalue Var 0x12680deb8 'extension' 'const char *'
|   |-IfStmt 0x1268288c0 <line:29:3, line:30:22>
|   | |-BinaryOperator 0x126828820 <line:29:7, col:33> 'int' contains-errors '=='
|   | | |-CallExpr 0x1261235b0 <col:7, col:28> 'char *'
|   | | | |-ImplicitCastExpr 0x126123598 <col:7> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x126123400 <col:7> 'char *(const char *, int)' Function 0x126123220 'strchr' 'char *(const char *, int)'
|   | | | |-ImplicitCastExpr 0x1261235e0 <col:14> 'const char *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x126123420 <col:14> 'const char *' lvalue Var 0x12680deb8 'extension' 'const char *'
|   | | | `-CharacterLiteral 0x126123440 <col:25> 'int' 35
|   | | `-RecoveryExpr 0x126828800 <col:33> '<dependent type>' contains-errors lvalue
|   | `-ReturnStmt 0x1268288b0 <line:30:5, col:22>
|   |   `-ImplicitCastExpr 0x126828898 <col:12, col:22> 'int' <PointerToIntegral>
|   |     `-ImplicitCastExpr 0x126828880 <col:12, col:22> 'const char *' <LValueToRValue>
|   |       `-ParenExpr 0x126828860 <col:12, col:22> 'const char *' lvalue
|   |         `-DeclRefExpr 0x126828840 <col:13> 'const char *' lvalue Var 0x12680deb8 'extension' 'const char *'
|   |-CallExpr 0x126828cb8 <line:32:3, col:38> 'unsigned long'
|   | |-ImplicitCastExpr 0x126828ca0 <col:3> 'unsigned long (*)(char *, const char *, unsigned long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x126828b78 <col:3> 'unsigned long (char *, const char *, unsigned long)' Function 0x126828928 'strlcpy' 'unsigned long (char *, const char *, unsigned long)'
|   | |-ImplicitCastExpr 0x126828cf0 <col:11> 'char *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x126828b98 <col:11> 'char[1024]' lvalue Var 0x12680dfe0 'buf' 'char[1024]'
|   | |-ImplicitCastExpr 0x126828d08 <col:16> 'const char *' <LValueToRValue>
|   | | `-DeclRefExpr 0x126828bb8 <col:16> 'const char *' lvalue Var 0x12680deb8 'extension' 'const char *'
|   | `-UnaryExprOrTypeTraitExpr 0x126828c18 <col:27, col:37> 'unsigned long' sizeof
|   |   `-ParenExpr 0x126828bf8 <col:33, col:37> 'char[1024]' lvalue
|   |     `-DeclRefExpr 0x126828bd8 <col:34> 'char[1024]' lvalue Var 0x12680dfe0 'buf' 'char[1024]' non_odr_use_unevaluated
|   |-BinaryOperator 0x126828e90 <line:34:3, col:31> 'char' '='
|   | |-UnaryOperator 0x126828e48 <col:3, col:27> 'char' lvalue prefix '*' cannot overflow
|   | | `-CStyleCastExpr 0x126828e20 <col:4, col:27> 'char *' <NoOp>
|   | |   `-CallExpr 0x126828da8 <col:12, col:27> 'char *'
|   | |     |-ImplicitCastExpr 0x126828d90 <col:12> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x126828d20 <col:12> 'char *(const char *, int)' Function 0x126123220 'strchr' 'char *(const char *, int)'
|   | |     |-ImplicitCastExpr 0x126828df0 <col:19> 'const char *' <NoOp>
|   | |     | `-ImplicitCastExpr 0x126828dd8 <col:19> 'char *' <ArrayToPointerDecay>
|   | |     |   `-DeclRefExpr 0x126828d40 <col:19> 'char[1024]' lvalue Var 0x12680dfe0 'buf' 'char[1024]'
|   | |     `-CharacterLiteral 0x126828d60 <col:24> 'int' 35
|   | `-ImplicitCastExpr 0x126828e78 <col:31> 'char' <IntegralCast>
|   |   `-CharacterLiteral 0x126828e60 <col:31> 'int' 0
|   `-ReturnStmt 0x126828f20 <line:36:3, col:14>
|     `-ImplicitCastExpr 0x126828f08 <col:10, col:14> 'int' <PointerToIntegral>
|       `-ImplicitCastExpr 0x126828ef0 <col:10, col:14> 'char *' <ArrayToPointerDecay>
|         `-ParenExpr 0x126828ed0 <col:10, col:14> 'char[1024]' lvalue
|           `-DeclRefExpr 0x126828eb0 <col:11> 'char[1024]' lvalue Var 0x12680dfe0 'buf' 'char[1024]'
|-FunctionDecl 0x1268267b0 <line:9:13> col:13 implicit used strncmp 'int (const char *, const char *, unsigned long)' extern
| |-ParmVarDecl 0x1268268b0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x126826918 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x126826980 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x126826858 <<invalid sloc>> Implicit 888
|-FunctionDecl 0x1268272b0 <line:17:25> col:25 implicit used strrchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x1268273b0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x126827418 <<invalid sloc>> <invalid sloc> 'int'
| `-BuiltinAttr 0x126827358 <<invalid sloc>> Implicit 896
|-FunctionDecl 0x126123220 <line:29:7> col:7 implicit used strchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x126123320 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x126123388 <<invalid sloc>> <invalid sloc> 'int'
| `-BuiltinAttr 0x1261232c8 <<invalid sloc>> Implicit 893
`-FunctionDecl 0x126828928 <line:32:3> col:3 implicit used strlcpy 'unsigned long (char *, const char *, unsigned long)' extern
  |-ParmVarDecl 0x126828a28 <<invalid sloc>> <invalid sloc> 'char *'
  |-ParmVarDecl 0x126828a90 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x126828af8 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x1268289d0 <<invalid sloc>> Implicit 969
