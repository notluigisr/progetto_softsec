TranslationUnitDecl 0x131855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1318564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x131855bd0 '__int128'
|-TypedefDecl 0x131856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x131855bf0 'unsigned __int128'
|-TypedefDecl 0x13200be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13200bc00 'struct __NSConstantString_tag'
|   `-Record 0x131856580 '__NSConstantString_tag'
|-TypedefDecl 0x13200be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x131855d90 '__SVInt8_t'
|-TypedefDecl 0x13200bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x131855db0 '__SVInt16_t'
|-TypedefDecl 0x13200bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x131855dd0 '__SVInt32_t'
|-TypedefDecl 0x13200bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x131855df0 '__SVInt64_t'
|-TypedefDecl 0x13200c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x131855e10 '__SVUint8_t'
|-TypedefDecl 0x13200c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x131855e30 '__SVUint16_t'
|-TypedefDecl 0x13200c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x131855e50 '__SVUint32_t'
|-TypedefDecl 0x13200c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x131855e70 '__SVUint64_t'
|-TypedefDecl 0x13200c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x131855e90 '__SVFloat16_t'
|-TypedefDecl 0x13200c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x131855eb0 '__SVFloat32_t'
|-TypedefDecl 0x13200c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x131855ed0 '__SVFloat64_t'
|-TypedefDecl 0x13200c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x131855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13200c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x131855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13200c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x131855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13200c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x131855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13200c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x131855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13200c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x131855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13200c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x131855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13200c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x131855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13200c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x131855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13200c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x131856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13200c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x131856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13200c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x131856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13200c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x131856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13200c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x131856090 '__clang_svint8x3_t'
|-TypedefDecl 0x13200c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1318560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13200c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1318560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13200c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1318560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13200c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x131856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13200ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x131856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13200cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x131856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13200cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x131856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13200cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x131856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13200d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1318561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13200d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1318561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13200d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1318561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13200d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x131856210 '__clang_svint8x4_t'
|-TypedefDecl 0x13200d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x131856230 '__clang_svint16x4_t'
|-TypedefDecl 0x13200d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x131856250 '__clang_svint32x4_t'
|-TypedefDecl 0x13200d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x131856270 '__clang_svint64x4_t'
|-TypedefDecl 0x13200d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x131856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13200d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1318562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13200d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1318562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13200d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1318562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13200d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x131856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13200d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x131856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13200d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x131856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13200d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x131856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13200da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x131856390 '__SVBool_t'
|-TypedefDecl 0x13200da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1318563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13200dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1318563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13200db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1318563f0 '__SVCount_t'
|-TypedefDecl 0x13200dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13200dbb0 'char *'
|   `-BuiltinType 0x1318556b0 'char'
|-TypedefDecl 0x13200dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13200dbb0 'char *'
|   `-BuiltinType 0x1318556b0 'char'
|-FunctionDecl 0x13200dda8 <dataset_diviso_filec/func4708_vuln.c:1:1, line:47:1> line:1:1 escape_xml 'int (const char *)'
| |-ParmVarDecl 0x13200dcd8 <col:12, col:24> col:24 used text 'const char *'
| `-CompoundStmt 0x131925270 <line:2:1, line:47:1>
|   |-DeclStmt 0x13200df20 <line:3:2, col:22>
|   | `-VarDecl 0x13200deb8 <col:2, col:15> col:15 used escaped 'char *' static
|   |-DeclStmt 0x13200dfd0 <line:4:2, col:28>
|   | `-VarDecl 0x13200df68 <col:2, col:16> col:16 referenced invalid escaped_size 'int' static
|   |-DeclStmt 0x13200e068 <line:5:2, col:11>
|   | `-VarDecl 0x13200e000 <col:2, col:8> col:8 used out 'char *'
|   |-UnaryExprOrTypeTraitExpr 0x13200e0d8 <line:6:2, col:9> 'unsigned long' contains-errors sizeof
|   | `-RecoveryExpr 0x13200e0b8 <col:9> '<dependent type>' contains-errors lvalue
|   |-ForStmt 0x131925138 <line:8:2, line:44:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x13200e270 <line:8:27, col:28> 'char' <LValueToRValue>
|   | | `-UnaryOperator 0x13200e258 <col:27, col:28> 'const char' lvalue prefix '*' cannot overflow
|   | |   `-ImplicitCastExpr 0x13200e240 <col:28> 'const char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x13200e220 <col:28> 'const char *' lvalue ParmVar 0x13200dcd8 'text' 'const char *'
|   | |-BinaryOperator 0x13200e3c0 <col:34, col:50> 'const char *' contains-errors ','
|   | | |-BinaryOperator 0x13200e3a0 <col:34, col:43> 'char *' contains-errors ','
|   | | | |-UnaryOperator 0x13200e388 <col:34, col:36> '<dependent type>' contains-errors prefix '++' cannot overflow
|   | | | | `-RecoveryExpr 0x13200e368 <col:36> '<dependent type>' contains-errors lvalue
|   | | | `-UnaryOperator 0x13200e2d8 <col:41, col:43> 'char *' prefix '++'
|   | | |   `-DeclRefExpr 0x13200e2b8 <col:43> 'char *' lvalue Var 0x13200e000 'out' 'char *'
|   | | `-UnaryOperator 0x13200e330 <col:48, col:50> 'const char *' prefix '++'
|   | |   `-DeclRefExpr 0x13200e310 <col:50> 'const char *' lvalue ParmVar 0x13200dcd8 'text' 'const char *'
|   | `-CompoundStmt 0x131925118 <col:56, line:44:2>
|   |   |-IfStmt 0x1320275d0 <line:10:3, line:23:3>
|   |   | |-RecoveryExpr 0x132026660 <line:10:7, col:19> '_Bool' contains-errors
|   |   | `-CompoundStmt 0x132027590 <col:33, line:23:3>
|   |   |   |-DeclStmt 0x132026700 <line:11:4, col:24>
|   |   |   | `-VarDecl 0x132026698 <col:4, col:10> col:10 used bigger_escaped 'char *'
|   |   |   |-CompoundAssignOperator 0x132026780 <line:12:4, col:20> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   |   |   | |-RecoveryExpr 0x132026738 <col:4> '<dependent type>' contains-errors lvalue
|   |   |   | | `-DeclRefExpr 0x132026718 <col:4> 'int' lvalue Var 0x13200df68 'escaped_size' 'int'
|   |   |   | `-IntegerLiteral 0x132026760 <col:20> 'int' 128
|   |   |   |-BinaryOperator 0x132026f00 <line:13:4, col:50> 'char *' contains-errors '='
|   |   |   | |-DeclRefExpr 0x1320267b0 <col:4> 'char *' lvalue Var 0x132026698 'bigger_escaped' 'char *'
|   |   |   | `-CallExpr 0x132026ed0 <col:21, col:50> '<dependent type>' contains-errors
|   |   |   |   |-DeclRefExpr 0x132026e40 <col:21> 'void *(void *, unsigned long)' Function 0x132026c30 'realloc' 'void *(void *, unsigned long)'
|   |   |   |   |-DeclRefExpr 0x132026e60 <col:29> 'char *' lvalue Var 0x13200deb8 'escaped' 'char *'
|   |   |   |   `-RecoveryExpr 0x132026e80 <col:38> '<dependent type>' contains-errors lvalue
|   |   |   |-IfStmt 0x132027400 <line:14:4, line:20:4>
|   |   |   | |-UnaryOperator 0x132026f58 <line:14:8, col:9> 'int' prefix '!' cannot overflow
|   |   |   | | `-ImplicitCastExpr 0x132026f40 <col:9> 'char *' <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x132026f20 <col:9> 'char *' lvalue Var 0x132026698 'bigger_escaped' 'char *'
|   |   |   | `-CompoundStmt 0x1320273d0 <col:25, line:20:4>
|   |   |   |   |-CallExpr 0x1320271b8 <line:15:5, col:17> 'void'
|   |   |   |   | |-ImplicitCastExpr 0x1320271a0 <col:5> 'void (*)(void *)' <FunctionToPointerDecay>
|   |   |   |   | | `-DeclRefExpr 0x132027118 <col:5> 'void (void *)' Function 0x132026fa8 'free' 'void (void *)'
|   |   |   |   | `-ImplicitCastExpr 0x1320271f8 <col:10> 'void *' <BitCast>
|   |   |   |   |   `-ImplicitCastExpr 0x1320271e0 <col:10> 'char *' <LValueToRValue>
|   |   |   |   |     `-DeclRefExpr 0x132027138 <col:10> 'char *' lvalue Var 0x13200deb8 'escaped' 'char *'
|   |   |   |   |-BinaryOperator 0x132027288 <line:16:5, col:15> 'char *' contains-errors '='
|   |   |   |   | |-DeclRefExpr 0x132027210 <col:5> 'char *' lvalue Var 0x13200deb8 'escaped' 'char *'
|   |   |   |   | `-RecoveryExpr 0x132027268 <col:15> '<dependent type>' contains-errors lvalue
|   |   |   |   |-BinaryOperator 0x132027310 <line:17:5, col:20> '<dependent type>' contains-errors '='
|   |   |   |   | |-RecoveryExpr 0x1320272c8 <col:5> '<dependent type>' contains-errors lvalue
|   |   |   |   | | `-DeclRefExpr 0x1320272a8 <col:5> 'int' lvalue Var 0x13200df68 'escaped_size' 'int'
|   |   |   |   | `-IntegerLiteral 0x1320272f0 <col:20> 'int' 0
|   |   |   |   `-ReturnStmt 0x1320273c0 <line:19:5, col:12>
|   |   |   |     `-ImplicitCastExpr 0x1320273a8 <col:12> 'int' <PointerToIntegral>
|   |   |   |       `-ImplicitCastExpr 0x132027390 <col:12> 'char *' <ArrayToPointerDecay>
|   |   |   |         `-StringLiteral 0x132027370 <col:12> 'char[4]' lvalue "STR"
|   |   |   |-BinaryOperator 0x1320274f8 <line:21:4, col:27> 'char *' contains-errors '='
|   |   |   | |-DeclRefExpr 0x132027420 <col:4> 'char *' lvalue Var 0x13200e000 'out' 'char *'
|   |   |   | `-BinaryOperator 0x1320274d8 <col:10, col:27> '<dependent type>' contains-errors '+'
|   |   |   |   |-DeclRefExpr 0x132027440 <col:10> 'char *' lvalue Var 0x132026698 'bigger_escaped' 'char *'
|   |   |   |   `-RecoveryExpr 0x1320274b8 <col:27> '<dependent type>' contains-errors lvalue
|   |   |   `-BinaryOperator 0x132027570 <line:22:4, col:14> 'char *' '='
|   |   |     |-DeclRefExpr 0x132027518 <col:4> 'char *' lvalue Var 0x13200deb8 'escaped' 'char *'
|   |   |     `-ImplicitCastExpr 0x132027558 <col:14> 'char *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x132027538 <col:14> 'char *' lvalue Var 0x132026698 'bigger_escaped' 'char *'
|   |   `-SwitchStmt 0x131923a80 <line:24:3, line:43:3>
|   |     |-ImplicitCastExpr 0x131923a68 <line:24:11, col:12> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x131923a50 <col:11, col:12> 'char' <LValueToRValue>
|   |     |   `-UnaryOperator 0x131923a38 <col:11, col:12> 'const char' lvalue prefix '*' cannot overflow
|   |     |     `-ImplicitCastExpr 0x131923a20 <col:12> 'const char *' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x131923a00 <col:12> 'const char *' lvalue ParmVar 0x13200dcd8 'text' 'const char *'
|   |     `-CompoundStmt 0x1319250b0 <col:18, line:43:3>
|   |       |-CaseStmt 0x131923ad8 <line:25:4, line:26:22>
|   |       | |-ConstantExpr 0x131923ac0 <line:25:9> 'int'
|   |       | | `-CharacterLiteral 0x131923aa8 <col:9> 'int' 38
|   |       | `-CallExpr 0x131923df8 <line:26:5, col:22> 'char *'
|   |       |   |-ImplicitCastExpr 0x131923de0 <col:5> 'char *(*)(char *, const char *)' <FunctionToPointerDecay>
|   |       |   | `-DeclRefExpr 0x131923d20 <col:5> 'char *(char *, const char *)' Function 0x131923b40 'strcpy' 'char *(char *, const char *)'
|   |       |   |-ImplicitCastExpr 0x131923e28 <col:12> 'char *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x131923d40 <col:12> 'char *' lvalue Var 0x13200e000 'out' 'char *'
|   |       |   `-ImplicitCastExpr 0x131923e58 <col:17> 'const char *' <NoOp>
|   |       |     `-ImplicitCastExpr 0x131923e40 <col:17> 'char *' <ArrayToPointerDecay>
|   |       |       `-StringLiteral 0x131923d60 <col:17> 'char[4]' lvalue "STR"
|   |       |-BinaryOperator 0x131924240 <line:28:5, col:21> 'char *' contains-errors '='
|   |       | |-DeclRefExpr 0x131924168 <col:5> 'char *' lvalue Var 0x13200e000 'out' 'char *'
|   |       | `-BinaryOperator 0x131924220 <col:11, col:21> '<dependent type>' contains-errors '+'
|   |       |   |-DeclRefExpr 0x131924188 <col:11> 'char *' lvalue Var 0x13200deb8 'escaped' 'char *'
|   |       |   `-RecoveryExpr 0x131924200 <col:21> '<dependent type>' contains-errors lvalue
|   |       |-BreakStmt 0x131924260 <line:29:5>
|   |       |-CaseStmt 0x131924298 <line:30:4, line:31:22>
|   |       | |-ConstantExpr 0x131924280 <line:30:9> 'int'
|   |       | | `-CharacterLiteral 0x131924268 <col:9> 'int' 60
|   |       | `-CallExpr 0x131924368 <line:31:5, col:22> 'char *'
|   |       |   |-ImplicitCastExpr 0x131924350 <col:5> 'char *(*)(char *, const char *)' <FunctionToPointerDecay>
|   |       |   | `-DeclRefExpr 0x1319242c0 <col:5> 'char *(char *, const char *)' Function 0x131923b40 'strcpy' 'char *(char *, const char *)'
|   |       |   |-ImplicitCastExpr 0x131924398 <col:12> 'char *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x1319242e0 <col:12> 'char *' lvalue Var 0x13200e000 'out' 'char *'
|   |       |   `-ImplicitCastExpr 0x1319243c8 <col:17> 'const char *' <NoOp>
|   |       |     `-ImplicitCastExpr 0x1319243b0 <col:17> 'char *' <ArrayToPointerDecay>
|   |       |       `-StringLiteral 0x131924300 <col:17> 'char[4]' lvalue "STR"
|   |       |-BinaryOperator 0x1319245d8 <line:33:5, col:21> 'char *' contains-errors '='
|   |       | |-DeclRefExpr 0x131924500 <col:5> 'char *' lvalue Var 0x13200e000 'out' 'char *'
|   |       | `-BinaryOperator 0x1319245b8 <col:11, col:21> '<dependent type>' contains-errors '+'
|   |       |   |-DeclRefExpr 0x131924520 <col:11> 'char *' lvalue Var 0x13200deb8 'escaped' 'char *'
|   |       |   `-RecoveryExpr 0x131924598 <col:21> '<dependent type>' contains-errors lvalue
|   |       |-BreakStmt 0x1319245f8 <line:34:5>
|   |       |-CaseStmt 0x131924630 <line:35:4, line:36:22>
|   |       | |-ConstantExpr 0x131924618 <line:35:9> 'int'
|   |       | | `-CharacterLiteral 0x131924600 <col:9> 'int' 62
|   |       | `-CallExpr 0x131924700 <line:36:5, col:22> 'char *'
|   |       |   |-ImplicitCastExpr 0x1319246e8 <col:5> 'char *(*)(char *, const char *)' <FunctionToPointerDecay>
|   |       |   | `-DeclRefExpr 0x131924658 <col:5> 'char *(char *, const char *)' Function 0x131923b40 'strcpy' 'char *(char *, const char *)'
|   |       |   |-ImplicitCastExpr 0x131924730 <col:12> 'char *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x131924678 <col:12> 'char *' lvalue Var 0x13200e000 'out' 'char *'
|   |       |   `-ImplicitCastExpr 0x131924760 <col:17> 'const char *' <NoOp>
|   |       |     `-ImplicitCastExpr 0x131924748 <col:17> 'char *' <ArrayToPointerDecay>
|   |       |       `-StringLiteral 0x131924698 <col:17> 'char[4]' lvalue "STR"
|   |       |-BinaryOperator 0x131924970 <line:38:5, col:21> 'char *' contains-errors '='
|   |       | |-DeclRefExpr 0x131924898 <col:5> 'char *' lvalue Var 0x13200e000 'out' 'char *'
|   |       | `-BinaryOperator 0x131924950 <col:11, col:21> '<dependent type>' contains-errors '+'
|   |       |   |-DeclRefExpr 0x1319248b8 <col:11> 'char *' lvalue Var 0x13200deb8 'escaped' 'char *'
|   |       |   `-RecoveryExpr 0x131924930 <col:21> '<dependent type>' contains-errors lvalue
|   |       |-BreakStmt 0x131924990 <line:39:5>
|   |       |-DefaultStmt 0x131925088 <line:40:4, line:41:13>
|   |       | `-BinaryOperator 0x131925068 <col:5, col:13> 'char' '='
|   |       |   |-UnaryOperator 0x1319249d0 <col:5, col:6> 'char' lvalue prefix '*' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x1319249b8 <col:6> 'char *' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x131924998 <col:6> 'char *' lvalue Var 0x13200e000 'out' 'char *'
|   |       |   `-ImplicitCastExpr 0x131925050 <col:12, col:13> 'char' <LValueToRValue>
|   |       |     `-UnaryOperator 0x131925038 <col:12, col:13> 'const char' lvalue prefix '*' cannot overflow
|   |       |       `-ImplicitCastExpr 0x131925020 <col:13> 'const char *' <LValueToRValue>
|   |       |         `-DeclRefExpr 0x131925000 <col:13> 'const char *' lvalue ParmVar 0x13200dcd8 'text' 'const char *'
|   |       `-BreakStmt 0x1319250a8 <line:42:5>
|   |-BinaryOperator 0x1319251f0 <line:45:2, col:9> 'char' '='
|   | |-UnaryOperator 0x1319251a8 <col:2, col:3> 'char' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x131925190 <col:3> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x131925170 <col:3> 'char *' lvalue Var 0x13200e000 'out' 'char *'
|   | `-ImplicitCastExpr 0x1319251d8 <col:9> 'char' <IntegralCast>
|   |   `-CharacterLiteral 0x1319251c0 <col:9> 'int' 0
|   `-ReturnStmt 0x131925260 <line:46:2, col:9>
|     `-ImplicitCastExpr 0x131925248 <col:9> 'int' <PointerToIntegral>
|       `-ImplicitCastExpr 0x131925230 <col:9> 'char *' <LValueToRValue>
|         `-DeclRefExpr 0x131925210 <col:9> 'char *' lvalue Var 0x13200deb8 'escaped' 'char *'
|-FunctionDecl 0x132026c30 <line:13:21> col:21 implicit used realloc 'void *(void *, unsigned long)' extern
| |-ParmVarDecl 0x132026d30 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x132026d98 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-BuiltinAttr 0x132026cd8 <<invalid sloc>> Implicit 872
| `-AllocSizeAttr 0x132026e10 <col:21> Implicit 2
|-FunctionDecl 0x132026fa8 <line:15:5> col:5 implicit used free 'void (void *)' extern
| |-ParmVarDecl 0x1320270a8 <<invalid sloc>> <invalid sloc> 'void *'
| `-BuiltinAttr 0x132027050 <<invalid sloc>> Implicit 873
|-FunctionDecl 0x131923b40 <line:26:5> col:5 implicit used strcpy 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x131923c40 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x131923ca8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x131923be8 <<invalid sloc>> Implicit 885
`-FunctionDecl 0x131923ea8 <line:27:12> col:12 implicit used strlen 'unsigned long (const char *)' extern
  |-ParmVarDecl 0x131923fa8 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x131923f50 <<invalid sloc>> Implicit 902
