TranslationUnitDecl 0x145026408 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1450272b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1450269d0 '__int128'
|-TypedefDecl 0x145027328 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1450269f0 'unsigned __int128'
|-TypedefDecl 0x14383b630 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x14383b400 'struct __NSConstantString_tag'
|   `-Record 0x145027380 '__NSConstantString_tag'
|-TypedefDecl 0x14383b698 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x145026b90 '__SVInt8_t'
|-TypedefDecl 0x14383b700 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x145026bb0 '__SVInt16_t'
|-TypedefDecl 0x14383b768 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x145026bd0 '__SVInt32_t'
|-TypedefDecl 0x14383b7d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x145026bf0 '__SVInt64_t'
|-TypedefDecl 0x14383b838 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x145026c10 '__SVUint8_t'
|-TypedefDecl 0x14383b8a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x145026c30 '__SVUint16_t'
|-TypedefDecl 0x14383b908 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x145026c50 '__SVUint32_t'
|-TypedefDecl 0x14383b970 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x145026c70 '__SVUint64_t'
|-TypedefDecl 0x14383b9d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x145026c90 '__SVFloat16_t'
|-TypedefDecl 0x14383ba40 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x145026cb0 '__SVFloat32_t'
|-TypedefDecl 0x14383baa8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x145026cd0 '__SVFloat64_t'
|-TypedefDecl 0x14383bb10 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x145026cf0 '__SVBfloat16_t'
|-TypedefDecl 0x14383bb78 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x145026d10 '__clang_svint8x2_t'
|-TypedefDecl 0x14383bbe0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x145026d30 '__clang_svint16x2_t'
|-TypedefDecl 0x14383bc48 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x145026d50 '__clang_svint32x2_t'
|-TypedefDecl 0x14383bcb0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x145026d70 '__clang_svint64x2_t'
|-TypedefDecl 0x14383bd18 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x145026d90 '__clang_svuint8x2_t'
|-TypedefDecl 0x14383bd80 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x145026db0 '__clang_svuint16x2_t'
|-TypedefDecl 0x14383bde8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x145026dd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x14383be50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x145026df0 '__clang_svuint64x2_t'
|-TypedefDecl 0x14383beb8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x145026e10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x14383bf20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x145026e30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x14383bf88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x145026e50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x14383bff0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x145026e70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x14383c058 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x145026e90 '__clang_svint8x3_t'
|-TypedefDecl 0x14383c0c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x145026eb0 '__clang_svint16x3_t'
|-TypedefDecl 0x14383c128 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x145026ed0 '__clang_svint32x3_t'
|-TypedefDecl 0x14383c190 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x145026ef0 '__clang_svint64x3_t'
|-TypedefDecl 0x14383c1f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x145026f10 '__clang_svuint8x3_t'
|-TypedefDecl 0x14383c260 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x145026f30 '__clang_svuint16x3_t'
|-TypedefDecl 0x14383c2c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x145026f50 '__clang_svuint32x3_t'
|-TypedefDecl 0x14383c330 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x145026f70 '__clang_svuint64x3_t'
|-TypedefDecl 0x14383c398 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x145026f90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x14383c400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x145026fb0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x14383c468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x145026fd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x14383c4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x145026ff0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x14383c538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x145027010 '__clang_svint8x4_t'
|-TypedefDecl 0x14383c5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x145027030 '__clang_svint16x4_t'
|-TypedefDecl 0x14383c608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x145027050 '__clang_svint32x4_t'
|-TypedefDecl 0x14383c670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x145027070 '__clang_svint64x4_t'
|-TypedefDecl 0x14383c6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x145027090 '__clang_svuint8x4_t'
|-TypedefDecl 0x14383c740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1450270b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x14383c7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1450270d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x14383c810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1450270f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x14383c878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x145027110 '__clang_svfloat16x4_t'
|-TypedefDecl 0x14383c8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x145027130 '__clang_svfloat32x4_t'
|-TypedefDecl 0x14383c948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x145027150 '__clang_svfloat64x4_t'
|-TypedefDecl 0x14383c9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x145027170 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x14383ca18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x145027190 '__SVBool_t'
|-TypedefDecl 0x14383ca80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1450271b0 '__clang_svboolx2_t'
|-TypedefDecl 0x14383cae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1450271d0 '__clang_svboolx4_t'
|-TypedefDecl 0x14383cb50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1450271f0 '__SVCount_t'
|-TypedefDecl 0x14383cbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x14383cbb0 'char *'
|   `-BuiltinType 0x1450264b0 'char'
|-TypedefDecl 0x14383cc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x14383cbb0 'char *'
|   `-BuiltinType 0x1450264b0 'char'
|-FunctionDecl 0x143853e00 <dataset_diviso_filec/func12994_vuln.c:1:1, line:75:1> line:1:12 msg_parse_fetch 'int (struct ImapHeader *, char *)' static
| |-ParmVarDecl 0x14383d248 <col:28, col:47> col:47 used h 'struct ImapHeader *'
| |-ParmVarDecl 0x14383d2c8 <col:50, col:56> col:56 used s 'char *'
| `-CompoundStmt 0x1450f6b00 <line:2:1, line:75:1>
|   |-DeclStmt 0x143853fa8 <line:3:3, col:25>
|   | `-VarDecl 0x143853f40 <col:3, col:8> col:8 invalid tmp 'char'
|   |-DeclStmt 0x143854078 <line:4:3, col:20>
|   | `-VarDecl 0x143853fd8 <col:3, col:16> col:9 used ptmp 'char *' cinit
|   |   `-RecoveryExpr 0x143854058 <col:16> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x143854128 <line:6:3, line:7:13>
|   | |-UnaryOperator 0x1438540c8 <line:6:7, col:8> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x1438540b0 <col:8> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x143854090 <col:8> 'char *' lvalue ParmVar 0x14383d2c8 's' 'char *'
|   | `-ReturnStmt 0x143854118 <line:7:5, col:13>
|   |   `-UnaryOperator 0x143854100 <col:12, col:13> 'int' prefix '-'
|   |     `-IntegerLiteral 0x1438540e0 <col:13> 'int' 1
|   |-WhileStmt 0x1450f6ab0 <line:9:3, line:72:3>
|   | |-ImplicitCastExpr 0x143854198 <line:9:10, col:11> 'char' <LValueToRValue>
|   | | `-UnaryOperator 0x143854180 <col:10, col:11> 'char' lvalue prefix '*' cannot overflow
|   | |   `-ImplicitCastExpr 0x143854168 <col:11> 'char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x143854148 <col:11> 'char *' lvalue ParmVar 0x14383d2c8 's' 'char *'
|   | `-CompoundStmt 0x1450f6a90 <line:10:3, line:72:3>
|   |   |-CallExpr 0x143854348 <line:11:5, col:13> 'int'
|   |   | |-ImplicitCastExpr 0x143854330 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1438542c0 <col:5> 'int ()' Function 0x143854208 'SKIPWS' 'int ()'
|   |   | `-ImplicitCastExpr 0x143854370 <col:12> 'char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1438542e0 <col:12> 'char *' lvalue ParmVar 0x14383d2c8 's' 'char *'
|   |   `-IfStmt 0x1450f6a60 <line:13:5, line:71:5> has_else
|   |     |-BinaryOperator 0x1438545d0 <line:13:9, col:46> 'int' '=='
|   |     | |-CallExpr 0x143854548 <col:9, col:41> 'int'
|   |     | | |-ImplicitCastExpr 0x143854530 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x143854468 <col:9> 'int ()' Function 0x1438543b0 'mutt_str_strncasecmp' 'int ()'
|   |     | | |-ImplicitCastExpr 0x143854580 <col:30> 'char *' <ArrayToPointerDecay>
|   |     | | | `-StringLiteral 0x1438544d0 <col:30> 'char[4]' lvalue "STR"
|   |     | | |-ImplicitCastExpr 0x143854598 <col:37> 'char *' <LValueToRValue>
|   |     | | | `-DeclRefExpr 0x1438544f0 <col:37> 'char *' lvalue ParmVar 0x14383d2c8 's' 'char *'
|   |     | | `-IntegerLiteral 0x143854510 <col:40> 'int' 5
|   |     | `-IntegerLiteral 0x1438545b0 <col:46> 'int' 0
|   |     |-CompoundStmt 0x1438548b8 <line:14:5, line:18:5>
|   |     | |-BinaryOperator 0x1438547e0 <line:15:7, col:31> 'char *' '='
|   |     | | |-DeclRefExpr 0x1438545f0 <col:7> 'char *' lvalue ParmVar 0x14383d2c8 's' 'char *'
|   |     | | `-ImplicitCastExpr 0x1438547c8 <col:11, col:31> 'char *' <IntegralToPointer>
|   |     | |   `-CallExpr 0x143854768 <col:11, col:31> 'int'
|   |     | |     |-ImplicitCastExpr 0x143854750 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |     | |     | `-DeclRefExpr 0x1438546f0 <col:11> 'int ()' Function 0x143854638 'msg_parse_flags' 'int ()'
|   |     | |     |-ImplicitCastExpr 0x143854798 <col:27> 'struct ImapHeader *' <LValueToRValue>
|   |     | |     | `-DeclRefExpr 0x143854710 <col:27> 'struct ImapHeader *' lvalue ParmVar 0x14383d248 'h' 'struct ImapHeader *'
|   |     | |     `-ImplicitCastExpr 0x1438547b0 <col:30> 'char *' <LValueToRValue>
|   |     | |       `-DeclRefExpr 0x143854730 <col:30> 'char *' lvalue ParmVar 0x14383d2c8 's' 'char *'
|   |     | `-IfStmt 0x143854898 <line:16:7, line:17:17>
|   |     |   |-UnaryOperator 0x143854838 <line:16:11, col:12> 'int' prefix '!' cannot overflow
|   |     |   | `-ImplicitCastExpr 0x143854820 <col:12> 'char *' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x143854800 <col:12> 'char *' lvalue ParmVar 0x14383d2c8 's' 'char *'
|   |     |   `-ReturnStmt 0x143854888 <line:17:9, col:17>
|   |     |     `-UnaryOperator 0x143854870 <col:16, col:17> 'int' prefix '-'
|   |     |       `-IntegerLiteral 0x143854850 <col:17> 'int' 1
|   |     `-IfStmt 0x1450f6a30 <line:19:10, line:71:5> has_else
|   |       |-BinaryOperator 0x1438549f8 <line:19:14, col:51> 'int' '=='
|   |       | |-CallExpr 0x143854970 <col:14, col:46> 'int'
|   |       | | |-ImplicitCastExpr 0x143854958 <col:14> 'int (*)()' <FunctionToPointerDecay>
|   |       | | | `-DeclRefExpr 0x1438548d8 <col:14> 'int ()' Function 0x1438543b0 'mutt_str_strncasecmp' 'int ()'
|   |       | | |-ImplicitCastExpr 0x1438549a8 <col:35> 'char *' <ArrayToPointerDecay>
|   |       | | | `-StringLiteral 0x1438548f8 <col:35> 'char[4]' lvalue "STR"
|   |       | | |-ImplicitCastExpr 0x1438549c0 <col:42> 'char *' <LValueToRValue>
|   |       | | | `-DeclRefExpr 0x143854918 <col:42> 'char *' lvalue ParmVar 0x14383d2c8 's' 'char *'
|   |       | | `-IntegerLiteral 0x143854938 <col:45> 'int' 3
|   |       | `-IntegerLiteral 0x1438549d8 <col:51> 'int' 0
|   |       |-CompoundStmt 0x1450f3bb0 <line:20:5, line:27:5>
|   |       | |-CompoundAssignOperator 0x143854a58 <line:21:7, col:12> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
|   |       | | |-DeclRefExpr 0x143854a18 <col:7> 'char *' lvalue ParmVar 0x14383d2c8 's' 'char *'
|   |       | | `-IntegerLiteral 0x143854a38 <col:12> 'int' 3
|   |       | |-CallExpr 0x143854ae0 <line:22:7, col:15> 'int'
|   |       | | |-ImplicitCastExpr 0x143854ac8 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   |       | | | `-DeclRefExpr 0x143854a88 <col:7> 'int ()' Function 0x143854208 'SKIPWS' 'int ()'
|   |       | | `-ImplicitCastExpr 0x143854b08 <col:14> 'char *' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x143854aa8 <col:14> 'char *' lvalue ParmVar 0x14383d2c8 's' 'char *'
|   |       | |-IfStmt 0x143854db8 <line:23:7, line:24:17>
|   |       | | |-BinaryOperator 0x143854d50 <line:23:11, col:46> 'int' contains-errors '<'
|   |       | | | |-CallExpr 0x143854d00 <col:11, col:42> '<dependent type>' contains-errors
|   |       | | | | |-DeclRefExpr 0x143854c00 <col:11> 'int ()' Function 0x143854b48 'mutt_str_atoui' 'int ()'
|   |       | | | | |-DeclRefExpr 0x143854c20 <col:26> 'char *' lvalue ParmVar 0x14383d2c8 's' 'char *'
|   |       | | | | `-UnaryOperator 0x143854ce8 <col:29, col:39> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |       | | | |   `-CXXDependentScopeMemberExpr 0x143854ca0 <col:30, col:39> '<dependent type>' contains-errors lvalue ->uid
|   |       | | | |     `-RecoveryExpr 0x143854c78 <col:30, col:33> '<dependent type>' contains-errors lvalue
|   |       | | | |       `-DeclRefExpr 0x143854c40 <col:30> 'struct ImapHeader *' lvalue ParmVar 0x14383d248 'h' 'struct ImapHeader *'
|   |       | | | `-IntegerLiteral 0x143854d30 <col:46> 'int' 0
|   |       | | `-ReturnStmt 0x143854da8 <line:24:9, col:17>
|   |       | |   `-UnaryOperator 0x143854d90 <col:16, col:17> 'int' prefix '-'
|   |       | |     `-IntegerLiteral 0x143854d70 <col:17> 'int' 1
|   |       | `-BinaryOperator 0x1450f3b90 <line:26:7, col:27> 'char *' '='
|   |       |   |-DeclRefExpr 0x143854dd8 <col:7> 'char *' lvalue ParmVar 0x14383d2c8 's' 'char *'
|   |       |   `-ImplicitCastExpr 0x1450f3b78 <col:11, col:27> 'char *' <IntegralToPointer>
|   |       |     `-CallExpr 0x1450f3b38 <col:11, col:27> 'int'
|   |       |       |-ImplicitCastExpr 0x1450f3b20 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |       |       | `-DeclRefExpr 0x1450f3ae0 <col:11> 'int ()' Function 0x1450f3a28 'imap_next_word' 'int ()'
|   |       |       `-ImplicitCastExpr 0x1450f3b60 <col:26> 'char *' <LValueToRValue>
|   |       |         `-DeclRefExpr 0x1450f3b00 <col:26> 'char *' lvalue ParmVar 0x14383d2c8 's' 'char *'
|   |       `-IfStmt 0x1450f6a00 <line:28:10, line:71:5> has_else
|   |         |-BinaryOperator 0x1450f3d00 <line:28:14, col:52> 'int' '=='
|   |         | |-CallExpr 0x1450f3c78 <col:14, col:47> 'int'
|   |         | | |-ImplicitCastExpr 0x1450f3c60 <col:14> 'int (*)()' <FunctionToPointerDecay>
|   |         | | | `-DeclRefExpr 0x1450f3be0 <col:14> 'int ()' Function 0x1438543b0 'mutt_str_strncasecmp' 'int ()'
|   |         | | |-ImplicitCastExpr 0x1450f3cb0 <col:35> 'char *' <ArrayToPointerDecay>
|   |         | | | `-StringLiteral 0x1450f3c00 <col:35> 'char[4]' lvalue "STR"
|   |         | | |-ImplicitCastExpr 0x1450f3cc8 <col:42> 'char *' <LValueToRValue>
|   |         | | | `-DeclRefExpr 0x1450f3c20 <col:42> 'char *' lvalue ParmVar 0x14383d2c8 's' 'char *'
|   |         | | `-IntegerLiteral 0x1450f3c40 <col:45> 'int' 12
|   |         | `-IntegerLiteral 0x1450f3ce0 <col:52> 'int' 0
|   |         |-CompoundStmt 0x1450f47f0 <line:29:5, line:46:5>
|   |         | |-CompoundAssignOperator 0x1450f3d60 <line:30:7, col:12> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
|   |         | | |-DeclRefExpr 0x1450f3d20 <col:7> 'char *' lvalue ParmVar 0x14383d2c8 's' 'char *'
|   |         | | `-IntegerLiteral 0x1450f3d40 <col:12> 'int' 12
|   |         | |-CallExpr 0x1450f3de8 <line:31:7, col:15> 'int'
|   |         | | |-ImplicitCastExpr 0x1450f3dd0 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   |         | | | `-DeclRefExpr 0x1450f3d90 <col:7> 'int ()' Function 0x143854208 'SKIPWS' 'int ()'
|   |         | | `-ImplicitCastExpr 0x1450f3e10 <col:14> 'char *' <LValueToRValue>
|   |         | |   `-DeclRefExpr 0x1450f3db0 <col:14> 'char *' lvalue ParmVar 0x14383d2c8 's' 'char *'
|   |         | |-IfStmt 0x1450f4128 <line:32:7, line:36:7>
|   |         | | |-BinaryOperator 0x1450f3ec0 <line:32:11, col:17> 'int' '!='
|   |         | | | |-ImplicitCastExpr 0x1450f3ea8 <col:11, col:12> 'int' <IntegralCast>
|   |         | | | | `-ImplicitCastExpr 0x1450f3e90 <col:11, col:12> 'char' <LValueToRValue>
|   |         | | | |   `-UnaryOperator 0x1450f3e60 <col:11, col:12> 'char' lvalue prefix '*' cannot overflow
|   |         | | | |     `-ImplicitCastExpr 0x1450f3e48 <col:12> 'char *' <LValueToRValue>
|   |         | | | |       `-DeclRefExpr 0x1450f3e28 <col:12> 'char *' lvalue ParmVar 0x14383d2c8 's' 'char *'
|   |         | | | `-CharacterLiteral 0x1450f3e78 <col:17> 'int' 34
|   |         | | `-CompoundStmt 0x1450f4108 <line:33:7, line:36:7>
|   |         | |   |-CallExpr 0x1450f4058 <line:34:9, col:31> 'int'
|   |         | |   | |-ImplicitCastExpr 0x1450f4040 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |         | |   | | `-DeclRefExpr 0x1450f3fc0 <col:9> 'int ()' Function 0x1450f3f08 'mutt_debug' 'int ()'
|   |         | |   | |-IntegerLiteral 0x1450f3fe0 <col:20> 'int' 1
|   |         | |   | |-ImplicitCastExpr 0x1450f4090 <col:23> 'char *' <ArrayToPointerDecay>
|   |         | |   | | `-StringLiteral 0x1450f4000 <col:23> 'char[4]' lvalue "STR"
|   |         | |   | `-ImplicitCastExpr 0x1450f40a8 <col:30> 'char *' <LValueToRValue>
|   |         | |   |   `-DeclRefExpr 0x1450f4020 <col:30> 'char *' lvalue ParmVar 0x14383d2c8 's' 'char *'
|   |         | |   `-ReturnStmt 0x1450f40f8 <line:35:9, col:17>
|   |         | |     `-UnaryOperator 0x1450f40e0 <col:16, col:17> 'int' prefix '-'
|   |         | |       `-IntegerLiteral 0x1450f40c0 <col:17> 'int' 1
|   |         | |-UnaryOperator 0x1450f4168 <line:37:7, col:8> 'char *' postfix '++'
|   |         | | `-DeclRefExpr 0x1450f4148 <col:7> 'char *' lvalue ParmVar 0x14383d2c8 's' 'char *'
|   |         | |-BinaryOperator 0x1450f41c0 <line:38:7, col:14> 'char *' contains-errors '='
|   |         | | |-DeclRefExpr 0x1450f4180 <col:7> 'char *' contains-errors lvalue Var 0x143853fd8 'ptmp' 'char *'
|   |         | | `-RecoveryExpr 0x1450f41a0 <col:14> '<dependent type>' contains-errors lvalue
|   |         | |-WhileStmt 0x1450f4410 <line:39:7, line:40:21>
|   |         | | |-BinaryOperator 0x1450f4318 <line:39:14, col:26> 'int' '&&'
|   |         | | | |-ImplicitCastExpr 0x1450f4300 <col:14, col:15> 'int' <IntegralCast>
|   |         | | | | `-ImplicitCastExpr 0x1450f42e8 <col:14, col:15> 'char' <LValueToRValue>
|   |         | | | |   `-UnaryOperator 0x1450f4218 <col:14, col:15> 'char' lvalue prefix '*' cannot overflow
|   |         | | | |     `-ImplicitCastExpr 0x1450f4200 <col:15> 'char *' <LValueToRValue>
|   |         | | | |       `-DeclRefExpr 0x1450f41e0 <col:15> 'char *' lvalue ParmVar 0x14383d2c8 's' 'char *'
|   |         | | | `-BinaryOperator 0x1450f42c8 <col:20, col:26> 'int' '!='
|   |         | | |   |-ImplicitCastExpr 0x1450f42b0 <col:20, col:21> 'int' <IntegralCast>
|   |         | | |   | `-ImplicitCastExpr 0x1450f4298 <col:20, col:21> 'char' <LValueToRValue>
|   |         | | |   |   `-UnaryOperator 0x1450f4268 <col:20, col:21> 'char' lvalue prefix '*' cannot overflow
|   |         | | |   |     `-ImplicitCastExpr 0x1450f4250 <col:21> 'char *' <LValueToRValue>
|   |         | | |   |       `-DeclRefExpr 0x1450f4230 <col:21> 'char *' lvalue ParmVar 0x14383d2c8 's' 'char *'
|   |         | | |   `-CharacterLiteral 0x1450f4280 <col:26> 'int' 34
|   |         | | `-BinaryOperator 0x1450f43f0 <line:40:9, col:21> 'char' contains-errors '='
|   |         | |   |-UnaryOperator 0x1450f4370 <col:9, col:14> 'char' contains-errors lvalue prefix '*' cannot overflow
|   |         | |   | `-UnaryOperator 0x1450f4358 <col:10, col:14> 'char *' contains-errors postfix '++'
|   |         | |   |   `-DeclRefExpr 0x1450f4338 <col:10> 'char *' contains-errors lvalue Var 0x143853fd8 'ptmp' 'char *'
|   |         | |   `-ImplicitCastExpr 0x1450f43d8 <col:19, col:21> 'char' <LValueToRValue>
|   |         | |     `-UnaryOperator 0x1450f43c0 <col:19, col:21> 'char' lvalue prefix '*' cannot overflow
|   |         | |       `-UnaryOperator 0x1450f43a8 <col:20, col:21> 'char *' postfix '++'
|   |         | |         `-DeclRefExpr 0x1450f4388 <col:20> 'char *' lvalue ParmVar 0x14383d2c8 's' 'char *'
|   |         | |-IfStmt 0x1450f4530 <line:41:7, line:42:17>
|   |         | | |-BinaryOperator 0x1450f44c8 <line:41:11, col:17> 'int' '!='
|   |         | | | |-ImplicitCastExpr 0x1450f44b0 <col:11, col:12> 'int' <IntegralCast>
|   |         | | | | `-ImplicitCastExpr 0x1450f4498 <col:11, col:12> 'char' <LValueToRValue>
|   |         | | | |   `-UnaryOperator 0x1450f4468 <col:11, col:12> 'char' lvalue prefix '*' cannot overflow
|   |         | | | |     `-ImplicitCastExpr 0x1450f4450 <col:12> 'char *' <LValueToRValue>
|   |         | | | |       `-DeclRefExpr 0x1450f4430 <col:12> 'char *' lvalue ParmVar 0x14383d2c8 's' 'char *'
|   |         | | | `-CharacterLiteral 0x1450f4480 <col:17> 'int' 34
|   |         | | `-ReturnStmt 0x1450f4520 <line:42:9, col:17>
|   |         | |   `-UnaryOperator 0x1450f4508 <col:16, col:17> 'int' prefix '-'
|   |         | |     `-IntegerLiteral 0x1450f44e8 <col:17> 'int' 1
|   |         | |-UnaryOperator 0x1450f4570 <line:43:7, col:8> 'char *' postfix '++'
|   |         | | `-DeclRefExpr 0x1450f4550 <col:7> 'char *' lvalue ParmVar 0x14383d2c8 's' 'char *'
|   |         | |-BinaryOperator 0x1450f4608 <line:44:7, col:15> 'char' contains-errors '='
|   |         | | |-UnaryOperator 0x1450f45c0 <col:7, col:8> 'char' contains-errors lvalue prefix '*' cannot overflow
|   |         | | | `-ImplicitCastExpr 0x1450f45a8 <col:8> 'char *' contains-errors <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x1450f4588 <col:8> 'char *' contains-errors lvalue Var 0x143853fd8 'ptmp' 'char *'
|   |         | | `-ImplicitCastExpr 0x1450f45f0 <col:15> 'char' <IntegralCast>
|   |         | |   `-CharacterLiteral 0x1450f45d8 <col:15> 'int' 0
|   |         | `-BinaryOperator 0x1450f47d0 <line:45:7, col:45> '<dependent type>' contains-errors '='
|   |         |   |-RecoveryExpr 0x1450f4660 <col:7, col:10> '<dependent type>' contains-errors lvalue
|   |         |   | `-DeclRefExpr 0x1450f4628 <col:7> 'struct ImapHeader *' lvalue ParmVar 0x14383d248 'h' 'struct ImapHeader *'
|   |         |   `-CallExpr 0x1450f47a8 <col:21, col:45> '<dependent type>' contains-errors
|   |         |     |-DeclRefExpr 0x1450f4768 <col:21> 'int ()' Function 0x1450f46b0 'mutt_date_parse_imap' 'int ()'
|   |         |     `-RecoveryExpr 0x1450f4788 <col:42> '<dependent type>' contains-errors lvalue
|   |         `-IfStmt 0x1450f59c8 <line:47:10, line:71:5> has_else
|   |           |-BinaryOperator 0x1450f4970 <line:47:14, col:52> 'int' '=='
|   |           | |-CallExpr 0x1450f48e8 <col:14, col:47> 'int'
|   |           | | |-ImplicitCastExpr 0x1450f48d0 <col:14> 'int (*)()' <FunctionToPointerDecay>
|   |           | | | `-DeclRefExpr 0x1450f4850 <col:14> 'int ()' Function 0x1438543b0 'mutt_str_strncasecmp' 'int ()'
|   |           | | |-ImplicitCastExpr 0x1450f4920 <col:35> 'char *' <ArrayToPointerDecay>
|   |           | | | `-StringLiteral 0x1450f4870 <col:35> 'char[4]' lvalue "STR"
|   |           | | |-ImplicitCastExpr 0x1450f4938 <col:42> 'char *' <LValueToRValue>
|   |           | | | `-DeclRefExpr 0x1450f4890 <col:42> 'char *' lvalue ParmVar 0x14383d2c8 's' 'char *'
|   |           | | `-IntegerLiteral 0x1450f48b0 <col:45> 'int' 11
|   |           | `-IntegerLiteral 0x1450f4950 <col:52> 'int' 0
|   |           |-CompoundStmt 0x1450f5250 <line:48:5, line:57:5>
|   |           | |-CompoundAssignOperator 0x1450f49d0 <line:49:7, col:12> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
|   |           | | |-DeclRefExpr 0x1450f4990 <col:7> 'char *' lvalue ParmVar 0x14383d2c8 's' 'char *'
|   |           | | `-IntegerLiteral 0x1450f49b0 <col:12> 'int' 11
|   |           | |-CallExpr 0x1450f4a58 <line:50:7, col:15> 'int'
|   |           | | |-ImplicitCastExpr 0x1450f4a40 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   |           | | | `-DeclRefExpr 0x1450f4a00 <col:7> 'int ()' Function 0x143854208 'SKIPWS' 'int ()'
|   |           | | `-ImplicitCastExpr 0x1450f4a80 <col:14> 'char *' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x1450f4a20 <col:14> 'char *' lvalue ParmVar 0x14383d2c8 's' 'char *'
|   |           | |-BinaryOperator 0x1450f4ad8 <line:51:7, col:14> 'char *' contains-errors '='
|   |           | | |-DeclRefExpr 0x1450f4a98 <col:7> 'char *' contains-errors lvalue Var 0x143853fd8 'ptmp' 'char *'
|   |           | | `-RecoveryExpr 0x1450f4ab8 <col:14> '<dependent type>' contains-errors lvalue
|   |           | |-WhileStmt 0x1450f4f20 <line:52:7, line:53:21>
|   |           | | |-CallExpr 0x1450f4e08 <line:52:14, col:40> 'int'
|   |           | | | |-ImplicitCastExpr 0x1450f4df0 <col:14> 'int (*)(int)' <FunctionToPointerDecay>
|   |           | | | | `-DeclRefExpr 0x1450f4cf8 <col:14> 'int (int)' Function 0x1450f4b38 'isdigit' 'int (int)'
|   |           | | | `-ImplicitCastExpr 0x1450f4e30 <col:22, col:39> 'int' <IntegralCast>
|   |           | | |   `-CStyleCastExpr 0x1450f4d98 <col:22, col:39> 'unsigned char' <IntegralCast>
|   |           | | |     `-ImplicitCastExpr 0x1450f4d80 <col:38, col:39> 'char' <LValueToRValue> part_of_explicit_cast
|   |           | | |       `-UnaryOperator 0x1450f4d50 <col:38, col:39> 'char' lvalue prefix '*' cannot overflow
|   |           | | |         `-ImplicitCastExpr 0x1450f4d38 <col:39> 'char *' <LValueToRValue>
|   |           | | |           `-DeclRefExpr 0x1450f4d18 <col:39> 'char *' lvalue ParmVar 0x14383d2c8 's' 'char *'
|   |           | | `-BinaryOperator 0x1450f4f00 <line:53:9, col:21> 'char' contains-errors '='
|   |           | |   |-UnaryOperator 0x1450f4e80 <col:9, col:14> 'char' contains-errors lvalue prefix '*' cannot overflow
|   |           | |   | `-UnaryOperator 0x1450f4e68 <col:10, col:14> 'char *' contains-errors postfix '++'
|   |           | |   |   `-DeclRefExpr 0x1450f4e48 <col:10> 'char *' contains-errors lvalue Var 0x143853fd8 'ptmp' 'char *'
|   |           | |   `-ImplicitCastExpr 0x1450f4ee8 <col:19, col:21> 'char' <LValueToRValue>
|   |           | |     `-UnaryOperator 0x1450f4ed0 <col:19, col:21> 'char' lvalue prefix '*' cannot overflow
|   |           | |       `-UnaryOperator 0x1450f4eb8 <col:20, col:21> 'char *' postfix '++'
|   |           | |         `-DeclRefExpr 0x1450f4e98 <col:20> 'char *' lvalue ParmVar 0x14383d2c8 's' 'char *'
|   |           | |-BinaryOperator 0x1450f4fc0 <line:54:7, col:15> 'char' contains-errors '='
|   |           | | |-UnaryOperator 0x1450f4f78 <col:7, col:8> 'char' contains-errors lvalue prefix '*' cannot overflow
|   |           | | | `-ImplicitCastExpr 0x1450f4f60 <col:8> 'char *' contains-errors <LValueToRValue>
|   |           | | |   `-DeclRefExpr 0x1450f4f40 <col:8> 'char *' contains-errors lvalue Var 0x143853fd8 'ptmp' 'char *'
|   |           | | `-ImplicitCastExpr 0x1450f4fa8 <col:15> 'char' <IntegralCast>
|   |           | |   `-CharacterLiteral 0x1450f4f90 <col:15> 'int' 0
|   |           | `-IfStmt 0x1450f5230 <line:55:7, line:56:17>
|   |           |   |-BinaryOperator 0x1450f51c8 <line:55:11, col:52> 'int' contains-errors '<'
|   |           |   | |-CallExpr 0x1450f5178 <col:11, col:48> '<dependent type>' contains-errors
|   |           |   | | |-DeclRefExpr 0x1450f50c0 <col:11> 'int ()' Function 0x1450f5008 'mutt_str_atol' 'int ()'
|   |           |   | | |-RecoveryExpr 0x1450f50e0 <col:25> '<dependent type>' contains-errors lvalue
|   |           |   | | `-UnaryOperator 0x1450f5160 <col:30, col:34> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |           |   | |   `-RecoveryExpr 0x1450f5138 <col:31, col:34> '<dependent type>' contains-errors lvalue
|   |           |   | |     `-DeclRefExpr 0x1450f5100 <col:31> 'struct ImapHeader *' lvalue ParmVar 0x14383d248 'h' 'struct ImapHeader *'
|   |           |   | `-IntegerLiteral 0x1450f51a8 <col:52> 'int' 0
|   |           |   `-ReturnStmt 0x1450f5220 <line:56:9, col:17>
|   |           |     `-UnaryOperator 0x1450f5208 <col:16, col:17> 'int' prefix '-'
|   |           |       `-IntegerLiteral 0x1450f51e8 <col:17> 'int' 1
|   |           `-IfStmt 0x1450f5998 <line:58:10, line:71:5> has_else
|   |             |-BinaryOperator 0x1450f5550 <line:58:14, line:59:54> 'int' '||'
|   |             | |-ParenExpr 0x1450f53d0 <line:58:14, col:53> 'int'
|   |             | | `-BinaryOperator 0x1450f53b0 <col:15, col:52> 'int' '=='
|   |             | |   |-CallExpr 0x1450f5328 <col:15, col:47> 'int'
|   |             | |   | |-ImplicitCastExpr 0x1450f5310 <col:15> 'int (*)()' <FunctionToPointerDecay>
|   |             | |   | | `-DeclRefExpr 0x1450f5290 <col:15> 'int ()' Function 0x1438543b0 'mutt_str_strncasecmp' 'int ()'
|   |             | |   | |-ImplicitCastExpr 0x1450f5360 <col:36> 'char *' <ArrayToPointerDecay>
|   |             | |   | | `-StringLiteral 0x1450f52b0 <col:36> 'char[4]' lvalue "STR"
|   |             | |   | |-ImplicitCastExpr 0x1450f5378 <col:43> 'char *' <LValueToRValue>
|   |             | |   | | `-DeclRefExpr 0x1450f52d0 <col:43> 'char *' lvalue ParmVar 0x14383d2c8 's' 'char *'
|   |             | |   | `-IntegerLiteral 0x1450f52f0 <col:46> 'int' 4
|   |             | |   `-IntegerLiteral 0x1450f5390 <col:52> 'int' 0
|   |             | `-ParenExpr 0x1450f5530 <line:59:14, col:54> 'int'
|   |             |   `-BinaryOperator 0x1450f5510 <col:15, col:53> 'int' '=='
|   |             |     |-CallExpr 0x1450f5488 <col:15, col:48> 'int'
|   |             |     | |-ImplicitCastExpr 0x1450f5470 <col:15> 'int (*)()' <FunctionToPointerDecay>
|   |             |     | | `-DeclRefExpr 0x1450f53f0 <col:15> 'int ()' Function 0x1438543b0 'mutt_str_strncasecmp' 'int ()'
|   |             |     | |-ImplicitCastExpr 0x1450f54c0 <col:36> 'char *' <ArrayToPointerDecay>
|   |             |     | | `-StringLiteral 0x1450f5410 <col:36> 'char[4]' lvalue "STR"
|   |             |     | |-ImplicitCastExpr 0x1450f54d8 <col:43> 'char *' <LValueToRValue>
|   |             |     | | `-DeclRefExpr 0x1450f5430 <col:43> 'char *' lvalue ParmVar 0x14383d2c8 's' 'char *'
|   |             |     | `-IntegerLiteral 0x1450f5450 <col:46> 'int' 13
|   |             |     `-IntegerLiteral 0x1450f54f0 <col:53> 'int' 0
|   |             |-CompoundStmt 0x1450f55b8 <line:60:5, line:63:5>
|   |             | `-ReturnStmt 0x1450f55a8 <line:62:7, col:15>
|   |             |   `-UnaryOperator 0x1450f5590 <col:14, col:15> 'int' prefix '-'
|   |             |     `-IntegerLiteral 0x1450f5570 <col:15> 'int' 2
|   |             `-IfStmt 0x1450f5968 <line:64:10, line:71:5> has_else
|   |               |-BinaryOperator 0x1450f5668 <line:64:14, col:20> 'int' '=='
|   |               | |-ImplicitCastExpr 0x1450f5650 <col:14, col:15> 'int' <IntegralCast>
|   |               | | `-ImplicitCastExpr 0x1450f5638 <col:14, col:15> 'char' <LValueToRValue>
|   |               | |   `-UnaryOperator 0x1450f5608 <col:14, col:15> 'char' lvalue prefix '*' cannot overflow
|   |               | |     `-ImplicitCastExpr 0x1450f55f0 <col:15> 'char *' <LValueToRValue>
|   |               | |       `-DeclRefExpr 0x1450f55d0 <col:15> 'char *' lvalue ParmVar 0x14383d2c8 's' 'char *'
|   |               | `-CharacterLiteral 0x1450f5620 <col:20> 'int' 41
|   |               |-UnaryOperator 0x1450f56a8 <line:65:7, col:8> 'char *' postfix '++'
|   |               | `-DeclRefExpr 0x1450f5688 <col:7> 'char *' lvalue ParmVar 0x14383d2c8 's' 'char *'
|   |               `-IfStmt 0x1450f5948 <line:66:10, line:71:5>
|   |                 |-ImplicitCastExpr 0x1450f5710 <line:66:14, col:15> 'char' <LValueToRValue>
|   |                 | `-UnaryOperator 0x1450f56f8 <col:14, col:15> 'char' lvalue prefix '*' cannot overflow
|   |                 |   `-ImplicitCastExpr 0x1450f56e0 <col:15> 'char *' <LValueToRValue>
|   |                 |     `-DeclRefExpr 0x1450f56c0 <col:15> 'char *' lvalue ParmVar 0x14383d2c8 's' 'char *'
|   |                 `-CompoundStmt 0x1450f5928 <line:67:5, line:71:5>
|   |                   |-CallExpr 0x1450f5880 <line:69:7, col:26> 'int'
|   |                   | |-ImplicitCastExpr 0x1450f5868 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   |                   | | `-DeclRefExpr 0x1450f5808 <col:7> 'int ()' Function 0x1450f5750 'imap_error' 'int ()'
|   |                   | |-ImplicitCastExpr 0x1450f58b0 <col:18> 'char *' <ArrayToPointerDecay>
|   |                   | | `-StringLiteral 0x1450f5828 <col:18> 'char[4]' lvalue "STR"
|   |                   | `-ImplicitCastExpr 0x1450f58c8 <col:25> 'char *' <LValueToRValue>
|   |                   |   `-DeclRefExpr 0x1450f5848 <col:25> 'char *' lvalue ParmVar 0x14383d2c8 's' 'char *'
|   |                   `-ReturnStmt 0x1450f5918 <line:70:7, col:15>
|   |                     `-UnaryOperator 0x1450f5900 <col:14, col:15> 'int' prefix '-'
|   |                       `-IntegerLiteral 0x1450f58e0 <col:15> 'int' 1
|   `-ReturnStmt 0x1450f6af0 <line:74:3, col:10>
|     `-IntegerLiteral 0x1450f6ad0 <col:10> 'int' 0
`-FunctionDecl 0x1450f4b38 <line:52:14> col:14 implicit used isdigit 'int (int)' extern
  |-ParmVarDecl 0x1450f4c38 <<invalid sloc>> <invalid sloc> 'int'
  |-BuiltinAttr 0x1450f4be0 <<invalid sloc>> Implicit 924
  |-NoThrowAttr 0x1450f4ca8 <col:14> Implicit
  `-PureAttr 0x1450f4cd0 <col:14> Implicit
