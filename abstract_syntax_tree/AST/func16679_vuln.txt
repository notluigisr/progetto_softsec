TranslationUnitDecl 0x12c016408 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x12c0172b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x12c0169d0 '__int128'
|-TypedefDecl 0x12c017328 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x12c0169f0 'unsigned __int128'
|-TypedefDecl 0x12d078430 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12d078200 'struct __NSConstantString_tag'
|   `-Record 0x12c017380 '__NSConstantString_tag'
|-TypedefDecl 0x12d078498 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x12c016b90 '__SVInt8_t'
|-TypedefDecl 0x12d078500 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x12c016bb0 '__SVInt16_t'
|-TypedefDecl 0x12d078568 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x12c016bd0 '__SVInt32_t'
|-TypedefDecl 0x12d0785d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x12c016bf0 '__SVInt64_t'
|-TypedefDecl 0x12d078638 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x12c016c10 '__SVUint8_t'
|-TypedefDecl 0x12d0786a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x12c016c30 '__SVUint16_t'
|-TypedefDecl 0x12d078708 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x12c016c50 '__SVUint32_t'
|-TypedefDecl 0x12d078770 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x12c016c70 '__SVUint64_t'
|-TypedefDecl 0x12d0787d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x12c016c90 '__SVFloat16_t'
|-TypedefDecl 0x12d078840 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x12c016cb0 '__SVFloat32_t'
|-TypedefDecl 0x12d0788a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x12c016cd0 '__SVFloat64_t'
|-TypedefDecl 0x12d078910 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x12c016cf0 '__SVBfloat16_t'
|-TypedefDecl 0x12d078978 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x12c016d10 '__clang_svint8x2_t'
|-TypedefDecl 0x12d0789e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x12c016d30 '__clang_svint16x2_t'
|-TypedefDecl 0x12d078a48 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x12c016d50 '__clang_svint32x2_t'
|-TypedefDecl 0x12d078ab0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x12c016d70 '__clang_svint64x2_t'
|-TypedefDecl 0x12d078b18 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x12c016d90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12d078b80 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x12c016db0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12d078be8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x12c016dd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12d078c50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x12c016df0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12d078cb8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x12c016e10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12d078d20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x12c016e30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12d078d88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x12c016e50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12d078df0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x12c016e70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12d078e58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x12c016e90 '__clang_svint8x3_t'
|-TypedefDecl 0x12d078ec0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x12c016eb0 '__clang_svint16x3_t'
|-TypedefDecl 0x12d078f28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x12c016ed0 '__clang_svint32x3_t'
|-TypedefDecl 0x12d078f90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x12c016ef0 '__clang_svint64x3_t'
|-TypedefDecl 0x12d078ff8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x12c016f10 '__clang_svuint8x3_t'
|-TypedefDecl 0x12d079060 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x12c016f30 '__clang_svuint16x3_t'
|-TypedefDecl 0x12d0790c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x12c016f50 '__clang_svuint32x3_t'
|-TypedefDecl 0x12d079130 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x12c016f70 '__clang_svuint64x3_t'
|-TypedefDecl 0x12d079198 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x12c016f90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12d079a00 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x12c016fb0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12d079a68 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x12c016fd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12d079ad0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x12c016ff0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12d079b38 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x12c017010 '__clang_svint8x4_t'
|-TypedefDecl 0x12d079ba0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x12c017030 '__clang_svint16x4_t'
|-TypedefDecl 0x12d079c08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x12c017050 '__clang_svint32x4_t'
|-TypedefDecl 0x12d079c70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x12c017070 '__clang_svint64x4_t'
|-TypedefDecl 0x12d079cd8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x12c017090 '__clang_svuint8x4_t'
|-TypedefDecl 0x12d079d40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x12c0170b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12d079da8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x12c0170d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12d079e10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x12c0170f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12d079e78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x12c017110 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12d079ee0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x12c017130 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12d079f48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x12c017150 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12d079fb0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x12c017170 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12d07a018 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x12c017190 '__SVBool_t'
|-TypedefDecl 0x12d07a080 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x12c0171b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12d07a0e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x12c0171d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12d07a150 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x12c0171f0 '__SVCount_t'
|-TypedefDecl 0x12d07a1f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12d07a1b0 'char *'
|   `-BuiltinType 0x12c0164b0 'char'
|-TypedefDecl 0x12d07a268 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12d07a1b0 'char *'
|   `-BuiltinType 0x12c0164b0 'char'
|-FunctionDecl 0x12d07a5a8 <dataset_diviso_filec/func16679_vuln.c:1:1, line:48:1> line:1:7 invalid curl_easy_unescape 'char *(int *, const char *, int, int *)'
| |-ParmVarDecl 0x12d07a328 <col:26, col:32> col:32 invalid handle 'int *'
| |-ParmVarDecl 0x12d07a3a8 <col:40, col:52> col:52 used string 'const char *'
| |-ParmVarDecl 0x12d07a428 <col:60, col:64> col:64 used length 'int'
| |-ParmVarDecl 0x12d07a4a8 <line:2:26, col:31> col:31 used olen 'int *'
| `-CompoundStmt 0x12d80c0a0 <line:3:1, line:48:1>
|   |-DeclStmt 0x12d8090f8 <line:4:3, col:52>
|   | `-VarDecl 0x12d07a688 <col:3, col:51> col:7 used alloc 'int' cinit
|   |   `-BinaryOperator 0x12d8090d8 <col:15, col:51> 'int' '+'
|   |     |-ParenExpr 0x12d809098 <col:15, col:49> 'int'
|   |     | `-ConditionalOperator 0x12d809068 <col:16, col:48> 'int'
|   |     |   |-ImplicitCastExpr 0x12d809038 <col:16> 'int' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x12d07a6f0 <col:16> 'int' lvalue ParmVar 0x12d07a428 'length' 'int'
|   |     |   |-ImplicitCastExpr 0x12d809050 <col:23> 'int' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x12d07a710 <col:23> 'int' lvalue ParmVar 0x12d07a428 'length' 'int'
|   |     |   `-CStyleCastExpr 0x12d809010 <col:30, col:48> 'int' <IntegralCast>
|   |     |     `-CallExpr 0x12d808fb8 <col:35, col:48> 'unsigned long'
|   |     |       |-ImplicitCastExpr 0x12d808fa0 <col:35> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |     |       | `-DeclRefExpr 0x12d808f10 <col:35> 'unsigned long (const char *)' Function 0x12d808da0 'strlen' 'unsigned long (const char *)'
|   |     |       `-ImplicitCastExpr 0x12d808fe0 <col:42> 'const char *' <LValueToRValue>
|   |     |         `-DeclRefExpr 0x12d808f30 <col:42> 'const char *' lvalue ParmVar 0x12d07a3a8 'string' 'const char *'
|   |     `-IntegerLiteral 0x12d8090b8 <col:51> 'int' 1
|   |-DeclStmt 0x12d809478 <line:5:3, col:27>
|   | `-VarDecl 0x12d809128 <col:3, col:26> col:9 used ns 'char *' cinit
|   |   `-ImplicitCastExpr 0x12d809460 <col:14, col:26> 'char *' <BitCast>
|   |     `-CallExpr 0x12d809408 <col:14, col:26> 'void *'
|   |       |-ImplicitCastExpr 0x12d8093f0 <col:14> 'void *(*)(unsigned long)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x12d809368 <col:14> 'void *(unsigned long)' Function 0x12d8091c8 'malloc' 'void *(unsigned long)'
|   |       `-ImplicitCastExpr 0x12d809448 <col:21> 'unsigned long' <IntegralCast>
|   |         `-ImplicitCastExpr 0x12d809430 <col:21> 'int' <LValueToRValue>
|   |           `-DeclRefExpr 0x12d809388 <col:21> 'int' lvalue Var 0x12d07a688 'alloc' 'int'
|   |-DeclStmt 0x12d809510 <line:6:3, col:19>
|   | `-VarDecl 0x12d8094a8 <col:3, col:17> col:17 used in 'unsigned char'
|   |-DeclStmt 0x12d8095c8 <line:7:3, col:17>
|   | `-VarDecl 0x12d809540 <col:3, col:16> col:7 used strindex 'int' cinit
|   |   `-IntegerLiteral 0x12d8095a8 <col:16> 'int' 0
|   |-DeclStmt 0x12d809660 <line:8:3, col:20>
|   | `-VarDecl 0x12d8095f8 <col:3, col:17> col:17 used hex 'unsigned long'
|   |-IfStmt 0x12d809710 <line:11:3, line:12:12>
|   | |-UnaryOperator 0x12d8096b0 <line:11:6, col:7> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x12d809698 <col:7> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x12d809678 <col:7> 'char *' lvalue Var 0x12d809128 'ns' 'char *'
|   | `-ReturnStmt 0x12d809700 <line:12:5, col:12>
|   |   `-RecoveryExpr 0x12d8096e0 <col:12> '<dependent type>' contains-errors lvalue
|   |-WhileStmt 0x12d80be50 <line:14:3, line:41:3>
|   | |-BinaryOperator 0x12d809788 <line:14:9, col:19> 'int' '>'
|   | | |-UnaryOperator 0x12d809750 <col:9, col:11> 'int' prefix '--'
|   | | | `-DeclRefExpr 0x12d809730 <col:11> 'int' lvalue Var 0x12d07a688 'alloc' 'int'
|   | | `-IntegerLiteral 0x12d809768 <col:19> 'int' 0
|   | `-CompoundStmt 0x12d80be20 <col:22, line:41:3>
|   |   |-BinaryOperator 0x12d809848 <line:15:5, col:11> 'unsigned char' '='
|   |   | |-DeclRefExpr 0x12d8097a8 <col:5> 'unsigned char' lvalue Var 0x12d8094a8 'in' 'unsigned char'
|   |   | `-ImplicitCastExpr 0x12d809830 <col:10, col:11> 'unsigned char' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x12d809818 <col:10, col:11> 'char' <LValueToRValue>
|   |   |     `-UnaryOperator 0x12d809800 <col:10, col:11> 'const char' lvalue prefix '*' cannot overflow
|   |   |       `-ImplicitCastExpr 0x12d8097e8 <col:11> 'const char *' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x12d8097c8 <col:11> 'const char *' lvalue ParmVar 0x12d07a3a8 'string' 'const char *'
|   |   |-IfStmt 0x12d80bcc8 <line:16:5, line:37:5>
|   |   | |-BinaryOperator 0x12d093ae8 <line:16:8, col:64> 'int' '&&'
|   |   | | |-BinaryOperator 0x12d809bb0 <col:8, col:41> 'int' '&&'
|   |   | | | |-ParenExpr 0x12d8098f0 <col:8, col:18> 'int'
|   |   | | | | `-BinaryOperator 0x12d8098d0 <col:9, col:16> 'int' '=='
|   |   | | | |   |-CharacterLiteral 0x12d809868 <col:9> 'int' 37
|   |   | | | |   `-ImplicitCastExpr 0x12d8098b8 <col:16> 'int' <IntegralCast>
|   |   | | | |     `-ImplicitCastExpr 0x12d8098a0 <col:16> 'unsigned char' <LValueToRValue>
|   |   | | | |       `-DeclRefExpr 0x12d809880 <col:16> 'unsigned char' lvalue Var 0x12d8094a8 'in' 'unsigned char'
|   |   | | | `-CallExpr 0x12d809b58 <col:23, col:41> 'int'
|   |   | | |   |-ImplicitCastExpr 0x12d809b40 <col:23> 'int (*)()' <FunctionToPointerDecay>
|   |   | | |   | `-DeclRefExpr 0x12d809a70 <col:23> 'int ()' Function 0x12d8099b8 'ISXDIGIT' 'int ()'
|   |   | | |   `-ImplicitCastExpr 0x12d809b98 <col:32, col:40> 'int' <IntegralCast>
|   |   | | |     `-ImplicitCastExpr 0x12d809b80 <col:32, col:40> 'char' <LValueToRValue>
|   |   | | |       `-ArraySubscriptExpr 0x12d809ae8 <col:32, col:40> 'const char' lvalue
|   |   | | |         |-ImplicitCastExpr 0x12d809ad0 <col:32> 'const char *' <LValueToRValue>
|   |   | | |         | `-DeclRefExpr 0x12d809a90 <col:32> 'const char *' lvalue ParmVar 0x12d07a3a8 'string' 'const char *'
|   |   | | |         `-IntegerLiteral 0x12d809ab0 <col:39> 'int' 1
|   |   | | `-CallExpr 0x12d093a90 <col:46, col:64> 'int'
|   |   | |   |-ImplicitCastExpr 0x12d093a78 <col:46> 'int (*)()' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x12d809bd0 <col:46> 'int ()' Function 0x12d8099b8 'ISXDIGIT' 'int ()'
|   |   | |   `-ImplicitCastExpr 0x12d093ad0 <col:55, col:63> 'int' <IntegralCast>
|   |   | |     `-ImplicitCastExpr 0x12d093ab8 <col:55, col:63> 'char' <LValueToRValue>
|   |   | |       `-ArraySubscriptExpr 0x12d093a58 <col:55, col:63> 'const char' lvalue
|   |   | |         |-ImplicitCastExpr 0x12d093a40 <col:55> 'const char *' <LValueToRValue>
|   |   | |         | `-DeclRefExpr 0x12d093a00 <col:55> 'const char *' lvalue ParmVar 0x12d07a3a8 'string' 'const char *'
|   |   | |         `-IntegerLiteral 0x12d093a20 <col:62> 'int' 2
|   |   | `-CompoundStmt 0x12d80bc68 <col:67, line:37:5>
|   |   |   |-DeclStmt 0x12d093c18 <line:18:7, col:21>
|   |   |   | `-VarDecl 0x12d093bb0 <col:7, col:20> col:12 used hexstr 'char[3]'
|   |   |   |-DeclStmt 0x12d093cb0 <line:19:7, col:16>
|   |   |   | `-VarDecl 0x12d093c48 <col:7, col:13> col:13 used ptr 'char *'
|   |   |   |-BinaryOperator 0x12d093dd0 <line:20:7, col:27> 'char' '='
|   |   |   | |-ArraySubscriptExpr 0x12d093d20 <col:7, col:15> 'char' lvalue
|   |   |   | | |-ImplicitCastExpr 0x12d093d08 <col:7> 'char *' <ArrayToPointerDecay>
|   |   |   | | | `-DeclRefExpr 0x12d093cc8 <col:7> 'char[3]' lvalue Var 0x12d093bb0 'hexstr' 'char[3]'
|   |   |   | | `-IntegerLiteral 0x12d093ce8 <col:14> 'int' 0
|   |   |   | `-ImplicitCastExpr 0x12d093db8 <col:19, col:27> 'char' <LValueToRValue>
|   |   |   |   `-ArraySubscriptExpr 0x12d093d98 <col:19, col:27> 'const char' lvalue
|   |   |   |     |-ImplicitCastExpr 0x12d093d80 <col:19> 'const char *' <LValueToRValue>
|   |   |   |     | `-DeclRefExpr 0x12d093d40 <col:19> 'const char *' lvalue ParmVar 0x12d07a3a8 'string' 'const char *'
|   |   |   |     `-IntegerLiteral 0x12d093d60 <col:26> 'int' 1
|   |   |   |-BinaryOperator 0x12d093ef8 <line:21:7, col:27> 'char' '='
|   |   |   | |-ArraySubscriptExpr 0x12d093e48 <col:7, col:15> 'char' lvalue
|   |   |   | | |-ImplicitCastExpr 0x12d093e30 <col:7> 'char *' <ArrayToPointerDecay>
|   |   |   | | | `-DeclRefExpr 0x12d093df0 <col:7> 'char[3]' lvalue Var 0x12d093bb0 'hexstr' 'char[3]'
|   |   |   | | `-IntegerLiteral 0x12d093e10 <col:14> 'int' 1
|   |   |   | `-ImplicitCastExpr 0x12d093ee0 <col:19, col:27> 'char' <LValueToRValue>
|   |   |   |   `-ArraySubscriptExpr 0x12d093ec0 <col:19, col:27> 'const char' lvalue
|   |   |   |     |-ImplicitCastExpr 0x12d093ea8 <col:19> 'const char *' <LValueToRValue>
|   |   |   |     | `-DeclRefExpr 0x12d093e68 <col:19> 'const char *' lvalue ParmVar 0x12d07a3a8 'string' 'const char *'
|   |   |   |     `-IntegerLiteral 0x12d093e88 <col:26> 'int' 2
|   |   |   |-BinaryOperator 0x12d093fc8 <line:22:7, col:19> 'char' '='
|   |   |   | |-ArraySubscriptExpr 0x12d093f70 <col:7, col:15> 'char' lvalue
|   |   |   | | |-ImplicitCastExpr 0x12d093f58 <col:7> 'char *' <ArrayToPointerDecay>
|   |   |   | | | `-DeclRefExpr 0x12d093f18 <col:7> 'char[3]' lvalue Var 0x12d093bb0 'hexstr' 'char[3]'
|   |   |   | | `-IntegerLiteral 0x12d093f38 <col:14> 'int' 2
|   |   |   | `-ImplicitCastExpr 0x12d093fb0 <col:19> 'char' <IntegralCast>
|   |   |   |   `-IntegerLiteral 0x12d093f90 <col:19> 'int' 0
|   |   |   |-BinaryOperator 0x12d094440 <line:24:7, col:37> 'unsigned long' '='
|   |   |   | |-DeclRefExpr 0x12d093fe8 <col:7> 'unsigned long' lvalue Var 0x12d8095f8 'hex' 'unsigned long'
|   |   |   | `-CallExpr 0x12d0943d8 <col:13, col:37> 'unsigned long'
|   |   |   |   |-ImplicitCastExpr 0x12d0943c0 <col:13> 'unsigned long (*)(const char *, char **, int)' <FunctionToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x12d0942d8 <col:13> 'unsigned long (const char *, char **, int)' Function 0x12d094088 'strtoul' 'unsigned long (const char *, char **, int)'
|   |   |   |   |-ImplicitCastExpr 0x12d094428 <col:21> 'const char *' <NoOp>
|   |   |   |   | `-ImplicitCastExpr 0x12d094410 <col:21> 'char *' <ArrayToPointerDecay>
|   |   |   |   |   `-DeclRefExpr 0x12d0942f8 <col:21> 'char[3]' lvalue Var 0x12d093bb0 'hexstr' 'char[3]'
|   |   |   |   |-UnaryOperator 0x12d094338 <col:29, col:30> 'char **' prefix '&' cannot overflow
|   |   |   |   | `-DeclRefExpr 0x12d094318 <col:30> 'char *' lvalue Var 0x12d093c48 'ptr' 'char *'
|   |   |   |   `-IntegerLiteral 0x12d094350 <col:35> 'int' 16
|   |   |   |-BinaryOperator 0x12d094610 <line:26:7, col:28> 'unsigned char' '='
|   |   |   | |-DeclRefExpr 0x12d094460 <col:7> 'unsigned char' lvalue Var 0x12d8094a8 'in' 'unsigned char'
|   |   |   | `-ImplicitCastExpr 0x12d0945f8 <col:12, col:28> 'unsigned char' <IntegralCast>
|   |   |   |   `-CallExpr 0x12d0945b8 <col:12, col:28> 'int'
|   |   |   |     |-ImplicitCastExpr 0x12d0945a0 <col:12> 'int (*)()' <FunctionToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x12d094560 <col:12> 'int ()' Function 0x12d0944a8 'curlx_ultouc' 'int ()'
|   |   |   |     `-ImplicitCastExpr 0x12d0945e0 <col:25> 'unsigned long' <LValueToRValue>
|   |   |   |       `-DeclRefExpr 0x12d094580 <col:25> 'unsigned long' lvalue Var 0x12d8095f8 'hex' 'unsigned long'
|   |   |   |-IfStmt 0x12d80bb68 <line:29:7, line:33:7>
|   |   |   | |-RecoveryExpr 0x12d094828 <line:29:10> '<dependent type>' contains-errors lvalue
|   |   |   | `-CompoundStmt 0x12d80bb48 <col:15, line:33:7>
|   |   |   |   |-CallExpr 0x12d80baa8 <line:31:9, col:16> 'void'
|   |   |   |   | |-ImplicitCastExpr 0x12d80ba90 <col:9> 'void (*)(void *)' <FunctionToPointerDecay>
|   |   |   |   | | `-DeclRefExpr 0x12d80ba00 <col:9> 'void (void *)' Function 0x12d094888 'free' 'void (void *)'
|   |   |   |   | `-ImplicitCastExpr 0x12d80bae8 <col:14> 'void *' <BitCast>
|   |   |   |   |   `-ImplicitCastExpr 0x12d80bad0 <col:14> 'char *' <LValueToRValue>
|   |   |   |   |     `-DeclRefExpr 0x12d80ba20 <col:14> 'char *' lvalue Var 0x12d809128 'ns' 'char *'
|   |   |   |   `-ReturnStmt 0x12d80bb38 <line:32:9, col:16>
|   |   |   |     `-RecoveryExpr 0x12d80bb18 <col:16> '<dependent type>' contains-errors lvalue
|   |   |   |-CompoundAssignOperator 0x12d80bbc8 <line:35:7, col:15> 'const char *' '+=' ComputeLHSTy='const char *' ComputeResultTy='const char *'
|   |   |   | |-DeclRefExpr 0x12d80bb88 <col:7> 'const char *' lvalue ParmVar 0x12d07a3a8 'string' 'const char *'
|   |   |   | `-IntegerLiteral 0x12d80bba8 <col:15> 'int' 2
|   |   |   `-CompoundAssignOperator 0x12d80bc38 <line:36:7, col:14> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |     |-DeclRefExpr 0x12d80bbf8 <col:7> 'int' lvalue Var 0x12d07a688 'alloc' 'int'
|   |   |     `-IntegerLiteral 0x12d80bc18 <col:14> 'int' 2
|   |   |-BinaryOperator 0x12d80bdc8 <line:39:5, col:22> 'char' '='
|   |   | |-ArraySubscriptExpr 0x12d80bd58 <col:5, col:18> 'char' lvalue
|   |   | | |-ImplicitCastExpr 0x12d80bd40 <col:5> 'char *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x12d80bce8 <col:5> 'char *' lvalue Var 0x12d809128 'ns' 'char *'
|   |   | | `-UnaryOperator 0x12d80bd28 <col:8, col:16> 'int' postfix '++'
|   |   | |   `-DeclRefExpr 0x12d80bd08 <col:8> 'int' lvalue Var 0x12d809540 'strindex' 'int'
|   |   | `-ImplicitCastExpr 0x12d80bdb0 <col:22> 'char' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x12d80bd98 <col:22> 'unsigned char' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x12d80bd78 <col:22> 'unsigned char' lvalue Var 0x12d8094a8 'in' 'unsigned char'
|   |   `-UnaryOperator 0x12d80be08 <line:40:5, col:11> 'const char *' postfix '++'
|   |     `-DeclRefExpr 0x12d80bde8 <col:5> 'const char *' lvalue ParmVar 0x12d07a3a8 'string' 'const char *'
|   |-BinaryOperator 0x12d80bf38 <line:42:3, col:16> 'char' '='
|   | |-ArraySubscriptExpr 0x12d80bee0 <col:3, col:14> 'char' lvalue
|   | | |-ImplicitCastExpr 0x12d80beb0 <col:3> 'char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x12d80be70 <col:3> 'char *' lvalue Var 0x12d809128 'ns' 'char *'
|   | | `-ImplicitCastExpr 0x12d80bec8 <col:6> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x12d80be90 <col:6> 'int' lvalue Var 0x12d809540 'strindex' 'int'
|   | `-ImplicitCastExpr 0x12d80bf20 <col:16> 'char' <IntegralCast>
|   |   `-IntegerLiteral 0x12d80bf00 <col:16> 'int' 0
|   |-IfStmt 0x12d80c038 <line:44:3, line:46:13>
|   | |-ImplicitCastExpr 0x12d80bf78 <line:44:6> 'int *' <LValueToRValue>
|   | | `-DeclRefExpr 0x12d80bf58 <col:6> 'int *' lvalue ParmVar 0x12d07a4a8 'olen' 'int *'
|   | `-BinaryOperator 0x12d80c018 <line:46:5, col:13> 'int' '='
|   |   |-UnaryOperator 0x12d80bfc8 <col:5, col:6> 'int' lvalue prefix '*' cannot overflow
|   |   | `-ImplicitCastExpr 0x12d80bfb0 <col:6> 'int *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x12d80bf90 <col:6> 'int *' lvalue ParmVar 0x12d07a4a8 'olen' 'int *'
|   |   `-ImplicitCastExpr 0x12d80c000 <col:13> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x12d80bfe0 <col:13> 'int' lvalue Var 0x12d809540 'strindex' 'int'
|   `-ReturnStmt 0x12d80c090 <line:47:3, col:10>
|     `-ImplicitCastExpr 0x12d80c078 <col:10> 'char *' <LValueToRValue>
|       `-DeclRefExpr 0x12d80c058 <col:10> 'char *' lvalue Var 0x12d809128 'ns' 'char *'
|-FunctionDecl 0x12d808da0 <line:4:35> col:35 implicit used strlen 'unsigned long (const char *)' extern
| |-ParmVarDecl 0x12d808ea0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x12d808e48 <<invalid sloc>> Implicit 902
|-FunctionDecl 0x12d8091c8 <line:5:14> col:14 implicit used malloc 'void *(unsigned long)' extern
| |-ParmVarDecl 0x12d8092c8 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-BuiltinAttr 0x12d809270 <<invalid sloc>> Implicit 871
| `-AllocSizeAttr 0x12d809338 <col:14> Implicit 1
|-FunctionDecl 0x12d094088 <line:24:13> col:13 implicit used strtoul 'unsigned long (const char *, char **, int)' extern
| |-ParmVarDecl 0x12d094188 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x12d0941f0 <<invalid sloc>> <invalid sloc> 'char **'
| |-ParmVarDecl 0x12d094258 <<invalid sloc>> <invalid sloc> 'int'
| `-BuiltinAttr 0x12d094130 <<invalid sloc>> Implicit 879
`-FunctionDecl 0x12d094888 <line:31:9> col:9 implicit used free 'void (void *)' extern
  |-ParmVarDecl 0x12d094988 <<invalid sloc>> <invalid sloc> 'void *'
  `-BuiltinAttr 0x12d094930 <<invalid sloc>> Implicit 873
