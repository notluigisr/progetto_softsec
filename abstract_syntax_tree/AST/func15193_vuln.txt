TranslationUnitDecl 0x14c027808 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x14c0286b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x14c027dd0 '__int128'
|-TypedefDecl 0x14c028728 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x14c027df0 'unsigned __int128'
|-TypedefDecl 0x14c0f8430 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x14c0f8200 'struct __NSConstantString_tag'
|   `-Record 0x14c028780 '__NSConstantString_tag'
|-TypedefDecl 0x14c0f8498 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x14c027f90 '__SVInt8_t'
|-TypedefDecl 0x14c0f8500 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x14c027fb0 '__SVInt16_t'
|-TypedefDecl 0x14c0f8568 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x14c027fd0 '__SVInt32_t'
|-TypedefDecl 0x14c0f85d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x14c027ff0 '__SVInt64_t'
|-TypedefDecl 0x14c0f8638 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x14c028010 '__SVUint8_t'
|-TypedefDecl 0x14c0f86a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x14c028030 '__SVUint16_t'
|-TypedefDecl 0x14c0f8708 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x14c028050 '__SVUint32_t'
|-TypedefDecl 0x14c0f8770 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x14c028070 '__SVUint64_t'
|-TypedefDecl 0x14c0f87d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x14c028090 '__SVFloat16_t'
|-TypedefDecl 0x14c0f8840 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x14c0280b0 '__SVFloat32_t'
|-TypedefDecl 0x14c0f88a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x14c0280d0 '__SVFloat64_t'
|-TypedefDecl 0x14c0f8910 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x14c0280f0 '__SVBfloat16_t'
|-TypedefDecl 0x14c0f8978 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x14c028110 '__clang_svint8x2_t'
|-TypedefDecl 0x14c0f89e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x14c028130 '__clang_svint16x2_t'
|-TypedefDecl 0x14c0f8a48 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x14c028150 '__clang_svint32x2_t'
|-TypedefDecl 0x14c0f8ab0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x14c028170 '__clang_svint64x2_t'
|-TypedefDecl 0x14c0f8b18 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x14c028190 '__clang_svuint8x2_t'
|-TypedefDecl 0x14c0f8b80 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x14c0281b0 '__clang_svuint16x2_t'
|-TypedefDecl 0x14c0f8be8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x14c0281d0 '__clang_svuint32x2_t'
|-TypedefDecl 0x14c0f8c50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x14c0281f0 '__clang_svuint64x2_t'
|-TypedefDecl 0x14c0f8cb8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x14c028210 '__clang_svfloat16x2_t'
|-TypedefDecl 0x14c0f8d20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x14c028230 '__clang_svfloat32x2_t'
|-TypedefDecl 0x14c0f8d88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x14c028250 '__clang_svfloat64x2_t'
|-TypedefDecl 0x14c0f8df0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x14c028270 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x14c0f8e58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x14c028290 '__clang_svint8x3_t'
|-TypedefDecl 0x14c0f8ec0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x14c0282b0 '__clang_svint16x3_t'
|-TypedefDecl 0x14c0f8f28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x14c0282d0 '__clang_svint32x3_t'
|-TypedefDecl 0x14c0f8f90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x14c0282f0 '__clang_svint64x3_t'
|-TypedefDecl 0x14c0f8ff8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x14c028310 '__clang_svuint8x3_t'
|-TypedefDecl 0x14c0f9060 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x14c028330 '__clang_svuint16x3_t'
|-TypedefDecl 0x14c0f90c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x14c028350 '__clang_svuint32x3_t'
|-TypedefDecl 0x14c0f9130 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x14c028370 '__clang_svuint64x3_t'
|-TypedefDecl 0x14c0f9198 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x14c028390 '__clang_svfloat16x3_t'
|-TypedefDecl 0x14c0f9a00 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x14c0283b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x14c0f9a68 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x14c0283d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x14c0f9ad0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x14c0283f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x14c0f9b38 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x14c028410 '__clang_svint8x4_t'
|-TypedefDecl 0x14c0f9ba0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x14c028430 '__clang_svint16x4_t'
|-TypedefDecl 0x14c0f9c08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x14c028450 '__clang_svint32x4_t'
|-TypedefDecl 0x14c0f9c70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x14c028470 '__clang_svint64x4_t'
|-TypedefDecl 0x14c0f9cd8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x14c028490 '__clang_svuint8x4_t'
|-TypedefDecl 0x14c0f9d40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x14c0284b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x14c0f9da8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x14c0284d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x14c0f9e10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x14c0284f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x14c0f9e78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x14c028510 '__clang_svfloat16x4_t'
|-TypedefDecl 0x14c0f9ee0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x14c028530 '__clang_svfloat32x4_t'
|-TypedefDecl 0x14c0f9f48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x14c028550 '__clang_svfloat64x4_t'
|-TypedefDecl 0x14c0f9fb0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x14c028570 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x14c0fa018 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x14c028590 '__SVBool_t'
|-TypedefDecl 0x14c0fa080 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x14c0285b0 '__clang_svboolx2_t'
|-TypedefDecl 0x14c0fa0e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x14c0285d0 '__clang_svboolx4_t'
|-TypedefDecl 0x14c0fa150 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x14c0285f0 '__SVCount_t'
|-TypedefDecl 0x14c0fa1f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x14c0fa1b0 'char *'
|   `-BuiltinType 0x14c0278b0 'char'
|-TypedefDecl 0x14c0fa268 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x14c0fa1b0 'char *'
|   `-BuiltinType 0x14c0278b0 'char'
`-FunctionDecl 0x14c0fa5a8 <dataset_diviso_filec/func15193_vuln.c:1:1, line:33:1> line:1:1 invalid externalParEntProcessor 'int (int, const char *, const char *, const char **)'
  |-ParmVarDecl 0x14c0fa2f0 <col:25, col:36> col:36 referenced invalid parser 'int'
  |-ParmVarDecl 0x14c0fa370 <col:44, col:56> col:56 used s 'const char *'
  |-ParmVarDecl 0x14c0fa3f0 <col:59, col:71> col:71 used end 'const char *'
  |-ParmVarDecl 0x14c0fa4a8 <line:2:25, col:38> col:38 used nextPtr 'const char **'
  `-CompoundStmt 0x14c1146d0 <col:47, line:33:1>
    |-DeclStmt 0x14c0fa728 <line:3:3, col:23>
    | `-VarDecl 0x14c0fa688 <col:3, col:22> col:15 used next 'const char *' cinit
    |   `-ImplicitCastExpr 0x14c0fa710 <col:22> 'const char *' <LValueToRValue>
    |     `-DeclRefExpr 0x14c0fa6f0 <col:22> 'const char *' lvalue ParmVar 0x14c0fa370 's' 'const char *'
    |-DeclStmt 0x14c0fa7c0 <line:4:3, col:10>
    | `-VarDecl 0x14c0fa758 <col:3, col:7> col:7 used tok 'int'
    |-BinaryOperator 0x14c113a98 <line:6:3, col:55> 'int' contains-errors '='
    | |-DeclRefExpr 0x14c0fa7d8 <col:3> 'int' lvalue Var 0x14c0fa758 'tok' 'int'
    | `-CallExpr 0x14c113a58 <col:9, col:55> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x14c0fa950 <col:9> 'int ()' Function 0x14c0fa898 'XmlPrologTok' 'int ()'
    |   |-CXXDependentScopeMemberExpr 0x14c0fa990 <col:22, col:30> '<dependent type>' contains-errors lvalue ->m_encoding
    |   | `-RecoveryExpr 0x14c0fa970 <col:22> '<dependent type>' contains-errors lvalue
    |   |-DeclRefExpr 0x14c0fa9d8 <col:42> 'const char *' lvalue ParmVar 0x14c0fa370 's' 'const char *'
    |   |-DeclRefExpr 0x14c113a00 <col:45> 'const char *' lvalue ParmVar 0x14c0fa3f0 'end' 'const char *'
    |   `-UnaryOperator 0x14c113a40 <col:50, col:51> 'const char **' prefix '&' cannot overflow
    |     `-DeclRefExpr 0x14c113a20 <col:51> 'const char *' lvalue Var 0x14c0fa688 'next' 'const char *'
    |-IfStmt 0x14c114358 <line:7:3, line:28:3> has_else
    | |-BinaryOperator 0x14c113b10 <line:7:7, col:14> 'int' '<='
    | | |-ImplicitCastExpr 0x14c113af8 <col:7> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14c113ab8 <col:7> 'int' lvalue Var 0x14c0fa758 'tok' 'int'
    | | `-IntegerLiteral 0x14c113ad8 <col:14> 'int' 0
    | |-CompoundStmt 0x14c114068 <col:17, line:23:3>
    | | |-IfStmt 0x14c113e58 <line:8:5, line:11:5>
    | | | |-BinaryOperator 0x14c113d28 <line:8:9, col:57> 'int' contains-errors '&&'
    | | | | |-UnaryOperator 0x14c113cd0 <col:9, col:35> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | | | | `-ImplicitCastExpr 0x14c113cb8 <col:11, col:35> '<dependent type>' contains-errors <LValueToRValue>
    | | | | |   `-CXXDependentScopeMemberExpr 0x14c113b98 <col:11, col:35> '<dependent type>' contains-errors lvalue .finalBuffer
    | | | | |     `-CXXDependentScopeMemberExpr 0x14c113b50 <col:11, col:19> '<dependent type>' contains-errors lvalue ->m_parsingStatus
    | | | | |       `-RecoveryExpr 0x14c113b30 <col:11> '<dependent type>' contains-errors lvalue
    | | | | `-BinaryOperator 0x14c113d08 <col:50, col:57> 'int' contains-errors '!='
    | | | |   |-DeclRefExpr 0x14c113c10 <col:50> 'int' lvalue Var 0x14c0fa758 'tok' 'int'
    | | | |   `-RecoveryExpr 0x14c113ce8 <col:57> '<dependent type>' contains-errors lvalue
    | | | `-CompoundStmt 0x14c113e38 <col:74, line:11:5>
    | | |   |-BinaryOperator 0x14c113dd0 <line:9:7, col:18> 'const char *' '='
    | | |   | |-UnaryOperator 0x14c113d80 <col:7, col:8> 'const char *' lvalue prefix '*' cannot overflow
    | | |   | | `-ImplicitCastExpr 0x14c113d68 <col:8> 'const char **' <LValueToRValue>
    | | |   | |   `-DeclRefExpr 0x14c113d48 <col:8> 'const char **' lvalue ParmVar 0x14c0fa4a8 'nextPtr' 'const char **'
    | | |   | `-ImplicitCastExpr 0x14c113db8 <col:18> 'const char *' <LValueToRValue>
    | | |   |   `-DeclRefExpr 0x14c113d98 <col:18> 'const char *' lvalue ParmVar 0x14c0fa370 's' 'const char *'
    | | |   `-ReturnStmt 0x14c113e28 <line:10:7, col:14>
    | | |     `-RecoveryExpr 0x14c113e08 <col:14> '<dependent type>' contains-errors lvalue
    | | `-SwitchStmt 0x14c113eb0 <line:12:5, line:22:5>
    | |   |-ImplicitCastExpr 0x14c113e98 <line:12:13> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x14c113e78 <col:13> 'int' lvalue Var 0x14c0fa758 'tok' 'int'
    | |   `-CompoundStmt 0x14c114038 <col:18, line:22:5>
    | |     |-ReturnStmt 0x14c113f28 <line:14:7, col:14>
    | |     | `-RecoveryExpr 0x14c113f08 <col:14> '<dependent type>' contains-errors lvalue
    | |     |-ReturnStmt 0x14c113f88 <line:16:7, col:14>
    | |     | `-RecoveryExpr 0x14c113f68 <col:14> '<dependent type>' contains-errors lvalue
    | |     |-ReturnStmt 0x14c113fe8 <line:18:7, col:14>
    | |     | `-RecoveryExpr 0x14c113fc8 <col:14> '<dependent type>' contains-errors lvalue
    | |     `-DefaultStmt 0x14c114018 <line:20:5, line:21:7>
    | |       `-BreakStmt 0x14c114010 <col:7>
    | `-IfStmt 0x14c114338 <line:25:8, line:28:3>
    |   |-BinaryOperator 0x14c114100 <line:25:12, col:19> 'int' contains-errors '=='
    |   | |-DeclRefExpr 0x14c114088 <col:12> 'int' lvalue Var 0x14c0fa758 'tok' 'int'
    |   | `-RecoveryExpr 0x14c1140e0 <col:19> '<dependent type>' contains-errors lvalue
    |   `-CompoundStmt 0x14c114318 <col:32, line:28:3>
    |     |-BinaryOperator 0x14c114178 <line:26:5, col:9> 'const char *' '='
    |     | |-DeclRefExpr 0x14c114120 <col:5> 'const char *' lvalue ParmVar 0x14c0fa370 's' 'const char *'
    |     | `-ImplicitCastExpr 0x14c114160 <col:9> 'const char *' <LValueToRValue>
    |     |   `-DeclRefExpr 0x14c114140 <col:9> 'const char *' lvalue Var 0x14c0fa688 'next' 'const char *'
    |     `-BinaryOperator 0x14c1142f8 <line:27:5, col:57> 'int' contains-errors '='
    |       |-DeclRefExpr 0x14c114198 <col:5> 'int' lvalue Var 0x14c0fa758 'tok' 'int'
    |       `-CallExpr 0x14c1142b8 <col:11, col:57> '<dependent type>' contains-errors
    |         |-DeclRefExpr 0x14c1141b8 <col:11> 'int ()' Function 0x14c0fa898 'XmlPrologTok' 'int ()'
    |         |-CXXDependentScopeMemberExpr 0x14c1141f8 <col:24, col:32> '<dependent type>' contains-errors lvalue ->m_encoding
    |         | `-RecoveryExpr 0x14c1141d8 <col:24> '<dependent type>' contains-errors lvalue
    |         |-DeclRefExpr 0x14c114240 <col:44> 'const char *' lvalue ParmVar 0x14c0fa370 's' 'const char *'
    |         |-DeclRefExpr 0x14c114260 <col:47> 'const char *' lvalue ParmVar 0x14c0fa3f0 'end' 'const char *'
    |         `-UnaryOperator 0x14c1142a0 <col:52, col:53> 'const char **' prefix '&' cannot overflow
    |           `-DeclRefExpr 0x14c114280 <col:53> 'const char *' lvalue Var 0x14c0fa688 'next' 'const char *'
    `-BinaryOperator 0x14c114470 <line:30:3, col:25> '<dependent type>' contains-errors '='
      |-CXXDependentScopeMemberExpr 0x14c1143d0 <col:3, col:11> '<dependent type>' contains-errors lvalue ->m_processor
      | `-RecoveryExpr 0x14c1143a8 <col:3> '<dependent type>' contains-errors lvalue
      |   `-DeclRefExpr 0x14c114388 <col:3> 'int' lvalue ParmVar 0x14c0fa2f0 'parser' 'int'
      `-RecoveryExpr 0x14c114450 <col:25> '<dependent type>' contains-errors lvalue
