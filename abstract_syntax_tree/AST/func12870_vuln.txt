TranslationUnitDecl 0x120055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1200564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x120055bd0 '__int128'
|-TypedefDecl 0x120056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x120055bf0 'unsigned __int128'
|-TypedefDecl 0x120126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x120126000 'struct __NSConstantString_tag'
|   `-Record 0x120056580 '__NSConstantString_tag'
|-TypedefDecl 0x120126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x120055d90 '__SVInt8_t'
|-TypedefDecl 0x120126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x120055db0 '__SVInt16_t'
|-TypedefDecl 0x120126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x120055dd0 '__SVInt32_t'
|-TypedefDecl 0x1201263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x120055df0 '__SVInt64_t'
|-TypedefDecl 0x120126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x120055e10 '__SVUint8_t'
|-TypedefDecl 0x1201264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x120055e30 '__SVUint16_t'
|-TypedefDecl 0x120126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x120055e50 '__SVUint32_t'
|-TypedefDecl 0x120126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x120055e70 '__SVUint64_t'
|-TypedefDecl 0x1201265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x120055e90 '__SVFloat16_t'
|-TypedefDecl 0x120126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x120055eb0 '__SVFloat32_t'
|-TypedefDecl 0x1201266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x120055ed0 '__SVFloat64_t'
|-TypedefDecl 0x120126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x120055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x120126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x120055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1201267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x120055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x120126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x120055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1201268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x120055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x120126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x120055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x120126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x120055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1201269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x120055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x120126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x120055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x120126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x120056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x120126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x120056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x120126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x120056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x120126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x120056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x120126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x120056090 '__clang_svint8x3_t'
|-TypedefDecl 0x120126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1200560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x120126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1200560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x120126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1200560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x120126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x120056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x120126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x120056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x120126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x120056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x120126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x120056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x120126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x120056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x120127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1200561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x120127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1200561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1201278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1200561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x120127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x120056210 '__clang_svint8x4_t'
|-TypedefDecl 0x1201279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x120056230 '__clang_svint16x4_t'
|-TypedefDecl 0x120127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x120056250 '__clang_svint32x4_t'
|-TypedefDecl 0x120127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x120056270 '__clang_svint64x4_t'
|-TypedefDecl 0x120127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x120056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x120127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1200562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x120127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1200562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x120127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1200562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x120127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x120056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x120127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x120056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x120127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x120056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x120127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x120056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x120127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x120056390 '__SVBool_t'
|-TypedefDecl 0x120127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1200563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x120127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1200563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x120127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1200563f0 '__SVCount_t'
|-TypedefDecl 0x120127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x120127fb0 'char *'
|   `-BuiltinType 0x1200556b0 'char'
|-TypedefDecl 0x120128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x120127fb0 'char *'
|   `-BuiltinType 0x1200556b0 'char'
`-FunctionDecl 0x120141a48 <dataset_diviso_filec/func12870_vuln.c:1:1, line:57:1> line:1:12 invalid check_reg_type 'int (struct bpf_verifier_env *, int, enum bpf_arg_type, const int *)' static
  |-ParmVarDecl 0x120128648 <col:27, col:52> col:52 used env 'struct bpf_verifier_env *'
  |-ParmVarDecl 0x1201286e0 <col:57, col:61> col:61 invalid regno 'int'
  |-ParmVarDecl 0x120141878 <line:2:6, col:24> col:24 invalid arg_type 'enum bpf_arg_type'
  |-ParmVarDecl 0x1201418f8 <line:3:6, col:17> col:17 referenced invalid arg_btf_id 'const int *'
  `-CompoundStmt 0x104809578 <line:4:1, line:57:1>
    |-DeclStmt 0x120142078 <line:5:2, col:65>
    | |-RecordDecl 0x120141b10 <col:2, col:9> col:9 struct bpf_reg_state
    | |-VarDecl 0x120141c78 <col:2, col:43> col:24 used regs 'struct bpf_reg_state *' cinit
    | | `-ImplicitCastExpr 0x120141f08 <col:31, col:43> 'struct bpf_reg_state *' <IntegralToPointer>
    | |   `-CallExpr 0x120141ec8 <col:31, col:43> 'int'
    | |     |-ImplicitCastExpr 0x120141eb0 <col:31> 'int (*)()' <FunctionToPointerDecay>
    | |     | `-DeclRefExpr 0x120141e40 <col:31> 'int ()' Function 0x120141d88 'cur_regs' 'int ()'
    | |     `-ImplicitCastExpr 0x120141ef0 <col:40> 'struct bpf_verifier_env *' <LValueToRValue>
    | |       `-DeclRefExpr 0x120141e60 <col:40> 'struct bpf_verifier_env *' lvalue ParmVar 0x120128648 'env' 'struct bpf_verifier_env *'
    | `-VarDecl 0x120141f48 <col:2, col:64> col:47 used reg 'struct bpf_reg_state *' cinit
    |   `-UnaryOperator 0x120142040 <col:53, col:64> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-ArraySubscriptExpr 0x120142020 <col:54, col:64> '<dependent type>' contains-errors lvalue
    |       |-ImplicitCastExpr 0x120141ff0 <col:54> 'struct bpf_reg_state *' <LValueToRValue>
    |       | `-DeclRefExpr 0x120141fb0 <col:54> 'struct bpf_reg_state *' lvalue Var 0x120141c78 'regs' 'struct bpf_reg_state *'
    |       `-ImplicitCastExpr 0x120142008 <col:59> '<dependent type>' contains-errors <LValueToRValue>
    |         `-RecoveryExpr 0x120141fd0 <col:59> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x120142318 <line:6:2, col:46>
    | |-EnumDecl 0x120142090 <col:2, col:7> col:7 bpf_reg_type
    | |-VarDecl 0x1201421a8 <col:2, col:20> col:20 referenced invalid expected 'enum bpf_reg_type'
    | `-VarDecl 0x120142230 <col:2, col:30> col:30 invalid type 'enum bpf_reg_type'
    |-DeclStmt 0x120142518 <line:7:2, col:40>
    | |-RecordDecl 0x120142330 <col:8, col:15> col:15 struct bpf_reg_types
    | `-VarDecl 0x120142498 <col:2, col:30> col:30 used compatible 'const struct bpf_reg_types *'
    |-DeclStmt 0x120142648 <line:8:2, col:10>
    | |-VarDecl 0x120142548 <col:2, col:6> col:6 used i 'int'
    | `-VarDecl 0x1201425c8 <col:2, col:9> col:9 used j 'int'
    |-IfStmt 0x1201436d0 <line:11:2, line:14:2>
    | |-UnaryOperator 0x120143418 <line:11:6, col:7> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x120143400 <col:7> 'const struct bpf_reg_types *' <LValueToRValue>
    | |   `-DeclRefExpr 0x1201427e0 <col:7> 'const struct bpf_reg_types *' lvalue Var 0x120142498 'compatible' 'const struct bpf_reg_types *'
    | `-CompoundStmt 0x1201436b0 <col:19, line:14:2>
    |   |-CallExpr 0x1201435d0 <line:12:3, col:31> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x120143510 <col:3> 'int ()' Function 0x120143458 'verbose' 'int ()'
    |   | |-DeclRefExpr 0x120143530 <col:11> 'struct bpf_verifier_env *' lvalue ParmVar 0x120128648 'env' 'struct bpf_verifier_env *'
    |   | |-StringLiteral 0x120143590 <col:16> 'char[4]' lvalue "STR"
    |   | `-RecoveryExpr 0x1201435b0 <col:23> '<dependent type>' contains-errors lvalue
    |   `-ReturnStmt 0x1201436a0 <line:13:3, col:11>
    |     `-UnaryOperator 0x120143688 <col:10, col:11> '<dependent type>' contains-errors prefix '-' cannot overflow
    |       `-ImplicitCastExpr 0x120143670 <col:11> '<dependent type>' contains-errors <LValueToRValue>
    |         `-RecoveryExpr 0x120143650 <col:11> '<dependent type>' contains-errors lvalue
    |-ForStmt 0x120143c58 <line:16:2, line:23:2>
    | |-BinaryOperator 0x120143730 <line:16:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x1201436f0 <col:7> 'int' lvalue Var 0x120142548 'i' 'int'
    | | `-IntegerLiteral 0x120143710 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x1201438f8 <col:14, col:46> 'int' contains-errors '<'
    | | |-DeclRefExpr 0x120143750 <col:14> 'int' lvalue Var 0x120142548 'i' 'int'
    | | `-CallExpr 0x1201438d0 <col:18, col:46> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x120143850 <col:18> 'int ()' Function 0x120143798 'ARRAY_SIZE' 'int ()'
    | |   `-RecoveryExpr 0x1201438a8 <col:29, col:41> '<dependent type>' contains-errors lvalue
    | |     `-DeclRefExpr 0x120143870 <col:29> 'const struct bpf_reg_types *' lvalue Var 0x120142498 'compatible' 'const struct bpf_reg_types *'
    | |-UnaryOperator 0x120143938 <col:49, col:50> 'int' postfix '++'
    | | `-DeclRefExpr 0x120143918 <col:49> 'int' lvalue Var 0x120142548 'i' 'int'
    | `-CompoundStmt 0x120143c30 <col:54, line:23:2>
    |   |-BinaryOperator 0x120143a68 <line:17:3, col:33> '<dependent type>' contains-errors '='
    |   | |-RecoveryExpr 0x120143970 <col:3> '<dependent type>' contains-errors lvalue
    |   | | `-DeclRefExpr 0x120143950 <col:3> 'enum bpf_reg_type' lvalue Var 0x1201421a8 'expected' 'enum bpf_reg_type'
    |   | `-ArraySubscriptExpr 0x120143a48 <col:14, col:33> '<dependent type>' contains-errors lvalue
    |   |   |-ImplicitCastExpr 0x120143a18 <col:14, col:26> '<dependent type>' contains-errors <LValueToRValue>
    |   |   | `-RecoveryExpr 0x1201439d0 <col:14, col:26> '<dependent type>' contains-errors lvalue
    |   |   |   `-DeclRefExpr 0x120143998 <col:14> 'const struct bpf_reg_types *' lvalue Var 0x120142498 'compatible' 'const struct bpf_reg_types *'
    |   |   `-ImplicitCastExpr 0x120143a30 <col:32> 'int' <LValueToRValue>
    |   |     `-DeclRefExpr 0x1201439f8 <col:32> 'int' lvalue Var 0x120142548 'i' 'int'
    |   |-IfStmt 0x120143b28 <line:18:3, line:19:4>
    |   | |-BinaryOperator 0x120143b00 <line:18:7, col:19> 'int' contains-errors '=='
    |   | | |-RecoveryExpr 0x120143a88 <col:7> '<dependent type>' contains-errors lvalue
    |   | | `-RecoveryExpr 0x120143ae0 <col:19> '<dependent type>' contains-errors lvalue
    |   | `-BreakStmt 0x120143b20 <line:19:4>
    |   `-IfStmt 0x120143c10 <line:21:3, line:22:9>
    |     |-BinaryOperator 0x120143b88 <line:21:7, col:15> 'int' contains-errors '=='
    |     | |-RecoveryExpr 0x120143b48 <col:7> '<dependent type>' contains-errors lvalue
    |     | `-RecoveryExpr 0x120143b68 <col:15> '<dependent type>' contains-errors lvalue
    |     `-GotoStmt 0x120143bf8 <line:22:4, col:9> 'found' 0x120143ba8
    |-CallExpr 0x120143e80 <line:25:2, col:52> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x120143c90 <col:2> 'int ()' Function 0x120143458 'verbose' 'int ()'
    | |-DeclRefExpr 0x120143cb0 <col:10> 'struct bpf_verifier_env *' lvalue ParmVar 0x120128648 'env' 'struct bpf_verifier_env *'
    | |-StringLiteral 0x120143cd0 <col:15> 'char[4]' lvalue "STR"
    | |-RecoveryExpr 0x120143cf0 <col:22> '<dependent type>' contains-errors lvalue
    | `-CallExpr 0x120143e50 <col:29, col:51> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x120143df0 <col:29> 'int ()' Function 0x120143d38 'reg_type_str' 'int ()'
    |   |-DeclRefExpr 0x120143e10 <col:42> 'struct bpf_verifier_env *' lvalue ParmVar 0x120128648 'env' 'struct bpf_verifier_env *'
    |   `-RecoveryExpr 0x120143e30 <col:47> '<dependent type>' contains-errors lvalue
    |-ForStmt 0x120144200 <line:26:2, line:27:62>
    | |-BinaryOperator 0x120143f00 <line:26:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x120143ec0 <col:7> 'int' lvalue Var 0x1201425c8 'j' 'int'
    | | `-IntegerLiteral 0x120143ee0 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x120143fd0 <col:14, col:22> 'int' '<'
    | | |-BinaryOperator 0x120143f78 <col:14, col:18> 'int' '+'
    | | | |-ImplicitCastExpr 0x120143f60 <col:14> 'int' <LValueToRValue>
    | | | | `-DeclRefExpr 0x120143f20 <col:14> 'int' lvalue Var 0x1201425c8 'j' 'int'
    | | | `-IntegerLiteral 0x120143f40 <col:18> 'int' 1
    | | `-ImplicitCastExpr 0x120143fb8 <col:22> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x120143f98 <col:22> 'int' lvalue Var 0x120142548 'i' 'int'
    | |-UnaryOperator 0x120144010 <col:25, col:26> 'int' postfix '++'
    | | `-DeclRefExpr 0x120143ff0 <col:25> 'int' lvalue Var 0x1201425c8 'j' 'int'
    | `-CallExpr 0x1201441c8 <line:27:3, col:62> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x120144028 <col:3> 'int ()' Function 0x120143458 'verbose' 'int ()'
    |   |-DeclRefExpr 0x120144048 <col:11> 'struct bpf_verifier_env *' lvalue ParmVar 0x120128648 'env' 'struct bpf_verifier_env *'
    |   |-StringLiteral 0x120144068 <col:16> 'char[4]' lvalue "STR"
    |   `-CallExpr 0x120144198 <col:23, col:61> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x120144088 <col:23> 'int ()' Function 0x120143d38 'reg_type_str' 'int ()'
    |     |-DeclRefExpr 0x1201440a8 <col:36> 'struct bpf_verifier_env *' lvalue ParmVar 0x120128648 'env' 'struct bpf_verifier_env *'
    |     `-ArraySubscriptExpr 0x120144178 <col:41, col:60> '<dependent type>' contains-errors lvalue
    |       |-ImplicitCastExpr 0x120144148 <col:41, col:53> '<dependent type>' contains-errors <LValueToRValue>
    |       | `-RecoveryExpr 0x120144100 <col:41, col:53> '<dependent type>' contains-errors lvalue
    |       |   `-DeclRefExpr 0x1201440c8 <col:41> 'const struct bpf_reg_types *' lvalue Var 0x120142498 'compatible' 'const struct bpf_reg_types *'
    |       `-ImplicitCastExpr 0x120144160 <col:59> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x120144128 <col:59> 'int' lvalue Var 0x1201425c8 'j' 'int'
    |-CallExpr 0x104808800 <line:28:2, col:61> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x120144238 <col:2> 'int ()' Function 0x120143458 'verbose' 'int ()'
    | |-DeclRefExpr 0x120144258 <col:10> 'struct bpf_verifier_env *' lvalue ParmVar 0x120128648 'env' 'struct bpf_verifier_env *'
    | |-StringLiteral 0x120144278 <col:15> 'char[4]' lvalue "STR"
    | `-CallExpr 0x1201443a8 <col:22, col:60> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x120144298 <col:22> 'int ()' Function 0x120143d38 'reg_type_str' 'int ()'
    |   |-DeclRefExpr 0x1201442b8 <col:35> 'struct bpf_verifier_env *' lvalue ParmVar 0x120128648 'env' 'struct bpf_verifier_env *'
    |   `-ArraySubscriptExpr 0x120144388 <col:40, col:59> '<dependent type>' contains-errors lvalue
    |     |-ImplicitCastExpr 0x120144358 <col:40, col:52> '<dependent type>' contains-errors <LValueToRValue>
    |     | `-RecoveryExpr 0x120144310 <col:40, col:52> '<dependent type>' contains-errors lvalue
    |     |   `-DeclRefExpr 0x1201442d8 <col:40> 'const struct bpf_reg_types *' lvalue Var 0x120142498 'compatible' 'const struct bpf_reg_types *'
    |     `-ImplicitCastExpr 0x120144370 <col:58> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x120144338 <col:58> 'int' lvalue Var 0x1201425c8 'j' 'int'
    |-LabelStmt 0x104809528 <line:31:1, line:54:2> 'found'
    | `-IfStmt 0x104809508 <line:32:2, line:54:2>
    |   |-RecoveryExpr 0x104808858 <line:32:6, col:14> '_Bool' contains-errors
    |   `-CompoundStmt 0x1048094e0 <col:29, line:54:2>
    |     |-IfStmt 0x104808b50 <line:33:3, line:39:3>
    |     | |-UnaryOperator 0x1048088b0 <line:33:7, col:8> '<dependent type>' contains-errors prefix '!' cannot overflow
    |     | | `-ImplicitCastExpr 0x104808898 <col:8> '<dependent type>' contains-errors <LValueToRValue>
    |     | |   `-RecoveryExpr 0x104808878 <col:8> '<dependent type>' contains-errors lvalue
    |     | `-CompoundStmt 0x104808b30 <col:20, line:39:3>
    |     |   |-IfStmt 0x104808a48 <line:34:4, line:37:4>
    |     |   | |-UnaryOperator 0x104808940 <line:34:8, col:21> '<dependent type>' contains-errors prefix '!' cannot overflow
    |     |   | | `-ImplicitCastExpr 0x104808928 <col:9, col:21> '<dependent type>' contains-errors <LValueToRValue>
    |     |   | |   `-RecoveryExpr 0x104808900 <col:9, col:21> '<dependent type>' contains-errors lvalue
    |     |   | |     `-DeclRefExpr 0x1048088c8 <col:9> 'const struct bpf_reg_types *' lvalue Var 0x120142498 'compatible' 'const struct bpf_reg_types *'
    |     |   | `-CompoundStmt 0x104808a30 <col:29, line:37:4>
    |     |   |   `-CallExpr 0x1048089d0 <line:35:5, col:23> 'int'
    |     |   |     |-ImplicitCastExpr 0x1048089b8 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |     |   |     | `-DeclRefExpr 0x104808958 <col:5> 'int ()' Function 0x120143458 'verbose' 'int ()'
    |     |   |     |-ImplicitCastExpr 0x104808a00 <col:13> 'struct bpf_verifier_env *' <LValueToRValue>
    |     |   |     | `-DeclRefExpr 0x104808978 <col:13> 'struct bpf_verifier_env *' lvalue ParmVar 0x120128648 'env' 'struct bpf_verifier_env *'
    |     |   |     `-ImplicitCastExpr 0x104808a18 <col:18> 'char *' <ArrayToPointerDecay>
    |     |   |       `-StringLiteral 0x104808998 <col:18> 'char[4]' lvalue "STR"
    |     |   `-BinaryOperator 0x104808b10 <line:38:4, col:29> '<dependent type>' contains-errors '='
    |     |     |-RecoveryExpr 0x104808a88 <col:4> '<dependent type>' contains-errors lvalue
    |     |     | `-DeclRefExpr 0x104808a68 <col:4> 'const int *' lvalue ParmVar 0x1201418f8 'arg_btf_id' 'const int *'
    |     |     `-RecoveryExpr 0x104808ae8 <col:17, col:29> '<dependent type>' contains-errors lvalue
    |     |       `-DeclRefExpr 0x104808ab0 <col:17> 'const struct bpf_reg_types *' lvalue Var 0x120142498 'compatible' 'const struct bpf_reg_types *'
    |     |-IfStmt 0x104809168 <line:41:3, line:47:3>
    |     | |-RecoveryExpr 0x104808e58 <line:41:7, line:42:32> '_Bool' contains-errors
    |     | `-CompoundStmt 0x104809158 <col:35, line:47:3>
    |     `-IfStmt 0x1048094c0 <line:49:3, line:53:3>
    |       |-BinaryOperator 0x1048093d0 <line:49:7, col:52> 'int' contains-errors '||'
    |       | |-UnaryOperator 0x104809310 <col:7, col:34> '<dependent type>' contains-errors prefix '!' cannot overflow
    |       | | `-CallExpr 0x1048092e8 <col:8, col:34> '<dependent type>' contains-errors
    |       | |   |-DeclRefExpr 0x104809268 <col:8> 'int ()' Function 0x1048091b0 'tnum_is_const' 'int ()'
    |       | |   `-RecoveryExpr 0x1048092c0 <col:22, col:27> '<dependent type>' contains-errors lvalue
    |       | |     `-DeclRefExpr 0x104809288 <col:22> 'struct bpf_reg_state *' contains-errors lvalue Var 0x120141f48 'reg' 'struct bpf_reg_state *'
    |       | `-CXXDependentScopeMemberExpr 0x104809388 <col:39, col:52> '<dependent type>' contains-errors lvalue .value
    |       |   `-RecoveryExpr 0x104809360 <col:39, col:44> '<dependent type>' contains-errors lvalue
    |       |     `-DeclRefExpr 0x104809328 <col:39> 'struct bpf_reg_state *' contains-errors lvalue Var 0x120141f48 'reg' 'struct bpf_reg_state *'
    |       `-CompoundStmt 0x1048094a8 <col:59, line:53:3>
    |         `-CallExpr 0x104809470 <line:50:4, line:51:10> '<dependent type>' contains-errors
    |           |-DeclRefExpr 0x1048093f0 <line:50:4> 'int ()' Function 0x120143458 'verbose' 'int ()'
    |           |-DeclRefExpr 0x104809410 <col:12> 'struct bpf_verifier_env *' lvalue ParmVar 0x120128648 'env' 'struct bpf_verifier_env *'
    |           |-StringLiteral 0x104809430 <col:17> 'char[4]' lvalue "STR"
    |           `-RecoveryExpr 0x104809450 <line:51:5> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x104809568 <line:56:2, col:9>
      `-IntegerLiteral 0x104809548 <col:9> 'int' 0
