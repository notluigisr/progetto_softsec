TranslationUnitDecl 0x132827808 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1328286b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x132827dd0 '__int128'
|-TypedefDecl 0x132828728 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x132827df0 'unsigned __int128'
|-TypedefDecl 0x13101b230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13101b000 'struct __NSConstantString_tag'
|   `-Record 0x132828780 '__NSConstantString_tag'
|-TypedefDecl 0x13101b298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x132827f90 '__SVInt8_t'
|-TypedefDecl 0x13101b300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x132827fb0 '__SVInt16_t'
|-TypedefDecl 0x13101b368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x132827fd0 '__SVInt32_t'
|-TypedefDecl 0x13101b3d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x132827ff0 '__SVInt64_t'
|-TypedefDecl 0x13101b438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x132828010 '__SVUint8_t'
|-TypedefDecl 0x13101b4a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x132828030 '__SVUint16_t'
|-TypedefDecl 0x13101b508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x132828050 '__SVUint32_t'
|-TypedefDecl 0x13101b570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x132828070 '__SVUint64_t'
|-TypedefDecl 0x13101b5d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x132828090 '__SVFloat16_t'
|-TypedefDecl 0x13101b640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x1328280b0 '__SVFloat32_t'
|-TypedefDecl 0x13101b6a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x1328280d0 '__SVFloat64_t'
|-TypedefDecl 0x13101b710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x1328280f0 '__SVBfloat16_t'
|-TypedefDecl 0x13101b778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x132828110 '__clang_svint8x2_t'
|-TypedefDecl 0x13101b7e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x132828130 '__clang_svint16x2_t'
|-TypedefDecl 0x13101b848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x132828150 '__clang_svint32x2_t'
|-TypedefDecl 0x13101b8b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x132828170 '__clang_svint64x2_t'
|-TypedefDecl 0x13101b918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x132828190 '__clang_svuint8x2_t'
|-TypedefDecl 0x13101b980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x1328281b0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13101b9e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x1328281d0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13101ba50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x1328281f0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13101bab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x132828210 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13101bb20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x132828230 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13101bb88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x132828250 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13101bbf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x132828270 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13101bc58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x132828290 '__clang_svint8x3_t'
|-TypedefDecl 0x13101bcc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1328282b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13101bd28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1328282d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13101bd90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1328282f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13101bdf8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x132828310 '__clang_svuint8x3_t'
|-TypedefDecl 0x13101be60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x132828330 '__clang_svuint16x3_t'
|-TypedefDecl 0x13101bec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x132828350 '__clang_svuint32x3_t'
|-TypedefDecl 0x13101bf30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x132828370 '__clang_svuint64x3_t'
|-TypedefDecl 0x13101bf98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x132828390 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13101c000 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1328283b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13101c068 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1328283d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13101c0d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1328283f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13101c138 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x132828410 '__clang_svint8x4_t'
|-TypedefDecl 0x13101c1a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x132828430 '__clang_svint16x4_t'
|-TypedefDecl 0x13101c208 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x132828450 '__clang_svint32x4_t'
|-TypedefDecl 0x13101c270 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x132828470 '__clang_svint64x4_t'
|-TypedefDecl 0x13101c2d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x132828490 '__clang_svuint8x4_t'
|-TypedefDecl 0x13101c340 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1328284b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13101c3a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1328284d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13101c410 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1328284f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13101c478 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x132828510 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13101c4e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x132828530 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13101c548 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x132828550 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13101c5b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x132828570 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13101c618 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x132828590 '__SVBool_t'
|-TypedefDecl 0x13101c680 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1328285b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13101c6e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1328285d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13101c750 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1328285f0 '__SVCount_t'
|-TypedefDecl 0x13101c7f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13101c7b0 'char *'
|   `-BuiltinType 0x1328278b0 'char'
|-TypedefDecl 0x13101c868 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13101c7b0 'char *'
|   `-BuiltinType 0x1328278b0 'char'
|-FunctionDecl 0x13101cae0 <dataset_diviso_filec/func12742_vuln.c:1:1, line:45:1> line:1:6 invalid get_checksum2 'void (char *, int, char *)'
| |-ParmVarDecl 0x13101c8d8 <col:20, col:26> col:26 used buf 'char *'
| |-ParmVarDecl 0x13101c970 <col:31, col:37> col:37 referenced invalid len 'int'
| |-ParmVarDecl 0x13101c9f0 <col:42, col:48> col:48 sum 'char *'
| `-CompoundStmt 0x132912bf0 <line:2:1, line:45:1>
|   `-IfStmt 0x132912bc0 <line:5:2, line:44:2> has_else
|     |-BinaryOperator 0x13101cc18 <line:5:6, col:26> 'int' contains-errors '>='
|     | |-RecoveryExpr 0x13101cbf8 <col:6> '<dependent type>' contains-errors lvalue
|     | `-IntegerLiteral 0x13101cbb8 <col:26> 'int' 30
|     |-CompoundStmt 0x132911820 <col:30, line:14:2>
|     | |-DeclStmt 0x13101cd48 <line:6:3, col:19>
|     | | `-VarDecl 0x13101cce0 <col:3, col:18> col:9 used seedbuf 'char[4]'
|     | |-CallExpr 0x13101cf70 <line:7:3, col:15> '<dependent type>' contains-errors
|     | | |-DeclRefExpr 0x13101cec0 <col:3> 'int ()' Function 0x13101ce08 'md5_begin' 'int ()'
|     | | `-UnaryOperator 0x13101cf58 <col:13, col:14> '<dependent type>' contains-errors prefix '&' cannot overflow
|     | |   `-RecoveryExpr 0x13101cf38 <col:14> '<dependent type>' contains-errors lvalue
|     | `-IfStmt 0x1329116b8 <line:9:3, line:12:3>
|     |   |-RecoveryExpr 0x132911358 <line:9:7> '<dependent type>' contains-errors lvalue
|     |   `-CompoundStmt 0x132911698 <col:22, line:12:3>
|     |     |-CallExpr 0x132911528 <line:10:4, col:36> '<dependent type>' contains-errors
|     |     | |-DeclRefExpr 0x132911458 <col:4> 'int ()' Function 0x1329113a0 'SIVALu' 'int ()'
|     |     | |-DeclRefExpr 0x132911478 <col:11> 'char[4]' lvalue Var 0x13101cce0 'seedbuf' 'char[4]'
|     |     | |-IntegerLiteral 0x132911498 <col:20> 'int' 0
|     |     | `-RecoveryExpr 0x132911508 <col:23> '<dependent type>' contains-errors lvalue
|     |     `-CallExpr 0x132911660 <line:11:4, col:29> '<dependent type>' contains-errors
|     |       |-DeclRefExpr 0x132911560 <col:4> 'int ()' Function 0x132911200 'md5_update' 'int ()'
|     |       |-UnaryOperator 0x132911648 <col:15, col:16> '<dependent type>' contains-errors prefix '&' cannot overflow
|     |       | `-RecoveryExpr 0x132911628 <col:16> '<dependent type>' contains-errors lvalue
|     |       |-DeclRefExpr 0x1329115b0 <col:19> 'char[4]' lvalue Var 0x13101cce0 'seedbuf' 'char[4]'
|     |       `-IntegerLiteral 0x1329115d0 <col:28> 'int' 4
|     `-CompoundStmt 0x132912b88 <line:14:9, line:44:2>
|       |-DeclStmt 0x1329118c8 <line:16:3, col:20>
|       | `-VarDecl 0x132911860 <col:3, col:16> col:16 used buf1 'char *' static
|       |-DeclStmt 0x132911960 <line:17:3, col:20>
|       | `-VarDecl 0x1329118f8 <col:3, col:16> col:16 referenced invalid len1 'int' static
|       |-IfStmt 0x132912228 <line:21:3, line:28:3>
|       | |-BinaryOperator 0x132911ab8 <line:21:7, col:13> 'int' contains-errors '>'
|       | | |-RecoveryExpr 0x132911a78 <col:7> '<dependent type>' contains-errors lvalue
|       | | `-RecoveryExpr 0x132911a98 <col:13> '<dependent type>' contains-errors lvalue
|       | `-CompoundStmt 0x132912200 <col:19, line:28:3>
|       |   |-IfStmt 0x132911db0 <line:22:4, line:23:14>
|       |   | |-ImplicitCastExpr 0x132911af8 <line:22:8> 'char *' <LValueToRValue>
|       |   | | `-DeclRefExpr 0x132911ad8 <col:8> 'char *' lvalue Var 0x132911860 'buf1' 'char *'
|       |   | `-CallExpr 0x132911d58 <line:23:5, col:14> 'void'
|       |   |   |-ImplicitCastExpr 0x132911d40 <col:5> 'void (*)(void *)' <FunctionToPointerDecay>
|       |   |   | `-DeclRefExpr 0x132911cb8 <col:5> 'void (void *)' Function 0x132911b48 'free' 'void (void *)'
|       |   |   `-ImplicitCastExpr 0x132911d98 <col:10> 'void *' <BitCast>
|       |   |     `-ImplicitCastExpr 0x132911d80 <col:10> 'char *' <LValueToRValue>
|       |   |       `-DeclRefExpr 0x132911cd8 <col:10> 'char *' lvalue Var 0x132911860 'buf1' 'char *'
|       |   |-BinaryOperator 0x132911fb8 <line:25:4, col:11> '<dependent type>' contains-errors '='
|       |   | |-RecoveryExpr 0x132911f70 <col:4> '<dependent type>' contains-errors lvalue
|       |   | | `-DeclRefExpr 0x132911f50 <col:4> 'int' lvalue Var 0x1329118f8 'len1' 'int'
|       |   | `-RecoveryExpr 0x132911f98 <col:11> '<dependent type>' contains-errors lvalue
|       |   `-IfStmt 0x1329121d8 <line:26:4, line:27:24>
|       |     |-UnaryOperator 0x132912010 <line:26:8, col:9> 'int' prefix '!' cannot overflow
|       |     | `-ImplicitCastExpr 0x132911ff8 <col:9> 'char *' <LValueToRValue>
|       |     |   `-DeclRefExpr 0x132911fd8 <col:9> 'char *' lvalue Var 0x132911860 'buf1' 'char *'
|       |     `-CallExpr 0x132912198 <line:27:5, col:24> 'int'
|       |       |-ImplicitCastExpr 0x132912180 <col:5> 'int (*)()' <FunctionToPointerDecay>
|       |       | `-DeclRefExpr 0x132912108 <col:5> 'int ()' Function 0x132912050 'out_of_memory' 'int ()'
|       |       `-ImplicitCastExpr 0x1329121c0 <col:19> 'char *' <ArrayToPointerDecay>
|       |         `-StringLiteral 0x132912128 <col:19> 'char[4]' lvalue "STR"
|       |-CallExpr 0x1329125e0 <line:30:3, col:24> '<dependent type>' contains-errors
|       | |-DeclRefExpr 0x132912518 <col:3> 'void *(void *, const void *, unsigned long)' Function 0x1329122c8 'memcpy' 'void *(void *, const void *, unsigned long)'
|       | |-DeclRefExpr 0x132912538 <col:10> 'char *' lvalue Var 0x132911860 'buf1' 'char *'
|       | |-DeclRefExpr 0x132912558 <col:16> 'char *' lvalue ParmVar 0x13101c8d8 'buf' 'char *'
|       | `-RecoveryExpr 0x132912578 <col:21> '<dependent type>' contains-errors lvalue
|       `-IfStmt 0x132912828 <line:31:3, line:34:3>
|         |-RecoveryExpr 0x132912618 <line:31:7> '_Bool' contains-errors
|         `-CompoundStmt 0x132912810 <col:22, line:34:3>
|           `-CompoundAssignOperator 0x1329127e0 <line:33:4, col:11> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|             |-RecoveryExpr 0x132912798 <col:4> '<dependent type>' contains-errors lvalue
|             | `-DeclRefExpr 0x132912778 <col:4> 'int' lvalue ParmVar 0x13101c970 'len' 'int'
|             `-IntegerLiteral 0x1329127c0 <col:11> 'int' 4
|-FunctionDecl 0x132911b48 <line:23:5> col:5 implicit used free 'void (void *)' extern
| |-ParmVarDecl 0x132911c48 <<invalid sloc>> <invalid sloc> 'void *'
| `-BuiltinAttr 0x132911bf0 <<invalid sloc>> Implicit 873
`-FunctionDecl 0x1329122c8 <line:30:3> col:3 implicit used memcpy 'void *(void *, const void *, unsigned long)' extern
  |-ParmVarDecl 0x1329123c8 <<invalid sloc>> <invalid sloc> 'void *'
  |-ParmVarDecl 0x132912430 <<invalid sloc>> <invalid sloc> 'const void *'
  |-ParmVarDecl 0x132912498 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x132912370 <<invalid sloc>> Implicit 882
