TranslationUnitDecl 0x127855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1278564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x127855bd0 '__int128'
|-TypedefDecl 0x127856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x127855bf0 'unsigned __int128'
|-TypedefDecl 0x13000be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13000bc00 'struct __NSConstantString_tag'
|   `-Record 0x127856580 '__NSConstantString_tag'
|-TypedefDecl 0x13000be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x127855d90 '__SVInt8_t'
|-TypedefDecl 0x13000bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x127855db0 '__SVInt16_t'
|-TypedefDecl 0x13000bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x127855dd0 '__SVInt32_t'
|-TypedefDecl 0x13000bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x127855df0 '__SVInt64_t'
|-TypedefDecl 0x13000c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x127855e10 '__SVUint8_t'
|-TypedefDecl 0x13000c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x127855e30 '__SVUint16_t'
|-TypedefDecl 0x13000c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x127855e50 '__SVUint32_t'
|-TypedefDecl 0x13000c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x127855e70 '__SVUint64_t'
|-TypedefDecl 0x13000c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x127855e90 '__SVFloat16_t'
|-TypedefDecl 0x13000c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x127855eb0 '__SVFloat32_t'
|-TypedefDecl 0x13000c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x127855ed0 '__SVFloat64_t'
|-TypedefDecl 0x13000c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x127855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13000c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x127855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13000c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x127855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13000c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x127855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13000c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x127855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13000c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x127855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13000c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x127855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13000c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x127855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13000c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x127855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13000c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x127856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13000c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x127856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13000c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x127856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13000c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x127856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13000c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x127856090 '__clang_svint8x3_t'
|-TypedefDecl 0x13000c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1278560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13000c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1278560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13000c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1278560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13000c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x127856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13000ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x127856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13000cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x127856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13000cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x127856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13000cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x127856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13000d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1278561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13000d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1278561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13000d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1278561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13000d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x127856210 '__clang_svint8x4_t'
|-TypedefDecl 0x13000d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x127856230 '__clang_svint16x4_t'
|-TypedefDecl 0x13000d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x127856250 '__clang_svint32x4_t'
|-TypedefDecl 0x13000d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x127856270 '__clang_svint64x4_t'
|-TypedefDecl 0x13000d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x127856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13000d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1278562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13000d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1278562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13000d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1278562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13000d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x127856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13000d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x127856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13000d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x127856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13000d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x127856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13000da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x127856390 '__SVBool_t'
|-TypedefDecl 0x13000da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1278563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13000dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1278563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13000db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1278563f0 '__SVCount_t'
|-TypedefDecl 0x13000dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13000dbb0 'char *'
|   `-BuiltinType 0x1278556b0 'char'
|-TypedefDecl 0x13000dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13000dbb0 'char *'
|   `-BuiltinType 0x1278556b0 'char'
`-FunctionDecl 0x13000dde8 <dataset_diviso_filec/func53_nonvuln.c:1:1, line:14:1> line:1:15 filter_catmullrom 'double (const double)' static
  |-ParmVarDecl 0x13000dcd8 <col:33, col:46> col:46 used x 'const double'
  `-CompoundStmt 0x130027048 <line:2:1, line:14:1>
    |-IfStmt 0x13000dfd8 <line:3:2, line:4:14>
    | |-BinaryOperator 0x13000df50 <line:3:6, col:11> 'int' '<'
    | | |-ImplicitCastExpr 0x13000df38 <col:6> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x13000dee0 <col:6> 'const double' lvalue ParmVar 0x13000dcd8 'x' 'const double'
    | | `-UnaryOperator 0x13000df20 <col:10, col:11> 'double' prefix '-'
    | |   `-FloatingLiteral 0x13000df00 <col:11> 'double' 2.000000e+00
    | `-ReturnStmt 0x13000dfc8 <line:4:3, col:14>
    |   `-ImplicitCastExpr 0x13000dfb0 <col:9, col:14> 'double' <FloatingCast>
    |     `-ParenExpr 0x13000df90 <col:9, col:14> 'float'
    |       `-FloatingLiteral 0x13000df70 <col:10> 'float' 0.000000e+00
    |-IfStmt 0x13000e360 <line:5:2, line:6:41>
    | |-BinaryOperator 0x13000e068 <line:5:6, col:11> 'int' '<'
    | | |-ImplicitCastExpr 0x13000e050 <col:6> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x13000dff8 <col:6> 'const double' lvalue ParmVar 0x13000dcd8 'x' 'const double'
    | | `-UnaryOperator 0x13000e038 <col:10, col:11> 'double' prefix '-'
    | |   `-FloatingLiteral 0x13000e018 <col:11> 'double' 1.000000e+00
    | `-ReturnStmt 0x13000e350 <line:6:3, col:41>
    |   `-ParenExpr 0x13000e330 <col:9, col:41> 'double'
    |     `-BinaryOperator 0x13000e310 <col:10, col:40> 'double' '*'
    |       |-ImplicitCastExpr 0x13000e2f8 <col:10> 'double' <FloatingCast>
    |       | `-FloatingLiteral 0x13000e088 <col:10> 'float' 5.000000e-01
    |       `-ParenExpr 0x13000e2d8 <col:15, col:40> 'double'
    |         `-BinaryOperator 0x13000e2b8 <col:16, col:39> 'double' '+'
    |           |-ImplicitCastExpr 0x13000e2a0 <col:16> 'double' <FloatingCast>
    |           | `-FloatingLiteral 0x13000e0a8 <col:16> 'float' 4.000000e+00
    |           `-BinaryOperator 0x13000e280 <col:21, col:39> 'double' '*'
    |             |-ImplicitCastExpr 0x13000e268 <col:21> 'double' <LValueToRValue>
    |             | `-DeclRefExpr 0x13000e0c8 <col:21> 'const double' lvalue ParmVar 0x13000dcd8 'x' 'const double'
    |             `-ParenExpr 0x13000e248 <col:23, col:39> 'double'
    |               `-BinaryOperator 0x13000e228 <col:24, col:38> 'double' '+'
    |                 |-ImplicitCastExpr 0x13000e210 <col:24> 'double' <FloatingCast>
    |                 | `-FloatingLiteral 0x13000e0e8 <col:24> 'float' 8.000000e+00
    |                 `-BinaryOperator 0x13000e1f0 <col:29, col:38> 'double' '*'
    |                   |-ImplicitCastExpr 0x13000e1d8 <col:29> 'double' <LValueToRValue>
    |                   | `-DeclRefExpr 0x13000e108 <col:29> 'const double' lvalue ParmVar 0x13000dcd8 'x' 'const double'
    |                   `-ParenExpr 0x13000e1b8 <col:31, col:38> 'double'
    |                     `-BinaryOperator 0x13000e198 <col:32, col:37> 'double' '+'
    |                       |-ImplicitCastExpr 0x13000e180 <col:32> 'double' <FloatingCast>
    |                       | `-FloatingLiteral 0x13000e128 <col:32> 'float' 5.000000e+00
    |                       `-ImplicitCastExpr 0x13000e168 <col:37> 'double' <LValueToRValue>
    |                         `-DeclRefExpr 0x13000e148 <col:37> 'const double' lvalue ParmVar 0x13000dcd8 'x' 'const double'
    |-IfStmt 0x1300268d0 <line:7:2, line:8:40>
    | |-BinaryOperator 0x13000e3d8 <line:7:6, col:10> 'int' '<'
    | | |-ImplicitCastExpr 0x13000e3c0 <col:6> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x13000e380 <col:6> 'const double' lvalue ParmVar 0x13000dcd8 'x' 'const double'
    | | `-FloatingLiteral 0x13000e3a0 <col:10> 'double' 0.000000e+00
    | `-ReturnStmt 0x1300268c0 <line:8:3, col:40>
    |   `-ParenExpr 0x1300268a0 <col:9, col:40> 'double'
    |     `-BinaryOperator 0x130026880 <col:10, col:39> 'double' '*'
    |       |-ImplicitCastExpr 0x130026868 <col:10> 'double' <FloatingCast>
    |       | `-FloatingLiteral 0x130026600 <col:10> 'float' 5.000000e-01
    |       `-ParenExpr 0x130026848 <col:15, col:39> 'double'
    |         `-BinaryOperator 0x130026828 <col:16, col:38> 'double' '+'
    |           |-ImplicitCastExpr 0x130026810 <col:16> 'double' <FloatingCast>
    |           | `-FloatingLiteral 0x130026620 <col:16> 'float' 2.000000e+00
    |           `-BinaryOperator 0x1300267f0 <col:21, col:38> 'double' '*'
    |             |-BinaryOperator 0x1300266b0 <col:21, col:23> 'double' '*'
    |             | |-ImplicitCastExpr 0x130026680 <col:21> 'double' <LValueToRValue>
    |             | | `-DeclRefExpr 0x130026640 <col:21> 'const double' lvalue ParmVar 0x13000dcd8 'x' 'const double'
    |             | `-ImplicitCastExpr 0x130026698 <col:23> 'double' <LValueToRValue>
    |             |   `-DeclRefExpr 0x130026660 <col:23> 'const double' lvalue ParmVar 0x13000dcd8 'x' 'const double'
    |             `-ParenExpr 0x1300267d0 <col:25, col:38> 'double'
    |               `-BinaryOperator 0x1300267b0 <col:26, col:37> 'double' '-'
    |                 |-ImplicitCastExpr 0x130026798 <col:26, col:27> 'double' <FloatingCast>
    |                 | `-UnaryOperator 0x1300266f0 <col:26, col:27> 'float' prefix '-'
    |                 |   `-FloatingLiteral 0x1300266d0 <col:27> 'float' 5.000000e+00
    |                 `-BinaryOperator 0x130026778 <col:32, col:37> 'double' '*'
    |                   |-ImplicitCastExpr 0x130026760 <col:32> 'double' <FloatingCast>
    |                   | `-FloatingLiteral 0x130026708 <col:32> 'float' 3.000000e+00
    |                   `-ImplicitCastExpr 0x130026748 <col:37> 'double' <LValueToRValue>
    |                     `-DeclRefExpr 0x130026728 <col:37> 'const double' lvalue ParmVar 0x13000dcd8 'x' 'const double'
    |-IfStmt 0x130026c38 <line:9:2, line:10:40>
    | |-BinaryOperator 0x130026948 <line:9:6, col:10> 'int' '<'
    | | |-ImplicitCastExpr 0x130026930 <col:6> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x1300268f0 <col:6> 'const double' lvalue ParmVar 0x13000dcd8 'x' 'const double'
    | | `-FloatingLiteral 0x130026910 <col:10> 'double' 1.000000e+00
    | `-ReturnStmt 0x130026c28 <line:10:3, col:40>
    |   `-ParenExpr 0x130026c08 <col:9, col:40> 'double'
    |     `-BinaryOperator 0x130026be8 <col:10, col:39> 'double' '*'
    |       |-ImplicitCastExpr 0x130026bd0 <col:10> 'double' <FloatingCast>
    |       | `-FloatingLiteral 0x130026968 <col:10> 'float' 5.000000e-01
    |       `-ParenExpr 0x130026bb0 <col:15, col:39> 'double'
    |         `-BinaryOperator 0x130026b90 <col:16, col:38> 'double' '+'
    |           |-ImplicitCastExpr 0x130026b78 <col:16> 'double' <FloatingCast>
    |           | `-FloatingLiteral 0x130026988 <col:16> 'float' 2.000000e+00
    |           `-BinaryOperator 0x130026b58 <col:21, col:38> 'double' '*'
    |             |-BinaryOperator 0x130026a18 <col:21, col:23> 'double' '*'
    |             | |-ImplicitCastExpr 0x1300269e8 <col:21> 'double' <LValueToRValue>
    |             | | `-DeclRefExpr 0x1300269a8 <col:21> 'const double' lvalue ParmVar 0x13000dcd8 'x' 'const double'
    |             | `-ImplicitCastExpr 0x130026a00 <col:23> 'double' <LValueToRValue>
    |             |   `-DeclRefExpr 0x1300269c8 <col:23> 'const double' lvalue ParmVar 0x13000dcd8 'x' 'const double'
    |             `-ParenExpr 0x130026b38 <col:25, col:38> 'double'
    |               `-BinaryOperator 0x130026b18 <col:26, col:37> 'double' '+'
    |                 |-ImplicitCastExpr 0x130026b00 <col:26, col:27> 'double' <FloatingCast>
    |                 | `-UnaryOperator 0x130026a58 <col:26, col:27> 'float' prefix '-'
    |                 |   `-FloatingLiteral 0x130026a38 <col:27> 'float' 5.000000e+00
    |                 `-BinaryOperator 0x130026ae0 <col:32, col:37> 'double' '*'
    |                   |-ImplicitCastExpr 0x130026ac8 <col:32> 'double' <FloatingCast>
    |                   | `-FloatingLiteral 0x130026a70 <col:32> 'float' 3.000000e+00
    |                   `-ImplicitCastExpr 0x130026ab0 <col:37> 'double' <LValueToRValue>
    |                     `-DeclRefExpr 0x130026a90 <col:37> 'const double' lvalue ParmVar 0x13000dcd8 'x' 'const double'
    |-IfStmt 0x130026fc0 <line:11:2, line:12:42>
    | |-BinaryOperator 0x130026cb0 <line:11:6, col:10> 'int' '<'
    | | |-ImplicitCastExpr 0x130026c98 <col:6> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x130026c58 <col:6> 'const double' lvalue ParmVar 0x13000dcd8 'x' 'const double'
    | | `-FloatingLiteral 0x130026c78 <col:10> 'double' 2.000000e+00
    | `-ReturnStmt 0x130026fb0 <line:12:3, col:42>
    |   `-ParenExpr 0x130026f90 <col:9, col:42> 'double'
    |     `-BinaryOperator 0x130026f70 <col:10, col:41> 'double' '*'
    |       |-ImplicitCastExpr 0x130026f58 <col:10> 'double' <FloatingCast>
    |       | `-FloatingLiteral 0x130026cd0 <col:10> 'float' 5.000000e-01
    |       `-ParenExpr 0x130026f38 <col:15, col:41> 'double'
    |         `-BinaryOperator 0x130026f18 <col:16, col:40> 'double' '+'
    |           |-ImplicitCastExpr 0x130026f00 <col:16> 'double' <FloatingCast>
    |           | `-FloatingLiteral 0x130026cf0 <col:16> 'float' 4.000000e+00
    |           `-BinaryOperator 0x130026ee0 <col:21, col:40> 'double' '*'
    |             |-ImplicitCastExpr 0x130026ec8 <col:21> 'double' <LValueToRValue>
    |             | `-DeclRefExpr 0x130026d10 <col:21> 'const double' lvalue ParmVar 0x13000dcd8 'x' 'const double'
    |             `-ParenExpr 0x130026ea8 <col:23, col:40> 'double'
    |               `-BinaryOperator 0x130026e88 <col:24, col:39> 'double' '+'
    |                 |-ImplicitCastExpr 0x130026e70 <col:24, col:25> 'double' <FloatingCast>
    |                 | `-UnaryOperator 0x130026d50 <col:24, col:25> 'float' prefix '-'
    |                 |   `-FloatingLiteral 0x130026d30 <col:25> 'float' 8.000000e+00
    |                 `-BinaryOperator 0x130026e50 <col:30, col:39> 'double' '*'
    |                   |-ImplicitCastExpr 0x130026e38 <col:30> 'double' <LValueToRValue>
    |                   | `-DeclRefExpr 0x130026d68 <col:30> 'const double' lvalue ParmVar 0x13000dcd8 'x' 'const double'
    |                   `-ParenExpr 0x130026e18 <col:32, col:39> 'double'
    |                     `-BinaryOperator 0x130026df8 <col:33, col:38> 'double' '-'
    |                       |-ImplicitCastExpr 0x130026de0 <col:33> 'double' <FloatingCast>
    |                       | `-FloatingLiteral 0x130026d88 <col:33> 'float' 5.000000e+00
    |                       `-ImplicitCastExpr 0x130026dc8 <col:38> 'double' <LValueToRValue>
    |                         `-DeclRefExpr 0x130026da8 <col:38> 'const double' lvalue ParmVar 0x13000dcd8 'x' 'const double'
    `-ReturnStmt 0x130027038 <line:13:2, col:13>
      `-ImplicitCastExpr 0x130027020 <col:8, col:13> 'double' <FloatingCast>
        `-ParenExpr 0x130027000 <col:8, col:13> 'float'
          `-FloatingLiteral 0x130026fe0 <col:9> 'float' 0.000000e+00
