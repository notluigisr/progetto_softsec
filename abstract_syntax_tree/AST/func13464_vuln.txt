TranslationUnitDecl 0x143055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1430564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x143055bd0 '__int128'
|-TypedefDecl 0x143056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x143055bf0 'unsigned __int128'
|-TypedefDecl 0x143126630 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x143126400 'struct __NSConstantString_tag'
|   `-Record 0x143056580 '__NSConstantString_tag'
|-TypedefDecl 0x143126698 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x143055d90 '__SVInt8_t'
|-TypedefDecl 0x143126700 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x143055db0 '__SVInt16_t'
|-TypedefDecl 0x143126768 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x143055dd0 '__SVInt32_t'
|-TypedefDecl 0x1431267d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x143055df0 '__SVInt64_t'
|-TypedefDecl 0x143126838 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x143055e10 '__SVUint8_t'
|-TypedefDecl 0x1431268a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x143055e30 '__SVUint16_t'
|-TypedefDecl 0x143126908 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x143055e50 '__SVUint32_t'
|-TypedefDecl 0x143126970 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x143055e70 '__SVUint64_t'
|-TypedefDecl 0x1431269d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x143055e90 '__SVFloat16_t'
|-TypedefDecl 0x143126a40 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x143055eb0 '__SVFloat32_t'
|-TypedefDecl 0x143126aa8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x143055ed0 '__SVFloat64_t'
|-TypedefDecl 0x143126b10 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x143055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x143126b78 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x143055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x143126be0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x143055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x143126c48 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x143055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x143126cb0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x143055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x143126d18 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x143055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x143126d80 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x143055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x143126de8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x143055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x143126e50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x143055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x143126eb8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x143056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x143126f20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x143056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x143126f88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x143056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x143126ff0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x143056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x143127058 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x143056090 '__clang_svint8x3_t'
|-TypedefDecl 0x1431270c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1430560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x143127128 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1430560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x143127190 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1430560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x1431271f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x143056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x143127260 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x143056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x1431272c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x143056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x143127330 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x143056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x143127398 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x143056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x143127c00 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1430561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x143127c68 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1430561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x143127cd0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1430561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x143127d38 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x143056210 '__clang_svint8x4_t'
|-TypedefDecl 0x143127da0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x143056230 '__clang_svint16x4_t'
|-TypedefDecl 0x143127e08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x143056250 '__clang_svint32x4_t'
|-TypedefDecl 0x143127e70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x143056270 '__clang_svint64x4_t'
|-TypedefDecl 0x143127ed8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x143056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x143127f40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1430562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x143127fa8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1430562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x143128010 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1430562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x143128078 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x143056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x1431280e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x143056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x143128148 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x143056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x1431281b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x143056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x143128218 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x143056390 '__SVBool_t'
|-TypedefDecl 0x143128280 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1430563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x1431282e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1430563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x143128350 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1430563f0 '__SVCount_t'
|-TypedefDecl 0x1431283f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1431283b0 'char *'
|   `-BuiltinType 0x1430556b0 'char'
|-TypedefDecl 0x143128468 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1431283b0 'char *'
|   `-BuiltinType 0x1430556b0 'char'
|-FunctionDecl 0x1431285a8 <dataset_diviso_filec/func13464_vuln.c:1:1, line:49:1> line:1:1 escape_xml 'int (const char *)'
| |-ParmVarDecl 0x1431284d8 <col:12, col:24> col:24 used text 'const char *'
| `-CompoundStmt 0x143144538 <line:2:1, line:49:1>
|   |-DeclStmt 0x143128720 <line:3:2, col:22>
|   | `-VarDecl 0x1431286b8 <col:2, col:15> col:15 used escaped 'char *' static
|   |-DeclStmt 0x1431287d0 <line:4:2, col:28>
|   | `-VarDecl 0x143128768 <col:2, col:16> col:16 referenced invalid escaped_size 'int' static
|   |-DeclStmt 0x143128868 <line:5:2, col:11>
|   | `-VarDecl 0x143128800 <col:2, col:8> col:8 used out 'char *'
|   |-UnaryExprOrTypeTraitExpr 0x1431288d8 <line:6:2, col:9> 'unsigned long' contains-errors sizeof
|   | `-RecoveryExpr 0x1431288b8 <col:9> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x1431412b0 <line:8:2, col:28>
|   | |-UnaryOperator 0x1431411f8 <col:6, col:18> 'int' prefix '!' cannot overflow
|   | | `-CallExpr 0x1431411b8 <col:7, col:18> 'unsigned long'
|   | |   |-ImplicitCastExpr 0x1431411a0 <col:7> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x143141110 <col:7> 'unsigned long (const char *)' Function 0x143140fa0 'strlen' 'unsigned long (const char *)'
|   | |   `-ImplicitCastExpr 0x1431411e0 <col:14> 'const char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x143141130 <col:14> 'const char *' lvalue ParmVar 0x1431284d8 'text' 'const char *'
|   | `-ReturnStmt 0x1431412a0 <col:21, col:28>
|   |   `-ImplicitCastExpr 0x143141288 <col:28> 'int' <PointerToIntegral>
|   |     `-ImplicitCastExpr 0x143141270 <col:28> 'char *' <ArrayToPointerDecay>
|   |       `-StringLiteral 0x143141250 <col:28> 'char[4]' lvalue "STR"
|   |-ForStmt 0x143144400 <line:10:2, line:46:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x143141448 <line:10:27, col:28> 'char' <LValueToRValue>
|   | | `-UnaryOperator 0x143141430 <col:27, col:28> 'const char' lvalue prefix '*' cannot overflow
|   | |   `-ImplicitCastExpr 0x143141418 <col:28> 'const char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1431413f8 <col:28> 'const char *' lvalue ParmVar 0x1431284d8 'text' 'const char *'
|   | |-BinaryOperator 0x143141598 <col:34, col:50> 'const char *' contains-errors ','
|   | | |-BinaryOperator 0x143141578 <col:34, col:43> 'char *' contains-errors ','
|   | | | |-UnaryOperator 0x143141560 <col:34, col:36> '<dependent type>' contains-errors prefix '++' cannot overflow
|   | | | | `-RecoveryExpr 0x143141540 <col:36> '<dependent type>' contains-errors lvalue
|   | | | `-UnaryOperator 0x1431414b0 <col:41, col:43> 'char *' prefix '++'
|   | | |   `-DeclRefExpr 0x143141490 <col:43> 'char *' lvalue Var 0x143128800 'out' 'char *'
|   | | `-UnaryOperator 0x143141508 <col:48, col:50> 'const char *' prefix '++'
|   | |   `-DeclRefExpr 0x1431414e8 <col:50> 'const char *' lvalue ParmVar 0x1431284d8 'text' 'const char *'
|   | `-CompoundStmt 0x1431443e0 <col:56, line:46:2>
|   |   |-IfStmt 0x143143548 <line:12:3, line:25:3>
|   |   | |-RecoveryExpr 0x143141630 <line:12:7, col:19> '_Bool' contains-errors
|   |   | `-CompoundStmt 0x143143508 <col:33, line:25:3>
|   |   |   |-DeclStmt 0x1431416d0 <line:13:4, col:24>
|   |   |   | `-VarDecl 0x143141668 <col:4, col:10> col:10 used bigger_escaped 'char *'
|   |   |   |-CompoundAssignOperator 0x143141750 <line:14:4, col:20> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   |   |   | |-RecoveryExpr 0x143141708 <col:4> '<dependent type>' contains-errors lvalue
|   |   |   | | `-DeclRefExpr 0x1431416e8 <col:4> 'int' lvalue Var 0x143128768 'escaped_size' 'int'
|   |   |   | `-IntegerLiteral 0x143141730 <col:20> 'int' 128
|   |   |   |-BinaryOperator 0x143141ab0 <line:15:4, col:50> 'char *' contains-errors '='
|   |   |   | |-DeclRefExpr 0x143141780 <col:4> 'char *' lvalue Var 0x143141668 'bigger_escaped' 'char *'
|   |   |   | `-CallExpr 0x143141a80 <col:21, col:50> '<dependent type>' contains-errors
|   |   |   |   |-DeclRefExpr 0x1431419f0 <col:21> 'void *(void *, unsigned long)' Function 0x1431417e0 'realloc' 'void *(void *, unsigned long)'
|   |   |   |   |-DeclRefExpr 0x143141a10 <col:29> 'char *' lvalue Var 0x1431286b8 'escaped' 'char *'
|   |   |   |   `-RecoveryExpr 0x143141a30 <col:38> '<dependent type>' contains-errors lvalue
|   |   |   |-IfStmt 0x143143378 <line:16:4, line:22:4>
|   |   |   | |-UnaryOperator 0x143141b08 <line:16:8, col:9> 'int' prefix '!' cannot overflow
|   |   |   | | `-ImplicitCastExpr 0x143141af0 <col:9> 'char *' <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x143141ad0 <col:9> 'char *' lvalue Var 0x143141668 'bigger_escaped' 'char *'
|   |   |   | `-CompoundStmt 0x143143348 <col:25, line:22:4>
|   |   |   |   |-CallExpr 0x143141d68 <line:17:5, col:17> 'void'
|   |   |   |   | |-ImplicitCastExpr 0x143141d50 <col:5> 'void (*)(void *)' <FunctionToPointerDecay>
|   |   |   |   | | `-DeclRefExpr 0x143141cc8 <col:5> 'void (void *)' Function 0x143141b58 'free' 'void (void *)'
|   |   |   |   | `-ImplicitCastExpr 0x143141da8 <col:10> 'void *' <BitCast>
|   |   |   |   |   `-ImplicitCastExpr 0x143141d90 <col:10> 'char *' <LValueToRValue>
|   |   |   |   |     `-DeclRefExpr 0x143141ce8 <col:10> 'char *' lvalue Var 0x1431286b8 'escaped' 'char *'
|   |   |   |   |-BinaryOperator 0x143143240 <line:18:5, col:15> 'char *' contains-errors '='
|   |   |   |   | |-DeclRefExpr 0x143141dc0 <col:5> 'char *' lvalue Var 0x1431286b8 'escaped' 'char *'
|   |   |   |   | `-RecoveryExpr 0x143143220 <col:15> '<dependent type>' contains-errors lvalue
|   |   |   |   |-BinaryOperator 0x1431432c8 <line:19:5, col:20> '<dependent type>' contains-errors '='
|   |   |   |   | |-RecoveryExpr 0x143143280 <col:5> '<dependent type>' contains-errors lvalue
|   |   |   |   | | `-DeclRefExpr 0x143143260 <col:5> 'int' lvalue Var 0x143128768 'escaped_size' 'int'
|   |   |   |   | `-IntegerLiteral 0x1431432a8 <col:20> 'int' 0
|   |   |   |   `-ReturnStmt 0x143143338 <line:21:5, col:12>
|   |   |   |     `-ImplicitCastExpr 0x143143320 <col:12> 'int' <PointerToIntegral>
|   |   |   |       `-ImplicitCastExpr 0x143143308 <col:12> 'char *' <ArrayToPointerDecay>
|   |   |   |         `-StringLiteral 0x1431432e8 <col:12> 'char[4]' lvalue "STR"
|   |   |   |-BinaryOperator 0x143143470 <line:23:4, col:27> 'char *' contains-errors '='
|   |   |   | |-DeclRefExpr 0x143143398 <col:4> 'char *' lvalue Var 0x143128800 'out' 'char *'
|   |   |   | `-BinaryOperator 0x143143450 <col:10, col:27> '<dependent type>' contains-errors '+'
|   |   |   |   |-DeclRefExpr 0x1431433b8 <col:10> 'char *' lvalue Var 0x143141668 'bigger_escaped' 'char *'
|   |   |   |   `-RecoveryExpr 0x143143430 <col:27> '<dependent type>' contains-errors lvalue
|   |   |   `-BinaryOperator 0x1431434e8 <line:24:4, col:14> 'char *' '='
|   |   |     |-DeclRefExpr 0x143143490 <col:4> 'char *' lvalue Var 0x1431286b8 'escaped' 'char *'
|   |   |     `-ImplicitCastExpr 0x1431434d0 <col:14> 'char *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x1431434b0 <col:14> 'char *' lvalue Var 0x143141668 'bigger_escaped' 'char *'
|   |   `-SwitchStmt 0x1431435e8 <line:26:3, line:45:3>
|   |     |-ImplicitCastExpr 0x1431435d0 <line:26:11, col:12> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x1431435b8 <col:11, col:12> 'char' <LValueToRValue>
|   |     |   `-UnaryOperator 0x1431435a0 <col:11, col:12> 'const char' lvalue prefix '*' cannot overflow
|   |     |     `-ImplicitCastExpr 0x143143588 <col:12> 'const char *' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x143143568 <col:12> 'const char *' lvalue ParmVar 0x1431284d8 'text' 'const char *'
|   |     `-CompoundStmt 0x143144380 <col:18, line:45:3>
|   |       |-CaseStmt 0x143143640 <line:27:4, line:28:22>
|   |       | |-ConstantExpr 0x143143628 <line:27:9> 'int'
|   |       | | `-CharacterLiteral 0x143143610 <col:9> 'int' 38
|   |       | `-CallExpr 0x143143968 <line:28:5, col:22> 'char *'
|   |       |   |-ImplicitCastExpr 0x143143950 <col:5> 'char *(*)(char *, const char *)' <FunctionToPointerDecay>
|   |       |   | `-DeclRefExpr 0x143143890 <col:5> 'char *(char *, const char *)' Function 0x1431436b0 'strcpy' 'char *(char *, const char *)'
|   |       |   |-ImplicitCastExpr 0x143143998 <col:12> 'char *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x1431438b0 <col:12> 'char *' lvalue Var 0x143128800 'out' 'char *'
|   |       |   `-ImplicitCastExpr 0x1431439c8 <col:17> 'const char *' <NoOp>
|   |       |     `-ImplicitCastExpr 0x1431439b0 <col:17> 'char *' <ArrayToPointerDecay>
|   |       |       `-StringLiteral 0x1431438d0 <col:17> 'char[4]' lvalue "STR"
|   |       |-BinaryOperator 0x143143bd8 <line:30:5, col:21> 'char *' contains-errors '='
|   |       | |-DeclRefExpr 0x143143b00 <col:5> 'char *' lvalue Var 0x143128800 'out' 'char *'
|   |       | `-BinaryOperator 0x143143bb8 <col:11, col:21> '<dependent type>' contains-errors '+'
|   |       |   |-DeclRefExpr 0x143143b20 <col:11> 'char *' lvalue Var 0x1431286b8 'escaped' 'char *'
|   |       |   `-RecoveryExpr 0x143143b98 <col:21> '<dependent type>' contains-errors lvalue
|   |       |-BreakStmt 0x143143bf8 <line:31:5>
|   |       |-CaseStmt 0x143143c30 <line:32:4, line:33:22>
|   |       | |-ConstantExpr 0x143143c18 <line:32:9> 'int'
|   |       | | `-CharacterLiteral 0x143143c00 <col:9> 'int' 60
|   |       | `-CallExpr 0x143143d00 <line:33:5, col:22> 'char *'
|   |       |   |-ImplicitCastExpr 0x143143ce8 <col:5> 'char *(*)(char *, const char *)' <FunctionToPointerDecay>
|   |       |   | `-DeclRefExpr 0x143143c58 <col:5> 'char *(char *, const char *)' Function 0x1431436b0 'strcpy' 'char *(char *, const char *)'
|   |       |   |-ImplicitCastExpr 0x143143d30 <col:12> 'char *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x143143c78 <col:12> 'char *' lvalue Var 0x143128800 'out' 'char *'
|   |       |   `-ImplicitCastExpr 0x143143d60 <col:17> 'const char *' <NoOp>
|   |       |     `-ImplicitCastExpr 0x143143d48 <col:17> 'char *' <ArrayToPointerDecay>
|   |       |       `-StringLiteral 0x143143c98 <col:17> 'char[4]' lvalue "STR"
|   |       |-BinaryOperator 0x143143f70 <line:35:5, col:21> 'char *' contains-errors '='
|   |       | |-DeclRefExpr 0x143143e98 <col:5> 'char *' lvalue Var 0x143128800 'out' 'char *'
|   |       | `-BinaryOperator 0x143143f50 <col:11, col:21> '<dependent type>' contains-errors '+'
|   |       |   |-DeclRefExpr 0x143143eb8 <col:11> 'char *' lvalue Var 0x1431286b8 'escaped' 'char *'
|   |       |   `-RecoveryExpr 0x143143f30 <col:21> '<dependent type>' contains-errors lvalue
|   |       |-BreakStmt 0x143143f90 <line:36:5>
|   |       |-CaseStmt 0x143143fc8 <line:37:4, line:38:22>
|   |       | |-ConstantExpr 0x143143fb0 <line:37:9> 'int'
|   |       | | `-CharacterLiteral 0x143143f98 <col:9> 'int' 62
|   |       | `-CallExpr 0x143144098 <line:38:5, col:22> 'char *'
|   |       |   |-ImplicitCastExpr 0x143144080 <col:5> 'char *(*)(char *, const char *)' <FunctionToPointerDecay>
|   |       |   | `-DeclRefExpr 0x143143ff0 <col:5> 'char *(char *, const char *)' Function 0x1431436b0 'strcpy' 'char *(char *, const char *)'
|   |       |   |-ImplicitCastExpr 0x1431440c8 <col:12> 'char *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x143144010 <col:12> 'char *' lvalue Var 0x143128800 'out' 'char *'
|   |       |   `-ImplicitCastExpr 0x1431440f8 <col:17> 'const char *' <NoOp>
|   |       |     `-ImplicitCastExpr 0x1431440e0 <col:17> 'char *' <ArrayToPointerDecay>
|   |       |       `-StringLiteral 0x143144030 <col:17> 'char[4]' lvalue "STR"
|   |       |-BreakStmt 0x143144278 <line:41:5>
|   |       |-DefaultStmt 0x143144358 <line:42:4, line:43:13>
|   |       | `-BinaryOperator 0x143144338 <col:5, col:13> 'char' '='
|   |       |   |-UnaryOperator 0x1431442b8 <col:5, col:6> 'char' lvalue prefix '*' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x1431442a0 <col:6> 'char *' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x143144280 <col:6> 'char *' lvalue Var 0x143128800 'out' 'char *'
|   |       |   `-ImplicitCastExpr 0x143144320 <col:12, col:13> 'char' <LValueToRValue>
|   |       |     `-UnaryOperator 0x143144308 <col:12, col:13> 'const char' lvalue prefix '*' cannot overflow
|   |       |       `-ImplicitCastExpr 0x1431442f0 <col:13> 'const char *' <LValueToRValue>
|   |       |         `-DeclRefExpr 0x1431442d0 <col:13> 'const char *' lvalue ParmVar 0x1431284d8 'text' 'const char *'
|   |       `-BreakStmt 0x143144378 <line:44:5>
|   |-BinaryOperator 0x1431444b8 <line:47:2, col:9> 'char' '='
|   | |-UnaryOperator 0x143144470 <col:2, col:3> 'char' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x143144458 <col:3> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x143144438 <col:3> 'char *' lvalue Var 0x143128800 'out' 'char *'
|   | `-ImplicitCastExpr 0x1431444a0 <col:9> 'char' <IntegralCast>
|   |   `-CharacterLiteral 0x143144488 <col:9> 'int' 0
|   `-ReturnStmt 0x143144528 <line:48:2, col:9>
|     `-ImplicitCastExpr 0x143144510 <col:9> 'int' <PointerToIntegral>
|       `-ImplicitCastExpr 0x1431444f8 <col:9> 'char *' <LValueToRValue>
|         `-DeclRefExpr 0x1431444d8 <col:9> 'char *' lvalue Var 0x1431286b8 'escaped' 'char *'
|-FunctionDecl 0x143140fa0 <line:8:7> col:7 implicit used strlen 'unsigned long (const char *)' extern
| |-ParmVarDecl 0x1431410a0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x143141048 <<invalid sloc>> Implicit 902
|-FunctionDecl 0x1431417e0 <line:15:21> col:21 implicit used realloc 'void *(void *, unsigned long)' extern
| |-ParmVarDecl 0x1431418e0 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x143141948 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-BuiltinAttr 0x143141888 <<invalid sloc>> Implicit 872
| `-AllocSizeAttr 0x1431419c0 <col:21> Implicit 2
|-FunctionDecl 0x143141b58 <line:17:5> col:5 implicit used free 'void (void *)' extern
| |-ParmVarDecl 0x143141c58 <<invalid sloc>> <invalid sloc> 'void *'
| `-BuiltinAttr 0x143141c00 <<invalid sloc>> Implicit 873
`-FunctionDecl 0x1431436b0 <line:28:5> col:5 implicit used strcpy 'char *(char *, const char *)' extern
  |-ParmVarDecl 0x1431437b0 <<invalid sloc>> <invalid sloc> 'char *'
  |-ParmVarDecl 0x143143818 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x143143758 <<invalid sloc>> Implicit 885
