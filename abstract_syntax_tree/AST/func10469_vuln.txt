TranslationUnitDecl 0x13c027008 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x13c027eb8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x13c0275d0 '__int128'
|-TypedefDecl 0x13c027f28 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x13c0275f0 'unsigned __int128'
|-TypedefDecl 0x13b03b630 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13b03b400 'struct __NSConstantString_tag'
|   `-Record 0x13c027f80 '__NSConstantString_tag'
|-TypedefDecl 0x13b03b698 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x13c027790 '__SVInt8_t'
|-TypedefDecl 0x13b03b700 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x13c0277b0 '__SVInt16_t'
|-TypedefDecl 0x13b03b768 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x13c0277d0 '__SVInt32_t'
|-TypedefDecl 0x13b03b7d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x13c0277f0 '__SVInt64_t'
|-TypedefDecl 0x13b03b838 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x13c027810 '__SVUint8_t'
|-TypedefDecl 0x13b03b8a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x13c027830 '__SVUint16_t'
|-TypedefDecl 0x13b03b908 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x13c027850 '__SVUint32_t'
|-TypedefDecl 0x13b03b970 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x13c027870 '__SVUint64_t'
|-TypedefDecl 0x13b03b9d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x13c027890 '__SVFloat16_t'
|-TypedefDecl 0x13b03ba40 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x13c0278b0 '__SVFloat32_t'
|-TypedefDecl 0x13b03baa8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x13c0278d0 '__SVFloat64_t'
|-TypedefDecl 0x13b03bb10 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x13c0278f0 '__SVBfloat16_t'
|-TypedefDecl 0x13b03bb78 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x13c027910 '__clang_svint8x2_t'
|-TypedefDecl 0x13b03bbe0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x13c027930 '__clang_svint16x2_t'
|-TypedefDecl 0x13b03bc48 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x13c027950 '__clang_svint32x2_t'
|-TypedefDecl 0x13b03bcb0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x13c027970 '__clang_svint64x2_t'
|-TypedefDecl 0x13b03bd18 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x13c027990 '__clang_svuint8x2_t'
|-TypedefDecl 0x13b03bd80 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x13c0279b0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13b03bde8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x13c0279d0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13b03be50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x13c0279f0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13b03beb8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x13c027a10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13b03bf20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x13c027a30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13b03bf88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x13c027a50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13b03bff0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x13c027a70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13b03c058 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x13c027a90 '__clang_svint8x3_t'
|-TypedefDecl 0x13b03c0c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x13c027ab0 '__clang_svint16x3_t'
|-TypedefDecl 0x13b03c128 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x13c027ad0 '__clang_svint32x3_t'
|-TypedefDecl 0x13b03c190 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x13c027af0 '__clang_svint64x3_t'
|-TypedefDecl 0x13b03c1f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x13c027b10 '__clang_svuint8x3_t'
|-TypedefDecl 0x13b03c260 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x13c027b30 '__clang_svuint16x3_t'
|-TypedefDecl 0x13b03c2c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x13c027b50 '__clang_svuint32x3_t'
|-TypedefDecl 0x13b03c330 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x13c027b70 '__clang_svuint64x3_t'
|-TypedefDecl 0x13b03c398 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x13c027b90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13b03c400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x13c027bb0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13b03c468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x13c027bd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13b03c4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x13c027bf0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13b03c538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x13c027c10 '__clang_svint8x4_t'
|-TypedefDecl 0x13b03c5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x13c027c30 '__clang_svint16x4_t'
|-TypedefDecl 0x13b03c608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x13c027c50 '__clang_svint32x4_t'
|-TypedefDecl 0x13b03c670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x13c027c70 '__clang_svint64x4_t'
|-TypedefDecl 0x13b03c6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x13c027c90 '__clang_svuint8x4_t'
|-TypedefDecl 0x13b03c740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x13c027cb0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13b03c7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x13c027cd0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13b03c810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x13c027cf0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13b03c878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x13c027d10 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13b03c8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x13c027d30 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13b03c948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x13c027d50 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13b03c9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x13c027d70 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13b03ca18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x13c027d90 '__SVBool_t'
|-TypedefDecl 0x13b03ca80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x13c027db0 '__clang_svboolx2_t'
|-TypedefDecl 0x13b03cae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x13c027dd0 '__clang_svboolx4_t'
|-TypedefDecl 0x13b03cb50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x13c027df0 '__SVCount_t'
|-TypedefDecl 0x13b03cbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13b03cbb0 'char *'
|   `-BuiltinType 0x13c0270b0 'char'
|-TypedefDecl 0x13b03cc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13b03cbb0 'char *'
|   `-BuiltinType 0x13c0270b0 'char'
|-FunctionDecl 0x13b03cdf8 <dataset_diviso_filec/func10469_vuln.c:1:1, line:42:1> line:1:6 invalid ldbReplParseCommand 'int *(int *)'
| |-ParmVarDecl 0x13b03cd28 <col:26, col:31> col:31 used argcp 'int *'
| `-CompoundStmt 0x13b059400 <col:38, line:42:1>
|   |-DeclStmt 0x13b03cf98 <line:3:5, col:17>
|   | `-VarDecl 0x13b03cf10 <col:5, col:16> col:9 used argc 'int' cinit
|   |   `-IntegerLiteral 0x13b03cf78 <col:16> 'int' 0
|   |-IfStmt 0x13b03d2f0 <line:4:5, col:39>
|   | |-BinaryOperator 0x13b03d288 <col:9, col:29> 'int' contains-errors '=='
|   | | |-CallExpr 0x13b03d260 <col:9, col:24> '<dependent type>' contains-errors
|   | | | |-DeclRefExpr 0x13b03d110 <col:9> 'int ()' Function 0x13b03d058 'sdslen' 'int ()'
|   | | | `-CXXDependentScopeMemberExpr 0x13b03d218 <col:16, col:20> '<dependent type>' contains-errors lvalue .cbuf
|   | | |   `-RecoveryExpr 0x13b03d1f8 <col:16> '<dependent type>' contains-errors lvalue
|   | | `-IntegerLiteral 0x13b03d1b8 <col:29> 'int' 0
|   | `-ReturnStmt 0x13b03d2e0 <col:32, col:39>
|   |   `-RecoveryExpr 0x13b03d2c0 <col:39> '<dependent type>' contains-errors lvalue
|   |-DeclStmt 0x13b03d3c8 <line:8:5, col:19>
|   | `-VarDecl 0x13b03d328 <col:5, col:15> col:11 used p 'char *' cinit
|   |   `-RecoveryExpr 0x13b03d3a8 <col:15> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x13b056358 <line:13:5, col:21> 'char *' contains-errors '='
|   | |-DeclRefExpr 0x13b03d3e0 <col:5> 'char *' contains-errors lvalue Var 0x13b03d328 'p' 'char *'
|   | `-CallExpr 0x13b0562f8 <col:9, col:21> 'char *' contains-errors
|   |   |-ImplicitCastExpr 0x13b0562e0 <col:9> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x13b056240 <col:9> 'char *(const char *, int)' Function 0x13b056060 'strchr' 'char *(const char *, int)'
|   |   |-ImplicitCastExpr 0x13b056340 <col:16> 'const char *' contains-errors <NoOp>
|   |   | `-ImplicitCastExpr 0x13b056328 <col:16> 'char *' contains-errors <LValueToRValue>
|   |   |   `-DeclRefExpr 0x13b056260 <col:16> 'char *' contains-errors lvalue Var 0x13b03d328 'p' 'char *'
|   |   `-CharacterLiteral 0x13b056280 <col:18> 'int' 42
|   |-IfStmt 0x13b056430 <col:24, col:37>
|   | |-UnaryOperator 0x13b0563b0 <col:28, col:29> 'int' contains-errors prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x13b056398 <col:29> 'char *' contains-errors <LValueToRValue>
|   | |   `-DeclRefExpr 0x13b056378 <col:29> 'char *' contains-errors lvalue Var 0x13b03d328 'p' 'char *'
|   | `-GotoStmt 0x13b056418 <col:32, col:37> 'protoerr' 0x13b0563c8
|   |-DeclStmt 0x13b056548 <line:14:5, col:21>
|   | `-VarDecl 0x13b056468 <col:5, col:20> col:11 used plen 'char *' cinit
|   |   `-BinaryOperator 0x13b056528 <col:18, col:20> 'char *' contains-errors '+'
|   |     |-ImplicitCastExpr 0x13b056510 <col:18> 'char *' contains-errors <LValueToRValue>
|   |     | `-DeclRefExpr 0x13b0564d0 <col:18> 'char *' contains-errors lvalue Var 0x13b03d328 'p' 'char *'
|   |     `-IntegerLiteral 0x13b0564f0 <col:20> 'int' 1
|   |-BinaryOperator 0x13b056948 <line:15:5, col:23> 'char *' contains-errors '='
|   | |-DeclRefExpr 0x13b056560 <col:5> 'char *' contains-errors lvalue Var 0x13b03d328 'p' 'char *'
|   | `-CallExpr 0x13b0568b8 <col:9, col:23> 'char *' contains-errors
|   |   |-ImplicitCastExpr 0x13b0568a0 <col:9> 'char *(*)(const char *, const char *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x13b0567a0 <col:9> 'char *(const char *, const char *)' Function 0x13b0565c0 'strstr' 'char *(const char *, const char *)'
|   |   |-ImplicitCastExpr 0x13b056900 <col:16> 'const char *' contains-errors <NoOp>
|   |   | `-ImplicitCastExpr 0x13b0568e8 <col:16> 'char *' contains-errors <LValueToRValue>
|   |   |   `-DeclRefExpr 0x13b0567c0 <col:16> 'char *' contains-errors lvalue Var 0x13b03d328 'p' 'char *'
|   |   `-ImplicitCastExpr 0x13b056930 <col:18> 'const char *' <NoOp>
|   |     `-ImplicitCastExpr 0x13b056918 <col:18> 'char *' <ArrayToPointerDecay>
|   |       `-StringLiteral 0x13b056820 <col:18> 'char[4]' lvalue "STR"
|   |-IfStmt 0x13b0569d0 <col:26, col:39>
|   | |-UnaryOperator 0x13b0569a0 <col:30, col:31> 'int' contains-errors prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x13b056988 <col:31> 'char *' contains-errors <LValueToRValue>
|   | |   `-DeclRefExpr 0x13b056968 <col:31> 'char *' contains-errors lvalue Var 0x13b03d328 'p' 'char *'
|   | `-GotoStmt 0x13b0569b8 <col:34, col:39> 'protoerr' 0x13b0563c8
|   |-BinaryOperator 0x13b056a70 <line:16:5, col:10> 'char' contains-errors '='
|   | |-UnaryOperator 0x13b056a28 <col:5, col:6> 'char' contains-errors lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x13b056a10 <col:6> 'char *' contains-errors <LValueToRValue>
|   | |   `-DeclRefExpr 0x13b0569f0 <col:6> 'char *' contains-errors lvalue Var 0x13b03d328 'p' 'char *'
|   | `-ImplicitCastExpr 0x13b056a58 <col:10> 'char' <IntegralCast>
|   |   `-CharacterLiteral 0x13b056a40 <col:10> 'int' 0
|   |-CompoundAssignOperator 0x13b056ad0 <col:16, col:21> 'char *' contains-errors '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
|   | |-DeclRefExpr 0x13b056a90 <col:16> 'char *' contains-errors lvalue Var 0x13b03d328 'p' 'char *'
|   | `-IntegerLiteral 0x13b056ab0 <col:21> 'int' 2
|   |-BinaryOperator 0x13b057b88 <line:17:5, col:23> 'int' contains-errors '='
|   | |-UnaryOperator 0x13b056b38 <col:5, col:6> 'int' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x13b056b20 <col:6> 'int *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x13b056b00 <col:6> 'int *' lvalue ParmVar 0x13b03cd28 'argcp' 'int *'
|   | `-CallExpr 0x13b057b48 <col:14, col:23> 'int' contains-errors
|   |   |-ImplicitCastExpr 0x13b057b30 <col:14> 'int (*)()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x13b057ab8 <col:14> 'int ()' Function 0x13b057a00 'atoi' 'int ()'
|   |   `-ImplicitCastExpr 0x13b057b70 <col:19> 'char *' contains-errors <LValueToRValue>
|   |     `-DeclRefExpr 0x13b057ad8 <col:19> 'char *' contains-errors lvalue Var 0x13b056468 'plen' 'char *'
|   |-IfStmt 0x13b057d30 <line:18:5, col:44>
|   | |-BinaryOperator 0x13b057cf8 <col:9, col:33> 'int' '||'
|   | | |-BinaryOperator 0x13b057c30 <col:9, col:19> 'int' '<='
|   | | | |-ImplicitCastExpr 0x13b057c18 <col:9, col:10> 'int' <LValueToRValue>
|   | | | | `-UnaryOperator 0x13b057be0 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
|   | | | |   `-ImplicitCastExpr 0x13b057bc8 <col:10> 'int *' <LValueToRValue>
|   | | | |     `-DeclRefExpr 0x13b057ba8 <col:10> 'int *' lvalue ParmVar 0x13b03cd28 'argcp' 'int *'
|   | | | `-IntegerLiteral 0x13b057bf8 <col:19> 'int' 0
|   | | `-BinaryOperator 0x13b057cd8 <col:24, col:33> 'int' '>'
|   | |   |-ImplicitCastExpr 0x13b057cc0 <col:24, col:25> 'int' <LValueToRValue>
|   | |   | `-UnaryOperator 0x13b057c88 <col:24, col:25> 'int' lvalue prefix '*' cannot overflow
|   | |   |   `-ImplicitCastExpr 0x13b057c70 <col:25> 'int *' <LValueToRValue>
|   | |   |     `-DeclRefExpr 0x13b057c50 <col:25> 'int *' lvalue ParmVar 0x13b03cd28 'argcp' 'int *'
|   | |   `-IntegerLiteral 0x13b057ca0 <col:33> 'int' 1024
|   | `-GotoStmt 0x13b057d18 <col:39, col:44> 'protoerr' 0x13b0563c8
|   |-BinaryOperator 0x13b057f38 <line:22:5, col:12> 'int' '='
|   | |-DeclRefExpr 0x13b057ef8 <col:5> 'int' lvalue Var 0x13b03cf10 'argc' 'int'
|   | `-IntegerLiteral 0x13b057f18 <col:12> 'int' 0
|   |-WhileStmt 0x13b0590f0 <line:23:5, line:34:5>
|   | |-BinaryOperator 0x13b057ff8 <line:23:11, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x13b057fc8 <col:11> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x13b057f58 <col:11> 'int' lvalue Var 0x13b03cf10 'argc' 'int'
|   | | `-ImplicitCastExpr 0x13b057fe0 <col:18, col:19> 'int' <LValueToRValue>
|   | |   `-UnaryOperator 0x13b057fb0 <col:18, col:19> 'int' lvalue prefix '*' cannot overflow
|   | |     `-ImplicitCastExpr 0x13b057f98 <col:19> 'int *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x13b057f78 <col:19> 'int *' lvalue ParmVar 0x13b03cd28 'argcp' 'int *'
|   | `-CompoundStmt 0x13b059088 <col:26, line:34:5>
|   |   |-IfStmt 0x13b0580e8 <line:24:9, col:29>
|   |   | |-BinaryOperator 0x13b0580b0 <col:13, col:19> 'int' contains-errors '!='
|   |   | | |-ImplicitCastExpr 0x13b058098 <col:13, col:14> 'int' contains-errors <IntegralCast>
|   |   | | | `-ImplicitCastExpr 0x13b058080 <col:13, col:14> 'char' contains-errors <LValueToRValue>
|   |   | | |   `-UnaryOperator 0x13b058050 <col:13, col:14> 'char' contains-errors lvalue prefix '*' cannot overflow
|   |   | | |     `-ImplicitCastExpr 0x13b058038 <col:14> 'char *' contains-errors <LValueToRValue>
|   |   | | |       `-DeclRefExpr 0x13b058018 <col:14> 'char *' contains-errors lvalue Var 0x13b03d328 'p' 'char *'
|   |   | | `-CharacterLiteral 0x13b058068 <col:19> 'int' 36
|   |   | `-GotoStmt 0x13b0580d0 <col:24, col:29> 'protoerr' 0x13b0563c8
|   |   |-BinaryOperator 0x13b0581a0 <line:25:9, col:18> 'char *' contains-errors '='
|   |   | |-DeclRefExpr 0x13b058108 <col:9> 'char *' contains-errors lvalue Var 0x13b056468 'plen' 'char *'
|   |   | `-BinaryOperator 0x13b058180 <col:16, col:18> 'char *' contains-errors '+'
|   |   |   |-ImplicitCastExpr 0x13b058168 <col:16> 'char *' contains-errors <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x13b058128 <col:16> 'char *' contains-errors lvalue Var 0x13b03d328 'p' 'char *'
|   |   |   `-IntegerLiteral 0x13b058148 <col:18> 'int' 1
|   |   |-BinaryOperator 0x13b058318 <line:26:9, col:27> 'char *' contains-errors '='
|   |   | |-DeclRefExpr 0x13b0581c0 <col:9> 'char *' contains-errors lvalue Var 0x13b03d328 'p' 'char *'
|   |   | `-CallExpr 0x13b058288 <col:13, col:27> 'char *' contains-errors
|   |   |   |-ImplicitCastExpr 0x13b058270 <col:13> 'char *(*)(const char *, const char *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x13b0581e0 <col:13> 'char *(const char *, const char *)' Function 0x13b0565c0 'strstr' 'char *(const char *, const char *)'
|   |   |   |-ImplicitCastExpr 0x13b0582d0 <col:20> 'const char *' contains-errors <NoOp>
|   |   |   | `-ImplicitCastExpr 0x13b0582b8 <col:20> 'char *' contains-errors <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x13b058200 <col:20> 'char *' contains-errors lvalue Var 0x13b03d328 'p' 'char *'
|   |   |   `-ImplicitCastExpr 0x13b058300 <col:22> 'const char *' <NoOp>
|   |   |     `-ImplicitCastExpr 0x13b0582e8 <col:22> 'char *' <ArrayToPointerDecay>
|   |   |       `-StringLiteral 0x13b058220 <col:22> 'char[4]' lvalue "STR"
|   |   |-IfStmt 0x13b0583a0 <col:30, col:43>
|   |   | |-UnaryOperator 0x13b058370 <col:34, col:35> 'int' contains-errors prefix '!' cannot overflow
|   |   | | `-ImplicitCastExpr 0x13b058358 <col:35> 'char *' contains-errors <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x13b058338 <col:35> 'char *' contains-errors lvalue Var 0x13b03d328 'p' 'char *'
|   |   | `-GotoStmt 0x13b058388 <col:38, col:43> 'protoerr' 0x13b0563c8
|   |   |-BinaryOperator 0x13b058440 <line:27:9, col:14> 'char' contains-errors '='
|   |   | |-UnaryOperator 0x13b0583f8 <col:9, col:10> 'char' contains-errors lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x13b0583e0 <col:10> 'char *' contains-errors <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x13b0583c0 <col:10> 'char *' contains-errors lvalue Var 0x13b03d328 'p' 'char *'
|   |   | `-ImplicitCastExpr 0x13b058428 <col:14> 'char' <IntegralCast>
|   |   |   `-CharacterLiteral 0x13b058410 <col:14> 'int' 0
|   |   |-CompoundAssignOperator 0x13b0584a0 <col:20, col:25> 'char *' contains-errors '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
|   |   | |-DeclRefExpr 0x13b058460 <col:20> 'char *' contains-errors lvalue Var 0x13b03d328 'p' 'char *'
|   |   | `-IntegerLiteral 0x13b058480 <col:25> 'int' 2
|   |   |-DeclStmt 0x13b0585e8 <line:28:9, col:30>
|   |   | `-VarDecl 0x13b0584e8 <col:9, col:29> col:13 used slen 'int' cinit
|   |   |   `-CallExpr 0x13b0585a8 <col:20, col:29> 'int' contains-errors
|   |   |     |-ImplicitCastExpr 0x13b058590 <col:20> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x13b058550 <col:20> 'int ()' Function 0x13b057a00 'atoi' 'int ()'
|   |   |     `-ImplicitCastExpr 0x13b0585d0 <col:25> 'char *' contains-errors <LValueToRValue>
|   |   |       `-DeclRefExpr 0x13b058570 <col:25> 'char *' contains-errors lvalue Var 0x13b056468 'plen' 'char *'
|   |   |-IfStmt 0x13b058728 <line:29:9, col:44>
|   |   | |-BinaryOperator 0x13b0586f0 <col:13, col:33> 'int' contains-errors '||'
|   |   | | |-BinaryOperator 0x13b058658 <col:13, col:21> 'int' contains-errors '<='
|   |   | | | |-ImplicitCastExpr 0x13b058640 <col:13> 'int' contains-errors <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x13b058600 <col:13> 'int' contains-errors lvalue Var 0x13b0584e8 'slen' 'int'
|   |   | | | `-IntegerLiteral 0x13b058620 <col:21> 'int' 0
|   |   | | `-BinaryOperator 0x13b0586d0 <col:26, col:33> 'int' contains-errors '>'
|   |   | |   |-ImplicitCastExpr 0x13b0586b8 <col:26> 'int' contains-errors <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x13b058678 <col:26> 'int' contains-errors lvalue Var 0x13b0584e8 'slen' 'int'
|   |   | |   `-IntegerLiteral 0x13b058698 <col:33> 'int' 1024
|   |   | `-GotoStmt 0x13b058710 <col:39, col:44> 'protoerr' 0x13b0563c8
|   |   |-CompoundAssignOperator 0x13b0589c8 <line:31:9, col:14> 'char *' contains-errors '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
|   |   | |-DeclRefExpr 0x13b058970 <col:9> 'char *' contains-errors lvalue Var 0x13b03d328 'p' 'char *'
|   |   | `-ImplicitCastExpr 0x13b0589b0 <col:14> 'int' contains-errors <LValueToRValue>
|   |   |   `-DeclRefExpr 0x13b058990 <col:14> 'int' contains-errors lvalue Var 0x13b0584e8 'slen' 'int'
|   |   |-IfStmt 0x13b058ff8 <line:32:9, col:48>
|   |   | |-BinaryOperator 0x13b058fc0 <col:13, col:37> 'int' contains-errors '||'
|   |   | | |-BinaryOperator 0x13b058ec0 <col:13, col:21> 'int' contains-errors '!='
|   |   | | | |-ImplicitCastExpr 0x13b058ea8 <col:13, col:16> 'int' contains-errors <IntegralCast>
|   |   | | | | `-ImplicitCastExpr 0x13b058e90 <col:13, col:16> 'char' contains-errors <LValueToRValue>
|   |   | | | |   `-ArraySubscriptExpr 0x13b058e58 <col:13, col:16> 'char' contains-errors lvalue
|   |   | | | |     |-ImplicitCastExpr 0x13b058e40 <col:13> 'char *' contains-errors <LValueToRValue>
|   |   | | | |     | `-DeclRefExpr 0x13b058e00 <col:13> 'char *' contains-errors lvalue Var 0x13b03d328 'p' 'char *'
|   |   | | | |     `-IntegerLiteral 0x13b058e20 <col:15> 'int' 0
|   |   | | | `-CharacterLiteral 0x13b058e78 <col:21> 'int' 13
|   |   | | `-BinaryOperator 0x13b058fa0 <col:29, col:37> 'int' contains-errors '!='
|   |   | |   |-ImplicitCastExpr 0x13b058f88 <col:29, col:32> 'int' contains-errors <IntegralCast>
|   |   | |   | `-ImplicitCastExpr 0x13b058f70 <col:29, col:32> 'char' contains-errors <LValueToRValue>
|   |   | |   |   `-ArraySubscriptExpr 0x13b058f38 <col:29, col:32> 'char' contains-errors lvalue
|   |   | |   |     |-ImplicitCastExpr 0x13b058f20 <col:29> 'char *' contains-errors <LValueToRValue>
|   |   | |   |     | `-DeclRefExpr 0x13b058ee0 <col:29> 'char *' contains-errors lvalue Var 0x13b03d328 'p' 'char *'
|   |   | |   |     `-IntegerLiteral 0x13b058f00 <col:31> 'int' 1
|   |   | |   `-CharacterLiteral 0x13b058f58 <col:37> 'int' 10
|   |   | `-GotoStmt 0x13b058fe0 <col:43, col:48> 'protoerr' 0x13b0563c8
|   |   `-CompoundAssignOperator 0x13b059058 <line:33:9, col:14> 'char *' contains-errors '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
|   |     |-DeclRefExpr 0x13b059018 <col:9> 'char *' contains-errors lvalue Var 0x13b03d328 'p' 'char *'
|   |     `-IntegerLiteral 0x13b059038 <col:14> 'int' 2
|   |-CallExpr 0x13b059270 <line:35:5, col:17> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x13b0591f0 <col:5> 'int ()' Function 0x13b059138 'sdsfree' 'int ()'
|   | `-RecoveryExpr 0x13b059250 <col:13> '<dependent type>' contains-errors lvalue
|   `-LabelStmt 0x13b0593c0 <line:38:1, col:9> 'protoerr'
|     `-NullStmt 0x13b0593b8 <col:9>
|-FunctionDecl 0x13b056060 <line:13:9> col:9 implicit used strchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x13b056160 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x13b0561c8 <<invalid sloc>> <invalid sloc> 'int'
| `-BuiltinAttr 0x13b056108 <<invalid sloc>> Implicit 893
`-FunctionDecl 0x13b0565c0 <line:15:9> col:9 implicit used strstr 'char *(const char *, const char *)' extern
  |-ParmVarDecl 0x13b0566c0 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x13b056728 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x13b056668 <<invalid sloc>> Implicit 898
