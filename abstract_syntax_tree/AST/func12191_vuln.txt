TranslationUnitDecl 0x145817408 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1458182b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1458179d0 '__int128'
|-TypedefDecl 0x145818328 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1458179f0 'unsigned __int128'
|-TypedefDecl 0x14510ac30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x14510aa00 'struct __NSConstantString_tag'
|   `-Record 0x145818380 '__NSConstantString_tag'
|-TypedefDecl 0x14510ac98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x145817b90 '__SVInt8_t'
|-TypedefDecl 0x14510ad00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x145817bb0 '__SVInt16_t'
|-TypedefDecl 0x14510ad68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x145817bd0 '__SVInt32_t'
|-TypedefDecl 0x14510add0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x145817bf0 '__SVInt64_t'
|-TypedefDecl 0x14510ae38 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x145817c10 '__SVUint8_t'
|-TypedefDecl 0x14510aea0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x145817c30 '__SVUint16_t'
|-TypedefDecl 0x14510af08 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x145817c50 '__SVUint32_t'
|-TypedefDecl 0x14510af70 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x145817c70 '__SVUint64_t'
|-TypedefDecl 0x14510afd8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x145817c90 '__SVFloat16_t'
|-TypedefDecl 0x14510b040 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x145817cb0 '__SVFloat32_t'
|-TypedefDecl 0x14510b0a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x145817cd0 '__SVFloat64_t'
|-TypedefDecl 0x14510b110 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x145817cf0 '__SVBfloat16_t'
|-TypedefDecl 0x14510b178 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x145817d10 '__clang_svint8x2_t'
|-TypedefDecl 0x14510b1e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x145817d30 '__clang_svint16x2_t'
|-TypedefDecl 0x14510b248 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x145817d50 '__clang_svint32x2_t'
|-TypedefDecl 0x14510b2b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x145817d70 '__clang_svint64x2_t'
|-TypedefDecl 0x14510b318 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x145817d90 '__clang_svuint8x2_t'
|-TypedefDecl 0x14510b380 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x145817db0 '__clang_svuint16x2_t'
|-TypedefDecl 0x14510b3e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x145817dd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x14510b450 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x145817df0 '__clang_svuint64x2_t'
|-TypedefDecl 0x14510b4b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x145817e10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x14510b520 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x145817e30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x14510b588 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x145817e50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x14510b5f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x145817e70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x14510b658 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x145817e90 '__clang_svint8x3_t'
|-TypedefDecl 0x14510b6c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x145817eb0 '__clang_svint16x3_t'
|-TypedefDecl 0x14510b728 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x145817ed0 '__clang_svint32x3_t'
|-TypedefDecl 0x14510b790 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x145817ef0 '__clang_svint64x3_t'
|-TypedefDecl 0x14510b7f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x145817f10 '__clang_svuint8x3_t'
|-TypedefDecl 0x14510b860 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x145817f30 '__clang_svuint16x3_t'
|-TypedefDecl 0x14510b8c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x145817f50 '__clang_svuint32x3_t'
|-TypedefDecl 0x14510b930 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x145817f70 '__clang_svuint64x3_t'
|-TypedefDecl 0x14510b998 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x145817f90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x14510c200 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x145817fb0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x14510c268 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x145817fd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x14510c2d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x145817ff0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x14510c338 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x145818010 '__clang_svint8x4_t'
|-TypedefDecl 0x14510c3a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x145818030 '__clang_svint16x4_t'
|-TypedefDecl 0x14510c408 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x145818050 '__clang_svint32x4_t'
|-TypedefDecl 0x14510c470 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x145818070 '__clang_svint64x4_t'
|-TypedefDecl 0x14510c4d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x145818090 '__clang_svuint8x4_t'
|-TypedefDecl 0x14510c540 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1458180b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x14510c5a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1458180d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x14510c610 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1458180f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x14510c678 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x145818110 '__clang_svfloat16x4_t'
|-TypedefDecl 0x14510c6e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x145818130 '__clang_svfloat32x4_t'
|-TypedefDecl 0x14510c748 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x145818150 '__clang_svfloat64x4_t'
|-TypedefDecl 0x14510c7b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x145818170 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x14510c818 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x145818190 '__SVBool_t'
|-TypedefDecl 0x14510c880 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1458181b0 '__clang_svboolx2_t'
|-TypedefDecl 0x14510c8e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1458181d0 '__clang_svboolx4_t'
|-TypedefDecl 0x14510c950 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1458181f0 '__SVCount_t'
|-TypedefDecl 0x14510c9f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x14510c9b0 'char *'
|   `-BuiltinType 0x1458174b0 'char'
|-TypedefDecl 0x14510ca68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x14510c9b0 'char *'
|   `-BuiltinType 0x1458174b0 'char'
`-FunctionDecl 0x14510ccb8 <dataset_diviso_filec/func12191_vuln.c:1:1, line:32:1> line:1:21 invalid XBMInteger 'unsigned int (int *, short *)' static
  |-ParmVarDecl 0x14510cb28 <col:32, col:39> col:39 invalid image 'int *'
  |-ParmVarDecl 0x14510cbd8 <col:45, col:56> col:56 used hex_digits 'short *'
  `-CompoundStmt 0x14581e138 <line:2:1, line:32:1>
    |-DeclStmt 0x14510cdf0 <line:3:3, line:4:6>
    | `-VarDecl 0x14510cd88 <line:3:3, line:4:5> col:5 used c 'int'
    |-DeclStmt 0x14510ce88 <line:6:3, line:7:10>
    | `-VarDecl 0x14510ce20 <line:6:3, line:7:5> col:5 used value 'unsigned int'
    |-DoStmt 0x14581d8a0 <line:10:3, line:15:67>
    | |-CompoundStmt 0x14510d1c8 <line:11:3, line:15:3>
    | | |-BinaryOperator 0x14510d088 <line:12:5, col:25> 'int' contains-errors '='
    | | | |-DeclRefExpr 0x14510cea0 <col:5> 'int' lvalue Var 0x14510cd88 'c' 'int'
    | | | `-CallExpr 0x14510d060 <col:7, col:25> '<dependent type>' contains-errors
    | | |   |-DeclRefExpr 0x14510d020 <col:7> 'int ()' Function 0x14510cf68 'ReadBlobByte' 'int ()'
    | | |   `-RecoveryExpr 0x14510d040 <col:20> '<dependent type>' contains-errors lvalue
    | | `-IfStmt 0x14510d1a8 <line:13:5, line:14:15>
    | |   |-BinaryOperator 0x14510d120 <line:13:9, col:14> 'int' contains-errors '=='
    | |   | |-DeclRefExpr 0x14510d0a8 <col:9> 'int' lvalue Var 0x14510cd88 'c' 'int'
    | |   | `-RecoveryExpr 0x14510d100 <col:14> '<dependent type>' contains-errors lvalue
    | |   `-ReturnStmt 0x14510d198 <line:14:7, col:15>
    | |     `-ImplicitCastExpr 0x14510d180 <col:13, col:15> 'unsigned int' <IntegralCast>
    | |       `-ParenExpr 0x14510d160 <col:13, col:15> 'int'
    | |         `-IntegerLiteral 0x14510d140 <col:14> 'int' 0
    | `-BinaryOperator 0x14581d880 <line:15:12, col:66> 'int' '||'
    |   |-BinaryOperator 0x14581d7d0 <col:12, col:51> 'int' '||'
    |   | |-BinaryOperator 0x14581d720 <col:12, col:36> 'int' '||'
    |   | | |-ParenExpr 0x14581d670 <col:12, col:21> 'int'
    |   | | | `-BinaryOperator 0x14581d650 <col:13, col:18> 'int' '=='
    |   | | |   |-ImplicitCastExpr 0x14581d638 <col:13> 'int' <LValueToRValue>
    |   | | |   | `-DeclRefExpr 0x14581d600 <col:13> 'int' lvalue Var 0x14510cd88 'c' 'int'
    |   | | |   `-CharacterLiteral 0x14581d620 <col:18> 'int' 32
    |   | | `-ParenExpr 0x14581d700 <col:26, col:36> 'int'
    |   | |   `-BinaryOperator 0x14581d6e0 <col:27, col:32> 'int' '=='
    |   | |     |-ImplicitCastExpr 0x14581d6c8 <col:27> 'int' <LValueToRValue>
    |   | |     | `-DeclRefExpr 0x14581d690 <col:27> 'int' lvalue Var 0x14510cd88 'c' 'int'
    |   | |     `-CharacterLiteral 0x14581d6b0 <col:32> 'int' 9
    |   | `-ParenExpr 0x14581d7b0 <col:41, col:51> 'int'
    |   |   `-BinaryOperator 0x14581d790 <col:42, col:47> 'int' '=='
    |   |     |-ImplicitCastExpr 0x14581d778 <col:42> 'int' <LValueToRValue>
    |   |     | `-DeclRefExpr 0x14581d740 <col:42> 'int' lvalue Var 0x14510cd88 'c' 'int'
    |   |     `-CharacterLiteral 0x14581d760 <col:47> 'int' 10
    |   `-ParenExpr 0x14581d860 <col:56, col:66> 'int'
    |     `-BinaryOperator 0x14581d840 <col:57, col:62> 'int' '=='
    |       |-ImplicitCastExpr 0x14581d828 <col:57> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x14581d7f0 <col:57> 'int' lvalue Var 0x14510cd88 'c' 'int'
    |       `-CharacterLiteral 0x14581d810 <col:62> 'int' 13
    |-BinaryOperator 0x14581d918 <line:17:3, col:9> 'unsigned int' '='
    | |-DeclRefExpr 0x14581d8c0 <col:3> 'unsigned int' lvalue Var 0x14510ce20 'value' 'unsigned int'
    | `-ImplicitCastExpr 0x14581d900 <col:9> 'unsigned int' <IntegralCast>
    |   `-IntegerLiteral 0x14581d8e0 <col:9> 'int' 0
    |-DoStmt 0x14581e0b0 <line:18:3, line:30:30>
    | |-CompoundStmt 0x14581df68 <line:19:3, line:30:3>
    | | |-IfStmt 0x14581da10 <line:20:5, line:21:7>
    | | | |-RecoveryExpr 0x14581d9e8 <line:20:9, col:43> '_Bool' contains-errors
    | | | `-BreakStmt 0x14581da08 <line:21:7>
    | | |-CompoundAssignOperator 0x14581da88 <line:22:5, col:12> 'unsigned int' '*=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    | | | |-DeclRefExpr 0x14581da30 <col:5> 'unsigned int' lvalue Var 0x14510ce20 'value' 'unsigned int'
    | | | `-ImplicitCastExpr 0x14581da70 <col:12> 'unsigned int' <IntegralCast>
    | | |   `-IntegerLiteral 0x14581da50 <col:12> 'int' 16
    | | |-CompoundAssignOperator 0x14581daf8 <line:23:5, col:8> 'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
    | | | |-DeclRefExpr 0x14581dab8 <col:5> 'int' lvalue Var 0x14510cd88 'c' 'int'
    | | | `-IntegerLiteral 0x14581dad8 <col:8> 'int' 255
    | | |-IfStmt 0x14581dc70 <line:24:5, line:25:7>
    | | | |-RecoveryExpr 0x14581dc48 <line:24:9, col:54> '_Bool' contains-errors
    | | | `-BreakStmt 0x14581dc68 <line:25:7>
    | | |-CompoundAssignOperator 0x14581dd70 <line:26:5, col:24> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    | | | |-DeclRefExpr 0x14581dc90 <col:5> 'unsigned int' lvalue Var 0x14510ce20 'value' 'unsigned int'
    | | | `-ImplicitCastExpr 0x14581dd58 <col:12, col:24> 'unsigned int' <IntegralCast>
    | | |   `-ImplicitCastExpr 0x14581dd40 <col:12, col:24> 'short' <LValueToRValue>
    | | |     `-ArraySubscriptExpr 0x14581dd20 <col:12, col:24> 'short' lvalue
    | | |       |-ImplicitCastExpr 0x14581dcf0 <col:12> 'short *' <LValueToRValue>
    | | |       | `-DeclRefExpr 0x14581dcb0 <col:12> 'short *' lvalue ParmVar 0x14510cbd8 'hex_digits' 'short *'
    | | |       `-ImplicitCastExpr 0x14581dd08 <col:23> 'int' <LValueToRValue>
    | | |         `-DeclRefExpr 0x14581dcd0 <col:23> 'int' lvalue Var 0x14510cd88 'c' 'int'
    | | |-BinaryOperator 0x14581de28 <line:27:5, col:25> 'int' contains-errors '='
    | | | |-DeclRefExpr 0x14581dda0 <col:5> 'int' lvalue Var 0x14510cd88 'c' 'int'
    | | | `-CallExpr 0x14581de00 <col:7, col:25> '<dependent type>' contains-errors
    | | |   |-DeclRefExpr 0x14581ddc0 <col:7> 'int ()' Function 0x14510cf68 'ReadBlobByte' 'int ()'
    | | |   `-RecoveryExpr 0x14581dde0 <col:20> '<dependent type>' contains-errors lvalue
    | | `-IfStmt 0x14581df48 <line:28:5, line:29:15>
    | |   |-BinaryOperator 0x14581dec0 <line:28:9, col:14> 'int' contains-errors '=='
    | |   | |-DeclRefExpr 0x14581de48 <col:9> 'int' lvalue Var 0x14510cd88 'c' 'int'
    | |   | `-RecoveryExpr 0x14581dea0 <col:14> '<dependent type>' contains-errors lvalue
    | |   `-ReturnStmt 0x14581df38 <line:29:7, col:15>
    | |     `-ImplicitCastExpr 0x14581df20 <col:13, col:15> 'unsigned int' <IntegralCast>
    | |       `-ParenExpr 0x14581df00 <col:13, col:15> 'int'
    | |         `-IntegerLiteral 0x14581dee0 <col:14> 'int' 0
    | `-BinaryOperator 0x14581e090 <line:30:12, col:29> 'int' '>='
    |   |-ImplicitCastExpr 0x14581e078 <col:12, col:24> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x14581e060 <col:12, col:24> 'short' <LValueToRValue>
    |   |   `-ArraySubscriptExpr 0x14581e020 <col:12, col:24> 'short' lvalue
    |   |     |-ImplicitCastExpr 0x14581dff0 <col:12> 'short *' <LValueToRValue>
    |   |     | `-DeclRefExpr 0x14581dfb0 <col:12> 'short *' lvalue ParmVar 0x14510cbd8 'hex_digits' 'short *'
    |   |     `-ImplicitCastExpr 0x14581e008 <col:23> 'int' <LValueToRValue>
    |   |       `-DeclRefExpr 0x14581dfd0 <col:23> 'int' lvalue Var 0x14510cd88 'c' 'int'
    |   `-IntegerLiteral 0x14581e040 <col:29> 'int' 0
    `-ReturnStmt 0x14581e128 <line:31:3, col:15>
      `-ImplicitCastExpr 0x14581e110 <col:9, col:15> 'unsigned int' <LValueToRValue>
        `-ParenExpr 0x14581e0f0 <col:9, col:15> 'unsigned int' lvalue
          `-DeclRefExpr 0x14581e0d0 <col:10> 'unsigned int' lvalue Var 0x14510ce20 'value' 'unsigned int'
