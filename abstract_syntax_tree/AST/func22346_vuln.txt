TranslationUnitDecl 0x145055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1450564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x145055bd0 '__int128'
|-TypedefDecl 0x145056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x145055bf0 'unsigned __int128'
|-TypedefDecl 0x145126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x145126000 'struct __NSConstantString_tag'
|   `-Record 0x145056580 '__NSConstantString_tag'
|-TypedefDecl 0x145126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x145055d90 '__SVInt8_t'
|-TypedefDecl 0x145126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x145055db0 '__SVInt16_t'
|-TypedefDecl 0x145126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x145055dd0 '__SVInt32_t'
|-TypedefDecl 0x1451263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x145055df0 '__SVInt64_t'
|-TypedefDecl 0x145126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x145055e10 '__SVUint8_t'
|-TypedefDecl 0x1451264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x145055e30 '__SVUint16_t'
|-TypedefDecl 0x145126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x145055e50 '__SVUint32_t'
|-TypedefDecl 0x145126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x145055e70 '__SVUint64_t'
|-TypedefDecl 0x1451265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x145055e90 '__SVFloat16_t'
|-TypedefDecl 0x145126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x145055eb0 '__SVFloat32_t'
|-TypedefDecl 0x1451266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x145055ed0 '__SVFloat64_t'
|-TypedefDecl 0x145126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x145055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x145126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x145055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1451267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x145055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x145126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x145055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1451268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x145055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x145126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x145055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x145126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x145055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1451269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x145055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x145126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x145055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x145126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x145056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x145126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x145056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x145126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x145056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x145126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x145056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x145126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x145056090 '__clang_svint8x3_t'
|-TypedefDecl 0x145126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1450560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x145126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1450560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x145126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1450560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x145126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x145056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x145126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x145056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x145126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x145056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x145126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x145056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x145126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x145056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x145127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1450561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x145127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1450561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1451278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1450561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x145127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x145056210 '__clang_svint8x4_t'
|-TypedefDecl 0x1451279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x145056230 '__clang_svint16x4_t'
|-TypedefDecl 0x145127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x145056250 '__clang_svint32x4_t'
|-TypedefDecl 0x145127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x145056270 '__clang_svint64x4_t'
|-TypedefDecl 0x145127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x145056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x145127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1450562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x145127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1450562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x145127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1450562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x145127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x145056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x145127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x145056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x145127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x145056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x145127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x145056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x145127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x145056390 '__SVBool_t'
|-TypedefDecl 0x145127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1450563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x145127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1450563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x145127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1450563f0 '__SVCount_t'
|-TypedefDecl 0x145127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x145127fb0 'char *'
|   `-BuiltinType 0x1450556b0 'char'
|-TypedefDecl 0x145128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x145127fb0 'char *'
|   `-BuiltinType 0x1450556b0 'char'
|-FunctionDecl 0x1451283d0 <dataset_diviso_filec/func22346_vuln.c:1:1, line:45:1> line:1:6 invalid fli_read_lc_2 'void (int *, int *, unsigned char *, unsigned char *)'
| |-ParmVarDecl 0x145128128 <col:20, col:26> col:26 invalid f 'int *'
| |-ParmVarDecl 0x1451281a8 <col:29, col:43> col:43 invalid fli_header 'int *'
| |-ParmVarDecl 0x145128258 <col:55, col:70> col:70 used old_framebuf 'unsigned char *'
| |-ParmVarDecl 0x1451282d8 <col:84, col:99> col:99 used framebuf 'unsigned char *'
| `-CompoundStmt 0x145145d28 <line:2:1, line:45:1>
|   |-DeclStmt 0x145128638 <line:3:2, col:32>
|   | |-VarDecl 0x1451284b0 <col:2, col:17> col:17 used yc 'unsigned short'
|   | |-VarDecl 0x145128530 <col:2, col:21> col:21 used lc 'unsigned short'
|   | `-VarDecl 0x1451285b0 <col:2, col:25> col:25 used numline 'unsigned short'
|   |-DeclStmt 0x1451286d0 <line:4:2, col:20>
|   | `-VarDecl 0x145128668 <col:2, col:17> col:17 used pos 'unsigned char *'
|   |-CallExpr 0x145141f60 <line:5:2, col:71> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x145141de0 <col:2> 'void *(void *, const void *, unsigned long)' Function 0x145141b90 'memcpy' 'void *(void *, const void *, unsigned long)'
|   | |-DeclRefExpr 0x145141e00 <col:9> 'unsigned char *' lvalue ParmVar 0x1451282d8 'framebuf' 'unsigned char *'
|   | |-DeclRefExpr 0x145141e20 <col:19> 'unsigned char *' lvalue ParmVar 0x145128258 'old_framebuf' 'unsigned char *'
|   | `-BinaryOperator 0x145141f10 <col:33, col:65> '<dependent type>' contains-errors '*'
|   |   |-CXXDependentScopeMemberExpr 0x145141e60 <col:33, col:45> '<dependent type>' contains-errors lvalue ->width
|   |   | `-RecoveryExpr 0x145141e40 <col:33> '<dependent type>' contains-errors lvalue
|   |   `-CXXDependentScopeMemberExpr 0x145141ec8 <col:53, col:65> '<dependent type>' contains-errors lvalue ->height
|   |     `-RecoveryExpr 0x145141ea8 <col:53> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x145141ff0 <line:6:2, col:5> 'unsigned short' '='
|   | |-DeclRefExpr 0x145141f98 <col:2> 'unsigned short' lvalue Var 0x1451284b0 'yc' 'unsigned short'
|   | `-ImplicitCastExpr 0x145141fd8 <col:5> 'unsigned short' <IntegralCast>
|   |   `-IntegerLiteral 0x145141fb8 <col:5> 'int' 0
|   |-BinaryOperator 0x1451421f8 <line:7:2, col:28> 'unsigned short' contains-errors '='
|   | |-DeclRefExpr 0x145142010 <col:2> 'unsigned short' lvalue Var 0x1451285b0 'numline' 'unsigned short'
|   | `-CallExpr 0x1451421d0 <col:12, col:28> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x145142190 <col:12> 'int ()' Function 0x1451420d8 'fli_read_short' 'int ()'
|   |   `-RecoveryExpr 0x1451421b0 <col:27> '<dependent type>' contains-errors lvalue
|   `-ForStmt 0x145145cf0 <line:8:2, line:44:2>
|     |-BinaryOperator 0x145142270 <line:8:7, col:10> 'unsigned short' '='
|     | |-DeclRefExpr 0x145142218 <col:7> 'unsigned short' lvalue Var 0x145128530 'lc' 'unsigned short'
|     | `-ImplicitCastExpr 0x145142258 <col:10> 'unsigned short' <IntegralCast>
|     |   `-IntegerLiteral 0x145142238 <col:10> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x145142330 <col:13, col:18> 'int' '<'
|     | |-ImplicitCastExpr 0x145142300 <col:13> 'int' <IntegralCast>
|     | | `-ImplicitCastExpr 0x1451422d0 <col:13> 'unsigned short' <LValueToRValue>
|     | |   `-DeclRefExpr 0x145142290 <col:13> 'unsigned short' lvalue Var 0x145128530 'lc' 'unsigned short'
|     | `-ImplicitCastExpr 0x145142318 <col:18> 'int' <IntegralCast>
|     |   `-ImplicitCastExpr 0x1451422e8 <col:18> 'unsigned short' <LValueToRValue>
|     |     `-DeclRefExpr 0x1451422b0 <col:18> 'unsigned short' lvalue Var 0x1451285b0 'numline' 'unsigned short'
|     |-UnaryOperator 0x145142370 <col:27, col:29> 'unsigned short' postfix '++' cannot overflow
|     | `-DeclRefExpr 0x145142350 <col:27> 'unsigned short' lvalue Var 0x145128530 'lc' 'unsigned short'
|     `-CompoundStmt 0x145145c90 <col:33, line:44:2>
|       |-DeclStmt 0x145142638 <line:9:3, col:40>
|       | |-VarDecl 0x1451423a0 <col:3, col:18> col:18 used xc 'unsigned short'
|       | |-VarDecl 0x145142420 <col:3, col:22> col:22 used pc 'unsigned short'
|       | |-VarDecl 0x1451424a0 <col:3, col:26> col:26 used pcnt 'unsigned short'
|       | |-VarDecl 0x145142520 <col:3, col:32> col:32 used lpf 'unsigned short'
|       | `-VarDecl 0x1451425a0 <col:3, col:37> col:37 used lpn 'unsigned short'
|       |-BinaryOperator 0x1451426d8 <line:10:3, col:22> 'unsigned short' contains-errors '='
|       | |-DeclRefExpr 0x145142650 <col:3> 'unsigned short' lvalue Var 0x145142420 'pc' 'unsigned short'
|       | `-CallExpr 0x1451426b0 <col:6, col:22> '<dependent type>' contains-errors
|       |   |-DeclRefExpr 0x145142670 <col:6> 'int ()' Function 0x1451420d8 'fli_read_short' 'int ()'
|       |   `-RecoveryExpr 0x145142690 <col:21> '<dependent type>' contains-errors lvalue
|       |-BinaryOperator 0x145142750 <line:11:3, col:7> 'unsigned short' '='
|       | |-DeclRefExpr 0x1451426f8 <col:3> 'unsigned short' lvalue Var 0x145142520 'lpf' 'unsigned short'
|       | `-ImplicitCastExpr 0x145142738 <col:7> 'unsigned short' <IntegralCast>
|       |   `-IntegerLiteral 0x145142718 <col:7> 'int' 0
|       |-BinaryOperator 0x1451427c8 <col:10, col:14> 'unsigned short' '='
|       | |-DeclRefExpr 0x145142770 <col:10> 'unsigned short' lvalue Var 0x1451425a0 'lpn' 'unsigned short'
|       | `-ImplicitCastExpr 0x1451427b0 <col:14> 'unsigned short' <IntegralCast>
|       |   `-IntegerLiteral 0x145142790 <col:14> 'int' 0
|       |-WhileStmt 0x1451438a8 <line:12:3, line:19:3>
|       | |-BinaryOperator 0x145143470 <line:12:10, col:15> 'int' '&'
|       | | |-ImplicitCastExpr 0x145143458 <col:10> 'int' <IntegralCast>
|       | | | `-ImplicitCastExpr 0x145143440 <col:10> 'unsigned short' <LValueToRValue>
|       | | |   `-DeclRefExpr 0x145143400 <col:10> 'unsigned short' lvalue Var 0x145142420 'pc' 'unsigned short'
|       | | `-IntegerLiteral 0x145143420 <col:15> 'int' 32768
|       | `-CompoundStmt 0x145143888 <col:23, line:19:3>
|       |   |-IfStmt 0x1451437b0 <line:13:4, line:17:4> has_else
|       |   | |-BinaryOperator 0x145143500 <line:13:8, col:13> 'int' '&'
|       |   | | |-ImplicitCastExpr 0x1451434e8 <col:8> 'int' <IntegralCast>
|       |   | | | `-ImplicitCastExpr 0x1451434d0 <col:8> 'unsigned short' <LValueToRValue>
|       |   | | |   `-DeclRefExpr 0x145143490 <col:8> 'unsigned short' lvalue Var 0x145142420 'pc' 'unsigned short'
|       |   | | `-IntegerLiteral 0x1451434b0 <col:13> 'int' 16384
|       |   | |-CompoundStmt 0x145143618 <col:21, line:15:4>
|       |   | | `-CompoundAssignOperator 0x1451435e8 <line:14:5, col:24> 'unsigned short' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|       |   | |   |-DeclRefExpr 0x145143520 <col:5> 'unsigned short' lvalue Var 0x1451284b0 'yc' 'unsigned short'
|       |   | |   `-UnaryOperator 0x1451435d0 <col:9, col:24> 'int' prefix '-' cannot overflow
|       |   | |     `-ImplicitCastExpr 0x1451435b8 <col:10, col:24> 'int' <IntegralCast>
|       |   | |       `-CStyleCastExpr 0x145143590 <col:10, col:24> 'short' <IntegralCast>
|       |   | |         `-ImplicitCastExpr 0x145143578 <col:24> 'unsigned short' <LValueToRValue> part_of_explicit_cast
|       |   | |           `-DeclRefExpr 0x145143540 <col:24> 'unsigned short' lvalue Var 0x145142420 'pc' 'unsigned short'
|       |   | `-CompoundStmt 0x145143790 <line:15:11, line:17:4>
|       |   |   |-BinaryOperator 0x145143688 <line:16:5, col:9> 'unsigned short' '='
|       |   |   | |-DeclRefExpr 0x145143630 <col:5> 'unsigned short' lvalue Var 0x145142520 'lpf' 'unsigned short'
|       |   |   | `-ImplicitCastExpr 0x145143670 <col:9> 'unsigned short' <IntegralCast>
|       |   |   |   `-IntegerLiteral 0x145143650 <col:9> 'int' 1
|       |   |   `-BinaryOperator 0x145143770 <col:11, col:18> 'unsigned short' '='
|       |   |     |-DeclRefExpr 0x1451436a8 <col:11> 'unsigned short' lvalue Var 0x1451425a0 'lpn' 'unsigned short'
|       |   |     `-ImplicitCastExpr 0x145143758 <col:15, col:18> 'unsigned short' <IntegralCast>
|       |   |       `-BinaryOperator 0x145143738 <col:15, col:18> 'int' '&'
|       |   |         |-ImplicitCastExpr 0x145143720 <col:15> 'int' <IntegralCast>
|       |   |         | `-ImplicitCastExpr 0x145143708 <col:15> 'unsigned short' <LValueToRValue>
|       |   |         |   `-DeclRefExpr 0x1451436c8 <col:15> 'unsigned short' lvalue Var 0x145142420 'pc' 'unsigned short'
|       |   |         `-IntegerLiteral 0x1451436e8 <col:18> 'int' 255
|       |   `-BinaryOperator 0x145143868 <line:18:4, col:23> 'unsigned short' contains-errors '='
|       |     |-DeclRefExpr 0x1451437e0 <col:4> 'unsigned short' lvalue Var 0x145142420 'pc' 'unsigned short'
|       |     `-CallExpr 0x145143840 <col:7, col:23> '<dependent type>' contains-errors
|       |       |-DeclRefExpr 0x145143800 <col:7> 'int ()' Function 0x1451420d8 'fli_read_short' 'int ()'
|       |       `-RecoveryExpr 0x145143820 <col:22> '<dependent type>' contains-errors lvalue
|       |-BinaryOperator 0x145143920 <line:20:3, col:6> 'unsigned short' '='
|       | |-DeclRefExpr 0x1451438c8 <col:3> 'unsigned short' lvalue Var 0x1451423a0 'xc' 'unsigned short'
|       | `-ImplicitCastExpr 0x145143908 <col:6> 'unsigned short' <IntegralCast>
|       |   `-IntegerLiteral 0x1451438e8 <col:6> 'int' 0
|       |-BinaryOperator 0x145143a68 <line:21:3, col:39> 'unsigned char *' contains-errors '='
|       | |-DeclRefExpr 0x145143940 <col:3> 'unsigned char *' lvalue Var 0x145128668 'pos' 'unsigned char *'
|       | `-BinaryOperator 0x145143a48 <col:7, col:39> '<dependent type>' contains-errors '+'
|       |   |-DeclRefExpr 0x145143960 <col:7> 'unsigned char *' lvalue ParmVar 0x1451282d8 'framebuf' 'unsigned char *'
|       |   `-ParenExpr 0x145143a28 <col:16, col:39> '<dependent type>' contains-errors
|       |     `-BinaryOperator 0x145143a08 <col:17, col:37> '<dependent type>' contains-errors '*'
|       |       |-CXXDependentScopeMemberExpr 0x1451439a0 <col:17, col:29> '<dependent type>' contains-errors lvalue ->width
|       |       | `-RecoveryExpr 0x145143980 <col:17> '<dependent type>' contains-errors lvalue
|       |       `-DeclRefExpr 0x1451439e8 <col:37> 'unsigned short' lvalue Var 0x1451284b0 'yc' 'unsigned short'
|       |-ForStmt 0x145145ac8 <line:22:3, line:41:3>
|       | |-BinaryOperator 0x145143ae0 <line:22:8, col:13> 'unsigned short' '='
|       | | |-DeclRefExpr 0x145143a88 <col:8> 'unsigned short' lvalue Var 0x1451424a0 'pcnt' 'unsigned short'
|       | | `-ImplicitCastExpr 0x145143ac8 <col:13> 'unsigned short' <LValueToRValue>
|       | |   `-DeclRefExpr 0x145143aa8 <col:13> 'unsigned short' lvalue Var 0x145142420 'pc' 'unsigned short'
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x145143b70 <col:17, col:22> 'int' '>'
|       | | |-ImplicitCastExpr 0x145143b58 <col:17> 'int' <IntegralCast>
|       | | | `-ImplicitCastExpr 0x145143b40 <col:17> 'unsigned short' <LValueToRValue>
|       | | |   `-DeclRefExpr 0x145143b00 <col:17> 'unsigned short' lvalue Var 0x1451424a0 'pcnt' 'unsigned short'
|       | | `-IntegerLiteral 0x145143b20 <col:22> 'int' 0
|       | |-UnaryOperator 0x145143bb0 <col:25, col:29> 'unsigned short' postfix '--' cannot overflow
|       | | `-DeclRefExpr 0x145143b90 <col:25> 'unsigned short' lvalue Var 0x1451424a0 'pcnt' 'unsigned short'
|       | `-CompoundStmt 0x145145a90 <col:33, line:41:3>
|       |   |-DeclStmt 0x145143ce0 <line:23:4, col:26>
|       |   | |-VarDecl 0x145143be0 <col:4, col:19> col:19 used ps 'unsigned short'
|       |   | `-VarDecl 0x145143c60 <col:4, col:22> col:22 used skip 'unsigned short'
|       |   |-BinaryOperator 0x145143e60 <line:24:4, col:24> 'unsigned short' contains-errors '='
|       |   | |-DeclRefExpr 0x145143cf8 <col:4> 'unsigned short' lvalue Var 0x145143c60 'skip' 'unsigned short'
|       |   | `-CallExpr 0x145143e38 <col:9, col:24> '<dependent type>' contains-errors
|       |   |   |-DeclRefExpr 0x145143df8 <col:9> 'int ()' Function 0x145143d40 'fli_read_char' 'int ()'
|       |   |   `-RecoveryExpr 0x145143e18 <col:23> '<dependent type>' contains-errors lvalue
|       |   |-BinaryOperator 0x145143f08 <line:25:4, col:22> 'unsigned short' contains-errors '='
|       |   | |-DeclRefExpr 0x145143e80 <col:4> 'unsigned short' lvalue Var 0x145143be0 'ps' 'unsigned short'
|       |   | `-CallExpr 0x145143ee0 <col:7, col:22> '<dependent type>' contains-errors
|       |   |   |-DeclRefExpr 0x145143ea0 <col:7> 'int ()' Function 0x145143d40 'fli_read_char' 'int ()'
|       |   |   `-RecoveryExpr 0x145143ec0 <col:21> '<dependent type>' contains-errors lvalue
|       |   |-CompoundAssignOperator 0x145143f98 <line:26:4, col:8> 'unsigned short' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|       |   | |-DeclRefExpr 0x145143f28 <col:4> 'unsigned short' lvalue Var 0x1451423a0 'xc' 'unsigned short'
|       |   | `-ImplicitCastExpr 0x145143f80 <col:8> 'int' <IntegralCast>
|       |   |   `-ImplicitCastExpr 0x145143f68 <col:8> 'unsigned short' <LValueToRValue>
|       |   |     `-DeclRefExpr 0x145143f48 <col:8> 'unsigned short' lvalue Var 0x145143c60 'skip' 'unsigned short'
|       |   `-IfStmt 0x145145a60 <line:27:4, line:40:4> has_else
|       |     |-BinaryOperator 0x145144038 <line:27:8, col:13> 'int' '&'
|       |     | |-ImplicitCastExpr 0x145144020 <col:8> 'int' <IntegralCast>
|       |     | | `-ImplicitCastExpr 0x145144008 <col:8> 'unsigned short' <LValueToRValue>
|       |     | |   `-DeclRefExpr 0x145143fc8 <col:8> 'unsigned short' lvalue Var 0x145143be0 'ps' 'unsigned short'
|       |     | `-IntegerLiteral 0x145143fe8 <col:13> 'int' 128
|       |     |-CompoundStmt 0x1451456c0 <col:19, line:37:4>
|       |     | |-DeclStmt 0x145144170 <line:28:5, col:24>
|       |     | | |-VarDecl 0x145144070 <col:5, col:19> col:19 used v1 'unsigned char'
|       |     | | `-VarDecl 0x1451440f0 <col:5, col:22> col:22 used v2 'unsigned char'
|       |     | |-BinaryOperator 0x145144268 <line:29:5, col:22> 'unsigned short' '='
|       |     | | |-DeclRefExpr 0x145144188 <col:5> 'unsigned short' lvalue Var 0x145143be0 'ps' 'unsigned short'
|       |     | | `-ImplicitCastExpr 0x145144250 <col:8, col:22> 'unsigned short' <IntegralCast>
|       |     | |   `-UnaryOperator 0x145144238 <col:8, col:22> 'int' prefix '-' cannot overflow
|       |     | |     `-ImplicitCastExpr 0x145144220 <col:9, col:22> 'int' <IntegralCast>
|       |     | |       `-CStyleCastExpr 0x1451441f8 <col:9, col:22> 'signed char' <IntegralCast>
|       |     | |         `-ImplicitCastExpr 0x1451441e0 <col:22> 'unsigned short' <LValueToRValue> part_of_explicit_cast
|       |     | |           `-DeclRefExpr 0x1451441a8 <col:22> 'unsigned short' lvalue Var 0x145143be0 'ps' 'unsigned short'
|       |     | |-BinaryOperator 0x145144310 <line:30:5, col:23> 'unsigned char' contains-errors '='
|       |     | | |-DeclRefExpr 0x145144288 <col:5> 'unsigned char' lvalue Var 0x145144070 'v1' 'unsigned char'
|       |     | | `-CallExpr 0x1451442e8 <col:8, col:23> '<dependent type>' contains-errors
|       |     | |   |-DeclRefExpr 0x1451442a8 <col:8> 'int ()' Function 0x145143d40 'fli_read_char' 'int ()'
|       |     | |   `-RecoveryExpr 0x1451442c8 <col:22> '<dependent type>' contains-errors lvalue
|       |     | |-BinaryOperator 0x1451443b8 <line:31:5, col:23> 'unsigned char' contains-errors '='
|       |     | | |-DeclRefExpr 0x145144330 <col:5> 'unsigned char' lvalue Var 0x1451440f0 'v2' 'unsigned char'
|       |     | | `-CallExpr 0x145144390 <col:8, col:23> '<dependent type>' contains-errors
|       |     | |   |-DeclRefExpr 0x145144350 <col:8> 'int ()' Function 0x145143d40 'fli_read_char' 'int ()'
|       |     | |   `-RecoveryExpr 0x145144370 <col:22> '<dependent type>' contains-errors lvalue
|       |     | `-WhileStmt 0x1451456a0 <line:32:5, line:36:5>
|       |     |   |-BinaryOperator 0x145145450 <line:32:12, col:15> 'int' '>'
|       |     |   | |-ImplicitCastExpr 0x145145438 <col:12> 'int' <IntegralCast>
|       |     |   | | `-ImplicitCastExpr 0x145145420 <col:12> 'unsigned short' <LValueToRValue>
|       |     |   | |   `-DeclRefExpr 0x1451443d8 <col:12> 'unsigned short' lvalue Var 0x145143be0 'ps' 'unsigned short'
|       |     |   | `-IntegerLiteral 0x145145400 <col:15> 'int' 0
|       |     |   `-CompoundStmt 0x145145678 <col:18, line:36:5>
|       |     |     |-BinaryOperator 0x145145538 <line:33:6, col:16> 'unsigned char' '='
|       |     |     | |-ArraySubscriptExpr 0x1451454e0 <col:6, col:14> 'unsigned char' lvalue
|       |     |     | | |-ImplicitCastExpr 0x1451454c8 <col:6> 'unsigned char *' <LValueToRValue>
|       |     |     | | | `-DeclRefExpr 0x145145470 <col:6> 'unsigned char *' lvalue Var 0x145128668 'pos' 'unsigned char *'
|       |     |     | | `-UnaryOperator 0x1451454b0 <col:10, col:12> 'unsigned short' postfix '++' cannot overflow
|       |     |     | |   `-DeclRefExpr 0x145145490 <col:10> 'unsigned short' lvalue Var 0x1451423a0 'xc' 'unsigned short'
|       |     |     | `-ImplicitCastExpr 0x145145520 <col:16> 'unsigned char' <LValueToRValue>
|       |     |     |   `-DeclRefExpr 0x145145500 <col:16> 'unsigned char' lvalue Var 0x145144070 'v1' 'unsigned char'
|       |     |     |-BinaryOperator 0x145145620 <line:34:6, col:16> 'unsigned char' '='
|       |     |     | |-ArraySubscriptExpr 0x1451455c8 <col:6, col:14> 'unsigned char' lvalue
|       |     |     | | |-ImplicitCastExpr 0x1451455b0 <col:6> 'unsigned char *' <LValueToRValue>
|       |     |     | | | `-DeclRefExpr 0x145145558 <col:6> 'unsigned char *' lvalue Var 0x145128668 'pos' 'unsigned char *'
|       |     |     | | `-UnaryOperator 0x145145598 <col:10, col:12> 'unsigned short' postfix '++' cannot overflow
|       |     |     | |   `-DeclRefExpr 0x145145578 <col:10> 'unsigned short' lvalue Var 0x1451423a0 'xc' 'unsigned short'
|       |     |     | `-ImplicitCastExpr 0x145145608 <col:16> 'unsigned char' <LValueToRValue>
|       |     |     |   `-DeclRefExpr 0x1451455e8 <col:16> 'unsigned char' lvalue Var 0x1451440f0 'v2' 'unsigned char'
|       |     |     `-UnaryOperator 0x145145660 <line:35:6, col:8> 'unsigned short' postfix '--' cannot overflow
|       |     |       `-DeclRefExpr 0x145145640 <col:6> 'unsigned short' lvalue Var 0x145143be0 'ps' 'unsigned short'
|       |     `-CompoundStmt 0x145145a40 <line:37:11, line:40:4>
|       |       |-CallExpr 0x145145920 <line:38:5, col:31> '<dependent type>' contains-errors
|       |       | |-DeclRefExpr 0x1451457d8 <col:5> 'int ()' Function 0x145145720 'fread' 'int ()'
|       |       | |-UnaryOperator 0x1451458a8 <col:11, col:20> 'unsigned char *' prefix '&' cannot overflow
|       |       | | `-ParenExpr 0x145145888 <col:12, col:20> 'unsigned char' lvalue
|       |       | |   `-ArraySubscriptExpr 0x145145868 <col:13, col:19> 'unsigned char' lvalue
|       |       | |     |-ImplicitCastExpr 0x145145838 <col:13> 'unsigned char *' <LValueToRValue>
|       |       | |     | `-DeclRefExpr 0x1451457f8 <col:13> 'unsigned char *' lvalue Var 0x145128668 'pos' 'unsigned char *'
|       |       | |     `-ImplicitCastExpr 0x145145850 <col:17> 'unsigned short' <LValueToRValue>
|       |       | |       `-DeclRefExpr 0x145145818 <col:17> 'unsigned short' lvalue Var 0x1451423a0 'xc' 'unsigned short'
|       |       | |-DeclRefExpr 0x1451458c0 <col:23> 'unsigned short' lvalue Var 0x145143be0 'ps' 'unsigned short'
|       |       | |-IntegerLiteral 0x1451458e0 <col:27> 'int' 2
|       |       | `-RecoveryExpr 0x145145900 <col:30> '<dependent type>' contains-errors lvalue
|       |       `-CompoundAssignOperator 0x145145a10 <line:39:5, col:15> 'unsigned short' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|       |         |-DeclRefExpr 0x145145960 <col:5> 'unsigned short' lvalue Var 0x1451423a0 'xc' 'unsigned short'
|       |         `-BinaryOperator 0x1451459f0 <col:9, col:15> 'int' '<<'
|       |           |-ImplicitCastExpr 0x1451459d8 <col:9> 'int' <IntegralCast>
|       |           | `-ImplicitCastExpr 0x1451459c0 <col:9> 'unsigned short' <LValueToRValue>
|       |           |   `-DeclRefExpr 0x145145980 <col:9> 'unsigned short' lvalue Var 0x145143be0 'ps' 'unsigned short'
|       |           `-IntegerLiteral 0x1451459a0 <col:15> 'int' 1
|       |-IfStmt 0x145145c38 <line:42:3, col:20>
|       | |-ImplicitCastExpr 0x145145b20 <col:7> 'unsigned short' <LValueToRValue>
|       | | `-DeclRefExpr 0x145145b00 <col:7> 'unsigned short' lvalue Var 0x145142520 'lpf' 'unsigned short'
|       | `-BinaryOperator 0x145145c18 <col:12, col:20> 'unsigned char' '='
|       |   |-ArraySubscriptExpr 0x145145ba8 <col:12, col:18> 'unsigned char' lvalue
|       |   | |-ImplicitCastExpr 0x145145b78 <col:12> 'unsigned char *' <LValueToRValue>
|       |   | | `-DeclRefExpr 0x145145b38 <col:12> 'unsigned char *' lvalue Var 0x145128668 'pos' 'unsigned char *'
|       |   | `-ImplicitCastExpr 0x145145b90 <col:16> 'unsigned short' <LValueToRValue>
|       |   |   `-DeclRefExpr 0x145145b58 <col:16> 'unsigned short' lvalue Var 0x1451423a0 'xc' 'unsigned short'
|       |   `-ImplicitCastExpr 0x145145c00 <col:20> 'unsigned char' <IntegralCast>
|       |     `-ImplicitCastExpr 0x145145be8 <col:20> 'unsigned short' <LValueToRValue>
|       |       `-DeclRefExpr 0x145145bc8 <col:20> 'unsigned short' lvalue Var 0x1451425a0 'lpn' 'unsigned short'
|       `-UnaryOperator 0x145145c78 <line:43:3, col:5> 'unsigned short' postfix '++' cannot overflow
|         `-DeclRefExpr 0x145145c58 <col:3> 'unsigned short' lvalue Var 0x1451284b0 'yc' 'unsigned short'
`-FunctionDecl 0x145141b90 <line:5:2> col:2 implicit used memcpy 'void *(void *, const void *, unsigned long)' extern
  |-ParmVarDecl 0x145141c90 <<invalid sloc>> <invalid sloc> 'void *'
  |-ParmVarDecl 0x145141cf8 <<invalid sloc>> <invalid sloc> 'const void *'
  |-ParmVarDecl 0x145141d60 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x145141c38 <<invalid sloc>> Implicit 882
