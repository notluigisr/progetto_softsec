TranslationUnitDecl 0x129855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1298564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x129855bd0 '__int128'
|-TypedefDecl 0x129856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x129855bf0 'unsigned __int128'
|-TypedefDecl 0x12a00be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12a00bc00 'struct __NSConstantString_tag'
|   `-Record 0x129856580 '__NSConstantString_tag'
|-TypedefDecl 0x12a00be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x129855d90 '__SVInt8_t'
|-TypedefDecl 0x12a00bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x129855db0 '__SVInt16_t'
|-TypedefDecl 0x12a00bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x129855dd0 '__SVInt32_t'
|-TypedefDecl 0x12a00bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x129855df0 '__SVInt64_t'
|-TypedefDecl 0x12a00c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x129855e10 '__SVUint8_t'
|-TypedefDecl 0x12a00c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x129855e30 '__SVUint16_t'
|-TypedefDecl 0x12a00c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x129855e50 '__SVUint32_t'
|-TypedefDecl 0x12a00c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x129855e70 '__SVUint64_t'
|-TypedefDecl 0x12a00c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x129855e90 '__SVFloat16_t'
|-TypedefDecl 0x12a00c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x129855eb0 '__SVFloat32_t'
|-TypedefDecl 0x12a00c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x129855ed0 '__SVFloat64_t'
|-TypedefDecl 0x12a00c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x129855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12a00c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x129855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12a00c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x129855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12a00c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x129855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12a00c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x129855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12a00c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x129855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12a00c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x129855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12a00c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x129855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12a00c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x129855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12a00c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x129856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12a00c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x129856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12a00c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x129856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12a00c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x129856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12a00c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x129856090 '__clang_svint8x3_t'
|-TypedefDecl 0x12a00c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1298560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12a00c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1298560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12a00c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1298560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12a00c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x129856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12a00ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x129856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12a00cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x129856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12a00cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x129856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12a00cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x129856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12a00d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1298561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12a00d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1298561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12a00d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1298561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12a00d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x129856210 '__clang_svint8x4_t'
|-TypedefDecl 0x12a00d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x129856230 '__clang_svint16x4_t'
|-TypedefDecl 0x12a00d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x129856250 '__clang_svint32x4_t'
|-TypedefDecl 0x12a00d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x129856270 '__clang_svint64x4_t'
|-TypedefDecl 0x12a00d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x129856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12a00d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1298562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12a00d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1298562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12a00d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1298562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12a00d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x129856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12a00d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x129856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12a00d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x129856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12a00d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x129856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12a00da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x129856390 '__SVBool_t'
|-TypedefDecl 0x12a00da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1298563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12a00dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1298563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12a00db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1298563f0 '__SVCount_t'
|-TypedefDecl 0x12a00dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12a00dbb0 'char *'
|   `-BuiltinType 0x1298556b0 'char'
|-TypedefDecl 0x12a00dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12a00dbb0 'char *'
|   `-BuiltinType 0x1298556b0 'char'
|-FunctionDecl 0x12a00dda8 <dataset_diviso_filec/func12593_vuln.c:1:1, line:54:1> line:1:20 quote_arg 'const char *(const char *)' static
| |-ParmVarDecl 0x12a00dcd8 <col:30, col:42> col:42 used arg 'const char *'
| `-CompoundStmt 0x12a02a5e0 <line:2:1, line:54:1>
|   |-DeclStmt 0x12a00dff8 <line:4:2, col:20>
|   | |-VarDecl 0x12a00deb8 <col:2, col:12> col:6 used len 'int' cinit
|   | | `-IntegerLiteral 0x12a00df20 <col:12> 'int' 0
|   | `-VarDecl 0x12a00df58 <col:2, col:19> col:15 used n 'int' cinit
|   |   `-IntegerLiteral 0x12a00dfc0 <col:19> 'int' 0
|   |-DeclStmt 0x12a00e0b0 <line:5:2, col:22>
|   | `-VarDecl 0x12a00e028 <col:2, col:21> col:6 used force_quotes 'int' cinit
|   |   `-IntegerLiteral 0x12a00e090 <col:21> 'int' 0
|   |-DeclStmt 0x12a00e1e0 <line:6:2, col:13>
|   | |-VarDecl 0x12a00e0e0 <col:2, col:8> col:8 used q 'char *'
|   | `-VarDecl 0x12a00e160 <col:2, col:12> col:12 used d 'char *'
|   |-DeclStmt 0x12a00e2b0 <line:7:2, col:21>
|   | `-VarDecl 0x12a00e210 <col:2, col:18> col:14 used p 'const char *' cinit
|   |   `-ImplicitCastExpr 0x12a00e298 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x12a00e278 <col:18> 'const char *' lvalue ParmVar 0x12a00dcd8 'arg' 'const char *'
|   |-IfStmt 0x12a00e3a8 <line:8:2, col:26>
|   | |-UnaryOperator 0x12a00e330 <col:6, col:8> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x12a00e318 <col:7, col:8> 'char' <LValueToRValue>
|   | |   `-UnaryOperator 0x12a00e300 <col:7, col:8> 'const char' lvalue prefix '*' cannot overflow
|   | |     `-ImplicitCastExpr 0x12a00e2e8 <col:8> 'const char *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x12a00e2c8 <col:8> 'const char *' lvalue Var 0x12a00e210 'p' 'const char *'
|   | `-BinaryOperator 0x12a00e388 <col:11, col:26> 'int' '='
|   |   |-DeclRefExpr 0x12a00e348 <col:11> 'int' lvalue Var 0x12a00e028 'force_quotes' 'int'
|   |   `-IntegerLiteral 0x12a00e368 <col:26> 'int' 1
|   |-WhileStmt 0x12a028058 <line:9:2, line:27:2>
|   | |-ImplicitCastExpr 0x12a026618 <line:9:9, col:10> 'char' <LValueToRValue>
|   | | `-UnaryOperator 0x12a026600 <col:9, col:10> 'const char' lvalue prefix '*' cannot overflow
|   | |   `-ImplicitCastExpr 0x12a00e3e8 <col:10> 'const char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x12a00e3c8 <col:10> 'const char *' lvalue Var 0x12a00e210 'p' 'const char *'
|   | `-CompoundStmt 0x12a028030 <col:13, line:27:2>
|   |   |-IfStmt 0x12a027f90 <line:10:3, line:24:3> has_else
|   |   | |-BinaryOperator 0x12a0270a0 <line:10:7, col:67> 'int' '||'
|   |   | | |-BinaryOperator 0x12a026fc8 <col:7, col:54> 'int' '||'
|   |   | | | |-BinaryOperator 0x12a026ef0 <col:7, col:41> 'int' '||'
|   |   | | | | |-BinaryOperator 0x12a026e18 <col:7, col:28> 'int' '||'
|   |   | | | | | |-CallExpr 0x12a026d08 <col:7, col:17> 'int'
|   |   | | | | | | |-ImplicitCastExpr 0x12a026cf0 <col:7> 'int (*)(int)' <FunctionToPointerDecay>
|   |   | | | | | | | `-DeclRefExpr 0x12a026c50 <col:7> 'int (int)' Function 0x12a026a90 'isspace' 'int (int)'
|   |   | | | | | | `-ImplicitCastExpr 0x12a026d48 <col:15, col:16> 'int' <IntegralCast>
|   |   | | | | | |   `-ImplicitCastExpr 0x12a026d30 <col:15, col:16> 'char' <LValueToRValue>
|   |   | | | | | |     `-UnaryOperator 0x12a026ca8 <col:15, col:16> 'const char' lvalue prefix '*' cannot overflow
|   |   | | | | | |       `-ImplicitCastExpr 0x12a026c90 <col:16> 'const char *' <LValueToRValue>
|   |   | | | | | |         `-DeclRefExpr 0x12a026c70 <col:16> 'const char *' lvalue Var 0x12a00e210 'p' 'const char *'
|   |   | | | | | `-BinaryOperator 0x12a026df8 <col:22, col:28> 'int' '=='
|   |   | | | | |   |-ImplicitCastExpr 0x12a026de0 <col:22, col:23> 'int' <IntegralCast>
|   |   | | | | |   | `-ImplicitCastExpr 0x12a026dc8 <col:22, col:23> 'char' <LValueToRValue>
|   |   | | | | |   |   `-UnaryOperator 0x12a026d98 <col:22, col:23> 'const char' lvalue prefix '*' cannot overflow
|   |   | | | | |   |     `-ImplicitCastExpr 0x12a026d80 <col:23> 'const char *' <LValueToRValue>
|   |   | | | | |   |       `-DeclRefExpr 0x12a026d60 <col:23> 'const char *' lvalue Var 0x12a00e210 'p' 'const char *'
|   |   | | | | |   `-CharacterLiteral 0x12a026db0 <col:28> 'int' 42
|   |   | | | | `-BinaryOperator 0x12a026ed0 <col:35, col:41> 'int' '=='
|   |   | | | |   |-ImplicitCastExpr 0x12a026eb8 <col:35, col:36> 'int' <IntegralCast>
|   |   | | | |   | `-ImplicitCastExpr 0x12a026ea0 <col:35, col:36> 'char' <LValueToRValue>
|   |   | | | |   |   `-UnaryOperator 0x12a026e70 <col:35, col:36> 'const char' lvalue prefix '*' cannot overflow
|   |   | | | |   |     `-ImplicitCastExpr 0x12a026e58 <col:36> 'const char *' <LValueToRValue>
|   |   | | | |   |       `-DeclRefExpr 0x12a026e38 <col:36> 'const char *' lvalue Var 0x12a00e210 'p' 'const char *'
|   |   | | | |   `-CharacterLiteral 0x12a026e88 <col:41> 'int' 63
|   |   | | | `-BinaryOperator 0x12a026fa8 <col:48, col:54> 'int' '=='
|   |   | | |   |-ImplicitCastExpr 0x12a026f90 <col:48, col:49> 'int' <IntegralCast>
|   |   | | |   | `-ImplicitCastExpr 0x12a026f78 <col:48, col:49> 'char' <LValueToRValue>
|   |   | | |   |   `-UnaryOperator 0x12a026f48 <col:48, col:49> 'const char' lvalue prefix '*' cannot overflow
|   |   | | |   |     `-ImplicitCastExpr 0x12a026f30 <col:49> 'const char *' <LValueToRValue>
|   |   | | |   |       `-DeclRefExpr 0x12a026f10 <col:49> 'const char *' lvalue Var 0x12a00e210 'p' 'const char *'
|   |   | | |   `-CharacterLiteral 0x12a026f60 <col:54> 'int' 123
|   |   | | `-BinaryOperator 0x12a027080 <col:61, col:67> 'int' '=='
|   |   | |   |-ImplicitCastExpr 0x12a027068 <col:61, col:62> 'int' <IntegralCast>
|   |   | |   | `-ImplicitCastExpr 0x12a027050 <col:61, col:62> 'char' <LValueToRValue>
|   |   | |   |   `-UnaryOperator 0x12a027020 <col:61, col:62> 'const char' lvalue prefix '*' cannot overflow
|   |   | |   |     `-ImplicitCastExpr 0x12a027008 <col:62> 'const char *' <LValueToRValue>
|   |   | |   |       `-DeclRefExpr 0x12a026fe8 <col:62> 'const char *' lvalue Var 0x12a00e210 'p' 'const char *'
|   |   | |   `-CharacterLiteral 0x12a027038 <col:67> 'int' 39
|   |   | |-BinaryOperator 0x12a027100 <line:11:4, col:19> 'int' '='
|   |   | | |-DeclRefExpr 0x12a0270c0 <col:4> 'int' lvalue Var 0x12a00e028 'force_quotes' 'int'
|   |   | | `-IntegerLiteral 0x12a0270e0 <col:19> 'int' 1
|   |   | `-IfStmt 0x12a027f60 <line:12:8, line:24:3> has_else
|   |   |   |-BinaryOperator 0x12a0271b8 <line:12:12, col:18> 'int' '=='
|   |   |   | |-ImplicitCastExpr 0x12a0271a0 <col:12, col:13> 'int' <IntegralCast>
|   |   |   | | `-ImplicitCastExpr 0x12a027188 <col:12, col:13> 'char' <LValueToRValue>
|   |   |   | |   `-UnaryOperator 0x12a027158 <col:12, col:13> 'const char' lvalue prefix '*' cannot overflow
|   |   |   | |     `-ImplicitCastExpr 0x12a027140 <col:13> 'const char *' <LValueToRValue>
|   |   |   | |       `-DeclRefExpr 0x12a027120 <col:13> 'const char *' lvalue Var 0x12a00e210 'p' 'const char *'
|   |   |   | `-CharacterLiteral 0x12a027170 <col:18> 'int' 34
|   |   |   |-UnaryOperator 0x12a0271f8 <line:13:4, col:5> 'int' postfix '++'
|   |   |   | `-DeclRefExpr 0x12a0271d8 <col:4> 'int' lvalue Var 0x12a00df58 'n' 'int'
|   |   |   `-IfStmt 0x12a027f40 <line:14:8, line:24:3>
|   |   |     |-BinaryOperator 0x12a0272a8 <line:14:12, col:18> 'int' '=='
|   |   |     | |-ImplicitCastExpr 0x12a027290 <col:12, col:13> 'int' <IntegralCast>
|   |   |     | | `-ImplicitCastExpr 0x12a027278 <col:12, col:13> 'char' <LValueToRValue>
|   |   |     | |   `-UnaryOperator 0x12a027248 <col:12, col:13> 'const char' lvalue prefix '*' cannot overflow
|   |   |     | |     `-ImplicitCastExpr 0x12a027230 <col:13> 'const char *' <LValueToRValue>
|   |   |     | |       `-DeclRefExpr 0x12a027210 <col:13> 'const char *' lvalue Var 0x12a00e210 'p' 'const char *'
|   |   |     | `-CharacterLiteral 0x12a027260 <col:18> 'int' 92
|   |   |     `-CompoundStmt 0x12a027f10 <col:24, line:24:3>
|   |   |       |-DeclStmt 0x12a027368 <line:15:4, col:17>
|   |   |       | `-VarDecl 0x12a0272e0 <col:4, col:16> col:8 used count 'int' cinit
|   |   |       |   `-IntegerLiteral 0x12a027348 <col:16> 'int' 0
|   |   |       |-WhileStmt 0x12a027508 <line:16:4, line:20:4>
|   |   |       | |-BinaryOperator 0x12a027418 <line:16:11, col:17> 'int' '=='
|   |   |       | | |-ImplicitCastExpr 0x12a027400 <col:11, col:12> 'int' <IntegralCast>
|   |   |       | | | `-ImplicitCastExpr 0x12a0273e8 <col:11, col:12> 'char' <LValueToRValue>
|   |   |       | | |   `-UnaryOperator 0x12a0273b8 <col:11, col:12> 'const char' lvalue prefix '*' cannot overflow
|   |   |       | | |     `-ImplicitCastExpr 0x12a0273a0 <col:12> 'const char *' <LValueToRValue>
|   |   |       | | |       `-DeclRefExpr 0x12a027380 <col:12> 'const char *' lvalue Var 0x12a00e210 'p' 'const char *'
|   |   |       | | `-CharacterLiteral 0x12a0273d0 <col:17> 'int' 92
|   |   |       | `-CompoundStmt 0x12a0274e0 <col:23, line:20:4>
|   |   |       |   |-UnaryOperator 0x12a027458 <line:17:5, col:10> 'int' postfix '++'
|   |   |       |   | `-DeclRefExpr 0x12a027438 <col:5> 'int' lvalue Var 0x12a0272e0 'count' 'int'
|   |   |       |   |-UnaryOperator 0x12a027490 <line:18:5, col:6> 'const char *' postfix '++'
|   |   |       |   | `-DeclRefExpr 0x12a027470 <col:5> 'const char *' lvalue Var 0x12a00e210 'p' 'const char *'
|   |   |       |   `-UnaryOperator 0x12a0274c8 <line:19:5, col:8> 'int' postfix '++'
|   |   |       |     `-DeclRefExpr 0x12a0274a8 <col:5> 'int' lvalue Var 0x12a00deb8 'len' 'int'
|   |   |       |-IfStmt 0x12a027ee8 <line:21:4, line:22:20>
|   |   |       | |-BinaryOperator 0x12a0275c0 <line:21:8, col:14> 'int' '=='
|   |   |       | | |-ImplicitCastExpr 0x12a0275a8 <col:8, col:9> 'int' <IntegralCast>
|   |   |       | | | `-ImplicitCastExpr 0x12a027590 <col:8, col:9> 'char' <LValueToRValue>
|   |   |       | | |   `-UnaryOperator 0x12a027560 <col:8, col:9> 'const char' lvalue prefix '*' cannot overflow
|   |   |       | | |     `-ImplicitCastExpr 0x12a027548 <col:9> 'const char *' <LValueToRValue>
|   |   |       | | |       `-DeclRefExpr 0x12a027528 <col:9> 'const char *' lvalue Var 0x12a00e210 'p' 'const char *'
|   |   |       | | `-CharacterLiteral 0x12a027578 <col:14> 'int' 34
|   |   |       | `-CompoundAssignOperator 0x12a027eb8 <line:22:5, col:20> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |       |   |-DeclRefExpr 0x12a0275e0 <col:5> 'int' lvalue Var 0x12a00df58 'n' 'int'
|   |   |       |   `-BinaryOperator 0x12a027e98 <col:10, col:20> 'int' '+'
|   |   |       |     |-BinaryOperator 0x12a027e58 <col:10, col:16> 'int' '*'
|   |   |       |     | |-ImplicitCastExpr 0x12a027e40 <col:10> 'int' <LValueToRValue>
|   |   |       |     | | `-DeclRefExpr 0x12a027e00 <col:10> 'int' lvalue Var 0x12a0272e0 'count' 'int'
|   |   |       |     | `-IntegerLiteral 0x12a027e20 <col:16> 'int' 2
|   |   |       |     `-IntegerLiteral 0x12a027e78 <col:20> 'int' 1
|   |   |       `-ContinueStmt 0x12a027f08 <line:23:4>
|   |   |-UnaryOperator 0x12a027fe0 <line:25:3, col:6> 'int' postfix '++'
|   |   | `-DeclRefExpr 0x12a027fc0 <col:3> 'int' lvalue Var 0x12a00deb8 'len' 'int'
|   |   `-UnaryOperator 0x12a028018 <line:26:3, col:4> 'const char *' postfix '++'
|   |     `-DeclRefExpr 0x12a027ff8 <col:3> 'const char *' lvalue Var 0x12a00e210 'p' 'const char *'
|   |-IfStmt 0x12a0281a8 <line:28:2, line:29:10>
|   | |-BinaryOperator 0x12a028140 <line:28:6, col:28> 'int' '&&'
|   | | |-UnaryOperator 0x12a0280b0 <col:6, col:7> 'int' prefix '!' cannot overflow
|   | | | `-ImplicitCastExpr 0x12a028098 <col:7> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x12a028078 <col:7> 'int' lvalue Var 0x12a00e028 'force_quotes' 'int'
|   | | `-BinaryOperator 0x12a028120 <col:23, col:28> 'int' '=='
|   | |   |-ImplicitCastExpr 0x12a028108 <col:23> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x12a0280c8 <col:23> 'int' lvalue Var 0x12a00df58 'n' 'int'
|   | |   `-IntegerLiteral 0x12a0280e8 <col:28> 'int' 0
|   | `-ReturnStmt 0x12a028198 <line:29:3, col:10>
|   |   `-ImplicitCastExpr 0x12a028180 <col:10> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x12a028160 <col:10> 'const char *' lvalue ParmVar 0x12a00dcd8 'arg' 'const char *'
|   |-BinaryOperator 0x12a0285d8 <line:32:2, col:36> 'char *' '='
|   | |-DeclRefExpr 0x12a0281c8 <col:2> 'char *' lvalue Var 0x12a00e160 'd' 'char *'
|   | `-BinaryOperator 0x12a0285b8 <col:6, col:36> 'char *' '='
|   |   |-DeclRefExpr 0x12a0281e8 <col:6> 'char *' lvalue Var 0x12a00e0e0 'q' 'char *'
|   |   `-ImplicitCastExpr 0x12a0285a0 <col:10, col:36> 'char *' <IntegralToPointer>
|   |     `-CallExpr 0x12a028578 <col:10, col:36> 'int'
|   |       |-ImplicitCastExpr 0x12a028560 <col:10> 'int (*)()' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x12a028330 <col:10> 'int ()' Function 0x12a028278 'xmalloc' 'int ()'
|   |       `-CallExpr 0x12a0284f8 <col:18, col:35> 'int'
|   |         |-ImplicitCastExpr 0x12a0284e0 <col:18> 'int (*)()' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x12a028430 <col:18> 'int ()' Function 0x12a028378 'st_add3' 'int ()'
|   |         |-ImplicitCastExpr 0x12a028530 <col:26> 'int' <LValueToRValue>
|   |         | `-DeclRefExpr 0x12a028450 <col:26> 'int' lvalue Var 0x12a00deb8 'len' 'int'
|   |         |-ImplicitCastExpr 0x12a028548 <col:31> 'int' <LValueToRValue>
|   |         | `-DeclRefExpr 0x12a028470 <col:31> 'int' lvalue Var 0x12a00df58 'n' 'int'
|   |         `-IntegerLiteral 0x12a028490 <col:34> 'int' 3
|   |-BinaryOperator 0x12a028678 <line:33:2, col:9> 'char' '='
|   | |-UnaryOperator 0x12a028630 <col:2, col:4> 'char' lvalue prefix '*' cannot overflow
|   | | `-UnaryOperator 0x12a028618 <col:3, col:4> 'char *' postfix '++'
|   | |   `-DeclRefExpr 0x12a0285f8 <col:3> 'char *' lvalue Var 0x12a00e160 'd' 'char *'
|   | `-ImplicitCastExpr 0x12a028660 <col:9> 'char' <IntegralCast>
|   |   `-CharacterLiteral 0x12a028648 <col:9> 'int' 34
|   |-WhileStmt 0x12a02a418 <line:34:2, line:50:2>
|   | |-ImplicitCastExpr 0x12a0286e8 <line:34:9, col:10> 'char' <LValueToRValue>
|   | | `-UnaryOperator 0x12a0286d0 <col:9, col:10> 'const char' lvalue prefix '*' cannot overflow
|   | |   `-ImplicitCastExpr 0x12a0286b8 <col:10> 'const char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x12a028698 <col:10> 'const char *' lvalue ParmVar 0x12a00dcd8 'arg' 'const char *'
|   | `-CompoundStmt 0x12a02a3f8 <col:15, line:50:2>
|   |   |-IfStmt 0x12a02a2f0 <line:35:3, line:48:3> has_else
|   |   | |-BinaryOperator 0x12a028798 <line:35:7, col:15> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x12a028780 <col:7, col:8> 'int' <IntegralCast>
|   |   | | | `-ImplicitCastExpr 0x12a028768 <col:7, col:8> 'char' <LValueToRValue>
|   |   | | |   `-UnaryOperator 0x12a028738 <col:7, col:8> 'const char' lvalue prefix '*' cannot overflow
|   |   | | |     `-ImplicitCastExpr 0x12a028720 <col:8> 'const char *' <LValueToRValue>
|   |   | | |       `-DeclRefExpr 0x12a028700 <col:8> 'const char *' lvalue ParmVar 0x12a00dcd8 'arg' 'const char *'
|   |   | | `-CharacterLiteral 0x12a028750 <col:15> 'int' 34
|   |   | |-BinaryOperator 0x12a028838 <line:36:4, col:11> 'char' '='
|   |   | | |-UnaryOperator 0x12a0287f0 <col:4, col:6> 'char' lvalue prefix '*' cannot overflow
|   |   | | | `-UnaryOperator 0x12a0287d8 <col:5, col:6> 'char *' postfix '++'
|   |   | | |   `-DeclRefExpr 0x12a0287b8 <col:5> 'char *' lvalue Var 0x12a00e160 'd' 'char *'
|   |   | | `-ImplicitCastExpr 0x12a028820 <col:11> 'char' <IntegralCast>
|   |   | |   `-CharacterLiteral 0x12a028808 <col:11> 'int' 92
|   |   | `-IfStmt 0x12a02a2d0 <line:37:8, line:48:3>
|   |   |   |-BinaryOperator 0x12a0288f0 <line:37:12, col:20> 'int' '=='
|   |   |   | |-ImplicitCastExpr 0x12a0288d8 <col:12, col:13> 'int' <IntegralCast>
|   |   |   | | `-ImplicitCastExpr 0x12a0288c0 <col:12, col:13> 'char' <LValueToRValue>
|   |   |   | |   `-UnaryOperator 0x12a028890 <col:12, col:13> 'const char' lvalue prefix '*' cannot overflow
|   |   |   | |     `-ImplicitCastExpr 0x12a028878 <col:13> 'const char *' <LValueToRValue>
|   |   |   | |       `-DeclRefExpr 0x12a028858 <col:13> 'const char *' lvalue ParmVar 0x12a00dcd8 'arg' 'const char *'
|   |   |   | `-CharacterLiteral 0x12a0288a8 <col:20> 'int' 92
|   |   |   `-CompoundStmt 0x12a02a2a8 <col:26, line:48:3>
|   |   |     |-DeclStmt 0x12a0289b0 <line:38:4, col:17>
|   |   |     | `-VarDecl 0x12a028928 <col:4, col:16> col:8 used count 'int' cinit
|   |   |     |   `-IntegerLiteral 0x12a028990 <col:16> 'int' 0
|   |   |     |-WhileStmt 0x12a028bb0 <line:39:4, line:42:4>
|   |   |     | |-BinaryOperator 0x12a028a60 <line:39:11, col:19> 'int' '=='
|   |   |     | | |-ImplicitCastExpr 0x12a028a48 <col:11, col:12> 'int' <IntegralCast>
|   |   |     | | | `-ImplicitCastExpr 0x12a028a30 <col:11, col:12> 'char' <LValueToRValue>
|   |   |     | | |   `-UnaryOperator 0x12a028a00 <col:11, col:12> 'const char' lvalue prefix '*' cannot overflow
|   |   |     | | |     `-ImplicitCastExpr 0x12a0289e8 <col:12> 'const char *' <LValueToRValue>
|   |   |     | | |       `-DeclRefExpr 0x12a0289c8 <col:12> 'const char *' lvalue ParmVar 0x12a00dcd8 'arg' 'const char *'
|   |   |     | | `-CharacterLiteral 0x12a028a18 <col:19> 'int' 92
|   |   |     | `-CompoundStmt 0x12a028b90 <col:25, line:42:4>
|   |   |     |   |-UnaryOperator 0x12a028aa0 <line:40:5, col:10> 'int' postfix '++'
|   |   |     |   | `-DeclRefExpr 0x12a028a80 <col:5> 'int' lvalue Var 0x12a028928 'count' 'int'
|   |   |     |   `-BinaryOperator 0x12a028b70 <line:41:5, col:16> 'char' '='
|   |   |     |     |-UnaryOperator 0x12a028af0 <col:5, col:7> 'char' lvalue prefix '*' cannot overflow
|   |   |     |     | `-UnaryOperator 0x12a028ad8 <col:6, col:7> 'char *' postfix '++'
|   |   |     |     |   `-DeclRefExpr 0x12a028ab8 <col:6> 'char *' lvalue Var 0x12a00e160 'd' 'char *'
|   |   |     |     `-ImplicitCastExpr 0x12a028b58 <col:12, col:16> 'char' <LValueToRValue>
|   |   |     |       `-UnaryOperator 0x12a028b40 <col:12, col:16> 'const char' lvalue prefix '*' cannot overflow
|   |   |     |         `-UnaryOperator 0x12a028b28 <col:13, col:16> 'const char *' postfix '++'
|   |   |     |           `-DeclRefExpr 0x12a028b08 <col:13> 'const char *' lvalue ParmVar 0x12a00dcd8 'arg' 'const char *'
|   |   |     `-IfStmt 0x12a02a288 <line:43:4, line:47:4>
|   |   |       |-BinaryOperator 0x12a028c68 <line:43:8, col:16> 'int' '=='
|   |   |       | |-ImplicitCastExpr 0x12a028c50 <col:8, col:9> 'int' <IntegralCast>
|   |   |       | | `-ImplicitCastExpr 0x12a028c38 <col:8, col:9> 'char' <LValueToRValue>
|   |   |       | |   `-UnaryOperator 0x12a028c08 <col:8, col:9> 'const char' lvalue prefix '*' cannot overflow
|   |   |       | |     `-ImplicitCastExpr 0x12a028bf0 <col:9> 'const char *' <LValueToRValue>
|   |   |       | |       `-DeclRefExpr 0x12a028bd0 <col:9> 'const char *' lvalue ParmVar 0x12a00dcd8 'arg' 'const char *'
|   |   |       | `-CharacterLiteral 0x12a028c20 <col:16> 'int' 34
|   |   |       `-CompoundStmt 0x12a02a268 <col:21, line:47:4>
|   |   |         |-WhileStmt 0x12a028da0 <line:44:5, line:45:13>
|   |   |         | |-BinaryOperator 0x12a028ce0 <line:44:12, col:22> 'int' '>'
|   |   |         | | |-UnaryOperator 0x12a028ca8 <col:12, col:17> 'int' postfix '--'
|   |   |         | | | `-DeclRefExpr 0x12a028c88 <col:12> 'int' lvalue Var 0x12a028928 'count' 'int'
|   |   |         | | `-IntegerLiteral 0x12a028cc0 <col:22> 'int' 0
|   |   |         | `-BinaryOperator 0x12a028d80 <line:45:6, col:13> 'char' '='
|   |   |         |   |-UnaryOperator 0x12a028d38 <col:6, col:8> 'char' lvalue prefix '*' cannot overflow
|   |   |         |   | `-UnaryOperator 0x12a028d20 <col:7, col:8> 'char *' postfix '++'
|   |   |         |   |   `-DeclRefExpr 0x12a028d00 <col:7> 'char *' lvalue Var 0x12a00e160 'd' 'char *'
|   |   |         |   `-ImplicitCastExpr 0x12a028d68 <col:13> 'char' <IntegralCast>
|   |   |         |     `-CharacterLiteral 0x12a028d50 <col:13> 'int' 92
|   |   |         `-BinaryOperator 0x12a02a248 <line:46:5, col:12> 'char' '='
|   |   |           |-UnaryOperator 0x12a02a200 <col:5, col:7> 'char' lvalue prefix '*' cannot overflow
|   |   |           | `-UnaryOperator 0x12a028de0 <col:6, col:7> 'char *' postfix '++'
|   |   |           |   `-DeclRefExpr 0x12a028dc0 <col:6> 'char *' lvalue Var 0x12a00e160 'd' 'char *'
|   |   |           `-ImplicitCastExpr 0x12a02a230 <col:12> 'char' <IntegralCast>
|   |   |             `-CharacterLiteral 0x12a02a218 <col:12> 'int' 92
|   |   `-BinaryOperator 0x12a02a3d8 <line:49:3, col:14> 'char' '='
|   |     |-UnaryOperator 0x12a02a358 <col:3, col:5> 'char' lvalue prefix '*' cannot overflow
|   |     | `-UnaryOperator 0x12a02a340 <col:4, col:5> 'char *' postfix '++'
|   |     |   `-DeclRefExpr 0x12a02a320 <col:4> 'char *' lvalue Var 0x12a00e160 'd' 'char *'
|   |     `-ImplicitCastExpr 0x12a02a3c0 <col:10, col:14> 'char' <LValueToRValue>
|   |       `-UnaryOperator 0x12a02a3a8 <col:10, col:14> 'const char' lvalue prefix '*' cannot overflow
|   |         `-UnaryOperator 0x12a02a390 <col:11, col:14> 'const char *' postfix '++'
|   |           `-DeclRefExpr 0x12a02a370 <col:11> 'const char *' lvalue ParmVar 0x12a00dcd8 'arg' 'const char *'
|   |-BinaryOperator 0x12a02a4b8 <line:51:2, col:9> 'char' '='
|   | |-UnaryOperator 0x12a02a470 <col:2, col:4> 'char' lvalue prefix '*' cannot overflow
|   | | `-UnaryOperator 0x12a02a458 <col:3, col:4> 'char *' postfix '++'
|   | |   `-DeclRefExpr 0x12a02a438 <col:3> 'char *' lvalue Var 0x12a00e160 'd' 'char *'
|   | `-ImplicitCastExpr 0x12a02a4a0 <col:9> 'char' <IntegralCast>
|   |   `-CharacterLiteral 0x12a02a488 <col:9> 'int' 34
|   |-BinaryOperator 0x12a02a560 <line:52:2, col:9> 'char' '='
|   | |-UnaryOperator 0x12a02a510 <col:2, col:4> 'char' lvalue prefix '*' cannot overflow
|   | | `-UnaryOperator 0x12a02a4f8 <col:3, col:4> 'char *' postfix '++'
|   | |   `-DeclRefExpr 0x12a02a4d8 <col:3> 'char *' lvalue Var 0x12a00e160 'd' 'char *'
|   | `-ImplicitCastExpr 0x12a02a548 <col:9> 'char' <IntegralCast>
|   |   `-IntegerLiteral 0x12a02a528 <col:9> 'int' 0
|   `-ReturnStmt 0x12a02a5d0 <line:53:2, col:9>
|     `-ImplicitCastExpr 0x12a02a5b8 <col:9> 'const char *' <NoOp>
|       `-ImplicitCastExpr 0x12a02a5a0 <col:9> 'char *' <LValueToRValue>
|         `-DeclRefExpr 0x12a02a580 <col:9> 'char *' lvalue Var 0x12a00e0e0 'q' 'char *'
`-FunctionDecl 0x12a026a90 <line:10:7> col:7 implicit used isspace 'int (int)' extern
  |-ParmVarDecl 0x12a026b90 <<invalid sloc>> <invalid sloc> 'int'
  |-BuiltinAttr 0x12a026b38 <<invalid sloc>> Implicit 929
  |-NoThrowAttr 0x12a026c00 <col:7> Implicit
  `-PureAttr 0x12a026c28 <col:7> Implicit
