TranslationUnitDecl 0x14d055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x14d0564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x14d055bd0 '__int128'
|-TypedefDecl 0x14d056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x14d055bf0 'unsigned __int128'
|-TypedefDecl 0x14d126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x14d126000 'struct __NSConstantString_tag'
|   `-Record 0x14d056580 '__NSConstantString_tag'
|-TypedefDecl 0x14d126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x14d055d90 '__SVInt8_t'
|-TypedefDecl 0x14d126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x14d055db0 '__SVInt16_t'
|-TypedefDecl 0x14d126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x14d055dd0 '__SVInt32_t'
|-TypedefDecl 0x14d1263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x14d055df0 '__SVInt64_t'
|-TypedefDecl 0x14d126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x14d055e10 '__SVUint8_t'
|-TypedefDecl 0x14d1264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x14d055e30 '__SVUint16_t'
|-TypedefDecl 0x14d126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x14d055e50 '__SVUint32_t'
|-TypedefDecl 0x14d126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x14d055e70 '__SVUint64_t'
|-TypedefDecl 0x14d1265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x14d055e90 '__SVFloat16_t'
|-TypedefDecl 0x14d126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x14d055eb0 '__SVFloat32_t'
|-TypedefDecl 0x14d1266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x14d055ed0 '__SVFloat64_t'
|-TypedefDecl 0x14d126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x14d055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x14d126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x14d055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x14d1267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x14d055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x14d126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x14d055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x14d1268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x14d055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x14d126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x14d055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x14d126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x14d055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x14d1269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x14d055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x14d126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x14d055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x14d126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x14d056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x14d126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x14d056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x14d126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x14d056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x14d126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x14d056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x14d126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x14d056090 '__clang_svint8x3_t'
|-TypedefDecl 0x14d126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x14d0560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x14d126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x14d0560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x14d126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x14d0560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x14d126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x14d056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x14d126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x14d056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x14d126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x14d056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x14d126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x14d056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x14d126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x14d056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x14d127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x14d0561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x14d127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x14d0561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x14d1278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x14d0561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x14d127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x14d056210 '__clang_svint8x4_t'
|-TypedefDecl 0x14d1279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x14d056230 '__clang_svint16x4_t'
|-TypedefDecl 0x14d127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x14d056250 '__clang_svint32x4_t'
|-TypedefDecl 0x14d127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x14d056270 '__clang_svint64x4_t'
|-TypedefDecl 0x14d127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x14d056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x14d127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x14d0562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x14d127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x14d0562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x14d127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x14d0562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x14d127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x14d056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x14d127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x14d056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x14d127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x14d056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x14d127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x14d056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x14d127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x14d056390 '__SVBool_t'
|-TypedefDecl 0x14d127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x14d0563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x14d127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x14d0563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x14d127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x14d0563f0 '__SVCount_t'
|-TypedefDecl 0x14d127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x14d127fb0 'char *'
|   `-BuiltinType 0x14d0556b0 'char'
|-TypedefDecl 0x14d128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x14d127fb0 'char *'
|   `-BuiltinType 0x14d0556b0 'char'
|-FunctionDecl 0x14d1283f8 <dataset_diviso_filec/func16138_vuln.c:1:1, line:56:1> line:1:32 invalid _gdContributionsCalc 'int *(unsigned int, unsigned int, double, const int)' static inline
| |-ParmVarDecl 0x14d1280f0 <col:53, col:66> col:66 used line_size 'unsigned int'
| |-ParmVarDecl 0x14d128170 <col:77, col:90> col:90 used src_size 'unsigned int'
| |-ParmVarDecl 0x14d1281f0 <col:100, col:107> col:107 used scale_d 'double'
| |-ParmVarDecl 0x14d128270 <col:117, col:144> col:144 invalid pFilter 'const int'
| `-CompoundStmt 0x14f0095c8 <line:2:1, line:56:1>
|   |-DeclStmt 0x14d128540 <line:3:2, col:16>
|   | `-VarDecl 0x14d1284d8 <col:2, col:9> col:9 used width_d 'double'
|   |-DeclStmt 0x14d1285f8 <line:4:2, col:24>
|   | `-VarDecl 0x14d128570 <col:2, col:21> col:9 used scale_f_d 'double' cinit
|   |   `-FloatingLiteral 0x14d1285d8 <col:21> 'double' 1.000000e+00
|   |-DeclStmt 0x14d1286c8 <line:5:2, col:50>
|   | `-VarDecl 0x14d128628 <col:2, col:32> col:15 used filter_width_d 'const double' cinit
|   |   `-RecoveryExpr 0x14d1286a8 <col:32> '<dependent type>' contains-errors lvalue
|   |-DeclStmt 0x14d128760 <line:6:2, col:18>
|   | `-VarDecl 0x14d1286f8 <col:2, col:6> col:6 used windows_size 'int'
|   |-DeclStmt 0x14d809200 <line:7:2, col:16>
|   | `-VarDecl 0x14d128790 <col:2, col:15> col:15 used u 'unsigned int'
|   |-IfStmt 0x14d8094a0 <line:10:2, line:15:2> has_else
|   | |-BinaryOperator 0x14d809288 <line:10:6, col:16> 'int' '<'
|   | | |-ImplicitCastExpr 0x14d809270 <col:6> 'double' <LValueToRValue>
|   | | | `-DeclRefExpr 0x14d809230 <col:6> 'double' lvalue ParmVar 0x14d1281f0 'scale_d' 'double'
|   | | `-FloatingLiteral 0x14d809250 <col:16> 'double' 1.000000e+00
|   | |-CompoundStmt 0x14d8093f0 <col:21, line:13:2>
|   | | |-BinaryOperator 0x14d809358 <line:11:3, col:30> 'double' contains-errors '='
|   | | | |-DeclRefExpr 0x14d8092a8 <col:3> 'double' lvalue Var 0x14d1284d8 'width_d' 'double'
|   | | | `-BinaryOperator 0x14d809338 <col:13, col:30> 'double' contains-errors '/'
|   | | |   |-ImplicitCastExpr 0x14d809308 <col:13> 'double' contains-errors <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x14d8092c8 <col:13> 'const double' contains-errors lvalue Var 0x14d128628 'filter_width_d' 'const double'
|   | | |   `-ImplicitCastExpr 0x14d809320 <col:30> 'double' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x14d8092e8 <col:30> 'double' lvalue ParmVar 0x14d1281f0 'scale_d' 'double'
|   | | `-BinaryOperator 0x14d8093d0 <line:12:3, col:15> 'double' '='
|   | |   |-DeclRefExpr 0x14d809378 <col:3> 'double' lvalue Var 0x14d128570 'scale_f_d' 'double'
|   | |   `-ImplicitCastExpr 0x14d8093b8 <col:15> 'double' <LValueToRValue>
|   | |     `-DeclRefExpr 0x14d809398 <col:15> 'double' lvalue ParmVar 0x14d1281f0 'scale_d' 'double'
|   | `-CompoundStmt 0x14d809488 <line:13:10, line:15:2>
|   |   `-BinaryOperator 0x14d809468 <line:14:3, col:12> 'double' contains-errors '='
|   |     |-DeclRefExpr 0x14d809410 <col:3> 'double' lvalue Var 0x14d1284d8 'width_d' 'double'
|   |     `-ImplicitCastExpr 0x14d809450 <col:12> 'double' contains-errors <LValueToRValue>
|   |       `-DeclRefExpr 0x14d809430 <col:12> 'const double' contains-errors lvalue Var 0x14d128628 'filter_width_d' 'const double'
|   |-BinaryOperator 0x14d809c98 <line:17:2, col:42> 'int' '='
|   | |-DeclRefExpr 0x14d8094d0 <col:2> 'int' lvalue Var 0x14d1286f8 'windows_size' 'int'
|   | `-BinaryOperator 0x14d809c78 <col:17, col:42> 'int' '+'
|   |   |-BinaryOperator 0x14d809c38 <col:17, col:38> 'int' '*'
|   |   | |-IntegerLiteral 0x14d8094f0 <col:17> 'int' 2
|   |   | `-CStyleCastExpr 0x14d809c10 <col:21, col:38> 'int' <FloatingToIntegral>
|   |   |   `-CallExpr 0x14d809bb8 <col:26, col:38> 'double'
|   |   |     |-ImplicitCastExpr 0x14d809ba0 <col:26> 'double (*)(double)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x14d809b30 <col:26> 'double (double)' Function 0x14d809970 'ceil' 'double (double)'
|   |   |     `-ImplicitCastExpr 0x14d809be0 <col:31> 'double' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x14d809b50 <col:31> 'double' lvalue Var 0x14d1284d8 'width_d' 'double'
|   |   `-IntegerLiteral 0x14d809c58 <col:42> 'int' 1
|   |-ForStmt 0x14f009548 <line:20:2, line:54:2>
|   | |-BinaryOperator 0x14d809f70 <line:20:7, col:11> 'unsigned int' '='
|   | | |-DeclRefExpr 0x14d809f18 <col:7> 'unsigned int' lvalue Var 0x14d128790 'u' 'unsigned int'
|   | | `-ImplicitCastExpr 0x14d809f58 <col:11> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x14d809f38 <col:11> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x14d80a000 <col:14, col:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x14d809fd0 <col:14> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x14d809f90 <col:14> 'unsigned int' lvalue Var 0x14d128790 'u' 'unsigned int'
|   | | `-ImplicitCastExpr 0x14d809fe8 <col:18> 'unsigned int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x14d809fb0 <col:18> 'unsigned int' lvalue ParmVar 0x14d1280f0 'line_size' 'unsigned int'
|   | |-UnaryOperator 0x14d80a040 <col:29, col:30> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x14d80a020 <col:29> 'unsigned int' lvalue Var 0x14d128790 'u' 'unsigned int'
|   | `-CompoundStmt 0x14f0094f0 <col:34, line:54:2>
|   |   |-DeclStmt 0x14d80a1a8 <line:21:3, col:45>
|   |   | `-VarDecl 0x14d80a070 <col:3, col:38> col:16 used dCenter 'const double' cinit
|   |   |   `-BinaryOperator 0x14d80a188 <col:26, col:38> 'double' '/'
|   |   |     |-CStyleCastExpr 0x14d80a128 <col:26, col:34> 'double' <IntegralToFloating>
|   |   |     | `-ImplicitCastExpr 0x14d80a110 <col:34> 'unsigned int' <LValueToRValue> part_of_explicit_cast
|   |   |     |   `-DeclRefExpr 0x14d80a0d8 <col:34> 'unsigned int' lvalue Var 0x14d128790 'u' 'unsigned int'
|   |   |     `-ImplicitCastExpr 0x14d80a170 <col:38> 'double' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x14d80a150 <col:38> 'double' lvalue ParmVar 0x14d1281f0 'scale_d' 'double'
|   |   |-DeclStmt 0x14e808d18 <line:23:3, col:62>
|   |   | `-VarDecl 0x14e808800 <col:3, col:61> col:16 used iLeft 'int' register cinit
|   |   |   `-CallExpr 0x14e808c90 <col:24, col:61> 'int'
|   |   |     |-ImplicitCastExpr 0x14e808c78 <col:24> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x14e808948 <col:24> 'int ()' Function 0x14e808890 'MAX' 'int ()'
|   |   |     |-IntegerLiteral 0x14e808968 <col:28> 'int' 0
|   |   |     `-CStyleCastExpr 0x14e808c50 <col:31, col:60> 'int' <FloatingToIntegral>
|   |   |       `-CallExpr 0x14e808c10 <col:36, col:60> 'double'
|   |   |         |-ImplicitCastExpr 0x14e808bf8 <col:36> 'double (*)(double)' <FunctionToPointerDecay>
|   |   |         | `-DeclRefExpr 0x14e808b48 <col:36> 'double (double)' Function 0x14e808988 'floor' 'double (double)'
|   |   |         `-BinaryOperator 0x14e808bd8 <col:43, col:53> 'double' '-'
|   |   |           |-ImplicitCastExpr 0x14e808ba8 <col:43> 'double' <LValueToRValue>
|   |   |           | `-DeclRefExpr 0x14e808b68 <col:43> 'const double' lvalue Var 0x14d80a070 'dCenter' 'const double'
|   |   |           `-ImplicitCastExpr 0x14e808bc0 <col:53> 'double' <LValueToRValue>
|   |   |             `-DeclRefExpr 0x14e808b88 <col:53> 'double' lvalue Var 0x14d1284d8 'width_d' 'double'
|   |   |-DeclStmt 0x14e8090e0 <line:24:3, col:68>
|   |   | `-VarDecl 0x14e808d48 <col:3, col:67> col:7 used iRight 'int' cinit
|   |   |   `-CallExpr 0x14e8090b0 <col:16, col:67> 'int'
|   |   |     |-ImplicitCastExpr 0x14e809098 <col:16> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x14e808e90 <col:16> 'int ()' Function 0x14e808dd8 'MIN' 'int ()'
|   |   |     |-CStyleCastExpr 0x14e808fb8 <col:20, col:47> 'int' <FloatingToIntegral>
|   |   |     | `-CallExpr 0x14e808f78 <col:25, col:47> 'double'
|   |   |     |   |-ImplicitCastExpr 0x14e808f60 <col:25> 'double (*)(double)' <FunctionToPointerDecay>
|   |   |     |   | `-DeclRefExpr 0x14e808eb0 <col:25> 'double (double)' Function 0x14d809970 'ceil' 'double (double)'
|   |   |     |   `-BinaryOperator 0x14e808f40 <col:30, col:40> 'double' '+'
|   |   |     |     |-ImplicitCastExpr 0x14e808f10 <col:30> 'double' <LValueToRValue>
|   |   |     |     | `-DeclRefExpr 0x14e808ed0 <col:30> 'const double' lvalue Var 0x14d80a070 'dCenter' 'const double'
|   |   |     |     `-ImplicitCastExpr 0x14e808f28 <col:40> 'double' <LValueToRValue>
|   |   |     |       `-DeclRefExpr 0x14e808ef0 <col:40> 'double' lvalue Var 0x14d1284d8 'width_d' 'double'
|   |   |     `-BinaryOperator 0x14e809078 <col:50, col:66> 'int' '-'
|   |   |       |-CStyleCastExpr 0x14e809030 <col:50, col:55> 'int' <IntegralCast>
|   |   |       | `-ImplicitCastExpr 0x14e809018 <col:55> 'unsigned int' <LValueToRValue> part_of_explicit_cast
|   |   |       |   `-DeclRefExpr 0x14e808fe0 <col:55> 'unsigned int' lvalue ParmVar 0x14d128170 'src_size' 'unsigned int'
|   |   |       `-IntegerLiteral 0x14e809058 <col:66> 'int' 1
|   |   |-DeclStmt 0x14e809198 <line:25:3, col:28>
|   |   | `-VarDecl 0x14e809110 <col:3, col:25> col:10 used dTotalWeight 'double' cinit
|   |   |   `-FloatingLiteral 0x14e809178 <col:25> 'double' 0.000000e+00
|   |   |-DeclStmt 0x14e809230 <line:26:3, col:11>
|   |   | `-VarDecl 0x14e8091c8 <col:3, col:7> col:7 used iSrc 'int'
|   |   |-IfStmt 0x14e809648 <line:32:3, line:38:3>
|   |   | |-BinaryOperator 0x14e8093d0 <line:32:7, col:28> 'int' '>'
|   |   | | |-BinaryOperator 0x14e809378 <col:7, col:24> 'int' '+'
|   |   | | | |-BinaryOperator 0x14e809338 <col:7, col:16> 'int' '-'
|   |   | | | | |-ImplicitCastExpr 0x14e809308 <col:7> 'int' <LValueToRValue>
|   |   | | | | | `-DeclRefExpr 0x14e8092c8 <col:7> 'int' lvalue Var 0x14e808d48 'iRight' 'int'
|   |   | | | | `-ImplicitCastExpr 0x14e809320 <col:16> 'int' <LValueToRValue>
|   |   | | | |   `-DeclRefExpr 0x14e8092e8 <col:16> 'int' lvalue Var 0x14e808800 'iLeft' 'int'
|   |   | | | `-IntegerLiteral 0x14e809358 <col:24> 'int' 1
|   |   | | `-ImplicitCastExpr 0x14e8093b8 <col:28> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x14e809398 <col:28> 'int' lvalue Var 0x14d1286f8 'windows_size' 'int'
|   |   | `-CompoundStmt 0x14e809630 <col:43, line:38:3>
|   |   |   `-IfStmt 0x14e809600 <line:33:4, line:37:4> has_else
|   |   |     |-BinaryOperator 0x14e809540 <line:33:8, col:38> 'int' '<'
|   |   |     | |-ImplicitCastExpr 0x14e809528 <col:8> 'int' <LValueToRValue>
|   |   |     | | `-DeclRefExpr 0x14e8093f0 <col:8> 'int' lvalue Var 0x14e808800 'iLeft' 'int'
|   |   |     | `-ParenExpr 0x14e809508 <col:16, col:38> 'int'
|   |   |     |   `-BinaryOperator 0x14e8094e8 <col:17, col:37> 'int' '-'
|   |   |     |     |-CStyleCastExpr 0x14e809460 <col:17, col:22> 'int' <IntegralCast>
|   |   |     |     | `-ImplicitCastExpr 0x14e809448 <col:22> 'unsigned int' <LValueToRValue> part_of_explicit_cast
|   |   |     |     |   `-DeclRefExpr 0x14e809410 <col:22> 'unsigned int' lvalue ParmVar 0x14d128170 'src_size' 'unsigned int'
|   |   |     |     `-BinaryOperator 0x14e8094c8 <col:33, col:37> 'int' '/'
|   |   |     |       |-IntegerLiteral 0x14e809488 <col:33> 'int' 1
|   |   |     |       `-IntegerLiteral 0x14e8094a8 <col:37> 'int' 2
|   |   |     |-CompoundStmt 0x14e809598 <col:42, line:35:4>
|   |   |     | `-UnaryOperator 0x14e809580 <line:34:5, col:10> 'int' postfix '++'
|   |   |     |   `-DeclRefExpr 0x14e809560 <col:5> 'int' lvalue Var 0x14e808800 'iLeft' 'int'
|   |   |     `-CompoundStmt 0x14e8095e8 <line:35:11, line:37:4>
|   |   |       `-UnaryOperator 0x14e8095d0 <line:36:5, col:11> 'int' postfix '--'
|   |   |         `-DeclRefExpr 0x14e8095b0 <col:5> 'int' lvalue Var 0x14e808d48 'iRight' 'int'
|   |   |-ForStmt 0x14f008f28 <line:40:3, line:42:3>
|   |   | |-BinaryOperator 0x14e8096c0 <line:40:8, col:15> 'int' '='
|   |   | | |-DeclRefExpr 0x14e809668 <col:8> 'int' lvalue Var 0x14e8091c8 'iSrc' 'int'
|   |   | | `-ImplicitCastExpr 0x14e8096a8 <col:15> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x14e809688 <col:15> 'int' lvalue Var 0x14e808800 'iLeft' 'int'
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x14e809750 <col:22, col:30> 'int' '<='
|   |   | | |-ImplicitCastExpr 0x14e809720 <col:22> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x14e8096e0 <col:22> 'int' lvalue Var 0x14e8091c8 'iSrc' 'int'
|   |   | | `-ImplicitCastExpr 0x14e809738 <col:30> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x14e809700 <col:30> 'int' lvalue Var 0x14e808d48 'iRight' 'int'
|   |   | |-UnaryOperator 0x14e809790 <col:38, col:42> 'int' postfix '++'
|   |   | | `-DeclRefExpr 0x14e809770 <col:38> 'int' lvalue Var 0x14e8091c8 'iSrc' 'int'
|   |   | `-CompoundStmt 0x14f008f18 <col:46, line:42:3>
|   |   |-IfStmt 0x14f0091c8 <line:44:3, line:47:3>
|   |   | |-BinaryOperator 0x14f008fb8 <line:44:7, col:22> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x14f008fa0 <col:7> 'double' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x14f008f60 <col:7> 'double' lvalue Var 0x14e809110 'dTotalWeight' 'double'
|   |   | | `-FloatingLiteral 0x14f008f80 <col:22> 'double' 0.000000e+00
|   |   | `-CompoundStmt 0x14f0091a8 <col:27, line:47:3>
|   |   |   |-CallExpr 0x14f009138 <line:45:4, col:28> '<dependent type>' contains-errors
|   |   |   | |-DeclRefExpr 0x14f0090b8 <col:4> 'int ()' Function 0x14f009000 '_gdContributionsFree' 'int ()'
|   |   |   | `-RecoveryExpr 0x14f009118 <col:25> '<dependent type>' contains-errors lvalue
|   |   |   `-ReturnStmt 0x14f009198 <line:46:4, col:11>
|   |   |     `-RecoveryExpr 0x14f009178 <col:11> '<dependent type>' contains-errors lvalue
|   |   `-IfStmt 0x14f0094d0 <line:49:3, line:53:3>
|   |     |-BinaryOperator 0x14f009240 <line:49:7, col:22> 'int' '>'
|   |     | |-ImplicitCastExpr 0x14f009228 <col:7> 'double' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x14f0091e8 <col:7> 'double' lvalue Var 0x14e809110 'dTotalWeight' 'double'
|   |     | `-FloatingLiteral 0x14f009208 <col:22> 'double' 0.000000e+00
|   |     `-CompoundStmt 0x14f0094b8 <col:27, line:53:3>
|   |       `-ForStmt 0x14f009480 <line:50:4, line:52:4>
|   |         |-BinaryOperator 0x14f0092b8 <line:50:9, col:16> 'int' '='
|   |         | |-DeclRefExpr 0x14f009260 <col:9> 'int' lvalue Var 0x14e8091c8 'iSrc' 'int'
|   |         | `-ImplicitCastExpr 0x14f0092a0 <col:16> 'int' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x14f009280 <col:16> 'int' lvalue Var 0x14e808800 'iLeft' 'int'
|   |         |-<<<NULL>>>
|   |         |-BinaryOperator 0x14f009348 <col:23, col:31> 'int' '<='
|   |         | |-ImplicitCastExpr 0x14f009318 <col:23> 'int' <LValueToRValue>
|   |         | | `-DeclRefExpr 0x14f0092d8 <col:23> 'int' lvalue Var 0x14e8091c8 'iSrc' 'int'
|   |         | `-ImplicitCastExpr 0x14f009330 <col:31> 'int' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x14f0092f8 <col:31> 'int' lvalue Var 0x14e808d48 'iRight' 'int'
|   |         |-UnaryOperator 0x14f009388 <col:39, col:43> 'int' postfix '++'
|   |         | `-DeclRefExpr 0x14f009368 <col:39> 'int' lvalue Var 0x14e8091c8 'iSrc' 'int'
|   |         `-CompoundStmt 0x14f009470 <col:47, line:52:4>
|   `-ReturnStmt 0x14f0095b8 <line:55:2, col:9>
|     `-RecoveryExpr 0x14f009598 <col:9> '<dependent type>' contains-errors lvalue
|-FunctionDecl 0x14d809970 <line:17:26> col:26 implicit used ceil 'double (double)' extern
| |-ParmVarDecl 0x14d809a70 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x14d809a18 <<invalid sloc>> Implicit 1052
| |-NoThrowAttr 0x14d809ae0 <col:26> Implicit
| `-ConstAttr 0x14d809b08 <col:26> Implicit
`-FunctionDecl 0x14e808988 <line:23:36> col:36 implicit used floor 'double (double)' extern
  |-ParmVarDecl 0x14e808a88 <<invalid sloc>> <invalid sloc> 'double'
  |-BuiltinAttr 0x14e808a30 <<invalid sloc>> Implicit 1079
  |-NoThrowAttr 0x14e808af8 <col:36> Implicit
  `-ConstAttr 0x14e808b20 <col:36> Implicit
