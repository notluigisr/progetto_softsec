TranslationUnitDecl 0x14f855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x14f8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x14f855bd0 '__int128'
|-TypedefDecl 0x14f856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x14f855bf0 'unsigned __int128'
|-TypedefDecl 0x15800be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x15800bc00 'struct __NSConstantString_tag'
|   `-Record 0x14f856580 '__NSConstantString_tag'
|-TypedefDecl 0x15800be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x14f855d90 '__SVInt8_t'
|-TypedefDecl 0x15800bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x14f855db0 '__SVInt16_t'
|-TypedefDecl 0x15800bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x14f855dd0 '__SVInt32_t'
|-TypedefDecl 0x15800bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x14f855df0 '__SVInt64_t'
|-TypedefDecl 0x15800c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x14f855e10 '__SVUint8_t'
|-TypedefDecl 0x15800c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x14f855e30 '__SVUint16_t'
|-TypedefDecl 0x15800c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x14f855e50 '__SVUint32_t'
|-TypedefDecl 0x15800c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x14f855e70 '__SVUint64_t'
|-TypedefDecl 0x15800c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x14f855e90 '__SVFloat16_t'
|-TypedefDecl 0x15800c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x14f855eb0 '__SVFloat32_t'
|-TypedefDecl 0x15800c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x14f855ed0 '__SVFloat64_t'
|-TypedefDecl 0x15800c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x14f855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x15800c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x14f855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x15800c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x14f855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x15800c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x14f855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x15800c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x14f855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x15800c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x14f855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x15800c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x14f855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x15800c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x14f855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x15800c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x14f855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x15800c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x14f856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x15800c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x14f856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x15800c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x14f856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x15800c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x14f856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x15800c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x14f856090 '__clang_svint8x3_t'
|-TypedefDecl 0x15800c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x14f8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x15800c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x14f8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x15800c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x14f8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x15800c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x14f856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x15800ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x14f856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x15800cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x14f856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x15800cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x14f856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x15800cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x14f856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x15800d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x14f8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x15800d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x14f8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x15800d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x14f8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x15800d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x14f856210 '__clang_svint8x4_t'
|-TypedefDecl 0x15800d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x14f856230 '__clang_svint16x4_t'
|-TypedefDecl 0x15800d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x14f856250 '__clang_svint32x4_t'
|-TypedefDecl 0x15800d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x14f856270 '__clang_svint64x4_t'
|-TypedefDecl 0x15800d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x14f856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x15800d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x14f8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x15800d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x14f8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x15800d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x14f8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x15800d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x14f856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x15800d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x14f856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x15800d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x14f856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x15800d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x14f856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x15800da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x14f856390 '__SVBool_t'
|-TypedefDecl 0x15800da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x14f8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x15800dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x14f8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x15800db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x14f8563f0 '__SVCount_t'
|-TypedefDecl 0x15800dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x15800dbb0 'char *'
|   `-BuiltinType 0x14f8556b0 'char'
|-TypedefDecl 0x15800dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x15800dbb0 'char *'
|   `-BuiltinType 0x14f8556b0 'char'
`-FunctionDecl 0x15800deb8 <dataset_diviso_filec/func12064_vuln.c:1:1, line:32:1> line:1:7 invalid theme_format_expand_get 'char *(int *, const char **)'
  |-ParmVarDecl 0x15800dd28 <col:31, col:42> col:42 invalid theme 'int *'
  |-ParmVarDecl 0x15800ddd8 <col:49, col:62> col:62 used format 'const char **'
  `-CompoundStmt 0x158028650 <line:2:1, line:32:1>
    |-DeclStmt 0x15800e098 <line:4:2, col:18>
    | |-VarDecl 0x15800dfa0 <col:2, col:8> col:8 used ret 'char *'
    | `-VarDecl 0x15800e018 <col:2, col:13> col:13 used dummy 'char'
    |-DeclStmt 0x15800e150 <line:5:2, col:16>
    | `-VarDecl 0x15800e0c8 <col:2, col:15> col:6 used braces 'int' cinit
    |   `-IntegerLiteral 0x15800e130 <col:15> 'int' 1
    |-WhileStmt 0x1580282f0 <line:8:2, line:27:2>
    | |-BinaryOperator 0x158027898 <line:8:9, col:39> 'int' '&&'
    | | |-BinaryOperator 0x158027800 <col:9, col:21> 'int' '!='
    | | | |-ImplicitCastExpr 0x15800e3d0 <col:9, col:11> 'int' <IntegralCast>
    | | | | `-ImplicitCastExpr 0x15800e3b8 <col:9, col:11> 'char' <LValueToRValue>
    | | | |   `-UnaryOperator 0x15800e388 <col:9, col:11> 'const char' lvalue prefix '*' cannot overflow
    | | | |     `-ImplicitCastExpr 0x15800e370 <col:10, col:11> 'const char *' <LValueToRValue>
    | | | |       `-UnaryOperator 0x15800e358 <col:10, col:11> 'const char *' lvalue prefix '*' cannot overflow
    | | | |         `-ImplicitCastExpr 0x15800e340 <col:11> 'const char **' <LValueToRValue>
    | | | |           `-DeclRefExpr 0x15800e320 <col:11> 'const char **' lvalue ParmVar 0x15800ddd8 'format' 'const char **'
    | | | `-CharacterLiteral 0x15800e3a0 <col:21> 'int' 0
    | | `-BinaryOperator 0x158027878 <col:29, col:39> 'int' '!='
    | |   |-ImplicitCastExpr 0x158027860 <col:29> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x158027820 <col:29> 'int' lvalue Var 0x15800e0c8 'braces' 'int'
    | |   `-IntegerLiteral 0x158027840 <col:39> 'int' 0
    | `-CompoundStmt 0x1580282c0 <col:42, line:27:2>
    |   |-IfStmt 0x158027e48 <line:9:3, line:18:3> has_else
    |   | |-BinaryOperator 0x158027980 <line:9:7, col:19> 'int' '=='
    |   | | |-ImplicitCastExpr 0x158027968 <col:7, col:9> 'int' <IntegralCast>
    |   | | | `-ImplicitCastExpr 0x158027950 <col:7, col:9> 'char' <LValueToRValue>
    |   | | |   `-UnaryOperator 0x158027920 <col:7, col:9> 'const char' lvalue prefix '*' cannot overflow
    |   | | |     `-ImplicitCastExpr 0x158027908 <col:8, col:9> 'const char *' <LValueToRValue>
    |   | | |       `-UnaryOperator 0x1580278f0 <col:8, col:9> 'const char *' lvalue prefix '*' cannot overflow
    |   | | |         `-ImplicitCastExpr 0x1580278d8 <col:9> 'const char **' <LValueToRValue>
    |   | | |           `-DeclRefExpr 0x1580278b8 <col:9> 'const char **' lvalue ParmVar 0x15800ddd8 'format' 'const char **'
    |   | | `-CharacterLiteral 0x158027938 <col:19> 'int' 123
    |   | |-UnaryOperator 0x1580279c0 <line:10:4, col:10> 'int' postfix '++'
    |   | | `-DeclRefExpr 0x1580279a0 <col:4> 'int' lvalue Var 0x15800e0c8 'braces' 'int'
    |   | `-IfStmt 0x158027e18 <line:11:8, line:18:3> has_else
    |   |   |-BinaryOperator 0x158027aa0 <line:11:12, col:24> 'int' '=='
    |   |   | |-ImplicitCastExpr 0x158027a88 <col:12, col:14> 'int' <IntegralCast>
    |   |   | | `-ImplicitCastExpr 0x158027a70 <col:12, col:14> 'char' <LValueToRValue>
    |   |   | |   `-UnaryOperator 0x158027a40 <col:12, col:14> 'const char' lvalue prefix '*' cannot overflow
    |   |   | |     `-ImplicitCastExpr 0x158027a28 <col:13, col:14> 'const char *' <LValueToRValue>
    |   |   | |       `-UnaryOperator 0x158027a10 <col:13, col:14> 'const char *' lvalue prefix '*' cannot overflow
    |   |   | |         `-ImplicitCastExpr 0x1580279f8 <col:14> 'const char **' <LValueToRValue>
    |   |   | |           `-DeclRefExpr 0x1580279d8 <col:14> 'const char **' lvalue ParmVar 0x15800ddd8 'format' 'const char **'
    |   |   | `-CharacterLiteral 0x158027a58 <col:24> 'int' 125
    |   |   |-UnaryOperator 0x158027ae0 <line:12:4, col:10> 'int' postfix '--'
    |   |   | `-DeclRefExpr 0x158027ac0 <col:4> 'int' lvalue Var 0x15800e0c8 'braces' 'int'
    |   |   `-CompoundStmt 0x158027df8 <line:13:8, line:18:3>
    |   |     |-CallExpr 0x158027d90 <line:14:4, line:16:25> '<dependent type>' contains-errors
    |   |     | |-DeclRefExpr 0x158027bd8 <line:14:4> 'int ()' Function 0x158027b20 'theme_format_append_next' 'int ()'
    |   |     | |-RecoveryExpr 0x158027bf8 <col:29> '<dependent type>' contains-errors lvalue
    |   |     | |-RecoveryExpr 0x158027d70 <col:36> '<dependent type>' contains-errors lvalue
    |   |     | |-DeclRefExpr 0x158027c30 <col:41> 'const char **' lvalue ParmVar 0x15800ddd8 'format' 'const char **'
    |   |     | |-CharacterLiteral 0x158027c50 <line:15:8> 'int' 110
    |   |     | |-CharacterLiteral 0x158027c68 <col:13> 'int' 110
    |   |     | |-UnaryOperator 0x158027ca0 <line:16:8, col:9> 'char *' prefix '&' cannot overflow
    |   |     | | `-DeclRefExpr 0x158027c80 <col:9> 'char' lvalue Var 0x15800e018 'dummy' 'char'
    |   |     | |-UnaryOperator 0x158027cd8 <col:16, col:17> 'char *' prefix '&' cannot overflow
    |   |     | | `-DeclRefExpr 0x158027cb8 <col:17> 'char' lvalue Var 0x15800e018 'dummy' 'char'
    |   |     | `-IntegerLiteral 0x158027cf0 <col:24> 'int' 0
    |   |     `-ContinueStmt 0x158027df0 <line:17:4>
    |   |-IfStmt 0x158027fa0 <line:20:3, line:23:3>
    |   | |-BinaryOperator 0x158027ed0 <line:20:7, col:17> 'int' '=='
    |   | | |-ImplicitCastExpr 0x158027eb8 <col:7> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x158027e78 <col:7> 'int' lvalue Var 0x15800e0c8 'braces' 'int'
    |   | | `-IntegerLiteral 0x158027e98 <col:17> 'int' 0
    |   | `-CompoundStmt 0x158027f80 <col:20, line:23:3>
    |   |   |-UnaryOperator 0x158027f60 <line:21:4, col:13> 'const char *' postfix '++'
    |   |   | `-ParenExpr 0x158027f40 <col:4, col:12> 'const char *' lvalue
    |   |   |   `-UnaryOperator 0x158027f28 <col:5, col:6> 'const char *' lvalue prefix '*' cannot overflow
    |   |   |     `-ImplicitCastExpr 0x158027f10 <col:6> 'const char **' <LValueToRValue>
    |   |   |       `-DeclRefExpr 0x158027ef0 <col:6> 'const char **' lvalue ParmVar 0x15800ddd8 'format' 'const char **'
    |   |   `-BreakStmt 0x158027f78 <line:22:4>
    |   |-CallExpr 0x158028208 <line:25:3, col:34> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x1580280a0 <col:3> 'int ()' Function 0x158027fe8 'g_string_append_c' 'int ()'
    |   | |-RecoveryExpr 0x158028188 <col:21> '<dependent type>' contains-errors lvalue
    |   | `-UnaryOperator 0x1580281f0 <col:26, col:28> 'const char' lvalue prefix '*' cannot overflow
    |   |   `-ImplicitCastExpr 0x1580281d8 <col:27, col:28> 'const char *' <LValueToRValue>
    |   |     `-UnaryOperator 0x1580281c0 <col:27, col:28> 'const char *' lvalue prefix '*' cannot overflow
    |   |       `-ImplicitCastExpr 0x1580281a8 <col:28> 'const char **' <LValueToRValue>
    |   |         `-DeclRefExpr 0x1580280d8 <col:28> 'const char **' lvalue ParmVar 0x15800ddd8 'format' 'const char **'
    |   `-UnaryOperator 0x1580282a8 <line:26:3, col:12> 'const char *' postfix '++'
    |     `-ParenExpr 0x158028288 <col:3, col:11> 'const char *' lvalue
    |       `-UnaryOperator 0x158028270 <col:4, col:5> 'const char *' lvalue prefix '*' cannot overflow
    |         `-ImplicitCastExpr 0x158028258 <col:5> 'const char **' <LValueToRValue>
    |           `-DeclRefExpr 0x158028238 <col:5> 'const char **' lvalue ParmVar 0x15800ddd8 'format' 'const char **'
    |-BinaryOperator 0x158028418 <line:29:2, col:13> 'char *' contains-errors '='
    | |-DeclRefExpr 0x158028310 <col:2> 'char *' lvalue Var 0x15800dfa0 'ret' 'char *'
    | `-CXXDependentScopeMemberExpr 0x1580283d0 <col:8, col:13> '<dependent type>' contains-errors lvalue ->str
    |   `-RecoveryExpr 0x1580283b0 <col:8> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x1580285d8 <line:30:9, col:33> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x158028518 <col:9> 'int ()' Function 0x158028460 'g_string_free' 'int ()'
    | |-RecoveryExpr 0x158028598 <col:23> '<dependent type>' contains-errors lvalue
    | `-RecoveryExpr 0x1580285b8 <col:28> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x158028640 <line:31:9, col:16>
      `-ImplicitCastExpr 0x158028628 <col:16> 'char *' <LValueToRValue>
        `-DeclRefExpr 0x158028608 <col:16> 'char *' lvalue Var 0x15800dfa0 'ret' 'char *'
