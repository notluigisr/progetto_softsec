TranslationUnitDecl 0x130055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1300564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x130055bd0 '__int128'
|-TypedefDecl 0x130056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x130055bf0 'unsigned __int128'
|-TypedefDecl 0x130126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x130126000 'struct __NSConstantString_tag'
|   `-Record 0x130056580 '__NSConstantString_tag'
|-TypedefDecl 0x130126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x130055d90 '__SVInt8_t'
|-TypedefDecl 0x130126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x130055db0 '__SVInt16_t'
|-TypedefDecl 0x130126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x130055dd0 '__SVInt32_t'
|-TypedefDecl 0x1301263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x130055df0 '__SVInt64_t'
|-TypedefDecl 0x130126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x130055e10 '__SVUint8_t'
|-TypedefDecl 0x1301264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x130055e30 '__SVUint16_t'
|-TypedefDecl 0x130126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x130055e50 '__SVUint32_t'
|-TypedefDecl 0x130126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x130055e70 '__SVUint64_t'
|-TypedefDecl 0x1301265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x130055e90 '__SVFloat16_t'
|-TypedefDecl 0x130126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x130055eb0 '__SVFloat32_t'
|-TypedefDecl 0x1301266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x130055ed0 '__SVFloat64_t'
|-TypedefDecl 0x130126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x130055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x130126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x130055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1301267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x130055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x130126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x130055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1301268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x130055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x130126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x130055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x130126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x130055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1301269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x130055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x130126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x130055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x130126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x130056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x130126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x130056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x130126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x130056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x130126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x130056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x130126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x130056090 '__clang_svint8x3_t'
|-TypedefDecl 0x130126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1300560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x130126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1300560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x130126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1300560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x130126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x130056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x130126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x130056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x130126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x130056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x130126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x130056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x130126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x130056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x130127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1300561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x130127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1300561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1301278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1300561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x130127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x130056210 '__clang_svint8x4_t'
|-TypedefDecl 0x1301279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x130056230 '__clang_svint16x4_t'
|-TypedefDecl 0x130127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x130056250 '__clang_svint32x4_t'
|-TypedefDecl 0x130127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x130056270 '__clang_svint64x4_t'
|-TypedefDecl 0x130127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x130056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x130127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1300562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x130127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1300562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x130127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1300562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x130127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x130056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x130127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x130056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x130127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x130056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x130127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x130056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x130127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x130056390 '__SVBool_t'
|-TypedefDecl 0x130127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1300563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x130127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1300563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x130127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1300563f0 '__SVCount_t'
|-TypedefDecl 0x130127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x130127fb0 'char *'
|   `-BuiltinType 0x1300556b0 'char'
|-TypedefDecl 0x130128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x130127fb0 'char *'
|   `-BuiltinType 0x1300556b0 'char'
|-FunctionDecl 0x130128298 <dataset_diviso_filec/func8974_vuln.c:1:1, line:31:1> line:1:19 process_numeric_entity 'int (const char **, unsigned int *)' static inline
| |-ParmVarDecl 0x130128108 <col:42, col:55> col:55 used buf 'const char **'
| |-ParmVarDecl 0x1301281b8 <col:60, col:70> col:70 used code_point 'unsigned int *'
| `-CompoundStmt 0x1301427e0 <line:2:1, line:31:1>
|   |-DeclStmt 0x130128418 <line:3:2, col:13>
|   | `-VarDecl 0x1301283b0 <col:2, col:7> col:7 used code_l 'long'
|   |-DeclStmt 0x1301286c0 <line:4:2, col:50>
|   | `-VarDecl 0x130128448 <col:2, col:49> col:6 used hexadecimal 'int' cinit
|   |   `-ParenExpr 0x1301286a0 <col:20, col:49> 'int'
|   |     `-BinaryOperator 0x130128680 <col:21, col:46> 'int' '||'
|   |       |-BinaryOperator 0x130128578 <col:21, col:30> 'int' '=='
|   |       | |-ImplicitCastExpr 0x130128560 <col:21, col:23> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x130128548 <col:21, col:23> 'char' <LValueToRValue>
|   |       | |   `-UnaryOperator 0x130128518 <col:21, col:23> 'const char' lvalue prefix '*' cannot overflow
|   |       | |     `-ImplicitCastExpr 0x130128500 <col:22, col:23> 'const char *' <LValueToRValue>
|   |       | |       `-UnaryOperator 0x1301284e8 <col:22, col:23> 'const char *' lvalue prefix '*' cannot overflow
|   |       | |         `-ImplicitCastExpr 0x1301284d0 <col:23> 'const char **' <LValueToRValue>
|   |       | |           `-DeclRefExpr 0x1301284b0 <col:23> 'const char **' lvalue ParmVar 0x130128108 'buf' 'const char **'
|   |       | `-CharacterLiteral 0x130128530 <col:30> 'int' 120
|   |       `-BinaryOperator 0x130128660 <col:37, col:46> 'int' '=='
|   |         |-ImplicitCastExpr 0x130128648 <col:37, col:39> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x130128630 <col:37, col:39> 'char' <LValueToRValue>
|   |         |   `-UnaryOperator 0x130128600 <col:37, col:39> 'const char' lvalue prefix '*' cannot overflow
|   |         |     `-ImplicitCastExpr 0x1301285e8 <col:38, col:39> 'const char *' <LValueToRValue>
|   |         |       `-UnaryOperator 0x1301285d0 <col:38, col:39> 'const char *' lvalue prefix '*' cannot overflow
|   |         |         `-ImplicitCastExpr 0x1301285b8 <col:39> 'const char **' <LValueToRValue>
|   |         |           `-DeclRefExpr 0x130128598 <col:39> 'const char **' lvalue ParmVar 0x130128108 'buf' 'const char **'
|   |         `-CharacterLiteral 0x130128618 <col:46> 'int' 88
|   |-DeclStmt 0x130128758 <line:5:2, col:14>
|   | `-VarDecl 0x1301286f0 <col:2, col:8> col:8 used endptr 'char *'
|   |-IfStmt 0x130140b60 <line:7:2, line:8:9>
|   | |-BinaryOperator 0x130140ab8 <line:7:6, col:35> 'int' '&&'
|   | | |-ImplicitCastExpr 0x130140aa0 <col:6> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x130128770 <col:6> 'int' lvalue Var 0x130128448 'hexadecimal' 'int'
|   | | `-ParenExpr 0x130140a80 <col:21, col:35> 'int'
|   | |   `-BinaryOperator 0x130140a60 <col:22, col:31> 'int' '!='
|   | |     |-ImplicitCastExpr 0x130140a48 <col:22, col:24> 'int' <IntegralCast>
|   | |     | `-ImplicitCastExpr 0x130140a30 <col:22, col:24> 'char' <LValueToRValue>
|   | |     |   `-UnaryOperator 0x130140a00 <col:22, col:24> 'const char' lvalue prefix '*' cannot overflow
|   | |     |     `-ImplicitCastExpr 0x1301287e0 <col:23, col:24> 'const char *' <LValueToRValue>
|   | |     |       `-UnaryOperator 0x1301287c8 <col:23, col:24> 'const char *' lvalue prefix '*' cannot overflow
|   | |     |         `-ImplicitCastExpr 0x1301287b0 <col:24> 'const char **' <LValueToRValue>
|   | |     |           `-DeclRefExpr 0x130128790 <col:24> 'const char **' lvalue ParmVar 0x130128108 'buf' 'const char **'
|   | |     `-CharacterLiteral 0x130140a18 <col:31> 'int' 0
|   | `-UnaryOperator 0x130140b48 <line:8:3, col:9> 'const char *' postfix '++'
|   |   `-ParenExpr 0x130140b28 <col:3, col:8> 'const char *' lvalue
|   |     `-UnaryOperator 0x130140b10 <col:4, col:5> 'const char *' lvalue prefix '*' cannot overflow
|   |       `-ImplicitCastExpr 0x130140af8 <col:5> 'const char **' <LValueToRValue>
|   |         `-DeclRefExpr 0x130140ad8 <col:5> 'const char **' lvalue ParmVar 0x130128108 'buf' 'const char **'
|   |-IfStmt 0x130141780 <line:11:2, line:14:2>
|   | |-BinaryOperator 0x1301416e8 <line:11:6, line:12:36> 'int' '||'
|   | | |-ParenExpr 0x130141350 <line:11:6, col:38> 'int'
|   | | | `-BinaryOperator 0x130141330 <col:7, col:37> 'int' '&&'
|   | | |   |-ImplicitCastExpr 0x130141318 <col:7> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x130140b80 <col:7> 'int' lvalue Var 0x130128448 'hexadecimal' 'int'
|   | | |   `-UnaryOperator 0x130141300 <col:22, col:37> 'int' prefix '!' cannot overflow
|   | | |     `-CallExpr 0x1301412a8 <col:23, col:37> 'int'
|   | | |       |-ImplicitCastExpr 0x130141290 <col:23> 'int (*)(int)' <FunctionToPointerDecay>
|   | | |       | `-DeclRefExpr 0x1301411c0 <col:23> 'int (int)' Function 0x130141000 'isxdigit' 'int (int)'
|   | | |       `-ImplicitCastExpr 0x1301412e8 <col:32, col:34> 'int' <IntegralCast>
|   | | |         `-ImplicitCastExpr 0x1301412d0 <col:32, col:34> 'char' <LValueToRValue>
|   | | |           `-UnaryOperator 0x130141248 <col:32, col:34> 'const char' lvalue prefix '*' cannot overflow
|   | | |             `-ImplicitCastExpr 0x130141230 <col:33, col:34> 'const char *' <LValueToRValue>
|   | | |               `-UnaryOperator 0x130141218 <col:33, col:34> 'const char *' lvalue prefix '*' cannot overflow
|   | | |                 `-ImplicitCastExpr 0x130141200 <col:34> 'const char **' <LValueToRValue>
|   | | |                   `-DeclRefExpr 0x1301411e0 <col:34> 'const char **' lvalue ParmVar 0x130128108 'buf' 'const char **'
|   | | `-ParenExpr 0x1301416c8 <line:12:4, col:36> 'int'
|   | |   `-BinaryOperator 0x1301416a8 <col:5, col:35> 'int' '&&'
|   | |     |-UnaryOperator 0x1301413a8 <col:5, col:6> 'int' prefix '!' cannot overflow
|   | |     | `-ImplicitCastExpr 0x130141390 <col:6> 'int' <LValueToRValue>
|   | |     |   `-DeclRefExpr 0x130141370 <col:6> 'int' lvalue Var 0x130128448 'hexadecimal' 'int'
|   | |     `-UnaryOperator 0x130141690 <col:21, col:35> 'int' prefix '!' cannot overflow
|   | |       `-CallExpr 0x130141638 <col:22, col:35> 'int'
|   | |         |-ImplicitCastExpr 0x130141620 <col:22> 'int (*)(int)' <FunctionToPointerDecay>
|   | |         | `-DeclRefExpr 0x130141580 <col:22> 'int (int)' Function 0x1301413c0 'isdigit' 'int (int)'
|   | |         `-ImplicitCastExpr 0x130141678 <col:30, col:32> 'int' <IntegralCast>
|   | |           `-ImplicitCastExpr 0x130141660 <col:30, col:32> 'char' <LValueToRValue>
|   | |             `-UnaryOperator 0x130141608 <col:30, col:32> 'const char' lvalue prefix '*' cannot overflow
|   | |               `-ImplicitCastExpr 0x1301415f0 <col:31, col:32> 'const char *' <LValueToRValue>
|   | |                 `-UnaryOperator 0x1301415d8 <col:31, col:32> 'const char *' lvalue prefix '*' cannot overflow
|   | |                   `-ImplicitCastExpr 0x1301415c0 <col:32> 'const char **' <LValueToRValue>
|   | |                     `-DeclRefExpr 0x1301415a0 <col:32> 'const char **' lvalue ParmVar 0x130128108 'buf' 'const char **'
|   | `-CompoundStmt 0x130141768 <col:39, line:14:2>
|   |   `-ReturnStmt 0x130141758 <line:13:3, col:10>
|   |     `-RecoveryExpr 0x130141738 <col:10> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x1301422e8 <line:16:2, col:54> 'long' '='
|   | |-DeclRefExpr 0x1301417a0 <col:2> 'long' lvalue Var 0x1301283b0 'code_l' 'long'
|   | `-CallExpr 0x130142298 <col:11, col:54> 'long'
|   |   |-ImplicitCastExpr 0x130142280 <col:11> 'long (*)(const char *, char **, int)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1301420e8 <col:11> 'long (const char *, char **, int)' Function 0x130141838 'strtol' 'long (const char *, char **, int)'
|   |   |-ImplicitCastExpr 0x1301422d0 <col:18, col:19> 'const char *' <LValueToRValue>
|   |   | `-UnaryOperator 0x130142140 <col:18, col:19> 'const char *' lvalue prefix '*' cannot overflow
|   |   |   `-ImplicitCastExpr 0x130142128 <col:19> 'const char **' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x130142108 <col:19> 'const char **' lvalue ParmVar 0x130128108 'buf' 'const char **'
|   |   |-UnaryOperator 0x130142178 <col:24, col:25> 'char **' prefix '&' cannot overflow
|   |   | `-DeclRefExpr 0x130142158 <col:25> 'char *' lvalue Var 0x1301286f0 'endptr' 'char *'
|   |   `-ConditionalOperator 0x130142208 <col:33, col:52> 'int'
|   |     |-ImplicitCastExpr 0x1301421f0 <col:33> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x130142190 <col:33> 'int' lvalue Var 0x130128448 'hexadecimal' 'int'
|   |     |-IntegerLiteral 0x1301421b0 <col:47> 'int' 16
|   |     `-IntegerLiteral 0x1301421d0 <col:52> 'int' 10
|   |-BinaryOperator 0x1301423a8 <line:18:2, col:9> 'const char *' '='
|   | |-UnaryOperator 0x130142340 <col:2, col:3> 'const char *' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x130142328 <col:3> 'const char **' <LValueToRValue>
|   | |   `-DeclRefExpr 0x130142308 <col:3> 'const char **' lvalue ParmVar 0x130128108 'buf' 'const char **'
|   | `-ImplicitCastExpr 0x130142390 <col:9> 'const char *' <NoOp>
|   |   `-ImplicitCastExpr 0x130142378 <col:9> 'char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x130142358 <col:9> 'char *' lvalue Var 0x1301286f0 'endptr' 'char *'
|   |-IfStmt 0x1301424f8 <line:20:2, line:21:10>
|   | |-BinaryOperator 0x130142490 <line:20:6, col:15> 'int' '!='
|   | | |-ImplicitCastExpr 0x130142478 <col:6, col:8> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x130142460 <col:6, col:8> 'char' <LValueToRValue>
|   | | |   `-UnaryOperator 0x130142430 <col:6, col:8> 'const char' lvalue prefix '*' cannot overflow
|   | | |     `-ImplicitCastExpr 0x130142418 <col:7, col:8> 'const char *' <LValueToRValue>
|   | | |       `-UnaryOperator 0x130142400 <col:7, col:8> 'const char *' lvalue prefix '*' cannot overflow
|   | | |         `-ImplicitCastExpr 0x1301423e8 <col:8> 'const char **' <LValueToRValue>
|   | | |           `-DeclRefExpr 0x1301423c8 <col:8> 'const char **' lvalue ParmVar 0x130128108 'buf' 'const char **'
|   | | `-CharacterLiteral 0x130142448 <col:15> 'int' 59
|   | `-ReturnStmt 0x1301424e8 <line:21:3, col:10>
|   |   `-RecoveryExpr 0x1301424c8 <col:10> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x1301425d8 <line:24:2, line:25:10>
|   | |-BinaryOperator 0x130142570 <line:24:6, col:15> 'int' '>'
|   | | |-ImplicitCastExpr 0x130142558 <col:6> 'long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x130142518 <col:6> 'long' lvalue Var 0x1301283b0 'code_l' 'long'
|   | | `-IntegerLiteral 0x130142538 <col:15> 'long' 1114111
|   | `-ReturnStmt 0x1301425c8 <line:25:3, col:10>
|   |   `-RecoveryExpr 0x1301425a8 <col:10> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x130142778 <line:27:2, line:28:27>
|   | |-BinaryOperator 0x130142670 <line:27:6, col:20> 'int' contains-errors '!='
|   | | |-DeclRefExpr 0x1301425f8 <col:6> 'unsigned int *' lvalue ParmVar 0x1301281b8 'code_point' 'unsigned int *'
|   | | `-RecoveryExpr 0x130142650 <col:20> '<dependent type>' contains-errors lvalue
|   | `-BinaryOperator 0x130142758 <line:28:3, col:27> 'unsigned int' '='
|   |   |-UnaryOperator 0x1301426c8 <col:3, col:4> 'unsigned int' lvalue prefix '*' cannot overflow
|   |   | `-ImplicitCastExpr 0x1301426b0 <col:4> 'unsigned int *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x130142690 <col:4> 'unsigned int *' lvalue ParmVar 0x1301281b8 'code_point' 'unsigned int *'
|   |   `-CStyleCastExpr 0x130142730 <col:17, col:27> 'unsigned int' <IntegralCast>
|   |     `-ImplicitCastExpr 0x130142718 <col:27> 'long' <LValueToRValue> part_of_explicit_cast
|   |       `-DeclRefExpr 0x1301426e0 <col:27> 'long' lvalue Var 0x1301283b0 'code_l' 'long'
|   `-ReturnStmt 0x1301427d0 <line:30:2, col:9>
|     `-RecoveryExpr 0x1301427b0 <col:9> '<dependent type>' contains-errors lvalue
|-FunctionDecl 0x130141000 <line:11:23> col:23 implicit used isxdigit 'int (int)' extern
| |-ParmVarDecl 0x130141100 <<invalid sloc>> <invalid sloc> 'int'
| |-BuiltinAttr 0x1301410a8 <<invalid sloc>> Implicit 931
| |-NoThrowAttr 0x130141170 <col:23> Implicit
| `-PureAttr 0x130141198 <col:23> Implicit
|-FunctionDecl 0x1301413c0 <line:12:22> col:22 implicit used isdigit 'int (int)' extern
| |-ParmVarDecl 0x1301414c0 <<invalid sloc>> <invalid sloc> 'int'
| |-BuiltinAttr 0x130141468 <<invalid sloc>> Implicit 924
| |-NoThrowAttr 0x130141530 <col:22> Implicit
| `-PureAttr 0x130141558 <col:22> Implicit
`-FunctionDecl 0x130141838 <line:16:11> col:11 implicit used strtol 'long (const char *, char **, int)' extern
  |-ParmVarDecl 0x130141938 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x130142000 <<invalid sloc>> <invalid sloc> 'char **'
  |-ParmVarDecl 0x130142068 <<invalid sloc>> <invalid sloc> 'int'
  `-BuiltinAttr 0x1301418e0 <<invalid sloc>> Implicit 877
