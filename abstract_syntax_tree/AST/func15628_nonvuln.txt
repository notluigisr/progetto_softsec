TranslationUnitDecl 0x120055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1200564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x120055bd0 '__int128'
|-TypedefDecl 0x120056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x120055bf0 'unsigned __int128'
|-TypedefDecl 0x10500be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x10500bc00 'struct __NSConstantString_tag'
|   `-Record 0x120056580 '__NSConstantString_tag'
|-TypedefDecl 0x10500be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x120055d90 '__SVInt8_t'
|-TypedefDecl 0x10500bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x120055db0 '__SVInt16_t'
|-TypedefDecl 0x10500bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x120055dd0 '__SVInt32_t'
|-TypedefDecl 0x10500bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x120055df0 '__SVInt64_t'
|-TypedefDecl 0x10500c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x120055e10 '__SVUint8_t'
|-TypedefDecl 0x10500c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x120055e30 '__SVUint16_t'
|-TypedefDecl 0x10500c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x120055e50 '__SVUint32_t'
|-TypedefDecl 0x10500c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x120055e70 '__SVUint64_t'
|-TypedefDecl 0x10500c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x120055e90 '__SVFloat16_t'
|-TypedefDecl 0x10500c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x120055eb0 '__SVFloat32_t'
|-TypedefDecl 0x10500c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x120055ed0 '__SVFloat64_t'
|-TypedefDecl 0x10500c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x120055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x10500c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x120055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x10500c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x120055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x10500c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x120055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x10500c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x120055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x10500c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x120055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x10500c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x120055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x10500c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x120055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x10500c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x120055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x10500c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x120056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x10500c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x120056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x10500c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x120056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x10500c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x120056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x10500c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x120056090 '__clang_svint8x3_t'
|-TypedefDecl 0x10500c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1200560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x10500c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1200560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x10500c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1200560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x10500c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x120056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x10500ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x120056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x10500cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x120056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x10500cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x120056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x10500cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x120056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x10500d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1200561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x10500d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1200561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x10500d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1200561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x10500d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x120056210 '__clang_svint8x4_t'
|-TypedefDecl 0x10500d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x120056230 '__clang_svint16x4_t'
|-TypedefDecl 0x10500d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x120056250 '__clang_svint32x4_t'
|-TypedefDecl 0x10500d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x120056270 '__clang_svint64x4_t'
|-TypedefDecl 0x10500d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x120056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x10500d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1200562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x10500d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1200562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x10500d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1200562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x10500d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x120056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x10500d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x120056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x10500d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x120056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x10500d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x120056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x10500da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x120056390 '__SVBool_t'
|-TypedefDecl 0x10500da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1200563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x10500dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1200563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x10500db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1200563f0 '__SVCount_t'
|-TypedefDecl 0x10500dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x10500dbb0 'char *'
|   `-BuiltinType 0x1200556b0 'char'
|-TypedefDecl 0x10500dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x10500dbb0 'char *'
|   `-BuiltinType 0x1200556b0 'char'
|-FunctionDecl 0x10500df48 <dataset_diviso_filec/func15628_nonvuln.c:1:1, line:47:1> line:1:7 invalid cli_hashstream 'char *(int *, unsigned char *, int)'
| |-ParmVarDecl 0x10500dd28 <col:22, col:28> col:28 invalid fs 'int *'
| |-ParmVarDecl 0x10500ddd8 <col:32, col:47> col:47 used digcpy 'unsigned char *'
| |-ParmVarDecl 0x10500de58 <col:55, col:59> col:59 used type 'int'
| `-CompoundStmt 0x10502bd98 <line:2:1, line:47:1>
|   |-DeclStmt 0x10500e120 <line:3:5, col:29>
|   | `-VarDecl 0x10500e0b8 <col:5, col:28> col:19 used digest 'unsigned char[32]'
|   |-DeclStmt 0x10500e1c8 <line:4:5, col:24>
|   | `-VarDecl 0x10500e160 <col:5, col:10> col:10 invalid buff 'char'
|   |-DeclStmt 0x10500e2f8 <line:5:5, col:23>
|   | |-VarDecl 0x10500e1f8 <col:5, col:11> col:11 used hashstr 'char *'
|   | `-VarDecl 0x10500e278 <col:5, col:21> col:21 used pt 'char *'
|   |-DeclStmt 0x10500e3c8 <line:6:5, col:25>
|   | `-VarDecl 0x10500e328 <col:5, col:21> col:17 used alg 'const char *' cinit
|   |   `-RecoveryExpr 0x10500e3a8 <col:21> '<dependent type>' contains-errors lvalue
|   |-DeclStmt 0x105027b88 <line:7:5, col:23>
|   | |-VarDecl 0x105027a00 <col:5, col:9> col:9 used i 'int'
|   | |-VarDecl 0x105027a80 <col:5, col:12> col:12 used bytes 'int'
|   | `-VarDecl 0x105027b00 <col:5, col:19> col:19 used size 'int'
|   |-DeclStmt 0x105027c20 <line:8:5, col:14>
|   | `-VarDecl 0x105027bb8 <col:5, col:11> col:11 used ctx 'void *'
|   |-SwitchStmt 0x105027c70 <line:10:5, line:23:5>
|   | |-ImplicitCastExpr 0x105027c58 <line:10:13> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x105027c38 <col:13> 'int' lvalue ParmVar 0x10500de58 'type' 'int'
|   | `-CompoundStmt 0x1050280a8 <col:19, line:23:5>
|   |   |-CaseStmt 0x105027cd0 <line:11:9, line:12:19>
|   |   | |-ConstantExpr 0x105027cb8 <line:11:14> 'int'
|   |   | | `-IntegerLiteral 0x105027c98 <col:14> 'int' 1
|   |   | `-BinaryOperator 0x105027db0 <line:12:13, col:19> 'const char *' contains-errors '='
|   |   |   |-DeclRefExpr 0x105027cf8 <col:13> 'const char *' contains-errors lvalue Var 0x10500e328 'alg' 'const char *'
|   |   |   `-ImplicitCastExpr 0x105027d98 <col:19> 'const char *' <NoOp>
|   |   |     `-ImplicitCastExpr 0x105027d80 <col:19> 'char *' <ArrayToPointerDecay>
|   |   |       `-StringLiteral 0x105027d60 <col:19> 'char[4]' lvalue "STR"
|   |   |-BinaryOperator 0x105027e10 <line:13:13, col:20> 'int' '='
|   |   | |-DeclRefExpr 0x105027dd0 <col:13> 'int' lvalue Var 0x105027b00 'size' 'int'
|   |   | `-IntegerLiteral 0x105027df0 <col:20> 'int' 16
|   |   |-BreakStmt 0x105027e30 <line:14:13>
|   |   |-CaseStmt 0x105027e70 <line:15:9, line:16:19>
|   |   | |-ConstantExpr 0x105027e58 <line:15:14> 'int'
|   |   | | `-IntegerLiteral 0x105027e38 <col:14> 'int' 2
|   |   | `-BinaryOperator 0x105027f08 <line:16:13, col:19> 'const char *' contains-errors '='
|   |   |   |-DeclRefExpr 0x105027e98 <col:13> 'const char *' contains-errors lvalue Var 0x10500e328 'alg' 'const char *'
|   |   |   `-ImplicitCastExpr 0x105027ef0 <col:19> 'const char *' <NoOp>
|   |   |     `-ImplicitCastExpr 0x105027ed8 <col:19> 'char *' <ArrayToPointerDecay>
|   |   |       `-StringLiteral 0x105027eb8 <col:19> 'char[4]' lvalue "STR"
|   |   |-BinaryOperator 0x105027f68 <line:17:13, col:20> 'int' '='
|   |   | |-DeclRefExpr 0x105027f28 <col:13> 'int' lvalue Var 0x105027b00 'size' 'int'
|   |   | `-IntegerLiteral 0x105027f48 <col:20> 'int' 20
|   |   |-BreakStmt 0x105027f88 <line:18:13>
|   |   |-DefaultStmt 0x105028020 <line:19:9, line:20:19>
|   |   | `-BinaryOperator 0x105028000 <col:13, col:19> 'const char *' contains-errors '='
|   |   |   |-DeclRefExpr 0x105027f90 <col:13> 'const char *' contains-errors lvalue Var 0x10500e328 'alg' 'const char *'
|   |   |   `-ImplicitCastExpr 0x105027fe8 <col:19> 'const char *' <NoOp>
|   |   |     `-ImplicitCastExpr 0x105027fd0 <col:19> 'char *' <ArrayToPointerDecay>
|   |   |       `-StringLiteral 0x105027fb0 <col:19> 'char[4]' lvalue "STR"
|   |   |-BinaryOperator 0x105028080 <line:21:13, col:20> 'int' '='
|   |   | |-DeclRefExpr 0x105028040 <col:13> 'int' lvalue Var 0x105027b00 'size' 'int'
|   |   | `-IntegerLiteral 0x105028060 <col:20> 'int' 32
|   |   `-BreakStmt 0x1050280a0 <line:22:13>
|   |-BinaryOperator 0x105028780 <line:25:5, col:27> 'void *' contains-errors '='
|   | |-DeclRefExpr 0x105028100 <col:5> 'void *' lvalue Var 0x105027bb8 'ctx' 'void *'
|   | `-ImplicitCastExpr 0x105028348 <col:11, col:27> 'void *' contains-errors <IntegralToPointer>
|   |   `-CallExpr 0x105028308 <col:11, col:27> 'int' contains-errors
|   |     |-ImplicitCastExpr 0x1050282f0 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x105028280 <col:11> 'int ()' Function 0x1050281c8 'cl_hash_init' 'int ()'
|   |     `-ImplicitCastExpr 0x105028330 <col:24> 'const char *' contains-errors <LValueToRValue>
|   |       `-DeclRefExpr 0x1050282a0 <col:24> 'const char *' contains-errors lvalue Var 0x10500e328 'alg' 'const char *'
|   |-IfStmt 0x105028858 <line:26:5, line:27:16>
|   | |-UnaryOperator 0x1050287f8 <line:26:9, col:14> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x1050287e0 <col:10, col:14> 'void *' <LValueToRValue>
|   | |   `-ParenExpr 0x1050287c0 <col:10, col:14> 'void *' lvalue
|   | |     `-DeclRefExpr 0x1050287a0 <col:11> 'void *' lvalue Var 0x105027bb8 'ctx' 'void *'
|   | `-ReturnStmt 0x105028848 <line:27:9, col:16>
|   |   `-RecoveryExpr 0x105028828 <col:16> '<dependent type>' contains-errors lvalue
|   |-WhileStmt 0x105029c38 <line:29:5, line:30:40>
|   | |-RecoveryExpr 0x105029a80 <line:29:11, col:48> '_Bool' contains-errors
|   | `-CallExpr 0x105029c00 <line:30:9, col:40> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x105029b80 <col:9> 'int ()' Function 0x105029ac8 'cl_update_hash' 'int ()'
|   |   |-DeclRefExpr 0x105029ba0 <col:24> 'void *' lvalue Var 0x105027bb8 'ctx' 'void *'
|   |   |-RecoveryExpr 0x105029bc0 <col:29> '<dependent type>' contains-errors lvalue
|   |   `-DeclRefExpr 0x105029be0 <col:35> 'int' lvalue Var 0x105027a80 'bytes' 'int'
|   |-CallExpr 0x105029db0 <line:32:5, col:31> 'int'
|   | |-ImplicitCastExpr 0x105029d98 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x105029d38 <col:5> 'int ()' Function 0x105029c80 'cl_finish_hash' 'int ()'
|   | |-ImplicitCastExpr 0x105029de0 <col:20> 'void *' <LValueToRValue>
|   | | `-DeclRefExpr 0x105029d58 <col:20> 'void *' lvalue Var 0x105027bb8 'ctx' 'void *'
|   | `-ImplicitCastExpr 0x105029df8 <col:25> 'unsigned char *' <ArrayToPointerDecay>
|   |   `-DeclRefExpr 0x105029d78 <col:25> 'unsigned char[32]' lvalue Var 0x10500e0b8 'digest' 'unsigned char[32]'
|   |-IfStmt 0x10502a140 <line:34:5, line:35:16>
|   | |-UnaryOperator 0x10502a0e0 <line:34:8, col:65> 'int' prefix '!' cannot overflow
|   | | `-ParenExpr 0x10502a0c0 <col:9, col:65> 'char *'
|   | |   `-BinaryOperator 0x10502a0a0 <col:10, col:64> 'char *' '='
|   | |     |-DeclRefExpr 0x105029e10 <col:10> 'char *' lvalue Var 0x10500e1f8 'hashstr' 'char *'
|   | |     `-CStyleCastExpr 0x10502a078 <col:20, col:64> 'char *' <IntegralToPointer>
|   | |       `-CallExpr 0x10502a030 <col:29, col:64> 'int'
|   | |         |-ImplicitCastExpr 0x10502a018 <col:29> 'int (*)()' <FunctionToPointerDecay>
|   | |         | `-DeclRefExpr 0x105029f10 <col:29> 'int ()' Function 0x105029e58 'cli_calloc' 'int ()'
|   | |         |-BinaryOperator 0x105029fc8 <col:40, col:49> 'int' '+'
|   | |         | |-BinaryOperator 0x105029f88 <col:40, col:45> 'int' '*'
|   | |         | | |-ImplicitCastExpr 0x105029f70 <col:40> 'int' <LValueToRValue>
|   | |         | | | `-DeclRefExpr 0x105029f30 <col:40> 'int' lvalue Var 0x105027b00 'size' 'int'
|   | |         | | `-IntegerLiteral 0x105029f50 <col:45> 'int' 2
|   | |         | `-IntegerLiteral 0x105029fa8 <col:49> 'int' 1
|   | |         `-UnaryExprOrTypeTraitExpr 0x105029ff8 <col:52, col:63> 'unsigned long' sizeof 'char'
|   | `-ReturnStmt 0x10502a130 <line:35:9, col:16>
|   |   `-RecoveryExpr 0x10502a110 <col:16> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x10502a1b8 <line:37:5, col:10> 'char *' '='
|   | |-DeclRefExpr 0x10502a160 <col:5> 'char *' lvalue Var 0x10500e278 'pt' 'char *'
|   | `-ImplicitCastExpr 0x10502a1a0 <col:10> 'char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x10502a180 <col:10> 'char *' lvalue Var 0x10500e1f8 'hashstr' 'char *'
|   |-ForStmt 0x10502a808 <line:38:5, line:41:5>
|   | |-BinaryOperator 0x10502a218 <line:38:9, col:13> 'int' '='
|   | | |-DeclRefExpr 0x10502a1d8 <col:9> 'int' lvalue Var 0x105027a00 'i' 'int'
|   | | `-IntegerLiteral 0x10502a1f8 <col:13> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x10502a2a8 <col:16, col:20> 'int' '<'
|   | | |-ImplicitCastExpr 0x10502a278 <col:16> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x10502a238 <col:16> 'int' lvalue Var 0x105027a00 'i' 'int'
|   | | `-ImplicitCastExpr 0x10502a290 <col:20> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x10502a258 <col:20> 'int' lvalue Var 0x105027b00 'size' 'int'
|   | |-UnaryOperator 0x10502a2e8 <col:26, col:27> 'int' postfix '++'
|   | | `-DeclRefExpr 0x10502a2c8 <col:26> 'int' lvalue Var 0x105027a00 'i' 'int'
|   | `-CompoundStmt 0x10502a7e8 <col:31, line:41:5>
|   |   |-CallExpr 0x10502a6c8 <line:39:9, col:37> 'int'
|   |   | |-ImplicitCastExpr 0x10502a6b0 <col:9> 'int (*)(char *, const char *, ...)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x10502a560 <col:9> 'int (char *, const char *, ...)' Function 0x10502a348 'sprintf' 'int (char *, const char *, ...)'
|   |   | |-ImplicitCastExpr 0x10502a700 <col:17> 'char *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x10502a580 <col:17> 'char *' lvalue Var 0x10500e278 'pt' 'char *'
|   |   | |-ImplicitCastExpr 0x10502a730 <col:21> 'const char *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x10502a718 <col:21> 'char *' <ArrayToPointerDecay>
|   |   | |   `-StringLiteral 0x10502a5a0 <col:21> 'char[4]' lvalue "STR"
|   |   | `-ImplicitCastExpr 0x10502a760 <col:28, col:36> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x10502a748 <col:28, col:36> 'unsigned char' <LValueToRValue>
|   |   |     `-ArraySubscriptExpr 0x10502a630 <col:28, col:36> 'unsigned char' lvalue
|   |   |       |-ImplicitCastExpr 0x10502a600 <col:28> 'unsigned char *' <ArrayToPointerDecay>
|   |   |       | `-DeclRefExpr 0x10502a5c0 <col:28> 'unsigned char[32]' lvalue Var 0x10500e0b8 'digest' 'unsigned char[32]'
|   |   |       `-ImplicitCastExpr 0x10502a618 <col:35> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x10502a5e0 <col:35> 'int' lvalue Var 0x105027a00 'i' 'int'
|   |   `-CompoundAssignOperator 0x10502a7b8 <line:40:9, col:15> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
|   |     |-DeclRefExpr 0x10502a778 <col:9> 'char *' lvalue Var 0x10500e278 'pt' 'char *'
|   |     `-IntegerLiteral 0x10502a798 <col:15> 'int' 2
|   |-IfStmt 0x10502bd30 <line:43:5, line:44:36>
|   | |-ImplicitCastExpr 0x10502a860 <line:43:8> 'unsigned char *' <LValueToRValue>
|   | | `-DeclRefExpr 0x10502a840 <col:8> 'unsigned char *' lvalue ParmVar 0x10500ddd8 'digcpy' 'unsigned char *'
|   | `-CallExpr 0x10502bc68 <line:44:9, col:36> 'void *'
|   |   |-ImplicitCastExpr 0x10502bc50 <col:9> 'void *(*)(void *, const void *, unsigned long)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x10502bb50 <col:9> 'void *(void *, const void *, unsigned long)' Function 0x10502a8f8 'memcpy' 'void *(void *, const void *, unsigned long)'
|   |   |-ImplicitCastExpr 0x10502bcb8 <col:16> 'void *' <BitCast>
|   |   | `-ImplicitCastExpr 0x10502bca0 <col:16> 'unsigned char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x10502bb70 <col:16> 'unsigned char *' lvalue ParmVar 0x10500ddd8 'digcpy' 'unsigned char *'
|   |   |-ImplicitCastExpr 0x10502bce8 <col:24> 'const void *' <BitCast>
|   |   | `-ImplicitCastExpr 0x10502bcd0 <col:24> 'unsigned char *' <ArrayToPointerDecay>
|   |   |   `-DeclRefExpr 0x10502bb90 <col:24> 'unsigned char[32]' lvalue Var 0x10500e0b8 'digest' 'unsigned char[32]'
|   |   `-ImplicitCastExpr 0x10502bd18 <col:32> 'unsigned long' <IntegralCast>
|   |     `-ImplicitCastExpr 0x10502bd00 <col:32> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x10502bbb0 <col:32> 'int' lvalue Var 0x105027b00 'size' 'int'
|   `-ReturnStmt 0x10502bd88 <line:46:5, col:12>
|     `-ImplicitCastExpr 0x10502bd70 <col:12> 'char *' <LValueToRValue>
|       `-DeclRefExpr 0x10502bd50 <col:12> 'char *' lvalue Var 0x10500e1f8 'hashstr' 'char *'
|-FunctionDecl 0x10502a348 <line:39:9> col:9 implicit used sprintf 'int (char *, const char *, ...)' extern
| |-ParmVarDecl 0x10502a448 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x10502a4b0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-BuiltinAttr 0x10502a3f0 <<invalid sloc>> Implicit 906
| `-FormatAttr 0x10502a528 <col:9> Implicit printf 2 3
`-FunctionDecl 0x10502a8f8 <line:44:9> col:9 implicit used memcpy 'void *(void *, const void *, unsigned long)' extern
  |-ParmVarDecl 0x10502ba00 <<invalid sloc>> <invalid sloc> 'void *'
  |-ParmVarDecl 0x10502ba68 <<invalid sloc>> <invalid sloc> 'const void *'
  |-ParmVarDecl 0x10502bad0 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x10502a9a0 <<invalid sloc>> Implicit 882
