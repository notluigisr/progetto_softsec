TranslationUnitDecl 0x120855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1208564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x120855bd0 '__int128'
|-TypedefDecl 0x120856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x120855bf0 'unsigned __int128'
|-TypedefDecl 0x120926a30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x120926800 'struct __NSConstantString_tag'
|   `-Record 0x120856580 '__NSConstantString_tag'
|-TypedefDecl 0x120926a98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x120855d90 '__SVInt8_t'
|-TypedefDecl 0x120926b00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x120855db0 '__SVInt16_t'
|-TypedefDecl 0x120926b68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x120855dd0 '__SVInt32_t'
|-TypedefDecl 0x120926bd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x120855df0 '__SVInt64_t'
|-TypedefDecl 0x120926c38 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x120855e10 '__SVUint8_t'
|-TypedefDecl 0x120926ca0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x120855e30 '__SVUint16_t'
|-TypedefDecl 0x120926d08 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x120855e50 '__SVUint32_t'
|-TypedefDecl 0x120926d70 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x120855e70 '__SVUint64_t'
|-TypedefDecl 0x120926dd8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x120855e90 '__SVFloat16_t'
|-TypedefDecl 0x120926e40 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x120855eb0 '__SVFloat32_t'
|-TypedefDecl 0x120926ea8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x120855ed0 '__SVFloat64_t'
|-TypedefDecl 0x120926f10 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x120855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x120926f78 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x120855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x120926fe0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x120855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x120927048 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x120855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1209270b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x120855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x120927118 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x120855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x120927180 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x120855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1209271e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x120855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x120927250 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x120855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x1209272b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x120856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x120927320 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x120856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x120927388 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x120856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x1209273f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x120856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x120927458 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x120856090 '__clang_svint8x3_t'
|-TypedefDecl 0x1209274c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1208560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x120927528 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1208560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x120927590 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1208560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x1209275f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x120856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x120927660 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x120856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x1209276c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x120856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x120927730 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x120856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x120927798 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x120856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x120928000 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1208561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x120928068 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1208561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1209280d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1208561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x120928138 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x120856210 '__clang_svint8x4_t'
|-TypedefDecl 0x1209281a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x120856230 '__clang_svint16x4_t'
|-TypedefDecl 0x120928208 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x120856250 '__clang_svint32x4_t'
|-TypedefDecl 0x120928270 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x120856270 '__clang_svint64x4_t'
|-TypedefDecl 0x1209282d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x120856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x120928340 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1208562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x1209283a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1208562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x120928410 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1208562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x120928478 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x120856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x1209284e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x120856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x120928548 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x120856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x1209285b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x120856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x120928618 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x120856390 '__SVBool_t'
|-TypedefDecl 0x120928680 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1208563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x1209286e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1208563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x120928750 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1208563f0 '__SVCount_t'
|-TypedefDecl 0x1209287f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1209287b0 'char *'
|   `-BuiltinType 0x1208556b0 'char'
|-TypedefDecl 0x120928868 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1209287b0 'char *'
|   `-BuiltinType 0x1208556b0 'char'
|-FunctionDecl 0x120928a30 <dataset_diviso_filec/func14126_vuln.c:1:1, line:59:1> line:1:13 querystring_cb 'void (const char *, const char *)' static
| |-ParmVarDecl 0x1209288d8 <col:28, col:40> col:40 used name 'const char *'
| |-ParmVarDecl 0x120928958 <col:46, col:58> col:58 used value 'const char *'
| `-CompoundStmt 0x120945cb0 <line:2:1, line:59:1>
|   |-IfStmt 0x120928c48 <line:3:2, line:4:11>
|   | |-UnaryOperator 0x120928b68 <line:3:6, col:7> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x120928b50 <col:7> 'const char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x120928b30 <col:7> 'const char *' lvalue ParmVar 0x120928958 'value' 'const char *'
|   | `-BinaryOperator 0x120928c28 <line:4:3, col:11> 'const char *' '='
|   |   |-DeclRefExpr 0x120928b80 <col:3> 'const char *' lvalue ParmVar 0x120928958 'value' 'const char *'
|   |   `-ImplicitCastExpr 0x120928c10 <col:11> 'const char *' <NoOp>
|   |     `-ImplicitCastExpr 0x120928bf8 <col:11> 'char *' <ArrayToPointerDecay>
|   |       `-StringLiteral 0x120928be0 <col:11> 'char[1]' lvalue ""
|   `-IfStmt 0x120945c80 <line:6:2, line:58:2> has_else
|     |-UnaryOperator 0x120941680 <line:6:6, col:24> 'int' prefix '!' cannot overflow
|     | `-CallExpr 0x120941608 <col:7, col:24> 'int'
|     |   |-ImplicitCastExpr 0x1209415f0 <col:7> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x1209414f0 <col:7> 'int (const char *, const char *)' Function 0x120941310 'strcmp' 'int (const char *, const char *)'
|     |   |-ImplicitCastExpr 0x120941638 <col:14> 'const char *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x120941510 <col:14> 'const char *' lvalue ParmVar 0x1209288d8 'name' 'const char *'
|     |   `-ImplicitCastExpr 0x120941668 <col:19> 'const char *' <NoOp>
|     |     `-ImplicitCastExpr 0x120941650 <col:19> 'char *' <ArrayToPointerDecay>
|     |       `-StringLiteral 0x120941570 <col:19> 'char[4]' lvalue "STR"
|     |-CompoundStmt 0x120941a00 <col:27, line:9:2>
|     `-IfStmt 0x120945c50 <col:9, line:58:2> has_else
|       |-UnaryOperator 0x120941b30 <line:9:13, col:32> 'int' prefix '!' cannot overflow
|       | `-CallExpr 0x120941ab8 <col:14, col:32> 'int'
|       |   |-ImplicitCastExpr 0x120941aa0 <col:14> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x120941a10 <col:14> 'int (const char *, const char *)' Function 0x120941310 'strcmp' 'int (const char *, const char *)'
|       |   |-ImplicitCastExpr 0x120941ae8 <col:21> 'const char *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x120941a30 <col:21> 'const char *' lvalue ParmVar 0x1209288d8 'name' 'const char *'
|       |   `-ImplicitCastExpr 0x120941b18 <col:27> 'const char *' <NoOp>
|       |     `-ImplicitCastExpr 0x120941b00 <col:27> 'char *' <ArrayToPointerDecay>
|       |       `-StringLiteral 0x120941a50 <col:27> 'char[4]' lvalue "STR"
|       |-CompoundStmt 0x120941be0 <col:35, line:11:2>
|       `-IfStmt 0x120945c20 <col:9, line:58:2> has_else
|         |-UnaryOperator 0x120941d10 <line:11:13, col:32> 'int' prefix '!' cannot overflow
|         | `-CallExpr 0x120941c98 <col:14, col:32> 'int'
|         |   |-ImplicitCastExpr 0x120941c80 <col:14> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|         |   | `-DeclRefExpr 0x120941bf0 <col:14> 'int (const char *, const char *)' Function 0x120941310 'strcmp' 'int (const char *, const char *)'
|         |   |-ImplicitCastExpr 0x120941cc8 <col:21> 'const char *' <LValueToRValue>
|         |   | `-DeclRefExpr 0x120941c10 <col:21> 'const char *' lvalue ParmVar 0x1209288d8 'name' 'const char *'
|         |   `-ImplicitCastExpr 0x120941cf8 <col:27> 'const char *' <NoOp>
|         |     `-ImplicitCastExpr 0x120941ce0 <col:27> 'char *' <ArrayToPointerDecay>
|         |       `-StringLiteral 0x120941c30 <col:27> 'char[4]' lvalue "STR"
|         |-CompoundStmt 0x120942048 <col:35, line:16:2>
|         | |-IfStmt 0x120941e18 <line:12:3, line:13:9>
|         | | |-BinaryOperator 0x120941dc0 <line:12:7, col:17> 'int' '=='
|         | | | |-ImplicitCastExpr 0x120941da8 <col:7, col:8> 'int' <IntegralCast>
|         | | | | `-ImplicitCastExpr 0x120941d90 <col:7, col:8> 'char' <LValueToRValue>
|         | | | |   `-UnaryOperator 0x120941d60 <col:7, col:8> 'const char' lvalue prefix '*' cannot overflow
|         | | | |     `-ImplicitCastExpr 0x120941d48 <col:8> 'const char *' <LValueToRValue>
|         | | | |       `-DeclRefExpr 0x120941d28 <col:8> 'const char *' lvalue ParmVar 0x120928958 'value' 'const char *'
|         | | | `-CharacterLiteral 0x120941d78 <col:17> 'int' 47
|         | | `-UnaryOperator 0x120941e00 <line:13:4, col:9> 'const char *' postfix '++'
|         | |   `-DeclRefExpr 0x120941de0 <col:4> 'const char *' lvalue ParmVar 0x120928958 'value' 'const char *'
|         | `-CallExpr 0x120942008 <line:15:3, col:23> 'int'
|         |   |-ImplicitCastExpr 0x120941ff0 <col:3> 'int (*)()' <FunctionToPointerDecay>
|         |   | `-DeclRefExpr 0x120941fb0 <col:3> 'int ()' Function 0x120941ef8 'cgit_parse_url' 'int ()'
|         |   `-ImplicitCastExpr 0x120942030 <col:18> 'const char *' <LValueToRValue>
|         |     `-DeclRefExpr 0x120941fd0 <col:18> 'const char *' lvalue ParmVar 0x120928958 'value' 'const char *'
|         `-IfStmt 0x120945bf0 <line:16:9, line:58:2> has_else
|           |-UnaryOperator 0x120942188 <line:16:13, col:32> 'int' prefix '!' cannot overflow
|           | `-CallExpr 0x120942110 <col:14, col:32> 'int'
|           |   |-ImplicitCastExpr 0x1209420f8 <col:14> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|           |   | `-DeclRefExpr 0x120942068 <col:14> 'int (const char *, const char *)' Function 0x120941310 'strcmp' 'int (const char *, const char *)'
|           |   |-ImplicitCastExpr 0x120942140 <col:21> 'const char *' <LValueToRValue>
|           |   | `-DeclRefExpr 0x120942088 <col:21> 'const char *' lvalue ParmVar 0x1209288d8 'name' 'const char *'
|           |   `-ImplicitCastExpr 0x120942170 <col:27> 'const char *' <NoOp>
|           |     `-ImplicitCastExpr 0x120942158 <col:27> 'char *' <ArrayToPointerDecay>
|           |       `-StringLiteral 0x1209420a8 <col:27> 'char[4]' lvalue "STR"
|           |-CompoundStmt 0x120943640 <col:35, line:18:2>
|           `-IfStmt 0x120945bc0 <col:9, line:58:2> has_else
|             |-UnaryOperator 0x120943770 <line:18:13, col:32> 'int' prefix '!' cannot overflow
|             | `-CallExpr 0x1209436f8 <col:14, col:32> 'int'
|             |   |-ImplicitCastExpr 0x1209436e0 <col:14> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|             |   | `-DeclRefExpr 0x120943650 <col:14> 'int (const char *, const char *)' Function 0x120941310 'strcmp' 'int (const char *, const char *)'
|             |   |-ImplicitCastExpr 0x120943728 <col:21> 'const char *' <LValueToRValue>
|             |   | `-DeclRefExpr 0x120943670 <col:21> 'const char *' lvalue ParmVar 0x1209288d8 'name' 'const char *'
|             |   `-ImplicitCastExpr 0x120943758 <col:27> 'const char *' <NoOp>
|             |     `-ImplicitCastExpr 0x120943740 <col:27> 'char *' <ArrayToPointerDecay>
|             |       `-StringLiteral 0x120943690 <col:27> 'char[4]' lvalue "STR"
|             |-CompoundStmt 0x120943820 <col:35, line:20:2>
|             `-IfStmt 0x120945b90 <col:9, line:58:2> has_else
|               |-UnaryOperator 0x120943950 <line:20:13, col:32> 'int' prefix '!' cannot overflow
|               | `-CallExpr 0x1209438d8 <col:14, col:32> 'int'
|               |   |-ImplicitCastExpr 0x1209438c0 <col:14> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|               |   | `-DeclRefExpr 0x120943830 <col:14> 'int (const char *, const char *)' Function 0x120941310 'strcmp' 'int (const char *, const char *)'
|               |   |-ImplicitCastExpr 0x120943908 <col:21> 'const char *' <LValueToRValue>
|               |   | `-DeclRefExpr 0x120943850 <col:21> 'const char *' lvalue ParmVar 0x1209288d8 'name' 'const char *'
|               |   `-ImplicitCastExpr 0x120943938 <col:27> 'const char *' <NoOp>
|               |     `-ImplicitCastExpr 0x120943920 <col:27> 'char *' <ArrayToPointerDecay>
|               |       `-StringLiteral 0x120943870 <col:27> 'char[4]' lvalue "STR"
|               |-CompoundStmt 0x120943a20 <col:35, line:23:2>
|               `-IfStmt 0x120945b60 <col:9, line:58:2> has_else
|                 |-UnaryOperator 0x120943b50 <line:23:13, col:32> 'int' prefix '!' cannot overflow
|                 | `-CallExpr 0x120943ad8 <col:14, col:32> 'int'
|                 |   |-ImplicitCastExpr 0x120943ac0 <col:14> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|                 |   | `-DeclRefExpr 0x120943a30 <col:14> 'int (const char *, const char *)' Function 0x120941310 'strcmp' 'int (const char *, const char *)'
|                 |   |-ImplicitCastExpr 0x120943b08 <col:21> 'const char *' <LValueToRValue>
|                 |   | `-DeclRefExpr 0x120943a50 <col:21> 'const char *' lvalue ParmVar 0x1209288d8 'name' 'const char *'
|                 |   `-ImplicitCastExpr 0x120943b38 <col:27> 'const char *' <NoOp>
|                 |     `-ImplicitCastExpr 0x120943b20 <col:27> 'char *' <ArrayToPointerDecay>
|                 |       `-StringLiteral 0x120943a70 <col:27> 'char[4]' lvalue "STR"
|                 |-CompoundStmt 0x120943c20 <col:35, line:26:2>
|                 `-IfStmt 0x120945b30 <col:9, line:58:2> has_else
|                   |-UnaryOperator 0x120943d50 <line:26:13, col:32> 'int' prefix '!' cannot overflow
|                   | `-CallExpr 0x120943cd8 <col:14, col:32> 'int'
|                   |   |-ImplicitCastExpr 0x120943cc0 <col:14> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|                   |   | `-DeclRefExpr 0x120943c30 <col:14> 'int (const char *, const char *)' Function 0x120941310 'strcmp' 'int (const char *, const char *)'
|                   |   |-ImplicitCastExpr 0x120943d08 <col:21> 'const char *' <LValueToRValue>
|                   |   | `-DeclRefExpr 0x120943c50 <col:21> 'const char *' lvalue ParmVar 0x1209288d8 'name' 'const char *'
|                   |   `-ImplicitCastExpr 0x120943d38 <col:27> 'const char *' <NoOp>
|                   |     `-ImplicitCastExpr 0x120943d20 <col:27> 'char *' <ArrayToPointerDecay>
|                   |       `-StringLiteral 0x120943c70 <col:27> 'char[4]' lvalue "STR"
|                   |-CompoundStmt 0x120943e20 <col:35, line:29:2>
|                   `-IfStmt 0x120945b00 <col:9, line:58:2> has_else
|                     |-UnaryOperator 0x120943f50 <line:29:13, col:32> 'int' prefix '!' cannot overflow
|                     | `-CallExpr 0x120943ed8 <col:14, col:32> 'int'
|                     |   |-ImplicitCastExpr 0x120943ec0 <col:14> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|                     |   | `-DeclRefExpr 0x120943e30 <col:14> 'int (const char *, const char *)' Function 0x120941310 'strcmp' 'int (const char *, const char *)'
|                     |   |-ImplicitCastExpr 0x120943f08 <col:21> 'const char *' <LValueToRValue>
|                     |   | `-DeclRefExpr 0x120943e50 <col:21> 'const char *' lvalue ParmVar 0x1209288d8 'name' 'const char *'
|                     |   `-ImplicitCastExpr 0x120943f38 <col:27> 'const char *' <NoOp>
|                     |     `-ImplicitCastExpr 0x120943f20 <col:27> 'char *' <ArrayToPointerDecay>
|                     |       `-StringLiteral 0x120943e70 <col:27> 'char[4]' lvalue "STR"
|                     |-CompoundStmt 0x1209440e0 <col:35, line:31:2>
|                     `-IfStmt 0x120945ad0 <col:9, line:58:2> has_else
|                       |-UnaryOperator 0x120944210 <line:31:13, col:32> 'int' prefix '!' cannot overflow
|                       | `-CallExpr 0x120944198 <col:14, col:32> 'int'
|                       |   |-ImplicitCastExpr 0x120944180 <col:14> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|                       |   | `-DeclRefExpr 0x1209440f0 <col:14> 'int (const char *, const char *)' Function 0x120941310 'strcmp' 'int (const char *, const char *)'
|                       |   |-ImplicitCastExpr 0x1209441c8 <col:21> 'const char *' <LValueToRValue>
|                       |   | `-DeclRefExpr 0x120944110 <col:21> 'const char *' lvalue ParmVar 0x1209288d8 'name' 'const char *'
|                       |   `-ImplicitCastExpr 0x1209441f8 <col:27> 'const char *' <NoOp>
|                       |     `-ImplicitCastExpr 0x1209441e0 <col:27> 'char *' <ArrayToPointerDecay>
|                       |       `-StringLiteral 0x120944130 <col:27> 'char[4]' lvalue "STR"
|                       |-CompoundStmt 0x1209443c0 <col:35, line:33:2>
|                       `-IfStmt 0x120945aa0 <col:9, line:58:2> has_else
|                         |-UnaryOperator 0x1209444f0 <line:33:13, col:32> 'int' prefix '!' cannot overflow
|                         | `-CallExpr 0x120944478 <col:14, col:32> 'int'
|                         |   |-ImplicitCastExpr 0x120944460 <col:14> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|                         |   | `-DeclRefExpr 0x1209443d0 <col:14> 'int (const char *, const char *)' Function 0x120941310 'strcmp' 'int (const char *, const char *)'
|                         |   |-ImplicitCastExpr 0x1209444a8 <col:21> 'const char *' <LValueToRValue>
|                         |   | `-DeclRefExpr 0x1209443f0 <col:21> 'const char *' lvalue ParmVar 0x1209288d8 'name' 'const char *'
|                         |   `-ImplicitCastExpr 0x1209444d8 <col:27> 'const char *' <NoOp>
|                         |     `-ImplicitCastExpr 0x1209444c0 <col:27> 'char *' <ArrayToPointerDecay>
|                         |       `-StringLiteral 0x120944410 <col:27> 'char[4]' lvalue "STR"
|                         |-CompoundStmt 0x1209445a0 <col:35, line:35:2>
|                         `-IfStmt 0x120945a70 <col:9, line:58:2> has_else
|                           |-UnaryOperator 0x1209446e0 <line:35:13, col:32> 'int' prefix '!' cannot overflow
|                           | `-CallExpr 0x120944668 <col:14, col:32> 'int'
|                           |   |-ImplicitCastExpr 0x120944650 <col:14> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|                           |   | `-DeclRefExpr 0x1209445b0 <col:14> 'int (const char *, const char *)' Function 0x120941310 'strcmp' 'int (const char *, const char *)'
|                           |   |-ImplicitCastExpr 0x120944698 <col:21> 'const char *' <LValueToRValue>
|                           |   | `-DeclRefExpr 0x1209445d0 <col:21> 'const char *' lvalue ParmVar 0x1209288d8 'name' 'const char *'
|                           |   `-ImplicitCastExpr 0x1209446c8 <col:27> 'const char *' <NoOp>
|                           |     `-ImplicitCastExpr 0x1209446b0 <col:27> 'char *' <ArrayToPointerDecay>
|                           |       `-StringLiteral 0x120944600 <col:27> 'char[4]' lvalue "STR"
|                           |-CompoundStmt 0x120944790 <col:35, line:37:2>
|                           `-IfStmt 0x120945a40 <col:9, line:58:2> has_else
|                             |-UnaryOperator 0x1209448c0 <line:37:13, col:32> 'int' prefix '!' cannot overflow
|                             | `-CallExpr 0x120944848 <col:14, col:32> 'int'
|                             |   |-ImplicitCastExpr 0x120944830 <col:14> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|                             |   | `-DeclRefExpr 0x1209447a0 <col:14> 'int (const char *, const char *)' Function 0x120941310 'strcmp' 'int (const char *, const char *)'
|                             |   |-ImplicitCastExpr 0x120944878 <col:21> 'const char *' <LValueToRValue>
|                             |   | `-DeclRefExpr 0x1209447c0 <col:21> 'const char *' lvalue ParmVar 0x1209288d8 'name' 'const char *'
|                             |   `-ImplicitCastExpr 0x1209448a8 <col:27> 'const char *' <NoOp>
|                             |     `-ImplicitCastExpr 0x120944890 <col:27> 'char *' <ArrayToPointerDecay>
|                             |       `-StringLiteral 0x1209447e0 <col:27> 'char[4]' lvalue "STR"
|                             |-CompoundStmt 0x120944970 <col:35, line:39:2>
|                             `-IfStmt 0x120945a10 <col:9, line:58:2> has_else
|                               |-UnaryOperator 0x120944aa0 <line:39:13, col:32> 'int' prefix '!' cannot overflow
|                               | `-CallExpr 0x120944a28 <col:14, col:32> 'int'
|                               |   |-ImplicitCastExpr 0x120944a10 <col:14> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|                               |   | `-DeclRefExpr 0x120944980 <col:14> 'int (const char *, const char *)' Function 0x120941310 'strcmp' 'int (const char *, const char *)'
|                               |   |-ImplicitCastExpr 0x120944a58 <col:21> 'const char *' <LValueToRValue>
|                               |   | `-DeclRefExpr 0x1209449a0 <col:21> 'const char *' lvalue ParmVar 0x1209288d8 'name' 'const char *'
|                               |   `-ImplicitCastExpr 0x120944a88 <col:27> 'const char *' <NoOp>
|                               |     `-ImplicitCastExpr 0x120944a70 <col:27> 'char *' <ArrayToPointerDecay>
|                               |       `-StringLiteral 0x1209449c0 <col:27> 'char[4]' lvalue "STR"
|                               |-CompoundStmt 0x120944b50 <col:35, line:41:2>
|                               `-IfStmt 0x1209459e0 <col:9, line:58:2> has_else
|                                 |-UnaryOperator 0x120944c80 <line:41:13, col:32> 'int' prefix '!' cannot overflow
|                                 | `-CallExpr 0x120944c08 <col:14, col:32> 'int'
|                                 |   |-ImplicitCastExpr 0x120944bf0 <col:14> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|                                 |   | `-DeclRefExpr 0x120944b60 <col:14> 'int (const char *, const char *)' Function 0x120941310 'strcmp' 'int (const char *, const char *)'
|                                 |   |-ImplicitCastExpr 0x120944c38 <col:21> 'const char *' <LValueToRValue>
|                                 |   | `-DeclRefExpr 0x120944b80 <col:21> 'const char *' lvalue ParmVar 0x1209288d8 'name' 'const char *'
|                                 |   `-ImplicitCastExpr 0x120944c68 <col:27> 'const char *' <NoOp>
|                                 |     `-ImplicitCastExpr 0x120944c50 <col:27> 'char *' <ArrayToPointerDecay>
|                                 |       `-StringLiteral 0x120944ba0 <col:27> 'char[4]' lvalue "STR"
|                                 |-CompoundStmt 0x120944d30 <col:35, line:43:2>
|                                 `-IfStmt 0x1209459b0 <col:9, line:58:2> has_else
|                                   |-UnaryOperator 0x120944e60 <line:43:13, col:32> 'int' prefix '!' cannot overflow
|                                   | `-CallExpr 0x120944de8 <col:14, col:32> 'int'
|                                   |   |-ImplicitCastExpr 0x120944dd0 <col:14> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|                                   |   | `-DeclRefExpr 0x120944d40 <col:14> 'int (const char *, const char *)' Function 0x120941310 'strcmp' 'int (const char *, const char *)'
|                                   |   |-ImplicitCastExpr 0x120944e18 <col:21> 'const char *' <LValueToRValue>
|                                   |   | `-DeclRefExpr 0x120944d60 <col:21> 'const char *' lvalue ParmVar 0x1209288d8 'name' 'const char *'
|                                   |   `-ImplicitCastExpr 0x120944e48 <col:27> 'const char *' <NoOp>
|                                   |     `-ImplicitCastExpr 0x120944e30 <col:27> 'char *' <ArrayToPointerDecay>
|                                   |       `-StringLiteral 0x120944d80 <col:27> 'char[4]' lvalue "STR"
|                                   |-CompoundStmt 0x120944f30 <col:35, line:46:2>
|                                   `-IfStmt 0x120945980 <col:9, line:58:2> has_else
|                                     |-UnaryOperator 0x120945060 <line:46:13, col:32> 'int' prefix '!' cannot overflow
|                                     | `-CallExpr 0x120944fe8 <col:14, col:32> 'int'
|                                     |   |-ImplicitCastExpr 0x120944fd0 <col:14> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|                                     |   | `-DeclRefExpr 0x120944f40 <col:14> 'int (const char *, const char *)' Function 0x120941310 'strcmp' 'int (const char *, const char *)'
|                                     |   |-ImplicitCastExpr 0x120945018 <col:21> 'const char *' <LValueToRValue>
|                                     |   | `-DeclRefExpr 0x120944f60 <col:21> 'const char *' lvalue ParmVar 0x1209288d8 'name' 'const char *'
|                                     |   `-ImplicitCastExpr 0x120945048 <col:27> 'const char *' <NoOp>
|                                     |     `-ImplicitCastExpr 0x120945030 <col:27> 'char *' <ArrayToPointerDecay>
|                                     |       `-StringLiteral 0x120944f80 <col:27> 'char[4]' lvalue "STR"
|                                     |-CompoundStmt 0x120945130 <col:35, line:50:2>
|                                     `-IfStmt 0x120945950 <col:9, line:58:2> has_else
|                                       |-UnaryOperator 0x120945260 <line:50:13, col:32> 'int' prefix '!' cannot overflow
|                                       | `-CallExpr 0x1209451e8 <col:14, col:32> 'int'
|                                       |   |-ImplicitCastExpr 0x1209451d0 <col:14> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|                                       |   | `-DeclRefExpr 0x120945140 <col:14> 'int (const char *, const char *)' Function 0x120941310 'strcmp' 'int (const char *, const char *)'
|                                       |   |-ImplicitCastExpr 0x120945218 <col:21> 'const char *' <LValueToRValue>
|                                       |   | `-DeclRefExpr 0x120945160 <col:21> 'const char *' lvalue ParmVar 0x1209288d8 'name' 'const char *'
|                                       |   `-ImplicitCastExpr 0x120945248 <col:27> 'const char *' <NoOp>
|                                       |     `-ImplicitCastExpr 0x120945230 <col:27> 'char *' <ArrayToPointerDecay>
|                                       |       `-StringLiteral 0x120945180 <col:27> 'char[4]' lvalue "STR"
|                                       |-CompoundStmt 0x120945310 <col:35, line:52:2>
|                                       `-IfStmt 0x120945920 <col:9, line:58:2> has_else
|                                         |-UnaryOperator 0x120945440 <line:52:13, col:32> 'int' prefix '!' cannot overflow
|                                         | `-CallExpr 0x1209453c8 <col:14, col:32> 'int'
|                                         |   |-ImplicitCastExpr 0x1209453b0 <col:14> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|                                         |   | `-DeclRefExpr 0x120945320 <col:14> 'int (const char *, const char *)' Function 0x120941310 'strcmp' 'int (const char *, const char *)'
|                                         |   |-ImplicitCastExpr 0x1209453f8 <col:21> 'const char *' <LValueToRValue>
|                                         |   | `-DeclRefExpr 0x120945340 <col:21> 'const char *' lvalue ParmVar 0x1209288d8 'name' 'const char *'
|                                         |   `-ImplicitCastExpr 0x120945428 <col:27> 'const char *' <NoOp>
|                                         |     `-ImplicitCastExpr 0x120945410 <col:27> 'char *' <ArrayToPointerDecay>
|                                         |       `-StringLiteral 0x120945360 <col:27> 'char[4]' lvalue "STR"
|                                         |-CompoundStmt 0x1209454f0 <col:35, line:54:2>
|                                         `-IfStmt 0x1209458f0 <col:9, line:58:2> has_else
|                                           |-UnaryOperator 0x120945630 <line:54:13, col:32> 'int' prefix '!' cannot overflow
|                                           | `-CallExpr 0x1209455a8 <col:14, col:32> 'int'
|                                           |   |-ImplicitCastExpr 0x120945590 <col:14> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|                                           |   | `-DeclRefExpr 0x120945500 <col:14> 'int (const char *, const char *)' Function 0x120941310 'strcmp' 'int (const char *, const char *)'
|                                           |   |-ImplicitCastExpr 0x1209455d8 <col:21> 'const char *' <LValueToRValue>
|                                           |   | `-DeclRefExpr 0x120945520 <col:21> 'const char *' lvalue ParmVar 0x1209288d8 'name' 'const char *'
|                                           |   `-ImplicitCastExpr 0x120945618 <col:27> 'const char *' <NoOp>
|                                           |     `-ImplicitCastExpr 0x120945600 <col:27> 'char *' <ArrayToPointerDecay>
|                                           |       `-StringLiteral 0x120945540 <col:27> 'char[4]' lvalue "STR"
|                                           |-CompoundStmt 0x1209456e0 <col:35, line:56:2>
|                                           `-IfStmt 0x1209458d0 <col:9, line:58:2>
|                                             |-UnaryOperator 0x120945810 <line:56:13, col:32> 'int' prefix '!' cannot overflow
|                                             | `-CallExpr 0x120945798 <col:14, col:32> 'int'
|                                             |   |-ImplicitCastExpr 0x120945780 <col:14> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|                                             |   | `-DeclRefExpr 0x1209456f0 <col:14> 'int (const char *, const char *)' Function 0x120941310 'strcmp' 'int (const char *, const char *)'
|                                             |   |-ImplicitCastExpr 0x1209457c8 <col:21> 'const char *' <LValueToRValue>
|                                             |   | `-DeclRefExpr 0x120945710 <col:21> 'const char *' lvalue ParmVar 0x1209288d8 'name' 'const char *'
|                                             |   `-ImplicitCastExpr 0x1209457f8 <col:27> 'const char *' <NoOp>
|                                             |     `-ImplicitCastExpr 0x1209457e0 <col:27> 'char *' <ArrayToPointerDecay>
|                                             |       `-StringLiteral 0x120945730 <col:27> 'char[4]' lvalue "STR"
|                                             `-CompoundStmt 0x1209458c0 <col:35, line:58:2>
`-FunctionDecl 0x120941310 <line:6:7> col:7 implicit used strcmp 'int (const char *, const char *)' extern
  |-ParmVarDecl 0x120941410 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x120941478 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x1209413b8 <<invalid sloc>> Implicit 887
