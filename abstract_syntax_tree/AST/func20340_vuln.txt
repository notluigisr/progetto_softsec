TranslationUnitDecl 0x131055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1310564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x131055bd0 '__int128'
|-TypedefDecl 0x131056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x131055bf0 'unsigned __int128'
|-TypedefDecl 0x131126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x131126000 'struct __NSConstantString_tag'
|   `-Record 0x131056580 '__NSConstantString_tag'
|-TypedefDecl 0x131126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x131055d90 '__SVInt8_t'
|-TypedefDecl 0x131126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x131055db0 '__SVInt16_t'
|-TypedefDecl 0x131126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x131055dd0 '__SVInt32_t'
|-TypedefDecl 0x1311263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x131055df0 '__SVInt64_t'
|-TypedefDecl 0x131126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x131055e10 '__SVUint8_t'
|-TypedefDecl 0x1311264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x131055e30 '__SVUint16_t'
|-TypedefDecl 0x131126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x131055e50 '__SVUint32_t'
|-TypedefDecl 0x131126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x131055e70 '__SVUint64_t'
|-TypedefDecl 0x1311265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x131055e90 '__SVFloat16_t'
|-TypedefDecl 0x131126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x131055eb0 '__SVFloat32_t'
|-TypedefDecl 0x1311266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x131055ed0 '__SVFloat64_t'
|-TypedefDecl 0x131126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x131055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x131126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x131055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1311267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x131055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x131126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x131055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1311268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x131055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x131126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x131055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x131126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x131055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1311269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x131055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x131126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x131055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x131126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x131056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x131126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x131056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x131126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x131056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x131126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x131056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x131126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x131056090 '__clang_svint8x3_t'
|-TypedefDecl 0x131126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1310560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x131126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1310560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x131126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1310560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x131126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x131056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x131126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x131056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x131126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x131056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x131126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x131056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x131126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x131056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x131127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1310561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x131127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1310561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1311278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1310561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x131127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x131056210 '__clang_svint8x4_t'
|-TypedefDecl 0x1311279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x131056230 '__clang_svint16x4_t'
|-TypedefDecl 0x131127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x131056250 '__clang_svint32x4_t'
|-TypedefDecl 0x131127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x131056270 '__clang_svint64x4_t'
|-TypedefDecl 0x131127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x131056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x131127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1310562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x131127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1310562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x131127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1310562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x131127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x131056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x131127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x131056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x131127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x131056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x131127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x131056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x131127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x131056390 '__SVBool_t'
|-TypedefDecl 0x131127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1310563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x131127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1310563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x131127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1310563f0 '__SVCount_t'
|-TypedefDecl 0x131127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x131127fb0 'char *'
|   `-BuiltinType 0x1310556b0 'char'
|-TypedefDecl 0x131128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x131127fb0 'char *'
|   `-BuiltinType 0x1310556b0 'char'
`-FunctionDecl 0x131128358 <dataset_diviso_filec/func20340_vuln.c:1:1, line:42:1> line:1:6 uv__idna_toascii 'long (const char *, const char *, char *, char *)'
  |-ParmVarDecl 0x1311280d8 <col:23, col:35> col:35 used s 'const char *'
  |-ParmVarDecl 0x131128158 <col:38, col:50> col:50 used se 'const char *'
  |-ParmVarDecl 0x1311281d8 <col:54, col:60> col:60 used d 'char *'
  |-ParmVarDecl 0x131128258 <col:63, col:69> col:69 used de 'char *'
  `-CompoundStmt 0x131142a30 <col:73, line:42:1>
    |-DeclStmt 0x1311284e8 <line:2:3, col:17>
    | `-VarDecl 0x131128480 <col:3, col:15> col:15 used si 'const char *'
    |-DeclStmt 0x131128580 <line:3:3, col:17>
    | `-VarDecl 0x131128518 <col:3, col:15> col:15 used st 'const char *'
    |-DeclStmt 0x131128618 <line:4:3, col:13>
    | `-VarDecl 0x1311285b0 <col:3, col:12> col:12 used c 'unsigned int'
    |-DeclStmt 0x1311286b0 <line:5:3, col:11>
    | `-VarDecl 0x131128648 <col:3, col:9> col:9 used ds 'char *'
    |-DeclStmt 0x131128748 <line:6:3, col:9>
    | `-VarDecl 0x1311286e0 <col:3, col:7> col:7 used rc 'int'
    |-BinaryOperator 0x1311287b8 <line:8:3, col:8> 'char *' '='
    | |-DeclRefExpr 0x131128760 <col:3> 'char *' lvalue Var 0x131128648 'ds' 'char *'
    | `-ImplicitCastExpr 0x1311287a0 <col:8> 'char *' <LValueToRValue>
    |   `-DeclRefExpr 0x131128780 <col:8> 'char *' lvalue ParmVar 0x1311281d8 'd' 'char *'
    |-ForStmt 0x1311416a0 <line:10:3, line:29:3>
    | |-BinaryOperator 0x131140a38 <line:10:8, col:13> 'const char *' '='
    | | |-DeclRefExpr 0x1311287d8 <col:8> 'const char *' lvalue Var 0x131128480 'si' 'const char *'
    | | `-ImplicitCastExpr 0x131140a20 <col:13> 'const char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x131140a00 <col:13> 'const char *' lvalue ParmVar 0x1311280d8 's' 'const char *'
    | |-<<<NULL>>>
    | |-BinaryOperator 0x131140ac8 <col:16, col:21> 'int' '<'
    | | |-ImplicitCastExpr 0x131140a98 <col:16> 'const char *' <LValueToRValue>
    | | | `-DeclRefExpr 0x131140a58 <col:16> 'const char *' lvalue Var 0x131128480 'si' 'const char *'
    | | `-ImplicitCastExpr 0x131140ab0 <col:21> 'const char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x131140a78 <col:21> 'const char *' lvalue ParmVar 0x131128158 'se' 'const char *'
    | |-<<<NULL>>>
    | `-CompoundStmt 0x131141658 <col:27, line:29:3>
    |   |-BinaryOperator 0x131140b40 <line:11:5, col:10> 'const char *' '='
    |   | |-DeclRefExpr 0x131140ae8 <col:5> 'const char *' lvalue Var 0x131128518 'st' 'const char *'
    |   | `-ImplicitCastExpr 0x131140b28 <col:10> 'const char *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x131140b08 <col:10> 'const char *' lvalue Var 0x131128480 'si' 'const char *'
    |   |-BinaryOperator 0x131140e08 <line:12:5, col:33> 'unsigned int' '='
    |   | |-DeclRefExpr 0x131140b60 <col:5> 'unsigned int' lvalue Var 0x1311285b0 'c' 'unsigned int'
    |   | `-ImplicitCastExpr 0x131140df0 <col:9, col:33> 'unsigned int' <IntegralCast>
    |   |   `-CallExpr 0x131140da8 <col:9, col:33> 'int'
    |   |     |-ImplicitCastExpr 0x131140d90 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   |     | `-DeclRefExpr 0x131140cb0 <col:9> 'int ()' Function 0x131140bf8 'uv__utf8_decode1' 'int ()'
    |   |     |-UnaryOperator 0x131140d20 <col:26, col:27> 'const char **' prefix '&' cannot overflow
    |   |     | `-DeclRefExpr 0x131140cd0 <col:27> 'const char *' lvalue Var 0x131128480 'si' 'const char *'
    |   |     `-ImplicitCastExpr 0x131140dd8 <col:31> 'const char *' <LValueToRValue>
    |   |       `-DeclRefExpr 0x131140d38 <col:31> 'const char *' lvalue ParmVar 0x131128158 'se' 'const char *'
    |   |-IfStmt 0x1311410c8 <line:14:5, line:18:13>
    |   | |-BinaryOperator 0x131140e90 <line:14:9, col:14> 'int' '!='
    |   | | |-ImplicitCastExpr 0x131140e60 <col:9> 'unsigned int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x131140e28 <col:9> 'unsigned int' lvalue Var 0x1311285b0 'c' 'unsigned int'
    |   | | `-ImplicitCastExpr 0x131140e78 <col:14> 'unsigned int' <IntegralCast>
    |   | |   `-CharacterLiteral 0x131140e48 <col:14> 'int' 46
    |   | `-IfStmt 0x1311410a8 <line:15:7, line:18:13>
    |   |   |-BinaryOperator 0x131140f20 <line:15:11, col:16> 'int' '!='
    |   |   | |-ImplicitCastExpr 0x131140ef0 <col:11> 'unsigned int' <LValueToRValue>
    |   |   | | `-DeclRefExpr 0x131140eb0 <col:11> 'unsigned int' lvalue Var 0x1311285b0 'c' 'unsigned int'
    |   |   | `-ImplicitCastExpr 0x131140f08 <col:16> 'unsigned int' <IntegralCast>
    |   |   |   `-IntegerLiteral 0x131140ed0 <col:16> 'int' 12290
    |   |   `-IfStmt 0x131141088 <line:16:9, line:18:13>
    |   |     |-BinaryOperator 0x131140fb0 <line:16:13, col:18> 'int' '!='
    |   |     | |-ImplicitCastExpr 0x131140f80 <col:13> 'unsigned int' <LValueToRValue>
    |   |     | | `-DeclRefExpr 0x131140f40 <col:13> 'unsigned int' lvalue Var 0x1311285b0 'c' 'unsigned int'
    |   |     | `-ImplicitCastExpr 0x131140f98 <col:18> 'unsigned int' <IntegralCast>
    |   |     |   `-IntegerLiteral 0x131140f60 <col:18> 'int' 65294
    |   |     `-IfStmt 0x131141068 <line:17:11, line:18:13>
    |   |       |-BinaryOperator 0x131141040 <line:17:15, col:20> 'int' '!='
    |   |       | |-ImplicitCastExpr 0x131141010 <col:15> 'unsigned int' <LValueToRValue>
    |   |       | | `-DeclRefExpr 0x131140fd0 <col:15> 'unsigned int' lvalue Var 0x1311285b0 'c' 'unsigned int'
    |   |       | `-ImplicitCastExpr 0x131141028 <col:20> 'unsigned int' <IntegralCast>
    |   |       |   `-IntegerLiteral 0x131140ff0 <col:20> 'int' 65377
    |   |       `-ContinueStmt 0x131141060 <line:18:13>
    |   |-BinaryOperator 0x131141378 <line:20:5, col:46> 'int' '='
    |   | |-DeclRefExpr 0x1311410e8 <col:5> 'int' lvalue Var 0x1311286e0 'rc' 'int'
    |   | `-CallExpr 0x1311412f0 <col:10, col:46> 'int'
    |   |   |-ImplicitCastExpr 0x1311412d8 <col:10> 'int (*)()' <FunctionToPointerDecay>
    |   |   | `-DeclRefExpr 0x1311411e8 <col:10> 'int ()' Function 0x131141130 'uv__idna_toascii_label' 'int ()'
    |   |   |-ImplicitCastExpr 0x131141330 <col:33> 'const char *' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x131141208 <col:33> 'const char *' lvalue ParmVar 0x1311280d8 's' 'const char *'
    |   |   |-ImplicitCastExpr 0x131141348 <col:36> 'const char *' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x131141228 <col:36> 'const char *' lvalue Var 0x131128518 'st' 'const char *'
    |   |   |-UnaryOperator 0x1311412a0 <col:40, col:41> 'char **' prefix '&' cannot overflow
    |   |   | `-DeclRefExpr 0x131141248 <col:41> 'char *' lvalue ParmVar 0x1311281d8 'd' 'char *'
    |   |   `-ImplicitCastExpr 0x131141360 <col:44> 'char *' <LValueToRValue>
    |   |     `-DeclRefExpr 0x1311412b8 <col:44> 'char *' lvalue ParmVar 0x131128258 'de' 'char *'
    |   |-IfStmt 0x131141470 <line:22:5, line:23:14>
    |   | |-BinaryOperator 0x1311413f0 <line:22:9, col:14> 'int' '<'
    |   | | |-ImplicitCastExpr 0x1311413d8 <col:9> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x131141398 <col:9> 'int' lvalue Var 0x1311286e0 'rc' 'int'
    |   | | `-IntegerLiteral 0x1311413b8 <col:14> 'int' 0
    |   | `-ReturnStmt 0x131141460 <line:23:7, col:14>
    |   |   `-ImplicitCastExpr 0x131141448 <col:14> 'long' <IntegralCast>
    |   |     `-ImplicitCastExpr 0x131141430 <col:14> 'int' <LValueToRValue>
    |   |       `-DeclRefExpr 0x131141410 <col:14> 'int' lvalue Var 0x1311286e0 'rc' 'int'
    |   |-IfStmt 0x1311415c0 <line:25:5, line:26:14>
    |   | |-BinaryOperator 0x131141500 <line:25:9, col:13> 'int' '<'
    |   | | |-ImplicitCastExpr 0x1311414d0 <col:9> 'char *' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x131141490 <col:9> 'char *' lvalue ParmVar 0x1311281d8 'd' 'char *'
    |   | | `-ImplicitCastExpr 0x1311414e8 <col:13> 'char *' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x1311414b0 <col:13> 'char *' lvalue ParmVar 0x131128258 'de' 'char *'
    |   | `-BinaryOperator 0x1311415a0 <line:26:7, col:14> 'char' '='
    |   |   |-UnaryOperator 0x131141558 <col:7, col:9> 'char' lvalue prefix '*' cannot overflow
    |   |   | `-UnaryOperator 0x131141540 <col:8, col:9> 'char *' postfix '++'
    |   |   |   `-DeclRefExpr 0x131141520 <col:8> 'char *' lvalue ParmVar 0x1311281d8 'd' 'char *'
    |   |   `-ImplicitCastExpr 0x131141588 <col:14> 'char' <IntegralCast>
    |   |     `-CharacterLiteral 0x131141570 <col:14> 'int' 46
    |   `-BinaryOperator 0x131141638 <line:28:5, col:9> 'const char *' '='
    |     |-DeclRefExpr 0x1311415e0 <col:5> 'const char *' lvalue ParmVar 0x1311280d8 's' 'const char *'
    |     `-ImplicitCastExpr 0x131141620 <col:9> 'const char *' <LValueToRValue>
    |       `-DeclRefExpr 0x131141600 <col:9> 'const char *' lvalue Var 0x131128480 'si' 'const char *'
    |-IfStmt 0x131142820 <line:31:3, line:36:3>
    | |-BinaryOperator 0x131141748 <line:31:7, col:11> 'int' '<'
    | | |-ImplicitCastExpr 0x131141718 <col:7> 'const char *' <LValueToRValue>
    | | | `-DeclRefExpr 0x1311416d8 <col:7> 'const char *' lvalue ParmVar 0x1311280d8 's' 'const char *'
    | | `-ImplicitCastExpr 0x131141730 <col:11> 'const char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x1311416f8 <col:11> 'const char *' lvalue ParmVar 0x131128158 'se' 'const char *'
    | `-CompoundStmt 0x131142800 <col:15, line:36:3>
    |   |-BinaryOperator 0x1311418e0 <line:32:5, col:46> 'int' '='
    |   | |-DeclRefExpr 0x131141768 <col:5> 'int' lvalue Var 0x1311286e0 'rc' 'int'
    |   | `-CallExpr 0x131141858 <col:10, col:46> 'int'
    |   |   |-ImplicitCastExpr 0x131141840 <col:10> 'int (*)()' <FunctionToPointerDecay>
    |   |   | `-DeclRefExpr 0x131141788 <col:10> 'int ()' Function 0x131141130 'uv__idna_toascii_label' 'int ()'
    |   |   |-ImplicitCastExpr 0x131141898 <col:33> 'const char *' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x1311417a8 <col:33> 'const char *' lvalue ParmVar 0x1311280d8 's' 'const char *'
    |   |   |-ImplicitCastExpr 0x1311418b0 <col:36> 'const char *' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x1311417c8 <col:36> 'const char *' lvalue ParmVar 0x131128158 'se' 'const char *'
    |   |   |-UnaryOperator 0x131141808 <col:40, col:41> 'char **' prefix '&' cannot overflow
    |   |   | `-DeclRefExpr 0x1311417e8 <col:41> 'char *' lvalue ParmVar 0x1311281d8 'd' 'char *'
    |   |   `-ImplicitCastExpr 0x1311418c8 <col:44> 'char *' <LValueToRValue>
    |   |     `-DeclRefExpr 0x131141820 <col:44> 'char *' lvalue ParmVar 0x131128258 'de' 'char *'
    |   `-IfStmt 0x1311419d8 <line:34:5, line:35:14>
    |     |-BinaryOperator 0x131141958 <line:34:9, col:14> 'int' '<'
    |     | |-ImplicitCastExpr 0x131141940 <col:9> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x131141900 <col:9> 'int' lvalue Var 0x1311286e0 'rc' 'int'
    |     | `-IntegerLiteral 0x131141920 <col:14> 'int' 0
    |     `-ReturnStmt 0x1311419c8 <line:35:7, col:14>
    |       `-ImplicitCastExpr 0x1311419b0 <col:14> 'long' <IntegralCast>
    |         `-ImplicitCastExpr 0x131141998 <col:14> 'int' <LValueToRValue>
    |           `-DeclRefExpr 0x131141978 <col:14> 'int' lvalue Var 0x1311286e0 'rc' 'int'
    |-IfStmt 0x131142970 <line:38:3, line:39:12>
    | |-BinaryOperator 0x1311428b0 <line:38:7, col:11> 'int' '<'
    | | |-ImplicitCastExpr 0x131142880 <col:7> 'char *' <LValueToRValue>
    | | | `-DeclRefExpr 0x131142840 <col:7> 'char *' lvalue ParmVar 0x1311281d8 'd' 'char *'
    | | `-ImplicitCastExpr 0x131142898 <col:11> 'char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x131142860 <col:11> 'char *' lvalue ParmVar 0x131128258 'de' 'char *'
    | `-BinaryOperator 0x131142950 <line:39:5, col:12> 'char' '='
    |   |-UnaryOperator 0x131142908 <col:5, col:7> 'char' lvalue prefix '*' cannot overflow
    |   | `-UnaryOperator 0x1311428f0 <col:6, col:7> 'char *' postfix '++'
    |   |   `-DeclRefExpr 0x1311428d0 <col:6> 'char *' lvalue ParmVar 0x1311281d8 'd' 'char *'
    |   `-ImplicitCastExpr 0x131142938 <col:12> 'char' <IntegralCast>
    |     `-CharacterLiteral 0x131142920 <col:12> 'int' 0
    `-ReturnStmt 0x131142a20 <line:41:3, col:14>
      `-BinaryOperator 0x131142a00 <col:10, col:14> 'long' '-'
        |-ImplicitCastExpr 0x1311429d0 <col:10> 'char *' <LValueToRValue>
        | `-DeclRefExpr 0x131142990 <col:10> 'char *' lvalue ParmVar 0x1311281d8 'd' 'char *'
        `-ImplicitCastExpr 0x1311429e8 <col:14> 'char *' <LValueToRValue>
          `-DeclRefExpr 0x1311429b0 <col:14> 'char *' lvalue Var 0x131128648 'ds' 'char *'
