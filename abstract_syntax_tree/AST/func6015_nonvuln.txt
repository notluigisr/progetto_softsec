TranslationUnitDecl 0x157055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1570564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x157055bd0 '__int128'
|-TypedefDecl 0x157056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x157055bf0 'unsigned __int128'
|-TypedefDecl 0x15780be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x15780bc00 'struct __NSConstantString_tag'
|   `-Record 0x157056580 '__NSConstantString_tag'
|-TypedefDecl 0x15780be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x157055d90 '__SVInt8_t'
|-TypedefDecl 0x15780bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x157055db0 '__SVInt16_t'
|-TypedefDecl 0x15780bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x157055dd0 '__SVInt32_t'
|-TypedefDecl 0x15780bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x157055df0 '__SVInt64_t'
|-TypedefDecl 0x15780c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x157055e10 '__SVUint8_t'
|-TypedefDecl 0x15780c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x157055e30 '__SVUint16_t'
|-TypedefDecl 0x15780c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x157055e50 '__SVUint32_t'
|-TypedefDecl 0x15780c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x157055e70 '__SVUint64_t'
|-TypedefDecl 0x15780c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x157055e90 '__SVFloat16_t'
|-TypedefDecl 0x15780c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x157055eb0 '__SVFloat32_t'
|-TypedefDecl 0x15780c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x157055ed0 '__SVFloat64_t'
|-TypedefDecl 0x15780c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x157055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x15780c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x157055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x15780c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x157055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x15780c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x157055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x15780c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x157055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x15780c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x157055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x15780c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x157055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x15780c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x157055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x15780c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x157055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x15780c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x157056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x15780c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x157056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x15780c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x157056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x15780c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x157056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x15780c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x157056090 '__clang_svint8x3_t'
|-TypedefDecl 0x15780c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1570560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x15780c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1570560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x15780c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1570560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x15780c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x157056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x15780ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x157056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x15780cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x157056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x15780cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x157056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x15780cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x157056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x15780d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1570561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x15780d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1570561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x15780d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1570561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x15780d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x157056210 '__clang_svint8x4_t'
|-TypedefDecl 0x15780d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x157056230 '__clang_svint16x4_t'
|-TypedefDecl 0x15780d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x157056250 '__clang_svint32x4_t'
|-TypedefDecl 0x15780d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x157056270 '__clang_svint64x4_t'
|-TypedefDecl 0x15780d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x157056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x15780d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1570562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x15780d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1570562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x15780d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1570562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x15780d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x157056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x15780d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x157056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x15780d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x157056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x15780d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x157056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x15780da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x157056390 '__SVBool_t'
|-TypedefDecl 0x15780da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1570563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x15780dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1570563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x15780db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1570563f0 '__SVCount_t'
|-TypedefDecl 0x15780dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x15780dbb0 'char *'
|   `-BuiltinType 0x1570556b0 'char'
|-TypedefDecl 0x15780dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x15780dbb0 'char *'
|   `-BuiltinType 0x1570556b0 'char'
`-FunctionDecl 0x15780df18 <dataset_diviso_filec/func6015_nonvuln.c:1:1, line:67:1> line:1:1 invalid virSecuritySELinuxRestoreFileLabel 'int (int *, const char *, int)'
  |-ParmVarDecl 0x15780dd28 <col:36, col:56> col:56 invalid mgr 'int *'
  |-ParmVarDecl 0x15780dda8 <line:2:36, col:48> col:48 used path 'const char *'
  |-ParmVarDecl 0x15780de28 <line:3:36, col:41> col:41 invalid recall 'int'
  `-CompoundStmt 0x157123370 <line:4:1, line:67:1>
    |-DeclStmt 0x157827db8 <line:6:5, col:20>
    | |-RecordDecl 0x15780dfd8 <col:5, col:12> col:12 struct stat
    | `-VarDecl 0x15780e0d8 <col:5, col:17> col:17 invalid buf 'struct stat'
    |-DeclStmt 0x157827e88 <line:7:5, col:22>
    | `-VarDecl 0x157827de8 <col:5, col:18> col:11 used fcon 'char *' cinit
    |   `-RecoveryExpr 0x157827e68 <col:18> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x157827f58 <line:8:5, col:25>
    | `-VarDecl 0x157827eb8 <col:5, col:21> col:11 used newpath 'char *' cinit
    |   `-RecoveryExpr 0x157827f38 <col:21> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x157827ff0 <line:9:5, col:11>
    | `-VarDecl 0x157827f88 <col:5, col:9> col:9 used rc 'int'
    |-DeclStmt 0x1578280c0 <line:10:5, col:17>
    | `-VarDecl 0x157828020 <col:5, col:16> col:9 used ret 'int' cinit
    |   `-UnaryOperator 0x1578280a8 <col:15, col:16> 'int' prefix '-'
    |     `-IntegerLiteral 0x157828088 <col:16> 'int' 1
    |-IfStmt 0x157828158 <line:13:5, line:14:16>
    | |-UnaryOperator 0x157828110 <line:13:9, col:10> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x1578280f8 <col:10> 'const char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x1578280d8 <col:10> 'const char *' lvalue ParmVar 0x15780dda8 'path' 'const char *'
    | `-ReturnStmt 0x157828148 <line:14:9, col:16>
    |   `-IntegerLiteral 0x157828128 <col:16> 'int' 0
    |-CallExpr 0x1578283b8 <line:16:5, col:25> 'int'
    | |-ImplicitCastExpr 0x1578283a0 <col:5> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x1578282d0 <col:5> 'int ()' Function 0x157828218 'VIR_INFO' 'int ()'
    | |-ImplicitCastExpr 0x1578283e8 <col:14> 'char *' <ArrayToPointerDecay>
    | | `-StringLiteral 0x157828330 <col:14> 'char[4]' lvalue "STR"
    | `-ImplicitCastExpr 0x157828400 <col:21> 'const char *' <LValueToRValue>
    |   `-DeclRefExpr 0x157828350 <col:21> 'const char *' lvalue ParmVar 0x15780dda8 'path' 'const char *'
    |-IfStmt 0x157828a08 <line:18:5, line:22:5>
    | |-BinaryOperator 0x157828628 <line:18:9, col:46> 'int' contains-errors '<'
    | | |-CallExpr 0x1578285c0 <col:9, col:42> 'int' contains-errors
    | | | |-ImplicitCastExpr 0x1578285a8 <col:9> 'int (*)()' <FunctionToPointerDecay>
    | | | | `-DeclRefExpr 0x1578284f8 <col:9> 'int ()' Function 0x157828440 'virFileResolveLink' 'int ()'
    | | | |-ImplicitCastExpr 0x1578285f0 <col:28> 'const char *' <LValueToRValue>
    | | | | `-DeclRefExpr 0x157828518 <col:28> 'const char *' lvalue ParmVar 0x15780dda8 'path' 'const char *'
    | | | `-UnaryOperator 0x157828590 <col:34, col:35> 'char **' contains-errors prefix '&' cannot overflow
    | | |   `-DeclRefExpr 0x157828538 <col:35> 'char *' contains-errors lvalue Var 0x157827eb8 'newpath' 'char *'
    | | `-IntegerLiteral 0x157828608 <col:46> 'int' 0
    | `-CompoundStmt 0x1578289e8 <col:49, line:22:5>
    |   |-CallExpr 0x157828948 <line:19:9, line:20:35> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x157828728 <line:19:9> 'int ()' Function 0x157828670 'VIR_WARN' 'int ()'
    |   | |-StringLiteral 0x157828748 <col:18> 'char[4]' lvalue "STR"
    |   | |-DeclRefExpr 0x157828768 <col:25> 'const char *' lvalue ParmVar 0x15780dda8 'path' 'const char *'
    |   | `-CallExpr 0x157828920 <line:20:18, col:34> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x157828868 <col:18> 'int ()' Function 0x1578287b0 'g_strerror' 'int ()'
    |   |   `-RecoveryExpr 0x157828900 <col:29> '<dependent type>' contains-errors lvalue
    |   `-GotoStmt 0x1578289d0 <line:21:9, col:14> 'cleanup' 0x157828980
    |-IfStmt 0x15782a1c0 <line:24:5, line:30:5> has_else
    | |-RecoveryExpr 0x15782a040 <line:24:9, line:25:68> '_Bool' contains-errors
    | |-CompoundStmt 0x15782a078 <col:71, line:27:5>
    | | `-GotoStmt 0x15782a060 <line:26:9, col:14> 'cleanup' 0x157828980
    | `-IfStmt 0x15782a1a0 <line:27:12, line:30:5>
    |   |-BinaryOperator 0x15782a0e8 <line:27:16, col:21> 'int' '>'
    |   | |-ImplicitCastExpr 0x15782a0d0 <col:16> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x15782a090 <col:16> 'int' lvalue Var 0x157827f88 'rc' 'int'
    |   | `-IntegerLiteral 0x15782a0b0 <col:21> 'int' 0
    |   `-CompoundStmt 0x15782a180 <col:24, line:30:5>
    |     |-BinaryOperator 0x15782a148 <line:28:9, col:15> 'int' '='
    |     | |-DeclRefExpr 0x15782a108 <col:9> 'int' lvalue Var 0x157828020 'ret' 'int'
    |     | `-IntegerLiteral 0x15782a128 <col:15> 'int' 0
    |     `-GotoStmt 0x15782a168 <line:29:9, col:14> 'cleanup' 0x157828980
    |-IfStmt 0x15782a700 <line:32:5, line:42:5>
    | |-RecoveryExpr 0x15782a1f0 <line:32:9> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x15782a6e0 <col:17, line:42:5>
    |   |-BinaryOperator 0x15782a3e8 <line:33:9, col:58> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x15782a210 <col:9> 'int' lvalue Var 0x157827f88 'rc' 'int'
    |   | `-CallExpr 0x15782a3a0 <col:14, col:58> 'int' contains-errors
    |   |   |-ImplicitCastExpr 0x15782a388 <col:14> 'int (*)()' <FunctionToPointerDecay>
    |   |   | `-DeclRefExpr 0x15782a310 <col:14> 'int ()' Function 0x15782a258 'virSecuritySELinuxRecallLabel' 'int ()'
    |   |   |-ImplicitCastExpr 0x15782a3d0 <col:44> 'char *' contains-errors <LValueToRValue>
    |   |   | `-DeclRefExpr 0x15782a330 <col:44> 'char *' contains-errors lvalue Var 0x157827eb8 'newpath' 'char *'
    |   |   `-UnaryOperator 0x15782a370 <col:53, col:54> 'char **' contains-errors prefix '&' cannot overflow
    |   |     `-DeclRefExpr 0x15782a350 <col:54> 'char *' contains-errors lvalue Var 0x157827de8 'fcon' 'char *'
    |   `-IfStmt 0x15782a6b0 <line:34:9, line:41:9> has_else
    |     |-BinaryOperator 0x15782a478 <line:34:13, col:20> 'int' '=='
    |     | |-ImplicitCastExpr 0x15782a460 <col:13> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x15782a408 <col:13> 'int' lvalue Var 0x157827f88 'rc' 'int'
    |     | `-UnaryOperator 0x15782a448 <col:19, col:20> 'int' prefix '-'
    |     |   `-IntegerLiteral 0x15782a428 <col:20> 'int' 2
    |     |-CompoundStmt 0x15782a498 <col:23, line:36:9>
    |     `-IfStmt 0x15782a680 <col:16, line:41:9> has_else
    |       |-BinaryOperator 0x15782a500 <line:36:20, col:25> 'int' '<'
    |       | |-ImplicitCastExpr 0x15782a4e8 <col:20> 'int' <LValueToRValue>
    |       | | `-DeclRefExpr 0x15782a4a8 <col:20> 'int' lvalue Var 0x157827f88 'rc' 'int'
    |       | `-IntegerLiteral 0x15782a4c8 <col:25> 'int' 0
    |       |-CompoundStmt 0x15782a538 <col:28, line:38:9>
    |       | `-GotoStmt 0x15782a520 <line:37:13, col:18> 'cleanup' 0x157828980
    |       `-IfStmt 0x15782a660 <line:38:16, line:41:9>
    |         |-BinaryOperator 0x15782a5a8 <line:38:20, col:25> 'int' '>'
    |         | |-ImplicitCastExpr 0x15782a590 <col:20> 'int' <LValueToRValue>
    |         | | `-DeclRefExpr 0x15782a550 <col:20> 'int' lvalue Var 0x157827f88 'rc' 'int'
    |         | `-IntegerLiteral 0x15782a570 <col:25> 'int' 0
    |         `-CompoundStmt 0x15782a640 <col:28, line:41:9>
    |           |-BinaryOperator 0x15782a608 <line:39:13, col:19> 'int' '='
    |           | |-DeclRefExpr 0x15782a5c8 <col:13> 'int' lvalue Var 0x157828020 'ret' 'int'
    |           | `-IntegerLiteral 0x15782a5e8 <col:19> 'int' 0
    |           `-GotoStmt 0x15782a628 <line:40:13, col:18> 'cleanup' 0x157828980
    |-IfStmt 0x15782afd0 <line:44:5, line:57:5>
    | |-BinaryOperator 0x15782a800 <line:44:9, col:27> 'int' contains-errors '||'
    | | |-UnaryOperator 0x15782a758 <col:9, col:10> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | | `-ImplicitCastExpr 0x15782a740 <col:10> '<dependent type>' contains-errors <LValueToRValue>
    | | |   `-RecoveryExpr 0x15782a720 <col:10> '<dependent type>' contains-errors lvalue
    | | `-BinaryOperator 0x15782a7e0 <col:20, col:27> 'int' '=='
    | |   |-ImplicitCastExpr 0x15782a7c8 <col:20> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x15782a770 <col:20> 'int' lvalue Var 0x157827f88 'rc' 'int'
    | |   `-UnaryOperator 0x15782a7b0 <col:26, col:27> 'int' prefix '-'
    | |     `-IntegerLiteral 0x15782a790 <col:27> 'int' 2
    | `-CompoundStmt 0x15782afb0 <col:30, line:57:5>
    |   |-IfStmt 0x15782ab98 <line:45:9, line:49:9>
    |   | |-BinaryOperator 0x15782a9c8 <line:45:13, col:36> 'int' contains-errors '!='
    |   | | |-CallExpr 0x15782a978 <col:13, col:31> '<dependent type>' contains-errors
    |   | | | |-DeclRefExpr 0x15782a900 <col:13> 'int ()' Function 0x15782a848 'stat' 'int ()'
    |   | | | |-DeclRefExpr 0x15782a920 <col:18> 'char *' contains-errors lvalue Var 0x157827eb8 'newpath' 'char *'
    |   | | | `-UnaryOperator 0x15782a960 <col:27, col:28> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | | |   `-RecoveryExpr 0x15782a940 <col:28> '<dependent type>' contains-errors lvalue
    |   | | `-IntegerLiteral 0x15782a9a8 <col:36> 'int' 0
    |   | `-CompoundStmt 0x15782ab78 <col:39, line:49:9>
    |   |   |-CallExpr 0x15782ab28 <line:46:13, line:47:39> '<dependent type>' contains-errors
    |   |   | |-DeclRefExpr 0x15782a9e8 <line:46:13> 'int ()' Function 0x157828670 'VIR_WARN' 'int ()'
    |   |   | |-StringLiteral 0x15782aa08 <col:22> 'char[4]' lvalue "STR"
    |   |   | |-DeclRefExpr 0x15782aa28 <col:29> 'char *' contains-errors lvalue Var 0x157827eb8 'newpath' 'char *'
    |   |   | `-CallExpr 0x15782ab00 <line:47:22, col:38> '<dependent type>' contains-errors
    |   |   |   |-DeclRefExpr 0x15782aa48 <col:22> 'int ()' Function 0x1578287b0 'g_strerror' 'int ()'
    |   |   |   `-RecoveryExpr 0x15782aae0 <col:33> '<dependent type>' contains-errors lvalue
    |   |   `-GotoStmt 0x15782ab60 <line:48:13, col:18> 'cleanup' 0x157828980
    |   `-IfStmt 0x15782af90 <line:51:9, line:56:9>
    |     |-BinaryOperator 0x15782adf8 <line:51:13, col:60> 'int' contains-errors '<'
    |     | |-CallExpr 0x15782ad98 <col:13, col:56> '<dependent type>' contains-errors
    |     | | |-DeclRefExpr 0x15782ac98 <col:13> 'int ()' Function 0x15782abe0 'getContext' 'int ()'
    |     | | |-RecoveryExpr 0x15782acb8 <col:24> '<dependent type>' contains-errors lvalue
    |     | | |-DeclRefExpr 0x15782acd8 <col:29> 'char *' contains-errors lvalue Var 0x157827eb8 'newpath' 'char *'
    |     | | |-CXXDependentScopeMemberExpr 0x15782ad18 <col:38, col:42> '<dependent type>' contains-errors lvalue .st_mode
    |     | | | `-RecoveryExpr 0x15782acf8 <col:38> '<dependent type>' contains-errors lvalue
    |     | | `-UnaryOperator 0x15782ad80 <col:51, col:52> 'char **' contains-errors prefix '&' cannot overflow
    |     | |   `-DeclRefExpr 0x15782ad60 <col:52> 'char *' contains-errors lvalue Var 0x157827de8 'fcon' 'char *'
    |     | `-IntegerLiteral 0x15782add8 <col:60> 'int' 0
    |     `-CompoundStmt 0x15782af68 <col:63, line:56:9>
    |       |-CallExpr 0x15782ae90 <line:53:13, col:36> 'int' contains-errors
    |       | |-ImplicitCastExpr 0x15782ae78 <col:13> 'int (*)()' <FunctionToPointerDecay>
    |       | | `-DeclRefExpr 0x15782ae18 <col:13> 'int ()' Function 0x157828670 'VIR_WARN' 'int ()'
    |       | |-ImplicitCastExpr 0x15782aec0 <col:22> 'char *' <ArrayToPointerDecay>
    |       | | `-StringLiteral 0x15782ae38 <col:22> 'char[4]' lvalue "STR"
    |       | `-ImplicitCastExpr 0x15782aed8 <col:29> 'char *' contains-errors <LValueToRValue>
    |       |   `-DeclRefExpr 0x15782ae58 <col:29> 'char *' contains-errors lvalue Var 0x157827eb8 'newpath' 'char *'
    |       |-BinaryOperator 0x15782af30 <line:54:13, col:19> 'int' '='
    |       | |-DeclRefExpr 0x15782aef0 <col:13> 'int' lvalue Var 0x157828020 'ret' 'int'
    |       | `-IntegerLiteral 0x15782af10 <col:19> 'int' 0
    |       `-GotoStmt 0x15782af50 <line:55:13, col:18> 'cleanup' 0x157828980
    |-IfStmt 0x157122f98 <line:59:5, line:60:14>
    | |-RecoveryExpr 0x157122f60 <line:59:9, col:71> '_Bool' contains-errors
    | `-GotoStmt 0x157122f80 <line:60:9, col:14> 'cleanup' 0x157828980
    |-BinaryOperator 0x157122ff8 <line:62:5, col:11> 'int' '='
    | |-DeclRefExpr 0x157122fb8 <col:5> 'int' lvalue Var 0x157828020 'ret' 'int'
    | `-IntegerLiteral 0x157122fd8 <col:11> 'int' 0
    |-LabelStmt 0x157123190 <line:63:2, line:64:17> 'cleanup'
    | `-CallExpr 0x157123150 <col:5, col:17> 'int' contains-errors
    |   |-ImplicitCastExpr 0x157123138 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x1571230f8 <col:5> 'int ()' Function 0x157123040 'freecon' 'int ()'
    |   `-ImplicitCastExpr 0x157123178 <col:13> 'char *' contains-errors <LValueToRValue>
    |     `-DeclRefExpr 0x157123118 <col:13> 'char *' contains-errors lvalue Var 0x157827de8 'fcon' 'char *'
    |-CallExpr 0x1571232e8 <line:65:5, col:21> 'int' contains-errors
    | |-ImplicitCastExpr 0x1571232d0 <col:5> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x157123290 <col:5> 'int ()' Function 0x1571231d8 'VIR_FREE' 'int ()'
    | `-ImplicitCastExpr 0x157123310 <col:14> 'char *' contains-errors <LValueToRValue>
    |   `-DeclRefExpr 0x1571232b0 <col:14> 'char *' contains-errors lvalue Var 0x157827eb8 'newpath' 'char *'
    `-ReturnStmt 0x157123360 <line:66:5, col:12>
      `-ImplicitCastExpr 0x157123348 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x157123328 <col:12> 'int' lvalue Var 0x157828020 'ret' 'int'
