TranslationUnitDecl 0x11e84d808 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x11e84e6b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x11e84ddd0 '__int128'
|-TypedefDecl 0x11e84e728 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x11e84ddf0 'unsigned __int128'
|-TypedefDecl 0x11e91e430 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x11e91e200 'struct __NSConstantString_tag'
|   `-Record 0x11e84e780 '__NSConstantString_tag'
|-TypedefDecl 0x11e91e498 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x11e84df90 '__SVInt8_t'
|-TypedefDecl 0x11e91e500 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x11e84dfb0 '__SVInt16_t'
|-TypedefDecl 0x11e91e568 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x11e84dfd0 '__SVInt32_t'
|-TypedefDecl 0x11e91e5d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x11e84dff0 '__SVInt64_t'
|-TypedefDecl 0x11e91e638 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x11e84e010 '__SVUint8_t'
|-TypedefDecl 0x11e91e6a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x11e84e030 '__SVUint16_t'
|-TypedefDecl 0x11e91e708 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x11e84e050 '__SVUint32_t'
|-TypedefDecl 0x11e91e770 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x11e84e070 '__SVUint64_t'
|-TypedefDecl 0x11e91e7d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x11e84e090 '__SVFloat16_t'
|-TypedefDecl 0x11e91e840 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x11e84e0b0 '__SVFloat32_t'
|-TypedefDecl 0x11e91e8a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x11e84e0d0 '__SVFloat64_t'
|-TypedefDecl 0x11e91e910 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x11e84e0f0 '__SVBfloat16_t'
|-TypedefDecl 0x11e91e978 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x11e84e110 '__clang_svint8x2_t'
|-TypedefDecl 0x11e91e9e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x11e84e130 '__clang_svint16x2_t'
|-TypedefDecl 0x11e91ea48 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x11e84e150 '__clang_svint32x2_t'
|-TypedefDecl 0x11e91eab0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x11e84e170 '__clang_svint64x2_t'
|-TypedefDecl 0x11e91eb18 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x11e84e190 '__clang_svuint8x2_t'
|-TypedefDecl 0x11e91eb80 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x11e84e1b0 '__clang_svuint16x2_t'
|-TypedefDecl 0x11e91ebe8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x11e84e1d0 '__clang_svuint32x2_t'
|-TypedefDecl 0x11e91ec50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x11e84e1f0 '__clang_svuint64x2_t'
|-TypedefDecl 0x11e91ecb8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x11e84e210 '__clang_svfloat16x2_t'
|-TypedefDecl 0x11e91ed20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x11e84e230 '__clang_svfloat32x2_t'
|-TypedefDecl 0x11e91ed88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x11e84e250 '__clang_svfloat64x2_t'
|-TypedefDecl 0x11e91edf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x11e84e270 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x11e91ee58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x11e84e290 '__clang_svint8x3_t'
|-TypedefDecl 0x11e91eec0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x11e84e2b0 '__clang_svint16x3_t'
|-TypedefDecl 0x11e91ef28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x11e84e2d0 '__clang_svint32x3_t'
|-TypedefDecl 0x11e91ef90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x11e84e2f0 '__clang_svint64x3_t'
|-TypedefDecl 0x11e91eff8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x11e84e310 '__clang_svuint8x3_t'
|-TypedefDecl 0x11e91f060 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x11e84e330 '__clang_svuint16x3_t'
|-TypedefDecl 0x11e91f0c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x11e84e350 '__clang_svuint32x3_t'
|-TypedefDecl 0x11e91f130 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x11e84e370 '__clang_svuint64x3_t'
|-TypedefDecl 0x11e91f198 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x11e84e390 '__clang_svfloat16x3_t'
|-TypedefDecl 0x11e91fa00 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x11e84e3b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x11e91fa68 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x11e84e3d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x11e91fad0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x11e84e3f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x11e91fb38 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x11e84e410 '__clang_svint8x4_t'
|-TypedefDecl 0x11e91fba0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x11e84e430 '__clang_svint16x4_t'
|-TypedefDecl 0x11e91fc08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x11e84e450 '__clang_svint32x4_t'
|-TypedefDecl 0x11e91fc70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x11e84e470 '__clang_svint64x4_t'
|-TypedefDecl 0x11e91fcd8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x11e84e490 '__clang_svuint8x4_t'
|-TypedefDecl 0x11e91fd40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x11e84e4b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x11e91fda8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x11e84e4d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x11e91fe10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x11e84e4f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x11e91fe78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x11e84e510 '__clang_svfloat16x4_t'
|-TypedefDecl 0x11e91fee0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x11e84e530 '__clang_svfloat32x4_t'
|-TypedefDecl 0x11e91ff48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x11e84e550 '__clang_svfloat64x4_t'
|-TypedefDecl 0x11e91ffb0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x11e84e570 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x11e920018 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x11e84e590 '__SVBool_t'
|-TypedefDecl 0x11e920080 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x11e84e5b0 '__clang_svboolx2_t'
|-TypedefDecl 0x11e9200e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x11e84e5d0 '__clang_svboolx4_t'
|-TypedefDecl 0x11e920150 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x11e84e5f0 '__SVCount_t'
|-TypedefDecl 0x11e9201f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x11e9201b0 'char *'
|   `-BuiltinType 0x11e84d8b0 'char'
|-TypedefDecl 0x11e920268 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x11e9201b0 'char *'
|   `-BuiltinType 0x11e84d8b0 'char'
`-FunctionDecl 0x11e9204e8 <dataset_diviso_filec/func6163_vuln.c:1:1, line:28:1> line:1:12 invalid ia5ncasecmp 'int (const char *, const char *, int)' static
  |-ParmVarDecl 0x11e9202d8 <col:24, col:36> col:36 used s1 'const char *'
  |-ParmVarDecl 0x11e920358 <col:40, col:52> col:52 used s2 'const char *'
  |-ParmVarDecl 0x11e9203f0 <col:56, col:63> col:63 invalid n 'int'
  `-CompoundStmt 0x11e93b298 <line:2:1, line:28:1>
    |-ForStmt 0x11e93b230 <line:3:5, line:25:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-BinaryOperator 0x11e9205e8 <line:3:12, col:16> 'int' contains-errors '>'
    | | |-RecoveryExpr 0x11e9205a8 <col:12> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x11e9205c8 <col:16> 'int' 0
    | |-BinaryOperator 0x11e9206d0 <col:19, col:32> 'const char *' contains-errors ','
    | | |-BinaryOperator 0x11e920678 <col:19, col:26> 'const char *' contains-errors ','
    | | | |-UnaryOperator 0x11e920628 <col:19, col:20> '<dependent type>' contains-errors postfix '--' cannot overflow
    | | | | `-RecoveryExpr 0x11e920608 <col:19> '<dependent type>' contains-errors lvalue
    | | | `-UnaryOperator 0x11e920660 <col:24, col:26> 'const char *' postfix '++'
    | | |   `-DeclRefExpr 0x11e920640 <col:24> 'const char *' lvalue ParmVar 0x11e9202d8 's1' 'const char *'
    | | `-UnaryOperator 0x11e9206b8 <col:30, col:32> 'const char *' postfix '++'
    | |   `-DeclRefExpr 0x11e920698 <col:30> 'const char *' lvalue ParmVar 0x11e920358 's2' 'const char *'
    | `-CompoundStmt 0x11e93b218 <col:36, line:25:5>
    |   `-IfStmt 0x11e93b1e8 <line:4:9, line:24:9> has_else
    |     |-BinaryOperator 0x11e9207f0 <line:4:13, col:21> 'int' '!='
    |     | |-ImplicitCastExpr 0x11e9207c0 <col:13, col:14> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x11e920790 <col:13, col:14> 'char' <LValueToRValue>
    |     | |   `-UnaryOperator 0x11e920728 <col:13, col:14> 'const char' lvalue prefix '*' cannot overflow
    |     | |     `-ImplicitCastExpr 0x11e920710 <col:14> 'const char *' <LValueToRValue>
    |     | |       `-DeclRefExpr 0x11e9206f0 <col:14> 'const char *' lvalue ParmVar 0x11e9202d8 's1' 'const char *'
    |     | `-ImplicitCastExpr 0x11e9207d8 <col:20, col:21> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x11e9207a8 <col:20, col:21> 'char' <LValueToRValue>
    |     |     `-UnaryOperator 0x11e920778 <col:20, col:21> 'const char' lvalue prefix '*' cannot overflow
    |     |       `-ImplicitCastExpr 0x11e920760 <col:21> 'const char *' <LValueToRValue>
    |     |         `-DeclRefExpr 0x11e920740 <col:21> 'const char *' lvalue ParmVar 0x11e920358 's2' 'const char *'
    |     |-CompoundStmt 0x11e93b080 <col:25, line:21:9>
    |     | |-DeclStmt 0x11e93aa88 <line:5:13, col:75>
    |     | | |-VarDecl 0x11e920828 <col:13, col:48> col:27 used c1 'unsigned char' cinit
    |     | | | `-CStyleCastExpr 0x11e920910 <col:32, col:48> 'unsigned char' <IntegralCast>
    |     | | |   `-ImplicitCastExpr 0x11e9208f8 <col:47, col:48> 'char' <LValueToRValue> part_of_explicit_cast
    |     | | |     `-UnaryOperator 0x11e9208c8 <col:47, col:48> 'const char' lvalue prefix '*' cannot overflow
    |     | | |       `-ImplicitCastExpr 0x11e9208b0 <col:48> 'const char *' <LValueToRValue>
    |     | | |         `-DeclRefExpr 0x11e920890 <col:48> 'const char *' lvalue ParmVar 0x11e9202d8 's1' 'const char *'
    |     | | `-VarDecl 0x11e920950 <col:13, col:73> col:52 used c2 'unsigned char' cinit
    |     | |   `-CStyleCastExpr 0x11e93aa48 <col:57, col:73> 'unsigned char' <IntegralCast>
    |     | |     `-ImplicitCastExpr 0x11e93aa30 <col:72, col:73> 'char' <LValueToRValue> part_of_explicit_cast
    |     | |       `-UnaryOperator 0x11e93aa00 <col:72, col:73> 'const char' lvalue prefix '*' cannot overflow
    |     | |         `-ImplicitCastExpr 0x11e9209d8 <col:73> 'const char *' <LValueToRValue>
    |     | |           `-DeclRefExpr 0x11e9209b8 <col:73> 'const char *' lvalue ParmVar 0x11e920358 's2' 'const char *'
    |     | |-IfStmt 0x11e93ac50 <line:8:13, line:9:23>
    |     | | |-BinaryOperator 0x11e93abc0 <line:8:17, col:38> 'int' '&&'
    |     | | | |-BinaryOperator 0x11e93ab10 <col:17, col:23> 'int' '>='
    |     | | | | |-ImplicitCastExpr 0x11e93aaf8 <col:17> 'int' <IntegralCast>
    |     | | | | | `-ImplicitCastExpr 0x11e93aae0 <col:17> 'unsigned char' <LValueToRValue>
    |     | | | | |   `-DeclRefExpr 0x11e93aaa0 <col:17> 'unsigned char' lvalue Var 0x11e920828 'c1' 'unsigned char'
    |     | | | | `-IntegerLiteral 0x11e93aac0 <col:23> 'int' 65
    |     | | | `-BinaryOperator 0x11e93aba0 <col:32, col:38> 'int' '<='
    |     | | |   |-ImplicitCastExpr 0x11e93ab88 <col:32> 'int' <IntegralCast>
    |     | | |   | `-ImplicitCastExpr 0x11e93ab70 <col:32> 'unsigned char' <LValueToRValue>
    |     | | |   |   `-DeclRefExpr 0x11e93ab30 <col:32> 'unsigned char' lvalue Var 0x11e920828 'c1' 'unsigned char'
    |     | | |   `-IntegerLiteral 0x11e93ab50 <col:38> 'int' 90
    |     | | `-CompoundAssignOperator 0x11e93ac20 <line:9:17, col:23> 'unsigned char' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |     | |   |-DeclRefExpr 0x11e93abe0 <col:17> 'unsigned char' lvalue Var 0x11e920828 'c1' 'unsigned char'
    |     | |   `-IntegerLiteral 0x11e93ac00 <col:23> 'int' 32
    |     | |-IfStmt 0x11e93ae20 <line:10:13, line:11:23>
    |     | | |-BinaryOperator 0x11e93ad90 <line:10:17, col:38> 'int' '&&'
    |     | | | |-BinaryOperator 0x11e93ace0 <col:17, col:23> 'int' '>='
    |     | | | | |-ImplicitCastExpr 0x11e93acc8 <col:17> 'int' <IntegralCast>
    |     | | | | | `-ImplicitCastExpr 0x11e93acb0 <col:17> 'unsigned char' <LValueToRValue>
    |     | | | | |   `-DeclRefExpr 0x11e93ac70 <col:17> 'unsigned char' lvalue Var 0x11e920950 'c2' 'unsigned char'
    |     | | | | `-IntegerLiteral 0x11e93ac90 <col:23> 'int' 65
    |     | | | `-BinaryOperator 0x11e93ad70 <col:32, col:38> 'int' '<='
    |     | | |   |-ImplicitCastExpr 0x11e93ad58 <col:32> 'int' <IntegralCast>
    |     | | |   | `-ImplicitCastExpr 0x11e93ad40 <col:32> 'unsigned char' <LValueToRValue>
    |     | | |   |   `-DeclRefExpr 0x11e93ad00 <col:32> 'unsigned char' lvalue Var 0x11e920950 'c2' 'unsigned char'
    |     | | |   `-IntegerLiteral 0x11e93ad20 <col:38> 'int' 90
    |     | | `-CompoundAssignOperator 0x11e93adf0 <line:11:17, col:23> 'unsigned char' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |     | |   |-DeclRefExpr 0x11e93adb0 <col:17> 'unsigned char' lvalue Var 0x11e920950 'c2' 'unsigned char'
    |     | |   `-IntegerLiteral 0x11e93add0 <col:23> 'int' 32
    |     | |-IfStmt 0x11e93af08 <line:13:13, line:14:17>
    |     | | |-BinaryOperator 0x11e93aee0 <line:13:17, col:23> 'int' '=='
    |     | | | |-ImplicitCastExpr 0x11e93aeb0 <col:17> 'int' <IntegralCast>
    |     | | | | `-ImplicitCastExpr 0x11e93ae80 <col:17> 'unsigned char' <LValueToRValue>
    |     | | | |   `-DeclRefExpr 0x11e93ae40 <col:17> 'unsigned char' lvalue Var 0x11e920828 'c1' 'unsigned char'
    |     | | | `-ImplicitCastExpr 0x11e93aec8 <col:23> 'int' <IntegralCast>
    |     | | |   `-ImplicitCastExpr 0x11e93ae98 <col:23> 'unsigned char' <LValueToRValue>
    |     | | |     `-DeclRefExpr 0x11e93ae60 <col:23> 'unsigned char' lvalue Var 0x11e920950 'c2' 'unsigned char'
    |     | | `-ContinueStmt 0x11e93af00 <line:14:17>
    |     | |-IfStmt 0x11e93b030 <line:16:13, line:17:25>
    |     | | |-BinaryOperator 0x11e93afc8 <line:16:17, col:22> 'int' '<'
    |     | | | |-ImplicitCastExpr 0x11e93af98 <col:17> 'int' <IntegralCast>
    |     | | | | `-ImplicitCastExpr 0x11e93af68 <col:17> 'unsigned char' <LValueToRValue>
    |     | | | |   `-DeclRefExpr 0x11e93af28 <col:17> 'unsigned char' lvalue Var 0x11e920828 'c1' 'unsigned char'
    |     | | | `-ImplicitCastExpr 0x11e93afb0 <col:22> 'int' <IntegralCast>
    |     | | |   `-ImplicitCastExpr 0x11e93af80 <col:22> 'unsigned char' <LValueToRValue>
    |     | | |     `-DeclRefExpr 0x11e93af48 <col:22> 'unsigned char' lvalue Var 0x11e920950 'c2' 'unsigned char'
    |     | | `-ReturnStmt 0x11e93b020 <line:17:17, col:25>
    |     | |   `-UnaryOperator 0x11e93b008 <col:24, col:25> 'int' prefix '-'
    |     | |     `-IntegerLiteral 0x11e93afe8 <col:25> 'int' 1
    |     | `-ReturnStmt 0x11e93b070 <line:20:13, col:20>
    |     |   `-IntegerLiteral 0x11e93b050 <col:20> 'int' 1
    |     `-IfStmt 0x11e93b1c8 <line:21:16, line:24:9>
    |       |-BinaryOperator 0x11e93b160 <line:21:20, col:27> 'int' '=='
    |       | |-ImplicitCastExpr 0x11e93b148 <col:20, col:21> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x11e93b130 <col:20, col:21> 'char' <LValueToRValue>
    |       | |   `-UnaryOperator 0x11e93b0f8 <col:20, col:21> 'const char' lvalue prefix '*' cannot overflow
    |       | |     `-ImplicitCastExpr 0x11e93b0e0 <col:21> 'const char *' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x11e93b0c0 <col:21> 'const char *' lvalue ParmVar 0x11e9202d8 's1' 'const char *'
    |       | `-IntegerLiteral 0x11e93b110 <col:27> 'int' 0
    |       `-CompoundStmt 0x11e93b1b0 <col:30, line:24:9>
    |         `-ReturnStmt 0x11e93b1a0 <line:23:13, col:20>
    |           `-IntegerLiteral 0x11e93b180 <col:20> 'int' 0
    `-ReturnStmt 0x11e93b288 <line:27:5, col:12>
      `-IntegerLiteral 0x11e93b268 <col:12> 'int' 0
