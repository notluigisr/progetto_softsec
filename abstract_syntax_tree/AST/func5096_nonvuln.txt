TranslationUnitDecl 0x12a055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x12a0564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x12a055bd0 '__int128'
|-TypedefDecl 0x12a056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x12a055bf0 'unsigned __int128'
|-TypedefDecl 0x12a80be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12a80bc00 'struct __NSConstantString_tag'
|   `-Record 0x12a056580 '__NSConstantString_tag'
|-TypedefDecl 0x12a80be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x12a055d90 '__SVInt8_t'
|-TypedefDecl 0x12a80bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x12a055db0 '__SVInt16_t'
|-TypedefDecl 0x12a80bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x12a055dd0 '__SVInt32_t'
|-TypedefDecl 0x12a80bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x12a055df0 '__SVInt64_t'
|-TypedefDecl 0x12a80c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x12a055e10 '__SVUint8_t'
|-TypedefDecl 0x12a80c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x12a055e30 '__SVUint16_t'
|-TypedefDecl 0x12a80c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x12a055e50 '__SVUint32_t'
|-TypedefDecl 0x12a80c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x12a055e70 '__SVUint64_t'
|-TypedefDecl 0x12a80c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x12a055e90 '__SVFloat16_t'
|-TypedefDecl 0x12a80c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x12a055eb0 '__SVFloat32_t'
|-TypedefDecl 0x12a80c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x12a055ed0 '__SVFloat64_t'
|-TypedefDecl 0x12a80c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x12a055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12a80c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x12a055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12a80c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x12a055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12a80c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x12a055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12a80c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x12a055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12a80c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x12a055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12a80c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x12a055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12a80c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x12a055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12a80c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x12a055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12a80c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x12a056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12a80c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x12a056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12a80c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x12a056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12a80c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x12a056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12a80c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x12a056090 '__clang_svint8x3_t'
|-TypedefDecl 0x12a80c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x12a0560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12a80c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x12a0560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12a80c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x12a0560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12a80c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x12a056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12a80ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x12a056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12a80cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x12a056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12a80cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x12a056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12a80cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x12a056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12a80d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x12a0561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12a80d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x12a0561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12a80d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x12a0561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12a80d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x12a056210 '__clang_svint8x4_t'
|-TypedefDecl 0x12a80d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x12a056230 '__clang_svint16x4_t'
|-TypedefDecl 0x12a80d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x12a056250 '__clang_svint32x4_t'
|-TypedefDecl 0x12a80d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x12a056270 '__clang_svint64x4_t'
|-TypedefDecl 0x12a80d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x12a056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12a80d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x12a0562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12a80d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x12a0562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12a80d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x12a0562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12a80d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x12a056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12a80d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x12a056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12a80d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x12a056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12a80d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x12a056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12a80da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x12a056390 '__SVBool_t'
|-TypedefDecl 0x12a80da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x12a0563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12a80dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x12a0563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12a80db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x12a0563f0 '__SVCount_t'
|-TypedefDecl 0x12a80dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12a80dbb0 'char *'
|   `-BuiltinType 0x12a0556b0 'char'
|-TypedefDecl 0x12a80dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12a80dbb0 'char *'
|   `-BuiltinType 0x12a0556b0 'char'
|-FunctionDecl 0x12a80dda8 <dataset_diviso_filec/func5096_nonvuln.c:1:1, line:20:1> line:1:1 has_invalid_email_chars 'int (const char *)'
| |-ParmVarDecl 0x12a80dcd8 <col:26, col:38> col:38 used s 'const char *'
| `-CompoundStmt 0x12a827288 <line:2:1, line:20:1>
|   |-DeclStmt 0x12a80df40 <line:3:3, col:16>
|   | `-VarDecl 0x12a80deb8 <col:3, col:15> col:7 used at_seen 'int' cinit
|   |   `-IntegerLiteral 0x12a80df20 <col:15> 'int' 0
|   |-DeclStmt 0x12a80e070 <line:4:3, line:5:10>
|   | `-VarDecl 0x12a80df70 <line:4:3, line:5:5> line:4:15 used valid_chars 'const char *' cinit
|   |   `-ImplicitCastExpr 0x12a80e058 <line:5:5> 'const char *' <NoOp>
|   |     `-ImplicitCastExpr 0x12a80e040 <col:5> 'char *' <ArrayToPointerDecay>
|   |       `-StringLiteral 0x12a80e020 <col:5> 'char[4]' lvalue "STR"
|   |-ForStmt 0x12a827220 <line:7:3, line:18:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x12a80e0d8 <line:7:11, col:12> 'char' <LValueToRValue>
|   | | `-UnaryOperator 0x12a80e0c0 <col:11, col:12> 'const char' lvalue prefix '*' cannot overflow
|   | |   `-ImplicitCastExpr 0x12a80e0a8 <col:12> 'const char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x12a80e088 <col:12> 'const char *' lvalue ParmVar 0x12a80dcd8 's' 'const char *'
|   | |-UnaryOperator 0x12a80e110 <col:15, col:16> 'const char *' postfix '++'
|   | | `-DeclRefExpr 0x12a80e0f0 <col:15> 'const char *' lvalue ParmVar 0x12a80dcd8 's' 'const char *'
|   | `-CompoundStmt 0x12a827200 <line:8:5, line:18:5>
|   |   |-IfStmt 0x12a80e210 <line:9:7, line:10:9>
|   |   | |-ParenExpr 0x12a80e1e8 <line:9:12, col:22> 'int'
|   |   | | `-BinaryOperator 0x12a80e1c8 <col:13, col:18> 'int' '&'
|   |   | |   |-ImplicitCastExpr 0x12a80e1b0 <col:13, col:14> 'int' <IntegralCast>
|   |   | |   | `-ImplicitCastExpr 0x12a80e198 <col:13, col:14> 'char' <LValueToRValue>
|   |   | |   |   `-UnaryOperator 0x12a80e160 <col:13, col:14> 'const char' lvalue prefix '*' cannot overflow
|   |   | |   |     `-ImplicitCastExpr 0x12a80e148 <col:14> 'const char *' <LValueToRValue>
|   |   | |   |       `-DeclRefExpr 0x12a80e128 <col:14> 'const char *' lvalue ParmVar 0x12a80dcd8 's' 'const char *'
|   |   | |   `-IntegerLiteral 0x12a80e178 <col:18> 'int' 128
|   |   | `-ContinueStmt 0x12a80e208 <line:10:9>
|   |   `-IfStmt 0x12a8271d0 <line:11:7, line:17:16> has_else
|   |     |-BinaryOperator 0x12a80e2c8 <line:11:12, col:18> 'int' '=='
|   |     | |-ImplicitCastExpr 0x12a80e2b0 <col:12, col:13> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x12a80e298 <col:12, col:13> 'char' <LValueToRValue>
|   |     | |   `-UnaryOperator 0x12a80e268 <col:12, col:13> 'const char' lvalue prefix '*' cannot overflow
|   |     | |     `-ImplicitCastExpr 0x12a80e250 <col:13> 'const char *' <LValueToRValue>
|   |     | |       `-DeclRefExpr 0x12a80e230 <col:13> 'const char *' lvalue ParmVar 0x12a80dcd8 's' 'const char *'
|   |     | `-CharacterLiteral 0x12a80e280 <col:18> 'int' 64
|   |     |-BinaryOperator 0x12a80e328 <line:12:9, col:17> 'int' '='
|   |     | |-DeclRefExpr 0x12a80e2e8 <col:9> 'int' lvalue Var 0x12a80deb8 'at_seen' 'int'
|   |     | `-IntegerLiteral 0x12a80e308 <col:17> 'int' 1
|   |     `-IfStmt 0x12a8271a0 <line:13:12, line:17:16> has_else
|   |       |-BinaryOperator 0x12a826f40 <line:13:17, line:14:52> 'int' '&&'
|   |       | |-UnaryOperator 0x12a80e380 <line:13:17, col:18> 'int' prefix '!' cannot overflow
|   |       | | `-ImplicitCastExpr 0x12a80e368 <col:18> 'int' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x12a80e348 <col:18> 'int' lvalue Var 0x12a80deb8 'at_seen' 'int'
|   |       | `-UnaryOperator 0x12a826f28 <col:29, line:14:52> 'int' prefix '!' cannot overflow
|   |       |   `-ParenExpr 0x12a826f08 <line:13:30, line:14:52> 'int'
|   |       |     `-BinaryOperator 0x12a826ee8 <line:13:31, line:14:51> 'int' '||'
|   |       |       |-CallExpr 0x12a826d08 <line:13:31, col:54> 'char *'
|   |       |       | |-ImplicitCastExpr 0x12a826cf0 <col:31> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   |       |       | | `-DeclRefExpr 0x12a826c00 <col:31> 'char *(const char *, int)' Function 0x12a826a20 'strchr' 'char *(const char *, int)'
|   |       |       | |-ImplicitCastExpr 0x12a826d38 <col:39> 'const char *' <LValueToRValue>
|   |       |       | | `-DeclRefExpr 0x12a826c20 <col:39> 'const char *' lvalue Var 0x12a80df70 'valid_chars' 'const char *'
|   |       |       | `-ImplicitCastExpr 0x12a826d68 <col:52, col:53> 'int' <IntegralCast>
|   |       |       |   `-ImplicitCastExpr 0x12a826d50 <col:52, col:53> 'char' <LValueToRValue>
|   |       |       |     `-UnaryOperator 0x12a826c78 <col:52, col:53> 'const char' lvalue prefix '*' cannot overflow
|   |       |       |       `-ImplicitCastExpr 0x12a826c60 <col:53> 'const char *' <LValueToRValue>
|   |       |       |         `-DeclRefExpr 0x12a826c40 <col:53> 'const char *' lvalue ParmVar 0x12a80dcd8 's' 'const char *'
|   |       |       `-CallExpr 0x12a826e58 <line:14:34, col:51> 'char *'
|   |       |         |-ImplicitCastExpr 0x12a826e40 <col:34> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   |       |         | `-DeclRefExpr 0x12a826d80 <col:34> 'char *(const char *, int)' Function 0x12a826a20 'strchr' 'char *(const char *, int)'
|   |       |         |-ImplicitCastExpr 0x12a826ea0 <col:42> 'const char *' <NoOp>
|   |       |         | `-ImplicitCastExpr 0x12a826e88 <col:42> 'char *' <ArrayToPointerDecay>
|   |       |         |   `-StringLiteral 0x12a826da0 <col:42> 'char[4]' lvalue "STR"
|   |       |         `-ImplicitCastExpr 0x12a826ed0 <col:49, col:50> 'int' <IntegralCast>
|   |       |           `-ImplicitCastExpr 0x12a826eb8 <col:49, col:50> 'char' <LValueToRValue>
|   |       |             `-UnaryOperator 0x12a826df8 <col:49, col:50> 'const char' lvalue prefix '*' cannot overflow
|   |       |               `-ImplicitCastExpr 0x12a826de0 <col:50> 'const char *' <LValueToRValue>
|   |       |                 `-DeclRefExpr 0x12a826dc0 <col:50> 'const char *' lvalue ParmVar 0x12a80dcd8 's' 'const char *'
|   |       |-ReturnStmt 0x12a826f80 <line:15:9, col:16>
|   |       | `-IntegerLiteral 0x12a826f60 <col:16> 'int' 1
|   |       `-IfStmt 0x12a827180 <line:16:12, line:17:16>
|   |         |-BinaryOperator 0x12a827130 <line:16:17, col:53> 'int' '&&'
|   |         | |-ImplicitCastExpr 0x12a827118 <col:17> 'int' <LValueToRValue>
|   |         | | `-DeclRefExpr 0x12a826f90 <col:17> 'int' lvalue Var 0x12a80deb8 'at_seen' 'int'
|   |         | `-UnaryOperator 0x12a827100 <col:28, col:53> 'int' prefix '!' cannot overflow
|   |         |   `-CallExpr 0x12a827088 <col:29, col:53> 'char *'
|   |         |     |-ImplicitCastExpr 0x12a827070 <col:29> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   |         |     | `-DeclRefExpr 0x12a826fb0 <col:29> 'char *(const char *, int)' Function 0x12a826a20 'strchr' 'char *(const char *, int)'
|   |         |     |-ImplicitCastExpr 0x12a8270b8 <col:37> 'const char *' <LValueToRValue>
|   |         |     | `-DeclRefExpr 0x12a826fd0 <col:37> 'const char *' lvalue Var 0x12a80df70 'valid_chars' 'const char *'
|   |         |     `-ImplicitCastExpr 0x12a8270e8 <col:50, col:51> 'int' <IntegralCast>
|   |         |       `-ImplicitCastExpr 0x12a8270d0 <col:50, col:51> 'char' <LValueToRValue>
|   |         |         `-UnaryOperator 0x12a827028 <col:50, col:51> 'const char' lvalue prefix '*' cannot overflow
|   |         |           `-ImplicitCastExpr 0x12a827010 <col:51> 'const char *' <LValueToRValue>
|   |         |             `-DeclRefExpr 0x12a826ff0 <col:51> 'const char *' lvalue ParmVar 0x12a80dcd8 's' 'const char *'
|   |         `-ReturnStmt 0x12a827170 <line:17:9, col:16>
|   |           `-IntegerLiteral 0x12a827150 <col:16> 'int' 1
|   `-ReturnStmt 0x12a827278 <line:19:3, col:10>
|     `-IntegerLiteral 0x12a827258 <col:10> 'int' 0
`-FunctionDecl 0x12a826a20 <line:13:31> col:31 implicit used strchr 'char *(const char *, int)' extern
  |-ParmVarDecl 0x12a826b20 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x12a826b88 <<invalid sloc>> <invalid sloc> 'int'
  `-BuiltinAttr 0x12a826ac8 <<invalid sloc>> Implicit 893
