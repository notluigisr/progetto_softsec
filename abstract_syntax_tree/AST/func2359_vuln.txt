TranslationUnitDecl 0x150055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1500564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x150055bd0 '__int128'
|-TypedefDecl 0x150056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x150055bf0 'unsigned __int128'
|-TypedefDecl 0x150126a30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x150126800 'struct __NSConstantString_tag'
|   `-Record 0x150056580 '__NSConstantString_tag'
|-TypedefDecl 0x150126a98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x150055d90 '__SVInt8_t'
|-TypedefDecl 0x150126b00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x150055db0 '__SVInt16_t'
|-TypedefDecl 0x150126b68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x150055dd0 '__SVInt32_t'
|-TypedefDecl 0x150126bd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x150055df0 '__SVInt64_t'
|-TypedefDecl 0x150126c38 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x150055e10 '__SVUint8_t'
|-TypedefDecl 0x150126ca0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x150055e30 '__SVUint16_t'
|-TypedefDecl 0x150126d08 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x150055e50 '__SVUint32_t'
|-TypedefDecl 0x150126d70 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x150055e70 '__SVUint64_t'
|-TypedefDecl 0x150126dd8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x150055e90 '__SVFloat16_t'
|-TypedefDecl 0x150126e40 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x150055eb0 '__SVFloat32_t'
|-TypedefDecl 0x150126ea8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x150055ed0 '__SVFloat64_t'
|-TypedefDecl 0x150126f10 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x150055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x150126f78 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x150055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x150126fe0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x150055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x150127048 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x150055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1501270b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x150055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x150127118 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x150055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x150127180 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x150055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1501271e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x150055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x150127250 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x150055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x1501272b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x150056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x150127320 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x150056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x150127388 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x150056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x1501273f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x150056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x150127458 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x150056090 '__clang_svint8x3_t'
|-TypedefDecl 0x1501274c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1500560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x150127528 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1500560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x150127590 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1500560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x1501275f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x150056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x150127660 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x150056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x1501276c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x150056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x150127730 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x150056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x150127798 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x150056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x150128000 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1500561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x150128068 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1500561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1501280d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1500561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x150128138 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x150056210 '__clang_svint8x4_t'
|-TypedefDecl 0x1501281a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x150056230 '__clang_svint16x4_t'
|-TypedefDecl 0x150128208 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x150056250 '__clang_svint32x4_t'
|-TypedefDecl 0x150128270 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x150056270 '__clang_svint64x4_t'
|-TypedefDecl 0x1501282d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x150056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x150128340 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1500562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x1501283a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1500562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x150128410 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1500562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x150128478 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x150056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x1501284e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x150056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x150128548 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x150056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x1501285b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x150056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x150128618 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x150056390 '__SVBool_t'
|-TypedefDecl 0x150128680 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1500563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x1501286e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1500563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x150128750 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1500563f0 '__SVCount_t'
|-TypedefDecl 0x1501287f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1501287b0 'char *'
|   `-BuiltinType 0x1500556b0 'char'
|-TypedefDecl 0x150128868 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1501287b0 'char *'
|   `-BuiltinType 0x1500556b0 'char'
|-FunctionDecl 0x150128a80 <dataset_diviso_filec/func2359_vuln.c:1:1, line:80:1> line:1:13 invalid php_build_argv 'void (char *, int *)' static
| |-ParmVarDecl 0x1501288d8 <col:28, col:34> col:34 used s 'char *'
| |-ParmVarDecl 0x1501289a8 <col:37, col:43> col:43 invalid track_vars_array 'int *'
| `-CompoundStmt 0x1501440b0 <line:2:1, line:80:1>
|   |-DeclStmt 0x150128c80 <line:4:2, col:15>
|   | `-VarDecl 0x150128bf8 <col:2, col:14> col:6 used count 'int' cinit
|   |   `-IntegerLiteral 0x150128c60 <col:14> 'int' 0
|   |-DeclStmt 0x150128db0 <line:5:2, col:18>
|   | |-VarDecl 0x150128cb0 <col:2, col:8> col:8 used ss 'char *'
|   | `-VarDecl 0x150128d30 <col:2, col:13> col:13 used space 'char *'
|   |-IfStmt 0x150142068 <line:7:2, line:9:2>
|   | |-RecoveryExpr 0x150142020 <line:7:6, col:49> '_Bool' contains-errors
|   | `-CompoundStmt 0x150142050 <col:52, line:9:2>
|   |   `-ReturnStmt 0x150142040 <line:8:3>
|   |-CallExpr 0x1501421e8 <line:11:2, col:21> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x150142168 <col:2> 'int ()' Function 0x1501420b0 'ALLOC_INIT_ZVAL' 'int ()'
|   | `-RecoveryExpr 0x1501421c8 <col:18> '<dependent type>' contains-errors lvalue
|   |-CallExpr 0x150142370 <line:12:2, col:16> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x1501422f0 <col:2> 'int ()' Function 0x150142238 'array_init' 'int ()'
|   | `-RecoveryExpr 0x150142350 <col:13> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x150143698 <line:15:2, line:55:2> has_else
|   | |-CXXDependentScopeMemberExpr 0x150142488 <line:15:6, col:23> '<dependent type>' contains-errors lvalue .argc
|   | | `-CallExpr 0x150142460 <col:6, col:21> '<dependent type>' contains-errors
|   | |   |-DeclRefExpr 0x150142398 <col:6> 'int ()' Function 0x150128e68 'SG' 'int ()'
|   | |   `-RecoveryExpr 0x150142440 <col:9> '<dependent type>' contains-errors lvalue
|   | |-CompoundStmt 0x148008dd8 <col:29, line:29:2>
|   | | |-DeclStmt 0x150142550 <line:16:3, col:8>
|   | | | `-VarDecl 0x1501424e8 <col:3, col:7> col:7 used i 'int'
|   | | `-ForStmt 0x148008da0 <line:17:3, line:28:3>
|   | |   |-BinaryOperator 0x1501425a8 <line:17:8, col:12> 'int' '='
|   | |   | |-DeclRefExpr 0x150142568 <col:8> 'int' lvalue Var 0x1501424e8 'i' 'int'
|   | |   | `-IntegerLiteral 0x150142588 <col:12> 'int' 0
|   | |   |-<<<NULL>>>
|   | |   |-BinaryOperator 0x150142740 <col:15, col:36> 'int' contains-errors '<'
|   | |   | |-DeclRefExpr 0x1501425c8 <col:15> 'int' lvalue Var 0x1501424e8 'i' 'int'
|   | |   | `-CXXDependentScopeMemberExpr 0x1501426f8 <col:19, col:36> '<dependent type>' contains-errors lvalue .argc
|   | |   |   `-CallExpr 0x1501426d0 <col:19, col:34> '<dependent type>' contains-errors
|   | |   |     |-DeclRefExpr 0x1501425e8 <col:19> 'int ()' Function 0x150128e68 'SG' 'int ()'
|   | |   |     `-RecoveryExpr 0x1501426b0 <col:22> '<dependent type>' contains-errors lvalue
|   | |   |-UnaryOperator 0x150142780 <col:42, col:43> 'int' postfix '++'
|   | |   | `-DeclRefExpr 0x150142760 <col:42> 'int' lvalue Var 0x1501424e8 'i' 'int'
|   | |   `-CompoundStmt 0x148008d78 <col:47, line:28:3>
|   | |     |-CallExpr 0x1501428f8 <line:18:4, col:18> '<dependent type>' contains-errors
|   | |     | |-DeclRefExpr 0x150142878 <col:4> 'int ()' Function 0x1501427c0 'ALLOC_ZVAL' 'int ()'
|   | |     | `-RecoveryExpr 0x1501428d8 <col:15> '<dependent type>' contains-errors lvalue
|   | |     |-BinaryOperator 0x150142b00 <line:19:4, col:20> '<dependent type>' contains-errors '='
|   | |     | |-CallExpr 0x150142ab8 <col:4, col:16> '<dependent type>' contains-errors
|   | |     | | |-DeclRefExpr 0x150142a00 <col:4> 'int ()' Function 0x150142948 'Z_TYPE_P' 'int ()'
|   | |     | | `-RecoveryExpr 0x150142a98 <col:13> '<dependent type>' contains-errors lvalue
|   | |     | `-RecoveryExpr 0x150142ae0 <col:20> '<dependent type>' contains-errors lvalue
|   | |     `-IfStmt 0x148008d58 <line:23:4, line:27:4>
|   | |       |-RecoveryExpr 0x148008b90 <line:23:8, col:84> '_Bool' contains-errors
|   | |       `-CompoundStmt 0x148008d40 <col:93, line:27:4>
|   | |         `-IfStmt 0x148008d20 <line:24:5, line:26:5>
|   | |           |-RecoveryExpr 0x148008bd0 <line:24:9, col:26> '_Bool' contains-errors
|   | |           `-CompoundStmt 0x148008d10 <col:37, line:26:5>
|   | `-IfStmt 0x150143678 <line:29:10, line:55:2>
|   |   |-BinaryOperator 0x148008eb0 <line:29:14, col:20> 'int' '&&'
|   |   | |-ImplicitCastExpr 0x148008e68 <col:14> 'char *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x148008df8 <col:14> 'char *' lvalue ParmVar 0x1501288d8 's' 'char *'
|   |   | `-ImplicitCastExpr 0x148008e98 <col:19, col:20> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x148008e80 <col:19, col:20> 'char' <LValueToRValue>
|   |   |     `-UnaryOperator 0x148008e50 <col:19, col:20> 'char' lvalue prefix '*' cannot overflow
|   |   |       `-ImplicitCastExpr 0x148008e38 <col:20> 'char *' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x148008e18 <col:20> 'char *' lvalue ParmVar 0x1501288d8 's' 'char *'
|   |   `-CompoundStmt 0x150143658 <col:23, line:55:2>
|   |     |-BinaryOperator 0x148008f28 <line:30:3, col:8> 'char *' '='
|   |     | |-DeclRefExpr 0x148008ed0 <col:3> 'char *' lvalue Var 0x150128cb0 'ss' 'char *'
|   |     | `-ImplicitCastExpr 0x148008f10 <col:8> 'char *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x148008ef0 <col:8> 'char *' lvalue ParmVar 0x1501288d8 's' 'char *'
|   |     `-WhileStmt 0x150143638 <line:31:3, line:54:3>
|   |       |-ImplicitCastExpr 0x148008f68 <line:31:10> 'char *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x148008f48 <col:10> 'char *' lvalue Var 0x150128cb0 'ss' 'char *'
|   |       `-CompoundStmt 0x150143600 <col:14, line:54:3>
|   |         |-BinaryOperator 0x1480092d8 <line:32:4, col:26> 'char *' '='
|   |         | |-DeclRefExpr 0x148008f80 <col:4> 'char *' lvalue Var 0x150128d30 'space' 'char *'
|   |         | `-CallExpr 0x148009278 <col:12, col:26> 'char *'
|   |         |   |-ImplicitCastExpr 0x148009260 <col:12> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   |         |   | `-DeclRefExpr 0x1480091c0 <col:12> 'char *(const char *, int)' Function 0x148008fe0 'strchr' 'char *(const char *, int)'
|   |         |   |-ImplicitCastExpr 0x1480092c0 <col:19> 'const char *' <NoOp>
|   |         |   | `-ImplicitCastExpr 0x1480092a8 <col:19> 'char *' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x1480091e0 <col:19> 'char *' lvalue Var 0x150128cb0 'ss' 'char *'
|   |         |   `-CharacterLiteral 0x148009200 <col:23> 'int' 43
|   |         |-IfStmt 0x1480093e8 <line:33:4, line:35:4>
|   |         | |-ImplicitCastExpr 0x148009318 <line:33:8> 'char *' <LValueToRValue>
|   |         | | `-DeclRefExpr 0x1480092f8 <col:8> 'char *' lvalue Var 0x150128d30 'space' 'char *'
|   |         | `-CompoundStmt 0x1480093d0 <col:15, line:35:4>
|   |         |   `-BinaryOperator 0x1480093b0 <line:34:5, col:14> 'char' '='
|   |         |     |-UnaryOperator 0x148009368 <col:5, col:6> 'char' lvalue prefix '*' cannot overflow
|   |         |     | `-ImplicitCastExpr 0x148009350 <col:6> 'char *' <LValueToRValue>
|   |         |     |   `-DeclRefExpr 0x148009330 <col:6> 'char *' lvalue Var 0x150128d30 'space' 'char *'
|   |         |     `-ImplicitCastExpr 0x148009398 <col:14> 'char' <IntegralCast>
|   |         |       `-CharacterLiteral 0x148009380 <col:14> 'int' 0
|   |         |-UnaryOperator 0x148009620 <line:42:4, col:9> 'int' postfix '++'
|   |         | `-DeclRefExpr 0x148009600 <col:4> 'int' lvalue Var 0x150128bf8 'count' 'int'
|   |         |-IfStmt 0x148009760 <line:43:4, line:47:4>
|   |         | |-RecoveryExpr 0x148009678 <line:43:8, col:84> '_Bool' contains-errors
|   |         | `-CompoundStmt 0x148009748 <col:93, line:47:4>
|   |         |   `-IfStmt 0x148009728 <line:44:5, line:46:5>
|   |         |     |-RecoveryExpr 0x1480096b8 <line:44:9, col:26> '_Bool' contains-errors
|   |         |     `-CompoundStmt 0x148009718 <col:37, line:46:5>
|   |         `-IfStmt 0x1501435d0 <line:48:4, line:53:4> has_else
|   |           |-ImplicitCastExpr 0x1480097a0 <line:48:8> 'char *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x148009780 <col:8> 'char *' lvalue Var 0x150128d30 'space' 'char *'
|   |           |-CompoundStmt 0x150143520 <col:15, line:51:4>
|   |           | |-BinaryOperator 0x150143448 <line:49:5, col:14> 'char' '='
|   |           | | |-UnaryOperator 0x150143400 <col:5, col:6> 'char' lvalue prefix '*' cannot overflow
|   |           | | | `-ImplicitCastExpr 0x1480097d8 <col:6> 'char *' <LValueToRValue>
|   |           | | |   `-DeclRefExpr 0x1480097b8 <col:6> 'char *' lvalue Var 0x150128d30 'space' 'char *'
|   |           | | `-ImplicitCastExpr 0x150143430 <col:14> 'char' <IntegralCast>
|   |           | |   `-CharacterLiteral 0x150143418 <col:14> 'int' 43
|   |           | `-BinaryOperator 0x150143500 <line:50:5, col:18> 'char *' '='
|   |           |   |-DeclRefExpr 0x150143468 <col:5> 'char *' lvalue Var 0x150128cb0 'ss' 'char *'
|   |           |   `-BinaryOperator 0x1501434e0 <col:10, col:18> 'char *' '+'
|   |           |     |-ImplicitCastExpr 0x1501434c8 <col:10> 'char *' <LValueToRValue>
|   |           |     | `-DeclRefExpr 0x150143488 <col:10> 'char *' lvalue Var 0x150128d30 'space' 'char *'
|   |           |     `-IntegerLiteral 0x1501434a8 <col:18> 'int' 1
|   |           `-CompoundStmt 0x1501435b8 <line:51:11, line:53:4>
|   |             `-BinaryOperator 0x150143598 <line:52:5, col:10> 'char *' '='
|   |               |-DeclRefExpr 0x150143540 <col:5> 'char *' lvalue Var 0x150128cb0 'ss' 'char *'
|   |               `-ImplicitCastExpr 0x150143580 <col:10> 'char *' <LValueToRValue>
|   |                 `-DeclRefExpr 0x150143560 <col:10> 'char *' lvalue Var 0x150128d30 'space' 'char *'
|   |-IfStmt 0x1501438a8 <line:59:2, line:63:2> has_else
|   | |-RecoveryExpr 0x150143708 <line:59:6, col:23> '_Bool' contains-errors
|   | |-CompoundStmt 0x150143848 <col:29, line:61:2>
|   | `-CompoundStmt 0x150143898 <col:9, line:63:2>
|   |-IfStmt 0x150143d30 <line:66:2, line:71:2>
|   | |-RecoveryExpr 0x150143918 <line:66:6, col:23> '_Bool' contains-errors
|   | `-CompoundStmt 0x150143d20 <col:29, line:71:2>
|   `-IfStmt 0x150143f70 <line:72:2, line:77:2>
|     |-RecoveryExpr 0x150143d50 <line:72:6> '<dependent type>' contains-errors lvalue
|     `-CompoundStmt 0x150143f60 <col:24, line:77:2>
|-FunctionDecl 0x150142c58 <line:20:22> col:22 implicit used strlen 'unsigned long (const char *)' extern
| |-ParmVarDecl 0x150142d58 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x150142d00 <<invalid sloc>> Implicit 902
`-FunctionDecl 0x148008fe0 <line:32:12> col:12 implicit used strchr 'char *(const char *, int)' extern
  |-ParmVarDecl 0x1480090e0 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x148009148 <<invalid sloc>> <invalid sloc> 'int'
  `-BuiltinAttr 0x148009088 <<invalid sloc>> Implicit 893
