TranslationUnitDecl 0x12a055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x12a0564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x12a055bd0 '__int128'
|-TypedefDecl 0x12a056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x12a055bf0 'unsigned __int128'
|-TypedefDecl 0x12a80be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12a80bc00 'struct __NSConstantString_tag'
|   `-Record 0x12a056580 '__NSConstantString_tag'
|-TypedefDecl 0x12a80be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x12a055d90 '__SVInt8_t'
|-TypedefDecl 0x12a80bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x12a055db0 '__SVInt16_t'
|-TypedefDecl 0x12a80bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x12a055dd0 '__SVInt32_t'
|-TypedefDecl 0x12a80bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x12a055df0 '__SVInt64_t'
|-TypedefDecl 0x12a80c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x12a055e10 '__SVUint8_t'
|-TypedefDecl 0x12a80c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x12a055e30 '__SVUint16_t'
|-TypedefDecl 0x12a80c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x12a055e50 '__SVUint32_t'
|-TypedefDecl 0x12a80c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x12a055e70 '__SVUint64_t'
|-TypedefDecl 0x12a80c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x12a055e90 '__SVFloat16_t'
|-TypedefDecl 0x12a80c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x12a055eb0 '__SVFloat32_t'
|-TypedefDecl 0x12a80c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x12a055ed0 '__SVFloat64_t'
|-TypedefDecl 0x12a80c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x12a055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12a80c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x12a055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12a80c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x12a055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12a80c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x12a055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12a80c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x12a055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12a80c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x12a055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12a80c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x12a055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12a80c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x12a055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12a80c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x12a055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12a80c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x12a056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12a80c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x12a056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12a80c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x12a056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12a80c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x12a056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12a80c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x12a056090 '__clang_svint8x3_t'
|-TypedefDecl 0x12a80c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x12a0560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12a80c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x12a0560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12a80c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x12a0560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12a80c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x12a056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12a80ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x12a056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12a80cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x12a056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12a80cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x12a056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12a80cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x12a056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12a80d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x12a0561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12a80d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x12a0561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12a80d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x12a0561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12a80d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x12a056210 '__clang_svint8x4_t'
|-TypedefDecl 0x12a80d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x12a056230 '__clang_svint16x4_t'
|-TypedefDecl 0x12a80d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x12a056250 '__clang_svint32x4_t'
|-TypedefDecl 0x12a80d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x12a056270 '__clang_svint64x4_t'
|-TypedefDecl 0x12a80d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x12a056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12a80d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x12a0562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12a80d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x12a0562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12a80d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x12a0562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12a80d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x12a056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12a80d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x12a056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12a80d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x12a056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12a80d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x12a056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12a80da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x12a056390 '__SVBool_t'
|-TypedefDecl 0x12a80da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x12a0563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12a80dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x12a0563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12a80db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x12a0563f0 '__SVCount_t'
|-TypedefDecl 0x12a80dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12a80dbb0 'char *'
|   `-BuiltinType 0x12a0556b0 'char'
|-TypedefDecl 0x12a80dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12a80dbb0 'char *'
|   `-BuiltinType 0x12a0556b0 'char'
|-FunctionDecl 0x12a80ddf0 <dataset_diviso_filec/func4251_vuln.c:1:1, line:50:1> line:1:13 invalid Sp_match 'void (int *)' static
| |-ParmVarDecl 0x12a80dd28 <col:22, col:32> col:32 invalid J 'int *'
| `-CompoundStmt 0x12a124790 <line:2:1, line:50:1>
|   |-DeclStmt 0x12a80df38 <line:4:2, col:18>
|   | `-VarDecl 0x12a80ded0 <col:2, col:14> col:14 used text 'const char *'
|   |-DeclStmt 0x12a80dfd0 <line:5:2, col:9>
|   | `-VarDecl 0x12a80df68 <col:2, col:6> col:6 used len 'int'
|   |-DeclStmt 0x12a80e210 <line:6:2, col:27>
|   | |-VarDecl 0x12a80e000 <col:2, col:14> col:14 used a 'const char *'
|   | |-VarDecl 0x12a80e080 <col:2, col:18> col:18 used b 'const char *'
|   | |-VarDecl 0x12a80e100 <col:2, col:22> col:22 used c 'const char *'
|   | `-VarDecl 0x12a80e180 <col:2, col:26> col:26 used e 'const char *'
|   |-BinaryOperator 0x12a827830 <line:9:2, col:25> 'const char *' contains-errors '='
|   | |-DeclRefExpr 0x12a80e228 <col:2> 'const char *' lvalue Var 0x12a80ded0 'text' 'const char *'
|   | `-CallExpr 0x12a827800 <col:9, col:25> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x12a80e3a0 <col:9> 'int ()' Function 0x12a80e2e8 'checkstring' 'int ()'
|   |   |-RecoveryExpr 0x12a80e3c0 <col:21> '<dependent type>' contains-errors lvalue
|   |   `-IntegerLiteral 0x12a80e3e0 <col:24> 'int' 0
|   |-IfStmt 0x12a8280a8 <line:11:2, line:16:39> has_else
|   | |-CallExpr 0x12a827990 <line:11:6, col:22> '<dependent type>' contains-errors
|   | | |-DeclRefExpr 0x12a827930 <col:6> 'int ()' Function 0x12a827878 'js_isregexp' 'int ()'
|   | | |-RecoveryExpr 0x12a827950 <col:18> '<dependent type>' contains-errors lvalue
|   | | `-IntegerLiteral 0x12a827970 <col:21> 'int' 1
|   | |-CallExpr 0x12a827b00 <line:12:3, col:15> '<dependent type>' contains-errors
|   | | |-DeclRefExpr 0x12a827aa0 <col:3> 'int ()' Function 0x12a8279e8 'js_copy' 'int ()'
|   | | |-RecoveryExpr 0x12a827ac0 <col:11> '<dependent type>' contains-errors lvalue
|   | | `-IntegerLiteral 0x12a827ae0 <col:14> 'int' 1
|   | `-IfStmt 0x12a828078 <line:13:7, line:16:39> has_else
|   |   |-CallExpr 0x12a827c70 <line:13:11, col:30> '<dependent type>' contains-errors
|   |   | |-DeclRefExpr 0x12a827c10 <col:11> 'int ()' Function 0x12a827b58 'js_isundefined' 'int ()'
|   |   | |-RecoveryExpr 0x12a827c30 <col:26> '<dependent type>' contains-errors lvalue
|   |   | `-IntegerLiteral 0x12a827c50 <col:29> 'int' 1
|   |   |-CallExpr 0x12a827e38 <line:14:3, col:24> '<dependent type>' contains-errors
|   |   | |-DeclRefExpr 0x12a827d80 <col:3> 'int ()' Function 0x12a827cc8 'js_newregexp' 'int ()'
|   |   | |-RecoveryExpr 0x12a827da0 <col:16> '<dependent type>' contains-errors lvalue
|   |   | |-StringLiteral 0x12a827e00 <col:19> 'char[1]' lvalue ""
|   |   | `-IntegerLiteral 0x12a827e18 <col:23> 'int' 0
|   |   `-CallExpr 0x12a828040 <line:16:3, col:39> '<dependent type>' contains-errors
|   |     |-DeclRefExpr 0x12a827e70 <col:3> 'int ()' Function 0x12a827cc8 'js_newregexp' 'int ()'
|   |     |-RecoveryExpr 0x12a827e90 <col:16> '<dependent type>' contains-errors lvalue
|   |     |-CallExpr 0x12a827ff0 <col:19, col:35> '<dependent type>' contains-errors
|   |     | |-DeclRefExpr 0x12a827f90 <col:19> 'int ()' Function 0x12a827ed8 'js_tostring' 'int ()'
|   |     | |-RecoveryExpr 0x12a827fb0 <col:31> '<dependent type>' contains-errors lvalue
|   |     | `-IntegerLiteral 0x12a827fd0 <col:34> 'int' 1
|   |     `-IntegerLiteral 0x12a828020 <col:38> 'int' 0
|   |-IfStmt 0x12a828530 <line:19:2, line:22:2>
|   | |-RecoveryExpr 0x12a8282f8 <line:19:6, col:31> '_Bool' contains-errors
|   | `-CompoundStmt 0x12a828510 <col:34, line:22:2>
|   |   |-CallExpr 0x12a8284c8 <line:20:3, col:39> '<dependent type>' contains-errors
|   |   | |-DeclRefExpr 0x12a8283f8 <col:3> 'int ()' Function 0x12a828340 'js_RegExp_prototype_exec' 'int ()'
|   |   | |-RecoveryExpr 0x12a828418 <col:28> '<dependent type>' contains-errors lvalue
|   |   | |-RecoveryExpr 0x12a8284a8 <col:31> '<dependent type>' contains-errors lvalue
|   |   | `-DeclRefExpr 0x12a828450 <col:35> 'const char *' lvalue Var 0x12a80ded0 'text' 'const char *'
|   |   `-ReturnStmt 0x12a828500 <line:21:3>
|   |-CallExpr 0x12a828690 <line:26:2, col:15> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x12a828650 <col:2> 'int ()' Function 0x12a828598 'js_newarray' 'int ()'
|   | `-RecoveryExpr 0x12a828670 <col:14> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x12a8286f8 <line:28:2, col:8> 'int' '='
|   | |-DeclRefExpr 0x12a8286b8 <col:2> 'int' lvalue Var 0x12a80df68 'len' 'int'
|   | `-IntegerLiteral 0x12a8286d8 <col:8> 'int' 0
|   |-BinaryOperator 0x12a828770 <line:29:2, col:6> 'const char *' '='
|   | |-DeclRefExpr 0x12a828718 <col:2> 'const char *' lvalue Var 0x12a80e000 'a' 'const char *'
|   | `-ImplicitCastExpr 0x12a828758 <col:6> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x12a828738 <col:6> 'const char *' lvalue Var 0x12a80ded0 'text' 'const char *'
|   |-BinaryOperator 0x12a122cf0 <line:30:2, col:24> 'const char *' '='
|   | |-DeclRefExpr 0x12a828790 <col:2> 'const char *' lvalue Var 0x12a80e180 'e' 'const char *'
|   | `-BinaryOperator 0x12a122cd0 <col:6, col:24> 'const char *' '+'
|   |   |-ImplicitCastExpr 0x12a122cb8 <col:6> 'const char *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x12a8287b0 <col:6> 'const char *' lvalue Var 0x12a80ded0 'text' 'const char *'
|   |   `-CallExpr 0x12a122c78 <col:13, col:24> 'unsigned long'
|   |     |-ImplicitCastExpr 0x12a122c60 <col:13> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x12a122bd0 <col:13> 'unsigned long (const char *)' Function 0x12a122a60 'strlen' 'unsigned long (const char *)'
|   |     `-ImplicitCastExpr 0x12a122ca0 <col:20> 'const char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x12a122bf0 <col:20> 'const char *' lvalue Var 0x12a80ded0 'text' 'const char *'
|   |-WhileStmt 0x12a124400 <line:31:2, line:44:2>
|   | |-BinaryOperator 0x12a122d80 <line:31:9, col:14> 'int' '<='
|   | | |-ImplicitCastExpr 0x12a122d50 <col:9> 'const char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x12a122d10 <col:9> 'const char *' lvalue Var 0x12a80e000 'a' 'const char *'
|   | | `-ImplicitCastExpr 0x12a122d68 <col:14> 'const char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x12a122d30 <col:14> 'const char *' lvalue Var 0x12a80e180 'e' 'const char *'
|   | `-CompoundStmt 0x12a1235c0 <col:17, line:44:2>
|   |   |-IfStmt 0x12a122f98 <line:32:3, line:33:4>
|   |   | |-RecoveryExpr 0x12a122f70 <line:32:7, col:60> '_Bool' contains-errors
|   |   | `-BreakStmt 0x12a122f90 <line:33:4>
|   |   |-CallExpr 0x12a123208 <line:38:3, col:29> '<dependent type>' contains-errors
|   |   | |-DeclRefExpr 0x12a123118 <col:3> 'int ()' Function 0x12a123060 'js_pushlstring' 'int ()'
|   |   | |-RecoveryExpr 0x12a123138 <col:18> '<dependent type>' contains-errors lvalue
|   |   | |-DeclRefExpr 0x12a123158 <col:21> 'const char *' lvalue Var 0x12a80e080 'b' 'const char *'
|   |   | `-BinaryOperator 0x12a1231e8 <col:24, col:28> 'long' '-'
|   |   |   |-ImplicitCastExpr 0x12a1231b8 <col:24> 'const char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x12a123178 <col:24> 'const char *' lvalue Var 0x12a80e100 'c' 'const char *'
|   |   |   `-ImplicitCastExpr 0x12a1231d0 <col:28> 'const char *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x12a123198 <col:28> 'const char *' lvalue Var 0x12a80e080 'b' 'const char *'
|   |   |-CallExpr 0x12a1233d0 <line:39:3, col:27> '<dependent type>' contains-errors
|   |   | |-DeclRefExpr 0x12a123320 <col:3> 'int ()' Function 0x12a123268 'js_setindex' 'int ()'
|   |   | |-RecoveryExpr 0x12a123340 <col:15> '<dependent type>' contains-errors lvalue
|   |   | |-UnaryOperator 0x12a123380 <col:18, col:19> 'int' prefix '-'
|   |   | | `-IntegerLiteral 0x12a123360 <col:19> 'int' 2
|   |   | `-UnaryOperator 0x12a1233b8 <col:22, col:25> 'int' postfix '++'
|   |   |   `-DeclRefExpr 0x12a123398 <col:22> 'int' lvalue Var 0x12a80df68 'len' 'int'
|   |   |-BinaryOperator 0x12a123460 <line:41:3, col:7> 'const char *' '='
|   |   | |-DeclRefExpr 0x12a123408 <col:3> 'const char *' lvalue Var 0x12a80e000 'a' 'const char *'
|   |   | `-ImplicitCastExpr 0x12a123448 <col:7> 'const char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x12a123428 <col:7> 'const char *' lvalue Var 0x12a80e100 'c' 'const char *'
|   |   `-IfStmt 0x12a1235a0 <line:42:3, line:43:6>
|   |     |-BinaryOperator 0x12a123548 <line:42:7, col:16> 'int' '=='
|   |     | |-BinaryOperator 0x12a1234f0 <col:7, col:11> 'long' '-'
|   |     | | |-ImplicitCastExpr 0x12a1234c0 <col:7> 'const char *' <LValueToRValue>
|   |     | | | `-DeclRefExpr 0x12a123480 <col:7> 'const char *' lvalue Var 0x12a80e100 'c' 'const char *'
|   |     | | `-ImplicitCastExpr 0x12a1234d8 <col:11> 'const char *' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x12a1234a0 <col:11> 'const char *' lvalue Var 0x12a80e080 'b' 'const char *'
|   |     | `-ImplicitCastExpr 0x12a123530 <col:16> 'long' <IntegralCast>
|   |     |   `-IntegerLiteral 0x12a123510 <col:16> 'int' 0
|   |     `-UnaryOperator 0x12a123588 <line:43:4, col:6> 'const char *' prefix '++'
|   |       `-DeclRefExpr 0x12a123568 <col:6> 'const char *' lvalue Var 0x12a80e000 'a' 'const char *'
|   `-IfStmt 0x12a124770 <line:46:2, line:49:2>
|     |-BinaryOperator 0x12a124478 <line:46:6, col:13> 'int' '=='
|     | |-ImplicitCastExpr 0x12a124460 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x12a124420 <col:6> 'int' lvalue Var 0x12a80df68 'len' 'int'
|     | `-IntegerLiteral 0x12a124440 <col:13> 'int' 0
|     `-CompoundStmt 0x12a124750 <col:16, line:49:2>
|       |-CallExpr 0x12a1245d8 <line:47:3, col:14> '<dependent type>' contains-errors
|       | |-DeclRefExpr 0x12a124578 <col:3> 'int ()' Function 0x12a1244c0 'js_pop' 'int ()'
|       | |-RecoveryExpr 0x12a124598 <col:10> '<dependent type>' contains-errors lvalue
|       | `-IntegerLiteral 0x12a1245b8 <col:13> 'int' 1
|       `-CallExpr 0x12a124728 <line:48:3, col:16> '<dependent type>' contains-errors
|         |-DeclRefExpr 0x12a1246e8 <col:3> 'int ()' Function 0x12a124630 'js_pushnull' 'int ()'
|         `-RecoveryExpr 0x12a124708 <col:15> '<dependent type>' contains-errors lvalue
`-FunctionDecl 0x12a122a60 <line:30:13> col:13 implicit used strlen 'unsigned long (const char *)' extern
  |-ParmVarDecl 0x12a122b60 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x12a122b08 <<invalid sloc>> Implicit 902
