TranslationUnitDecl 0x12e855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x12e8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x12e855bd0 '__int128'
|-TypedefDecl 0x12e856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x12e855bf0 'unsigned __int128'
|-TypedefDecl 0x12e926230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12e926000 'struct __NSConstantString_tag'
|   `-Record 0x12e856580 '__NSConstantString_tag'
|-TypedefDecl 0x12e926298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x12e855d90 '__SVInt8_t'
|-TypedefDecl 0x12e926300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x12e855db0 '__SVInt16_t'
|-TypedefDecl 0x12e926368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x12e855dd0 '__SVInt32_t'
|-TypedefDecl 0x12e9263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x12e855df0 '__SVInt64_t'
|-TypedefDecl 0x12e926438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x12e855e10 '__SVUint8_t'
|-TypedefDecl 0x12e9264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x12e855e30 '__SVUint16_t'
|-TypedefDecl 0x12e926508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x12e855e50 '__SVUint32_t'
|-TypedefDecl 0x12e926570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x12e855e70 '__SVUint64_t'
|-TypedefDecl 0x12e9265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x12e855e90 '__SVFloat16_t'
|-TypedefDecl 0x12e926640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x12e855eb0 '__SVFloat32_t'
|-TypedefDecl 0x12e9266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x12e855ed0 '__SVFloat64_t'
|-TypedefDecl 0x12e926710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x12e855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12e926778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x12e855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12e9267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x12e855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12e926848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x12e855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12e9268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x12e855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12e926918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x12e855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12e926980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x12e855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12e9269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x12e855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12e926a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x12e855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12e926ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x12e856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12e926b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x12e856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12e926b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x12e856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12e926bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x12e856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12e926c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x12e856090 '__clang_svint8x3_t'
|-TypedefDecl 0x12e926cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x12e8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12e926d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x12e8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12e926d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x12e8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12e926df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x12e856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12e926e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x12e856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12e926ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x12e856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12e926f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x12e856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12e926f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x12e856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12e927800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x12e8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12e927868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x12e8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12e9278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x12e8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12e927938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x12e856210 '__clang_svint8x4_t'
|-TypedefDecl 0x12e9279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x12e856230 '__clang_svint16x4_t'
|-TypedefDecl 0x12e927a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x12e856250 '__clang_svint32x4_t'
|-TypedefDecl 0x12e927a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x12e856270 '__clang_svint64x4_t'
|-TypedefDecl 0x12e927ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x12e856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12e927b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x12e8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12e927ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x12e8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12e927c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x12e8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12e927c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x12e856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12e927ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x12e856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12e927d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x12e856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12e927db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x12e856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12e927e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x12e856390 '__SVBool_t'
|-TypedefDecl 0x12e927e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x12e8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12e927ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x12e8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12e927f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x12e8563f0 '__SVCount_t'
|-TypedefDecl 0x12e927ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12e927fb0 'char *'
|   `-BuiltinType 0x12e8556b0 'char'
|-TypedefDecl 0x12e928068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12e927fb0 'char *'
|   `-BuiltinType 0x12e8556b0 'char'
|-FunctionDecl 0x12f0082d8 <dataset_diviso_filec/func23667_vuln.c:1:1, line:59:1> line:1:13 invalid ldm_frag_add 'int (const int *, int, struct list_head *)' static
| |-ParmVarDecl 0x12e9280f0 <col:27, col:37> col:37 referenced invalid data 'const int *'
| |-ParmVarDecl 0x12e928170 <col:43, col:47> col:47 used size 'int'
| |-ParmVarDecl 0x12e928768 <col:53, col:71> col:71 used frags 'struct list_head *'
| `-CompoundStmt 0x12f00cbb8 <line:2:1, line:59:1>
|   |-DeclStmt 0x12f008588 <line:3:2, col:16>
|   | |-RecordDecl 0x12f008398 <col:2, col:9> col:9 struct frag
|   | `-VarDecl 0x12f008508 <col:2, col:15> col:15 used f 'struct frag *'
|   |-DeclStmt 0x12f008690 <line:4:2, col:24>
|   | `-VarDecl 0x12f008628 <col:2, col:20> col:20 used item 'struct list_head *'
|   |-DeclStmt 0x12f008848 <line:5:2, col:21>
|   | |-VarDecl 0x12f0086c0 <col:2, col:6> col:6 used rec 'int'
|   | |-VarDecl 0x12f008740 <col:2, col:11> col:11 used num 'int'
|   | `-VarDecl 0x12f0087c0 <col:2, col:16> col:16 used group 'int'
|   |-CallExpr 0x12f008aa0 <line:7:2, col:25> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x12f0089c0 <col:2> 'int ()' Function 0x12f008908 'BUG_ON' 'int ()'
|   | `-BinaryOperator 0x12f008a80 <col:10, col:20> 'int' contains-errors '||'
|   |   |-UnaryOperator 0x12f008a18 <col:10, col:11> '<dependent type>' contains-errors prefix '!' cannot overflow
|   |   | `-ImplicitCastExpr 0x12f008a00 <col:11> '<dependent type>' contains-errors <LValueToRValue>
|   |   |   `-RecoveryExpr 0x12f0089e0 <col:11> '<dependent type>' contains-errors lvalue
|   |   `-UnaryOperator 0x12f008a68 <col:19, col:20> 'int' prefix '!' cannot overflow
|   |     `-ImplicitCastExpr 0x12f008a50 <col:20> 'struct list_head *' <LValueToRValue>
|   |       `-DeclRefExpr 0x12f008a30 <col:20> 'struct list_head *' lvalue ParmVar 0x12e928768 'frags' 'struct list_head *'
|   |-IfStmt 0x12f008dd8 <line:9:2, line:12:2>
|   | |-BinaryOperator 0x12f008ba0 <line:9:6, col:17> 'int' contains-errors '<'
|   | | |-DeclRefExpr 0x12f008ac8 <col:6> 'int' lvalue ParmVar 0x12e928170 'size' 'int'
|   | | `-BinaryOperator 0x12f008b80 <col:13, col:17> '<dependent type>' contains-errors '*'
|   | |   |-IntegerLiteral 0x12f008ae8 <col:13> 'int' 2
|   | |   `-RecoveryExpr 0x12f008b60 <col:17> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x12f008dc0 <col:33, line:12:2>
|   |   `-CallExpr 0x12f008d68 <line:10:3, col:18> 'int'
|   |     |-ImplicitCastExpr 0x12f008d50 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x12f008ca0 <col:3> 'int ()' Function 0x12f008be8 'ldm_error' 'int ()'
|   |     `-ImplicitCastExpr 0x12f008d90 <col:13> 'char *' <ArrayToPointerDecay>
|   |       `-StringLiteral 0x12f008d00 <col:13> 'char[4]' lvalue "STR"
|   |-BinaryOperator 0x12f008fa0 <line:14:2, col:40> 'int' contains-errors '='
|   | |-DeclRefExpr 0x12f008df8 <col:2> 'int' lvalue Var 0x12f0087c0 'group' 'int'
|   | `-CallExpr 0x12f008f78 <col:10, col:40> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x12f008ef8 <col:10> 'int ()' Function 0x12f008e40 'get_unaligned_be32' 'int ()'
|   |   `-BinaryOperator 0x12f008f58 <col:29, col:36> '<dependent type>' contains-errors '+'
|   |     |-RecoveryExpr 0x12f008f18 <col:29> '<dependent type>' contains-errors lvalue
|   |     `-IntegerLiteral 0x12f008f38 <col:36> 'int' 8
|   |-BinaryOperator 0x12f009168 <line:15:2, col:40> 'int' contains-errors '='
|   | |-DeclRefExpr 0x12f008fc0 <col:2> 'int' lvalue Var 0x12f0086c0 'rec' 'int'
|   | `-CallExpr 0x12f009140 <col:10, col:40> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x12f0090c0 <col:10> 'int ()' Function 0x12f009008 'get_unaligned_be16' 'int ()'
|   |   `-BinaryOperator 0x12f009120 <col:29, col:36> '<dependent type>' contains-errors '+'
|   |     |-RecoveryExpr 0x12f0090e0 <col:29> '<dependent type>' contains-errors lvalue
|   |     `-IntegerLiteral 0x12f009100 <col:36> 'int' 12
|   |-BinaryOperator 0x12f00aa68 <line:16:2, col:40> 'int' contains-errors '='
|   | |-DeclRefExpr 0x12f009188 <col:2> 'int' lvalue Var 0x12f008740 'num' 'int'
|   | `-CallExpr 0x12f00aa40 <col:10, col:40> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x12f0091a8 <col:10> 'int ()' Function 0x12f009008 'get_unaligned_be16' 'int ()'
|   |   `-BinaryOperator 0x12f00aa20 <col:29, col:36> '<dependent type>' contains-errors '+'
|   |     |-RecoveryExpr 0x12f0091c8 <col:29> '<dependent type>' contains-errors lvalue
|   |     `-IntegerLiteral 0x12f00aa00 <col:36> 'int' 14
|   |-IfStmt 0x12f00ace0 <line:17:2, line:20:2>
|   | |-BinaryOperator 0x12f00abb8 <line:17:6, col:27> 'int' '||'
|   | | |-ParenExpr 0x12f00ab00 <col:6, col:14> 'int'
|   | | | `-BinaryOperator 0x12f00aae0 <col:7, col:13> 'int' '<'
|   | | |   |-ImplicitCastExpr 0x12f00aac8 <col:7> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x12f00aa88 <col:7> 'int' lvalue Var 0x12f008740 'num' 'int'
|   | | |   `-IntegerLiteral 0x12f00aaa8 <col:13> 'int' 1
|   | | `-ParenExpr 0x12f00ab98 <col:19, col:27> 'int'
|   | |   `-BinaryOperator 0x12f00ab78 <col:20, col:26> 'int' '>'
|   | |     |-ImplicitCastExpr 0x12f00ab60 <col:20> 'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x12f00ab20 <col:20> 'int' lvalue Var 0x12f008740 'num' 'int'
|   | |     `-IntegerLiteral 0x12f00ab40 <col:26> 'int' 4
|   | `-CompoundStmt 0x12f00acc8 <col:30, line:20:2>
|   |   `-CallExpr 0x12f00ac50 <line:18:3, col:24> 'int'
|   |     |-ImplicitCastExpr 0x12f00ac38 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x12f00abd8 <col:3> 'int ()' Function 0x12f008be8 'ldm_error' 'int ()'
|   |     |-ImplicitCastExpr 0x12f00ac80 <col:14> 'char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x12f00abf8 <col:14> 'char[4]' lvalue "STR"
|   |     `-ImplicitCastExpr 0x12f00ac98 <col:21> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x12f00ac18 <col:21> 'int' lvalue Var 0x12f008740 'num' 'int'
|   |-IfStmt 0x12f00aed8 <line:21:2, line:24:2>
|   | |-BinaryOperator 0x12f00ad70 <line:21:6, col:13> 'int' '>='
|   | | |-ImplicitCastExpr 0x12f00ad40 <col:6> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x12f00ad00 <col:6> 'int' lvalue Var 0x12f0086c0 'rec' 'int'
|   | | `-ImplicitCastExpr 0x12f00ad58 <col:13> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x12f00ad20 <col:13> 'int' lvalue Var 0x12f008740 'num' 'int'
|   | `-CompoundStmt 0x12f00aec0 <col:18, line:24:2>
|   |   `-CallExpr 0x12f00ae28 <line:22:3, col:28> 'int'
|   |     |-ImplicitCastExpr 0x12f00ae10 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x12f00ad90 <col:3> 'int ()' Function 0x12f008be8 'ldm_error' 'int ()'
|   |     |-ImplicitCastExpr 0x12f00ae60 <col:13> 'char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x12f00adb0 <col:13> 'char[4]' lvalue "STR"
|   |     |-ImplicitCastExpr 0x12f00ae78 <col:20> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x12f00add0 <col:20> 'int' lvalue Var 0x12f0086c0 'rec' 'int'
|   |     `-ImplicitCastExpr 0x12f00ae90 <col:25> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x12f00adf0 <col:25> 'int' lvalue Var 0x12f008740 'num' 'int'
|   |-CallExpr 0x12f00b050 <line:26:2, col:28> 'int'
|   | |-ImplicitCastExpr 0x12f00b038 <col:2> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x12f00afd8 <col:2> 'int ()' Function 0x12f00af20 'list_for_each' 'int ()'
|   | |-ImplicitCastExpr 0x12f00b080 <col:17> 'struct list_head *' <LValueToRValue>
|   | | `-DeclRefExpr 0x12f00aff8 <col:17> 'struct list_head *' lvalue Var 0x12f008628 'item' 'struct list_head *'
|   | `-ImplicitCastExpr 0x12f00b098 <col:23> 'struct list_head *' <LValueToRValue>
|   |   `-DeclRefExpr 0x12f00b018 <col:23> 'struct list_head *' lvalue ParmVar 0x12e928768 'frags' 'struct list_head *'
|   |-CompoundStmt 0x12f00b330 <col:30, line:30:2>
|   | `-IfStmt 0x12f00b310 <line:28:3, line:29:9>
|   |   |-BinaryOperator 0x12f00b288 <line:28:7, col:19> 'int' contains-errors '=='
|   |   | |-RecoveryExpr 0x12f00b240 <col:7, col:10> '<dependent type>' contains-errors lvalue
|   |   | | `-DeclRefExpr 0x12f00b208 <col:7> 'struct frag *' lvalue Var 0x12f008508 'f' 'struct frag *'
|   |   | `-DeclRefExpr 0x12f00b268 <col:19> 'int' lvalue Var 0x12f0087c0 'group' 'int'
|   |   `-GotoStmt 0x12f00b2f8 <line:29:4, col:9> 'found' 0x12f00b2a8
|   |-IfStmt 0x12f00b748 <line:33:2, line:36:2>
|   | |-UnaryOperator 0x12f00b5a0 <line:33:6, col:7> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x12f00b588 <col:7> 'struct frag *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x12f00b568 <col:7> 'struct frag *' lvalue Var 0x12f008508 'f' 'struct frag *'
|   | `-CompoundStmt 0x12f00b730 <col:10, line:36:2>
|   |   `-CallExpr 0x12f00b6f0 <line:34:3, col:18> 'int'
|   |     |-ImplicitCastExpr 0x12f00b6d8 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x12f00b698 <col:3> 'int ()' Function 0x12f00b5e0 'ldm_crit' 'int ()'
|   |     `-ImplicitCastExpr 0x12f00b718 <col:13> 'char *' <ArrayToPointerDecay>
|   |       `-StringLiteral 0x12f00b6b8 <col:13> 'char[4]' lvalue "STR"
|   |-BinaryOperator 0x12f00b7e8 <line:38:2, col:13> '<dependent type>' contains-errors '='
|   | |-RecoveryExpr 0x12f00b7a0 <col:2, col:5> '<dependent type>' contains-errors lvalue
|   | | `-DeclRefExpr 0x12f00b768 <col:2> 'struct frag *' lvalue Var 0x12f008508 'f' 'struct frag *'
|   | `-DeclRefExpr 0x12f00b7c8 <col:13> 'int' lvalue Var 0x12f0087c0 'group' 'int'
|   |-BinaryOperator 0x12f00b888 <line:39:2, col:13> '<dependent type>' contains-errors '='
|   | |-RecoveryExpr 0x12f00b840 <col:2, col:5> '<dependent type>' contains-errors lvalue
|   | | `-DeclRefExpr 0x12f00b808 <col:2> 'struct frag *' lvalue Var 0x12f008508 'f' 'struct frag *'
|   | `-DeclRefExpr 0x12f00b868 <col:13> 'int' lvalue Var 0x12f008740 'num' 'int'
|   |-BinaryOperator 0x12f00b928 <line:40:2, col:13> '<dependent type>' contains-errors '='
|   | |-RecoveryExpr 0x12f00b8e0 <col:2, col:5> '<dependent type>' contains-errors lvalue
|   | | `-DeclRefExpr 0x12f00b8a8 <col:2> 'struct frag *' lvalue Var 0x12f008508 'f' 'struct frag *'
|   | `-DeclRefExpr 0x12f00b908 <col:13> 'int' lvalue Var 0x12f0086c0 'rec' 'int'
|   |-BinaryOperator 0x12f00c078 <line:41:2, col:21> '<dependent type>' contains-errors '='
|   | |-RecoveryExpr 0x12f00b980 <col:2, col:5> '<dependent type>' contains-errors lvalue
|   | | `-DeclRefExpr 0x12f00b948 <col:2> 'struct frag *' lvalue Var 0x12f008508 'f' 'struct frag *'
|   | `-BinaryOperator 0x12f00c058 <col:13, col:21> 'int' '<<'
|   |   |-IntegerLiteral 0x12f00b9a8 <col:13> 'int' 255
|   |   `-ImplicitCastExpr 0x12f00c040 <col:21> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x12f00b9c8 <col:21> 'int' lvalue Var 0x12f008740 'num' 'int'
|   |-CallExpr 0x12f00c230 <line:43:2, col:32> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x12f00c178 <col:2> 'int ()' Function 0x12f00c0c0 'list_add_tail' 'int ()'
|   | |-UnaryOperator 0x12f00c1f8 <col:17, col:21> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | | `-RecoveryExpr 0x12f00c1d0 <col:18, col:21> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x12f00c198 <col:18> 'struct frag *' lvalue Var 0x12f008508 'f' 'struct frag *'
|   | `-DeclRefExpr 0x12f00c210 <col:27> 'struct list_head *' lvalue ParmVar 0x12e928768 'frags' 'struct list_head *'
|   |-LabelStmt 0x12f00c5b8 <line:44:1, line:49:2> 'found'
|   | `-IfStmt 0x12f00c598 <line:45:2, line:49:2>
|   |   |-BinaryOperator 0x12f00c3d0 <line:45:6, col:24> '<dependent type>' contains-errors '&'
|   |   | |-RecoveryExpr 0x12f00c298 <col:6, col:9> '<dependent type>' contains-errors lvalue
|   |   | | `-DeclRefExpr 0x12f00c260 <col:6> 'struct frag *' lvalue Var 0x12f008508 'f' 'struct frag *'
|   |   | `-ParenExpr 0x12f00c3b0 <col:15, col:24> 'int'
|   |   |   `-BinaryOperator 0x12f00c390 <col:16, col:21> 'int' '<<'
|   |   |     |-IntegerLiteral 0x12f00c2c0 <col:16> 'int' 1
|   |   |     `-ImplicitCastExpr 0x12f00c378 <col:21> 'int' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x12f00c2e0 <col:21> 'int' lvalue Var 0x12f0086c0 'rec' 'int'
|   |   `-CompoundStmt 0x12f00c578 <col:27, line:49:2>
|   |     |-CallExpr 0x12f00c468 <line:46:3, col:24> 'int'
|   |     | |-ImplicitCastExpr 0x12f00c450 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x12f00c3f0 <col:3> 'int ()' Function 0x12f008be8 'ldm_error' 'int ()'
|   |     | |-ImplicitCastExpr 0x12f00c498 <col:14> 'char *' <ArrayToPointerDecay>
|   |     | | `-StringLiteral 0x12f00c410 <col:14> 'char[4]' lvalue "STR"
|   |     | `-ImplicitCastExpr 0x12f00c4b0 <col:21> 'int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x12f00c430 <col:21> 'int' lvalue Var 0x12f0086c0 'rec' 'int'
|   |     `-CompoundAssignOperator 0x12f00c548 <line:47:3, col:13> '<dependent type>' contains-errors '&=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   |       |-RecoveryExpr 0x12f00c500 <col:3, col:6> '<dependent type>' contains-errors lvalue
|   |       | `-DeclRefExpr 0x12f00c4c8 <col:3> 'struct frag *' lvalue Var 0x12f008508 'f' 'struct frag *'
|   |       `-IntegerLiteral 0x12f00c528 <col:13> 'int' 127
|   `-CompoundAssignOperator 0x12f00c758 <line:51:2, col:21> '<dependent type>' contains-errors '|=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|     |-RecoveryExpr 0x12f00c610 <col:2, col:5> '<dependent type>' contains-errors lvalue
|     | `-DeclRefExpr 0x12f00c5d8 <col:2> 'struct frag *' lvalue Var 0x12f008508 'f' 'struct frag *'
|     `-ParenExpr 0x12f00c738 <col:12, col:21> 'int'
|       `-BinaryOperator 0x12f00c718 <col:13, col:18> 'int' '<<'
|         |-IntegerLiteral 0x12f00c638 <col:13> 'int' 1
|         `-ImplicitCastExpr 0x12f00c700 <col:18> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x12f00c658 <col:18> 'int' lvalue Var 0x12f0086c0 'rec' 'int'
`-FunctionDecl 0x12f00c868 <line:56:2> col:2 implicit used memcpy 'void *(void *, const void *, unsigned long)' extern
  |-ParmVarDecl 0x12f00c968 <<invalid sloc>> <invalid sloc> 'void *'
  |-ParmVarDecl 0x12f00c9d0 <<invalid sloc>> <invalid sloc> 'const void *'
  |-ParmVarDecl 0x12f00ca38 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x12f00c910 <<invalid sloc>> Implicit 882
