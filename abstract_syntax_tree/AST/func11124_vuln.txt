TranslationUnitDecl 0x145855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1458564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x145855bd0 '__int128'
|-TypedefDecl 0x145856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x145855bf0 'unsigned __int128'
|-TypedefDecl 0x145926230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x145926000 'struct __NSConstantString_tag'
|   `-Record 0x145856580 '__NSConstantString_tag'
|-TypedefDecl 0x145926298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x145855d90 '__SVInt8_t'
|-TypedefDecl 0x145926300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x145855db0 '__SVInt16_t'
|-TypedefDecl 0x145926368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x145855dd0 '__SVInt32_t'
|-TypedefDecl 0x1459263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x145855df0 '__SVInt64_t'
|-TypedefDecl 0x145926438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x145855e10 '__SVUint8_t'
|-TypedefDecl 0x1459264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x145855e30 '__SVUint16_t'
|-TypedefDecl 0x145926508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x145855e50 '__SVUint32_t'
|-TypedefDecl 0x145926570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x145855e70 '__SVUint64_t'
|-TypedefDecl 0x1459265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x145855e90 '__SVFloat16_t'
|-TypedefDecl 0x145926640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x145855eb0 '__SVFloat32_t'
|-TypedefDecl 0x1459266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x145855ed0 '__SVFloat64_t'
|-TypedefDecl 0x145926710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x145855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x145926778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x145855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1459267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x145855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x145926848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x145855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1459268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x145855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x145926918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x145855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x145926980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x145855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1459269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x145855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x145926a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x145855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x145926ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x145856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x145926b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x145856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x145926b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x145856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x145926bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x145856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x145926c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x145856090 '__clang_svint8x3_t'
|-TypedefDecl 0x145926cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1458560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x145926d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1458560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x145926d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1458560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x145926df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x145856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x145926e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x145856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x145926ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x145856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x145926f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x145856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x145926f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x145856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x145927800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1458561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x145927868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1458561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1459278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1458561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x145927938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x145856210 '__clang_svint8x4_t'
|-TypedefDecl 0x1459279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x145856230 '__clang_svint16x4_t'
|-TypedefDecl 0x145927a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x145856250 '__clang_svint32x4_t'
|-TypedefDecl 0x145927a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x145856270 '__clang_svint64x4_t'
|-TypedefDecl 0x145927ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x145856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x145927b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1458562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x145927ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1458562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x145927c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1458562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x145927c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x145856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x145927ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x145856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x145927d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x145856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x145927db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x145856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x145927e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x145856390 '__SVBool_t'
|-TypedefDecl 0x145927e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1458563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x145927ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1458563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x145927f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1458563f0 '__SVCount_t'
|-TypedefDecl 0x145927ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x145927fb0 'char *'
|   `-BuiltinType 0x1458556b0 'char'
|-TypedefDecl 0x145928068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x145927fb0 'char *'
|   `-BuiltinType 0x1458556b0 'char'
|-FunctionDecl 0x1459284f8 <dataset_diviso_filec/func11124_vuln.c:1:1, line:49:1> line:1:5 invalid dane_raw_tlsa 'int (int, int *, char *const *, const int *, int, int)'
| |-ParmVarDecl 0x1459280f0 <col:19, col:32> col:32 invalid s 'int'
| |-ParmVarDecl 0x1459281a8 <col:35, col:49> col:49 invalid r 'int *'
| |-ParmVarDecl 0x145928258 <col:52, col:64> col:64 used dane_data 'char *const *'
| |-ParmVarDecl 0x1459282d8 <col:75, col:86> col:86 used dane_data_len 'const int *'
| |-ParmVarDecl 0x145928358 <col:101, col:105> col:105 used secure 'int'
| |-ParmVarDecl 0x1459283d8 <col:113, col:117> col:117 used bogus 'int'
| `-CompoundStmt 0x145945f68 <line:2:1, line:49:1>
|   |-DeclStmt 0x145928650 <line:3:2, col:9>
|   | `-VarDecl 0x1459285e8 <col:2, col:6> col:6 used ret 'int'
|   |-DeclStmt 0x1459286e8 <line:4:2, col:16>
|   | `-VarDecl 0x145928680 <col:2, col:15> col:15 used i 'unsigned int'
|   |-IfStmt 0x145942248 <line:7:2, line:8:47>
|   | |-BinaryOperator 0x145942010 <line:7:6, col:12> 'int' contains-errors '=='
|   | | |-UnaryOperator 0x145941fd8 <col:6, col:7> '<dependent type>' contains-errors prefix '*' cannot overflow
|   | | | `-ImplicitCastExpr 0x145941fc0 <col:7> '<dependent type>' contains-errors <LValueToRValue>
|   | | |   `-RecoveryExpr 0x145941f08 <col:7> '<dependent type>' contains-errors lvalue
|   | | `-RecoveryExpr 0x145941ff0 <col:12> '<dependent type>' contains-errors lvalue
|   | `-ReturnStmt 0x145942238 <line:8:3, col:47>
|   |   `-CallExpr 0x145942210 <col:10, col:47> '<dependent type>' contains-errors
|   |     |-DeclRefExpr 0x145942190 <col:10> 'int ()' Function 0x1459420d8 'gnutls_assert_val' 'int ()'
|   |     `-RecoveryExpr 0x1459421f0 <col:28> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x1459422c0 <line:9:2, col:6> 'unsigned int' '='
|   | |-DeclRefExpr 0x145942268 <col:2> 'unsigned int' lvalue Var 0x145928680 'i' 'unsigned int'
|   | `-ImplicitCastExpr 0x1459422a8 <col:6> 'unsigned int' <IntegralCast>
|   |   `-IntegerLiteral 0x145942288 <col:6> 'int' 0
|   |-DoStmt 0x145945028 <line:10:2, line:26:30>
|   | |-CompoundStmt 0x145944e30 <line:10:5, line:26:2>
|   | | |-IfStmt 0x145942530 <line:12:3, line:16:3> has_else
|   | | | |-BinaryOperator 0x1459423a8 <line:12:7, col:26> 'int' '>'
|   | | | | |-ImplicitCastExpr 0x145942390 <col:7, col:22> 'int' <LValueToRValue>
|   | | | | | `-ArraySubscriptExpr 0x145942350 <col:7, col:22> 'const int' lvalue
|   | | | | |   |-ImplicitCastExpr 0x145942320 <col:7> 'const int *' <LValueToRValue>
|   | | | | |   | `-DeclRefExpr 0x1459422e0 <col:7> 'const int *' lvalue ParmVar 0x1459282d8 'dane_data_len' 'const int *'
|   | | | | |   `-ImplicitCastExpr 0x145942338 <col:21> 'unsigned int' <LValueToRValue>
|   | | | | |     `-DeclRefExpr 0x145942300 <col:21> 'unsigned int' lvalue Var 0x145928680 'i' 'unsigned int'
|   | | | | `-IntegerLiteral 0x145942370 <col:26> 'int' 3
|   | | | |-BinaryOperator 0x145942440 <line:13:4, col:10> 'int' contains-errors '='
|   | | | | |-DeclRefExpr 0x1459423c8 <col:4> 'int' lvalue Var 0x1459285e8 'ret' 'int'
|   | | | | `-RecoveryExpr 0x145942420 <col:10> '<dependent type>' contains-errors lvalue
|   | | | `-CompoundStmt 0x145942518 <line:14:8, line:16:3>
|   | | |   `-ReturnStmt 0x145942508 <line:15:4, col:57>
|   | | |     `-CallExpr 0x1459424e0 <col:11, col:57> '<dependent type>' contains-errors
|   | | |       |-DeclRefExpr 0x145942460 <col:11> 'int ()' Function 0x1459420d8 'gnutls_assert_val' 'int ()'
|   | | |       `-RecoveryExpr 0x1459424c0 <col:29> '<dependent type>' contains-errors lvalue
|   | | |-BinaryOperator 0x145942770 <line:18:3, col:34> '<dependent type>' contains-errors '='
|   | | | |-ArraySubscriptExpr 0x145942668 <col:3, col:16> '<dependent type>' contains-errors lvalue
|   | | | | |-ImplicitCastExpr 0x145942638 <col:3, col:9> '<dependent type>' contains-errors <LValueToRValue>
|   | | | | | `-CXXDependentScopeMemberExpr 0x1459425d0 <col:3, col:9> '<dependent type>' contains-errors lvalue ->usage
|   | | | | |   `-ParenExpr 0x1459425b0 <col:3, col:6> '<dependent type>' contains-errors
|   | | | | |     `-UnaryOperator 0x145942598 <col:4, col:5> '<dependent type>' contains-errors prefix '*' cannot overflow
|   | | | | |       `-ImplicitCastExpr 0x145942580 <col:5> '<dependent type>' contains-errors <LValueToRValue>
|   | | | | |         `-RecoveryExpr 0x145942560 <col:5> '<dependent type>' contains-errors lvalue
|   | | | | `-ImplicitCastExpr 0x145942650 <col:15> 'unsigned int' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x145942618 <col:15> 'unsigned int' lvalue Var 0x145928680 'i' 'unsigned int'
|   | | | `-ArraySubscriptExpr 0x145942750 <col:20, col:34> 'char' lvalue
|   | | |   |-ImplicitCastExpr 0x145942738 <col:20, col:31> 'char *' <LValueToRValue>
|   | | |   | `-ArraySubscriptExpr 0x1459426f8 <col:20, col:31> 'char *const' lvalue
|   | | |   |   |-ImplicitCastExpr 0x1459426c8 <col:20> 'char *const *' <LValueToRValue>
|   | | |   |   | `-DeclRefExpr 0x145942688 <col:20> 'char *const *' lvalue ParmVar 0x145928258 'dane_data' 'char *const *'
|   | | |   |   `-ImplicitCastExpr 0x1459426e0 <col:30> 'unsigned int' <LValueToRValue>
|   | | |   |     `-DeclRefExpr 0x1459426a8 <col:30> 'unsigned int' lvalue Var 0x145928680 'i' 'unsigned int'
|   | | |   `-IntegerLiteral 0x145942718 <col:33> 'int' 0
|   | | |-BinaryOperator 0x1459445a0 <line:19:3, col:33> '<dependent type>' contains-errors '='
|   | | | |-ArraySubscriptExpr 0x145944498 <col:3, col:15> '<dependent type>' contains-errors lvalue
|   | | | | |-ImplicitCastExpr 0x145944468 <col:3, col:9> '<dependent type>' contains-errors <LValueToRValue>
|   | | | | | `-CXXDependentScopeMemberExpr 0x145944400 <col:3, col:9> '<dependent type>' contains-errors lvalue ->type
|   | | | | |   `-ParenExpr 0x1459427e0 <col:3, col:6> '<dependent type>' contains-errors
|   | | | | |     `-UnaryOperator 0x1459427c8 <col:4, col:5> '<dependent type>' contains-errors prefix '*' cannot overflow
|   | | | | |       `-ImplicitCastExpr 0x1459427b0 <col:5> '<dependent type>' contains-errors <LValueToRValue>
|   | | | | |         `-RecoveryExpr 0x145942790 <col:5> '<dependent type>' contains-errors lvalue
|   | | | | `-ImplicitCastExpr 0x145944480 <col:14> 'unsigned int' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x145944448 <col:14> 'unsigned int' lvalue Var 0x145928680 'i' 'unsigned int'
|   | | | `-ArraySubscriptExpr 0x145944580 <col:19, col:33> 'char' lvalue
|   | | |   |-ImplicitCastExpr 0x145944568 <col:19, col:30> 'char *' <LValueToRValue>
|   | | |   | `-ArraySubscriptExpr 0x145944528 <col:19, col:30> 'char *const' lvalue
|   | | |   |   |-ImplicitCastExpr 0x1459444f8 <col:19> 'char *const *' <LValueToRValue>
|   | | |   |   | `-DeclRefExpr 0x1459444b8 <col:19> 'char *const *' lvalue ParmVar 0x145928258 'dane_data' 'char *const *'
|   | | |   |   `-ImplicitCastExpr 0x145944510 <col:29> 'unsigned int' <LValueToRValue>
|   | | |   |     `-DeclRefExpr 0x1459444d8 <col:29> 'unsigned int' lvalue Var 0x145928680 'i' 'unsigned int'
|   | | |   `-IntegerLiteral 0x145944548 <col:32> 'int' 1
|   | | |-BinaryOperator 0x1459447d0 <line:20:3, col:34> '<dependent type>' contains-errors '='
|   | | | |-ArraySubscriptExpr 0x1459446c8 <col:3, col:16> '<dependent type>' contains-errors lvalue
|   | | | | |-ImplicitCastExpr 0x145944698 <col:3, col:9> '<dependent type>' contains-errors <LValueToRValue>
|   | | | | | `-CXXDependentScopeMemberExpr 0x145944630 <col:3, col:9> '<dependent type>' contains-errors lvalue ->match
|   | | | | |   `-ParenExpr 0x145944610 <col:3, col:6> '<dependent type>' contains-errors
|   | | | | |     `-UnaryOperator 0x1459445f8 <col:4, col:5> '<dependent type>' contains-errors prefix '*' cannot overflow
|   | | | | |       `-ImplicitCastExpr 0x1459445e0 <col:5> '<dependent type>' contains-errors <LValueToRValue>
|   | | | | |         `-RecoveryExpr 0x1459445c0 <col:5> '<dependent type>' contains-errors lvalue
|   | | | | `-ImplicitCastExpr 0x1459446b0 <col:15> 'unsigned int' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x145944678 <col:15> 'unsigned int' lvalue Var 0x145928680 'i' 'unsigned int'
|   | | | `-ArraySubscriptExpr 0x1459447b0 <col:20, col:34> 'char' lvalue
|   | | |   |-ImplicitCastExpr 0x145944798 <col:20, col:31> 'char *' <LValueToRValue>
|   | | |   | `-ArraySubscriptExpr 0x145944758 <col:20, col:31> 'char *const' lvalue
|   | | |   |   |-ImplicitCastExpr 0x145944728 <col:20> 'char *const *' <LValueToRValue>
|   | | |   |   | `-DeclRefExpr 0x1459446e8 <col:20> 'char *const *' lvalue ParmVar 0x145928258 'dane_data' 'char *const *'
|   | | |   |   `-ImplicitCastExpr 0x145944740 <col:30> 'unsigned int' <LValueToRValue>
|   | | |   |     `-DeclRefExpr 0x145944708 <col:30> 'unsigned int' lvalue Var 0x145928680 'i' 'unsigned int'
|   | | |   `-IntegerLiteral 0x145944778 <col:33> 'int' 2
|   | | |-BinaryOperator 0x145944aa0 <line:21:3, col:46> '<dependent type>' contains-errors '='
|   | | | |-CXXDependentScopeMemberExpr 0x145944918 <col:3, col:17> '<dependent type>' contains-errors lvalue .data
|   | | | | `-ArraySubscriptExpr 0x1459448f8 <col:3, col:15> '<dependent type>' contains-errors lvalue
|   | | | |   |-ImplicitCastExpr 0x1459448c8 <col:3, col:9> '<dependent type>' contains-errors <LValueToRValue>
|   | | | |   | `-CXXDependentScopeMemberExpr 0x145944860 <col:3, col:9> '<dependent type>' contains-errors lvalue ->data
|   | | | |   |   `-ParenExpr 0x145944840 <col:3, col:6> '<dependent type>' contains-errors
|   | | | |   |     `-UnaryOperator 0x145944828 <col:4, col:5> '<dependent type>' contains-errors prefix '*' cannot overflow
|   | | | |   |       `-ImplicitCastExpr 0x145944810 <col:5> '<dependent type>' contains-errors <LValueToRValue>
|   | | | |   |         `-RecoveryExpr 0x1459447f0 <col:5> '<dependent type>' contains-errors lvalue
|   | | | |   `-ImplicitCastExpr 0x1459448e0 <col:14> 'unsigned int' <LValueToRValue>
|   | | | |     `-DeclRefExpr 0x1459448a8 <col:14> 'unsigned int' lvalue Var 0x145928680 'i' 'unsigned int'
|   | | | `-CStyleCastExpr 0x145944a78 <col:24, col:46> 'void *' <BitCast>
|   | | |   `-UnaryOperator 0x145944a48 <col:31, col:46> 'char *' prefix '&' cannot overflow
|   | | |     `-ArraySubscriptExpr 0x145944a28 <col:32, col:46> 'char' lvalue
|   | | |       |-ImplicitCastExpr 0x145944a10 <col:32, col:43> 'char *' <LValueToRValue>
|   | | |       | `-ArraySubscriptExpr 0x1459449d0 <col:32, col:43> 'char *const' lvalue
|   | | |       |   |-ImplicitCastExpr 0x1459449a0 <col:32> 'char *const *' <LValueToRValue>
|   | | |       |   | `-DeclRefExpr 0x145944960 <col:32> 'char *const *' lvalue ParmVar 0x145928258 'dane_data' 'char *const *'
|   | | |       |   `-ImplicitCastExpr 0x1459449b8 <col:42> 'unsigned int' <LValueToRValue>
|   | | |       |     `-DeclRefExpr 0x145944980 <col:42> 'unsigned int' lvalue Var 0x145928680 'i' 'unsigned int'
|   | | |       `-IntegerLiteral 0x1459449f0 <col:45> 'int' 3
|   | | |-BinaryOperator 0x145944d18 <line:22:3, col:43> '<dependent type>' contains-errors '='
|   | | | |-CXXDependentScopeMemberExpr 0x145944be8 <col:3, col:17> '<dependent type>' contains-errors lvalue .size
|   | | | | `-ArraySubscriptExpr 0x145944bc8 <col:3, col:15> '<dependent type>' contains-errors lvalue
|   | | | |   |-ImplicitCastExpr 0x145944b98 <col:3, col:9> '<dependent type>' contains-errors <LValueToRValue>
|   | | | |   | `-CXXDependentScopeMemberExpr 0x145944b30 <col:3, col:9> '<dependent type>' contains-errors lvalue ->data
|   | | | |   |   `-ParenExpr 0x145944b10 <col:3, col:6> '<dependent type>' contains-errors
|   | | | |   |     `-UnaryOperator 0x145944af8 <col:4, col:5> '<dependent type>' contains-errors prefix '*' cannot overflow
|   | | | |   |       `-ImplicitCastExpr 0x145944ae0 <col:5> '<dependent type>' contains-errors <LValueToRValue>
|   | | | |   |         `-RecoveryExpr 0x145944ac0 <col:5> '<dependent type>' contains-errors lvalue
|   | | | |   `-ImplicitCastExpr 0x145944bb0 <col:14> 'unsigned int' <LValueToRValue>
|   | | | |     `-DeclRefExpr 0x145944b78 <col:14> 'unsigned int' lvalue Var 0x145928680 'i' 'unsigned int'
|   | | | `-BinaryOperator 0x145944cf8 <col:24, col:43> 'int' '-'
|   | | |   |-ImplicitCastExpr 0x145944ce0 <col:24, col:39> 'int' <LValueToRValue>
|   | | |   | `-ArraySubscriptExpr 0x145944ca0 <col:24, col:39> 'const int' lvalue
|   | | |   |   |-ImplicitCastExpr 0x145944c70 <col:24> 'const int *' <LValueToRValue>
|   | | |   |   | `-DeclRefExpr 0x145944c30 <col:24> 'const int *' lvalue ParmVar 0x1459282d8 'dane_data_len' 'const int *'
|   | | |   |   `-ImplicitCastExpr 0x145944c88 <col:38> 'unsigned int' <LValueToRValue>
|   | | |   |     `-DeclRefExpr 0x145944c50 <col:38> 'unsigned int' lvalue Var 0x145928680 'i' 'unsigned int'
|   | | |   `-IntegerLiteral 0x145944cc0 <col:43> 'int' 3
|   | | |-UnaryOperator 0x145944d58 <line:23:3, col:4> 'unsigned int' postfix '++'
|   | | | `-DeclRefExpr 0x145944d38 <col:3> 'unsigned int' lvalue Var 0x145928680 'i' 'unsigned int'
|   | | `-IfStmt 0x145944e10 <line:24:17, line:25:19>
|   | |   |-BinaryOperator 0x145944de8 <line:24:21, col:25> 'int' contains-errors '>'
|   | |   | |-DeclRefExpr 0x145944d70 <col:21> 'unsigned int' lvalue Var 0x145928680 'i' 'unsigned int'
|   | |   | `-RecoveryExpr 0x145944dc8 <col:25> '<dependent type>' contains-errors lvalue
|   | |   `-BreakStmt 0x145944e08 <line:25:19>
|   | `-BinaryOperator 0x145945008 <line:26:10, col:26> 'int' contains-errors '!='
|   |   |-ArraySubscriptExpr 0x145944fc8 <col:10, col:21> 'char *const' lvalue
|   |   | |-ImplicitCastExpr 0x145944f98 <col:10> 'char *const *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x145944e80 <col:10> 'char *const *' lvalue ParmVar 0x145928258 'dane_data' 'char *const *'
|   |   | `-ImplicitCastExpr 0x145944fb0 <col:20> 'unsigned int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x145944ea0 <col:20> 'unsigned int' lvalue Var 0x145928680 'i' 'unsigned int'
|   |   `-RecoveryExpr 0x145944fe8 <col:26> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x145945120 <line:28:2, col:23> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x1459450b8 <col:2, col:8> '<dependent type>' contains-errors lvalue ->data_entries
|   | | `-ParenExpr 0x145945098 <col:2, col:5> '<dependent type>' contains-errors
|   | |   `-UnaryOperator 0x145945080 <col:3, col:4> '<dependent type>' contains-errors prefix '*' cannot overflow
|   | |     `-ImplicitCastExpr 0x145945068 <col:4> '<dependent type>' contains-errors <LValueToRValue>
|   | |       `-RecoveryExpr 0x145945048 <col:4> '<dependent type>' contains-errors lvalue
|   | `-DeclRefExpr 0x145945100 <col:23> 'unsigned int' lvalue Var 0x145928680 'i' 'unsigned int'
|   |-IfStmt 0x1459454f8 <line:30:2, line:35:2>
|   | |-RecoveryExpr 0x145945230 <line:30:6, col:40> '_Bool' contains-errors
|   | `-CompoundStmt 0x1459454e0 <col:48, line:35:2>
|   |   `-IfStmt 0x1459454b0 <line:31:3, line:34:48> has_else
|   |     |-ImplicitCastExpr 0x145945270 <line:31:7> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x145945250 <col:7> 'int' lvalue ParmVar 0x1459283d8 'bogus' 'int'
|   |     |-BinaryOperator 0x145945370 <line:32:4, col:53> 'int' contains-errors '='
|   |     | |-DeclRefExpr 0x145945288 <col:4> 'int' lvalue Var 0x1459285e8 'ret' 'int'
|   |     | `-CallExpr 0x145945348 <col:10, col:53> '<dependent type>' contains-errors
|   |     |   |-DeclRefExpr 0x1459452a8 <col:10> 'int ()' Function 0x1459420d8 'gnutls_assert_val' 'int ()'
|   |     |   `-RecoveryExpr 0x145945328 <col:28> '<dependent type>' contains-errors lvalue
|   |     `-BinaryOperator 0x145945490 <line:34:4, col:48> 'int' contains-errors '='
|   |       |-DeclRefExpr 0x145945390 <col:4> 'int' lvalue Var 0x1459285e8 'ret' 'int'
|   |       `-CallExpr 0x145945468 <col:10, col:48> '<dependent type>' contains-errors
|   |         |-DeclRefExpr 0x1459453b0 <col:10> 'int ()' Function 0x1459420d8 'gnutls_assert_val' 'int ()'
|   |         `-RecoveryExpr 0x145945448 <col:28> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x145945ef0 <line:38:2, line:46:9> has_else
|   | |-ImplicitCastExpr 0x145945538 <line:38:6> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x145945518 <col:6> 'int' lvalue ParmVar 0x145928358 'secure' 'int'
|   | |-CompoundStmt 0x1459457b0 <col:14, line:40:2>
|   | | `-BinaryOperator 0x145945790 <line:39:3, col:18> '<dependent type>' contains-errors '='
|   | |   |-CXXDependentScopeMemberExpr 0x145945728 <col:3, col:9> '<dependent type>' contains-errors lvalue ->status
|   | |   | `-ParenExpr 0x145945708 <col:3, col:6> '<dependent type>' contains-errors
|   | |   |   `-UnaryOperator 0x1459456f0 <col:4, col:5> '<dependent type>' contains-errors prefix '*' cannot overflow
|   | |   |     `-ImplicitCastExpr 0x1459456d8 <col:5> '<dependent type>' contains-errors <LValueToRValue>
|   | |   |       `-RecoveryExpr 0x145945550 <col:5> '<dependent type>' contains-errors lvalue
|   | |   `-RecoveryExpr 0x145945770 <col:18> '<dependent type>' contains-errors lvalue
|   | `-IfStmt 0x145945ec0 <line:40:9, line:46:9> has_else
|   |   |-ImplicitCastExpr 0x1459457e8 <line:40:13> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1459457c8 <col:13> 'int' lvalue ParmVar 0x1459283d8 'bogus' 'int'
|   |   |-CompoundStmt 0x145945bc8 <col:20, line:43:2>
|   |   | |-CallExpr 0x145945948 <line:41:10, col:24> 'int'
|   |   | | `-ImplicitCastExpr 0x145945930 <col:10> 'int (*)()' <FunctionToPointerDecay>
|   |   | |   `-DeclRefExpr 0x1459458e0 <col:10> 'int ()' Function 0x145945828 'gnutls_assert' 'int ()'
|   |   | `-BinaryOperator 0x145945ba8 <line:42:3, col:18> '<dependent type>' contains-errors '='
|   |   |   |-CXXDependentScopeMemberExpr 0x145945b40 <col:3, col:9> '<dependent type>' contains-errors lvalue ->status
|   |   |   | `-ParenExpr 0x145945b20 <col:3, col:6> '<dependent type>' contains-errors
|   |   |   |   `-UnaryOperator 0x145945b08 <col:4, col:5> '<dependent type>' contains-errors prefix '*' cannot overflow
|   |   |   |     `-ImplicitCastExpr 0x145945af0 <col:5> '<dependent type>' contains-errors <LValueToRValue>
|   |   |   |       `-RecoveryExpr 0x145945968 <col:5> '<dependent type>' contains-errors lvalue
|   |   |   `-RecoveryExpr 0x145945b88 <col:18> '<dependent type>' contains-errors lvalue
|   |   `-CompoundStmt 0x145945ea0 <line:43:9, line:46:9>
|   |     |-CallExpr 0x145945c20 <line:44:10, col:24> 'int'
|   |     | `-ImplicitCastExpr 0x145945c08 <col:10> 'int (*)()' <FunctionToPointerDecay>
|   |     |   `-DeclRefExpr 0x145945be8 <col:10> 'int ()' Function 0x145945828 'gnutls_assert' 'int ()'
|   |     `-BinaryOperator 0x145945e80 <line:45:10, col:25> '<dependent type>' contains-errors '='
|   |       |-CXXDependentScopeMemberExpr 0x145945e18 <col:10, col:16> '<dependent type>' contains-errors lvalue ->status
|   |       | `-ParenExpr 0x145945df8 <col:10, col:13> '<dependent type>' contains-errors
|   |       |   `-UnaryOperator 0x145945de0 <col:11, col:12> '<dependent type>' contains-errors prefix '*' cannot overflow
|   |       |     `-ImplicitCastExpr 0x145945dc8 <col:12> '<dependent type>' contains-errors <LValueToRValue>
|   |       |       `-RecoveryExpr 0x145945c40 <col:12> '<dependent type>' contains-errors lvalue
|   |       `-RecoveryExpr 0x145945e60 <col:25> '<dependent type>' contains-errors lvalue
|   `-ReturnStmt 0x145945f58 <line:48:2, col:9>
|     `-ImplicitCastExpr 0x145945f40 <col:9> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x145945f20 <col:9> 'int' lvalue Var 0x1459285e8 'ret' 'int'
`-FunctionDecl 0x145941bc0 <line:6:7> col:7 implicit used calloc 'void *(unsigned long, unsigned long)' extern
  |-ParmVarDecl 0x145941cc0 <<invalid sloc>> <invalid sloc> 'unsigned long'
  |-ParmVarDecl 0x145941d28 <<invalid sloc>> <invalid sloc> 'unsigned long'
  |-BuiltinAttr 0x145941c68 <<invalid sloc>> Implicit 868
  `-AllocSizeAttr 0x145941da0 <col:7> Implicit 1 2
