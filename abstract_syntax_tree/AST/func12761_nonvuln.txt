TranslationUnitDecl 0x124855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1248564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x124855bd0 '__int128'
|-TypedefDecl 0x124856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x124855bf0 'unsigned __int128'
|-TypedefDecl 0x124926a30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x124926800 'struct __NSConstantString_tag'
|   `-Record 0x124856580 '__NSConstantString_tag'
|-TypedefDecl 0x124926a98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x124855d90 '__SVInt8_t'
|-TypedefDecl 0x124926b00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x124855db0 '__SVInt16_t'
|-TypedefDecl 0x124926b68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x124855dd0 '__SVInt32_t'
|-TypedefDecl 0x124926bd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x124855df0 '__SVInt64_t'
|-TypedefDecl 0x124926c38 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x124855e10 '__SVUint8_t'
|-TypedefDecl 0x124926ca0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x124855e30 '__SVUint16_t'
|-TypedefDecl 0x124926d08 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x124855e50 '__SVUint32_t'
|-TypedefDecl 0x124926d70 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x124855e70 '__SVUint64_t'
|-TypedefDecl 0x124926dd8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x124855e90 '__SVFloat16_t'
|-TypedefDecl 0x124926e40 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x124855eb0 '__SVFloat32_t'
|-TypedefDecl 0x124926ea8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x124855ed0 '__SVFloat64_t'
|-TypedefDecl 0x124926f10 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x124855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x124926f78 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x124855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x124926fe0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x124855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x124927048 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x124855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1249270b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x124855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x124927118 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x124855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x124927180 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x124855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1249271e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x124855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x124927250 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x124855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x1249272b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x124856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x124927320 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x124856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x124927388 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x124856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x1249273f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x124856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x124927458 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x124856090 '__clang_svint8x3_t'
|-TypedefDecl 0x1249274c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1248560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x124927528 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1248560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x124927590 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1248560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x1249275f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x124856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x124927660 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x124856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x1249276c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x124856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x124927730 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x124856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x124927798 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x124856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x124928000 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1248561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x124928068 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1248561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1249280d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1248561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x124928138 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x124856210 '__clang_svint8x4_t'
|-TypedefDecl 0x1249281a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x124856230 '__clang_svint16x4_t'
|-TypedefDecl 0x124928208 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x124856250 '__clang_svint32x4_t'
|-TypedefDecl 0x124928270 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x124856270 '__clang_svint64x4_t'
|-TypedefDecl 0x1249282d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x124856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x124928340 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1248562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x1249283a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1248562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x124928410 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1248562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x124928478 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x124856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x1249284e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x124856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x124928548 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x124856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x1249285b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x124856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x124928618 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x124856390 '__SVBool_t'
|-TypedefDecl 0x124928680 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1248563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x1249286e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1248563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x124928750 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1248563f0 '__SVCount_t'
|-TypedefDecl 0x1249287f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1249287b0 'char *'
|   `-BuiltinType 0x1248556b0 'char'
|-TypedefDecl 0x124928868 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1249287b0 'char *'
|   `-BuiltinType 0x1248556b0 'char'
`-FunctionDecl 0x124928e18 <dataset_diviso_filec/func12761_nonvuln.c:1:1, line:66:1> line:1:12 invalid jas_image_render 'int (int *, float, float, float, float, int, int, short *)' static
  |-ParmVarDecl 0x124928928 <col:29, col:42> col:42 invalid image 'int *'
  |-ParmVarDecl 0x1249289a8 <col:49, col:55> col:55 used vtlx 'float'
  |-ParmVarDecl 0x124928a28 <col:61, col:67> col:67 used vtly 'float'
  |-ParmVarDecl 0x124928aa8 <line:2:3, col:9> col:9 used vsx 'float'
  |-ParmVarDecl 0x124928b28 <col:14, col:20> col:20 used vsy 'float'
  |-ParmVarDecl 0x124928ba8 <col:25, col:29> col:29 used vw 'int'
  |-ParmVarDecl 0x124928c28 <col:33, col:37> col:37 used vh 'int'
  |-ParmVarDecl 0x124928cd8 <col:41, col:50> col:50 used vdata 'short *'
  `-CompoundStmt 0x12500f898 <line:3:1, line:66:1>
    |-DeclStmt 0x124928f80 <line:4:2, col:7>
    | `-VarDecl 0x124928f18 <col:2, col:6> col:6 used i 'int'
    |-DeclStmt 0x125008868 <line:5:2, col:7>
    | `-VarDecl 0x125008800 <col:2, col:6> col:6 used j 'int'
    |-DeclStmt 0x125008900 <line:6:2, col:7>
    | `-VarDecl 0x125008898 <col:2, col:6> col:6 used k 'int'
    |-DeclStmt 0x125008998 <line:7:2, col:7>
    | `-VarDecl 0x125008930 <col:2, col:6> col:6 used x 'int'
    |-DeclStmt 0x125008a30 <line:8:2, col:7>
    | `-VarDecl 0x1250089c8 <col:2, col:6> col:6 used y 'int'
    |-DeclStmt 0x125008b60 <line:9:2, col:10>
    | `-VarDecl 0x125008af8 <col:2, col:9> col:6 used v 'int[3]'
    |-DeclStmt 0x125008bf8 <line:10:2, col:17>
    | `-VarDecl 0x125008b90 <col:2, col:11> col:11 used vdatap 'short *'
    |-DeclStmt 0x125008ce0 <line:11:2, col:16>
    | `-VarDecl 0x125008c78 <col:2, col:15> col:6 used cmptlut 'int[3]'
    |-DeclStmt 0x125008d78 <line:12:2, col:11>
    | `-VarDecl 0x125008d10 <col:2, col:6> col:6 used width 'int'
    |-DeclStmt 0x125008e10 <line:13:2, col:12>
    | `-VarDecl 0x125008da8 <col:2, col:6> col:6 used height 'int'
    |-DeclStmt 0x125008ea8 <line:14:2, col:8>
    | `-VarDecl 0x125008e40 <col:2, col:6> col:6 used hs 'int'
    |-DeclStmt 0x125008f40 <line:15:2, col:8>
    | `-VarDecl 0x125008ed8 <col:2, col:6> col:6 used vs 'int'
    |-DeclStmt 0x125008fd8 <line:16:2, col:9>
    | `-VarDecl 0x125008f70 <col:2, col:6> col:6 used tlx 'int'
    |-DeclStmt 0x125009070 <line:17:2, col:9>
    | `-VarDecl 0x125009008 <col:2, col:6> col:6 used tly 'int'
    |-IfStmt 0x12500bea8 <line:19:2, line:25:8>
    | |-RecoveryExpr 0x12500be20 <line:19:6, line:24:53> '_Bool' contains-errors
    | `-GotoStmt 0x12500be90 <line:25:3, col:8> 'error' 0x12500be40
    |-BinaryOperator 0x12500c0b0 <line:26:2, col:47> 'int' contains-errors '='
    | |-DeclRefExpr 0x12500bec8 <col:2> 'int' lvalue Var 0x125008d10 'width' 'int'
    | `-CallExpr 0x12500c080 <col:10, col:47> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x12500bfc8 <col:10> 'int ()' Function 0x12500bf10 'jas_image_cmptwidth' 'int ()'
    |   |-RecoveryExpr 0x12500bfe8 <col:30> '<dependent type>' contains-errors lvalue
    |   `-ArraySubscriptExpr 0x12500c060 <col:37, col:46> 'int' lvalue
    |     |-ImplicitCastExpr 0x12500c048 <col:37> 'int *' <ArrayToPointerDecay>
    |     | `-DeclRefExpr 0x12500c008 <col:37> 'int[3]' lvalue Var 0x125008c78 'cmptlut' 'int[3]'
    |     `-IntegerLiteral 0x12500c028 <col:45> 'int' 0
    |-BinaryOperator 0x12500c2b8 <line:27:2, col:49> 'int' contains-errors '='
    | |-DeclRefExpr 0x12500c0d0 <col:2> 'int' lvalue Var 0x125008da8 'height' 'int'
    | `-CallExpr 0x12500c288 <col:11, col:49> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x12500c1d0 <col:11> 'int ()' Function 0x12500c118 'jas_image_cmptheight' 'int ()'
    |   |-RecoveryExpr 0x12500c1f0 <col:32> '<dependent type>' contains-errors lvalue
    |   `-ArraySubscriptExpr 0x12500c268 <col:39, col:48> 'int' lvalue
    |     |-ImplicitCastExpr 0x12500c250 <col:39> 'int *' <ArrayToPointerDecay>
    |     | `-DeclRefExpr 0x12500c210 <col:39> 'int[3]' lvalue Var 0x125008c78 'cmptlut' 'int[3]'
    |     `-IntegerLiteral 0x12500c230 <col:47> 'int' 0
    |-BinaryOperator 0x12500c4c0 <line:28:2, col:43> 'int' contains-errors '='
    | |-DeclRefExpr 0x12500c2d8 <col:2> 'int' lvalue Var 0x125008f70 'tlx' 'int'
    | `-CallExpr 0x12500c490 <col:8, col:43> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x12500c3d8 <col:8> 'int ()' Function 0x12500c320 'jas_image_cmpttlx' 'int ()'
    |   |-RecoveryExpr 0x12500c3f8 <col:26> '<dependent type>' contains-errors lvalue
    |   `-ArraySubscriptExpr 0x12500c470 <col:33, col:42> 'int' lvalue
    |     |-ImplicitCastExpr 0x12500c458 <col:33> 'int *' <ArrayToPointerDecay>
    |     | `-DeclRefExpr 0x12500c418 <col:33> 'int[3]' lvalue Var 0x125008c78 'cmptlut' 'int[3]'
    |     `-IntegerLiteral 0x12500c438 <col:41> 'int' 0
    |-BinaryOperator 0x12500c6c8 <line:29:2, col:43> 'int' contains-errors '='
    | |-DeclRefExpr 0x12500c4e0 <col:2> 'int' lvalue Var 0x125009008 'tly' 'int'
    | `-CallExpr 0x12500c698 <col:8, col:43> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x12500c5e0 <col:8> 'int ()' Function 0x12500c528 'jas_image_cmpttly' 'int ()'
    |   |-RecoveryExpr 0x12500c600 <col:26> '<dependent type>' contains-errors lvalue
    |   `-ArraySubscriptExpr 0x12500c678 <col:33, col:42> 'int' lvalue
    |     |-ImplicitCastExpr 0x12500c660 <col:33> 'int *' <ArrayToPointerDecay>
    |     | `-DeclRefExpr 0x12500c620 <col:33> 'int[3]' lvalue Var 0x125008c78 'cmptlut' 'int[3]'
    |     `-IntegerLiteral 0x12500c640 <col:41> 'int' 0
    |-BinaryOperator 0x12500c8d0 <line:30:2, col:44> 'int' contains-errors '='
    | |-DeclRefExpr 0x12500c6e8 <col:2> 'int' lvalue Var 0x125008ed8 'vs' 'int'
    | `-CallExpr 0x12500c8a0 <col:7, col:44> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x12500c7e8 <col:7> 'int ()' Function 0x12500c730 'jas_image_cmptvstep' 'int ()'
    |   |-RecoveryExpr 0x12500c808 <col:27> '<dependent type>' contains-errors lvalue
    |   `-ArraySubscriptExpr 0x12500c880 <col:34, col:43> 'int' lvalue
    |     |-ImplicitCastExpr 0x12500c868 <col:34> 'int *' <ArrayToPointerDecay>
    |     | `-DeclRefExpr 0x12500c828 <col:34> 'int[3]' lvalue Var 0x125008c78 'cmptlut' 'int[3]'
    |     `-IntegerLiteral 0x12500c848 <col:42> 'int' 0
    |-BinaryOperator 0x12500cad8 <line:31:2, col:44> 'int' contains-errors '='
    | |-DeclRefExpr 0x12500c8f0 <col:2> 'int' lvalue Var 0x125008e40 'hs' 'int'
    | `-CallExpr 0x12500caa8 <col:7, col:44> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x12500c9f0 <col:7> 'int ()' Function 0x12500c938 'jas_image_cmpthstep' 'int ()'
    |   |-RecoveryExpr 0x12500ca10 <col:27> '<dependent type>' contains-errors lvalue
    |   `-ArraySubscriptExpr 0x12500ca88 <col:34, col:43> 'int' lvalue
    |     |-ImplicitCastExpr 0x12500ca70 <col:34> 'int *' <ArrayToPointerDecay>
    |     | `-DeclRefExpr 0x12500ca30 <col:34> 'int[3]' lvalue Var 0x125008c78 'cmptlut' 'int[3]'
    |     `-IntegerLiteral 0x12500ca50 <col:42> 'int' 0
    |-ForStmt 0x12500cf00 <line:32:2, line:36:2>
    | |-BinaryOperator 0x12500cb38 <line:32:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x12500caf8 <col:7> 'int' lvalue Var 0x124928f18 'i' 'int'
    | | `-IntegerLiteral 0x12500cb18 <col:11> 'int' 1
    | |-<<<NULL>>>
    | |-BinaryOperator 0x12500cbb0 <col:14, col:18> 'int' '<'
    | | |-ImplicitCastExpr 0x12500cb98 <col:14> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x12500cb58 <col:14> 'int' lvalue Var 0x124928f18 'i' 'int'
    | | `-IntegerLiteral 0x12500cb78 <col:18> 'int' 3
    | |-UnaryOperator 0x12500cbf0 <col:21, col:23> 'int' prefix '++'
    | | `-DeclRefExpr 0x12500cbd0 <col:23> 'int' lvalue Var 0x124928f18 'i' 'int'
    | `-CompoundStmt 0x12500cee8 <col:26, line:36:2>
    |   `-IfStmt 0x12500cec8 <line:33:3, line:35:9>
    |     |-BinaryOperator 0x12500ce90 <line:33:7, line:34:48> 'int' contains-errors '||'
    |     | |-BinaryOperator 0x12500cd28 <line:33:7, col:49> 'int' contains-errors '!='
    |     | | |-CallExpr 0x12500ccd8 <col:7, col:44> '<dependent type>' contains-errors
    |     | | | |-DeclRefExpr 0x12500cc08 <col:7> 'int ()' Function 0x12500bf10 'jas_image_cmptwidth' 'int ()'
    |     | | | |-RecoveryExpr 0x12500cc28 <col:27> '<dependent type>' contains-errors lvalue
    |     | | | `-ArraySubscriptExpr 0x12500ccb8 <col:34, col:43> 'int' lvalue
    |     | | |   |-ImplicitCastExpr 0x12500cc88 <col:34> 'int *' <ArrayToPointerDecay>
    |     | | |   | `-DeclRefExpr 0x12500cc48 <col:34> 'int[3]' lvalue Var 0x125008c78 'cmptlut' 'int[3]'
    |     | | |   `-ImplicitCastExpr 0x12500cca0 <col:42> 'int' <LValueToRValue>
    |     | | |     `-DeclRefExpr 0x12500cc68 <col:42> 'int' lvalue Var 0x124928f18 'i' 'int'
    |     | | `-DeclRefExpr 0x12500cd08 <col:49> 'int' lvalue Var 0x125008d10 'width' 'int'
    |     | `-BinaryOperator 0x12500ce70 <line:34:5, col:48> 'int' contains-errors '!='
    |     |   |-CallExpr 0x12500ce20 <col:5, col:43> '<dependent type>' contains-errors
    |     |   | |-DeclRefExpr 0x12500cd48 <col:5> 'int ()' Function 0x12500c118 'jas_image_cmptheight' 'int ()'
    |     |   | |-RecoveryExpr 0x12500cd68 <col:26> '<dependent type>' contains-errors lvalue
    |     |   | `-ArraySubscriptExpr 0x12500ce00 <col:33, col:42> 'int' lvalue
    |     |   |   |-ImplicitCastExpr 0x12500cdc8 <col:33> 'int *' <ArrayToPointerDecay>
    |     |   |   | `-DeclRefExpr 0x12500cd88 <col:33> 'int[3]' lvalue Var 0x125008c78 'cmptlut' 'int[3]'
    |     |   |   `-ImplicitCastExpr 0x12500cde0 <col:41> 'int' <LValueToRValue>
    |     |   |     `-DeclRefExpr 0x12500cda8 <col:41> 'int' lvalue Var 0x124928f18 'i' 'int'
    |     |   `-DeclRefExpr 0x12500ce50 <col:48> 'int' lvalue Var 0x125008da8 'height' 'int'
    |     `-GotoStmt 0x12500ceb0 <line:35:4, col:9> 'error' 0x12500be40
    |-ForStmt 0x12500f7c8 <line:37:2, line:62:2>
    | |-BinaryOperator 0x12500cf78 <line:37:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x12500cf38 <col:7> 'int' lvalue Var 0x124928f18 'i' 'int'
    | | `-IntegerLiteral 0x12500cf58 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x12500d008 <col:14, col:18> 'int' '<'
    | | |-ImplicitCastExpr 0x12500cfd8 <col:14> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x12500cf98 <col:14> 'int' lvalue Var 0x124928f18 'i' 'int'
    | | `-ImplicitCastExpr 0x12500cff0 <col:18> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x12500cfb8 <col:18> 'int' lvalue ParmVar 0x124928c28 'vh' 'int'
    | |-UnaryOperator 0x12500d048 <col:22, col:24> 'int' prefix '++'
    | | `-DeclRefExpr 0x12500d028 <col:24> 'int' lvalue Var 0x124928f18 'i' 'int'
    | `-CompoundStmt 0x12500f7a8 <col:27, line:62:2>
    |   |-BinaryOperator 0x12500d298 <line:38:3, col:42> 'short *' '='
    |   | |-DeclRefExpr 0x12500d060 <col:3> 'short *' lvalue Var 0x125008b90 'vdatap' 'short *'
    |   | `-UnaryOperator 0x12500d280 <col:12, col:42> 'short *' prefix '&' cannot overflow
    |   |   `-ArraySubscriptExpr 0x12500d260 <col:13, col:42> 'short' lvalue
    |   |     |-ImplicitCastExpr 0x12500d248 <col:13> 'short *' <LValueToRValue>
    |   |     | `-DeclRefExpr 0x12500d080 <col:13> 'short *' lvalue ParmVar 0x124928cd8 'vdata' 'short *'
    |   |     `-BinaryOperator 0x12500d228 <col:19, col:41> 'int' '*'
    |   |       |-ParenExpr 0x12500d170 <col:19, col:30> 'int'
    |   |       | `-BinaryOperator 0x12500d150 <col:20, col:29> 'int' '-'
    |   |       |   |-BinaryOperator 0x12500d0f8 <col:20, col:25> 'int' '-'
    |   |       |   | |-ImplicitCastExpr 0x12500d0e0 <col:20> 'int' <LValueToRValue>
    |   |       |   | | `-DeclRefExpr 0x12500d0a0 <col:20> 'int' lvalue ParmVar 0x124928c28 'vh' 'int'
    |   |       |   | `-IntegerLiteral 0x12500d0c0 <col:25> 'int' 1
    |   |       |   `-ImplicitCastExpr 0x12500d138 <col:29> 'int' <LValueToRValue>
    |   |       |     `-DeclRefExpr 0x12500d118 <col:29> 'int' lvalue Var 0x124928f18 'i' 'int'
    |   |       `-ParenExpr 0x12500d208 <col:34, col:41> 'int'
    |   |         `-BinaryOperator 0x12500d1e8 <col:35, col:39> 'int' '*'
    |   |           |-IntegerLiteral 0x12500d190 <col:35> 'int' 4
    |   |           `-ImplicitCastExpr 0x12500d1d0 <col:39> 'int' <LValueToRValue>
    |   |             `-DeclRefExpr 0x12500d1b0 <col:39> 'int' lvalue ParmVar 0x124928ba8 'vw' 'int'
    |   `-ForStmt 0x12500f770 <line:39:3, line:61:3>
    |     |-BinaryOperator 0x12500d2f8 <line:39:8, col:12> 'int' '='
    |     | |-DeclRefExpr 0x12500d2b8 <col:8> 'int' lvalue Var 0x125008800 'j' 'int'
    |     | `-IntegerLiteral 0x12500d2d8 <col:12> 'int' 0
    |     |-<<<NULL>>>
    |     |-BinaryOperator 0x12500d388 <col:15, col:19> 'int' '<'
    |     | |-ImplicitCastExpr 0x12500d358 <col:15> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x12500d318 <col:15> 'int' lvalue Var 0x125008800 'j' 'int'
    |     | `-ImplicitCastExpr 0x12500d370 <col:19> 'int' <LValueToRValue>
    |     |   `-DeclRefExpr 0x12500d338 <col:19> 'int' lvalue ParmVar 0x124928ba8 'vw' 'int'
    |     |-UnaryOperator 0x12500d3c8 <col:23, col:25> 'int' prefix '++'
    |     | `-DeclRefExpr 0x12500d3a8 <col:25> 'int' lvalue Var 0x125008800 'j' 'int'
    |     `-CompoundStmt 0x12500f728 <col:28, line:61:3>
    |       |-BinaryOperator 0x12500d6d8 <line:40:4, col:36> 'int' '='
    |       | |-DeclRefExpr 0x12500d3e0 <col:4> 'int' lvalue Var 0x125008930 'x' 'int'
    |       | `-CallExpr 0x12500d5e8 <col:8, col:36> 'int'
    |       |   |-ImplicitCastExpr 0x12500d5d0 <col:8> 'int (*)()' <FunctionToPointerDecay>
    |       |   | `-DeclRefExpr 0x12500d4e0 <col:8> 'int ()' Function 0x12500d428 'vctocc' 'int ()'
    |       |   |-ImplicitCastExpr 0x12500d630 <col:15> 'int' <LValueToRValue>
    |       |   | `-DeclRefExpr 0x12500d500 <col:15> 'int' lvalue Var 0x125008800 'j' 'int'
    |       |   |-ImplicitCastExpr 0x12500d648 <col:18> 'int' <LValueToRValue>
    |       |   | `-DeclRefExpr 0x12500d520 <col:18> 'int' lvalue Var 0x125008f70 'tlx' 'int'
    |       |   |-ImplicitCastExpr 0x12500d660 <col:23> 'int' <LValueToRValue>
    |       |   | `-DeclRefExpr 0x12500d540 <col:23> 'int' lvalue Var 0x125008e40 'hs' 'int'
    |       |   |-ImplicitCastExpr 0x12500d690 <col:27> 'double' <FloatingCast>
    |       |   | `-ImplicitCastExpr 0x12500d678 <col:27> 'float' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x12500d560 <col:27> 'float' lvalue ParmVar 0x1249289a8 'vtlx' 'float'
    |       |   `-ImplicitCastExpr 0x12500d6c0 <col:33> 'double' <FloatingCast>
    |       |     `-ImplicitCastExpr 0x12500d6a8 <col:33> 'float' <LValueToRValue>
    |       |       `-DeclRefExpr 0x12500d580 <col:33> 'float' lvalue ParmVar 0x124928aa8 'vsx' 'float'
    |       |-BinaryOperator 0x12500d8e0 <line:41:4, col:36> 'int' '='
    |       | |-DeclRefExpr 0x12500d6f8 <col:4> 'int' lvalue Var 0x1250089c8 'y' 'int'
    |       | `-CallExpr 0x12500d7f0 <col:8, col:36> 'int'
    |       |   |-ImplicitCastExpr 0x12500d7d8 <col:8> 'int (*)()' <FunctionToPointerDecay>
    |       |   | `-DeclRefExpr 0x12500d718 <col:8> 'int ()' Function 0x12500d428 'vctocc' 'int ()'
    |       |   |-ImplicitCastExpr 0x12500d838 <col:15> 'int' <LValueToRValue>
    |       |   | `-DeclRefExpr 0x12500d738 <col:15> 'int' lvalue Var 0x124928f18 'i' 'int'
    |       |   |-ImplicitCastExpr 0x12500d850 <col:18> 'int' <LValueToRValue>
    |       |   | `-DeclRefExpr 0x12500d758 <col:18> 'int' lvalue Var 0x125009008 'tly' 'int'
    |       |   |-ImplicitCastExpr 0x12500d868 <col:23> 'int' <LValueToRValue>
    |       |   | `-DeclRefExpr 0x12500d778 <col:23> 'int' lvalue Var 0x125008ed8 'vs' 'int'
    |       |   |-ImplicitCastExpr 0x12500d898 <col:27> 'double' <FloatingCast>
    |       |   | `-ImplicitCastExpr 0x12500d880 <col:27> 'float' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x12500d798 <col:27> 'float' lvalue ParmVar 0x124928a28 'vtly' 'float'
    |       |   `-ImplicitCastExpr 0x12500d8c8 <col:33> 'double' <FloatingCast>
    |       |     `-ImplicitCastExpr 0x12500d8b0 <col:33> 'float' <LValueToRValue>
    |       |       `-DeclRefExpr 0x12500d7b8 <col:33> 'float' lvalue ParmVar 0x124928b28 'vsy' 'float'
    |       |-IfStmt 0x12500f308 <line:42:4, line:56:4> has_else
    |       | |-BinaryOperator 0x12500db50 <line:42:8, col:45> 'int' '&&'
    |       | | |-BinaryOperator 0x12500daa0 <col:8, col:36> 'int' '&&'
    |       | | | |-BinaryOperator 0x12500da08 <col:8, col:22> 'int' '&&'
    |       | | | | |-BinaryOperator 0x12500d958 <col:8, col:13> 'int' '>='
    |       | | | | | |-ImplicitCastExpr 0x12500d940 <col:8> 'int' <LValueToRValue>
    |       | | | | | | `-DeclRefExpr 0x12500d900 <col:8> 'int' lvalue Var 0x125008930 'x' 'int'
    |       | | | | | `-IntegerLiteral 0x12500d920 <col:13> 'int' 0
    |       | | | | `-BinaryOperator 0x12500d9e8 <col:18, col:22> 'int' '<'
    |       | | | |   |-ImplicitCastExpr 0x12500d9b8 <col:18> 'int' <LValueToRValue>
    |       | | | |   | `-DeclRefExpr 0x12500d978 <col:18> 'int' lvalue Var 0x125008930 'x' 'int'
    |       | | | |   `-ImplicitCastExpr 0x12500d9d0 <col:22> 'int' <LValueToRValue>
    |       | | | |     `-DeclRefExpr 0x12500d998 <col:22> 'int' lvalue Var 0x125008d10 'width' 'int'
    |       | | | `-BinaryOperator 0x12500da80 <col:31, col:36> 'int' '>='
    |       | | |   |-ImplicitCastExpr 0x12500da68 <col:31> 'int' <LValueToRValue>
    |       | | |   | `-DeclRefExpr 0x12500da28 <col:31> 'int' lvalue Var 0x1250089c8 'y' 'int'
    |       | | |   `-IntegerLiteral 0x12500da48 <col:36> 'int' 0
    |       | | `-BinaryOperator 0x12500db30 <col:41, col:45> 'int' '<'
    |       | |   |-ImplicitCastExpr 0x12500db00 <col:41> 'int' <LValueToRValue>
    |       | |   | `-DeclRefExpr 0x12500dac0 <col:41> 'int' lvalue Var 0x1250089c8 'y' 'int'
    |       | |   `-ImplicitCastExpr 0x12500db18 <col:45> 'int' <LValueToRValue>
    |       | |     `-DeclRefExpr 0x12500dae0 <col:45> 'int' lvalue Var 0x125008da8 'height' 'int'
    |       | |-CompoundStmt 0x12500f0a0 <col:53, line:52:4>
    |       | | `-ForStmt 0x12500f068 <line:43:5, line:51:5>
    |       | |   |-BinaryOperator 0x12500dbb0 <line:43:10, col:14> 'int' '='
    |       | |   | |-DeclRefExpr 0x12500db70 <col:10> 'int' lvalue Var 0x125008898 'k' 'int'
    |       | |   | `-IntegerLiteral 0x12500db90 <col:14> 'int' 0
    |       | |   |-<<<NULL>>>
    |       | |   |-BinaryOperator 0x12500dc28 <col:17, col:21> 'int' '<'
    |       | |   | |-ImplicitCastExpr 0x12500dc10 <col:17> 'int' <LValueToRValue>
    |       | |   | | `-DeclRefExpr 0x12500dbd0 <col:17> 'int' lvalue Var 0x125008898 'k' 'int'
    |       | |   | `-IntegerLiteral 0x12500dbf0 <col:21> 'int' 3
    |       | |   |-UnaryOperator 0x12500dc68 <col:24, col:26> 'int' prefix '++'
    |       | |   | `-DeclRefExpr 0x12500dc48 <col:26> 'int' lvalue Var 0x125008898 'k' 'int'
    |       | |   `-CompoundStmt 0x12500f040 <col:29, line:51:5>
    |       | |     |-BinaryOperator 0x12500e950 <line:44:6, col:61> 'int' contains-errors '='
    |       | |     | |-ArraySubscriptExpr 0x12500dcf0 <col:6, col:9> 'int' lvalue
    |       | |     | | |-ImplicitCastExpr 0x12500dcc0 <col:6> 'int *' <ArrayToPointerDecay>
    |       | |     | | | `-DeclRefExpr 0x12500dc80 <col:6> 'int[3]' lvalue Var 0x125008af8 'v' 'int[3]'
    |       | |     | | `-ImplicitCastExpr 0x12500dcd8 <col:8> 'int' <LValueToRValue>
    |       | |     | |   `-DeclRefExpr 0x12500dca0 <col:8> 'int' lvalue Var 0x125008898 'k' 'int'
    |       | |     | `-CallExpr 0x12500e910 <col:13, col:61> '<dependent type>' contains-errors
    |       | |     |   |-DeclRefExpr 0x12500e800 <col:13> 'int ()' Function 0x12500dd38 'jas_image_readcmptsample' 'int ()'
    |       | |     |   |-RecoveryExpr 0x12500e820 <col:38> '<dependent type>' contains-errors lvalue
    |       | |     |   |-ArraySubscriptExpr 0x12500e8b0 <col:45, col:54> 'int' lvalue
    |       | |     |   | |-ImplicitCastExpr 0x12500e880 <col:45> 'int *' <ArrayToPointerDecay>
    |       | |     |   | | `-DeclRefExpr 0x12500e840 <col:45> 'int[3]' lvalue Var 0x125008c78 'cmptlut' 'int[3]'
    |       | |     |   | `-ImplicitCastExpr 0x12500e898 <col:53> 'int' <LValueToRValue>
    |       | |     |   |   `-DeclRefExpr 0x12500e860 <col:53> 'int' lvalue Var 0x125008898 'k' 'int'
    |       | |     |   |-DeclRefExpr 0x12500e8d0 <col:57> 'int' lvalue Var 0x125008930 'x' 'int'
    |       | |     |   `-DeclRefExpr 0x12500e8f0 <col:60> 'int' lvalue Var 0x1250089c8 'y' 'int'
    |       | |     |-CompoundAssignOperator 0x12500ec20 <line:45:6, col:56> 'int' contains-errors '<<=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    |       | |     | |-ArraySubscriptExpr 0x12500e9e0 <col:6, col:9> 'int' lvalue
    |       | |     | | |-ImplicitCastExpr 0x12500e9b0 <col:6> 'int *' <ArrayToPointerDecay>
    |       | |     | | | `-DeclRefExpr 0x12500e970 <col:6> 'int[3]' lvalue Var 0x125008af8 'v' 'int[3]'
    |       | |     | | `-ImplicitCastExpr 0x12500e9c8 <col:8> 'int' <LValueToRValue>
    |       | |     | |   `-DeclRefExpr 0x12500e990 <col:8> 'int' lvalue Var 0x125008898 'k' 'int'
    |       | |     | `-BinaryOperator 0x12500ec00 <col:15, col:56> '<dependent type>' contains-errors '-'
    |       | |     |   |-IntegerLiteral 0x12500ea00 <col:15> 'int' 16
    |       | |     |   `-CallExpr 0x12500ebd0 <col:20, col:56> '<dependent type>' contains-errors
    |       | |     |     |-DeclRefExpr 0x12500eb00 <col:20> 'int ()' Function 0x12500ea48 'jas_image_cmptprec' 'int ()'
    |       | |     |     |-RecoveryExpr 0x12500eb20 <col:39> '<dependent type>' contains-errors lvalue
    |       | |     |     `-ArraySubscriptExpr 0x12500ebb0 <col:46, col:55> 'int' lvalue
    |       | |     |       |-ImplicitCastExpr 0x12500eb80 <col:46> 'int *' <ArrayToPointerDecay>
    |       | |     |       | `-DeclRefExpr 0x12500eb40 <col:46> 'int[3]' lvalue Var 0x125008c78 'cmptlut' 'int[3]'
    |       | |     |       `-ImplicitCastExpr 0x12500eb98 <col:54> 'int' <LValueToRValue>
    |       | |     |         `-DeclRefExpr 0x12500eb60 <col:54> 'int' lvalue Var 0x125008898 'k' 'int'
    |       | |     `-IfStmt 0x12500f010 <line:46:6, line:50:6> has_else
    |       | |       |-BinaryOperator 0x12500ed18 <line:46:10, col:17> 'int' '<'
    |       | |       | |-ImplicitCastExpr 0x12500ed00 <col:10, col:13> 'int' <LValueToRValue>
    |       | |       | | `-ArraySubscriptExpr 0x12500ecc0 <col:10, col:13> 'int' lvalue
    |       | |       | |   |-ImplicitCastExpr 0x12500ec90 <col:10> 'int *' <ArrayToPointerDecay>
    |       | |       | |   | `-DeclRefExpr 0x12500ec50 <col:10> 'int[3]' lvalue Var 0x125008af8 'v' 'int[3]'
    |       | |       | |   `-ImplicitCastExpr 0x12500eca8 <col:12> 'int' <LValueToRValue>
    |       | |       | |     `-DeclRefExpr 0x12500ec70 <col:12> 'int' lvalue Var 0x125008898 'k' 'int'
    |       | |       | `-IntegerLiteral 0x12500ece0 <col:17> 'int' 0
    |       | |       |-CompoundStmt 0x12500ee08 <col:20, line:48:6>
    |       | |       | `-BinaryOperator 0x12500ede8 <line:47:7, col:14> 'int' '='
    |       | |       |   |-ArraySubscriptExpr 0x12500eda8 <col:7, col:10> 'int' lvalue
    |       | |       |   | |-ImplicitCastExpr 0x12500ed78 <col:7> 'int *' <ArrayToPointerDecay>
    |       | |       |   | | `-DeclRefExpr 0x12500ed38 <col:7> 'int[3]' lvalue Var 0x125008af8 'v' 'int[3]'
    |       | |       |   | `-ImplicitCastExpr 0x12500ed90 <col:9> 'int' <LValueToRValue>
    |       | |       |   |   `-DeclRefExpr 0x12500ed58 <col:9> 'int' lvalue Var 0x125008898 'k' 'int'
    |       | |       |   `-IntegerLiteral 0x12500edc8 <col:14> 'int' 0
    |       | |       `-IfStmt 0x12500eff0 <line:48:13, line:50:6>
    |       | |         |-BinaryOperator 0x12500eee8 <line:48:17, col:24> 'int' '>'
    |       | |         | |-ImplicitCastExpr 0x12500eed0 <col:17, col:20> 'int' <LValueToRValue>
    |       | |         | | `-ArraySubscriptExpr 0x12500ee90 <col:17, col:20> 'int' lvalue
    |       | |         | |   |-ImplicitCastExpr 0x12500ee60 <col:17> 'int *' <ArrayToPointerDecay>
    |       | |         | |   | `-DeclRefExpr 0x12500ee20 <col:17> 'int[3]' lvalue Var 0x125008af8 'v' 'int[3]'
    |       | |         | |   `-ImplicitCastExpr 0x12500ee78 <col:19> 'int' <LValueToRValue>
    |       | |         | |     `-DeclRefExpr 0x12500ee40 <col:19> 'int' lvalue Var 0x125008898 'k' 'int'
    |       | |         | `-IntegerLiteral 0x12500eeb0 <col:24> 'int' 65535
    |       | |         `-CompoundStmt 0x12500efd8 <col:31, line:50:6>
    |       | |           `-BinaryOperator 0x12500efb8 <line:49:7, col:14> 'int' '='
    |       | |             |-ArraySubscriptExpr 0x12500ef78 <col:7, col:10> 'int' lvalue
    |       | |             | |-ImplicitCastExpr 0x12500ef48 <col:7> 'int *' <ArrayToPointerDecay>
    |       | |             | | `-DeclRefExpr 0x12500ef08 <col:7> 'int[3]' lvalue Var 0x125008af8 'v' 'int[3]'
    |       | |             | `-ImplicitCastExpr 0x12500ef60 <col:9> 'int' <LValueToRValue>
    |       | |             |   `-DeclRefExpr 0x12500ef28 <col:9> 'int' lvalue Var 0x125008898 'k' 'int'
    |       | |             `-IntegerLiteral 0x12500ef98 <col:14> 'int' 65535
    |       | `-CompoundStmt 0x12500f2e0 <line:52:11, line:56:4>
    |       |   |-BinaryOperator 0x12500f150 <line:53:5, col:12> 'int' '='
    |       |   | |-ArraySubscriptExpr 0x12500f110 <col:5, col:8> 'int' lvalue
    |       |   | | |-ImplicitCastExpr 0x12500f0f8 <col:5> 'int *' <ArrayToPointerDecay>
    |       |   | | | `-DeclRefExpr 0x12500f0b8 <col:5> 'int[3]' lvalue Var 0x125008af8 'v' 'int[3]'
    |       |   | | `-IntegerLiteral 0x12500f0d8 <col:7> 'int' 0
    |       |   | `-IntegerLiteral 0x12500f130 <col:12> 'int' 0
    |       |   |-BinaryOperator 0x12500f208 <line:54:5, col:12> 'int' '='
    |       |   | |-ArraySubscriptExpr 0x12500f1c8 <col:5, col:8> 'int' lvalue
    |       |   | | |-ImplicitCastExpr 0x12500f1b0 <col:5> 'int *' <ArrayToPointerDecay>
    |       |   | | | `-DeclRefExpr 0x12500f170 <col:5> 'int[3]' lvalue Var 0x125008af8 'v' 'int[3]'
    |       |   | | `-IntegerLiteral 0x12500f190 <col:7> 'int' 1
    |       |   | `-IntegerLiteral 0x12500f1e8 <col:12> 'int' 0
    |       |   `-BinaryOperator 0x12500f2c0 <line:55:5, col:12> 'int' '='
    |       |     |-ArraySubscriptExpr 0x12500f280 <col:5, col:8> 'int' lvalue
    |       |     | |-ImplicitCastExpr 0x12500f268 <col:5> 'int *' <ArrayToPointerDecay>
    |       |     | | `-DeclRefExpr 0x12500f228 <col:5> 'int[3]' lvalue Var 0x125008af8 'v' 'int[3]'
    |       |     | `-IntegerLiteral 0x12500f248 <col:7> 'int' 2
    |       |     `-IntegerLiteral 0x12500f2a0 <col:12> 'int' 0
    |       |-BinaryOperator 0x12500f430 <line:57:4, col:19> 'short' '='
    |       | |-UnaryOperator 0x12500f370 <col:4, col:11> 'short' lvalue prefix '*' cannot overflow
    |       | | `-UnaryOperator 0x12500f358 <col:5, col:11> 'short *' postfix '++'
    |       | |   `-DeclRefExpr 0x12500f338 <col:5> 'short *' lvalue Var 0x125008b90 'vdatap' 'short *'
    |       | `-ImplicitCastExpr 0x12500f418 <col:16, col:19> 'short' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x12500f400 <col:16, col:19> 'int' <LValueToRValue>
    |       |     `-ArraySubscriptExpr 0x12500f3e0 <col:16, col:19> 'int' lvalue
    |       |       |-ImplicitCastExpr 0x12500f3c8 <col:16> 'int *' <ArrayToPointerDecay>
    |       |       | `-DeclRefExpr 0x12500f388 <col:16> 'int[3]' lvalue Var 0x125008af8 'v' 'int[3]'
    |       |       `-IntegerLiteral 0x12500f3a8 <col:18> 'int' 0
    |       |-BinaryOperator 0x12500f548 <line:58:4, col:19> 'short' '='
    |       | |-UnaryOperator 0x12500f488 <col:4, col:11> 'short' lvalue prefix '*' cannot overflow
    |       | | `-UnaryOperator 0x12500f470 <col:5, col:11> 'short *' postfix '++'
    |       | |   `-DeclRefExpr 0x12500f450 <col:5> 'short *' lvalue Var 0x125008b90 'vdatap' 'short *'
    |       | `-ImplicitCastExpr 0x12500f530 <col:16, col:19> 'short' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x12500f518 <col:16, col:19> 'int' <LValueToRValue>
    |       |     `-ArraySubscriptExpr 0x12500f4f8 <col:16, col:19> 'int' lvalue
    |       |       |-ImplicitCastExpr 0x12500f4e0 <col:16> 'int *' <ArrayToPointerDecay>
    |       |       | `-DeclRefExpr 0x12500f4a0 <col:16> 'int[3]' lvalue Var 0x125008af8 'v' 'int[3]'
    |       |       `-IntegerLiteral 0x12500f4c0 <col:18> 'int' 1
    |       |-BinaryOperator 0x12500f660 <line:59:4, col:19> 'short' '='
    |       | |-UnaryOperator 0x12500f5a0 <col:4, col:11> 'short' lvalue prefix '*' cannot overflow
    |       | | `-UnaryOperator 0x12500f588 <col:5, col:11> 'short *' postfix '++'
    |       | |   `-DeclRefExpr 0x12500f568 <col:5> 'short *' lvalue Var 0x125008b90 'vdatap' 'short *'
    |       | `-ImplicitCastExpr 0x12500f648 <col:16, col:19> 'short' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x12500f630 <col:16, col:19> 'int' <LValueToRValue>
    |       |     `-ArraySubscriptExpr 0x12500f610 <col:16, col:19> 'int' lvalue
    |       |       |-ImplicitCastExpr 0x12500f5f8 <col:16> 'int *' <ArrayToPointerDecay>
    |       |       | `-DeclRefExpr 0x12500f5b8 <col:16> 'int[3]' lvalue Var 0x125008af8 'v' 'int[3]'
    |       |       `-IntegerLiteral 0x12500f5d8 <col:18> 'int' 2
    |       `-BinaryOperator 0x12500f708 <line:60:4, col:16> 'short' '='
    |         |-UnaryOperator 0x12500f6b8 <col:4, col:11> 'short' lvalue prefix '*' cannot overflow
    |         | `-UnaryOperator 0x12500f6a0 <col:5, col:11> 'short *' postfix '++'
    |         |   `-DeclRefExpr 0x12500f680 <col:5> 'short *' lvalue Var 0x125008b90 'vdatap' 'short *'
    |         `-ImplicitCastExpr 0x12500f6f0 <col:16> 'short' <IntegralCast>
    |           `-IntegerLiteral 0x12500f6d0 <col:16> 'int' 0
    |-ReturnStmt 0x12500f820 <line:63:2, col:9>
    | `-IntegerLiteral 0x12500f800 <col:9> 'int' 0
    `-LabelStmt 0x12500f878 <line:64:1, line:65:10> 'error'
      `-ReturnStmt 0x12500f868 <col:2, col:10>
        `-UnaryOperator 0x12500f850 <col:9, col:10> 'int' prefix '-'
          `-IntegerLiteral 0x12500f830 <col:10> 'int' 1
