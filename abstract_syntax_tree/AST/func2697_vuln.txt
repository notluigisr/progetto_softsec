TranslationUnitDecl 0x127055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1270564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x127055bd0 '__int128'
|-TypedefDecl 0x127056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x127055bf0 'unsigned __int128'
|-TypedefDecl 0x12780be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12780bc00 'struct __NSConstantString_tag'
|   `-Record 0x127056580 '__NSConstantString_tag'
|-TypedefDecl 0x12780be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x127055d90 '__SVInt8_t'
|-TypedefDecl 0x12780bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x127055db0 '__SVInt16_t'
|-TypedefDecl 0x12780bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x127055dd0 '__SVInt32_t'
|-TypedefDecl 0x12780bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x127055df0 '__SVInt64_t'
|-TypedefDecl 0x12780c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x127055e10 '__SVUint8_t'
|-TypedefDecl 0x12780c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x127055e30 '__SVUint16_t'
|-TypedefDecl 0x12780c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x127055e50 '__SVUint32_t'
|-TypedefDecl 0x12780c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x127055e70 '__SVUint64_t'
|-TypedefDecl 0x12780c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x127055e90 '__SVFloat16_t'
|-TypedefDecl 0x12780c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x127055eb0 '__SVFloat32_t'
|-TypedefDecl 0x12780c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x127055ed0 '__SVFloat64_t'
|-TypedefDecl 0x12780c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x127055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12780c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x127055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12780c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x127055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12780c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x127055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12780c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x127055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12780c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x127055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12780c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x127055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12780c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x127055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12780c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x127055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12780c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x127056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12780c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x127056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12780c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x127056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12780c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x127056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12780c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x127056090 '__clang_svint8x3_t'
|-TypedefDecl 0x12780c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1270560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12780c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1270560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12780c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1270560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12780c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x127056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12780ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x127056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12780cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x127056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12780cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x127056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12780cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x127056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12780d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1270561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12780d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1270561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12780d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1270561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12780d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x127056210 '__clang_svint8x4_t'
|-TypedefDecl 0x12780d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x127056230 '__clang_svint16x4_t'
|-TypedefDecl 0x12780d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x127056250 '__clang_svint32x4_t'
|-TypedefDecl 0x12780d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x127056270 '__clang_svint64x4_t'
|-TypedefDecl 0x12780d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x127056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12780d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1270562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12780d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1270562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12780d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1270562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12780d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x127056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12780d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x127056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12780d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x127056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12780d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x127056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12780da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x127056390 '__SVBool_t'
|-TypedefDecl 0x12780da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1270563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12780dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1270563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12780db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1270563f0 '__SVCount_t'
|-TypedefDecl 0x12780dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12780dbb0 'char *'
|   `-BuiltinType 0x1270556b0 'char'
|-TypedefDecl 0x12780dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12780dbb0 'char *'
|   `-BuiltinType 0x1270556b0 'char'
|-FunctionDecl 0x12780df28 <dataset_diviso_filec/func2697_vuln.c:1:1, line:45:1> line:1:1 get_nondigit_option 'int (int, char *const *, int *)'
| |-ParmVarDecl 0x12780dcd8 <col:22, col:26> col:26 used argc 'int'
| |-ParmVarDecl 0x12780dd88 <col:32, col:45> col:45 used argv 'char *const *'
| |-ParmVarDecl 0x12780de38 <col:51, col:56> col:56 used default_context 'int *'
| `-CompoundStmt 0x12782b3b8 <line:2:1, line:45:1>
|   |-DeclStmt 0x12780e0e8 <line:3:3, col:36>
|   | `-VarDecl 0x12780e048 <col:3, col:35> col:14 used prev_digit_optind 'int' static cinit
|   |   `-UnaryOperator 0x12780e0d0 <col:34, col:35> 'int' prefix '-'
|   |     `-IntegerLiteral 0x12780e0b0 <col:35> 'int' 1
|   |-DeclStmt 0x12780e2a0 <line:4:3, col:40>
|   | |-VarDecl 0x12780e118 <col:3, col:7> col:7 used opt 'int'
|   | |-VarDecl 0x12780e198 <col:3, col:12> col:12 used this_digit_optind 'int'
|   | `-VarDecl 0x12780e218 <col:3, col:31> col:31 used was_digit 'int'
|   |-DeclStmt 0x12780e398 <line:5:3, col:46>
|   | `-VarDecl 0x12780e330 <col:3, col:8> col:8 invalid buf 'char'
|   |-DeclStmt 0x127826688 <line:6:3, col:16>
|   | `-VarDecl 0x127826600 <col:3, col:13> col:9 used p 'char *' cinit
|   |   `-RecoveryExpr 0x127826668 <col:13> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x1278266e0 <line:8:3, col:15> 'int' '='
|   | |-DeclRefExpr 0x1278266a0 <col:3> 'int' lvalue Var 0x12780e218 'was_digit' 'int'
|   | `-IntegerLiteral 0x1278266c0 <col:15> 'int' 0
|   |-BinaryOperator 0x127826778 <line:9:3, col:23> 'int' contains-errors '='
|   | |-DeclRefExpr 0x127826700 <col:3> 'int' lvalue Var 0x12780e198 'this_digit_optind' 'int'
|   | `-RecoveryExpr 0x127826758 <col:23> '<dependent type>' contains-errors lvalue
|   |-WhileStmt 0x12782b0a0 <line:10:3, line:37:5>
|   | |-BinaryOperator 0x127826d90 <line:10:10, line:12:31> 'int' contains-errors ','
|   | | |-BinaryOperator 0x127826ce0 <line:10:10, line:11:33> 'int' contains-errors '='
|   | | | |-DeclRefExpr 0x127826798 <line:10:10> 'int' lvalue Var 0x12780e118 'opt' 'int'
|   | | | `-CallExpr 0x127826c98 <col:16, line:11:33> '<dependent type>' contains-errors
|   | | |   |-DeclRefExpr 0x1278268d0 <line:10:16> 'int ()' Function 0x127826818 'getopt_long' 'int ()'
|   | | |   |-DeclRefExpr 0x1278268f0 <col:29> 'int' lvalue ParmVar 0x12780dcd8 'argc' 'int'
|   | | |   |-CStyleCastExpr 0x127826c10 <col:35, col:45> 'char **' <NoOp>
|   | | |   | `-ImplicitCastExpr 0x127826bf8 <col:45> 'char *const *' <LValueToRValue> part_of_explicit_cast
|   | | |   |   `-DeclRefExpr 0x127826910 <col:45> 'char *const *' lvalue ParmVar 0x12780dd88 'argv' 'char *const *'
|   | | |   |-RecoveryExpr 0x127826c38 <col:51> '<dependent type>' contains-errors lvalue
|   | | |   |-RecoveryExpr 0x127826c58 <col:66> '<dependent type>' contains-errors lvalue
|   | | |   `-RecoveryExpr 0x127826c78 <line:11:29> '<dependent type>' contains-errors lvalue
|   | | `-BinaryOperator 0x127826d70 <line:12:10, col:31> 'int' '&&'
|   | |   |-BinaryOperator 0x127826d18 <col:10, col:17> 'int' '<='
|   | |   | |-CharacterLiteral 0x127826a68 <col:10> 'int' 48
|   | |   | `-ImplicitCastExpr 0x127826d00 <col:17> 'int' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x127826a80 <col:17> 'int' lvalue Var 0x12780e118 'opt' 'int'
|   | |   `-BinaryOperator 0x127826d50 <col:24, col:31> 'int' '<='
|   | |     |-ImplicitCastExpr 0x127826d38 <col:24> 'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x127826ad8 <col:24> 'int' lvalue Var 0x12780e118 'opt' 'int'
|   | |     `-CharacterLiteral 0x127826af8 <col:31> 'int' 57
|   | `-CompoundStmt 0x12782b060 <line:13:5, line:37:5>
|   |   |-IfStmt 0x127827040 <line:14:7, line:23:9> has_else
|   |   | |-BinaryOperator 0x127826e90 <line:14:11, col:54> 'int' '||'
|   |   | | |-BinaryOperator 0x127826e20 <col:11, col:32> 'int' '!='
|   |   | | | |-ImplicitCastExpr 0x127826df0 <col:11> 'int' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x127826db0 <col:11> 'int' lvalue Var 0x12780e048 'prev_digit_optind' 'int'
|   |   | | | `-ImplicitCastExpr 0x127826e08 <col:32> 'int' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x127826dd0 <col:32> 'int' lvalue Var 0x12780e198 'this_digit_optind' 'int'
|   |   | | `-UnaryOperator 0x127826e78 <col:53, col:54> 'int' prefix '!' cannot overflow
|   |   | |   `-ImplicitCastExpr 0x127826e60 <col:54> 'int' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x127826e40 <col:54> 'int' lvalue Var 0x12780e218 'was_digit' 'int'
|   |   | |-CompoundStmt 0x127826f10 <line:15:9, line:18:9>
|   |   | | `-BinaryOperator 0x127826ef0 <line:17:11, col:15> 'char *' contains-errors '='
|   |   | |   |-DeclRefExpr 0x127826eb0 <col:11> 'char *' contains-errors lvalue Var 0x127826600 'p' 'char *'
|   |   | |   `-RecoveryExpr 0x127826ed0 <col:15> '<dependent type>' contains-errors lvalue
|   |   | `-CompoundStmt 0x127827028 <line:20:9, line:23:9>
|   |   |   `-CompoundAssignOperator 0x127826ff8 <line:22:11, col:26> 'char *' contains-errors '-=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   |   |     |-DeclRefExpr 0x127826f28 <col:11> 'char *' contains-errors lvalue Var 0x127826600 'p' 'char *'
|   |   |     `-BinaryOperator 0x127826fd8 <col:16, col:26> 'int' contains-errors '=='
|   |   |       |-ArraySubscriptExpr 0x127826fa0 <col:16, col:21> '<dependent type>' contains-errors lvalue
|   |   |       | |-ImplicitCastExpr 0x127826f88 <col:16> '<dependent type>' contains-errors <LValueToRValue>
|   |   |       | | `-RecoveryExpr 0x127826f48 <col:16> '<dependent type>' contains-errors lvalue
|   |   |       | `-IntegerLiteral 0x127826f68 <col:20> 'int' 0
|   |   |       `-CharacterLiteral 0x127826fc0 <col:26> 'int' 48
|   |   |-IfStmt 0x12782ae10 <line:25:7, line:31:9>
|   |   | |-BinaryOperator 0x127827150 <line:25:11, col:35> 'int' contains-errors '=='
|   |   | | |-DeclRefExpr 0x127827070 <col:11> 'char *' contains-errors lvalue Var 0x127826600 'p' 'char *'
|   |   | | `-BinaryOperator 0x127827130 <col:16, col:35> '<dependent type>' contains-errors '-'
|   |   | |   |-BinaryOperator 0x1278270f0 <col:16, col:29> '<dependent type>' contains-errors '+'
|   |   | |   | |-RecoveryExpr 0x127827090 <col:16> '<dependent type>' contains-errors lvalue
|   |   | |   | `-UnaryExprOrTypeTraitExpr 0x1278270d0 <col:22, col:29> 'unsigned long' contains-errors sizeof
|   |   | |   |   `-RecoveryExpr 0x1278270b0 <col:29> '<dependent type>' contains-errors lvalue
|   |   | |   `-IntegerLiteral 0x127827110 <col:35> 'int' 4
|   |   | `-CompoundStmt 0x12782ade8 <line:26:9, line:31:9>
|   |   |   |-CallExpr 0x12782acf8 <line:28:11, col:27> 'char *' contains-errors
|   |   |   | |-ImplicitCastExpr 0x12782ace0 <col:11> 'char *(*)(char *, const char *)' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x12782abe0 <col:11> 'char *(char *, const char *)' Function 0x12782aa00 'strcpy' 'char *(char *, const char *)'
|   |   |   | |-ImplicitCastExpr 0x12782ad28 <col:19> 'char *' contains-errors <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x12782ac00 <col:19> 'char *' contains-errors lvalue Var 0x127826600 'p' 'char *'
|   |   |   | `-ImplicitCastExpr 0x12782ad58 <col:22> 'const char *' <NoOp>
|   |   |   |   `-ImplicitCastExpr 0x12782ad40 <col:22> 'char *' <ArrayToPointerDecay>
|   |   |   |     `-StringLiteral 0x12782ac60 <col:22> 'char[4]' lvalue "STR"
|   |   |   |-CompoundAssignOperator 0x12782adb0 <line:29:11, col:16> 'char *' contains-errors '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
|   |   |   | |-DeclRefExpr 0x12782ad70 <col:11> 'char *' contains-errors lvalue Var 0x127826600 'p' 'char *'
|   |   |   | `-IntegerLiteral 0x12782ad90 <col:16> 'int' 3
|   |   |   `-BreakStmt 0x12782ade0 <line:30:11>
|   |   |-BinaryOperator 0x12782aed0 <line:32:7, col:14> 'char' contains-errors '='
|   |   | |-UnaryOperator 0x12782ae68 <col:7, col:9> 'char' contains-errors lvalue prefix '*' cannot overflow
|   |   | | `-UnaryOperator 0x12782ae50 <col:8, col:9> 'char *' contains-errors postfix '++'
|   |   | |   `-DeclRefExpr 0x12782ae30 <col:8> 'char *' contains-errors lvalue Var 0x127826600 'p' 'char *'
|   |   | `-ImplicitCastExpr 0x12782aeb8 <col:14> 'char' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x12782aea0 <col:14> 'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x12782ae80 <col:14> 'int' lvalue Var 0x12780e118 'opt' 'int'
|   |   |-BinaryOperator 0x12782af30 <line:34:7, col:19> 'int' '='
|   |   | |-DeclRefExpr 0x12782aef0 <col:7> 'int' lvalue Var 0x12780e218 'was_digit' 'int'
|   |   | `-IntegerLiteral 0x12782af10 <col:19> 'int' 1
|   |   |-BinaryOperator 0x12782afa8 <line:35:7, col:27> 'int' '='
|   |   | |-DeclRefExpr 0x12782af50 <col:7> 'int' lvalue Var 0x12780e048 'prev_digit_optind' 'int'
|   |   | `-ImplicitCastExpr 0x12782af90 <col:27> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x12782af70 <col:27> 'int' lvalue Var 0x12780e198 'this_digit_optind' 'int'
|   |   `-BinaryOperator 0x12782b040 <line:36:7, col:27> 'int' contains-errors '='
|   |     |-DeclRefExpr 0x12782afc8 <col:7> 'int' lvalue Var 0x12780e198 'this_digit_optind' 'int'
|   |     `-RecoveryExpr 0x12782b020 <col:27> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x12782b350 <line:38:3, line:42:5>
|   | |-BinaryOperator 0x12782b100 <line:38:7, col:12> 'int' contains-errors '!='
|   | | |-DeclRefExpr 0x12782b0c0 <col:7> 'char *' contains-errors lvalue Var 0x127826600 'p' 'char *'
|   | | `-RecoveryExpr 0x12782b0e0 <col:12> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x12782b330 <line:39:5, line:42:5>
|   |   |-BinaryOperator 0x12782b1a0 <line:40:7, col:12> 'char' contains-errors '='
|   |   | |-UnaryOperator 0x12782b158 <col:7, col:8> 'char' contains-errors lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x12782b140 <col:8> 'char *' contains-errors <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x12782b120 <col:8> 'char *' contains-errors lvalue Var 0x127826600 'p' 'char *'
|   |   | `-ImplicitCastExpr 0x12782b188 <col:12> 'char' <IntegralCast>
|   |   |   `-CharacterLiteral 0x12782b170 <col:12> 'int' 0
|   |   `-CallExpr 0x12782b300 <line:41:7, col:47> '<dependent type>' contains-errors
|   |     |-DeclRefExpr 0x12782b2a0 <col:7> 'int ()' Function 0x12782b1e8 'context_length_arg' 'int ()'
|   |     |-RecoveryExpr 0x12782b2c0 <col:27> '<dependent type>' contains-errors lvalue
|   |     `-DeclRefExpr 0x12782b2e0 <col:32> 'int *' lvalue ParmVar 0x12780de38 'default_context' 'int *'
|   `-ReturnStmt 0x12782b3a8 <line:44:3, col:10>
|     `-ImplicitCastExpr 0x12782b390 <col:10> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x12782b370 <col:10> 'int' lvalue Var 0x12780e118 'opt' 'int'
`-FunctionDecl 0x12782aa00 <line:28:11> col:11 implicit used strcpy 'char *(char *, const char *)' extern
  |-ParmVarDecl 0x12782ab00 <<invalid sloc>> <invalid sloc> 'char *'
  |-ParmVarDecl 0x12782ab68 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x12782aaa8 <<invalid sloc>> Implicit 885
