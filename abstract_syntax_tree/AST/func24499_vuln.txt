TranslationUnitDecl 0x14b055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x14b0564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x14b055bd0 '__int128'
|-TypedefDecl 0x14b056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x14b055bf0 'unsigned __int128'
|-TypedefDecl 0x14b80be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x14b80bc00 'struct __NSConstantString_tag'
|   `-Record 0x14b056580 '__NSConstantString_tag'
|-TypedefDecl 0x14b80be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x14b055d90 '__SVInt8_t'
|-TypedefDecl 0x14b80bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x14b055db0 '__SVInt16_t'
|-TypedefDecl 0x14b80bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x14b055dd0 '__SVInt32_t'
|-TypedefDecl 0x14b80bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x14b055df0 '__SVInt64_t'
|-TypedefDecl 0x14b80c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x14b055e10 '__SVUint8_t'
|-TypedefDecl 0x14b80c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x14b055e30 '__SVUint16_t'
|-TypedefDecl 0x14b80c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x14b055e50 '__SVUint32_t'
|-TypedefDecl 0x14b80c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x14b055e70 '__SVUint64_t'
|-TypedefDecl 0x14b80c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x14b055e90 '__SVFloat16_t'
|-TypedefDecl 0x14b80c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x14b055eb0 '__SVFloat32_t'
|-TypedefDecl 0x14b80c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x14b055ed0 '__SVFloat64_t'
|-TypedefDecl 0x14b80c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x14b055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x14b80c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x14b055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x14b80c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x14b055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x14b80c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x14b055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x14b80c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x14b055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x14b80c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x14b055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x14b80c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x14b055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x14b80c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x14b055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x14b80c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x14b055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x14b80c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x14b056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x14b80c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x14b056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x14b80c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x14b056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x14b80c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x14b056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x14b80c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x14b056090 '__clang_svint8x3_t'
|-TypedefDecl 0x14b80c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x14b0560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x14b80c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x14b0560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x14b80c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x14b0560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x14b80c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x14b056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x14b80ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x14b056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x14b80cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x14b056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x14b80cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x14b056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x14b80cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x14b056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x14b80d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x14b0561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x14b80d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x14b0561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x14b80d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x14b0561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x14b80d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x14b056210 '__clang_svint8x4_t'
|-TypedefDecl 0x14b80d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x14b056230 '__clang_svint16x4_t'
|-TypedefDecl 0x14b80d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x14b056250 '__clang_svint32x4_t'
|-TypedefDecl 0x14b80d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x14b056270 '__clang_svint64x4_t'
|-TypedefDecl 0x14b80d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x14b056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x14b80d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x14b0562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x14b80d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x14b0562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x14b80d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x14b0562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x14b80d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x14b056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x14b80d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x14b056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x14b80d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x14b056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x14b80d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x14b056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x14b80da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x14b056390 '__SVBool_t'
|-TypedefDecl 0x14b80da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x14b0563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x14b80dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x14b0563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x14b80db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x14b0563f0 '__SVCount_t'
|-TypedefDecl 0x14b80dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x14b80dbb0 'char *'
|   `-BuiltinType 0x14b0556b0 'char'
|-TypedefDecl 0x14b80dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x14b80dbb0 'char *'
|   `-BuiltinType 0x14b0556b0 'char'
|-FunctionDecl 0x14b80de30 <dataset_diviso_filec/func24499_vuln.c:1:1, line:80:1> line:1:13 parse_extra_args 'void (char *, int)' static
| |-ParmVarDecl 0x14b80dcd8 <col:30, col:36> col:36 used extra_args 'char *'
| |-ParmVarDecl 0x14b80dd58 <col:48, col:52> col:52 used buflen 'int'
| `-CompoundStmt 0x14b125e70 <line:2:1, line:80:1>
|   |-DeclStmt 0x14b80dfb0 <line:3:2, col:11>
|   | `-VarDecl 0x14b80df48 <col:2, col:8> col:8 used val 'char *'
|   |-DeclStmt 0x14b80e048 <line:4:2, col:12>
|   | `-VarDecl 0x14b80dfe0 <col:2, col:6> col:6 used vallen 'int'
|   |-DeclStmt 0x14b80e170 <line:5:2, col:33>
|   | `-VarDecl 0x14b80e078 <col:2, col:27> col:8 used end 'char *' cinit
|   |   `-BinaryOperator 0x14b80e150 <col:14, col:27> 'char *' '+'
|   |     |-ImplicitCastExpr 0x14b80e120 <col:14> 'char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x14b80e0e0 <col:14> 'char *' lvalue ParmVar 0x14b80dcd8 'extra_args' 'char *'
|   |     `-ImplicitCastExpr 0x14b80e138 <col:27> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x14b80e100 <col:27> 'int' lvalue ParmVar 0x14b80dd58 'buflen' 'int'
|   |-WhileStmt 0x14b1238c8 <line:7:2, line:29:2>
|   | |-BinaryOperator 0x14b80e298 <line:7:9, col:30> 'int' '&&'
|   | | |-BinaryOperator 0x14b80e1f8 <col:9, col:22> 'int' '<'
|   | | | |-ImplicitCastExpr 0x14b80e1c8 <col:9> 'char *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x14b80e188 <col:9> 'char *' lvalue ParmVar 0x14b80dcd8 'extra_args' 'char *'
|   | | | `-ImplicitCastExpr 0x14b80e1e0 <col:22> 'char *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x14b80e1a8 <col:22> 'char *' lvalue Var 0x14b80e078 'end' 'char *'
|   | | `-ImplicitCastExpr 0x14b80e280 <col:29, col:30> 'int' <IntegralCast>
|   | |   `-ImplicitCastExpr 0x14b80e268 <col:29, col:30> 'char' <LValueToRValue>
|   | |     `-UnaryOperator 0x14b80e250 <col:29, col:30> 'char' lvalue prefix '*' cannot overflow
|   | |       `-ImplicitCastExpr 0x14b80e238 <col:30> 'char *' <LValueToRValue>
|   | |         `-DeclRefExpr 0x14b80e218 <col:30> 'char *' lvalue ParmVar 0x14b80dcd8 'extra_args' 'char *'
|   | `-CompoundStmt 0x14b1238b0 <col:42, line:29:2>
|   |   `-IfStmt 0x14b123890 <line:9:3, line:28:3>
|   |     |-BinaryOperator 0x14b8281e8 <line:9:7, col:44> 'int' '=='
|   |     | |-CallExpr 0x14b828118 <col:7, col:39> 'int'
|   |     | | |-ImplicitCastExpr 0x14b828100 <col:7> 'int (*)(const char *, const char *, unsigned long)' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x14b827fe0 <col:7> 'int (const char *, const char *, unsigned long)' Function 0x14b827d90 'strncasecmp' 'int (const char *, const char *, unsigned long)'
|   |     | | |-ImplicitCastExpr 0x14b828168 <col:19> 'const char *' <NoOp>
|   |     | | | `-ImplicitCastExpr 0x14b828150 <col:19> 'char *' <ArrayToPointerDecay>
|   |     | | |   `-StringLiteral 0x14b828040 <col:19> 'char[4]' lvalue "STR"
|   |     | | |-ImplicitCastExpr 0x14b828198 <col:26> 'const char *' <NoOp>
|   |     | | | `-ImplicitCastExpr 0x14b828180 <col:26> 'char *' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x14b828060 <col:26> 'char *' lvalue ParmVar 0x14b80dcd8 'extra_args' 'char *'
|   |     | | `-ImplicitCastExpr 0x14b8281b0 <col:38> 'unsigned long' <IntegralCast>
|   |     | |   `-IntegerLiteral 0x14b828080 <col:38> 'int' 5
|   |     | `-IntegerLiteral 0x14b8281c8 <col:44> 'int' 0
|   |     `-CompoundStmt 0x14b123860 <col:47, line:28:3>
|   |       |-BinaryOperator 0x14b8282a0 <line:10:4, col:23> 'char *' '='
|   |       | |-DeclRefExpr 0x14b828208 <col:4> 'char *' lvalue Var 0x14b80df48 'val' 'char *'
|   |       | `-BinaryOperator 0x14b828280 <col:10, col:23> 'char *' '+'
|   |       |   |-ImplicitCastExpr 0x14b828268 <col:10> 'char *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x14b828228 <col:10> 'char *' lvalue ParmVar 0x14b80dcd8 'extra_args' 'char *'
|   |       |   `-IntegerLiteral 0x14b828248 <col:23> 'int' 5
|   |       |-BinaryOperator 0x14b8285f0 <line:11:4, col:27> 'int' '='
|   |       | |-DeclRefExpr 0x14b8282c0 <col:4> 'int' lvalue Var 0x14b80dfe0 'vallen' 'int'
|   |       | `-ImplicitCastExpr 0x14b8285d8 <col:13, col:27> 'int' <IntegralCast>
|   |       |   `-BinaryOperator 0x14b8285b8 <col:13, col:27> 'unsigned long' '+'
|   |       |     |-CallExpr 0x14b828528 <col:13, col:23> 'unsigned long'
|   |       |     | |-ImplicitCastExpr 0x14b828510 <col:13> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |       |     | | `-DeclRefExpr 0x14b828488 <col:13> 'unsigned long (const char *)' Function 0x14b828318 'strlen' 'unsigned long (const char *)'
|   |       |     | `-ImplicitCastExpr 0x14b828568 <col:20> 'const char *' <NoOp>
|   |       |     |   `-ImplicitCastExpr 0x14b828550 <col:20> 'char *' <LValueToRValue>
|   |       |     |     `-DeclRefExpr 0x14b8284a8 <col:20> 'char *' lvalue Var 0x14b80df48 'val' 'char *'
|   |       |     `-ImplicitCastExpr 0x14b8285a0 <col:27> 'unsigned long' <IntegralCast>
|   |       |       `-IntegerLiteral 0x14b828580 <col:27> 'int' 1
|   |       |-IfStmt 0x14b123770 <line:12:4, line:24:4>
|   |       | |-ImplicitCastExpr 0x14b828660 <line:12:8, col:9> 'char' <LValueToRValue>
|   |       | | `-UnaryOperator 0x14b828648 <col:8, col:9> 'char' lvalue prefix '*' cannot overflow
|   |       | |   `-ImplicitCastExpr 0x14b828630 <col:9> 'char *' <LValueToRValue>
|   |       | |     `-DeclRefExpr 0x14b828610 <col:9> 'char *' lvalue Var 0x14b80df48 'val' 'char *'
|   |       | `-CompoundStmt 0x14b123740 <col:14, line:24:4>
|   |       |   |-DeclStmt 0x14b828730 <line:14:5, col:21>
|   |       |   | `-VarDecl 0x14b828690 <col:5, col:18> col:11 used host 'char *' cinit
|   |       |   |   `-ImplicitCastExpr 0x14b828718 <col:18> 'char *' <LValueToRValue>
|   |       |   |     `-DeclRefExpr 0x14b8286f8 <col:18> 'char *' lvalue Var 0x14b80df48 'val' 'char *'
|   |       |   |-DeclStmt 0x14b122f18 <line:15:5, col:36>
|   |       |   | `-VarDecl 0x14b828760 <col:5, col:35> col:11 used port 'char *' cinit
|   |       |   |   `-CallExpr 0x14b122eb8 <col:18, col:35> 'char *'
|   |       |   |     |-ImplicitCastExpr 0x14b122ea0 <col:18> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   |       |   |     | `-DeclRefExpr 0x14b122e00 <col:18> 'char *(const char *, int)' Function 0x14b828810 'strrchr' 'char *(const char *, int)'
|   |       |   |     |-ImplicitCastExpr 0x14b122f00 <col:26> 'const char *' <NoOp>
|   |       |   |     | `-ImplicitCastExpr 0x14b122ee8 <col:26> 'char *' <LValueToRValue>
|   |       |   |     |   `-DeclRefExpr 0x14b122e20 <col:26> 'char *' lvalue Var 0x14b828690 'host' 'char *'
|   |       |   |     `-CharacterLiteral 0x14b122e40 <col:32> 'int' 58
|   |       |   |-IfStmt 0x14b1234d0 <line:16:5, line:21:5>
|   |       |   | |-ImplicitCastExpr 0x14b122f50 <line:16:9> 'char *' <LValueToRValue>
|   |       |   | | `-DeclRefExpr 0x14b122f30 <col:9> 'char *' lvalue Var 0x14b828760 'port' 'char *'
|   |       |   | `-CompoundStmt 0x14b1234a8 <col:15, line:21:5>
|   |       |   |   |-BinaryOperator 0x14b122ff0 <line:17:6, col:14> 'char' '='
|   |       |   |   | |-UnaryOperator 0x14b122fa0 <col:6, col:7> 'char' lvalue prefix '*' cannot overflow
|   |       |   |   | | `-ImplicitCastExpr 0x14b122f88 <col:7> 'char *' <LValueToRValue>
|   |       |   |   | |   `-DeclRefExpr 0x14b122f68 <col:7> 'char *' lvalue Var 0x14b828760 'port' 'char *'
|   |       |   |   | `-ImplicitCastExpr 0x14b122fd8 <col:14> 'char' <IntegralCast>
|   |       |   |   |   `-IntegerLiteral 0x14b122fb8 <col:14> 'int' 0
|   |       |   |   |-UnaryOperator 0x14b123030 <line:18:6, col:10> 'char *' postfix '++'
|   |       |   |   | `-DeclRefExpr 0x14b123010 <col:6> 'char *' lvalue Var 0x14b828760 'port' 'char *'
|   |       |   |   `-CallExpr 0x14b1232a8 <line:19:6, col:19> '<dependent type>' contains-errors
|   |       |   |     |-DeclRefExpr 0x14b1231f8 <col:6> 'void (void *)' Function 0x14b123088 'free' 'void (void *)'
|   |       |   |     `-RecoveryExpr 0x14b123270 <col:11> '<dependent type>' contains-errors lvalue
|   |       |   `-CallExpr 0x14b1235a0 <line:22:5, col:18> '<dependent type>' contains-errors
|   |       |     |-DeclRefExpr 0x14b1234f0 <col:5> 'void (void *)' Function 0x14b123088 'free' 'void (void *)'
|   |       |     `-RecoveryExpr 0x14b123568 <col:10> '<dependent type>' contains-errors lvalue
|   |       `-BinaryOperator 0x14b123840 <line:27:4, col:23> 'char *' '='
|   |         |-DeclRefExpr 0x14b123790 <col:4> 'char *' lvalue ParmVar 0x14b80dcd8 'extra_args' 'char *'
|   |         `-BinaryOperator 0x14b123820 <col:17, col:23> 'char *' '+'
|   |           |-ImplicitCastExpr 0x14b1237f0 <col:17> 'char *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x14b1237b0 <col:17> 'char *' lvalue Var 0x14b80df48 'val' 'char *'
|   |           `-ImplicitCastExpr 0x14b123808 <col:23> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x14b1237d0 <col:23> 'int' lvalue Var 0x14b80dfe0 'vallen' 'int'
|   `-IfStmt 0x14b125e50 <line:32:2, line:79:2>
|     |-RecoveryExpr 0x14b123900 <line:32:6> '<dependent type>' contains-errors lvalue
|     `-CompoundStmt 0x14b125e00 <col:16, line:79:2>
|       |-DeclStmt 0x14b123a98 <line:34:3, col:24>
|       | |-RecordDecl 0x14b123920 <col:3, col:10> col:10 struct addrinfo
|       | `-VarDecl 0x14b123a18 <col:3, col:19> col:19 referenced invalid hints 'struct addrinfo'
|       |-DeclStmt 0x14b123bd0 <line:35:3, col:22>
|       | `-VarDecl 0x14b123b68 <col:3, col:20> col:20 used ai 'struct addrinfo *'
|       |-DeclStmt 0x14b123c68 <line:36:3, col:10>
|       | `-VarDecl 0x14b123c00 <col:3, col:7> col:7 used gai 'int'
|       |-DeclStmt 0x14b123d50 <line:37:3, col:41>
|       | `-VarDecl 0x14b123ce8 <col:3, col:15> col:15 invalid addrbuf 'char' static
|       |-CallExpr 0x14b124128 <line:39:3, col:34> '<dependent type>' contains-errors
|       | |-DeclRefExpr 0x14b124050 <col:3> 'void *(void *, int, unsigned long)' Function 0x14b123e00 'memset' 'void *(void *, int, unsigned long)'
|       | |-UnaryOperator 0x14b124090 <col:10, col:11> '<dependent type>' contains-errors prefix '&' cannot overflow
|       | | `-RecoveryExpr 0x14b124070 <col:11> '<dependent type>' contains-errors lvalue
|       | |-IntegerLiteral 0x14b1240a8 <col:18> 'int' 0
|       | `-UnaryExprOrTypeTraitExpr 0x14b124108 <col:21, col:33> 'unsigned long' contains-errors sizeof
|       |   `-ParenExpr 0x14b1240e8 <col:27, col:33> '<dependent type>' contains-errors lvalue
|       |     `-RecoveryExpr 0x14b1240c8 <col:28> '<dependent type>' contains-errors lvalue
|       |-BinaryOperator 0x14b124248 <line:40:3, col:20> '<dependent type>' contains-errors '='
|       | |-CXXDependentScopeMemberExpr 0x14b1241a8 <col:3, col:9> '<dependent type>' contains-errors lvalue .ai_flags
|       | | `-RecoveryExpr 0x14b124180 <col:3> '<dependent type>' contains-errors lvalue
|       | |   `-DeclRefExpr 0x14b124160 <col:3> 'struct addrinfo' lvalue Var 0x14b123a18 'hints' 'struct addrinfo'
|       | `-RecoveryExpr 0x14b124228 <col:20> '<dependent type>' contains-errors lvalue
|       |-BinaryOperator 0x14b124558 <line:42:3, col:45> 'int' contains-errors '='
|       | |-DeclRefExpr 0x14b124268 <col:3> 'int' lvalue Var 0x14b123c00 'gai' 'int'
|       | `-CallExpr 0x14b124518 <col:9, col:45> '<dependent type>' contains-errors
|       |   |-DeclRefExpr 0x14b124368 <col:9> 'int ()' Function 0x14b1242b0 'getaddrinfo' 'int ()'
|       |   |-RecoveryExpr 0x14b1244f8 <col:21> '<dependent type>' contains-errors lvalue
|       |   |-IntegerLiteral 0x14b1243a0 <col:31> 'int' 0
|       |   |-UnaryOperator 0x14b1243e0 <col:34, col:35> '<dependent type>' contains-errors prefix '&' cannot overflow
|       |   | `-RecoveryExpr 0x14b1243c0 <col:35> '<dependent type>' contains-errors lvalue
|       |   `-UnaryOperator 0x14b124480 <col:42, col:43> 'struct addrinfo **' prefix '&' cannot overflow
|       |     `-DeclRefExpr 0x14b1243f8 <col:43> 'struct addrinfo *' lvalue Var 0x14b123b68 'ai' 'struct addrinfo *'
|       `-IfStmt 0x14b124da0 <line:43:3, line:56:3>
|         |-UnaryOperator 0x14b1245b0 <line:43:7, col:8> 'int' prefix '!' cannot overflow
|         | `-ImplicitCastExpr 0x14b124598 <col:8> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x14b124578 <col:8> 'int' lvalue Var 0x14b123c00 'gai' 'int'
|         `-CompoundStmt 0x14b124d80 <col:13, line:56:3>
|           |-DeclStmt 0x14b124870 <line:44:4, col:54>
|           | |-RecordDecl 0x14b1245c8 <col:4, col:11> col:11 struct sockaddr_in
|           | `-VarDecl 0x14b124738 <col:4, col:47> col:24 used sin_addr 'struct sockaddr_in *' cinit
|           |   `-ImplicitCastExpr 0x14b124840 <col:35, col:47> 'struct sockaddr_in *' contains-errors <BitCast>
|           |     `-CStyleCastExpr 0x14b124818 <col:35, col:47> 'void *' contains-errors <Dependent>
|           |       `-RecoveryExpr 0x14b1247d8 <col:43, col:47> '<dependent type>' contains-errors lvalue
|           |         `-DeclRefExpr 0x14b1247a0 <col:43> 'struct addrinfo *' lvalue Var 0x14b123b68 'ai' 'struct addrinfo *'
|           `-CallExpr 0x14b124d40 <line:55:4, col:19> 'int'
|             |-ImplicitCastExpr 0x14b124d28 <col:4> 'int (*)()' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x14b124ce8 <col:4> 'int ()' Function 0x14b124c30 'freeaddrinfo' 'int ()'
|             `-ImplicitCastExpr 0x14b124d68 <col:17> 'struct addrinfo *' <LValueToRValue>
|               `-DeclRefExpr 0x14b124d08 <col:17> 'struct addrinfo *' lvalue Var 0x14b123b68 'ai' 'struct addrinfo *'
|-FunctionDecl 0x14b827d90 <line:9:7> col:7 implicit used strncasecmp 'int (const char *, const char *, unsigned long)' extern
| |-ParmVarDecl 0x14b827e90 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x14b827ef8 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x14b827f60 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x14b827e38 <<invalid sloc>> Implicit 958
|-FunctionDecl 0x14b828318 <line:11:13> col:13 implicit used strlen 'unsigned long (const char *)' extern
| |-ParmVarDecl 0x14b828418 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x14b8283c0 <<invalid sloc>> Implicit 902
|-FunctionDecl 0x14b828810 <line:15:18> col:18 implicit used strrchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x14b828910 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x14b828978 <<invalid sloc>> <invalid sloc> 'int'
| `-BuiltinAttr 0x14b8288b8 <<invalid sloc>> Implicit 896
|-FunctionDecl 0x14b123088 <line:19:6> col:6 implicit used free 'void (void *)' extern
| |-ParmVarDecl 0x14b123188 <<invalid sloc>> <invalid sloc> 'void *'
| `-BuiltinAttr 0x14b123130 <<invalid sloc>> Implicit 873
`-FunctionDecl 0x14b123e00 <line:39:3> col:3 implicit used memset 'void *(void *, int, unsigned long)' extern
  |-ParmVarDecl 0x14b123f00 <<invalid sloc>> <invalid sloc> 'void *'
  |-ParmVarDecl 0x14b123f68 <<invalid sloc>> <invalid sloc> 'int'
  |-ParmVarDecl 0x14b123fd0 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x14b123ea8 <<invalid sloc>> Implicit 900
