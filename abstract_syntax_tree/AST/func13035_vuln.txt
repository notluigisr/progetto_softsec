TranslationUnitDecl 0x149055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1490564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x149055bd0 '__int128'
|-TypedefDecl 0x149056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x149055bf0 'unsigned __int128'
|-TypedefDecl 0x149126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x149126000 'struct __NSConstantString_tag'
|   `-Record 0x149056580 '__NSConstantString_tag'
|-TypedefDecl 0x149126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x149055d90 '__SVInt8_t'
|-TypedefDecl 0x149126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x149055db0 '__SVInt16_t'
|-TypedefDecl 0x149126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x149055dd0 '__SVInt32_t'
|-TypedefDecl 0x1491263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x149055df0 '__SVInt64_t'
|-TypedefDecl 0x149126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x149055e10 '__SVUint8_t'
|-TypedefDecl 0x1491264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x149055e30 '__SVUint16_t'
|-TypedefDecl 0x149126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x149055e50 '__SVUint32_t'
|-TypedefDecl 0x149126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x149055e70 '__SVUint64_t'
|-TypedefDecl 0x1491265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x149055e90 '__SVFloat16_t'
|-TypedefDecl 0x149126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x149055eb0 '__SVFloat32_t'
|-TypedefDecl 0x1491266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x149055ed0 '__SVFloat64_t'
|-TypedefDecl 0x149126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x149055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x149126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x149055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1491267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x149055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x149126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x149055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1491268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x149055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x149126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x149055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x149126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x149055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1491269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x149055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x149126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x149055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x149126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x149056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x149126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x149056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x149126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x149056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x149126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x149056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x149126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x149056090 '__clang_svint8x3_t'
|-TypedefDecl 0x149126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1490560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x149126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1490560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x149126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1490560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x149126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x149056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x149126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x149056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x149126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x149056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x149126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x149056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x149126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x149056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x149127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1490561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x149127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1490561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1491278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1490561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x149127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x149056210 '__clang_svint8x4_t'
|-TypedefDecl 0x1491279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x149056230 '__clang_svint16x4_t'
|-TypedefDecl 0x149127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x149056250 '__clang_svint32x4_t'
|-TypedefDecl 0x149127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x149056270 '__clang_svint64x4_t'
|-TypedefDecl 0x149127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x149056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x149127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1490562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x149127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1490562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x149127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1490562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x149127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x149056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x149127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x149056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x149127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x149056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x149127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x149056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x149127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x149056390 '__SVBool_t'
|-TypedefDecl 0x149127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1490563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x149127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1490563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x149127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1490563f0 '__SVCount_t'
|-TypedefDecl 0x149127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x149127fb0 'char *'
|   `-BuiltinType 0x1490556b0 'char'
|-TypedefDecl 0x149128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x149127fb0 'char *'
|   `-BuiltinType 0x1490556b0 'char'
|-FunctionDecl 0x149128290 <dataset_diviso_filec/func13035_vuln.c:1:1, line:51:1> line:1:13 invalid SVGStripString 'void (const int, char *)' static
| |-ParmVarDecl 0x1491280f0 <col:28, col:52> col:52 invalid trim 'const int'
| |-ParmVarDecl 0x149128170 <col:57, col:63> col:63 used message 'char *'
| `-CompoundStmt 0x149144148 <line:2:1, line:51:1>
|   |-DeclStmt 0x149128460 <line:3:3, line:5:7>
|   | |-VarDecl 0x149128360 <line:3:3, line:4:6> col:6 used p 'char *' register
|   | `-VarDecl 0x1491283e0 <line:3:3, line:5:6> col:6 used q 'char *' register
|   |-UnaryExprOrTypeTraitExpr 0x1491284d0 <line:7:3, line:8:5> 'unsigned long' contains-errors sizeof
|   | `-RecoveryExpr 0x1491284b0 <col:5> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x149128788 <line:11:3, line:12:5>
|   | |-BinaryOperator 0x149128758 <line:11:7, col:19> 'int' '=='
|   | | |-ImplicitCastExpr 0x149128740 <col:7, col:8> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x149128728 <col:7, col:8> 'char' <LValueToRValue>
|   | | |   `-UnaryOperator 0x1491286f8 <col:7, col:8> 'char' lvalue prefix '*' cannot overflow
|   | | |     `-ImplicitCastExpr 0x1491286e0 <col:8> 'char *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x1491286c0 <col:8> 'char *' lvalue ParmVar 0x149128170 'message' 'char *'
|   | | `-CharacterLiteral 0x149128710 <col:19> 'int' 0
|   | `-ReturnStmt 0x149128778 <line:12:5>
|   |-BinaryOperator 0x149141800 <line:14:3, col:5> 'char *' '='
|   | |-DeclRefExpr 0x1491287a8 <col:3> 'char *' lvalue Var 0x1491283e0 'q' 'char *'
|   | `-ImplicitCastExpr 0x1491287e8 <col:5> 'char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1491287c8 <col:5> 'char *' lvalue ParmVar 0x149128170 'message' 'char *'
|   |-ForStmt 0x1491421e8 <line:15:3, line:27:3>
|   | |-BinaryOperator 0x149141878 <line:15:8, col:10> 'char *' '='
|   | | |-DeclRefExpr 0x149141820 <col:8> 'char *' lvalue Var 0x149128360 'p' 'char *'
|   | | `-ImplicitCastExpr 0x149141860 <col:10> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x149141840 <col:10> 'char *' lvalue ParmVar 0x149128170 'message' 'char *'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x149141930 <col:19, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x149141918 <col:19, col:20> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x149141900 <col:19, col:20> 'char' <LValueToRValue>
|   | | |   `-UnaryOperator 0x1491418d0 <col:19, col:20> 'char' lvalue prefix '*' cannot overflow
|   | | |     `-ImplicitCastExpr 0x1491418b8 <col:20> 'char *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x149141898 <col:20> 'char *' lvalue Var 0x149128360 'p' 'char *'
|   | | `-CharacterLiteral 0x1491418e8 <col:25> 'int' 0
|   | |-UnaryOperator 0x149141970 <col:31, col:32> 'char *' postfix '++'
|   | | `-DeclRefExpr 0x149141950 <col:31> 'char *' lvalue Var 0x149128360 'p' 'char *'
|   | `-CompoundStmt 0x1491421c8 <line:16:3, line:27:3>
|   |   |-IfStmt 0x1491420b0 <line:17:5, line:25:7>
|   |   | |-BinaryOperator 0x149141b98 <line:17:9, col:38> 'int' '&&'
|   |   | | |-ParenExpr 0x149141a40 <col:9, col:19> 'int'
|   |   | | | `-BinaryOperator 0x149141a20 <col:10, col:16> 'int' '=='
|   |   | | |   |-ImplicitCastExpr 0x149141a08 <col:10, col:11> 'int' <IntegralCast>
|   |   | | |   | `-ImplicitCastExpr 0x1491419f0 <col:10, col:11> 'char' <LValueToRValue>
|   |   | | |   |   `-UnaryOperator 0x1491419c0 <col:10, col:11> 'char' lvalue prefix '*' cannot overflow
|   |   | | |   |     `-ImplicitCastExpr 0x1491419a8 <col:11> 'char *' <LValueToRValue>
|   |   | | |   |       `-DeclRefExpr 0x149141988 <col:11> 'char *' lvalue Var 0x149128360 'p' 'char *'
|   |   | | |   `-CharacterLiteral 0x1491419d8 <col:16> 'int' 47
|   |   | | `-ParenExpr 0x149141b78 <col:24, col:38> 'int'
|   |   | |   `-BinaryOperator 0x149141b58 <col:25, col:35> 'int' '=='
|   |   | |     |-ImplicitCastExpr 0x149141b40 <col:25, col:30> 'int' <IntegralCast>
|   |   | |     | `-ImplicitCastExpr 0x149141b28 <col:25, col:30> 'char' <LValueToRValue>
|   |   | |     |   `-UnaryOperator 0x149141af8 <col:25, col:30> 'char' lvalue prefix '*' cannot overflow
|   |   | |     |     `-ParenExpr 0x149141ad8 <col:26, col:30> 'char *'
|   |   | |     |       `-BinaryOperator 0x149141ab8 <col:27, col:29> 'char *' '+'
|   |   | |     |         |-ImplicitCastExpr 0x149141aa0 <col:27> 'char *' <LValueToRValue>
|   |   | |     |         | `-DeclRefExpr 0x149141a60 <col:27> 'char *' lvalue Var 0x149128360 'p' 'char *'
|   |   | |     |         `-IntegerLiteral 0x149141a80 <col:29> 'int' 1
|   |   | |     `-CharacterLiteral 0x149141b10 <col:35> 'int' 42
|   |   | `-CompoundStmt 0x149142088 <line:18:7, line:25:7>
|   |   |   |-ForStmt 0x149141f00 <line:19:9, line:21:13>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-BinaryOperator 0x149141c50 <line:19:17, col:23> 'int' '!='
|   |   |   | | |-ImplicitCastExpr 0x149141c38 <col:17, col:18> 'int' <IntegralCast>
|   |   |   | | | `-ImplicitCastExpr 0x149141c20 <col:17, col:18> 'char' <LValueToRValue>
|   |   |   | | |   `-UnaryOperator 0x149141bf0 <col:17, col:18> 'char' lvalue prefix '*' cannot overflow
|   |   |   | | |     `-ImplicitCastExpr 0x149141bd8 <col:18> 'char *' <LValueToRValue>
|   |   |   | | |       `-DeclRefExpr 0x149141bb8 <col:18> 'char *' lvalue Var 0x149128360 'p' 'char *'
|   |   |   | | `-CharacterLiteral 0x149141c08 <col:23> 'int' 0
|   |   |   | |-UnaryOperator 0x149141c90 <col:29, col:30> 'char *' postfix '++'
|   |   |   | | `-DeclRefExpr 0x149141c70 <col:29> 'char *' lvalue Var 0x149128360 'p' 'char *'
|   |   |   | `-IfStmt 0x149141ee0 <line:20:11, line:21:13>
|   |   |   |   |-BinaryOperator 0x149141eb8 <line:20:15, col:44> 'int' '&&'
|   |   |   |   | |-ParenExpr 0x149141d60 <col:15, col:25> 'int'
|   |   |   |   | | `-BinaryOperator 0x149141d40 <col:16, col:22> 'int' '=='
|   |   |   |   | |   |-ImplicitCastExpr 0x149141d28 <col:16, col:17> 'int' <IntegralCast>
|   |   |   |   | |   | `-ImplicitCastExpr 0x149141d10 <col:16, col:17> 'char' <LValueToRValue>
|   |   |   |   | |   |   `-UnaryOperator 0x149141ce0 <col:16, col:17> 'char' lvalue prefix '*' cannot overflow
|   |   |   |   | |   |     `-ImplicitCastExpr 0x149141cc8 <col:17> 'char *' <LValueToRValue>
|   |   |   |   | |   |       `-DeclRefExpr 0x149141ca8 <col:17> 'char *' lvalue Var 0x149128360 'p' 'char *'
|   |   |   |   | |   `-CharacterLiteral 0x149141cf8 <col:22> 'int' 42
|   |   |   |   | `-ParenExpr 0x149141e98 <col:30, col:44> 'int'
|   |   |   |   |   `-BinaryOperator 0x149141e78 <col:31, col:41> 'int' '=='
|   |   |   |   |     |-ImplicitCastExpr 0x149141e60 <col:31, col:36> 'int' <IntegralCast>
|   |   |   |   |     | `-ImplicitCastExpr 0x149141e48 <col:31, col:36> 'char' <LValueToRValue>
|   |   |   |   |     |   `-UnaryOperator 0x149141e18 <col:31, col:36> 'char' lvalue prefix '*' cannot overflow
|   |   |   |   |     |     `-ParenExpr 0x149141df8 <col:32, col:36> 'char *'
|   |   |   |   |     |       `-BinaryOperator 0x149141dd8 <col:33, col:35> 'char *' '+'
|   |   |   |   |     |         |-ImplicitCastExpr 0x149141dc0 <col:33> 'char *' <LValueToRValue>
|   |   |   |   |     |         | `-DeclRefExpr 0x149141d80 <col:33> 'char *' lvalue Var 0x149128360 'p' 'char *'
|   |   |   |   |     |         `-IntegerLiteral 0x149141da0 <col:35> 'int' 1
|   |   |   |   |     `-CharacterLiteral 0x149141e30 <col:41> 'int' 47
|   |   |   |   `-BreakStmt 0x149141ed8 <line:21:13>
|   |   |   |-IfStmt 0x149141ff8 <line:22:9, line:23:11>
|   |   |   | |-BinaryOperator 0x149141fd0 <line:22:13, col:19> 'int' '=='
|   |   |   | | |-ImplicitCastExpr 0x149141fb8 <col:13, col:14> 'int' <IntegralCast>
|   |   |   | | | `-ImplicitCastExpr 0x149141fa0 <col:13, col:14> 'char' <LValueToRValue>
|   |   |   | | |   `-UnaryOperator 0x149141f70 <col:13, col:14> 'char' lvalue prefix '*' cannot overflow
|   |   |   | | |     `-ImplicitCastExpr 0x149141f58 <col:14> 'char *' <LValueToRValue>
|   |   |   | | |       `-DeclRefExpr 0x149141f38 <col:14> 'char *' lvalue Var 0x149128360 'p' 'char *'
|   |   |   | | `-CharacterLiteral 0x149141f88 <col:19> 'int' 0
|   |   |   | `-BreakStmt 0x149141ff0 <line:23:11>
|   |   |   `-CompoundAssignOperator 0x149142058 <line:24:9, col:12> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
|   |   |     |-DeclRefExpr 0x149142018 <col:9> 'char *' lvalue Var 0x149128360 'p' 'char *'
|   |   |     `-IntegerLiteral 0x149142038 <col:12> 'int' 2
|   |   `-BinaryOperator 0x1491421a8 <line:26:5, col:13> 'char' '='
|   |     |-UnaryOperator 0x149142108 <col:5, col:7> 'char' lvalue prefix '*' cannot overflow
|   |     | `-UnaryOperator 0x1491420f0 <col:6, col:7> 'char *' postfix '++'
|   |     |   `-DeclRefExpr 0x1491420d0 <col:6> 'char *' lvalue Var 0x1491283e0 'q' 'char *'
|   |     `-ImplicitCastExpr 0x149142190 <col:10, col:13> 'char' <LValueToRValue>
|   |       `-ParenExpr 0x149142170 <col:10, col:13> 'char' lvalue
|   |         `-UnaryOperator 0x149142158 <col:11, col:12> 'char' lvalue prefix '*' cannot overflow
|   |           `-ImplicitCastExpr 0x149142140 <col:12> 'char *' <LValueToRValue>
|   |             `-DeclRefExpr 0x149142120 <col:12> 'char *' lvalue Var 0x149128360 'p' 'char *'
|   |-BinaryOperator 0x1491422a0 <line:28:3, col:6> 'char' '='
|   | |-UnaryOperator 0x149142258 <col:3, col:4> 'char' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x149142240 <col:4> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x149142220 <col:4> 'char *' lvalue Var 0x1491283e0 'q' 'char *'
|   | `-ImplicitCastExpr 0x149142288 <col:6> 'char' <IntegralCast>
|   |   `-CharacterLiteral 0x149142270 <col:6> 'int' 0
|   |-IfStmt 0x149143e10 <line:29:3, line:46:5>
|   | |-BinaryOperator 0x149142338 <line:29:7, col:15> 'int' contains-errors '!='
|   | | |-RecoveryExpr 0x1491422c0 <col:7> '<dependent type>' contains-errors lvalue
|   | | `-RecoveryExpr 0x149142318 <col:15> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x149143dc0 <line:30:5, line:46:5>
|   |   |-BinaryOperator 0x14a8084c8 <line:33:7, col:9> 'char *' '='
|   |   | |-DeclRefExpr 0x14a808470 <col:7> 'char *' lvalue Var 0x149128360 'p' 'char *'
|   |   | `-ImplicitCastExpr 0x14a8084b0 <col:9> 'char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x14a808490 <col:9> 'char *' lvalue ParmVar 0x149128170 'message' 'char *'
|   |   |-WhileStmt 0x14a808918 <line:34:7, line:35:10>
|   |   | |-BinaryOperator 0x14a8088c0 <line:34:14, col:53> 'int' '!='
|   |   | | |-CallExpr 0x14a808878 <col:14, col:48> 'int'
|   |   | | | |-ImplicitCastExpr 0x14a808860 <col:14> 'int (*)(int)' <FunctionToPointerDecay>
|   |   | | | | `-DeclRefExpr 0x14a8086e8 <col:14> 'int (int)' Function 0x14a808528 'isspace' 'int (int)'
|   |   | | | `-CStyleCastExpr 0x14a808808 <col:22, col:47> 'int' <IntegralCast>
|   |   | | |   `-ParenExpr 0x14a8087e8 <col:28, col:47> 'unsigned char'
|   |   | | |     `-CStyleCastExpr 0x14a808788 <col:29, col:46> 'unsigned char' <IntegralCast>
|   |   | | |       `-ImplicitCastExpr 0x14a808770 <col:45, col:46> 'char' <LValueToRValue> part_of_explicit_cast
|   |   | | |         `-UnaryOperator 0x14a808740 <col:45, col:46> 'char' lvalue prefix '*' cannot overflow
|   |   | | |           `-ImplicitCastExpr 0x14a808728 <col:46> 'char *' <LValueToRValue>
|   |   | | |             `-DeclRefExpr 0x14a808708 <col:46> 'char *' lvalue Var 0x149128360 'p' 'char *'
|   |   | | `-IntegerLiteral 0x14a8088a0 <col:53> 'int' 0
|   |   | `-UnaryOperator 0x14a808900 <line:35:9, col:10> 'char *' postfix '++'
|   |   |   `-DeclRefExpr 0x14a8088e0 <col:9> 'char *' lvalue Var 0x149128360 'p' 'char *'
|   |   |-IfStmt 0x14a808b40 <line:36:7, line:37:10>
|   |   | |-BinaryOperator 0x14a808ae8 <line:36:11, col:37> 'int' '||'
|   |   | | |-ParenExpr 0x14a8089f0 <col:11, col:22> 'int'
|   |   | | | `-BinaryOperator 0x14a8089d0 <col:12, col:18> 'int' '=='
|   |   | | |   |-ImplicitCastExpr 0x14a8089b8 <col:12, col:13> 'int' <IntegralCast>
|   |   | | |   | `-ImplicitCastExpr 0x14a8089a0 <col:12, col:13> 'char' <LValueToRValue>
|   |   | | |   |   `-UnaryOperator 0x14a808970 <col:12, col:13> 'char' lvalue prefix '*' cannot overflow
|   |   | | |   |     `-ImplicitCastExpr 0x14a808958 <col:13> 'char *' <LValueToRValue>
|   |   | | |   |       `-DeclRefExpr 0x14a808938 <col:13> 'char *' lvalue Var 0x149128360 'p' 'char *'
|   |   | | |   `-CharacterLiteral 0x14a808988 <col:18> 'int' 39
|   |   | | `-ParenExpr 0x14a808ac8 <col:27, col:37> 'int'
|   |   | |   `-BinaryOperator 0x14a808aa8 <col:28, col:34> 'int' '=='
|   |   | |     |-ImplicitCastExpr 0x14a808a90 <col:28, col:29> 'int' <IntegralCast>
|   |   | |     | `-ImplicitCastExpr 0x14a808a78 <col:28, col:29> 'char' <LValueToRValue>
|   |   | |     |   `-UnaryOperator 0x14a808a48 <col:28, col:29> 'char' lvalue prefix '*' cannot overflow
|   |   | |     |     `-ImplicitCastExpr 0x14a808a30 <col:29> 'char *' <LValueToRValue>
|   |   | |     |       `-DeclRefExpr 0x14a808a10 <col:29> 'char *' lvalue Var 0x149128360 'p' 'char *'
|   |   | |     `-CharacterLiteral 0x14a808a60 <col:34> 'int' 34
|   |   | `-UnaryOperator 0x14a808b28 <line:37:9, col:10> 'char *' postfix '++'
|   |   |   `-DeclRefExpr 0x14a808b08 <col:9> 'char *' lvalue Var 0x149128360 'p' 'char *'
|   |   |-BinaryOperator 0x14a808c98 <line:38:7, col:24> 'char *' contains-errors '='
|   |   | |-DeclRefExpr 0x14a808b60 <col:7> 'char *' lvalue Var 0x1491283e0 'q' 'char *'
|   |   | `-BinaryOperator 0x14a808c78 <col:9, col:24> '<dependent type>' contains-errors '-'
|   |   |   |-BinaryOperator 0x14a808c58 <col:9, col:17> '<dependent type>' contains-errors '+'
|   |   |   | |-DeclRefExpr 0x14a808b80 <col:9> 'char *' lvalue ParmVar 0x149128170 'message' 'char *'
|   |   |   | `-RecoveryExpr 0x14a808c38 <col:17> '<dependent type>' contains-errors lvalue
|   |   |   `-IntegerLiteral 0x14a808bd8 <col:24> 'int' 1
|   |   |-WhileStmt 0x14a808fa8 <line:39:7, line:40:10>
|   |   | |-BinaryOperator 0x14a808f50 <line:39:14, col:66> 'int' '&&'
|   |   | | |-ParenExpr 0x14a808e80 <col:14, col:55> 'int'
|   |   | | | `-BinaryOperator 0x14a808e60 <col:15, col:54> 'int' '!='
|   |   | | |   |-CallExpr 0x14a808e18 <col:15, col:49> 'int'
|   |   | | |   | |-ImplicitCastExpr 0x14a808e00 <col:15> 'int (*)(int)' <FunctionToPointerDecay>
|   |   | | |   | | `-DeclRefExpr 0x14a808cb8 <col:15> 'int (int)' Function 0x14a808528 'isspace' 'int (int)'
|   |   | | |   | `-CStyleCastExpr 0x14a808dd8 <col:23, col:48> 'int' <IntegralCast>
|   |   | | |   |   `-ParenExpr 0x14a808db8 <col:29, col:48> 'unsigned char'
|   |   | | |   |     `-CStyleCastExpr 0x14a808d58 <col:30, col:47> 'unsigned char' <IntegralCast>
|   |   | | |   |       `-ImplicitCastExpr 0x14a808d40 <col:46, col:47> 'char' <LValueToRValue> part_of_explicit_cast
|   |   | | |   |         `-UnaryOperator 0x14a808d10 <col:46, col:47> 'char' lvalue prefix '*' cannot overflow
|   |   | | |   |           `-ImplicitCastExpr 0x14a808cf8 <col:47> 'char *' <LValueToRValue>
|   |   | | |   |             `-DeclRefExpr 0x14a808cd8 <col:47> 'char *' lvalue Var 0x1491283e0 'q' 'char *'
|   |   | | |   `-IntegerLiteral 0x14a808e40 <col:54> 'int' 0
|   |   | | `-ParenExpr 0x14a808f30 <col:60, col:66> 'int'
|   |   | |   `-BinaryOperator 0x14a808f10 <col:61, col:65> 'int' '>'
|   |   | |     |-ImplicitCastExpr 0x14a808ee0 <col:61> 'char *' <LValueToRValue>
|   |   | |     | `-DeclRefExpr 0x14a808ea0 <col:61> 'char *' lvalue Var 0x1491283e0 'q' 'char *'
|   |   | |     `-ImplicitCastExpr 0x14a808ef8 <col:65> 'char *' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x14a808ec0 <col:65> 'char *' lvalue Var 0x149128360 'p' 'char *'
|   |   | `-UnaryOperator 0x14a808f90 <line:40:9, col:10> 'char *' postfix '--'
|   |   |   `-DeclRefExpr 0x14a808f70 <col:9> 'char *' lvalue Var 0x1491283e0 'q' 'char *'
|   |   |-IfStmt 0x149143698 <line:41:7, line:43:12>
|   |   | |-BinaryOperator 0x14a809038 <line:41:11, col:15> 'int' '>'
|   |   | | |-ImplicitCastExpr 0x14a809008 <col:11> 'char *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x14a808fc8 <col:11> 'char *' lvalue Var 0x1491283e0 'q' 'char *'
|   |   | | `-ImplicitCastExpr 0x14a809020 <col:15> 'char *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x14a808fe8 <col:15> 'char *' lvalue Var 0x149128360 'p' 'char *'
|   |   | `-IfStmt 0x149143678 <line:42:9, line:43:12>
|   |   |   |-BinaryOperator 0x149143620 <line:42:13, col:39> 'int' '||'
|   |   |   | |-ParenExpr 0x14a809110 <col:13, col:24> 'int'
|   |   |   | | `-BinaryOperator 0x14a8090f0 <col:14, col:20> 'int' '=='
|   |   |   | |   |-ImplicitCastExpr 0x14a8090d8 <col:14, col:15> 'int' <IntegralCast>
|   |   |   | |   | `-ImplicitCastExpr 0x14a8090c0 <col:14, col:15> 'char' <LValueToRValue>
|   |   |   | |   |   `-UnaryOperator 0x14a809090 <col:14, col:15> 'char' lvalue prefix '*' cannot overflow
|   |   |   | |   |     `-ImplicitCastExpr 0x14a809078 <col:15> 'char *' <LValueToRValue>
|   |   |   | |   |       `-DeclRefExpr 0x14a809058 <col:15> 'char *' lvalue Var 0x1491283e0 'q' 'char *'
|   |   |   | |   `-CharacterLiteral 0x14a8090a8 <col:20> 'int' 39
|   |   |   | `-ParenExpr 0x149143600 <col:29, col:39> 'int'
|   |   |   |   `-BinaryOperator 0x14a8091c8 <col:30, col:36> 'int' '=='
|   |   |   |     |-ImplicitCastExpr 0x14a8091b0 <col:30, col:31> 'int' <IntegralCast>
|   |   |   |     | `-ImplicitCastExpr 0x14a809198 <col:30, col:31> 'char' <LValueToRValue>
|   |   |   |     |   `-UnaryOperator 0x14a809168 <col:30, col:31> 'char' lvalue prefix '*' cannot overflow
|   |   |   |     |     `-ImplicitCastExpr 0x14a809150 <col:31> 'char *' <LValueToRValue>
|   |   |   |     |       `-DeclRefExpr 0x14a809130 <col:31> 'char *' lvalue Var 0x1491283e0 'q' 'char *'
|   |   |   |     `-CharacterLiteral 0x14a809180 <col:36> 'int' 34
|   |   |   `-UnaryOperator 0x149143660 <line:43:11, col:12> 'char *' postfix '--'
|   |   |     `-DeclRefExpr 0x149143640 <col:11> 'char *' lvalue Var 0x1491283e0 'q' 'char *'
|   |   |-CStyleCastExpr 0x149143c08 <line:44:7, col:48> 'void' contains-errors <ToVoid>
|   |   | `-CallExpr 0x149143bc0 <col:14, col:48> '<dependent type>' contains-errors
|   |   |   |-DeclRefExpr 0x149143988 <col:14> 'void *(void *, const void *, unsigned long)' Function 0x149143738 'memmove' 'void *(void *, const void *, unsigned long)'
|   |   |   |-DeclRefExpr 0x1491439a8 <col:22> 'char *' lvalue ParmVar 0x149128170 'message' 'char *'
|   |   |   |-DeclRefExpr 0x1491439c8 <col:30> 'char *' lvalue Var 0x149128360 'p' 'char *'
|   |   |   `-RecoveryExpr 0x149143b48 <col:32, col:47> '<dependent type>' contains-errors lvalue
|   |   |     |-ParenExpr 0x149143a40 <col:32, col:39> '<overloaded function type>' lvalue
|   |   |     | `-UnresolvedLookupExpr 0x149143a00 <col:33> '<overloaded function type>' lvalue (no ADL) = 'size_t' empty
|   |   |     `-BinaryOperator 0x149143b28 <col:42, col:46> 'long' '+'
|   |   |       |-BinaryOperator 0x149143ad0 <col:42, col:44> 'long' '-'
|   |   |       | |-ImplicitCastExpr 0x149143aa0 <col:42> 'char *' <LValueToRValue>
|   |   |       | | `-DeclRefExpr 0x149143a60 <col:42> 'char *' lvalue Var 0x1491283e0 'q' 'char *'
|   |   |       | `-ImplicitCastExpr 0x149143ab8 <col:44> 'char *' <LValueToRValue>
|   |   |       |   `-DeclRefExpr 0x149143a80 <col:44> 'char *' lvalue Var 0x149128360 'p' 'char *'
|   |   |       `-ImplicitCastExpr 0x149143b10 <col:46> 'long' <IntegralCast>
|   |   |         `-IntegerLiteral 0x149143af0 <col:46> 'int' 1
|   |   `-BinaryOperator 0x149143da0 <line:45:7, col:22> 'char' '='
|   |     |-ArraySubscriptExpr 0x149143d50 <col:7, col:20> 'char' lvalue
|   |     | |-ImplicitCastExpr 0x149143d38 <col:7> 'char *' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x149143c30 <col:7> 'char *' lvalue ParmVar 0x149128170 'message' 'char *'
|   |     | `-BinaryOperator 0x149143d18 <col:15, col:19> 'long' '+'
|   |     |   |-BinaryOperator 0x149143cc0 <col:15, col:17> 'long' '-'
|   |     |   | |-ImplicitCastExpr 0x149143c90 <col:15> 'char *' <LValueToRValue>
|   |     |   | | `-DeclRefExpr 0x149143c50 <col:15> 'char *' lvalue Var 0x1491283e0 'q' 'char *'
|   |     |   | `-ImplicitCastExpr 0x149143ca8 <col:17> 'char *' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x149143c70 <col:17> 'char *' lvalue Var 0x149128360 'p' 'char *'
|   |     |   `-ImplicitCastExpr 0x149143d00 <col:19> 'long' <IntegralCast>
|   |     |     `-IntegerLiteral 0x149143ce0 <col:19> 'int' 1
|   |     `-ImplicitCastExpr 0x149143d88 <col:22> 'char' <IntegralCast>
|   |       `-CharacterLiteral 0x149143d70 <col:22> 'int' 0
|   `-ForStmt 0x149144110 <line:48:3, line:50:10>
|     |-BinaryOperator 0x149143e88 <line:48:8, col:10> 'char *' '='
|     | |-DeclRefExpr 0x149143e30 <col:8> 'char *' lvalue Var 0x149128360 'p' 'char *'
|     | `-ImplicitCastExpr 0x149143e70 <col:10> 'char *' <LValueToRValue>
|     |   `-DeclRefExpr 0x149143e50 <col:10> 'char *' lvalue ParmVar 0x149128170 'message' 'char *'
|     |-<<<NULL>>>
|     |-BinaryOperator 0x149143f40 <col:19, col:25> 'int' '!='
|     | |-ImplicitCastExpr 0x149143f28 <col:19, col:20> 'int' <IntegralCast>
|     | | `-ImplicitCastExpr 0x149143f10 <col:19, col:20> 'char' <LValueToRValue>
|     | |   `-UnaryOperator 0x149143ee0 <col:19, col:20> 'char' lvalue prefix '*' cannot overflow
|     | |     `-ImplicitCastExpr 0x149143ec8 <col:20> 'char *' <LValueToRValue>
|     | |       `-DeclRefExpr 0x149143ea8 <col:20> 'char *' lvalue Var 0x149128360 'p' 'char *'
|     | `-CharacterLiteral 0x149143ef8 <col:25> 'int' 0
|     |-UnaryOperator 0x149143f80 <col:31, col:32> 'char *' postfix '++'
|     | `-DeclRefExpr 0x149143f60 <col:31> 'char *' lvalue Var 0x149128360 'p' 'char *'
|     `-IfStmt 0x1491440f0 <line:49:5, line:50:10>
|       |-BinaryOperator 0x149144030 <line:49:9, col:15> 'int' '=='
|       | |-ImplicitCastExpr 0x149144018 <col:9, col:10> 'int' <IntegralCast>
|       | | `-ImplicitCastExpr 0x149144000 <col:9, col:10> 'char' <LValueToRValue>
|       | |   `-UnaryOperator 0x149143fd0 <col:9, col:10> 'char' lvalue prefix '*' cannot overflow
|       | |     `-ImplicitCastExpr 0x149143fb8 <col:10> 'char *' <LValueToRValue>
|       | |       `-DeclRefExpr 0x149143f98 <col:10> 'char *' lvalue Var 0x149128360 'p' 'char *'
|       | `-CharacterLiteral 0x149143fe8 <col:15> 'int' 10
|       `-BinaryOperator 0x1491440d0 <line:50:7, col:10> 'char' '='
|         |-UnaryOperator 0x149144088 <col:7, col:8> 'char' lvalue prefix '*' cannot overflow
|         | `-ImplicitCastExpr 0x149144070 <col:8> 'char *' <LValueToRValue>
|         |   `-DeclRefExpr 0x149144050 <col:8> 'char *' lvalue Var 0x149128360 'p' 'char *'
|         `-ImplicitCastExpr 0x1491440b8 <col:10> 'char' <IntegralCast>
|           `-CharacterLiteral 0x1491440a0 <col:10> 'int' 32
|-FunctionDecl 0x14a808200 <line:32:14> col:14 implicit used strlen 'unsigned long (const char *)' extern
| |-ParmVarDecl 0x14a808300 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x14a8082a8 <<invalid sloc>> Implicit 902
|-FunctionDecl 0x14a808528 <line:34:14> col:14 implicit used isspace 'int (int)' extern
| |-ParmVarDecl 0x14a808628 <<invalid sloc>> <invalid sloc> 'int'
| |-BuiltinAttr 0x14a8085d0 <<invalid sloc>> Implicit 929
| |-NoThrowAttr 0x14a808698 <col:14> Implicit
| `-PureAttr 0x14a8086c0 <col:14> Implicit
`-FunctionDecl 0x149143738 <line:44:14> col:14 implicit used memmove 'void *(void *, const void *, unsigned long)' extern
  |-ParmVarDecl 0x149143838 <<invalid sloc>> <invalid sloc> 'void *'
  |-ParmVarDecl 0x1491438a0 <<invalid sloc>> <invalid sloc> 'const void *'
  |-ParmVarDecl 0x149143908 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x1491437e0 <<invalid sloc>> Implicit 884
