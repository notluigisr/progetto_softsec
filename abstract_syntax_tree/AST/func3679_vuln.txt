TranslationUnitDecl 0x123055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1230564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x123055bd0 '__int128'
|-TypedefDecl 0x123056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x123055bf0 'unsigned __int128'
|-TypedefDecl 0x12380be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12380bc00 'struct __NSConstantString_tag'
|   `-Record 0x123056580 '__NSConstantString_tag'
|-TypedefDecl 0x12380be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x123055d90 '__SVInt8_t'
|-TypedefDecl 0x12380bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x123055db0 '__SVInt16_t'
|-TypedefDecl 0x12380bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x123055dd0 '__SVInt32_t'
|-TypedefDecl 0x12380bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x123055df0 '__SVInt64_t'
|-TypedefDecl 0x12380c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x123055e10 '__SVUint8_t'
|-TypedefDecl 0x12380c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x123055e30 '__SVUint16_t'
|-TypedefDecl 0x12380c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x123055e50 '__SVUint32_t'
|-TypedefDecl 0x12380c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x123055e70 '__SVUint64_t'
|-TypedefDecl 0x12380c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x123055e90 '__SVFloat16_t'
|-TypedefDecl 0x12380c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x123055eb0 '__SVFloat32_t'
|-TypedefDecl 0x12380c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x123055ed0 '__SVFloat64_t'
|-TypedefDecl 0x12380c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x123055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12380c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x123055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12380c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x123055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12380c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x123055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12380c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x123055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12380c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x123055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12380c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x123055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12380c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x123055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12380c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x123055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12380c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x123056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12380c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x123056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12380c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x123056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12380c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x123056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12380c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x123056090 '__clang_svint8x3_t'
|-TypedefDecl 0x12380c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1230560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12380c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1230560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12380c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1230560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12380c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x123056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12380ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x123056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12380cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x123056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12380cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x123056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12380cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x123056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12380d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1230561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12380d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1230561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12380d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1230561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12380d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x123056210 '__clang_svint8x4_t'
|-TypedefDecl 0x12380d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x123056230 '__clang_svint16x4_t'
|-TypedefDecl 0x12380d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x123056250 '__clang_svint32x4_t'
|-TypedefDecl 0x12380d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x123056270 '__clang_svint64x4_t'
|-TypedefDecl 0x12380d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x123056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12380d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1230562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12380d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1230562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12380d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1230562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12380d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x123056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12380d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x123056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12380d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x123056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12380d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x123056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12380da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x123056390 '__SVBool_t'
|-TypedefDecl 0x12380da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1230563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12380dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1230563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12380db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1230563f0 '__SVCount_t'
|-TypedefDecl 0x12380dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12380dbb0 'char *'
|   `-BuiltinType 0x1230556b0 'char'
|-TypedefDecl 0x12380dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12380dbb0 'char *'
|   `-BuiltinType 0x1230556b0 'char'
|-FunctionDecl 0x12380de68 <dataset_diviso_filec/func3679_vuln.c:1:1, line:32:1> line:1:5 unit_name_path_escape 'int (const char *, char **)'
| |-ParmVarDecl 0x12380dcd8 <col:27, col:39> col:39 used f 'const char *'
| |-ParmVarDecl 0x12380dd88 <col:42, col:49> col:49 used ret 'char **'
| `-CompoundStmt 0x12382a1c0 <col:54, line:32:1>
|   |-DeclStmt 0x12380e080 <line:2:9, col:20>
|   | |-VarDecl 0x12380df80 <col:9, col:15> col:15 used p 'char *'
|   | `-VarDecl 0x12380e000 <col:9, col:19> col:19 used s 'char *'
|   |-CallExpr 0x12380e248 <line:4:9, col:17> 'int'
|   | |-ImplicitCastExpr 0x12380e230 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x12380e1c0 <col:9> 'int ()' Function 0x12380e108 'assert' 'int ()'
|   | `-ImplicitCastExpr 0x12380e270 <col:16> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x12380e1e0 <col:16> 'const char *' lvalue ParmVar 0x12380dcd8 'f' 'const char *'
|   |-CallExpr 0x12380e2e0 <line:5:9, col:19> 'int'
|   | |-ImplicitCastExpr 0x12380e2c8 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x12380e288 <col:9> 'int ()' Function 0x12380e108 'assert' 'int ()'
|   | `-ImplicitCastExpr 0x12380e308 <col:16> 'char **' <LValueToRValue>
|   |   `-DeclRefExpr 0x12380e2a8 <col:16> 'char **' lvalue ParmVar 0x12380dd88 'ret' 'char **'
|   |-BinaryOperator 0x123827990 <line:7:9, col:22> 'char *' '='
|   | |-DeclRefExpr 0x12380e320 <col:9> 'char *' lvalue Var 0x12380df80 'p' 'char *'
|   | `-ImplicitCastExpr 0x123827550 <col:13, col:22> 'char *' <IntegralToPointer>
|   |   `-CallExpr 0x123827510 <col:13, col:22> 'int'
|   |     |-ImplicitCastExpr 0x1238274f8 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1238274b8 <col:13> 'int ()' Function 0x123827400 'strdupa' 'int ()'
|   |     `-ImplicitCastExpr 0x123827538 <col:21> 'const char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x1238274d8 <col:21> 'const char *' lvalue ParmVar 0x12380dcd8 'f' 'const char *'
|   |-IfStmt 0x123827aa8 <line:8:9, line:9:25>
|   | |-UnaryOperator 0x1238279e8 <line:8:13, col:14> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x1238279d0 <col:14> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1238279b0 <col:14> 'char *' lvalue Var 0x12380df80 'p' 'char *'
|   | `-ReturnStmt 0x123827a98 <line:9:17, col:25>
|   |   `-UnaryOperator 0x123827a80 <col:24, col:25> '<dependent type>' contains-errors prefix '-' cannot overflow
|   |     `-ImplicitCastExpr 0x123827a68 <col:25> '<dependent type>' contains-errors <LValueToRValue>
|   |       `-RecoveryExpr 0x123827a48 <col:25> '<dependent type>' contains-errors lvalue
|   |-CallExpr 0x123827c00 <line:11:9, col:24> 'int'
|   | |-ImplicitCastExpr 0x123827be8 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x123827ba8 <col:9> 'int ()' Function 0x123827af0 'path_simplify' 'int ()'
|   | `-ImplicitCastExpr 0x123827c28 <col:23> 'char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x123827bc8 <col:23> 'char *' lvalue Var 0x12380df80 'p' 'char *'
|   |-IfStmt 0x123829fa0 <line:13:9, line:26:9> has_else
|   | |-CallExpr 0x123827d78 <line:13:13, col:28> 'int'
|   | | |-ImplicitCastExpr 0x123827d60 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x123827d20 <col:13> 'int ()' Function 0x123827c68 'empty_or_root' 'int ()'
|   | | `-ImplicitCastExpr 0x123827da0 <col:27> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x123827d40 <col:27> 'char *' lvalue Var 0x12380df80 'p' 'char *'
|   | |-BinaryOperator 0x1238280d0 <line:14:17, col:33> 'char *' '='
|   | | |-DeclRefExpr 0x123827db8 <col:17> 'char *' lvalue Var 0x12380e000 's' 'char *'
|   | | `-CallExpr 0x123828078 <col:21, col:33> 'char *'
|   | |   |-ImplicitCastExpr 0x123828060 <col:21> 'char *(*)(const char *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x123827f88 <col:21> 'char *(const char *)' Function 0x123827e18 'strdup' 'char *(const char *)'
|   | |   `-ImplicitCastExpr 0x1238280b8 <col:28> 'const char *' <NoOp>
|   | |     `-ImplicitCastExpr 0x1238280a0 <col:28> 'char *' <ArrayToPointerDecay>
|   | |       `-StringLiteral 0x123827ff0 <col:28> 'char[4]' lvalue "STR"
|   | `-CompoundStmt 0x123829f70 <line:15:14, line:26:9>
|   |   |-IfStmt 0x123828328 <line:16:17, line:17:33>
|   |   | |-UnaryOperator 0x123828268 <line:16:21, col:42> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x123828228 <col:22, col:42> 'int'
|   |   | |   |-ImplicitCastExpr 0x123828210 <col:22> 'int (*)()' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x1238281d0 <col:22> 'int ()' Function 0x123828118 'path_is_normalized' 'int ()'
|   |   | |   `-ImplicitCastExpr 0x123828250 <col:41> 'char *' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x1238281f0 <col:41> 'char *' lvalue Var 0x12380df80 'p' 'char *'
|   |   | `-ReturnStmt 0x123828318 <line:17:25, col:33>
|   |   |   `-UnaryOperator 0x123828300 <col:32, col:33> '<dependent type>' contains-errors prefix '-' cannot overflow
|   |   |     `-ImplicitCastExpr 0x1238282e8 <col:33> '<dependent type>' contains-errors <LValueToRValue>
|   |   |       `-RecoveryExpr 0x1238282c8 <col:33> '<dependent type>' contains-errors lvalue
|   |   |-CallExpr 0x123829b30 <line:20:17, col:47> 'int'
|   |   | |-ImplicitCastExpr 0x123829b18 <col:17> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x123829ab8 <col:17> 'int ()' Function 0x123829a00 'delete_trailing_chars' 'int ()'
|   |   | |-ImplicitCastExpr 0x123829b60 <col:39> 'char *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x123829ad8 <col:39> 'char *' lvalue Var 0x12380df80 'p' 'char *'
|   |   | `-ImplicitCastExpr 0x123829b78 <col:42> 'char *' <ArrayToPointerDecay>
|   |   |   `-StringLiteral 0x123829af8 <col:42> 'char[4]' lvalue "STR"
|   |   |-BinaryOperator 0x123829d80 <line:23:17, col:48> 'char *' '='
|   |   | |-DeclRefExpr 0x123829b90 <col:17> 'char *' lvalue Var 0x12380df80 'p' 'char *'
|   |   | `-ImplicitCastExpr 0x123829d68 <col:21, col:48> 'char *' <IntegralToPointer>
|   |   |   `-CallExpr 0x123829d08 <col:21, col:48> 'int'
|   |   |     |-ImplicitCastExpr 0x123829cf0 <col:21> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x123829c90 <col:21> 'int ()' Function 0x123829bd8 'skip_leading_chars' 'int ()'
|   |   |     |-ImplicitCastExpr 0x123829d38 <col:40> 'char *' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x123829cb0 <col:40> 'char *' lvalue Var 0x12380df80 'p' 'char *'
|   |   |     `-ImplicitCastExpr 0x123829d50 <col:43> 'char *' <ArrayToPointerDecay>
|   |   |       `-StringLiteral 0x123829cd0 <col:43> 'char[4]' lvalue "STR"
|   |   `-BinaryOperator 0x123829f50 <line:25:17, col:39> 'char *' '='
|   |     |-DeclRefExpr 0x123829da0 <col:17> 'char *' lvalue Var 0x12380e000 's' 'char *'
|   |     `-ImplicitCastExpr 0x123829f38 <col:21, col:39> 'char *' <IntegralToPointer>
|   |       `-CallExpr 0x123829ef8 <col:21, col:39> 'int'
|   |         |-ImplicitCastExpr 0x123829ee0 <col:21> 'int (*)()' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x123829ea0 <col:21> 'int ()' Function 0x123829de8 'unit_name_escape' 'int ()'
|   |         `-ImplicitCastExpr 0x123829f20 <col:38> 'char *' <LValueToRValue>
|   |           `-DeclRefExpr 0x123829ec0 <col:38> 'char *' lvalue Var 0x12380df80 'p' 'char *'
|   |-IfStmt 0x12382a0c8 <line:27:9, line:28:25>
|   | |-UnaryOperator 0x12382a008 <line:27:13, col:14> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x123829ff0 <col:14> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x123829fd0 <col:14> 'char *' lvalue Var 0x12380e000 's' 'char *'
|   | `-ReturnStmt 0x12382a0b8 <line:28:17, col:25>
|   |   `-UnaryOperator 0x12382a0a0 <col:24, col:25> '<dependent type>' contains-errors prefix '-' cannot overflow
|   |     `-ImplicitCastExpr 0x12382a088 <col:25> '<dependent type>' contains-errors <LValueToRValue>
|   |       `-RecoveryExpr 0x12382a068 <col:25> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x12382a170 <line:30:9, col:16> 'char *' '='
|   | |-UnaryOperator 0x12382a120 <col:9, col:10> 'char *' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x12382a108 <col:10> 'char **' <LValueToRValue>
|   | |   `-DeclRefExpr 0x12382a0e8 <col:10> 'char **' lvalue ParmVar 0x12380dd88 'ret' 'char **'
|   | `-ImplicitCastExpr 0x12382a158 <col:16> 'char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x12382a138 <col:16> 'char *' lvalue Var 0x12380e000 's' 'char *'
|   `-ReturnStmt 0x12382a1b0 <line:31:9, col:16>
|     `-IntegerLiteral 0x12382a190 <col:16> 'int' 0
`-FunctionDecl 0x123827e18 <line:14:21> col:21 implicit used strdup 'char *(const char *)' extern
  |-ParmVarDecl 0x123827f18 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x123827ec0 <<invalid sloc>> Implicit 950
