TranslationUnitDecl 0x12b855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x12b8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x12b855bd0 '__int128'
|-TypedefDecl 0x12b856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x12b855bf0 'unsigned __int128'
|-TypedefDecl 0x12c00be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12c00bc00 'struct __NSConstantString_tag'
|   `-Record 0x12b856580 '__NSConstantString_tag'
|-TypedefDecl 0x12c00be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x12b855d90 '__SVInt8_t'
|-TypedefDecl 0x12c00bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x12b855db0 '__SVInt16_t'
|-TypedefDecl 0x12c00bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x12b855dd0 '__SVInt32_t'
|-TypedefDecl 0x12c00bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x12b855df0 '__SVInt64_t'
|-TypedefDecl 0x12c00c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x12b855e10 '__SVUint8_t'
|-TypedefDecl 0x12c00c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x12b855e30 '__SVUint16_t'
|-TypedefDecl 0x12c00c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x12b855e50 '__SVUint32_t'
|-TypedefDecl 0x12c00c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x12b855e70 '__SVUint64_t'
|-TypedefDecl 0x12c00c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x12b855e90 '__SVFloat16_t'
|-TypedefDecl 0x12c00c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x12b855eb0 '__SVFloat32_t'
|-TypedefDecl 0x12c00c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x12b855ed0 '__SVFloat64_t'
|-TypedefDecl 0x12c00c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x12b855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12c00c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x12b855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12c00c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x12b855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12c00c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x12b855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12c00c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x12b855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12c00c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x12b855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12c00c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x12b855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12c00c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x12b855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12c00c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x12b855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12c00c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x12b856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12c00c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x12b856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12c00c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x12b856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12c00c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x12b856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12c00c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x12b856090 '__clang_svint8x3_t'
|-TypedefDecl 0x12c00c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x12b8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12c00c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x12b8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12c00c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x12b8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12c00c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x12b856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12c00ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x12b856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12c00cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x12b856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12c00cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x12b856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12c00cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x12b856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12c00d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x12b8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12c00d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x12b8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12c00d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x12b8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12c00d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x12b856210 '__clang_svint8x4_t'
|-TypedefDecl 0x12c00d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x12b856230 '__clang_svint16x4_t'
|-TypedefDecl 0x12c00d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x12b856250 '__clang_svint32x4_t'
|-TypedefDecl 0x12c00d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x12b856270 '__clang_svint64x4_t'
|-TypedefDecl 0x12c00d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x12b856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12c00d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x12b8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12c00d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x12b8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12c00d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x12b8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12c00d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x12b856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12c00d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x12b856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12c00d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x12b856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12c00d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x12b856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12c00da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x12b856390 '__SVBool_t'
|-TypedefDecl 0x12c00da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x12b8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12c00dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x12b8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12c00db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x12b8563f0 '__SVCount_t'
|-TypedefDecl 0x12c00dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12c00dbb0 'char *'
|   `-BuiltinType 0x12b8556b0 'char'
|-TypedefDecl 0x12c00dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12c00dbb0 'char *'
|   `-BuiltinType 0x12b8556b0 'char'
`-FunctionDecl 0x12c00dea8 <dataset_diviso_filec/func6715_nonvuln.c:1:1, line:23:1> line:1:15 mask_password 'char **(int, char ***)' static
  |-ParmVarDecl 0x12c00dcd8 <col:29, col:33> col:33 used argc 'int'
  |-ParmVarDecl 0x12c00ddc0 <col:39, col:47> col:47 used argv 'char ***'
  `-CompoundStmt 0x12c02ad20 <line:2:1, line:23:1>
    |-DeclStmt 0x12c00e028 <line:3:3, col:19>
    | `-VarDecl 0x12c00dfc0 <col:3, col:10> col:10 used temp_argv 'char **'
    |-UnaryOperator 0x12c028ea8 <line:5:3, col:7> 'int' postfix '--'
    | `-DeclRefExpr 0x12c028e88 <col:3> 'int' lvalue ParmVar 0x12c00dcd8 'argc' 'int'
    |-WhileStmt 0x12c02a7e0 <line:6:3, line:20:3>
    | |-BinaryOperator 0x12c028f18 <line:6:10, col:17> 'int' '>'
    | | |-ImplicitCastExpr 0x12c028f00 <col:10> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x12c028ec0 <col:10> 'int' lvalue ParmVar 0x12c00dcd8 'argc' 'int'
    | | `-IntegerLiteral 0x12c028ee0 <col:17> 'int' 0
    | `-CompoundStmt 0x12c02a7b8 <line:7:3, line:20:3>
    |   |-BinaryOperator 0x12c0294b0 <line:8:5, col:58> 'char *' contains-errors '='
    |   | |-ArraySubscriptExpr 0x12c029378 <col:5, col:19> 'char *' lvalue
    |   | | |-ImplicitCastExpr 0x12c029348 <col:5> 'char **' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x12c028f38 <col:5> 'char **' lvalue Var 0x12c00dfc0 'temp_argv' 'char **'
    |   | | `-ImplicitCastExpr 0x12c029360 <col:15> 'int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x12c028f58 <col:15> 'int' lvalue ParmVar 0x12c00dcd8 'argc' 'int'
    |   | `-CallExpr 0x12c029480 <col:22, col:58> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x12c0290a8 <col:22> 'int ()' Function 0x12c028ff0 'my_strdup' 'int ()'
    |   |   |-ArraySubscriptExpr 0x12c029418 <col:32, col:44> 'char *' lvalue
    |   |   | |-ImplicitCastExpr 0x12c0293e8 <col:32, col:38> 'char **' <LValueToRValue>
    |   |   | | `-ParenExpr 0x12c0293c8 <col:32, col:38> 'char **' lvalue
    |   |   | |   `-UnaryOperator 0x12c0293b0 <col:33, col:34> 'char **' lvalue prefix '*' cannot overflow
    |   |   | |     `-ImplicitCastExpr 0x12c029398 <col:34> 'char ***' <LValueToRValue>
    |   |   | |       `-DeclRefExpr 0x12c0290c8 <col:34> 'char ***' lvalue ParmVar 0x12c00ddc0 'argv' 'char ***'
    |   |   | `-ImplicitCastExpr 0x12c029400 <col:40> 'int' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x12c029138 <col:40> 'int' lvalue ParmVar 0x12c00dcd8 'argc' 'int'
    |   |   `-CallExpr 0x12c029458 <col:47, col:57> '<dependent type>' contains-errors
    |   |     |-DeclRefExpr 0x12c0291a8 <col:47> 'int ()' Function 0x12c00e280 'MYF' 'int ()'
    |   |     `-RecoveryExpr 0x12c029438 <col:51> '<dependent type>' contains-errors lvalue
    |   |-IfStmt 0x12c02a760 <line:9:5, line:18:6>
    |   | |-BinaryOperator 0x12c029da0 <line:9:9, line:10:75> 'int' contains-errors '||'
    |   | | |-BinaryOperator 0x12c029bf0 <line:9:9, col:75> 'int' contains-errors '=='
    |   | | | |-CallExpr 0x12c029b98 <col:9, col:70> '<dependent type>' contains-errors
    |   | | | | |-DeclRefExpr 0x12c0295b0 <col:9> 'int ()' Function 0x12c0294f8 'find_type' 'int ()'
    |   | | | | |-ArraySubscriptExpr 0x12c029b20 <col:19, col:35> 'char *' lvalue
    |   | | | | | |-ImplicitCastExpr 0x12c029b08 <col:19, col:25> 'char **' <LValueToRValue>
    |   | | | | | | `-ParenExpr 0x12c029ab0 <col:19, col:25> 'char **' lvalue
    |   | | | | | |   `-UnaryOperator 0x12c029a98 <col:20, col:21> 'char **' lvalue prefix '*' cannot overflow
    |   | | | | | |     `-ImplicitCastExpr 0x12c029a80 <col:21> 'char ***' <LValueToRValue>
    |   | | | | | |       `-DeclRefExpr 0x12c0295d0 <col:21> 'char ***' lvalue ParmVar 0x12c00ddc0 'argv' 'char ***'
    |   | | | | | `-BinaryOperator 0x12c029ae8 <col:27, col:34> 'int' '-'
    |   | | | | |   |-ImplicitCastExpr 0x12c029ad0 <col:27> 'int' <LValueToRValue>
    |   | | | | |   | `-DeclRefExpr 0x12c029640 <col:27> 'int' lvalue ParmVar 0x12c00dcd8 'argc' 'int'
    |   | | | | |   `-IntegerLiteral 0x12c029660 <col:34> 'int' 1
    |   | | | | |-UnaryOperator 0x12c029b60 <col:37, col:38> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | | | | | `-RecoveryExpr 0x12c029b40 <col:38> '<dependent type>' contains-errors lvalue
    |   | | | | `-RecoveryExpr 0x12c029b78 <col:55> '<dependent type>' contains-errors lvalue
    |   | | | `-RecoveryExpr 0x12c029bd0 <col:75> '<dependent type>' contains-errors lvalue
    |   | | `-BinaryOperator 0x12c029d80 <line:10:9, col:75> 'int' contains-errors '=='
    |   | |   |-CallExpr 0x12c029d28 <col:9, col:70> '<dependent type>' contains-errors
    |   | |   | |-DeclRefExpr 0x12c0297a8 <col:9> 'int ()' Function 0x12c0294f8 'find_type' 'int ()'
    |   | |   | |-ArraySubscriptExpr 0x12c029cb0 <col:19, col:35> 'char *' lvalue
    |   | |   | | |-ImplicitCastExpr 0x12c029c98 <col:19, col:25> 'char **' <LValueToRValue>
    |   | |   | | | `-ParenExpr 0x12c029c40 <col:19, col:25> 'char **' lvalue
    |   | |   | | |   `-UnaryOperator 0x12c029c28 <col:20, col:21> 'char **' lvalue prefix '*' cannot overflow
    |   | |   | | |     `-ImplicitCastExpr 0x12c029c10 <col:21> 'char ***' <LValueToRValue>
    |   | |   | | |       `-DeclRefExpr 0x12c0297c8 <col:21> 'char ***' lvalue ParmVar 0x12c00ddc0 'argv' 'char ***'
    |   | |   | | `-BinaryOperator 0x12c029c78 <col:27, col:34> 'int' '-'
    |   | |   | |   |-ImplicitCastExpr 0x12c029c60 <col:27> 'int' <LValueToRValue>
    |   | |   | |   | `-DeclRefExpr 0x12c029838 <col:27> 'int' lvalue ParmVar 0x12c00dcd8 'argc' 'int'
    |   | |   | |   `-IntegerLiteral 0x12c029858 <col:34> 'int' 1
    |   | |   | |-UnaryOperator 0x12c029cf0 <col:37, col:38> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | |   | | `-RecoveryExpr 0x12c029cd0 <col:38> '<dependent type>' contains-errors lvalue
    |   | |   | `-RecoveryExpr 0x12c029d08 <col:55> '<dependent type>' contains-errors lvalue
    |   | |   `-RecoveryExpr 0x12c029d60 <col:75> '<dependent type>' contains-errors lvalue
    |   | `-CompoundStmt 0x12c02a730 <line:11:5, line:18:6>
    |   |   |-DeclStmt 0x12c02a360 <line:12:7, col:33>
    |   |   | `-VarDecl 0x12c02a200 <col:7, col:32> col:13 used start 'char *' cinit
    |   |   |   `-ImplicitCastExpr 0x12c02a348 <col:20, col:32> 'char *' <LValueToRValue>
    |   |   |     `-ArraySubscriptExpr 0x12c02a328 <col:20, col:32> 'char *' lvalue
    |   |   |       |-ImplicitCastExpr 0x12c02a2f8 <col:20, col:26> 'char **' <LValueToRValue>
    |   |   |       | `-ParenExpr 0x12c02a2b8 <col:20, col:26> 'char **' lvalue
    |   |   |       |   `-UnaryOperator 0x12c02a2a0 <col:21, col:22> 'char **' lvalue prefix '*' cannot overflow
    |   |   |       |     `-ImplicitCastExpr 0x12c02a288 <col:22> 'char ***' <LValueToRValue>
    |   |   |       |       `-DeclRefExpr 0x12c02a268 <col:22> 'char ***' lvalue ParmVar 0x12c00ddc0 'argv' 'char ***'
    |   |   |       `-ImplicitCastExpr 0x12c02a310 <col:28> 'int' <LValueToRValue>
    |   |   |         `-DeclRefExpr 0x12c02a2d8 <col:28> 'int' lvalue ParmVar 0x12c00dcd8 'argc' 'int'
    |   |   |-WhileStmt 0x12c02a480 <line:13:7, line:14:19>
    |   |   | |-ImplicitCastExpr 0x12c02a3c8 <line:13:14, col:15> 'char' <LValueToRValue>
    |   |   | | `-UnaryOperator 0x12c02a3b0 <col:14, col:15> 'char' lvalue prefix '*' cannot overflow
    |   |   | |   `-ImplicitCastExpr 0x12c02a398 <col:15> 'char *' <LValueToRValue>
    |   |   | |     `-DeclRefExpr 0x12c02a378 <col:15> 'char *' lvalue Var 0x12c02a200 'start' 'char *'
    |   |   | `-BinaryOperator 0x12c02a460 <line:14:9, col:19> 'char' '='
    |   |   |   |-UnaryOperator 0x12c02a418 <col:9, col:15> 'char' lvalue prefix '*' cannot overflow
    |   |   |   | `-UnaryOperator 0x12c02a400 <col:10, col:15> 'char *' postfix '++'
    |   |   |   |   `-DeclRefExpr 0x12c02a3e0 <col:10> 'char *' lvalue Var 0x12c02a200 'start' 'char *'
    |   |   |   `-ImplicitCastExpr 0x12c02a448 <col:19> 'char' <IntegralCast>
    |   |   |     `-CharacterLiteral 0x12c02a430 <col:19> 'int' 120
    |   |   |-BinaryOperator 0x12c02a5b8 <line:15:7, col:26> 'char *' '='
    |   |   | |-DeclRefExpr 0x12c02a4a0 <col:7> 'char *' lvalue Var 0x12c02a200 'start' 'char *'
    |   |   | `-ImplicitCastExpr 0x12c02a5a0 <col:14, col:26> 'char *' <LValueToRValue>
    |   |   |   `-ArraySubscriptExpr 0x12c02a580 <col:14, col:26> 'char *' lvalue
    |   |   |     |-ImplicitCastExpr 0x12c02a550 <col:14, col:20> 'char **' <LValueToRValue>
    |   |   |     | `-ParenExpr 0x12c02a510 <col:14, col:20> 'char **' lvalue
    |   |   |     |   `-UnaryOperator 0x12c02a4f8 <col:15, col:16> 'char **' lvalue prefix '*' cannot overflow
    |   |   |     |     `-ImplicitCastExpr 0x12c02a4e0 <col:16> 'char ***' <LValueToRValue>
    |   |   |     |       `-DeclRefExpr 0x12c02a4c0 <col:16> 'char ***' lvalue ParmVar 0x12c00ddc0 'argv' 'char ***'
    |   |   |     `-ImplicitCastExpr 0x12c02a568 <col:22> 'int' <LValueToRValue>
    |   |   |       `-DeclRefExpr 0x12c02a530 <col:22> 'int' lvalue ParmVar 0x12c00dcd8 'argc' 'int'
    |   |   `-IfStmt 0x12c02a710 <line:16:7, line:17:19>
    |   |     |-ImplicitCastExpr 0x12c02a628 <line:16:11, col:12> 'char' <LValueToRValue>
    |   |     | `-UnaryOperator 0x12c02a610 <col:11, col:12> 'char' lvalue prefix '*' cannot overflow
    |   |     |   `-ImplicitCastExpr 0x12c02a5f8 <col:12> 'char *' <LValueToRValue>
    |   |     |     `-DeclRefExpr 0x12c02a5d8 <col:12> 'char *' lvalue Var 0x12c02a200 'start' 'char *'
    |   |     `-BinaryOperator 0x12c02a6f0 <line:17:9, col:19> 'char' '='
    |   |       |-ArraySubscriptExpr 0x12c02a698 <col:9, col:16> 'char' lvalue
    |   |       | |-ImplicitCastExpr 0x12c02a680 <col:9> 'char *' <LValueToRValue>
    |   |       | | `-DeclRefExpr 0x12c02a640 <col:9> 'char *' lvalue Var 0x12c02a200 'start' 'char *'
    |   |       | `-IntegerLiteral 0x12c02a660 <col:15> 'int' 1
    |   |       `-ImplicitCastExpr 0x12c02a6d8 <col:19> 'char' <IntegralCast>
    |   |         `-IntegerLiteral 0x12c02a6b8 <col:19> 'int' 0
    |   `-UnaryOperator 0x12c02a7a0 <line:19:5, col:9> 'int' postfix '--'
    |     `-DeclRefExpr 0x12c02a780 <col:5> 'int' lvalue ParmVar 0x12c00dcd8 'argc' 'int'
    |-BinaryOperator 0x12c02ac98 <line:21:3, col:56> 'char *' contains-errors '='
    | |-ArraySubscriptExpr 0x12c02ab60 <col:3, col:17> 'char *' lvalue
    | | |-ImplicitCastExpr 0x12c02ab30 <col:3> 'char **' <LValueToRValue>
    | | | `-DeclRefExpr 0x12c02a800 <col:3> 'char **' lvalue Var 0x12c00dfc0 'temp_argv' 'char **'
    | | `-ImplicitCastExpr 0x12c02ab48 <col:13> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x12c02a820 <col:13> 'int' lvalue ParmVar 0x12c00dcd8 'argc' 'int'
    | `-CallExpr 0x12c02ac68 <col:20, col:56> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x12c02a890 <col:20> 'int ()' Function 0x12c028ff0 'my_strdup' 'int ()'
    |   |-ArraySubscriptExpr 0x12c02ac00 <col:30, col:42> 'char *' lvalue
    |   | |-ImplicitCastExpr 0x12c02abd0 <col:30, col:36> 'char **' <LValueToRValue>
    |   | | `-ParenExpr 0x12c02abb0 <col:30, col:36> 'char **' lvalue
    |   | |   `-UnaryOperator 0x12c02ab98 <col:31, col:32> 'char **' lvalue prefix '*' cannot overflow
    |   | |     `-ImplicitCastExpr 0x12c02ab80 <col:32> 'char ***' <LValueToRValue>
    |   | |       `-DeclRefExpr 0x12c02a8b0 <col:32> 'char ***' lvalue ParmVar 0x12c00ddc0 'argv' 'char ***'
    |   | `-ImplicitCastExpr 0x12c02abe8 <col:38> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x12c02a920 <col:38> 'int' lvalue ParmVar 0x12c00dcd8 'argc' 'int'
    |   `-CallExpr 0x12c02ac40 <col:45, col:55> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x12c02a990 <col:45> 'int ()' Function 0x12c00e280 'MYF' 'int ()'
    |     `-RecoveryExpr 0x12c02ac20 <col:49> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x12c02ad10 <line:22:3, col:19>
      `-ImplicitCastExpr 0x12c02acf8 <col:9, col:19> 'char **' <LValueToRValue>
        `-ParenExpr 0x12c02acd8 <col:9, col:19> 'char **' lvalue
          `-DeclRefExpr 0x12c02acb8 <col:10> 'char **' lvalue Var 0x12c00dfc0 'temp_argv' 'char **'
