TranslationUnitDecl 0x14c055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x14c0564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x14c055bd0 '__int128'
|-TypedefDecl 0x14c056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x14c055bf0 'unsigned __int128'
|-TypedefDecl 0x14c126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x14c126000 'struct __NSConstantString_tag'
|   `-Record 0x14c056580 '__NSConstantString_tag'
|-TypedefDecl 0x14c126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x14c055d90 '__SVInt8_t'
|-TypedefDecl 0x14c126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x14c055db0 '__SVInt16_t'
|-TypedefDecl 0x14c126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x14c055dd0 '__SVInt32_t'
|-TypedefDecl 0x14c1263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x14c055df0 '__SVInt64_t'
|-TypedefDecl 0x14c126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x14c055e10 '__SVUint8_t'
|-TypedefDecl 0x14c1264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x14c055e30 '__SVUint16_t'
|-TypedefDecl 0x14c126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x14c055e50 '__SVUint32_t'
|-TypedefDecl 0x14c126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x14c055e70 '__SVUint64_t'
|-TypedefDecl 0x14c1265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x14c055e90 '__SVFloat16_t'
|-TypedefDecl 0x14c126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x14c055eb0 '__SVFloat32_t'
|-TypedefDecl 0x14c1266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x14c055ed0 '__SVFloat64_t'
|-TypedefDecl 0x14c126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x14c055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x14c126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x14c055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x14c1267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x14c055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x14c126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x14c055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x14c1268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x14c055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x14c126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x14c055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x14c126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x14c055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x14c1269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x14c055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x14c126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x14c055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x14c126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x14c056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x14c126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x14c056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x14c126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x14c056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x14c126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x14c056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x14c126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x14c056090 '__clang_svint8x3_t'
|-TypedefDecl 0x14c126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x14c0560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x14c126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x14c0560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x14c126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x14c0560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x14c126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x14c056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x14c126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x14c056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x14c126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x14c056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x14c126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x14c056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x14c126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x14c056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x14c127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x14c0561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x14c127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x14c0561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x14c1278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x14c0561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x14c127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x14c056210 '__clang_svint8x4_t'
|-TypedefDecl 0x14c1279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x14c056230 '__clang_svint16x4_t'
|-TypedefDecl 0x14c127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x14c056250 '__clang_svint32x4_t'
|-TypedefDecl 0x14c127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x14c056270 '__clang_svint64x4_t'
|-TypedefDecl 0x14c127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x14c056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x14c127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x14c0562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x14c127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x14c0562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x14c127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x14c0562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x14c127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x14c056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x14c127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x14c056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x14c127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x14c056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x14c127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x14c056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x14c127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x14c056390 '__SVBool_t'
|-TypedefDecl 0x14c127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x14c0563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x14c127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x14c0563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x14c127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x14c0563f0 '__SVCount_t'
|-TypedefDecl 0x14c127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x14c127fb0 'char *'
|   `-BuiltinType 0x14c0556b0 'char'
|-TypedefDecl 0x14c128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x14c127fb0 'char *'
|   `-BuiltinType 0x14c0556b0 'char'
`-FunctionDecl 0x14c128258 <dataset_diviso_filec/func15955_vuln.c:1:1, line:57:1> line:1:1 regtilde 'int (char *, int)'
  |-ParmVarDecl 0x14c1280f0 <col:10, col:18> col:18 used source 'char *'
  |-ParmVarDecl 0x14c128170 <col:26, col:30> col:30 used magic 'int'
  `-CompoundStmt 0x14c808ae0 <line:2:1, line:57:1>
    |-DeclStmt 0x14c128410 <line:3:5, col:28>
    | `-VarDecl 0x14c128370 <col:5, col:22> col:13 used newsub 'char *' cinit
    |   `-ImplicitCastExpr 0x14c1283f8 <col:22> 'char *' <LValueToRValue>
    |     `-DeclRefExpr 0x14c1283d8 <col:22> 'char *' lvalue ParmVar 0x14c1280f0 'source' 'char *'
    |-DeclStmt 0x14c1284a8 <line:4:5, col:19>
    | `-VarDecl 0x14c128440 <col:5, col:13> col:13 used tmpsub 'char *'
    |-DeclStmt 0x14c128540 <line:5:5, col:14>
    | `-VarDecl 0x14c1284d8 <col:5, col:13> col:13 used p 'char *'
    |-DeclStmt 0x14c1285d8 <line:6:5, col:13>
    | `-VarDecl 0x14c128570 <col:5, col:10> col:10 used len 'int'
    |-DeclStmt 0x14c128670 <line:7:5, col:17>
    | `-VarDecl 0x14c128608 <col:5, col:10> col:10 used prevlen 'int'
    |-ForStmt 0x14c808800 <line:9:5, line:49:5>
    | |-BinaryOperator 0x14c1286e0 <line:9:10, col:14> 'char *' '='
    | | |-DeclRefExpr 0x14c128688 <col:10> 'char *' lvalue Var 0x14c1284d8 'p' 'char *'
    | | `-ImplicitCastExpr 0x14c1286c8 <col:14> 'char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x14c1286a8 <col:14> 'char *' lvalue Var 0x14c128370 'newsub' 'char *'
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x14c128750 <col:22, col:23> 'char' <LValueToRValue>
    | | `-UnaryOperator 0x14c128738 <col:22, col:23> 'char' lvalue prefix '*' cannot overflow
    | |   `-ImplicitCastExpr 0x14c128720 <col:23> 'char *' <LValueToRValue>
    | |     `-DeclRefExpr 0x14c128700 <col:23> 'char *' lvalue Var 0x14c1284d8 'p' 'char *'
    | |-UnaryOperator 0x14c128788 <col:26, col:28> 'char *' prefix '++'
    | | `-DeclRefExpr 0x14c128768 <col:28> 'char *' lvalue Var 0x14c1284d8 'p' 'char *'
    | `-CompoundStmt 0x14c1459d8 <line:10:5, line:49:5>
    |   `-IfStmt 0x14c1459a8 <line:11:2, line:48:2> has_else
    |     |-BinaryOperator 0x14c140d60 <line:11:6, col:70> 'int' '||'
    |     | |-ParenExpr 0x14c140ac0 <col:6, col:25> 'int'
    |     | | `-BinaryOperator 0x14c140aa0 <col:7, col:20> 'int' '&&'
    |     | |   |-BinaryOperator 0x14c140a48 <col:7, col:13> 'int' '=='
    |     | |   | |-ImplicitCastExpr 0x14c140a30 <col:7, col:8> 'int' <IntegralCast>
    |     | |   | | `-ImplicitCastExpr 0x14c140a18 <col:7, col:8> 'char' <LValueToRValue>
    |     | |   | |   `-UnaryOperator 0x14c1287d8 <col:7, col:8> 'char' lvalue prefix '*' cannot overflow
    |     | |   | |     `-ImplicitCastExpr 0x14c1287c0 <col:8> 'char *' <LValueToRValue>
    |     | |   | |       `-DeclRefExpr 0x14c1287a0 <col:8> 'char *' lvalue Var 0x14c1284d8 'p' 'char *'
    |     | |   | `-CharacterLiteral 0x14c140a00 <col:13> 'int' 126
    |     | |   `-ImplicitCastExpr 0x14c140a88 <col:20> 'int' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x14c140a68 <col:20> 'int' lvalue ParmVar 0x14c128170 'magic' 'int'
    |     | `-ParenExpr 0x14c140d40 <col:30, col:70> 'int'
    |     |   `-BinaryOperator 0x14c140d20 <col:31, col:65> 'int' '&&'
    |     |     |-BinaryOperator 0x14c140cb0 <col:31, col:57> 'int' '&&'
    |     |     | |-BinaryOperator 0x14c140b78 <col:31, col:37> 'int' '=='
    |     |     | | |-ImplicitCastExpr 0x14c140b60 <col:31, col:32> 'int' <IntegralCast>
    |     |     | | | `-ImplicitCastExpr 0x14c140b48 <col:31, col:32> 'char' <LValueToRValue>
    |     |     | | |   `-UnaryOperator 0x14c140b18 <col:31, col:32> 'char' lvalue prefix '*' cannot overflow
    |     |     | | |     `-ImplicitCastExpr 0x14c140b00 <col:32> 'char *' <LValueToRValue>
    |     |     | | |       `-DeclRefExpr 0x14c140ae0 <col:32> 'char *' lvalue Var 0x14c1284d8 'p' 'char *'
    |     |     | | `-CharacterLiteral 0x14c140b30 <col:37> 'int' 92
    |     |     | `-BinaryOperator 0x14c140c90 <col:45, col:57> 'int' '=='
    |     |     |   |-ImplicitCastExpr 0x14c140c78 <col:45, col:52> 'int' <IntegralCast>
    |     |     |   | `-ImplicitCastExpr 0x14c140c60 <col:45, col:52> 'char' <LValueToRValue>
    |     |     |   |   `-UnaryOperator 0x14c140c30 <col:45, col:52> 'char' lvalue prefix '*' cannot overflow
    |     |     |   |     `-ParenExpr 0x14c140c10 <col:46, col:52> 'char *'
    |     |     |   |       `-BinaryOperator 0x14c140bf0 <col:47, col:51> 'char *' '+'
    |     |     |   |         |-ImplicitCastExpr 0x14c140bd8 <col:47> 'char *' <LValueToRValue>
    |     |     |   |         | `-DeclRefExpr 0x14c140b98 <col:47> 'char *' lvalue Var 0x14c1284d8 'p' 'char *'
    |     |     |   |         `-IntegerLiteral 0x14c140bb8 <col:51> 'int' 1
    |     |     |   `-CharacterLiteral 0x14c140c48 <col:57> 'int' 126
    |     |     `-UnaryOperator 0x14c140d08 <col:64, col:65> 'int' prefix '!' cannot overflow
    |     |       `-ImplicitCastExpr 0x14c140cf0 <col:65> 'int' <LValueToRValue>
    |     |         `-DeclRefExpr 0x14c140cd0 <col:65> 'int' lvalue ParmVar 0x14c128170 'magic' 'int'
    |     |-CompoundStmt 0x14c145718 <line:12:2, line:41:2>
    |     | |-IfStmt 0x14c1456b0 <line:13:6, line:39:19> has_else
    |     | | |-BinaryOperator 0x14c140e10 <line:13:10, col:26> 'int' contains-errors '!='
    |     | | | |-RecoveryExpr 0x14c140dd0 <col:10> '<dependent type>' contains-errors lvalue
    |     | | | `-RecoveryExpr 0x14c140df0 <col:26> '<dependent type>' contains-errors lvalue
    |     | | |-CompoundStmt 0x14c145318 <line:14:6, line:35:6>
    |     | | | |-BinaryOperator 0x14c1416a0 <line:17:3, col:42> 'char *' '='
    |     | | | | |-DeclRefExpr 0x14c140fd8 <col:3> 'char *' lvalue Var 0x14c128440 'tmpsub' 'char *'
    |     | | | | `-ImplicitCastExpr 0x14c141260 <col:12, col:42> 'char *' <IntegralToPointer>
    |     | | | |   `-CallExpr 0x14c141238 <col:12, col:42> 'int'
    |     | | | |     |-ImplicitCastExpr 0x14c141220 <col:12> 'int (*)()' <FunctionToPointerDecay>
    |     | | | |     | `-DeclRefExpr 0x14c1410d8 <col:12> 'int ()' Function 0x14c141020 'alloc' 'int ()'
    |     | | | |     `-BinaryOperator 0x14c141200 <col:18, col:35> 'int' '+'
    |     | | | |       |-CallExpr 0x14c141188 <col:18, col:31> 'int'
    |     | | | |       | |-ImplicitCastExpr 0x14c141170 <col:18> 'int (*)()' <FunctionToPointerDecay>
    |     | | | |       | | `-DeclRefExpr 0x14c1410f8 <col:18> 'int ()' Function 0x14c140ea8 'STRLEN' 'int ()'
    |     | | | |       | `-ImplicitCastExpr 0x14c1411b0 <col:25> 'char *' <LValueToRValue>
    |     | | | |       |   `-DeclRefExpr 0x14c141118 <col:25> 'char *' lvalue Var 0x14c128370 'newsub' 'char *'
    |     | | | |       `-ImplicitCastExpr 0x14c1411e8 <col:35> 'int' <LValueToRValue>
    |     | | | |         `-DeclRefExpr 0x14c1411c8 <col:35> 'int' lvalue Var 0x14c128608 'prevlen' 'int'
    |     | | | `-IfStmt 0x14c1452f8 <line:18:3, line:34:3>
    |     | | |   |-BinaryOperator 0x14c141738 <line:18:7, col:17> 'int' contains-errors '!='
    |     | | |   | |-DeclRefExpr 0x14c1416c0 <col:7> 'char *' lvalue Var 0x14c128440 'tmpsub' 'char *'
    |     | | |   | `-RecoveryExpr 0x14c141718 <col:17> '<dependent type>' contains-errors lvalue
    |     | | |   `-CompoundStmt 0x14c1452b8 <line:19:3, line:34:3>
    |     | | |     |-BinaryOperator 0x14c141888 <line:21:7, col:29> 'int' '='
    |     | | |     | |-DeclRefExpr 0x14c141758 <col:7> 'int' lvalue Var 0x14c128570 'len' 'int'
    |     | | |     | `-CStyleCastExpr 0x14c141860 <col:13, col:29> 'int' <IntegralCast>
    |     | | |     |   `-ParenExpr 0x14c141840 <col:18, col:29> 'long'
    |     | | |     |     `-BinaryOperator 0x14c1417e8 <col:19, col:23> 'long' '-'
    |     | | |     |       |-ImplicitCastExpr 0x14c1417b8 <col:19> 'char *' <LValueToRValue>
    |     | | |     |       | `-DeclRefExpr 0x14c141778 <col:19> 'char *' lvalue Var 0x14c1284d8 'p' 'char *'
    |     | | |     |       `-ImplicitCastExpr 0x14c1417d0 <col:23> 'char *' <LValueToRValue>
    |     | | |     |         `-DeclRefExpr 0x14c141798 <col:23> 'char *' lvalue Var 0x14c128370 'newsub' 'char *'
    |     | | |     |-IfStmt 0x14c144c28 <line:26:7, line:27:6>
    |     | | |     | |-UnaryOperator 0x14c144bd8 <line:26:11, col:12> 'int' prefix '!' cannot overflow
    |     | | |     | | `-ImplicitCastExpr 0x14c144bc0 <col:12> 'int' <LValueToRValue>
    |     | | |     | |   `-DeclRefExpr 0x14c144ba0 <col:12> 'int' lvalue ParmVar 0x14c128170 'magic' 'int'
    |     | | |     | `-UnaryOperator 0x14c144c10 <line:27:4, col:6> 'char *' prefix '++'
    |     | | |     |   `-DeclRefExpr 0x14c144bf0 <col:6> 'char *' lvalue Var 0x14c1284d8 'p' 'char *'
    |     | | |     |-CallExpr 0x14c144ec0 <line:28:7, col:43> 'int'
    |     | | |     | |-ImplicitCastExpr 0x14c144ea8 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |     | | |     | | `-DeclRefExpr 0x14c144d28 <col:7> 'int ()' Function 0x14c144c70 'STRCPY' 'int ()'
    |     | | |     | |-BinaryOperator 0x14c144e10 <col:14, col:29> 'char *' '+'
    |     | | |     | | |-BinaryOperator 0x14c144db8 <col:14, col:23> 'char *' '+'
    |     | | |     | | | |-ImplicitCastExpr 0x14c144d88 <col:14> 'char *' <LValueToRValue>
    |     | | |     | | | | `-DeclRefExpr 0x14c144d48 <col:14> 'char *' lvalue Var 0x14c128440 'tmpsub' 'char *'
    |     | | |     | | | `-ImplicitCastExpr 0x14c144da0 <col:23> 'int' <LValueToRValue>
    |     | | |     | | |   `-DeclRefExpr 0x14c144d68 <col:23> 'int' lvalue Var 0x14c128570 'len' 'int'
    |     | | |     | | `-ImplicitCastExpr 0x14c144df8 <col:29> 'int' <LValueToRValue>
    |     | | |     | |   `-DeclRefExpr 0x14c144dd8 <col:29> 'int' lvalue Var 0x14c128608 'prevlen' 'int'
    |     | | |     | `-BinaryOperator 0x14c144e88 <col:38, col:42> 'char *' '+'
    |     | | |     |   |-ImplicitCastExpr 0x14c144e70 <col:38> 'char *' <LValueToRValue>
    |     | | |     |   | `-DeclRefExpr 0x14c144e30 <col:38> 'char *' lvalue Var 0x14c1284d8 'p' 'char *'
    |     | | |     |   `-IntegerLiteral 0x14c144e50 <col:42> 'int' 1
    |     | | |     |-IfStmt 0x14c1450f8 <line:30:7, line:31:19>
    |     | | |     | |-BinaryOperator 0x14c144f60 <line:30:11, col:21> 'int' '!='
    |     | | |     | | |-ImplicitCastExpr 0x14c144f30 <col:11> 'char *' <LValueToRValue>
    |     | | |     | | | `-DeclRefExpr 0x14c144ef0 <col:11> 'char *' lvalue Var 0x14c128370 'newsub' 'char *'
    |     | | |     | | `-ImplicitCastExpr 0x14c144f48 <col:21> 'char *' <LValueToRValue>
    |     | | |     | |   `-DeclRefExpr 0x14c144f10 <col:21> 'char *' lvalue ParmVar 0x14c1280f0 'source' 'char *'
    |     | | |     | `-CallExpr 0x14c1450b8 <line:31:4, col:19> 'int'
    |     | | |     |   |-ImplicitCastExpr 0x14c1450a0 <col:4> 'int (*)()' <FunctionToPointerDecay>
    |     | | |     |   | `-DeclRefExpr 0x14c145060 <col:4> 'int ()' Function 0x14c144fa8 'vim_free' 'int ()'
    |     | | |     |   `-ImplicitCastExpr 0x14c1450e0 <col:13> 'char *' <LValueToRValue>
    |     | | |     |     `-DeclRefExpr 0x14c145080 <col:13> 'char *' lvalue Var 0x14c128370 'newsub' 'char *'
    |     | | |     |-BinaryOperator 0x14c145170 <line:32:7, col:16> 'char *' '='
    |     | | |     | |-DeclRefExpr 0x14c145118 <col:7> 'char *' lvalue Var 0x14c128370 'newsub' 'char *'
    |     | | |     | `-ImplicitCastExpr 0x14c145158 <col:16> 'char *' <LValueToRValue>
    |     | | |     |   `-DeclRefExpr 0x14c145138 <col:16> 'char *' lvalue Var 0x14c128440 'tmpsub' 'char *'
    |     | | |     `-BinaryOperator 0x14c145298 <line:33:7, col:26> 'char *' '='
    |     | | |       |-DeclRefExpr 0x14c145190 <col:7> 'char *' lvalue Var 0x14c1284d8 'p' 'char *'
    |     | | |       `-BinaryOperator 0x14c145278 <col:11, col:26> 'char *' '+'
    |     | | |         |-BinaryOperator 0x14c145220 <col:11, col:20> 'char *' '+'
    |     | | |         | |-ImplicitCastExpr 0x14c1451f0 <col:11> 'char *' <LValueToRValue>
    |     | | |         | | `-DeclRefExpr 0x14c1451b0 <col:11> 'char *' lvalue Var 0x14c128370 'newsub' 'char *'
    |     | | |         | `-ImplicitCastExpr 0x14c145208 <col:20> 'int' <LValueToRValue>
    |     | | |         |   `-DeclRefExpr 0x14c1451d0 <col:20> 'int' lvalue Var 0x14c128570 'len' 'int'
    |     | | |         `-ImplicitCastExpr 0x14c145260 <col:26> 'int' <LValueToRValue>
    |     | | |           `-DeclRefExpr 0x14c145240 <col:26> 'int' lvalue Var 0x14c128608 'prevlen' 'int'
    |     | | `-IfStmt 0x14c145680 <line:36:11, line:39:19> has_else
    |     | |   |-ImplicitCastExpr 0x14c145358 <line:36:15> 'int' <LValueToRValue>
    |     | |   | `-DeclRefExpr 0x14c145338 <col:15> 'int' lvalue ParmVar 0x14c128170 'magic' 'int'
    |     | |   |-CallExpr 0x14c145520 <line:37:3, col:19> 'int'
    |     | |   | |-ImplicitCastExpr 0x14c145508 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |     | |   | | `-DeclRefExpr 0x14c145450 <col:3> 'int ()' Function 0x14c145398 'STRMOVE' 'int ()'
    |     | |   | |-ImplicitCastExpr 0x14c145550 <col:11> 'char *' <LValueToRValue>
    |     | |   | | `-DeclRefExpr 0x14c145470 <col:11> 'char *' lvalue Var 0x14c1284d8 'p' 'char *'
    |     | |   | `-BinaryOperator 0x14c1454e8 <col:14, col:18> 'char *' '+'
    |     | |   |   |-ImplicitCastExpr 0x14c1454d0 <col:14> 'char *' <LValueToRValue>
    |     | |   |   | `-DeclRefExpr 0x14c145490 <col:14> 'char *' lvalue Var 0x14c1284d8 'p' 'char *'
    |     | |   |   `-IntegerLiteral 0x14c1454b0 <col:18> 'int' 1
    |     | |   `-CallExpr 0x14c145638 <line:39:3, col:19> 'int'
    |     | |     |-ImplicitCastExpr 0x14c145620 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |     | |     | `-DeclRefExpr 0x14c145568 <col:3> 'int ()' Function 0x14c145398 'STRMOVE' 'int ()'
    |     | |     |-ImplicitCastExpr 0x14c145668 <col:11> 'char *' <LValueToRValue>
    |     | |     | `-DeclRefExpr 0x14c145588 <col:11> 'char *' lvalue Var 0x14c1284d8 'p' 'char *'
    |     | |     `-BinaryOperator 0x14c145600 <col:14, col:18> 'char *' '+'
    |     | |       |-ImplicitCastExpr 0x14c1455e8 <col:14> 'char *' <LValueToRValue>
    |     | |       | `-DeclRefExpr 0x14c1455a8 <col:14> 'char *' lvalue Var 0x14c1284d8 'p' 'char *'
    |     | |       `-IntegerLiteral 0x14c1455c8 <col:18> 'int' 2
    |     | `-UnaryOperator 0x14c145700 <line:40:6, col:8> 'char *' prefix '--'
    |     |   `-DeclRefExpr 0x14c1456e0 <col:8> 'char *' lvalue Var 0x14c1284d8 'p' 'char *'
    |     `-CompoundStmt 0x14c145990 <line:43:2, line:48:2>
    |       `-IfStmt 0x14c1458f0 <line:44:6, line:45:5>
    |         |-BinaryOperator 0x14c145898 <line:44:10, col:27> 'int' '&&'
    |         | |-BinaryOperator 0x14c1457d0 <col:10, col:16> 'int' '=='
    |         | | |-ImplicitCastExpr 0x14c1457b8 <col:10, col:11> 'int' <IntegralCast>
    |         | | | `-ImplicitCastExpr 0x14c1457a0 <col:10, col:11> 'char' <LValueToRValue>
    |         | | |   `-UnaryOperator 0x14c145770 <col:10, col:11> 'char' lvalue prefix '*' cannot overflow
    |         | | |     `-ImplicitCastExpr 0x14c145758 <col:11> 'char *' <LValueToRValue>
    |         | | |       `-DeclRefExpr 0x14c145738 <col:11> 'char *' lvalue Var 0x14c1284d8 'p' 'char *'
    |         | | `-CharacterLiteral 0x14c145788 <col:16> 'int' 92
    |         | `-ImplicitCastExpr 0x14c145880 <col:24, col:27> 'int' <IntegralCast>
    |         |   `-ImplicitCastExpr 0x14c145868 <col:24, col:27> 'char' <LValueToRValue>
    |         |     `-ArraySubscriptExpr 0x14c145848 <col:24, col:27> 'char' lvalue
    |         |       |-ImplicitCastExpr 0x14c145830 <col:24> 'char *' <LValueToRValue>
    |         |       | `-DeclRefExpr 0x14c1457f0 <col:24> 'char *' lvalue Var 0x14c1284d8 'p' 'char *'
    |         |       `-IntegerLiteral 0x14c145810 <col:26> 'int' 1
    |         `-UnaryOperator 0x14c1458d8 <line:45:3, col:5> 'char *' prefix '++'
    |           `-DeclRefExpr 0x14c1458b8 <col:5> 'char *' lvalue Var 0x14c1284d8 'p' 'char *'
    `-ReturnStmt 0x14c808ad0 <line:56:5, col:12>
      `-ImplicitCastExpr 0x14c808ab8 <col:12> 'int' <PointerToIntegral>
        `-ImplicitCastExpr 0x14c808aa0 <col:12> 'char *' <LValueToRValue>
          `-DeclRefExpr 0x14c808a80 <col:12> 'char *' lvalue Var 0x14c128370 'newsub' 'char *'
