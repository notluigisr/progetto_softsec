TranslationUnitDecl 0x131055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1310564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x131055bd0 '__int128'
|-TypedefDecl 0x131056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x131055bf0 'unsigned __int128'
|-TypedefDecl 0x13180be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13180bc00 'struct __NSConstantString_tag'
|   `-Record 0x131056580 '__NSConstantString_tag'
|-TypedefDecl 0x13180be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x131055d90 '__SVInt8_t'
|-TypedefDecl 0x13180bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x131055db0 '__SVInt16_t'
|-TypedefDecl 0x13180bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x131055dd0 '__SVInt32_t'
|-TypedefDecl 0x13180bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x131055df0 '__SVInt64_t'
|-TypedefDecl 0x13180c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x131055e10 '__SVUint8_t'
|-TypedefDecl 0x13180c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x131055e30 '__SVUint16_t'
|-TypedefDecl 0x13180c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x131055e50 '__SVUint32_t'
|-TypedefDecl 0x13180c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x131055e70 '__SVUint64_t'
|-TypedefDecl 0x13180c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x131055e90 '__SVFloat16_t'
|-TypedefDecl 0x13180c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x131055eb0 '__SVFloat32_t'
|-TypedefDecl 0x13180c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x131055ed0 '__SVFloat64_t'
|-TypedefDecl 0x13180c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x131055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13180c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x131055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13180c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x131055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13180c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x131055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13180c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x131055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13180c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x131055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13180c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x131055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13180c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x131055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13180c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x131055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13180c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x131056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13180c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x131056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13180c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x131056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13180c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x131056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13180c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x131056090 '__clang_svint8x3_t'
|-TypedefDecl 0x13180c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1310560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13180c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1310560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13180c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1310560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13180c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x131056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13180ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x131056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13180cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x131056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13180cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x131056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13180cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x131056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13180d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1310561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13180d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1310561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13180d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1310561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13180d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x131056210 '__clang_svint8x4_t'
|-TypedefDecl 0x13180d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x131056230 '__clang_svint16x4_t'
|-TypedefDecl 0x13180d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x131056250 '__clang_svint32x4_t'
|-TypedefDecl 0x13180d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x131056270 '__clang_svint64x4_t'
|-TypedefDecl 0x13180d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x131056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13180d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1310562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13180d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1310562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13180d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1310562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13180d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x131056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13180d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x131056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13180d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x131056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13180d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x131056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13180da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x131056390 '__SVBool_t'
|-TypedefDecl 0x13180da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1310563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13180dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1310563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13180db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1310563f0 '__SVCount_t'
|-TypedefDecl 0x13180dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13180dbb0 'char *'
|   `-BuiltinType 0x1310556b0 'char'
|-TypedefDecl 0x13180dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13180dbb0 'char *'
|   `-BuiltinType 0x1310556b0 'char'
|-FunctionDecl 0x13180e128 <dataset_diviso_filec/func2693_nonvuln.c:1:1, line:26:1> line:1:20 invalid ConvertRGBToHSI 'int (const double, const double, const double, double *, double *, double *)'
| |-ParmVarDecl 0x13180dcf0 <col:36, col:49> col:49 used red 'const double'
| |-ParmVarDecl 0x13180dd70 <col:53, col:66> col:66 used green 'const double'
| |-ParmVarDecl 0x13180ddf0 <line:2:3, col:16> col:16 used blue 'const double'
| |-ParmVarDecl 0x13180dea8 <col:21, col:29> col:29 used hue 'double *'
| |-ParmVarDecl 0x13180df28 <col:33, col:41> col:41 used saturation 'double *'
| |-ParmVarDecl 0x13180dfa8 <col:52, col:60> col:60 used intensity 'double *'
| `-CompoundStmt 0x13182a110 <line:3:1, line:26:1>
|   |-DeclStmt 0x13180e318 <line:4:3, line:6:9>
|   | |-VarDecl 0x13180e218 <line:4:3, line:5:5> col:5 used alpha 'double'
|   | `-VarDecl 0x13180e298 <line:4:3, line:6:5> col:5 used beta 'double'
|   |-IfStmt 0x1318279c0 <line:13:3, line:18:5>
|   | |-BinaryOperator 0x131827848 <line:13:7, col:21> 'int' '<='
|   | | |-ImplicitCastExpr 0x131827830 <col:7, col:8> 'double' <LValueToRValue>
|   | | | `-UnaryOperator 0x1318277f8 <col:7, col:8> 'double' lvalue prefix '*' cannot overflow
|   | | |   `-ImplicitCastExpr 0x1318277e0 <col:8> 'double *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x1318277c0 <col:8> 'double *' lvalue ParmVar 0x13180dfa8 'intensity' 'double *'
|   | | `-FloatingLiteral 0x131827810 <col:21> 'double' 0.000000e+00
|   | `-CompoundStmt 0x131827998 <line:14:5, line:18:5>
|   |   |-BinaryOperator 0x1318278d8 <line:15:7, col:12> 'double' '='
|   |   | |-UnaryOperator 0x1318278a0 <col:7, col:8> 'double' lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x131827888 <col:8> 'double *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x131827868 <col:8> 'double *' lvalue ParmVar 0x13180dea8 'hue' 'double *'
|   |   | `-FloatingLiteral 0x1318278b8 <col:12> 'double' 0.000000e+00
|   |   |-BinaryOperator 0x131827968 <line:16:7, col:19> 'double' '='
|   |   | |-UnaryOperator 0x131827930 <col:7, col:8> 'double' lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x131827918 <col:8> 'double *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1318278f8 <col:8> 'double *' lvalue ParmVar 0x13180df28 'saturation' 'double *'
|   |   | `-FloatingLiteral 0x131827948 <col:19> 'double' 0.000000e+00
|   |   `-ReturnStmt 0x131827988 <line:17:7>
|   |-BinaryOperator 0x131827fb8 <line:19:3, line:20:36> 'double' contains-errors '='
|   | |-UnaryOperator 0x131827df0 <line:19:3, col:4> 'double' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x131827dd8 <col:4> 'double *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1318279e0 <col:4> 'double *' lvalue ParmVar 0x13180df28 'saturation' 'double *'
|   | `-BinaryOperator 0x131827f98 <col:15, line:20:36> '<dependent type>' contains-errors '-'
|   |   |-FloatingLiteral 0x131827a30 <line:19:15> 'double' 1.000000e+00
|   |   `-BinaryOperator 0x131827f78 <col:19, line:20:36> '<dependent type>' contains-errors '/'
|   |     |-CallExpr 0x131827ef8 <line:19:19, line:20:23> '<dependent type>' contains-errors
|   |     | |-DeclRefExpr 0x131827b30 <line:19:19> 'int ()' Function 0x131827a78 'MagickMin' 'int ()'
|   |     | |-BinaryOperator 0x131827e28 <col:29, col:42> '<dependent type>' contains-errors '*'
|   |     | | |-RecoveryExpr 0x131827e08 <col:29> '<dependent type>' contains-errors lvalue
|   |     | | `-DeclRefExpr 0x131827b68 <col:42> 'const double' lvalue ParmVar 0x13180dcf0 'red' 'const double'
|   |     | `-CallExpr 0x131827ec8 <col:46, line:20:22> '<dependent type>' contains-errors
|   |     |   |-DeclRefExpr 0x131827ba8 <line:19:46> 'int ()' Function 0x131827a78 'MagickMin' 'int ()'
|   |     |   |-BinaryOperator 0x131827e68 <col:56, col:69> '<dependent type>' contains-errors '*'
|   |     |   | |-RecoveryExpr 0x131827e48 <col:56> '<dependent type>' contains-errors lvalue
|   |     |   | `-DeclRefExpr 0x131827be0 <col:69> 'const double' lvalue ParmVar 0x13180dd70 'green' 'const double'
|   |     |   `-BinaryOperator 0x131827ea8 <line:20:5, col:18> '<dependent type>' contains-errors '*'
|   |     |     |-RecoveryExpr 0x131827e88 <col:5> '<dependent type>' contains-errors lvalue
|   |     |     `-DeclRefExpr 0x131827c38 <col:18> 'const double' lvalue ParmVar 0x13180ddf0 'blue' 'const double'
|   |     `-ParenExpr 0x131827f58 <col:25, col:36> 'double' lvalue
|   |       `-UnaryOperator 0x131827f40 <col:26, col:27> 'double' lvalue prefix '*' cannot overflow
|   |         `-ImplicitCastExpr 0x131827f28 <col:27> 'double *' <LValueToRValue>
|   |           `-DeclRefExpr 0x131827cd8 <col:27> 'double *' lvalue ParmVar 0x13180dfa8 'intensity' 'double *'
|   `-IfStmt 0x13182a0f0 <line:24:3, line:25:11>
|     |-BinaryOperator 0x13182a030 <line:24:7, col:14> 'int' '<'
|     | |-ImplicitCastExpr 0x13182a018 <col:7, col:8> 'double' <LValueToRValue>
|     | | `-UnaryOperator 0x131829fe0 <col:7, col:8> 'double' lvalue prefix '*' cannot overflow
|     | |   `-ImplicitCastExpr 0x131829fc8 <col:8> 'double *' <LValueToRValue>
|     | |     `-DeclRefExpr 0x131829fa8 <col:8> 'double *' lvalue ParmVar 0x13180dea8 'hue' 'double *'
|     | `-FloatingLiteral 0x131829ff8 <col:14> 'double' 0.000000e+00
|     `-CompoundAssignOperator 0x13182a0c0 <line:25:5, col:11> 'double' '+=' ComputeLHSTy='double' ComputeResultTy='double'
|       |-UnaryOperator 0x13182a088 <col:5, col:6> 'double' lvalue prefix '*' cannot overflow
|       | `-ImplicitCastExpr 0x13182a070 <col:6> 'double *' <LValueToRValue>
|       |   `-DeclRefExpr 0x13182a050 <col:6> 'double *' lvalue ParmVar 0x13180dea8 'hue' 'double *'
|       `-FloatingLiteral 0x13182a0a0 <col:11> 'double' 1.000000e+00
`-FunctionDecl 0x131829b90 <line:23:8> col:8 implicit used atan2 'double (double, double)' extern
  |-ParmVarDecl 0x131829c90 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x131829cf8 <<invalid sloc>> <invalid sloc> 'double'
  |-BuiltinAttr 0x131829c38 <<invalid sloc>> Implicit 995
  |-ConstAttr 0x131829d70 <col:8> Implicit
  `-NoThrowAttr 0x131829d98 <col:8> Implicit
