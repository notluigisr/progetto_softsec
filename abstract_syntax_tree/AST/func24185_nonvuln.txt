TranslationUnitDecl 0x13d855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x13d8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x13d855bd0 '__int128'
|-TypedefDecl 0x13d856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x13d855bf0 'unsigned __int128'
|-TypedefDecl 0x13d926230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13d926000 'struct __NSConstantString_tag'
|   `-Record 0x13d856580 '__NSConstantString_tag'
|-TypedefDecl 0x13d926298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x13d855d90 '__SVInt8_t'
|-TypedefDecl 0x13d926300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x13d855db0 '__SVInt16_t'
|-TypedefDecl 0x13d926368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x13d855dd0 '__SVInt32_t'
|-TypedefDecl 0x13d9263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x13d855df0 '__SVInt64_t'
|-TypedefDecl 0x13d926438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x13d855e10 '__SVUint8_t'
|-TypedefDecl 0x13d9264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x13d855e30 '__SVUint16_t'
|-TypedefDecl 0x13d926508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x13d855e50 '__SVUint32_t'
|-TypedefDecl 0x13d926570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x13d855e70 '__SVUint64_t'
|-TypedefDecl 0x13d9265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x13d855e90 '__SVFloat16_t'
|-TypedefDecl 0x13d926640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x13d855eb0 '__SVFloat32_t'
|-TypedefDecl 0x13d9266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x13d855ed0 '__SVFloat64_t'
|-TypedefDecl 0x13d926710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x13d855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13d926778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x13d855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13d9267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x13d855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13d926848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x13d855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13d9268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x13d855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13d926918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x13d855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13d926980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x13d855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13d9269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x13d855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13d926a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x13d855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13d926ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x13d856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13d926b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x13d856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13d926b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x13d856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13d926bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x13d856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13d926c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x13d856090 '__clang_svint8x3_t'
|-TypedefDecl 0x13d926cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x13d8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13d926d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x13d8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13d926d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x13d8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13d926df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x13d856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13d926e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x13d856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13d926ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x13d856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13d926f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x13d856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13d926f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x13d856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13d927800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x13d8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13d927868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x13d8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13d9278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x13d8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13d927938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x13d856210 '__clang_svint8x4_t'
|-TypedefDecl 0x13d9279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x13d856230 '__clang_svint16x4_t'
|-TypedefDecl 0x13d927a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x13d856250 '__clang_svint32x4_t'
|-TypedefDecl 0x13d927a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x13d856270 '__clang_svint64x4_t'
|-TypedefDecl 0x13d927ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x13d856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13d927b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x13d8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13d927ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x13d8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13d927c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x13d8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13d927c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x13d856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13d927ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x13d856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13d927d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x13d856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13d927db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x13d856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13d927e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x13d856390 '__SVBool_t'
|-TypedefDecl 0x13d927e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x13d8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13d927ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x13d8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13d927f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x13d8563f0 '__SVCount_t'
|-TypedefDecl 0x13d927ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13d927fb0 'char *'
|   `-BuiltinType 0x13d8556b0 'char'
|-TypedefDecl 0x13d928068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13d927fb0 'char *'
|   `-BuiltinType 0x13d8556b0 'char'
|-FunctionDecl 0x13d928198 <dataset_diviso_filec/func24185_nonvuln.c:1:1, line:88:1> line:1:1 cgi_initialize_cookies 'int (void)'
| `-CompoundStmt 0x13d945148 <line:2:1, line:88:1>
|   |-DeclStmt 0x13d928308 <line:3:3, col:21>
|   | `-VarDecl 0x13d9282a0 <col:3, col:15> col:15 used cookie 'const char *'
|   |-DeclStmt 0x13d9285d8 <line:4:3, line:6:7>
|   | |-VarDecl 0x13d9283c0 <line:4:3, col:17> col:9 used name 'char[128]'
|   | |-VarDecl 0x13d9284d0 <col:3, line:5:12> col:3 used value 'char[512]'
|   | `-VarDecl 0x13d928550 <line:4:3, line:6:4> col:4 used ptr 'char *'
|   |-IfStmt 0x13d9410b8 <line:9:3, line:10:5>
|   | |-BinaryOperator 0x13d941088 <line:9:7, col:35> 'int' contains-errors '=='
|   | | |-ParenExpr 0x13d941048 <col:7, col:30> 'const char *'
|   | | | `-BinaryOperator 0x13d941028 <col:8, col:29> 'const char *' '='
|   | | |   |-DeclRefExpr 0x13d9285f0 <col:8> 'const char *' lvalue Var 0x13d9282a0 'cookie' 'const char *'
|   | | |   `-ImplicitCastExpr 0x13d941010 <col:17, col:29> 'const char *' <IntegralToPointer>
|   | | |     `-CallExpr 0x13d940fd0 <col:17, col:29> 'int'
|   | | |       |-ImplicitCastExpr 0x13d940fb8 <col:17> 'int (*)()' <FunctionToPointerDecay>
|   | | |       | `-DeclRefExpr 0x13d928740 <col:17> 'int ()' Function 0x13d928688 'getenv' 'int ()'
|   | | |       `-ImplicitCastExpr 0x13d940ff8 <col:24> 'char *' <ArrayToPointerDecay>
|   | | |         `-StringLiteral 0x13d9287a0 <col:24> 'char[4]' lvalue "STR"
|   | | `-RecoveryExpr 0x13d941068 <col:35> '<dependent type>' contains-errors lvalue
|   | `-ReturnStmt 0x13d9410a8 <line:10:5>
|   `-WhileStmt 0x13d945128 <line:12:3, line:87:3>
|     |-ImplicitCastExpr 0x13d941128 <line:12:10, col:11> 'char' <LValueToRValue>
|     | `-UnaryOperator 0x13d941110 <col:10, col:11> 'const char' lvalue prefix '*' cannot overflow
|     |   `-ImplicitCastExpr 0x13d9410f8 <col:11> 'const char *' <LValueToRValue>
|     |     `-DeclRefExpr 0x13d9410d8 <col:11> 'const char *' lvalue Var 0x13d9282a0 'cookie' 'const char *'
|     `-CompoundStmt 0x13d9450c8 <line:13:3, line:87:3>
|       |-DeclStmt 0x13d9411e0 <line:14:5, col:17>
|       | `-VarDecl 0x13d941158 <col:5, col:16> col:9 used skip 'int' cinit
|       |   `-IntegerLiteral 0x13d9411c0 <col:16> 'int' 0
|       |-WhileStmt 0x13d941588 <line:18:5, line:19:14>
|       | |-CallExpr 0x13d941528 <line:18:12, col:33> 'int'
|       | | |-ImplicitCastExpr 0x13d941510 <col:12> 'int (*)(int)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x13d9413f8 <col:12> 'int (int)' Function 0x13d941238 'isspace' 'int (int)'
|       | | `-BinaryOperator 0x13d9414b8 <col:20, col:30> 'int' '&'
|       | |   |-ImplicitCastExpr 0x13d9414a0 <col:20, col:21> 'int' <IntegralCast>
|       | |   | `-ImplicitCastExpr 0x13d941488 <col:20, col:21> 'char' <LValueToRValue>
|       | |   |   `-UnaryOperator 0x13d941450 <col:20, col:21> 'const char' lvalue prefix '*' cannot overflow
|       | |   |     `-ImplicitCastExpr 0x13d941438 <col:21> 'const char *' <LValueToRValue>
|       | |   |       `-DeclRefExpr 0x13d941418 <col:21> 'const char *' lvalue Var 0x13d9282a0 'cookie' 'const char *'
|       | |   `-IntegerLiteral 0x13d941468 <col:30> 'int' 255
|       | `-UnaryOperator 0x13d941570 <line:19:7, col:14> 'const char *' postfix '++'
|       |   `-DeclRefExpr 0x13d941550 <col:7> 'const char *' lvalue Var 0x13d9282a0 'cookie' 'const char *'
|       |-IfStmt 0x13d941630 <line:20:5, line:21:7>
|       | |-UnaryOperator 0x13d941610 <line:20:9, col:11> 'int' prefix '!' cannot overflow
|       | | `-ImplicitCastExpr 0x13d9415f8 <col:10, col:11> 'char' <LValueToRValue>
|       | |   `-UnaryOperator 0x13d9415e0 <col:10, col:11> 'const char' lvalue prefix '*' cannot overflow
|       | |     `-ImplicitCastExpr 0x13d9415c8 <col:11> 'const char *' <LValueToRValue>
|       | |       `-DeclRefExpr 0x13d9415a8 <col:11> 'const char *' lvalue Var 0x13d9282a0 'cookie' 'const char *'
|       | `-BreakStmt 0x13d941628 <line:21:7>
|       |-ForStmt 0x13d943768 <line:25:5, line:34:7>
|       | |-BinaryOperator 0x13d9416a8 <line:25:10, col:16> 'char *' '='
|       | | |-DeclRefExpr 0x13d941650 <col:10> 'char *' lvalue Var 0x13d928550 'ptr' 'char *'
|       | | `-ImplicitCastExpr 0x13d941690 <col:16> 'char *' <ArrayToPointerDecay>
|       | |   `-DeclRefExpr 0x13d941670 <col:16> 'char[128]' lvalue Var 0x13d9283c0 'name' 'char[128]'
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x13d941800 <col:22, col:44> 'int' '&&'
|       | | |-ImplicitCastExpr 0x13d9417e8 <col:22, col:23> 'int' <IntegralCast>
|       | | | `-ImplicitCastExpr 0x13d9417d0 <col:22, col:23> 'char' <LValueToRValue>
|       | | |   `-UnaryOperator 0x13d941700 <col:22, col:23> 'const char' lvalue prefix '*' cannot overflow
|       | | |     `-ImplicitCastExpr 0x13d9416e8 <col:23> 'const char *' <LValueToRValue>
|       | | |       `-DeclRefExpr 0x13d9416c8 <col:23> 'const char *' lvalue Var 0x13d9282a0 'cookie' 'const char *'
|       | | `-BinaryOperator 0x13d9417b0 <col:33, col:44> 'int' '!='
|       | |   |-ImplicitCastExpr 0x13d941798 <col:33, col:34> 'int' <IntegralCast>
|       | |   | `-ImplicitCastExpr 0x13d941780 <col:33, col:34> 'char' <LValueToRValue>
|       | |   |   `-UnaryOperator 0x13d941750 <col:33, col:34> 'const char' lvalue prefix '*' cannot overflow
|       | |   |     `-ImplicitCastExpr 0x13d941738 <col:34> 'const char *' <LValueToRValue>
|       | |   |       `-DeclRefExpr 0x13d941718 <col:34> 'const char *' lvalue Var 0x13d9282a0 'cookie' 'const char *'
|       | |   `-CharacterLiteral 0x13d941768 <col:44> 'int' 61
|       | |-<<<NULL>>>
|       | `-IfStmt 0x13d943738 <line:26:7, line:34:7> has_else
|       |   |-BinaryOperator 0x13d941970 <line:26:11, col:41> 'int' '<'
|       |   | |-ImplicitCastExpr 0x13d941958 <col:11> 'char *' <LValueToRValue>
|       |   | | `-DeclRefExpr 0x13d941820 <col:11> 'char *' lvalue Var 0x13d928550 'ptr' 'char *'
|       |   | `-ParenExpr 0x13d941938 <col:17, col:41> 'char *'
|       |   |   `-BinaryOperator 0x13d941918 <col:18, col:40> 'char *' '-'
|       |   |     |-BinaryOperator 0x13d9418d8 <col:18, col:36> 'char *' '+'
|       |   |     | |-ImplicitCastExpr 0x13d9418c0 <col:18> 'char *' <ArrayToPointerDecay>
|       |   |     | | `-DeclRefExpr 0x13d941840 <col:18> 'char[128]' lvalue Var 0x13d9283c0 'name' 'char[128]'
|       |   |     | `-UnaryExprOrTypeTraitExpr 0x13d9418a0 <col:25, col:36> 'unsigned long' sizeof
|       |   |     |   `-ParenExpr 0x13d941880 <col:31, col:36> 'char[128]' lvalue
|       |   |     |     `-DeclRefExpr 0x13d941860 <col:32> 'char[128]' lvalue Var 0x13d9283c0 'name' 'char[128]' non_odr_use_unevaluated
|       |   |     `-IntegerLiteral 0x13d9418f8 <col:40> 'int' 1
|       |   |-CompoundStmt 0x13d943668 <line:27:7, line:29:7>
|       |   | `-BinaryOperator 0x13d943648 <line:28:9, col:25> 'char' '='
|       |   |   |-UnaryOperator 0x13d9419c8 <col:9, col:13> 'char' lvalue prefix '*' cannot overflow
|       |   |   | `-UnaryOperator 0x13d9419b0 <col:10, col:13> 'char *' postfix '++'
|       |   |   |   `-DeclRefExpr 0x13d941990 <col:10> 'char *' lvalue Var 0x13d928550 'ptr' 'char *'
|       |   |   `-ImplicitCastExpr 0x13d943630 <col:18, col:25> 'char' <LValueToRValue>
|       |   |     `-UnaryOperator 0x13d943618 <col:18, col:25> 'const char' lvalue prefix '*' cannot overflow
|       |   |       `-UnaryOperator 0x13d943600 <col:19, col:25> 'const char *' postfix '++'
|       |   |         `-DeclRefExpr 0x13d9419e0 <col:19> 'const char *' lvalue Var 0x13d9282a0 'cookie' 'const char *'
|       |   `-CompoundStmt 0x13d943718 <line:31:7, line:34:7>
|       |     |-BinaryOperator 0x13d9436c0 <line:32:9, col:16> 'int' '='
|       |     | |-DeclRefExpr 0x13d943680 <col:9> 'int' lvalue Var 0x13d941158 'skip' 'int'
|       |     | `-IntegerLiteral 0x13d9436a0 <col:16> 'int' 1
|       |     `-UnaryOperator 0x13d943700 <line:33:2, col:9> 'const char *' postfix '++'
|       |       `-DeclRefExpr 0x13d9436e0 <col:2> 'const char *' lvalue Var 0x13d9282a0 'cookie' 'const char *'
|       |-IfStmt 0x13d943860 <line:36:5, line:37:7>
|       | |-BinaryOperator 0x13d943838 <line:36:9, col:20> 'int' '!='
|       | | |-ImplicitCastExpr 0x13d943820 <col:9, col:10> 'int' <IntegralCast>
|       | | | `-ImplicitCastExpr 0x13d943808 <col:9, col:10> 'char' <LValueToRValue>
|       | | |   `-UnaryOperator 0x13d9437d8 <col:9, col:10> 'const char' lvalue prefix '*' cannot overflow
|       | | |     `-ImplicitCastExpr 0x13d9437c0 <col:10> 'const char *' <LValueToRValue>
|       | | |       `-DeclRefExpr 0x13d9437a0 <col:10> 'const char *' lvalue Var 0x13d9282a0 'cookie' 'const char *'
|       | | `-CharacterLiteral 0x13d9437f0 <col:20> 'int' 61
|       | `-BreakStmt 0x13d943858 <line:37:7>
|       |-BinaryOperator 0x13d943900 <line:39:5, col:12> 'char' '='
|       | |-UnaryOperator 0x13d9438b8 <col:5, col:6> 'char' lvalue prefix '*' cannot overflow
|       | | `-ImplicitCastExpr 0x13d9438a0 <col:6> 'char *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x13d943880 <col:6> 'char *' lvalue Var 0x13d928550 'ptr' 'char *'
|       | `-ImplicitCastExpr 0x13d9438e8 <col:12> 'char' <IntegralCast>
|       |   `-CharacterLiteral 0x13d9438d0 <col:12> 'int' 0
|       |-UnaryOperator 0x13d943940 <line:40:5, col:12> 'const char *' postfix '++'
|       | `-DeclRefExpr 0x13d943920 <col:5> 'const char *' lvalue Var 0x13d9282a0 'cookie' 'const char *'
|       |-IfStmt 0x13d944ad8 <line:44:5, line:74:5> has_else
|       | |-BinaryOperator 0x13d9439f0 <line:44:9, col:20> 'int' '=='
|       | | |-ImplicitCastExpr 0x13d9439d8 <col:9, col:10> 'int' <IntegralCast>
|       | | | `-ImplicitCastExpr 0x13d9439c0 <col:9, col:10> 'char' <LValueToRValue>
|       | | |   `-UnaryOperator 0x13d943990 <col:9, col:10> 'const char' lvalue prefix '*' cannot overflow
|       | | |     `-ImplicitCastExpr 0x13d943978 <col:10> 'const char *' <LValueToRValue>
|       | | |       `-DeclRefExpr 0x13d943958 <col:10> 'const char *' lvalue Var 0x13d9282a0 'cookie' 'const char *'
|       | | `-CharacterLiteral 0x13d9439a8 <col:20> 'int' 34
|       | |-CompoundStmt 0x13d944138 <line:45:5, line:61:5>
|       | | |-ForStmt 0x13d943f80 <line:46:7, line:55:2>
|       | | | |-BinaryOperator 0x13d943ac0 <line:46:12, col:29> 'char *' ','
|       | | | | |-UnaryOperator 0x13d943a30 <col:12, col:19> 'const char *' postfix '++'
|       | | | | | `-DeclRefExpr 0x13d943a10 <col:12> 'const char *' lvalue Var 0x13d9282a0 'cookie' 'const char *'
|       | | | | `-BinaryOperator 0x13d943aa0 <col:23, col:29> 'char *' '='
|       | | | |   |-DeclRefExpr 0x13d943a48 <col:23> 'char *' lvalue Var 0x13d928550 'ptr' 'char *'
|       | | | |   `-ImplicitCastExpr 0x13d943a88 <col:29> 'char *' <ArrayToPointerDecay>
|       | | | |     `-DeclRefExpr 0x13d943a68 <col:29> 'char[512]' lvalue Var 0x13d9284d0 'value' 'char[512]'
|       | | | |-<<<NULL>>>
|       | | | |-BinaryOperator 0x13d943c18 <col:36, col:58> 'int' '&&'
|       | | | | |-ImplicitCastExpr 0x13d943c00 <col:36, col:37> 'int' <IntegralCast>
|       | | | | | `-ImplicitCastExpr 0x13d943be8 <col:36, col:37> 'char' <LValueToRValue>
|       | | | | |   `-UnaryOperator 0x13d943b18 <col:36, col:37> 'const char' lvalue prefix '*' cannot overflow
|       | | | | |     `-ImplicitCastExpr 0x13d943b00 <col:37> 'const char *' <LValueToRValue>
|       | | | | |       `-DeclRefExpr 0x13d943ae0 <col:37> 'const char *' lvalue Var 0x13d9282a0 'cookie' 'const char *'
|       | | | | `-BinaryOperator 0x13d943bc8 <col:47, col:58> 'int' '!='
|       | | | |   |-ImplicitCastExpr 0x13d943bb0 <col:47, col:48> 'int' <IntegralCast>
|       | | | |   | `-ImplicitCastExpr 0x13d943b98 <col:47, col:48> 'char' <LValueToRValue>
|       | | | |   |   `-UnaryOperator 0x13d943b68 <col:47, col:48> 'const char' lvalue prefix '*' cannot overflow
|       | | | |   |     `-ImplicitCastExpr 0x13d943b50 <col:48> 'const char *' <LValueToRValue>
|       | | | |   |       `-DeclRefExpr 0x13d943b30 <col:48> 'const char *' lvalue Var 0x13d9282a0 'cookie' 'const char *'
|       | | | |   `-CharacterLiteral 0x13d943b80 <col:58> 'int' 34
|       | | | |-<<<NULL>>>
|       | | | `-IfStmt 0x13d943f50 <line:47:9, line:55:2> has_else
|       | | |   |-BinaryOperator 0x13d943d88 <line:47:13, col:45> 'int' '<'
|       | | |   | |-ImplicitCastExpr 0x13d943d70 <col:13> 'char *' <LValueToRValue>
|       | | |   | | `-DeclRefExpr 0x13d943c38 <col:13> 'char *' lvalue Var 0x13d928550 'ptr' 'char *'
|       | | |   | `-ParenExpr 0x13d943d50 <col:19, col:45> 'char *'
|       | | |   |   `-BinaryOperator 0x13d943d30 <col:20, col:44> 'char *' '-'
|       | | |   |     |-BinaryOperator 0x13d943cf0 <col:20, col:40> 'char *' '+'
|       | | |   |     | |-ImplicitCastExpr 0x13d943cd8 <col:20> 'char *' <ArrayToPointerDecay>
|       | | |   |     | | `-DeclRefExpr 0x13d943c58 <col:20> 'char[512]' lvalue Var 0x13d9284d0 'value' 'char[512]'
|       | | |   |     | `-UnaryExprOrTypeTraitExpr 0x13d943cb8 <col:28, col:40> 'unsigned long' sizeof
|       | | |   |     |   `-ParenExpr 0x13d943c98 <col:34, col:40> 'char[512]' lvalue
|       | | |   |     |     `-DeclRefExpr 0x13d943c78 <col:35> 'char[512]' lvalue Var 0x13d9284d0 'value' 'char[512]' non_odr_use_unevaluated
|       | | |   |     `-IntegerLiteral 0x13d943d10 <col:44> 'int' 1
|       | | |   |-CompoundStmt 0x13d943e80 <line:48:2, line:50:2>
|       | | |   | `-BinaryOperator 0x13d943e60 <line:49:4, col:20> 'char' '='
|       | | |   |   |-UnaryOperator 0x13d943de0 <col:4, col:8> 'char' lvalue prefix '*' cannot overflow
|       | | |   |   | `-UnaryOperator 0x13d943dc8 <col:5, col:8> 'char *' postfix '++'
|       | | |   |   |   `-DeclRefExpr 0x13d943da8 <col:5> 'char *' lvalue Var 0x13d928550 'ptr' 'char *'
|       | | |   |   `-ImplicitCastExpr 0x13d943e48 <col:13, col:20> 'char' <LValueToRValue>
|       | | |   |     `-UnaryOperator 0x13d943e30 <col:13, col:20> 'const char' lvalue prefix '*' cannot overflow
|       | | |   |       `-UnaryOperator 0x13d943e18 <col:14, col:20> 'const char *' postfix '++'
|       | | |   |         `-DeclRefExpr 0x13d943df8 <col:14> 'const char *' lvalue Var 0x13d9282a0 'cookie' 'const char *'
|       | | |   `-CompoundStmt 0x13d943f30 <line:52:2, line:55:2>
|       | | |     |-BinaryOperator 0x13d943ed8 <line:53:4, col:11> 'int' '='
|       | | |     | |-DeclRefExpr 0x13d943e98 <col:4> 'int' lvalue Var 0x13d941158 'skip' 'int'
|       | | |     | `-IntegerLiteral 0x13d943eb8 <col:11> 'int' 1
|       | | |     `-UnaryOperator 0x13d943f18 <line:54:4, col:11> 'const char *' postfix '++'
|       | | |       `-DeclRefExpr 0x13d943ef8 <col:4> 'const char *' lvalue Var 0x13d9282a0 'cookie' 'const char *'
|       | | `-IfStmt 0x13d944108 <line:57:7, line:60:16> has_else
|       | |   |-BinaryOperator 0x13d944050 <line:57:11, col:22> 'int' '=='
|       | |   | |-ImplicitCastExpr 0x13d944038 <col:11, col:12> 'int' <IntegralCast>
|       | |   | | `-ImplicitCastExpr 0x13d944020 <col:11, col:12> 'char' <LValueToRValue>
|       | |   | |   `-UnaryOperator 0x13d943ff0 <col:11, col:12> 'const char' lvalue prefix '*' cannot overflow
|       | |   | |     `-ImplicitCastExpr 0x13d943fd8 <col:12> 'const char *' <LValueToRValue>
|       | |   | |       `-DeclRefExpr 0x13d943fb8 <col:12> 'const char *' lvalue Var 0x13d9282a0 'cookie' 'const char *'
|       | |   | `-CharacterLiteral 0x13d944008 <col:22> 'int' 34
|       | |   |-UnaryOperator 0x13d944090 <line:58:9, col:16> 'const char *' postfix '++'
|       | |   | `-DeclRefExpr 0x13d944070 <col:9> 'const char *' lvalue Var 0x13d9282a0 'cookie' 'const char *'
|       | |   `-BinaryOperator 0x13d9440e8 <line:60:9, col:16> 'int' '='
|       | |     |-DeclRefExpr 0x13d9440a8 <col:9> 'int' lvalue Var 0x13d941158 'skip' 'int'
|       | |     `-IntegerLiteral 0x13d9440c8 <col:16> 'int' 1
|       | `-CompoundStmt 0x13d944ac0 <line:63:5, line:74:5>
|       |   `-ForStmt 0x13d944a88 <line:64:7, line:73:2>
|       |     |-BinaryOperator 0x13d9441b0 <line:64:12, col:18> 'char *' '='
|       |     | |-DeclRefExpr 0x13d944158 <col:12> 'char *' lvalue Var 0x13d928550 'ptr' 'char *'
|       |     | `-ImplicitCastExpr 0x13d944198 <col:18> 'char *' <ArrayToPointerDecay>
|       |     |   `-DeclRefExpr 0x13d944178 <col:18> 'char[512]' lvalue Var 0x13d9284d0 'value' 'char[512]'
|       |     |-<<<NULL>>>
|       |     |-BinaryOperator 0x13d944308 <col:25, col:47> 'int' '&&'
|       |     | |-ImplicitCastExpr 0x13d9442f0 <col:25, col:26> 'int' <IntegralCast>
|       |     | | `-ImplicitCastExpr 0x13d9442d8 <col:25, col:26> 'char' <LValueToRValue>
|       |     | |   `-UnaryOperator 0x13d944208 <col:25, col:26> 'const char' lvalue prefix '*' cannot overflow
|       |     | |     `-ImplicitCastExpr 0x13d9441f0 <col:26> 'const char *' <LValueToRValue>
|       |     | |       `-DeclRefExpr 0x13d9441d0 <col:26> 'const char *' lvalue Var 0x13d9282a0 'cookie' 'const char *'
|       |     | `-BinaryOperator 0x13d9442b8 <col:36, col:47> 'int' '!='
|       |     |   |-ImplicitCastExpr 0x13d9442a0 <col:36, col:37> 'int' <IntegralCast>
|       |     |   | `-ImplicitCastExpr 0x13d944288 <col:36, col:37> 'char' <LValueToRValue>
|       |     |   |   `-UnaryOperator 0x13d944258 <col:36, col:37> 'const char' lvalue prefix '*' cannot overflow
|       |     |   |     `-ImplicitCastExpr 0x13d944240 <col:37> 'const char *' <LValueToRValue>
|       |     |   |       `-DeclRefExpr 0x13d944220 <col:37> 'const char *' lvalue Var 0x13d9282a0 'cookie' 'const char *'
|       |     |   `-CharacterLiteral 0x13d944270 <col:47> 'int' 59
|       |     |-<<<NULL>>>
|       |     `-IfStmt 0x13d944a58 <line:65:9, line:73:2> has_else
|       |       |-BinaryOperator 0x13d944478 <line:65:13, col:45> 'int' '<'
|       |       | |-ImplicitCastExpr 0x13d944460 <col:13> 'char *' <LValueToRValue>
|       |       | | `-DeclRefExpr 0x13d944328 <col:13> 'char *' lvalue Var 0x13d928550 'ptr' 'char *'
|       |       | `-ParenExpr 0x13d944440 <col:19, col:45> 'char *'
|       |       |   `-BinaryOperator 0x13d944420 <col:20, col:44> 'char *' '-'
|       |       |     |-BinaryOperator 0x13d9443e0 <col:20, col:40> 'char *' '+'
|       |       |     | |-ImplicitCastExpr 0x13d9443c8 <col:20> 'char *' <ArrayToPointerDecay>
|       |       |     | | `-DeclRefExpr 0x13d944348 <col:20> 'char[512]' lvalue Var 0x13d9284d0 'value' 'char[512]'
|       |       |     | `-UnaryExprOrTypeTraitExpr 0x13d9443a8 <col:28, col:40> 'unsigned long' sizeof
|       |       |     |   `-ParenExpr 0x13d944388 <col:34, col:40> 'char[512]' lvalue
|       |       |     |     `-DeclRefExpr 0x13d944368 <col:35> 'char[512]' lvalue Var 0x13d9284d0 'value' 'char[512]' non_odr_use_unevaluated
|       |       |     `-IntegerLiteral 0x13d944400 <col:44> 'int' 1
|       |       |-CompoundStmt 0x13d944570 <line:66:2, line:68:2>
|       |       | `-BinaryOperator 0x13d944550 <line:67:4, col:20> 'char' '='
|       |       |   |-UnaryOperator 0x13d9444d0 <col:4, col:8> 'char' lvalue prefix '*' cannot overflow
|       |       |   | `-UnaryOperator 0x13d9444b8 <col:5, col:8> 'char *' postfix '++'
|       |       |   |   `-DeclRefExpr 0x13d944498 <col:5> 'char *' lvalue Var 0x13d928550 'ptr' 'char *'
|       |       |   `-ImplicitCastExpr 0x13d944538 <col:13, col:20> 'char' <LValueToRValue>
|       |       |     `-UnaryOperator 0x13d944520 <col:13, col:20> 'const char' lvalue prefix '*' cannot overflow
|       |       |       `-UnaryOperator 0x13d944508 <col:14, col:20> 'const char *' postfix '++'
|       |       |         `-DeclRefExpr 0x13d9444e8 <col:14> 'const char *' lvalue Var 0x13d9282a0 'cookie' 'const char *'
|       |       `-CompoundStmt 0x13d944a38 <line:70:2, line:73:2>
|       |         |-BinaryOperator 0x13d9445c8 <line:71:4, col:11> 'int' '='
|       |         | |-DeclRefExpr 0x13d944588 <col:4> 'int' lvalue Var 0x13d941158 'skip' 'int'
|       |         | `-IntegerLiteral 0x13d9445a8 <col:11> 'int' 1
|       |         `-UnaryOperator 0x13d944a20 <line:72:4, col:11> 'const char *' postfix '++'
|       |           `-DeclRefExpr 0x13d944a00 <col:4> 'const char *' lvalue Var 0x13d9282a0 'cookie' 'const char *'
|       |-IfStmt 0x13d944ce0 <line:76:5, line:79:14> has_else
|       | |-BinaryOperator 0x13d944ba0 <line:76:9, col:20> 'int' '=='
|       | | |-ImplicitCastExpr 0x13d944b88 <col:9, col:10> 'int' <IntegralCast>
|       | | | `-ImplicitCastExpr 0x13d944b70 <col:9, col:10> 'char' <LValueToRValue>
|       | | |   `-UnaryOperator 0x13d944b40 <col:9, col:10> 'const char' lvalue prefix '*' cannot overflow
|       | | |     `-ImplicitCastExpr 0x13d944b28 <col:10> 'const char *' <LValueToRValue>
|       | | |       `-DeclRefExpr 0x13d944b08 <col:10> 'const char *' lvalue Var 0x13d9282a0 'cookie' 'const char *'
|       | | `-CharacterLiteral 0x13d944b58 <col:20> 'int' 59
|       | |-UnaryOperator 0x13d944be0 <line:77:7, col:14> 'const char *' postfix '++'
|       | | `-DeclRefExpr 0x13d944bc0 <col:7> 'const char *' lvalue Var 0x13d9282a0 'cookie' 'const char *'
|       | `-IfStmt 0x13d944cc0 <line:78:10, line:79:14>
|       |   |-ImplicitCastExpr 0x13d944c48 <line:78:14, col:15> 'char' <LValueToRValue>
|       |   | `-UnaryOperator 0x13d944c30 <col:14, col:15> 'const char' lvalue prefix '*' cannot overflow
|       |   |   `-ImplicitCastExpr 0x13d944c18 <col:15> 'const char *' <LValueToRValue>
|       |   |     `-DeclRefExpr 0x13d944bf8 <col:15> 'const char *' lvalue Var 0x13d9282a0 'cookie' 'const char *'
|       |   `-BinaryOperator 0x13d944ca0 <line:79:7, col:14> 'int' '='
|       |     |-DeclRefExpr 0x13d944c60 <col:7> 'int' lvalue Var 0x13d941158 'skip' 'int'
|       |     `-IntegerLiteral 0x13d944c80 <col:14> 'int' 1
|       `-BinaryOperator 0x13d944d90 <line:81:5, col:12> 'char' '='
|         |-UnaryOperator 0x13d944d48 <col:5, col:6> 'char' lvalue prefix '*' cannot overflow
|         | `-ImplicitCastExpr 0x13d944d30 <col:6> 'char *' <LValueToRValue>
|         |   `-DeclRefExpr 0x13d944d10 <col:6> 'char *' lvalue Var 0x13d928550 'ptr' 'char *'
|         `-ImplicitCastExpr 0x13d944d78 <col:12> 'char' <IntegralCast>
|           `-CharacterLiteral 0x13d944d60 <col:12> 'int' 0
`-FunctionDecl 0x13d941238 <line:18:12> col:12 implicit used isspace 'int (int)' extern
  |-ParmVarDecl 0x13d941338 <<invalid sloc>> <invalid sloc> 'int'
  |-BuiltinAttr 0x13d9412e0 <<invalid sloc>> Implicit 929
  |-NoThrowAttr 0x13d9413a8 <col:12> Implicit
  `-PureAttr 0x13d9413d0 <col:12> Implicit
