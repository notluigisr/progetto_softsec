TranslationUnitDecl 0x13a855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x13a8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x13a855bd0 '__int128'
|-TypedefDecl 0x13a856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x13a855bf0 'unsigned __int128'
|-TypedefDecl 0x13a926230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13a926000 'struct __NSConstantString_tag'
|   `-Record 0x13a856580 '__NSConstantString_tag'
|-TypedefDecl 0x13a926298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x13a855d90 '__SVInt8_t'
|-TypedefDecl 0x13a926300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x13a855db0 '__SVInt16_t'
|-TypedefDecl 0x13a926368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x13a855dd0 '__SVInt32_t'
|-TypedefDecl 0x13a9263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x13a855df0 '__SVInt64_t'
|-TypedefDecl 0x13a926438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x13a855e10 '__SVUint8_t'
|-TypedefDecl 0x13a9264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x13a855e30 '__SVUint16_t'
|-TypedefDecl 0x13a926508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x13a855e50 '__SVUint32_t'
|-TypedefDecl 0x13a926570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x13a855e70 '__SVUint64_t'
|-TypedefDecl 0x13a9265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x13a855e90 '__SVFloat16_t'
|-TypedefDecl 0x13a926640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x13a855eb0 '__SVFloat32_t'
|-TypedefDecl 0x13a9266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x13a855ed0 '__SVFloat64_t'
|-TypedefDecl 0x13a926710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x13a855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13a926778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x13a855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13a9267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x13a855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13a926848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x13a855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13a9268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x13a855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13a926918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x13a855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13a926980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x13a855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13a9269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x13a855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13a926a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x13a855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13a926ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x13a856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13a926b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x13a856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13a926b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x13a856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13a926bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x13a856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13a926c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x13a856090 '__clang_svint8x3_t'
|-TypedefDecl 0x13a926cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x13a8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13a926d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x13a8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13a926d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x13a8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13a926df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x13a856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13a926e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x13a856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13a926ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x13a856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13a926f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x13a856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13a926f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x13a856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13a927800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x13a8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13a927868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x13a8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13a9278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x13a8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13a927938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x13a856210 '__clang_svint8x4_t'
|-TypedefDecl 0x13a9279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x13a856230 '__clang_svint16x4_t'
|-TypedefDecl 0x13a927a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x13a856250 '__clang_svint32x4_t'
|-TypedefDecl 0x13a927a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x13a856270 '__clang_svint64x4_t'
|-TypedefDecl 0x13a927ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x13a856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13a927b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x13a8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13a927ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x13a8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13a927c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x13a8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13a927c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x13a856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13a927ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x13a856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13a927d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x13a856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13a927db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x13a856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13a927e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x13a856390 '__SVBool_t'
|-TypedefDecl 0x13a927e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x13a8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13a927ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x13a8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13a927f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x13a8563f0 '__SVCount_t'
|-TypedefDecl 0x13a927ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13a927fb0 'char *'
|   `-BuiltinType 0x13a8556b0 'char'
|-TypedefDecl 0x13a928068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13a927fb0 'char *'
|   `-BuiltinType 0x13a8556b0 'char'
`-FunctionDecl 0x13a928438 <dataset_diviso_filec/func25049_nonvuln.c:1:1, line:67:1> line:1:1 invalid efmpat_to_regpat 'int (char *, char *, int *, int, int)'
  |-ParmVarDecl 0x13a9280f0 <line:2:2, col:10> col:10 used efmpat 'char *'
  |-ParmVarDecl 0x13a928170 <line:3:2, col:10> col:10 used regpat 'char *'
  |-ParmVarDecl 0x13a928228 <line:4:2, col:9> col:9 referenced invalid efminfo 'int *'
  |-ParmVarDecl 0x13a9282a8 <line:5:2, col:6> col:6 used idx 'int'
  |-ParmVarDecl 0x13a928328 <line:6:2, col:6> col:6 round 'int'
  `-CompoundStmt 0x13a9430b0 <line:7:1, line:67:1>
    |-DeclStmt 0x13a928588 <line:8:5, col:19>
    | `-VarDecl 0x13a928520 <col:5, col:13> col:13 used srcptr 'char *'
    |-IfStmt 0x13a940cd0 <line:10:5, line:15:5>
    | |-ArraySubscriptExpr 0x13a928658 <line:10:9, col:26> '<dependent type>' contains-errors lvalue
    | | |-ImplicitCastExpr 0x13a928628 <col:9, col:18> '<dependent type>' contains-errors <LValueToRValue>
    | | | `-CXXDependentScopeMemberExpr 0x13a9285c0 <col:9, col:18> '<dependent type>' contains-errors lvalue ->addr
    | | |   `-RecoveryExpr 0x13a9285a0 <col:9> '<dependent type>' contains-errors lvalue
    | | `-ImplicitCastExpr 0x13a928640 <col:23> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x13a928608 <col:23> 'int' lvalue ParmVar 0x13a9282a8 'idx' 'int'
    | `-CompoundStmt 0x13a940cb0 <line:11:5, line:15:5>
    |   |-CallExpr 0x13a940c38 <line:13:2, col:51> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x13a9287d0 <col:2> 'int ()' Function 0x13a928718 'semsg' 'int ()'
    |   | |-CallExpr 0x13a940be0 <col:8, col:41> '<dependent type>' contains-errors
    |   | | |-DeclRefExpr 0x13a940ae0 <col:8> 'int ()' Function 0x13a940a28 '_' 'int ()'
    |   | | `-RecoveryExpr 0x13a940bc0 <col:10> '<dependent type>' contains-errors lvalue
    |   | `-UnaryOperator 0x13a940c20 <col:44, col:45> 'char' lvalue prefix '*' cannot overflow
    |   |   `-ImplicitCastExpr 0x13a940c08 <col:45> 'char *' <LValueToRValue>
    |   |     `-DeclRefExpr 0x13a940b40 <col:45> 'char *' lvalue ParmVar 0x13a9280f0 'efmpat' 'char *'
    |   `-ReturnStmt 0x13a940ca0 <line:14:2, col:9>
    |     `-RecoveryExpr 0x13a940c80 <col:9> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x13a9410f0 <line:16:5, line:23:5>
    | |-RecoveryExpr 0x13a941030 <line:16:9, line:19:58> '_Bool' contains-errors
    | `-CompoundStmt 0x13a9410e0 <line:20:5, line:23:5>
    |-BinaryOperator 0x13a9412e0 <line:25:5, col:17> 'char' '='
    | |-UnaryOperator 0x13a941298 <col:5, col:12> 'char' lvalue prefix '*' cannot overflow
    | | `-UnaryOperator 0x13a941280 <col:6, col:12> 'char *' postfix '++'
    | |   `-DeclRefExpr 0x13a941260 <col:6> 'char *' lvalue ParmVar 0x13a928170 'regpat' 'char *'
    | `-ImplicitCastExpr 0x13a9412c8 <col:17> 'char' <IntegralCast>
    |   `-CharacterLiteral 0x13a9412b0 <col:17> 'int' 92
    |-BinaryOperator 0x13a941380 <line:26:5, col:17> 'char' '='
    | |-UnaryOperator 0x13a941338 <col:5, col:12> 'char' lvalue prefix '*' cannot overflow
    | | `-UnaryOperator 0x13a941320 <col:6, col:12> 'char *' postfix '++'
    | |   `-DeclRefExpr 0x13a941300 <col:6> 'char *' lvalue ParmVar 0x13a928170 'regpat' 'char *'
    | `-ImplicitCastExpr 0x13a941368 <col:17> 'char' <IntegralCast>
    |   `-CharacterLiteral 0x13a941350 <col:17> 'int' 40
    |-IfStmt 0x13a942ee0 <line:37:5, line:62:5> has_else
    | |-RecoveryExpr 0x13a9414d0 <line:37:9, col:40> '_Bool' contains-errors
    | |-CompoundStmt 0x13a942d20 <line:38:5, line:56:5>
    | | `-IfStmt 0x13a942cf0 <line:39:2, line:55:2> has_else
    | |   |-BinaryOperator 0x13a9416b0 <line:39:6, col:40> 'int' '&&'
    | |   | |-BinaryOperator 0x13a9415b0 <col:6, col:19> 'int' '!='
    | |   | | |-ImplicitCastExpr 0x13a941598 <col:6, col:14> 'int' <IntegralCast>
    | |   | | | `-ImplicitCastExpr 0x13a941580 <col:6, col:14> 'char' <LValueToRValue>
    | |   | | |   `-ArraySubscriptExpr 0x13a941548 <col:6, col:14> 'char' lvalue
    | |   | | |     |-ImplicitCastExpr 0x13a941530 <col:6> 'char *' <LValueToRValue>
    | |   | | |     | `-DeclRefExpr 0x13a9414f0 <col:6> 'char *' lvalue ParmVar 0x13a9280f0 'efmpat' 'char *'
    | |   | | |     `-IntegerLiteral 0x13a941510 <col:13> 'int' 1
    | |   | | `-CharacterLiteral 0x13a941568 <col:19> 'int' 92
    | |   | `-BinaryOperator 0x13a941690 <col:27, col:40> 'int' '!='
    | |   |   |-ImplicitCastExpr 0x13a941678 <col:27, col:35> 'int' <IntegralCast>
    | |   |   | `-ImplicitCastExpr 0x13a941660 <col:27, col:35> 'char' <LValueToRValue>
    | |   |   |   `-ArraySubscriptExpr 0x13a941628 <col:27, col:35> 'char' lvalue
    | |   |   |     |-ImplicitCastExpr 0x13a941610 <col:27> 'char *' <LValueToRValue>
    | |   |   |     | `-DeclRefExpr 0x13a9415d0 <col:27> 'char *' lvalue ParmVar 0x13a9280f0 'efmpat' 'char *'
    | |   |   |     `-IntegerLiteral 0x13a9415f0 <col:34> 'int' 1
    | |   |   `-CharacterLiteral 0x13a941648 <col:40> 'int' 37
    | |   |-CompoundStmt 0x13a941968 <line:40:2, line:48:2>
    | |   | |-CallExpr 0x13a941898 <line:46:6, col:26> 'int'
    | |   | | |-ImplicitCastExpr 0x13a941880 <col:6> 'int (*)()' <FunctionToPointerDecay>
    | |   | | | `-DeclRefExpr 0x13a9417b0 <col:6> 'int ()' Function 0x13a9416f8 'STRCPY' 'int ()'
    | |   | | |-ImplicitCastExpr 0x13a9418c8 <col:13> 'char *' <LValueToRValue>
    | |   | | | `-DeclRefExpr 0x13a9417d0 <col:13> 'char *' lvalue ParmVar 0x13a928170 'regpat' 'char *'
    | |   | | `-ImplicitCastExpr 0x13a9418e0 <col:21> 'char *' <ArrayToPointerDecay>
    | |   | |   `-StringLiteral 0x13a941830 <col:21> 'char[4]' lvalue "STR"
    | |   | `-CompoundAssignOperator 0x13a941938 <line:47:6, col:16> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
    | |   |   |-DeclRefExpr 0x13a9418f8 <col:6> 'char *' lvalue ParmVar 0x13a928170 'regpat' 'char *'
    | |   |   `-IntegerLiteral 0x13a941918 <col:16> 'int' 7
    | |   `-CompoundStmt 0x13a942cd0 <line:50:2, line:55:2>
    | |     |-CallExpr 0x13a942c00 <line:53:6, col:26> 'int'
    | |     | |-ImplicitCastExpr 0x13a9419e8 <col:6> 'int (*)()' <FunctionToPointerDecay>
    | |     | | `-DeclRefExpr 0x13a941988 <col:6> 'int ()' Function 0x13a9416f8 'STRCPY' 'int ()'
    | |     | |-ImplicitCastExpr 0x13a942c30 <col:13> 'char *' <LValueToRValue>
    | |     | | `-DeclRefExpr 0x13a9419a8 <col:13> 'char *' lvalue ParmVar 0x13a928170 'regpat' 'char *'
    | |     | `-ImplicitCastExpr 0x13a942c48 <col:21> 'char *' <ArrayToPointerDecay>
    | |     |   `-StringLiteral 0x13a9419c8 <col:21> 'char[4]' lvalue "STR"
    | |     `-CompoundAssignOperator 0x13a942ca0 <line:54:6, col:16> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
    | |       |-DeclRefExpr 0x13a942c60 <col:6> 'char *' lvalue ParmVar 0x13a928170 'regpat' 'char *'
    | |       `-IntegerLiteral 0x13a942c80 <col:16> 'int' 4
    | `-CompoundStmt 0x13a942ec8 <line:58:5, line:62:5>
    |   `-WhileStmt 0x13a942ea8 <line:60:2, line:61:8>
    |     |-RecoveryExpr 0x13a942e50 <line:60:9, col:34> '_Bool' contains-errors
    |     `-UnaryOperator 0x13a942e90 <line:61:6, col:8> 'char *' prefix '++'
    |       `-DeclRefExpr 0x13a942e70 <col:8> 'char *' lvalue ParmVar 0x13a928170 'regpat' 'char *'
    |-BinaryOperator 0x13a942f90 <line:63:5, col:17> 'char' '='
    | |-UnaryOperator 0x13a942f48 <col:5, col:12> 'char' lvalue prefix '*' cannot overflow
    | | `-UnaryOperator 0x13a942f30 <col:6, col:12> 'char *' postfix '++'
    | |   `-DeclRefExpr 0x13a942f10 <col:6> 'char *' lvalue ParmVar 0x13a928170 'regpat' 'char *'
    | `-ImplicitCastExpr 0x13a942f78 <col:17> 'char' <IntegralCast>
    |   `-CharacterLiteral 0x13a942f60 <col:17> 'int' 92
    |-BinaryOperator 0x13a943030 <line:64:5, col:17> 'char' '='
    | |-UnaryOperator 0x13a942fe8 <col:5, col:12> 'char' lvalue prefix '*' cannot overflow
    | | `-UnaryOperator 0x13a942fd0 <col:6, col:12> 'char *' postfix '++'
    | |   `-DeclRefExpr 0x13a942fb0 <col:6> 'char *' lvalue ParmVar 0x13a928170 'regpat' 'char *'
    | `-ImplicitCastExpr 0x13a943018 <col:17> 'char' <IntegralCast>
    |   `-CharacterLiteral 0x13a943000 <col:17> 'int' 41
    `-ReturnStmt 0x13a9430a0 <line:66:5, col:12>
      `-ImplicitCastExpr 0x13a943088 <col:12> 'int' <PointerToIntegral>
        `-ImplicitCastExpr 0x13a943070 <col:12> 'char *' <LValueToRValue>
          `-DeclRefExpr 0x13a943050 <col:12> 'char *' lvalue ParmVar 0x13a928170 'regpat' 'char *'
