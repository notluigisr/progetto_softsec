TranslationUnitDecl 0x12b055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x12b0564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x12b055bd0 '__int128'
|-TypedefDecl 0x12b056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x12b055bf0 'unsigned __int128'
|-TypedefDecl 0x12b126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12b126000 'struct __NSConstantString_tag'
|   `-Record 0x12b056580 '__NSConstantString_tag'
|-TypedefDecl 0x12b126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x12b055d90 '__SVInt8_t'
|-TypedefDecl 0x12b126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x12b055db0 '__SVInt16_t'
|-TypedefDecl 0x12b126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x12b055dd0 '__SVInt32_t'
|-TypedefDecl 0x12b1263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x12b055df0 '__SVInt64_t'
|-TypedefDecl 0x12b126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x12b055e10 '__SVUint8_t'
|-TypedefDecl 0x12b1264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x12b055e30 '__SVUint16_t'
|-TypedefDecl 0x12b126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x12b055e50 '__SVUint32_t'
|-TypedefDecl 0x12b126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x12b055e70 '__SVUint64_t'
|-TypedefDecl 0x12b1265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x12b055e90 '__SVFloat16_t'
|-TypedefDecl 0x12b126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x12b055eb0 '__SVFloat32_t'
|-TypedefDecl 0x12b1266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x12b055ed0 '__SVFloat64_t'
|-TypedefDecl 0x12b126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x12b055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12b126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x12b055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12b1267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x12b055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12b126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x12b055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12b1268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x12b055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12b126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x12b055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12b126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x12b055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12b1269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x12b055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12b126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x12b055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12b126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x12b056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12b126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x12b056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12b126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x12b056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12b126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x12b056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12b126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x12b056090 '__clang_svint8x3_t'
|-TypedefDecl 0x12b126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x12b0560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12b126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x12b0560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12b126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x12b0560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12b126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x12b056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12b126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x12b056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12b126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x12b056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12b126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x12b056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12b126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x12b056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12b127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x12b0561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12b127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x12b0561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12b1278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x12b0561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12b127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x12b056210 '__clang_svint8x4_t'
|-TypedefDecl 0x12b1279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x12b056230 '__clang_svint16x4_t'
|-TypedefDecl 0x12b127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x12b056250 '__clang_svint32x4_t'
|-TypedefDecl 0x12b127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x12b056270 '__clang_svint64x4_t'
|-TypedefDecl 0x12b127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x12b056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12b127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x12b0562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12b127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x12b0562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12b127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x12b0562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12b127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x12b056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12b127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x12b056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12b127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x12b056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12b127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x12b056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12b127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x12b056390 '__SVBool_t'
|-TypedefDecl 0x12b127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x12b0563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12b127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x12b0563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12b127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x12b0563f0 '__SVCount_t'
|-TypedefDecl 0x12b127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12b127fb0 'char *'
|   `-BuiltinType 0x12b0556b0 'char'
|-TypedefDecl 0x12b128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12b127fb0 'char *'
|   `-BuiltinType 0x12b0556b0 'char'
|-FunctionDecl 0x12b140be0 <dataset_diviso_filec/func15607_nonvuln.c:1:1, line:23:1> line:1:13 set_inverse_transl 'void (struct vc_data *, struct uni_pagedir *, int)' static
| |-ParmVarDecl 0x12b128648 <col:32, col:48> col:48 used conp 'struct vc_data *'
| |-ParmVarDecl 0x12b140a28 <col:54, col:74> col:74 used p 'struct uni_pagedir *'
| |-ParmVarDecl 0x12b140aa8 <col:77, col:81> col:81 used i 'int'
| `-CompoundStmt 0x12b80a9d0 <line:2:1, line:23:1>
|   |-DeclStmt 0x12b140e00 <line:3:2, col:14>
|   | |-VarDecl 0x12b140d00 <col:2, col:6> col:6 used j 'int'
|   | `-VarDecl 0x12b140d80 <col:2, col:9> col:9 used glyph 'int'
|   |-DeclStmt 0x12b140f20 <line:4:2, col:37>
|   | `-VarDecl 0x12b140e68 <col:2, col:18> col:18 used t 'unsigned short *'
|   |-DeclStmt 0x12b140ff0 <line:5:2, col:18>
|   | `-VarDecl 0x12b140f88 <col:2, col:17> col:17 used q 'unsigned char *'
|   |-IfStmt 0x12b141068 <line:7:2, col:10>
|   | |-UnaryOperator 0x12b141040 <col:6, col:7> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x12b141028 <col:7> 'struct uni_pagedir *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x12b141008 <col:7> 'struct uni_pagedir *' lvalue ParmVar 0x12b140a28 'p' 'struct uni_pagedir *'
|   | `-ReturnStmt 0x12b141058 <col:10>
|   |-BinaryOperator 0x12b141178 <line:8:2, col:31> 'unsigned char *' contains-errors '='
|   | |-DeclRefExpr 0x12b141088 <col:2> 'unsigned char *' lvalue Var 0x12b140f88 'q' 'unsigned char *'
|   | `-ArraySubscriptExpr 0x12b141158 <col:6, col:31> '<dependent type>' contains-errors lvalue
|   |   |-ImplicitCastExpr 0x12b141128 <col:6, col:9> '<dependent type>' contains-errors <LValueToRValue>
|   |   | `-RecoveryExpr 0x12b1410e0 <col:6, col:9> '<dependent type>' contains-errors lvalue
|   |   |   `-DeclRefExpr 0x12b1410a8 <col:6> 'struct uni_pagedir *' lvalue ParmVar 0x12b140a28 'p' 'struct uni_pagedir *'
|   |   `-ImplicitCastExpr 0x12b141140 <col:30> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x12b141108 <col:30> 'int' lvalue ParmVar 0x12b140aa8 'i' 'int'
|   |-IfStmt 0x12b1416a0 <line:10:2, line:13:2>
|   | |-UnaryOperator 0x12b1411d0 <line:10:6, col:7> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x12b1411b8 <col:7> 'unsigned char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x12b141198 <col:7> 'unsigned char *' lvalue Var 0x12b140f88 'q' 'unsigned char *'
|   | `-CompoundStmt 0x12b141680 <col:10, line:13:2>
|   |   |-BinaryOperator 0x12b1415e0 <line:11:3, col:65> 'unsigned char *' contains-errors '='
|   |   | |-DeclRefExpr 0x12b1411e8 <col:3> 'unsigned char *' lvalue Var 0x12b140f88 'q' 'unsigned char *'
|   |   | `-BinaryOperator 0x12b1415c0 <col:7, col:65> '<dependent type>' contains-errors '='
|   |   |   |-ArraySubscriptExpr 0x12b141530 <col:7, col:32> '<dependent type>' contains-errors lvalue
|   |   |   | |-ImplicitCastExpr 0x12b141500 <col:7, col:10> '<dependent type>' contains-errors <LValueToRValue>
|   |   |   | | `-RecoveryExpr 0x12b141240 <col:7, col:10> '<dependent type>' contains-errors lvalue
|   |   |   | |   `-DeclRefExpr 0x12b141208 <col:7> 'struct uni_pagedir *' lvalue ParmVar 0x12b140a28 'p' 'struct uni_pagedir *'
|   |   |   | `-ImplicitCastExpr 0x12b141518 <col:31> 'int' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x12b141268 <col:31> 'int' lvalue ParmVar 0x12b140aa8 'i' 'int'
|   |   |   `-CallExpr 0x12b141590 <col:36, col:65> '<dependent type>' contains-errors
|   |   |     |-DeclRefExpr 0x12b1413f0 <col:36> 'int ()' Function 0x12b141338 'kmalloc' 'int ()'
|   |   |     |-RecoveryExpr 0x12b141550 <col:44> '<dependent type>' contains-errors lvalue
|   |   |     `-RecoveryExpr 0x12b141570 <col:55> '<dependent type>' contains-errors lvalue
|   |   `-IfStmt 0x12b141660 <line:12:3, col:11>
|   |     |-UnaryOperator 0x12b141638 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |     | `-ImplicitCastExpr 0x12b141620 <col:8> 'unsigned char *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x12b141600 <col:8> 'unsigned char *' lvalue Var 0x12b140f88 'q' 'unsigned char *'
|   |     `-ReturnStmt 0x12b141650 <col:11>
|   |-CallExpr 0x12b80a088 <line:14:2, col:24> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x12b141958 <col:2> 'void *(void *, int, unsigned long)' Function 0x12b141708 'memset' 'void *(void *, int, unsigned long)'
|   | |-DeclRefExpr 0x12b141978 <col:9> 'unsigned char *' lvalue Var 0x12b140f88 'q' 'unsigned char *'
|   | |-IntegerLiteral 0x12b141998 <col:12> 'int' 0
|   | `-RecoveryExpr 0x12b80a038 <col:15> '<dependent type>' contains-errors lvalue
|   `-ForStmt 0x12b80a998 <line:16:2, line:22:2>
|     |-BinaryOperator 0x12b80a100 <line:16:7, col:11> 'int' '='
|     | |-DeclRefExpr 0x12b80a0c0 <col:7> 'int' lvalue Var 0x12b140d00 'j' 'int'
|     | `-IntegerLiteral 0x12b80a0e0 <col:11> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x12b80a198 <col:14, col:18> 'int' contains-errors '<'
|     | |-DeclRefExpr 0x12b80a120 <col:14> 'int' lvalue Var 0x12b140d00 'j' 'int'
|     | `-RecoveryExpr 0x12b80a178 <col:18> '<dependent type>' contains-errors lvalue
|     |-UnaryOperator 0x12b80a1d8 <col:27, col:28> 'int' postfix '++'
|     | `-DeclRefExpr 0x12b80a1b8 <col:27> 'int' lvalue Var 0x12b140d00 'j' 'int'
|     `-CompoundStmt 0x12b80a978 <col:32, line:22:2>
|       |-BinaryOperator 0x12b80a480 <line:17:3, col:36> 'int' '='
|       | |-DeclRefExpr 0x12b80a1f0 <col:3> 'int' lvalue Var 0x12b140d80 'glyph' 'int'
|       | `-CallExpr 0x12b80a408 <col:11, col:36> 'int'
|       |   |-ImplicitCastExpr 0x12b80a3f0 <col:11> 'int (*)()' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x12b80a2f0 <col:11> 'int ()' Function 0x12b80a238 'conv_uni_to_pc' 'int ()'
|       |   |-ImplicitCastExpr 0x12b80a438 <col:26> 'struct vc_data *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x12b80a310 <col:26> 'struct vc_data *' lvalue ParmVar 0x12b128648 'conp' 'struct vc_data *'
|       |   `-ImplicitCastExpr 0x12b80a468 <col:32, col:35> 'int' <IntegralCast>
|       |     `-ImplicitCastExpr 0x12b80a450 <col:32, col:35> 'unsigned short' <LValueToRValue>
|       |       `-ArraySubscriptExpr 0x12b80a3a0 <col:32, col:35> 'unsigned short' lvalue
|       |         |-ImplicitCastExpr 0x12b80a370 <col:32> 'unsigned short *' <LValueToRValue>
|       |         | `-DeclRefExpr 0x12b80a330 <col:32> 'unsigned short *' lvalue Var 0x12b140e68 't' 'unsigned short *'
|       |         `-ImplicitCastExpr 0x12b80a388 <col:34> 'int' <LValueToRValue>
|       |           `-DeclRefExpr 0x12b80a350 <col:34> 'int' lvalue Var 0x12b140d00 'j' 'int'
|       `-IfStmt 0x12b80a958 <line:18:3, line:21:3>
|         |-BinaryOperator 0x12b80a820 <line:18:7, col:53> 'int' contains-errors '&&'
|         | |-BinaryOperator 0x12b80a760 <col:7, col:29> 'int' contains-errors '&&'
|         | | |-BinaryOperator 0x12b80a700 <col:7, col:16> 'int' '>='
|         | | | |-ImplicitCastExpr 0x12b80a6e8 <col:7> 'int' <LValueToRValue>
|         | | | | `-DeclRefExpr 0x12b80a4a0 <col:7> 'int' lvalue Var 0x12b140d80 'glyph' 'int'
|         | | | `-IntegerLiteral 0x12b80a4c0 <col:16> 'int' 0
|         | | `-BinaryOperator 0x12b80a740 <col:21, col:29> 'int' contains-errors '<'
|         | |   |-DeclRefExpr 0x12b80a518 <col:21> 'int' lvalue Var 0x12b140d80 'glyph' 'int'
|         | |   `-RecoveryExpr 0x12b80a720 <col:29> '<dependent type>' contains-errors lvalue
|         | `-BinaryOperator 0x12b80a800 <col:42, col:53> 'int' '<'
|         |   |-ImplicitCastExpr 0x12b80a7e8 <col:42, col:49> 'int' <IntegralCast>
|         |   | `-ImplicitCastExpr 0x12b80a7d0 <col:42, col:49> 'unsigned char' <LValueToRValue>
|         |   |   `-ArraySubscriptExpr 0x12b80a7b0 <col:42, col:49> 'unsigned char' lvalue
|         |   |     |-ImplicitCastExpr 0x12b80a780 <col:42> 'unsigned char *' <LValueToRValue>
|         |   |     | `-DeclRefExpr 0x12b80a590 <col:42> 'unsigned char *' lvalue Var 0x12b140f88 'q' 'unsigned char *'
|         |   |     `-ImplicitCastExpr 0x12b80a798 <col:44> 'int' <LValueToRValue>
|         |   |       `-DeclRefExpr 0x12b80a5b0 <col:44> 'int' lvalue Var 0x12b140d80 'glyph' 'int'
|         |   `-IntegerLiteral 0x12b80a620 <col:53> 'int' 32
|         `-CompoundStmt 0x12b80a940 <col:57, line:21:3>
|           `-BinaryOperator 0x12b80a920 <line:20:6, col:17> 'unsigned char' '='
|             |-ArraySubscriptExpr 0x12b80a8b0 <col:6, col:13> 'unsigned char' lvalue
|             | |-ImplicitCastExpr 0x12b80a880 <col:6> 'unsigned char *' <LValueToRValue>
|             | | `-DeclRefExpr 0x12b80a840 <col:6> 'unsigned char *' lvalue Var 0x12b140f88 'q' 'unsigned char *'
|             | `-ImplicitCastExpr 0x12b80a898 <col:8> 'int' <LValueToRValue>
|             |   `-DeclRefExpr 0x12b80a860 <col:8> 'int' lvalue Var 0x12b140d80 'glyph' 'int'
|             `-ImplicitCastExpr 0x12b80a908 <col:17> 'unsigned char' <IntegralCast>
|               `-ImplicitCastExpr 0x12b80a8f0 <col:17> 'int' <LValueToRValue>
|                 `-DeclRefExpr 0x12b80a8d0 <col:17> 'int' lvalue Var 0x12b140d00 'j' 'int'
`-FunctionDecl 0x12b141708 <line:14:2> col:2 implicit used memset 'void *(void *, int, unsigned long)' extern
  |-ParmVarDecl 0x12b141808 <<invalid sloc>> <invalid sloc> 'void *'
  |-ParmVarDecl 0x12b141870 <<invalid sloc>> <invalid sloc> 'int'
  |-ParmVarDecl 0x12b1418d8 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x12b1417b0 <<invalid sloc>> Implicit 900
