TranslationUnitDecl 0x14b855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x14b8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x14b855bd0 '__int128'
|-TypedefDecl 0x14b856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x14b855bf0 'unsigned __int128'
|-TypedefDecl 0x14c00be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x14c00bc00 'struct __NSConstantString_tag'
|   `-Record 0x14b856580 '__NSConstantString_tag'
|-TypedefDecl 0x14c00be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x14b855d90 '__SVInt8_t'
|-TypedefDecl 0x14c00bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x14b855db0 '__SVInt16_t'
|-TypedefDecl 0x14c00bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x14b855dd0 '__SVInt32_t'
|-TypedefDecl 0x14c00bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x14b855df0 '__SVInt64_t'
|-TypedefDecl 0x14c00c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x14b855e10 '__SVUint8_t'
|-TypedefDecl 0x14c00c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x14b855e30 '__SVUint16_t'
|-TypedefDecl 0x14c00c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x14b855e50 '__SVUint32_t'
|-TypedefDecl 0x14c00c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x14b855e70 '__SVUint64_t'
|-TypedefDecl 0x14c00c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x14b855e90 '__SVFloat16_t'
|-TypedefDecl 0x14c00c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x14b855eb0 '__SVFloat32_t'
|-TypedefDecl 0x14c00c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x14b855ed0 '__SVFloat64_t'
|-TypedefDecl 0x14c00c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x14b855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x14c00c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x14b855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x14c00c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x14b855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x14c00c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x14b855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x14c00c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x14b855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x14c00c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x14b855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x14c00c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x14b855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x14c00c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x14b855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x14c00c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x14b855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x14c00c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x14b856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x14c00c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x14b856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x14c00c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x14b856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x14c00c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x14b856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x14c00c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x14b856090 '__clang_svint8x3_t'
|-TypedefDecl 0x14c00c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x14b8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x14c00c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x14b8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x14c00c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x14b8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x14c00c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x14b856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x14c00ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x14b856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x14c00cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x14b856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x14c00cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x14b856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x14c00cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x14b856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x14c00d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x14b8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x14c00d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x14b8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x14c00d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x14b8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x14c00d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x14b856210 '__clang_svint8x4_t'
|-TypedefDecl 0x14c00d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x14b856230 '__clang_svint16x4_t'
|-TypedefDecl 0x14c00d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x14b856250 '__clang_svint32x4_t'
|-TypedefDecl 0x14c00d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x14b856270 '__clang_svint64x4_t'
|-TypedefDecl 0x14c00d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x14b856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x14c00d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x14b8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x14c00d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x14b8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x14c00d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x14b8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x14c00d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x14b856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x14c00d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x14b856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x14c00d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x14b856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x14c00d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x14b856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x14c00da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x14b856390 '__SVBool_t'
|-TypedefDecl 0x14c00da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x14b8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x14c00dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x14b8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x14c00db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x14b8563f0 '__SVCount_t'
|-TypedefDecl 0x14c00dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x14c00dbb0 'char *'
|   `-BuiltinType 0x14b8556b0 'char'
|-TypedefDecl 0x14c00dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x14c00dbb0 'char *'
|   `-BuiltinType 0x14b8556b0 'char'
|-FunctionDecl 0x14c00de88 <dataset_diviso_filec/func11324_vuln.c:1:1, line:26:1> line:1:1 invalid bilinear_box_make_weights 'int (int *, double)'
| |-ParmVarDecl 0x14c00dd28 <col:28, col:51> col:51 referenced invalid dim 'int *'
| |-ParmVarDecl 0x14c00dda8 <line:2:7, col:30> col:30 used scale 'double'
| `-CompoundStmt 0x14b926eb0 <line:3:1, line:26:1>
|   |-DeclStmt 0x14b922968 <line:4:3, col:31>
|   | `-VarDecl 0x14c00df58 <col:3, col:30> col:7 used n 'int' cinit
|   |   `-ImplicitCastExpr 0x14b922950 <col:11, col:30> 'int' <FloatingToIntegral>
|   |     `-CallExpr 0x14b922928 <col:11, col:30> 'double'
|   |       |-ImplicitCastExpr 0x14b922910 <col:11> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x14b9227f0 <col:11> 'double (double)' Function 0x14b922630 'ceil' 'double (double)'
|   |       `-BinaryOperator 0x14b9228c0 <col:17, col:27> 'double' '+'
|   |         |-BinaryOperator 0x14b922880 <col:17, col:19> 'double' '/'
|   |         | |-ImplicitCastExpr 0x14b922868 <col:17> 'double' <IntegralToFloating>
|   |         | | `-IntegerLiteral 0x14b922810 <col:17> 'int' 1
|   |         | `-ImplicitCastExpr 0x14b922850 <col:19> 'double' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x14b922830 <col:19> 'double' lvalue ParmVar 0x14c00dda8 'scale' 'double'
|   |         `-FloatingLiteral 0x14b9228a0 <col:27> 'double' 3.000000e+00
|   |-DeclStmt 0x14b922c08 <line:5:3, col:56>
|   | `-VarDecl 0x14b9229c8 <col:3, col:11> col:11 used pixel_weights 'double *'
|   |-DeclStmt 0x14b922ca0 <line:6:3, col:11>
|   | `-VarDecl 0x14b922c38 <col:3, col:10> col:10 used w 'double'
|   |-DeclStmt 0x14b922dd0 <line:7:3, col:16>
|   | |-VarDecl 0x14b922cd0 <col:3, col:7> col:7 used offset 'int'
|   | `-VarDecl 0x14b922d50 <col:3, col:15> col:15 used i 'int'
|   |-BinaryOperator 0x14b922eb0 <line:9:3, col:18> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x14b922e30 <col:3, col:8> '<dependent type>' contains-errors lvalue ->offset
|   | | `-RecoveryExpr 0x14b922e08 <col:3> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x14b922de8 <col:3> 'int *' lvalue ParmVar 0x14c00dd28 'dim' 'int *'
|   | `-UnaryOperator 0x14b922e98 <col:17, col:18> 'double' prefix '-'
|   |   `-FloatingLiteral 0x14b922e78 <col:18> 'double' 1.000000e+00
|   |-BinaryOperator 0x14b922f80 <line:10:3, col:12> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x14b922f18 <col:3, col:8> '<dependent type>' contains-errors lvalue ->n
|   | | `-RecoveryExpr 0x14b922ef0 <col:3> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x14b922ed0 <col:3> 'int *' lvalue ParmVar 0x14c00dd28 'dim' 'int *'
|   | `-DeclRefExpr 0x14b922f60 <col:12> 'int' lvalue Var 0x14c00df58 'n' 'int'
|   |-BinaryOperator 0x14b923050 <line:11:3, col:18> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x14b922fe8 <col:3, col:8> '<dependent type>' contains-errors lvalue ->weights
|   | | `-RecoveryExpr 0x14b922fc0 <col:3> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x14b922fa0 <col:3> 'int *' lvalue ParmVar 0x14c00dd28 'dim' 'int *'
|   | `-DeclRefExpr 0x14b923030 <col:18> 'double *' lvalue Var 0x14b9229c8 'pixel_weights' 'double *'
|   `-ForStmt 0x14b926e78 <line:13:3, line:25:5>
|     |-BinaryOperator 0x14b9230b0 <line:13:8, col:17> 'int' '='
|     | |-DeclRefExpr 0x14b923070 <col:8> 'int' lvalue Var 0x14b922cd0 'offset' 'int'
|     | `-IntegerLiteral 0x14b923090 <col:17> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x14b923148 <col:20, col:29> 'int' contains-errors '<'
|     | |-DeclRefExpr 0x14b9230d0 <col:20> 'int' lvalue Var 0x14b922cd0 'offset' 'int'
|     | `-RecoveryExpr 0x14b923128 <col:29> '<dependent type>' contains-errors lvalue
|     |-UnaryOperator 0x14b923188 <col:40, col:46> 'int' postfix '++'
|     | `-DeclRefExpr 0x14b923168 <col:40> 'int' lvalue Var 0x14b922cd0 'offset' 'int'
|     `-CompoundStmt 0x14b926e50 <line:14:5, line:25:5>
|       |-DeclStmt 0x14b9233c0 <line:15:7, col:44>
|       | `-VarDecl 0x14b9231b8 <col:7, col:35> col:14 used x 'double' cinit
|       |   `-BinaryOperator 0x14b9233a0 <col:18, col:35> '<dependent type>' contains-errors '/'
|       |     |-CStyleCastExpr 0x14b923358 <col:18, col:26> 'double' <IntegralToFloating>
|       |     | `-ImplicitCastExpr 0x14b923340 <col:26> 'int' <LValueToRValue> part_of_explicit_cast
|       |     |   `-DeclRefExpr 0x14b923220 <col:26> 'int' lvalue Var 0x14b922cd0 'offset' 'int'
|       |     `-RecoveryExpr 0x14b923380 <col:35> '<dependent type>' contains-errors lvalue
|       |-DeclStmt 0x14b923540 <line:16:7, col:31>
|       | `-VarDecl 0x14b9233f0 <col:7, col:26> col:14 used a 'double' cinit
|       |   `-BinaryOperator 0x14b923520 <col:18, col:26> 'double' contains-errors '+'
|       |     |-ImplicitCastExpr 0x14b923508 <col:18> 'double' contains-errors <LValueToRValue>
|       |     | `-DeclRefExpr 0x14b923458 <col:18> 'double' contains-errors lvalue Var 0x14b9231b8 'x' 'double'
|       |     `-BinaryOperator 0x14b9234e8 <col:22, col:26> 'double' '/'
|       |       |-ImplicitCastExpr 0x14b9234d0 <col:22> 'double' <IntegralToFloating>
|       |       | `-IntegerLiteral 0x14b923478 <col:22> 'int' 1
|       |       `-ImplicitCastExpr 0x14b9234b8 <col:26> 'double' <LValueToRValue>
|       |         `-DeclRefExpr 0x14b923498 <col:26> 'double' lvalue ParmVar 0x14c00dda8 'scale' 'double'
|       `-ForStmt 0x14b926e18 <line:18:7, line:24:9>
|         |-BinaryOperator 0x14b923598 <line:18:12, col:16> 'int' '='
|         | |-DeclRefExpr 0x14b923558 <col:12> 'int' lvalue Var 0x14b922d50 'i' 'int'
|         | `-IntegerLiteral 0x14b923578 <col:16> 'int' 0
|         |-<<<NULL>>>
|         |-BinaryOperator 0x14b926630 <col:19, col:23> 'int' '<'
|         | |-ImplicitCastExpr 0x14b926600 <col:19> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x14b9235b8 <col:19> 'int' lvalue Var 0x14b922d50 'i' 'int'
|         | `-ImplicitCastExpr 0x14b926618 <col:23> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x14b9235d8 <col:23> 'int' lvalue Var 0x14c00df58 'n' 'int'
|         |-UnaryOperator 0x14b926670 <col:26, col:27> 'int' postfix '++'
|         | `-DeclRefExpr 0x14b926650 <col:26> 'int' lvalue Var 0x14b922d50 'i' 'int'
|         `-CompoundStmt 0x14b926df0 <line:19:9, line:24:9>
|           |-BinaryOperator 0x14b926a10 <line:20:11, col:57> 'double' contains-errors '='
|           | |-DeclRefExpr 0x14b926688 <col:11> 'double' lvalue Var 0x14b922c38 'w' 'double'
|           | `-ImplicitCastExpr 0x14b9269f8 <col:16, col:57> 'double' contains-errors <IntegralToFloating>
|           |   `-CallExpr 0x14b9269c8 <col:16, col:57> 'int' contains-errors
|           |     |-ImplicitCastExpr 0x14b9269b0 <col:16> 'int (*)()' <FunctionToPointerDecay>
|           |     | `-DeclRefExpr 0x14b926788 <col:16> 'int ()' Function 0x14b9266d0 'linear_box_half' 'int ()'
|           |     |-BinaryOperator 0x14b926870 <col:33, col:43> 'double' contains-errors '-'
|           |     | |-BinaryOperator 0x14b926818 <col:33, col:39> 'double' '+'
|           |     | | |-FloatingLiteral 0x14b9267a8 <col:33> 'double' 5.000000e-01
|           |     | | `-ImplicitCastExpr 0x14b926800 <col:39> 'double' <IntegralToFloating>
|           |     | |   `-ImplicitCastExpr 0x14b9267e8 <col:39> 'int' <LValueToRValue>
|           |     | |     `-DeclRefExpr 0x14b9267c8 <col:39> 'int' lvalue Var 0x14b922d50 'i' 'int'
|           |     | `-ImplicitCastExpr 0x14b926858 <col:43> 'double' contains-errors <LValueToRValue>
|           |     |   `-DeclRefExpr 0x14b926838 <col:43> 'double' contains-errors lvalue Var 0x14b9233f0 'a' 'double'
|           |     `-BinaryOperator 0x14b926958 <col:46, col:56> 'double' contains-errors '-'
|           |       |-BinaryOperator 0x14b926900 <col:46, col:52> 'double' '+'
|           |       | |-FloatingLiteral 0x14b926890 <col:46> 'double' 5.000000e-01
|           |       | `-ImplicitCastExpr 0x14b9268e8 <col:52> 'double' <IntegralToFloating>
|           |       |   `-ImplicitCastExpr 0x14b9268d0 <col:52> 'int' <LValueToRValue>
|           |       |     `-DeclRefExpr 0x14b9268b0 <col:52> 'int' lvalue Var 0x14b922d50 'i' 'int'
|           |       `-ImplicitCastExpr 0x14b926940 <col:56> 'double' contains-errors <LValueToRValue>
|           |         `-DeclRefExpr 0x14b926920 <col:56> 'double' contains-errors lvalue Var 0x14b9231b8 'x' 'double'
|           |-CompoundAssignOperator 0x14b926ca0 <line:21:11, col:57> 'double' contains-errors '+=' ComputeLHSTy='double' ComputeResultTy='double'
|           | |-DeclRefExpr 0x14b926a30 <col:11> 'double' lvalue Var 0x14b922c38 'w' 'double'
|           | `-ImplicitCastExpr 0x14b926c88 <col:16, col:57> 'double' contains-errors <IntegralToFloating>
|           |   `-CallExpr 0x14b926c58 <col:16, col:57> 'int' contains-errors
|           |     |-ImplicitCastExpr 0x14b926c40 <col:16> 'int (*)()' <FunctionToPointerDecay>
|           |     | `-DeclRefExpr 0x14b926a50 <col:16> 'int ()' Function 0x14b9266d0 'linear_box_half' 'int ()'
|           |     |-BinaryOperator 0x14b926b38 <col:33, col:43> 'double' contains-errors '-'
|           |     | |-BinaryOperator 0x14b926ac8 <col:33, col:39> 'double' contains-errors '+'
|           |     | | |-FloatingLiteral 0x14b926a70 <col:33> 'double' 1.500000e+00
|           |     | | `-ImplicitCastExpr 0x14b926ab0 <col:39> 'double' contains-errors <LValueToRValue>
|           |     | |   `-DeclRefExpr 0x14b926a90 <col:39> 'double' contains-errors lvalue Var 0x14b9231b8 'x' 'double'
|           |     | `-ImplicitCastExpr 0x14b926b20 <col:43> 'double' <IntegralToFloating>
|           |     |   `-ImplicitCastExpr 0x14b926b08 <col:43> 'int' <LValueToRValue>
|           |     |     `-DeclRefExpr 0x14b926ae8 <col:43> 'int' lvalue Var 0x14b922d50 'i' 'int'
|           |     `-BinaryOperator 0x14b926c20 <col:46, col:56> 'double' contains-errors '-'
|           |       |-BinaryOperator 0x14b926bb0 <col:46, col:52> 'double' contains-errors '+'
|           |       | |-FloatingLiteral 0x14b926b58 <col:46> 'double' 1.500000e+00
|           |       | `-ImplicitCastExpr 0x14b926b98 <col:52> 'double' contains-errors <LValueToRValue>
|           |       |   `-DeclRefExpr 0x14b926b78 <col:52> 'double' contains-errors lvalue Var 0x14b9233f0 'a' 'double'
|           |       `-ImplicitCastExpr 0x14b926c08 <col:56> 'double' <IntegralToFloating>
|           |         `-ImplicitCastExpr 0x14b926bf0 <col:56> 'int' <LValueToRValue>
|           |           `-DeclRefExpr 0x14b926bd0 <col:56> 'int' lvalue Var 0x14b922d50 'i' 'int'
|           `-BinaryOperator 0x14b926dd0 <line:23:11, col:36> 'double' '='
|             |-UnaryOperator 0x14b926d28 <col:11, col:28> 'double' lvalue prefix '*' cannot overflow
|             | `-ParenExpr 0x14b926d08 <col:12, col:28> 'double *'
|             |   `-UnaryOperator 0x14b926cf0 <col:13, col:26> 'double *' postfix '++'
|             |     `-DeclRefExpr 0x14b926cd0 <col:13> 'double *' lvalue Var 0x14b9229c8 'pixel_weights' 'double *'
|             `-BinaryOperator 0x14b926db0 <col:32, col:36> 'double' '*'
|               |-ImplicitCastExpr 0x14b926d80 <col:32> 'double' <LValueToRValue>
|               | `-DeclRefExpr 0x14b926d40 <col:32> 'double' lvalue Var 0x14b922c38 'w' 'double'
|               `-ImplicitCastExpr 0x14b926d98 <col:36> 'double' <LValueToRValue>
|                 `-DeclRefExpr 0x14b926d60 <col:36> 'double' lvalue ParmVar 0x14c00dda8 'scale' 'double'
`-FunctionDecl 0x14b922630 <line:4:11> col:11 implicit used ceil 'double (double)' extern
  |-ParmVarDecl 0x14b922730 <<invalid sloc>> <invalid sloc> 'double'
  |-BuiltinAttr 0x14b9226d8 <<invalid sloc>> Implicit 1052
  |-NoThrowAttr 0x14b9227a0 <col:11> Implicit
  `-ConstAttr 0x14b9227c8 <col:11> Implicit
