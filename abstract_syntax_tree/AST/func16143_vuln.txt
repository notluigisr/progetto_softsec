TranslationUnitDecl 0x15a855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x15a8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x15a855bd0 '__int128'
|-TypedefDecl 0x15a856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x15a855bf0 'unsigned __int128'
|-TypedefDecl 0x15b00be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x15b00bc00 'struct __NSConstantString_tag'
|   `-Record 0x15a856580 '__NSConstantString_tag'
|-TypedefDecl 0x15b00be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x15a855d90 '__SVInt8_t'
|-TypedefDecl 0x15b00bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x15a855db0 '__SVInt16_t'
|-TypedefDecl 0x15b00bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x15a855dd0 '__SVInt32_t'
|-TypedefDecl 0x15b00bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x15a855df0 '__SVInt64_t'
|-TypedefDecl 0x15b00c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x15a855e10 '__SVUint8_t'
|-TypedefDecl 0x15b00c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x15a855e30 '__SVUint16_t'
|-TypedefDecl 0x15b00c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x15a855e50 '__SVUint32_t'
|-TypedefDecl 0x15b00c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x15a855e70 '__SVUint64_t'
|-TypedefDecl 0x15b00c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x15a855e90 '__SVFloat16_t'
|-TypedefDecl 0x15b00c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x15a855eb0 '__SVFloat32_t'
|-TypedefDecl 0x15b00c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x15a855ed0 '__SVFloat64_t'
|-TypedefDecl 0x15b00c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x15a855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x15b00c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x15a855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x15b00c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x15a855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x15b00c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x15a855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x15b00c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x15a855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x15b00c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x15a855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x15b00c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x15a855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x15b00c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x15a855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x15b00c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x15a855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x15b00c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x15a856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x15b00c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x15a856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x15b00c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x15a856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x15b00c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x15a856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x15b00c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x15a856090 '__clang_svint8x3_t'
|-TypedefDecl 0x15b00c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x15a8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x15b00c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x15a8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x15b00c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x15a8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x15b00c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x15a856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x15b00ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x15a856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x15b00cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x15a856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x15b00cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x15a856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x15b00cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x15a856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x15b00d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x15a8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x15b00d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x15a8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x15b00d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x15a8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x15b00d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x15a856210 '__clang_svint8x4_t'
|-TypedefDecl 0x15b00d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x15a856230 '__clang_svint16x4_t'
|-TypedefDecl 0x15b00d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x15a856250 '__clang_svint32x4_t'
|-TypedefDecl 0x15b00d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x15a856270 '__clang_svint64x4_t'
|-TypedefDecl 0x15b00d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x15a856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x15b00d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x15a8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x15b00d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x15a8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x15b00d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x15a8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x15b00d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x15a856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x15b00d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x15a856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x15b00d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x15a856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x15b00d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x15a856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x15b00da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x15a856390 '__SVBool_t'
|-TypedefDecl 0x15b00da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x15a8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x15b00dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x15a8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x15b00db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x15a8563f0 '__SVCount_t'
|-TypedefDecl 0x15b00dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x15b00dbb0 'char *'
|   `-BuiltinType 0x15a8556b0 'char'
|-TypedefDecl 0x15b00dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x15b00dbb0 'char *'
|   `-BuiltinType 0x15a8556b0 'char'
|-FunctionDecl 0x15b00de38 <dataset_diviso_filec/func16143_vuln.c:1:1, line:24:1> line:1:5 parse_csum_name 'int (const char *, int)'
| |-ParmVarDecl 0x15b00dcd8 <col:21, col:33> col:33 used name 'const char *'
| |-ParmVarDecl 0x15b00dd58 <col:39, col:43> col:43 used len 'int'
| `-CompoundStmt 0x15b029070 <line:2:1, line:24:1>
|   |-IfStmt 0x15b026920 <line:3:2, line:4:20>
|   | |-BinaryOperator 0x15b00dfe8 <line:3:6, col:17> 'int' '&&'
|   | | |-BinaryOperator 0x15b00df90 <col:6, col:12> 'int' '<'
|   | | | |-ImplicitCastExpr 0x15b00df78 <col:6> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x15b00df38 <col:6> 'int' lvalue ParmVar 0x15b00dd58 'len' 'int'
|   | | | `-IntegerLiteral 0x15b00df58 <col:12> 'int' 0
|   | | `-ImplicitCastExpr 0x15b00dfd0 <col:17> 'const char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x15b00dfb0 <col:17> 'const char *' lvalue ParmVar 0x15b00dcd8 'name' 'const char *'
|   | `-BinaryOperator 0x15b026900 <line:4:3, col:20> 'int' '='
|   |   |-DeclRefExpr 0x15b00e008 <col:3> 'int' lvalue ParmVar 0x15b00dd58 'len' 'int'
|   |   `-ImplicitCastExpr 0x15b0268e8 <col:9, col:20> 'int' <IntegralCast>
|   |     `-CallExpr 0x15b0268a8 <col:9, col:20> 'unsigned long'
|   |       |-ImplicitCastExpr 0x15b026890 <col:9> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x15b026800 <col:9> 'unsigned long (const char *)' Function 0x15b026690 'strlen' 'unsigned long (const char *)'
|   |       `-ImplicitCastExpr 0x15b0268d0 <col:16> 'const char *' <LValueToRValue>
|   |         `-DeclRefExpr 0x15b026820 <col:16> 'const char *' lvalue ParmVar 0x15b00dcd8 'name' 'const char *'
|   |-IfStmt 0x15b0272b0 <line:6:2, line:14:2>
|   | |-BinaryOperator 0x15b026f00 <line:6:6, col:60> 'int' '||'
|   | | |-UnaryOperator 0x15b026978 <col:6, col:7> 'int' prefix '!' cannot overflow
|   | | | `-ImplicitCastExpr 0x15b026960 <col:7> 'const char *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x15b026940 <col:7> 'const char *' lvalue ParmVar 0x15b00dcd8 'name' 'const char *'
|   | | `-ParenExpr 0x15b026ee0 <col:15, col:60> 'int'
|   | |   `-BinaryOperator 0x15b026ec0 <col:16, col:59> 'int' '&&'
|   | |     |-BinaryOperator 0x15b0269e8 <col:16, col:23> 'int' '=='
|   | |     | |-ImplicitCastExpr 0x15b0269d0 <col:16> 'int' <LValueToRValue>
|   | |     | | `-DeclRefExpr 0x15b026990 <col:16> 'int' lvalue ParmVar 0x15b00dd58 'len' 'int'
|   | |     | `-IntegerLiteral 0x15b0269b0 <col:23> 'int' 4
|   | |     `-BinaryOperator 0x15b026ea0 <col:28, col:59> 'int' '=='
|   | |       |-CallExpr 0x15b026de8 <col:28, col:54> 'int'
|   | |       | |-ImplicitCastExpr 0x15b026dd0 <col:28> 'int (*)(const char *, const char *, unsigned long)' <FunctionToPointerDecay>
|   | |       | | `-DeclRefExpr 0x15b026ca8 <col:28> 'int (const char *, const char *, unsigned long)' Function 0x15b026a58 'strncasecmp' 'int (const char *, const char *, unsigned long)'
|   | |       | |-ImplicitCastExpr 0x15b026e20 <col:40> 'const char *' <LValueToRValue>
|   | |       | | `-DeclRefExpr 0x15b026cc8 <col:40> 'const char *' lvalue ParmVar 0x15b00dcd8 'name' 'const char *'
|   | |       | |-ImplicitCastExpr 0x15b026e50 <col:46> 'const char *' <NoOp>
|   | |       | | `-ImplicitCastExpr 0x15b026e38 <col:46> 'char *' <ArrayToPointerDecay>
|   | |       | |   `-StringLiteral 0x15b026d30 <col:46> 'char[4]' lvalue "STR"
|   | |       | `-ImplicitCastExpr 0x15b026e68 <col:53> 'unsigned long' <IntegralCast>
|   | |       |   `-IntegerLiteral 0x15b026d50 <col:53> 'int' 4
|   | |       `-IntegerLiteral 0x15b026e80 <col:59> 'int' 0
|   | `-CompoundStmt 0x15b027280 <col:63, line:14:2>
|   |   |-IfStmt 0x15b027018 <line:7:3, line:8:11>
|   |   | |-BinaryOperator 0x15b026fb0 <line:7:7, col:27> 'int' contains-errors '>='
|   |   | | |-RecoveryExpr 0x15b026f90 <col:7> '<dependent type>' contains-errors lvalue
|   |   | | `-IntegerLiteral 0x15b026f50 <col:27> 'int' 30
|   |   | `-ReturnStmt 0x15b027008 <line:8:4, col:11>
|   |   |   `-RecoveryExpr 0x15b026fe8 <col:11> '<dependent type>' contains-errors lvalue
|   |   |-IfStmt 0x15b027118 <line:9:3, line:10:11>
|   |   | |-BinaryOperator 0x15b0270b0 <line:9:7, col:27> 'int' contains-errors '>='
|   |   | | |-RecoveryExpr 0x15b027090 <col:7> '<dependent type>' contains-errors lvalue
|   |   | | `-IntegerLiteral 0x15b027050 <col:27> 'int' 27
|   |   | `-ReturnStmt 0x15b027108 <line:10:4, col:11>
|   |   |   `-RecoveryExpr 0x15b0270e8 <col:11> '<dependent type>' contains-errors lvalue
|   |   |-IfStmt 0x15b027218 <line:11:3, line:12:11>
|   |   | |-BinaryOperator 0x15b0271b0 <line:11:7, col:27> 'int' contains-errors '>='
|   |   | | |-RecoveryExpr 0x15b027190 <col:7> '<dependent type>' contains-errors lvalue
|   |   | | `-IntegerLiteral 0x15b027150 <col:27> 'int' 21
|   |   | `-ReturnStmt 0x15b027208 <line:12:4, col:11>
|   |   |   `-RecoveryExpr 0x15b0271e8 <col:11> '<dependent type>' contains-errors lvalue
|   |   `-ReturnStmt 0x15b027270 <line:13:3, col:10>
|   |     `-RecoveryExpr 0x15b027250 <col:10> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x15b027550 <line:15:2, line:16:10>
|   | |-BinaryOperator 0x15b0274e8 <line:15:6, col:49> 'int' '&&'
|   | | |-BinaryOperator 0x15b027328 <col:6, col:13> 'int' '=='
|   | | | |-ImplicitCastExpr 0x15b027310 <col:6> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x15b0272d0 <col:6> 'int' lvalue ParmVar 0x15b00dd58 'len' 'int'
|   | | | `-IntegerLiteral 0x15b0272f0 <col:13> 'int' 3
|   | | `-BinaryOperator 0x15b0274c8 <col:18, col:49> 'int' '=='
|   | |   |-CallExpr 0x15b027410 <col:18, col:44> 'int'
|   | |   | |-ImplicitCastExpr 0x15b0273f8 <col:18> 'int (*)(const char *, const char *, unsigned long)' <FunctionToPointerDecay>
|   | |   | | `-DeclRefExpr 0x15b027348 <col:18> 'int (const char *, const char *, unsigned long)' Function 0x15b026a58 'strncasecmp' 'int (const char *, const char *, unsigned long)'
|   | |   | |-ImplicitCastExpr 0x15b027448 <col:30> 'const char *' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x15b027368 <col:30> 'const char *' lvalue ParmVar 0x15b00dcd8 'name' 'const char *'
|   | |   | |-ImplicitCastExpr 0x15b027478 <col:36> 'const char *' <NoOp>
|   | |   | | `-ImplicitCastExpr 0x15b027460 <col:36> 'char *' <ArrayToPointerDecay>
|   | |   | |   `-StringLiteral 0x15b027388 <col:36> 'char[4]' lvalue "STR"
|   | |   | `-ImplicitCastExpr 0x15b027490 <col:43> 'unsigned long' <IntegralCast>
|   | |   |   `-IntegerLiteral 0x15b0273a8 <col:43> 'int' 3
|   | |   `-IntegerLiteral 0x15b0274a8 <col:49> 'int' 0
|   | `-ReturnStmt 0x15b027540 <line:16:3, col:10>
|   |   `-RecoveryExpr 0x15b027520 <col:10> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x15b028a08 <line:17:2, line:18:10>
|   | |-BinaryOperator 0x15b0289a0 <line:17:6, col:49> 'int' '&&'
|   | | |-BinaryOperator 0x15b0275c8 <col:6, col:13> 'int' '=='
|   | | | |-ImplicitCastExpr 0x15b0275b0 <col:6> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x15b027570 <col:6> 'int' lvalue ParmVar 0x15b00dd58 'len' 'int'
|   | | | `-IntegerLiteral 0x15b027590 <col:13> 'int' 3
|   | | `-BinaryOperator 0x15b028980 <col:18, col:49> 'int' '=='
|   | |   |-CallExpr 0x15b0288c8 <col:18, col:44> 'int'
|   | |   | |-ImplicitCastExpr 0x15b0288b0 <col:18> 'int (*)(const char *, const char *, unsigned long)' <FunctionToPointerDecay>
|   | |   | | `-DeclRefExpr 0x15b028800 <col:18> 'int (const char *, const char *, unsigned long)' Function 0x15b026a58 'strncasecmp' 'int (const char *, const char *, unsigned long)'
|   | |   | |-ImplicitCastExpr 0x15b028900 <col:30> 'const char *' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x15b028820 <col:30> 'const char *' lvalue ParmVar 0x15b00dcd8 'name' 'const char *'
|   | |   | |-ImplicitCastExpr 0x15b028930 <col:36> 'const char *' <NoOp>
|   | |   | | `-ImplicitCastExpr 0x15b028918 <col:36> 'char *' <ArrayToPointerDecay>
|   | |   | |   `-StringLiteral 0x15b028840 <col:36> 'char[4]' lvalue "STR"
|   | |   | `-ImplicitCastExpr 0x15b028948 <col:43> 'unsigned long' <IntegralCast>
|   | |   |   `-IntegerLiteral 0x15b028860 <col:43> 'int' 3
|   | |   `-IntegerLiteral 0x15b028960 <col:49> 'int' 0
|   | `-ReturnStmt 0x15b0289f8 <line:18:3, col:10>
|   |   `-RecoveryExpr 0x15b0289d8 <col:10> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x15b028ca8 <line:19:2, line:20:10>
|   | |-BinaryOperator 0x15b028c40 <line:19:6, col:49> 'int' '&&'
|   | | |-BinaryOperator 0x15b028a80 <col:6, col:13> 'int' '=='
|   | | | |-ImplicitCastExpr 0x15b028a68 <col:6> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x15b028a28 <col:6> 'int' lvalue ParmVar 0x15b00dd58 'len' 'int'
|   | | | `-IntegerLiteral 0x15b028a48 <col:13> 'int' 4
|   | | `-BinaryOperator 0x15b028c20 <col:18, col:49> 'int' '=='
|   | |   |-CallExpr 0x15b028b68 <col:18, col:44> 'int'
|   | |   | |-ImplicitCastExpr 0x15b028b50 <col:18> 'int (*)(const char *, const char *, unsigned long)' <FunctionToPointerDecay>
|   | |   | | `-DeclRefExpr 0x15b028aa0 <col:18> 'int (const char *, const char *, unsigned long)' Function 0x15b026a58 'strncasecmp' 'int (const char *, const char *, unsigned long)'
|   | |   | |-ImplicitCastExpr 0x15b028ba0 <col:30> 'const char *' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x15b028ac0 <col:30> 'const char *' lvalue ParmVar 0x15b00dcd8 'name' 'const char *'
|   | |   | |-ImplicitCastExpr 0x15b028bd0 <col:36> 'const char *' <NoOp>
|   | |   | | `-ImplicitCastExpr 0x15b028bb8 <col:36> 'char *' <ArrayToPointerDecay>
|   | |   | |   `-StringLiteral 0x15b028ae0 <col:36> 'char[4]' lvalue "STR"
|   | |   | `-ImplicitCastExpr 0x15b028be8 <col:43> 'unsigned long' <IntegralCast>
|   | |   |   `-IntegerLiteral 0x15b028b00 <col:43> 'int' 4
|   | |   `-IntegerLiteral 0x15b028c00 <col:49> 'int' 0
|   | `-ReturnStmt 0x15b028c98 <line:20:3, col:10>
|   |   `-RecoveryExpr 0x15b028c78 <col:10> '<dependent type>' contains-errors lvalue
|   |-CallExpr 0x15b028eb0 <line:22:2, col:29> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x15b028de0 <col:2> 'int ()' Function 0x15b028d28 'rprintf' 'int ()'
|   | |-RecoveryExpr 0x15b028e90 <col:10> '<dependent type>' contains-errors lvalue
|   | |-StringLiteral 0x15b028e18 <col:18> 'char[4]' lvalue "STR"
|   | `-DeclRefExpr 0x15b028e38 <col:25> 'const char *' lvalue ParmVar 0x15b00dcd8 'name' 'const char *'
|   `-CallExpr 0x15b029048 <line:23:2, col:31> '<dependent type>' contains-errors
|     |-DeclRefExpr 0x15b028fc8 <col:2> 'int ()' Function 0x15b028f10 'exit_cleanup' 'int ()'
|     `-RecoveryExpr 0x15b029028 <col:15> '<dependent type>' contains-errors lvalue
|-FunctionDecl 0x15b026690 <line:4:9> col:9 implicit used strlen 'unsigned long (const char *)' extern
| |-ParmVarDecl 0x15b026790 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x15b026738 <<invalid sloc>> Implicit 902
`-FunctionDecl 0x15b026a58 <line:6:28> col:28 implicit used strncasecmp 'int (const char *, const char *, unsigned long)' extern
  |-ParmVarDecl 0x15b026b58 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x15b026bc0 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x15b026c28 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x15b026b00 <<invalid sloc>> Implicit 958
