TranslationUnitDecl 0x120055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1200564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x120055bd0 '__int128'
|-TypedefDecl 0x120056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x120055bf0 'unsigned __int128'
|-TypedefDecl 0x10500be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x10500bc00 'struct __NSConstantString_tag'
|   `-Record 0x120056580 '__NSConstantString_tag'
|-TypedefDecl 0x10500be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x120055d90 '__SVInt8_t'
|-TypedefDecl 0x10500bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x120055db0 '__SVInt16_t'
|-TypedefDecl 0x10500bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x120055dd0 '__SVInt32_t'
|-TypedefDecl 0x10500bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x120055df0 '__SVInt64_t'
|-TypedefDecl 0x10500c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x120055e10 '__SVUint8_t'
|-TypedefDecl 0x10500c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x120055e30 '__SVUint16_t'
|-TypedefDecl 0x10500c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x120055e50 '__SVUint32_t'
|-TypedefDecl 0x10500c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x120055e70 '__SVUint64_t'
|-TypedefDecl 0x10500c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x120055e90 '__SVFloat16_t'
|-TypedefDecl 0x10500c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x120055eb0 '__SVFloat32_t'
|-TypedefDecl 0x10500c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x120055ed0 '__SVFloat64_t'
|-TypedefDecl 0x10500c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x120055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x10500c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x120055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x10500c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x120055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x10500c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x120055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x10500c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x120055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x10500c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x120055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x10500c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x120055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x10500c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x120055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x10500c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x120055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x10500c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x120056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x10500c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x120056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x10500c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x120056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x10500c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x120056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x10500c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x120056090 '__clang_svint8x3_t'
|-TypedefDecl 0x10500c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1200560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x10500c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1200560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x10500c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1200560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x10500c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x120056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x10500ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x120056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x10500cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x120056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x10500cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x120056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x10500cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x120056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x10500d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1200561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x10500d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1200561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x10500d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1200561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x10500d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x120056210 '__clang_svint8x4_t'
|-TypedefDecl 0x10500d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x120056230 '__clang_svint16x4_t'
|-TypedefDecl 0x10500d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x120056250 '__clang_svint32x4_t'
|-TypedefDecl 0x10500d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x120056270 '__clang_svint64x4_t'
|-TypedefDecl 0x10500d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x120056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x10500d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1200562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x10500d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1200562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x10500d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1200562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x10500d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x120056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x10500d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x120056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x10500d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x120056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x10500d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x120056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x10500da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x120056390 '__SVBool_t'
|-TypedefDecl 0x10500da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1200563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x10500dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1200563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x10500db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1200563f0 '__SVCount_t'
|-TypedefDecl 0x10500dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x10500dbb0 'char *'
|   `-BuiltinType 0x1200556b0 'char'
|-TypedefDecl 0x10500dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x10500dbb0 'char *'
|   `-BuiltinType 0x1200556b0 'char'
|-FunctionDecl 0x10500de88 <dataset_diviso_filec/func14012_vuln.c:1:1, line:56:1> line:1:1 invalid decodenetnum 'int (const char *, int *)'
| |-ParmVarDecl 0x10500dcd8 <line:2:2, col:14> col:14 used num 'const char *'
| |-ParmVarDecl 0x10500dda8 <line:3:2, col:14> col:14 invalid netnum 'int *'
| `-CompoundStmt 0x105029e78 <line:5:1, line:56:1>
|   |-DeclStmt 0x105027658 <line:6:2, col:35>
|   | |-RecordDecl 0x10500df40 <col:2, col:9> col:9 struct addrinfo
|   | |-VarDecl 0x10500e038 <col:2, col:18> col:18 referenced invalid hints 'struct addrinfo'
|   | `-VarDecl 0x105027598 <col:2, col:31> col:26 used ai 'struct addrinfo *' cinit
|   |   `-RecoveryExpr 0x105027618 <col:31> '<dependent type>' contains-errors lvalue
|   |-DeclStmt 0x1050276f0 <line:7:2, col:9>
|   | `-VarDecl 0x105027688 <col:2, col:6> col:6 used err 'int'
|   |-DeclStmt 0x105027788 <line:8:2, col:14>
|   | `-VarDecl 0x105027720 <col:2, col:10> col:10 used port 'short'
|   |-DeclStmt 0x105027820 <line:9:2, col:16>
|   | `-VarDecl 0x1050277b8 <col:2, col:14> col:14 used cp 'const char *'
|   |-DeclStmt 0x1050278b8 <line:10:2, col:22>
|   | `-VarDecl 0x105027850 <col:2, col:14> col:14 used port_str 'const char *'
|   |-DeclStmt 0x105027950 <line:11:2, col:10>
|   | `-VarDecl 0x1050278e8 <col:2, col:8> col:8 used pp 'char *'
|   |-DeclStmt 0x1050279e8 <line:12:2, col:10>
|   | `-VarDecl 0x105027980 <col:2, col:8> col:8 used np 'char *'
|   |-DeclStmt 0x105027b08 <line:13:2, col:15>
|   | `-VarDecl 0x105027aa0 <col:2, col:14> col:7 used name 'char[80]'
|   |-CallExpr 0x105027d60 <line:15:2, col:21> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x105027c80 <col:2> 'int ()' Function 0x105027bc8 'REQUIRE' 'int ()'
|   | `-BinaryOperator 0x105027d40 <col:10, col:17> 'int' contains-errors '!='
|   |   |-DeclRefExpr 0x105027ca0 <col:10> 'const char *' lvalue ParmVar 0x10500dcd8 'num' 'const char *'
|   |   `-RecoveryExpr 0x105027d20 <col:17> '<dependent type>' contains-errors lvalue
|   |-CallExpr 0x105028108 <line:16:2, col:36> 'int'
|   | |-ImplicitCastExpr 0x1050280f0 <col:2> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x105027d88 <col:2> 'int ()' Function 0x105027bc8 'REQUIRE' 'int ()'
|   | `-BinaryOperator 0x105028098 <col:10, col:35> 'int' '<'
|   |   |-CallExpr 0x105027ff8 <col:10, col:20> 'unsigned long'
|   |   | |-ImplicitCastExpr 0x105027fe0 <col:10> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x105027f58 <col:10> 'unsigned long (const char *)' Function 0x105027de8 'strlen' 'unsigned long (const char *)'
|   |   | `-ImplicitCastExpr 0x105028020 <col:17> 'const char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x105027f78 <col:17> 'const char *' lvalue ParmVar 0x10500dcd8 'num' 'const char *'
|   |   `-UnaryExprOrTypeTraitExpr 0x105028078 <col:24, col:35> 'unsigned long' sizeof
|   |     `-ParenExpr 0x105028058 <col:30, col:35> 'char[80]' lvalue
|   |       `-DeclRefExpr 0x105028038 <col:31> 'char[80]' lvalue Var 0x105027aa0 'name' 'char[80]' non_odr_use_unevaluated
|   |-BinaryOperator 0x1050281a8 <line:18:2, col:13> 'const char *' contains-errors '='
|   | |-DeclRefExpr 0x105028130 <col:2> 'const char *' lvalue Var 0x105027850 'port_str' 'const char *'
|   | `-RecoveryExpr 0x105028188 <col:13> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x10502beb0 <line:19:2, line:42:2> has_else
|   | |-BinaryOperator 0x105028288 <line:19:6, col:18> 'int' '!='
|   | | |-CharacterLiteral 0x1050281c8 <col:6> 'int' 91
|   | | `-ImplicitCastExpr 0x105028270 <col:13, col:18> 'int' <IntegralCast>
|   | |   `-ImplicitCastExpr 0x105028258 <col:13, col:18> 'char' <LValueToRValue>
|   | |     `-ArraySubscriptExpr 0x105028238 <col:13, col:18> 'const char' lvalue
|   | |       |-ImplicitCastExpr 0x105028220 <col:13> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x1050281e0 <col:13> 'const char *' lvalue ParmVar 0x10500dcd8 'num' 'const char *'
|   | |       `-IntegerLiteral 0x105028200 <col:17> 'int' 0
|   | |-CompoundStmt 0x10502b5c8 <col:21, line:33:2>
|   | | |-BinaryOperator 0x10502aa10 <line:21:3, col:23> 'char *' '='
|   | | | |-DeclRefExpr 0x1050282a8 <col:3> 'char *' lvalue Var 0x1050278e8 'pp' 'char *'
|   | | | `-CallExpr 0x10502a9c8 <col:8, col:23> 'char *'
|   | | |   |-ImplicitCastExpr 0x10502a9b0 <col:8> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x10502a910 <col:8> 'char *(const char *, int)' Function 0x105028310 'strchr' 'char *(const char *, int)'
|   | | |   |-ImplicitCastExpr 0x10502a9f8 <col:15> 'const char *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x10502a930 <col:15> 'const char *' lvalue ParmVar 0x10500dcd8 'num' 'const char *'
|   | | |   `-CharacterLiteral 0x10502a950 <col:20> 'int' 58
|   | | `-IfStmt 0x10502b598 <line:22:3, line:32:3> has_else
|   | |   |-BinaryOperator 0x10502aaa8 <line:22:7, col:15> 'int' contains-errors '=='
|   | |   | |-RecoveryExpr 0x10502aa88 <col:7> '<dependent type>' contains-errors lvalue
|   | |   | `-DeclRefExpr 0x10502aa48 <col:15> 'char *' lvalue Var 0x1050278e8 'pp' 'char *'
|   | |   |-BinaryOperator 0x10502ab20 <line:23:4, col:9> 'const char *' '='
|   | |   | |-DeclRefExpr 0x10502aac8 <col:4> 'const char *' lvalue Var 0x1050277b8 'cp' 'const char *'
|   | |   | `-ImplicitCastExpr 0x10502ab08 <col:9> 'const char *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x10502aae8 <col:9> 'const char *' lvalue ParmVar 0x10500dcd8 'num' 'const char *'
|   | |   `-IfStmt 0x10502b568 <line:24:8, line:32:3> has_else
|   | |     |-BinaryOperator 0x10502ad40 <line:24:12, col:38> 'int' contains-errors '!='
|   | |     | |-RecoveryExpr 0x10502ac88 <col:12> '<dependent type>' contains-errors lvalue
|   | |     | `-CallExpr 0x10502acf8 <col:20, col:38> 'char *'
|   | |     |   |-ImplicitCastExpr 0x10502ace0 <col:20> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   | |     |   | `-DeclRefExpr 0x10502ab58 <col:20> 'char *(const char *, int)' Function 0x105028310 'strchr' 'char *(const char *, int)'
|   | |     |   |-ImplicitCastExpr 0x10502ad28 <col:27, col:32> 'const char *' <NoOp>
|   | |     |   | `-BinaryOperator 0x10502acc0 <col:27, col:32> 'char *' '+'
|   | |     |   |   |-ImplicitCastExpr 0x10502aca8 <col:27> 'char *' <LValueToRValue>
|   | |     |   |   | `-DeclRefExpr 0x10502ab78 <col:27> 'char *' lvalue Var 0x1050278e8 'pp' 'char *'
|   | |     |   |   `-IntegerLiteral 0x10502ab98 <col:32> 'int' 1
|   | |     |   `-CharacterLiteral 0x10502abf0 <col:35> 'int' 58
|   | |     |-BinaryOperator 0x10502adb8 <line:25:4, col:9> 'const char *' '='
|   | |     | |-DeclRefExpr 0x10502ad60 <col:4> 'const char *' lvalue Var 0x1050277b8 'cp' 'const char *'
|   | |     | `-ImplicitCastExpr 0x10502ada0 <col:9> 'const char *' <LValueToRValue>
|   | |     |   `-DeclRefExpr 0x10502ad80 <col:9> 'const char *' lvalue ParmVar 0x10500dcd8 'num' 'const char *'
|   | |     `-CompoundStmt 0x10502b530 <line:26:8, line:32:3>
|   | |       |-CallExpr 0x10502b1b8 <line:27:4, col:35> 'unsigned long'
|   | |       | |-ImplicitCastExpr 0x10502b1a0 <col:4> 'unsigned long (*)(char *, const char *, unsigned long)' <FunctionToPointerDecay>
|   | |       | | `-DeclRefExpr 0x10502b078 <col:4> 'unsigned long (char *, const char *, unsigned long)' Function 0x10502ae28 'strlcpy' 'unsigned long (char *, const char *, unsigned long)'
|   | |       | |-ImplicitCastExpr 0x10502b1f0 <col:12> 'char *' <ArrayToPointerDecay>
|   | |       | | `-DeclRefExpr 0x10502b098 <col:12> 'char[80]' lvalue Var 0x105027aa0 'name' 'char[80]'
|   | |       | |-ImplicitCastExpr 0x10502b208 <col:18> 'const char *' <LValueToRValue>
|   | |       | | `-DeclRefExpr 0x10502b0b8 <col:18> 'const char *' lvalue ParmVar 0x10500dcd8 'num' 'const char *'
|   | |       | `-UnaryExprOrTypeTraitExpr 0x10502b118 <col:23, col:34> 'unsigned long' sizeof
|   | |       |   `-ParenExpr 0x10502b0f8 <col:29, col:34> 'char[80]' lvalue
|   | |       |     `-DeclRefExpr 0x10502b0d8 <col:30> 'char[80]' lvalue Var 0x105027aa0 'name' 'char[80]' non_odr_use_unevaluated
|   | |       |-BinaryOperator 0x10502b290 <line:28:4, col:9> 'const char *' '='
|   | |       | |-DeclRefExpr 0x10502b220 <col:4> 'const char *' lvalue Var 0x1050277b8 'cp' 'const char *'
|   | |       | `-ImplicitCastExpr 0x10502b278 <col:9> 'const char *' <NoOp>
|   | |       |   `-ImplicitCastExpr 0x10502b260 <col:9> 'char *' <ArrayToPointerDecay>
|   | |       |     `-DeclRefExpr 0x10502b240 <col:9> 'char[80]' lvalue Var 0x105027aa0 'name' 'char[80]'
|   | |       |-BinaryOperator 0x10502b3a0 <line:29:4, col:23> 'char *' '='
|   | |       | |-DeclRefExpr 0x10502b2b0 <col:4> 'char *' lvalue Var 0x1050278e8 'pp' 'char *'
|   | |       | `-CallExpr 0x10502b358 <col:9, col:23> 'char *'
|   | |       |   |-ImplicitCastExpr 0x10502b340 <col:9> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   | |       |   | `-DeclRefExpr 0x10502b2d0 <col:9> 'char *(const char *, int)' Function 0x105028310 'strchr' 'char *(const char *, int)'
|   | |       |   |-ImplicitCastExpr 0x10502b388 <col:16> 'const char *' <LValueToRValue>
|   | |       |   | `-DeclRefExpr 0x10502b2f0 <col:16> 'const char *' lvalue Var 0x1050277b8 'cp' 'const char *'
|   | |       |   `-CharacterLiteral 0x10502b310 <col:20> 'int' 58
|   | |       |-BinaryOperator 0x10502b440 <line:30:4, col:10> 'char' '='
|   | |       | |-UnaryOperator 0x10502b3f8 <col:4, col:5> 'char' lvalue prefix '*' cannot overflow
|   | |       | | `-ImplicitCastExpr 0x10502b3e0 <col:5> 'char *' <LValueToRValue>
|   | |       | |   `-DeclRefExpr 0x10502b3c0 <col:5> 'char *' lvalue Var 0x1050278e8 'pp' 'char *'
|   | |       | `-ImplicitCastExpr 0x10502b428 <col:10> 'char' <IntegralCast>
|   | |       |   `-CharacterLiteral 0x10502b410 <col:10> 'int' 0
|   | |       `-BinaryOperator 0x10502b510 <line:31:4, col:20> 'const char *' '='
|   | |         |-DeclRefExpr 0x10502b460 <col:4> 'const char *' lvalue Var 0x105027850 'port_str' 'const char *'
|   | |         `-ImplicitCastExpr 0x10502b4f8 <col:15, col:20> 'const char *' <NoOp>
|   | |           `-BinaryOperator 0x10502b4d8 <col:15, col:20> 'char *' '+'
|   | |             |-ImplicitCastExpr 0x10502b4c0 <col:15> 'char *' <LValueToRValue>
|   | |             | `-DeclRefExpr 0x10502b480 <col:15> 'char *' lvalue Var 0x1050278e8 'pp' 'char *'
|   | |             `-IntegerLiteral 0x10502b4a0 <col:20> 'int' 1
|   | `-CompoundStmt 0x10502be70 <line:33:9, line:42:2>
|   |   |-BinaryOperator 0x10502b680 <line:34:3, col:14> 'const char *' '='
|   |   | |-DeclRefExpr 0x10502b5e8 <col:3> 'const char *' lvalue Var 0x1050277b8 'cp' 'const char *'
|   |   | `-BinaryOperator 0x10502b660 <col:8, col:14> 'const char *' '+'
|   |   |   |-ImplicitCastExpr 0x10502b648 <col:8> 'const char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x10502b608 <col:8> 'const char *' lvalue ParmVar 0x10500dcd8 'num' 'const char *'
|   |   |   `-IntegerLiteral 0x10502b628 <col:14> 'int' 1
|   |   |-BinaryOperator 0x10502b6f8 <line:35:3, col:8> 'char *' '='
|   |   | |-DeclRefExpr 0x10502b6a0 <col:3> 'char *' lvalue Var 0x105027980 'np' 'char *'
|   |   | `-ImplicitCastExpr 0x10502b6e0 <col:8> 'char *' <ArrayToPointerDecay>
|   |   |   `-DeclRefExpr 0x10502b6c0 <col:8> 'char[80]' lvalue Var 0x105027aa0 'name' 'char[80]'
|   |   |-WhileStmt 0x10502b948 <line:36:3, line:37:15>
|   |   | |-BinaryOperator 0x10502b850 <line:36:10, col:25> 'int' '&&'
|   |   | | |-ImplicitCastExpr 0x10502b838 <col:10, col:11> 'int' <IntegralCast>
|   |   | | | `-ImplicitCastExpr 0x10502b820 <col:10, col:11> 'char' <LValueToRValue>
|   |   | | |   `-UnaryOperator 0x10502b750 <col:10, col:11> 'const char' lvalue prefix '*' cannot overflow
|   |   | | |     `-ImplicitCastExpr 0x10502b738 <col:11> 'const char *' <LValueToRValue>
|   |   | | |       `-DeclRefExpr 0x10502b718 <col:11> 'const char *' lvalue Var 0x1050277b8 'cp' 'const char *'
|   |   | | `-BinaryOperator 0x10502b800 <col:17, col:25> 'int' '!='
|   |   | |   |-CharacterLiteral 0x10502b768 <col:17> 'int' 93
|   |   | |   `-ImplicitCastExpr 0x10502b7e8 <col:24, col:25> 'int' <IntegralCast>
|   |   | |     `-ImplicitCastExpr 0x10502b7d0 <col:24, col:25> 'char' <LValueToRValue>
|   |   | |       `-UnaryOperator 0x10502b7b8 <col:24, col:25> 'const char' lvalue prefix '*' cannot overflow
|   |   | |         `-ImplicitCastExpr 0x10502b7a0 <col:25> 'const char *' <LValueToRValue>
|   |   | |           `-DeclRefExpr 0x10502b780 <col:25> 'const char *' lvalue Var 0x1050277b8 'cp' 'const char *'
|   |   | `-BinaryOperator 0x10502b928 <line:37:4, col:15> 'char' '='
|   |   |   |-UnaryOperator 0x10502b8a8 <col:4, col:7> 'char' lvalue prefix '*' cannot overflow
|   |   |   | `-UnaryOperator 0x10502b890 <col:5, col:7> 'char *' postfix '++'
|   |   |   |   `-DeclRefExpr 0x10502b870 <col:5> 'char *' lvalue Var 0x105027980 'np' 'char *'
|   |   |   `-ImplicitCastExpr 0x10502b910 <col:12, col:15> 'char' <LValueToRValue>
|   |   |     `-UnaryOperator 0x10502b8f8 <col:12, col:15> 'const char' lvalue prefix '*' cannot overflow
|   |   |       `-UnaryOperator 0x10502b8e0 <col:13, col:15> 'const char *' postfix '++'
|   |   |         `-DeclRefExpr 0x10502b8c0 <col:13> 'const char *' lvalue Var 0x1050277b8 'cp' 'const char *'
|   |   |-BinaryOperator 0x10502b9f0 <line:38:3, col:9> 'char' '='
|   |   | |-UnaryOperator 0x10502b9a0 <col:3, col:4> 'char' lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x10502b988 <col:4> 'char *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x10502b968 <col:4> 'char *' lvalue Var 0x105027980 'np' 'char *'
|   |   | `-ImplicitCastExpr 0x10502b9d8 <col:9> 'char' <IntegralCast>
|   |   |   `-IntegerLiteral 0x10502b9b8 <col:9> 'int' 0
|   |   |-IfStmt 0x10502bdc0 <line:39:3, line:40:20>
|   |   | |-BinaryOperator 0x10502bcd0 <line:39:7, col:51> 'int' '&&'
|   |   | | |-BinaryOperator 0x10502bbd0 <col:7, col:34> 'int' '&&'
|   |   | | | |-BinaryOperator 0x10502bad0 <col:7, col:18> 'int' '=='
|   |   | | | | |-CharacterLiteral 0x10502ba10 <col:7> 'int' 93
|   |   | | | | `-ImplicitCastExpr 0x10502bab8 <col:14, col:18> 'int' <IntegralCast>
|   |   | | | |   `-ImplicitCastExpr 0x10502baa0 <col:14, col:18> 'char' <LValueToRValue>
|   |   | | | |     `-ArraySubscriptExpr 0x10502ba80 <col:14, col:18> 'const char' lvalue
|   |   | | | |       |-ImplicitCastExpr 0x10502ba68 <col:14> 'const char *' <LValueToRValue>
|   |   | | | |       | `-DeclRefExpr 0x10502ba28 <col:14> 'const char *' lvalue Var 0x1050277b8 'cp' 'const char *'
|   |   | | | |       `-IntegerLiteral 0x10502ba48 <col:17> 'int' 0
|   |   | | | `-BinaryOperator 0x10502bbb0 <col:23, col:34> 'int' '=='
|   |   | | |   |-CharacterLiteral 0x10502baf0 <col:23> 'int' 58
|   |   | | |   `-ImplicitCastExpr 0x10502bb98 <col:30, col:34> 'int' <IntegralCast>
|   |   | | |     `-ImplicitCastExpr 0x10502bb80 <col:30, col:34> 'char' <LValueToRValue>
|   |   | | |       `-ArraySubscriptExpr 0x10502bb60 <col:30, col:34> 'const char' lvalue
|   |   | | |         |-ImplicitCastExpr 0x10502bb48 <col:30> 'const char *' <LValueToRValue>
|   |   | | |         | `-DeclRefExpr 0x10502bb08 <col:30> 'const char *' lvalue Var 0x1050277b8 'cp' 'const char *'
|   |   | | |         `-IntegerLiteral 0x10502bb28 <col:33> 'int' 1
|   |   | | `-BinaryOperator 0x10502bcb0 <col:39, col:51> 'int' '!='
|   |   | |   |-CharacterLiteral 0x10502bbf0 <col:39> 'int' 0
|   |   | |   `-ImplicitCastExpr 0x10502bc98 <col:47, col:51> 'int' <IntegralCast>
|   |   | |     `-ImplicitCastExpr 0x10502bc80 <col:47, col:51> 'char' <LValueToRValue>
|   |   | |       `-ArraySubscriptExpr 0x10502bc60 <col:47, col:51> 'const char' lvalue
|   |   | |         |-ImplicitCastExpr 0x10502bc48 <col:47> 'const char *' <LValueToRValue>
|   |   | |         | `-DeclRefExpr 0x10502bc08 <col:47> 'const char *' lvalue Var 0x1050277b8 'cp' 'const char *'
|   |   | |         `-IntegerLiteral 0x10502bc28 <col:50> 'int' 2
|   |   | `-BinaryOperator 0x10502bda0 <line:40:4, col:20> 'const char *' '='
|   |   |   |-DeclRefExpr 0x10502bcf0 <col:4> 'const char *' lvalue Var 0x105027850 'port_str' 'const char *'
|   |   |   `-UnaryOperator 0x10502bd88 <col:15, col:20> 'const char *' prefix '&' cannot overflow
|   |   |     `-ArraySubscriptExpr 0x10502bd68 <col:16, col:20> 'const char' lvalue
|   |   |       |-ImplicitCastExpr 0x10502bd50 <col:16> 'const char *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x10502bd10 <col:16> 'const char *' lvalue Var 0x1050277b8 'cp' 'const char *'
|   |   |       `-IntegerLiteral 0x10502bd30 <col:19> 'int' 2
|   |   `-BinaryOperator 0x10502be50 <line:41:3, col:8> 'const char *' '='
|   |     |-DeclRefExpr 0x10502bde0 <col:3> 'const char *' lvalue Var 0x1050277b8 'cp' 'const char *'
|   |     `-ImplicitCastExpr 0x10502be38 <col:8> 'const char *' <NoOp>
|   |       `-ImplicitCastExpr 0x10502be20 <col:8> 'char *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x10502be00 <col:8> 'char[80]' lvalue Var 0x105027aa0 'name' 'char[80]'
|   |-CallExpr 0x10502c000 <line:43:2, col:12> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x10502bfc0 <col:2> 'int ()' Function 0x10502bf08 'ZERO' 'int ()'
|   | `-RecoveryExpr 0x10502bfe0 <col:7> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x10502c110 <line:44:2, col:19> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x10502c070 <col:2, col:8> '<dependent type>' contains-errors lvalue .ai_flags
|   | | `-RecoveryExpr 0x10502c048 <col:2> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x10502c028 <col:2> 'struct addrinfo' lvalue Var 0x10500e038 'hints' 'struct addrinfo'
|   | `-RecoveryExpr 0x10502c0f0 <col:19> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x10502c3e8 <line:45:2, col:42> 'int' contains-errors '='
|   | |-DeclRefExpr 0x10502c130 <col:2> 'int' lvalue Var 0x105027688 'err' 'int'
|   | `-CallExpr 0x10502c3a8 <col:8, col:42> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x10502c230 <col:8> 'int ()' Function 0x10502c178 'getaddrinfo' 'int ()'
|   |   |-DeclRefExpr 0x10502c250 <col:20> 'const char *' lvalue Var 0x1050277b8 'cp' 'const char *'
|   |   |-StringLiteral 0x10502c2b0 <col:24> 'char[4]' lvalue "STR"
|   |   |-UnaryOperator 0x10502c2f0 <col:31, col:32> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   | `-RecoveryExpr 0x10502c2d0 <col:32> '<dependent type>' contains-errors lvalue
|   |   `-UnaryOperator 0x10502c390 <col:39, col:40> 'struct addrinfo **' contains-errors prefix '&' cannot overflow
|   |     `-DeclRefExpr 0x10502c308 <col:40> 'struct addrinfo *' contains-errors lvalue Var 0x105027598 'ai' 'struct addrinfo *'
|   |-IfStmt 0x10502c4b0 <line:46:2, line:47:10>
|   | |-BinaryOperator 0x10502c460 <line:46:6, col:13> 'int' '!='
|   | | |-ImplicitCastExpr 0x10502c448 <col:6> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x10502c408 <col:6> 'int' lvalue Var 0x105027688 'err' 'int'
|   | | `-IntegerLiteral 0x10502c428 <col:13> 'int' 0
|   | `-ReturnStmt 0x10502c4a0 <line:47:3, col:10>
|   |   `-IntegerLiteral 0x10502c480 <col:10> 'int' 0
|   |-CallExpr 0x10502c6e0 <line:48:2, col:42> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x10502c5b0 <col:2> 'int ()' Function 0x10502c4f8 'INSIST' 'int ()'
|   | `-BinaryOperator 0x10502c6c0 <col:9, col:41> 'int' contains-errors '<='
|   |   |-RecoveryExpr 0x10502c608 <col:9, col:13> '<dependent type>' contains-errors lvalue
|   |   | `-DeclRefExpr 0x10502c5d0 <col:9> 'struct addrinfo *' contains-errors lvalue Var 0x105027598 'ai' 'struct addrinfo *'
|   |   `-UnaryExprOrTypeTraitExpr 0x10502c6a0 <col:27, col:41> 'unsigned long' contains-errors sizeof
|   |     `-ParenExpr 0x10502c680 <col:33, col:41> '<dependent type>' contains-errors
|   |       `-UnaryOperator 0x10502c668 <col:34, col:35> '<dependent type>' contains-errors prefix '*' cannot overflow
|   |         `-ImplicitCastExpr 0x10502c650 <col:35> '<dependent type>' contains-errors <LValueToRValue>
|   |           `-RecoveryExpr 0x10502c630 <col:35> '<dependent type>' contains-errors lvalue
|   |-CallExpr 0x10502c778 <line:49:2, col:14> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x10502c708 <col:2> 'int ()' Function 0x10502bf08 'ZERO' 'int ()'
|   | `-UnaryOperator 0x10502c760 <col:7, col:8> '<dependent type>' contains-errors prefix '*' cannot overflow
|   |   `-ImplicitCastExpr 0x10502c748 <col:8> '<dependent type>' contains-errors <LValueToRValue>
|   |     `-RecoveryExpr 0x10502c728 <col:8> '<dependent type>' contains-errors lvalue
|   |-CallExpr 0x1050295e0 <line:50:2, col:44> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x105029498 <col:2> 'void *(void *, const void *, unsigned long)' Function 0x105029248 'memcpy' 'void *(void *, const void *, unsigned long)'
|   | |-RecoveryExpr 0x1050294b8 <col:9> '<dependent type>' contains-errors lvalue
|   | |-RecoveryExpr 0x105029510 <col:17, col:21> '<dependent type>' contains-errors lvalue
|   | | `-DeclRefExpr 0x1050294d8 <col:17> 'struct addrinfo *' contains-errors lvalue Var 0x105027598 'ai' 'struct addrinfo *'
|   | `-RecoveryExpr 0x105029570 <col:30, col:34> '<dependent type>' contains-errors lvalue
|   |   `-DeclRefExpr 0x105029538 <col:30> 'struct addrinfo *' contains-errors lvalue Var 0x105027598 'ai' 'struct addrinfo *'
|   |-CallExpr 0x105029750 <line:51:2, col:17> 'int' contains-errors
|   | |-ImplicitCastExpr 0x105029738 <col:2> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1050296f8 <col:2> 'int ()' Function 0x105029640 'freeaddrinfo' 'int ()'
|   | `-ImplicitCastExpr 0x105029778 <col:15> 'struct addrinfo *' contains-errors <LValueToRValue>
|   |   `-DeclRefExpr 0x105029718 <col:15> 'struct addrinfo *' contains-errors lvalue Var 0x105027598 'ai' 'struct addrinfo *'
|   |-CallExpr 0x105029e18 <line:54:2, col:23> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x105029db8 <col:2> 'int ()' Function 0x105029d00 'SET_PORT' 'int ()'
|   | |-RecoveryExpr 0x105029dd8 <col:11> '<dependent type>' contains-errors lvalue
|   | `-DeclRefExpr 0x105029df8 <col:19> 'short' lvalue Var 0x105027720 'port' 'short'
|   `-ReturnStmt 0x105029e68 <line:55:2, col:9>
|     `-IntegerLiteral 0x105029e48 <col:9> 'int' 1
|-FunctionDecl 0x105027de8 <line:16:10> col:10 implicit used strlen 'unsigned long (const char *)' extern
| |-ParmVarDecl 0x105027ee8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x105027e90 <<invalid sloc>> Implicit 902
|-FunctionDecl 0x105028310 <line:21:8> col:8 implicit used strchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x10502a830 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x10502a898 <<invalid sloc>> <invalid sloc> 'int'
| `-BuiltinAttr 0x1050283b8 <<invalid sloc>> Implicit 893
|-FunctionDecl 0x10502ae28 <line:27:4> col:4 implicit used strlcpy 'unsigned long (char *, const char *, unsigned long)' extern
| |-ParmVarDecl 0x10502af28 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x10502af90 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x10502aff8 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x10502aed0 <<invalid sloc>> Implicit 969
|-FunctionDecl 0x105029248 <line:50:2> col:2 implicit used memcpy 'void *(void *, const void *, unsigned long)' extern
| |-ParmVarDecl 0x105029348 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1050293b0 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x105029418 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x1050292f0 <<invalid sloc>> Implicit 882
`-FunctionDecl 0x105029868 <line:52:31> col:31 implicit used sscanf 'int (const char *restrict, const char *restrict, ...)' extern
  |-ParmVarDecl 0x105029968 <<invalid sloc>> <invalid sloc> 'const char *restrict'
  |-ParmVarDecl 0x1050299d0 <<invalid sloc>> <invalid sloc> 'const char *restrict'
  |-BuiltinAttr 0x105029910 <<invalid sloc>> Implicit 913
  `-FormatAttr 0x105029a48 <col:31> Implicit scanf 2 3
