TranslationUnitDecl 0x124055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1240564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x124055bd0 '__int128'
|-TypedefDecl 0x124056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x124055bf0 'unsigned __int128'
|-TypedefDecl 0x124126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x124126000 'struct __NSConstantString_tag'
|   `-Record 0x124056580 '__NSConstantString_tag'
|-TypedefDecl 0x124126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x124055d90 '__SVInt8_t'
|-TypedefDecl 0x124126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x124055db0 '__SVInt16_t'
|-TypedefDecl 0x124126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x124055dd0 '__SVInt32_t'
|-TypedefDecl 0x1241263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x124055df0 '__SVInt64_t'
|-TypedefDecl 0x124126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x124055e10 '__SVUint8_t'
|-TypedefDecl 0x1241264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x124055e30 '__SVUint16_t'
|-TypedefDecl 0x124126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x124055e50 '__SVUint32_t'
|-TypedefDecl 0x124126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x124055e70 '__SVUint64_t'
|-TypedefDecl 0x1241265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x124055e90 '__SVFloat16_t'
|-TypedefDecl 0x124126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x124055eb0 '__SVFloat32_t'
|-TypedefDecl 0x1241266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x124055ed0 '__SVFloat64_t'
|-TypedefDecl 0x124126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x124055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x124126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x124055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1241267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x124055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x124126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x124055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1241268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x124055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x124126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x124055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x124126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x124055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1241269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x124055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x124126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x124055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x124126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x124056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x124126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x124056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x124126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x124056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x124126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x124056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x124126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x124056090 '__clang_svint8x3_t'
|-TypedefDecl 0x124126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1240560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x124126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1240560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x124126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1240560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x124126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x124056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x124126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x124056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x124126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x124056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x124126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x124056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x124126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x124056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x124127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1240561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x124127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1240561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1241278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1240561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x124127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x124056210 '__clang_svint8x4_t'
|-TypedefDecl 0x1241279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x124056230 '__clang_svint16x4_t'
|-TypedefDecl 0x124127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x124056250 '__clang_svint32x4_t'
|-TypedefDecl 0x124127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x124056270 '__clang_svint64x4_t'
|-TypedefDecl 0x124127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x124056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x124127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1240562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x124127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1240562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x124127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1240562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x124127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x124056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x124127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x124056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x124127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x124056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x124127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x124056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x124127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x124056390 '__SVBool_t'
|-TypedefDecl 0x124127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1240563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x124127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1240563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x124127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1240563f0 '__SVCount_t'
|-TypedefDecl 0x124127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x124127fb0 'char *'
|   `-BuiltinType 0x1240556b0 'char'
|-TypedefDecl 0x124128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x124127fb0 'char *'
|   `-BuiltinType 0x1240556b0 'char'
`-FunctionDecl 0x124128340 <dataset_diviso_filec/func19406_vuln.c:1:1, line:38:1> line:1:13 invalid format_expand_code 'void (const char **, int *, int *)' static
  |-ParmVarDecl 0x124128108 <col:32, col:45> col:45 used format 'const char **'
  |-ParmVarDecl 0x1241281d8 <col:53, col:62> col:62 invalid out 'int *'
  |-ParmVarDecl 0x124128258 <col:67, col:72> col:72 used flags 'int *'
  `-CompoundStmt 0x1241439a0 <line:2:1, line:38:1>
    |-DeclStmt 0x124128480 <line:3:2, col:9>
    | `-VarDecl 0x124128418 <col:2, col:6> col:6 used set 'int'
    |-IfStmt 0x1241286f0 <line:5:2, line:10:2>
    | |-BinaryOperator 0x124128510 <line:5:6, col:15> 'int' contains-errors '=='
    | | |-DeclRefExpr 0x124128498 <col:6> 'int *' lvalue ParmVar 0x124128258 'flags' 'int *'
    | | `-RecoveryExpr 0x1241284f0 <col:15> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x1241286d0 <col:21, line:10:2>
    |   |-WhileStmt 0x1241286a0 <line:7:3, line:8:13>
    |   | |-BinaryOperator 0x1241285f8 <line:7:10, col:22> 'int' '!='
    |   | | |-ImplicitCastExpr 0x1241285e0 <col:10, col:12> 'int' <IntegralCast>
    |   | | | `-ImplicitCastExpr 0x1241285c8 <col:10, col:12> 'char' <LValueToRValue>
    |   | | |   `-UnaryOperator 0x124128598 <col:10, col:12> 'const char' lvalue prefix '*' cannot overflow
    |   | | |     `-ImplicitCastExpr 0x124128580 <col:11, col:12> 'const char *' <LValueToRValue>
    |   | | |       `-UnaryOperator 0x124128568 <col:11, col:12> 'const char *' lvalue prefix '*' cannot overflow
    |   | | |         `-ImplicitCastExpr 0x124128550 <col:12> 'const char **' <LValueToRValue>
    |   | | |           `-DeclRefExpr 0x124128530 <col:12> 'const char **' lvalue ParmVar 0x124128108 'format' 'const char **'
    |   | | `-CharacterLiteral 0x1241285b0 <col:22> 'int' 93
    |   | `-UnaryOperator 0x124128688 <line:8:4, col:13> 'const char *' postfix '++'
    |   |   `-ParenExpr 0x124128668 <col:4, col:12> 'const char *' lvalue
    |   |     `-UnaryOperator 0x124128650 <col:5, col:6> 'const char *' lvalue prefix '*' cannot overflow
    |   |       `-ImplicitCastExpr 0x124128638 <col:6> 'const char **' <LValueToRValue>
    |   |         `-DeclRefExpr 0x124128618 <col:6> 'const char **' lvalue ParmVar 0x124128108 'format' 'const char **'
    |   `-ReturnStmt 0x1241286c0 <line:9:3>
    |-BinaryOperator 0x124128788 <line:12:2, col:8> 'int' contains-errors '='
    | |-DeclRefExpr 0x124128710 <col:2> 'int' lvalue Var 0x124128418 'set' 'int'
    | `-RecoveryExpr 0x124128768 <col:8> '<dependent type>' contains-errors lvalue
    |-UnaryOperator 0x124141820 <line:13:2, col:11> 'const char *' postfix '++'
    | `-ParenExpr 0x124141800 <col:2, col:10> 'const char *' lvalue
    |   `-UnaryOperator 0x1241287e0 <col:3, col:4> 'const char *' lvalue prefix '*' cannot overflow
    |     `-ImplicitCastExpr 0x1241287c8 <col:4> 'const char **' <LValueToRValue>
    |       `-DeclRefExpr 0x1241287a8 <col:4> 'const char **' lvalue ParmVar 0x124128108 'format' 'const char **'
    `-WhileStmt 0x124143980 <line:14:2, line:37:2>
      |-BinaryOperator 0x124141a08 <line:14:9, col:40> 'int' '&&'
      | |-BinaryOperator 0x124141900 <col:9, col:21> 'int' '!='
      | | |-ImplicitCastExpr 0x1241418e8 <col:9, col:11> 'int' <IntegralCast>
      | | | `-ImplicitCastExpr 0x1241418d0 <col:9, col:11> 'char' <LValueToRValue>
      | | |   `-UnaryOperator 0x1241418a0 <col:9, col:11> 'const char' lvalue prefix '*' cannot overflow
      | | |     `-ImplicitCastExpr 0x124141888 <col:10, col:11> 'const char *' <LValueToRValue>
      | | |       `-UnaryOperator 0x124141870 <col:10, col:11> 'const char *' lvalue prefix '*' cannot overflow
      | | |         `-ImplicitCastExpr 0x124141858 <col:11> 'const char **' <LValueToRValue>
      | | |           `-DeclRefExpr 0x124141838 <col:11> 'const char **' lvalue ParmVar 0x124128108 'format' 'const char **'
      | | `-CharacterLiteral 0x1241418b8 <col:21> 'int' 93
      | `-BinaryOperator 0x1241419e8 <col:28, col:40> 'int' '!='
      |   |-ImplicitCastExpr 0x1241419d0 <col:28, col:30> 'int' <IntegralCast>
      |   | `-ImplicitCastExpr 0x1241419b8 <col:28, col:30> 'char' <LValueToRValue>
      |   |   `-UnaryOperator 0x124141988 <col:28, col:30> 'const char' lvalue prefix '*' cannot overflow
      |   |     `-ImplicitCastExpr 0x124141970 <col:29, col:30> 'const char *' <LValueToRValue>
      |   |       `-UnaryOperator 0x124141958 <col:29, col:30> 'const char *' lvalue prefix '*' cannot overflow
      |   |         `-ImplicitCastExpr 0x124141940 <col:30> 'const char **' <LValueToRValue>
      |   |           `-DeclRefExpr 0x124141920 <col:30> 'const char **' lvalue ParmVar 0x124128108 'format' 'const char **'
      |   `-CharacterLiteral 0x1241419a0 <col:40> 'int' 0
      `-CompoundStmt 0x124143960 <col:46, line:37:2>
        |-IfStmt 0x1241438a8 <line:15:3, line:34:3> has_else
        | |-BinaryOperator 0x124141af0 <line:15:7, col:19> 'int' '=='
        | | |-ImplicitCastExpr 0x124141ad8 <col:7, col:9> 'int' <IntegralCast>
        | | | `-ImplicitCastExpr 0x124141ac0 <col:7, col:9> 'char' <LValueToRValue>
        | | |   `-UnaryOperator 0x124141a90 <col:7, col:9> 'const char' lvalue prefix '*' cannot overflow
        | | |     `-ImplicitCastExpr 0x124141a78 <col:8, col:9> 'const char *' <LValueToRValue>
        | | |       `-UnaryOperator 0x124141a60 <col:8, col:9> 'const char *' lvalue prefix '*' cannot overflow
        | | |         `-ImplicitCastExpr 0x124141a48 <col:9> 'const char **' <LValueToRValue>
        | | |           `-DeclRefExpr 0x124141a28 <col:9> 'const char **' lvalue ParmVar 0x124128108 'format' 'const char **'
        | | `-CharacterLiteral 0x124141aa8 <col:19> 'int' 43
        | |-BinaryOperator 0x124141b88 <line:16:4, col:10> 'int' contains-errors '='
        | | |-DeclRefExpr 0x124141b10 <col:4> 'int' lvalue Var 0x124128418 'set' 'int'
        | | `-RecoveryExpr 0x124141b68 <col:10> '<dependent type>' contains-errors lvalue
        | `-IfStmt 0x124143878 <line:17:8, line:34:3> has_else
        |   |-BinaryOperator 0x124141c70 <line:17:12, col:24> 'int' '=='
        |   | |-ImplicitCastExpr 0x124141c58 <col:12, col:14> 'int' <IntegralCast>
        |   | | `-ImplicitCastExpr 0x124141c40 <col:12, col:14> 'char' <LValueToRValue>
        |   | |   `-UnaryOperator 0x124141c10 <col:12, col:14> 'const char' lvalue prefix '*' cannot overflow
        |   | |     `-ImplicitCastExpr 0x124141bf8 <col:13, col:14> 'const char *' <LValueToRValue>
        |   | |       `-UnaryOperator 0x124141be0 <col:13, col:14> 'const char *' lvalue prefix '*' cannot overflow
        |   | |         `-ImplicitCastExpr 0x124141bc8 <col:14> 'const char **' <LValueToRValue>
        |   | |           `-DeclRefExpr 0x124141ba8 <col:14> 'const char **' lvalue ParmVar 0x124128108 'format' 'const char **'
        |   | `-CharacterLiteral 0x124141c28 <col:24> 'int' 45
        |   |-BinaryOperator 0x124141d08 <line:18:4, col:10> 'int' contains-errors '='
        |   | |-DeclRefExpr 0x124141c90 <col:4> 'int' lvalue Var 0x124128418 'set' 'int'
        |   | `-RecoveryExpr 0x124141ce8 <col:10> '<dependent type>' contains-errors lvalue
        |   `-SwitchStmt 0x124141dd8 <line:19:8, line:34:3>
        |     |-ImplicitCastExpr 0x124141dc0 <line:19:16, col:18> 'int' <IntegralCast>
        |     | `-ImplicitCastExpr 0x124141da8 <col:16, col:18> 'char' <LValueToRValue>
        |     |   `-UnaryOperator 0x124141d90 <col:16, col:18> 'const char' lvalue prefix '*' cannot overflow
        |     |     `-ImplicitCastExpr 0x124141d78 <col:17, col:18> 'const char *' <LValueToRValue>
        |     |       `-UnaryOperator 0x124141d60 <col:17, col:18> 'const char *' lvalue prefix '*' cannot overflow
        |     |         `-ImplicitCastExpr 0x124141d48 <col:18> 'const char **' <LValueToRValue>
        |     |           `-DeclRefExpr 0x124141d28 <col:18> 'const char **' lvalue ParmVar 0x124128108 'format' 'const char **'
        |     `-CompoundStmt 0x124143838 <col:26, line:34:3>
        |       |-CaseStmt 0x124141e30 <line:20:3, line:24:5>
        |       | |-ConstantExpr 0x124141e18 <line:20:8> 'int'
        |       | | `-CharacterLiteral 0x124141e00 <col:8> 'int' 115
        |       | `-CaseStmt 0x124141e88 <line:21:3, line:24:5>
        |       |   |-ConstantExpr 0x124141e70 <line:21:8> 'int'
        |       |   | `-CharacterLiteral 0x124141e58 <col:8> 'int' 83
        |       |   `-CompoundAssignOperator 0x124142340 <line:22:4, line:24:5> 'int' contains-errors '|=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
        |       |     |-UnaryOperator 0x124142188 <line:22:4, col:5> 'int' lvalue prefix '*' cannot overflow
        |       |     | `-ImplicitCastExpr 0x124142170 <col:5> 'int *' <LValueToRValue>
        |       |     |   `-DeclRefExpr 0x124141eb0 <col:5> 'int *' lvalue ParmVar 0x124128258 'flags' 'int *'
        |       |     `-ConditionalOperator 0x124142310 <col:14, line:24:5> '<dependent type>' contains-errors
        |       |       |-UnaryOperator 0x1241421b8 <line:22:14, col:15> 'int' prefix '!' cannot overflow
        |       |       | `-ImplicitCastExpr 0x1241421a0 <col:15> 'int' <LValueToRValue>
        |       |       |   `-DeclRefExpr 0x124141f00 <col:15> 'int' lvalue Var 0x124128418 'set' 'int'
        |       |       |-RecoveryExpr 0x1241421d0 <col:21> '<dependent type>' contains-errors lvalue
        |       |       `-ConditionalOperator 0x1241422e0 <line:23:5, line:24:5> '<dependent type>' contains-errors
        |       |         |-BinaryOperator 0x124142280 <line:23:5, col:17> 'int' '=='
        |       |         | |-ImplicitCastExpr 0x124142268 <col:5, col:7> 'int' <IntegralCast>
        |       |         | | `-ImplicitCastExpr 0x124142250 <col:5, col:7> 'char' <LValueToRValue>
        |       |         | |   `-UnaryOperator 0x124142238 <col:5, col:7> 'const char' lvalue prefix '*' cannot overflow
        |       |         | |     `-ImplicitCastExpr 0x124142220 <col:6, col:7> 'const char *' <LValueToRValue>
        |       |         | |       `-UnaryOperator 0x124142208 <col:6, col:7> 'const char *' lvalue prefix '*' cannot overflow
        |       |         | |         `-ImplicitCastExpr 0x1241421f0 <col:7> 'const char **' <LValueToRValue>
        |       |         | |           `-DeclRefExpr 0x124141f68 <col:7> 'const char **' lvalue ParmVar 0x124128108 'format' 'const char **'
        |       |         | `-CharacterLiteral 0x124141fe8 <col:17> 'int' 115
        |       |         |-RecoveryExpr 0x1241422a0 <col:23> '<dependent type>' contains-errors lvalue
        |       |         `-RecoveryExpr 0x1241422c0 <line:24:5> '<dependent type>' contains-errors lvalue
        |       |-BreakStmt 0x124142370 <line:25:4>
        |       |-CaseStmt 0x1241423a8 <line:26:3, line:28:5>
        |       | |-ConstantExpr 0x124142390 <line:26:8> 'int'
        |       | | `-CharacterLiteral 0x124142378 <col:8> 'int' 116
        |       | `-CompoundAssignOperator 0x1241425a0 <line:27:4, line:28:5> 'int' contains-errors '|=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
        |       |   |-UnaryOperator 0x124142518 <line:27:4, col:5> 'int' lvalue prefix '*' cannot overflow
        |       |   | `-ImplicitCastExpr 0x124142500 <col:5> 'int *' <LValueToRValue>
        |       |   |   `-DeclRefExpr 0x1241423d0 <col:5> 'int *' lvalue ParmVar 0x124128258 'flags' 'int *'
        |       |   `-ConditionalOperator 0x124142570 <col:14, line:28:5> '<dependent type>' contains-errors
        |       |     |-DeclRefExpr 0x124142420 <line:27:14> 'int' lvalue Var 0x124128418 'set' 'int'
        |       |     |-RecoveryExpr 0x124142530 <col:20> '<dependent type>' contains-errors lvalue
        |       |     `-RecoveryExpr 0x124142550 <line:28:5> '<dependent type>' contains-errors lvalue
        |       |-BreakStmt 0x1241425d0 <line:29:4>
        |       |-CaseStmt 0x124142608 <line:30:3, line:32:5>
        |       | |-ConstantExpr 0x1241425f0 <line:30:8> 'int'
        |       | | `-CharacterLiteral 0x1241425d8 <col:8> 'int' 84
        |       | `-CompoundAssignOperator 0x124143800 <line:31:4, line:32:5> 'int' contains-errors '|=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
        |       |   |-UnaryOperator 0x124142778 <line:31:4, col:5> 'int' lvalue prefix '*' cannot overflow
        |       |   | `-ImplicitCastExpr 0x124142760 <col:5> 'int *' <LValueToRValue>
        |       |   |   `-DeclRefExpr 0x124142630 <col:5> 'int *' lvalue ParmVar 0x124128258 'flags' 'int *'
        |       |   `-ConditionalOperator 0x1241427d0 <col:14, line:32:5> '<dependent type>' contains-errors
        |       |     |-DeclRefExpr 0x124142680 <line:31:14> 'int' lvalue Var 0x124128418 'set' 'int'
        |       |     |-RecoveryExpr 0x124142790 <col:20> '<dependent type>' contains-errors lvalue
        |       |     `-RecoveryExpr 0x1241427b0 <line:32:5> '<dependent type>' contains-errors lvalue
        |       `-BreakStmt 0x124143830 <line:33:4>
        `-UnaryOperator 0x124143948 <line:36:3, col:12> 'const char *' postfix '++'
          `-ParenExpr 0x124143928 <col:3, col:11> 'const char *' lvalue
            `-UnaryOperator 0x124143910 <col:4, col:5> 'const char *' lvalue prefix '*' cannot overflow
              `-ImplicitCastExpr 0x1241438f8 <col:5> 'const char **' <LValueToRValue>
                `-DeclRefExpr 0x1241438d8 <col:5> 'const char **' lvalue ParmVar 0x124128108 'format' 'const char **'
