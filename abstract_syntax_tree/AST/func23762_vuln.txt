TranslationUnitDecl 0x14d855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x14d8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x14d855bd0 '__int128'
|-TypedefDecl 0x14d856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x14d855bf0 'unsigned __int128'
|-TypedefDecl 0x14e00be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x14e00bc00 'struct __NSConstantString_tag'
|   `-Record 0x14d856580 '__NSConstantString_tag'
|-TypedefDecl 0x14e00be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x14d855d90 '__SVInt8_t'
|-TypedefDecl 0x14e00bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x14d855db0 '__SVInt16_t'
|-TypedefDecl 0x14e00bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x14d855dd0 '__SVInt32_t'
|-TypedefDecl 0x14e00bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x14d855df0 '__SVInt64_t'
|-TypedefDecl 0x14e00c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x14d855e10 '__SVUint8_t'
|-TypedefDecl 0x14e00c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x14d855e30 '__SVUint16_t'
|-TypedefDecl 0x14e00c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x14d855e50 '__SVUint32_t'
|-TypedefDecl 0x14e00c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x14d855e70 '__SVUint64_t'
|-TypedefDecl 0x14e00c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x14d855e90 '__SVFloat16_t'
|-TypedefDecl 0x14e00c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x14d855eb0 '__SVFloat32_t'
|-TypedefDecl 0x14e00c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x14d855ed0 '__SVFloat64_t'
|-TypedefDecl 0x14e00c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x14d855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x14e00c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x14d855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x14e00c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x14d855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x14e00c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x14d855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x14e00c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x14d855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x14e00c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x14d855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x14e00c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x14d855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x14e00c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x14d855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x14e00c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x14d855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x14e00c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x14d856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x14e00c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x14d856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x14e00c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x14d856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x14e00c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x14d856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x14e00c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x14d856090 '__clang_svint8x3_t'
|-TypedefDecl 0x14e00c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x14d8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x14e00c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x14d8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x14e00c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x14d8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x14e00c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x14d856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x14e00ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x14d856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x14e00cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x14d856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x14e00cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x14d856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x14e00cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x14d856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x14e00d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x14d8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x14e00d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x14d8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x14e00d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x14d8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x14e00d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x14d856210 '__clang_svint8x4_t'
|-TypedefDecl 0x14e00d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x14d856230 '__clang_svint16x4_t'
|-TypedefDecl 0x14e00d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x14d856250 '__clang_svint32x4_t'
|-TypedefDecl 0x14e00d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x14d856270 '__clang_svint64x4_t'
|-TypedefDecl 0x14e00d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x14d856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x14e00d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x14d8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x14e00d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x14d8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x14e00d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x14d8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x14e00d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x14d856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x14e00d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x14d856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x14e00d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x14d856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x14e00d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x14d856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x14e00da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x14d856390 '__SVBool_t'
|-TypedefDecl 0x14e00da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x14d8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x14e00dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x14d8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x14e00db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x14d8563f0 '__SVCount_t'
|-TypedefDecl 0x14e00dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x14e00dbb0 'char *'
|   `-BuiltinType 0x14d8556b0 'char'
|-TypedefDecl 0x14e00dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x14e00dbb0 'char *'
|   `-BuiltinType 0x14d8556b0 'char'
`-FunctionDecl 0x14e00de88 <dataset_diviso_filec/func23762_vuln.c:1:1, line:66:1> line:1:1 str2special 'int (char **, int)'
  |-ParmVarDecl 0x14e00dd28 <line:2:5, col:14> col:14 used sp 'char **'
  |-ParmVarDecl 0x14e00dda8 <line:3:5, col:10> col:10 used from 'int'
  `-CompoundStmt 0x14e02bb58 <line:4:1, line:66:1>
    |-DeclStmt 0x14e00e008 <line:5:5, col:12>
    | `-VarDecl 0x14e00dfa0 <col:5, col:11> col:11 used c 'int'
    |-DeclStmt 0x14e00e128 <line:6:5, col:25>
    | `-VarDecl 0x14e00e0c0 <col:5, col:24> col:19 used buf 'char[7]' static
    |-DeclStmt 0x14e00e228 <line:7:5, col:23>
    | `-VarDecl 0x14e00e158 <col:5, col:21> col:14 used str 'char *' cinit
    |   `-ImplicitCastExpr 0x14e00e210 <col:20, col:21> 'char *' <LValueToRValue>
    |     `-UnaryOperator 0x14e00e1f8 <col:20, col:21> 'char *' lvalue prefix '*' cannot overflow
    |       `-ImplicitCastExpr 0x14e00e1e0 <col:21> 'char **' <LValueToRValue>
    |         `-DeclRefExpr 0x14e00e1c0 <col:21> 'char **' lvalue ParmVar 0x14e00dd28 'sp' 'char **'
    |-DeclStmt 0x14e00e2e0 <line:8:5, col:24>
    | `-VarDecl 0x14e00e258 <col:5, col:23> col:11 used modifiers 'int' cinit
    |   `-IntegerLiteral 0x14e00e2c0 <col:23> 'int' 0
    |-DeclStmt 0x14e00e3b0 <line:9:5, col:26>
    | `-VarDecl 0x14e00e310 <col:5, col:21> col:11 used special 'int' cinit
    |   `-RecoveryExpr 0x14e00e390 <col:21> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x14e026e30 <line:11:5, line:20:5>
    | |-RecoveryExpr 0x14e00e3e0 <line:11:9> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x14e026e08 <line:12:5, line:20:5>
    |   |-DeclStmt 0x14e026680 <line:13:2, col:11>
    |   | `-VarDecl 0x14e026618 <col:2, col:10> col:10 used p 'char *'
    |   |-BinaryOperator 0x14e026cd0 <line:17:2, col:20> 'char *' '='
    |   | |-DeclRefExpr 0x14e026698 <col:2> 'char *' lvalue Var 0x14e026618 'p' 'char *'
    |   | `-ImplicitCastExpr 0x14e026898 <col:6, col:20> 'char *' <IntegralToPointer>
    |   |   `-CallExpr 0x14e026858 <col:6, col:20> 'int'
    |   |     |-ImplicitCastExpr 0x14e026840 <col:6> 'int (*)()' <FunctionToPointerDecay>
    |   |     | `-DeclRefExpr 0x14e0267d0 <col:6> 'int ()' Function 0x14e026718 'mb_unescape' 'int ()'
    |   |     `-ImplicitCastExpr 0x14e026880 <col:18> 'char **' <LValueToRValue>
    |   |       `-DeclRefExpr 0x14e0267f0 <col:18> 'char **' lvalue ParmVar 0x14e00dd28 'sp' 'char **'
    |   `-IfStmt 0x14e026de8 <line:18:2, line:19:13>
    |     |-BinaryOperator 0x14e026d68 <line:18:6, col:11> 'int' contains-errors '!='
    |     | |-DeclRefExpr 0x14e026cf0 <col:6> 'char *' lvalue Var 0x14e026618 'p' 'char *'
    |     | `-RecoveryExpr 0x14e026d48 <col:11> '<dependent type>' contains-errors lvalue
    |     `-ReturnStmt 0x14e026dd8 <line:19:6, col:13>
    |       `-ImplicitCastExpr 0x14e026dc0 <col:13> 'int' <PointerToIntegral>
    |         `-ImplicitCastExpr 0x14e026da8 <col:13> 'char *' <LValueToRValue>
    |           `-DeclRefExpr 0x14e026d88 <col:13> 'char *' lvalue Var 0x14e026618 'p' 'char *'
    |-BinaryOperator 0x14e026ef0 <line:22:5, col:10> 'int' '='
    | |-DeclRefExpr 0x14e026e50 <col:5> 'int' lvalue Var 0x14e00dfa0 'c' 'int'
    | `-ImplicitCastExpr 0x14e026ed8 <col:9, col:10> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x14e026ec0 <col:9, col:10> 'char' <LValueToRValue>
    |     `-UnaryOperator 0x14e026ea8 <col:9, col:10> 'char' lvalue prefix '*' cannot overflow
    |       `-ImplicitCastExpr 0x14e026e90 <col:10> 'char *' <LValueToRValue>
    |         `-DeclRefExpr 0x14e026e70 <col:10> 'char *' lvalue Var 0x14e00e158 'str' 'char *'
    |-IfStmt 0x14e029f48 <line:23:5, line:38:5>
    | |-BinaryOperator 0x14e027258 <line:23:9, col:54> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x14e0271c0 <col:9, col:37> 'int' contains-errors '&&'
    | | | |-BinaryOperator 0x14e027128 <col:9, col:14> 'int' contains-errors '=='
    | | | | |-DeclRefExpr 0x14e026f10 <col:9> 'int' lvalue Var 0x14e00dfa0 'c' 'int'
    | | | | `-RecoveryExpr 0x14e027108 <col:14> '<dependent type>' contains-errors lvalue
    | | | `-BinaryOperator 0x14e0271a0 <col:27, col:37> 'int' contains-errors '!='
    | | |   |-ArraySubscriptExpr 0x14e027160 <col:27, col:32> 'char' lvalue
    | | |   | |-ImplicitCastExpr 0x14e027148 <col:27> 'char *' <LValueToRValue>
    | | |   | | `-DeclRefExpr 0x14e026f68 <col:27> 'char *' lvalue Var 0x14e00e158 'str' 'char *'
    | | |   | `-IntegerLiteral 0x14e026f88 <col:31> 'int' 1
    | | |   `-RecoveryExpr 0x14e027180 <col:37> '<dependent type>' contains-errors lvalue
    | | `-BinaryOperator 0x14e027238 <col:44, col:54> 'int' contains-errors '!='
    | |   |-ArraySubscriptExpr 0x14e0271f8 <col:44, col:49> 'char' lvalue
    | |   | |-ImplicitCastExpr 0x14e0271e0 <col:44> 'char *' <LValueToRValue>
    | |   | | `-DeclRefExpr 0x14e027038 <col:44> 'char *' lvalue Var 0x14e00e158 'str' 'char *'
    | |   | `-IntegerLiteral 0x14e027058 <col:48> 'int' 2
    | |   `-RecoveryExpr 0x14e027218 <col:54> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x14e029f28 <line:24:5, line:38:5>
    |   |-IfStmt 0x14e029628 <line:25:2, line:30:2>
    |   | |-BinaryOperator 0x14e0273b8 <line:25:6, col:16> 'int' contains-errors '=='
    |   | | |-ArraySubscriptExpr 0x14e027378 <col:6, col:11> 'char' lvalue
    |   | | | |-ImplicitCastExpr 0x14e027360 <col:6> 'char *' <LValueToRValue>
    |   | | | | `-DeclRefExpr 0x14e027278 <col:6> 'char *' lvalue Var 0x14e00e158 'str' 'char *'
    |   | | | `-IntegerLiteral 0x14e027298 <col:10> 'int' 1
    |   | | `-RecoveryExpr 0x14e027398 <col:16> '<dependent type>' contains-errors lvalue
    |   | `-CompoundStmt 0x14e029600 <line:26:2, line:30:2>
    |   |   |-BinaryOperator 0x14e0274a0 <line:27:6, col:23> 'int' '='
    |   |   | |-DeclRefExpr 0x14e0273d8 <col:6> 'int' lvalue Var 0x14e00e258 'modifiers' 'int'
    |   |   | `-ImplicitCastExpr 0x14e027488 <col:18, col:23> 'int' <IntegralCast>
    |   |   |   `-ImplicitCastExpr 0x14e027470 <col:18, col:23> 'char' <LValueToRValue>
    |   |   |     `-ArraySubscriptExpr 0x14e027450 <col:18, col:23> 'char' lvalue
    |   |   |       |-ImplicitCastExpr 0x14e027438 <col:18> 'char *' <LValueToRValue>
    |   |   |       | `-DeclRefExpr 0x14e0273f8 <col:18> 'char *' lvalue Var 0x14e00e158 'str' 'char *'
    |   |   |       `-IntegerLiteral 0x14e027418 <col:22> 'int' 2
    |   |   |-CompoundAssignOperator 0x14e027500 <line:28:6, col:13> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
    |   |   | |-DeclRefExpr 0x14e0274c0 <col:6> 'char *' lvalue Var 0x14e00e158 'str' 'char *'
    |   |   | `-IntegerLiteral 0x14e0274e0 <col:13> 'int' 3
    |   |   `-BinaryOperator 0x14e0275d0 <line:29:6, col:11> 'int' '='
    |   |     |-DeclRefExpr 0x14e027530 <col:6> 'int' lvalue Var 0x14e00dfa0 'c' 'int'
    |   |     `-ImplicitCastExpr 0x14e0275b8 <col:10, col:11> 'int' <IntegralCast>
    |   |       `-ImplicitCastExpr 0x14e0275a0 <col:10, col:11> 'char' <LValueToRValue>
    |   |         `-UnaryOperator 0x14e027588 <col:10, col:11> 'char' lvalue prefix '*' cannot overflow
    |   |           `-ImplicitCastExpr 0x14e027570 <col:11> 'char *' <LValueToRValue>
    |   |             `-DeclRefExpr 0x14e027550 <col:11> 'char *' lvalue Var 0x14e00e158 'str' 'char *'
    |   `-IfStmt 0x14e029d18 <line:31:2, line:35:2>
    |     |-BinaryOperator 0x14e029990 <line:31:6, col:51> 'int' contains-errors '&&'
    |     | |-BinaryOperator 0x14e0298f8 <col:6, col:34> 'int' contains-errors '&&'
    |     | | |-BinaryOperator 0x14e029860 <col:6, col:11> 'int' contains-errors '=='
    |     | | | |-DeclRefExpr 0x14e029648 <col:6> 'int' lvalue Var 0x14e00dfa0 'c' 'int'
    |     | | | `-RecoveryExpr 0x14e029840 <col:11> '<dependent type>' contains-errors lvalue
    |     | | `-BinaryOperator 0x14e0298d8 <col:24, col:34> 'int' contains-errors '!='
    |     | |   |-ArraySubscriptExpr 0x14e029898 <col:24, col:29> 'char' lvalue
    |     | |   | |-ImplicitCastExpr 0x14e029880 <col:24> 'char *' <LValueToRValue>
    |     | |   | | `-DeclRefExpr 0x14e0296a0 <col:24> 'char *' lvalue Var 0x14e00e158 'str' 'char *'
    |     | |   | `-IntegerLiteral 0x14e0296c0 <col:28> 'int' 1
    |     | |   `-RecoveryExpr 0x14e0298b8 <col:34> '<dependent type>' contains-errors lvalue
    |     | `-BinaryOperator 0x14e029970 <col:41, col:51> 'int' contains-errors '!='
    |     |   |-ArraySubscriptExpr 0x14e029930 <col:41, col:46> 'char' lvalue
    |     |   | |-ImplicitCastExpr 0x14e029918 <col:41> 'char *' <LValueToRValue>
    |     |   | | `-DeclRefExpr 0x14e029770 <col:41> 'char *' lvalue Var 0x14e00e158 'str' 'char *'
    |     |   | `-IntegerLiteral 0x14e029790 <col:45> 'int' 2
    |     |   `-RecoveryExpr 0x14e029950 <col:51> '<dependent type>' contains-errors lvalue
    |     `-CompoundStmt 0x14e029cf8 <line:32:2, line:35:2>
    |       |-BinaryOperator 0x14e029c68 <line:33:6, col:35> 'int' '='
    |       | |-DeclRefExpr 0x14e0299b0 <col:6> 'int' lvalue Var 0x14e00dfa0 'c' 'int'
    |       | `-CallExpr 0x14e029bd8 <col:10, col:35> 'int'
    |       |   |-ImplicitCastExpr 0x14e029bc0 <col:10> 'int (*)()' <FunctionToPointerDecay>
    |       |   | `-DeclRefExpr 0x14e029ab0 <col:10> 'int ()' Function 0x14e0299f8 'TO_SPECIAL' 'int ()'
    |       |   |-ImplicitCastExpr 0x14e029c20 <col:21, col:26> 'int' <IntegralCast>
    |       |   | `-ImplicitCastExpr 0x14e029c08 <col:21, col:26> 'char' <LValueToRValue>
    |       |   |   `-ArraySubscriptExpr 0x14e029b28 <col:21, col:26> 'char' lvalue
    |       |   |     |-ImplicitCastExpr 0x14e029b10 <col:21> 'char *' <LValueToRValue>
    |       |   |     | `-DeclRefExpr 0x14e029ad0 <col:21> 'char *' lvalue Var 0x14e00e158 'str' 'char *'
    |       |   |     `-IntegerLiteral 0x14e029af0 <col:25> 'int' 1
    |       |   `-ImplicitCastExpr 0x14e029c50 <col:29, col:34> 'int' <IntegralCast>
    |       |     `-ImplicitCastExpr 0x14e029c38 <col:29, col:34> 'char' <LValueToRValue>
    |       |       `-ArraySubscriptExpr 0x14e029ba0 <col:29, col:34> 'char' lvalue
    |       |         |-ImplicitCastExpr 0x14e029b88 <col:29> 'char *' <LValueToRValue>
    |       |         | `-DeclRefExpr 0x14e029b48 <col:29> 'char *' lvalue Var 0x14e00e158 'str' 'char *'
    |       |         `-IntegerLiteral 0x14e029b68 <col:33> 'int' 2
    |       `-CompoundAssignOperator 0x14e029cc8 <line:34:6, col:13> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
    |         |-DeclRefExpr 0x14e029c88 <col:6> 'char *' lvalue Var 0x14e00e158 'str' 'char *'
    |         `-IntegerLiteral 0x14e029ca8 <col:13> 'int' 2
    |-IfStmt 0x14e02a598 <line:40:5, line:57:14> has_else
    | |-RecoveryExpr 0x14e02a1d0 <line:40:9, col:57> '_Bool' contains-errors
    | |-CompoundStmt 0x14e02a490 <line:41:5, line:54:5>
    | | |-BinaryOperator 0x14e02a278 <line:44:2, col:8> 'char *' '='
    | | | |-UnaryOperator 0x14e02a228 <col:2, col:3> 'char *' lvalue prefix '*' cannot overflow
    | | | | `-ImplicitCastExpr 0x14e02a210 <col:3> 'char **' <LValueToRValue>
    | | | |   `-DeclRefExpr 0x14e02a1f0 <col:3> 'char **' lvalue ParmVar 0x14e00dd28 'sp' 'char **'
    | | | `-ImplicitCastExpr 0x14e02a260 <col:8> 'char *' <LValueToRValue>
    | | |   `-DeclRefExpr 0x14e02a240 <col:8> 'char *' lvalue Var 0x14e00e158 'str' 'char *'
    | | `-IfStmt 0x14e02a460 <line:47:2, line:53:18> has_else
    | |   |-RecoveryExpr 0x14e02a330 <line:47:6, col:11> '_Bool' contains-errors
    | |   |-NullStmt 0x14e02a458 <line:50:6>
    | |   `-BinaryOperator 0x14e02a438 <line:53:6, col:18> 'char *' '='
    | |     |-UnaryOperator 0x14e02a3a8 <col:6, col:7> 'char *' lvalue prefix '*' cannot overflow
    | |     | `-ImplicitCastExpr 0x14e02a390 <col:7> 'char **' <LValueToRValue>
    | |     |   `-DeclRefExpr 0x14e02a370 <col:7> 'char **' lvalue ParmVar 0x14e00dd28 'sp' 'char **'
    | |     `-BinaryOperator 0x14e02a418 <col:12, col:18> 'char *' '+'
    | |       |-ImplicitCastExpr 0x14e02a400 <col:12> 'char *' <LValueToRValue>
    | |       | `-DeclRefExpr 0x14e02a3c0 <col:12> 'char *' lvalue Var 0x14e00e158 'str' 'char *'
    | |       `-IntegerLiteral 0x14e02a3e0 <col:18> 'int' 1
    | `-BinaryOperator 0x14e02a578 <line:57:2, col:14> 'char *' '='
    |   |-UnaryOperator 0x14e02a4e8 <col:2, col:3> 'char *' lvalue prefix '*' cannot overflow
    |   | `-ImplicitCastExpr 0x14e02a4d0 <col:3> 'char **' <LValueToRValue>
    |   |   `-DeclRefExpr 0x14e02a4b0 <col:3> 'char **' lvalue ParmVar 0x14e00dd28 'sp' 'char **'
    |   `-BinaryOperator 0x14e02a558 <col:8, col:14> 'char *' '+'
    |     |-ImplicitCastExpr 0x14e02a540 <col:8> 'char *' <LValueToRValue>
    |     | `-DeclRefExpr 0x14e02a500 <col:8> 'char *' lvalue Var 0x14e00e158 'str' 'char *'
    |     `-IntegerLiteral 0x14e02a520 <col:14> 'int' 1
    |-IfStmt 0x14e02b978 <line:61:5, line:62:42>
    | |-BinaryOperator 0x14e02b790 <line:61:9, col:48> 'int' contains-errors '||'
    | | |-BinaryOperator 0x14e02b688 <col:9, col:24> 'int' contains-errors '||'
    | | | |-ImplicitCastExpr 0x14e02b670 <col:9> 'int' contains-errors <LValueToRValue>
    | | | | `-DeclRefExpr 0x14e02a5c8 <col:9> 'int' contains-errors lvalue Var 0x14e00e310 'special' 'int'
    | | | `-BinaryOperator 0x14e02b650 <col:20, col:24> 'int' '<'
    | | |   |-ImplicitCastExpr 0x14e02b638 <col:20> 'int' <LValueToRValue>
    | | |   | `-DeclRefExpr 0x14e02b600 <col:20> 'int' lvalue Var 0x14e00dfa0 'c' 'int'
    | | |   `-CharacterLiteral 0x14e02b620 <col:24> 'int' 32
    | | `-ParenExpr 0x14e02b770 <col:31, col:48> 'int'
    | |   `-BinaryOperator 0x14e02b750 <col:32, col:45> 'int' '&&'
    | |     |-ImplicitCastExpr 0x14e02b738 <col:32> 'int' <LValueToRValue>
    | |     | `-DeclRefExpr 0x14e02b6a8 <col:32> 'int' lvalue ParmVar 0x14e00dda8 'from' 'int'
    | |     `-BinaryOperator 0x14e02b718 <col:40, col:45> 'int' '=='
    | |       |-ImplicitCastExpr 0x14e02b700 <col:40> 'int' <LValueToRValue>
    | |       | `-DeclRefExpr 0x14e02b6c8 <col:40> 'int' lvalue Var 0x14e00dfa0 'c' 'int'
    | |       `-CharacterLiteral 0x14e02b6e8 <col:45> 'int' 32
    | `-ReturnStmt 0x14e02b968 <line:62:2, col:42>
    |   `-CallExpr 0x14e02b908 <col:9, col:42> 'int'
    |     |-ImplicitCastExpr 0x14e02b8f0 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x14e02b890 <col:9> 'int ()' Function 0x14e02b7d8 'get_special_key_name' 'int ()'
    |     |-ImplicitCastExpr 0x14e02b938 <col:30> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x14e02b8b0 <col:30> 'int' lvalue Var 0x14e00dfa0 'c' 'int'
    |     `-ImplicitCastExpr 0x14e02b950 <col:33> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x14e02b8d0 <col:33> 'int' lvalue Var 0x14e00e258 'modifiers' 'int'
    |-BinaryOperator 0x14e02ba60 <line:63:5, col:14> 'char' '='
    | |-ArraySubscriptExpr 0x14e02b9f0 <col:5, col:10> 'char' lvalue
    | | |-ImplicitCastExpr 0x14e02b9d8 <col:5> 'char *' <ArrayToPointerDecay>
    | | | `-DeclRefExpr 0x14e02b998 <col:5> 'char[7]' lvalue Var 0x14e00e0c0 'buf' 'char[7]'
    | | `-IntegerLiteral 0x14e02b9b8 <col:9> 'int' 0
    | `-ImplicitCastExpr 0x14e02ba48 <col:14> 'char' <IntegralCast>
    |   `-ImplicitCastExpr 0x14e02ba30 <col:14> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x14e02ba10 <col:14> 'int' lvalue Var 0x14e00dfa0 'c' 'int'
    `-ReturnStmt 0x14e02bb48 <line:65:5, col:12>
      `-ImplicitCastExpr 0x14e02bb30 <col:12> 'int' <PointerToIntegral>
        `-ImplicitCastExpr 0x14e02bb18 <col:12> 'char *' <ArrayToPointerDecay>
          `-DeclRefExpr 0x14e02baf8 <col:12> 'char[7]' lvalue Var 0x14e00e0c0 'buf' 'char[7]'
