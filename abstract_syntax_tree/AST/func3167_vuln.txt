TranslationUnitDecl 0x13781d408 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x13781e2b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x13781d9d0 '__int128'
|-TypedefDecl 0x13781e328 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x13781d9f0 'unsigned __int128'
|-TypedefDecl 0x14000c830 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x14000c600 'struct __NSConstantString_tag'
|   `-Record 0x13781e380 '__NSConstantString_tag'
|-TypedefDecl 0x14000c898 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x13781db90 '__SVInt8_t'
|-TypedefDecl 0x14000c900 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x13781dbb0 '__SVInt16_t'
|-TypedefDecl 0x14000c968 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x13781dbd0 '__SVInt32_t'
|-TypedefDecl 0x14000c9d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x13781dbf0 '__SVInt64_t'
|-TypedefDecl 0x14000ca38 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x13781dc10 '__SVUint8_t'
|-TypedefDecl 0x14000caa0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x13781dc30 '__SVUint16_t'
|-TypedefDecl 0x14000cb08 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x13781dc50 '__SVUint32_t'
|-TypedefDecl 0x14000cb70 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x13781dc70 '__SVUint64_t'
|-TypedefDecl 0x14000cbd8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x13781dc90 '__SVFloat16_t'
|-TypedefDecl 0x14000cc40 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x13781dcb0 '__SVFloat32_t'
|-TypedefDecl 0x14000cca8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x13781dcd0 '__SVFloat64_t'
|-TypedefDecl 0x14000cd10 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x13781dcf0 '__SVBfloat16_t'
|-TypedefDecl 0x14000cd78 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x13781dd10 '__clang_svint8x2_t'
|-TypedefDecl 0x14000cde0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x13781dd30 '__clang_svint16x2_t'
|-TypedefDecl 0x14000ce48 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x13781dd50 '__clang_svint32x2_t'
|-TypedefDecl 0x14000ceb0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x13781dd70 '__clang_svint64x2_t'
|-TypedefDecl 0x14000cf18 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x13781dd90 '__clang_svuint8x2_t'
|-TypedefDecl 0x14000cf80 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x13781ddb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x14000cfe8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x13781ddd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x14000d050 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x13781ddf0 '__clang_svuint64x2_t'
|-TypedefDecl 0x14000d0b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x13781de10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x14000d120 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x13781de30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x14000d188 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x13781de50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x14000d1f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x13781de70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x14000d258 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x13781de90 '__clang_svint8x3_t'
|-TypedefDecl 0x14000d2c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x13781deb0 '__clang_svint16x3_t'
|-TypedefDecl 0x14000d328 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x13781ded0 '__clang_svint32x3_t'
|-TypedefDecl 0x14000d390 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x13781def0 '__clang_svint64x3_t'
|-TypedefDecl 0x14000d3f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x13781df10 '__clang_svuint8x3_t'
|-TypedefDecl 0x14000d460 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x13781df30 '__clang_svuint16x3_t'
|-TypedefDecl 0x14000d4c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x13781df50 '__clang_svuint32x3_t'
|-TypedefDecl 0x14000d530 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x13781df70 '__clang_svuint64x3_t'
|-TypedefDecl 0x14000d598 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x13781df90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x14000de00 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x13781dfb0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x14000de68 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x13781dfd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x14000ded0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x13781dff0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x14000df38 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x13781e010 '__clang_svint8x4_t'
|-TypedefDecl 0x14000dfa0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x13781e030 '__clang_svint16x4_t'
|-TypedefDecl 0x14000e008 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x13781e050 '__clang_svint32x4_t'
|-TypedefDecl 0x14000e070 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x13781e070 '__clang_svint64x4_t'
|-TypedefDecl 0x14000e0d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x13781e090 '__clang_svuint8x4_t'
|-TypedefDecl 0x14000e140 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x13781e0b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x14000e1a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x13781e0d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x14000e210 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x13781e0f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x14000e278 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x13781e110 '__clang_svfloat16x4_t'
|-TypedefDecl 0x14000e2e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x13781e130 '__clang_svfloat32x4_t'
|-TypedefDecl 0x14000e348 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x13781e150 '__clang_svfloat64x4_t'
|-TypedefDecl 0x14000e3b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x13781e170 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x14000e418 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x13781e190 '__SVBool_t'
|-TypedefDecl 0x14000e480 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x13781e1b0 '__clang_svboolx2_t'
|-TypedefDecl 0x14000e4e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x13781e1d0 '__clang_svboolx4_t'
|-TypedefDecl 0x14000e550 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x13781e1f0 '__SVCount_t'
|-TypedefDecl 0x14000e5f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x14000e5b0 'char *'
|   `-BuiltinType 0x13781d4b0 'char'
|-TypedefDecl 0x14000e668 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x14000e5b0 'char *'
|   `-BuiltinType 0x13781d4b0 'char'
|-FunctionDecl 0x14000e7a8 <dataset_diviso_filec/func3167_vuln.c:1:1, line:79:1> line:1:1 _rl_get_string_variable_value 'int (const char *)'
| |-ParmVarDecl 0x14000e6d8 <line:2:6, col:18> col:18 used name 'const char *'
| `-CompoundStmt 0x1368fc250 <line:3:1, line:79:1>
|   |-DeclStmt 0x14000e9a8 <line:4:3, col:25>
|   | `-VarDecl 0x14000e940 <col:3, col:24> col:15 used numbuf 'char[32]' static
|   |-DeclStmt 0x14000ea40 <line:5:3, col:12>
|   | `-VarDecl 0x14000e9d8 <col:3, col:9> col:9 used ret 'char *'
|   `-IfStmt 0x1368fc220 <line:7:3, line:78:14> has_else
|     |-BinaryOperator 0x14000ece8 <line:7:7, col:36> 'int' '=='
|     | |-CallExpr 0x14000ec68 <col:7, col:31> 'int'
|     | | |-ImplicitCastExpr 0x14000ec50 <col:7> 'int (*)()' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x14000eb80 <col:7> 'int ()' Function 0x14000eac8 '_rl_stricmp' 'int ()'
|     | | |-ImplicitCastExpr 0x14000ec98 <col:20> 'const char *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x14000eba0 <col:20> 'const char *' lvalue ParmVar 0x14000e6d8 'name' 'const char *'
|     | | `-ImplicitCastExpr 0x14000ecb0 <col:26> 'char *' <ArrayToPointerDecay>
|     | |   `-StringLiteral 0x14000ec00 <col:26> 'char[4]' lvalue "STR"
|     | `-IntegerLiteral 0x14000ecc8 <col:36> 'int' 0
|     |-CompoundStmt 0x137808768 <line:8:5, line:19:5>
|     | `-SwitchStmt 0x14000ed58 <line:9:7, line:18:2>
|     |   |-RecoveryExpr 0x14000ed38 <line:9:15> '<dependent type>' contains-errors lvalue
|     |   `-CompoundStmt 0x137808740 <line:10:2, line:18:2>
|     |     |-ReturnStmt 0x137808620 <line:12:6, col:13>
|     |     | `-ImplicitCastExpr 0x14000edd0 <col:13> 'int' <PointerToIntegral>
|     |     |   `-ImplicitCastExpr 0x14000edb8 <col:13> 'char *' <ArrayToPointerDecay>
|     |     |     `-StringLiteral 0x14000ed98 <col:13> 'char[4]' lvalue "STR"
|     |     |-ReturnStmt 0x137808698 <line:14:6, col:13>
|     |     | `-ImplicitCastExpr 0x137808680 <col:13> 'int' <PointerToIntegral>
|     |     |   `-ImplicitCastExpr 0x137808668 <col:13> 'char *' <ArrayToPointerDecay>
|     |     |     `-StringLiteral 0x137808648 <col:13> 'char[4]' lvalue "STR"
|     |     `-DefaultStmt 0x137808720 <line:16:4, line:17:13>
|     |       `-ReturnStmt 0x137808710 <col:6, col:13>
|     |         `-ImplicitCastExpr 0x1378086f8 <col:13> 'int' <PointerToIntegral>
|     |           `-ImplicitCastExpr 0x1378086e0 <col:13> 'char *' <ArrayToPointerDecay>
|     |             `-StringLiteral 0x1378086c0 <col:13> 'char[4]' lvalue "STR"
|     `-IfStmt 0x1368fc1f0 <line:20:8, line:78:14> has_else
|       |-BinaryOperator 0x137808878 <line:20:12, col:41> 'int' '=='
|       | |-CallExpr 0x1378087f8 <col:12, col:36> 'int'
|       | | |-ImplicitCastExpr 0x1378087e0 <col:12> 'int (*)()' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x137808780 <col:12> 'int ()' Function 0x14000eac8 '_rl_stricmp' 'int ()'
|       | | |-ImplicitCastExpr 0x137808828 <col:25> 'const char *' <LValueToRValue>
|       | | | `-DeclRefExpr 0x1378087a0 <col:25> 'const char *' lvalue ParmVar 0x14000e6d8 'name' 'const char *'
|       | | `-ImplicitCastExpr 0x137808840 <col:31> 'char *' <ArrayToPointerDecay>
|       | |   `-StringLiteral 0x1378087c0 <col:31> 'char[4]' lvalue "STR"
|       | `-IntegerLiteral 0x137808858 <col:41> 'int' 0
|       |-NullStmt 0x1368fc1e8 <line:21:5>
|       `-IfStmt 0x1368fc1b8 <line:22:8, line:78:14> has_else
|         |-BinaryOperator 0x137808a08 <line:22:12, col:41> 'int' '=='
|         | |-CallExpr 0x137808988 <col:12, col:36> 'int'
|         | | |-ImplicitCastExpr 0x137808970 <col:12> 'int (*)()' <FunctionToPointerDecay>
|         | | | `-DeclRefExpr 0x137808910 <col:12> 'int ()' Function 0x14000eac8 '_rl_stricmp' 'int ()'
|         | | |-ImplicitCastExpr 0x1378089b8 <col:25> 'const char *' <LValueToRValue>
|         | | | `-DeclRefExpr 0x137808930 <col:25> 'const char *' lvalue ParmVar 0x14000e6d8 'name' 'const char *'
|         | | `-ImplicitCastExpr 0x1378089d0 <col:31> 'char *' <ArrayToPointerDecay>
|         | |   `-StringLiteral 0x137808950 <col:31> 'char[4]' lvalue "STR"
|         | `-IntegerLiteral 0x1378089e8 <col:41> 'int' 0
|         |-CompoundStmt 0x137808e78 <line:23:5, line:26:5>
|         | |-CallExpr 0x137808dc0 <line:24:7, col:53> '<dependent type>' contains-errors
|         | | |-DeclRefExpr 0x137808c90 <col:7> 'int (char *, const char *, ...)' Function 0x137808a78 'sprintf' 'int (char *, const char *, ...)'
|         | | |-DeclRefExpr 0x137808cb0 <col:16> 'char[32]' lvalue Var 0x14000e940 'numbuf' 'char[32]'
|         | | |-StringLiteral 0x137808cd0 <col:24> 'char[4]' lvalue "STR"
|         | | `-RecoveryExpr 0x137808d70 <col:31> '<dependent type>' contains-errors lvalue
|         | `-ReturnStmt 0x137808e68 <line:25:7, col:21>
|         |   `-ImplicitCastExpr 0x137808e50 <col:14, col:21> 'int' <PointerToIntegral>
|         |     `-ImplicitCastExpr 0x137808e38 <col:14, col:21> 'char *' <ArrayToPointerDecay>
|         |       `-ParenExpr 0x137808e18 <col:14, col:21> 'char[32]' lvalue
|         |         `-DeclRefExpr 0x137808df8 <col:15> 'char[32]' lvalue Var 0x14000e940 'numbuf' 'char[32]'
|         `-IfStmt 0x1368fc188 <line:27:8, line:78:14> has_else
|           |-BinaryOperator 0x137808f90 <line:27:12, col:41> 'int' '=='
|           | |-CallExpr 0x137808f10 <col:12, col:36> 'int'
|           | | |-ImplicitCastExpr 0x137808ef8 <col:12> 'int (*)()' <FunctionToPointerDecay>
|           | | | `-DeclRefExpr 0x137808e98 <col:12> 'int ()' Function 0x14000eac8 '_rl_stricmp' 'int ()'
|           | | |-ImplicitCastExpr 0x137808f40 <col:25> 'const char *' <LValueToRValue>
|           | | | `-DeclRefExpr 0x137808eb8 <col:25> 'const char *' lvalue ParmVar 0x14000e6d8 'name' 'const char *'
|           | | `-ImplicitCastExpr 0x137808f58 <col:31> 'char *' <ArrayToPointerDecay>
|           | |   `-StringLiteral 0x137808ed8 <col:31> 'char[4]' lvalue "STR"
|           | `-IntegerLiteral 0x137808f70 <col:41> 'int' 0
|           |-CompoundStmt 0x137809198 <line:28:5, line:31:5>
|           | |-CallExpr 0x1378090e0 <line:29:7, col:67> '<dependent type>' contains-errors
|           | | |-DeclRefExpr 0x137808fb0 <col:7> 'int (char *, const char *, ...)' Function 0x137808a78 'sprintf' 'int (char *, const char *, ...)'
|           | | |-DeclRefExpr 0x137808fd0 <col:16> 'char[32]' lvalue Var 0x14000e940 'numbuf' 'char[32]'
|           | | |-StringLiteral 0x137808ff0 <col:24> 'char[4]' lvalue "STR"
|           | | `-RecoveryExpr 0x137809090 <col:31> '<dependent type>' contains-errors lvalue
|           | `-ReturnStmt 0x137809188 <line:30:7, col:21>
|           |   `-ImplicitCastExpr 0x137809170 <col:14, col:21> 'int' <PointerToIntegral>
|           |     `-ImplicitCastExpr 0x137809158 <col:14, col:21> 'char *' <ArrayToPointerDecay>
|           |       `-ParenExpr 0x137809138 <col:14, col:21> 'char[32]' lvalue
|           |         `-DeclRefExpr 0x137809118 <col:15> 'char[32]' lvalue Var 0x14000e940 'numbuf' 'char[32]'
|           `-IfStmt 0x1368fc158 <line:32:8, line:78:14> has_else
|             |-BinaryOperator 0x1378358b8 <line:32:12, col:41> 'int' '=='
|             | |-CallExpr 0x137835838 <col:12, col:36> 'int'
|             | | |-ImplicitCastExpr 0x137835820 <col:12> 'int (*)()' <FunctionToPointerDecay>
|             | | | `-DeclRefExpr 0x1378091b8 <col:12> 'int ()' Function 0x14000eac8 '_rl_stricmp' 'int ()'
|             | | |-ImplicitCastExpr 0x137835868 <col:25> 'const char *' <LValueToRValue>
|             | | | `-DeclRefExpr 0x1378091d8 <col:25> 'const char *' lvalue ParmVar 0x14000e6d8 'name' 'const char *'
|             | | `-ImplicitCastExpr 0x137835880 <col:31> 'char *' <ArrayToPointerDecay>
|             | |   `-StringLiteral 0x137835800 <col:31> 'char[4]' lvalue "STR"
|             | `-IntegerLiteral 0x137835898 <col:41> 'int' 0
|             |-CompoundStmt 0x137835ac0 <line:33:5, line:36:5>
|             | |-CallExpr 0x137835a08 <line:34:7, col:56> '<dependent type>' contains-errors
|             | | |-DeclRefExpr 0x1378358d8 <col:7> 'int (char *, const char *, ...)' Function 0x137808a78 'sprintf' 'int (char *, const char *, ...)'
|             | | |-DeclRefExpr 0x1378358f8 <col:16> 'char[32]' lvalue Var 0x14000e940 'numbuf' 'char[32]'
|             | | |-StringLiteral 0x137835918 <col:24> 'char[4]' lvalue "STR"
|             | | `-RecoveryExpr 0x1378359b8 <col:31> '<dependent type>' contains-errors lvalue
|             | `-ReturnStmt 0x137835ab0 <line:35:7, col:21>
|             |   `-ImplicitCastExpr 0x137835a98 <col:14, col:21> 'int' <PointerToIntegral>
|             |     `-ImplicitCastExpr 0x137835a80 <col:14, col:21> 'char *' <ArrayToPointerDecay>
|             |       `-ParenExpr 0x137835a60 <col:14, col:21> 'char[32]' lvalue
|             |         `-DeclRefExpr 0x137835a40 <col:15> 'char[32]' lvalue Var 0x14000e940 'numbuf' 'char[32]'
|             `-IfStmt 0x1368fc128 <line:37:8, line:78:14> has_else
|               |-BinaryOperator 0x137835bd8 <line:37:12, col:41> 'int' '=='
|               | |-CallExpr 0x137835b58 <col:12, col:36> 'int'
|               | | |-ImplicitCastExpr 0x137835b40 <col:12> 'int (*)()' <FunctionToPointerDecay>
|               | | | `-DeclRefExpr 0x137835ae0 <col:12> 'int ()' Function 0x14000eac8 '_rl_stricmp' 'int ()'
|               | | |-ImplicitCastExpr 0x137835b88 <col:25> 'const char *' <LValueToRValue>
|               | | | `-DeclRefExpr 0x137835b00 <col:25> 'const char *' lvalue ParmVar 0x14000e6d8 'name' 'const char *'
|               | | `-ImplicitCastExpr 0x137835ba0 <col:31> 'char *' <ArrayToPointerDecay>
|               | |   `-StringLiteral 0x137835b20 <col:31> 'char[4]' lvalue "STR"
|               | `-IntegerLiteral 0x137835bb8 <col:41> 'int' 0
|               |-ReturnStmt 0x137835d50 <line:38:5, col:49>
|               | `-ParenExpr 0x137835d30 <col:12, col:49> 'int'
|               |   `-CallExpr 0x137835d10 <col:13, col:48> 'int'
|               |     `-ImplicitCastExpr 0x137835cf8 <col:13> 'int (*)()' <FunctionToPointerDecay>
|               |       `-DeclRefExpr 0x137835cd8 <col:13> 'int ()' Function 0x137835c20 'rl_get_keymap_name_from_edit_mode' 'int ()'
|               `-IfStmt 0x1368fc0f8 <line:39:8, line:78:14> has_else
|                 |-BinaryOperator 0x137835e58 <line:39:12, col:41> 'int' '=='
|                 | |-CallExpr 0x137835dd8 <col:12, col:36> 'int'
|                 | | |-ImplicitCastExpr 0x137835dc0 <col:12> 'int (*)()' <FunctionToPointerDecay>
|                 | | | `-DeclRefExpr 0x137835d60 <col:12> 'int ()' Function 0x14000eac8 '_rl_stricmp' 'int ()'
|                 | | |-ImplicitCastExpr 0x137835e08 <col:25> 'const char *' <LValueToRValue>
|                 | | | `-DeclRefExpr 0x137835d80 <col:25> 'const char *' lvalue ParmVar 0x14000e6d8 'name' 'const char *'
|                 | | `-ImplicitCastExpr 0x137835e20 <col:31> 'char *' <ArrayToPointerDecay>
|                 | |   `-StringLiteral 0x137835da0 <col:31> 'char[4]' lvalue "STR"
|                 | `-IntegerLiteral 0x137835e38 <col:41> 'int' 0
|                 |-CompoundStmt 0x1378360b0 <line:40:5, line:43:5>
|                 | `-ReturnStmt 0x1378360a0 <line:42:7, col:21>
|                 |   `-ImplicitCastExpr 0x137836088 <col:14, col:21> 'int' <PointerToIntegral>
|                 |     `-ImplicitCastExpr 0x137836070 <col:14, col:21> 'char *' <ArrayToPointerDecay>
|                 |       `-ParenExpr 0x137836050 <col:14, col:21> 'char[32]' lvalue
|                 |         `-DeclRefExpr 0x137836030 <col:15> 'char[32]' lvalue Var 0x14000e940 'numbuf' 'char[32]'
|                 `-IfStmt 0x1368fc0c8 <line:44:8, line:78:14> has_else
|                   |-BinaryOperator 0x1378361c0 <line:44:12, col:41> 'int' '=='
|                   | |-CallExpr 0x137836140 <col:12, col:36> 'int'
|                   | | |-ImplicitCastExpr 0x137836128 <col:12> 'int (*)()' <FunctionToPointerDecay>
|                   | | | `-DeclRefExpr 0x1378360c8 <col:12> 'int ()' Function 0x14000eac8 '_rl_stricmp' 'int ()'
|                   | | |-ImplicitCastExpr 0x137836170 <col:25> 'const char *' <LValueToRValue>
|                   | | | `-DeclRefExpr 0x1378360e8 <col:25> 'const char *' lvalue ParmVar 0x14000e6d8 'name' 'const char *'
|                   | | `-ImplicitCastExpr 0x137836188 <col:31> 'char *' <ArrayToPointerDecay>
|                   | |   `-StringLiteral 0x137836108 <col:31> 'char[4]' lvalue "STR"
|                   | `-IntegerLiteral 0x1378361a0 <col:41> 'int' 0
|                   |-CompoundStmt 0x1368faef0 <line:45:5, line:58:5>
|                   | |-IfStmt 0x137836250 <line:46:7, line:47:9>
|                   | | |-RecoveryExpr 0x137836200 <line:46:11, col:38> '_Bool' contains-errors
|                   | | `-ReturnStmt 0x137836240 <line:47:2, col:9>
|                   | |   `-IntegerLiteral 0x137836220 <col:9> 'int' 0
|                   | |-IfStmt 0x1368fae60 <line:49:7, line:56:14> has_else
|                   | | |-ImplicitCastExpr 0x1378363d0 <line:49:11> 'char *' <LValueToRValue>
|                   | | | `-DeclRefExpr 0x1378363b0 <col:11> 'char *' lvalue Var 0x14000e9d8 'ret' 'char *'
|                   | | |-CompoundStmt 0x1368fad70 <line:50:2, line:54:2>
|                   | | | |-CallExpr 0x1368faa18 <line:51:4, col:45> 'char *'
|                   | | | | |-ImplicitCastExpr 0x1368faa00 <col:4> 'char *(*)(char *, const char *, unsigned long)' <FunctionToPointerDecay>
|                   | | | | | `-DeclRefExpr 0x137836688 <col:4> 'char *(char *, const char *, unsigned long)' Function 0x137836438 'strncpy' 'char *(char *, const char *, unsigned long)'
|                   | | | | |-ImplicitCastExpr 0x1368faa50 <col:13> 'char *' <ArrayToPointerDecay>
|                   | | | | | `-DeclRefExpr 0x1378366a8 <col:13> 'char[32]' lvalue Var 0x14000e940 'numbuf' 'char[32]'
|                   | | | | |-ImplicitCastExpr 0x1368faa80 <col:21> 'const char *' <NoOp>
|                   | | | | | `-ImplicitCastExpr 0x1368faa68 <col:21> 'char *' <LValueToRValue>
|                   | | | | |   `-DeclRefExpr 0x1378366c8 <col:21> 'char *' lvalue Var 0x14000e9d8 'ret' 'char *'
|                   | | | | `-BinaryOperator 0x137836780 <col:26, col:44> 'unsigned long' '-'
|                   | | | |   |-UnaryExprOrTypeTraitExpr 0x137836728 <col:26, col:40> 'unsigned long' sizeof
|                   | | | |   | `-ParenExpr 0x137836708 <col:33, col:40> 'char[32]' lvalue
|                   | | | |   |   `-DeclRefExpr 0x1378366e8 <col:34> 'char[32]' lvalue Var 0x14000e940 'numbuf' 'char[32]' non_odr_use_unevaluated
|                   | | | |   `-ImplicitCastExpr 0x137836768 <col:44> 'unsigned long' <IntegralCast>
|                   | | | |     `-IntegerLiteral 0x137836748 <col:44> 'int' 1
|                   | | | |-CallExpr 0x1368fabd0 <line:52:4, col:14> 'int'
|                   | | | | |-ImplicitCastExpr 0x1368fabb8 <col:4> 'int (*)()' <FunctionToPointerDecay>
|                   | | | | | `-DeclRefExpr 0x1368fab78 <col:4> 'int ()' Function 0x1368faac0 'xfree' 'int ()'
|                   | | | | `-ImplicitCastExpr 0x1368fabf8 <col:11> 'char *' <LValueToRValue>
|                   | | | |   `-DeclRefExpr 0x1368fab98 <col:11> 'char *' lvalue Var 0x14000e9d8 'ret' 'char *'
|                   | | | `-BinaryOperator 0x1368fad50 <line:53:4, col:33> 'char' '='
|                   | | |   |-ArraySubscriptExpr 0x1368fad00 <col:4, col:29> 'char' lvalue
|                   | | |   | |-ImplicitCastExpr 0x1368face8 <col:4> 'char *' <ArrayToPointerDecay>
|                   | | |   | | `-DeclRefExpr 0x1368fac10 <col:4> 'char[32]' lvalue Var 0x14000e940 'numbuf' 'char[32]'
|                   | | |   | `-BinaryOperator 0x1368facc8 <col:11, col:28> 'unsigned long' '-'
|                   | | |   |   |-UnaryExprOrTypeTraitExpr 0x1368fac70 <col:11, col:24> 'unsigned long' sizeof
|                   | | |   |   | `-ParenExpr 0x1368fac50 <col:17, col:24> 'char[32]' lvalue
|                   | | |   |   |   `-DeclRefExpr 0x1368fac30 <col:18> 'char[32]' lvalue Var 0x14000e940 'numbuf' 'char[32]' non_odr_use_unevaluated
|                   | | |   |   `-ImplicitCastExpr 0x1368facb0 <col:28> 'unsigned long' <IntegralCast>
|                   | | |   |     `-IntegerLiteral 0x1368fac90 <col:28> 'int' 1
|                   | | |   `-ImplicitCastExpr 0x1368fad38 <col:33> 'char' <IntegralCast>
|                   | | |     `-CharacterLiteral 0x1368fad20 <col:33> 'int' 0
|                   | | `-BinaryOperator 0x1368fae40 <line:56:2, col:14> 'char' '='
|                   | |   |-ArraySubscriptExpr 0x1368fadf0 <col:2, col:10> 'char' lvalue
|                   | |   | |-ImplicitCastExpr 0x1368fadd8 <col:2> 'char *' <ArrayToPointerDecay>
|                   | |   | | `-DeclRefExpr 0x1368fad98 <col:2> 'char[32]' lvalue Var 0x14000e940 'numbuf' 'char[32]'
|                   | |   | `-IntegerLiteral 0x1368fadb8 <col:9> 'int' 0
|                   | |   `-ImplicitCastExpr 0x1368fae28 <col:14> 'char' <IntegralCast>
|                   | |     `-CharacterLiteral 0x1368fae10 <col:14> 'int' 0
|                   | `-ReturnStmt 0x1368faee0 <line:57:7, col:14>
|                   |   `-ImplicitCastExpr 0x1368faec8 <col:14> 'int' <PointerToIntegral>
|                   |     `-ImplicitCastExpr 0x1368faeb0 <col:14> 'char *' <ArrayToPointerDecay>
|                   |       `-DeclRefExpr 0x1368fae90 <col:14> 'char[32]' lvalue Var 0x14000e940 'numbuf' 'char[32]'
|                   `-IfStmt 0x1368fc098 <line:59:8, line:78:14> has_else
|                     |-BinaryOperator 0x1368fb010 <line:59:12, col:41> 'int' '=='
|                     | |-CallExpr 0x1368faf90 <col:12, col:36> 'int'
|                     | | |-ImplicitCastExpr 0x1368faf78 <col:12> 'int (*)()' <FunctionToPointerDecay>
|                     | | | `-DeclRefExpr 0x1368faf18 <col:12> 'int ()' Function 0x14000eac8 '_rl_stricmp' 'int ()'
|                     | | |-ImplicitCastExpr 0x1368fafc0 <col:25> 'const char *' <LValueToRValue>
|                     | | | `-DeclRefExpr 0x1368faf38 <col:25> 'const char *' lvalue ParmVar 0x14000e6d8 'name' 'const char *'
|                     | | `-ImplicitCastExpr 0x1368fafd8 <col:31> 'char *' <ArrayToPointerDecay>
|                     | |   `-StringLiteral 0x1368faf58 <col:31> 'char[4]' lvalue "STR"
|                     | `-IntegerLiteral 0x1368faff0 <col:41> 'int' 0
|                     |-CompoundStmt 0x1368fb3d0 <line:60:5, line:65:5>
|                     | |-IfStmt 0x1368fb290 <line:62:7, line:63:43>
|                     | | |-BinaryOperator 0x1368fb1c0 <line:62:11, col:18> 'int' '=='
|                     | | | |-ImplicitCastExpr 0x1368fb190 <col:11> 'char *' <LValueToRValue>
|                     | | | | `-DeclRefExpr 0x1368fb150 <col:11> 'char *' lvalue Var 0x14000e9d8 'ret' 'char *'
|                     | | | `-ImplicitCastExpr 0x1368fb1a8 <col:18> 'char *' <NullToPointer>
|                     | | |   `-IntegerLiteral 0x1368fb170 <col:18> 'int' 0
|                     | | `-BinaryOperator 0x1368fb270 <line:63:2, col:43> 'char *' '='
|                     | |   |-DeclRefExpr 0x1368fb1e0 <col:2> 'char *' lvalue Var 0x14000e9d8 'ret' 'char *'
|                     | |   `-ImplicitCastExpr 0x1368fb258 <col:8, col:43> 'char *' <IntegralToPointer>
|                     | |     `-CallExpr 0x1368fb238 <col:8, col:43> 'int'
|                     | |       `-ImplicitCastExpr 0x1368fb220 <col:8> 'int (*)()' <FunctionToPointerDecay>
|                     | |         `-DeclRefExpr 0x1368fb200 <col:8> 'int ()' Function 0x137835c20 'rl_get_keymap_name_from_edit_mode' 'int ()'
|                     | `-ReturnStmt 0x1368fb3c0 <line:64:7, col:32>
|                     |   `-ImplicitCastExpr 0x1368fb3a8 <col:14, col:32> 'int' <PointerToIntegral>
|                     |     `-ParenExpr 0x1368fb388 <col:14, col:32> 'char *'
|                     |       `-ConditionalOperator 0x1368fb358 <col:15, col:27> 'char *'
|                     |         |-ImplicitCastExpr 0x1368fb310 <col:15> 'char *' <LValueToRValue>
|                     |         | `-DeclRefExpr 0x1368fb2b0 <col:15> 'char *' lvalue Var 0x14000e9d8 'ret' 'char *'
|                     |         |-ImplicitCastExpr 0x1368fb328 <col:21> 'char *' <LValueToRValue>
|                     |         | `-DeclRefExpr 0x1368fb2d0 <col:21> 'char *' lvalue Var 0x14000e9d8 'ret' 'char *'
|                     |         `-ImplicitCastExpr 0x1368fb340 <col:27> 'char *' <ArrayToPointerDecay>
|                     |           `-StringLiteral 0x1368fb2f0 <col:27> 'char[4]' lvalue "STR"
|                     `-IfStmt 0x1368fc068 <line:66:8, line:78:14> has_else
|                       |-BinaryOperator 0x1368fb4e8 <line:66:12, col:41> 'int' '=='
|                       | |-CallExpr 0x1368fb468 <col:12, col:36> 'int'
|                       | | |-ImplicitCastExpr 0x1368fb450 <col:12> 'int (*)()' <FunctionToPointerDecay>
|                       | | | `-DeclRefExpr 0x1368fb3f0 <col:12> 'int ()' Function 0x14000eac8 '_rl_stricmp' 'int ()'
|                       | | |-ImplicitCastExpr 0x1368fb498 <col:25> 'const char *' <LValueToRValue>
|                       | | | `-DeclRefExpr 0x1368fb410 <col:25> 'const char *' lvalue ParmVar 0x14000e6d8 'name' 'const char *'
|                       | | `-ImplicitCastExpr 0x1368fb4b0 <col:31> 'char *' <ArrayToPointerDecay>
|                       | |   `-StringLiteral 0x1368fb430 <col:31> 'char[4]' lvalue "STR"
|                       | `-IntegerLiteral 0x1368fb4c8 <col:41> 'int' 0
|                       |-CompoundStmt 0x1368fb5e8 <line:67:5, line:70:5>
|                       | `-ReturnStmt 0x1368fb5d8 <line:69:7, col:21>
|                       |   `-ImplicitCastExpr 0x1368fb5c0 <col:14, col:21> 'int' <PointerToIntegral>
|                       |     `-ImplicitCastExpr 0x1368fb5a8 <col:14, col:21> 'char *' <ArrayToPointerDecay>
|                       |       `-ParenExpr 0x1368fb588 <col:14, col:21> 'char[32]' lvalue
|                       |         `-DeclRefExpr 0x1368fb568 <col:15> 'char[32]' lvalue Var 0x14000e940 'numbuf' 'char[32]'
|                       `-IfStmt 0x1368fc038 <line:71:8, line:78:14> has_else
|                         |-BinaryOperator 0x1368fb6f8 <line:71:12, col:41> 'int' '=='
|                         | |-CallExpr 0x1368fb678 <col:12, col:36> 'int'
|                         | | |-ImplicitCastExpr 0x1368fb660 <col:12> 'int (*)()' <FunctionToPointerDecay>
|                         | | | `-DeclRefExpr 0x1368fb600 <col:12> 'int ()' Function 0x14000eac8 '_rl_stricmp' 'int ()'
|                         | | |-ImplicitCastExpr 0x1368fb6a8 <col:25> 'const char *' <LValueToRValue>
|                         | | | `-DeclRefExpr 0x1368fb620 <col:25> 'const char *' lvalue ParmVar 0x14000e6d8 'name' 'const char *'
|                         | | `-ImplicitCastExpr 0x1368fb6c0 <col:31> 'char *' <ArrayToPointerDecay>
|                         | |   `-StringLiteral 0x1368fb640 <col:31> 'char[4]' lvalue "STR"
|                         | `-IntegerLiteral 0x1368fb6d8 <col:41> 'int' 0
|                         |-NullStmt 0x1368fc030 <line:72:5>
|                         `-IfStmt 0x1368fc000 <line:73:8, line:78:14> has_else
|                           |-BinaryOperator 0x1368fb810 <line:73:12, col:41> 'int' '=='
|                           | |-CallExpr 0x1368fb790 <col:12, col:36> 'int'
|                           | | |-ImplicitCastExpr 0x1368fb778 <col:12> 'int (*)()' <FunctionToPointerDecay>
|                           | | | `-DeclRefExpr 0x1368fb718 <col:12> 'int ()' Function 0x14000eac8 '_rl_stricmp' 'int ()'
|                           | | |-ImplicitCastExpr 0x1368fb7c0 <col:25> 'const char *' <LValueToRValue>
|                           | | | `-DeclRefExpr 0x1368fb738 <col:25> 'const char *' lvalue ParmVar 0x14000e6d8 'name' 'const char *'
|                           | | `-ImplicitCastExpr 0x1368fb7d8 <col:31> 'char *' <ArrayToPointerDecay>
|                           | |   `-StringLiteral 0x1368fb758 <col:31> 'char[4]' lvalue "STR"
|                           | `-IntegerLiteral 0x1368fb7f0 <col:41> 'int' 0
|                           |-NullStmt 0x1368fb9d0 <line:74:5>
|                           `-IfStmt 0x1368fb9a0 <line:75:8, line:78:14> has_else
|                             |-BinaryOperator 0x1368fb928 <line:75:12, col:41> 'int' '=='
|                             | |-CallExpr 0x1368fb8a8 <col:12, col:36> 'int'
|                             | | |-ImplicitCastExpr 0x1368fb890 <col:12> 'int (*)()' <FunctionToPointerDecay>
|                             | | | `-DeclRefExpr 0x1368fb830 <col:12> 'int ()' Function 0x14000eac8 '_rl_stricmp' 'int ()'
|                             | | |-ImplicitCastExpr 0x1368fb8d8 <col:25> 'const char *' <LValueToRValue>
|                             | | | `-DeclRefExpr 0x1368fb850 <col:25> 'const char *' lvalue ParmVar 0x14000e6d8 'name' 'const char *'
|                             | | `-ImplicitCastExpr 0x1368fb8f0 <col:31> 'char *' <ArrayToPointerDecay>
|                             | |   `-StringLiteral 0x1368fb870 <col:31> 'char[4]' lvalue "STR"
|                             | `-IntegerLiteral 0x1368fb908 <col:41> 'int' 0
|                             |-NullStmt 0x1368fb998 <line:76:5>
|                             `-ReturnStmt 0x1368fb988 <line:78:5, col:14>
|                               `-ParenExpr 0x1368fb968 <col:12, col:14> 'int'
|                                 `-IntegerLiteral 0x1368fb948 <col:13> 'int' 0
|-FunctionDecl 0x137808a78 <line:24:7> col:7 implicit used sprintf 'int (char *, const char *, ...)' extern
| |-ParmVarDecl 0x137808b78 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x137808be0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-BuiltinAttr 0x137808b20 <<invalid sloc>> Implicit 906
| `-FormatAttr 0x137808c58 <col:7> Implicit printf 2 3
`-FunctionDecl 0x137836438 <line:51:4> col:4 implicit used strncpy 'char *(char *, const char *, unsigned long)' extern
  |-ParmVarDecl 0x137836538 <<invalid sloc>> <invalid sloc> 'char *'
  |-ParmVarDecl 0x1378365a0 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x137836608 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x1378364e0 <<invalid sloc>> Implicit 886
