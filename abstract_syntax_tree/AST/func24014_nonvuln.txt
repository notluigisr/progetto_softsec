TranslationUnitDecl 0x11e055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x11e0564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x11e055bd0 '__int128'
|-TypedefDecl 0x11e056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x11e055bf0 'unsigned __int128'
|-TypedefDecl 0x11e126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x11e126000 'struct __NSConstantString_tag'
|   `-Record 0x11e056580 '__NSConstantString_tag'
|-TypedefDecl 0x11e126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x11e055d90 '__SVInt8_t'
|-TypedefDecl 0x11e126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x11e055db0 '__SVInt16_t'
|-TypedefDecl 0x11e126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x11e055dd0 '__SVInt32_t'
|-TypedefDecl 0x11e1263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x11e055df0 '__SVInt64_t'
|-TypedefDecl 0x11e126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x11e055e10 '__SVUint8_t'
|-TypedefDecl 0x11e1264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x11e055e30 '__SVUint16_t'
|-TypedefDecl 0x11e126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x11e055e50 '__SVUint32_t'
|-TypedefDecl 0x11e126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x11e055e70 '__SVUint64_t'
|-TypedefDecl 0x11e1265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x11e055e90 '__SVFloat16_t'
|-TypedefDecl 0x11e126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x11e055eb0 '__SVFloat32_t'
|-TypedefDecl 0x11e1266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x11e055ed0 '__SVFloat64_t'
|-TypedefDecl 0x11e126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x11e055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x11e126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x11e055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x11e1267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x11e055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x11e126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x11e055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x11e1268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x11e055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x11e126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x11e055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x11e126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x11e055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x11e1269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x11e055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x11e126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x11e055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x11e126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x11e056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x11e126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x11e056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x11e126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x11e056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x11e126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x11e056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x11e126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x11e056090 '__clang_svint8x3_t'
|-TypedefDecl 0x11e126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x11e0560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x11e126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x11e0560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x11e126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x11e0560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x11e126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x11e056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x11e126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x11e056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x11e126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x11e056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x11e126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x11e056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x11e126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x11e056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x11e127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x11e0561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x11e127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x11e0561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x11e1278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x11e0561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x11e127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x11e056210 '__clang_svint8x4_t'
|-TypedefDecl 0x11e1279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x11e056230 '__clang_svint16x4_t'
|-TypedefDecl 0x11e127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x11e056250 '__clang_svint32x4_t'
|-TypedefDecl 0x11e127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x11e056270 '__clang_svint64x4_t'
|-TypedefDecl 0x11e127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x11e056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x11e127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x11e0562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x11e127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x11e0562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x11e127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x11e0562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x11e127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x11e056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x11e127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x11e056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x11e127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x11e056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x11e127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x11e056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x11e127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x11e056390 '__SVBool_t'
|-TypedefDecl 0x11e127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x11e0563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x11e127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x11e0563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x11e127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x11e0563f0 '__SVCount_t'
|-TypedefDecl 0x11e127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x11e127fb0 'char *'
|   `-BuiltinType 0x11e0556b0 'char'
|-TypedefDecl 0x11e128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x11e127fb0 'char *'
|   `-BuiltinType 0x11e0556b0 'char'
|-FunctionDecl 0x11e128238 <dataset_diviso_filec/func24014_nonvuln.c:1:1, line:61:1> line:1:1 trim_pathname 'int (char *, int)'
| |-ParmVarDecl 0x11e1280d8 <line:2:6, col:12> col:12 used name 'char *'
| |-ParmVarDecl 0x11e128158 <line:3:6, col:10> col:10 maxlen 'int'
| `-CompoundStmt 0x11e80afe0 <line:4:1, line:61:1>
|   |-DeclStmt 0x11e128450 <line:5:3, col:18>
|   | |-VarDecl 0x11e128350 <col:3, col:7> col:7 used nlen 'int'
|   | `-VarDecl 0x11e1283d0 <col:3, col:13> col:13 used ndirs 'int'
|   |-DeclStmt 0x11e1286a8 <line:7:3, col:32>
|   | |-VarDecl 0x11e128498 <col:3, col:9> col:9 used nbeg 'char *'
|   | |-VarDecl 0x11e128518 <col:3, col:16> col:16 used nend 'char *'
|   | |-VarDecl 0x11e128598 <col:3, col:23> col:23 used ntail 'char *'
|   | `-VarDecl 0x11e128618 <col:3, col:31> col:31 used v 'char *'
|   |-IfStmt 0x11e141178 <line:9:3, line:10:12>
|   | |-BinaryOperator 0x11e1410f8 <line:9:7, col:46> 'int' '||'
|   | | |-BinaryOperator 0x11e128730 <col:7, col:15> 'int' '=='
|   | | | |-ImplicitCastExpr 0x11e128700 <col:7> 'char *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x11e1286c0 <col:7> 'char *' lvalue ParmVar 0x11e1280d8 'name' 'char *'
|   | | | `-ImplicitCastExpr 0x11e128718 <col:15> 'char *' <NullToPointer>
|   | | |   `-IntegerLiteral 0x11e1286e0 <col:15> 'int' 0
|   | | `-BinaryOperator 0x11e1410d8 <col:20, col:46> 'int' '=='
|   | |   |-ParenExpr 0x11e141098 <col:20, col:41> 'int'
|   | |   | `-BinaryOperator 0x11e141078 <col:21, col:40> 'int' '='
|   | |   |   |-DeclRefExpr 0x11e128750 <col:21> 'int' lvalue Var 0x11e128350 'nlen' 'int'
|   | |   |   `-ImplicitCastExpr 0x11e141060 <col:28, col:40> 'int' <IntegralCast>
|   | |   |     `-CallExpr 0x11e141008 <col:28, col:40> 'unsigned long'
|   | |   |       |-ImplicitCastExpr 0x11e140ff0 <col:28> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   | |   |       | `-DeclRefExpr 0x11e140f60 <col:28> 'unsigned long (const char *)' Function 0x11e140df0 'strlen' 'unsigned long (const char *)'
|   | |   |       `-ImplicitCastExpr 0x11e141048 <col:36> 'const char *' <NoOp>
|   | |   |         `-ImplicitCastExpr 0x11e141030 <col:36> 'char *' <LValueToRValue>
|   | |   |           `-DeclRefExpr 0x11e140f80 <col:36> 'char *' lvalue ParmVar 0x11e1280d8 'name' 'char *'
|   | |   `-IntegerLiteral 0x11e1410b8 <col:46> 'int' 0
|   | `-ReturnStmt 0x11e141168 <line:10:5, col:12>
|   |   `-ImplicitCastExpr 0x11e141150 <col:12> 'int' <PointerToIntegral>
|   |     `-ImplicitCastExpr 0x11e141138 <col:12> 'char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x11e141118 <col:12> 'char *' lvalue ParmVar 0x11e1280d8 'name' 'char *'
|   |-BinaryOperator 0x11e141248 <line:11:3, col:17> 'char *' '='
|   | |-DeclRefExpr 0x11e141198 <col:3> 'char *' lvalue Var 0x11e128518 'nend' 'char *'
|   | `-BinaryOperator 0x11e141228 <col:10, col:17> 'char *' '+'
|   |   |-ImplicitCastExpr 0x11e1411f8 <col:10> 'char *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x11e1411b8 <col:10> 'char *' lvalue ParmVar 0x11e1280d8 'name' 'char *'
|   |   `-ImplicitCastExpr 0x11e141210 <col:17> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x11e1411d8 <col:17> 'int' lvalue Var 0x11e128350 'nlen' 'int'
|   |-BinaryOperator 0x11e1414c0 <line:13:3, col:30> 'char *' '='
|   | |-DeclRefExpr 0x11e141268 <col:3> 'char *' lvalue Var 0x11e128618 'v' 'char *'
|   | `-ImplicitCastExpr 0x11e1414a8 <col:7, col:30> 'char *' <IntegralToPointer>
|   |   `-CallExpr 0x11e141468 <col:7, col:30> 'int'
|   |     |-ImplicitCastExpr 0x11e141450 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x11e1413a0 <col:7> 'int ()' Function 0x11e1412e8 'get_string_value' 'int ()'
|   |     `-ImplicitCastExpr 0x11e141490 <col:25> 'char *' <ArrayToPointerDecay>
|   |       `-StringLiteral 0x11e141400 <col:25> 'char[4]' lvalue "STR"
|   |-IfStmt 0x11e1416b0 <line:14:3, line:15:12>
|   | |-BinaryOperator 0x11e141630 <line:14:7, col:23> 'int' '||'
|   | | |-BinaryOperator 0x11e141550 <col:7, col:12> 'int' '=='
|   | | | |-ImplicitCastExpr 0x11e141520 <col:7> 'char *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x11e1414e0 <col:7> 'char *' lvalue Var 0x11e128618 'v' 'char *'
|   | | | `-ImplicitCastExpr 0x11e141538 <col:12> 'char *' <NullToPointer>
|   | | |   `-IntegerLiteral 0x11e141500 <col:12> 'int' 0
|   | | `-BinaryOperator 0x11e141610 <col:17, col:23> 'int' '=='
|   | |   |-ImplicitCastExpr 0x11e1415f8 <col:17, col:18> 'int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x11e1415e0 <col:17, col:18> 'char' <LValueToRValue>
|   | |   |   `-UnaryOperator 0x11e1415a8 <col:17, col:18> 'char' lvalue prefix '*' cannot overflow
|   | |   |     `-ImplicitCastExpr 0x11e141590 <col:18> 'char *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x11e141570 <col:18> 'char *' lvalue Var 0x11e128618 'v' 'char *'
|   | |   `-IntegerLiteral 0x11e1415c0 <col:23> 'int' 0
|   | `-ReturnStmt 0x11e1416a0 <line:15:5, col:12>
|   |   `-ImplicitCastExpr 0x11e141688 <col:12> 'int' <PointerToIntegral>
|   |     `-ImplicitCastExpr 0x11e141670 <col:12> 'char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x11e141650 <col:12> 'char *' lvalue ParmVar 0x11e1280d8 'name' 'char *'
|   |-IfStmt 0x11e809660 <line:16:3, line:17:12>
|   | |-BinaryOperator 0x11e1419d0 <line:16:7, col:49> 'int' contains-errors '||'
|   | | |-BinaryOperator 0x11e141970 <col:7, col:35> 'int' contains-errors '=='
|   | | | |-CallExpr 0x11e141940 <col:7, col:30> '<dependent type>' contains-errors
|   | | | | |-DeclRefExpr 0x11e1417b0 <col:7> 'int ()' Function 0x11e1416f8 'legal_number' 'int ()'
|   | | | | |-DeclRefExpr 0x11e1417d0 <col:21> 'char *' lvalue Var 0x11e128618 'v' 'char *'
|   | | | | `-UnaryOperator 0x11e141928 <col:24, col:25> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | | | |   `-RecoveryExpr 0x11e141908 <col:25> '<dependent type>' contains-errors lvalue
|   | | | `-IntegerLiteral 0x11e141850 <col:35> 'int' 0
|   | | `-BinaryOperator 0x11e1419b0 <col:40, col:49> 'int' contains-errors '<='
|   | |   |-RecoveryExpr 0x11e141990 <col:40> '<dependent type>' contains-errors lvalue
|   | |   `-IntegerLiteral 0x11e1418a8 <col:49> 'int' 0
|   | `-ReturnStmt 0x11e809650 <line:17:5, col:12>
|   |   `-ImplicitCastExpr 0x11e809638 <col:12> 'int' <PointerToIntegral>
|   |     `-ImplicitCastExpr 0x11e809620 <col:12> 'char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x11e809600 <col:12> 'char *' lvalue ParmVar 0x11e1280d8 'name' 'char *'
|   |-BinaryOperator 0x11e8096d8 <line:20:3, col:10> 'char *' '='
|   | |-DeclRefExpr 0x11e809680 <col:3> 'char *' lvalue Var 0x11e128498 'nbeg' 'char *'
|   | `-ImplicitCastExpr 0x11e8096c0 <col:10> 'char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x11e8096a0 <col:10> 'char *' lvalue ParmVar 0x11e1280d8 'name' 'char *'
|   |-IfStmt 0x11e809a60 <line:21:3, line:27:2>
|   | |-BinaryOperator 0x11e8097b8 <line:21:7, col:18> 'int' '=='
|   | | |-ImplicitCastExpr 0x11e8097a0 <col:7, col:13> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x11e809788 <col:7, col:13> 'char' <LValueToRValue>
|   | | |   `-ArraySubscriptExpr 0x11e809750 <col:7, col:13> 'char' lvalue
|   | | |     |-ImplicitCastExpr 0x11e809738 <col:7> 'char *' <LValueToRValue>
|   | | |     | `-DeclRefExpr 0x11e8096f8 <col:7> 'char *' lvalue ParmVar 0x11e1280d8 'name' 'char *'
|   | | |     `-IntegerLiteral 0x11e809718 <col:12> 'int' 0
|   | | `-CharacterLiteral 0x11e809770 <col:18> 'int' 126
|   | `-ForStmt 0x11e809a28 <line:22:5, line:27:2>
|   |   |-BinaryOperator 0x11e809830 <line:22:10, col:17> 'char *' '='
|   |   | |-DeclRefExpr 0x11e8097d8 <col:10> 'char *' lvalue Var 0x11e128498 'nbeg' 'char *'
|   |   | `-ImplicitCastExpr 0x11e809818 <col:17> 'char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x11e8097f8 <col:17> 'char *' lvalue ParmVar 0x11e1280d8 'name' 'char *'
|   |   |-<<<NULL>>>
|   |   |-ImplicitCastExpr 0x11e8098a0 <col:23, col:24> 'char' <LValueToRValue>
|   |   | `-UnaryOperator 0x11e809888 <col:23, col:24> 'char' lvalue prefix '*' cannot overflow
|   |   |   `-ImplicitCastExpr 0x11e809870 <col:24> 'char *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x11e809850 <col:24> 'char *' lvalue Var 0x11e128498 'nbeg' 'char *'
|   |   |-UnaryOperator 0x11e8098d8 <col:30, col:34> 'char *' postfix '++'
|   |   | `-DeclRefExpr 0x11e8098b8 <col:30> 'char *' lvalue Var 0x11e128498 'nbeg' 'char *'
|   |   `-IfStmt 0x11e809a08 <line:23:7, line:27:2>
|   |     |-BinaryOperator 0x11e809988 <line:23:11, col:20> 'int' '=='
|   |     | |-ImplicitCastExpr 0x11e809970 <col:11, col:12> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x11e809958 <col:11, col:12> 'char' <LValueToRValue>
|   |     | |   `-UnaryOperator 0x11e809928 <col:11, col:12> 'char' lvalue prefix '*' cannot overflow
|   |     | |     `-ImplicitCastExpr 0x11e809910 <col:12> 'char *' <LValueToRValue>
|   |     | |       `-DeclRefExpr 0x11e8098f0 <col:12> 'char *' lvalue Var 0x11e128498 'nbeg' 'char *'
|   |     | `-CharacterLiteral 0x11e809940 <col:20> 'int' 47
|   |     `-CompoundStmt 0x11e8099e8 <line:24:2, line:27:2>
|   |       |-UnaryOperator 0x11e8099c8 <line:25:4, col:8> 'char *' postfix '++'
|   |       | `-DeclRefExpr 0x11e8099a8 <col:4> 'char *' lvalue Var 0x11e128498 'nbeg' 'char *'
|   |       `-BreakStmt 0x11e8099e0 <line:26:4>
|   |-IfStmt 0x11e809ba0 <line:28:3, line:29:12>
|   | |-BinaryOperator 0x11e809b20 <line:28:7, col:16> 'int' '=='
|   | | |-ImplicitCastExpr 0x11e809b08 <col:7, col:8> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x11e809af0 <col:7, col:8> 'char' <LValueToRValue>
|   | | |   `-UnaryOperator 0x11e809ab8 <col:7, col:8> 'char' lvalue prefix '*' cannot overflow
|   | | |     `-ImplicitCastExpr 0x11e809aa0 <col:8> 'char *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x11e809a80 <col:8> 'char *' lvalue Var 0x11e128498 'nbeg' 'char *'
|   | | `-IntegerLiteral 0x11e809ad0 <col:16> 'int' 0
|   | `-ReturnStmt 0x11e809b90 <line:29:5, col:12>
|   |   `-ImplicitCastExpr 0x11e809b78 <col:12> 'int' <PointerToIntegral>
|   |     `-ImplicitCastExpr 0x11e809b60 <col:12> 'char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x11e809b40 <col:12> 'char *' lvalue ParmVar 0x11e1280d8 'name' 'char *'
|   |-ForStmt 0x11e809e68 <line:31:3, line:33:12>
|   | |-BinaryOperator 0x11e809c98 <line:31:8, col:27> 'char *' ','
|   | | |-BinaryOperator 0x11e809c00 <col:8, col:16> 'int' '='
|   | | | |-DeclRefExpr 0x11e809bc0 <col:8> 'int' lvalue Var 0x11e1283d0 'ndirs' 'int'
|   | | | `-IntegerLiteral 0x11e809be0 <col:16> 'int' 0
|   | | `-BinaryOperator 0x11e809c78 <col:19, col:27> 'char *' '='
|   | |   |-DeclRefExpr 0x11e809c20 <col:19> 'char *' lvalue Var 0x11e128598 'ntail' 'char *'
|   | |   `-ImplicitCastExpr 0x11e809c60 <col:27> 'char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x11e809c40 <col:27> 'char *' lvalue Var 0x11e128498 'nbeg' 'char *'
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x11e809d08 <col:33, col:34> 'char' <LValueToRValue>
|   | | `-UnaryOperator 0x11e809cf0 <col:33, col:34> 'char' lvalue prefix '*' cannot overflow
|   | |   `-ImplicitCastExpr 0x11e809cd8 <col:34> 'char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x11e809cb8 <col:34> 'char *' lvalue Var 0x11e128598 'ntail' 'char *'
|   | |-UnaryOperator 0x11e809d40 <col:41, col:46> 'char *' postfix '++'
|   | | `-DeclRefExpr 0x11e809d20 <col:41> 'char *' lvalue Var 0x11e128598 'ntail' 'char *'
|   | `-IfStmt 0x11e809e48 <line:32:5, line:33:12>
|   |   |-BinaryOperator 0x11e809df0 <line:32:9, col:19> 'int' '=='
|   |   | |-ImplicitCastExpr 0x11e809dd8 <col:9, col:10> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x11e809dc0 <col:9, col:10> 'char' <LValueToRValue>
|   |   | |   `-UnaryOperator 0x11e809d90 <col:9, col:10> 'char' lvalue prefix '*' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x11e809d78 <col:10> 'char *' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x11e809d58 <col:10> 'char *' lvalue Var 0x11e128598 'ntail' 'char *'
|   |   | `-CharacterLiteral 0x11e809da8 <col:19> 'int' 47
|   |   `-UnaryOperator 0x11e809e30 <line:33:7, col:12> 'int' postfix '++'
|   |     `-DeclRefExpr 0x11e809e10 <col:7> 'int' lvalue Var 0x11e1283d0 'ndirs' 'int'
|   |-IfStmt 0x11e809f98 <line:34:3, line:35:12>
|   | |-BinaryOperator 0x11e809f18 <line:34:7, col:15> 'int' contains-errors '<'
|   | | |-DeclRefExpr 0x11e809ea0 <col:7> 'int' lvalue Var 0x11e1283d0 'ndirs' 'int'
|   | | `-RecoveryExpr 0x11e809ef8 <col:15> '<dependent type>' contains-errors lvalue
|   | `-ReturnStmt 0x11e809f88 <line:35:5, col:12>
|   |   `-ImplicitCastExpr 0x11e809f70 <col:12> 'int' <PointerToIntegral>
|   |     `-ImplicitCastExpr 0x11e809f58 <col:12> 'char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x11e809f38 <col:12> 'char *' lvalue ParmVar 0x11e1280d8 'name' 'char *'
|   |-ForStmt 0x11e80a408 <line:37:3, line:43:5>
|   | |-BinaryOperator 0x11e80a190 <line:37:8, col:47> 'char *' '='
|   | | |-DeclRefExpr 0x11e809fb8 <col:8> 'char *' lvalue Var 0x11e128598 'ntail' 'char *'
|   | | `-ConditionalOperator 0x11e80a160 <col:16, col:47> 'char *'
|   | |   |-ParenExpr 0x11e80a090 <col:16, col:29> 'int'
|   | |   | `-BinaryOperator 0x11e80a070 <col:17, col:26> 'int' '=='
|   | |   |   |-ImplicitCastExpr 0x11e80a058 <col:17, col:18> 'int' <IntegralCast>
|   | |   |   | `-ImplicitCastExpr 0x11e80a040 <col:17, col:18> 'char' <LValueToRValue>
|   | |   |   |   `-UnaryOperator 0x11e80a010 <col:17, col:18> 'char' lvalue prefix '*' cannot overflow
|   | |   |   |     `-ImplicitCastExpr 0x11e809ff8 <col:18> 'char *' <LValueToRValue>
|   | |   |   |       `-DeclRefExpr 0x11e809fd8 <col:18> 'char *' lvalue Var 0x11e128518 'nend' 'char *'
|   | |   |   `-CharacterLiteral 0x11e80a028 <col:26> 'int' 47
|   | |   |-ImplicitCastExpr 0x11e80a148 <col:33> 'char *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x11e80a0b0 <col:33> 'char *' lvalue Var 0x11e128518 'nend' 'char *'
|   | |   `-BinaryOperator 0x11e80a128 <col:40, col:47> 'char *' '-'
|   | |     |-ImplicitCastExpr 0x11e80a110 <col:40> 'char *' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x11e80a0d0 <col:40> 'char *' lvalue Var 0x11e128518 'nend' 'char *'
|   | |     `-IntegerLiteral 0x11e80a0f0 <col:47> 'int' 1
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x11e80a220 <col:50, col:58> 'int' '>'
|   | | |-ImplicitCastExpr 0x11e80a1f0 <col:50> 'char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x11e80a1b0 <col:50> 'char *' lvalue Var 0x11e128598 'ntail' 'char *'
|   | | `-ImplicitCastExpr 0x11e80a208 <col:58> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x11e80a1d0 <col:58> 'char *' lvalue Var 0x11e128498 'nbeg' 'char *'
|   | |-UnaryOperator 0x11e80a260 <col:64, col:69> 'char *' postfix '--'
|   | | `-DeclRefExpr 0x11e80a240 <col:64> 'char *' lvalue Var 0x11e128598 'ntail' 'char *'
|   | `-CompoundStmt 0x11e80a3f0 <line:38:5, line:43:5>
|   |   `-IfStmt 0x11e80a3d0 <line:41:7, line:42:2>
|   |     |-BinaryOperator 0x11e80a3a8 <line:41:11, col:20> 'int' contains-errors '=='
|   |     | |-RecoveryExpr 0x11e80a388 <col:11> '<dependent type>' contains-errors lvalue
|   |     | `-IntegerLiteral 0x11e80a348 <col:20> 'int' 0
|   |     `-BreakStmt 0x11e80a3c8 <line:42:2>
|   |-IfStmt 0x11e80a530 <line:44:3, line:45:12>
|   | |-BinaryOperator 0x11e80a4b0 <line:44:7, col:16> 'int' '=='
|   | | |-ImplicitCastExpr 0x11e80a480 <col:7> 'char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x11e80a440 <col:7> 'char *' lvalue Var 0x11e128598 'ntail' 'char *'
|   | | `-ImplicitCastExpr 0x11e80a498 <col:16> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x11e80a460 <col:16> 'char *' lvalue Var 0x11e128498 'nbeg' 'char *'
|   | `-ReturnStmt 0x11e80a520 <line:45:5, col:12>
|   |   `-ImplicitCastExpr 0x11e80a508 <col:12> 'int' <PointerToIntegral>
|   |     `-ImplicitCastExpr 0x11e80a4f0 <col:12> 'char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x11e80a4d0 <col:12> 'char *' lvalue ParmVar 0x11e1280d8 'name' 'char *'
|   |-BinaryOperator 0x11e80a618 <line:48:3, col:18> 'int' '='
|   | |-DeclRefExpr 0x11e80a550 <col:3> 'int' lvalue Var 0x11e128350 'nlen' 'int'
|   | `-ImplicitCastExpr 0x11e80a600 <col:10, col:18> 'int' <IntegralCast>
|   |   `-BinaryOperator 0x11e80a5e0 <col:10, col:18> 'long' '-'
|   |     |-ImplicitCastExpr 0x11e80a5b0 <col:10> 'char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x11e80a570 <col:10> 'char *' lvalue Var 0x11e128598 'ntail' 'char *'
|   |     `-ImplicitCastExpr 0x11e80a5c8 <col:18> 'char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x11e80a590 <col:18> 'char *' lvalue Var 0x11e128498 'nbeg' 'char *'
|   |-IfStmt 0x11e80a710 <line:49:3, line:50:12>
|   | |-BinaryOperator 0x11e80a690 <line:49:7, col:15> 'int' '<='
|   | | |-ImplicitCastExpr 0x11e80a678 <col:7> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x11e80a638 <col:7> 'int' lvalue Var 0x11e128350 'nlen' 'int'
|   | | `-IntegerLiteral 0x11e80a658 <col:15> 'int' 3
|   | `-ReturnStmt 0x11e80a700 <line:50:5, col:12>
|   |   `-ImplicitCastExpr 0x11e80a6e8 <col:12> 'int' <PointerToIntegral>
|   |     `-ImplicitCastExpr 0x11e80a6d0 <col:12> 'char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x11e80a6b0 <col:12> 'char *' lvalue ParmVar 0x11e1280d8 'name' 'char *'
|   |-BinaryOperator 0x11e80a7b0 <line:52:3, col:13> 'char' '='
|   | |-UnaryOperator 0x11e80a768 <col:3, col:8> 'char' lvalue prefix '*' cannot overflow
|   | | `-UnaryOperator 0x11e80a750 <col:4, col:8> 'char *' postfix '++'
|   | |   `-DeclRefExpr 0x11e80a730 <col:4> 'char *' lvalue Var 0x11e128498 'nbeg' 'char *'
|   | `-ImplicitCastExpr 0x11e80a798 <col:13> 'char' <IntegralCast>
|   |   `-CharacterLiteral 0x11e80a780 <col:13> 'int' 46
|   |-BinaryOperator 0x11e80a850 <line:53:3, col:13> 'char' '='
|   | |-UnaryOperator 0x11e80a808 <col:3, col:8> 'char' lvalue prefix '*' cannot overflow
|   | | `-UnaryOperator 0x11e80a7f0 <col:4, col:8> 'char *' postfix '++'
|   | |   `-DeclRefExpr 0x11e80a7d0 <col:4> 'char *' lvalue Var 0x11e128498 'nbeg' 'char *'
|   | `-ImplicitCastExpr 0x11e80a838 <col:13> 'char' <IntegralCast>
|   |   `-CharacterLiteral 0x11e80a820 <col:13> 'int' 46
|   |-BinaryOperator 0x11e80a8f0 <line:54:3, col:13> 'char' '='
|   | |-UnaryOperator 0x11e80a8a8 <col:3, col:8> 'char' lvalue prefix '*' cannot overflow
|   | | `-UnaryOperator 0x11e80a890 <col:4, col:8> 'char *' postfix '++'
|   | |   `-DeclRefExpr 0x11e80a870 <col:4> 'char *' lvalue Var 0x11e128498 'nbeg' 'char *'
|   | `-ImplicitCastExpr 0x11e80a8d8 <col:13> 'char' <IntegralCast>
|   |   `-CharacterLiteral 0x11e80a8c0 <col:13> 'int' 46
|   |-BinaryOperator 0x11e80a9d8 <line:56:3, col:17> 'int' '='
|   | |-DeclRefExpr 0x11e80a910 <col:3> 'int' lvalue Var 0x11e128350 'nlen' 'int'
|   | `-ImplicitCastExpr 0x11e80a9c0 <col:10, col:17> 'int' <IntegralCast>
|   |   `-BinaryOperator 0x11e80a9a0 <col:10, col:17> 'long' '-'
|   |     |-ImplicitCastExpr 0x11e80a970 <col:10> 'char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x11e80a930 <col:10> 'char *' lvalue Var 0x11e128518 'nend' 'char *'
|   |     `-ImplicitCastExpr 0x11e80a988 <col:17> 'char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x11e80a950 <col:17> 'char *' lvalue Var 0x11e128598 'ntail' 'char *'
|   |-CallExpr 0x11e80add8 <line:57:3, col:29> 'void *'
|   | |-ImplicitCastExpr 0x11e80adc0 <col:3> 'void *(*)(void *, const void *, unsigned long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x11e80acc8 <col:3> 'void *(void *, const void *, unsigned long)' Function 0x11e80aa78 'memmove' 'void *(void *, const void *, unsigned long)'
|   | |-ImplicitCastExpr 0x11e80ae28 <col:12> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x11e80ae10 <col:12> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x11e80ace8 <col:12> 'char *' lvalue Var 0x11e128498 'nbeg' 'char *'
|   | |-ImplicitCastExpr 0x11e80ae58 <col:18> 'const void *' <BitCast>
|   | | `-ImplicitCastExpr 0x11e80ae40 <col:18> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x11e80ad08 <col:18> 'char *' lvalue Var 0x11e128598 'ntail' 'char *'
|   | `-ImplicitCastExpr 0x11e80ae88 <col:25> 'unsigned long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x11e80ae70 <col:25> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x11e80ad28 <col:25> 'int' lvalue Var 0x11e128350 'nlen' 'int'
|   |-BinaryOperator 0x11e80af60 <line:58:3, col:16> 'char' '='
|   | |-ArraySubscriptExpr 0x11e80af10 <col:3, col:12> 'char' lvalue
|   | | |-ImplicitCastExpr 0x11e80aee0 <col:3> 'char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x11e80aea0 <col:3> 'char *' lvalue Var 0x11e128498 'nbeg' 'char *'
|   | | `-ImplicitCastExpr 0x11e80aef8 <col:8> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x11e80aec0 <col:8> 'int' lvalue Var 0x11e128350 'nlen' 'int'
|   | `-ImplicitCastExpr 0x11e80af48 <col:16> 'char' <IntegralCast>
|   |   `-CharacterLiteral 0x11e80af30 <col:16> 'int' 0
|   `-ReturnStmt 0x11e80afd0 <line:60:3, col:10>
|     `-ImplicitCastExpr 0x11e80afb8 <col:10> 'int' <PointerToIntegral>
|       `-ImplicitCastExpr 0x11e80afa0 <col:10> 'char *' <LValueToRValue>
|         `-DeclRefExpr 0x11e80af80 <col:10> 'char *' lvalue ParmVar 0x11e1280d8 'name' 'char *'
|-FunctionDecl 0x11e140df0 <line:9:28> col:28 implicit used strlen 'unsigned long (const char *)' extern
| |-ParmVarDecl 0x11e140ef0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x11e140e98 <<invalid sloc>> Implicit 902
`-FunctionDecl 0x11e80aa78 <line:57:3> col:3 implicit used memmove 'void *(void *, const void *, unsigned long)' extern
  |-ParmVarDecl 0x11e80ab78 <<invalid sloc>> <invalid sloc> 'void *'
  |-ParmVarDecl 0x11e80abe0 <<invalid sloc>> <invalid sloc> 'const void *'
  |-ParmVarDecl 0x11e80ac48 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x11e80ab20 <<invalid sloc>> Implicit 884
