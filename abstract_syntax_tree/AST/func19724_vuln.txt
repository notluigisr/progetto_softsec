TranslationUnitDecl 0x14a855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x14a8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x14a855bd0 '__int128'
|-TypedefDecl 0x14a856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x14a855bf0 'unsigned __int128'
|-TypedefDecl 0x14a926230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x14a926000 'struct __NSConstantString_tag'
|   `-Record 0x14a856580 '__NSConstantString_tag'
|-TypedefDecl 0x14a926298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x14a855d90 '__SVInt8_t'
|-TypedefDecl 0x14a926300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x14a855db0 '__SVInt16_t'
|-TypedefDecl 0x14a926368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x14a855dd0 '__SVInt32_t'
|-TypedefDecl 0x14a9263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x14a855df0 '__SVInt64_t'
|-TypedefDecl 0x14a926438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x14a855e10 '__SVUint8_t'
|-TypedefDecl 0x14a9264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x14a855e30 '__SVUint16_t'
|-TypedefDecl 0x14a926508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x14a855e50 '__SVUint32_t'
|-TypedefDecl 0x14a926570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x14a855e70 '__SVUint64_t'
|-TypedefDecl 0x14a9265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x14a855e90 '__SVFloat16_t'
|-TypedefDecl 0x14a926640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x14a855eb0 '__SVFloat32_t'
|-TypedefDecl 0x14a9266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x14a855ed0 '__SVFloat64_t'
|-TypedefDecl 0x14a926710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x14a855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x14a926778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x14a855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x14a9267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x14a855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x14a926848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x14a855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x14a9268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x14a855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x14a926918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x14a855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x14a926980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x14a855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x14a9269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x14a855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x14a926a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x14a855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x14a926ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x14a856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x14a926b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x14a856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x14a926b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x14a856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x14a926bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x14a856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x14a926c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x14a856090 '__clang_svint8x3_t'
|-TypedefDecl 0x14a926cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x14a8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x14a926d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x14a8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x14a926d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x14a8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x14a926df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x14a856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x14a926e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x14a856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x14a926ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x14a856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x14a926f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x14a856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x14a926f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x14a856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x14a927800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x14a8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x14a927868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x14a8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x14a9278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x14a8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x14a927938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x14a856210 '__clang_svint8x4_t'
|-TypedefDecl 0x14a9279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x14a856230 '__clang_svint16x4_t'
|-TypedefDecl 0x14a927a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x14a856250 '__clang_svint32x4_t'
|-TypedefDecl 0x14a927a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x14a856270 '__clang_svint64x4_t'
|-TypedefDecl 0x14a927ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x14a856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x14a927b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x14a8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x14a927ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x14a8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x14a927c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x14a8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x14a927c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x14a856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x14a927ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x14a856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x14a927d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x14a856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x14a927db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x14a856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x14a927e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x14a856390 '__SVBool_t'
|-TypedefDecl 0x14a927e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x14a8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x14a927ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x14a8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x14a927f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x14a8563f0 '__SVCount_t'
|-TypedefDecl 0x14a927ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x14a927fb0 'char *'
|   `-BuiltinType 0x14a8556b0 'char'
|-TypedefDecl 0x14a928068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x14a927fb0 'char *'
|   `-BuiltinType 0x14a8556b0 'char'
|-FunctionDecl 0x14a928258 <dataset_diviso_filec/func19724_vuln.c:1:1, line:44:1> line:1:14 invalid decode_text_string 'char *(const char *, int)' static
| |-ParmVarDecl 0x14a9280d8 <col:33, col:45> col:45 used str 'const char *'
| |-ParmVarDecl 0x14a928170 <col:50, col:57> col:57 invalid str_len 'int'
| `-CompoundStmt 0x14a944d68 <line:2:1, line:44:1>
|   |-DeclStmt 0x14a928538 <line:3:5, col:45>
|   | |-VarDecl 0x14a928328 <col:5, col:11> col:11 used idx 'int'
|   | |-VarDecl 0x14a9283a8 <col:5, col:16> col:16 used is_hex 'int'
|   | |-VarDecl 0x14a928428 <col:5, col:24> col:24 used is_utf16be 'int'
|   | `-VarDecl 0x14a9284a8 <col:5, col:36> col:36 used ascii_idx 'int'
|   |-DeclStmt 0x14a9287d8 <line:4:5, col:34>
|   | |-VarDecl 0x14a928568 <col:5, col:11> col:11 used ascii 'char *'
|   | `-VarDecl 0x14a928670 <col:5, col:33> col:18 used hex_buf 'char[5]' cinit
|   |   `-InitListExpr 0x14a928750 <col:31, col:33> 'char[5]'
|   |     |-array_filler: ImplicitValueInitExpr 0x14a9287b0 <<invalid sloc>> 'char'
|   |     `-ImplicitCastExpr 0x14a928790 <col:32> 'char' <IntegralCast>
|   |       `-IntegerLiteral 0x14a9286d8 <col:32> 'int' 0
|   |-BinaryOperator 0x14a941900 <line:6:5, col:45> 'int' '='
|   | |-DeclRefExpr 0x14a941800 <col:5> 'int' lvalue Var 0x14a9283a8 'is_hex' 'int'
|   | `-BinaryOperator 0x14a9418e0 <col:14, col:45> 'int' '='
|   |   |-DeclRefExpr 0x14a941820 <col:14> 'int' lvalue Var 0x14a928428 'is_utf16be' 'int'
|   |   `-BinaryOperator 0x14a9418c0 <col:27, col:45> 'int' '='
|   |     |-DeclRefExpr 0x14a941840 <col:27> 'int' lvalue Var 0x14a928328 'idx' 'int'
|   |     `-BinaryOperator 0x14a9418a0 <col:33, col:45> 'int' '='
|   |       |-DeclRefExpr 0x14a941860 <col:33> 'int' lvalue Var 0x14a9284a8 'ascii_idx' 'int'
|   |       `-IntegerLiteral 0x14a941880 <col:45> 'int' 0
|   |-IfStmt 0x14a9432d8 <line:9:5, line:19:5> has_else
|   | |-BinaryOperator 0x14a9419e0 <line:9:9, col:19> 'int' '=='
|   | | |-ImplicitCastExpr 0x14a9419c8 <col:9, col:14> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x14a9419b0 <col:9, col:14> 'char' <LValueToRValue>
|   | | |   `-ArraySubscriptExpr 0x14a941978 <col:9, col:14> 'const char' lvalue
|   | | |     |-ImplicitCastExpr 0x14a941960 <col:9> 'const char *' <LValueToRValue>
|   | | |     | `-DeclRefExpr 0x14a941920 <col:9> 'const char *' lvalue ParmVar 0x14a9280d8 'str' 'const char *'
|   | | |     `-IntegerLiteral 0x14a941940 <col:13> 'int' 0
|   | | `-CharacterLiteral 0x14a941998 <col:19> 'int' 40
|   | |-CompoundStmt 0x14a9430f8 <line:10:5, line:14:5>
|   | | |-BinaryOperator 0x14a9423a8 <line:11:9, col:39> 'char *' '='
|   | | | |-DeclRefExpr 0x14a941a00 <col:9> 'char *' lvalue Var 0x14a928568 'ascii' 'char *'
|   | | | `-ImplicitCastExpr 0x14a942390 <col:17, col:39> 'char *' <BitCast>
|   | | |   `-CallExpr 0x14a942368 <col:17, col:39> 'void *'
|   | | |     |-ImplicitCastExpr 0x14a942350 <col:17> 'void *(*)(unsigned long)' <FunctionToPointerDecay>
|   | | |     | `-DeclRefExpr 0x14a942020 <col:17> 'void *(unsigned long)' Function 0x14a941e80 'malloc' 'void *(unsigned long)'
|   | | |     `-BinaryOperator 0x14a942300 <col:24, col:38> 'unsigned long' '+'
|   | | |       |-CallExpr 0x14a942288 <col:24, col:34> 'unsigned long'
|   | | |       | |-ImplicitCastExpr 0x14a942270 <col:24> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   | | |       | | `-DeclRefExpr 0x14a9421e8 <col:24> 'unsigned long (const char *)' Function 0x14a942078 'strlen' 'unsigned long (const char *)'
|   | | |       | `-ImplicitCastExpr 0x14a9422b0 <col:31> 'const char *' <LValueToRValue>
|   | | |       |   `-DeclRefExpr 0x14a942208 <col:31> 'const char *' lvalue ParmVar 0x14a9280d8 'str' 'const char *'
|   | | |       `-ImplicitCastExpr 0x14a9422e8 <col:38> 'unsigned long' <IntegralCast>
|   | | |         `-IntegerLiteral 0x14a9422c8 <col:38> 'int' 1
|   | | |-CallExpr 0x14a943048 <line:12:9, col:44> 'char *'
|   | | | |-ImplicitCastExpr 0x14a943030 <col:9> 'char *(*)(char *, const char *, unsigned long)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x14a942668 <col:9> 'char *(char *, const char *, unsigned long)' Function 0x14a942418 'strncpy' 'char *(char *, const char *, unsigned long)'
|   | | | |-ImplicitCastExpr 0x14a943080 <col:17> 'char *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x14a942688 <col:17> 'char *' lvalue Var 0x14a928568 'ascii' 'char *'
|   | | | |-ImplicitCastExpr 0x14a943098 <col:24> 'const char *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x14a9426a8 <col:24> 'const char *' lvalue ParmVar 0x14a9280d8 'str' 'const char *'
|   | | | `-BinaryOperator 0x14a9427b0 <col:29, col:43> 'unsigned long' '+'
|   | | |   |-CallExpr 0x14a942738 <col:29, col:39> 'unsigned long'
|   | | |   | |-ImplicitCastExpr 0x14a942720 <col:29> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   | | |   | | `-DeclRefExpr 0x14a9426c8 <col:29> 'unsigned long (const char *)' Function 0x14a942078 'strlen' 'unsigned long (const char *)'
|   | | |   | `-ImplicitCastExpr 0x14a942760 <col:36> 'const char *' <LValueToRValue>
|   | | |   |   `-DeclRefExpr 0x14a9426e8 <col:36> 'const char *' lvalue ParmVar 0x14a9280d8 'str' 'const char *'
|   | | |   `-ImplicitCastExpr 0x14a942798 <col:43> 'unsigned long' <IntegralCast>
|   | | |     `-IntegerLiteral 0x14a942778 <col:43> 'int' 1
|   | | `-ReturnStmt 0x14a9430e8 <line:13:9, col:16>
|   | |   `-ImplicitCastExpr 0x14a9430d0 <col:16> 'char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x14a9430b0 <col:16> 'char *' lvalue Var 0x14a928568 'ascii' 'char *'
|   | `-IfStmt 0x14a9432b8 <line:15:10, line:19:5>
|   |   |-BinaryOperator 0x14a9431e0 <line:15:14, col:24> 'int' '=='
|   |   | |-ImplicitCastExpr 0x14a9431c8 <col:14, col:19> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x14a9431b0 <col:14, col:19> 'char' <LValueToRValue>
|   |   | |   `-ArraySubscriptExpr 0x14a943178 <col:14, col:19> 'const char' lvalue
|   |   | |     |-ImplicitCastExpr 0x14a943160 <col:14> 'const char *' <LValueToRValue>
|   |   | |     | `-DeclRefExpr 0x14a943120 <col:14> 'const char *' lvalue ParmVar 0x14a9280d8 'str' 'const char *'
|   |   | |     `-IntegerLiteral 0x14a943140 <col:18> 'int' 0
|   |   | `-CharacterLiteral 0x14a943198 <col:24> 'int' 60
|   |   `-CompoundStmt 0x14a943298 <line:16:5, line:19:5>
|   |     |-BinaryOperator 0x14a943240 <line:17:9, col:18> 'int' '='
|   |     | |-DeclRefExpr 0x14a943200 <col:9> 'int' lvalue Var 0x14a9283a8 'is_hex' 'int'
|   |     | `-IntegerLiteral 0x14a943220 <col:18> 'int' 1
|   |     `-UnaryOperator 0x14a943280 <line:18:9, col:11> 'int' prefix '++'
|   |       `-DeclRefExpr 0x14a943260 <col:11> 'int' lvalue Var 0x14a928328 'idx' 'int'
|   |-IfStmt 0x14a943aa0 <line:22:5, line:30:14> has_else
|   | |-BinaryOperator 0x14a943948 <line:22:9, line:24:50> 'int' contains-errors '&&'
|   | | |-BinaryOperator 0x14a9437d0 <line:22:9, line:24:27> 'int' contains-errors '&&'
|   | | | |-BinaryOperator 0x14a943658 <line:22:9, line:23:48> 'int' contains-errors '&&'
|   | | | | |-BinaryOperator 0x14a9434e0 <line:22:9, line:23:25> 'int' contains-errors '&&'
|   | | | | | |-BinaryOperator 0x14a9433a8 <line:22:9, col:31> 'int' contains-errors '&&'
|   | | | | | | |-DeclRefExpr 0x14a943308 <col:9> 'int' lvalue Var 0x14a9283a8 'is_hex' 'int'
|   | | | | | | `-ParenExpr 0x14a943388 <col:19, col:31> 'int' contains-errors
|   | | | | | |   `-BinaryOperator 0x14a943368 <col:20, col:30> 'int' contains-errors '>'
|   | | | | | |     |-RecoveryExpr 0x14a943328 <col:20> '<dependent type>' contains-errors lvalue
|   | | | | | |     `-IntegerLiteral 0x14a943348 <col:30> 'int' 5
|   | | | | | `-ParenExpr 0x14a9434c0 <line:23:9, col:25> 'int'
|   | | | | |   `-BinaryOperator 0x14a9434a0 <col:10, col:22> 'int' '=='
|   | | | | |     |-ImplicitCastExpr 0x14a943488 <col:10, col:17> 'int' <IntegralCast>
|   | | | | |     | `-ImplicitCastExpr 0x14a943470 <col:10, col:17> 'char' <LValueToRValue>
|   | | | | |     |   `-ArraySubscriptExpr 0x14a943438 <col:10, col:17> 'const char' lvalue
|   | | | | |     |     |-ImplicitCastExpr 0x14a943408 <col:10> 'const char *' <LValueToRValue>
|   | | | | |     |     | `-DeclRefExpr 0x14a9433c8 <col:10> 'const char *' lvalue ParmVar 0x14a9280d8 'str' 'const char *'
|   | | | | |     |     `-ImplicitCastExpr 0x14a943420 <col:14> 'int' <LValueToRValue>
|   | | | | |     |       `-DeclRefExpr 0x14a9433e8 <col:14> 'int' lvalue Var 0x14a928328 'idx' 'int'
|   | | | | |     `-CharacterLiteral 0x14a943458 <col:22> 'int' 70
|   | | | | `-ParenExpr 0x14a943638 <col:30, col:48> 'int'
|   | | | |   `-BinaryOperator 0x14a943618 <col:31, col:45> 'int' '=='
|   | | | |     |-ImplicitCastExpr 0x14a943600 <col:31, col:40> 'int' <IntegralCast>
|   | | | |     | `-ImplicitCastExpr 0x14a9435e8 <col:31, col:40> 'char' <LValueToRValue>
|   | | | |     |   `-ArraySubscriptExpr 0x14a9435b0 <col:31, col:40> 'const char' lvalue
|   | | | |     |     |-ImplicitCastExpr 0x14a943598 <col:31> 'const char *' <LValueToRValue>
|   | | | |     |     | `-DeclRefExpr 0x14a943500 <col:31> 'const char *' lvalue ParmVar 0x14a9280d8 'str' 'const char *'
|   | | | |     |     `-BinaryOperator 0x14a943578 <col:35, col:39> 'int' '+'
|   | | | |     |       |-ImplicitCastExpr 0x14a943560 <col:35> 'int' <LValueToRValue>
|   | | | |     |       | `-DeclRefExpr 0x14a943520 <col:35> 'int' lvalue Var 0x14a928328 'idx' 'int'
|   | | | |     |       `-IntegerLiteral 0x14a943540 <col:39> 'int' 1
|   | | | |     `-CharacterLiteral 0x14a9435d0 <col:45> 'int' 69
|   | | | `-ParenExpr 0x14a9437b0 <line:24:9, col:27> 'int'
|   | | |   `-BinaryOperator 0x14a943790 <col:10, col:24> 'int' '=='
|   | | |     |-ImplicitCastExpr 0x14a943778 <col:10, col:19> 'int' <IntegralCast>
|   | | |     | `-ImplicitCastExpr 0x14a943760 <col:10, col:19> 'char' <LValueToRValue>
|   | | |     |   `-ArraySubscriptExpr 0x14a943728 <col:10, col:19> 'const char' lvalue
|   | | |     |     |-ImplicitCastExpr 0x14a943710 <col:10> 'const char *' <LValueToRValue>
|   | | |     |     | `-DeclRefExpr 0x14a943678 <col:10> 'const char *' lvalue ParmVar 0x14a9280d8 'str' 'const char *'
|   | | |     |     `-BinaryOperator 0x14a9436f0 <col:14, col:18> 'int' '+'
|   | | |     |       |-ImplicitCastExpr 0x14a9436d8 <col:14> 'int' <LValueToRValue>
|   | | |     |       | `-DeclRefExpr 0x14a943698 <col:14> 'int' lvalue Var 0x14a928328 'idx' 'int'
|   | | |     |       `-IntegerLiteral 0x14a9436b8 <col:18> 'int' 2
|   | | |     `-CharacterLiteral 0x14a943748 <col:24> 'int' 70
|   | | `-ParenExpr 0x14a943928 <col:32, col:50> 'int'
|   | |   `-BinaryOperator 0x14a943908 <col:33, col:47> 'int' '=='
|   | |     |-ImplicitCastExpr 0x14a9438f0 <col:33, col:42> 'int' <IntegralCast>
|   | |     | `-ImplicitCastExpr 0x14a9438d8 <col:33, col:42> 'char' <LValueToRValue>
|   | |     |   `-ArraySubscriptExpr 0x14a9438a0 <col:33, col:42> 'const char' lvalue
|   | |     |     |-ImplicitCastExpr 0x14a943888 <col:33> 'const char *' <LValueToRValue>
|   | |     |     | `-DeclRefExpr 0x14a9437f0 <col:33> 'const char *' lvalue ParmVar 0x14a9280d8 'str' 'const char *'
|   | |     |     `-BinaryOperator 0x14a943868 <col:37, col:41> 'int' '+'
|   | |     |       |-ImplicitCastExpr 0x14a943850 <col:37> 'int' <LValueToRValue>
|   | |     |       | `-DeclRefExpr 0x14a943810 <col:37> 'int' lvalue Var 0x14a928328 'idx' 'int'
|   | |     |       `-IntegerLiteral 0x14a943830 <col:41> 'int' 3
|   | |     `-CharacterLiteral 0x14a9438c0 <col:47> 'int' 70
|   | |-CompoundStmt 0x14a943a38 <line:25:5, line:28:5>
|   | | |-BinaryOperator 0x14a9439a8 <line:26:9, col:22> 'int' '='
|   | | | |-DeclRefExpr 0x14a943968 <col:9> 'int' lvalue Var 0x14a928428 'is_utf16be' 'int'
|   | | | `-IntegerLiteral 0x14a943988 <col:22> 'int' 1
|   | | `-CompoundAssignOperator 0x14a943a08 <line:27:9, col:16> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |   |-DeclRefExpr 0x14a9439c8 <col:9> 'int' lvalue Var 0x14a928328 'idx' 'int'
|   | |   `-IntegerLiteral 0x14a9439e8 <col:16> 'int' 4
|   | `-ReturnStmt 0x14a943a90 <line:30:7, col:14>
|   |   `-RecoveryExpr 0x14a943a70 <col:14> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x14a943b70 <line:33:5, col:27> 'char *' contains-errors '='
|   | |-DeclRefExpr 0x14a943ad0 <col:5> 'char *' lvalue Var 0x14a928568 'ascii' 'char *'
|   | `-CallExpr 0x14a943b48 <col:13, col:27> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x14a943af0 <col:13> 'void *(unsigned long)' Function 0x14a941e80 'malloc' 'void *(unsigned long)'
|   |   `-RecoveryExpr 0x14a943b10 <col:20> '<dependent type>' contains-errors lvalue
|   |-ForStmt 0x14a944ce8 <line:34:5, line:41:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x14a943bd0 <line:34:13, col:17> 'int' contains-errors '<'
|   | | |-DeclRefExpr 0x14a943b90 <col:13> 'int' lvalue Var 0x14a928328 'idx' 'int'
|   | | `-RecoveryExpr 0x14a943bb0 <col:17> '<dependent type>' contains-errors lvalue
|   | |-UnaryOperator 0x14a943c10 <col:26, col:28> 'int' prefix '++'
|   | | `-DeclRefExpr 0x14a943bf0 <col:28> 'int' lvalue Var 0x14a928328 'idx' 'int'
|   | `-CompoundStmt 0x14a944cb0 <line:35:5, line:41:5>
|   |   |-BinaryOperator 0x14a943d48 <line:36:9, col:31> 'char' '='
|   |   | |-ArraySubscriptExpr 0x14a943c80 <col:9, col:18> 'char' lvalue
|   |   | | |-ImplicitCastExpr 0x14a943c68 <col:9> 'char *' <ArrayToPointerDecay>
|   |   | | | `-DeclRefExpr 0x14a943c28 <col:9> 'char[5]' lvalue Var 0x14a928670 'hex_buf' 'char[5]'
|   |   | | `-IntegerLiteral 0x14a943c48 <col:17> 'int' 0
|   |   | `-ImplicitCastExpr 0x14a943d30 <col:22, col:31> 'char' <LValueToRValue>
|   |   |   `-ArraySubscriptExpr 0x14a943d10 <col:22, col:31> 'const char' lvalue
|   |   |     |-ImplicitCastExpr 0x14a943cf8 <col:22> 'const char *' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x14a943ca0 <col:22> 'const char *' lvalue ParmVar 0x14a9280d8 'str' 'const char *'
|   |   |     `-UnaryOperator 0x14a943ce0 <col:26, col:29> 'int' postfix '++'
|   |   |       `-DeclRefExpr 0x14a943cc0 <col:26> 'int' lvalue Var 0x14a928328 'idx' 'int'
|   |   |-BinaryOperator 0x14a943e88 <line:37:9, col:31> 'char' '='
|   |   | |-ArraySubscriptExpr 0x14a943dc0 <col:9, col:18> 'char' lvalue
|   |   | | |-ImplicitCastExpr 0x14a943da8 <col:9> 'char *' <ArrayToPointerDecay>
|   |   | | | `-DeclRefExpr 0x14a943d68 <col:9> 'char[5]' lvalue Var 0x14a928670 'hex_buf' 'char[5]'
|   |   | | `-IntegerLiteral 0x14a943d88 <col:17> 'int' 1
|   |   | `-ImplicitCastExpr 0x14a943e70 <col:22, col:31> 'char' <LValueToRValue>
|   |   |   `-ArraySubscriptExpr 0x14a943e50 <col:22, col:31> 'const char' lvalue
|   |   |     |-ImplicitCastExpr 0x14a943e38 <col:22> 'const char *' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x14a943de0 <col:22> 'const char *' lvalue ParmVar 0x14a9280d8 'str' 'const char *'
|   |   |     `-UnaryOperator 0x14a943e20 <col:26, col:29> 'int' postfix '++'
|   |   |       `-DeclRefExpr 0x14a943e00 <col:26> 'int' lvalue Var 0x14a928328 'idx' 'int'
|   |   |-BinaryOperator 0x14a943fc8 <line:38:9, col:31> 'char' '='
|   |   | |-ArraySubscriptExpr 0x14a943f00 <col:9, col:18> 'char' lvalue
|   |   | | |-ImplicitCastExpr 0x14a943ee8 <col:9> 'char *' <ArrayToPointerDecay>
|   |   | | | `-DeclRefExpr 0x14a943ea8 <col:9> 'char[5]' lvalue Var 0x14a928670 'hex_buf' 'char[5]'
|   |   | | `-IntegerLiteral 0x14a943ec8 <col:17> 'int' 2
|   |   | `-ImplicitCastExpr 0x14a943fb0 <col:22, col:31> 'char' <LValueToRValue>
|   |   |   `-ArraySubscriptExpr 0x14a943f90 <col:22, col:31> 'const char' lvalue
|   |   |     |-ImplicitCastExpr 0x14a943f78 <col:22> 'const char *' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x14a943f20 <col:22> 'const char *' lvalue ParmVar 0x14a9280d8 'str' 'const char *'
|   |   |     `-UnaryOperator 0x14a943f60 <col:26, col:29> 'int' postfix '++'
|   |   |       `-DeclRefExpr 0x14a943f40 <col:26> 'int' lvalue Var 0x14a928328 'idx' 'int'
|   |   |-BinaryOperator 0x14a944720 <line:39:9, col:29> 'char' '='
|   |   | |-ArraySubscriptExpr 0x14a944658 <col:9, col:18> 'char' lvalue
|   |   | | |-ImplicitCastExpr 0x14a944640 <col:9> 'char *' <ArrayToPointerDecay>
|   |   | | | `-DeclRefExpr 0x14a944600 <col:9> 'char[5]' lvalue Var 0x14a928670 'hex_buf' 'char[5]'
|   |   | | `-IntegerLiteral 0x14a944620 <col:17> 'int' 3
|   |   | `-ImplicitCastExpr 0x14a944708 <col:22, col:29> 'char' <LValueToRValue>
|   |   |   `-ArraySubscriptExpr 0x14a9446e8 <col:22, col:29> 'const char' lvalue
|   |   |     |-ImplicitCastExpr 0x14a9446b8 <col:22> 'const char *' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x14a944678 <col:22> 'const char *' lvalue ParmVar 0x14a9280d8 'str' 'const char *'
|   |   |     `-ImplicitCastExpr 0x14a9446d0 <col:26> 'int' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x14a944698 <col:26> 'int' lvalue Var 0x14a928328 'idx' 'int'
|   |   `-BinaryOperator 0x14a944c90 <line:40:9, col:54> 'char' contains-errors '='
|   |     |-ArraySubscriptExpr 0x14a944be8 <col:9, col:26> 'char' lvalue
|   |     | |-ImplicitCastExpr 0x14a944bd0 <col:9> 'char *' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x14a944740 <col:9> 'char *' lvalue Var 0x14a928568 'ascii' 'char *'
|   |     | `-UnaryOperator 0x14a944780 <col:15, col:24> 'int' postfix '++'
|   |     |   `-DeclRefExpr 0x14a944760 <col:15> 'int' lvalue Var 0x14a9284a8 'ascii_idx' 'int'
|   |     `-CallExpr 0x14a944c58 <col:30, col:54> '<dependent type>' contains-errors
|   |       |-DeclRefExpr 0x14a944a98 <col:30> 'long (const char *, char **, int)' Function 0x14a944848 'strtol' 'long (const char *, char **, int)'
|   |       |-DeclRefExpr 0x14a944ab8 <col:37> 'char[5]' lvalue Var 0x14a928670 'hex_buf' 'char[5]'
|   |       |-RecoveryExpr 0x14a944c08 <col:46> '<dependent type>' contains-errors lvalue
|   |       `-IntegerLiteral 0x14a944af0 <col:52> 'int' 16
|   `-ReturnStmt 0x14a944d58 <line:43:5, col:12>
|     `-ImplicitCastExpr 0x14a944d40 <col:12> 'char *' <LValueToRValue>
|       `-DeclRefExpr 0x14a944d20 <col:12> 'char *' lvalue Var 0x14a928568 'ascii' 'char *'
|-FunctionDecl 0x14a941e80 <line:11:17> col:17 implicit used malloc 'void *(unsigned long)' extern
| |-ParmVarDecl 0x14a941f80 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-BuiltinAttr 0x14a941f28 <<invalid sloc>> Implicit 871
| `-AllocSizeAttr 0x14a941ff0 <col:17> Implicit 1
|-FunctionDecl 0x14a942078 <col:24> col:24 implicit used strlen 'unsigned long (const char *)' extern
| |-ParmVarDecl 0x14a942178 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x14a942120 <<invalid sloc>> Implicit 902
|-FunctionDecl 0x14a942418 <line:12:9> col:9 implicit used strncpy 'char *(char *, const char *, unsigned long)' extern
| |-ParmVarDecl 0x14a942518 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x14a942580 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x14a9425e8 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x14a9424c0 <<invalid sloc>> Implicit 886
`-FunctionDecl 0x14a944848 <line:40:30> col:30 implicit used strtol 'long (const char *, char **, int)' extern
  |-ParmVarDecl 0x14a944948 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x14a9449b0 <<invalid sloc>> <invalid sloc> 'char **'
  |-ParmVarDecl 0x14a944a18 <<invalid sloc>> <invalid sloc> 'int'
  `-BuiltinAttr 0x14a9448f0 <<invalid sloc>> Implicit 877
