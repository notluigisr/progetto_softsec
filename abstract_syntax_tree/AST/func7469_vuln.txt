TranslationUnitDecl 0x137055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1370564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x137055bd0 '__int128'
|-TypedefDecl 0x137056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x137055bf0 'unsigned __int128'
|-TypedefDecl 0x137126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x137126000 'struct __NSConstantString_tag'
|   `-Record 0x137056580 '__NSConstantString_tag'
|-TypedefDecl 0x137126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x137055d90 '__SVInt8_t'
|-TypedefDecl 0x137126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x137055db0 '__SVInt16_t'
|-TypedefDecl 0x137126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x137055dd0 '__SVInt32_t'
|-TypedefDecl 0x1371263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x137055df0 '__SVInt64_t'
|-TypedefDecl 0x137126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x137055e10 '__SVUint8_t'
|-TypedefDecl 0x1371264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x137055e30 '__SVUint16_t'
|-TypedefDecl 0x137126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x137055e50 '__SVUint32_t'
|-TypedefDecl 0x137126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x137055e70 '__SVUint64_t'
|-TypedefDecl 0x1371265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x137055e90 '__SVFloat16_t'
|-TypedefDecl 0x137126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x137055eb0 '__SVFloat32_t'
|-TypedefDecl 0x1371266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x137055ed0 '__SVFloat64_t'
|-TypedefDecl 0x137126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x137055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x137126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x137055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1371267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x137055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x137126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x137055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1371268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x137055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x137126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x137055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x137126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x137055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1371269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x137055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x137126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x137055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x137126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x137056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x137126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x137056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x137126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x137056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x137126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x137056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x137126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x137056090 '__clang_svint8x3_t'
|-TypedefDecl 0x137126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1370560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x137126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1370560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x137126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1370560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x137126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x137056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x137126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x137056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x137126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x137056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x137126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x137056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x137126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x137056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x137127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1370561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x137127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1370561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1371278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1370561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x137127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x137056210 '__clang_svint8x4_t'
|-TypedefDecl 0x1371279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x137056230 '__clang_svint16x4_t'
|-TypedefDecl 0x137127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x137056250 '__clang_svint32x4_t'
|-TypedefDecl 0x137127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x137056270 '__clang_svint64x4_t'
|-TypedefDecl 0x137127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x137056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x137127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1370562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x137127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1370562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x137127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1370562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x137127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x137056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x137127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x137056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x137127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x137056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x137127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x137056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x137127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x137056390 '__SVBool_t'
|-TypedefDecl 0x137127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1370563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x137127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1370563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x137127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1370563f0 '__SVCount_t'
|-TypedefDecl 0x137127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x137127fb0 'char *'
|   `-BuiltinType 0x1370556b0 'char'
|-TypedefDecl 0x137128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x137127fb0 'char *'
|   `-BuiltinType 0x1370556b0 'char'
|-FunctionDecl 0x1371283d0 <dataset_diviso_filec/func7469_vuln.c:1:1, line:30:1> line:1:6 invalid fli_read_lc 'void (int *, int *, unsigned char *, unsigned char *)'
| |-ParmVarDecl 0x137128128 <col:18, col:24> col:24 invalid f 'int *'
| |-ParmVarDecl 0x1371281a8 <col:27, col:41> col:41 invalid fli_header 'int *'
| |-ParmVarDecl 0x137128258 <col:53, col:68> col:68 used old_framebuf 'unsigned char *'
| |-ParmVarDecl 0x1371282d8 <col:82, col:97> col:97 used framebuf 'unsigned char *'
| `-CompoundStmt 0x1371450e0 <line:2:1, line:30:1>
|   |-DeclStmt 0x137128638 <line:3:2, col:39>
|   | |-VarDecl 0x1371284b0 <col:2, col:17> col:17 used yc 'unsigned short'
|   | |-VarDecl 0x137128530 <col:2, col:21> col:21 used firstline 'unsigned short'
|   | `-VarDecl 0x1371285b0 <col:2, col:32> col:32 used numline 'unsigned short'
|   |-DeclStmt 0x1371286d0 <line:4:2, col:20>
|   | `-VarDecl 0x137128668 <col:2, col:17> col:17 used pos 'unsigned char *'
|   |-CallExpr 0x137141f60 <line:5:2, col:71> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x137141de0 <col:2> 'void *(void *, const void *, unsigned long)' Function 0x137141b90 'memcpy' 'void *(void *, const void *, unsigned long)'
|   | |-DeclRefExpr 0x137141e00 <col:9> 'unsigned char *' lvalue ParmVar 0x1371282d8 'framebuf' 'unsigned char *'
|   | |-DeclRefExpr 0x137141e20 <col:19> 'unsigned char *' lvalue ParmVar 0x137128258 'old_framebuf' 'unsigned char *'
|   | `-BinaryOperator 0x137141f10 <col:33, col:65> '<dependent type>' contains-errors '*'
|   |   |-CXXDependentScopeMemberExpr 0x137141e60 <col:33, col:45> '<dependent type>' contains-errors lvalue ->width
|   |   | `-RecoveryExpr 0x137141e40 <col:33> '<dependent type>' contains-errors lvalue
|   |   `-CXXDependentScopeMemberExpr 0x137141ec8 <col:53, col:65> '<dependent type>' contains-errors lvalue ->height
|   |     `-RecoveryExpr 0x137141ea8 <col:53> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x137142178 <line:6:2, col:30> 'unsigned short' contains-errors '='
|   | |-DeclRefExpr 0x137141f98 <col:2> 'unsigned short' lvalue Var 0x137128530 'firstline' 'unsigned short'
|   | `-CallExpr 0x137142150 <col:14, col:30> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x137142110 <col:14> 'int ()' Function 0x137142058 'fli_read_short' 'int ()'
|   |   `-RecoveryExpr 0x137142130 <col:29> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x137142220 <line:7:2, col:28> 'unsigned short' contains-errors '='
|   | |-DeclRefExpr 0x137142198 <col:2> 'unsigned short' lvalue Var 0x1371285b0 'numline' 'unsigned short'
|   | `-CallExpr 0x1371421f8 <col:12, col:28> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x1371421b8 <col:12> 'int ()' Function 0x137142058 'fli_read_short' 'int ()'
|   |   `-RecoveryExpr 0x1371421d8 <col:27> '<dependent type>' contains-errors lvalue
|   `-ForStmt 0x1371450a8 <line:8:2, line:29:2>
|     |-BinaryOperator 0x137142298 <line:8:7, col:10> 'unsigned short' '='
|     | |-DeclRefExpr 0x137142240 <col:7> 'unsigned short' lvalue Var 0x1371284b0 'yc' 'unsigned short'
|     | `-ImplicitCastExpr 0x137142280 <col:10> 'unsigned short' <IntegralCast>
|     |   `-IntegerLiteral 0x137142260 <col:10> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x137142358 <col:13, col:18> 'int' '<'
|     | |-ImplicitCastExpr 0x137142328 <col:13> 'int' <IntegralCast>
|     | | `-ImplicitCastExpr 0x1371422f8 <col:13> 'unsigned short' <LValueToRValue>
|     | |   `-DeclRefExpr 0x1371422b8 <col:13> 'unsigned short' lvalue Var 0x1371284b0 'yc' 'unsigned short'
|     | `-ImplicitCastExpr 0x137142340 <col:18> 'int' <IntegralCast>
|     |   `-ImplicitCastExpr 0x137142310 <col:18> 'unsigned short' <LValueToRValue>
|     |     `-DeclRefExpr 0x1371422d8 <col:18> 'unsigned short' lvalue Var 0x1371285b0 'numline' 'unsigned short'
|     |-UnaryOperator 0x137142398 <col:27, col:29> 'unsigned short' postfix '++' cannot overflow
|     | `-DeclRefExpr 0x137142378 <col:27> 'unsigned short' lvalue Var 0x1371284b0 'yc' 'unsigned short'
|     `-CompoundStmt 0x137145070 <col:33, line:29:2>
|       |-DeclStmt 0x137142550 <line:9:3, col:30>
|       | |-VarDecl 0x1371423c8 <col:3, col:18> col:18 used xc 'unsigned short'
|       | |-VarDecl 0x137142448 <col:3, col:22> col:22 used pc 'unsigned short'
|       | `-VarDecl 0x1371424c8 <col:3, col:26> col:26 used pcnt 'unsigned short'
|       |-BinaryOperator 0x1371426d0 <line:10:3, col:21> 'unsigned short' contains-errors '='
|       | |-DeclRefExpr 0x137142568 <col:3> 'unsigned short' lvalue Var 0x137142448 'pc' 'unsigned short'
|       | `-CallExpr 0x1371426a8 <col:6, col:21> '<dependent type>' contains-errors
|       |   |-DeclRefExpr 0x137142668 <col:6> 'int ()' Function 0x1371425b0 'fli_read_char' 'int ()'
|       |   `-RecoveryExpr 0x137142688 <col:20> '<dependent type>' contains-errors lvalue
|       |-BinaryOperator 0x137142748 <line:11:3, col:6> 'unsigned short' '='
|       | |-DeclRefExpr 0x1371426f0 <col:3> 'unsigned short' lvalue Var 0x1371423c8 'xc' 'unsigned short'
|       | `-ImplicitCastExpr 0x137142730 <col:6> 'unsigned short' <IntegralCast>
|       |   `-IntegerLiteral 0x137142710 <col:6> 'int' 0
|       |-BinaryOperator 0x137142f88 <line:12:3, col:51> 'unsigned char *' contains-errors '='
|       | |-DeclRefExpr 0x137142768 <col:3> 'unsigned char *' lvalue Var 0x137128668 'pos' 'unsigned char *'
|       | `-BinaryOperator 0x137142f68 <col:7, col:51> '<dependent type>' contains-errors '+'
|       |   |-DeclRefExpr 0x137142788 <col:7> 'unsigned char *' lvalue ParmVar 0x1371282d8 'framebuf' 'unsigned char *'
|       |   `-ParenExpr 0x137142f48 <col:16, col:51> '<dependent type>' contains-errors
|       |     `-BinaryOperator 0x137142f28 <col:17, col:50> '<dependent type>' contains-errors '*'
|       |       |-CXXDependentScopeMemberExpr 0x137142e00 <col:17, col:29> '<dependent type>' contains-errors lvalue ->width
|       |       | `-RecoveryExpr 0x1371427a8 <col:17> '<dependent type>' contains-errors lvalue
|       |       `-ParenExpr 0x137142f08 <col:37, col:50> 'int'
|       |         `-BinaryOperator 0x137142ee8 <col:38, col:48> 'int' '+'
|       |           |-ImplicitCastExpr 0x137142ea0 <col:38> 'int' <IntegralCast>
|       |           | `-ImplicitCastExpr 0x137142e88 <col:38> 'unsigned short' <LValueToRValue>
|       |           |   `-DeclRefExpr 0x137142e48 <col:38> 'unsigned short' lvalue Var 0x137128530 'firstline' 'unsigned short'
|       |           `-ImplicitCastExpr 0x137142ed0 <col:48> 'int' <IntegralCast>
|       |             `-ImplicitCastExpr 0x137142eb8 <col:48> 'unsigned short' <LValueToRValue>
|       |               `-DeclRefExpr 0x137142e68 <col:48> 'unsigned short' lvalue Var 0x1371284b0 'yc' 'unsigned short'
|       `-ForStmt 0x137145038 <line:13:3, line:28:3>
|         |-BinaryOperator 0x137143000 <line:13:8, col:13> 'unsigned short' '='
|         | |-DeclRefExpr 0x137142fa8 <col:8> 'unsigned short' lvalue Var 0x1371424c8 'pcnt' 'unsigned short'
|         | `-ImplicitCastExpr 0x137142fe8 <col:13> 'unsigned short' <LValueToRValue>
|         |   `-DeclRefExpr 0x137142fc8 <col:13> 'unsigned short' lvalue Var 0x137142448 'pc' 'unsigned short'
|         |-<<<NULL>>>
|         |-BinaryOperator 0x137143090 <col:17, col:22> 'int' '>'
|         | |-ImplicitCastExpr 0x137143078 <col:17> 'int' <IntegralCast>
|         | | `-ImplicitCastExpr 0x137143060 <col:17> 'unsigned short' <LValueToRValue>
|         | |   `-DeclRefExpr 0x137143020 <col:17> 'unsigned short' lvalue Var 0x1371424c8 'pcnt' 'unsigned short'
|         | `-IntegerLiteral 0x137143040 <col:22> 'int' 0
|         |-UnaryOperator 0x1371430d0 <col:25, col:29> 'unsigned short' postfix '--' cannot overflow
|         | `-DeclRefExpr 0x1371430b0 <col:25> 'unsigned short' lvalue Var 0x1371424c8 'pcnt' 'unsigned short'
|         `-CompoundStmt 0x137145000 <col:33, line:28:3>
|           |-DeclStmt 0x137143200 <line:14:4, col:26>
|           | |-VarDecl 0x137143100 <col:4, col:19> col:19 used ps 'unsigned short'
|           | `-VarDecl 0x137143180 <col:4, col:22> col:22 used skip 'unsigned short'
|           |-BinaryOperator 0x1371432a0 <line:15:4, col:24> 'unsigned short' contains-errors '='
|           | |-DeclRefExpr 0x137143218 <col:4> 'unsigned short' lvalue Var 0x137143180 'skip' 'unsigned short'
|           | `-CallExpr 0x137143278 <col:9, col:24> '<dependent type>' contains-errors
|           |   |-DeclRefExpr 0x137143238 <col:9> 'int ()' Function 0x1371425b0 'fli_read_char' 'int ()'
|           |   `-RecoveryExpr 0x137143258 <col:23> '<dependent type>' contains-errors lvalue
|           |-BinaryOperator 0x137143348 <line:16:4, col:22> 'unsigned short' contains-errors '='
|           | |-DeclRefExpr 0x1371432c0 <col:4> 'unsigned short' lvalue Var 0x137143100 'ps' 'unsigned short'
|           | `-CallExpr 0x137143320 <col:7, col:22> '<dependent type>' contains-errors
|           |   |-DeclRefExpr 0x1371432e0 <col:7> 'int ()' Function 0x1371425b0 'fli_read_char' 'int ()'
|           |   `-RecoveryExpr 0x137143300 <col:21> '<dependent type>' contains-errors lvalue
|           |-CompoundAssignOperator 0x1371433d8 <line:17:4, col:8> 'unsigned short' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|           | |-DeclRefExpr 0x137143368 <col:4> 'unsigned short' lvalue Var 0x1371423c8 'xc' 'unsigned short'
|           | `-ImplicitCastExpr 0x1371433c0 <col:8> 'int' <IntegralCast>
|           |   `-ImplicitCastExpr 0x1371433a8 <col:8> 'unsigned short' <LValueToRValue>
|           |     `-DeclRefExpr 0x137143388 <col:8> 'unsigned short' lvalue Var 0x137143180 'skip' 'unsigned short'
|           `-IfStmt 0x137144fd0 <line:18:4, line:27:4> has_else
|             |-BinaryOperator 0x137143478 <line:18:8, col:13> 'int' '&'
|             | |-ImplicitCastExpr 0x137143460 <col:8> 'int' <IntegralCast>
|             | | `-ImplicitCastExpr 0x137143448 <col:8> 'unsigned short' <LValueToRValue>
|             | |   `-DeclRefExpr 0x137143408 <col:8> 'unsigned short' lvalue Var 0x137143100 'ps' 'unsigned short'
|             | `-IntegerLiteral 0x137143428 <col:13> 'int' 128
|             |-CompoundStmt 0x137143c68 <col:19, line:24:4>
|             | |-DeclStmt 0x137143518 <line:19:5, col:22>
|             | | `-VarDecl 0x1371434b0 <col:5, col:19> col:19 used val 'unsigned char'
|             | |-BinaryOperator 0x137143610 <line:20:5, col:22> 'unsigned short' '='
|             | | |-DeclRefExpr 0x137143530 <col:5> 'unsigned short' lvalue Var 0x137143100 'ps' 'unsigned short'
|             | | `-ImplicitCastExpr 0x1371435f8 <col:8, col:22> 'unsigned short' <IntegralCast>
|             | |   `-UnaryOperator 0x1371435e0 <col:8, col:22> 'int' prefix '-' cannot overflow
|             | |     `-ImplicitCastExpr 0x1371435c8 <col:9, col:22> 'int' <IntegralCast>
|             | |       `-CStyleCastExpr 0x1371435a0 <col:9, col:22> 'signed char' <IntegralCast>
|             | |         `-ImplicitCastExpr 0x137143588 <col:22> 'unsigned short' <LValueToRValue> part_of_explicit_cast
|             | |           `-DeclRefExpr 0x137143550 <col:22> 'unsigned short' lvalue Var 0x137143100 'ps' 'unsigned short'
|             | |-BinaryOperator 0x1371436b8 <line:21:5, col:24> 'unsigned char' contains-errors '='
|             | | |-DeclRefExpr 0x137143630 <col:5> 'unsigned char' lvalue Var 0x1371434b0 'val' 'unsigned char'
|             | | `-CallExpr 0x137143690 <col:9, col:24> '<dependent type>' contains-errors
|             | |   |-DeclRefExpr 0x137143650 <col:9> 'int ()' Function 0x1371425b0 'fli_read_char' 'int ()'
|             | |   `-RecoveryExpr 0x137143670 <col:23> '<dependent type>' contains-errors lvalue
|             | |-CallExpr 0x137143b18 <line:22:5, col:31> 'void *'
|             | | |-ImplicitCastExpr 0x137143b00 <col:5> 'void *(*)(void *, int, unsigned long)' <FunctionToPointerDecay>
|             | | | `-DeclRefExpr 0x137143978 <col:5> 'void *(void *, int, unsigned long)' Function 0x137143728 'memset' 'void *(void *, int, unsigned long)'
|             | | |-ImplicitCastExpr 0x137143b50 <col:12, col:21> 'void *' <BitCast>
|             | | | `-UnaryOperator 0x137143a48 <col:12, col:21> 'unsigned char *' prefix '&' cannot overflow
|             | | |   `-ParenExpr 0x137143a28 <col:13, col:21> 'unsigned char' lvalue
|             | | |     `-ArraySubscriptExpr 0x137143a08 <col:14, col:20> 'unsigned char' lvalue
|             | | |       |-ImplicitCastExpr 0x1371439d8 <col:14> 'unsigned char *' <LValueToRValue>
|             | | |       | `-DeclRefExpr 0x137143998 <col:14> 'unsigned char *' lvalue Var 0x137128668 'pos' 'unsigned char *'
|             | | |       `-ImplicitCastExpr 0x1371439f0 <col:18> 'unsigned short' <LValueToRValue>
|             | | |         `-DeclRefExpr 0x1371439b8 <col:18> 'unsigned short' lvalue Var 0x1371423c8 'xc' 'unsigned short'
|             | | |-ImplicitCastExpr 0x137143b80 <col:24> 'int' <IntegralCast>
|             | | | `-ImplicitCastExpr 0x137143b68 <col:24> 'unsigned char' <LValueToRValue>
|             | | |   `-DeclRefExpr 0x137143a60 <col:24> 'unsigned char' lvalue Var 0x1371434b0 'val' 'unsigned char'
|             | | `-ImplicitCastExpr 0x137143bb0 <col:29> 'unsigned long' <IntegralCast>
|             | |   `-ImplicitCastExpr 0x137143b98 <col:29> 'unsigned short' <LValueToRValue>
|             | |     `-DeclRefExpr 0x137143a80 <col:29> 'unsigned short' lvalue Var 0x137143100 'ps' 'unsigned short'
|             | `-CompoundAssignOperator 0x137143c38 <line:23:5, col:9> 'unsigned short' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|             |   |-DeclRefExpr 0x137143bc8 <col:5> 'unsigned short' lvalue Var 0x1371423c8 'xc' 'unsigned short'
|             |   `-ImplicitCastExpr 0x137143c20 <col:9> 'int' <IntegralCast>
|             |     `-ImplicitCastExpr 0x137143c08 <col:9> 'unsigned short' <LValueToRValue>
|             |       `-DeclRefExpr 0x137143be8 <col:9> 'unsigned short' lvalue Var 0x137143100 'ps' 'unsigned short'
|             `-CompoundStmt 0x137144fb0 <line:24:11, line:27:4>
|               |-CallExpr 0x137144ed0 <line:25:5, col:31> '<dependent type>' contains-errors
|               | |-DeclRefExpr 0x137143d80 <col:5> 'int ()' Function 0x137143cc8 'fread' 'int ()'
|               | |-UnaryOperator 0x137144e58 <col:11, col:20> 'unsigned char *' prefix '&' cannot overflow
|               | | `-ParenExpr 0x137144e38 <col:12, col:20> 'unsigned char' lvalue
|               | |   `-ArraySubscriptExpr 0x137144e18 <col:13, col:19> 'unsigned char' lvalue
|               | |     |-ImplicitCastExpr 0x137143de0 <col:13> 'unsigned char *' <LValueToRValue>
|               | |     | `-DeclRefExpr 0x137143da0 <col:13> 'unsigned char *' lvalue Var 0x137128668 'pos' 'unsigned char *'
|               | |     `-ImplicitCastExpr 0x137144e00 <col:17> 'unsigned short' <LValueToRValue>
|               | |       `-DeclRefExpr 0x137143dc0 <col:17> 'unsigned short' lvalue Var 0x1371423c8 'xc' 'unsigned short'
|               | |-DeclRefExpr 0x137144e70 <col:23> 'unsigned short' lvalue Var 0x137143100 'ps' 'unsigned short'
|               | |-IntegerLiteral 0x137144e90 <col:27> 'int' 1
|               | `-RecoveryExpr 0x137144eb0 <col:30> '<dependent type>' contains-errors lvalue
|               `-CompoundAssignOperator 0x137144f80 <line:26:5, col:9> 'unsigned short' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|                 |-DeclRefExpr 0x137144f10 <col:5> 'unsigned short' lvalue Var 0x1371423c8 'xc' 'unsigned short'
|                 `-ImplicitCastExpr 0x137144f68 <col:9> 'int' <IntegralCast>
|                   `-ImplicitCastExpr 0x137144f50 <col:9> 'unsigned short' <LValueToRValue>
|                     `-DeclRefExpr 0x137144f30 <col:9> 'unsigned short' lvalue Var 0x137143100 'ps' 'unsigned short'
|-FunctionDecl 0x137141b90 <line:5:2> col:2 implicit used memcpy 'void *(void *, const void *, unsigned long)' extern
| |-ParmVarDecl 0x137141c90 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x137141cf8 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x137141d60 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x137141c38 <<invalid sloc>> Implicit 882
`-FunctionDecl 0x137143728 <line:22:5> col:5 implicit used memset 'void *(void *, int, unsigned long)' extern
  |-ParmVarDecl 0x137143828 <<invalid sloc>> <invalid sloc> 'void *'
  |-ParmVarDecl 0x137143890 <<invalid sloc>> <invalid sloc> 'int'
  |-ParmVarDecl 0x1371438f8 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x1371437d0 <<invalid sloc>> Implicit 900
