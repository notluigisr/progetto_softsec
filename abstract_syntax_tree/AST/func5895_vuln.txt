TranslationUnitDecl 0x129055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1290564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x129055bd0 '__int128'
|-TypedefDecl 0x129056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x129055bf0 'unsigned __int128'
|-TypedefDecl 0x12980be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12980bc00 'struct __NSConstantString_tag'
|   `-Record 0x129056580 '__NSConstantString_tag'
|-TypedefDecl 0x12980be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x129055d90 '__SVInt8_t'
|-TypedefDecl 0x12980bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x129055db0 '__SVInt16_t'
|-TypedefDecl 0x12980bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x129055dd0 '__SVInt32_t'
|-TypedefDecl 0x12980bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x129055df0 '__SVInt64_t'
|-TypedefDecl 0x12980c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x129055e10 '__SVUint8_t'
|-TypedefDecl 0x12980c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x129055e30 '__SVUint16_t'
|-TypedefDecl 0x12980c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x129055e50 '__SVUint32_t'
|-TypedefDecl 0x12980c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x129055e70 '__SVUint64_t'
|-TypedefDecl 0x12980c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x129055e90 '__SVFloat16_t'
|-TypedefDecl 0x12980c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x129055eb0 '__SVFloat32_t'
|-TypedefDecl 0x12980c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x129055ed0 '__SVFloat64_t'
|-TypedefDecl 0x12980c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x129055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12980c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x129055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12980c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x129055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12980c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x129055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12980c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x129055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12980c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x129055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12980c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x129055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12980c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x129055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12980c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x129055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12980c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x129056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12980c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x129056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12980c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x129056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12980c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x129056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12980c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x129056090 '__clang_svint8x3_t'
|-TypedefDecl 0x12980c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1290560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12980c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1290560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12980c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1290560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12980c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x129056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12980ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x129056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12980cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x129056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12980cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x129056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12980cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x129056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12980d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1290561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12980d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1290561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12980d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1290561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12980d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x129056210 '__clang_svint8x4_t'
|-TypedefDecl 0x12980d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x129056230 '__clang_svint16x4_t'
|-TypedefDecl 0x12980d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x129056250 '__clang_svint32x4_t'
|-TypedefDecl 0x12980d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x129056270 '__clang_svint64x4_t'
|-TypedefDecl 0x12980d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x129056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12980d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1290562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12980d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1290562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12980d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1290562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12980d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x129056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12980d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x129056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12980d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x129056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12980d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x129056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12980da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x129056390 '__SVBool_t'
|-TypedefDecl 0x12980da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1290563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12980dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1290563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12980db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1290563f0 '__SVCount_t'
|-TypedefDecl 0x12980dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12980dbb0 'char *'
|   `-BuiltinType 0x1290556b0 'char'
|-TypedefDecl 0x12980dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12980dbb0 'char *'
|   `-BuiltinType 0x1290556b0 'char'
|-FunctionDecl 0x129826748 <dataset_diviso_filec/func5895_vuln.c:1:1, line:83:1> line:1:5 invalid oauth2_try_parse_jwt 'int (const struct oauth2_settings *, const char *, int (*)())'
| |-ParmVarDecl 0x12980e248 <col:26, col:56> col:56 used set 'const struct oauth2_settings *'
| |-ParmVarDecl 0x12980e2c8 <line:2:5, col:17> col:17 used token 'const char *'
| |-ParmVarDecl 0x129826600 <col:24, <invalid sloc>> col:24 invalid ARRAY_TYPE 'int (*)()'
| `-CompoundStmt 0x12a80b458 <line:4:1, line:83:1>
|   |-DeclStmt 0x129826b30 <line:5:2, col:53>
|   | `-VarDecl 0x129826858 <col:2, col:52> col:21 used blobs 'const char *const *' cinit
|   |   `-ImplicitCastExpr 0x129826b18 <col:29, col:52> 'const char *const *' <IntegralToPointer>
|   |     `-CallExpr 0x129826ab8 <col:29, col:52> 'int'
|   |       |-ImplicitCastExpr 0x129826aa0 <col:29> 'int (*)()' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x129826a00 <col:29> 'int ()' Function 0x129826948 't_strsplit' 'int ()'
|   |       |-ImplicitCastExpr 0x129826ae8 <col:40> 'const char *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x129826a20 <col:40> 'const char *' lvalue ParmVar 0x12980e2c8 'token' 'const char *'
|   |       `-ImplicitCastExpr 0x129826b00 <col:47> 'char *' <ArrayToPointerDecay>
|   |         `-StringLiteral 0x129826a80 <col:47> 'char[4]' lvalue "STR"
|   |-DeclStmt 0x129826bc8 <line:6:2, col:9>
|   | `-VarDecl 0x129826b60 <col:2, col:6> col:6 used ret 'int'
|   |-CallExpr 0x129826de0 <line:8:2, col:32> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x129826cc0 <col:2> 'int ()' Function 0x129826c08 'i_assert' 'int ()'
|   | `-BinaryOperator 0x129826dc0 <col:11, col:28> 'int' contains-errors '!='
|   |   |-RecoveryExpr 0x129826d18 <col:11, col:16> '<dependent type>' contains-errors lvalue
|   |   | `-DeclRefExpr 0x129826ce0 <col:11> 'const struct oauth2_settings *' lvalue ParmVar 0x12980e248 'set' 'const struct oauth2_settings *'
|   |   `-RecoveryExpr 0x129826da0 <col:28> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x129826ef8 <line:11:2, col:14> '<dependent type>' contains-errors '='
|   | |-UnaryOperator 0x129826ec0 <col:2, col:3> '<dependent type>' contains-errors prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x129826ea8 <col:3> '<dependent type>' contains-errors <LValueToRValue>
|   | |   `-RecoveryExpr 0x129826e88 <col:3> '<dependent type>' contains-errors lvalue
|   | `-RecoveryExpr 0x129826ed8 <col:14> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x129827230 <line:13:2, line:16:2>
|   | |-BinaryOperator 0x1298270b0 <line:13:6, col:33> 'int' '!='
|   | | |-CallExpr 0x129827050 <col:6, col:28> 'int'
|   | | | |-ImplicitCastExpr 0x129827038 <col:6> 'int (*)()' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x129826ff8 <col:6> 'int ()' Function 0x129826f40 'str_array_length' 'int ()'
|   | | | `-ImplicitCastExpr 0x129827078 <col:23> 'const char *const *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x129827018 <col:23> 'const char *const *' lvalue Var 0x129826858 'blobs' 'const char *const *'
|   | | `-IntegerLiteral 0x129827090 <col:33> 'int' 3
|   | `-CompoundStmt 0x129827210 <col:36, line:16:2>
|   |   |-BinaryOperator 0x1298271a8 <line:14:3, col:14> '<dependent type>' contains-errors '='
|   |   | |-UnaryOperator 0x129827190 <col:3, col:4> '<dependent type>' contains-errors prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x129827178 <col:4> '<dependent type>' contains-errors <LValueToRValue>
|   |   | |   `-RecoveryExpr 0x129827158 <col:4> '<dependent type>' contains-errors lvalue
|   |   | `-StringLiteral 0x129827118 <col:14> 'char[4]' lvalue "STR"
|   |   `-ReturnStmt 0x129827200 <line:15:3, col:11>
|   |     `-UnaryOperator 0x1298271e8 <col:10, col:11> 'int' prefix '-'
|   |       `-IntegerLiteral 0x1298271c8 <col:11> 'int' 1
|   |-IfStmt 0x12a8088b8 <line:22:2, line:25:2>
|   | |-BinaryOperator 0x129827530 <line:22:6, col:22> 'int' contains-errors '=='
|   | | |-CXXDependentScopeMemberExpr 0x1298274e8 <col:6, col:14> '<dependent type>' contains-errors lvalue ->used
|   | | | `-RecoveryExpr 0x1298274c8 <col:6> '<dependent type>' contains-errors lvalue
|   | | `-IntegerLiteral 0x129827488 <col:22> 'int' 0
|   | `-CompoundStmt 0x12a808898 <col:25, line:25:2>
|   |   |-BinaryOperator 0x12a808830 <line:23:3, col:14> '<dependent type>' contains-errors '='
|   |   | |-UnaryOperator 0x12a808818 <col:3, col:4> '<dependent type>' contains-errors prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x12a808800 <col:4> '<dependent type>' contains-errors <LValueToRValue>
|   |   | |   `-RecoveryExpr 0x1298275d8 <col:4> '<dependent type>' contains-errors lvalue
|   |   | `-StringLiteral 0x129827598 <col:14> 'char[4]' lvalue "STR"
|   |   `-ReturnStmt 0x12a808888 <line:24:3, col:11>
|   |     `-UnaryOperator 0x12a808870 <col:10, col:11> 'int' prefix '-'
|   |       `-IntegerLiteral 0x12a808850 <col:11> 'int' 1
|   |-DeclStmt 0x12a808ac8 <line:27:2, col:31>
|   | |-RecordDecl 0x12a8088d8 <col:2, col:9> col:9 struct json_tree
|   | `-VarDecl 0x12a808a48 <col:2, col:20> col:20 used header_tree 'struct json_tree *'
|   |-IfStmt 0x12a808e08 <line:28:2, line:29:11>
|   | |-BinaryOperator 0x12a808da0 <line:28:6, col:62> 'int' contains-errors '<'
|   | | |-CallExpr 0x12a808d68 <col:6, col:58> '<dependent type>' contains-errors
|   | | | |-DeclRefExpr 0x12a808bc0 <col:6> 'int ()' Function 0x12a808b08 'oauth2_json_tree_build' 'int ()'
|   | | | |-RecoveryExpr 0x12a808d28 <col:29> '<dependent type>' contains-errors lvalue
|   | | | |-UnaryOperator 0x12a808c80 <col:37, col:38> 'struct json_tree **' prefix '&' cannot overflow
|   | | | | `-DeclRefExpr 0x12a808bf8 <col:38> 'struct json_tree *' lvalue Var 0x12a808a48 'header_tree' 'struct json_tree *'
|   | | | `-RecoveryExpr 0x12a808d48 <col:51> '<dependent type>' contains-errors lvalue
|   | | `-IntegerLiteral 0x12a808ce8 <col:62> 'int' 0
|   | `-ReturnStmt 0x12a808df8 <line:29:3, col:11>
|   |   `-UnaryOperator 0x12a808de0 <col:10, col:11> 'int' prefix '-'
|   |     `-IntegerLiteral 0x12a808dc0 <col:11> 'int' 1
|   |-DeclStmt 0x12a808f40 <line:31:2, col:23>
|   | |-VarDecl 0x12a808e40 <col:2, col:14> col:14 used alg 'const char *'
|   | `-VarDecl 0x12a808ec0 <col:2, col:20> col:20 used kid 'const char *'
|   |-CallExpr 0x12a809290 <line:33:2, col:31> 'int'
|   | |-ImplicitCastExpr 0x12a809278 <col:2> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x12a809220 <col:2> 'int ()' Function 0x12a809168 'json_tree_deinit' 'int ()'
|   | `-UnaryOperator 0x12a809260 <col:19, col:20> 'struct json_tree **' prefix '&' cannot overflow
|   |   `-DeclRefExpr 0x12a809240 <col:20> 'struct json_tree *' lvalue Var 0x12a808a48 'header_tree' 'struct json_tree *'
|   |-IfStmt 0x12a809378 <line:34:2, line:35:11>
|   | |-BinaryOperator 0x12a809310 <line:34:6, col:12> 'int' '<'
|   | | |-ImplicitCastExpr 0x12a8092f8 <col:6> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x12a8092b8 <col:6> 'int' lvalue Var 0x129826b60 'ret' 'int'
|   | | `-IntegerLiteral 0x12a8092d8 <col:12> 'int' 0
|   | `-ReturnStmt 0x12a809368 <line:35:3, col:11>
|   |   `-UnaryOperator 0x12a809350 <col:10, col:11> 'int' prefix '-'
|   |     `-IntegerLiteral 0x12a809330 <col:11> 'int' 1
|   |-IfStmt 0x12a8095c0 <line:40:2, line:45:2> has_else
|   | |-RecoveryExpr 0x12a8093b8 <line:40:6, col:13> '_Bool' contains-errors
|   | |-BinaryOperator 0x12a809448 <line:41:3, col:9> 'const char *' '='
|   | | |-DeclRefExpr 0x12a8093d8 <col:3> 'const char *' lvalue Var 0x12a808ec0 'kid' 'const char *'
|   | | `-ImplicitCastExpr 0x12a809430 <col:9> 'const char *' <NoOp>
|   | |   `-ImplicitCastExpr 0x12a809418 <col:9> 'char *' <ArrayToPointerDecay>
|   | |     `-StringLiteral 0x12a8093f8 <col:9> 'char[4]' lvalue "STR"
|   | `-IfStmt 0x12a8095a0 <line:42:7, line:45:2>
|   |   |-BinaryOperator 0x12a809500 <line:42:11, col:19> 'int' '=='
|   |   | |-ImplicitCastExpr 0x12a8094e8 <col:11, col:12> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x12a8094d0 <col:11, col:12> 'char' <LValueToRValue>
|   |   | |   `-UnaryOperator 0x12a8094a0 <col:11, col:12> 'const char' lvalue prefix '*' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x12a809488 <col:12> 'const char *' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x12a809468 <col:12> 'const char *' lvalue Var 0x12a808ec0 'kid' 'const char *'
|   |   | `-CharacterLiteral 0x12a8094b8 <col:19> 'int' 0
|   |   `-CompoundStmt 0x12a809588 <col:25, line:45:2>
|   |     `-ReturnStmt 0x12a809578 <line:44:3, col:11>
|   |       `-UnaryOperator 0x12a809560 <col:10, col:11> 'int' prefix '-'
|   |         `-IntegerLiteral 0x12a809540 <col:11> 'int' 1
|   |-IfStmt 0x12a80ae38 <line:48:2, line:70:2>
|   | |-RecoveryExpr 0x12a80a288 <line:48:6, col:22> '_Bool' contains-errors
|   | `-CompoundStmt 0x12a80ae20 <col:25, line:70:2>
|   |   `-ForStmt 0x12a80acc8 <line:53:3, line:68:3>
|   |     |-DeclStmt 0x12a80a658 <line:53:8, col:31>
|   |     | `-VarDecl 0x12a80a5d0 <col:8, col:20> col:20 used c 'const char *'
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x12a80a708 <col:33, col:39> 'int' '!='
|   |     | |-ImplicitCastExpr 0x12a80a6f0 <col:33, col:34> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x12a80a6d8 <col:33, col:34> 'char' <LValueToRValue>
|   |     | |   `-UnaryOperator 0x12a80a6a8 <col:33, col:34> 'const char' lvalue prefix '*' cannot overflow
|   |     | |     `-ImplicitCastExpr 0x12a80a690 <col:34> 'const char *' <LValueToRValue>
|   |     | |       `-DeclRefExpr 0x12a80a670 <col:34> 'const char *' lvalue Var 0x12a80a5d0 'c' 'const char *'
|   |     | `-CharacterLiteral 0x12a80a6c0 <col:39> 'int' 0
|   |     |-UnaryOperator 0x12a80a748 <col:45, col:46> 'const char *' postfix '++'
|   |     | `-DeclRefExpr 0x12a80a728 <col:45> 'const char *' lvalue Var 0x12a80a5d0 'c' 'const char *'
|   |     `-CompoundStmt 0x12a80acb0 <col:50, line:68:3>
|   |       `-SwitchStmt 0x12a80a7e0 <line:54:4, line:67:4>
|   |         |-ImplicitCastExpr 0x12a80a7c8 <line:54:12, col:13> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x12a80a7b0 <col:12, col:13> 'char' <LValueToRValue>
|   |         |   `-UnaryOperator 0x12a80a798 <col:12, col:13> 'const char' lvalue prefix '*' cannot overflow
|   |         |     `-ImplicitCastExpr 0x12a80a780 <col:13> 'const char *' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x12a80a760 <col:13> 'const char *' lvalue Var 0x12a80a5d0 'c' 'const char *'
|   |         `-CompoundStmt 0x12a80ac60 <col:16, line:67:4>
|   |           |-CaseStmt 0x12a80a838 <line:55:4, <invalid sloc>>
|   |           | |-ConstantExpr 0x12a80a820 <col:9> 'int'
|   |           | | `-CharacterLiteral 0x12a80a808 <col:9> 'int' 46
|   |           | `-NullStmt 0x12a80a980 <<invalid sloc>>
|   |           |-BreakStmt 0x12a80a988 <line:57:5>
|   |           |-CaseStmt 0x12a80a9c0 <line:58:4, <invalid sloc>>
|   |           | |-ConstantExpr 0x12a80a9a8 <col:9> 'int'
|   |           | | `-CharacterLiteral 0x12a80a990 <col:9> 'int' 47
|   |           | `-NullStmt 0x12a80aa28 <<invalid sloc>>
|   |           |-BreakStmt 0x12a80aa30 <line:60:5>
|   |           |-CaseStmt 0x12a80aa68 <line:61:4, <invalid sloc>>
|   |           | |-ConstantExpr 0x12a80aa50 <col:9> 'int'
|   |           | | `-CharacterLiteral 0x12a80aa38 <col:9> 'int' 37
|   |           | `-NullStmt 0x12a80aad0 <<invalid sloc>>
|   |           |-BreakStmt 0x12a80aad8 <line:63:5>
|   |           |-DefaultStmt 0x12a80ac38 <line:64:4, col:11>
|   |           | `-NullStmt 0x12a80ac30 <col:11>
|   |           `-BreakStmt 0x12a80ac58 <line:66:5>
|   |-DeclStmt 0x12a80af50 <line:73:2, col:29>
|   | `-VarDecl 0x12a80aee8 <col:2, col:20> col:20 used body_tree 'struct json_tree *'
|   |-IfStmt 0x12a80b128 <line:76:2, line:77:11>
|   | |-RecoveryExpr 0x12a80b0c0 <line:76:6, col:60> '_Bool' contains-errors
|   | `-ReturnStmt 0x12a80b118 <line:77:3, col:11>
|   |   `-UnaryOperator 0x12a80b100 <col:10, col:11> 'int' prefix '-'
|   |     `-IntegerLiteral 0x12a80b0e0 <col:11> 'int' 1
|   |-CallExpr 0x12a80b3e8 <line:80:2, col:29> 'int'
|   | |-ImplicitCastExpr 0x12a80b3d0 <col:2> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x12a80b378 <col:2> 'int ()' Function 0x12a809168 'json_tree_deinit' 'int ()'
|   | `-UnaryOperator 0x12a80b3b8 <col:19, col:20> 'struct json_tree **' prefix '&' cannot overflow
|   |   `-DeclRefExpr 0x12a80b398 <col:20> 'struct json_tree *' lvalue Var 0x12a80aee8 'body_tree' 'struct json_tree *'
|   `-ReturnStmt 0x12a80b448 <line:82:2, col:9>
|     `-ImplicitCastExpr 0x12a80b430 <col:9> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x12a80b410 <col:9> 'int' lvalue Var 0x129826b60 'ret' 'int'
`-FunctionDecl 0x12a809628 <line:48:12> col:12 implicit used strlen 'unsigned long (const char *)' extern
  |-ParmVarDecl 0x12a809728 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x12a8096d0 <<invalid sloc>> Implicit 902
