TranslationUnitDecl 0x151055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1510564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x151055bd0 '__int128'
|-TypedefDecl 0x151056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x151055bf0 'unsigned __int128'
|-TypedefDecl 0x15180be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x15180bc00 'struct __NSConstantString_tag'
|   `-Record 0x151056580 '__NSConstantString_tag'
|-TypedefDecl 0x15180be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x151055d90 '__SVInt8_t'
|-TypedefDecl 0x15180bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x151055db0 '__SVInt16_t'
|-TypedefDecl 0x15180bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x151055dd0 '__SVInt32_t'
|-TypedefDecl 0x15180bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x151055df0 '__SVInt64_t'
|-TypedefDecl 0x15180c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x151055e10 '__SVUint8_t'
|-TypedefDecl 0x15180c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x151055e30 '__SVUint16_t'
|-TypedefDecl 0x15180c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x151055e50 '__SVUint32_t'
|-TypedefDecl 0x15180c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x151055e70 '__SVUint64_t'
|-TypedefDecl 0x15180c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x151055e90 '__SVFloat16_t'
|-TypedefDecl 0x15180c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x151055eb0 '__SVFloat32_t'
|-TypedefDecl 0x15180c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x151055ed0 '__SVFloat64_t'
|-TypedefDecl 0x15180c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x151055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x15180c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x151055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x15180c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x151055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x15180c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x151055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x15180c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x151055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x15180c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x151055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x15180c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x151055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x15180c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x151055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x15180c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x151055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x15180c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x151056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x15180c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x151056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x15180c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x151056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x15180c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x151056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x15180c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x151056090 '__clang_svint8x3_t'
|-TypedefDecl 0x15180c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1510560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x15180c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1510560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x15180c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1510560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x15180c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x151056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x15180ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x151056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x15180cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x151056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x15180cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x151056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x15180cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x151056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x15180d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1510561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x15180d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1510561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x15180d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1510561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x15180d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x151056210 '__clang_svint8x4_t'
|-TypedefDecl 0x15180d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x151056230 '__clang_svint16x4_t'
|-TypedefDecl 0x15180d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x151056250 '__clang_svint32x4_t'
|-TypedefDecl 0x15180d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x151056270 '__clang_svint64x4_t'
|-TypedefDecl 0x15180d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x151056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x15180d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1510562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x15180d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1510562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x15180d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1510562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x15180d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x151056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x15180d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x151056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x15180d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x151056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x15180d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x151056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x15180da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x151056390 '__SVBool_t'
|-TypedefDecl 0x15180da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1510563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x15180dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1510563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x15180db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1510563f0 '__SVCount_t'
|-TypedefDecl 0x15180dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x15180dbb0 'char *'
|   `-BuiltinType 0x1510556b0 'char'
|-TypedefDecl 0x15180dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x15180dbb0 'char *'
|   `-BuiltinType 0x1510556b0 'char'
`-FunctionDecl 0x15180ddf8 <dataset_diviso_filec/func22933_nonvuln.c:1:1, line:24:1> line:1:19 invalid bson_oid_gen 'int (int *)'
  |-ParmVarDecl 0x15180dd28 <col:33, col:45> col:45 referenced invalid oid 'int *'
  `-CompoundStmt 0x1528096a0 <col:51, line:24:1>
    |-DeclStmt 0x15180df48 <line:2:5, col:24>
    | `-VarDecl 0x15180dec0 <col:5, col:23> col:16 used incr 'int' static cinit
    |   `-IntegerLiteral 0x15180df28 <col:23> 'int' 0
    |-DeclStmt 0x15180e000 <line:3:5, col:24>
    | `-VarDecl 0x15180df78 <col:5, col:23> col:16 used fuzz 'int' static cinit
    |   `-IntegerLiteral 0x15180dfe0 <col:23> 'int' 0
    |-DeclStmt 0x15180e098 <line:4:5, col:10>
    | `-VarDecl 0x15180e030 <col:5, col:9> col:9 used i 'int'
    |-IfStmt 0x15180e380 <line:7:5, line:10:17> has_else
    | |-RecoveryExpr 0x15180e0c8 <line:7:9> '<dependent type>' contains-errors lvalue
    | |-BinaryOperator 0x15180e2e8 <line:8:9, col:26> 'int' '='
    | | |-DeclRefExpr 0x15180e0e8 <col:9> 'int' lvalue Var 0x15180e030 'i' 'int'
    | | `-CallExpr 0x15180e2c8 <col:13, col:26> 'int'
    | |   `-ImplicitCastExpr 0x15180e2b0 <col:13> 'int (*)()' <FunctionToPointerDecay>
    | |     `-DeclRefExpr 0x15180e260 <col:13> 'int ()' Function 0x15180e1a8 'oid_inc_func' 'int ()'
    | `-BinaryOperator 0x15180e360 <line:10:9, col:17> 'int' '='
    |   |-DeclRefExpr 0x15180e308 <col:9> 'int' lvalue Var 0x15180e030 'i' 'int'
    |   `-UnaryOperator 0x15180e348 <col:13, col:17> 'int' postfix '++'
    |     `-DeclRefExpr 0x15180e328 <col:13> 'int' lvalue Var 0x15180dec0 'incr' 'int'
    |-IfStmt 0x1528090b8 <line:12:5, line:19:5>
    | |-UnaryOperator 0x15180e3e8 <line:12:10, col:11> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x15180e3d0 <col:11> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x15180e3b0 <col:11> 'int' lvalue Var 0x15180df78 'fuzz' 'int'
    | `-CompoundStmt 0x1528090a0 <col:18, line:19:5>
    |   `-IfStmt 0x152809070 <line:13:9, line:18:9> has_else
    |     |-DeclRefExpr 0x152808c18 <line:13:14> 'int ()' Function 0x15180e1a8 'oid_inc_func' 'int ()'
    |     |-BinaryOperator 0x152808d90 <line:14:13, col:34> 'int' '='
    |     | |-DeclRefExpr 0x152808c38 <col:13> 'int' lvalue Var 0x15180df78 'fuzz' 'int'
    |     | `-CallExpr 0x152808d70 <col:20, col:34> 'int'
    |     |   `-ImplicitCastExpr 0x152808d58 <col:20> 'int (*)()' <FunctionToPointerDecay>
    |     |     `-DeclRefExpr 0x152808d38 <col:20> 'int ()' Function 0x152808c80 'oid_fuzz_func' 'int ()'
    |     `-CompoundStmt 0x152809058 <line:15:14, line:18:9>
    |       `-BinaryOperator 0x152809038 <line:17:13, col:25> 'int' '='
    |         |-DeclRefExpr 0x152808ee0 <col:13> 'int' lvalue Var 0x15180df78 'fuzz' 'int'
    |         `-CallExpr 0x152809018 <col:20, col:25> 'int'
    |           `-ImplicitCastExpr 0x152809000 <col:20> 'int (*)()' <FunctionToPointerDecay>
    |             `-DeclRefExpr 0x152808fe0 <col:20> 'int ()' Function 0x152808f28 'rand' 'int ()'
    |-CallExpr 0x1528093e8 <line:21:5, col:42> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x1528091b8 <col:5> 'int ()' Function 0x152809100 'bson_big_endian32' 'int ()'
    | |-UnaryOperator 0x152809398 <col:24, col:36> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | `-ArraySubscriptExpr 0x152809378 <col:25, col:36> '<dependent type>' contains-errors lvalue
    | |   |-ImplicitCastExpr 0x152809360 <col:25, col:30> '<dependent type>' contains-errors <LValueToRValue>
    | |   | `-CXXDependentScopeMemberExpr 0x1528091f8 <col:25, col:30> '<dependent type>' contains-errors lvalue ->ints
    | |   |   `-RecoveryExpr 0x1528091d8 <col:25> '<dependent type>' contains-errors lvalue
    | |   `-IntegerLiteral 0x152809240 <col:35> 'int' 0
    | `-UnaryOperator 0x1528093d0 <col:39, col:40> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   `-RecoveryExpr 0x1528093b0 <col:40> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x152809520 <line:22:5, col:20> '<dependent type>' contains-errors '='
    | |-ArraySubscriptExpr 0x1528094e0 <col:5, col:16> '<dependent type>' contains-errors lvalue
    | | |-ImplicitCastExpr 0x1528094c8 <col:5, col:10> '<dependent type>' contains-errors <LValueToRValue>
    | | | `-CXXDependentScopeMemberExpr 0x152809460 <col:5, col:10> '<dependent type>' contains-errors lvalue ->ints
    | | |   `-RecoveryExpr 0x152809438 <col:5> '<dependent type>' contains-errors lvalue
    | | |     `-DeclRefExpr 0x152809418 <col:5> 'int *' lvalue ParmVar 0x15180dd28 'oid' 'int *'
    | | `-IntegerLiteral 0x1528094a8 <col:15> 'int' 1
    | `-DeclRefExpr 0x152809500 <col:20> 'int' lvalue Var 0x15180df78 'fuzz' 'int'
    `-CallExpr 0x152809670 <line:23:5, col:42> '<dependent type>' contains-errors
      |-DeclRefExpr 0x152809540 <col:5> 'int ()' Function 0x152809100 'bson_big_endian32' 'int ()'
      |-UnaryOperator 0x152809620 <col:24, col:36> '<dependent type>' contains-errors prefix '&' cannot overflow
      | `-ArraySubscriptExpr 0x152809600 <col:25, col:36> '<dependent type>' contains-errors lvalue
      |   |-ImplicitCastExpr 0x1528095e8 <col:25, col:30> '<dependent type>' contains-errors <LValueToRValue>
      |   | `-CXXDependentScopeMemberExpr 0x152809580 <col:25, col:30> '<dependent type>' contains-errors lvalue ->ints
      |   |   `-RecoveryExpr 0x152809560 <col:25> '<dependent type>' contains-errors lvalue
      |   `-IntegerLiteral 0x1528095c8 <col:35> 'int' 2
      `-UnaryOperator 0x152809658 <col:39, col:40> 'int *' prefix '&' cannot overflow
        `-DeclRefExpr 0x152809638 <col:40> 'int' lvalue Var 0x15180e030 'i' 'int'
