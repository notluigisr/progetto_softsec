TranslationUnitDecl 0x121855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1218564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x121855bd0 '__int128'
|-TypedefDecl 0x121856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x121855bf0 'unsigned __int128'
|-TypedefDecl 0x12200be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12200bc00 'struct __NSConstantString_tag'
|   `-Record 0x121856580 '__NSConstantString_tag'
|-TypedefDecl 0x12200be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x121855d90 '__SVInt8_t'
|-TypedefDecl 0x12200bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x121855db0 '__SVInt16_t'
|-TypedefDecl 0x12200bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x121855dd0 '__SVInt32_t'
|-TypedefDecl 0x12200bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x121855df0 '__SVInt64_t'
|-TypedefDecl 0x12200c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x121855e10 '__SVUint8_t'
|-TypedefDecl 0x12200c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x121855e30 '__SVUint16_t'
|-TypedefDecl 0x12200c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x121855e50 '__SVUint32_t'
|-TypedefDecl 0x12200c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x121855e70 '__SVUint64_t'
|-TypedefDecl 0x12200c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x121855e90 '__SVFloat16_t'
|-TypedefDecl 0x12200c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x121855eb0 '__SVFloat32_t'
|-TypedefDecl 0x12200c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x121855ed0 '__SVFloat64_t'
|-TypedefDecl 0x12200c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x121855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12200c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x121855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12200c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x121855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12200c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x121855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12200c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x121855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12200c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x121855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12200c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x121855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12200c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x121855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12200c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x121855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12200c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x121856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12200c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x121856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12200c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x121856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12200c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x121856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12200c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x121856090 '__clang_svint8x3_t'
|-TypedefDecl 0x12200c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1218560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12200c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1218560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12200c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1218560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12200c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x121856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12200ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x121856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12200cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x121856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12200cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x121856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12200cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x121856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12200d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1218561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12200d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1218561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12200d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1218561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12200d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x121856210 '__clang_svint8x4_t'
|-TypedefDecl 0x12200d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x121856230 '__clang_svint16x4_t'
|-TypedefDecl 0x12200d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x121856250 '__clang_svint32x4_t'
|-TypedefDecl 0x12200d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x121856270 '__clang_svint64x4_t'
|-TypedefDecl 0x12200d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x121856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12200d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1218562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12200d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1218562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12200d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1218562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12200d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x121856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12200d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x121856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12200d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x121856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12200d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x121856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12200da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x121856390 '__SVBool_t'
|-TypedefDecl 0x12200da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1218563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12200dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1218563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12200db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1218563f0 '__SVCount_t'
|-TypedefDecl 0x12200dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12200dbb0 'char *'
|   `-BuiltinType 0x1218556b0 'char'
|-TypedefDecl 0x12200dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12200dbb0 'char *'
|   `-BuiltinType 0x1218556b0 'char'
|-FunctionDecl 0x12200df28 <dataset_diviso_filec/func4032_nonvuln.c:1:1, line:33:1> line:1:5 main 'int (int, char **)'
| |-ParmVarDecl 0x12200dcd8 <col:10, col:14> col:14 used argc 'int'
| |-ParmVarDecl 0x12200de00 <col:20, col:31> col:26 used argv 'char **'
| `-CompoundStmt 0x121923680 <line:2:1, line:33:1>
|   |-DeclStmt 0x12200e0f8 <line:3:5, col:22>
|   | `-VarDecl 0x12200e040 <col:5, col:18> col:11 used jfif 'void *' cinit
|   |   `-RecoveryExpr 0x12200e0d8 <col:18> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x122028b60 <line:6:5, line:13:5>
|   | |-BinaryOperator 0x12200e168 <line:6:9, col:16> 'int' '<'
|   | | |-ImplicitCastExpr 0x12200e150 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x12200e110 <col:9> 'int' lvalue ParmVar 0x12200dcd8 'argc' 'int'
|   | | `-IntegerLiteral 0x12200e130 <col:16> 'int' 3
|   | `-CompoundStmt 0x122028b40 <col:19, line:13:5>
|   |   |-CallExpr 0x122028ab8 <line:7:9, line:11:9> 'int'
|   |   | |-ImplicitCastExpr 0x122028aa0 <line:7:9> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1220289b8 <col:9> 'int (const char *, ...)' Function 0x122028810 'printf' 'int (const char *, ...)'
|   |   | `-ImplicitCastExpr 0x122028af8 <line:8:13, line:10:13> 'const char *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x122028ae0 <line:8:13, line:10:13> 'char *' <ArrayToPointerDecay>
|   |   |     `-StringLiteral 0x122028a20 <line:8:13, line:10:13> 'char[10]' lvalue "STRSTRSTR"
|   |   `-ReturnStmt 0x122028b30 <line:12:9, col:16>
|   |     `-IntegerLiteral 0x122028b10 <col:16> 'int' 0
|   |-IfStmt 0x121923620 <line:15:5, line:30:5> has_else
|   | |-BinaryOperator 0x122028fc8 <line:15:9, col:35> 'int' '=='
|   | | |-CallExpr 0x122028f18 <col:9, col:30> 'int'
|   | | | |-ImplicitCastExpr 0x122028f00 <col:9> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x122028da0 <col:9> 'int (const char *, const char *)' Function 0x122028bc0 'strcmp' 'int (const char *, const char *)'
|   | | | |-ImplicitCastExpr 0x122028f60 <col:16, col:22> 'const char *' <NoOp>
|   | | | | `-ImplicitCastExpr 0x122028f48 <col:16, col:22> 'char *' <LValueToRValue>
|   | | | |   `-ArraySubscriptExpr 0x122028e18 <col:16, col:22> 'char *' lvalue
|   | | | |     |-ImplicitCastExpr 0x122028e00 <col:16> 'char **' <LValueToRValue>
|   | | | |     | `-DeclRefExpr 0x122028dc0 <col:16> 'char **' lvalue ParmVar 0x12200de00 'argv' 'char **'
|   | | | |     `-IntegerLiteral 0x122028de0 <col:21> 'int' 1
|   | | | `-ImplicitCastExpr 0x122028f90 <col:25> 'const char *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x122028f78 <col:25> 'char *' <ArrayToPointerDecay>
|   | | |     `-StringLiteral 0x122028e80 <col:25> 'char[4]' lvalue "STR"
|   | | `-IntegerLiteral 0x122028fa8 <col:35> 'int' 0
|   | |-CompoundStmt 0x1219229a0 <col:38, line:21:5>
|   | | |-BinaryOperator 0x122029260 <line:16:9, col:33> 'void *' contains-errors '='
|   | | | |-DeclRefExpr 0x122028fe8 <col:9> 'void *' contains-errors lvalue Var 0x12200e040 'jfif' 'void *'
|   | | | `-ImplicitCastExpr 0x122029248 <col:16, col:33> 'void *' <IntegralToPointer>
|   | | |   `-CallExpr 0x122029208 <col:16, col:33> 'int'
|   | | |     |-ImplicitCastExpr 0x1220291f0 <col:16> 'int (*)()' <FunctionToPointerDecay>
|   | | |     | `-DeclRefExpr 0x122029120 <col:16> 'int ()' Function 0x122029068 'jfif_load' 'int ()'
|   | | |     `-ImplicitCastExpr 0x122029230 <col:26, col:32> 'char *' <LValueToRValue>
|   | | |       `-ArraySubscriptExpr 0x122029198 <col:26, col:32> 'char *' lvalue
|   | | |         |-ImplicitCastExpr 0x122029180 <col:26> 'char **' <LValueToRValue>
|   | | |         | `-DeclRefExpr 0x122029140 <col:26> 'char **' lvalue ParmVar 0x12200de00 'argv' 'char **'
|   | | |         `-IntegerLiteral 0x122029160 <col:31> 'int' 2
|   | | |-CallExpr 0x122029438 <line:17:9, col:31> '<dependent type>' contains-errors
|   | | | |-DeclRefExpr 0x122029360 <col:9> 'int ()' Function 0x1220292a8 'jfif_decode' 'int ()'
|   | | | |-DeclRefExpr 0x122029380 <col:21> 'void *' contains-errors lvalue Var 0x12200e040 'jfif' 'void *'
|   | | | `-UnaryOperator 0x122029420 <col:27, col:28> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | | |   `-RecoveryExpr 0x122029400 <col:28> '<dependent type>' contains-errors lvalue
|   | | |-CallExpr 0x1220295a0 <line:18:9, col:25> 'int' contains-errors
|   | | | |-ImplicitCastExpr 0x122029588 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x122029548 <col:9> 'int ()' Function 0x122029490 'jfif_free' 'int ()'
|   | | | `-ImplicitCastExpr 0x1220295c8 <col:21> 'void *' contains-errors <LValueToRValue>
|   | | |   `-DeclRefExpr 0x122029568 <col:21> 'void *' contains-errors lvalue Var 0x12200e040 'jfif' 'void *'
|   | | |-CallExpr 0x1219227b8 <line:19:9, col:29> '<dependent type>' contains-errors
|   | | | |-DeclRefExpr 0x1219226e0 <col:9> 'int ()' Function 0x121922628 'bmp_save' 'int ()'
|   | | | |-UnaryOperator 0x1219227a0 <col:18, col:19> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | | | | `-RecoveryExpr 0x121922780 <col:19> '<dependent type>' contains-errors lvalue
|   | | | `-StringLiteral 0x121922730 <col:24> 'char[4]' lvalue "STR"
|   | | `-CallExpr 0x121922978 <line:20:9, col:22> '<dependent type>' contains-errors
|   | |   |-DeclRefExpr 0x1219228c8 <col:9> 'int ()' Function 0x121922810 'bmp_free' 'int ()'
|   | |   `-UnaryOperator 0x121922960 <col:18, col:19> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | |     `-RecoveryExpr 0x121922940 <col:19> '<dependent type>' contains-errors lvalue
|   | `-IfStmt 0x121923600 <line:21:12, line:30:5>
|   |   |-BinaryOperator 0x121922b88 <line:21:16, col:42> 'int' '=='
|   |   | |-CallExpr 0x121922ad8 <col:16, col:37> 'int'
|   |   | | |-ImplicitCastExpr 0x121922ac0 <col:16> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |   | | | `-DeclRefExpr 0x1219229d8 <col:16> 'int (const char *, const char *)' Function 0x122028bc0 'strcmp' 'int (const char *, const char *)'
|   |   | | |-ImplicitCastExpr 0x121922b20 <col:23, col:29> 'const char *' <NoOp>
|   |   | | | `-ImplicitCastExpr 0x121922b08 <col:23, col:29> 'char *' <LValueToRValue>
|   |   | | |   `-ArraySubscriptExpr 0x121922a50 <col:23, col:29> 'char *' lvalue
|   |   | | |     |-ImplicitCastExpr 0x121922a38 <col:23> 'char **' <LValueToRValue>
|   |   | | |     | `-DeclRefExpr 0x1219229f8 <col:23> 'char **' lvalue ParmVar 0x12200de00 'argv' 'char **'
|   |   | | |     `-IntegerLiteral 0x121922a18 <col:28> 'int' 1
|   |   | | `-ImplicitCastExpr 0x121922b50 <col:32> 'const char *' <NoOp>
|   |   | |   `-ImplicitCastExpr 0x121922b38 <col:32> 'char *' <ArrayToPointerDecay>
|   |   | |     `-StringLiteral 0x121922a70 <col:32> 'char[4]' lvalue "STR"
|   |   | `-IntegerLiteral 0x121922b68 <col:42> 'int' 0
|   |   `-CompoundStmt 0x1219235c0 <col:45, line:30:5>
|   |     |-IfStmt 0x121923060 <line:22:9, line:25:9>
|   |     | |-BinaryOperator 0x121922e78 <line:22:13, col:41> 'int' contains-errors '=='
|   |     | | |-CallExpr 0x121922e48 <col:13, col:35> '<dependent type>' contains-errors
|   |     | | | |-DeclRefExpr 0x121922c88 <col:13> 'int ()' Function 0x121922bd0 'bmp_load' 'int ()'
|   |     | | | |-UnaryOperator 0x121922df8 <col:22, col:23> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |     | | | | `-RecoveryExpr 0x121922dd8 <col:23> '<dependent type>' contains-errors lvalue
|   |     | | | `-ArraySubscriptExpr 0x121922e28 <col:28, col:34> 'char *' lvalue
|   |     | | |   |-ImplicitCastExpr 0x121922e10 <col:28> 'char **' <LValueToRValue>
|   |     | | |   | `-DeclRefExpr 0x121922cd8 <col:28> 'char **' lvalue ParmVar 0x12200de00 'argv' 'char **'
|   |     | | |   `-IntegerLiteral 0x121922cf8 <col:33> 'int' 2
|   |     | | `-UnaryOperator 0x121922da0 <col:40, col:41> 'int' prefix '-'
|   |     | |   `-IntegerLiteral 0x121922d80 <col:41> 'int' 1
|   |     | `-CompoundStmt 0x121923040 <col:44, line:25:9>
|   |     |   |-CallExpr 0x121922f80 <line:23:13, col:34> 'int'
|   |     |   | |-ImplicitCastExpr 0x121922f68 <col:13> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |     |   | | `-DeclRefExpr 0x121922e98 <col:13> 'int (const char *, ...)' Function 0x122028810 'printf' 'int (const char *, ...)'
|   |     |   | |-ImplicitCastExpr 0x121922fc8 <col:20> 'const char *' <NoOp>
|   |     |   | | `-ImplicitCastExpr 0x121922fb0 <col:20> 'char *' <ArrayToPointerDecay>
|   |     |   | |   `-StringLiteral 0x121922eb8 <col:20> 'char[4]' lvalue "STR"
|   |     |   | `-ImplicitCastExpr 0x121922fe0 <col:27, col:33> 'char *' <LValueToRValue>
|   |     |   |   `-ArraySubscriptExpr 0x121922f30 <col:27, col:33> 'char *' lvalue
|   |     |   |     |-ImplicitCastExpr 0x121922f18 <col:27> 'char **' <LValueToRValue>
|   |     |   |     | `-DeclRefExpr 0x121922ed8 <col:27> 'char **' lvalue ParmVar 0x12200de00 'argv' 'char **'
|   |     |   |     `-IntegerLiteral 0x121922ef8 <col:32> 'int' 2
|   |     |   `-ReturnStmt 0x121923030 <line:24:13, col:21>
|   |     |     `-UnaryOperator 0x121923018 <col:20, col:21> 'int' prefix '-'
|   |     |       `-IntegerLiteral 0x121922ff8 <col:21> 'int' 1
|   |     |-BinaryOperator 0x121923278 <line:26:9, col:32> 'void *' contains-errors '='
|   |     | |-DeclRefExpr 0x121923080 <col:9> 'void *' contains-errors lvalue Var 0x12200e040 'jfif' 'void *'
|   |     | `-CallExpr 0x121923250 <col:16, col:32> '<dependent type>' contains-errors
|   |     |   |-DeclRefExpr 0x121923180 <col:16> 'int ()' Function 0x1219230c8 'jfif_encode' 'int ()'
|   |     |   `-UnaryOperator 0x121923238 <col:28, col:29> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |     |     `-RecoveryExpr 0x121923218 <col:29> '<dependent type>' contains-errors lvalue
|   |     |-CallExpr 0x121923348 <line:27:9, col:22> '<dependent type>' contains-errors
|   |     | |-DeclRefExpr 0x121923298 <col:9> 'int ()' Function 0x121922810 'bmp_free' 'int ()'
|   |     | `-UnaryOperator 0x121923330 <col:18, col:19> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |     |   `-RecoveryExpr 0x121923310 <col:19> '<dependent type>' contains-errors lvalue
|   |     |-CallExpr 0x1219234c8 <line:28:9, col:30> 'int' contains-errors
|   |     | |-ImplicitCastExpr 0x1219234b0 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x121923450 <col:9> 'int ()' Function 0x121923398 'jfif_save' 'int ()'
|   |     | |-ImplicitCastExpr 0x1219234f8 <col:19> 'void *' contains-errors <LValueToRValue>
|   |     | | `-DeclRefExpr 0x121923470 <col:19> 'void *' contains-errors lvalue Var 0x12200e040 'jfif' 'void *'
|   |     | `-ImplicitCastExpr 0x121923510 <col:25> 'char *' <ArrayToPointerDecay>
|   |     |   `-StringLiteral 0x121923490 <col:25> 'char[4]' lvalue "STR"
|   |     `-CallExpr 0x121923580 <line:29:9, col:23> 'int' contains-errors
|   |       |-ImplicitCastExpr 0x121923568 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x121923528 <col:9> 'int ()' Function 0x122029490 'jfif_free' 'int ()'
|   |       `-ImplicitCastExpr 0x1219235a8 <col:19> 'void *' contains-errors <LValueToRValue>
|   |         `-DeclRefExpr 0x121923548 <col:19> 'void *' contains-errors lvalue Var 0x12200e040 'jfif' 'void *'
|   `-ReturnStmt 0x121923670 <line:32:5, col:12>
|     `-IntegerLiteral 0x121923650 <col:12> 'int' 0
|-FunctionDecl 0x122028810 <line:7:9> col:9 implicit used printf 'int (const char *, ...)' extern
| |-ParmVarDecl 0x122028910 <<invalid sloc>> <invalid sloc> 'const char *'
| |-BuiltinAttr 0x1220288b8 <<invalid sloc>> Implicit 903
| `-FormatAttr 0x122028980 <col:9> Implicit printf 1 2
`-FunctionDecl 0x122028bc0 <line:15:9> col:9 implicit used strcmp 'int (const char *, const char *)' extern
  |-ParmVarDecl 0x122028cc0 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x122028d28 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x122028c68 <<invalid sloc>> Implicit 887
