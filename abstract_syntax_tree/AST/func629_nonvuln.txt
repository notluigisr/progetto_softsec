TranslationUnitDecl 0x155055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1550564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x155055bd0 '__int128'
|-TypedefDecl 0x155056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x155055bf0 'unsigned __int128'
|-TypedefDecl 0x155126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x155126000 'struct __NSConstantString_tag'
|   `-Record 0x155056580 '__NSConstantString_tag'
|-TypedefDecl 0x155126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x155055d90 '__SVInt8_t'
|-TypedefDecl 0x155126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x155055db0 '__SVInt16_t'
|-TypedefDecl 0x155126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x155055dd0 '__SVInt32_t'
|-TypedefDecl 0x1551263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x155055df0 '__SVInt64_t'
|-TypedefDecl 0x155126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x155055e10 '__SVUint8_t'
|-TypedefDecl 0x1551264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x155055e30 '__SVUint16_t'
|-TypedefDecl 0x155126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x155055e50 '__SVUint32_t'
|-TypedefDecl 0x155126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x155055e70 '__SVUint64_t'
|-TypedefDecl 0x1551265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x155055e90 '__SVFloat16_t'
|-TypedefDecl 0x155126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x155055eb0 '__SVFloat32_t'
|-TypedefDecl 0x1551266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x155055ed0 '__SVFloat64_t'
|-TypedefDecl 0x155126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x155055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x155126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x155055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1551267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x155055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x155126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x155055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1551268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x155055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x155126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x155055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x155126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x155055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1551269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x155055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x155126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x155055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x155126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x155056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x155126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x155056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x155126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x155056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x155126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x155056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x155126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x155056090 '__clang_svint8x3_t'
|-TypedefDecl 0x155126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1550560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x155126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1550560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x155126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1550560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x155126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x155056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x155126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x155056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x155126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x155056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x155126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x155056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x155126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x155056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x155127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1550561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x155127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1550561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1551278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1550561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x155127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x155056210 '__clang_svint8x4_t'
|-TypedefDecl 0x1551279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x155056230 '__clang_svint16x4_t'
|-TypedefDecl 0x155127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x155056250 '__clang_svint32x4_t'
|-TypedefDecl 0x155127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x155056270 '__clang_svint64x4_t'
|-TypedefDecl 0x155127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x155056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x155127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1550562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x155127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1550562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x155127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1550562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x155127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x155056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x155127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x155056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x155127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x155056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x155127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x155056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x155127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x155056390 '__SVBool_t'
|-TypedefDecl 0x155127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1550563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x155127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1550563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x155127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1550563f0 '__SVCount_t'
|-TypedefDecl 0x155127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x155127fb0 'char *'
|   `-BuiltinType 0x1550556b0 'char'
|-TypedefDecl 0x155128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x155127fb0 'char *'
|   `-BuiltinType 0x1550556b0 'char'
|-FunctionDecl 0x155128388 <dataset_diviso_filec/func629_nonvuln.c:1:1, line:30:1> line:1:12 http_del_hdr_value 'int (char *, char *, char **, char *)' static
| |-ParmVarDecl 0x1551280d8 <col:31, col:37> col:37 used start 'char *'
| |-ParmVarDecl 0x155128158 <col:44, col:50> col:50 used end 'char *'
| |-ParmVarDecl 0x155128208 <col:55, col:62> col:62 used from 'char **'
| |-ParmVarDecl 0x155128288 <col:68, col:74> col:74 used next 'char *'
| `-CompoundStmt 0x155808e40 <line:2:1, line:30:1>
|   |-DeclStmt 0x155128580 <line:3:2, col:20>
|   | `-VarDecl 0x1551284b0 <col:2, col:16> col:8 used prev 'char *' cinit
|   |   `-ImplicitCastExpr 0x155128568 <col:15, col:16> 'char *' <LValueToRValue>
|   |     `-UnaryOperator 0x155128550 <col:15, col:16> 'char *' lvalue prefix '*' cannot overflow
|   |       `-ImplicitCastExpr 0x155128538 <col:16> 'char **' <LValueToRValue>
|   |         `-DeclRefExpr 0x155128518 <col:16> 'char **' lvalue ParmVar 0x155128208 'from' 'char **'
|   |-IfStmt 0x155142218 <line:5:2, line:27:2> has_else
|   | |-BinaryOperator 0x155128608 <line:5:6, col:14> 'int' '=='
|   | | |-ImplicitCastExpr 0x1551285d8 <col:6> 'char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x155128598 <col:6> 'char *' lvalue Var 0x1551284b0 'prev' 'char *'
|   | | `-ImplicitCastExpr 0x1551285f0 <col:14> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1551285b8 <col:14> 'char *' lvalue ParmVar 0x1551280d8 'start' 'char *'
|   | |-CompoundStmt 0x155141a68 <col:21, line:12:2>
|   | | |-IfStmt 0x1551286f0 <line:7:3, line:8:8>
|   | | | |-BinaryOperator 0x155128698 <line:7:7, col:14> 'int' '<'
|   | | | | |-ImplicitCastExpr 0x155128668 <col:7> 'char *' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x155128628 <col:7> 'char *' lvalue ParmVar 0x155128288 'next' 'char *'
|   | | | | `-ImplicitCastExpr 0x155128680 <col:14> 'char *' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x155128648 <col:14> 'char *' lvalue ParmVar 0x155128158 'end' 'char *'
|   | | | `-UnaryOperator 0x1551286d8 <line:8:4, col:8> 'char *' postfix '++'
|   | | |   `-DeclRefExpr 0x1551286b8 <col:4> 'char *' lvalue ParmVar 0x155128288 'next' 'char *'
|   | | `-WhileStmt 0x155141a48 <line:10:3, line:11:8>
|   | |   |-BinaryOperator 0x1551419f0 <line:10:10, col:42> 'int' '&&'
|   | |   | |-BinaryOperator 0x155128780 <col:10, col:17> 'int' '<'
|   | |   | | |-ImplicitCastExpr 0x155128750 <col:10> 'char *' <LValueToRValue>
|   | |   | | | `-DeclRefExpr 0x155128710 <col:10> 'char *' lvalue ParmVar 0x155128288 'next' 'char *'
|   | |   | | `-ImplicitCastExpr 0x155128768 <col:17> 'char *' <LValueToRValue>
|   | |   | |   `-DeclRefExpr 0x155128730 <col:17> 'char *' lvalue ParmVar 0x155128158 'end' 'char *'
|   | |   | `-CallExpr 0x155141998 <col:24, col:42> 'int'
|   | |   |   |-ImplicitCastExpr 0x155141980 <col:24> 'int (*)()' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x1551418e0 <col:24> 'int ()' Function 0x155141828 'HTTP_IS_SPHT' 'int ()'
|   | |   |   `-ImplicitCastExpr 0x1551419d8 <col:37, col:38> 'int' <IntegralCast>
|   | |   |     `-ImplicitCastExpr 0x1551419c0 <col:37, col:38> 'char' <LValueToRValue>
|   | |   |       `-UnaryOperator 0x155141938 <col:37, col:38> 'char' lvalue prefix '*' cannot overflow
|   | |   |         `-ImplicitCastExpr 0x155141920 <col:38> 'char *' <LValueToRValue>
|   | |   |           `-DeclRefExpr 0x155141900 <col:38> 'char *' lvalue ParmVar 0x155128288 'next' 'char *'
|   | |   `-UnaryOperator 0x155141a30 <line:11:4, col:8> 'char *' postfix '++'
|   | |     `-DeclRefExpr 0x155141a10 <col:4> 'char *' lvalue ParmVar 0x155128288 'next' 'char *'
|   | `-CompoundStmt 0x1551421f0 <line:13:7, line:27:2>
|   |   |-WhileStmt 0x155141c00 <line:15:3, line:16:8>
|   |   | |-CallExpr 0x155141b70 <line:15:10, col:32> 'int'
|   |   | | |-ImplicitCastExpr 0x155141b58 <col:10> 'int (*)()' <FunctionToPointerDecay>
|   |   | | | `-DeclRefExpr 0x155141a88 <col:10> 'int ()' Function 0x155141828 'HTTP_IS_SPHT' 'int ()'
|   |   | | `-ImplicitCastExpr 0x155141bb0 <col:23, col:31> 'int' <IntegralCast>
|   |   | |   `-ImplicitCastExpr 0x155141b98 <col:23, col:31> 'char' <LValueToRValue>
|   |   | |     `-UnaryOperator 0x155141b40 <col:23, col:31> 'char' lvalue prefix '*' cannot overflow
|   |   | |       `-ParenExpr 0x155141b20 <col:24, col:31> 'char *'
|   |   | |         `-BinaryOperator 0x155141b00 <col:25, col:30> 'char *' '-'
|   |   | |           |-ImplicitCastExpr 0x155141ae8 <col:25> 'char *' <LValueToRValue>
|   |   | |           | `-DeclRefExpr 0x155141aa8 <col:25> 'char *' lvalue Var 0x1551284b0 'prev' 'char *'
|   |   | |           `-IntegerLiteral 0x155141ac8 <col:30> 'int' 1
|   |   | `-UnaryOperator 0x155141be8 <line:16:4, col:8> 'char *' postfix '--'
|   |   |   `-DeclRefExpr 0x155141bc8 <col:4> 'char *' lvalue Var 0x1551284b0 'prev' 'char *'
|   |   |-BinaryOperator 0x155141ca8 <line:17:3, col:11> 'char *' '='
|   |   | |-UnaryOperator 0x155141c58 <col:3, col:4> 'char *' lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x155141c40 <col:4> 'char **' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x155141c20 <col:4> 'char **' lvalue ParmVar 0x155128208 'from' 'char **'
|   |   | `-ImplicitCastExpr 0x155141c90 <col:11> 'char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x155141c70 <col:11> 'char *' lvalue Var 0x1551284b0 'prev' 'char *'
|   |   `-IfStmt 0x1551421d0 <line:20:3, line:26:3>
|   |     |-BinaryOperator 0x155141d38 <line:20:7, col:14> 'int' '<'
|   |     | |-ImplicitCastExpr 0x155141d08 <col:7> 'char *' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x155141cc8 <col:7> 'char *' lvalue ParmVar 0x155128288 'next' 'char *'
|   |     | `-ImplicitCastExpr 0x155141d20 <col:14> 'char *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x155141ce8 <col:14> 'char *' lvalue ParmVar 0x155128158 'end' 'char *'
|   |     `-CompoundStmt 0x1551421a8 <col:19, line:26:3>
|   |       |-BinaryOperator 0x155141e10 <line:21:4, col:19> 'char' '='
|   |       | |-UnaryOperator 0x155141d90 <col:4, col:9> 'char' lvalue prefix '*' cannot overflow
|   |       | | `-UnaryOperator 0x155141d78 <col:5, col:9> 'char *' postfix '++'
|   |       | |   `-DeclRefExpr 0x155141d58 <col:5> 'char *' lvalue Var 0x1551284b0 'prev' 'char *'
|   |       | `-ImplicitCastExpr 0x155141df8 <col:14, col:19> 'char' <LValueToRValue>
|   |       |   `-UnaryOperator 0x155141de0 <col:14, col:19> 'char' lvalue prefix '*' cannot overflow
|   |       |     `-UnaryOperator 0x155141dc8 <col:15, col:19> 'char *' postfix '++'
|   |       |       `-DeclRefExpr 0x155141da8 <col:15> 'char *' lvalue ParmVar 0x155128288 'next' 'char *'
|   |       |-IfStmt 0x155141fa0 <line:22:4, line:23:15>
|   |       | |-BinaryOperator 0x155141ee0 <line:22:8, col:19> 'int' '<'
|   |       | | |-BinaryOperator 0x155141e88 <col:8, col:15> 'char *' '+'
|   |       | | | |-ImplicitCastExpr 0x155141e70 <col:8> 'char *' <LValueToRValue>
|   |       | | | | `-DeclRefExpr 0x155141e30 <col:8> 'char *' lvalue Var 0x1551284b0 'prev' 'char *'
|   |       | | | `-IntegerLiteral 0x155141e50 <col:15> 'int' 1
|   |       | | `-ImplicitCastExpr 0x155141ec8 <col:19> 'char *' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x155141ea8 <col:19> 'char *' lvalue ParmVar 0x155128288 'next' 'char *'
|   |       | `-BinaryOperator 0x155141f80 <line:23:5, col:15> 'char' '='
|   |       |   |-UnaryOperator 0x155141f38 <col:5, col:10> 'char' lvalue prefix '*' cannot overflow
|   |       |   | `-UnaryOperator 0x155141f20 <col:6, col:10> 'char *' postfix '++'
|   |       |   |   `-DeclRefExpr 0x155141f00 <col:6> 'char *' lvalue Var 0x1551284b0 'prev' 'char *'
|   |       |   `-ImplicitCastExpr 0x155141f68 <col:15> 'char' <IntegralCast>
|   |       |     `-CharacterLiteral 0x155141f50 <col:15> 'int' 32
|   |       `-WhileStmt 0x155142188 <line:24:4, line:25:9>
|   |         |-BinaryOperator 0x155142130 <line:24:11, col:43> 'int' '&&'
|   |         | |-BinaryOperator 0x155142030 <col:11, col:18> 'int' '<'
|   |         | | |-ImplicitCastExpr 0x155142000 <col:11> 'char *' <LValueToRValue>
|   |         | | | `-DeclRefExpr 0x155141fc0 <col:11> 'char *' lvalue ParmVar 0x155128288 'next' 'char *'
|   |         | | `-ImplicitCastExpr 0x155142018 <col:18> 'char *' <LValueToRValue>
|   |         | |   `-DeclRefExpr 0x155141fe0 <col:18> 'char *' lvalue ParmVar 0x155128158 'end' 'char *'
|   |         | `-CallExpr 0x1551420d8 <col:25, col:43> 'int'
|   |         |   |-ImplicitCastExpr 0x1551420c0 <col:25> 'int (*)()' <FunctionToPointerDecay>
|   |         |   | `-DeclRefExpr 0x155142050 <col:25> 'int ()' Function 0x155141828 'HTTP_IS_SPHT' 'int ()'
|   |         |   `-ImplicitCastExpr 0x155142118 <col:38, col:39> 'int' <IntegralCast>
|   |         |     `-ImplicitCastExpr 0x155142100 <col:38, col:39> 'char' <LValueToRValue>
|   |         |       `-UnaryOperator 0x1551420a8 <col:38, col:39> 'char' lvalue prefix '*' cannot overflow
|   |         |         `-ImplicitCastExpr 0x155142090 <col:39> 'char *' <LValueToRValue>
|   |         |           `-DeclRefExpr 0x155142070 <col:39> 'char *' lvalue ParmVar 0x155128288 'next' 'char *'
|   |         `-UnaryOperator 0x155142170 <line:25:5, col:9> 'char *' postfix '++'
|   |           `-DeclRefExpr 0x155142150 <col:5> 'char *' lvalue ParmVar 0x155128288 'next' 'char *'
|   |-CallExpr 0x155808cb8 <line:28:2, col:32> 'void *'
|   | |-ImplicitCastExpr 0x155808ca0 <col:2> 'void *(*)(void *, const void *, unsigned long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x155808b50 <col:2> 'void *(void *, const void *, unsigned long)' Function 0x1551426f0 'memmove' 'void *(void *, const void *, unsigned long)'
|   | |-ImplicitCastExpr 0x155808d08 <col:10> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x155808cf0 <col:10> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x155808b70 <col:10> 'char *' lvalue Var 0x1551284b0 'prev' 'char *'
|   | |-ImplicitCastExpr 0x155808d38 <col:16> 'const void *' <BitCast>
|   | | `-ImplicitCastExpr 0x155808d20 <col:16> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x155808b90 <col:16> 'char *' lvalue ParmVar 0x155128288 'next' 'char *'
|   | `-ImplicitCastExpr 0x155808d50 <col:22, col:28> 'unsigned long' <IntegralCast>
|   |   `-BinaryOperator 0x155808c20 <col:22, col:28> 'long' '-'
|   |     |-ImplicitCastExpr 0x155808bf0 <col:22> 'char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x155808bb0 <col:22> 'char *' lvalue ParmVar 0x155128158 'end' 'char *'
|   |     `-ImplicitCastExpr 0x155808c08 <col:28> 'char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x155808bd0 <col:28> 'char *' lvalue ParmVar 0x155128288 'next' 'char *'
|   `-ReturnStmt 0x155808e30 <line:29:2, col:21>
|     `-ImplicitCastExpr 0x155808e18 <col:9, col:21> 'int' <IntegralCast>
|       `-ParenExpr 0x155808df8 <col:9, col:21> 'long'
|         `-BinaryOperator 0x155808dd8 <col:10, col:17> 'long' '-'
|           |-ImplicitCastExpr 0x155808da8 <col:10> 'char *' <LValueToRValue>
|           | `-DeclRefExpr 0x155808d68 <col:10> 'char *' lvalue Var 0x1551284b0 'prev' 'char *'
|           `-ImplicitCastExpr 0x155808dc0 <col:17> 'char *' <LValueToRValue>
|             `-DeclRefExpr 0x155808d88 <col:17> 'char *' lvalue ParmVar 0x155128288 'next' 'char *'
`-FunctionDecl 0x1551426f0 <line:28:2> col:2 implicit used memmove 'void *(void *, const void *, unsigned long)' extern
  |-ParmVarDecl 0x155808a00 <<invalid sloc>> <invalid sloc> 'void *'
  |-ParmVarDecl 0x155808a68 <<invalid sloc>> <invalid sloc> 'const void *'
  |-ParmVarDecl 0x155808ad0 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x155142798 <<invalid sloc>> Implicit 884
