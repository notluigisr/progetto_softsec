TranslationUnitDecl 0x139055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1390564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x139055bd0 '__int128'
|-TypedefDecl 0x139056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x139055bf0 'unsigned __int128'
|-TypedefDecl 0x139126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x139126000 'struct __NSConstantString_tag'
|   `-Record 0x139056580 '__NSConstantString_tag'
|-TypedefDecl 0x139126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x139055d90 '__SVInt8_t'
|-TypedefDecl 0x139126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x139055db0 '__SVInt16_t'
|-TypedefDecl 0x139126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x139055dd0 '__SVInt32_t'
|-TypedefDecl 0x1391263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x139055df0 '__SVInt64_t'
|-TypedefDecl 0x139126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x139055e10 '__SVUint8_t'
|-TypedefDecl 0x1391264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x139055e30 '__SVUint16_t'
|-TypedefDecl 0x139126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x139055e50 '__SVUint32_t'
|-TypedefDecl 0x139126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x139055e70 '__SVUint64_t'
|-TypedefDecl 0x1391265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x139055e90 '__SVFloat16_t'
|-TypedefDecl 0x139126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x139055eb0 '__SVFloat32_t'
|-TypedefDecl 0x1391266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x139055ed0 '__SVFloat64_t'
|-TypedefDecl 0x139126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x139055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x139126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x139055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1391267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x139055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x139126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x139055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1391268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x139055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x139126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x139055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x139126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x139055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1391269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x139055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x139126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x139055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x139126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x139056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x139126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x139056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x139126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x139056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x139126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x139056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x139126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x139056090 '__clang_svint8x3_t'
|-TypedefDecl 0x139126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1390560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x139126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1390560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x139126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1390560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x139126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x139056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x139126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x139056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x139126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x139056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x139126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x139056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x139126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x139056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x139127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1390561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x139127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1390561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1391278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1390561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x139127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x139056210 '__clang_svint8x4_t'
|-TypedefDecl 0x1391279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x139056230 '__clang_svint16x4_t'
|-TypedefDecl 0x139127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x139056250 '__clang_svint32x4_t'
|-TypedefDecl 0x139127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x139056270 '__clang_svint64x4_t'
|-TypedefDecl 0x139127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x139056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x139127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1390562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x139127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1390562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x139127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1390562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x139127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x139056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x139127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x139056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x139127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x139056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x139127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x139056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x139127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x139056390 '__SVBool_t'
|-TypedefDecl 0x139127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1390563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x139127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1390563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x139127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1390563f0 '__SVCount_t'
|-TypedefDecl 0x139127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x139127fb0 'char *'
|   `-BuiltinType 0x1390556b0 'char'
|-TypedefDecl 0x139128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x139127fb0 'char *'
|   `-BuiltinType 0x1390556b0 'char'
|-FunctionDecl 0x1391281a8 <dataset_diviso_filec/func8311_vuln.c:1:1, line:49:1> line:1:14 print_string_ptr 'char *(const char *)' static
| |-ParmVarDecl 0x1391280d8 <col:32, col:44> col:44 used str 'const char *'
| `-CompoundStmt 0x139145a08 <line:2:1, line:49:1>
|   |-DeclStmt 0x139128320 <line:3:2, col:17>
|   | `-VarDecl 0x1391282b8 <col:2, col:14> col:14 used ptr 'const char *'
|   |-DeclStmt 0x139128450 <line:4:2, col:18>
|   | |-VarDecl 0x139128350 <col:2, col:8> col:8 used ptr2 'char *'
|   | `-VarDecl 0x1391283d0 <col:2, col:15> col:15 used out 'char *'
|   |-DeclStmt 0x139128508 <line:5:2, col:13>
|   | `-VarDecl 0x139128480 <col:2, col:12> col:6 used len 'int' cinit
|   |   `-IntegerLiteral 0x1391284e8 <col:12> 'int' 0
|   |-DeclStmt 0x1391285a0 <line:6:2, col:21>
|   | `-VarDecl 0x139128538 <col:2, col:16> col:16 used token 'unsigned char'
|   |-IfStmt 0x139141c90 <line:8:2, line:9:27>
|   | |-UnaryOperator 0x1391285f0 <line:8:7, col:9> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x1391285d8 <col:9> 'const char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1391285b8 <col:9> 'const char *' lvalue ParmVar 0x1391280d8 'str' 'const char *'
|   | `-ReturnStmt 0x139141c80 <line:9:3, col:27>
|   |   `-ImplicitCastExpr 0x139141840 <col:10, col:27> 'char *' <IntegralToPointer>
|   |     `-CallExpr 0x139141800 <col:10, col:27> 'int'
|   |       |-ImplicitCastExpr 0x1391287e0 <col:10> 'int (*)()' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x139128730 <col:10> 'int ()' Function 0x139128678 'cJSON_strdup' 'int ()'
|   |       `-ImplicitCastExpr 0x139141828 <col:24> 'char *' <ArrayToPointerDecay>
|   |         `-StringLiteral 0x139128790 <col:24> 'char[1]' lvalue ""
|   |-BinaryOperator 0x139141d08 <line:10:2, col:8> 'const char *' '='
|   | |-DeclRefExpr 0x139141cb0 <col:2> 'const char *' lvalue Var 0x1391282b8 'ptr' 'const char *'
|   | `-ImplicitCastExpr 0x139141cf0 <col:8> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x139141cd0 <col:8> 'const char *' lvalue ParmVar 0x1391280d8 'str' 'const char *'
|   |-WhileStmt 0x139142428 <line:11:2, line:17:2>
|   | |-BinaryOperator 0x139141e58 <line:11:10, col:32> 'int' '&&'
|   | | |-ImplicitCastExpr 0x139141e40 <col:10, col:25> 'int' <IntegralCast>
|   | | | `-ParenExpr 0x139141de8 <col:10, col:25> 'unsigned char'
|   | | |   `-BinaryOperator 0x139141dc8 <col:12, col:21> 'unsigned char' '='
|   | | |     |-DeclRefExpr 0x139141d28 <col:12> 'unsigned char' lvalue Var 0x139128538 'token' 'unsigned char'
|   | | |     `-ImplicitCastExpr 0x139141db0 <col:20, col:21> 'unsigned char' <IntegralCast>
|   | | |       `-ImplicitCastExpr 0x139141d98 <col:20, col:21> 'char' <LValueToRValue>
|   | | |         `-UnaryOperator 0x139141d80 <col:20, col:21> 'const char' lvalue prefix '*' cannot overflow
|   | | |           `-ImplicitCastExpr 0x139141d68 <col:21> 'const char *' <LValueToRValue>
|   | | |             `-DeclRefExpr 0x139141d48 <col:21> 'const char *' lvalue Var 0x1391282b8 'ptr' 'const char *'
|   | | `-UnaryOperator 0x139141e28 <col:30, col:32> 'int' prefix '++'
|   | |   `-DeclRefExpr 0x139141e08 <col:32> 'int' lvalue Var 0x139128480 'len' 'int'
|   | `-CompoundStmt 0x139142408 <col:38, line:17:2>
|   |   |-IfStmt 0x1391423a0 <line:12:3, line:15:11> has_else
|   |   | |-CallExpr 0x1391421b8 <line:12:8, col:29> 'char *'
|   |   | | |-ImplicitCastExpr 0x1391421a0 <col:8> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   |   | | | `-DeclRefExpr 0x1391420a0 <col:8> 'char *(const char *, int)' Function 0x139141ec0 'strchr' 'char *(const char *, int)'
|   |   | | |-ImplicitCastExpr 0x139142200 <col:16> 'const char *' <NoOp>
|   |   | | | `-ImplicitCastExpr 0x1391421e8 <col:16> 'char *' <ArrayToPointerDecay>
|   |   | | |   `-StringLiteral 0x139142100 <col:16> 'char[4]' lvalue "STR"
|   |   | | `-ImplicitCastExpr 0x139142230 <col:23> 'int' <IntegralCast>
|   |   | |   `-ImplicitCastExpr 0x139142218 <col:23> 'unsigned char' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x139142120 <col:23> 'unsigned char' lvalue Var 0x139128538 'token' 'unsigned char'
|   |   | |-UnaryOperator 0x139142268 <line:13:4, col:6> 'int' prefix '++'
|   |   | | `-DeclRefExpr 0x139142248 <col:6> 'int' lvalue Var 0x139128480 'len' 'int'
|   |   | `-IfStmt 0x139142380 <line:14:8, line:15:11>
|   |   |   |-BinaryOperator 0x1391422f0 <line:14:13, col:21> 'int' '<'
|   |   |   | |-ImplicitCastExpr 0x1391422d8 <col:13> 'int' <IntegralCast>
|   |   |   | | `-ImplicitCastExpr 0x1391422c0 <col:13> 'unsigned char' <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x139142280 <col:13> 'unsigned char' lvalue Var 0x139128538 'token' 'unsigned char'
|   |   |   | `-IntegerLiteral 0x1391422a0 <col:21> 'int' 32
|   |   |   `-CompoundAssignOperator 0x139142350 <line:15:4, col:11> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |     |-DeclRefExpr 0x139142310 <col:4> 'int' lvalue Var 0x139128480 'len' 'int'
|   |   |     `-IntegerLiteral 0x139142330 <col:11> 'int' 5
|   |   `-UnaryOperator 0x1391423f0 <line:16:3, col:5> 'const char *' prefix '++'
|   |     `-DeclRefExpr 0x1391423d0 <col:5> 'const char *' lvalue Var 0x1391282b8 'ptr' 'const char *'
|   |-IfStmt 0x139142700 <line:19:2, line:20:10>
|   | |-UnaryOperator 0x1391426a0 <line:19:7, col:49> 'int' prefix '!' cannot overflow
|   | | `-ParenExpr 0x139142680 <col:9, col:49> 'char *'
|   | |   `-BinaryOperator 0x139142660 <col:11, col:47> 'char *' '='
|   | |     |-DeclRefExpr 0x139142448 <col:11> 'char *' lvalue Var 0x1391283d0 'out' 'char *'
|   | |     `-CStyleCastExpr 0x139142638 <col:17, col:47> 'char *' <IntegralToPointer>
|   | |       `-CallExpr 0x1391425f8 <col:25, col:47> 'int'
|   | |         |-ImplicitCastExpr 0x1391425e0 <col:25> 'int (*)()' <FunctionToPointerDecay>
|   | |         | `-DeclRefExpr 0x139142548 <col:25> 'int ()' Function 0x139142490 'cJSON_malloc' 'int ()'
|   | |         `-BinaryOperator 0x1391425c0 <col:39, col:45> 'int' '+'
|   | |           |-ImplicitCastExpr 0x1391425a8 <col:39> 'int' <LValueToRValue>
|   | |           | `-DeclRefExpr 0x139142568 <col:39> 'int' lvalue Var 0x139128480 'len' 'int'
|   | |           `-IntegerLiteral 0x139142588 <col:45> 'int' 3
|   | `-ReturnStmt 0x1391426f0 <line:20:3, col:10>
|   |   `-ImplicitCastExpr 0x1391426d8 <col:10> 'char *' <NullToPointer>
|   |     `-IntegerLiteral 0x1391426b8 <col:10> 'int' 0
|   |-BinaryOperator 0x139142778 <line:22:2, col:9> 'char *' '='
|   | |-DeclRefExpr 0x139142720 <col:2> 'char *' lvalue Var 0x139128350 'ptr2' 'char *'
|   | `-ImplicitCastExpr 0x139142760 <col:9> 'char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x139142740 <col:9> 'char *' lvalue Var 0x1391283d0 'out' 'char *'
|   |-BinaryOperator 0x139144600 <line:23:2, col:8> 'const char *' '='
|   | |-DeclRefExpr 0x139142798 <col:2> 'const char *' lvalue Var 0x1391282b8 'ptr' 'const char *'
|   | `-ImplicitCastExpr 0x1391427d8 <col:8> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1391427b8 <col:8> 'const char *' lvalue ParmVar 0x1391280d8 'str' 'const char *'
|   |-BinaryOperator 0x1391446a0 <line:24:2, col:12> 'char' '='
|   | |-UnaryOperator 0x139144658 <col:2, col:7> 'char' lvalue prefix '*' cannot overflow
|   | | `-UnaryOperator 0x139144640 <col:3, col:7> 'char *' postfix '++'
|   | |   `-DeclRefExpr 0x139144620 <col:3> 'char *' lvalue Var 0x139128350 'ptr2' 'char *'
|   | `-ImplicitCastExpr 0x139144688 <col:12> 'char' <IntegralCast>
|   |   `-CharacterLiteral 0x139144670 <col:12> 'int' 34
|   |-WhileStmt 0x139145858 <line:25:2, line:45:2>
|   | |-ImplicitCastExpr 0x139144710 <line:25:10, col:11> 'char' <LValueToRValue>
|   | | `-UnaryOperator 0x1391446f8 <col:10, col:11> 'const char' lvalue prefix '*' cannot overflow
|   | |   `-ImplicitCastExpr 0x1391446e0 <col:11> 'const char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1391446c0 <col:11> 'const char *' lvalue Var 0x1391282b8 'ptr' 'const char *'
|   | `-CompoundStmt 0x139145840 <col:17, line:45:2>
|   |   `-IfStmt 0x139145810 <line:26:3, line:44:3> has_else
|   |     |-BinaryOperator 0x1391449b8 <line:26:8, col:61> 'int' '&&'
|   |     | |-BinaryOperator 0x1391448e0 <col:8, col:45> 'int' '&&'
|   |     | | |-BinaryOperator 0x139144808 <col:8, col:31> 'int' '>'
|   |     | | | |-ImplicitCastExpr 0x1391447f0 <col:8, col:25> 'int' <IntegralCast>
|   |     | | | | `-CStyleCastExpr 0x1391447a8 <col:8, col:25> 'unsigned char' <IntegralCast>
|   |     | | | |   `-ImplicitCastExpr 0x139144790 <col:24, col:25> 'char' <LValueToRValue> part_of_explicit_cast
|   |     | | | |     `-UnaryOperator 0x139144760 <col:24, col:25> 'const char' lvalue prefix '*' cannot overflow
|   |     | | | |       `-ImplicitCastExpr 0x139144748 <col:25> 'const char *' <LValueToRValue>
|   |     | | | |         `-DeclRefExpr 0x139144728 <col:25> 'const char *' lvalue Var 0x1391282b8 'ptr' 'const char *'
|   |     | | | `-IntegerLiteral 0x1391447d0 <col:31> 'int' 31
|   |     | | `-BinaryOperator 0x1391448c0 <col:37, col:45> 'int' '!='
|   |     | |   |-ImplicitCastExpr 0x1391448a8 <col:37, col:38> 'int' <IntegralCast>
|   |     | |   | `-ImplicitCastExpr 0x139144890 <col:37, col:38> 'char' <LValueToRValue>
|   |     | |   |   `-UnaryOperator 0x139144860 <col:37, col:38> 'const char' lvalue prefix '*' cannot overflow
|   |     | |   |     `-ImplicitCastExpr 0x139144848 <col:38> 'const char *' <LValueToRValue>
|   |     | |   |       `-DeclRefExpr 0x139144828 <col:38> 'const char *' lvalue Var 0x1391282b8 'ptr' 'const char *'
|   |     | |   `-CharacterLiteral 0x139144878 <col:45> 'int' 34
|   |     | `-BinaryOperator 0x139144998 <col:53, col:61> 'int' '!='
|   |     |   |-ImplicitCastExpr 0x139144980 <col:53, col:54> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x139144968 <col:53, col:54> 'char' <LValueToRValue>
|   |     |   |   `-UnaryOperator 0x139144938 <col:53, col:54> 'const char' lvalue prefix '*' cannot overflow
|   |     |   |     `-ImplicitCastExpr 0x139144920 <col:54> 'const char *' <LValueToRValue>
|   |     |   |       `-DeclRefExpr 0x139144900 <col:54> 'const char *' lvalue Var 0x1391282b8 'ptr' 'const char *'
|   |     |   `-CharacterLiteral 0x139144950 <col:61> 'int' 92
|   |     |-BinaryOperator 0x139144a90 <line:27:4, col:18> 'char' '='
|   |     | |-UnaryOperator 0x139144a10 <col:4, col:9> 'char' lvalue prefix '*' cannot overflow
|   |     | | `-UnaryOperator 0x1391449f8 <col:5, col:9> 'char *' postfix '++'
|   |     | |   `-DeclRefExpr 0x1391449d8 <col:5> 'char *' lvalue Var 0x139128350 'ptr2' 'char *'
|   |     | `-ImplicitCastExpr 0x139144a78 <col:14, col:18> 'char' <LValueToRValue>
|   |     |   `-UnaryOperator 0x139144a60 <col:14, col:18> 'const char' lvalue prefix '*' cannot overflow
|   |     |     `-UnaryOperator 0x139144a48 <col:15, col:18> 'const char *' postfix '++'
|   |     |       `-DeclRefExpr 0x139144a28 <col:15> 'const char *' lvalue Var 0x1391282b8 'ptr' 'const char *'
|   |     `-CompoundStmt 0x1391457f0 <line:28:8, line:44:3>
|   |       |-BinaryOperator 0x139144b30 <line:29:4, col:14> 'char' '='
|   |       | |-UnaryOperator 0x139144ae8 <col:4, col:9> 'char' lvalue prefix '*' cannot overflow
|   |       | | `-UnaryOperator 0x139144ad0 <col:5, col:9> 'char *' postfix '++'
|   |       | |   `-DeclRefExpr 0x139144ab0 <col:5> 'char *' lvalue Var 0x139128350 'ptr2' 'char *'
|   |       | `-ImplicitCastExpr 0x139144b18 <col:14> 'char' <IntegralCast>
|   |       |   `-CharacterLiteral 0x139144b00 <col:14> 'int' 92
|   |       `-SwitchStmt 0x139144c28 <line:30:4, line:43:4>
|   |         |-ImplicitCastExpr 0x139144c10 <line:30:13, col:25> 'int' <IntegralCast>
|   |         | `-BinaryOperator 0x139144bf0 <col:13, col:25> 'unsigned char' '='
|   |         |   |-DeclRefExpr 0x139144b50 <col:13> 'unsigned char' lvalue Var 0x139128538 'token' 'unsigned char'
|   |         |   `-ImplicitCastExpr 0x139144bd8 <col:21, col:25> 'unsigned char' <IntegralCast>
|   |         |     `-ImplicitCastExpr 0x139144bc0 <col:21, col:25> 'char' <LValueToRValue>
|   |         |       `-UnaryOperator 0x139144ba8 <col:21, col:25> 'const char' lvalue prefix '*' cannot overflow
|   |         |         `-UnaryOperator 0x139144b90 <col:22, col:25> 'const char *' postfix '++'
|   |         |           `-DeclRefExpr 0x139144b70 <col:22> 'const char *' lvalue Var 0x1391282b8 'ptr' 'const char *'
|   |         `-CompoundStmt 0x139145760 <col:30, line:43:4>
|   |           |-CaseStmt 0x139144c80 <line:31:5, col:26>
|   |           | |-ConstantExpr 0x139144c68 <col:10> 'int'
|   |           | | `-CharacterLiteral 0x139144c50 <col:10> 'int' 92
|   |           | `-BinaryOperator 0x139144d28 <col:16, col:26> 'char' '='
|   |           |   |-UnaryOperator 0x139144ce0 <col:16, col:21> 'char' lvalue prefix '*' cannot overflow
|   |           |   | `-UnaryOperator 0x139144cc8 <col:17, col:21> 'char *' postfix '++'
|   |           |   |   `-DeclRefExpr 0x139144ca8 <col:17> 'char *' lvalue Var 0x139128350 'ptr2' 'char *'
|   |           |   `-ImplicitCastExpr 0x139144d10 <col:26> 'char' <IntegralCast>
|   |           |     `-CharacterLiteral 0x139144cf8 <col:26> 'int' 92
|   |           |-BreakStmt 0x139144d48 <col:32>
|   |           |-CaseStmt 0x139144d80 <line:32:5, col:20>
|   |           | |-ConstantExpr 0x139144d68 <col:10> 'int'
|   |           | | `-CharacterLiteral 0x139144d50 <col:10> 'int' 1398034978
|   |           | `-BreakStmt 0x139144da8 <col:20>
|   |           |-CaseStmt 0x139144de0 <line:33:5, col:26>
|   |           | |-ConstantExpr 0x139144dc8 <col:10> 'int'
|   |           | | `-CharacterLiteral 0x139144db0 <col:10> 'int' 8
|   |           | `-BinaryOperator 0x139144e88 <col:16, col:26> 'char' '='
|   |           |   |-UnaryOperator 0x139144e40 <col:16, col:21> 'char' lvalue prefix '*' cannot overflow
|   |           |   | `-UnaryOperator 0x139144e28 <col:17, col:21> 'char *' postfix '++'
|   |           |   |   `-DeclRefExpr 0x139144e08 <col:17> 'char *' lvalue Var 0x139128350 'ptr2' 'char *'
|   |           |   `-ImplicitCastExpr 0x139144e70 <col:26> 'char' <IntegralCast>
|   |           |     `-CharacterLiteral 0x139144e58 <col:26> 'int' 98
|   |           |-BreakStmt 0x139144ea8 <col:31>
|   |           |-CaseStmt 0x139144ee0 <line:34:5, col:26>
|   |           | |-ConstantExpr 0x139144ec8 <col:10> 'int'
|   |           | | `-CharacterLiteral 0x139144eb0 <col:10> 'int' 12
|   |           | `-BinaryOperator 0x139144f88 <col:16, col:26> 'char' '='
|   |           |   |-UnaryOperator 0x139144f40 <col:16, col:21> 'char' lvalue prefix '*' cannot overflow
|   |           |   | `-UnaryOperator 0x139144f28 <col:17, col:21> 'char *' postfix '++'
|   |           |   |   `-DeclRefExpr 0x139144f08 <col:17> 'char *' lvalue Var 0x139128350 'ptr2' 'char *'
|   |           |   `-ImplicitCastExpr 0x139144f70 <col:26> 'char' <IntegralCast>
|   |           |     `-CharacterLiteral 0x139144f58 <col:26> 'int' 102
|   |           |-BreakStmt 0x139144fa8 <col:31>
|   |           |-CaseStmt 0x139144fe0 <line:35:5, col:26>
|   |           | |-ConstantExpr 0x139144fc8 <col:10> 'int'
|   |           | | `-CharacterLiteral 0x139144fb0 <col:10> 'int' 10
|   |           | `-BinaryOperator 0x139145088 <col:16, col:26> 'char' '='
|   |           |   |-UnaryOperator 0x139145040 <col:16, col:21> 'char' lvalue prefix '*' cannot overflow
|   |           |   | `-UnaryOperator 0x139145028 <col:17, col:21> 'char *' postfix '++'
|   |           |   |   `-DeclRefExpr 0x139145008 <col:17> 'char *' lvalue Var 0x139128350 'ptr2' 'char *'
|   |           |   `-ImplicitCastExpr 0x139145070 <col:26> 'char' <IntegralCast>
|   |           |     `-CharacterLiteral 0x139145058 <col:26> 'int' 110
|   |           |-BreakStmt 0x1391450a8 <col:31>
|   |           |-CaseStmt 0x1391450e0 <line:36:5, col:26>
|   |           | |-ConstantExpr 0x1391450c8 <col:10> 'int'
|   |           | | `-CharacterLiteral 0x1391450b0 <col:10> 'int' 13
|   |           | `-BinaryOperator 0x139145188 <col:16, col:26> 'char' '='
|   |           |   |-UnaryOperator 0x139145140 <col:16, col:21> 'char' lvalue prefix '*' cannot overflow
|   |           |   | `-UnaryOperator 0x139145128 <col:17, col:21> 'char *' postfix '++'
|   |           |   |   `-DeclRefExpr 0x139145108 <col:17> 'char *' lvalue Var 0x139128350 'ptr2' 'char *'
|   |           |   `-ImplicitCastExpr 0x139145170 <col:26> 'char' <IntegralCast>
|   |           |     `-CharacterLiteral 0x139145158 <col:26> 'int' 114
|   |           |-BreakStmt 0x1391451a8 <col:31>
|   |           |-CaseStmt 0x1391451e0 <line:37:5, col:26>
|   |           | |-ConstantExpr 0x1391451c8 <col:10> 'int'
|   |           | | `-CharacterLiteral 0x1391451b0 <col:10> 'int' 9
|   |           | `-BinaryOperator 0x139145288 <col:16, col:26> 'char' '='
|   |           |   |-UnaryOperator 0x139145240 <col:16, col:21> 'char' lvalue prefix '*' cannot overflow
|   |           |   | `-UnaryOperator 0x139145228 <col:17, col:21> 'char *' postfix '++'
|   |           |   |   `-DeclRefExpr 0x139145208 <col:17> 'char *' lvalue Var 0x139128350 'ptr2' 'char *'
|   |           |   `-ImplicitCastExpr 0x139145270 <col:26> 'char' <IntegralCast>
|   |           |     `-CharacterLiteral 0x139145258 <col:26> 'int' 116
|   |           |-BreakStmt 0x1391452a8 <col:31>
|   |           |-DefaultStmt 0x1391456c8 <line:38:5, line:40:33>
|   |           | `-CallExpr 0x139145618 <col:5, col:33> 'int'
|   |           |   |-ImplicitCastExpr 0x139145600 <col:5> 'int (*)(char *, const char *, ...)' <FunctionToPointerDecay>
|   |           |   | `-DeclRefExpr 0x139145510 <col:5> 'int (char *, const char *, ...)' Function 0x1391452f8 'sprintf' 'int (char *, const char *, ...)'
|   |           |   |-ImplicitCastExpr 0x139145650 <col:14> 'char *' <LValueToRValue>
|   |           |   | `-DeclRefExpr 0x139145530 <col:14> 'char *' lvalue Var 0x139128350 'ptr2' 'char *'
|   |           |   |-ImplicitCastExpr 0x139145680 <col:20> 'const char *' <NoOp>
|   |           |   | `-ImplicitCastExpr 0x139145668 <col:20> 'char *' <ArrayToPointerDecay>
|   |           |   |   `-StringLiteral 0x139145550 <col:20> 'char[4]' lvalue "STR"
|   |           |   `-ImplicitCastExpr 0x1391456b0 <col:27> 'int' <IntegralCast>
|   |           |     `-ImplicitCastExpr 0x139145698 <col:27> 'unsigned char' <LValueToRValue>
|   |           |       `-DeclRefExpr 0x139145570 <col:27> 'unsigned char' lvalue Var 0x139128538 'token' 'unsigned char'
|   |           |-CompoundAssignOperator 0x139145728 <line:41:5, col:13> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
|   |           | |-DeclRefExpr 0x1391456e8 <col:5> 'char *' lvalue Var 0x139128350 'ptr2' 'char *'
|   |           | `-IntegerLiteral 0x139145708 <col:13> 'int' 5
|   |           `-BreakStmt 0x139145758 <line:42:5>
|   |-BinaryOperator 0x1391458f8 <line:46:2, col:12> 'char' '='
|   | |-UnaryOperator 0x1391458b0 <col:2, col:7> 'char' lvalue prefix '*' cannot overflow
|   | | `-UnaryOperator 0x139145898 <col:3, col:7> 'char *' postfix '++'
|   | |   `-DeclRefExpr 0x139145878 <col:3> 'char *' lvalue Var 0x139128350 'ptr2' 'char *'
|   | `-ImplicitCastExpr 0x1391458e0 <col:12> 'char' <IntegralCast>
|   |   `-CharacterLiteral 0x1391458c8 <col:12> 'int' 34
|   |-BinaryOperator 0x1391459a0 <line:47:2, col:12> 'char' '='
|   | |-UnaryOperator 0x139145950 <col:2, col:7> 'char' lvalue prefix '*' cannot overflow
|   | | `-UnaryOperator 0x139145938 <col:3, col:7> 'char *' postfix '++'
|   | |   `-DeclRefExpr 0x139145918 <col:3> 'char *' lvalue Var 0x139128350 'ptr2' 'char *'
|   | `-ImplicitCastExpr 0x139145988 <col:12> 'char' <IntegralCast>
|   |   `-IntegerLiteral 0x139145968 <col:12> 'int' 0
|   `-ReturnStmt 0x1391459f8 <line:48:2, col:9>
|     `-ImplicitCastExpr 0x1391459e0 <col:9> 'char *' <LValueToRValue>
|       `-DeclRefExpr 0x1391459c0 <col:9> 'char *' lvalue Var 0x1391283d0 'out' 'char *'
|-FunctionDecl 0x139141ec0 <line:12:8> col:8 implicit used strchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x139141fc0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x139142028 <<invalid sloc>> <invalid sloc> 'int'
| `-BuiltinAttr 0x139141f68 <<invalid sloc>> Implicit 893
`-FunctionDecl 0x1391452f8 <line:40:5> col:5 implicit used sprintf 'int (char *, const char *, ...)' extern
  |-ParmVarDecl 0x1391453f8 <<invalid sloc>> <invalid sloc> 'char *'
  |-ParmVarDecl 0x139145460 <<invalid sloc>> <invalid sloc> 'const char *'
  |-BuiltinAttr 0x1391453a0 <<invalid sloc>> Implicit 906
  `-FormatAttr 0x1391454d8 <col:5> Implicit printf 2 3
