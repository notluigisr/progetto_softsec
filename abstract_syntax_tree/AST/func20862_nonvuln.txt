TranslationUnitDecl 0x14a055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x14a0564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x14a055bd0 '__int128'
|-TypedefDecl 0x14a056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x14a055bf0 'unsigned __int128'
|-TypedefDecl 0x14a126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x14a126000 'struct __NSConstantString_tag'
|   `-Record 0x14a056580 '__NSConstantString_tag'
|-TypedefDecl 0x14a126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x14a055d90 '__SVInt8_t'
|-TypedefDecl 0x14a126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x14a055db0 '__SVInt16_t'
|-TypedefDecl 0x14a126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x14a055dd0 '__SVInt32_t'
|-TypedefDecl 0x14a1263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x14a055df0 '__SVInt64_t'
|-TypedefDecl 0x14a126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x14a055e10 '__SVUint8_t'
|-TypedefDecl 0x14a1264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x14a055e30 '__SVUint16_t'
|-TypedefDecl 0x14a126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x14a055e50 '__SVUint32_t'
|-TypedefDecl 0x14a126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x14a055e70 '__SVUint64_t'
|-TypedefDecl 0x14a1265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x14a055e90 '__SVFloat16_t'
|-TypedefDecl 0x14a126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x14a055eb0 '__SVFloat32_t'
|-TypedefDecl 0x14a1266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x14a055ed0 '__SVFloat64_t'
|-TypedefDecl 0x14a126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x14a055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x14a126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x14a055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x14a1267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x14a055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x14a126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x14a055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x14a1268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x14a055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x14a126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x14a055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x14a126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x14a055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x14a1269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x14a055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x14a126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x14a055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x14a126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x14a056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x14a126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x14a056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x14a126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x14a056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x14a126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x14a056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x14a126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x14a056090 '__clang_svint8x3_t'
|-TypedefDecl 0x14a126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x14a0560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x14a126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x14a0560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x14a126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x14a0560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x14a126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x14a056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x14a126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x14a056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x14a126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x14a056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x14a126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x14a056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x14a126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x14a056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x14a127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x14a0561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x14a127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x14a0561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x14a1278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x14a0561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x14a127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x14a056210 '__clang_svint8x4_t'
|-TypedefDecl 0x14a1279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x14a056230 '__clang_svint16x4_t'
|-TypedefDecl 0x14a127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x14a056250 '__clang_svint32x4_t'
|-TypedefDecl 0x14a127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x14a056270 '__clang_svint64x4_t'
|-TypedefDecl 0x14a127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x14a056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x14a127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x14a0562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x14a127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x14a0562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x14a127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x14a0562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x14a127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x14a056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x14a127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x14a056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x14a127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x14a056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x14a127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x14a056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x14a127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x14a056390 '__SVBool_t'
|-TypedefDecl 0x14a127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x14a0563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x14a127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x14a0563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x14a127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x14a0563f0 '__SVCount_t'
|-TypedefDecl 0x14a127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x14a127fb0 'char *'
|   `-BuiltinType 0x14a0556b0 'char'
|-TypedefDecl 0x14a128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x14a127fb0 'char *'
|   `-BuiltinType 0x14a0556b0 'char'
|-FunctionDecl 0x14a128318 <dataset_diviso_filec/func20862_nonvuln.c:1:1, line:65:1> line:1:12 invalid jsR_hasproperty 'int (int *, int *, const char *)' static
| |-ParmVarDecl 0x14a128128 <col:28, col:38> col:38 invalid J 'int *'
| |-ParmVarDecl 0x14a1281a8 <col:41, col:52> col:52 invalid obj 'int *'
| |-ParmVarDecl 0x14a128228 <col:57, col:69> col:69 used name 'const char *'
| `-CompoundStmt 0x14a143990 <line:2:1, line:65:1>
|   |-DeclStmt 0x14a128470 <line:4:2, col:7>
|   | `-VarDecl 0x14a128408 <col:2, col:6> col:6 used k 'int'
|   |-IfStmt 0x14b00a830 <line:6:2, line:50:2> has_else
|   | |-BinaryOperator 0x14a128548 <line:6:6, col:19> 'int' contains-errors '=='
|   | | |-CXXDependentScopeMemberExpr 0x14a1284a8 <col:6, col:11> '<dependent type>' contains-errors lvalue ->type
|   | | | `-RecoveryExpr 0x14a128488 <col:6> '<dependent type>' contains-errors lvalue
|   | | `-RecoveryExpr 0x14a128528 <col:19> '<dependent type>' contains-errors lvalue
|   | |-CompoundStmt 0x14a142098 <col:30, line:11:2>
|   | | `-IfStmt 0x14a142078 <line:7:3, line:10:3>
|   | |   |-UnaryOperator 0x14a141d50 <line:7:7, col:26> 'int' prefix '!' cannot overflow
|   | |   | `-CallExpr 0x14a141cd8 <col:8, col:26> 'int'
|   | |   |   |-ImplicitCastExpr 0x14a141cc0 <col:8> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x14a141bc0 <col:8> 'int (const char *, const char *)' Function 0x14a1419e0 'strcmp' 'int (const char *, const char *)'
|   | |   |   |-ImplicitCastExpr 0x14a141d08 <col:15> 'const char *' <LValueToRValue>
|   | |   |   | `-DeclRefExpr 0x14a141be0 <col:15> 'const char *' lvalue ParmVar 0x14a128228 'name' 'const char *'
|   | |   |   `-ImplicitCastExpr 0x14a141d38 <col:21> 'const char *' <NoOp>
|   | |   |     `-ImplicitCastExpr 0x14a141d20 <col:21> 'char *' <ArrayToPointerDecay>
|   | |   |       `-StringLiteral 0x14a141c40 <col:21> 'char[4]' lvalue "STR"
|   | |   `-CompoundStmt 0x14a142058 <col:29, line:10:3>
|   | |     |-CallExpr 0x14a141ff8 <line:8:4, col:36> '<dependent type>' contains-errors
|   | |     | |-DeclRefExpr 0x14a141ec0 <col:4> 'int ()' Function 0x14a141e08 'js_pushnumber' 'int ()'
|   | |     | |-RecoveryExpr 0x14a141ee0 <col:18> '<dependent type>' contains-errors lvalue
|   | |     | `-CXXDependentScopeMemberExpr 0x14a141fb0 <col:21, col:30> '<dependent type>' contains-errors lvalue .length
|   | |     |   `-CXXDependentScopeMemberExpr 0x14a141f68 <col:21, col:28> '<dependent type>' contains-errors lvalue .a
|   | |     |     `-CXXDependentScopeMemberExpr 0x14a141f20 <col:21, col:26> '<dependent type>' contains-errors lvalue ->u
|   | |     |       `-RecoveryExpr 0x14a141f00 <col:21> '<dependent type>' contains-errors lvalue
|   | |     `-ReturnStmt 0x14a142048 <line:9:4, col:11>
|   | |       `-IntegerLiteral 0x14a142028 <col:11> 'int' 1
|   | `-IfStmt 0x14b00a800 <line:13:7, line:50:2> has_else
|   |   |-BinaryOperator 0x14a142170 <line:13:11, col:24> 'int' contains-errors '=='
|   |   | |-CXXDependentScopeMemberExpr 0x14a1420d0 <col:11, col:16> '<dependent type>' contains-errors lvalue ->type
|   |   | | `-RecoveryExpr 0x14a1420b0 <col:11> '<dependent type>' contains-errors lvalue
|   |   | `-RecoveryExpr 0x14a142150 <col:24> '<dependent type>' contains-errors lvalue
|   |   |-CompoundStmt 0x14b008ee8 <col:36, line:22:2>
|   |   | |-IfStmt 0x14a142480 <line:14:3, line:17:3>
|   |   | | |-UnaryOperator 0x14a1422b0 <line:14:7, col:26> 'int' prefix '!' cannot overflow
|   |   | | | `-CallExpr 0x14a142238 <col:8, col:26> 'int'
|   |   | | |   |-ImplicitCastExpr 0x14a142220 <col:8> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |   | | |   | `-DeclRefExpr 0x14a142190 <col:8> 'int (const char *, const char *)' Function 0x14a1419e0 'strcmp' 'int (const char *, const char *)'
|   |   | | |   |-ImplicitCastExpr 0x14a142268 <col:15> 'const char *' <LValueToRValue>
|   |   | | |   | `-DeclRefExpr 0x14a1421b0 <col:15> 'const char *' lvalue ParmVar 0x14a128228 'name' 'const char *'
|   |   | | |   `-ImplicitCastExpr 0x14a142298 <col:21> 'const char *' <NoOp>
|   |   | | |     `-ImplicitCastExpr 0x14a142280 <col:21> 'char *' <ArrayToPointerDecay>
|   |   | | |       `-StringLiteral 0x14a1421d0 <col:21> 'char[4]' lvalue "STR"
|   |   | | `-CompoundStmt 0x14a142460 <col:29, line:17:3>
|   |   | |   |-CallExpr 0x14a142400 <line:15:4, col:36> '<dependent type>' contains-errors
|   |   | |   | |-DeclRefExpr 0x14a1422c8 <col:4> 'int ()' Function 0x14a141e08 'js_pushnumber' 'int ()'
|   |   | |   | |-RecoveryExpr 0x14a1422e8 <col:18> '<dependent type>' contains-errors lvalue
|   |   | |   | `-CXXDependentScopeMemberExpr 0x14a1423b8 <col:21, col:30> '<dependent type>' contains-errors lvalue .length
|   |   | |   |   `-CXXDependentScopeMemberExpr 0x14a142370 <col:21, col:28> '<dependent type>' contains-errors lvalue .s
|   |   | |   |     `-CXXDependentScopeMemberExpr 0x14a142328 <col:21, col:26> '<dependent type>' contains-errors lvalue ->u
|   |   | |   |       `-RecoveryExpr 0x14a142308 <col:21> '<dependent type>' contains-errors lvalue
|   |   | |   `-ReturnStmt 0x14a142450 <line:16:4, col:11>
|   |   | |     `-IntegerLiteral 0x14a142430 <col:11> 'int' 1
|   |   | `-IfStmt 0x14b008ec8 <line:18:3, line:21:3>
|   |   |   |-CallExpr 0x14a142618 <line:18:7, col:34> '<dependent type>' contains-errors
|   |   |   | |-DeclRefExpr 0x14a142580 <col:7> 'int ()' Function 0x14a1424c8 'js_isarrayindex' 'int ()'
|   |   |   | |-RecoveryExpr 0x14a1425a0 <col:23> '<dependent type>' contains-errors lvalue
|   |   |   | |-DeclRefExpr 0x14a1425c0 <col:26> 'const char *' lvalue ParmVar 0x14a128228 'name' 'const char *'
|   |   |   | `-UnaryOperator 0x14a142600 <col:32, col:33> 'int *' prefix '&' cannot overflow
|   |   |   |   `-DeclRefExpr 0x14a1425e0 <col:33> 'int' lvalue Var 0x14a128408 'k' 'int'
|   |   |   `-CompoundStmt 0x14b008ea8 <col:37, line:21:3>
|   |   |     |-CallExpr 0x14b008e48 <line:19:4, col:51> '<dependent type>' contains-errors
|   |   |     | |-DeclRefExpr 0x14a142730 <col:4> 'int ()' Function 0x14a142678 'js_pushrune' 'int ()'
|   |   |     | |-RecoveryExpr 0x14a142750 <col:16> '<dependent type>' contains-errors lvalue
|   |   |     | `-CallExpr 0x14b008e10 <col:19, col:50> '<dependent type>' contains-errors
|   |   |     |   |-DeclRefExpr 0x14b008cb8 <col:19> 'int ()' Function 0x14b008c00 'js_runeat' 'int ()'
|   |   |     |   |-RecoveryExpr 0x14b008cd8 <col:29> '<dependent type>' contains-errors lvalue
|   |   |     |   |-CXXDependentScopeMemberExpr 0x14b008da8 <col:32, col:41> '<dependent type>' contains-errors lvalue .string
|   |   |     |   | `-CXXDependentScopeMemberExpr 0x14b008d60 <col:32, col:39> '<dependent type>' contains-errors lvalue .s
|   |   |     |   |   `-CXXDependentScopeMemberExpr 0x14b008d18 <col:32, col:37> '<dependent type>' contains-errors lvalue ->u
|   |   |     |   |     `-RecoveryExpr 0x14b008cf8 <col:32> '<dependent type>' contains-errors lvalue
|   |   |     |   `-DeclRefExpr 0x14b008df0 <col:49> 'int' lvalue Var 0x14a128408 'k' 'int'
|   |   |     `-ReturnStmt 0x14b008e98 <line:20:4, col:11>
|   |   |       `-IntegerLiteral 0x14b008e78 <col:11> 'int' 1
|   |   `-IfStmt 0x14b00a7d0 <line:24:7, line:50:2> has_else
|   |     |-BinaryOperator 0x14b008fc8 <line:24:11, col:24> 'int' contains-errors '=='
|   |     | |-CXXDependentScopeMemberExpr 0x14b008f28 <col:11, col:16> '<dependent type>' contains-errors lvalue ->type
|   |     | | `-RecoveryExpr 0x14b008f08 <col:11> '<dependent type>' contains-errors lvalue
|   |     | `-RecoveryExpr 0x14b008fa8 <col:24> '<dependent type>' contains-errors lvalue
|   |     |-CompoundStmt 0x14b00a308 <col:36, line:45:2>
|   |     | |-IfStmt 0x14b0093b8 <line:25:3, line:28:3>
|   |     | | |-UnaryOperator 0x14b009108 <line:25:7, col:26> 'int' prefix '!' cannot overflow
|   |     | | | `-CallExpr 0x14b009090 <col:8, col:26> 'int'
|   |     | | |   |-ImplicitCastExpr 0x14b009078 <col:8> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |     | | |   | `-DeclRefExpr 0x14b008fe8 <col:8> 'int (const char *, const char *)' Function 0x14a1419e0 'strcmp' 'int (const char *, const char *)'
|   |     | | |   |-ImplicitCastExpr 0x14b0090c0 <col:15> 'const char *' <LValueToRValue>
|   |     | | |   | `-DeclRefExpr 0x14b009008 <col:15> 'const char *' lvalue ParmVar 0x14a128228 'name' 'const char *'
|   |     | | |   `-ImplicitCastExpr 0x14b0090f0 <col:21> 'const char *' <NoOp>
|   |     | | |     `-ImplicitCastExpr 0x14b0090d8 <col:21> 'char *' <ArrayToPointerDecay>
|   |     | | |       `-StringLiteral 0x14b009028 <col:21> 'char[4]' lvalue "STR"
|   |     | | `-CompoundStmt 0x14b009398 <col:29, line:28:3>
|   |     | |   |-CallExpr 0x14b009338 <line:26:4, col:37> '<dependent type>' contains-errors
|   |     | |   | |-DeclRefExpr 0x14b009200 <col:4> 'int ()' Function 0x14b009148 'js_pushliteral' 'int ()'
|   |     | |   | |-RecoveryExpr 0x14b009220 <col:19> '<dependent type>' contains-errors lvalue
|   |     | |   | `-CXXDependentScopeMemberExpr 0x14b0092f0 <col:22, col:31> '<dependent type>' contains-errors lvalue .source
|   |     | |   |   `-CXXDependentScopeMemberExpr 0x14b0092a8 <col:22, col:29> '<dependent type>' contains-errors lvalue .r
|   |     | |   |     `-CXXDependentScopeMemberExpr 0x14b009260 <col:22, col:27> '<dependent type>' contains-errors lvalue ->u
|   |     | |   |       `-RecoveryExpr 0x14b009240 <col:22> '<dependent type>' contains-errors lvalue
|   |     | |   `-ReturnStmt 0x14b009388 <line:27:4, col:11>
|   |     | |     `-IntegerLiteral 0x14b009368 <col:11> 'int' 1
|   |     | |-IfStmt 0x14b009850 <line:29:3, line:32:3>
|   |     | | |-UnaryOperator 0x14b0094f8 <line:29:7, col:26> 'int' prefix '!' cannot overflow
|   |     | | | `-CallExpr 0x14b009480 <col:8, col:26> 'int'
|   |     | | |   |-ImplicitCastExpr 0x14b009468 <col:8> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |     | | |   | `-DeclRefExpr 0x14b0093d8 <col:8> 'int (const char *, const char *)' Function 0x14a1419e0 'strcmp' 'int (const char *, const char *)'
|   |     | | |   |-ImplicitCastExpr 0x14b0094b0 <col:15> 'const char *' <LValueToRValue>
|   |     | | |   | `-DeclRefExpr 0x14b0093f8 <col:15> 'const char *' lvalue ParmVar 0x14a128228 'name' 'const char *'
|   |     | | |   `-ImplicitCastExpr 0x14b0094e0 <col:21> 'const char *' <NoOp>
|   |     | | |     `-ImplicitCastExpr 0x14b0094c8 <col:21> 'char *' <ArrayToPointerDecay>
|   |     | | |       `-StringLiteral 0x14b009418 <col:21> 'char[4]' lvalue "STR"
|   |     | | `-CompoundStmt 0x14b009830 <col:29, line:32:3>
|   |     | |   |-CallExpr 0x14b0097d0 <line:30:4, col:50> '<dependent type>' contains-errors
|   |     | |   | |-DeclRefExpr 0x14b0095f0 <col:4> 'int ()' Function 0x14b009538 'js_pushboolean' 'int ()'
|   |     | |   | |-RecoveryExpr 0x14b009610 <col:19> '<dependent type>' contains-errors lvalue
|   |     | |   | `-BinaryOperator 0x14b0097b0 <col:22, col:39> '<dependent type>' contains-errors '&'
|   |     | |   |   |-CXXDependentScopeMemberExpr 0x14b0096e0 <col:22, col:31> '<dependent type>' contains-errors lvalue .flags
|   |     | |   |   | `-CXXDependentScopeMemberExpr 0x14b009698 <col:22, col:29> '<dependent type>' contains-errors lvalue .r
|   |     | |   |   |   `-CXXDependentScopeMemberExpr 0x14b009650 <col:22, col:27> '<dependent type>' contains-errors lvalue ->u
|   |     | |   |   |     `-RecoveryExpr 0x14b009630 <col:22> '<dependent type>' contains-errors lvalue
|   |     | |   |   `-RecoveryExpr 0x14b009790 <col:39> '<dependent type>' contains-errors lvalue
|   |     | |   `-ReturnStmt 0x14b009820 <line:31:4, col:11>
|   |     | |     `-IntegerLiteral 0x14b009800 <col:11> 'int' 1
|   |     | |-IfStmt 0x14b009c20 <line:33:3, line:36:3>
|   |     | | |-UnaryOperator 0x14b009990 <line:33:7, col:26> 'int' prefix '!' cannot overflow
|   |     | | | `-CallExpr 0x14b009918 <col:8, col:26> 'int'
|   |     | | |   |-ImplicitCastExpr 0x14b009900 <col:8> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |     | | |   | `-DeclRefExpr 0x14b009870 <col:8> 'int (const char *, const char *)' Function 0x14a1419e0 'strcmp' 'int (const char *, const char *)'
|   |     | | |   |-ImplicitCastExpr 0x14b009948 <col:15> 'const char *' <LValueToRValue>
|   |     | | |   | `-DeclRefExpr 0x14b009890 <col:15> 'const char *' lvalue ParmVar 0x14a128228 'name' 'const char *'
|   |     | | |   `-ImplicitCastExpr 0x14b009978 <col:21> 'const char *' <NoOp>
|   |     | | |     `-ImplicitCastExpr 0x14b009960 <col:21> 'char *' <ArrayToPointerDecay>
|   |     | | |       `-StringLiteral 0x14b0098b0 <col:21> 'char[4]' lvalue "STR"
|   |     | | `-CompoundStmt 0x14b009c00 <col:29, line:36:3>
|   |     | |   |-CallExpr 0x14b009b88 <line:34:4, col:50> '<dependent type>' contains-errors
|   |     | |   | |-DeclRefExpr 0x14b0099a8 <col:4> 'int ()' Function 0x14b009538 'js_pushboolean' 'int ()'
|   |     | |   | |-RecoveryExpr 0x14b0099c8 <col:19> '<dependent type>' contains-errors lvalue
|   |     | |   | `-BinaryOperator 0x14b009b68 <col:22, col:39> '<dependent type>' contains-errors '&'
|   |     | |   |   |-CXXDependentScopeMemberExpr 0x14b009a98 <col:22, col:31> '<dependent type>' contains-errors lvalue .flags
|   |     | |   |   | `-CXXDependentScopeMemberExpr 0x14b009a50 <col:22, col:29> '<dependent type>' contains-errors lvalue .r
|   |     | |   |   |   `-CXXDependentScopeMemberExpr 0x14b009a08 <col:22, col:27> '<dependent type>' contains-errors lvalue ->u
|   |     | |   |   |     `-RecoveryExpr 0x14b0099e8 <col:22> '<dependent type>' contains-errors lvalue
|   |     | |   |   `-RecoveryExpr 0x14b009b48 <col:39> '<dependent type>' contains-errors lvalue
|   |     | |   `-ReturnStmt 0x14b009bd8 <line:35:4, col:11>
|   |     | |     `-IntegerLiteral 0x14b009bb8 <col:11> 'int' 1
|   |     | |-IfStmt 0x14b009fd8 <line:37:3, line:40:3>
|   |     | | |-UnaryOperator 0x14b009d60 <line:37:7, col:26> 'int' prefix '!' cannot overflow
|   |     | | | `-CallExpr 0x14b009ce8 <col:8, col:26> 'int'
|   |     | | |   |-ImplicitCastExpr 0x14b009cd0 <col:8> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |     | | |   | `-DeclRefExpr 0x14b009c40 <col:8> 'int (const char *, const char *)' Function 0x14a1419e0 'strcmp' 'int (const char *, const char *)'
|   |     | | |   |-ImplicitCastExpr 0x14b009d18 <col:15> 'const char *' <LValueToRValue>
|   |     | | |   | `-DeclRefExpr 0x14b009c60 <col:15> 'const char *' lvalue ParmVar 0x14a128228 'name' 'const char *'
|   |     | | |   `-ImplicitCastExpr 0x14b009d48 <col:21> 'const char *' <NoOp>
|   |     | | |     `-ImplicitCastExpr 0x14b009d30 <col:21> 'char *' <ArrayToPointerDecay>
|   |     | | |       `-StringLiteral 0x14b009c80 <col:21> 'char[4]' lvalue "STR"
|   |     | | `-CompoundStmt 0x14b009fb8 <col:29, line:40:3>
|   |     | |   |-CallExpr 0x14b009f58 <line:38:4, col:50> '<dependent type>' contains-errors
|   |     | |   | |-DeclRefExpr 0x14b009d78 <col:4> 'int ()' Function 0x14b009538 'js_pushboolean' 'int ()'
|   |     | |   | |-RecoveryExpr 0x14b009d98 <col:19> '<dependent type>' contains-errors lvalue
|   |     | |   | `-BinaryOperator 0x14b009f38 <col:22, col:39> '<dependent type>' contains-errors '&'
|   |     | |   |   |-CXXDependentScopeMemberExpr 0x14b009e68 <col:22, col:31> '<dependent type>' contains-errors lvalue .flags
|   |     | |   |   | `-CXXDependentScopeMemberExpr 0x14b009e20 <col:22, col:29> '<dependent type>' contains-errors lvalue .r
|   |     | |   |   |   `-CXXDependentScopeMemberExpr 0x14b009dd8 <col:22, col:27> '<dependent type>' contains-errors lvalue ->u
|   |     | |   |   |     `-RecoveryExpr 0x14b009db8 <col:22> '<dependent type>' contains-errors lvalue
|   |     | |   |   `-RecoveryExpr 0x14b009f18 <col:39> '<dependent type>' contains-errors lvalue
|   |     | |   `-ReturnStmt 0x14b009fa8 <line:39:4, col:11>
|   |     | |     `-IntegerLiteral 0x14b009f88 <col:11> 'int' 1
|   |     | `-IfStmt 0x14b00a2e8 <line:41:3, line:44:3>
|   |     |   |-UnaryOperator 0x14b00a118 <line:41:7, col:26> 'int' prefix '!' cannot overflow
|   |     |   | `-CallExpr 0x14b00a0a0 <col:8, col:26> 'int'
|   |     |   |   |-ImplicitCastExpr 0x14b00a088 <col:8> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |     |   |   | `-DeclRefExpr 0x14b009ff8 <col:8> 'int (const char *, const char *)' Function 0x14a1419e0 'strcmp' 'int (const char *, const char *)'
|   |     |   |   |-ImplicitCastExpr 0x14b00a0d0 <col:15> 'const char *' <LValueToRValue>
|   |     |   |   | `-DeclRefExpr 0x14b00a018 <col:15> 'const char *' lvalue ParmVar 0x14a128228 'name' 'const char *'
|   |     |   |   `-ImplicitCastExpr 0x14b00a100 <col:21> 'const char *' <NoOp>
|   |     |   |     `-ImplicitCastExpr 0x14b00a0e8 <col:21> 'char *' <ArrayToPointerDecay>
|   |     |   |       `-StringLiteral 0x14b00a038 <col:21> 'char[4]' lvalue "STR"
|   |     |   `-CompoundStmt 0x14b00a2c8 <col:29, line:44:3>
|   |     |     |-CallExpr 0x14b00a268 <line:42:4, col:34> '<dependent type>' contains-errors
|   |     |     | |-DeclRefExpr 0x14b00a130 <col:4> 'int ()' Function 0x14a141e08 'js_pushnumber' 'int ()'
|   |     |     | |-RecoveryExpr 0x14b00a150 <col:18> '<dependent type>' contains-errors lvalue
|   |     |     | `-CXXDependentScopeMemberExpr 0x14b00a220 <col:21, col:30> '<dependent type>' contains-errors lvalue .last
|   |     |     |   `-CXXDependentScopeMemberExpr 0x14b00a1d8 <col:21, col:28> '<dependent type>' contains-errors lvalue .r
|   |     |     |     `-CXXDependentScopeMemberExpr 0x14b00a190 <col:21, col:26> '<dependent type>' contains-errors lvalue ->u
|   |     |     |       `-RecoveryExpr 0x14b00a170 <col:21> '<dependent type>' contains-errors lvalue
|   |     |     `-ReturnStmt 0x14b00a2b8 <line:43:4, col:11>
|   |     |       `-IntegerLiteral 0x14b00a298 <col:11> 'int' 1
|   |     `-IfStmt 0x14b00a7b0 <line:47:7, line:50:2>
|   |       |-RecoveryExpr 0x14b00a3a8 <line:47:11, col:24> '_Bool' contains-errors
|   |       `-CompoundStmt 0x14b00a798 <col:38, line:50:2>
|   |         `-IfStmt 0x14b00a778 <line:48:3, line:49:11>
|   |           |-BinaryOperator 0x14b00a728 <line:48:7, col:67> 'int' contains-errors '&&'
|   |           | |-CXXDependentScopeMemberExpr 0x14b00a478 <col:7, col:19> '<dependent type>' contains-errors lvalue .has
|   |           | | `-CXXDependentScopeMemberExpr 0x14b00a430 <col:7, col:14> '<dependent type>' contains-errors lvalue .user
|   |           | |   `-CXXDependentScopeMemberExpr 0x14b00a3e8 <col:7, col:12> '<dependent type>' contains-errors lvalue ->u
|   |           | |     `-RecoveryExpr 0x14b00a3c8 <col:7> '<dependent type>' contains-errors lvalue
|   |           | `-CallExpr 0x14b00a6f0 <col:26, col:67> '<dependent type>' contains-errors
|   |           |   |-CXXDependentScopeMemberExpr 0x14b00a570 <col:26, col:38> '<dependent type>' contains-errors lvalue .has
|   |           |   | `-CXXDependentScopeMemberExpr 0x14b00a528 <col:26, col:33> '<dependent type>' contains-errors lvalue .user
|   |           |   |   `-CXXDependentScopeMemberExpr 0x14b00a4e0 <col:26, col:31> '<dependent type>' contains-errors lvalue ->u
|   |           |   |     `-RecoveryExpr 0x14b00a4c0 <col:26> '<dependent type>' contains-errors lvalue
|   |           |   |-RecoveryExpr 0x14b00a5b8 <col:42> '<dependent type>' contains-errors lvalue
|   |           |   |-CXXDependentScopeMemberExpr 0x14b00a688 <col:45, col:57> '<dependent type>' contains-errors lvalue .data
|   |           |   | `-CXXDependentScopeMemberExpr 0x14b00a640 <col:45, col:52> '<dependent type>' contains-errors lvalue .user
|   |           |   |   `-CXXDependentScopeMemberExpr 0x14b00a5f8 <col:45, col:50> '<dependent type>' contains-errors lvalue ->u
|   |           |   |     `-RecoveryExpr 0x14b00a5d8 <col:45> '<dependent type>' contains-errors lvalue
|   |           |   `-DeclRefExpr 0x14b00a6d0 <col:63> 'const char *' lvalue ParmVar 0x14a128228 'name' 'const char *'
|   |           `-ReturnStmt 0x14b00a768 <line:49:4, col:11>
|   |             `-IntegerLiteral 0x14b00a748 <col:11> 'int' 1
|   |-IfStmt 0x14a143940 <line:53:2, line:62:2>
|   | |-RecoveryExpr 0x14b00a9f8 <line:53:6> '_Bool' contains-errors
|   | `-CompoundStmt 0x14a143920 <col:11, line:62:2>
|   |   |-IfStmt 0x14a1438c0 <line:54:3, line:60:3> has_else
|   |   | |-RecoveryExpr 0x14b00aa18 <line:54:7, col:12> '_Bool' contains-errors
|   |   | |-CompoundStmt 0x14a143770 <col:20, line:58:3>
|   |   | | |-CallExpr 0x14b00abb8 <line:56:4, col:24> '<dependent type>' contains-errors
|   |   | | | |-DeclRefExpr 0x14b00ab58 <col:4> 'int ()' Function 0x14b00aa60 'js_pushobject' 'int ()'
|   |   | | | |-RecoveryExpr 0x14b00ab78 <col:18> '<dependent type>' contains-errors lvalue
|   |   | | | `-RecoveryExpr 0x14b00ab98 <col:21> '<dependent type>' contains-errors lvalue
|   |   | | `-CallExpr 0x14a143740 <line:57:4, col:16> '<dependent type>' contains-errors
|   |   | |   |-DeclRefExpr 0x14a1436e0 <col:4> 'int ()' Function 0x14a143628 'js_call' 'int ()'
|   |   | |   |-RecoveryExpr 0x14a143700 <col:12> '<dependent type>' contains-errors lvalue
|   |   | |   `-IntegerLiteral 0x14a143720 <col:15> 'int' 0
|   |   | `-CompoundStmt 0x14a1438b0 <line:58:10, line:60:3>
|   |   `-ReturnStmt 0x14a143910 <line:61:3, col:10>
|   |     `-IntegerLiteral 0x14a1438f0 <col:10> 'int' 1
|   `-ReturnStmt 0x14a143980 <line:64:2, col:9>
|     `-IntegerLiteral 0x14a143960 <col:9> 'int' 0
`-FunctionDecl 0x14a1419e0 <line:7:8> col:8 implicit used strcmp 'int (const char *, const char *)' extern
  |-ParmVarDecl 0x14a141ae0 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x14a141b48 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x14a141a88 <<invalid sloc>> Implicit 887
