TranslationUnitDecl 0x12b055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x12b0564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x12b055bd0 '__int128'
|-TypedefDecl 0x12b056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x12b055bf0 'unsigned __int128'
|-TypedefDecl 0x12b80be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12b80bc00 'struct __NSConstantString_tag'
|   `-Record 0x12b056580 '__NSConstantString_tag'
|-TypedefDecl 0x12b80be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x12b055d90 '__SVInt8_t'
|-TypedefDecl 0x12b80bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x12b055db0 '__SVInt16_t'
|-TypedefDecl 0x12b80bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x12b055dd0 '__SVInt32_t'
|-TypedefDecl 0x12b80bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x12b055df0 '__SVInt64_t'
|-TypedefDecl 0x12b80c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x12b055e10 '__SVUint8_t'
|-TypedefDecl 0x12b80c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x12b055e30 '__SVUint16_t'
|-TypedefDecl 0x12b80c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x12b055e50 '__SVUint32_t'
|-TypedefDecl 0x12b80c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x12b055e70 '__SVUint64_t'
|-TypedefDecl 0x12b80c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x12b055e90 '__SVFloat16_t'
|-TypedefDecl 0x12b80c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x12b055eb0 '__SVFloat32_t'
|-TypedefDecl 0x12b80c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x12b055ed0 '__SVFloat64_t'
|-TypedefDecl 0x12b80c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x12b055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12b80c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x12b055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12b80c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x12b055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12b80c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x12b055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12b80c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x12b055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12b80c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x12b055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12b80c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x12b055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12b80c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x12b055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12b80c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x12b055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12b80c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x12b056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12b80c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x12b056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12b80c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x12b056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12b80c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x12b056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12b80c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x12b056090 '__clang_svint8x3_t'
|-TypedefDecl 0x12b80c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x12b0560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12b80c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x12b0560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12b80c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x12b0560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12b80c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x12b056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12b80ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x12b056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12b80cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x12b056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12b80cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x12b056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12b80cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x12b056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12b80d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x12b0561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12b80d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x12b0561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12b80d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x12b0561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12b80d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x12b056210 '__clang_svint8x4_t'
|-TypedefDecl 0x12b80d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x12b056230 '__clang_svint16x4_t'
|-TypedefDecl 0x12b80d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x12b056250 '__clang_svint32x4_t'
|-TypedefDecl 0x12b80d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x12b056270 '__clang_svint64x4_t'
|-TypedefDecl 0x12b80d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x12b056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12b80d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x12b0562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12b80d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x12b0562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12b80d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x12b0562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12b80d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x12b056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12b80d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x12b056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12b80d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x12b056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12b80d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x12b056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12b80da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x12b056390 '__SVBool_t'
|-TypedefDecl 0x12b80da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x12b0563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12b80dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x12b0563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12b80db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x12b0563f0 '__SVCount_t'
|-TypedefDecl 0x12b80dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12b80dbb0 'char *'
|   `-BuiltinType 0x12b0556b0 'char'
|-TypedefDecl 0x12b80dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12b80dbb0 'char *'
|   `-BuiltinType 0x12b0556b0 'char'
`-FunctionDecl 0x12b80dfd8 <dataset_diviso_filec/func17968_vuln.c:1:1, line:58:1> line:1:1 invalid eval_lambda 'int (char **, int *, int *, int)'
  |-ParmVarDecl 0x12b80dd28 <line:2:5, col:14> col:14 used arg 'char **'
  |-ParmVarDecl 0x12b80ddd8 <line:3:5, col:15> col:15 referenced invalid rettv 'int *'
  |-ParmVarDecl 0x12b80de58 <line:4:5, col:16> col:16 invalid evalarg 'int *'
  |-ParmVarDecl 0x12b80ded8 <line:5:5, col:10> col:10 used verbose 'int'
  `-CompoundStmt 0x12b829c40 <line:6:1, line:58:1>
    |-DeclStmt 0x12b80e218 <line:7:5, line:8:51>
    | `-VarDecl 0x12b80e0b8 <line:7:5, col:10> col:10 used evaluate 'int'
    |-DeclStmt 0x12b80e2b0 <line:10:5, col:13>
    | `-VarDecl 0x12b80e248 <col:5, col:10> col:10 used ret 'int'
    |-BinaryOperator 0x12b80e3b0 <line:12:5, col:21> '<dependent type>' contains-errors '='
    | |-CXXDependentScopeMemberExpr 0x12b80e310 <col:5, col:12> '<dependent type>' contains-errors lvalue ->v_type
    | | `-RecoveryExpr 0x12b80e2e8 <col:5> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x12b80e2c8 <col:5> 'int *' lvalue ParmVar 0x12b80ddd8 'rettv' 'int *'
    | `-RecoveryExpr 0x12b80e390 <col:21> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x12b829178 <line:14:5, line:34:5> has_else
    | |-BinaryOperator 0x12b8284a8 <line:14:9, col:18> 'int' '=='
    | | |-ImplicitCastExpr 0x12b828490 <col:9, col:11> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x12b828478 <col:9, col:11> 'char' <LValueToRValue>
    | | |   `-UnaryOperator 0x12b828448 <col:9, col:11> 'char' lvalue prefix '*' cannot overflow
    | | |     `-ImplicitCastExpr 0x12b828430 <col:10, col:11> 'char *' <LValueToRValue>
    | | |       `-UnaryOperator 0x12b828418 <col:10, col:11> 'char *' lvalue prefix '*' cannot overflow
    | | |         `-ImplicitCastExpr 0x12b828400 <col:11> 'char **' <LValueToRValue>
    | | |           `-DeclRefExpr 0x12b80e3d0 <col:11> 'char **' lvalue ParmVar 0x12b80dd28 'arg' 'char **'
    | | `-CharacterLiteral 0x12b828460 <col:18> 'int' 123
    | |-CompoundStmt 0x12b8287b8 <line:15:5, line:18:5>
    | | `-BinaryOperator 0x12b828798 <line:17:2, col:48> 'int' contains-errors '='
    | |   |-DeclRefExpr 0x12b8284c8 <col:2> 'int' lvalue Var 0x12b80e248 'ret' 'int'
    | |   `-CallExpr 0x12b828758 <col:8, col:48> '<dependent type>' contains-errors
    | |     |-DeclRefExpr 0x12b828640 <col:8> 'int ()' Function 0x12b828588 'get_lambda_tv' 'int ()'
    | |     |-DeclRefExpr 0x12b828660 <col:22> 'char **' lvalue ParmVar 0x12b80dd28 'arg' 'char **'
    | |     |-RecoveryExpr 0x12b828680 <col:27> '<dependent type>' contains-errors lvalue
    | |     |-RecoveryExpr 0x12b828738 <col:34> '<dependent type>' contains-errors lvalue
    | |     `-RecoveryExpr 0x12b8286b8 <col:41> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x12b829148 <line:20:5, line:34:5>
    |   |-UnaryOperator 0x12b828820 <line:22:2, col:5> 'char *' prefix '++'
    |   | `-UnaryOperator 0x12b828808 <col:4, col:5> 'char *' lvalue prefix '*' cannot overflow
    |   |   `-ImplicitCastExpr 0x12b8287f0 <col:5> 'char **' <LValueToRValue>
    |   |     `-DeclRefExpr 0x12b8287d0 <col:5> 'char **' lvalue ParmVar 0x12b80dd28 'arg' 'char **'
    |   |-BinaryOperator 0x12b8289f0 <line:23:2, col:33> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x12b828838 <col:2> 'int' lvalue Var 0x12b80e248 'ret' 'int'
    |   | `-CallExpr 0x12b8289b8 <col:8, col:33> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x12b828938 <col:8> 'int ()' Function 0x12b828880 'eval1' 'int ()'
    |   |   |-DeclRefExpr 0x12b828958 <col:14> 'char **' lvalue ParmVar 0x12b80dd28 'arg' 'char **'
    |   |   |-RecoveryExpr 0x12b828978 <col:19> '<dependent type>' contains-errors lvalue
    |   |   `-RecoveryExpr 0x12b828998 <col:26> '<dependent type>' contains-errors lvalue
    |   |-BinaryOperator 0x12b828c00 <line:24:2, col:46> 'char *' contains-errors '='
    |   | |-UnaryOperator 0x12b828a48 <col:2, col:3> 'char *' lvalue prefix '*' cannot overflow
    |   | | `-ImplicitCastExpr 0x12b828a30 <col:3> 'char **' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x12b828a10 <col:3> 'char **' lvalue ParmVar 0x12b80dd28 'arg' 'char **'
    |   | `-CallExpr 0x12b828bd0 <col:9, col:46> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x12b828b40 <col:9> 'int ()' Function 0x12b828a88 'skipwhite_and_linebreak' 'int ()'
    |   |   |-UnaryOperator 0x12b828b98 <col:33, col:34> 'char *' lvalue prefix '*' cannot overflow
    |   |   | `-ImplicitCastExpr 0x12b828b80 <col:34> 'char **' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x12b828b60 <col:34> 'char **' lvalue ParmVar 0x12b80dd28 'arg' 'char **'
    |   |   `-RecoveryExpr 0x12b828bb0 <col:39> '<dependent type>' contains-errors lvalue
    |   `-IfStmt 0x12b829118 <line:25:2, line:33:2> has_else
    |     |-BinaryOperator 0x12b828ce8 <line:25:6, col:15> 'int' '=='
    |     | |-ImplicitCastExpr 0x12b828cd0 <col:6, col:8> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x12b828cb8 <col:6, col:8> 'char' <LValueToRValue>
    |     | |   `-UnaryOperator 0x12b828c88 <col:6, col:8> 'char' lvalue prefix '*' cannot overflow
    |     | |     `-ImplicitCastExpr 0x12b828c70 <col:7, col:8> 'char *' <LValueToRValue>
    |     | |       `-UnaryOperator 0x12b828c58 <col:7, col:8> 'char *' lvalue prefix '*' cannot overflow
    |     | |         `-ImplicitCastExpr 0x12b828c40 <col:8> 'char **' <LValueToRValue>
    |     | |           `-DeclRefExpr 0x12b828c20 <col:8> 'char **' lvalue ParmVar 0x12b80dd28 'arg' 'char **'
    |     | `-CharacterLiteral 0x12b828ca0 <col:15> 'int' 41
    |     |-CompoundStmt 0x12b828d70 <line:26:2, line:28:2>
    |     | `-UnaryOperator 0x12b828d58 <line:27:6, col:9> 'char *' prefix '++'
    |     |   `-UnaryOperator 0x12b828d40 <col:8, col:9> 'char *' lvalue prefix '*' cannot overflow
    |     |     `-ImplicitCastExpr 0x12b828d28 <col:9> 'char **' <LValueToRValue>
    |     |       `-DeclRefExpr 0x12b828d08 <col:9> 'char **' lvalue ParmVar 0x12b80dd28 'arg' 'char **'
    |     `-CompoundStmt 0x12b8290f8 <line:30:2, line:33:2>
    |       |-CallExpr 0x12b829038 <line:31:6, col:37> '<dependent type>' contains-errors
    |       | |-DeclRefExpr 0x12b828e68 <col:6> 'int ()' Function 0x12b828db0 'emsg' 'int ()'
    |       | `-CallExpr 0x12b829010 <col:11, col:36> '<dependent type>' contains-errors
    |       |   |-DeclRefExpr 0x12b828f68 <col:11> 'int ()' Function 0x12b828eb0 '_' 'int ()'
    |       |   `-RecoveryExpr 0x12b828ff0 <col:13> '<dependent type>' contains-errors lvalue
    |       `-BinaryOperator 0x12b8290d8 <line:32:6, col:12> 'int' contains-errors '='
    |         |-DeclRefExpr 0x12b829060 <col:6> 'int' lvalue Var 0x12b80e248 'ret' 'int'
    |         `-RecoveryExpr 0x12b8290b8 <col:12> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x12b829b70 <line:35:5, line:50:2> has_else
    | |-BinaryOperator 0x12b829220 <line:35:9, col:16> 'int' contains-errors '!='
    | | |-DeclRefExpr 0x12b8291a8 <col:9> 'int' lvalue Var 0x12b80e248 'ret' 'int'
    | | `-RecoveryExpr 0x12b829200 <col:16> '<dependent type>' contains-errors lvalue
    | |-ReturnStmt 0x12b829278 <line:36:2, col:9>
    | | `-RecoveryExpr 0x12b829258 <col:9> '<dependent type>' contains-errors lvalue
    | `-IfStmt 0x12b829b40 <line:37:10, line:50:2> has_else
    |   |-BinaryOperator 0x12b829350 <line:37:14, col:23> 'int' '!='
    |   | |-ImplicitCastExpr 0x12b829338 <col:14, col:16> 'int' <IntegralCast>
    |   | | `-ImplicitCastExpr 0x12b829320 <col:14, col:16> 'char' <LValueToRValue>
    |   | |   `-UnaryOperator 0x12b8292f0 <col:14, col:16> 'char' lvalue prefix '*' cannot overflow
    |   | |     `-ImplicitCastExpr 0x12b8292d8 <col:15, col:16> 'char *' <LValueToRValue>
    |   | |       `-UnaryOperator 0x12b8292c0 <col:15, col:16> 'char *' lvalue prefix '*' cannot overflow
    |   | |         `-ImplicitCastExpr 0x12b8292a8 <col:16> 'char **' <LValueToRValue>
    |   | |           `-DeclRefExpr 0x12b829288 <col:16> 'char **' lvalue ParmVar 0x12b80dd28 'arg' 'char **'
    |   | `-CharacterLiteral 0x12b829308 <col:23> 'int' 40
    |   |-CompoundStmt 0x12b829978 <line:38:5, line:48:5>
    |   | |-IfStmt 0x12b8297f0 <line:39:2, line:45:2>
    |   | | |-ImplicitCastExpr 0x12b829390 <line:39:6> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x12b829370 <col:6> 'int' lvalue ParmVar 0x12b80ded8 'verbose' 'int'
    |   | | `-CompoundStmt 0x12b8297e0 <line:40:2, line:45:2>
    |   | `-CallExpr 0x12b829930 <line:46:2, col:16> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x12b8298f0 <col:2> 'int ()' Function 0x12b829838 'clear_tv' 'int ()'
    |   |   `-RecoveryExpr 0x12b829910 <col:11> '<dependent type>' contains-errors lvalue
    |   `-NullStmt 0x12b829b38 <line:50:2>
    `-ReturnStmt 0x12b829c30 <line:57:5, col:12>
      `-ImplicitCastExpr 0x12b829c18 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x12b829bf8 <col:12> 'int' lvalue Var 0x12b80e248 'ret' 'int'
