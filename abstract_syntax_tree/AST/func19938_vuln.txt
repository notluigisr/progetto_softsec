TranslationUnitDecl 0x131055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1310564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x131055bd0 '__int128'
|-TypedefDecl 0x131056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x131055bf0 'unsigned __int128'
|-TypedefDecl 0x131126a30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x131126800 'struct __NSConstantString_tag'
|   `-Record 0x131056580 '__NSConstantString_tag'
|-TypedefDecl 0x131126a98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x131055d90 '__SVInt8_t'
|-TypedefDecl 0x131126b00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x131055db0 '__SVInt16_t'
|-TypedefDecl 0x131126b68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x131055dd0 '__SVInt32_t'
|-TypedefDecl 0x131126bd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x131055df0 '__SVInt64_t'
|-TypedefDecl 0x131126c38 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x131055e10 '__SVUint8_t'
|-TypedefDecl 0x131126ca0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x131055e30 '__SVUint16_t'
|-TypedefDecl 0x131126d08 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x131055e50 '__SVUint32_t'
|-TypedefDecl 0x131126d70 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x131055e70 '__SVUint64_t'
|-TypedefDecl 0x131126dd8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x131055e90 '__SVFloat16_t'
|-TypedefDecl 0x131126e40 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x131055eb0 '__SVFloat32_t'
|-TypedefDecl 0x131126ea8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x131055ed0 '__SVFloat64_t'
|-TypedefDecl 0x131126f10 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x131055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x131126f78 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x131055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x131126fe0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x131055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x131127048 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x131055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1311270b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x131055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x131127118 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x131055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x131127180 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x131055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1311271e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x131055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x131127250 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x131055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x1311272b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x131056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x131127320 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x131056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x131127388 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x131056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x1311273f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x131056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x131127458 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x131056090 '__clang_svint8x3_t'
|-TypedefDecl 0x1311274c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1310560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x131127528 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1310560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x131127590 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1310560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x1311275f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x131056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x131127660 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x131056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x1311276c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x131056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x131127730 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x131056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x131127798 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x131056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x131128000 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1310561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x131128068 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1310561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1311280d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1310561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x131128138 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x131056210 '__clang_svint8x4_t'
|-TypedefDecl 0x1311281a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x131056230 '__clang_svint16x4_t'
|-TypedefDecl 0x131128208 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x131056250 '__clang_svint32x4_t'
|-TypedefDecl 0x131128270 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x131056270 '__clang_svint64x4_t'
|-TypedefDecl 0x1311282d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x131056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x131128340 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1310562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x1311283a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1310562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x131128410 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1310562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x131128478 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x131056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x1311284e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x131056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x131128548 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x131056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x1311285b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x131056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x131128618 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x131056390 '__SVBool_t'
|-TypedefDecl 0x131128680 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1310563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x1311286e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1310563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x131128750 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1310563f0 '__SVCount_t'
|-TypedefDecl 0x1311287f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1311287b0 'char *'
|   `-BuiltinType 0x1310556b0 'char'
|-TypedefDecl 0x131128868 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1311287b0 'char *'
|   `-BuiltinType 0x1310556b0 'char'
|-FunctionDecl 0x1311289a8 <dataset_diviso_filec/func19938_vuln.c:1:1, line:76:1> line:1:12 checkout 'int (int)' static
| |-ParmVarDecl 0x1311288d8 <col:21, col:25> col:25 used submodule_progress 'int'
| `-CompoundStmt 0x13300cae0 <line:2:1, line:76:1>
|   |-DeclStmt 0x131141248 <line:3:2, col:22>
|   | |-RecordDecl 0x131128aa0 <col:2, col:9> col:9 struct object_id
|   | `-VarDecl 0x131128b98 <col:2, col:19> col:19 invalid oid 'struct object_id'
|   |-DeclStmt 0x1311412e0 <line:4:2, col:12>
|   | `-VarDecl 0x131141278 <col:2, col:8> col:8 used head 'char *'
|   |-DeclStmt 0x1311414e8 <line:5:2, col:29>
|   | |-RecordDecl 0x1311412f8 <col:2, col:9> col:9 struct lock_file
|   | `-VarDecl 0x131141468 <col:2, col:20> col:20 used lock_file 'struct lock_file *'
|   |-DeclStmt 0x131141678 <line:6:2, col:34>
|   | |-RecordDecl 0x131141500 <col:2, col:9> col:9 struct unpack_trees_options
|   | `-VarDecl 0x1311415f8 <col:2, col:30> col:30 referenced invalid opts 'struct unpack_trees_options'
|   |-DeclStmt 0x131141878 <line:7:2, col:19>
|   | |-RecordDecl 0x131141690 <col:2, col:9> col:9 struct tree
|   | `-VarDecl 0x1311417f8 <col:2, col:15> col:15 used tree 'struct tree *'
|   |-DeclStmt 0x131141a08 <line:8:2, col:20>
|   | |-RecordDecl 0x131141890 <col:2, col:9> col:9 struct tree_desc
|   | `-VarDecl 0x131141988 <col:2, col:19> col:19 invalid t 'struct tree_desc'
|   |-DeclStmt 0x131141ac0 <line:9:2, col:13>
|   | `-VarDecl 0x131141a38 <col:2, col:12> col:6 used err 'int' cinit
|   |   `-IntegerLiteral 0x131141aa0 <col:12> 'int' 0
|   |-IfStmt 0x131141b58 <line:11:2, line:12:10>
|   | |-RecoveryExpr 0x131141b08 <line:11:6> '<dependent type>' contains-errors lvalue
|   | `-ReturnStmt 0x131141b48 <line:12:3, col:10>
|   |   `-IntegerLiteral 0x131141b28 <col:10> 'int' 0
|   |-BinaryOperator 0x131141ea8 <line:14:2, col:66> 'char *' contains-errors '='
|   | |-DeclRefExpr 0x131141b78 <col:2> 'char *' lvalue Var 0x131141278 'head' 'char *'
|   | `-CallExpr 0x131141e68 <col:9, col:66> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x131141cb0 <col:9> 'int ()' Function 0x131141bf8 'resolve_refdup' 'int ()'
|   |   |-StringLiteral 0x131141d10 <col:24> 'char[4]' lvalue "STR"
|   |   |-RecoveryExpr 0x131141e28 <col:31> '<dependent type>' contains-errors lvalue
|   |   |-CXXDependentScopeMemberExpr 0x131141d68 <col:52, col:56> '<dependent type>' contains-errors lvalue .hash
|   |   | `-RecoveryExpr 0x131141d48 <col:52> '<dependent type>' contains-errors lvalue
|   |   `-RecoveryExpr 0x131141e48 <col:62> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x1311464a8 <line:15:2, line:19:2>
|   | |-UnaryOperator 0x131141f00 <line:15:6, col:7> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x131141ee8 <col:7> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x131141ec8 <col:7> 'char *' lvalue Var 0x131141278 'head' 'char *'
|   | `-CompoundStmt 0x131146488 <col:13, line:19:2>
|   |   |-CallExpr 0x131146430 <line:16:3, line:17:12> 'int'
|   |   | |-ImplicitCastExpr 0x131146418 <line:16:3> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x131141ff8 <col:3> 'int ()' Function 0x131141f40 'warning' 'int ()'
|   |   | `-CallExpr 0x1311421d8 <col:11, line:17:11> 'int'
|   |   |   |-ImplicitCastExpr 0x1311421c0 <line:16:11> 'int (*)()' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1311420f8 <col:11> 'int ()' Function 0x131142040 '_' 'int ()'
|   |   |   `-ImplicitCastExpr 0x131146400 <col:13, line:17:6> 'char *' <ArrayToPointerDecay>
|   |   |     `-StringLiteral 0x131142160 <line:16:13, line:17:6> 'char[7]' lvalue "STRSTR"
|   |   `-ReturnStmt 0x131146478 <line:18:3, col:10>
|   |     `-IntegerLiteral 0x131146458 <col:10> 'int' 0
|   |-IfStmt 0x131146f48 <line:20:2, line:26:2> has_else
|   | |-UnaryOperator 0x131146858 <line:20:6, col:25> 'int' prefix '!' cannot overflow
|   | | `-CallExpr 0x1311467c8 <col:7, col:25> 'int'
|   | |   |-ImplicitCastExpr 0x1311467b0 <col:7> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x1311466f0 <col:7> 'int (const char *, const char *)' Function 0x131146510 'strcmp' 'int (const char *, const char *)'
|   | |   |-ImplicitCastExpr 0x131146810 <col:14> 'const char *' <NoOp>
|   | |   | `-ImplicitCastExpr 0x1311467f8 <col:14> 'char *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x131146710 <col:14> 'char *' lvalue Var 0x131141278 'head' 'char *'
|   | |   `-ImplicitCastExpr 0x131146840 <col:20> 'const char *' <NoOp>
|   | |     `-ImplicitCastExpr 0x131146828 <col:20> 'char *' <ArrayToPointerDecay>
|   | |       `-StringLiteral 0x131146730 <col:20> 'char[4]' lvalue "STR"
|   | |-CompoundStmt 0x131146b50 <col:28, line:23:2>
|   | | `-IfStmt 0x131146b30 <line:21:3, line:22:34>
|   | |   |-RecoveryExpr 0x131146888 <line:21:7> '<dependent type>' contains-errors lvalue
|   | |   `-CallExpr 0x131146b08 <line:22:4, col:34> '<dependent type>' contains-errors
|   | |     |-DeclRefExpr 0x131146988 <col:4> 'int ()' Function 0x1311468d0 'detach_advice' 'int ()'
|   | |     `-CallExpr 0x131146ae0 <col:18, col:33> '<dependent type>' contains-errors
|   | |       |-DeclRefExpr 0x131146a88 <col:18> 'int ()' Function 0x1311469d0 'oid_to_hex' 'int ()'
|   | |       `-UnaryOperator 0x131146ac8 <col:29, col:30> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | |         `-RecoveryExpr 0x131146aa8 <col:30> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x131146f30 <line:23:9, line:26:2>
|   |   `-IfStmt 0x131146f10 <line:24:3, line:25:16>
|   |     |-UnaryOperator 0x131146d20 <line:24:7, col:31> 'int' prefix '!' cannot overflow
|   |     | `-CallExpr 0x131146cc0 <col:8, col:31> 'int'
|   |     |   |-ImplicitCastExpr 0x131146ca8 <col:8> 'int (*)()' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x131146c48 <col:8> 'int ()' Function 0x131146b90 'starts_with' 'int ()'
|   |     |   |-ImplicitCastExpr 0x131146cf0 <col:20> 'char *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x131146c68 <col:20> 'char *' lvalue Var 0x131141278 'head' 'char *'
|   |     |   `-ImplicitCastExpr 0x131146d08 <col:26> 'char *' <ArrayToPointerDecay>
|   |     |     `-StringLiteral 0x131146c88 <col:26> 'char[4]' lvalue "STR"
|   |     `-CallExpr 0x131146ee8 <line:25:4, col:16> 'int'
|   |       |-ImplicitCastExpr 0x131146ed0 <col:4> 'int (*)()' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x131146e18 <col:4> 'int ()' Function 0x131146d60 'die' 'int ()'
|   |       `-CallExpr 0x131146e90 <col:8, col:15> 'int'
|   |         |-ImplicitCastExpr 0x131146e78 <col:8> 'int (*)()' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x131146e38 <col:8> 'int ()' Function 0x131142040 '_' 'int ()'
|   |         `-ImplicitCastExpr 0x131146eb8 <col:10> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x131146e58 <col:10> 'char[4]' lvalue "STR"
|   |-CallExpr 0x1311471c8 <line:27:2, col:11> 'void'
|   | |-ImplicitCastExpr 0x1311471b0 <col:2> 'void (*)(void *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x131147128 <col:2> 'void (void *)' Function 0x131146fb8 'free' 'void (void *)'
|   | `-ImplicitCastExpr 0x131147208 <col:7> 'void *' <BitCast>
|   |   `-ImplicitCastExpr 0x1311471f0 <col:7> 'char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x131147148 <col:7> 'char *' lvalue Var 0x131141278 'head' 'char *'
|   |-CallExpr 0x131147338 <line:30:2, col:18> 'int'
|   | `-ImplicitCastExpr 0x131147320 <col:2> 'int (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x131147300 <col:2> 'int ()' Function 0x131147248 'setup_work_tree' 'int ()'
|   |-CallExpr 0x133009bc0 <line:35:2, col:30> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x133009b08 <col:2> 'void *(void *, int, unsigned long)' Function 0x1330098b8 'memset' 'void *(void *, int, unsigned long)'
|   | |-UnaryOperator 0x133009b48 <col:9, col:10> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | | `-RecoveryExpr 0x133009b28 <col:10> '<dependent type>' contains-errors lvalue
|   | |-IntegerLiteral 0x133009b60 <col:16> 'int' 0
|   | `-UnaryExprOrTypeTraitExpr 0x133009ba0 <col:19, col:26> 'unsigned long' contains-errors sizeof
|   |   `-RecoveryExpr 0x133009b80 <col:26> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x133009ca8 <line:36:2, col:16> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x133009c40 <col:2, col:7> '<dependent type>' contains-errors lvalue .update
|   | | `-RecoveryExpr 0x133009c18 <col:2> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x133009bf8 <col:2> 'struct unpack_trees_options' lvalue Var 0x1311415f8 'opts' 'struct unpack_trees_options'
|   | `-IntegerLiteral 0x133009c88 <col:16> 'int' 1
|   |-BinaryOperator 0x133009d78 <line:37:2, col:15> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x133009d10 <col:2, col:7> '<dependent type>' contains-errors lvalue .merge
|   | | `-RecoveryExpr 0x133009ce8 <col:2> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x133009cc8 <col:2> 'struct unpack_trees_options' lvalue Var 0x1311415f8 'opts' 'struct unpack_trees_options'
|   | `-IntegerLiteral 0x133009d58 <col:15> 'int' 1
|   |-BinaryOperator 0x13300a178 <line:43:2, col:33> 'struct tree *' contains-errors '='
|   | |-DeclRefExpr 0x133009ff8 <col:2> 'struct tree *' lvalue Var 0x1311417f8 'tree' 'struct tree *'
|   | `-CallExpr 0x13300a150 <col:9, col:33> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x13300a0f8 <col:9> 'int ()' Function 0x13300a040 'parse_tree_indirect' 'int ()'
|   |   `-UnaryOperator 0x13300a138 <col:29, col:30> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |     `-RecoveryExpr 0x13300a118 <col:30> '<dependent type>' contains-errors lvalue
|   |-CallExpr 0x13300a2d0 <line:44:2, col:17> 'int'
|   | |-ImplicitCastExpr 0x13300a2b8 <col:2> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x13300a278 <col:2> 'int ()' Function 0x13300a1c0 'parse_tree' 'int ()'
|   | `-ImplicitCastExpr 0x13300a2f8 <col:13> 'struct tree *' <LValueToRValue>
|   |   `-DeclRefExpr 0x13300a298 <col:13> 'struct tree *' lvalue Var 0x1311417f8 'tree' 'struct tree *'
|   |-CallExpr 0x13300a508 <line:45:2, col:45> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x13300a3f0 <col:2> 'int ()' Function 0x13300a338 'init_tree_desc' 'int ()'
|   | |-UnaryOperator 0x13300a430 <col:17, col:18> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | | `-RecoveryExpr 0x13300a410 <col:18> '<dependent type>' contains-errors lvalue
|   | |-RecoveryExpr 0x13300a480 <col:21, col:27> '<dependent type>' contains-errors lvalue
|   | | `-DeclRefExpr 0x13300a448 <col:21> 'struct tree *' lvalue Var 0x1311417f8 'tree' 'struct tree *'
|   | `-RecoveryExpr 0x13300a4e0 <col:35, col:41> '<dependent type>' contains-errors lvalue
|   |   `-DeclRefExpr 0x13300a4a8 <col:35> 'struct tree *' lvalue Var 0x1311417f8 'tree' 'struct tree *'
|   |-IfStmt 0x13300b8d8 <line:46:2, line:47:15>
|   | |-BinaryOperator 0x13300b7c0 <line:46:6, col:35> 'int' contains-errors '<'
|   | | |-CallExpr 0x13300b768 <col:6, col:31> '<dependent type>' contains-errors
|   | | | |-DeclRefExpr 0x13300b6b8 <col:6> 'int ()' Function 0x13300b600 'unpack_trees' 'int ()'
|   | | | |-IntegerLiteral 0x13300b6d8 <col:19> 'int' 1
|   | | | |-UnaryOperator 0x13300b718 <col:22, col:23> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | | | | `-RecoveryExpr 0x13300b6f8 <col:23> '<dependent type>' contains-errors lvalue
|   | | | `-UnaryOperator 0x13300b750 <col:26, col:27> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | | |   `-RecoveryExpr 0x13300b730 <col:27> '<dependent type>' contains-errors lvalue
|   | | `-IntegerLiteral 0x13300b7a0 <col:35> 'int' 0
|   | `-CallExpr 0x13300b8b0 <line:47:3, col:15> 'int'
|   |   |-ImplicitCastExpr 0x13300b898 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x13300b7e0 <col:3> 'int ()' Function 0x131146d60 'die' 'int ()'
|   |   `-CallExpr 0x13300b858 <col:7, col:14> 'int'
|   |     |-ImplicitCastExpr 0x13300b840 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x13300b800 <col:7> 'int ()' Function 0x131142040 '_' 'int ()'
|   |     `-ImplicitCastExpr 0x13300b880 <col:9> 'char *' <ArrayToPointerDecay>
|   |       `-StringLiteral 0x13300b820 <col:9> 'char[4]' lvalue "STR"
|   |-IfStmt 0x13300bb30 <line:49:2, line:50:15>
|   | |-RecoveryExpr 0x13300ba18 <line:49:6, col:59> '_Bool' contains-errors
|   | `-CallExpr 0x13300bb08 <line:50:3, col:15> 'int'
|   |   |-ImplicitCastExpr 0x13300baf0 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x13300ba38 <col:3> 'int ()' Function 0x131146d60 'die' 'int ()'
|   |   `-CallExpr 0x13300bab0 <col:7, col:14> 'int'
|   |     |-ImplicitCastExpr 0x13300ba98 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x13300ba58 <col:7> 'int ()' Function 0x131142040 '_' 'int ()'
|   |     `-ImplicitCastExpr 0x13300bad8 <col:9> 'char *' <ArrayToPointerDecay>
|   |       `-StringLiteral 0x13300ba78 <col:9> 'char[4]' lvalue "STR"
|   |-IfStmt 0x13300ca78 <line:55:2, line:73:2>
|   | |-RecoveryExpr 0x13300bea0 <line:55:6, col:47> '_Bool' contains-errors
|   | `-CompoundStmt 0x13300ca40 <col:50, line:73:2>
|   |   |-DeclStmt 0x13300c038 <line:56:3, col:43>
|   |   | |-RecordDecl 0x13300bec0 <col:3, col:10> col:10 struct argv_array
|   |   | `-VarDecl 0x13300bfb8 <col:3, col:21> col:21 invalid args 'struct argv_array'
|   |   |-IfStmt 0x13300c370 <line:59:3, line:60:32>
|   |   | |-RecoveryExpr 0x13300c1c8 <line:59:7, col:36> '_Bool' contains-errors
|   |   | `-CallExpr 0x13300c340 <line:60:4, col:32> '<dependent type>' contains-errors
|   |   |   |-DeclRefExpr 0x13300c2c8 <col:4> 'int ()' Function 0x13300c210 'argv_array_push' 'int ()'
|   |   |   |-UnaryOperator 0x13300c308 <col:20, col:21> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   |   | `-RecoveryExpr 0x13300c2e8 <col:21> '<dependent type>' contains-errors lvalue
|   |   |   `-StringLiteral 0x13300c320 <col:27> 'char[4]' lvalue "STR"
|   |   |-IfStmt 0x13300c630 <line:65:3, line:66:32>
|   |   | |-ImplicitCastExpr 0x13300c560 <line:65:7> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x13300c540 <col:7> 'int' lvalue ParmVar 0x1311288d8 'submodule_progress' 'int'
|   |   | `-CallExpr 0x13300c600 <line:66:4, col:32> '<dependent type>' contains-errors
|   |   |   |-DeclRefExpr 0x13300c578 <col:4> 'int ()' Function 0x13300c210 'argv_array_push' 'int ()'
|   |   |   |-UnaryOperator 0x13300c5b8 <col:20, col:21> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   |   | `-RecoveryExpr 0x13300c598 <col:21> '<dependent type>' contains-errors lvalue
|   |   |   `-StringLiteral 0x13300c5d0 <col:27> 'char[4]' lvalue "STR"
|   |   |-IfStmt 0x13300c738 <line:68:3, line:69:32>
|   |   | |-RecoveryExpr 0x13300c670 <line:68:7, col:26> '_Bool' contains-errors
|   |   | `-CallExpr 0x13300c708 <line:69:4, col:32> '<dependent type>' contains-errors
|   |   |   |-DeclRefExpr 0x13300c690 <col:4> 'int ()' Function 0x13300c210 'argv_array_push' 'int ()'
|   |   |   |-UnaryOperator 0x13300c6d0 <col:20, col:21> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   |   | `-RecoveryExpr 0x13300c6b0 <col:21> '<dependent type>' contains-errors lvalue
|   |   |   `-StringLiteral 0x13300c6e8 <col:27> 'char[4]' lvalue "STR"
|   |   `-CallExpr 0x13300ca18 <line:72:3, col:25> '<dependent type>' contains-errors
|   |     |-DeclRefExpr 0x13300c9c0 <col:3> 'int ()' Function 0x13300c908 'argv_array_clear' 'int ()'
|   |     `-UnaryOperator 0x13300ca00 <col:20, col:21> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |       `-RecoveryExpr 0x13300c9e0 <col:21> '<dependent type>' contains-errors lvalue
|   `-ReturnStmt 0x13300cad0 <line:75:2, col:9>
|     `-ImplicitCastExpr 0x13300cab8 <col:9> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x13300ca98 <col:9> 'int' lvalue Var 0x131141a38 'err' 'int'
|-FunctionDecl 0x131146510 <line:20:7> col:7 implicit used strcmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x131146610 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x131146678 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x1311465b8 <<invalid sloc>> Implicit 887
|-FunctionDecl 0x131146fb8 <line:27:2> col:2 implicit used free 'void (void *)' extern
| |-ParmVarDecl 0x1311470b8 <<invalid sloc>> <invalid sloc> 'void *'
| `-BuiltinAttr 0x131147060 <<invalid sloc>> Implicit 873
`-FunctionDecl 0x1330098b8 <line:35:2> col:2 implicit used memset 'void *(void *, int, unsigned long)' extern
  |-ParmVarDecl 0x1330099b8 <<invalid sloc>> <invalid sloc> 'void *'
  |-ParmVarDecl 0x133009a20 <<invalid sloc>> <invalid sloc> 'int'
  |-ParmVarDecl 0x133009a88 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x133009960 <<invalid sloc>> Implicit 900
