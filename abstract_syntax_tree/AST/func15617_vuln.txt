TranslationUnitDecl 0x128855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1288564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x128855bd0 '__int128'
|-TypedefDecl 0x128856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x128855bf0 'unsigned __int128'
|-TypedefDecl 0x12900be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12900bc00 'struct __NSConstantString_tag'
|   `-Record 0x128856580 '__NSConstantString_tag'
|-TypedefDecl 0x12900be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x128855d90 '__SVInt8_t'
|-TypedefDecl 0x12900bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x128855db0 '__SVInt16_t'
|-TypedefDecl 0x12900bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x128855dd0 '__SVInt32_t'
|-TypedefDecl 0x12900bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x128855df0 '__SVInt64_t'
|-TypedefDecl 0x12900c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x128855e10 '__SVUint8_t'
|-TypedefDecl 0x12900c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x128855e30 '__SVUint16_t'
|-TypedefDecl 0x12900c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x128855e50 '__SVUint32_t'
|-TypedefDecl 0x12900c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x128855e70 '__SVUint64_t'
|-TypedefDecl 0x12900c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x128855e90 '__SVFloat16_t'
|-TypedefDecl 0x12900c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x128855eb0 '__SVFloat32_t'
|-TypedefDecl 0x12900c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x128855ed0 '__SVFloat64_t'
|-TypedefDecl 0x12900c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x128855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12900c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x128855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12900c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x128855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12900c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x128855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12900c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x128855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12900c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x128855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12900c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x128855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12900c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x128855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12900c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x128855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12900c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x128856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12900c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x128856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12900c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x128856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12900c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x128856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12900c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x128856090 '__clang_svint8x3_t'
|-TypedefDecl 0x12900c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1288560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12900c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1288560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12900c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1288560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12900c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x128856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12900ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x128856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12900cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x128856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12900cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x128856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12900cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x128856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12900d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1288561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12900d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1288561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12900d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1288561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12900d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x128856210 '__clang_svint8x4_t'
|-TypedefDecl 0x12900d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x128856230 '__clang_svint16x4_t'
|-TypedefDecl 0x12900d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x128856250 '__clang_svint32x4_t'
|-TypedefDecl 0x12900d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x128856270 '__clang_svint64x4_t'
|-TypedefDecl 0x12900d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x128856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12900d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1288562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12900d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1288562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12900d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1288562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12900d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x128856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12900d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x128856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12900d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x128856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12900d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x128856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12900da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x128856390 '__SVBool_t'
|-TypedefDecl 0x12900da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1288563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12900dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1288563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12900db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1288563f0 '__SVCount_t'
|-TypedefDecl 0x12900dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12900dbb0 'char *'
|   `-BuiltinType 0x1288556b0 'char'
|-TypedefDecl 0x12900dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12900dbb0 'char *'
|   `-BuiltinType 0x1288556b0 'char'
|-FunctionDecl 0x1290288f8 <dataset_diviso_filec/func15617_vuln.c:1:1, line:41:1> line:1:1 invalid do_bid_note 'int (struct magic_set *, unsigned char *, int, int, int, int, int, int, int *)'
| |-ParmVarDecl 0x12900e248 <col:13, col:31> col:31 used ms 'struct magic_set *'
| |-ParmVarDecl 0x12900e2f8 <col:35, col:50> col:50 used nbuf 'unsigned char *'
| |-ParmVarDecl 0x12900e390 <col:56, col:65> col:65 invalid type 'int'
| |-ParmVarDecl 0x129028418 <line:2:5, col:9> col:9 swap 'int'
| | `-UnusedAttr 0x129028480 <col:29> unused
| |-ParmVarDecl 0x1290284f0 <col:43, col:52> col:52 invalid namesz 'int'
| |-ParmVarDecl 0x129028570 <col:60, col:69> col:69 invalid descsz 'int'
| |-ParmVarDecl 0x1290285f0 <line:3:5, col:12> col:12 invalid noff 'int'
| |-ParmVarDecl 0x129028670 <col:18, col:25> col:25 invalid doff 'int'
| |-ParmVarDecl 0x129028728 <col:31, col:36> col:36 used flags 'int *'
| `-CompoundStmt 0x12902d070 <line:4:1, line:41:1>
|   |-IfStmt 0x12902c600 <line:5:2, line:32:2>
|   | |-BinaryOperator 0x12902b440 <line:5:6, line:6:61> 'int' contains-errors '&&'
|   | | |-BinaryOperator 0x12902b420 <line:5:6, line:6:14> 'int' contains-errors '&&'
|   | | | |-BinaryOperator 0x1290293b8 <line:5:6, col:59> 'int' contains-errors '&&'
|   | | | | |-BinaryOperator 0x129028a28 <col:6, col:16> 'int' contains-errors '=='
|   | | | | | |-RecoveryExpr 0x1290289e8 <col:6> '<dependent type>' contains-errors lvalue
|   | | | | | `-IntegerLiteral 0x129028a08 <col:16> 'int' 4
|   | | | | `-BinaryOperator 0x129029398 <col:21, col:59> 'int' contains-errors '=='
|   | | | |   |-CallExpr 0x129029320 <col:21, col:54> 'int' contains-errors
|   | | | |   | |-ImplicitCastExpr 0x129029308 <col:21> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   | | | |   | | `-DeclRefExpr 0x129028c70 <col:21> 'int (const char *, const char *)' Function 0x129028a90 'strcmp' 'int (const char *, const char *)'
|   | | | |   | |-ImplicitCastExpr 0x129029350 <col:28, col:46> 'const char *' contains-errors <NoOp>
|   | | | |   | | `-CStyleCastExpr 0x1290292c8 <col:28, col:46> 'char *' contains-errors <Dependent>
|   | | | |   | |   `-UnaryOperator 0x1290292b0 <col:36, col:46> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | | | |   | |     `-ArraySubscriptExpr 0x129029290 <col:37, col:46> '<dependent type>' contains-errors lvalue
|   | | | |   | |       |-ImplicitCastExpr 0x129029260 <col:37> 'unsigned char *' <LValueToRValue>
|   | | | |   | |       | `-DeclRefExpr 0x129028c90 <col:37> 'unsigned char *' lvalue ParmVar 0x12900e2f8 'nbuf' 'unsigned char *'
|   | | | |   | |       `-ImplicitCastExpr 0x129029278 <col:42> '<dependent type>' contains-errors <LValueToRValue>
|   | | | |   | |         `-RecoveryExpr 0x129028cb0 <col:42> '<dependent type>' contains-errors lvalue
|   | | | |   | `-ImplicitCastExpr 0x129029380 <col:49> 'const char *' <NoOp>
|   | | | |   |   `-ImplicitCastExpr 0x129029368 <col:49> 'char *' <ArrayToPointerDecay>
|   | | | |   |     `-StringLiteral 0x129028dc0 <col:49> 'char[4]' lvalue "STR"
|   | | | |   `-IntegerLiteral 0x129028ec0 <col:59> 'int' 0
|   | | | `-BinaryOperator 0x12902b400 <line:6:6, col:14> 'int' contains-errors '=='
|   | | |   |-RecoveryExpr 0x129028f20 <col:6> '<dependent type>' contains-errors lvalue
|   | | |   `-RecoveryExpr 0x1290293d8 <col:14> '<dependent type>' contains-errors lvalue
|   | | `-ParenExpr 0x129029078 <col:33, col:61> 'int' contains-errors
|   | |   `-BinaryOperator 0x129029058 <col:34, col:59> 'int' contains-errors '&&'
|   | |     |-BinaryOperator 0x129028fd8 <col:34, col:44> 'int' contains-errors '>='
|   | |     | |-RecoveryExpr 0x129028f98 <col:34> '<dependent type>' contains-errors lvalue
|   | |     | `-IntegerLiteral 0x129028fb8 <col:44> 'int' 4
|   | |     `-BinaryOperator 0x129029038 <col:49, col:59> 'int' contains-errors '<='
|   | |       |-RecoveryExpr 0x129028ff8 <col:49> '<dependent type>' contains-errors lvalue
|   | |       `-IntegerLiteral 0x129029018 <col:59> 'int' 20
|   | `-CompoundStmt 0x12902c5b8 <col:64, line:32:2>
|   |   |-DeclStmt 0x12902b4e0 <line:8:3, col:20>
|   |   | `-VarDecl 0x12902b478 <col:3, col:15> col:15 used btype 'const char *'
|   |   |-CompoundAssignOperator 0x12902b610 <line:10:3, col:13> 'int' contains-errors '|=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   |   | |-UnaryOperator 0x12902b5d8 <col:3, col:4> 'int' lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x12902b5c0 <col:4> 'int *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x12902b4f8 <col:4> 'int *' lvalue ParmVar 0x129028728 'flags' 'int *'
|   |   | `-RecoveryExpr 0x12902b5f0 <col:13> '<dependent type>' contains-errors lvalue
|   |   |-SwitchStmt 0x12902b678 <line:11:3, line:24:3>
|   |   | |-ImplicitCastExpr 0x12902b660 <line:11:11> '<dependent type>' contains-errors <LValueToRValue>
|   |   | | `-RecoveryExpr 0x12902b640 <col:11> '<dependent type>' contains-errors lvalue
|   |   | `-CompoundStmt 0x12902b9f8 <col:19, line:24:3>
|   |   |   |-CaseStmt 0x12902b6c0 <line:12:3, line:13:15>
|   |   |   | |-IntegerLiteral 0x12902b6a0 <line:12:8> 'int' 8
|   |   |   | `-BinaryOperator 0x12902b758 <line:13:7, col:15> 'const char *' '='
|   |   |   |   |-DeclRefExpr 0x12902b6e8 <col:7> 'const char *' lvalue Var 0x12902b478 'btype' 'const char *'
|   |   |   |   `-ImplicitCastExpr 0x12902b740 <col:15> 'const char *' <NoOp>
|   |   |   |     `-ImplicitCastExpr 0x12902b728 <col:15> 'char *' <ArrayToPointerDecay>
|   |   |   |       `-StringLiteral 0x12902b708 <col:15> 'char[4]' lvalue "STR"
|   |   |   |-BreakStmt 0x12902b778 <line:14:7>
|   |   |   |-CaseStmt 0x12902b7a0 <line:15:3, line:16:15>
|   |   |   | |-IntegerLiteral 0x12902b780 <line:15:8> 'int' 16
|   |   |   | `-BinaryOperator 0x12902b838 <line:16:7, col:15> 'const char *' '='
|   |   |   |   |-DeclRefExpr 0x12902b7c8 <col:7> 'const char *' lvalue Var 0x12902b478 'btype' 'const char *'
|   |   |   |   `-ImplicitCastExpr 0x12902b820 <col:15> 'const char *' <NoOp>
|   |   |   |     `-ImplicitCastExpr 0x12902b808 <col:15> 'char *' <ArrayToPointerDecay>
|   |   |   |       `-StringLiteral 0x12902b7e8 <col:15> 'char[4]' lvalue "STR"
|   |   |   |-BreakStmt 0x12902b858 <line:17:7>
|   |   |   |-CaseStmt 0x12902b880 <line:18:3, line:19:15>
|   |   |   | |-IntegerLiteral 0x12902b860 <line:18:8> 'int' 20
|   |   |   | `-BinaryOperator 0x12902b918 <line:19:7, col:15> 'const char *' '='
|   |   |   |   |-DeclRefExpr 0x12902b8a8 <col:7> 'const char *' lvalue Var 0x12902b478 'btype' 'const char *'
|   |   |   |   `-ImplicitCastExpr 0x12902b900 <col:15> 'const char *' <NoOp>
|   |   |   |     `-ImplicitCastExpr 0x12902b8e8 <col:15> 'char *' <ArrayToPointerDecay>
|   |   |   |       `-StringLiteral 0x12902b8c8 <col:15> 'char[4]' lvalue "STR"
|   |   |   |-BreakStmt 0x12902b938 <line:20:7>
|   |   |   |-DefaultStmt 0x12902b9d0 <line:21:3, line:22:15>
|   |   |   | `-BinaryOperator 0x12902b9b0 <col:7, col:15> 'const char *' '='
|   |   |   |   |-DeclRefExpr 0x12902b940 <col:7> 'const char *' lvalue Var 0x12902b478 'btype' 'const char *'
|   |   |   |   `-ImplicitCastExpr 0x12902b998 <col:15> 'const char *' <NoOp>
|   |   |   |     `-ImplicitCastExpr 0x12902b980 <col:15> 'char *' <ArrayToPointerDecay>
|   |   |   |       `-StringLiteral 0x12902b960 <col:15> 'char[4]' lvalue "STR"
|   |   |   `-BreakStmt 0x12902b9f0 <line:23:7>
|   |   |-IfStmt 0x12902bd70 <line:25:3, line:26:11>
|   |   | |-BinaryOperator 0x12902bd20 <line:25:7, col:41> 'int' '=='
|   |   | | |-CallExpr 0x12902bc68 <col:7, col:35> 'int'
|   |   | | | |-ImplicitCastExpr 0x12902bc50 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   |   | | | | `-DeclRefExpr 0x12902bba0 <col:7> 'int ()' Function 0x12902bae8 'file_printf' 'int ()'
|   |   | | | |-ImplicitCastExpr 0x12902bca0 <col:19> 'struct magic_set *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x12902bbc0 <col:19> 'struct magic_set *' lvalue ParmVar 0x12900e248 'ms' 'struct magic_set *'
|   |   | | | |-ImplicitCastExpr 0x12902bcb8 <col:23> 'char *' <ArrayToPointerDecay>
|   |   | | | | `-StringLiteral 0x12902bbe0 <col:23> 'char[4]' lvalue "STR"
|   |   | | | `-ImplicitCastExpr 0x12902bcd0 <col:30> 'const char *' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x12902bc00 <col:30> 'const char *' lvalue Var 0x12902b478 'btype' 'const char *'
|   |   | | `-UnaryOperator 0x12902bd08 <col:40, col:41> 'int' prefix '-'
|   |   | |   `-IntegerLiteral 0x12902bce8 <col:41> 'int' 1
|   |   | `-ReturnStmt 0x12902bd60 <line:26:4, col:11>
|   |   |   `-IntegerLiteral 0x12902bd40 <col:11> 'int' 1
|   |   |-CallExpr 0x12902c278 <line:27:3, col:35> '<dependent type>' contains-errors
|   |   | |-DeclRefExpr 0x12902c058 <col:3> 'void *(void *, const void *, unsigned long)' Function 0x12902be08 'memcpy' 'void *(void *, const void *, unsigned long)'
|   |   | |-RecoveryExpr 0x12902c1c0 <col:10> '<dependent type>' contains-errors lvalue
|   |   | |-UnaryOperator 0x12902c230 <col:16, col:26> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   | | `-ArraySubscriptExpr 0x12902c210 <col:17, col:26> '<dependent type>' contains-errors lvalue
|   |   | |   |-ImplicitCastExpr 0x12902c1e0 <col:17> 'unsigned char *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x12902c090 <col:17> 'unsigned char *' lvalue ParmVar 0x12900e2f8 'nbuf' 'unsigned char *'
|   |   | |   `-ImplicitCastExpr 0x12902c1f8 <col:22> '<dependent type>' contains-errors <LValueToRValue>
|   |   | |     `-RecoveryExpr 0x12902c0b0 <col:22> '<dependent type>' contains-errors lvalue
|   |   | `-RecoveryExpr 0x12902c138 <col:29> '<dependent type>' contains-errors lvalue
|   |   |-ForStmt 0x12902c550 <line:28:3, line:30:11>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x12902c380 <line:28:15, col:19> 'int' contains-errors '<'
|   |   | | |-RecoveryExpr 0x12902c360 <col:15> '<dependent type>' contains-errors lvalue
|   |   | | `-RecoveryExpr 0x12902c320 <col:19> '<dependent type>' contains-errors lvalue
|   |   | |-UnaryOperator 0x12902c400 <col:27, col:28> '<dependent type>' contains-errors postfix '++' cannot overflow
|   |   | | `-RecoveryExpr 0x12902c3d0 <col:27> '<dependent type>' contains-errors lvalue
|   |   | `-IfStmt 0x12902c530 <line:29:7, line:30:11>
|   |   |   |-RecoveryExpr 0x12902c4e0 <line:29:11, col:47> '_Bool' contains-errors
|   |   |   `-ReturnStmt 0x12902c520 <line:30:4, col:11>
|   |   |     `-IntegerLiteral 0x12902c500 <col:11> 'int' 1
|   |   `-ReturnStmt 0x12902c5a8 <line:31:3, col:10>
|   |     `-IntegerLiteral 0x12902c588 <col:10> 'int' 1
|   |-IfStmt 0x12902d020 <line:33:2, line:39:2>
|   | |-BinaryOperator 0x12902cd28 <line:33:6, line:34:41> 'int' contains-errors '&&'
|   | | |-BinaryOperator 0x12902cd08 <line:33:6, line:34:14> 'int' contains-errors '&&'
|   | | | |-BinaryOperator 0x12902cca8 <line:33:6, col:59> 'int' contains-errors '&&'
|   | | | | |-BinaryOperator 0x12902c660 <col:6, col:16> 'int' contains-errors '=='
|   | | | | | |-RecoveryExpr 0x12902c620 <col:6> '<dependent type>' contains-errors lvalue
|   | | | | | `-IntegerLiteral 0x12902c640 <col:16> 'int' 4
|   | | | | `-BinaryOperator 0x12902cc88 <col:21, col:59> 'int' contains-errors '=='
|   | | | |   |-CallExpr 0x12902cc10 <col:21, col:54> 'int' contains-errors
|   | | | |   | |-ImplicitCastExpr 0x12902cbf8 <col:21> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   | | | |   | | `-DeclRefExpr 0x12902c680 <col:21> 'int (const char *, const char *)' Function 0x129028a90 'strcmp' 'int (const char *, const char *)'
|   | | | |   | |-ImplicitCastExpr 0x12902cc40 <col:28, col:46> 'const char *' contains-errors <NoOp>
|   | | | |   | | `-CStyleCastExpr 0x12902cbb8 <col:28, col:46> 'char *' contains-errors <Dependent>
|   | | | |   | |   `-UnaryOperator 0x12902cba0 <col:36, col:46> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | | | |   | |     `-ArraySubscriptExpr 0x12902cb80 <col:37, col:46> '<dependent type>' contains-errors lvalue
|   | | | |   | |       |-ImplicitCastExpr 0x12902cb50 <col:37> 'unsigned char *' <LValueToRValue>
|   | | | |   | |       | `-DeclRefExpr 0x12902c6a0 <col:37> 'unsigned char *' lvalue ParmVar 0x12900e2f8 'nbuf' 'unsigned char *'
|   | | | |   | |       `-ImplicitCastExpr 0x12902cb68 <col:42> '<dependent type>' contains-errors <LValueToRValue>
|   | | | |   | |         `-RecoveryExpr 0x12902c6c0 <col:42> '<dependent type>' contains-errors lvalue
|   | | | |   | `-ImplicitCastExpr 0x12902cc70 <col:49> 'const char *' <NoOp>
|   | | | |   |   `-ImplicitCastExpr 0x12902cc58 <col:49> 'char *' <ArrayToPointerDecay>
|   | | | |   |     `-StringLiteral 0x12902c788 <col:49> 'char[4]' lvalue "STR"
|   | | | |   `-IntegerLiteral 0x12902c850 <col:59> 'int' 0
|   | | | `-BinaryOperator 0x12902cce8 <line:34:6, col:14> 'int' contains-errors '=='
|   | | |   |-RecoveryExpr 0x12902c8b0 <col:6> '<dependent type>' contains-errors lvalue
|   | | |   `-RecoveryExpr 0x12902ccc8 <col:14> '<dependent type>' contains-errors lvalue
|   | | `-BinaryOperator 0x12902c968 <col:32, col:41> 'int' contains-errors '<'
|   | |   |-RecoveryExpr 0x12902c928 <col:32> '<dependent type>' contains-errors lvalue
|   | |   `-IntegerLiteral 0x12902c948 <col:41> 'int' 128
|   | `-CompoundStmt 0x12902d000 <col:46, line:39:2>
|   |   |-IfStmt 0x12902cfb0 <line:35:3, line:37:12>
|   |   | |-BinaryOperator 0x12902cf48 <line:35:7, line:36:32> 'int' contains-errors '=='
|   |   | | |-CallExpr 0x12902cea8 <line:35:7, line:36:26> 'int' contains-errors
|   |   | | | |-ImplicitCastExpr 0x12902ce90 <line:35:7> 'int (*)()' <FunctionToPointerDecay>
|   |   | | | | `-DeclRefExpr 0x12902cd48 <col:7> 'int ()' Function 0x12902bae8 'file_printf' 'int ()'
|   |   | | | |-ImplicitCastExpr 0x12902cee0 <col:19> 'struct magic_set *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x12902cd68 <col:19> 'struct magic_set *' lvalue ParmVar 0x12900e248 'ms' 'struct magic_set *'
|   |   | | | |-ImplicitCastExpr 0x12902cef8 <col:23> 'char *' <ArrayToPointerDecay>
|   |   | | | | `-StringLiteral 0x12902cd88 <col:23> 'char[4]' lvalue "STR"
|   |   | | | `-CStyleCastExpr 0x12902ce68 <line:36:7, col:25> 'char *' contains-errors <Dependent>
|   |   | | |   `-UnaryOperator 0x12902ce38 <col:15, col:25> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   | | |     `-ArraySubscriptExpr 0x12902ce18 <col:16, col:25> '<dependent type>' contains-errors lvalue
|   |   | | |       |-ImplicitCastExpr 0x12902cde8 <col:16> 'unsigned char *' <LValueToRValue>
|   |   | | |       | `-DeclRefExpr 0x12902cda8 <col:16> 'unsigned char *' lvalue ParmVar 0x12900e2f8 'nbuf' 'unsigned char *'
|   |   | | |       `-ImplicitCastExpr 0x12902ce00 <col:21> '<dependent type>' contains-errors <LValueToRValue>
|   |   | | |         `-RecoveryExpr 0x12902cdc8 <col:21> '<dependent type>' contains-errors lvalue
|   |   | | `-UnaryOperator 0x12902cf30 <col:31, col:32> 'int' prefix '-'
|   |   | |   `-IntegerLiteral 0x12902cf10 <col:32> 'int' 1
|   |   | `-ReturnStmt 0x12902cfa0 <line:37:4, col:12>
|   |   |   `-UnaryOperator 0x12902cf88 <col:11, col:12> 'int' prefix '-'
|   |   |     `-IntegerLiteral 0x12902cf68 <col:12> 'int' 1
|   |   `-ReturnStmt 0x12902cff0 <line:38:3, col:10>
|   |     `-IntegerLiteral 0x12902cfd0 <col:10> 'int' 1
|   `-ReturnStmt 0x12902d060 <line:40:2, col:9>
|     `-IntegerLiteral 0x12902d040 <col:9> 'int' 0
|-FunctionDecl 0x129028a90 <line:5:21> col:21 implicit used strcmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x129028b90 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x129028bf8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x129028b38 <<invalid sloc>> Implicit 887
`-FunctionDecl 0x12902be08 <line:27:3> col:3 implicit used memcpy 'void *(void *, const void *, unsigned long)' extern
  |-ParmVarDecl 0x12902bf08 <<invalid sloc>> <invalid sloc> 'void *'
  |-ParmVarDecl 0x12902bf70 <<invalid sloc>> <invalid sloc> 'const void *'
  |-ParmVarDecl 0x12902bfd8 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x12902beb0 <<invalid sloc>> Implicit 882
