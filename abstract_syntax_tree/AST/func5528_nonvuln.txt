TranslationUnitDecl 0x12d055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x12d0564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x12d055bd0 '__int128'
|-TypedefDecl 0x12d056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x12d055bf0 'unsigned __int128'
|-TypedefDecl 0x12d126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12d126000 'struct __NSConstantString_tag'
|   `-Record 0x12d056580 '__NSConstantString_tag'
|-TypedefDecl 0x12d126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x12d055d90 '__SVInt8_t'
|-TypedefDecl 0x12d126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x12d055db0 '__SVInt16_t'
|-TypedefDecl 0x12d126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x12d055dd0 '__SVInt32_t'
|-TypedefDecl 0x12d1263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x12d055df0 '__SVInt64_t'
|-TypedefDecl 0x12d126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x12d055e10 '__SVUint8_t'
|-TypedefDecl 0x12d1264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x12d055e30 '__SVUint16_t'
|-TypedefDecl 0x12d126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x12d055e50 '__SVUint32_t'
|-TypedefDecl 0x12d126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x12d055e70 '__SVUint64_t'
|-TypedefDecl 0x12d1265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x12d055e90 '__SVFloat16_t'
|-TypedefDecl 0x12d126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x12d055eb0 '__SVFloat32_t'
|-TypedefDecl 0x12d1266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x12d055ed0 '__SVFloat64_t'
|-TypedefDecl 0x12d126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x12d055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12d126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x12d055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12d1267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x12d055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12d126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x12d055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12d1268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x12d055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12d126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x12d055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12d126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x12d055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12d1269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x12d055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12d126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x12d055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12d126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x12d056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12d126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x12d056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12d126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x12d056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12d126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x12d056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12d126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x12d056090 '__clang_svint8x3_t'
|-TypedefDecl 0x12d126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x12d0560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12d126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x12d0560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12d126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x12d0560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12d126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x12d056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12d126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x12d056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12d126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x12d056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12d126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x12d056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12d126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x12d056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12d127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x12d0561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12d127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x12d0561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12d1278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x12d0561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12d127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x12d056210 '__clang_svint8x4_t'
|-TypedefDecl 0x12d1279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x12d056230 '__clang_svint16x4_t'
|-TypedefDecl 0x12d127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x12d056250 '__clang_svint32x4_t'
|-TypedefDecl 0x12d127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x12d056270 '__clang_svint64x4_t'
|-TypedefDecl 0x12d127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x12d056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12d127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x12d0562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12d127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x12d0562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12d127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x12d0562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12d127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x12d056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12d127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x12d056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12d127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x12d056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12d127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x12d056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12d127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x12d056390 '__SVBool_t'
|-TypedefDecl 0x12d127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x12d0563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12d127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x12d0563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12d127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x12d0563f0 '__SVCount_t'
|-TypedefDecl 0x12d127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12d127fb0 'char *'
|   `-BuiltinType 0x12d0556b0 'char'
|-TypedefDecl 0x12d128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12d127fb0 'char *'
|   `-BuiltinType 0x12d0556b0 'char'
|-FunctionDecl 0x12d128238 <dataset_diviso_filec/func5528_nonvuln.c:1:1, line:51:1> line:1:1 char_is_quoted 'int (char *, int)'
| |-ParmVarDecl 0x12d1280d8 <line:2:6, col:12> col:12 used string 'char *'
| |-ParmVarDecl 0x12d128158 <line:3:6, col:10> col:10 used eindex 'int'
| `-CompoundStmt 0x12d144560 <line:4:1, line:51:1>
|   |-DeclStmt 0x12d128560 <line:5:3, col:30>
|   | |-VarDecl 0x12d128350 <col:3, col:7> col:7 used i 'int'
|   | |-VarDecl 0x12d1283d0 <col:3, col:10> col:10 used pass_next 'int'
|   | |-VarDecl 0x12d128450 <col:3, col:21> col:21 used c 'int'
|   | `-VarDecl 0x12d1284d0 <col:3, col:24> col:24 used oldjmp 'int'
|   |-UnaryExprOrTypeTraitExpr 0x12d1285e8 <line:6:3, col:10> 'unsigned long' contains-errors sizeof
|   | `-RecoveryExpr 0x12d1285c8 <col:10> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x12d141d58 <line:10:3, col:12> 'int' contains-errors '='
|   | |-DeclRefExpr 0x12d141ce0 <col:3> 'int' lvalue Var 0x12d1284d0 'oldjmp' 'int'
|   | `-RecoveryExpr 0x12d141d38 <col:12> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x12d141e18 <line:12:3, col:19> 'int' '='
|   | |-DeclRefExpr 0x12d141d98 <col:3> 'int' lvalue Var 0x12d128350 'i' 'int'
|   | `-BinaryOperator 0x12d141df8 <col:7, col:19> 'int' '='
|   |   |-DeclRefExpr 0x12d141db8 <col:7> 'int' lvalue Var 0x12d1283d0 'pass_next' 'int'
|   |   `-IntegerLiteral 0x12d141dd8 <col:19> 'int' 0
|   |-WhileStmt 0x12d1444c0 <line:13:3, line:48:5>
|   | |-BinaryOperator 0x12d141ea8 <line:13:10, col:15> 'int' '<='
|   | | |-ImplicitCastExpr 0x12d141e78 <col:10> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x12d141e38 <col:10> 'int' lvalue Var 0x12d128350 'i' 'int'
|   | | `-ImplicitCastExpr 0x12d141e90 <col:15> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x12d141e58 <col:15> 'int' lvalue ParmVar 0x12d128158 'eindex' 'int'
|   | `-CompoundStmt 0x12d1444a0 <line:14:5, line:48:5>
|   |   |-BinaryOperator 0x12d141fa8 <line:15:7, col:19> 'int' '='
|   |   | |-DeclRefExpr 0x12d141ec8 <col:7> 'int' lvalue Var 0x12d128450 'c' 'int'
|   |   | `-ImplicitCastExpr 0x12d141f90 <col:11, col:19> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x12d141f78 <col:11, col:19> 'char' <LValueToRValue>
|   |   |     `-ArraySubscriptExpr 0x12d141f58 <col:11, col:19> 'char' lvalue
|   |   |       |-ImplicitCastExpr 0x12d141f28 <col:11> 'char *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x12d141ee8 <col:11> 'char *' lvalue ParmVar 0x12d1280d8 'string' 'char *'
|   |   |       `-ImplicitCastExpr 0x12d141f40 <col:18> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x12d141f08 <col:18> 'int' lvalue Var 0x12d128350 'i' 'int'
|   |   `-IfStmt 0x12d144470 <line:17:7, line:47:2> has_else
|   |     |-ImplicitCastExpr 0x12d141fe8 <line:17:11> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x12d141fc8 <col:11> 'int' lvalue Var 0x12d1283d0 'pass_next' 'int'
|   |     |-CompoundStmt 0x12d1424c0 <line:18:2, line:24:2>
|   |     | |-BinaryOperator 0x12d142040 <line:19:4, col:16> 'int' '='
|   |     | | |-DeclRefExpr 0x12d142000 <col:4> 'int' lvalue Var 0x12d1283d0 'pass_next' 'int'
|   |     | | `-IntegerLiteral 0x12d142020 <col:16> 'int' 0
|   |     | |-IfStmt 0x12d1422b0 <line:20:4, line:21:17>
|   |     | | |-BinaryOperator 0x12d1420d0 <line:20:8, col:13> 'int' '>='
|   |     | | | |-ImplicitCastExpr 0x12d1420a0 <col:8> 'int' <LValueToRValue>
|   |     | | | | `-DeclRefExpr 0x12d142060 <col:8> 'int' lvalue Var 0x12d128350 'i' 'int'
|   |     | | | `-ImplicitCastExpr 0x12d1420b8 <col:13> 'int' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x12d142080 <col:13> 'int' lvalue ParmVar 0x12d128158 'eindex' 'int'
|   |     | | `-CallExpr 0x12d142288 <line:21:6, col:17> 'int'
|   |     | |   |-ImplicitCastExpr 0x12d142270 <col:6> 'int (*)()' <FunctionToPointerDecay>
|   |     | |   | `-DeclRefExpr 0x12d142200 <col:6> 'int ()' Function 0x12d142148 'CQ_RETURN' 'int ()'
|   |     | |   `-IntegerLiteral 0x12d142220 <col:16> 'int' 1
|   |     | |-CallExpr 0x12d142480 <line:22:4, col:33> '<dependent type>' contains-errors
|   |     | | |-DeclRefExpr 0x12d1423b0 <col:4> 'int ()' Function 0x12d1422f8 'ADVANCE_CHAR' 'int ()'
|   |     | | |-DeclRefExpr 0x12d1423d0 <col:18> 'char *' lvalue ParmVar 0x12d1280d8 'string' 'char *'
|   |     | | |-RecoveryExpr 0x12d142460 <col:26> '<dependent type>' contains-errors lvalue
|   |     | | `-DeclRefExpr 0x12d142408 <col:32> 'int' lvalue Var 0x12d128350 'i' 'int'
|   |     | `-ContinueStmt 0x12d1424b8 <line:23:4>
|   |     `-IfStmt 0x12d144440 <line:25:12, line:47:2> has_else
|   |       |-BinaryOperator 0x12d142540 <line:25:16, col:21> 'int' '=='
|   |       | |-ImplicitCastExpr 0x12d142528 <col:16> 'int' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x12d1424f0 <col:16> 'int' lvalue Var 0x12d128450 'c' 'int'
|   |       | `-CharacterLiteral 0x12d142510 <col:21> 'int' 92
|   |       |-CompoundStmt 0x12d142600 <line:26:2, line:30:2>
|   |       | |-BinaryOperator 0x12d1425a0 <line:27:4, col:16> 'int' '='
|   |       | | |-DeclRefExpr 0x12d142560 <col:4> 'int' lvalue Var 0x12d1283d0 'pass_next' 'int'
|   |       | | `-IntegerLiteral 0x12d142580 <col:16> 'int' 1
|   |       | |-UnaryOperator 0x12d1425e0 <line:28:4, col:5> 'int' postfix '++'
|   |       | | `-DeclRefExpr 0x12d1425c0 <col:4> 'int' lvalue Var 0x12d128350 'i' 'int'
|   |       | `-ContinueStmt 0x12d1425f8 <line:29:4>
|   |       `-IfStmt 0x12d144410 <line:31:12, line:47:2> has_else
|   |         |-BinaryOperator 0x12d143700 <line:31:16, col:61> 'int' '&&'
|   |         | |-BinaryOperator 0x12d1427d0 <col:16, col:43> 'int' '&&'
|   |         | | |-BinaryOperator 0x12d142678 <col:16, col:21> 'int' '=='
|   |         | | | |-ImplicitCastExpr 0x12d142660 <col:16> 'int' <LValueToRValue>
|   |         | | | | `-DeclRefExpr 0x12d142628 <col:16> 'int' lvalue Var 0x12d128450 'c' 'int'
|   |         | | | `-CharacterLiteral 0x12d142648 <col:21> 'int' 36
|   |         | | `-BinaryOperator 0x12d1427b0 <col:28, col:43> 'int' '=='
|   |         | |   |-ImplicitCastExpr 0x12d142798 <col:28, col:38> 'int' <IntegralCast>
|   |         | |   | `-ImplicitCastExpr 0x12d142780 <col:28, col:38> 'char' <LValueToRValue>
|   |         | |   |   `-ArraySubscriptExpr 0x12d142748 <col:28, col:38> 'char' lvalue
|   |         | |   |     |-ImplicitCastExpr 0x12d142730 <col:28> 'char *' <LValueToRValue>
|   |         | |   |     | `-DeclRefExpr 0x12d142698 <col:28> 'char *' lvalue ParmVar 0x12d1280d8 'string' 'char *'
|   |         | |   |     `-BinaryOperator 0x12d142710 <col:35, col:37> 'int' '+'
|   |         | |   |       |-ImplicitCastExpr 0x12d1426f8 <col:35> 'int' <LValueToRValue>
|   |         | |   |       | `-DeclRefExpr 0x12d1426b8 <col:35> 'int' lvalue Var 0x12d128350 'i' 'int'
|   |         | |   |       `-IntegerLiteral 0x12d1426d8 <col:37> 'int' 1
|   |         | |   `-CharacterLiteral 0x12d142768 <col:43> 'int' 39
|   |         | `-ImplicitCastExpr 0x12d1436e8 <col:51, col:61> 'int' <IntegralCast>
|   |         |   `-ImplicitCastExpr 0x12d1436d0 <col:51, col:61> 'char' <LValueToRValue>
|   |         |     `-ArraySubscriptExpr 0x12d1436b0 <col:51, col:61> 'char' lvalue
|   |         |       |-ImplicitCastExpr 0x12d143698 <col:51> 'char *' <LValueToRValue>
|   |         |       | `-DeclRefExpr 0x12d143600 <col:51> 'char *' lvalue ParmVar 0x12d1280d8 'string' 'char *'
|   |         |       `-BinaryOperator 0x12d143678 <col:58, col:60> 'int' '+'
|   |         |         |-ImplicitCastExpr 0x12d143660 <col:58> 'int' <LValueToRValue>
|   |         |         | `-DeclRefExpr 0x12d143620 <col:58> 'int' lvalue Var 0x12d128350 'i' 'int'
|   |         |         `-IntegerLiteral 0x12d143640 <col:60> 'int' 2
|   |         |-CompoundStmt 0x12d143b68 <line:32:2, line:37:2>
|   |         | |-CompoundAssignOperator 0x12d143760 <line:33:4, col:9> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |         | | |-DeclRefExpr 0x12d143720 <col:4> 'int' lvalue Var 0x12d128350 'i' 'int'
|   |         | | `-IntegerLiteral 0x12d143740 <col:9> 'int' 2
|   |         | |-BinaryOperator 0x12d143a00 <line:34:4, col:56> 'int' contains-errors '='
|   |         | | |-DeclRefExpr 0x12d143790 <col:4> 'int' lvalue Var 0x12d128350 'i' 'int'
|   |         | | `-CallExpr 0x12d1439c0 <col:8, col:56> '<dependent type>' contains-errors
|   |         | |   |-DeclRefExpr 0x12d143890 <col:8> 'int ()' Function 0x12d1437d8 'skip_single_quoted' 'int ()'
|   |         | |   |-DeclRefExpr 0x12d1438b0 <col:28> 'char *' lvalue ParmVar 0x12d1280d8 'string' 'char *'
|   |         | |   |-RecoveryExpr 0x12d143980 <col:36> '<dependent type>' contains-errors lvalue
|   |         | |   |-DeclRefExpr 0x12d1438e8 <col:42> 'int' lvalue Var 0x12d128350 'i' 'int'
|   |         | |   `-RecoveryExpr 0x12d1439a0 <col:45> '<dependent type>' contains-errors lvalue
|   |         | `-IfStmt 0x12d143b48 <line:35:4, line:36:18>
|   |         |   |-BinaryOperator 0x12d143a90 <line:35:8, col:12> 'int' '>'
|   |         |   | |-ImplicitCastExpr 0x12d143a60 <col:8> 'int' <LValueToRValue>
|   |         |   | | `-DeclRefExpr 0x12d143a20 <col:8> 'int' lvalue Var 0x12d128350 'i' 'int'
|   |         |   | `-ImplicitCastExpr 0x12d143a78 <col:12> 'int' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x12d143a40 <col:12> 'int' lvalue ParmVar 0x12d128158 'eindex' 'int'
|   |         |   `-CallExpr 0x12d143b08 <line:36:6, col:18> 'int'
|   |         |     |-ImplicitCastExpr 0x12d143af0 <col:6> 'int (*)()' <FunctionToPointerDecay>
|   |         |     | `-DeclRefExpr 0x12d143ab0 <col:6> 'int ()' Function 0x12d142148 'CQ_RETURN' 'int ()'
|   |         |     `-ImplicitCastExpr 0x12d143b30 <col:17> 'int' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x12d143ad0 <col:17> 'int' lvalue Var 0x12d128350 'i' 'int'
|   |         `-IfStmt 0x12d1443e0 <line:38:12, line:47:2> has_else
|   |           |-BinaryOperator 0x12d143c70 <line:38:16, col:34> 'int' '||'
|   |           | |-BinaryOperator 0x12d143be0 <col:16, col:21> 'int' '=='
|   |           | | |-ImplicitCastExpr 0x12d143bc8 <col:16> 'int' <LValueToRValue>
|   |           | | | `-DeclRefExpr 0x12d143b90 <col:16> 'int' lvalue Var 0x12d128450 'c' 'int'
|   |           | | `-CharacterLiteral 0x12d143bb0 <col:21> 'int' 39
|   |           | `-BinaryOperator 0x12d143c50 <col:29, col:34> 'int' '=='
|   |           |   |-ImplicitCastExpr 0x12d143c38 <col:29> 'int' <LValueToRValue>
|   |           |   | `-DeclRefExpr 0x12d143c00 <col:29> 'int' lvalue Var 0x12d128450 'c' 'int'
|   |           |   `-CharacterLiteral 0x12d143c20 <col:34> 'int' 34
|   |           |-CompoundStmt 0x12d144358 <line:39:2, line:45:2>
|   |           | |-BinaryOperator 0x12d144208 <line:40:4, line:41:58> 'int' contains-errors '='
|   |           | | |-DeclRefExpr 0x12d143c90 <line:40:4> 'int' lvalue Var 0x12d128350 'i' 'int'
|   |           | | `-ConditionalOperator 0x12d1441d8 <col:8, line:41:58> '<dependent type>' contains-errors
|   |           | |   |-ParenExpr 0x12d1440d8 <line:40:8, col:18> 'int'
|   |           | |   | `-BinaryOperator 0x12d1440b8 <col:9, col:14> 'int' '=='
|   |           | |   |   |-ImplicitCastExpr 0x12d1440a0 <col:9> 'int' <LValueToRValue>
|   |           | |   |   | `-DeclRefExpr 0x12d143cb0 <col:9> 'int' lvalue Var 0x12d128450 'c' 'int'
|   |           | |   |   `-CharacterLiteral 0x12d143cd0 <col:14> 'int' 39
|   |           | |   |-CallExpr 0x12d144118 <col:22, col:62> '<dependent type>' contains-errors
|   |           | |   | |-DeclRefExpr 0x12d143d40 <col:22> 'int ()' Function 0x12d1437d8 'skip_single_quoted' 'int ()'
|   |           | |   | |-DeclRefExpr 0x12d143d60 <col:42> 'char *' lvalue ParmVar 0x12d1280d8 'string' 'char *'
|   |           | |   | |-RecoveryExpr 0x12d1440f8 <col:50> '<dependent type>' contains-errors lvalue
|   |           | |   | |-UnaryOperator 0x12d143db8 <col:56, col:58> 'int' prefix '++'
|   |           | |   | | `-DeclRefExpr 0x12d143d98 <col:58> 'int' lvalue Var 0x12d128350 'i' 'int'
|   |           | |   | `-IntegerLiteral 0x12d143dd0 <col:61> 'int' 0
|   |           | |   `-CallExpr 0x12d144198 <line:41:8, col:58> '<dependent type>' contains-errors
|   |           | |     |-DeclRefExpr 0x12d143f10 <col:8> 'int ()' Function 0x12d143e58 'skip_double_quoted' 'int ()'
|   |           | |     |-DeclRefExpr 0x12d143f30 <col:28> 'char *' lvalue ParmVar 0x12d1280d8 'string' 'char *'
|   |           | |     |-RecoveryExpr 0x12d144158 <col:36> '<dependent type>' contains-errors lvalue
|   |           | |     |-UnaryOperator 0x12d143f88 <col:42, col:44> 'int' prefix '++'
|   |           | |     | `-DeclRefExpr 0x12d143f68 <col:44> 'int' lvalue Var 0x12d128350 'i' 'int'
|   |           | |     `-RecoveryExpr 0x12d144178 <col:47> '<dependent type>' contains-errors lvalue
|   |           | `-IfStmt 0x12d144338 <line:42:4, line:43:17>
|   |           |   |-BinaryOperator 0x12d144298 <line:42:8, col:12> 'int' '>'
|   |           |   | |-ImplicitCastExpr 0x12d144268 <col:8> 'int' <LValueToRValue>
|   |           |   | | `-DeclRefExpr 0x12d144228 <col:8> 'int' lvalue Var 0x12d128350 'i' 'int'
|   |           |   | `-ImplicitCastExpr 0x12d144280 <col:12> 'int' <LValueToRValue>
|   |           |   |   `-DeclRefExpr 0x12d144248 <col:12> 'int' lvalue ParmVar 0x12d128158 'eindex' 'int'
|   |           |   `-CallExpr 0x12d144310 <line:43:6, col:17> 'int'
|   |           |     |-ImplicitCastExpr 0x12d1442f8 <col:6> 'int (*)()' <FunctionToPointerDecay>
|   |           |     | `-DeclRefExpr 0x12d1442b8 <col:6> 'int ()' Function 0x12d142148 'CQ_RETURN' 'int ()'
|   |           |     `-IntegerLiteral 0x12d1442d8 <col:16> 'int' 1
|   |           `-NullStmt 0x12d1443d8 <line:47:2>
|   `-CallExpr 0x12d144538 <line:50:3, col:14> 'int'
|     |-ImplicitCastExpr 0x12d144520 <col:3> 'int (*)()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x12d1444e0 <col:3> 'int ()' Function 0x12d142148 'CQ_RETURN' 'int ()'
|     `-IntegerLiteral 0x12d144500 <col:13> 'int' 0
`-FunctionDecl 0x12d141a70 <line:9:10> col:10 implicit used strlen 'unsigned long (const char *)' extern
  |-ParmVarDecl 0x12d141b70 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x12d141b18 <<invalid sloc>> Implicit 902
