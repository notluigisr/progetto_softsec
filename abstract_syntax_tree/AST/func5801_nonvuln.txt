TranslationUnitDecl 0x15b055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x15b0564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x15b055bd0 '__int128'
|-TypedefDecl 0x15b056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x15b055bf0 'unsigned __int128'
|-TypedefDecl 0x14b00be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x14b00bc00 'struct __NSConstantString_tag'
|   `-Record 0x15b056580 '__NSConstantString_tag'
|-TypedefDecl 0x14b00be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x15b055d90 '__SVInt8_t'
|-TypedefDecl 0x14b00bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x15b055db0 '__SVInt16_t'
|-TypedefDecl 0x14b00bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x15b055dd0 '__SVInt32_t'
|-TypedefDecl 0x14b00bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x15b055df0 '__SVInt64_t'
|-TypedefDecl 0x14b00c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x15b055e10 '__SVUint8_t'
|-TypedefDecl 0x14b00c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x15b055e30 '__SVUint16_t'
|-TypedefDecl 0x14b00c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x15b055e50 '__SVUint32_t'
|-TypedefDecl 0x14b00c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x15b055e70 '__SVUint64_t'
|-TypedefDecl 0x14b00c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x15b055e90 '__SVFloat16_t'
|-TypedefDecl 0x14b00c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x15b055eb0 '__SVFloat32_t'
|-TypedefDecl 0x14b00c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x15b055ed0 '__SVFloat64_t'
|-TypedefDecl 0x14b00c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x15b055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x14b00c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x15b055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x14b00c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x15b055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x14b00c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x15b055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x14b00c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x15b055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x14b00c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x15b055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x14b00c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x15b055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x14b00c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x15b055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x14b00c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x15b055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x14b00c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x15b056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x14b00c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x15b056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x14b00c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x15b056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x14b00c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x15b056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x14b00c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x15b056090 '__clang_svint8x3_t'
|-TypedefDecl 0x14b00c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x15b0560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x14b00c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x15b0560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x14b00c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x15b0560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x14b00c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x15b056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x14b00ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x15b056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x14b00cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x15b056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x14b00cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x15b056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x14b00cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x15b056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x14b00d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x15b0561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x14b00d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x15b0561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x14b00d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x15b0561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x14b00d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x15b056210 '__clang_svint8x4_t'
|-TypedefDecl 0x14b00d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x15b056230 '__clang_svint16x4_t'
|-TypedefDecl 0x14b00d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x15b056250 '__clang_svint32x4_t'
|-TypedefDecl 0x14b00d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x15b056270 '__clang_svint64x4_t'
|-TypedefDecl 0x14b00d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x15b056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x14b00d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x15b0562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x14b00d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x15b0562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x14b00d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x15b0562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x14b00d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x15b056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x14b00d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x15b056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x14b00d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x15b056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x14b00d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x15b056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x14b00da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x15b056390 '__SVBool_t'
|-TypedefDecl 0x14b00da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x15b0563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x14b00dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x15b0563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x14b00db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x15b0563f0 '__SVCount_t'
|-TypedefDecl 0x14b00dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x14b00dbb0 'char *'
|   `-BuiltinType 0x15b0556b0 'char'
|-TypedefDecl 0x14b00dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x14b00dbb0 'char *'
|   `-BuiltinType 0x15b0556b0 'char'
|-FunctionDecl 0x14b00df88 <dataset_diviso_filec/func5801_nonvuln.c:1:1, line:54:1> line:1:12 eval_if 'int (const char *, const char *, const char *, unsigned int *)' static
| |-ParmVarDecl 0x14b00dcd8 <col:20, col:32> col:32 used hdr 'const char *'
| |-ParmVarDecl 0x14b00dd58 <col:37, col:49> col:49 used etag 'const char *'
| |-ParmVarDecl 0x14b00ddd8 <col:55, col:67> col:67 used lock_token 'const char *'
| |-ParmVarDecl 0x14b00de88 <line:2:6, col:16> col:16 used locked 'unsigned int *'
| `-CompoundStmt 0x14b02bf38 <line:3:1, line:54:1>
|   |-DeclStmt 0x14b00e150 <line:4:5, col:21>
|   | `-VarDecl 0x14b00e0b0 <col:5, col:20> col:14 used ret 'unsigned int' cinit
|   |   `-ImplicitCastExpr 0x14b00e138 <col:20> 'unsigned int' <IntegralCast>
|   |     `-IntegerLiteral 0x14b00e118 <col:20> 'int' 0
|   |-DeclStmt 0x14b00e200 <line:6:5, col:15>
|   | `-VarDecl 0x14b00e198 <col:5, col:11> col:11 used list 'char *'
|   |-CallExpr 0x14b028528 <line:9:5, col:60> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x14b00e330 <col:5> 'int ()' Function 0x14b00e278 'tok_init' 'int ()'
|   | |-UnaryOperator 0x14b0284b0 <col:14, col:15> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | | `-RecoveryExpr 0x14b028490 <col:15> '<dependent type>' contains-errors lvalue
|   | |-DeclRefExpr 0x14b00e380 <col:22> 'const char *' lvalue ParmVar 0x14b00dcd8 'hdr' 'const char *'
|   | |-StringLiteral 0x14b00e3e0 <col:27> 'char[4]' lvalue "STR"
|   | `-BinaryOperator 0x14b028508 <col:34, col:47> '<dependent type>' contains-errors '|'
|   |   |-RecoveryExpr 0x14b0284c8 <col:34> '<dependent type>' contains-errors lvalue
|   |   `-RecoveryExpr 0x14b0284e8 <col:47> '<dependent type>' contains-errors lvalue
|   |-WhileStmt 0x14b02bd80 <line:10:5, line:49:5>
|   | |-RecoveryExpr 0x14b028700 <line:10:12, col:36> '_Bool' contains-errors
|   | `-CompoundStmt 0x14b02bd40 <col:39, line:49:5>
|   |   |-DeclStmt 0x14b0287d8 <line:11:2, col:20>
|   |   | `-VarDecl 0x14b028738 <col:2, col:19> col:11 used ret_l 'unsigned int' cinit
|   |   |   `-ImplicitCastExpr 0x14b0287c0 <col:19> 'unsigned int' <IntegralCast>
|   |   |     `-IntegerLiteral 0x14b0287a0 <col:19> 'int' 1
|   |   |-DeclStmt 0x14b028870 <line:13:2, col:12>
|   |   | `-VarDecl 0x14b028808 <col:2, col:8> col:8 used cond 'char *'
|   |   |-CallExpr 0x14b028bb0 <line:18:2, col:61> '<dependent type>' contains-errors
|   |   | |-DeclRefExpr 0x14b028968 <col:2> 'int ()' Function 0x14b0288b0 'tok_initm' 'int ()'
|   |   | |-UnaryOperator 0x14b028b00 <col:12, col:13> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   | | `-RecoveryExpr 0x14b028ae0 <col:13> '<dependent type>' contains-errors lvalue
|   |   | |-BinaryOperator 0x14b028b30 <col:20, col:25> 'char *' '+'
|   |   | | |-ImplicitCastExpr 0x14b028b18 <col:20> 'char *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x14b0289b8 <col:20> 'char *' lvalue Var 0x14b00e198 'list' 'char *'
|   |   | | `-IntegerLiteral 0x14b0289d8 <col:25> 'int' 1
|   |   | |-StringLiteral 0x14b028a30 <col:28> 'char[4]' lvalue "STR"
|   |   | `-BinaryOperator 0x14b028b90 <col:35, col:48> '<dependent type>' contains-errors '|'
|   |   |   |-RecoveryExpr 0x14b028b50 <col:35> '<dependent type>' contains-errors lvalue
|   |   |   `-RecoveryExpr 0x14b028b70 <col:48> '<dependent type>' contains-errors lvalue
|   |   |-WhileStmt 0x14b02bae0 <line:19:2, line:44:2>
|   |   | |-RecoveryExpr 0x14b028ca8 <line:19:9, col:33> '_Bool' contains-errors
|   |   | `-CompoundStmt 0x14b02bab0 <col:36, line:44:2>
|   |   |   |-DeclStmt 0x14b028e18 <line:20:6, col:25>
|   |   |   | |-VarDecl 0x14b028ce0 <col:6, col:15> col:15 used r 'unsigned int'
|   |   |   | `-VarDecl 0x14b028d60 <col:6, col:24> col:18 used not 'unsigned int' cinit
|   |   |   |   `-ImplicitCastExpr 0x14b028de8 <col:24> 'unsigned int' <IntegralCast>
|   |   |   |     `-IntegerLiteral 0x14b028dc8 <col:24> 'int' 0
|   |   |   |-IfStmt 0x14b02af30 <line:22:6, line:26:6>
|   |   |   | |-UnaryOperator 0x14b02acf8 <line:22:10, col:33> 'int' prefix '!' cannot overflow
|   |   |   | | `-CallExpr 0x14b02ac48 <col:11, col:33> 'int'
|   |   |   | |   |-ImplicitCastExpr 0x14b02ac30 <col:11> 'int (*)(const char *, const char *, unsigned long)' <FunctionToPointerDecay>
|   |   |   | |   | `-DeclRefExpr 0x14b02ab50 <col:11> 'int (const char *, const char *, unsigned long)' Function 0x14b0292a0 'strncmp' 'int (const char *, const char *, unsigned long)'
|   |   |   | |   |-ImplicitCastExpr 0x14b02ac98 <col:19> 'const char *' <NoOp>
|   |   |   | |   | `-ImplicitCastExpr 0x14b02ac80 <col:19> 'char *' <LValueToRValue>
|   |   |   | |   |   `-DeclRefExpr 0x14b02ab70 <col:19> 'char *' lvalue Var 0x14b028808 'cond' 'char *'
|   |   |   | |   |-ImplicitCastExpr 0x14b02acc8 <col:25> 'const char *' <NoOp>
|   |   |   | |   | `-ImplicitCastExpr 0x14b02acb0 <col:25> 'char *' <ArrayToPointerDecay>
|   |   |   | |   |   `-StringLiteral 0x14b02ab90 <col:25> 'char[4]' lvalue "STR"
|   |   |   | |   `-ImplicitCastExpr 0x14b02ace0 <col:32> 'unsigned long' <IntegralCast>
|   |   |   | |     `-IntegerLiteral 0x14b02abb0 <col:32> 'int' 3
|   |   |   | `-CompoundStmt 0x14b02af08 <col:36, line:26:6>
|   |   |   |   |-BinaryOperator 0x14b02ad68 <line:23:3, col:9> 'unsigned int' '='
|   |   |   |   | |-DeclRefExpr 0x14b02ad10 <col:3> 'unsigned int' lvalue Var 0x14b028d60 'not' 'unsigned int'
|   |   |   |   | `-ImplicitCastExpr 0x14b02ad50 <col:9> 'unsigned int' <IntegralCast>
|   |   |   |   |   `-IntegerLiteral 0x14b02ad30 <col:9> 'int' 1
|   |   |   |   |-CompoundAssignOperator 0x14b02adc8 <line:24:3, col:11> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
|   |   |   |   | |-DeclRefExpr 0x14b02ad88 <col:3> 'char *' lvalue Var 0x14b028808 'cond' 'char *'
|   |   |   |   | `-IntegerLiteral 0x14b02ada8 <col:11> 'int' 3
|   |   |   |   `-WhileStmt 0x14b02aee8 <line:25:3, col:28>
|   |   |   |     |-BinaryOperator 0x14b02ae90 <col:10, col:19> 'int' '=='
|   |   |   |     | |-ImplicitCastExpr 0x14b02ae78 <col:10, col:11> 'int' <IntegralCast>
|   |   |   |     | | `-ImplicitCastExpr 0x14b02ae60 <col:10, col:11> 'char' <LValueToRValue>
|   |   |   |     | |   `-UnaryOperator 0x14b02ae30 <col:10, col:11> 'char' lvalue prefix '*' cannot overflow
|   |   |   |     | |     `-ImplicitCastExpr 0x14b02ae18 <col:11> 'char *' <LValueToRValue>
|   |   |   |     | |       `-DeclRefExpr 0x14b02adf8 <col:11> 'char *' lvalue Var 0x14b028808 'cond' 'char *'
|   |   |   |     | `-CharacterLiteral 0x14b02ae48 <col:19> 'int' 32
|   |   |   |     `-UnaryOperator 0x14b02aed0 <col:24, col:28> 'char *' postfix '++'
|   |   |   |       `-DeclRefExpr 0x14b02aeb0 <col:24> 'char *' lvalue Var 0x14b028808 'cond' 'char *'
|   |   |   |-IfStmt 0x14b02b908 <line:27:6, line:41:6> has_else
|   |   |   | |-BinaryOperator 0x14b02afe8 <line:27:10, col:19> 'int' '=='
|   |   |   | | |-ImplicitCastExpr 0x14b02afd0 <col:10, col:11> 'int' <IntegralCast>
|   |   |   | | | `-ImplicitCastExpr 0x14b02afb8 <col:10, col:11> 'char' <LValueToRValue>
|   |   |   | | |   `-UnaryOperator 0x14b02af88 <col:10, col:11> 'char' lvalue prefix '*' cannot overflow
|   |   |   | | |     `-ImplicitCastExpr 0x14b02af70 <col:11> 'char *' <LValueToRValue>
|   |   |   | | |       `-DeclRefExpr 0x14b02af50 <col:11> 'char *' lvalue Var 0x14b028808 'cond' 'char *'
|   |   |   | | `-CharacterLiteral 0x14b02afa0 <col:19> 'int' 91
|   |   |   | |-CompoundStmt 0x14b02b2a0 <col:24, line:30:6>
|   |   |   | | `-BinaryOperator 0x14b02b280 <line:29:3, col:28> 'unsigned int' '='
|   |   |   | |   |-DeclRefExpr 0x14b02b008 <col:3> 'unsigned int' lvalue Var 0x14b028ce0 'r' 'unsigned int'
|   |   |   | |   `-ImplicitCastExpr 0x14b02b268 <col:7, col:28> 'unsigned int' <IntegralCast>
|   |   |   | |     `-UnaryOperator 0x14b02b250 <col:7, col:28> 'int' prefix '!' cannot overflow
|   |   |   | |       `-CallExpr 0x14b02b208 <col:8, col:28> 'int'
|   |   |   | |         |-ImplicitCastExpr 0x14b02b1f0 <col:8> 'int (*)()' <FunctionToPointerDecay>
|   |   |   | |         | `-DeclRefExpr 0x14b02b108 <col:8> 'int ()' Function 0x14b02b050 'etagcmp' 'int ()'
|   |   |   | |         |-BinaryOperator 0x14b02b180 <col:16, col:21> 'char *' '+'
|   |   |   | |         | |-ImplicitCastExpr 0x14b02b168 <col:16> 'char *' <LValueToRValue>
|   |   |   | |         | | `-DeclRefExpr 0x14b02b128 <col:16> 'char *' lvalue Var 0x14b028808 'cond' 'char *'
|   |   |   | |         | `-IntegerLiteral 0x14b02b148 <col:21> 'int' 1
|   |   |   | |         `-ImplicitCastExpr 0x14b02b238 <col:24> 'const char *' <LValueToRValue>
|   |   |   | |           `-DeclRefExpr 0x14b02b1a0 <col:24> 'const char *' lvalue ParmVar 0x14b00dd58 'etag' 'const char *'
|   |   |   | `-CompoundStmt 0x14b02b8f0 <line:31:11, line:41:6>
|   |   |   |   `-IfStmt 0x14b02b8c0 <line:33:3, line:40:3> has_else
|   |   |   |     |-UnaryOperator 0x14b02b2f0 <line:33:7, col:8> 'int' prefix '!' cannot overflow
|   |   |   |     | `-ImplicitCastExpr 0x14b02b2d8 <col:8> 'const char *' <LValueToRValue>
|   |   |   |     |   `-DeclRefExpr 0x14b02b2b8 <col:8> 'const char *' lvalue ParmVar 0x14b00ddd8 'lock_token' 'const char *'
|   |   |   |     |-BinaryOperator 0x14b02b360 <col:20, col:24> 'unsigned int' '='
|   |   |   |     | |-DeclRefExpr 0x14b02b308 <col:20> 'unsigned int' lvalue Var 0x14b028ce0 'r' 'unsigned int'
|   |   |   |     | `-ImplicitCastExpr 0x14b02b348 <col:24> 'unsigned int' <IntegralCast>
|   |   |   |     |   `-IntegerLiteral 0x14b02b328 <col:24> 'int' 0
|   |   |   |     `-CompoundStmt 0x14b02b8a0 <line:34:8, line:40:3>
|   |   |   |       |-BinaryOperator 0x14b02b768 <line:35:7, col:37> 'unsigned int' '='
|   |   |   |       | |-DeclRefExpr 0x14b02b380 <col:7> 'unsigned int' lvalue Var 0x14b028ce0 'r' 'unsigned int'
|   |   |   |       | `-ImplicitCastExpr 0x14b02b750 <col:11, col:37> 'unsigned int' <IntegralCast>
|   |   |   |       |   `-UnaryOperator 0x14b02b738 <col:11, col:37> 'int' prefix '!' cannot overflow
|   |   |   |       |     `-CallExpr 0x14b02b6d8 <col:12, col:37> 'int'
|   |   |   |       |       |-ImplicitCastExpr 0x14b02b6c0 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |   |   |       |       | `-DeclRefExpr 0x14b02b5c0 <col:12> 'int (const char *, const char *)' Function 0x14b02b3e0 'strcmp' 'int (const char *, const char *)'
|   |   |   |       |       |-ImplicitCastExpr 0x14b02b708 <col:19, col:24> 'const char *' <NoOp>
|   |   |   |       |       | `-BinaryOperator 0x14b02b638 <col:19, col:24> 'char *' '+'
|   |   |   |       |       |   |-ImplicitCastExpr 0x14b02b620 <col:19> 'char *' <LValueToRValue>
|   |   |   |       |       |   | `-DeclRefExpr 0x14b02b5e0 <col:19> 'char *' lvalue Var 0x14b028808 'cond' 'char *'
|   |   |   |       |       |   `-IntegerLiteral 0x14b02b600 <col:24> 'int' 1
|   |   |   |       |       `-ImplicitCastExpr 0x14b02b720 <col:27> 'const char *' <LValueToRValue>
|   |   |   |       |         `-DeclRefExpr 0x14b02b658 <col:27> 'const char *' lvalue ParmVar 0x14b00ddd8 'lock_token' 'const char *'
|   |   |   |       `-IfStmt 0x14b02b880 <line:36:7, line:39:7>
|   |   |   |         |-ImplicitCastExpr 0x14b02b7a8 <line:36:11> 'unsigned int' <LValueToRValue>
|   |   |   |         | `-DeclRefExpr 0x14b02b788 <col:11> 'unsigned int' lvalue Var 0x14b028ce0 'r' 'unsigned int'
|   |   |   |         `-CompoundStmt 0x14b02b868 <col:14, line:39:7>
|   |   |   |           `-BinaryOperator 0x14b02b848 <line:38:4, col:14> 'unsigned int' '='
|   |   |   |             |-UnaryOperator 0x14b02b7f8 <col:4, col:5> 'unsigned int' lvalue prefix '*' cannot overflow
|   |   |   |             | `-ImplicitCastExpr 0x14b02b7e0 <col:5> 'unsigned int *' <LValueToRValue>
|   |   |   |             |   `-DeclRefExpr 0x14b02b7c0 <col:5> 'unsigned int *' lvalue ParmVar 0x14b00de88 'locked' 'unsigned int *'
|   |   |   |             `-ImplicitCastExpr 0x14b02b830 <col:14> 'unsigned int' <IntegralCast>
|   |   |   |               `-IntegerLiteral 0x14b02b810 <col:14> 'int' 0
|   |   |   `-CompoundAssignOperator 0x14b02ba80 <line:43:6, col:28> 'unsigned int' '&=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   |   |     |-DeclRefExpr 0x14b02b938 <col:6> 'unsigned int' lvalue Var 0x14b028738 'ret_l' 'unsigned int'
|   |   |     `-ParenExpr 0x14b02ba60 <col:15, col:28> 'unsigned int'
|   |   |       `-ConditionalOperator 0x14b02ba30 <col:16, col:27> 'unsigned int'
|   |   |         |-ImplicitCastExpr 0x14b02b9e8 <col:16> 'unsigned int' <LValueToRValue>
|   |   |         | `-DeclRefExpr 0x14b02b958 <col:16> 'unsigned int' lvalue Var 0x14b028d60 'not' 'unsigned int'
|   |   |         |-ImplicitCastExpr 0x14b02ba18 <col:22, col:23> 'unsigned int' <IntegralCast>
|   |   |         | `-UnaryOperator 0x14b02b9b0 <col:22, col:23> 'int' prefix '!' cannot overflow
|   |   |         |   `-ImplicitCastExpr 0x14b02b998 <col:23> 'unsigned int' <LValueToRValue>
|   |   |         |     `-DeclRefExpr 0x14b02b978 <col:23> 'unsigned int' lvalue Var 0x14b028ce0 'r' 'unsigned int'
|   |   |         `-ImplicitCastExpr 0x14b02ba00 <col:27> 'unsigned int' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x14b02b9c8 <col:27> 'unsigned int' lvalue Var 0x14b028ce0 'r' 'unsigned int'
|   |   |-CallExpr 0x14b02bc90 <line:46:2, col:17> '<dependent type>' contains-errors
|   |   | |-DeclRefExpr 0x14b02bbe0 <col:2> 'int ()' Function 0x14b02bb28 'tok_fini' 'int ()'
|   |   | `-UnaryOperator 0x14b02bc78 <col:11, col:12> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   |   `-RecoveryExpr 0x14b02bc58 <col:12> '<dependent type>' contains-errors lvalue
|   |   `-CompoundAssignOperator 0x14b02bd10 <line:48:2, col:9> 'unsigned int' '|=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   |     |-DeclRefExpr 0x14b02bcb8 <col:2> 'unsigned int' lvalue Var 0x14b00e0b0 'ret' 'unsigned int'
|   |     `-ImplicitCastExpr 0x14b02bcf8 <col:9> 'unsigned int' <LValueToRValue>
|   |       `-DeclRefExpr 0x14b02bcd8 <col:9> 'unsigned int' lvalue Var 0x14b028738 'ret_l' 'unsigned int'
|   |-CallExpr 0x14b02be50 <line:51:5, col:20> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x14b02bda0 <col:5> 'int ()' Function 0x14b02bb28 'tok_fini' 'int ()'
|   | `-UnaryOperator 0x14b02be38 <col:14, col:15> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   `-RecoveryExpr 0x14b02be18 <col:15> '<dependent type>' contains-errors lvalue
|   `-ReturnStmt 0x14b02bf28 <line:53:5, col:26>
|     `-ParenExpr 0x14b02bf08 <col:12, col:26> 'int'
|       `-BinaryOperator 0x14b02bee8 <col:13, col:20> 'int' '||'
|         |-ImplicitCastExpr 0x14b02beb8 <col:13> 'unsigned int' <LValueToRValue>
|         | `-DeclRefExpr 0x14b02be78 <col:13> 'unsigned int' lvalue Var 0x14b00e0b0 'ret' 'unsigned int'
|         `-ImplicitCastExpr 0x14b02bed0 <col:20> 'unsigned int *' <LValueToRValue>
|           `-DeclRefExpr 0x14b02be98 <col:20> 'unsigned int *' lvalue ParmVar 0x14b00de88 'locked' 'unsigned int *'
|-FunctionDecl 0x14b0292a0 <line:22:11> col:11 implicit used strncmp 'int (const char *, const char *, unsigned long)' extern
| |-ParmVarDecl 0x14b02aa00 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x14b02aa68 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x14b02aad0 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x14b029348 <<invalid sloc>> Implicit 888
`-FunctionDecl 0x14b02b3e0 <line:35:12> col:12 implicit used strcmp 'int (const char *, const char *)' extern
  |-ParmVarDecl 0x14b02b4e0 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x14b02b548 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x14b02b488 <<invalid sloc>> Implicit 887
