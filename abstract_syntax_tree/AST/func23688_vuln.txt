TranslationUnitDecl 0x138055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1380564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x138055bd0 '__int128'
|-TypedefDecl 0x138056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x138055bf0 'unsigned __int128'
|-TypedefDecl 0x13000be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13000bc00 'struct __NSConstantString_tag'
|   `-Record 0x138056580 '__NSConstantString_tag'
|-TypedefDecl 0x13000be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x138055d90 '__SVInt8_t'
|-TypedefDecl 0x13000bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x138055db0 '__SVInt16_t'
|-TypedefDecl 0x13000bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x138055dd0 '__SVInt32_t'
|-TypedefDecl 0x13000bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x138055df0 '__SVInt64_t'
|-TypedefDecl 0x13000c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x138055e10 '__SVUint8_t'
|-TypedefDecl 0x13000c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x138055e30 '__SVUint16_t'
|-TypedefDecl 0x13000c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x138055e50 '__SVUint32_t'
|-TypedefDecl 0x13000c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x138055e70 '__SVUint64_t'
|-TypedefDecl 0x13000c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x138055e90 '__SVFloat16_t'
|-TypedefDecl 0x13000c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x138055eb0 '__SVFloat32_t'
|-TypedefDecl 0x13000c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x138055ed0 '__SVFloat64_t'
|-TypedefDecl 0x13000c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x138055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13000c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x138055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13000c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x138055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13000c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x138055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13000c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x138055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13000c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x138055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13000c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x138055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13000c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x138055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13000c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x138055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13000c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x138056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13000c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x138056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13000c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x138056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13000c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x138056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13000c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x138056090 '__clang_svint8x3_t'
|-TypedefDecl 0x13000c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1380560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13000c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1380560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13000c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1380560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13000c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x138056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13000ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x138056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13000cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x138056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13000cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x138056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13000cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x138056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13000d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1380561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13000d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1380561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13000d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1380561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13000d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x138056210 '__clang_svint8x4_t'
|-TypedefDecl 0x13000d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x138056230 '__clang_svint16x4_t'
|-TypedefDecl 0x13000d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x138056250 '__clang_svint32x4_t'
|-TypedefDecl 0x13000d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x138056270 '__clang_svint64x4_t'
|-TypedefDecl 0x13000d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x138056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13000d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1380562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13000d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1380562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13000d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1380562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13000d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x138056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13000d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x138056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13000d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x138056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13000d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x138056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13000da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x138056390 '__SVBool_t'
|-TypedefDecl 0x13000da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1380563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13000dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1380563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13000db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1380563f0 '__SVCount_t'
|-TypedefDecl 0x13000dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13000dbb0 'char *'
|   `-BuiltinType 0x1380556b0 'char'
|-TypedefDecl 0x13000dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13000dbb0 'char *'
|   `-BuiltinType 0x1380556b0 'char'
|-FunctionDecl 0x13000de38 <dataset_diviso_filec/func23688_vuln.c:1:1, line:22:1> line:1:1 t1mac_output_ascii 'int (char *, int)'
| |-ParmVarDecl 0x13000dcd8 <col:20, col:26> col:26 used s 'char *'
| |-ParmVarDecl 0x13000dd58 <col:29, col:33> col:33 used len 'int'
| `-CompoundStmt 0x13002a520 <line:2:1, line:22:1>
|   |-IfStmt 0x13000e1c8 <line:3:3, line:6:3>
|   | |-BinaryOperator 0x13000dfe0 <line:3:7, col:19> 'int' contains-errors '=='
|   | | |-RecoveryExpr 0x13000dfa0 <col:7> '<dependent type>' contains-errors lvalue
|   | | `-RecoveryExpr 0x13000dfc0 <col:19> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x13000e1b0 <col:32, line:6:3>
|   |   `-CallExpr 0x13000e178 <line:4:5, col:25> 'int'
|   |     `-ImplicitCastExpr 0x13000e160 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x13000e110 <col:5> 'int ()' Function 0x13000e058 'output_current_post' 'int ()'
|   |-IfStmt 0x1300278e0 <line:8:3, line:9:16>
|   | |-BinaryOperator 0x13000e398 <line:8:7, col:30> 'int' '&&'
|   | | |-BinaryOperator 0x13000e240 <col:7, col:13> 'int' '>'
|   | | | |-ImplicitCastExpr 0x13000e228 <col:7> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x13000e1e8 <col:7> 'int' lvalue ParmVar 0x13000dd58 'len' 'int'
|   | | | `-IntegerLiteral 0x13000e208 <col:13> 'int' 0
|   | | `-BinaryOperator 0x13000e378 <col:18, col:30> 'int' '=='
|   | |   |-ImplicitCastExpr 0x13000e360 <col:18, col:25> 'int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x13000e348 <col:18, col:25> 'char' <LValueToRValue>
|   | |   |   `-ArraySubscriptExpr 0x13000e310 <col:18, col:25> 'char' lvalue
|   | |   |     |-ImplicitCastExpr 0x13000e2f8 <col:18> 'char *' <LValueToRValue>
|   | |   |     | `-DeclRefExpr 0x13000e260 <col:18> 'char *' lvalue ParmVar 0x13000dcd8 's' 'char *'
|   | |   |     `-BinaryOperator 0x13000e2d8 <col:20, col:24> 'int' '-'
|   | |   |       |-ImplicitCastExpr 0x13000e2c0 <col:20> 'int' <LValueToRValue>
|   | |   |       | `-DeclRefExpr 0x13000e280 <col:20> 'int' lvalue ParmVar 0x13000dd58 'len' 'int'
|   | |   |       `-IntegerLiteral 0x13000e2a0 <col:24> 'int' 1
|   | |   `-CharacterLiteral 0x13000e330 <col:30> 'int' 10
|   | `-BinaryOperator 0x1300278c0 <line:9:5, col:16> 'char' '='
|   |   |-ArraySubscriptExpr 0x130027870 <col:5, col:12> 'char' lvalue
|   |   | |-ImplicitCastExpr 0x130027858 <col:5> 'char *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x13000e3b8 <col:5> 'char *' lvalue ParmVar 0x13000dcd8 's' 'char *'
|   |   | `-BinaryOperator 0x130027838 <col:7, col:11> 'int' '-'
|   |   |   |-ImplicitCastExpr 0x130027820 <col:7> 'int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x13000e3d8 <col:7> 'int' lvalue ParmVar 0x13000dd58 'len' 'int'
|   |   |   `-IntegerLiteral 0x130027800 <col:11> 'int' 1
|   |   `-ImplicitCastExpr 0x1300278a8 <col:16> 'char' <IntegralCast>
|   |     `-CharacterLiteral 0x130027890 <col:16> 'int' 13
|   `-IfStmt 0x13002a500 <line:11:3, line:21:3>
|     |-BinaryOperator 0x130028308 <line:11:7, col:31> 'int' '=='
|     | |-CallExpr 0x130028238 <col:7, col:26> 'int'
|     | | |-ImplicitCastExpr 0x130028220 <col:7> 'int (*)(const char *, const char *, unsigned long)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x130028100 <col:7> 'int (const char *, const char *, unsigned long)' Function 0x130027eb0 'strncmp' 'int (const char *, const char *, unsigned long)'
|     | | |-ImplicitCastExpr 0x130028288 <col:15> 'const char *' <NoOp>
|     | | | `-ImplicitCastExpr 0x130028270 <col:15> 'char *' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x130028120 <col:15> 'char *' lvalue ParmVar 0x13000dcd8 's' 'char *'
|     | | |-ImplicitCastExpr 0x1300282b8 <col:18> 'const char *' <NoOp>
|     | | | `-ImplicitCastExpr 0x1300282a0 <col:18> 'char *' <ArrayToPointerDecay>
|     | | |   `-StringLiteral 0x130028180 <col:18> 'char[4]' lvalue "STR"
|     | | `-ImplicitCastExpr 0x1300282d0 <col:25> 'unsigned long' <IntegralCast>
|     | |   `-IntegerLiteral 0x1300281a0 <col:25> 'int' 9
|     | `-IntegerLiteral 0x1300282e8 <col:31> 'int' 0
|     `-CompoundStmt 0x13002a4e0 <col:34, line:21:3>
|       |-ForStmt 0x1300286f0 <line:12:5, col:36>
|       | |-CompoundAssignOperator 0x130028368 <col:10, col:15> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
|       | | |-DeclRefExpr 0x130028328 <col:10> 'char *' lvalue ParmVar 0x13000dcd8 's' 'char *'
|       | | `-IntegerLiteral 0x130028348 <col:15> 'int' 9
|       | |-<<<NULL>>>
|       | |-CallExpr 0x130028658 <col:18, col:28> 'int'
|       | | |-ImplicitCastExpr 0x130028640 <col:18> 'int (*)(int)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x130028598 <col:18> 'int (int)' Function 0x1300283d8 'isspace' 'int (int)'
|       | | `-ImplicitCastExpr 0x130028698 <col:26, col:27> 'int' <IntegralCast>
|       | |   `-ImplicitCastExpr 0x130028680 <col:26, col:27> 'char' <LValueToRValue>
|       | |     `-UnaryOperator 0x1300285f0 <col:26, col:27> 'char' lvalue prefix '*' cannot overflow
|       | |       `-ImplicitCastExpr 0x1300285d8 <col:27> 'char *' <LValueToRValue>
|       | |         `-DeclRefExpr 0x1300285b8 <col:27> 'char *' lvalue ParmVar 0x13000dcd8 's' 'char *'
|       | |-UnaryOperator 0x1300286d0 <col:31, col:32> 'char *' postfix '++'
|       | | `-DeclRefExpr 0x1300286b0 <col:31> 'char *' lvalue ParmVar 0x13000dcd8 's' 'char *'
|       | `-NullStmt 0x1300286e8 <col:36>
|       `-IfStmt 0x13002a4c0 <line:13:5, line:20:5>
|         |-BinaryOperator 0x1300287c0 <line:13:9, col:15> 'int' '=='
|         | |-ImplicitCastExpr 0x1300287a8 <col:9, col:10> 'int' <IntegralCast>
|         | | `-ImplicitCastExpr 0x130028790 <col:9, col:10> 'char' <LValueToRValue>
|         | |   `-UnaryOperator 0x130028760 <col:9, col:10> 'char' lvalue prefix '*' cannot overflow
|         | |     `-ImplicitCastExpr 0x130028748 <col:10> 'char *' <LValueToRValue>
|         | |       `-DeclRefExpr 0x130028728 <col:10> 'char *' lvalue ParmVar 0x13000dcd8 's' 'char *'
|         | `-CharacterLiteral 0x130028778 <col:15> 'int' 47
|         `-CompoundStmt 0x13002a490 <col:20, line:20:5>
|           |-DeclStmt 0x1300296b8 <line:14:7, col:26>
|           | `-VarDecl 0x130029600 <col:7, col:25> col:19 used t 'const char *' cinit
|           |   `-ImplicitCastExpr 0x1300296a0 <col:23, col:25> 'const char *' <NoOp>
|           |     `-UnaryOperator 0x130029688 <col:23, col:25> 'char *' prefix '++'
|           |       `-DeclRefExpr 0x130029668 <col:25> 'char *' lvalue ParmVar 0x13000dcd8 's' 'char *'
|           |-WhileStmt 0x1300298a0 <line:15:7, col:35>
|           | |-BinaryOperator 0x130029848 <col:14, col:31> 'int' '&&'
|           | | |-ImplicitCastExpr 0x130029830 <col:14, col:15> 'int' <IntegralCast>
|           | | | `-ImplicitCastExpr 0x130029818 <col:14, col:15> 'char' <LValueToRValue>
|           | | |   `-UnaryOperator 0x130029708 <col:14, col:15> 'const char' lvalue prefix '*' cannot overflow
|           | | |     `-ImplicitCastExpr 0x1300296f0 <col:15> 'const char *' <LValueToRValue>
|           | | |       `-DeclRefExpr 0x1300296d0 <col:15> 'const char *' lvalue Var 0x130029600 't' 'const char *'
|           | | `-UnaryOperator 0x130029800 <col:20, col:31> 'int' prefix '!' cannot overflow
|           | |   `-CallExpr 0x1300297a8 <col:21, col:31> 'int'
|           | |     |-ImplicitCastExpr 0x130029790 <col:21> 'int (*)(int)' <FunctionToPointerDecay>
|           | |     | `-DeclRefExpr 0x130029720 <col:21> 'int (int)' Function 0x1300283d8 'isspace' 'int (int)'
|           | |     `-ImplicitCastExpr 0x1300297e8 <col:29, col:30> 'int' <IntegralCast>
|           | |       `-ImplicitCastExpr 0x1300297d0 <col:29, col:30> 'char' <LValueToRValue>
|           | |         `-UnaryOperator 0x130029778 <col:29, col:30> 'const char' lvalue prefix '*' cannot overflow
|           | |           `-ImplicitCastExpr 0x130029760 <col:30> 'const char *' <LValueToRValue>
|           | |             `-DeclRefExpr 0x130029740 <col:30> 'const char *' lvalue Var 0x130029600 't' 'const char *'
|           | `-UnaryOperator 0x130029888 <col:34, col:35> 'const char *' postfix '++'
|           |   `-DeclRefExpr 0x130029868 <col:34> 'const char *' lvalue Var 0x130029600 't' 'const char *'
|           |-CallExpr 0x130029b18 <line:16:7, col:21> '<dependent type>' contains-errors
|           | |-DeclRefExpr 0x130029a68 <col:7> 'void (void *)' Function 0x1300298f8 'free' 'void (void *)'
|           | `-RecoveryExpr 0x130029ae0 <col:12> '<dependent type>' contains-errors lvalue
|           `-CallExpr 0x13002a3a8 <line:18:7, col:33> '<dependent type>' contains-errors
|             |-DeclRefExpr 0x13002a1b8 <col:7> 'void *(void *, const void *, unsigned long)' Function 0x130029f68 'memcpy' 'void *(void *, const void *, unsigned long)'
|             |-RecoveryExpr 0x13002a308 <col:14> '<dependent type>' contains-errors lvalue
|             |-DeclRefExpr 0x13002a1f0 <col:25> 'char *' lvalue ParmVar 0x13000dcd8 's' 'char *'
|             `-BinaryOperator 0x13002a358 <col:28, col:32> 'long' '-'
|               |-ImplicitCastExpr 0x13002a328 <col:28> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x13002a210 <col:28> 'const char *' lvalue Var 0x130029600 't' 'const char *'
|               `-ImplicitCastExpr 0x13002a340 <col:32> 'char *' <LValueToRValue>
|                 `-DeclRefExpr 0x13002a230 <col:32> 'char *' lvalue ParmVar 0x13000dcd8 's' 'char *'
|-FunctionDecl 0x130027eb0 <line:11:7> col:7 implicit used strncmp 'int (const char *, const char *, unsigned long)' extern
| |-ParmVarDecl 0x130027fb0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x130028018 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x130028080 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x130027f58 <<invalid sloc>> Implicit 888
|-FunctionDecl 0x1300283d8 <line:12:18> col:18 implicit used isspace 'int (int)' extern
| |-ParmVarDecl 0x1300284d8 <<invalid sloc>> <invalid sloc> 'int'
| |-BuiltinAttr 0x130028480 <<invalid sloc>> Implicit 929
| |-NoThrowAttr 0x130028548 <col:18> Implicit
| `-PureAttr 0x130028570 <col:18> Implicit
|-FunctionDecl 0x1300298f8 <line:16:7> col:7 implicit used free 'void (void *)' extern
| |-ParmVarDecl 0x1300299f8 <<invalid sloc>> <invalid sloc> 'void *'
| `-BuiltinAttr 0x1300299a0 <<invalid sloc>> Implicit 873
|-FunctionDecl 0x130029b78 <line:17:27> col:27 implicit used malloc 'void *(unsigned long)' extern
| |-ParmVarDecl 0x130029c78 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-BuiltinAttr 0x130029c20 <<invalid sloc>> Implicit 871
| `-AllocSizeAttr 0x130029ce8 <col:27> Implicit 1
`-FunctionDecl 0x130029f68 <line:18:7> col:7 implicit used memcpy 'void *(void *, const void *, unsigned long)' extern
  |-ParmVarDecl 0x13002a068 <<invalid sloc>> <invalid sloc> 'void *'
  |-ParmVarDecl 0x13002a0d0 <<invalid sloc>> <invalid sloc> 'const void *'
  |-ParmVarDecl 0x13002a138 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x13002a010 <<invalid sloc>> Implicit 882
