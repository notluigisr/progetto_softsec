TranslationUnitDecl 0x11f055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x11f0564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x11f055bd0 '__int128'
|-TypedefDecl 0x11f056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x11f055bf0 'unsigned __int128'
|-TypedefDecl 0x11f80be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x11f80bc00 'struct __NSConstantString_tag'
|   `-Record 0x11f056580 '__NSConstantString_tag'
|-TypedefDecl 0x11f80be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x11f055d90 '__SVInt8_t'
|-TypedefDecl 0x11f80bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x11f055db0 '__SVInt16_t'
|-TypedefDecl 0x11f80bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x11f055dd0 '__SVInt32_t'
|-TypedefDecl 0x11f80bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x11f055df0 '__SVInt64_t'
|-TypedefDecl 0x11f80c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x11f055e10 '__SVUint8_t'
|-TypedefDecl 0x11f80c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x11f055e30 '__SVUint16_t'
|-TypedefDecl 0x11f80c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x11f055e50 '__SVUint32_t'
|-TypedefDecl 0x11f80c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x11f055e70 '__SVUint64_t'
|-TypedefDecl 0x11f80c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x11f055e90 '__SVFloat16_t'
|-TypedefDecl 0x11f80c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x11f055eb0 '__SVFloat32_t'
|-TypedefDecl 0x11f80c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x11f055ed0 '__SVFloat64_t'
|-TypedefDecl 0x11f80c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x11f055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x11f80c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x11f055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x11f80c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x11f055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x11f80c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x11f055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x11f80c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x11f055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x11f80c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x11f055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x11f80c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x11f055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x11f80c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x11f055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x11f80c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x11f055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x11f80c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x11f056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x11f80c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x11f056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x11f80c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x11f056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x11f80c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x11f056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x11f80c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x11f056090 '__clang_svint8x3_t'
|-TypedefDecl 0x11f80c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x11f0560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x11f80c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x11f0560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x11f80c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x11f0560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x11f80c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x11f056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x11f80ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x11f056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x11f80cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x11f056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x11f80cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x11f056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x11f80cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x11f056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x11f80d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x11f0561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x11f80d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x11f0561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x11f80d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x11f0561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x11f80d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x11f056210 '__clang_svint8x4_t'
|-TypedefDecl 0x11f80d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x11f056230 '__clang_svint16x4_t'
|-TypedefDecl 0x11f80d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x11f056250 '__clang_svint32x4_t'
|-TypedefDecl 0x11f80d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x11f056270 '__clang_svint64x4_t'
|-TypedefDecl 0x11f80d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x11f056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x11f80d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x11f0562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x11f80d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x11f0562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x11f80d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x11f0562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x11f80d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x11f056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x11f80d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x11f056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x11f80d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x11f056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x11f80d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x11f056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x11f80da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x11f056390 '__SVBool_t'
|-TypedefDecl 0x11f80da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x11f0563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x11f80dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x11f0563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x11f80db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x11f0563f0 '__SVCount_t'
|-TypedefDecl 0x11f80dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x11f80dbb0 'char *'
|   `-BuiltinType 0x11f0556b0 'char'
|-TypedefDecl 0x11f80dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x11f80dbb0 'char *'
|   `-BuiltinType 0x11f0556b0 'char'
`-FunctionDecl 0x11f80dfa8 <dataset_diviso_filec/func6285_vuln.c:1:1, line:47:1> line:1:1 referenced invalid virSecuritySELinuxMCSFind 'int (int *, const char *, int, int)'
  |-ParmVarDecl 0x11f80dd28 <col:27, col:47> col:47 invalid mgr 'int *'
  |-ParmVarDecl 0x11f80dda8 <line:2:27, col:39> col:39 used sens 'const char *'
  |-ParmVarDecl 0x11f80de28 <line:3:27, col:31> col:31 used catMin 'int'
  |-ParmVarDecl 0x11f80dea8 <line:4:27, col:31> col:31 used catMax 'int'
  `-CompoundStmt 0x11f827518 <line:5:1, line:47:1>
    |-BinaryOperator 0x11f80e318 <line:6:5, col:72> '<dependent type>' contains-errors '='
    | |-BinaryOperator 0x11f80e2f8 <col:5, col:29> '<dependent type>' contains-errors '*'
    | | |-RecoveryExpr 0x11f80e090 <col:5> '<dependent type>' contains-errors lvalue
    | | | `-DeclRefExpr 0x11f80e070 <col:5> 'int (int *, const char *, int, int)' Function 0x11f80dfa8 'virSecuritySELinuxMCSFind' 'int (int *, const char *, int, int)'
    | | `-RecoveryExpr 0x11f80e2d8 <col:29> '<dependent type>' contains-errors lvalue
    | `-CallExpr 0x11f80e290 <col:36, col:72> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x11f80e250 <col:36> 'int ()' Function 0x11f80e198 'virSecurityManagerGetPrivateData' 'int ()'
    |   `-RecoveryExpr 0x11f80e270 <col:69> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x11f80e3b8 <line:7:5, col:17>
    | `-VarDecl 0x11f80e350 <col:5, col:9> col:9 used catRange 'int'
    |-DeclStmt 0x1280082a0 <line:8:5, col:21>
    | `-VarDecl 0x128008200 <col:5, col:17> col:11 used mcs 'char *' cinit
    |   `-RecoveryExpr 0x128008280 <col:17> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x1280083c8 <line:11:5, col:36> 'int' '='
    | |-DeclRefExpr 0x1280082b8 <col:5> 'int' lvalue Var 0x11f80e350 'catRange' 'int'
    | `-BinaryOperator 0x1280083a8 <col:16, col:36> 'int' '+'
    |   |-ParenExpr 0x128008368 <col:16, col:32> 'int'
    |   | `-BinaryOperator 0x128008348 <col:17, col:26> 'int' '-'
    |   |   |-ImplicitCastExpr 0x128008318 <col:17> 'int' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x1280082d8 <col:17> 'int' lvalue ParmVar 0x11f80dea8 'catMax' 'int'
    |   |   `-ImplicitCastExpr 0x128008330 <col:26> 'int' <LValueToRValue>
    |   |     `-DeclRefExpr 0x1280082f8 <col:26> 'int' lvalue ParmVar 0x11f80de28 'catMin' 'int'
    |   `-IntegerLiteral 0x128008388 <col:36> 'int' 1
    |-IfStmt 0x128008908 <line:13:5, line:18:5>
    | |-BinaryOperator 0x128008440 <line:13:9, col:20> 'int' '<'
    | | |-ImplicitCastExpr 0x128008428 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1280083e8 <col:9> 'int' lvalue Var 0x11f80e350 'catRange' 'int'
    | | `-IntegerLiteral 0x128008408 <col:20> 'int' 8
    | `-CompoundStmt 0x1280088e8 <col:23, line:18:5>
    |   |-CallExpr 0x128008860 <line:14:9, line:16:38> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x128008540 <line:14:9> 'int ()' Function 0x128008488 'virReportError' 'int ()'
    |   | |-RecoveryExpr 0x1280087e8 <col:24> '<dependent type>' contains-errors lvalue
    |   | |-CallExpr 0x128008820 <line:15:24, col:31> 'int'
    |   | | |-ImplicitCastExpr 0x128008808 <col:24> 'int (*)()' <FunctionToPointerDecay>
    |   | | | `-DeclRefExpr 0x128008658 <col:24> 'int ()' Function 0x1280085a0 '_' 'int ()'
    |   | | `-ImplicitCastExpr 0x128008848 <col:26> 'char *' <ArrayToPointerDecay>
    |   | |   `-StringLiteral 0x1280086c0 <col:26> 'char[4]' lvalue "STR"
    |   | |-DeclRefExpr 0x128008768 <line:16:24> 'int' lvalue ParmVar 0x11f80de28 'catMin' 'int'
    |   | `-DeclRefExpr 0x128008788 <col:32> 'int' lvalue ParmVar 0x11f80dea8 'catMax' 'int'
    |   `-ReturnStmt 0x1280088d8 <line:17:9, col:16>
    |     `-RecoveryExpr 0x1280088b8 <col:16> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x128008ae0 <line:20:5, line:21:45> 'int'
    | |-ImplicitCastExpr 0x128008ac8 <line:20:5> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x128008a08 <col:5> 'int ()' Function 0x128008950 'VIR_DEBUG' 'int ()'
    | |-ImplicitCastExpr 0x128008b28 <col:15> 'char *' <ArrayToPointerDecay>
    | | `-StringLiteral 0x128008a28 <col:15> 'char[4]' lvalue "STR"
    | |-ImplicitCastExpr 0x128008b40 <line:21:15> 'const char *' <LValueToRValue>
    | | `-DeclRefExpr 0x128008a48 <col:15> 'const char *' lvalue ParmVar 0x11f80dda8 'sens' 'const char *'
    | |-ImplicitCastExpr 0x128008b58 <col:21> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x128008a68 <col:21> 'int' lvalue ParmVar 0x11f80de28 'catMin' 'int'
    | |-ImplicitCastExpr 0x128008b70 <col:29> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x128008a88 <col:29> 'int' lvalue ParmVar 0x11f80dea8 'catMax' 'int'
    | `-ImplicitCastExpr 0x128008b88 <col:37> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x128008aa8 <col:37> 'int' lvalue Var 0x11f80e350 'catRange' 'int'
    |-ForStmt 0x11f827480 <line:23:5, line:44:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | `-CompoundStmt 0x11f827440 <line:23:14, line:44:5>
    |   |-DeclStmt 0x128008d98 <line:24:9, col:40>
    |   | `-VarDecl 0x128008bb8 <col:9, col:39> col:13 used c1 'int' cinit
    |   |   `-CallExpr 0x128008d58 <col:18, col:39> 'int'
    |   |     |-ImplicitCastExpr 0x128008d40 <col:18> 'int (*)()' <FunctionToPointerDecay>
    |   |     | `-DeclRefExpr 0x128008d00 <col:18> 'int ()' Function 0x128008c48 'virRandomInt' 'int ()'
    |   |     `-ImplicitCastExpr 0x128008d80 <col:31> 'int' <LValueToRValue>
    |   |       `-DeclRefExpr 0x128008d20 <col:31> 'int' lvalue Var 0x11f80e350 'catRange' 'int'
    |   |-DeclStmt 0x128008ec8 <line:25:9, col:40>
    |   | `-VarDecl 0x128008dc8 <col:9, col:39> col:13 used c2 'int' cinit
    |   |   `-CallExpr 0x128008e88 <col:18, col:39> 'int'
    |   |     |-ImplicitCastExpr 0x128008e70 <col:18> 'int (*)()' <FunctionToPointerDecay>
    |   |     | `-DeclRefExpr 0x128008e30 <col:18> 'int ()' Function 0x128008c48 'virRandomInt' 'int ()'
    |   |     `-ImplicitCastExpr 0x128008eb0 <col:31> 'int' <LValueToRValue>
    |   |       `-DeclRefExpr 0x128008e50 <col:31> 'int' lvalue Var 0x11f80e350 'catRange' 'int'
    |   |-CallExpr 0x128009078 <line:27:9, col:56> 'int'
    |   | |-ImplicitCastExpr 0x128009060 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x128008ee0 <col:9> 'int ()' Function 0x128008950 'VIR_DEBUG' 'int ()'
    |   | |-ImplicitCastExpr 0x1280090b8 <col:19> 'char *' <ArrayToPointerDecay>
    |   | | `-StringLiteral 0x128008f00 <col:19> 'char[4]' lvalue "STR"
    |   | |-ImplicitCastExpr 0x1280090d0 <col:26> 'const char *' <LValueToRValue>
    |   | | `-DeclRefExpr 0x128008f20 <col:26> 'const char *' lvalue ParmVar 0x11f80dda8 'sens' 'const char *'
    |   | |-BinaryOperator 0x128008fb0 <col:32, col:37> 'int' '+'
    |   | | |-ImplicitCastExpr 0x128008f80 <col:32> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x128008f40 <col:32> 'int' lvalue Var 0x128008bb8 'c1' 'int'
    |   | | `-ImplicitCastExpr 0x128008f98 <col:37> 'int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x128008f60 <col:37> 'int' lvalue ParmVar 0x11f80de28 'catMin' 'int'
    |   | `-BinaryOperator 0x128009040 <col:45, col:50> 'int' '+'
    |   |   |-ImplicitCastExpr 0x128009010 <col:45> 'int' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x128008fd0 <col:45> 'int' lvalue Var 0x128008dc8 'c2' 'int'
    |   |   `-ImplicitCastExpr 0x128009028 <col:50> 'int' <LValueToRValue>
    |   |     `-DeclRefExpr 0x128008ff0 <col:50> 'int' lvalue ParmVar 0x11f80de28 'catMin' 'int'
    |   |-IfStmt 0x11f1237b0 <line:29:9, line:38:9> has_else
    |   | |-BinaryOperator 0x128009158 <line:29:13, col:19> 'int' '=='
    |   | | |-ImplicitCastExpr 0x128009128 <col:13> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x1280090e8 <col:13> 'int' lvalue Var 0x128008bb8 'c1' 'int'
    |   | | `-ImplicitCastExpr 0x128009140 <col:19> 'int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x128009108 <col:19> 'int' lvalue Var 0x128008dc8 'c2' 'int'
    |   | |-CompoundStmt 0x11f123280 <col:23, line:31:9>
    |   | | `-BinaryOperator 0x11f123260 <line:30:13, col:59> 'char *' contains-errors '='
    |   | |   |-DeclRefExpr 0x128009178 <col:13> 'char *' contains-errors lvalue Var 0x128008200 'mcs' 'char *'
    |   | |   `-ImplicitCastExpr 0x11f122e28 <col:19, col:59> 'char *' <IntegralToPointer>
    |   | |     `-CallExpr 0x11f122dc0 <col:19, col:59> 'int'
    |   | |       |-ImplicitCastExpr 0x11f122da8 <col:19> 'int (*)()' <FunctionToPointerDecay>
    |   | |       | `-DeclRefExpr 0x11f122cb8 <col:19> 'int ()' Function 0x11f122c00 'g_strdup_printf' 'int ()'
    |   | |       |-ImplicitCastExpr 0x11f122df8 <col:35> 'char *' <ArrayToPointerDecay>
    |   | |       | `-StringLiteral 0x11f122cd8 <col:35> 'char[4]' lvalue "STR"
    |   | |       |-ImplicitCastExpr 0x11f122e10 <col:42> 'const char *' <LValueToRValue>
    |   | |       | `-DeclRefExpr 0x11f122cf8 <col:42> 'const char *' lvalue ParmVar 0x11f80dda8 'sens' 'const char *'
    |   | |       `-BinaryOperator 0x11f122d88 <col:48, col:57> 'int' '+'
    |   | |         |-ImplicitCastExpr 0x11f122d58 <col:48> 'int' <LValueToRValue>
    |   | |         | `-DeclRefExpr 0x11f122d18 <col:48> 'int' lvalue ParmVar 0x11f80de28 'catMin' 'int'
    |   | |         `-ImplicitCastExpr 0x11f122d70 <col:57> 'int' <LValueToRValue>
    |   | |           `-DeclRefExpr 0x11f122d38 <col:57> 'int' lvalue Var 0x128008bb8 'c1' 'int'
    |   | `-CompoundStmt 0x11f123790 <line:31:16, line:38:9>
    |   |   |-IfStmt 0x11f123510 <line:32:13, line:36:13>
    |   |   | |-BinaryOperator 0x11f123308 <line:32:17, col:22> 'int' '>'
    |   |   | | |-ImplicitCastExpr 0x11f1232d8 <col:17> 'int' <LValueToRValue>
    |   |   | | | `-DeclRefExpr 0x11f123298 <col:17> 'int' lvalue Var 0x128008bb8 'c1' 'int'
    |   |   | | `-ImplicitCastExpr 0x11f1232f0 <col:22> 'int' <LValueToRValue>
    |   |   | |   `-DeclRefExpr 0x11f1232b8 <col:22> 'int' lvalue Var 0x128008dc8 'c2' 'int'
    |   |   | `-CompoundStmt 0x11f1234e8 <col:26, line:36:13>
    |   |   |   |-DeclStmt 0x11f1233e0 <line:33:17, col:27>
    |   |   |   | `-VarDecl 0x11f123340 <col:17, col:25> col:21 used t 'int' cinit
    |   |   |   |   `-ImplicitCastExpr 0x11f1233c8 <col:25> 'int' <LValueToRValue>
    |   |   |   |     `-DeclRefExpr 0x11f1233a8 <col:25> 'int' lvalue Var 0x128008bb8 'c1' 'int'
    |   |   |   |-BinaryOperator 0x11f123450 <line:34:17, col:22> 'int' '='
    |   |   |   | |-DeclRefExpr 0x11f1233f8 <col:17> 'int' lvalue Var 0x128008bb8 'c1' 'int'
    |   |   |   | `-ImplicitCastExpr 0x11f123438 <col:22> 'int' <LValueToRValue>
    |   |   |   |   `-DeclRefExpr 0x11f123418 <col:22> 'int' lvalue Var 0x128008dc8 'c2' 'int'
    |   |   |   `-BinaryOperator 0x11f1234c8 <line:35:17, col:22> 'int' '='
    |   |   |     |-DeclRefExpr 0x11f123470 <col:17> 'int' lvalue Var 0x128008dc8 'c2' 'int'
    |   |   |     `-ImplicitCastExpr 0x11f1234b0 <col:22> 'int' <LValueToRValue>
    |   |   |       `-DeclRefExpr 0x11f123490 <col:22> 'int' lvalue Var 0x11f123340 't' 'int'
    |   |   `-BinaryOperator 0x11f123770 <line:37:13, col:72> 'char *' contains-errors '='
    |   |     |-DeclRefExpr 0x11f123530 <col:13> 'char *' contains-errors lvalue Var 0x128008200 'mcs' 'char *'
    |   |     `-ImplicitCastExpr 0x11f123758 <col:19, col:72> 'char *' <IntegralToPointer>
    |   |       `-CallExpr 0x11f1236e8 <col:19, col:72> 'int'
    |   |         |-ImplicitCastExpr 0x11f1236d0 <col:19> 'int (*)()' <FunctionToPointerDecay>
    |   |         | `-DeclRefExpr 0x11f123550 <col:19> 'int ()' Function 0x11f122c00 'g_strdup_printf' 'int ()'
    |   |         |-ImplicitCastExpr 0x11f123728 <col:35> 'char *' <ArrayToPointerDecay>
    |   |         | `-StringLiteral 0x11f123570 <col:35> 'char[4]' lvalue "STR"
    |   |         |-ImplicitCastExpr 0x11f123740 <col:42> 'const char *' <LValueToRValue>
    |   |         | `-DeclRefExpr 0x11f123590 <col:42> 'const char *' lvalue ParmVar 0x11f80dda8 'sens' 'const char *'
    |   |         |-BinaryOperator 0x11f123620 <col:48, col:57> 'int' '+'
    |   |         | |-ImplicitCastExpr 0x11f1235f0 <col:48> 'int' <LValueToRValue>
    |   |         | | `-DeclRefExpr 0x11f1235b0 <col:48> 'int' lvalue ParmVar 0x11f80de28 'catMin' 'int'
    |   |         | `-ImplicitCastExpr 0x11f123608 <col:57> 'int' <LValueToRValue>
    |   |         |   `-DeclRefExpr 0x11f1235d0 <col:57> 'int' lvalue Var 0x128008bb8 'c1' 'int'
    |   |         `-BinaryOperator 0x11f1236b0 <col:61, col:70> 'int' '+'
    |   |           |-ImplicitCastExpr 0x11f123680 <col:61> 'int' <LValueToRValue>
    |   |           | `-DeclRefExpr 0x11f123640 <col:61> 'int' lvalue ParmVar 0x11f80de28 'catMin' 'int'
    |   |           `-ImplicitCastExpr 0x11f123698 <col:70> 'int' <LValueToRValue>
    |   |             `-DeclRefExpr 0x11f123660 <col:70> 'int' lvalue Var 0x128008dc8 'c2' 'int'
    |   |-IfStmt 0x11f123aa8 <line:40:9, line:41:13>
    |   | |-BinaryOperator 0x11f123a80 <line:40:13, col:46> 'int' contains-errors '=='
    |   | | |-CallExpr 0x11f123a30 <col:13, col:41> '<dependent type>' contains-errors
    |   | | | |-DeclRefExpr 0x11f1238c0 <col:13> 'int ()' Function 0x11f123808 'virHashLookup' 'int ()'
    |   | | | |-CXXDependentScopeMemberExpr 0x11f1239e8 <col:27, col:33> '<dependent type>' contains-errors lvalue ->mcs
    |   | | | | `-RecoveryExpr 0x11f1239c8 <col:27> '<dependent type>' contains-errors lvalue
    |   | | | `-DeclRefExpr 0x11f123940 <col:38> 'char *' contains-errors lvalue Var 0x128008200 'mcs' 'char *'
    |   | | `-RecoveryExpr 0x11f123a60 <col:46> '<dependent type>' contains-errors lvalue
    |   | `-BreakStmt 0x11f123aa0 <line:41:13>
    |   `-CallExpr 0x11f827400 <line:43:9, col:21> 'int' contains-errors
    |     |-ImplicitCastExpr 0x11f123be8 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x11f123ba8 <col:9> 'int ()' Function 0x11f123af0 'VIR_FREE' 'int ()'
    |     `-ImplicitCastExpr 0x11f827428 <col:18> 'char *' contains-errors <LValueToRValue>
    |       `-DeclRefExpr 0x11f123bc8 <col:18> 'char *' contains-errors lvalue Var 0x128008200 'mcs' 'char *'
    `-ReturnStmt 0x11f827508 <line:46:5, col:12>
      `-ImplicitCastExpr 0x11f8274f0 <col:12> 'int' contains-errors <PointerToIntegral>
        `-ImplicitCastExpr 0x11f8274d8 <col:12> 'char *' contains-errors <LValueToRValue>
          `-DeclRefExpr 0x11f8274b8 <col:12> 'char *' contains-errors lvalue Var 0x128008200 'mcs' 'char *'
