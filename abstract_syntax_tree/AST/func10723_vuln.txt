TranslationUnitDecl 0x120055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1200564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x120055bd0 '__int128'
|-TypedefDecl 0x120056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x120055bf0 'unsigned __int128'
|-TypedefDecl 0x120126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x120126000 'struct __NSConstantString_tag'
|   `-Record 0x120056580 '__NSConstantString_tag'
|-TypedefDecl 0x120126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x120055d90 '__SVInt8_t'
|-TypedefDecl 0x120126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x120055db0 '__SVInt16_t'
|-TypedefDecl 0x120126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x120055dd0 '__SVInt32_t'
|-TypedefDecl 0x1201263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x120055df0 '__SVInt64_t'
|-TypedefDecl 0x120126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x120055e10 '__SVUint8_t'
|-TypedefDecl 0x1201264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x120055e30 '__SVUint16_t'
|-TypedefDecl 0x120126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x120055e50 '__SVUint32_t'
|-TypedefDecl 0x120126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x120055e70 '__SVUint64_t'
|-TypedefDecl 0x1201265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x120055e90 '__SVFloat16_t'
|-TypedefDecl 0x120126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x120055eb0 '__SVFloat32_t'
|-TypedefDecl 0x1201266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x120055ed0 '__SVFloat64_t'
|-TypedefDecl 0x120126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x120055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x120126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x120055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1201267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x120055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x120126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x120055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1201268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x120055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x120126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x120055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x120126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x120055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1201269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x120055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x120126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x120055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x120126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x120056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x120126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x120056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x120126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x120056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x120126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x120056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x120126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x120056090 '__clang_svint8x3_t'
|-TypedefDecl 0x120126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1200560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x120126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1200560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x120126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1200560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x120126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x120056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x120126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x120056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x120126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x120056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x120126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x120056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x120126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x120056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x120127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1200561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x120127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1200561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1201278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1200561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x120127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x120056210 '__clang_svint8x4_t'
|-TypedefDecl 0x1201279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x120056230 '__clang_svint16x4_t'
|-TypedefDecl 0x120127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x120056250 '__clang_svint32x4_t'
|-TypedefDecl 0x120127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x120056270 '__clang_svint64x4_t'
|-TypedefDecl 0x120127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x120056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x120127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1200562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x120127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1200562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x120127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1200562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x120127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x120056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x120127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x120056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x120127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x120056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x120127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x120056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x120127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x120056390 '__SVBool_t'
|-TypedefDecl 0x120127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1200563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x120127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1200563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x120127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1200563f0 '__SVCount_t'
|-TypedefDecl 0x120127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x120127fb0 'char *'
|   `-BuiltinType 0x1200556b0 'char'
|-TypedefDecl 0x120128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x120127fb0 'char *'
|   `-BuiltinType 0x1200556b0 'char'
|-FunctionDecl 0x120128318 <dataset_diviso_filec/func10723_vuln.c:1:1, line:79:1> line:1:7 invalid decode_base64 'int *(char *, int, int *)'
| |-ParmVarDecl 0x1201280f0 <col:21, col:27> col:27 used src 'char *'
| |-ParmVarDecl 0x120128170 <col:31, col:38> col:38 invalid ssize 'int'
| |-ParmVarDecl 0x120128228 <col:45, col:53> col:53 invalid ret_len 'int *'
| `-CompoundStmt 0x120145640 <line:2:1, line:79:1>
|   |-DeclStmt 0x120128488 <line:5:3, col:12>
|   | `-VarDecl 0x120128420 <col:3, col:9> col:9 used inb 'char *'
|   |-DeclStmt 0x120128520 <line:6:3, col:8>
|   | `-VarDecl 0x1201284b8 <col:3, col:7> col:7 used i 'int'
|   |-DeclStmt 0x1201285b8 <line:7:3, col:8>
|   | `-VarDecl 0x120128550 <col:3, col:7> col:7 used l 'int'
|   |-DeclStmt 0x120128650 <line:8:3, col:11>
|   | `-VarDecl 0x1201285e8 <col:3, col:7> col:7 used left 'int'
|   |-DeclStmt 0x1201286e8 <line:9:3, col:10>
|   | `-VarDecl 0x120128680 <col:3, col:7> col:7 used pos 'int'
|   |-DeclStmt 0x120128780 <line:10:3, col:23>
|   | `-VarDecl 0x120128718 <col:3, col:17> col:17 used triple 'unsigned long'
|   |-IfStmt 0x120141c18 <line:13:3, line:16:3>
|   | |-BinaryOperator 0x120141918 <line:13:7, col:20> 'int' contains-errors '||'
|   | | |-UnaryOperator 0x1201418c0 <col:7, col:8> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | | | `-ImplicitCastExpr 0x1201418a8 <col:8> '<dependent type>' contains-errors <LValueToRValue>
|   | | |   `-RecoveryExpr 0x120128798 <col:8> '<dependent type>' contains-errors lvalue
|   | | `-BinaryOperator 0x1201418f8 <col:15, col:20> 'int' contains-errors '=='
|   | |   |-DeclRefExpr 0x120141800 <col:15> 'char *' lvalue ParmVar 0x1201280f0 'src' 'char *'
|   | |   `-RecoveryExpr 0x1201418d8 <col:20> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x120141bf8 <col:26, line:16:3>
|   |   |-CallExpr 0x120141b80 <line:14:5, col:35> '<dependent type>' contains-errors
|   |   | |-DeclRefExpr 0x120141a90 <col:5> 'int ()' Function 0x1201419d8 'log_msg' 'int ()'
|   |   | |-RecoveryExpr 0x120141b60 <col:13> '<dependent type>' contains-errors lvalue
|   |   | `-StringLiteral 0x120141b10 <col:30> 'char[4]' lvalue "STR"
|   |   `-ReturnStmt 0x120141be8 <line:15:5, col:12>
|   |     `-RecoveryExpr 0x120141bc8 <col:12> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x120141c90 <line:20:3, col:9> 'char *' '='
|   | |-DeclRefExpr 0x120141c38 <col:3> 'char *' lvalue Var 0x120128420 'inb' 'char *'
|   | `-ImplicitCastExpr 0x120141c78 <col:9> 'char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x120141c58 <col:9> 'char *' lvalue ParmVar 0x1201280f0 'src' 'char *'
|   |-BinaryOperator 0x120141d08 <line:23:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x120141cc8 <col:3> 'int' lvalue Var 0x120128550 'l' 'int'
|   | `-IntegerLiteral 0x120141ce8 <col:7> 'int' 0
|   |-BinaryOperator 0x120141d80 <line:24:3, col:12> 'unsigned long' '='
|   | |-DeclRefExpr 0x120141d28 <col:3> 'unsigned long' lvalue Var 0x120128718 'triple' 'unsigned long'
|   | `-ImplicitCastExpr 0x120141d68 <col:12> 'unsigned long' <IntegralCast>
|   |   `-IntegerLiteral 0x120141d48 <col:12> 'int' 0
|   |-BinaryOperator 0x120141de0 <line:25:3, col:7> 'int' '='
|   | |-DeclRefExpr 0x120141da0 <col:3> 'int' lvalue Var 0x120128680 'pos' 'int'
|   | `-IntegerLiteral 0x120141dc0 <col:7> 'int' 0
|   |-BinaryOperator 0x120141e40 <line:26:3, col:10> 'int' contains-errors '='
|   | |-DeclRefExpr 0x120141e00 <col:3> 'int' lvalue Var 0x1201285e8 'left' 'int'
|   | `-RecoveryExpr 0x120141e20 <col:10> '<dependent type>' contains-errors lvalue
|   |-WhileStmt 0x1201451e8 <line:28:3, line:68:5>
|   | |-BinaryOperator 0x120141eb8 <line:28:10, col:18> 'int' '!='
|   | | |-ImplicitCastExpr 0x120141ea0 <col:10> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x120141e60 <col:10> 'int' lvalue Var 0x1201285e8 'left' 'int'
|   | | `-IntegerLiteral 0x120141e80 <col:18> 'int' 0
|   | `-CompoundStmt 0x1201451b8 <line:29:5, line:68:5>
|   |   |-UnaryOperator 0x120141ef8 <line:30:7, col:11> 'int' postfix '--'
|   |   | `-DeclRefExpr 0x120141ed8 <col:7> 'int' lvalue Var 0x1201285e8 'left' 'int'
|   |   |-SwitchStmt 0x120142028 <line:32:7, line:45:2>
|   |   | |-ImplicitCastExpr 0x120142010 <line:32:14> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x120141ff0 <col:14> 'int' lvalue Var 0x1201284b8 'i' 'int'
|   |   | `-CompoundStmt 0x1201448b0 <line:33:2, line:45:2>
|   |   |   |-CallExpr 0x1201421c0 <line:35:4, col:47> '<dependent type>' contains-errors
|   |   |   | |-DeclRefExpr 0x120142068 <col:4> 'int ()' Function 0x1201419d8 'log_msg' 'int ()'
|   |   |   | |-RecoveryExpr 0x120142170 <col:12> '<dependent type>' contains-errors lvalue
|   |   |   | |-StringLiteral 0x1201420a0 <col:31> 'char[4]' lvalue "STR"
|   |   |   | |-UnaryOperator 0x1201421a8 <col:38, col:39> 'char' lvalue prefix '*' cannot overflow
|   |   |   | | `-ImplicitCastExpr 0x120142190 <col:39> 'char *' <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x1201420c0 <col:39> 'char *' lvalue Var 0x120128420 'inb' 'char *'
|   |   |   | `-DeclRefExpr 0x120142110 <col:44> 'char *' lvalue ParmVar 0x1201280f0 'src' 'char *'
|   |   |   |-CallExpr 0x120144690 <line:36:4, col:15> '<dependent type>' contains-errors
|   |   |   | |-DeclRefExpr 0x1201427d0 <col:4> 'void (void *)' Function 0x120142660 'free' 'void (void *)'
|   |   |   | `-RecoveryExpr 0x120144658 <col:9> '<dependent type>' contains-errors lvalue
|   |   |   |-BreakStmt 0x1201446b8 <line:38:4>
|   |   |   |-BreakStmt 0x1201446c0 <line:40:4>
|   |   |   |-DefaultStmt 0x120144850 <line:41:2, line:42:34>
|   |   |   | `-BinaryOperator 0x120144830 <col:4, col:34> 'unsigned long' '='
|   |   |   |   |-DeclRefExpr 0x1201446c8 <col:4> 'unsigned long' lvalue Var 0x120128718 'triple' 'unsigned long'
|   |   |   |   `-BinaryOperator 0x120144810 <col:13, col:34> 'unsigned long' '|'
|   |   |   |     |-BinaryOperator 0x120144740 <col:13, col:21> 'unsigned long' '<<'
|   |   |   |     | |-ImplicitCastExpr 0x120144728 <col:13> 'unsigned long' <LValueToRValue>
|   |   |   |     | | `-DeclRefExpr 0x1201446e8 <col:13> 'unsigned long' lvalue Var 0x120128718 'triple' 'unsigned long'
|   |   |   |     | `-IntegerLiteral 0x120144708 <col:21> 'int' 6
|   |   |   |     `-ImplicitCastExpr 0x1201447f8 <col:25, col:34> 'unsigned long' <IntegralCast>
|   |   |   |       `-ParenExpr 0x1201447d8 <col:25, col:34> 'int'
|   |   |   |         `-BinaryOperator 0x1201447b8 <col:26, col:33> 'int' '&'
|   |   |   |           |-IntegerLiteral 0x120144760 <col:26> 'int' 63
|   |   |   |           `-ImplicitCastExpr 0x1201447a0 <col:33> 'int' <LValueToRValue>
|   |   |   |             `-DeclRefExpr 0x120144780 <col:33> 'int' lvalue Var 0x1201284b8 'i' 'int'
|   |   |   |-UnaryOperator 0x120144890 <line:43:4, col:5> 'int' postfix '++'
|   |   |   | `-DeclRefExpr 0x120144870 <col:4> 'int' lvalue Var 0x120128550 'l' 'int'
|   |   |   `-BreakStmt 0x1201448a8 <line:44:4>
|   |   |-IfStmt 0x120145160 <line:46:7, line:66:2>
|   |   | |-BinaryOperator 0x1201449e8 <line:46:11, col:29> 'int' '||'
|   |   | | |-BinaryOperator 0x120144950 <col:11, col:16> 'int' '=='
|   |   | | | |-ImplicitCastExpr 0x120144938 <col:11> 'int' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x1201448f8 <col:11> 'int' lvalue Var 0x120128550 'l' 'int'
|   |   | | | `-IntegerLiteral 0x120144918 <col:16> 'int' 4
|   |   | | `-BinaryOperator 0x1201449c8 <col:21, col:29> 'int' '=='
|   |   | |   |-ImplicitCastExpr 0x1201449b0 <col:21> 'int' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x120144970 <col:21> 'int' lvalue Var 0x1201285e8 'left' 'int'
|   |   | |   `-IntegerLiteral 0x120144990 <col:29> 'int' 0
|   |   | `-CompoundStmt 0x120145130 <line:47:2, line:66:2>
|   |   |   |-SwitchStmt 0x120144a40 <line:48:4, line:58:6>
|   |   |   | |-ImplicitCastExpr 0x120144a28 <line:48:11> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x120144a08 <col:11> 'int' lvalue Var 0x120128550 'l' 'int'
|   |   |   | `-CompoundStmt 0x120144cd0 <line:49:6, line:58:6>
|   |   |   |   |-CaseStmt 0x120144aa0 <line:50:6, line:51:25>
|   |   |   |   | |-ConstantExpr 0x120144a88 <line:50:11> 'int'
|   |   |   |   | | `-IntegerLiteral 0x120144a68 <col:11> 'int' 2
|   |   |   |   | `-BinaryOperator 0x120144b60 <line:51:8, col:25> 'unsigned long' '='
|   |   |   |   |   |-DeclRefExpr 0x120144ac8 <col:8> 'unsigned long' lvalue Var 0x120128718 'triple' 'unsigned long'
|   |   |   |   |   `-BinaryOperator 0x120144b40 <col:17, col:25> 'unsigned long' '>>'
|   |   |   |   |     |-ImplicitCastExpr 0x120144b28 <col:17> 'unsigned long' <LValueToRValue>
|   |   |   |   |     | `-DeclRefExpr 0x120144ae8 <col:17> 'unsigned long' lvalue Var 0x120128718 'triple' 'unsigned long'
|   |   |   |   |     `-IntegerLiteral 0x120144b08 <col:25> 'int' 4
|   |   |   |   |-BreakStmt 0x120144b80 <line:52:8>
|   |   |   |   |-CaseStmt 0x120144bc0 <line:53:6, line:54:25>
|   |   |   |   | |-ConstantExpr 0x120144ba8 <line:53:11> 'int'
|   |   |   |   | | `-IntegerLiteral 0x120144b88 <col:11> 'int' 3
|   |   |   |   | `-BinaryOperator 0x120144c80 <line:54:8, col:25> 'unsigned long' '='
|   |   |   |   |   |-DeclRefExpr 0x120144be8 <col:8> 'unsigned long' lvalue Var 0x120128718 'triple' 'unsigned long'
|   |   |   |   |   `-BinaryOperator 0x120144c60 <col:17, col:25> 'unsigned long' '>>'
|   |   |   |   |     |-ImplicitCastExpr 0x120144c48 <col:17> 'unsigned long' <LValueToRValue>
|   |   |   |   |     | `-DeclRefExpr 0x120144c08 <col:17> 'unsigned long' lvalue Var 0x120128718 'triple' 'unsigned long'
|   |   |   |   |     `-IntegerLiteral 0x120144c28 <col:25> 'int' 2
|   |   |   |   |-BreakStmt 0x120144ca0 <line:55:8>
|   |   |   |   `-DefaultStmt 0x120144cb0 <line:56:6, line:57:8>
|   |   |   |     `-BreakStmt 0x120144ca8 <col:8>
|   |   |   |-ForStmt 0x120145020 <line:59:4, line:63:6>
|   |   |   | |-CompoundAssignOperator 0x120144d48 <line:59:9, col:15> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |   | | |-DeclRefExpr 0x120144d08 <col:9> 'int' lvalue Var 0x120128550 'l' 'int'
|   |   |   | | `-IntegerLiteral 0x120144d28 <col:15> 'int' 2
|   |   |   | |-<<<NULL>>>
|   |   |   | |-BinaryOperator 0x120144dd0 <col:18, col:23> 'int' '>='
|   |   |   | | |-ImplicitCastExpr 0x120144db8 <col:18> 'int' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x120144d78 <col:18> 'int' lvalue Var 0x120128550 'l' 'int'
|   |   |   | | `-IntegerLiteral 0x120144d98 <col:23> 'int' 0
|   |   |   | |-UnaryOperator 0x120144e10 <col:26, col:27> 'int' postfix '--'
|   |   |   | | `-DeclRefExpr 0x120144df0 <col:26> 'int' lvalue Var 0x120128550 'l' 'int'
|   |   |   | `-CompoundStmt 0x120145008 <line:60:6, line:63:6>
|   |   |   |   `-UnaryOperator 0x120144ff0 <line:62:8, col:11> 'int' postfix '++'
|   |   |   |     `-DeclRefExpr 0x120144fd0 <col:8> 'int' lvalue Var 0x120128680 'pos' 'int'
|   |   |   |-BinaryOperator 0x1201450b0 <line:64:4, col:13> 'unsigned long' '='
|   |   |   | |-DeclRefExpr 0x120145058 <col:4> 'unsigned long' lvalue Var 0x120128718 'triple' 'unsigned long'
|   |   |   | `-ImplicitCastExpr 0x120145098 <col:13> 'unsigned long' <IntegralCast>
|   |   |   |   `-IntegerLiteral 0x120145078 <col:13> 'int' 0
|   |   |   `-BinaryOperator 0x120145110 <line:65:4, col:8> 'int' '='
|   |   |     |-DeclRefExpr 0x1201450d0 <col:4> 'int' lvalue Var 0x120128550 'l' 'int'
|   |   |     `-IntegerLiteral 0x1201450f0 <col:8> 'int' 0
|   |   `-UnaryOperator 0x1201451a0 <line:67:7, col:10> 'char *' postfix '++'
|   |     `-DeclRefExpr 0x120145180 <col:7> 'char *' lvalue Var 0x120128420 'inb' 'char *'
|   `-IfStmt 0x120145620 <line:76:3, col:27>
|     |-RecoveryExpr 0x120145570 <col:7> '<dependent type>' contains-errors lvalue
|     `-BinaryOperator 0x120145600 <col:16, col:27> '<dependent type>' contains-errors '='
|       |-UnaryOperator 0x1201455c8 <col:16, col:17> '<dependent type>' contains-errors prefix '*' cannot overflow
|       | `-ImplicitCastExpr 0x1201455b0 <col:17> '<dependent type>' contains-errors <LValueToRValue>
|       |   `-RecoveryExpr 0x120145590 <col:17> '<dependent type>' contains-errors lvalue
|       `-DeclRefExpr 0x1201455e0 <col:27> 'int' lvalue Var 0x120128680 'pos' 'int'
|-FunctionDecl 0x120142660 <line:36:4> col:4 implicit used free 'void (void *)' extern
| |-ParmVarDecl 0x120142760 <<invalid sloc>> <invalid sloc> 'void *'
| `-BuiltinAttr 0x120142708 <<invalid sloc>> Implicit 873
`-FunctionDecl 0x120145288 <line:71:3> col:3 implicit used memcpy 'void *(void *, const void *, unsigned long)' extern
  |-ParmVarDecl 0x120145388 <<invalid sloc>> <invalid sloc> 'void *'
  |-ParmVarDecl 0x1201453f0 <<invalid sloc>> <invalid sloc> 'const void *'
  |-ParmVarDecl 0x120145458 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x120145330 <<invalid sloc>> Implicit 882
