TranslationUnitDecl 0x129055008 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x129055eb8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1290555d0 '__int128'
|-TypedefDecl 0x129055f28 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1290555f0 'unsigned __int128'
|-TypedefDecl 0x12800c430 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12800c200 'struct __NSConstantString_tag'
|   `-Record 0x129055f80 '__NSConstantString_tag'
|-TypedefDecl 0x12800c498 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x129055790 '__SVInt8_t'
|-TypedefDecl 0x12800c500 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x1290557b0 '__SVInt16_t'
|-TypedefDecl 0x12800c568 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x1290557d0 '__SVInt32_t'
|-TypedefDecl 0x12800c5d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x1290557f0 '__SVInt64_t'
|-TypedefDecl 0x12800c638 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x129055810 '__SVUint8_t'
|-TypedefDecl 0x12800c6a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x129055830 '__SVUint16_t'
|-TypedefDecl 0x12800c708 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x129055850 '__SVUint32_t'
|-TypedefDecl 0x12800c770 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x129055870 '__SVUint64_t'
|-TypedefDecl 0x12800c7d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x129055890 '__SVFloat16_t'
|-TypedefDecl 0x12800c840 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x1290558b0 '__SVFloat32_t'
|-TypedefDecl 0x12800c8a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x1290558d0 '__SVFloat64_t'
|-TypedefDecl 0x12800c910 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x1290558f0 '__SVBfloat16_t'
|-TypedefDecl 0x12800c978 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x129055910 '__clang_svint8x2_t'
|-TypedefDecl 0x12800c9e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x129055930 '__clang_svint16x2_t'
|-TypedefDecl 0x12800ca48 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x129055950 '__clang_svint32x2_t'
|-TypedefDecl 0x12800cab0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x129055970 '__clang_svint64x2_t'
|-TypedefDecl 0x12800cb18 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x129055990 '__clang_svuint8x2_t'
|-TypedefDecl 0x12800cb80 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x1290559b0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12800cbe8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x1290559d0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12800cc50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x1290559f0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12800ccb8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x129055a10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12800cd20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x129055a30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12800cd88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x129055a50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12800cdf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x129055a70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12800ce58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x129055a90 '__clang_svint8x3_t'
|-TypedefDecl 0x12800cec0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x129055ab0 '__clang_svint16x3_t'
|-TypedefDecl 0x12800cf28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x129055ad0 '__clang_svint32x3_t'
|-TypedefDecl 0x12800cf90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x129055af0 '__clang_svint64x3_t'
|-TypedefDecl 0x12800cff8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x129055b10 '__clang_svuint8x3_t'
|-TypedefDecl 0x12800d060 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x129055b30 '__clang_svuint16x3_t'
|-TypedefDecl 0x12800d0c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x129055b50 '__clang_svuint32x3_t'
|-TypedefDecl 0x12800d130 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x129055b70 '__clang_svuint64x3_t'
|-TypedefDecl 0x12800d198 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x129055b90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12800da00 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x129055bb0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12800da68 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x129055bd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12800dad0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x129055bf0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12800db38 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x129055c10 '__clang_svint8x4_t'
|-TypedefDecl 0x12800dba0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x129055c30 '__clang_svint16x4_t'
|-TypedefDecl 0x12800dc08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x129055c50 '__clang_svint32x4_t'
|-TypedefDecl 0x12800dc70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x129055c70 '__clang_svint64x4_t'
|-TypedefDecl 0x12800dcd8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x129055c90 '__clang_svuint8x4_t'
|-TypedefDecl 0x12800dd40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x129055cb0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12800dda8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x129055cd0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12800de10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x129055cf0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12800de78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x129055d10 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12800dee0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x129055d30 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12800df48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x129055d50 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12800dfb0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x129055d70 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12800e018 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x129055d90 '__SVBool_t'
|-TypedefDecl 0x12800e080 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x129055db0 '__clang_svboolx2_t'
|-TypedefDecl 0x12800e0e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x129055dd0 '__clang_svboolx4_t'
|-TypedefDecl 0x12800e150 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x129055df0 '__SVCount_t'
|-TypedefDecl 0x12800e1f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12800e1b0 'char *'
|   `-BuiltinType 0x1290550b0 'char'
|-TypedefDecl 0x12800e268 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12800e1b0 'char *'
|   `-BuiltinType 0x1290550b0 'char'
`-FunctionDecl 0x12800e958 <dataset_diviso_filec/func1129_vuln.c:1:1, line:22:1> line:1:12 prealloc_elems_and_freelist 'int (struct bpf_stack_map *)' static
  |-ParmVarDecl 0x12800e848 <col:40, col:62> col:62 used smap 'struct bpf_stack_map *'
  `-CompoundStmt 0x128027a48 <line:2:1, line:22:1>
    |-DeclStmt 0x128026ce8 <line:4:2, col:9>
    | `-VarDecl 0x128026c80 <col:2, col:6> col:6 used err 'int'
    |-BinaryOperator 0x1280270d8 <line:6:2, line:7:26> '<dependent type>' contains-errors '='
    | |-RecoveryExpr 0x128026d38 <line:6:2, col:8> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x128026d00 <col:2> 'struct bpf_stack_map *' lvalue ParmVar 0x12800e848 'smap' 'struct bpf_stack_map *'
    | `-CallExpr 0x1280270a8 <col:16, line:7:26> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x128026e70 <line:6:16> 'int ()' Function 0x128026db8 'bpf_map_area_alloc' 'int ()'
    |   |-BinaryOperator 0x128027088 <col:35, col:57> '<dependent type>' contains-errors '*'
    |   | |-RecoveryExpr 0x128027068 <col:35> '<dependent type>' contains-errors lvalue
    |   | `-CXXDependentScopeMemberExpr 0x128026f08 <col:47, col:57> '<dependent type>' contains-errors lvalue .max_entries
    |   |   `-RecoveryExpr 0x128026ee0 <col:47, col:53> '<dependent type>' contains-errors lvalue
    |   |     `-DeclRefExpr 0x128026ea8 <col:47> 'struct bpf_stack_map *' lvalue ParmVar 0x12800e848 'smap' 'struct bpf_stack_map *'
    |   `-CXXDependentScopeMemberExpr 0x128026fd0 <line:7:7, col:17> '<dependent type>' contains-errors lvalue .numa_node
    |     `-RecoveryExpr 0x128026fa8 <col:7, col:13> '<dependent type>' contains-errors lvalue
    |       `-DeclRefExpr 0x128026f70 <col:7> 'struct bpf_stack_map *' lvalue ParmVar 0x12800e848 'smap' 'struct bpf_stack_map *'
    |-IfStmt 0x128027230 <line:8:2, line:9:11>
    | |-UnaryOperator 0x128027170 <line:8:6, col:13> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x128027158 <col:7, col:13> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x128027130 <col:7, col:13> '<dependent type>' contains-errors lvalue
    | |     `-DeclRefExpr 0x1280270f8 <col:7> 'struct bpf_stack_map *' lvalue ParmVar 0x12800e848 'smap' 'struct bpf_stack_map *'
    | `-ReturnStmt 0x128027220 <line:9:3, col:11>
    |   `-UnaryOperator 0x128027208 <col:10, col:11> '<dependent type>' contains-errors prefix '-' cannot overflow
    |     `-ImplicitCastExpr 0x1280271f0 <col:11> '<dependent type>' contains-errors <LValueToRValue>
    |       `-RecoveryExpr 0x1280271d0 <col:11> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x128027410 <line:11:2, col:42> 'int' contains-errors '='
    | |-DeclRefExpr 0x128027250 <col:2> 'int' lvalue Var 0x128026c80 'err' 'int'
    | `-CallExpr 0x1280273e8 <col:8, col:42> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x128027350 <col:8> 'int ()' Function 0x128027298 'pcpu_freelist_init' 'int ()'
    |   `-UnaryOperator 0x1280273d0 <col:27, col:34> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-RecoveryExpr 0x1280273a8 <col:28, col:34> '<dependent type>' contains-errors lvalue
    |       `-DeclRefExpr 0x128027370 <col:28> 'struct bpf_stack_map *' lvalue ParmVar 0x12800e848 'smap' 'struct bpf_stack_map *'
    |-IfStmt 0x1280274d0 <line:12:2, line:13:8>
    | |-ImplicitCastExpr 0x128027450 <line:12:6> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x128027430 <col:6> 'int' lvalue Var 0x128026c80 'err' 'int'
    | `-GotoStmt 0x1280274b8 <line:13:3, col:8> 'free_elems' 0x128027468
    |-CallExpr 0x1280277e8 <line:15:2, line:16:32> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x1280275d0 <line:15:2> 'int ()' Function 0x128027518 'pcpu_freelist_populate' 'int ()'
    | |-UnaryOperator 0x128027650 <col:25, col:32> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | `-RecoveryExpr 0x128027628 <col:26, col:32> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x1280275f0 <col:26> 'struct bpf_stack_map *' lvalue ParmVar 0x12800e848 'smap' 'struct bpf_stack_map *'
    | |-RecoveryExpr 0x1280276a0 <col:42, col:48> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x128027668 <col:42> 'struct bpf_stack_map *' lvalue ParmVar 0x12800e848 'smap' 'struct bpf_stack_map *'
    | |-RecoveryExpr 0x1280277c8 <col:55> '<dependent type>' contains-errors lvalue
    | `-CXXDependentScopeMemberExpr 0x128027740 <line:16:11, col:21> '<dependent type>' contains-errors lvalue .max_entries
    |   `-RecoveryExpr 0x128027718 <col:11, col:17> '<dependent type>' contains-errors lvalue
    |     `-DeclRefExpr 0x1280276e0 <col:11> 'struct bpf_stack_map *' lvalue ParmVar 0x12800e848 'smap' 'struct bpf_stack_map *'
    |-ReturnStmt 0x128027848 <line:17:2, col:9>
    | `-IntegerLiteral 0x128027828 <col:9> 'int' 0
    |-LabelStmt 0x1280279e0 <line:19:1, line:20:31> 'free_elems'
    | `-CallExpr 0x1280279b8 <col:2, col:31> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x128027938 <col:2> 'int ()' Function 0x128027880 'bpf_map_area_free' 'int ()'
    |   `-RecoveryExpr 0x128027990 <col:20, col:26> '<dependent type>' contains-errors lvalue
    |     `-DeclRefExpr 0x128027958 <col:20> 'struct bpf_stack_map *' lvalue ParmVar 0x12800e848 'smap' 'struct bpf_stack_map *'
    `-ReturnStmt 0x128027a38 <line:21:2, col:9>
      `-ImplicitCastExpr 0x128027a20 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x128027a00 <col:9> 'int' lvalue Var 0x128026c80 'err' 'int'
