TranslationUnitDecl 0x158855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1588564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x158855bd0 '__int128'
|-TypedefDecl 0x158856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x158855bf0 'unsigned __int128'
|-TypedefDecl 0x158926230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x158926000 'struct __NSConstantString_tag'
|   `-Record 0x158856580 '__NSConstantString_tag'
|-TypedefDecl 0x158926298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x158855d90 '__SVInt8_t'
|-TypedefDecl 0x158926300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x158855db0 '__SVInt16_t'
|-TypedefDecl 0x158926368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x158855dd0 '__SVInt32_t'
|-TypedefDecl 0x1589263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x158855df0 '__SVInt64_t'
|-TypedefDecl 0x158926438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x158855e10 '__SVUint8_t'
|-TypedefDecl 0x1589264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x158855e30 '__SVUint16_t'
|-TypedefDecl 0x158926508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x158855e50 '__SVUint32_t'
|-TypedefDecl 0x158926570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x158855e70 '__SVUint64_t'
|-TypedefDecl 0x1589265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x158855e90 '__SVFloat16_t'
|-TypedefDecl 0x158926640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x158855eb0 '__SVFloat32_t'
|-TypedefDecl 0x1589266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x158855ed0 '__SVFloat64_t'
|-TypedefDecl 0x158926710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x158855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x158926778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x158855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1589267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x158855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x158926848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x158855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1589268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x158855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x158926918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x158855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x158926980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x158855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1589269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x158855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x158926a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x158855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x158926ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x158856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x158926b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x158856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x158926b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x158856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x158926bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x158856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x158926c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x158856090 '__clang_svint8x3_t'
|-TypedefDecl 0x158926cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1588560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x158926d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1588560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x158926d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1588560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x158926df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x158856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x158926e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x158856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x158926ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x158856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x158926f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x158856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x158926f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x158856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x158927800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1588561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x158927868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1588561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1589278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1588561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x158927938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x158856210 '__clang_svint8x4_t'
|-TypedefDecl 0x1589279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x158856230 '__clang_svint16x4_t'
|-TypedefDecl 0x158927a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x158856250 '__clang_svint32x4_t'
|-TypedefDecl 0x158927a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x158856270 '__clang_svint64x4_t'
|-TypedefDecl 0x158927ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x158856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x158927b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1588562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x158927ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1588562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x158927c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1588562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x158927c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x158856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x158927ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x158856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x158927d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x158856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x158927db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x158856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x158927e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x158856390 '__SVBool_t'
|-TypedefDecl 0x158927e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1588563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x158927ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1588563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x158927f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1588563f0 '__SVCount_t'
|-TypedefDecl 0x158927ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x158927fb0 'char *'
|   `-BuiltinType 0x1588556b0 'char'
|-TypedefDecl 0x158928068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x158927fb0 'char *'
|   `-BuiltinType 0x1588556b0 'char'
|-FunctionDecl 0x158928190 <dataset_diviso_filec/func10405_nonvuln.c:1:1, line:66:1> line:1:6 kvp_get_os_info 'void (void)'
| `-CompoundStmt 0x15a009200 <line:2:1, line:66:1>
|   |-DeclStmt 0x158928450 <line:4:2, col:19>
|   | |-VarDecl 0x1589282c8 <col:2, col:8> col:8 used p 'char *'
|   | `-VarDecl 0x1589283d0 <col:2, col:18> col:11 used buf 'char[512]'
|   |-CallExpr 0x158928630 <line:6:2, col:16> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x158928580 <col:2> 'int ()' Function 0x1589284c8 'uname' 'int ()'
|   | `-UnaryOperator 0x158928618 <col:8, col:9> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   `-RecoveryExpr 0x1589285f8 <col:9> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x158941ec0 <line:11:2, col:26> 'char *' contains-errors '='
|   | |-DeclRefExpr 0x158928718 <col:2> 'char *' lvalue Var 0x1589282c8 'p' 'char *'
|   | `-CallExpr 0x158941e90 <col:6, col:26> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x158941da0 <col:6> 'char *(const char *, int)' Function 0x158941bc0 'strchr' 'char *(const char *, int)'
|   |   |-RecoveryExpr 0x158941e58 <col:13> '<dependent type>' contains-errors lvalue
|   |   `-CharacterLiteral 0x158941dd8 <col:23> 'int' 45
|   |-IfStmt 0x158941fb8 <line:12:2, line:13:8>
|   | |-ImplicitCastExpr 0x158941f00 <line:12:6> 'char *' <LValueToRValue>
|   | | `-DeclRefExpr 0x158941ee0 <col:6> 'char *' lvalue Var 0x1589282c8 'p' 'char *'
|   | `-BinaryOperator 0x158941f98 <line:13:3, col:8> 'char' '='
|   |   |-UnaryOperator 0x158941f50 <col:3, col:4> 'char' lvalue prefix '*' cannot overflow
|   |   | `-ImplicitCastExpr 0x158941f38 <col:4> 'char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x158941f18 <col:4> 'char *' lvalue Var 0x1589282c8 'p' 'char *'
|   |   `-ImplicitCastExpr 0x158941f80 <col:8> 'char' <IntegralCast>
|   |     `-CharacterLiteral 0x158941f68 <col:8> 'int' 0
|   |-IfStmt 0x158942268 <line:16:2, line:17:8>
|   | |-RecoveryExpr 0x1589421e0 <line:16:6, col:14> '_Bool' contains-errors
|   | `-GotoStmt 0x158942250 <line:17:3, col:8> 'kvp_osinfo_found' 0x158942200
|   |-IfStmt 0x158942370 <line:19:2, line:20:8>
|   | |-RecoveryExpr 0x158942338 <line:19:6, col:14> '_Bool' contains-errors
|   | `-GotoStmt 0x158942358 <line:20:3, col:8> 'kvp_osinfo_found' 0x158942200
|   |-ReturnStmt 0x1589423f0 <line:25:2>
|   |-LabelStmt 0x1589425a8 <line:27:1, col:17> 'kvp_osinfo_found'
|   | `-NullStmt 0x1589425a0 <col:17>
|   |-IfStmt 0x15a009050 <line:30:2, line:61:2>
|   | |-ImplicitCastExpr 0x1589425e8 <line:30:6> 'char *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1589425c8 <col:6> 'char *' lvalue Var 0x1589282c8 'p' 'char *'
|   | `-CompoundStmt 0x15a009018 <col:9, line:61:2>
|   |   |-BinaryOperator 0x158942738 <line:31:3, col:23> 'char *' '='
|   |   | |-DeclRefExpr 0x158942600 <col:3> 'char *' lvalue Var 0x1589282c8 'p' 'char *'
|   |   | `-CallExpr 0x1589426d8 <col:7, col:23> 'char *'
|   |   |   |-ImplicitCastExpr 0x1589426c0 <col:7> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x158942620 <col:7> 'char *(const char *, int)' Function 0x158941bc0 'strchr' 'char *(const char *, int)'
|   |   |   |-ImplicitCastExpr 0x158942720 <col:14> 'const char *' <NoOp>
|   |   |   | `-ImplicitCastExpr 0x158942708 <col:14> 'char *' <ArrayToPointerDecay>
|   |   |   |   `-DeclRefExpr 0x158942640 <col:14> 'char[512]' lvalue Var 0x1589283d0 'buf' 'char[512]'
|   |   |   `-CharacterLiteral 0x158942660 <col:19> 'int' 10
|   |   |-IfStmt 0x15a008238 <line:32:3, line:33:9>
|   |   | |-ImplicitCastExpr 0x158942778 <line:32:7> 'char *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x158942758 <col:7> 'char *' lvalue Var 0x1589282c8 'p' 'char *'
|   |   | `-BinaryOperator 0x15a008218 <line:33:4, col:9> 'char' '='
|   |   |   |-UnaryOperator 0x1589427c8 <col:4, col:5> 'char' lvalue prefix '*' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x1589427b0 <col:5> 'char *' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x158942790 <col:5> 'char *' lvalue Var 0x1589282c8 'p' 'char *'
|   |   |   `-ImplicitCastExpr 0x15a008200 <col:9> 'char' <IntegralCast>
|   |   |     `-CharacterLiteral 0x1589427e0 <col:9> 'int' 0
|   |   |-BinaryOperator 0x15a008520 <line:34:3, col:17> 'char *' '='
|   |   | |-DeclRefExpr 0x15a008258 <col:3> 'char *' lvalue Var 0x1589282c8 'p' 'char *'
|   |   | `-CallExpr 0x15a0084c8 <col:7, col:17> 'char *'
|   |   |   |-ImplicitCastExpr 0x15a0084b0 <col:7> 'char *(*)(const char *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x15a008428 <col:7> 'char *(const char *)' Function 0x15a0082b8 'strdup' 'char *(const char *)'
|   |   |   `-ImplicitCastExpr 0x15a008508 <col:14> 'const char *' <NoOp>
|   |   |     `-ImplicitCastExpr 0x15a0084f0 <col:14> 'char *' <ArrayToPointerDecay>
|   |   |       `-DeclRefExpr 0x15a008448 <col:14> 'char[512]' lvalue Var 0x1589283d0 'buf' 'char[512]'
|   |   |-IfStmt 0x15a0085f8 <line:35:3, line:36:9>
|   |   | |-UnaryOperator 0x15a008578 <line:35:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | `-ImplicitCastExpr 0x15a008560 <col:8> 'char *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x15a008540 <col:8> 'char *' lvalue Var 0x1589282c8 'p' 'char *'
|   |   | `-GotoStmt 0x15a0085e0 <line:36:4, col:9> 'done' 0x15a008590
|   |   `-IfStmt 0x15a008ff8 <line:41:3, line:60:3>
|   |     |-ImplicitCastExpr 0x15a008718 <line:41:7> 'char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x15a0086f8 <col:7> 'char *' lvalue Var 0x1589282c8 'p' 'char *'
|   |     `-CompoundStmt 0x15a008fc0 <col:10, line:60:3>
|   |       |-BinaryOperator 0x15a008838 <line:42:4, col:24> 'char *' '='
|   |       | |-DeclRefExpr 0x15a008730 <col:4> 'char *' lvalue Var 0x1589282c8 'p' 'char *'
|   |       | `-CallExpr 0x15a0087d8 <col:8, col:24> 'char *'
|   |       |   |-ImplicitCastExpr 0x15a0087c0 <col:8> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   |       |   | `-DeclRefExpr 0x15a008750 <col:8> 'char *(const char *, int)' Function 0x158941bc0 'strchr' 'char *(const char *, int)'
|   |       |   |-ImplicitCastExpr 0x15a008820 <col:15> 'const char *' <NoOp>
|   |       |   | `-ImplicitCastExpr 0x15a008808 <col:15> 'char *' <ArrayToPointerDecay>
|   |       |   |   `-DeclRefExpr 0x15a008770 <col:15> 'char[512]' lvalue Var 0x1589283d0 'buf' 'char[512]'
|   |       |   `-CharacterLiteral 0x15a008790 <col:20> 'int' 10
|   |       |-IfStmt 0x15a008930 <line:43:4, line:44:10>
|   |       | |-ImplicitCastExpr 0x15a008878 <line:43:8> 'char *' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x15a008858 <col:8> 'char *' lvalue Var 0x1589282c8 'p' 'char *'
|   |       | `-BinaryOperator 0x15a008910 <line:44:5, col:10> 'char' '='
|   |       |   |-UnaryOperator 0x15a0088c8 <col:5, col:6> 'char' lvalue prefix '*' cannot overflow
|   |       |   | `-ImplicitCastExpr 0x15a0088b0 <col:6> 'char *' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x15a008890 <col:6> 'char *' lvalue Var 0x1589282c8 'p' 'char *'
|   |       |   `-ImplicitCastExpr 0x15a0088f8 <col:10> 'char' <IntegralCast>
|   |       |     `-CharacterLiteral 0x15a0088e0 <col:10> 'int' 0
|   |       |-BinaryOperator 0x15a008a38 <line:45:4, col:18> 'char *' '='
|   |       | |-DeclRefExpr 0x15a008950 <col:4> 'char *' lvalue Var 0x1589282c8 'p' 'char *'
|   |       | `-CallExpr 0x15a0089e0 <col:8, col:18> 'char *'
|   |       |   |-ImplicitCastExpr 0x15a0089c8 <col:8> 'char *(*)(const char *)' <FunctionToPointerDecay>
|   |       |   | `-DeclRefExpr 0x15a008970 <col:8> 'char *(const char *)' Function 0x15a0082b8 'strdup' 'char *(const char *)'
|   |       |   `-ImplicitCastExpr 0x15a008a20 <col:15> 'const char *' <NoOp>
|   |       |     `-ImplicitCastExpr 0x15a008a08 <col:15> 'char *' <ArrayToPointerDecay>
|   |       |       `-DeclRefExpr 0x15a008990 <col:15> 'char[512]' lvalue Var 0x1589283d0 'buf' 'char[512]'
|   |       |-IfStmt 0x15a008ac0 <line:46:4, line:47:10>
|   |       | |-UnaryOperator 0x15a008a90 <line:46:8, col:9> 'int' prefix '!' cannot overflow
|   |       | | `-ImplicitCastExpr 0x15a008a78 <col:9> 'char *' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x15a008a58 <col:9> 'char *' lvalue Var 0x1589282c8 'p' 'char *'
|   |       | `-GotoStmt 0x15a008aa8 <line:47:5, col:10> 'done' 0x15a008590
|   |       `-IfStmt 0x15a008fa0 <line:52:4, line:59:4>
|   |         |-ImplicitCastExpr 0x15a008be0 <line:52:8> 'char *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x15a008bc0 <col:8> 'char *' lvalue Var 0x1589282c8 'p' 'char *'
|   |         `-CompoundStmt 0x15a008f78 <col:12, line:59:4>
|   |           |-BinaryOperator 0x15a008d00 <line:53:5, col:25> 'char *' '='
|   |           | |-DeclRefExpr 0x15a008bf8 <col:5> 'char *' lvalue Var 0x1589282c8 'p' 'char *'
|   |           | `-CallExpr 0x15a008ca0 <col:9, col:25> 'char *'
|   |           |   |-ImplicitCastExpr 0x15a008c88 <col:9> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   |           |   | `-DeclRefExpr 0x15a008c18 <col:9> 'char *(const char *, int)' Function 0x158941bc0 'strchr' 'char *(const char *, int)'
|   |           |   |-ImplicitCastExpr 0x15a008ce8 <col:16> 'const char *' <NoOp>
|   |           |   | `-ImplicitCastExpr 0x15a008cd0 <col:16> 'char *' <ArrayToPointerDecay>
|   |           |   |   `-DeclRefExpr 0x15a008c38 <col:16> 'char[512]' lvalue Var 0x1589283d0 'buf' 'char[512]'
|   |           |   `-CharacterLiteral 0x15a008c58 <col:21> 'int' 10
|   |           |-IfStmt 0x15a008df8 <line:54:5, line:55:11>
|   |           | |-ImplicitCastExpr 0x15a008d40 <line:54:9> 'char *' <LValueToRValue>
|   |           | | `-DeclRefExpr 0x15a008d20 <col:9> 'char *' lvalue Var 0x1589282c8 'p' 'char *'
|   |           | `-BinaryOperator 0x15a008dd8 <line:55:6, col:11> 'char' '='
|   |           |   |-UnaryOperator 0x15a008d90 <col:6, col:7> 'char' lvalue prefix '*' cannot overflow
|   |           |   | `-ImplicitCastExpr 0x15a008d78 <col:7> 'char *' <LValueToRValue>
|   |           |   |   `-DeclRefExpr 0x15a008d58 <col:7> 'char *' lvalue Var 0x1589282c8 'p' 'char *'
|   |           |   `-ImplicitCastExpr 0x15a008dc0 <col:11> 'char' <IntegralCast>
|   |           |     `-CharacterLiteral 0x15a008da8 <col:11> 'int' 0
|   |           `-BinaryOperator 0x15a008f00 <line:56:5, col:19> 'char *' '='
|   |             |-DeclRefExpr 0x15a008e18 <col:5> 'char *' lvalue Var 0x1589282c8 'p' 'char *'
|   |             `-CallExpr 0x15a008ea8 <col:9, col:19> 'char *'
|   |               |-ImplicitCastExpr 0x15a008e90 <col:9> 'char *(*)(const char *)' <FunctionToPointerDecay>
|   |               | `-DeclRefExpr 0x15a008e38 <col:9> 'char *(const char *)' Function 0x15a0082b8 'strdup' 'char *(const char *)'
|   |               `-ImplicitCastExpr 0x15a008ee8 <col:16> 'const char *' <NoOp>
|   |                 `-ImplicitCastExpr 0x15a008ed0 <col:16> 'char *' <ArrayToPointerDecay>
|   |                   `-DeclRefExpr 0x15a008e58 <col:16> 'char[512]' lvalue Var 0x1589283d0 'buf' 'char[512]'
|   |-LabelStmt 0x15a009178 <line:63:1, col:5> 'done'
|   | `-NullStmt 0x15a009170 <col:5>
|   `-ReturnStmt 0x15a009198 <line:65:2>
|-FunctionDecl 0x158941bc0 <line:11:6> col:6 implicit used strchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x158941cc0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x158941d28 <<invalid sloc>> <invalid sloc> 'int'
| `-BuiltinAttr 0x158941c68 <<invalid sloc>> Implicit 893
`-FunctionDecl 0x15a0082b8 <line:34:7> col:7 implicit used strdup 'char *(const char *)' extern
  |-ParmVarDecl 0x15a0083b8 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x15a008360 <<invalid sloc>> Implicit 950
