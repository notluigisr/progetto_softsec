TranslationUnitDecl 0x11e055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x11e0564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x11e055bd0 '__int128'
|-TypedefDecl 0x11e056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x11e055bf0 'unsigned __int128'
|-TypedefDecl 0x11e80be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x11e80bc00 'struct __NSConstantString_tag'
|   `-Record 0x11e056580 '__NSConstantString_tag'
|-TypedefDecl 0x11e80be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x11e055d90 '__SVInt8_t'
|-TypedefDecl 0x11e80bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x11e055db0 '__SVInt16_t'
|-TypedefDecl 0x11e80bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x11e055dd0 '__SVInt32_t'
|-TypedefDecl 0x11e80bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x11e055df0 '__SVInt64_t'
|-TypedefDecl 0x11e80c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x11e055e10 '__SVUint8_t'
|-TypedefDecl 0x11e80c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x11e055e30 '__SVUint16_t'
|-TypedefDecl 0x11e80c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x11e055e50 '__SVUint32_t'
|-TypedefDecl 0x11e80c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x11e055e70 '__SVUint64_t'
|-TypedefDecl 0x11e80c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x11e055e90 '__SVFloat16_t'
|-TypedefDecl 0x11e80c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x11e055eb0 '__SVFloat32_t'
|-TypedefDecl 0x11e80c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x11e055ed0 '__SVFloat64_t'
|-TypedefDecl 0x11e80c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x11e055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x11e80c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x11e055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x11e80c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x11e055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x11e80c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x11e055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x11e80c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x11e055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x11e80c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x11e055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x11e80c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x11e055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x11e80c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x11e055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x11e80c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x11e055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x11e80c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x11e056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x11e80c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x11e056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x11e80c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x11e056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x11e80c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x11e056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x11e80c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x11e056090 '__clang_svint8x3_t'
|-TypedefDecl 0x11e80c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x11e0560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x11e80c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x11e0560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x11e80c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x11e0560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x11e80c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x11e056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x11e80ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x11e056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x11e80cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x11e056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x11e80cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x11e056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x11e80cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x11e056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x11e80d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x11e0561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x11e80d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x11e0561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x11e80d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x11e0561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x11e80d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x11e056210 '__clang_svint8x4_t'
|-TypedefDecl 0x11e80d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x11e056230 '__clang_svint16x4_t'
|-TypedefDecl 0x11e80d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x11e056250 '__clang_svint32x4_t'
|-TypedefDecl 0x11e80d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x11e056270 '__clang_svint64x4_t'
|-TypedefDecl 0x11e80d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x11e056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x11e80d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x11e0562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x11e80d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x11e0562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x11e80d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x11e0562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x11e80d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x11e056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x11e80d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x11e056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x11e80d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x11e056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x11e80d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x11e056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x11e80da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x11e056390 '__SVBool_t'
|-TypedefDecl 0x11e80da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x11e0563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x11e80dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x11e0563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x11e80db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x11e0563f0 '__SVCount_t'
|-TypedefDecl 0x11e80dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x11e80dbb0 'char *'
|   `-BuiltinType 0x11e0556b0 'char'
|-TypedefDecl 0x11e80dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x11e80dbb0 'char *'
|   `-BuiltinType 0x11e0556b0 'char'
|-FunctionDecl 0x11e80e358 <dataset_diviso_filec/func3560_vuln.c:1:1, line:69:1> line:1:12 execute 'int (struct sockaddr *)' static
| |-ParmVarDecl 0x11e80e248 <col:20, col:37> col:37 used addr 'struct sockaddr *'
| `-CompoundStmt 0x11e82efd0 <line:2:1, line:69:1>
|   |-DeclStmt 0x11e826758 <line:3:2, col:24>
|   | `-VarDecl 0x11e8266f0 <col:2, col:23> col:14 used line 'char[1000]' static
|   |-DeclStmt 0x11e826910 <line:4:2, col:20>
|   | |-VarDecl 0x11e826788 <col:2, col:6> col:6 used pktlen 'int'
|   | |-VarDecl 0x11e826808 <col:2, col:14> col:14 used len 'int'
|   | `-VarDecl 0x11e826888 <col:2, col:19> col:19 used i 'int'
|   |-IfStmt 0x11e82b968 <line:6:2, line:31:2> has_else
|   | |-ImplicitCastExpr 0x11e826948 <line:6:6> 'struct sockaddr *' <LValueToRValue>
|   | | `-DeclRefExpr 0x11e826928 <col:6> 'struct sockaddr *' lvalue ParmVar 0x11e80e248 'addr' 'struct sockaddr *'
|   | |-CompoundStmt 0x11e82b358 <col:12, line:28:2>
|   | | |-DeclStmt 0x11e826ac8 <line:7:3, col:25>
|   | | | `-VarDecl 0x11e826a00 <col:3, col:23> col:8 used addrbuf 'char[256]' cinit
|   | | |   `-StringLiteral 0x11e826ab0 <col:23> 'char[256]' ""
|   | | |-DeclStmt 0x11e826b98 <line:8:3, col:16>
|   | | | `-VarDecl 0x11e826af8 <col:3, col:15> col:7 used port 'int' cinit
|   | | |   `-UnaryOperator 0x11e826b80 <col:14, col:15> 'int' prefix '-'
|   | | |     `-IntegerLiteral 0x11e826b60 <col:15> 'int' 1
|   | | |-IfStmt 0x11e82af20 <line:10:3, line:25:3> has_else
|   | | | |-BinaryOperator 0x11e826c80 <line:10:7, col:26> 'int' contains-errors '=='
|   | | | | |-RecoveryExpr 0x11e826be8 <col:7, col:13> '<dependent type>' contains-errors lvalue
|   | | | | | `-DeclRefExpr 0x11e826bb0 <col:7> 'struct sockaddr *' lvalue ParmVar 0x11e80e248 'addr' 'struct sockaddr *'
|   | | | | `-RecoveryExpr 0x11e826c60 <col:26> '<dependent type>' contains-errors lvalue
|   | | | |-CompoundStmt 0x11e8273c0 <col:35, line:15:3>
|   | | | | |-DeclStmt 0x11e826f18 <line:11:4, col:48>
|   | | | | | |-RecordDecl 0x11e826ca0 <col:4, col:11> col:11 struct sockaddr_in
|   | | | | | `-VarDecl 0x11e826e08 <col:4, col:44> col:24 used sin_addr 'struct sockaddr_in *' cinit
|   | | | | |   `-ImplicitCastExpr 0x11e826ee8 <col:35, col:44> 'struct sockaddr_in *' <BitCast>
|   | | | | |     `-CStyleCastExpr 0x11e826ec0 <col:35, col:44> 'void *' <BitCast>
|   | | | | |       `-ImplicitCastExpr 0x11e826ea8 <col:44> 'struct sockaddr *' <LValueToRValue> part_of_explicit_cast
|   | | | | |         `-DeclRefExpr 0x11e826e70 <col:44> 'struct sockaddr *' lvalue ParmVar 0x11e80e248 'addr' 'struct sockaddr *'
|   | | | | |-CallExpr 0x11e8271b8 <line:12:4, col:76> '<dependent type>' contains-errors
|   | | | | | |-DeclRefExpr 0x11e827040 <col:4> 'int ()' Function 0x11e826f88 'inet_ntop' 'int ()'
|   | | | | | |-RecoveryExpr 0x11e827098 <col:14, col:20> '<dependent type>' contains-errors lvalue
|   | | | | | | `-DeclRefExpr 0x11e827060 <col:14> 'struct sockaddr *' lvalue ParmVar 0x11e80e248 'addr' 'struct sockaddr *'
|   | | | | | |-UnaryOperator 0x11e827120 <col:31, col:42> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | | | | | | `-RecoveryExpr 0x11e8270f8 <col:32, col:42> '<dependent type>' contains-errors lvalue
|   | | | | | |   `-DeclRefExpr 0x11e8270c0 <col:32> 'struct sockaddr_in *' lvalue Var 0x11e826e08 'sin_addr' 'struct sockaddr_in *'
|   | | | | | |-DeclRefExpr 0x11e827138 <col:52> 'char[256]' lvalue Var 0x11e826a00 'addrbuf' 'char[256]'
|   | | | | | `-UnaryExprOrTypeTraitExpr 0x11e827198 <col:61, col:75> 'unsigned long' sizeof
|   | | | | |   `-ParenExpr 0x11e827178 <col:67, col:75> 'char[256]' lvalue
|   | | | | |     `-DeclRefExpr 0x11e827158 <col:68> 'char[256]' lvalue Var 0x11e826a00 'addrbuf' 'char[256]' non_odr_use_unevaluated
|   | | | | `-BinaryOperator 0x11e8273a0 <line:13:4, col:35> 'int' contains-errors '='
|   | | | |   |-DeclRefExpr 0x11e8271f8 <col:4> 'int' lvalue Var 0x11e826af8 'port' 'int'
|   | | | |   `-CallExpr 0x11e827378 <col:11, col:35> '<dependent type>' contains-errors
|   | | | |     |-DeclRefExpr 0x11e8272f8 <col:11> 'int ()' Function 0x11e827240 'ntohs' 'int ()'
|   | | | |     `-RecoveryExpr 0x11e827350 <col:17, col:27> '<dependent type>' contains-errors lvalue
|   | | | |       `-DeclRefExpr 0x11e827318 <col:17> 'struct sockaddr_in *' lvalue Var 0x11e826e08 'sin_addr' 'struct sockaddr_in *'
|   | | | `-IfStmt 0x11e82af00 <line:15:10, line:25:3>
|   | | |   |-BinaryOperator 0x11e827500 <line:15:14, col:41> 'int' contains-errors '&&'
|   | | |   | |-DeclRefExpr 0x11e8273e8 <col:14> 'struct sockaddr *' lvalue ParmVar 0x11e80e248 'addr' 'struct sockaddr *'
|   | | |   | `-BinaryOperator 0x11e8274e0 <col:22, col:41> 'int' contains-errors '=='
|   | | |   |   |-RecoveryExpr 0x11e827440 <col:22, col:28> '<dependent type>' contains-errors lvalue
|   | | |   |   | `-DeclRefExpr 0x11e827408 <col:22> 'struct sockaddr *' lvalue ParmVar 0x11e80e248 'addr' 'struct sockaddr *'
|   | | |   |   `-RecoveryExpr 0x11e8274c0 <col:41> '<dependent type>' contains-errors lvalue
|   | | |   `-CompoundStmt 0x11e82aeb8 <col:51, line:25:3>
|   | | |     |-DeclStmt 0x11e82a598 <line:16:4, col:50>
|   | | |     | |-RecordDecl 0x11e827520 <col:4, col:11> col:11 struct sockaddr_in6
|   | | |     | `-VarDecl 0x11e82a488 <col:4, col:46> col:25 used sin6_addr 'struct sockaddr_in6 *' cinit
|   | | |     |   `-ImplicitCastExpr 0x11e82a568 <col:37, col:46> 'struct sockaddr_in6 *' <BitCast>
|   | | |     |     `-CStyleCastExpr 0x11e82a540 <col:37, col:46> 'void *' <BitCast>
|   | | |     |       `-ImplicitCastExpr 0x11e82a528 <col:46> 'struct sockaddr *' <LValueToRValue> part_of_explicit_cast
|   | | |     |         `-DeclRefExpr 0x11e82a4f0 <col:46> 'struct sockaddr *' lvalue ParmVar 0x11e80e248 'addr' 'struct sockaddr *'
|   | | |     |-DeclStmt 0x11e82a668 <line:18:4, col:23>
|   | | |     | `-VarDecl 0x11e82a5c8 <col:4, col:16> col:10 used buf 'char *' cinit
|   | | |     |   `-ImplicitCastExpr 0x11e82a650 <col:16> 'char *' <ArrayToPointerDecay>
|   | | |     |     `-DeclRefExpr 0x11e82a630 <col:16> 'char[256]' lvalue Var 0x11e826a00 'addrbuf' 'char[256]'
|   | | |     |-BinaryOperator 0x11e82a700 <line:19:4, col:13> 'char' '='
|   | | |     | |-UnaryOperator 0x11e82a6b8 <col:4, col:8> 'char' lvalue prefix '*' cannot overflow
|   | | |     | | `-UnaryOperator 0x11e82a6a0 <col:5, col:8> 'char *' postfix '++'
|   | | |     | |   `-DeclRefExpr 0x11e82a680 <col:5> 'char *' lvalue Var 0x11e82a5c8 'buf' 'char *'
|   | | |     | `-ImplicitCastExpr 0x11e82a6e8 <col:13> 'char' <IntegralCast>
|   | | |     |   `-CharacterLiteral 0x11e82a6d0 <col:13> 'int' 91
|   | | |     |-BinaryOperator 0x11e82a7a0 <col:18, col:25> 'char' '='
|   | | |     | |-UnaryOperator 0x11e82a758 <col:18, col:19> 'char' lvalue prefix '*' cannot overflow
|   | | |     | | `-ImplicitCastExpr 0x11e82a740 <col:19> 'char *' <LValueToRValue>
|   | | |     | |   `-DeclRefExpr 0x11e82a720 <col:19> 'char *' lvalue Var 0x11e82a5c8 'buf' 'char *'
|   | | |     | `-ImplicitCastExpr 0x11e82a788 <col:25> 'char' <IntegralCast>
|   | | |     |   `-CharacterLiteral 0x11e82a770 <col:25> 'int' 0
|   | | |     |-CallExpr 0x11e82a9e0 <line:20:4, col:71> '<dependent type>' contains-errors
|   | | |     | |-DeclRefExpr 0x11e82a7c0 <col:4> 'int ()' Function 0x11e826f88 'inet_ntop' 'int ()'
|   | | |     | |-RecoveryExpr 0x11e82a988 <col:14> '<dependent type>' contains-errors lvalue
|   | | |     | |-UnaryOperator 0x11e82a858 <col:24, col:36> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | | |     | | `-RecoveryExpr 0x11e82a830 <col:25, col:36> '<dependent type>' contains-errors lvalue
|   | | |     | |   `-DeclRefExpr 0x11e82a7f8 <col:25> 'struct sockaddr_in6 *' lvalue Var 0x11e82a488 'sin6_addr' 'struct sockaddr_in6 *'
|   | | |     | |-DeclRefExpr 0x11e82a870 <col:47> 'char *' lvalue Var 0x11e82a5c8 'buf' 'char *'
|   | | |     | `-BinaryOperator 0x11e82a9c0 <col:52, col:70> 'unsigned long' '-'
|   | | |     |   |-UnaryExprOrTypeTraitExpr 0x11e82a8d0 <col:52, col:66> 'unsigned long' sizeof
|   | | |     |   | `-ParenExpr 0x11e82a8b0 <col:58, col:66> 'char[256]' lvalue
|   | | |     |   |   `-DeclRefExpr 0x11e82a890 <col:59> 'char[256]' lvalue Var 0x11e826a00 'addrbuf' 'char[256]' non_odr_use_unevaluated
|   | | |     |   `-ImplicitCastExpr 0x11e82a9a8 <col:70> 'unsigned long' <IntegralCast>
|   | | |     |     `-IntegerLiteral 0x11e82a8f0 <col:70> 'int' 1
|   | | |     |-CallExpr 0x11e82ad58 <line:21:4, col:21> 'char *'
|   | | |     | |-ImplicitCastExpr 0x11e82ad40 <col:4> 'char *(*)(char *, const char *)' <FunctionToPointerDecay>
|   | | |     | | `-DeclRefExpr 0x11e82ac40 <col:4> 'char *(char *, const char *)' Function 0x11e82aa60 'strcat' 'char *(char *, const char *)'
|   | | |     | |-ImplicitCastExpr 0x11e82ad88 <col:11> 'char *' <LValueToRValue>
|   | | |     | | `-DeclRefExpr 0x11e82ac60 <col:11> 'char *' lvalue Var 0x11e82a5c8 'buf' 'char *'
|   | | |     | `-ImplicitCastExpr 0x11e82adb8 <col:16> 'const char *' <NoOp>
|   | | |     |   `-ImplicitCastExpr 0x11e82ada0 <col:16> 'char *' <ArrayToPointerDecay>
|   | | |     |     `-StringLiteral 0x11e82acc0 <col:16> 'char[4]' lvalue "STR"
|   | | |     `-BinaryOperator 0x11e82ae98 <line:23:4, col:37> 'int' contains-errors '='
|   | | |       |-DeclRefExpr 0x11e82add0 <col:4> 'int' lvalue Var 0x11e826af8 'port' 'int'
|   | | |       `-CallExpr 0x11e82ae70 <col:11, col:37> '<dependent type>' contains-errors
|   | | |         |-DeclRefExpr 0x11e82adf0 <col:11> 'int ()' Function 0x11e827240 'ntohs' 'int ()'
|   | | |         `-RecoveryExpr 0x11e82ae48 <col:17, col:28> '<dependent type>' contains-errors lvalue
|   | | |           `-DeclRefExpr 0x11e82ae10 <col:17> 'struct sockaddr_in6 *' lvalue Var 0x11e82a488 'sin6_addr' 'struct sockaddr_in6 *'
|   | | |-CallExpr 0x11e82b0f8 <line:26:3, col:31> 'int'
|   | | | |-ImplicitCastExpr 0x11e82b0e0 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x11e82b030 <col:3> 'int ()' Function 0x11e82af78 'loginfo' 'int ()'
|   | | | |-ImplicitCastExpr 0x11e82b130 <col:11> 'char *' <ArrayToPointerDecay>
|   | | | | `-StringLiteral 0x11e82b050 <col:11> 'char[4]' lvalue "STR"
|   | | | |-ImplicitCastExpr 0x11e82b148 <col:18> 'char *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x11e82b070 <col:18> 'char[256]' lvalue Var 0x11e826a00 'addrbuf' 'char[256]'
|   | | | `-ImplicitCastExpr 0x11e82b160 <col:27> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x11e82b090 <col:27> 'int' lvalue Var 0x11e826af8 'port' 'int'
|   | | `-CallExpr 0x11e82b2f0 <line:27:3, col:27> 'int'
|   | |   |-ImplicitCastExpr 0x11e82b2d8 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x11e82b258 <col:3> 'int ()' Function 0x11e82b1a0 'setenv' 'int ()'
|   | |   |-ImplicitCastExpr 0x11e82b328 <col:10> 'char *' <ArrayToPointerDecay>
|   | |   | `-StringLiteral 0x11e82b278 <col:10> 'char[4]' lvalue "STR"
|   | |   |-ImplicitCastExpr 0x11e82b340 <col:17> 'char *' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x11e82b298 <col:17> 'char[256]' lvalue Var 0x11e826a00 'addrbuf' 'char[256]'
|   | |   `-IntegerLiteral 0x11e82b2b8 <col:26> 'int' 1
|   | `-CompoundStmt 0x11e82b950 <line:29:7, line:31:2>
|   |   `-CallExpr 0x11e82b910 <line:30:3, col:17> 'int'
|   |     |-ImplicitCastExpr 0x11e82b8f8 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x11e82b8b8 <col:3> 'int ()' Function 0x11e82b800 'unsetenv' 'int ()'
|   |     `-ImplicitCastExpr 0x11e82b938 <col:12> 'char *' <ArrayToPointerDecay>
|   |       `-StringLiteral 0x11e82b8d8 <col:12> 'char[4]' lvalue "STR"
|   |-CallExpr 0x11e82bbc8 <line:33:2, col:45> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x11e82ba78 <col:2> 'int ()' Function 0x11e82b9c0 'alarm' 'int ()'
|   | `-ConditionalOperator 0x11e82bb98 <col:8, col:38> '<dependent type>' contains-errors
|   |   |-RecoveryExpr 0x11e82bb38 <col:8> '<dependent type>' contains-errors lvalue
|   |   |-RecoveryExpr 0x11e82bb58 <col:23> '<dependent type>' contains-errors lvalue
|   |   `-RecoveryExpr 0x11e82bb78 <col:38> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x11e82be18 <line:34:2, col:49> 'int' '='
|   | |-DeclRefExpr 0x11e82bbf0 <col:2> 'int' lvalue Var 0x11e826788 'pktlen' 'int'
|   | `-CallExpr 0x11e82bdc8 <col:11, col:49> 'int'
|   |   |-ImplicitCastExpr 0x11e82bdb0 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x11e82bcf0 <col:11> 'int ()' Function 0x11e82bc38 'packet_read_line' 'int ()'
|   |   |-IntegerLiteral 0x11e82bd10 <col:28> 'int' 0
|   |   |-ImplicitCastExpr 0x11e82be00 <col:31> 'char *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x11e82bd30 <col:31> 'char[1000]' lvalue Var 0x11e8266f0 'line' 'char[1000]'
|   |   `-UnaryExprOrTypeTraitExpr 0x11e82bd90 <col:37, col:48> 'unsigned long' sizeof
|   |     `-ParenExpr 0x11e82bd70 <col:43, col:48> 'char[1000]' lvalue
|   |       `-DeclRefExpr 0x11e82bd50 <col:44> 'char[1000]' lvalue Var 0x11e8266f0 'line' 'char[1000]' non_odr_use_unevaluated
|   |-CallExpr 0x11e82be90 <line:35:2, col:9> 'int'
|   | |-ImplicitCastExpr 0x11e82be78 <col:2> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x11e82be38 <col:2> 'int ()' Function 0x11e82b9c0 'alarm' 'int ()'
|   | `-IntegerLiteral 0x11e82be58 <col:8> 'int' 0
|   |-BinaryOperator 0x11e82c198 <line:37:2, col:19> 'int' '='
|   | |-DeclRefExpr 0x11e82beb8 <col:2> 'int' lvalue Var 0x11e826808 'len' 'int'
|   | `-ImplicitCastExpr 0x11e82c180 <col:8, col:19> 'int' <IntegralCast>
|   |   `-CallExpr 0x11e82c128 <col:8, col:19> 'unsigned long'
|   |     |-ImplicitCastExpr 0x11e82c110 <col:8> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x11e82c088 <col:8> 'unsigned long (const char *)' Function 0x11e82bf18 'strlen' 'unsigned long (const char *)'
|   |     `-ImplicitCastExpr 0x11e82c168 <col:15> 'const char *' <NoOp>
|   |       `-ImplicitCastExpr 0x11e82c150 <col:15> 'char *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x11e82c0a8 <col:15> 'char[1000]' lvalue Var 0x11e8266f0 'line' 'char[1000]'
|   |-IfStmt 0x11e82c568 <line:38:2, line:41:38>
|   | |-BinaryOperator 0x11e82c228 <line:38:6, col:16> 'int' '!='
|   | | |-ImplicitCastExpr 0x11e82c1f8 <col:6> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x11e82c1b8 <col:6> 'int' lvalue Var 0x11e826788 'pktlen' 'int'
|   | | `-ImplicitCastExpr 0x11e82c210 <col:16> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x11e82c1d8 <col:16> 'int' lvalue Var 0x11e826808 'len' 'int'
|   | `-CallExpr 0x11e82c510 <line:39:3, line:41:38> 'int'
|   |   |-ImplicitCastExpr 0x11e82c4f8 <line:39:3> 'int (*)()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x11e82c248 <col:3> 'int ()' Function 0x11e82af78 'loginfo' 'int ()'
|   |   |-ImplicitCastExpr 0x11e82c550 <col:11> 'char *' <ArrayToPointerDecay>
|   |   | `-StringLiteral 0x11e82c268 <col:11> 'char[4]' lvalue "STR"
|   |   |-BinaryOperator 0x11e82c338 <line:40:4, col:19> 'int' '-'
|   |   | |-CStyleCastExpr 0x11e82c2d8 <col:4, col:10> 'int' <NoOp>
|   |   | | `-ImplicitCastExpr 0x11e82c2c0 <col:10> 'int' <LValueToRValue> part_of_explicit_cast
|   |   | |   `-DeclRefExpr 0x11e82c288 <col:10> 'int' lvalue Var 0x11e826788 'pktlen' 'int'
|   |   | `-ImplicitCastExpr 0x11e82c320 <col:19> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x11e82c300 <col:19> 'int' lvalue Var 0x11e826808 'len' 'int'
|   |   |-BinaryOperator 0x11e82c408 <line:41:4, col:19> 'int' '-'
|   |   | |-CStyleCastExpr 0x11e82c3a8 <col:4, col:10> 'int' <NoOp>
|   |   | | `-ImplicitCastExpr 0x11e82c390 <col:10> 'int' <LValueToRValue> part_of_explicit_cast
|   |   | |   `-DeclRefExpr 0x11e82c358 <col:10> 'int' lvalue Var 0x11e826788 'pktlen' 'int'
|   |   | `-ImplicitCastExpr 0x11e82c3f0 <col:19> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x11e82c3d0 <col:19> 'int' lvalue Var 0x11e826808 'len' 'int'
|   |   `-BinaryOperator 0x11e82c4d8 <col:24, col:37> 'char *' '+'
|   |     |-BinaryOperator 0x11e82c498 <col:24, col:31> 'char *' '+'
|   |     | |-ImplicitCastExpr 0x11e82c468 <col:24> 'char *' <ArrayToPointerDecay>
|   |     | | `-DeclRefExpr 0x11e82c428 <col:24> 'char[1000]' lvalue Var 0x11e8266f0 'line' 'char[1000]'
|   |     | `-ImplicitCastExpr 0x11e82c480 <col:31> 'int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x11e82c448 <col:31> 'int' lvalue Var 0x11e826808 'len' 'int'
|   |     `-IntegerLiteral 0x11e82c4b8 <col:37> 'int' 1
|   |-IfStmt 0x11e82d858 <line:42:2, line:45:2>
|   | |-BinaryOperator 0x11e82c6f8 <line:42:6, col:28> 'int' '&&'
|   | | |-ImplicitCastExpr 0x11e82c6e0 <col:6> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x11e82c588 <col:6> 'int' lvalue Var 0x11e826808 'len' 'int'
|   | | `-BinaryOperator 0x11e82c6c0 <col:13, col:28> 'int' '=='
|   | |   |-ImplicitCastExpr 0x11e82c6a8 <col:13, col:23> 'int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x11e82c690 <col:13, col:23> 'char' <LValueToRValue>
|   | |   |   `-ArraySubscriptExpr 0x11e82c658 <col:13, col:23> 'char' lvalue
|   | |   |     |-ImplicitCastExpr 0x11e82c640 <col:13> 'char *' <ArrayToPointerDecay>
|   | |   |     | `-DeclRefExpr 0x11e82c5a8 <col:13> 'char[1000]' lvalue Var 0x11e8266f0 'line' 'char[1000]'
|   | |   |     `-BinaryOperator 0x11e82c620 <col:18, col:22> 'int' '-'
|   | |   |       |-ImplicitCastExpr 0x11e82c608 <col:18> 'int' <LValueToRValue>
|   | |   |       | `-DeclRefExpr 0x11e82c5c8 <col:18> 'int' lvalue Var 0x11e826808 'len' 'int'
|   | |   |       `-IntegerLiteral 0x11e82c5e8 <col:22> 'int' 1
|   | |   `-CharacterLiteral 0x11e82c678 <col:28> 'int' 10
|   | `-CompoundStmt 0x11e82d838 <col:34, line:45:2>
|   |   |-BinaryOperator 0x11e82c7e0 <line:43:3, col:17> 'char' '='
|   |   | |-ArraySubscriptExpr 0x11e82c788 <col:3, col:13> 'char' lvalue
|   |   | | |-ImplicitCastExpr 0x11e82c770 <col:3> 'char *' <ArrayToPointerDecay>
|   |   | | | `-DeclRefExpr 0x11e82c718 <col:3> 'char[1000]' lvalue Var 0x11e8266f0 'line' 'char[1000]'
|   |   | | `-UnaryOperator 0x11e82c758 <col:8, col:10> 'int' prefix '--'
|   |   | |   `-DeclRefExpr 0x11e82c738 <col:10> 'int' lvalue Var 0x11e826808 'len' 'int'
|   |   | `-ImplicitCastExpr 0x11e82c7c8 <col:17> 'char' <IntegralCast>
|   |   |   `-IntegerLiteral 0x11e82c7a8 <col:17> 'int' 0
|   |   `-UnaryOperator 0x11e82d820 <line:44:3, col:9> 'int' postfix '--'
|   |     `-DeclRefExpr 0x11e82d800 <col:3> 'int' lvalue Var 0x11e826788 'pktlen' 'int'
|   |-IfStmt 0x11e82de20 <line:53:2, line:54:52>
|   | |-BinaryOperator 0x11e82db18 <line:53:6, col:13> 'int' '!='
|   | | |-ImplicitCastExpr 0x11e82dae8 <col:6> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x11e82daa8 <col:6> 'int' lvalue Var 0x11e826808 'len' 'int'
|   | | `-ImplicitCastExpr 0x11e82db00 <col:13> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x11e82dac8 <col:13> 'int' lvalue Var 0x11e826788 'pktlen' 'int'
|   | `-CallExpr 0x11e82ddf0 <line:54:3, col:52> 'int'
|   |   |-ImplicitCastExpr 0x11e82ddd8 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x11e82dc18 <col:3> 'int ()' Function 0x11e82db60 'parse_extra_args' 'int ()'
|   |   |-BinaryOperator 0x11e82dce8 <col:20, col:33> 'char *' '+'
|   |   | |-BinaryOperator 0x11e82dca8 <col:20, col:27> 'char *' '+'
|   |   | | |-ImplicitCastExpr 0x11e82dc78 <col:20> 'char *' <ArrayToPointerDecay>
|   |   | | | `-DeclRefExpr 0x11e82dc38 <col:20> 'char[1000]' lvalue Var 0x11e8266f0 'line' 'char[1000]'
|   |   | | `-ImplicitCastExpr 0x11e82dc90 <col:27> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x11e82dc58 <col:27> 'int' lvalue Var 0x11e826808 'len' 'int'
|   |   | `-IntegerLiteral 0x11e82dcc8 <col:33> 'int' 1
|   |   `-BinaryOperator 0x11e82ddb8 <col:36, col:51> 'int' '-'
|   |     |-BinaryOperator 0x11e82dd78 <col:36, col:45> 'int' '-'
|   |     | |-ImplicitCastExpr 0x11e82dd48 <col:36> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x11e82dd08 <col:36> 'int' lvalue Var 0x11e826788 'pktlen' 'int'
|   |     | `-ImplicitCastExpr 0x11e82dd60 <col:45> 'int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x11e82dd28 <col:45> 'int' lvalue Var 0x11e826808 'len' 'int'
|   |     `-IntegerLiteral 0x11e82dd98 <col:51> 'int' 1
|   |-CallExpr 0x11e82ef28 <line:67:2, col:22> 'int'
|   | |-ImplicitCastExpr 0x11e82ef10 <col:2> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x11e82eeb0 <col:2> 'int ()' Function 0x11e82edf8 'logerror' 'int ()'
|   | |-ImplicitCastExpr 0x11e82ef58 <col:11> 'char *' <ArrayToPointerDecay>
|   | | `-StringLiteral 0x11e82eed0 <col:11> 'char[4]' lvalue "STR"
|   | `-ImplicitCastExpr 0x11e82ef70 <col:18> 'char *' <ArrayToPointerDecay>
|   |   `-DeclRefExpr 0x11e82eef0 <col:18> 'char[1000]' lvalue Var 0x11e8266f0 'line' 'char[1000]'
|   `-ReturnStmt 0x11e82efc0 <line:68:2, col:10>
|     `-UnaryOperator 0x11e82efa8 <col:9, col:10> 'int' prefix '-'
|       `-IntegerLiteral 0x11e82ef88 <col:10> 'int' 1
|-FunctionDecl 0x11e82aa60 <line:21:4> col:4 implicit used strcat 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x11e82ab60 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x11e82abc8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x11e82ab08 <<invalid sloc>> Implicit 889
|-FunctionDecl 0x11e82bf18 <line:37:8> col:8 implicit used strlen 'unsigned long (const char *)' extern
| |-ParmVarDecl 0x11e82c018 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x11e82bfc0 <<invalid sloc>> Implicit 902
|-FunctionDecl 0x11e82d8b8 <line:47:2> col:2 implicit used free 'void (void *)' extern
| |-ParmVarDecl 0x11e82d9b8 <<invalid sloc>> <invalid sloc> 'void *'
| `-BuiltinAttr 0x11e82d960 <<invalid sloc>> Implicit 873
`-FunctionDecl 0x11e82e598 <line:60:8> col:8 implicit used strncmp 'int (const char *, const char *, unsigned long)' extern
  |-ParmVarDecl 0x11e82e698 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x11e82e700 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x11e82e768 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x11e82e640 <<invalid sloc>> Implicit 888
