TranslationUnitDecl 0x151855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1518564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x151855bd0 '__int128'
|-TypedefDecl 0x151856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x151855bf0 'unsigned __int128'
|-TypedefDecl 0x15200be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x15200bc00 'struct __NSConstantString_tag'
|   `-Record 0x151856580 '__NSConstantString_tag'
|-TypedefDecl 0x15200be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x151855d90 '__SVInt8_t'
|-TypedefDecl 0x15200bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x151855db0 '__SVInt16_t'
|-TypedefDecl 0x15200bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x151855dd0 '__SVInt32_t'
|-TypedefDecl 0x15200bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x151855df0 '__SVInt64_t'
|-TypedefDecl 0x15200c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x151855e10 '__SVUint8_t'
|-TypedefDecl 0x15200c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x151855e30 '__SVUint16_t'
|-TypedefDecl 0x15200c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x151855e50 '__SVUint32_t'
|-TypedefDecl 0x15200c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x151855e70 '__SVUint64_t'
|-TypedefDecl 0x15200c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x151855e90 '__SVFloat16_t'
|-TypedefDecl 0x15200c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x151855eb0 '__SVFloat32_t'
|-TypedefDecl 0x15200c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x151855ed0 '__SVFloat64_t'
|-TypedefDecl 0x15200c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x151855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x15200c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x151855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x15200c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x151855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x15200c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x151855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x15200c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x151855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x15200c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x151855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x15200c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x151855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x15200c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x151855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x15200c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x151855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x15200c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x151856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x15200c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x151856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x15200c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x151856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x15200c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x151856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x15200c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x151856090 '__clang_svint8x3_t'
|-TypedefDecl 0x15200c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1518560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x15200c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1518560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x15200c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1518560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x15200c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x151856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x15200ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x151856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x15200cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x151856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x15200cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x151856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x15200cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x151856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x15200d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1518561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x15200d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1518561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x15200d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1518561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x15200d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x151856210 '__clang_svint8x4_t'
|-TypedefDecl 0x15200d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x151856230 '__clang_svint16x4_t'
|-TypedefDecl 0x15200d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x151856250 '__clang_svint32x4_t'
|-TypedefDecl 0x15200d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x151856270 '__clang_svint64x4_t'
|-TypedefDecl 0x15200d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x151856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x15200d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1518562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x15200d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1518562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x15200d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1518562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x15200d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x151856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x15200d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x151856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x15200d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x151856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x15200d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x151856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x15200da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x151856390 '__SVBool_t'
|-TypedefDecl 0x15200da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1518563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x15200dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1518563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x15200db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1518563f0 '__SVCount_t'
|-TypedefDecl 0x15200dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x15200dbb0 'char *'
|   `-BuiltinType 0x1518556b0 'char'
|-TypedefDecl 0x15200dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x15200dbb0 'char *'
|   `-BuiltinType 0x1518556b0 'char'
|-FunctionDecl 0x15200de68 <dataset_diviso_filec/func22703_nonvuln.c:1:1, line:61:1> line:1:1 DecodeTimezone 'int (char *, int *)'
| |-ParmVarDecl 0x15200dcd8 <col:16, col:22> col:22 used str 'char *'
| |-ParmVarDecl 0x15200dd88 <col:27, col:32> col:32 used tzp 'int *'
| `-CompoundStmt 0x151924910 <line:2:1, line:61:1>
|   |-DeclStmt 0x15200dfe8 <line:3:2, col:10>
|   | `-VarDecl 0x15200df80 <col:2, col:8> col:8 used tz 'int'
|   |-DeclStmt 0x15200e1c0 <line:4:2, line:6:12>
|   | |-VarDecl 0x15200e018 <line:4:2, col:8> col:8 used hr 'int'
|   | |-VarDecl 0x15200e098 <col:2, line:5:5> col:5 used min 'int'
|   | `-VarDecl 0x15200e118 <line:4:2, line:6:11> col:5 used sec 'int' cinit
|   |   `-IntegerLiteral 0x15200e180 <col:11> 'int' 0
|   |-DeclStmt 0x15200e258 <line:7:2, col:13>
|   | `-VarDecl 0x15200e1f0 <col:2, col:11> col:11 used cp 'char *'
|   |-IfStmt 0x152026660 <line:10:2, line:11:10>
|   | |-BinaryOperator 0x15200e3e0 <line:10:6, col:29> 'int' '&&'
|   | | |-BinaryOperator 0x15200e308 <col:6, col:14> 'int' '!='
|   | | | |-ImplicitCastExpr 0x15200e2f0 <col:6, col:7> 'int' <IntegralCast>
|   | | | | `-ImplicitCastExpr 0x15200e2d8 <col:6, col:7> 'char' <LValueToRValue>
|   | | | |   `-UnaryOperator 0x15200e2a8 <col:6, col:7> 'char' lvalue prefix '*' cannot overflow
|   | | | |     `-ImplicitCastExpr 0x15200e290 <col:7> 'char *' <LValueToRValue>
|   | | | |       `-DeclRefExpr 0x15200e270 <col:7> 'char *' lvalue ParmVar 0x15200dcd8 'str' 'char *'
|   | | | `-CharacterLiteral 0x15200e2c0 <col:14> 'int' 43
|   | | `-BinaryOperator 0x15200e3c0 <col:21, col:29> 'int' '!='
|   | |   |-ImplicitCastExpr 0x15200e3a8 <col:21, col:22> 'int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x15200e390 <col:21, col:22> 'char' <LValueToRValue>
|   | |   |   `-UnaryOperator 0x15200e360 <col:21, col:22> 'char' lvalue prefix '*' cannot overflow
|   | |   |     `-ImplicitCastExpr 0x15200e348 <col:22> 'char *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x15200e328 <col:22> 'char *' lvalue ParmVar 0x15200dcd8 'str' 'char *'
|   | |   `-CharacterLiteral 0x15200e378 <col:29> 'int' 45
|   | `-ReturnStmt 0x152026650 <line:11:3, col:10>
|   |   `-RecoveryExpr 0x152026630 <col:10> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x152026980 <line:14:2, col:30> 'int' '='
|   | |-DeclRefExpr 0x1520266a0 <col:2> 'int' lvalue Var 0x15200e018 'hr' 'int'
|   | `-CallExpr 0x152026948 <col:7, col:30> 'int'
|   |   |-ImplicitCastExpr 0x152026930 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1520267d0 <col:7> 'int ()' Function 0x152026718 'strtoi' 'int ()'
|   |   |-BinaryOperator 0x152026848 <col:14, col:20> 'char *' '+'
|   |   | |-ImplicitCastExpr 0x152026830 <col:14> 'char *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1520267f0 <col:14> 'char *' lvalue ParmVar 0x15200dcd8 'str' 'char *'
|   |   | `-IntegerLiteral 0x152026810 <col:20> 'int' 1
|   |   |-UnaryOperator 0x1520268c0 <col:23, col:24> 'char **' prefix '&' cannot overflow
|   |   | `-DeclRefExpr 0x152026868 <col:24> 'char *' lvalue Var 0x15200e1f0 'cp' 'char *'
|   |   `-IntegerLiteral 0x1520268d8 <col:28> 'int' 10
|   |-IfStmt 0x152026a98 <line:15:2, line:16:10>
|   | |-BinaryOperator 0x152026a30 <line:15:6, col:15> 'int' contains-errors '=='
|   | | |-RecoveryExpr 0x1520269f0 <col:6> '<dependent type>' contains-errors lvalue
|   | | `-RecoveryExpr 0x152026a10 <col:15> '<dependent type>' contains-errors lvalue
|   | `-ReturnStmt 0x152026a88 <line:16:3, col:10>
|   |   `-RecoveryExpr 0x152026a68 <col:10> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x151924048 <line:19:2, line:41:9> has_else
|   | |-BinaryOperator 0x152026b50 <line:19:6, col:13> 'int' '=='
|   | | |-ImplicitCastExpr 0x152026b38 <col:6, col:7> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x152026b20 <col:6, col:7> 'char' <LValueToRValue>
|   | | |   `-UnaryOperator 0x152026af0 <col:6, col:7> 'char' lvalue prefix '*' cannot overflow
|   | | |     `-ImplicitCastExpr 0x152026ad8 <col:7> 'char *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x152026ab8 <col:7> 'char *' lvalue Var 0x15200e1f0 'cp' 'char *'
|   | | `-CharacterLiteral 0x152026b08 <col:13> 'int' 58
|   | |-CompoundStmt 0x1520271d8 <line:20:2, line:32:2>
|   | | |-BinaryOperator 0x152026cf0 <line:22:3, col:31> 'int' '='
|   | | | |-DeclRefExpr 0x152026b90 <col:3> 'int' lvalue Var 0x15200e098 'min' 'int'
|   | | | `-CallExpr 0x152026cb8 <col:9, col:31> 'int'
|   | | |   |-ImplicitCastExpr 0x152026ca0 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x152026bb0 <col:9> 'int ()' Function 0x152026718 'strtoi' 'int ()'
|   | | |   |-BinaryOperator 0x152026c28 <col:16, col:21> 'char *' '+'
|   | | |   | |-ImplicitCastExpr 0x152026c10 <col:16> 'char *' <LValueToRValue>
|   | | |   | | `-DeclRefExpr 0x152026bd0 <col:16> 'char *' lvalue Var 0x15200e1f0 'cp' 'char *'
|   | | |   | `-IntegerLiteral 0x152026bf0 <col:21> 'int' 1
|   | | |   |-UnaryOperator 0x152026c68 <col:24, col:25> 'char **' prefix '&' cannot overflow
|   | | |   | `-DeclRefExpr 0x152026c48 <col:25> 'char *' lvalue Var 0x15200e1f0 'cp' 'char *'
|   | | |   `-IntegerLiteral 0x152026c80 <col:29> 'int' 10
|   | | |-IfStmt 0x152026e08 <line:23:3, line:24:11>
|   | | | |-BinaryOperator 0x152026da0 <line:23:7, col:16> 'int' contains-errors '=='
|   | | | | |-RecoveryExpr 0x152026d60 <col:7> '<dependent type>' contains-errors lvalue
|   | | | | `-RecoveryExpr 0x152026d80 <col:16> '<dependent type>' contains-errors lvalue
|   | | | `-ReturnStmt 0x152026df8 <line:24:4, col:11>
|   | | |   `-RecoveryExpr 0x152026dd8 <col:11> '<dependent type>' contains-errors lvalue
|   | | `-IfStmt 0x1520271b8 <line:25:3, line:31:3>
|   | |   |-BinaryOperator 0x152026ec0 <line:25:7, col:14> 'int' '=='
|   | |   | |-ImplicitCastExpr 0x152026ea8 <col:7, col:8> 'int' <IntegralCast>
|   | |   | | `-ImplicitCastExpr 0x152026e90 <col:7, col:8> 'char' <LValueToRValue>
|   | |   | |   `-UnaryOperator 0x152026e60 <col:7, col:8> 'char' lvalue prefix '*' cannot overflow
|   | |   | |     `-ImplicitCastExpr 0x152026e48 <col:8> 'char *' <LValueToRValue>
|   | |   | |       `-DeclRefExpr 0x152026e28 <col:8> 'char *' lvalue Var 0x15200e1f0 'cp' 'char *'
|   | |   | `-CharacterLiteral 0x152026e78 <col:14> 'int' 58
|   | |   `-CompoundStmt 0x152027198 <line:26:3, line:31:3>
|   | |     |-BinaryOperator 0x152027060 <line:28:4, col:32> 'int' '='
|   | |     | |-DeclRefExpr 0x152026f00 <col:4> 'int' lvalue Var 0x15200e118 'sec' 'int'
|   | |     | `-CallExpr 0x152027028 <col:10, col:32> 'int'
|   | |     |   |-ImplicitCastExpr 0x152027010 <col:10> 'int (*)()' <FunctionToPointerDecay>
|   | |     |   | `-DeclRefExpr 0x152026f20 <col:10> 'int ()' Function 0x152026718 'strtoi' 'int ()'
|   | |     |   |-BinaryOperator 0x152026f98 <col:17, col:22> 'char *' '+'
|   | |     |   | |-ImplicitCastExpr 0x152026f80 <col:17> 'char *' <LValueToRValue>
|   | |     |   | | `-DeclRefExpr 0x152026f40 <col:17> 'char *' lvalue Var 0x15200e1f0 'cp' 'char *'
|   | |     |   | `-IntegerLiteral 0x152026f60 <col:22> 'int' 1
|   | |     |   |-UnaryOperator 0x152026fd8 <col:25, col:26> 'char **' prefix '&' cannot overflow
|   | |     |   | `-DeclRefExpr 0x152026fb8 <col:26> 'char *' lvalue Var 0x15200e1f0 'cp' 'char *'
|   | |     |   `-IntegerLiteral 0x152026ff0 <col:30> 'int' 10
|   | |     `-IfStmt 0x152027178 <line:29:4, line:30:12>
|   | |       |-BinaryOperator 0x152027110 <line:29:8, col:17> 'int' contains-errors '=='
|   | |       | |-RecoveryExpr 0x1520270d0 <col:8> '<dependent type>' contains-errors lvalue
|   | |       | `-RecoveryExpr 0x1520270f0 <col:17> '<dependent type>' contains-errors lvalue
|   | |       `-ReturnStmt 0x152027168 <line:30:5, col:12>
|   | |         `-RecoveryExpr 0x152027148 <col:12> '<dependent type>' contains-errors lvalue
|   | `-IfStmt 0x151924018 <line:34:7, line:41:9> has_else
|   |   |-BinaryOperator 0x151923e08 <line:34:11, col:40> 'int' '&&'
|   |   | |-BinaryOperator 0x152027298 <col:11, col:18> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x152027280 <col:11, col:12> 'int' <IntegralCast>
|   |   | | | `-ImplicitCastExpr 0x152027268 <col:11, col:12> 'char' <LValueToRValue>
|   |   | | |   `-UnaryOperator 0x152027238 <col:11, col:12> 'char' lvalue prefix '*' cannot overflow
|   |   | | |     `-ImplicitCastExpr 0x152027220 <col:12> 'char *' <LValueToRValue>
|   |   | | |       `-DeclRefExpr 0x152027200 <col:12> 'char *' lvalue Var 0x15200e1f0 'cp' 'char *'
|   |   | | `-CharacterLiteral 0x152027250 <col:18> 'int' 0
|   |   | `-BinaryOperator 0x151923de8 <col:26, col:40> 'int' '>'
|   |   |   |-CallExpr 0x151923d58 <col:26, col:36> 'unsigned long'
|   |   |   | |-ImplicitCastExpr 0x151923d40 <col:26> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x151923cb0 <col:26> 'unsigned long (const char *)' Function 0x151923b40 'strlen' 'unsigned long (const char *)'
|   |   |   | `-ImplicitCastExpr 0x151923d98 <col:33> 'const char *' <NoOp>
|   |   |   |   `-ImplicitCastExpr 0x151923d80 <col:33> 'char *' <LValueToRValue>
|   |   |   |     `-DeclRefExpr 0x151923cd0 <col:33> 'char *' lvalue ParmVar 0x15200dcd8 'str' 'char *'
|   |   |   `-ImplicitCastExpr 0x151923dd0 <col:40> 'unsigned long' <IntegralCast>
|   |   |     `-IntegerLiteral 0x151923db0 <col:40> 'int' 3
|   |   |-CompoundStmt 0x151923f98 <line:35:2, line:39:2>
|   |   | |-BinaryOperator 0x151923ec0 <line:36:3, col:14> 'int' '='
|   |   | | |-DeclRefExpr 0x151923e28 <col:3> 'int' lvalue Var 0x15200e098 'min' 'int'
|   |   | | `-BinaryOperator 0x151923ea0 <col:9, col:14> 'int' '%'
|   |   | |   |-ImplicitCastExpr 0x151923e88 <col:9> 'int' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x151923e48 <col:9> 'int' lvalue Var 0x15200e018 'hr' 'int'
|   |   | |   `-IntegerLiteral 0x151923e68 <col:14> 'int' 100
|   |   | `-BinaryOperator 0x151923f78 <line:37:3, col:13> 'int' '='
|   |   |   |-DeclRefExpr 0x151923ee0 <col:3> 'int' lvalue Var 0x15200e018 'hr' 'int'
|   |   |   `-BinaryOperator 0x151923f58 <col:8, col:13> 'int' '/'
|   |   |     |-ImplicitCastExpr 0x151923f40 <col:8> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x151923f00 <col:8> 'int' lvalue Var 0x15200e018 'hr' 'int'
|   |   |     `-IntegerLiteral 0x151923f20 <col:13> 'int' 100
|   |   `-BinaryOperator 0x151923ff8 <line:41:3, col:9> 'int' '='
|   |     |-DeclRefExpr 0x151923fb8 <col:3> 'int' lvalue Var 0x15200e098 'min' 'int'
|   |     `-IntegerLiteral 0x151923fd8 <col:9> 'int' 0
|   |-IfStmt 0x151924280 <line:44:2, line:45:10>
|   | |-BinaryOperator 0x151924218 <line:44:6, col:21> 'int' contains-errors '||'
|   | | |-BinaryOperator 0x1519241b8 <col:6, col:11> 'int' '<'
|   | | | |-ImplicitCastExpr 0x1519241a0 <col:6> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x151924078 <col:6> 'int' lvalue Var 0x15200e018 'hr' 'int'
|   | | | `-IntegerLiteral 0x151924098 <col:11> 'int' 0
|   | | `-BinaryOperator 0x1519241f8 <col:16, col:21> 'int' contains-errors '>'
|   | |   |-DeclRefExpr 0x1519240f0 <col:16> 'int' lvalue Var 0x15200e018 'hr' 'int'
|   | |   `-RecoveryExpr 0x1519241d8 <col:21> '<dependent type>' contains-errors lvalue
|   | `-ReturnStmt 0x151924270 <line:45:3, col:10>
|   |   `-RecoveryExpr 0x151924250 <col:10> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x1519244a8 <line:46:2, line:47:10>
|   | |-BinaryOperator 0x151924440 <line:46:6, col:24> 'int' contains-errors '||'
|   | | |-BinaryOperator 0x1519243e0 <col:6, col:12> 'int' '<'
|   | | | |-ImplicitCastExpr 0x1519243c8 <col:6> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x1519242a0 <col:6> 'int' lvalue Var 0x15200e098 'min' 'int'
|   | | | `-IntegerLiteral 0x1519242c0 <col:12> 'int' 0
|   | | `-BinaryOperator 0x151924420 <col:17, col:24> 'int' contains-errors '>='
|   | |   |-DeclRefExpr 0x151924318 <col:17> 'int' lvalue Var 0x15200e098 'min' 'int'
|   | |   `-RecoveryExpr 0x151924400 <col:24> '<dependent type>' contains-errors lvalue
|   | `-ReturnStmt 0x151924498 <line:47:3, col:10>
|   |   `-RecoveryExpr 0x151924478 <col:10> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x151924748 <line:52:2, line:53:9>
|   | |-BinaryOperator 0x151924698 <line:52:6, col:14> 'int' '=='
|   | | |-ImplicitCastExpr 0x151924680 <col:6, col:7> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x151924668 <col:6, col:7> 'char' <LValueToRValue>
|   | | |   `-UnaryOperator 0x151924638 <col:6, col:7> 'char' lvalue prefix '*' cannot overflow
|   | | |     `-ImplicitCastExpr 0x151924620 <col:7> 'char *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x151924600 <col:7> 'char *' lvalue ParmVar 0x15200dcd8 'str' 'char *'
|   | | `-CharacterLiteral 0x151924650 <col:14> 'int' 45
|   | `-BinaryOperator 0x151924728 <line:53:3, col:9> 'int' '='
|   |   |-DeclRefExpr 0x1519246b8 <col:3> 'int' lvalue Var 0x15200df80 'tz' 'int'
|   |   `-UnaryOperator 0x151924710 <col:8, col:9> 'int' prefix '-'
|   |     `-ImplicitCastExpr 0x1519246f8 <col:9> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1519246d8 <col:9> 'int' lvalue Var 0x15200df80 'tz' 'int'
|   |-BinaryOperator 0x151924808 <line:55:2, col:10> 'int' '='
|   | |-UnaryOperator 0x1519247a0 <col:2, col:3> 'int' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x151924788 <col:3> 'int *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x151924768 <col:3> 'int *' lvalue ParmVar 0x15200dd88 'tzp' 'int *'
|   | `-UnaryOperator 0x1519247f0 <col:9, col:10> 'int' prefix '-'
|   |   `-ImplicitCastExpr 0x1519247d8 <col:10> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1519247b8 <col:10> 'int' lvalue Var 0x15200df80 'tz' 'int'
|   `-ReturnStmt 0x151924900 <line:60:2, col:9>
|     `-IntegerLiteral 0x1519248e0 <col:9> 'int' 0
`-FunctionDecl 0x151923b40 <line:34:26> col:26 implicit used strlen 'unsigned long (const char *)' extern
  |-ParmVarDecl 0x151923c40 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x151923be8 <<invalid sloc>> Implicit 902
