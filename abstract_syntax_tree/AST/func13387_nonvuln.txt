TranslationUnitDecl 0x156055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1560564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x156055bd0 '__int128'
|-TypedefDecl 0x156056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x156055bf0 'unsigned __int128'
|-TypedefDecl 0x15680be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x15680bc00 'struct __NSConstantString_tag'
|   `-Record 0x156056580 '__NSConstantString_tag'
|-TypedefDecl 0x15680be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x156055d90 '__SVInt8_t'
|-TypedefDecl 0x15680bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x156055db0 '__SVInt16_t'
|-TypedefDecl 0x15680bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x156055dd0 '__SVInt32_t'
|-TypedefDecl 0x15680bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x156055df0 '__SVInt64_t'
|-TypedefDecl 0x15680c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x156055e10 '__SVUint8_t'
|-TypedefDecl 0x15680c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x156055e30 '__SVUint16_t'
|-TypedefDecl 0x15680c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x156055e50 '__SVUint32_t'
|-TypedefDecl 0x15680c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x156055e70 '__SVUint64_t'
|-TypedefDecl 0x15680c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x156055e90 '__SVFloat16_t'
|-TypedefDecl 0x15680c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x156055eb0 '__SVFloat32_t'
|-TypedefDecl 0x15680c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x156055ed0 '__SVFloat64_t'
|-TypedefDecl 0x15680c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x156055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x15680c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x156055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x15680c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x156055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x15680c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x156055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x15680c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x156055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x15680c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x156055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x15680c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x156055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x15680c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x156055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x15680c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x156055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x15680c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x156056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x15680c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x156056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x15680c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x156056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x15680c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x156056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x15680c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x156056090 '__clang_svint8x3_t'
|-TypedefDecl 0x15680c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1560560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x15680c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1560560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x15680c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1560560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x15680c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x156056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x15680ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x156056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x15680cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x156056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x15680cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x156056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x15680cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x156056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x15680d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1560561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x15680d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1560561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x15680d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1560561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x15680d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x156056210 '__clang_svint8x4_t'
|-TypedefDecl 0x15680d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x156056230 '__clang_svint16x4_t'
|-TypedefDecl 0x15680d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x156056250 '__clang_svint32x4_t'
|-TypedefDecl 0x15680d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x156056270 '__clang_svint64x4_t'
|-TypedefDecl 0x15680d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x156056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x15680d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1560562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x15680d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1560562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x15680d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1560562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x15680d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x156056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x15680d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x156056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x15680d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x156056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x15680d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x156056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x15680da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x156056390 '__SVBool_t'
|-TypedefDecl 0x15680da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1560563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x15680dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1560563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x15680db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1560563f0 '__SVCount_t'
|-TypedefDecl 0x15680dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x15680dbb0 'char *'
|   `-BuiltinType 0x1560556b0 'char'
|-TypedefDecl 0x15680dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x15680dbb0 'char *'
|   `-BuiltinType 0x1560556b0 'char'
`-FunctionDecl 0x1568266d8 <dataset_diviso_filec/func13387_nonvuln.c:1:1, line:43:1> line:1:12 input_handle_abs_event 'int (struct input_dev *, unsigned int, int *)' static
  |-ParmVarDecl 0x15680e248 <col:35, col:53> col:53 used dev 'struct input_dev *'
  |-ParmVarDecl 0x15680e2c8 <line:2:7, col:20> col:20 used code 'unsigned int'
  |-ParmVarDecl 0x15680e378 <col:26, col:31> col:31 used pval 'int *'
  `-CompoundStmt 0x1568299a8 <line:3:1, line:43:1>
    |-DeclStmt 0x156826a28 <line:4:2, col:31>
    | |-RecordDecl 0x1568267e0 <col:2, col:9> col:9 struct input_mt
    | `-VarDecl 0x156826948 <col:2, col:29> col:19 used mt 'struct input_mt *' cinit
    |   `-RecoveryExpr 0x1568269e8 <col:24, col:29> '<dependent type>' contains-errors lvalue
    |     `-DeclRefExpr 0x1568269b0 <col:24> 'struct input_dev *' lvalue ParmVar 0x15680e248 'dev' 'struct input_dev *'
    |-DeclStmt 0x156826ad8 <line:6:2, col:11>
    | `-VarDecl 0x156826a70 <col:2, col:7> col:7 used pold 'int *'
    |-IfStmt 0x156826ed0 <line:8:2, line:14:2>
    | |-BinaryOperator 0x156826b68 <line:8:6, col:14> 'int' contains-errors '=='
    | | |-DeclRefExpr 0x156826af0 <col:6> 'unsigned int' lvalue ParmVar 0x15680e2c8 'code' 'unsigned int'
    | | `-RecoveryExpr 0x156826b48 <col:14> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x156826eb0 <col:27, line:14:2>
    |   |-IfStmt 0x156826e48 <line:10:3, line:11:16>
    |   | |-BinaryOperator 0x156826d58 <line:10:7, col:39> 'int' contains-errors '&&'
    |   | | |-BinaryOperator 0x156826c68 <col:7, col:22> 'int' contains-errors '&&'
    |   | | | |-ImplicitCastExpr 0x156826c50 <col:7> 'struct input_mt *' contains-errors <LValueToRValue>
    |   | | | | `-DeclRefExpr 0x156826b88 <col:7> 'struct input_mt *' contains-errors lvalue Var 0x156826948 'mt' 'struct input_mt *'
    |   | | | `-BinaryOperator 0x156826c30 <col:13, col:22> 'int' '>='
    |   | | |   |-ImplicitCastExpr 0x156826c18 <col:13, col:14> 'int' <LValueToRValue>
    |   | | |   | `-UnaryOperator 0x156826be0 <col:13, col:14> 'int' lvalue prefix '*' cannot overflow
    |   | | |   |   `-ImplicitCastExpr 0x156826bc8 <col:14> 'int *' <LValueToRValue>
    |   | | |   |     `-DeclRefExpr 0x156826ba8 <col:14> 'int *' lvalue ParmVar 0x15680e378 'pval' 'int *'
    |   | | |   `-IntegerLiteral 0x156826bf8 <col:22> 'int' 0
    |   | | `-BinaryOperator 0x156826d38 <col:27, col:39> 'int' contains-errors '<'
    |   | |   |-UnaryOperator 0x156826cc0 <col:27, col:28> 'int' lvalue prefix '*' cannot overflow
    |   | |   | `-ImplicitCastExpr 0x156826ca8 <col:28> 'int *' <LValueToRValue>
    |   | |   |   `-DeclRefExpr 0x156826c88 <col:28> 'int *' lvalue ParmVar 0x15680e378 'pval' 'int *'
    |   | |   `-RecoveryExpr 0x156826d10 <col:35, col:39> '<dependent type>' contains-errors lvalue
    |   | |     `-DeclRefExpr 0x156826cd8 <col:35> 'struct input_mt *' contains-errors lvalue Var 0x156826948 'mt' 'struct input_mt *'
    |   | `-BinaryOperator 0x156826e28 <line:11:4, col:16> '<dependent type>' contains-errors '='
    |   |   |-RecoveryExpr 0x156826db0 <col:4, col:8> '<dependent type>' contains-errors lvalue
    |   |   | `-DeclRefExpr 0x156826d78 <col:4> 'struct input_mt *' contains-errors lvalue Var 0x156826948 'mt' 'struct input_mt *'
    |   |   `-UnaryOperator 0x156826e10 <col:15, col:16> 'int' lvalue prefix '*' cannot overflow
    |   |     `-ImplicitCastExpr 0x156826df8 <col:16> 'int *' <LValueToRValue>
    |   |       `-DeclRefExpr 0x156826dd8 <col:16> 'int *' lvalue ParmVar 0x15680e378 'pval' 'int *'
    |   `-ReturnStmt 0x156826ea0 <line:13:3, col:10>
    |     `-RecoveryExpr 0x156826e80 <col:10> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x156828e88 <line:18:2, line:25:2> has_else
    | |-UnaryOperator 0x156827148 <line:18:6, col:7> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x156827130 <col:7> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x156827110 <col:7> '<dependent type>' contains-errors lvalue
    | |-CompoundStmt 0x1568272d0 <col:20, line:20:2>
    | | `-BinaryOperator 0x1568272b0 <line:19:3, col:30> 'int *' contains-errors '='
    | |   |-DeclRefExpr 0x156827160 <col:3> 'int *' lvalue Var 0x156826a70 'pold' 'int *'
    | |   `-UnaryOperator 0x156827298 <col:10, col:30> '<dependent type>' contains-errors prefix '&' cannot overflow
    | |     `-CXXDependentScopeMemberExpr 0x156827250 <col:11, col:30> '<dependent type>' contains-errors lvalue .value
    | |       `-ArraySubscriptExpr 0x156827230 <col:11, col:28> '<dependent type>' contains-errors lvalue
    | |         |-ImplicitCastExpr 0x156827200 <col:11, col:16> '<dependent type>' contains-errors <LValueToRValue>
    | |         | `-RecoveryExpr 0x1568271b8 <col:11, col:16> '<dependent type>' contains-errors lvalue
    | |         |   `-DeclRefExpr 0x156827180 <col:11> 'struct input_dev *' lvalue ParmVar 0x15680e248 'dev' 'struct input_dev *'
    | |         `-ImplicitCastExpr 0x156827218 <col:24> 'unsigned int' <LValueToRValue>
    | |           `-DeclRefExpr 0x1568271e0 <col:24> 'unsigned int' lvalue ParmVar 0x15680e2c8 'code' 'unsigned int'
    | `-IfStmt 0x156828e58 <line:20:9, line:25:2> has_else
    |   |-ImplicitCastExpr 0x156827308 <line:20:13> 'struct input_mt *' contains-errors <LValueToRValue>
    |   | `-DeclRefExpr 0x1568272e8 <col:13> 'struct input_mt *' contains-errors lvalue Var 0x156826948 'mt' 'struct input_mt *'
    |   |-CompoundStmt 0x156827588 <col:17, line:22:2>
    |   `-CompoundStmt 0x156828e40 <col:9, line:25:2>
    |     `-BinaryOperator 0x156828e20 <line:24:3, col:10> 'int *' contains-errors '='
    |       |-DeclRefExpr 0x156827598 <col:3> 'int *' lvalue Var 0x156826a70 'pold' 'int *'
    |       `-RecoveryExpr 0x156828e00 <col:10> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x1568294a8 <line:27:2, line:34:2>
    | |-ImplicitCastExpr 0x156828ed8 <line:27:6> 'int *' <LValueToRValue>
    | | `-DeclRefExpr 0x156828eb8 <col:6> 'int *' lvalue Var 0x156826a70 'pold' 'int *'
    | `-CompoundStmt 0x156829480 <col:12, line:34:2>
    |   |-BinaryOperator 0x156829230 <line:28:3, line:29:30> 'int' contains-errors '='
    |   | |-UnaryOperator 0x156828f28 <line:28:3, col:4> 'int' lvalue prefix '*' cannot overflow
    |   | | `-ImplicitCastExpr 0x156828f10 <col:4> 'int *' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x156828ef0 <col:4> 'int *' lvalue ParmVar 0x15680e378 'pval' 'int *'
    |   | `-CallExpr 0x1568291f8 <col:11, line:29:30> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x156829020 <line:28:11> 'int ()' Function 0x156828f68 'input_defuzz_abs_event' 'int ()'
    |   |   |-UnaryOperator 0x156829078 <col:34, col:35> 'int' lvalue prefix '*' cannot overflow
    |   |   | `-ImplicitCastExpr 0x156829060 <col:35> 'int *' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x156829040 <col:35> 'int *' lvalue ParmVar 0x15680e378 'pval' 'int *'
    |   |   |-UnaryOperator 0x1568290c8 <col:41, col:42> 'int' lvalue prefix '*' cannot overflow
    |   |   | `-ImplicitCastExpr 0x1568290b0 <col:42> 'int *' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x156829090 <col:42> 'int *' lvalue Var 0x156826a70 'pold' 'int *'
    |   |   `-CXXDependentScopeMemberExpr 0x1568291b0 <line:29:7, col:26> '<dependent type>' contains-errors lvalue .fuzz
    |   |     `-ArraySubscriptExpr 0x156829190 <col:7, col:24> '<dependent type>' contains-errors lvalue
    |   |       |-ImplicitCastExpr 0x156829160 <col:7, col:12> '<dependent type>' contains-errors <LValueToRValue>
    |   |       | `-RecoveryExpr 0x156829118 <col:7, col:12> '<dependent type>' contains-errors lvalue
    |   |       |   `-DeclRefExpr 0x1568290e0 <col:7> 'struct input_dev *' lvalue ParmVar 0x15680e248 'dev' 'struct input_dev *'
    |   |       `-ImplicitCastExpr 0x156829178 <col:20> 'unsigned int' <LValueToRValue>
    |   |         `-DeclRefExpr 0x156829140 <col:20> 'unsigned int' lvalue ParmVar 0x15680e2c8 'code' 'unsigned int'
    |   |-IfStmt 0x156829388 <line:30:3, line:31:11>
    |   | |-BinaryOperator 0x156829320 <line:30:7, col:17> 'int' '=='
    |   | | |-ImplicitCastExpr 0x1568292f0 <col:7, col:8> 'int' <LValueToRValue>
    |   | | | `-UnaryOperator 0x156829288 <col:7, col:8> 'int' lvalue prefix '*' cannot overflow
    |   | | |   `-ImplicitCastExpr 0x156829270 <col:8> 'int *' <LValueToRValue>
    |   | | |     `-DeclRefExpr 0x156829250 <col:8> 'int *' lvalue Var 0x156826a70 'pold' 'int *'
    |   | | `-ImplicitCastExpr 0x156829308 <col:16, col:17> 'int' <LValueToRValue>
    |   | |   `-UnaryOperator 0x1568292d8 <col:16, col:17> 'int' lvalue prefix '*' cannot overflow
    |   | |     `-ImplicitCastExpr 0x1568292c0 <col:17> 'int *' <LValueToRValue>
    |   | |       `-DeclRefExpr 0x1568292a0 <col:17> 'int *' lvalue ParmVar 0x15680e378 'pval' 'int *'
    |   | `-ReturnStmt 0x156829378 <line:31:4, col:11>
    |   |   `-RecoveryExpr 0x156829358 <col:11> '<dependent type>' contains-errors lvalue
    |   `-BinaryOperator 0x156829460 <line:33:3, col:12> 'int' '='
    |     |-UnaryOperator 0x1568293e0 <col:3, col:4> 'int' lvalue prefix '*' cannot overflow
    |     | `-ImplicitCastExpr 0x1568293c8 <col:4> 'int *' <LValueToRValue>
    |     |   `-DeclRefExpr 0x1568293a8 <col:4> 'int *' lvalue Var 0x156826a70 'pold' 'int *'
    |     `-ImplicitCastExpr 0x156829448 <col:11, col:12> 'int' <LValueToRValue>
    |       `-UnaryOperator 0x156829430 <col:11, col:12> 'int' lvalue prefix '*' cannot overflow
    |         `-ImplicitCastExpr 0x156829418 <col:12> 'int *' <LValueToRValue>
    |           `-DeclRefExpr 0x1568293f8 <col:12> 'int *' lvalue ParmVar 0x15680e378 'pval' 'int *'
    `-IfStmt 0x156829988 <line:37:2, line:40:2>
      |-BinaryOperator 0x1568297d8 <line:37:6, col:73> 'int' contains-errors '&&'
      | |-BinaryOperator 0x156829748 <col:6, col:21> 'int' contains-errors '&&'
      | | |-RecoveryExpr 0x156829728 <col:6> '<dependent type>' contains-errors lvalue
      | | `-DeclRefExpr 0x1568294e0 <col:21> 'struct input_mt *' contains-errors lvalue Var 0x156826948 'mt' 'struct input_mt *'
      | `-BinaryOperator 0x1568297b8 <col:27, col:73> 'int' contains-errors '!='
      |   |-RecoveryExpr 0x156829558 <col:27, col:31> '<dependent type>' contains-errors lvalue
      |   | `-DeclRefExpr 0x156829520 <col:27> 'struct input_mt *' contains-errors lvalue Var 0x156826948 'mt' 'struct input_mt *'
      |   `-CallExpr 0x156829788 <col:39, col:73> '<dependent type>' contains-errors
      |     |-DeclRefExpr 0x156829660 <col:39> 'int ()' Function 0x1568295a8 'input_abs_get_val' 'int ()'
      |     |-DeclRefExpr 0x156829680 <col:57> 'struct input_dev *' lvalue ParmVar 0x15680e248 'dev' 'struct input_dev *'
      |     `-RecoveryExpr 0x156829768 <col:62> '<dependent type>' contains-errors lvalue
      `-CompoundStmt 0x156829978 <col:76, line:40:2>
