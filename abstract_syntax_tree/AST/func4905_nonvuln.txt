TranslationUnitDecl 0x121055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1210564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x121055bd0 '__int128'
|-TypedefDecl 0x121056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x121055bf0 'unsigned __int128'
|-TypedefDecl 0x12180be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12180bc00 'struct __NSConstantString_tag'
|   `-Record 0x121056580 '__NSConstantString_tag'
|-TypedefDecl 0x12180be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x121055d90 '__SVInt8_t'
|-TypedefDecl 0x12180bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x121055db0 '__SVInt16_t'
|-TypedefDecl 0x12180bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x121055dd0 '__SVInt32_t'
|-TypedefDecl 0x12180bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x121055df0 '__SVInt64_t'
|-TypedefDecl 0x12180c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x121055e10 '__SVUint8_t'
|-TypedefDecl 0x12180c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x121055e30 '__SVUint16_t'
|-TypedefDecl 0x12180c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x121055e50 '__SVUint32_t'
|-TypedefDecl 0x12180c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x121055e70 '__SVUint64_t'
|-TypedefDecl 0x12180c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x121055e90 '__SVFloat16_t'
|-TypedefDecl 0x12180c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x121055eb0 '__SVFloat32_t'
|-TypedefDecl 0x12180c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x121055ed0 '__SVFloat64_t'
|-TypedefDecl 0x12180c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x121055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12180c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x121055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12180c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x121055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12180c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x121055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12180c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x121055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12180c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x121055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12180c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x121055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12180c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x121055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12180c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x121055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12180c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x121056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12180c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x121056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12180c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x121056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12180c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x121056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12180c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x121056090 '__clang_svint8x3_t'
|-TypedefDecl 0x12180c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1210560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12180c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1210560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12180c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1210560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12180c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x121056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12180ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x121056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12180cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x121056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12180cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x121056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12180cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x121056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12180d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1210561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12180d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1210561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12180d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1210561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12180d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x121056210 '__clang_svint8x4_t'
|-TypedefDecl 0x12180d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x121056230 '__clang_svint16x4_t'
|-TypedefDecl 0x12180d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x121056250 '__clang_svint32x4_t'
|-TypedefDecl 0x12180d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x121056270 '__clang_svint64x4_t'
|-TypedefDecl 0x12180d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x121056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12180d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1210562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12180d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1210562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12180d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1210562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12180d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x121056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12180d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x121056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12180d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x121056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12180d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x121056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12180da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x121056390 '__SVBool_t'
|-TypedefDecl 0x12180da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1210563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12180dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1210563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12180db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1210563f0 '__SVCount_t'
|-TypedefDecl 0x12180dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12180dbb0 'char *'
|   `-BuiltinType 0x1210556b0 'char'
|-TypedefDecl 0x12180dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12180dbb0 'char *'
|   `-BuiltinType 0x1210556b0 'char'
|-FunctionDecl 0x12180de88 <dataset_diviso_filec/func4905_nonvuln.c:1:1, line:70:1> line:1:16 invalid parse_debug_level 'int *(char *, int *)'
| |-ParmVarDecl 0x12180dcf0 <col:34, col:40> col:40 used arg 'char *'
| |-ParmVarDecl 0x12180dda8 <col:45, col:62> col:62 referenced invalid section 'int *'
| `-CompoundStmt 0x12182b0f0 <col:71, line:70:1>
|   |-IfStmt 0x12182a6e8 <line:38:5, line:52:5>
|   | |-BinaryOperator 0x121828430 <line:38:8, col:56> 'int' contains-errors '&&'
|   | | |-BinaryOperator 0x121828380 <col:8, col:18> 'int' contains-errors '=='
|   | | | |-RecoveryExpr 0x12180df58 <col:8> '<dependent type>' contains-errors lvalue
|   | | | `-UnaryOperator 0x121828368 <col:17, col:18> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | | |   `-RecoveryExpr 0x121828348 <col:18> '<dependent type>' contains-errors lvalue
|   | | `-CallExpr 0x1218283d0 <col:41, col:56> 'char *'
|   | |   |-ImplicitCastExpr 0x1218283b8 <col:41> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x121828210 <col:41> 'char *(const char *, int)' Function 0x121828030 'strchr' 'char *(const char *, int)'
|   | |   |-ImplicitCastExpr 0x121828418 <col:48> 'const char *' <NoOp>
|   | |   | `-ImplicitCastExpr 0x121828400 <col:48> 'char *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x121828230 <col:48> 'char *' lvalue ParmVar 0x12180dcf0 'arg' 'char *'
|   | |   `-CharacterLiteral 0x121828250 <col:53> 'int' 46
|   | `-CompoundStmt 0x12182a6b8 <col:59, line:52:5>
|   |   |-BinaryOperator 0x121828860 <line:41:9, col:30> 'char *' '='
|   |   | |-DeclRefExpr 0x121828488 <col:9> 'char *' lvalue ParmVar 0x12180dcf0 'arg' 'char *'
|   |   | `-CallExpr 0x1218287e8 <col:13, col:30> 'char *'
|   |   |   |-ImplicitCastExpr 0x1218287d0 <col:13> 'char *(*)(char *, const char *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1218286d0 <col:13> 'char *(char *, const char *)' Function 0x1218284f0 'strtok' 'char *(char *, const char *)'
|   |   |   |-ImplicitCastExpr 0x121828818 <col:20> 'char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1218286f0 <col:20> 'char *' lvalue ParmVar 0x12180dcf0 'arg' 'char *'
|   |   |   `-ImplicitCastExpr 0x121828848 <col:25> 'const char *' <NoOp>
|   |   |     `-ImplicitCastExpr 0x121828830 <col:25> 'char *' <ArrayToPointerDecay>
|   |   |       `-StringLiteral 0x121828750 <col:25> 'char[4]' lvalue "STR"
|   |   |-ForStmt 0x121828ed0 <line:43:9, line:48:9>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-CXXDependentScopeMemberExpr 0x121828950 <line:43:28, col:32> '<dependent type>' contains-errors lvalue ->name
|   |   | | `-RecoveryExpr 0x121828930 <col:28> '<dependent type>' contains-errors lvalue
|   |   | |-UnaryOperator 0x1218289e8 <col:38, col:40> '<dependent type>' contains-errors prefix '++' cannot overflow
|   |   | | `-RecoveryExpr 0x1218289c8 <col:40> '<dependent type>' contains-errors lvalue
|   |   | `-CompoundStmt 0x121828eb8 <col:44, line:48:9>
|   |   |   `-IfStmt 0x121828e98 <line:44:13, line:47:13>
|   |   |     |-UnaryOperator 0x121828e00 <line:44:16, col:41> '<dependent type>' contains-errors prefix '!' cannot overflow
|   |   |     | `-CallExpr 0x121828dd0 <col:17, col:41> '<dependent type>' contains-errors
|   |   |     |   |-DeclRefExpr 0x121828c20 <col:17> 'int (const char *, const char *)' Function 0x121828a40 'strcasecmp' 'int (const char *, const char *)'
|   |   |     |   |-CXXDependentScopeMemberExpr 0x121828d58 <col:28, col:32> '<dependent type>' contains-errors lvalue ->name
|   |   |     |   | `-RecoveryExpr 0x121828d38 <col:28> '<dependent type>' contains-errors lvalue
|   |   |     |   `-DeclRefExpr 0x121828ca0 <col:38> 'char *' lvalue ParmVar 0x12180dcf0 'arg' 'char *'
|   |   |     `-CompoundStmt 0x121828e80 <col:44, line:47:13>
|   |   |       `-BreakStmt 0x121828e78 <line:46:17>
|   |   |-IfStmt 0x12182a500 <line:49:9, line:50:20>
|   |   | |-BinaryOperator 0x12182a448 <line:49:12, col:46> 'int' contains-errors '=='
|   |   | | |-CXXDependentScopeMemberExpr 0x12182a400 <col:12, col:31> '<dependent type>' contains-errors lvalue .log_facility
|   |   | | | `-RecoveryExpr 0x121828fc0 <col:12> '<dependent type>' contains-errors lvalue
|   |   | | `-UnaryOperator 0x121828f88 <col:45, col:46> 'int' prefix '-'
|   |   | |   `-IntegerLiteral 0x121828f68 <col:46> 'int' 1
|   |   | `-ReturnStmt 0x12182a4f0 <line:50:13, col:20>
|   |   |   `-ImplicitCastExpr 0x12182a4a0 <col:20> 'int *' <BitCast>
|   |   |     `-ImplicitCastExpr 0x12182a488 <col:20> 'char *' <ArrayToPointerDecay>
|   |   |       `-StringLiteral 0x12182a468 <col:20> 'char[4]' lvalue "STR"
|   |   `-BinaryOperator 0x12182a698 <line:51:9, col:31> 'char *' contains-errors '='
|   |     |-DeclRefExpr 0x12182a520 <col:9> 'char *' lvalue ParmVar 0x12180dcf0 'arg' 'char *'
|   |     `-CallExpr 0x12182a668 <col:13, col:31> '<dependent type>' contains-errors
|   |       |-DeclRefExpr 0x12182a540 <col:13> 'char *(char *, const char *)' Function 0x1218284f0 'strtok' 'char *(char *, const char *)'
|   |       |-RecoveryExpr 0x12182a618 <col:20> '<dependent type>' contains-errors lvalue
|   |       `-StringLiteral 0x12182a578 <col:26> 'char[4]' lvalue "STR"
|   |-IfStmt 0x12182ad90 <line:56:5, line:59:5>
|   | |-BinaryOperator 0x12182abf0 <line:56:8, col:52> 'int' '&&'
|   | | |-BinaryOperator 0x12182ab18 <col:8, col:39> 'int' '&&'
|   | | | |-BinaryOperator 0x12182aa40 <col:8, col:28> 'int' '&&'
|   | | | | |-ImplicitCastExpr 0x12182aa28 <col:8> 'char *' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x12182a708 <col:8> 'char *' lvalue ParmVar 0x12180dcf0 'arg' 'char *'
|   | | | | `-BinaryOperator 0x12182aa08 <col:15, col:28> 'int' '=='
|   | | | |   |-CallExpr 0x12182a978 <col:15, col:25> 'unsigned long'
|   | | | |   | |-ImplicitCastExpr 0x12182a960 <col:15> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   | | | |   | | `-DeclRefExpr 0x12182a8d8 <col:15> 'unsigned long (const char *)' Function 0x12182a768 'strlen' 'unsigned long (const char *)'
|   | | | |   | `-ImplicitCastExpr 0x12182a9b8 <col:22> 'const char *' <NoOp>
|   | | | |   |   `-ImplicitCastExpr 0x12182a9a0 <col:22> 'char *' <LValueToRValue>
|   | | | |   |     `-DeclRefExpr 0x12182a8f8 <col:22> 'char *' lvalue ParmVar 0x12180dcf0 'arg' 'char *'
|   | | | |   `-ImplicitCastExpr 0x12182a9f0 <col:28> 'unsigned long' <IntegralCast>
|   | | | |     `-IntegerLiteral 0x12182a9d0 <col:28> 'int' 1
|   | | | `-BinaryOperator 0x12182aaf8 <col:33, col:39> 'int' '>='
|   | | |   |-ImplicitCastExpr 0x12182aae0 <col:33, col:34> 'int' <IntegralCast>
|   | | |   | `-ImplicitCastExpr 0x12182aac8 <col:33, col:34> 'char' <LValueToRValue>
|   | | |   |   `-UnaryOperator 0x12182aa98 <col:33, col:34> 'char' lvalue prefix '*' cannot overflow
|   | | |   |     `-ImplicitCastExpr 0x12182aa80 <col:34> 'char *' <LValueToRValue>
|   | | |   |       `-DeclRefExpr 0x12182aa60 <col:34> 'char *' lvalue ParmVar 0x12180dcf0 'arg' 'char *'
|   | | |   `-CharacterLiteral 0x12182aab0 <col:39> 'int' 48
|   | | `-BinaryOperator 0x12182abd0 <col:46, col:52> 'int' '<='
|   | |   |-ImplicitCastExpr 0x12182abb8 <col:46, col:47> 'int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x12182aba0 <col:46, col:47> 'char' <LValueToRValue>
|   | |   |   `-UnaryOperator 0x12182ab70 <col:46, col:47> 'char' lvalue prefix '*' cannot overflow
|   | |   |     `-ImplicitCastExpr 0x12182ab58 <col:47> 'char *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x12182ab38 <col:47> 'char *' lvalue ParmVar 0x12180dcf0 'arg' 'char *'
|   | |   `-CharacterLiteral 0x12182ab88 <col:52> 'int' 55
|   | `-CompoundStmt 0x12182ad78 <col:57, line:59:5>
|   |   `-BinaryOperator 0x12182ad58 <line:57:9, col:33> '<dependent type>' contains-errors '='
|   |     |-CXXDependentScopeMemberExpr 0x12182ac58 <col:9, col:18> '<dependent type>' contains-errors lvalue ->log_level
|   |     | `-RecoveryExpr 0x12182ac30 <col:9> '<dependent type>' contains-errors lvalue
|   |     |   `-DeclRefExpr 0x12182ac10 <col:9> 'int *' lvalue ParmVar 0x12180dda8 'section' 'int *'
|   |     `-BinaryOperator 0x12182ad38 <col:28, col:33> 'int' '-'
|   |       |-ImplicitCastExpr 0x12182ad20 <col:28, col:29> 'int' <IntegralCast>
|   |       | `-ImplicitCastExpr 0x12182ad08 <col:28, col:29> 'char' <LValueToRValue>
|   |       |   `-UnaryOperator 0x12182acd8 <col:28, col:29> 'char' lvalue prefix '*' cannot overflow
|   |       |     `-ImplicitCastExpr 0x12182acc0 <col:29> 'char *' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x12182aca0 <col:29> 'char *' lvalue ParmVar 0x12180dcf0 'arg' 'char *'
|   |       `-CharacterLiteral 0x12182acf0 <col:33> 'int' 48
|   |-BinaryOperator 0x12182ae60 <line:60:5, col:24> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x12182adf8 <col:5, col:14> '<dependent type>' contains-errors lvalue ->log_level
|   | | `-RecoveryExpr 0x12182add0 <col:5> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x12182adb0 <col:5> 'int *' lvalue ParmVar 0x12180dda8 'section' 'int *'
|   | `-IntegerLiteral 0x12182ae40 <col:24> 'int' 8
|   `-IfStmt 0x12182b0d0 <line:67:5, line:68:16>
|     |-BinaryOperator 0x12182b050 <line:67:8, col:28> 'int' contains-errors '=='
|     | |-CXXDependentScopeMemberExpr 0x12182afe8 <col:8, col:17> '<dependent type>' contains-errors lvalue ->log_level
|     | | `-RecoveryExpr 0x12182afc8 <col:8> '<dependent type>' contains-errors lvalue
|     | `-IntegerLiteral 0x12182b030 <col:28> 'int' 8
|     `-ReturnStmt 0x12182b0c0 <line:68:9, col:16>
|       `-ImplicitCastExpr 0x12182b0a8 <col:16> 'int *' <BitCast>
|         `-ImplicitCastExpr 0x12182b090 <col:16> 'char *' <ArrayToPointerDecay>
|           `-StringLiteral 0x12182b070 <col:16> 'char[4]' lvalue "STR"
|-FunctionDecl 0x121828030 <line:38:41> col:41 implicit used strchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x121828130 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x121828198 <<invalid sloc>> <invalid sloc> 'int'
| `-BuiltinAttr 0x1218280d8 <<invalid sloc>> Implicit 893
|-FunctionDecl 0x1218284f0 <line:41:13> col:13 implicit used strtok 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x1218285f0 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x121828658 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x121828598 <<invalid sloc>> Implicit 899
|-FunctionDecl 0x121828a40 <line:44:17> col:17 implicit used strcasecmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x121828b40 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x121828ba8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x121828ae8 <<invalid sloc>> Implicit 957
`-FunctionDecl 0x12182a768 <line:56:15> col:15 implicit used strlen 'unsigned long (const char *)' extern
  |-ParmVarDecl 0x12182a868 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x12182a810 <<invalid sloc>> Implicit 902
