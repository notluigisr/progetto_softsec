TranslationUnitDecl 0x128824a08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1288258b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x128824fd0 '__int128'
|-TypedefDecl 0x128825928 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x128824ff0 'unsigned __int128'
|-TypedefDecl 0x11f90bc30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x11f90ba00 'struct __NSConstantString_tag'
|   `-Record 0x128825980 '__NSConstantString_tag'
|-TypedefDecl 0x11f90bc98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x128825190 '__SVInt8_t'
|-TypedefDecl 0x11f90bd00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x1288251b0 '__SVInt16_t'
|-TypedefDecl 0x11f90bd68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x1288251d0 '__SVInt32_t'
|-TypedefDecl 0x11f90bdd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x1288251f0 '__SVInt64_t'
|-TypedefDecl 0x11f90be38 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x128825210 '__SVUint8_t'
|-TypedefDecl 0x11f90bea0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x128825230 '__SVUint16_t'
|-TypedefDecl 0x11f90bf08 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x128825250 '__SVUint32_t'
|-TypedefDecl 0x11f90bf70 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x128825270 '__SVUint64_t'
|-TypedefDecl 0x11f90bfd8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x128825290 '__SVFloat16_t'
|-TypedefDecl 0x11f90c040 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x1288252b0 '__SVFloat32_t'
|-TypedefDecl 0x11f90c0a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x1288252d0 '__SVFloat64_t'
|-TypedefDecl 0x11f90c110 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x1288252f0 '__SVBfloat16_t'
|-TypedefDecl 0x11f90c178 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x128825310 '__clang_svint8x2_t'
|-TypedefDecl 0x11f90c1e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x128825330 '__clang_svint16x2_t'
|-TypedefDecl 0x11f90c248 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x128825350 '__clang_svint32x2_t'
|-TypedefDecl 0x11f90c2b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x128825370 '__clang_svint64x2_t'
|-TypedefDecl 0x11f90c318 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x128825390 '__clang_svuint8x2_t'
|-TypedefDecl 0x11f90c380 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x1288253b0 '__clang_svuint16x2_t'
|-TypedefDecl 0x11f90c3e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x1288253d0 '__clang_svuint32x2_t'
|-TypedefDecl 0x11f90c450 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x1288253f0 '__clang_svuint64x2_t'
|-TypedefDecl 0x11f90c4b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x128825410 '__clang_svfloat16x2_t'
|-TypedefDecl 0x11f90c520 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x128825430 '__clang_svfloat32x2_t'
|-TypedefDecl 0x11f90c588 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x128825450 '__clang_svfloat64x2_t'
|-TypedefDecl 0x11f90c5f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x128825470 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x11f90c658 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x128825490 '__clang_svint8x3_t'
|-TypedefDecl 0x11f90c6c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1288254b0 '__clang_svint16x3_t'
|-TypedefDecl 0x11f90c728 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1288254d0 '__clang_svint32x3_t'
|-TypedefDecl 0x11f90c790 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1288254f0 '__clang_svint64x3_t'
|-TypedefDecl 0x11f90c7f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x128825510 '__clang_svuint8x3_t'
|-TypedefDecl 0x11f90c860 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x128825530 '__clang_svuint16x3_t'
|-TypedefDecl 0x11f90c8c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x128825550 '__clang_svuint32x3_t'
|-TypedefDecl 0x11f90c930 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x128825570 '__clang_svuint64x3_t'
|-TypedefDecl 0x11f90c998 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x128825590 '__clang_svfloat16x3_t'
|-TypedefDecl 0x11f90ca00 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1288255b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x11f90ca68 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1288255d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x11f90cad0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1288255f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x11f90cb38 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x128825610 '__clang_svint8x4_t'
|-TypedefDecl 0x11f90cba0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x128825630 '__clang_svint16x4_t'
|-TypedefDecl 0x11f90cc08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x128825650 '__clang_svint32x4_t'
|-TypedefDecl 0x11f90cc70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x128825670 '__clang_svint64x4_t'
|-TypedefDecl 0x11f90ccd8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x128825690 '__clang_svuint8x4_t'
|-TypedefDecl 0x11f90cd40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1288256b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x11f90cda8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1288256d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x11f90ce10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1288256f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x11f90ce78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x128825710 '__clang_svfloat16x4_t'
|-TypedefDecl 0x11f90cee0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x128825730 '__clang_svfloat32x4_t'
|-TypedefDecl 0x11f90cf48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x128825750 '__clang_svfloat64x4_t'
|-TypedefDecl 0x11f90cfb0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x128825770 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x11f90d018 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x128825790 '__SVBool_t'
|-TypedefDecl 0x11f90d080 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1288257b0 '__clang_svboolx2_t'
|-TypedefDecl 0x11f90d0e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1288257d0 '__clang_svboolx4_t'
|-TypedefDecl 0x11f90d150 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1288257f0 '__SVCount_t'
|-TypedefDecl 0x11f90d1f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x11f90d1b0 'char *'
|   `-BuiltinType 0x128824ab0 'char'
|-TypedefDecl 0x11f90d268 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x11f90d1b0 'char *'
|   `-BuiltinType 0x128824ab0 'char'
|-FunctionDecl 0x11f90d488 <dataset_diviso_filec/func7109_vuln.c:1:1, line:36:1> line:1:1 invalid tile_make_weights 'int (int *, double)'
| |-ParmVarDecl 0x11f90d328 <col:20, col:43> col:43 referenced invalid dim 'int *'
| |-ParmVarDecl 0x11f90d3a8 <line:2:6, col:29> col:29 used scale 'double'
| `-CompoundStmt 0x128826eb0 <line:3:1, line:36:1>
|   |-DeclStmt 0x11f926588 <line:4:3, col:31>
|   | `-VarDecl 0x11f90d558 <col:3, col:30> col:7 used n 'int' cinit
|   |   `-ImplicitCastExpr 0x11f926570 <col:11, col:30> 'int' <FloatingToIntegral>
|   |     `-CallExpr 0x11f926548 <col:11, col:30> 'double'
|   |       |-ImplicitCastExpr 0x11f926530 <col:11> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x11f9263f0 <col:11> 'double (double)' Function 0x11f926230 'ceil' 'double (double)'
|   |       `-BinaryOperator 0x11f9264d8 <col:17, col:29> 'double' '+'
|   |         |-BinaryOperator 0x11f926480 <col:17, col:21> 'double' '/'
|   |         | |-ImplicitCastExpr 0x11f926468 <col:17> 'double' <IntegralToFloating>
|   |         | | `-IntegerLiteral 0x11f926410 <col:17> 'int' 1
|   |         | `-ImplicitCastExpr 0x11f926450 <col:21> 'double' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x11f926430 <col:21> 'double' lvalue ParmVar 0x11f90d3a8 'scale' 'double'
|   |         `-ImplicitCastExpr 0x11f9264c0 <col:29> 'double' <IntegralToFloating>
|   |           `-IntegerLiteral 0x11f9264a0 <col:29> 'int' 1
|   |-DeclStmt 0x11f926970 <line:5:3, col:70>
|   | `-VarDecl 0x11f9265e8 <col:3, col:69> col:11 used pixel_weights 'double *' cinit
|   |   `-CallExpr 0x11f926940 <col:27, col:69> '<dependent type>' contains-errors
|   |     |-DeclRefExpr 0x11f9267b0 <col:27> 'int ()' Function 0x11f9266f8 'g_malloc_n' 'int ()'
|   |     |-BinaryOperator 0x11f926920 <col:39, col:57> '<dependent type>' contains-errors '*'
|   |     | |-UnaryExprOrTypeTraitExpr 0x11f9268e0 <col:39, col:53> 'unsigned long' sizeof 'double'
|   |     | `-RecoveryExpr 0x11f926900 <col:57> '<dependent type>' contains-errors lvalue
|   |     `-DeclRefExpr 0x11f926840 <col:68> 'int' lvalue Var 0x11f90d558 'n' 'int'
|   |-DeclStmt 0x11f926a08 <line:6:3, col:13>
|   | `-VarDecl 0x11f9269a0 <col:3, col:7> col:7 used offset 'int'
|   |-DeclStmt 0x11f926aa0 <line:7:3, col:8>
|   | `-VarDecl 0x11f926a38 <col:3, col:7> col:7 used i 'int'
|   |-BinaryOperator 0x11f926b68 <line:9:3, col:12> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x11f926b00 <col:3, col:8> '<dependent type>' contains-errors lvalue ->n
|   | | `-RecoveryExpr 0x11f926ad8 <col:3> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x11f926ab8 <col:3> 'int *' lvalue ParmVar 0x11f90d328 'dim' 'int *'
|   | `-DeclRefExpr 0x11f926b48 <col:12> 'int' lvalue Var 0x11f90d558 'n' 'int'
|   |-BinaryOperator 0x11f926c38 <line:10:3, col:17> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x11f926bd0 <col:3, col:8> '<dependent type>' contains-errors lvalue ->offset
|   | | `-RecoveryExpr 0x11f926ba8 <col:3> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x11f926b88 <col:3> 'int *' lvalue ParmVar 0x11f90d328 'dim' 'int *'
|   | `-IntegerLiteral 0x11f926c18 <col:17> 'int' 0
|   |-BinaryOperator 0x11f926d08 <line:11:3, col:18> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x11f926ca0 <col:3, col:8> '<dependent type>' contains-errors lvalue ->weights
|   | | `-RecoveryExpr 0x11f926c78 <col:3> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x11f926c58 <col:3> 'int *' lvalue ParmVar 0x11f90d328 'dim' 'int *'
|   | `-DeclRefExpr 0x11f926ce8 <col:18> 'double *' contains-errors lvalue Var 0x11f9265e8 'pixel_weights' 'double *'
|   `-ForStmt 0x128826e78 <line:13:3, line:35:5>
|     |-BinaryOperator 0x11f926d68 <line:13:8, col:17> 'int' '='
|     | |-DeclRefExpr 0x11f926d28 <col:8> 'int' lvalue Var 0x11f9269a0 'offset' 'int'
|     | `-IntegerLiteral 0x11f926d48 <col:17> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x11f926e00 <col:20, col:29> 'int' contains-errors '<'
|     | |-DeclRefExpr 0x11f926d88 <col:20> 'int' lvalue Var 0x11f9269a0 'offset' 'int'
|     | `-RecoveryExpr 0x11f926de0 <col:29> '<dependent type>' contains-errors lvalue
|     |-UnaryOperator 0x11f926e40 <col:40, col:46> 'int' postfix '++'
|     | `-DeclRefExpr 0x11f926e20 <col:40> 'int' lvalue Var 0x11f9269a0 'offset' 'int'
|     `-CompoundStmt 0x128826e50 <line:14:5, line:35:5>
|       |-DeclStmt 0x11f927078 <line:15:7, col:44>
|       | `-VarDecl 0x11f926e70 <col:7, col:35> col:14 used x 'double' cinit
|       |   `-BinaryOperator 0x11f927058 <col:18, col:35> '<dependent type>' contains-errors '/'
|       |     |-CStyleCastExpr 0x11f927010 <col:18, col:26> 'double' <IntegralToFloating>
|       |     | `-ImplicitCastExpr 0x11f926ff8 <col:26> 'int' <LValueToRValue> part_of_explicit_cast
|       |     |   `-DeclRefExpr 0x11f926ed8 <col:26> 'int' lvalue Var 0x11f9269a0 'offset' 'int'
|       |     `-RecoveryExpr 0x11f927038 <col:35> '<dependent type>' contains-errors lvalue
|       |-DeclStmt 0x128826200 <line:16:7, col:31>
|       | `-VarDecl 0x11f9270a8 <col:7, col:26> col:14 used a 'double' cinit
|       |   `-BinaryOperator 0x11f9271d8 <col:18, col:26> 'double' contains-errors '+'
|       |     |-ImplicitCastExpr 0x11f9271c0 <col:18> 'double' contains-errors <LValueToRValue>
|       |     | `-DeclRefExpr 0x11f927110 <col:18> 'double' contains-errors lvalue Var 0x11f926e70 'x' 'double'
|       |     `-BinaryOperator 0x11f9271a0 <col:22, col:26> 'double' '/'
|       |       |-ImplicitCastExpr 0x11f927188 <col:22> 'double' <IntegralToFloating>
|       |       | `-IntegerLiteral 0x11f927130 <col:22> 'int' 1
|       |       `-ImplicitCastExpr 0x11f927170 <col:26> 'double' <LValueToRValue>
|       |         `-DeclRefExpr 0x11f927150 <col:26> 'double' lvalue ParmVar 0x11f90d3a8 'scale' 'double'
|       `-ForStmt 0x128826e18 <line:18:7, line:34:8>
|         |-BinaryOperator 0x128826258 <line:18:12, col:16> 'int' '='
|         | |-DeclRefExpr 0x128826218 <col:12> 'int' lvalue Var 0x11f926a38 'i' 'int'
|         | `-IntegerLiteral 0x128826238 <col:16> 'int' 0
|         |-<<<NULL>>>
|         |-BinaryOperator 0x1288262e8 <col:19, col:23> 'int' '<'
|         | |-ImplicitCastExpr 0x1288262b8 <col:19> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x128826278 <col:19> 'int' lvalue Var 0x11f926a38 'i' 'int'
|         | `-ImplicitCastExpr 0x1288262d0 <col:23> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x128826298 <col:23> 'int' lvalue Var 0x11f90d558 'n' 'int'
|         |-UnaryOperator 0x128826328 <col:26, col:27> 'int' postfix '++'
|         | `-DeclRefExpr 0x128826308 <col:26> 'int' lvalue Var 0x11f926a38 'i' 'int'
|         `-CompoundStmt 0x128826e00 <line:19:9, line:34:8>
|           `-IfStmt 0x128826dd0 <line:20:11, line:33:13> has_else
|             |-BinaryOperator 0x1288263c8 <line:20:15, col:19> 'int' contains-errors '<'
|             | |-ImplicitCastExpr 0x1288263b0 <col:15> 'double' <IntegralToFloating>
|             | | `-ImplicitCastExpr 0x128826380 <col:15> 'int' <LValueToRValue>
|             | |   `-DeclRefExpr 0x128826340 <col:15> 'int' lvalue Var 0x11f926a38 'i' 'int'
|             | `-ImplicitCastExpr 0x128826398 <col:19> 'double' contains-errors <LValueToRValue>
|             |   `-DeclRefExpr 0x128826360 <col:19> 'double' contains-errors lvalue Var 0x11f926e70 'x' 'double'
|             |-CompoundStmt 0x128826970 <line:21:13, line:26:13>
|             | `-IfStmt 0x128826940 <line:22:15, line:25:38> has_else
|             |   |-BinaryOperator 0x1288264b0 <line:22:19, col:27> 'int' contains-errors '>'
|             |   | |-ImplicitCastExpr 0x128826498 <col:19, col:23> 'double' <IntegralToFloating>
|             |   | | `-BinaryOperator 0x128826440 <col:19, col:23> 'int' '+'
|             |   | |   |-ImplicitCastExpr 0x128826428 <col:19> 'int' <LValueToRValue>
|             |   | |   | `-DeclRefExpr 0x1288263e8 <col:19> 'int' lvalue Var 0x11f926a38 'i' 'int'
|             |   | |   `-IntegerLiteral 0x128826408 <col:23> 'int' 1
|             |   | `-ImplicitCastExpr 0x128826480 <col:27> 'double' contains-errors <LValueToRValue>
|             |   |   `-DeclRefExpr 0x128826460 <col:27> 'double' contains-errors lvalue Var 0x11f926e70 'x' 'double'
|             |   |-BinaryOperator 0x128826858 <line:23:17, col:62> 'double' contains-errors '='
|             |   | |-UnaryOperator 0x128826528 <col:17, col:34> 'double' contains-errors lvalue prefix '*' cannot overflow
|             |   | | `-ParenExpr 0x128826508 <col:18, col:34> 'double *' contains-errors
|             |   | |   `-UnaryOperator 0x1288264f0 <col:19, col:32> 'double *' contains-errors postfix '++'
|             |   | |     `-DeclRefExpr 0x1288264d0 <col:19> 'double *' contains-errors lvalue Var 0x11f9265e8 'pixel_weights' 'double *'
|             |   | `-BinaryOperator 0x128826838 <col:39, col:62> 'double' contains-errors '*'
|             |   |   |-ParenExpr 0x1288267e0 <col:39, col:58> 'double' contains-errors
|             |   |   | `-BinaryOperator 0x1288267c0 <col:40, col:57> 'double' contains-errors '-'
|             |   |   |   |-ImplicitCastExpr 0x1288267a8 <col:40, col:53> 'double' contains-errors <IntegralToFloating>
|             |   |   |   | `-CallExpr 0x128826728 <col:40, col:53> 'int' contains-errors
|             |   |   |   |   |-ImplicitCastExpr 0x128826710 <col:40> 'int (*)()' <FunctionToPointerDecay>
|             |   |   |   |   | `-DeclRefExpr 0x128826620 <col:40> 'int ()' Function 0x128826568 'MIN' 'int ()'
|             |   |   |   |   |-BinaryOperator 0x128826698 <col:45, col:49> 'int' '+'
|             |   |   |   |   | |-ImplicitCastExpr 0x128826680 <col:45> 'int' <LValueToRValue>
|             |   |   |   |   | | `-DeclRefExpr 0x128826640 <col:45> 'int' lvalue Var 0x11f926a38 'i' 'int'
|             |   |   |   |   | `-IntegerLiteral 0x128826660 <col:49> 'int' 1
|             |   |   |   |   `-ImplicitCastExpr 0x128826758 <col:52> 'double' contains-errors <LValueToRValue>
|             |   |   |   |     `-DeclRefExpr 0x1288266b8 <col:52> 'double' contains-errors lvalue Var 0x11f9270a8 'a' 'double'
|             |   |   |   `-ImplicitCastExpr 0x128826790 <col:57> 'double' contains-errors <LValueToRValue>
|             |   |   |     `-DeclRefExpr 0x128826770 <col:57> 'double' contains-errors lvalue Var 0x11f926e70 'x' 'double'
|             |   |   `-ImplicitCastExpr 0x128826820 <col:62> 'double' <LValueToRValue>
|             |   |     `-DeclRefExpr 0x128826800 <col:62> 'double' lvalue ParmVar 0x11f90d3a8 'scale' 'double'
|             |   `-BinaryOperator 0x128826920 <line:25:17, col:38> 'double' contains-errors '='
|             |     |-UnaryOperator 0x1288268d0 <col:17, col:34> 'double' contains-errors lvalue prefix '*' cannot overflow
|             |     | `-ParenExpr 0x1288268b0 <col:18, col:34> 'double *' contains-errors
|             |     |   `-UnaryOperator 0x128826898 <col:19, col:32> 'double *' contains-errors postfix '++'
|             |     |     `-DeclRefExpr 0x128826878 <col:19> 'double *' contains-errors lvalue Var 0x11f9265e8 'pixel_weights' 'double *'
|             |     `-ImplicitCastExpr 0x128826908 <col:38> 'double' <IntegralToFloating>
|             |       `-IntegerLiteral 0x1288268e8 <col:38> 'int' 0
|             `-CompoundStmt 0x128826db8 <line:28:13, line:33:13>
|               `-IfStmt 0x128826d88 <line:29:15, line:32:38> has_else
|                 |-BinaryOperator 0x128826a10 <line:29:19, col:23> 'int' contains-errors '>'
|                 | |-ImplicitCastExpr 0x1288269c8 <col:19> 'double' contains-errors <LValueToRValue>
|                 | | `-DeclRefExpr 0x128826988 <col:19> 'double' contains-errors lvalue Var 0x11f9270a8 'a' 'double'
|                 | `-ImplicitCastExpr 0x1288269f8 <col:23> 'double' <IntegralToFloating>
|                 |   `-ImplicitCastExpr 0x1288269e0 <col:23> 'int' <LValueToRValue>
|                 |     `-DeclRefExpr 0x1288269a8 <col:23> 'int' lvalue Var 0x11f926a38 'i' 'int'
|                 |-BinaryOperator 0x128826ca0 <line:30:17, col:62> 'double' contains-errors '='
|                 | |-UnaryOperator 0x128826a88 <col:17, col:34> 'double' contains-errors lvalue prefix '*' cannot overflow
|                 | | `-ParenExpr 0x128826a68 <col:18, col:34> 'double *' contains-errors
|                 | |   `-UnaryOperator 0x128826a50 <col:19, col:32> 'double *' contains-errors postfix '++'
|                 | |     `-DeclRefExpr 0x128826a30 <col:19> 'double *' contains-errors lvalue Var 0x11f9265e8 'pixel_weights' 'double *'
|                 | `-BinaryOperator 0x128826c80 <col:39, col:62> 'double' contains-errors '*'
|                 |   |-ImplicitCastExpr 0x128826c68 <col:39, col:58> 'double' contains-errors <IntegralToFloating>
|                 |   | `-ParenExpr 0x128826c10 <col:39, col:58> 'int' contains-errors
|                 |   |   `-BinaryOperator 0x128826bf0 <col:40, col:57> 'int' contains-errors '-'
|                 |   |     |-CallExpr 0x128826b70 <col:40, col:53> 'int' contains-errors
|                 |   |     | |-ImplicitCastExpr 0x128826b58 <col:40> 'int (*)()' <FunctionToPointerDecay>
|                 |   |     | | `-DeclRefExpr 0x128826aa0 <col:40> 'int ()' Function 0x128826568 'MIN' 'int ()'
|                 |   |     | |-BinaryOperator 0x128826b18 <col:45, col:49> 'int' '+'
|                 |   |     | | |-ImplicitCastExpr 0x128826b00 <col:45> 'int' <LValueToRValue>
|                 |   |     | | | `-DeclRefExpr 0x128826ac0 <col:45> 'int' lvalue Var 0x11f926a38 'i' 'int'
|                 |   |     | | `-IntegerLiteral 0x128826ae0 <col:49> 'int' 1
|                 |   |     | `-ImplicitCastExpr 0x128826ba0 <col:52> 'double' contains-errors <LValueToRValue>
|                 |   |     |   `-DeclRefExpr 0x128826b38 <col:52> 'double' contains-errors lvalue Var 0x11f9270a8 'a' 'double'
|                 |   |     `-ImplicitCastExpr 0x128826bd8 <col:57> 'int' <LValueToRValue>
|                 |   |       `-DeclRefExpr 0x128826bb8 <col:57> 'int' lvalue Var 0x11f926a38 'i' 'int'
|                 |   `-ImplicitCastExpr 0x128826c50 <col:62> 'double' <LValueToRValue>
|                 |     `-DeclRefExpr 0x128826c30 <col:62> 'double' lvalue ParmVar 0x11f90d3a8 'scale' 'double'
|                 `-BinaryOperator 0x128826d68 <line:32:17, col:38> 'double' contains-errors '='
|                   |-UnaryOperator 0x128826d18 <col:17, col:34> 'double' contains-errors lvalue prefix '*' cannot overflow
|                   | `-ParenExpr 0x128826cf8 <col:18, col:34> 'double *' contains-errors
|                   |   `-UnaryOperator 0x128826ce0 <col:19, col:32> 'double *' contains-errors postfix '++'
|                   |     `-DeclRefExpr 0x128826cc0 <col:19> 'double *' contains-errors lvalue Var 0x11f9265e8 'pixel_weights' 'double *'
|                   `-ImplicitCastExpr 0x128826d50 <col:38> 'double' <IntegralToFloating>
|                     `-IntegerLiteral 0x128826d30 <col:38> 'int' 0
`-FunctionDecl 0x11f926230 <line:4:11> col:11 implicit used ceil 'double (double)' extern
  |-ParmVarDecl 0x11f926330 <<invalid sloc>> <invalid sloc> 'double'
  |-BuiltinAttr 0x11f9262d8 <<invalid sloc>> Implicit 1052
  |-NoThrowAttr 0x11f9263a0 <col:11> Implicit
  `-ConstAttr 0x11f9263c8 <col:11> Implicit
