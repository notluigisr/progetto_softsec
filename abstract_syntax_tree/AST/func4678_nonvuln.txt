TranslationUnitDecl 0x11e855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x11e8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x11e855bd0 '__int128'
|-TypedefDecl 0x11e856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x11e855bf0 'unsigned __int128'
|-TypedefDecl 0x11e926230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x11e926000 'struct __NSConstantString_tag'
|   `-Record 0x11e856580 '__NSConstantString_tag'
|-TypedefDecl 0x11e926298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x11e855d90 '__SVInt8_t'
|-TypedefDecl 0x11e926300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x11e855db0 '__SVInt16_t'
|-TypedefDecl 0x11e926368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x11e855dd0 '__SVInt32_t'
|-TypedefDecl 0x11e9263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x11e855df0 '__SVInt64_t'
|-TypedefDecl 0x11e926438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x11e855e10 '__SVUint8_t'
|-TypedefDecl 0x11e9264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x11e855e30 '__SVUint16_t'
|-TypedefDecl 0x11e926508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x11e855e50 '__SVUint32_t'
|-TypedefDecl 0x11e926570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x11e855e70 '__SVUint64_t'
|-TypedefDecl 0x11e9265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x11e855e90 '__SVFloat16_t'
|-TypedefDecl 0x11e926640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x11e855eb0 '__SVFloat32_t'
|-TypedefDecl 0x11e9266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x11e855ed0 '__SVFloat64_t'
|-TypedefDecl 0x11e926710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x11e855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x11e926778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x11e855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x11e9267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x11e855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x11e926848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x11e855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x11e9268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x11e855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x11e926918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x11e855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x11e926980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x11e855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x11e9269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x11e855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x11e926a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x11e855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x11e926ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x11e856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x11e926b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x11e856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x11e926b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x11e856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x11e926bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x11e856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x11e926c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x11e856090 '__clang_svint8x3_t'
|-TypedefDecl 0x11e926cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x11e8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x11e926d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x11e8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x11e926d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x11e8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x11e926df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x11e856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x11e926e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x11e856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x11e926ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x11e856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x11e926f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x11e856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x11e926f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x11e856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x11e927800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x11e8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x11e927868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x11e8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x11e9278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x11e8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x11e927938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x11e856210 '__clang_svint8x4_t'
|-TypedefDecl 0x11e9279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x11e856230 '__clang_svint16x4_t'
|-TypedefDecl 0x11e927a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x11e856250 '__clang_svint32x4_t'
|-TypedefDecl 0x11e927a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x11e856270 '__clang_svint64x4_t'
|-TypedefDecl 0x11e927ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x11e856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x11e927b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x11e8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x11e927ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x11e8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x11e927c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x11e8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x11e927c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x11e856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x11e927ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x11e856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x11e927d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x11e856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x11e927db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x11e856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x11e927e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x11e856390 '__SVBool_t'
|-TypedefDecl 0x11e927e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x11e8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x11e927ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x11e8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x11e927f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x11e8563f0 '__SVCount_t'
|-TypedefDecl 0x11e927ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x11e927fb0 'char *'
|   `-BuiltinType 0x11e8556b0 'char'
|-TypedefDecl 0x11e928068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x11e927fb0 'char *'
|   `-BuiltinType 0x11e8556b0 'char'
|-FunctionDecl 0x11e928318 <dataset_diviso_filec/func4678_nonvuln.c:1:1, line:28:1> line:1:1 invalid print_address_error 'int (int *, int *, char *)'
| |-ParmVarDecl 0x11e928128 <col:21, col:35> col:35 invalid addr 'int *'
| |-ParmVarDecl 0x11e9281a8 <col:41, col:47> col:47 invalid f 'int *'
| |-ParmVarDecl 0x11e928228 <col:50, col:58> col:58 used t 'char *'
| `-CompoundStmt 0x11e943b30 <line:2:1, line:28:1>
|   |-DeclStmt 0x11e928678 <line:3:1, col:23>
|   | `-VarDecl 0x11e9283f0 <col:1, col:22> col:5 used count 'int' cinit
|   |   `-CallExpr 0x11e928638 <col:13, col:22> 'int'
|   |     |-ImplicitCastExpr 0x11e928620 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x11e9285b0 <col:13> 'int ()' Function 0x11e9284f8 'Ustrlen' 'int ()'
|   |     `-ImplicitCastExpr 0x11e928660 <col:21> 'char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x11e9285d0 <col:21> 'char *' lvalue ParmVar 0x11e928228 't' 'char *'
|   |-DeclStmt 0x11e9419d8 <line:4:1, col:66>
|   | `-VarDecl 0x11e9286a8 <col:1, col:62> col:9 used s 'char *' cinit
|   |   `-ConditionalOperator 0x11e9419a8 <col:13, col:62> '<dependent type>' contains-errors
|   |     |-CallExpr 0x11e941958 <col:13, col:43> '<dependent type>' contains-errors
|   |     | |-DeclRefExpr 0x11e941800 <col:13> 'int ()' Function 0x11e928738 'testflag' 'int ()'
|   |     | |-RecoveryExpr 0x11e941820 <col:22> '<dependent type>' contains-errors lvalue
|   |     | `-RecoveryExpr 0x11e941938 <col:28> '<dependent type>' contains-errors lvalue
|   |     |-CXXDependentScopeMemberExpr 0x11e9418a8 <col:46, col:52> '<dependent type>' contains-errors lvalue ->message
|   |     | `-RecoveryExpr 0x11e941888 <col:46> '<dependent type>' contains-errors lvalue
|   |     `-RecoveryExpr 0x11e941988 <col:62> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x11e941b50 <line:6:1, line:7:3>
|   | |-BinaryOperator 0x11e941b20 <line:6:5, col:35> 'int' contains-errors '&&'
|   | | |-UnaryOperator 0x11e941a28 <col:5, col:6> 'int' contains-errors prefix '!' cannot overflow
|   | | | `-ImplicitCastExpr 0x11e941a10 <col:6> 'char *' contains-errors <LValueToRValue>
|   | | |   `-DeclRefExpr 0x11e9419f0 <col:6> 'char *' contains-errors lvalue Var 0x11e9286a8 's' 'char *'
|   | | `-UnaryOperator 0x11e941b08 <col:11, col:35> 'int' contains-errors prefix '!' cannot overflow
|   | |   `-ParenExpr 0x11e941ae8 <col:12, col:35> 'char *' contains-errors
|   | |     `-BinaryOperator 0x11e941ac8 <col:13, col:23> 'char *' contains-errors '='
|   | |       |-DeclRefExpr 0x11e941a40 <col:13> 'char *' contains-errors lvalue Var 0x11e9286a8 's' 'char *'
|   | |       `-CXXDependentScopeMemberExpr 0x11e941a80 <col:17, col:23> '<dependent type>' contains-errors lvalue ->user_message
|   | |         `-RecoveryExpr 0x11e941a60 <col:17> '<dependent type>' contains-errors lvalue
|   | `-ReturnStmt 0x11e941b40 <line:7:3>
|   |-CallExpr 0x11e941d10 <line:9:1, col:20> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x11e941c50 <col:1> 'int ()' Function 0x11e941b98 'fprintf' 'int ()'
|   | |-RecoveryExpr 0x11e941c70 <col:9> '<dependent type>' contains-errors lvalue
|   | |-StringLiteral 0x11e941cd0 <col:12> 'char[4]' lvalue "STR"
|   | `-DeclRefExpr 0x11e941cf0 <col:19> 'char *' lvalue ParmVar 0x11e928228 't' 'char *'
|   `-WhileStmt 0x11e943b10 <line:11:1, line:27:5>
|     |-ImplicitCastExpr 0x11e941d98 <line:11:8, col:9> 'char' contains-errors <LValueToRValue>
|     | `-UnaryOperator 0x11e941d80 <col:8, col:9> 'char' contains-errors lvalue prefix '*' cannot overflow
|     |   `-ImplicitCastExpr 0x11e941d68 <col:9> 'char *' contains-errors <LValueToRValue>
|     |     `-DeclRefExpr 0x11e941d48 <col:9> 'char *' contains-errors lvalue Var 0x11e9286a8 's' 'char *'
|     `-IfStmt 0x11e943ae0 <line:12:3, line:27:5> has_else
|       |-BinaryOperator 0x11e941f48 <line:12:7, col:29> 'int' contains-errors '&&'
|       | |-BinaryOperator 0x11e941e48 <col:7, col:13> 'int' contains-errors '=='
|       | | |-ImplicitCastExpr 0x11e941e30 <col:7, col:8> 'int' contains-errors <IntegralCast>
|       | | | `-ImplicitCastExpr 0x11e941e18 <col:7, col:8> 'char' contains-errors <LValueToRValue>
|       | | |   `-UnaryOperator 0x11e941de8 <col:7, col:8> 'char' contains-errors lvalue prefix '*' cannot overflow
|       | | |     `-ImplicitCastExpr 0x11e941dd0 <col:8> 'char *' contains-errors <LValueToRValue>
|       | | |       `-DeclRefExpr 0x11e941db0 <col:8> 'char *' contains-errors lvalue Var 0x11e9286a8 's' 'char *'
|       | | `-CharacterLiteral 0x11e941e00 <col:13> 'int' 92
|       | `-BinaryOperator 0x11e941f28 <col:21, col:29> 'int' contains-errors '=='
|       |   |-ImplicitCastExpr 0x11e941f10 <col:21, col:24> 'int' contains-errors <IntegralCast>
|       |   | `-ImplicitCastExpr 0x11e941ef8 <col:21, col:24> 'char' contains-errors <LValueToRValue>
|       |   |   `-ArraySubscriptExpr 0x11e941ec0 <col:21, col:24> 'char' contains-errors lvalue
|       |   |     |-ImplicitCastExpr 0x11e941ea8 <col:21> 'char *' contains-errors <LValueToRValue>
|       |   |     | `-DeclRefExpr 0x11e941e68 <col:21> 'char *' contains-errors lvalue Var 0x11e9286a8 's' 'char *'
|       |   |     `-IntegerLiteral 0x11e941e88 <col:23> 'int' 1
|       |   `-CharacterLiteral 0x11e941ee0 <col:29> 'int' 110
|       |-CompoundStmt 0x11e9420c8 <line:13:5, line:17:5>
|       | |-CallExpr 0x11e941fc8 <line:14:5, col:21> '<dependent type>' contains-errors
|       | | |-DeclRefExpr 0x11e941f68 <col:5> 'int ()' Function 0x11e941b98 'fprintf' 'int ()'
|       | | |-RecoveryExpr 0x11e941f88 <col:13> '<dependent type>' contains-errors lvalue
|       | | `-StringLiteral 0x11e941fa8 <col:16> 'char[4]' lvalue "STR"
|       | |-CompoundAssignOperator 0x11e942038 <line:15:5, col:10> 'char *' contains-errors '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
|       | | |-DeclRefExpr 0x11e941ff8 <col:5> 'char *' contains-errors lvalue Var 0x11e9286a8 's' 'char *'
|       | | `-IntegerLiteral 0x11e942018 <col:10> 'int' 2
|       | `-BinaryOperator 0x11e9420a8 <line:16:5, col:13> 'int' '='
|       |   |-DeclRefExpr 0x11e942068 <col:5> 'int' lvalue Var 0x11e9283f0 'count' 'int'
|       |   `-IntegerLiteral 0x11e942088 <col:13> 'int' 0
|       `-CompoundStmt 0x11e943ab8 <line:19:5, line:27:5>
|         |-CallExpr 0x11e942260 <line:20:5, col:16> '<dependent type>' contains-errors
|         | |-DeclRefExpr 0x11e9421d0 <col:5> 'int ()' Function 0x11e942118 'fputc' 'int ()'
|         | |-UnaryOperator 0x11e942228 <col:11, col:12> 'char' contains-errors lvalue prefix '*' cannot overflow
|         | | `-ImplicitCastExpr 0x11e942210 <col:12> 'char *' contains-errors <LValueToRValue>
|         | |   `-DeclRefExpr 0x11e9421f0 <col:12> 'char *' contains-errors lvalue Var 0x11e9286a8 's' 'char *'
|         | `-RecoveryExpr 0x11e942240 <col:15> '<dependent type>' contains-errors lvalue
|         |-UnaryOperator 0x11e9422b0 <line:21:5, col:10> 'int' postfix '++'
|         | `-DeclRefExpr 0x11e942290 <col:5> 'int' lvalue Var 0x11e9283f0 'count' 'int'
|         `-IfStmt 0x11e943a98 <line:22:5, line:26:7>
|           |-BinaryOperator 0x11e943968 <line:22:9, col:47> 'int' contains-errors '&&'
|           | |-BinaryOperator 0x11e9438d0 <col:9, col:34> 'int' contains-errors '&&'
|           | | |-BinaryOperator 0x11e942360 <col:9, col:17> 'int' contains-errors '=='
|           | | | |-ImplicitCastExpr 0x11e942348 <col:9, col:11> 'int' contains-errors <IntegralCast>
|           | | | | `-ImplicitCastExpr 0x11e942330 <col:9, col:11> 'char' contains-errors <LValueToRValue>
|           | | | |   `-UnaryOperator 0x11e942300 <col:9, col:11> 'char' contains-errors lvalue prefix '*' cannot overflow
|           | | | |     `-UnaryOperator 0x11e9422e8 <col:10, col:11> 'char *' contains-errors postfix '++'
|           | | | |       `-DeclRefExpr 0x11e9422c8 <col:10> 'char *' contains-errors lvalue Var 0x11e9286a8 's' 'char *'
|           | | | `-CharacterLiteral 0x11e942318 <col:17> 'int' 58
|           | | `-CallExpr 0x11e943878 <col:24, col:34> 'int' contains-errors
|           | |   |-ImplicitCastExpr 0x11e943860 <col:24> 'int (*)(int)' <FunctionToPointerDecay>
|           | |   | `-DeclRefExpr 0x11e9437c0 <col:24> 'int (int)' Function 0x11e943600 'isspace' 'int (int)'
|           | |   `-ImplicitCastExpr 0x11e9438b8 <col:32, col:33> 'int' contains-errors <IntegralCast>
|           | |     `-ImplicitCastExpr 0x11e9438a0 <col:32, col:33> 'char' contains-errors <LValueToRValue>
|           | |       `-UnaryOperator 0x11e943818 <col:32, col:33> 'char' contains-errors lvalue prefix '*' cannot overflow
|           | |         `-ImplicitCastExpr 0x11e943800 <col:33> 'char *' contains-errors <LValueToRValue>
|           | |           `-DeclRefExpr 0x11e9437e0 <col:33> 'char *' contains-errors lvalue Var 0x11e9286a8 's' 'char *'
|           | `-BinaryOperator 0x11e943948 <col:39, col:47> 'int' '>'
|           |   |-ImplicitCastExpr 0x11e943930 <col:39> 'int' <LValueToRValue>
|           |   | `-DeclRefExpr 0x11e9438f0 <col:39> 'int' lvalue Var 0x11e9283f0 'count' 'int'
|           |   `-IntegerLiteral 0x11e943910 <col:47> 'int' 45
|           `-CompoundStmt 0x11e943a78 <line:23:7, line:26:7>
|             |-CallExpr 0x11e9439e8 <line:24:7, col:23> '<dependent type>' contains-errors
|             | |-DeclRefExpr 0x11e943988 <col:7> 'int ()' Function 0x11e941b98 'fprintf' 'int ()'
|             | |-RecoveryExpr 0x11e9439a8 <col:15> '<dependent type>' contains-errors lvalue
|             | `-StringLiteral 0x11e9439c8 <col:18> 'char[4]' lvalue "STR"
|             `-BinaryOperator 0x11e943a58 <line:25:7, col:15> 'int' '='
|               |-DeclRefExpr 0x11e943a18 <col:7> 'int' lvalue Var 0x11e9283f0 'count' 'int'
|               `-IntegerLiteral 0x11e943a38 <col:15> 'int' 0
`-FunctionDecl 0x11e943600 <line:22:24> col:24 implicit used isspace 'int (int)' extern
  |-ParmVarDecl 0x11e943700 <<invalid sloc>> <invalid sloc> 'int'
  |-BuiltinAttr 0x11e9436a8 <<invalid sloc>> Implicit 929
  |-NoThrowAttr 0x11e943770 <col:24> Implicit
  `-PureAttr 0x11e943798 <col:24> Implicit
