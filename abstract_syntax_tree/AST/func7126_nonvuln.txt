TranslationUnitDecl 0x13f055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x13f0564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x13f055bd0 '__int128'
|-TypedefDecl 0x13f056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x13f055bf0 'unsigned __int128'
|-TypedefDecl 0x13f126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13f126000 'struct __NSConstantString_tag'
|   `-Record 0x13f056580 '__NSConstantString_tag'
|-TypedefDecl 0x13f126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x13f055d90 '__SVInt8_t'
|-TypedefDecl 0x13f126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x13f055db0 '__SVInt16_t'
|-TypedefDecl 0x13f126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x13f055dd0 '__SVInt32_t'
|-TypedefDecl 0x13f1263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x13f055df0 '__SVInt64_t'
|-TypedefDecl 0x13f126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x13f055e10 '__SVUint8_t'
|-TypedefDecl 0x13f1264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x13f055e30 '__SVUint16_t'
|-TypedefDecl 0x13f126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x13f055e50 '__SVUint32_t'
|-TypedefDecl 0x13f126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x13f055e70 '__SVUint64_t'
|-TypedefDecl 0x13f1265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x13f055e90 '__SVFloat16_t'
|-TypedefDecl 0x13f126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x13f055eb0 '__SVFloat32_t'
|-TypedefDecl 0x13f1266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x13f055ed0 '__SVFloat64_t'
|-TypedefDecl 0x13f126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x13f055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13f126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x13f055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13f1267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x13f055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13f126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x13f055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13f1268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x13f055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13f126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x13f055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13f126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x13f055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13f1269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x13f055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13f126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x13f055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13f126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x13f056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13f126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x13f056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13f126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x13f056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13f126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x13f056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13f126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x13f056090 '__clang_svint8x3_t'
|-TypedefDecl 0x13f126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x13f0560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13f126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x13f0560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13f126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x13f0560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13f126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x13f056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13f126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x13f056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13f126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x13f056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13f126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x13f056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13f126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x13f056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13f127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x13f0561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13f127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x13f0561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13f1278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x13f0561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13f127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x13f056210 '__clang_svint8x4_t'
|-TypedefDecl 0x13f1279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x13f056230 '__clang_svint16x4_t'
|-TypedefDecl 0x13f127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x13f056250 '__clang_svint32x4_t'
|-TypedefDecl 0x13f127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x13f056270 '__clang_svint64x4_t'
|-TypedefDecl 0x13f127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x13f056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13f127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x13f0562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13f127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x13f0562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13f127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x13f0562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13f127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x13f056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13f127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x13f056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13f127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x13f056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13f127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x13f056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13f127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x13f056390 '__SVBool_t'
|-TypedefDecl 0x13f127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x13f0563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13f127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x13f0563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13f127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x13f0563f0 '__SVCount_t'
|-TypedefDecl 0x13f127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13f127fb0 'char *'
|   `-BuiltinType 0x13f0556b0 'char'
|-TypedefDecl 0x13f128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13f127fb0 'char *'
|   `-BuiltinType 0x13f0556b0 'char'
|-FunctionDecl 0x13f128288 <dataset_diviso_filec/func7126_nonvuln.c:1:1, line:37:1> line:1:12 invalid interpret_msrbank 'int (char *, int *)' static
| |-ParmVarDecl 0x13f1280f0 <col:31, col:37> col:37 used str 'char *'
| |-ParmVarDecl 0x13f1281a8 <col:42, col:47> col:47 invalid spsr 'int *'
| `-CompoundStmt 0x13f143bf8 <col:53, line:37:1>
|   |-DeclStmt 0x13f1286d0 <line:2:2, col:47>
|   | `-VarDecl 0x13f1283c0 <col:2, col:46> col:13 used fields 'const char[5]' cinit
|   |   `-InitListExpr 0x13f128520 <col:24, col:46> 'const char[5]'
|   |     |-ImplicitCastExpr 0x13f128560 <col:25> 'char' <IntegralCast>
|   |     | `-CharacterLiteral 0x13f128428 <col:25> 'int' 99
|   |     |-ImplicitCastExpr 0x13f128580 <col:30> 'char' <IntegralCast>
|   |     | `-CharacterLiteral 0x13f128440 <col:30> 'int' 120
|   |     |-ImplicitCastExpr 0x13f1285a8 <col:35> 'char' <IntegralCast>
|   |     | `-CharacterLiteral 0x13f128458 <col:35> 'int' 115
|   |     |-ImplicitCastExpr 0x13f1285e0 <col:40> 'char' <IntegralCast>
|   |     | `-CharacterLiteral 0x13f128470 <col:40> 'int' 102
|   |     `-ImplicitCastExpr 0x13f1285f8 <col:45> 'char' <IntegralCast>
|   |       `-IntegerLiteral 0x13f128488 <col:45> 'int' 0
|   |-DeclStmt 0x13f128788 <line:3:2, col:13>
|   | `-VarDecl 0x13f128700 <col:2, col:12> col:6 used res 'int' cinit
|   |   `-IntegerLiteral 0x13f128768 <col:12> 'int' 0
|   |-DeclStmt 0x13f141900 <line:4:2, col:10>
|   | |-VarDecl 0x13f141800 <col:2, col:6> col:6 used i 'int'
|   | `-VarDecl 0x13f141880 <col:2, col:9> col:9 used j 'int'
|   |-IfStmt 0x13f141d08 <line:5:2, line:9:2> has_else
|   | |-CallExpr 0x13f141b58 <line:5:6, col:34> 'int'
|   | | |-ImplicitCastExpr 0x13f141b40 <col:6> 'int (*)()' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x13f141a70 <col:6> 'int ()' Function 0x13f1419b8 'r_str_startswith' 'int ()'
|   | | |-ImplicitCastExpr 0x13f141b88 <col:24> 'char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x13f141a90 <col:24> 'char *' lvalue ParmVar 0x13f1280f0 'str' 'char *'
|   | | `-ImplicitCastExpr 0x13f141ba0 <col:29> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x13f141af0 <col:29> 'char[4]' lvalue "STR"
|   | |-CompoundStmt 0x13f141c48 <col:37, line:7:2>
|   | | `-BinaryOperator 0x13f141c28 <line:6:3, col:11> '<dependent type>' contains-errors '='
|   | |   |-UnaryOperator 0x13f141bf0 <col:3, col:4> '<dependent type>' contains-errors prefix '*' cannot overflow
|   | |   | `-ImplicitCastExpr 0x13f141bd8 <col:4> '<dependent type>' contains-errors <LValueToRValue>
|   | |   |   `-RecoveryExpr 0x13f141bb8 <col:4> '<dependent type>' contains-errors lvalue
|   | |   `-IntegerLiteral 0x13f141c08 <col:11> 'int' 1
|   | `-CompoundStmt 0x13f141cf0 <line:7:9, line:9:2>
|   |   `-BinaryOperator 0x13f141cd0 <line:8:3, col:11> '<dependent type>' contains-errors '='
|   |     |-UnaryOperator 0x13f141c98 <col:3, col:4> '<dependent type>' contains-errors prefix '*' cannot overflow
|   |     | `-ImplicitCastExpr 0x13f141c80 <col:4> '<dependent type>' contains-errors <LValueToRValue>
|   |     |   `-RecoveryExpr 0x13f141c60 <col:4> '<dependent type>' contains-errors lvalue
|   |     `-IntegerLiteral 0x13f141cb0 <col:11> 'int' 0
|   |-IfStmt 0x13f1432a8 <line:11:2, line:21:2>
|   | |-CallExpr 0x13f141db0 <line:11:6, col:34> 'int'
|   | | |-ImplicitCastExpr 0x13f141d98 <col:6> 'int (*)()' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x13f141d38 <col:6> 'int ()' Function 0x13f1419b8 'r_str_startswith' 'int ()'
|   | | |-ImplicitCastExpr 0x13f141de0 <col:24> 'char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x13f141d58 <col:24> 'char *' lvalue ParmVar 0x13f1280f0 'str' 'char *'
|   | | `-ImplicitCastExpr 0x13f141df8 <col:29> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x13f141d78 <col:29> 'char[4]' lvalue "STR"
|   | `-CompoundStmt 0x13f143280 <col:37, line:21:2>
|   |   |-IfStmt 0x13f142660 <line:12:3, line:14:3>
|   |   | |-UnaryOperator 0x13f142600 <line:12:7, col:30> 'int' prefix '!' cannot overflow
|   |   | | `-ParenExpr 0x13f1425e0 <col:8, col:30> 'int'
|   |   | |   `-CallExpr 0x13f142568 <col:9, col:29> 'int'
|   |   | |     |-ImplicitCastExpr 0x13f142550 <col:9> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |   | |     | `-DeclRefExpr 0x13f142450 <col:9> 'int (const char *, const char *)' Function 0x13f142270 'strcmp' 'int (const char *, const char *)'
|   |   | |     |-ImplicitCastExpr 0x13f142598 <col:17, col:21> 'const char *' <NoOp>
|   |   | |     | `-BinaryOperator 0x13f1424c8 <col:17, col:21> 'char *' '+'
|   |   | |     |   |-ImplicitCastExpr 0x13f1424b0 <col:17> 'char *' <LValueToRValue>
|   |   | |     |   | `-DeclRefExpr 0x13f142470 <col:17> 'char *' lvalue ParmVar 0x13f1280f0 'str' 'char *'
|   |   | |     |   `-IntegerLiteral 0x13f142490 <col:21> 'int' 5
|   |   | |     `-ImplicitCastExpr 0x13f1425c8 <col:24> 'const char *' <NoOp>
|   |   | |       `-ImplicitCastExpr 0x13f1425b0 <col:24> 'char *' <ArrayToPointerDecay>
|   |   | |         `-StringLiteral 0x13f1424e8 <col:24> 'char[4]' lvalue "STR"
|   |   | `-CompoundStmt 0x13f142648 <col:33, line:14:3>
|   |   |   `-ReturnStmt 0x13f142638 <line:13:4, col:11>
|   |   |     `-IntegerLiteral 0x13f142618 <col:11> 'int' 4
|   |   |-IfStmt 0x13f143060 <line:15:3, line:17:3>
|   |   | |-UnaryOperator 0x13f143000 <line:15:7, col:30> 'int' prefix '!' cannot overflow
|   |   | | `-ParenExpr 0x13f1427e0 <col:8, col:30> 'int'
|   |   | |   `-CallExpr 0x13f142768 <col:9, col:29> 'int'
|   |   | |     |-ImplicitCastExpr 0x13f142750 <col:9> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |   | |     | `-DeclRefExpr 0x13f142680 <col:9> 'int (const char *, const char *)' Function 0x13f142270 'strcmp' 'int (const char *, const char *)'
|   |   | |     |-ImplicitCastExpr 0x13f142798 <col:17, col:21> 'const char *' <NoOp>
|   |   | |     | `-BinaryOperator 0x13f1426f8 <col:17, col:21> 'char *' '+'
|   |   | |     |   |-ImplicitCastExpr 0x13f1426e0 <col:17> 'char *' <LValueToRValue>
|   |   | |     |   | `-DeclRefExpr 0x13f1426a0 <col:17> 'char *' lvalue ParmVar 0x13f1280f0 'str' 'char *'
|   |   | |     |   `-IntegerLiteral 0x13f1426c0 <col:21> 'int' 5
|   |   | |     `-ImplicitCastExpr 0x13f1427c8 <col:24> 'const char *' <NoOp>
|   |   | |       `-ImplicitCastExpr 0x13f1427b0 <col:24> 'char *' <ArrayToPointerDecay>
|   |   | |         `-StringLiteral 0x13f142718 <col:24> 'char[4]' lvalue "STR"
|   |   | `-CompoundStmt 0x13f143048 <col:33, line:17:3>
|   |   |   `-ReturnStmt 0x13f143038 <line:16:4, col:11>
|   |   |     `-IntegerLiteral 0x13f143018 <col:11> 'int' 8
|   |   `-IfStmt 0x13f143260 <line:18:3, line:20:3>
|   |     |-UnaryOperator 0x13f143200 <line:18:7, col:30> 'int' prefix '!' cannot overflow
|   |     | `-ParenExpr 0x13f1431e0 <col:8, col:30> 'int'
|   |     |   `-CallExpr 0x13f143168 <col:9, col:29> 'int'
|   |     |     |-ImplicitCastExpr 0x13f143150 <col:9> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |     |     | `-DeclRefExpr 0x13f143080 <col:9> 'int (const char *, const char *)' Function 0x13f142270 'strcmp' 'int (const char *, const char *)'
|   |     |     |-ImplicitCastExpr 0x13f143198 <col:17, col:21> 'const char *' <NoOp>
|   |     |     | `-BinaryOperator 0x13f1430f8 <col:17, col:21> 'char *' '+'
|   |     |     |   |-ImplicitCastExpr 0x13f1430e0 <col:17> 'char *' <LValueToRValue>
|   |     |     |   | `-DeclRefExpr 0x13f1430a0 <col:17> 'char *' lvalue ParmVar 0x13f1280f0 'str' 'char *'
|   |     |     |   `-IntegerLiteral 0x13f1430c0 <col:21> 'int' 5
|   |     |     `-ImplicitCastExpr 0x13f1431c8 <col:24> 'const char *' <NoOp>
|   |     |       `-ImplicitCastExpr 0x13f1431b0 <col:24> 'char *' <ArrayToPointerDecay>
|   |     |         `-StringLiteral 0x13f143118 <col:24> 'char[4]' lvalue "STR"
|   |     `-CompoundStmt 0x13f143248 <col:33, line:20:3>
|   |       `-ReturnStmt 0x13f143238 <line:19:4, col:11>
|   |         `-IntegerLiteral 0x13f143218 <col:11> 'int' 12
|   |-IfStmt 0x13f143ba8 <line:22:2, line:35:2>
|   | |-CallExpr 0x13f143340 <line:22:6, col:34> 'int'
|   | | |-ImplicitCastExpr 0x13f143328 <col:6> 'int (*)()' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x13f1432c8 <col:6> 'int ()' Function 0x13f1419b8 'r_str_startswith' 'int ()'
|   | | |-ImplicitCastExpr 0x13f143370 <col:24> 'char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x13f1432e8 <col:24> 'char *' lvalue ParmVar 0x13f1280f0 'str' 'char *'
|   | | `-ImplicitCastExpr 0x13f143388 <col:29> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x13f143308 <col:29> 'char[4]' lvalue "STR"
|   | `-CompoundStmt 0x13f143b88 <col:37, line:35:2>
|   |   |-ForStmt 0x13f143b08 <line:23:3, line:33:3>
|   |   | |-BinaryOperator 0x13f1433e0 <line:23:8, col:12> 'int' '='
|   |   | | |-DeclRefExpr 0x13f1433a0 <col:8> 'int' lvalue Var 0x13f141800 'i' 'int'
|   |   | | `-IntegerLiteral 0x13f1433c0 <col:12> 'int' 0
|   |   | |-<<<NULL>>>
|   |   | |-ImplicitCastExpr 0x13f1434d0 <col:15, col:22> 'char' <LValueToRValue>
|   |   | | `-ArraySubscriptExpr 0x13f1434b0 <col:15, col:22> 'char' lvalue
|   |   | |   |-ImplicitCastExpr 0x13f143498 <col:15> 'char *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x13f143400 <col:15> 'char *' lvalue ParmVar 0x13f1280f0 'str' 'char *'
|   |   | |   `-BinaryOperator 0x13f143478 <col:19, col:21> 'int' '+'
|   |   | |     |-IntegerLiteral 0x13f143420 <col:19> 'int' 5
|   |   | |     `-ImplicitCastExpr 0x13f143460 <col:21> 'int' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x13f143440 <col:21> 'int' lvalue Var 0x13f141800 'i' 'int'
|   |   | |-UnaryOperator 0x13f143508 <col:25, col:26> 'int' postfix '++'
|   |   | | `-DeclRefExpr 0x13f1434e8 <col:25> 'int' lvalue Var 0x13f141800 'i' 'int'
|   |   | `-CompoundStmt 0x13f143ae0 <col:30, line:33:3>
|   |   |   |-ForStmt 0x13f143898 <line:24:4, line:28:4>
|   |   |   | |-BinaryOperator 0x13f143560 <line:24:9, col:13> 'int' '='
|   |   |   | | |-DeclRefExpr 0x13f143520 <col:9> 'int' lvalue Var 0x13f141880 'j' 'int'
|   |   |   | | `-IntegerLiteral 0x13f143540 <col:13> 'int' 0
|   |   |   | |-<<<NULL>>>
|   |   |   | |-ImplicitCastExpr 0x13f143610 <col:16, col:24> 'char' <LValueToRValue>
|   |   |   | | `-ArraySubscriptExpr 0x13f1435f0 <col:16, col:24> 'const char' lvalue
|   |   |   | |   |-ImplicitCastExpr 0x13f1435c0 <col:16> 'const char *' <ArrayToPointerDecay>
|   |   |   | |   | `-DeclRefExpr 0x13f143580 <col:16> 'const char[5]' lvalue Var 0x13f1283c0 'fields' 'const char[5]'
|   |   |   | |   `-ImplicitCastExpr 0x13f1435d8 <col:23> 'int' <LValueToRValue>
|   |   |   | |     `-DeclRefExpr 0x13f1435a0 <col:23> 'int' lvalue Var 0x13f141880 'j' 'int'
|   |   |   | |-UnaryOperator 0x13f143648 <col:27, col:28> 'int' postfix '++'
|   |   |   | | `-DeclRefExpr 0x13f143628 <col:27> 'int' lvalue Var 0x13f141880 'j' 'int'
|   |   |   | `-CompoundStmt 0x13f143880 <col:32, line:28:4>
|   |   |   |   `-IfStmt 0x13f143860 <line:25:5, line:27:5>
|   |   |   |     |-BinaryOperator 0x13f143820 <line:25:9, col:29> 'int' '=='
|   |   |   |     | |-ImplicitCastExpr 0x13f1437f0 <col:9, col:16> 'int' <IntegralCast>
|   |   |   |     | | `-ImplicitCastExpr 0x13f1437c0 <col:9, col:16> 'char' <LValueToRValue>
|   |   |   |     | |   `-ArraySubscriptExpr 0x13f143710 <col:9, col:16> 'char' lvalue
|   |   |   |     | |     |-ImplicitCastExpr 0x13f1436f8 <col:9> 'char *' <LValueToRValue>
|   |   |   |     | |     | `-DeclRefExpr 0x13f143660 <col:9> 'char *' lvalue ParmVar 0x13f1280f0 'str' 'char *'
|   |   |   |     | |     `-BinaryOperator 0x13f1436d8 <col:13, col:15> 'int' '+'
|   |   |   |     | |       |-IntegerLiteral 0x13f143680 <col:13> 'int' 5
|   |   |   |     | |       `-ImplicitCastExpr 0x13f1436c0 <col:15> 'int' <LValueToRValue>
|   |   |   |     | |         `-DeclRefExpr 0x13f1436a0 <col:15> 'int' lvalue Var 0x13f141800 'i' 'int'
|   |   |   |     | `-ImplicitCastExpr 0x13f143808 <col:21, col:29> 'int' <IntegralCast>
|   |   |   |     |   `-ImplicitCastExpr 0x13f1437d8 <col:21, col:29> 'char' <LValueToRValue>
|   |   |   |     |     `-ArraySubscriptExpr 0x13f1437a0 <col:21, col:29> 'const char' lvalue
|   |   |   |     |       |-ImplicitCastExpr 0x13f143770 <col:21> 'const char *' <ArrayToPointerDecay>
|   |   |   |     |       | `-DeclRefExpr 0x13f143730 <col:21> 'const char[5]' lvalue Var 0x13f1283c0 'fields' 'const char[5]'
|   |   |   |     |       `-ImplicitCastExpr 0x13f143788 <col:28> 'int' <LValueToRValue>
|   |   |   |     |         `-DeclRefExpr 0x13f143750 <col:28> 'int' lvalue Var 0x13f141880 'j' 'int'
|   |   |   |     `-CompoundStmt 0x13f143848 <col:32, line:27:5>
|   |   |   |       `-BreakStmt 0x13f143840 <line:26:6>
|   |   |   |-IfStmt 0x13f1439f8 <line:29:4, line:31:4>
|   |   |   | |-UnaryOperator 0x13f143998 <line:29:8, col:19> 'int' prefix '!' cannot overflow
|   |   |   | | `-ImplicitCastExpr 0x13f143980 <col:9, col:19> 'char' <LValueToRValue>
|   |   |   | |   `-ParenExpr 0x13f143960 <col:9, col:19> 'const char' lvalue
|   |   |   | |     `-ArraySubscriptExpr 0x13f143940 <col:10, col:18> 'const char' lvalue
|   |   |   | |       |-ImplicitCastExpr 0x13f143910 <col:10> 'const char *' <ArrayToPointerDecay>
|   |   |   | |       | `-DeclRefExpr 0x13f1438d0 <col:10> 'const char[5]' lvalue Var 0x13f1283c0 'fields' 'const char[5]'
|   |   |   | |       `-ImplicitCastExpr 0x13f143928 <col:17> 'int' <LValueToRValue>
|   |   |   | |         `-DeclRefExpr 0x13f1438f0 <col:17> 'int' lvalue Var 0x13f141880 'j' 'int'
|   |   |   | `-CompoundStmt 0x13f1439e0 <col:22, line:31:4>
|   |   |   |   `-ReturnStmt 0x13f1439d0 <line:30:5, col:12>
|   |   |   |     `-IntegerLiteral 0x13f1439b0 <col:12> 'int' 0
|   |   |   `-CompoundAssignOperator 0x13f143ab0 <line:32:4, col:16> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |     |-DeclRefExpr 0x13f143a18 <col:4> 'int' lvalue Var 0x13f128700 'res' 'int'
|   |   |     `-BinaryOperator 0x13f143a90 <col:11, col:16> 'int' '<<'
|   |   |       |-IntegerLiteral 0x13f143a38 <col:11> 'int' 1
|   |   |       `-ImplicitCastExpr 0x13f143a78 <col:16> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x13f143a58 <col:16> 'int' lvalue Var 0x13f141880 'j' 'int'
|   |   `-ReturnStmt 0x13f143b78 <line:34:3, col:10>
|   |     `-ImplicitCastExpr 0x13f143b60 <col:10> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x13f143b40 <col:10> 'int' lvalue Var 0x13f128700 'res' 'int'
|   `-ReturnStmt 0x13f143be8 <line:36:2, col:9>
|     `-IntegerLiteral 0x13f143bc8 <col:9> 'int' 0
`-FunctionDecl 0x13f142270 <line:12:9> col:9 implicit used strcmp 'int (const char *, const char *)' extern
  |-ParmVarDecl 0x13f142370 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x13f1423d8 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x13f142318 <<invalid sloc>> Implicit 887
