TranslationUnitDecl 0x125855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1258564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x125855bd0 '__int128'
|-TypedefDecl 0x125856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x125855bf0 'unsigned __int128'
|-TypedefDecl 0x12600be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12600bc00 'struct __NSConstantString_tag'
|   `-Record 0x125856580 '__NSConstantString_tag'
|-TypedefDecl 0x12600be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x125855d90 '__SVInt8_t'
|-TypedefDecl 0x12600bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x125855db0 '__SVInt16_t'
|-TypedefDecl 0x12600bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x125855dd0 '__SVInt32_t'
|-TypedefDecl 0x12600bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x125855df0 '__SVInt64_t'
|-TypedefDecl 0x12600c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x125855e10 '__SVUint8_t'
|-TypedefDecl 0x12600c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x125855e30 '__SVUint16_t'
|-TypedefDecl 0x12600c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x125855e50 '__SVUint32_t'
|-TypedefDecl 0x12600c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x125855e70 '__SVUint64_t'
|-TypedefDecl 0x12600c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x125855e90 '__SVFloat16_t'
|-TypedefDecl 0x12600c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x125855eb0 '__SVFloat32_t'
|-TypedefDecl 0x12600c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x125855ed0 '__SVFloat64_t'
|-TypedefDecl 0x12600c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x125855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12600c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x125855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12600c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x125855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12600c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x125855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12600c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x125855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12600c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x125855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12600c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x125855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12600c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x125855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12600c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x125855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12600c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x125856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12600c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x125856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12600c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x125856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12600c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x125856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12600c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x125856090 '__clang_svint8x3_t'
|-TypedefDecl 0x12600c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1258560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12600c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1258560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12600c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1258560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12600c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x125856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12600ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x125856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12600cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x125856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12600cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x125856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12600cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x125856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12600d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1258561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12600d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1258561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12600d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1258561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12600d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x125856210 '__clang_svint8x4_t'
|-TypedefDecl 0x12600d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x125856230 '__clang_svint16x4_t'
|-TypedefDecl 0x12600d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x125856250 '__clang_svint32x4_t'
|-TypedefDecl 0x12600d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x125856270 '__clang_svint64x4_t'
|-TypedefDecl 0x12600d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x125856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12600d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1258562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12600d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1258562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12600d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1258562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12600d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x125856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12600d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x125856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12600d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x125856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12600d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x125856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12600da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x125856390 '__SVBool_t'
|-TypedefDecl 0x12600da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1258563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12600dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1258563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12600db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1258563f0 '__SVCount_t'
|-TypedefDecl 0x12600dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12600dbb0 'char *'
|   `-BuiltinType 0x1258556b0 'char'
|-TypedefDecl 0x12600dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12600dbb0 'char *'
|   `-BuiltinType 0x1258556b0 'char'
|-FunctionDecl 0x12600de88 <dataset_diviso_filec/func6571_vuln.c:1:1, line:65:1> line:1:1 invalid relpTcpChkPeerName 'int (int *, int)'
| |-ParmVarDecl 0x12600dd28 <col:20, col:31> col:31 referenced invalid pThis 'int *'
| |-ParmVarDecl 0x12600dda8 <col:38, col:56> col:56 invalid cert 'int'
| `-CompoundStmt 0x12602bf88 <line:2:1, line:65:1>
|   |-DeclStmt 0x12600dfe0 <line:3:2, col:11>
|   | `-VarDecl 0x12600df58 <col:2, col:10> col:6 used r 'int' cinit
|   |   `-IntegerLiteral 0x12600dfc0 <col:10> 'int' 0
|   |-DeclStmt 0x12600e078 <line:4:2, col:9>
|   | `-VarDecl 0x12600e010 <col:2, col:6> col:6 used ret 'int'
|   |-DeclStmt 0x12600e148 <line:5:2, col:25>
|   | `-VarDecl 0x12600e0a8 <col:2, col:24> col:15 used status 'unsigned int' cinit
|   |   `-ImplicitCastExpr 0x12600e130 <col:24> 'unsigned int' <IntegralCast>
|   |     `-IntegerLiteral 0x12600e110 <col:24> 'int' 0
|   |-DeclStmt 0x12600e268 <line:6:2, col:18>
|   | `-VarDecl 0x12600e200 <col:2, col:17> col:7 used cnBuf 'char[1024]'
|   |-DeclStmt 0x12600e348 <line:7:2, col:22>
|   | `-VarDecl 0x12600e2e0 <col:2, col:21> col:7 used szAltName 'char[1024]'
|   |-DeclStmt 0x12600e3e0 <line:8:2, col:14>
|   | `-VarDecl 0x12600e378 <col:2, col:6> col:6 used iAltName 'int'
|   |-DeclStmt 0x126027548 <line:9:2, col:24>
|   | `-VarDecl 0x1260274e0 <col:2, col:23> col:7 used allNames 'char[32768]'
|   |-DeclStmt 0x1260275e0 <line:10:2, col:15>
|   | `-VarDecl 0x126027578 <col:2, col:6> col:6 used iAllNames 'int'
|   |-UnaryExprOrTypeTraitExpr 0x126027650 <line:11:2, col:9> 'unsigned long' sizeof
|   | `-DeclRefExpr 0x126027630 <col:9> 'char[1024]' lvalue Var 0x12600e2e0 'szAltName' 'char[1024]' non_odr_use_unevaluated
|   |-DeclStmt 0x1260276f0 <line:12:2, col:25>
|   | `-VarDecl 0x126027688 <col:2, col:6> col:6 used bFoundPositiveMatch 'int'
|   |-DeclStmt 0x126027788 <line:13:2, col:12>
|   | `-VarDecl 0x126027720 <col:2, col:6> col:6 used gnuRet 'int'
|   |-BinaryOperator 0x126027a48 <line:15:2, col:64> 'int' contains-errors '='
|   | |-DeclRefExpr 0x1260277a0 <col:2> 'int' lvalue Var 0x12600e010 'ret' 'int'
|   | `-CallExpr 0x126027a18 <col:8, col:64> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x126027920 <col:8> 'int ()' Function 0x126027868 'gnutls_certificate_verify_peers2' 'int ()'
|   |   |-CXXDependentScopeMemberExpr 0x126027960 <col:41, col:48> '<dependent type>' contains-errors lvalue ->session
|   |   | `-RecoveryExpr 0x126027940 <col:41> '<dependent type>' contains-errors lvalue
|   |   `-UnaryOperator 0x126027a00 <col:57, col:58> 'unsigned int *' prefix '&' cannot overflow
|   |     `-DeclRefExpr 0x1260279a8 <col:58> 'unsigned int' lvalue Var 0x12600e0a8 'status' 'unsigned int'
|   |-IfStmt 0x126027e30 <line:16:2, line:20:2>
|   | |-BinaryOperator 0x126027ac0 <line:16:5, col:11> 'int' '<'
|   | | |-ImplicitCastExpr 0x126027aa8 <col:5> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x126027a68 <col:5> 'int' lvalue Var 0x12600e010 'ret' 'int'
|   | | `-IntegerLiteral 0x126027a88 <col:11> 'int' 0
|   | `-CompoundStmt 0x126027e08 <col:14, line:20:2>
|   |   |-CallExpr 0x126027cd0 <line:17:3, line:18:27> '<dependent type>' contains-errors
|   |   | |-DeclRefExpr 0x126027bc0 <line:17:3> 'int ()' Function 0x126027b08 'callOnAuthErr' 'int ()'
|   |   | |-RecoveryExpr 0x126027be0 <col:17> '<dependent type>' contains-errors lvalue
|   |   | |-StringLiteral 0x126027c40 <col:24> 'char[4]' lvalue "STR"
|   |   | `-RecoveryExpr 0x126027cb0 <line:18:4> '<dependent type>' contains-errors lvalue
|   |   |-BinaryOperator 0x126027d80 <line:19:3, col:7> 'int' contains-errors '='
|   |   | |-DeclRefExpr 0x126027d08 <col:3> 'int' lvalue Var 0x12600df58 'r' 'int'
|   |   | `-RecoveryExpr 0x126027d60 <col:7> '<dependent type>' contains-errors lvalue
|   |   `-GotoStmt 0x126027df0 <col:35, col:40> 'done' 0x126027da0
|   |-IfStmt 0x1260280c0 <line:21:2, line:25:2>
|   | |-BinaryOperator 0x126027ec0 <line:21:5, col:15> 'int' '!='
|   | | |-ImplicitCastExpr 0x126027e90 <col:5> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x126027e50 <col:5> 'unsigned int' lvalue Var 0x12600e0a8 'status' 'unsigned int'
|   | | `-ImplicitCastExpr 0x126027ea8 <col:15> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x126027e70 <col:15> 'int' 0
|   | `-CompoundStmt 0x126028098 <col:18, line:25:2>
|   |   |-CallExpr 0x126027fb0 <line:22:3, line:23:27> '<dependent type>' contains-errors
|   |   | |-DeclRefExpr 0x126027ee0 <line:22:3> 'int ()' Function 0x126027b08 'callOnAuthErr' 'int ()'
|   |   | |-RecoveryExpr 0x126027f00 <col:17> '<dependent type>' contains-errors lvalue
|   |   | |-StringLiteral 0x126027f20 <col:24> 'char[4]' lvalue "STR"
|   |   | `-RecoveryExpr 0x126027f90 <line:23:4> '<dependent type>' contains-errors lvalue
|   |   |-BinaryOperator 0x126028060 <line:24:3, col:7> 'int' contains-errors '='
|   |   | |-DeclRefExpr 0x126027fe8 <col:3> 'int' lvalue Var 0x12600df58 'r' 'int'
|   |   | `-RecoveryExpr 0x126028040 <col:7> '<dependent type>' contains-errors lvalue
|   |   `-GotoStmt 0x126028080 <col:35, col:40> 'done' 0x126027da0
|   |-BinaryOperator 0x126028120 <line:27:2, col:24> 'int' '='
|   | |-DeclRefExpr 0x1260280e0 <col:2> 'int' lvalue Var 0x126027688 'bFoundPositiveMatch' 'int'
|   | `-IntegerLiteral 0x126028100 <col:24> 'int' 0
|   |-BinaryOperator 0x126028180 <line:28:2, col:14> 'int' '='
|   | |-DeclRefExpr 0x126028140 <col:2> 'int' lvalue Var 0x126027578 'iAllNames' 'int'
|   | `-IntegerLiteral 0x126028160 <col:14> 'int' 0
|   |-BinaryOperator 0x1260281e0 <line:31:2, col:13> 'int' '='
|   | |-DeclRefExpr 0x1260281a0 <col:2> 'int' lvalue Var 0x12600e378 'iAltName' 'int'
|   | `-IntegerLiteral 0x1260281c0 <col:13> 'int' 0
|   |-WhileStmt 0x12602b570 <line:32:2, line:46:2>
|   | |-UnaryOperator 0x126028238 <line:32:8, col:9> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x126028220 <col:9> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x126028200 <col:9> 'int' lvalue Var 0x126027688 'bFoundPositiveMatch' 'int'
|   | `-CompoundStmt 0x12602b540 <col:30, line:46:2>
|   |   |-ImplicitCastExpr 0x12602a130 <line:33:3, col:34> '<dependent type>' contains-errors <LValueToRValue>
|   |   | `-RecoveryExpr 0x12602a100 <col:3, col:34> '<dependent type>' contains-errors lvalue
|   |   |   |-DeclRefExpr 0x126028250 <col:3> 'char[1024]' lvalue Var 0x12600e2e0 'szAltName' 'char[1024]'
|   |   |   `-UnaryExprOrTypeTraitExpr 0x1260282b0 <col:18, col:34> 'unsigned long' sizeof
|   |   |     `-ParenExpr 0x126028290 <col:24, col:34> 'char[1024]' lvalue
|   |   |       `-DeclRefExpr 0x126028270 <col:25> 'char[1024]' lvalue Var 0x12600e2e0 'szAltName' 'char[1024]' non_odr_use_unevaluated
|   |   |-BinaryOperator 0x12602a488 <line:34:3, line:35:35> 'int' contains-errors '='
|   |   | |-DeclRefExpr 0x12602a148 <line:34:3> 'int' lvalue Var 0x126027720 'gnuRet' 'int'
|   |   | `-CallExpr 0x12602a440 <col:12, line:35:35> '<dependent type>' contains-errors
|   |   |   |-DeclRefExpr 0x12602a248 <line:34:12> 'int ()' Function 0x12602a190 'gnutls_x509_crt_get_subject_alt_name' 'int ()'
|   |   |   |-RecoveryExpr 0x12602a268 <col:49> '<dependent type>' contains-errors lvalue
|   |   |   |-DeclRefExpr 0x12602a288 <col:55> 'int' lvalue Var 0x12600e378 'iAltName' 'int'
|   |   |   |-DeclRefExpr 0x12602a2a8 <line:35:5> 'char[1024]' lvalue Var 0x12600e2e0 'szAltName' 'char[1024]'
|   |   |   |-UnaryOperator 0x12602a408 <col:16, col:17> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   |   | `-RecoveryExpr 0x12602a3e8 <col:17> '<dependent type>' contains-errors lvalue
|   |   |   `-RecoveryExpr 0x12602a420 <col:31> '<dependent type>' contains-errors lvalue
|   |   |-IfStmt 0x12602b4d8 <line:36:3, line:44:3> has_else
|   |   | |-BinaryOperator 0x12602a500 <line:36:6, col:15> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x12602a4e8 <col:6> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x12602a4a8 <col:6> 'int' lvalue Var 0x126027720 'gnuRet' 'int'
|   |   | | `-IntegerLiteral 0x12602a4c8 <col:15> 'int' 0
|   |   | |-BreakStmt 0x12602a520 <line:37:4>
|   |   | `-IfStmt 0x12602b4b8 <line:38:8, line:44:3>
|   |   |   |-BinaryOperator 0x12602a5a0 <line:38:11, col:21> 'int' contains-errors '=='
|   |   |   | |-DeclRefExpr 0x12602a528 <col:11> 'int' lvalue Var 0x126027720 'gnuRet' 'int'
|   |   |   | `-RecoveryExpr 0x12602a580 <col:21> '<dependent type>' contains-errors lvalue
|   |   |   `-CompoundStmt 0x12602b490 <col:41, line:44:3>
|   |   |     |-CallExpr 0x12602a6d8 <line:39:4, col:45> '<dependent type>' contains-errors
|   |   |     | |-CXXDependentScopeMemberExpr 0x12602a650 <col:4, col:20> '<dependent type>' contains-errors lvalue ->dbgprint
|   |   |     | | `-CXXDependentScopeMemberExpr 0x12602a608 <col:4, col:11> '<dependent type>' contains-errors lvalue ->pEngine
|   |   |     | |   `-RecoveryExpr 0x12602a5e0 <col:4> '<dependent type>' contains-errors lvalue
|   |   |     | |     `-DeclRefExpr 0x12602a5c0 <col:4> 'int *' lvalue ParmVar 0x12600dd28 'pThis' 'int *'
|   |   |     | |-StringLiteral 0x12602a698 <col:29> 'char[4]' lvalue "STR"
|   |   |     | `-DeclRefExpr 0x12602a6b8 <col:36> 'char[1024]' lvalue Var 0x12600e2e0 'szAltName' 'char[1024]'
|   |   |     |-CompoundAssignOperator 0x12602acb0 <line:40:4, line:41:28> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |     | |-DeclRefExpr 0x12602a708 <line:40:4> 'int' lvalue Var 0x126027578 'iAllNames' 'int'
|   |   |     | `-CallExpr 0x12602ac28 <col:17, line:41:28> 'int'
|   |   |     |   |-ImplicitCastExpr 0x12602ac10 <line:40:17> 'int (*)(char *, unsigned long, const char *, ...)' <FunctionToPointerDecay>
|   |   |     |   | `-DeclRefExpr 0x12602aa08 <col:17> 'int (char *, unsigned long, const char *, ...)' Function 0x12602a780 'snprintf' 'int (char *, unsigned long, const char *, ...)'
|   |   |     |   |-BinaryOperator 0x12602aa98 <col:26, col:35> 'char *' '+'
|   |   |     |   | |-ImplicitCastExpr 0x12602aa68 <col:26> 'char *' <ArrayToPointerDecay>
|   |   |     |   | | `-DeclRefExpr 0x12602aa28 <col:26> 'char[32768]' lvalue Var 0x1260274e0 'allNames' 'char[32768]'
|   |   |     |   | `-ImplicitCastExpr 0x12602aa80 <col:35> 'int' <LValueToRValue>
|   |   |     |   |   `-DeclRefExpr 0x12602aa48 <col:35> 'int' lvalue Var 0x126027578 'iAllNames' 'int'
|   |   |     |   |-BinaryOperator 0x12602ab68 <col:46, col:63> 'unsigned long' '-'
|   |   |     |   | |-UnaryExprOrTypeTraitExpr 0x12602aaf8 <col:46, col:61> 'unsigned long' sizeof
|   |   |     |   | | `-ParenExpr 0x12602aad8 <col:52, col:61> 'char[32768]' lvalue
|   |   |     |   | |   `-DeclRefExpr 0x12602aab8 <col:53> 'char[32768]' lvalue Var 0x1260274e0 'allNames' 'char[32768]' non_odr_use_unevaluated
|   |   |     |   | `-ImplicitCastExpr 0x12602ab50 <col:63> 'unsigned long' <IntegralCast>
|   |   |     |   |   `-ImplicitCastExpr 0x12602ab38 <col:63> 'int' <LValueToRValue>
|   |   |     |   |     `-DeclRefExpr 0x12602ab18 <col:63> 'int' lvalue Var 0x126027578 'iAllNames' 'int'
|   |   |     |   |-ImplicitCastExpr 0x12602ac80 <line:41:12> 'const char *' <NoOp>
|   |   |     |   | `-ImplicitCastExpr 0x12602ac68 <col:12> 'char *' <ArrayToPointerDecay>
|   |   |     |   |   `-StringLiteral 0x12602ab88 <col:12> 'char[4]' lvalue "STR"
|   |   |     |   `-ImplicitCastExpr 0x12602ac98 <col:19> 'char *' <ArrayToPointerDecay>
|   |   |     |     `-DeclRefExpr 0x12602aba8 <col:19> 'char[1024]' lvalue Var 0x12600e2e0 'szAltName' 'char[1024]'
|   |   |     `-CallExpr 0x12602b458 <line:42:4, col:64> '<dependent type>' contains-errors
|   |   |       |-DeclRefExpr 0x12602adc0 <col:4> 'int ()' Function 0x12602ad08 'relpTcpChkOnePeerName' 'int ()'
|   |   |       |-RecoveryExpr 0x12602ade0 <col:26> '<dependent type>' contains-errors lvalue
|   |   |       |-DeclRefExpr 0x12602b400 <col:33> 'char[1024]' lvalue Var 0x12600e2e0 'szAltName' 'char[1024]'
|   |   |       `-UnaryOperator 0x12602b440 <col:44, col:45> 'int *' prefix '&' cannot overflow
|   |   |         `-DeclRefExpr 0x12602b420 <col:45> 'int' lvalue Var 0x126027688 'bFoundPositiveMatch' 'int'
|   |   `-UnaryOperator 0x12602b528 <line:45:3, col:5> 'int' prefix '++'
|   |     `-DeclRefExpr 0x12602b508 <col:5> 'int' lvalue Var 0x12600e378 'iAltName' 'int'
|   |-IfStmt 0x12602bd60 <line:48:2, line:56:2>
|   | |-UnaryOperator 0x12602b5c8 <line:48:5, col:6> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x12602b5b0 <col:6> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x12602b590 <col:6> 'int' lvalue Var 0x126027688 'bFoundPositiveMatch' 'int'
|   | `-CompoundStmt 0x12602bd48 <col:27, line:56:2>
|   |   `-IfStmt 0x12602bd28 <line:50:3, line:55:3>
|   |     |-BinaryOperator 0x12602b800 <line:50:6, col:57> 'int' contains-errors '=='
|   |     | |-CallExpr 0x12602b7a0 <col:6, col:52> '<dependent type>' contains-errors
|   |     | | |-DeclRefExpr 0x12602b6c0 <col:6> 'int ()' Function 0x12602b608 'relpTcpGetCN' 'int ()'
|   |     | | |-RecoveryExpr 0x12602b6e0 <col:19> '<dependent type>' contains-errors lvalue
|   |     | | |-RecoveryExpr 0x12602b700 <col:26> '<dependent type>' contains-errors lvalue
|   |     | | |-DeclRefExpr 0x12602b720 <col:32> 'char[1024]' lvalue Var 0x12600e200 'cnBuf' 'char[1024]'
|   |     | | `-UnaryExprOrTypeTraitExpr 0x12602b780 <col:39, col:51> 'unsigned long' sizeof
|   |     | |   `-ParenExpr 0x12602b760 <col:45, col:51> 'char[1024]' lvalue
|   |     | |     `-DeclRefExpr 0x12602b740 <col:46> 'char[1024]' lvalue Var 0x12600e200 'cnBuf' 'char[1024]' non_odr_use_unevaluated
|   |     | `-IntegerLiteral 0x12602b7e0 <col:57> 'int' 0
|   |     `-CompoundStmt 0x12602bd00 <col:60, line:55:3>
|   |       |-CallExpr 0x12602b938 <line:51:4, col:41> '<dependent type>' contains-errors
|   |       | |-CXXDependentScopeMemberExpr 0x12602b8b0 <col:4, col:20> '<dependent type>' contains-errors lvalue ->dbgprint
|   |       | | `-CXXDependentScopeMemberExpr 0x12602b868 <col:4, col:11> '<dependent type>' contains-errors lvalue ->pEngine
|   |       | |   `-RecoveryExpr 0x12602b840 <col:4> '<dependent type>' contains-errors lvalue
|   |       | |     `-DeclRefExpr 0x12602b820 <col:4> 'int *' lvalue ParmVar 0x12600dd28 'pThis' 'int *'
|   |       | |-StringLiteral 0x12602b8f8 <col:29> 'char[4]' lvalue "STR"
|   |       | `-DeclRefExpr 0x12602b918 <col:36> 'char[1024]' lvalue Var 0x12600e200 'cnBuf' 'char[1024]'
|   |       |-CompoundAssignOperator 0x12602bc00 <line:52:4, line:53:24> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       | |-DeclRefExpr 0x12602b968 <line:52:4> 'int' lvalue Var 0x126027578 'iAllNames' 'int'
|   |       | `-CallExpr 0x12602bb78 <col:17, line:53:24> 'int'
|   |       |   |-ImplicitCastExpr 0x12602bb60 <line:52:17> 'int (*)(char *, unsigned long, const char *, ...)' <FunctionToPointerDecay>
|   |       |   | `-DeclRefExpr 0x12602b988 <col:17> 'int (char *, unsigned long, const char *, ...)' Function 0x12602a780 'snprintf' 'int (char *, unsigned long, const char *, ...)'
|   |       |   |-BinaryOperator 0x12602ba18 <col:26, col:35> 'char *' '+'
|   |       |   | |-ImplicitCastExpr 0x12602b9e8 <col:26> 'char *' <ArrayToPointerDecay>
|   |       |   | | `-DeclRefExpr 0x12602b9a8 <col:26> 'char[32768]' lvalue Var 0x1260274e0 'allNames' 'char[32768]'
|   |       |   | `-ImplicitCastExpr 0x12602ba00 <col:35> 'int' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x12602b9c8 <col:35> 'int' lvalue Var 0x126027578 'iAllNames' 'int'
|   |       |   |-BinaryOperator 0x12602bae8 <col:46, col:63> 'unsigned long' '-'
|   |       |   | |-UnaryExprOrTypeTraitExpr 0x12602ba78 <col:46, col:61> 'unsigned long' sizeof
|   |       |   | | `-ParenExpr 0x12602ba58 <col:52, col:61> 'char[32768]' lvalue
|   |       |   | |   `-DeclRefExpr 0x12602ba38 <col:53> 'char[32768]' lvalue Var 0x1260274e0 'allNames' 'char[32768]' non_odr_use_unevaluated
|   |       |   | `-ImplicitCastExpr 0x12602bad0 <col:63> 'unsigned long' <IntegralCast>
|   |       |   |   `-ImplicitCastExpr 0x12602bab8 <col:63> 'int' <LValueToRValue>
|   |       |   |     `-DeclRefExpr 0x12602ba98 <col:63> 'int' lvalue Var 0x126027578 'iAllNames' 'int'
|   |       |   |-ImplicitCastExpr 0x12602bbd0 <line:53:12> 'const char *' <NoOp>
|   |       |   | `-ImplicitCastExpr 0x12602bbb8 <col:12> 'char *' <ArrayToPointerDecay>
|   |       |   |   `-StringLiteral 0x12602bb08 <col:12> 'char[4]' lvalue "STR"
|   |       |   `-ImplicitCastExpr 0x12602bbe8 <col:19> 'char *' <ArrayToPointerDecay>
|   |       |     `-DeclRefExpr 0x12602bb28 <col:19> 'char[1024]' lvalue Var 0x12600e200 'cnBuf' 'char[1024]'
|   |       `-CallExpr 0x12602bcc8 <line:54:4, col:60> '<dependent type>' contains-errors
|   |         |-DeclRefExpr 0x12602bc30 <col:4> 'int ()' Function 0x12602ad08 'relpTcpChkOnePeerName' 'int ()'
|   |         |-RecoveryExpr 0x12602bc50 <col:26> '<dependent type>' contains-errors lvalue
|   |         |-DeclRefExpr 0x12602bc70 <col:33> 'char[1024]' lvalue Var 0x12600e200 'cnBuf' 'char[1024]'
|   |         `-UnaryOperator 0x12602bcb0 <col:40, col:41> 'int *' prefix '&' cannot overflow
|   |           `-DeclRefExpr 0x12602bc90 <col:41> 'int' lvalue Var 0x126027688 'bFoundPositiveMatch' 'int'
|   |-IfStmt 0x12602bea0 <line:58:2, line:61:2>
|   | |-UnaryOperator 0x12602bdb8 <line:58:5, col:6> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x12602bda0 <col:6> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x12602bd80 <col:6> 'int' lvalue Var 0x126027688 'bFoundPositiveMatch' 'int'
|   | `-CompoundStmt 0x12602be88 <col:27, line:61:2>
|   |   `-GotoStmt 0x12602be70 <line:60:35, col:40> 'done' 0x126027da0
|   |-BinaryOperator 0x12602bf00 <line:62:2, col:6> 'int' '='
|   | |-DeclRefExpr 0x12602bec0 <col:2> 'int' lvalue Var 0x12600df58 'r' 'int'
|   | `-IntegerLiteral 0x12602bee0 <col:6> 'int' 0
|   `-LabelStmt 0x12602bf68 <line:63:1, line:64:9> 'done'
|     `-ReturnStmt 0x12602bf58 <col:2, col:9>
|       `-ImplicitCastExpr 0x12602bf40 <col:9> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x12602bf20 <col:9> 'int' lvalue Var 0x12600df58 'r' 'int'
`-FunctionDecl 0x12602a780 <line:40:17> col:17 implicit used snprintf 'int (char *, unsigned long, const char *, ...)' extern
  |-ParmVarDecl 0x12602a880 <<invalid sloc>> <invalid sloc> 'char *'
  |-ParmVarDecl 0x12602a8e8 <<invalid sloc>> <invalid sloc> 'unsigned long'
  |-ParmVarDecl 0x12602a950 <<invalid sloc>> <invalid sloc> 'const char *'
  |-BuiltinAttr 0x12602a828 <<invalid sloc>> Implicit 905
  `-FormatAttr 0x12602a9d0 <col:17> Implicit printf 3 4
