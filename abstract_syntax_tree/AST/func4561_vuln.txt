TranslationUnitDecl 0x12b855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x12b8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x12b855bd0 '__int128'
|-TypedefDecl 0x12b856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x12b855bf0 'unsigned __int128'
|-TypedefDecl 0x12b926230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12b926000 'struct __NSConstantString_tag'
|   `-Record 0x12b856580 '__NSConstantString_tag'
|-TypedefDecl 0x12b926298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x12b855d90 '__SVInt8_t'
|-TypedefDecl 0x12b926300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x12b855db0 '__SVInt16_t'
|-TypedefDecl 0x12b926368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x12b855dd0 '__SVInt32_t'
|-TypedefDecl 0x12b9263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x12b855df0 '__SVInt64_t'
|-TypedefDecl 0x12b926438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x12b855e10 '__SVUint8_t'
|-TypedefDecl 0x12b9264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x12b855e30 '__SVUint16_t'
|-TypedefDecl 0x12b926508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x12b855e50 '__SVUint32_t'
|-TypedefDecl 0x12b926570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x12b855e70 '__SVUint64_t'
|-TypedefDecl 0x12b9265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x12b855e90 '__SVFloat16_t'
|-TypedefDecl 0x12b926640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x12b855eb0 '__SVFloat32_t'
|-TypedefDecl 0x12b9266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x12b855ed0 '__SVFloat64_t'
|-TypedefDecl 0x12b926710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x12b855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12b926778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x12b855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12b9267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x12b855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12b926848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x12b855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12b9268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x12b855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12b926918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x12b855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12b926980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x12b855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12b9269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x12b855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12b926a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x12b855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12b926ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x12b856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12b926b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x12b856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12b926b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x12b856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12b926bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x12b856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12b926c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x12b856090 '__clang_svint8x3_t'
|-TypedefDecl 0x12b926cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x12b8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12b926d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x12b8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12b926d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x12b8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12b926df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x12b856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12b926e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x12b856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12b926ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x12b856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12b926f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x12b856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12b926f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x12b856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12b927800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x12b8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12b927868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x12b8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12b9278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x12b8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12b927938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x12b856210 '__clang_svint8x4_t'
|-TypedefDecl 0x12b9279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x12b856230 '__clang_svint16x4_t'
|-TypedefDecl 0x12b927a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x12b856250 '__clang_svint32x4_t'
|-TypedefDecl 0x12b927a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x12b856270 '__clang_svint64x4_t'
|-TypedefDecl 0x12b927ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x12b856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12b927b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x12b8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12b927ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x12b8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12b927c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x12b8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12b927c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x12b856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12b927ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x12b856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12b927d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x12b856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12b927db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x12b856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12b927e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x12b856390 '__SVBool_t'
|-TypedefDecl 0x12b927e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x12b8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12b927ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x12b8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12b927f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x12b8563f0 '__SVCount_t'
|-TypedefDecl 0x12b927ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12b927fb0 'char *'
|   `-BuiltinType 0x12b8556b0 'char'
|-TypedefDecl 0x12b928068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12b927fb0 'char *'
|   `-BuiltinType 0x12b8556b0 'char'
|-FunctionDecl 0x12b9282e0 <dataset_diviso_filec/func4561_vuln.c:1:1, line:32:1> line:1:6 invalid imap_quote_string 'void (char *, int, const char *)'
| |-ParmVarDecl 0x12b9280d8 <col:25, col:31> col:31 used dest 'char *'
| |-ParmVarDecl 0x12b928170 <col:37, col:44> col:44 referenced invalid dlen 'int'
| |-ParmVarDecl 0x12b9281f0 <col:50, col:62> col:62 used src 'const char *'
| `-CompoundStmt 0x12c00a118 <line:2:1, line:32:1>
|   |-DeclStmt 0x12b928530 <line:3:3, col:36>
|   | `-VarDecl 0x12b928420 <col:3, col:31> col:21 used quote 'const char[4]' static cinit
|   |   `-StringLiteral 0x12b9284d0 <col:31> 'const char[4]' "STR"
|   |-DeclStmt 0x12b9285c8 <line:4:3, col:11>
|   | `-VarDecl 0x12b928560 <col:3, col:9> col:9 used pt 'char *'
|   |-DeclStmt 0x12b928660 <line:5:3, col:16>
|   | `-VarDecl 0x12b9285f8 <col:3, col:15> col:15 used s 'const char *'
|   |-BinaryOperator 0x12b9286d0 <line:7:3, col:8> 'char *' '='
|   | |-DeclRefExpr 0x12b928678 <col:3> 'char *' lvalue Var 0x12b928560 'pt' 'char *'
|   | `-ImplicitCastExpr 0x12b9286b8 <col:8> 'char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x12b928698 <col:8> 'char *' lvalue ParmVar 0x12b9280d8 'dest' 'char *'
|   |-BinaryOperator 0x12b928748 <line:8:3, col:8> 'const char *' '='
|   | |-DeclRefExpr 0x12b9286f0 <col:3> 'const char *' lvalue Var 0x12b9285f8 's' 'const char *'
|   | `-ImplicitCastExpr 0x12b928730 <col:8> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x12b928710 <col:8> 'const char *' lvalue ParmVar 0x12b9281f0 'src' 'const char *'
|   |-BinaryOperator 0x12c009200 <line:10:3, col:11> 'char' '='
|   | |-UnaryOperator 0x12b9287a0 <col:3, col:6> 'char' lvalue prefix '*' cannot overflow
|   | | `-UnaryOperator 0x12b928788 <col:4, col:6> 'char *' postfix '++'
|   | |   `-DeclRefExpr 0x12b928768 <col:4> 'char *' lvalue Var 0x12b928560 'pt' 'char *'
|   | `-ImplicitCastExpr 0x12b9287d0 <col:11> 'char' <IntegralCast>
|   |   `-CharacterLiteral 0x12b9287b8 <col:11> 'int' 34
|   |-CompoundAssignOperator 0x12c009288 <line:12:3, col:11> '<dependent type>' contains-errors '-=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   | |-RecoveryExpr 0x12c009240 <col:3> '<dependent type>' contains-errors lvalue
|   | | `-DeclRefExpr 0x12c009220 <col:3> 'int' lvalue ParmVar 0x12b928170 'dlen' 'int'
|   | `-IntegerLiteral 0x12c009268 <col:11> 'int' 2
|   |-ForStmt 0x12c009f98 <line:14:3, line:29:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x12c009328 <line:14:10, col:16> 'int' contains-errors '&&'
|   | | |-UnaryOperator 0x12c0092f0 <col:10, col:11> 'const char' lvalue prefix '*' cannot overflow
|   | | | `-ImplicitCastExpr 0x12c0092d8 <col:11> 'const char *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x12c0092b8 <col:11> 'const char *' lvalue Var 0x12b9285f8 's' 'const char *'
|   | | `-RecoveryExpr 0x12c009308 <col:16> '<dependent type>' contains-errors lvalue
|   | |-UnaryOperator 0x12c009368 <col:22, col:23> 'const char *' postfix '++'
|   | | `-DeclRefExpr 0x12c009348 <col:22> 'const char *' lvalue Var 0x12b9285f8 's' 'const char *'
|   | `-CompoundStmt 0x12c009f80 <line:15:3, line:29:3>
|   |   `-IfStmt 0x12c009f50 <line:16:5, line:28:5> has_else
|   |     |-CallExpr 0x12c009ac8 <line:16:9, col:26> 'char *'
|   |     | |-ImplicitCastExpr 0x12c009ab0 <col:9> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x12c0099c0 <col:9> 'char *(const char *, int)' Function 0x12c0097e0 'strchr' 'char *(const char *, int)'
|   |     | |-ImplicitCastExpr 0x12c009af8 <col:17> 'const char *' <ArrayToPointerDecay>
|   |     | | `-DeclRefExpr 0x12c0099e0 <col:17> 'const char[4]' lvalue Var 0x12b928420 'quote' 'const char[4]'
|   |     | `-ImplicitCastExpr 0x12c009b28 <col:24, col:25> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x12c009b10 <col:24, col:25> 'char' <LValueToRValue>
|   |     |     `-UnaryOperator 0x12c009a38 <col:24, col:25> 'const char' lvalue prefix '*' cannot overflow
|   |     |       `-ImplicitCastExpr 0x12c009a20 <col:25> 'const char *' <LValueToRValue>
|   |     |         `-DeclRefExpr 0x12c009a00 <col:25> 'const char *' lvalue Var 0x12b9285f8 's' 'const char *'
|   |     |-CompoundStmt 0x12c009dc8 <line:17:5, line:23:5>
|   |     | |-CompoundAssignOperator 0x12c009ba8 <line:18:7, col:15> '<dependent type>' contains-errors '-=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   |     | | |-RecoveryExpr 0x12c009b60 <col:7> '<dependent type>' contains-errors lvalue
|   |     | | | `-DeclRefExpr 0x12c009b40 <col:7> 'int' lvalue ParmVar 0x12b928170 'dlen' 'int'
|   |     | | `-IntegerLiteral 0x12c009b88 <col:15> 'int' 2
|   |     | |-IfStmt 0x12c009c30 <line:19:7, line:20:2>
|   |     | | |-UnaryOperator 0x12c009c10 <line:19:11, col:12> '<dependent type>' contains-errors prefix '!' cannot overflow
|   |     | | | `-ImplicitCastExpr 0x12c009bf8 <col:12> '<dependent type>' contains-errors <LValueToRValue>
|   |     | | |   `-RecoveryExpr 0x12c009bd8 <col:12> '<dependent type>' contains-errors lvalue
|   |     | | `-BreakStmt 0x12c009c28 <line:20:2>
|   |     | |-BinaryOperator 0x12c009cd0 <line:21:7, col:15> 'char' '='
|   |     | | |-UnaryOperator 0x12c009c88 <col:7, col:10> 'char' lvalue prefix '*' cannot overflow
|   |     | | | `-UnaryOperator 0x12c009c70 <col:8, col:10> 'char *' postfix '++'
|   |     | | |   `-DeclRefExpr 0x12c009c50 <col:8> 'char *' lvalue Var 0x12b928560 'pt' 'char *'
|   |     | | `-ImplicitCastExpr 0x12c009cb8 <col:15> 'char' <IntegralCast>
|   |     | |   `-CharacterLiteral 0x12c009ca0 <col:15> 'int' 92
|   |     | `-BinaryOperator 0x12c009da8 <line:22:7, col:16> 'char' '='
|   |     |   |-UnaryOperator 0x12c009d28 <col:7, col:10> 'char' lvalue prefix '*' cannot overflow
|   |     |   | `-UnaryOperator 0x12c009d10 <col:8, col:10> 'char *' postfix '++'
|   |     |   |   `-DeclRefExpr 0x12c009cf0 <col:8> 'char *' lvalue Var 0x12b928560 'pt' 'char *'
|   |     |   `-ImplicitCastExpr 0x12c009d90 <col:15, col:16> 'char' <LValueToRValue>
|   |     |     `-UnaryOperator 0x12c009d78 <col:15, col:16> 'const char' lvalue prefix '*' cannot overflow
|   |     |       `-ImplicitCastExpr 0x12c009d60 <col:16> 'const char *' <LValueToRValue>
|   |     |         `-DeclRefExpr 0x12c009d40 <col:16> 'const char *' lvalue Var 0x12b9285f8 's' 'const char *'
|   |     `-CompoundStmt 0x12c009f30 <line:25:5, line:28:5>
|   |       |-BinaryOperator 0x12c009eb0 <line:26:7, col:16> 'char' '='
|   |       | |-UnaryOperator 0x12c009e30 <col:7, col:10> 'char' lvalue prefix '*' cannot overflow
|   |       | | `-UnaryOperator 0x12c009e18 <col:8, col:10> 'char *' postfix '++'
|   |       | |   `-DeclRefExpr 0x12c009df8 <col:8> 'char *' lvalue Var 0x12b928560 'pt' 'char *'
|   |       | `-ImplicitCastExpr 0x12c009e98 <col:15, col:16> 'char' <LValueToRValue>
|   |       |   `-UnaryOperator 0x12c009e80 <col:15, col:16> 'const char' lvalue prefix '*' cannot overflow
|   |       |     `-ImplicitCastExpr 0x12c009e68 <col:16> 'const char *' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x12c009e48 <col:16> 'const char *' lvalue Var 0x12b9285f8 's' 'const char *'
|   |       `-UnaryOperator 0x12c009f18 <line:27:7, col:11> '<dependent type>' contains-errors postfix '--' cannot overflow
|   |         `-RecoveryExpr 0x12c009ef0 <col:7> '<dependent type>' contains-errors lvalue
|   |           `-DeclRefExpr 0x12c009ed0 <col:7> 'int' lvalue ParmVar 0x12b928170 'dlen' 'int'
|   |-BinaryOperator 0x12c00a050 <line:30:3, col:11> 'char' '='
|   | |-UnaryOperator 0x12c00a008 <col:3, col:6> 'char' lvalue prefix '*' cannot overflow
|   | | `-UnaryOperator 0x12c009ff0 <col:4, col:6> 'char *' postfix '++'
|   | |   `-DeclRefExpr 0x12c009fd0 <col:4> 'char *' lvalue Var 0x12b928560 'pt' 'char *'
|   | `-ImplicitCastExpr 0x12c00a038 <col:11> 'char' <IntegralCast>
|   |   `-CharacterLiteral 0x12c00a020 <col:11> 'int' 34
|   `-BinaryOperator 0x12c00a0f8 <line:31:3, col:9> 'char' '='
|     |-UnaryOperator 0x12c00a0a8 <col:3, col:4> 'char' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x12c00a090 <col:4> 'char *' <LValueToRValue>
|     |   `-DeclRefExpr 0x12c00a070 <col:4> 'char *' lvalue Var 0x12b928560 'pt' 'char *'
|     `-ImplicitCastExpr 0x12c00a0e0 <col:9> 'char' <IntegralCast>
|       `-IntegerLiteral 0x12c00a0c0 <col:9> 'int' 0
`-FunctionDecl 0x12c0097e0 <line:16:9> col:9 implicit used strchr 'char *(const char *, int)' extern
  |-ParmVarDecl 0x12c0098e0 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x12c009948 <<invalid sloc>> <invalid sloc> 'int'
  `-BuiltinAttr 0x12c009888 <<invalid sloc>> Implicit 893
