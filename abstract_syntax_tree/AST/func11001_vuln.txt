TranslationUnitDecl 0x138855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1388564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x138855bd0 '__int128'
|-TypedefDecl 0x138856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x138855bf0 'unsigned __int128'
|-TypedefDecl 0x13900be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13900bc00 'struct __NSConstantString_tag'
|   `-Record 0x138856580 '__NSConstantString_tag'
|-TypedefDecl 0x13900be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x138855d90 '__SVInt8_t'
|-TypedefDecl 0x13900bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x138855db0 '__SVInt16_t'
|-TypedefDecl 0x13900bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x138855dd0 '__SVInt32_t'
|-TypedefDecl 0x13900bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x138855df0 '__SVInt64_t'
|-TypedefDecl 0x13900c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x138855e10 '__SVUint8_t'
|-TypedefDecl 0x13900c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x138855e30 '__SVUint16_t'
|-TypedefDecl 0x13900c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x138855e50 '__SVUint32_t'
|-TypedefDecl 0x13900c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x138855e70 '__SVUint64_t'
|-TypedefDecl 0x13900c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x138855e90 '__SVFloat16_t'
|-TypedefDecl 0x13900c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x138855eb0 '__SVFloat32_t'
|-TypedefDecl 0x13900c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x138855ed0 '__SVFloat64_t'
|-TypedefDecl 0x13900c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x138855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13900c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x138855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13900c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x138855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13900c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x138855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13900c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x138855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13900c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x138855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13900c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x138855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13900c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x138855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13900c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x138855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13900c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x138856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13900c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x138856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13900c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x138856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13900c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x138856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13900c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x138856090 '__clang_svint8x3_t'
|-TypedefDecl 0x13900c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1388560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13900c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1388560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13900c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1388560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13900c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x138856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13900ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x138856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13900cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x138856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13900cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x138856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13900cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x138856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13900d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1388561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13900d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1388561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13900d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1388561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13900d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x138856210 '__clang_svint8x4_t'
|-TypedefDecl 0x13900d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x138856230 '__clang_svint16x4_t'
|-TypedefDecl 0x13900d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x138856250 '__clang_svint32x4_t'
|-TypedefDecl 0x13900d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x138856270 '__clang_svint64x4_t'
|-TypedefDecl 0x13900d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x138856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13900d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1388562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13900d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1388562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13900d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1388562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13900d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x138856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13900d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x138856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13900d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x138856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13900d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x138856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13900da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x138856390 '__SVBool_t'
|-TypedefDecl 0x13900da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1388563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13900dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1388563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13900db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1388563f0 '__SVCount_t'
|-TypedefDecl 0x13900dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13900dbb0 'char *'
|   `-BuiltinType 0x1388556b0 'char'
|-TypedefDecl 0x13900dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13900dbb0 'char *'
|   `-BuiltinType 0x1388556b0 'char'
|-FunctionDecl 0x13900e128 <dataset_diviso_filec/func11001_vuln.c:1:1, line:38:1> line:1:20 invalid ConvertRGBToHSV 'int (const double, const double, const double, double *, double *, double *)'
| |-ParmVarDecl 0x13900dcf0 <col:36, col:49> col:49 used red 'const double'
| |-ParmVarDecl 0x13900dd70 <col:53, col:66> col:66 used green 'const double'
| |-ParmVarDecl 0x13900ddf0 <line:2:3, col:16> col:16 used blue 'const double'
| |-ParmVarDecl 0x13900dea8 <col:21, col:29> col:29 used hue 'double *'
| |-ParmVarDecl 0x13900df28 <col:33, col:41> col:41 used saturation 'double *'
| |-ParmVarDecl 0x13900dfa8 <col:52, col:60> col:60 used value 'double *'
| `-CompoundStmt 0x13902a930 <line:3:1, line:38:1>
|   |-DeclStmt 0x13900e3a0 <line:4:3, line:7:8>
|   | |-VarDecl 0x13900e218 <line:4:3, line:5:5> col:5 used c 'double'
|   | |-VarDecl 0x13900e298 <line:4:3, line:6:5> col:5 used max 'double'
|   | `-VarDecl 0x13900e318 <line:4:3, line:7:5> col:5 used min 'double'
|   |-BinaryOperator 0x139027a48 <line:13:3, line:14:23> 'double' contains-errors '='
|   | |-DeclRefExpr 0x139027660 <line:13:3> 'double' lvalue Var 0x13900e298 'max' 'double'
|   | `-CallExpr 0x139027a18 <col:7, line:14:23> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x139027760 <line:13:7> 'int ()' Function 0x1390276a8 'MagickMax' 'int ()'
|   |   |-BinaryOperator 0x139027948 <col:17, col:30> '<dependent type>' contains-errors '*'
|   |   | |-RecoveryExpr 0x139027928 <col:17> '<dependent type>' contains-errors lvalue
|   |   | `-DeclRefExpr 0x139027798 <col:30> 'const double' lvalue ParmVar 0x13900dcf0 'red' 'const double'
|   |   `-CallExpr 0x1390279e8 <col:34, line:14:22> '<dependent type>' contains-errors
|   |     |-DeclRefExpr 0x1390277d8 <line:13:34> 'int ()' Function 0x1390276a8 'MagickMax' 'int ()'
|   |     |-BinaryOperator 0x139027988 <col:44, col:57> '<dependent type>' contains-errors '*'
|   |     | |-RecoveryExpr 0x139027968 <col:44> '<dependent type>' contains-errors lvalue
|   |     | `-DeclRefExpr 0x139027810 <col:57> 'const double' lvalue ParmVar 0x13900dd70 'green' 'const double'
|   |     `-BinaryOperator 0x1390279c8 <line:14:5, col:18> '<dependent type>' contains-errors '*'
|   |       |-RecoveryExpr 0x1390279a8 <col:5> '<dependent type>' contains-errors lvalue
|   |       `-DeclRefExpr 0x139027868 <col:18> 'const double' lvalue ParmVar 0x13900ddf0 'blue' 'const double'
|   |-BinaryOperator 0x139027e50 <line:15:3, line:16:23> 'double' contains-errors '='
|   | |-DeclRefExpr 0x139027a68 <line:15:3> 'double' lvalue Var 0x13900e318 'min' 'double'
|   | `-CallExpr 0x139027e20 <col:7, line:16:23> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x139027b68 <line:15:7> 'int ()' Function 0x139027ab0 'MagickMin' 'int ()'
|   |   |-BinaryOperator 0x139027d50 <col:17, col:30> '<dependent type>' contains-errors '*'
|   |   | |-RecoveryExpr 0x139027d30 <col:17> '<dependent type>' contains-errors lvalue
|   |   | `-DeclRefExpr 0x139027ba0 <col:30> 'const double' lvalue ParmVar 0x13900dcf0 'red' 'const double'
|   |   `-CallExpr 0x139027df0 <col:34, line:16:22> '<dependent type>' contains-errors
|   |     |-DeclRefExpr 0x139027be0 <line:15:34> 'int ()' Function 0x139027ab0 'MagickMin' 'int ()'
|   |     |-BinaryOperator 0x139027d90 <col:44, col:57> '<dependent type>' contains-errors '*'
|   |     | |-RecoveryExpr 0x139027d70 <col:44> '<dependent type>' contains-errors lvalue
|   |     | `-DeclRefExpr 0x139027c18 <col:57> 'const double' lvalue ParmVar 0x13900dd70 'green' 'const double'
|   |     `-BinaryOperator 0x139027dd0 <line:16:5, col:18> '<dependent type>' contains-errors '*'
|   |       |-RecoveryExpr 0x139027db0 <col:5> '<dependent type>' contains-errors lvalue
|   |       `-DeclRefExpr 0x139027c70 <col:18> 'const double' lvalue ParmVar 0x13900ddf0 'blue' 'const double'
|   |-BinaryOperator 0x139027f20 <line:17:3, col:9> 'double' '='
|   | |-DeclRefExpr 0x139027e70 <col:3> 'double' lvalue Var 0x13900e218 'c' 'double'
|   | `-BinaryOperator 0x139027f00 <col:5, col:9> 'double' '-'
|   |   |-ImplicitCastExpr 0x139027ed0 <col:5> 'double' <LValueToRValue>
|   |   | `-DeclRefExpr 0x139027e90 <col:5> 'double' lvalue Var 0x13900e298 'max' 'double'
|   |   `-ImplicitCastExpr 0x139027ee8 <col:9> 'double' <LValueToRValue>
|   |     `-DeclRefExpr 0x139027eb0 <col:9> 'double' lvalue Var 0x13900e318 'min' 'double'
|   |-BinaryOperator 0x139027fc8 <line:18:3, col:10> 'double' '='
|   | |-UnaryOperator 0x139027f78 <col:3, col:4> 'double' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x139027f60 <col:4> 'double *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x139027f40 <col:4> 'double *' lvalue ParmVar 0x13900dfa8 'value' 'double *'
|   | `-ImplicitCastExpr 0x139027fb0 <col:10> 'double' <LValueToRValue>
|   |   `-DeclRefExpr 0x139027f90 <col:10> 'double' lvalue Var 0x13900e298 'max' 'double'
|   |-IfStmt 0x1390281b8 <line:19:3, line:24:5>
|   | |-BinaryOperator 0x139028040 <line:19:7, col:12> 'int' '<='
|   | | |-ImplicitCastExpr 0x139028028 <col:7> 'double' <LValueToRValue>
|   | | | `-DeclRefExpr 0x139027fe8 <col:7> 'double' lvalue Var 0x13900e218 'c' 'double'
|   | | `-FloatingLiteral 0x139028008 <col:12> 'double' 0.000000e+00
|   | `-CompoundStmt 0x139028190 <line:20:5, line:24:5>
|   |   |-BinaryOperator 0x1390280d0 <line:21:7, col:12> 'double' '='
|   |   | |-UnaryOperator 0x139028098 <col:7, col:8> 'double' lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x139028080 <col:8> 'double *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x139028060 <col:8> 'double *' lvalue ParmVar 0x13900dea8 'hue' 'double *'
|   |   | `-FloatingLiteral 0x1390280b0 <col:12> 'double' 0.000000e+00
|   |   |-BinaryOperator 0x139028160 <line:22:7, col:19> 'double' '='
|   |   | |-UnaryOperator 0x139028128 <col:7, col:8> 'double' lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x139028110 <col:8> 'double *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1390280f0 <col:8> 'double *' lvalue ParmVar 0x13900df28 'saturation' 'double *'
|   |   | `-FloatingLiteral 0x139028140 <col:19> 'double' 0.000000e+00
|   |   `-ReturnStmt 0x139028180 <line:23:7>
|   |-IfStmt 0x13902a720 <line:25:3, line:32:5> has_else
|   | |-BinaryOperator 0x13902a1f0 <line:25:7, col:36> 'int' contains-errors '<'
|   | | |-CallExpr 0x13902a1a8 <col:7, col:32> '<dependent type>' contains-errors
|   | | | |-DeclRefExpr 0x13902a030 <col:7> 'double (double)' Function 0x139029e70 'fabs' 'double (double)'
|   | | | `-BinaryOperator 0x13902a188 <col:12, col:29> '<dependent type>' contains-errors '-'
|   | | |   |-DeclRefExpr 0x13902a050 <col:12> 'double' lvalue Var 0x13900e298 'max' 'double'
|   | | |   `-BinaryOperator 0x13902a168 <col:16, col:29> '<dependent type>' contains-errors '*'
|   | | |     |-RecoveryExpr 0x13902a148 <col:16> '<dependent type>' contains-errors lvalue
|   | | |     `-DeclRefExpr 0x13902a088 <col:29> 'const double' lvalue ParmVar 0x13900dcf0 'red' 'const double'
|   | | `-RecoveryExpr 0x13902a1d0 <col:36> '<dependent type>' contains-errors lvalue
|   | |-CompoundStmt 0x13902a4e0 <line:26:5, line:30:5>
|   | | `-IfStmt 0x13902a4c0 <line:28:7, line:29:15>
|   | |   |-RecoveryExpr 0x13902a400 <line:28:11, col:52> '_Bool' contains-errors
|   | |   `-CompoundAssignOperator 0x13902a490 <line:29:9, col:15> 'double' '+=' ComputeLHSTy='double' ComputeResultTy='double'
|   | |     |-UnaryOperator 0x13902a458 <col:9, col:10> 'double' lvalue prefix '*' cannot overflow
|   | |     | `-ImplicitCastExpr 0x13902a440 <col:10> 'double *' <LValueToRValue>
|   | |     |   `-DeclRefExpr 0x13902a420 <col:10> 'double *' lvalue ParmVar 0x13900dea8 'hue' 'double *'
|   | |     `-FloatingLiteral 0x13902a470 <col:15> 'double' 6.000000e+00
|   | `-NullStmt 0x13902a718 <line:32:5>
|   |-CompoundAssignOperator 0x13902a800 <line:36:3, col:14> 'double' '*=' ComputeLHSTy='double' ComputeResultTy='double'
|   | |-UnaryOperator 0x13902a788 <col:3, col:4> 'double' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x13902a770 <col:4> 'double *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x13902a750 <col:4> 'double *' lvalue ParmVar 0x13900dea8 'hue' 'double *'
|   | `-BinaryOperator 0x13902a7e0 <col:9, col:14> 'double' '/'
|   |   |-FloatingLiteral 0x13902a7a0 <col:9> 'double' 6.000000e+01
|   |   `-FloatingLiteral 0x13902a7c0 <col:14> 'double' 3.600000e+02
|   `-BinaryOperator 0x13902a910 <line:37:3, col:17> 'double' '='
|     |-UnaryOperator 0x13902a868 <col:3, col:4> 'double' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x13902a850 <col:4> 'double *' <LValueToRValue>
|     |   `-DeclRefExpr 0x13902a830 <col:4> 'double *' lvalue ParmVar 0x13900df28 'saturation' 'double *'
|     `-BinaryOperator 0x13902a8f0 <col:15, col:17> 'double' '/'
|       |-ImplicitCastExpr 0x13902a8c0 <col:15> 'double' <LValueToRValue>
|       | `-DeclRefExpr 0x13902a880 <col:15> 'double' lvalue Var 0x13900e218 'c' 'double'
|       `-ImplicitCastExpr 0x13902a8d8 <col:17> 'double' <LValueToRValue>
|         `-DeclRefExpr 0x13902a8a0 <col:17> 'double' lvalue Var 0x13900e298 'max' 'double'
`-FunctionDecl 0x139029e70 <line:25:7> col:7 implicit used fabs 'double (double)' extern
  |-ParmVarDecl 0x139029f70 <<invalid sloc>> <invalid sloc> 'double'
  |-BuiltinAttr 0x139029f18 <<invalid sloc>> Implicit 1004
  |-NoThrowAttr 0x139029fe0 <col:7> Implicit
  `-ConstAttr 0x13902a008 <col:7> Implicit
