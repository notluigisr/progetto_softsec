TranslationUnitDecl 0x140855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1408564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x140855bd0 '__int128'
|-TypedefDecl 0x140856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x140855bf0 'unsigned __int128'
|-TypedefDecl 0x14100be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x14100bc00 'struct __NSConstantString_tag'
|   `-Record 0x140856580 '__NSConstantString_tag'
|-TypedefDecl 0x14100be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x140855d90 '__SVInt8_t'
|-TypedefDecl 0x14100bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x140855db0 '__SVInt16_t'
|-TypedefDecl 0x14100bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x140855dd0 '__SVInt32_t'
|-TypedefDecl 0x14100bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x140855df0 '__SVInt64_t'
|-TypedefDecl 0x14100c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x140855e10 '__SVUint8_t'
|-TypedefDecl 0x14100c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x140855e30 '__SVUint16_t'
|-TypedefDecl 0x14100c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x140855e50 '__SVUint32_t'
|-TypedefDecl 0x14100c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x140855e70 '__SVUint64_t'
|-TypedefDecl 0x14100c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x140855e90 '__SVFloat16_t'
|-TypedefDecl 0x14100c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x140855eb0 '__SVFloat32_t'
|-TypedefDecl 0x14100c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x140855ed0 '__SVFloat64_t'
|-TypedefDecl 0x14100c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x140855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x14100c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x140855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x14100c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x140855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x14100c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x140855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x14100c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x140855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x14100c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x140855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x14100c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x140855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x14100c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x140855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x14100c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x140855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x14100c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x140856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x14100c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x140856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x14100c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x140856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x14100c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x140856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x14100c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x140856090 '__clang_svint8x3_t'
|-TypedefDecl 0x14100c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1408560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x14100c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1408560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x14100c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1408560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x14100c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x140856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x14100ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x140856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x14100cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x140856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x14100cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x140856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x14100cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x140856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x14100d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1408561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x14100d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1408561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x14100d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1408561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x14100d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x140856210 '__clang_svint8x4_t'
|-TypedefDecl 0x14100d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x140856230 '__clang_svint16x4_t'
|-TypedefDecl 0x14100d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x140856250 '__clang_svint32x4_t'
|-TypedefDecl 0x14100d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x140856270 '__clang_svint64x4_t'
|-TypedefDecl 0x14100d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x140856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x14100d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1408562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x14100d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1408562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x14100d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1408562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x14100d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x140856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x14100d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x140856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x14100d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x140856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x14100d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x140856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x14100da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x140856390 '__SVBool_t'
|-TypedefDecl 0x14100da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1408563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x14100dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1408563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x14100db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1408563f0 '__SVCount_t'
|-TypedefDecl 0x14100dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x14100dbb0 'char *'
|   `-BuiltinType 0x1408556b0 'char'
|-TypedefDecl 0x14100dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x14100dbb0 'char *'
|   `-BuiltinType 0x1408556b0 'char'
|-FunctionDecl 0x14100e068 <dataset_diviso_filec/func14620_nonvuln.c:1:1, line:47:1> line:1:1 invalid Curl_compareheader 'int (const char *, const char *, const int, const char *, const int)'
| |-ParmVarDecl 0x14100dcd8 <col:20, col:32> col:32 used headerline 'const char *'
| |-ParmVarDecl 0x14100dd58 <line:2:20, col:32> col:32 used header 'const char *'
| |-ParmVarDecl 0x14100ddf0 <line:3:20, col:33> col:33 referenced invalid hlen 'const int'
| |-ParmVarDecl 0x14100de70 <line:4:20, col:32> col:32 used content 'const char *'
| |-ParmVarDecl 0x14100def0 <line:5:20, col:33> col:33 referenced invalid clen 'const int'
| `-CompoundStmt 0x1410284e8 <line:6:1, line:47:1>
|   |-UnaryExprOrTypeTraitExpr 0x14100e1d0 <line:9:3, col:10> 'unsigned long' contains-errors sizeof
|   | `-RecoveryExpr 0x14100e1b0 <col:10> '<dependent type>' contains-errors lvalue
|   |-DeclStmt 0x14100e270 <line:10:3, col:20>
|   | `-VarDecl 0x14100e208 <col:3, col:15> col:15 used start 'const char *'
|   |-DeclStmt 0x14100e308 <line:11:3, col:18>
|   | `-VarDecl 0x14100e2a0 <col:3, col:15> col:15 used end 'const char *'
|   |-CallExpr 0x1420082f8 <line:12:3, col:19> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x1420082b8 <col:3> 'int ()' Function 0x142008200 'DEBUGASSERT' 'int ()'
|   | `-RecoveryExpr 0x1420082d8 <col:15> '<dependent type>' contains-errors lvalue
|   |-CallExpr 0x142008360 <line:13:3, col:19> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x142008320 <col:3> 'int ()' Function 0x142008200 'DEBUGASSERT' 'int ()'
|   | `-RecoveryExpr 0x142008340 <col:15> '<dependent type>' contains-errors lvalue
|   |-CallExpr 0x142008418 <line:14:3, col:21> 'int'
|   | |-ImplicitCastExpr 0x142008400 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x142008388 <col:3> 'int ()' Function 0x142008200 'DEBUGASSERT' 'int ()'
|   | `-ImplicitCastExpr 0x142008440 <col:15> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1420083a8 <col:15> 'const char *' lvalue ParmVar 0x14100dd58 'header' 'const char *'
|   |-CallExpr 0x1420084b0 <line:15:3, col:22> 'int'
|   | |-ImplicitCastExpr 0x142008498 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x142008458 <col:3> 'int ()' Function 0x142008200 'DEBUGASSERT' 'int ()'
|   | `-ImplicitCastExpr 0x1420084d8 <col:15> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x142008478 <col:15> 'const char *' lvalue ParmVar 0x14100de70 'content' 'const char *'
|   |-IfStmt 0x1420086e8 <line:17:3, line:18:12>
|   | |-UnaryOperator 0x142008688 <line:17:6, col:47> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | | `-CallExpr 0x142008650 <col:7, col:47> '<dependent type>' contains-errors
|   | |   |-DeclRefExpr 0x1420085d0 <col:7> 'int ()' Function 0x142008518 'strncasecompare' 'int ()'
|   | |   |-DeclRefExpr 0x1420085f0 <col:23> 'const char *' lvalue ParmVar 0x14100dcd8 'headerline' 'const char *'
|   | |   |-DeclRefExpr 0x142008610 <col:35> 'const char *' lvalue ParmVar 0x14100dd58 'header' 'const char *'
|   | |   `-RecoveryExpr 0x142008630 <col:43> '<dependent type>' contains-errors lvalue
|   | `-ReturnStmt 0x1420086d8 <line:18:5, col:12>
|   |   `-RecoveryExpr 0x1420086b8 <col:12> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x1420087d0 <line:21:3, col:27> 'const char *' contains-errors '='
|   | |-DeclRefExpr 0x142008708 <col:3> 'const char *' lvalue Var 0x14100e208 'start' 'const char *'
|   | `-UnaryOperator 0x1420087b8 <col:11, col:27> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   `-ArraySubscriptExpr 0x142008798 <col:12, col:27> '<dependent type>' contains-errors lvalue
|   |     |-ImplicitCastExpr 0x142008768 <col:12> 'const char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x142008728 <col:12> 'const char *' lvalue ParmVar 0x14100dcd8 'headerline' 'const char *'
|   |     `-ImplicitCastExpr 0x142008780 <col:23> '<dependent type>' contains-errors <LValueToRValue>
|   |       `-RecoveryExpr 0x142008748 <col:23> '<dependent type>' contains-errors lvalue
|   |-WhileStmt 0x142008a88 <line:24:3, line:25:10>
|   | |-BinaryOperator 0x142008a30 <line:24:9, col:33> 'int' '&&'
|   | | |-ImplicitCastExpr 0x142008a18 <col:9, col:10> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x142008a00 <col:9, col:10> 'char' <LValueToRValue>
|   | | |   `-UnaryOperator 0x142008828 <col:9, col:10> 'const char' lvalue prefix '*' cannot overflow
|   | | |     `-ImplicitCastExpr 0x142008810 <col:10> 'const char *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x1420087f0 <col:10> 'const char *' lvalue Var 0x14100e208 'start' 'const char *'
|   | | `-CallExpr 0x1420089a8 <col:19, col:33> 'int'
|   | |   |-ImplicitCastExpr 0x142008990 <col:19> 'int (*)()' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x142008920 <col:19> 'int ()' Function 0x142008868 'ISSPACE' 'int ()'
|   | |   `-ImplicitCastExpr 0x1420089e8 <col:27, col:28> 'int' <IntegralCast>
|   | |     `-ImplicitCastExpr 0x1420089d0 <col:27, col:28> 'char' <LValueToRValue>
|   | |       `-UnaryOperator 0x142008978 <col:27, col:28> 'const char' lvalue prefix '*' cannot overflow
|   | |         `-ImplicitCastExpr 0x142008960 <col:28> 'const char *' <LValueToRValue>
|   | |           `-DeclRefExpr 0x142008940 <col:28> 'const char *' lvalue Var 0x14100e208 'start' 'const char *'
|   | `-UnaryOperator 0x142008a70 <line:25:5, col:10> 'const char *' postfix '++'
|   |   `-DeclRefExpr 0x142008a50 <col:5> 'const char *' lvalue Var 0x14100e208 'start' 'const char *'
|   |-BinaryOperator 0x141027c30 <line:28:3, col:27> 'const char *' '='
|   | |-DeclRefExpr 0x142008aa8 <col:3> 'const char *' lvalue Var 0x14100e2a0 'end' 'const char *'
|   | `-ImplicitCastExpr 0x141027c18 <col:9, col:27> 'const char *' <NoOp>
|   |   `-CallExpr 0x1420091c8 <col:9, col:27> 'char *'
|   |     |-ImplicitCastExpr 0x1420091b0 <col:9> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x142009110 <col:9> 'char *(const char *, int)' Function 0x142008f30 'strchr' 'char *(const char *, int)'
|   |     |-ImplicitCastExpr 0x141027c00 <col:16> 'const char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x142009130 <col:16> 'const char *' lvalue Var 0x14100e208 'start' 'const char *'
|   |     `-CharacterLiteral 0x142009150 <col:23> 'int' 13
|   |-IfStmt 0x141027f80 <line:29:3, line:36:3>
|   | |-UnaryOperator 0x141027c88 <line:29:6, col:7> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x141027c70 <col:7> 'const char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x141027c50 <col:7> 'const char *' lvalue Var 0x14100e2a0 'end' 'const char *'
|   | `-CompoundStmt 0x141027f60 <col:12, line:36:3>
|   |   |-BinaryOperator 0x141027da8 <line:31:5, col:29> 'const char *' '='
|   |   | |-DeclRefExpr 0x141027ca0 <col:5> 'const char *' lvalue Var 0x14100e2a0 'end' 'const char *'
|   |   | `-ImplicitCastExpr 0x141027d90 <col:11, col:29> 'const char *' <NoOp>
|   |   |   `-CallExpr 0x141027d48 <col:11, col:29> 'char *'
|   |   |     |-ImplicitCastExpr 0x141027d30 <col:11> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x141027cc0 <col:11> 'char *(const char *, int)' Function 0x142008f30 'strchr' 'char *(const char *, int)'
|   |   |     |-ImplicitCastExpr 0x141027d78 <col:18> 'const char *' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x141027ce0 <col:18> 'const char *' lvalue Var 0x14100e208 'start' 'const char *'
|   |   |     `-CharacterLiteral 0x141027d00 <col:25> 'int' 10
|   |   `-IfStmt 0x141027f40 <line:33:5, line:35:31>
|   |     |-UnaryOperator 0x141027e00 <line:33:8, col:9> 'int' prefix '!' cannot overflow
|   |     | `-ImplicitCastExpr 0x141027de8 <col:9> 'const char *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x141027dc8 <col:9> 'const char *' lvalue Var 0x14100e2a0 'end' 'const char *'
|   |     `-BinaryOperator 0x141027f20 <line:35:7, col:31> 'const char *' '='
|   |       |-DeclRefExpr 0x141027e18 <col:7> 'const char *' lvalue Var 0x14100e2a0 'end' 'const char *'
|   |       `-ImplicitCastExpr 0x141027f08 <col:13, col:31> 'const char *' <NoOp>
|   |         `-CallExpr 0x141027ec0 <col:13, col:31> 'char *'
|   |           |-ImplicitCastExpr 0x141027ea8 <col:13> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   |           | `-DeclRefExpr 0x141027e38 <col:13> 'char *(const char *, int)' Function 0x142008f30 'strchr' 'char *(const char *, int)'
|   |           |-ImplicitCastExpr 0x141027ef0 <col:20> 'const char *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x141027e58 <col:20> 'const char *' lvalue Var 0x14100e208 'start' 'const char *'
|   |           `-CharacterLiteral 0x141027e78 <col:27> 'int' 0
|   |-BinaryOperator 0x141028118 <line:38:3, col:13> '<dependent type>' contains-errors '='
|   | |-RecoveryExpr 0x1410280a8 <col:3> '<dependent type>' contains-errors lvalue
|   | `-BinaryOperator 0x1410280f8 <col:9, col:13> 'long' '-'
|   |   |-ImplicitCastExpr 0x1410280c8 <col:9> 'const char *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x141027fb8 <col:9> 'const char *' lvalue Var 0x14100e2a0 'end' 'const char *'
|   |   `-ImplicitCastExpr 0x1410280e0 <col:13> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x141027fd8 <col:13> 'const char *' lvalue Var 0x14100e208 'start' 'const char *'
|   |-ForStmt 0x141028468 <line:41:3, line:44:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1410281f0 <line:41:9, col:16> 'int' contains-errors '>='
|   | | |-RecoveryExpr 0x1410281d0 <col:9> '<dependent type>' contains-errors lvalue
|   | | `-RecoveryExpr 0x141028150 <col:16> '<dependent type>' contains-errors lvalue
|   | |-BinaryOperator 0x141028310 <col:22, col:34> 'const char *' contains-errors ','
|   | | |-UnaryOperator 0x1410282f8 <col:22, col:25> '<dependent type>' contains-errors postfix '--' cannot overflow
|   | | | `-RecoveryExpr 0x1410282d8 <col:22> '<dependent type>' contains-errors lvalue
|   | | `-UnaryOperator 0x141028260 <col:29, col:34> 'const char *' postfix '++'
|   | |   `-DeclRefExpr 0x141028240 <col:29> 'const char *' lvalue Var 0x14100e208 'start' 'const char *'
|   | `-CompoundStmt 0x141028450 <col:38, line:44:3>
|   |   `-IfStmt 0x141028430 <line:42:5, line:43:14>
|   |     |-CallExpr 0x1410283b0 <line:42:8, col:44> '<dependent type>' contains-errors
|   |     | |-DeclRefExpr 0x141028330 <col:8> 'int ()' Function 0x142008518 'strncasecompare' 'int ()'
|   |     | |-DeclRefExpr 0x141028350 <col:24> 'const char *' lvalue Var 0x14100e208 'start' 'const char *'
|   |     | |-DeclRefExpr 0x141028370 <col:31> 'const char *' lvalue ParmVar 0x14100de70 'content' 'const char *'
|   |     | `-RecoveryExpr 0x141028390 <col:40> '<dependent type>' contains-errors lvalue
|   |     `-ReturnStmt 0x141028420 <line:43:7, col:14>
|   |       `-RecoveryExpr 0x141028400 <col:14> '<dependent type>' contains-errors lvalue
|   `-ReturnStmt 0x1410284d8 <line:46:3, col:10>
|     `-RecoveryExpr 0x1410284b8 <col:10> '<dependent type>' contains-errors lvalue
`-FunctionDecl 0x142008f30 <line:28:9> col:9 implicit used strchr 'char *(const char *, int)' extern
  |-ParmVarDecl 0x142009030 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x142009098 <<invalid sloc>> <invalid sloc> 'int'
  `-BuiltinAttr 0x142008fd8 <<invalid sloc>> Implicit 893
