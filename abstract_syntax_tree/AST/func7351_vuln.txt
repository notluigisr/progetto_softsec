TranslationUnitDecl 0x14d055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x14d0564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x14d055bd0 '__int128'
|-TypedefDecl 0x14d056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x14d055bf0 'unsigned __int128'
|-TypedefDecl 0x14d80be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x14d80bc00 'struct __NSConstantString_tag'
|   `-Record 0x14d056580 '__NSConstantString_tag'
|-TypedefDecl 0x14d80be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x14d055d90 '__SVInt8_t'
|-TypedefDecl 0x14d80bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x14d055db0 '__SVInt16_t'
|-TypedefDecl 0x14d80bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x14d055dd0 '__SVInt32_t'
|-TypedefDecl 0x14d80bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x14d055df0 '__SVInt64_t'
|-TypedefDecl 0x14d80c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x14d055e10 '__SVUint8_t'
|-TypedefDecl 0x14d80c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x14d055e30 '__SVUint16_t'
|-TypedefDecl 0x14d80c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x14d055e50 '__SVUint32_t'
|-TypedefDecl 0x14d80c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x14d055e70 '__SVUint64_t'
|-TypedefDecl 0x14d80c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x14d055e90 '__SVFloat16_t'
|-TypedefDecl 0x14d80c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x14d055eb0 '__SVFloat32_t'
|-TypedefDecl 0x14d80c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x14d055ed0 '__SVFloat64_t'
|-TypedefDecl 0x14d80c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x14d055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x14d80c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x14d055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x14d80c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x14d055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x14d80c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x14d055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x14d80c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x14d055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x14d80c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x14d055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x14d80c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x14d055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x14d80c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x14d055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x14d80c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x14d055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x14d80c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x14d056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x14d80c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x14d056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x14d80c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x14d056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x14d80c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x14d056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x14d80c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x14d056090 '__clang_svint8x3_t'
|-TypedefDecl 0x14d80c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x14d0560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x14d80c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x14d0560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x14d80c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x14d0560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x14d80c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x14d056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x14d80ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x14d056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x14d80cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x14d056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x14d80cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x14d056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x14d80cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x14d056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x14d80d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x14d0561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x14d80d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x14d0561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x14d80d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x14d0561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x14d80d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x14d056210 '__clang_svint8x4_t'
|-TypedefDecl 0x14d80d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x14d056230 '__clang_svint16x4_t'
|-TypedefDecl 0x14d80d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x14d056250 '__clang_svint32x4_t'
|-TypedefDecl 0x14d80d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x14d056270 '__clang_svint64x4_t'
|-TypedefDecl 0x14d80d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x14d056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x14d80d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x14d0562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x14d80d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x14d0562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x14d80d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x14d0562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x14d80d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x14d056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x14d80d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x14d056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x14d80d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x14d056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x14d80d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x14d056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x14d80da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x14d056390 '__SVBool_t'
|-TypedefDecl 0x14d80da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x14d0563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x14d80dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x14d0563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x14d80db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x14d0563f0 '__SVCount_t'
|-TypedefDecl 0x14d80dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x14d80dbb0 'char *'
|   `-BuiltinType 0x14d0556b0 'char'
|-TypedefDecl 0x14d80dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x14d80dbb0 'char *'
|   `-BuiltinType 0x14d0556b0 'char'
`-FunctionDecl 0x14d80dfd8 <dataset_diviso_filec/func7351_vuln.c:1:1, line:80:1> line:1:1 invalid resp_get_length 'int (int *, const char *, int, const char **)'
  |-ParmVarDecl 0x14d80dd28 <col:17, col:37> col:37 invalid ndo 'int *'
  |-ParmVarDecl 0x14d80dda8 <col:42, col:65> col:65 used bp 'const char *' register
  |-ParmVarDecl 0x14d80de28 <col:69, col:73> col:73 used len 'int'
  |-ParmVarDecl 0x14d80ded8 <col:78, col:93> col:93 used endp 'const char **'
  `-CompoundStmt 0x14d829a60 <line:2:1, line:80:1>
    |-DeclStmt 0x14d80e120 <line:3:5, col:15>
    | `-VarDecl 0x14d80e0b8 <col:5, col:9> col:9 used result 'int'
    |-DeclStmt 0x14d80e1b0 <line:4:5, col:13>
    | `-VarDecl 0x14d80e148 <col:5, col:12> col:12 used c 'char'
    |-DeclStmt 0x14d80e248 <line:5:5, col:18>
    | `-VarDecl 0x14d80e1e0 <col:5, col:9> col:9 used saw_digit 'int'
    |-DeclStmt 0x14d80e2e0 <line:6:5, col:12>
    | `-VarDecl 0x14d80e278 <col:5, col:9> col:9 used neg 'int'
    |-DeclStmt 0x14d80e378 <line:7:5, col:18>
    | `-VarDecl 0x14d80e310 <col:5, col:9> col:9 used too_large 'int'
    |-IfStmt 0x14d827488 <line:9:5, line:10:14>
    | |-BinaryOperator 0x14d827400 <line:9:9, col:16> 'int' '=='
    | | |-ImplicitCastExpr 0x14d80e3d0 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14d80e390 <col:9> 'int' lvalue ParmVar 0x14d80de28 'len' 'int'
    | | `-IntegerLiteral 0x14d80e3b0 <col:16> 'int' 0
    | `-GotoStmt 0x14d827470 <line:10:9, col:14> 'trunc' 0x14d827420
    |-CallExpr 0x14d8276b8 <line:11:5, col:18> 'int'
    | |-ImplicitCastExpr 0x14d8276a0 <col:5> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x14d827600 <col:5> 'int ()' Function 0x14d827548 'ND_TCHECK' 'int ()'
    | `-ImplicitCastExpr 0x14d8276f8 <col:15, col:16> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x14d8276e0 <col:15, col:16> 'char' <LValueToRValue>
    |     `-UnaryOperator 0x14d827658 <col:15, col:16> 'const char' lvalue prefix '*' cannot overflow
    |       `-ImplicitCastExpr 0x14d827640 <col:16> 'const char *' <LValueToRValue>
    |         `-DeclRefExpr 0x14d827620 <col:16> 'const char *' lvalue ParmVar 0x14d80dda8 'bp' 'const char *'
    |-BinaryOperator 0x14d827750 <line:12:5, col:17> 'int' '='
    | |-DeclRefExpr 0x14d827710 <col:5> 'int' lvalue Var 0x14d80e310 'too_large' 'int'
    | `-IntegerLiteral 0x14d827730 <col:17> 'int' 0
    |-BinaryOperator 0x14d8277b0 <line:13:5, col:11> 'int' '='
    | |-DeclRefExpr 0x14d827770 <col:5> 'int' lvalue Var 0x14d80e278 'neg' 'int'
    | `-IntegerLiteral 0x14d827790 <col:11> 'int' 0
    |-IfStmt 0x14d827980 <line:14:5, line:18:5>
    | |-BinaryOperator 0x14d827868 <line:14:9, col:16> 'int' '=='
    | | |-ImplicitCastExpr 0x14d827850 <col:9, col:10> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x14d827838 <col:9, col:10> 'char' <LValueToRValue>
    | | |   `-UnaryOperator 0x14d827808 <col:9, col:10> 'const char' lvalue prefix '*' cannot overflow
    | | |     `-ImplicitCastExpr 0x14d8277f0 <col:10> 'const char *' <LValueToRValue>
    | | |       `-DeclRefExpr 0x14d8277d0 <col:10> 'const char *' lvalue ParmVar 0x14d80dda8 'bp' 'const char *'
    | | `-CharacterLiteral 0x14d827820 <col:16> 'int' 45
    | `-CompoundStmt 0x14d827958 <col:21, line:18:5>
    |   |-BinaryOperator 0x14d8278c8 <line:15:9, col:15> 'int' '='
    |   | |-DeclRefExpr 0x14d827888 <col:9> 'int' lvalue Var 0x14d80e278 'neg' 'int'
    |   | `-IntegerLiteral 0x14d8278a8 <col:15> 'int' 1
    |   |-UnaryOperator 0x14d827908 <line:16:9, col:11> 'const char *' postfix '++'
    |   | `-DeclRefExpr 0x14d8278e8 <col:9> 'const char *' lvalue ParmVar 0x14d80dda8 'bp' 'const char *'
    |   `-UnaryOperator 0x14d827940 <line:17:9, col:12> 'int' postfix '--'
    |     `-DeclRefExpr 0x14d827920 <col:9> 'int' lvalue ParmVar 0x14d80de28 'len' 'int'
    |-BinaryOperator 0x14d8279e0 <line:19:5, col:14> 'int' '='
    | |-DeclRefExpr 0x14d8279a0 <col:5> 'int' lvalue Var 0x14d80e0b8 'result' 'int'
    | `-IntegerLiteral 0x14d8279c0 <col:14> 'int' 0
    |-BinaryOperator 0x14d827a40 <line:20:5, col:17> 'int' '='
    | |-DeclRefExpr 0x14d827a00 <col:5> 'int' lvalue Var 0x14d80e1e0 'saw_digit' 'int'
    | `-IntegerLiteral 0x14d827a20 <col:17> 'int' 0
    |-ForStmt 0x14d828eb8 <line:22:5, line:47:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | `-CompoundStmt 0x14d828e60 <line:22:14, line:47:5>
    |   |-IfStmt 0x14d827af0 <line:23:9, line:24:18>
    |   | |-BinaryOperator 0x14d827ab8 <line:23:13, col:20> 'int' '=='
    |   | | |-ImplicitCastExpr 0x14d827aa0 <col:13> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x14d827a60 <col:13> 'int' lvalue ParmVar 0x14d80de28 'len' 'int'
    |   | | `-IntegerLiteral 0x14d827a80 <col:20> 'int' 0
    |   | `-GotoStmt 0x14d827ad8 <line:24:13, col:18> 'trunc' 0x14d827420
    |   |-CallExpr 0x14d827b98 <line:25:9, col:22> 'int'
    |   | |-ImplicitCastExpr 0x14d827b80 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x14d827b10 <col:9> 'int ()' Function 0x14d827548 'ND_TCHECK' 'int ()'
    |   | `-ImplicitCastExpr 0x14d827bd8 <col:19, col:20> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x14d827bc0 <col:19, col:20> 'char' <LValueToRValue>
    |   |     `-UnaryOperator 0x14d827b68 <col:19, col:20> 'const char' lvalue prefix '*' cannot overflow
    |   |       `-ImplicitCastExpr 0x14d827b50 <col:20> 'const char *' <LValueToRValue>
    |   |         `-DeclRefExpr 0x14d827b30 <col:20> 'const char *' lvalue ParmVar 0x14d80dda8 'bp' 'const char *'
    |   |-BinaryOperator 0x14d827c78 <line:26:9, col:14> 'char' '='
    |   | |-DeclRefExpr 0x14d827bf0 <col:9> 'char' lvalue Var 0x14d80e148 'c' 'char'
    |   | `-ImplicitCastExpr 0x14d827c60 <col:13, col:14> 'char' <LValueToRValue>
    |   |   `-UnaryOperator 0x14d827c48 <col:13, col:14> 'const char' lvalue prefix '*' cannot overflow
    |   |     `-ImplicitCastExpr 0x14d827c30 <col:14> 'const char *' <LValueToRValue>
    |   |       `-DeclRefExpr 0x14d827c10 <col:14> 'const char *' lvalue ParmVar 0x14d80dda8 'bp' 'const char *'
    |   |-IfStmt 0x14d827f00 <line:27:9, line:31:9>
    |   | |-UnaryOperator 0x14d827de8 <line:27:13, col:35> 'int' prefix '!' cannot overflow
    |   | | `-ParenExpr 0x14d827dc8 <col:14, col:35> 'int'
    |   | |   `-BinaryOperator 0x14d827da8 <col:15, col:32> 'int' '&&'
    |   | |     |-BinaryOperator 0x14d827d00 <col:15, col:20> 'int' '>='
    |   | |     | |-ImplicitCastExpr 0x14d827ce8 <col:15> 'int' <IntegralCast>
    |   | |     | | `-ImplicitCastExpr 0x14d827cd0 <col:15> 'char' <LValueToRValue>
    |   | |     | |   `-DeclRefExpr 0x14d827c98 <col:15> 'char' lvalue Var 0x14d80e148 'c' 'char'
    |   | |     | `-CharacterLiteral 0x14d827cb8 <col:20> 'int' 48
    |   | |     `-BinaryOperator 0x14d827d88 <col:27, col:32> 'int' '<='
    |   | |       |-ImplicitCastExpr 0x14d827d70 <col:27> 'int' <IntegralCast>
    |   | |       | `-ImplicitCastExpr 0x14d827d58 <col:27> 'char' <LValueToRValue>
    |   | |       |   `-DeclRefExpr 0x14d827d20 <col:27> 'char' lvalue Var 0x14d80e148 'c' 'char'
    |   | |       `-CharacterLiteral 0x14d827d40 <col:32> 'int' 57
    |   | `-CompoundStmt 0x14d827ee0 <col:38, line:31:9>
    |   |   |-IfStmt 0x14d827eb8 <line:28:13, line:29:22>
    |   |   | |-UnaryOperator 0x14d827e38 <line:28:17, col:18> 'int' prefix '!' cannot overflow
    |   |   | | `-ImplicitCastExpr 0x14d827e20 <col:18> 'int' <LValueToRValue>
    |   |   | |   `-DeclRefExpr 0x14d827e00 <col:18> 'int' lvalue Var 0x14d80e1e0 'saw_digit' 'int'
    |   |   | `-GotoStmt 0x14d827ea0 <line:29:17, col:22> 'invalid' 0x14d827e50
    |   |   `-BreakStmt 0x14d827ed8 <line:30:13>
    |   |-CompoundAssignOperator 0x14d827f58 <line:32:9, col:14> 'char' '-=' ComputeLHSTy='int' ComputeResultTy='int'
    |   | |-DeclRefExpr 0x14d827f20 <col:9> 'char' lvalue Var 0x14d80e148 'c' 'char'
    |   | `-CharacterLiteral 0x14d827f40 <col:14> 'int' 48
    |   |-IfStmt 0x14d828360 <line:33:9, line:43:9> has_else
    |   | |-RecoveryExpr 0x14d828000 <line:33:13, col:35> '_Bool' contains-errors
    |   | |-CompoundStmt 0x14d828080 <col:38, line:36:9>
    |   | | `-BinaryOperator 0x14d828060 <line:35:13, col:25> 'int' '='
    |   | |   |-DeclRefExpr 0x14d828020 <col:13> 'int' lvalue Var 0x14d80e310 'too_large' 'int'
    |   | |   `-IntegerLiteral 0x14d828040 <col:25> 'int' 1
    |   | `-CompoundStmt 0x14d828340 <line:36:16, line:43:9>
    |   |   |-CompoundAssignOperator 0x14d8280d8 <line:37:13, col:23> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
    |   |   | |-DeclRefExpr 0x14d828098 <col:13> 'int' lvalue Var 0x14d80e0b8 'result' 'int'
    |   |   | `-IntegerLiteral 0x14d8280b8 <col:23> 'int' 10
    |   |   `-IfStmt 0x14d828310 <line:38:13, line:42:27> has_else
    |   |     |-RecoveryExpr 0x14d8281d8 <line:38:17, col:55> '_Bool' contains-errors
    |   |     |-CompoundStmt 0x14d828258 <col:58, line:41:13>
    |   |     | `-BinaryOperator 0x14d828238 <line:40:17, col:29> 'int' '='
    |   |     |   |-DeclRefExpr 0x14d8281f8 <col:17> 'int' lvalue Var 0x14d80e310 'too_large' 'int'
    |   |     |   `-IntegerLiteral 0x14d828218 <col:29> 'int' 1
    |   |     `-CompoundAssignOperator 0x14d8282e0 <line:42:17, col:27> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |   |       |-DeclRefExpr 0x14d828270 <col:17> 'int' lvalue Var 0x14d80e0b8 'result' 'int'
    |   |       `-ImplicitCastExpr 0x14d8282c8 <col:27> 'int' <IntegralCast>
    |   |         `-ImplicitCastExpr 0x14d8282b0 <col:27> 'char' <LValueToRValue>
    |   |           `-DeclRefExpr 0x14d828290 <col:27> 'char' lvalue Var 0x14d80e148 'c' 'char'
    |   |-UnaryOperator 0x14d8283b0 <line:44:9, col:11> 'const char *' postfix '++'
    |   | `-DeclRefExpr 0x14d828390 <col:9> 'const char *' lvalue ParmVar 0x14d80dda8 'bp' 'const char *'
    |   |-UnaryOperator 0x14d8283e8 <line:45:9, col:12> 'int' postfix '--'
    |   | `-DeclRefExpr 0x14d8283c8 <col:9> 'int' lvalue ParmVar 0x14d80de28 'len' 'int'
    |   `-BinaryOperator 0x14d828e40 <line:46:9, col:21> 'int' '='
    |     |-DeclRefExpr 0x14d828e00 <col:9> 'int' lvalue Var 0x14d80e1e0 'saw_digit' 'int'
    |     `-IntegerLiteral 0x14d828e20 <col:21> 'int' 1
    |-IfStmt 0x14d828f58 <line:48:5, line:49:14>
    | |-UnaryOperator 0x14d828f28 <line:48:9, col:10> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x14d828f10 <col:10> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x14d828ef0 <col:10> 'int' lvalue Var 0x14d80e1e0 'saw_digit' 'int'
    | `-GotoStmt 0x14d828f40 <line:49:9, col:14> 'invalid' 0x14d827e50
    |-IfStmt 0x14d829008 <line:52:5, line:53:14>
    | |-BinaryOperator 0x14d828fd0 <line:52:9, col:16> 'int' '=='
    | | |-ImplicitCastExpr 0x14d828fb8 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14d828f78 <col:9> 'int' lvalue ParmVar 0x14d80de28 'len' 'int'
    | | `-IntegerLiteral 0x14d828f98 <col:16> 'int' 0
    | `-GotoStmt 0x14d828ff0 <line:53:9, col:14> 'trunc' 0x14d827420
    |-CallExpr 0x14d8290b0 <line:54:5, col:18> 'int'
    | |-ImplicitCastExpr 0x14d829098 <col:5> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x14d829028 <col:5> 'int ()' Function 0x14d827548 'ND_TCHECK' 'int ()'
    | `-ImplicitCastExpr 0x14d8290f0 <col:15, col:16> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x14d8290d8 <col:15, col:16> 'char' <LValueToRValue>
    |     `-UnaryOperator 0x14d829080 <col:15, col:16> 'const char' lvalue prefix '*' cannot overflow
    |       `-ImplicitCastExpr 0x14d829068 <col:16> 'const char *' <LValueToRValue>
    |         `-DeclRefExpr 0x14d829048 <col:16> 'const char *' lvalue ParmVar 0x14d80dda8 'bp' 'const char *'
    |-IfStmt 0x14d8291d8 <line:55:5, line:56:14>
    | |-BinaryOperator 0x14d8291a0 <line:55:9, col:16> 'int' '!='
    | | |-ImplicitCastExpr 0x14d829188 <col:9, col:10> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x14d829170 <col:9, col:10> 'char' <LValueToRValue>
    | | |   `-UnaryOperator 0x14d829140 <col:9, col:10> 'const char' lvalue prefix '*' cannot overflow
    | | |     `-ImplicitCastExpr 0x14d829128 <col:10> 'const char *' <LValueToRValue>
    | | |       `-DeclRefExpr 0x14d829108 <col:10> 'const char *' lvalue ParmVar 0x14d80dda8 'bp' 'const char *'
    | | `-CharacterLiteral 0x14d829158 <col:16> 'int' 13
    | `-GotoStmt 0x14d8291c0 <line:56:9, col:14> 'invalid' 0x14d827e50
    |-UnaryOperator 0x14d829218 <line:57:5, col:7> 'const char *' postfix '++'
    | `-DeclRefExpr 0x14d8291f8 <col:5> 'const char *' lvalue ParmVar 0x14d80dda8 'bp' 'const char *'
    |-UnaryOperator 0x14d829250 <line:58:5, col:8> 'int' postfix '--'
    | `-DeclRefExpr 0x14d829230 <col:5> 'int' lvalue ParmVar 0x14d80de28 'len' 'int'
    |-IfStmt 0x14d8292f8 <line:59:5, line:60:14>
    | |-BinaryOperator 0x14d8292c0 <line:59:9, col:16> 'int' '=='
    | | |-ImplicitCastExpr 0x14d8292a8 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14d829268 <col:9> 'int' lvalue ParmVar 0x14d80de28 'len' 'int'
    | | `-IntegerLiteral 0x14d829288 <col:16> 'int' 0
    | `-GotoStmt 0x14d8292e0 <line:60:9, col:14> 'trunc' 0x14d827420
    |-CallExpr 0x14d8293a0 <line:61:5, col:18> 'int'
    | |-ImplicitCastExpr 0x14d829388 <col:5> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x14d829318 <col:5> 'int ()' Function 0x14d827548 'ND_TCHECK' 'int ()'
    | `-ImplicitCastExpr 0x14d8293e0 <col:15, col:16> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x14d8293c8 <col:15, col:16> 'char' <LValueToRValue>
    |     `-UnaryOperator 0x14d829370 <col:15, col:16> 'const char' lvalue prefix '*' cannot overflow
    |       `-ImplicitCastExpr 0x14d829358 <col:16> 'const char *' <LValueToRValue>
    |         `-DeclRefExpr 0x14d829338 <col:16> 'const char *' lvalue ParmVar 0x14d80dda8 'bp' 'const char *'
    |-IfStmt 0x14d8294c8 <line:62:5, line:63:14>
    | |-BinaryOperator 0x14d829490 <line:62:9, col:16> 'int' '!='
    | | |-ImplicitCastExpr 0x14d829478 <col:9, col:10> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x14d829460 <col:9, col:10> 'char' <LValueToRValue>
    | | |   `-UnaryOperator 0x14d829430 <col:9, col:10> 'const char' lvalue prefix '*' cannot overflow
    | | |     `-ImplicitCastExpr 0x14d829418 <col:10> 'const char *' <LValueToRValue>
    | | |       `-DeclRefExpr 0x14d8293f8 <col:10> 'const char *' lvalue ParmVar 0x14d80dda8 'bp' 'const char *'
    | | `-CharacterLiteral 0x14d829448 <col:16> 'int' 10
    | `-GotoStmt 0x14d8294b0 <line:63:9, col:14> 'invalid' 0x14d827e50
    |-UnaryOperator 0x14d829508 <line:64:5, col:7> 'const char *' postfix '++'
    | `-DeclRefExpr 0x14d8294e8 <col:5> 'const char *' lvalue ParmVar 0x14d80dda8 'bp' 'const char *'
    |-UnaryOperator 0x14d829540 <line:65:5, col:8> 'int' postfix '--'
    | `-DeclRefExpr 0x14d829520 <col:5> 'int' lvalue ParmVar 0x14d80de28 'len' 'int'
    |-BinaryOperator 0x14d8295e0 <line:66:5, col:13> 'const char *' '='
    | |-UnaryOperator 0x14d829590 <col:5, col:6> 'const char *' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x14d829578 <col:6> 'const char **' <LValueToRValue>
    | |   `-DeclRefExpr 0x14d829558 <col:6> 'const char **' lvalue ParmVar 0x14d80ded8 'endp' 'const char **'
    | `-ImplicitCastExpr 0x14d8295c8 <col:13> 'const char *' <LValueToRValue>
    |   `-DeclRefExpr 0x14d8295a8 <col:13> 'const char *' lvalue ParmVar 0x14d80dda8 'bp' 'const char *'
    |-IfStmt 0x14d829828 <line:67:5, line:72:5>
    | |-ImplicitCastExpr 0x14d829620 <line:67:9> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x14d829600 <col:9> 'int' lvalue Var 0x14d80e278 'neg' 'int'
    | `-CompoundStmt 0x14d829808 <col:14, line:72:5>
    |   |-IfStmt 0x14d829770 <line:69:9, line:70:23>
    |   | |-BinaryOperator 0x14d8296e8 <line:69:13, col:36> 'int' '||'
    |   | | |-ImplicitCastExpr 0x14d8296d0 <col:13> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x14d829638 <col:13> 'int' lvalue Var 0x14d80e310 'too_large' 'int'
    |   | | `-BinaryOperator 0x14d8296b0 <col:26, col:36> 'int' '!='
    |   | |   |-ImplicitCastExpr 0x14d829698 <col:26> 'int' <LValueToRValue>
    |   | |   | `-DeclRefExpr 0x14d829658 <col:26> 'int' lvalue Var 0x14d80e0b8 'result' 'int'
    |   | |   `-IntegerLiteral 0x14d829678 <col:36> 'int' 1
    |   | `-ReturnStmt 0x14d829760 <line:70:13, col:23>
    |   |   `-ParenExpr 0x14d829740 <col:20, col:23> 'int'
    |   |     `-UnaryOperator 0x14d829728 <col:21, col:22> 'int' prefix '-'
    |   |       `-IntegerLiteral 0x14d829708 <col:22> 'int' 4
    |   `-BinaryOperator 0x14d8297e8 <line:71:9, col:19> 'int' '='
    |     |-DeclRefExpr 0x14d829790 <col:9> 'int' lvalue Var 0x14d80e0b8 'result' 'int'
    |     `-UnaryOperator 0x14d8297d0 <col:18, col:19> 'int' prefix '-'
    |       `-IntegerLiteral 0x14d8297b0 <col:19> 'int' 1
    |-ReturnStmt 0x14d829940 <line:73:5, col:36>
    | `-ParenExpr 0x14d829920 <col:12, col:36> 'int'
    |   `-ConditionalOperator 0x14d8298f0 <col:13, col:30> 'int'
    |     |-ImplicitCastExpr 0x14d8298c0 <col:13> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x14d829848 <col:13> 'int' lvalue Var 0x14d80e310 'too_large' 'int'
    |     |-UnaryOperator 0x14d829888 <col:25, col:26> 'int' prefix '-'
    |     | `-IntegerLiteral 0x14d829868 <col:26> 'int' 3
    |     `-ImplicitCastExpr 0x14d8298d8 <col:30> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x14d8298a0 <col:30> 'int' lvalue Var 0x14d80e0b8 'result' 'int'
    |-LabelStmt 0x14d8299b8 <line:75:1, line:76:15> 'trunc'
    | `-ReturnStmt 0x14d8299a8 <col:5, col:15>
    |   `-ParenExpr 0x14d829988 <col:12, col:15> 'int'
    |     `-UnaryOperator 0x14d829970 <col:13, col:14> 'int' prefix '-'
    |       `-IntegerLiteral 0x14d829950 <col:14> 'int' 2
    `-LabelStmt 0x14d829a40 <line:78:1, line:79:15> 'invalid'
      `-ReturnStmt 0x14d829a30 <col:5, col:15>
        `-ParenExpr 0x14d829a10 <col:12, col:15> 'int'
          `-UnaryOperator 0x14d8299f8 <col:13, col:14> 'int' prefix '-'
            `-IntegerLiteral 0x14d8299d8 <col:14> 'int' 5
