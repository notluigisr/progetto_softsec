TranslationUnitDecl 0x151855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1518564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x151855bd0 '__int128'
|-TypedefDecl 0x151856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x151855bf0 'unsigned __int128'
|-TypedefDecl 0x15200be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x15200bc00 'struct __NSConstantString_tag'
|   `-Record 0x151856580 '__NSConstantString_tag'
|-TypedefDecl 0x15200be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x151855d90 '__SVInt8_t'
|-TypedefDecl 0x15200bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x151855db0 '__SVInt16_t'
|-TypedefDecl 0x15200bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x151855dd0 '__SVInt32_t'
|-TypedefDecl 0x15200bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x151855df0 '__SVInt64_t'
|-TypedefDecl 0x15200c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x151855e10 '__SVUint8_t'
|-TypedefDecl 0x15200c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x151855e30 '__SVUint16_t'
|-TypedefDecl 0x15200c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x151855e50 '__SVUint32_t'
|-TypedefDecl 0x15200c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x151855e70 '__SVUint64_t'
|-TypedefDecl 0x15200c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x151855e90 '__SVFloat16_t'
|-TypedefDecl 0x15200c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x151855eb0 '__SVFloat32_t'
|-TypedefDecl 0x15200c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x151855ed0 '__SVFloat64_t'
|-TypedefDecl 0x15200c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x151855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x15200c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x151855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x15200c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x151855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x15200c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x151855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x15200c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x151855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x15200c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x151855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x15200c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x151855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x15200c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x151855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x15200c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x151855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x15200c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x151856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x15200c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x151856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x15200c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x151856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x15200c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x151856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x15200c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x151856090 '__clang_svint8x3_t'
|-TypedefDecl 0x15200c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1518560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x15200c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1518560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x15200c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1518560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x15200c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x151856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x15200ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x151856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x15200cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x151856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x15200cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x151856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x15200cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x151856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x15200d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1518561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x15200d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1518561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x15200d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1518561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x15200d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x151856210 '__clang_svint8x4_t'
|-TypedefDecl 0x15200d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x151856230 '__clang_svint16x4_t'
|-TypedefDecl 0x15200d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x151856250 '__clang_svint32x4_t'
|-TypedefDecl 0x15200d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x151856270 '__clang_svint64x4_t'
|-TypedefDecl 0x15200d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x151856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x15200d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1518562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x15200d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1518562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x15200d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1518562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x15200d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x151856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x15200d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x151856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x15200d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x151856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x15200d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x151856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x15200da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x151856390 '__SVBool_t'
|-TypedefDecl 0x15200da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1518563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x15200dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1518563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x15200db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1518563f0 '__SVCount_t'
|-TypedefDecl 0x15200dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x15200dbb0 'char *'
|   `-BuiltinType 0x1518556b0 'char'
|-TypedefDecl 0x15200dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x15200dbb0 'char *'
|   `-BuiltinType 0x1518556b0 'char'
|-FunctionDecl 0x15200dff8 <dataset_diviso_filec/func672_vuln.c:1:1, line:107:1> line:1:22 invalid GenerateDifferentialNoise 'int (int *, const int, const int, const double)'
| |-ParmVarDecl 0x15200dd28 <col:48, col:60> col:60 invalid random_info 'int *'
| |-ParmVarDecl 0x15200dda8 <line:2:3, col:17> col:17 invalid pixel 'const int'
| |-ParmVarDecl 0x15200de28 <col:23, col:39> col:39 invalid noise_type 'const int'
| |-ParmVarDecl 0x15200dea8 <col:50, col:63> col:63 attenuate 'const double'
| `-CompoundStmt 0x15280c6b0 <line:3:1, line:107:1>
|   |-DeclStmt 0x15200e2e8 <line:13:3, line:17:10>
|   | |-VarDecl 0x15200e0d8 <line:13:3, line:14:5> col:5 used alpha 'double'
|   | |-VarDecl 0x15200e158 <line:13:3, line:15:5> col:5 used beta 'double'
|   | |-VarDecl 0x15200e1d8 <line:13:3, line:16:5> col:5 used noise 'double'
|   | `-VarDecl 0x15200e258 <line:13:3, line:17:5> col:5 used sigma 'double'
|   |-BinaryOperator 0x152027520 <line:19:3, col:41> 'double' contains-errors '='
|   | |-DeclRefExpr 0x15200e300 <col:3> 'double' lvalue Var 0x15200e0d8 'alpha' 'double'
|   | `-CallExpr 0x1520274f8 <col:9, col:41> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x1520274b8 <col:9> 'int ()' Function 0x152027400 'GetPseudoRandomValue' 'int ()'
|   |   `-RecoveryExpr 0x1520274d8 <col:30> '<dependent type>' contains-errors lvalue
|   |-SwitchStmt 0x152027578 <line:20:3, line:105:3>
|   | |-ImplicitCastExpr 0x152027560 <line:20:11> '<dependent type>' contains-errors <LValueToRValue>
|   | | `-RecoveryExpr 0x152027540 <col:11> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x15280c5e8 <line:21:3, line:105:3>
|   |   |-DefaultStmt 0x152027778 <line:23:5, line:27:5>
|   |   | `-CompoundStmt 0x152027760 <line:24:5, line:27:5>
|   |   |   `-BreakStmt 0x152027758 <line:26:7>
|   |   |-CompoundStmt 0x152808e18 <line:29:5, line:43:5>
|   |   | |-DeclStmt 0x1520278c8 <line:30:7, line:32:12>
|   |   | | |-VarDecl 0x1520277c8 <line:30:7, line:31:9> col:9 used gamma 'double'
|   |   | | `-VarDecl 0x152027848 <line:30:7, line:32:9> col:9 used tau 'double'
|   |   | |-IfStmt 0x152028150 <line:34:7, line:35:15>
|   |   | | |-BinaryOperator 0x1520280d0 <line:34:11, col:25> 'int' contains-errors '<'
|   |   | | | |-CallExpr 0x152028070 <col:11, col:21> 'double'
|   |   | | | | |-ImplicitCastExpr 0x152028058 <col:11> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | `-DeclRefExpr 0x152027f00 <col:11> 'double (double)' Function 0x152027d40 'fabs' 'double (double)'
|   |   | | | | `-ImplicitCastExpr 0x152028098 <col:16> 'double' <LValueToRValue>
|   |   | | | |   `-DeclRefExpr 0x152027f20 <col:16> 'double' lvalue Var 0x15200e0d8 'alpha' 'double'
|   |   | | | `-RecoveryExpr 0x1520280b0 <col:25> '<dependent type>' contains-errors lvalue
|   |   | | `-BinaryOperator 0x152028130 <line:35:9, col:15> 'double' '='
|   |   | |   |-DeclRefExpr 0x1520280f0 <col:9> 'double' lvalue Var 0x15200e0d8 'alpha' 'double'
|   |   | |   `-FloatingLiteral 0x152028110 <col:15> 'double' 1.000000e+00
|   |   | |-BinaryOperator 0x1520281f8 <line:36:7, col:44> 'double' contains-errors '='
|   |   | | |-DeclRefExpr 0x152028170 <col:7> 'double' lvalue Var 0x15200e158 'beta' 'double'
|   |   | | `-CallExpr 0x1520281d0 <col:12, col:44> '<dependent type>' contains-errors
|   |   | |   |-DeclRefExpr 0x152028190 <col:12> 'int ()' Function 0x152027400 'GetPseudoRandomValue' 'int ()'
|   |   | |   `-RecoveryExpr 0x1520281b0 <col:33> '<dependent type>' contains-errors lvalue
|   |   | |-BinaryOperator 0x152808510 <line:37:7, col:33> 'double' '='
|   |   | | |-DeclRefExpr 0x152028218 <col:7> 'double' lvalue Var 0x1520277c8 'gamma' 'double'
|   |   | | `-CallExpr 0x1528084e8 <col:13, col:33> 'double'
|   |   | |   |-ImplicitCastExpr 0x1528084d0 <col:13> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x152808200 <col:13> 'double (double)' Function 0x152028238 'sqrt' 'double (double)'
|   |   | |   `-BinaryOperator 0x1528084b0 <col:18, col:32> 'double' '*'
|   |   | |     |-UnaryOperator 0x152808240 <col:18, col:19> 'double' prefix '-'
|   |   | |     | `-FloatingLiteral 0x152808220 <col:19> 'double' 2.000000e+00
|   |   | |     `-CallExpr 0x152808470 <col:23, col:32> 'double'
|   |   | |       |-ImplicitCastExpr 0x152808458 <col:23> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | |       | `-DeclRefExpr 0x152808418 <col:23> 'double (double)' Function 0x152808258 'log' 'double (double)'
|   |   | |       `-ImplicitCastExpr 0x152808498 <col:27> 'double' <LValueToRValue>
|   |   | |         `-DeclRefExpr 0x152808438 <col:27> 'double' lvalue Var 0x15200e0d8 'alpha' 'double'
|   |   | `-BreakStmt 0x152808e10 <line:42:7>
|   |   |-CompoundStmt 0x1528090c0 <line:45:5, line:54:5>
|   |   | |-IfStmt 0x152809088 <line:46:7, line:52:26> has_else
|   |   | | |-RecoveryExpr 0x152808e90 <line:46:11, col:36> '_Bool' contains-errors
|   |   | | |-BinaryOperator 0x152808ef0 <line:47:9, col:15> 'double' '='
|   |   | | | |-DeclRefExpr 0x152808eb0 <col:9> 'double' lvalue Var 0x15200e1d8 'noise' 'double'
|   |   | | | `-FloatingLiteral 0x152808ed0 <col:15> 'double' 0.000000e+00
|   |   | | `-IfStmt 0x152809058 <line:49:9, line:52:26> has_else
|   |   | |   |-RecoveryExpr 0x152808f70 <line:49:13, col:45> '_Bool' contains-errors
|   |   | |   |-NullStmt 0x152809050 <line:50:11>
|   |   | |   `-BinaryOperator 0x152809030 <line:52:11, col:26> 'double' contains-errors '='
|   |   | |     |-DeclRefExpr 0x152808fb0 <col:11> 'double' lvalue Var 0x15200e1d8 'noise' 'double'
|   |   | |     `-CStyleCastExpr 0x152809008 <col:17, col:26> 'double' contains-errors <Dependent>
|   |   | |       `-RecoveryExpr 0x152808fd0 <col:26> '<dependent type>' contains-errors lvalue
|   |   | `-BreakStmt 0x1528090b8 <line:53:7>
|   |   |-CompoundStmt 0x15280bbf0 <line:56:5, line:72:5>
|   |   | |-IfStmt 0x15280b938 <line:57:7, line:65:9>
|   |   | | |-BinaryOperator 0x152809138 <line:57:11, col:20> 'int' '<='
|   |   | | | |-ImplicitCastExpr 0x152809120 <col:11> 'double' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x1528090e0 <col:11> 'double' lvalue Var 0x15200e0d8 'alpha' 'double'
|   |   | | | `-FloatingLiteral 0x152809100 <col:20> 'double' 5.000000e-01
|   |   | | `-CompoundStmt 0x15280b920 <line:58:9, line:65:9>
|   |   | |   `-BreakStmt 0x15280b918 <line:64:11>
|   |   | |-BinaryOperator 0x15280b9f0 <line:66:7, col:16> 'double' '='
|   |   | | |-DeclRefExpr 0x15280b958 <col:7> 'double' lvalue Var 0x15200e158 'beta' 'double'
|   |   | | `-BinaryOperator 0x15280b9d0 <col:12, col:16> 'double' '-'
|   |   | |   |-FloatingLiteral 0x15280b978 <col:12> 'double' 1.000000e+00
|   |   | |   `-ImplicitCastExpr 0x15280b9b8 <col:16> 'double' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x15280b998 <col:16> 'double' lvalue Var 0x15200e0d8 'alpha' 'double'
|   |   | `-BreakStmt 0x15280bbe8 <line:71:7>
|   |   |-CompoundStmt 0x15280c018 <line:74:5, line:82:5>
|   |   | |-BinaryOperator 0x15280bc58 <line:75:7, col:13> 'double' '='
|   |   | | |-DeclRefExpr 0x15280bc18 <col:7> 'double' lvalue Var 0x15200e258 'sigma' 'double'
|   |   | | `-FloatingLiteral 0x15280bc38 <col:13> 'double' 1.000000e+00
|   |   | |-IfStmt 0x15280be48 <line:76:7, line:77:35>
|   |   | | |-RecoveryExpr 0x15280bc98 <line:76:11, col:19> '_Bool' contains-errors
|   |   | | `-BinaryOperator 0x15280be28 <line:77:9, col:35> 'double' '='
|   |   | |   |-DeclRefExpr 0x15280bcb8 <col:9> 'double' lvalue Var 0x15200e258 'sigma' 'double'
|   |   | |   `-CallExpr 0x15280be00 <col:15, col:35> 'double'
|   |   | |     |-ImplicitCastExpr 0x15280bde8 <col:15> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | |     | `-DeclRefExpr 0x15280bcd8 <col:15> 'double (double)' Function 0x152028238 'sqrt' 'double (double)'
|   |   | |     `-BinaryOperator 0x15280bdc8 <col:20, col:34> 'double' '*'
|   |   | |       |-UnaryOperator 0x15280bd18 <col:20, col:21> 'double' prefix '-'
|   |   | |       | `-FloatingLiteral 0x15280bcf8 <col:21> 'double' 2.000000e+00
|   |   | |       `-CallExpr 0x15280bd88 <col:25, col:34> 'double'
|   |   | |         |-ImplicitCastExpr 0x15280bd70 <col:25> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | |         | `-DeclRefExpr 0x15280bd30 <col:25> 'double (double)' Function 0x152808258 'log' 'double (double)'
|   |   | |         `-ImplicitCastExpr 0x15280bdb0 <col:29> 'double' <LValueToRValue>
|   |   | |           `-DeclRefExpr 0x15280bd50 <col:29> 'double' lvalue Var 0x15200e0d8 'alpha' 'double'
|   |   | |-BinaryOperator 0x15280bef0 <line:78:7, col:44> 'double' contains-errors '='
|   |   | | |-DeclRefExpr 0x15280be68 <col:7> 'double' lvalue Var 0x15200e158 'beta' 'double'
|   |   | | `-CallExpr 0x15280bec8 <col:12, col:44> '<dependent type>' contains-errors
|   |   | |   |-DeclRefExpr 0x15280be88 <col:12> 'int ()' Function 0x152027400 'GetPseudoRandomValue' 'int ()'
|   |   | |   `-RecoveryExpr 0x15280bea8 <col:33> '<dependent type>' contains-errors lvalue
|   |   | `-BreakStmt 0x15280c010 <line:81:7>
|   |   |-CompoundStmt 0x15280c560 <line:84:5, line:99:5>
|   |   | |-DeclStmt 0x15280c0c8 <line:85:7, line:86:16>
|   |   | | `-VarDecl 0x15280c060 <line:85:7, line:86:9> col:9 used poisson 'double'
|   |   | |-ForStmt 0x15280c500 <line:92:7, line:96:7>
|   |   | | |-<<<NULL>>>
|   |   | | |-<<<NULL>>>
|   |   | | |-BinaryOperator 0x15280c390 <line:92:17, col:25> 'int' '>'
|   |   | | | |-ImplicitCastExpr 0x15280c360 <col:17> 'double' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x15280c320 <col:17> 'double' lvalue Var 0x15200e0d8 'alpha' 'double'
|   |   | | | `-ImplicitCastExpr 0x15280c378 <col:25> 'double' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x15280c340 <col:25> 'double' lvalue Var 0x15280c060 'poisson' 'double'
|   |   | | |-<<<NULL>>>
|   |   | | `-CompoundStmt 0x15280c4e0 <line:93:7, line:96:7>
|   |   | |   |-BinaryOperator 0x15280c438 <line:94:9, col:46> 'double' contains-errors '='
|   |   | |   | |-DeclRefExpr 0x15280c3b0 <col:9> 'double' lvalue Var 0x15200e158 'beta' 'double'
|   |   | |   | `-CallExpr 0x15280c410 <col:14, col:46> '<dependent type>' contains-errors
|   |   | |   |   |-DeclRefExpr 0x15280c3d0 <col:14> 'int ()' Function 0x152027400 'GetPseudoRandomValue' 'int ()'
|   |   | |   |   `-RecoveryExpr 0x15280c3f0 <col:35> '<dependent type>' contains-errors lvalue
|   |   | |   `-CompoundAssignOperator 0x15280c4b0 <line:95:9, col:16> 'double' '*=' ComputeLHSTy='double' ComputeResultTy='double'
|   |   | |     |-DeclRefExpr 0x15280c458 <col:9> 'double' lvalue Var 0x15200e0d8 'alpha' 'double'
|   |   | |     `-ImplicitCastExpr 0x15280c498 <col:16> 'double' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x15280c478 <col:16> 'double' lvalue Var 0x15200e158 'beta' 'double'
|   |   | `-BreakStmt 0x15280c558 <line:98:7>
|   |   `-CompoundStmt 0x15280c5d0 <line:101:5, line:104:5>
|   |     `-BreakStmt 0x15280c5c8 <line:103:7>
|   `-ReturnStmt 0x15280c6a0 <line:106:3, col:15>
|     `-ImplicitCastExpr 0x15280c688 <col:9, col:15> 'int' <FloatingToIntegral>
|       `-ImplicitCastExpr 0x15280c670 <col:9, col:15> 'double' <LValueToRValue>
|         `-ParenExpr 0x15280c650 <col:9, col:15> 'double' lvalue
|           `-DeclRefExpr 0x15280c630 <col:10> 'double' lvalue Var 0x15200e1d8 'noise' 'double'
|-FunctionDecl 0x152027d40 <line:34:11> col:11 implicit used fabs 'double (double)' extern
| |-ParmVarDecl 0x152027e40 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x152027de8 <<invalid sloc>> Implicit 1004
| |-NoThrowAttr 0x152027eb0 <col:11> Implicit
| `-ConstAttr 0x152027ed8 <col:11> Implicit
|-FunctionDecl 0x152028238 <line:37:13> col:13 implicit used sqrt 'double (double)' extern
| |-ParmVarDecl 0x152028338 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x1520282e0 <<invalid sloc>> Implicit 1163
| |-ConstAttr 0x1520283a8 <col:13> Implicit
| `-NoThrowAttr 0x1520283d0 <col:13> Implicit
|-FunctionDecl 0x152808258 <col:23> col:23 implicit used log 'double (double)' extern
| |-ParmVarDecl 0x152808358 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x152808300 <<invalid sloc>> Implicit 1106
| |-ConstAttr 0x1528083c8 <col:23> Implicit
| `-NoThrowAttr 0x1528083f0 <col:23> Implicit
|-FunctionDecl 0x152808570 <line:38:19> col:19 implicit used cos 'double (double)' extern
| |-ParmVarDecl 0x152808670 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x152808618 <<invalid sloc>> Implicit 1055
| |-ConstAttr 0x1528086e0 <col:19> Implicit
| `-NoThrowAttr 0x152808708 <col:19> Implicit
|-FunctionDecl 0x152808860 <line:39:17> col:17 implicit used sin 'double (double)' extern
| |-ParmVarDecl 0x152808960 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x152808908 <<invalid sloc>> Implicit 1157
| |-ConstAttr 0x1528089d0 <col:17> Implicit
| `-NoThrowAttr 0x1528089f8 <col:17> Implicit
`-FunctionDecl 0x15280c100 <line:91:15> col:15 implicit used exp 'double (double)' extern
  |-ParmVarDecl 0x15280c200 <<invalid sloc>> <invalid sloc> 'double'
  |-BuiltinAttr 0x15280c1a8 <<invalid sloc>> Implicit 1067
  |-ConstAttr 0x15280c270 <col:15> Implicit
  `-NoThrowAttr 0x15280c298 <col:15> Implicit
