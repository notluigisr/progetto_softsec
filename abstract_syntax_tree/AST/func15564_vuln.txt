TranslationUnitDecl 0x11e813e08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x11e814cb8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x11e8143d0 '__int128'
|-TypedefDecl 0x11e814d28 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x11e8143f0 'unsigned __int128'
|-TypedefDecl 0x11e858e30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x11e858c00 'struct __NSConstantString_tag'
|   `-Record 0x11e814d80 '__NSConstantString_tag'
|-TypedefDecl 0x11e858e98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x11e814590 '__SVInt8_t'
|-TypedefDecl 0x11e858f00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x11e8145b0 '__SVInt16_t'
|-TypedefDecl 0x11e858f68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x11e8145d0 '__SVInt32_t'
|-TypedefDecl 0x11e858fd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x11e8145f0 '__SVInt64_t'
|-TypedefDecl 0x11e859038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x11e814610 '__SVUint8_t'
|-TypedefDecl 0x11e8590a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x11e814630 '__SVUint16_t'
|-TypedefDecl 0x11e859108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x11e814650 '__SVUint32_t'
|-TypedefDecl 0x11e859170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x11e814670 '__SVUint64_t'
|-TypedefDecl 0x11e8591d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x11e814690 '__SVFloat16_t'
|-TypedefDecl 0x11e859240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x11e8146b0 '__SVFloat32_t'
|-TypedefDecl 0x11e8592a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x11e8146d0 '__SVFloat64_t'
|-TypedefDecl 0x11e859310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x11e8146f0 '__SVBfloat16_t'
|-TypedefDecl 0x11e859378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x11e814710 '__clang_svint8x2_t'
|-TypedefDecl 0x11e8593e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x11e814730 '__clang_svint16x2_t'
|-TypedefDecl 0x11e859448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x11e814750 '__clang_svint32x2_t'
|-TypedefDecl 0x11e8594b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x11e814770 '__clang_svint64x2_t'
|-TypedefDecl 0x11e859518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x11e814790 '__clang_svuint8x2_t'
|-TypedefDecl 0x11e859580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x11e8147b0 '__clang_svuint16x2_t'
|-TypedefDecl 0x11e8595e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x11e8147d0 '__clang_svuint32x2_t'
|-TypedefDecl 0x11e859650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x11e8147f0 '__clang_svuint64x2_t'
|-TypedefDecl 0x11e8596b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x11e814810 '__clang_svfloat16x2_t'
|-TypedefDecl 0x11e859720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x11e814830 '__clang_svfloat32x2_t'
|-TypedefDecl 0x11e859788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x11e814850 '__clang_svfloat64x2_t'
|-TypedefDecl 0x11e8597f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x11e814870 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x11e859858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x11e814890 '__clang_svint8x3_t'
|-TypedefDecl 0x11e8598c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x11e8148b0 '__clang_svint16x3_t'
|-TypedefDecl 0x11e859928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x11e8148d0 '__clang_svint32x3_t'
|-TypedefDecl 0x11e859990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x11e8148f0 '__clang_svint64x3_t'
|-TypedefDecl 0x11e8599f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x11e814910 '__clang_svuint8x3_t'
|-TypedefDecl 0x11e859a60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x11e814930 '__clang_svuint16x3_t'
|-TypedefDecl 0x11e859ac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x11e814950 '__clang_svuint32x3_t'
|-TypedefDecl 0x11e859b30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x11e814970 '__clang_svuint64x3_t'
|-TypedefDecl 0x11e859b98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x11e814990 '__clang_svfloat16x3_t'
|-TypedefDecl 0x11e85a400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x11e8149b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x11e85a468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x11e8149d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x11e85a4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x11e8149f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x11e85a538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x11e814a10 '__clang_svint8x4_t'
|-TypedefDecl 0x11e85a5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x11e814a30 '__clang_svint16x4_t'
|-TypedefDecl 0x11e85a608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x11e814a50 '__clang_svint32x4_t'
|-TypedefDecl 0x11e85a670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x11e814a70 '__clang_svint64x4_t'
|-TypedefDecl 0x11e85a6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x11e814a90 '__clang_svuint8x4_t'
|-TypedefDecl 0x11e85a740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x11e814ab0 '__clang_svuint16x4_t'
|-TypedefDecl 0x11e85a7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x11e814ad0 '__clang_svuint32x4_t'
|-TypedefDecl 0x11e85a810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x11e814af0 '__clang_svuint64x4_t'
|-TypedefDecl 0x11e85a878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x11e814b10 '__clang_svfloat16x4_t'
|-TypedefDecl 0x11e85a8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x11e814b30 '__clang_svfloat32x4_t'
|-TypedefDecl 0x11e85a948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x11e814b50 '__clang_svfloat64x4_t'
|-TypedefDecl 0x11e85a9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x11e814b70 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x11e85aa18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x11e814b90 '__SVBool_t'
|-TypedefDecl 0x11e85aa80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x11e814bb0 '__clang_svboolx2_t'
|-TypedefDecl 0x11e85aae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x11e814bd0 '__clang_svboolx4_t'
|-TypedefDecl 0x11e85ab50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x11e814bf0 '__SVCount_t'
|-TypedefDecl 0x11e85abf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x11e85abb0 'char *'
|   `-BuiltinType 0x11e813eb0 'char'
|-TypedefDecl 0x11e85ac68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x11e85abb0 'char *'
|   `-BuiltinType 0x11e813eb0 'char'
|-FunctionDecl 0x11e85aee8 <dataset_diviso_filec/func15564_vuln.c:1:1, line:56:1> line:1:1 invalid xmlBufAddHead 'int (int, const int *, int)'
| |-ParmVarDecl 0x11e85acf0 <col:15, col:25> col:25 referenced invalid buf 'int'
| |-ParmVarDecl 0x11e85ad70 <col:30, col:45> col:45 invalid str 'const int *'
| |-ParmVarDecl 0x11e85adf0 <col:50, col:54> col:54 used len 'int'
| `-CompoundStmt 0x11e879010 <col:59, line:56:1>
|   |-DeclStmt 0x11e85b028 <line:2:5, col:26>
|   | `-VarDecl 0x11e85afc0 <col:5, col:18> col:18 used needSize 'unsigned int'
|   |-IfStmt 0x11e85b1a8 <line:4:5, line:5:18>
|   | |-RecoveryExpr 0x11e85b120 <line:4:9, col:37> '_Bool' contains-errors
|   | `-ReturnStmt 0x11e85b198 <line:5:9, col:18>
|   |   `-ParenExpr 0x11e85b178 <col:15, col:18> 'int'
|   |     `-UnaryOperator 0x11e85b160 <col:16, col:17> 'int' prefix '-'
|   |       `-IntegerLiteral 0x11e85b140 <col:17> 'int' 1
|   |-CallExpr 0x11e85b360 <line:6:5, col:21> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x11e85b320 <col:5> 'int ()' Function 0x11e85b268 'CHECK_COMPAT' 'int ()'
|   | `-RecoveryExpr 0x11e85b340 <col:18> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x11e8744c0 <line:7:5, col:59>
|   | |-BinaryOperator 0x11e874458 <col:9, col:23> 'int' contains-errors '=='
|   | | |-CXXDependentScopeMemberExpr 0x11e85b3a8 <col:9, col:14> '<dependent type>' contains-errors lvalue ->alloc
|   | | | `-RecoveryExpr 0x11e85b388 <col:9> '<dependent type>' contains-errors lvalue
|   | | `-RecoveryExpr 0x11e874438 <col:23> '<dependent type>' contains-errors lvalue
|   | `-ReturnStmt 0x11e8744b0 <col:51, col:59>
|   |   `-UnaryOperator 0x11e874498 <col:58, col:59> 'int' prefix '-'
|   |     `-IntegerLiteral 0x11e874478 <col:59> 'int' 1
|   |-IfStmt 0x11e8745d8 <line:8:5, line:14:5>
|   | |-BinaryOperator 0x11e874558 <line:8:9, col:16> 'int' contains-errors '=='
|   | | |-RecoveryExpr 0x11e8744e0 <col:9> '<dependent type>' contains-errors lvalue
|   | | `-RecoveryExpr 0x11e874538 <col:16> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x11e8745c0 <col:22, line:14:5>
|   |   `-ReturnStmt 0x11e8745b0 <line:13:2, col:10>
|   |     `-UnaryOperator 0x11e874598 <col:9, col:10> 'int' prefix '-'
|   |       `-IntegerLiteral 0x11e874578 <col:10> 'int' 1
|   |-IfStmt 0x11e8746e8 <line:15:5, line:21:5>
|   | |-BinaryOperator 0x11e874668 <line:15:9, col:16> 'int' '<'
|   | | |-ImplicitCastExpr 0x11e874650 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x11e8745f8 <col:9> 'int' lvalue ParmVar 0x11e85adf0 'len' 'int'
|   | | `-UnaryOperator 0x11e874638 <col:15, col:16> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x11e874618 <col:16> 'int' 1
|   | `-CompoundStmt 0x11e8746d0 <col:19, line:21:5>
|   |   `-ReturnStmt 0x11e8746c0 <line:20:2, col:10>
|   |     `-UnaryOperator 0x11e8746a8 <col:9, col:10> 'int' prefix '-'
|   |       `-IntegerLiteral 0x11e874688 <col:10> 'int' 1
|   |-IfStmt 0x11e8747b0 <line:22:5, col:26>
|   | |-BinaryOperator 0x11e874760 <col:9, col:16> 'int' '=='
|   | | |-ImplicitCastExpr 0x11e874748 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x11e874708 <col:9> 'int' lvalue ParmVar 0x11e85adf0 'len' 'int'
|   | | `-IntegerLiteral 0x11e874728 <col:16> 'int' 0
|   | `-ReturnStmt 0x11e8747a0 <col:19, col:26>
|   |   `-IntegerLiteral 0x11e874780 <col:26> 'int' 0
|   |-IfStmt 0x11e8749d0 <line:24:5, line:25:28>
|   | |-BinaryOperator 0x11e874828 <line:24:9, col:15> 'int' '<'
|   | | |-ImplicitCastExpr 0x11e874810 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x11e8747d0 <col:9> 'int' lvalue ParmVar 0x11e85adf0 'len' 'int'
|   | | `-IntegerLiteral 0x11e8747f0 <col:15> 'int' 0
|   | `-BinaryOperator 0x11e8749b0 <line:25:9, col:28> 'int' contains-errors '='
|   |   |-DeclRefExpr 0x11e874848 <col:9> 'int' lvalue ParmVar 0x11e85adf0 'len' 'int'
|   |   `-CallExpr 0x11e874988 <col:15, col:28> '<dependent type>' contains-errors
|   |     |-DeclRefExpr 0x11e874948 <col:15> 'int ()' Function 0x11e874890 'xmlStrlen' 'int ()'
|   |     `-RecoveryExpr 0x11e874968 <col:25> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x11e874ab0 <line:27:5, col:27>
|   | |-BinaryOperator 0x11e874a48 <col:9, col:16> 'int' '<='
|   | | |-ImplicitCastExpr 0x11e874a30 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x11e8749f0 <col:9> 'int' lvalue ParmVar 0x11e85adf0 'len' 'int'
|   | | `-IntegerLiteral 0x11e874a10 <col:16> 'int' 0
|   | `-ReturnStmt 0x11e874aa0 <col:19, col:27>
|   |   `-UnaryOperator 0x11e874a88 <col:26, col:27> 'int' prefix '-'
|   |     `-IntegerLiteral 0x11e874a68 <col:27> 'int' 1
|   |-IfStmt 0x11e8782d8 <line:29:5, line:41:5>
|   | |-RecoveryExpr 0x11e874c10 <line:29:9, col:71> '_Bool' contains-errors
|   | `-CompoundStmt 0x11e8782b8 <col:74, line:41:5>
|   |   |-BinaryOperator 0x11e874db8 <line:30:9, col:48> 'unsigned long' contains-errors '='
|   |   | |-UnaryExprOrTypeTraitExpr 0x11e874d98 <col:9, col:16> 'unsigned long' contains-errors sizeof
|   |   | | `-RecoveryExpr 0x11e874d78 <col:16> '<dependent type>' contains-errors lvalue
|   |   | `-BinaryOperator 0x11e874d38 <col:28, col:48> '<dependent type>' contains-errors '-'
|   |   |   |-CXXDependentScopeMemberExpr 0x11e874c88 <col:28, col:33> '<dependent type>' contains-errors lvalue ->content
|   |   |   | `-RecoveryExpr 0x11e874c68 <col:28> '<dependent type>' contains-errors lvalue
|   |   |   `-CXXDependentScopeMemberExpr 0x11e874cf0 <col:43, col:48> '<dependent type>' contains-errors lvalue ->contentIO
|   |   |     `-RecoveryExpr 0x11e874cd0 <col:43> '<dependent type>' contains-errors lvalue
|   |   `-IfStmt 0x11e878298 <line:32:2, line:40:2>
|   |     |-BinaryOperator 0x11e874f00 <line:32:6, col:33> 'int' contains-errors '>'
|   |     | |-RecoveryExpr 0x11e874e88 <col:6> '<dependent type>' contains-errors lvalue
|   |     | `-CStyleCastExpr 0x11e874ed8 <col:18, col:33> 'unsigned int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x11e874ec0 <col:33> 'int' <LValueToRValue> part_of_explicit_cast
|   |     |     `-DeclRefExpr 0x11e874df0 <col:33> 'int' lvalue ParmVar 0x11e85adf0 'len' 'int'
|   |     `-CompoundStmt 0x11e878258 <col:38, line:40:2>
|   |       |-CompoundAssignOperator 0x11e874fd0 <line:34:6, col:22> '<dependent type>' contains-errors '-=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   |       | |-CXXDependentScopeMemberExpr 0x11e874f68 <col:6, col:11> '<dependent type>' contains-errors lvalue ->content
|   |       | | `-RecoveryExpr 0x11e874f40 <col:6> '<dependent type>' contains-errors lvalue
|   |       | |   `-DeclRefExpr 0x11e874f20 <col:6> 'int' lvalue ParmVar 0x11e85acf0 'buf' 'int'
|   |       | `-DeclRefExpr 0x11e874fb0 <col:22> 'int' lvalue ParmVar 0x11e85adf0 'len' 'int'
|   |       |-CallExpr 0x11e877ec8 <line:35:13, col:47> '<dependent type>' contains-errors
|   |       | |-DeclRefExpr 0x11e877d60 <col:13> 'void *(void *, const void *, unsigned long)' Function 0x11e877b10 'memmove' 'void *(void *, const void *, unsigned long)'
|   |       | |-UnaryOperator 0x11e877e40 <col:21, col:36> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |       | | `-ArraySubscriptExpr 0x11e877e20 <col:22, col:36> '<dependent type>' contains-errors lvalue
|   |       | |   |-ImplicitCastExpr 0x11e877e08 <col:22, col:27> '<dependent type>' contains-errors <LValueToRValue>
|   |       | |   | `-CXXDependentScopeMemberExpr 0x11e877da0 <col:22, col:27> '<dependent type>' contains-errors lvalue ->content
|   |       | |   |   `-RecoveryExpr 0x11e877d80 <col:22> '<dependent type>' contains-errors lvalue
|   |       | |   `-IntegerLiteral 0x11e877de8 <col:35> 'int' 0
|   |       | |-RecoveryExpr 0x11e877e58 <col:39> '<dependent type>' contains-errors lvalue
|   |       | `-DeclRefExpr 0x11e877e78 <col:44> 'int' lvalue ParmVar 0x11e85adf0 'len' 'int'
|   |       |-CompoundAssignOperator 0x11e877fb0 <line:36:6, col:18> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   |       | |-CXXDependentScopeMemberExpr 0x11e877f48 <col:6, col:11> '<dependent type>' contains-errors lvalue ->use
|   |       | | `-RecoveryExpr 0x11e877f20 <col:6> '<dependent type>' contains-errors lvalue
|   |       | |   `-DeclRefExpr 0x11e877f00 <col:6> 'int' lvalue ParmVar 0x11e85acf0 'buf' 'int'
|   |       | `-DeclRefExpr 0x11e877f90 <col:18> 'int' lvalue ParmVar 0x11e85adf0 'len' 'int'
|   |       |-CompoundAssignOperator 0x11e878090 <line:37:6, col:19> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   |       | |-CXXDependentScopeMemberExpr 0x11e878028 <col:6, col:11> '<dependent type>' contains-errors lvalue ->size
|   |       | | `-RecoveryExpr 0x11e878000 <col:6> '<dependent type>' contains-errors lvalue
|   |       | |   `-DeclRefExpr 0x11e877fe0 <col:6> 'int' lvalue ParmVar 0x11e85acf0 'buf' 'int'
|   |       | `-DeclRefExpr 0x11e878070 <col:19> 'int' lvalue ParmVar 0x11e85adf0 'len' 'int'
|   |       |-CallExpr 0x11e8781e0 <line:38:6, col:23> '<dependent type>' contains-errors
|   |       | |-DeclRefExpr 0x11e8781a0 <col:6> 'int ()' Function 0x11e8780e8 'UPDATE_COMPAT' 'int ()'
|   |       | `-RecoveryExpr 0x11e8781c0 <col:20> '<dependent type>' contains-errors lvalue
|   |       `-ReturnStmt 0x11e878248 <line:39:6, col:14>
|   |         `-ParenExpr 0x11e878228 <col:12, col:14> 'int'
|   |           `-IntegerLiteral 0x11e878208 <col:13> 'int' 0
|   |-BinaryOperator 0x11e878400 <line:42:5, col:33> 'unsigned int' contains-errors '='
|   | |-DeclRefExpr 0x11e8782f8 <col:5> 'unsigned int' lvalue Var 0x11e85afc0 'needSize' 'unsigned int'
|   | `-BinaryOperator 0x11e8783e0 <col:16, col:33> '<dependent type>' contains-errors '+'
|   |   |-BinaryOperator 0x11e8783a0 <col:16, col:27> '<dependent type>' contains-errors '+'
|   |   | |-CXXDependentScopeMemberExpr 0x11e878338 <col:16, col:21> '<dependent type>' contains-errors lvalue ->use
|   |   | | `-RecoveryExpr 0x11e878318 <col:16> '<dependent type>' contains-errors lvalue
|   |   | `-DeclRefExpr 0x11e878380 <col:27> 'int' lvalue ParmVar 0x11e85adf0 'len' 'int'
|   |   `-IntegerLiteral 0x11e8783c0 <col:33> 'int' 2
|   |-IfStmt 0x11e8788a0 <line:43:5, line:48:5>
|   | |-BinaryOperator 0x11e8784a8 <line:43:9, col:25> 'int' contains-errors '>'
|   | | |-DeclRefExpr 0x11e878420 <col:9> 'unsigned int' lvalue Var 0x11e85afc0 'needSize' 'unsigned int'
|   | | `-CXXDependentScopeMemberExpr 0x11e878460 <col:20, col:25> '<dependent type>' contains-errors lvalue ->size
|   | |   `-RecoveryExpr 0x11e878440 <col:20> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x11e878888 <col:30, line:48:5>
|   |   `-IfStmt 0x11e878868 <line:44:9, line:47:9>
|   |     |-UnaryOperator 0x11e878638 <line:44:13, col:40> '<dependent type>' contains-errors prefix '!' cannot overflow
|   |     | `-CallExpr 0x11e878608 <col:14, col:40> '<dependent type>' contains-errors
|   |     |   |-DeclRefExpr 0x11e8785a8 <col:14> 'int ()' Function 0x11e8784f0 'xmlBufResize' 'int ()'
|   |     |   |-RecoveryExpr 0x11e8785c8 <col:27> '<dependent type>' contains-errors lvalue
|   |     |   `-DeclRefExpr 0x11e8785e8 <col:32> 'unsigned int' lvalue Var 0x11e85afc0 'needSize' 'unsigned int'
|   |     `-CompoundStmt 0x11e878848 <col:42, line:47:9>
|   |       |-CallExpr 0x11e8787d0 <line:45:6, col:34> '<dependent type>' contains-errors
|   |       | |-DeclRefExpr 0x11e878730 <col:6> 'int ()' Function 0x11e878678 'xmlBufMemoryError' 'int ()'
|   |       | |-RecoveryExpr 0x11e878750 <col:24> '<dependent type>' contains-errors lvalue
|   |       | `-StringLiteral 0x11e8787b0 <col:29> 'char[4]' lvalue "STR"
|   |       `-ReturnStmt 0x11e878838 <line:46:13, col:20>
|   |         `-RecoveryExpr 0x11e878818 <col:20> '<dependent type>' contains-errors lvalue
|   |-CallExpr 0x11e878b38 <line:50:5, col:59> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x11e8788c0 <col:5> 'void *(void *, const void *, unsigned long)' Function 0x11e877b10 'memmove' 'void *(void *, const void *, unsigned long)'
|   | |-UnaryOperator 0x11e8789b8 <col:13, col:30> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x11e878998 <col:14, col:30> '<dependent type>' contains-errors lvalue
|   | |   |-ImplicitCastExpr 0x11e878968 <col:14, col:19> '<dependent type>' contains-errors <LValueToRValue>
|   | |   | `-CXXDependentScopeMemberExpr 0x11e878900 <col:14, col:19> '<dependent type>' contains-errors lvalue ->content
|   | |   |   `-RecoveryExpr 0x11e8788e0 <col:14> '<dependent type>' contains-errors lvalue
|   | |   `-ImplicitCastExpr 0x11e878980 <col:27> 'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x11e878948 <col:27> 'int' lvalue ParmVar 0x11e85adf0 'len' 'int'
|   | |-UnaryOperator 0x11e878aa0 <col:33, col:48> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x11e878a80 <col:34, col:48> '<dependent type>' contains-errors lvalue
|   | |   |-ImplicitCastExpr 0x11e878a68 <col:34, col:39> '<dependent type>' contains-errors <LValueToRValue>
|   | |   | `-CXXDependentScopeMemberExpr 0x11e878a00 <col:34, col:39> '<dependent type>' contains-errors lvalue ->content
|   | |   |   `-RecoveryExpr 0x11e8789d0 <col:34> '<dependent type>' contains-errors lvalue
|   | |   `-IntegerLiteral 0x11e878a48 <col:47> 'int' 0
|   | `-CXXDependentScopeMemberExpr 0x11e878ad8 <col:51, col:56> '<dependent type>' contains-errors lvalue ->use
|   |   `-RecoveryExpr 0x11e878ab8 <col:51> '<dependent type>' contains-errors lvalue
|   |-CallExpr 0x11e878cd8 <line:51:5, col:39> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x11e878b70 <col:5> 'void *(void *, const void *, unsigned long)' Function 0x11e877b10 'memmove' 'void *(void *, const void *, unsigned long)'
|   | |-UnaryOperator 0x11e878c50 <col:13, col:28> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x11e878c30 <col:14, col:28> '<dependent type>' contains-errors lvalue
|   | |   |-ImplicitCastExpr 0x11e878c18 <col:14, col:19> '<dependent type>' contains-errors <LValueToRValue>
|   | |   | `-CXXDependentScopeMemberExpr 0x11e878bb0 <col:14, col:19> '<dependent type>' contains-errors lvalue ->content
|   | |   |   `-RecoveryExpr 0x11e878b90 <col:14> '<dependent type>' contains-errors lvalue
|   | |   `-IntegerLiteral 0x11e878bf8 <col:27> 'int' 0
|   | |-RecoveryExpr 0x11e878c68 <col:31> '<dependent type>' contains-errors lvalue
|   | `-DeclRefExpr 0x11e878c88 <col:36> 'int' lvalue ParmVar 0x11e85adf0 'len' 'int'
|   |-CompoundAssignOperator 0x11e878dc0 <line:52:5, col:17> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   | |-CXXDependentScopeMemberExpr 0x11e878d58 <col:5, col:10> '<dependent type>' contains-errors lvalue ->use
|   | | `-RecoveryExpr 0x11e878d30 <col:5> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x11e878d10 <col:5> 'int' lvalue ParmVar 0x11e85acf0 'buf' 'int'
|   | `-DeclRefExpr 0x11e878da0 <col:17> 'int' lvalue ParmVar 0x11e85adf0 'len' 'int'
|   |-BinaryOperator 0x11e878f58 <line:53:5, col:30> '<dependent type>' contains-errors '='
|   | |-ArraySubscriptExpr 0x11e878f18 <col:5, col:26> '<dependent type>' contains-errors lvalue
|   | | |-ImplicitCastExpr 0x11e878ee8 <col:5, col:10> '<dependent type>' contains-errors <LValueToRValue>
|   | | | `-CXXDependentScopeMemberExpr 0x11e878e38 <col:5, col:10> '<dependent type>' contains-errors lvalue ->content
|   | | |   `-RecoveryExpr 0x11e878e10 <col:5> '<dependent type>' contains-errors lvalue
|   | | |     `-DeclRefExpr 0x11e878df0 <col:5> 'int' lvalue ParmVar 0x11e85acf0 'buf' 'int'
|   | | `-ImplicitCastExpr 0x11e878f00 <col:18, col:23> '<dependent type>' contains-errors <LValueToRValue>
|   | |   `-CXXDependentScopeMemberExpr 0x11e878ea0 <col:18, col:23> '<dependent type>' contains-errors lvalue ->use
|   | |     `-RecoveryExpr 0x11e878e80 <col:18> '<dependent type>' contains-errors lvalue
|   | `-IntegerLiteral 0x11e878f38 <col:30> 'int' 0
|   |-CallExpr 0x11e878fb8 <line:54:5, col:22> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x11e878f78 <col:5> 'int ()' Function 0x11e8780e8 'UPDATE_COMPAT' 'int ()'
|   | `-RecoveryExpr 0x11e878f98 <col:19> '<dependent type>' contains-errors lvalue
|   `-ReturnStmt 0x11e879000 <line:55:5, col:12>
|     `-IntegerLiteral 0x11e878fe0 <col:12> 'int' 0
`-FunctionDecl 0x11e877b10 <line:35:13> col:13 implicit used memmove 'void *(void *, const void *, unsigned long)' extern
  |-ParmVarDecl 0x11e877c10 <<invalid sloc>> <invalid sloc> 'void *'
  |-ParmVarDecl 0x11e877c78 <<invalid sloc>> <invalid sloc> 'const void *'
  |-ParmVarDecl 0x11e877ce0 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x11e877bb8 <<invalid sloc>> Implicit 884
