TranslationUnitDecl 0x12a055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x12a0564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x12a055bd0 '__int128'
|-TypedefDecl 0x12a056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x12a055bf0 'unsigned __int128'
|-TypedefDecl 0x12a126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12a126000 'struct __NSConstantString_tag'
|   `-Record 0x12a056580 '__NSConstantString_tag'
|-TypedefDecl 0x12a126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x12a055d90 '__SVInt8_t'
|-TypedefDecl 0x12a126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x12a055db0 '__SVInt16_t'
|-TypedefDecl 0x12a126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x12a055dd0 '__SVInt32_t'
|-TypedefDecl 0x12a1263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x12a055df0 '__SVInt64_t'
|-TypedefDecl 0x12a126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x12a055e10 '__SVUint8_t'
|-TypedefDecl 0x12a1264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x12a055e30 '__SVUint16_t'
|-TypedefDecl 0x12a126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x12a055e50 '__SVUint32_t'
|-TypedefDecl 0x12a126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x12a055e70 '__SVUint64_t'
|-TypedefDecl 0x12a1265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x12a055e90 '__SVFloat16_t'
|-TypedefDecl 0x12a126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x12a055eb0 '__SVFloat32_t'
|-TypedefDecl 0x12a1266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x12a055ed0 '__SVFloat64_t'
|-TypedefDecl 0x12a126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x12a055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12a126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x12a055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12a1267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x12a055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12a126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x12a055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12a1268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x12a055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12a126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x12a055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12a126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x12a055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12a1269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x12a055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12a126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x12a055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12a126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x12a056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12a126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x12a056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12a126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x12a056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12a126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x12a056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12a126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x12a056090 '__clang_svint8x3_t'
|-TypedefDecl 0x12a126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x12a0560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12a126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x12a0560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12a126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x12a0560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12a126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x12a056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12a126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x12a056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12a126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x12a056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12a126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x12a056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12a126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x12a056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12a127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x12a0561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12a127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x12a0561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12a1278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x12a0561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12a127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x12a056210 '__clang_svint8x4_t'
|-TypedefDecl 0x12a1279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x12a056230 '__clang_svint16x4_t'
|-TypedefDecl 0x12a127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x12a056250 '__clang_svint32x4_t'
|-TypedefDecl 0x12a127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x12a056270 '__clang_svint64x4_t'
|-TypedefDecl 0x12a127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x12a056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12a127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x12a0562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12a127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x12a0562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12a127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x12a0562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12a127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x12a056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12a127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x12a056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12a127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x12a056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12a127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x12a056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12a127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x12a056390 '__SVBool_t'
|-TypedefDecl 0x12a127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x12a0563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12a127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x12a0563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12a127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x12a0563f0 '__SVCount_t'
|-TypedefDecl 0x12a127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12a127fb0 'char *'
|   `-BuiltinType 0x12a0556b0 'char'
|-TypedefDecl 0x12a128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12a127fb0 'char *'
|   `-BuiltinType 0x12a0556b0 'char'
`-FunctionDecl 0x12a128320 <dataset_diviso_filec/func13585_nonvuln.c:1:1, line:39:1> line:1:13 get_mirc_color 'void (const char **, int *, int *)' static
  |-ParmVarDecl 0x12a128108 <col:28, col:41> col:41 used str 'const char **'
  |-ParmVarDecl 0x12a1281b8 <col:46, col:51> col:51 used fg_ret 'int *'
  |-ParmVarDecl 0x12a128238 <col:59, col:64> col:64 used bg_ret 'int *'
  `-CompoundStmt 0x12a143068 <line:2:1, line:39:1>
    |-DeclStmt 0x12a128540 <line:3:2, col:12>
    | |-VarDecl 0x12a128440 <col:2, col:6> col:6 used fg 'int'
    | `-VarDecl 0x12a1284c0 <col:2, col:10> col:10 used bg 'int'
    |-BinaryOperator 0x12a128760 <line:5:2, col:30> 'int' contains-errors '='
    | |-DeclRefExpr 0x12a128558 <col:2> 'int' lvalue Var 0x12a128440 'fg' 'int'
    | `-ConditionalOperator 0x12a128730 <col:7, col:30> '<dependent type>' contains-errors
    |   |-BinaryOperator 0x12a1286e0 <col:7, col:17> 'int' contains-errors '=='
    |   | |-DeclRefExpr 0x12a128578 <col:7> 'int *' lvalue ParmVar 0x12a1281b8 'fg_ret' 'int *'
    |   | `-RecoveryExpr 0x12a1286c0 <col:17> '<dependent type>' contains-errors lvalue
    |   |-UnaryOperator 0x12a128608 <col:24, col:25> 'int' prefix '-'
    |   | `-IntegerLiteral 0x12a1285e8 <col:25> 'int' 1
    |   `-UnaryOperator 0x12a128718 <col:29, col:30> 'int' lvalue prefix '*' cannot overflow
    |     `-ImplicitCastExpr 0x12a128700 <col:30> 'int *' <LValueToRValue>
    |       `-DeclRefExpr 0x12a128620 <col:30> 'int *' lvalue ParmVar 0x12a1281b8 'fg_ret' 'int *'
    |-BinaryOperator 0x12a140b78 <line:6:2, col:30> 'int' contains-errors '='
    | |-DeclRefExpr 0x12a128780 <col:2> 'int' lvalue Var 0x12a1284c0 'bg' 'int'
    | `-ConditionalOperator 0x12a140b48 <col:7, col:30> '<dependent type>' contains-errors
    |   |-BinaryOperator 0x12a140af8 <col:7, col:17> 'int' contains-errors '=='
    |   | |-DeclRefExpr 0x12a1287a0 <col:7> 'int *' lvalue ParmVar 0x12a128238 'bg_ret' 'int *'
    |   | `-RecoveryExpr 0x12a140ad8 <col:17> '<dependent type>' contains-errors lvalue
    |   |-UnaryOperator 0x12a140a20 <col:24, col:25> 'int' prefix '-'
    |   | `-IntegerLiteral 0x12a140a00 <col:25> 'int' 1
    |   `-UnaryOperator 0x12a140b30 <col:29, col:30> 'int' lvalue prefix '*' cannot overflow
    |     `-ImplicitCastExpr 0x12a140b18 <col:30> 'int *' <LValueToRValue>
    |       `-DeclRefExpr 0x12a140a38 <col:30> 'int *' lvalue ParmVar 0x12a128238 'bg_ret' 'int *'
    |-IfStmt 0x12a142e38 <line:8:2, line:35:2> has_else
    | |-BinaryOperator 0x12a140ef0 <line:8:6, col:36> 'int' '&&'
    | | |-UnaryOperator 0x12a140df0 <col:6, col:22> 'int' prefix '!' cannot overflow
    | | | `-CallExpr 0x12a140d98 <col:7, col:22> 'int'
    | | |   |-ImplicitCastExpr 0x12a140d80 <col:7> 'int (*)()' <FunctionToPointerDecay>
    | | |   | `-DeclRefExpr 0x12a140cb0 <col:7> 'int ()' Function 0x12a140bf8 'i_isdigit' 'int ()'
    | | |   `-ImplicitCastExpr 0x12a140dd8 <col:17, col:19> 'int' <IntegralCast>
    | | |     `-ImplicitCastExpr 0x12a140dc0 <col:17, col:19> 'char' <LValueToRValue>
    | | |       `-UnaryOperator 0x12a140d38 <col:17, col:19> 'const char' lvalue prefix '*' cannot overflow
    | | |         `-ImplicitCastExpr 0x12a140d20 <col:18, col:19> 'const char *' <LValueToRValue>
    | | |           `-UnaryOperator 0x12a140d08 <col:18, col:19> 'const char *' lvalue prefix '*' cannot overflow
    | | |             `-ImplicitCastExpr 0x12a140cf0 <col:19> 'const char **' <LValueToRValue>
    | | |               `-DeclRefExpr 0x12a140cd0 <col:19> 'const char **' lvalue ParmVar 0x12a128108 'str' 'const char **'
    | | `-BinaryOperator 0x12a140ed0 <col:27, col:36> 'int' '!='
    | |   |-ImplicitCastExpr 0x12a140eb8 <col:27, col:29> 'int' <IntegralCast>
    | |   | `-ImplicitCastExpr 0x12a140ea0 <col:27, col:29> 'char' <LValueToRValue>
    | |   |   `-UnaryOperator 0x12a140e70 <col:27, col:29> 'const char' lvalue prefix '*' cannot overflow
    | |   |     `-ImplicitCastExpr 0x12a140e58 <col:28, col:29> 'const char *' <LValueToRValue>
    | |   |       `-UnaryOperator 0x12a140e40 <col:28, col:29> 'const char *' lvalue prefix '*' cannot overflow
    | |   |         `-ImplicitCastExpr 0x12a140e28 <col:29> 'const char **' <LValueToRValue>
    | |   |           `-DeclRefExpr 0x12a140e08 <col:29> 'const char **' lvalue ParmVar 0x12a128108 'str' 'const char **'
    | |   `-CharacterLiteral 0x12a140e88 <col:36> 'int' 44
    | |-CompoundStmt 0x12a141000 <col:41, line:11:2>
    | | |-BinaryOperator 0x12a140f68 <line:9:3, col:9> 'int' '='
    | | | |-DeclRefExpr 0x12a140f10 <col:3> 'int' lvalue Var 0x12a128440 'fg' 'int'
    | | | `-UnaryOperator 0x12a140f50 <col:8, col:9> 'int' prefix '-'
    | | |   `-IntegerLiteral 0x12a140f30 <col:9> 'int' 1
    | | `-BinaryOperator 0x12a140fe0 <line:10:3, col:9> 'int' '='
    | |   |-DeclRefExpr 0x12a140f88 <col:3> 'int' lvalue Var 0x12a1284c0 'bg' 'int'
    | |   `-UnaryOperator 0x12a140fc8 <col:8, col:9> 'int' prefix '-'
    | |     `-IntegerLiteral 0x12a140fa8 <col:9> 'int' 1
    | `-CompoundStmt 0x12a142e18 <line:11:9, line:35:2>
    |   |-IfStmt 0x12a141698 <line:13:3, line:20:3>
    |   | |-BinaryOperator 0x12a1410e8 <line:13:7, col:16> 'int' '!='
    |   | | |-ImplicitCastExpr 0x12a1410d0 <col:7, col:9> 'int' <IntegralCast>
    |   | | | `-ImplicitCastExpr 0x12a1410b8 <col:7, col:9> 'char' <LValueToRValue>
    |   | | |   `-UnaryOperator 0x12a141088 <col:7, col:9> 'const char' lvalue prefix '*' cannot overflow
    |   | | |     `-ImplicitCastExpr 0x12a141070 <col:8, col:9> 'const char *' <LValueToRValue>
    |   | | |       `-UnaryOperator 0x12a141058 <col:8, col:9> 'const char *' lvalue prefix '*' cannot overflow
    |   | | |         `-ImplicitCastExpr 0x12a141040 <col:9> 'const char **' <LValueToRValue>
    |   | | |           `-DeclRefExpr 0x12a141020 <col:9> 'const char **' lvalue ParmVar 0x12a128108 'str' 'const char **'
    |   | | `-CharacterLiteral 0x12a1410a0 <col:16> 'int' 44
    |   | `-CompoundStmt 0x12a141670 <col:21, line:20:3>
    |   |   |-BinaryOperator 0x12a141210 <line:14:4, col:15> 'int' '='
    |   |   | |-DeclRefExpr 0x12a141108 <col:4> 'int' lvalue Var 0x12a128440 'fg' 'int'
    |   |   | `-BinaryOperator 0x12a1411f0 <col:9, col:15> 'int' '-'
    |   |   |   |-ImplicitCastExpr 0x12a1411d8 <col:9, col:11> 'int' <IntegralCast>
    |   |   |   | `-ImplicitCastExpr 0x12a1411c0 <col:9, col:11> 'char' <LValueToRValue>
    |   |   |   |   `-UnaryOperator 0x12a141190 <col:9, col:11> 'const char' lvalue prefix '*' cannot overflow
    |   |   |   |     `-ImplicitCastExpr 0x12a141178 <col:10, col:11> 'const char *' <LValueToRValue>
    |   |   |   |       `-UnaryOperator 0x12a141160 <col:10, col:11> 'const char *' lvalue prefix '*' cannot overflow
    |   |   |   |         `-ImplicitCastExpr 0x12a141148 <col:11> 'const char **' <LValueToRValue>
    |   |   |   |           `-DeclRefExpr 0x12a141128 <col:11> 'const char **' lvalue ParmVar 0x12a128108 'str' 'const char **'
    |   |   |   `-CharacterLiteral 0x12a1411a8 <col:15> 'int' 48
    |   |   |-UnaryOperator 0x12a1412a0 <line:15:4, col:10> 'const char *' postfix '++'
    |   |   | `-ParenExpr 0x12a141280 <col:4, col:9> 'const char *' lvalue
    |   |   |   `-UnaryOperator 0x12a141268 <col:5, col:6> 'const char *' lvalue prefix '*' cannot overflow
    |   |   |     `-ImplicitCastExpr 0x12a141250 <col:6> 'const char **' <LValueToRValue>
    |   |   |       `-DeclRefExpr 0x12a141230 <col:6> 'const char **' lvalue ParmVar 0x12a128108 'str' 'const char **'
    |   |   `-IfStmt 0x12a141650 <line:16:4, line:19:4>
    |   |     |-CallExpr 0x12a141370 <line:16:8, col:23> 'int'
    |   |     | |-ImplicitCastExpr 0x12a141358 <col:8> 'int (*)()' <FunctionToPointerDecay>
    |   |     | | `-DeclRefExpr 0x12a1412b8 <col:8> 'int ()' Function 0x12a140bf8 'i_isdigit' 'int ()'
    |   |     | `-ImplicitCastExpr 0x12a1413b0 <col:18, col:20> 'int' <IntegralCast>
    |   |     |   `-ImplicitCastExpr 0x12a141398 <col:18, col:20> 'char' <LValueToRValue>
    |   |     |     `-UnaryOperator 0x12a141340 <col:18, col:20> 'const char' lvalue prefix '*' cannot overflow
    |   |     |       `-ImplicitCastExpr 0x12a141328 <col:19, col:20> 'const char *' <LValueToRValue>
    |   |     |         `-UnaryOperator 0x12a141310 <col:19, col:20> 'const char *' lvalue prefix '*' cannot overflow
    |   |     |           `-ImplicitCastExpr 0x12a1412f8 <col:20> 'const char **' <LValueToRValue>
    |   |     |             `-DeclRefExpr 0x12a1412d8 <col:20> 'const char **' lvalue ParmVar 0x12a128108 'str' 'const char **'
    |   |     `-CompoundStmt 0x12a141630 <col:26, line:19:4>
    |   |       |-BinaryOperator 0x12a141588 <line:17:5, col:28> 'int' '='
    |   |       | |-DeclRefExpr 0x12a1413c8 <col:5> 'int' lvalue Var 0x12a128440 'fg' 'int'
    |   |       | `-BinaryOperator 0x12a141568 <col:10, col:28> 'int' '+'
    |   |       |   |-BinaryOperator 0x12a141440 <col:10, col:13> 'int' '*'
    |   |       |   | |-ImplicitCastExpr 0x12a141428 <col:10> 'int' <LValueToRValue>
    |   |       |   | | `-DeclRefExpr 0x12a1413e8 <col:10> 'int' lvalue Var 0x12a128440 'fg' 'int'
    |   |       |   | `-IntegerLiteral 0x12a141408 <col:13> 'int' 10
    |   |       |   `-ParenExpr 0x12a141548 <col:18, col:28> 'int'
    |   |       |     `-BinaryOperator 0x12a141528 <col:19, col:25> 'int' '-'
    |   |       |       |-ImplicitCastExpr 0x12a141510 <col:19, col:21> 'int' <IntegralCast>
    |   |       |       | `-ImplicitCastExpr 0x12a1414f8 <col:19, col:21> 'char' <LValueToRValue>
    |   |       |       |   `-UnaryOperator 0x12a1414c8 <col:19, col:21> 'const char' lvalue prefix '*' cannot overflow
    |   |       |       |     `-ImplicitCastExpr 0x12a1414b0 <col:20, col:21> 'const char *' <LValueToRValue>
    |   |       |       |       `-UnaryOperator 0x12a141498 <col:20, col:21> 'const char *' lvalue prefix '*' cannot overflow
    |   |       |       |         `-ImplicitCastExpr 0x12a141480 <col:21> 'const char **' <LValueToRValue>
    |   |       |       |           `-DeclRefExpr 0x12a141460 <col:21> 'const char **' lvalue ParmVar 0x12a128108 'str' 'const char **'
    |   |       |       `-CharacterLiteral 0x12a1414e0 <col:25> 'int' 48
    |   |       `-UnaryOperator 0x12a141618 <line:18:5, col:11> 'const char *' postfix '++'
    |   |         `-ParenExpr 0x12a1415f8 <col:5, col:10> 'const char *' lvalue
    |   |           `-UnaryOperator 0x12a1415e0 <col:6, col:7> 'const char *' lvalue prefix '*' cannot overflow
    |   |             `-ImplicitCastExpr 0x12a1415c8 <col:7> 'const char **' <LValueToRValue>
    |   |               `-DeclRefExpr 0x12a1415a8 <col:7> 'const char **' lvalue ParmVar 0x12a128108 'str' 'const char **'
    |   `-IfStmt 0x12a142df8 <line:21:3, line:34:3>
    |     |-BinaryOperator 0x12a141780 <line:21:7, col:16> 'int' '=='
    |     | |-ImplicitCastExpr 0x12a141768 <col:7, col:9> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x12a141750 <col:7, col:9> 'char' <LValueToRValue>
    |     | |   `-UnaryOperator 0x12a141720 <col:7, col:9> 'const char' lvalue prefix '*' cannot overflow
    |     | |     `-ImplicitCastExpr 0x12a141708 <col:8, col:9> 'const char *' <LValueToRValue>
    |     | |       `-UnaryOperator 0x12a1416f0 <col:8, col:9> 'const char *' lvalue prefix '*' cannot overflow
    |     | |         `-ImplicitCastExpr 0x12a1416d8 <col:9> 'const char **' <LValueToRValue>
    |     | |           `-DeclRefExpr 0x12a1416b8 <col:9> 'const char **' lvalue ParmVar 0x12a128108 'str' 'const char **'
    |     | `-CharacterLiteral 0x12a141738 <col:16> 'int' 44
    |     `-CompoundStmt 0x12a142de0 <col:21, line:34:3>
    |       `-IfStmt 0x12a142db0 <line:23:4, line:33:4> has_else
    |         |-UnaryOperator 0x12a1418f8 <line:23:8, col:28> 'int' prefix '!' cannot overflow
    |         | `-CallExpr 0x12a1418a0 <col:9, col:28> 'int'
    |         |   |-ImplicitCastExpr 0x12a141888 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |         |   | `-DeclRefExpr 0x12a1417a0 <col:9> 'int ()' Function 0x12a140bf8 'i_isdigit' 'int ()'
    |         |   `-ImplicitCastExpr 0x12a1418e0 <col:19, col:27> 'int' <IntegralCast>
    |         |     `-ImplicitCastExpr 0x12a1418c8 <col:19, col:27> 'char' <LValueToRValue>
    |         |       `-ArraySubscriptExpr 0x12a141868 <col:19, col:27> 'const char' lvalue
    |         |         |-ImplicitCastExpr 0x12a141850 <col:19, col:24> 'const char *' <LValueToRValue>
    |         |         | `-ParenExpr 0x12a141810 <col:19, col:24> 'const char *' lvalue
    |         |         |   `-UnaryOperator 0x12a1417f8 <col:20, col:21> 'const char *' lvalue prefix '*' cannot overflow
    |         |         |     `-ImplicitCastExpr 0x12a1417e0 <col:21> 'const char **' <LValueToRValue>
    |         |         |       `-DeclRefExpr 0x12a1417c0 <col:21> 'const char **' lvalue ParmVar 0x12a128108 'str' 'const char **'
    |         |         `-IntegerLiteral 0x12a141830 <col:26> 'int' 1
    |         |-BinaryOperator 0x12a141968 <line:24:5, col:11> 'int' '='
    |         | |-DeclRefExpr 0x12a141910 <col:5> 'int' lvalue Var 0x12a1284c0 'bg' 'int'
    |         | `-UnaryOperator 0x12a141950 <col:10, col:11> 'int' prefix '-'
    |         |   `-IntegerLiteral 0x12a141930 <col:11> 'int' 1
    |         `-CompoundStmt 0x12a142d80 <line:25:9, line:33:4>
    |           |-UnaryOperator 0x12a142800 <line:26:5, col:11> 'const char *' postfix '++'
    |           | `-ParenExpr 0x12a1419d8 <col:5, col:10> 'const char *' lvalue
    |           |   `-UnaryOperator 0x12a1419c0 <col:6, col:7> 'const char *' lvalue prefix '*' cannot overflow
    |           |     `-ImplicitCastExpr 0x12a1419a8 <col:7> 'const char **' <LValueToRValue>
    |           |       `-DeclRefExpr 0x12a141988 <col:7> 'const char **' lvalue ParmVar 0x12a128108 'str' 'const char **'
    |           |-BinaryOperator 0x12a142920 <line:27:5, col:16> 'int' '='
    |           | |-DeclRefExpr 0x12a142818 <col:5> 'int' lvalue Var 0x12a1284c0 'bg' 'int'
    |           | `-BinaryOperator 0x12a142900 <col:10, col:16> 'int' '-'
    |           |   |-ImplicitCastExpr 0x12a1428e8 <col:10, col:12> 'int' <IntegralCast>
    |           |   | `-ImplicitCastExpr 0x12a1428d0 <col:10, col:12> 'char' <LValueToRValue>
    |           |   |   `-UnaryOperator 0x12a1428a0 <col:10, col:12> 'const char' lvalue prefix '*' cannot overflow
    |           |   |     `-ImplicitCastExpr 0x12a142888 <col:11, col:12> 'const char *' <LValueToRValue>
    |           |   |       `-UnaryOperator 0x12a142870 <col:11, col:12> 'const char *' lvalue prefix '*' cannot overflow
    |           |   |         `-ImplicitCastExpr 0x12a142858 <col:12> 'const char **' <LValueToRValue>
    |           |   |           `-DeclRefExpr 0x12a142838 <col:12> 'const char **' lvalue ParmVar 0x12a128108 'str' 'const char **'
    |           |   `-CharacterLiteral 0x12a1428b8 <col:16> 'int' 48
    |           |-UnaryOperator 0x12a1429b0 <line:28:5, col:11> 'const char *' postfix '++'
    |           | `-ParenExpr 0x12a142990 <col:5, col:10> 'const char *' lvalue
    |           |   `-UnaryOperator 0x12a142978 <col:6, col:7> 'const char *' lvalue prefix '*' cannot overflow
    |           |     `-ImplicitCastExpr 0x12a142960 <col:7> 'const char **' <LValueToRValue>
    |           |       `-DeclRefExpr 0x12a142940 <col:7> 'const char **' lvalue ParmVar 0x12a128108 'str' 'const char **'
    |           `-IfStmt 0x12a142d60 <line:29:5, line:32:5>
    |             |-CallExpr 0x12a142a80 <line:29:9, col:24> 'int'
    |             | |-ImplicitCastExpr 0x12a142a68 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |             | | `-DeclRefExpr 0x12a1429c8 <col:9> 'int ()' Function 0x12a140bf8 'i_isdigit' 'int ()'
    |             | `-ImplicitCastExpr 0x12a142ac0 <col:19, col:21> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x12a142aa8 <col:19, col:21> 'char' <LValueToRValue>
    |             |     `-UnaryOperator 0x12a142a50 <col:19, col:21> 'const char' lvalue prefix '*' cannot overflow
    |             |       `-ImplicitCastExpr 0x12a142a38 <col:20, col:21> 'const char *' <LValueToRValue>
    |             |         `-UnaryOperator 0x12a142a20 <col:20, col:21> 'const char *' lvalue prefix '*' cannot overflow
    |             |           `-ImplicitCastExpr 0x12a142a08 <col:21> 'const char **' <LValueToRValue>
    |             |             `-DeclRefExpr 0x12a1429e8 <col:21> 'const char **' lvalue ParmVar 0x12a128108 'str' 'const char **'
    |             `-CompoundStmt 0x12a142d40 <col:27, line:32:5>
    |               |-BinaryOperator 0x12a142c98 <line:30:6, col:29> 'int' '='
    |               | |-DeclRefExpr 0x12a142ad8 <col:6> 'int' lvalue Var 0x12a1284c0 'bg' 'int'
    |               | `-BinaryOperator 0x12a142c78 <col:11, col:29> 'int' '+'
    |               |   |-BinaryOperator 0x12a142b50 <col:11, col:14> 'int' '*'
    |               |   | |-ImplicitCastExpr 0x12a142b38 <col:11> 'int' <LValueToRValue>
    |               |   | | `-DeclRefExpr 0x12a142af8 <col:11> 'int' lvalue Var 0x12a1284c0 'bg' 'int'
    |               |   | `-IntegerLiteral 0x12a142b18 <col:14> 'int' 10
    |               |   `-ParenExpr 0x12a142c58 <col:19, col:29> 'int'
    |               |     `-BinaryOperator 0x12a142c38 <col:20, col:26> 'int' '-'
    |               |       |-ImplicitCastExpr 0x12a142c20 <col:20, col:22> 'int' <IntegralCast>
    |               |       | `-ImplicitCastExpr 0x12a142c08 <col:20, col:22> 'char' <LValueToRValue>
    |               |       |   `-UnaryOperator 0x12a142bd8 <col:20, col:22> 'const char' lvalue prefix '*' cannot overflow
    |               |       |     `-ImplicitCastExpr 0x12a142bc0 <col:21, col:22> 'const char *' <LValueToRValue>
    |               |       |       `-UnaryOperator 0x12a142ba8 <col:21, col:22> 'const char *' lvalue prefix '*' cannot overflow
    |               |       |         `-ImplicitCastExpr 0x12a142b90 <col:22> 'const char **' <LValueToRValue>
    |               |       |           `-DeclRefExpr 0x12a142b70 <col:22> 'const char **' lvalue ParmVar 0x12a128108 'str' 'const char **'
    |               |       `-CharacterLiteral 0x12a142bf0 <col:26> 'int' 48
    |               `-UnaryOperator 0x12a142d28 <line:31:6, col:12> 'const char *' postfix '++'
    |                 `-ParenExpr 0x12a142d08 <col:6, col:11> 'const char *' lvalue
    |                   `-UnaryOperator 0x12a142cf0 <col:7, col:8> 'const char *' lvalue prefix '*' cannot overflow
    |                     `-ImplicitCastExpr 0x12a142cd8 <col:8> 'const char **' <LValueToRValue>
    |                       `-DeclRefExpr 0x12a142cb8 <col:8> 'const char **' lvalue ParmVar 0x12a128108 'str' 'const char **'
    |-IfStmt 0x12a142f48 <line:37:2, col:24>
    | |-ImplicitCastExpr 0x12a142e88 <col:6> 'int *' <LValueToRValue>
    | | `-DeclRefExpr 0x12a142e68 <col:6> 'int *' lvalue ParmVar 0x12a1281b8 'fg_ret' 'int *'
    | `-BinaryOperator 0x12a142f28 <col:14, col:24> 'int' '='
    |   |-UnaryOperator 0x12a142ed8 <col:14, col:15> 'int' lvalue prefix '*' cannot overflow
    |   | `-ImplicitCastExpr 0x12a142ec0 <col:15> 'int *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x12a142ea0 <col:15> 'int *' lvalue ParmVar 0x12a1281b8 'fg_ret' 'int *'
    |   `-ImplicitCastExpr 0x12a142f10 <col:24> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x12a142ef0 <col:24> 'int' lvalue Var 0x12a128440 'fg' 'int'
    `-IfStmt 0x12a143048 <line:38:2, col:24>
      |-ImplicitCastExpr 0x12a142f88 <col:6> 'int *' <LValueToRValue>
      | `-DeclRefExpr 0x12a142f68 <col:6> 'int *' lvalue ParmVar 0x12a128238 'bg_ret' 'int *'
      `-BinaryOperator 0x12a143028 <col:14, col:24> 'int' '='
        |-UnaryOperator 0x12a142fd8 <col:14, col:15> 'int' lvalue prefix '*' cannot overflow
        | `-ImplicitCastExpr 0x12a142fc0 <col:15> 'int *' <LValueToRValue>
        |   `-DeclRefExpr 0x12a142fa0 <col:15> 'int *' lvalue ParmVar 0x12a128238 'bg_ret' 'int *'
        `-ImplicitCastExpr 0x12a143010 <col:24> 'int' <LValueToRValue>
          `-DeclRefExpr 0x12a142ff0 <col:24> 'int' lvalue Var 0x12a1284c0 'bg' 'int'
