TranslationUnitDecl 0x148055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1480564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x148055bd0 '__int128'
|-TypedefDecl 0x148056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x148055bf0 'unsigned __int128'
|-TypedefDecl 0x148126a30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x148126800 'struct __NSConstantString_tag'
|   `-Record 0x148056580 '__NSConstantString_tag'
|-TypedefDecl 0x148126a98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x148055d90 '__SVInt8_t'
|-TypedefDecl 0x148126b00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x148055db0 '__SVInt16_t'
|-TypedefDecl 0x148126b68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x148055dd0 '__SVInt32_t'
|-TypedefDecl 0x148126bd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x148055df0 '__SVInt64_t'
|-TypedefDecl 0x148126c38 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x148055e10 '__SVUint8_t'
|-TypedefDecl 0x148126ca0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x148055e30 '__SVUint16_t'
|-TypedefDecl 0x148126d08 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x148055e50 '__SVUint32_t'
|-TypedefDecl 0x148126d70 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x148055e70 '__SVUint64_t'
|-TypedefDecl 0x148126dd8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x148055e90 '__SVFloat16_t'
|-TypedefDecl 0x148126e40 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x148055eb0 '__SVFloat32_t'
|-TypedefDecl 0x148126ea8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x148055ed0 '__SVFloat64_t'
|-TypedefDecl 0x148126f10 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x148055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x148126f78 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x148055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x148126fe0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x148055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x148127048 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x148055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1481270b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x148055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x148127118 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x148055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x148127180 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x148055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1481271e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x148055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x148127250 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x148055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x1481272b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x148056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x148127320 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x148056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x148127388 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x148056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x1481273f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x148056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x148127458 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x148056090 '__clang_svint8x3_t'
|-TypedefDecl 0x1481274c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1480560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x148127528 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1480560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x148127590 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1480560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x1481275f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x148056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x148127660 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x148056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x1481276c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x148056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x148127730 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x148056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x148127798 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x148056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x148128000 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1480561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x148128068 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1480561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1481280d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1480561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x148128138 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x148056210 '__clang_svint8x4_t'
|-TypedefDecl 0x1481281a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x148056230 '__clang_svint16x4_t'
|-TypedefDecl 0x148128208 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x148056250 '__clang_svint32x4_t'
|-TypedefDecl 0x148128270 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x148056270 '__clang_svint64x4_t'
|-TypedefDecl 0x1481282d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x148056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x148128340 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1480562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x1481283a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1480562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x148128410 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1480562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x148128478 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x148056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x1481284e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x148056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x148128548 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x148056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x1481285b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x148056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x148128618 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x148056390 '__SVBool_t'
|-TypedefDecl 0x148128680 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1480563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x1481286e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1480563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x148128750 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1480563f0 '__SVCount_t'
|-TypedefDecl 0x1481287f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1481287b0 'char *'
|   `-BuiltinType 0x1480556b0 'char'
|-TypedefDecl 0x148128868 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1481287b0 'char *'
|   `-BuiltinType 0x1480556b0 'char'
|-FunctionDecl 0x148128d08 <dataset_diviso_filec/func1714_vuln.c:1:1, line:55:1> line:1:18 invalid mongo_insert_batch 'int (int *, const char *, const int **, int, int *, int)'
| |-ParmVarDecl 0x148128928 <col:38, col:45> col:45 referenced invalid conn 'int *'
| |-ParmVarDecl 0x1481289a8 <col:51, col:63> col:63 used ns 'const char *'
| |-ParmVarDecl 0x148128a60 <line:2:38, col:51> col:51 invalid bsons 'const int **'
| |-ParmVarDecl 0x148128ae0 <col:58, col:62> col:62 used count 'int'
| |-ParmVarDecl 0x148128b60 <col:69, col:90> col:90 referenced invalid custom_write_concern 'int *'
| |-ParmVarDecl 0x148128be0 <line:3:38, col:42> col:42 used flags 'int'
| `-CompoundStmt 0x14000c490 <col:50, line:55:1>
|   |-BinaryOperator 0x148128f10 <line:6:5, col:42> '<dependent type>' contains-errors '='
|   | |-BinaryOperator 0x148128ed0 <col:5, col:26> '<dependent type>' contains-errors '*'
|   | | |-RecoveryExpr 0x148128e18 <col:5> '<dependent type>' contains-errors lvalue
|   | | | `-DeclRefExpr 0x148128df8 <col:5> 'int *' lvalue ParmVar 0x148128b60 'custom_write_concern' 'int *'
|   | | `-RecoveryExpr 0x148128eb0 <col:26> '<dependent type>' contains-errors lvalue
|   | `-RecoveryExpr 0x148128ef0 <col:42> '<dependent type>' contains-errors lvalue
|   |-DeclStmt 0x148128fb0 <line:7:5, col:10>
|   | `-VarDecl 0x148128f48 <col:5, col:9> col:9 used i 'int'
|   |-DeclStmt 0x140009268 <line:8:5, col:15>
|   | `-VarDecl 0x140009200 <col:5, col:11> col:11 used data 'char *'
|   |-DeclStmt 0x140009ac0 <line:9:5, col:46>
|   | `-VarDecl 0x140009298 <col:5, col:45> col:9 used overhead 'int' cinit
|   |   `-ImplicitCastExpr 0x140009aa8 <col:21, col:45> 'int' <IntegralCast>
|   |     `-BinaryOperator 0x140009a88 <col:21, col:45> 'unsigned long' '+'
|   |       |-BinaryOperator 0x140009a30 <col:21, col:41> 'unsigned long' '+'
|   |       | |-ImplicitCastExpr 0x140009a18 <col:21, col:26> 'unsigned long' <IntegralCast>
|   |       | | `-BinaryOperator 0x140009340 <col:21, col:26> 'int' '+'
|   |       | |   |-IntegerLiteral 0x140009300 <col:21> 'int' 16
|   |       | |   `-IntegerLiteral 0x140009320 <col:26> 'int' 4
|   |       | `-CallExpr 0x1400099d8 <col:30, col:41> 'unsigned long'
|   |       |   |-ImplicitCastExpr 0x1400099c0 <col:30> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |       |   | `-DeclRefExpr 0x140009930 <col:30> 'unsigned long (const char *)' Function 0x1400097c0 'strlen' 'unsigned long (const char *)'
|   |       |   `-ImplicitCastExpr 0x140009a00 <col:38> 'const char *' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x140009950 <col:38> 'const char *' lvalue ParmVar 0x1481289a8 'ns' 'const char *'
|   |       `-ImplicitCastExpr 0x140009a70 <col:45> 'unsigned long' <IntegralCast>
|   |         `-IntegerLiteral 0x140009a50 <col:45> 'int' 1
|   |-DeclStmt 0x140009b90 <line:10:5, col:24>
|   | `-VarDecl 0x140009af0 <col:5, col:16> col:9 used size 'int' cinit
|   |   `-ImplicitCastExpr 0x140009b78 <col:16> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x140009b58 <col:16> 'int' lvalue Var 0x140009298 'overhead' 'int'
|   |-IfStmt 0x140009e50 <line:12:5, line:13:16>
|   | |-BinaryOperator 0x140009de8 <line:12:9, col:42> 'int' contains-errors '!='
|   | | |-CallExpr 0x140009d60 <col:9, col:37> '<dependent type>' contains-errors
|   | | | |-DeclRefExpr 0x140009d00 <col:9> 'int ()' Function 0x140009c48 'mongo_validate_ns' 'int ()'
|   | | | |-RecoveryExpr 0x140009d20 <col:28> '<dependent type>' contains-errors lvalue
|   | | | `-DeclRefExpr 0x140009d40 <col:34> 'const char *' lvalue ParmVar 0x1481289a8 'ns' 'const char *'
|   | | `-RecoveryExpr 0x140009dc8 <col:42> '<dependent type>' contains-errors lvalue
|   | `-ReturnStmt 0x140009e40 <line:13:9, col:16>
|   |   `-RecoveryExpr 0x140009e20 <col:16> '<dependent type>' contains-errors lvalue
|   |-ForStmt 0x14000b1f0 <line:15:5, line:19:5>
|   | |-BinaryOperator 0x140009eb0 <line:15:10, col:12> 'int' '='
|   | | |-DeclRefExpr 0x140009e70 <col:10> 'int' lvalue Var 0x148128f48 'i' 'int'
|   | | `-IntegerLiteral 0x140009e90 <col:12> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x140009f40 <col:15, col:17> 'int' '<'
|   | | |-ImplicitCastExpr 0x140009f10 <col:15> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x140009ed0 <col:15> 'int' lvalue Var 0x148128f48 'i' 'int'
|   | | `-ImplicitCastExpr 0x140009f28 <col:17> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x140009ef0 <col:17> 'int' lvalue ParmVar 0x148128ae0 'count' 'int'
|   | |-UnaryOperator 0x140009f80 <col:24, col:25> 'int' postfix '++'
|   | | `-DeclRefExpr 0x140009f60 <col:24> 'int' lvalue Var 0x148128f48 'i' 'int'
|   | `-CompoundStmt 0x14000b1d0 <col:30, line:19:5>
|   |   |-CompoundAssignOperator 0x14000a170 <line:16:9, col:37> 'int' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   |   | |-DeclRefExpr 0x140009f98 <col:9> 'int' lvalue Var 0x140009af0 'size' 'int'
|   |   | `-CallExpr 0x14000a148 <col:17, col:37> '<dependent type>' contains-errors
|   |   |   |-DeclRefExpr 0x14000a098 <col:17> 'int ()' Function 0x140009fe0 'bson_size' 'int ()'
|   |   |   `-ArraySubscriptExpr 0x14000a128 <col:28, col:35> '<dependent type>' contains-errors lvalue
|   |   |     |-ImplicitCastExpr 0x14000a0f8 <col:28> '<dependent type>' contains-errors <LValueToRValue>
|   |   |     | `-RecoveryExpr 0x14000a0b8 <col:28> '<dependent type>' contains-errors lvalue
|   |   |     `-ImplicitCastExpr 0x14000a110 <col:34> 'int' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x14000a0d8 <col:34> 'int' lvalue Var 0x148128f48 'i' 'int'
|   |   `-IfStmt 0x14000b1b0 <line:17:9, line:18:20>
|   |     |-BinaryOperator 0x14000b148 <line:17:13, col:54> 'int' contains-errors '!='
|   |     | |-CallExpr 0x14000b0f0 <col:13, col:49> '<dependent type>' contains-errors
|   |     | | |-DeclRefExpr 0x14000aeb8 <col:13> 'int ()' Function 0x14000ae00 'mongo_bson_valid' 'int ()'
|   |     | | |-RecoveryExpr 0x14000aed8 <col:31> '<dependent type>' contains-errors lvalue
|   |     | | |-ArraySubscriptExpr 0x14000b0d0 <col:37, col:44> '<dependent type>' contains-errors lvalue
|   |     | | | |-ImplicitCastExpr 0x14000b0a0 <col:37> '<dependent type>' contains-errors <LValueToRValue>
|   |     | | | | `-RecoveryExpr 0x14000aef8 <col:37> '<dependent type>' contains-errors lvalue
|   |     | | | `-ImplicitCastExpr 0x14000b0b8 <col:43> 'int' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x14000af18 <col:43> 'int' lvalue Var 0x148128f48 'i' 'int'
|   |     | | `-IntegerLiteral 0x14000af88 <col:47> 'int' 1
|   |     | `-RecoveryExpr 0x14000b128 <col:54> '<dependent type>' contains-errors lvalue
|   |     `-ReturnStmt 0x14000b1a0 <line:18:13, col:20>
|   |       `-RecoveryExpr 0x14000b180 <col:20> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x14000b4d0 <line:21:5, line:24:5>
|   | |-BinaryOperator 0x14000b340 <line:21:9, col:37> 'int' contains-errors '>'
|   | | |-ParenExpr 0x14000b2b8 <col:9, col:27> 'int'
|   | | | `-BinaryOperator 0x14000b298 <col:11, col:18> 'int' '-'
|   | | |   |-ImplicitCastExpr 0x14000b268 <col:11> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x14000b228 <col:11> 'int' lvalue Var 0x140009af0 'size' 'int'
|   | | |   `-ImplicitCastExpr 0x14000b280 <col:18> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x14000b248 <col:18> 'int' lvalue Var 0x140009298 'overhead' 'int'
|   | | `-CXXDependentScopeMemberExpr 0x14000b2f8 <col:31, col:37> '<dependent type>' contains-errors lvalue ->max_bson_size
|   | |   `-RecoveryExpr 0x14000b2d8 <col:31> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x14000b4b0 <col:53, line:24:5>
|   |   |-BinaryOperator 0x14000b448 <line:22:9, col:21> '<dependent type>' contains-errors '='
|   |   | |-CXXDependentScopeMemberExpr 0x14000b3a8 <col:9, col:15> '<dependent type>' contains-errors lvalue ->err
|   |   | | `-RecoveryExpr 0x14000b380 <col:9> '<dependent type>' contains-errors lvalue
|   |   | |   `-DeclRefExpr 0x14000b360 <col:9> 'int *' lvalue ParmVar 0x148128928 'conn' 'int *'
|   |   | `-RecoveryExpr 0x14000b428 <col:21> '<dependent type>' contains-errors lvalue
|   |   `-ReturnStmt 0x14000b4a0 <line:23:9, col:16>
|   |     `-RecoveryExpr 0x14000b480 <col:16> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x14000b660 <line:26:5, line:29:5>
|   | |-RecoveryExpr 0x14000b630 <line:26:9, line:27:57> '_Bool' contains-errors
|   | `-CompoundStmt 0x14000b650 <col:71, line:29:5>
|   |-BinaryOperator 0x14000bd18 <line:38:5, col:58> 'char *' '='
|   | |-DeclRefExpr 0x14000b9e0 <col:5> 'char *' lvalue Var 0x140009200 'data' 'char *'
|   | `-ImplicitCastExpr 0x14000bd00 <col:12, col:58> 'char *' <IntegralToPointer>
|   |   `-CallExpr 0x14000bc98 <col:12, col:58> 'int'
|   |     |-ImplicitCastExpr 0x14000bc80 <col:12> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x14000bae0 <col:12> 'int ()' Function 0x14000ba28 'mongo_data_append' 'int ()'
|   |     |-ImplicitCastExpr 0x14000bcd0 <col:31> 'char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x14000bb00 <col:31> 'char *' lvalue Var 0x140009200 'data' 'char *'
|   |     |-ImplicitCastExpr 0x14000bce8 <col:37> 'const char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x14000bb20 <col:37> 'const char *' lvalue ParmVar 0x1481289a8 'ns' 'const char *'
|   |     `-BinaryOperator 0x14000bc28 <col:41, col:56> 'unsigned long' '+'
|   |       |-CallExpr 0x14000bbb0 <col:41, col:52> 'unsigned long'
|   |       | |-ImplicitCastExpr 0x14000bb98 <col:41> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x14000bb40 <col:41> 'unsigned long (const char *)' Function 0x1400097c0 'strlen' 'unsigned long (const char *)'
|   |       | `-ImplicitCastExpr 0x14000bbd8 <col:49> 'const char *' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x14000bb60 <col:49> 'const char *' lvalue ParmVar 0x1481289a8 'ns' 'const char *'
|   |       `-ImplicitCastExpr 0x14000bc10 <col:56> 'unsigned long' <IntegralCast>
|   |         `-IntegerLiteral 0x14000bbf0 <col:56> 'int' 1
|   |-ForStmt 0x14000c0f0 <line:40:5, line:42:5>
|   | |-BinaryOperator 0x14000bd78 <line:40:10, col:12> 'int' '='
|   | | |-DeclRefExpr 0x14000bd38 <col:10> 'int' lvalue Var 0x148128f48 'i' 'int'
|   | | `-IntegerLiteral 0x14000bd58 <col:12> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x14000be18 <col:15, col:17> 'int' '<'
|   | | |-ImplicitCastExpr 0x14000bdd8 <col:15> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x14000bd98 <col:15> 'int' lvalue Var 0x148128f48 'i' 'int'
|   | | `-ImplicitCastExpr 0x14000be00 <col:17> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x14000bdb8 <col:17> 'int' lvalue ParmVar 0x148128ae0 'count' 'int'
|   | |-UnaryOperator 0x14000be58 <col:24, col:25> 'int' postfix '++'
|   | | `-DeclRefExpr 0x14000be38 <col:24> 'int' lvalue Var 0x148128f48 'i' 'int'
|   | `-CompoundStmt 0x14000c0d8 <col:30, line:42:5>
|   |   `-BinaryOperator 0x14000c0b8 <line:41:9, col:79> 'char *' contains-errors '='
|   |     |-DeclRefExpr 0x14000be70 <col:9> 'char *' lvalue Var 0x140009200 'data' 'char *'
|   |     `-CallExpr 0x14000c080 <col:16, col:79> '<dependent type>' contains-errors
|   |       |-DeclRefExpr 0x14000be90 <col:16> 'int ()' Function 0x14000ba28 'mongo_data_append' 'int ()'
|   |       |-DeclRefExpr 0x14000beb0 <col:35> 'char *' lvalue Var 0x140009200 'data' 'char *'
|   |       |-CXXDependentScopeMemberExpr 0x14000bf60 <col:41, col:51> '<dependent type>' contains-errors lvalue ->data
|   |       | `-ArraySubscriptExpr 0x14000bf40 <col:41, col:48> '<dependent type>' contains-errors lvalue
|   |       |   |-ImplicitCastExpr 0x14000bf10 <col:41> '<dependent type>' contains-errors <LValueToRValue>
|   |       |   | `-RecoveryExpr 0x14000bed0 <col:41> '<dependent type>' contains-errors lvalue
|   |       |   `-ImplicitCastExpr 0x14000bf28 <col:47> 'int' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x14000bef0 <col:47> 'int' lvalue Var 0x148128f48 'i' 'int'
|   |       `-CallExpr 0x14000c058 <col:57, col:77> '<dependent type>' contains-errors
|   |         |-DeclRefExpr 0x14000bfa8 <col:57> 'int ()' Function 0x140009fe0 'bson_size' 'int ()'
|   |         `-ArraySubscriptExpr 0x14000c038 <col:68, col:75> '<dependent type>' contains-errors lvalue
|   |           |-ImplicitCastExpr 0x14000c008 <col:68> '<dependent type>' contains-errors <LValueToRValue>
|   |           | `-RecoveryExpr 0x14000bfc8 <col:68> '<dependent type>' contains-errors lvalue
|   |           `-ImplicitCastExpr 0x14000c020 <col:74> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x14000bfe8 <col:74> 'int' lvalue Var 0x148128f48 'i' 'int'
|   `-IfStmt 0x14000c460 <line:45:5, line:54:5> has_else
|     |-RecoveryExpr 0x14000c128 <line:45:9> '_Bool' contains-errors
|     |-CompoundStmt 0x14000c3f8 <col:25, line:51:5>
|     | `-IfStmt 0x14000c298 <line:46:9, line:48:9>
|     |   |-RecoveryExpr 0x14000c268 <line:46:13, col:47> '_Bool' contains-errors
|     |   `-CompoundStmt 0x14000c288 <col:61, line:48:9>
|     `-CompoundStmt 0x14000c450 <line:52:10, line:54:5>
`-FunctionDecl 0x1400097c0 <line:9:30> col:30 implicit used strlen 'unsigned long (const char *)' extern
  |-ParmVarDecl 0x1400098c0 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x140009868 <<invalid sloc>> Implicit 902
