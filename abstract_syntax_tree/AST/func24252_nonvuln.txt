TranslationUnitDecl 0x150855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1508564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x150855bd0 '__int128'
|-TypedefDecl 0x150856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x150855bf0 'unsigned __int128'
|-TypedefDecl 0x150926230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x150926000 'struct __NSConstantString_tag'
|   `-Record 0x150856580 '__NSConstantString_tag'
|-TypedefDecl 0x150926298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x150855d90 '__SVInt8_t'
|-TypedefDecl 0x150926300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x150855db0 '__SVInt16_t'
|-TypedefDecl 0x150926368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x150855dd0 '__SVInt32_t'
|-TypedefDecl 0x1509263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x150855df0 '__SVInt64_t'
|-TypedefDecl 0x150926438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x150855e10 '__SVUint8_t'
|-TypedefDecl 0x1509264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x150855e30 '__SVUint16_t'
|-TypedefDecl 0x150926508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x150855e50 '__SVUint32_t'
|-TypedefDecl 0x150926570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x150855e70 '__SVUint64_t'
|-TypedefDecl 0x1509265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x150855e90 '__SVFloat16_t'
|-TypedefDecl 0x150926640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x150855eb0 '__SVFloat32_t'
|-TypedefDecl 0x1509266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x150855ed0 '__SVFloat64_t'
|-TypedefDecl 0x150926710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x150855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x150926778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x150855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1509267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x150855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x150926848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x150855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1509268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x150855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x150926918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x150855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x150926980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x150855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1509269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x150855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x150926a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x150855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x150926ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x150856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x150926b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x150856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x150926b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x150856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x150926bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x150856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x150926c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x150856090 '__clang_svint8x3_t'
|-TypedefDecl 0x150926cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1508560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x150926d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1508560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x150926d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1508560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x150926df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x150856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x150926e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x150856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x150926ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x150856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x150926f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x150856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x150926f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x150856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x150927800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1508561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x150927868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1508561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1509278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1508561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x150927938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x150856210 '__clang_svint8x4_t'
|-TypedefDecl 0x1509279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x150856230 '__clang_svint16x4_t'
|-TypedefDecl 0x150927a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x150856250 '__clang_svint32x4_t'
|-TypedefDecl 0x150927a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x150856270 '__clang_svint64x4_t'
|-TypedefDecl 0x150927ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x150856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x150927b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1508562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x150927ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1508562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x150927c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1508562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x150927c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x150856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x150927ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x150856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x150927d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x150856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x150927db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x150856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x150927e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x150856390 '__SVBool_t'
|-TypedefDecl 0x150927e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1508563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x150927ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1508563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x150927f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1508563f0 '__SVCount_t'
|-TypedefDecl 0x150927ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x150927fb0 'char *'
|   `-BuiltinType 0x1508556b0 'char'
|-TypedefDecl 0x150928068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x150927fb0 'char *'
|   `-BuiltinType 0x1508556b0 'char'
|-FunctionDecl 0x150928500 <dataset_diviso_filec/func24252_nonvuln.c:1:1, line:13:1> line:1:20 ConvertXYZToLCHab 'void (const double, const double, const double, double *, double *, double *)' static inline
| |-ParmVarDecl 0x1509280d8 <col:38, col:51> col:51 used X 'const double'
| |-ParmVarDecl 0x150928158 <col:53, col:66> col:66 used Y 'const double'
| |-ParmVarDecl 0x1509281d8 <line:2:3, col:16> col:16 used Z 'const double'
| |-ParmVarDecl 0x150928288 <col:18, col:26> col:26 used luma 'double *'
| |-ParmVarDecl 0x150928308 <col:31, col:39> col:39 used chroma 'double *'
| |-ParmVarDecl 0x150928388 <col:46, col:54> col:54 used hue 'double *'
| `-CompoundStmt 0x150942110 <line:3:1, line:13:1>
|   |-DeclStmt 0x150928738 <line:4:3, line:6:6>
|   | |-VarDecl 0x150928638 <line:4:3, line:5:5> col:5 used a 'double'
|   | `-VarDecl 0x1509286b8 <line:4:3, line:6:5> col:5 used b 'double'
|   |-CallExpr 0x150940c18 <line:8:3, col:35> 'int'
|   | |-ImplicitCastExpr 0x150940c00 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x150940ab8 <col:3> 'int ()' Function 0x150940a00 'ConvertXYZToLab' 'int ()'
|   | |-ImplicitCastExpr 0x150940c68 <col:19> 'double' <LValueToRValue>
|   | | `-DeclRefExpr 0x150940ad8 <col:19> 'const double' lvalue ParmVar 0x1509280d8 'X' 'const double'
|   | |-ImplicitCastExpr 0x150940c80 <col:21> 'double' <LValueToRValue>
|   | | `-DeclRefExpr 0x150940af8 <col:21> 'const double' lvalue ParmVar 0x150928158 'Y' 'const double'
|   | |-ImplicitCastExpr 0x150940c98 <col:23> 'double' <LValueToRValue>
|   | | `-DeclRefExpr 0x150940b18 <col:23> 'const double' lvalue ParmVar 0x1509281d8 'Z' 'const double'
|   | |-ImplicitCastExpr 0x150940cb0 <col:25> 'double *' <LValueToRValue>
|   | | `-DeclRefExpr 0x150940b38 <col:25> 'double *' lvalue ParmVar 0x150928288 'luma' 'double *'
|   | |-UnaryOperator 0x150940b78 <col:30, col:31> 'double *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x150940b58 <col:31> 'double' lvalue Var 0x150928638 'a' 'double'
|   | `-UnaryOperator 0x150940bb0 <col:33, col:34> 'double *' prefix '&' cannot overflow
|   |   `-DeclRefExpr 0x150940b90 <col:34> 'double' lvalue Var 0x1509286b8 'b' 'double'
|   |-BinaryOperator 0x150941678 <line:9:3, col:52> 'double' '='
|   | |-UnaryOperator 0x150940d00 <col:3, col:4> 'double' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x150940ce8 <col:4> 'double *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x150940cc8 <col:4> 'double *' lvalue ParmVar 0x150928308 'chroma' 'double *'
|   | `-BinaryOperator 0x150941658 <col:11, col:52> 'double' '+'
|   |   |-BinaryOperator 0x150941618 <col:11, col:46> 'double' '/'
|   |   | |-CallExpr 0x1509415c8 <col:11, col:44> 'double'
|   |   | | |-ImplicitCastExpr 0x1509415b0 <col:11> 'double (*)(double, double)' <FunctionToPointerDecay>
|   |   | | | `-DeclRefExpr 0x1509413b0 <col:11> 'double (double, double)' Function 0x150941180 'hypot' 'double (double, double)'
|   |   | | |-BinaryOperator 0x150941488 <col:17, col:29> 'double' '*'
|   |   | | | |-FloatingLiteral 0x1509413d0 <col:17> 'double' 2.550000e+02
|   |   | | | `-ParenExpr 0x150941468 <col:23, col:29> 'double'
|   |   | | |   `-BinaryOperator 0x150941448 <col:24, col:26> 'double' '-'
|   |   | | |     |-ImplicitCastExpr 0x150941430 <col:24> 'double' <LValueToRValue>
|   |   | | |     | `-DeclRefExpr 0x1509413f0 <col:24> 'double' lvalue Var 0x150928638 'a' 'double'
|   |   | | |     `-FloatingLiteral 0x150941410 <col:26> 'double' 5.000000e-01
|   |   | | `-BinaryOperator 0x150941560 <col:31, col:43> 'double' '*'
|   |   | |   |-FloatingLiteral 0x1509414a8 <col:31> 'double' 2.550000e+02
|   |   | |   `-ParenExpr 0x150941540 <col:37, col:43> 'double'
|   |   | |     `-BinaryOperator 0x150941520 <col:38, col:40> 'double' '-'
|   |   | |       |-ImplicitCastExpr 0x150941508 <col:38> 'double' <LValueToRValue>
|   |   | |       | `-DeclRefExpr 0x1509414c8 <col:38> 'double' lvalue Var 0x1509286b8 'b' 'double'
|   |   | |       `-FloatingLiteral 0x1509414e8 <col:40> 'double' 5.000000e-01
|   |   | `-FloatingLiteral 0x1509415f8 <col:46> 'double' 2.550000e+02
|   |   `-FloatingLiteral 0x150941638 <col:52> 'double' 5.000000e-01
|   |-BinaryOperator 0x150941f88 <line:10:3, col:58> 'double' contains-errors '='
|   | |-UnaryOperator 0x150941db8 <col:3, col:4> 'double' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x150941da0 <col:4> 'double *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x150941698 <col:4> 'double *' lvalue ParmVar 0x150928388 'hue' 'double *'
|   | `-BinaryOperator 0x150941f68 <col:8, col:58> '<dependent type>' contains-errors '/'
|   |   |-BinaryOperator 0x150941f48 <col:8, col:49> '<dependent type>' contains-errors '/'
|   |   | |-BinaryOperator 0x150941f08 <col:8, col:47> 'double' '*'
|   |   | | |-FloatingLiteral 0x1509416e8 <col:8> 'double' 1.800000e+02
|   |   | | `-CallExpr 0x150941ed8 <col:14, col:47> 'double'
|   |   | |   |-ImplicitCastExpr 0x150941ec0 <col:14> 'double (*)(double, double)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x150941938 <col:14> 'double (double, double)' Function 0x150941708 'atan2' 'double (double, double)'
|   |   | |   |-BinaryOperator 0x150941e28 <col:20, col:32> 'double' '*'
|   |   | |   | |-FloatingLiteral 0x150941958 <col:20> 'double' 2.550000e+02
|   |   | |   | `-ParenExpr 0x150941e08 <col:26, col:32> 'double'
|   |   | |   |   `-BinaryOperator 0x150941de8 <col:27, col:29> 'double' '-'
|   |   | |   |     |-ImplicitCastExpr 0x150941dd0 <col:27> 'double' <LValueToRValue>
|   |   | |   |     | `-DeclRefExpr 0x150941978 <col:27> 'double' lvalue Var 0x1509286b8 'b' 'double'
|   |   | |   |     `-FloatingLiteral 0x150941998 <col:29> 'double' 5.000000e-01
|   |   | |   `-BinaryOperator 0x150941ea0 <col:34, col:46> 'double' '*'
|   |   | |     |-FloatingLiteral 0x150941a40 <col:34> 'double' 2.550000e+02
|   |   | |     `-ParenExpr 0x150941e80 <col:40, col:46> 'double'
|   |   | |       `-BinaryOperator 0x150941e60 <col:41, col:43> 'double' '-'
|   |   | |         |-ImplicitCastExpr 0x150941e48 <col:41> 'double' <LValueToRValue>
|   |   | |         | `-DeclRefExpr 0x150941a60 <col:41> 'double' lvalue Var 0x150928638 'a' 'double'
|   |   | |         `-FloatingLiteral 0x150941a80 <col:43> 'double' 5.000000e-01
|   |   | `-RecoveryExpr 0x150941f28 <col:49> '<dependent type>' contains-errors lvalue
|   |   `-FloatingLiteral 0x150941bb8 <col:58> 'double' 3.600000e+02
|   `-IfStmt 0x1509420f0 <line:11:3, line:12:11>
|     |-BinaryOperator 0x150942030 <line:11:7, col:14> 'int' '<'
|     | |-ImplicitCastExpr 0x150942018 <col:7, col:8> 'double' <LValueToRValue>
|     | | `-UnaryOperator 0x150941fe0 <col:7, col:8> 'double' lvalue prefix '*' cannot overflow
|     | |   `-ImplicitCastExpr 0x150941fc8 <col:8> 'double *' <LValueToRValue>
|     | |     `-DeclRefExpr 0x150941fa8 <col:8> 'double *' lvalue ParmVar 0x150928388 'hue' 'double *'
|     | `-FloatingLiteral 0x150941ff8 <col:14> 'double' 0.000000e+00
|     `-CompoundAssignOperator 0x1509420c0 <line:12:5, col:11> 'double' '+=' ComputeLHSTy='double' ComputeResultTy='double'
|       |-UnaryOperator 0x150942088 <col:5, col:6> 'double' lvalue prefix '*' cannot overflow
|       | `-ImplicitCastExpr 0x150942070 <col:6> 'double *' <LValueToRValue>
|       |   `-DeclRefExpr 0x150942050 <col:6> 'double *' lvalue ParmVar 0x150928388 'hue' 'double *'
|       `-FloatingLiteral 0x1509420a0 <col:11> 'double' 1.000000e+00
|-FunctionDecl 0x150941180 <line:9:11> col:11 implicit used hypot 'double (double, double)' extern
| |-ParmVarDecl 0x150941280 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x1509412e8 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x150941228 <<invalid sloc>> Implicit 1091
| |-ConstAttr 0x150941360 <col:11> Implicit
| `-NoThrowAttr 0x150941388 <col:11> Implicit
`-FunctionDecl 0x150941708 <line:10:14> col:14 implicit used atan2 'double (double, double)' extern
  |-ParmVarDecl 0x150941808 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x150941870 <<invalid sloc>> <invalid sloc> 'double'
  |-BuiltinAttr 0x1509417b0 <<invalid sloc>> Implicit 995
  |-ConstAttr 0x1509418e8 <col:14> Implicit
  `-NoThrowAttr 0x150941910 <col:14> Implicit
