TranslationUnitDecl 0x12e843c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x12e844ab8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x12e8441d0 '__int128'
|-TypedefDecl 0x12e844b28 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x12e8441f0 'unsigned __int128'
|-TypedefDecl 0x12e90e830 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12e90e600 'struct __NSConstantString_tag'
|   `-Record 0x12e844b80 '__NSConstantString_tag'
|-TypedefDecl 0x12e90e898 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x12e844390 '__SVInt8_t'
|-TypedefDecl 0x12e90e900 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x12e8443b0 '__SVInt16_t'
|-TypedefDecl 0x12e90e968 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x12e8443d0 '__SVInt32_t'
|-TypedefDecl 0x12e90e9d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x12e8443f0 '__SVInt64_t'
|-TypedefDecl 0x12e90ea38 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x12e844410 '__SVUint8_t'
|-TypedefDecl 0x12e90eaa0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x12e844430 '__SVUint16_t'
|-TypedefDecl 0x12e90eb08 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x12e844450 '__SVUint32_t'
|-TypedefDecl 0x12e90eb70 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x12e844470 '__SVUint64_t'
|-TypedefDecl 0x12e90ebd8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x12e844490 '__SVFloat16_t'
|-TypedefDecl 0x12e90ec40 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x12e8444b0 '__SVFloat32_t'
|-TypedefDecl 0x12e90eca8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x12e8444d0 '__SVFloat64_t'
|-TypedefDecl 0x12e90ed10 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x12e8444f0 '__SVBfloat16_t'
|-TypedefDecl 0x12e90ed78 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x12e844510 '__clang_svint8x2_t'
|-TypedefDecl 0x12e90ede0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x12e844530 '__clang_svint16x2_t'
|-TypedefDecl 0x12e90ee48 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x12e844550 '__clang_svint32x2_t'
|-TypedefDecl 0x12e90eeb0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x12e844570 '__clang_svint64x2_t'
|-TypedefDecl 0x12e90ef18 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x12e844590 '__clang_svuint8x2_t'
|-TypedefDecl 0x12e90ef80 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x12e8445b0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12e90efe8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x12e8445d0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12e90f050 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x12e8445f0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12e90f0b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x12e844610 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12e90f120 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x12e844630 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12e90f188 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x12e844650 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12e90f1f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x12e844670 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12e90f258 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x12e844690 '__clang_svint8x3_t'
|-TypedefDecl 0x12e90f2c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x12e8446b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12e90f328 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x12e8446d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12e90f390 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x12e8446f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12e90f3f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x12e844710 '__clang_svuint8x3_t'
|-TypedefDecl 0x12e90f460 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x12e844730 '__clang_svuint16x3_t'
|-TypedefDecl 0x12e90f4c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x12e844750 '__clang_svuint32x3_t'
|-TypedefDecl 0x12e90f530 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x12e844770 '__clang_svuint64x3_t'
|-TypedefDecl 0x12e90f598 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x12e844790 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12e90fe00 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x12e8447b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12e90fe68 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x12e8447d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12e90fed0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x12e8447f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12e90ff38 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x12e844810 '__clang_svint8x4_t'
|-TypedefDecl 0x12e90ffa0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x12e844830 '__clang_svint16x4_t'
|-TypedefDecl 0x12e910008 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x12e844850 '__clang_svint32x4_t'
|-TypedefDecl 0x12e910070 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x12e844870 '__clang_svint64x4_t'
|-TypedefDecl 0x12e9100d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x12e844890 '__clang_svuint8x4_t'
|-TypedefDecl 0x12e910140 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x12e8448b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12e9101a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x12e8448d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12e910210 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x12e8448f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12e910278 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x12e844910 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12e9102e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x12e844930 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12e910348 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x12e844950 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12e9103b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x12e844970 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12e910418 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x12e844990 '__SVBool_t'
|-TypedefDecl 0x12e910480 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x12e8449b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12e9104e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x12e8449d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12e910550 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x12e8449f0 '__SVCount_t'
|-TypedefDecl 0x12e9105f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12e9105b0 'char *'
|   `-BuiltinType 0x12e843cb0 'char'
|-TypedefDecl 0x12e910668 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12e9105b0 'char *'
|   `-BuiltinType 0x12e843cb0 'char'
`-FunctionDecl 0x12e9109a8 <dataset_diviso_filec/func294_nonvuln.c:1:1, line:35:1> line:1:1 invalid njs_string_decode_uri_cp 'int (const int *, const char **, const char *, int)'
  |-ParmVarDecl 0x12e9106f0 <col:26, col:40> col:40 invalid hex 'const int *'
  |-ParmVarDecl 0x12e9107a8 <col:45, col:60> col:60 used start 'const char **'
  |-ParmVarDecl 0x12e910828 <line:2:5, col:19> col:19 used end 'const char *'
  |-ParmVarDecl 0x12e9108a8 <col:24, col:35> col:35 invalid expect_percent 'int'
  `-CompoundStmt 0x12e011380 <line:3:1, line:35:1>
    |-DeclStmt 0x12e910af0 <line:6:5, col:29>
    | `-VarDecl 0x12e910a88 <col:5, col:28> col:28 used p 'const char *'
    |-CallExpr 0x12e910d10 <line:9:5, col:30> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x12e910c60 <col:5> 'int ()' Function 0x12e910ba8 'njs_utf8_decode_init' 'int ()'
    | `-UnaryOperator 0x12e910cf8 <col:26, col:27> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   `-RecoveryExpr 0x12e910cd8 <col:27> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x12e010c78 <line:12:5, line:14:5>
    | |-CallExpr 0x12e010b38 <line:12:9, col:32> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x12e010a60 <col:9> 'int ()' Function 0x12e0109a8 'njs_fast_path' 'int ()'
    | | `-BinaryOperator 0x12e010b18 <col:23, col:29> 'int' contains-errors '!='
    | |   |-RecoveryExpr 0x12e010af8 <col:23> '<dependent type>' contains-errors lvalue
    | |   `-CharacterLiteral 0x12e010a98 <col:29> 'int' 37
    | `-CompoundStmt 0x12e010c60 <col:35, line:14:5>
    |   `-ReturnStmt 0x12e010c50 <line:13:9, col:53>
    |     `-ConditionalOperator 0x12e010c20 <col:16, col:53> '<dependent type>' contains-errors
    |       |-RecoveryExpr 0x12e010b60 <col:16> '<dependent type>' contains-errors lvalue
    |       |-RecoveryExpr 0x12e010be0 <col:33> '<dependent type>' contains-errors lvalue
    |       `-RecoveryExpr 0x12e010c00 <col:53> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x12e010d20 <line:16:5, col:10> 'const char *' '='
    | |-DeclRefExpr 0x12e010c98 <col:5> 'const char *' lvalue Var 0x12e910a88 'p' 'const char *'
    | `-ImplicitCastExpr 0x12e010d08 <col:9, col:10> 'const char *' <LValueToRValue>
    |   `-UnaryOperator 0x12e010cf0 <col:9, col:10> 'const char *' lvalue prefix '*' cannot overflow
    |     `-ImplicitCastExpr 0x12e010cd8 <col:10> 'const char **' <LValueToRValue>
    |       `-DeclRefExpr 0x12e010cb8 <col:10> 'const char **' lvalue ParmVar 0x12e9107a8 'start' 'const char **'
    |-IfStmt 0x12e011000 <line:18:5, line:20:5>
    | |-CallExpr 0x12e010f78 <line:18:9, col:37> 'int'
    | | |-ImplicitCastExpr 0x12e010f60 <col:9> 'int (*)()' <FunctionToPointerDecay>
    | | | `-DeclRefExpr 0x12e010e20 <col:9> 'int ()' Function 0x12e010d68 'njs_slow_path' 'int ()'
    | | `-BinaryOperator 0x12e010f10 <col:23, col:34> 'int' '>='
    | |   |-ParenExpr 0x12e010eb8 <col:23, col:29> 'const char *'
    | |   | `-BinaryOperator 0x12e010e98 <col:24, col:28> 'const char *' '+'
    | |   |   |-ImplicitCastExpr 0x12e010e80 <col:24> 'const char *' <LValueToRValue>
    | |   |   | `-DeclRefExpr 0x12e010e40 <col:24> 'const char *' lvalue Var 0x12e910a88 'p' 'const char *'
    | |   |   `-IntegerLiteral 0x12e010e60 <col:28> 'int' 1
    | |   `-ImplicitCastExpr 0x12e010ef8 <col:34> 'const char *' <LValueToRValue>
    | |     `-DeclRefExpr 0x12e010ed8 <col:34> 'const char *' lvalue ParmVar 0x12e910828 'end' 'const char *'
    | `-CompoundStmt 0x12e010fe8 <col:40, line:20:5>
    |   `-ReturnStmt 0x12e010fd8 <line:19:9, col:16>
    |     `-RecoveryExpr 0x12e010fb8 <col:16> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x12e011150 <line:23:5, line:25:5>
    | |-RecoveryExpr 0x12e011120 <line:23:9, col:29> '_Bool' contains-errors
    | `-CompoundStmt 0x12e011140 <col:32, line:25:5>
    |-IfStmt 0x12e0112a0 <line:28:5, line:30:5>
    | |-RecoveryExpr 0x12e011270 <line:28:9, col:29> '_Bool' contains-errors
    | `-CompoundStmt 0x12e011290 <col:32, line:30:5>
    `-CompoundAssignOperator 0x12e011330 <line:32:5, col:15> 'const char *' '+=' ComputeLHSTy='const char *' ComputeResultTy='const char *'
      |-UnaryOperator 0x12e0112f8 <col:5, col:6> 'const char *' lvalue prefix '*' cannot overflow
      | `-ImplicitCastExpr 0x12e0112e0 <col:6> 'const char **' <LValueToRValue>
      |   `-DeclRefExpr 0x12e0112c0 <col:6> 'const char **' lvalue ParmVar 0x12e9107a8 'start' 'const char **'
      `-IntegerLiteral 0x12e011310 <col:15> 'int' 2
