TranslationUnitDecl 0x15a855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x15a8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x15a855bd0 '__int128'
|-TypedefDecl 0x15a856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x15a855bf0 'unsigned __int128'
|-TypedefDecl 0x15b00be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x15b00bc00 'struct __NSConstantString_tag'
|   `-Record 0x15a856580 '__NSConstantString_tag'
|-TypedefDecl 0x15b00be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x15a855d90 '__SVInt8_t'
|-TypedefDecl 0x15b00bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x15a855db0 '__SVInt16_t'
|-TypedefDecl 0x15b00bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x15a855dd0 '__SVInt32_t'
|-TypedefDecl 0x15b00bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x15a855df0 '__SVInt64_t'
|-TypedefDecl 0x15b00c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x15a855e10 '__SVUint8_t'
|-TypedefDecl 0x15b00c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x15a855e30 '__SVUint16_t'
|-TypedefDecl 0x15b00c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x15a855e50 '__SVUint32_t'
|-TypedefDecl 0x15b00c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x15a855e70 '__SVUint64_t'
|-TypedefDecl 0x15b00c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x15a855e90 '__SVFloat16_t'
|-TypedefDecl 0x15b00c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x15a855eb0 '__SVFloat32_t'
|-TypedefDecl 0x15b00c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x15a855ed0 '__SVFloat64_t'
|-TypedefDecl 0x15b00c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x15a855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x15b00c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x15a855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x15b00c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x15a855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x15b00c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x15a855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x15b00c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x15a855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x15b00c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x15a855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x15b00c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x15a855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x15b00c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x15a855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x15b00c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x15a855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x15b00c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x15a856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x15b00c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x15a856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x15b00c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x15a856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x15b00c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x15a856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x15b00c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x15a856090 '__clang_svint8x3_t'
|-TypedefDecl 0x15b00c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x15a8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x15b00c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x15a8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x15b00c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x15a8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x15b00c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x15a856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x15b00ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x15a856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x15b00cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x15a856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x15b00cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x15a856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x15b00cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x15a856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x15b00d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x15a8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x15b00d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x15a8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x15b00d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x15a8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x15b00d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x15a856210 '__clang_svint8x4_t'
|-TypedefDecl 0x15b00d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x15a856230 '__clang_svint16x4_t'
|-TypedefDecl 0x15b00d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x15a856250 '__clang_svint32x4_t'
|-TypedefDecl 0x15b00d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x15a856270 '__clang_svint64x4_t'
|-TypedefDecl 0x15b00d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x15a856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x15b00d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x15a8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x15b00d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x15a8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x15b00d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x15a8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x15b00d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x15a856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x15b00d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x15a856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x15b00d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x15a856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x15b00d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x15a856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x15b00da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x15a856390 '__SVBool_t'
|-TypedefDecl 0x15b00da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x15a8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x15b00dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x15a8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x15b00db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x15a8563f0 '__SVCount_t'
|-TypedefDecl 0x15b00dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x15b00dbb0 'char *'
|   `-BuiltinType 0x15a8556b0 'char'
|-TypedefDecl 0x15b00dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x15b00dbb0 'char *'
|   `-BuiltinType 0x15a8556b0 'char'
|-FunctionDecl 0x15b00ddf8 <dataset_diviso_filec/func4037_nonvuln.c:1:1, line:23:1> line:1:21 invalid timelib_lookup_month 'int (char **)' static
| |-ParmVarDecl 0x15b00dd28 <col:42, col:49> col:49 used ptr 'char **'
| `-CompoundStmt 0x15b029c90 <line:2:1, line:23:1>
|   |-DeclStmt 0x15b00df28 <line:3:2, col:12>
|   | `-VarDecl 0x15b00dec0 <col:2, col:8> col:8 used word 'char *'
|   |-DeclStmt 0x15b00e0c0 <line:4:2, col:26>
|   | |-VarDecl 0x15b00df58 <col:2, col:17> col:8 used begin 'char *' cinit
|   | | `-ImplicitCastExpr 0x15b00e010 <col:16, col:17> 'char *' <LValueToRValue>
|   | |   `-UnaryOperator 0x15b00dff8 <col:16, col:17> 'char *' lvalue prefix '*' cannot overflow
|   | |     `-ImplicitCastExpr 0x15b00dfe0 <col:17> 'char **' <LValueToRValue>
|   | |       `-DeclRefExpr 0x15b00dfc0 <col:17> 'char **' lvalue ParmVar 0x15b00dd28 'ptr' 'char **'
|   | `-VarDecl 0x15b00e040 <col:2, col:23> col:23 used end 'char *'
|   |-DeclStmt 0x15b00e158 <line:6:2, col:32>
|   | `-VarDecl 0x15b00e0f0 <col:2, col:30> col:30 invalid tp 'const int *'
|   |-WhileStmt 0x15b027630 <line:8:2, line:10:2>
|   | |-BinaryOperator 0x15b027590 <line:8:9, col:72> 'int' '||'
|   | | |-ParenExpr 0x15b00e360 <col:9, col:38> 'int'
|   | | | `-BinaryOperator 0x15b00e340 <col:10, col:35> 'int' '&&'
|   | | |   |-BinaryOperator 0x15b00e238 <col:10, col:19> 'int' '>='
|   | | |   | |-ImplicitCastExpr 0x15b00e220 <col:10, col:12> 'int' <IntegralCast>
|   | | |   | | `-ImplicitCastExpr 0x15b00e208 <col:10, col:12> 'char' <LValueToRValue>
|   | | |   | |   `-UnaryOperator 0x15b00e1d8 <col:10, col:12> 'char' lvalue prefix '*' cannot overflow
|   | | |   | |     `-ImplicitCastExpr 0x15b00e1c0 <col:11, col:12> 'char *' <LValueToRValue>
|   | | |   | |       `-UnaryOperator 0x15b00e1a8 <col:11, col:12> 'char *' lvalue prefix '*' cannot overflow
|   | | |   | |         `-ImplicitCastExpr 0x15b00e190 <col:12> 'char **' <LValueToRValue>
|   | | |   | |           `-DeclRefExpr 0x15b00e170 <col:12> 'char **' lvalue ParmVar 0x15b00dd28 'ptr' 'char **'
|   | | |   | `-CharacterLiteral 0x15b00e1f0 <col:19> 'int' 65
|   | | |   `-BinaryOperator 0x15b00e320 <col:26, col:35> 'int' '<='
|   | | |     |-ImplicitCastExpr 0x15b00e308 <col:26, col:28> 'int' <IntegralCast>
|   | | |     | `-ImplicitCastExpr 0x15b00e2f0 <col:26, col:28> 'char' <LValueToRValue>
|   | | |     |   `-UnaryOperator 0x15b00e2c0 <col:26, col:28> 'char' lvalue prefix '*' cannot overflow
|   | | |     |     `-ImplicitCastExpr 0x15b00e2a8 <col:27, col:28> 'char *' <LValueToRValue>
|   | | |     |       `-UnaryOperator 0x15b00e290 <col:27, col:28> 'char *' lvalue prefix '*' cannot overflow
|   | | |     |         `-ImplicitCastExpr 0x15b00e278 <col:28> 'char **' <LValueToRValue>
|   | | |     |           `-DeclRefExpr 0x15b00e258 <col:28> 'char **' lvalue ParmVar 0x15b00dd28 'ptr' 'char **'
|   | | |     `-CharacterLiteral 0x15b00e2d8 <col:35> 'int' 90
|   | | `-ParenExpr 0x15b027570 <col:43, col:72> 'int'
|   | |   `-BinaryOperator 0x15b027550 <col:44, col:69> 'int' '&&'
|   | |     |-BinaryOperator 0x15b027448 <col:44, col:53> 'int' '>='
|   | |     | |-ImplicitCastExpr 0x15b027430 <col:44, col:46> 'int' <IntegralCast>
|   | |     | | `-ImplicitCastExpr 0x15b027418 <col:44, col:46> 'char' <LValueToRValue>
|   | |     | |   `-UnaryOperator 0x15b00e3e8 <col:44, col:46> 'char' lvalue prefix '*' cannot overflow
|   | |     | |     `-ImplicitCastExpr 0x15b00e3d0 <col:45, col:46> 'char *' <LValueToRValue>
|   | |     | |       `-UnaryOperator 0x15b00e3b8 <col:45, col:46> 'char *' lvalue prefix '*' cannot overflow
|   | |     | |         `-ImplicitCastExpr 0x15b00e3a0 <col:46> 'char **' <LValueToRValue>
|   | |     | |           `-DeclRefExpr 0x15b00e380 <col:46> 'char **' lvalue ParmVar 0x15b00dd28 'ptr' 'char **'
|   | |     | `-CharacterLiteral 0x15b027400 <col:53> 'int' 97
|   | |     `-BinaryOperator 0x15b027530 <col:60, col:69> 'int' '<='
|   | |       |-ImplicitCastExpr 0x15b027518 <col:60, col:62> 'int' <IntegralCast>
|   | |       | `-ImplicitCastExpr 0x15b027500 <col:60, col:62> 'char' <LValueToRValue>
|   | |       |   `-UnaryOperator 0x15b0274d0 <col:60, col:62> 'char' lvalue prefix '*' cannot overflow
|   | |       |     `-ImplicitCastExpr 0x15b0274b8 <col:61, col:62> 'char *' <LValueToRValue>
|   | |       |       `-UnaryOperator 0x15b0274a0 <col:61, col:62> 'char *' lvalue prefix '*' cannot overflow
|   | |       |         `-ImplicitCastExpr 0x15b027488 <col:62> 'char **' <LValueToRValue>
|   | |       |           `-DeclRefExpr 0x15b027468 <col:62> 'char **' lvalue ParmVar 0x15b00dd28 'ptr' 'char **'
|   | |       `-CharacterLiteral 0x15b0274e8 <col:69> 'int' 122
|   | `-CompoundStmt 0x15b027618 <col:75, line:10:2>
|   |   `-UnaryOperator 0x15b027600 <line:9:3, col:6> 'char *' prefix '++'
|   |     `-UnaryOperator 0x15b0275e8 <col:5, col:6> 'char *' lvalue prefix '*' cannot overflow
|   |       `-ImplicitCastExpr 0x15b0275d0 <col:6> 'char **' <LValueToRValue>
|   |         `-DeclRefExpr 0x15b0275b0 <col:6> 'char **' lvalue ParmVar 0x15b00dd28 'ptr' 'char **'
|   |-BinaryOperator 0x15b0276d8 <line:11:2, col:9> 'char *' '='
|   | |-DeclRefExpr 0x15b027650 <col:2> 'char *' lvalue Var 0x15b00e040 'end' 'char *'
|   | `-ImplicitCastExpr 0x15b0276c0 <col:8, col:9> 'char *' <LValueToRValue>
|   |   `-UnaryOperator 0x15b0276a8 <col:8, col:9> 'char *' lvalue prefix '*' cannot overflow
|   |     `-ImplicitCastExpr 0x15b027690 <col:9> 'char **' <LValueToRValue>
|   |       `-DeclRefExpr 0x15b027670 <col:9> 'char **' lvalue ParmVar 0x15b00dd28 'ptr' 'char **'
|   |-BinaryOperator 0x15b027e50 <line:12:2, col:42> 'char *' '='
|   | |-DeclRefExpr 0x15b0276f8 <col:2> 'char *' lvalue Var 0x15b00dec0 'word' 'char *'
|   | `-ImplicitCastExpr 0x15b027a18 <col:9, col:42> 'char *' <IntegralToPointer>
|   |   `-CallExpr 0x15b0279e8 <col:9, col:42> 'int'
|   |     |-ImplicitCastExpr 0x15b0279d0 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x15b027870 <col:9> 'int ()' Function 0x15b0277b8 'timelib_calloc' 'int ()'
|   |     |-IntegerLiteral 0x15b027890 <col:24> 'int' 1
|   |     `-BinaryOperator 0x15b027978 <col:27, col:41> 'long' '+'
|   |       |-BinaryOperator 0x15b027920 <col:27, col:33> 'long' '-'
|   |       | |-ImplicitCastExpr 0x15b0278f0 <col:27> 'char *' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x15b0278b0 <col:27> 'char *' lvalue Var 0x15b00e040 'end' 'char *'
|   |       | `-ImplicitCastExpr 0x15b027908 <col:33> 'char *' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x15b0278d0 <col:33> 'char *' lvalue Var 0x15b00df58 'begin' 'char *'
|   |       `-ImplicitCastExpr 0x15b027960 <col:41> 'long' <IntegralCast>
|   |         `-IntegerLiteral 0x15b027940 <col:41> 'int' 1
|   |-CallExpr 0x15b0282a8 <line:13:2, col:33> 'void *'
|   | |-ImplicitCastExpr 0x15b028290 <col:2> 'void *(*)(void *, const void *, unsigned long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x15b028138 <col:2> 'void *(void *, const void *, unsigned long)' Function 0x15b027ee8 'memcpy' 'void *(void *, const void *, unsigned long)'
|   | |-ImplicitCastExpr 0x15b0282f8 <col:9> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x15b0282e0 <col:9> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x15b028158 <col:9> 'char *' lvalue Var 0x15b00dec0 'word' 'char *'
|   | |-ImplicitCastExpr 0x15b028328 <col:15> 'const void *' <BitCast>
|   | | `-ImplicitCastExpr 0x15b028310 <col:15> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x15b028178 <col:15> 'char *' lvalue Var 0x15b00df58 'begin' 'char *'
|   | `-ImplicitCastExpr 0x15b028340 <col:22, col:28> 'unsigned long' <IntegralCast>
|   |   `-BinaryOperator 0x15b028208 <col:22, col:28> 'long' '-'
|   |     |-ImplicitCastExpr 0x15b0281d8 <col:22> 'char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x15b028198 <col:22> 'char *' lvalue Var 0x15b00e040 'end' 'char *'
|   |     `-ImplicitCastExpr 0x15b0281f0 <col:28> 'char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x15b0281b8 <col:28> 'char *' lvalue Var 0x15b00df58 'begin' 'char *'
|   |-ForStmt 0x15b029a98 <line:15:2, line:19:2>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-CXXDependentScopeMemberExpr 0x15b029600 <line:15:34, col:38> '<dependent type>' contains-errors lvalue ->name
|   | | `-RecoveryExpr 0x15b0283b0 <col:34> '<dependent type>' contains-errors lvalue
|   | |-UnaryOperator 0x15b029668 <col:44, col:46> '<dependent type>' contains-errors postfix '++' cannot overflow
|   | | `-RecoveryExpr 0x15b029648 <col:44> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x15b029a80 <col:50, line:19:2>
|   |   `-IfStmt 0x15b029a60 <line:16:3, line:18:3>
|   |     |-BinaryOperator 0x15b0299c8 <line:16:7, col:37> 'int' contains-errors '=='
|   |     | |-CallExpr 0x15b029978 <col:7, col:32> '<dependent type>' contains-errors
|   |     | | |-DeclRefExpr 0x15b0298a0 <col:7> 'int (const char *, const char *)' Function 0x15b0296c0 'strcasecmp' 'int (const char *, const char *)'
|   |     | | |-DeclRefExpr 0x15b0298c0 <col:18> 'char *' lvalue Var 0x15b00dec0 'word' 'char *'
|   |     | | `-CXXDependentScopeMemberExpr 0x15b029900 <col:24, col:28> '<dependent type>' contains-errors lvalue ->name
|   |     | |   `-RecoveryExpr 0x15b0298e0 <col:24> '<dependent type>' contains-errors lvalue
|   |     | `-IntegerLiteral 0x15b0299a8 <col:37> 'int' 0
|   |     `-CompoundStmt 0x15b029a50 <col:40, line:18:3>
|   |-CallExpr 0x15b029c08 <line:21:2, col:19> 'int'
|   | |-ImplicitCastExpr 0x15b029bf0 <col:2> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x15b029bb0 <col:2> 'int ()' Function 0x15b029af8 'timelib_free' 'int ()'
|   | `-ImplicitCastExpr 0x15b029c30 <col:15> 'char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x15b029bd0 <col:15> 'char *' lvalue Var 0x15b00dec0 'word' 'char *'
|   `-ReturnStmt 0x15b029c80 <line:22:2, col:9>
|     `-RecoveryExpr 0x15b029c60 <col:9> '<dependent type>' contains-errors lvalue
|-FunctionDecl 0x15b027ee8 <line:13:2> col:2 implicit used memcpy 'void *(void *, const void *, unsigned long)' extern
| |-ParmVarDecl 0x15b027fe8 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x15b028050 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x15b0280b8 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x15b027f90 <<invalid sloc>> Implicit 882
`-FunctionDecl 0x15b0296c0 <line:16:7> col:7 implicit used strcasecmp 'int (const char *, const char *)' extern
  |-ParmVarDecl 0x15b0297c0 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x15b029828 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x15b029768 <<invalid sloc>> Implicit 957
