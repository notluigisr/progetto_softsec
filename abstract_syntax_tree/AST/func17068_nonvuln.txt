TranslationUnitDecl 0x13c055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x13c0564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x13c055bd0 '__int128'
|-TypedefDecl 0x13c056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x13c055bf0 'unsigned __int128'
|-TypedefDecl 0x13c80be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13c80bc00 'struct __NSConstantString_tag'
|   `-Record 0x13c056580 '__NSConstantString_tag'
|-TypedefDecl 0x13c80be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x13c055d90 '__SVInt8_t'
|-TypedefDecl 0x13c80bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x13c055db0 '__SVInt16_t'
|-TypedefDecl 0x13c80bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x13c055dd0 '__SVInt32_t'
|-TypedefDecl 0x13c80bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x13c055df0 '__SVInt64_t'
|-TypedefDecl 0x13c80c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x13c055e10 '__SVUint8_t'
|-TypedefDecl 0x13c80c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x13c055e30 '__SVUint16_t'
|-TypedefDecl 0x13c80c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x13c055e50 '__SVUint32_t'
|-TypedefDecl 0x13c80c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x13c055e70 '__SVUint64_t'
|-TypedefDecl 0x13c80c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x13c055e90 '__SVFloat16_t'
|-TypedefDecl 0x13c80c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x13c055eb0 '__SVFloat32_t'
|-TypedefDecl 0x13c80c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x13c055ed0 '__SVFloat64_t'
|-TypedefDecl 0x13c80c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x13c055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13c80c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x13c055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13c80c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x13c055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13c80c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x13c055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13c80c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x13c055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13c80c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x13c055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13c80c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x13c055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13c80c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x13c055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13c80c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x13c055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13c80c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x13c056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13c80c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x13c056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13c80c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x13c056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13c80c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x13c056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13c80c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x13c056090 '__clang_svint8x3_t'
|-TypedefDecl 0x13c80c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x13c0560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13c80c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x13c0560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13c80c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x13c0560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13c80c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x13c056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13c80ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x13c056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13c80cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x13c056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13c80cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x13c056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13c80cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x13c056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13c80d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x13c0561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13c80d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x13c0561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13c80d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x13c0561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13c80d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x13c056210 '__clang_svint8x4_t'
|-TypedefDecl 0x13c80d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x13c056230 '__clang_svint16x4_t'
|-TypedefDecl 0x13c80d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x13c056250 '__clang_svint32x4_t'
|-TypedefDecl 0x13c80d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x13c056270 '__clang_svint64x4_t'
|-TypedefDecl 0x13c80d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x13c056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13c80d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x13c0562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13c80d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x13c0562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13c80d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x13c0562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13c80d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x13c056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13c80d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x13c056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13c80d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x13c056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13c80d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x13c056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13c80da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x13c056390 '__SVBool_t'
|-TypedefDecl 0x13c80da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x13c0563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13c80dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x13c0563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13c80db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x13c0563f0 '__SVCount_t'
|-TypedefDecl 0x13c80dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13c80dbb0 'char *'
|   `-BuiltinType 0x13c0556b0 'char'
|-TypedefDecl 0x13c80dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13c80dbb0 'char *'
|   `-BuiltinType 0x13c0556b0 'char'
|-FunctionDecl 0x13c80de38 <dataset_diviso_filec/func17068_nonvuln.c:1:1, line:54:1> line:1:5 mnt_match_options 'int (const char *, const char *)'
| |-ParmVarDecl 0x13c80dcd8 <col:23, col:35> col:35 used optstr 'const char *'
| |-ParmVarDecl 0x13c80dd58 <col:43, col:55> col:55 used pattern 'const char *'
| `-CompoundStmt 0x13c82d338 <line:2:1, line:54:1>
|   |-DeclStmt 0x13c80e0c8 <line:3:2, col:37>
|   | |-VarDecl 0x13c80df50 <col:2, col:8> col:8 used name 'char *'
|   | `-VarDecl 0x13c80dfd0 <col:2, col:30> col:15 used pat 'char *' cinit
|   |   `-CStyleCastExpr 0x13c80e088 <col:21, col:30> 'char *' <NoOp>
|   |     `-ImplicitCastExpr 0x13c80e070 <col:30> 'const char *' <LValueToRValue> part_of_explicit_cast
|   |       `-DeclRefExpr 0x13c80e038 <col:30> 'const char *' lvalue ParmVar 0x13c80dd58 'pattern' 'const char *'
|   |-DeclStmt 0x13c80e1f8 <line:4:2, col:20>
|   | |-VarDecl 0x13c80e0f8 <col:2, col:8> col:8 used buf 'char *'
|   | `-VarDecl 0x13c80e178 <col:2, col:14> col:14 used patval 'char *'
|   |-BinaryOperator 0x13c828a20 <line:5:2, col:32> '<dependent type>' contains-errors ','
|   | |-RecoveryExpr 0x13c80e3a8 <col:2, col:18> '<dependent type>' contains-errors lvalue
|   | | |-UnaryExprOrTypeTraitExpr 0x13c80e388 <col:2, col:9> 'unsigned long' contains-errors sizeof
|   | | | `-RecoveryExpr 0x13c80e368 <col:9> '<dependent type>' contains-errors lvalue
|   | | `-IntegerLiteral 0x13c80e260 <col:18> 'int' 0
|   | `-BinaryOperator 0x13c828a00 <col:21, col:32> '<dependent type>' contains-errors '='
|   |   |-RecoveryExpr 0x13c80e3d8 <col:21> '<dependent type>' contains-errors lvalue
|   |   `-IntegerLiteral 0x13c80e2c8 <col:32> 'int' 0
|   |-DeclStmt 0x13c828ae0 <line:6:2, col:15>
|   | `-VarDecl 0x13c828a58 <col:2, col:14> col:6 used match 'int' cinit
|   |   `-IntegerLiteral 0x13c828ac0 <col:14> 'int' 1
|   |-IfStmt 0x13c828be8 <line:8:2, line:9:10>
|   | |-BinaryOperator 0x13c828b98 <line:8:6, col:19> 'int' '&&'
|   | | |-UnaryOperator 0x13c828b30 <col:6, col:7> 'int' prefix '!' cannot overflow
|   | | | `-ImplicitCastExpr 0x13c828b18 <col:7> 'const char *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x13c828af8 <col:7> 'const char *' lvalue ParmVar 0x13c80dd58 'pattern' 'const char *'
|   | | `-UnaryOperator 0x13c828b80 <col:18, col:19> 'int' prefix '!' cannot overflow
|   | |   `-ImplicitCastExpr 0x13c828b68 <col:19> 'const char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x13c828b48 <col:19> 'const char *' lvalue ParmVar 0x13c80dcd8 'optstr' 'const char *'
|   | `-ReturnStmt 0x13c828bd8 <line:9:3, col:10>
|   |   `-IntegerLiteral 0x13c828bb8 <col:10> 'int' 1
|   |-IfStmt 0x13c828c88 <line:10:2, line:11:10>
|   | |-UnaryOperator 0x13c828c40 <line:10:6, col:7> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x13c828c28 <col:7> 'const char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x13c828c08 <col:7> 'const char *' lvalue ParmVar 0x13c80dd58 'pattern' 'const char *'
|   | `-ReturnStmt 0x13c828c78 <line:11:3, col:10>
|   |   `-IntegerLiteral 0x13c828c58 <col:10> 'int' 0
|   |-BinaryOperator 0x13c829658 <line:13:2, col:34> 'char *' '='
|   | |-DeclRefExpr 0x13c828ca8 <col:2> 'char *' lvalue Var 0x13c80e0f8 'buf' 'char *'
|   | `-ImplicitCastExpr 0x13c829640 <col:8, col:34> 'char *' <BitCast>
|   |   `-CallExpr 0x13c829618 <col:8, col:34> 'void *'
|   |     |-ImplicitCastExpr 0x13c829600 <col:8> 'void *(*)(unsigned long)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x13c8292d0 <col:8> 'void *(unsigned long)' Function 0x13c829130 'malloc' 'void *(unsigned long)'
|   |     `-BinaryOperator 0x13c8295b0 <col:15, col:33> 'unsigned long' '+'
|   |       |-CallExpr 0x13c829538 <col:15, col:29> 'unsigned long'
|   |       | |-ImplicitCastExpr 0x13c829520 <col:15> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x13c829498 <col:15> 'unsigned long (const char *)' Function 0x13c829328 'strlen' 'unsigned long (const char *)'
|   |       | `-ImplicitCastExpr 0x13c829560 <col:22> 'const char *' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x13c8294b8 <col:22> 'const char *' lvalue ParmVar 0x13c80dd58 'pattern' 'const char *'
|   |       `-ImplicitCastExpr 0x13c829598 <col:33> 'unsigned long' <IntegralCast>
|   |         `-IntegerLiteral 0x13c829578 <col:33> 'int' 1
|   |-IfStmt 0x13c8296f8 <line:14:2, line:15:10>
|   | |-UnaryOperator 0x13c8296b0 <line:14:6, col:7> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x13c829698 <col:7> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x13c829678 <col:7> 'char *' lvalue Var 0x13c80e0f8 'buf' 'char *'
|   | `-ReturnStmt 0x13c8296e8 <line:15:3, col:10>
|   |   `-IntegerLiteral 0x13c8296c8 <col:10> 'int' 0
|   |-WhileStmt 0x13c82d028 <line:18:2, line:50:2>
|   | |-BinaryOperator 0x13c82b770 <line:18:9, line:19:25> 'int' '&&'
|   | | |-ImplicitCastExpr 0x13c82b758 <line:18:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x13c829718 <col:9> 'int' lvalue Var 0x13c828a58 'match' 'int'
|   | | `-UnaryOperator 0x13c82b740 <col:18, line:19:25> 'int' prefix '!' cannot overflow
|   | |   `-CallExpr 0x13c82b6f8 <line:18:19, line:19:25> 'int'
|   | |     |-ImplicitCastExpr 0x13c82b6e0 <line:18:19> 'int (*)()' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x13c829850 <col:19> 'int ()' Function 0x13c829798 'mnt_optstr_next_option' 'int ()'
|   | |     |-UnaryOperator 0x13c8298c0 <col:42, col:43> 'char **' prefix '&' cannot overflow
|   | |     | `-DeclRefExpr 0x13c829870 <col:43> 'char *' lvalue Var 0x13c80dfd0 'pat' 'char *'
|   | |     |-UnaryOperator 0x13c8298f8 <col:48, col:49> 'char **' prefix '&' cannot overflow
|   | |     | `-DeclRefExpr 0x13c8298d8 <col:49> 'char *' lvalue Var 0x13c80df50 'name' 'char *'
|   | |     |-UnaryOperator 0x13c82b658 <col:55, col:56> 'char **' prefix '&' cannot overflow
|   | |     | `-DeclRefExpr 0x13c82b638 <col:56> 'char *' lvalue Var 0x13c80df50 'name' 'char *'
|   | |     |-UnaryOperator 0x13c829960 <line:19:7, col:8> 'char **' prefix '&' cannot overflow
|   | |     | `-DeclRefExpr 0x13c829940 <col:8> 'char *' lvalue Var 0x13c80e178 'patval' 'char *'
|   | |     `-UnaryOperator 0x13c82b690 <col:16, col:17> 'char **' prefix '&' cannot overflow
|   | |       `-DeclRefExpr 0x13c82b670 <col:17> 'char *' lvalue Var 0x13c80e178 'patval' 'char *'
|   | `-CompoundStmt 0x13c82cfd8 <col:28, line:50:2>
|   |   |-DeclStmt 0x13c82b810 <line:20:3, col:12>
|   |   | `-VarDecl 0x13c82b7a8 <col:3, col:9> col:9 used val 'char *'
|   |   |-UnaryExprOrTypeTraitExpr 0x13c82b880 <line:21:3, col:10> 'unsigned long' contains-errors sizeof
|   |   | `-RecoveryExpr 0x13c82b860 <col:10> '<dependent type>' contains-errors lvalue
|   |   |-DeclStmt 0x13c82b9d8 <line:22:3, col:17>
|   |   | |-VarDecl 0x13c82b8b8 <col:3, col:12> col:7 used no 'int' cinit
|   |   | | `-IntegerLiteral 0x13c82b920 <col:12> 'int' 0
|   |   | `-VarDecl 0x13c82b958 <col:3, col:15> col:15 used rc 'int'
|   |   |-IfStmt 0x13c82c000 <line:24:3, line:27:25> has_else
|   |   | |-BinaryOperator 0x13c82ba88 <line:24:7, col:16> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x13c82ba70 <col:7, col:8> 'int' <IntegralCast>
|   |   | | | `-ImplicitCastExpr 0x13c82ba58 <col:7, col:8> 'char' <LValueToRValue>
|   |   | | |   `-UnaryOperator 0x13c82ba28 <col:7, col:8> 'char' lvalue prefix '*' cannot overflow
|   |   | | |     `-ImplicitCastExpr 0x13c82ba10 <col:8> 'char *' <LValueToRValue>
|   |   | | |       `-DeclRefExpr 0x13c82b9f0 <col:8> 'char *' lvalue Var 0x13c80df50 'name' 'char *'
|   |   | | `-CharacterLiteral 0x13c82ba40 <col:16> 'int' 43
|   |   | |-BinaryOperator 0x13c82bb68 <line:25:4, col:18> 'char *' ','
|   |   | | |-UnaryOperator 0x13c82bac8 <col:4, col:8> 'char *' postfix '++'
|   |   | | | `-DeclRefExpr 0x13c82baa8 <col:4> 'char *' lvalue Var 0x13c80df50 'name' 'char *'
|   |   | | `-UnaryOperator 0x13c82bb50 <col:12, col:18> 'char *' postfix '--'
|   |   | |   `-DeclRefExpr 0x13c82bb30 <col:12> 'char *' lvalue Var 0x13c80df50 'name' 'char *'
|   |   | `-IfStmt 0x13c82bfe0 <line:26:8, line:27:25>
|   |   |   |-RecoveryExpr 0x13c82be58 <line:26:12, col:51> '_Bool' contains-errors
|   |   |   `-BinaryOperator 0x13c82bfc0 <line:27:4, col:25> 'char *' ','
|   |   |     |-CompoundAssignOperator 0x13c82beb8 <col:4, col:12> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
|   |   |     | |-DeclRefExpr 0x13c82be78 <col:4> 'char *' lvalue Var 0x13c80df50 'name' 'char *'
|   |   |     | `-IntegerLiteral 0x13c82be98 <col:12> 'int' 2
|   |   |     `-CompoundAssignOperator 0x13c82bf90 <col:15, col:25> 'char *' '-=' ComputeLHSTy='char *' ComputeResultTy='char *'
|   |   |       |-DeclRefExpr 0x13c82bf70 <col:15> 'char *' lvalue Var 0x13c80df50 'name' 'char *'
|   |   |       `-IntegerLiteral 0x13c82bf00 <col:25> 'int' 2
|   |   |-CallExpr 0x13c82c270 <line:29:3, col:33> 'int'
|   |   | |-ImplicitCastExpr 0x13c82c258 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x13c82c110 <col:3> 'int ()' Function 0x13c82c058 'xstrncpy' 'int ()'
|   |   | |-ImplicitCastExpr 0x13c82c2a8 <col:12> 'char *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x13c82c130 <col:12> 'char *' lvalue Var 0x13c80e0f8 'buf' 'char *'
|   |   | |-ImplicitCastExpr 0x13c82c2c0 <col:17> 'char *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x13c82c150 <col:17> 'char *' lvalue Var 0x13c80df50 'name' 'char *'
|   |   | `-BinaryOperator 0x13c82c238 <col:23, col:32> 'char *' '+'
|   |   |   |-ImplicitCastExpr 0x13c82c220 <col:23> 'char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x13c82c200 <col:23> 'char *' lvalue Var 0x13c80df50 'name' 'char *'
|   |   |   `-IntegerLiteral 0x13c82c188 <col:32> 'int' 1
|   |   |-BinaryOperator 0x13c82c578 <line:31:3, col:52> 'int' contains-errors '='
|   |   | |-DeclRefExpr 0x13c82c2d8 <col:3> 'int' lvalue Var 0x13c82b958 'rc' 'int'
|   |   | `-CallExpr 0x13c82c538 <col:8, col:52> '<dependent type>' contains-errors
|   |   |   |-DeclRefExpr 0x13c82c3d8 <col:8> 'int ()' Function 0x13c82c320 'mnt_optstr_get_option' 'int ()'
|   |   |   |-DeclRefExpr 0x13c82c3f8 <col:30> 'const char *' lvalue ParmVar 0x13c80dcd8 'optstr' 'const char *'
|   |   |   |-DeclRefExpr 0x13c82c418 <col:38> 'char *' lvalue Var 0x13c80e0f8 'buf' 'char *'
|   |   |   |-UnaryOperator 0x13c82c458 <col:43, col:44> 'char **' prefix '&' cannot overflow
|   |   |   | `-DeclRefExpr 0x13c82c438 <col:44> 'char *' lvalue Var 0x13c82b7a8 'val' 'char *'
|   |   |   `-UnaryOperator 0x13c82c520 <col:49, col:50> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   |     `-RecoveryExpr 0x13c82c500 <col:50> '<dependent type>' contains-errors lvalue
|   |   |-IfStmt 0x13c82cb70 <line:34:3, line:36:9>
|   |   | |-RecoveryExpr 0x13c82caf0 <line:34:7, line:35:55> '_Bool' contains-errors
|   |   | `-BinaryOperator 0x13c82cb50 <line:36:4, col:9> 'int' '='
|   |   |   |-DeclRefExpr 0x13c82cb10 <col:4> 'int' lvalue Var 0x13c82b958 'rc' 'int'
|   |   |   `-IntegerLiteral 0x13c82cb30 <col:9> 'int' 1
|   |   `-SwitchStmt 0x13c82cbc8 <line:38:3, line:48:3>
|   |     |-ImplicitCastExpr 0x13c82cbb0 <line:38:11> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x13c82cb90 <col:11> 'int' lvalue Var 0x13c82b958 'rc' 'int'
|   |     `-CompoundStmt 0x13c82cf98 <col:15, line:48:3>
|   |       |-CaseStmt 0x13c82cc28 <line:39:3, line:40:26>
|   |       | |-ConstantExpr 0x13c82cc10 <line:39:8> 'int'
|   |       | | `-IntegerLiteral 0x13c82cbf0 <col:8> 'int' 0
|   |       | `-BinaryOperator 0x13c82cd58 <line:40:4, col:26> 'int' '='
|   |       |   |-DeclRefExpr 0x13c82cc50 <col:4> 'int' lvalue Var 0x13c828a58 'match' 'int'
|   |       |   `-ConditionalOperator 0x13c82cd28 <col:12, col:26> 'int'
|   |       |     |-BinaryOperator 0x13c82ccc8 <col:12, col:18> 'int' '=='
|   |       |     | |-ImplicitCastExpr 0x13c82ccb0 <col:12> 'int' <LValueToRValue>
|   |       |     | | `-DeclRefExpr 0x13c82cc70 <col:12> 'int' lvalue Var 0x13c82b8b8 'no' 'int'
|   |       |     | `-IntegerLiteral 0x13c82cc90 <col:18> 'int' 0
|   |       |     |-IntegerLiteral 0x13c82cce8 <col:22> 'int' 1
|   |       |     `-IntegerLiteral 0x13c82cd08 <col:26> 'int' 0
|   |       |-BreakStmt 0x13c82cd78 <line:41:4>
|   |       |-CaseStmt 0x13c82cdb8 <line:42:3, line:43:26>
|   |       | |-ConstantExpr 0x13c82cda0 <line:42:8> 'int'
|   |       | | `-IntegerLiteral 0x13c82cd80 <col:8> 'int' 1
|   |       | `-BinaryOperator 0x13c82cee8 <line:43:4, col:26> 'int' '='
|   |       |   |-DeclRefExpr 0x13c82cde0 <col:4> 'int' lvalue Var 0x13c828a58 'match' 'int'
|   |       |   `-ConditionalOperator 0x13c82ceb8 <col:12, col:26> 'int'
|   |       |     |-BinaryOperator 0x13c82ce58 <col:12, col:18> 'int' '=='
|   |       |     | |-ImplicitCastExpr 0x13c82ce40 <col:12> 'int' <LValueToRValue>
|   |       |     | | `-DeclRefExpr 0x13c82ce00 <col:12> 'int' lvalue Var 0x13c82b8b8 'no' 'int'
|   |       |     | `-IntegerLiteral 0x13c82ce20 <col:18> 'int' 1
|   |       |     |-IntegerLiteral 0x13c82ce78 <col:22> 'int' 1
|   |       |     `-IntegerLiteral 0x13c82ce98 <col:26> 'int' 0
|   |       |-BreakStmt 0x13c82cf08 <line:44:4>
|   |       |-DefaultStmt 0x13c82cf70 <line:45:3, line:46:12>
|   |       | `-BinaryOperator 0x13c82cf50 <col:4, col:12> 'int' '='
|   |       |   |-DeclRefExpr 0x13c82cf10 <col:4> 'int' lvalue Var 0x13c828a58 'match' 'int'
|   |       |   `-IntegerLiteral 0x13c82cf30 <col:12> 'int' 0
|   |       `-BreakStmt 0x13c82cf90 <line:47:4>
|   |-CallExpr 0x13c82d298 <line:52:2, col:10> 'void'
|   | |-ImplicitCastExpr 0x13c82d280 <col:2> 'void (*)(void *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x13c82d1f8 <col:2> 'void (void *)' Function 0x13c82d088 'free' 'void (void *)'
|   | `-ImplicitCastExpr 0x13c82d2d8 <col:7> 'void *' <BitCast>
|   |   `-ImplicitCastExpr 0x13c82d2c0 <col:7> 'char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x13c82d218 <col:7> 'char *' lvalue Var 0x13c80e0f8 'buf' 'char *'
|   `-ReturnStmt 0x13c82d328 <line:53:2, col:9>
|     `-ImplicitCastExpr 0x13c82d310 <col:9> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x13c82d2f0 <col:9> 'int' lvalue Var 0x13c828a58 'match' 'int'
|-FunctionDecl 0x13c829130 <line:13:8> col:8 implicit used malloc 'void *(unsigned long)' extern
| |-ParmVarDecl 0x13c829230 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-BuiltinAttr 0x13c8291d8 <<invalid sloc>> Implicit 871
| `-AllocSizeAttr 0x13c8292a0 <col:8> Implicit 1
|-FunctionDecl 0x13c829328 <col:15> col:15 implicit used strlen 'unsigned long (const char *)' extern
| |-ParmVarDecl 0x13c829428 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x13c8293d0 <<invalid sloc>> Implicit 902
|-FunctionDecl 0x13c82c738 <line:35:26> col:26 implicit used strncmp 'int (const char *, const char *, unsigned long)' extern
| |-ParmVarDecl 0x13c82c838 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x13c82c8a0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x13c82c908 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x13c82c7e0 <<invalid sloc>> Implicit 888
`-FunctionDecl 0x13c82d088 <line:52:2> col:2 implicit used free 'void (void *)' extern
  |-ParmVarDecl 0x13c82d188 <<invalid sloc>> <invalid sloc> 'void *'
  `-BuiltinAttr 0x13c82d130 <<invalid sloc>> Implicit 873
