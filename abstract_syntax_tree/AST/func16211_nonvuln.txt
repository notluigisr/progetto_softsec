TranslationUnitDecl 0x11e055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x11e0564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x11e055bd0 '__int128'
|-TypedefDecl 0x11e056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x11e055bf0 'unsigned __int128'
|-TypedefDecl 0x11e126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x11e126000 'struct __NSConstantString_tag'
|   `-Record 0x11e056580 '__NSConstantString_tag'
|-TypedefDecl 0x11e126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x11e055d90 '__SVInt8_t'
|-TypedefDecl 0x11e126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x11e055db0 '__SVInt16_t'
|-TypedefDecl 0x11e126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x11e055dd0 '__SVInt32_t'
|-TypedefDecl 0x11e1263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x11e055df0 '__SVInt64_t'
|-TypedefDecl 0x11e126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x11e055e10 '__SVUint8_t'
|-TypedefDecl 0x11e1264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x11e055e30 '__SVUint16_t'
|-TypedefDecl 0x11e126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x11e055e50 '__SVUint32_t'
|-TypedefDecl 0x11e126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x11e055e70 '__SVUint64_t'
|-TypedefDecl 0x11e1265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x11e055e90 '__SVFloat16_t'
|-TypedefDecl 0x11e126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x11e055eb0 '__SVFloat32_t'
|-TypedefDecl 0x11e1266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x11e055ed0 '__SVFloat64_t'
|-TypedefDecl 0x11e126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x11e055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x11e126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x11e055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x11e1267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x11e055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x11e126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x11e055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x11e1268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x11e055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x11e126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x11e055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x11e126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x11e055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x11e1269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x11e055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x11e126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x11e055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x11e126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x11e056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x11e126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x11e056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x11e126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x11e056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x11e126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x11e056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x11e126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x11e056090 '__clang_svint8x3_t'
|-TypedefDecl 0x11e126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x11e0560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x11e126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x11e0560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x11e126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x11e0560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x11e126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x11e056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x11e126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x11e056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x11e126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x11e056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x11e126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x11e056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x11e126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x11e056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x11e127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x11e0561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x11e127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x11e0561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x11e1278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x11e0561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x11e127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x11e056210 '__clang_svint8x4_t'
|-TypedefDecl 0x11e1279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x11e056230 '__clang_svint16x4_t'
|-TypedefDecl 0x11e127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x11e056250 '__clang_svint32x4_t'
|-TypedefDecl 0x11e127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x11e056270 '__clang_svint64x4_t'
|-TypedefDecl 0x11e127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x11e056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x11e127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x11e0562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x11e127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x11e0562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x11e127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x11e0562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x11e127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x11e056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x11e127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x11e056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x11e127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x11e056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x11e127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x11e056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x11e127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x11e056390 '__SVBool_t'
|-TypedefDecl 0x11e127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x11e0563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x11e127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x11e0563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x11e127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x11e0563f0 '__SVCount_t'
|-TypedefDecl 0x11e127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x11e127fb0 'char *'
|   `-BuiltinType 0x11e0556b0 'char'
|-TypedefDecl 0x11e128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x11e127fb0 'char *'
|   `-BuiltinType 0x11e0556b0 'char'
|-FunctionDecl 0x11e128438 <dataset_diviso_filec/func16211_nonvuln.c:1:1, line:50:1> line:1:5 invalid truncate_double 'int (double *, int, int, int, double)'
| |-ParmVarDecl 0x11e128108 <col:21, col:29> col:29 used nr 'double *'
| |-ParmVarDecl 0x11e1281a0 <col:33, col:38> col:38 used field_length 'int'
| |-ParmVarDecl 0x11e128220 <col:52, col:57> col:57 used dec 'int'
| |-ParmVarDecl 0x11e1282a0 <line:2:21, col:26> col:26 invalid unsigned_flag 'int'
| |-ParmVarDecl 0x11e128320 <col:41, col:48> col:48 used max_value 'double'
| `-CompoundStmt 0x11e144350 <line:3:1, line:50:1>
|   |-DeclStmt 0x11e1285a8 <line:4:3, col:15>
|   | `-VarDecl 0x11e128520 <col:3, col:14> col:7 used error 'int' cinit
|   |   `-IntegerLiteral 0x11e128588 <col:14> 'int' 0
|   |-DeclStmt 0x11e1286a8 <line:5:3, col:18>
|   | `-VarDecl 0x11e1285d8 <col:3, col:16> col:10 used res 'double' cinit
|   |   `-ImplicitCastExpr 0x11e128690 <col:15, col:16> 'double' <LValueToRValue>
|   |     `-UnaryOperator 0x11e128678 <col:15, col:16> 'double' lvalue prefix '*' cannot overflow
|   |       `-ImplicitCastExpr 0x11e128660 <col:16> 'double *' <LValueToRValue>
|   |         `-DeclRefExpr 0x11e128640 <col:16> 'double *' lvalue ParmVar 0x11e128108 'nr' 'double *'
|   |-IfStmt 0x11e140c08 <line:7:3, line:16:3> has_else
|   | |-RecoveryExpr 0x11e1286d8 <line:7:7> '<dependent type>' contains-errors lvalue
|   | |-CompoundStmt 0x11e140a00 <line:8:3, line:11:3>
|   | | |-BinaryOperator 0x11e128780 <line:9:5, col:10> 'double' '='
|   | | | |-UnaryOperator 0x11e128730 <col:5, col:6> 'double' lvalue prefix '*' cannot overflow
|   | | | | `-ImplicitCastExpr 0x11e128718 <col:6> 'double *' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x11e1286f8 <col:6> 'double *' lvalue ParmVar 0x11e128108 'nr' 'double *'
|   | | | `-ImplicitCastExpr 0x11e128768 <col:10> 'double' <IntegralToFloating>
|   | | |   `-IntegerLiteral 0x11e128748 <col:10> 'int' 0
|   | | `-ReturnStmt 0x11e1287d8 <line:10:5, col:13>
|   | |   `-UnaryOperator 0x11e1287c0 <col:12, col:13> 'int' prefix '-'
|   | |     `-IntegerLiteral 0x11e1287a0 <col:13> 'int' 1
|   | `-IfStmt 0x11e140be8 <line:12:8, line:16:3>
|   |   |-BinaryOperator 0x11e140ad0 <line:12:12, col:35> 'int' contains-errors '&&'
|   |   | |-RecoveryExpr 0x11e140a20 <col:12> '<dependent type>' contains-errors lvalue
|   |   | `-BinaryOperator 0x11e140ab0 <col:29, col:35> 'int' '<'
|   |   |   |-ImplicitCastExpr 0x11e140a80 <col:29> 'double' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x11e140a40 <col:29> 'double' lvalue Var 0x11e1285d8 'res' 'double'
|   |   |   `-ImplicitCastExpr 0x11e140a98 <col:35> 'double' <IntegralToFloating>
|   |   |     `-IntegerLiteral 0x11e140a60 <col:35> 'int' 0
|   |   `-CompoundStmt 0x11e140bc8 <line:13:3, line:16:3>
|   |     |-BinaryOperator 0x11e140b78 <line:14:5, col:10> 'double' '='
|   |     | |-UnaryOperator 0x11e140b28 <col:5, col:6> 'double' lvalue prefix '*' cannot overflow
|   |     | | `-ImplicitCastExpr 0x11e140b10 <col:6> 'double *' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x11e140af0 <col:6> 'double *' lvalue ParmVar 0x11e128108 'nr' 'double *'
|   |     | `-ImplicitCastExpr 0x11e140b60 <col:10> 'double' <IntegralToFloating>
|   |     |   `-IntegerLiteral 0x11e140b40 <col:10> 'int' 0
|   |     `-ReturnStmt 0x11e140bb8 <line:15:5, col:12>
|   |       `-IntegerLiteral 0x11e140b98 <col:12> 'int' 1
|   |-IfStmt 0x11e143eb0 <line:18:3, line:35:3>
|   | |-BinaryOperator 0x11e140cb0 <line:18:7, col:13> 'int' contains-errors '<'
|   | | |-DeclRefExpr 0x11e140c38 <col:7> 'int' lvalue ParmVar 0x11e128220 'dec' 'int'
|   | | `-RecoveryExpr 0x11e140c90 <col:13> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x11e143e78 <line:19:3, line:35:3>
|   |   |-DeclStmt 0x11e140de0 <line:20:5, col:35>
|   |   | `-VarDecl 0x11e140ce8 <col:5, col:32> col:10 used order 'int' cinit
|   |   |   `-BinaryOperator 0x11e140dc0 <col:17, col:32> 'int' '-'
|   |   |     |-ImplicitCastExpr 0x11e140d90 <col:17> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x11e140d50 <col:17> 'int' lvalue ParmVar 0x11e1281a0 'field_length' 'int'
|   |   |     `-ImplicitCastExpr 0x11e140da8 <col:32> 'int' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x11e140d70 <col:32> 'int' lvalue ParmVar 0x11e128220 'dec' 'int'
|   |   |-DeclStmt 0x11e1410d8 <line:21:5, col:42>
|   |   | `-VarDecl 0x11e140e10 <col:5, col:41> col:10 used step 'int' cinit
|   |   |   `-BinaryOperator 0x11e1410b8 <col:16, col:41> '<dependent type>' contains-errors '-'
|   |   |     |-CallExpr 0x11e141090 <col:16, col:37> '<dependent type>' contains-errors
|   |   |     | |-DeclRefExpr 0x11e140fd0 <col:16> 'int ()' Function 0x11e140f18 'array_elements' 'int ()'
|   |   |     | `-RecoveryExpr 0x11e141070 <col:31> '<dependent type>' contains-errors lvalue
|   |   |     `-IntegerLiteral 0x11e141030 <col:41> 'int' 1
|   |   |-DeclStmt 0x11e141190 <line:22:5, col:33>
|   |   | `-VarDecl 0x11e141108 <col:5, col:30> col:12 used max_value_by_dec 'double' cinit
|   |   |   `-FloatingLiteral 0x11e141170 <col:30> 'double' 1.000000e+00
|   |   |-CallExpr 0x11e141578 <line:27:5, col:47> 'int'
|   |   | |-ImplicitCastExpr 0x11e141560 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x11e1414c8 <col:5> 'int ()' Function 0x11e141410 'set_if_smaller' 'int ()'
|   |   | |-ImplicitCastExpr 0x11e1415a8 <col:20> 'double' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x11e1414e8 <col:20> 'double' lvalue ParmVar 0x11e128320 'max_value' 'double'
|   |   | `-ImplicitCastExpr 0x11e1415c0 <col:31> 'double' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x11e141508 <col:31> 'double' lvalue Var 0x11e141108 'max_value_by_dec' 'double'
|   |   `-IfStmt 0x11e143e58 <line:30:5, line:34:5>
|   |     |-UnaryOperator 0x11e141658 <line:30:9, col:10> '<dependent type>' contains-errors prefix '!' cannot overflow
|   |     | `-ImplicitCastExpr 0x11e141640 <col:10> '<dependent type>' contains-errors <LValueToRValue>
|   |     |   `-RecoveryExpr 0x11e141620 <col:10> '<dependent type>' contains-errors lvalue
|   |     `-CompoundStmt 0x11e143e38 <line:31:5, line:34:5>
|   |       |-DeclStmt 0x11e143cf0 <line:32:7, col:71>
|   |       | `-VarDecl 0x11e141688 <col:7, col:14> col:14 used tmp 'double'
|   |       `-BinaryOperator 0x11e143e18 <line:33:7, col:25> 'double' '='
|   |         |-DeclRefExpr 0x11e143d08 <col:7> 'double' lvalue Var 0x11e1285d8 'res' 'double'
|   |         `-BinaryOperator 0x11e143df8 <col:12, col:25> 'double' '+'
|   |           |-CallExpr 0x11e143d80 <col:12, col:21> 'double'
|   |           | |-ImplicitCastExpr 0x11e143d68 <col:12> 'double (*)(double)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x11e143d28 <col:12> 'double (double)' Function 0x11e1439a0 'floor' 'double (double)'
|   |           | `-ImplicitCastExpr 0x11e143da8 <col:18> 'double' <LValueToRValue>
|   |           |   `-DeclRefExpr 0x11e143d48 <col:18> 'double' lvalue Var 0x11e1285d8 'res' 'double'
|   |           `-ImplicitCastExpr 0x11e143de0 <col:25> 'double' <LValueToRValue>
|   |             `-DeclRefExpr 0x11e143dc0 <col:25> 'double' lvalue Var 0x11e141688 'tmp' 'double'
|   |-IfStmt 0x11e144230 <line:37:3, line:46:3> has_else
|   | |-BinaryOperator 0x11e143f58 <line:37:7, col:14> 'int' '<'
|   | | |-ImplicitCastExpr 0x11e143f40 <col:7> 'double' <LValueToRValue>
|   | | | `-DeclRefExpr 0x11e143ed0 <col:7> 'double' lvalue Var 0x11e1285d8 'res' 'double'
|   | | `-UnaryOperator 0x11e143f28 <col:13, col:14> 'double' prefix '-'
|   | |   `-ImplicitCastExpr 0x11e143f10 <col:14> 'double' <LValueToRValue>
|   | |     `-DeclRefExpr 0x11e143ef0 <col:14> 'double' lvalue ParmVar 0x11e128320 'max_value' 'double'
|   | |-CompoundStmt 0x11e144068 <line:38:3, line:41:3>
|   | | |-BinaryOperator 0x11e143fe8 <line:39:5, col:11> 'double' '='
|   | | | |-DeclRefExpr 0x11e143f78 <col:5> 'double' lvalue Var 0x11e1285d8 'res' 'double'
|   | | | `-UnaryOperator 0x11e143fd0 <col:10, col:11> 'double' prefix '-'
|   | | |   `-ImplicitCastExpr 0x11e143fb8 <col:11> 'double' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x11e143f98 <col:11> 'double' lvalue ParmVar 0x11e128320 'max_value' 'double'
|   | | `-BinaryOperator 0x11e144048 <line:40:5, col:12> 'int' '='
|   | |   |-DeclRefExpr 0x11e144008 <col:5> 'int' lvalue Var 0x11e128520 'error' 'int'
|   | |   `-IntegerLiteral 0x11e144028 <col:12> 'int' 1
|   | `-IfStmt 0x11e144210 <line:42:8, line:46:3>
|   |   |-BinaryOperator 0x11e1440f8 <line:42:12, col:18> 'int' '>'
|   |   | |-ImplicitCastExpr 0x11e1440c8 <col:12> 'double' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x11e144088 <col:12> 'double' lvalue Var 0x11e1285d8 'res' 'double'
|   |   | `-ImplicitCastExpr 0x11e1440e0 <col:18> 'double' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x11e1440a8 <col:18> 'double' lvalue ParmVar 0x11e128320 'max_value' 'double'
|   |   `-CompoundStmt 0x11e1441f0 <line:43:3, line:46:3>
|   |     |-BinaryOperator 0x11e144170 <line:44:5, col:10> 'double' '='
|   |     | |-DeclRefExpr 0x11e144118 <col:5> 'double' lvalue Var 0x11e1285d8 'res' 'double'
|   |     | `-ImplicitCastExpr 0x11e144158 <col:10> 'double' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x11e144138 <col:10> 'double' lvalue ParmVar 0x11e128320 'max_value' 'double'
|   |     `-BinaryOperator 0x11e1441d0 <line:45:5, col:12> 'int' '='
|   |       |-DeclRefExpr 0x11e144190 <col:5> 'int' lvalue Var 0x11e128520 'error' 'int'
|   |       `-IntegerLiteral 0x11e1441b0 <col:12> 'int' 1
|   |-BinaryOperator 0x11e1442e8 <line:48:3, col:8> 'double' '='
|   | |-UnaryOperator 0x11e144298 <col:3, col:4> 'double' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x11e144280 <col:4> 'double *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x11e144260 <col:4> 'double *' lvalue ParmVar 0x11e128108 'nr' 'double *'
|   | `-ImplicitCastExpr 0x11e1442d0 <col:8> 'double' <LValueToRValue>
|   |   `-DeclRefExpr 0x11e1442b0 <col:8> 'double' lvalue Var 0x11e1285d8 'res' 'double'
|   `-ReturnStmt 0x11e144340 <line:49:3, col:10>
|     `-ImplicitCastExpr 0x11e144328 <col:10> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x11e144308 <col:10> 'int' lvalue Var 0x11e128520 'error' 'int'
|-FunctionDecl 0x11e1437a0 <line:32:19> col:19 implicit used rint 'double (double)' extern
| |-ParmVarDecl 0x11e1438a0 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x11e143848 <<invalid sloc>> Implicit 1142
| |-ConstAttr 0x11e143910 <col:19> Implicit
| `-NoThrowAttr 0x11e143938 <col:19> Implicit
`-FunctionDecl 0x11e1439a0 <col:31> col:31 implicit used floor 'double (double)' extern
  |-ParmVarDecl 0x11e143aa0 <<invalid sloc>> <invalid sloc> 'double'
  |-BuiltinAttr 0x11e143a48 <<invalid sloc>> Implicit 1079
  |-NoThrowAttr 0x11e143b10 <col:31> Implicit
  `-ConstAttr 0x11e143b38 <col:31> Implicit
