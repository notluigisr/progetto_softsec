TranslationUnitDecl 0x153055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1530564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x153055bd0 '__int128'
|-TypedefDecl 0x153056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x153055bf0 'unsigned __int128'
|-TypedefDecl 0x153126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x153126000 'struct __NSConstantString_tag'
|   `-Record 0x153056580 '__NSConstantString_tag'
|-TypedefDecl 0x153126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x153055d90 '__SVInt8_t'
|-TypedefDecl 0x153126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x153055db0 '__SVInt16_t'
|-TypedefDecl 0x153126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x153055dd0 '__SVInt32_t'
|-TypedefDecl 0x1531263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x153055df0 '__SVInt64_t'
|-TypedefDecl 0x153126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x153055e10 '__SVUint8_t'
|-TypedefDecl 0x1531264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x153055e30 '__SVUint16_t'
|-TypedefDecl 0x153126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x153055e50 '__SVUint32_t'
|-TypedefDecl 0x153126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x153055e70 '__SVUint64_t'
|-TypedefDecl 0x1531265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x153055e90 '__SVFloat16_t'
|-TypedefDecl 0x153126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x153055eb0 '__SVFloat32_t'
|-TypedefDecl 0x1531266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x153055ed0 '__SVFloat64_t'
|-TypedefDecl 0x153126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x153055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x153126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x153055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1531267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x153055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x153126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x153055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1531268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x153055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x153126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x153055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x153126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x153055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1531269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x153055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x153126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x153055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x153126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x153056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x153126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x153056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x153126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x153056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x153126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x153056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x153126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x153056090 '__clang_svint8x3_t'
|-TypedefDecl 0x153126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1530560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x153126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1530560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x153126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1530560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x153126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x153056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x153126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x153056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x153126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x153056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x153126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x153056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x153126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x153056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x153127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1530561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x153127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1530561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1531278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1530561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x153127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x153056210 '__clang_svint8x4_t'
|-TypedefDecl 0x1531279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x153056230 '__clang_svint16x4_t'
|-TypedefDecl 0x153127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x153056250 '__clang_svint32x4_t'
|-TypedefDecl 0x153127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x153056270 '__clang_svint64x4_t'
|-TypedefDecl 0x153127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x153056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x153127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1530562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x153127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1530562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x153127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1530562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x153127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x153056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x153127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x153056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x153127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x153056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x153127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x153056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x153127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x153056390 '__SVBool_t'
|-TypedefDecl 0x153127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1530563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x153127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1530563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x153127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1530563f0 '__SVCount_t'
|-TypedefDecl 0x153127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x153127fb0 'char *'
|   `-BuiltinType 0x1530556b0 'char'
|-TypedefDecl 0x153128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x153127fb0 'char *'
|   `-BuiltinType 0x1530556b0 'char'
|-FunctionDecl 0x153128190 <dataset_diviso_filec/func20314_nonvuln.c:1:1, line:27:1> line:1:13 test_json_parser_skip_array 'void (void)' static
| `-CompoundStmt 0x1531448d0 <line:2:1, line:27:1>
|   |-DeclStmt 0x153128390 <line:3:2, line:4:8>
|   | `-VarDecl 0x153128298 <line:3:2, line:4:3> line:3:21 used test_input 'const char *' static cinit
|   |   `-ImplicitCastExpr 0x153128378 <line:4:3> 'const char *' <NoOp>
|   |     `-ImplicitCastExpr 0x153128360 <col:3> 'char *' <ArrayToPointerDecay>
|   |       `-StringLiteral 0x153128340 <col:3> 'char[4]' lvalue "STR"
|   |-DeclStmt 0x153128598 <line:5:2, col:28>
|   | |-RecordDecl 0x1531283a8 <col:2, col:9> col:9 struct json_parser
|   | `-VarDecl 0x153128518 <col:2, col:22> col:22 used parser 'struct json_parser *'
|   |-DeclStmt 0x153128798 <line:6:2, col:23>
|   | |-RecordDecl 0x1531285b0 <col:2, col:9> col:9 struct istream
|   | `-VarDecl 0x153128718 <col:2, col:18> col:18 used input 'struct istream *'
|   |-DeclStmt 0x153140fb8 <line:7:2, col:21>
|   | |-EnumDecl 0x153140a00 <col:2, col:7> col:7 json_type
|   | `-VarDecl 0x153140b18 <col:2, col:17> col:17 invalid type 'enum json_type'
|   |-DeclStmt 0x1531410e8 <line:8:2, col:27>
|   | |-VarDecl 0x153140fe8 <col:2, col:14> col:14 used value 'const char *'
|   | `-VarDecl 0x153141068 <col:2, col:22> col:22 used error 'const char *'
|   |-DeclStmt 0x153141180 <line:9:2, col:7>
|   | `-VarDecl 0x153141118 <col:2, col:6> col:6 used i 'int'
|   |-CallExpr 0x153141348 <line:11:2, col:18> 'int'
|   | |-ImplicitCastExpr 0x153141330 <col:2> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1531412c0 <col:2> 'int ()' Function 0x153141208 'test_begin' 'int ()'
|   | `-ImplicitCastExpr 0x153141370 <col:13> 'char *' <ArrayToPointerDecay>
|   |   `-StringLiteral 0x1531412e0 <col:13> 'char[4]' lvalue "STR"
|   |-BinaryOperator 0x1531417d0 <line:13:2, col:65> 'struct istream *' '='
|   | |-DeclRefExpr 0x153141388 <col:2> 'struct istream *' lvalue Var 0x153128718 'input' 'struct istream *'
|   | `-ImplicitCastExpr 0x1531417b8 <col:10, col:65> 'struct istream *' <IntegralToPointer>
|   |   `-CallExpr 0x153141770 <col:10, col:65> 'int'
|   |     |-ImplicitCastExpr 0x153141758 <col:10> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x153141488 <col:10> 'int ()' Function 0x1531413d0 'test_istream_create_data' 'int ()'
|   |     |-ImplicitCastExpr 0x1531417a0 <col:35> 'const char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1531414a8 <col:35> 'const char *' lvalue Var 0x153128298 'test_input' 'const char *'
|   |     `-CallExpr 0x153141718 <col:47, col:64> 'unsigned long'
|   |       |-ImplicitCastExpr 0x153141700 <col:47> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x153141678 <col:47> 'unsigned long (const char *)' Function 0x153141508 'strlen' 'unsigned long (const char *)'
|   |       `-ImplicitCastExpr 0x153141740 <col:54> 'const char *' <LValueToRValue>
|   |         `-DeclRefExpr 0x153141698 <col:54> 'const char *' lvalue Var 0x153128298 'test_input' 'const char *'
|   |-BinaryOperator 0x153142e00 <line:14:2, col:67> 'struct json_parser *' contains-errors '='
|   | |-DeclRefExpr 0x1531417f0 <col:2> 'struct json_parser *' lvalue Var 0x153128518 'parser' 'struct json_parser *'
|   | `-CallExpr 0x1531419b8 <col:11, col:67> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x1531418f0 <col:11> 'int ()' Function 0x153141838 'json_parser_init_flags' 'int ()'
|   |   |-DeclRefExpr 0x153141910 <col:34> 'struct istream *' lvalue Var 0x153128718 'input' 'struct istream *'
|   |   `-RecoveryExpr 0x153141998 <col:41> '<dependent type>' contains-errors lvalue
|   |-CallExpr 0x153143260 <line:15:2, line:16:30> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x153142f00 <line:15:2> 'int ()' Function 0x153142e48 'test_assert' 'int ()'
|   | `-BinaryOperator 0x153143240 <col:14, line:16:15> 'int' contains-errors '&&'
|   |   |-BinaryOperator 0x153143140 <line:15:14, col:55> 'int' contains-errors '>'
|   |   | |-CallExpr 0x1531430e8 <col:14, col:51> '<dependent type>' contains-errors
|   |   | | |-DeclRefExpr 0x153143000 <col:14> 'int ()' Function 0x153142f48 'json_parse_next' 'int ()'
|   |   | | |-DeclRefExpr 0x153143020 <col:30> 'struct json_parser *' lvalue Var 0x153128518 'parser' 'struct json_parser *'
|   |   | | |-UnaryOperator 0x153143060 <col:38, col:39> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   | | | `-RecoveryExpr 0x153143040 <col:39> '<dependent type>' contains-errors lvalue
|   |   | | `-UnaryOperator 0x1531430d0 <col:45, col:46> 'const char **' prefix '&' cannot overflow
|   |   | |   `-DeclRefExpr 0x153143078 <col:46> 'const char *' lvalue Var 0x153140fe8 'value' 'const char *'
|   |   | `-IntegerLiteral 0x153143120 <col:55> 'int' 0
|   |   `-BinaryOperator 0x153143220 <line:16:7, col:15> 'int' contains-errors '=='
|   |     |-RecoveryExpr 0x153143160 <col:7> '<dependent type>' contains-errors lvalue
|   |     `-RecoveryExpr 0x153143200 <col:15> '<dependent type>' contains-errors lvalue
|   |-ForStmt 0x153143a40 <line:17:2, line:21:2>
|   | |-BinaryOperator 0x1531432c8 <line:17:7, col:11> 'int' '='
|   | | |-DeclRefExpr 0x153143288 <col:7> 'int' lvalue Var 0x153141118 'i' 'int'
|   | | `-IntegerLiteral 0x1531432a8 <col:11> 'int' 1
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x153143340 <col:14, col:19> 'int' '<='
|   | | |-ImplicitCastExpr 0x153143328 <col:14> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1531432e8 <col:14> 'int' lvalue Var 0x153141118 'i' 'int'
|   | | `-IntegerLiteral 0x153143308 <col:19> 'int' 6
|   | |-UnaryOperator 0x153143380 <col:22, col:23> 'int' postfix '++'
|   | | `-DeclRefExpr 0x153143360 <col:22> 'int' lvalue Var 0x153141118 'i' 'int'
|   | `-CompoundStmt 0x153143a20 <col:27, line:21:2>
|   |   |-CallExpr 0x153143880 <line:18:3, line:19:52> '<dependent type>' contains-errors
|   |   | |-DeclRefExpr 0x153143398 <line:18:3> 'int ()' Function 0x153142e48 'test_assert' 'int ()'
|   |   | `-BinaryOperator 0x153143860 <col:15, line:19:51> 'int' contains-errors '&&'
|   |   |   |-BinaryOperator 0x1531437b0 <line:18:15, line:19:16> 'int' contains-errors '&&'
|   |   |   | |-BinaryOperator 0x1531434c0 <line:18:15, col:56> 'int' contains-errors '>'
|   |   |   | | |-CallExpr 0x153143468 <col:15, col:52> '<dependent type>' contains-errors
|   |   |   | | | |-DeclRefExpr 0x1531433b8 <col:15> 'int ()' Function 0x153142f48 'json_parse_next' 'int ()'
|   |   |   | | | |-DeclRefExpr 0x1531433d8 <col:31> 'struct json_parser *' lvalue Var 0x153128518 'parser' 'struct json_parser *'
|   |   |   | | | |-UnaryOperator 0x153143418 <col:39, col:40> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   |   | | | | `-RecoveryExpr 0x1531433f8 <col:40> '<dependent type>' contains-errors lvalue
|   |   |   | | | `-UnaryOperator 0x153143450 <col:46, col:47> 'const char **' prefix '&' cannot overflow
|   |   |   | | |   `-DeclRefExpr 0x153143430 <col:47> 'const char *' lvalue Var 0x153140fe8 'value' 'const char *'
|   |   |   | | `-IntegerLiteral 0x1531434a0 <col:56> 'int' 0
|   |   |   | `-BinaryOperator 0x153143790 <line:19:8, col:16> 'int' contains-errors '=='
|   |   |   |   |-RecoveryExpr 0x1531434e0 <col:8> '<dependent type>' contains-errors lvalue
|   |   |   |   `-RecoveryExpr 0x153143770 <col:16> '<dependent type>' contains-errors lvalue
|   |   |   `-BinaryOperator 0x153143840 <col:36, col:51> 'int' '=='
|   |   |     |-CallExpr 0x1531437e8 <col:36, col:46> 'int'
|   |   |     | |-ImplicitCastExpr 0x1531437d0 <col:36> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | | `-DeclRefExpr 0x153143638 <col:36> 'int ()' Function 0x153143580 'atoi' 'int ()'
|   |   |     | `-ImplicitCastExpr 0x153143810 <col:41> 'const char *' <LValueToRValue>
|   |   |     |   `-DeclRefExpr 0x153143658 <col:41> 'const char *' lvalue Var 0x153140fe8 'value' 'const char *'
|   |   |     `-ImplicitCastExpr 0x153143828 <col:51> 'int' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x1531436d0 <col:51> 'int' lvalue Var 0x153141118 'i' 'int'
|   |   `-CallExpr 0x1531439e0 <line:20:3, col:30> 'int'
|   |     |-ImplicitCastExpr 0x1531439c8 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x153143988 <col:3> 'int ()' Function 0x1531438d0 'json_parse_skip_next' 'int ()'
|   |     `-ImplicitCastExpr 0x153143a08 <col:24> 'struct json_parser *' <LValueToRValue>
|   |       `-DeclRefExpr 0x1531439a8 <col:24> 'struct json_parser *' lvalue Var 0x153128518 'parser' 'struct json_parser *'
|   |-CallExpr 0x153143cc0 <line:22:2, line:23:34> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x153143a78 <line:22:2> 'int ()' Function 0x153142e48 'test_assert' 'int ()'
|   | `-BinaryOperator 0x153143ca0 <col:14, line:23:15> 'int' contains-errors '&&'
|   |   |-BinaryOperator 0x153143ba0 <line:22:14, col:55> 'int' contains-errors '>'
|   |   | |-CallExpr 0x153143b48 <col:14, col:51> '<dependent type>' contains-errors
|   |   | | |-DeclRefExpr 0x153143a98 <col:14> 'int ()' Function 0x153142f48 'json_parse_next' 'int ()'
|   |   | | |-DeclRefExpr 0x153143ab8 <col:30> 'struct json_parser *' lvalue Var 0x153128518 'parser' 'struct json_parser *'
|   |   | | |-UnaryOperator 0x153143af8 <col:38, col:39> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   | | | `-RecoveryExpr 0x153143ad8 <col:39> '<dependent type>' contains-errors lvalue
|   |   | | `-UnaryOperator 0x153143b30 <col:45, col:46> 'const char **' prefix '&' cannot overflow
|   |   | |   `-DeclRefExpr 0x153143b10 <col:46> 'const char *' lvalue Var 0x153140fe8 'value' 'const char *'
|   |   | `-IntegerLiteral 0x153143b80 <col:55> 'int' 0
|   |   `-BinaryOperator 0x153143c80 <line:23:7, col:15> 'int' contains-errors '=='
|   |     |-RecoveryExpr 0x153143bc0 <col:7> '<dependent type>' contains-errors lvalue
|   |     `-RecoveryExpr 0x153143c60 <col:15> '<dependent type>' contains-errors lvalue
|   |-CallExpr 0x153144590 <line:24:2, col:54> 'int'
|   | |-ImplicitCastExpr 0x153144578 <col:2> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x153143ce8 <col:2> 'int ()' Function 0x153142e48 'test_assert' 'int ()'
|   | `-BinaryOperator 0x153144558 <col:14, col:53> 'int' '=='
|   |   |-CallExpr 0x153144508 <col:14, col:48> 'int'
|   |   | |-ImplicitCastExpr 0x1531444f0 <col:14> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x153144400 <col:14> 'int ()' Function 0x153143d30 'json_parser_deinit' 'int ()'
|   |   | |-UnaryOperator 0x1531444a0 <col:33, col:34> 'struct json_parser **' prefix '&' cannot overflow
|   |   | | `-DeclRefExpr 0x153144420 <col:34> 'struct json_parser *' lvalue Var 0x153128518 'parser' 'struct json_parser *'
|   |   | `-UnaryOperator 0x1531444d8 <col:42, col:43> 'const char **' prefix '&' cannot overflow
|   |   |   `-DeclRefExpr 0x1531444b8 <col:43> 'const char *' lvalue Var 0x153141068 'error' 'const char *'
|   |   `-IntegerLiteral 0x153144538 <col:53> 'int' 0
|   |-CallExpr 0x153144770 <line:25:2, col:23> 'int'
|   | |-ImplicitCastExpr 0x153144758 <col:2> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x153144698 <col:2> 'int ()' Function 0x1531445e0 'i_stream_unref' 'int ()'
|   | `-UnaryOperator 0x153144740 <col:17, col:18> 'struct istream **' prefix '&' cannot overflow
|   |   `-DeclRefExpr 0x1531446b8 <col:18> 'struct istream *' lvalue Var 0x153128718 'input' 'struct istream *'
|   `-CallExpr 0x1531448b0 <line:26:2, col:11> 'int'
|     `-ImplicitCastExpr 0x153144898 <col:2> 'int (*)()' <FunctionToPointerDecay>
|       `-DeclRefExpr 0x153144878 <col:2> 'int ()' Function 0x1531447c0 'test_end' 'int ()'
`-FunctionDecl 0x153141508 <line:13:47> col:47 implicit used strlen 'unsigned long (const char *)' extern
  |-ParmVarDecl 0x153141608 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x1531415b0 <<invalid sloc>> Implicit 902
