TranslationUnitDecl 0x121028008 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x121028eb8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1210285d0 '__int128'
|-TypedefDecl 0x121028f28 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1210285f0 'unsigned __int128'
|-TypedefDecl 0x12083b630 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12083b400 'struct __NSConstantString_tag'
|   `-Record 0x121028f80 '__NSConstantString_tag'
|-TypedefDecl 0x12083b698 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x121028790 '__SVInt8_t'
|-TypedefDecl 0x12083b700 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x1210287b0 '__SVInt16_t'
|-TypedefDecl 0x12083b768 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x1210287d0 '__SVInt32_t'
|-TypedefDecl 0x12083b7d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x1210287f0 '__SVInt64_t'
|-TypedefDecl 0x12083b838 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x121028810 '__SVUint8_t'
|-TypedefDecl 0x12083b8a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x121028830 '__SVUint16_t'
|-TypedefDecl 0x12083b908 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x121028850 '__SVUint32_t'
|-TypedefDecl 0x12083b970 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x121028870 '__SVUint64_t'
|-TypedefDecl 0x12083b9d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x121028890 '__SVFloat16_t'
|-TypedefDecl 0x12083ba40 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x1210288b0 '__SVFloat32_t'
|-TypedefDecl 0x12083baa8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x1210288d0 '__SVFloat64_t'
|-TypedefDecl 0x12083bb10 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x1210288f0 '__SVBfloat16_t'
|-TypedefDecl 0x12083bb78 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x121028910 '__clang_svint8x2_t'
|-TypedefDecl 0x12083bbe0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x121028930 '__clang_svint16x2_t'
|-TypedefDecl 0x12083bc48 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x121028950 '__clang_svint32x2_t'
|-TypedefDecl 0x12083bcb0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x121028970 '__clang_svint64x2_t'
|-TypedefDecl 0x12083bd18 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x121028990 '__clang_svuint8x2_t'
|-TypedefDecl 0x12083bd80 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x1210289b0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12083bde8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x1210289d0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12083be50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x1210289f0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12083beb8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x121028a10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12083bf20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x121028a30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12083bf88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x121028a50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12083bff0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x121028a70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12083c058 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x121028a90 '__clang_svint8x3_t'
|-TypedefDecl 0x12083c0c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x121028ab0 '__clang_svint16x3_t'
|-TypedefDecl 0x12083c128 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x121028ad0 '__clang_svint32x3_t'
|-TypedefDecl 0x12083c190 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x121028af0 '__clang_svint64x3_t'
|-TypedefDecl 0x12083c1f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x121028b10 '__clang_svuint8x3_t'
|-TypedefDecl 0x12083c260 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x121028b30 '__clang_svuint16x3_t'
|-TypedefDecl 0x12083c2c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x121028b50 '__clang_svuint32x3_t'
|-TypedefDecl 0x12083c330 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x121028b70 '__clang_svuint64x3_t'
|-TypedefDecl 0x12083c398 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x121028b90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12083c400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x121028bb0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12083c468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x121028bd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12083c4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x121028bf0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12083c538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x121028c10 '__clang_svint8x4_t'
|-TypedefDecl 0x12083c5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x121028c30 '__clang_svint16x4_t'
|-TypedefDecl 0x12083c608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x121028c50 '__clang_svint32x4_t'
|-TypedefDecl 0x12083c670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x121028c70 '__clang_svint64x4_t'
|-TypedefDecl 0x12083c6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x121028c90 '__clang_svuint8x4_t'
|-TypedefDecl 0x12083c740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x121028cb0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12083c7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x121028cd0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12083c810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x121028cf0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12083c878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x121028d10 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12083c8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x121028d30 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12083c948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x121028d50 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12083c9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x121028d70 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12083ca18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x121028d90 '__SVBool_t'
|-TypedefDecl 0x12083ca80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x121028db0 '__clang_svboolx2_t'
|-TypedefDecl 0x12083cae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x121028dd0 '__clang_svboolx4_t'
|-TypedefDecl 0x12083cb50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x121028df0 '__SVCount_t'
|-TypedefDecl 0x12083cbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12083cbb0 'char *'
|   `-BuiltinType 0x1210280b0 'char'
|-TypedefDecl 0x12083cc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12083cbb0 'char *'
|   `-BuiltinType 0x1210280b0 'char'
`-FunctionDecl 0x12083cfa8 <dataset_diviso_filec/func23704_nonvuln.c:1:1, line:66:1> line:1:1 invalid read_viminfo_barline 'int (int *, int, int, int)'
  |-ParmVarDecl 0x12083cd28 <col:22, col:29> col:29 referenced invalid virp 'int *'
  |-ParmVarDecl 0x12083cda8 <col:35, col:39> col:39 used got_encoding 'int'
  |-ParmVarDecl 0x12083ce28 <col:53, col:57> col:57 used force 'int'
  |-ParmVarDecl 0x12083cea8 <col:64, col:68> col:68 used writing 'int'
  `-CompoundStmt 0x1210c63c8 <line:2:1, line:66:1>
    |-DeclStmt 0x12083d198 <line:3:5, col:35>
    | `-VarDecl 0x12083d088 <col:5, col:34> col:13 used p 'char *' cinit
    |   `-BinaryOperator 0x12083d178 <col:17, col:34> '<dependent type>' contains-errors '+'
    |     |-CXXDependentScopeMemberExpr 0x12083d110 <col:17, col:23> '<dependent type>' contains-errors lvalue ->vir_line
    |     | `-RecoveryExpr 0x12083d0f0 <col:17> '<dependent type>' contains-errors lvalue
    |     `-IntegerLiteral 0x12083d158 <col:34> 'int' 1
    |-DeclStmt 0x12083d230 <line:4:5, col:17>
    | `-VarDecl 0x12083d1c8 <col:5, col:10> col:10 used bartype 'int'
    |-DeclStmt 0x12083d2e0 <line:7:5, col:11>
    | `-VarDecl 0x12083d278 <col:5, col:10> col:10 used i 'int'
    |-DeclStmt 0x12083d3b0 <line:8:5, col:26>
    | `-VarDecl 0x12083d310 <col:5, col:22> col:10 used read_next 'int' cinit
    |   `-RecoveryExpr 0x12083d390 <col:22> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x1210c61e8 <line:11:5, line:61:5> has_else
    | |-BinaryOperator 0x120854c60 <line:11:9, col:15> 'int' contains-errors '=='
    | | |-ImplicitCastExpr 0x120854c48 <col:9, col:10> 'int' contains-errors <IntegralCast>
    | | | `-ImplicitCastExpr 0x120854c30 <col:9, col:10> 'char' contains-errors <LValueToRValue>
    | | |   `-UnaryOperator 0x120854c00 <col:9, col:10> 'char' contains-errors lvalue prefix '*' cannot overflow
    | | |     `-ImplicitCastExpr 0x12083d3e8 <col:10> 'char *' contains-errors <LValueToRValue>
    | | |       `-DeclRefExpr 0x12083d3c8 <col:10> 'char *' contains-errors lvalue Var 0x12083d088 'p' 'char *'
    | | `-CharacterLiteral 0x120854c18 <col:15> 'int' 60
    | |-CompoundStmt 0x120854f68 <line:12:5, line:16:5>
    | | `-IfStmt 0x120854f48 <line:14:2, line:15:55>
    | |   |-ImplicitCastExpr 0x120854ca0 <line:14:6> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x120854c80 <col:6> 'int' lvalue ParmVar 0x12083cea8 'writing' 'int'
    | |   `-CallExpr 0x120854f18 <line:15:6, col:55> '<dependent type>' contains-errors
    | |     |-DeclRefExpr 0x120854e10 <col:6> 'int ()' Function 0x120854d58 'ga_add_string' 'int ()'
    | |     |-UnaryOperator 0x120854e98 <col:20, col:27> '<dependent type>' contains-errors prefix '&' cannot overflow
    | |     | `-CXXDependentScopeMemberExpr 0x120854e50 <col:21, col:27> '<dependent type>' contains-errors lvalue ->vir_barlines
    | |     |   `-RecoveryExpr 0x120854e30 <col:21> '<dependent type>' contains-errors lvalue
    | |     `-CXXDependentScopeMemberExpr 0x120854ed0 <col:41, col:47> '<dependent type>' contains-errors lvalue ->vir_line
    | |       `-RecoveryExpr 0x120854eb0 <col:41> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x1210c61c8 <line:18:5, line:61:5>
    |   |-BinaryOperator 0x1208552f0 <line:20:2, col:24> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x1208550e8 <col:2> 'int' lvalue Var 0x12083d1c8 'bartype' 'int'
    |   | `-CallExpr 0x1208552c8 <col:12, col:24> 'int' contains-errors
    |   |   |-ImplicitCastExpr 0x1208552b0 <col:12> 'int (*)()' <FunctionToPointerDecay>
    |   |   | `-DeclRefExpr 0x1208551e8 <col:12> 'int ()' Function 0x120855130 'getdigits' 'int ()'
    |   |   `-UnaryOperator 0x120855260 <col:22, col:23> 'char **' contains-errors prefix '&' cannot overflow
    |   |     `-DeclRefExpr 0x120855208 <col:23> 'char *' contains-errors lvalue Var 0x12083d088 'p' 'char *'
    |   `-SwitchStmt 0x120855348 <line:21:2, line:53:2>
    |     |-ImplicitCastExpr 0x120855330 <line:21:10> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x120855310 <col:10> 'int' lvalue Var 0x12083d1c8 'bartype' 'int'
    |     `-CompoundStmt 0x1210c5ea0 <line:22:2, line:53:2>
    |       |-IfStmt 0x1208559b8 <line:25:3, line:31:3>
    |       | |-UnaryOperator 0x1208553c0 <line:25:7, col:8> 'int' prefix '!' cannot overflow
    |       | | `-ImplicitCastExpr 0x1208553a8 <col:8> 'int' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x120855388 <col:8> 'int' lvalue ParmVar 0x12083cda8 'got_encoding' 'int'
    |       | `-CompoundStmt 0x1208559a0 <line:26:3, line:31:3>
    |       |   `-BinaryOperator 0x120855630 <line:27:7, col:49> 'int' contains-errors '='
    |       |     |-DeclRefExpr 0x1208553d8 <col:7> 'int' contains-errors lvalue Var 0x12083d310 'read_next' 'int'
    |       |     `-CallExpr 0x1208555f8 <col:19, col:49> '<dependent type>' contains-errors
    |       |       |-DeclRefExpr 0x1208554d8 <col:19> 'int ()' Function 0x120855420 'barline_parse' 'int ()'
    |       |       |-RecoveryExpr 0x1208554f8 <col:33> '<dependent type>' contains-errors lvalue
    |       |       |-DeclRefExpr 0x120855518 <col:39> 'char *' contains-errors lvalue Var 0x12083d088 'p' 'char *'
    |       |       `-UnaryOperator 0x1208555e0 <col:42, col:43> '<dependent type>' contains-errors prefix '&' cannot overflow
    |       |         `-RecoveryExpr 0x1208555c0 <col:43> '<dependent type>' contains-errors lvalue
    |       |-BreakStmt 0x1208559d8 <line:32:3>
    |       |-BreakStmt 0x120855b80 <line:37:3>
    |       |-BreakStmt 0x1210c5b40 <line:42:3>
    |       |-BreakStmt 0x1210c5ce8 <line:47:3>
    |       `-DefaultStmt 0x1210c5e80 <line:49:6, line:52:56>
    |         `-IfStmt 0x1210c5e60 <line:51:3, line:52:56>
    |           |-ImplicitCastExpr 0x1210c5d10 <line:51:7> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x1210c5cf0 <col:7> 'int' lvalue ParmVar 0x12083cea8 'writing' 'int'
    |           `-CallExpr 0x1210c5e30 <line:52:7, col:56> '<dependent type>' contains-errors
    |             |-DeclRefExpr 0x1210c5d28 <col:7> 'int ()' Function 0x120854d58 'ga_add_string' 'int ()'
    |             |-UnaryOperator 0x1210c5db0 <col:21, col:28> '<dependent type>' contains-errors prefix '&' cannot overflow
    |             | `-CXXDependentScopeMemberExpr 0x1210c5d68 <col:22, col:28> '<dependent type>' contains-errors lvalue ->vir_barlines
    |             |   `-RecoveryExpr 0x1210c5d48 <col:22> '<dependent type>' contains-errors lvalue
    |             `-CXXDependentScopeMemberExpr 0x1210c5de8 <col:42, col:48> '<dependent type>' contains-errors lvalue ->vir_line
    |               `-RecoveryExpr 0x1210c5dc8 <col:42> '<dependent type>' contains-errors lvalue
    `-IfStmt 0x1210c63a8 <line:63:5, line:64:30>
      |-ImplicitCastExpr 0x1210c6238 <line:63:9> 'int' contains-errors <LValueToRValue>
      | `-DeclRefExpr 0x1210c6218 <col:9> 'int' contains-errors lvalue Var 0x12083d310 'read_next' 'int'
      `-ReturnStmt 0x1210c6398 <line:64:2, col:30>
        `-CallExpr 0x1210c6370 <col:9, col:30> '<dependent type>' contains-errors
          |-DeclRefExpr 0x1210c6330 <col:9> 'int ()' Function 0x1210c6278 'viminfo_readline' 'int ()'
          `-RecoveryExpr 0x1210c6350 <col:26> '<dependent type>' contains-errors lvalue
