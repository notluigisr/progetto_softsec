TranslationUnitDecl 0x125055008 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x125055eb8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1250555d0 '__int128'
|-TypedefDecl 0x125055f28 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1250555f0 'unsigned __int128'
|-TypedefDecl 0x12480c430 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12480c200 'struct __NSConstantString_tag'
|   `-Record 0x125055f80 '__NSConstantString_tag'
|-TypedefDecl 0x12480c498 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x125055790 '__SVInt8_t'
|-TypedefDecl 0x12480c500 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x1250557b0 '__SVInt16_t'
|-TypedefDecl 0x12480c568 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x1250557d0 '__SVInt32_t'
|-TypedefDecl 0x12480c5d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x1250557f0 '__SVInt64_t'
|-TypedefDecl 0x12480c638 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x125055810 '__SVUint8_t'
|-TypedefDecl 0x12480c6a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x125055830 '__SVUint16_t'
|-TypedefDecl 0x12480c708 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x125055850 '__SVUint32_t'
|-TypedefDecl 0x12480c770 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x125055870 '__SVUint64_t'
|-TypedefDecl 0x12480c7d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x125055890 '__SVFloat16_t'
|-TypedefDecl 0x12480c840 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x1250558b0 '__SVFloat32_t'
|-TypedefDecl 0x12480c8a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x1250558d0 '__SVFloat64_t'
|-TypedefDecl 0x12480c910 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x1250558f0 '__SVBfloat16_t'
|-TypedefDecl 0x12480c978 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x125055910 '__clang_svint8x2_t'
|-TypedefDecl 0x12480c9e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x125055930 '__clang_svint16x2_t'
|-TypedefDecl 0x12480ca48 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x125055950 '__clang_svint32x2_t'
|-TypedefDecl 0x12480cab0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x125055970 '__clang_svint64x2_t'
|-TypedefDecl 0x12480cb18 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x125055990 '__clang_svuint8x2_t'
|-TypedefDecl 0x12480cb80 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x1250559b0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12480cbe8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x1250559d0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12480cc50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x1250559f0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12480ccb8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x125055a10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12480cd20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x125055a30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12480cd88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x125055a50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12480cdf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x125055a70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12480ce58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x125055a90 '__clang_svint8x3_t'
|-TypedefDecl 0x12480cec0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x125055ab0 '__clang_svint16x3_t'
|-TypedefDecl 0x12480cf28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x125055ad0 '__clang_svint32x3_t'
|-TypedefDecl 0x12480cf90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x125055af0 '__clang_svint64x3_t'
|-TypedefDecl 0x12480cff8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x125055b10 '__clang_svuint8x3_t'
|-TypedefDecl 0x12480d060 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x125055b30 '__clang_svuint16x3_t'
|-TypedefDecl 0x12480d0c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x125055b50 '__clang_svuint32x3_t'
|-TypedefDecl 0x12480d130 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x125055b70 '__clang_svuint64x3_t'
|-TypedefDecl 0x12480d198 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x125055b90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12480da00 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x125055bb0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12480da68 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x125055bd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12480dad0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x125055bf0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12480db38 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x125055c10 '__clang_svint8x4_t'
|-TypedefDecl 0x12480dba0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x125055c30 '__clang_svint16x4_t'
|-TypedefDecl 0x12480dc08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x125055c50 '__clang_svint32x4_t'
|-TypedefDecl 0x12480dc70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x125055c70 '__clang_svint64x4_t'
|-TypedefDecl 0x12480dcd8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x125055c90 '__clang_svuint8x4_t'
|-TypedefDecl 0x12480dd40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x125055cb0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12480dda8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x125055cd0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12480de10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x125055cf0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12480de78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x125055d10 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12480dee0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x125055d30 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12480df48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x125055d50 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12480dfb0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x125055d70 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12480e018 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x125055d90 '__SVBool_t'
|-TypedefDecl 0x12480e080 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x125055db0 '__clang_svboolx2_t'
|-TypedefDecl 0x12480e0e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x125055dd0 '__clang_svboolx4_t'
|-TypedefDecl 0x12480e150 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x125055df0 '__SVCount_t'
|-TypedefDecl 0x12480e1f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12480e1b0 'char *'
|   `-BuiltinType 0x1250550b0 'char'
|-TypedefDecl 0x12480e268 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12480e1b0 'char *'
|   `-BuiltinType 0x1250550b0 'char'
|-FunctionDecl 0x12480e438 <dataset_diviso_filec/func17402_vuln.c:1:1, line:23:1> line:1:1 strip_leading_slashes 'int (char *, int)'
| |-ParmVarDecl 0x12480e2d8 <col:24, col:30> col:30 used name 'char *'
| |-ParmVarDecl 0x12480e358 <col:36, col:40> col:40 used strip_leading 'int'
| `-CompoundStmt 0x124829498 <line:2:1, line:23:1>
|   |-DeclStmt 0x12480e5f0 <line:3:3, col:24>
|   | `-VarDecl 0x12480e550 <col:3, col:11> col:7 used s 'int' cinit
|   |   `-ImplicitCastExpr 0x12480e5d8 <col:11> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x12480e5b8 <col:11> 'int' lvalue ParmVar 0x12480e358 'strip_leading' 'int'
|   |-DeclStmt 0x12480e720 <line:4:3, col:14>
|   | |-VarDecl 0x12480e620 <col:3, col:9> col:9 used p 'char *'
|   | `-VarDecl 0x12480e6a0 <col:3, col:13> col:13 used n 'char *'
|   |-ForStmt 0x124827070 <line:6:3, line:15:5>
|   | |-BinaryOperator 0x12480e7d0 <line:6:8, col:16> 'char *' '='
|   | | |-DeclRefExpr 0x12480e738 <col:8> 'char *' lvalue Var 0x12480e620 'p' 'char *'
|   | | `-BinaryOperator 0x12480e7b0 <col:12, col:16> 'char *' '='
|   | |   |-DeclRefExpr 0x12480e758 <col:12> 'char *' lvalue Var 0x12480e6a0 'n' 'char *'
|   | |   `-ImplicitCastExpr 0x12480e798 <col:16> 'char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x12480e778 <col:16> 'char *' lvalue ParmVar 0x12480e2d8 'name' 'char *'
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x12480e840 <col:23, col:24> 'char' <LValueToRValue>
|   | | `-UnaryOperator 0x12480e828 <col:23, col:24> 'char' lvalue prefix '*' cannot overflow
|   | |   `-ImplicitCastExpr 0x12480e810 <col:24> 'char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x12480e7f0 <col:24> 'char *' lvalue Var 0x12480e620 'p' 'char *'
|   | |-UnaryOperator 0x12480e878 <col:28, col:29> 'char *' postfix '++'
|   | | `-DeclRefExpr 0x12480e858 <col:28> 'char *' lvalue Var 0x12480e620 'p' 'char *'
|   | `-CompoundStmt 0x124827058 <line:7:5, line:15:5>
|   |   `-IfStmt 0x124827038 <line:8:7, line:14:2>
|   |     |-CallExpr 0x124826c78 <line:8:11, col:22> 'int'
|   |     | |-ImplicitCastExpr 0x124826c60 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x12480e9c0 <col:11> 'int ()' Function 0x12480e908 'ISSLASH' 'int ()'
|   |     | `-ImplicitCastExpr 0x124826cb8 <col:20, col:21> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x124826ca0 <col:20, col:21> 'char' <LValueToRValue>
|   |     |     `-UnaryOperator 0x124826c18 <col:20, col:21> 'char' lvalue prefix '*' cannot overflow
|   |     |       `-ImplicitCastExpr 0x124826c00 <col:21> 'char *' <LValueToRValue>
|   |     |         `-DeclRefExpr 0x12480e9e0 <col:21> 'char *' lvalue Var 0x12480e620 'p' 'char *'
|   |     `-CompoundStmt 0x124827018 <line:9:2, line:14:2>
|   |       |-WhileStmt 0x124826e10 <line:10:4, line:11:7>
|   |       | |-CallExpr 0x124826d80 <line:10:11, col:24> 'int'
|   |       | | |-ImplicitCastExpr 0x124826d68 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |       | | | `-DeclRefExpr 0x124826cd0 <col:11> 'int ()' Function 0x12480e908 'ISSLASH' 'int ()'
|   |       | | `-ImplicitCastExpr 0x124826dc0 <col:20, col:23> 'int' <IntegralCast>
|   |       | |   `-ImplicitCastExpr 0x124826da8 <col:20, col:23> 'char' <LValueToRValue>
|   |       | |     `-ArraySubscriptExpr 0x124826d48 <col:20, col:23> 'char' lvalue
|   |       | |       |-ImplicitCastExpr 0x124826d30 <col:20> 'char *' <LValueToRValue>
|   |       | |       | `-DeclRefExpr 0x124826cf0 <col:20> 'char *' lvalue Var 0x12480e620 'p' 'char *'
|   |       | |       `-IntegerLiteral 0x124826d10 <col:22> 'int' 1
|   |       | `-UnaryOperator 0x124826df8 <line:11:6, col:7> 'char *' postfix '++'
|   |       |   `-DeclRefExpr 0x124826dd8 <col:6> 'char *' lvalue Var 0x12480e620 'p' 'char *'
|   |       `-IfStmt 0x124826ff8 <line:12:4, line:13:14>
|   |         |-BinaryOperator 0x124826f20 <line:12:8, col:36> 'int' '||'
|   |         | |-BinaryOperator 0x124826e88 <col:8, col:24> 'int' '<'
|   |         | | |-ImplicitCastExpr 0x124826e70 <col:8> 'int' <LValueToRValue>
|   |         | | | `-DeclRefExpr 0x124826e30 <col:8> 'int' lvalue ParmVar 0x12480e358 'strip_leading' 'int'
|   |         | | `-IntegerLiteral 0x124826e50 <col:24> 'int' 0
|   |         | `-BinaryOperator 0x124826f00 <col:29, col:36> 'int' '>='
|   |         |   |-UnaryOperator 0x124826ec8 <col:29, col:31> 'int' prefix '--'
|   |         |   | `-DeclRefExpr 0x124826ea8 <col:31> 'int' lvalue Var 0x12480e550 's' 'int'
|   |         |   `-IntegerLiteral 0x124826ee0 <col:36> 'int' 0
|   |         `-BinaryOperator 0x124826fd8 <line:13:8, col:14> 'char *' '='
|   |           |-DeclRefExpr 0x124826f40 <col:8> 'char *' lvalue Var 0x12480e6a0 'n' 'char *'
|   |           `-BinaryOperator 0x124826fb8 <col:12, col:14> 'char *' '+'
|   |             |-ImplicitCastExpr 0x124826fa0 <col:12> 'char *' <LValueToRValue>
|   |             | `-DeclRefExpr 0x124826f60 <col:12> 'char *' lvalue Var 0x12480e620 'p' 'char *'
|   |             `-IntegerLiteral 0x124826f80 <col:14> 'int' 1
|   `-IfStmt 0x124829468 <line:16:3, line:22:5> has_else
|     |-BinaryOperator 0x124827258 <line:16:7, col:41> 'int' '&&'
|     | |-ParenExpr 0x1248271b8 <col:7, col:35> 'int'
|     | | `-BinaryOperator 0x124827198 <col:8, col:34> 'int' '||'
|     | |   |-BinaryOperator 0x124827100 <col:8, col:24> 'int' '<'
|     | |   | |-ImplicitCastExpr 0x1248270e8 <col:8> 'int' <LValueToRValue>
|     | |   | | `-DeclRefExpr 0x1248270a8 <col:8> 'int' lvalue ParmVar 0x12480e358 'strip_leading' 'int'
|     | |   | `-IntegerLiteral 0x1248270c8 <col:24> 'int' 0
|     | |   `-BinaryOperator 0x124827178 <col:29, col:34> 'int' '<='
|     | |     |-ImplicitCastExpr 0x124827160 <col:29> 'int' <LValueToRValue>
|     | |     | `-DeclRefExpr 0x124827120 <col:29> 'int' lvalue Var 0x12480e550 's' 'int'
|     | |     `-IntegerLiteral 0x124827140 <col:34> 'int' 0
|     | `-ImplicitCastExpr 0x124827240 <col:40, col:41> 'int' <IntegralCast>
|     |   `-ImplicitCastExpr 0x124827228 <col:40, col:41> 'char' <LValueToRValue>
|     |     `-UnaryOperator 0x124827210 <col:40, col:41> 'char' lvalue prefix '*' cannot overflow
|     |       `-ImplicitCastExpr 0x1248271f8 <col:41> 'char *' <LValueToRValue>
|     |         `-DeclRefExpr 0x1248271d8 <col:41> 'char *' lvalue Var 0x12480e6a0 'n' 'char *'
|     |-CompoundStmt 0x124829428 <line:17:5, line:20:5>
|     | |-CallExpr 0x124829348 <line:18:7, col:39> 'void *'
|     | | |-ImplicitCastExpr 0x124829330 <col:7> 'void *(*)(void *, const void *, unsigned long)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x124827970 <col:7> 'void *(void *, const void *, unsigned long)' Function 0x124827720 'memmove' 'void *(void *, const void *, unsigned long)'
|     | | |-ImplicitCastExpr 0x124829398 <col:16> 'void *' <BitCast>
|     | | | `-ImplicitCastExpr 0x124829380 <col:16> 'char *' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x124827990 <col:16> 'char *' lvalue ParmVar 0x12480e2d8 'name' 'char *'
|     | | |-ImplicitCastExpr 0x1248293c8 <col:22> 'const void *' <BitCast>
|     | | | `-ImplicitCastExpr 0x1248293b0 <col:22> 'char *' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x1248279b0 <col:22> 'char *' lvalue Var 0x12480e6a0 'n' 'char *'
|     | | `-BinaryOperator 0x1248292a8 <col:25, col:38> 'unsigned long' '+'
|     | |   |-CallExpr 0x124829218 <col:25, col:34> 'unsigned long'
|     | |   | |-ImplicitCastExpr 0x124829200 <col:25> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|     | |   | | `-DeclRefExpr 0x124827b78 <col:25> 'unsigned long (const char *)' Function 0x124827a08 'strlen' 'unsigned long (const char *)'
|     | |   | `-ImplicitCastExpr 0x124829258 <col:33> 'const char *' <NoOp>
|     | |   |   `-ImplicitCastExpr 0x124829240 <col:33> 'char *' <LValueToRValue>
|     | |   |     `-DeclRefExpr 0x124827b98 <col:33> 'char *' lvalue Var 0x12480e6a0 'n' 'char *'
|     | |   `-ImplicitCastExpr 0x124829290 <col:38> 'unsigned long' <IntegralCast>
|     | |     `-IntegerLiteral 0x124829270 <col:38> 'int' 1
|     | `-ReturnStmt 0x124829418 <line:19:7, col:14>
|     |   `-RecoveryExpr 0x1248293f8 <col:14> '<dependent type>' contains-errors lvalue
|     `-NullStmt 0x124829460 <line:22:5>
|-FunctionDecl 0x124827720 <line:18:7> col:7 implicit used memmove 'void *(void *, const void *, unsigned long)' extern
| |-ParmVarDecl 0x124827820 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x124827888 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x1248278f0 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x1248277c8 <<invalid sloc>> Implicit 884
`-FunctionDecl 0x124827a08 <col:25> col:25 implicit used strlen 'unsigned long (const char *)' extern
  |-ParmVarDecl 0x124827b08 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x124827ab0 <<invalid sloc>> Implicit 902
