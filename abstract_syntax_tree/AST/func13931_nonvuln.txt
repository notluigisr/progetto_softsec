TranslationUnitDecl 0x11c855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x11c8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x11c855bd0 '__int128'
|-TypedefDecl 0x11c856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x11c855bf0 'unsigned __int128'
|-TypedefDecl 0x11c926a30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x11c926800 'struct __NSConstantString_tag'
|   `-Record 0x11c856580 '__NSConstantString_tag'
|-TypedefDecl 0x11c926a98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x11c855d90 '__SVInt8_t'
|-TypedefDecl 0x11c926b00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x11c855db0 '__SVInt16_t'
|-TypedefDecl 0x11c926b68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x11c855dd0 '__SVInt32_t'
|-TypedefDecl 0x11c926bd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x11c855df0 '__SVInt64_t'
|-TypedefDecl 0x11c926c38 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x11c855e10 '__SVUint8_t'
|-TypedefDecl 0x11c926ca0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x11c855e30 '__SVUint16_t'
|-TypedefDecl 0x11c926d08 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x11c855e50 '__SVUint32_t'
|-TypedefDecl 0x11c926d70 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x11c855e70 '__SVUint64_t'
|-TypedefDecl 0x11c926dd8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x11c855e90 '__SVFloat16_t'
|-TypedefDecl 0x11c926e40 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x11c855eb0 '__SVFloat32_t'
|-TypedefDecl 0x11c926ea8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x11c855ed0 '__SVFloat64_t'
|-TypedefDecl 0x11c926f10 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x11c855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x11c926f78 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x11c855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x11c926fe0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x11c855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x11c927048 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x11c855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x11c9270b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x11c855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x11c927118 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x11c855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x11c927180 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x11c855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x11c9271e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x11c855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x11c927250 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x11c855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x11c9272b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x11c856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x11c927320 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x11c856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x11c927388 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x11c856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x11c9273f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x11c856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x11c927458 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x11c856090 '__clang_svint8x3_t'
|-TypedefDecl 0x11c9274c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x11c8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x11c927528 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x11c8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x11c927590 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x11c8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x11c9275f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x11c856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x11c927660 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x11c856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x11c9276c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x11c856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x11c927730 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x11c856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x11c927798 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x11c856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x11c928000 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x11c8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x11c928068 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x11c8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x11c9280d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x11c8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x11c928138 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x11c856210 '__clang_svint8x4_t'
|-TypedefDecl 0x11c9281a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x11c856230 '__clang_svint16x4_t'
|-TypedefDecl 0x11c928208 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x11c856250 '__clang_svint32x4_t'
|-TypedefDecl 0x11c928270 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x11c856270 '__clang_svint64x4_t'
|-TypedefDecl 0x11c9282d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x11c856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x11c928340 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x11c8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x11c9283a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x11c8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x11c928410 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x11c8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x11c928478 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x11c856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x11c9284e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x11c856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x11c928548 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x11c856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x11c9285b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x11c856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x11c928618 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x11c856390 '__SVBool_t'
|-TypedefDecl 0x11c928680 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x11c8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x11c9286e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x11c8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x11c928750 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x11c8563f0 '__SVCount_t'
|-TypedefDecl 0x11c9287f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x11c9287b0 'char *'
|   `-BuiltinType 0x11c8556b0 'char'
|-TypedefDecl 0x11c928868 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x11c9287b0 'char *'
|   `-BuiltinType 0x11c8556b0 'char'
|-FunctionDecl 0x11c9289f8 <dataset_diviso_filec/func13931_nonvuln.c:1:1, line:70:1> line:1:28 invalid ModPlug_GetModuleType 'int (int *)'
| |-ParmVarDecl 0x11c928928 <col:50, col:63> col:63 invalid file 'int *'
| `-CompoundStmt 0x11c9463e0 <line:2:1, line:70:1>
|   |-DeclStmt 0x11c928b28 <line:3:2, col:18>
|   | `-VarDecl 0x11c928ac0 <col:2, col:14> col:14 used type 'const char *'
|   |-DeclStmt 0x11c928bc0 <line:4:2, col:12>
|   | `-VarDecl 0x11c928b58 <col:2, col:6> col:6 used retval 'int'
|   |-IfStmt 0x11c928c58 <line:5:2, col:19>
|   | |-UnaryOperator 0x11c928c10 <col:5, col:6> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x11c928bf8 <col:6> '<dependent type>' contains-errors <LValueToRValue>
|   | |   `-RecoveryExpr 0x11c928bd8 <col:6> '<dependent type>' contains-errors lvalue
|   | `-ReturnStmt 0x11c928c48 <col:12, col:19>
|   |   `-IntegerLiteral 0x11c928c28 <col:19> 'int' 0
|   |-BinaryOperator 0x11c928f10 <line:6:2, col:52> 'const char *' contains-errors '='
|   | |-DeclRefExpr 0x11c928c78 <col:2> 'const char *' lvalue Var 0x11c928ac0 'type' 'const char *'
|   | `-CallExpr 0x11c928ee0 <col:9, col:52> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x11c928df0 <col:9> 'int ()' Function 0x11c928d38 'openmpt_module_get_metadata' 'int ()'
|   |   |-CXXDependentScopeMemberExpr 0x11c928e30 <col:37, col:43> '<dependent type>' contains-errors lvalue ->mod
|   |   | `-RecoveryExpr 0x11c928e10 <col:37> '<dependent type>' contains-errors lvalue
|   |   `-StringLiteral 0x11c928ec0 <col:47> 'char[4]' lvalue "STR"
|   |-BinaryOperator 0x11c928fa8 <line:7:2, col:11> 'int' contains-errors '='
|   | |-DeclRefExpr 0x11c928f30 <col:2> 'int' lvalue Var 0x11c928b58 'retval' 'int'
|   | `-RecoveryExpr 0x11c928f88 <col:11> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x11c942078 <line:8:2, line:10:2>
|   | |-UnaryOperator 0x11c942000 <line:8:5, col:6> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x11c928fe8 <col:6> 'const char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x11c928fc8 <col:6> 'const char *' lvalue Var 0x11c928ac0 'type' 'const char *'
|   | `-CompoundStmt 0x11c942060 <col:11, line:10:2>
|   |   `-ReturnStmt 0x11c942050 <line:9:3, col:10>
|   |     `-ImplicitCastExpr 0x11c942038 <col:10> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x11c942018 <col:10> 'int' lvalue Var 0x11c928b58 'retval' 'int'
|   |-IfStmt 0x11c9461c0 <line:11:2, line:67:2> has_else
|   | |-UnaryOperator 0x11c942830 <line:11:5, col:23> 'int' prefix '!' cannot overflow
|   | | `-CallExpr 0x11c9427b8 <col:6, col:23> 'int'
|   | |   |-ImplicitCastExpr 0x11c9427a0 <col:6> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x11c9426e0 <col:6> 'int (const char *, const char *)' Function 0x11c942500 'strcmp' 'int (const char *, const char *)'
|   | |   |-ImplicitCastExpr 0x11c9427e8 <col:13> 'const char *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x11c942700 <col:13> 'const char *' lvalue Var 0x11c928ac0 'type' 'const char *'
|   | |   `-ImplicitCastExpr 0x11c942818 <col:18> 'const char *' <NoOp>
|   | |     `-ImplicitCastExpr 0x11c942800 <col:18> 'char *' <ArrayToPointerDecay>
|   | |       `-StringLiteral 0x11c942720 <col:18> 'char[4]' lvalue "STR"
|   | |-CompoundStmt 0x11c9428e0 <col:25, line:13:2>
|   | | `-BinaryOperator 0x11c9428c0 <line:12:3, col:12> 'int' contains-errors '='
|   | |   |-DeclRefExpr 0x11c942848 <col:3> 'int' lvalue Var 0x11c928b58 'retval' 'int'
|   | |   `-RecoveryExpr 0x11c9428a0 <col:12> '<dependent type>' contains-errors lvalue
|   | `-IfStmt 0x11c946190 <line:13:8, line:67:2> has_else
|   |   |-UnaryOperator 0x11c942a18 <line:13:11, col:29> 'int' prefix '!' cannot overflow
|   |   | `-CallExpr 0x11c9429a0 <col:12, col:29> 'int'
|   |   |   |-ImplicitCastExpr 0x11c942988 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x11c9428f8 <col:12> 'int (const char *, const char *)' Function 0x11c942500 'strcmp' 'int (const char *, const char *)'
|   |   |   |-ImplicitCastExpr 0x11c9429d0 <col:19> 'const char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x11c942918 <col:19> 'const char *' lvalue Var 0x11c928ac0 'type' 'const char *'
|   |   |   `-ImplicitCastExpr 0x11c942a00 <col:24> 'const char *' <NoOp>
|   |   |     `-ImplicitCastExpr 0x11c9429e8 <col:24> 'char *' <ArrayToPointerDecay>
|   |   |       `-StringLiteral 0x11c942938 <col:24> 'char[4]' lvalue "STR"
|   |   |-CompoundStmt 0x11c942ac8 <col:31, line:15:2>
|   |   | `-BinaryOperator 0x11c942aa8 <line:14:3, col:12> 'int' contains-errors '='
|   |   |   |-DeclRefExpr 0x11c942a30 <col:3> 'int' lvalue Var 0x11c928b58 'retval' 'int'
|   |   |   `-RecoveryExpr 0x11c942a88 <col:12> '<dependent type>' contains-errors lvalue
|   |   `-IfStmt 0x11c946160 <line:15:8, line:67:2> has_else
|   |     |-UnaryOperator 0x11c942c00 <line:15:11, col:29> 'int' prefix '!' cannot overflow
|   |     | `-CallExpr 0x11c942b88 <col:12, col:29> 'int'
|   |     |   |-ImplicitCastExpr 0x11c942b70 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x11c942ae0 <col:12> 'int (const char *, const char *)' Function 0x11c942500 'strcmp' 'int (const char *, const char *)'
|   |     |   |-ImplicitCastExpr 0x11c942bb8 <col:19> 'const char *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x11c942b00 <col:19> 'const char *' lvalue Var 0x11c928ac0 'type' 'const char *'
|   |     |   `-ImplicitCastExpr 0x11c942be8 <col:24> 'const char *' <NoOp>
|   |     |     `-ImplicitCastExpr 0x11c942bd0 <col:24> 'char *' <ArrayToPointerDecay>
|   |     |       `-StringLiteral 0x11c942b20 <col:24> 'char[4]' lvalue "STR"
|   |     |-CompoundStmt 0x11c942cb0 <col:31, line:17:2>
|   |     | `-BinaryOperator 0x11c942c90 <line:16:3, col:12> 'int' contains-errors '='
|   |     |   |-DeclRefExpr 0x11c942c18 <col:3> 'int' lvalue Var 0x11c928b58 'retval' 'int'
|   |     |   `-RecoveryExpr 0x11c942c70 <col:12> '<dependent type>' contains-errors lvalue
|   |     `-IfStmt 0x11c946130 <line:17:8, line:67:2> has_else
|   |       |-UnaryOperator 0x11c942de8 <line:17:11, col:29> 'int' prefix '!' cannot overflow
|   |       | `-CallExpr 0x11c942d70 <col:12, col:29> 'int'
|   |       |   |-ImplicitCastExpr 0x11c942d58 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |       |   | `-DeclRefExpr 0x11c942cc8 <col:12> 'int (const char *, const char *)' Function 0x11c942500 'strcmp' 'int (const char *, const char *)'
|   |       |   |-ImplicitCastExpr 0x11c942da0 <col:19> 'const char *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x11c942ce8 <col:19> 'const char *' lvalue Var 0x11c928ac0 'type' 'const char *'
|   |       |   `-ImplicitCastExpr 0x11c942dd0 <col:24> 'const char *' <NoOp>
|   |       |     `-ImplicitCastExpr 0x11c942db8 <col:24> 'char *' <ArrayToPointerDecay>
|   |       |       `-StringLiteral 0x11c942d08 <col:24> 'char[4]' lvalue "STR"
|   |       |-CompoundStmt 0x11c942e98 <col:31, line:19:2>
|   |       | `-BinaryOperator 0x11c942e78 <line:18:3, col:12> 'int' contains-errors '='
|   |       |   |-DeclRefExpr 0x11c942e00 <col:3> 'int' lvalue Var 0x11c928b58 'retval' 'int'
|   |       |   `-RecoveryExpr 0x11c942e58 <col:12> '<dependent type>' contains-errors lvalue
|   |       `-IfStmt 0x11c946100 <line:19:8, line:67:2> has_else
|   |         |-UnaryOperator 0x11c942fd0 <line:19:11, col:29> 'int' prefix '!' cannot overflow
|   |         | `-CallExpr 0x11c942f58 <col:12, col:29> 'int'
|   |         |   |-ImplicitCastExpr 0x11c942f40 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |         |   | `-DeclRefExpr 0x11c942eb0 <col:12> 'int (const char *, const char *)' Function 0x11c942500 'strcmp' 'int (const char *, const char *)'
|   |         |   |-ImplicitCastExpr 0x11c942f88 <col:19> 'const char *' <LValueToRValue>
|   |         |   | `-DeclRefExpr 0x11c942ed0 <col:19> 'const char *' lvalue Var 0x11c928ac0 'type' 'const char *'
|   |         |   `-ImplicitCastExpr 0x11c942fb8 <col:24> 'const char *' <NoOp>
|   |         |     `-ImplicitCastExpr 0x11c942fa0 <col:24> 'char *' <ArrayToPointerDecay>
|   |         |       `-StringLiteral 0x11c942ef0 <col:24> 'char[4]' lvalue "STR"
|   |         |-CompoundStmt 0x11c943898 <col:31, line:21:2>
|   |         | `-BinaryOperator 0x11c943878 <line:20:3, col:12> 'int' contains-errors '='
|   |         |   |-DeclRefExpr 0x11c943800 <col:3> 'int' lvalue Var 0x11c928b58 'retval' 'int'
|   |         |   `-RecoveryExpr 0x11c943858 <col:12> '<dependent type>' contains-errors lvalue
|   |         `-IfStmt 0x11c9460d0 <line:21:8, line:67:2> has_else
|   |           |-UnaryOperator 0x11c9439d0 <line:21:11, col:29> 'int' prefix '!' cannot overflow
|   |           | `-CallExpr 0x11c943958 <col:12, col:29> 'int'
|   |           |   |-ImplicitCastExpr 0x11c943940 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |           |   | `-DeclRefExpr 0x11c9438b0 <col:12> 'int (const char *, const char *)' Function 0x11c942500 'strcmp' 'int (const char *, const char *)'
|   |           |   |-ImplicitCastExpr 0x11c943988 <col:19> 'const char *' <LValueToRValue>
|   |           |   | `-DeclRefExpr 0x11c9438d0 <col:19> 'const char *' lvalue Var 0x11c928ac0 'type' 'const char *'
|   |           |   `-ImplicitCastExpr 0x11c9439b8 <col:24> 'const char *' <NoOp>
|   |           |     `-ImplicitCastExpr 0x11c9439a0 <col:24> 'char *' <ArrayToPointerDecay>
|   |           |       `-StringLiteral 0x11c9438f0 <col:24> 'char[4]' lvalue "STR"
|   |           |-CompoundStmt 0x11c943a80 <col:31, line:23:2>
|   |           | `-BinaryOperator 0x11c943a60 <line:22:3, col:12> 'int' contains-errors '='
|   |           |   |-DeclRefExpr 0x11c9439e8 <col:3> 'int' lvalue Var 0x11c928b58 'retval' 'int'
|   |           |   `-RecoveryExpr 0x11c943a40 <col:12> '<dependent type>' contains-errors lvalue
|   |           `-IfStmt 0x11c9460a0 <line:23:8, line:67:2> has_else
|   |             |-UnaryOperator 0x11c943bb8 <line:23:11, col:29> 'int' prefix '!' cannot overflow
|   |             | `-CallExpr 0x11c943b40 <col:12, col:29> 'int'
|   |             |   |-ImplicitCastExpr 0x11c943b28 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |             |   | `-DeclRefExpr 0x11c943a98 <col:12> 'int (const char *, const char *)' Function 0x11c942500 'strcmp' 'int (const char *, const char *)'
|   |             |   |-ImplicitCastExpr 0x11c943b70 <col:19> 'const char *' <LValueToRValue>
|   |             |   | `-DeclRefExpr 0x11c943ab8 <col:19> 'const char *' lvalue Var 0x11c928ac0 'type' 'const char *'
|   |             |   `-ImplicitCastExpr 0x11c943ba0 <col:24> 'const char *' <NoOp>
|   |             |     `-ImplicitCastExpr 0x11c943b88 <col:24> 'char *' <ArrayToPointerDecay>
|   |             |       `-StringLiteral 0x11c943ad8 <col:24> 'char[4]' lvalue "STR"
|   |             |-CompoundStmt 0x11c943c68 <col:31, line:25:2>
|   |             | `-BinaryOperator 0x11c943c48 <line:24:3, col:12> 'int' contains-errors '='
|   |             |   |-DeclRefExpr 0x11c943bd0 <col:3> 'int' lvalue Var 0x11c928b58 'retval' 'int'
|   |             |   `-RecoveryExpr 0x11c943c28 <col:12> '<dependent type>' contains-errors lvalue
|   |             `-IfStmt 0x11c946070 <line:25:8, line:67:2> has_else
|   |               |-UnaryOperator 0x11c943da0 <line:25:11, col:29> 'int' prefix '!' cannot overflow
|   |               | `-CallExpr 0x11c943d28 <col:12, col:29> 'int'
|   |               |   |-ImplicitCastExpr 0x11c943d10 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |               |   | `-DeclRefExpr 0x11c943c80 <col:12> 'int (const char *, const char *)' Function 0x11c942500 'strcmp' 'int (const char *, const char *)'
|   |               |   |-ImplicitCastExpr 0x11c943d58 <col:19> 'const char *' <LValueToRValue>
|   |               |   | `-DeclRefExpr 0x11c943ca0 <col:19> 'const char *' lvalue Var 0x11c928ac0 'type' 'const char *'
|   |               |   `-ImplicitCastExpr 0x11c943d88 <col:24> 'const char *' <NoOp>
|   |               |     `-ImplicitCastExpr 0x11c943d70 <col:24> 'char *' <ArrayToPointerDecay>
|   |               |       `-StringLiteral 0x11c943cc0 <col:24> 'char[4]' lvalue "STR"
|   |               |-CompoundStmt 0x11c943e50 <col:31, line:27:2>
|   |               | `-BinaryOperator 0x11c943e30 <line:26:3, col:12> 'int' contains-errors '='
|   |               |   |-DeclRefExpr 0x11c943db8 <col:3> 'int' lvalue Var 0x11c928b58 'retval' 'int'
|   |               |   `-RecoveryExpr 0x11c943e10 <col:12> '<dependent type>' contains-errors lvalue
|   |               `-IfStmt 0x11c946040 <line:27:8, line:67:2> has_else
|   |                 |-UnaryOperator 0x11c943f88 <line:27:11, col:29> 'int' prefix '!' cannot overflow
|   |                 | `-CallExpr 0x11c943f10 <col:12, col:29> 'int'
|   |                 |   |-ImplicitCastExpr 0x11c943ef8 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |                 |   | `-DeclRefExpr 0x11c943e68 <col:12> 'int (const char *, const char *)' Function 0x11c942500 'strcmp' 'int (const char *, const char *)'
|   |                 |   |-ImplicitCastExpr 0x11c943f40 <col:19> 'const char *' <LValueToRValue>
|   |                 |   | `-DeclRefExpr 0x11c943e88 <col:19> 'const char *' lvalue Var 0x11c928ac0 'type' 'const char *'
|   |                 |   `-ImplicitCastExpr 0x11c943f70 <col:24> 'const char *' <NoOp>
|   |                 |     `-ImplicitCastExpr 0x11c943f58 <col:24> 'char *' <ArrayToPointerDecay>
|   |                 |       `-StringLiteral 0x11c943ea8 <col:24> 'char[4]' lvalue "STR"
|   |                 |-CompoundStmt 0x11c944038 <col:31, line:29:2>
|   |                 | `-BinaryOperator 0x11c944018 <line:28:3, col:12> 'int' contains-errors '='
|   |                 |   |-DeclRefExpr 0x11c943fa0 <col:3> 'int' lvalue Var 0x11c928b58 'retval' 'int'
|   |                 |   `-RecoveryExpr 0x11c943ff8 <col:12> '<dependent type>' contains-errors lvalue
|   |                 `-IfStmt 0x11c946010 <line:29:8, line:67:2> has_else
|   |                   |-UnaryOperator 0x11c944170 <line:29:11, col:29> 'int' prefix '!' cannot overflow
|   |                   | `-CallExpr 0x11c9440f8 <col:12, col:29> 'int'
|   |                   |   |-ImplicitCastExpr 0x11c9440e0 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |                   |   | `-DeclRefExpr 0x11c944050 <col:12> 'int (const char *, const char *)' Function 0x11c942500 'strcmp' 'int (const char *, const char *)'
|   |                   |   |-ImplicitCastExpr 0x11c944128 <col:19> 'const char *' <LValueToRValue>
|   |                   |   | `-DeclRefExpr 0x11c944070 <col:19> 'const char *' lvalue Var 0x11c928ac0 'type' 'const char *'
|   |                   |   `-ImplicitCastExpr 0x11c944158 <col:24> 'const char *' <NoOp>
|   |                   |     `-ImplicitCastExpr 0x11c944140 <col:24> 'char *' <ArrayToPointerDecay>
|   |                   |       `-StringLiteral 0x11c944090 <col:24> 'char[4]' lvalue "STR"
|   |                   |-CompoundStmt 0x11c944220 <col:31, line:31:2>
|   |                   | `-BinaryOperator 0x11c944200 <line:30:3, col:12> 'int' contains-errors '='
|   |                   |   |-DeclRefExpr 0x11c944188 <col:3> 'int' lvalue Var 0x11c928b58 'retval' 'int'
|   |                   |   `-RecoveryExpr 0x11c9441e0 <col:12> '<dependent type>' contains-errors lvalue
|   |                   `-IfStmt 0x11c945fe0 <line:31:8, line:67:2> has_else
|   |                     |-UnaryOperator 0x11c944358 <line:31:11, col:29> 'int' prefix '!' cannot overflow
|   |                     | `-CallExpr 0x11c9442e0 <col:12, col:29> 'int'
|   |                     |   |-ImplicitCastExpr 0x11c9442c8 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |                     |   | `-DeclRefExpr 0x11c944238 <col:12> 'int (const char *, const char *)' Function 0x11c942500 'strcmp' 'int (const char *, const char *)'
|   |                     |   |-ImplicitCastExpr 0x11c944310 <col:19> 'const char *' <LValueToRValue>
|   |                     |   | `-DeclRefExpr 0x11c944258 <col:19> 'const char *' lvalue Var 0x11c928ac0 'type' 'const char *'
|   |                     |   `-ImplicitCastExpr 0x11c944340 <col:24> 'const char *' <NoOp>
|   |                     |     `-ImplicitCastExpr 0x11c944328 <col:24> 'char *' <ArrayToPointerDecay>
|   |                     |       `-StringLiteral 0x11c944278 <col:24> 'char[4]' lvalue "STR"
|   |                     |-CompoundStmt 0x11c944408 <col:31, line:33:2>
|   |                     | `-BinaryOperator 0x11c9443e8 <line:32:3, col:12> 'int' contains-errors '='
|   |                     |   |-DeclRefExpr 0x11c944370 <col:3> 'int' lvalue Var 0x11c928b58 'retval' 'int'
|   |                     |   `-RecoveryExpr 0x11c9443c8 <col:12> '<dependent type>' contains-errors lvalue
|   |                     `-IfStmt 0x11c945fb0 <line:33:8, line:67:2> has_else
|   |                       |-UnaryOperator 0x11c944540 <line:33:11, col:29> 'int' prefix '!' cannot overflow
|   |                       | `-CallExpr 0x11c9444c8 <col:12, col:29> 'int'
|   |                       |   |-ImplicitCastExpr 0x11c9444b0 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |                       |   | `-DeclRefExpr 0x11c944420 <col:12> 'int (const char *, const char *)' Function 0x11c942500 'strcmp' 'int (const char *, const char *)'
|   |                       |   |-ImplicitCastExpr 0x11c9444f8 <col:19> 'const char *' <LValueToRValue>
|   |                       |   | `-DeclRefExpr 0x11c944440 <col:19> 'const char *' lvalue Var 0x11c928ac0 'type' 'const char *'
|   |                       |   `-ImplicitCastExpr 0x11c944528 <col:24> 'const char *' <NoOp>
|   |                       |     `-ImplicitCastExpr 0x11c944510 <col:24> 'char *' <ArrayToPointerDecay>
|   |                       |       `-StringLiteral 0x11c944460 <col:24> 'char[4]' lvalue "STR"
|   |                       |-CompoundStmt 0x11c9445f0 <col:31, line:35:2>
|   |                       | `-BinaryOperator 0x11c9445d0 <line:34:3, col:12> 'int' contains-errors '='
|   |                       |   |-DeclRefExpr 0x11c944558 <col:3> 'int' lvalue Var 0x11c928b58 'retval' 'int'
|   |                       |   `-RecoveryExpr 0x11c9445b0 <col:12> '<dependent type>' contains-errors lvalue
|   |                       `-IfStmt 0x11c945f80 <line:35:8, line:67:2> has_else
|   |                         |-UnaryOperator 0x11c944728 <line:35:11, col:29> 'int' prefix '!' cannot overflow
|   |                         | `-CallExpr 0x11c9446b0 <col:12, col:29> 'int'
|   |                         |   |-ImplicitCastExpr 0x11c944698 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |                         |   | `-DeclRefExpr 0x11c944608 <col:12> 'int (const char *, const char *)' Function 0x11c942500 'strcmp' 'int (const char *, const char *)'
|   |                         |   |-ImplicitCastExpr 0x11c9446e0 <col:19> 'const char *' <LValueToRValue>
|   |                         |   | `-DeclRefExpr 0x11c944628 <col:19> 'const char *' lvalue Var 0x11c928ac0 'type' 'const char *'
|   |                         |   `-ImplicitCastExpr 0x11c944710 <col:24> 'const char *' <NoOp>
|   |                         |     `-ImplicitCastExpr 0x11c9446f8 <col:24> 'char *' <ArrayToPointerDecay>
|   |                         |       `-StringLiteral 0x11c944648 <col:24> 'char[4]' lvalue "STR"
|   |                         |-CompoundStmt 0x11c9447d8 <col:31, line:37:2>
|   |                         | `-BinaryOperator 0x11c9447b8 <line:36:3, col:12> 'int' contains-errors '='
|   |                         |   |-DeclRefExpr 0x11c944740 <col:3> 'int' lvalue Var 0x11c928b58 'retval' 'int'
|   |                         |   `-RecoveryExpr 0x11c944798 <col:12> '<dependent type>' contains-errors lvalue
|   |                         `-IfStmt 0x11c945f50 <line:37:8, line:67:2> has_else
|   |                           |-UnaryOperator 0x11c944920 <line:37:11, col:29> 'int' prefix '!' cannot overflow
|   |                           | `-CallExpr 0x11c9448a8 <col:12, col:29> 'int'
|   |                           |   |-ImplicitCastExpr 0x11c944890 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |                           |   | `-DeclRefExpr 0x11c944800 <col:12> 'int (const char *, const char *)' Function 0x11c942500 'strcmp' 'int (const char *, const char *)'
|   |                           |   |-ImplicitCastExpr 0x11c9448d8 <col:19> 'const char *' <LValueToRValue>
|   |                           |   | `-DeclRefExpr 0x11c944820 <col:19> 'const char *' lvalue Var 0x11c928ac0 'type' 'const char *'
|   |                           |   `-ImplicitCastExpr 0x11c944908 <col:24> 'const char *' <NoOp>
|   |                           |     `-ImplicitCastExpr 0x11c9448f0 <col:24> 'char *' <ArrayToPointerDecay>
|   |                           |       `-StringLiteral 0x11c944840 <col:24> 'char[4]' lvalue "STR"
|   |                           |-CompoundStmt 0x11c9449d0 <col:31, line:39:2>
|   |                           | `-BinaryOperator 0x11c9449b0 <line:38:3, col:12> 'int' contains-errors '='
|   |                           |   |-DeclRefExpr 0x11c944938 <col:3> 'int' lvalue Var 0x11c928b58 'retval' 'int'
|   |                           |   `-RecoveryExpr 0x11c944990 <col:12> '<dependent type>' contains-errors lvalue
|   |                           `-IfStmt 0x11c945f20 <line:39:8, line:67:2> has_else
|   |                             |-UnaryOperator 0x11c944b08 <line:39:11, col:29> 'int' prefix '!' cannot overflow
|   |                             | `-CallExpr 0x11c944a90 <col:12, col:29> 'int'
|   |                             |   |-ImplicitCastExpr 0x11c944a78 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |                             |   | `-DeclRefExpr 0x11c9449e8 <col:12> 'int (const char *, const char *)' Function 0x11c942500 'strcmp' 'int (const char *, const char *)'
|   |                             |   |-ImplicitCastExpr 0x11c944ac0 <col:19> 'const char *' <LValueToRValue>
|   |                             |   | `-DeclRefExpr 0x11c944a08 <col:19> 'const char *' lvalue Var 0x11c928ac0 'type' 'const char *'
|   |                             |   `-ImplicitCastExpr 0x11c944af0 <col:24> 'const char *' <NoOp>
|   |                             |     `-ImplicitCastExpr 0x11c944ad8 <col:24> 'char *' <ArrayToPointerDecay>
|   |                             |       `-StringLiteral 0x11c944a28 <col:24> 'char[4]' lvalue "STR"
|   |                             |-CompoundStmt 0x11c944bb8 <col:31, line:41:2>
|   |                             | `-BinaryOperator 0x11c944b98 <line:40:3, col:12> 'int' contains-errors '='
|   |                             |   |-DeclRefExpr 0x11c944b20 <col:3> 'int' lvalue Var 0x11c928b58 'retval' 'int'
|   |                             |   `-RecoveryExpr 0x11c944b78 <col:12> '<dependent type>' contains-errors lvalue
|   |                             `-IfStmt 0x11c945ef0 <line:41:8, line:67:2> has_else
|   |                               |-UnaryOperator 0x11c944cf0 <line:41:11, col:29> 'int' prefix '!' cannot overflow
|   |                               | `-CallExpr 0x11c944c78 <col:12, col:29> 'int'
|   |                               |   |-ImplicitCastExpr 0x11c944c60 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |                               |   | `-DeclRefExpr 0x11c944bd0 <col:12> 'int (const char *, const char *)' Function 0x11c942500 'strcmp' 'int (const char *, const char *)'
|   |                               |   |-ImplicitCastExpr 0x11c944ca8 <col:19> 'const char *' <LValueToRValue>
|   |                               |   | `-DeclRefExpr 0x11c944bf0 <col:19> 'const char *' lvalue Var 0x11c928ac0 'type' 'const char *'
|   |                               |   `-ImplicitCastExpr 0x11c944cd8 <col:24> 'const char *' <NoOp>
|   |                               |     `-ImplicitCastExpr 0x11c944cc0 <col:24> 'char *' <ArrayToPointerDecay>
|   |                               |       `-StringLiteral 0x11c944c10 <col:24> 'char[4]' lvalue "STR"
|   |                               |-CompoundStmt 0x11c944d28 <col:31, line:43:2>
|   |                               `-IfStmt 0x11c945ec0 <col:8, line:67:2> has_else
|   |                                 |-UnaryOperator 0x11c944e58 <line:43:11, col:29> 'int' prefix '!' cannot overflow
|   |                                 | `-CallExpr 0x11c944de0 <col:12, col:29> 'int'
|   |                                 |   |-ImplicitCastExpr 0x11c944dc8 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |                                 |   | `-DeclRefExpr 0x11c944d38 <col:12> 'int (const char *, const char *)' Function 0x11c942500 'strcmp' 'int (const char *, const char *)'
|   |                                 |   |-ImplicitCastExpr 0x11c944e10 <col:19> 'const char *' <LValueToRValue>
|   |                                 |   | `-DeclRefExpr 0x11c944d58 <col:19> 'const char *' lvalue Var 0x11c928ac0 'type' 'const char *'
|   |                                 |   `-ImplicitCastExpr 0x11c944e40 <col:24> 'const char *' <NoOp>
|   |                                 |     `-ImplicitCastExpr 0x11c944e28 <col:24> 'char *' <ArrayToPointerDecay>
|   |                                 |       `-StringLiteral 0x11c944d78 <col:24> 'char[4]' lvalue "STR"
|   |                                 |-CompoundStmt 0x11c944e90 <col:31, line:45:2>
|   |                                 `-IfStmt 0x11c945e90 <col:8, line:67:2> has_else
|   |                                   |-UnaryOperator 0x11c944fc0 <line:45:11, col:29> 'int' prefix '!' cannot overflow
|   |                                   | `-CallExpr 0x11c944f48 <col:12, col:29> 'int'
|   |                                   |   |-ImplicitCastExpr 0x11c944f30 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |                                   |   | `-DeclRefExpr 0x11c944ea0 <col:12> 'int (const char *, const char *)' Function 0x11c942500 'strcmp' 'int (const char *, const char *)'
|   |                                   |   |-ImplicitCastExpr 0x11c944f78 <col:19> 'const char *' <LValueToRValue>
|   |                                   |   | `-DeclRefExpr 0x11c944ec0 <col:19> 'const char *' lvalue Var 0x11c928ac0 'type' 'const char *'
|   |                                   |   `-ImplicitCastExpr 0x11c944fa8 <col:24> 'const char *' <NoOp>
|   |                                   |     `-ImplicitCastExpr 0x11c944f90 <col:24> 'char *' <ArrayToPointerDecay>
|   |                                   |       `-StringLiteral 0x11c944ee0 <col:24> 'char[4]' lvalue "STR"
|   |                                   |-CompoundStmt 0x11c944ff8 <col:31, line:47:2>
|   |                                   `-IfStmt 0x11c945e60 <col:8, line:67:2> has_else
|   |                                     |-UnaryOperator 0x11c945128 <line:47:11, col:29> 'int' prefix '!' cannot overflow
|   |                                     | `-CallExpr 0x11c9450b0 <col:12, col:29> 'int'
|   |                                     |   |-ImplicitCastExpr 0x11c945098 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |                                     |   | `-DeclRefExpr 0x11c945008 <col:12> 'int (const char *, const char *)' Function 0x11c942500 'strcmp' 'int (const char *, const char *)'
|   |                                     |   |-ImplicitCastExpr 0x11c9450e0 <col:19> 'const char *' <LValueToRValue>
|   |                                     |   | `-DeclRefExpr 0x11c945028 <col:19> 'const char *' lvalue Var 0x11c928ac0 'type' 'const char *'
|   |                                     |   `-ImplicitCastExpr 0x11c945110 <col:24> 'const char *' <NoOp>
|   |                                     |     `-ImplicitCastExpr 0x11c9450f8 <col:24> 'char *' <ArrayToPointerDecay>
|   |                                     |       `-StringLiteral 0x11c945048 <col:24> 'char[4]' lvalue "STR"
|   |                                     |-CompoundStmt 0x11c945160 <col:31, line:49:2>
|   |                                     `-IfStmt 0x11c945e30 <col:8, line:67:2> has_else
|   |                                       |-UnaryOperator 0x11c945290 <line:49:11, col:29> 'int' prefix '!' cannot overflow
|   |                                       | `-CallExpr 0x11c945218 <col:12, col:29> 'int'
|   |                                       |   |-ImplicitCastExpr 0x11c945200 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |                                       |   | `-DeclRefExpr 0x11c945170 <col:12> 'int (const char *, const char *)' Function 0x11c942500 'strcmp' 'int (const char *, const char *)'
|   |                                       |   |-ImplicitCastExpr 0x11c945248 <col:19> 'const char *' <LValueToRValue>
|   |                                       |   | `-DeclRefExpr 0x11c945190 <col:19> 'const char *' lvalue Var 0x11c928ac0 'type' 'const char *'
|   |                                       |   `-ImplicitCastExpr 0x11c945278 <col:24> 'const char *' <NoOp>
|   |                                       |     `-ImplicitCastExpr 0x11c945260 <col:24> 'char *' <ArrayToPointerDecay>
|   |                                       |       `-StringLiteral 0x11c9451b0 <col:24> 'char[4]' lvalue "STR"
|   |                                       |-CompoundStmt 0x11c9452c8 <col:31, line:51:2>
|   |                                       `-IfStmt 0x11c945e00 <col:8, line:67:2> has_else
|   |                                         |-UnaryOperator 0x11c9453f8 <line:51:11, col:29> 'int' prefix '!' cannot overflow
|   |                                         | `-CallExpr 0x11c945380 <col:12, col:29> 'int'
|   |                                         |   |-ImplicitCastExpr 0x11c945368 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |                                         |   | `-DeclRefExpr 0x11c9452d8 <col:12> 'int (const char *, const char *)' Function 0x11c942500 'strcmp' 'int (const char *, const char *)'
|   |                                         |   |-ImplicitCastExpr 0x11c9453b0 <col:19> 'const char *' <LValueToRValue>
|   |                                         |   | `-DeclRefExpr 0x11c9452f8 <col:19> 'const char *' lvalue Var 0x11c928ac0 'type' 'const char *'
|   |                                         |   `-ImplicitCastExpr 0x11c9453e0 <col:24> 'const char *' <NoOp>
|   |                                         |     `-ImplicitCastExpr 0x11c9453c8 <col:24> 'char *' <ArrayToPointerDecay>
|   |                                         |       `-StringLiteral 0x11c945318 <col:24> 'char[4]' lvalue "STR"
|   |                                         |-CompoundStmt 0x11c945430 <col:31, line:53:2>
|   |                                         `-IfStmt 0x11c945dd0 <col:8, line:67:2> has_else
|   |                                           |-UnaryOperator 0x11c945560 <line:53:11, col:29> 'int' prefix '!' cannot overflow
|   |                                           | `-CallExpr 0x11c9454e8 <col:12, col:29> 'int'
|   |                                           |   |-ImplicitCastExpr 0x11c9454d0 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |                                           |   | `-DeclRefExpr 0x11c945440 <col:12> 'int (const char *, const char *)' Function 0x11c942500 'strcmp' 'int (const char *, const char *)'
|   |                                           |   |-ImplicitCastExpr 0x11c945518 <col:19> 'const char *' <LValueToRValue>
|   |                                           |   | `-DeclRefExpr 0x11c945460 <col:19> 'const char *' lvalue Var 0x11c928ac0 'type' 'const char *'
|   |                                           |   `-ImplicitCastExpr 0x11c945548 <col:24> 'const char *' <NoOp>
|   |                                           |     `-ImplicitCastExpr 0x11c945530 <col:24> 'char *' <ArrayToPointerDecay>
|   |                                           |       `-StringLiteral 0x11c945480 <col:24> 'char[4]' lvalue "STR"
|   |                                           |-CompoundStmt 0x11c945598 <col:31, line:55:2>
|   |                                           `-IfStmt 0x11c945da0 <col:8, line:67:2> has_else
|   |                                             |-UnaryOperator 0x11c9456c8 <line:55:11, col:29> 'int' prefix '!' cannot overflow
|   |                                             | `-CallExpr 0x11c945650 <col:12, col:29> 'int'
|   |                                             |   |-ImplicitCastExpr 0x11c945638 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |                                             |   | `-DeclRefExpr 0x11c9455a8 <col:12> 'int (const char *, const char *)' Function 0x11c942500 'strcmp' 'int (const char *, const char *)'
|   |                                             |   |-ImplicitCastExpr 0x11c945680 <col:19> 'const char *' <LValueToRValue>
|   |                                             |   | `-DeclRefExpr 0x11c9455c8 <col:19> 'const char *' lvalue Var 0x11c928ac0 'type' 'const char *'
|   |                                             |   `-ImplicitCastExpr 0x11c9456b0 <col:24> 'const char *' <NoOp>
|   |                                             |     `-ImplicitCastExpr 0x11c945698 <col:24> 'char *' <ArrayToPointerDecay>
|   |                                             |       `-StringLiteral 0x11c9455e8 <col:24> 'char[4]' lvalue "STR"
|   |                                             |-CompoundStmt 0x11c945700 <col:31, line:57:2>
|   |                                             `-IfStmt 0x11c945d70 <col:8, line:67:2> has_else
|   |                                               |-UnaryOperator 0x11c945830 <line:57:11, col:29> 'int' prefix '!' cannot overflow
|   |                                               | `-CallExpr 0x11c9457b8 <col:12, col:29> 'int'
|   |                                               |   |-ImplicitCastExpr 0x11c9457a0 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |                                               |   | `-DeclRefExpr 0x11c945710 <col:12> 'int (const char *, const char *)' Function 0x11c942500 'strcmp' 'int (const char *, const char *)'
|   |                                               |   |-ImplicitCastExpr 0x11c9457e8 <col:19> 'const char *' <LValueToRValue>
|   |                                               |   | `-DeclRefExpr 0x11c945730 <col:19> 'const char *' lvalue Var 0x11c928ac0 'type' 'const char *'
|   |                                               |   `-ImplicitCastExpr 0x11c945818 <col:24> 'const char *' <NoOp>
|   |                                               |     `-ImplicitCastExpr 0x11c945800 <col:24> 'char *' <ArrayToPointerDecay>
|   |                                               |       `-StringLiteral 0x11c945750 <col:24> 'char[4]' lvalue "STR"
|   |                                               |-CompoundStmt 0x11c945868 <col:31, line:59:2>
|   |                                               `-IfStmt 0x11c945d40 <col:8, line:67:2> has_else
|   |                                                 |-UnaryOperator 0x11c945998 <line:59:11, col:29> 'int' prefix '!' cannot overflow
|   |                                                 | `-CallExpr 0x11c945920 <col:12, col:29> 'int'
|   |                                                 |   |-ImplicitCastExpr 0x11c945908 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |                                                 |   | `-DeclRefExpr 0x11c945878 <col:12> 'int (const char *, const char *)' Function 0x11c942500 'strcmp' 'int (const char *, const char *)'
|   |                                                 |   |-ImplicitCastExpr 0x11c945950 <col:19> 'const char *' <LValueToRValue>
|   |                                                 |   | `-DeclRefExpr 0x11c945898 <col:19> 'const char *' lvalue Var 0x11c928ac0 'type' 'const char *'
|   |                                                 |   `-ImplicitCastExpr 0x11c945980 <col:24> 'const char *' <NoOp>
|   |                                                 |     `-ImplicitCastExpr 0x11c945968 <col:24> 'char *' <ArrayToPointerDecay>
|   |                                                 |       `-StringLiteral 0x11c9458b8 <col:24> 'char[4]' lvalue "STR"
|   |                                                 |-CompoundStmt 0x11c9459d0 <col:31, line:61:2>
|   |                                                 `-IfStmt 0x11c945d10 <col:8, line:67:2> has_else
|   |                                                   |-UnaryOperator 0x11c945b00 <line:61:11, col:29> 'int' prefix '!' cannot overflow
|   |                                                   | `-CallExpr 0x11c945a88 <col:12, col:29> 'int'
|   |                                                   |   |-ImplicitCastExpr 0x11c945a70 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |                                                   |   | `-DeclRefExpr 0x11c9459e0 <col:12> 'int (const char *, const char *)' Function 0x11c942500 'strcmp' 'int (const char *, const char *)'
|   |                                                   |   |-ImplicitCastExpr 0x11c945ab8 <col:19> 'const char *' <LValueToRValue>
|   |                                                   |   | `-DeclRefExpr 0x11c945a00 <col:19> 'const char *' lvalue Var 0x11c928ac0 'type' 'const char *'
|   |                                                   |   `-ImplicitCastExpr 0x11c945ae8 <col:24> 'const char *' <NoOp>
|   |                                                   |     `-ImplicitCastExpr 0x11c945ad0 <col:24> 'char *' <ArrayToPointerDecay>
|   |                                                   |       `-StringLiteral 0x11c945a20 <col:24> 'char[4]' lvalue "STR"
|   |                                                   |-CompoundStmt 0x11c945b38 <col:31, line:63:2>
|   |                                                   `-IfStmt 0x11c945ce0 <col:8, line:67:2> has_else
|   |                                                     |-UnaryOperator 0x11c945c68 <line:63:11, col:29> 'int' prefix '!' cannot overflow
|   |                                                     | `-CallExpr 0x11c945bf0 <col:12, col:29> 'int'
|   |                                                     |   |-ImplicitCastExpr 0x11c945bd8 <col:12> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |                                                     |   | `-DeclRefExpr 0x11c945b48 <col:12> 'int (const char *, const char *)' Function 0x11c942500 'strcmp' 'int (const char *, const char *)'
|   |                                                     |   |-ImplicitCastExpr 0x11c945c20 <col:19> 'const char *' <LValueToRValue>
|   |                                                     |   | `-DeclRefExpr 0x11c945b68 <col:19> 'const char *' lvalue Var 0x11c928ac0 'type' 'const char *'
|   |                                                     |   `-ImplicitCastExpr 0x11c945c50 <col:24> 'const char *' <NoOp>
|   |                                                     |     `-ImplicitCastExpr 0x11c945c38 <col:24> 'char *' <ArrayToPointerDecay>
|   |                                                     |       `-StringLiteral 0x11c945b88 <col:24> 'char[4]' lvalue "STR"
|   |                                                     |-CompoundStmt 0x11c945ca0 <col:31, line:65:2>
|   |                                                     `-CompoundStmt 0x11c945cd0 <col:7, line:67:2>
|   |-CallExpr 0x11c946358 <line:68:2, col:26> 'int'
|   | |-ImplicitCastExpr 0x11c946340 <col:2> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x11c9462d0 <col:2> 'int ()' Function 0x11c946218 'openmpt_free_string' 'int ()'
|   | `-ImplicitCastExpr 0x11c946380 <col:22> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x11c9462f0 <col:22> 'const char *' lvalue Var 0x11c928ac0 'type' 'const char *'
|   `-ReturnStmt 0x11c9463d0 <line:69:2, col:9>
|     `-ImplicitCastExpr 0x11c9463b8 <col:9> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x11c946398 <col:9> 'int' lvalue Var 0x11c928b58 'retval' 'int'
`-FunctionDecl 0x11c942500 <line:11:6> col:6 implicit used strcmp 'int (const char *, const char *)' extern
  |-ParmVarDecl 0x11c942600 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x11c942668 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x11c9425a8 <<invalid sloc>> Implicit 887
