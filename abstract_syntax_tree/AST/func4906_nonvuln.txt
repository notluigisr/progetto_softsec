TranslationUnitDecl 0x12c855008 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x12c855eb8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x12c8555d0 '__int128'
|-TypedefDecl 0x12c855f28 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x12c8555f0 'unsigned __int128'
|-TypedefDecl 0x12c925c30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12c925a00 'struct __NSConstantString_tag'
|   `-Record 0x12c855f80 '__NSConstantString_tag'
|-TypedefDecl 0x12c925c98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x12c855790 '__SVInt8_t'
|-TypedefDecl 0x12c925d00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x12c8557b0 '__SVInt16_t'
|-TypedefDecl 0x12c925d68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x12c8557d0 '__SVInt32_t'
|-TypedefDecl 0x12c925dd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x12c8557f0 '__SVInt64_t'
|-TypedefDecl 0x12c925e38 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x12c855810 '__SVUint8_t'
|-TypedefDecl 0x12c925ea0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x12c855830 '__SVUint16_t'
|-TypedefDecl 0x12c925f08 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x12c855850 '__SVUint32_t'
|-TypedefDecl 0x12c925f70 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x12c855870 '__SVUint64_t'
|-TypedefDecl 0x12c925fd8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x12c855890 '__SVFloat16_t'
|-TypedefDecl 0x12c926040 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x12c8558b0 '__SVFloat32_t'
|-TypedefDecl 0x12c9260a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x12c8558d0 '__SVFloat64_t'
|-TypedefDecl 0x12c926110 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x12c8558f0 '__SVBfloat16_t'
|-TypedefDecl 0x12c926178 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x12c855910 '__clang_svint8x2_t'
|-TypedefDecl 0x12c9261e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x12c855930 '__clang_svint16x2_t'
|-TypedefDecl 0x12c926248 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x12c855950 '__clang_svint32x2_t'
|-TypedefDecl 0x12c9262b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x12c855970 '__clang_svint64x2_t'
|-TypedefDecl 0x12c926318 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x12c855990 '__clang_svuint8x2_t'
|-TypedefDecl 0x12c926380 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x12c8559b0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12c9263e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x12c8559d0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12c926450 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x12c8559f0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12c9264b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x12c855a10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12c926520 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x12c855a30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12c926588 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x12c855a50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12c9265f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x12c855a70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12c926658 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x12c855a90 '__clang_svint8x3_t'
|-TypedefDecl 0x12c9266c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x12c855ab0 '__clang_svint16x3_t'
|-TypedefDecl 0x12c926728 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x12c855ad0 '__clang_svint32x3_t'
|-TypedefDecl 0x12c926790 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x12c855af0 '__clang_svint64x3_t'
|-TypedefDecl 0x12c9267f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x12c855b10 '__clang_svuint8x3_t'
|-TypedefDecl 0x12c926860 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x12c855b30 '__clang_svuint16x3_t'
|-TypedefDecl 0x12c9268c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x12c855b50 '__clang_svuint32x3_t'
|-TypedefDecl 0x12c926930 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x12c855b70 '__clang_svuint64x3_t'
|-TypedefDecl 0x12c926998 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x12c855b90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12c927200 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x12c855bb0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12c927268 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x12c855bd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12c9272d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x12c855bf0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12c927338 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x12c855c10 '__clang_svint8x4_t'
|-TypedefDecl 0x12c9273a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x12c855c30 '__clang_svint16x4_t'
|-TypedefDecl 0x12c927408 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x12c855c50 '__clang_svint32x4_t'
|-TypedefDecl 0x12c927470 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x12c855c70 '__clang_svint64x4_t'
|-TypedefDecl 0x12c9274d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x12c855c90 '__clang_svuint8x4_t'
|-TypedefDecl 0x12c927540 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x12c855cb0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12c9275a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x12c855cd0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12c927610 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x12c855cf0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12c927678 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x12c855d10 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12c9276e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x12c855d30 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12c927748 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x12c855d50 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12c9277b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x12c855d70 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12c927818 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x12c855d90 '__SVBool_t'
|-TypedefDecl 0x12c927880 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x12c855db0 '__clang_svboolx2_t'
|-TypedefDecl 0x12c9278e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x12c855dd0 '__clang_svboolx4_t'
|-TypedefDecl 0x12c927950 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x12c855df0 '__SVCount_t'
|-TypedefDecl 0x12c9279f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12c9279b0 'char *'
|   `-BuiltinType 0x12c8550b0 'char'
|-TypedefDecl 0x12c927a68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12c9279b0 'char *'
|   `-BuiltinType 0x12c8550b0 'char'
|-FunctionDecl 0x12c927d18 <dataset_diviso_filec/func4906_nonvuln.c:1:1, line:45:1> line:1:1 invalid pqGetline3 'int (int *, char *, int)'
| |-ParmVarDecl 0x12c927b28 <col:12, col:20> col:20 invalid conn 'int *'
| |-ParmVarDecl 0x12c927ba8 <col:26, col:32> col:32 used s 'char *'
| |-ParmVarDecl 0x12c927c28 <col:35, col:39> col:39 used maxlen 'int'
| `-CompoundStmt 0x12e009ce8 <line:2:1, line:45:1>
|   |-DeclStmt 0x12c927e58 <line:3:2, col:14>
|   | `-VarDecl 0x12c927df0 <col:2, col:8> col:8 used status 'int'
|   |-IfStmt 0x12c941688 <line:5:2, line:14:2>
|   | |-RecoveryExpr 0x12c9280e0 <line:5:6, line:8:9> '_Bool' contains-errors
|   | `-CompoundStmt 0x12c941660 <line:9:2, line:14:2>
|   |   |-CallExpr 0x12c941548 <line:10:3, line:11:28> '<dependent type>' contains-errors
|   |   | |-DeclRefExpr 0x12c9412b8 <line:10:3> 'int ()' Function 0x12c941200 'printfPQExpBuffer' 'int ()'
|   |   | |-UnaryOperator 0x12c941340 <col:21, col:28> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   | | `-CXXDependentScopeMemberExpr 0x12c9412f8 <col:22, col:28> '<dependent type>' contains-errors lvalue ->errorMessage
|   |   | |   `-RecoveryExpr 0x12c9412d8 <col:22> '<dependent type>' contains-errors lvalue
|   |   | `-CallExpr 0x12c941508 <line:11:8, col:27> 'int'
|   |   |   |-ImplicitCastExpr 0x12c9414f0 <col:8> 'int (*)()' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x12c941438 <col:8> 'int ()' Function 0x12c941380 'libpq_gettext' 'int ()'
|   |   |   `-ImplicitCastExpr 0x12c941530 <col:22> 'char *' <ArrayToPointerDecay>
|   |   |     `-StringLiteral 0x12c9414a0 <col:22> 'char[4]' lvalue "STR"
|   |   |-BinaryOperator 0x12c9415f8 <line:12:3, col:8> 'char' '='
|   |   | |-UnaryOperator 0x12c9415b0 <col:3, col:4> 'char' lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x12c941598 <col:4> 'char *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x12c941578 <col:4> 'char *' lvalue ParmVar 0x12c927ba8 's' 'char *'
|   |   | `-ImplicitCastExpr 0x12c9415e0 <col:8> 'char' <IntegralCast>
|   |   |   `-CharacterLiteral 0x12c9415c8 <col:8> 'int' 0
|   |   `-ReturnStmt 0x12c941650 <line:13:3, col:10>
|   |     `-RecoveryExpr 0x12c941630 <col:10> '<dependent type>' contains-errors lvalue
|   |-WhileStmt 0x12c941e40 <line:16:2, line:25:2>
|   | |-BinaryOperator 0x12c941918 <line:16:9, col:59> 'int' contains-errors '=='
|   | | |-ParenExpr 0x12c9418d8 <col:9, col:54> 'int' contains-errors
|   | | | `-BinaryOperator 0x12c9418b8 <col:10, col:53> 'int' contains-errors '='
|   | | |   |-DeclRefExpr 0x12c9416a8 <col:10> 'int' lvalue Var 0x12c927df0 'status' 'int'
|   | | |   `-CallExpr 0x12c941880 <col:19, col:53> '<dependent type>' contains-errors
|   | | |     |-DeclRefExpr 0x12c9417a8 <col:19> 'int ()' Function 0x12c9416f0 'PQgetlineAsync' 'int ()'
|   | | |     |-RecoveryExpr 0x12c9417c8 <col:34> '<dependent type>' contains-errors lvalue
|   | | |     |-DeclRefExpr 0x12c9417e8 <col:40> 'char *' lvalue ParmVar 0x12c927ba8 's' 'char *'
|   | | |     `-BinaryOperator 0x12c941860 <col:43, col:52> 'int' '-'
|   | | |       |-ImplicitCastExpr 0x12c941848 <col:43> 'int' <LValueToRValue>
|   | | |       | `-DeclRefExpr 0x12c941808 <col:43> 'int' lvalue ParmVar 0x12c927c28 'maxlen' 'int'
|   | | |       `-IntegerLiteral 0x12c941828 <col:52> 'int' 1
|   | | `-IntegerLiteral 0x12c9418f8 <col:59> 'int' 0
|   | `-CompoundStmt 0x12c941e28 <line:17:2, line:25:2>
|   |   `-IfStmt 0x12c941e08 <line:19:3, line:24:3>
|   |     |-BinaryOperator 0x12c941ce0 <line:19:7, line:20:23> 'int' contains-errors '||'
|   |     | |-CallExpr 0x12c941ca8 <line:19:7, col:31> '<dependent type>' contains-errors
|   |     | | |-DeclRefExpr 0x12c941a18 <col:7> 'int ()' Function 0x12c941960 'pqWait' 'int ()'
|   |     | | |-RecoveryExpr 0x12c941c68 <col:14> '<dependent type>' contains-errors lvalue
|   |     | | |-RecoveryExpr 0x12c941c88 <col:20> '<dependent type>' contains-errors lvalue
|   |     | | `-RecoveryExpr 0x12c941a68 <col:27> '<dependent type>' contains-errors lvalue
|   |     | `-BinaryOperator 0x12c941c28 <line:20:4, col:23> 'int' contains-errors '<'
|   |     |   |-CallExpr 0x12c941be0 <col:4, col:19> '<dependent type>' contains-errors
|   |     |   | |-DeclRefExpr 0x12c941ba0 <col:4> 'int ()' Function 0x12c941ae8 'pqReadData' 'int ()'
|   |     |   | `-RecoveryExpr 0x12c941bc0 <col:15> '<dependent type>' contains-errors lvalue
|   |     |   `-IntegerLiteral 0x12c941c08 <col:23> 'int' 0
|   |     `-CompoundStmt 0x12c941de8 <line:21:3, line:24:3>
|   |       |-BinaryOperator 0x12c941d80 <line:22:4, col:9> 'char' '='
|   |       | |-UnaryOperator 0x12c941d38 <col:4, col:5> 'char' lvalue prefix '*' cannot overflow
|   |       | | `-ImplicitCastExpr 0x12c941d20 <col:5> 'char *' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x12c941d00 <col:5> 'char *' lvalue ParmVar 0x12c927ba8 's' 'char *'
|   |       | `-ImplicitCastExpr 0x12c941d68 <col:9> 'char' <IntegralCast>
|   |       |   `-CharacterLiteral 0x12c941d50 <col:9> 'int' 0
|   |       `-ReturnStmt 0x12c941dd8 <line:23:4, col:11>
|   |         `-RecoveryExpr 0x12c941db8 <col:11> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x12e0098c0 <line:27:2, line:32:2>
|   | |-BinaryOperator 0x12c941eb8 <line:27:6, col:15> 'int' '<'
|   | | |-ImplicitCastExpr 0x12c941ea0 <col:6> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x12c941e60 <col:6> 'int' lvalue Var 0x12c927df0 'status' 'int'
|   | | `-IntegerLiteral 0x12c941e80 <col:15> 'int' 0
|   | `-CompoundStmt 0x12e0098a0 <line:28:2, line:32:2>
|   |   |-CallExpr 0x12e0097f8 <line:30:3, col:18> 'char *'
|   |   | |-ImplicitCastExpr 0x12e0097e0 <col:3> 'char *(*)(char *, const char *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x12e009720 <col:3> 'char *(char *, const char *)' Function 0x12e009540 'strcpy' 'char *(char *, const char *)'
|   |   | |-ImplicitCastExpr 0x12e009828 <col:10> 'char *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x12e009740 <col:10> 'char *' lvalue ParmVar 0x12c927ba8 's' 'char *'
|   |   | `-ImplicitCastExpr 0x12e009858 <col:13> 'const char *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x12e009840 <col:13> 'char *' <ArrayToPointerDecay>
|   |   |     `-StringLiteral 0x12e009760 <col:13> 'char[4]' lvalue "STR"
|   |   `-ReturnStmt 0x12e009890 <line:31:3, col:10>
|   |     `-IntegerLiteral 0x12e009870 <col:10> 'int' 0
|   `-IfStmt 0x12e009cb8 <line:35:2, line:44:2> has_else
|     |-BinaryOperator 0x12e0099f8 <line:35:6, col:23> 'int' '=='
|     | |-ImplicitCastExpr 0x12e0099e0 <col:6, col:18> 'int' <IntegralCast>
|     | | `-ImplicitCastExpr 0x12e0099c8 <col:6, col:18> 'char' <LValueToRValue>
|     | |   `-ArraySubscriptExpr 0x12e009990 <col:6, col:18> 'char' lvalue
|     | |     |-ImplicitCastExpr 0x12e009978 <col:6> 'char *' <LValueToRValue>
|     | |     | `-DeclRefExpr 0x12e0098e0 <col:6> 'char *' lvalue ParmVar 0x12c927ba8 's' 'char *'
|     | |     `-BinaryOperator 0x12e009958 <col:8, col:17> 'int' '-'
|     | |       |-ImplicitCastExpr 0x12e009940 <col:8> 'int' <LValueToRValue>
|     | |       | `-DeclRefExpr 0x12e009900 <col:8> 'int' lvalue Var 0x12c927df0 'status' 'int'
|     | |       `-IntegerLiteral 0x12e009920 <col:17> 'int' 1
|     | `-CharacterLiteral 0x12e0099b0 <col:23> 'int' 10
|     |-CompoundStmt 0x12e009b68 <line:36:2, line:39:2>
|     | |-BinaryOperator 0x12e009b18 <line:37:3, col:19> 'char' '='
|     | | |-ArraySubscriptExpr 0x12e009ac8 <col:3, col:15> 'char' lvalue
|     | | | |-ImplicitCastExpr 0x12e009ab0 <col:3> 'char *' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x12e009a18 <col:3> 'char *' lvalue ParmVar 0x12c927ba8 's' 'char *'
|     | | | `-BinaryOperator 0x12e009a90 <col:5, col:14> 'int' '-'
|     | | |   |-ImplicitCastExpr 0x12e009a78 <col:5> 'int' <LValueToRValue>
|     | | |   | `-DeclRefExpr 0x12e009a38 <col:5> 'int' lvalue Var 0x12c927df0 'status' 'int'
|     | | |   `-IntegerLiteral 0x12e009a58 <col:14> 'int' 1
|     | | `-ImplicitCastExpr 0x12e009b00 <col:19> 'char' <IntegralCast>
|     | |   `-CharacterLiteral 0x12e009ae8 <col:19> 'int' 0
|     | `-ReturnStmt 0x12e009b58 <line:38:3, col:10>
|     |   `-IntegerLiteral 0x12e009b38 <col:10> 'int' 0
|     `-CompoundStmt 0x12e009c98 <line:41:2, line:44:2>
|       |-BinaryOperator 0x12e009c48 <line:42:3, col:15> 'char' '='
|       | |-ArraySubscriptExpr 0x12e009bf8 <col:3, col:11> 'char' lvalue
|       | | |-ImplicitCastExpr 0x12e009bc8 <col:3> 'char *' <LValueToRValue>
|       | | | `-DeclRefExpr 0x12e009b88 <col:3> 'char *' lvalue ParmVar 0x12c927ba8 's' 'char *'
|       | | `-ImplicitCastExpr 0x12e009be0 <col:5> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x12e009ba8 <col:5> 'int' lvalue Var 0x12c927df0 'status' 'int'
|       | `-ImplicitCastExpr 0x12e009c30 <col:15> 'char' <IntegralCast>
|       |   `-CharacterLiteral 0x12e009c18 <col:15> 'int' 0
|       `-ReturnStmt 0x12e009c88 <line:43:3, col:10>
|         `-IntegerLiteral 0x12e009c68 <col:10> 'int' 1
`-FunctionDecl 0x12e009540 <line:30:3> col:3 implicit used strcpy 'char *(char *, const char *)' extern
  |-ParmVarDecl 0x12e009640 <<invalid sloc>> <invalid sloc> 'char *'
  |-ParmVarDecl 0x12e0096a8 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x12e0095e8 <<invalid sloc>> Implicit 885
