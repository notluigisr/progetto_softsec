TranslationUnitDecl 0x148855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1488564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x148855bd0 '__int128'
|-TypedefDecl 0x148856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x148855bf0 'unsigned __int128'
|-TypedefDecl 0x148926230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x148926000 'struct __NSConstantString_tag'
|   `-Record 0x148856580 '__NSConstantString_tag'
|-TypedefDecl 0x148926298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x148855d90 '__SVInt8_t'
|-TypedefDecl 0x148926300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x148855db0 '__SVInt16_t'
|-TypedefDecl 0x148926368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x148855dd0 '__SVInt32_t'
|-TypedefDecl 0x1489263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x148855df0 '__SVInt64_t'
|-TypedefDecl 0x148926438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x148855e10 '__SVUint8_t'
|-TypedefDecl 0x1489264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x148855e30 '__SVUint16_t'
|-TypedefDecl 0x148926508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x148855e50 '__SVUint32_t'
|-TypedefDecl 0x148926570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x148855e70 '__SVUint64_t'
|-TypedefDecl 0x1489265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x148855e90 '__SVFloat16_t'
|-TypedefDecl 0x148926640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x148855eb0 '__SVFloat32_t'
|-TypedefDecl 0x1489266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x148855ed0 '__SVFloat64_t'
|-TypedefDecl 0x148926710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x148855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x148926778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x148855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1489267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x148855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x148926848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x148855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1489268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x148855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x148926918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x148855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x148926980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x148855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1489269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x148855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x148926a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x148855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x148926ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x148856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x148926b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x148856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x148926b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x148856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x148926bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x148856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x148926c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x148856090 '__clang_svint8x3_t'
|-TypedefDecl 0x148926cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1488560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x148926d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1488560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x148926d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1488560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x148926df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x148856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x148926e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x148856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x148926ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x148856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x148926f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x148856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x148926f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x148856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x148927800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1488561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x148927868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1488561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1489278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1488561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x148927938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x148856210 '__clang_svint8x4_t'
|-TypedefDecl 0x1489279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x148856230 '__clang_svint16x4_t'
|-TypedefDecl 0x148927a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x148856250 '__clang_svint32x4_t'
|-TypedefDecl 0x148927a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x148856270 '__clang_svint64x4_t'
|-TypedefDecl 0x148927ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x148856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x148927b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1488562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x148927ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1488562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x148927c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1488562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x148927c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x148856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x148927ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x148856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x148927d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x148856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x148927db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x148856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x148927e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x148856390 '__SVBool_t'
|-TypedefDecl 0x148927e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1488563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x148927ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1488563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x148927f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1488563f0 '__SVCount_t'
|-TypedefDecl 0x148927ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x148927fb0 'char *'
|   `-BuiltinType 0x1488556b0 'char'
|-TypedefDecl 0x148928068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x148927fb0 'char *'
|   `-BuiltinType 0x1488556b0 'char'
|-FunctionDecl 0x148928558 <dataset_diviso_filec/func21952_vuln.c:1:1, line:42:1> line:1:1 invalid xps_begin_opacity 'int (int *, const int *, const int *, char *, int *, char *, int *)'
| |-ParmVarDecl 0x148928128 <col:19, col:33> col:33 referenced invalid doc 'int *'
| |-ParmVarDecl 0x1489281a8 <col:38, col:55> col:55 invalid ctm 'const int *'
| |-ParmVarDecl 0x148928228 <col:60, col:75> col:75 invalid area 'const int *'
| |-ParmVarDecl 0x1489282a8 <line:2:2, col:8> col:8 used base_uri 'char *'
| |-ParmVarDecl 0x148928328 <col:18, col:32> col:32 invalid dict 'int *'
| |-ParmVarDecl 0x1489283a8 <line:3:2, col:8> col:8 used opacity_att 'char *'
| |-ParmVarDecl 0x148928428 <col:21, col:29> col:29 referenced invalid opacity_mask_tag 'int *'
| `-CompoundStmt 0x149008630 <line:4:1, line:42:1>
|   |-DeclStmt 0x1489286b8 <line:5:2, col:15>
|   | `-VarDecl 0x148928650 <col:2, col:8> col:8 used opacity 'float'
|   |-IfStmt 0x1489287a0 <line:7:2, line:8:3>
|   | |-BinaryOperator 0x148928770 <line:7:6, col:23> 'int' contains-errors '&&'
|   | | |-UnaryOperator 0x148928708 <col:6, col:7> 'int' prefix '!' cannot overflow
|   | | | `-ImplicitCastExpr 0x1489286f0 <col:7> 'char *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1489286d0 <col:7> 'char *' lvalue ParmVar 0x1489283a8 'opacity_att' 'char *'
|   | | `-UnaryOperator 0x148928758 <col:22, col:23> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | |   `-ImplicitCastExpr 0x148928740 <col:23> '<dependent type>' contains-errors <LValueToRValue>
|   | |     `-RecoveryExpr 0x148928720 <col:23> '<dependent type>' contains-errors lvalue
|   | `-ReturnStmt 0x148928790 <line:8:3>
|   |-BinaryOperator 0x148941818 <line:10:2, col:12> 'float' '='
|   | |-DeclRefExpr 0x1489287c0 <col:2> 'float' lvalue Var 0x148928650 'opacity' 'float'
|   | `-ImplicitCastExpr 0x148941800 <col:12> 'float' <IntegralToFloating>
|   |   `-IntegerLiteral 0x1489287e0 <col:12> 'int' 1
|   |-IfStmt 0x148941af0 <line:11:2, line:12:32>
|   | |-ImplicitCastExpr 0x148941858 <line:11:6> 'char *' <LValueToRValue>
|   | | `-DeclRefExpr 0x148941838 <col:6> 'char *' lvalue ParmVar 0x1489283a8 'opacity_att' 'char *'
|   | `-BinaryOperator 0x148941ad0 <line:12:3, col:32> 'float' '='
|   |   |-DeclRefExpr 0x148941870 <col:3> 'float' lvalue Var 0x148928650 'opacity' 'float'
|   |   `-ImplicitCastExpr 0x148941ab8 <col:13, col:32> 'float' <IntegralToFloating>
|   |     `-CallExpr 0x148941a78 <col:13, col:32> 'int'
|   |       |-ImplicitCastExpr 0x148941a60 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x1489419f0 <col:13> 'int ()' Function 0x148941938 'fz_atof' 'int ()'
|   |       `-ImplicitCastExpr 0x148941aa0 <col:21> 'char *' <LValueToRValue>
|   |         `-DeclRefExpr 0x148941a10 <col:21> 'char *' lvalue ParmVar 0x1489283a8 'opacity_att' 'char *'
|   |-IfStmt 0x148943d18 <line:14:2, line:28:2>
|   | |-BinaryOperator 0x1489423a0 <line:14:6, col:69> 'int' contains-errors '&&'
|   | | |-RecoveryExpr 0x148941b10 <col:6> '<dependent type>' contains-errors lvalue
|   | | `-UnaryOperator 0x148942388 <col:26, col:69> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | |   `-CallExpr 0x148942358 <col:27, col:69> '<dependent type>' contains-errors
|   | |     |-DeclRefExpr 0x148942170 <col:27> 'int (const char *, const char *)' Function 0x148941f90 'strcmp' 'int (const char *, const char *)'
|   | |     |-CallExpr 0x1489422b0 <col:34, col:61> '<dependent type>' contains-errors
|   | |     | |-DeclRefExpr 0x148942270 <col:34> 'int ()' Function 0x1489421b8 'fz_xml_tag' 'int ()'
|   | |     | `-RecoveryExpr 0x148942290 <col:45> '<dependent type>' contains-errors lvalue
|   | |     `-StringLiteral 0x148942320 <col:64> 'char[4]' lvalue "STR"
|   | `-CompoundStmt 0x148943ce0 <line:15:2, line:28:2>
|   |   |-DeclStmt 0x1489425b0 <line:16:3, col:62>
|   |   | `-VarDecl 0x1489423d8 <col:3, col:61> col:9 used scb_opacity_att 'char *' cinit
|   |   |   `-CallExpr 0x148942580 <col:27, col:61> '<dependent type>' contains-errors
|   |   |     |-DeclRefExpr 0x148942520 <col:27> 'int ()' Function 0x148942468 'fz_xml_att' 'int ()'
|   |   |     |-RecoveryExpr 0x148942540 <col:38> '<dependent type>' contains-errors lvalue
|   |   |     `-StringLiteral 0x148942560 <col:56> 'char[4]' lvalue "STR"
|   |   |-DeclStmt 0x1489426d8 <line:17:3, col:60>
|   |   | `-VarDecl 0x1489425e0 <col:3, col:59> col:9 used scb_color_att 'char *' cinit
|   |   |   `-CallExpr 0x1489426a8 <col:25, col:59> '<dependent type>' contains-errors
|   |   |     |-DeclRefExpr 0x148942648 <col:25> 'int ()' Function 0x148942468 'fz_xml_att' 'int ()'
|   |   |     |-RecoveryExpr 0x148942668 <col:36> '<dependent type>' contains-errors lvalue
|   |   |     `-StringLiteral 0x148942688 <col:54> 'char[4]' lvalue "STR"
|   |   |-IfStmt 0x148943670 <line:18:3, line:19:47>
|   |   | |-ImplicitCastExpr 0x148942710 <line:18:7> 'char *' contains-errors <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1489426f0 <col:7> 'char *' contains-errors lvalue Var 0x1489423d8 'scb_opacity_att' 'char *'
|   |   | `-BinaryOperator 0x148943650 <line:19:4, col:47> 'float' contains-errors '='
|   |   |   |-DeclRefExpr 0x148942728 <col:4> 'float' lvalue Var 0x148928650 'opacity' 'float'
|   |   |   `-BinaryOperator 0x148943630 <col:14, col:47> 'float' contains-errors '*'
|   |   |     |-ImplicitCastExpr 0x148943600 <col:14> 'float' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x148942748 <col:14> 'float' lvalue Var 0x148928650 'opacity' 'float'
|   |   |     `-ImplicitCastExpr 0x148943618 <col:24, col:47> 'float' contains-errors <IntegralToFloating>
|   |   |       `-CallExpr 0x1489427c0 <col:24, col:47> 'int' contains-errors
|   |   |         |-ImplicitCastExpr 0x1489427a8 <col:24> 'int (*)()' <FunctionToPointerDecay>
|   |   |         | `-DeclRefExpr 0x148942768 <col:24> 'int ()' Function 0x148941938 'fz_atof' 'int ()'
|   |   |         `-ImplicitCastExpr 0x1489427e8 <col:32> 'char *' contains-errors <LValueToRValue>
|   |   |           `-DeclRefExpr 0x148942788 <col:32> 'char *' contains-errors lvalue Var 0x1489423d8 'scb_opacity_att' 'char *'
|   |   |-IfStmt 0x148943c00 <line:20:3, line:26:3>
|   |   | |-ImplicitCastExpr 0x1489436b0 <line:20:7> 'char *' contains-errors <LValueToRValue>
|   |   | | `-DeclRefExpr 0x148943690 <col:7> 'char *' contains-errors lvalue Var 0x1489425e0 'scb_color_att' 'char *'
|   |   | `-CompoundStmt 0x148943bd8 <line:21:3, line:26:3>
|   |   |   |-DeclStmt 0x1489437f0 <line:23:4, col:21>
|   |   |   | `-VarDecl 0x148943788 <col:4, col:20> col:10 used samples 'float[32]'
|   |   |   |-CallExpr 0x148943a38 <line:24:4, col:70> '<dependent type>' contains-errors
|   |   |   | |-DeclRefExpr 0x1489438e8 <col:4> 'int ()' Function 0x148943830 'xps_parse_color' 'int ()'
|   |   |   | |-RecoveryExpr 0x148943908 <col:20> '<dependent type>' contains-errors lvalue
|   |   |   | |-DeclRefExpr 0x148943928 <col:25> 'char *' lvalue ParmVar 0x1489282a8 'base_uri' 'char *'
|   |   |   | |-DeclRefExpr 0x148943948 <col:35> 'char *' contains-errors lvalue Var 0x1489425e0 'scb_color_att' 'char *'
|   |   |   | |-UnaryOperator 0x148943a20 <col:50, col:51> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   |   | | `-RecoveryExpr 0x148943a00 <col:51> '<dependent type>' contains-errors lvalue
|   |   |   | `-DeclRefExpr 0x148943998 <col:63> 'float[32]' lvalue Var 0x148943788 'samples' 'float[32]'
|   |   |   `-BinaryOperator 0x148943bb8 <line:25:4, col:33> 'float' '='
|   |   |     |-DeclRefExpr 0x148943a80 <col:4> 'float' lvalue Var 0x148928650 'opacity' 'float'
|   |   |     `-BinaryOperator 0x148943b98 <col:14, col:33> 'float' '*'
|   |   |       |-ImplicitCastExpr 0x148943b68 <col:14> 'float' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x148943aa0 <col:14> 'float' lvalue Var 0x148928650 'opacity' 'float'
|   |   |       `-ImplicitCastExpr 0x148943b80 <col:24, col:33> 'float' <LValueToRValue>
|   |   |         `-ArraySubscriptExpr 0x148943b48 <col:24, col:33> 'float' lvalue
|   |   |           |-ImplicitCastExpr 0x148943b30 <col:24> 'float *' <ArrayToPointerDecay>
|   |   |           | `-DeclRefExpr 0x148943ac0 <col:24> 'float[32]' lvalue Var 0x148943788 'samples' 'float[32]'
|   |   |           `-IntegerLiteral 0x148943ae0 <col:32> 'int' 0
|   |   `-BinaryOperator 0x148943cc0 <line:27:3, col:22> '<dependent type>' contains-errors '='
|   |     |-RecoveryExpr 0x148943c40 <col:3> '<dependent type>' contains-errors lvalue
|   |     | `-DeclRefExpr 0x148943c20 <col:3> 'int *' lvalue ParmVar 0x148928428 'opacity_mask_tag' 'int *'
|   |     `-RecoveryExpr 0x148943ca0 <col:22> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x148944348 <line:30:2, line:34:2>
|   | |-BinaryOperator 0x148943f70 <line:30:6, col:47> 'int' contains-errors '<'
|   | | |-BinaryOperator 0x148943dc0 <col:6, col:25> '<dependent type>' contains-errors '+'
|   | | | |-CXXDependentScopeMemberExpr 0x148943d58 <col:6, col:11> '<dependent type>' contains-errors lvalue ->opacity_top
|   | | | | `-RecoveryExpr 0x148943d38 <col:6> '<dependent type>' contains-errors lvalue
|   | | | `-IntegerLiteral 0x148943da0 <col:25> 'int' 1
|   | | `-CallExpr 0x148943f48 <col:29, col:47> '<dependent type>' contains-errors
|   | |   |-DeclRefExpr 0x148943ec0 <col:29> 'int ()' Function 0x148943e08 'nelem' 'int ()'
|   | |   `-CXXDependentScopeMemberExpr 0x148943f00 <col:35, col:40> '<dependent type>' contains-errors lvalue ->opacity
|   | |     `-RecoveryExpr 0x148943ee0 <col:35> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x148944328 <line:31:2, line:34:2>
|   |   |-BinaryOperator 0x148944260 <line:32:3, col:73> '<dependent type>' contains-errors '='
|   |   | |-ArraySubscriptExpr 0x1489440e0 <col:3, col:36> '<dependent type>' contains-errors lvalue
|   |   | | |-ImplicitCastExpr 0x1489440c8 <col:3, col:8> '<dependent type>' contains-errors <LValueToRValue>
|   |   | | | `-CXXDependentScopeMemberExpr 0x148943fd8 <col:3, col:8> '<dependent type>' contains-errors lvalue ->opacity
|   |   | | |   `-RecoveryExpr 0x148943fb0 <col:3> '<dependent type>' contains-errors lvalue
|   |   | | |     `-DeclRefExpr 0x148943f90 <col:3> 'int *' lvalue ParmVar 0x148928128 'doc' 'int *'
|   |   | | `-BinaryOperator 0x1489440a8 <col:16, col:35> '<dependent type>' contains-errors '+'
|   |   | |   |-CXXDependentScopeMemberExpr 0x148944040 <col:16, col:21> '<dependent type>' contains-errors lvalue ->opacity_top
|   |   | |   | `-RecoveryExpr 0x148944020 <col:16> '<dependent type>' contains-errors lvalue
|   |   | |   `-IntegerLiteral 0x148944088 <col:35> 'int' 1
|   |   | `-BinaryOperator 0x148944240 <col:40, col:73> '<dependent type>' contains-errors '*'
|   |   |   |-ArraySubscriptExpr 0x148944200 <col:40, col:69> '<dependent type>' contains-errors lvalue
|   |   |   | |-ImplicitCastExpr 0x1489441d0 <col:40, col:45> '<dependent type>' contains-errors <LValueToRValue>
|   |   |   | | `-CXXDependentScopeMemberExpr 0x148944120 <col:40, col:45> '<dependent type>' contains-errors lvalue ->opacity
|   |   |   | |   `-RecoveryExpr 0x148944100 <col:40> '<dependent type>' contains-errors lvalue
|   |   |   | `-ImplicitCastExpr 0x1489441e8 <col:53, col:58> '<dependent type>' contains-errors <LValueToRValue>
|   |   |   |   `-CXXDependentScopeMemberExpr 0x148944188 <col:53, col:58> '<dependent type>' contains-errors lvalue ->opacity_top
|   |   |   |     `-RecoveryExpr 0x148944168 <col:53> '<dependent type>' contains-errors lvalue
|   |   |   `-DeclRefExpr 0x148944220 <col:73> 'float' lvalue Var 0x148928650 'opacity' 'float'
|   |   `-UnaryOperator 0x148944310 <line:33:3, col:19> '<dependent type>' contains-errors postfix '++' cannot overflow
|   |     `-CXXDependentScopeMemberExpr 0x1489442c8 <col:3, col:8> '<dependent type>' contains-errors lvalue ->opacity_top
|   |       `-RecoveryExpr 0x1489442a0 <col:3> '<dependent type>' contains-errors lvalue
|   |         `-DeclRefExpr 0x148944280 <col:3> 'int *' lvalue ParmVar 0x148928128 'doc' 'int *'
|   `-IfStmt 0x149008610 <line:36:2, line:41:2>
|     |-RecoveryExpr 0x148944368 <line:36:6> '<dependent type>' contains-errors lvalue
|     `-CompoundStmt 0x1490085e8 <line:37:2, line:41:2>
|       |-CallExpr 0x149008200 <line:38:3, col:46> '<dependent type>' contains-errors
|       | |-DeclRefExpr 0x148944468 <col:3> 'int ()' Function 0x1489443b0 'fz_begin_mask' 'int ()'
|       | |-CXXDependentScopeMemberExpr 0x1489444a8 <col:17, col:22> '<dependent type>' contains-errors lvalue ->dev
|       | | `-RecoveryExpr 0x148944488 <col:17> '<dependent type>' contains-errors lvalue
|       | |-RecoveryExpr 0x1489444f0 <col:27> '<dependent type>' contains-errors lvalue
|       | |-IntegerLiteral 0x148944510 <col:33> 'int' 0
|       | |-RecoveryExpr 0x1489445a8 <col:36> '<dependent type>' contains-errors lvalue
|       | `-RecoveryExpr 0x1489445c8 <col:42> '<dependent type>' contains-errors lvalue
|       |-CallExpr 0x149008408 <line:39:3, col:67> '<dependent type>' contains-errors
|       | |-DeclRefExpr 0x149008328 <col:3> 'int ()' Function 0x149008270 'xps_parse_brush' 'int ()'
|       | |-RecoveryExpr 0x149008348 <col:19> '<dependent type>' contains-errors lvalue
|       | |-RecoveryExpr 0x149008368 <col:24> '<dependent type>' contains-errors lvalue
|       | |-RecoveryExpr 0x149008388 <col:29> '<dependent type>' contains-errors lvalue
|       | |-DeclRefExpr 0x1490083a8 <col:35> 'char *' lvalue ParmVar 0x1489282a8 'base_uri' 'char *'
|       | |-RecoveryExpr 0x1490083c8 <col:45> '<dependent type>' contains-errors lvalue
|       | `-RecoveryExpr 0x1490083e8 <col:51> '<dependent type>' contains-errors lvalue
|       `-CallExpr 0x1490085c0 <line:40:3, col:23> '<dependent type>' contains-errors
|         |-DeclRefExpr 0x149008538 <col:3> 'int ()' Function 0x149008480 'fz_end_mask' 'int ()'
|         `-CXXDependentScopeMemberExpr 0x149008578 <col:15, col:20> '<dependent type>' contains-errors lvalue ->dev
|           `-RecoveryExpr 0x149008558 <col:15> '<dependent type>' contains-errors lvalue
`-FunctionDecl 0x148941f90 <line:14:27> col:27 implicit used strcmp 'int (const char *, const char *)' extern
  |-ParmVarDecl 0x148942090 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x1489420f8 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x148942038 <<invalid sloc>> Implicit 887
