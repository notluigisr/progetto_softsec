TranslationUnitDecl 0x12d855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x12d8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x12d855bd0 '__int128'
|-TypedefDecl 0x12d856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x12d855bf0 'unsigned __int128'
|-TypedefDecl 0x12e00be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12e00bc00 'struct __NSConstantString_tag'
|   `-Record 0x12d856580 '__NSConstantString_tag'
|-TypedefDecl 0x12e00be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x12d855d90 '__SVInt8_t'
|-TypedefDecl 0x12e00bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x12d855db0 '__SVInt16_t'
|-TypedefDecl 0x12e00bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x12d855dd0 '__SVInt32_t'
|-TypedefDecl 0x12e00bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x12d855df0 '__SVInt64_t'
|-TypedefDecl 0x12e00c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x12d855e10 '__SVUint8_t'
|-TypedefDecl 0x12e00c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x12d855e30 '__SVUint16_t'
|-TypedefDecl 0x12e00c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x12d855e50 '__SVUint32_t'
|-TypedefDecl 0x12e00c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x12d855e70 '__SVUint64_t'
|-TypedefDecl 0x12e00c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x12d855e90 '__SVFloat16_t'
|-TypedefDecl 0x12e00c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x12d855eb0 '__SVFloat32_t'
|-TypedefDecl 0x12e00c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x12d855ed0 '__SVFloat64_t'
|-TypedefDecl 0x12e00c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x12d855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12e00c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x12d855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12e00c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x12d855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12e00c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x12d855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12e00c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x12d855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12e00c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x12d855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12e00c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x12d855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12e00c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x12d855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12e00c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x12d855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12e00c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x12d856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12e00c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x12d856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12e00c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x12d856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12e00c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x12d856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12e00c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x12d856090 '__clang_svint8x3_t'
|-TypedefDecl 0x12e00c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x12d8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12e00c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x12d8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12e00c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x12d8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12e00c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x12d856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12e00ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x12d856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12e00cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x12d856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12e00cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x12d856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12e00cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x12d856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12e00d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x12d8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12e00d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x12d8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12e00d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x12d8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12e00d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x12d856210 '__clang_svint8x4_t'
|-TypedefDecl 0x12e00d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x12d856230 '__clang_svint16x4_t'
|-TypedefDecl 0x12e00d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x12d856250 '__clang_svint32x4_t'
|-TypedefDecl 0x12e00d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x12d856270 '__clang_svint64x4_t'
|-TypedefDecl 0x12e00d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x12d856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12e00d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x12d8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12e00d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x12d8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12e00d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x12d8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12e00d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x12d856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12e00d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x12d856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12e00d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x12d856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12e00d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x12d856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12e00da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x12d856390 '__SVBool_t'
|-TypedefDecl 0x12e00da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x12d8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12e00dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x12d8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12e00db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x12d8563f0 '__SVCount_t'
|-TypedefDecl 0x12e00dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12e00dbb0 'char *'
|   `-BuiltinType 0x12d8556b0 'char'
|-TypedefDecl 0x12e00dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12e00dbb0 'char *'
|   `-BuiltinType 0x12d8556b0 'char'
|-FunctionDecl 0x12e00e038 <dataset_diviso_filec/func18729_vuln.c:1:1, line:82:1> line:1:1 invalid check_user_token 'int (const char *, const char *, const char *, int, int *)'
| |-ParmVarDecl 0x12e00dcd8 <col:19, col:31> col:31 used authfile 'const char *'
| |-ParmVarDecl 0x12e00dd58 <line:2:5, col:17> col:17 used username 'const char *'
| |-ParmVarDecl 0x12e00ddd8 <line:3:5, col:17> col:17 used otp_id 'const char *'
| |-ParmVarDecl 0x12e00de58 <line:4:5, col:9> col:9 used verbose 'int'
| |-ParmVarDecl 0x12e00df28 <line:5:19, col:25> col:25 invalid debug_file 'int *'
| `-CompoundStmt 0x12d925e28 <line:6:1, line:82:1>
|   |-DeclStmt 0x12e00e218 <line:7:3, col:17>
|   | `-VarDecl 0x12e00e1b0 <col:3, col:16> col:8 used buf 'char[1024]'
|   |-DeclStmt 0x12e00e348 <line:8:3, col:25>
|   | |-VarDecl 0x12e00e248 <col:3, col:9> col:9 used s_user 'char *'
|   | `-VarDecl 0x12e00e2c8 <col:3, col:18> col:18 used s_token 'char *'
|   |-DeclStmt 0x12d922e20 <line:9:3, col:26>
|   | `-VarDecl 0x12e00e378 <col:3, col:16> col:7 used retval 'int' cinit
|   |   `-RecoveryExpr 0x12d922e00 <col:16> '<dependent type>' contains-errors lvalue
|   |-DeclStmt 0x12d922eb8 <line:10:3, col:9>
|   | `-VarDecl 0x12d922e50 <col:3, col:7> col:7 used fd 'int'
|   |-DeclStmt 0x12d923468 <line:11:3, col:17>
|   | |-RecordDecl 0x12d922ed0 <col:3, col:10> col:10 struct stat
|   | `-VarDecl 0x12d922fc8 <col:3, col:15> col:15 invalid st 'struct stat'
|   |-BinaryOperator 0x12d923738 <line:14:3, col:34> 'int' contains-errors '='
|   | |-DeclRefExpr 0x12d923498 <col:3> 'int' lvalue Var 0x12d922e50 'fd' 'int'
|   | `-CallExpr 0x12d923700 <col:8, col:34> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x12d923610 <col:8> 'int ()' Function 0x12d923558 'open' 'int ()'
|   |   |-DeclRefExpr 0x12d923630 <col:13> 'const char *' lvalue ParmVar 0x12e00dcd8 'authfile' 'const char *'
|   |   |-RecoveryExpr 0x12d9236e0 <col:23> '<dependent type>' contains-errors lvalue
|   |   `-IntegerLiteral 0x12d923668 <col:33> 'int' 0
|   |-IfStmt 0x12d923d38 <line:15:3, line:19:3>
|   | |-BinaryOperator 0x12d9237b0 <line:15:7, col:12> 'int' '<'
|   | | |-ImplicitCastExpr 0x12d923798 <col:7> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x12d923758 <col:7> 'int' lvalue Var 0x12d922e50 'fd' 'int'
|   | | `-IntegerLiteral 0x12d923778 <col:12> 'int' 0
|   | `-CompoundStmt 0x12d923d18 <col:15, line:19:3>
|   |   |-IfStmt 0x12d923cb0 <line:16:7, line:17:51>
|   |   | |-ImplicitCastExpr 0x12d9237f0 <line:16:10> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x12d9237d0 <col:10> 'int' lvalue ParmVar 0x12e00de58 'verbose' 'int'
|   |   | `-CallExpr 0x12d923c70 <line:17:4, col:51> '<dependent type>' contains-errors
|   |   |   |-DeclRefExpr 0x12d9238e8 <col:4> 'int ()' Function 0x12d923830 'D' 'int ()'
|   |   |   |-RecoveryExpr 0x12d923908 <col:7> '<dependent type>' contains-errors lvalue
|   |   |   |-StringLiteral 0x12d923970 <col:19> 'char[4]' lvalue "STR"
|   |   |   |-DeclRefExpr 0x12d923990 <col:26> 'const char *' lvalue ParmVar 0x12e00dcd8 'authfile' 'const char *'
|   |   |   `-CallExpr 0x12d923c48 <col:36, col:50> '<dependent type>' contains-errors
|   |   |     |-DeclRefExpr 0x12d923b58 <col:36> 'char *(int)' Function 0x12d9239e8 'strerror' 'char *(int)'
|   |   |     `-RecoveryExpr 0x12d923c10 <col:45> '<dependent type>' contains-errors lvalue
|   |   `-ReturnStmt 0x12d923d08 <line:18:7, col:14>
|   |     `-ImplicitCastExpr 0x12d923cf0 <col:14> 'int' contains-errors <LValueToRValue>
|   |       `-DeclRefExpr 0x12d923cd0 <col:14> 'int' contains-errors lvalue Var 0x12e00e378 'retval' 'int'
|   |-IfStmt 0x12e0279e8 <line:21:3, line:26:3>
|   | |-BinaryOperator 0x12e027580 <line:21:7, col:24> 'int' contains-errors '<'
|   | | |-CallExpr 0x12e027530 <col:7, col:20> '<dependent type>' contains-errors
|   | | | |-DeclRefExpr 0x12e0274b8 <col:7> 'int ()' Function 0x12e027400 'fstat' 'int ()'
|   | | | |-DeclRefExpr 0x12e0274d8 <col:13> 'int' lvalue Var 0x12d922e50 'fd' 'int'
|   | | | `-UnaryOperator 0x12e027518 <col:17, col:18> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | | |   `-RecoveryExpr 0x12e0274f8 <col:18> '<dependent type>' contains-errors lvalue
|   | | `-IntegerLiteral 0x12e027560 <col:24> 'int' 0
|   | `-CompoundStmt 0x12e0279c0 <col:27, line:26:3>
|   |   |-IfStmt 0x12e0277b0 <line:22:7, line:23:51>
|   |   | |-ImplicitCastExpr 0x12e0275c0 <line:22:10> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x12e0275a0 <col:10> 'int' lvalue ParmVar 0x12e00de58 'verbose' 'int'
|   |   | `-CallExpr 0x12e027770 <line:23:4, col:51> '<dependent type>' contains-errors
|   |   |   |-DeclRefExpr 0x12e0275d8 <col:4> 'int ()' Function 0x12d923830 'D' 'int ()'
|   |   |   |-RecoveryExpr 0x12e0275f8 <col:7> '<dependent type>' contains-errors lvalue
|   |   |   |-StringLiteral 0x12e027618 <col:19> 'char[4]' lvalue "STR"
|   |   |   |-DeclRefExpr 0x12e027638 <col:26> 'const char *' lvalue ParmVar 0x12e00dcd8 'authfile' 'const char *'
|   |   |   `-CallExpr 0x12e027748 <col:36, col:50> '<dependent type>' contains-errors
|   |   |     |-DeclRefExpr 0x12e027658 <col:36> 'char *(int)' Function 0x12d9239e8 'strerror' 'char *(int)'
|   |   |     `-RecoveryExpr 0x12e027710 <col:45> '<dependent type>' contains-errors lvalue
|   |   |-CallExpr 0x12e027938 <line:24:7, col:15> 'int'
|   |   | |-ImplicitCastExpr 0x12e027920 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x12e0278b0 <col:7> 'int ()' Function 0x12e0277f8 'close' 'int ()'
|   |   | `-ImplicitCastExpr 0x12e027960 <col:13> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x12e0278d0 <col:13> 'int' lvalue Var 0x12d922e50 'fd' 'int'
|   |   `-ReturnStmt 0x12e0279b0 <line:25:7, col:14>
|   |     `-ImplicitCastExpr 0x12e027998 <col:14> 'int' contains-errors <LValueToRValue>
|   |       `-DeclRefExpr 0x12e027978 <col:14> 'int' contains-errors lvalue Var 0x12e00e378 'retval' 'int'
|   |-IfStmt 0x12e027dc8 <line:28:3, line:33:3>
|   | |-UnaryOperator 0x12e027b98 <line:28:7, col:26> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | | `-CallExpr 0x12e027b70 <col:8, col:26> '<dependent type>' contains-errors
|   | |   |-DeclRefExpr 0x12e027ae8 <col:8> 'int ()' Function 0x12e027a30 'S_ISREG' 'int ()'
|   | |   `-CXXDependentScopeMemberExpr 0x12e027b28 <col:16, col:19> '<dependent type>' contains-errors lvalue .st_mode
|   | |     `-RecoveryExpr 0x12e027b08 <col:16> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x12e027da0 <col:29, line:33:3>
|   |   |-IfStmt 0x12e027ca0 <line:29:7, line:30:34>
|   |   | |-ImplicitCastExpr 0x12e027bd0 <line:29:10> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x12e027bb0 <col:10> 'int' lvalue ParmVar 0x12e00de58 'verbose' 'int'
|   |   | `-CallExpr 0x12e027c68 <line:30:4, col:34> '<dependent type>' contains-errors
|   |   |   |-DeclRefExpr 0x12e027be8 <col:4> 'int ()' Function 0x12d923830 'D' 'int ()'
|   |   |   |-RecoveryExpr 0x12e027c08 <col:7> '<dependent type>' contains-errors lvalue
|   |   |   |-StringLiteral 0x12e027c28 <col:19> 'char[4]' lvalue "STR"
|   |   |   `-DeclRefExpr 0x12e027c48 <col:26> 'const char *' lvalue ParmVar 0x12e00dcd8 'authfile' 'const char *'
|   |   |-CallExpr 0x12e027d18 <line:31:7, col:15> 'int'
|   |   | |-ImplicitCastExpr 0x12e027d00 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x12e027cc0 <col:7> 'int ()' Function 0x12e0277f8 'close' 'int ()'
|   |   | `-ImplicitCastExpr 0x12e027d40 <col:13> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x12e027ce0 <col:13> 'int' lvalue Var 0x12d922e50 'fd' 'int'
|   |   `-ReturnStmt 0x12e027d90 <line:32:7, col:14>
|   |     `-ImplicitCastExpr 0x12e027d78 <col:14> 'int' contains-errors <LValueToRValue>
|   |       `-DeclRefExpr 0x12e027d58 <col:14> 'int' contains-errors lvalue Var 0x12e00e378 'retval' 'int'
|   |-IfStmt 0x12e028178 <line:36:3, line:41:3>
|   | |-RecoveryExpr 0x12e027fa0 <line:36:7, col:18> '_Bool' contains-errors
|   | `-CompoundStmt 0x12e028158 <col:24, line:41:3>
|   |   |-CallExpr 0x12e0280d0 <line:39:7, col:15> 'int'
|   |   | |-ImplicitCastExpr 0x12e0280b8 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x12e028078 <col:7> 'int ()' Function 0x12e0277f8 'close' 'int ()'
|   |   | `-ImplicitCastExpr 0x12e0280f8 <col:13> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x12e028098 <col:13> 'int' lvalue Var 0x12d922e50 'fd' 'int'
|   |   `-ReturnStmt 0x12e028148 <line:40:7, col:14>
|   |     `-ImplicitCastExpr 0x12e028130 <col:14> 'int' contains-errors <LValueToRValue>
|   |       `-DeclRefExpr 0x12e028110 <col:14> 'int' contains-errors lvalue Var 0x12e00e378 'retval' 'int'
|   |-WhileStmt 0x12d925cc0 <line:44:3, line:77:5>
|   | |-RecoveryExpr 0x12e0282f8 <line:44:10, col:35> '_Bool' contains-errors
|   | `-CompoundStmt 0x12d925c80 <line:45:5, line:77:5>
|   |   |-DeclStmt 0x12e028398 <line:46:7, col:27>
|   |   | `-VarDecl 0x12e028330 <col:7, col:13> col:13 used saveptr 'char *'
|   |   |-IfStmt 0x12d924b60 <line:47:7, line:48:26>
|   |   | |-BinaryOperator 0x12d924978 <line:47:11, col:36> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x12d924960 <col:11, col:31> 'int' <IntegralCast>
|   |   | | | `-ImplicitCastExpr 0x12d924948 <col:11, col:31> 'char' <LValueToRValue>
|   |   | | |   `-ArraySubscriptExpr 0x12d924910 <col:11, col:31> 'char' lvalue
|   |   | | |     |-ImplicitCastExpr 0x12d9248f8 <col:11> 'char *' <ArrayToPointerDecay>
|   |   | | |     | `-DeclRefExpr 0x12e0283b0 <col:11> 'char[1024]' lvalue Var 0x12e00e1b0 'buf' 'char[1024]'
|   |   | | |     `-BinaryOperator 0x12d9248d8 <col:15, col:30> 'unsigned long' '-'
|   |   | | |       |-CallExpr 0x12d924848 <col:15, col:26> 'unsigned long'
|   |   | | |       | |-ImplicitCastExpr 0x12d924830 <col:15> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |   | | |       | | `-DeclRefExpr 0x12d9247a8 <col:15> 'unsigned long (const char *)' Function 0x12d924638 'strlen' 'unsigned long (const char *)'
|   |   | | |       | `-ImplicitCastExpr 0x12d924888 <col:23> 'const char *' <NoOp>
|   |   | | |       |   `-ImplicitCastExpr 0x12d924870 <col:23> 'char *' <ArrayToPointerDecay>
|   |   | | |       |     `-DeclRefExpr 0x12d9247c8 <col:23> 'char[1024]' lvalue Var 0x12e00e1b0 'buf' 'char[1024]'
|   |   | | |       `-ImplicitCastExpr 0x12d9248c0 <col:30> 'unsigned long' <IntegralCast>
|   |   | | |         `-IntegerLiteral 0x12d9248a0 <col:30> 'int' 1
|   |   | | `-CharacterLiteral 0x12d924930 <col:36> 'int' 10
|   |   | `-BinaryOperator 0x12d924b40 <line:48:2, col:26> 'char' '='
|   |   |   |-ArraySubscriptExpr 0x12d924af0 <col:2, col:22> 'char' lvalue
|   |   |   | |-ImplicitCastExpr 0x12d924ad8 <col:2> 'char *' <ArrayToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x12d924998 <col:2> 'char[1024]' lvalue Var 0x12e00e1b0 'buf' 'char[1024]'
|   |   |   | `-BinaryOperator 0x12d924ab8 <col:6, col:21> 'unsigned long' '-'
|   |   |   |   |-CallExpr 0x12d924a28 <col:6, col:17> 'unsigned long'
|   |   |   |   | |-ImplicitCastExpr 0x12d924a10 <col:6> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |   |   |   | | `-DeclRefExpr 0x12d9249b8 <col:6> 'unsigned long (const char *)' Function 0x12d924638 'strlen' 'unsigned long (const char *)'
|   |   |   |   | `-ImplicitCastExpr 0x12d924a68 <col:14> 'const char *' <NoOp>
|   |   |   |   |   `-ImplicitCastExpr 0x12d924a50 <col:14> 'char *' <ArrayToPointerDecay>
|   |   |   |   |     `-DeclRefExpr 0x12d9249d8 <col:14> 'char[1024]' lvalue Var 0x12e00e1b0 'buf' 'char[1024]'
|   |   |   |   `-ImplicitCastExpr 0x12d924aa0 <col:21> 'unsigned long' <IntegralCast>
|   |   |   |     `-IntegerLiteral 0x12d924a80 <col:21> 'int' 1
|   |   |   `-ImplicitCastExpr 0x12d924b28 <col:26> 'char' <IntegralCast>
|   |   |     `-CharacterLiteral 0x12d924b10 <col:26> 'int' 0
|   |   |-IfStmt 0x12d924d98 <line:49:7, line:54:7>
|   |   | |-BinaryOperator 0x12d924c40 <line:49:11, col:21> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x12d924c28 <col:11, col:16> 'int' <IntegralCast>
|   |   | | | `-ImplicitCastExpr 0x12d924c10 <col:11, col:16> 'char' <LValueToRValue>
|   |   | | |   `-ArraySubscriptExpr 0x12d924bd8 <col:11, col:16> 'char' lvalue
|   |   | | |     |-ImplicitCastExpr 0x12d924bc0 <col:11> 'char *' <ArrayToPointerDecay>
|   |   | | |     | `-DeclRefExpr 0x12d924b80 <col:11> 'char[1024]' lvalue Var 0x12e00e1b0 'buf' 'char[1024]'
|   |   | | |     `-IntegerLiteral 0x12d924ba0 <col:15> 'int' 0
|   |   | | `-CharacterLiteral 0x12d924bf8 <col:21> 'int' 35
|   |   | `-CompoundStmt 0x12d924d78 <col:26, line:54:7>
|   |   |   |-IfStmt 0x12d924d50 <line:51:11, line:52:40>
|   |   |   | |-ImplicitCastExpr 0x12d924c80 <line:51:14> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x12d924c60 <col:14> 'int' lvalue ParmVar 0x12e00de58 'verbose' 'int'
|   |   |   | `-CallExpr 0x12d924d18 <line:52:15, col:40> '<dependent type>' contains-errors
|   |   |   |   |-DeclRefExpr 0x12d924c98 <col:15> 'int ()' Function 0x12d923830 'D' 'int ()'
|   |   |   |   |-RecoveryExpr 0x12d924cb8 <col:18> '<dependent type>' contains-errors lvalue
|   |   |   |   |-StringLiteral 0x12d924cd8 <col:30> 'char[4]' lvalue "STR"
|   |   |   |   `-DeclRefExpr 0x12d924cf8 <col:37> 'char[1024]' lvalue Var 0x12e00e1b0 'buf' 'char[1024]'
|   |   |   `-ContinueStmt 0x12d924d70 <line:53:11>
|   |   |-IfStmt 0x12d924ea8 <line:55:7, line:56:29>
|   |   | |-ImplicitCastExpr 0x12d924dd8 <line:55:10> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x12d924db8 <col:10> 'int' lvalue ParmVar 0x12e00de58 'verbose' 'int'
|   |   | `-CallExpr 0x12d924e70 <line:56:4, col:29> '<dependent type>' contains-errors
|   |   |   |-DeclRefExpr 0x12d924df0 <col:4> 'int ()' Function 0x12d923830 'D' 'int ()'
|   |   |   |-RecoveryExpr 0x12d924e10 <col:7> '<dependent type>' contains-errors lvalue
|   |   |   |-StringLiteral 0x12d924e30 <col:19> 'char[4]' lvalue "STR"
|   |   |   `-DeclRefExpr 0x12d924e50 <col:26> 'char[1024]' lvalue Var 0x12e00e1b0 'buf' 'char[1024]'
|   |   |-BinaryOperator 0x12d925130 <line:57:7, col:46> 'char *' '='
|   |   | |-DeclRefExpr 0x12d924ec8 <col:7> 'char *' lvalue Var 0x12e00e248 's_user' 'char *'
|   |   | `-ImplicitCastExpr 0x12d925118 <col:16, col:46> 'char *' <IntegralToPointer>
|   |   |   `-CallExpr 0x12d9250b0 <col:16, col:46> 'int'
|   |   |     |-ImplicitCastExpr 0x12d925098 <col:16> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x12d924fc8 <col:16> 'int ()' Function 0x12d924f10 'strtok_r' 'int ()'
|   |   |     |-ImplicitCastExpr 0x12d9250e8 <col:26> 'char *' <ArrayToPointerDecay>
|   |   |     | `-DeclRefExpr 0x12d924fe8 <col:26> 'char[1024]' lvalue Var 0x12e00e1b0 'buf' 'char[1024]'
|   |   |     |-ImplicitCastExpr 0x12d925100 <col:31> 'char *' <ArrayToPointerDecay>
|   |   |     | `-StringLiteral 0x12d925008 <col:31> 'char[4]' lvalue "STR"
|   |   |     `-UnaryOperator 0x12d925080 <col:38, col:39> 'char **' prefix '&' cannot overflow
|   |   |       `-DeclRefExpr 0x12d925028 <col:39> 'char *' lvalue Var 0x12e028330 'saveptr' 'char *'
|   |   `-IfStmt 0x12d925c60 <line:58:7, line:76:2>
|   |     |-BinaryOperator 0x12d925538 <line:58:11, col:50> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x12d925520 <col:11> 'char *' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x12d925150 <col:11> 'char *' lvalue Var 0x12e00e248 's_user' 'char *'
|   |     | `-BinaryOperator 0x12d925500 <col:21, col:50> 'int' '=='
|   |     |   |-CallExpr 0x12d925468 <col:21, col:45> 'int'
|   |     |   | |-ImplicitCastExpr 0x12d925450 <col:21> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |     |   | | `-DeclRefExpr 0x12d925390 <col:21> 'int (const char *, const char *)' Function 0x12d9251b0 'strcmp' 'int (const char *, const char *)'
|   |     |   | |-ImplicitCastExpr 0x12d925498 <col:29> 'const char *' <LValueToRValue>
|   |     |   | | `-DeclRefExpr 0x12d9253b0 <col:29> 'const char *' lvalue ParmVar 0x12e00dd58 'username' 'const char *'
|   |     |   | `-ImplicitCastExpr 0x12d9254c8 <col:39> 'const char *' <NoOp>
|   |     |   |   `-ImplicitCastExpr 0x12d9254b0 <col:39> 'char *' <LValueToRValue>
|   |     |   |     `-DeclRefExpr 0x12d9253d0 <col:39> 'char *' lvalue Var 0x12e00e248 's_user' 'char *'
|   |     |   `-IntegerLiteral 0x12d9254e0 <col:50> 'int' 0
|   |     `-CompoundStmt 0x12d925c40 <line:59:2, line:76:2>
|   |       |-IfStmt 0x12d925658 <line:60:4, line:61:36>
|   |       | |-ImplicitCastExpr 0x12d925578 <line:60:7> 'int' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x12d925558 <col:7> 'int' lvalue ParmVar 0x12e00de58 'verbose' 'int'
|   |       | `-CallExpr 0x12d925620 <line:61:8, col:36> '<dependent type>' contains-errors
|   |       |   |-DeclRefExpr 0x12d925590 <col:8> 'int ()' Function 0x12d923830 'D' 'int ()'
|   |       |   |-RecoveryExpr 0x12d9255b0 <col:11> '<dependent type>' contains-errors lvalue
|   |       |   |-StringLiteral 0x12d9255d0 <col:23> 'char[4]' lvalue "STR"
|   |       |   `-DeclRefExpr 0x12d925600 <col:30> 'char *' lvalue Var 0x12e00e248 's_user' 'char *'
|   |       `-DoStmt 0x12d925c20 <line:63:4, line:75:26>
|   |         |-CompoundStmt 0x12d925bc0 <line:64:6, line:74:6>
|   |         | |-IfStmt 0x12d925820 <line:66:8, line:67:34>
|   |         | | |-ImplicitCastExpr 0x12d925750 <line:66:11> 'int' <LValueToRValue>
|   |         | | | `-DeclRefExpr 0x12d925730 <col:11> 'int' lvalue ParmVar 0x12e00de58 'verbose' 'int'
|   |         | | `-CallExpr 0x12d9257e8 <line:67:5, col:34> '<dependent type>' contains-errors
|   |         | |   |-DeclRefExpr 0x12d925768 <col:5> 'int ()' Function 0x12d923830 'D' 'int ()'
|   |         | |   |-RecoveryExpr 0x12d925788 <col:8> '<dependent type>' contains-errors lvalue
|   |         | |   |-StringLiteral 0x12d9257a8 <col:20> 'char[4]' lvalue "STR"
|   |         | |   `-DeclRefExpr 0x12d9257c8 <col:27> 'char *' lvalue Var 0x12e00e2c8 's_token' 'char *'
|   |         | `-IfStmt 0x12d925ba0 <line:68:8, line:73:3>
|   |         |   |-BinaryOperator 0x12d925a30 <line:68:12, col:61> 'int' '&&'
|   |         |   | |-BinaryOperator 0x12d9258b0 <col:12, col:23> 'int' '&&'
|   |         |   | | |-ImplicitCastExpr 0x12d925880 <col:12> 'char *' <LValueToRValue>
|   |         |   | | | `-DeclRefExpr 0x12d925840 <col:12> 'char *' lvalue Var 0x12e00e2c8 's_token' 'char *'
|   |         |   | | `-ImplicitCastExpr 0x12d925898 <col:23> 'const char *' <LValueToRValue>
|   |         |   | |   `-DeclRefExpr 0x12d925860 <col:23> 'const char *' lvalue ParmVar 0x12e00ddd8 'otp_id' 'const char *'
|   |         |   | `-BinaryOperator 0x12d925a10 <col:33, col:61> 'int' '=='
|   |         |   |   |-CallExpr 0x12d925978 <col:33, col:56> 'int'
|   |         |   |   | |-ImplicitCastExpr 0x12d925960 <col:33> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |         |   |   | | `-DeclRefExpr 0x12d9258d0 <col:33> 'int (const char *, const char *)' Function 0x12d9251b0 'strcmp' 'int (const char *, const char *)'
|   |         |   |   | |-ImplicitCastExpr 0x12d9259a8 <col:41> 'const char *' <LValueToRValue>
|   |         |   |   | | `-DeclRefExpr 0x12d9258f0 <col:41> 'const char *' lvalue ParmVar 0x12e00ddd8 'otp_id' 'const char *'
|   |         |   |   | `-ImplicitCastExpr 0x12d9259d8 <col:49> 'const char *' <NoOp>
|   |         |   |   |   `-ImplicitCastExpr 0x12d9259c0 <col:49> 'char *' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x12d925910 <col:49> 'char *' lvalue Var 0x12e00e2c8 's_token' 'char *'
|   |         |   |   `-IntegerLiteral 0x12d9259f0 <col:61> 'int' 0
|   |         |   `-CompoundStmt 0x12d925b88 <line:69:3, line:73:3>
|   |         |     `-IfStmt 0x12d925b68 <line:70:5, line:71:47>
|   |         |       |-ImplicitCastExpr 0x12d925a70 <line:70:8> 'int' <LValueToRValue>
|   |         |       | `-DeclRefExpr 0x12d925a50 <col:8> 'int' lvalue ParmVar 0x12e00de58 'verbose' 'int'
|   |         |       `-CallExpr 0x12d925b28 <line:71:9, col:47> '<dependent type>' contains-errors
|   |         |         |-DeclRefExpr 0x12d925a88 <col:9> 'int ()' Function 0x12d923830 'D' 'int ()'
|   |         |         |-RecoveryExpr 0x12d925aa8 <col:12> '<dependent type>' contains-errors lvalue
|   |         |         |-StringLiteral 0x12d925ac8 <col:24> 'char[4]' lvalue "STR"
|   |         |         |-DeclRefExpr 0x12d925ae8 <col:31> 'const char *' lvalue ParmVar 0x12e00dd58 'username' 'const char *'
|   |         |         `-DeclRefExpr 0x12d925b08 <col:41> 'const char *' lvalue ParmVar 0x12e00ddd8 'otp_id' 'const char *'
|   |         `-RecoveryExpr 0x12d925c00 <line:75:11, col:22> '_Bool' contains-errors
|   `-ReturnStmt 0x12d925e18 <line:81:3, col:10>
|     `-ImplicitCastExpr 0x12d925e00 <col:10> 'int' contains-errors <LValueToRValue>
|       `-DeclRefExpr 0x12d925de0 <col:10> 'int' contains-errors lvalue Var 0x12e00e378 'retval' 'int'
|-FunctionDecl 0x12d9239e8 <line:17:36> col:36 implicit used strerror 'char *(int)' extern
| |-ParmVarDecl 0x12d923ae8 <<invalid sloc>> <invalid sloc> 'int'
| `-BuiltinAttr 0x12d923a90 <<invalid sloc>> Implicit 901
|-FunctionDecl 0x12d924638 <line:47:15> col:15 implicit used strlen 'unsigned long (const char *)' extern
| |-ParmVarDecl 0x12d924738 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x12d9246e0 <<invalid sloc>> Implicit 902
`-FunctionDecl 0x12d9251b0 <line:58:21> col:21 implicit used strcmp 'int (const char *, const char *)' extern
  |-ParmVarDecl 0x12d9252b0 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x12d925318 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x12d925258 <<invalid sloc>> Implicit 887
