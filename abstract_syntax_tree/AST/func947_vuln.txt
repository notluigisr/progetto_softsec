TranslationUnitDecl 0x11d84ae08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x11d84bcb8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x11d84b3d0 '__int128'
|-TypedefDecl 0x11d84bd28 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x11d84b3f0 'unsigned __int128'
|-TypedefDecl 0x11d8cd430 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x11d8cd200 'struct __NSConstantString_tag'
|   `-Record 0x11d84bd80 '__NSConstantString_tag'
|-TypedefDecl 0x11d8cd498 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x11d84b590 '__SVInt8_t'
|-TypedefDecl 0x11d8cd500 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x11d84b5b0 '__SVInt16_t'
|-TypedefDecl 0x11d8cd568 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x11d84b5d0 '__SVInt32_t'
|-TypedefDecl 0x11d8cd5d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x11d84b5f0 '__SVInt64_t'
|-TypedefDecl 0x11d8cd638 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x11d84b610 '__SVUint8_t'
|-TypedefDecl 0x11d8cd6a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x11d84b630 '__SVUint16_t'
|-TypedefDecl 0x11d8cd708 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x11d84b650 '__SVUint32_t'
|-TypedefDecl 0x11d8cd770 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x11d84b670 '__SVUint64_t'
|-TypedefDecl 0x11d8cd7d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x11d84b690 '__SVFloat16_t'
|-TypedefDecl 0x11d8cd840 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x11d84b6b0 '__SVFloat32_t'
|-TypedefDecl 0x11d8cd8a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x11d84b6d0 '__SVFloat64_t'
|-TypedefDecl 0x11d8cd910 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x11d84b6f0 '__SVBfloat16_t'
|-TypedefDecl 0x11d8cd978 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x11d84b710 '__clang_svint8x2_t'
|-TypedefDecl 0x11d8cd9e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x11d84b730 '__clang_svint16x2_t'
|-TypedefDecl 0x11d8cda48 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x11d84b750 '__clang_svint32x2_t'
|-TypedefDecl 0x11d8cdab0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x11d84b770 '__clang_svint64x2_t'
|-TypedefDecl 0x11d8cdb18 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x11d84b790 '__clang_svuint8x2_t'
|-TypedefDecl 0x11d8cdb80 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x11d84b7b0 '__clang_svuint16x2_t'
|-TypedefDecl 0x11d8cdbe8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x11d84b7d0 '__clang_svuint32x2_t'
|-TypedefDecl 0x11d8cdc50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x11d84b7f0 '__clang_svuint64x2_t'
|-TypedefDecl 0x11d8cdcb8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x11d84b810 '__clang_svfloat16x2_t'
|-TypedefDecl 0x11d8cdd20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x11d84b830 '__clang_svfloat32x2_t'
|-TypedefDecl 0x11d8cdd88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x11d84b850 '__clang_svfloat64x2_t'
|-TypedefDecl 0x11d8cddf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x11d84b870 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x11d8cde58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x11d84b890 '__clang_svint8x3_t'
|-TypedefDecl 0x11d8cdec0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x11d84b8b0 '__clang_svint16x3_t'
|-TypedefDecl 0x11d8cdf28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x11d84b8d0 '__clang_svint32x3_t'
|-TypedefDecl 0x11d8cdf90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x11d84b8f0 '__clang_svint64x3_t'
|-TypedefDecl 0x11d8cdff8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x11d84b910 '__clang_svuint8x3_t'
|-TypedefDecl 0x11d8ce060 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x11d84b930 '__clang_svuint16x3_t'
|-TypedefDecl 0x11d8ce0c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x11d84b950 '__clang_svuint32x3_t'
|-TypedefDecl 0x11d8ce130 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x11d84b970 '__clang_svuint64x3_t'
|-TypedefDecl 0x11d8ce198 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x11d84b990 '__clang_svfloat16x3_t'
|-TypedefDecl 0x11d8cea00 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x11d84b9b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x11d8cea68 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x11d84b9d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x11d8cead0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x11d84b9f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x11d8ceb38 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x11d84ba10 '__clang_svint8x4_t'
|-TypedefDecl 0x11d8ceba0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x11d84ba30 '__clang_svint16x4_t'
|-TypedefDecl 0x11d8cec08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x11d84ba50 '__clang_svint32x4_t'
|-TypedefDecl 0x11d8cec70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x11d84ba70 '__clang_svint64x4_t'
|-TypedefDecl 0x11d8cecd8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x11d84ba90 '__clang_svuint8x4_t'
|-TypedefDecl 0x11d8ced40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x11d84bab0 '__clang_svuint16x4_t'
|-TypedefDecl 0x11d8ceda8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x11d84bad0 '__clang_svuint32x4_t'
|-TypedefDecl 0x11d8cee10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x11d84baf0 '__clang_svuint64x4_t'
|-TypedefDecl 0x11d8cee78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x11d84bb10 '__clang_svfloat16x4_t'
|-TypedefDecl 0x11d8ceee0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x11d84bb30 '__clang_svfloat32x4_t'
|-TypedefDecl 0x11d8cef48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x11d84bb50 '__clang_svfloat64x4_t'
|-TypedefDecl 0x11d8cefb0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x11d84bb70 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x11d8cf018 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x11d84bb90 '__SVBool_t'
|-TypedefDecl 0x11d8cf080 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x11d84bbb0 '__clang_svboolx2_t'
|-TypedefDecl 0x11d8cf0e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x11d84bbd0 '__clang_svboolx4_t'
|-TypedefDecl 0x11d8cf150 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x11d84bbf0 '__SVCount_t'
|-TypedefDecl 0x11d8cf1f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x11d8cf1b0 'char *'
|   `-BuiltinType 0x11d84aeb0 'char'
|-TypedefDecl 0x11d8cf268 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x11d8cf1b0 'char *'
|   `-BuiltinType 0x11d84aeb0 'char'
|-FunctionDecl 0x11d8cf318 <dataset_diviso_filec/func947_vuln.c:1:1, line:78:1> line:1:1 SYSCALL_DEFINE5 'int ()'
| `-CompoundStmt 0x11d8ebf60 <line:6:1, line:78:1>
|   |-DeclStmt 0x11d8cf5c0 <line:8:2, col:29>
|   | |-VarDecl 0x11d8cf4c0 <col:2, col:14> col:7 used type 'char[32]'
|   | `-VarDecl 0x11d8cf540 <col:2, col:18> col:18 used description 'char *'
|   |-DeclStmt 0x11d8cf658 <line:9:2, col:15>
|   | `-VarDecl 0x11d8cf5f0 <col:2, col:8> col:8 used payload 'void *'
|   |-DeclStmt 0x11d8cf6f0 <line:10:2, col:10>
|   | `-VarDecl 0x11d8cf688 <col:2, col:7> col:7 used ret 'long'
|   |-BinaryOperator 0x11d8cf7e0 <line:12:2, col:9> 'long' contains-errors '='
|   | |-DeclRefExpr 0x11d8cf708 <col:2> 'long' lvalue Var 0x11d8cf688 'ret' 'long'
|   | `-UnaryOperator 0x11d8cf7c8 <col:8, col:9> '<dependent type>' contains-errors prefix '-' cannot overflow
|   |   `-ImplicitCastExpr 0x11d8cf7b0 <col:9> '<dependent type>' contains-errors <LValueToRValue>
|   |     `-RecoveryExpr 0x11d8cf790 <col:9> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x11d8cf980 <line:13:2, line:14:8>
|   | |-BinaryOperator 0x11d8cf8f8 <line:13:6, col:27> 'int' contains-errors '>'
|   | | |-RecoveryExpr 0x11d8cf8d8 <col:6> '<dependent type>' contains-errors lvalue
|   | | `-BinaryOperator 0x11d8cf898 <col:13, col:27> 'int' '-'
|   | |   |-BinaryOperator 0x11d8cf858 <col:13, col:20> 'int' '*'
|   | |   | |-IntegerLiteral 0x11d8cf818 <col:13> 'int' 1024
|   | |   | `-IntegerLiteral 0x11d8cf838 <col:20> 'int' 1024
|   | |   `-IntegerLiteral 0x11d8cf878 <col:27> 'int' 1
|   | `-GotoStmt 0x11d8cf968 <line:14:3, col:8> 'error' 0x11d8cf918
|   |-BinaryOperator 0x11d8e7eb8 <line:17:2, col:56> 'long' '='
|   | |-DeclRefExpr 0x11d8cf9a0 <col:2> 'long' lvalue Var 0x11d8cf688 'ret' 'long'
|   | `-ImplicitCastExpr 0x11d8e7ea0 <col:8, col:56> 'long' <IntegralCast>
|   |   `-CallExpr 0x11d8e7e38 <col:8, col:56> 'int'
|   |     |-ImplicitCastExpr 0x11d8e7e20 <col:8> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x11d8e7cb8 <col:8> 'int ()' Function 0x11d8e7c00 'key_get_type_from_user' 'int ()'
|   |     |-ImplicitCastExpr 0x11d8e7e70 <col:31> 'char *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x11d8e7cd8 <col:31> 'char[32]' lvalue Var 0x11d8cf4c0 'type' 'char[32]'
|   |     |-ImplicitCastExpr 0x11d8e7e88 <col:37> 'char *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x11d8e7dc8 <col:37> 'char[32]' lvalue Var 0x11d8cf4c0 'type' 'char[32]'
|   |     `-UnaryExprOrTypeTraitExpr 0x11d8e7d50 <col:44, col:55> 'unsigned long' sizeof
|   |       `-ParenExpr 0x11d8e7d30 <col:50, col:55> 'char[32]' lvalue
|   |         `-DeclRefExpr 0x11d8e7d10 <col:51> 'char[32]' lvalue Var 0x11d8cf4c0 'type' 'char[32]' non_odr_use_unevaluated
|   |-IfStmt 0x11d8e7f80 <line:18:2, line:19:8>
|   | |-BinaryOperator 0x11d8e7f48 <line:18:6, col:12> 'int' '<'
|   | | |-ImplicitCastExpr 0x11d8e7f18 <col:6> 'long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x11d8e7ed8 <col:6> 'long' lvalue Var 0x11d8cf688 'ret' 'long'
|   | | `-ImplicitCastExpr 0x11d8e7f30 <col:12> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x11d8e7ef8 <col:12> 'int' 0
|   | `-GotoStmt 0x11d8e7f68 <line:19:3, col:8> 'error' 0x11d8cf918
|   |-BinaryOperator 0x11d8e8018 <line:21:2, col:16> 'char *' contains-errors '='
|   | |-DeclRefExpr 0x11d8e7fa0 <col:2> 'char *' lvalue Var 0x11d8cf540 'description' 'char *'
|   | `-RecoveryExpr 0x11d8e7ff8 <col:16> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x11d8ea950 <line:22:2, line:36:2>
|   | |-DeclRefExpr 0x11d8e8050 <line:22:6> 'char *' lvalue Var 0x11d8cf540 'description' 'char *'
|   | `-CompoundStmt 0x11d8ea928 <col:20, line:36:2>
|   |   |-BinaryOperator 0x11d8e82a0 <line:23:3, col:61> 'char *' contains-errors '='
|   |   | |-DeclRefExpr 0x11d8e8070 <col:3> 'char *' lvalue Var 0x11d8cf540 'description' 'char *'
|   |   | `-CallExpr 0x11d8e8270 <col:17, col:61> '<dependent type>' contains-errors
|   |   |   |-DeclRefExpr 0x11d8e8170 <col:17> 'int ()' Function 0x11d8e80b8 'strndup_user' 'int ()'
|   |   |   |-RecoveryExpr 0x11d8e8230 <col:30> '<dependent type>' contains-errors lvalue
|   |   |   `-RecoveryExpr 0x11d8e8250 <col:44> '<dependent type>' contains-errors lvalue
|   |   |-IfStmt 0x11d8e8640 <line:24:3, line:27:3>
|   |   | |-CallExpr 0x11d8e83f8 <line:24:7, col:25> 'int'
|   |   | | |-ImplicitCastExpr 0x11d8e83e0 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   |   | | | `-DeclRefExpr 0x11d8e83a0 <col:7> 'int ()' Function 0x11d8e82e8 'IS_ERR' 'int ()'
|   |   | | `-ImplicitCastExpr 0x11d8e8420 <col:14> 'char *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x11d8e83c0 <col:14> 'char *' lvalue Var 0x11d8cf540 'description' 'char *'
|   |   | `-CompoundStmt 0x11d8e8620 <col:28, line:27:3>
|   |   |   |-BinaryOperator 0x11d8e85e8 <line:25:4, col:29> 'long' '='
|   |   |   | |-DeclRefExpr 0x11d8e8438 <col:4> 'long' lvalue Var 0x11d8cf688 'ret' 'long'
|   |   |   | `-ImplicitCastExpr 0x11d8e85d0 <col:10, col:29> 'long' <IntegralCast>
|   |   |   |   `-CallExpr 0x11d8e8590 <col:10, col:29> 'int'
|   |   |   |     |-ImplicitCastExpr 0x11d8e8578 <col:10> 'int (*)()' <FunctionToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x11d8e8538 <col:10> 'int ()' Function 0x11d8e8480 'PTR_ERR' 'int ()'
|   |   |   |     `-ImplicitCastExpr 0x11d8e85b8 <col:18> 'char *' <LValueToRValue>
|   |   |   |       `-DeclRefExpr 0x11d8e8558 <col:18> 'char *' lvalue Var 0x11d8cf540 'description' 'char *'
|   |   |   `-GotoStmt 0x11d8e8608 <line:26:4, col:9> 'error' 0x11d8cf918
|   |   `-IfStmt 0x11d8ea8f8 <line:28:3, line:35:3> has_else
|   |     |-UnaryOperator 0x11d8e86c8 <line:28:7, col:9> 'int' prefix '!' cannot overflow
|   |     | `-ImplicitCastExpr 0x11d8e86b0 <col:8, col:9> 'char' <LValueToRValue>
|   |     |   `-UnaryOperator 0x11d8e8698 <col:8, col:9> 'char' lvalue prefix '*' cannot overflow
|   |     |     `-ImplicitCastExpr 0x11d8e8680 <col:9> 'char *' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x11d8e8660 <col:9> 'char *' lvalue Var 0x11d8cf540 'description' 'char *'
|   |     |-CompoundStmt 0x11d8e88f0 <col:22, line:31:3>
|   |     | |-CallExpr 0x11d8e8818 <line:29:4, col:21> 'int'
|   |     | | |-ImplicitCastExpr 0x11d8e8800 <col:4> 'int (*)()' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x11d8e87c0 <col:4> 'int ()' Function 0x11d8e8708 'kfree' 'int ()'
|   |     | | `-ImplicitCastExpr 0x11d8e8840 <col:10> 'char *' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x11d8e87e0 <col:10> 'char *' lvalue Var 0x11d8cf540 'description' 'char *'
|   |     | `-BinaryOperator 0x11d8e88d0 <line:30:4, col:18> 'char *' contains-errors '='
|   |     |   |-DeclRefExpr 0x11d8e8858 <col:4> 'char *' lvalue Var 0x11d8cf540 'description' 'char *'
|   |     |   `-RecoveryExpr 0x11d8e88b0 <col:18> '<dependent type>' contains-errors lvalue
|   |     `-IfStmt 0x11d8ea8d8 <line:31:10, line:35:3>
|   |       |-BinaryOperator 0x11d8ea738 <line:31:14, line:32:36> 'int' '&&'
|   |       | |-ParenExpr 0x11d8e89f0 <line:31:14, col:36> 'int'
|   |       | | `-BinaryOperator 0x11d8e89d0 <col:15, col:33> 'int' '=='
|   |       | |   |-ImplicitCastExpr 0x11d8e89b8 <col:15, col:28> 'int' <IntegralCast>
|   |       | |   | `-ImplicitCastExpr 0x11d8e89a0 <col:15, col:28> 'char' <LValueToRValue>
|   |       | |   |   `-ArraySubscriptExpr 0x11d8e8968 <col:15, col:28> 'char' lvalue
|   |       | |   |     |-ImplicitCastExpr 0x11d8e8950 <col:15> 'char *' <LValueToRValue>
|   |       | |   |     | `-DeclRefExpr 0x11d8e8910 <col:15> 'char *' lvalue Var 0x11d8cf540 'description' 'char *'
|   |       | |   |     `-IntegerLiteral 0x11d8e8930 <col:27> 'int' 0
|   |       | |   `-CharacterLiteral 0x11d8e8988 <col:33> 'int' 46
|   |       | `-ParenExpr 0x11d8ea718 <line:32:7, col:36> 'int'
|   |       |   `-BinaryOperator 0x11d8ea6f8 <col:8, col:35> 'int' '=='
|   |       |     |-CallExpr 0x11d8ea628 <col:8, col:30> 'int'
|   |       |     | |-ImplicitCastExpr 0x11d8ea610 <col:8> 'int (*)(const char *, const char *, unsigned long)' <FunctionToPointerDecay>
|   |       |     | | `-DeclRefExpr 0x11d8ea4f0 <col:8> 'int (const char *, const char *, unsigned long)' Function 0x11d8ea2a0 'strncmp' 'int (const char *, const char *, unsigned long)'
|   |       |     | |-ImplicitCastExpr 0x11d8ea678 <col:16> 'const char *' <NoOp>
|   |       |     | | `-ImplicitCastExpr 0x11d8ea660 <col:16> 'char *' <ArrayToPointerDecay>
|   |       |     | |   `-DeclRefExpr 0x11d8ea510 <col:16> 'char[32]' lvalue Var 0x11d8cf4c0 'type' 'char[32]'
|   |       |     | |-ImplicitCastExpr 0x11d8ea6a8 <col:22> 'const char *' <NoOp>
|   |       |     | | `-ImplicitCastExpr 0x11d8ea690 <col:22> 'char *' <ArrayToPointerDecay>
|   |       |     | |   `-StringLiteral 0x11d8ea570 <col:22> 'char[4]' lvalue "STR"
|   |       |     | `-ImplicitCastExpr 0x11d8ea6c0 <col:29> 'unsigned long' <IntegralCast>
|   |       |     |   `-IntegerLiteral 0x11d8ea590 <col:29> 'int' 7
|   |       |     `-IntegerLiteral 0x11d8ea6d8 <col:35> 'int' 0
|   |       `-CompoundStmt 0x11d8ea8b8 <col:39, line:35:3>
|   |         |-BinaryOperator 0x11d8ea830 <line:33:4, col:11> 'long' contains-errors '='
|   |         | |-DeclRefExpr 0x11d8ea758 <col:4> 'long' lvalue Var 0x11d8cf688 'ret' 'long'
|   |         | `-UnaryOperator 0x11d8ea818 <col:10, col:11> '<dependent type>' contains-errors prefix '-' cannot overflow
|   |         |   `-ImplicitCastExpr 0x11d8ea800 <col:11> '<dependent type>' contains-errors <LValueToRValue>
|   |         |     `-RecoveryExpr 0x11d8ea7e0 <col:11> '<dependent type>' contains-errors lvalue
|   |         `-GotoStmt 0x11d8ea8a0 <line:34:4, col:9> 'error2' 0x11d8ea850
|   |-BinaryOperator 0x11d8ea9e8 <line:39:2, col:12> 'void *' contains-errors '='
|   | |-DeclRefExpr 0x11d8ea970 <col:2> 'void *' lvalue Var 0x11d8cf5f0 'payload' 'void *'
|   | `-RecoveryExpr 0x11d8ea9c8 <col:12> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x11d8eae30 <line:41:2, line:50:2>
|   | |-DeclRefExpr 0x11d8eaa20 <line:41:6> 'void *' lvalue Var 0x11d8cf5f0 'payload' 'void *'
|   | `-CompoundStmt 0x11d8eae10 <col:16, line:50:2>
|   |   |-IfStmt 0x11d8eabe8 <line:44:3, line:45:9>
|   |   | |-UnaryOperator 0x11d8eabb8 <line:44:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | `-ImplicitCastExpr 0x11d8eaba0 <col:8> 'void *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x11d8eab80 <col:8> 'void *' lvalue Var 0x11d8cf5f0 'payload' 'void *'
|   |   | `-GotoStmt 0x11d8eabd0 <line:45:4, col:9> 'error2' 0x11d8ea850
|   |   `-IfStmt 0x11d8eadf0 <line:48:3, line:49:9>
|   |     |-RecoveryExpr 0x11d8ead68 <line:48:7, col:50> '_Bool' contains-errors
|   |     `-GotoStmt 0x11d8eadd8 <line:49:4, col:9> 'error3' 0x11d8ead88
|   |-IfStmt 0x11d8eb800 <line:54:2, line:57:2>
|   | |-RecoveryExpr 0x11d8eaf70 <line:54:6, col:24> '_Bool' contains-errors
|   | `-CompoundStmt 0x11d8eafe8 <col:27, line:57:2>
|   |   `-GotoStmt 0x11d8eafd0 <line:56:3, col:8> 'error3' 0x11d8ead88
|   |-IfStmt 0x11d8ebc40 <line:63:2, line:69:2> has_else
|   | |-RecoveryExpr 0x11d8eb9a0 <line:63:6, col:21> '_Bool' contains-errors
|   | |-CompoundStmt 0x11d8ebbe0 <col:24, line:66:2>
|   | `-CompoundStmt 0x11d8ebc30 <line:67:7, line:69:2>
|   |-LabelStmt 0x11d8ebe08 <line:72:2, line:73:16> 'error3'
|   | `-CallExpr 0x11d8ebdc8 <col:2, col:16> 'int'
|   |   |-ImplicitCastExpr 0x11d8ebdb0 <col:2> 'int (*)()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x11d8ebd70 <col:2> 'int ()' Function 0x11d8ebcb8 'kvfree' 'int ()'
|   |   `-ImplicitCastExpr 0x11d8ebdf0 <col:9> 'void *' <LValueToRValue>
|   |     `-DeclRefExpr 0x11d8ebd90 <col:9> 'void *' lvalue Var 0x11d8cf5f0 'payload' 'void *'
|   |-LabelStmt 0x11d8ebec0 <line:74:2, line:75:19> 'error2'
|   | `-CallExpr 0x11d8ebe80 <col:2, col:19> 'int'
|   |   |-ImplicitCastExpr 0x11d8ebe68 <col:2> 'int (*)()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x11d8ebe28 <col:2> 'int ()' Function 0x11d8e8708 'kfree' 'int ()'
|   |   `-ImplicitCastExpr 0x11d8ebea8 <col:8> 'char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x11d8ebe48 <col:8> 'char *' lvalue Var 0x11d8cf540 'description' 'char *'
|   `-LabelStmt 0x11d8ebf40 <line:76:2, line:77:9> 'error'
|     `-ReturnStmt 0x11d8ebf30 <col:2, col:9>
|       `-ImplicitCastExpr 0x11d8ebf18 <col:9> 'int' <IntegralCast>
|         `-ImplicitCastExpr 0x11d8ebf00 <col:9> 'long' <LValueToRValue>
|           `-DeclRefExpr 0x11d8ebee0 <col:9> 'long' lvalue Var 0x11d8cf688 'ret' 'long'
`-FunctionDecl 0x11d8ea2a0 <line:32:8> col:8 implicit used strncmp 'int (const char *, const char *, unsigned long)' extern
  |-ParmVarDecl 0x11d8ea3a0 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x11d8ea408 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x11d8ea470 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x11d8ea348 <<invalid sloc>> Implicit 888
