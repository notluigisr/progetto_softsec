TranslationUnitDecl 0x143855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1438564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x143855bd0 '__int128'
|-TypedefDecl 0x143856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x143855bf0 'unsigned __int128'
|-TypedefDecl 0x14400be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x14400bc00 'struct __NSConstantString_tag'
|   `-Record 0x143856580 '__NSConstantString_tag'
|-TypedefDecl 0x14400be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x143855d90 '__SVInt8_t'
|-TypedefDecl 0x14400bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x143855db0 '__SVInt16_t'
|-TypedefDecl 0x14400bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x143855dd0 '__SVInt32_t'
|-TypedefDecl 0x14400bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x143855df0 '__SVInt64_t'
|-TypedefDecl 0x14400c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x143855e10 '__SVUint8_t'
|-TypedefDecl 0x14400c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x143855e30 '__SVUint16_t'
|-TypedefDecl 0x14400c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x143855e50 '__SVUint32_t'
|-TypedefDecl 0x14400c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x143855e70 '__SVUint64_t'
|-TypedefDecl 0x14400c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x143855e90 '__SVFloat16_t'
|-TypedefDecl 0x14400c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x143855eb0 '__SVFloat32_t'
|-TypedefDecl 0x14400c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x143855ed0 '__SVFloat64_t'
|-TypedefDecl 0x14400c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x143855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x14400c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x143855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x14400c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x143855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x14400c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x143855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x14400c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x143855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x14400c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x143855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x14400c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x143855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x14400c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x143855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x14400c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x143855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x14400c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x143856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x14400c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x143856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x14400c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x143856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x14400c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x143856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x14400c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x143856090 '__clang_svint8x3_t'
|-TypedefDecl 0x14400c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1438560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x14400c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1438560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x14400c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1438560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x14400c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x143856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x14400ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x143856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x14400cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x143856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x14400cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x143856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x14400cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x143856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x14400d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1438561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x14400d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1438561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x14400d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1438561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x14400d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x143856210 '__clang_svint8x4_t'
|-TypedefDecl 0x14400d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x143856230 '__clang_svint16x4_t'
|-TypedefDecl 0x14400d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x143856250 '__clang_svint32x4_t'
|-TypedefDecl 0x14400d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x143856270 '__clang_svint64x4_t'
|-TypedefDecl 0x14400d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x143856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x14400d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1438562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x14400d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1438562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x14400d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1438562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x14400d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x143856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x14400d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x143856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x14400d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x143856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x14400d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x143856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x14400da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x143856390 '__SVBool_t'
|-TypedefDecl 0x14400da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1438563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x14400dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1438563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x14400db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1438563f0 '__SVCount_t'
|-TypedefDecl 0x14400dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x14400dbb0 'char *'
|   `-BuiltinType 0x1438556b0 'char'
|-TypedefDecl 0x14400dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x14400dbb0 'char *'
|   `-BuiltinType 0x1438556b0 'char'
|-FunctionDecl 0x14400dda8 <dataset_diviso_filec/func21956_vuln.c:1:1, line:64:1> line:1:1 unquoted_glob_pattern_p 'int (char *)'
| |-ParmVarDecl 0x14400dcd8 <line:2:6, col:21> col:21 used string 'char *' register
| `-CompoundStmt 0x143922e38 <line:3:1, line:64:1>
|   |-DeclStmt 0x14400df20 <line:4:3, col:17>
|   | `-VarDecl 0x14400deb8 <col:3, col:16> col:16 used c 'int' register
|   |-DeclStmt 0x14400dfb8 <line:5:3, col:13>
|   | `-VarDecl 0x14400df50 <col:3, col:9> col:9 used send 'char *'
|   |-DeclStmt 0x14400e0e8 <line:6:3, col:20>
|   | |-VarDecl 0x14400dfe8 <col:3, col:7> col:7 used open 'int'
|   | `-VarDecl 0x14400e068 <col:3, col:13> col:13 used bsquote 'int'
|   |-BinaryOperator 0x14400e198 <line:10:3, col:20> 'int' '='
|   | |-DeclRefExpr 0x14400e118 <col:3> 'int' lvalue Var 0x14400dfe8 'open' 'int'
|   | `-BinaryOperator 0x14400e178 <col:10, col:20> 'int' '='
|   |   |-DeclRefExpr 0x14400e138 <col:10> 'int' lvalue Var 0x14400e068 'bsquote' 'int'
|   |   `-IntegerLiteral 0x14400e158 <col:20> 'int' 0
|   |-BinaryOperator 0x144026b18 <line:11:3, col:33> 'char *' '='
|   | |-DeclRefExpr 0x14400e1b8 <col:3> 'char *' lvalue Var 0x14400df50 'send' 'char *'
|   | `-BinaryOperator 0x144026af8 <col:10, col:33> 'char *' '+'
|   |   |-ImplicitCastExpr 0x144026ae0 <col:10> 'char *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x14400e1d8 <col:10> 'char *' lvalue ParmVar 0x14400dcd8 'string' 'char *'
|   |   `-CallExpr 0x144026a88 <col:19, col:33> 'unsigned long'
|   |     |-ImplicitCastExpr 0x144026a70 <col:19> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1440269e0 <col:19> 'unsigned long (const char *)' Function 0x144026870 'strlen' 'unsigned long (const char *)'
|   |     `-ImplicitCastExpr 0x144026ac8 <col:27> 'const char *' <NoOp>
|   |       `-ImplicitCastExpr 0x144026ab0 <col:27> 'char *' <LValueToRValue>
|   |         `-DeclRefExpr 0x144026a00 <col:27> 'char *' lvalue ParmVar 0x14400dcd8 'string' 'char *'
|   `-WhileStmt 0x143922d80 <line:13:3, line:61:5>
|     |-BinaryOperator 0x144026bd8 <line:13:10, col:21> 'int' '='
|     | |-DeclRefExpr 0x144026b38 <col:10> 'int' lvalue Var 0x14400deb8 'c' 'int'
|     | `-ImplicitCastExpr 0x144026bc0 <col:14, col:21> 'int' <IntegralCast>
|     |   `-ImplicitCastExpr 0x144026ba8 <col:14, col:21> 'char' <LValueToRValue>
|     |     `-UnaryOperator 0x144026b90 <col:14, col:21> 'char' lvalue prefix '*' cannot overflow
|     |       `-UnaryOperator 0x144026b78 <col:15, col:21> 'char *' postfix '++'
|     |         `-DeclRefExpr 0x144026b58 <col:15> 'char *' lvalue ParmVar 0x14400dcd8 'string' 'char *'
|     `-CompoundStmt 0x143922d60 <line:14:5, line:61:5>
|       |-SwitchStmt 0x144026c30 <line:15:7, line:51:2>
|       | |-ImplicitCastExpr 0x144026c18 <line:15:15> 'int' <LValueToRValue>
|       | | `-DeclRefExpr 0x144026bf8 <col:15> 'int' lvalue Var 0x14400deb8 'c' 'int'
|       | `-CompoundStmt 0x143922a90 <line:16:2, line:51:2>
|       |   |-CaseStmt 0x144026c88 <line:17:2, line:19:13>
|       |   | |-ConstantExpr 0x144026c70 <line:17:7> 'int'
|       |   | | `-CharacterLiteral 0x144026c58 <col:7> 'int' 63
|       |   | `-CaseStmt 0x144026ce0 <line:18:2, line:19:13>
|       |   |   |-ConstantExpr 0x144026cc8 <line:18:7> 'int'
|       |   |   | `-CharacterLiteral 0x144026cb0 <col:7> 'int' 42
|       |   |   `-ReturnStmt 0x144026d48 <line:19:4, col:13>
|       |   |     `-ParenExpr 0x144026d28 <col:11, col:13> 'int'
|       |   |       `-IntegerLiteral 0x144026d08 <col:12> 'int' 1
|       |   |-CaseStmt 0x144026d88 <line:21:2, line:22:8>
|       |   | |-ConstantExpr 0x144026d70 <line:21:7> 'int'
|       |   | | `-CharacterLiteral 0x144026d58 <col:7> 'int' 91
|       |   | `-UnaryOperator 0x144026dd0 <line:22:4, col:8> 'int' postfix '++'
|       |   |   `-DeclRefExpr 0x144026db0 <col:4> 'int' lvalue Var 0x14400dfe8 'open' 'int'
|       |   |-ContinueStmt 0x144026de8 <line:23:4>
|       |   |-CaseStmt 0x144026e20 <line:25:2, line:27:15>
|       |   | |-ConstantExpr 0x144026e08 <line:25:7> 'int'
|       |   | | `-CharacterLiteral 0x144026df0 <col:7> 'int' 93
|       |   | `-IfStmt 0x144026ed0 <line:26:4, line:27:15>
|       |   |   |-ImplicitCastExpr 0x144026e68 <line:26:8> 'int' <LValueToRValue>
|       |   |   | `-DeclRefExpr 0x144026e48 <col:8> 'int' lvalue Var 0x14400dfe8 'open' 'int'
|       |   |   `-ReturnStmt 0x144026ec0 <line:27:6, col:15>
|       |   |     `-ParenExpr 0x144026ea0 <col:13, col:15> 'int'
|       |   |       `-IntegerLiteral 0x144026e80 <col:14> 'int' 1
|       |   |-ContinueStmt 0x144026ef0 <line:28:4>
|       |   |-CaseStmt 0x144026f28 <line:30:2, line:34:15>
|       |   | |-ConstantExpr 0x144026f10 <line:30:7> 'int'
|       |   | | `-CharacterLiteral 0x144026ef8 <col:7> 'int' 43
|       |   | `-CaseStmt 0x144026f80 <line:31:2, line:34:15>
|       |   |   |-ConstantExpr 0x144026f68 <line:31:7> 'int'
|       |   |   | `-CharacterLiteral 0x144026f50 <col:7> 'int' 64
|       |   |   `-CaseStmt 0x144026fd8 <line:32:2, line:34:15>
|       |   |     |-ConstantExpr 0x144026fc0 <line:32:7> 'int'
|       |   |     | `-CharacterLiteral 0x144026fa8 <col:7> 'int' 33
|       |   |     `-IfStmt 0x144027108 <line:33:4, line:34:15>
|       |   |       |-BinaryOperator 0x144027098 <line:33:8, col:19> 'int' '=='
|       |   |       | |-ImplicitCastExpr 0x144027080 <col:8, col:9> 'int' <IntegralCast>
|       |   |       | | `-ImplicitCastExpr 0x144027068 <col:8, col:9> 'char' <LValueToRValue>
|       |   |       | |   `-UnaryOperator 0x144027038 <col:8, col:9> 'char' lvalue prefix '*' cannot overflow
|       |   |       | |     `-ImplicitCastExpr 0x144027020 <col:9> 'char *' <LValueToRValue>
|       |   |       | |       `-DeclRefExpr 0x144027000 <col:9> 'char *' lvalue ParmVar 0x14400dcd8 'string' 'char *'
|       |   |       | `-CharacterLiteral 0x144027050 <col:19> 'int' 40
|       |   |       `-ReturnStmt 0x1440270f8 <line:34:6, col:15>
|       |   |         `-ParenExpr 0x1440270d8 <col:13, col:15> 'int'
|       |   |           `-IntegerLiteral 0x1440270b8 <col:14> 'int' 1
|       |   |-ContinueStmt 0x144027128 <line:35:4>
|       |   |-CaseStmt 0x144027160 <line:38:2, line:46:15>
|       |   | |-ConstantExpr 0x144027148 <line:38:7> 'int'
|       |   | | `-CharacterLiteral 0x144027130 <col:7> 'int' 92
|       |   | `-IfStmt 0x144027510 <line:39:4, line:46:15> has_else
|       |   |   |-BinaryOperator 0x1440272f8 <line:39:8, col:38> 'int' '&&'
|       |   |   | |-BinaryOperator 0x144027220 <col:8, col:19> 'int' '!='
|       |   |   | | |-ImplicitCastExpr 0x144027208 <col:8, col:9> 'int' <IntegralCast>
|       |   |   | | | `-ImplicitCastExpr 0x1440271f0 <col:8, col:9> 'char' <LValueToRValue>
|       |   |   | | |   `-UnaryOperator 0x1440271c0 <col:8, col:9> 'char' lvalue prefix '*' cannot overflow
|       |   |   | | |     `-ImplicitCastExpr 0x1440271a8 <col:9> 'char *' <LValueToRValue>
|       |   |   | | |       `-DeclRefExpr 0x144027188 <col:9> 'char *' lvalue ParmVar 0x14400dcd8 'string' 'char *'
|       |   |   | | `-CharacterLiteral 0x1440271d8 <col:19> 'int' 0
|       |   |   | `-BinaryOperator 0x1440272d8 <col:27, col:38> 'int' '!='
|       |   |   |   |-ImplicitCastExpr 0x1440272c0 <col:27, col:28> 'int' <IntegralCast>
|       |   |   |   | `-ImplicitCastExpr 0x1440272a8 <col:27, col:28> 'char' <LValueToRValue>
|       |   |   |   |   `-UnaryOperator 0x144027278 <col:27, col:28> 'char' lvalue prefix '*' cannot overflow
|       |   |   |   |     `-ImplicitCastExpr 0x144027260 <col:28> 'char *' <LValueToRValue>
|       |   |   |   |       `-DeclRefExpr 0x144027240 <col:28> 'char *' lvalue ParmVar 0x14400dcd8 'string' 'char *'
|       |   |   |   `-CharacterLiteral 0x144027290 <col:38> 'int' 47
|       |   |   |-CompoundStmt 0x1440273b8 <line:40:6, line:44:6>
|       |   |   | |-BinaryOperator 0x144027358 <line:41:8, col:18> 'int' '='
|       |   |   | | |-DeclRefExpr 0x144027318 <col:8> 'int' lvalue Var 0x14400e068 'bsquote' 'int'
|       |   |   | | `-IntegerLiteral 0x144027338 <col:18> 'int' 1
|       |   |   | |-UnaryOperator 0x144027398 <line:42:8, col:14> 'char *' postfix '++'
|       |   |   | | `-DeclRefExpr 0x144027378 <col:8> 'char *' lvalue ParmVar 0x14400dcd8 'string' 'char *'
|       |   |   | `-ContinueStmt 0x1440273b0 <line:43:8>
|       |   |   `-IfStmt 0x1440274f0 <line:45:9, line:46:15>
|       |   |     |-BinaryOperator 0x144027480 <line:45:13, col:24> 'int' '=='
|       |   |     | |-ImplicitCastExpr 0x144027468 <col:13, col:14> 'int' <IntegralCast>
|       |   |     | | `-ImplicitCastExpr 0x144027450 <col:13, col:14> 'char' <LValueToRValue>
|       |   |     | |   `-UnaryOperator 0x144027418 <col:13, col:14> 'char' lvalue prefix '*' cannot overflow
|       |   |     | |     `-ImplicitCastExpr 0x144027400 <col:14> 'char *' <LValueToRValue>
|       |   |     | |       `-DeclRefExpr 0x1440273e0 <col:14> 'char *' lvalue ParmVar 0x14400dcd8 'string' 'char *'
|       |   |     | `-IntegerLiteral 0x144027430 <col:24> 'int' 0
|       |   |     `-ReturnStmt 0x1440274e0 <line:46:6, col:15>
|       |   |       `-ParenExpr 0x1440274c0 <col:13, col:15> 'int'
|       |   |         `-IntegerLiteral 0x1440274a0 <col:14> 'int' 0
|       |   `-IfStmt 0x143922a70 <line:49:4, line:50:15>
|       |     |-BinaryOperator 0x143922a00 <line:49:8, col:21> 'int' '=='
|       |     | |-ImplicitCastExpr 0x1440275d8 <col:8, col:15> 'int' <IntegralCast>
|       |     | | `-ImplicitCastExpr 0x1440275c0 <col:8, col:15> 'char' <LValueToRValue>
|       |     | |   `-UnaryOperator 0x144027590 <col:8, col:15> 'char' lvalue prefix '*' cannot overflow
|       |     | |     `-UnaryOperator 0x144027578 <col:9, col:15> 'char *' postfix '++'
|       |     | |       `-DeclRefExpr 0x144027558 <col:9> 'char *' lvalue ParmVar 0x14400dcd8 'string' 'char *'
|       |     | `-CharacterLiteral 0x1440275a8 <col:21> 'int' 0
|       |     `-ReturnStmt 0x143922a60 <line:50:6, col:15>
|       |       `-ParenExpr 0x143922a40 <col:13, col:15> 'int'
|       |         `-IntegerLiteral 0x143922a20 <col:14> 'int' 0
|       `-CallExpr 0x143922d18 <line:59:7, col:44> 'int'
|         |-ImplicitCastExpr 0x143922d00 <col:7> 'int (*)()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x143922c00 <col:7> 'int ()' Function 0x143922b48 'ADVANCE_CHAR_P' 'int ()'
|         |-ImplicitCastExpr 0x143922d48 <col:23> 'char *' <LValueToRValue>
|         | `-DeclRefExpr 0x143922c20 <col:23> 'char *' lvalue ParmVar 0x14400dcd8 'string' 'char *'
|         `-BinaryOperator 0x143922cb0 <col:31, col:38> 'long' '-'
|           |-ImplicitCastExpr 0x143922c80 <col:31> 'char *' <LValueToRValue>
|           | `-DeclRefExpr 0x143922c40 <col:31> 'char *' lvalue Var 0x14400df50 'send' 'char *'
|           `-ImplicitCastExpr 0x143922c98 <col:38> 'char *' <LValueToRValue>
|             `-DeclRefExpr 0x143922c60 <col:38> 'char *' lvalue ParmVar 0x14400dcd8 'string' 'char *'
`-FunctionDecl 0x144026870 <line:11:19> col:19 implicit used strlen 'unsigned long (const char *)' extern
  |-ParmVarDecl 0x144026970 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x144026918 <<invalid sloc>> Implicit 902
