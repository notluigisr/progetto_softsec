TranslationUnitDecl 0x131055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1310564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x131055bd0 '__int128'
|-TypedefDecl 0x131056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x131055bf0 'unsigned __int128'
|-TypedefDecl 0x13180be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13180bc00 'struct __NSConstantString_tag'
|   `-Record 0x131056580 '__NSConstantString_tag'
|-TypedefDecl 0x13180be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x131055d90 '__SVInt8_t'
|-TypedefDecl 0x13180bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x131055db0 '__SVInt16_t'
|-TypedefDecl 0x13180bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x131055dd0 '__SVInt32_t'
|-TypedefDecl 0x13180bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x131055df0 '__SVInt64_t'
|-TypedefDecl 0x13180c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x131055e10 '__SVUint8_t'
|-TypedefDecl 0x13180c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x131055e30 '__SVUint16_t'
|-TypedefDecl 0x13180c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x131055e50 '__SVUint32_t'
|-TypedefDecl 0x13180c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x131055e70 '__SVUint64_t'
|-TypedefDecl 0x13180c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x131055e90 '__SVFloat16_t'
|-TypedefDecl 0x13180c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x131055eb0 '__SVFloat32_t'
|-TypedefDecl 0x13180c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x131055ed0 '__SVFloat64_t'
|-TypedefDecl 0x13180c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x131055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13180c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x131055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13180c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x131055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13180c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x131055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13180c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x131055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13180c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x131055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13180c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x131055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13180c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x131055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13180c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x131055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13180c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x131056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13180c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x131056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13180c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x131056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13180c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x131056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13180c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x131056090 '__clang_svint8x3_t'
|-TypedefDecl 0x13180c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1310560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13180c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1310560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13180c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1310560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13180c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x131056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13180ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x131056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13180cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x131056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13180cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x131056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13180cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x131056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13180d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1310561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13180d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1310561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13180d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1310561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13180d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x131056210 '__clang_svint8x4_t'
|-TypedefDecl 0x13180d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x131056230 '__clang_svint16x4_t'
|-TypedefDecl 0x13180d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x131056250 '__clang_svint32x4_t'
|-TypedefDecl 0x13180d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x131056270 '__clang_svint64x4_t'
|-TypedefDecl 0x13180d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x131056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13180d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1310562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13180d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1310562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13180d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1310562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13180d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x131056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13180d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x131056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13180d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x131056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13180d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x131056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13180da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x131056390 '__SVBool_t'
|-TypedefDecl 0x13180da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1310563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13180dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1310563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13180db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1310563f0 '__SVCount_t'
|-TypedefDecl 0x13180dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13180dbb0 'char *'
|   `-BuiltinType 0x1310556b0 'char'
|-TypedefDecl 0x13180dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13180dbb0 'char *'
|   `-BuiltinType 0x1310556b0 'char'
|-FunctionDecl 0x13180dfd0 <dataset_diviso_filec/func20503_nonvuln.c:1:1, line:50:1> line:1:6 invalid fli_read_lc_2 'void (int *, int *, unsigned char *, unsigned char *)'
| |-ParmVarDecl 0x13180dd28 <col:20, col:26> col:26 invalid f 'int *'
| |-ParmVarDecl 0x13180dda8 <col:29, col:43> col:43 invalid fli_header 'int *'
| |-ParmVarDecl 0x13180de58 <col:55, col:70> col:70 used old_framebuf 'unsigned char *'
| |-ParmVarDecl 0x13180ded8 <col:84, col:99> col:99 used framebuf 'unsigned char *'
| `-CompoundStmt 0x13182b240 <line:2:1, line:50:1>
|   |-DeclStmt 0x13180e238 <line:3:2, col:32>
|   | |-VarDecl 0x13180e0b0 <col:2, col:17> col:17 used yc 'unsigned short'
|   | |-VarDecl 0x13180e130 <col:2, col:21> col:21 used lc 'unsigned short'
|   | `-VarDecl 0x13180e1b0 <col:2, col:25> col:25 used numline 'unsigned short'
|   |-DeclStmt 0x13180e2d0 <line:4:2, col:20>
|   | `-VarDecl 0x13180e268 <col:2, col:17> col:17 used pos 'unsigned char *'
|   |-CallExpr 0x132008f60 <line:5:2, col:71> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x132008de0 <col:2> 'void *(void *, const void *, unsigned long)' Function 0x132008b90 'memcpy' 'void *(void *, const void *, unsigned long)'
|   | |-DeclRefExpr 0x132008e00 <col:9> 'unsigned char *' lvalue ParmVar 0x13180ded8 'framebuf' 'unsigned char *'
|   | |-DeclRefExpr 0x132008e20 <col:19> 'unsigned char *' lvalue ParmVar 0x13180de58 'old_framebuf' 'unsigned char *'
|   | `-BinaryOperator 0x132008f10 <col:33, col:65> '<dependent type>' contains-errors '*'
|   |   |-CXXDependentScopeMemberExpr 0x132008e60 <col:33, col:45> '<dependent type>' contains-errors lvalue ->width
|   |   | `-RecoveryExpr 0x132008e40 <col:33> '<dependent type>' contains-errors lvalue
|   |   `-CXXDependentScopeMemberExpr 0x132008ec8 <col:53, col:65> '<dependent type>' contains-errors lvalue ->height
|   |     `-RecoveryExpr 0x132008ea8 <col:53> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x132008ff0 <line:6:2, col:5> 'unsigned short' '='
|   | |-DeclRefExpr 0x132008f98 <col:2> 'unsigned short' lvalue Var 0x13180e0b0 'yc' 'unsigned short'
|   | `-ImplicitCastExpr 0x132008fd8 <col:5> 'unsigned short' <IntegralCast>
|   |   `-IntegerLiteral 0x132008fb8 <col:5> 'int' 0
|   |-BinaryOperator 0x1320091f8 <line:7:2, col:28> 'unsigned short' contains-errors '='
|   | |-DeclRefExpr 0x132009010 <col:2> 'unsigned short' lvalue Var 0x13180e1b0 'numline' 'unsigned short'
|   | `-CallExpr 0x1320091d0 <col:12, col:28> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x132009190 <col:12> 'int ()' Function 0x1320090d8 'fli_read_short' 'int ()'
|   |   `-RecoveryExpr 0x1320091b0 <col:27> '<dependent type>' contains-errors lvalue
|   `-ForStmt 0x13182b208 <line:8:2, line:49:2>
|     |-BinaryOperator 0x132009270 <line:8:7, col:10> 'unsigned short' '='
|     | |-DeclRefExpr 0x132009218 <col:7> 'unsigned short' lvalue Var 0x13180e130 'lc' 'unsigned short'
|     | `-ImplicitCastExpr 0x132009258 <col:10> 'unsigned short' <IntegralCast>
|     |   `-IntegerLiteral 0x132009238 <col:10> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x132009330 <col:13, col:18> 'int' '<'
|     | |-ImplicitCastExpr 0x132009300 <col:13> 'int' <IntegralCast>
|     | | `-ImplicitCastExpr 0x1320092d0 <col:13> 'unsigned short' <LValueToRValue>
|     | |   `-DeclRefExpr 0x132009290 <col:13> 'unsigned short' lvalue Var 0x13180e130 'lc' 'unsigned short'
|     | `-ImplicitCastExpr 0x132009318 <col:18> 'int' <IntegralCast>
|     |   `-ImplicitCastExpr 0x1320092e8 <col:18> 'unsigned short' <LValueToRValue>
|     |     `-DeclRefExpr 0x1320092b0 <col:18> 'unsigned short' lvalue Var 0x13180e1b0 'numline' 'unsigned short'
|     |-UnaryOperator 0x132009370 <col:27, col:29> 'unsigned short' postfix '++' cannot overflow
|     | `-DeclRefExpr 0x132009350 <col:27> 'unsigned short' lvalue Var 0x13180e130 'lc' 'unsigned short'
|     `-CompoundStmt 0x13182b1a8 <col:33, line:49:2>
|       |-DeclStmt 0x1320095b0 <line:9:3, col:36>
|       | |-VarDecl 0x1320093a0 <col:3, col:18> col:18 used pc 'unsigned short'
|       | |-VarDecl 0x132009420 <col:3, col:22> col:22 used pcnt 'unsigned short'
|       | |-VarDecl 0x1320094a0 <col:3, col:28> col:28 used lpf 'unsigned short'
|       | `-VarDecl 0x132009520 <col:3, col:33> col:33 used lpn 'unsigned short'
|       |-BinaryOperator 0x132009698 <line:10:3, col:13> '<dependent type>' contains-errors ','
|       | |-UnaryExprOrTypeTraitExpr 0x132009658 <col:3, col:10> 'unsigned long' contains-errors sizeof
|       | | `-RecoveryExpr 0x132009638 <col:10> '<dependent type>' contains-errors lvalue
|       | `-RecoveryExpr 0x132009678 <col:13> '<dependent type>' contains-errors lvalue
|       |-BinaryOperator 0x132009740 <line:11:3, col:22> 'unsigned short' contains-errors '='
|       | |-DeclRefExpr 0x1320096b8 <col:3> 'unsigned short' lvalue Var 0x1320093a0 'pc' 'unsigned short'
|       | `-CallExpr 0x132009718 <col:6, col:22> '<dependent type>' contains-errors
|       |   |-DeclRefExpr 0x1320096d8 <col:6> 'int ()' Function 0x1320090d8 'fli_read_short' 'int ()'
|       |   `-RecoveryExpr 0x1320096f8 <col:21> '<dependent type>' contains-errors lvalue
|       |-BinaryOperator 0x1320097b8 <line:12:3, col:7> 'unsigned short' '='
|       | |-DeclRefExpr 0x132009760 <col:3> 'unsigned short' lvalue Var 0x1320094a0 'lpf' 'unsigned short'
|       | `-ImplicitCastExpr 0x1320097a0 <col:7> 'unsigned short' <IntegralCast>
|       |   `-IntegerLiteral 0x132009780 <col:7> 'int' 0
|       |-BinaryOperator 0x131828838 <col:10, col:14> 'unsigned short' '='
|       | |-DeclRefExpr 0x1320097d8 <col:10> 'unsigned short' lvalue Var 0x132009520 'lpn' 'unsigned short'
|       | `-ImplicitCastExpr 0x131828820 <col:14> 'unsigned short' <IntegralCast>
|       |   `-IntegerLiteral 0x131828800 <col:14> 'int' 0
|       |-WhileStmt 0x131828d00 <line:13:3, line:20:3>
|       | |-BinaryOperator 0x1318288c8 <line:13:10, col:15> 'int' '&'
|       | | |-ImplicitCastExpr 0x1318288b0 <col:10> 'int' <IntegralCast>
|       | | | `-ImplicitCastExpr 0x131828898 <col:10> 'unsigned short' <LValueToRValue>
|       | | |   `-DeclRefExpr 0x131828858 <col:10> 'unsigned short' lvalue Var 0x1320093a0 'pc' 'unsigned short'
|       | | `-IntegerLiteral 0x131828878 <col:15> 'int' 32768
|       | `-CompoundStmt 0x131828ce0 <col:23, line:20:3>
|       |   |-IfStmt 0x131828c08 <line:14:4, line:18:4> has_else
|       |   | |-BinaryOperator 0x131828958 <line:14:8, col:13> 'int' '&'
|       |   | | |-ImplicitCastExpr 0x131828940 <col:8> 'int' <IntegralCast>
|       |   | | | `-ImplicitCastExpr 0x131828928 <col:8> 'unsigned short' <LValueToRValue>
|       |   | | |   `-DeclRefExpr 0x1318288e8 <col:8> 'unsigned short' lvalue Var 0x1320093a0 'pc' 'unsigned short'
|       |   | | `-IntegerLiteral 0x131828908 <col:13> 'int' 16384
|       |   | |-CompoundStmt 0x131828a70 <col:21, line:16:4>
|       |   | | `-CompoundAssignOperator 0x131828a40 <line:15:5, col:24> 'unsigned short' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|       |   | |   |-DeclRefExpr 0x131828978 <col:5> 'unsigned short' lvalue Var 0x13180e0b0 'yc' 'unsigned short'
|       |   | |   `-UnaryOperator 0x131828a28 <col:9, col:24> 'int' prefix '-' cannot overflow
|       |   | |     `-ImplicitCastExpr 0x131828a10 <col:10, col:24> 'int' <IntegralCast>
|       |   | |       `-CStyleCastExpr 0x1318289e8 <col:10, col:24> 'short' <IntegralCast>
|       |   | |         `-ImplicitCastExpr 0x1318289d0 <col:24> 'unsigned short' <LValueToRValue> part_of_explicit_cast
|       |   | |           `-DeclRefExpr 0x131828998 <col:24> 'unsigned short' lvalue Var 0x1320093a0 'pc' 'unsigned short'
|       |   | `-CompoundStmt 0x131828be8 <line:16:11, line:18:4>
|       |   |   |-BinaryOperator 0x131828ae0 <line:17:5, col:9> 'unsigned short' '='
|       |   |   | |-DeclRefExpr 0x131828a88 <col:5> 'unsigned short' lvalue Var 0x1320094a0 'lpf' 'unsigned short'
|       |   |   | `-ImplicitCastExpr 0x131828ac8 <col:9> 'unsigned short' <IntegralCast>
|       |   |   |   `-IntegerLiteral 0x131828aa8 <col:9> 'int' 1
|       |   |   `-BinaryOperator 0x131828bc8 <col:11, col:18> 'unsigned short' '='
|       |   |     |-DeclRefExpr 0x131828b00 <col:11> 'unsigned short' lvalue Var 0x132009520 'lpn' 'unsigned short'
|       |   |     `-ImplicitCastExpr 0x131828bb0 <col:15, col:18> 'unsigned short' <IntegralCast>
|       |   |       `-BinaryOperator 0x131828b90 <col:15, col:18> 'int' '&'
|       |   |         |-ImplicitCastExpr 0x131828b78 <col:15> 'int' <IntegralCast>
|       |   |         | `-ImplicitCastExpr 0x131828b60 <col:15> 'unsigned short' <LValueToRValue>
|       |   |         |   `-DeclRefExpr 0x131828b20 <col:15> 'unsigned short' lvalue Var 0x1320093a0 'pc' 'unsigned short'
|       |   |         `-IntegerLiteral 0x131828b40 <col:18> 'int' 255
|       |   `-BinaryOperator 0x131828cc0 <line:19:4, col:23> 'unsigned short' contains-errors '='
|       |     |-DeclRefExpr 0x131828c38 <col:4> 'unsigned short' lvalue Var 0x1320093a0 'pc' 'unsigned short'
|       |     `-CallExpr 0x131828c98 <col:7, col:23> '<dependent type>' contains-errors
|       |       |-DeclRefExpr 0x131828c58 <col:7> 'int ()' Function 0x1320090d8 'fli_read_short' 'int ()'
|       |       `-RecoveryExpr 0x131828c78 <col:22> '<dependent type>' contains-errors lvalue
|       |-BinaryOperator 0x131828ef8 <line:21:3, col:32> 'unsigned short' contains-errors '='
|       | |-DeclRefExpr 0x131828d20 <col:3> 'unsigned short' lvalue Var 0x13180e0b0 'yc' 'unsigned short'
|       | `-CallExpr 0x131828ec8 <col:6, col:32> '<dependent type>' contains-errors
|       |   |-DeclRefExpr 0x131828e20 <col:6> 'int ()' Function 0x131828d68 'MIN' 'int ()'
|       |   |-DeclRefExpr 0x131828e40 <col:10> 'unsigned short' lvalue Var 0x13180e0b0 'yc' 'unsigned short'
|       |   `-CXXDependentScopeMemberExpr 0x131828e80 <col:14, col:26> '<dependent type>' contains-errors lvalue ->height
|       |     `-RecoveryExpr 0x131828e60 <col:14> '<dependent type>' contains-errors lvalue
|       |-BinaryOperator 0x131829060 <line:23:3, col:39> 'unsigned char *' contains-errors '='
|       | |-DeclRefExpr 0x131828f38 <col:3> 'unsigned char *' lvalue Var 0x13180e268 'pos' 'unsigned char *'
|       | `-BinaryOperator 0x131829040 <col:7, col:39> '<dependent type>' contains-errors '+'
|       |   |-DeclRefExpr 0x131828f58 <col:7> 'unsigned char *' lvalue ParmVar 0x13180ded8 'framebuf' 'unsigned char *'
|       |   `-ParenExpr 0x131829020 <col:16, col:39> '<dependent type>' contains-errors
|       |     `-BinaryOperator 0x131829000 <col:17, col:37> '<dependent type>' contains-errors '*'
|       |       |-CXXDependentScopeMemberExpr 0x131828f98 <col:17, col:29> '<dependent type>' contains-errors lvalue ->width
|       |       | `-RecoveryExpr 0x131828f78 <col:17> '<dependent type>' contains-errors lvalue
|       |       `-DeclRefExpr 0x131828fe0 <col:37> 'unsigned short' lvalue Var 0x13180e0b0 'yc' 'unsigned short'
|       |-ForStmt 0x13182b0c0 <line:25:3, line:46:3>
|       | |-BinaryOperator 0x131829150 <line:25:8, col:13> 'unsigned short' '='
|       | | |-DeclRefExpr 0x1318290f8 <col:8> 'unsigned short' lvalue Var 0x132009420 'pcnt' 'unsigned short'
|       | | `-ImplicitCastExpr 0x131829138 <col:13> 'unsigned short' <LValueToRValue>
|       | |   `-DeclRefExpr 0x131829118 <col:13> 'unsigned short' lvalue Var 0x1320093a0 'pc' 'unsigned short'
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x1318291e0 <col:17, col:22> 'int' '>'
|       | | |-ImplicitCastExpr 0x1318291c8 <col:17> 'int' <IntegralCast>
|       | | | `-ImplicitCastExpr 0x1318291b0 <col:17> 'unsigned short' <LValueToRValue>
|       | | |   `-DeclRefExpr 0x131829170 <col:17> 'unsigned short' lvalue Var 0x132009420 'pcnt' 'unsigned short'
|       | | `-IntegerLiteral 0x131829190 <col:22> 'int' 0
|       | |-UnaryOperator 0x131829220 <col:25, col:29> 'unsigned short' postfix '--' cannot overflow
|       | | `-DeclRefExpr 0x131829200 <col:25> 'unsigned short' lvalue Var 0x132009420 'pcnt' 'unsigned short'
|       | `-CompoundStmt 0x13182b090 <col:33, line:46:3>
|       |   |-DeclStmt 0x131829350 <line:26:4, col:26>
|       |   | |-VarDecl 0x131829250 <col:4, col:19> col:19 used ps 'unsigned short'
|       |   | `-VarDecl 0x1318292d0 <col:4, col:22> col:22 used skip 'unsigned short'
|       |   |-BinaryOperator 0x1318294d0 <line:27:4, col:24> 'unsigned short' contains-errors '='
|       |   | |-DeclRefExpr 0x131829368 <col:4> 'unsigned short' lvalue Var 0x1318292d0 'skip' 'unsigned short'
|       |   | `-CallExpr 0x1318294a8 <col:9, col:24> '<dependent type>' contains-errors
|       |   |   |-DeclRefExpr 0x131829468 <col:9> 'int ()' Function 0x1318293b0 'fli_read_char' 'int ()'
|       |   |   `-RecoveryExpr 0x131829488 <col:23> '<dependent type>' contains-errors lvalue
|       |   |-BinaryOperator 0x131829578 <line:28:4, col:22> 'unsigned short' contains-errors '='
|       |   | |-DeclRefExpr 0x1318294f0 <col:4> 'unsigned short' lvalue Var 0x131829250 'ps' 'unsigned short'
|       |   | `-CallExpr 0x131829550 <col:7, col:22> '<dependent type>' contains-errors
|       |   |   |-DeclRefExpr 0x131829510 <col:7> 'int ()' Function 0x1318293b0 'fli_read_char' 'int ()'
|       |   |   `-RecoveryExpr 0x131829530 <col:21> '<dependent type>' contains-errors lvalue
|       |   `-IfStmt 0x13182b060 <line:30:4, line:45:4> has_else
|       |     |-BinaryOperator 0x1318296c8 <line:30:8, col:13> 'int' '&'
|       |     | |-ImplicitCastExpr 0x1318296b0 <col:8> 'int' <IntegralCast>
|       |     | | `-ImplicitCastExpr 0x131829698 <col:8> 'unsigned short' <LValueToRValue>
|       |     | |   `-DeclRefExpr 0x131829658 <col:8> 'unsigned short' lvalue Var 0x131829250 'ps' 'unsigned short'
|       |     | `-IntegerLiteral 0x131829678 <col:13> 'int' 128
|       |     |-CompoundStmt 0x13182ae38 <col:19, line:40:4>
|       |     | |-DeclStmt 0x13182a800 <line:31:5, col:24>
|       |     | | |-VarDecl 0x131829700 <col:5, col:19> col:19 used v1 'unsigned char'
|       |     | | `-VarDecl 0x131829780 <col:5, col:22> col:22 used v2 'unsigned char'
|       |     | |-BinaryOperator 0x13182a8f8 <line:32:5, col:22> 'unsigned short' '='
|       |     | | |-DeclRefExpr 0x13182a818 <col:5> 'unsigned short' lvalue Var 0x131829250 'ps' 'unsigned short'
|       |     | | `-ImplicitCastExpr 0x13182a8e0 <col:8, col:22> 'unsigned short' <IntegralCast>
|       |     | |   `-UnaryOperator 0x13182a8c8 <col:8, col:22> 'int' prefix '-' cannot overflow
|       |     | |     `-ImplicitCastExpr 0x13182a8b0 <col:9, col:22> 'int' <IntegralCast>
|       |     | |       `-CStyleCastExpr 0x13182a888 <col:9, col:22> 'signed char' <IntegralCast>
|       |     | |         `-ImplicitCastExpr 0x13182a870 <col:22> 'unsigned short' <LValueToRValue> part_of_explicit_cast
|       |     | |           `-DeclRefExpr 0x13182a838 <col:22> 'unsigned short' lvalue Var 0x131829250 'ps' 'unsigned short'
|       |     | |-BinaryOperator 0x13182a9a0 <line:33:5, col:23> 'unsigned char' contains-errors '='
|       |     | | |-DeclRefExpr 0x13182a918 <col:5> 'unsigned char' lvalue Var 0x131829700 'v1' 'unsigned char'
|       |     | | `-CallExpr 0x13182a978 <col:8, col:23> '<dependent type>' contains-errors
|       |     | |   |-DeclRefExpr 0x13182a938 <col:8> 'int ()' Function 0x1318293b0 'fli_read_char' 'int ()'
|       |     | |   `-RecoveryExpr 0x13182a958 <col:22> '<dependent type>' contains-errors lvalue
|       |     | |-BinaryOperator 0x13182aa48 <line:34:5, col:23> 'unsigned char' contains-errors '='
|       |     | | |-DeclRefExpr 0x13182a9c0 <col:5> 'unsigned char' lvalue Var 0x131829780 'v2' 'unsigned char'
|       |     | | `-CallExpr 0x13182aa20 <col:8, col:23> '<dependent type>' contains-errors
|       |     | |   |-DeclRefExpr 0x13182a9e0 <col:8> 'int ()' Function 0x1318293b0 'fli_read_char' 'int ()'
|       |     | |   `-RecoveryExpr 0x13182aa00 <col:22> '<dependent type>' contains-errors lvalue
|       |     | `-WhileStmt 0x13182ae18 <line:35:5, line:39:5>
|       |     |   |-BinaryOperator 0x13182acc8 <line:35:12, col:25> 'int' contains-errors '&&'
|       |     |   | |-BinaryOperator 0x13182ac28 <col:12, col:15> 'int' '>'
|       |     |   | | |-ImplicitCastExpr 0x13182ac10 <col:12> 'int' <IntegralCast>
|       |     |   | | | `-ImplicitCastExpr 0x13182abf8 <col:12> 'unsigned short' <LValueToRValue>
|       |     |   | | |   `-DeclRefExpr 0x13182aa68 <col:12> 'unsigned short' lvalue Var 0x131829250 'ps' 'unsigned short'
|       |     |   | | `-IntegerLiteral 0x13182aa88 <col:15> 'int' 0
|       |     |   | `-BinaryOperator 0x13182aca8 <col:20, col:25> 'int' contains-errors '<'
|       |     |   |   |-BinaryOperator 0x13182ac68 <col:20, col:23> '<dependent type>' contains-errors '+'
|       |     |   |   | |-RecoveryExpr 0x13182ac48 <col:20> '<dependent type>' contains-errors lvalue
|       |     |   |   | `-IntegerLiteral 0x13182ab10 <col:23> 'int' 1
|       |     |   |   `-RecoveryExpr 0x13182ac88 <col:25> '<dependent type>' contains-errors lvalue
|       |     |   `-CompoundStmt 0x13182ae00 <col:28, line:39:5>
|       |     |     `-UnaryOperator 0x13182ade8 <line:38:6, col:8> 'unsigned short' postfix '--' cannot overflow
|       |     |       `-DeclRefExpr 0x13182adc8 <col:6> 'unsigned short' lvalue Var 0x131829250 'ps' 'unsigned short'
|       |     `-CompoundStmt 0x13182b050 <line:40:11, line:45:4>
|       `-UnaryOperator 0x13182b190 <line:48:3, col:5> 'unsigned short' postfix '++' cannot overflow
|         `-DeclRefExpr 0x13182b170 <col:3> 'unsigned short' lvalue Var 0x13180e0b0 'yc' 'unsigned short'
`-FunctionDecl 0x132008b90 <line:5:2> col:2 implicit used memcpy 'void *(void *, const void *, unsigned long)' extern
  |-ParmVarDecl 0x132008c90 <<invalid sloc>> <invalid sloc> 'void *'
  |-ParmVarDecl 0x132008cf8 <<invalid sloc>> <invalid sloc> 'const void *'
  |-ParmVarDecl 0x132008d60 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x132008c38 <<invalid sloc>> Implicit 882
