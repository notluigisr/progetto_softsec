TranslationUnitDecl 0x105028008 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x105028eb8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1050285d0 '__int128'
|-TypedefDecl 0x105028f28 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1050285f0 'unsigned __int128'
|-TypedefDecl 0x10680be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x10680bc00 'struct __NSConstantString_tag'
|   `-Record 0x105028f80 '__NSConstantString_tag'
|-TypedefDecl 0x10680be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x105028790 '__SVInt8_t'
|-TypedefDecl 0x10680bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x1050287b0 '__SVInt16_t'
|-TypedefDecl 0x10680bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x1050287d0 '__SVInt32_t'
|-TypedefDecl 0x10680bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x1050287f0 '__SVInt64_t'
|-TypedefDecl 0x10680c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x105028810 '__SVUint8_t'
|-TypedefDecl 0x10680c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x105028830 '__SVUint16_t'
|-TypedefDecl 0x10680c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x105028850 '__SVUint32_t'
|-TypedefDecl 0x10680c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x105028870 '__SVUint64_t'
|-TypedefDecl 0x10680c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x105028890 '__SVFloat16_t'
|-TypedefDecl 0x10680c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x1050288b0 '__SVFloat32_t'
|-TypedefDecl 0x10680c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x1050288d0 '__SVFloat64_t'
|-TypedefDecl 0x10680c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x1050288f0 '__SVBfloat16_t'
|-TypedefDecl 0x10680c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x105028910 '__clang_svint8x2_t'
|-TypedefDecl 0x10680c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x105028930 '__clang_svint16x2_t'
|-TypedefDecl 0x10680c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x105028950 '__clang_svint32x2_t'
|-TypedefDecl 0x10680c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x105028970 '__clang_svint64x2_t'
|-TypedefDecl 0x10680c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x105028990 '__clang_svuint8x2_t'
|-TypedefDecl 0x10680c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x1050289b0 '__clang_svuint16x2_t'
|-TypedefDecl 0x10680c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x1050289d0 '__clang_svuint32x2_t'
|-TypedefDecl 0x10680c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x1050289f0 '__clang_svuint64x2_t'
|-TypedefDecl 0x10680c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x105028a10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x10680c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x105028a30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x10680c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x105028a50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x10680c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x105028a70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x10680c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x105028a90 '__clang_svint8x3_t'
|-TypedefDecl 0x10680c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x105028ab0 '__clang_svint16x3_t'
|-TypedefDecl 0x10680c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x105028ad0 '__clang_svint32x3_t'
|-TypedefDecl 0x10680c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x105028af0 '__clang_svint64x3_t'
|-TypedefDecl 0x10680c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x105028b10 '__clang_svuint8x3_t'
|-TypedefDecl 0x10680ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x105028b30 '__clang_svuint16x3_t'
|-TypedefDecl 0x10680cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x105028b50 '__clang_svuint32x3_t'
|-TypedefDecl 0x10680cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x105028b70 '__clang_svuint64x3_t'
|-TypedefDecl 0x10680cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x105028b90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x10680d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x105028bb0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x10680d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x105028bd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x10680d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x105028bf0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x10680d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x105028c10 '__clang_svint8x4_t'
|-TypedefDecl 0x10680d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x105028c30 '__clang_svint16x4_t'
|-TypedefDecl 0x10680d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x105028c50 '__clang_svint32x4_t'
|-TypedefDecl 0x10680d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x105028c70 '__clang_svint64x4_t'
|-TypedefDecl 0x10680d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x105028c90 '__clang_svuint8x4_t'
|-TypedefDecl 0x10680d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x105028cb0 '__clang_svuint16x4_t'
|-TypedefDecl 0x10680d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x105028cd0 '__clang_svuint32x4_t'
|-TypedefDecl 0x10680d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x105028cf0 '__clang_svuint64x4_t'
|-TypedefDecl 0x10680d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x105028d10 '__clang_svfloat16x4_t'
|-TypedefDecl 0x10680d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x105028d30 '__clang_svfloat32x4_t'
|-TypedefDecl 0x10680d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x105028d50 '__clang_svfloat64x4_t'
|-TypedefDecl 0x10680d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x105028d70 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x10680da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x105028d90 '__SVBool_t'
|-TypedefDecl 0x10680da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x105028db0 '__clang_svboolx2_t'
|-TypedefDecl 0x10680dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x105028dd0 '__clang_svboolx4_t'
|-TypedefDecl 0x10680db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x105028df0 '__SVCount_t'
|-TypedefDecl 0x10680dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x10680dbb0 'char *'
|   `-BuiltinType 0x1050280b0 'char'
|-TypedefDecl 0x10680dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x10680dbb0 'char *'
|   `-BuiltinType 0x1050280b0 'char'
`-FunctionDecl 0x10680def8 <dataset_diviso_filec/func3102_nonvuln.c:1:1, line:12:1> line:1:1 scan_string 'int (const char **, char *, int)'
  |-ParmVarDecl 0x10680dd08 <col:13, col:26> col:26 used bufp 'const char **'
  |-ParmVarDecl 0x10680dd88 <col:32, col:38> col:38 used out 'char *'
  |-ParmVarDecl 0x10680de08 <col:43, col:47> col:47 used width 'int'
  `-CompoundStmt 0x120030588 <line:2:1, line:12:1>
    |-DeclStmt 0x10680e0a0 <line:3:3, col:25>
    | `-VarDecl 0x10680e018 <col:3, col:24> col:7 used scanned_so_far 'int' cinit
    |   `-IntegerLiteral 0x10680e080 <col:24> 'int' 0
    |-IfStmt 0x10680e258 <line:4:3, line:5:13>
    | |-BinaryOperator 0x10680e1f0 <line:4:7, col:32> 'int' '||'
    | | |-BinaryOperator 0x10680e158 <col:7, col:17> 'int' '||'
    | | | |-UnaryOperator 0x10680e0f0 <col:7, col:8> 'int' prefix '!' cannot overflow
    | | | | `-ImplicitCastExpr 0x10680e0d8 <col:8> 'const char **' <LValueToRValue>
    | | | |   `-DeclRefExpr 0x10680e0b8 <col:8> 'const char **' lvalue ParmVar 0x10680dd08 'bufp' 'const char **'
    | | | `-UnaryOperator 0x10680e140 <col:16, col:17> 'int' prefix '!' cannot overflow
    | | |   `-ImplicitCastExpr 0x10680e128 <col:17> 'char *' <LValueToRValue>
    | | |     `-DeclRefExpr 0x10680e108 <col:17> 'char *' lvalue ParmVar 0x10680dd88 'out' 'char *'
    | | `-BinaryOperator 0x10680e1d0 <col:24, col:32> 'int' '<'
    | |   |-ImplicitCastExpr 0x10680e1b8 <col:24> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x10680e178 <col:24> 'int' lvalue ParmVar 0x10680de08 'width' 'int'
    | |   `-IntegerLiteral 0x10680e198 <col:32> 'int' 0
    | `-ReturnStmt 0x10680e248 <line:5:5, col:13>
    |   `-UnaryOperator 0x10680e230 <col:12, col:13> 'int' prefix '-'
    |     `-IntegerLiteral 0x10680e210 <col:13> 'int' 1
    |-WhileStmt 0x120030498 <line:6:3, line:9:3>
    | |-BinaryOperator 0x1200302f8 <line:6:10, col:62> 'int' '&&'
    | | |-BinaryOperator 0x120030248 <col:10, col:40> 'int' '&&'
    | | | |-ImplicitCastExpr 0x120030230 <col:10, col:12> 'int' <IntegralCast>
    | | | | `-ImplicitCastExpr 0x120030218 <col:10, col:12> 'char' <LValueToRValue>
    | | | |   `-UnaryOperator 0x10680e2e0 <col:10, col:12> 'const char' lvalue prefix '*' cannot overflow
    | | | |     `-ImplicitCastExpr 0x10680e2c8 <col:11, col:12> 'const char *' <LValueToRValue>
    | | | |       `-UnaryOperator 0x10680e2b0 <col:11, col:12> 'const char *' lvalue prefix '*' cannot overflow
    | | | |         `-ImplicitCastExpr 0x10680e298 <col:12> 'const char **' <LValueToRValue>
    | | | |           `-DeclRefExpr 0x10680e278 <col:12> 'const char **' lvalue ParmVar 0x10680dd08 'bufp' 'const char **'
    | | | `-UnaryOperator 0x120030200 <col:20, col:40> 'int' prefix '!' cannot overflow
    | | |   `-CallExpr 0x1200301a8 <col:22, col:40> 'int'
    | | |     |-ImplicitCastExpr 0x120030190 <col:22> 'int (*)()' <FunctionToPointerDecay>
    | | |     | `-DeclRefExpr 0x1200300b8 <col:22> 'int ()' Function 0x120030000 'TOR_ISSPACE' 'int ()'
    | | |     `-ImplicitCastExpr 0x1200301e8 <col:34, col:36> 'int' <IntegralCast>
    | | |       `-ImplicitCastExpr 0x1200301d0 <col:34, col:36> 'char' <LValueToRValue>
    | | |         `-UnaryOperator 0x120030140 <col:34, col:36> 'const char' lvalue prefix '*' cannot overflow
    | | |           `-ImplicitCastExpr 0x120030128 <col:35, col:36> 'const char *' <LValueToRValue>
    | | |             `-UnaryOperator 0x120030110 <col:35, col:36> 'const char *' lvalue prefix '*' cannot overflow
    | | |               `-ImplicitCastExpr 0x1200300f8 <col:36> 'const char **' <LValueToRValue>
    | | |                 `-DeclRefExpr 0x1200300d8 <col:36> 'const char **' lvalue ParmVar 0x10680dd08 'bufp' 'const char **'
    | | `-BinaryOperator 0x1200302d8 <col:45, col:62> 'int' '<'
    | |   |-ImplicitCastExpr 0x1200302a8 <col:45> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x120030268 <col:45> 'int' lvalue Var 0x10680e018 'scanned_so_far' 'int'
    | |   `-ImplicitCastExpr 0x1200302c0 <col:62> 'int' <LValueToRValue>
    | |     `-DeclRefExpr 0x120030288 <col:62> 'int' lvalue ParmVar 0x10680de08 'width' 'int'
    | `-CompoundStmt 0x120030478 <col:69, line:9:3>
    |   |-BinaryOperator 0x120030420 <line:7:5, col:22> 'char' '='
    |   | |-UnaryOperator 0x120030350 <col:5, col:9> 'char' lvalue prefix '*' cannot overflow
    |   | | `-UnaryOperator 0x120030338 <col:6, col:9> 'char *' postfix '++'
    |   | |   `-DeclRefExpr 0x120030318 <col:6> 'char *' lvalue ParmVar 0x10680dd88 'out' 'char *'
    |   | `-ImplicitCastExpr 0x120030408 <col:14, col:22> 'char' <LValueToRValue>
    |   |   `-UnaryOperator 0x1200303f0 <col:14, col:22> 'const char' lvalue prefix '*' cannot overflow
    |   |     `-UnaryOperator 0x1200303d8 <col:15, col:22> 'const char *' postfix '++'
    |   |       `-ParenExpr 0x1200303b8 <col:15, col:21> 'const char *' lvalue
    |   |         `-UnaryOperator 0x1200303a0 <col:16, col:17> 'const char *' lvalue prefix '*' cannot overflow
    |   |           `-ImplicitCastExpr 0x120030388 <col:17> 'const char **' <LValueToRValue>
    |   |             `-DeclRefExpr 0x120030368 <col:17> 'const char **' lvalue ParmVar 0x10680dd08 'bufp' 'const char **'
    |   `-UnaryOperator 0x120030460 <line:8:5, col:7> 'int' prefix '++'
    |     `-DeclRefExpr 0x120030440 <col:7> 'int' lvalue Var 0x10680e018 'scanned_so_far' 'int'
    |-BinaryOperator 0x120030538 <line:10:3, col:10> 'char' '='
    | |-UnaryOperator 0x1200304f0 <col:3, col:4> 'char' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x1200304d8 <col:4> 'char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x1200304b8 <col:4> 'char *' lvalue ParmVar 0x10680dd88 'out' 'char *'
    | `-ImplicitCastExpr 0x120030520 <col:10> 'char' <IntegralCast>
    |   `-CharacterLiteral 0x120030508 <col:10> 'int' 0
    `-ReturnStmt 0x120030578 <line:11:3, col:10>
      `-IntegerLiteral 0x120030558 <col:10> 'int' 0
