TranslationUnitDecl 0x122828208 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1228290b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1228287d0 '__int128'
|-TypedefDecl 0x122829128 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1228287f0 'unsigned __int128'
|-TypedefDecl 0x122886830 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x122886600 'struct __NSConstantString_tag'
|   `-Record 0x122829180 '__NSConstantString_tag'
|-TypedefDecl 0x122886898 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x122828990 '__SVInt8_t'
|-TypedefDecl 0x122886900 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x1228289b0 '__SVInt16_t'
|-TypedefDecl 0x122886968 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x1228289d0 '__SVInt32_t'
|-TypedefDecl 0x1228869d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x1228289f0 '__SVInt64_t'
|-TypedefDecl 0x122886a38 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x122828a10 '__SVUint8_t'
|-TypedefDecl 0x122886aa0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x122828a30 '__SVUint16_t'
|-TypedefDecl 0x122886b08 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x122828a50 '__SVUint32_t'
|-TypedefDecl 0x122886b70 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x122828a70 '__SVUint64_t'
|-TypedefDecl 0x122886bd8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x122828a90 '__SVFloat16_t'
|-TypedefDecl 0x122886c40 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x122828ab0 '__SVFloat32_t'
|-TypedefDecl 0x122886ca8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x122828ad0 '__SVFloat64_t'
|-TypedefDecl 0x122886d10 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x122828af0 '__SVBfloat16_t'
|-TypedefDecl 0x122886d78 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x122828b10 '__clang_svint8x2_t'
|-TypedefDecl 0x122886de0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x122828b30 '__clang_svint16x2_t'
|-TypedefDecl 0x122886e48 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x122828b50 '__clang_svint32x2_t'
|-TypedefDecl 0x122886eb0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x122828b70 '__clang_svint64x2_t'
|-TypedefDecl 0x122886f18 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x122828b90 '__clang_svuint8x2_t'
|-TypedefDecl 0x122886f80 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x122828bb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x122886fe8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x122828bd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x122887050 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x122828bf0 '__clang_svuint64x2_t'
|-TypedefDecl 0x1228870b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x122828c10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x122887120 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x122828c30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x122887188 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x122828c50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x1228871f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x122828c70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x122887258 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x122828c90 '__clang_svint8x3_t'
|-TypedefDecl 0x1228872c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x122828cb0 '__clang_svint16x3_t'
|-TypedefDecl 0x122887328 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x122828cd0 '__clang_svint32x3_t'
|-TypedefDecl 0x122887390 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x122828cf0 '__clang_svint64x3_t'
|-TypedefDecl 0x1228873f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x122828d10 '__clang_svuint8x3_t'
|-TypedefDecl 0x122887460 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x122828d30 '__clang_svuint16x3_t'
|-TypedefDecl 0x1228874c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x122828d50 '__clang_svuint32x3_t'
|-TypedefDecl 0x122887530 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x122828d70 '__clang_svuint64x3_t'
|-TypedefDecl 0x122887598 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x122828d90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x122887e00 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x122828db0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x122887e68 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x122828dd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x122887ed0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x122828df0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x122887f38 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x122828e10 '__clang_svint8x4_t'
|-TypedefDecl 0x122887fa0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x122828e30 '__clang_svint16x4_t'
|-TypedefDecl 0x122888008 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x122828e50 '__clang_svint32x4_t'
|-TypedefDecl 0x122888070 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x122828e70 '__clang_svint64x4_t'
|-TypedefDecl 0x1228880d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x122828e90 '__clang_svuint8x4_t'
|-TypedefDecl 0x122888140 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x122828eb0 '__clang_svuint16x4_t'
|-TypedefDecl 0x1228881a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x122828ed0 '__clang_svuint32x4_t'
|-TypedefDecl 0x122888210 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x122828ef0 '__clang_svuint64x4_t'
|-TypedefDecl 0x122888278 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x122828f10 '__clang_svfloat16x4_t'
|-TypedefDecl 0x1228882e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x122828f30 '__clang_svfloat32x4_t'
|-TypedefDecl 0x122888348 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x122828f50 '__clang_svfloat64x4_t'
|-TypedefDecl 0x1228883b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x122828f70 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x122888418 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x122828f90 '__SVBool_t'
|-TypedefDecl 0x122888480 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x122828fb0 '__clang_svboolx2_t'
|-TypedefDecl 0x1228884e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x122828fd0 '__clang_svboolx4_t'
|-TypedefDecl 0x122888550 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x122828ff0 '__SVCount_t'
|-TypedefDecl 0x1228885f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1228885b0 'char *'
|   `-BuiltinType 0x1228282b0 'char'
|-TypedefDecl 0x122888668 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1228885b0 'char *'
|   `-BuiltinType 0x1228282b0 'char'
|-FunctionDecl 0x1228888e8 <dataset_diviso_filec/func17588_nonvuln.c:1:1, line:38:1> line:1:1 invalid readconf_readtime 'int (const char *, int, int)'
| |-ParmVarDecl 0x1228886f0 <col:19, col:33> col:33 used s 'const char *'
| |-ParmVarDecl 0x122888770 <col:36, col:40> col:40 used terminator 'int'
| |-ParmVarDecl 0x1228887f0 <col:52, col:57> col:57 invalid return_msec 'int'
| `-CompoundStmt 0x1228985e0 <line:2:1, line:38:1>
|   |-DeclStmt 0x122888a48 <line:3:1, col:14>
|   | `-VarDecl 0x1228889c0 <col:1, col:13> col:5 used yield 'int' cinit
|   |   `-IntegerLiteral 0x122888a28 <col:13> 'int' 0
|   `-ForStmt 0x1228985a8 <line:4:1, line:36:3>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     `-CompoundStmt 0x122898558 <line:5:3, line:36:3>
|       |-DeclStmt 0x122888b78 <line:6:3, col:19>
|       | |-VarDecl 0x122888a78 <col:3, col:7> col:7 used value 'int'
|       | `-VarDecl 0x122888af8 <col:3, col:14> col:14 used count 'int'
|       |-DeclStmt 0x122888c10 <line:7:3, col:18>
|       | `-VarDecl 0x122888ba8 <col:3, col:10> col:10 used fraction 'double'
|       |-IfStmt 0x1228975d0 <line:9:3, col:29>
|       | |-UnaryOperator 0x122897570 <col:7, col:18> 'int' prefix '!' cannot overflow
|       | | `-CallExpr 0x122897518 <col:8, col:18> 'int'
|       | |   |-ImplicitCastExpr 0x122897500 <col:8> 'int (*)(int)' <FunctionToPointerDecay>
|       | |   | `-DeclRefExpr 0x122897460 <col:8> 'int (int)' Function 0x1228972a0 'isdigit' 'int (int)'
|       | |   `-ImplicitCastExpr 0x122897558 <col:16, col:17> 'int' <IntegralCast>
|       | |     `-ImplicitCastExpr 0x122897540 <col:16, col:17> 'char' <LValueToRValue>
|       | |       `-UnaryOperator 0x1228974b8 <col:16, col:17> 'const char' lvalue prefix '*' cannot overflow
|       | |         `-ImplicitCastExpr 0x1228974a0 <col:17> 'const char *' <LValueToRValue>
|       | |           `-DeclRefExpr 0x122897480 <col:17> 'const char *' lvalue ParmVar 0x1228886f0 's' 'const char *'
|       | `-ReturnStmt 0x1228975c0 <col:21, col:29>
|       |   `-UnaryOperator 0x1228975a8 <col:28, col:29> 'int' prefix '-'
|       |     `-IntegerLiteral 0x122897588 <col:29> 'int' 1
|       |-CompoundAssignOperator 0x122897930 <line:11:3, col:8> 'const char *' '+=' ComputeLHSTy='const char *' ComputeResultTy='const char *'
|       | |-DeclRefExpr 0x1228978d8 <col:3> 'const char *' lvalue ParmVar 0x1228886f0 's' 'const char *'
|       | `-ImplicitCastExpr 0x122897918 <col:8> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x1228978f8 <col:8> 'int' lvalue Var 0x122888af8 'count' 'int'
|       |-SwitchStmt 0x1228979e0 <line:13:3, line:31:5>
|       | |-ImplicitCastExpr 0x1228979c8 <line:13:11, col:12> 'int' <IntegralCast>
|       | | `-ImplicitCastExpr 0x1228979b0 <col:11, col:12> 'char' <LValueToRValue>
|       | |   `-UnaryOperator 0x122897998 <col:11, col:12> 'const char' lvalue prefix '*' cannot overflow
|       | |     `-ImplicitCastExpr 0x122897980 <col:12> 'const char *' <LValueToRValue>
|       | |       `-DeclRefExpr 0x122897960 <col:12> 'const char *' lvalue ParmVar 0x1228886f0 's' 'const char *'
|       | `-CompoundStmt 0x122898270 <line:14:5, line:31:5>
|       |   |-CaseStmt 0x122897a38 <line:15:5, col:24>
|       |   | |-ConstantExpr 0x122897a20 <col:10> 'int'
|       |   | | `-CharacterLiteral 0x122897a08 <col:10> 'int' 119
|       |   | `-CompoundAssignOperator 0x122897aa0 <col:15, col:24> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|       |   |   |-DeclRefExpr 0x122897a60 <col:15> 'int' lvalue Var 0x122888a78 'value' 'int'
|       |   |   `-IntegerLiteral 0x122897a80 <col:24> 'int' 7
|       |   |-CaseStmt 0x122897b00 <line:16:5, col:24>
|       |   | |-ConstantExpr 0x122897ae8 <col:10> 'int'
|       |   | | `-CharacterLiteral 0x122897ad0 <col:10> 'int' 100
|       |   | `-CompoundAssignOperator 0x122897b68 <col:15, col:24> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|       |   |   |-DeclRefExpr 0x122897b28 <col:15> 'int' lvalue Var 0x122888a78 'value' 'int'
|       |   |   `-IntegerLiteral 0x122897b48 <col:24> 'int' 24
|       |   |-CaseStmt 0x122897bc8 <line:17:5, col:24>
|       |   | |-ConstantExpr 0x122897bb0 <col:10> 'int'
|       |   | | `-CharacterLiteral 0x122897b98 <col:10> 'int' 104
|       |   | `-CompoundAssignOperator 0x122897c30 <col:15, col:24> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|       |   |   |-DeclRefExpr 0x122897bf0 <col:15> 'int' lvalue Var 0x122888a78 'value' 'int'
|       |   |   `-IntegerLiteral 0x122897c10 <col:24> 'int' 60
|       |   |-CaseStmt 0x122897c90 <line:18:5, col:24>
|       |   | |-ConstantExpr 0x122897c78 <col:10> 'int'
|       |   | | `-CharacterLiteral 0x122897c60 <col:10> 'int' 109
|       |   | `-CompoundAssignOperator 0x122897cf8 <col:15, col:24> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|       |   |   |-DeclRefExpr 0x122897cb8 <col:15> 'int' lvalue Var 0x122888a78 'value' 'int'
|       |   |   `-IntegerLiteral 0x122897cd8 <col:24> 'int' 60
|       |   |-CaseStmt 0x122897d58 <line:19:5, col:16>
|       |   | |-ConstantExpr 0x122897d40 <col:10> 'int'
|       |   | | `-CharacterLiteral 0x122897d28 <col:10> 'int' 115
|       |   | `-UnaryOperator 0x122897da0 <col:15, col:16> 'const char *' postfix '++'
|       |   |   `-DeclRefExpr 0x122897d80 <col:15> 'const char *' lvalue ParmVar 0x1228886f0 's' 'const char *'
|       |   |-BreakStmt 0x122897db8 <line:20:5>
|       |   |-CaseStmt 0x122897df0 <line:22:5, line:23:31>
|       |   | |-ConstantExpr 0x122897dd8 <line:22:10> 'int'
|       |   | | `-CharacterLiteral 0x122897dc0 <col:10> 'int' 46
|       |   | `-IfStmt 0x122897eb0 <line:23:5, col:31>
|       |   |   |-UnaryOperator 0x122897e50 <col:9, col:10> '<dependent type>' contains-errors prefix '!' cannot overflow
|       |   |   | `-ImplicitCastExpr 0x122897e38 <col:10> '<dependent type>' contains-errors <LValueToRValue>
|       |   |   |   `-RecoveryExpr 0x122897e18 <col:10> '<dependent type>' contains-errors lvalue
|       |   |   `-ReturnStmt 0x122897ea0 <col:23, col:31>
|       |   |     `-UnaryOperator 0x122897e88 <col:30, col:31> 'int' prefix '-'
|       |   |       `-IntegerLiteral 0x122897e68 <col:31> 'int' 1
|       |   |-CompoundAssignOperator 0x122897f60 <line:25:5, col:10> 'const char *' '+=' ComputeLHSTy='const char *' ComputeResultTy='const char *'
|       |   | |-DeclRefExpr 0x122897f08 <col:5> 'const char *' lvalue ParmVar 0x1228886f0 's' 'const char *'
|       |   | `-ImplicitCastExpr 0x122897f48 <col:10> 'int' <LValueToRValue>
|       |   |   `-DeclRefExpr 0x122897f28 <col:10> 'int' lvalue Var 0x122888af8 'count' 'int'
|       |   |-IfStmt 0x122898098 <line:26:5, col:30>
|       |   | |-BinaryOperator 0x122898030 <col:9, col:17> 'int' '!='
|       |   | | |-ImplicitCastExpr 0x122898018 <col:9, col:11> 'int' <IntegralCast>
|       |   | | | `-ImplicitCastExpr 0x122898000 <col:9, col:11> 'char' <LValueToRValue>
|       |   | | |   `-UnaryOperator 0x122897fc8 <col:9, col:11> 'const char' lvalue prefix '*' cannot overflow
|       |   | | |     `-UnaryOperator 0x122897fb0 <col:10, col:11> 'const char *' postfix '++'
|       |   | | |       `-DeclRefExpr 0x122897f90 <col:10> 'const char *' lvalue ParmVar 0x1228886f0 's' 'const char *'
|       |   | | `-CharacterLiteral 0x122897fe0 <col:17> 'int' 115
|       |   | `-ReturnStmt 0x122898088 <col:22, col:30>
|       |   |   `-UnaryOperator 0x122898070 <col:29, col:30> 'int' prefix '-'
|       |   |     `-IntegerLiteral 0x122898050 <col:30> 'int' 1
|       |   |-CompoundAssignOperator 0x1228981d0 <line:27:5, col:37> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|       |   | |-DeclRefExpr 0x1228980b8 <col:5> 'int' lvalue Var 0x1228889c0 'yield' 'int'
|       |   | `-CStyleCastExpr 0x1228981a8 <col:14, col:37> 'int' <FloatingToIntegral>
|       |   |   `-ParenExpr 0x122898188 <col:19, col:37> 'double'
|       |   |     `-BinaryOperator 0x122898130 <col:20, col:31> 'double' '*'
|       |   |       |-ImplicitCastExpr 0x122898118 <col:20> 'double' <LValueToRValue>
|       |   |       | `-DeclRefExpr 0x1228980d8 <col:20> 'double' lvalue Var 0x122888ba8 'fraction' 'double'
|       |   |       `-FloatingLiteral 0x1228980f8 <col:31> 'double' 1.000000e+03
|       |   |-BreakStmt 0x122898200 <line:28:5>
|       |   `-DefaultStmt 0x122898250 <line:30:5, col:22>
|       |     `-ReturnStmt 0x122898240 <col:14, col:22>
|       |       `-UnaryOperator 0x122898228 <col:21, col:22> 'int' prefix '-'
|       |         `-IntegerLiteral 0x122898208 <col:22> 'int' 1
|       |-IfStmt 0x122898370 <line:33:3, col:29>
|       | |-RecoveryExpr 0x1228982e0 <col:7> '<dependent type>' contains-errors lvalue
|       | `-CompoundAssignOperator 0x122898340 <col:20, col:29> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|       |   |-DeclRefExpr 0x122898300 <col:20> 'int' lvalue Var 0x122888a78 'value' 'int'
|       |   `-IntegerLiteral 0x122898320 <col:29> 'int' 1000
|       |-CompoundAssignOperator 0x1228983e8 <line:34:3, col:12> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|       | |-DeclRefExpr 0x122898390 <col:3> 'int' lvalue Var 0x1228889c0 'yield' 'int'
|       | `-ImplicitCastExpr 0x1228983d0 <col:12> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x1228983b0 <col:12> 'int' lvalue Var 0x122888a78 'value' 'int'
|       `-IfStmt 0x122898538 <line:35:3, col:32>
|         |-BinaryOperator 0x1228984d0 <col:7, col:13> 'int' '=='
|         | |-ImplicitCastExpr 0x1228984b8 <col:7, col:8> 'int' <IntegralCast>
|         | | `-ImplicitCastExpr 0x122898488 <col:7, col:8> 'char' <LValueToRValue>
|         | |   `-UnaryOperator 0x122898450 <col:7, col:8> 'const char' lvalue prefix '*' cannot overflow
|         | |     `-ImplicitCastExpr 0x122898438 <col:8> 'const char *' <LValueToRValue>
|         | |       `-DeclRefExpr 0x122898418 <col:8> 'const char *' lvalue ParmVar 0x1228886f0 's' 'const char *'
|         | `-ImplicitCastExpr 0x1228984a0 <col:13> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x122898468 <col:13> 'int' lvalue ParmVar 0x122888770 'terminator' 'int'
|         `-ReturnStmt 0x122898528 <col:25, col:32>
|           `-ImplicitCastExpr 0x122898510 <col:32> 'int' <LValueToRValue>
|             `-DeclRefExpr 0x1228984f0 <col:32> 'int' lvalue Var 0x1228889c0 'yield' 'int'
|-FunctionDecl 0x1228972a0 <line:9:8> col:8 implicit used isdigit 'int (int)' extern
| |-ParmVarDecl 0x1228973a0 <<invalid sloc>> <invalid sloc> 'int'
| |-BuiltinAttr 0x122897348 <<invalid sloc>> Implicit 924
| |-NoThrowAttr 0x122897410 <col:8> Implicit
| `-PureAttr 0x122897438 <col:8> Implicit
`-FunctionDecl 0x122897688 <line:10:9> col:9 implicit used sscanf 'int (const char *restrict, const char *restrict, ...)' extern
  |-ParmVarDecl 0x122897788 <<invalid sloc>> <invalid sloc> 'const char *restrict'
  |-ParmVarDecl 0x1228977f0 <<invalid sloc>> <invalid sloc> 'const char *restrict'
  |-BuiltinAttr 0x122897730 <<invalid sloc>> Implicit 913
  `-FormatAttr 0x122897868 <col:9> Implicit scanf 2 3
