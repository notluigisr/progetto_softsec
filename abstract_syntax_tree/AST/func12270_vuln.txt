TranslationUnitDecl 0x12d855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x12d8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x12d855bd0 '__int128'
|-TypedefDecl 0x12d856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x12d855bf0 'unsigned __int128'
|-TypedefDecl 0x12e00be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12e00bc00 'struct __NSConstantString_tag'
|   `-Record 0x12d856580 '__NSConstantString_tag'
|-TypedefDecl 0x12e00be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x12d855d90 '__SVInt8_t'
|-TypedefDecl 0x12e00bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x12d855db0 '__SVInt16_t'
|-TypedefDecl 0x12e00bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x12d855dd0 '__SVInt32_t'
|-TypedefDecl 0x12e00bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x12d855df0 '__SVInt64_t'
|-TypedefDecl 0x12e00c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x12d855e10 '__SVUint8_t'
|-TypedefDecl 0x12e00c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x12d855e30 '__SVUint16_t'
|-TypedefDecl 0x12e00c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x12d855e50 '__SVUint32_t'
|-TypedefDecl 0x12e00c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x12d855e70 '__SVUint64_t'
|-TypedefDecl 0x12e00c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x12d855e90 '__SVFloat16_t'
|-TypedefDecl 0x12e00c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x12d855eb0 '__SVFloat32_t'
|-TypedefDecl 0x12e00c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x12d855ed0 '__SVFloat64_t'
|-TypedefDecl 0x12e00c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x12d855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12e00c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x12d855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12e00c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x12d855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12e00c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x12d855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12e00c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x12d855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12e00c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x12d855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12e00c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x12d855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12e00c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x12d855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12e00c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x12d855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12e00c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x12d856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12e00c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x12d856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12e00c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x12d856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12e00c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x12d856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12e00c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x12d856090 '__clang_svint8x3_t'
|-TypedefDecl 0x12e00c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x12d8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12e00c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x12d8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12e00c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x12d8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12e00c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x12d856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12e00ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x12d856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12e00cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x12d856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12e00cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x12d856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12e00cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x12d856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12e00d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x12d8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12e00d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x12d8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12e00d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x12d8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12e00d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x12d856210 '__clang_svint8x4_t'
|-TypedefDecl 0x12e00d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x12d856230 '__clang_svint16x4_t'
|-TypedefDecl 0x12e00d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x12d856250 '__clang_svint32x4_t'
|-TypedefDecl 0x12e00d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x12d856270 '__clang_svint64x4_t'
|-TypedefDecl 0x12e00d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x12d856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12e00d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x12d8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12e00d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x12d8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12e00d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x12d8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12e00d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x12d856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12e00d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x12d856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12e00d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x12d856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12e00d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x12d856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12e00da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x12d856390 '__SVBool_t'
|-TypedefDecl 0x12e00da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x12d8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12e00dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x12d8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12e00db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x12d8563f0 '__SVCount_t'
|-TypedefDecl 0x12e00dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12e00dbb0 'char *'
|   `-BuiltinType 0x12d8556b0 'char'
|-TypedefDecl 0x12e00dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12e00dbb0 'char *'
|   `-BuiltinType 0x12d8556b0 'char'
`-FunctionDecl 0x12e00e0b8 <dataset_diviso_filec/func12270_vuln.c:2:1, line:51:13> line:2:16 invalid js_sys_basecode_ex 'int (int *, int, int, int *, _Bool, _Bool)' static
  |-ParmVarDecl 0x12e00dd28 <col:35, col:46> col:46 invalid ctx 'int *'
  |-ParmVarDecl 0x12e00dda8 <col:51, col:64> col:64 invalid this_val 'int'
  |-ParmVarDecl 0x12e00de28 <col:74, col:78> col:78 used argc 'int'
  |-ParmVarDecl 0x12e00dea8 <col:84, col:98> col:98 invalid argv 'int *'
  |-ParmVarDecl 0x12e00df20 <col:104, col:109> col:109 used is_dec '_Bool'
  |-ParmVarDecl 0x12e00df98 <col:117, col:122> col:122 used is_16 '_Bool'
  `-CompoundStmt 0x12e027e00 <line:3:1, line:51:13>
    |-IfStmt 0x12d922e00 <line:8:2, col:39>
    | |-UnaryOperator 0x12e00e1f8 <col:6, col:7> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x12e00e1e0 <col:7> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x12e00e1c0 <col:7> 'int' lvalue ParmVar 0x12e00de28 'argc' 'int'
    | `-ReturnStmt 0x12e00e3d8 <col:13, col:39>
    |   `-CallExpr 0x12e00e3b0 <col:20, col:39> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x12e00e370 <col:20> 'int ()' Function 0x12e00e2b8 'GF_JS_EXCEPTION' 'int ()'
    |     `-RecoveryExpr 0x12e00e390 <col:36> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x12e027888 <line:10:2, line:41:2> has_else
    | |-ImplicitCastExpr 0x12d922e40 <line:10:6> '_Bool' <LValueToRValue>
    | | `-DeclRefExpr 0x12d922e20 <col:6> '_Bool' lvalue ParmVar 0x12e00df20 'is_dec' '_Bool'
    | |-CompoundStmt 0x12d923728 <col:14, line:26:2>
    | | |-DeclStmt 0x12d9230a0 <line:12:3, col:47>
    | | | `-VarDecl 0x12d922e70 <col:3, col:46> col:15 used str 'const char *' cinit
    | | |   `-CallExpr 0x12d923070 <col:21, col:46> '<dependent type>' contains-errors
    | | |     |-DeclRefExpr 0x12d922fb8 <col:21> 'int ()' Function 0x12d922f00 'JS_ToCString' 'int ()'
    | | |     |-RecoveryExpr 0x12d922fd8 <col:34> '<dependent type>' contains-errors lvalue
    | | |     `-ArraySubscriptExpr 0x12d923050 <col:39, col:45> '<dependent type>' contains-errors lvalue
    | | |       |-ImplicitCastExpr 0x12d923038 <col:39> '<dependent type>' contains-errors <LValueToRValue>
    | | |       | `-RecoveryExpr 0x12d922ff8 <col:39> '<dependent type>' contains-errors lvalue
    | | |       `-IntegerLiteral 0x12d923018 <col:44> 'int' 0
    | | |-IfStmt 0x12d923180 <line:13:3, col:39>
    | | | |-UnaryOperator 0x12d9230f0 <col:7, col:8> 'int' contains-errors prefix '!' cannot overflow
    | | | | `-ImplicitCastExpr 0x12d9230d8 <col:8> 'const char *' contains-errors <LValueToRValue>
    | | | |   `-DeclRefExpr 0x12d9230b8 <col:8> 'const char *' contains-errors lvalue Var 0x12d922e70 'str' 'const char *'
    | | | `-ReturnStmt 0x12d923170 <col:13, col:39>
    | | |   `-CallExpr 0x12d923148 <col:20, col:39> '<dependent type>' contains-errors
    | | |     |-DeclRefExpr 0x12d923108 <col:20> 'int ()' Function 0x12e00e2b8 'GF_JS_EXCEPTION' 'int ()'
    | | |     `-RecoveryExpr 0x12d923128 <col:36> '<dependent type>' contains-errors lvalue
    | | |-IfStmt 0x12d923588 <line:16:3, line:24:3> has_else
    | | | |-RecoveryExpr 0x12d9232d0 <line:16:7, col:8> '_Bool' contains-errors
    | | | |-CompoundStmt 0x12d9232f0 <col:17, line:18:3>
    | | | `-IfStmt 0x12d923558 <col:10, line:24:3> has_else
    | | |   |-ImplicitCastExpr 0x12d923320 <line:18:14> '_Bool' <LValueToRValue>
    | | |   | `-DeclRefExpr 0x12d923300 <col:14> '_Bool' lvalue ParmVar 0x12e00df98 'is_16' '_Bool'
    | | |   |-CompoundStmt 0x12d923438 <col:21, line:21:3>
    | | |   `-CompoundStmt 0x12d923548 <col:10, line:24:3>
    | | `-CallExpr 0x12d9236f8 <line:25:3, col:26> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x12d923698 <col:3> 'int ()' Function 0x12d9235e0 'JS_FreeCString' 'int ()'
    | |   |-RecoveryExpr 0x12d9236b8 <col:18> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x12d9236d8 <col:23> 'const char *' contains-errors lvalue Var 0x12d922e70 'str' 'const char *'
    | `-CompoundStmt 0x12e027860 <line:26:9, line:41:2>
    |   |-DeclStmt 0x12d9237d8 <line:27:3, col:17>
    |   | `-VarDecl 0x12d923770 <col:3, col:13> col:13 referenced invalid data 'const int *'
    |   |-IfStmt 0x12d923a98 <line:30:3, col:40>
    |   | |-UnaryOperator 0x12d923a08 <col:7, col:8> '<dependent type>' contains-errors prefix '!' cannot overflow
    |   | | `-ImplicitCastExpr 0x12d9239f0 <col:8> '<dependent type>' contains-errors <LValueToRValue>
    |   | |   `-RecoveryExpr 0x12d9239d0 <col:8> '<dependent type>' contains-errors lvalue
    |   | `-ReturnStmt 0x12d923a88 <col:14, col:40>
    |   |   `-CallExpr 0x12d923a60 <col:21, col:40> '<dependent type>' contains-errors
    |   |     |-DeclRefExpr 0x12d923a20 <col:21> 'int ()' Function 0x12e00e2b8 'GF_JS_EXCEPTION' 'int ()'
    |   |     `-RecoveryExpr 0x12d923a40 <col:37> '<dependent type>' contains-errors lvalue
    |   `-IfStmt 0x12e027830 <line:32:3, line:40:3> has_else
    |     |-RecoveryExpr 0x12d923b18 <line:32:7, col:8> '_Bool' contains-errors
    |     |-CompoundStmt 0x12d923b38 <col:17, line:34:3>
    |     `-IfStmt 0x12e027800 <col:10, line:40:3> has_else
    |       |-ImplicitCastExpr 0x12d923b68 <line:34:14> '_Bool' <LValueToRValue>
    |       | `-DeclRefExpr 0x12d923b48 <col:14> '_Bool' lvalue ParmVar 0x12e00df98 'is_16' '_Bool'
    |       |-CompoundStmt 0x12d923ca0 <col:21, line:37:3>
    |       `-CompoundStmt 0x12d923dd0 <col:10, line:40:3>
    `-IfStmt 0x12e027dd0 <line:44:2, line:50:2> has_else
      |-ImplicitCastExpr 0x12e027a18 <line:44:6> '_Bool' <LValueToRValue>
      | `-DeclRefExpr 0x12e0279f8 <col:6> '_Bool' lvalue ParmVar 0x12e00df20 'is_dec' '_Bool'
      |-CompoundStmt 0x12e027b70 <col:14, line:46:2>
      `-CompoundStmt 0x12e027dc0 <col:9, line:50:2>
