TranslationUnitDecl 0x153855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1538564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x153855bd0 '__int128'
|-TypedefDecl 0x153856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x153855bf0 'unsigned __int128'
|-TypedefDecl 0x15400be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x15400bc00 'struct __NSConstantString_tag'
|   `-Record 0x153856580 '__NSConstantString_tag'
|-TypedefDecl 0x15400be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x153855d90 '__SVInt8_t'
|-TypedefDecl 0x15400bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x153855db0 '__SVInt16_t'
|-TypedefDecl 0x15400bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x153855dd0 '__SVInt32_t'
|-TypedefDecl 0x15400bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x153855df0 '__SVInt64_t'
|-TypedefDecl 0x15400c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x153855e10 '__SVUint8_t'
|-TypedefDecl 0x15400c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x153855e30 '__SVUint16_t'
|-TypedefDecl 0x15400c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x153855e50 '__SVUint32_t'
|-TypedefDecl 0x15400c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x153855e70 '__SVUint64_t'
|-TypedefDecl 0x15400c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x153855e90 '__SVFloat16_t'
|-TypedefDecl 0x15400c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x153855eb0 '__SVFloat32_t'
|-TypedefDecl 0x15400c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x153855ed0 '__SVFloat64_t'
|-TypedefDecl 0x15400c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x153855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x15400c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x153855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x15400c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x153855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x15400c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x153855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x15400c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x153855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x15400c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x153855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x15400c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x153855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x15400c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x153855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x15400c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x153855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x15400c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x153856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x15400c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x153856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x15400c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x153856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x15400c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x153856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x15400c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x153856090 '__clang_svint8x3_t'
|-TypedefDecl 0x15400c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1538560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x15400c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1538560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x15400c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1538560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x15400c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x153856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x15400ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x153856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x15400cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x153856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x15400cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x153856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x15400cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x153856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x15400d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1538561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x15400d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1538561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x15400d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1538561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x15400d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x153856210 '__clang_svint8x4_t'
|-TypedefDecl 0x15400d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x153856230 '__clang_svint16x4_t'
|-TypedefDecl 0x15400d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x153856250 '__clang_svint32x4_t'
|-TypedefDecl 0x15400d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x153856270 '__clang_svint64x4_t'
|-TypedefDecl 0x15400d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x153856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x15400d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1538562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x15400d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1538562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x15400d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1538562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x15400d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x153856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x15400d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x153856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x15400d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x153856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x15400d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x153856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x15400da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x153856390 '__SVBool_t'
|-TypedefDecl 0x15400da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1538563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x15400dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1538563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x15400db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1538563f0 '__SVCount_t'
|-TypedefDecl 0x15400dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x15400dbb0 'char *'
|   `-BuiltinType 0x1538556b0 'char'
|-TypedefDecl 0x15400dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x15400dbb0 'char *'
|   `-BuiltinType 0x1538556b0 'char'
|-FunctionDecl 0x154027758 <dataset_diviso_filec/func24454_vuln.c:1:1, line:40:1> line:1:1 invalid bgp_log_error 'int (struct bgp_proto *, int, char *, unsigned int, unsigned int, int *, unsigned int)'
| |-ParmVarDecl 0x15400e248 <col:15, col:33> col:33 used p 'struct bgp_proto *'
| |-ParmVarDecl 0x15400e2e0 <col:36, col:39> col:39 invalid class 'int'
| |-ParmVarDecl 0x15400e360 <col:46, col:52> col:52 used msg 'char *'
| |-ParmVarDecl 0x154027400 <col:57, col:66> col:66 used code 'unsigned int'
| |-ParmVarDecl 0x154027480 <col:72, col:81> col:81 used subcode 'unsigned int'
| |-ParmVarDecl 0x154027538 <col:90, col:96> col:96 invalid data 'int *'
| |-ParmVarDecl 0x1540275b8 <col:102, col:111> col:111 used len 'unsigned int'
| `-CompoundStmt 0x15402b460 <line:2:1, line:40:1>
|   |-DeclStmt 0x1540278b8 <line:4:3, col:13>
|   | `-VarDecl 0x154027850 <col:3, col:12> col:12 used i 'unsigned int'
|   |-IfStmt 0x154027ae8 <line:7:3, line:8:5>
|   | |-BinaryOperator 0x154027ab8 <line:7:7, col:29> 'int' contains-errors '&&'
|   | | |-BinaryOperator 0x154027a58 <col:7, col:15> 'int' '=='
|   | | | |-ImplicitCastExpr 0x154027a28 <col:7> 'unsigned int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x1540278d0 <col:7> 'unsigned int' lvalue ParmVar 0x154027400 'code' 'unsigned int'
|   | | | `-ImplicitCastExpr 0x154027a40 <col:15> 'unsigned int' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1540278f0 <col:15> 'int' 6
|   | | `-BinaryOperator 0x154027a98 <col:20, col:29> 'int' contains-errors '=='
|   | |   |-RecoveryExpr 0x154027960 <col:20> '<dependent type>' contains-errors lvalue
|   | |   `-RecoveryExpr 0x154027a78 <col:29> '<dependent type>' contains-errors lvalue
|   | `-ReturnStmt 0x154027ad8 <line:8:5>
|   |-IfStmt 0x154028030 <line:11:3, line:12:37>
|   | |-BinaryOperator 0x154027d58 <line:11:7, col:55> 'int' '&&'
|   | | |-ParenExpr 0x154027b98 <col:7, col:17> 'int'
|   | | | `-BinaryOperator 0x154027b78 <col:8, col:16> 'int' '=='
|   | | |   |-ImplicitCastExpr 0x154027b48 <col:8> 'unsigned int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x154027b08 <col:8> 'unsigned int' lvalue ParmVar 0x154027400 'code' 'unsigned int'
|   | | |   `-ImplicitCastExpr 0x154027b60 <col:16> 'unsigned int' <IntegralCast>
|   | | |     `-IntegerLiteral 0x154027b28 <col:16> 'int' 6
|   | | `-ParenExpr 0x154027d38 <col:22, col:55> 'int'
|   | |   `-BinaryOperator 0x154027d18 <col:23, col:54> 'int' '||'
|   | |     |-ParenExpr 0x154027c48 <col:23, col:36> 'int'
|   | |     | `-BinaryOperator 0x154027c28 <col:24, col:35> 'int' '=='
|   | |     |   |-ImplicitCastExpr 0x154027bf8 <col:24> 'unsigned int' <LValueToRValue>
|   | |     |   | `-DeclRefExpr 0x154027bb8 <col:24> 'unsigned int' lvalue ParmVar 0x154027480 'subcode' 'unsigned int'
|   | |     |   `-ImplicitCastExpr 0x154027c10 <col:35> 'unsigned int' <IntegralCast>
|   | |     |     `-IntegerLiteral 0x154027bd8 <col:35> 'int' 2
|   | |     `-ParenExpr 0x154027cf8 <col:41, col:54> 'int'
|   | |       `-BinaryOperator 0x154027cd8 <col:42, col:53> 'int' '=='
|   | |         |-ImplicitCastExpr 0x154027ca8 <col:42> 'unsigned int' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x154027c68 <col:42> 'unsigned int' lvalue ParmVar 0x154027480 'subcode' 'unsigned int'
|   | |         `-ImplicitCastExpr 0x154027cc0 <col:53> 'unsigned int' <IntegralCast>
|   | |           `-IntegerLiteral 0x154027c88 <col:53> 'int' 4
|   | `-CallExpr 0x154027ff8 <line:12:5, col:37> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x154027ed0 <col:5> 'int ()' Function 0x154027e18 'proto_set_message' 'int ()'
|   |   |-UnaryOperator 0x154027f50 <col:23, col:27> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   | `-RecoveryExpr 0x154027f28 <col:24, col:27> '<dependent type>' contains-errors lvalue
|   |   |   `-DeclRefExpr 0x154027ef0 <col:24> 'struct bgp_proto *' lvalue ParmVar 0x15400e248 'p' 'struct bgp_proto *'
|   |   |-RecoveryExpr 0x154027fd8 <col:30> '<dependent type>' contains-errors lvalue
|   |   `-IntegerLiteral 0x154027f80 <col:36> 'int' 0
|   |-IfStmt 0x15402ae70 <line:14:3, line:34:5>
|   | |-ImplicitCastExpr 0x154028070 <line:14:7> 'unsigned int' <LValueToRValue>
|   | | `-DeclRefExpr 0x154028050 <col:7> 'unsigned int' lvalue ParmVar 0x1540275b8 'len' 'unsigned int'
|   | `-CompoundStmt 0x15402ae38 <line:15:5, line:34:5>
|   |   |-IfStmt 0x154029f78 <line:17:7, line:21:2>
|   |   | |-BinaryOperator 0x1540283a8 <line:17:11, col:69> 'int' '&&'
|   |   | | |-BinaryOperator 0x1540281e8 <col:11, col:39> 'int' '&&'
|   |   | | | |-ParenExpr 0x154028118 <col:11, col:21> 'int'
|   |   | | | | `-BinaryOperator 0x1540280f8 <col:12, col:20> 'int' '=='
|   |   | | | |   |-ImplicitCastExpr 0x1540280c8 <col:12> 'unsigned int' <LValueToRValue>
|   |   | | | |   | `-DeclRefExpr 0x154028088 <col:12> 'unsigned int' lvalue ParmVar 0x154027400 'code' 'unsigned int'
|   |   | | | |   `-ImplicitCastExpr 0x1540280e0 <col:20> 'unsigned int' <IntegralCast>
|   |   | | | |     `-IntegerLiteral 0x1540280a8 <col:20> 'int' 2
|   |   | | | `-ParenExpr 0x1540281c8 <col:26, col:39> 'int'
|   |   | | |   `-BinaryOperator 0x1540281a8 <col:27, col:38> 'int' '=='
|   |   | | |     |-ImplicitCastExpr 0x154028178 <col:27> 'unsigned int' <LValueToRValue>
|   |   | | |     | `-DeclRefExpr 0x154028138 <col:27> 'unsigned int' lvalue ParmVar 0x154027480 'subcode' 'unsigned int'
|   |   | | |     `-ImplicitCastExpr 0x154028190 <col:38> 'unsigned int' <IntegralCast>
|   |   | | |       `-IntegerLiteral 0x154028158 <col:38> 'int' 2
|   |   | | `-ParenExpr 0x154028388 <col:44, col:69> 'int'
|   |   | |   `-BinaryOperator 0x154028368 <col:45, col:68> 'int' '||'
|   |   | |     |-ParenExpr 0x154028298 <col:45, col:54> 'int'
|   |   | |     | `-BinaryOperator 0x154028278 <col:46, col:53> 'int' '=='
|   |   | |     |   |-ImplicitCastExpr 0x154028248 <col:46> 'unsigned int' <LValueToRValue>
|   |   | |     |   | `-DeclRefExpr 0x154028208 <col:46> 'unsigned int' lvalue ParmVar 0x1540275b8 'len' 'unsigned int'
|   |   | |     |   `-ImplicitCastExpr 0x154028260 <col:53> 'unsigned int' <IntegralCast>
|   |   | |     |     `-IntegerLiteral 0x154028228 <col:53> 'int' 2
|   |   | |     `-ParenExpr 0x154028348 <col:59, col:68> 'int'
|   |   | |       `-BinaryOperator 0x154028328 <col:60, col:67> 'int' '=='
|   |   | |         |-ImplicitCastExpr 0x1540282f8 <col:60> 'unsigned int' <LValueToRValue>
|   |   | |         | `-DeclRefExpr 0x1540282b8 <col:60> 'unsigned int' lvalue ParmVar 0x1540275b8 'len' 'unsigned int'
|   |   | |         `-ImplicitCastExpr 0x154028310 <col:67> 'unsigned int' <IntegralCast>
|   |   | |           `-IntegerLiteral 0x1540282d8 <col:67> 'int' 4
|   |   | `-CompoundStmt 0x154029f60 <line:18:2, line:21:2>
|   |   |   `-GotoStmt 0x154029f48 <line:20:4, col:9> 'done' 0x154029ef8
|   |   |-IfStmt 0x15402a4a8 <line:24:7, line:26:9>
|   |   | |-ParenExpr 0x15402a208 <line:24:11, col:61> 'int'
|   |   | | `-BinaryOperator 0x15402a1e8 <col:12, col:60> 'int' '&&'
|   |   | |   |-ParenExpr 0x15402a028 <col:12, col:22> 'int'
|   |   | |   | `-BinaryOperator 0x15402a008 <col:13, col:21> 'int' '=='
|   |   | |   |   |-ImplicitCastExpr 0x154029fd8 <col:13> 'unsigned int' <LValueToRValue>
|   |   | |   |   | `-DeclRefExpr 0x154029f98 <col:13> 'unsigned int' lvalue ParmVar 0x154027400 'code' 'unsigned int'
|   |   | |   |   `-ImplicitCastExpr 0x154029ff0 <col:21> 'unsigned int' <IntegralCast>
|   |   | |   |     `-IntegerLiteral 0x154029fb8 <col:21> 'int' 6
|   |   | |   `-ParenExpr 0x15402a1c8 <col:27, col:60> 'int'
|   |   | |     `-BinaryOperator 0x15402a1a8 <col:28, col:59> 'int' '||'
|   |   | |       |-ParenExpr 0x15402a0d8 <col:28, col:41> 'int'
|   |   | |       | `-BinaryOperator 0x15402a0b8 <col:29, col:40> 'int' '=='
|   |   | |       |   |-ImplicitCastExpr 0x15402a088 <col:29> 'unsigned int' <LValueToRValue>
|   |   | |       |   | `-DeclRefExpr 0x15402a048 <col:29> 'unsigned int' lvalue ParmVar 0x154027480 'subcode' 'unsigned int'
|   |   | |       |   `-ImplicitCastExpr 0x15402a0a0 <col:40> 'unsigned int' <IntegralCast>
|   |   | |       |     `-IntegerLiteral 0x15402a068 <col:40> 'int' 2
|   |   | |       `-ParenExpr 0x15402a188 <col:46, col:59> 'int'
|   |   | |         `-BinaryOperator 0x15402a168 <col:47, col:58> 'int' '=='
|   |   | |           |-ImplicitCastExpr 0x15402a138 <col:47> 'unsigned int' <LValueToRValue>
|   |   | |           | `-DeclRefExpr 0x15402a0f8 <col:47> 'unsigned int' lvalue ParmVar 0x154027480 'subcode' 'unsigned int'
|   |   | |           `-ImplicitCastExpr 0x15402a150 <col:58> 'unsigned int' <IntegralCast>
|   |   | |             `-IntegerLiteral 0x15402a118 <col:58> 'int' 4
|   |   | `-IfStmt 0x15402a488 <line:25:2, line:26:9>
|   |   |   |-CallExpr 0x15402a430 <line:25:6, col:41> '<dependent type>' contains-errors
|   |   |   | |-DeclRefExpr 0x15402a308 <col:6> 'int ()' Function 0x15402a250 'bgp_handle_message' 'int ()'
|   |   |   | |-DeclRefExpr 0x15402a328 <col:25> 'struct bgp_proto *' lvalue ParmVar 0x15400e248 'p' 'struct bgp_proto *'
|   |   |   | |-RecoveryExpr 0x15402a348 <col:28> '<dependent type>' contains-errors lvalue
|   |   |   | |-DeclRefExpr 0x15402a368 <col:34> 'unsigned int' lvalue ParmVar 0x1540275b8 'len' 'unsigned int'
|   |   |   | `-UnaryOperator 0x15402a418 <col:39, col:40> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   |   |   `-RecoveryExpr 0x15402a3f8 <col:40> '<dependent type>' contains-errors lvalue
|   |   |   `-GotoStmt 0x15402a470 <line:26:4, col:9> 'done' 0x154029ef8
|   |   |-BinaryOperator 0x15402a598 <line:28:7, col:14> '<dependent type>' contains-errors '='
|   |   | |-UnaryOperator 0x15402a580 <col:7, col:9> '<dependent type>' contains-errors prefix '*' cannot overflow
|   |   | | `-UnaryOperator 0x15402a568 <col:8, col:9> '<dependent type>' contains-errors postfix '++' cannot overflow
|   |   | |   `-RecoveryExpr 0x15402a548 <col:8> '<dependent type>' contains-errors lvalue
|   |   | `-CharacterLiteral 0x15402a510 <col:14> 'int' 58
|   |   |-BinaryOperator 0x15402a688 <line:29:7, col:14> '<dependent type>' contains-errors '='
|   |   | |-UnaryOperator 0x15402a670 <col:7, col:9> '<dependent type>' contains-errors prefix '*' cannot overflow
|   |   | | `-UnaryOperator 0x15402a658 <col:8, col:9> '<dependent type>' contains-errors postfix '++' cannot overflow
|   |   | |   `-RecoveryExpr 0x15402a638 <col:8> '<dependent type>' contains-errors lvalue
|   |   | `-CharacterLiteral 0x15402a600 <col:14> 'int' 32
|   |   `-IfStmt 0x15402a7b0 <line:30:7, line:31:8>
|   |     |-BinaryOperator 0x15402a718 <line:30:11, col:17> 'int' '>'
|   |     | |-ImplicitCastExpr 0x15402a6e8 <col:11> 'unsigned int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x15402a6a8 <col:11> 'unsigned int' lvalue ParmVar 0x1540275b8 'len' 'unsigned int'
|   |     | `-ImplicitCastExpr 0x15402a700 <col:17> 'unsigned int' <IntegralCast>
|   |     |   `-IntegerLiteral 0x15402a6c8 <col:17> 'int' 16
|   |     `-BinaryOperator 0x15402a790 <line:31:2, col:8> 'unsigned int' '='
|   |       |-DeclRefExpr 0x15402a738 <col:2> 'unsigned int' lvalue ParmVar 0x1540275b8 'len' 'unsigned int'
|   |       `-ImplicitCastExpr 0x15402a778 <col:8> 'unsigned int' <IntegralCast>
|   |         `-IntegerLiteral 0x15402a758 <col:8> 'int' 16
|   |-LabelStmt 0x15402aeb8 <line:36:1, col:5> 'done'
|   | `-NullStmt 0x15402aeb0 <col:5>
|   `-DeclStmt 0x15402b148 <line:38:3, col:49>
|     `-VarDecl 0x15402aef0 <col:3, col:15> col:15 invalid dsc 'const int *'
`-FunctionDecl 0x15402b198 <line:39:3> col:3 implicit used log 'double (double)' extern
  |-ParmVarDecl 0x15402b298 <<invalid sloc>> <invalid sloc> 'double'
  |-BuiltinAttr 0x15402b240 <<invalid sloc>> Implicit 1106
  |-ConstAttr 0x15402b308 <col:3> Implicit
  `-NoThrowAttr 0x15402b330 <col:3> Implicit
