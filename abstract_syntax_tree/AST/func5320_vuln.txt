TranslationUnitDecl 0x159055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1590564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x159055bd0 '__int128'
|-TypedefDecl 0x159056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x159055bf0 'unsigned __int128'
|-TypedefDecl 0x159126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x159126000 'struct __NSConstantString_tag'
|   `-Record 0x159056580 '__NSConstantString_tag'
|-TypedefDecl 0x159126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x159055d90 '__SVInt8_t'
|-TypedefDecl 0x159126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x159055db0 '__SVInt16_t'
|-TypedefDecl 0x159126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x159055dd0 '__SVInt32_t'
|-TypedefDecl 0x1591263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x159055df0 '__SVInt64_t'
|-TypedefDecl 0x159126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x159055e10 '__SVUint8_t'
|-TypedefDecl 0x1591264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x159055e30 '__SVUint16_t'
|-TypedefDecl 0x159126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x159055e50 '__SVUint32_t'
|-TypedefDecl 0x159126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x159055e70 '__SVUint64_t'
|-TypedefDecl 0x1591265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x159055e90 '__SVFloat16_t'
|-TypedefDecl 0x159126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x159055eb0 '__SVFloat32_t'
|-TypedefDecl 0x1591266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x159055ed0 '__SVFloat64_t'
|-TypedefDecl 0x159126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x159055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x159126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x159055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1591267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x159055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x159126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x159055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1591268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x159055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x159126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x159055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x159126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x159055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1591269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x159055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x159126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x159055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x159126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x159056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x159126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x159056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x159126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x159056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x159126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x159056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x159126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x159056090 '__clang_svint8x3_t'
|-TypedefDecl 0x159126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1590560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x159126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1590560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x159126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1590560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x159126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x159056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x159126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x159056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x159126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x159056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x159126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x159056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x159126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x159056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x159127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1590561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x159127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1590561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1591278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1590561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x159127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x159056210 '__clang_svint8x4_t'
|-TypedefDecl 0x1591279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x159056230 '__clang_svint16x4_t'
|-TypedefDecl 0x159127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x159056250 '__clang_svint32x4_t'
|-TypedefDecl 0x159127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x159056270 '__clang_svint64x4_t'
|-TypedefDecl 0x159127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x159056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x159127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1590562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x159127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1590562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x159127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1590562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x159127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x159056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x159127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x159056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x159127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x159056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x159127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x159056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x159127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x159056390 '__SVBool_t'
|-TypedefDecl 0x159127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1590563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x159127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1590563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x159127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1590563f0 '__SVCount_t'
|-TypedefDecl 0x159127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x159127fb0 'char *'
|   `-BuiltinType 0x1590556b0 'char'
|-TypedefDecl 0x159128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x159127fb0 'char *'
|   `-BuiltinType 0x1590556b0 'char'
|-FunctionDecl 0x159128288 <dataset_diviso_filec/func5320_vuln.c:1:1, line:30:1> line:1:20 invalid parse_value 'const char *(int *, const char *)' static
| |-ParmVarDecl 0x159128128 <col:33, col:40> col:40 referenced invalid item 'int *'
| |-ParmVarDecl 0x1591281a8 <col:46, col:58> col:58 used value 'const char *'
| `-CompoundStmt 0x159143810 <line:2:1, line:30:1>
|   |-IfStmt 0x1591283d8 <line:3:2, line:4:10>
|   | |-UnaryOperator 0x159128378 <line:3:7, col:9> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x159128360 <col:9> 'const char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x159128340 <col:9> 'const char *' lvalue ParmVar 0x1591281a8 'value' 'const char *'
|   | `-ReturnStmt 0x1591283c8 <line:4:3, col:10>
|   |   `-ImplicitCastExpr 0x1591283b0 <col:10> 'const char *' <NullToPointer>
|   |     `-IntegerLiteral 0x159128390 <col:10> 'int' 0
|   |-IfStmt 0x159141e78 <line:5:2, line:8:2>
|   | |-UnaryOperator 0x159141cb0 <line:5:7, col:34> 'int' prefix '!' cannot overflow
|   | | `-CallExpr 0x159141c18 <col:9, col:34> 'int'
|   | |   |-ImplicitCastExpr 0x159141c00 <col:9> 'int (*)(const char *, const char *, unsigned long)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x159141ae0 <col:9> 'int (const char *, const char *, unsigned long)' Function 0x159141890 'strncmp' 'int (const char *, const char *, unsigned long)'
|   | |   |-ImplicitCastExpr 0x159141c50 <col:18> 'const char *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x159141b00 <col:18> 'const char *' lvalue ParmVar 0x1591281a8 'value' 'const char *'
|   | |   |-ImplicitCastExpr 0x159141c80 <col:25> 'const char *' <NoOp>
|   | |   | `-ImplicitCastExpr 0x159141c68 <col:25> 'char *' <ArrayToPointerDecay>
|   | |   |   `-StringLiteral 0x159141b60 <col:25> 'char[4]' lvalue "STR"
|   | |   `-ImplicitCastExpr 0x159141c98 <col:32> 'unsigned long' <IntegralCast>
|   | |     `-IntegerLiteral 0x159141b80 <col:32> 'int' 4
|   | `-CompoundStmt 0x159141e58 <col:38, line:8:2>
|   |   |-BinaryOperator 0x159141db0 <line:6:3, col:16> '<dependent type>' contains-errors '='
|   |   | |-CXXDependentScopeMemberExpr 0x159141d10 <col:3, col:9> '<dependent type>' contains-errors lvalue ->type
|   |   | | `-RecoveryExpr 0x159141ce8 <col:3> '<dependent type>' contains-errors lvalue
|   |   | |   `-DeclRefExpr 0x159141cc8 <col:3> 'int *' lvalue ParmVar 0x159128128 'item' 'int *'
|   |   | `-RecoveryExpr 0x159141d90 <col:16> '<dependent type>' contains-errors lvalue
|   |   `-ReturnStmt 0x159141e48 <line:7:3, col:18>
|   |     `-BinaryOperator 0x159141e28 <col:10, col:18> 'const char *' '+'
|   |       |-ImplicitCastExpr 0x159141e10 <col:10> 'const char *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x159141dd0 <col:10> 'const char *' lvalue ParmVar 0x1591281a8 'value' 'const char *'
|   |       `-IntegerLiteral 0x159141df0 <col:18> 'int' 4
|   |-IfStmt 0x1591421c0 <line:9:2, line:12:2>
|   | |-UnaryOperator 0x159141ff8 <line:9:7, col:34> 'int' prefix '!' cannot overflow
|   | | `-CallExpr 0x159141f60 <col:9, col:34> 'int'
|   | |   |-ImplicitCastExpr 0x159141f48 <col:9> 'int (*)(const char *, const char *, unsigned long)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x159141e98 <col:9> 'int (const char *, const char *, unsigned long)' Function 0x159141890 'strncmp' 'int (const char *, const char *, unsigned long)'
|   | |   |-ImplicitCastExpr 0x159141f98 <col:18> 'const char *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x159141eb8 <col:18> 'const char *' lvalue ParmVar 0x1591281a8 'value' 'const char *'
|   | |   |-ImplicitCastExpr 0x159141fc8 <col:25> 'const char *' <NoOp>
|   | |   | `-ImplicitCastExpr 0x159141fb0 <col:25> 'char *' <ArrayToPointerDecay>
|   | |   |   `-StringLiteral 0x159141ed8 <col:25> 'char[4]' lvalue "STR"
|   | |   `-ImplicitCastExpr 0x159141fe0 <col:32> 'unsigned long' <IntegralCast>
|   | |     `-IntegerLiteral 0x159141ef8 <col:32> 'int' 5
|   | `-CompoundStmt 0x1591421a0 <col:38, line:12:2>
|   |   |-BinaryOperator 0x1591420f8 <line:10:3, col:16> '<dependent type>' contains-errors '='
|   |   | |-CXXDependentScopeMemberExpr 0x159142058 <col:3, col:9> '<dependent type>' contains-errors lvalue ->type
|   |   | | `-RecoveryExpr 0x159142030 <col:3> '<dependent type>' contains-errors lvalue
|   |   | |   `-DeclRefExpr 0x159142010 <col:3> 'int *' lvalue ParmVar 0x159128128 'item' 'int *'
|   |   | `-RecoveryExpr 0x1591420d8 <col:16> '<dependent type>' contains-errors lvalue
|   |   `-ReturnStmt 0x159142190 <line:11:3, col:18>
|   |     `-BinaryOperator 0x159142170 <col:10, col:18> 'const char *' '+'
|   |       |-ImplicitCastExpr 0x159142158 <col:10> 'const char *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x159142118 <col:10> 'const char *' lvalue ParmVar 0x1591281a8 'value' 'const char *'
|   |       `-IntegerLiteral 0x159142138 <col:18> 'int' 5
|   |-IfStmt 0x1591425e0 <line:13:2, line:17:2>
|   | |-UnaryOperator 0x159142340 <line:13:7, col:34> 'int' prefix '!' cannot overflow
|   | | `-CallExpr 0x1591422a8 <col:9, col:34> 'int'
|   | |   |-ImplicitCastExpr 0x159142290 <col:9> 'int (*)(const char *, const char *, unsigned long)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x1591421e0 <col:9> 'int (const char *, const char *, unsigned long)' Function 0x159141890 'strncmp' 'int (const char *, const char *, unsigned long)'
|   | |   |-ImplicitCastExpr 0x1591422e0 <col:18> 'const char *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x159142200 <col:18> 'const char *' lvalue ParmVar 0x1591281a8 'value' 'const char *'
|   | |   |-ImplicitCastExpr 0x159142310 <col:25> 'const char *' <NoOp>
|   | |   | `-ImplicitCastExpr 0x1591422f8 <col:25> 'char *' <ArrayToPointerDecay>
|   | |   |   `-StringLiteral 0x159142220 <col:25> 'char[4]' lvalue "STR"
|   | |   `-ImplicitCastExpr 0x159142328 <col:32> 'unsigned long' <IntegralCast>
|   | |     `-IntegerLiteral 0x159142240 <col:32> 'int' 4
|   | `-CompoundStmt 0x1591425b8 <col:38, line:17:2>
|   |   |-BinaryOperator 0x159142440 <line:14:3, col:16> '<dependent type>' contains-errors '='
|   |   | |-CXXDependentScopeMemberExpr 0x1591423a0 <col:3, col:9> '<dependent type>' contains-errors lvalue ->type
|   |   | | `-RecoveryExpr 0x159142378 <col:3> '<dependent type>' contains-errors lvalue
|   |   | |   `-DeclRefExpr 0x159142358 <col:3> 'int *' lvalue ParmVar 0x159128128 'item' 'int *'
|   |   | `-RecoveryExpr 0x159142420 <col:16> '<dependent type>' contains-errors lvalue
|   |   |-BinaryOperator 0x159142510 <line:15:3, col:20> '<dependent type>' contains-errors '='
|   |   | |-CXXDependentScopeMemberExpr 0x1591424a8 <col:3, col:9> '<dependent type>' contains-errors lvalue ->valueint
|   |   | | `-RecoveryExpr 0x159142480 <col:3> '<dependent type>' contains-errors lvalue
|   |   | |   `-DeclRefExpr 0x159142460 <col:3> 'int *' lvalue ParmVar 0x159128128 'item' 'int *'
|   |   | `-IntegerLiteral 0x1591424f0 <col:20> 'int' 1
|   |   `-ReturnStmt 0x1591425a8 <line:16:3, col:18>
|   |     `-BinaryOperator 0x159142588 <col:10, col:18> 'const char *' '+'
|   |       |-ImplicitCastExpr 0x159142570 <col:10> 'const char *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x159142530 <col:10> 'const char *' lvalue ParmVar 0x1591281a8 'value' 'const char *'
|   |       `-IntegerLiteral 0x159142550 <col:18> 'int' 4
|   |-IfStmt 0x159142eb0 <line:18:2, line:19:36>
|   | |-BinaryOperator 0x159142698 <line:18:7, col:17> 'int' '=='
|   | | |-ImplicitCastExpr 0x159142680 <col:7, col:8> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x159142668 <col:7, col:8> 'char' <LValueToRValue>
|   | | |   `-UnaryOperator 0x159142638 <col:7, col:8> 'const char' lvalue prefix '*' cannot overflow
|   | | |     `-ImplicitCastExpr 0x159142620 <col:8> 'const char *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x159142600 <col:8> 'const char *' lvalue ParmVar 0x1591281a8 'value' 'const char *'
|   | | `-CharacterLiteral 0x159142650 <col:17> 'int' 34
|   | `-ReturnStmt 0x159142ea0 <line:19:3, col:36>
|   |   `-CallExpr 0x159142e70 <col:10, col:36> '<dependent type>' contains-errors
|   |     |-DeclRefExpr 0x159142e10 <col:10> 'int ()' Function 0x159142758 'parse_string' 'int ()'
|   |     |-RecoveryExpr 0x159142e30 <col:24> '<dependent type>' contains-errors lvalue
|   |     `-DeclRefExpr 0x159142e50 <col:30> 'const char *' lvalue ParmVar 0x1591281a8 'value' 'const char *'
|   |-IfStmt 0x1591432d8 <line:20:2, line:21:36>
|   | |-BinaryOperator 0x159143138 <line:20:7, col:57> 'int' '||'
|   | | |-BinaryOperator 0x159142f68 <col:7, col:17> 'int' '=='
|   | | | |-ImplicitCastExpr 0x159142f50 <col:7, col:8> 'int' <IntegralCast>
|   | | | | `-ImplicitCastExpr 0x159142f38 <col:7, col:8> 'char' <LValueToRValue>
|   | | | |   `-UnaryOperator 0x159142f08 <col:7, col:8> 'const char' lvalue prefix '*' cannot overflow
|   | | | |     `-ImplicitCastExpr 0x159142ef0 <col:8> 'const char *' <LValueToRValue>
|   | | | |       `-DeclRefExpr 0x159142ed0 <col:8> 'const char *' lvalue ParmVar 0x1591281a8 'value' 'const char *'
|   | | | `-CharacterLiteral 0x159142f20 <col:17> 'int' 45
|   | | `-ParenExpr 0x159143118 <col:24, col:57> 'int'
|   | |   `-BinaryOperator 0x1591430f8 <col:26, col:53> 'int' '&&'
|   | |     |-BinaryOperator 0x159143020 <col:26, col:36> 'int' '>='
|   | |     | |-ImplicitCastExpr 0x159143008 <col:26, col:27> 'int' <IntegralCast>
|   | |     | | `-ImplicitCastExpr 0x159142ff0 <col:26, col:27> 'char' <LValueToRValue>
|   | |     | |   `-UnaryOperator 0x159142fc0 <col:26, col:27> 'const char' lvalue prefix '*' cannot overflow
|   | |     | |     `-ImplicitCastExpr 0x159142fa8 <col:27> 'const char *' <LValueToRValue>
|   | |     | |       `-DeclRefExpr 0x159142f88 <col:27> 'const char *' lvalue ParmVar 0x1591281a8 'value' 'const char *'
|   | |     | `-CharacterLiteral 0x159142fd8 <col:36> 'int' 48
|   | |     `-BinaryOperator 0x1591430d8 <col:43, col:53> 'int' '<='
|   | |       |-ImplicitCastExpr 0x1591430c0 <col:43, col:44> 'int' <IntegralCast>
|   | |       | `-ImplicitCastExpr 0x1591430a8 <col:43, col:44> 'char' <LValueToRValue>
|   | |       |   `-UnaryOperator 0x159143078 <col:43, col:44> 'const char' lvalue prefix '*' cannot overflow
|   | |       |     `-ImplicitCastExpr 0x159143060 <col:44> 'const char *' <LValueToRValue>
|   | |       |       `-DeclRefExpr 0x159143040 <col:44> 'const char *' lvalue ParmVar 0x1591281a8 'value' 'const char *'
|   | |       `-CharacterLiteral 0x159143090 <col:53> 'int' 57
|   | `-ReturnStmt 0x1591432c8 <line:21:3, col:36>
|   |   `-CallExpr 0x159143298 <col:10, col:36> '<dependent type>' contains-errors
|   |     |-DeclRefExpr 0x159143238 <col:10> 'int ()' Function 0x159143180 'parse_number' 'int ()'
|   |     |-RecoveryExpr 0x159143258 <col:24> '<dependent type>' contains-errors lvalue
|   |     `-DeclRefExpr 0x159143278 <col:30> 'const char *' lvalue ParmVar 0x1591281a8 'value' 'const char *'
|   |-IfStmt 0x159143530 <line:22:2, line:23:35>
|   | |-BinaryOperator 0x159143390 <line:22:7, col:17> 'int' '=='
|   | | |-ImplicitCastExpr 0x159143378 <col:7, col:8> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x159143360 <col:7, col:8> 'char' <LValueToRValue>
|   | | |   `-UnaryOperator 0x159143330 <col:7, col:8> 'const char' lvalue prefix '*' cannot overflow
|   | | |     `-ImplicitCastExpr 0x159143318 <col:8> 'const char *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x1591432f8 <col:8> 'const char *' lvalue ParmVar 0x1591281a8 'value' 'const char *'
|   | | `-CharacterLiteral 0x159143348 <col:17> 'int' 91
|   | `-ReturnStmt 0x159143520 <line:23:3, col:35>
|   |   `-CallExpr 0x1591434f0 <col:10, col:35> '<dependent type>' contains-errors
|   |     |-DeclRefExpr 0x159143490 <col:10> 'int ()' Function 0x1591433d8 'parse_array' 'int ()'
|   |     |-RecoveryExpr 0x1591434b0 <col:23> '<dependent type>' contains-errors lvalue
|   |     `-DeclRefExpr 0x1591434d0 <col:29> 'const char *' lvalue ParmVar 0x1591281a8 'value' 'const char *'
|   |-IfStmt 0x159143788 <line:24:2, line:25:36>
|   | |-BinaryOperator 0x1591435e8 <line:24:7, col:17> 'int' '=='
|   | | |-ImplicitCastExpr 0x1591435d0 <col:7, col:8> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x1591435b8 <col:7, col:8> 'char' <LValueToRValue>
|   | | |   `-UnaryOperator 0x159143588 <col:7, col:8> 'const char' lvalue prefix '*' cannot overflow
|   | | |     `-ImplicitCastExpr 0x159143570 <col:8> 'const char *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x159143550 <col:8> 'const char *' lvalue ParmVar 0x1591281a8 'value' 'const char *'
|   | | `-CharacterLiteral 0x1591435a0 <col:17> 'int' 123
|   | `-ReturnStmt 0x159143778 <line:25:3, col:36>
|   |   `-CallExpr 0x159143748 <col:10, col:36> '<dependent type>' contains-errors
|   |     |-DeclRefExpr 0x1591436e8 <col:10> 'int ()' Function 0x159143630 'parse_object' 'int ()'
|   |     |-RecoveryExpr 0x159143708 <col:24> '<dependent type>' contains-errors lvalue
|   |     `-DeclRefExpr 0x159143728 <col:30> 'const char *' lvalue ParmVar 0x1591281a8 'value' 'const char *'
|   `-ReturnStmt 0x159143800 <line:29:2, col:9>
|     `-ImplicitCastExpr 0x1591437e8 <col:9> 'const char *' <NullToPointer>
|       `-IntegerLiteral 0x1591437c8 <col:9> 'int' 0
`-FunctionDecl 0x159141890 <line:5:9> col:9 implicit used strncmp 'int (const char *, const char *, unsigned long)' extern
  |-ParmVarDecl 0x159141990 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x1591419f8 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x159141a60 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x159141938 <<invalid sloc>> Implicit 888
