TranslationUnitDecl 0x151020008 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x151020eb8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1510205d0 '__int128'
|-TypedefDecl 0x151020f28 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1510205f0 'unsigned __int128'
|-TypedefDecl 0x15300be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x15300bc00 'struct __NSConstantString_tag'
|   `-Record 0x151020f80 '__NSConstantString_tag'
|-TypedefDecl 0x15300be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x151020790 '__SVInt8_t'
|-TypedefDecl 0x15300bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x1510207b0 '__SVInt16_t'
|-TypedefDecl 0x15300bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x1510207d0 '__SVInt32_t'
|-TypedefDecl 0x15300bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x1510207f0 '__SVInt64_t'
|-TypedefDecl 0x15300c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x151020810 '__SVUint8_t'
|-TypedefDecl 0x15300c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x151020830 '__SVUint16_t'
|-TypedefDecl 0x15300c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x151020850 '__SVUint32_t'
|-TypedefDecl 0x15300c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x151020870 '__SVUint64_t'
|-TypedefDecl 0x15300c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x151020890 '__SVFloat16_t'
|-TypedefDecl 0x15300c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x1510208b0 '__SVFloat32_t'
|-TypedefDecl 0x15300c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x1510208d0 '__SVFloat64_t'
|-TypedefDecl 0x15300c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x1510208f0 '__SVBfloat16_t'
|-TypedefDecl 0x15300c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x151020910 '__clang_svint8x2_t'
|-TypedefDecl 0x15300c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x151020930 '__clang_svint16x2_t'
|-TypedefDecl 0x15300c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x151020950 '__clang_svint32x2_t'
|-TypedefDecl 0x15300c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x151020970 '__clang_svint64x2_t'
|-TypedefDecl 0x15300c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x151020990 '__clang_svuint8x2_t'
|-TypedefDecl 0x15300c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x1510209b0 '__clang_svuint16x2_t'
|-TypedefDecl 0x15300c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x1510209d0 '__clang_svuint32x2_t'
|-TypedefDecl 0x15300c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x1510209f0 '__clang_svuint64x2_t'
|-TypedefDecl 0x15300c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x151020a10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x15300c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x151020a30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x15300c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x151020a50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x15300c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x151020a70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x15300c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x151020a90 '__clang_svint8x3_t'
|-TypedefDecl 0x15300c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x151020ab0 '__clang_svint16x3_t'
|-TypedefDecl 0x15300c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x151020ad0 '__clang_svint32x3_t'
|-TypedefDecl 0x15300c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x151020af0 '__clang_svint64x3_t'
|-TypedefDecl 0x15300c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x151020b10 '__clang_svuint8x3_t'
|-TypedefDecl 0x15300ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x151020b30 '__clang_svuint16x3_t'
|-TypedefDecl 0x15300cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x151020b50 '__clang_svuint32x3_t'
|-TypedefDecl 0x15300cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x151020b70 '__clang_svuint64x3_t'
|-TypedefDecl 0x15300cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x151020b90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x15300d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x151020bb0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x15300d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x151020bd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x15300d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x151020bf0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x15300d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x151020c10 '__clang_svint8x4_t'
|-TypedefDecl 0x15300d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x151020c30 '__clang_svint16x4_t'
|-TypedefDecl 0x15300d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x151020c50 '__clang_svint32x4_t'
|-TypedefDecl 0x15300d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x151020c70 '__clang_svint64x4_t'
|-TypedefDecl 0x15300d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x151020c90 '__clang_svuint8x4_t'
|-TypedefDecl 0x15300d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x151020cb0 '__clang_svuint16x4_t'
|-TypedefDecl 0x15300d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x151020cd0 '__clang_svuint32x4_t'
|-TypedefDecl 0x15300d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x151020cf0 '__clang_svuint64x4_t'
|-TypedefDecl 0x15300d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x151020d10 '__clang_svfloat16x4_t'
|-TypedefDecl 0x15300d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x151020d30 '__clang_svfloat32x4_t'
|-TypedefDecl 0x15300d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x151020d50 '__clang_svfloat64x4_t'
|-TypedefDecl 0x15300d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x151020d70 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x15300da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x151020d90 '__SVBool_t'
|-TypedefDecl 0x15300da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x151020db0 '__clang_svboolx2_t'
|-TypedefDecl 0x15300dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x151020dd0 '__clang_svboolx4_t'
|-TypedefDecl 0x15300db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x151020df0 '__SVCount_t'
|-TypedefDecl 0x15300dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x15300dbb0 'char *'
|   `-BuiltinType 0x1510200b0 'char'
|-TypedefDecl 0x15300dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x15300dbb0 'char *'
|   `-BuiltinType 0x1510200b0 'char'
|-FunctionDecl 0x15300de88 <dataset_diviso_filec/func19610_nonvuln.c:1:1, line:57:1> line:1:14 invalid print_string_ptr 'char *(const char *, int *)' static
| |-ParmVarDecl 0x15300dcd8 <col:31, col:43> col:43 used str 'const char *'
| |-ParmVarDecl 0x15300dda8 <col:47, col:60> col:60 invalid p 'int *'
| `-CompoundStmt 0x1528104a8 <line:2:1, line:57:1>
|   |-DeclStmt 0x15300dfc0 <line:3:2, col:17>
|   | `-VarDecl 0x15300df58 <col:2, col:14> col:14 used ptr 'const char *'
|   |-DeclStmt 0x15300e0f0 <col:18, col:33>
|   | |-VarDecl 0x15300dff0 <col:18, col:24> col:24 used ptr2 'char *'
|   | `-VarDecl 0x15300e070 <col:18, col:30> col:30 used out 'char *'
|   |-DeclStmt 0x15300e260 <col:34, col:50>
|   | |-VarDecl 0x15300e120 <col:34, col:42> col:38 used len 'int' cinit
|   | | `-IntegerLiteral 0x15300e188 <col:42> 'int' 0
|   | `-VarDecl 0x15300e1c0 <col:34, col:49> col:44 used flag 'int' cinit
|   |   `-IntegerLiteral 0x15300e228 <col:49> 'int' 0
|   |-DeclStmt 0x15300e2f8 <col:51, col:70>
|   | `-VarDecl 0x15300e290 <col:51, col:65> col:65 used token 'unsigned char'
|   |-IfStmt 0x15280bd08 <line:5:2, line:12:2>
|   | |-UnaryOperator 0x15300e348 <line:5:6, col:7> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x15300e330 <col:7> 'const char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x15300e310 <col:7> 'const char *' lvalue ParmVar 0x15300dcd8 'str' 'const char *'
|   | `-CompoundStmt 0x15280bcd8 <line:6:2, line:12:2>
|   |   |-IfStmt 0x15280b7f8 <line:7:3, line:8:33> has_else
|   |   | |-RecoveryExpr 0x15300e360 <line:7:7> '<dependent type>' contains-errors lvalue
|   |   | |-BinaryOperator 0x15280b1a0 <col:10, col:24> 'char *' contains-errors '='
|   |   | | |-DeclRefExpr 0x15300e380 <col:10> 'char *' lvalue Var 0x15300e070 'out' 'char *'
|   |   | | `-CallExpr 0x15280b170 <col:14, col:24> '<dependent type>' contains-errors
|   |   | |   |-DeclRefExpr 0x15280b110 <col:14> 'int ()' Function 0x15280b058 'ensure' 'int ()'
|   |   | |   |-RecoveryExpr 0x15280b130 <col:21> '<dependent type>' contains-errors lvalue
|   |   | |   `-IntegerLiteral 0x15280b150 <col:23> 'int' 3
|   |   | `-BinaryOperator 0x15280b7d8 <line:8:8, col:33> 'char *' '='
|   |   |   |-DeclRefExpr 0x15280b1c0 <col:8> 'char *' lvalue Var 0x15300e070 'out' 'char *'
|   |   |   `-CStyleCastExpr 0x15280b7b0 <col:12, col:33> 'char *' <IntegralToPointer>
|   |   |     `-CallExpr 0x15280b348 <col:19, col:33> 'int'
|   |   |       |-ImplicitCastExpr 0x15280b330 <col:19> 'int (*)()' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x15280b2c0 <col:19> 'int ()' Function 0x15280b208 'cJSON_malloc' 'int ()'
|   |   |       `-IntegerLiteral 0x15280b2e0 <col:32> 'int' 3
|   |   |-IfStmt 0x15280b8c0 <line:9:3, col:20>
|   |   | |-UnaryOperator 0x15280b860 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | `-ImplicitCastExpr 0x15280b848 <col:8> 'char *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x15280b828 <col:8> 'char *' lvalue Var 0x15300e070 'out' 'char *'
|   |   | `-ReturnStmt 0x15280b8b0 <col:13, col:20>
|   |   |   `-ImplicitCastExpr 0x15280b898 <col:20> 'char *' <NullToPointer>
|   |   |     `-IntegerLiteral 0x15280b878 <col:20> 'int' 0
|   |   |-CallExpr 0x15280bc18 <line:10:3, col:19> 'char *'
|   |   | |-ImplicitCastExpr 0x15280bc00 <col:3> 'char *(*)(char *, const char *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x15280bb00 <col:3> 'char *(char *, const char *)' Function 0x15280b920 'strcpy' 'char *(char *, const char *)'
|   |   | |-ImplicitCastExpr 0x15280bc48 <col:10> 'char *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x15280bb20 <col:10> 'char *' lvalue Var 0x15300e070 'out' 'char *'
|   |   | `-ImplicitCastExpr 0x15280bc78 <col:14> 'const char *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x15280bc60 <col:14> 'char *' <ArrayToPointerDecay>
|   |   |     `-StringLiteral 0x15280bb80 <col:14> 'char[4]' lvalue "STR"
|   |   `-ReturnStmt 0x15280bcc8 <line:11:3, col:10>
|   |     `-ImplicitCastExpr 0x15280bcb0 <col:10> 'char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x15280bc90 <col:10> 'char *' lvalue Var 0x15300e070 'out' 'char *'
|   |-ForStmt 0x15280dad0 <line:14:2, col:85>
|   | |-BinaryOperator 0x15280bd80 <col:7, col:11> 'const char *' '='
|   | | |-DeclRefExpr 0x15280bd28 <col:7> 'const char *' lvalue Var 0x15300df58 'ptr' 'const char *'
|   | | `-ImplicitCastExpr 0x15280bd68 <col:11> 'const char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x15280bd48 <col:11> 'const char *' lvalue ParmVar 0x15300dcd8 'str' 'const char *'
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x15280bdf0 <col:15, col:16> 'char' <LValueToRValue>
|   | | `-UnaryOperator 0x15280bdd8 <col:15, col:16> 'const char' lvalue prefix '*' cannot overflow
|   | |   `-ImplicitCastExpr 0x15280bdc0 <col:16> 'const char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x15280bda0 <col:16> 'const char *' lvalue Var 0x15300df58 'ptr' 'const char *'
|   | |-UnaryOperator 0x15280be28 <col:20, col:23> 'const char *' postfix '++'
|   | | `-DeclRefExpr 0x15280be08 <col:20> 'const char *' lvalue Var 0x15300df58 'ptr' 'const char *'
|   | `-CompoundAssignOperator 0x15280daa0 <col:27, col:85> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |-DeclRefExpr 0x15280be40 <col:27> 'int' lvalue Var 0x15300e1c0 'flag' 'int'
|   |   `-ConditionalOperator 0x15280da70 <col:33, col:85> 'int'
|   |     |-ParenExpr 0x15280da10 <col:33, col:81> 'int'
|   |     | `-BinaryOperator 0x15280d9f0 <col:34, col:80> 'int' '||'
|   |     |   |-BinaryOperator 0x15280d8f8 <col:34, col:66> 'int' '||'
|   |     |   | |-ParenExpr 0x15280d800 <col:34, col:52> 'int'
|   |     |   | | `-BinaryOperator 0x15280bfe0 <col:35, col:50> 'int' '&&'
|   |     |   | |   |-BinaryOperator 0x15280bf00 <col:35, col:40> 'int' '>'
|   |     |   | |   | |-ImplicitCastExpr 0x15280bee8 <col:35, col:36> 'int' <IntegralCast>
|   |     |   | |   | | `-ImplicitCastExpr 0x15280bed0 <col:35, col:36> 'char' <LValueToRValue>
|   |     |   | |   | |   `-UnaryOperator 0x15280be98 <col:35, col:36> 'const char' lvalue prefix '*' cannot overflow
|   |     |   | |   | |     `-ImplicitCastExpr 0x15280be80 <col:36> 'const char *' <LValueToRValue>
|   |     |   | |   | |       `-DeclRefExpr 0x15280be60 <col:36> 'const char *' lvalue Var 0x15300df58 'ptr' 'const char *'
|   |     |   | |   | `-IntegerLiteral 0x15280beb0 <col:40> 'int' 0
|   |     |   | |   `-BinaryOperator 0x15280bfc0 <col:45, col:50> 'int' '<'
|   |     |   | |     |-ImplicitCastExpr 0x15280bfa8 <col:45, col:46> 'int' <IntegralCast>
|   |     |   | |     | `-ImplicitCastExpr 0x15280bf90 <col:45, col:46> 'char' <LValueToRValue>
|   |     |   | |     |   `-UnaryOperator 0x15280bf58 <col:45, col:46> 'const char' lvalue prefix '*' cannot overflow
|   |     |   | |     |     `-ImplicitCastExpr 0x15280bf40 <col:46> 'const char *' <LValueToRValue>
|   |     |   | |     |       `-DeclRefExpr 0x15280bf20 <col:46> 'const char *' lvalue Var 0x15300df58 'ptr' 'const char *'
|   |     |   | |     `-IntegerLiteral 0x15280bf70 <col:50> 'int' 32
|   |     |   | `-ParenExpr 0x15280d8d8 <col:55, col:66> 'int'
|   |     |   |   `-BinaryOperator 0x15280d8b8 <col:56, col:62> 'int' '=='
|   |     |   |     |-ImplicitCastExpr 0x15280d8a0 <col:56, col:57> 'int' <IntegralCast>
|   |     |   |     | `-ImplicitCastExpr 0x15280d888 <col:56, col:57> 'char' <LValueToRValue>
|   |     |   |     |   `-UnaryOperator 0x15280d858 <col:56, col:57> 'const char' lvalue prefix '*' cannot overflow
|   |     |   |     |     `-ImplicitCastExpr 0x15280d840 <col:57> 'const char *' <LValueToRValue>
|   |     |   |     |       `-DeclRefExpr 0x15280d820 <col:57> 'const char *' lvalue Var 0x15300df58 'ptr' 'const char *'
|   |     |   |     `-CharacterLiteral 0x15280d870 <col:62> 'int' 34
|   |     |   `-ParenExpr 0x15280d9d0 <col:69, col:80> 'int'
|   |     |     `-BinaryOperator 0x15280d9b0 <col:70, col:76> 'int' '=='
|   |     |       |-ImplicitCastExpr 0x15280d998 <col:70, col:71> 'int' <IntegralCast>
|   |     |       | `-ImplicitCastExpr 0x15280d980 <col:70, col:71> 'char' <LValueToRValue>
|   |     |       |   `-UnaryOperator 0x15280d950 <col:70, col:71> 'const char' lvalue prefix '*' cannot overflow
|   |     |       |     `-ImplicitCastExpr 0x15280d938 <col:71> 'const char *' <LValueToRValue>
|   |     |       |       `-DeclRefExpr 0x15280d918 <col:71> 'const char *' lvalue Var 0x15300df58 'ptr' 'const char *'
|   |     |       `-CharacterLiteral 0x15280d968 <col:76> 'int' 92
|   |     |-IntegerLiteral 0x15280da30 <col:83> 'int' 1
|   |     `-IntegerLiteral 0x15280da50 <col:85> 'int' 0
|   |-IfStmt 0x15280e490 <line:15:2, line:26:2>
|   | |-UnaryOperator 0x15280db40 <line:15:6, col:7> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x15280db28 <col:7> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x15280db08 <col:7> 'int' lvalue Var 0x15300e1c0 'flag' 'int'
|   | `-CompoundStmt 0x15280e438 <line:16:2, line:26:2>
|   |   |-BinaryOperator 0x15280dc20 <line:17:3, col:11> 'int' '='
|   |   | |-DeclRefExpr 0x15280db58 <col:3> 'int' lvalue Var 0x15300e120 'len' 'int'
|   |   | `-ImplicitCastExpr 0x15280dc08 <col:7, col:11> 'int' <IntegralCast>
|   |   |   `-BinaryOperator 0x15280dbe8 <col:7, col:11> 'long' '-'
|   |   |     |-ImplicitCastExpr 0x15280dbb8 <col:7> 'const char *' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x15280db78 <col:7> 'const char *' lvalue Var 0x15300df58 'ptr' 'const char *'
|   |   |     `-ImplicitCastExpr 0x15280dbd0 <col:11> 'const char *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x15280db98 <col:11> 'const char *' lvalue ParmVar 0x15300dcd8 'str' 'const char *'
|   |   |-IfStmt 0x15280dee0 <line:18:3, line:19:38> has_else
|   |   | |-RecoveryExpr 0x15280dc40 <line:18:7> '<dependent type>' contains-errors lvalue
|   |   | |-BinaryOperator 0x15280dd68 <col:10, col:28> 'char *' contains-errors '='
|   |   | | |-DeclRefExpr 0x15280dc60 <col:10> 'char *' lvalue Var 0x15300e070 'out' 'char *'
|   |   | | `-CallExpr 0x15280dd38 <col:14, col:28> '<dependent type>' contains-errors
|   |   | |   |-DeclRefExpr 0x15280dc80 <col:14> 'int ()' Function 0x15280b058 'ensure' 'int ()'
|   |   | |   |-RecoveryExpr 0x15280dca0 <col:21> '<dependent type>' contains-errors lvalue
|   |   | |   `-BinaryOperator 0x15280dd18 <col:23, col:27> 'int' '+'
|   |   | |     |-ImplicitCastExpr 0x15280dd00 <col:23> 'int' <LValueToRValue>
|   |   | |     | `-DeclRefExpr 0x15280dcc0 <col:23> 'int' lvalue Var 0x15300e120 'len' 'int'
|   |   | |     `-IntegerLiteral 0x15280dce0 <col:27> 'int' 3
|   |   | `-BinaryOperator 0x15280dec0 <line:19:9, col:38> 'char *' '='
|   |   |   |-DeclRefExpr 0x15280dd88 <col:9> 'char *' lvalue Var 0x15300e070 'out' 'char *'
|   |   |   `-CStyleCastExpr 0x15280de98 <col:13, col:38> 'char *' <IntegralToPointer>
|   |   |     `-CallExpr 0x15280de58 <col:20, col:38> 'int'
|   |   |       |-ImplicitCastExpr 0x15280de40 <col:20> 'int (*)()' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x15280dda8 <col:20> 'int ()' Function 0x15280b208 'cJSON_malloc' 'int ()'
|   |   |       `-BinaryOperator 0x15280de20 <col:33, col:37> 'int' '+'
|   |   |         |-ImplicitCastExpr 0x15280de08 <col:33> 'int' <LValueToRValue>
|   |   |         | `-DeclRefExpr 0x15280ddc8 <col:33> 'int' lvalue Var 0x15300e120 'len' 'int'
|   |   |         `-IntegerLiteral 0x15280dde8 <col:37> 'int' 3
|   |   |-IfStmt 0x15280dfa8 <line:20:3, col:20>
|   |   | |-UnaryOperator 0x15280df48 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | `-ImplicitCastExpr 0x15280df30 <col:8> 'char *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x15280df10 <col:8> 'char *' lvalue Var 0x15300e070 'out' 'char *'
|   |   | `-ReturnStmt 0x15280df98 <col:13, col:20>
|   |   |   `-ImplicitCastExpr 0x15280df80 <col:20> 'char *' <NullToPointer>
|   |   |     `-IntegerLiteral 0x15280df60 <col:20> 'int' 0
|   |   |-BinaryOperator 0x15280e020 <line:21:3, col:8> 'char *' '='
|   |   | |-DeclRefExpr 0x15280dfc8 <col:3> 'char *' lvalue Var 0x15300dff0 'ptr2' 'char *'
|   |   | `-ImplicitCastExpr 0x15280e008 <col:8> 'char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x15280dfe8 <col:8> 'char *' lvalue Var 0x15300e070 'out' 'char *'
|   |   |-BinaryOperator 0x15280e0c0 <col:12, col:20> 'char' '='
|   |   | |-UnaryOperator 0x15280e078 <col:12, col:17> 'char' lvalue prefix '*' cannot overflow
|   |   | | `-UnaryOperator 0x15280e060 <col:13, col:17> 'char *' postfix '++'
|   |   | |   `-DeclRefExpr 0x15280e040 <col:13> 'char *' lvalue Var 0x15300dff0 'ptr2' 'char *'
|   |   | `-ImplicitCastExpr 0x15280e0a8 <col:20> 'char' <IntegralCast>
|   |   |   `-CharacterLiteral 0x15280e090 <col:20> 'int' 34
|   |   |-CallExpr 0x15280e188 <line:22:3, col:18> 'char *'
|   |   | |-ImplicitCastExpr 0x15280e170 <col:3> 'char *(*)(char *, const char *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x15280e0e0 <col:3> 'char *(char *, const char *)' Function 0x15280b920 'strcpy' 'char *(char *, const char *)'
|   |   | |-ImplicitCastExpr 0x15280e1b8 <col:10> 'char *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x15280e100 <col:10> 'char *' lvalue Var 0x15300dff0 'ptr2' 'char *'
|   |   | `-ImplicitCastExpr 0x15280e1d0 <col:15> 'const char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x15280e120 <col:15> 'const char *' lvalue ParmVar 0x15300dcd8 'str' 'const char *'
|   |   |-BinaryOperator 0x15280e2a8 <line:23:3, col:13> 'char' '='
|   |   | |-ArraySubscriptExpr 0x15280e258 <col:3, col:11> 'char' lvalue
|   |   | | |-ImplicitCastExpr 0x15280e228 <col:3> 'char *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x15280e1e8 <col:3> 'char *' lvalue Var 0x15300dff0 'ptr2' 'char *'
|   |   | | `-ImplicitCastExpr 0x15280e240 <col:8> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x15280e208 <col:8> 'int' lvalue Var 0x15300e120 'len' 'int'
|   |   | `-ImplicitCastExpr 0x15280e290 <col:13> 'char' <IntegralCast>
|   |   |   `-CharacterLiteral 0x15280e278 <col:13> 'int' 34
|   |   |-BinaryOperator 0x15280e3d0 <line:24:3, col:15> 'char' '='
|   |   | |-ArraySubscriptExpr 0x15280e378 <col:3, col:13> 'char' lvalue
|   |   | | |-ImplicitCastExpr 0x15280e360 <col:3> 'char *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x15280e2c8 <col:3> 'char *' lvalue Var 0x15300dff0 'ptr2' 'char *'
|   |   | | `-BinaryOperator 0x15280e340 <col:8, col:12> 'int' '+'
|   |   | |   |-ImplicitCastExpr 0x15280e328 <col:8> 'int' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x15280e2e8 <col:8> 'int' lvalue Var 0x15300e120 'len' 'int'
|   |   | |   `-IntegerLiteral 0x15280e308 <col:12> 'int' 1
|   |   | `-ImplicitCastExpr 0x15280e3b8 <col:15> 'char' <IntegralCast>
|   |   |   `-IntegerLiteral 0x15280e398 <col:15> 'int' 0
|   |   `-ReturnStmt 0x15280e428 <line:25:3, col:10>
|   |     `-ImplicitCastExpr 0x15280e410 <col:10> 'char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x15280e3f0 <col:10> 'char *' lvalue Var 0x15300e070 'out' 'char *'
|   |-BinaryOperator 0x15280e508 <line:28:2, col:6> 'const char *' '='
|   | |-DeclRefExpr 0x15280e4b0 <col:2> 'const char *' lvalue Var 0x15300df58 'ptr' 'const char *'
|   | `-ImplicitCastExpr 0x15280e4f0 <col:6> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x15280e4d0 <col:6> 'const char *' lvalue ParmVar 0x15300dcd8 'str' 'const char *'
|   |-WhileStmt 0x15280ec28 <col:10, col:105>
|   | |-BinaryOperator 0x15280e658 <col:17, col:35> 'int' '&&'
|   | | |-ImplicitCastExpr 0x15280e640 <col:17, col:28> 'int' <IntegralCast>
|   | | | `-ParenExpr 0x15280e5e8 <col:17, col:28> 'unsigned char'
|   | | |   `-BinaryOperator 0x15280e5c8 <col:18, col:25> 'unsigned char' '='
|   | | |     |-DeclRefExpr 0x15280e528 <col:18> 'unsigned char' lvalue Var 0x15300e290 'token' 'unsigned char'
|   | | |     `-ImplicitCastExpr 0x15280e5b0 <col:24, col:25> 'unsigned char' <IntegralCast>
|   | | |       `-ImplicitCastExpr 0x15280e598 <col:24, col:25> 'char' <LValueToRValue>
|   | | |         `-UnaryOperator 0x15280e580 <col:24, col:25> 'const char' lvalue prefix '*' cannot overflow
|   | | |           `-ImplicitCastExpr 0x15280e568 <col:25> 'const char *' <LValueToRValue>
|   | | |             `-DeclRefExpr 0x15280e548 <col:25> 'const char *' lvalue Var 0x15300df58 'ptr' 'const char *'
|   | | `-UnaryOperator 0x15280e628 <col:33, col:35> 'int' prefix '++'
|   | |   `-DeclRefExpr 0x15280e608 <col:35> 'int' lvalue Var 0x15300e120 'len' 'int'
|   | `-CompoundStmt 0x15280ec08 <col:40, col:105>
|   |   |-IfStmt 0x15280eba0 <col:41, col:97> has_else
|   |   | |-CallExpr 0x15280e9b8 <col:45, col:63> 'char *'
|   |   | | |-ImplicitCastExpr 0x15280e9a0 <col:45> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   |   | | | `-DeclRefExpr 0x15280e8e0 <col:45> 'char *(const char *, int)' Function 0x15280e6c0 'strchr' 'char *(const char *, int)'
|   |   | | |-ImplicitCastExpr 0x15280ea00 <col:52> 'const char *' <NoOp>
|   |   | | | `-ImplicitCastExpr 0x15280e9e8 <col:52> 'char *' <ArrayToPointerDecay>
|   |   | | |   `-StringLiteral 0x15280e900 <col:52> 'char[4]' lvalue "STR"
|   |   | | `-ImplicitCastExpr 0x15280ea30 <col:58> 'int' <IntegralCast>
|   |   | |   `-ImplicitCastExpr 0x15280ea18 <col:58> 'unsigned char' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x15280e920 <col:58> 'unsigned char' lvalue Var 0x15300e290 'token' 'unsigned char'
|   |   | |-UnaryOperator 0x15280ea68 <col:66, col:69> 'int' postfix '++'
|   |   | | `-DeclRefExpr 0x15280ea48 <col:66> 'int' lvalue Var 0x15300e120 'len' 'int'
|   |   | `-IfStmt 0x15280eb80 <col:78, col:97>
|   |   |   |-BinaryOperator 0x15280eaf0 <col:82, col:88> 'int' '<'
|   |   |   | |-ImplicitCastExpr 0x15280ead8 <col:82> 'int' <IntegralCast>
|   |   |   | | `-ImplicitCastExpr 0x15280eac0 <col:82> 'unsigned char' <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x15280ea80 <col:82> 'unsigned char' lvalue Var 0x15300e290 'token' 'unsigned char'
|   |   |   | `-IntegerLiteral 0x15280eaa0 <col:88> 'int' 32
|   |   |   `-CompoundAssignOperator 0x15280eb50 <col:92, col:97> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |     |-DeclRefExpr 0x15280eb10 <col:92> 'int' lvalue Var 0x15300e120 'len' 'int'
|   |   |     `-IntegerLiteral 0x15280eb30 <col:97> 'int' 5
|   |   `-UnaryOperator 0x15280ebf0 <col:99, col:102> 'const char *' postfix '++'
|   |     `-DeclRefExpr 0x15280ebd0 <col:99> 'const char *' lvalue Var 0x15300df58 'ptr' 'const char *'
|   |-IfStmt 0x15280eee8 <line:30:2, line:31:36> has_else
|   | |-RecoveryExpr 0x15280ec48 <line:30:6> '<dependent type>' contains-errors lvalue
|   | |-BinaryOperator 0x15280ed70 <col:9, col:27> 'char *' contains-errors '='
|   | | |-DeclRefExpr 0x15280ec68 <col:9> 'char *' lvalue Var 0x15300e070 'out' 'char *'
|   | | `-CallExpr 0x15280ed40 <col:13, col:27> '<dependent type>' contains-errors
|   | |   |-DeclRefExpr 0x15280ec88 <col:13> 'int ()' Function 0x15280b058 'ensure' 'int ()'
|   | |   |-RecoveryExpr 0x15280eca8 <col:20> '<dependent type>' contains-errors lvalue
|   | |   `-BinaryOperator 0x15280ed20 <col:22, col:26> 'int' '+'
|   | |     |-ImplicitCastExpr 0x15280ed08 <col:22> 'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x15280ecc8 <col:22> 'int' lvalue Var 0x15300e120 'len' 'int'
|   | |     `-IntegerLiteral 0x15280ece8 <col:26> 'int' 3
|   | `-BinaryOperator 0x15280eec8 <line:31:7, col:36> 'char *' '='
|   |   |-DeclRefExpr 0x15280ed90 <col:7> 'char *' lvalue Var 0x15300e070 'out' 'char *'
|   |   `-CStyleCastExpr 0x15280eea0 <col:11, col:36> 'char *' <IntegralToPointer>
|   |     `-CallExpr 0x15280ee60 <col:18, col:36> 'int'
|   |       |-ImplicitCastExpr 0x15280ee48 <col:18> 'int (*)()' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x15280edb0 <col:18> 'int ()' Function 0x15280b208 'cJSON_malloc' 'int ()'
|   |       `-BinaryOperator 0x15280ee28 <col:31, col:35> 'int' '+'
|   |         |-ImplicitCastExpr 0x15280ee10 <col:31> 'int' <LValueToRValue>
|   |         | `-DeclRefExpr 0x15280edd0 <col:31> 'int' lvalue Var 0x15300e120 'len' 'int'
|   |         `-IntegerLiteral 0x15280edf0 <col:35> 'int' 3
|   |-IfStmt 0x15280efb0 <line:32:2, col:19>
|   | |-UnaryOperator 0x15280ef50 <col:6, col:7> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x15280ef38 <col:7> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x15280ef18 <col:7> 'char *' lvalue Var 0x15300e070 'out' 'char *'
|   | `-ReturnStmt 0x15280efa0 <col:12, col:19>
|   |   `-ImplicitCastExpr 0x15280ef88 <col:19> 'char *' <NullToPointer>
|   |     `-IntegerLiteral 0x15280ef68 <col:19> 'int' 0
|   |-BinaryOperator 0x15280f028 <line:34:2, col:7> 'char *' '='
|   | |-DeclRefExpr 0x15280efd0 <col:2> 'char *' lvalue Var 0x15300dff0 'ptr2' 'char *'
|   | `-ImplicitCastExpr 0x15280f010 <col:7> 'char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x15280eff0 <col:7> 'char *' lvalue Var 0x15300e070 'out' 'char *'
|   |-BinaryOperator 0x15280f0a0 <col:11, col:15> 'const char *' '='
|   | |-DeclRefExpr 0x15280f048 <col:11> 'const char *' lvalue Var 0x15300df58 'ptr' 'const char *'
|   | `-ImplicitCastExpr 0x15280f088 <col:15> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x15280f068 <col:15> 'const char *' lvalue ParmVar 0x15300dcd8 'str' 'const char *'
|   |-BinaryOperator 0x15280f140 <line:35:2, col:10> 'char' '='
|   | |-UnaryOperator 0x15280f0f8 <col:2, col:7> 'char' lvalue prefix '*' cannot overflow
|   | | `-UnaryOperator 0x15280f0e0 <col:3, col:7> 'char *' postfix '++'
|   | |   `-DeclRefExpr 0x15280f0c0 <col:3> 'char *' lvalue Var 0x15300dff0 'ptr2' 'char *'
|   | `-ImplicitCastExpr 0x15280f128 <col:10> 'char' <IntegralCast>
|   |   `-CharacterLiteral 0x15280f110 <col:10> 'int' 34
|   |-WhileStmt 0x1528102f8 <line:36:2, line:54:2>
|   | |-ImplicitCastExpr 0x15280f1b0 <line:36:9, col:10> 'char' <LValueToRValue>
|   | | `-UnaryOperator 0x15280f198 <col:9, col:10> 'const char' lvalue prefix '*' cannot overflow
|   | |   `-ImplicitCastExpr 0x15280f180 <col:10> 'const char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x15280f160 <col:10> 'const char *' lvalue Var 0x15300df58 'ptr' 'const char *'
|   | `-CompoundStmt 0x1528102e0 <line:37:2, line:54:2>
|   |   `-IfStmt 0x1528102b0 <line:38:3, line:53:3> has_else
|   |     |-BinaryOperator 0x15280f458 <line:38:7, col:53> 'int' '&&'
|   |     | |-BinaryOperator 0x15280f380 <col:7, col:39> 'int' '&&'
|   |     | | |-BinaryOperator 0x15280f2a8 <col:7, col:27> 'int' '>'
|   |     | | | |-ImplicitCastExpr 0x15280f290 <col:7, col:23> 'int' <IntegralCast>
|   |     | | | | `-CStyleCastExpr 0x15280f248 <col:7, col:23> 'unsigned char' <IntegralCast>
|   |     | | | |   `-ImplicitCastExpr 0x15280f230 <col:22, col:23> 'char' <LValueToRValue> part_of_explicit_cast
|   |     | | | |     `-UnaryOperator 0x15280f200 <col:22, col:23> 'const char' lvalue prefix '*' cannot overflow
|   |     | | | |       `-ImplicitCastExpr 0x15280f1e8 <col:23> 'const char *' <LValueToRValue>
|   |     | | | |         `-DeclRefExpr 0x15280f1c8 <col:23> 'const char *' lvalue Var 0x15300df58 'ptr' 'const char *'
|   |     | | | `-IntegerLiteral 0x15280f270 <col:27> 'int' 31
|   |     | | `-BinaryOperator 0x15280f360 <col:33, col:39> 'int' '!='
|   |     | |   |-ImplicitCastExpr 0x15280f348 <col:33, col:34> 'int' <IntegralCast>
|   |     | |   | `-ImplicitCastExpr 0x15280f330 <col:33, col:34> 'char' <LValueToRValue>
|   |     | |   |   `-UnaryOperator 0x15280f300 <col:33, col:34> 'const char' lvalue prefix '*' cannot overflow
|   |     | |   |     `-ImplicitCastExpr 0x15280f2e8 <col:34> 'const char *' <LValueToRValue>
|   |     | |   |       `-DeclRefExpr 0x15280f2c8 <col:34> 'const char *' lvalue Var 0x15300df58 'ptr' 'const char *'
|   |     | |   `-CharacterLiteral 0x15280f318 <col:39> 'int' 34
|   |     | `-BinaryOperator 0x15280f438 <col:47, col:53> 'int' '!='
|   |     |   |-ImplicitCastExpr 0x15280f420 <col:47, col:48> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x15280f408 <col:47, col:48> 'char' <LValueToRValue>
|   |     |   |   `-UnaryOperator 0x15280f3d8 <col:47, col:48> 'const char' lvalue prefix '*' cannot overflow
|   |     |   |     `-ImplicitCastExpr 0x15280f3c0 <col:48> 'const char *' <LValueToRValue>
|   |     |   |       `-DeclRefExpr 0x15280f3a0 <col:48> 'const char *' lvalue Var 0x15300df58 'ptr' 'const char *'
|   |     |   `-CharacterLiteral 0x15280f3f0 <col:53> 'int' 92
|   |     |-BinaryOperator 0x15280f530 <col:59, col:71> 'char' '='
|   |     | |-UnaryOperator 0x15280f4b0 <col:59, col:64> 'char' lvalue prefix '*' cannot overflow
|   |     | | `-UnaryOperator 0x15280f498 <col:60, col:64> 'char *' postfix '++'
|   |     | |   `-DeclRefExpr 0x15280f478 <col:60> 'char *' lvalue Var 0x15300dff0 'ptr2' 'char *'
|   |     | `-ImplicitCastExpr 0x15280f518 <col:67, col:71> 'char' <LValueToRValue>
|   |     |   `-UnaryOperator 0x15280f500 <col:67, col:71> 'const char' lvalue prefix '*' cannot overflow
|   |     |     `-UnaryOperator 0x15280f4e8 <col:68, col:71> 'const char *' postfix '++'
|   |     |       `-DeclRefExpr 0x15280f4c8 <col:68> 'const char *' lvalue Var 0x15300df58 'ptr' 'const char *'
|   |     `-CompoundStmt 0x152810290 <line:40:3, line:53:3>
|   |       |-BinaryOperator 0x15280f5d0 <line:41:4, col:12> 'char' '='
|   |       | |-UnaryOperator 0x15280f588 <col:4, col:9> 'char' lvalue prefix '*' cannot overflow
|   |       | | `-UnaryOperator 0x15280f570 <col:5, col:9> 'char *' postfix '++'
|   |       | |   `-DeclRefExpr 0x15280f550 <col:5> 'char *' lvalue Var 0x15300dff0 'ptr2' 'char *'
|   |       | `-ImplicitCastExpr 0x15280f5b8 <col:12> 'char' <IntegralCast>
|   |       |   `-CharacterLiteral 0x15280f5a0 <col:12> 'int' 92
|   |       `-SwitchStmt 0x15280f6c8 <line:42:4, line:52:4>
|   |         |-ImplicitCastExpr 0x15280f6b0 <line:42:12, col:22> 'int' <IntegralCast>
|   |         | `-BinaryOperator 0x15280f690 <col:12, col:22> 'unsigned char' '='
|   |         |   |-DeclRefExpr 0x15280f5f0 <col:12> 'unsigned char' lvalue Var 0x15300e290 'token' 'unsigned char'
|   |         |   `-ImplicitCastExpr 0x15280f678 <col:18, col:22> 'unsigned char' <IntegralCast>
|   |         |     `-ImplicitCastExpr 0x15280f660 <col:18, col:22> 'char' <LValueToRValue>
|   |         |       `-UnaryOperator 0x15280f648 <col:18, col:22> 'const char' lvalue prefix '*' cannot overflow
|   |         |         `-UnaryOperator 0x15280f630 <col:19, col:22> 'const char *' postfix '++'
|   |         |           `-DeclRefExpr 0x15280f610 <col:19> 'const char *' lvalue Var 0x15300df58 'ptr' 'const char *'
|   |         `-CompoundStmt 0x152810200 <line:43:4, line:52:4>
|   |           |-CaseStmt 0x15280f720 <line:44:5, col:24>
|   |           | |-ConstantExpr 0x15280f708 <col:10> 'int'
|   |           | | `-CharacterLiteral 0x15280f6f0 <col:10> 'int' 92
|   |           | `-BinaryOperator 0x15280f7c8 <col:16, col:24> 'char' '='
|   |           |   |-UnaryOperator 0x15280f780 <col:16, col:21> 'char' lvalue prefix '*' cannot overflow
|   |           |   | `-UnaryOperator 0x15280f768 <col:17, col:21> 'char *' postfix '++'
|   |           |   |   `-DeclRefExpr 0x15280f748 <col:17> 'char *' lvalue Var 0x15300dff0 'ptr2' 'char *'
|   |           |   `-ImplicitCastExpr 0x15280f7b0 <col:24> 'char' <IntegralCast>
|   |           |     `-CharacterLiteral 0x15280f798 <col:24> 'int' 92
|   |           |-BreakStmt 0x15280f7e8 <col:30>
|   |           |-CaseStmt 0x15280f830 <line:45:5, col:20>
|   |           | |-ConstantExpr 0x15280f818 <col:10> 'int'
|   |           | | `-CharacterLiteral 0x15280f800 <col:10> 'int' 1398034978
|   |           | `-BreakStmt 0x15280f858 <col:20>
|   |           |-CaseStmt 0x15280f890 <line:46:5, col:24>
|   |           | |-ConstantExpr 0x15280f878 <col:10> 'int'
|   |           | | `-CharacterLiteral 0x15280f860 <col:10> 'int' 8
|   |           | `-BinaryOperator 0x15280f938 <col:16, col:24> 'char' '='
|   |           |   |-UnaryOperator 0x15280f8f0 <col:16, col:21> 'char' lvalue prefix '*' cannot overflow
|   |           |   | `-UnaryOperator 0x15280f8d8 <col:17, col:21> 'char *' postfix '++'
|   |           |   |   `-DeclRefExpr 0x15280f8b8 <col:17> 'char *' lvalue Var 0x15300dff0 'ptr2' 'char *'
|   |           |   `-ImplicitCastExpr 0x15280f920 <col:24> 'char' <IntegralCast>
|   |           |     `-CharacterLiteral 0x15280f908 <col:24> 'int' 98
|   |           |-BreakStmt 0x15280f958 <col:29>
|   |           |-CaseStmt 0x15280f990 <line:47:5, col:24>
|   |           | |-ConstantExpr 0x15280f978 <col:10> 'int'
|   |           | | `-CharacterLiteral 0x15280f960 <col:10> 'int' 12
|   |           | `-BinaryOperator 0x15280fa38 <col:16, col:24> 'char' '='
|   |           |   |-UnaryOperator 0x15280f9f0 <col:16, col:21> 'char' lvalue prefix '*' cannot overflow
|   |           |   | `-UnaryOperator 0x15280f9d8 <col:17, col:21> 'char *' postfix '++'
|   |           |   |   `-DeclRefExpr 0x15280f9b8 <col:17> 'char *' lvalue Var 0x15300dff0 'ptr2' 'char *'
|   |           |   `-ImplicitCastExpr 0x15280fa20 <col:24> 'char' <IntegralCast>
|   |           |     `-CharacterLiteral 0x15280fa08 <col:24> 'int' 102
|   |           |-BreakStmt 0x15280fa58 <col:29>
|   |           |-CaseStmt 0x15280fa90 <line:48:5, col:24>
|   |           | |-ConstantExpr 0x15280fa78 <col:10> 'int'
|   |           | | `-CharacterLiteral 0x15280fa60 <col:10> 'int' 10
|   |           | `-BinaryOperator 0x15280fb38 <col:16, col:24> 'char' '='
|   |           |   |-UnaryOperator 0x15280faf0 <col:16, col:21> 'char' lvalue prefix '*' cannot overflow
|   |           |   | `-UnaryOperator 0x15280fad8 <col:17, col:21> 'char *' postfix '++'
|   |           |   |   `-DeclRefExpr 0x15280fab8 <col:17> 'char *' lvalue Var 0x15300dff0 'ptr2' 'char *'
|   |           |   `-ImplicitCastExpr 0x15280fb20 <col:24> 'char' <IntegralCast>
|   |           |     `-CharacterLiteral 0x15280fb08 <col:24> 'int' 110
|   |           |-BreakStmt 0x15280fb58 <col:29>
|   |           |-CaseStmt 0x15280fb90 <line:49:5, col:24>
|   |           | |-ConstantExpr 0x15280fb78 <col:10> 'int'
|   |           | | `-CharacterLiteral 0x15280fb60 <col:10> 'int' 13
|   |           | `-BinaryOperator 0x15280fc38 <col:16, col:24> 'char' '='
|   |           |   |-UnaryOperator 0x15280fbf0 <col:16, col:21> 'char' lvalue prefix '*' cannot overflow
|   |           |   | `-UnaryOperator 0x15280fbd8 <col:17, col:21> 'char *' postfix '++'
|   |           |   |   `-DeclRefExpr 0x15280fbb8 <col:17> 'char *' lvalue Var 0x15300dff0 'ptr2' 'char *'
|   |           |   `-ImplicitCastExpr 0x15280fc20 <col:24> 'char' <IntegralCast>
|   |           |     `-CharacterLiteral 0x15280fc08 <col:24> 'int' 114
|   |           |-BreakStmt 0x15280fc58 <col:29>
|   |           |-CaseStmt 0x15280fc90 <line:50:5, col:24>
|   |           | |-ConstantExpr 0x15280fc78 <col:10> 'int'
|   |           | | `-CharacterLiteral 0x15280fc60 <col:10> 'int' 9
|   |           | `-BinaryOperator 0x15280fd38 <col:16, col:24> 'char' '='
|   |           |   |-UnaryOperator 0x15280fcf0 <col:16, col:21> 'char' lvalue prefix '*' cannot overflow
|   |           |   | `-UnaryOperator 0x15280fcd8 <col:17, col:21> 'char *' postfix '++'
|   |           |   |   `-DeclRefExpr 0x15280fcb8 <col:17> 'char *' lvalue Var 0x15300dff0 'ptr2' 'char *'
|   |           |   `-ImplicitCastExpr 0x15280fd20 <col:24> 'char' <IntegralCast>
|   |           |     `-CharacterLiteral 0x15280fd08 <col:24> 'int' 116
|   |           |-BreakStmt 0x15280fd58 <col:29>
|   |           |-DefaultStmt 0x152810168 <line:51:5, col:38>
|   |           | `-CallExpr 0x1528100b8 <col:14, col:38> 'int'
|   |           |   |-ImplicitCastExpr 0x1528100a0 <col:14> 'int (*)(char *, const char *, ...)' <FunctionToPointerDecay>
|   |           |   | `-DeclRefExpr 0x15280ffc0 <col:14> 'int (char *, const char *, ...)' Function 0x15280fda8 'sprintf' 'int (char *, const char *, ...)'
|   |           |   |-ImplicitCastExpr 0x1528100f0 <col:22> 'char *' <LValueToRValue>
|   |           |   | `-DeclRefExpr 0x15280ffe0 <col:22> 'char *' lvalue Var 0x15300dff0 'ptr2' 'char *'
|   |           |   |-ImplicitCastExpr 0x152810120 <col:27> 'const char *' <NoOp>
|   |           |   | `-ImplicitCastExpr 0x152810108 <col:27> 'char *' <ArrayToPointerDecay>
|   |           |   |   `-StringLiteral 0x152810000 <col:27> 'char[4]' lvalue "STR"
|   |           |   `-ImplicitCastExpr 0x152810150 <col:33> 'int' <IntegralCast>
|   |           |     `-ImplicitCastExpr 0x152810138 <col:33> 'unsigned char' <LValueToRValue>
|   |           |       `-DeclRefExpr 0x152810020 <col:33> 'unsigned char' lvalue Var 0x15300e290 'token' 'unsigned char'
|   |           |-CompoundAssignOperator 0x1528101c8 <col:40, col:46> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
|   |           | |-DeclRefExpr 0x152810188 <col:40> 'char *' lvalue Var 0x15300dff0 'ptr2' 'char *'
|   |           | `-IntegerLiteral 0x1528101a8 <col:46> 'int' 5
|   |           `-BreakStmt 0x1528101f8 <col:49>
|   |-BinaryOperator 0x152810398 <line:55:2, col:10> 'char' '='
|   | |-UnaryOperator 0x152810350 <col:2, col:7> 'char' lvalue prefix '*' cannot overflow
|   | | `-UnaryOperator 0x152810338 <col:3, col:7> 'char *' postfix '++'
|   | |   `-DeclRefExpr 0x152810318 <col:3> 'char *' lvalue Var 0x15300dff0 'ptr2' 'char *'
|   | `-ImplicitCastExpr 0x152810380 <col:10> 'char' <IntegralCast>
|   |   `-CharacterLiteral 0x152810368 <col:10> 'int' 34
|   |-BinaryOperator 0x152810440 <col:15, col:23> 'char' '='
|   | |-UnaryOperator 0x1528103f0 <col:15, col:20> 'char' lvalue prefix '*' cannot overflow
|   | | `-UnaryOperator 0x1528103d8 <col:16, col:20> 'char *' postfix '++'
|   | |   `-DeclRefExpr 0x1528103b8 <col:16> 'char *' lvalue Var 0x15300dff0 'ptr2' 'char *'
|   | `-ImplicitCastExpr 0x152810428 <col:23> 'char' <IntegralCast>
|   |   `-IntegerLiteral 0x152810408 <col:23> 'int' 0
|   `-ReturnStmt 0x152810498 <line:56:2, col:9>
|     `-ImplicitCastExpr 0x152810480 <col:9> 'char *' <LValueToRValue>
|       `-DeclRefExpr 0x152810460 <col:9> 'char *' lvalue Var 0x15300e070 'out' 'char *'
|-FunctionDecl 0x15280b920 <line:10:3> col:3 implicit used strcpy 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x15280ba20 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x15280ba88 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x15280b9c8 <<invalid sloc>> Implicit 885
|-FunctionDecl 0x15280e6c0 <line:28:45> col:45 implicit used strchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x15280e800 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x15280e868 <<invalid sloc>> <invalid sloc> 'int'
| `-BuiltinAttr 0x15280e768 <<invalid sloc>> Implicit 893
`-FunctionDecl 0x15280fda8 <line:51:14> col:14 implicit used sprintf 'int (char *, const char *, ...)' extern
  |-ParmVarDecl 0x15280fea8 <<invalid sloc>> <invalid sloc> 'char *'
  |-ParmVarDecl 0x15280ff10 <<invalid sloc>> <invalid sloc> 'const char *'
  |-BuiltinAttr 0x15280fe50 <<invalid sloc>> Implicit 906
  `-FormatAttr 0x15280ff88 <col:14> Implicit printf 2 3
