TranslationUnitDecl 0x12e855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x12e8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x12e855bd0 '__int128'
|-TypedefDecl 0x12e856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x12e855bf0 'unsigned __int128'
|-TypedefDecl 0x12f00be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12f00bc00 'struct __NSConstantString_tag'
|   `-Record 0x12e856580 '__NSConstantString_tag'
|-TypedefDecl 0x12f00be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x12e855d90 '__SVInt8_t'
|-TypedefDecl 0x12f00bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x12e855db0 '__SVInt16_t'
|-TypedefDecl 0x12f00bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x12e855dd0 '__SVInt32_t'
|-TypedefDecl 0x12f00bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x12e855df0 '__SVInt64_t'
|-TypedefDecl 0x12f00c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x12e855e10 '__SVUint8_t'
|-TypedefDecl 0x12f00c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x12e855e30 '__SVUint16_t'
|-TypedefDecl 0x12f00c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x12e855e50 '__SVUint32_t'
|-TypedefDecl 0x12f00c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x12e855e70 '__SVUint64_t'
|-TypedefDecl 0x12f00c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x12e855e90 '__SVFloat16_t'
|-TypedefDecl 0x12f00c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x12e855eb0 '__SVFloat32_t'
|-TypedefDecl 0x12f00c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x12e855ed0 '__SVFloat64_t'
|-TypedefDecl 0x12f00c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x12e855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12f00c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x12e855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12f00c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x12e855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12f00c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x12e855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12f00c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x12e855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12f00c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x12e855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12f00c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x12e855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12f00c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x12e855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12f00c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x12e855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12f00c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x12e856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12f00c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x12e856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12f00c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x12e856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12f00c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x12e856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12f00c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x12e856090 '__clang_svint8x3_t'
|-TypedefDecl 0x12f00c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x12e8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12f00c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x12e8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12f00c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x12e8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12f00c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x12e856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12f00ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x12e856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12f00cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x12e856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12f00cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x12e856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12f00cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x12e856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12f00d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x12e8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12f00d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x12e8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12f00d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x12e8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12f00d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x12e856210 '__clang_svint8x4_t'
|-TypedefDecl 0x12f00d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x12e856230 '__clang_svint16x4_t'
|-TypedefDecl 0x12f00d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x12e856250 '__clang_svint32x4_t'
|-TypedefDecl 0x12f00d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x12e856270 '__clang_svint64x4_t'
|-TypedefDecl 0x12f00d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x12e856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12f00d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x12e8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12f00d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x12e8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12f00d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x12e8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12f00d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x12e856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12f00d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x12e856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12f00d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x12e856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12f00d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x12e856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12f00da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x12e856390 '__SVBool_t'
|-TypedefDecl 0x12f00da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x12e8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12f00dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x12e8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12f00db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x12e8563f0 '__SVCount_t'
|-TypedefDecl 0x12f00dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12f00dbb0 'char *'
|   `-BuiltinType 0x12e8556b0 'char'
|-TypedefDecl 0x12f00dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12f00dbb0 'char *'
|   `-BuiltinType 0x12e8556b0 'char'
|-FunctionDecl 0x12f00e048 <dataset_diviso_filec/func23453_nonvuln.c:1:1, line:46:1> line:1:11 invalid adv_png_read_chunk 'int (int *, unsigned char **, unsigned int *, unsigned int *)'
| |-ParmVarDecl 0x12f00dd28 <col:30, col:38> col:38 invalid f 'int *'
| |-ParmVarDecl 0x12f00de10 <col:41, col:57> col:57 used data 'unsigned char **'
| |-ParmVarDecl 0x12f00dec8 <col:63, col:73> col:73 used size 'unsigned int *'
| |-ParmVarDecl 0x12f00df48 <col:79, col:89> col:89 used type 'unsigned int *'
| `-CompoundStmt 0x12f029be8 <line:2:1, line:46:1>
|   |-DeclStmt 0x12f00e220 <line:3:2, col:21>
|   | `-VarDecl 0x12f00e1b8 <col:2, col:20> col:16 used cl 'unsigned char[4]'
|   |-DeclStmt 0x12f00e308 <line:4:2, col:21>
|   | `-VarDecl 0x12f00e2a0 <col:2, col:20> col:16 used ct 'unsigned char[4]'
|   |-DeclStmt 0x12f027400 <line:5:2, col:21>
|   | `-VarDecl 0x12f00e388 <col:2, col:20> col:16 used cc 'unsigned char[4]'
|   |-IfStmt 0x12f027900 <line:7:2, line:10:2>
|   | |-BinaryOperator 0x12f027670 <line:7:6, col:29> 'int' contains-errors '!='
|   | | |-CallExpr 0x12f027610 <col:6, col:24> '<dependent type>' contains-errors
|   | | | |-DeclRefExpr 0x12f027570 <col:6> 'int ()' Function 0x12f0274b8 'fzread' 'int ()'
|   | | | |-DeclRefExpr 0x12f027590 <col:13> 'unsigned char[4]' lvalue Var 0x12f00e1b8 'cl' 'unsigned char[4]'
|   | | | |-IntegerLiteral 0x12f0275b0 <col:17> 'int' 4
|   | | | |-IntegerLiteral 0x12f0275d0 <col:20> 'int' 1
|   | | | `-RecoveryExpr 0x12f0275f0 <col:23> '<dependent type>' contains-errors lvalue
|   | | `-IntegerLiteral 0x12f027650 <col:29> 'int' 1
|   | `-CompoundStmt 0x12f0278e0 <col:32, line:10:2>
|   |   |-CallExpr 0x12f027838 <line:8:3, col:18> 'int'
|   |   | |-ImplicitCastExpr 0x12f027820 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x12f027770 <col:3> 'int ()' Function 0x12f0276b8 'error_set' 'int ()'
|   |   | `-ImplicitCastExpr 0x12f027860 <col:13> 'char *' <ArrayToPointerDecay>
|   |   |   `-StringLiteral 0x12f0277d0 <col:13> 'char[4]' lvalue "STR"
|   |   `-GotoStmt 0x12f0278c8 <line:9:3, col:8> 'err' 0x12f027878
|   |-BinaryOperator 0x12f027b00 <line:12:2, col:27> 'unsigned int' '='
|   | |-UnaryOperator 0x12f027958 <col:2, col:3> 'unsigned int' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x12f027940 <col:3> 'unsigned int *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x12f027920 <col:3> 'unsigned int *' lvalue ParmVar 0x12f00dec8 'size' 'unsigned int *'
|   | `-ImplicitCastExpr 0x12f027ae8 <col:10, col:27> 'unsigned int' <IntegralCast>
|   |   `-CallExpr 0x12f027aa8 <col:10, col:27> 'int'
|   |     |-ImplicitCastExpr 0x12f027a90 <col:10> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x12f027a50 <col:10> 'int ()' Function 0x12f027998 'be_uint32_read' 'int ()'
|   |     `-ImplicitCastExpr 0x12f027ad0 <col:25> 'unsigned char *' <ArrayToPointerDecay>
|   |       `-DeclRefExpr 0x12f027a70 <col:25> 'unsigned char[4]' lvalue Var 0x12f00e1b8 'cl' 'unsigned char[4]'
|   |-IfStmt 0x12f027d10 <line:14:2, line:17:2>
|   | |-BinaryOperator 0x12f027c20 <line:14:6, col:29> 'int' contains-errors '!='
|   | | |-CallExpr 0x12f027bc0 <col:6, col:24> '<dependent type>' contains-errors
|   | | | |-DeclRefExpr 0x12f027b20 <col:6> 'int ()' Function 0x12f0274b8 'fzread' 'int ()'
|   | | | |-DeclRefExpr 0x12f027b40 <col:13> 'unsigned char[4]' lvalue Var 0x12f00e2a0 'ct' 'unsigned char[4]'
|   | | | |-IntegerLiteral 0x12f027b60 <col:17> 'int' 4
|   | | | |-IntegerLiteral 0x12f027b80 <col:20> 'int' 1
|   | | | `-RecoveryExpr 0x12f027ba0 <col:23> '<dependent type>' contains-errors lvalue
|   | | `-IntegerLiteral 0x12f027c00 <col:29> 'int' 1
|   | `-CompoundStmt 0x12f027cf0 <col:32, line:17:2>
|   |   |-CallExpr 0x12f027c98 <line:15:3, col:18> 'int'
|   |   | |-ImplicitCastExpr 0x12f027c80 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x12f027c40 <col:3> 'int ()' Function 0x12f0276b8 'error_set' 'int ()'
|   |   | `-ImplicitCastExpr 0x12f027cc0 <col:13> 'char *' <ArrayToPointerDecay>
|   |   |   `-StringLiteral 0x12f027c60 <col:13> 'char[4]' lvalue "STR"
|   |   `-GotoStmt 0x12f027cd8 <line:16:3, col:8> 'err' 0x12f027878
|   |-BinaryOperator 0x12f027e30 <line:19:2, col:27> 'unsigned int' '='
|   | |-UnaryOperator 0x12f027d68 <col:2, col:3> 'unsigned int' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x12f027d50 <col:3> 'unsigned int *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x12f027d30 <col:3> 'unsigned int *' lvalue ParmVar 0x12f00df48 'type' 'unsigned int *'
|   | `-ImplicitCastExpr 0x12f027e18 <col:10, col:27> 'unsigned int' <IntegralCast>
|   |   `-CallExpr 0x12f027dd8 <col:10, col:27> 'int'
|   |     |-ImplicitCastExpr 0x12f027dc0 <col:10> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x12f027d80 <col:10> 'int ()' Function 0x12f027998 'be_uint32_read' 'int ()'
|   |     `-ImplicitCastExpr 0x12f027e00 <col:25> 'unsigned char *' <ArrayToPointerDecay>
|   |       `-DeclRefExpr 0x12f027da0 <col:25> 'unsigned char[4]' lvalue Var 0x12f00e2a0 'ct' 'unsigned char[4]'
|   |-IfStmt 0x12f029620 <line:21:2, line:34:2> has_else
|   | |-ImplicitCastExpr 0x12f027ea0 <line:21:6, col:7> 'unsigned int' <LValueToRValue>
|   | | `-UnaryOperator 0x12f027e88 <col:6, col:7> 'unsigned int' lvalue prefix '*' cannot overflow
|   | |   `-ImplicitCastExpr 0x12f027e70 <col:7> 'unsigned int *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x12f027e50 <col:7> 'unsigned int *' lvalue ParmVar 0x12f00dec8 'size' 'unsigned int *'
|   | |-CompoundStmt 0x12f029538 <col:13, line:32:2>
|   | | |-BinaryOperator 0x12f0290e8 <line:22:3, col:23> 'unsigned char *' '='
|   | | | |-UnaryOperator 0x12f027ef0 <col:3, col:4> 'unsigned char *' lvalue prefix '*' cannot overflow
|   | | | | `-ImplicitCastExpr 0x12f027ed8 <col:4> 'unsigned char **' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x12f027eb8 <col:4> 'unsigned char **' lvalue ParmVar 0x12f00de10 'data' 'unsigned char **'
|   | | | `-ImplicitCastExpr 0x12f0290d0 <col:11, col:23> 'unsigned char *' <BitCast>
|   | | |   `-CallExpr 0x12f029078 <col:11, col:23> 'void *'
|   | | |     |-ImplicitCastExpr 0x12f029060 <col:11> 'void *(*)(unsigned long)' <FunctionToPointerDecay>
|   | | |     | `-DeclRefExpr 0x12f028fa0 <col:11> 'void *(unsigned long)' Function 0x12f028e00 'malloc' 'void *(unsigned long)'
|   | | |     `-ImplicitCastExpr 0x12f0290b8 <col:18, col:19> 'unsigned long' <IntegralCast>
|   | | |       `-ImplicitCastExpr 0x12f0290a0 <col:18, col:19> 'unsigned int' <LValueToRValue>
|   | | |         `-UnaryOperator 0x12f028ff8 <col:18, col:19> 'unsigned int' lvalue prefix '*' cannot overflow
|   | | |           `-ImplicitCastExpr 0x12f028fe0 <col:19> 'unsigned int *' <LValueToRValue>
|   | | |             `-DeclRefExpr 0x12f028fc0 <col:19> 'unsigned int *' lvalue ParmVar 0x12f00dec8 'size' 'unsigned int *'
|   | | |-IfStmt 0x12f029258 <line:23:3, line:26:3>
|   | | | |-UnaryOperator 0x12f029170 <line:23:7, col:9> 'int' prefix '!' cannot overflow
|   | | | | `-ImplicitCastExpr 0x12f029158 <col:8, col:9> 'unsigned char *' <LValueToRValue>
|   | | | |   `-UnaryOperator 0x12f029140 <col:8, col:9> 'unsigned char *' lvalue prefix '*' cannot overflow
|   | | | |     `-ImplicitCastExpr 0x12f029128 <col:9> 'unsigned char **' <LValueToRValue>
|   | | | |       `-DeclRefExpr 0x12f029108 <col:9> 'unsigned char **' lvalue ParmVar 0x12f00de10 'data' 'unsigned char **'
|   | | | `-CompoundStmt 0x12f029238 <col:15, line:26:3>
|   | | |   |-CallExpr 0x12f0291e0 <line:24:4, col:19> 'int'
|   | | |   | |-ImplicitCastExpr 0x12f0291c8 <col:4> 'int (*)()' <FunctionToPointerDecay>
|   | | |   | | `-DeclRefExpr 0x12f029188 <col:4> 'int ()' Function 0x12f0276b8 'error_set' 'int ()'
|   | | |   | `-ImplicitCastExpr 0x12f029208 <col:14> 'char *' <ArrayToPointerDecay>
|   | | |   |   `-StringLiteral 0x12f0291a8 <col:14> 'char[4]' lvalue "STR"
|   | | |   `-GotoStmt 0x12f029220 <line:25:4, col:9> 'err' 0x12f027878
|   | | `-IfStmt 0x12f029518 <line:28:3, line:31:3>
|   | |   |-BinaryOperator 0x12f0293d8 <line:28:7, col:37> 'int' contains-errors '!='
|   | |   | |-CallExpr 0x12f029378 <col:7, col:32> '<dependent type>' contains-errors
|   | |   | | |-DeclRefExpr 0x12f029278 <col:7> 'int ()' Function 0x12f0274b8 'fzread' 'int ()'
|   | |   | | |-UnaryOperator 0x12f0292d0 <col:14, col:15> 'unsigned char *' lvalue prefix '*' cannot overflow
|   | |   | | | `-ImplicitCastExpr 0x12f0292b8 <col:15> 'unsigned char **' <LValueToRValue>
|   | |   | | |   `-DeclRefExpr 0x12f029298 <col:15> 'unsigned char **' lvalue ParmVar 0x12f00de10 'data' 'unsigned char **'
|   | |   | | |-UnaryOperator 0x12f029320 <col:21, col:22> 'unsigned int' lvalue prefix '*' cannot overflow
|   | |   | | | `-ImplicitCastExpr 0x12f029308 <col:22> 'unsigned int *' <LValueToRValue>
|   | |   | | |   `-DeclRefExpr 0x12f0292e8 <col:22> 'unsigned int *' lvalue ParmVar 0x12f00dec8 'size' 'unsigned int *'
|   | |   | | |-IntegerLiteral 0x12f029338 <col:28> 'int' 1
|   | |   | | `-RecoveryExpr 0x12f029358 <col:31> '<dependent type>' contains-errors lvalue
|   | |   | `-IntegerLiteral 0x12f0293b8 <col:37> 'int' 1
|   | |   `-CompoundStmt 0x12f0294f8 <col:40, line:31:3>
|   | |     |-CallExpr 0x12f029450 <line:29:4, col:19> 'int'
|   | |     | |-ImplicitCastExpr 0x12f029438 <col:4> 'int (*)()' <FunctionToPointerDecay>
|   | |     | | `-DeclRefExpr 0x12f0293f8 <col:4> 'int ()' Function 0x12f0276b8 'error_set' 'int ()'
|   | |     | `-ImplicitCastExpr 0x12f029478 <col:14> 'char *' <ArrayToPointerDecay>
|   | |     |   `-StringLiteral 0x12f029418 <col:14> 'char[4]' lvalue "STR"
|   | |     `-GotoStmt 0x12f0294e0 <line:30:4, col:9> 'err_data' 0x12f029490
|   | `-CompoundStmt 0x12f029608 <line:32:9, line:34:2>
|   |   `-BinaryOperator 0x12f0295e8 <line:33:3, col:11> 'unsigned char *' '='
|   |     |-UnaryOperator 0x12f029598 <col:3, col:4> 'unsigned char *' lvalue prefix '*' cannot overflow
|   |     | `-ImplicitCastExpr 0x12f029580 <col:4> 'unsigned char **' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x12f029560 <col:4> 'unsigned char **' lvalue ParmVar 0x12f00de10 'data' 'unsigned char **'
|   |     `-ImplicitCastExpr 0x12f0295d0 <col:11> 'unsigned char *' <NullToPointer>
|   |       `-IntegerLiteral 0x12f0295b0 <col:11> 'int' 0
|   |-IfStmt 0x12f029840 <line:36:2, line:39:2>
|   | |-BinaryOperator 0x12f029750 <line:36:6, col:29> 'int' contains-errors '!='
|   | | |-CallExpr 0x12f0296f0 <col:6, col:24> '<dependent type>' contains-errors
|   | | | |-DeclRefExpr 0x12f029650 <col:6> 'int ()' Function 0x12f0274b8 'fzread' 'int ()'
|   | | | |-DeclRefExpr 0x12f029670 <col:13> 'unsigned char[4]' lvalue Var 0x12f00e388 'cc' 'unsigned char[4]'
|   | | | |-IntegerLiteral 0x12f029690 <col:17> 'int' 4
|   | | | |-IntegerLiteral 0x12f0296b0 <col:20> 'int' 1
|   | | | `-RecoveryExpr 0x12f0296d0 <col:23> '<dependent type>' contains-errors lvalue
|   | | `-IntegerLiteral 0x12f029730 <col:29> 'int' 1
|   | `-CompoundStmt 0x12f029820 <col:32, line:39:2>
|   |   |-CallExpr 0x12f0297c8 <line:37:3, col:18> 'int'
|   |   | |-ImplicitCastExpr 0x12f0297b0 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x12f029770 <col:3> 'int ()' Function 0x12f0276b8 'error_set' 'int ()'
|   |   | `-ImplicitCastExpr 0x12f0297f0 <col:13> 'char *' <ArrayToPointerDecay>
|   |   |   `-StringLiteral 0x12f029790 <col:13> 'char[4]' lvalue "STR"
|   |   `-GotoStmt 0x12f029808 <line:38:3, col:8> 'err_data' 0x12f029490
|   |-ReturnStmt 0x12f029880 <line:41:2, col:9>
|   | `-IntegerLiteral 0x12f029860 <col:9> 'int' 0
|   |-LabelStmt 0x12f029b60 <line:42:1, line:43:12> 'err_data'
|   | `-CallExpr 0x12f029b08 <col:2, col:12> 'void'
|   |   |-ImplicitCastExpr 0x12f029af0 <col:2> 'void (*)(void *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x12f029a38 <col:2> 'void (void *)' Function 0x12f0298c8 'free' 'void (void *)'
|   |   `-ImplicitCastExpr 0x12f029b48 <col:7, col:8> 'void *' <BitCast>
|   |     `-ImplicitCastExpr 0x12f029b30 <col:7, col:8> 'unsigned char *' <LValueToRValue>
|   |       `-UnaryOperator 0x12f029a90 <col:7, col:8> 'unsigned char *' lvalue prefix '*' cannot overflow
|   |         `-ImplicitCastExpr 0x12f029a78 <col:8> 'unsigned char **' <LValueToRValue>
|   |           `-DeclRefExpr 0x12f029a58 <col:8> 'unsigned char **' lvalue ParmVar 0x12f00de10 'data' 'unsigned char **'
|   `-LabelStmt 0x12f029bc8 <line:44:1, line:45:10> 'err'
|     `-ReturnStmt 0x12f029bb8 <col:2, col:10>
|       `-UnaryOperator 0x12f029ba0 <col:9, col:10> 'int' prefix '-'
|         `-IntegerLiteral 0x12f029b80 <col:10> 'int' 1
|-FunctionDecl 0x12f028e00 <line:22:11> col:11 implicit used malloc 'void *(unsigned long)' extern
| |-ParmVarDecl 0x12f028f00 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-BuiltinAttr 0x12f028ea8 <<invalid sloc>> Implicit 871
| `-AllocSizeAttr 0x12f028f70 <col:11> Implicit 1
`-FunctionDecl 0x12f0298c8 <line:43:2> col:2 implicit used free 'void (void *)' extern
  |-ParmVarDecl 0x12f0299c8 <<invalid sloc>> <invalid sloc> 'void *'
  `-BuiltinAttr 0x12f029970 <<invalid sloc>> Implicit 873
