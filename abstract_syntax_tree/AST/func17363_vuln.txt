TranslationUnitDecl 0x127055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1270564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x127055bd0 '__int128'
|-TypedefDecl 0x127056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x127055bf0 'unsigned __int128'
|-TypedefDecl 0x127120230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x127120000 'struct __NSConstantString_tag'
|   `-Record 0x127056580 '__NSConstantString_tag'
|-TypedefDecl 0x127120298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x127055d90 '__SVInt8_t'
|-TypedefDecl 0x127120300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x127055db0 '__SVInt16_t'
|-TypedefDecl 0x127120368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x127055dd0 '__SVInt32_t'
|-TypedefDecl 0x1271203d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x127055df0 '__SVInt64_t'
|-TypedefDecl 0x127120438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x127055e10 '__SVUint8_t'
|-TypedefDecl 0x1271204a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x127055e30 '__SVUint16_t'
|-TypedefDecl 0x127120508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x127055e50 '__SVUint32_t'
|-TypedefDecl 0x127120570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x127055e70 '__SVUint64_t'
|-TypedefDecl 0x1271205d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x127055e90 '__SVFloat16_t'
|-TypedefDecl 0x127120640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x127055eb0 '__SVFloat32_t'
|-TypedefDecl 0x1271206a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x127055ed0 '__SVFloat64_t'
|-TypedefDecl 0x127120710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x127055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x127120778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x127055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1271207e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x127055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x127120848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x127055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1271208b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x127055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x127120918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x127055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x127120980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x127055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1271209e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x127055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x127120a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x127055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x127120ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x127056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x127120b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x127056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x127120b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x127056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x127120bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x127056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x127120c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x127056090 '__clang_svint8x3_t'
|-TypedefDecl 0x127120cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1270560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x127120d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1270560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x127120d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1270560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x127120df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x127056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x127120e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x127056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x127120ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x127056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x127120f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x127056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x127120f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x127056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x127121800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1270561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x127121868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1270561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1271218d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1270561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x127121938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x127056210 '__clang_svint8x4_t'
|-TypedefDecl 0x1271219a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x127056230 '__clang_svint16x4_t'
|-TypedefDecl 0x127121a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x127056250 '__clang_svint32x4_t'
|-TypedefDecl 0x127121a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x127056270 '__clang_svint64x4_t'
|-TypedefDecl 0x127121ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x127056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x127121b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1270562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x127121ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1270562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x127121c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1270562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x127121c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x127056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x127121ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x127056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x127121d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x127056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x127121db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x127056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x127121e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x127056390 '__SVBool_t'
|-TypedefDecl 0x127121e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1270563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x127121ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1270563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x127121f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1270563f0 '__SVCount_t'
|-TypedefDecl 0x127121ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x127121fb0 'char *'
|   `-BuiltinType 0x1270556b0 'char'
|-TypedefDecl 0x127122068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x127121fb0 'char *'
|   `-BuiltinType 0x1270556b0 'char'
`-FunctionDecl 0x127122288 <dataset_diviso_filec/func17363_vuln.c:1:1, line:68:1> line:1:5 invalid MSG_ReadBits 'int (int *, int)'
  |-ParmVarDecl 0x127122128 <col:19, col:26> col:26 referenced invalid msg 'int *'
  |-ParmVarDecl 0x1271221a8 <col:31, col:35> col:35 used bits 'int'
  `-CompoundStmt 0x127810510 <col:42, line:68:1>
    |-DeclStmt 0x1271223c0 <line:2:2, col:13>
    | `-VarDecl 0x127122358 <col:2, col:8> col:8 used value 'int'
    |-DeclStmt 0x127122458 <line:3:2, col:11>
    | `-VarDecl 0x1271223f0 <col:2, col:8> col:8 used get 'int'
    |-DeclStmt 0x127122588 <line:5:2, col:16>
    | |-VarDecl 0x127122488 <col:2, col:8> col:8 used i 'int'
    | `-VarDecl 0x127122508 <col:2, col:11> col:11 used nbits 'int'
    |-BinaryOperator 0x1271225e0 <line:8:2, col:10> 'int' '='
    | |-DeclRefExpr 0x1271225a0 <col:2> 'int' lvalue Var 0x127122358 'value' 'int'
    | `-IntegerLiteral 0x1271225c0 <col:10> 'int' 0
    |-IfStmt 0x127122760 <line:10:2, line:15:2> has_else
    | |-BinaryOperator 0x127122658 <line:10:7, col:14> 'int' '<'
    | | |-ImplicitCastExpr 0x127122640 <col:7> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x127122600 <col:7> 'int' lvalue ParmVar 0x1271221a8 'bits' 'int'
    | | `-IntegerLiteral 0x127122620 <col:14> 'int' 0
    | |-CompoundStmt 0x127122720 <col:18, line:13:2>
    | | `-BinaryOperator 0x1271226e8 <line:11:3, col:11> 'int' '='
    | |   |-DeclRefExpr 0x127122678 <col:3> 'int' lvalue ParmVar 0x1271221a8 'bits' 'int'
    | |   `-UnaryOperator 0x1271226d0 <col:10, col:11> 'int' prefix '-'
    | |     `-ImplicitCastExpr 0x1271226b8 <col:11> 'int' <LValueToRValue>
    | |       `-DeclRefExpr 0x127122698 <col:11> 'int' lvalue ParmVar 0x1271221a8 'bits' 'int'
    | `-CompoundStmt 0x127122750 <line:13:9, line:15:2>
    |-IfStmt 0x12780ff20 <line:17:2, line:60:2> has_else
    | |-CXXDependentScopeMemberExpr 0x1271227b0 <line:17:6, col:11> '<dependent type>' contains-errors lvalue ->oob
    | | `-RecoveryExpr 0x127122790 <col:6> '<dependent type>' contains-errors lvalue
    | |-CompoundStmt 0x12780ea90 <col:16, line:41:2>
    | | `-IfStmt 0x12780ea60 <line:18:3, line:40:35> has_else
    | |   |-BinaryOperator 0x12713be58 <line:18:6, col:12> 'int' '=='
    | |   | |-ImplicitCastExpr 0x12713be40 <col:6> 'int' <LValueToRValue>
    | |   | | `-DeclRefExpr 0x12713be00 <col:6> 'int' lvalue ParmVar 0x1271221a8 'bits' 'int'
    | |   | `-IntegerLiteral 0x12713be20 <col:12> 'int' 8
    | |   |-CompoundStmt 0x12713c198 <line:19:3, line:23:3>
    | |   | |-BinaryOperator 0x12713bfb8 <line:20:4, col:36> 'int' contains-errors '='
    | |   | | |-DeclRefExpr 0x12713be78 <col:4> 'int' lvalue Var 0x127122358 'value' 'int'
    | |   | | `-ArraySubscriptExpr 0x12713bf98 <col:12, col:36> '<dependent type>' contains-errors lvalue
    | |   | |   |-ImplicitCastExpr 0x12713bf68 <col:12, col:17> '<dependent type>' contains-errors <LValueToRValue>
    | |   | |   | `-CXXDependentScopeMemberExpr 0x12713beb8 <col:12, col:17> '<dependent type>' contains-errors lvalue ->data
    | |   | |   |   `-RecoveryExpr 0x12713be98 <col:12> '<dependent type>' contains-errors lvalue
    | |   | |   `-ImplicitCastExpr 0x12713bf80 <col:22, col:27> '<dependent type>' contains-errors <LValueToRValue>
    | |   | |     `-CXXDependentScopeMemberExpr 0x12713bf20 <col:22, col:27> '<dependent type>' contains-errors lvalue ->readcount
    | |   | |       `-RecoveryExpr 0x12713bf00 <col:22> '<dependent type>' contains-errors lvalue
    | |   | |-CompoundAssignOperator 0x12713c088 <line:21:4, col:22> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    | |   | | |-CXXDependentScopeMemberExpr 0x12713c020 <col:4, col:9> '<dependent type>' contains-errors lvalue ->readcount
    | |   | | | `-RecoveryExpr 0x12713bff8 <col:4> '<dependent type>' contains-errors lvalue
    | |   | | |   `-DeclRefExpr 0x12713bfd8 <col:4> 'int *' lvalue ParmVar 0x127122128 'msg' 'int *'
    | |   | | `-IntegerLiteral 0x12713c068 <col:22> 'int' 1
    | |   | `-CompoundAssignOperator 0x12713c168 <line:22:4, col:16> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    | |   |   |-CXXDependentScopeMemberExpr 0x12713c100 <col:4, col:9> '<dependent type>' contains-errors lvalue ->bit
    | |   |   | `-RecoveryExpr 0x12713c0d8 <col:4> '<dependent type>' contains-errors lvalue
    | |   |   |   `-DeclRefExpr 0x12713c0b8 <col:4> 'int *' lvalue ParmVar 0x127122128 'msg' 'int *'
    | |   |   `-IntegerLiteral 0x12713c148 <col:16> 'int' 8
    | |   `-IfStmt 0x12780ea30 <line:24:8, line:40:35> has_else
    | |     |-BinaryOperator 0x12713c218 <line:24:11, col:17> 'int' '=='
    | |     | |-ImplicitCastExpr 0x12713c200 <col:11> 'int' <LValueToRValue>
    | |     | | `-DeclRefExpr 0x12713c1c0 <col:11> 'int' lvalue ParmVar 0x1271221a8 'bits' 'int'
    | |     | `-IntegerLiteral 0x12713c1e0 <col:17> 'int' 16
    | |     |-CompoundStmt 0x12713c870 <line:25:3, line:32:3>
    | |     | |-DeclStmt 0x12713c2b8 <line:26:4, col:14>
    | |     | | `-VarDecl 0x12713c250 <col:4, col:10> col:10 used temp 'short'
    | |     | |-CallExpr 0x12713c5f0 <line:28:4, col:53> '<dependent type>' contains-errors
    | |     | | |-DeclRefExpr 0x12713c430 <col:4> 'int ()' Function 0x12713c378 'CopyLittleShort' 'int ()'
    | |     | | |-UnaryOperator 0x12713c4a0 <col:20, col:21> 'short *' prefix '&' cannot overflow
    | |     | | | `-DeclRefExpr 0x12713c450 <col:21> 'short' lvalue Var 0x12713c250 'temp' 'short'
    | |     | | `-UnaryOperator 0x12713c5d8 <col:27, col:52> '<dependent type>' contains-errors prefix '&' cannot overflow
    | |     | |   `-ArraySubscriptExpr 0x12713c5b8 <col:28, col:52> '<dependent type>' contains-errors lvalue
    | |     | |     |-ImplicitCastExpr 0x12713c588 <col:28, col:33> '<dependent type>' contains-errors <LValueToRValue>
    | |     | |     | `-CXXDependentScopeMemberExpr 0x12713c4d8 <col:28, col:33> '<dependent type>' contains-errors lvalue ->data
    | |     | |     |   `-RecoveryExpr 0x12713c4b8 <col:28> '<dependent type>' contains-errors lvalue
    | |     | |     `-ImplicitCastExpr 0x12713c5a0 <col:38, col:43> '<dependent type>' contains-errors <LValueToRValue>
    | |     | |       `-CXXDependentScopeMemberExpr 0x12713c540 <col:38, col:43> '<dependent type>' contains-errors lvalue ->readcount
    | |     | |         `-RecoveryExpr 0x12713c520 <col:38> '<dependent type>' contains-errors lvalue
    | |     | |-BinaryOperator 0x12713c690 <line:29:4, col:12> 'int' '='
    | |     | | |-DeclRefExpr 0x12713c620 <col:4> 'int' lvalue Var 0x127122358 'value' 'int'
    | |     | | `-ImplicitCastExpr 0x12713c678 <col:12> 'int' <IntegralCast>
    | |     | |   `-ImplicitCastExpr 0x12713c660 <col:12> 'short' <LValueToRValue>
    | |     | |     `-DeclRefExpr 0x12713c640 <col:12> 'short' lvalue Var 0x12713c250 'temp' 'short'
    | |     | |-CompoundAssignOperator 0x12713c760 <line:30:4, col:22> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    | |     | | |-CXXDependentScopeMemberExpr 0x12713c6f8 <col:4, col:9> '<dependent type>' contains-errors lvalue ->readcount
    | |     | | | `-RecoveryExpr 0x12713c6d0 <col:4> '<dependent type>' contains-errors lvalue
    | |     | | |   `-DeclRefExpr 0x12713c6b0 <col:4> 'int *' lvalue ParmVar 0x127122128 'msg' 'int *'
    | |     | | `-IntegerLiteral 0x12713c740 <col:22> 'int' 2
    | |     | `-CompoundAssignOperator 0x12713c840 <line:31:4, col:16> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    | |     |   |-CXXDependentScopeMemberExpr 0x12713c7d8 <col:4, col:9> '<dependent type>' contains-errors lvalue ->bit
    | |     |   | `-RecoveryExpr 0x12713c7b0 <col:4> '<dependent type>' contains-errors lvalue
    | |     |   |   `-DeclRefExpr 0x12713c790 <col:4> 'int *' lvalue ParmVar 0x127122128 'msg' 'int *'
    | |     |   `-IntegerLiteral 0x12713c820 <col:16> 'int' 16
    | |     `-IfStmt 0x12780ea00 <line:33:8, line:40:35> has_else
    | |       |-BinaryOperator 0x12713c900 <line:33:11, col:17> 'int' '=='
    | |       | |-ImplicitCastExpr 0x12713c8e8 <col:11> 'int' <LValueToRValue>
    | |       | | `-DeclRefExpr 0x12713c8a8 <col:11> 'int' lvalue ParmVar 0x1271221a8 'bits' 'int'
    | |       | `-IntegerLiteral 0x12713c8c8 <col:17> 'int' 32
    | |       |-CompoundStmt 0x12713cd80 <line:34:3, line:38:3>
    | |       | |-CallExpr 0x12713cb90 <line:35:4, col:53> '<dependent type>' contains-errors
    | |       | | |-DeclRefExpr 0x12713ca00 <col:4> 'int ()' Function 0x12713c948 'CopyLittleLong' 'int ()'
    | |       | | |-UnaryOperator 0x12713ca40 <col:19, col:20> 'int *' prefix '&' cannot overflow
    | |       | | | `-DeclRefExpr 0x12713ca20 <col:20> 'int' lvalue Var 0x127122358 'value' 'int'
    | |       | | `-UnaryOperator 0x12713cb78 <col:27, col:52> '<dependent type>' contains-errors prefix '&' cannot overflow
    | |       | |   `-ArraySubscriptExpr 0x12713cb58 <col:28, col:52> '<dependent type>' contains-errors lvalue
    | |       | |     |-ImplicitCastExpr 0x12713cb28 <col:28, col:33> '<dependent type>' contains-errors <LValueToRValue>
    | |       | |     | `-CXXDependentScopeMemberExpr 0x12713ca78 <col:28, col:33> '<dependent type>' contains-errors lvalue ->data
    | |       | |     |   `-RecoveryExpr 0x12713ca58 <col:28> '<dependent type>' contains-errors lvalue
    | |       | |     `-ImplicitCastExpr 0x12713cb40 <col:38, col:43> '<dependent type>' contains-errors <LValueToRValue>
    | |       | |       `-CXXDependentScopeMemberExpr 0x12713cae0 <col:38, col:43> '<dependent type>' contains-errors lvalue ->readcount
    | |       | |         `-RecoveryExpr 0x12713cac0 <col:38> '<dependent type>' contains-errors lvalue
    | |       | |-CompoundAssignOperator 0x12713cc70 <line:36:4, col:22> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    | |       | | |-CXXDependentScopeMemberExpr 0x12713cc08 <col:4, col:9> '<dependent type>' contains-errors lvalue ->readcount
    | |       | | | `-RecoveryExpr 0x12713cbe0 <col:4> '<dependent type>' contains-errors lvalue
    | |       | | |   `-DeclRefExpr 0x12713cbc0 <col:4> 'int *' lvalue ParmVar 0x127122128 'msg' 'int *'
    | |       | | `-IntegerLiteral 0x12713cc50 <col:22> 'int' 4
    | |       | `-CompoundAssignOperator 0x12713cd50 <line:37:4, col:16> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    | |       |   |-CXXDependentScopeMemberExpr 0x12713cce8 <col:4, col:9> '<dependent type>' contains-errors lvalue ->bit
    | |       |   | `-RecoveryExpr 0x12713ccc0 <col:4> '<dependent type>' contains-errors lvalue
    | |       |   |   `-DeclRefExpr 0x12713cca0 <col:4> 'int *' lvalue ParmVar 0x127122128 'msg' 'int *'
    | |       |   `-IntegerLiteral 0x12713cd30 <col:16> 'int' 32
    | |       `-CallExpr 0x12780e9c8 <line:40:4, col:35> '<dependent type>' contains-errors
    | |         |-DeclRefExpr 0x12780e8b8 <col:4> 'int ()' Function 0x12780e800 'Com_Error' 'int ()'
    | |         |-RecoveryExpr 0x12780e9a8 <col:14> '<dependent type>' contains-errors lvalue
    | |         |-StringLiteral 0x12780e930 <col:24> 'char[4]' lvalue "STR"
    | |         `-DeclRefExpr 0x12780e950 <col:31> 'int' lvalue ParmVar 0x1271221a8 'bits' 'int'
    | `-CompoundStmt 0x12780fef0 <line:41:9, line:60:2>
    |   |-BinaryOperator 0x12780eae8 <line:42:3, col:11> 'int' '='
    |   | |-DeclRefExpr 0x12780eaa8 <col:3> 'int' lvalue Var 0x127122508 'nbits' 'int'
    |   | `-IntegerLiteral 0x12780eac8 <col:11> 'int' 0
    |   |-IfStmt 0x12780f170 <line:43:3, line:49:3>
    |   | |-BinaryOperator 0x12780eb60 <line:43:7, col:12> 'int' '&'
    |   | | |-ImplicitCastExpr 0x12780eb48 <col:7> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x12780eb08 <col:7> 'int' lvalue ParmVar 0x1271221a8 'bits' 'int'
    |   | | `-IntegerLiteral 0x12780eb28 <col:12> 'int' 7
    |   | `-CompoundStmt 0x12780f148 <col:15, line:49:3>
    |   |   |-BinaryOperator 0x12780ec18 <line:44:4, col:17> 'int' '='
    |   |   | |-DeclRefExpr 0x12780eb80 <col:4> 'int' lvalue Var 0x127122508 'nbits' 'int'
    |   |   | `-BinaryOperator 0x12780ebf8 <col:12, col:17> 'int' '&'
    |   |   |   |-ImplicitCastExpr 0x12780ebe0 <col:12> 'int' <LValueToRValue>
    |   |   |   | `-DeclRefExpr 0x12780eba0 <col:12> 'int' lvalue ParmVar 0x1271221a8 'bits' 'int'
    |   |   |   `-IntegerLiteral 0x12780ebc0 <col:17> 'int' 7
    |   |   |-ForStmt 0x12780f040 <line:45:4, line:47:4>
    |   |   | |-BinaryOperator 0x12780ec78 <line:45:8, col:10> 'int' '='
    |   |   | | |-DeclRefExpr 0x12780ec38 <col:8> 'int' lvalue Var 0x127122488 'i' 'int'
    |   |   | | `-IntegerLiteral 0x12780ec58 <col:10> 'int' 0
    |   |   | |-<<<NULL>>>
    |   |   | |-BinaryOperator 0x12780ed08 <col:12, col:14> 'int' '<'
    |   |   | | |-ImplicitCastExpr 0x12780ecd8 <col:12> 'int' <LValueToRValue>
    |   |   | | | `-DeclRefExpr 0x12780ec98 <col:12> 'int' lvalue Var 0x127122488 'i' 'int'
    |   |   | | `-ImplicitCastExpr 0x12780ecf0 <col:14> 'int' <LValueToRValue>
    |   |   | |   `-DeclRefExpr 0x12780ecb8 <col:14> 'int' lvalue Var 0x127122508 'nbits' 'int'
    |   |   | |-UnaryOperator 0x12780ed48 <col:20, col:21> 'int' postfix '++'
    |   |   | | `-DeclRefExpr 0x12780ed28 <col:20> 'int' lvalue Var 0x127122488 'i' 'int'
    |   |   | `-CompoundStmt 0x12780f028 <col:25, line:47:4>
    |   |   |   `-CompoundAssignOperator 0x12780eff8 <line:46:5, col:51> 'int' contains-errors '|=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    |   |   |     |-DeclRefExpr 0x12780ed60 <col:5> 'int' lvalue Var 0x127122358 'value' 'int'
    |   |   |     `-ParenExpr 0x12780efd8 <col:14, col:51> '<dependent type>' contains-errors
    |   |   |       `-BinaryOperator 0x12780efb8 <col:15, col:50> '<dependent type>' contains-errors '<<'
    |   |   |         |-CallExpr 0x12780ef68 <col:15, col:47> '<dependent type>' contains-errors
    |   |   |         | |-DeclRefExpr 0x12780ee60 <col:15> 'int ()' Function 0x12780eda8 'Huff_getBit' 'int ()'
    |   |   |         | |-CXXDependentScopeMemberExpr 0x12780eea0 <col:27, col:32> '<dependent type>' contains-errors lvalue ->data
    |   |   |         | | `-RecoveryExpr 0x12780ee80 <col:27> '<dependent type>' contains-errors lvalue
    |   |   |         | `-UnaryOperator 0x12780ef50 <col:38, col:44> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   |   |         |   `-CXXDependentScopeMemberExpr 0x12780ef08 <col:39, col:44> '<dependent type>' contains-errors lvalue ->bit
    |   |   |         |     `-RecoveryExpr 0x12780eee8 <col:39> '<dependent type>' contains-errors lvalue
    |   |   |         `-DeclRefExpr 0x12780ef98 <col:50> 'int' lvalue Var 0x127122488 'i' 'int'
    |   |   `-BinaryOperator 0x12780f128 <line:48:4, col:18> 'int' '='
    |   |     |-DeclRefExpr 0x12780f078 <col:4> 'int' lvalue ParmVar 0x1271221a8 'bits' 'int'
    |   |     `-BinaryOperator 0x12780f108 <col:11, col:18> 'int' '-'
    |   |       |-ImplicitCastExpr 0x12780f0d8 <col:11> 'int' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x12780f098 <col:11> 'int' lvalue ParmVar 0x1271221a8 'bits' 'int'
    |   |       `-ImplicitCastExpr 0x12780f0f0 <col:18> 'int' <LValueToRValue>
    |   |         `-DeclRefExpr 0x12780f0b8 <col:18> 'int' lvalue Var 0x127122508 'nbits' 'int'
    |   |-IfStmt 0x12780fd18 <line:50:3, line:58:3>
    |   | |-ImplicitCastExpr 0x12780f1b0 <line:50:7> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x12780f190 <col:7> 'int' lvalue ParmVar 0x1271221a8 'bits' 'int'
    |   | `-CompoundStmt 0x12780fd00 <col:13, line:58:3>
    |   |   `-ForStmt 0x12780fcc8 <line:52:4, line:56:4>
    |   |     |-BinaryOperator 0x12780f208 <line:52:8, col:10> 'int' '='
    |   |     | |-DeclRefExpr 0x12780f1c8 <col:8> 'int' lvalue Var 0x127122488 'i' 'int'
    |   |     | `-IntegerLiteral 0x12780f1e8 <col:10> 'int' 0
    |   |     |-<<<NULL>>>
    |   |     |-BinaryOperator 0x12780f298 <col:12, col:14> 'int' '<'
    |   |     | |-ImplicitCastExpr 0x12780f268 <col:12> 'int' <LValueToRValue>
    |   |     | | `-DeclRefExpr 0x12780f228 <col:12> 'int' lvalue Var 0x127122488 'i' 'int'
    |   |     | `-ImplicitCastExpr 0x12780f280 <col:14> 'int' <LValueToRValue>
    |   |     |   `-DeclRefExpr 0x12780f248 <col:14> 'int' lvalue ParmVar 0x1271221a8 'bits' 'int'
    |   |     |-CompoundAssignOperator 0x12780f2f8 <col:19, col:22> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |   |     | |-DeclRefExpr 0x12780f2b8 <col:19> 'int' lvalue Var 0x127122488 'i' 'int'
    |   |     | `-IntegerLiteral 0x12780f2d8 <col:22> 'int' 8
    |   |     `-CompoundStmt 0x12780fca8 <col:25, line:56:4>
    |   |       |-CallExpr 0x12780f6e0 <line:53:5, col:78> '<dependent type>' contains-errors
    |   |       | |-DeclRefExpr 0x12780f408 <col:5> 'int ()' Function 0x12780f350 'Huff_offsetReceive' 'int ()'
    |   |       | |-CXXDependentScopeMemberExpr 0x12780f698 <col:25, col:46> '<dependent type>' contains-errors lvalue .tree
    |   |       | | `-CXXDependentScopeMemberExpr 0x12780f650 <col:25, col:33> '<dependent type>' contains-errors lvalue .decompressor
    |   |       | |   `-RecoveryExpr 0x12780f630 <col:25> '<dependent type>' contains-errors lvalue
    |   |       | |-UnaryOperator 0x12780f4f0 <col:52, col:53> 'int *' prefix '&' cannot overflow
    |   |       | | `-DeclRefExpr 0x12780f4d0 <col:53> 'int' lvalue Var 0x1271223f0 'get' 'int'
    |   |       | |-CXXDependentScopeMemberExpr 0x12780f528 <col:58, col:63> '<dependent type>' contains-errors lvalue ->data
    |   |       | | `-RecoveryExpr 0x12780f508 <col:58> '<dependent type>' contains-errors lvalue
    |   |       | `-UnaryOperator 0x12780f5d8 <col:69, col:75> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   |       |   `-CXXDependentScopeMemberExpr 0x12780f590 <col:70, col:75> '<dependent type>' contains-errors lvalue ->bit
    |   |       |     `-RecoveryExpr 0x12780f570 <col:70> '<dependent type>' contains-errors lvalue
    |   |       `-CompoundAssignOperator 0x12780fc78 <line:55:5, col:29> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
    |   |         |-DeclRefExpr 0x12780f720 <col:5> 'int' lvalue Var 0x127122358 'value' 'int'
    |   |         `-ParenExpr 0x12780fc58 <col:14, col:29> 'int'
    |   |           `-BinaryOperator 0x12780fc38 <col:15, col:28> 'int' '<<'
    |   |             |-ImplicitCastExpr 0x12780fc20 <col:15> 'int' <LValueToRValue>
    |   |             | `-DeclRefExpr 0x12780f740 <col:15> 'int' lvalue Var 0x1271223f0 'get' 'int'
    |   |             `-ParenExpr 0x12780fc00 <col:20, col:28> 'int'
    |   |               `-BinaryOperator 0x12780f7d0 <col:21, col:23> 'int' '+'
    |   |                 |-ImplicitCastExpr 0x12780f7a0 <col:21> 'int' <LValueToRValue>
    |   |                 | `-DeclRefExpr 0x12780f760 <col:21> 'int' lvalue Var 0x127122488 'i' 'int'
    |   |                 `-ImplicitCastExpr 0x12780f7b8 <col:23> 'int' <LValueToRValue>
    |   |                   `-DeclRefExpr 0x12780f780 <col:23> 'int' lvalue Var 0x127122508 'nbits' 'int'
    |   `-BinaryOperator 0x12780fed0 <line:59:3, col:34> '<dependent type>' contains-errors '='
    |     |-CXXDependentScopeMemberExpr 0x12780fd80 <col:3, col:8> '<dependent type>' contains-errors lvalue ->readcount
    |     | `-RecoveryExpr 0x12780fd58 <col:3> '<dependent type>' contains-errors lvalue
    |     |   `-DeclRefExpr 0x12780fd38 <col:3> 'int *' lvalue ParmVar 0x127122128 'msg' 'int *'
    |     `-BinaryOperator 0x12780feb0 <col:20, col:34> '<dependent type>' contains-errors '+'
    |       |-ParenExpr 0x12780fe70 <col:20, col:32> '<dependent type>' contains-errors
    |       | `-BinaryOperator 0x12780fe50 <col:21, col:31> '<dependent type>' contains-errors '>>'
    |       |   |-CXXDependentScopeMemberExpr 0x12780fde8 <col:21, col:26> '<dependent type>' contains-errors lvalue ->bit
    |       |   | `-RecoveryExpr 0x12780fdc8 <col:21> '<dependent type>' contains-errors lvalue
    |       |   `-IntegerLiteral 0x12780fe30 <col:31> 'int' 3
    |       `-IntegerLiteral 0x12780fe90 <col:34> 'int' 1
    |-IfStmt 0x1278104a8 <line:61:2, line:65:2>
    | |-BinaryOperator 0x127810148 <line:61:7, col:33> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x1278100f0 <col:7, col:21> 'int' contains-errors '&&'
    | | | |-RecoveryExpr 0x127810098 <col:7> '<dependent type>' contains-errors lvalue
    | | | `-BinaryOperator 0x1278100d0 <col:14, col:21> 'int' '>'
    | | |   |-ImplicitCastExpr 0x1278100b8 <col:14> 'int' <LValueToRValue>
    | | |   | `-DeclRefExpr 0x12780ff68 <col:14> 'int' lvalue ParmVar 0x1271221a8 'bits' 'int'
    | | |   `-IntegerLiteral 0x12780ff88 <col:21> 'int' 0
    | | `-BinaryOperator 0x127810128 <col:26, col:33> 'int' '<'
    | |   |-ImplicitCastExpr 0x127810110 <col:26> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x127810000 <col:26> 'int' lvalue ParmVar 0x1271221a8 'bits' 'int'
    | |   `-IntegerLiteral 0x127810020 <col:33> 'int' 32
    | `-CompoundStmt 0x127810490 <col:38, line:65:2>
    |   `-IfStmt 0x127810470 <line:62:3, line:64:3>
    |     |-BinaryOperator 0x127810298 <line:62:8, col:36> 'int' '&'
    |     | |-ImplicitCastExpr 0x127810280 <col:8> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x127810168 <col:8> 'int' lvalue Var 0x127122358 'value' 'int'
    |     | `-ParenExpr 0x127810260 <col:16, col:36> 'int'
    |     |   `-BinaryOperator 0x127810240 <col:18, col:34> 'int' '<<'
    |     |     |-IntegerLiteral 0x127810188 <col:18> 'int' 1
    |     |     `-ParenExpr 0x127810220 <col:23, col:34> 'int'
    |     |       `-BinaryOperator 0x127810200 <col:25, col:32> 'int' '-'
    |     |         |-ImplicitCastExpr 0x1278101e8 <col:25> 'int' <LValueToRValue>
    |     |         | `-DeclRefExpr 0x1278101a8 <col:25> 'int' lvalue ParmVar 0x1271221a8 'bits' 'int'
    |     |         `-IntegerLiteral 0x1278101c8 <col:32> 'int' 1
    |     `-CompoundStmt 0x127810458 <col:40, line:64:3>
    |       `-CompoundAssignOperator 0x127810428 <line:63:4, col:38> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
    |         |-DeclRefExpr 0x1278102b8 <col:4> 'int' lvalue Var 0x127122358 'value' 'int'
    |         `-BinaryOperator 0x127810408 <col:13, col:38> 'int' '^'
    |           |-UnaryOperator 0x1278102f8 <col:13, col:14> 'int' prefix '-'
    |           | `-IntegerLiteral 0x1278102d8 <col:14> 'int' 1
    |           `-ParenExpr 0x1278103e8 <col:18, col:38> 'int'
    |             `-BinaryOperator 0x1278103c8 <col:20, col:36> 'int' '-'
    |               |-ParenExpr 0x127810388 <col:20, col:32> 'int'
    |               | `-BinaryOperator 0x127810368 <col:22, col:27> 'int' '<<'
    |               |   |-IntegerLiteral 0x127810310 <col:22> 'int' 1
    |               |   `-ImplicitCastExpr 0x127810350 <col:27> 'int' <LValueToRValue>
    |               |     `-DeclRefExpr 0x127810330 <col:27> 'int' lvalue ParmVar 0x1271221a8 'bits' 'int'
    |               `-IntegerLiteral 0x1278103a8 <col:36> 'int' 1
    `-ReturnStmt 0x127810500 <line:67:2, col:9>
      `-ImplicitCastExpr 0x1278104e8 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x1278104c8 <col:9> 'int' lvalue Var 0x127122358 'value' 'int'
