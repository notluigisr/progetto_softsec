TranslationUnitDecl 0x13304c408 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x13304d2b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x13304c9d0 '__int128'
|-TypedefDecl 0x13304d328 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x13304c9f0 'unsigned __int128'
|-TypedefDecl 0x13380be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13380bc00 'struct __NSConstantString_tag'
|   `-Record 0x13304d380 '__NSConstantString_tag'
|-TypedefDecl 0x13380be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x13304cb90 '__SVInt8_t'
|-TypedefDecl 0x13380bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x13304cbb0 '__SVInt16_t'
|-TypedefDecl 0x13380bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x13304cbd0 '__SVInt32_t'
|-TypedefDecl 0x13380bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x13304cbf0 '__SVInt64_t'
|-TypedefDecl 0x13380c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x13304cc10 '__SVUint8_t'
|-TypedefDecl 0x13380c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x13304cc30 '__SVUint16_t'
|-TypedefDecl 0x13380c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x13304cc50 '__SVUint32_t'
|-TypedefDecl 0x13380c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x13304cc70 '__SVUint64_t'
|-TypedefDecl 0x13380c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x13304cc90 '__SVFloat16_t'
|-TypedefDecl 0x13380c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x13304ccb0 '__SVFloat32_t'
|-TypedefDecl 0x13380c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x13304ccd0 '__SVFloat64_t'
|-TypedefDecl 0x13380c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x13304ccf0 '__SVBfloat16_t'
|-TypedefDecl 0x13380c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x13304cd10 '__clang_svint8x2_t'
|-TypedefDecl 0x13380c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x13304cd30 '__clang_svint16x2_t'
|-TypedefDecl 0x13380c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x13304cd50 '__clang_svint32x2_t'
|-TypedefDecl 0x13380c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x13304cd70 '__clang_svint64x2_t'
|-TypedefDecl 0x13380c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x13304cd90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13380c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x13304cdb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13380c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x13304cdd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13380c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x13304cdf0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13380c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x13304ce10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13380c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x13304ce30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13380c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x13304ce50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13380c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x13304ce70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13380c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x13304ce90 '__clang_svint8x3_t'
|-TypedefDecl 0x13380c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x13304ceb0 '__clang_svint16x3_t'
|-TypedefDecl 0x13380c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x13304ced0 '__clang_svint32x3_t'
|-TypedefDecl 0x13380c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x13304cef0 '__clang_svint64x3_t'
|-TypedefDecl 0x13380c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x13304cf10 '__clang_svuint8x3_t'
|-TypedefDecl 0x13380ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x13304cf30 '__clang_svuint16x3_t'
|-TypedefDecl 0x13380cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x13304cf50 '__clang_svuint32x3_t'
|-TypedefDecl 0x13380cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x13304cf70 '__clang_svuint64x3_t'
|-TypedefDecl 0x13380cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x13304cf90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13380d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x13304cfb0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13380d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x13304cfd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13380d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x13304cff0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13380d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x13304d010 '__clang_svint8x4_t'
|-TypedefDecl 0x13380d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x13304d030 '__clang_svint16x4_t'
|-TypedefDecl 0x13380d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x13304d050 '__clang_svint32x4_t'
|-TypedefDecl 0x13380d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x13304d070 '__clang_svint64x4_t'
|-TypedefDecl 0x13380d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x13304d090 '__clang_svuint8x4_t'
|-TypedefDecl 0x13380d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x13304d0b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13380d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x13304d0d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13380d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x13304d0f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13380d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x13304d110 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13380d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x13304d130 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13380d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x13304d150 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13380d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x13304d170 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13380da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x13304d190 '__SVBool_t'
|-TypedefDecl 0x13380da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x13304d1b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13380dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x13304d1d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13380db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x13304d1f0 '__SVCount_t'
|-TypedefDecl 0x13380dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13380dbb0 'char *'
|   `-BuiltinType 0x13304c4b0 'char'
|-TypedefDecl 0x13380dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13380dbb0 'char *'
|   `-BuiltinType 0x13304c4b0 'char'
|-FunctionDecl 0x1338267b8 <dataset_diviso_filec/func23764_vuln.c:1:1, line:64:1> line:1:12 invalid x509parse_verify_child 'int (int *, int *, int *, int *, int, int *, int (*)(void *, int *, int, int *), void *)' static
| |-ParmVarDecl 0x13380dd28 <line:2:17, col:28> col:28 invalid child 'int *'
| |-ParmVarDecl 0x13380dda8 <col:35, col:46> col:46 invalid parent 'int *'
| |-ParmVarDecl 0x13380de28 <col:54, col:65> col:65 invalid trust_ca 'int *'
| |-ParmVarDecl 0x13380dea8 <line:3:17, col:27> col:27 invalid ca_crl 'int *'
| |-ParmVarDecl 0x13380df28 <col:35, col:39> col:39 used path_cnt 'int'
| |-ParmVarDecl 0x13380dfa8 <col:49, col:54> col:54 used flags 'int *'
| |-ParmVarDecl 0x13380e348 <line:4:17, col:62> col:23 used f_vrfy 'int (*)(void *, int *, int, int *)'
| |-ParmVarDecl 0x133826600 <line:5:17, col:23> col:23 used p_vrfy 'void *'
| `-CompoundStmt 0x1320166d0 <line:6:1, line:64:1>
|   |-DeclStmt 0x1338269b8 <line:7:5, col:21>
|   | |-VarDecl 0x1338268b8 <col:5, col:9> col:9 used hash_id 'int'
|   | `-VarDecl 0x133826938 <col:5, col:18> col:18 used ret 'int'
|   |-DeclStmt 0x133826a70 <line:8:5, col:25>
|   | `-VarDecl 0x1338269e8 <col:5, col:24> col:9 used parent_flags 'int' cinit
|   |   `-IntegerLiteral 0x133826a50 <col:24> 'int' 0
|   |-DeclStmt 0x133826ba0 <line:9:5, col:27>
|   | `-VarDecl 0x133826b38 <col:5, col:26> col:19 used hash 'unsigned char[64]'
|   |-IfStmt 0x133826f40 <line:12:5, line:13:19>
|   | |-CallExpr 0x133826dd0 <line:12:9, col:50> '<dependent type>' contains-errors
|   | | |-DeclRefExpr 0x133826d30 <col:9> 'int ()' Function 0x133826c78 'x509parse_time_expired' 'int ()'
|   | | `-UnaryOperator 0x133826db8 <col:33, col:41> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | |   `-CXXDependentScopeMemberExpr 0x133826d70 <col:34, col:41> '<dependent type>' contains-errors lvalue ->valid_to
|   | |     `-RecoveryExpr 0x133826d50 <col:34> '<dependent type>' contains-errors lvalue
|   | `-CompoundAssignOperator 0x133826f10 <line:13:9, col:19> 'int' contains-errors '|=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   |   |-UnaryOperator 0x133826ed8 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
|   |   | `-ImplicitCastExpr 0x133826ec0 <col:10> 'int *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x133826df8 <col:10> 'int *' lvalue ParmVar 0x13380dfa8 'flags' 'int *'
|   |   `-RecoveryExpr 0x133826ef0 <col:19> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x133826fe8 <line:15:5, col:22> 'int' contains-errors '='
|   | |-DeclRefExpr 0x133826f60 <col:5> 'int' lvalue Var 0x1338268b8 'hash_id' 'int'
|   | `-CXXDependentScopeMemberExpr 0x133826fa0 <col:15, col:22> '<dependent type>' contains-errors lvalue ->sig_alg
|   |   `-RecoveryExpr 0x133826f80 <col:15> '<dependent type>' contains-errors lvalue
|   |-CallExpr 0x1338272a8 <line:17:5, col:60> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x1338270e8 <col:5> 'int ()' Function 0x133827030 'x509_hash' 'int ()'
|   | |-CXXDependentScopeMemberExpr 0x133827170 <col:16, col:27> '<dependent type>' contains-errors lvalue .p
|   | | `-CXXDependentScopeMemberExpr 0x133827128 <col:16, col:23> '<dependent type>' contains-errors lvalue ->tbs
|   | |   `-RecoveryExpr 0x133827108 <col:16> '<dependent type>' contains-errors lvalue
|   | |-CXXDependentScopeMemberExpr 0x133827220 <col:30, col:41> '<dependent type>' contains-errors lvalue .len
|   | | `-CXXDependentScopeMemberExpr 0x1338271d8 <col:30, col:37> '<dependent type>' contains-errors lvalue ->tbs
|   | |   `-RecoveryExpr 0x1338271b8 <col:30> '<dependent type>' contains-errors lvalue
|   | |-DeclRefExpr 0x133827268 <col:46> 'int' lvalue Var 0x1338268b8 'hash_id' 'int'
|   | `-DeclRefExpr 0x133827288 <col:55> 'unsigned char[64]' lvalue Var 0x133826b38 'hash' 'unsigned char[64]'
|   |-IfStmt 0x1320129f8 <line:19:5, line:21:19>
|   | |-BinaryOperator 0x132012890 <line:19:9, line:20:46> 'int' contains-errors '!='
|   | | |-CallExpr 0x132012840 <line:19:9, line:20:41> '<dependent type>' contains-errors
|   | | | |-DeclRefExpr 0x1338273c8 <line:19:9> 'int ()' Function 0x133827310 'rsa_pkcs1_verify' 'int ()'
|   | | | |-UnaryOperator 0x133827450 <col:27, col:36> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | | | | `-CXXDependentScopeMemberExpr 0x133827408 <col:28, col:36> '<dependent type>' contains-errors lvalue ->rsa
|   | | | |   `-RecoveryExpr 0x1338273e8 <col:28> '<dependent type>' contains-errors lvalue
|   | | | |-RecoveryExpr 0x132012820 <col:41> '<dependent type>' contains-errors lvalue
|   | | | |-DeclRefExpr 0x133827480 <col:53> 'int' lvalue Var 0x1338268b8 'hash_id' 'int'
|   | | | |-IntegerLiteral 0x1338274a0 <col:62> 'int' 0
|   | | | |-DeclRefExpr 0x1338274c0 <col:65> 'unsigned char[64]' lvalue Var 0x133826b38 'hash' 'unsigned char[64]'
|   | | | `-CXXDependentScopeMemberExpr 0x133827548 <line:20:28, col:39> '<dependent type>' contains-errors lvalue .p
|   | | |   `-CXXDependentScopeMemberExpr 0x133827500 <col:28, col:35> '<dependent type>' contains-errors lvalue ->sig
|   | | |     `-RecoveryExpr 0x1338274e0 <col:28> '<dependent type>' contains-errors lvalue
|   | | `-IntegerLiteral 0x1338275e0 <col:46> 'int' 0
|   | `-CompoundAssignOperator 0x1320129c8 <line:21:9, col:19> 'int' contains-errors '|=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   |   |-UnaryOperator 0x132012990 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
|   |   | `-ImplicitCastExpr 0x132012978 <col:10> 'int *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1320128b0 <col:10> 'int *' lvalue ParmVar 0x13380dfa8 'flags' 'int *'
|   |   `-RecoveryExpr 0x1320129a8 <col:19> '<dependent type>' contains-errors lvalue
|   |-CompoundAssignOperator 0x132012c00 <line:24:5, col:56> 'int' contains-errors '|=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   | |-UnaryOperator 0x132012a50 <col:5, col:6> 'int' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x132012a38 <col:6> 'int *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x132012a18 <col:6> 'int *' lvalue ParmVar 0x13380dfa8 'flags' 'int *'
|   | `-CallExpr 0x132012bc8 <col:15, col:56> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x132012b48 <col:15> 'int ()' Function 0x132012a90 'x509parse_verifycrl' 'int ()'
|   |   |-RecoveryExpr 0x132012b68 <col:35> '<dependent type>' contains-errors lvalue
|   |   |-RecoveryExpr 0x132012b88 <col:42> '<dependent type>' contains-errors lvalue
|   |   `-RecoveryExpr 0x132012ba8 <col:50> '<dependent type>' contains-errors lvalue
|   |-WhileStmt 0x132015c30 <line:28:5, line:40:5>
|   | |-BinaryOperator 0x132012d28 <line:28:12, col:27> 'int' contains-errors '!='
|   | | |-RecoveryExpr 0x132012ce8 <col:12> '<dependent type>' contains-errors lvalue
|   | | `-RecoveryExpr 0x132012d08 <col:27> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x132015c10 <line:29:5, line:40:5>
|   |   |-IfStmt 0x132015be8 <line:30:9, line:38:9>
|   |   | |-BinaryOperator 0x132015ba8 <line:30:13, line:34:49> 'int' contains-errors '||'
|   |   | | |-BinaryOperator 0x132015a38 <line:30:13, line:32:64> 'int' contains-errors '||'
|   |   | | | |-BinaryOperator 0x132015948 <line:30:13, line:31:39> 'int' contains-errors '||'
|   |   | | | | |-BinaryOperator 0x1320158a0 <line:30:13, col:37> 'int' contains-errors '=='
|   |   | | | | | |-CXXDependentScopeMemberExpr 0x132015858 <col:13, col:26> '<dependent type>' contains-errors lvalue ->version
|   |   | | | | | | `-RecoveryExpr 0x132015838 <col:13> '<dependent type>' contains-errors lvalue
|   |   | | | | | `-IntegerLiteral 0x132012da8 <col:37> 'int' 0
|   |   | | | | `-BinaryOperator 0x132015928 <line:31:13, col:39> 'int' contains-errors '=='
|   |   | | | |   |-CXXDependentScopeMemberExpr 0x1320158e0 <col:13, col:26> '<dependent type>' contains-errors lvalue ->ca_istrue
|   |   | | | |   | `-RecoveryExpr 0x1320158c0 <col:13> '<dependent type>' contains-errors lvalue
|   |   | | | |   `-IntegerLiteral 0x132012e48 <col:39> 'int' 0
|   |   | | | `-BinaryOperator 0x132015a18 <line:32:13, col:64> 'int' contains-errors '!='
|   |   | | |   |-CXXDependentScopeMemberExpr 0x132012f10 <col:13, col:32> '<dependent type>' contains-errors lvalue .len
|   |   | | |   | `-CXXDependentScopeMemberExpr 0x132012ec8 <col:13, col:21> '<dependent type>' contains-errors lvalue ->issuer_raw
|   |   | | |   |   `-RecoveryExpr 0x132012ea8 <col:13> '<dependent type>' contains-errors lvalue
|   |   | | |   `-CXXDependentScopeMemberExpr 0x1320159d0 <col:39, col:64> '<dependent type>' contains-errors lvalue .len
|   |   | | |     `-CXXDependentScopeMemberExpr 0x132015988 <col:39, col:52> '<dependent type>' contains-errors lvalue ->subject_raw
|   |   | | |       `-RecoveryExpr 0x132015968 <col:39> '<dependent type>' contains-errors lvalue
|   |   | | `-BinaryOperator 0x132015b88 <line:33:13, line:34:49> 'int' contains-errors '!='
|   |   | |   |-CallExpr 0x132015b50 <line:33:13, line:34:44> '<dependent type>' contains-errors
|   |   | |   | |-DeclRefExpr 0x132013730 <line:33:13> 'int (const void *, const void *, unsigned long)' Function 0x1320134e0 'memcmp' 'int (const void *, const void *, unsigned long)'
|   |   | |   | |-CXXDependentScopeMemberExpr 0x1320137b8 <col:21, col:40> '<dependent type>' contains-errors lvalue .p
|   |   | |   | | `-CXXDependentScopeMemberExpr 0x132013770 <col:21, col:29> '<dependent type>' contains-errors lvalue ->issuer_raw
|   |   | |   | |   `-RecoveryExpr 0x132013750 <col:21> '<dependent type>' contains-errors lvalue
|   |   | |   | |-CXXDependentScopeMemberExpr 0x132015ac0 <col:43, col:68> '<dependent type>' contains-errors lvalue .p
|   |   | |   | | `-CXXDependentScopeMemberExpr 0x132015a78 <col:43, col:56> '<dependent type>' contains-errors lvalue ->subject_raw
|   |   | |   | |   `-RecoveryExpr 0x132015a58 <col:43> '<dependent type>' contains-errors lvalue
|   |   | |   | `-CXXDependentScopeMemberExpr 0x132015710 <line:34:21, col:40> '<dependent type>' contains-errors lvalue .len
|   |   | |   |   `-CXXDependentScopeMemberExpr 0x1320156c8 <col:21, col:29> '<dependent type>' contains-errors lvalue ->issuer_raw
|   |   | |   |     `-RecoveryExpr 0x1320156a8 <col:21> '<dependent type>' contains-errors lvalue
|   |   | |   `-IntegerLiteral 0x1320157d8 <col:49> 'int' 0
|   |   | `-CompoundStmt 0x132015bd0 <line:35:9, line:38:9>
|   |   |   `-ContinueStmt 0x132015bc8 <line:37:13>
|   |   `-BreakStmt 0x132015c08 <line:39:9>
|   |-IfStmt 0x132016320 <line:42:5, line:54:5> has_else
|   | |-RecoveryExpr 0x132015c50 <line:42:9, col:24> '_Bool' contains-errors
|   | |-CompoundStmt 0x132015f00 <line:43:5, line:48:5>
|   | | `-IfStmt 0x132015ee0 <line:46:9, line:47:25>
|   | |   |-BinaryOperator 0x132015e58 <line:46:13, col:20> 'int' '!='
|   | |   | |-ImplicitCastExpr 0x132015e40 <col:13> 'int' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x132015e00 <col:13> 'int' lvalue Var 0x133826938 'ret' 'int'
|   | |   | `-IntegerLiteral 0x132015e20 <col:20> 'int' 0
|   | |   `-ReturnStmt 0x132015ed0 <line:47:13, col:25>
|   | |     `-ImplicitCastExpr 0x132015eb8 <col:19, col:25> 'int' <LValueToRValue>
|   | |       `-ParenExpr 0x132015e98 <col:19, col:25> 'int' lvalue
|   | |         `-DeclRefExpr 0x132015e78 <col:21> 'int' lvalue Var 0x133826938 'ret' 'int'
|   | `-CompoundStmt 0x132016300 <line:50:5, line:54:5>
|   |   |-BinaryOperator 0x1320161e0 <line:51:9, col:107> 'int' contains-errors '='
|   |   | |-DeclRefExpr 0x132015f18 <col:9> 'int' lvalue Var 0x133826938 'ret' 'int'
|   |   | `-CallExpr 0x132016188 <col:15, col:107> '<dependent type>' contains-errors
|   |   |   |-DeclRefExpr 0x132016018 <col:15> 'int ()' Function 0x132015f60 'x509parse_verify_top' 'int ()'
|   |   |   |-RecoveryExpr 0x132016038 <col:37> '<dependent type>' contains-errors lvalue
|   |   |   |-RecoveryExpr 0x132016058 <col:45> '<dependent type>' contains-errors lvalue
|   |   |   |-RecoveryExpr 0x132016078 <col:55> '<dependent type>' contains-errors lvalue
|   |   |   |-BinaryOperator 0x1320160f0 <col:63, col:74> 'int' '+'
|   |   |   | |-ImplicitCastExpr 0x1320160d8 <col:63> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x132016098 <col:63> 'int' lvalue ParmVar 0x13380df28 'path_cnt' 'int'
|   |   |   | `-IntegerLiteral 0x1320160b8 <col:74> 'int' 1
|   |   |   |-UnaryOperator 0x132016130 <col:77, col:78> 'int *' prefix '&' cannot overflow
|   |   |   | `-DeclRefExpr 0x132016110 <col:78> 'int' lvalue Var 0x1338269e8 'parent_flags' 'int'
|   |   |   |-DeclRefExpr 0x132016148 <col:92> 'int (*)(void *, int *, int, int *)' lvalue ParmVar 0x13380e348 'f_vrfy' 'int (*)(void *, int *, int, int *)'
|   |   |   `-DeclRefExpr 0x132016168 <col:100> 'void *' lvalue ParmVar 0x133826600 'p_vrfy' 'void *'
|   |   `-IfStmt 0x1320162e0 <line:52:9, line:53:25>
|   |     |-BinaryOperator 0x132016258 <line:52:13, col:20> 'int' '!='
|   |     | |-ImplicitCastExpr 0x132016240 <col:13> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x132016200 <col:13> 'int' lvalue Var 0x133826938 'ret' 'int'
|   |     | `-IntegerLiteral 0x132016220 <col:20> 'int' 0
|   |     `-ReturnStmt 0x1320162d0 <line:53:13, col:25>
|   |       `-ImplicitCastExpr 0x1320162b8 <col:19, col:25> 'int' <LValueToRValue>
|   |         `-ParenExpr 0x132016298 <col:19, col:25> 'int' lvalue
|   |           `-DeclRefExpr 0x132016278 <col:21> 'int' lvalue Var 0x133826938 'ret' 'int'
|   |-IfStmt 0x132016598 <line:57:5, line:59:25>
|   | |-RecoveryExpr 0x132016370 <line:57:9, col:17> '_Bool' contains-errors
|   | `-IfStmt 0x132016578 <line:58:9, line:59:25>
|   |   |-BinaryOperator 0x1320164f0 <line:58:13, col:67> 'int' contains-errors '!='
|   |   | |-ParenExpr 0x1320164b0 <col:13, col:62> 'int' contains-errors
|   |   | | `-BinaryOperator 0x132016490 <col:15, col:60> 'int' contains-errors '='
|   |   | |   |-DeclRefExpr 0x132016390 <col:15> 'int' lvalue Var 0x133826938 'ret' 'int'
|   |   | |   `-CallExpr 0x132016450 <col:21, col:60> '<dependent type>' contains-errors
|   |   | |     |-DeclRefExpr 0x1320163b0 <col:21> 'int (*)(void *, int *, int, int *)' lvalue ParmVar 0x13380e348 'f_vrfy' 'int (*)(void *, int *, int, int *)'
|   |   | |     |-DeclRefExpr 0x1320163d0 <col:29> 'void *' lvalue ParmVar 0x133826600 'p_vrfy' 'void *'
|   |   | |     |-RecoveryExpr 0x1320163f0 <col:37> '<dependent type>' contains-errors lvalue
|   |   | |     |-DeclRefExpr 0x132016410 <col:44> 'int' lvalue ParmVar 0x13380df28 'path_cnt' 'int'
|   |   | |     `-DeclRefExpr 0x132016430 <col:54> 'int *' lvalue ParmVar 0x13380dfa8 'flags' 'int *'
|   |   | `-IntegerLiteral 0x1320164d0 <col:67> 'int' 0
|   |   `-ReturnStmt 0x132016568 <line:59:13, col:25>
|   |     `-ImplicitCastExpr 0x132016550 <col:19, col:25> 'int' <LValueToRValue>
|   |       `-ParenExpr 0x132016530 <col:19, col:25> 'int' lvalue
|   |         `-DeclRefExpr 0x132016510 <col:21> 'int' lvalue Var 0x133826938 'ret' 'int'
|   |-CompoundAssignOperator 0x132016650 <line:61:5, col:15> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-UnaryOperator 0x132016600 <col:5, col:6> 'int' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x1320165d8 <col:6> 'int *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1320165b8 <col:6> 'int *' lvalue ParmVar 0x13380dfa8 'flags' 'int *'
|   | `-ImplicitCastExpr 0x132016638 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x132016618 <col:15> 'int' lvalue Var 0x1338269e8 'parent_flags' 'int'
|   `-ReturnStmt 0x1320166c0 <line:63:5, col:15>
|     `-ParenExpr 0x1320166a0 <col:11, col:15> 'int'
|       `-IntegerLiteral 0x132016680 <col:13> 'int' 0
`-FunctionDecl 0x1320134e0 <line:33:13> col:13 implicit used memcmp 'int (const void *, const void *, unsigned long)' extern
  |-ParmVarDecl 0x1320135e0 <<invalid sloc>> <invalid sloc> 'const void *'
  |-ParmVarDecl 0x132013648 <<invalid sloc>> <invalid sloc> 'const void *'
  |-ParmVarDecl 0x1320136b0 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x132013588 <<invalid sloc>> Implicit 883
