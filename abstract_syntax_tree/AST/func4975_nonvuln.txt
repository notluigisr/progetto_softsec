TranslationUnitDecl 0x13c055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x13c0564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x13c055bd0 '__int128'
|-TypedefDecl 0x13c056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x13c055bf0 'unsigned __int128'
|-TypedefDecl 0x13c80be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13c80bc00 'struct __NSConstantString_tag'
|   `-Record 0x13c056580 '__NSConstantString_tag'
|-TypedefDecl 0x13c80be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x13c055d90 '__SVInt8_t'
|-TypedefDecl 0x13c80bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x13c055db0 '__SVInt16_t'
|-TypedefDecl 0x13c80bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x13c055dd0 '__SVInt32_t'
|-TypedefDecl 0x13c80bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x13c055df0 '__SVInt64_t'
|-TypedefDecl 0x13c80c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x13c055e10 '__SVUint8_t'
|-TypedefDecl 0x13c80c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x13c055e30 '__SVUint16_t'
|-TypedefDecl 0x13c80c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x13c055e50 '__SVUint32_t'
|-TypedefDecl 0x13c80c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x13c055e70 '__SVUint64_t'
|-TypedefDecl 0x13c80c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x13c055e90 '__SVFloat16_t'
|-TypedefDecl 0x13c80c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x13c055eb0 '__SVFloat32_t'
|-TypedefDecl 0x13c80c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x13c055ed0 '__SVFloat64_t'
|-TypedefDecl 0x13c80c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x13c055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13c80c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x13c055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13c80c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x13c055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13c80c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x13c055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13c80c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x13c055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13c80c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x13c055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13c80c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x13c055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13c80c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x13c055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13c80c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x13c055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13c80c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x13c056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13c80c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x13c056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13c80c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x13c056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13c80c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x13c056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13c80c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x13c056090 '__clang_svint8x3_t'
|-TypedefDecl 0x13c80c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x13c0560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13c80c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x13c0560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13c80c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x13c0560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13c80c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x13c056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13c80ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x13c056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13c80cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x13c056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13c80cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x13c056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13c80cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x13c056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13c80d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x13c0561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13c80d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x13c0561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13c80d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x13c0561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13c80d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x13c056210 '__clang_svint8x4_t'
|-TypedefDecl 0x13c80d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x13c056230 '__clang_svint16x4_t'
|-TypedefDecl 0x13c80d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x13c056250 '__clang_svint32x4_t'
|-TypedefDecl 0x13c80d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x13c056270 '__clang_svint64x4_t'
|-TypedefDecl 0x13c80d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x13c056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13c80d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x13c0562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13c80d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x13c0562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13c80d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x13c0562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13c80d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x13c056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13c80d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x13c056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13c80d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x13c056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13c80d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x13c056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13c80da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x13c056390 '__SVBool_t'
|-TypedefDecl 0x13c80da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x13c0563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13c80dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x13c0563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13c80db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x13c0563f0 '__SVCount_t'
|-TypedefDecl 0x13c80dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13c80dbb0 'char *'
|   `-BuiltinType 0x13c0556b0 'char'
|-TypedefDecl 0x13c80dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13c80dbb0 'char *'
|   `-BuiltinType 0x13c0556b0 'char'
`-FunctionDecl 0x13c80df48 <dataset_diviso_filec/func4975_nonvuln.c:1:1, line:44:1> line:1:1 invalid eval_env_var 'int (char **, int *, int)'
  |-ParmVarDecl 0x13c80dd28 <col:14, col:23> col:23 used arg 'char **'
  |-ParmVarDecl 0x13c80ddd8 <col:28, col:38> col:38 referenced invalid rettv 'int *'
  |-ParmVarDecl 0x13c80de58 <col:45, col:49> col:49 used evaluate 'int'
  `-CompoundStmt 0x13c82a8d0 <line:2:1, line:44:1>
    |-DeclStmt 0x13c80e0c0 <line:3:5, col:26>
    | `-VarDecl 0x13c80e020 <col:5, col:22> col:13 used string 'char *' cinit
    |   `-RecoveryExpr 0x13c80e0a0 <col:22> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x13c80e158 <line:4:5, col:13>
    | `-VarDecl 0x13c80e0f0 <col:5, col:10> col:10 used len 'int'
    |-DeclStmt 0x13c80e1f0 <line:5:5, col:12>
    | `-VarDecl 0x13c80e188 <col:5, col:10> col:10 used cc 'int'
    |-DeclStmt 0x13c80e288 <line:6:5, col:17>
    | `-VarDecl 0x13c80e220 <col:5, col:13> col:13 used name 'char *'
    |-DeclStmt 0x13c80e358 <line:7:5, col:26>
    | `-VarDecl 0x13c80e2b8 <col:5, col:21> col:10 used mustfree 'int' cinit
    |   `-RecoveryExpr 0x13c80e338 <col:21> '<dependent type>' contains-errors lvalue
    |-UnaryOperator 0x13c80e3c0 <line:9:5, col:8> 'char *' prefix '++'
    | `-UnaryOperator 0x13c80e3a8 <col:7, col:8> 'char *' lvalue prefix '*' cannot overflow
    |   `-ImplicitCastExpr 0x13c80e390 <col:8> 'char **' <LValueToRValue>
    |     `-DeclRefExpr 0x13c80e370 <col:8> 'char **' lvalue ParmVar 0x13c80dd28 'arg' 'char **'
    |-BinaryOperator 0x13c828468 <line:10:5, col:13> 'char *' '='
    | |-DeclRefExpr 0x13c80e3d8 <col:5> 'char *' lvalue Var 0x13c80e220 'name' 'char *'
    | `-ImplicitCastExpr 0x13c828450 <col:12, col:13> 'char *' <LValueToRValue>
    |   `-UnaryOperator 0x13c828438 <col:12, col:13> 'char *' lvalue prefix '*' cannot overflow
    |     `-ImplicitCastExpr 0x13c828420 <col:13> 'char **' <LValueToRValue>
    |       `-DeclRefExpr 0x13c828400 <col:13> 'char **' lvalue ParmVar 0x13c80dd28 'arg' 'char **'
    |-BinaryOperator 0x13c8286c8 <line:11:5, col:26> 'int' '='
    | |-DeclRefExpr 0x13c828488 <col:5> 'int' lvalue Var 0x13c80e0f0 'len' 'int'
    | `-CallExpr 0x13c828688 <col:11, col:26> 'int'
    |   |-ImplicitCastExpr 0x13c828670 <col:11> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x13c828600 <col:11> 'int ()' Function 0x13c828548 'get_env_len' 'int ()'
    |   `-ImplicitCastExpr 0x13c8286b0 <col:23> 'char **' <LValueToRValue>
    |     `-DeclRefExpr 0x13c828620 <col:23> 'char **' lvalue ParmVar 0x13c80dd28 'arg' 'char **'
    `-IfStmt 0x13c82a8b0 <line:12:5, line:41:5>
      |-ImplicitCastExpr 0x13c828708 <line:12:9> 'int' <LValueToRValue>
      | `-DeclRefExpr 0x13c8286e8 <col:9> 'int' lvalue ParmVar 0x13c80de58 'evaluate' 'int'
      `-CompoundStmt 0x13c82a860 <line:13:5, line:41:5>
        |-IfStmt 0x13c8287e0 <line:14:2, line:15:13>
        | |-BinaryOperator 0x13c828778 <line:14:6, col:13> 'int' '=='
        | | |-ImplicitCastExpr 0x13c828760 <col:6> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x13c828720 <col:6> 'int' lvalue Var 0x13c80e0f0 'len' 'int'
        | | `-IntegerLiteral 0x13c828740 <col:13> 'int' 0
        | `-ReturnStmt 0x13c8287d0 <line:15:6, col:13>
        |   `-RecoveryExpr 0x13c8287b0 <col:13> '<dependent type>' contains-errors lvalue
        |-BinaryOperator 0x13c8288e0 <line:17:2, col:15> 'int' '='
        | |-DeclRefExpr 0x13c828800 <col:2> 'int' lvalue Var 0x13c80e188 'cc' 'int'
        | `-ImplicitCastExpr 0x13c8288c8 <col:7, col:15> 'int' <IntegralCast>
        |   `-ImplicitCastExpr 0x13c8288b0 <col:7, col:15> 'char' <LValueToRValue>
        |     `-ArraySubscriptExpr 0x13c828890 <col:7, col:15> 'char' lvalue
        |       |-ImplicitCastExpr 0x13c828860 <col:7> 'char *' <LValueToRValue>
        |       | `-DeclRefExpr 0x13c828820 <col:7> 'char *' lvalue Var 0x13c80e220 'name' 'char *'
        |       `-ImplicitCastExpr 0x13c828878 <col:12> 'int' <LValueToRValue>
        |         `-DeclRefExpr 0x13c828840 <col:12> 'int' lvalue Var 0x13c80e0f0 'len' 'int'
        |-BinaryOperator 0x13c828a88 <line:18:2, col:14> 'char' contains-errors '='
        | |-ArraySubscriptExpr 0x13c828a48 <col:2, col:10> 'char' lvalue
        | | |-ImplicitCastExpr 0x13c828a18 <col:2> 'char *' <LValueToRValue>
        | | | `-DeclRefExpr 0x13c828900 <col:2> 'char *' lvalue Var 0x13c80e220 'name' 'char *'
        | | `-ImplicitCastExpr 0x13c828a30 <col:7> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x13c828920 <col:7> 'int' lvalue Var 0x13c80e0f0 'len' 'int'
        | `-RecoveryExpr 0x13c828a68 <col:14> '<dependent type>' contains-errors lvalue
        |-BinaryOperator 0x13c8290c0 <line:20:2, col:37> 'char *' contains-errors '='
        | |-DeclRefExpr 0x13c828aa8 <col:2> 'char *' contains-errors lvalue Var 0x13c80e020 'string' 'char *'
        | `-ImplicitCastExpr 0x13c828c80 <col:11, col:37> 'char *' contains-errors <IntegralToPointer>
        |   `-CallExpr 0x13c828c38 <col:11, col:37> 'int' contains-errors
        |     |-ImplicitCastExpr 0x13c828c20 <col:11> 'int (*)()' <FunctionToPointerDecay>
        |     | `-DeclRefExpr 0x13c828ba8 <col:11> 'int ()' Function 0x13c828af0 'vim_getenv' 'int ()'
        |     |-ImplicitCastExpr 0x13c828c68 <col:22> 'char *' <LValueToRValue>
        |     | `-DeclRefExpr 0x13c828bc8 <col:22> 'char *' lvalue Var 0x13c80e220 'name' 'char *'
        |     `-UnaryOperator 0x13c828c08 <col:28, col:29> 'int *' contains-errors prefix '&' cannot overflow
        |       `-DeclRefExpr 0x13c828be8 <col:29> 'int' contains-errors lvalue Var 0x13c80e2b8 'mustfree' 'int'
        |-IfStmt 0x13c82a4b8 <line:21:2, line:35:2> has_else
        | |-BinaryOperator 0x13c829290 <line:21:6, col:35> 'int' contains-errors '&&'
        | | |-BinaryOperator 0x13c829200 <col:6, col:16> 'int' contains-errors '!='
        | | | |-DeclRefExpr 0x13c8290e0 <col:6> 'char *' contains-errors lvalue Var 0x13c80e020 'string' 'char *'
        | | | `-RecoveryExpr 0x13c8291e0 <col:16> '<dependent type>' contains-errors lvalue
        | | `-BinaryOperator 0x13c829270 <col:24, col:35> 'int' contains-errors '!='
        | |   |-UnaryOperator 0x13c829238 <col:24, col:25> 'char' contains-errors lvalue prefix '*' cannot overflow
        | |   | `-ImplicitCastExpr 0x13c829220 <col:25> 'char *' contains-errors <LValueToRValue>
        | |   |   `-DeclRefExpr 0x13c829138 <col:25> 'char *' contains-errors lvalue Var 0x13c80e020 'string' 'char *'
        | |   `-RecoveryExpr 0x13c829250 <col:35> '<dependent type>' contains-errors lvalue
        | |-CompoundStmt 0x13c829cf0 <line:22:2, line:25:2>
        | | `-IfStmt 0x13c829cd0 <line:23:6, line:24:30>
        | |   |-UnaryOperator 0x13c8292e8 <line:23:10, col:11> 'int' contains-errors prefix '!' cannot overflow
        | |   | `-ImplicitCastExpr 0x13c8292d0 <col:11> 'int' contains-errors <LValueToRValue>
        | |   |   `-DeclRefExpr 0x13c8292b0 <col:11> 'int' contains-errors lvalue Var 0x13c80e2b8 'mustfree' 'int'
        | |   `-BinaryOperator 0x13c829cb0 <line:24:3, col:30> 'char *' contains-errors '='
        | |     |-DeclRefExpr 0x13c829300 <col:3> 'char *' contains-errors lvalue Var 0x13c80e020 'string' 'char *'
        | |     `-ImplicitCastExpr 0x13c829c98 <col:12, col:30> 'char *' contains-errors <IntegralToPointer>
        | |       `-CallExpr 0x13c829c58 <col:12, col:30> 'int' contains-errors
        | |         |-ImplicitCastExpr 0x13c829c40 <col:12> 'int (*)()' <FunctionToPointerDecay>
        | |         | `-DeclRefExpr 0x13c829c00 <col:12> 'int ()' Function 0x13c829348 'vim_strsave' 'int ()'
        | |         `-ImplicitCastExpr 0x13c829c80 <col:24> 'char *' contains-errors <LValueToRValue>
        | |           `-DeclRefExpr 0x13c829c20 <col:24> 'char *' contains-errors lvalue Var 0x13c80e020 'string' 'char *'
        | `-CompoundStmt 0x13c82a490 <line:27:2, line:35:2>
        |   |-IfStmt 0x13c829eb8 <line:28:6, line:29:18>
        |   | |-ImplicitCastExpr 0x13c829d28 <line:28:10> 'int' contains-errors <LValueToRValue>
        |   | | `-DeclRefExpr 0x13c829d08 <col:10> 'int' contains-errors lvalue Var 0x13c80e2b8 'mustfree' 'int'
        |   | `-CallExpr 0x13c829e78 <line:29:3, col:18> 'int' contains-errors
        |   |   |-ImplicitCastExpr 0x13c829e60 <col:3> 'int (*)()' <FunctionToPointerDecay>
        |   |   | `-DeclRefExpr 0x13c829e20 <col:3> 'int ()' Function 0x13c829d68 'vim_free' 'int ()'
        |   |   `-ImplicitCastExpr 0x13c829ea0 <col:12> 'char *' contains-errors <LValueToRValue>
        |   |     `-DeclRefExpr 0x13c829e40 <col:12> 'char *' contains-errors lvalue Var 0x13c80e020 'string' 'char *'
        |   |-BinaryOperator 0x13c82a0c8 <line:32:6, col:39> 'char *' contains-errors '='
        |   | |-DeclRefExpr 0x13c829ed8 <col:6> 'char *' contains-errors lvalue Var 0x13c80e020 'string' 'char *'
        |   | `-ImplicitCastExpr 0x13c82a0b0 <col:15, col:39> 'char *' <IntegralToPointer>
        |   |   `-CallExpr 0x13c82a088 <col:15, col:39> 'int'
        |   |     |-ImplicitCastExpr 0x13c82a070 <col:15> 'int (*)()' <FunctionToPointerDecay>
        |   |     | `-DeclRefExpr 0x13c829fd8 <col:15> 'int ()' Function 0x13c829f20 'expand_env_save' 'int ()'
        |   |     `-BinaryOperator 0x13c82a050 <col:31, col:38> 'char *' '-'
        |   |       |-ImplicitCastExpr 0x13c82a038 <col:31> 'char *' <LValueToRValue>
        |   |       | `-DeclRefExpr 0x13c829ff8 <col:31> 'char *' lvalue Var 0x13c80e220 'name' 'char *'
        |   |       `-IntegerLiteral 0x13c82a018 <col:38> 'int' 1
        |   `-IfStmt 0x13c82a470 <line:33:6, line:34:19>
        |     |-BinaryOperator 0x13c82a2d8 <line:33:10, col:39> 'int' contains-errors '&&'
        |     | |-BinaryOperator 0x13c82a238 <col:10, col:20> 'int' contains-errors '!='
        |     | | |-DeclRefExpr 0x13c82a0e8 <col:10> 'char *' contains-errors lvalue Var 0x13c80e020 'string' 'char *'
        |     | | `-RecoveryExpr 0x13c82a218 <col:20> '<dependent type>' contains-errors lvalue
        |     | `-BinaryOperator 0x13c82a2b8 <col:28, col:39> 'int' contains-errors '=='
        |     |   |-ImplicitCastExpr 0x13c82a2a0 <col:28, col:29> 'int' contains-errors <IntegralCast>
        |     |   | `-ImplicitCastExpr 0x13c82a288 <col:28, col:29> 'char' contains-errors <LValueToRValue>
        |     |   |   `-UnaryOperator 0x13c82a270 <col:28, col:29> 'char' contains-errors lvalue prefix '*' cannot overflow
        |     |   |     `-ImplicitCastExpr 0x13c82a258 <col:29> 'char *' contains-errors <LValueToRValue>
        |     |   |       `-DeclRefExpr 0x13c82a140 <col:29> 'char *' contains-errors lvalue Var 0x13c80e020 'string' 'char *'
        |     |   `-CharacterLiteral 0x13c82a190 <col:39> 'int' 36
        |     `-CallExpr 0x13c82a430 <line:34:3, col:19> 'int' contains-errors
        |       |-ImplicitCastExpr 0x13c82a418 <col:3> 'int (*)()' <FunctionToPointerDecay>
        |       | `-DeclRefExpr 0x13c82a3d8 <col:3> 'int ()' Function 0x13c82a320 'VIM_CLEAR' 'int ()'
        |       `-ImplicitCastExpr 0x13c82a458 <col:13> 'char *' contains-errors <LValueToRValue>
        |         `-DeclRefExpr 0x13c82a3f8 <col:13> 'char *' contains-errors lvalue Var 0x13c80e020 'string' 'char *'
        |-BinaryOperator 0x13c82a5c8 <line:36:2, col:14> 'char' '='
        | |-ArraySubscriptExpr 0x13c82a558 <col:2, col:10> 'char' lvalue
        | | |-ImplicitCastExpr 0x13c82a528 <col:2> 'char *' <LValueToRValue>
        | | | `-DeclRefExpr 0x13c82a4e8 <col:2> 'char *' lvalue Var 0x13c80e220 'name' 'char *'
        | | `-ImplicitCastExpr 0x13c82a540 <col:7> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x13c82a508 <col:7> 'int' lvalue Var 0x13c80e0f0 'len' 'int'
        | `-ImplicitCastExpr 0x13c82a5b0 <col:14> 'char' <IntegralCast>
        |   `-ImplicitCastExpr 0x13c82a598 <col:14> 'int' <LValueToRValue>
        |     `-DeclRefExpr 0x13c82a578 <col:14> 'int' lvalue Var 0x13c80e188 'cc' 'int'
        |-BinaryOperator 0x13c82a770 <line:39:2, col:25> '<dependent type>' contains-errors '='
        | |-CXXDependentScopeMemberExpr 0x13c82a708 <col:2, col:14> '<dependent type>' contains-errors lvalue .v_string
        | | `-CXXDependentScopeMemberExpr 0x13c82a6c0 <col:2, col:9> '<dependent type>' contains-errors lvalue ->vval
        | |   `-RecoveryExpr 0x13c82a698 <col:2> '<dependent type>' contains-errors lvalue
        | |     `-DeclRefExpr 0x13c82a678 <col:2> 'int *' lvalue ParmVar 0x13c80ddd8 'rettv' 'int *'
        | `-DeclRefExpr 0x13c82a750 <col:25> 'char *' contains-errors lvalue Var 0x13c80e020 'string' 'char *'
        `-BinaryOperator 0x13c82a840 <line:40:2, col:18> '<dependent type>' contains-errors '='
          |-CXXDependentScopeMemberExpr 0x13c82a7d8 <col:2, col:9> '<dependent type>' contains-errors lvalue ->v_lock
          | `-RecoveryExpr 0x13c82a7b0 <col:2> '<dependent type>' contains-errors lvalue
          |   `-DeclRefExpr 0x13c82a790 <col:2> 'int *' lvalue ParmVar 0x13c80ddd8 'rettv' 'int *'
          `-IntegerLiteral 0x13c82a820 <col:18> 'int' 0
