TranslationUnitDecl 0x150026408 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1500272b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1500269d0 '__int128'
|-TypedefDecl 0x150027328 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1500269f0 'unsigned __int128'
|-TypedefDecl 0x1500f7030 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x1500f6e00 'struct __NSConstantString_tag'
|   `-Record 0x150027380 '__NSConstantString_tag'
|-TypedefDecl 0x1500f7098 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x150026b90 '__SVInt8_t'
|-TypedefDecl 0x1500f7100 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x150026bb0 '__SVInt16_t'
|-TypedefDecl 0x1500f7168 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x150026bd0 '__SVInt32_t'
|-TypedefDecl 0x1500f71d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x150026bf0 '__SVInt64_t'
|-TypedefDecl 0x1500f7238 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x150026c10 '__SVUint8_t'
|-TypedefDecl 0x1500f72a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x150026c30 '__SVUint16_t'
|-TypedefDecl 0x1500f7308 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x150026c50 '__SVUint32_t'
|-TypedefDecl 0x1500f7370 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x150026c70 '__SVUint64_t'
|-TypedefDecl 0x1500f73d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x150026c90 '__SVFloat16_t'
|-TypedefDecl 0x1500f7440 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x150026cb0 '__SVFloat32_t'
|-TypedefDecl 0x1500f74a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x150026cd0 '__SVFloat64_t'
|-TypedefDecl 0x1500f7510 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x150026cf0 '__SVBfloat16_t'
|-TypedefDecl 0x1500f7578 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x150026d10 '__clang_svint8x2_t'
|-TypedefDecl 0x1500f75e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x150026d30 '__clang_svint16x2_t'
|-TypedefDecl 0x1500f7648 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x150026d50 '__clang_svint32x2_t'
|-TypedefDecl 0x1500f76b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x150026d70 '__clang_svint64x2_t'
|-TypedefDecl 0x1500f7718 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x150026d90 '__clang_svuint8x2_t'
|-TypedefDecl 0x1500f7780 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x150026db0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1500f77e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x150026dd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x1500f7850 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x150026df0 '__clang_svuint64x2_t'
|-TypedefDecl 0x1500f78b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x150026e10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x1500f7920 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x150026e30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x1500f7988 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x150026e50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x1500f79f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x150026e70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x1500f7a58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x150026e90 '__clang_svint8x3_t'
|-TypedefDecl 0x1500f7ac0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x150026eb0 '__clang_svint16x3_t'
|-TypedefDecl 0x1500f7b28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x150026ed0 '__clang_svint32x3_t'
|-TypedefDecl 0x1500f7b90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x150026ef0 '__clang_svint64x3_t'
|-TypedefDecl 0x1500f7bf8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x150026f10 '__clang_svuint8x3_t'
|-TypedefDecl 0x1500f7c60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x150026f30 '__clang_svuint16x3_t'
|-TypedefDecl 0x1500f7cc8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x150026f50 '__clang_svuint32x3_t'
|-TypedefDecl 0x1500f7d30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x150026f70 '__clang_svuint64x3_t'
|-TypedefDecl 0x1500f7d98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x150026f90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x1500f8600 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x150026fb0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x1500f8668 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x150026fd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1500f86d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x150026ff0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x1500f8738 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x150027010 '__clang_svint8x4_t'
|-TypedefDecl 0x1500f87a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x150027030 '__clang_svint16x4_t'
|-TypedefDecl 0x1500f8808 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x150027050 '__clang_svint32x4_t'
|-TypedefDecl 0x1500f8870 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x150027070 '__clang_svint64x4_t'
|-TypedefDecl 0x1500f88d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x150027090 '__clang_svuint8x4_t'
|-TypedefDecl 0x1500f8940 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1500270b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x1500f89a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1500270d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x1500f8a10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1500270f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x1500f8a78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x150027110 '__clang_svfloat16x4_t'
|-TypedefDecl 0x1500f8ae0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x150027130 '__clang_svfloat32x4_t'
|-TypedefDecl 0x1500f8b48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x150027150 '__clang_svfloat64x4_t'
|-TypedefDecl 0x1500f8bb0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x150027170 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x1500f8c18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x150027190 '__SVBool_t'
|-TypedefDecl 0x1500f8c80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1500271b0 '__clang_svboolx2_t'
|-TypedefDecl 0x1500f8ce8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1500271d0 '__clang_svboolx4_t'
|-TypedefDecl 0x1500f8d50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1500271f0 '__SVCount_t'
|-TypedefDecl 0x1500f8df8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1500f8db0 'char *'
|   `-BuiltinType 0x1500264b0 'char'
|-TypedefDecl 0x1500f8e68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1500f8db0 'char *'
|   `-BuiltinType 0x1500264b0 'char'
|-FunctionDecl 0x1500f9038 <dataset_diviso_filec/func2924_nonvuln.c:1:1, line:57:1> line:1:1 expand_arith_string 'int (char *, int)'
| |-ParmVarDecl 0x1500f8ed8 <line:2:6, col:12> col:12 used string 'char *'
| |-ParmVarDecl 0x1500f8f58 <line:3:6, col:10> col:10 used quoted 'int'
| `-CompoundStmt 0x1501152e8 <line:4:1, line:57:1>
|   |-UnaryExprOrTypeTraitExpr 0x1500f9208 <line:7:3, col:10> 'unsigned long' contains-errors sizeof
|   | `-RecoveryExpr 0x1500f91e8 <col:10> '<dependent type>' contains-errors lvalue
|   |-DeclStmt 0x1500f9340 <line:8:3, col:19>
|   | |-VarDecl 0x1500f9240 <col:3, col:7> col:7 used i 'int'
|   | `-VarDecl 0x1500f92c0 <col:3, col:10> col:10 used saw_quote 'int'
|   |-DeclStmt 0x1500f93d8 <line:9:3, col:12>
|   | `-VarDecl 0x1500f9370 <col:3, col:9> col:9 used ret 'char *'
|   |-BinaryOperator 0x150111de0 <line:14:3, col:19> 'int' '='
|   | |-DeclRefExpr 0x150111d60 <col:3> 'int' lvalue Var 0x1500f9240 'i' 'int'
|   | `-BinaryOperator 0x150111dc0 <col:7, col:19> 'int' '='
|   |   |-DeclRefExpr 0x150111d80 <col:7> 'int' lvalue Var 0x1500f92c0 'saw_quote' 'int'
|   |   `-IntegerLiteral 0x150111da0 <col:19> 'int' 0
|   |-WhileStmt 0x1501126f8 <line:15:3, line:22:5>
|   | |-ImplicitCastExpr 0x150111e90 <line:15:10, col:18> 'char' <LValueToRValue>
|   | | `-ArraySubscriptExpr 0x150111e70 <col:10, col:18> 'char' lvalue
|   | |   |-ImplicitCastExpr 0x150111e40 <col:10> 'char *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x150111e00 <col:10> 'char *' lvalue ParmVar 0x1500f8ed8 'string' 'char *'
|   | |   `-ImplicitCastExpr 0x150111e58 <col:17> 'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x150111e20 <col:17> 'int' lvalue Var 0x1500f9240 'i' 'int'
|   | `-CompoundStmt 0x1501126d8 <line:16:5, line:22:5>
|   |   |-IfStmt 0x1501124c0 <line:17:7, line:20:14> has_else
|   |   | |-CallExpr 0x1501120b8 <line:17:11, col:30> 'int'
|   |   | | |-ImplicitCastExpr 0x1501120a0 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |   | | | `-DeclRefExpr 0x150111fc0 <col:11> 'int ()' Function 0x150111f08 'EXP_CHAR' 'int ()'
|   |   | | `-ImplicitCastExpr 0x1501120f8 <col:21, col:29> 'int' <IntegralCast>
|   |   | |   `-ImplicitCastExpr 0x1501120e0 <col:21, col:29> 'char' <LValueToRValue>
|   |   | |     `-ArraySubscriptExpr 0x150112050 <col:21, col:29> 'char' lvalue
|   |   | |       |-ImplicitCastExpr 0x150112020 <col:21> 'char *' <LValueToRValue>
|   |   | |       | `-DeclRefExpr 0x150111fe0 <col:21> 'char *' lvalue ParmVar 0x1500f8ed8 'string' 'char *'
|   |   | |       `-ImplicitCastExpr 0x150112038 <col:28> 'int' <LValueToRValue>
|   |   | |         `-DeclRefExpr 0x150112000 <col:28> 'int' lvalue Var 0x1500f9240 'i' 'int'
|   |   | |-BreakStmt 0x150112110 <line:18:2>
|   |   | `-IfStmt 0x1501124a0 <line:19:12, line:20:14>
|   |   |   |-BinaryOperator 0x150112420 <line:19:16, col:71> 'int' '||'
|   |   |   | |-BinaryOperator 0x150112308 <col:16, col:50> 'int' '||'
|   |   |   | | |-BinaryOperator 0x1501121f0 <col:16, col:29> 'int' '=='
|   |   |   | | | |-ImplicitCastExpr 0x1501121d8 <col:16, col:24> 'int' <IntegralCast>
|   |   |   | | | | `-ImplicitCastExpr 0x1501121c0 <col:16, col:24> 'char' <LValueToRValue>
|   |   |   | | | |   `-ArraySubscriptExpr 0x150112188 <col:16, col:24> 'char' lvalue
|   |   |   | | | |     |-ImplicitCastExpr 0x150112158 <col:16> 'char *' <LValueToRValue>
|   |   |   | | | |     | `-DeclRefExpr 0x150112118 <col:16> 'char *' lvalue ParmVar 0x1500f8ed8 'string' 'char *'
|   |   |   | | | |     `-ImplicitCastExpr 0x150112170 <col:23> 'int' <LValueToRValue>
|   |   |   | | | |       `-DeclRefExpr 0x150112138 <col:23> 'int' lvalue Var 0x1500f9240 'i' 'int'
|   |   |   | | | `-CharacterLiteral 0x1501121a8 <col:29> 'int' 39
|   |   |   | | `-BinaryOperator 0x1501122e8 <col:37, col:50> 'int' '=='
|   |   |   | |   |-ImplicitCastExpr 0x1501122d0 <col:37, col:45> 'int' <IntegralCast>
|   |   |   | |   | `-ImplicitCastExpr 0x1501122b8 <col:37, col:45> 'char' <LValueToRValue>
|   |   |   | |   |   `-ArraySubscriptExpr 0x150112280 <col:37, col:45> 'char' lvalue
|   |   |   | |   |     |-ImplicitCastExpr 0x150112250 <col:37> 'char *' <LValueToRValue>
|   |   |   | |   |     | `-DeclRefExpr 0x150112210 <col:37> 'char *' lvalue ParmVar 0x1500f8ed8 'string' 'char *'
|   |   |   | |   |     `-ImplicitCastExpr 0x150112268 <col:44> 'int' <LValueToRValue>
|   |   |   | |   |       `-DeclRefExpr 0x150112230 <col:44> 'int' lvalue Var 0x1500f9240 'i' 'int'
|   |   |   | |   `-CharacterLiteral 0x1501122a0 <col:50> 'int' 92
|   |   |   | `-BinaryOperator 0x150112400 <col:58, col:71> 'int' '=='
|   |   |   |   |-ImplicitCastExpr 0x1501123e8 <col:58, col:66> 'int' <IntegralCast>
|   |   |   |   | `-ImplicitCastExpr 0x1501123d0 <col:58, col:66> 'char' <LValueToRValue>
|   |   |   |   |   `-ArraySubscriptExpr 0x150112398 <col:58, col:66> 'char' lvalue
|   |   |   |   |     |-ImplicitCastExpr 0x150112368 <col:58> 'char *' <LValueToRValue>
|   |   |   |   |     | `-DeclRefExpr 0x150112328 <col:58> 'char *' lvalue ParmVar 0x1500f8ed8 'string' 'char *'
|   |   |   |   |     `-ImplicitCastExpr 0x150112380 <col:65> 'int' <LValueToRValue>
|   |   |   |   |       `-DeclRefExpr 0x150112348 <col:65> 'int' lvalue Var 0x1500f9240 'i' 'int'
|   |   |   |   `-CharacterLiteral 0x1501123b8 <col:71> 'int' 34
|   |   |   `-BinaryOperator 0x150112480 <line:20:2, col:14> 'int' '='
|   |   |     |-DeclRefExpr 0x150112440 <col:2> 'int' lvalue Var 0x1500f92c0 'saw_quote' 'int'
|   |   |     `-IntegerLiteral 0x150112460 <col:14> 'int' 1
|   |   `-CallExpr 0x1501126a0 <line:21:7, col:36> '<dependent type>' contains-errors
|   |     |-DeclRefExpr 0x1501125d0 <col:7> 'int ()' Function 0x150112518 'ADVANCE_CHAR' 'int ()'
|   |     |-DeclRefExpr 0x1501125f0 <col:21> 'char *' lvalue ParmVar 0x1500f8ed8 'string' 'char *'
|   |     |-RecoveryExpr 0x150112680 <col:29> '<dependent type>' contains-errors lvalue
|   |     `-DeclRefExpr 0x150112628 <col:35> 'int' lvalue Var 0x1500f9240 'i' 'int'
|   |-IfStmt 0x150115258 <line:24:3, line:54:29> has_else
|   | |-ImplicitCastExpr 0x1501127a8 <line:24:7, col:15> 'char' <LValueToRValue>
|   | | `-ArraySubscriptExpr 0x150112788 <col:7, col:15> 'char' lvalue
|   | |   |-ImplicitCastExpr 0x150112758 <col:7> 'char *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x150112718 <col:7> 'char *' lvalue ParmVar 0x1500f8ed8 'string' 'char *'
|   | |   `-ImplicitCastExpr 0x150112770 <col:14> 'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x150112738 <col:14> 'int' lvalue Var 0x1500f9240 'i' 'int'
|   | |-CompoundStmt 0x150114cc8 <line:25:5, line:48:5>
|   | | |-IfStmt 0x1501149e0 <line:31:7, line:38:2>
|   | | | |-RecoveryExpr 0x150114690 <line:31:11> '_Bool' contains-errors
|   | | | `-CompoundStmt 0x1501149d0 <line:32:2, line:38:2>
|   | | `-IfStmt 0x150114b98 <line:40:7, line:46:2> has_else
|   | |   |-RecoveryExpr 0x150114a00 <line:40:11> '_Bool' contains-errors
|   | |   |-CompoundStmt 0x150114b60 <line:41:2, line:44:2>
|   | |   `-NullStmt 0x150114b90 <line:46:2>
|   | `-IfStmt 0x150115228 <line:49:8, line:54:29> has_else
|   |   |-RecoveryExpr 0x150114d28 <line:49:12, col:42> '_Bool' contains-errors
|   |   |-BinaryOperator 0x150114f38 <line:50:5, col:47> 'char *' '='
|   |   | |-DeclRefExpr 0x150114d48 <col:5> 'char *' lvalue Var 0x1500f9370 'ret' 'char *'
|   |   | `-ImplicitCastExpr 0x150114f20 <col:11, col:47> 'char *' <IntegralToPointer>
|   |   |   `-CallExpr 0x150114ec0 <col:11, col:47> 'int'
|   |   |     |-ImplicitCastExpr 0x150114ea8 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x150114e48 <col:11> 'int ()' Function 0x150114d90 'string_quote_removal' 'int ()'
|   |   |     |-ImplicitCastExpr 0x150114ef0 <col:33> 'char *' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x150114e68 <col:33> 'char *' lvalue ParmVar 0x1500f8ed8 'string' 'char *'
|   |   |     `-ImplicitCastExpr 0x150114f08 <col:41> 'int' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x150114e88 <col:41> 'int' lvalue ParmVar 0x1500f8f58 'quoted' 'int'
|   |   `-IfStmt 0x1501151f8 <line:51:8, line:54:29> has_else
|   |     |-RecoveryExpr 0x150114fb8 <line:51:12, col:75> '_Bool' contains-errors
|   |     |-BinaryOperator 0x1501150e8 <line:52:5, col:47> 'char *' '='
|   |     | |-DeclRefExpr 0x150114fd8 <col:5> 'char *' lvalue Var 0x1500f9370 'ret' 'char *'
|   |     | `-ImplicitCastExpr 0x1501150d0 <col:11, col:47> 'char *' <IntegralToPointer>
|   |     |   `-CallExpr 0x150115070 <col:11, col:47> 'int'
|   |     |     |-ImplicitCastExpr 0x150115058 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |     |     | `-DeclRefExpr 0x150114ff8 <col:11> 'int ()' Function 0x150114d90 'string_quote_removal' 'int ()'
|   |     |     |-ImplicitCastExpr 0x1501150a0 <col:33> 'char *' <LValueToRValue>
|   |     |     | `-DeclRefExpr 0x150115018 <col:33> 'char *' lvalue ParmVar 0x1500f8ed8 'string' 'char *'
|   |     |     `-ImplicitCastExpr 0x1501150b8 <col:41> 'int' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x150115038 <col:41> 'int' lvalue ParmVar 0x1500f8f58 'quoted' 'int'
|   |     `-BinaryOperator 0x1501151d8 <line:54:5, col:29> 'char *' '='
|   |       |-DeclRefExpr 0x150115108 <col:5> 'char *' lvalue Var 0x1500f9370 'ret' 'char *'
|   |       `-ImplicitCastExpr 0x1501151c0 <col:11, col:29> 'char *' <IntegralToPointer>
|   |         `-CallExpr 0x150115180 <col:11, col:29> 'int'
|   |           |-ImplicitCastExpr 0x150115168 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |           | `-DeclRefExpr 0x150115128 <col:11> 'int ()' Function 0x150114400 'savestring' 'int ()'
|   |           `-ImplicitCastExpr 0x1501151a8 <col:23> 'char *' <LValueToRValue>
|   |             `-DeclRefExpr 0x150115148 <col:23> 'char *' lvalue ParmVar 0x1500f8ed8 'string' 'char *'
|   `-ReturnStmt 0x1501152d8 <line:56:3, col:10>
|     `-ImplicitCastExpr 0x1501152c0 <col:10> 'int' <PointerToIntegral>
|       `-ImplicitCastExpr 0x1501152a8 <col:10> 'char *' <LValueToRValue>
|         `-DeclRefExpr 0x150115288 <col:10> 'char *' lvalue Var 0x1500f9370 'ret' 'char *'
`-FunctionDecl 0x150111ad0 <line:13:29> col:29 implicit used strlen 'unsigned long (const char *)' extern
  |-ParmVarDecl 0x150111bd0 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x150111b78 <<invalid sloc>> Implicit 902
