TranslationUnitDecl 0x11f855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x11f8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x11f855bd0 '__int128'
|-TypedefDecl 0x11f856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x11f855bf0 'unsigned __int128'
|-TypedefDecl 0x12800be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12800bc00 'struct __NSConstantString_tag'
|   `-Record 0x11f856580 '__NSConstantString_tag'
|-TypedefDecl 0x12800be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x11f855d90 '__SVInt8_t'
|-TypedefDecl 0x12800bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x11f855db0 '__SVInt16_t'
|-TypedefDecl 0x12800bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x11f855dd0 '__SVInt32_t'
|-TypedefDecl 0x12800bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x11f855df0 '__SVInt64_t'
|-TypedefDecl 0x12800c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x11f855e10 '__SVUint8_t'
|-TypedefDecl 0x12800c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x11f855e30 '__SVUint16_t'
|-TypedefDecl 0x12800c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x11f855e50 '__SVUint32_t'
|-TypedefDecl 0x12800c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x11f855e70 '__SVUint64_t'
|-TypedefDecl 0x12800c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x11f855e90 '__SVFloat16_t'
|-TypedefDecl 0x12800c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x11f855eb0 '__SVFloat32_t'
|-TypedefDecl 0x12800c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x11f855ed0 '__SVFloat64_t'
|-TypedefDecl 0x12800c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x11f855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12800c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x11f855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12800c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x11f855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12800c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x11f855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12800c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x11f855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12800c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x11f855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12800c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x11f855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12800c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x11f855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12800c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x11f855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12800c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x11f856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12800c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x11f856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12800c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x11f856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12800c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x11f856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12800c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x11f856090 '__clang_svint8x3_t'
|-TypedefDecl 0x12800c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x11f8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12800c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x11f8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12800c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x11f8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12800c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x11f856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12800ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x11f856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12800cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x11f856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12800cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x11f856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12800cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x11f856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12800d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x11f8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12800d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x11f8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12800d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x11f8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12800d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x11f856210 '__clang_svint8x4_t'
|-TypedefDecl 0x12800d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x11f856230 '__clang_svint16x4_t'
|-TypedefDecl 0x12800d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x11f856250 '__clang_svint32x4_t'
|-TypedefDecl 0x12800d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x11f856270 '__clang_svint64x4_t'
|-TypedefDecl 0x12800d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x11f856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12800d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x11f8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12800d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x11f8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12800d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x11f8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12800d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x11f856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12800d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x11f856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12800d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x11f856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12800d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x11f856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12800da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x11f856390 '__SVBool_t'
|-TypedefDecl 0x12800da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x11f8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12800dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x11f8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12800db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x11f8563f0 '__SVCount_t'
|-TypedefDecl 0x12800dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12800dbb0 'char *'
|   `-BuiltinType 0x11f8556b0 'char'
|-TypedefDecl 0x12800dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12800dbb0 'char *'
|   `-BuiltinType 0x11f8556b0 'char'
`-FunctionDecl 0x12800dfa8 <dataset_diviso_filec/func22249_vuln.c:1:1, line:54:1> line:1:12 invalid jpc_qcx_getcompparms 'int (int *, int *, int *, int)' static
  |-ParmVarDecl 0x12800dd28 <col:33, col:46> col:46 referenced invalid compparms 'int *'
  |-ParmVarDecl 0x12800dda8 <col:57, col:71> col:71 referenced invalid cstate 'int *'
  |-ParmVarDecl 0x12800de28 <line:2:3, col:17> col:17 invalid in 'int *'
  |-ParmVarDecl 0x12800dea8 <col:21, col:35> col:35 invalid len 'int'
  `-CompoundStmt 0x1280299f0 <line:3:1, line:54:1>
    |-DeclStmt 0x12800e0f0 <line:5:2, col:7>
    | `-VarDecl 0x12800e088 <col:2, col:6> col:6 used n 'int'
    |-DeclStmt 0x12800e188 <line:6:2, col:7>
    | `-VarDecl 0x12800e120 <col:2, col:6> col:6 used i 'int'
    |-BinaryOperator 0x12800e208 <line:9:2, col:11> '<dependent type>' contains-errors '='
    | |-RecoveryExpr 0x12800e1c0 <col:2> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x12800e1a0 <col:2> 'int *' lvalue ParmVar 0x12800dda8 'cstate' 'int *'
    | `-IntegerLiteral 0x12800e1e8 <col:11> 'int' 0
    |-BinaryOperator 0x12800e268 <line:11:2, col:6> 'int' '='
    | |-DeclRefExpr 0x12800e228 <col:2> 'int' lvalue Var 0x12800e088 'n' 'int'
    | `-IntegerLiteral 0x12800e248 <col:6> 'int' 0
    |-IfStmt 0x128027548 <line:12:2, line:14:2>
    | |-CallExpr 0x1280274b8 <line:12:6, col:27> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x12800e3e0 <col:6> 'int ()' Function 0x12800e328 'jpc_getuint8' 'int ()'
    | | |-RecoveryExpr 0x128027400 <col:19> '<dependent type>' contains-errors lvalue
    | | `-UnaryOperator 0x1280274a0 <col:23, col:24> '<dependent type>' contains-errors prefix '&' cannot overflow
    | |   `-RecoveryExpr 0x128027480 <col:24> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x128027530 <col:30, line:14:2>
    |   `-ReturnStmt 0x128027520 <line:13:3, col:11>
    |     `-UnaryOperator 0x128027508 <col:10, col:11> 'int' prefix '-'
    |       `-IntegerLiteral 0x1280274e8 <col:11> 'int' 1
    |-UnaryOperator 0x128027588 <line:15:2, col:4> 'int' prefix '++'
    | `-DeclRefExpr 0x128027568 <col:4> 'int' lvalue Var 0x12800e088 'n' 'int'
    |-BinaryOperator 0x1280276e8 <line:16:2, col:28> '<dependent type>' contains-errors '='
    | |-CXXDependentScopeMemberExpr 0x1280275e8 <col:2, col:13> '<dependent type>' contains-errors lvalue ->qntsty
    | | `-RecoveryExpr 0x1280275c0 <col:2> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x1280275a0 <col:2> 'int *' lvalue ParmVar 0x12800dd28 'compparms' 'int *'
    | `-BinaryOperator 0x1280276c8 <col:22, col:28> '<dependent type>' contains-errors '&'
    |   |-RecoveryExpr 0x1280276a8 <col:22> '<dependent type>' contains-errors lvalue
    |   `-IntegerLiteral 0x128027648 <col:28> 'int' 31
    |-SwitchStmt 0x128027890 <line:18:2, line:29:2>
    | |-ImplicitCastExpr 0x128027878 <line:18:10, col:21> '<dependent type>' contains-errors <LValueToRValue>
    | | `-CXXDependentScopeMemberExpr 0x128027830 <col:10, col:21> '<dependent type>' contains-errors lvalue ->qntsty
    | |   `-RecoveryExpr 0x128027810 <col:10> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x128027c88 <col:29, line:29:2>
    |   |-BinaryOperator 0x128027980 <line:20:3, col:29> '<dependent type>' contains-errors '='
    |   | |-CXXDependentScopeMemberExpr 0x128027918 <col:3, col:14> '<dependent type>' contains-errors lvalue ->numstepsizes
    |   | | `-RecoveryExpr 0x1280278f0 <col:3> '<dependent type>' contains-errors lvalue
    |   | |   `-DeclRefExpr 0x1280278d0 <col:3> 'int *' lvalue ParmVar 0x12800dd28 'compparms' 'int *'
    |   | `-IntegerLiteral 0x128027960 <col:29> 'int' 1
    |   |-BreakStmt 0x1280279a0 <line:21:3>
    |   |-BinaryOperator 0x128027ad0 <line:23:3, col:37> '<dependent type>' contains-errors '='
    |   | |-CXXDependentScopeMemberExpr 0x128027a08 <col:3, col:14> '<dependent type>' contains-errors lvalue ->numstepsizes
    |   | | `-RecoveryExpr 0x1280279e0 <col:3> '<dependent type>' contains-errors lvalue
    |   | |   `-DeclRefExpr 0x1280279c0 <col:3> 'int *' lvalue ParmVar 0x12800dd28 'compparms' 'int *'
    |   | `-ParenExpr 0x128027ab0 <col:29, col:37> '<dependent type>' contains-errors
    |   |   `-BinaryOperator 0x128027a90 <col:30, col:36> '<dependent type>' contains-errors '-'
    |   |     |-RecoveryExpr 0x128027a50 <col:30> '<dependent type>' contains-errors lvalue
    |   |     `-DeclRefExpr 0x128027a70 <col:36> 'int' lvalue Var 0x12800e088 'n' 'int'
    |   |-BreakStmt 0x128027af0 <line:24:3>
    |   |-BinaryOperator 0x128027c60 <line:27:3, col:41> '<dependent type>' contains-errors '='
    |   | |-CXXDependentScopeMemberExpr 0x128027b58 <col:3, col:14> '<dependent type>' contains-errors lvalue ->numstepsizes
    |   | | `-RecoveryExpr 0x128027b30 <col:3> '<dependent type>' contains-errors lvalue
    |   | |   `-DeclRefExpr 0x128027b10 <col:3> 'int *' lvalue ParmVar 0x12800dd28 'compparms' 'int *'
    |   | `-BinaryOperator 0x128027c40 <col:29, col:41> '<dependent type>' contains-errors '/'
    |   |   |-ParenExpr 0x128027c00 <col:29, col:37> '<dependent type>' contains-errors
    |   |   | `-BinaryOperator 0x128027be0 <col:30, col:36> '<dependent type>' contains-errors '-'
    |   |   |   |-RecoveryExpr 0x128027ba0 <col:30> '<dependent type>' contains-errors lvalue
    |   |   |   `-DeclRefExpr 0x128027bc0 <col:36> 'int' lvalue Var 0x12800e088 'n' 'int'
    |   |   `-IntegerLiteral 0x128027c20 <col:41> 'int' 2
    |   `-BreakStmt 0x128027c80 <line:28:3>
    |-IfStmt 0x128029510 <line:30:2, line:48:2> has_else
    | |-BinaryOperator 0x128027d50 <line:30:6, col:32> 'int' contains-errors '>'
    | | |-CXXDependentScopeMemberExpr 0x128027ce8 <col:6, col:17> '<dependent type>' contains-errors lvalue ->numstepsizes
    | | | `-RecoveryExpr 0x128027cc8 <col:6> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x128027d30 <col:32> 'int' 0
    | |-CompoundStmt 0x128029408 <col:35, line:46:2>
    | | |-CallExpr 0x1280280e8 <line:33:3, col:30> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x128028060 <col:3> 'int ()' Function 0x128027fa8 'assert' 'int ()'
    | | | `-CXXDependentScopeMemberExpr 0x1280280a0 <col:10, col:21> '<dependent type>' contains-errors lvalue ->stepsizes
    | | |   `-RecoveryExpr 0x128028080 <col:10> '<dependent type>' contains-errors lvalue
    | | `-ForStmt 0x1280293d0 <line:34:3, line:45:3>
    | |   |-BinaryOperator 0x128028150 <line:34:8, col:12> 'int' '='
    | |   | |-DeclRefExpr 0x128028110 <col:8> 'int' lvalue Var 0x12800e120 'i' 'int'
    | |   | `-IntegerLiteral 0x128028130 <col:12> 'int' 0
    | |   |-<<<NULL>>>
    | |   |-BinaryOperator 0x1280281f8 <col:15, col:30> 'int' contains-errors '<'
    | |   | |-DeclRefExpr 0x128028170 <col:15> 'int' lvalue Var 0x12800e120 'i' 'int'
    | |   | `-CXXDependentScopeMemberExpr 0x1280281b0 <col:19, col:30> '<dependent type>' contains-errors lvalue ->numstepsizes
    | |   |   `-RecoveryExpr 0x128028190 <col:19> '<dependent type>' contains-errors lvalue
    | |   |-UnaryOperator 0x128028238 <col:44, col:46> 'int' prefix '++'
    | |   | `-DeclRefExpr 0x128028218 <col:46> 'int' lvalue Var 0x12800e120 'i' 'int'
    | |   `-CompoundStmt 0x1280293b8 <col:49, line:45:3>
    | |     `-IfStmt 0x128029388 <line:35:4, line:44:4> has_else
    | |       |-BinaryOperator 0x128028310 <line:35:8, col:29> 'int' contains-errors '=='
    | |       | |-CXXDependentScopeMemberExpr 0x128028270 <col:8, col:19> '<dependent type>' contains-errors lvalue ->qntsty
    | |       | | `-RecoveryExpr 0x128028250 <col:8> '<dependent type>' contains-errors lvalue
    | |       | `-RecoveryExpr 0x1280282f0 <col:29> '<dependent type>' contains-errors lvalue
    | |       |-CompoundStmt 0x128029090 <col:44, line:40:4>
    | |       | |-IfStmt 0x128028ca8 <line:36:5, line:38:5>
    | |       | | |-CallExpr 0x128028c18 <line:36:9, col:30> '<dependent type>' contains-errors
    | |       | | | |-DeclRefExpr 0x128028330 <col:9> 'int ()' Function 0x12800e328 'jpc_getuint8' 'int ()'
    | |       | | | |-RecoveryExpr 0x128028350 <col:22> '<dependent type>' contains-errors lvalue
    | |       | | | `-UnaryOperator 0x128028c00 <col:26, col:27> '<dependent type>' contains-errors prefix '&' cannot overflow
    | |       | | |   `-RecoveryExpr 0x1280283d0 <col:27> '<dependent type>' contains-errors lvalue
    | |       | | `-CompoundStmt 0x128028c90 <col:33, line:38:5>
    | |       | |   `-ReturnStmt 0x128028c80 <line:37:6, col:14>
    | |       | |     `-UnaryOperator 0x128028c68 <col:13, col:14> 'int' prefix '-'
    | |       | |       `-IntegerLiteral 0x128028c48 <col:14> 'int' 1
    | |       | `-BinaryOperator 0x128029070 <line:39:5, col:52> '<dependent type>' contains-errors '='
    | |       |   |-ArraySubscriptExpr 0x128028fe8 <col:5, col:27> '<dependent type>' contains-errors lvalue
    | |       |   | |-ImplicitCastExpr 0x128028fb8 <col:5, col:16> '<dependent type>' contains-errors <LValueToRValue>
    | |       |   | | `-CXXDependentScopeMemberExpr 0x128028d10 <col:5, col:16> '<dependent type>' contains-errors lvalue ->stepsizes
    | |       |   | |   `-RecoveryExpr 0x128028ce8 <col:5> '<dependent type>' contains-errors lvalue
    | |       |   | |     `-DeclRefExpr 0x128028cc8 <col:5> 'int *' lvalue ParmVar 0x12800dd28 'compparms' 'int *'
    | |       |   | `-ImplicitCastExpr 0x128028fd0 <col:26> 'int' <LValueToRValue>
    | |       |   |   `-DeclRefExpr 0x128028d58 <col:26> 'int' lvalue Var 0x12800e120 'i' 'int'
    | |       |   `-CallExpr 0x128029048 <col:31, col:52> '<dependent type>' contains-errors
    | |       |     |-DeclRefExpr 0x128028ea8 <col:31> 'int ()' Function 0x128028df0 'JPC_QCX_EXPN' 'int ()'
    | |       |     `-BinaryOperator 0x128029028 <col:44, col:51> '<dependent type>' contains-errors '>>'
    | |       |       |-RecoveryExpr 0x128029008 <col:44> '<dependent type>' contains-errors lvalue
    | |       |       `-IntegerLiteral 0x128028ee0 <col:51> 'int' 3
    | |       `-CompoundStmt 0x128029370 <line:40:11, line:44:4>
    | |         `-IfStmt 0x128029350 <line:41:5, line:43:5>
    | |           |-CallExpr 0x1280292c0 <line:41:9, col:51> '<dependent type>' contains-errors
    | |           | |-DeclRefExpr 0x128029190 <col:9> 'int ()' Function 0x1280290d8 'jpc_getuint16' 'int ()'
    | |           | |-RecoveryExpr 0x1280291b0 <col:23> '<dependent type>' contains-errors lvalue
    | |           | `-UnaryOperator 0x1280292a8 <col:27, col:50> '<dependent type>' contains-errors prefix '&' cannot overflow
    | |           |   `-ArraySubscriptExpr 0x128029288 <col:28, col:50> '<dependent type>' contains-errors lvalue
    | |           |     |-ImplicitCastExpr 0x128029258 <col:28, col:39> '<dependent type>' contains-errors <LValueToRValue>
    | |           |     | `-CXXDependentScopeMemberExpr 0x1280291f0 <col:28, col:39> '<dependent type>' contains-errors lvalue ->stepsizes
    | |           |     |   `-RecoveryExpr 0x1280291d0 <col:28> '<dependent type>' contains-errors lvalue
    | |           |     `-ImplicitCastExpr 0x128029270 <col:49> 'int' <LValueToRValue>
    | |           |       `-DeclRefExpr 0x128029238 <col:49> 'int' lvalue Var 0x12800e120 'i' 'int'
    | |           `-CompoundStmt 0x128029338 <col:54, line:43:5>
    | |             `-ReturnStmt 0x128029328 <line:42:6, col:14>
    | |               `-UnaryOperator 0x128029310 <col:13, col:14> 'int' prefix '-'
    | |                 `-IntegerLiteral 0x1280292f0 <col:14> 'int' 1
    | `-CompoundStmt 0x1280294f8 <line:46:9, line:48:2>
    |   `-BinaryOperator 0x1280294d8 <line:47:3, col:26> '<dependent type>' contains-errors '='
    |     |-CXXDependentScopeMemberExpr 0x128029470 <col:3, col:14> '<dependent type>' contains-errors lvalue ->stepsizes
    |     | `-RecoveryExpr 0x128029448 <col:3> '<dependent type>' contains-errors lvalue
    |     |   `-DeclRefExpr 0x128029428 <col:3> 'int *' lvalue ParmVar 0x12800dd28 'compparms' 'int *'
    |     `-IntegerLiteral 0x1280294b8 <col:26> 'int' 0
    |-IfStmt 0x1280299a0 <line:49:2, line:52:2>
    | |-BinaryOperator 0x1280297d0 <line:49:6, col:47> 'int' contains-errors '||'
    | | |-CallExpr 0x128029660 <col:6, col:25> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x128029620 <col:6> 'int ()' Function 0x128029568 'jas_stream_error' 'int ()'
    | | | `-RecoveryExpr 0x128029640 <col:23> '<dependent type>' contains-errors lvalue
    | | `-CallExpr 0x1280297a8 <col:30, col:47> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x128029768 <col:30> 'int ()' Function 0x1280296b0 'jas_stream_eof' 'int ()'
    | |   `-RecoveryExpr 0x128029788 <col:45> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x128029980 <col:50, line:52:2>
    |   |-CallExpr 0x128029910 <line:50:3, col:37> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x1280298d0 <col:3> 'int ()' Function 0x128029818 'jpc_qcx_destroycompparms' 'int ()'
    |   | `-RecoveryExpr 0x1280298f0 <col:28> '<dependent type>' contains-errors lvalue
    |   `-ReturnStmt 0x128029970 <line:51:3, col:11>
    |     `-UnaryOperator 0x128029958 <col:10, col:11> 'int' prefix '-'
    |       `-IntegerLiteral 0x128029938 <col:11> 'int' 1
    `-ReturnStmt 0x1280299e0 <line:53:2, col:9>
      `-IntegerLiteral 0x1280299c0 <col:9> 'int' 0
