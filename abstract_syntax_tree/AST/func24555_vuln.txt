TranslationUnitDecl 0x122028208 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1220290b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1220287d0 '__int128'
|-TypedefDecl 0x122029128 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1220287f0 'unsigned __int128'
|-TypedefDecl 0x1220f8e30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x1220f8c00 'struct __NSConstantString_tag'
|   `-Record 0x122029180 '__NSConstantString_tag'
|-TypedefDecl 0x1220f8e98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x122028990 '__SVInt8_t'
|-TypedefDecl 0x1220f8f00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x1220289b0 '__SVInt16_t'
|-TypedefDecl 0x1220f8f68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x1220289d0 '__SVInt32_t'
|-TypedefDecl 0x1220f8fd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x1220289f0 '__SVInt64_t'
|-TypedefDecl 0x1220f9038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x122028a10 '__SVUint8_t'
|-TypedefDecl 0x1220f90a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x122028a30 '__SVUint16_t'
|-TypedefDecl 0x1220f9108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x122028a50 '__SVUint32_t'
|-TypedefDecl 0x1220f9170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x122028a70 '__SVUint64_t'
|-TypedefDecl 0x1220f91d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x122028a90 '__SVFloat16_t'
|-TypedefDecl 0x1220f9240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x122028ab0 '__SVFloat32_t'
|-TypedefDecl 0x1220f92a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x122028ad0 '__SVFloat64_t'
|-TypedefDecl 0x1220f9310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x122028af0 '__SVBfloat16_t'
|-TypedefDecl 0x1220f9378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x122028b10 '__clang_svint8x2_t'
|-TypedefDecl 0x1220f93e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x122028b30 '__clang_svint16x2_t'
|-TypedefDecl 0x1220f9448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x122028b50 '__clang_svint32x2_t'
|-TypedefDecl 0x1220f94b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x122028b70 '__clang_svint64x2_t'
|-TypedefDecl 0x1220f9518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x122028b90 '__clang_svuint8x2_t'
|-TypedefDecl 0x1220f9580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x122028bb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1220f95e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x122028bd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x1220f9650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x122028bf0 '__clang_svuint64x2_t'
|-TypedefDecl 0x1220f96b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x122028c10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x1220f9720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x122028c30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x1220f9788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x122028c50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x1220f97f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x122028c70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x1220f9858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x122028c90 '__clang_svint8x3_t'
|-TypedefDecl 0x1220f98c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x122028cb0 '__clang_svint16x3_t'
|-TypedefDecl 0x1220f9928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x122028cd0 '__clang_svint32x3_t'
|-TypedefDecl 0x1220f9990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x122028cf0 '__clang_svint64x3_t'
|-TypedefDecl 0x1220f99f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x122028d10 '__clang_svuint8x3_t'
|-TypedefDecl 0x1220f9a60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x122028d30 '__clang_svuint16x3_t'
|-TypedefDecl 0x1220f9ac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x122028d50 '__clang_svuint32x3_t'
|-TypedefDecl 0x1220f9b30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x122028d70 '__clang_svuint64x3_t'
|-TypedefDecl 0x1220f9b98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x122028d90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x1220fa400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x122028db0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x1220fa468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x122028dd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1220fa4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x122028df0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x1220fa538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x122028e10 '__clang_svint8x4_t'
|-TypedefDecl 0x1220fa5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x122028e30 '__clang_svint16x4_t'
|-TypedefDecl 0x1220fa608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x122028e50 '__clang_svint32x4_t'
|-TypedefDecl 0x1220fa670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x122028e70 '__clang_svint64x4_t'
|-TypedefDecl 0x1220fa6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x122028e90 '__clang_svuint8x4_t'
|-TypedefDecl 0x1220fa740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x122028eb0 '__clang_svuint16x4_t'
|-TypedefDecl 0x1220fa7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x122028ed0 '__clang_svuint32x4_t'
|-TypedefDecl 0x1220fa810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x122028ef0 '__clang_svuint64x4_t'
|-TypedefDecl 0x1220fa878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x122028f10 '__clang_svfloat16x4_t'
|-TypedefDecl 0x1220fa8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x122028f30 '__clang_svfloat32x4_t'
|-TypedefDecl 0x1220fa948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x122028f50 '__clang_svfloat64x4_t'
|-TypedefDecl 0x1220fa9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x122028f70 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x1220faa18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x122028f90 '__SVBool_t'
|-TypedefDecl 0x1220faa80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x122028fb0 '__clang_svboolx2_t'
|-TypedefDecl 0x1220faae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x122028fd0 '__clang_svboolx4_t'
|-TypedefDecl 0x1220fab50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x122028ff0 '__SVCount_t'
|-TypedefDecl 0x1220fabf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1220fabb0 'char *'
|   `-BuiltinType 0x1220282b0 'char'
|-TypedefDecl 0x1220fac68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1220fabb0 'char *'
|   `-BuiltinType 0x1220282b0 'char'
|-FunctionDecl 0x1220faec8 <dataset_diviso_filec/func24555_vuln.c:1:5, line:43:5> line:1:11 skipSpaces 'char *(char *, int, int)'
| |-ParmVarDecl 0x1220facd8 <col:23, col:29> col:29 used ptr 'char *'
| |-ParmVarDecl 0x1220fad58 <col:34, col:38> col:38 used min_indent 'int'
| |-ParmVarDecl 0x1220fadd8 <col:50, col:54> col:54 used max_comment_indent 'int'
| `-CompoundStmt 0x122118358 <line:2:5, line:43:5>
|   |-ForStmt 0x1221182d8 <line:3:9, line:40:9>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | `-CompoundStmt 0x1221182b8 <line:4:9, line:40:9>
|   |   |-WhileStmt 0x1220fb0c0 <line:5:13, line:6:20>
|   |   | |-BinaryOperator 0x1220fb068 <line:5:20, col:28> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x1220fb050 <col:20, col:21> 'int' <IntegralCast>
|   |   | | | `-ImplicitCastExpr 0x1220fb038 <col:20, col:21> 'char' <LValueToRValue>
|   |   | | |   `-UnaryOperator 0x1220fb008 <col:20, col:21> 'char' lvalue prefix '*' cannot overflow
|   |   | | |     `-ImplicitCastExpr 0x1220faff0 <col:21> 'char *' <LValueToRValue>
|   |   | | |       `-DeclRefExpr 0x1220fafd0 <col:21> 'char *' lvalue ParmVar 0x1220facd8 'ptr' 'char *'
|   |   | | `-CharacterLiteral 0x1220fb020 <col:28> 'int' 32
|   |   | `-UnaryOperator 0x1220fb0a8 <line:6:17, col:20> 'char *' postfix '++'
|   |   |   `-DeclRefExpr 0x1220fb088 <col:17> 'char *' lvalue ParmVar 0x1220facd8 'ptr' 'char *'
|   |   `-IfStmt 0x122118288 <line:7:13, line:39:17> has_else
|   |     |-BinaryOperator 0x1220fb178 <line:7:17, col:25> 'int' '=='
|   |     | |-ImplicitCastExpr 0x1220fb160 <col:17, col:18> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x1220fb148 <col:17, col:18> 'char' <LValueToRValue>
|   |     | |   `-UnaryOperator 0x1220fb118 <col:17, col:18> 'char' lvalue prefix '*' cannot overflow
|   |     | |     `-ImplicitCastExpr 0x1220fb100 <col:18> 'char *' <LValueToRValue>
|   |     | |       `-DeclRefExpr 0x1220fb0e0 <col:18> 'char *' lvalue ParmVar 0x1220facd8 'ptr' 'char *'
|   |     | `-CharacterLiteral 0x1220fb130 <col:25> 'int' 35
|   |     |-CompoundStmt 0x122113c80 <line:8:13, line:12:13>
|   |     | |-IfStmt 0x1220fb3c0 <line:9:17, line:10:28>
|   |     | | |-BinaryOperator 0x1220fb358 <line:9:21, col:47> 'int' contains-errors '>'
|   |     | | | |-BinaryOperator 0x1220fb338 <col:21, col:43> '<dependent type>' contains-errors '-'
|   |     | | | | |-DeclRefExpr 0x1220fb198 <col:21> 'char *' lvalue ParmVar 0x1220facd8 'ptr' 'char *'
|   |     | | | | `-CallExpr 0x1220fb318 <col:27, col:43> '<dependent type>' contains-errors
|   |     | | | |   `-CXXDependentScopeMemberExpr 0x1220fb2d0 <col:27, col:31> '<dependent type>' contains-errors lvalue ->bufferStart
|   |     | | | |     `-RecoveryExpr 0x1220fb2b0 <col:27> '<dependent type>' contains-errors lvalue
|   |     | | | `-DeclRefExpr 0x1220fb270 <col:47> 'int' lvalue ParmVar 0x1220fadd8 'max_comment_indent' 'int'
|   |     | | `-ReturnStmt 0x1220fb3b0 <line:10:21, col:28>
|   |     | |   `-ImplicitCastExpr 0x1220fb398 <col:28> 'char *' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x1220fb378 <col:28> 'char *' lvalue ParmVar 0x1220facd8 'ptr' 'char *'
|   |     | `-BinaryOperator 0x122113c60 <line:11:17, col:24> 'char' '='
|   |     |   |-UnaryOperator 0x122113c18 <col:17, col:18> 'char' lvalue prefix '*' cannot overflow
|   |     |   | `-ImplicitCastExpr 0x122113c00 <col:18> 'char *' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x1220fb3e0 <col:18> 'char *' lvalue ParmVar 0x1220facd8 'ptr' 'char *'
|   |     |   `-ImplicitCastExpr 0x122113c48 <col:24> 'char' <IntegralCast>
|   |     |     `-CharacterLiteral 0x122113c30 <col:24> 'int' 0
|   |     `-IfStmt 0x122118258 <line:13:18, line:39:17> has_else
|   |       |-CallExpr 0x122113e68 <line:13:22, col:37> 'int'
|   |       | |-ImplicitCastExpr 0x122113e50 <col:22> 'int (*)()' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x122113db0 <col:22> 'int ()' Function 0x122113cf8 'cv_isprint' 'int ()'
|   |       | `-ImplicitCastExpr 0x122113ea8 <col:33, col:34> 'int' <IntegralCast>
|   |       |   `-ImplicitCastExpr 0x122113e90 <col:33, col:34> 'char' <LValueToRValue>
|   |       |     `-UnaryOperator 0x122113e08 <col:33, col:34> 'char' lvalue prefix '*' cannot overflow
|   |       |       `-ImplicitCastExpr 0x122113df0 <col:34> 'char *' <LValueToRValue>
|   |       |         `-DeclRefExpr 0x122113dd0 <col:34> 'char *' lvalue ParmVar 0x1220facd8 'ptr' 'char *'
|   |       |-CompoundStmt 0x122114270 <line:14:13, line:18:13>
|   |       | |-IfStmt 0x122114248 <line:15:17, line:16:47>
|   |       | | |-BinaryOperator 0x122114068 <line:15:21, col:47> 'int' contains-errors '<'
|   |       | | | |-BinaryOperator 0x122114048 <col:21, col:43> '<dependent type>' contains-errors '-'
|   |       | | | | |-DeclRefExpr 0x122113ec0 <col:21> 'char *' lvalue ParmVar 0x1220facd8 'ptr' 'char *'
|   |       | | | | `-CallExpr 0x122114028 <col:27, col:43> '<dependent type>' contains-errors
|   |       | | | |   `-CXXDependentScopeMemberExpr 0x122113fe0 <col:27, col:31> '<dependent type>' contains-errors lvalue ->bufferStart
|   |       | | | |     `-RecoveryExpr 0x122113fc0 <col:27> '<dependent type>' contains-errors lvalue
|   |       | | | `-DeclRefExpr 0x122113f80 <col:47> 'int' lvalue ParmVar 0x1220fad58 'min_indent' 'int'
|   |       | | `-CallExpr 0x122114208 <line:16:21, col:47> 'int'
|   |       | |   |-ImplicitCastExpr 0x1221141f0 <col:21> 'int (*)()' <FunctionToPointerDecay>
|   |       | |   | `-DeclRefExpr 0x122114168 <col:21> 'int ()' Function 0x1221140b0 'CV_PARSE_ERROR_CPP' 'int ()'
|   |       | |   `-ImplicitCastExpr 0x122114230 <col:41> 'char *' <ArrayToPointerDecay>
|   |       | |     `-StringLiteral 0x1221141d0 <col:41> 'char[4]' lvalue "STR"
|   |       | `-BreakStmt 0x122114268 <line:17:17>
|   |       `-IfStmt 0x122118228 <line:19:18, line:39:17> has_else
|   |         |-BinaryOperator 0x1221144d8 <line:19:22, col:62> 'int' '||'
|   |         | |-BinaryOperator 0x122114400 <col:22, col:46> 'int' '||'
|   |         | | |-BinaryOperator 0x122114328 <col:22, col:30> 'int' '=='
|   |         | | | |-ImplicitCastExpr 0x122114310 <col:22, col:23> 'int' <IntegralCast>
|   |         | | | | `-ImplicitCastExpr 0x1221142f8 <col:22, col:23> 'char' <LValueToRValue>
|   |         | | | |   `-UnaryOperator 0x1221142c8 <col:22, col:23> 'char' lvalue prefix '*' cannot overflow
|   |         | | | |     `-ImplicitCastExpr 0x1221142b0 <col:23> 'char *' <LValueToRValue>
|   |         | | | |       `-DeclRefExpr 0x122114290 <col:23> 'char *' lvalue ParmVar 0x1220facd8 'ptr' 'char *'
|   |         | | | `-CharacterLiteral 0x1221142e0 <col:30> 'int' 0
|   |         | | `-BinaryOperator 0x1221143e0 <col:38, col:46> 'int' '=='
|   |         | |   |-ImplicitCastExpr 0x1221143c8 <col:38, col:39> 'int' <IntegralCast>
|   |         | |   | `-ImplicitCastExpr 0x1221143b0 <col:38, col:39> 'char' <LValueToRValue>
|   |         | |   |   `-UnaryOperator 0x122114380 <col:38, col:39> 'char' lvalue prefix '*' cannot overflow
|   |         | |   |     `-ImplicitCastExpr 0x122114368 <col:39> 'char *' <LValueToRValue>
|   |         | |   |       `-DeclRefExpr 0x122114348 <col:39> 'char *' lvalue ParmVar 0x1220facd8 'ptr' 'char *'
|   |         | |   `-CharacterLiteral 0x122114398 <col:46> 'int' 10
|   |         | `-BinaryOperator 0x1221144b8 <col:54, col:62> 'int' '=='
|   |         |   |-ImplicitCastExpr 0x1221144a0 <col:54, col:55> 'int' <IntegralCast>
|   |         |   | `-ImplicitCastExpr 0x122114488 <col:54, col:55> 'char' <LValueToRValue>
|   |         |   |   `-UnaryOperator 0x122114458 <col:54, col:55> 'char' lvalue prefix '*' cannot overflow
|   |         |   |     `-ImplicitCastExpr 0x122114440 <col:55> 'char *' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x122114420 <col:55> 'char *' lvalue ParmVar 0x1220facd8 'ptr' 'char *'
|   |         |   `-CharacterLiteral 0x122114470 <col:62> 'int' 13
|   |         |-CompoundStmt 0x122116908 <line:20:13, line:37:13>
|   |         | |-BinaryOperator 0x122114640 <line:21:17, col:32> 'char *' contains-errors '='
|   |         | | |-DeclRefExpr 0x1221144f8 <col:17> 'char *' lvalue ParmVar 0x1220facd8 'ptr' 'char *'
|   |         | | `-CallExpr 0x122114620 <col:23, col:32> '<dependent type>' contains-errors
|   |         | |   `-CXXDependentScopeMemberExpr 0x1221145d8 <col:23, col:27> '<dependent type>' contains-errors lvalue ->gets
|   |         | |     `-RecoveryExpr 0x1221145b8 <col:23> '<dependent type>' contains-errors lvalue
|   |         | `-IfStmt 0x1221168d8 <line:22:17, line:36:17> has_else
|   |         |   |-UnaryOperator 0x122114698 <line:22:21, col:22> 'int' prefix '!' cannot overflow
|   |         |   | `-ImplicitCastExpr 0x122114680 <col:22> 'char *' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x122114660 <col:22> 'char *' lvalue ParmVar 0x1220facd8 'ptr' 'char *'
|   |         |   |-CompoundStmt 0x122114ae0 <line:23:17, line:30:17>
|   |         |   | |-BinaryOperator 0x1221147f8 <line:25:21, col:43> 'char *' contains-errors '='
|   |         |   | | |-DeclRefExpr 0x1221146b0 <col:21> 'char *' lvalue ParmVar 0x1220facd8 'ptr' 'char *'
|   |         |   | | `-CallExpr 0x1221147d8 <col:27, col:43> '<dependent type>' contains-errors
|   |         |   | |   `-CXXDependentScopeMemberExpr 0x122114790 <col:27, col:31> '<dependent type>' contains-errors lvalue ->bufferStart
|   |         |   | |     `-RecoveryExpr 0x122114770 <col:27> '<dependent type>' contains-errors lvalue
|   |         |   | |-BinaryOperator 0x1221149f0 <line:26:21, col:48> 'char' '='
|   |         |   | | |-ArraySubscriptExpr 0x122114870 <col:21, col:26> 'char' lvalue
|   |         |   | | | |-ImplicitCastExpr 0x122114858 <col:21> 'char *' <LValueToRValue>
|   |         |   | | | | `-DeclRefExpr 0x122114818 <col:21> 'char *' lvalue ParmVar 0x1220facd8 'ptr' 'char *'
|   |         |   | | | `-IntegerLiteral 0x122114838 <col:25> 'int' 0
|   |         |   | | `-BinaryOperator 0x1221149d0 <col:30, col:48> 'char' '='
|   |         |   | |   |-ArraySubscriptExpr 0x1221148e8 <col:30, col:35> 'char' lvalue
|   |         |   | |   | |-ImplicitCastExpr 0x1221148d0 <col:30> 'char *' <LValueToRValue>
|   |         |   | |   | | `-DeclRefExpr 0x122114890 <col:30> 'char *' lvalue ParmVar 0x1220facd8 'ptr' 'char *'
|   |         |   | |   | `-IntegerLiteral 0x1221148b0 <col:34> 'int' 1
|   |         |   | |   `-BinaryOperator 0x1221149b0 <col:39, col:48> 'char' '='
|   |         |   | |     |-ArraySubscriptExpr 0x122114960 <col:39, col:44> 'char' lvalue
|   |         |   | |     | |-ImplicitCastExpr 0x122114948 <col:39> 'char *' <LValueToRValue>
|   |         |   | |     | | `-DeclRefExpr 0x122114908 <col:39> 'char *' lvalue ParmVar 0x1220facd8 'ptr' 'char *'
|   |         |   | |     | `-IntegerLiteral 0x122114928 <col:43> 'int' 2
|   |         |   | |     `-ImplicitCastExpr 0x122114998 <col:48> 'char' <IntegralCast>
|   |         |   | |       `-CharacterLiteral 0x122114980 <col:48> 'int' 46
|   |         |   | |-BinaryOperator 0x122114ab8 <line:27:21, col:30> 'char' '='
|   |         |   | | |-ArraySubscriptExpr 0x122114a68 <col:21, col:26> 'char' lvalue
|   |         |   | | | |-ImplicitCastExpr 0x122114a50 <col:21> 'char *' <LValueToRValue>
|   |         |   | | | | `-DeclRefExpr 0x122114a10 <col:21> 'char *' lvalue ParmVar 0x1220facd8 'ptr' 'char *'
|   |         |   | | | `-IntegerLiteral 0x122114a30 <col:25> 'int' 3
|   |         |   | | `-ImplicitCastExpr 0x122114aa0 <col:30> 'char' <IntegralCast>
|   |         |   | |   `-CharacterLiteral 0x122114a88 <col:30> 'int' 0
|   |         |   | `-BreakStmt 0x122114ad8 <line:29:21>
|   |         |   `-CompoundStmt 0x1221168b8 <line:32:17, line:36:17>
|   |         |     |-DeclStmt 0x1221160a0 <line:33:21, col:45>
|   |         |     | `-VarDecl 0x122114b28 <col:21, col:44> col:25 used l 'int' cinit
|   |         |     |   `-CStyleCastExpr 0x122116078 <col:29, col:44> 'int' <IntegralCast>
|   |         |     |     `-CallExpr 0x122116008 <col:34, col:44> 'unsigned long'
|   |         |     |       |-ImplicitCastExpr 0x122115ff0 <col:34> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |         |     |       | `-DeclRefExpr 0x122115f60 <col:34> 'unsigned long (const char *)' Function 0x122115df0 'strlen' 'unsigned long (const char *)'
|   |         |     |       `-ImplicitCastExpr 0x122116048 <col:41> 'const char *' <NoOp>
|   |         |     |         `-ImplicitCastExpr 0x122116030 <col:41> 'char *' <LValueToRValue>
|   |         |     |           `-DeclRefExpr 0x122115f80 <col:41> 'char *' lvalue ParmVar 0x1220facd8 'ptr' 'char *'
|   |         |     `-IfStmt 0x122116898 <line:34:21, line:35:51>
|   |         |       |-BinaryOperator 0x1221167e0 <line:34:25, col:74> 'int' contains-errors '&&'
|   |         |       | |-BinaryOperator 0x122116720 <col:25, col:57> 'int' '&&'
|   |         |       | | |-BinaryOperator 0x122116640 <col:25, col:37> 'int' '!='
|   |         |       | | | |-ImplicitCastExpr 0x122116628 <col:25, col:32> 'int' <IntegralCast>
|   |         |       | | | | `-ImplicitCastExpr 0x122116610 <col:25, col:32> 'char' <LValueToRValue>
|   |         |       | | | |   `-ArraySubscriptExpr 0x1221165f0 <col:25, col:32> 'char' lvalue
|   |         |       | | | |     |-ImplicitCastExpr 0x1221165d8 <col:25> 'char *' <LValueToRValue>
|   |         |       | | | |     | `-DeclRefExpr 0x1221160b8 <col:25> 'char *' lvalue ParmVar 0x1220facd8 'ptr' 'char *'
|   |         |       | | | |     `-BinaryOperator 0x1221165b8 <col:29, col:31> 'int' '-'
|   |         |       | | | |       |-ImplicitCastExpr 0x1221165a0 <col:29> 'int' <LValueToRValue>
|   |         |       | | | |       | `-DeclRefExpr 0x1221160d8 <col:29> 'int' lvalue Var 0x122114b28 'l' 'int'
|   |         |       | | | |       `-IntegerLiteral 0x1221160f8 <col:31> 'int' 1
|   |         |       | | | `-CharacterLiteral 0x122116188 <col:37> 'int' 10
|   |         |       | | `-BinaryOperator 0x122116700 <col:45, col:57> 'int' '!='
|   |         |       | |   |-ImplicitCastExpr 0x1221166e8 <col:45, col:52> 'int' <IntegralCast>
|   |         |       | |   | `-ImplicitCastExpr 0x1221166d0 <col:45, col:52> 'char' <LValueToRValue>
|   |         |       | |   |   `-ArraySubscriptExpr 0x1221166b0 <col:45, col:52> 'char' lvalue
|   |         |       | |   |     |-ImplicitCastExpr 0x122116698 <col:45> 'char *' <LValueToRValue>
|   |         |       | |   |     | `-DeclRefExpr 0x1221161f0 <col:45> 'char *' lvalue ParmVar 0x1220facd8 'ptr' 'char *'
|   |         |       | |   |     `-BinaryOperator 0x122116678 <col:49, col:51> 'int' '-'
|   |         |       | |   |       |-ImplicitCastExpr 0x122116660 <col:49> 'int' <LValueToRValue>
|   |         |       | |   |       | `-DeclRefExpr 0x122116210 <col:49> 'int' lvalue Var 0x122114b28 'l' 'int'
|   |         |       | |   |       `-IntegerLiteral 0x122116230 <col:51> 'int' 1
|   |         |       | |   `-CharacterLiteral 0x1221162c0 <col:57> 'int' 13
|   |         |       | `-UnaryOperator 0x1221167c8 <col:65, col:74> '<dependent type>' contains-errors prefix '!' cannot overflow
|   |         |       |   `-CallExpr 0x1221167a8 <col:66, col:74> '<dependent type>' contains-errors
|   |         |       |     `-CXXDependentScopeMemberExpr 0x122116760 <col:66, col:70> '<dependent type>' contains-errors lvalue ->eof
|   |         |       |       `-RecoveryExpr 0x122116740 <col:66> '<dependent type>' contains-errors lvalue
|   |         |       `-CallExpr 0x122116858 <line:35:25, col:51> 'int'
|   |         |         |-ImplicitCastExpr 0x122116840 <col:25> 'int (*)()' <FunctionToPointerDecay>
|   |         |         | `-DeclRefExpr 0x122116800 <col:25> 'int ()' Function 0x1221140b0 'CV_PARSE_ERROR_CPP' 'int ()'
|   |         |         `-ImplicitCastExpr 0x122116880 <col:45> 'char *' <ArrayToPointerDecay>
|   |         |           `-StringLiteral 0x122116820 <col:45> 'char[4]' lvalue "STR"
|   |         `-NullStmt 0x122118220 <line:39:17>
|   `-ReturnStmt 0x122118348 <line:42:9, col:16>
|     `-ImplicitCastExpr 0x122118330 <col:16> 'char *' <LValueToRValue>
|       `-DeclRefExpr 0x122118310 <col:16> 'char *' lvalue ParmVar 0x1220facd8 'ptr' 'char *'
`-FunctionDecl 0x122115df0 <line:33:34> col:34 implicit used strlen 'unsigned long (const char *)' extern
  |-ParmVarDecl 0x122115ef0 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x122115e98 <<invalid sloc>> Implicit 902
