TranslationUnitDecl 0x145055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1450564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x145055bd0 '__int128'
|-TypedefDecl 0x145056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x145055bf0 'unsigned __int128'
|-TypedefDecl 0x14580be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x14580bc00 'struct __NSConstantString_tag'
|   `-Record 0x145056580 '__NSConstantString_tag'
|-TypedefDecl 0x14580be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x145055d90 '__SVInt8_t'
|-TypedefDecl 0x14580bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x145055db0 '__SVInt16_t'
|-TypedefDecl 0x14580bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x145055dd0 '__SVInt32_t'
|-TypedefDecl 0x14580bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x145055df0 '__SVInt64_t'
|-TypedefDecl 0x14580c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x145055e10 '__SVUint8_t'
|-TypedefDecl 0x14580c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x145055e30 '__SVUint16_t'
|-TypedefDecl 0x14580c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x145055e50 '__SVUint32_t'
|-TypedefDecl 0x14580c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x145055e70 '__SVUint64_t'
|-TypedefDecl 0x14580c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x145055e90 '__SVFloat16_t'
|-TypedefDecl 0x14580c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x145055eb0 '__SVFloat32_t'
|-TypedefDecl 0x14580c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x145055ed0 '__SVFloat64_t'
|-TypedefDecl 0x14580c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x145055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x14580c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x145055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x14580c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x145055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x14580c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x145055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x14580c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x145055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x14580c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x145055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x14580c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x145055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x14580c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x145055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x14580c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x145055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x14580c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x145056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x14580c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x145056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x14580c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x145056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x14580c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x145056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x14580c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x145056090 '__clang_svint8x3_t'
|-TypedefDecl 0x14580c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1450560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x14580c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1450560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x14580c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1450560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x14580c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x145056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x14580ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x145056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x14580cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x145056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x14580cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x145056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x14580cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x145056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x14580d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1450561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x14580d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1450561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x14580d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1450561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x14580d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x145056210 '__clang_svint8x4_t'
|-TypedefDecl 0x14580d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x145056230 '__clang_svint16x4_t'
|-TypedefDecl 0x14580d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x145056250 '__clang_svint32x4_t'
|-TypedefDecl 0x14580d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x145056270 '__clang_svint64x4_t'
|-TypedefDecl 0x14580d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x145056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x14580d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1450562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x14580d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1450562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x14580d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1450562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x14580d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x145056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x14580d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x145056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x14580d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x145056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x14580d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x145056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x14580da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x145056390 '__SVBool_t'
|-TypedefDecl 0x14580da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1450563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x14580dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1450563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x14580db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1450563f0 '__SVCount_t'
|-TypedefDecl 0x14580dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x14580dbb0 'char *'
|   `-BuiltinType 0x1450556b0 'char'
|-TypedefDecl 0x14580dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x14580dbb0 'char *'
|   `-BuiltinType 0x1450556b0 'char'
`-FunctionDecl 0x14580df18 <dataset_diviso_filec/func22183_vuln.c:1:1, line:88:1> line:1:1 invalid pimv1_print 'int (int *, const char *, int)'
  |-ParmVarDecl 0x14580dd28 <col:13, col:33> col:33 invalid ndo 'int *'
  |-ParmVarDecl 0x14580dda8 <line:2:13, col:36> col:36 used bp 'const char *' register
  |-ParmVarDecl 0x14580de28 <col:40, col:55> col:55 invalid len 'int' register
  `-CompoundStmt 0x14582d480 <line:3:1, line:88:1>
    |-DeclStmt 0x14580e058 <line:4:2, col:27>
    | `-VarDecl 0x14580dff0 <col:2, col:25> col:25 used ep 'const char *' register
    |-DeclStmt 0x14580e0e8 <line:5:2, col:22>
    | `-VarDecl 0x14580e080 <col:2, col:18> col:18 used type 'char' register
    |-BinaryOperator 0x14580e1c8 <line:7:2, col:28> 'const char *' contains-errors '='
    | |-DeclRefExpr 0x14580e100 <col:2> 'const char *' lvalue Var 0x14580dff0 'ep' 'const char *'
    | `-CStyleCastExpr 0x14580e1a0 <col:7, col:28> 'const char *' contains-errors <Dependent>
    |   `-CXXDependentScopeMemberExpr 0x14580e140 <col:23, col:28> '<dependent type>' contains-errors lvalue ->ndo_snapend
    |     `-RecoveryExpr 0x14580e120 <col:23> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x14580e288 <line:8:2, line:9:3>
    | |-BinaryOperator 0x14580e258 <line:8:6, col:12> 'int' '>='
    | | |-ImplicitCastExpr 0x14580e228 <col:6> 'const char *' <LValueToRValue>
    | | | `-DeclRefExpr 0x14580e1e8 <col:6> 'const char *' lvalue ParmVar 0x14580dda8 'bp' 'const char *'
    | | `-ImplicitCastExpr 0x14580e240 <col:12> 'const char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x14580e208 <col:12> 'const char *' lvalue Var 0x14580dff0 'ep' 'const char *'
    | `-ReturnStmt 0x14580e278 <line:9:3>
    |-CallExpr 0x1458284e8 <line:11:2, col:17> 'int'
    | |-ImplicitCastExpr 0x1458284d0 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x145828400 <col:2> 'int ()' Function 0x14580e348 'ND_TCHECK' 'int ()'
    | `-ImplicitCastExpr 0x145828528 <col:12, col:16> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x145828510 <col:12, col:16> 'char' <LValueToRValue>
    |     `-ArraySubscriptExpr 0x145828478 <col:12, col:16> 'const char' lvalue
    |       |-ImplicitCastExpr 0x145828460 <col:12> 'const char *' <LValueToRValue>
    |       | `-DeclRefExpr 0x145828420 <col:12> 'const char *' lvalue ParmVar 0x14580dda8 'bp' 'const char *'
    |       `-IntegerLiteral 0x145828440 <col:15> 'int' 1
    |-BinaryOperator 0x1458285f0 <line:12:2, col:13> 'char' '='
    | |-DeclRefExpr 0x145828540 <col:2> 'char' lvalue Var 0x14580e080 'type' 'char'
    | `-ImplicitCastExpr 0x1458285d8 <col:9, col:13> 'char' <LValueToRValue>
    |   `-ArraySubscriptExpr 0x1458285b8 <col:9, col:13> 'const char' lvalue
    |     |-ImplicitCastExpr 0x1458285a0 <col:9> 'const char *' <LValueToRValue>
    |     | `-DeclRefExpr 0x145828560 <col:9> 'const char *' lvalue ParmVar 0x14580dda8 'bp' 'const char *'
    |     `-IntegerLiteral 0x145828580 <col:12> 'int' 1
    |-CallExpr 0x145828810 <line:14:2, col:29> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x1458286f0 <col:2> 'int ()' Function 0x145828638 'ND_PRINT' 'int ()'
    | `-ParenExpr 0x1458287f0 <col:11, col:28> 'char' contains-errors
    |   `-BinaryOperator 0x1458287d0 <col:12, col:24> 'char' contains-errors ','
    |     |-BinaryOperator 0x145828790 <col:12, col:17> 'char[4]' contains-errors ','
    |     | |-RecoveryExpr 0x145828710 <col:12> '<dependent type>' contains-errors lvalue
    |     | `-StringLiteral 0x145828770 <col:17> 'char[4]' lvalue "STR"
    |     `-DeclRefExpr 0x1458287b0 <col:24> 'char' lvalue Var 0x14580e080 'type' 'char'
    |-SwitchStmt 0x145828888 <line:15:2, line:79:2>
    | |-ImplicitCastExpr 0x145828870 <line:15:10> 'int' <IntegralCast>
    | | `-ImplicitCastExpr 0x145828858 <col:10> 'char' <LValueToRValue>
    | |   `-DeclRefExpr 0x145828838 <col:10> 'char' lvalue Var 0x14580e080 'type' 'char'
    | `-CompoundStmt 0x14582ce38 <col:16, line:79:2>
    |   |-IfStmt 0x1458291b0 <line:17:3, line:32:3>
    |   | |-CallExpr 0x145828a58 <line:17:7, col:21> 'int'
    |   | | |-ImplicitCastExpr 0x145828a40 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |   | | | `-DeclRefExpr 0x1458289a8 <col:7> 'int ()' Function 0x1458288f0 'ND_TTEST' 'int ()'
    |   | | `-ImplicitCastExpr 0x145828a98 <col:16, col:20> 'int' <IntegralCast>
    |   | |   `-ImplicitCastExpr 0x145828a80 <col:16, col:20> 'char' <LValueToRValue>
    |   | |     `-ArraySubscriptExpr 0x145828a20 <col:16, col:20> 'const char' lvalue
    |   | |       |-ImplicitCastExpr 0x145828a08 <col:16> 'const char *' <LValueToRValue>
    |   | |       | `-DeclRefExpr 0x1458289c8 <col:16> 'const char *' lvalue ParmVar 0x14580dda8 'bp' 'const char *'
    |   | |       `-IntegerLiteral 0x1458289e8 <col:19> 'int' 8
    |   | `-CompoundStmt 0x145829198 <col:24, line:32:3>
    |   |   `-SwitchStmt 0x145828b98 <line:18:4, line:31:4>
    |   |     |-BinaryOperator 0x145828b78 <line:18:12, col:21> 'int' '>>'
    |   |     | |-ImplicitCastExpr 0x145828b60 <col:12, col:16> 'int' <IntegralCast>
    |   |     | | `-ImplicitCastExpr 0x145828b48 <col:12, col:16> 'char' <LValueToRValue>
    |   |     | |   `-ArraySubscriptExpr 0x145828b08 <col:12, col:16> 'const char' lvalue
    |   |     | |     |-ImplicitCastExpr 0x145828af0 <col:12> 'const char *' <LValueToRValue>
    |   |     | |     | `-DeclRefExpr 0x145828ab0 <col:12> 'const char *' lvalue ParmVar 0x14580dda8 'bp' 'const char *'
    |   |     | |     `-IntegerLiteral 0x145828ad0 <col:15> 'int' 8
    |   |     | `-IntegerLiteral 0x145828b28 <col:21> 'int' 4
    |   |     `-CompoundStmt 0x145829148 <col:24, line:31:4>
    |   |       |-CaseStmt 0x145828bf8 <line:19:4, line:20:26>
    |   |       | |-ConstantExpr 0x145828be0 <line:19:9> 'int'
    |   |       | | `-IntegerLiteral 0x145828bc0 <col:9> 'int' 0
    |   |       | `-CallExpr 0x145828cc0 <line:20:5, col:26> '<dependent type>' contains-errors
    |   |       |   |-DeclRefExpr 0x145828c20 <col:5> 'int ()' Function 0x145828638 'ND_PRINT' 'int ()'
    |   |       |   `-ParenExpr 0x145828ca0 <col:14, col:25> 'char[4]' contains-errors
    |   |       |     `-BinaryOperator 0x145828c80 <col:15, col:20> 'char[4]' contains-errors ','
    |   |       |       |-RecoveryExpr 0x145828c40 <col:15> '<dependent type>' contains-errors lvalue
    |   |       |       `-StringLiteral 0x145828c60 <col:20> 'char[4]' lvalue "STR"
    |   |       |-BreakStmt 0x145828ce8 <line:21:5>
    |   |       |-CaseStmt 0x145828d28 <line:22:4, line:23:26>
    |   |       | |-ConstantExpr 0x145828d10 <line:22:9> 'int'
    |   |       | | `-IntegerLiteral 0x145828cf0 <col:9> 'int' 1
    |   |       | `-CallExpr 0x145828df0 <line:23:5, col:26> '<dependent type>' contains-errors
    |   |       |   |-DeclRefExpr 0x145828d50 <col:5> 'int ()' Function 0x145828638 'ND_PRINT' 'int ()'
    |   |       |   `-ParenExpr 0x145828dd0 <col:14, col:25> 'char[4]' contains-errors
    |   |       |     `-BinaryOperator 0x145828db0 <col:15, col:20> 'char[4]' contains-errors ','
    |   |       |       |-RecoveryExpr 0x145828d70 <col:15> '<dependent type>' contains-errors lvalue
    |   |       |       `-StringLiteral 0x145828d90 <col:20> 'char[4]' lvalue "STR"
    |   |       |-BreakStmt 0x145828e18 <line:24:5>
    |   |       |-CaseStmt 0x145828e58 <line:25:4, line:26:26>
    |   |       | |-ConstantExpr 0x145828e40 <line:25:9> 'int'
    |   |       | | `-IntegerLiteral 0x145828e20 <col:9> 'int' 2
    |   |       | `-CallExpr 0x145828f20 <line:26:5, col:26> '<dependent type>' contains-errors
    |   |       |   |-DeclRefExpr 0x145828e80 <col:5> 'int ()' Function 0x145828638 'ND_PRINT' 'int ()'
    |   |       |   `-ParenExpr 0x145828f00 <col:14, col:25> 'char[4]' contains-errors
    |   |       |     `-BinaryOperator 0x145828ee0 <col:15, col:20> 'char[4]' contains-errors ','
    |   |       |       |-RecoveryExpr 0x145828ea0 <col:15> '<dependent type>' contains-errors lvalue
    |   |       |       `-StringLiteral 0x145828ec0 <col:20> 'char[4]' lvalue "STR"
    |   |       |-BreakStmt 0x145828f48 <line:27:5>
    |   |       |-DefaultStmt 0x145829120 <line:28:4, line:29:38>
    |   |       | `-CallExpr 0x1458290f8 <col:5, col:38> '<dependent type>' contains-errors
    |   |       |   |-DeclRefExpr 0x145828f50 <col:5> 'int ()' Function 0x145828638 'ND_PRINT' 'int ()'
    |   |       |   `-ParenExpr 0x1458290d8 <col:14, col:37> 'int' contains-errors
    |   |       |     `-BinaryOperator 0x1458290b8 <col:15, col:36> 'int' contains-errors ','
    |   |       |       |-BinaryOperator 0x145828fb0 <col:15, col:20> 'char[4]' contains-errors ','
    |   |       |       | |-RecoveryExpr 0x145828f70 <col:15> '<dependent type>' contains-errors lvalue
    |   |       |       | `-StringLiteral 0x145828f90 <col:20> 'char[4]' lvalue "STR"
    |   |       |       `-BinaryOperator 0x145829098 <col:27, col:36> 'int' '>>'
    |   |       |         |-ImplicitCastExpr 0x145829080 <col:27, col:31> 'int' <IntegralCast>
    |   |       |         | `-ImplicitCastExpr 0x145829068 <col:27, col:31> 'char' <LValueToRValue>
    |   |       |         |   `-ArraySubscriptExpr 0x145829028 <col:27, col:31> 'const char' lvalue
    |   |       |         |     |-ImplicitCastExpr 0x145829010 <col:27> 'const char *' <LValueToRValue>
    |   |       |         |     | `-DeclRefExpr 0x145828fd0 <col:27> 'const char *' lvalue ParmVar 0x14580dda8 'bp' 'const char *'
    |   |       |         |     `-IntegerLiteral 0x145828ff0 <col:30> 'int' 8
    |   |       |         `-IntegerLiteral 0x145829048 <col:36> 'int' 4
    |   |       `-BreakStmt 0x145829140 <line:30:5>
    |   |-IfStmt 0x14582a740 <line:33:3, line:38:3>
    |   | |-CXXDependentScopeMemberExpr 0x1458291f0 <line:33:7, col:12> '<dependent type>' contains-errors lvalue ->ndo_vflag
    |   | | `-RecoveryExpr 0x1458291d0 <col:7> '<dependent type>' contains-errors lvalue
    |   | `-CompoundStmt 0x14582a710 <col:23, line:38:3>
    |   |   |-CallExpr 0x14582a200 <line:34:4, col:23> 'int'
    |   |   | |-ImplicitCastExpr 0x1458293d0 <col:4> 'int (*)()' <FunctionToPointerDecay>
    |   |   | | `-DeclRefExpr 0x145829318 <col:4> 'int ()' Function 0x145829260 'ND_TCHECK2' 'int ()'
    |   |   | |-ImplicitCastExpr 0x14582a248 <col:15, col:20> 'int' <IntegralCast>
    |   |   | | `-ImplicitCastExpr 0x14582a230 <col:15, col:20> 'char' <LValueToRValue>
    |   |   | |   `-ArraySubscriptExpr 0x145829390 <col:15, col:20> 'const char' lvalue
    |   |   | |     |-ImplicitCastExpr 0x145829378 <col:15> 'const char *' <LValueToRValue>
    |   |   | |     | `-DeclRefExpr 0x145829338 <col:15> 'const char *' lvalue ParmVar 0x14580dda8 'bp' 'const char *'
    |   |   | |     `-IntegerLiteral 0x145829358 <col:18> 'int' 10
    |   |   | `-IntegerLiteral 0x1458293b0 <col:22> 'int' 2
    |   |   |-CallExpr 0x14582a300 <line:35:4, col:25> '<dependent type>' contains-errors
    |   |   | |-DeclRefExpr 0x14582a260 <col:4> 'int ()' Function 0x145828638 'ND_PRINT' 'int ()'
    |   |   | `-ParenExpr 0x14582a2e0 <col:13, col:24> 'char[4]' contains-errors
    |   |   |   `-BinaryOperator 0x14582a2c0 <col:14, col:19> 'char[4]' contains-errors ','
    |   |   |     |-RecoveryExpr 0x14582a280 <col:14> '<dependent type>' contains-errors lvalue
    |   |   |     `-StringLiteral 0x14582a2a0 <col:19> 'char[4]' lvalue "STR"
    |   |   |-CallExpr 0x14582a618 <line:36:4, col:53> '<dependent type>' contains-errors
    |   |   | |-DeclRefExpr 0x14582a408 <col:4> 'int ()' Function 0x14582a350 'unsigned_relts_print' 'int ()'
    |   |   | |-RecoveryExpr 0x14582a428 <col:25> '<dependent type>' contains-errors lvalue
    |   |   | `-CallExpr 0x14582a5f0 <col:30, col:52> 'int'
    |   |   |   |-ImplicitCastExpr 0x14582a5d8 <col:30> 'int (*)()' <FunctionToPointerDecay>
    |   |   |   | `-DeclRefExpr 0x14582a528 <col:30> 'int ()' Function 0x14582a470 'EXTRACT_16BITS' 'int ()'
    |   |   |   `-UnaryOperator 0x14582a5c0 <col:45, col:51> 'const char *' prefix '&' cannot overflow
    |   |   |     `-ArraySubscriptExpr 0x14582a5a0 <col:46, col:51> 'const char' lvalue
    |   |   |       |-ImplicitCastExpr 0x14582a588 <col:46> 'const char *' <LValueToRValue>
    |   |   |       | `-DeclRefExpr 0x14582a548 <col:46> 'const char *' lvalue ParmVar 0x14580dda8 'bp' 'const char *'
    |   |   |       `-IntegerLiteral 0x14582a568 <col:49> 'int' 10
    |   |   `-CallExpr 0x14582a6e8 <line:37:4, col:25> '<dependent type>' contains-errors
    |   |     |-DeclRefExpr 0x14582a648 <col:4> 'int ()' Function 0x145828638 'ND_PRINT' 'int ()'
    |   |     `-ParenExpr 0x14582a6c8 <col:13, col:24> 'char[4]' contains-errors
    |   |       `-BinaryOperator 0x14582a6a8 <col:14, col:19> 'char[4]' contains-errors ','
    |   |         |-RecoveryExpr 0x14582a668 <col:14> '<dependent type>' contains-errors lvalue
    |   |         `-StringLiteral 0x14582a688 <col:19> 'char[4]' lvalue "STR"
    |   |-BreakStmt 0x14582a760 <line:39:3>
    |   |-CallExpr 0x14582a850 <line:42:3, col:23> 'int'
    |   | |-ImplicitCastExpr 0x14582a838 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x14582a780 <col:3> 'int ()' Function 0x145829260 'ND_TCHECK2' 'int ()'
    |   | |-ImplicitCastExpr 0x14582a898 <col:14, col:18> 'int' <IntegralCast>
    |   | | `-ImplicitCastExpr 0x14582a880 <col:14, col:18> 'char' <LValueToRValue>
    |   | |   `-ArraySubscriptExpr 0x14582a7f8 <col:14, col:18> 'const char' lvalue
    |   | |     |-ImplicitCastExpr 0x14582a7e0 <col:14> 'const char *' <LValueToRValue>
    |   | |     | `-DeclRefExpr 0x14582a7a0 <col:14> 'const char *' lvalue ParmVar 0x14580dda8 'bp' 'const char *'
    |   | |     `-IntegerLiteral 0x14582a7c0 <col:17> 'int' 8
    |   | `-IntegerLiteral 0x14582a818 <col:21> 'int' 20
    |   |-CallExpr 0x14582ac70 <line:43:3, line:44:35> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x14582a8b0 <line:43:3> 'int ()' Function 0x145828638 'ND_PRINT' 'int ()'
    |   | `-ParenExpr 0x14582ac50 <col:12, line:44:34> '<dependent type>' contains-errors
    |   |   `-BinaryOperator 0x14582ac30 <line:43:13, line:44:33> '<dependent type>' contains-errors ','
    |   |     |-BinaryOperator 0x14582ab10 <line:43:13, col:51> '<dependent type>' contains-errors ','
    |   |     | |-BinaryOperator 0x14582a910 <col:13, col:18> 'char[4]' contains-errors ','
    |   |     | | |-RecoveryExpr 0x14582a8d0 <col:13> '<dependent type>' contains-errors lvalue
    |   |     | | `-StringLiteral 0x14582a8f0 <col:18> 'char[4]' lvalue "STR"
    |   |     | `-CallExpr 0x14582aae0 <col:25, col:51> '<dependent type>' contains-errors
    |   |     |   |-DeclRefExpr 0x14582aa10 <col:25> 'int ()' Function 0x14582a958 'ipaddr_string' 'int ()'
    |   |     |   |-RecoveryExpr 0x14582aa30 <col:39> '<dependent type>' contains-errors lvalue
    |   |     |   `-UnaryOperator 0x14582aac8 <col:44, col:50> 'const char *' prefix '&' cannot overflow
    |   |     |     `-ArraySubscriptExpr 0x14582aaa8 <col:45, col:50> 'const char' lvalue
    |   |     |       |-ImplicitCastExpr 0x14582aa90 <col:45> 'const char *' <LValueToRValue>
    |   |     |       | `-DeclRefExpr 0x14582aa50 <col:45> 'const char *' lvalue ParmVar 0x14580dda8 'bp' 'const char *'
    |   |     |       `-IntegerLiteral 0x14582aa70 <col:48> 'int' 20
    |   |     `-CallExpr 0x14582ac00 <line:44:7, col:33> '<dependent type>' contains-errors
    |   |       |-DeclRefExpr 0x14582ab30 <col:7> 'int ()' Function 0x14582a958 'ipaddr_string' 'int ()'
    |   |       |-RecoveryExpr 0x14582ab50 <col:21> '<dependent type>' contains-errors lvalue
    |   |       `-UnaryOperator 0x14582abe8 <col:26, col:32> 'const char *' prefix '&' cannot overflow
    |   |         `-ArraySubscriptExpr 0x14582abc8 <col:27, col:32> 'const char' lvalue
    |   |           |-ImplicitCastExpr 0x14582abb0 <col:27> 'const char *' <LValueToRValue>
    |   |           | `-DeclRefExpr 0x14582ab70 <col:27> 'const char *' lvalue ParmVar 0x14580dda8 'bp' 'const char *'
    |   |           `-IntegerLiteral 0x14582ab90 <col:30> 'int' 24
    |   |-BreakStmt 0x14582ac98 <line:45:3>
    |   |-CallExpr 0x14582b128 <line:48:3, line:49:35> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x14582ae48 <line:48:3> 'int ()' Function 0x145828638 'ND_PRINT' 'int ()'
    |   | `-ParenExpr 0x14582b108 <col:12, line:49:34> '<dependent type>' contains-errors
    |   |   `-BinaryOperator 0x14582b0e8 <line:48:13, line:49:33> '<dependent type>' contains-errors ','
    |   |     |-BinaryOperator 0x14582afc8 <line:48:13, col:50> '<dependent type>' contains-errors ','
    |   |     | |-BinaryOperator 0x14582aea8 <col:13, col:18> 'char[4]' contains-errors ','
    |   |     | | |-RecoveryExpr 0x14582ae68 <col:13> '<dependent type>' contains-errors lvalue
    |   |     | | `-StringLiteral 0x14582ae88 <col:18> 'char[4]' lvalue "STR"
    |   |     | `-CallExpr 0x14582af98 <col:25, col:50> '<dependent type>' contains-errors
    |   |     |   |-DeclRefExpr 0x14582aec8 <col:25> 'int ()' Function 0x14582a958 'ipaddr_string' 'int ()'
    |   |     |   |-RecoveryExpr 0x14582aee8 <col:39> '<dependent type>' contains-errors lvalue
    |   |     |   `-UnaryOperator 0x14582af80 <col:44, col:49> 'const char *' prefix '&' cannot overflow
    |   |     |     `-ArraySubscriptExpr 0x14582af60 <col:45, col:49> 'const char' lvalue
    |   |     |       |-ImplicitCastExpr 0x14582af48 <col:45> 'const char *' <LValueToRValue>
    |   |     |       | `-DeclRefExpr 0x14582af08 <col:45> 'const char *' lvalue ParmVar 0x14580dda8 'bp' 'const char *'
    |   |     |       `-IntegerLiteral 0x14582af28 <col:48> 'int' 8
    |   |     `-CallExpr 0x14582b0b8 <line:49:7, col:33> '<dependent type>' contains-errors
    |   |       |-DeclRefExpr 0x14582afe8 <col:7> 'int ()' Function 0x14582a958 'ipaddr_string' 'int ()'
    |   |       |-RecoveryExpr 0x14582b008 <col:21> '<dependent type>' contains-errors lvalue
    |   |       `-UnaryOperator 0x14582b0a0 <col:26, col:32> 'const char *' prefix '&' cannot overflow
    |   |         `-ArraySubscriptExpr 0x14582b080 <col:27, col:32> 'const char' lvalue
    |   |           |-ImplicitCastExpr 0x14582b068 <col:27> 'const char *' <LValueToRValue>
    |   |           | `-DeclRefExpr 0x14582b028 <col:27> 'const char *' lvalue ParmVar 0x14580dda8 'bp' 'const char *'
    |   |           `-IntegerLiteral 0x14582b048 <col:30> 'int' 12
    |   |-BreakStmt 0x14582b150 <line:50:3>
    |   |-IfStmt 0x14582bc88 <line:52:3, line:59:3>
    |   | |-CXXDependentScopeMemberExpr 0x14582b178 <line:52:7, col:12> '<dependent type>' contains-errors lvalue ->ndo_vflag
    |   | | `-RecoveryExpr 0x14582b158 <col:7> '<dependent type>' contains-errors lvalue
    |   | `-CompoundStmt 0x14582bc50 <col:23, line:59:3>
    |   |   |-CallExpr 0x14582b290 <line:53:4, col:24> 'int'
    |   |   | |-ImplicitCastExpr 0x14582b278 <col:4> 'int (*)()' <FunctionToPointerDecay>
    |   |   | | `-DeclRefExpr 0x14582b1c0 <col:4> 'int ()' Function 0x145829260 'ND_TCHECK2' 'int ()'
    |   |   | |-ImplicitCastExpr 0x14582b2d8 <col:15, col:20> 'int' <IntegralCast>
    |   |   | | `-ImplicitCastExpr 0x14582b2c0 <col:15, col:20> 'char' <LValueToRValue>
    |   |   | |   `-ArraySubscriptExpr 0x14582b238 <col:15, col:20> 'const char' lvalue
    |   |   | |     |-ImplicitCastExpr 0x14582b220 <col:15> 'const char *' <LValueToRValue>
    |   |   | |     | `-DeclRefExpr 0x14582b1e0 <col:15> 'const char *' lvalue ParmVar 0x14580dda8 'bp' 'const char *'
    |   |   | |     `-IntegerLiteral 0x14582b200 <col:18> 'int' 22
    |   |   | `-IntegerLiteral 0x14582b258 <col:23> 'int' 2
    |   |   |-CallExpr 0x14582b4b0 <line:54:4, col:53> '<dependent type>' contains-errors
    |   |   | |-DeclRefExpr 0x14582b2f0 <col:4> 'int ()' Function 0x145828638 'ND_PRINT' 'int ()'
    |   |   | `-ParenExpr 0x14582b490 <col:13, col:52> '<dependent type>' contains-errors
    |   |   |   `-BinaryOperator 0x14582b470 <col:14, col:51> '<dependent type>' contains-errors ','
    |   |   |     |-BinaryOperator 0x14582b350 <col:14, col:19> 'char[4]' contains-errors ','
    |   |   |     | |-RecoveryExpr 0x14582b310 <col:14> '<dependent type>' contains-errors lvalue
    |   |   |     | `-StringLiteral 0x14582b330 <col:19> 'char[4]' lvalue "STR"
    |   |   |     `-CallExpr 0x14582b440 <col:26, col:51> '<dependent type>' contains-errors
    |   |   |       |-DeclRefExpr 0x14582b370 <col:26> 'int ()' Function 0x14582a958 'ipaddr_string' 'int ()'
    |   |   |       |-RecoveryExpr 0x14582b390 <col:40> '<dependent type>' contains-errors lvalue
    |   |   |       `-UnaryOperator 0x14582b428 <col:45, col:50> 'const char *' prefix '&' cannot overflow
    |   |   |         `-ArraySubscriptExpr 0x14582b408 <col:46, col:50> 'const char' lvalue
    |   |   |           |-ImplicitCastExpr 0x14582b3f0 <col:46> 'const char *' <LValueToRValue>
    |   |   |           | `-DeclRefExpr 0x14582b3b0 <col:46> 'const char *' lvalue ParmVar 0x14580dda8 'bp' 'const char *'
    |   |   |           `-IntegerLiteral 0x14582b3d0 <col:49> 'int' 8
    |   |   |-IfStmt 0x14582b8e8 <line:55:4, line:56:55>
    |   |   | |-BinaryOperator 0x14582b6e0 <line:55:8, col:35> 'int' '!='
    |   |   | | |-ImplicitCastExpr 0x14582b6c8 <col:8, col:30> 'unsigned int' <IntegralCast>
    |   |   | | | `-CallExpr 0x14582b680 <col:8, col:30> 'int'
    |   |   | | |   |-ImplicitCastExpr 0x14582b668 <col:8> 'int (*)()' <FunctionToPointerDecay>
    |   |   | | |   | `-DeclRefExpr 0x14582b5b8 <col:8> 'int ()' Function 0x14582b500 'EXTRACT_32BITS' 'int ()'
    |   |   | | |   `-UnaryOperator 0x14582b650 <col:23, col:29> 'const char *' prefix '&' cannot overflow
    |   |   | | |     `-ArraySubscriptExpr 0x14582b630 <col:24, col:29> 'const char' lvalue
    |   |   | | |       |-ImplicitCastExpr 0x14582b618 <col:24> 'const char *' <LValueToRValue>
    |   |   | | |       | `-DeclRefExpr 0x14582b5d8 <col:24> 'const char *' lvalue ParmVar 0x14580dda8 'bp' 'const char *'
    |   |   | | |       `-IntegerLiteral 0x14582b5f8 <col:27> 'int' 12
    |   |   | | `-IntegerLiteral 0x14582b6a8 <col:35> 'unsigned int' 4294967295
    |   |   | `-CallExpr 0x14582b8c0 <line:56:5, col:55> '<dependent type>' contains-errors
    |   |   |   |-DeclRefExpr 0x14582b700 <col:5> 'int ()' Function 0x145828638 'ND_PRINT' 'int ()'
    |   |   |   `-ParenExpr 0x14582b8a0 <col:14, col:54> '<dependent type>' contains-errors
    |   |   |     `-BinaryOperator 0x14582b880 <col:15, col:53> '<dependent type>' contains-errors ','
    |   |   |       |-BinaryOperator 0x14582b760 <col:15, col:20> 'char[4]' contains-errors ','
    |   |   |       | |-RecoveryExpr 0x14582b720 <col:15> '<dependent type>' contains-errors lvalue
    |   |   |       | `-StringLiteral 0x14582b740 <col:20> 'char[4]' lvalue "STR"
    |   |   |       `-CallExpr 0x14582b850 <col:27, col:53> '<dependent type>' contains-errors
    |   |   |         |-DeclRefExpr 0x14582b780 <col:27> 'int ()' Function 0x14582a958 'ipaddr_string' 'int ()'
    |   |   |         |-RecoveryExpr 0x14582b7a0 <col:41> '<dependent type>' contains-errors lvalue
    |   |   |         `-UnaryOperator 0x14582b838 <col:46, col:52> 'const char *' prefix '&' cannot overflow
    |   |   |           `-ArraySubscriptExpr 0x14582b818 <col:47, col:52> 'const char' lvalue
    |   |   |             |-ImplicitCastExpr 0x14582b800 <col:47> 'const char *' <LValueToRValue>
    |   |   |             | `-DeclRefExpr 0x14582b7c0 <col:47> 'const char *' lvalue ParmVar 0x14580dda8 'bp' 'const char *'
    |   |   |             `-IntegerLiteral 0x14582b7e0 <col:50> 'int' 12
    |   |   |-CallExpr 0x14582bac8 <line:57:4, col:54> '<dependent type>' contains-errors
    |   |   | |-DeclRefExpr 0x14582b908 <col:4> 'int ()' Function 0x145828638 'ND_PRINT' 'int ()'
    |   |   | `-ParenExpr 0x14582baa8 <col:13, col:53> '<dependent type>' contains-errors
    |   |   |   `-BinaryOperator 0x14582ba88 <col:14, col:52> '<dependent type>' contains-errors ','
    |   |   |     |-BinaryOperator 0x14582b968 <col:14, col:19> 'char[4]' contains-errors ','
    |   |   |     | |-RecoveryExpr 0x14582b928 <col:14> '<dependent type>' contains-errors lvalue
    |   |   |     | `-StringLiteral 0x14582b948 <col:19> 'char[4]' lvalue "STR"
    |   |   |     `-CallExpr 0x14582ba58 <col:26, col:52> '<dependent type>' contains-errors
    |   |   |       |-DeclRefExpr 0x14582b988 <col:26> 'int ()' Function 0x14582a958 'ipaddr_string' 'int ()'
    |   |   |       |-RecoveryExpr 0x14582b9a8 <col:40> '<dependent type>' contains-errors lvalue
    |   |   |       `-UnaryOperator 0x14582ba40 <col:45, col:51> 'const char *' prefix '&' cannot overflow
    |   |   |         `-ArraySubscriptExpr 0x14582ba20 <col:46, col:51> 'const char' lvalue
    |   |   |           |-ImplicitCastExpr 0x14582ba08 <col:46> 'const char *' <LValueToRValue>
    |   |   |           | `-DeclRefExpr 0x14582b9c8 <col:46> 'const char *' lvalue ParmVar 0x14580dda8 'bp' 'const char *'
    |   |   |           `-IntegerLiteral 0x14582b9e8 <col:49> 'int' 16
    |   |   `-CallExpr 0x14582bc20 <line:58:4, col:53> '<dependent type>' contains-errors
    |   |     |-DeclRefExpr 0x14582baf0 <col:4> 'int ()' Function 0x14582a350 'unsigned_relts_print' 'int ()'
    |   |     |-RecoveryExpr 0x14582bb10 <col:25> '<dependent type>' contains-errors lvalue
    |   |     `-CallExpr 0x14582bbf8 <col:30, col:52> 'int'
    |   |       |-ImplicitCastExpr 0x14582bbe0 <col:30> 'int (*)()' <FunctionToPointerDecay>
    |   |       | `-DeclRefExpr 0x14582bb30 <col:30> 'int ()' Function 0x14582a470 'EXTRACT_16BITS' 'int ()'
    |   |       `-UnaryOperator 0x14582bbc8 <col:45, col:51> 'const char *' prefix '&' cannot overflow
    |   |         `-ArraySubscriptExpr 0x14582bba8 <col:46, col:51> 'const char' lvalue
    |   |           |-ImplicitCastExpr 0x14582bb90 <col:46> 'const char *' <LValueToRValue>
    |   |           | `-DeclRefExpr 0x14582bb50 <col:46> 'const char *' lvalue ParmVar 0x14580dda8 'bp' 'const char *'
    |   |           `-IntegerLiteral 0x14582bb70 <col:49> 'int' 22
    |   |-BreakStmt 0x14582bca8 <line:60:3>
    |   |-CallExpr 0x14582c080 <line:63:3, line:64:34> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x14582bda0 <line:63:3> 'int ()' Function 0x145828638 'ND_PRINT' 'int ()'
    |   | `-ParenExpr 0x14582c060 <col:12, line:64:33> '<dependent type>' contains-errors
    |   |   `-BinaryOperator 0x14582c040 <line:63:13, line:64:32> '<dependent type>' contains-errors ','
    |   |     |-BinaryOperator 0x14582bf20 <line:63:13, col:51> '<dependent type>' contains-errors ','
    |   |     | |-BinaryOperator 0x14582be00 <col:13, col:18> 'char[4]' contains-errors ','
    |   |     | | |-RecoveryExpr 0x14582bdc0 <col:13> '<dependent type>' contains-errors lvalue
    |   |     | | `-StringLiteral 0x14582bde0 <col:18> 'char[4]' lvalue "STR"
    |   |     | `-CallExpr 0x14582bef0 <col:25, col:51> '<dependent type>' contains-errors
    |   |     |   |-DeclRefExpr 0x14582be20 <col:25> 'int ()' Function 0x14582a958 'ipaddr_string' 'int ()'
    |   |     |   |-RecoveryExpr 0x14582be40 <col:39> '<dependent type>' contains-errors lvalue
    |   |     |   `-UnaryOperator 0x14582bed8 <col:44, col:50> 'const char *' prefix '&' cannot overflow
    |   |     |     `-ArraySubscriptExpr 0x14582beb8 <col:45, col:50> 'const char' lvalue
    |   |     |       |-ImplicitCastExpr 0x14582bea0 <col:45> 'const char *' <LValueToRValue>
    |   |     |       | `-DeclRefExpr 0x14582be60 <col:45> 'const char *' lvalue ParmVar 0x14580dda8 'bp' 'const char *'
    |   |     |       `-IntegerLiteral 0x14582be80 <col:48> 'int' 16
    |   |     `-CallExpr 0x14582c010 <line:64:7, col:32> '<dependent type>' contains-errors
    |   |       |-DeclRefExpr 0x14582bf40 <col:7> 'int ()' Function 0x14582a958 'ipaddr_string' 'int ()'
    |   |       |-RecoveryExpr 0x14582bf60 <col:21> '<dependent type>' contains-errors lvalue
    |   |       `-UnaryOperator 0x14582bff8 <col:26, col:31> 'const char *' prefix '&' cannot overflow
    |   |         `-ArraySubscriptExpr 0x14582bfd8 <col:27, col:31> 'const char' lvalue
    |   |           |-ImplicitCastExpr 0x14582bfc0 <col:27> 'const char *' <LValueToRValue>
    |   |           | `-DeclRefExpr 0x14582bf80 <col:27> 'const char *' lvalue ParmVar 0x14580dda8 'bp' 'const char *'
    |   |           `-IntegerLiteral 0x14582bfa0 <col:30> 'int' 8
    |   |-IfStmt 0x14582c5e8 <line:65:3, line:66:54>
    |   | |-BinaryOperator 0x14582c1d0 <line:65:7, col:34> 'int' '!='
    |   | | |-ImplicitCastExpr 0x14582c1b8 <col:7, col:29> 'unsigned int' <IntegralCast>
    |   | | | `-CallExpr 0x14582c170 <col:7, col:29> 'int'
    |   | | |   |-ImplicitCastExpr 0x14582c158 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |   | | |   | `-DeclRefExpr 0x14582c0a8 <col:7> 'int ()' Function 0x14582b500 'EXTRACT_32BITS' 'int ()'
    |   | | |   `-UnaryOperator 0x14582c140 <col:22, col:28> 'const char *' prefix '&' cannot overflow
    |   | | |     `-ArraySubscriptExpr 0x14582c120 <col:23, col:28> 'const char' lvalue
    |   | | |       |-ImplicitCastExpr 0x14582c108 <col:23> 'const char *' <LValueToRValue>
    |   | | |       | `-DeclRefExpr 0x14582c0c8 <col:23> 'const char *' lvalue ParmVar 0x14580dda8 'bp' 'const char *'
    |   | | |       `-IntegerLiteral 0x14582c0e8 <col:26> 'int' 12
    |   | | `-IntegerLiteral 0x14582c198 <col:34> 'unsigned int' 4294967295
    |   | `-CallExpr 0x14582c5c0 <line:66:4, col:54> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x14582c400 <col:4> 'int ()' Function 0x145828638 'ND_PRINT' 'int ()'
    |   |   `-ParenExpr 0x14582c5a0 <col:13, col:53> '<dependent type>' contains-errors
    |   |     `-BinaryOperator 0x14582c580 <col:14, col:52> '<dependent type>' contains-errors ','
    |   |       |-BinaryOperator 0x14582c460 <col:14, col:19> 'char[4]' contains-errors ','
    |   |       | |-RecoveryExpr 0x14582c420 <col:14> '<dependent type>' contains-errors lvalue
    |   |       | `-StringLiteral 0x14582c440 <col:19> 'char[4]' lvalue "STR"
    |   |       `-CallExpr 0x14582c550 <col:26, col:52> '<dependent type>' contains-errors
    |   |         |-DeclRefExpr 0x14582c480 <col:26> 'int ()' Function 0x14582a958 'ipaddr_string' 'int ()'
    |   |         |-RecoveryExpr 0x14582c4a0 <col:40> '<dependent type>' contains-errors lvalue
    |   |         `-UnaryOperator 0x14582c538 <col:45, col:51> 'const char *' prefix '&' cannot overflow
    |   |           `-ArraySubscriptExpr 0x14582c518 <col:46, col:51> 'const char' lvalue
    |   |             |-ImplicitCastExpr 0x14582c500 <col:46> 'const char *' <LValueToRValue>
    |   |             | `-DeclRefExpr 0x14582c4c0 <col:46> 'const char *' lvalue ParmVar 0x14580dda8 'bp' 'const char *'
    |   |             `-IntegerLiteral 0x14582c4e0 <col:49> 'int' 12
    |   |-CallExpr 0x14582c6d8 <line:67:3, col:23> 'int'
    |   | |-ImplicitCastExpr 0x14582c6c0 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x14582c608 <col:3> 'int ()' Function 0x145829260 'ND_TCHECK2' 'int ()'
    |   | |-ImplicitCastExpr 0x14582c720 <col:14, col:19> 'int' <IntegralCast>
    |   | | `-ImplicitCastExpr 0x14582c708 <col:14, col:19> 'char' <LValueToRValue>
    |   | |   `-ArraySubscriptExpr 0x14582c680 <col:14, col:19> 'const char' lvalue
    |   | |     |-ImplicitCastExpr 0x14582c668 <col:14> 'const char *' <LValueToRValue>
    |   | |     | `-DeclRefExpr 0x14582c628 <col:14> 'const char *' lvalue ParmVar 0x14580dda8 'bp' 'const char *'
    |   | |     `-IntegerLiteral 0x14582c648 <col:17> 'int' 24
    |   | `-IntegerLiteral 0x14582c6a0 <col:22> 'int' 4
    |   |-BreakStmt 0x14582cb58 <line:72:3>
    |   |-IfStmt 0x14582ce10 <line:76:3, line:77:47>
    |   | |-CXXDependentScopeMemberExpr 0x14582cb80 <line:76:7, col:12> '<dependent type>' contains-errors lvalue ->ndo_vflag
    |   | | `-RecoveryExpr 0x14582cb60 <col:7> '<dependent type>' contains-errors lvalue
    |   | `-CallExpr 0x14582cdd8 <line:77:4, col:47> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x14582cca8 <col:4> 'int ()' Function 0x14582cbf0 'pimv1_join_prune_print' 'int ()'
    |   |   |-RecoveryExpr 0x14582ccc8 <col:27> '<dependent type>' contains-errors lvalue
    |   |   |-UnaryOperator 0x14582cd60 <col:32, col:37> 'const char *' prefix '&' cannot overflow
    |   |   | `-ArraySubscriptExpr 0x14582cd40 <col:33, col:37> 'const char' lvalue
    |   |   |   |-ImplicitCastExpr 0x14582cd28 <col:33> 'const char *' <LValueToRValue>
    |   |   |   | `-DeclRefExpr 0x14582cce8 <col:33> 'const char *' lvalue ParmVar 0x14580dda8 'bp' 'const char *'
    |   |   |   `-IntegerLiteral 0x14582cd08 <col:36> 'int' 8
    |   |   `-BinaryOperator 0x14582cdb8 <col:40, col:46> '<dependent type>' contains-errors '-'
    |   |     |-RecoveryExpr 0x14582cd78 <col:40> '<dependent type>' contains-errors lvalue
    |   |     `-IntegerLiteral 0x14582cd98 <col:46> 'int' 8
    |   `-BreakStmt 0x14582ce30 <line:78:3>
    |-CallExpr 0x14582cf78 <line:80:2, col:17> 'int'
    | |-ImplicitCastExpr 0x14582cf60 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x14582cec8 <col:2> 'int ()' Function 0x14580e348 'ND_TCHECK' 'int ()'
    | `-ImplicitCastExpr 0x14582cfb8 <col:12, col:16> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x14582cfa0 <col:12, col:16> 'char' <LValueToRValue>
    |     `-ArraySubscriptExpr 0x14582cf40 <col:12, col:16> 'const char' lvalue
    |       |-ImplicitCastExpr 0x14582cf28 <col:12> 'const char *' <LValueToRValue>
    |       | `-DeclRefExpr 0x14582cee8 <col:12> 'const char *' lvalue ParmVar 0x14580dda8 'bp' 'const char *'
    |       `-IntegerLiteral 0x14582cf08 <col:15> 'int' 4
    |-IfStmt 0x14582d2e8 <line:81:2, line:82:36>
    | |-BinaryOperator 0x14582d0f8 <line:81:6, col:22> 'int' '!='
    | | |-ParenExpr 0x14582d0b8 <col:6, col:17> 'int'
    | | | `-BinaryOperator 0x14582d098 <col:7, col:16> 'int' '>>'
    | | |   |-ImplicitCastExpr 0x14582d080 <col:7, col:11> 'int' <IntegralCast>
    | | |   | `-ImplicitCastExpr 0x14582d068 <col:7, col:11> 'char' <LValueToRValue>
    | | |   |   `-ArraySubscriptExpr 0x14582d028 <col:7, col:11> 'const char' lvalue
    | | |   |     |-ImplicitCastExpr 0x14582d010 <col:7> 'const char *' <LValueToRValue>
    | | |   |     | `-DeclRefExpr 0x14582cfd0 <col:7> 'const char *' lvalue ParmVar 0x14580dda8 'bp' 'const char *'
    | | |   |     `-IntegerLiteral 0x14582cff0 <col:10> 'int' 4
    | | |   `-IntegerLiteral 0x14582d048 <col:16> 'int' 4
    | | `-IntegerLiteral 0x14582d0d8 <col:22> 'int' 1
    | `-CallExpr 0x14582d2c0 <line:82:3, col:36> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x14582d118 <col:3> 'int ()' Function 0x145828638 'ND_PRINT' 'int ()'
    |   `-ParenExpr 0x14582d2a0 <col:12, col:35> 'int' contains-errors
    |     `-BinaryOperator 0x14582d280 <col:13, col:34> 'int' contains-errors ','
    |       |-BinaryOperator 0x14582d178 <col:13, col:18> 'char[4]' contains-errors ','
    |       | |-RecoveryExpr 0x14582d138 <col:13> '<dependent type>' contains-errors lvalue
    |       | `-StringLiteral 0x14582d158 <col:18> 'char[4]' lvalue "STR"
    |       `-BinaryOperator 0x14582d260 <col:25, col:34> 'int' '>>'
    |         |-ImplicitCastExpr 0x14582d248 <col:25, col:29> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x14582d230 <col:25, col:29> 'char' <LValueToRValue>
    |         |   `-ArraySubscriptExpr 0x14582d1f0 <col:25, col:29> 'const char' lvalue
    |         |     |-ImplicitCastExpr 0x14582d1d8 <col:25> 'const char *' <LValueToRValue>
    |         |     | `-DeclRefExpr 0x14582d198 <col:25> 'const char *' lvalue ParmVar 0x14580dda8 'bp' 'const char *'
    |         |     `-IntegerLiteral 0x14582d1b8 <col:28> 'int' 4
    |         `-IntegerLiteral 0x14582d210 <col:34> 'int' 4
    |-ReturnStmt 0x14582d308 <line:83:2>
    |-LabelStmt 0x14582d450 <line:85:1, line:86:23> 'trunc'
    | `-CallExpr 0x14582d3b8 <col:2, col:23> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x14582d318 <col:2> 'int ()' Function 0x145828638 'ND_PRINT' 'int ()'
    |   `-ParenExpr 0x14582d398 <col:11, col:22> 'char[4]' contains-errors
    |     `-BinaryOperator 0x14582d378 <col:12, col:17> 'char[4]' contains-errors ','
    |       |-RecoveryExpr 0x14582d338 <col:12> '<dependent type>' contains-errors lvalue
    |       `-StringLiteral 0x14582d358 <col:17> 'char[4]' lvalue "STR"
    `-ReturnStmt 0x14582d470 <line:87:2>
