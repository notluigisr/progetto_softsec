TranslationUnitDecl 0x150021c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x150022ab8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1500221d0 '__int128'
|-TypedefDecl 0x150022b28 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1500221f0 'unsigned __int128'
|-TypedefDecl 0x15080be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x15080bc00 'struct __NSConstantString_tag'
|   `-Record 0x150022b80 '__NSConstantString_tag'
|-TypedefDecl 0x15080be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x150022390 '__SVInt8_t'
|-TypedefDecl 0x15080bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x1500223b0 '__SVInt16_t'
|-TypedefDecl 0x15080bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x1500223d0 '__SVInt32_t'
|-TypedefDecl 0x15080bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x1500223f0 '__SVInt64_t'
|-TypedefDecl 0x15080c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x150022410 '__SVUint8_t'
|-TypedefDecl 0x15080c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x150022430 '__SVUint16_t'
|-TypedefDecl 0x15080c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x150022450 '__SVUint32_t'
|-TypedefDecl 0x15080c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x150022470 '__SVUint64_t'
|-TypedefDecl 0x15080c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x150022490 '__SVFloat16_t'
|-TypedefDecl 0x15080c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x1500224b0 '__SVFloat32_t'
|-TypedefDecl 0x15080c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x1500224d0 '__SVFloat64_t'
|-TypedefDecl 0x15080c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x1500224f0 '__SVBfloat16_t'
|-TypedefDecl 0x15080c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x150022510 '__clang_svint8x2_t'
|-TypedefDecl 0x15080c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x150022530 '__clang_svint16x2_t'
|-TypedefDecl 0x15080c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x150022550 '__clang_svint32x2_t'
|-TypedefDecl 0x15080c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x150022570 '__clang_svint64x2_t'
|-TypedefDecl 0x15080c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x150022590 '__clang_svuint8x2_t'
|-TypedefDecl 0x15080c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x1500225b0 '__clang_svuint16x2_t'
|-TypedefDecl 0x15080c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x1500225d0 '__clang_svuint32x2_t'
|-TypedefDecl 0x15080c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x1500225f0 '__clang_svuint64x2_t'
|-TypedefDecl 0x15080c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x150022610 '__clang_svfloat16x2_t'
|-TypedefDecl 0x15080c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x150022630 '__clang_svfloat32x2_t'
|-TypedefDecl 0x15080c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x150022650 '__clang_svfloat64x2_t'
|-TypedefDecl 0x15080c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x150022670 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x15080c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x150022690 '__clang_svint8x3_t'
|-TypedefDecl 0x15080c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1500226b0 '__clang_svint16x3_t'
|-TypedefDecl 0x15080c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1500226d0 '__clang_svint32x3_t'
|-TypedefDecl 0x15080c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1500226f0 '__clang_svint64x3_t'
|-TypedefDecl 0x15080c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x150022710 '__clang_svuint8x3_t'
|-TypedefDecl 0x15080ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x150022730 '__clang_svuint16x3_t'
|-TypedefDecl 0x15080cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x150022750 '__clang_svuint32x3_t'
|-TypedefDecl 0x15080cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x150022770 '__clang_svuint64x3_t'
|-TypedefDecl 0x15080cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x150022790 '__clang_svfloat16x3_t'
|-TypedefDecl 0x15080d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1500227b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x15080d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1500227d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x15080d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1500227f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x15080d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x150022810 '__clang_svint8x4_t'
|-TypedefDecl 0x15080d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x150022830 '__clang_svint16x4_t'
|-TypedefDecl 0x15080d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x150022850 '__clang_svint32x4_t'
|-TypedefDecl 0x15080d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x150022870 '__clang_svint64x4_t'
|-TypedefDecl 0x15080d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x150022890 '__clang_svuint8x4_t'
|-TypedefDecl 0x15080d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1500228b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x15080d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1500228d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x15080d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1500228f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x15080d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x150022910 '__clang_svfloat16x4_t'
|-TypedefDecl 0x15080d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x150022930 '__clang_svfloat32x4_t'
|-TypedefDecl 0x15080d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x150022950 '__clang_svfloat64x4_t'
|-TypedefDecl 0x15080d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x150022970 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x15080da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x150022990 '__SVBool_t'
|-TypedefDecl 0x15080da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1500229b0 '__clang_svboolx2_t'
|-TypedefDecl 0x15080dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1500229d0 '__clang_svboolx4_t'
|-TypedefDecl 0x15080db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1500229f0 '__SVCount_t'
|-TypedefDecl 0x15080dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x15080dbb0 'char *'
|   `-BuiltinType 0x150021cb0 'char'
|-TypedefDecl 0x15080dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x15080dbb0 'char *'
|   `-BuiltinType 0x150021cb0 'char'
`-FunctionDecl 0x15080dfd8 <dataset_diviso_filec/func9354_vuln.c:1:1, line:60:1> line:1:12 invalid oidc_post_preserve_javascript 'int (int *, const char *, char **, char **)'
  |-ParmVarDecl 0x15080dd28 <col:42, col:55> col:55 invalid r 'int *'
  |-ParmVarDecl 0x15080dda8 <col:58, col:70> col:70 used location 'const char *'
  |-ParmVarDecl 0x15080de58 <line:2:3, col:10> col:10 used javascript 'char **'
  |-ParmVarDecl 0x15080ded8 <col:22, col:29> col:29 used javascript_method 'char **'
  `-CompoundStmt 0x1500f1020 <col:48, line:60:1>
    |-IfStmt 0x15080e2f0 <line:4:2, line:5:10>
    | |-BinaryOperator 0x15080e288 <line:4:6, col:39> 'int' contains-errors '=='
    | | |-CallExpr 0x15080e240 <col:6, col:34> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x15080e200 <col:6> 'int ()' Function 0x15080e148 'oidc_cfg_dir_preserve_post' 'int ()'
    | | | `-RecoveryExpr 0x15080e220 <col:33> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x15080e268 <col:39> 'int' 0
    | `-ReturnStmt 0x15080e2e0 <line:5:3, col:10>
    |   `-RecoveryExpr 0x15080e2c0 <col:10> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x1508274a0 <line:7:2, col:21> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x150827400 <col:2> 'int ()' Function 0x15080e338 'oidc_debug' 'int ()'
    | |-RecoveryExpr 0x150827420 <col:13> '<dependent type>' contains-errors lvalue
    | `-StringLiteral 0x150827480 <col:16> 'char[4]' lvalue "STR"
    |-DeclStmt 0x150827978 <line:12:2, col:66>
    | `-VarDecl 0x150827710 <col:2, col:65> col:14 used method 'const char *' cinit
    |   `-CallExpr 0x150827940 <col:23, col:65> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x150827858 <col:23> 'int ()' Function 0x1508277a0 'oidc_original_request_method' 'int ()'
    |     |-RecoveryExpr 0x150827878 <col:52> '<dependent type>' contains-errors lvalue
    |     |-RecoveryExpr 0x150827900 <col:55> '<dependent type>' contains-errors lvalue
    |     `-RecoveryExpr 0x150827920 <col:60> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x150827bf0 <line:14:2, line:15:10>
    | |-BinaryOperator 0x150827b88 <line:14:6, col:54> 'int' contains-errors '!='
    | | |-CallExpr 0x150827b58 <col:6, col:49> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x150827a70 <col:6> 'int ()' Function 0x1508279b8 'apr_strnatcmp' 'int ()'
    | | | |-DeclRefExpr 0x150827a90 <col:20> 'const char *' contains-errors lvalue Var 0x150827710 'method' 'const char *'
    | | | `-RecoveryExpr 0x150827b38 <col:28> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x150827af8 <col:54> 'int' 0
    | `-ReturnStmt 0x150827be0 <line:15:3, col:10>
    |   `-RecoveryExpr 0x150827bc0 <col:10> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x150828228 <line:19:2, line:22:2>
    | |-BinaryOperator 0x150828080 <line:19:6, col:60> 'int' contains-errors '=='
    | | |-CallExpr 0x150828020 <col:6, col:55> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x150827ec0 <col:6> 'int ()' Function 0x150827e08 'oidc_util_read_post_params' 'int ()'
    | | | |-RecoveryExpr 0x150827ee0 <col:33> '<dependent type>' contains-errors lvalue
    | | | |-RecoveryExpr 0x150827fc0 <col:36> '<dependent type>' contains-errors lvalue
    | | | |-RecoveryExpr 0x150827fe0 <col:44> '<dependent type>' contains-errors lvalue
    | | | `-RecoveryExpr 0x150828000 <col:51> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x150828060 <col:60> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x150828210 <col:67, line:22:2>
    |   `-CallExpr 0x1508281e0 <line:20:3, col:22> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x150828180 <col:3> 'int ()' Function 0x1508280c8 'oidc_error' 'int ()'
    |     |-RecoveryExpr 0x1508281a0 <col:14> '<dependent type>' contains-errors lvalue
    |     `-StringLiteral 0x1508281c0 <col:17> 'char[4]' lvalue "STR"
    |-DeclStmt 0x1508283c8 <line:24:2, col:56>
    | `-VarDecl 0x150828260 <col:2, col:28> col:28 invalid arr 'const int *'
    |-DeclStmt 0x1500ef468 <line:25:2, col:70>
    | `-VarDecl 0x1500ef400 <col:2, col:27> col:27 invalid elts 'const int *'
    |-DeclStmt 0x1500ef500 <line:26:2, col:7>
    | `-VarDecl 0x1500ef498 <col:2, col:6> col:6 used i 'int'
    |-DeclStmt 0x1500ef610 <line:27:2, col:17>
    | `-VarDecl 0x1500ef530 <col:2, col:15> col:8 used json 'char *' cinit
    |   `-ImplicitCastExpr 0x1500ef5f8 <col:15> 'char *' <ArrayToPointerDecay>
    |     `-StringLiteral 0x1500ef5e0 <col:15> 'char[1]' lvalue ""
    |-ForStmt 0x1500efdb8 <line:28:2, line:33:2>
    | |-BinaryOperator 0x1500ef668 <line:28:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x1500ef628 <col:7> 'int' lvalue Var 0x1500ef498 'i' 'int'
    | | `-IntegerLiteral 0x1500ef648 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x1500ef710 <col:14, col:23> 'int' contains-errors '<'
    | | |-DeclRefExpr 0x1500ef688 <col:14> 'int' lvalue Var 0x1500ef498 'i' 'int'
    | | `-CXXDependentScopeMemberExpr 0x1500ef6c8 <col:18, col:23> '<dependent type>' contains-errors lvalue ->nelts
    | |   `-RecoveryExpr 0x1500ef6a8 <col:18> '<dependent type>' contains-errors lvalue
    | |-UnaryOperator 0x1500ef750 <col:30, col:31> 'int' postfix '++'
    | | `-DeclRefExpr 0x1500ef730 <col:30> 'int' lvalue Var 0x1500ef498 'i' 'int'
    | `-CompoundStmt 0x1500efda8 <col:35, line:33:2>
    |-BinaryOperator 0x1500eff10 <line:34:2, col:42> 'char *' contains-errors '='
    | |-DeclRefExpr 0x1500efdf0 <col:2> 'char *' lvalue Var 0x1500ef530 'json' 'char *'
    | `-CallExpr 0x1500efed8 <col:9, col:42> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x1500efe10 <col:9> 'int ()' Function 0x1500ef7b0 'apr_psprintf' 'int ()'
    |   |-CXXDependentScopeMemberExpr 0x1500efe50 <col:22, col:25> '<dependent type>' contains-errors lvalue ->pool
    |   | `-RecoveryExpr 0x1500efe30 <col:22> '<dependent type>' contains-errors lvalue
    |   |-StringLiteral 0x1500efe98 <col:31> 'char[4]' lvalue "STR"
    |   `-DeclRefExpr 0x1500efeb8 <col:38> 'char *' lvalue Var 0x1500ef530 'json' 'char *'
    |-DeclStmt 0x1500f0000 <line:36:2, col:29>
    | `-VarDecl 0x1500eff48 <col:2, col:24> col:14 used jmethod 'const char *' cinit
    |   `-ImplicitCastExpr 0x1500effe8 <col:24> 'const char *' <NoOp>
    |     `-ImplicitCastExpr 0x1500effd0 <col:24> 'char *' <ArrayToPointerDecay>
    |       `-StringLiteral 0x1500effb0 <col:24> 'char[4]' lvalue "STR"
    |-DeclStmt 0x1500f0390 <line:37:2, line:48:13>
    | `-VarDecl 0x1500f0030 <line:37:2, line:48:12> line:37:14 used jscript 'const char *' cinit
    |   `-CallExpr 0x1500f0348 <line:38:4, line:48:12> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x1500f0098 <line:38:4> 'int ()' Function 0x1500ef7b0 'apr_psprintf' 'int ()'
    |     |-CXXDependentScopeMemberExpr 0x1500f00d8 <col:17, col:20> '<dependent type>' contains-errors lvalue ->pool
    |     | `-RecoveryExpr 0x1500f00b8 <col:17> '<dependent type>' contains-errors lvalue
    |     |-StringLiteral 0x1500f0160 <line:39:6, line:44:6> 'char[19]' lvalue "STRSTRSTRSTRSTRSTR"
    |     |-DeclRefExpr 0x1500f01a0 <col:13> 'const char *' lvalue Var 0x1500eff48 'jmethod' 'const char *'
    |     |-DeclRefExpr 0x1500f01c0 <col:22> 'char *' lvalue Var 0x1500ef530 'json' 'char *'
    |     `-ConditionalOperator 0x1500f0318 <line:45:6, line:48:10> '<dependent type>' contains-errors
    |       |-DeclRefExpr 0x1500f01e0 <line:45:6> 'const char *' lvalue ParmVar 0x15080dda8 'location' 'const char *'
    |       |-CallExpr 0x1500f02c8 <line:46:8, line:47:18> '<dependent type>' contains-errors
    |       | |-DeclRefExpr 0x1500f0200 <line:46:8> 'int ()' Function 0x1500ef7b0 'apr_psprintf' 'int ()'
    |       | |-CXXDependentScopeMemberExpr 0x1500f0240 <col:21, col:24> '<dependent type>' contains-errors lvalue ->pool
    |       | | `-RecoveryExpr 0x1500f0220 <col:21> '<dependent type>' contains-errors lvalue
    |       | |-StringLiteral 0x1500f0288 <col:30> 'char[4]' lvalue "STR"
    |       | `-DeclRefExpr 0x1500f02a8 <line:47:10> 'const char *' lvalue ParmVar 0x15080dda8 'location' 'const char *'
    |       `-StringLiteral 0x1500f0300 <line:48:10> 'char[1]' lvalue ""
    `-IfStmt 0x1500f0ff0 <line:49:2, line:57:2> has_else
      |-RecoveryExpr 0x1500f03c8 <line:49:6, col:18> '_Bool' contains-errors
      |-CompoundStmt 0x1500f0e20 <col:24, line:54:2>
      | |-IfStmt 0x1500f0c60 <line:50:3, line:51:53>
      | | |-ImplicitCastExpr 0x1500f0a20 <line:50:7> 'char **' <LValueToRValue>
      | | | `-DeclRefExpr 0x1500f0a00 <col:7> 'char **' lvalue ParmVar 0x15080ded8 'javascript_method' 'char **'
      | | `-BinaryOperator 0x1500f0c40 <line:51:4, col:53> 'char *' contains-errors '='
      | |   |-UnaryOperator 0x1500f0a70 <col:4, col:5> 'char *' lvalue prefix '*' cannot overflow
      | |   | `-ImplicitCastExpr 0x1500f0a58 <col:5> 'char **' <LValueToRValue>
      | |   |   `-DeclRefExpr 0x1500f0a38 <col:5> 'char **' lvalue ParmVar 0x15080ded8 'javascript_method' 'char **'
      | |   `-CallExpr 0x1500f0c10 <col:25, col:53> '<dependent type>' contains-errors
      | |     |-DeclRefExpr 0x1500f0b68 <col:25> 'int ()' Function 0x1500f0ab0 'apr_pstrdup' 'int ()'
      | |     |-CXXDependentScopeMemberExpr 0x1500f0ba8 <col:37, col:40> '<dependent type>' contains-errors lvalue ->pool
      | |     | `-RecoveryExpr 0x1500f0b88 <col:37> '<dependent type>' contains-errors lvalue
      | |     `-DeclRefExpr 0x1500f0bf0 <col:46> 'const char *' lvalue Var 0x1500eff48 'jmethod' 'const char *'
      | `-IfStmt 0x1500f0e00 <line:52:3, line:53:46>
      |   |-ImplicitCastExpr 0x1500f0ca0 <line:52:7> 'char **' <LValueToRValue>
      |   | `-DeclRefExpr 0x1500f0c80 <col:7> 'char **' lvalue ParmVar 0x15080de58 'javascript' 'char **'
      |   `-BinaryOperator 0x1500f0de0 <line:53:4, col:46> 'char *' contains-errors '='
      |     |-UnaryOperator 0x1500f0cf0 <col:4, col:5> 'char *' lvalue prefix '*' cannot overflow
      |     | `-ImplicitCastExpr 0x1500f0cd8 <col:5> 'char **' <LValueToRValue>
      |     |   `-DeclRefExpr 0x1500f0cb8 <col:5> 'char **' lvalue ParmVar 0x15080de58 'javascript' 'char **'
      |     `-CallExpr 0x1500f0db0 <col:18, col:46> '<dependent type>' contains-errors
      |       |-DeclRefExpr 0x1500f0d08 <col:18> 'int ()' Function 0x1500f0ab0 'apr_pstrdup' 'int ()'
      |       |-CXXDependentScopeMemberExpr 0x1500f0d48 <col:30, col:33> '<dependent type>' contains-errors lvalue ->pool
      |       | `-RecoveryExpr 0x1500f0d28 <col:30> '<dependent type>' contains-errors lvalue
      |       `-DeclRefExpr 0x1500f0d90 <col:39> 'const char *' contains-errors lvalue Var 0x1500f0030 'jscript' 'const char *'
      `-CompoundStmt 0x1500f0fe0 <line:54:9, line:57:2>
