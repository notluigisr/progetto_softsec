TranslationUnitDecl 0x120055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1200564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x120055bd0 '__int128'
|-TypedefDecl 0x120056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x120055bf0 'unsigned __int128'
|-TypedefDecl 0x120126a30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x120126800 'struct __NSConstantString_tag'
|   `-Record 0x120056580 '__NSConstantString_tag'
|-TypedefDecl 0x120126a98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x120055d90 '__SVInt8_t'
|-TypedefDecl 0x120126b00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x120055db0 '__SVInt16_t'
|-TypedefDecl 0x120126b68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x120055dd0 '__SVInt32_t'
|-TypedefDecl 0x120126bd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x120055df0 '__SVInt64_t'
|-TypedefDecl 0x120126c38 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x120055e10 '__SVUint8_t'
|-TypedefDecl 0x120126ca0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x120055e30 '__SVUint16_t'
|-TypedefDecl 0x120126d08 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x120055e50 '__SVUint32_t'
|-TypedefDecl 0x120126d70 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x120055e70 '__SVUint64_t'
|-TypedefDecl 0x120126dd8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x120055e90 '__SVFloat16_t'
|-TypedefDecl 0x120126e40 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x120055eb0 '__SVFloat32_t'
|-TypedefDecl 0x120126ea8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x120055ed0 '__SVFloat64_t'
|-TypedefDecl 0x120126f10 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x120055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x120126f78 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x120055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x120126fe0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x120055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x120127048 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x120055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1201270b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x120055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x120127118 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x120055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x120127180 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x120055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1201271e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x120055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x120127250 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x120055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x1201272b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x120056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x120127320 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x120056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x120127388 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x120056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x1201273f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x120056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x120127458 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x120056090 '__clang_svint8x3_t'
|-TypedefDecl 0x1201274c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1200560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x120127528 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1200560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x120127590 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1200560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x1201275f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x120056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x120127660 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x120056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x1201276c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x120056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x120127730 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x120056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x120127798 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x120056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x120128000 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1200561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x120128068 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1200561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1201280d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1200561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x120128138 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x120056210 '__clang_svint8x4_t'
|-TypedefDecl 0x1201281a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x120056230 '__clang_svint16x4_t'
|-TypedefDecl 0x120128208 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x120056250 '__clang_svint32x4_t'
|-TypedefDecl 0x120128270 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x120056270 '__clang_svint64x4_t'
|-TypedefDecl 0x1201282d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x120056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x120128340 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1200562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x1201283a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1200562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x120128410 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1200562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x120128478 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x120056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x1201284e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x120056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x120128548 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x120056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x1201285b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x120056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x120128618 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x120056390 '__SVBool_t'
|-TypedefDecl 0x120128680 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1200563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x1201286e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1200563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x120128750 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1200563f0 '__SVCount_t'
|-TypedefDecl 0x1201287f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1201287b0 'char *'
|   `-BuiltinType 0x1200556b0 'char'
|-TypedefDecl 0x120128868 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1201287b0 'char *'
|   `-BuiltinType 0x1200556b0 'char'
`-FunctionDecl 0x120128d18 <dataset_diviso_filec/func21496_vuln.c:1:1, line:61:1> line:1:1 ossl_asn1_decode0 'int (unsigned char **, long, long *, int, int, long *)'
  |-ParmVarDecl 0x120128940 <col:19, col:35> col:35 used pp 'unsigned char **'
  |-ParmVarDecl 0x1201289c0 <col:39, col:44> col:44 used length 'long'
  |-ParmVarDecl 0x120128a78 <col:52, col:58> col:58 used offset 'long *'
  |-ParmVarDecl 0x120128af8 <col:66, col:70> col:70 used depth 'int'
  |-ParmVarDecl 0x120128b78 <line:2:5, col:9> col:9 used yield 'int'
  |-ParmVarDecl 0x120128bf8 <col:16, col:22> col:22 used num_read 'long *'
  `-CompoundStmt 0x120146b78 <line:3:1, line:61:1>
    |-DeclStmt 0x120128f50 <line:4:5, col:29>
    | |-VarDecl 0x120128e50 <col:5, col:20> col:20 used start 'unsigned char *'
    | `-VarDecl 0x120128ed0 <col:5, col:28> col:28 used p 'unsigned char *'
    |-DeclStmt 0x120141268 <line:5:5, col:28>
    | `-VarDecl 0x120141200 <col:5, col:26> col:26 used p0 'const unsigned char *'
    |-DeclStmt 0x120141580 <line:6:5, col:54>
    | |-VarDecl 0x120141298 <col:5, col:16> col:10 used len 'long' cinit
    | | `-ImplicitCastExpr 0x120141320 <col:16> 'long' <IntegralCast>
    | |   `-IntegerLiteral 0x120141300 <col:16> 'int' 0
    | |-VarDecl 0x120141350 <col:5, col:32> col:19 used inner_read 'long' cinit
    | | `-ImplicitCastExpr 0x1201413d8 <col:32> 'long' <IntegralCast>
    | |   `-IntegerLiteral 0x1201413b8 <col:32> 'int' 0
    | |-VarDecl 0x120141408 <col:5, col:42> col:35 used off 'long' cinit
    | | `-ImplicitCastExpr 0x1201414c0 <col:41, col:42> 'long' <LValueToRValue>
    | |   `-UnaryOperator 0x1201414a8 <col:41, col:42> 'long' lvalue prefix '*' cannot overflow
    | |     `-ImplicitCastExpr 0x120141490 <col:42> 'long *' <LValueToRValue>
    | |       `-DeclRefExpr 0x120141470 <col:42> 'long *' lvalue ParmVar 0x120128a78 'offset' 'long *'
    | `-VarDecl 0x1201414f0 <col:5, col:50> col:50 used hlen 'long'
    |-DeclStmt 0x120141738 <line:7:5, col:19>
    | |-VarDecl 0x1201415b0 <col:5, col:9> col:9 used tag 'int'
    | |-VarDecl 0x120141630 <col:5, col:14> col:14 used tc 'int'
    | `-VarDecl 0x1201416b0 <col:5, col:18> col:18 used j 'int'
    |-BinaryOperator 0x1201417f0 <line:10:5, col:10> 'unsigned char *' '='
    | |-DeclRefExpr 0x120141768 <col:5> 'unsigned char *' lvalue Var 0x120128ed0 'p' 'unsigned char *'
    | `-ImplicitCastExpr 0x1201417d8 <col:9, col:10> 'unsigned char *' <LValueToRValue>
    |   `-UnaryOperator 0x1201417c0 <col:9, col:10> 'unsigned char *' lvalue prefix '*' cannot overflow
    |     `-ImplicitCastExpr 0x1201417a8 <col:10> 'unsigned char **' <LValueToRValue>
    |       `-DeclRefExpr 0x120141788 <col:10> 'unsigned char **' lvalue ParmVar 0x120128940 'pp' 'unsigned char **'
    |-BinaryOperator 0x120141868 <line:11:5, col:13> 'unsigned char *' '='
    | |-DeclRefExpr 0x120141810 <col:5> 'unsigned char *' lvalue Var 0x120128e50 'start' 'unsigned char *'
    | `-ImplicitCastExpr 0x120141850 <col:13> 'unsigned char *' <LValueToRValue>
    |   `-DeclRefExpr 0x120141830 <col:13> 'unsigned char *' lvalue Var 0x120128ed0 'p' 'unsigned char *'
    |-BinaryOperator 0x1201418f8 <line:12:5, col:10> 'const unsigned char *' '='
    | |-DeclRefExpr 0x120141888 <col:5> 'const unsigned char *' lvalue Var 0x120141200 'p0' 'const unsigned char *'
    | `-ImplicitCastExpr 0x1201418e0 <col:10> 'const unsigned char *' <NoOp>
    |   `-ImplicitCastExpr 0x1201418c8 <col:10> 'unsigned char *' <LValueToRValue>
    |     `-DeclRefExpr 0x1201418a8 <col:10> 'unsigned char *' lvalue Var 0x120128ed0 'p' 'unsigned char *'
    |-BinaryOperator 0x120141c78 <line:13:5, col:53> 'int' '='
    | |-DeclRefExpr 0x120141918 <col:5> 'int' lvalue Var 0x1201416b0 'j' 'int'
    | `-CallExpr 0x120141c18 <col:9, col:53> 'int'
    |   |-ImplicitCastExpr 0x120141c00 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x120141a50 <col:9> 'int ()' Function 0x120141998 'ASN1_get_object' 'int ()'
    |   |-UnaryOperator 0x120141ac0 <col:25, col:26> 'const unsigned char **' prefix '&' cannot overflow
    |   | `-DeclRefExpr 0x120141a70 <col:26> 'const unsigned char *' lvalue Var 0x120141200 'p0' 'const unsigned char *'
    |   |-UnaryOperator 0x120141af8 <col:30, col:31> 'long *' prefix '&' cannot overflow
    |   | `-DeclRefExpr 0x120141ad8 <col:31> 'long' lvalue Var 0x120141298 'len' 'long'
    |   |-UnaryOperator 0x120141b60 <col:36, col:37> 'int *' prefix '&' cannot overflow
    |   | `-DeclRefExpr 0x120141b10 <col:37> 'int' lvalue Var 0x1201415b0 'tag' 'int'
    |   |-UnaryOperator 0x120141b98 <col:42, col:43> 'int *' prefix '&' cannot overflow
    |   | `-DeclRefExpr 0x120141b78 <col:43> 'int' lvalue Var 0x120141630 'tc' 'int'
    |   `-ImplicitCastExpr 0x120141c60 <col:47> 'long' <LValueToRValue>
    |     `-DeclRefExpr 0x120141bb0 <col:47> 'long' lvalue ParmVar 0x1201289c0 'length' 'long'
    |-BinaryOperator 0x120141d30 <line:14:5, col:26> 'unsigned char *' '='
    | |-DeclRefExpr 0x120141c98 <col:5> 'unsigned char *' lvalue Var 0x120128ed0 'p' 'unsigned char *'
    | `-CStyleCastExpr 0x120141d08 <col:9, col:26> 'unsigned char *' <NoOp>
    |   `-ImplicitCastExpr 0x120141cf0 <col:26> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
    |     `-DeclRefExpr 0x120141cb8 <col:26> 'const unsigned char *' lvalue Var 0x120141200 'p0' 'const unsigned char *'
    |-IfStmt 0x120141f98 <line:15:5, col:45>
    | |-BinaryOperator 0x120141da8 <col:8, col:12> 'int' '&'
    | | |-ImplicitCastExpr 0x120141d90 <col:8> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x120141d50 <col:8> 'int' lvalue Var 0x1201416b0 'j' 'int'
    | | `-IntegerLiteral 0x120141d70 <col:12> 'int' 128
    | `-CallExpr 0x120141f68 <col:18, col:45> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x120141ea8 <col:18> 'int ()' Function 0x120141df0 'ossl_raise' 'int ()'
    |   |-RecoveryExpr 0x120141f28 <col:29> '<dependent type>' contains-errors lvalue
    |   `-RecoveryExpr 0x120141f48 <col:41> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x120142160 <line:16:5, col:50>
    | |-BinaryOperator 0x120142028 <col:8, col:14> 'int' '>'
    | | |-ImplicitCastExpr 0x120141ff8 <col:8> 'long' <LValueToRValue>
    | | | `-DeclRefExpr 0x120141fb8 <col:8> 'long' lvalue Var 0x120141298 'len' 'long'
    | | `-ImplicitCastExpr 0x120142010 <col:14> 'long' <LValueToRValue>
    | |   `-DeclRefExpr 0x120141fd8 <col:14> 'long' lvalue ParmVar 0x1201289c0 'length' 'long'
    | `-CallExpr 0x120142130 <col:22, col:50> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x120142048 <col:22> 'int ()' Function 0x120141df0 'ossl_raise' 'int ()'
    |   |-RecoveryExpr 0x120142110 <col:33> '<dependent type>' contains-errors lvalue
    |   `-StringLiteral 0x1201420c0 <col:45> 'char[4]' lvalue "STR"
    |-BinaryOperator 0x120145438 <line:26:5, col:16> 'long' '='
    | |-DeclRefExpr 0x120145388 <col:5> 'long' lvalue Var 0x1201414f0 'hlen' 'long'
    | `-BinaryOperator 0x120145418 <col:12, col:16> 'long' '-'
    |   |-ImplicitCastExpr 0x1201453e8 <col:12> 'unsigned char *' <LValueToRValue>
    |   | `-DeclRefExpr 0x1201453a8 <col:12> 'unsigned char *' lvalue Var 0x120128ed0 'p' 'unsigned char *'
    |   `-ImplicitCastExpr 0x120145400 <col:16> 'unsigned char *' <LValueToRValue>
    |     `-DeclRefExpr 0x1201453c8 <col:16> 'unsigned char *' lvalue Var 0x120128e50 'start' 'unsigned char *'
    |-IfStmt 0x120145de0 <line:28:5, line:38:5>
    | |-ImplicitCastExpr 0x120145478 <line:28:8> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x120145458 <col:8> 'int' lvalue ParmVar 0x120128b78 'yield' 'int'
    | `-CompoundStmt 0x120145dd0 <col:15, line:38:5>
    |-IfStmt 0x1201466e8 <line:40:5, line:50:5> has_else
    | |-RecoveryExpr 0x120145e20 <line:40:8, col:12> '_Bool' contains-errors
    | |-CompoundStmt 0x120146268 <col:32, line:45:5>
    | | |-CompoundAssignOperator 0x120145ec8 <line:41:2, col:9> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
    | | | |-UnaryOperator 0x120145e78 <col:2, col:3> 'unsigned char *' lvalue prefix '*' cannot overflow
    | | | | `-ImplicitCastExpr 0x120145e60 <col:3> 'unsigned char **' <LValueToRValue>
    | | | |   `-DeclRefExpr 0x120145e40 <col:3> 'unsigned char **' lvalue ParmVar 0x120128940 'pp' 'unsigned char **'
    | | | `-ImplicitCastExpr 0x120145eb0 <col:9> 'long' <LValueToRValue>
    | | |   `-DeclRefExpr 0x120145e90 <col:9> 'long' lvalue Var 0x1201414f0 'hlen' 'long'
    | | |-CompoundAssignOperator 0x120145f50 <line:42:2, col:9> 'long' '+=' ComputeLHSTy='long' ComputeResultTy='long'
    | | | |-DeclRefExpr 0x120145ef8 <col:2> 'long' lvalue Var 0x120141408 'off' 'long'
    | | | `-ImplicitCastExpr 0x120145f38 <col:9> 'long' <LValueToRValue>
    | | |   `-DeclRefExpr 0x120145f18 <col:9> 'long' lvalue Var 0x1201414f0 'hlen' 'long'
    | | `-CompoundAssignOperator 0x120146238 <line:44:2, col:16> 'long' '+=' ComputeLHSTy='long' ComputeResultTy='long'
    | |   |-DeclRefExpr 0x1201461d0 <col:2> 'long' lvalue Var 0x120141350 'inner_read' 'long'
    | |   `-ImplicitCastExpr 0x120146220 <col:16> 'long' <LValueToRValue>
    | |     `-DeclRefExpr 0x120146200 <col:16> 'long' lvalue Var 0x1201414f0 'hlen' 'long'
    | `-CompoundStmt 0x1201466d0 <line:46:10, line:50:5>
    |   `-CompoundAssignOperator 0x1201466a0 <line:49:2, col:16> 'long' '+=' ComputeLHSTy='long' ComputeResultTy='long'
    |     |-DeclRefExpr 0x1201465f0 <col:2> 'long' lvalue Var 0x120141408 'off' 'long'
    |     `-BinaryOperator 0x120146680 <col:9, col:16> 'long' '+'
    |       |-ImplicitCastExpr 0x120146650 <col:9> 'long' <LValueToRValue>
    |       | `-DeclRefExpr 0x120146610 <col:9> 'long' lvalue Var 0x1201414f0 'hlen' 'long'
    |       `-ImplicitCastExpr 0x120146668 <col:16> 'long' <LValueToRValue>
    |         `-DeclRefExpr 0x120146630 <col:16> 'long' lvalue Var 0x120141298 'len' 'long'
    |-IfStmt 0x1201467f8 <line:51:5, line:52:14>
    | |-ImplicitCastExpr 0x120146738 <line:51:9> 'long *' <LValueToRValue>
    | | `-DeclRefExpr 0x120146718 <col:9> 'long *' lvalue ParmVar 0x120128bf8 'num_read' 'long *'
    | `-BinaryOperator 0x1201467d8 <line:52:2, col:14> 'long' '='
    |   |-UnaryOperator 0x120146788 <col:2, col:3> 'long' lvalue prefix '*' cannot overflow
    |   | `-ImplicitCastExpr 0x120146770 <col:3> 'long *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x120146750 <col:3> 'long *' lvalue ParmVar 0x120128bf8 'num_read' 'long *'
    |   `-ImplicitCastExpr 0x1201467c0 <col:14> 'long' <LValueToRValue>
    |     `-DeclRefExpr 0x1201467a0 <col:14> 'long' lvalue Var 0x120141350 'inner_read' 'long'
    |-IfStmt 0x120146ab0 <line:53:5, line:57:5>
    | |-BinaryOperator 0x120146990 <line:53:9, col:42> 'int' '&&'
    | | |-BinaryOperator 0x120146888 <col:9, col:16> 'int' '!='
    | | | |-ImplicitCastExpr 0x120146858 <col:9> 'long' <LValueToRValue>
    | | | | `-DeclRefExpr 0x120146818 <col:9> 'long' lvalue Var 0x120141298 'len' 'long'
    | | | `-ImplicitCastExpr 0x120146870 <col:16> 'long' <IntegralCast>
    | | |   `-IntegerLiteral 0x120146838 <col:16> 'int' 0
    | | `-BinaryOperator 0x120146970 <col:21, col:42> 'int' '!='
    | |   |-ImplicitCastExpr 0x120146958 <col:21> 'long' <LValueToRValue>
    | |   | `-DeclRefExpr 0x1201468a8 <col:21> 'long' lvalue Var 0x120141350 'inner_read' 'long'
    | |   `-BinaryOperator 0x120146938 <col:35, col:42> 'long' '+'
    | |     |-ImplicitCastExpr 0x120146908 <col:35> 'long' <LValueToRValue>
    | |     | `-DeclRefExpr 0x1201468c8 <col:35> 'long' lvalue Var 0x1201414f0 'hlen' 'long'
    | |     `-ImplicitCastExpr 0x120146920 <col:42> 'long' <LValueToRValue>
    | |       `-DeclRefExpr 0x1201468e8 <col:42> 'long' lvalue Var 0x120141298 'len' 'long'
    | `-CompoundStmt 0x120146aa0 <col:47, line:57:5>
    `-BinaryOperator 0x120146b58 <line:59:5, col:15> 'long' '='
      |-UnaryOperator 0x120146b08 <col:5, col:6> 'long' lvalue prefix '*' cannot overflow
      | `-ImplicitCastExpr 0x120146af0 <col:6> 'long *' <LValueToRValue>
      |   `-DeclRefExpr 0x120146ad0 <col:6> 'long *' lvalue ParmVar 0x120128a78 'offset' 'long *'
      `-ImplicitCastExpr 0x120146b40 <col:15> 'long' <LValueToRValue>
        `-DeclRefExpr 0x120146b20 <col:15> 'long' lvalue Var 0x120141408 'off' 'long'
