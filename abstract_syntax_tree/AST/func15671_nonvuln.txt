TranslationUnitDecl 0x136855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1368564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x136855bd0 '__int128'
|-TypedefDecl 0x136856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x136855bf0 'unsigned __int128'
|-TypedefDecl 0x136926230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x136926000 'struct __NSConstantString_tag'
|   `-Record 0x136856580 '__NSConstantString_tag'
|-TypedefDecl 0x136926298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x136855d90 '__SVInt8_t'
|-TypedefDecl 0x136926300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x136855db0 '__SVInt16_t'
|-TypedefDecl 0x136926368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x136855dd0 '__SVInt32_t'
|-TypedefDecl 0x1369263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x136855df0 '__SVInt64_t'
|-TypedefDecl 0x136926438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x136855e10 '__SVUint8_t'
|-TypedefDecl 0x1369264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x136855e30 '__SVUint16_t'
|-TypedefDecl 0x136926508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x136855e50 '__SVUint32_t'
|-TypedefDecl 0x136926570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x136855e70 '__SVUint64_t'
|-TypedefDecl 0x1369265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x136855e90 '__SVFloat16_t'
|-TypedefDecl 0x136926640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x136855eb0 '__SVFloat32_t'
|-TypedefDecl 0x1369266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x136855ed0 '__SVFloat64_t'
|-TypedefDecl 0x136926710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x136855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x136926778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x136855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1369267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x136855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x136926848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x136855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1369268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x136855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x136926918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x136855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x136926980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x136855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1369269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x136855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x136926a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x136855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x136926ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x136856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x136926b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x136856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x136926b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x136856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x136926bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x136856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x136926c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x136856090 '__clang_svint8x3_t'
|-TypedefDecl 0x136926cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1368560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x136926d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1368560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x136926d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1368560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x136926df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x136856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x136926e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x136856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x136926ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x136856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x136926f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x136856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x136926f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x136856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x136927800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1368561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x136927868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1368561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1369278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1368561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x136927938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x136856210 '__clang_svint8x4_t'
|-TypedefDecl 0x1369279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x136856230 '__clang_svint16x4_t'
|-TypedefDecl 0x136927a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x136856250 '__clang_svint32x4_t'
|-TypedefDecl 0x136927a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x136856270 '__clang_svint64x4_t'
|-TypedefDecl 0x136927ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x136856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x136927b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1368562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x136927ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1368562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x136927c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1368562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x136927c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x136856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x136927ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x136856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x136927d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x136856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x136927db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x136856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x136927e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x136856390 '__SVBool_t'
|-TypedefDecl 0x136927e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1368563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x136927ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1368563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x136927f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1368563f0 '__SVCount_t'
|-TypedefDecl 0x136927ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x136927fb0 'char *'
|   `-BuiltinType 0x1368556b0 'char'
|-TypedefDecl 0x136928068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x136927fb0 'char *'
|   `-BuiltinType 0x1368556b0 'char'
`-FunctionDecl 0x1369281a8 <dataset_diviso_filec/func15671_nonvuln.c:1:1, line:27:1> line:1:14 urlUnescape 'char *(char *)' static
  |-ParmVarDecl 0x1369280d8 <col:26, col:32> col:32 used s 'char *'
  `-CompoundStmt 0x136942ce0 <col:35, line:27:1>
    |-DeclStmt 0x136928340 <line:2:3, col:20>
    | `-VarDecl 0x1369282b8 <col:3, col:19> col:7 used warned 'int' cinit
    |   `-IntegerLiteral 0x136928320 <col:19> 'int' 0
    |-DeclStmt 0x136928410 <line:3:3, col:20>
    | `-VarDecl 0x136928370 <col:3, col:19> col:9 used r 'char *' cinit
    |   `-ImplicitCastExpr 0x1369283f8 <col:19> 'char *' <LValueToRValue>
    |     `-DeclRefExpr 0x1369283d8 <col:19> 'char *' lvalue ParmVar 0x1369280d8 's' 'char *'
    |-ForStmt 0x136942bc0 <line:4:3, line:24:3>
    | |-DeclStmt 0x1369284e0 <line:4:8, col:20>
    | | `-VarDecl 0x136928440 <col:8, col:19> col:14 used u 'char *' cinit
    | |   `-ImplicitCastExpr 0x1369284c8 <col:19> 'char *' <LValueToRValue>
    | |     `-DeclRefExpr 0x1369284a8 <col:19> 'char *' lvalue ParmVar 0x1369280d8 's' 'char *'
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x136928548 <col:22, col:23> 'char' <LValueToRValue>
    | | `-UnaryOperator 0x136928530 <col:22, col:23> 'char' lvalue prefix '*' cannot overflow
    | |   `-ImplicitCastExpr 0x136928518 <col:23> 'char *' <LValueToRValue>
    | |     `-DeclRefExpr 0x1369284f8 <col:23> 'char *' lvalue Var 0x136928440 'u' 'char *'
    | |-<<<NULL>>>
    | `-CompoundStmt 0x136942b98 <col:28, line:24:3>
    |   |-DeclStmt 0x136928640 <line:5:5, col:23>
    |   | `-VarDecl 0x136928570 <col:5, col:21> col:10 used ch 'char' cinit
    |   |   `-ImplicitCastExpr 0x136928628 <col:19, col:21> 'char' <LValueToRValue>
    |   |     `-UnaryOperator 0x136928610 <col:19, col:21> 'char' lvalue prefix '*' cannot overflow
    |   |       `-UnaryOperator 0x1369285f8 <col:20, col:21> 'char *' postfix '++'
    |   |         `-DeclRefExpr 0x1369285d8 <col:20> 'char *' lvalue Var 0x136928440 'u' 'char *'
    |   |-IfStmt 0x136942ac0 <line:6:5, line:22:5> has_else
    |   | |-BinaryOperator 0x1369286c0 <line:6:9, col:15> 'int' '=='
    |   | | |-ImplicitCastExpr 0x1369286a8 <col:9> 'int' <IntegralCast>
    |   | | | `-ImplicitCastExpr 0x136928690 <col:9> 'char' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x136928658 <col:9> 'char' lvalue Var 0x136928570 'ch' 'char'
    |   | | `-CharacterLiteral 0x136928678 <col:15> 'int' 43
    |   | |-CompoundStmt 0x136928750 <col:20, line:8:5>
    |   | | `-BinaryOperator 0x136928730 <line:7:7, col:19> 'char' '='
    |   | |   |-DeclRefExpr 0x1369286e0 <col:7> 'char' lvalue Var 0x136928570 'ch' 'char'
    |   | |   `-ImplicitCastExpr 0x136928718 <col:19> 'char' <IntegralCast>
    |   | |     `-CharacterLiteral 0x136928700 <col:19> 'int' 32
    |   | `-IfStmt 0x136942aa0 <line:8:12, line:22:5>
    |   |   |-BinaryOperator 0x1369287d0 <line:8:16, col:22> 'int' '=='
    |   |   | |-ImplicitCastExpr 0x1369287b8 <col:16> 'int' <IntegralCast>
    |   |   | | `-ImplicitCastExpr 0x1369287a0 <col:16> 'char' <LValueToRValue>
    |   |   | |   `-DeclRefExpr 0x136928768 <col:16> 'char' lvalue Var 0x136928570 'ch' 'char'
    |   |   | `-CharacterLiteral 0x136928788 <col:22> 'int' 37
    |   |   `-CompoundStmt 0x136942a80 <col:27, line:22:5>
    |   |     |-DeclStmt 0x136940ad0 <line:9:7, col:21>
    |   |     | `-VarDecl 0x136940a00 <col:7, col:20> col:12 used c1 'char' cinit
    |   |     |   `-ImplicitCastExpr 0x136940ab8 <col:19, col:20> 'char' <LValueToRValue>
    |   |     |     `-UnaryOperator 0x136940aa0 <col:19, col:20> 'char' lvalue prefix '*' cannot overflow
    |   |     |       `-ImplicitCastExpr 0x136940a88 <col:20> 'char *' <LValueToRValue>
    |   |     |         `-DeclRefExpr 0x136940a68 <col:20> 'char *' lvalue Var 0x136928440 'u' 'char *'
    |   |     `-IfStmt 0x136942a50 <line:10:7, line:21:7> has_else
    |   |       |-BinaryOperator 0x136940df8 <line:10:11, col:73> 'int' '||'
    |   |       | |-ParenExpr 0x136940c18 <col:11, col:34> 'int'
    |   |       | | `-BinaryOperator 0x136940bf8 <col:12, col:31> 'int' '&&'
    |   |       | |   |-BinaryOperator 0x136940b50 <col:12, col:18> 'int' '>='
    |   |       | |   | |-ImplicitCastExpr 0x136940b38 <col:12> 'int' <IntegralCast>
    |   |       | |   | | `-ImplicitCastExpr 0x136940b20 <col:12> 'char' <LValueToRValue>
    |   |       | |   | |   `-DeclRefExpr 0x136940ae8 <col:12> 'char' lvalue Var 0x136940a00 'c1' 'char'
    |   |       | |   | `-CharacterLiteral 0x136940b08 <col:18> 'int' 48
    |   |       | |   `-BinaryOperator 0x136940bd8 <col:25, col:31> 'int' '<='
    |   |       | |     |-ImplicitCastExpr 0x136940bc0 <col:25> 'int' <IntegralCast>
    |   |       | |     | `-ImplicitCastExpr 0x136940ba8 <col:25> 'char' <LValueToRValue>
    |   |       | |     |   `-DeclRefExpr 0x136940b70 <col:25> 'char' lvalue Var 0x136940a00 'c1' 'char'
    |   |       | |     `-CharacterLiteral 0x136940b90 <col:31> 'int' 57
    |   |       | `-ParenExpr 0x136940dd8 <col:39, col:73> 'int'
    |   |       |   `-BinaryOperator 0x136940db8 <col:40, col:70> 'int' '&&'
    |   |       |     |-BinaryOperator 0x136940d10 <col:40, col:57> 'int' '>='
    |   |       |     | |-ImplicitCastExpr 0x136940cf8 <col:40, col:52> 'int' <IntegralCast>
    |   |       |     | | `-ParenExpr 0x136940cc0 <col:40, col:52> 'char'
    |   |       |     | |   `-CompoundAssignOperator 0x136940c90 <col:41, col:48> 'char' '&=' ComputeLHSTy='int' ComputeResultTy='int'
    |   |       |     | |     |-DeclRefExpr 0x136940c38 <col:41> 'char' lvalue Var 0x136940a00 'c1' 'char'
    |   |       |     | |     `-UnaryOperator 0x136940c78 <col:47, col:48> 'int' prefix '~' cannot overflow
    |   |       |     | |       `-IntegerLiteral 0x136940c58 <col:48> 'int' 32
    |   |       |     | `-CharacterLiteral 0x136940ce0 <col:57> 'int' 65
    |   |       |     `-BinaryOperator 0x136940d98 <col:64, col:70> 'int' '<='
    |   |       |       |-ImplicitCastExpr 0x136940d80 <col:64> 'int' <IntegralCast>
    |   |       |       | `-ImplicitCastExpr 0x136940d68 <col:64> 'char' <LValueToRValue>
    |   |       |       |   `-DeclRefExpr 0x136940d30 <col:64> 'char' lvalue Var 0x136940a00 'c1' 'char'
    |   |       |       `-CharacterLiteral 0x136940d50 <col:70> 'int' 70
    |   |       |-CompoundStmt 0x1369428c8 <col:76, line:19:7>
    |   |       | |-BinaryOperator 0x136941008 <line:11:9, col:50> 'char' '='
    |   |       | | |-DeclRefExpr 0x136940e18 <col:9> 'char' lvalue Var 0x136928570 'ch' 'char'
    |   |       | | `-ImplicitCastExpr 0x136940ff0 <col:19, col:50> 'char' <IntegralCast>
    |   |       | |   `-BinaryOperator 0x136940fd0 <col:19, col:50> 'int' '-'
    |   |       | |     |-ImplicitCastExpr 0x136940fb8 <col:19> 'int' <IntegralCast>
    |   |       | |     | `-ImplicitCastExpr 0x136940fa0 <col:19> 'char' <LValueToRValue>
    |   |       | |     |   `-DeclRefExpr 0x136940e38 <col:19> 'char' lvalue Var 0x136940a00 'c1' 'char'
    |   |       | |     `-ParenExpr 0x136940f80 <col:24, col:50> 'int'
    |   |       | |       `-ConditionalOperator 0x136940f50 <col:25, col:47> 'int'
    |   |       | |         |-BinaryOperator 0x136940ec0 <col:25, col:30> 'int' '>'
    |   |       | |         | |-ImplicitCastExpr 0x136940ea8 <col:25> 'int' <IntegralCast>
    |   |       | |         | | `-ImplicitCastExpr 0x136940e90 <col:25> 'char' <LValueToRValue>
    |   |       | |         | |   `-DeclRefExpr 0x136940e58 <col:25> 'char' lvalue Var 0x136940a00 'c1' 'char'
    |   |       | |         | `-CharacterLiteral 0x136940e78 <col:30> 'int' 57
    |   |       | |         |-BinaryOperator 0x136940f18 <col:36, col:42> 'int' '-'
    |   |       | |         | |-CharacterLiteral 0x136940ee0 <col:36> 'int' 65
    |   |       | |         | `-IntegerLiteral 0x136940ef8 <col:42> 'int' 10
    |   |       | |         `-CharacterLiteral 0x136940f38 <col:47> 'int' 48
    |   |       | |-DeclStmt 0x136941108 <line:12:9, col:23>
    |   |       | | `-VarDecl 0x136941038 <col:9, col:22> col:14 used c2 'char' cinit
    |   |       | |   `-ImplicitCastExpr 0x1369410f0 <col:19, col:22> 'char' <LValueToRValue>
    |   |       | |     `-UnaryOperator 0x1369410d8 <col:19, col:22> 'char' lvalue prefix '*' cannot overflow
    |   |       | |       `-UnaryOperator 0x1369410c0 <col:20, col:22> 'char *' prefix '++'
    |   |       | |         `-DeclRefExpr 0x1369410a0 <col:22> 'char *' lvalue Var 0x136928440 'u' 'char *'
    |   |       | `-IfStmt 0x136942898 <line:13:9, line:18:9> has_else
    |   |       |   |-BinaryOperator 0x136941430 <line:13:13, col:75> 'int' '||'
    |   |       |   | |-ParenExpr 0x136941250 <col:13, col:36> 'int'
    |   |       |   | | `-BinaryOperator 0x136941230 <col:14, col:33> 'int' '&&'
    |   |       |   | |   |-BinaryOperator 0x136941188 <col:14, col:20> 'int' '>='
    |   |       |   | |   | |-ImplicitCastExpr 0x136941170 <col:14> 'int' <IntegralCast>
    |   |       |   | |   | | `-ImplicitCastExpr 0x136941158 <col:14> 'char' <LValueToRValue>
    |   |       |   | |   | |   `-DeclRefExpr 0x136941120 <col:14> 'char' lvalue Var 0x136941038 'c2' 'char'
    |   |       |   | |   | `-CharacterLiteral 0x136941140 <col:20> 'int' 48
    |   |       |   | |   `-BinaryOperator 0x136941210 <col:27, col:33> 'int' '<='
    |   |       |   | |     |-ImplicitCastExpr 0x1369411f8 <col:27> 'int' <IntegralCast>
    |   |       |   | |     | `-ImplicitCastExpr 0x1369411e0 <col:27> 'char' <LValueToRValue>
    |   |       |   | |     |   `-DeclRefExpr 0x1369411a8 <col:27> 'char' lvalue Var 0x136941038 'c2' 'char'
    |   |       |   | |     `-CharacterLiteral 0x1369411c8 <col:33> 'int' 57
    |   |       |   | `-ParenExpr 0x136941410 <col:41, col:75> 'int'
    |   |       |   |   `-BinaryOperator 0x1369413f0 <col:42, col:72> 'int' '&&'
    |   |       |   |     |-BinaryOperator 0x136941348 <col:42, col:59> 'int' '>='
    |   |       |   |     | |-ImplicitCastExpr 0x136941330 <col:42, col:54> 'int' <IntegralCast>
    |   |       |   |     | | `-ParenExpr 0x1369412f8 <col:42, col:54> 'char'
    |   |       |   |     | |   `-CompoundAssignOperator 0x1369412c8 <col:43, col:50> 'char' '&=' ComputeLHSTy='int' ComputeResultTy='int'
    |   |       |   |     | |     |-DeclRefExpr 0x136941270 <col:43> 'char' lvalue Var 0x136941038 'c2' 'char'
    |   |       |   |     | |     `-UnaryOperator 0x1369412b0 <col:49, col:50> 'int' prefix '~' cannot overflow
    |   |       |   |     | |       `-IntegerLiteral 0x136941290 <col:50> 'int' 32
    |   |       |   |     | `-CharacterLiteral 0x136941318 <col:59> 'int' 65
    |   |       |   |     `-BinaryOperator 0x1369413d0 <col:66, col:72> 'int' '<='
    |   |       |   |       |-ImplicitCastExpr 0x1369413b8 <col:66> 'int' <IntegralCast>
    |   |       |   |       | `-ImplicitCastExpr 0x1369413a0 <col:66> 'char' <LValueToRValue>
    |   |       |   |       |   `-DeclRefExpr 0x136941368 <col:66> 'char' lvalue Var 0x136941038 'c2' 'char'
    |   |       |   |       `-CharacterLiteral 0x136941388 <col:72> 'int' 70
    |   |       |   |-CompoundStmt 0x136941768 <col:78, line:16:9>
    |   |       |   | |-BinaryOperator 0x136941710 <line:14:11, col:62> 'char' '='
    |   |       |   | | |-DeclRefExpr 0x136941450 <col:11> 'char' lvalue Var 0x136928570 'ch' 'char'
    |   |       |   | | `-ImplicitCastExpr 0x1369416f8 <col:19, col:62> 'char' <IntegralCast>
    |   |       |   | |   `-BinaryOperator 0x1369416d8 <col:19, col:62> 'int' '-'
    |   |       |   | |     |-BinaryOperator 0x136941570 <col:19, col:31> 'int' '+'
    |   |       |   | |     | |-ParenExpr 0x136941500 <col:19, col:27> 'int'
    |   |       |   | |     | | `-BinaryOperator 0x1369414e0 <col:20, col:26> 'int' '<<'
    |   |       |   | |     | |   |-ImplicitCastExpr 0x1369414c8 <col:20> 'int' <IntegralCast>
    |   |       |   | |     | |   | `-ImplicitCastExpr 0x1369414b0 <col:20> 'char' <LValueToRValue>
    |   |       |   | |     | |   |   `-DeclRefExpr 0x136941470 <col:20> 'char' lvalue Var 0x136928570 'ch' 'char'
    |   |       |   | |     | |   `-IntegerLiteral 0x136941490 <col:26> 'int' 4
    |   |       |   | |     | `-ImplicitCastExpr 0x136941558 <col:31> 'int' <IntegralCast>
    |   |       |   | |     |   `-ImplicitCastExpr 0x136941540 <col:31> 'char' <LValueToRValue>
    |   |       |   | |     |     `-DeclRefExpr 0x136941520 <col:31> 'char' lvalue Var 0x136941038 'c2' 'char'
    |   |       |   | |     `-ParenExpr 0x1369416b8 <col:36, col:62> 'int'
    |   |       |   | |       `-ConditionalOperator 0x136941688 <col:37, col:59> 'int'
    |   |       |   | |         |-BinaryOperator 0x1369415f8 <col:37, col:42> 'int' '>'
    |   |       |   | |         | |-ImplicitCastExpr 0x1369415e0 <col:37> 'int' <IntegralCast>
    |   |       |   | |         | | `-ImplicitCastExpr 0x1369415c8 <col:37> 'char' <LValueToRValue>
    |   |       |   | |         | |   `-DeclRefExpr 0x136941590 <col:37> 'char' lvalue Var 0x136941038 'c2' 'char'
    |   |       |   | |         | `-CharacterLiteral 0x1369415b0 <col:42> 'int' 57
    |   |       |   | |         |-BinaryOperator 0x136941650 <col:48, col:54> 'int' '-'
    |   |       |   | |         | |-CharacterLiteral 0x136941618 <col:48> 'int' 65
    |   |       |   | |         | `-IntegerLiteral 0x136941630 <col:54> 'int' 10
    |   |       |   | |         `-CharacterLiteral 0x136941670 <col:59> 'int' 48
    |   |       |   | `-UnaryOperator 0x136941750 <line:15:11, col:13> 'char *' prefix '++'
    |   |       |   |   `-DeclRefExpr 0x136941730 <col:13> 'char *' lvalue Var 0x136928440 'u' 'char *'
    |   |       |   `-IfStmt 0x136942878 <line:16:16, line:18:9>
    |   |       |     |-UnaryOperator 0x1369417c0 <line:16:20, col:27> 'int' prefix '!' cannot overflow
    |   |       |     | `-UnaryOperator 0x1369417a8 <col:21, col:27> 'int' postfix '++'
    |   |       |     |   `-DeclRefExpr 0x136941788 <col:21> 'int' lvalue Var 0x1369282b8 'warned' 'int'
    |   |       |     `-CompoundStmt 0x136942860 <col:31, line:18:9>
    |   |       |       `-CallExpr 0x136942800 <line:17:11, col:24> 'int'
    |   |       |         |-ImplicitCastExpr 0x1369419d0 <col:11> 'int (*)()' <FunctionToPointerDecay>
    |   |       |         | `-DeclRefExpr 0x136941900 <col:11> 'int ()' Function 0x136941848 'warn' 'int ()'
    |   |       |         |-ImplicitCastExpr 0x136942830 <col:16> 'char *' <ArrayToPointerDecay>
    |   |       |         | `-StringLiteral 0x136941960 <col:16> 'char[4]' lvalue "STR"
    |   |       |         `-ImplicitCastExpr 0x136942848 <col:23> 'char *' <LValueToRValue>
    |   |       |           `-DeclRefExpr 0x136941980 <col:23> 'char *' lvalue Var 0x136928370 'r' 'char *'
    |   |       `-IfStmt 0x136942a30 <line:19:14, line:21:7>
    |   |         |-UnaryOperator 0x136942928 <line:19:18, col:25> 'int' prefix '!' cannot overflow
    |   |         | `-UnaryOperator 0x136942910 <col:19, col:25> 'int' postfix '++'
    |   |         |   `-DeclRefExpr 0x1369428f0 <col:19> 'int' lvalue Var 0x1369282b8 'warned' 'int'
    |   |         `-CompoundStmt 0x136942a18 <col:29, line:21:7>
    |   |           `-CallExpr 0x1369429b8 <line:20:9, col:22> 'int'
    |   |             |-ImplicitCastExpr 0x1369429a0 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   |             | `-DeclRefExpr 0x136942940 <col:9> 'int ()' Function 0x136941848 'warn' 'int ()'
    |   |             |-ImplicitCastExpr 0x1369429e8 <col:14> 'char *' <ArrayToPointerDecay>
    |   |             | `-StringLiteral 0x136942960 <col:14> 'char[4]' lvalue "STR"
    |   |             `-ImplicitCastExpr 0x136942a00 <col:21> 'char *' <LValueToRValue>
    |   |               `-DeclRefExpr 0x136942980 <col:21> 'char *' lvalue Var 0x136928370 'r' 'char *'
    |   `-BinaryOperator 0x136942b78 <line:23:5, col:19> 'char' '='
    |     |-UnaryOperator 0x136942b28 <col:5, col:7> 'char' lvalue prefix '*' cannot overflow
    |     | `-UnaryOperator 0x136942b10 <col:6, col:7> 'char *' postfix '++'
    |     |   `-DeclRefExpr 0x136942af0 <col:6> 'char *' lvalue ParmVar 0x1369280d8 's' 'char *'
    |     `-ImplicitCastExpr 0x136942b60 <col:19> 'char' <LValueToRValue>
    |       `-DeclRefExpr 0x136942b40 <col:19> 'char' lvalue Var 0x136928570 'ch' 'char'
    |-BinaryOperator 0x136942c78 <line:25:3, col:19> 'char' '='
    | |-UnaryOperator 0x136942c30 <col:3, col:4> 'char' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x136942c18 <col:4> 'char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x136942bf8 <col:4> 'char *' lvalue ParmVar 0x1369280d8 's' 'char *'
    | `-ImplicitCastExpr 0x136942c60 <col:19> 'char' <IntegralCast>
    |   `-CharacterLiteral 0x136942c48 <col:19> 'int' 0
    `-ReturnStmt 0x136942cd0 <line:26:3, col:10>
      `-ImplicitCastExpr 0x136942cb8 <col:10> 'char *' <LValueToRValue>
        `-DeclRefExpr 0x136942c98 <col:10> 'char *' lvalue Var 0x136928370 'r' 'char *'
