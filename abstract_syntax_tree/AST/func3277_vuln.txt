TranslationUnitDecl 0x11d055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x11d0564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x11d055bd0 '__int128'
|-TypedefDecl 0x11d056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x11d055bf0 'unsigned __int128'
|-TypedefDecl 0x11d80be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x11d80bc00 'struct __NSConstantString_tag'
|   `-Record 0x11d056580 '__NSConstantString_tag'
|-TypedefDecl 0x11d80be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x11d055d90 '__SVInt8_t'
|-TypedefDecl 0x11d80bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x11d055db0 '__SVInt16_t'
|-TypedefDecl 0x11d80bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x11d055dd0 '__SVInt32_t'
|-TypedefDecl 0x11d80bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x11d055df0 '__SVInt64_t'
|-TypedefDecl 0x11d80c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x11d055e10 '__SVUint8_t'
|-TypedefDecl 0x11d80c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x11d055e30 '__SVUint16_t'
|-TypedefDecl 0x11d80c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x11d055e50 '__SVUint32_t'
|-TypedefDecl 0x11d80c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x11d055e70 '__SVUint64_t'
|-TypedefDecl 0x11d80c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x11d055e90 '__SVFloat16_t'
|-TypedefDecl 0x11d80c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x11d055eb0 '__SVFloat32_t'
|-TypedefDecl 0x11d80c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x11d055ed0 '__SVFloat64_t'
|-TypedefDecl 0x11d80c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x11d055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x11d80c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x11d055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x11d80c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x11d055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x11d80c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x11d055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x11d80c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x11d055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x11d80c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x11d055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x11d80c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x11d055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x11d80c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x11d055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x11d80c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x11d055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x11d80c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x11d056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x11d80c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x11d056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x11d80c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x11d056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x11d80c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x11d056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x11d80c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x11d056090 '__clang_svint8x3_t'
|-TypedefDecl 0x11d80c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x11d0560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x11d80c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x11d0560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x11d80c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x11d0560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x11d80c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x11d056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x11d80ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x11d056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x11d80cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x11d056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x11d80cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x11d056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x11d80cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x11d056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x11d80d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x11d0561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x11d80d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x11d0561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x11d80d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x11d0561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x11d80d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x11d056210 '__clang_svint8x4_t'
|-TypedefDecl 0x11d80d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x11d056230 '__clang_svint16x4_t'
|-TypedefDecl 0x11d80d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x11d056250 '__clang_svint32x4_t'
|-TypedefDecl 0x11d80d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x11d056270 '__clang_svint64x4_t'
|-TypedefDecl 0x11d80d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x11d056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x11d80d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x11d0562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x11d80d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x11d0562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x11d80d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x11d0562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x11d80d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x11d056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x11d80d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x11d056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x11d80d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x11d056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x11d80d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x11d056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x11d80da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x11d056390 '__SVBool_t'
|-TypedefDecl 0x11d80da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x11d0563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x11d80dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x11d0563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x11d80db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x11d0563f0 '__SVCount_t'
|-TypedefDecl 0x11d80dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x11d80dbb0 'char *'
|   `-BuiltinType 0x11d0556b0 'char'
|-TypedefDecl 0x11d80dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x11d80dbb0 'char *'
|   `-BuiltinType 0x11d0556b0 'char'
|-FunctionDecl 0x11d80de88 <dataset_diviso_filec/func3277_vuln.c:1:1, line:82:1> line:1:12 invalid date_from_ISO8601 'int (const char *, int *)' static
| |-ParmVarDecl 0x11d80dcd8 <col:31, col:43> col:43 used text 'const char *'
| |-ParmVarDecl 0x11d80dda8 <col:49, col:58> col:58 invalid value 'int *'
| `-CompoundStmt 0x11d827ff0 <col:65, line:82:1>
|   |-DeclStmt 0x11e00d328 <line:2:4, col:16>
|   | |-RecordDecl 0x11d80df40 <col:4, col:11> col:11 struct tm
|   | `-VarDecl 0x11d80e038 <col:4, col:14> col:14 referenced invalid tm 'struct tm'
|   |-DeclStmt 0x11e00d3c0 <line:3:4, col:9>
|   | `-VarDecl 0x11e00d358 <col:4, col:8> col:8 used n 'int'
|   |-DeclStmt 0x11e00d458 <line:4:4, col:9>
|   | `-VarDecl 0x11e00d3f0 <col:4, col:8> col:8 used i 'int'
|   |-DeclStmt 0x11e00d578 <line:5:4, col:16>
|   | `-VarDecl 0x11e00d510 <col:4, col:15> col:9 used buf 'char[30]'
|   |-IfStmt 0x11e00e050 <line:8:2, line:21:2>
|   | |-CallExpr 0x11e00d868 <line:8:6, col:23> 'char *'
|   | | |-ImplicitCastExpr 0x11e00d850 <col:6> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x11e00d7b0 <col:6> 'char *(const char *, int)' Function 0x11e00d5d0 'strchr' 'char *(const char *, int)'
|   | | |-ImplicitCastExpr 0x11e00d898 <col:14> 'const char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x11e00d7d0 <col:14> 'const char *' lvalue ParmVar 0x11d80dcd8 'text' 'const char *'
|   | | `-CharacterLiteral 0x11e00d7f0 <col:20> 'int' 45
|   | `-CompoundStmt 0x11e00e028 <col:26, line:21:2>
|   |   |-DeclStmt 0x11e00da78 <line:9:3, col:37>
|   |   | |-VarDecl 0x11e00d8c8 <col:3, col:22> col:9 used p 'char *' cinit
|   |   | | `-CStyleCastExpr 0x11e00d980 <col:13, col:22> 'char *' <NoOp>
|   |   | |   `-ImplicitCastExpr 0x11e00d968 <col:22> 'const char *' <LValueToRValue> part_of_explicit_cast
|   |   | |     `-DeclRefExpr 0x11e00d930 <col:22> 'const char *' lvalue ParmVar 0x11d80dcd8 'text' 'const char *'
|   |   | `-VarDecl 0x11e00d9c0 <col:3, col:34> col:29 used p2 'char *' cinit
|   |   |   `-ImplicitCastExpr 0x11e00da48 <col:34> 'char *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x11e00da28 <col:34> 'char[30]' lvalue Var 0x11e00d510 'buf' 'char[30]'
|   |   |-WhileStmt 0x11e00df78 <line:10:3, line:19:3>
|   |   | |-BinaryOperator 0x11e00db48 <line:10:10, col:16> 'int' '&&'
|   |   | | |-ImplicitCastExpr 0x11e00db00 <col:10> 'char *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x11e00da90 <col:10> 'char *' lvalue Var 0x11e00d8c8 'p' 'char *'
|   |   | | `-ImplicitCastExpr 0x11e00db30 <col:15, col:16> 'int' <IntegralCast>
|   |   | |   `-ImplicitCastExpr 0x11e00db18 <col:15, col:16> 'char' <LValueToRValue>
|   |   | |     `-UnaryOperator 0x11e00dae8 <col:15, col:16> 'char' lvalue prefix '*' cannot overflow
|   |   | |       `-ImplicitCastExpr 0x11e00dad0 <col:16> 'char *' <LValueToRValue>
|   |   | |         `-DeclRefExpr 0x11e00dab0 <col:16> 'char *' lvalue Var 0x11e00d8c8 'p' 'char *'
|   |   | `-CompoundStmt 0x11e00df58 <col:19, line:19:3>
|   |   |   |-IfStmt 0x11e00df00 <line:11:4, line:17:4>
|   |   |   | |-BinaryOperator 0x11e00dc00 <line:11:8, col:14> 'int' '!='
|   |   |   | | |-ImplicitCastExpr 0x11e00dbe8 <col:8, col:9> 'int' <IntegralCast>
|   |   |   | | | `-ImplicitCastExpr 0x11e00dbd0 <col:8, col:9> 'char' <LValueToRValue>
|   |   |   | | |   `-UnaryOperator 0x11e00dba0 <col:8, col:9> 'char' lvalue prefix '*' cannot overflow
|   |   |   | | |     `-ImplicitCastExpr 0x11e00db88 <col:9> 'char *' <LValueToRValue>
|   |   |   | | |       `-DeclRefExpr 0x11e00db68 <col:9> 'char *' lvalue Var 0x11e00d8c8 'p' 'char *'
|   |   |   | | `-CharacterLiteral 0x11e00dbb8 <col:14> 'int' 45
|   |   |   | `-CompoundStmt 0x11e00ded8 <col:19, line:17:4>
|   |   |   |   |-BinaryOperator 0x11e00dcd8 <line:12:5, col:12> 'char' '='
|   |   |   |   | |-UnaryOperator 0x11e00dc58 <col:5, col:6> 'char' lvalue prefix '*' cannot overflow
|   |   |   |   | | `-ImplicitCastExpr 0x11e00dc40 <col:6> 'char *' <LValueToRValue>
|   |   |   |   | |   `-DeclRefExpr 0x11e00dc20 <col:6> 'char *' lvalue Var 0x11e00d9c0 'p2' 'char *'
|   |   |   |   | `-ImplicitCastExpr 0x11e00dcc0 <col:11, col:12> 'char' <LValueToRValue>
|   |   |   |   |   `-UnaryOperator 0x11e00dca8 <col:11, col:12> 'char' lvalue prefix '*' cannot overflow
|   |   |   |   |     `-ImplicitCastExpr 0x11e00dc90 <col:12> 'char *' <LValueToRValue>
|   |   |   |   |       `-DeclRefExpr 0x11e00dc70 <col:12> 'char *' lvalue Var 0x11e00d8c8 'p' 'char *'
|   |   |   |   |-UnaryOperator 0x11e00dd18 <line:13:5, col:7> 'char *' postfix '++'
|   |   |   |   | `-DeclRefExpr 0x11e00dcf8 <col:5> 'char *' lvalue Var 0x11e00d9c0 'p2' 'char *'
|   |   |   |   `-IfStmt 0x11e00deb8 <line:14:5, line:16:5>
|   |   |   |     |-BinaryOperator 0x11e00de38 <line:14:9, col:29> 'int' '>='
|   |   |   |     | |-ImplicitCastExpr 0x11e00de20 <col:9, col:12> 'unsigned long' <IntegralCast>
|   |   |   |     | | `-BinaryOperator 0x11e00dda0 <col:9, col:12> 'long' '-'
|   |   |   |     | |   |-ImplicitCastExpr 0x11e00dd70 <col:9> 'char *' <LValueToRValue>
|   |   |   |     | |   | `-DeclRefExpr 0x11e00dd30 <col:9> 'char *' lvalue Var 0x11e00d9c0 'p2' 'char *'
|   |   |   |     | |   `-ImplicitCastExpr 0x11e00dd88 <col:12> 'char *' <ArrayToPointerDecay>
|   |   |   |     | |     `-DeclRefExpr 0x11e00dd50 <col:12> 'char[30]' lvalue Var 0x11e00d510 'buf' 'char[30]'
|   |   |   |     | `-UnaryExprOrTypeTraitExpr 0x11e00de00 <col:19, col:29> 'unsigned long' sizeof
|   |   |   |     |   `-ParenExpr 0x11e00dde0 <col:25, col:29> 'char[30]' lvalue
|   |   |   |     |     `-DeclRefExpr 0x11e00ddc0 <col:26> 'char[30]' lvalue Var 0x11e00d510 'buf' 'char[30]' non_odr_use_unevaluated
|   |   |   |     `-CompoundStmt 0x11e00dea0 <col:32, line:16:5>
|   |   |   |       `-ReturnStmt 0x11e00de90 <line:15:6, col:14>
|   |   |   |         `-UnaryOperator 0x11e00de78 <col:13, col:14> 'int' prefix '-'
|   |   |   |           `-IntegerLiteral 0x11e00de58 <col:14> 'int' 1
|   |   |   `-UnaryOperator 0x11e00df40 <line:18:4, col:5> 'char *' postfix '++'
|   |   |     `-DeclRefExpr 0x11e00df20 <col:4> 'char *' lvalue Var 0x11e00d8c8 'p' 'char *'
|   |   `-BinaryOperator 0x11e00e008 <line:20:4, col:11> 'const char *' '='
|   |     |-DeclRefExpr 0x11e00df98 <col:4> 'const char *' lvalue ParmVar 0x11d80dcd8 'text' 'const char *'
|   |     `-ImplicitCastExpr 0x11e00dff0 <col:11> 'const char *' <NoOp>
|   |       `-ImplicitCastExpr 0x11e00dfd8 <col:11> 'char *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x11e00dfb8 <col:11> 'char[30]' lvalue Var 0x11e00d510 'buf' 'char[30]'
|   |-BinaryOperator 0x11e00e138 <line:24:4, col:19> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x11e00e0b8 <col:4, col:7> '<dependent type>' contains-errors lvalue .tm_isdst
|   | | `-RecoveryExpr 0x11e00e090 <col:4> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x11e00e070 <col:4> 'struct tm' lvalue Var 0x11d80e038 'tm' 'struct tm'
|   | `-UnaryOperator 0x11e00e120 <col:18, col:19> 'int' prefix '-'
|   |   `-IntegerLiteral 0x11e00e100 <col:19> 'int' 1
|   |-BinaryOperator 0x11e00e198 <line:28:4, col:8> 'int' '='
|   | |-DeclRefExpr 0x11e00e158 <col:4> 'int' lvalue Var 0x11e00d358 'n' 'int'
|   | `-IntegerLiteral 0x11e00e178 <col:8> 'int' 1000
|   |-BinaryOperator 0x11e00f868 <line:29:4, col:17> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x11e00f800 <col:4, col:7> '<dependent type>' contains-errors lvalue .tm_year
|   | | `-RecoveryExpr 0x11e00e1d8 <col:4> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x11e00e1b8 <col:4> 'struct tm' lvalue Var 0x11d80e038 'tm' 'struct tm'
|   | `-IntegerLiteral 0x11e00f848 <col:17> 'int' 0
|   |-ForStmt 0x11e00ff08 <line:30:4, line:34:4>
|   | |-BinaryOperator 0x11e00f8c8 <line:30:8, col:12> 'int' '='
|   | | |-DeclRefExpr 0x11e00f888 <col:8> 'int' lvalue Var 0x11e00d3f0 'i' 'int'
|   | | `-IntegerLiteral 0x11e00f8a8 <col:12> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x11e00f940 <col:15, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x11e00f928 <col:15> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x11e00f8e8 <col:15> 'int' lvalue Var 0x11e00d3f0 'i' 'int'
|   | | `-IntegerLiteral 0x11e00f908 <col:19> 'int' 4
|   | |-UnaryOperator 0x11e00f980 <col:22, col:23> 'int' postfix '++'
|   | | `-DeclRefExpr 0x11e00f960 <col:22> 'int' lvalue Var 0x11e00d3f0 'i' 'int'
|   | `-CompoundStmt 0x11e00fee0 <col:27, line:34:4>
|   |   |-CallExpr 0x11e00fbe8 <line:31:7, col:31> 'int'
|   |   | |-ImplicitCastExpr 0x11e00fbd0 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x11e00faf0 <col:7> 'int ()' Function 0x11e00fa38 'XMLRPC_IS_NUMBER' 'int ()'
|   |   | `-ImplicitCastExpr 0x11e00fc28 <col:24, col:30> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x11e00fc10 <col:24, col:30> 'char' <LValueToRValue>
|   |   |     `-ArraySubscriptExpr 0x11e00fb80 <col:24, col:30> 'const char' lvalue
|   |   |       |-ImplicitCastExpr 0x11e00fb50 <col:24> 'const char *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x11e00fb10 <col:24> 'const char *' lvalue ParmVar 0x11d80dcd8 'text' 'const char *'
|   |   |       `-ImplicitCastExpr 0x11e00fb68 <col:29> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x11e00fb30 <col:29> 'int' lvalue Var 0x11e00d3f0 'i' 'int'
|   |   |-CompoundAssignOperator 0x11e00fe40 <line:32:7, col:35> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   |   | |-CXXDependentScopeMemberExpr 0x11e00fc88 <col:7, col:10> '<dependent type>' contains-errors lvalue .tm_year
|   |   | | `-RecoveryExpr 0x11e00fc60 <col:7> '<dependent type>' contains-errors lvalue
|   |   | |   `-DeclRefExpr 0x11e00fc40 <col:7> 'struct tm' lvalue Var 0x11d80e038 'tm' 'struct tm'
|   |   | `-BinaryOperator 0x11e00fe20 <col:21, col:35> 'int' '*'
|   |   |   |-ParenExpr 0x11e00fdc8 <col:21, col:33> 'int'
|   |   |   | `-BinaryOperator 0x11e00fda8 <col:22, col:30> 'int' '-'
|   |   |   |   |-ImplicitCastExpr 0x11e00fd90 <col:22, col:28> 'int' <IntegralCast>
|   |   |   |   | `-ImplicitCastExpr 0x11e00fd78 <col:22, col:28> 'char' <LValueToRValue>
|   |   |   |   |   `-ArraySubscriptExpr 0x11e00fd40 <col:22, col:28> 'const char' lvalue
|   |   |   |   |     |-ImplicitCastExpr 0x11e00fd10 <col:22> 'const char *' <LValueToRValue>
|   |   |   |   |     | `-DeclRefExpr 0x11e00fcd0 <col:22> 'const char *' lvalue ParmVar 0x11d80dcd8 'text' 'const char *'
|   |   |   |   |     `-ImplicitCastExpr 0x11e00fd28 <col:27> 'int' <LValueToRValue>
|   |   |   |   |       `-DeclRefExpr 0x11e00fcf0 <col:27> 'int' lvalue Var 0x11e00d3f0 'i' 'int'
|   |   |   |   `-CharacterLiteral 0x11e00fd60 <col:30> 'int' 48
|   |   |   `-ImplicitCastExpr 0x11e00fe08 <col:35> 'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x11e00fde8 <col:35> 'int' lvalue Var 0x11e00d358 'n' 'int'
|   |   `-CompoundAssignOperator 0x11e00feb0 <line:33:7, col:12> 'int' '/=' ComputeLHSTy='int' ComputeResultTy='int'
|   |     |-DeclRefExpr 0x11e00fe70 <col:7> 'int' lvalue Var 0x11e00d358 'n' 'int'
|   |     `-IntegerLiteral 0x11e00fe90 <col:12> 'int' 10
|   |-BinaryOperator 0x11e00ff80 <line:35:4, col:8> 'int' '='
|   | |-DeclRefExpr 0x11e00ff40 <col:4> 'int' lvalue Var 0x11e00d358 'n' 'int'
|   | `-IntegerLiteral 0x11e00ff60 <col:8> 'int' 10
|   |-BinaryOperator 0x11e010050 <line:36:4, col:16> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x11e00ffe8 <col:4, col:7> '<dependent type>' contains-errors lvalue .tm_mon
|   | | `-RecoveryExpr 0x11e00ffc0 <col:4> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x11e00ffa0 <col:4> 'struct tm' lvalue Var 0x11d80e038 'tm' 'struct tm'
|   | `-IntegerLiteral 0x11e010030 <col:16> 'int' 0
|   |-ForStmt 0x11e0105a8 <line:37:4, line:41:4>
|   | |-BinaryOperator 0x11e0100b0 <line:37:8, col:12> 'int' '='
|   | | |-DeclRefExpr 0x11e010070 <col:8> 'int' lvalue Var 0x11e00d3f0 'i' 'int'
|   | | `-IntegerLiteral 0x11e010090 <col:12> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x11e010128 <col:15, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x11e010110 <col:15> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x11e0100d0 <col:15> 'int' lvalue Var 0x11e00d3f0 'i' 'int'
|   | | `-IntegerLiteral 0x11e0100f0 <col:19> 'int' 2
|   | |-UnaryOperator 0x11e010168 <col:22, col:23> 'int' postfix '++'
|   | | `-DeclRefExpr 0x11e010148 <col:22> 'int' lvalue Var 0x11e00d3f0 'i' 'int'
|   | `-CompoundStmt 0x11e010580 <col:27, line:41:4>
|   |   |-CallExpr 0x11e010248 <line:38:7, col:31> 'int'
|   |   | |-ImplicitCastExpr 0x11e010230 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x11e010180 <col:7> 'int ()' Function 0x11e00fa38 'XMLRPC_IS_NUMBER' 'int ()'
|   |   | `-ImplicitCastExpr 0x11e010288 <col:24, col:30> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x11e010270 <col:24, col:30> 'char' <LValueToRValue>
|   |   |     `-ArraySubscriptExpr 0x11e010210 <col:24, col:30> 'const char' lvalue
|   |   |       |-ImplicitCastExpr 0x11e0101e0 <col:24> 'const char *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x11e0101a0 <col:24> 'const char *' lvalue ParmVar 0x11d80dcd8 'text' 'const char *'
|   |   |       `-ImplicitCastExpr 0x11e0101f8 <col:29> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x11e0101c0 <col:29> 'int' lvalue Var 0x11e00d3f0 'i' 'int'
|   |   |-CompoundAssignOperator 0x11e0104e0 <line:39:7, col:36> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   |   | |-CXXDependentScopeMemberExpr 0x11e0102e8 <col:7, col:10> '<dependent type>' contains-errors lvalue .tm_mon
|   |   | | `-RecoveryExpr 0x11e0102c0 <col:7> '<dependent type>' contains-errors lvalue
|   |   | |   `-DeclRefExpr 0x11e0102a0 <col:7> 'struct tm' lvalue Var 0x11d80e038 'tm' 'struct tm'
|   |   | `-BinaryOperator 0x11e0104c0 <col:20, col:36> 'int' '*'
|   |   |   |-ParenExpr 0x11e010468 <col:20, col:34> 'int'
|   |   |   | `-BinaryOperator 0x11e010448 <col:21, col:31> 'int' '-'
|   |   |   |   |-ImplicitCastExpr 0x11e010430 <col:21, col:29> 'int' <IntegralCast>
|   |   |   |   | `-ImplicitCastExpr 0x11e010418 <col:21, col:29> 'char' <LValueToRValue>
|   |   |   |   |   `-ArraySubscriptExpr 0x11e0103e0 <col:21, col:29> 'const char' lvalue
|   |   |   |   |     |-ImplicitCastExpr 0x11e0103c8 <col:21> 'const char *' <LValueToRValue>
|   |   |   |   |     | `-DeclRefExpr 0x11e010330 <col:21> 'const char *' lvalue ParmVar 0x11d80dcd8 'text' 'const char *'
|   |   |   |   |     `-BinaryOperator 0x11e0103a8 <col:26, col:28> 'int' '+'
|   |   |   |   |       |-ImplicitCastExpr 0x11e010390 <col:26> 'int' <LValueToRValue>
|   |   |   |   |       | `-DeclRefExpr 0x11e010350 <col:26> 'int' lvalue Var 0x11e00d3f0 'i' 'int'
|   |   |   |   |       `-IntegerLiteral 0x11e010370 <col:28> 'int' 4
|   |   |   |   `-CharacterLiteral 0x11e010400 <col:31> 'int' 48
|   |   |   `-ImplicitCastExpr 0x11e0104a8 <col:36> 'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x11e010488 <col:36> 'int' lvalue Var 0x11e00d358 'n' 'int'
|   |   `-CompoundAssignOperator 0x11e010550 <line:40:7, col:12> 'int' '/=' ComputeLHSTy='int' ComputeResultTy='int'
|   |     |-DeclRefExpr 0x11e010510 <col:7> 'int' lvalue Var 0x11e00d358 'n' 'int'
|   |     `-IntegerLiteral 0x11e010530 <col:12> 'int' 10
|   |-UnaryOperator 0x11e010670 <line:42:4, col:14> '<dependent type>' contains-errors postfix '--' cannot overflow
|   | `-CXXDependentScopeMemberExpr 0x11e010628 <col:4, col:7> '<dependent type>' contains-errors lvalue .tm_mon
|   |   `-RecoveryExpr 0x11e010600 <col:4> '<dependent type>' contains-errors lvalue
|   |     `-DeclRefExpr 0x11e0105e0 <col:4> 'struct tm' lvalue Var 0x11d80e038 'tm' 'struct tm'
|   |-BinaryOperator 0x11e0106c8 <line:44:4, col:8> 'int' '='
|   | |-DeclRefExpr 0x11e010688 <col:4> 'int' lvalue Var 0x11e00d358 'n' 'int'
|   | `-IntegerLiteral 0x11e0106a8 <col:8> 'int' 10
|   |-BinaryOperator 0x11e010798 <line:45:4, col:17> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x11e010730 <col:4, col:7> '<dependent type>' contains-errors lvalue .tm_mday
|   | | `-RecoveryExpr 0x11e010708 <col:4> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x11e0106e8 <col:4> 'struct tm' lvalue Var 0x11d80e038 'tm' 'struct tm'
|   | `-IntegerLiteral 0x11e010778 <col:17> 'int' 0
|   |-ForStmt 0x11e0112f8 <line:46:4, line:50:4>
|   | |-BinaryOperator 0x11e010e00 <line:46:8, col:12> 'int' '='
|   | | |-DeclRefExpr 0x11e0107b8 <col:8> 'int' lvalue Var 0x11e00d3f0 'i' 'int'
|   | | `-IntegerLiteral 0x11e0107d8 <col:12> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x11e010e78 <col:15, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x11e010e60 <col:15> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x11e010e20 <col:15> 'int' lvalue Var 0x11e00d3f0 'i' 'int'
|   | | `-IntegerLiteral 0x11e010e40 <col:19> 'int' 2
|   | |-UnaryOperator 0x11e010eb8 <col:22, col:23> 'int' postfix '++'
|   | | `-DeclRefExpr 0x11e010e98 <col:22> 'int' lvalue Var 0x11e00d3f0 'i' 'int'
|   | `-CompoundStmt 0x11e0112d0 <col:27, line:50:4>
|   |   |-CallExpr 0x11e010f98 <line:47:7, col:31> 'int'
|   |   | |-ImplicitCastExpr 0x11e010f80 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x11e010ed0 <col:7> 'int ()' Function 0x11e00fa38 'XMLRPC_IS_NUMBER' 'int ()'
|   |   | `-ImplicitCastExpr 0x11e010fd8 <col:24, col:30> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x11e010fc0 <col:24, col:30> 'char' <LValueToRValue>
|   |   |     `-ArraySubscriptExpr 0x11e010f60 <col:24, col:30> 'const char' lvalue
|   |   |       |-ImplicitCastExpr 0x11e010f30 <col:24> 'const char *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x11e010ef0 <col:24> 'const char *' lvalue ParmVar 0x11d80dcd8 'text' 'const char *'
|   |   |       `-ImplicitCastExpr 0x11e010f48 <col:29> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x11e010f10 <col:29> 'int' lvalue Var 0x11e00d3f0 'i' 'int'
|   |   |-CompoundAssignOperator 0x11e011230 <line:48:7, col:37> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   |   | |-CXXDependentScopeMemberExpr 0x11e011038 <col:7, col:10> '<dependent type>' contains-errors lvalue .tm_mday
|   |   | | `-RecoveryExpr 0x11e011010 <col:7> '<dependent type>' contains-errors lvalue
|   |   | |   `-DeclRefExpr 0x11e010ff0 <col:7> 'struct tm' lvalue Var 0x11d80e038 'tm' 'struct tm'
|   |   | `-BinaryOperator 0x11e011210 <col:21, col:37> 'int' '*'
|   |   |   |-ParenExpr 0x11e0111b8 <col:21, col:35> 'int'
|   |   |   | `-BinaryOperator 0x11e011198 <col:22, col:32> 'int' '-'
|   |   |   |   |-ImplicitCastExpr 0x11e011180 <col:22, col:30> 'int' <IntegralCast>
|   |   |   |   | `-ImplicitCastExpr 0x11e011168 <col:22, col:30> 'char' <LValueToRValue>
|   |   |   |   |   `-ArraySubscriptExpr 0x11e011130 <col:22, col:30> 'const char' lvalue
|   |   |   |   |     |-ImplicitCastExpr 0x11e011118 <col:22> 'const char *' <LValueToRValue>
|   |   |   |   |     | `-DeclRefExpr 0x11e011080 <col:22> 'const char *' lvalue ParmVar 0x11d80dcd8 'text' 'const char *'
|   |   |   |   |     `-BinaryOperator 0x11e0110f8 <col:27, col:29> 'int' '+'
|   |   |   |   |       |-ImplicitCastExpr 0x11e0110e0 <col:27> 'int' <LValueToRValue>
|   |   |   |   |       | `-DeclRefExpr 0x11e0110a0 <col:27> 'int' lvalue Var 0x11e00d3f0 'i' 'int'
|   |   |   |   |       `-IntegerLiteral 0x11e0110c0 <col:29> 'int' 6
|   |   |   |   `-CharacterLiteral 0x11e011150 <col:32> 'int' 48
|   |   |   `-ImplicitCastExpr 0x11e0111f8 <col:37> 'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x11e0111d8 <col:37> 'int' lvalue Var 0x11e00d358 'n' 'int'
|   |   `-CompoundAssignOperator 0x11e0112a0 <line:49:7, col:12> 'int' '/=' ComputeLHSTy='int' ComputeResultTy='int'
|   |     |-DeclRefExpr 0x11e011260 <col:7> 'int' lvalue Var 0x11e00d358 'n' 'int'
|   |     `-IntegerLiteral 0x11e011280 <col:12> 'int' 10
|   |-BinaryOperator 0x11e011370 <line:52:4, col:8> 'int' '='
|   | |-DeclRefExpr 0x11e011330 <col:4> 'int' lvalue Var 0x11e00d358 'n' 'int'
|   | `-IntegerLiteral 0x11e011350 <col:8> 'int' 10
|   |-BinaryOperator 0x11e011440 <line:53:4, col:17> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x11e0113d8 <col:4, col:7> '<dependent type>' contains-errors lvalue .tm_hour
|   | | `-RecoveryExpr 0x11e0113b0 <col:4> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x11e011390 <col:4> 'struct tm' lvalue Var 0x11d80e038 'tm' 'struct tm'
|   | `-IntegerLiteral 0x11e011420 <col:17> 'int' 0
|   |-ForStmt 0x11e011998 <line:54:4, line:58:4>
|   | |-BinaryOperator 0x11e0114a0 <line:54:8, col:12> 'int' '='
|   | | |-DeclRefExpr 0x11e011460 <col:8> 'int' lvalue Var 0x11e00d3f0 'i' 'int'
|   | | `-IntegerLiteral 0x11e011480 <col:12> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x11e011518 <col:15, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x11e011500 <col:15> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x11e0114c0 <col:15> 'int' lvalue Var 0x11e00d3f0 'i' 'int'
|   | | `-IntegerLiteral 0x11e0114e0 <col:19> 'int' 2
|   | |-UnaryOperator 0x11e011558 <col:22, col:23> 'int' postfix '++'
|   | | `-DeclRefExpr 0x11e011538 <col:22> 'int' lvalue Var 0x11e00d3f0 'i' 'int'
|   | `-CompoundStmt 0x11e011970 <col:27, line:58:4>
|   |   |-CallExpr 0x11e011638 <line:55:7, col:31> 'int'
|   |   | |-ImplicitCastExpr 0x11e011620 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x11e011570 <col:7> 'int ()' Function 0x11e00fa38 'XMLRPC_IS_NUMBER' 'int ()'
|   |   | `-ImplicitCastExpr 0x11e011678 <col:24, col:30> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x11e011660 <col:24, col:30> 'char' <LValueToRValue>
|   |   |     `-ArraySubscriptExpr 0x11e011600 <col:24, col:30> 'const char' lvalue
|   |   |       |-ImplicitCastExpr 0x11e0115d0 <col:24> 'const char *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x11e011590 <col:24> 'const char *' lvalue ParmVar 0x11d80dcd8 'text' 'const char *'
|   |   |       `-ImplicitCastExpr 0x11e0115e8 <col:29> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x11e0115b0 <col:29> 'int' lvalue Var 0x11e00d3f0 'i' 'int'
|   |   |-CompoundAssignOperator 0x11e0118d0 <line:56:7, col:37> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   |   | |-CXXDependentScopeMemberExpr 0x11e0116d8 <col:7, col:10> '<dependent type>' contains-errors lvalue .tm_hour
|   |   | | `-RecoveryExpr 0x11e0116b0 <col:7> '<dependent type>' contains-errors lvalue
|   |   | |   `-DeclRefExpr 0x11e011690 <col:7> 'struct tm' lvalue Var 0x11d80e038 'tm' 'struct tm'
|   |   | `-BinaryOperator 0x11e0118b0 <col:21, col:37> 'int' '*'
|   |   |   |-ParenExpr 0x11e011858 <col:21, col:35> 'int'
|   |   |   | `-BinaryOperator 0x11e011838 <col:22, col:32> 'int' '-'
|   |   |   |   |-ImplicitCastExpr 0x11e011820 <col:22, col:30> 'int' <IntegralCast>
|   |   |   |   | `-ImplicitCastExpr 0x11e011808 <col:22, col:30> 'char' <LValueToRValue>
|   |   |   |   |   `-ArraySubscriptExpr 0x11e0117d0 <col:22, col:30> 'const char' lvalue
|   |   |   |   |     |-ImplicitCastExpr 0x11e0117b8 <col:22> 'const char *' <LValueToRValue>
|   |   |   |   |     | `-DeclRefExpr 0x11e011720 <col:22> 'const char *' lvalue ParmVar 0x11d80dcd8 'text' 'const char *'
|   |   |   |   |     `-BinaryOperator 0x11e011798 <col:27, col:29> 'int' '+'
|   |   |   |   |       |-ImplicitCastExpr 0x11e011780 <col:27> 'int' <LValueToRValue>
|   |   |   |   |       | `-DeclRefExpr 0x11e011740 <col:27> 'int' lvalue Var 0x11e00d3f0 'i' 'int'
|   |   |   |   |       `-IntegerLiteral 0x11e011760 <col:29> 'int' 9
|   |   |   |   `-CharacterLiteral 0x11e0117f0 <col:32> 'int' 48
|   |   |   `-ImplicitCastExpr 0x11e011898 <col:37> 'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x11e011878 <col:37> 'int' lvalue Var 0x11e00d358 'n' 'int'
|   |   `-CompoundAssignOperator 0x11e011940 <line:57:7, col:12> 'int' '/=' ComputeLHSTy='int' ComputeResultTy='int'
|   |     |-DeclRefExpr 0x11e011900 <col:7> 'int' lvalue Var 0x11e00d358 'n' 'int'
|   |     `-IntegerLiteral 0x11e011920 <col:12> 'int' 10
|   |-BinaryOperator 0x11e011a10 <line:60:4, col:8> 'int' '='
|   | |-DeclRefExpr 0x11e0119d0 <col:4> 'int' lvalue Var 0x11e00d358 'n' 'int'
|   | `-IntegerLiteral 0x11e0119f0 <col:8> 'int' 10
|   |-BinaryOperator 0x11e011ae0 <line:61:4, col:16> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x11e011a78 <col:4, col:7> '<dependent type>' contains-errors lvalue .tm_min
|   | | `-RecoveryExpr 0x11e011a50 <col:4> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x11e011a30 <col:4> 'struct tm' lvalue Var 0x11d80e038 'tm' 'struct tm'
|   | `-IntegerLiteral 0x11e011ac0 <col:16> 'int' 0
|   |-ForStmt 0x11d827638 <line:62:4, line:66:4>
|   | |-BinaryOperator 0x11e011b40 <line:62:8, col:12> 'int' '='
|   | | |-DeclRefExpr 0x11e011b00 <col:8> 'int' lvalue Var 0x11e00d3f0 'i' 'int'
|   | | `-IntegerLiteral 0x11e011b20 <col:12> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x11e011bb8 <col:15, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x11e011ba0 <col:15> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x11e011b60 <col:15> 'int' lvalue Var 0x11e00d3f0 'i' 'int'
|   | | `-IntegerLiteral 0x11e011b80 <col:19> 'int' 2
|   | |-UnaryOperator 0x11e011bf8 <col:22, col:23> 'int' postfix '++'
|   | | `-DeclRefExpr 0x11e011bd8 <col:22> 'int' lvalue Var 0x11e00d3f0 'i' 'int'
|   | `-CompoundStmt 0x11d827610 <col:27, line:66:4>
|   |   |-CallExpr 0x11e011cd8 <line:63:7, col:31> 'int'
|   |   | |-ImplicitCastExpr 0x11e011cc0 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x11e011c10 <col:7> 'int ()' Function 0x11e00fa38 'XMLRPC_IS_NUMBER' 'int ()'
|   |   | `-ImplicitCastExpr 0x11e011d18 <col:24, col:30> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x11e011d00 <col:24, col:30> 'char' <LValueToRValue>
|   |   |     `-ArraySubscriptExpr 0x11e011ca0 <col:24, col:30> 'const char' lvalue
|   |   |       |-ImplicitCastExpr 0x11e011c70 <col:24> 'const char *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x11e011c30 <col:24> 'const char *' lvalue ParmVar 0x11d80dcd8 'text' 'const char *'
|   |   |       `-ImplicitCastExpr 0x11e011c88 <col:29> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x11e011c50 <col:29> 'int' lvalue Var 0x11e00d3f0 'i' 'int'
|   |   |-CompoundAssignOperator 0x11d827570 <line:64:7, col:37> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   |   | |-CXXDependentScopeMemberExpr 0x11e011d78 <col:7, col:10> '<dependent type>' contains-errors lvalue .tm_min
|   |   | | `-RecoveryExpr 0x11e011d50 <col:7> '<dependent type>' contains-errors lvalue
|   |   | |   `-DeclRefExpr 0x11e011d30 <col:7> 'struct tm' lvalue Var 0x11d80e038 'tm' 'struct tm'
|   |   | `-BinaryOperator 0x11d827550 <col:20, col:37> 'int' '*'
|   |   |   |-ParenExpr 0x11d8274f8 <col:20, col:35> 'int'
|   |   |   | `-BinaryOperator 0x11d8274d8 <col:21, col:32> 'int' '-'
|   |   |   |   |-ImplicitCastExpr 0x11d8274c0 <col:21, col:30> 'int' <IntegralCast>
|   |   |   |   | `-ImplicitCastExpr 0x11d8274a8 <col:21, col:30> 'char' <LValueToRValue>
|   |   |   |   |   `-ArraySubscriptExpr 0x11d827470 <col:21, col:30> 'const char' lvalue
|   |   |   |   |     |-ImplicitCastExpr 0x11d827458 <col:21> 'const char *' <LValueToRValue>
|   |   |   |   |     | `-DeclRefExpr 0x11e011dc0 <col:21> 'const char *' lvalue ParmVar 0x11d80dcd8 'text' 'const char *'
|   |   |   |   |     `-BinaryOperator 0x11d827438 <col:26, col:28> 'int' '+'
|   |   |   |   |       |-ImplicitCastExpr 0x11d827420 <col:26> 'int' <LValueToRValue>
|   |   |   |   |       | `-DeclRefExpr 0x11e011de0 <col:26> 'int' lvalue Var 0x11e00d3f0 'i' 'int'
|   |   |   |   |       `-IntegerLiteral 0x11d827400 <col:28> 'int' 12
|   |   |   |   `-CharacterLiteral 0x11d827490 <col:32> 'int' 48
|   |   |   `-ImplicitCastExpr 0x11d827538 <col:37> 'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x11d827518 <col:37> 'int' lvalue Var 0x11e00d358 'n' 'int'
|   |   `-CompoundAssignOperator 0x11d8275e0 <line:65:7, col:12> 'int' '/=' ComputeLHSTy='int' ComputeResultTy='int'
|   |     |-DeclRefExpr 0x11d8275a0 <col:7> 'int' lvalue Var 0x11e00d358 'n' 'int'
|   |     `-IntegerLiteral 0x11d8275c0 <col:12> 'int' 10
|   |-BinaryOperator 0x11d8276b0 <line:68:4, col:8> 'int' '='
|   | |-DeclRefExpr 0x11d827670 <col:4> 'int' lvalue Var 0x11e00d358 'n' 'int'
|   | `-IntegerLiteral 0x11d827690 <col:8> 'int' 10
|   |-BinaryOperator 0x11d827780 <line:69:4, col:16> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x11d827718 <col:4, col:7> '<dependent type>' contains-errors lvalue .tm_sec
|   | | `-RecoveryExpr 0x11d8276f0 <col:4> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x11d8276d0 <col:4> 'struct tm' lvalue Var 0x11d80e038 'tm' 'struct tm'
|   | `-IntegerLiteral 0x11d827760 <col:16> 'int' 0
|   |-ForStmt 0x11d827cd8 <line:70:4, line:74:4>
|   | |-BinaryOperator 0x11d8277e0 <line:70:8, col:12> 'int' '='
|   | | |-DeclRefExpr 0x11d8277a0 <col:8> 'int' lvalue Var 0x11e00d3f0 'i' 'int'
|   | | `-IntegerLiteral 0x11d8277c0 <col:12> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x11d827858 <col:15, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x11d827840 <col:15> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x11d827800 <col:15> 'int' lvalue Var 0x11e00d3f0 'i' 'int'
|   | | `-IntegerLiteral 0x11d827820 <col:19> 'int' 2
|   | |-UnaryOperator 0x11d827898 <col:22, col:23> 'int' postfix '++'
|   | | `-DeclRefExpr 0x11d827878 <col:22> 'int' lvalue Var 0x11e00d3f0 'i' 'int'
|   | `-CompoundStmt 0x11d827cb0 <col:27, line:74:4>
|   |   |-CallExpr 0x11d827978 <line:71:7, col:31> 'int'
|   |   | |-ImplicitCastExpr 0x11d827960 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x11d8278b0 <col:7> 'int ()' Function 0x11e00fa38 'XMLRPC_IS_NUMBER' 'int ()'
|   |   | `-ImplicitCastExpr 0x11d8279b8 <col:24, col:30> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x11d8279a0 <col:24, col:30> 'char' <LValueToRValue>
|   |   |     `-ArraySubscriptExpr 0x11d827940 <col:24, col:30> 'const char' lvalue
|   |   |       |-ImplicitCastExpr 0x11d827910 <col:24> 'const char *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x11d8278d0 <col:24> 'const char *' lvalue ParmVar 0x11d80dcd8 'text' 'const char *'
|   |   |       `-ImplicitCastExpr 0x11d827928 <col:29> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x11d8278f0 <col:29> 'int' lvalue Var 0x11e00d3f0 'i' 'int'
|   |   |-CompoundAssignOperator 0x11d827c10 <line:72:7, col:37> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   |   | |-CXXDependentScopeMemberExpr 0x11d827a18 <col:7, col:10> '<dependent type>' contains-errors lvalue .tm_sec
|   |   | | `-RecoveryExpr 0x11d8279f0 <col:7> '<dependent type>' contains-errors lvalue
|   |   | |   `-DeclRefExpr 0x11d8279d0 <col:7> 'struct tm' lvalue Var 0x11d80e038 'tm' 'struct tm'
|   |   | `-BinaryOperator 0x11d827bf0 <col:20, col:37> 'int' '*'
|   |   |   |-ParenExpr 0x11d827b98 <col:20, col:35> 'int'
|   |   |   | `-BinaryOperator 0x11d827b78 <col:21, col:32> 'int' '-'
|   |   |   |   |-ImplicitCastExpr 0x11d827b60 <col:21, col:30> 'int' <IntegralCast>
|   |   |   |   | `-ImplicitCastExpr 0x11d827b48 <col:21, col:30> 'char' <LValueToRValue>
|   |   |   |   |   `-ArraySubscriptExpr 0x11d827b10 <col:21, col:30> 'const char' lvalue
|   |   |   |   |     |-ImplicitCastExpr 0x11d827af8 <col:21> 'const char *' <LValueToRValue>
|   |   |   |   |     | `-DeclRefExpr 0x11d827a60 <col:21> 'const char *' lvalue ParmVar 0x11d80dcd8 'text' 'const char *'
|   |   |   |   |     `-BinaryOperator 0x11d827ad8 <col:26, col:28> 'int' '+'
|   |   |   |   |       |-ImplicitCastExpr 0x11d827ac0 <col:26> 'int' <LValueToRValue>
|   |   |   |   |       | `-DeclRefExpr 0x11d827a80 <col:26> 'int' lvalue Var 0x11e00d3f0 'i' 'int'
|   |   |   |   |       `-IntegerLiteral 0x11d827aa0 <col:28> 'int' 15
|   |   |   |   `-CharacterLiteral 0x11d827b30 <col:32> 'int' 48
|   |   |   `-ImplicitCastExpr 0x11d827bd8 <col:37> 'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x11d827bb8 <col:37> 'int' lvalue Var 0x11e00d358 'n' 'int'
|   |   `-CompoundAssignOperator 0x11d827c80 <line:73:7, col:12> 'int' '/=' ComputeLHSTy='int' ComputeResultTy='int'
|   |     |-DeclRefExpr 0x11d827c40 <col:7> 'int' lvalue Var 0x11e00d358 'n' 'int'
|   |     `-IntegerLiteral 0x11d827c60 <col:12> 'int' 10
|   |-CompoundAssignOperator 0x11d827dc0 <line:76:4, col:18> '<dependent type>' contains-errors '-=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   | |-CXXDependentScopeMemberExpr 0x11d827d58 <col:4, col:7> '<dependent type>' contains-errors lvalue .tm_year
|   | | `-RecoveryExpr 0x11d827d30 <col:4> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x11d827d10 <col:4> 'struct tm' lvalue Var 0x11d80e038 'tm' 'struct tm'
|   | `-IntegerLiteral 0x11d827da0 <col:18> 'int' 1900
|   |-BinaryOperator 0x11d827fa0 <line:78:4, col:25> '<dependent type>' contains-errors '='
|   | |-UnaryOperator 0x11d827e28 <col:4, col:5> '<dependent type>' contains-errors prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x11d827e10 <col:5> '<dependent type>' contains-errors <LValueToRValue>
|   | |   `-RecoveryExpr 0x11d827df0 <col:5> '<dependent type>' contains-errors lvalue
|   | `-CallExpr 0x11d827f78 <col:13, col:25> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x11d827f20 <col:13> 'int ()' Function 0x11d827e68 'mkgmtime' 'int ()'
|   |   `-UnaryOperator 0x11d827f60 <col:22, col:23> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |     `-RecoveryExpr 0x11d827f40 <col:23> '<dependent type>' contains-errors lvalue
|   `-ReturnStmt 0x11d827fe0 <line:80:4, col:11>
|     `-IntegerLiteral 0x11d827fc0 <col:11> 'int' 0
`-FunctionDecl 0x11e00d5d0 <line:8:6> col:6 implicit used strchr 'char *(const char *, int)' extern
  |-ParmVarDecl 0x11e00d6d0 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x11e00d738 <<invalid sloc>> <invalid sloc> 'int'
  `-BuiltinAttr 0x11e00d678 <<invalid sloc>> Implicit 893
