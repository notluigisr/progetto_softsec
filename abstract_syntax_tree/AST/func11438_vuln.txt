TranslationUnitDecl 0x122855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1228564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x122855bd0 '__int128'
|-TypedefDecl 0x122856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x122855bf0 'unsigned __int128'
|-TypedefDecl 0x122926230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x122926000 'struct __NSConstantString_tag'
|   `-Record 0x122856580 '__NSConstantString_tag'
|-TypedefDecl 0x122926298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x122855d90 '__SVInt8_t'
|-TypedefDecl 0x122926300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x122855db0 '__SVInt16_t'
|-TypedefDecl 0x122926368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x122855dd0 '__SVInt32_t'
|-TypedefDecl 0x1229263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x122855df0 '__SVInt64_t'
|-TypedefDecl 0x122926438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x122855e10 '__SVUint8_t'
|-TypedefDecl 0x1229264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x122855e30 '__SVUint16_t'
|-TypedefDecl 0x122926508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x122855e50 '__SVUint32_t'
|-TypedefDecl 0x122926570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x122855e70 '__SVUint64_t'
|-TypedefDecl 0x1229265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x122855e90 '__SVFloat16_t'
|-TypedefDecl 0x122926640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x122855eb0 '__SVFloat32_t'
|-TypedefDecl 0x1229266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x122855ed0 '__SVFloat64_t'
|-TypedefDecl 0x122926710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x122855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x122926778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x122855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1229267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x122855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x122926848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x122855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1229268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x122855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x122926918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x122855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x122926980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x122855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1229269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x122855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x122926a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x122855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x122926ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x122856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x122926b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x122856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x122926b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x122856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x122926bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x122856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x122926c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x122856090 '__clang_svint8x3_t'
|-TypedefDecl 0x122926cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1228560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x122926d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1228560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x122926d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1228560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x122926df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x122856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x122926e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x122856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x122926ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x122856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x122926f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x122856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x122926f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x122856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x122927800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1228561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x122927868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1228561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1229278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1228561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x122927938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x122856210 '__clang_svint8x4_t'
|-TypedefDecl 0x1229279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x122856230 '__clang_svint16x4_t'
|-TypedefDecl 0x122927a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x122856250 '__clang_svint32x4_t'
|-TypedefDecl 0x122927a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x122856270 '__clang_svint64x4_t'
|-TypedefDecl 0x122927ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x122856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x122927b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1228562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x122927ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1228562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x122927c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1228562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x122927c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x122856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x122927ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x122856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x122927d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x122856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x122927db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x122856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x122927e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x122856390 '__SVBool_t'
|-TypedefDecl 0x122927e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1228563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x122927ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1228563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x122927f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1228563f0 '__SVCount_t'
|-TypedefDecl 0x122927ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x122927fb0 'char *'
|   `-BuiltinType 0x1228556b0 'char'
|-TypedefDecl 0x122928068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x122927fb0 'char *'
|   `-BuiltinType 0x1228556b0 'char'
|-FunctionDecl 0x1229281f0 <dataset_diviso_filec/func11438_vuln.c:1:1, line:58:1> line:1:13 invalid Sp_split_regexp 'void (int *)' static
| |-ParmVarDecl 0x122928128 <col:29, col:39> col:39 invalid J 'int *'
| `-CompoundStmt 0x122946400 <line:2:1, line:58:1>
|   |-DeclStmt 0x122928338 <line:4:2, col:18>
|   | `-VarDecl 0x1229282d0 <col:2, col:14> col:14 used text 'const char *'
|   |-DeclStmt 0x1229284f0 <line:5:2, col:19>
|   | |-VarDecl 0x122928368 <col:2, col:6> col:6 used limit 'int'
|   | |-VarDecl 0x1229283e8 <col:2, col:13> col:13 used len 'int'
|   | `-VarDecl 0x122928468 <col:2, col:18> col:18 used k 'int'
|   |-DeclStmt 0x1229287b8 <line:6:2, col:31>
|   | |-VarDecl 0x122928520 <col:2, col:14> col:14 used p 'const char *'
|   | |-VarDecl 0x1229285a0 <col:2, col:18> col:18 used a 'const char *'
|   | |-VarDecl 0x122928620 <col:2, col:22> col:22 used b 'const char *'
|   | |-VarDecl 0x1229286a0 <col:2, col:26> col:26 used c 'const char *'
|   | `-VarDecl 0x122928720 <col:2, col:30> col:30 used e 'const char *'
|   |-BinaryOperator 0x122941df0 <line:9:2, col:25> 'const char *' contains-errors '='
|   | |-DeclRefExpr 0x1229287d0 <col:2> 'const char *' lvalue Var 0x1229282d0 'text' 'const char *'
|   | `-CallExpr 0x122941dc0 <col:9, col:25> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x122941d60 <col:9> 'int ()' Function 0x122941ca8 'checkstring' 'int ()'
|   |   |-RecoveryExpr 0x122941d80 <col:21> '<dependent type>' contains-errors lvalue
|   |   `-IntegerLiteral 0x122941da0 <col:24> 'int' 0
|   |-BinaryOperator 0x122942310 <line:11:2, col:57> 'int' contains-errors '='
|   | |-DeclRefExpr 0x122941f80 <col:2> 'int' lvalue Var 0x122928368 'limit' 'int'
|   | `-ConditionalOperator 0x1229422e0 <col:10, col:57> '<dependent type>' contains-errors
|   |   |-CallExpr 0x1229420e0 <col:10, col:27> '<dependent type>' contains-errors
|   |   | |-DeclRefExpr 0x122942080 <col:10> 'int ()' Function 0x122941fc8 'js_isdefined' 'int ()'
|   |   | |-RecoveryExpr 0x1229420a0 <col:23> '<dependent type>' contains-errors lvalue
|   |   | `-IntegerLiteral 0x1229420c0 <col:26> 'int' 2
|   |   |-CallExpr 0x122942250 <col:31, col:48> '<dependent type>' contains-errors
|   |   | |-DeclRefExpr 0x1229421f0 <col:31> 'int ()' Function 0x122942138 'js_tointeger' 'int ()'
|   |   | |-RecoveryExpr 0x122942210 <col:44> '<dependent type>' contains-errors lvalue
|   |   | `-IntegerLiteral 0x122942230 <col:47> 'int' 2
|   |   `-BinaryOperator 0x1229422c0 <col:52, col:57> 'int' '<<'
|   |     |-IntegerLiteral 0x122942280 <col:52> 'int' 1
|   |     `-IntegerLiteral 0x1229422a0 <col:57> 'int' 30
|   |-CallExpr 0x122942450 <line:13:2, col:15> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x122942410 <col:2> 'int ()' Function 0x122942358 'js_newarray' 'int ()'
|   | `-RecoveryExpr 0x122942430 <col:14> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x1229424b8 <line:14:2, col:8> 'int' '='
|   | |-DeclRefExpr 0x122942478 <col:2> 'int' lvalue Var 0x1229283e8 'len' 'int'
|   | `-IntegerLiteral 0x122942498 <col:8> 'int' 0
|   |-BinaryOperator 0x122943e20 <line:16:2, col:24> 'const char *' '='
|   | |-DeclRefExpr 0x1229424d8 <col:2> 'const char *' lvalue Var 0x122928720 'e' 'const char *'
|   | `-BinaryOperator 0x122943e00 <col:6, col:24> 'const char *' '+'
|   |   |-ImplicitCastExpr 0x122942bd8 <col:6> 'const char *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1229424f8 <col:6> 'const char *' lvalue Var 0x1229282d0 'text' 'const char *'
|   |   `-CallExpr 0x122942b98 <col:13, col:24> 'unsigned long'
|   |     |-ImplicitCastExpr 0x122942b80 <col:13> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x122942af0 <col:13> 'unsigned long (const char *)' Function 0x122942980 'strlen' 'unsigned long (const char *)'
|   |     `-ImplicitCastExpr 0x122942bc0 <col:20> 'const char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x122942b10 <col:20> 'const char *' lvalue Var 0x1229282d0 'text' 'const char *'
|   |-IfStmt 0x122944650 <line:19:2, line:26:2>
|   | |-BinaryOperator 0x122943eb0 <line:19:6, col:11> 'int' '=='
|   | | |-ImplicitCastExpr 0x122943e80 <col:6> 'const char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x122943e40 <col:6> 'const char *' lvalue Var 0x122928720 'e' 'const char *'
|   | | `-ImplicitCastExpr 0x122943e98 <col:11> 'const char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x122943e60 <col:11> 'const char *' lvalue Var 0x1229282d0 'text' 'const char *'
|   | `-CompoundStmt 0x122944630 <col:17, line:26:2>
|   |   |-IfStmt 0x122944600 <line:20:3, line:24:3>
|   |   | |-CallExpr 0x122944180 <line:20:7, col:39> '<dependent type>' contains-errors
|   |   | | |-DeclRefExpr 0x122943fb0 <col:7> 'int ()' Function 0x122943ef8 'js_regexec' 'int ()'
|   |   | | |-CXXDependentScopeMemberExpr 0x122944100 <col:18, col:22> '<dependent type>' contains-errors lvalue ->prog
|   |   | | | `-RecoveryExpr 0x1229440e0 <col:18> '<dependent type>' contains-errors lvalue
|   |   | | |-DeclRefExpr 0x122944030 <col:28> 'const char *' lvalue Var 0x1229282d0 'text' 'const char *'
|   |   | | |-UnaryOperator 0x122944168 <col:34, col:35> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   | | | `-RecoveryExpr 0x122944148 <col:35> '<dependent type>' contains-errors lvalue
|   |   | | `-IntegerLiteral 0x122944080 <col:38> 'int' 0
|   |   | `-CompoundStmt 0x1229445d8 <col:42, line:24:3>
|   |   |   |-IfStmt 0x122944260 <line:21:4, col:22>
|   |   |   | |-BinaryOperator 0x122944230 <col:8, col:15> 'int' '=='
|   |   |   | | |-ImplicitCastExpr 0x122944200 <col:8> 'int' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x1229441c0 <col:8> 'int' lvalue Var 0x1229283e8 'len' 'int'
|   |   |   | | `-ImplicitCastExpr 0x122944218 <col:15> 'int' <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x1229441e0 <col:15> 'int' lvalue Var 0x122928368 'limit' 'int'
|   |   |   | `-ReturnStmt 0x122944250 <col:22>
|   |   |   |-CallExpr 0x1229443f8 <line:22:4, col:24> '<dependent type>' contains-errors
|   |   |   | |-DeclRefExpr 0x122944360 <col:4> 'int ()' Function 0x1229442a8 'js_pushliteral' 'int ()'
|   |   |   | |-RecoveryExpr 0x122944380 <col:19> '<dependent type>' contains-errors lvalue
|   |   |   | `-StringLiteral 0x1229443e0 <col:22> 'char[1]' lvalue ""
|   |   |   `-CallExpr 0x1229445a0 <line:23:4, col:24> '<dependent type>' contains-errors
|   |   |     |-DeclRefExpr 0x122944508 <col:4> 'int ()' Function 0x122944450 'js_setindex' 'int ()'
|   |   |     |-RecoveryExpr 0x122944528 <col:16> '<dependent type>' contains-errors lvalue
|   |   |     |-UnaryOperator 0x122944568 <col:19, col:20> 'int' prefix '-'
|   |   |     | `-IntegerLiteral 0x122944548 <col:20> 'int' 2
|   |   |     `-IntegerLiteral 0x122944580 <col:23> 'int' 0
|   |   `-ReturnStmt 0x122944620 <line:25:3>
|   |-BinaryOperator 0x122944708 <line:28:2, col:10> 'const char *' '='
|   | |-DeclRefExpr 0x122944670 <col:2> 'const char *' lvalue Var 0x122928520 'p' 'const char *'
|   | `-BinaryOperator 0x1229446e8 <col:6, col:10> 'const char *' '='
|   |   |-DeclRefExpr 0x122944690 <col:6> 'const char *' lvalue Var 0x1229285a0 'a' 'const char *'
|   |   `-ImplicitCastExpr 0x1229446d0 <col:10> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1229446b0 <col:10> 'const char *' lvalue Var 0x1229282d0 'text' 'const char *'
|   |-WhileStmt 0x1229460e0 <line:29:2, line:53:2>
|   | |-BinaryOperator 0x122944798 <line:29:9, col:13> 'int' '<'
|   | | |-ImplicitCastExpr 0x122944768 <col:9> 'const char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x122944728 <col:9> 'const char *' lvalue Var 0x1229285a0 'a' 'const char *'
|   | | `-ImplicitCastExpr 0x122944780 <col:13> 'const char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x122944748 <col:13> 'const char *' lvalue Var 0x122928720 'e' 'const char *'
|   | `-CompoundStmt 0x1229460a0 <col:16, line:53:2>
|   |   |-IfStmt 0x122944b48 <line:30:3, line:31:4>
|   |   | |-CallExpr 0x122944b00 <line:30:7, col:60> '<dependent type>' contains-errors
|   |   | | |-DeclRefExpr 0x1229447b8 <col:7> 'int ()' Function 0x122943ef8 'js_regexec' 'int ()'
|   |   | | |-CXXDependentScopeMemberExpr 0x1229449e0 <col:18, col:22> '<dependent type>' contains-errors lvalue ->prog
|   |   | | | `-RecoveryExpr 0x1229449c0 <col:18> '<dependent type>' contains-errors lvalue
|   |   | | |-DeclRefExpr 0x122944838 <col:28> 'const char *' lvalue Var 0x1229285a0 'a' 'const char *'
|   |   | | |-UnaryOperator 0x122944a48 <col:31, col:32> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   | | | `-RecoveryExpr 0x122944a28 <col:32> '<dependent type>' contains-errors lvalue
|   |   | | `-ConditionalOperator 0x122944ad0 <col:35, col:59> '<dependent type>' contains-errors
|   |   | |   |-BinaryOperator 0x122944a90 <col:35, col:39> 'int' '>'
|   |   | |   | |-ImplicitCastExpr 0x122944a60 <col:35> 'const char *' <LValueToRValue>
|   |   | |   | | `-DeclRefExpr 0x122944888 <col:35> 'const char *' lvalue Var 0x1229285a0 'a' 'const char *'
|   |   | |   | `-ImplicitCastExpr 0x122944a78 <col:39> 'const char *' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x1229448a8 <col:39> 'const char *' lvalue Var 0x1229282d0 'text' 'const char *'
|   |   | |   |-RecoveryExpr 0x122944ab0 <col:46> '<dependent type>' contains-errors lvalue
|   |   | |   `-IntegerLiteral 0x122944930 <col:59> 'int' 0
|   |   | `-BreakStmt 0x122944b40 <line:31:4>
|   |   |-IfStmt 0x122944cd8 <line:37:3, line:40:3>
|   |   | |-BinaryOperator 0x122944c58 <line:37:7, col:12> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x122944c28 <col:7> 'const char *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x122944be8 <col:7> 'const char *' lvalue Var 0x122928620 'b' 'const char *'
|   |   | | `-ImplicitCastExpr 0x122944c40 <col:12> 'const char *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x122944c08 <col:12> 'const char *' lvalue Var 0x122928520 'p' 'const char *'
|   |   | `-CompoundStmt 0x122944cb8 <col:15, line:40:3>
|   |   |   |-UnaryOperator 0x122944c98 <line:38:4, col:6> 'const char *' prefix '++'
|   |   |   | `-DeclRefExpr 0x122944c78 <col:6> 'const char *' lvalue Var 0x1229285a0 'a' 'const char *'
|   |   |   `-ContinueStmt 0x122944cb0 <line:39:4>
|   |   |-IfStmt 0x122944d98 <line:42:3, col:21>
|   |   | |-BinaryOperator 0x122944d68 <col:7, col:14> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x122944d38 <col:7> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x122944cf8 <col:7> 'int' lvalue Var 0x1229283e8 'len' 'int'
|   |   | | `-ImplicitCastExpr 0x122944d50 <col:14> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x122944d18 <col:14> 'int' lvalue Var 0x122928368 'limit' 'int'
|   |   | `-ReturnStmt 0x122944d88 <col:21>
|   |   |-CallExpr 0x122945ba8 <line:43:3, col:29> '<dependent type>' contains-errors
|   |   | |-DeclRefExpr 0x122945ab8 <col:3> 'int ()' Function 0x122945a00 'js_pushlstring' 'int ()'
|   |   | |-RecoveryExpr 0x122945ad8 <col:18> '<dependent type>' contains-errors lvalue
|   |   | |-DeclRefExpr 0x122945af8 <col:21> 'const char *' lvalue Var 0x122928520 'p' 'const char *'
|   |   | `-BinaryOperator 0x122945b88 <col:24, col:28> 'long' '-'
|   |   |   |-ImplicitCastExpr 0x122945b58 <col:24> 'const char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x122945b18 <col:24> 'const char *' lvalue Var 0x122928620 'b' 'const char *'
|   |   |   `-ImplicitCastExpr 0x122945b70 <col:28> 'const char *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x122945b38 <col:28> 'const char *' lvalue Var 0x122928520 'p' 'const char *'
|   |   |-CallExpr 0x122945c90 <line:44:3, col:27> '<dependent type>' contains-errors
|   |   | |-DeclRefExpr 0x122945be0 <col:3> 'int ()' Function 0x122944450 'js_setindex' 'int ()'
|   |   | |-RecoveryExpr 0x122945c00 <col:15> '<dependent type>' contains-errors lvalue
|   |   | |-UnaryOperator 0x122945c40 <col:18, col:19> 'int' prefix '-'
|   |   | | `-IntegerLiteral 0x122945c20 <col:19> 'int' 2
|   |   | `-UnaryOperator 0x122945c78 <col:22, col:25> 'int' postfix '++'
|   |   |   `-DeclRefExpr 0x122945c58 <col:22> 'int' lvalue Var 0x1229283e8 'len' 'int'
|   |   `-BinaryOperator 0x122946080 <line:52:3, col:11> 'const char *' '='
|   |     |-DeclRefExpr 0x122945fe8 <col:3> 'const char *' lvalue Var 0x1229285a0 'a' 'const char *'
|   |     `-BinaryOperator 0x122946060 <col:7, col:11> 'const char *' '='
|   |       |-DeclRefExpr 0x122946008 <col:7> 'const char *' lvalue Var 0x122928520 'p' 'const char *'
|   |       `-ImplicitCastExpr 0x122946048 <col:11> 'const char *' <LValueToRValue>
|   |         `-DeclRefExpr 0x122946028 <col:11> 'const char *' lvalue Var 0x1229286a0 'c' 'const char *'
|   |-IfStmt 0x1229461a0 <line:55:2, col:20>
|   | |-BinaryOperator 0x122946170 <col:6, col:13> 'int' '=='
|   | | |-ImplicitCastExpr 0x122946140 <col:6> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x122946100 <col:6> 'int' lvalue Var 0x1229283e8 'len' 'int'
|   | | `-ImplicitCastExpr 0x122946158 <col:13> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x122946120 <col:13> 'int' lvalue Var 0x122928368 'limit' 'int'
|   | `-ReturnStmt 0x122946190 <col:20>
|   |-CallExpr 0x122946300 <line:56:2, col:20> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x1229462a0 <col:2> 'int ()' Function 0x1229461e8 'js_pushstring' 'int ()'
|   | |-RecoveryExpr 0x1229462c0 <col:16> '<dependent type>' contains-errors lvalue
|   | `-DeclRefExpr 0x1229462e0 <col:19> 'const char *' lvalue Var 0x122928520 'p' 'const char *'
|   `-CallExpr 0x1229463c8 <line:57:2, col:24> '<dependent type>' contains-errors
|     |-DeclRefExpr 0x122946330 <col:2> 'int ()' Function 0x122944450 'js_setindex' 'int ()'
|     |-RecoveryExpr 0x122946350 <col:14> '<dependent type>' contains-errors lvalue
|     |-UnaryOperator 0x122946390 <col:17, col:18> 'int' prefix '-'
|     | `-IntegerLiteral 0x122946370 <col:18> 'int' 2
|     `-DeclRefExpr 0x1229463a8 <col:21> 'int' lvalue Var 0x1229283e8 'len' 'int'
`-FunctionDecl 0x122942980 <line:16:13> col:13 implicit used strlen 'unsigned long (const char *)' extern
  |-ParmVarDecl 0x122942a80 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x122942a28 <<invalid sloc>> Implicit 902
