TranslationUnitDecl 0x128055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1280564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x128055bd0 '__int128'
|-TypedefDecl 0x128056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x128055bf0 'unsigned __int128'
|-TypedefDecl 0x128126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x128126000 'struct __NSConstantString_tag'
|   `-Record 0x128056580 '__NSConstantString_tag'
|-TypedefDecl 0x128126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x128055d90 '__SVInt8_t'
|-TypedefDecl 0x128126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x128055db0 '__SVInt16_t'
|-TypedefDecl 0x128126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x128055dd0 '__SVInt32_t'
|-TypedefDecl 0x1281263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x128055df0 '__SVInt64_t'
|-TypedefDecl 0x128126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x128055e10 '__SVUint8_t'
|-TypedefDecl 0x1281264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x128055e30 '__SVUint16_t'
|-TypedefDecl 0x128126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x128055e50 '__SVUint32_t'
|-TypedefDecl 0x128126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x128055e70 '__SVUint64_t'
|-TypedefDecl 0x1281265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x128055e90 '__SVFloat16_t'
|-TypedefDecl 0x128126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x128055eb0 '__SVFloat32_t'
|-TypedefDecl 0x1281266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x128055ed0 '__SVFloat64_t'
|-TypedefDecl 0x128126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x128055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x128126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x128055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1281267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x128055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x128126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x128055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1281268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x128055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x128126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x128055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x128126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x128055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1281269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x128055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x128126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x128055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x128126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x128056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x128126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x128056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x128126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x128056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x128126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x128056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x128126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x128056090 '__clang_svint8x3_t'
|-TypedefDecl 0x128126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1280560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x128126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1280560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x128126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1280560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x128126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x128056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x128126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x128056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x128126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x128056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x128126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x128056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x128126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x128056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x128127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1280561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x128127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1280561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1281278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1280561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x128127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x128056210 '__clang_svint8x4_t'
|-TypedefDecl 0x1281279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x128056230 '__clang_svint16x4_t'
|-TypedefDecl 0x128127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x128056250 '__clang_svint32x4_t'
|-TypedefDecl 0x128127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x128056270 '__clang_svint64x4_t'
|-TypedefDecl 0x128127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x128056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x128127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1280562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x128127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1280562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x128127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1280562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x128127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x128056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x128127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x128056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x128127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x128056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x128127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x128056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x128127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x128056390 '__SVBool_t'
|-TypedefDecl 0x128127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1280563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x128127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1280563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x128127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1280563f0 '__SVCount_t'
|-TypedefDecl 0x128127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x128127fb0 'char *'
|   `-BuiltinType 0x1280556b0 'char'
|-TypedefDecl 0x128128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x128127fb0 'char *'
|   `-BuiltinType 0x1280556b0 'char'
`-FunctionDecl 0x128128568 <dataset_diviso_filec/func682_nonvuln.c:1:1, line:32:1> line:1:12 invalid alpn_cb 'int (int *, const unsigned char **, unsigned char *, const unsigned char *, unsigned int, void *)' static
  |-ParmVarDecl 0x128128128 <col:20, col:25> col:25 invalid s 'int *'
  |-ParmVarDecl 0x128128210 <col:28, col:50> col:50 used out 'const unsigned char **'
  |-ParmVarDecl 0x1281282c8 <col:55, col:70> col:70 used outlen 'unsigned char *'
  |-ParmVarDecl 0x128128348 <line:2:20, col:41> col:41 used in 'const unsigned char *'
  |-ParmVarDecl 0x1281283c8 <col:45, col:58> col:58 used inlen 'unsigned int'
  |-ParmVarDecl 0x128128448 <col:65, col:71> col:71 used arg 'void *'
  `-CompoundStmt 0x1058090a8 <line:3:1, line:32:1>
    |-IfStmt 0x1281423c0 <line:6:5, line:17:5>
    | |-UnaryOperator 0x1281286f8 <line:6:9, col:10> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x1281286e0 <col:10> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x1281286c0 <col:10> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x128142390 <col:19, line:17:5>
    |   |-DeclStmt 0x128128790 <line:8:9, col:19>
    |   | `-VarDecl 0x128128728 <col:9, col:18> col:18 used i 'unsigned int'
    |   |-CallExpr 0x128141a00 <line:9:9, col:36> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x128141910 <col:9> 'int ()' Function 0x128141858 'BIO_printf' 'int ()'
    |   | |-RecoveryExpr 0x1281419e0 <col:20> '<dependent type>' contains-errors lvalue
    |   | `-StringLiteral 0x128141990 <col:31> 'char[4]' lvalue "STR"
    |   |-ForStmt 0x128142250 <line:10:9, line:15:9>
    |   | |-BinaryOperator 0x128141a88 <line:10:14, col:18> 'unsigned int' '='
    |   | | |-DeclRefExpr 0x128141a30 <col:14> 'unsigned int' lvalue Var 0x128128728 'i' 'unsigned int'
    |   | | `-ImplicitCastExpr 0x128141a70 <col:18> 'unsigned int' <IntegralCast>
    |   | |   `-IntegerLiteral 0x128141a50 <col:18> 'int' 0
    |   | |-<<<NULL>>>
    |   | |-BinaryOperator 0x128141b18 <col:21, col:25> 'int' '<'
    |   | | |-ImplicitCastExpr 0x128141ae8 <col:21> 'unsigned int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x128141aa8 <col:21> 'unsigned int' lvalue Var 0x128128728 'i' 'unsigned int'
    |   | | `-ImplicitCastExpr 0x128141b00 <col:25> 'unsigned int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x128141ac8 <col:25> 'unsigned int' lvalue ParmVar 0x1281283c8 'inlen' 'unsigned int'
    |   | |-<<<NULL>>>
    |   | `-CompoundStmt 0x128142228 <col:33, line:15:9>
    |   |   |-IfStmt 0x128141d58 <line:11:13, line:12:46>
    |   |   | |-ImplicitCastExpr 0x128141b58 <line:11:17> 'unsigned int' <LValueToRValue>
    |   |   | | `-DeclRefExpr 0x128141b38 <col:17> 'unsigned int' lvalue Var 0x128128728 'i' 'unsigned int'
    |   |   | `-CallExpr 0x128141d20 <line:12:17, col:46> '<dependent type>' contains-errors
    |   |   |   |-DeclRefExpr 0x128141c50 <col:17> 'int ()' Function 0x128141b98 'BIO_write' 'int ()'
    |   |   |   |-RecoveryExpr 0x128141d00 <col:27> '<dependent type>' contains-errors lvalue
    |   |   |   |-StringLiteral 0x128141c88 <col:38> 'char[4]' lvalue "STR"
    |   |   |   `-IntegerLiteral 0x128141ca8 <col:45> 'int' 2
    |   |   |-CallExpr 0x128142088 <line:13:13, col:51> '<dependent type>' contains-errors
    |   |   | |-DeclRefExpr 0x128141d78 <col:13> 'int ()' Function 0x128141b98 'BIO_write' 'int ()'
    |   |   | |-RecoveryExpr 0x128141f78 <col:23> '<dependent type>' contains-errors lvalue
    |   |   | |-UnaryOperator 0x128142020 <col:34, col:43> 'const unsigned char *' prefix '&' cannot overflow
    |   |   | | `-ArraySubscriptExpr 0x128142000 <col:35, col:43> 'const unsigned char' lvalue
    |   |   | |   |-ImplicitCastExpr 0x128141fe8 <col:35> 'const unsigned char *' <LValueToRValue>
    |   |   | |   | `-DeclRefExpr 0x128141db0 <col:35> 'const unsigned char *' lvalue ParmVar 0x128128348 'in' 'const unsigned char *'
    |   |   | |   `-BinaryOperator 0x128141fc8 <col:38, col:42> 'unsigned int' '+'
    |   |   | |     |-ImplicitCastExpr 0x128141f98 <col:38> 'unsigned int' <LValueToRValue>
    |   |   | |     | `-DeclRefExpr 0x128141dd0 <col:38> 'unsigned int' lvalue Var 0x128128728 'i' 'unsigned int'
    |   |   | |     `-ImplicitCastExpr 0x128141fb0 <col:42> 'unsigned int' <IntegralCast>
    |   |   | |       `-IntegerLiteral 0x128141df0 <col:42> 'int' 1
    |   |   | `-ArraySubscriptExpr 0x128142068 <col:46, col:50> 'const unsigned char' lvalue
    |   |   |   |-ImplicitCastExpr 0x128142038 <col:46> 'const unsigned char *' <LValueToRValue>
    |   |   |   | `-DeclRefExpr 0x128141eb0 <col:46> 'const unsigned char *' lvalue ParmVar 0x128128348 'in' 'const unsigned char *'
    |   |   |   `-ImplicitCastExpr 0x128142050 <col:49> 'unsigned int' <LValueToRValue>
    |   |   |     `-DeclRefExpr 0x128141ed0 <col:49> 'unsigned int' lvalue Var 0x128128728 'i' 'unsigned int'
    |   |   `-CompoundAssignOperator 0x1281421f8 <line:14:13, col:26> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    |   |     |-DeclRefExpr 0x1281420c0 <col:13> 'unsigned int' lvalue Var 0x128128728 'i' 'unsigned int'
    |   |     `-ImplicitCastExpr 0x1281421e0 <col:18, col:26> 'unsigned int' <IntegralCast>
    |   |       `-BinaryOperator 0x1281421c0 <col:18, col:26> 'int' '+'
    |   |         |-ImplicitCastExpr 0x1281421a8 <col:18, col:22> 'int' <IntegralCast>
    |   |         | `-ImplicitCastExpr 0x128142190 <col:18, col:22> 'unsigned char' <LValueToRValue>
    |   |         |   `-ArraySubscriptExpr 0x128142150 <col:18, col:22> 'const unsigned char' lvalue
    |   |         |     |-ImplicitCastExpr 0x128142120 <col:18> 'const unsigned char *' <LValueToRValue>
    |   |         |     | `-DeclRefExpr 0x1281420e0 <col:18> 'const unsigned char *' lvalue ParmVar 0x128128348 'in' 'const unsigned char *'
    |   |         |     `-ImplicitCastExpr 0x128142138 <col:21> 'unsigned int' <LValueToRValue>
    |   |         |       `-DeclRefExpr 0x128142100 <col:21> 'unsigned int' lvalue Var 0x128128728 'i' 'unsigned int'
    |   |         `-IntegerLiteral 0x128142170 <col:26> 'int' 1
    |   `-CallExpr 0x128142358 <line:16:9, col:38> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x128142288 <col:9> 'int ()' Function 0x128141b98 'BIO_write' 'int ()'
    |     |-RecoveryExpr 0x128142338 <col:19> '<dependent type>' contains-errors lvalue
    |     |-StringLiteral 0x1281422c0 <col:30> 'char[4]' lvalue "STR"
    |     `-IntegerLiteral 0x1281422e0 <col:37> 'int' 1
    |-IfStmt 0x105808dc0 <line:19:5, line:23:5>
    | |-BinaryOperator 0x105808d40 <line:19:9, line:21:20> 'int' contains-errors '!='
    | | |-CallExpr 0x105808cd0 <line:19:9, line:21:15> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x1281424c0 <line:19:9> 'int ()' Function 0x128142408 'SSL_select_next_proto' 'int ()'
    | | | |-CStyleCastExpr 0x1281427d0 <line:20:10, col:28> 'unsigned char **' <NoOp>
    | | | | `-ImplicitCastExpr 0x1281427b8 <col:28> 'const unsigned char **' <LValueToRValue> part_of_explicit_cast
    | | | |   `-DeclRefExpr 0x1281424e0 <col:28> 'const unsigned char **' lvalue ParmVar 0x128128210 'out' 'const unsigned char **'
    | | | |-DeclRefExpr 0x128142590 <col:33> 'unsigned char *' lvalue ParmVar 0x1281282c8 'outlen' 'unsigned char *'
    | | | |-CXXDependentScopeMemberExpr 0x105808c20 <col:41, col:51> '<dependent type>' contains-errors lvalue ->data
    | | | | `-RecoveryExpr 0x105808c00 <col:41> '<dependent type>' contains-errors lvalue
    | | | |-CXXDependentScopeMemberExpr 0x105808c88 <col:57, col:67> '<dependent type>' contains-errors lvalue ->len
    | | | | `-RecoveryExpr 0x105808c68 <col:57> '<dependent type>' contains-errors lvalue
    | | | |-DeclRefExpr 0x128142670 <col:72> 'const unsigned char *' lvalue ParmVar 0x128128348 'in' 'const unsigned char *'
    | | | `-DeclRefExpr 0x128142690 <line:21:10> 'unsigned int' lvalue ParmVar 0x1281283c8 'inlen' 'unsigned int'
    | | `-RecoveryExpr 0x105808d20 <col:20> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x105808da8 <col:44, line:23:5>
    |   `-ReturnStmt 0x105808d98 <line:22:9, col:16>
    |     `-RecoveryExpr 0x105808d78 <col:16> '<dependent type>' contains-errors lvalue
    `-IfStmt 0x105809088 <line:25:5, line:29:5>
      |-UnaryOperator 0x105808e60 <line:25:9, col:10> '<dependent type>' contains-errors prefix '!' cannot overflow
      | `-ImplicitCastExpr 0x105808e48 <col:10> '<dependent type>' contains-errors <LValueToRValue>
      |   `-RecoveryExpr 0x105808e28 <col:10> '<dependent type>' contains-errors lvalue
      `-CompoundStmt 0x105809070 <col:19, line:29:5>
        `-CallExpr 0x105808f20 <line:26:9, col:36> '<dependent type>' contains-errors
          |-DeclRefExpr 0x105808e78 <col:9> 'int ()' Function 0x128141858 'BIO_printf' 'int ()'
          |-RecoveryExpr 0x105808f00 <col:20> '<dependent type>' contains-errors lvalue
          `-StringLiteral 0x105808eb0 <col:31> 'char[4]' lvalue "STR"
