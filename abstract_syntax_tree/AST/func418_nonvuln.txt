TranslationUnitDecl 0x121825008 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x121825eb8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1218255d0 '__int128'
|-TypedefDecl 0x121825f28 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1218255f0 'unsigned __int128'
|-TypedefDecl 0x12103f030 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12103ee00 'struct __NSConstantString_tag'
|   `-Record 0x121825f80 '__NSConstantString_tag'
|-TypedefDecl 0x12103f098 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x121825790 '__SVInt8_t'
|-TypedefDecl 0x12103f100 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x1218257b0 '__SVInt16_t'
|-TypedefDecl 0x12103f168 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x1218257d0 '__SVInt32_t'
|-TypedefDecl 0x12103f1d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x1218257f0 '__SVInt64_t'
|-TypedefDecl 0x12103f238 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x121825810 '__SVUint8_t'
|-TypedefDecl 0x12103f2a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x121825830 '__SVUint16_t'
|-TypedefDecl 0x12103f308 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x121825850 '__SVUint32_t'
|-TypedefDecl 0x12103f370 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x121825870 '__SVUint64_t'
|-TypedefDecl 0x12103f3d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x121825890 '__SVFloat16_t'
|-TypedefDecl 0x12103f440 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x1218258b0 '__SVFloat32_t'
|-TypedefDecl 0x12103f4a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x1218258d0 '__SVFloat64_t'
|-TypedefDecl 0x12103f510 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x1218258f0 '__SVBfloat16_t'
|-TypedefDecl 0x12103f578 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x121825910 '__clang_svint8x2_t'
|-TypedefDecl 0x12103f5e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x121825930 '__clang_svint16x2_t'
|-TypedefDecl 0x12103f648 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x121825950 '__clang_svint32x2_t'
|-TypedefDecl 0x12103f6b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x121825970 '__clang_svint64x2_t'
|-TypedefDecl 0x12103f718 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x121825990 '__clang_svuint8x2_t'
|-TypedefDecl 0x12103f780 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x1218259b0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12103f7e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x1218259d0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12103f850 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x1218259f0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12103f8b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x121825a10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12103f920 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x121825a30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12103f988 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x121825a50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12103f9f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x121825a70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12103fa58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x121825a90 '__clang_svint8x3_t'
|-TypedefDecl 0x12103fac0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x121825ab0 '__clang_svint16x3_t'
|-TypedefDecl 0x12103fb28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x121825ad0 '__clang_svint32x3_t'
|-TypedefDecl 0x12103fb90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x121825af0 '__clang_svint64x3_t'
|-TypedefDecl 0x12103fbf8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x121825b10 '__clang_svuint8x3_t'
|-TypedefDecl 0x12103fc60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x121825b30 '__clang_svuint16x3_t'
|-TypedefDecl 0x12103fcc8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x121825b50 '__clang_svuint32x3_t'
|-TypedefDecl 0x12103fd30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x121825b70 '__clang_svuint64x3_t'
|-TypedefDecl 0x12103fd98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x121825b90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12103fe00 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x121825bb0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12103fe68 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x121825bd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12103fed0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x121825bf0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12103ff38 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x121825c10 '__clang_svint8x4_t'
|-TypedefDecl 0x12103ffa0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x121825c30 '__clang_svint16x4_t'
|-TypedefDecl 0x121040008 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x121825c50 '__clang_svint32x4_t'
|-TypedefDecl 0x121040070 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x121825c70 '__clang_svint64x4_t'
|-TypedefDecl 0x1210400d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x121825c90 '__clang_svuint8x4_t'
|-TypedefDecl 0x121040140 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x121825cb0 '__clang_svuint16x4_t'
|-TypedefDecl 0x1210401a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x121825cd0 '__clang_svuint32x4_t'
|-TypedefDecl 0x121040210 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x121825cf0 '__clang_svuint64x4_t'
|-TypedefDecl 0x121040278 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x121825d10 '__clang_svfloat16x4_t'
|-TypedefDecl 0x1210402e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x121825d30 '__clang_svfloat32x4_t'
|-TypedefDecl 0x121040348 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x121825d50 '__clang_svfloat64x4_t'
|-TypedefDecl 0x1210403b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x121825d70 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x121040418 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x121825d90 '__SVBool_t'
|-TypedefDecl 0x121040480 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x121825db0 '__clang_svboolx2_t'
|-TypedefDecl 0x1210404e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x121825dd0 '__clang_svboolx4_t'
|-TypedefDecl 0x121040550 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x121825df0 '__SVCount_t'
|-TypedefDecl 0x1210405f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1210405b0 'char *'
|   `-BuiltinType 0x1218250b0 'char'
|-TypedefDecl 0x121040668 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1210405b0 'char *'
|   `-BuiltinType 0x1218250b0 'char'
|-FunctionDecl 0x121040888 <dataset_diviso_filec/func418_nonvuln.c:1:1, line:34:1> line:1:16 invalid parse_format 'int *(int *, char *)' static
| |-ParmVarDecl 0x121040728 <col:29, col:37> col:37 invalid core 'int *'
| |-ParmVarDecl 0x1210407a8 <col:43, col:49> col:49 used fmt 'char *'
| `-CompoundStmt 0x1218f23a8 <col:54, line:34:1>
|   |-IfStmt 0x121040a90 <line:2:2, line:4:2>
|   | |-BinaryOperator 0x121040a10 <line:2:6, col:16> 'int' '||'
|   | | |-UnaryOperator 0x121040978 <col:6, col:7> 'int' prefix '!' cannot overflow
|   | | | `-ImplicitCastExpr 0x121040960 <col:7> 'char *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x121040940 <col:7> 'char *' lvalue ParmVar 0x1210407a8 'fmt' 'char *'
|   | | `-UnaryOperator 0x1210409f8 <col:14, col:16> 'int' prefix '!' cannot overflow
|   | |   `-ImplicitCastExpr 0x1210409e0 <col:15, col:16> 'char' <LValueToRValue>
|   | |     `-UnaryOperator 0x1210409c8 <col:15, col:16> 'char' lvalue prefix '*' cannot overflow
|   | |       `-ImplicitCastExpr 0x1210409b0 <col:16> 'char *' <LValueToRValue>
|   | |         `-DeclRefExpr 0x121040990 <col:16> 'char *' lvalue ParmVar 0x1210407a8 'fmt' 'char *'
|   | `-CompoundStmt 0x121040a78 <col:21, line:4:2>
|   |   `-ReturnStmt 0x121040a68 <line:3:3, col:10>
|   |     `-RecoveryExpr 0x121040a48 <col:10> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x121040da0 <line:6:2, line:8:2>
|   | |-UnaryOperator 0x121040d28 <line:6:6, col:7> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x121040d10 <col:7> '<dependent type>' contains-errors <LValueToRValue>
|   | |   `-RecoveryExpr 0x121040cf0 <col:7> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x121040d88 <col:12, line:8:2>
|   |   `-ReturnStmt 0x121040d78 <line:7:3, col:10>
|   |     `-RecoveryExpr 0x121040d58 <col:10> '<dependent type>' contains-errors lvalue
|   |-DeclStmt 0x121058f10 <line:10:2, col:55>
|   | `-VarDecl 0x121058ca8 <col:2, col:54> col:14 used spec 'const char *' cinit
|   |   `-CallExpr 0x121058ee0 <col:21, col:54> '<dependent type>' contains-errors
|   |     |-DeclRefExpr 0x121058df0 <col:21> 'int ()' Function 0x121058d38 'rz_config_get' 'int ()'
|   |     |-CXXDependentScopeMemberExpr 0x121058e30 <col:35, col:41> '<dependent type>' contains-errors lvalue ->config
|   |     | `-RecoveryExpr 0x121058e10 <col:35> '<dependent type>' contains-errors lvalue
|   |     `-StringLiteral 0x121058ec0 <col:49> 'char[4]' lvalue "STR"
|   |-DeclStmt 0x121059120 <line:11:2, col:22>
|   | `-VarDecl 0x121058fd0 <col:2, col:21> col:7 used arr 'char[10]' cinit
|   |   `-InitListExpr 0x1210590b0 <col:17, col:21> 'char[10]'
|   |     |-array_filler: ImplicitValueInitExpr 0x121059110 <<invalid sloc>> 'char'
|   |     `-ImplicitCastExpr 0x1210590f0 <col:19> 'char' <IntegralCast>
|   |       `-IntegerLiteral 0x121059038 <col:19> 'int' 0
|   |-DeclStmt 0x121059918 <line:12:2, col:30>
|   | `-VarDecl 0x121059150 <col:2, col:29> col:8 used ptr 'char *' cinit
|   |   `-CallExpr 0x1210598b8 <col:14, col:29> 'char *'
|   |     |-ImplicitCastExpr 0x1210598a0 <col:14> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x121059800 <col:14> 'char *(const char *, int)' Function 0x121059620 'strchr' 'char *(const char *, int)'
|   |     |-ImplicitCastExpr 0x121059900 <col:21> 'const char *' <NoOp>
|   |     | `-ImplicitCastExpr 0x1210598e8 <col:21> 'char *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x121059820 <col:21> 'char *' lvalue ParmVar 0x1210407a8 'fmt' 'char *'
|   |     `-CharacterLiteral 0x121059840 <col:26> 'int' 37
|   |-BinaryOperator 0x121059cc0 <line:13:2, col:25> 'char' '='
|   | |-ArraySubscriptExpr 0x121059c70 <col:2, col:21> 'char' lvalue
|   | | |-ImplicitCastExpr 0x121059c58 <col:2> 'char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x121059930 <col:2> 'char *' lvalue ParmVar 0x1210407a8 'fmt' 'char *'
|   | | `-BinaryOperator 0x121059c38 <col:6, col:20> 'unsigned long' '-'
|   | |   |-CallExpr 0x121059b98 <col:6, col:16> 'unsigned long'
|   | |   | |-ImplicitCastExpr 0x121059b80 <col:6> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   | |   | | `-DeclRefExpr 0x121059af8 <col:6> 'unsigned long (const char *)' Function 0x121059988 'strlen' 'unsigned long (const char *)'
|   | |   | `-ImplicitCastExpr 0x121059bd8 <col:13> 'const char *' <NoOp>
|   | |   |   `-ImplicitCastExpr 0x121059bc0 <col:13> 'char *' <LValueToRValue>
|   | |   |     `-DeclRefExpr 0x121059b18 <col:13> 'char *' lvalue ParmVar 0x1210407a8 'fmt' 'char *'
|   | |   `-ImplicitCastExpr 0x121059c20 <col:20> 'unsigned long' <IntegralCast>
|   | |     `-IntegerLiteral 0x121059c00 <col:20> 'int' 1
|   | `-ImplicitCastExpr 0x121059ca8 <col:25> 'char' <IntegralCast>
|   |   `-CharacterLiteral 0x121059c90 <col:25> 'int' 0
|   `-WhileStmt 0x1218f2388 <line:14:2, line:32:2>
|     |-ImplicitCastExpr 0x121059d00 <line:14:9> 'char *' <LValueToRValue>
|     | `-DeclRefExpr 0x121059ce0 <col:9> 'char *' lvalue Var 0x121059150 'ptr' 'char *'
|     `-CompoundStmt 0x1218f2328 <col:14, line:32:2>
|       |-UnaryOperator 0x121059d38 <line:15:3, col:6> 'char *' postfix '++'
|       | `-DeclRefExpr 0x121059d18 <col:3> 'char *' lvalue Var 0x121059150 'ptr' 'char *'
|       |-WhileStmt 0x121059f60 <line:17:3, line:19:3>
|       | |-CallExpr 0x121059eb8 <line:17:10, col:23> 'int'
|       | | |-ImplicitCastExpr 0x121059ea0 <col:10> 'int (*)()' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x121059e30 <col:10> 'int ()' Function 0x121059d78 'IS_DIGIT' 'int ()'
|       | | `-ImplicitCastExpr 0x121059ef8 <col:19, col:20> 'int' <IntegralCast>
|       | |   `-ImplicitCastExpr 0x121059ee0 <col:19, col:20> 'char' <LValueToRValue>
|       | |     `-UnaryOperator 0x121059e88 <col:19, col:20> 'char' lvalue prefix '*' cannot overflow
|       | |       `-ImplicitCastExpr 0x121059e70 <col:20> 'char *' <LValueToRValue>
|       | |         `-DeclRefExpr 0x121059e50 <col:20> 'char *' lvalue Var 0x121059150 'ptr' 'char *'
|       | `-CompoundStmt 0x121059f48 <col:26, line:19:3>
|       |   `-UnaryOperator 0x121059f30 <line:18:4, col:7> 'char *' postfix '++'
|       |     `-DeclRefExpr 0x121059f10 <col:4> 'char *' lvalue Var 0x121059150 'ptr' 'char *'
|       |-CallExpr 0x12105a190 <line:20:3, col:40> 'int'
|       | |-ImplicitCastExpr 0x12105a178 <col:3> 'int (*)()' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x12105a060 <col:3> 'int ()' Function 0x121059fa8 'rz_str_ncpy' 'int ()'
|       | |-ImplicitCastExpr 0x12105a1c8 <col:15> 'char *' <ArrayToPointerDecay>
|       | | `-DeclRefExpr 0x12105a080 <col:15> 'char[10]' lvalue Var 0x121058fd0 'arr' 'char[10]'
|       | |-ImplicitCastExpr 0x12105a1e0 <col:20> 'char *' <LValueToRValue>
|       | | `-DeclRefExpr 0x12105a0a0 <col:20> 'char *' lvalue Var 0x121059150 'ptr' 'char *'
|       | `-BinaryOperator 0x12105a158 <col:25, col:39> 'unsigned long' '-'
|       |   |-UnaryExprOrTypeTraitExpr 0x12105a100 <col:25, col:35> 'unsigned long' sizeof
|       |   | `-ParenExpr 0x12105a0e0 <col:31, col:35> 'char[10]' lvalue
|       |   |   `-DeclRefExpr 0x12105a0c0 <col:32> 'char[10]' lvalue Var 0x121058fd0 'arr' 'char[10]' non_odr_use_unevaluated
|       |   `-ImplicitCastExpr 0x12105a140 <col:39> 'unsigned long' <IntegralCast>
|       |     `-IntegerLiteral 0x12105a120 <col:39> 'int' 1
|       |-DeclStmt 0x12105a2b0 <line:21:3, col:18>
|       | `-VarDecl 0x12105a210 <col:3, col:15> col:9 used tmp 'char *' cinit
|       |   `-ImplicitCastExpr 0x12105a298 <col:15> 'char *' <ArrayToPointerDecay>
|       |     `-DeclRefExpr 0x12105a278 <col:15> 'char[10]' lvalue Var 0x121058fd0 'arr' 'char[10]'
|       |-WhileStmt 0x12105a730 <line:22:3, line:24:3>
|       | |-BinaryOperator 0x12105a6c0 <line:22:10, col:50> 'int' '&&'
|       | | |-ImplicitCastExpr 0x12105a6a8 <col:10> 'char *' <LValueToRValue>
|       | | | `-DeclRefExpr 0x12105a2c8 <col:10> 'char *' lvalue Var 0x12105a210 'tmp' 'char *'
|       | | `-ParenExpr 0x12105a688 <col:17, col:50> 'int'
|       | |   `-BinaryOperator 0x12105a668 <col:18, col:49> 'int' '||'
|       | |     |-CallExpr 0x12105a450 <col:18, col:31> 'int'
|       | |     | |-ImplicitCastExpr 0x12105a438 <col:18> 'int (*)()' <FunctionToPointerDecay>
|       | |     | | `-DeclRefExpr 0x12105a3c8 <col:18> 'int ()' Function 0x12105a310 'IS_LOWER' 'int ()'
|       | |     | `-ImplicitCastExpr 0x12105a490 <col:27, col:28> 'int' <IntegralCast>
|       | |     |   `-ImplicitCastExpr 0x12105a478 <col:27, col:28> 'char' <LValueToRValue>
|       | |     |     `-UnaryOperator 0x12105a420 <col:27, col:28> 'char' lvalue prefix '*' cannot overflow
|       | |     |       `-ImplicitCastExpr 0x12105a408 <col:28> 'char *' <LValueToRValue>
|       | |     |         `-DeclRefExpr 0x12105a3e8 <col:28> 'char *' lvalue Var 0x12105a210 'tmp' 'char *'
|       | |     `-CallExpr 0x12105a610 <col:36, col:49> 'int'
|       | |       |-ImplicitCastExpr 0x12105a5f8 <col:36> 'int (*)()' <FunctionToPointerDecay>
|       | |       | `-DeclRefExpr 0x12105a588 <col:36> 'int ()' Function 0x12105a4d0 'IS_UPPER' 'int ()'
|       | |       `-ImplicitCastExpr 0x12105a650 <col:45, col:46> 'int' <IntegralCast>
|       | |         `-ImplicitCastExpr 0x12105a638 <col:45, col:46> 'char' <LValueToRValue>
|       | |           `-UnaryOperator 0x12105a5e0 <col:45, col:46> 'char' lvalue prefix '*' cannot overflow
|       | |             `-ImplicitCastExpr 0x12105a5c8 <col:46> 'char *' <LValueToRValue>
|       | |               `-DeclRefExpr 0x12105a5a8 <col:46> 'char *' lvalue Var 0x12105a210 'tmp' 'char *'
|       | `-CompoundStmt 0x12105a718 <col:53, line:24:3>
|       |   `-UnaryOperator 0x12105a700 <line:23:4, col:7> 'char *' postfix '++'
|       |     `-DeclRefExpr 0x12105a6e0 <col:4> 'char *' lvalue Var 0x12105a210 'tmp' 'char *'
|       |-BinaryOperator 0x12105a7d0 <line:25:3, col:10> 'char' '='
|       | |-UnaryOperator 0x12105a788 <col:3, col:4> 'char' lvalue prefix '*' cannot overflow
|       | | `-ImplicitCastExpr 0x12105a770 <col:4> 'char *' <LValueToRValue>
|       | |   `-DeclRefExpr 0x12105a750 <col:4> 'char *' lvalue Var 0x12105a210 'tmp' 'char *'
|       | `-ImplicitCastExpr 0x12105a7b8 <col:10> 'char' <IntegralCast>
|       |   `-CharacterLiteral 0x12105a7a0 <col:10> 'int' 0
|       |-DeclStmt 0x12105aa80 <line:26:3, col:48>
|       | `-VarDecl 0x12105a808 <col:3, col:47> col:15 used query 'const char *' cinit
|       |   `-ImplicitCastExpr 0x12105aa68 <col:23, col:47> 'const char *' contains-errors <IntegralToPointer>
|       |     `-CallExpr 0x12105a9e8 <col:23, col:47> 'int' contains-errors
|       |       |-ImplicitCastExpr 0x12105a9d0 <col:23> 'int (*)()' <FunctionToPointerDecay>
|       |       | `-DeclRefExpr 0x12105a950 <col:23> 'int ()' Function 0x12105a898 'sdb_fmt' 'int ()'
|       |       |-ImplicitCastExpr 0x12105aa20 <col:31> 'char *' <ArrayToPointerDecay>
|       |       | `-StringLiteral 0x12105a970 <col:31> 'char[4]' lvalue "STR"
|       |       |-ImplicitCastExpr 0x12105aa38 <col:38> 'const char *' contains-errors <LValueToRValue>
|       |       | `-DeclRefExpr 0x12105a990 <col:38> 'const char *' contains-errors lvalue Var 0x121058ca8 'spec' 'const char *'
|       |       `-ImplicitCastExpr 0x12105aa50 <col:44> 'char *' <ArrayToPointerDecay>
|       |         `-DeclRefExpr 0x12105a9b0 <col:44> 'char[10]' lvalue Var 0x121058fd0 'arr' 'char[10]'
|       |-DeclStmt 0x1218f2060 <line:27:3, col:50>
|       | `-VarDecl 0x12105aab0 <col:3, col:9> col:9 used type 'char *'
|       |-IfStmt 0x1218f21e0 <line:28:3, line:30:3>
|       | |-ImplicitCastExpr 0x1218f2098 <line:28:7> 'char *' <LValueToRValue>
|       | | `-DeclRefExpr 0x1218f2078 <col:7> 'char *' lvalue Var 0x12105aab0 'type' 'char *'
|       | `-CompoundStmt 0x1218f21d0 <col:13, line:30:3>
|       `-BinaryOperator 0x1218f2308 <line:31:3, col:24> 'char *' '='
|         |-DeclRefExpr 0x1218f2200 <col:3> 'char *' lvalue Var 0x121059150 'ptr' 'char *'
|         `-CallExpr 0x1218f22a8 <col:9, col:24> 'char *'
|           |-ImplicitCastExpr 0x1218f2290 <col:9> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x1218f2220 <col:9> 'char *(const char *, int)' Function 0x121059620 'strchr' 'char *(const char *, int)'
|           |-ImplicitCastExpr 0x1218f22f0 <col:16> 'const char *' <NoOp>
|           | `-ImplicitCastExpr 0x1218f22d8 <col:16> 'char *' <LValueToRValue>
|           |   `-DeclRefExpr 0x1218f2240 <col:16> 'char *' lvalue Var 0x121059150 'ptr' 'char *'
|           `-CharacterLiteral 0x1218f2260 <col:21> 'int' 37
|-FunctionDecl 0x121059620 <line:12:14> col:14 implicit used strchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x121059720 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x121059788 <<invalid sloc>> <invalid sloc> 'int'
| `-BuiltinAttr 0x1210596c8 <<invalid sloc>> Implicit 893
`-FunctionDecl 0x121059988 <line:13:6> col:6 implicit used strlen 'unsigned long (const char *)' extern
  |-ParmVarDecl 0x121059a88 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x121059a30 <<invalid sloc>> Implicit 902
