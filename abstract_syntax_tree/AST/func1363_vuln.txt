TranslationUnitDecl 0x12c855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x12c8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x12c855bd0 '__int128'
|-TypedefDecl 0x12c856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x12c855bf0 'unsigned __int128'
|-TypedefDecl 0x12d00be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12d00bc00 'struct __NSConstantString_tag'
|   `-Record 0x12c856580 '__NSConstantString_tag'
|-TypedefDecl 0x12d00be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x12c855d90 '__SVInt8_t'
|-TypedefDecl 0x12d00bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x12c855db0 '__SVInt16_t'
|-TypedefDecl 0x12d00bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x12c855dd0 '__SVInt32_t'
|-TypedefDecl 0x12d00bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x12c855df0 '__SVInt64_t'
|-TypedefDecl 0x12d00c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x12c855e10 '__SVUint8_t'
|-TypedefDecl 0x12d00c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x12c855e30 '__SVUint16_t'
|-TypedefDecl 0x12d00c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x12c855e50 '__SVUint32_t'
|-TypedefDecl 0x12d00c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x12c855e70 '__SVUint64_t'
|-TypedefDecl 0x12d00c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x12c855e90 '__SVFloat16_t'
|-TypedefDecl 0x12d00c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x12c855eb0 '__SVFloat32_t'
|-TypedefDecl 0x12d00c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x12c855ed0 '__SVFloat64_t'
|-TypedefDecl 0x12d00c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x12c855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12d00c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x12c855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12d00c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x12c855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12d00c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x12c855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12d00c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x12c855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12d00c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x12c855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12d00c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x12c855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12d00c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x12c855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12d00c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x12c855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12d00c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x12c856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12d00c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x12c856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12d00c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x12c856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12d00c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x12c856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12d00c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x12c856090 '__clang_svint8x3_t'
|-TypedefDecl 0x12d00c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x12c8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12d00c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x12c8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12d00c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x12c8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12d00c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x12c856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12d00ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x12c856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12d00cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x12c856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12d00cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x12c856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12d00cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x12c856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12d00d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x12c8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12d00d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x12c8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12d00d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x12c8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12d00d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x12c856210 '__clang_svint8x4_t'
|-TypedefDecl 0x12d00d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x12c856230 '__clang_svint16x4_t'
|-TypedefDecl 0x12d00d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x12c856250 '__clang_svint32x4_t'
|-TypedefDecl 0x12d00d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x12c856270 '__clang_svint64x4_t'
|-TypedefDecl 0x12d00d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x12c856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12d00d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x12c8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12d00d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x12c8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12d00d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x12c8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12d00d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x12c856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12d00d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x12c856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12d00d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x12c856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12d00d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x12c856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12d00da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x12c856390 '__SVBool_t'
|-TypedefDecl 0x12d00da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x12c8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12d00dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x12c8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12d00db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x12c8563f0 '__SVCount_t'
|-TypedefDecl 0x12d00dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12d00dbb0 'char *'
|   `-BuiltinType 0x12c8556b0 'char'
|-TypedefDecl 0x12d00dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12d00dbb0 'char *'
|   `-BuiltinType 0x12c8556b0 'char'
|-FunctionDecl 0x12d00dda8 <dataset_diviso_filec/func1363_vuln.c:1:1, line:27:1> line:1:12 getSingletonPos 'int (const char *)' static
| |-ParmVarDecl 0x12d00dcd8 <col:28, col:40> col:40 used str 'const char *'
| `-CompoundStmt 0x12d0273b8 <line:2:1, line:27:1>
|   |-DeclStmt 0x12d00df58 <line:3:2, col:16>
|   | `-VarDecl 0x12d00deb8 <col:2, col:15> col:6 used result 'int' cinit
|   |   `-UnaryOperator 0x12d00df40 <col:14, col:15> 'int' prefix '-'
|   |     `-IntegerLiteral 0x12d00df20 <col:15> 'int' 1
|   |-DeclStmt 0x12d00e010 <line:4:2, col:9>
|   | `-VarDecl 0x12d00df88 <col:2, col:8> col:6 used i 'int' cinit
|   |   `-IntegerLiteral 0x12d00dff0 <col:8> 'int' 0
|   |-DeclStmt 0x12d00e0c8 <line:5:2, col:13>
|   | `-VarDecl 0x12d00e040 <col:2, col:12> col:6 used len 'int' cinit
|   |   `-IntegerLiteral 0x12d00e0a8 <col:12> 'int' 0
|   |-IfStmt 0x12d027350 <line:7:2, line:25:2>
|   | |-BinaryOperator 0x12d026ac8 <line:7:6, col:33> 'int' '&&'
|   | | |-ImplicitCastExpr 0x12d026ab0 <col:6> 'const char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x12d00e0e0 <col:6> 'const char *' lvalue ParmVar 0x12d00dcd8 'str' 'const char *'
|   | | `-ParenExpr 0x12d026a90 <col:13, col:33> 'int'
|   | |   `-BinaryOperator 0x12d026a70 <col:14, col:32> 'int' '>'
|   | |     |-ParenExpr 0x12d026a30 <col:14, col:30> 'int'
|   | |     | `-BinaryOperator 0x12d026a10 <col:15, col:29> 'int' '='
|   | |     |   |-DeclRefExpr 0x12d00e100 <col:15> 'int' lvalue Var 0x12d00e040 'len' 'int'
|   | |     |   `-ImplicitCastExpr 0x12d0269f8 <col:19, col:29> 'int' <IntegralCast>
|   | |     |     `-CallExpr 0x12d0269b8 <col:19, col:29> 'unsigned long'
|   | |     |       |-ImplicitCastExpr 0x12d0269a0 <col:19> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   | |     |       | `-DeclRefExpr 0x12d026910 <col:19> 'unsigned long (const char *)' Function 0x12d0267a0 'strlen' 'unsigned long (const char *)'
|   | |     |       `-ImplicitCastExpr 0x12d0269e0 <col:26> 'const char *' <LValueToRValue>
|   | |     |         `-DeclRefExpr 0x12d026930 <col:26> 'const char *' lvalue ParmVar 0x12d00dcd8 'str' 'const char *'
|   | |     `-IntegerLiteral 0x12d026a50 <col:32> 'int' 0
|   | `-CompoundStmt 0x12d027338 <col:36, line:25:2>
|   |   `-ForStmt 0x12d027300 <line:8:3, line:23:3>
|   |     |-BinaryOperator 0x12d026b28 <line:8:8, col:10> 'int' '='
|   |     | |-DeclRefExpr 0x12d026ae8 <col:8> 'int' lvalue Var 0x12d00df88 'i' 'int'
|   |     | `-IntegerLiteral 0x12d026b08 <col:10> 'int' 0
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x12d026bb8 <col:13, col:15> 'int' '<'
|   |     | |-ImplicitCastExpr 0x12d026b88 <col:13> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x12d026b48 <col:13> 'int' lvalue Var 0x12d00df88 'i' 'int'
|   |     | `-ImplicitCastExpr 0x12d026ba0 <col:15> 'int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x12d026b68 <col:15> 'int' lvalue Var 0x12d00e040 'len' 'int'
|   |     |-UnaryOperator 0x12d026bf8 <col:21, col:22> 'int' postfix '++'
|   |     | `-DeclRefExpr 0x12d026bd8 <col:21> 'int' lvalue Var 0x12d00df88 'i' 'int'
|   |     `-CompoundStmt 0x12d0272e8 <col:25, line:23:3>
|   |       `-IfStmt 0x12d0272c8 <line:9:4, line:22:4>
|   |         |-CallExpr 0x12d026e78 <line:9:8, col:30> 'int'
|   |         | |-ImplicitCastExpr 0x12d026e60 <col:8> 'int (*)()' <FunctionToPointerDecay>
|   |         | | `-DeclRefExpr 0x12d026d40 <col:8> 'int ()' Function 0x12d026c88 'isIDSeparator' 'int ()'
|   |         | `-ImplicitCastExpr 0x12d026eb8 <col:22, col:29> 'int' <IntegralCast>
|   |         |   `-ImplicitCastExpr 0x12d026ea0 <col:22, col:29> 'char' <LValueToRValue>
|   |         |     `-UnaryOperator 0x12d026e10 <col:22, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |         |       `-ParenExpr 0x12d026df0 <col:23, col:29> 'const char *'
|   |         |         `-BinaryOperator 0x12d026dd0 <col:24, col:28> 'const char *' '+'
|   |         |           |-ImplicitCastExpr 0x12d026da0 <col:24> 'const char *' <LValueToRValue>
|   |         |           | `-DeclRefExpr 0x12d026d60 <col:24> 'const char *' lvalue ParmVar 0x12d00dcd8 'str' 'const char *'
|   |         |           `-ImplicitCastExpr 0x12d026db8 <col:28> 'int' <LValueToRValue>
|   |         |             `-DeclRefExpr 0x12d026d80 <col:28> 'int' lvalue Var 0x12d00df88 'i' 'int'
|   |         `-CompoundStmt 0x12d0272b0 <col:33, line:22:4>
|   |           `-IfStmt 0x12d027280 <line:10:5, line:21:5> has_else
|   |             |-BinaryOperator 0x12d026f28 <line:10:9, col:12> 'int' '=='
|   |             | |-ImplicitCastExpr 0x12d026f10 <col:9> 'int' <LValueToRValue>
|   |             | | `-DeclRefExpr 0x12d026ed0 <col:9> 'int' lvalue Var 0x12d00df88 'i' 'int'
|   |             | `-IntegerLiteral 0x12d026ef0 <col:12> 'int' 1
|   |             |-CompoundStmt 0x12d026fb0 <col:14, line:14:5>
|   |             | |-BinaryOperator 0x12d026f88 <line:12:6, col:14> 'int' '='
|   |             | | |-DeclRefExpr 0x12d026f48 <col:6> 'int' lvalue Var 0x12d00deb8 'result' 'int'
|   |             | | `-IntegerLiteral 0x12d026f68 <col:14> 'int' 0
|   |             | `-BreakStmt 0x12d026fa8 <line:13:6>
|   |             `-CompoundStmt 0x12d027268 <line:14:12, line:21:5>
|   |               `-IfStmt 0x12d027248 <line:16:6, line:20:6>
|   |                 |-CallExpr 0x12d027110 <line:16:10, col:34> 'int'
|   |                 | |-ImplicitCastExpr 0x12d0270f8 <col:10> 'int (*)()' <FunctionToPointerDecay>
|   |                 | | `-DeclRefExpr 0x12d026fd0 <col:10> 'int ()' Function 0x12d026c88 'isIDSeparator' 'int ()'
|   |                 | `-ImplicitCastExpr 0x12d027150 <col:24, col:33> 'int' <IntegralCast>
|   |                 |   `-ImplicitCastExpr 0x12d027138 <col:24, col:33> 'char' <LValueToRValue>
|   |                 |     `-UnaryOperator 0x12d0270e0 <col:24, col:33> 'const char' lvalue prefix '*' cannot overflow
|   |                 |       `-ParenExpr 0x12d0270c0 <col:25, col:33> 'const char *'
|   |                 |         `-BinaryOperator 0x12d0270a0 <col:26, col:32> 'const char *' '+'
|   |                 |           |-BinaryOperator 0x12d027060 <col:26, col:30> 'const char *' '+'
|   |                 |           | |-ImplicitCastExpr 0x12d027030 <col:26> 'const char *' <LValueToRValue>
|   |                 |           | | `-DeclRefExpr 0x12d026ff0 <col:26> 'const char *' lvalue ParmVar 0x12d00dcd8 'str' 'const char *'
|   |                 |           | `-ImplicitCastExpr 0x12d027048 <col:30> 'int' <LValueToRValue>
|   |                 |           |   `-DeclRefExpr 0x12d027010 <col:30> 'int' lvalue Var 0x12d00df88 'i' 'int'
|   |                 |           `-IntegerLiteral 0x12d027080 <col:32> 'int' 2
|   |                 `-CompoundStmt 0x12d027228 <col:37, line:20:6>
|   |                   |-BinaryOperator 0x12d027200 <line:18:7, col:18> 'int' '='
|   |                   | |-DeclRefExpr 0x12d027168 <col:7> 'int' lvalue Var 0x12d00deb8 'result' 'int'
|   |                   | `-BinaryOperator 0x12d0271e0 <col:16, col:18> 'int' '+'
|   |                   |   |-ImplicitCastExpr 0x12d0271c8 <col:16> 'int' <LValueToRValue>
|   |                   |   | `-DeclRefExpr 0x12d027188 <col:16> 'int' lvalue Var 0x12d00df88 'i' 'int'
|   |                   |   `-IntegerLiteral 0x12d0271a8 <col:18> 'int' 1
|   |                   `-BreakStmt 0x12d027220 <line:19:7>
|   `-ReturnStmt 0x12d0273a8 <line:26:2, col:9>
|     `-ImplicitCastExpr 0x12d027390 <col:9> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x12d027370 <col:9> 'int' lvalue Var 0x12d00deb8 'result' 'int'
`-FunctionDecl 0x12d0267a0 <line:7:19> col:19 implicit used strlen 'unsigned long (const char *)' extern
  |-ParmVarDecl 0x12d0268a0 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x12d026848 <<invalid sloc>> Implicit 902
