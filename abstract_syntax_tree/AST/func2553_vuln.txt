TranslationUnitDecl 0x147855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1478564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x147855bd0 '__int128'
|-TypedefDecl 0x147856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x147855bf0 'unsigned __int128'
|-TypedefDecl 0x15000be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x15000bc00 'struct __NSConstantString_tag'
|   `-Record 0x147856580 '__NSConstantString_tag'
|-TypedefDecl 0x15000be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x147855d90 '__SVInt8_t'
|-TypedefDecl 0x15000bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x147855db0 '__SVInt16_t'
|-TypedefDecl 0x15000bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x147855dd0 '__SVInt32_t'
|-TypedefDecl 0x15000bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x147855df0 '__SVInt64_t'
|-TypedefDecl 0x15000c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x147855e10 '__SVUint8_t'
|-TypedefDecl 0x15000c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x147855e30 '__SVUint16_t'
|-TypedefDecl 0x15000c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x147855e50 '__SVUint32_t'
|-TypedefDecl 0x15000c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x147855e70 '__SVUint64_t'
|-TypedefDecl 0x15000c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x147855e90 '__SVFloat16_t'
|-TypedefDecl 0x15000c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x147855eb0 '__SVFloat32_t'
|-TypedefDecl 0x15000c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x147855ed0 '__SVFloat64_t'
|-TypedefDecl 0x15000c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x147855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x15000c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x147855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x15000c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x147855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x15000c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x147855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x15000c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x147855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x15000c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x147855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x15000c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x147855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x15000c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x147855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x15000c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x147855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x15000c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x147856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x15000c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x147856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x15000c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x147856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x15000c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x147856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x15000c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x147856090 '__clang_svint8x3_t'
|-TypedefDecl 0x15000c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1478560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x15000c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1478560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x15000c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1478560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x15000c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x147856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x15000ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x147856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x15000cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x147856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x15000cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x147856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x15000cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x147856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x15000d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1478561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x15000d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1478561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x15000d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1478561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x15000d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x147856210 '__clang_svint8x4_t'
|-TypedefDecl 0x15000d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x147856230 '__clang_svint16x4_t'
|-TypedefDecl 0x15000d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x147856250 '__clang_svint32x4_t'
|-TypedefDecl 0x15000d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x147856270 '__clang_svint64x4_t'
|-TypedefDecl 0x15000d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x147856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x15000d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1478562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x15000d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1478562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x15000d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1478562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x15000d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x147856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x15000d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x147856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x15000d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x147856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x15000d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x147856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x15000da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x147856390 '__SVBool_t'
|-TypedefDecl 0x15000da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1478563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x15000dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1478563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x15000db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1478563f0 '__SVCount_t'
|-TypedefDecl 0x15000dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x15000dbb0 'char *'
|   `-BuiltinType 0x1478556b0 'char'
|-TypedefDecl 0x15000dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x15000dbb0 'char *'
|   `-BuiltinType 0x1478556b0 'char'
|-FunctionDecl 0x15000dfa8 <dataset_diviso_filec/func2553_vuln.c:1:1, line:51:1> line:1:13 invalid r_socket_http_post 'int *(const char *, const char *, int *, int *)'
| |-ParmVarDecl 0x15000dcf0 <col:33, col:45> col:45 used url 'const char *'
| |-ParmVarDecl 0x15000dd70 <col:50, col:62> col:62 used data 'const char *'
| |-ParmVarDecl 0x15000de28 <col:68, col:73> col:73 used code 'int *'
| |-ParmVarDecl 0x15000dea8 <col:79, col:84> col:84 used rlen 'int *'
| `-CompoundStmt 0x15002b128 <col:90, line:51:1>
|   |-DeclStmt 0x1500277f8 <line:4:2, col:26>
|   | `-VarDecl 0x15000e0a0 <col:2, col:25> col:8 used uri 'char *' cinit
|   |   `-CallExpr 0x1500277b8 <col:14, col:25> 'char *'
|   |     |-ImplicitCastExpr 0x1500277a0 <col:14> 'char *(*)(const char *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x150027710 <col:14> 'char *(const char *)' Function 0x1500275a0 'strdup' 'char *(const char *)'
|   |     `-ImplicitCastExpr 0x1500277e0 <col:22> 'const char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x150027730 <col:22> 'const char *' lvalue ParmVar 0x15000dcf0 'url' 'const char *'
|   |-IfStmt 0x1500278c0 <line:5:2, line:7:2>
|   | |-UnaryOperator 0x150027848 <line:5:6, col:7> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x150027830 <col:7> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x150027810 <col:7> 'char *' lvalue Var 0x15000e0a0 'uri' 'char *'
|   | `-CompoundStmt 0x1500278a8 <col:12, line:7:2>
|   |   `-ReturnStmt 0x150027898 <line:6:3, col:10>
|   |     `-RecoveryExpr 0x150027878 <col:10> '<dependent type>' contains-errors lvalue
|   |-DeclStmt 0x150027d28 <line:9:2, col:34>
|   | `-VarDecl 0x1500278f8 <col:2, col:33> col:8 used host 'char *' cinit
|   |   `-CallExpr 0x150027c98 <col:15, col:33> 'char *'
|   |     |-ImplicitCastExpr 0x150027c80 <col:15> 'char *(*)(const char *, const char *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x150027b80 <col:15> 'char *(const char *, const char *)' Function 0x1500279a0 'strstr' 'char *(const char *, const char *)'
|   |     |-ImplicitCastExpr 0x150027ce0 <col:23> 'const char *' <NoOp>
|   |     | `-ImplicitCastExpr 0x150027cc8 <col:23> 'char *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x150027ba0 <col:23> 'char *' lvalue Var 0x15000e0a0 'uri' 'char *'
|   |     `-ImplicitCastExpr 0x150027d10 <col:28> 'const char *' <NoOp>
|   |       `-ImplicitCastExpr 0x150027cf8 <col:28> 'char *' <ArrayToPointerDecay>
|   |         `-StringLiteral 0x150027c00 <col:28> 'char[4]' lvalue "STR"
|   |-IfStmt 0x150028380 <line:10:2, line:14:2>
|   | |-UnaryOperator 0x150027d78 <line:10:6, col:7> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x150027d60 <col:7> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x150027d40 <col:7> 'char *' lvalue Var 0x1500278f8 'host' 'char *'
|   | `-CompoundStmt 0x150028358 <col:13, line:14:2>
|   |   |-CallExpr 0x150027fd8 <line:11:3, col:12> 'void'
|   |   | |-ImplicitCastExpr 0x150027fc0 <col:3> 'void (*)(void *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x150027f38 <col:3> 'void (void *)' Function 0x150027dc8 'free' 'void (void *)'
|   |   | `-ImplicitCastExpr 0x150028018 <col:9> 'void *' <BitCast>
|   |   |   `-ImplicitCastExpr 0x150028000 <col:9> 'char *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x150027f58 <col:9> 'char *' lvalue Var 0x15000e0a0 'uri' 'char *'
|   |   |-CallExpr 0x1500282b8 <line:12:3, col:16> 'int'
|   |   | |-ImplicitCastExpr 0x1500282a0 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x150028218 <col:3> 'int (const char *, ...)' Function 0x150028070 'printf' 'int (const char *, ...)'
|   |   | `-ImplicitCastExpr 0x1500282f8 <col:11> 'const char *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x1500282e0 <col:11> 'char *' <ArrayToPointerDecay>
|   |   |     `-StringLiteral 0x150028238 <col:11> 'char[4]' lvalue "STR"
|   |   `-ReturnStmt 0x150028348 <line:13:3, col:10>
|   |     `-RecoveryExpr 0x150028328 <col:10> '<dependent type>' contains-errors lvalue
|   |-CompoundAssignOperator 0x150029600 <line:15:2, col:10> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
|   | |-DeclRefExpr 0x1500283a0 <col:2> 'char *' lvalue Var 0x1500278f8 'host' 'char *'
|   | `-IntegerLiteral 0x1500283c0 <col:10> 'int' 3
|   |-DeclStmt 0x1500299e8 <line:16:2, col:33>
|   | `-VarDecl 0x150029648 <col:2, col:32> col:8 used port 'char *' cinit
|   |   `-CallExpr 0x150029988 <col:15, col:32> 'char *'
|   |     |-ImplicitCastExpr 0x150029970 <col:15> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1500298d0 <col:15> 'char *(const char *, int)' Function 0x1500296f0 'strchr' 'char *(const char *, int)'
|   |     |-ImplicitCastExpr 0x1500299d0 <col:23> 'const char *' <NoOp>
|   |     | `-ImplicitCastExpr 0x1500299b8 <col:23> 'char *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x1500298f0 <col:23> 'char *' lvalue Var 0x1500278f8 'host' 'char *'
|   |     `-CharacterLiteral 0x150029910 <col:29> 'int' 58
|   |-IfStmt 0x150029b78 <line:17:2, line:21:2> has_else
|   | |-UnaryOperator 0x150029a38 <line:17:6, col:7> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x150029a20 <col:7> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x150029a00 <col:7> 'char *' lvalue Var 0x150029648 'port' 'char *'
|   | |-CompoundStmt 0x150029aa8 <col:13, line:19:2>
|   | `-CompoundStmt 0x150029b60 <col:9, line:21:2>
|   |   `-BinaryOperator 0x150029b40 <line:20:3, col:13> 'char' '='
|   |     |-UnaryOperator 0x150029af0 <col:3, col:8> 'char' lvalue prefix '*' cannot overflow
|   |     | `-UnaryOperator 0x150029ad8 <col:4, col:8> 'char *' postfix '++'
|   |     |   `-DeclRefExpr 0x150029ab8 <col:4> 'char *' lvalue Var 0x150029648 'port' 'char *'
|   |     `-ImplicitCastExpr 0x150029b28 <col:13> 'char' <IntegralCast>
|   |       `-IntegerLiteral 0x150029b08 <col:13> 'int' 0
|   |-DeclStmt 0x150029d10 <line:22:2, col:33>
|   | `-VarDecl 0x150029bc0 <col:2, col:32> col:8 used path 'char *' cinit
|   |   `-CallExpr 0x150029cb0 <col:15, col:32> 'char *'
|   |     |-ImplicitCastExpr 0x150029c98 <col:15> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x150029c28 <col:15> 'char *(const char *, int)' Function 0x1500296f0 'strchr' 'char *(const char *, int)'
|   |     |-ImplicitCastExpr 0x150029cf8 <col:23> 'const char *' <NoOp>
|   |     | `-ImplicitCastExpr 0x150029ce0 <col:23> 'char *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x150029c48 <col:23> 'char *' lvalue Var 0x1500278f8 'host' 'char *'
|   |     `-CharacterLiteral 0x150029c68 <col:29> 'int' 47
|   |-IfStmt 0x150029f08 <line:23:2, line:27:2> has_else
|   | |-UnaryOperator 0x150029d60 <line:23:6, col:7> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x150029d48 <col:7> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x150029d28 <col:7> 'char *' lvalue Var 0x150029bc0 'path' 'char *'
|   | |-CompoundStmt 0x150029e30 <col:13, line:25:2>
|   | | `-BinaryOperator 0x150029e10 <line:24:3, col:10> 'char *' '='
|   | |   |-DeclRefExpr 0x150029d78 <col:3> 'char *' lvalue Var 0x150029bc0 'path' 'char *'
|   | |   `-ImplicitCastExpr 0x150029df8 <col:10> 'char *' <ArrayToPointerDecay>
|   | |     `-StringLiteral 0x150029de0 <col:10> 'char[1]' lvalue ""
|   | `-CompoundStmt 0x150029ef0 <line:25:9, line:27:2>
|   |   `-BinaryOperator 0x150029ed0 <line:26:3, col:13> 'char' '='
|   |     |-UnaryOperator 0x150029e80 <col:3, col:8> 'char' lvalue prefix '*' cannot overflow
|   |     | `-UnaryOperator 0x150029e68 <col:4, col:8> 'char *' postfix '++'
|   |     |   `-DeclRefExpr 0x150029e48 <col:4> 'char *' lvalue Var 0x150029bc0 'path' 'char *'
|   |     `-ImplicitCastExpr 0x150029eb8 <col:13> 'char' <IntegralCast>
|   |       `-IntegerLiteral 0x150029e98 <col:13> 'int' 0
|   |-IfStmt 0x15002a388 <line:29:2, line:33:2>
|   | |-UnaryOperator 0x15002a170 <line:29:6, col:7> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x15002a158 <col:7> '<dependent type>' contains-errors <LValueToRValue>
|   | |   `-RecoveryExpr 0x15002a138 <col:7> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x15002a360 <col:10, line:33:2>
|   |   |-CallExpr 0x15002a1f8 <line:30:3, col:16> 'int'
|   |   | |-ImplicitCastExpr 0x15002a1e0 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x15002a188 <col:3> 'int (const char *, ...)' Function 0x150028070 'printf' 'int (const char *, ...)'
|   |   | `-ImplicitCastExpr 0x15002a238 <col:11> 'const char *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x15002a220 <col:11> 'char *' <ArrayToPointerDecay>
|   |   |     `-StringLiteral 0x15002a1a8 <col:11> 'char[4]' lvalue "STR"
|   |   |-CallExpr 0x15002a2c0 <line:31:3, col:12> 'void'
|   |   | |-ImplicitCastExpr 0x15002a2a8 <col:3> 'void (*)(void *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x15002a250 <col:3> 'void (void *)' Function 0x150027dc8 'free' 'void (void *)'
|   |   | `-ImplicitCastExpr 0x15002a300 <col:9> 'void *' <BitCast>
|   |   |   `-ImplicitCastExpr 0x15002a2e8 <col:9> 'char *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x15002a270 <col:9> 'char *' lvalue Var 0x15000e0a0 'uri' 'char *'
|   |   `-ReturnStmt 0x15002a350 <line:32:3, col:10>
|   |     `-RecoveryExpr 0x15002a330 <col:10> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x15002a840 <line:34:2, line:38:2>
|   | |-RecoveryExpr 0x15002a508 <line:34:6, col:45> '_Bool' contains-errors
|   | `-CompoundStmt 0x15002a820 <col:48, line:38:2>
|   |   |-CallExpr 0x15002a6d8 <line:35:3, col:29> 'int'
|   |   | |-ImplicitCastExpr 0x15002a6c0 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x15002a610 <col:3> 'int ()' Function 0x15002a550 'eprintf' 'int ()'
|   |   | |-ImplicitCastExpr 0x15002a710 <col:12> 'char *' <ArrayToPointerDecay>
|   |   | | `-StringLiteral 0x15002a630 <col:12> 'char[4]' lvalue "STR"
|   |   | |-ImplicitCastExpr 0x15002a728 <col:19> 'char *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x15002a650 <col:19> 'char *' lvalue Var 0x1500278f8 'host' 'char *'
|   |   | `-ImplicitCastExpr 0x15002a740 <col:25> 'char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x15002a670 <col:25> 'char *' lvalue Var 0x150029648 'port' 'char *'
|   |   `-CallExpr 0x15002a7c8 <line:36:3, col:12> 'void'
|   |     |-ImplicitCastExpr 0x15002a7b0 <col:3> 'void (*)(void *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x15002a758 <col:3> 'void (void *)' Function 0x150027dc8 'free' 'void (void *)'
|   |     `-ImplicitCastExpr 0x15002a808 <col:9> 'void *' <BitCast>
|   |       `-ImplicitCastExpr 0x15002a7f0 <col:9> 'char *' <LValueToRValue>
|   |         `-DeclRefExpr 0x15002a778 <col:9> 'char *' lvalue Var 0x15000e0a0 'uri' 'char *'
|   `-CallExpr 0x15002ad68 <line:48:2, col:11> 'void'
|     |-ImplicitCastExpr 0x15002ad50 <col:2> 'void (*)(void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x15002acf8 <col:2> 'void (void *)' Function 0x150027dc8 'free' 'void (void *)'
|     `-ImplicitCastExpr 0x15002ada8 <col:8> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x15002ad90 <col:8> 'char *' <LValueToRValue>
|         `-DeclRefExpr 0x15002ad18 <col:8> 'char *' lvalue Var 0x15000e0a0 'uri' 'char *'
|-FunctionDecl 0x1500275a0 <line:4:14> col:14 implicit used strdup 'char *(const char *)' extern
| |-ParmVarDecl 0x1500276a0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x150027648 <<invalid sloc>> Implicit 950
|-FunctionDecl 0x1500279a0 <line:9:15> col:15 implicit used strstr 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x150027aa0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x150027b08 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x150027a48 <<invalid sloc>> Implicit 898
|-FunctionDecl 0x150027dc8 <line:11:3> col:3 implicit used free 'void (void *)' extern
| |-ParmVarDecl 0x150027ec8 <<invalid sloc>> <invalid sloc> 'void *'
| `-BuiltinAttr 0x150027e70 <<invalid sloc>> Implicit 873
|-FunctionDecl 0x150028070 <line:12:3> col:3 implicit used printf 'int (const char *, ...)' extern
| |-ParmVarDecl 0x150028170 <<invalid sloc>> <invalid sloc> 'const char *'
| |-BuiltinAttr 0x150028118 <<invalid sloc>> Implicit 903
| `-FormatAttr 0x1500281e0 <col:3> Implicit printf 1 2
|-FunctionDecl 0x1500296f0 <line:16:15> col:15 implicit used strchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x1500297f0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x150029858 <<invalid sloc>> <invalid sloc> 'int'
| `-BuiltinAttr 0x150029798 <<invalid sloc>> Implicit 893
`-FunctionDecl 0x15002aa68 <line:47:28> col:28 implicit used strlen 'unsigned long (const char *)' extern
  |-ParmVarDecl 0x15002ab68 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x15002ab10 <<invalid sloc>> Implicit 902
