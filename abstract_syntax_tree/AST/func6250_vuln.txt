TranslationUnitDecl 0x15002c208 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x15002d0b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x15002c7d0 '__int128'
|-TypedefDecl 0x15002d128 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x15002c7f0 'unsigned __int128'
|-TypedefDecl 0x15100be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x15100bc00 'struct __NSConstantString_tag'
|   `-Record 0x15002d180 '__NSConstantString_tag'
|-TypedefDecl 0x15100be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x15002c990 '__SVInt8_t'
|-TypedefDecl 0x15100bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x15002c9b0 '__SVInt16_t'
|-TypedefDecl 0x15100bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x15002c9d0 '__SVInt32_t'
|-TypedefDecl 0x15100bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x15002c9f0 '__SVInt64_t'
|-TypedefDecl 0x15100c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x15002ca10 '__SVUint8_t'
|-TypedefDecl 0x15100c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x15002ca30 '__SVUint16_t'
|-TypedefDecl 0x15100c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x15002ca50 '__SVUint32_t'
|-TypedefDecl 0x15100c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x15002ca70 '__SVUint64_t'
|-TypedefDecl 0x15100c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x15002ca90 '__SVFloat16_t'
|-TypedefDecl 0x15100c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x15002cab0 '__SVFloat32_t'
|-TypedefDecl 0x15100c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x15002cad0 '__SVFloat64_t'
|-TypedefDecl 0x15100c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x15002caf0 '__SVBfloat16_t'
|-TypedefDecl 0x15100c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x15002cb10 '__clang_svint8x2_t'
|-TypedefDecl 0x15100c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x15002cb30 '__clang_svint16x2_t'
|-TypedefDecl 0x15100c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x15002cb50 '__clang_svint32x2_t'
|-TypedefDecl 0x15100c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x15002cb70 '__clang_svint64x2_t'
|-TypedefDecl 0x15100c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x15002cb90 '__clang_svuint8x2_t'
|-TypedefDecl 0x15100c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x15002cbb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x15100c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x15002cbd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x15100c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x15002cbf0 '__clang_svuint64x2_t'
|-TypedefDecl 0x15100c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x15002cc10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x15100c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x15002cc30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x15100c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x15002cc50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x15100c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x15002cc70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x15100c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x15002cc90 '__clang_svint8x3_t'
|-TypedefDecl 0x15100c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x15002ccb0 '__clang_svint16x3_t'
|-TypedefDecl 0x15100c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x15002ccd0 '__clang_svint32x3_t'
|-TypedefDecl 0x15100c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x15002ccf0 '__clang_svint64x3_t'
|-TypedefDecl 0x15100c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x15002cd10 '__clang_svuint8x3_t'
|-TypedefDecl 0x15100ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x15002cd30 '__clang_svuint16x3_t'
|-TypedefDecl 0x15100cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x15002cd50 '__clang_svuint32x3_t'
|-TypedefDecl 0x15100cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x15002cd70 '__clang_svuint64x3_t'
|-TypedefDecl 0x15100cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x15002cd90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x15100d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x15002cdb0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x15100d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x15002cdd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x15100d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x15002cdf0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x15100d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x15002ce10 '__clang_svint8x4_t'
|-TypedefDecl 0x15100d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x15002ce30 '__clang_svint16x4_t'
|-TypedefDecl 0x15100d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x15002ce50 '__clang_svint32x4_t'
|-TypedefDecl 0x15100d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x15002ce70 '__clang_svint64x4_t'
|-TypedefDecl 0x15100d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x15002ce90 '__clang_svuint8x4_t'
|-TypedefDecl 0x15100d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x15002ceb0 '__clang_svuint16x4_t'
|-TypedefDecl 0x15100d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x15002ced0 '__clang_svuint32x4_t'
|-TypedefDecl 0x15100d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x15002cef0 '__clang_svuint64x4_t'
|-TypedefDecl 0x15100d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x15002cf10 '__clang_svfloat16x4_t'
|-TypedefDecl 0x15100d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x15002cf30 '__clang_svfloat32x4_t'
|-TypedefDecl 0x15100d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x15002cf50 '__clang_svfloat64x4_t'
|-TypedefDecl 0x15100d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x15002cf70 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x15100da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x15002cf90 '__SVBool_t'
|-TypedefDecl 0x15100da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x15002cfb0 '__clang_svboolx2_t'
|-TypedefDecl 0x15100dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x15002cfd0 '__clang_svboolx4_t'
|-TypedefDecl 0x15100db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x15002cff0 '__SVCount_t'
|-TypedefDecl 0x15100dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x15100dbb0 'char *'
|   `-BuiltinType 0x15002c2b0 'char'
|-TypedefDecl 0x15100dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x15100dbb0 'char *'
|   `-BuiltinType 0x15002c2b0 'char'
`-FunctionDecl 0x15100e100 <dataset_diviso_filec/func6250_vuln.c:1:1, line:20:1> line:1:20 ModulateHSB 'void (const double, const double, const double, double *, double *, double *)' static inline
  |-ParmVarDecl 0x15100dcd8 <col:32, col:45> col:45 used percent_hue 'const double'
  |-ParmVarDecl 0x15100dd58 <line:2:3, col:16> col:16 used percent_saturation 'const double'
  |-ParmVarDecl 0x15100ddd8 <col:35, col:48> col:48 used percent_brightness 'const double'
  |-ParmVarDecl 0x15100de88 <col:67, col:75> col:75 used red 'double *'
  |-ParmVarDecl 0x15100df08 <line:3:3, col:11> col:11 used green 'double *'
  |-ParmVarDecl 0x15100df88 <col:17, col:25> col:25 used blue 'double *'
  `-CompoundStmt 0x151027f70 <line:4:1, line:20:1>
    |-DeclStmt 0x15100e3c0 <line:5:3, line:8:15>
    | |-VarDecl 0x15100e238 <line:5:3, line:6:5> col:5 used brightness 'double'
    | |-VarDecl 0x15100e2b8 <line:5:3, line:7:5> col:5 used hue 'double'
    | `-VarDecl 0x15100e338 <line:5:3, line:8:5> col:5 used saturation 'double'
    |-CallExpr 0x151027718 <line:11:3, col:65> 'int'
    | |-ImplicitCastExpr 0x151027700 <col:3> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x151027510 <col:3> 'int ()' Function 0x151027458 'ConvertRGBToHSB' 'int ()'
    | |-ImplicitCastExpr 0x151027768 <col:19, col:20> 'double' <LValueToRValue>
    | | `-UnaryOperator 0x151027568 <col:19, col:20> 'double' lvalue prefix '*' cannot overflow
    | |   `-ImplicitCastExpr 0x151027550 <col:20> 'double *' <LValueToRValue>
    | |     `-DeclRefExpr 0x151027530 <col:20> 'double *' lvalue ParmVar 0x15100de88 'red' 'double *'
    | |-ImplicitCastExpr 0x151027780 <col:24, col:25> 'double' <LValueToRValue>
    | | `-UnaryOperator 0x1510275b8 <col:24, col:25> 'double' lvalue prefix '*' cannot overflow
    | |   `-ImplicitCastExpr 0x1510275a0 <col:25> 'double *' <LValueToRValue>
    | |     `-DeclRefExpr 0x151027580 <col:25> 'double *' lvalue ParmVar 0x15100df08 'green' 'double *'
    | |-ImplicitCastExpr 0x151027798 <col:31, col:32> 'double' <LValueToRValue>
    | | `-UnaryOperator 0x151027608 <col:31, col:32> 'double' lvalue prefix '*' cannot overflow
    | |   `-ImplicitCastExpr 0x1510275f0 <col:32> 'double *' <LValueToRValue>
    | |     `-DeclRefExpr 0x1510275d0 <col:32> 'double *' lvalue ParmVar 0x15100df88 'blue' 'double *'
    | |-UnaryOperator 0x151027640 <col:37, col:38> 'double *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x151027620 <col:38> 'double' lvalue Var 0x15100e2b8 'hue' 'double'
    | |-UnaryOperator 0x151027678 <col:42, col:43> 'double *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x151027658 <col:43> 'double' lvalue Var 0x15100e338 'saturation' 'double'
    | `-UnaryOperator 0x1510276b0 <col:54, col:55> 'double *' prefix '&' cannot overflow
    |   `-DeclRefExpr 0x151027690 <col:55> 'double' lvalue Var 0x15100e238 'brightness' 'double'
    |-CompoundAssignOperator 0x1510278e8 <line:12:3, col:33> 'double' '+=' ComputeLHSTy='double' ComputeResultTy='double'
    | |-DeclRefExpr 0x1510277b0 <col:3> 'double' lvalue Var 0x15100e2b8 'hue' 'double'
    | `-BinaryOperator 0x1510278c8 <col:8, col:33> 'double' '*'
    |   |-FloatingLiteral 0x1510277d0 <col:8> 'double' 5.000000e-01
    |   `-ParenExpr 0x1510278a8 <col:12, col:33> 'double'
    |     `-BinaryOperator 0x151027888 <col:13, col:30> 'double' '-'
    |       |-BinaryOperator 0x151027848 <col:13, col:18> 'double' '*'
    |       | |-FloatingLiteral 0x1510277f0 <col:13> 'double' 1.000000e-02
    |       | `-ImplicitCastExpr 0x151027830 <col:18> 'double' <LValueToRValue>
    |       |   `-DeclRefExpr 0x151027810 <col:18> 'const double' lvalue ParmVar 0x15100dcd8 'percent_hue' 'const double'
    |       `-FloatingLiteral 0x151027868 <col:30> 'double' 1.000000e+00
    |-WhileStmt 0x151027a00 <line:13:3, line:14:10>
    | |-BinaryOperator 0x151027970 <line:13:10, col:16> 'int' '<'
    | | |-ImplicitCastExpr 0x151027958 <col:10> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x151027918 <col:10> 'double' lvalue Var 0x15100e2b8 'hue' 'double'
    | | `-FloatingLiteral 0x151027938 <col:16> 'double' 0.000000e+00
    | `-CompoundAssignOperator 0x1510279d0 <line:14:5, col:10> 'double' '+=' ComputeLHSTy='double' ComputeResultTy='double'
    |   |-DeclRefExpr 0x151027990 <col:5> 'double' lvalue Var 0x15100e2b8 'hue' 'double'
    |   `-FloatingLiteral 0x1510279b0 <col:10> 'double' 1.000000e+00
    |-WhileStmt 0x151027b08 <line:15:3, line:16:10>
    | |-BinaryOperator 0x151027a78 <line:15:10, col:16> 'int' '>'
    | | |-ImplicitCastExpr 0x151027a60 <col:10> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x151027a20 <col:10> 'double' lvalue Var 0x15100e2b8 'hue' 'double'
    | | `-FloatingLiteral 0x151027a40 <col:16> 'double' 1.000000e+00
    | `-CompoundAssignOperator 0x151027ad8 <line:16:5, col:10> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
    |   |-DeclRefExpr 0x151027a98 <col:5> 'double' lvalue Var 0x15100e2b8 'hue' 'double'
    |   `-FloatingLiteral 0x151027ab8 <col:10> 'double' 1.000000e+00
    |-CompoundAssignOperator 0x151027bc0 <line:17:3, col:20> 'double' '*=' ComputeLHSTy='double' ComputeResultTy='double'
    | |-DeclRefExpr 0x151027b28 <col:3> 'double' lvalue Var 0x15100e338 'saturation' 'double'
    | `-BinaryOperator 0x151027ba0 <col:15, col:20> 'double' '*'
    |   |-FloatingLiteral 0x151027b48 <col:15> 'double' 1.000000e-02
    |   `-ImplicitCastExpr 0x151027b88 <col:20> 'double' <LValueToRValue>
    |     `-DeclRefExpr 0x151027b68 <col:20> 'const double' lvalue ParmVar 0x15100dd58 'percent_saturation' 'const double'
    |-CompoundAssignOperator 0x151027c88 <line:18:3, col:20> 'double' '*=' ComputeLHSTy='double' ComputeResultTy='double'
    | |-DeclRefExpr 0x151027bf0 <col:3> 'double' lvalue Var 0x15100e238 'brightness' 'double'
    | `-BinaryOperator 0x151027c68 <col:15, col:20> 'double' '*'
    |   |-FloatingLiteral 0x151027c10 <col:15> 'double' 1.000000e-02
    |   `-ImplicitCastExpr 0x151027c50 <col:20> 'double' <LValueToRValue>
    |     `-DeclRefExpr 0x151027c30 <col:20> 'const double' lvalue ParmVar 0x15100ddd8 'percent_brightness' 'const double'
    `-CallExpr 0x151027e90 <line:19:3, col:59> 'int'
      |-ImplicitCastExpr 0x151027e78 <col:3> 'int (*)()' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x151027d98 <col:3> 'int ()' Function 0x151027ce0 'ConvertHSBToRGB' 'int ()'
      |-ImplicitCastExpr 0x151027ee0 <col:19> 'double' <LValueToRValue>
      | `-DeclRefExpr 0x151027db8 <col:19> 'double' lvalue Var 0x15100e2b8 'hue' 'double'
      |-ImplicitCastExpr 0x151027ef8 <col:23> 'double' <LValueToRValue>
      | `-DeclRefExpr 0x151027dd8 <col:23> 'double' lvalue Var 0x15100e338 'saturation' 'double'
      |-ImplicitCastExpr 0x151027f10 <col:34> 'double' <LValueToRValue>
      | `-DeclRefExpr 0x151027df8 <col:34> 'double' lvalue Var 0x15100e238 'brightness' 'double'
      |-ImplicitCastExpr 0x151027f28 <col:45> 'double *' <LValueToRValue>
      | `-DeclRefExpr 0x151027e18 <col:45> 'double *' lvalue ParmVar 0x15100de88 'red' 'double *'
      |-ImplicitCastExpr 0x151027f40 <col:49> 'double *' <LValueToRValue>
      | `-DeclRefExpr 0x151027e38 <col:49> 'double *' lvalue ParmVar 0x15100df08 'green' 'double *'
      `-ImplicitCastExpr 0x151027f58 <col:55> 'double *' <LValueToRValue>
        `-DeclRefExpr 0x151027e58 <col:55> 'double *' lvalue ParmVar 0x15100df88 'blue' 'double *'
