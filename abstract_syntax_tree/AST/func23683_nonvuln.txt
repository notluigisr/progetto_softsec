TranslationUnitDecl 0x132055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1320564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x132055bd0 '__int128'
|-TypedefDecl 0x132056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x132055bf0 'unsigned __int128'
|-TypedefDecl 0x13280be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13280bc00 'struct __NSConstantString_tag'
|   `-Record 0x132056580 '__NSConstantString_tag'
|-TypedefDecl 0x13280be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x132055d90 '__SVInt8_t'
|-TypedefDecl 0x13280bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x132055db0 '__SVInt16_t'
|-TypedefDecl 0x13280bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x132055dd0 '__SVInt32_t'
|-TypedefDecl 0x13280bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x132055df0 '__SVInt64_t'
|-TypedefDecl 0x13280c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x132055e10 '__SVUint8_t'
|-TypedefDecl 0x13280c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x132055e30 '__SVUint16_t'
|-TypedefDecl 0x13280c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x132055e50 '__SVUint32_t'
|-TypedefDecl 0x13280c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x132055e70 '__SVUint64_t'
|-TypedefDecl 0x13280c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x132055e90 '__SVFloat16_t'
|-TypedefDecl 0x13280c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x132055eb0 '__SVFloat32_t'
|-TypedefDecl 0x13280c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x132055ed0 '__SVFloat64_t'
|-TypedefDecl 0x13280c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x132055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13280c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x132055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13280c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x132055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13280c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x132055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13280c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x132055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13280c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x132055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13280c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x132055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13280c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x132055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13280c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x132055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13280c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x132056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13280c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x132056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13280c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x132056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13280c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x132056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13280c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x132056090 '__clang_svint8x3_t'
|-TypedefDecl 0x13280c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1320560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13280c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1320560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13280c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1320560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13280c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x132056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13280ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x132056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13280cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x132056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13280cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x132056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13280cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x132056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13280d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1320561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13280d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1320561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13280d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1320561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13280d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x132056210 '__clang_svint8x4_t'
|-TypedefDecl 0x13280d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x132056230 '__clang_svint16x4_t'
|-TypedefDecl 0x13280d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x132056250 '__clang_svint32x4_t'
|-TypedefDecl 0x13280d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x132056270 '__clang_svint64x4_t'
|-TypedefDecl 0x13280d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x132056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13280d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1320562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13280d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1320562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13280d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1320562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13280d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x132056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13280d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x132056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13280d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x132056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13280d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x132056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13280da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x132056390 '__SVBool_t'
|-TypedefDecl 0x13280da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1320563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13280dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1320563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13280db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1320563f0 '__SVCount_t'
|-TypedefDecl 0x13280dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13280dbb0 'char *'
|   `-BuiltinType 0x1320556b0 'char'
|-TypedefDecl 0x13280dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13280dbb0 'char *'
|   `-BuiltinType 0x1320556b0 'char'
|-FunctionDecl 0x13280de38 <dataset_diviso_filec/func23683_nonvuln.c:1:1, line:34:1> line:1:1 handle_mibdirs_conf 'int (const char *, char *)'
| |-ParmVarDecl 0x13280dcd8 <col:21, col:33> col:33 token 'const char *'
| |-ParmVarDecl 0x13280dd58 <col:40, col:46> col:46 used line 'char *'
| `-CompoundStmt 0x13282b1c0 <line:2:1, line:34:1>
|   |-DeclStmt 0x13280dfb8 <line:3:5, col:25>
|   | `-VarDecl 0x13280df50 <col:5, col:21> col:21 used ctmp 'char *'
|   `-IfStmt 0x13282b130 <line:5:5, line:31:5> has_else
|     |-RecoveryExpr 0x13280e000 <line:5:9> '<dependent type>' contains-errors lvalue
|     |-CompoundStmt 0x13282ae90 <col:21, line:25:5>
|     | |-IfStmt 0x13282acd8 <line:6:9, line:23:9> has_else
|     | | |-BinaryOperator 0x13280e1d0 <line:6:13, col:44> 'int' '||'
|     | | | |-ParenExpr 0x13280e0d8 <col:13, col:26> 'int'
|     | | | | `-BinaryOperator 0x13280e0b8 <col:14, col:23> 'int' '=='
|     | | | |   |-ImplicitCastExpr 0x13280e0a0 <col:14, col:15> 'int' <IntegralCast>
|     | | | |   | `-ImplicitCastExpr 0x13280e088 <col:14, col:15> 'char' <LValueToRValue>
|     | | | |   |   `-UnaryOperator 0x13280e058 <col:14, col:15> 'char' lvalue prefix '*' cannot overflow
|     | | | |   |     `-ImplicitCastExpr 0x13280e040 <col:15> 'char *' <LValueToRValue>
|     | | | |   |       `-DeclRefExpr 0x13280e020 <col:15> 'char *' lvalue ParmVar 0x13280dd58 'line' 'char *'
|     | | | |   `-CharacterLiteral 0x13280e070 <col:23> 'int' 43
|     | | | `-ParenExpr 0x13280e1b0 <col:31, col:44> 'int'
|     | | |   `-BinaryOperator 0x13280e190 <col:32, col:41> 'int' '=='
|     | | |     |-ImplicitCastExpr 0x13280e178 <col:32, col:33> 'int' <IntegralCast>
|     | | |     | `-ImplicitCastExpr 0x13280e160 <col:32, col:33> 'char' <LValueToRValue>
|     | | |     |   `-UnaryOperator 0x13280e130 <col:32, col:33> 'char' lvalue prefix '*' cannot overflow
|     | | |     |     `-ImplicitCastExpr 0x13280e118 <col:33> 'char *' <LValueToRValue>
|     | | |     |       `-DeclRefExpr 0x13280e0f8 <col:33> 'char *' lvalue ParmVar 0x13280dd58 'line' 'char *'
|     | | |     `-CharacterLiteral 0x13280e148 <col:41> 'int' 45
|     | | |-CompoundStmt 0x13282a858 <col:47, line:17:9>
|     | | | |-IfStmt 0x132827500 <line:8:13, line:12:13>
|     | | | | |-UnaryOperator 0x132827228 <line:8:17, col:18> 'int' prefix '!' cannot overflow
|     | | | | | `-ImplicitCastExpr 0x132827210 <col:18> 'char *' <LValueToRValue>
|     | | | | |   `-DeclRefExpr 0x1328271f0 <col:18> 'char *' lvalue Var 0x13280df50 'ctmp' 'char *'
|     | | | | `-CompoundStmt 0x1328274e0 <col:24, line:12:13>
|     | | | |   |-CallExpr 0x1328274a8 <line:9:17, line:10:35> 'int'
|     | | | |   | |-ImplicitCastExpr 0x132827490 <line:9:17> 'int (*)()' <FunctionToPointerDecay>
|     | | | |   | | `-DeclRefExpr 0x132827350 <col:17> 'int ()' Function 0x132827298 'DEBUGMSGTL' 'int ()'
|     | | | |   | `-ParenExpr 0x132827440 <col:28, line:10:34> 'char *'
|     | | | |   |   `-BinaryOperator 0x132827420 <line:9:29, line:10:29> 'char *' ','
|     | | | |   |     |-ImplicitCastExpr 0x1328273f0 <line:9:29> 'char *' <ArrayToPointerDecay>
|     | | | |   |     | `-StringLiteral 0x1328273b0 <col:29> 'char[4]' lvalue "STR"
|     | | | |   |     `-ImplicitCastExpr 0x132827408 <line:10:29> 'char *' <ArrayToPointerDecay>
|     | | | |   |       `-StringLiteral 0x1328273d0 <col:29> 'char[4]' lvalue "STR"
|     | | | |   `-ReturnStmt 0x1328274d0 <line:11:17>
|     | | | `-IfStmt 0x13282a828 <line:13:13, line:16:74> has_else
|     | | |   |-BinaryOperator 0x1328275b8 <line:13:16, col:27> 'int' '=='
|     | | |   | |-ImplicitCastExpr 0x1328275a0 <col:16, col:21> 'int' <IntegralCast>
|     | | |   | | `-ImplicitCastExpr 0x132827588 <col:16, col:21> 'char' <LValueToRValue>
|     | | |   | |   `-UnaryOperator 0x132827558 <col:16, col:21> 'char' lvalue prefix '*' cannot overflow
|     | | |   | |     `-UnaryOperator 0x132827540 <col:17, col:21> 'char *' postfix '++'
|     | | |   | |       `-DeclRefExpr 0x132827520 <col:17> 'char *' lvalue ParmVar 0x13280dd58 'line' 'char *'
|     | | |   | `-CharacterLiteral 0x132827570 <col:27> 'int' 43
|     | | |   |-CallExpr 0x13282a600 <line:14:17, col:74> '<dependent type>' contains-errors
|     | | |   | |-DeclRefExpr 0x132827840 <col:17> 'int (char *, const char *, ...)' Function 0x132827628 'sprintf' 'int (char *, const char *, ...)'
|     | | |   | |-DeclRefExpr 0x132827860 <col:25> 'char *' lvalue Var 0x13280df50 'ctmp' 'char *'
|     | | |   | |-StringLiteral 0x132827880 <col:31> 'char[4]' lvalue "STR"
|     | | |   | |-RecoveryExpr 0x132827968 <col:38> '<dependent type>' contains-errors lvalue
|     | | |   | |-RecoveryExpr 0x132827988 <col:50> '<dependent type>' contains-errors lvalue
|     | | |   | `-DeclRefExpr 0x1328278d0 <col:70> 'char *' lvalue ParmVar 0x13280dd58 'line' 'char *'
|     | | |   `-CallExpr 0x13282a7e0 <line:16:17, col:74> '<dependent type>' contains-errors
|     | | |     |-DeclRefExpr 0x13282a648 <col:17> 'int (char *, const char *, ...)' Function 0x132827628 'sprintf' 'int (char *, const char *, ...)'
|     | | |     |-DeclRefExpr 0x13282a668 <col:25> 'char *' lvalue Var 0x13280df50 'ctmp' 'char *'
|     | | |     |-StringLiteral 0x13282a688 <col:31> 'char[4]' lvalue "STR"
|     | | |     |-DeclRefExpr 0x13282a6a8 <col:38> 'char *' lvalue ParmVar 0x13280dd58 'line' 'char *'
|     | | |     |-RecoveryExpr 0x13282a770 <col:44> '<dependent type>' contains-errors lvalue
|     | | |     `-RecoveryExpr 0x13282a790 <col:64> '<dependent type>' contains-errors lvalue
|     | | `-CompoundStmt 0x13282acb8 <line:17:16, line:23:9>
|     | |   |-BinaryOperator 0x13282ab40 <line:18:13, col:31> 'char *' '='
|     | |   | |-DeclRefExpr 0x13282a878 <col:13> 'char *' lvalue Var 0x13280df50 'ctmp' 'char *'
|     | |   | `-CallExpr 0x13282aae8 <col:20, col:31> 'char *'
|     | |   |   |-ImplicitCastExpr 0x13282aad0 <col:20> 'char *(*)(const char *)' <FunctionToPointerDecay>
|     | |   |   | `-DeclRefExpr 0x13282aa48 <col:20> 'char *(const char *)' Function 0x13282a8d8 'strdup' 'char *(const char *)'
|     | |   |   `-ImplicitCastExpr 0x13282ab28 <col:27> 'const char *' <NoOp>
|     | |   |     `-ImplicitCastExpr 0x13282ab10 <col:27> 'char *' <LValueToRValue>
|     | |   |       `-DeclRefExpr 0x13282aa68 <col:27> 'char *' lvalue ParmVar 0x13280dd58 'line' 'char *'
|     | |   `-IfStmt 0x13282ac98 <line:19:13, line:22:13>
|     | |     |-UnaryOperator 0x13282ab98 <line:19:17, col:18> 'int' prefix '!' cannot overflow
|     | |     | `-ImplicitCastExpr 0x13282ab80 <col:18> 'char *' <LValueToRValue>
|     | |     |   `-DeclRefExpr 0x13282ab60 <col:18> 'char *' lvalue Var 0x13280df50 'ctmp' 'char *'
|     | |     `-CompoundStmt 0x13282ac78 <col:24, line:22:13>
|     | |       |-CallExpr 0x13282ac28 <line:20:17, col:35> 'int'
|     | |       | |-ImplicitCastExpr 0x13282ac10 <col:17> 'int (*)()' <FunctionToPointerDecay>
|     | |       | | `-DeclRefExpr 0x13282abb0 <col:17> 'int ()' Function 0x132827298 'DEBUGMSGTL' 'int ()'
|     | |       | `-ImplicitCastExpr 0x13282ac50 <col:28, col:34> 'char *' <ArrayToPointerDecay>
|     | |       |   `-ParenExpr 0x13282abf0 <col:28, col:34> 'char[4]' lvalue
|     | |       |     `-StringLiteral 0x13282abd0 <col:29> 'char[4]' lvalue "STR"
|     | |       `-ReturnStmt 0x13282ac68 <line:21:17>
|     | `-CallExpr 0x13282ae68 <line:24:9, col:29> '<dependent type>' contains-errors
|     |   |-DeclRefExpr 0x13282ade8 <col:9> 'int ()' Function 0x13282ad30 'SNMP_FREE' 'int ()'
|     |   `-RecoveryExpr 0x13282ae48 <col:19> '<dependent type>' contains-errors lvalue
|     `-CompoundStmt 0x13282b110 <line:25:12, line:31:5>
|       |-BinaryOperator 0x13282af98 <line:26:9, col:27> 'char *' '='
|       | |-DeclRefExpr 0x13282aeb0 <col:9> 'char *' lvalue Var 0x13280df50 'ctmp' 'char *'
|       | `-CallExpr 0x13282af40 <col:16, col:27> 'char *'
|       |   |-ImplicitCastExpr 0x13282af28 <col:16> 'char *(*)(const char *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x13282aed0 <col:16> 'char *(const char *)' Function 0x13282a8d8 'strdup' 'char *(const char *)'
|       |   `-ImplicitCastExpr 0x13282af80 <col:23> 'const char *' <NoOp>
|       |     `-ImplicitCastExpr 0x13282af68 <col:23> 'char *' <LValueToRValue>
|       |       `-DeclRefExpr 0x13282aef0 <col:23> 'char *' lvalue ParmVar 0x13280dd58 'line' 'char *'
|       `-IfStmt 0x13282b0f0 <line:27:9, line:30:9>
|         |-UnaryOperator 0x13282aff0 <line:27:13, col:14> 'int' prefix '!' cannot overflow
|         | `-ImplicitCastExpr 0x13282afd8 <col:14> 'char *' <LValueToRValue>
|         |   `-DeclRefExpr 0x13282afb8 <col:14> 'char *' lvalue Var 0x13280df50 'ctmp' 'char *'
|         `-CompoundStmt 0x13282b0d0 <col:20, line:30:9>
|           |-CallExpr 0x13282b080 <line:28:13, col:31> 'int'
|           | |-ImplicitCastExpr 0x13282b068 <col:13> 'int (*)()' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x13282b008 <col:13> 'int ()' Function 0x132827298 'DEBUGMSGTL' 'int ()'
|           | `-ImplicitCastExpr 0x13282b0a8 <col:24, col:30> 'char *' <ArrayToPointerDecay>
|           |   `-ParenExpr 0x13282b048 <col:24, col:30> 'char[4]' lvalue
|           |     `-StringLiteral 0x13282b028 <col:25> 'char[4]' lvalue "STR"
|           `-ReturnStmt 0x13282b0c0 <line:29:13>
|-FunctionDecl 0x132826c70 <line:7:29> col:29 implicit used malloc 'void *(unsigned long)' extern
| |-ParmVarDecl 0x132826d70 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-BuiltinAttr 0x132826d18 <<invalid sloc>> Implicit 871
| `-AllocSizeAttr 0x132826de0 <col:29> Implicit 1
|-FunctionDecl 0x132826e68 <col:36> col:36 implicit used strlen 'unsigned long (const char *)' extern
| |-ParmVarDecl 0x132826f68 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x132826f10 <<invalid sloc>> Implicit 902
|-FunctionDecl 0x132827628 <line:14:17> col:17 implicit used sprintf 'int (char *, const char *, ...)' extern
| |-ParmVarDecl 0x132827728 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x132827790 <<invalid sloc>> <invalid sloc> 'const char *'
| |-BuiltinAttr 0x1328276d0 <<invalid sloc>> Implicit 906
| `-FormatAttr 0x132827808 <col:17> Implicit printf 2 3
`-FunctionDecl 0x13282a8d8 <line:18:20> col:20 implicit used strdup 'char *(const char *)' extern
  |-ParmVarDecl 0x13282a9d8 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x13282a980 <<invalid sloc>> Implicit 950
