TranslationUnitDecl 0x121855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1218564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x121855bd0 '__int128'
|-TypedefDecl 0x121856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x121855bf0 'unsigned __int128'
|-TypedefDecl 0x121926230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x121926000 'struct __NSConstantString_tag'
|   `-Record 0x121856580 '__NSConstantString_tag'
|-TypedefDecl 0x121926298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x121855d90 '__SVInt8_t'
|-TypedefDecl 0x121926300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x121855db0 '__SVInt16_t'
|-TypedefDecl 0x121926368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x121855dd0 '__SVInt32_t'
|-TypedefDecl 0x1219263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x121855df0 '__SVInt64_t'
|-TypedefDecl 0x121926438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x121855e10 '__SVUint8_t'
|-TypedefDecl 0x1219264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x121855e30 '__SVUint16_t'
|-TypedefDecl 0x121926508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x121855e50 '__SVUint32_t'
|-TypedefDecl 0x121926570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x121855e70 '__SVUint64_t'
|-TypedefDecl 0x1219265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x121855e90 '__SVFloat16_t'
|-TypedefDecl 0x121926640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x121855eb0 '__SVFloat32_t'
|-TypedefDecl 0x1219266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x121855ed0 '__SVFloat64_t'
|-TypedefDecl 0x121926710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x121855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x121926778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x121855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1219267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x121855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x121926848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x121855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1219268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x121855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x121926918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x121855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x121926980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x121855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1219269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x121855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x121926a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x121855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x121926ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x121856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x121926b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x121856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x121926b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x121856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x121926bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x121856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x121926c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x121856090 '__clang_svint8x3_t'
|-TypedefDecl 0x121926cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1218560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x121926d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1218560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x121926d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1218560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x121926df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x121856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x121926e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x121856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x121926ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x121856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x121926f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x121856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x121926f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x121856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x121927800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1218561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x121927868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1218561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1219278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1218561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x121927938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x121856210 '__clang_svint8x4_t'
|-TypedefDecl 0x1219279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x121856230 '__clang_svint16x4_t'
|-TypedefDecl 0x121927a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x121856250 '__clang_svint32x4_t'
|-TypedefDecl 0x121927a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x121856270 '__clang_svint64x4_t'
|-TypedefDecl 0x121927ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x121856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x121927b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1218562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x121927ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1218562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x121927c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1218562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x121927c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x121856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x121927ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x121856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x121927d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x121856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x121927db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x121856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x121927e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x121856390 '__SVBool_t'
|-TypedefDecl 0x121927e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1218563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x121927ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1218563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x121927f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1218563f0 '__SVCount_t'
|-TypedefDecl 0x121927ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x121927fb0 'char *'
|   `-BuiltinType 0x1218556b0 'char'
|-TypedefDecl 0x121928068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x121927fb0 'char *'
|   `-BuiltinType 0x1218556b0 'char'
`-FunctionDecl 0x121928238 <dataset_diviso_filec/func19180_vuln.c:1:3, line:22:3> line:1:10 unescape 'char *(char *, const char *)'
  |-ParmVarDecl 0x1219280d8 <col:19, col:26> col:26 used dest 'char *'
  |-ParmVarDecl 0x121928158 <col:32, col:45> col:45 used src 'const char *'
  `-CompoundStmt 0x121941080 <line:2:3, line:22:3>
    |-WhileStmt 0x121940f78 <line:3:5, line:19:5>
    | |-ImplicitCastExpr 0x121928388 <line:3:12, col:13> 'char' <LValueToRValue>
    | | `-UnaryOperator 0x121928370 <col:12, col:13> 'const char' lvalue prefix '*' cannot overflow
    | |   `-ImplicitCastExpr 0x121928358 <col:13> 'const char *' <LValueToRValue>
    | |     `-DeclRefExpr 0x121928338 <col:13> 'const char *' lvalue ParmVar 0x121928158 'src' 'const char *'
    | `-CompoundStmt 0x121940f50 <col:18, line:19:5>
    |   |-IfStmt 0x121940eb0 <line:4:7, line:16:7> has_else
    |   | |-BinaryOperator 0x121928438 <line:4:11, col:19> 'int' '=='
    |   | | |-ImplicitCastExpr 0x121928420 <col:11, col:12> 'int' <IntegralCast>
    |   | | | `-ImplicitCastExpr 0x121928408 <col:11, col:12> 'char' <LValueToRValue>
    |   | | |   `-UnaryOperator 0x1219283d8 <col:11, col:12> 'const char' lvalue prefix '*' cannot overflow
    |   | | |     `-ImplicitCastExpr 0x1219283c0 <col:12> 'const char *' <LValueToRValue>
    |   | | |       `-DeclRefExpr 0x1219283a0 <col:12> 'const char *' lvalue ParmVar 0x121928158 'src' 'const char *'
    |   | | `-CharacterLiteral 0x1219283f0 <col:19> 'int' 92
    |   | |-CompoundStmt 0x121940da0 <col:25, line:14:7>
    |   | | |-UnaryOperator 0x121928478 <line:5:2, col:4> 'const char *' prefix '++'
    |   | | | `-DeclRefExpr 0x121928458 <col:4> 'const char *' lvalue ParmVar 0x121928158 'src' 'const char *'
    |   | | `-SwitchStmt 0x121928510 <line:6:2, line:13:2>
    |   | |   |-ImplicitCastExpr 0x1219284f8 <line:6:10, col:11> 'int' <IntegralCast>
    |   | |   | `-ImplicitCastExpr 0x1219284e0 <col:10, col:11> 'char' <LValueToRValue>
    |   | |   |   `-UnaryOperator 0x1219284c8 <col:10, col:11> 'const char' lvalue prefix '*' cannot overflow
    |   | |   |     `-ImplicitCastExpr 0x1219284b0 <col:11> 'const char *' <LValueToRValue>
    |   | |   |       `-DeclRefExpr 0x121928490 <col:11> 'const char *' lvalue ParmVar 0x121928158 'src' 'const char *'
    |   | |   `-CompoundStmt 0x121940d38 <col:16, line:13:2>
    |   | |     |-CaseStmt 0x121928568 <line:7:2, col:20>
    |   | |     | |-ConstantExpr 0x121928550 <col:7> 'int'
    |   | |     | | `-CharacterLiteral 0x121928538 <col:7> 'int' 110
    |   | |     | `-BinaryOperator 0x121928610 <col:12, col:20> 'char' '='
    |   | |     |   |-UnaryOperator 0x1219285c8 <col:12, col:13> 'char' lvalue prefix '*' cannot overflow
    |   | |     |   | `-ImplicitCastExpr 0x1219285b0 <col:13> 'char *' <LValueToRValue>
    |   | |     |   |   `-DeclRefExpr 0x121928590 <col:13> 'char *' lvalue ParmVar 0x1219280d8 'dest' 'char *'
    |   | |     |   `-ImplicitCastExpr 0x1219285f8 <col:20> 'char' <IntegralCast>
    |   | |     |     `-CharacterLiteral 0x1219285e0 <col:20> 'int' 10
    |   | |     |-BreakStmt 0x121928630 <col:26>
    |   | |     |-CaseStmt 0x121928668 <line:8:2, col:20>
    |   | |     | |-ConstantExpr 0x121928650 <col:7> 'int'
    |   | |     | | `-CharacterLiteral 0x121928638 <col:7> 'int' 114
    |   | |     | `-BinaryOperator 0x121928710 <col:12, col:20> 'char' '='
    |   | |     |   |-UnaryOperator 0x1219286c8 <col:12, col:13> 'char' lvalue prefix '*' cannot overflow
    |   | |     |   | `-ImplicitCastExpr 0x1219286b0 <col:13> 'char *' <LValueToRValue>
    |   | |     |   |   `-DeclRefExpr 0x121928690 <col:13> 'char *' lvalue ParmVar 0x1219280d8 'dest' 'char *'
    |   | |     |   `-ImplicitCastExpr 0x1219286f8 <col:20> 'char' <IntegralCast>
    |   | |     |     `-CharacterLiteral 0x1219286e0 <col:20> 'int' 13
    |   | |     |-BreakStmt 0x121928730 <col:26>
    |   | |     |-CaseStmt 0x121928768 <line:9:2, col:20>
    |   | |     | |-ConstantExpr 0x121928750 <col:7> 'int'
    |   | |     | | `-CharacterLiteral 0x121928738 <col:7> 'int' 116
    |   | |     | `-BinaryOperator 0x121940a18 <col:12, col:20> 'char' '='
    |   | |     |   |-UnaryOperator 0x1219287c8 <col:12, col:13> 'char' lvalue prefix '*' cannot overflow
    |   | |     |   | `-ImplicitCastExpr 0x1219287b0 <col:13> 'char *' <LValueToRValue>
    |   | |     |   |   `-DeclRefExpr 0x121928790 <col:13> 'char *' lvalue ParmVar 0x1219280d8 'dest' 'char *'
    |   | |     |   `-ImplicitCastExpr 0x121940a00 <col:20> 'char' <IntegralCast>
    |   | |     |     `-CharacterLiteral 0x1219287e0 <col:20> 'int' 9
    |   | |     |-BreakStmt 0x121940a38 <col:26>
    |   | |     |-CaseStmt 0x121940a70 <line:10:2, col:20>
    |   | |     | |-ConstantExpr 0x121940a58 <col:7> 'int'
    |   | |     | | `-CharacterLiteral 0x121940a40 <col:7> 'int' 102
    |   | |     | `-BinaryOperator 0x121940b18 <col:12, col:20> 'char' '='
    |   | |     |   |-UnaryOperator 0x121940ad0 <col:12, col:13> 'char' lvalue prefix '*' cannot overflow
    |   | |     |   | `-ImplicitCastExpr 0x121940ab8 <col:13> 'char *' <LValueToRValue>
    |   | |     |   |   `-DeclRefExpr 0x121940a98 <col:13> 'char *' lvalue ParmVar 0x1219280d8 'dest' 'char *'
    |   | |     |   `-ImplicitCastExpr 0x121940b00 <col:20> 'char' <IntegralCast>
    |   | |     |     `-CharacterLiteral 0x121940ae8 <col:20> 'int' 12
    |   | |     |-BreakStmt 0x121940b38 <col:26>
    |   | |     |-CaseStmt 0x121940b70 <line:11:2, col:20>
    |   | |     | |-ConstantExpr 0x121940b58 <col:7> 'int'
    |   | |     | | `-CharacterLiteral 0x121940b40 <col:7> 'int' 118
    |   | |     | `-BinaryOperator 0x121940c18 <col:12, col:20> 'char' '='
    |   | |     |   |-UnaryOperator 0x121940bd0 <col:12, col:13> 'char' lvalue prefix '*' cannot overflow
    |   | |     |   | `-ImplicitCastExpr 0x121940bb8 <col:13> 'char *' <LValueToRValue>
    |   | |     |   |   `-DeclRefExpr 0x121940b98 <col:13> 'char *' lvalue ParmVar 0x1219280d8 'dest' 'char *'
    |   | |     |   `-ImplicitCastExpr 0x121940c00 <col:20> 'char' <IntegralCast>
    |   | |     |     `-CharacterLiteral 0x121940be8 <col:20> 'int' 11
    |   | |     |-BreakStmt 0x121940c38 <col:26>
    |   | |     `-DefaultStmt 0x121940d18 <line:12:2, col:20>
    |   | |       `-BinaryOperator 0x121940cf8 <col:11, col:20> 'char' '='
    |   | |         |-UnaryOperator 0x121940c78 <col:11, col:12> 'char' lvalue prefix '*' cannot overflow
    |   | |         | `-ImplicitCastExpr 0x121940c60 <col:12> 'char *' <LValueToRValue>
    |   | |         |   `-DeclRefExpr 0x121940c40 <col:12> 'char *' lvalue ParmVar 0x1219280d8 'dest' 'char *'
    |   | |         `-ImplicitCastExpr 0x121940ce0 <col:19, col:20> 'char' <LValueToRValue>
    |   | |           `-UnaryOperator 0x121940cc8 <col:19, col:20> 'const char' lvalue prefix '*' cannot overflow
    |   | |             `-ImplicitCastExpr 0x121940cb0 <col:20> 'const char *' <LValueToRValue>
    |   | |               `-DeclRefExpr 0x121940c90 <col:20> 'const char *' lvalue ParmVar 0x121928158 'src' 'const char *'
    |   | `-CompoundStmt 0x121940e98 <line:14:14, line:16:7>
    |   |   `-BinaryOperator 0x121940e78 <line:15:2, col:11> 'char' '='
    |   |     |-UnaryOperator 0x121940df8 <col:2, col:3> 'char' lvalue prefix '*' cannot overflow
    |   |     | `-ImplicitCastExpr 0x121940de0 <col:3> 'char *' <LValueToRValue>
    |   |     |   `-DeclRefExpr 0x121940dc0 <col:3> 'char *' lvalue ParmVar 0x1219280d8 'dest' 'char *'
    |   |     `-ImplicitCastExpr 0x121940e60 <col:10, col:11> 'char' <LValueToRValue>
    |   |       `-UnaryOperator 0x121940e48 <col:10, col:11> 'const char' lvalue prefix '*' cannot overflow
    |   |         `-ImplicitCastExpr 0x121940e30 <col:11> 'const char *' <LValueToRValue>
    |   |           `-DeclRefExpr 0x121940e10 <col:11> 'const char *' lvalue ParmVar 0x121928158 'src' 'const char *'
    |   |-UnaryOperator 0x121940f00 <line:17:7, col:9> 'const char *' prefix '++'
    |   | `-DeclRefExpr 0x121940ee0 <col:9> 'const char *' lvalue ParmVar 0x121928158 'src' 'const char *'
    |   `-UnaryOperator 0x121940f38 <line:18:7, col:9> 'char *' prefix '++'
    |     `-DeclRefExpr 0x121940f18 <col:9> 'char *' lvalue ParmVar 0x1219280d8 'dest' 'char *'
    |-BinaryOperator 0x121941018 <line:20:5, col:13> 'char' '='
    | |-UnaryOperator 0x121940fd0 <col:5, col:6> 'char' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x121940fb8 <col:6> 'char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x121940f98 <col:6> 'char *' lvalue ParmVar 0x1219280d8 'dest' 'char *'
    | `-ImplicitCastExpr 0x121941000 <col:13> 'char' <IntegralCast>
    |   `-CharacterLiteral 0x121940fe8 <col:13> 'int' 0
    `-ReturnStmt 0x121941070 <line:21:5, col:12>
      `-ImplicitCastExpr 0x121941058 <col:12> 'char *' <LValueToRValue>
        `-DeclRefExpr 0x121941038 <col:12> 'char *' lvalue ParmVar 0x1219280d8 'dest' 'char *'
