TranslationUnitDecl 0x138055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1380564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x138055bd0 '__int128'
|-TypedefDecl 0x138056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x138055bf0 'unsigned __int128'
|-TypedefDecl 0x13000be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13000bc00 'struct __NSConstantString_tag'
|   `-Record 0x138056580 '__NSConstantString_tag'
|-TypedefDecl 0x13000be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x138055d90 '__SVInt8_t'
|-TypedefDecl 0x13000bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x138055db0 '__SVInt16_t'
|-TypedefDecl 0x13000bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x138055dd0 '__SVInt32_t'
|-TypedefDecl 0x13000bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x138055df0 '__SVInt64_t'
|-TypedefDecl 0x13000c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x138055e10 '__SVUint8_t'
|-TypedefDecl 0x13000c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x138055e30 '__SVUint16_t'
|-TypedefDecl 0x13000c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x138055e50 '__SVUint32_t'
|-TypedefDecl 0x13000c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x138055e70 '__SVUint64_t'
|-TypedefDecl 0x13000c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x138055e90 '__SVFloat16_t'
|-TypedefDecl 0x13000c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x138055eb0 '__SVFloat32_t'
|-TypedefDecl 0x13000c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x138055ed0 '__SVFloat64_t'
|-TypedefDecl 0x13000c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x138055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13000c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x138055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13000c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x138055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13000c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x138055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13000c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x138055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13000c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x138055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13000c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x138055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13000c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x138055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13000c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x138055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13000c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x138056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13000c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x138056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13000c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x138056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13000c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x138056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13000c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x138056090 '__clang_svint8x3_t'
|-TypedefDecl 0x13000c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1380560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13000c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1380560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13000c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1380560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13000c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x138056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13000ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x138056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13000cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x138056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13000cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x138056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13000cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x138056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13000d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1380561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13000d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1380561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13000d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1380561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13000d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x138056210 '__clang_svint8x4_t'
|-TypedefDecl 0x13000d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x138056230 '__clang_svint16x4_t'
|-TypedefDecl 0x13000d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x138056250 '__clang_svint32x4_t'
|-TypedefDecl 0x13000d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x138056270 '__clang_svint64x4_t'
|-TypedefDecl 0x13000d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x138056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13000d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1380562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13000d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1380562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13000d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1380562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13000d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x138056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13000d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x138056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13000d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x138056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13000d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x138056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13000da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x138056390 '__SVBool_t'
|-TypedefDecl 0x13000da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1380563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13000dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1380563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13000db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1380563f0 '__SVCount_t'
|-TypedefDecl 0x13000dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13000dbb0 'char *'
|   `-BuiltinType 0x1380556b0 'char'
|-TypedefDecl 0x13000dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13000dbb0 'char *'
|   `-BuiltinType 0x1380556b0 'char'
|-FunctionDecl 0x13000dff8 <dataset_diviso_filec/func23443_vuln.c:1:1, line:56:1> line:1:32 invalid _gdContributionsCalc 'int *(unsigned int, unsigned int, double, const int)' static inline
| |-ParmVarDecl 0x13000dcf0 <col:53, col:66> col:66 used line_size 'unsigned int'
| |-ParmVarDecl 0x13000dd70 <col:77, col:90> col:90 used src_size 'unsigned int'
| |-ParmVarDecl 0x13000ddf0 <col:100, col:107> col:107 used scale_d 'double'
| |-ParmVarDecl 0x13000de70 <col:117, col:144> col:144 invalid pFilter 'const int'
| `-CompoundStmt 0x13002c3c8 <line:2:1, line:56:1>
|   |-DeclStmt 0x13000e140 <line:3:5, col:19>
|   | `-VarDecl 0x13000e0d8 <col:5, col:12> col:12 used width_d 'double'
|   |-DeclStmt 0x13000e1f8 <line:4:5, col:27>
|   | `-VarDecl 0x13000e170 <col:5, col:24> col:12 used scale_f_d 'double' cinit
|   |   `-FloatingLiteral 0x13000e1d8 <col:24> 'double' 1.000000e+00
|   |-DeclStmt 0x13000e2c8 <line:5:5, col:53>
|   | `-VarDecl 0x13000e228 <col:5, col:35> col:18 used filter_width_d 'const double' cinit
|   |   `-RecoveryExpr 0x13000e2a8 <col:35> '<dependent type>' contains-errors lvalue
|   |-DeclStmt 0x13000e360 <line:6:2, col:18>
|   | `-VarDecl 0x13000e2f8 <col:2, col:6> col:6 used windows_size 'int'
|   |-DeclStmt 0x130027400 <line:7:2, col:16>
|   | `-VarDecl 0x13000e390 <col:2, col:15> col:15 used u 'unsigned int'
|   |-IfStmt 0x1300276a0 <line:10:5, line:15:5> has_else
|   | |-BinaryOperator 0x130027488 <line:10:9, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x130027470 <col:9> 'double' <LValueToRValue>
|   | | | `-DeclRefExpr 0x130027430 <col:9> 'double' lvalue ParmVar 0x13000ddf0 'scale_d' 'double'
|   | | `-FloatingLiteral 0x130027450 <col:19> 'double' 1.000000e+00
|   | |-CompoundStmt 0x1300275f0 <col:24, line:13:5>
|   | | |-BinaryOperator 0x130027558 <line:11:9, col:36> 'double' contains-errors '='
|   | | | |-DeclRefExpr 0x1300274a8 <col:9> 'double' lvalue Var 0x13000e0d8 'width_d' 'double'
|   | | | `-BinaryOperator 0x130027538 <col:19, col:36> 'double' contains-errors '/'
|   | | |   |-ImplicitCastExpr 0x130027508 <col:19> 'double' contains-errors <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x1300274c8 <col:19> 'const double' contains-errors lvalue Var 0x13000e228 'filter_width_d' 'const double'
|   | | |   `-ImplicitCastExpr 0x130027520 <col:36> 'double' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x1300274e8 <col:36> 'double' lvalue ParmVar 0x13000ddf0 'scale_d' 'double'
|   | | `-BinaryOperator 0x1300275d0 <line:12:9, col:21> 'double' '='
|   | |   |-DeclRefExpr 0x130027578 <col:9> 'double' lvalue Var 0x13000e170 'scale_f_d' 'double'
|   | |   `-ImplicitCastExpr 0x1300275b8 <col:21> 'double' <LValueToRValue>
|   | |     `-DeclRefExpr 0x130027598 <col:21> 'double' lvalue ParmVar 0x13000ddf0 'scale_d' 'double'
|   | `-CompoundStmt 0x130027688 <line:13:13, line:15:5>
|   |   `-BinaryOperator 0x130027668 <line:14:9, col:18> 'double' contains-errors '='
|   |     |-DeclRefExpr 0x130027610 <col:9> 'double' lvalue Var 0x13000e0d8 'width_d' 'double'
|   |     `-ImplicitCastExpr 0x130027650 <col:18> 'double' contains-errors <LValueToRValue>
|   |       `-DeclRefExpr 0x130027630 <col:18> 'const double' contains-errors lvalue Var 0x13000e228 'filter_width_d' 'const double'
|   |-BinaryOperator 0x130027e98 <line:17:5, col:45> 'int' '='
|   | |-DeclRefExpr 0x1300276d0 <col:5> 'int' lvalue Var 0x13000e2f8 'windows_size' 'int'
|   | `-BinaryOperator 0x130027e78 <col:20, col:45> 'int' '+'
|   |   |-BinaryOperator 0x130027e38 <col:20, col:41> 'int' '*'
|   |   | |-IntegerLiteral 0x1300276f0 <col:20> 'int' 2
|   |   | `-CStyleCastExpr 0x130027e10 <col:24, col:41> 'int' <FloatingToIntegral>
|   |   |   `-CallExpr 0x130027db8 <col:29, col:41> 'double'
|   |   |     |-ImplicitCastExpr 0x130027da0 <col:29> 'double (*)(double)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x130027d30 <col:29> 'double (double)' Function 0x130027b70 'ceil' 'double (double)'
|   |   |     `-ImplicitCastExpr 0x130027de0 <col:34> 'double' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x130027d50 <col:34> 'double' lvalue Var 0x13000e0d8 'width_d' 'double'
|   |   `-IntegerLiteral 0x130027e58 <col:45> 'int' 1
|   |-ForStmt 0x13002c348 <line:20:5, line:54:4>
|   | |-BinaryOperator 0x130028170 <line:20:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x130028118 <col:10> 'unsigned int' lvalue Var 0x13000e390 'u' 'unsigned int'
|   | | `-ImplicitCastExpr 0x130028158 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x130028138 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x130028200 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x1300281d0 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x130028190 <col:17> 'unsigned int' lvalue Var 0x13000e390 'u' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1300281e8 <col:21> 'unsigned int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1300281b0 <col:21> 'unsigned int' lvalue ParmVar 0x13000dcf0 'line_size' 'unsigned int'
|   | |-UnaryOperator 0x130028240 <col:32, col:33> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x130028220 <col:32> 'unsigned int' lvalue Var 0x13000e390 'u' 'unsigned int'
|   | `-CompoundStmt 0x13002c2f0 <col:37, line:54:4>
|   |   |-DeclStmt 0x1300283a8 <line:21:9, col:51>
|   |   | `-VarDecl 0x130028270 <col:9, col:44> col:22 used dCenter 'const double' cinit
|   |   |   `-BinaryOperator 0x130028388 <col:32, col:44> 'double' '/'
|   |   |     |-CStyleCastExpr 0x130028328 <col:32, col:40> 'double' <IntegralToFloating>
|   |   |     | `-ImplicitCastExpr 0x130028310 <col:40> 'unsigned int' <LValueToRValue> part_of_explicit_cast
|   |   |     |   `-DeclRefExpr 0x1300282d8 <col:40> 'unsigned int' lvalue Var 0x13000e390 'u' 'unsigned int'
|   |   |     `-ImplicitCastExpr 0x130028370 <col:44> 'double' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x130028350 <col:44> 'double' lvalue ParmVar 0x13000ddf0 'scale_d' 'double'
|   |   |-DeclStmt 0x13002a518 <line:23:9, col:68>
|   |   | `-VarDecl 0x13002a000 <col:9, col:67> col:22 used iLeft 'int' register cinit
|   |   |   `-CallExpr 0x13002a490 <col:30, col:67> 'int'
|   |   |     |-ImplicitCastExpr 0x13002a478 <col:30> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x13002a148 <col:30> 'int ()' Function 0x13002a090 'MAX' 'int ()'
|   |   |     |-IntegerLiteral 0x13002a168 <col:34> 'int' 0
|   |   |     `-CStyleCastExpr 0x13002a450 <col:37, col:66> 'int' <FloatingToIntegral>
|   |   |       `-CallExpr 0x13002a410 <col:42, col:66> 'double'
|   |   |         |-ImplicitCastExpr 0x13002a3f8 <col:42> 'double (*)(double)' <FunctionToPointerDecay>
|   |   |         | `-DeclRefExpr 0x13002a348 <col:42> 'double (double)' Function 0x13002a188 'floor' 'double (double)'
|   |   |         `-BinaryOperator 0x13002a3d8 <col:49, col:59> 'double' '-'
|   |   |           |-ImplicitCastExpr 0x13002a3a8 <col:49> 'double' <LValueToRValue>
|   |   |           | `-DeclRefExpr 0x13002a368 <col:49> 'const double' lvalue Var 0x130028270 'dCenter' 'const double'
|   |   |           `-ImplicitCastExpr 0x13002a3c0 <col:59> 'double' <LValueToRValue>
|   |   |             `-DeclRefExpr 0x13002a388 <col:59> 'double' lvalue Var 0x13000e0d8 'width_d' 'double'
|   |   |-DeclStmt 0x13002a8e0 <line:24:9, col:74>
|   |   | `-VarDecl 0x13002a548 <col:9, col:73> col:13 used iRight 'int' cinit
|   |   |   `-CallExpr 0x13002a8b0 <col:22, col:73> 'int'
|   |   |     |-ImplicitCastExpr 0x13002a898 <col:22> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x13002a690 <col:22> 'int ()' Function 0x13002a5d8 'MIN' 'int ()'
|   |   |     |-CStyleCastExpr 0x13002a7b8 <col:26, col:53> 'int' <FloatingToIntegral>
|   |   |     | `-CallExpr 0x13002a778 <col:31, col:53> 'double'
|   |   |     |   |-ImplicitCastExpr 0x13002a760 <col:31> 'double (*)(double)' <FunctionToPointerDecay>
|   |   |     |   | `-DeclRefExpr 0x13002a6b0 <col:31> 'double (double)' Function 0x130027b70 'ceil' 'double (double)'
|   |   |     |   `-BinaryOperator 0x13002a740 <col:36, col:46> 'double' '+'
|   |   |     |     |-ImplicitCastExpr 0x13002a710 <col:36> 'double' <LValueToRValue>
|   |   |     |     | `-DeclRefExpr 0x13002a6d0 <col:36> 'const double' lvalue Var 0x130028270 'dCenter' 'const double'
|   |   |     |     `-ImplicitCastExpr 0x13002a728 <col:46> 'double' <LValueToRValue>
|   |   |     |       `-DeclRefExpr 0x13002a6f0 <col:46> 'double' lvalue Var 0x13000e0d8 'width_d' 'double'
|   |   |     `-BinaryOperator 0x13002a878 <col:56, col:72> 'int' '-'
|   |   |       |-CStyleCastExpr 0x13002a830 <col:56, col:61> 'int' <IntegralCast>
|   |   |       | `-ImplicitCastExpr 0x13002a818 <col:61> 'unsigned int' <LValueToRValue> part_of_explicit_cast
|   |   |       |   `-DeclRefExpr 0x13002a7e0 <col:61> 'unsigned int' lvalue ParmVar 0x13000dd70 'src_size' 'unsigned int'
|   |   |       `-IntegerLiteral 0x13002a858 <col:72> 'int' 1
|   |   |-DeclStmt 0x13002a998 <line:25:9, col:34>
|   |   | `-VarDecl 0x13002a910 <col:9, col:31> col:16 used dTotalWeight 'double' cinit
|   |   |   `-FloatingLiteral 0x13002a978 <col:31> 'double' 0.000000e+00
|   |   |-DeclStmt 0x13002aa30 <line:26:3, col:11>
|   |   | `-VarDecl 0x13002a9c8 <col:3, col:7> col:7 used iSrc 'int'
|   |   |-IfStmt 0x13002ae48 <line:32:9, line:38:9>
|   |   | |-BinaryOperator 0x13002abd0 <line:32:13, col:34> 'int' '>'
|   |   | | |-BinaryOperator 0x13002ab78 <col:13, col:30> 'int' '+'
|   |   | | | |-BinaryOperator 0x13002ab38 <col:13, col:22> 'int' '-'
|   |   | | | | |-ImplicitCastExpr 0x13002ab08 <col:13> 'int' <LValueToRValue>
|   |   | | | | | `-DeclRefExpr 0x13002aac8 <col:13> 'int' lvalue Var 0x13002a548 'iRight' 'int'
|   |   | | | | `-ImplicitCastExpr 0x13002ab20 <col:22> 'int' <LValueToRValue>
|   |   | | | |   `-DeclRefExpr 0x13002aae8 <col:22> 'int' lvalue Var 0x13002a000 'iLeft' 'int'
|   |   | | | `-IntegerLiteral 0x13002ab58 <col:30> 'int' 1
|   |   | | `-ImplicitCastExpr 0x13002abb8 <col:34> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x13002ab98 <col:34> 'int' lvalue Var 0x13000e2f8 'windows_size' 'int'
|   |   | `-CompoundStmt 0x13002ae30 <col:49, line:38:9>
|   |   |   `-IfStmt 0x13002ae00 <line:33:13, line:37:13> has_else
|   |   |     |-BinaryOperator 0x13002ad40 <line:33:17, col:47> 'int' '<'
|   |   |     | |-ImplicitCastExpr 0x13002ad28 <col:17> 'int' <LValueToRValue>
|   |   |     | | `-DeclRefExpr 0x13002abf0 <col:17> 'int' lvalue Var 0x13002a000 'iLeft' 'int'
|   |   |     | `-ParenExpr 0x13002ad08 <col:25, col:47> 'int'
|   |   |     |   `-BinaryOperator 0x13002ace8 <col:26, col:46> 'int' '-'
|   |   |     |     |-CStyleCastExpr 0x13002ac60 <col:26, col:31> 'int' <IntegralCast>
|   |   |     |     | `-ImplicitCastExpr 0x13002ac48 <col:31> 'unsigned int' <LValueToRValue> part_of_explicit_cast
|   |   |     |     |   `-DeclRefExpr 0x13002ac10 <col:31> 'unsigned int' lvalue ParmVar 0x13000dd70 'src_size' 'unsigned int'
|   |   |     |     `-BinaryOperator 0x13002acc8 <col:42, col:46> 'int' '/'
|   |   |     |       |-IntegerLiteral 0x13002ac88 <col:42> 'int' 1
|   |   |     |       `-IntegerLiteral 0x13002aca8 <col:46> 'int' 2
|   |   |     |-CompoundStmt 0x13002ad98 <col:51, line:35:13>
|   |   |     | `-UnaryOperator 0x13002ad80 <line:34:17, col:22> 'int' postfix '++'
|   |   |     |   `-DeclRefExpr 0x13002ad60 <col:17> 'int' lvalue Var 0x13002a000 'iLeft' 'int'
|   |   |     `-CompoundStmt 0x13002ade8 <line:35:20, line:37:13>
|   |   |       `-UnaryOperator 0x13002add0 <line:36:17, col:23> 'int' postfix '--'
|   |   |         `-DeclRefExpr 0x13002adb0 <col:17> 'int' lvalue Var 0x13002a548 'iRight' 'int'
|   |   |-ForStmt 0x13002bd28 <line:40:9, line:42:9>
|   |   | |-BinaryOperator 0x13002aec0 <line:40:14, col:21> 'int' '='
|   |   | | |-DeclRefExpr 0x13002ae68 <col:14> 'int' lvalue Var 0x13002a9c8 'iSrc' 'int'
|   |   | | `-ImplicitCastExpr 0x13002aea8 <col:21> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x13002ae88 <col:21> 'int' lvalue Var 0x13002a000 'iLeft' 'int'
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x13002af50 <col:28, col:36> 'int' '<='
|   |   | | |-ImplicitCastExpr 0x13002af20 <col:28> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x13002aee0 <col:28> 'int' lvalue Var 0x13002a9c8 'iSrc' 'int'
|   |   | | `-ImplicitCastExpr 0x13002af38 <col:36> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x13002af00 <col:36> 'int' lvalue Var 0x13002a548 'iRight' 'int'
|   |   | |-UnaryOperator 0x13002af90 <col:44, col:48> 'int' postfix '++'
|   |   | | `-DeclRefExpr 0x13002af70 <col:44> 'int' lvalue Var 0x13002a9c8 'iSrc' 'int'
|   |   | `-CompoundStmt 0x13002bd18 <col:52, line:42:9>
|   |   |-IfStmt 0x13002bfc8 <line:44:3, line:47:3>
|   |   | |-BinaryOperator 0x13002bdb8 <line:44:7, col:22> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x13002bda0 <col:7> 'double' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x13002bd60 <col:7> 'double' lvalue Var 0x13002a910 'dTotalWeight' 'double'
|   |   | | `-FloatingLiteral 0x13002bd80 <col:22> 'double' 0.000000e+00
|   |   | `-CompoundStmt 0x13002bfa8 <col:27, line:47:3>
|   |   |   |-CallExpr 0x13002bf38 <line:45:4, col:28> '<dependent type>' contains-errors
|   |   |   | |-DeclRefExpr 0x13002beb8 <col:4> 'int ()' Function 0x13002be00 '_gdContributionsFree' 'int ()'
|   |   |   | `-RecoveryExpr 0x13002bf18 <col:25> '<dependent type>' contains-errors lvalue
|   |   |   `-ReturnStmt 0x13002bf98 <line:46:4, col:11>
|   |   |     `-RecoveryExpr 0x13002bf78 <col:11> '<dependent type>' contains-errors lvalue
|   |   `-IfStmt 0x13002c2d0 <line:49:9, line:53:9>
|   |     |-BinaryOperator 0x13002c040 <line:49:13, col:28> 'int' '>'
|   |     | |-ImplicitCastExpr 0x13002c028 <col:13> 'double' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x13002bfe8 <col:13> 'double' lvalue Var 0x13002a910 'dTotalWeight' 'double'
|   |     | `-FloatingLiteral 0x13002c008 <col:28> 'double' 0.000000e+00
|   |     `-CompoundStmt 0x13002c2b8 <col:33, line:53:9>
|   |       `-ForStmt 0x13002c280 <line:50:13, line:52:13>
|   |         |-BinaryOperator 0x13002c0b8 <line:50:18, col:25> 'int' '='
|   |         | |-DeclRefExpr 0x13002c060 <col:18> 'int' lvalue Var 0x13002a9c8 'iSrc' 'int'
|   |         | `-ImplicitCastExpr 0x13002c0a0 <col:25> 'int' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x13002c080 <col:25> 'int' lvalue Var 0x13002a000 'iLeft' 'int'
|   |         |-<<<NULL>>>
|   |         |-BinaryOperator 0x13002c148 <col:32, col:40> 'int' '<='
|   |         | |-ImplicitCastExpr 0x13002c118 <col:32> 'int' <LValueToRValue>
|   |         | | `-DeclRefExpr 0x13002c0d8 <col:32> 'int' lvalue Var 0x13002a9c8 'iSrc' 'int'
|   |         | `-ImplicitCastExpr 0x13002c130 <col:40> 'int' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x13002c0f8 <col:40> 'int' lvalue Var 0x13002a548 'iRight' 'int'
|   |         |-UnaryOperator 0x13002c188 <col:48, col:52> 'int' postfix '++'
|   |         | `-DeclRefExpr 0x13002c168 <col:48> 'int' lvalue Var 0x13002a9c8 'iSrc' 'int'
|   |         `-CompoundStmt 0x13002c270 <col:56, line:52:13>
|   `-ReturnStmt 0x13002c3b8 <line:55:4, col:11>
|     `-RecoveryExpr 0x13002c398 <col:11> '<dependent type>' contains-errors lvalue
|-FunctionDecl 0x130027b70 <line:17:29> col:29 implicit used ceil 'double (double)' extern
| |-ParmVarDecl 0x130027c70 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x130027c18 <<invalid sloc>> Implicit 1052
| |-NoThrowAttr 0x130027ce0 <col:29> Implicit
| `-ConstAttr 0x130027d08 <col:29> Implicit
`-FunctionDecl 0x13002a188 <line:23:42> col:42 implicit used floor 'double (double)' extern
  |-ParmVarDecl 0x13002a288 <<invalid sloc>> <invalid sloc> 'double'
  |-BuiltinAttr 0x13002a230 <<invalid sloc>> Implicit 1079
  |-NoThrowAttr 0x13002a2f8 <col:42> Implicit
  `-ConstAttr 0x13002a320 <col:42> Implicit
