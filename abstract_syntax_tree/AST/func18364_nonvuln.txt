TranslationUnitDecl 0x131055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1310564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x131055bd0 '__int128'
|-TypedefDecl 0x131056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x131055bf0 'unsigned __int128'
|-TypedefDecl 0x13180be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13180bc00 'struct __NSConstantString_tag'
|   `-Record 0x131056580 '__NSConstantString_tag'
|-TypedefDecl 0x13180be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x131055d90 '__SVInt8_t'
|-TypedefDecl 0x13180bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x131055db0 '__SVInt16_t'
|-TypedefDecl 0x13180bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x131055dd0 '__SVInt32_t'
|-TypedefDecl 0x13180bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x131055df0 '__SVInt64_t'
|-TypedefDecl 0x13180c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x131055e10 '__SVUint8_t'
|-TypedefDecl 0x13180c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x131055e30 '__SVUint16_t'
|-TypedefDecl 0x13180c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x131055e50 '__SVUint32_t'
|-TypedefDecl 0x13180c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x131055e70 '__SVUint64_t'
|-TypedefDecl 0x13180c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x131055e90 '__SVFloat16_t'
|-TypedefDecl 0x13180c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x131055eb0 '__SVFloat32_t'
|-TypedefDecl 0x13180c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x131055ed0 '__SVFloat64_t'
|-TypedefDecl 0x13180c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x131055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13180c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x131055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13180c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x131055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13180c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x131055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13180c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x131055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13180c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x131055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13180c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x131055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13180c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x131055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13180c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x131055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13180c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x131056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13180c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x131056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13180c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x131056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13180c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x131056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13180c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x131056090 '__clang_svint8x3_t'
|-TypedefDecl 0x13180c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1310560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13180c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1310560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13180c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1310560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13180c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x131056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13180ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x131056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13180cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x131056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13180cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x131056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13180cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x131056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13180d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1310561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13180d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1310561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13180d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1310561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13180d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x131056210 '__clang_svint8x4_t'
|-TypedefDecl 0x13180d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x131056230 '__clang_svint16x4_t'
|-TypedefDecl 0x13180d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x131056250 '__clang_svint32x4_t'
|-TypedefDecl 0x13180d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x131056270 '__clang_svint64x4_t'
|-TypedefDecl 0x13180d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x131056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13180d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1310562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13180d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1310562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13180d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1310562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13180d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x131056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13180d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x131056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13180d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x131056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13180d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x131056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13180da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x131056390 '__SVBool_t'
|-TypedefDecl 0x13180da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1310563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13180dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1310563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13180db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1310563f0 '__SVCount_t'
|-TypedefDecl 0x13180dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13180dbb0 'char *'
|   `-BuiltinType 0x1310556b0 'char'
|-TypedefDecl 0x13180dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13180dbb0 'char *'
|   `-BuiltinType 0x1310556b0 'char'
|-FunctionDecl 0x13180dec8 <dataset_diviso_filec/func18364_nonvuln.c:1:1, line:64:1> line:1:5 invalid BN_dec2bn 'int (int **, const char *)'
| |-ParmVarDecl 0x13180dd60 <col:15, col:24> col:24 invalid bn 'int **'
| |-ParmVarDecl 0x13180dde0 <col:28, col:40> col:40 used a 'const char *'
| `-CompoundStmt 0x131122928 <line:2:1, line:64:1>
|   |-DeclStmt 0x13180e170 <line:5:5, col:22>
|   | |-VarDecl 0x13180dfc8 <col:5, col:15> col:9 used neg 'int' cinit
|   | | `-IntegerLiteral 0x13180e030 <col:15> 'int' 0
|   | |-VarDecl 0x13180e068 <col:5, col:18> col:18 used i 'int'
|   | `-VarDecl 0x13180e0e8 <col:5, col:21> col:21 used j 'int'
|   |-DeclStmt 0x13180e208 <line:6:5, col:12>
|   | `-VarDecl 0x13180e1a0 <col:5, col:9> col:9 used num 'int'
|   |-IfStmt 0x13180e3c0 <line:8:5, line:9:18>
|   | |-RecoveryExpr 0x13180e350 <line:8:9, col:35> '_Bool' contains-errors
|   | `-ReturnStmt 0x13180e3b0 <line:9:9, col:18>
|   |   `-ParenExpr 0x13180e390 <col:16, col:18> 'int'
|   |     `-IntegerLiteral 0x13180e370 <col:17> 'int' 0
|   |-IfStmt 0x131827950 <line:10:5, line:13:5>
|   | |-BinaryOperator 0x131827878 <line:10:9, col:15> 'int' '=='
|   | | |-ImplicitCastExpr 0x131827860 <col:9, col:10> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x131827848 <col:9, col:10> 'char' <LValueToRValue>
|   | | |   `-UnaryOperator 0x131827818 <col:9, col:10> 'const char' lvalue prefix '*' cannot overflow
|   | | |     `-ImplicitCastExpr 0x131827800 <col:10> 'const char *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x13180e3e0 <col:10> 'const char *' lvalue ParmVar 0x13180dde0 'a' 'const char *'
|   | | `-CharacterLiteral 0x131827830 <col:15> 'int' 45
|   | `-CompoundStmt 0x131827930 <col:20, line:13:5>
|   |   |-BinaryOperator 0x1318278d8 <line:11:9, col:15> 'int' '='
|   |   | |-DeclRefExpr 0x131827898 <col:9> 'int' lvalue Var 0x13180dfc8 'neg' 'int'
|   |   | `-IntegerLiteral 0x1318278b8 <col:15> 'int' 1
|   |   `-UnaryOperator 0x131827918 <line:12:9, col:10> 'const char *' postfix '++'
|   |     `-DeclRefExpr 0x1318278f8 <col:9> 'const char *' lvalue ParmVar 0x13180dde0 'a' 'const char *'
|   |-IfStmt 0x1318284d0 <line:18:5, line:19:14>
|   | |-BinaryOperator 0x131828448 <line:18:9, col:31> 'int' contains-errors '||'
|   | | |-BinaryOperator 0x1318283c8 <col:9, col:14> 'int' '=='
|   | | | |-ImplicitCastExpr 0x1318283b0 <col:9> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x131828248 <col:9> 'int' lvalue Var 0x13180e068 'i' 'int'
|   | | | `-IntegerLiteral 0x131828268 <col:14> 'int' 0
|   | | `-BinaryOperator 0x131828428 <col:19, col:31> 'int' contains-errors '>'
|   | |   |-DeclRefExpr 0x1318282c0 <col:19> 'int' lvalue Var 0x13180e068 'i' 'int'
|   | |   `-BinaryOperator 0x131828408 <col:23, col:31> '<dependent type>' contains-errors '/'
|   | |     |-RecoveryExpr 0x1318283e8 <col:23> '<dependent type>' contains-errors lvalue
|   | |     `-IntegerLiteral 0x1318282f8 <col:31> 'int' 4
|   | `-GotoStmt 0x1318284b8 <line:19:9, col:14> 'err' 0x131828468
|   |-BinaryOperator 0x1318285a0 <line:21:5, col:15> 'int' '='
|   | |-DeclRefExpr 0x1318284f0 <col:5> 'int' lvalue Var 0x13180e1a0 'num' 'int'
|   | `-BinaryOperator 0x131828580 <col:11, col:15> 'int' '+'
|   |   |-ImplicitCastExpr 0x131828550 <col:11> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x131828510 <col:11> 'int' lvalue Var 0x13180e068 'i' 'int'
|   |   `-ImplicitCastExpr 0x131828568 <col:15> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x131828530 <col:15> 'int' lvalue Var 0x13180dfc8 'neg' 'int'
|   |-IfStmt 0x1318286c0 <line:22:5, line:23:20>
|   | |-BinaryOperator 0x131828638 <line:22:9, col:15> 'int' contains-errors '=='
|   | | |-RecoveryExpr 0x1318285c0 <col:9> '<dependent type>' contains-errors lvalue
|   | | `-RecoveryExpr 0x131828618 <col:15> '<dependent type>' contains-errors lvalue
|   | `-ReturnStmt 0x1318286b0 <line:23:9, col:20>
|   |   `-ImplicitCastExpr 0x131828698 <col:16, col:20> 'int' <LValueToRValue>
|   |     `-ParenExpr 0x131828678 <col:16, col:20> 'int' lvalue
|   |       `-DeclRefExpr 0x131828658 <col:17> 'int' lvalue Var 0x13180e1a0 'num' 'int'
|   |-IfStmt 0x13182aae8 <line:26:5, line:32:5> has_else
|   | |-BinaryOperator 0x13182a600 <line:26:9, col:16> 'int' contains-errors '=='
|   | | |-UnaryOperator 0x1318287b0 <col:9, col:10> '<dependent type>' contains-errors prefix '*' cannot overflow
|   | | | `-ImplicitCastExpr 0x131828798 <col:10> '<dependent type>' contains-errors <LValueToRValue>
|   | | |   `-RecoveryExpr 0x1318286e0 <col:10> '<dependent type>' contains-errors lvalue
|   | | `-RecoveryExpr 0x1318287c8 <col:16> '<dependent type>' contains-errors lvalue
|   | |-CompoundStmt 0x13182a8e0 <col:22, line:29:5>
|   | | `-IfStmt 0x13182a8c0 <line:27:9, line:28:22>
|   | |   |-RecoveryExpr 0x13182a850 <line:27:13, col:33> '_Bool' contains-errors
|   | |   `-ReturnStmt 0x13182a8b0 <line:28:13, col:22>
|   | |     `-ParenExpr 0x13182a890 <col:20, col:22> 'int'
|   | |       `-IntegerLiteral 0x13182a870 <col:21> 'int' 0
|   | `-CompoundStmt 0x13182aad0 <line:29:12, line:32:5>
|   |   `-CallExpr 0x13182aaa8 <line:31:9, col:20> '<dependent type>' contains-errors
|   |     |-DeclRefExpr 0x13182aa28 <col:9> 'int ()' Function 0x13182a970 'BN_zero' 'int ()'
|   |     `-RecoveryExpr 0x13182aa88 <col:17> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x13182adf0 <line:35:5, line:36:14>
|   | |-BinaryOperator 0x13182adb8 <line:35:9, col:34> 'int' contains-errors '=='
|   | | |-CallExpr 0x13182ad68 <col:9, col:29> '<dependent type>' contains-errors
|   | | | |-DeclRefExpr 0x13182abf8 <col:9> 'int ()' Function 0x13182ab40 'bn_expand' 'int ()'
|   | | | |-RecoveryExpr 0x13182ad10 <col:19> '<dependent type>' contains-errors lvalue
|   | | | `-BinaryOperator 0x13182ad48 <col:24, col:28> 'int' '*'
|   | | |   |-ImplicitCastExpr 0x13182ad30 <col:24> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x13182ac30 <col:24> 'int' lvalue Var 0x13180e068 'i' 'int'
|   | | |   `-IntegerLiteral 0x13182ac50 <col:28> 'int' 4
|   | | `-RecoveryExpr 0x13182ad98 <col:34> '<dependent type>' contains-errors lvalue
|   | `-GotoStmt 0x13182add8 <line:36:9, col:14> 'err' 0x131828468
|   |-IfStmt 0x13182aef0 <line:39:5, line:40:13>
|   | |-RecoveryExpr 0x13182ae70 <line:39:9, col:14> '_Bool' contains-errors
|   | `-BinaryOperator 0x13182aed0 <line:40:9, col:13> 'int' '='
|   |   |-DeclRefExpr 0x13182ae90 <col:9> 'int' lvalue Var 0x13180e0e8 'j' 'int'
|   |   `-IntegerLiteral 0x13182aeb0 <col:13> 'int' 0
|   |-WhileStmt 0x13182b438 <line:42:5, line:53:5>
|   | |-ImplicitCastExpr 0x13182af80 <line:42:12, col:13> 'char' <LValueToRValue>
|   | | `-UnaryOperator 0x13182af68 <col:12, col:13> 'const char' lvalue prefix '*' cannot overflow
|   | |   `-ImplicitCastExpr 0x13182af50 <col:13> 'const char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x13182af30 <col:13> 'const char *' lvalue ParmVar 0x13180dde0 'a' 'const char *'
|   | `-CompoundStmt 0x13182b418 <col:16, line:53:5>
|   |   |-UnaryOperator 0x13182b090 <line:45:9, col:10> 'const char *' postfix '++'
|   |   | `-DeclRefExpr 0x13182b070 <col:9> 'const char *' lvalue ParmVar 0x13180dde0 'a' 'const char *'
|   |   `-IfStmt 0x13182b3f8 <line:46:9, line:52:9>
|   |     |-RecoveryExpr 0x13182b0e0 <line:46:13, col:20> '_Bool' contains-errors
|   |     `-CompoundStmt 0x13182b3d8 <col:32, line:52:9>
|   |       |-IfStmt 0x13182b338 <line:47:13, line:49:22>
|   |       | |-RecoveryExpr 0x13182b300 <line:47:17, line:48:39> '_Bool' contains-errors
|   |       | `-GotoStmt 0x13182b320 <line:49:17, col:22> 'err' 0x131828468
|   |       `-BinaryOperator 0x13182b3b8 <line:51:13, col:17> 'int' '='
|   |         |-DeclRefExpr 0x13182b378 <col:13> 'int' lvalue Var 0x13180e0e8 'j' 'int'
|   |         `-IntegerLiteral 0x13182b398 <col:17> 'int' 0
|   |-ReturnStmt 0x131122730 <line:59:5, col:16>
|   | `-ImplicitCastExpr 0x131122718 <col:12, col:16> 'int' <LValueToRValue>
|   |   `-ParenExpr 0x1311226f8 <col:12, col:16> 'int' lvalue
|   |     `-DeclRefExpr 0x1311226d8 <col:13> 'int' lvalue Var 0x13180e1a0 'num' 'int'
|   |-LabelStmt 0x1311228b8 <line:60:2, col:5> 'err'
|   | `-NullStmt 0x1311228b0 <col:5>
|   `-ReturnStmt 0x131122918 <line:63:5, col:14>
|     `-ParenExpr 0x1311228f8 <col:12, col:14> 'int'
|       `-IntegerLiteral 0x1311228d8 <col:13> 'int' 0
`-FunctionDecl 0x131827eb0 <line:15:37> col:37 implicit used isdigit 'int (int)' extern
  |-ParmVarDecl 0x131827fb0 <<invalid sloc>> <invalid sloc> 'int'
  |-BuiltinAttr 0x131827f58 <<invalid sloc>> Implicit 924
  |-NoThrowAttr 0x131828020 <col:37> Implicit
  `-PureAttr 0x131828048 <col:37> Implicit
