TranslationUnitDecl 0x150051a08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1500528b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x150051fd0 '__int128'
|-TypedefDecl 0x150052928 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x150051ff0 'unsigned __int128'
|-TypedefDecl 0x14f811030 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x14f810e00 'struct __NSConstantString_tag'
|   `-Record 0x150052980 '__NSConstantString_tag'
|-TypedefDecl 0x14f811098 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x150052190 '__SVInt8_t'
|-TypedefDecl 0x14f811100 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x1500521b0 '__SVInt16_t'
|-TypedefDecl 0x14f811168 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x1500521d0 '__SVInt32_t'
|-TypedefDecl 0x14f8111d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x1500521f0 '__SVInt64_t'
|-TypedefDecl 0x14f811238 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x150052210 '__SVUint8_t'
|-TypedefDecl 0x14f8112a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x150052230 '__SVUint16_t'
|-TypedefDecl 0x14f811308 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x150052250 '__SVUint32_t'
|-TypedefDecl 0x14f811370 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x150052270 '__SVUint64_t'
|-TypedefDecl 0x14f8113d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x150052290 '__SVFloat16_t'
|-TypedefDecl 0x14f811440 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x1500522b0 '__SVFloat32_t'
|-TypedefDecl 0x14f8114a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x1500522d0 '__SVFloat64_t'
|-TypedefDecl 0x14f811510 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x1500522f0 '__SVBfloat16_t'
|-TypedefDecl 0x14f811578 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x150052310 '__clang_svint8x2_t'
|-TypedefDecl 0x14f8115e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x150052330 '__clang_svint16x2_t'
|-TypedefDecl 0x14f811648 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x150052350 '__clang_svint32x2_t'
|-TypedefDecl 0x14f8116b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x150052370 '__clang_svint64x2_t'
|-TypedefDecl 0x14f811718 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x150052390 '__clang_svuint8x2_t'
|-TypedefDecl 0x14f811780 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x1500523b0 '__clang_svuint16x2_t'
|-TypedefDecl 0x14f8117e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x1500523d0 '__clang_svuint32x2_t'
|-TypedefDecl 0x14f811850 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x1500523f0 '__clang_svuint64x2_t'
|-TypedefDecl 0x14f8118b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x150052410 '__clang_svfloat16x2_t'
|-TypedefDecl 0x14f811920 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x150052430 '__clang_svfloat32x2_t'
|-TypedefDecl 0x14f811988 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x150052450 '__clang_svfloat64x2_t'
|-TypedefDecl 0x14f8119f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x150052470 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x14f811a58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x150052490 '__clang_svint8x3_t'
|-TypedefDecl 0x14f811ac0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1500524b0 '__clang_svint16x3_t'
|-TypedefDecl 0x14f811b28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1500524d0 '__clang_svint32x3_t'
|-TypedefDecl 0x14f811b90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1500524f0 '__clang_svint64x3_t'
|-TypedefDecl 0x14f811bf8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x150052510 '__clang_svuint8x3_t'
|-TypedefDecl 0x14f811c60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x150052530 '__clang_svuint16x3_t'
|-TypedefDecl 0x14f811cc8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x150052550 '__clang_svuint32x3_t'
|-TypedefDecl 0x14f811d30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x150052570 '__clang_svuint64x3_t'
|-TypedefDecl 0x14f811d98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x150052590 '__clang_svfloat16x3_t'
|-TypedefDecl 0x14f811e00 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1500525b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x14f811e68 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1500525d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x14f811ed0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1500525f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x14f811f38 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x150052610 '__clang_svint8x4_t'
|-TypedefDecl 0x14f811fa0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x150052630 '__clang_svint16x4_t'
|-TypedefDecl 0x14f812008 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x150052650 '__clang_svint32x4_t'
|-TypedefDecl 0x14f812070 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x150052670 '__clang_svint64x4_t'
|-TypedefDecl 0x14f8120d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x150052690 '__clang_svuint8x4_t'
|-TypedefDecl 0x14f812140 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1500526b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x14f8121a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1500526d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x14f812210 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1500526f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x14f812278 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x150052710 '__clang_svfloat16x4_t'
|-TypedefDecl 0x14f8122e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x150052730 '__clang_svfloat32x4_t'
|-TypedefDecl 0x14f812348 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x150052750 '__clang_svfloat64x4_t'
|-TypedefDecl 0x14f8123b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x150052770 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x14f812418 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x150052790 '__SVBool_t'
|-TypedefDecl 0x14f812480 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1500527b0 '__clang_svboolx2_t'
|-TypedefDecl 0x14f8124e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1500527d0 '__clang_svboolx4_t'
|-TypedefDecl 0x14f812550 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1500527f0 '__SVCount_t'
|-TypedefDecl 0x14f8125f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x14f8125b0 'char *'
|   `-BuiltinType 0x150051ab0 'char'
|-TypedefDecl 0x14f812668 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x14f8125b0 'char *'
|   `-BuiltinType 0x150051ab0 'char'
`-FunctionDecl 0x14f82a958 <dataset_diviso_filec/func5087_nonvuln.c:1:1, line:28:1> line:1:17 ext4_list_backups 'unsigned int (struct super_block *, unsigned int *, unsigned int *, unsigned int *)' static
  |-ParmVarDecl 0x14f812c48 <col:35, col:55> col:55 used sb 'struct super_block *'
  |-ParmVarDecl 0x14f812cf8 <col:59, col:69> col:69 used three 'unsigned int *'
  |-ParmVarDecl 0x14f812d78 <line:2:7, col:17> col:17 used five 'unsigned int *'
  |-ParmVarDecl 0x14f82a800 <col:23, col:33> col:33 used seven 'unsigned int *'
  `-CompoundStmt 0x14f82b678 <line:3:1, line:28:1>
    |-DeclStmt 0x14f82ab20 <line:4:2, col:23>
    | `-VarDecl 0x14f82aa80 <col:2, col:18> col:12 used min 'unsigned int *' cinit
    |   `-ImplicitCastExpr 0x14f82ab08 <col:18> 'unsigned int *' <LValueToRValue>
    |     `-DeclRefExpr 0x14f82aae8 <col:18> 'unsigned int *' lvalue ParmVar 0x14f812cf8 'three' 'unsigned int *'
    |-DeclStmt 0x14f82abd8 <line:5:2, col:14>
    | `-VarDecl 0x14f82ab50 <col:2, col:13> col:6 used mult 'int' cinit
    |   `-IntegerLiteral 0x14f82abb8 <col:13> 'int' 3
    |-DeclStmt 0x14f82ac70 <line:6:2, col:14>
    | `-VarDecl 0x14f82ac08 <col:2, col:11> col:11 used ret 'unsigned int'
    |-IfStmt 0x14f82b088 <line:8:2, line:13:2>
    | |-UnaryOperator 0x14f82aea0 <line:8:6, line:9:41> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-CallExpr 0x14f82ae70 <line:8:7, line:9:41> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x14f82adb0 <line:8:7> 'int ()' Function 0x14f82acf8 'EXT4_HAS_RO_COMPAT_FEATURE' 'int ()'
    | |   |-DeclRefExpr 0x14f82add0 <col:34> 'struct super_block *' lvalue ParmVar 0x14f812c48 'sb' 'struct super_block *'
    | |   `-RecoveryExpr 0x14f82ae50 <line:9:6> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x14f82b060 <col:44, line:13:2>
    |   |-BinaryOperator 0x14f82af40 <line:10:3, col:10> 'unsigned int' '='
    |   | |-DeclRefExpr 0x14f82aeb8 <col:3> 'unsigned int' lvalue Var 0x14f82ac08 'ret' 'unsigned int'
    |   | `-ImplicitCastExpr 0x14f82af28 <col:9, col:10> 'unsigned int' <LValueToRValue>
    |   |   `-UnaryOperator 0x14f82af10 <col:9, col:10> 'unsigned int' lvalue prefix '*' cannot overflow
    |   |     `-ImplicitCastExpr 0x14f82aef8 <col:10> 'unsigned int *' <LValueToRValue>
    |   |       `-DeclRefExpr 0x14f82aed8 <col:10> 'unsigned int *' lvalue Var 0x14f82aa80 'min' 'unsigned int *'
    |   |-CompoundAssignOperator 0x14f82afe8 <line:11:3, col:11> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    |   | |-UnaryOperator 0x14f82af98 <col:3, col:4> 'unsigned int' lvalue prefix '*' cannot overflow
    |   | | `-ImplicitCastExpr 0x14f82af80 <col:4> 'unsigned int *' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x14f82af60 <col:4> 'unsigned int *' lvalue Var 0x14f82aa80 'min' 'unsigned int *'
    |   | `-ImplicitCastExpr 0x14f82afd0 <col:11> 'unsigned int' <IntegralCast>
    |   |   `-IntegerLiteral 0x14f82afb0 <col:11> 'int' 1
    |   `-ReturnStmt 0x14f82b050 <line:12:3, col:10>
    |     `-ImplicitCastExpr 0x14f82b038 <col:10> 'unsigned int' <LValueToRValue>
    |       `-DeclRefExpr 0x14f82b018 <col:10> 'unsigned int' lvalue Var 0x14f82ac08 'ret' 'unsigned int'
    |-IfStmt 0x14f82b290 <line:15:2, line:18:2>
    | |-BinaryOperator 0x14f82b178 <line:15:6, col:15> 'int' '<'
    | | |-ImplicitCastExpr 0x14f82b148 <col:6, col:7> 'unsigned int' <LValueToRValue>
    | | | `-UnaryOperator 0x14f82b0e0 <col:6, col:7> 'unsigned int' lvalue prefix '*' cannot overflow
    | | |   `-ImplicitCastExpr 0x14f82b0c8 <col:7> 'unsigned int *' <LValueToRValue>
    | | |     `-DeclRefExpr 0x14f82b0a8 <col:7> 'unsigned int *' lvalue ParmVar 0x14f812d78 'five' 'unsigned int *'
    | | `-ImplicitCastExpr 0x14f82b160 <col:14, col:15> 'unsigned int' <LValueToRValue>
    | |   `-UnaryOperator 0x14f82b130 <col:14, col:15> 'unsigned int' lvalue prefix '*' cannot overflow
    | |     `-ImplicitCastExpr 0x14f82b118 <col:15> 'unsigned int *' <LValueToRValue>
    | |       `-DeclRefExpr 0x14f82b0f8 <col:15> 'unsigned int *' lvalue Var 0x14f82aa80 'min' 'unsigned int *'
    | `-CompoundStmt 0x14f82b270 <col:20, line:18:2>
    |   |-BinaryOperator 0x14f82b1f0 <line:16:3, col:9> 'unsigned int *' '='
    |   | |-DeclRefExpr 0x14f82b198 <col:3> 'unsigned int *' lvalue Var 0x14f82aa80 'min' 'unsigned int *'
    |   | `-ImplicitCastExpr 0x14f82b1d8 <col:9> 'unsigned int *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x14f82b1b8 <col:9> 'unsigned int *' lvalue ParmVar 0x14f812d78 'five' 'unsigned int *'
    |   `-BinaryOperator 0x14f82b250 <line:17:3, col:10> 'int' '='
    |     |-DeclRefExpr 0x14f82b210 <col:3> 'int' lvalue Var 0x14f82ab50 'mult' 'int'
    |     `-IntegerLiteral 0x14f82b230 <col:10> 'int' 5
    |-IfStmt 0x14f82b498 <line:19:2, line:22:2>
    | |-BinaryOperator 0x14f82b380 <line:19:6, col:16> 'int' '<'
    | | |-ImplicitCastExpr 0x14f82b350 <col:6, col:7> 'unsigned int' <LValueToRValue>
    | | | `-UnaryOperator 0x14f82b2e8 <col:6, col:7> 'unsigned int' lvalue prefix '*' cannot overflow
    | | |   `-ImplicitCastExpr 0x14f82b2d0 <col:7> 'unsigned int *' <LValueToRValue>
    | | |     `-DeclRefExpr 0x14f82b2b0 <col:7> 'unsigned int *' lvalue ParmVar 0x14f82a800 'seven' 'unsigned int *'
    | | `-ImplicitCastExpr 0x14f82b368 <col:15, col:16> 'unsigned int' <LValueToRValue>
    | |   `-UnaryOperator 0x14f82b338 <col:15, col:16> 'unsigned int' lvalue prefix '*' cannot overflow
    | |     `-ImplicitCastExpr 0x14f82b320 <col:16> 'unsigned int *' <LValueToRValue>
    | |       `-DeclRefExpr 0x14f82b300 <col:16> 'unsigned int *' lvalue Var 0x14f82aa80 'min' 'unsigned int *'
    | `-CompoundStmt 0x14f82b478 <col:21, line:22:2>
    |   |-BinaryOperator 0x14f82b3f8 <line:20:3, col:9> 'unsigned int *' '='
    |   | |-DeclRefExpr 0x14f82b3a0 <col:3> 'unsigned int *' lvalue Var 0x14f82aa80 'min' 'unsigned int *'
    |   | `-ImplicitCastExpr 0x14f82b3e0 <col:9> 'unsigned int *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x14f82b3c0 <col:9> 'unsigned int *' lvalue ParmVar 0x14f82a800 'seven' 'unsigned int *'
    |   `-BinaryOperator 0x14f82b458 <line:21:3, col:10> 'int' '='
    |     |-DeclRefExpr 0x14f82b418 <col:3> 'int' lvalue Var 0x14f82ab50 'mult' 'int'
    |     `-IntegerLiteral 0x14f82b438 <col:10> 'int' 7
    |-BinaryOperator 0x14f82b540 <line:24:2, col:9> 'unsigned int' '='
    | |-DeclRefExpr 0x14f82b4b8 <col:2> 'unsigned int' lvalue Var 0x14f82ac08 'ret' 'unsigned int'
    | `-ImplicitCastExpr 0x14f82b528 <col:8, col:9> 'unsigned int' <LValueToRValue>
    |   `-UnaryOperator 0x14f82b510 <col:8, col:9> 'unsigned int' lvalue prefix '*' cannot overflow
    |     `-ImplicitCastExpr 0x14f82b4f8 <col:9> 'unsigned int *' <LValueToRValue>
    |       `-DeclRefExpr 0x14f82b4d8 <col:9> 'unsigned int *' lvalue Var 0x14f82aa80 'min' 'unsigned int *'
    |-CompoundAssignOperator 0x14f82b600 <line:25:2, col:10> 'unsigned int' '*=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    | |-UnaryOperator 0x14f82b598 <col:2, col:3> 'unsigned int' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x14f82b580 <col:3> 'unsigned int *' <LValueToRValue>
    | |   `-DeclRefExpr 0x14f82b560 <col:3> 'unsigned int *' lvalue Var 0x14f82aa80 'min' 'unsigned int *'
    | `-ImplicitCastExpr 0x14f82b5e8 <col:10> 'unsigned int' <IntegralCast>
    |   `-ImplicitCastExpr 0x14f82b5d0 <col:10> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x14f82b5b0 <col:10> 'int' lvalue Var 0x14f82ab50 'mult' 'int'
    `-ReturnStmt 0x14f82b668 <line:27:2, col:9>
      `-ImplicitCastExpr 0x14f82b650 <col:9> 'unsigned int' <LValueToRValue>
        `-DeclRefExpr 0x14f82b630 <col:9> 'unsigned int' lvalue Var 0x14f82ac08 'ret' 'unsigned int'
