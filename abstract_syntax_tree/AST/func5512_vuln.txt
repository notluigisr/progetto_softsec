TranslationUnitDecl 0x138855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1388564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x138855bd0 '__int128'
|-TypedefDecl 0x138856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x138855bf0 'unsigned __int128'
|-TypedefDecl 0x138926230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x138926000 'struct __NSConstantString_tag'
|   `-Record 0x138856580 '__NSConstantString_tag'
|-TypedefDecl 0x138926298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x138855d90 '__SVInt8_t'
|-TypedefDecl 0x138926300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x138855db0 '__SVInt16_t'
|-TypedefDecl 0x138926368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x138855dd0 '__SVInt32_t'
|-TypedefDecl 0x1389263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x138855df0 '__SVInt64_t'
|-TypedefDecl 0x138926438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x138855e10 '__SVUint8_t'
|-TypedefDecl 0x1389264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x138855e30 '__SVUint16_t'
|-TypedefDecl 0x138926508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x138855e50 '__SVUint32_t'
|-TypedefDecl 0x138926570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x138855e70 '__SVUint64_t'
|-TypedefDecl 0x1389265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x138855e90 '__SVFloat16_t'
|-TypedefDecl 0x138926640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x138855eb0 '__SVFloat32_t'
|-TypedefDecl 0x1389266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x138855ed0 '__SVFloat64_t'
|-TypedefDecl 0x138926710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x138855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x138926778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x138855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1389267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x138855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x138926848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x138855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1389268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x138855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x138926918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x138855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x138926980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x138855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1389269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x138855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x138926a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x138855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x138926ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x138856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x138926b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x138856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x138926b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x138856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x138926bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x138856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x138926c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x138856090 '__clang_svint8x3_t'
|-TypedefDecl 0x138926cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1388560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x138926d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1388560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x138926d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1388560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x138926df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x138856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x138926e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x138856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x138926ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x138856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x138926f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x138856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x138926f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x138856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x138927800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1388561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x138927868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1388561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1389278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1388561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x138927938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x138856210 '__clang_svint8x4_t'
|-TypedefDecl 0x1389279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x138856230 '__clang_svint16x4_t'
|-TypedefDecl 0x138927a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x138856250 '__clang_svint32x4_t'
|-TypedefDecl 0x138927a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x138856270 '__clang_svint64x4_t'
|-TypedefDecl 0x138927ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x138856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x138927b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1388562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x138927ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1388562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x138927c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1388562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x138927c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x138856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x138927ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x138856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x138927d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x138856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x138927db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x138856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x138927e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x138856390 '__SVBool_t'
|-TypedefDecl 0x138927e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1388563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x138927ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1388563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x138927f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1388563f0 '__SVCount_t'
|-TypedefDecl 0x138927ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x138927fb0 'char *'
|   `-BuiltinType 0x1388556b0 'char'
|-TypedefDecl 0x138928068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x138927fb0 'char *'
|   `-BuiltinType 0x1388556b0 'char'
|-FunctionDecl 0x1389284f8 <dataset_diviso_filec/func5512_vuln.c:1:1, line:35:1> line:1:1 rleUncompress 'int (int, int, const signed char *, char *)'
| |-ParmVarDecl 0x1389280d8 <col:16, col:20> col:20 used inLength 'int'
| |-ParmVarDecl 0x138928158 <col:30, col:34> col:34 used maxLength 'int'
| |-ParmVarDecl 0x1389282b0 <col:45, col:66> col:63 used in 'const signed char *'
| |-ParmVarDecl 0x1389283a0 <col:69, col:78> col:74 used out 'char *'
| `-CompoundStmt 0x138943228 <line:2:1, line:35:1>
|   |-DeclStmt 0x1389286c0 <line:3:5, col:25>
|   | `-VarDecl 0x138928620 <col:5, col:22> col:11 used outStart 'char *' cinit
|   |   `-ImplicitCastExpr 0x1389286a8 <col:22> 'char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x138928688 <col:22> 'char *' lvalue ParmVar 0x1389283a0 'out' 'char *'
|   |-WhileStmt 0x138943150 <line:5:5, line:32:5>
|   | |-BinaryOperator 0x138928730 <line:5:12, col:23> 'int' '>'
|   | | |-ImplicitCastExpr 0x138928718 <col:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1389286d8 <col:12> 'int' lvalue ParmVar 0x1389280d8 'inLength' 'int'
|   | | `-IntegerLiteral 0x1389286f8 <col:23> 'int' 0
|   | `-CompoundStmt 0x138943138 <line:6:5, line:32:5>
|   |   `-IfStmt 0x138943108 <line:7:2, line:31:2> has_else
|   |     |-BinaryOperator 0x138940a00 <line:7:6, col:12> 'int' '<'
|   |     | |-ImplicitCastExpr 0x1389287d8 <col:6, col:7> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x1389287c0 <col:6, col:7> 'signed char' <LValueToRValue>
|   |     | |   `-UnaryOperator 0x138928788 <col:6, col:7> 'const signed char' lvalue prefix '*' cannot overflow
|   |     | |     `-ImplicitCastExpr 0x138928770 <col:7> 'const signed char *' <LValueToRValue>
|   |     | |       `-DeclRefExpr 0x138928750 <col:7> 'const signed char *' lvalue ParmVar 0x1389282b0 'in' 'const signed char *'
|   |     | `-IntegerLiteral 0x1389287a0 <col:12> 'int' 0
|   |     |-CompoundStmt 0x138941780 <line:8:2, line:18:2>
|   |     | |-DeclStmt 0x138940b80 <line:9:6, col:31>
|   |     | | `-VarDecl 0x138940a38 <col:6, col:30> col:10 used count 'int' cinit
|   |     | |   `-UnaryOperator 0x138940b68 <col:18, col:30> 'int' prefix '-'
|   |     | |     `-ParenExpr 0x138940b48 <col:19, col:30> 'int'
|   |     | |       `-CStyleCastExpr 0x138940b20 <col:20, col:28> 'int' <IntegralCast>
|   |     | |         `-ImplicitCastExpr 0x138940b08 <col:25, col:28> 'signed char' <LValueToRValue> part_of_explicit_cast
|   |     | |           `-UnaryOperator 0x138940ad8 <col:25, col:28> 'const signed char' lvalue prefix '*' cannot overflow
|   |     | |             `-UnaryOperator 0x138940ac0 <col:26, col:28> 'const signed char *' postfix '++'
|   |     | |               `-DeclRefExpr 0x138940aa0 <col:26> 'const signed char *' lvalue ParmVar 0x1389282b0 'in' 'const signed char *'
|   |     | |-CompoundAssignOperator 0x138940c30 <line:10:6, col:26> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   |     | | |-DeclRefExpr 0x138940b98 <col:6> 'int' lvalue ParmVar 0x1389280d8 'inLength' 'int'
|   |     | | `-BinaryOperator 0x138940c10 <col:18, col:26> 'int' '+'
|   |     | |   |-ImplicitCastExpr 0x138940bf8 <col:18> 'int' <LValueToRValue>
|   |     | |   | `-DeclRefExpr 0x138940bb8 <col:18> 'int' lvalue Var 0x138940a38 'count' 'int'
|   |     | |   `-IntegerLiteral 0x138940bd8 <col:26> 'int' 1
|   |     | |-IfStmt 0x138940d78 <line:12:6, line:13:10>
|   |     | | |-BinaryOperator 0x138940d28 <line:12:10, col:33> 'int' '>'
|   |     | | | |-IntegerLiteral 0x138940c60 <col:10> 'int' 0
|   |     | | | `-ParenExpr 0x138940d08 <col:14, col:33> 'int'
|   |     | | |   `-CompoundAssignOperator 0x138940cd8 <col:15, col:28> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   |     | | |     |-DeclRefExpr 0x138940c80 <col:15> 'int' lvalue ParmVar 0x138928158 'maxLength' 'int'
|   |     | | |     `-ImplicitCastExpr 0x138940cc0 <col:28> 'int' <LValueToRValue>
|   |     | | |       `-DeclRefExpr 0x138940ca0 <col:28> 'int' lvalue Var 0x138940a38 'count' 'int'
|   |     | | `-ReturnStmt 0x138940d68 <line:13:3, col:10>
|   |     | |   `-IntegerLiteral 0x138940d48 <col:10> 'int' 0
|   |     | |-CallExpr 0x1389415a8 <line:15:9, col:30> 'void *'
|   |     | | |-ImplicitCastExpr 0x138941590 <col:9> 'void *(*)(void *, const void *, unsigned long)' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x138941490 <col:9> 'void *(void *, const void *, unsigned long)' Function 0x138941240 'memcpy' 'void *(void *, const void *, unsigned long)'
|   |     | | |-ImplicitCastExpr 0x1389415f8 <col:16> 'void *' <BitCast>
|   |     | | | `-ImplicitCastExpr 0x1389415e0 <col:16> 'char *' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x1389414b0 <col:16> 'char *' lvalue ParmVar 0x1389283a0 'out' 'char *'
|   |     | | |-ImplicitCastExpr 0x138941628 <col:21> 'const void *' <BitCast>
|   |     | | | `-ImplicitCastExpr 0x138941610 <col:21> 'const signed char *' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x1389414d0 <col:21> 'const signed char *' lvalue ParmVar 0x1389282b0 'in' 'const signed char *'
|   |     | | `-ImplicitCastExpr 0x138941658 <col:25> 'unsigned long' <IntegralCast>
|   |     | |   `-ImplicitCastExpr 0x138941640 <col:25> 'int' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x1389414f0 <col:25> 'int' lvalue Var 0x138940a38 'count' 'int'
|   |     | |-CompoundAssignOperator 0x1389416c8 <line:16:9, col:16> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
|   |     | | |-DeclRefExpr 0x138941670 <col:9> 'char *' lvalue ParmVar 0x1389283a0 'out' 'char *'
|   |     | | `-ImplicitCastExpr 0x1389416b0 <col:16> 'int' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x138941690 <col:16> 'int' lvalue Var 0x138940a38 'count' 'int'
|   |     | `-CompoundAssignOperator 0x138941750 <line:17:9, col:16> 'const signed char *' '+=' ComputeLHSTy='const signed char *' ComputeResultTy='const signed char *'
|   |     |   |-DeclRefExpr 0x1389416f8 <col:9> 'const signed char *' lvalue ParmVar 0x1389282b0 'in' 'const signed char *'
|   |     |   `-ImplicitCastExpr 0x138941738 <col:16> 'int' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x138941718 <col:16> 'int' lvalue Var 0x138940a38 'count' 'int'
|   |     `-CompoundStmt 0x1389430c8 <line:20:2, line:31:2>
|   |       |-DeclStmt 0x1389418c0 <line:21:6, col:23>
|   |       | `-VarDecl 0x1389417d8 <col:6, col:21> col:10 used count 'int' cinit
|   |       |   `-ImplicitCastExpr 0x1389418a8 <col:18, col:21> 'int' <IntegralCast>
|   |       |     `-ImplicitCastExpr 0x138941890 <col:18, col:21> 'signed char' <LValueToRValue>
|   |       |       `-UnaryOperator 0x138941878 <col:18, col:21> 'const signed char' lvalue prefix '*' cannot overflow
|   |       |         `-UnaryOperator 0x138941860 <col:19, col:21> 'const signed char *' postfix '++'
|   |       |           `-DeclRefExpr 0x138941840 <col:19> 'const signed char *' lvalue ParmVar 0x1389282b0 'in' 'const signed char *'
|   |       |-CompoundAssignOperator 0x138941918 <line:22:6, col:18> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       | |-DeclRefExpr 0x1389418d8 <col:6> 'int' lvalue ParmVar 0x1389280d8 'inLength' 'int'
|   |       | `-IntegerLiteral 0x1389418f8 <col:18> 'int' 2
|   |       |-IfStmt 0x138942aa0 <line:24:6, line:25:10>
|   |       | |-BinaryOperator 0x138942a50 <line:24:10, col:37> 'int' '>'
|   |       | | |-IntegerLiteral 0x138941948 <col:10> 'int' 0
|   |       | | `-ParenExpr 0x138942a30 <col:14, col:37> 'int'
|   |       | |   `-CompoundAssignOperator 0x138942a00 <col:15, col:36> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       | |     |-DeclRefExpr 0x138941968 <col:15> 'int' lvalue ParmVar 0x138928158 'maxLength' 'int'
|   |       | |     `-BinaryOperator 0x1389419e0 <col:28, col:36> 'int' '+'
|   |       | |       |-ImplicitCastExpr 0x1389419c8 <col:28> 'int' <LValueToRValue>
|   |       | |       | `-DeclRefExpr 0x138941988 <col:28> 'int' lvalue Var 0x1389417d8 'count' 'int'
|   |       | |       `-IntegerLiteral 0x1389419a8 <col:36> 'int' 1
|   |       | `-ReturnStmt 0x138942a90 <line:25:3, col:10>
|   |       |   `-IntegerLiteral 0x138942a70 <col:10> 'int' 0
|   |       |-CallExpr 0x138942f18 <line:27:9, col:40> 'void *'
|   |       | |-ImplicitCastExpr 0x138942f00 <col:9> 'void *(*)(void *, int, unsigned long)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x138942d58 <col:9> 'void *(void *, int, unsigned long)' Function 0x138942b08 'memset' 'void *(void *, int, unsigned long)'
|   |       | |-ImplicitCastExpr 0x138942f68 <col:16> 'void *' <BitCast>
|   |       | | `-ImplicitCastExpr 0x138942f50 <col:16> 'char *' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x138942d78 <col:16> 'char *' lvalue ParmVar 0x1389283a0 'out' 'char *'
|   |       | |-ImplicitCastExpr 0x138942f98 <col:21, col:29> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x138942f80 <col:21, col:29> 'char' <LValueToRValue>
|   |       | |   `-UnaryOperator 0x138942e10 <col:21, col:29> 'char' lvalue prefix '*' cannot overflow
|   |       | |     `-CStyleCastExpr 0x138942de8 <col:22, col:29> 'char *' <BitCast>
|   |       | |       `-ImplicitCastExpr 0x138942dd0 <col:29> 'const signed char *' <LValueToRValue> part_of_explicit_cast
|   |       | |         `-DeclRefExpr 0x138942d98 <col:29> 'const signed char *' lvalue ParmVar 0x1389282b0 'in' 'const signed char *'
|   |       | `-ImplicitCastExpr 0x138942fb0 <col:33, col:39> 'unsigned long' <IntegralCast>
|   |       |   `-BinaryOperator 0x138942e80 <col:33, col:39> 'int' '+'
|   |       |     |-ImplicitCastExpr 0x138942e68 <col:33> 'int' <LValueToRValue>
|   |       |     | `-DeclRefExpr 0x138942e28 <col:33> 'int' lvalue Var 0x1389417d8 'count' 'int'
|   |       |     `-IntegerLiteral 0x138942e48 <col:39> 'int' 1
|   |       |-CompoundAssignOperator 0x138943060 <line:28:9, col:22> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
|   |       | |-DeclRefExpr 0x138942fc8 <col:9> 'char *' lvalue ParmVar 0x1389283a0 'out' 'char *'
|   |       | `-BinaryOperator 0x138943040 <col:16, col:22> 'int' '+'
|   |       |   |-ImplicitCastExpr 0x138943028 <col:16> 'int' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x138942fe8 <col:16> 'int' lvalue Var 0x1389417d8 'count' 'int'
|   |       |   `-IntegerLiteral 0x138943008 <col:22> 'int' 1
|   |       `-UnaryOperator 0x1389430b0 <line:30:6, col:8> 'const signed char *' postfix '++'
|   |         `-DeclRefExpr 0x138943090 <col:6> 'const signed char *' lvalue ParmVar 0x1389282b0 'in' 'const signed char *'
|   `-ReturnStmt 0x138943218 <line:34:5, col:18>
|     `-ImplicitCastExpr 0x138943200 <col:12, col:18> 'int' <IntegralCast>
|       `-BinaryOperator 0x1389431e0 <col:12, col:18> 'long' '-'
|         |-ImplicitCastExpr 0x1389431b0 <col:12> 'char *' <LValueToRValue>
|         | `-DeclRefExpr 0x138943170 <col:12> 'char *' lvalue ParmVar 0x1389283a0 'out' 'char *'
|         `-ImplicitCastExpr 0x1389431c8 <col:18> 'char *' <LValueToRValue>
|           `-DeclRefExpr 0x138943190 <col:18> 'char *' lvalue Var 0x138928620 'outStart' 'char *'
|-FunctionDecl 0x138941240 <line:15:9> col:9 implicit used memcpy 'void *(void *, const void *, unsigned long)' extern
| |-ParmVarDecl 0x138941340 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1389413a8 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x138941410 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x1389412e8 <<invalid sloc>> Implicit 882
`-FunctionDecl 0x138942b08 <line:27:9> col:9 implicit used memset 'void *(void *, int, unsigned long)' extern
  |-ParmVarDecl 0x138942c08 <<invalid sloc>> <invalid sloc> 'void *'
  |-ParmVarDecl 0x138942c70 <<invalid sloc>> <invalid sloc> 'int'
  |-ParmVarDecl 0x138942cd8 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x138942bb0 <<invalid sloc>> Implicit 900
