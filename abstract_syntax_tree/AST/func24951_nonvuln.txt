TranslationUnitDecl 0x145055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1450564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x145055bd0 '__int128'
|-TypedefDecl 0x145056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x145055bf0 'unsigned __int128'
|-TypedefDecl 0x14580be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x14580bc00 'struct __NSConstantString_tag'
|   `-Record 0x145056580 '__NSConstantString_tag'
|-TypedefDecl 0x14580be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x145055d90 '__SVInt8_t'
|-TypedefDecl 0x14580bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x145055db0 '__SVInt16_t'
|-TypedefDecl 0x14580bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x145055dd0 '__SVInt32_t'
|-TypedefDecl 0x14580bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x145055df0 '__SVInt64_t'
|-TypedefDecl 0x14580c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x145055e10 '__SVUint8_t'
|-TypedefDecl 0x14580c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x145055e30 '__SVUint16_t'
|-TypedefDecl 0x14580c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x145055e50 '__SVUint32_t'
|-TypedefDecl 0x14580c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x145055e70 '__SVUint64_t'
|-TypedefDecl 0x14580c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x145055e90 '__SVFloat16_t'
|-TypedefDecl 0x14580c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x145055eb0 '__SVFloat32_t'
|-TypedefDecl 0x14580c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x145055ed0 '__SVFloat64_t'
|-TypedefDecl 0x14580c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x145055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x14580c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x145055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x14580c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x145055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x14580c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x145055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x14580c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x145055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x14580c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x145055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x14580c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x145055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x14580c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x145055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x14580c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x145055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x14580c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x145056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x14580c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x145056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x14580c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x145056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x14580c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x145056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x14580c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x145056090 '__clang_svint8x3_t'
|-TypedefDecl 0x14580c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1450560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x14580c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1450560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x14580c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1450560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x14580c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x145056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x14580ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x145056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x14580cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x145056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x14580cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x145056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x14580cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x145056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x14580d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1450561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x14580d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1450561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x14580d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1450561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x14580d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x145056210 '__clang_svint8x4_t'
|-TypedefDecl 0x14580d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x145056230 '__clang_svint16x4_t'
|-TypedefDecl 0x14580d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x145056250 '__clang_svint32x4_t'
|-TypedefDecl 0x14580d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x145056270 '__clang_svint64x4_t'
|-TypedefDecl 0x14580d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x145056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x14580d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1450562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x14580d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1450562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x14580d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1450562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x14580d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x145056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x14580d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x145056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x14580d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x145056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x14580d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x145056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x14580da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x145056390 '__SVBool_t'
|-TypedefDecl 0x14580da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1450563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x14580dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1450563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x14580db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1450563f0 '__SVCount_t'
|-TypedefDecl 0x14580dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x14580dbb0 'char *'
|   `-BuiltinType 0x1450556b0 'char'
|-TypedefDecl 0x14580dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x14580dbb0 'char *'
|   `-BuiltinType 0x1450556b0 'char'
`-FunctionDecl 0x145826be8 <dataset_diviso_filec/func24951_nonvuln.c:1:1, line:25:1> line:1:1 invalid backend_extents 'int (struct backend *, struct connection *, int, int, int, struct nbdkit_extents *, int *)'
  |-ParmVarDecl 0x14580e248 <col:18, col:34> col:34 used b 'struct backend *'
  |-ParmVarDecl 0x145826628 <col:37, col:56> col:56 used conn 'struct connection *'
  |-ParmVarDecl 0x1458266c0 <line:2:18, col:27> col:27 invalid count 'int'
  |-ParmVarDecl 0x145826740 <col:34, col:43> col:43 invalid offset 'int'
  |-ParmVarDecl 0x1458267c0 <col:51, col:60> col:60 invalid flags 'int'
  |-ParmVarDecl 0x145826998 <line:3:18, col:41> col:41 used extents 'struct nbdkit_extents *'
  |-ParmVarDecl 0x145826a48 <col:50, col:55> col:55 used err 'int *'
  `-CompoundStmt 0x145828f10 <line:4:1, line:25:1>
    |-DeclStmt 0x145826fe0 <line:5:3, col:49>
    | |-RecordDecl 0x145826cc8 <col:3, col:10> col:10 struct b_conn_handle
    | `-VarDecl 0x145826e38 <col:3, col:48> col:25 used h 'struct b_conn_handle *' cinit
    |   `-UnaryOperator 0x145826fb0 <col:29, col:48> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-ArraySubscriptExpr 0x145826f90 <col:30, col:48> '<dependent type>' contains-errors lvalue
    |       |-ImplicitCastExpr 0x145826f60 <col:30, col:36> '<dependent type>' contains-errors <LValueToRValue>
    |       | `-RecoveryExpr 0x145826ed8 <col:30, col:36> '<dependent type>' contains-errors lvalue
    |       |   `-DeclRefExpr 0x145826ea0 <col:30> 'struct connection *' lvalue ParmVar 0x145826628 'conn' 'struct connection *'
    |       `-ImplicitCastExpr 0x145826f78 <col:44, col:47> '<dependent type>' contains-errors <LValueToRValue>
    |         `-RecoveryExpr 0x145826f38 <col:44, col:47> '<dependent type>' contains-errors lvalue
    |           `-DeclRefExpr 0x145826f00 <col:44> 'struct backend *' lvalue ParmVar 0x14580e248 'b' 'struct backend *'
    |-DeclStmt 0x145827078 <line:6:3, col:8>
    | `-VarDecl 0x145827010 <col:3, col:7> col:7 used r 'int'
    |-CallExpr 0x1458272b0 <line:8:3, col:30> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x1458271f0 <col:3> 'int ()' Function 0x145827138 'assert' 'int ()'
    | `-BinaryOperator 0x145827290 <col:11, col:29> 'int' contains-errors '>='
    |   |-RecoveryExpr 0x145827248 <col:11, col:14> '<dependent type>' contains-errors lvalue
    |   | `-DeclRefExpr 0x145827210 <col:11> 'struct b_conn_handle *' contains-errors lvalue Var 0x145826e38 'h' 'struct b_conn_handle *'
    |   `-IntegerLiteral 0x145827270 <col:29> 'int' 0
    |-CallExpr 0x1458274b8 <line:9:3, col:55> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x1458272d8 <col:3> 'int ()' Function 0x145827138 'assert' 'int ()'
    | `-CallExpr 0x145827478 <col:11, col:54> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x1458273d8 <col:11> 'int ()' Function 0x145827320 'backend_valid_range' 'int ()'
    |   |-DeclRefExpr 0x1458273f8 <col:32> 'struct backend *' lvalue ParmVar 0x14580e248 'b' 'struct backend *'
    |   |-DeclRefExpr 0x145827418 <col:35> 'struct connection *' lvalue ParmVar 0x145826628 'conn' 'struct connection *'
    |   |-RecoveryExpr 0x145827438 <col:41> '<dependent type>' contains-errors lvalue
    |   `-RecoveryExpr 0x145827458 <col:49> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x145828b20 <line:14:3, line:20:3>
    | |-BinaryOperator 0x1458286b8 <line:14:7, col:25> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x145828670 <col:7, col:10> '<dependent type>' contains-errors lvalue
    | | | `-DeclRefExpr 0x145828638 <col:7> 'struct b_conn_handle *' contains-errors lvalue Var 0x145826e38 'h' 'struct b_conn_handle *'
    | | `-IntegerLiteral 0x145828698 <col:25> 'int' 0
    | `-CompoundStmt 0x145828af8 <col:28, line:20:3>
    |   |-BinaryOperator 0x1458288b8 <line:16:5, col:54> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x1458286d8 <col:5> 'int' lvalue Var 0x145827010 'r' 'int'
    |   | `-CallExpr 0x145828878 <col:9, col:54> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x1458287d8 <col:9> 'int ()' Function 0x145828720 'nbdkit_add_extent' 'int ()'
    |   |   |-DeclRefExpr 0x1458287f8 <col:28> 'struct nbdkit_extents *' lvalue ParmVar 0x145826998 'extents' 'struct nbdkit_extents *'
    |   |   |-RecoveryExpr 0x145828818 <col:37> '<dependent type>' contains-errors lvalue
    |   |   |-RecoveryExpr 0x145828838 <col:45> '<dependent type>' contains-errors lvalue
    |   |   `-IntegerLiteral 0x145828858 <col:52> 'int' 0
    |   |-IfStmt 0x145828a90 <line:17:5, line:18:14>
    |   | |-BinaryOperator 0x145828948 <line:17:9, col:15> 'int' '=='
    |   | | |-ImplicitCastExpr 0x145828930 <col:9> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x1458288d8 <col:9> 'int' lvalue Var 0x145827010 'r' 'int'
    |   | | `-UnaryOperator 0x145828918 <col:14, col:15> 'int' prefix '-'
    |   | |   `-IntegerLiteral 0x1458288f8 <col:15> 'int' 1
    |   | `-BinaryOperator 0x145828a70 <line:18:7, col:14> 'int' contains-errors '='
    |   |   |-UnaryOperator 0x145828a38 <col:7, col:8> 'int' lvalue prefix '*' cannot overflow
    |   |   | `-ImplicitCastExpr 0x145828a20 <col:8> 'int *' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x145828968 <col:8> 'int *' lvalue ParmVar 0x145826a48 'err' 'int *'
    |   |   `-RecoveryExpr 0x145828a50 <col:14> '<dependent type>' contains-errors lvalue
    |   `-ReturnStmt 0x145828ae8 <line:19:5, col:12>
    |     `-ImplicitCastExpr 0x145828ad0 <col:12> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x145828ab0 <col:12> 'int' lvalue Var 0x145827010 'r' 'int'
    |-BinaryOperator 0x145828cf8 <line:21:3, col:62> 'int' contains-errors '='
    | |-DeclRefExpr 0x145828b40 <col:3> 'int' lvalue Var 0x145827010 'r' 'int'
    | `-CallExpr 0x145828ca0 <col:7, col:62> '<dependent type>' contains-errors
    |   |-RecoveryExpr 0x145828b98 <col:7, col:10> '<dependent type>' contains-errors lvalue
    |   | `-DeclRefExpr 0x145828b60 <col:7> 'struct backend *' lvalue ParmVar 0x14580e248 'b' 'struct backend *'
    |   |-DeclRefExpr 0x145828bc0 <col:19> 'struct backend *' lvalue ParmVar 0x14580e248 'b' 'struct backend *'
    |   |-DeclRefExpr 0x145828be0 <col:22> 'struct connection *' lvalue ParmVar 0x145826628 'conn' 'struct connection *'
    |   |-RecoveryExpr 0x145828c00 <col:28> '<dependent type>' contains-errors lvalue
    |   |-RecoveryExpr 0x145828c20 <col:35> '<dependent type>' contains-errors lvalue
    |   |-RecoveryExpr 0x145828c40 <col:43> '<dependent type>' contains-errors lvalue
    |   |-DeclRefExpr 0x145828c60 <col:50> 'struct nbdkit_extents *' lvalue ParmVar 0x145826998 'extents' 'struct nbdkit_extents *'
    |   `-DeclRefExpr 0x145828c80 <col:59> 'int *' lvalue ParmVar 0x145826a48 'err' 'int *'
    |-IfStmt 0x145828ea8 <line:22:3, line:23:17>
    | |-BinaryOperator 0x145828d88 <line:22:7, col:13> 'int' '=='
    | | |-ImplicitCastExpr 0x145828d70 <col:7> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x145828d18 <col:7> 'int' lvalue Var 0x145827010 'r' 'int'
    | | `-UnaryOperator 0x145828d58 <col:12, col:13> 'int' prefix '-'
    | |   `-IntegerLiteral 0x145828d38 <col:13> 'int' 1
    | `-CallExpr 0x145828e68 <line:23:5, col:17> 'int'
    |   |-ImplicitCastExpr 0x145828e50 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x145828da8 <col:5> 'int ()' Function 0x145827138 'assert' 'int ()'
    |   `-ImplicitCastExpr 0x145828e90 <col:13, col:14> 'int' <LValueToRValue>
    |     `-UnaryOperator 0x145828e00 <col:13, col:14> 'int' lvalue prefix '*' cannot overflow
    |       `-ImplicitCastExpr 0x145828de8 <col:14> 'int *' <LValueToRValue>
    |         `-DeclRefExpr 0x145828dc8 <col:14> 'int *' lvalue ParmVar 0x145826a48 'err' 'int *'
    `-ReturnStmt 0x145828f00 <line:24:3, col:10>
      `-ImplicitCastExpr 0x145828ee8 <col:10> 'int' <LValueToRValue>
        `-DeclRefExpr 0x145828ec8 <col:10> 'int' lvalue Var 0x145827010 'r' 'int'
