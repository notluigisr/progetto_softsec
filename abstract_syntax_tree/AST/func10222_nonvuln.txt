TranslationUnitDecl 0x141855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1418564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x141855bd0 '__int128'
|-TypedefDecl 0x141856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x141855bf0 'unsigned __int128'
|-TypedefDecl 0x14200be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x14200bc00 'struct __NSConstantString_tag'
|   `-Record 0x141856580 '__NSConstantString_tag'
|-TypedefDecl 0x14200be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x141855d90 '__SVInt8_t'
|-TypedefDecl 0x14200bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x141855db0 '__SVInt16_t'
|-TypedefDecl 0x14200bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x141855dd0 '__SVInt32_t'
|-TypedefDecl 0x14200bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x141855df0 '__SVInt64_t'
|-TypedefDecl 0x14200c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x141855e10 '__SVUint8_t'
|-TypedefDecl 0x14200c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x141855e30 '__SVUint16_t'
|-TypedefDecl 0x14200c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x141855e50 '__SVUint32_t'
|-TypedefDecl 0x14200c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x141855e70 '__SVUint64_t'
|-TypedefDecl 0x14200c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x141855e90 '__SVFloat16_t'
|-TypedefDecl 0x14200c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x141855eb0 '__SVFloat32_t'
|-TypedefDecl 0x14200c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x141855ed0 '__SVFloat64_t'
|-TypedefDecl 0x14200c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x141855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x14200c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x141855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x14200c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x141855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x14200c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x141855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x14200c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x141855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x14200c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x141855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x14200c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x141855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x14200c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x141855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x14200c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x141855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x14200c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x141856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x14200c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x141856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x14200c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x141856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x14200c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x141856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x14200c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x141856090 '__clang_svint8x3_t'
|-TypedefDecl 0x14200c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1418560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x14200c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1418560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x14200c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1418560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x14200c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x141856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x14200ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x141856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x14200cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x141856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x14200cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x141856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x14200cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x141856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x14200d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1418561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x14200d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1418561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x14200d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1418561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x14200d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x141856210 '__clang_svint8x4_t'
|-TypedefDecl 0x14200d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x141856230 '__clang_svint16x4_t'
|-TypedefDecl 0x14200d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x141856250 '__clang_svint32x4_t'
|-TypedefDecl 0x14200d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x141856270 '__clang_svint64x4_t'
|-TypedefDecl 0x14200d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x141856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x14200d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1418562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x14200d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1418562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x14200d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1418562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x14200d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x141856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x14200d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x141856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x14200d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x141856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x14200d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x141856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x14200da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x141856390 '__SVBool_t'
|-TypedefDecl 0x14200da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1418563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x14200dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1418563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x14200db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1418563f0 '__SVCount_t'
|-TypedefDecl 0x14200dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x14200dbb0 'char *'
|   `-BuiltinType 0x1418556b0 'char'
|-TypedefDecl 0x14200dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x14200dbb0 'char *'
|   `-BuiltinType 0x1418556b0 'char'
|-RecordDecl 0x14200dcc0 <dataset_diviso_filec/func10222_nonvuln.c:1:1, col:8> col:8 struct import_t
|-RecordDecl 0x14200dd60 <col:38, col:45> col:45 struct MACH0_
|-FunctionDecl 0x142026748 <col:1, line:67:1> line:1:18 invalid MACH0_ 'int (int)'
| |-ParmVarDecl 0x14200e338 <col:25> col:25 get_imports 'int'
| `-CompoundStmt 0x14300eeb8 <col:65, line:67:1>
|   |-DeclStmt 0x1420268f0 <line:2:2, col:26>
|   | `-VarDecl 0x142026888 <col:2, col:19> col:19 used imports 'struct import_t *'
|   |-DeclStmt 0x142026b30 <line:3:2, col:23>
|   | |-VarDecl 0x142026920 <col:2, col:6> col:6 used i 'int'
|   | |-VarDecl 0x1420269a0 <col:2, col:9> col:9 used j 'int'
|   | |-VarDecl 0x142026a20 <col:2, col:12> col:12 used idx 'int'
|   | `-VarDecl 0x142026aa0 <col:2, col:17> col:17 used stridx 'int'
|   |-DeclStmt 0x142026bc8 <line:4:2, col:20>
|   | `-VarDecl 0x142026b60 <col:2, col:14> col:14 used symstr 'const char *'
|   |-IfStmt 0x1420271a0 <line:6:2, line:7:10>
|   | |-BinaryOperator 0x142027138 <line:6:6, col:59> 'int' contains-errors '||'
|   | | |-BinaryOperator 0x142027080 <col:6, col:44> 'int' contains-errors '||'
|   | | | |-BinaryOperator 0x142026fc8 <col:6, col:28> 'int' contains-errors '||'
|   | | | | |-UnaryOperator 0x142026f18 <col:6, col:12> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | | | | | `-ImplicitCastExpr 0x142026f00 <col:7, col:12> '<dependent type>' contains-errors <LValueToRValue>
|   | | | | |   `-CXXDependentScopeMemberExpr 0x142026eb8 <col:7, col:12> '<dependent type>' contains-errors lvalue ->symtab
|   | | | | |     `-RecoveryExpr 0x142026e98 <col:7> '<dependent type>' contains-errors lvalue
|   | | | | `-UnaryOperator 0x142026fb0 <col:22, col:28> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | | | |   `-ImplicitCastExpr 0x142026f98 <col:23, col:28> '<dependent type>' contains-errors <LValueToRValue>
|   | | | |     `-CXXDependentScopeMemberExpr 0x142026f50 <col:23, col:28> '<dependent type>' contains-errors lvalue ->symstr
|   | | | |       `-RecoveryExpr 0x142026f30 <col:23> '<dependent type>' contains-errors lvalue
|   | | | `-UnaryOperator 0x142027068 <col:38, col:44> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | | |   `-ImplicitCastExpr 0x142027050 <col:39, col:44> '<dependent type>' contains-errors <LValueToRValue>
|   | | |     `-CXXDependentScopeMemberExpr 0x142027008 <col:39, col:44> '<dependent type>' contains-errors lvalue ->sects
|   | | |       `-RecoveryExpr 0x142026fe8 <col:39> '<dependent type>' contains-errors lvalue
|   | | `-UnaryOperator 0x142027120 <col:53, col:59> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | |   `-ImplicitCastExpr 0x142027108 <col:54, col:59> '<dependent type>' contains-errors <LValueToRValue>
|   | |     `-CXXDependentScopeMemberExpr 0x1420270c0 <col:54, col:59> '<dependent type>' contains-errors lvalue ->indirectsyms
|   | |       `-RecoveryExpr 0x1420270a0 <col:54> '<dependent type>' contains-errors lvalue
|   | `-ReturnStmt 0x142027190 <line:7:3, col:10>
|   |   `-RecoveryExpr 0x142027170 <col:10> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x1420275d0 <line:8:2, line:10:2>
|   | |-BinaryOperator 0x142027550 <line:8:6, col:63> 'int' contains-errors '||'
|   | | |-BinaryOperator 0x142027460 <col:6, col:32> 'int' contains-errors '<'
|   | | | |-CXXDependentScopeMemberExpr 0x142027418 <col:6, col:20> '<dependent type>' contains-errors lvalue .nundefsym
|   | | | | `-CXXDependentScopeMemberExpr 0x1420273d0 <col:6, col:11> '<dependent type>' contains-errors lvalue ->dysymtab
|   | | | |   `-RecoveryExpr 0x1420273b0 <col:6> '<dependent type>' contains-errors lvalue
|   | | | `-IntegerLiteral 0x142027268 <col:32> 'int' 1
|   | | `-BinaryOperator 0x142027530 <col:37, col:63> 'int' contains-errors '>'
|   | |   |-CXXDependentScopeMemberExpr 0x1420274e8 <col:37, col:51> '<dependent type>' contains-errors lvalue .nundefsym
|   | |   | `-CXXDependentScopeMemberExpr 0x1420274a0 <col:37, col:42> '<dependent type>' contains-errors lvalue ->dysymtab
|   | |   |   `-RecoveryExpr 0x142027480 <col:37> '<dependent type>' contains-errors lvalue
|   | |   `-IntegerLiteral 0x142027350 <col:63> 'int' 1048575
|   | `-CompoundStmt 0x1420275b8 <col:72, line:10:2>
|   |   `-ReturnStmt 0x1420275a8 <line:9:3, col:10>
|   |     `-RecoveryExpr 0x142027588 <col:10> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x142027fa0 <line:11:2, line:13:2>
|   | |-RecoveryExpr 0x142027f20 <line:11:6, col:82> '_Bool' contains-errors
|   | `-CompoundStmt 0x142027f88 <col:85, line:13:2>
|   |   `-ReturnStmt 0x142027f78 <line:12:3, col:10>
|   |     `-RecoveryExpr 0x142027f58 <col:10> '<dependent type>' contains-errors lvalue
|   |-ForStmt 0x14300ec30 <line:14:2, line:53:2>
|   | |-BinaryOperator 0x142028040 <line:14:7, col:15> 'int' '='
|   | | |-DeclRefExpr 0x142027fc0 <col:7> 'int' lvalue Var 0x142026920 'i' 'int'
|   | | `-BinaryOperator 0x142028020 <col:11, col:15> 'int' '='
|   | |   |-DeclRefExpr 0x142027fe0 <col:11> 'int' lvalue Var 0x1420269a0 'j' 'int'
|   | |   `-IntegerLiteral 0x142028000 <col:15> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1420281f8 <col:18, col:36> 'int' contains-errors '<'
|   | | |-DeclRefExpr 0x142028060 <col:18> 'int' lvalue Var 0x142026920 'i' 'int'
|   | | `-CXXDependentScopeMemberExpr 0x1420281b0 <col:22, col:36> '<dependent type>' contains-errors lvalue .nundefsym
|   | |   `-CXXDependentScopeMemberExpr 0x142028168 <col:22, col:27> '<dependent type>' contains-errors lvalue ->dysymtab
|   | |     `-RecoveryExpr 0x142028148 <col:22> '<dependent type>' contains-errors lvalue
|   | |-UnaryOperator 0x142028238 <col:47, col:48> 'int' postfix '++'
|   | | `-DeclRefExpr 0x142028218 <col:47> 'int' lvalue Var 0x142026920 'i' 'int'
|   | `-CompoundStmt 0x14300ebf8 <col:52, line:53:2>
|   |   |-BinaryOperator 0x142028448 <line:15:3, col:34> 'int' contains-errors '='
|   |   | |-DeclRefExpr 0x142028250 <col:3> 'int' lvalue Var 0x142026a20 'idx' 'int'
|   |   | `-BinaryOperator 0x142028428 <col:9, col:34> '<dependent type>' contains-errors '+'
|   |   |   |-CXXDependentScopeMemberExpr 0x1420283e0 <col:9, col:23> '<dependent type>' contains-errors lvalue .iundefsym
|   |   |   | `-CXXDependentScopeMemberExpr 0x142028398 <col:9, col:14> '<dependent type>' contains-errors lvalue ->dysymtab
|   |   |   |   `-RecoveryExpr 0x142028378 <col:9> '<dependent type>' contains-errors lvalue
|   |   |   `-DeclRefExpr 0x142028318 <col:34> 'int' lvalue Var 0x142026920 'i' 'int'
|   |   |-IfStmt 0x142028be0 <line:16:3, line:20:3>
|   |   | |-BinaryOperator 0x142028698 <line:16:7, col:30> 'int' contains-errors '||'
|   |   | | |-BinaryOperator 0x1420285f0 <col:7, col:13> 'int' '<'
|   |   | | | |-ImplicitCastExpr 0x1420285d8 <col:7> 'int' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x142028468 <col:7> 'int' lvalue Var 0x142026a20 'idx' 'int'
|   |   | | | `-IntegerLiteral 0x142028488 <col:13> 'int' 0
|   |   | | `-BinaryOperator 0x142028678 <col:18, col:30> 'int' contains-errors '>='
|   |   | |   |-DeclRefExpr 0x1420284e0 <col:18> 'int' lvalue Var 0x142026a20 'idx' 'int'
|   |   | |   `-CXXDependentScopeMemberExpr 0x142028630 <col:25, col:30> '<dependent type>' contains-errors lvalue ->nsymtab
|   |   | |     `-RecoveryExpr 0x142028610 <col:25> '<dependent type>' contains-errors lvalue
|   |   | `-CompoundStmt 0x142028bc0 <col:39, line:20:3>
|   |   |   |-CallExpr 0x1420288d8 <line:17:4, col:18> 'int'
|   |   |   | |-ImplicitCastExpr 0x1420288c0 <col:4> 'int (*)()' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x142028810 <col:4> 'int ()' Function 0x142028758 'bprintf' 'int ()'
|   |   |   | `-ImplicitCastExpr 0x142028900 <col:13> 'char *' <ArrayToPointerDecay>
|   |   |   |   `-StringLiteral 0x142028870 <col:13> 'char[4]' lvalue "STR"
|   |   |   `-CallExpr 0x142028b68 <line:18:4, col:17> 'void'
|   |   |     |-ImplicitCastExpr 0x142028b50 <col:4> 'void (*)(void *)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x142028ac8 <col:4> 'void (void *)' Function 0x142028958 'free' 'void (void *)'
|   |   |     `-ImplicitCastExpr 0x142028ba8 <col:10> 'void *' <BitCast>
|   |   |       `-ImplicitCastExpr 0x142028b90 <col:10> 'struct import_t *' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x142028ae8 <col:10> 'struct import_t *' lvalue Var 0x142026888 'imports' 'struct import_t *'
|   |   |-IfStmt 0x143009830 <line:22:3, line:26:3> has_else
|   |   | |-RecoveryExpr 0x1430096d8 <line:22:7, col:36> '_Bool' contains-errors
|   |   | |-CompoundStmt 0x143009738 <col:47, line:24:3>
|   |   | `-CompoundStmt 0x143009818 <col:10, line:26:3>
|   |   |   `-BinaryOperator 0x1430097f8 <line:25:4, col:13> 'const char *' '='
|   |   |     |-DeclRefExpr 0x143009748 <col:4> 'const char *' lvalue Var 0x142026b60 'symstr' 'const char *'
|   |   |     `-ImplicitCastExpr 0x1430097e0 <col:13> 'const char *' <NoOp>
|   |   |       `-ImplicitCastExpr 0x1430097c8 <col:13> 'char *' <ArrayToPointerDecay>
|   |   |         `-StringLiteral 0x1430097b0 <col:13> 'char[1]' lvalue ""
|   |   |-IfStmt 0x143009900 <line:27:3, line:29:3>
|   |   | |-UnaryOperator 0x1430098c8 <line:27:7, col:9> 'int' prefix '!' cannot overflow
|   |   | | `-ImplicitCastExpr 0x1430098b0 <col:8, col:9> 'char' <LValueToRValue>
|   |   | |   `-UnaryOperator 0x143009898 <col:8, col:9> 'const char' lvalue prefix '*' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x143009880 <col:9> 'const char *' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x143009860 <col:9> 'const char *' lvalue Var 0x142026b60 'symstr' 'const char *'
|   |   | `-CompoundStmt 0x1430098e8 <col:17, line:29:3>
|   |   |   `-ContinueStmt 0x1430098e0 <line:28:4>
|   |   `-CompoundStmt 0x14300eaa8 <line:30:3, line:50:3>
|   |     |-DeclStmt 0x1430099c0 <line:31:4, col:13>
|   |     | `-VarDecl 0x143009938 <col:4, col:12> col:8 used i 'int' cinit
|   |     |   `-IntegerLiteral 0x1430099a0 <col:12> 'int' 0
|   |     |-DeclStmt 0x143009a78 <line:32:4, col:15>
|   |     | `-VarDecl 0x1430099f0 <col:4, col:14> col:8 used len 'int' cinit
|   |     |   `-IntegerLiteral 0x143009a58 <col:14> 'int' 0
|   |     |-DeclStmt 0x143009b10 <line:33:4, col:27>
|   |     | `-VarDecl 0x143009aa8 <col:4, col:10> col:10 used symstr_dup 'char *'
|   |     `-IfStmt 0x14300ea88 <line:36:4, line:49:4>
|   |       |-BinaryOperator 0x143009c70 <line:36:8, col:14> 'int' '>'
|   |       | |-ImplicitCastExpr 0x143009c58 <col:8> 'int' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x143009c18 <col:8> 'int' lvalue Var 0x1430099f0 'len' 'int'
|   |       | `-IntegerLiteral 0x143009c38 <col:14> 'int' 0
|   |       `-CompoundStmt 0x14300ea60 <col:17, line:49:4>
|   |         |-ForStmt 0x14300a0b0 <line:37:5, line:42:5>
|   |         | |-BinaryOperator 0x143009cd0 <line:37:10, col:14> 'int' '='
|   |         | | |-DeclRefExpr 0x143009c90 <col:10> 'int' lvalue Var 0x143009938 'i' 'int'
|   |         | | `-IntegerLiteral 0x143009cb0 <col:14> 'int' 0
|   |         | |-<<<NULL>>>
|   |         | |-BinaryOperator 0x143009d60 <col:17, col:21> 'int' '<'
|   |         | | |-ImplicitCastExpr 0x143009d30 <col:17> 'int' <LValueToRValue>
|   |         | | | `-DeclRefExpr 0x143009cf0 <col:17> 'int' lvalue Var 0x143009938 'i' 'int'
|   |         | | `-ImplicitCastExpr 0x143009d48 <col:21> 'int' <LValueToRValue>
|   |         | |   `-DeclRefExpr 0x143009d10 <col:21> 'int' lvalue Var 0x1430099f0 'len' 'int'
|   |         | |-UnaryOperator 0x143009da0 <col:26, col:27> 'int' postfix '++'
|   |         | | `-DeclRefExpr 0x143009d80 <col:26> 'int' lvalue Var 0x143009938 'i' 'int'
|   |         | `-CompoundStmt 0x14300a098 <col:31, line:42:5>
|   |         |   `-IfStmt 0x14300a078 <line:38:6, line:41:6>
|   |         |     |-BinaryOperator 0x143009fb8 <line:38:10, col:55> 'int' '||'
|   |         |     | |-BinaryOperator 0x143009ed8 <col:10, col:38> 'int' '=='
|   |         |     | | |-ImplicitCastExpr 0x143009ec0 <col:10, col:33> 'int' <IntegralCast>
|   |         |     | | | `-CStyleCastExpr 0x143009e78 <col:10, col:33> 'unsigned char' <IntegralCast>
|   |         |     | | |   `-ImplicitCastExpr 0x143009e60 <col:25, col:33> 'char' <LValueToRValue> part_of_explicit_cast
|   |         |     | | |     `-ArraySubscriptExpr 0x143009e28 <col:25, col:33> 'const char' lvalue
|   |         |     | | |       |-ImplicitCastExpr 0x143009df8 <col:25> 'const char *' <LValueToRValue>
|   |         |     | | |       | `-DeclRefExpr 0x143009db8 <col:25> 'const char *' lvalue Var 0x142026b60 'symstr' 'const char *'
|   |         |     | | |       `-ImplicitCastExpr 0x143009e10 <col:32> 'int' <LValueToRValue>
|   |         |     | | |         `-DeclRefExpr 0x143009dd8 <col:32> 'int' lvalue Var 0x143009938 'i' 'int'
|   |         |     | | `-IntegerLiteral 0x143009ea0 <col:38> 'int' 255
|   |         |     | `-UnaryOperator 0x143009fa0 <col:46, col:55> 'int' prefix '!' cannot overflow
|   |         |     |   `-ImplicitCastExpr 0x143009f88 <col:47, col:55> 'char' <LValueToRValue>
|   |         |     |     `-ArraySubscriptExpr 0x143009f68 <col:47, col:55> 'const char' lvalue
|   |         |     |       |-ImplicitCastExpr 0x143009f38 <col:47> 'const char *' <LValueToRValue>
|   |         |     |       | `-DeclRefExpr 0x143009ef8 <col:47> 'const char *' lvalue Var 0x142026b60 'symstr' 'const char *'
|   |         |     |       `-ImplicitCastExpr 0x143009f50 <col:54> 'int' <LValueToRValue>
|   |         |     |         `-DeclRefExpr 0x143009f18 <col:54> 'int' lvalue Var 0x143009938 'i' 'int'
|   |         |     `-CompoundStmt 0x14300a058 <col:58, line:41:6>
|   |         |       |-BinaryOperator 0x14300a030 <line:39:7, col:13> 'int' '='
|   |         |       | |-DeclRefExpr 0x143009fd8 <col:7> 'int' lvalue Var 0x1430099f0 'len' 'int'
|   |         |       | `-ImplicitCastExpr 0x14300a018 <col:13> 'int' <LValueToRValue>
|   |         |       |   `-DeclRefExpr 0x143009ff8 <col:13> 'int' lvalue Var 0x143009938 'i' 'int'
|   |         |       `-BreakStmt 0x14300a050 <line:40:7>
|   |         |-BinaryOperator 0x14300a2d8 <line:43:5, col:41> 'char *' '='
|   |         | |-DeclRefExpr 0x14300a0e8 <col:5> 'char *' lvalue Var 0x143009aa8 'symstr_dup' 'char *'
|   |         | `-ImplicitCastExpr 0x14300a2c0 <col:18, col:41> 'char *' <IntegralToPointer>
|   |         |   `-CallExpr 0x14300a260 <col:18, col:41> 'int'
|   |         |     |-ImplicitCastExpr 0x14300a248 <col:18> 'int (*)()' <FunctionToPointerDecay>
|   |         |     | `-DeclRefExpr 0x14300a1e8 <col:18> 'int ()' Function 0x14300a130 'r_str_ndup' 'int ()'
|   |         |     |-ImplicitCastExpr 0x14300a290 <col:30> 'const char *' <LValueToRValue>
|   |         |     | `-DeclRefExpr 0x14300a208 <col:30> 'const char *' lvalue Var 0x142026b60 'symstr' 'const char *'
|   |         |     `-ImplicitCastExpr 0x14300a2a8 <col:38> 'int' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x14300a228 <col:38> 'int' lvalue Var 0x1430099f0 'len' 'int'
|   |         `-IfStmt 0x14300ea40 <line:44:5, line:48:5>
|   |           |-ImplicitCastExpr 0x14300a318 <line:44:9> 'char *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x14300a2f8 <col:9> 'char *' lvalue Var 0x143009aa8 'symstr_dup' 'char *'
|   |           `-CompoundStmt 0x14300ea28 <col:21, line:48:5>
|   |             `-CallExpr 0x14300e9d0 <line:47:6, col:22> 'void'
|   |               |-ImplicitCastExpr 0x14300e9b8 <col:6> 'void (*)(void *)' <FunctionToPointerDecay>
|   |               | `-DeclRefExpr 0x14300e960 <col:6> 'void (void *)' Function 0x142028958 'free' 'void (void *)'
|   |               `-ImplicitCastExpr 0x14300ea10 <col:12> 'void *' <BitCast>
|   |                 `-ImplicitCastExpr 0x14300e9f8 <col:12> 'char *' <LValueToRValue>
|   |                   `-DeclRefExpr 0x14300e980 <col:12> 'char *' lvalue Var 0x143009aa8 'symstr_dup' 'char *'
|   |-IfStmt 0x14300ee38 <line:56:2, line:64:2>
|   | |-RecoveryExpr 0x14300ecf8 <line:56:6, col:12> '_Bool' contains-errors
|   | `-CompoundStmt 0x14300ee20 <col:33, line:64:2>
|   |   `-IfStmt 0x14300edf0 <line:57:3, line:63:3> has_else
|   |     |-BinaryOperator 0x14300ed70 <line:57:7, col:11> 'int' '>'
|   |     | |-ImplicitCastExpr 0x14300ed58 <col:7> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x14300ed18 <col:7> 'int' lvalue Var 0x1420269a0 'j' 'int'
|   |     | `-IntegerLiteral 0x14300ed38 <col:11> 'int' 0
|   |     |-CompoundStmt 0x14300edb0 <col:14, line:60:3>
|   |     `-CompoundStmt 0x14300ede0 <col:10, line:63:3>
|   `-ReturnStmt 0x14300eea8 <line:66:2, col:9>
|     `-ImplicitCastExpr 0x14300ee90 <col:9> 'int' <PointerToIntegral>
|       `-ImplicitCastExpr 0x14300ee78 <col:9> 'struct import_t *' <LValueToRValue>
|         `-DeclRefExpr 0x14300ee58 <col:9> 'struct import_t *' lvalue Var 0x142026888 'imports' 'struct import_t *'
|-FunctionDecl 0x142027c58 <line:11:18> col:18 implicit used malloc 'void *(unsigned long)' extern
| |-ParmVarDecl 0x142027d58 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-BuiltinAttr 0x142027d00 <<invalid sloc>> Implicit 871
| `-AllocSizeAttr 0x142027dc8 <col:18> Implicit 1
|-FunctionDecl 0x142028958 <line:18:4> col:4 implicit used free 'void (void *)' extern
| |-ParmVarDecl 0x142028a58 <<invalid sloc>> <invalid sloc> 'void *'
| `-BuiltinAttr 0x142028a00 <<invalid sloc>> Implicit 873
`-FunctionDecl 0x14300a378 <line:45:6> col:6 implicit used strncpy 'char *(char *, const char *, unsigned long)' extern
  |-ParmVarDecl 0x14300a478 <<invalid sloc>> <invalid sloc> 'char *'
  |-ParmVarDecl 0x14300a4e0 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x14300a548 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x14300a420 <<invalid sloc>> Implicit 886
