TranslationUnitDecl 0x13a855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x13a8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x13a855bd0 '__int128'
|-TypedefDecl 0x13a856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x13a855bf0 'unsigned __int128'
|-TypedefDecl 0x13b00be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13b00bc00 'struct __NSConstantString_tag'
|   `-Record 0x13a856580 '__NSConstantString_tag'
|-TypedefDecl 0x13b00be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x13a855d90 '__SVInt8_t'
|-TypedefDecl 0x13b00bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x13a855db0 '__SVInt16_t'
|-TypedefDecl 0x13b00bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x13a855dd0 '__SVInt32_t'
|-TypedefDecl 0x13b00bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x13a855df0 '__SVInt64_t'
|-TypedefDecl 0x13b00c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x13a855e10 '__SVUint8_t'
|-TypedefDecl 0x13b00c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x13a855e30 '__SVUint16_t'
|-TypedefDecl 0x13b00c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x13a855e50 '__SVUint32_t'
|-TypedefDecl 0x13b00c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x13a855e70 '__SVUint64_t'
|-TypedefDecl 0x13b00c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x13a855e90 '__SVFloat16_t'
|-TypedefDecl 0x13b00c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x13a855eb0 '__SVFloat32_t'
|-TypedefDecl 0x13b00c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x13a855ed0 '__SVFloat64_t'
|-TypedefDecl 0x13b00c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x13a855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13b00c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x13a855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13b00c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x13a855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13b00c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x13a855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13b00c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x13a855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13b00c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x13a855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13b00c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x13a855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13b00c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x13a855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13b00c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x13a855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13b00c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x13a856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13b00c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x13a856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13b00c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x13a856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13b00c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x13a856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13b00c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x13a856090 '__clang_svint8x3_t'
|-TypedefDecl 0x13b00c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x13a8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13b00c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x13a8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13b00c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x13a8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13b00c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x13a856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13b00ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x13a856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13b00cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x13a856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13b00cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x13a856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13b00cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x13a856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13b00d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x13a8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13b00d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x13a8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13b00d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x13a8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13b00d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x13a856210 '__clang_svint8x4_t'
|-TypedefDecl 0x13b00d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x13a856230 '__clang_svint16x4_t'
|-TypedefDecl 0x13b00d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x13a856250 '__clang_svint32x4_t'
|-TypedefDecl 0x13b00d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x13a856270 '__clang_svint64x4_t'
|-TypedefDecl 0x13b00d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x13a856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13b00d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x13a8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13b00d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x13a8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13b00d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x13a8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13b00d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x13a856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13b00d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x13a856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13b00d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x13a856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13b00d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x13a856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13b00da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x13a856390 '__SVBool_t'
|-TypedefDecl 0x13b00da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x13a8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13b00dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x13a8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13b00db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x13a8563f0 '__SVCount_t'
|-TypedefDecl 0x13b00dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13b00dbb0 'char *'
|   `-BuiltinType 0x13a8556b0 'char'
|-TypedefDecl 0x13b00dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13b00dbb0 'char *'
|   `-BuiltinType 0x13a8556b0 'char'
|-FunctionDecl 0x13b00dfa8 <dataset_diviso_filec/func5678_nonvuln.c:1:1, line:57:1> line:1:1 invalid DetectSmoothImage24 'int (int, int *, int, int)'
| |-ParmVarDecl 0x13b00dcf0 <col:22, col:35> col:35 invalid cl 'int'
| |-ParmVarDecl 0x13b00dda8 <line:2:22, col:38> col:38 invalid fmt 'int *'
| |-ParmVarDecl 0x13b00de28 <line:3:22, col:26> col:26 used w 'int'
| |-ParmVarDecl 0x13b00dea8 <line:4:22, col:26> col:26 used h 'int'
| `-CompoundStmt 0x13b02d1a0 <line:5:1, line:57:1>
|   |-DeclStmt 0x13b00e0f0 <line:6:5, col:12>
|   | `-VarDecl 0x13b00e088 <col:5, col:9> col:9 used off 'int'
|   |-DeclStmt 0x13b00e3b8 <line:7:5, col:23>
|   | |-VarDecl 0x13b00e120 <col:5, col:9> col:9 used x 'int'
|   | |-VarDecl 0x13b00e1a0 <col:5, col:12> col:12 used y 'int'
|   | |-VarDecl 0x13b00e220 <col:5, col:15> col:15 used d 'int'
|   | |-VarDecl 0x13b00e2a0 <col:5, col:18> col:18 used dx 'int'
|   | `-VarDecl 0x13b00e320 <col:5, col:22> col:22 used c 'int'
|   |-DeclStmt 0x13b0274f0 <line:8:5, col:22>
|   | `-VarDecl 0x13b027488 <col:5, col:21> col:9 used diffStat 'int[256]'
|   |-DeclStmt 0x13b0275a8 <line:9:5, col:23>
|   | `-VarDecl 0x13b027520 <col:5, col:22> col:9 used pixelCount 'int' cinit
|   |   `-IntegerLiteral 0x13b027588 <col:22> 'int' 0
|   |-DeclStmt 0x13b027768 <line:10:5, col:21>
|   | |-VarDecl 0x13b0275d8 <col:5, col:9> col:9 used pix 'int'
|   | `-VarDecl 0x13b0276e8 <col:5, col:20> col:14 used left 'int[3]'
|   |-DeclStmt 0x13b027800 <line:11:5, col:27>
|   | `-VarDecl 0x13b027798 <col:5, col:19> col:19 used avgError 'unsigned long'
|   |-BinaryOperator 0x13b027900 <line:14:5, col:31> 'int' contains-errors '='
|   | |-DeclRefExpr 0x13b027818 <col:5> 'int' lvalue Var 0x13b00e088 'off' 'int'
|   | `-ParenExpr 0x13b0278e0 <col:11, col:31> 'int' contains-errors
|   |   `-BinaryOperator 0x13b0278c0 <col:12, col:30> 'int' contains-errors '!='
|   |     |-CXXDependentScopeMemberExpr 0x13b027858 <col:12, col:17> '<dependent type>' contains-errors lvalue ->bigEndian
|   |     | `-RecoveryExpr 0x13b027838 <col:12> '<dependent type>' contains-errors lvalue
|   |     `-IntegerLiteral 0x13b0278a0 <col:30> 'int' 0
|   |-CallExpr 0x13b028138 <line:16:5, col:40> 'void *'
|   | |-ImplicitCastExpr 0x13b028120 <col:5> 'void *(*)(void *, int, unsigned long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x13b027fe0 <col:5> 'void *(void *, int, unsigned long)' Function 0x13b027d90 'memset' 'void *(void *, int, unsigned long)'
|   | |-ImplicitCastExpr 0x13b028188 <col:12> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x13b028170 <col:12> 'int *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x13b028000 <col:12> 'int[256]' lvalue Var 0x13b027488 'diffStat' 'int[256]'
|   | |-IntegerLiteral 0x13b028020 <col:22> 'int' 0
|   | `-BinaryOperator 0x13b0280b0 <col:25, col:39> 'unsigned long' '*'
|   |   |-ImplicitCastExpr 0x13b028098 <col:25> 'unsigned long' <IntegralCast>
|   |   | `-IntegerLiteral 0x13b028040 <col:25> 'int' 256
|   |   `-UnaryExprOrTypeTraitExpr 0x13b028078 <col:29, col:39> 'unsigned long' sizeof 'int'
|   |-BinaryOperator 0x13b028260 <line:18:5, col:16> 'int' ','
|   | |-BinaryOperator 0x13b0281e0 <col:5, col:9> 'int' '='
|   | | |-DeclRefExpr 0x13b0281a0 <col:5> 'int' lvalue Var 0x13b00e1a0 'y' 'int'
|   | | `-IntegerLiteral 0x13b0281c0 <col:9> 'int' 0
|   | `-BinaryOperator 0x13b028240 <col:12, col:16> 'int' '='
|   |   |-DeclRefExpr 0x13b028200 <col:12> 'int' lvalue Var 0x13b00e120 'x' 'int'
|   |   `-IntegerLiteral 0x13b028220 <col:16> 'int' 0
|   |-WhileStmt 0x13b02c2b8 <line:19:5, line:40:5>
|   | |-BinaryOperator 0x13b0283a0 <line:19:12, col:25> 'int' '&&'
|   | | |-BinaryOperator 0x13b0282f0 <col:12, col:16> 'int' '<'
|   | | | |-ImplicitCastExpr 0x13b0282c0 <col:12> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x13b028280 <col:12> 'int' lvalue Var 0x13b00e1a0 'y' 'int'
|   | | | `-ImplicitCastExpr 0x13b0282d8 <col:16> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x13b0282a0 <col:16> 'int' lvalue ParmVar 0x13b00dea8 'h' 'int'
|   | | `-BinaryOperator 0x13b028380 <col:21, col:25> 'int' '<'
|   | |   |-ImplicitCastExpr 0x13b028350 <col:21> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x13b028310 <col:21> 'int' lvalue Var 0x13b00e120 'x' 'int'
|   | |   `-ImplicitCastExpr 0x13b028368 <col:25> 'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x13b028330 <col:25> 'int' lvalue ParmVar 0x13b00de28 'w' 'int'
|   | `-CompoundStmt 0x13b02c298 <col:28, line:40:5>
|   |   |-ForStmt 0x13b02bf90 <line:20:9, line:32:9>
|   |   | |-BinaryOperator 0x13b02a000 <line:20:14, col:18> 'int' '='
|   |   | | |-DeclRefExpr 0x13b0283c0 <col:14> 'int' lvalue Var 0x13b00e220 'd' 'int'
|   |   | | `-IntegerLiteral 0x13b0283e0 <col:18> 'int' 0
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x13b02a440 <col:21, col:46> 'int' contains-errors '&&'
|   |   | | |-BinaryOperator 0x13b02a370 <col:21, col:29> 'int' '<'
|   |   | | | |-ImplicitCastExpr 0x13b02a358 <col:21> 'int' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x13b02a020 <col:21> 'int' lvalue Var 0x13b00e220 'd' 'int'
|   |   | | | `-BinaryOperator 0x13b02a338 <col:25, col:29> 'int' '-'
|   |   | | |   |-ImplicitCastExpr 0x13b02a308 <col:25> 'int' <LValueToRValue>
|   |   | | |   | `-DeclRefExpr 0x13b02a040 <col:25> 'int' lvalue ParmVar 0x13b00dea8 'h' 'int'
|   |   | | |   `-ImplicitCastExpr 0x13b02a320 <col:29> 'int' <LValueToRValue>
|   |   | | |     `-DeclRefExpr 0x13b02a060 <col:29> 'int' lvalue Var 0x13b00e1a0 'y' 'int'
|   |   | | `-BinaryOperator 0x13b02a420 <col:34, col:46> 'int' contains-errors '<'
|   |   | |   |-DeclRefExpr 0x13b02a108 <col:34> 'int' lvalue Var 0x13b00e220 'd' 'int'
|   |   | |   `-BinaryOperator 0x13b02a400 <col:38, col:46> '<dependent type>' contains-errors '-'
|   |   | |     |-BinaryOperator 0x13b02a3c0 <col:38, col:42> 'int' '-'
|   |   | |     | |-ImplicitCastExpr 0x13b02a390 <col:38> 'int' <LValueToRValue>
|   |   | |     | | `-DeclRefExpr 0x13b02a128 <col:38> 'int' lvalue ParmVar 0x13b00de28 'w' 'int'
|   |   | |     | `-ImplicitCastExpr 0x13b02a3a8 <col:42> 'int' <LValueToRValue>
|   |   | |     |   `-DeclRefExpr 0x13b02a148 <col:42> 'int' lvalue Var 0x13b00e120 'x' 'int'
|   |   | |     `-RecoveryExpr 0x13b02a3e0 <col:46> '<dependent type>' contains-errors lvalue
|   |   | |-UnaryOperator 0x13b02a480 <col:67, col:68> 'int' postfix '++'
|   |   | | `-DeclRefExpr 0x13b02a460 <col:67> 'int' lvalue Var 0x13b00e220 'd' 'int'
|   |   | `-CompoundStmt 0x13b02bf70 <col:72, line:32:9>
|   |   |   |-ForStmt 0x13b02a948 <line:21:13, line:23:13>
|   |   |   | |-BinaryOperator 0x13b02a4d8 <line:21:18, col:22> 'int' '='
|   |   |   | | |-DeclRefExpr 0x13b02a498 <col:18> 'int' lvalue Var 0x13b00e320 'c' 'int'
|   |   |   | | `-IntegerLiteral 0x13b02a4b8 <col:22> 'int' 0
|   |   |   | |-<<<NULL>>>
|   |   |   | |-BinaryOperator 0x13b02a550 <col:25, col:29> 'int' '<'
|   |   |   | | |-ImplicitCastExpr 0x13b02a538 <col:25> 'int' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x13b02a4f8 <col:25> 'int' lvalue Var 0x13b00e320 'c' 'int'
|   |   |   | | `-IntegerLiteral 0x13b02a518 <col:29> 'int' 3
|   |   |   | |-UnaryOperator 0x13b02a590 <col:32, col:33> 'int' postfix '++'
|   |   |   | | `-DeclRefExpr 0x13b02a570 <col:32> 'int' lvalue Var 0x13b00e320 'c' 'int'
|   |   |   | `-CompoundStmt 0x13b02a938 <col:37, line:23:13>
|   |   |   `-ForStmt 0x13b02bf38 <line:24:13, line:31:13>
|   |   |     |-BinaryOperator 0x13b02a9c0 <line:24:18, col:23> 'int' '='
|   |   |     | |-DeclRefExpr 0x13b02a980 <col:18> 'int' lvalue Var 0x13b00e2a0 'dx' 'int'
|   |   |     | `-IntegerLiteral 0x13b02a9a0 <col:23> 'int' 1
|   |   |     |-<<<NULL>>>
|   |   |     |-BinaryOperator 0x13b02aa58 <col:26, col:32> 'int' contains-errors '<='
|   |   |     | |-DeclRefExpr 0x13b02a9e0 <col:26> 'int' lvalue Var 0x13b00e2a0 'dx' 'int'
|   |   |     | `-RecoveryExpr 0x13b02aa38 <col:32> '<dependent type>' contains-errors lvalue
|   |   |     |-UnaryOperator 0x13b02aa98 <col:53, col:55> 'int' postfix '++'
|   |   |     | `-DeclRefExpr 0x13b02aa78 <col:53> 'int' lvalue Var 0x13b00e2a0 'dx' 'int'
|   |   |     `-CompoundStmt 0x13b02bf18 <col:59, line:31:13>
|   |   |       |-ForStmt 0x13b02bea8 <line:25:17, line:29:17>
|   |   |       | |-BinaryOperator 0x13b02aaf0 <line:25:22, col:26> 'int' '='
|   |   |       | | |-DeclRefExpr 0x13b02aab0 <col:22> 'int' lvalue Var 0x13b00e320 'c' 'int'
|   |   |       | | `-IntegerLiteral 0x13b02aad0 <col:26> 'int' 0
|   |   |       | |-<<<NULL>>>
|   |   |       | |-BinaryOperator 0x13b02ab68 <col:29, col:33> 'int' '<'
|   |   |       | | |-ImplicitCastExpr 0x13b02ab50 <col:29> 'int' <LValueToRValue>
|   |   |       | | | `-DeclRefExpr 0x13b02ab10 <col:29> 'int' lvalue Var 0x13b00e320 'c' 'int'
|   |   |       | | `-IntegerLiteral 0x13b02ab30 <col:33> 'int' 3
|   |   |       | |-UnaryOperator 0x13b02aba8 <col:36, col:37> 'int' postfix '++'
|   |   |       | | `-DeclRefExpr 0x13b02ab88 <col:36> 'int' lvalue Var 0x13b00e320 'c' 'int'
|   |   |       | `-CompoundStmt 0x13b02be88 <col:41, line:29:17>
|   |   |       |   |-UnaryOperator 0x13b02bd88 <line:27:21, col:49> 'int' postfix '++'
|   |   |       |   | `-ArraySubscriptExpr 0x13b02bd68 <col:21, col:48> 'int' lvalue
|   |   |       |   |   |-ImplicitCastExpr 0x13b02bd50 <col:21> 'int *' <ArrayToPointerDecay>
|   |   |       |   |   | `-DeclRefExpr 0x13b02af38 <col:21> 'int[256]' lvalue Var 0x13b027488 'diffStat' 'int[256]'
|   |   |       |   |   `-CallExpr 0x13b02bd28 <col:30, col:47> 'int'
|   |   |       |   |     |-ImplicitCastExpr 0x13b02bd10 <col:30> 'int (*)(int)' <FunctionToPointerDecay>
|   |   |       |   |     | `-DeclRefExpr 0x13b02bbc0 <col:30> 'int (int)' Function 0x13b02ba00 'abs' 'int (int)'
|   |   |       |   |     `-BinaryOperator 0x13b02bcc0 <col:34, col:46> 'int' '-'
|   |   |       |   |       |-ImplicitCastExpr 0x13b02bc90 <col:34> 'int' <LValueToRValue>
|   |   |       |   |       | `-DeclRefExpr 0x13b02bbe0 <col:34> 'int' lvalue Var 0x13b0275d8 'pix' 'int'
|   |   |       |   |       `-ImplicitCastExpr 0x13b02bca8 <col:40, col:46> 'int' <LValueToRValue>
|   |   |       |   |         `-ArraySubscriptExpr 0x13b02bc70 <col:40, col:46> 'int' lvalue
|   |   |       |   |           |-ImplicitCastExpr 0x13b02bc40 <col:40> 'int *' <ArrayToPointerDecay>
|   |   |       |   |           | `-DeclRefExpr 0x13b02bc00 <col:40> 'int[3]' lvalue Var 0x13b0276e8 'left' 'int[3]'
|   |   |       |   |           `-ImplicitCastExpr 0x13b02bc58 <col:45> 'int' <LValueToRValue>
|   |   |       |   |             `-DeclRefExpr 0x13b02bc20 <col:45> 'int' lvalue Var 0x13b00e320 'c' 'int'
|   |   |       |   `-BinaryOperator 0x13b02be68 <line:28:21, col:31> 'int' '='
|   |   |       |     |-ArraySubscriptExpr 0x13b02be10 <col:21, col:27> 'int' lvalue
|   |   |       |     | |-ImplicitCastExpr 0x13b02bde0 <col:21> 'int *' <ArrayToPointerDecay>
|   |   |       |     | | `-DeclRefExpr 0x13b02bda0 <col:21> 'int[3]' lvalue Var 0x13b0276e8 'left' 'int[3]'
|   |   |       |     | `-ImplicitCastExpr 0x13b02bdf8 <col:26> 'int' <LValueToRValue>
|   |   |       |     |   `-DeclRefExpr 0x13b02bdc0 <col:26> 'int' lvalue Var 0x13b00e320 'c' 'int'
|   |   |       |     `-ImplicitCastExpr 0x13b02be50 <col:31> 'int' <LValueToRValue>
|   |   |       |       `-DeclRefExpr 0x13b02be30 <col:31> 'int' lvalue Var 0x13b0275d8 'pix' 'int'
|   |   |       `-UnaryOperator 0x13b02bf00 <line:30:17, col:27> 'int' postfix '++'
|   |   |         `-DeclRefExpr 0x13b02bee0 <col:17> 'int' lvalue Var 0x13b027520 'pixelCount' 'int'
|   |   `-IfStmt 0x13b02c268 <line:33:9, line:39:9> has_else
|   |     |-BinaryOperator 0x13b02c038 <line:33:13, col:17> 'int' '>'
|   |     | |-ImplicitCastExpr 0x13b02c008 <col:13> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x13b02bfc8 <col:13> 'int' lvalue ParmVar 0x13b00de28 'w' 'int'
|   |     | `-ImplicitCastExpr 0x13b02c020 <col:17> 'int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x13b02bfe8 <col:17> 'int' lvalue ParmVar 0x13b00dea8 'h' 'int'
|   |     |-CompoundStmt 0x13b02c140 <col:20, line:36:9>
|   |     | |-CompoundAssignOperator 0x13b02c0b0 <line:34:13, col:18> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |     | | |-DeclRefExpr 0x13b02c058 <col:13> 'int' lvalue Var 0x13b00e120 'x' 'int'
|   |     | | `-ImplicitCastExpr 0x13b02c098 <col:18> 'int' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x13b02c078 <col:18> 'int' lvalue ParmVar 0x13b00dea8 'h' 'int'
|   |     | `-BinaryOperator 0x13b02c120 <line:35:13, col:17> 'int' '='
|   |     |   |-DeclRefExpr 0x13b02c0e0 <col:13> 'int' lvalue Var 0x13b00e1a0 'y' 'int'
|   |     |   `-IntegerLiteral 0x13b02c100 <col:17> 'int' 0
|   |     `-CompoundStmt 0x13b02c248 <line:36:16, line:39:9>
|   |       |-BinaryOperator 0x13b02c1a0 <line:37:13, col:17> 'int' '='
|   |       | |-DeclRefExpr 0x13b02c160 <col:13> 'int' lvalue Var 0x13b00e120 'x' 'int'
|   |       | `-IntegerLiteral 0x13b02c180 <col:17> 'int' 0
|   |       `-CompoundAssignOperator 0x13b02c218 <line:38:13, col:18> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |         |-DeclRefExpr 0x13b02c1c0 <col:13> 'int' lvalue Var 0x13b00e1a0 'y' 'int'
|   |         `-ImplicitCastExpr 0x13b02c200 <col:18> 'int' <LValueToRValue>
|   |           `-DeclRefExpr 0x13b02c1e0 <col:18> 'int' lvalue ParmVar 0x13b00de28 'w' 'int'
|   |-IfStmt 0x13b02c470 <line:42:5, line:43:16>
|   | |-BinaryOperator 0x13b02c420 <line:42:9, col:42> 'int' '>='
|   | | |-BinaryOperator 0x13b02c3e0 <col:9, col:28> 'int' '/'
|   | | | |-BinaryOperator 0x13b02c388 <col:9, col:23> 'int' '*'
|   | | | | |-ImplicitCastExpr 0x13b02c370 <col:9, col:19> 'int' <LValueToRValue>
|   | | | | | `-ArraySubscriptExpr 0x13b02c330 <col:9, col:19> 'int' lvalue
|   | | | | |   |-ImplicitCastExpr 0x13b02c318 <col:9> 'int *' <ArrayToPointerDecay>
|   | | | | |   | `-DeclRefExpr 0x13b02c2d8 <col:9> 'int[256]' lvalue Var 0x13b027488 'diffStat' 'int[256]'
|   | | | | |   `-IntegerLiteral 0x13b02c2f8 <col:18> 'int' 0
|   | | | | `-IntegerLiteral 0x13b02c350 <col:23> 'int' 33
|   | | | `-ImplicitCastExpr 0x13b02c3c8 <col:28> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x13b02c3a8 <col:28> 'int' lvalue Var 0x13b027520 'pixelCount' 'int'
|   | | `-IntegerLiteral 0x13b02c400 <col:42> 'int' 95
|   | `-ReturnStmt 0x13b02c460 <line:43:9, col:16>
|   |   `-IntegerLiteral 0x13b02c440 <col:16> 'int' 0
|   |-BinaryOperator 0x13b02c4e8 <line:45:5, col:16> 'unsigned long' '='
|   | |-DeclRefExpr 0x13b02c490 <col:5> 'unsigned long' lvalue Var 0x13b027798 'avgError' 'unsigned long'
|   | `-ImplicitCastExpr 0x13b02c4d0 <col:16> 'unsigned long' <IntegralCast>
|   |   `-IntegerLiteral 0x13b02c4b0 <col:16> 'int' 0
|   |-ForStmt 0x13b02cbf0 <line:46:5, line:50:5>
|   | |-BinaryOperator 0x13b02c548 <line:46:10, col:14> 'int' '='
|   | | |-DeclRefExpr 0x13b02c508 <col:10> 'int' lvalue Var 0x13b00e320 'c' 'int'
|   | | `-IntegerLiteral 0x13b02c528 <col:14> 'int' 1
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x13b02c5c0 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x13b02c5a8 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x13b02c568 <col:17> 'int' lvalue Var 0x13b00e320 'c' 'int'
|   | | `-IntegerLiteral 0x13b02c588 <col:21> 'int' 8
|   | |-UnaryOperator 0x13b02c600 <col:24, col:25> 'int' postfix '++'
|   | | `-DeclRefExpr 0x13b02c5e0 <col:24> 'int' lvalue Var 0x13b00e320 'c' 'int'
|   | `-CompoundStmt 0x13b02cbd0 <col:29, line:50:5>
|   |   |-CompoundAssignOperator 0x13b02c850 <line:47:9, col:71> 'unsigned long' '+=' ComputeLHSTy='unsigned long' ComputeResultTy='unsigned long'
|   |   | |-DeclRefExpr 0x13b02c618 <col:9> 'unsigned long' lvalue Var 0x13b027798 'avgError' 'unsigned long'
|   |   | `-BinaryOperator 0x13b02c830 <col:21, col:71> 'unsigned long' '*'
|   |   |   |-CStyleCastExpr 0x13b02c6f8 <col:21, col:46> 'unsigned long' <IntegralCast>
|   |   |   | `-ImplicitCastExpr 0x13b02c6e0 <col:36, col:46> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |   |   `-ArraySubscriptExpr 0x13b02c6a8 <col:36, col:46> 'int' lvalue
|   |   |   |     |-ImplicitCastExpr 0x13b02c678 <col:36> 'int *' <ArrayToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x13b02c638 <col:36> 'int[256]' lvalue Var 0x13b027488 'diffStat' 'int[256]'
|   |   |   |     `-ImplicitCastExpr 0x13b02c690 <col:45> 'int' <LValueToRValue>
|   |   |   |       `-DeclRefExpr 0x13b02c658 <col:45> 'int' lvalue Var 0x13b00e320 'c' 'int'
|   |   |   `-CStyleCastExpr 0x13b02c808 <col:50, col:71> 'unsigned long' <IntegralCast>
|   |   |     `-ParenExpr 0x13b02c7e8 <col:65, col:71> 'int'
|   |   |       `-BinaryOperator 0x13b02c790 <col:66, col:70> 'int' '*'
|   |   |         |-ImplicitCastExpr 0x13b02c760 <col:66> 'int' <LValueToRValue>
|   |   |         | `-DeclRefExpr 0x13b02c720 <col:66> 'int' lvalue Var 0x13b00e320 'c' 'int'
|   |   |         `-ImplicitCastExpr 0x13b02c778 <col:70> 'int' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x13b02c740 <col:70> 'int' lvalue Var 0x13b00e320 'c' 'int'
|   |   `-IfStmt 0x13b02cbb0 <line:48:9, line:49:20>
|   |     |-BinaryOperator 0x13b02cb60 <line:48:13, col:63> 'int' '||'
|   |     | |-BinaryOperator 0x13b02c948 <col:13, col:28> 'int' '=='
|   |     | | |-ImplicitCastExpr 0x13b02c930 <col:13, col:23> 'int' <LValueToRValue>
|   |     | | | `-ArraySubscriptExpr 0x13b02c8f0 <col:13, col:23> 'int' lvalue
|   |     | | |   |-ImplicitCastExpr 0x13b02c8c0 <col:13> 'int *' <ArrayToPointerDecay>
|   |     | | |   | `-DeclRefExpr 0x13b02c880 <col:13> 'int[256]' lvalue Var 0x13b027488 'diffStat' 'int[256]'
|   |     | | |   `-ImplicitCastExpr 0x13b02c8d8 <col:22> 'int' <LValueToRValue>
|   |     | | |     `-DeclRefExpr 0x13b02c8a0 <col:22> 'int' lvalue Var 0x13b00e320 'c' 'int'
|   |     | | `-IntegerLiteral 0x13b02c910 <col:28> 'int' 0
|   |     | `-BinaryOperator 0x13b02cb40 <col:33, col:63> 'int' '>'
|   |     |   |-ImplicitCastExpr 0x13b02cb28 <col:33, col:43> 'int' <LValueToRValue>
|   |     |   | `-ArraySubscriptExpr 0x13b02c9d8 <col:33, col:43> 'int' lvalue
|   |     |   |   |-ImplicitCastExpr 0x13b02c9a8 <col:33> 'int *' <ArrayToPointerDecay>
|   |     |   |   | `-DeclRefExpr 0x13b02c968 <col:33> 'int[256]' lvalue Var 0x13b027488 'diffStat' 'int[256]'
|   |     |   |   `-ImplicitCastExpr 0x13b02c9c0 <col:42> 'int' <LValueToRValue>
|   |     |   |     `-DeclRefExpr 0x13b02c988 <col:42> 'int' lvalue Var 0x13b00e320 'c' 'int'
|   |     |   `-BinaryOperator 0x13b02cb08 <col:47, col:63> 'int' '*'
|   |     |     |-ImplicitCastExpr 0x13b02caf0 <col:47, col:59> 'int' <LValueToRValue>
|   |     |     | `-ArraySubscriptExpr 0x13b02cab0 <col:47, col:59> 'int' lvalue
|   |     |     |   |-ImplicitCastExpr 0x13b02ca98 <col:47> 'int *' <ArrayToPointerDecay>
|   |     |     |   | `-DeclRefExpr 0x13b02ca00 <col:47> 'int[256]' lvalue Var 0x13b027488 'diffStat' 'int[256]'
|   |     |     |   `-BinaryOperator 0x13b02ca78 <col:56, col:58> 'int' '-'
|   |     |     |     |-ImplicitCastExpr 0x13b02ca60 <col:56> 'int' <LValueToRValue>
|   |     |     |     | `-DeclRefExpr 0x13b02ca20 <col:56> 'int' lvalue Var 0x13b00e320 'c' 'int'
|   |     |     |     `-IntegerLiteral 0x13b02ca40 <col:58> 'int' 1
|   |     |     `-IntegerLiteral 0x13b02cad0 <col:63> 'int' 2
|   |     `-ReturnStmt 0x13b02cba0 <line:49:13, col:20>
|   |       `-IntegerLiteral 0x13b02cb80 <col:20> 'int' 0
|   |-ForStmt 0x13b02cf58 <line:51:5, line:53:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x13b02cc80 <line:51:12, col:16> 'int' '<'
|   | | |-ImplicitCastExpr 0x13b02cc68 <col:12> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x13b02cc28 <col:12> 'int' lvalue Var 0x13b00e320 'c' 'int'
|   | | `-IntegerLiteral 0x13b02cc48 <col:16> 'int' 256
|   | |-UnaryOperator 0x13b02ccc0 <col:21, col:22> 'int' postfix '++'
|   | | `-DeclRefExpr 0x13b02cca0 <col:21> 'int' lvalue Var 0x13b00e320 'c' 'int'
|   | `-CompoundStmt 0x13b02cf40 <col:26, line:53:5>
|   |   `-CompoundAssignOperator 0x13b02cf10 <line:52:9, col:71> 'unsigned long' '+=' ComputeLHSTy='unsigned long' ComputeResultTy='unsigned long'
|   |     |-DeclRefExpr 0x13b02ccd8 <col:9> 'unsigned long' lvalue Var 0x13b027798 'avgError' 'unsigned long'
|   |     `-BinaryOperator 0x13b02cef0 <col:21, col:71> 'unsigned long' '*'
|   |       |-CStyleCastExpr 0x13b02cdb8 <col:21, col:46> 'unsigned long' <IntegralCast>
|   |       | `-ImplicitCastExpr 0x13b02cda0 <col:36, col:46> 'int' <LValueToRValue> part_of_explicit_cast
|   |       |   `-ArraySubscriptExpr 0x13b02cd68 <col:36, col:46> 'int' lvalue
|   |       |     |-ImplicitCastExpr 0x13b02cd38 <col:36> 'int *' <ArrayToPointerDecay>
|   |       |     | `-DeclRefExpr 0x13b02ccf8 <col:36> 'int[256]' lvalue Var 0x13b027488 'diffStat' 'int[256]'
|   |       |     `-ImplicitCastExpr 0x13b02cd50 <col:45> 'int' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x13b02cd18 <col:45> 'int' lvalue Var 0x13b00e320 'c' 'int'
|   |       `-CStyleCastExpr 0x13b02cec8 <col:50, col:71> 'unsigned long' <IntegralCast>
|   |         `-ParenExpr 0x13b02cea8 <col:65, col:71> 'int'
|   |           `-BinaryOperator 0x13b02ce50 <col:66, col:70> 'int' '*'
|   |             |-ImplicitCastExpr 0x13b02ce20 <col:66> 'int' <LValueToRValue>
|   |             | `-DeclRefExpr 0x13b02cde0 <col:66> 'int' lvalue Var 0x13b00e320 'c' 'int'
|   |             `-ImplicitCastExpr 0x13b02ce38 <col:70> 'int' <LValueToRValue>
|   |               `-DeclRefExpr 0x13b02ce00 <col:70> 'int' lvalue Var 0x13b00e320 'c' 'int'
|   |-CompoundAssignOperator 0x13b02d110 <line:54:5, col:46> 'unsigned long' '/=' ComputeLHSTy='unsigned long' ComputeResultTy='unsigned long'
|   | |-DeclRefExpr 0x13b02cf90 <col:5> 'unsigned long' lvalue Var 0x13b027798 'avgError' 'unsigned long'
|   | `-ImplicitCastExpr 0x13b02d0f8 <col:17, col:46> 'unsigned long' <IntegralCast>
|   |   `-ParenExpr 0x13b02d0d8 <col:17, col:46> 'int'
|   |     `-BinaryOperator 0x13b02d0b8 <col:18, col:45> 'int' '-'
|   |       |-BinaryOperator 0x13b02d008 <col:18, col:31> 'int' '*'
|   |       | |-ImplicitCastExpr 0x13b02cff0 <col:18> 'int' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x13b02cfb0 <col:18> 'int' lvalue Var 0x13b027520 'pixelCount' 'int'
|   |       | `-IntegerLiteral 0x13b02cfd0 <col:31> 'int' 3
|   |       `-ImplicitCastExpr 0x13b02d0a0 <col:35, col:45> 'int' <LValueToRValue>
|   |         `-ArraySubscriptExpr 0x13b02d080 <col:35, col:45> 'int' lvalue
|   |           |-ImplicitCastExpr 0x13b02d068 <col:35> 'int *' <ArrayToPointerDecay>
|   |           | `-DeclRefExpr 0x13b02d028 <col:35> 'int[256]' lvalue Var 0x13b027488 'diffStat' 'int[256]'
|   |           `-IntegerLiteral 0x13b02d048 <col:44> 'int' 0
|   `-ReturnStmt 0x13b02d190 <line:56:5, col:12>
|     `-ImplicitCastExpr 0x13b02d178 <col:12> 'int' <IntegralCast>
|       `-ImplicitCastExpr 0x13b02d160 <col:12> 'unsigned long' <LValueToRValue>
|         `-DeclRefExpr 0x13b02d140 <col:12> 'unsigned long' lvalue Var 0x13b027798 'avgError' 'unsigned long'
|-FunctionDecl 0x13b027d90 <line:16:5> col:5 implicit used memset 'void *(void *, int, unsigned long)' extern
| |-ParmVarDecl 0x13b027e90 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x13b027ef8 <<invalid sloc>> <invalid sloc> 'int'
| |-ParmVarDecl 0x13b027f60 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x13b027e38 <<invalid sloc>> Implicit 900
`-FunctionDecl 0x13b02ba00 <line:27:30> col:30 implicit used abs 'int (int)' extern
  |-ParmVarDecl 0x13b02bb00 <<invalid sloc>> <invalid sloc> 'int'
  |-BuiltinAttr 0x13b02baa8 <<invalid sloc>> Implicit 998
  |-NoThrowAttr 0x13b02bb70 <col:30> Implicit
  `-ConstAttr 0x13b02bb98 <col:30> Implicit
