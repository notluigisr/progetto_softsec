TranslationUnitDecl 0x136054208 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1360550b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1360547d0 '__int128'
|-TypedefDecl 0x136055128 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1360547f0 'unsigned __int128'
|-TypedefDecl 0x13680d230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13680d000 'struct __NSConstantString_tag'
|   `-Record 0x136055180 '__NSConstantString_tag'
|-TypedefDecl 0x13680d298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x136054990 '__SVInt8_t'
|-TypedefDecl 0x13680d300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x1360549b0 '__SVInt16_t'
|-TypedefDecl 0x13680d368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x1360549d0 '__SVInt32_t'
|-TypedefDecl 0x13680d3d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x1360549f0 '__SVInt64_t'
|-TypedefDecl 0x13680d438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x136054a10 '__SVUint8_t'
|-TypedefDecl 0x13680d4a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x136054a30 '__SVUint16_t'
|-TypedefDecl 0x13680d508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x136054a50 '__SVUint32_t'
|-TypedefDecl 0x13680d570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x136054a70 '__SVUint64_t'
|-TypedefDecl 0x13680d5d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x136054a90 '__SVFloat16_t'
|-TypedefDecl 0x13680d640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x136054ab0 '__SVFloat32_t'
|-TypedefDecl 0x13680d6a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x136054ad0 '__SVFloat64_t'
|-TypedefDecl 0x13680d710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x136054af0 '__SVBfloat16_t'
|-TypedefDecl 0x13680d778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x136054b10 '__clang_svint8x2_t'
|-TypedefDecl 0x13680d7e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x136054b30 '__clang_svint16x2_t'
|-TypedefDecl 0x13680d848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x136054b50 '__clang_svint32x2_t'
|-TypedefDecl 0x13680d8b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x136054b70 '__clang_svint64x2_t'
|-TypedefDecl 0x13680d918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x136054b90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13680d980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x136054bb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13680d9e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x136054bd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13680da50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x136054bf0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13680dab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x136054c10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13680db20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x136054c30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13680db88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x136054c50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13680dbf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x136054c70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13680dc58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x136054c90 '__clang_svint8x3_t'
|-TypedefDecl 0x13680dcc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x136054cb0 '__clang_svint16x3_t'
|-TypedefDecl 0x13680dd28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x136054cd0 '__clang_svint32x3_t'
|-TypedefDecl 0x13680dd90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x136054cf0 '__clang_svint64x3_t'
|-TypedefDecl 0x13680ddf8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x136054d10 '__clang_svuint8x3_t'
|-TypedefDecl 0x13680de60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x136054d30 '__clang_svuint16x3_t'
|-TypedefDecl 0x13680dec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x136054d50 '__clang_svuint32x3_t'
|-TypedefDecl 0x13680df30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x136054d70 '__clang_svuint64x3_t'
|-TypedefDecl 0x13680df98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x136054d90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13680e800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x136054db0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13680e868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x136054dd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13680e8d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x136054df0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13680e938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x136054e10 '__clang_svint8x4_t'
|-TypedefDecl 0x13680e9a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x136054e30 '__clang_svint16x4_t'
|-TypedefDecl 0x13680ea08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x136054e50 '__clang_svint32x4_t'
|-TypedefDecl 0x13680ea70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x136054e70 '__clang_svint64x4_t'
|-TypedefDecl 0x13680ead8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x136054e90 '__clang_svuint8x4_t'
|-TypedefDecl 0x13680eb40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x136054eb0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13680eba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x136054ed0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13680ec10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x136054ef0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13680ec78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x136054f10 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13680ece0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x136054f30 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13680ed48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x136054f50 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13680edb0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x136054f70 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13680ee18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x136054f90 '__SVBool_t'
|-TypedefDecl 0x13680ee80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x136054fb0 '__clang_svboolx2_t'
|-TypedefDecl 0x13680eee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x136054fd0 '__clang_svboolx4_t'
|-TypedefDecl 0x13680ef50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x136054ff0 '__SVCount_t'
|-TypedefDecl 0x13680eff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13680efb0 'char *'
|   `-BuiltinType 0x1360542b0 'char'
|-TypedefDecl 0x13680f068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13680efb0 'char *'
|   `-BuiltinType 0x1360542b0 'char'
`-FunctionDecl 0x13680f568 <dataset_diviso_filec/func14547_vuln.c:1:1, line:66:1> line:1:12 invalid asn1_template_ex_d2i 'int (int **, const unsigned char **, long, const int *, char, int *)' static
  |-ParmVarDecl 0x13680f160 <col:33, col:46> col:46 invalid val 'int **'
  |-ParmVarDecl 0x13680f250 <line:2:33, col:55> col:55 used in 'const unsigned char **'
  |-ParmVarDecl 0x13680f2d0 <col:59, col:64> col:64 used inlen 'long'
  |-ParmVarDecl 0x13680f350 <line:3:33, col:54> col:54 invalid tt 'const int *'
  |-ParmVarDecl 0x13680f3c8 <col:58, col:63> col:63 used opt 'char'
  |-ParmVarDecl 0x13680f448 <line:4:33, col:43> col:43 invalid ctx 'int *'
  `-CompoundStmt 0x140009ad0 <line:5:1, line:66:1>
    |-DeclStmt 0x13680f758 <line:6:5, col:22>
    | |-VarDecl 0x13680f658 <col:5, col:9> col:9 used flags 'int'
    | `-VarDecl 0x13680f6d8 <col:5, col:16> col:16 used aclass 'int'
    |-DeclStmt 0x136828800 <line:7:5, col:12>
    | `-VarDecl 0x13680f788 <col:5, col:9> col:9 used ret 'int'
    |-DeclStmt 0x136828898 <line:8:5, col:13>
    | `-VarDecl 0x136828830 <col:5, col:10> col:10 used len 'long'
    |-DeclStmt 0x1368289c8 <line:9:5, col:31>
    | |-VarDecl 0x1368288c8 <col:5, col:26> col:26 used p 'const unsigned char *'
    | `-VarDecl 0x136828948 <col:5, col:30> col:30 used q 'const unsigned char *'
    |-DeclStmt 0x136828a58 <line:10:5, col:17>
    | `-VarDecl 0x1368289f0 <col:5, col:10> col:10 used exp_eoc 'char'
    |-IfStmt 0x136828af0 <line:11:5, line:12:16>
    | |-UnaryOperator 0x136828aa8 <line:11:9, col:10> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x136828a90 <col:10> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x136828a70 <col:10> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x136828ae0 <line:12:9, col:16>
    |   `-IntegerLiteral 0x136828ac0 <col:16> 'int' 0
    |-BinaryOperator 0x136828b98 <line:13:5, col:17> 'int' contains-errors '='
    | |-DeclRefExpr 0x136828b10 <col:5> 'int' lvalue Var 0x13680f658 'flags' 'int'
    | `-CXXDependentScopeMemberExpr 0x136828b50 <col:13, col:17> '<dependent type>' contains-errors lvalue ->flags
    |   `-RecoveryExpr 0x136828b30 <col:13> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x136828c90 <line:14:5, col:22> 'int' contains-errors '='
    | |-DeclRefExpr 0x136828bb8 <col:5> 'int' lvalue Var 0x13680f6d8 'aclass' 'int'
    | `-BinaryOperator 0x136828c70 <col:14, col:22> '<dependent type>' contains-errors '&'
    |   |-DeclRefExpr 0x136828bd8 <col:14> 'int' lvalue Var 0x13680f658 'flags' 'int'
    |   `-RecoveryExpr 0x136828c50 <col:22> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x136828d38 <line:16:5, col:10> 'const unsigned char *' '='
    | |-DeclRefExpr 0x136828cb0 <col:5> 'const unsigned char *' lvalue Var 0x1368288c8 'p' 'const unsigned char *'
    | `-ImplicitCastExpr 0x136828d20 <col:9, col:10> 'const unsigned char *' <LValueToRValue>
    |   `-UnaryOperator 0x136828d08 <col:9, col:10> 'const unsigned char *' lvalue prefix '*' cannot overflow
    |     `-ImplicitCastExpr 0x136828cf0 <col:10> 'const unsigned char **' <LValueToRValue>
    |       `-DeclRefExpr 0x136828cd0 <col:10> 'const unsigned char **' lvalue ParmVar 0x13680f250 'in' 'const unsigned char **'
    |-IfStmt 0x140009808 <line:19:5, line:58:68> has_else
    | |-BinaryOperator 0x136828dd0 <line:19:9, col:17> '<dependent type>' contains-errors '&'
    | | |-DeclRefExpr 0x136828d58 <col:9> 'int' lvalue Var 0x13680f658 'flags' 'int'
    | | `-RecoveryExpr 0x136828db0 <col:17> '<dependent type>' contains-errors lvalue
    | |-CompoundStmt 0x140009670 <col:35, line:57:5>
    | | |-DeclStmt 0x136828e68 <line:20:9, col:17>
    | | | `-VarDecl 0x136828e00 <col:9, col:14> col:14 used cst 'char'
    | | |-BinaryOperator 0x136829398 <line:22:9, line:23:67> 'int' contains-errors '='
    | | | |-DeclRefExpr 0x136828e80 <line:22:9> 'int' lvalue Var 0x13680f788 'ret' 'int'
    | | | `-CallExpr 0x136829320 <col:15, line:23:67> '<dependent type>' contains-errors
    | | |   |-DeclRefExpr 0x136829000 <line:22:15> 'int ()' Function 0x136828f48 'asn1_check_tlen' 'int ()'
    | | |   |-UnaryOperator 0x136829070 <col:31, col:32> 'long *' prefix '&' cannot overflow
    | | |   | `-DeclRefExpr 0x136829020 <col:32> 'long' lvalue Var 0x136828830 'len' 'long'
    | | |   |-RecoveryExpr 0x1368292e0 <col:37> '<dependent type>' contains-errors lvalue
    | | |   |-RecoveryExpr 0x136829300 <col:43> '<dependent type>' contains-errors lvalue
    | | |   |-UnaryOperator 0x1368290d8 <col:49, col:50> 'char *' prefix '&' cannot overflow
    | | |   | `-DeclRefExpr 0x1368290b8 <col:50> 'char' lvalue Var 0x1368289f0 'exp_eoc' 'char'
    | | |   |-UnaryOperator 0x136829110 <col:59, col:60> 'char *' prefix '&' cannot overflow
    | | |   | `-DeclRefExpr 0x1368290f0 <col:60> 'char' lvalue Var 0x136828e00 'cst' 'char'
    | | |   |-UnaryOperator 0x136829148 <line:23:31, col:32> 'const unsigned char **' prefix '&' cannot overflow
    | | |   | `-DeclRefExpr 0x136829128 <col:32> 'const unsigned char *' lvalue Var 0x1368288c8 'p' 'const unsigned char *'
    | | |   |-DeclRefExpr 0x136829160 <col:35> 'long' lvalue ParmVar 0x13680f2d0 'inlen' 'long'
    | | |   |-CXXDependentScopeMemberExpr 0x1368291a0 <col:42, col:46> '<dependent type>' contains-errors lvalue ->tag
    | | |   | `-RecoveryExpr 0x136829180 <col:42> '<dependent type>' contains-errors lvalue
    | | |   |-DeclRefExpr 0x1368291e8 <col:51> 'int' lvalue Var 0x13680f6d8 'aclass' 'int'
    | | |   |-DeclRefExpr 0x136829208 <col:59> 'char' lvalue ParmVar 0x13680f3c8 'opt' 'char'
    | | |   `-RecoveryExpr 0x136829228 <col:64> '<dependent type>' contains-errors lvalue
    | | |-BinaryOperator 0x136829410 <line:24:9, col:13> 'const unsigned char *' '='
    | | | |-DeclRefExpr 0x1368293b8 <col:9> 'const unsigned char *' lvalue Var 0x136828948 'q' 'const unsigned char *'
    | | | `-ImplicitCastExpr 0x1368293f8 <col:13> 'const unsigned char *' <LValueToRValue>
    | | |   `-DeclRefExpr 0x1368293d8 <col:13> 'const unsigned char *' lvalue Var 0x1368288c8 'p' 'const unsigned char *'
    | | |-IfStmt 0x136829798 <line:25:9, line:29:21> has_else
    | | | |-UnaryOperator 0x136829468 <line:25:13, col:14> 'int' prefix '!' cannot overflow
    | | | | `-ImplicitCastExpr 0x136829450 <col:14> 'int' <LValueToRValue>
    | | | |   `-DeclRefExpr 0x136829430 <col:14> 'int' lvalue Var 0x13680f788 'ret' 'int'
    | | | |-CompoundStmt 0x136829680 <col:19, line:28:9>
    | | | | |-CallExpr 0x136829620 <line:26:13, col:73> '<dependent type>' contains-errors
    | | | | | |-DeclRefExpr 0x136829560 <col:13> 'int ()' Function 0x1368294a8 'ASN1err' 'int ()'
    | | | | | |-RecoveryExpr 0x1368295e0 <col:21> '<dependent type>' contains-errors lvalue
    | | | | | `-RecoveryExpr 0x136829600 <col:50> '<dependent type>' contains-errors lvalue
    | | | | `-ReturnStmt 0x136829670 <line:27:13, col:20>
    | | | |   `-IntegerLiteral 0x136829650 <col:20> 'int' 0
    | | | `-IfStmt 0x136829778 <line:28:16, line:29:21>
    | | |   |-BinaryOperator 0x136829710 <line:28:20, col:28> 'int' '=='
    | | |   | |-ImplicitCastExpr 0x1368296f8 <col:20> 'int' <LValueToRValue>
    | | |   | | `-DeclRefExpr 0x1368296a0 <col:20> 'int' lvalue Var 0x13680f788 'ret' 'int'
    | | |   | `-UnaryOperator 0x1368296e0 <col:27, col:28> 'int' prefix '-'
    | | |   |   `-IntegerLiteral 0x1368296c0 <col:28> 'int' 1
    | | |   `-ReturnStmt 0x136829768 <line:29:13, col:21>
    | | |     `-UnaryOperator 0x136829750 <col:20, col:21> 'int' prefix '-'
    | | |       `-IntegerLiteral 0x136829730 <col:21> 'int' 1
    | | |-IfStmt 0x140008d58 <line:30:9, line:34:9>
    | | | |-UnaryOperator 0x140008c00 <line:30:13, col:14> 'int' prefix '!' cannot overflow
    | | | | `-ImplicitCastExpr 0x1368297e8 <col:14> 'char' <LValueToRValue>
    | | | |   `-DeclRefExpr 0x1368297c8 <col:14> 'char' lvalue Var 0x136828e00 'cst' 'char'
    | | | `-CompoundStmt 0x140008d38 <col:19, line:34:9>
    | | |   |-CallExpr 0x140008cd8 <line:31:13, line:32:56> '<dependent type>' contains-errors
    | | |   | |-DeclRefExpr 0x140008c18 <line:31:13> 'int ()' Function 0x1368294a8 'ASN1err' 'int ()'
    | | |   | |-RecoveryExpr 0x140008c98 <col:21> '<dependent type>' contains-errors lvalue
    | | |   | `-RecoveryExpr 0x140008cb8 <line:32:21> '<dependent type>' contains-errors lvalue
    | | |   `-ReturnStmt 0x140008d28 <line:33:13, col:20>
    | | |     `-IntegerLiteral 0x140008d08 <col:20> 'int' 0
    | | |-BinaryOperator 0x140008fc0 <line:36:9, col:63> 'int' contains-errors '='
    | | | |-DeclRefExpr 0x140008d78 <col:9> 'int' lvalue Var 0x13680f788 'ret' 'int'
    | | | `-CallExpr 0x140008f70 <col:15, col:63> '<dependent type>' contains-errors
    | | |   |-DeclRefExpr 0x140008e78 <col:15> 'int ()' Function 0x140008dc0 'asn1_template_noexp_d2i' 'int ()'
    | | |   |-RecoveryExpr 0x140008e98 <col:39> '<dependent type>' contains-errors lvalue
    | | |   |-UnaryOperator 0x140008ed8 <col:44, col:45> 'const unsigned char **' prefix '&' cannot overflow
    | | |   | `-DeclRefExpr 0x140008eb8 <col:45> 'const unsigned char *' lvalue Var 0x1368288c8 'p' 'const unsigned char *'
    | | |   |-DeclRefExpr 0x140008ef0 <col:48> 'long' lvalue Var 0x136828830 'len' 'long'
    | | |   |-RecoveryExpr 0x140008f10 <col:53> '<dependent type>' contains-errors lvalue
    | | |   |-IntegerLiteral 0x140008f30 <col:57> 'int' 0
    | | |   `-RecoveryExpr 0x140008f50 <col:60> '<dependent type>' contains-errors lvalue
    | | |-IfStmt 0x140009170 <line:37:9, line:40:9>
    | | | |-UnaryOperator 0x140009018 <line:37:13, col:14> 'int' prefix '!' cannot overflow
    | | | | `-ImplicitCastExpr 0x140009000 <col:14> 'int' <LValueToRValue>
    | | | |   `-DeclRefExpr 0x140008fe0 <col:14> 'int' lvalue Var 0x13680f788 'ret' 'int'
    | | | `-CompoundStmt 0x140009150 <col:19, line:40:9>
    | | |   |-CallExpr 0x1400090f0 <line:38:13, col:73> '<dependent type>' contains-errors
    | | |   | |-DeclRefExpr 0x140009030 <col:13> 'int ()' Function 0x1368294a8 'ASN1err' 'int ()'
    | | |   | |-RecoveryExpr 0x1400090b0 <col:21> '<dependent type>' contains-errors lvalue
    | | |   | `-RecoveryExpr 0x1400090d0 <col:50> '<dependent type>' contains-errors lvalue
    | | |   `-ReturnStmt 0x140009140 <line:39:13, col:20>
    | | |     `-IntegerLiteral 0x140009120 <col:20> 'int' 0
    | | |-CompoundAssignOperator 0x140009240 <line:42:9, col:20> 'long' '-=' ComputeLHSTy='long' ComputeResultTy='long'
    | | | |-DeclRefExpr 0x140009190 <col:9> 'long' lvalue Var 0x136828830 'len' 'long'
    | | | `-BinaryOperator 0x140009220 <col:16, col:20> 'long' '-'
    | | |   |-ImplicitCastExpr 0x1400091f0 <col:16> 'const unsigned char *' <LValueToRValue>
    | | |   | `-DeclRefExpr 0x1400091b0 <col:16> 'const unsigned char *' lvalue Var 0x1368288c8 'p' 'const unsigned char *'
    | | |   `-ImplicitCastExpr 0x140009208 <col:20> 'const unsigned char *' <LValueToRValue>
    | | |     `-DeclRefExpr 0x1400091d0 <col:20> 'const unsigned char *' lvalue Var 0x136828948 'q' 'const unsigned char *'
    | | `-IfStmt 0x140009640 <line:43:9, line:56:9> has_else
    | |   |-ImplicitCastExpr 0x140009290 <line:43:13> 'char' <LValueToRValue>
    | |   | `-DeclRefExpr 0x140009270 <col:13> 'char' lvalue Var 0x1368289f0 'exp_eoc' 'char'
    | |   |-CompoundStmt 0x140009568 <col:22, line:49:9>
    | |   | `-IfStmt 0x140009548 <line:45:13, line:48:13>
    | |   |   |-UnaryOperator 0x140009490 <line:45:17, col:40> 'int' prefix '!' cannot overflow
    | |   |   | `-CallExpr 0x140009448 <col:18, col:40> 'int'
    | |   |   |   |-ImplicitCastExpr 0x140009430 <col:18> 'int (*)()' <FunctionToPointerDecay>
    | |   |   |   | `-DeclRefExpr 0x140009388 <col:18> 'int ()' Function 0x1400092d0 'asn1_check_eoc' 'int ()'
    | |   |   |   |-UnaryOperator 0x1400093c8 <col:33, col:34> 'const unsigned char **' prefix '&' cannot overflow
    | |   |   |   | `-DeclRefExpr 0x1400093a8 <col:34> 'const unsigned char *' lvalue Var 0x1368288c8 'p' 'const unsigned char *'
    | |   |   |   `-ImplicitCastExpr 0x140009478 <col:37> 'long' <LValueToRValue>
    | |   |   |     `-DeclRefExpr 0x1400093e0 <col:37> 'long' lvalue Var 0x136828830 'len' 'long'
    | |   |   `-CompoundStmt 0x140009530 <col:43, line:48:13>
    | |   |     `-GotoStmt 0x140009518 <line:47:17, col:22> 'err' 0x1400094c8
    | |   `-CompoundStmt 0x140009628 <line:49:16, line:56:9>
    | |     `-IfStmt 0x140009608 <line:51:13, line:55:13>
    | |       |-ImplicitCastExpr 0x1400095a0 <line:51:17> 'long' <LValueToRValue>
    | |       | `-DeclRefExpr 0x140009580 <col:17> 'long' lvalue Var 0x136828830 'len' 'long'
    | |       `-CompoundStmt 0x1400095f0 <col:22, line:55:13>
    | |         `-GotoStmt 0x1400095d8 <line:54:17, col:22> 'err' 0x1400094c8
    | `-ReturnStmt 0x1400097f8 <line:58:9, col:68>
    |   `-CallExpr 0x1400097a8 <col:16, col:68> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x1400096c8 <col:16> 'int ()' Function 0x140008dc0 'asn1_template_noexp_d2i' 'int ()'
    |     |-RecoveryExpr 0x1400096e8 <col:40> '<dependent type>' contains-errors lvalue
    |     |-DeclRefExpr 0x140009708 <col:45> 'const unsigned char **' lvalue ParmVar 0x13680f250 'in' 'const unsigned char **'
    |     |-DeclRefExpr 0x140009728 <col:49> 'long' lvalue ParmVar 0x13680f2d0 'inlen' 'long'
    |     |-RecoveryExpr 0x140009748 <col:56> '<dependent type>' contains-errors lvalue
    |     |-DeclRefExpr 0x140009768 <col:60> 'char' lvalue ParmVar 0x13680f3c8 'opt' 'char'
    |     `-RecoveryExpr 0x140009788 <col:65> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x1400098c0 <line:60:5, col:11> 'const unsigned char *' '='
    | |-UnaryOperator 0x140009870 <col:5, col:6> 'const unsigned char *' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x140009858 <col:6> 'const unsigned char **' <LValueToRValue>
    | |   `-DeclRefExpr 0x140009838 <col:6> 'const unsigned char **' lvalue ParmVar 0x13680f250 'in' 'const unsigned char **'
    | `-ImplicitCastExpr 0x1400098a8 <col:11> 'const unsigned char *' <LValueToRValue>
    |   `-DeclRefExpr 0x140009888 <col:11> 'const unsigned char *' lvalue Var 0x1368288c8 'p' 'const unsigned char *'
    |-ReturnStmt 0x140009900 <line:61:5, col:12>
    | `-IntegerLiteral 0x1400098e0 <col:12> 'int' 1
    |-LabelStmt 0x140009a80 <line:63:2, line:64:31> 'err'
    | `-CallExpr 0x140009a50 <col:5, col:31> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x1400099f0 <col:5> 'int ()' Function 0x140009938 'ASN1_template_free' 'int ()'
    |   |-RecoveryExpr 0x140009a10 <col:24> '<dependent type>' contains-errors lvalue
    |   `-RecoveryExpr 0x140009a30 <col:29> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x140009ac0 <line:65:5, col:12>
      `-IntegerLiteral 0x140009aa0 <col:12> 'int' 0
