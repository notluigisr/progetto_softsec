TranslationUnitDecl 0x159855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1598564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x159855bd0 '__int128'
|-TypedefDecl 0x159856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x159855bf0 'unsigned __int128'
|-TypedefDecl 0x159926630 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x159926400 'struct __NSConstantString_tag'
|   `-Record 0x159856580 '__NSConstantString_tag'
|-TypedefDecl 0x159926698 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x159855d90 '__SVInt8_t'
|-TypedefDecl 0x159926700 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x159855db0 '__SVInt16_t'
|-TypedefDecl 0x159926768 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x159855dd0 '__SVInt32_t'
|-TypedefDecl 0x1599267d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x159855df0 '__SVInt64_t'
|-TypedefDecl 0x159926838 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x159855e10 '__SVUint8_t'
|-TypedefDecl 0x1599268a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x159855e30 '__SVUint16_t'
|-TypedefDecl 0x159926908 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x159855e50 '__SVUint32_t'
|-TypedefDecl 0x159926970 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x159855e70 '__SVUint64_t'
|-TypedefDecl 0x1599269d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x159855e90 '__SVFloat16_t'
|-TypedefDecl 0x159926a40 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x159855eb0 '__SVFloat32_t'
|-TypedefDecl 0x159926aa8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x159855ed0 '__SVFloat64_t'
|-TypedefDecl 0x159926b10 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x159855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x159926b78 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x159855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x159926be0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x159855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x159926c48 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x159855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x159926cb0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x159855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x159926d18 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x159855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x159926d80 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x159855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x159926de8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x159855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x159926e50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x159855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x159926eb8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x159856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x159926f20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x159856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x159926f88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x159856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x159926ff0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x159856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x159927058 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x159856090 '__clang_svint8x3_t'
|-TypedefDecl 0x1599270c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1598560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x159927128 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1598560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x159927190 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1598560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x1599271f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x159856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x159927260 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x159856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x1599272c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x159856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x159927330 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x159856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x159927398 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x159856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x159927c00 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1598561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x159927c68 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1598561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x159927cd0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1598561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x159927d38 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x159856210 '__clang_svint8x4_t'
|-TypedefDecl 0x159927da0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x159856230 '__clang_svint16x4_t'
|-TypedefDecl 0x159927e08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x159856250 '__clang_svint32x4_t'
|-TypedefDecl 0x159927e70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x159856270 '__clang_svint64x4_t'
|-TypedefDecl 0x159927ed8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x159856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x159927f40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1598562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x159927fa8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1598562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x159928010 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1598562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x159928078 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x159856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x1599280e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x159856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x159928148 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x159856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x1599281b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x159856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x159928218 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x159856390 '__SVBool_t'
|-TypedefDecl 0x159928280 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1598563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x1599282e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1598563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x159928350 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1598563f0 '__SVCount_t'
|-TypedefDecl 0x1599283f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1599283b0 'char *'
|   `-BuiltinType 0x1598556b0 'char'
|-TypedefDecl 0x159928468 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1599283b0 'char *'
|   `-BuiltinType 0x1598556b0 'char'
|-FunctionDecl 0x1599286c8 <dataset_diviso_filec/func10666_vuln.c:1:1, line:56:1> line:1:1 tabstop_set 'int (char *, int **)'
| |-ParmVarDecl 0x1599284f0 <col:13, col:21> col:21 used var 'char *'
| |-ParmVarDecl 0x1599285e0 <col:26, col:32> col:32 used array 'int **'
| `-CompoundStmt 0x159946928 <line:2:1, line:56:1>
|   |-DeclStmt 0x159928868 <line:3:5, col:21>
|   | `-VarDecl 0x1599287e0 <col:5, col:20> col:9 used valcount 'int' cinit
|   |   `-IntegerLiteral 0x159928848 <col:20> 'int' 1
|   |-DeclStmt 0x159928900 <line:4:5, col:10>
|   | `-VarDecl 0x159928898 <col:5, col:9> col:9 used t 'int'
|   |-DeclStmt 0x159928998 <line:5:5, col:15>
|   | `-VarDecl 0x159928930 <col:5, col:13> col:13 used cp 'char *'
|   |-IfStmt 0x1599410c8 <line:7:5, line:11:5>
|   | |-RecoveryExpr 0x159940f18 <line:7:9, col:57> '_Bool' contains-errors
|   | `-CompoundStmt 0x1599410a8 <line:8:5, line:11:5>
|   |   |-BinaryOperator 0x159941040 <line:9:2, col:11> 'int *' contains-errors '='
|   |   | |-UnaryOperator 0x159941008 <col:2, col:3> 'int *' lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x159940ff0 <col:3> 'int **' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x159940f38 <col:3> 'int **' lvalue ParmVar 0x1599285e0 'array' 'int **'
|   |   | `-RecoveryExpr 0x159941020 <col:11> '<dependent type>' contains-errors lvalue
|   |   `-ReturnStmt 0x159941098 <line:10:2, col:9>
|   |     `-RecoveryExpr 0x159941078 <col:9> '<dependent type>' contains-errors lvalue
|   |-ForStmt 0x159945f48 <line:13:5, line:38:5>
|   | |-BinaryOperator 0x159941140 <line:13:10, col:15> 'char *' '='
|   | | |-DeclRefExpr 0x1599410e8 <col:10> 'char *' lvalue Var 0x159928930 'cp' 'char *'
|   | | `-ImplicitCastExpr 0x159941128 <col:15> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x159941108 <col:15> 'char *' lvalue ParmVar 0x1599284f0 'var' 'char *'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x159941268 <col:20, col:27> 'int' contains-errors '!='
|   | | |-UnaryOperator 0x159941230 <col:20, col:21> 'char' lvalue prefix '*' cannot overflow
|   | | | `-ImplicitCastExpr 0x159941218 <col:21> 'char *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x159941160 <col:21> 'char *' lvalue Var 0x159928930 'cp' 'char *'
|   | | `-RecoveryExpr 0x159941248 <col:27> '<dependent type>' contains-errors lvalue
|   | |-UnaryOperator 0x1599412a8 <col:32, col:34> 'char *' prefix '++'
|   | | `-DeclRefExpr 0x159941288 <col:34> 'char *' lvalue Var 0x159928930 'cp' 'char *'
|   | `-CompoundStmt 0x159945f18 <line:14:5, line:38:5>
|   |   |-IfStmt 0x1599433a8 <line:15:2, line:27:2>
|   |   | |-BinaryOperator 0x159941448 <line:15:6, col:29> 'int' '||'
|   |   | | |-BinaryOperator 0x159941330 <col:6, col:12> 'int' '=='
|   |   | | | |-ImplicitCastExpr 0x159941300 <col:6> 'char *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x1599412c0 <col:6> 'char *' lvalue Var 0x159928930 'cp' 'char *'
|   |   | | | `-ImplicitCastExpr 0x159941318 <col:12> 'char *' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x1599412e0 <col:12> 'char *' lvalue ParmVar 0x1599284f0 'var' 'char *'
|   |   | | `-BinaryOperator 0x159941428 <col:19, col:29> 'int' '=='
|   |   | |   |-ImplicitCastExpr 0x159941410 <col:19, col:24> 'int' <IntegralCast>
|   |   | |   | `-ImplicitCastExpr 0x1599413f8 <col:19, col:24> 'char' <LValueToRValue>
|   |   | |   |   `-ArraySubscriptExpr 0x1599413c0 <col:19, col:24> 'char' lvalue
|   |   | |   |     |-ImplicitCastExpr 0x1599413a8 <col:19> 'char *' <LValueToRValue>
|   |   | |   |     | `-DeclRefExpr 0x159941350 <col:19> 'char *' lvalue Var 0x159928930 'cp' 'char *'
|   |   | |   |     `-UnaryOperator 0x159941390 <col:22, col:23> 'int' prefix '-'
|   |   | |   |       `-IntegerLiteral 0x159941370 <col:23> 'int' 1
|   |   | |   `-CharacterLiteral 0x1599413e0 <col:29> 'int' 44
|   |   | `-CompoundStmt 0x159943388 <line:16:2, line:27:2>
|   |   |   |-DeclStmt 0x1599414e8 <line:17:6, col:17>
|   |   |   | `-VarDecl 0x159941480 <col:6, col:14> col:14 used end 'char *'
|   |   |   `-IfStmt 0x159943368 <line:19:6, line:26:6>
|   |   |     |-BinaryOperator 0x159942e00 <line:19:10, col:51> 'int' '<='
|   |   |     | |-CallExpr 0x159941d68 <col:10, col:46> 'long'
|   |   |     | | |-ImplicitCastExpr 0x159941d50 <col:10> 'long (*)(const char *, char **, int)' <FunctionToPointerDecay>
|   |   |     | | | `-DeclRefExpr 0x159941bf0 <col:10> 'long (const char *, char **, int)' Function 0x1599419a0 'strtol' 'long (const char *, char **, int)'
|   |   |     | | |-ImplicitCastExpr 0x159941da0 <col:17, col:25> 'const char *' <NoOp>
|   |   |     | | | `-CStyleCastExpr 0x159941c60 <col:17, col:25> 'char *' <NoOp>
|   |   |     | | |   `-ImplicitCastExpr 0x159941c48 <col:25> 'char *' <LValueToRValue> part_of_explicit_cast
|   |   |     | | |     `-DeclRefExpr 0x159941c10 <col:25> 'char *' lvalue Var 0x159928930 'cp' 'char *'
|   |   |     | | |-CStyleCastExpr 0x159941cd8 <col:29, col:39> 'char **' <NoOp>
|   |   |     | | | `-UnaryOperator 0x159941ca8 <col:38, col:39> 'char **' prefix '&' cannot overflow
|   |   |     | | |   `-DeclRefExpr 0x159941c88 <col:39> 'char *' lvalue Var 0x159941480 'end' 'char *'
|   |   |     | | `-IntegerLiteral 0x159941d00 <col:44> 'int' 10
|   |   |     | `-ImplicitCastExpr 0x159941dd8 <col:51> 'long' <IntegralCast>
|   |   |     |   `-IntegerLiteral 0x159941db8 <col:51> 'int' 0
|   |   |     `-CompoundStmt 0x159943348 <line:20:6, line:26:6>
|   |   |       |-IfStmt 0x1599432d0 <line:21:3, line:24:23> has_else
|   |   |       | |-BinaryOperator 0x159942e90 <line:21:7, col:13> 'int' '!='
|   |   |       | | |-ImplicitCastExpr 0x159942e60 <col:7> 'char *' <LValueToRValue>
|   |   |       | | | `-DeclRefExpr 0x159942e20 <col:7> 'char *' lvalue Var 0x159928930 'cp' 'char *'
|   |   |       | | `-ImplicitCastExpr 0x159942e78 <col:13> 'char *' <LValueToRValue>
|   |   |       | |   `-DeclRefExpr 0x159942e40 <col:13> 'char *' lvalue Var 0x159941480 'end' 'char *'
|   |   |       | |-CallExpr 0x159943190 <line:22:7, col:25> '<dependent type>' contains-errors
|   |   |       | | |-DeclRefExpr 0x159942fc0 <col:7> 'int ()' Function 0x159942f08 'emsg' 'int ()'
|   |   |       | | `-CallExpr 0x159943168 <col:12, col:24> '<dependent type>' contains-errors
|   |   |       | |   |-DeclRefExpr 0x1599430c0 <col:12> 'int ()' Function 0x159943008 '_' 'int ()'
|   |   |       | |   `-RecoveryExpr 0x159943148 <col:14> '<dependent type>' contains-errors lvalue
|   |   |       | `-CallExpr 0x1599432a8 <line:24:7, col:23> '<dependent type>' contains-errors
|   |   |       |   |-DeclRefExpr 0x1599431b8 <col:7> 'int ()' Function 0x159942f08 'emsg' 'int ()'
|   |   |       |   `-CallExpr 0x159943280 <col:12, col:22> '<dependent type>' contains-errors
|   |   |       |     |-DeclRefExpr 0x1599431d8 <col:12> 'int ()' Function 0x159943008 '_' 'int ()'
|   |   |       |     `-RecoveryExpr 0x159943260 <col:14> '<dependent type>' contains-errors lvalue
|   |   |       `-ReturnStmt 0x159943338 <line:25:3, col:10>
|   |   |         `-RecoveryExpr 0x159943318 <col:10> '<dependent type>' contains-errors lvalue
|   |   |-IfStmt 0x1599435c8 <line:29:2, line:30:6>
|   |   | |-CallExpr 0x159943568 <line:29:6, col:21> 'int'
|   |   | | |-ImplicitCastExpr 0x159943550 <col:6> 'int (*)()' <FunctionToPointerDecay>
|   |   | | | `-DeclRefExpr 0x1599434a8 <col:6> 'int ()' Function 0x1599433f0 'VIM_ISDIGIT' 'int ()'
|   |   | | `-ImplicitCastExpr 0x1599435a8 <col:18, col:19> 'int' <IntegralCast>
|   |   | |   `-ImplicitCastExpr 0x159943590 <col:18, col:19> 'char' <LValueToRValue>
|   |   | |     `-UnaryOperator 0x159943500 <col:18, col:19> 'char' lvalue prefix '*' cannot overflow
|   |   | |       `-ImplicitCastExpr 0x1599434e8 <col:19> 'char *' <LValueToRValue>
|   |   | |         `-DeclRefExpr 0x1599434c8 <col:19> 'char *' lvalue Var 0x159928930 'cp' 'char *'
|   |   | `-ContinueStmt 0x1599435c0 <line:30:6>
|   |   |-IfStmt 0x159943dd0 <line:31:2, line:35:2>
|   |   | |-BinaryOperator 0x159943d50 <line:31:6, col:60> 'int' contains-errors '&&'
|   |   | | |-BinaryOperator 0x159943cb8 <col:6, col:44> 'int' '&&'
|   |   | | | |-BinaryOperator 0x159943c10 <col:6, col:27> 'int' '&&'
|   |   | | | | |-BinaryOperator 0x159943ba0 <col:6, col:15> 'int' '=='
|   |   | | | | | |-ImplicitCastExpr 0x159943b88 <col:6, col:10> 'int' <IntegralCast>
|   |   | | | | | | `-ImplicitCastExpr 0x159943b70 <col:6, col:10> 'char' <LValueToRValue>
|   |   | | | | | |   `-ArraySubscriptExpr 0x159943b50 <col:6, col:10> 'char' lvalue
|   |   | | | | | |     |-ImplicitCastExpr 0x159943b38 <col:6> 'char *' <LValueToRValue>
|   |   | | | | | |     | `-DeclRefExpr 0x1599435e8 <col:6> 'char *' lvalue Var 0x159928930 'cp' 'char *'
|   |   | | | | | |     `-IntegerLiteral 0x159943608 <col:9> 'int' 0
|   |   | | | | | `-CharacterLiteral 0x159943660 <col:15> 'int' 44
|   |   | | | | `-BinaryOperator 0x159943bf0 <col:22, col:27> 'int' '>'
|   |   | | | |   |-ImplicitCastExpr 0x159943bc0 <col:22> 'char *' <LValueToRValue>
|   |   | | | |   | `-DeclRefExpr 0x1599436c8 <col:22> 'char *' lvalue Var 0x159928930 'cp' 'char *'
|   |   | | | |   `-ImplicitCastExpr 0x159943bd8 <col:27> 'char *' <LValueToRValue>
|   |   | | | |     `-DeclRefExpr 0x1599436e8 <col:27> 'char *' lvalue ParmVar 0x1599284f0 'var' 'char *'
|   |   | | | `-BinaryOperator 0x159943c98 <col:34, col:44> 'int' '!='
|   |   | | |   |-ImplicitCastExpr 0x159943c80 <col:34, col:39> 'int' <IntegralCast>
|   |   | | |   | `-ImplicitCastExpr 0x159943c68 <col:34, col:39> 'char' <LValueToRValue>
|   |   | | |   |   `-ArraySubscriptExpr 0x159943c48 <col:34, col:39> 'char' lvalue
|   |   | | |   |     |-ImplicitCastExpr 0x159943c30 <col:34> 'char *' <LValueToRValue>
|   |   | | |   |     | `-DeclRefExpr 0x159943778 <col:34> 'char *' lvalue Var 0x159928930 'cp' 'char *'
|   |   | | |   |     `-UnaryOperator 0x1599437b8 <col:37, col:38> 'int' prefix '-'
|   |   | | |   |       `-IntegerLiteral 0x159943798 <col:38> 'int' 1
|   |   | | |   `-CharacterLiteral 0x159943808 <col:44> 'int' 44
|   |   | | `-BinaryOperator 0x159943d30 <col:51, col:60> 'int' contains-errors '!='
|   |   | |   |-ArraySubscriptExpr 0x159943cf0 <col:51, col:55> 'char' lvalue
|   |   | |   | |-ImplicitCastExpr 0x159943cd8 <col:51> 'char *' <LValueToRValue>
|   |   | |   | | `-DeclRefExpr 0x159943890 <col:51> 'char *' lvalue Var 0x159928930 'cp' 'char *'
|   |   | |   | `-IntegerLiteral 0x1599438b0 <col:54> 'int' 1
|   |   | |   `-RecoveryExpr 0x159943d10 <col:60> '<dependent type>' contains-errors lvalue
|   |   | `-CompoundStmt 0x159943db0 <line:32:2, line:35:2>
|   |   |   |-UnaryOperator 0x159943d90 <line:33:6, col:8> 'int' prefix '++'
|   |   |   | `-DeclRefExpr 0x159943d70 <col:8> 'int' lvalue Var 0x1599287e0 'valcount' 'int'
|   |   |   `-ContinueStmt 0x159943da8 <line:34:6>
|   |   `-CallExpr 0x159945ef0 <line:36:2, col:18> '<dependent type>' contains-errors
|   |     |-DeclRefExpr 0x159945e00 <col:2> 'int ()' Function 0x159942f08 'emsg' 'int ()'
|   |     `-CallExpr 0x159945ec8 <col:7, col:17> '<dependent type>' contains-errors
|   |       |-DeclRefExpr 0x159945e20 <col:7> 'int ()' Function 0x159943008 '_' 'int ()'
|   |       `-RecoveryExpr 0x159945ea8 <col:9> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x1599462b8 <line:43:5, col:19> 'int' '='
|   | |-ArraySubscriptExpr 0x159946260 <col:5, col:15> 'int' lvalue
|   | | |-ImplicitCastExpr 0x159946248 <col:5, col:12> 'int *' <LValueToRValue>
|   | | | `-ParenExpr 0x159946208 <col:5, col:12> 'int *' lvalue
|   | | |   `-UnaryOperator 0x1599461f0 <col:6, col:7> 'int *' lvalue prefix '*' cannot overflow
|   | | |     `-ImplicitCastExpr 0x1599461d8 <col:7> 'int **' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x1599461b8 <col:7> 'int **' lvalue ParmVar 0x1599285e0 'array' 'int **'
|   | | `-IntegerLiteral 0x159946228 <col:14> 'int' 0
|   | `-ImplicitCastExpr 0x1599462a0 <col:19> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x159946280 <col:19> 'int' lvalue Var 0x1599287e0 'valcount' 'int'
|   `-BinaryOperator 0x159946318 <line:45:5, col:9> 'int' '='
|     |-DeclRefExpr 0x1599462d8 <col:5> 'int' lvalue Var 0x159928898 't' 'int'
|     `-IntegerLiteral 0x1599462f8 <col:9> 'int' 1
`-FunctionDecl 0x1599419a0 <line:19:10> col:10 implicit used strtol 'long (const char *, char **, int)' extern
  |-ParmVarDecl 0x159941aa0 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x159941b08 <<invalid sloc>> <invalid sloc> 'char **'
  |-ParmVarDecl 0x159941b70 <<invalid sloc>> <invalid sloc> 'int'
  `-BuiltinAttr 0x159941a48 <<invalid sloc>> Implicit 877
