TranslationUnitDecl 0x14d055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x14d0564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x14d055bd0 '__int128'
|-TypedefDecl 0x14d056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x14d055bf0 'unsigned __int128'
|-TypedefDecl 0x14d126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x14d126000 'struct __NSConstantString_tag'
|   `-Record 0x14d056580 '__NSConstantString_tag'
|-TypedefDecl 0x14d126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x14d055d90 '__SVInt8_t'
|-TypedefDecl 0x14d126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x14d055db0 '__SVInt16_t'
|-TypedefDecl 0x14d126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x14d055dd0 '__SVInt32_t'
|-TypedefDecl 0x14d1263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x14d055df0 '__SVInt64_t'
|-TypedefDecl 0x14d126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x14d055e10 '__SVUint8_t'
|-TypedefDecl 0x14d1264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x14d055e30 '__SVUint16_t'
|-TypedefDecl 0x14d126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x14d055e50 '__SVUint32_t'
|-TypedefDecl 0x14d126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x14d055e70 '__SVUint64_t'
|-TypedefDecl 0x14d1265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x14d055e90 '__SVFloat16_t'
|-TypedefDecl 0x14d126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x14d055eb0 '__SVFloat32_t'
|-TypedefDecl 0x14d1266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x14d055ed0 '__SVFloat64_t'
|-TypedefDecl 0x14d126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x14d055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x14d126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x14d055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x14d1267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x14d055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x14d126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x14d055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x14d1268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x14d055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x14d126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x14d055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x14d126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x14d055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x14d1269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x14d055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x14d126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x14d055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x14d126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x14d056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x14d126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x14d056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x14d126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x14d056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x14d126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x14d056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x14d126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x14d056090 '__clang_svint8x3_t'
|-TypedefDecl 0x14d126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x14d0560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x14d126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x14d0560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x14d126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x14d0560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x14d126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x14d056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x14d126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x14d056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x14d126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x14d056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x14d126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x14d056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x14d126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x14d056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x14d127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x14d0561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x14d127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x14d0561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x14d1278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x14d0561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x14d127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x14d056210 '__clang_svint8x4_t'
|-TypedefDecl 0x14d1279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x14d056230 '__clang_svint16x4_t'
|-TypedefDecl 0x14d127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x14d056250 '__clang_svint32x4_t'
|-TypedefDecl 0x14d127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x14d056270 '__clang_svint64x4_t'
|-TypedefDecl 0x14d127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x14d056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x14d127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x14d0562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x14d127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x14d0562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x14d127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x14d0562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x14d127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x14d056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x14d127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x14d056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x14d127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x14d056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x14d127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x14d056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x14d127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x14d056390 '__SVBool_t'
|-TypedefDecl 0x14d127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x14d0563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x14d127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x14d0563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x14d127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x14d0563f0 '__SVCount_t'
|-TypedefDecl 0x14d127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x14d127fb0 'char *'
|   `-BuiltinType 0x14d0556b0 'char'
|-TypedefDecl 0x14d128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x14d127fb0 'char *'
|   `-BuiltinType 0x14d0556b0 'char'
|-FunctionDecl 0x14d128528 <dataset_diviso_filec/func3431_vuln.c:1:1, line:41:1> line:1:19 invalid ConvertRGBToHSL 'int (const double, const double, const double, double *, double *, double *)'
| |-ParmVarDecl 0x14d1280f0 <col:35, col:48> col:48 used red 'const double'
| |-ParmVarDecl 0x14d128170 <col:52, col:65> col:65 used green 'const double'
| |-ParmVarDecl 0x14d1281f0 <line:2:3, col:16> col:16 used blue 'const double'
| |-ParmVarDecl 0x14d1282a8 <col:21, col:29> col:29 used hue 'double *'
| |-ParmVarDecl 0x14d128328 <col:33, col:41> col:41 used saturation 'double *'
| |-ParmVarDecl 0x14d1283a8 <col:52, col:60> col:60 used lightness 'double *'
| `-CompoundStmt 0x14d144d38 <line:3:1, line:41:1>
|   |-DeclStmt 0x14d1287a0 <line:4:3, line:7:8>
|   | |-VarDecl 0x14d128618 <line:4:3, line:5:5> col:5 used c 'double'
|   | |-VarDecl 0x14d128698 <line:4:3, line:6:5> col:5 used max 'double'
|   | `-VarDecl 0x14d128718 <line:4:3, line:7:5> col:5 used min 'double'
|   |-BinaryOperator 0x14d141e48 <line:13:3, line:14:23> 'double' contains-errors '='
|   | |-DeclRefExpr 0x14d141a60 <line:13:3> 'double' lvalue Var 0x14d128698 'max' 'double'
|   | `-CallExpr 0x14d141e18 <col:7, line:14:23> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x14d141b60 <line:13:7> 'int ()' Function 0x14d141aa8 'MagickMax' 'int ()'
|   |   |-BinaryOperator 0x14d141d48 <col:17, col:30> '<dependent type>' contains-errors '*'
|   |   | |-RecoveryExpr 0x14d141d28 <col:17> '<dependent type>' contains-errors lvalue
|   |   | `-DeclRefExpr 0x14d141b98 <col:30> 'const double' lvalue ParmVar 0x14d1280f0 'red' 'const double'
|   |   `-CallExpr 0x14d141de8 <col:34, line:14:22> '<dependent type>' contains-errors
|   |     |-DeclRefExpr 0x14d141bd8 <line:13:34> 'int ()' Function 0x14d141aa8 'MagickMax' 'int ()'
|   |     |-BinaryOperator 0x14d141d88 <col:44, col:57> '<dependent type>' contains-errors '*'
|   |     | |-RecoveryExpr 0x14d141d68 <col:44> '<dependent type>' contains-errors lvalue
|   |     | `-DeclRefExpr 0x14d141c10 <col:57> 'const double' lvalue ParmVar 0x14d128170 'green' 'const double'
|   |     `-BinaryOperator 0x14d141dc8 <line:14:5, col:18> '<dependent type>' contains-errors '*'
|   |       |-RecoveryExpr 0x14d141da8 <col:5> '<dependent type>' contains-errors lvalue
|   |       `-DeclRefExpr 0x14d141c68 <col:18> 'const double' lvalue ParmVar 0x14d1281f0 'blue' 'const double'
|   |-BinaryOperator 0x14d142250 <line:15:3, line:16:23> 'double' contains-errors '='
|   | |-DeclRefExpr 0x14d141e68 <line:15:3> 'double' lvalue Var 0x14d128718 'min' 'double'
|   | `-CallExpr 0x14d142220 <col:7, line:16:23> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x14d141f68 <line:15:7> 'int ()' Function 0x14d141eb0 'MagickMin' 'int ()'
|   |   |-BinaryOperator 0x14d142150 <col:17, col:30> '<dependent type>' contains-errors '*'
|   |   | |-RecoveryExpr 0x14d142130 <col:17> '<dependent type>' contains-errors lvalue
|   |   | `-DeclRefExpr 0x14d141fa0 <col:30> 'const double' lvalue ParmVar 0x14d1280f0 'red' 'const double'
|   |   `-CallExpr 0x14d1421f0 <col:34, line:16:22> '<dependent type>' contains-errors
|   |     |-DeclRefExpr 0x14d141fe0 <line:15:34> 'int ()' Function 0x14d141eb0 'MagickMin' 'int ()'
|   |     |-BinaryOperator 0x14d142190 <col:44, col:57> '<dependent type>' contains-errors '*'
|   |     | |-RecoveryExpr 0x14d142170 <col:44> '<dependent type>' contains-errors lvalue
|   |     | `-DeclRefExpr 0x14d142018 <col:57> 'const double' lvalue ParmVar 0x14d128170 'green' 'const double'
|   |     `-BinaryOperator 0x14d1421d0 <line:16:5, col:18> '<dependent type>' contains-errors '*'
|   |       |-RecoveryExpr 0x14d1421b0 <col:5> '<dependent type>' contains-errors lvalue
|   |       `-DeclRefExpr 0x14d142070 <col:18> 'const double' lvalue ParmVar 0x14d1281f0 'blue' 'const double'
|   |-BinaryOperator 0x14d142320 <line:17:3, col:9> 'double' '='
|   | |-DeclRefExpr 0x14d142270 <col:3> 'double' lvalue Var 0x14d128618 'c' 'double'
|   | `-BinaryOperator 0x14d142300 <col:5, col:9> 'double' '-'
|   |   |-ImplicitCastExpr 0x14d1422d0 <col:5> 'double' <LValueToRValue>
|   |   | `-DeclRefExpr 0x14d142290 <col:5> 'double' lvalue Var 0x14d128698 'max' 'double'
|   |   `-ImplicitCastExpr 0x14d1422e8 <col:9> 'double' <LValueToRValue>
|   |     `-DeclRefExpr 0x14d1422b0 <col:9> 'double' lvalue Var 0x14d128718 'min' 'double'
|   |-BinaryOperator 0x14d142480 <line:18:3, col:24> 'double' '='
|   | |-UnaryOperator 0x14d142378 <col:3, col:4> 'double' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x14d142360 <col:4> 'double *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x14d142340 <col:4> 'double *' lvalue ParmVar 0x14d1283a8 'lightness' 'double *'
|   | `-BinaryOperator 0x14d142460 <col:14, col:24> 'double' '/'
|   |   |-ParenExpr 0x14d142420 <col:14, col:22> 'double'
|   |   | `-BinaryOperator 0x14d142400 <col:15, col:19> 'double' '+'
|   |   |   |-ImplicitCastExpr 0x14d1423d0 <col:15> 'double' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x14d142390 <col:15> 'double' lvalue Var 0x14d128698 'max' 'double'
|   |   |   `-ImplicitCastExpr 0x14d1423e8 <col:19> 'double' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x14d1423b0 <col:19> 'double' lvalue Var 0x14d128718 'min' 'double'
|   |   `-FloatingLiteral 0x14d142440 <col:24> 'double' 2.000000e+00
|   |-IfStmt 0x14d142670 <line:19:3, line:24:5>
|   | |-BinaryOperator 0x14d1424f8 <line:19:7, col:12> 'int' '<='
|   | | |-ImplicitCastExpr 0x14d1424e0 <col:7> 'double' <LValueToRValue>
|   | | | `-DeclRefExpr 0x14d1424a0 <col:7> 'double' lvalue Var 0x14d128618 'c' 'double'
|   | | `-FloatingLiteral 0x14d1424c0 <col:12> 'double' 0.000000e+00
|   | `-CompoundStmt 0x14d142648 <line:20:5, line:24:5>
|   |   |-BinaryOperator 0x14d142588 <line:21:7, col:12> 'double' '='
|   |   | |-UnaryOperator 0x14d142550 <col:7, col:8> 'double' lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x14d142538 <col:8> 'double *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x14d142518 <col:8> 'double *' lvalue ParmVar 0x14d1282a8 'hue' 'double *'
|   |   | `-FloatingLiteral 0x14d142568 <col:12> 'double' 0.000000e+00
|   |   |-BinaryOperator 0x14d142618 <line:22:7, col:19> 'double' '='
|   |   | |-UnaryOperator 0x14d1425e0 <col:7, col:8> 'double' lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x14d1425c8 <col:8> 'double *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x14d1425a8 <col:8> 'double *' lvalue ParmVar 0x14d128328 'saturation' 'double *'
|   |   | `-FloatingLiteral 0x14d1425f8 <col:19> 'double' 0.000000e+00
|   |   `-ReturnStmt 0x14d142638 <line:23:7>
|   |-IfStmt 0x14d1447b0 <line:25:3, line:32:5> has_else
|   | |-BinaryOperator 0x14d144280 <line:25:7, col:36> 'int' contains-errors '<'
|   | | |-CallExpr 0x14d144238 <col:7, col:32> '<dependent type>' contains-errors
|   | | | |-DeclRefExpr 0x14d1440c0 <col:7> 'double (double)' Function 0x14d143f00 'fabs' 'double (double)'
|   | | | `-BinaryOperator 0x14d144218 <col:12, col:29> '<dependent type>' contains-errors '-'
|   | | |   |-DeclRefExpr 0x14d1440e0 <col:12> 'double' lvalue Var 0x14d128698 'max' 'double'
|   | | |   `-BinaryOperator 0x14d1441f8 <col:16, col:29> '<dependent type>' contains-errors '*'
|   | | |     |-RecoveryExpr 0x14d1441d8 <col:16> '<dependent type>' contains-errors lvalue
|   | | |     `-DeclRefExpr 0x14d144118 <col:29> 'const double' lvalue ParmVar 0x14d1280f0 'red' 'const double'
|   | | `-RecoveryExpr 0x14d144260 <col:36> '<dependent type>' contains-errors lvalue
|   | |-CompoundStmt 0x14d144570 <line:26:5, line:30:5>
|   | | `-IfStmt 0x14d144550 <line:28:7, line:29:15>
|   | |   |-RecoveryExpr 0x14d144490 <line:28:11, col:52> '_Bool' contains-errors
|   | |   `-CompoundAssignOperator 0x14d144520 <line:29:9, col:15> 'double' '+=' ComputeLHSTy='double' ComputeResultTy='double'
|   | |     |-UnaryOperator 0x14d1444e8 <col:9, col:10> 'double' lvalue prefix '*' cannot overflow
|   | |     | `-ImplicitCastExpr 0x14d1444d0 <col:10> 'double *' <LValueToRValue>
|   | |     |   `-DeclRefExpr 0x14d1444b0 <col:10> 'double *' lvalue ParmVar 0x14d1282a8 'hue' 'double *'
|   | |     `-FloatingLiteral 0x14d144500 <col:15> 'double' 6.000000e+00
|   | `-NullStmt 0x14d1447a8 <line:32:5>
|   |-CompoundAssignOperator 0x14d144890 <line:36:3, col:14> 'double' '*=' ComputeLHSTy='double' ComputeResultTy='double'
|   | |-UnaryOperator 0x14d144818 <col:3, col:4> 'double' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x14d144800 <col:4> 'double *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x14d1447e0 <col:4> 'double *' lvalue ParmVar 0x14d1282a8 'hue' 'double *'
|   | `-BinaryOperator 0x14d144870 <col:9, col:14> 'double' '/'
|   |   |-FloatingLiteral 0x14d144830 <col:9> 'double' 6.000000e+01
|   |   `-FloatingLiteral 0x14d144850 <col:14> 'double' 3.600000e+02
|   `-IfStmt 0x14d144d08 <line:37:3, line:40:40> has_else
|     |-BinaryOperator 0x14d144948 <line:37:7, col:21> 'int' '<='
|     | |-ImplicitCastExpr 0x14d144930 <col:7, col:8> 'double' <LValueToRValue>
|     | | `-UnaryOperator 0x14d1448f8 <col:7, col:8> 'double' lvalue prefix '*' cannot overflow
|     | |   `-ImplicitCastExpr 0x14d1448e0 <col:8> 'double *' <LValueToRValue>
|     | |     `-DeclRefExpr 0x14d1448c0 <col:8> 'double *' lvalue ParmVar 0x14d1283a8 'lightness' 'double *'
|     | `-FloatingLiteral 0x14d144910 <col:21> 'double' 5.000000e-01
|     |-BinaryOperator 0x14d144af8 <line:38:5, col:36> 'double' '='
|     | |-UnaryOperator 0x14d1449a0 <col:5, col:6> 'double' lvalue prefix '*' cannot overflow
|     | | `-ImplicitCastExpr 0x14d144988 <col:6> 'double *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x14d144968 <col:6> 'double *' lvalue ParmVar 0x14d128328 'saturation' 'double *'
|     | `-BinaryOperator 0x14d144ad8 <col:17, col:36> 'double' '/'
|     |   |-ImplicitCastExpr 0x14d144ac0 <col:17> 'double' <LValueToRValue>
|     |   | `-DeclRefExpr 0x14d1449b8 <col:17> 'double' lvalue Var 0x14d128618 'c' 'double'
|     |   `-ParenExpr 0x14d144aa0 <col:19, col:36> 'double'
|     |     `-BinaryOperator 0x14d144a80 <col:20, col:35> 'double' '*'
|     |       |-FloatingLiteral 0x14d1449d8 <col:20> 'double' 2.000000e+00
|     |       `-ImplicitCastExpr 0x14d144a68 <col:24, col:35> 'double' <LValueToRValue>
|     |         `-ParenExpr 0x14d144a48 <col:24, col:35> 'double' lvalue
|     |           `-UnaryOperator 0x14d144a30 <col:25, col:26> 'double' lvalue prefix '*' cannot overflow
|     |             `-ImplicitCastExpr 0x14d144a18 <col:26> 'double *' <LValueToRValue>
|     |               `-DeclRefExpr 0x14d1449f8 <col:26> 'double *' lvalue ParmVar 0x14d1283a8 'lightness' 'double *'
|     `-BinaryOperator 0x14d144ce8 <line:40:5, col:40> 'double' '='
|       |-UnaryOperator 0x14d144b50 <col:5, col:6> 'double' lvalue prefix '*' cannot overflow
|       | `-ImplicitCastExpr 0x14d144b38 <col:6> 'double *' <LValueToRValue>
|       |   `-DeclRefExpr 0x14d144b18 <col:6> 'double *' lvalue ParmVar 0x14d128328 'saturation' 'double *'
|       `-BinaryOperator 0x14d144cc8 <col:17, col:40> 'double' '/'
|         |-ImplicitCastExpr 0x14d144cb0 <col:17> 'double' <LValueToRValue>
|         | `-DeclRefExpr 0x14d144b68 <col:17> 'double' lvalue Var 0x14d128618 'c' 'double'
|         `-ParenExpr 0x14d144c90 <col:19, col:40> 'double'
|           `-BinaryOperator 0x14d144c70 <col:20, col:39> 'double' '-'
|             |-FloatingLiteral 0x14d144b88 <col:20> 'double' 2.000000e+00
|             `-BinaryOperator 0x14d144c50 <col:24, col:39> 'double' '*'
|               |-FloatingLiteral 0x14d144ba8 <col:24> 'double' 2.000000e+00
|               `-ImplicitCastExpr 0x14d144c38 <col:28, col:39> 'double' <LValueToRValue>
|                 `-ParenExpr 0x14d144c18 <col:28, col:39> 'double' lvalue
|                   `-UnaryOperator 0x14d144c00 <col:29, col:30> 'double' lvalue prefix '*' cannot overflow
|                     `-ImplicitCastExpr 0x14d144be8 <col:30> 'double *' <LValueToRValue>
|                       `-DeclRefExpr 0x14d144bc8 <col:30> 'double *' lvalue ParmVar 0x14d1283a8 'lightness' 'double *'
`-FunctionDecl 0x14d143f00 <line:25:7> col:7 implicit used fabs 'double (double)' extern
  |-ParmVarDecl 0x14d144000 <<invalid sloc>> <invalid sloc> 'double'
  |-BuiltinAttr 0x14d143fa8 <<invalid sloc>> Implicit 1004
  |-NoThrowAttr 0x14d144070 <col:7> Implicit
  `-ConstAttr 0x14d144098 <col:7> Implicit
