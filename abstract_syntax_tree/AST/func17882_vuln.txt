TranslationUnitDecl 0x12c855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x12c8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x12c855bd0 '__int128'
|-TypedefDecl 0x12c856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x12c855bf0 'unsigned __int128'
|-TypedefDecl 0x12d00be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12d00bc00 'struct __NSConstantString_tag'
|   `-Record 0x12c856580 '__NSConstantString_tag'
|-TypedefDecl 0x12d00be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x12c855d90 '__SVInt8_t'
|-TypedefDecl 0x12d00bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x12c855db0 '__SVInt16_t'
|-TypedefDecl 0x12d00bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x12c855dd0 '__SVInt32_t'
|-TypedefDecl 0x12d00bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x12c855df0 '__SVInt64_t'
|-TypedefDecl 0x12d00c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x12c855e10 '__SVUint8_t'
|-TypedefDecl 0x12d00c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x12c855e30 '__SVUint16_t'
|-TypedefDecl 0x12d00c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x12c855e50 '__SVUint32_t'
|-TypedefDecl 0x12d00c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x12c855e70 '__SVUint64_t'
|-TypedefDecl 0x12d00c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x12c855e90 '__SVFloat16_t'
|-TypedefDecl 0x12d00c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x12c855eb0 '__SVFloat32_t'
|-TypedefDecl 0x12d00c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x12c855ed0 '__SVFloat64_t'
|-TypedefDecl 0x12d00c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x12c855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12d00c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x12c855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12d00c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x12c855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12d00c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x12c855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12d00c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x12c855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12d00c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x12c855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12d00c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x12c855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12d00c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x12c855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12d00c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x12c855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12d00c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x12c856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12d00c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x12c856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12d00c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x12c856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12d00c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x12c856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12d00c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x12c856090 '__clang_svint8x3_t'
|-TypedefDecl 0x12d00c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x12c8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12d00c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x12c8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12d00c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x12c8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12d00c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x12c856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12d00ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x12c856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12d00cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x12c856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12d00cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x12c856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12d00cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x12c856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12d00d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x12c8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12d00d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x12c8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12d00d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x12c8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12d00d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x12c856210 '__clang_svint8x4_t'
|-TypedefDecl 0x12d00d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x12c856230 '__clang_svint16x4_t'
|-TypedefDecl 0x12d00d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x12c856250 '__clang_svint32x4_t'
|-TypedefDecl 0x12d00d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x12c856270 '__clang_svint64x4_t'
|-TypedefDecl 0x12d00d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x12c856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12d00d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x12c8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12d00d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x12c8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12d00d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x12c8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12d00d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x12c856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12d00d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x12c856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12d00d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x12c856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12d00d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x12c856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12d00da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x12c856390 '__SVBool_t'
|-TypedefDecl 0x12d00da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x12c8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12d00dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x12c8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12d00db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x12c8563f0 '__SVCount_t'
|-TypedefDecl 0x12d00dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12d00dbb0 'char *'
|   `-BuiltinType 0x12c8556b0 'char'
|-TypedefDecl 0x12d00dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12d00dbb0 'char *'
|   `-BuiltinType 0x12c8556b0 'char'
`-FunctionDecl 0x12d00dfa8 <dataset_diviso_filec/func17882_vuln.c:1:1, line:76:1> line:1:1 invalid read_viminfo_barline 'int (int *, int, int, int)'
  |-ParmVarDecl 0x12d00dd28 <col:22, col:29> col:29 referenced invalid virp 'int *'
  |-ParmVarDecl 0x12d00dda8 <col:35, col:39> col:39 used got_encoding 'int'
  |-ParmVarDecl 0x12d00de28 <col:53, col:57> col:57 used force 'int'
  |-ParmVarDecl 0x12d00dea8 <col:64, col:68> col:68 used writing 'int'
  `-CompoundStmt 0x12d02abe8 <line:2:1, line:76:1>
    |-DeclStmt 0x12d00e198 <line:3:5, col:35>
    | `-VarDecl 0x12d00e088 <col:5, col:34> col:13 used p 'char *' cinit
    |   `-BinaryOperator 0x12d00e178 <col:17, col:34> '<dependent type>' contains-errors '+'
    |     |-CXXDependentScopeMemberExpr 0x12d00e110 <col:17, col:23> '<dependent type>' contains-errors lvalue ->vir_line
    |     | `-RecoveryExpr 0x12d00e0f0 <col:17> '<dependent type>' contains-errors lvalue
    |     `-IntegerLiteral 0x12d00e158 <col:34> 'int' 1
    |-DeclStmt 0x12d00e230 <line:4:5, col:17>
    | `-VarDecl 0x12d00e1c8 <col:5, col:10> col:10 used bartype 'int'
    |-DeclStmt 0x12d00e2e0 <line:7:5, col:11>
    | `-VarDecl 0x12d00e278 <col:5, col:10> col:10 used i 'int'
    |-DeclStmt 0x12d00e3b0 <line:8:5, col:26>
    | `-VarDecl 0x12d00e310 <col:5, col:22> col:10 used read_next 'int' cinit
    |   `-RecoveryExpr 0x12d00e390 <col:22> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x12d02aa08 <line:18:5, line:71:5> has_else
    | |-BinaryOperator 0x12d027860 <line:18:9, col:15> 'int' contains-errors '=='
    | | |-ImplicitCastExpr 0x12d027848 <col:9, col:10> 'int' contains-errors <IntegralCast>
    | | | `-ImplicitCastExpr 0x12d027830 <col:9, col:10> 'char' contains-errors <LValueToRValue>
    | | |   `-UnaryOperator 0x12d027800 <col:9, col:10> 'char' contains-errors lvalue prefix '*' cannot overflow
    | | |     `-ImplicitCastExpr 0x12d00e3e8 <col:10> 'char *' contains-errors <LValueToRValue>
    | | |       `-DeclRefExpr 0x12d00e3c8 <col:10> 'char *' contains-errors lvalue Var 0x12d00e088 'p' 'char *'
    | | `-CharacterLiteral 0x12d027818 <col:15> 'int' 60
    | |-CompoundStmt 0x12d027b68 <line:19:5, line:23:5>
    | | `-IfStmt 0x12d027b48 <line:21:2, line:22:55>
    | |   |-ImplicitCastExpr 0x12d0278a0 <line:21:6> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x12d027880 <col:6> 'int' lvalue ParmVar 0x12d00dea8 'writing' 'int'
    | |   `-CallExpr 0x12d027b18 <line:22:6, col:55> '<dependent type>' contains-errors
    | |     |-DeclRefExpr 0x12d027a10 <col:6> 'int ()' Function 0x12d027958 'ga_add_string' 'int ()'
    | |     |-UnaryOperator 0x12d027a98 <col:20, col:27> '<dependent type>' contains-errors prefix '&' cannot overflow
    | |     | `-CXXDependentScopeMemberExpr 0x12d027a50 <col:21, col:27> '<dependent type>' contains-errors lvalue ->vir_barlines
    | |     |   `-RecoveryExpr 0x12d027a30 <col:21> '<dependent type>' contains-errors lvalue
    | |     `-CXXDependentScopeMemberExpr 0x12d027ad0 <col:41, col:47> '<dependent type>' contains-errors lvalue ->vir_line
    | |       `-RecoveryExpr 0x12d027ab0 <col:41> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x12d02a9e8 <line:25:5, line:71:5>
    |   |-BinaryOperator 0x12d027ef0 <line:27:2, col:24> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x12d027ce8 <col:2> 'int' lvalue Var 0x12d00e1c8 'bartype' 'int'
    |   | `-CallExpr 0x12d027ec8 <col:12, col:24> 'int' contains-errors
    |   |   |-ImplicitCastExpr 0x12d027eb0 <col:12> 'int (*)()' <FunctionToPointerDecay>
    |   |   | `-DeclRefExpr 0x12d027de8 <col:12> 'int ()' Function 0x12d027d30 'getdigits' 'int ()'
    |   |   `-UnaryOperator 0x12d027e60 <col:22, col:23> 'char **' contains-errors prefix '&' cannot overflow
    |   |     `-DeclRefExpr 0x12d027e08 <col:23> 'char *' contains-errors lvalue Var 0x12d00e088 'p' 'char *'
    |   `-SwitchStmt 0x12d027f48 <line:28:2, line:62:2>
    |     |-ImplicitCastExpr 0x12d027f30 <line:28:10> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x12d027f10 <col:10> 'int' lvalue Var 0x12d00e1c8 'bartype' 'int'
    |     `-CompoundStmt 0x12d02a6a0 <line:29:2, line:62:2>
    |       |-IfStmt 0x12d0285b8 <line:34:3, line:40:3>
    |       | |-UnaryOperator 0x12d027fc0 <line:34:7, col:8> 'int' prefix '!' cannot overflow
    |       | | `-ImplicitCastExpr 0x12d027fa8 <col:8> 'int' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x12d027f88 <col:8> 'int' lvalue ParmVar 0x12d00dda8 'got_encoding' 'int'
    |       | `-CompoundStmt 0x12d0285a0 <line:35:3, line:40:3>
    |       |   `-BinaryOperator 0x12d028230 <line:36:7, col:49> 'int' contains-errors '='
    |       |     |-DeclRefExpr 0x12d027fd8 <col:7> 'int' contains-errors lvalue Var 0x12d00e310 'read_next' 'int'
    |       |     `-CallExpr 0x12d0281f8 <col:19, col:49> '<dependent type>' contains-errors
    |       |       |-DeclRefExpr 0x12d0280d8 <col:19> 'int ()' Function 0x12d028020 'barline_parse' 'int ()'
    |       |       |-RecoveryExpr 0x12d0280f8 <col:33> '<dependent type>' contains-errors lvalue
    |       |       |-DeclRefExpr 0x12d028118 <col:39> 'char *' contains-errors lvalue Var 0x12d00e088 'p' 'char *'
    |       |       `-UnaryOperator 0x12d0281e0 <col:42, col:43> '<dependent type>' contains-errors prefix '&' cannot overflow
    |       |         `-RecoveryExpr 0x12d0281c0 <col:43> '<dependent type>' contains-errors lvalue
    |       |-BreakStmt 0x12d0285d8 <line:41:3>
    |       |-BreakStmt 0x12d028780 <line:46:3>
    |       |-BreakStmt 0x12d02a340 <line:51:3>
    |       |-BreakStmt 0x12d02a4e8 <line:56:3>
    |       `-DefaultStmt 0x12d02a680 <line:58:6, line:61:56>
    |         `-IfStmt 0x12d02a660 <line:60:3, line:61:56>
    |           |-ImplicitCastExpr 0x12d02a510 <line:60:7> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x12d02a4f0 <col:7> 'int' lvalue ParmVar 0x12d00dea8 'writing' 'int'
    |           `-CallExpr 0x12d02a630 <line:61:7, col:56> '<dependent type>' contains-errors
    |             |-DeclRefExpr 0x12d02a528 <col:7> 'int ()' Function 0x12d027958 'ga_add_string' 'int ()'
    |             |-UnaryOperator 0x12d02a5b0 <col:21, col:28> '<dependent type>' contains-errors prefix '&' cannot overflow
    |             | `-CXXDependentScopeMemberExpr 0x12d02a568 <col:22, col:28> '<dependent type>' contains-errors lvalue ->vir_barlines
    |             |   `-RecoveryExpr 0x12d02a548 <col:22> '<dependent type>' contains-errors lvalue
    |             `-CXXDependentScopeMemberExpr 0x12d02a5e8 <col:42, col:48> '<dependent type>' contains-errors lvalue ->vir_line
    |               `-RecoveryExpr 0x12d02a5c8 <col:42> '<dependent type>' contains-errors lvalue
    `-IfStmt 0x12d02abc8 <line:73:5, line:74:30>
      |-ImplicitCastExpr 0x12d02aa58 <line:73:9> 'int' contains-errors <LValueToRValue>
      | `-DeclRefExpr 0x12d02aa38 <col:9> 'int' contains-errors lvalue Var 0x12d00e310 'read_next' 'int'
      `-ReturnStmt 0x12d02abb8 <line:74:2, col:30>
        `-CallExpr 0x12d02ab90 <col:9, col:30> '<dependent type>' contains-errors
          |-DeclRefExpr 0x12d02ab50 <col:9> 'int ()' Function 0x12d02aa98 'viminfo_readline' 'int ()'
          `-RecoveryExpr 0x12d02ab70 <col:26> '<dependent type>' contains-errors lvalue
