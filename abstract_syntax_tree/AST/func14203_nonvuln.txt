TranslationUnitDecl 0x128855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1288564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x128855bd0 '__int128'
|-TypedefDecl 0x128856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x128855bf0 'unsigned __int128'
|-TypedefDecl 0x128926230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x128926000 'struct __NSConstantString_tag'
|   `-Record 0x128856580 '__NSConstantString_tag'
|-TypedefDecl 0x128926298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x128855d90 '__SVInt8_t'
|-TypedefDecl 0x128926300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x128855db0 '__SVInt16_t'
|-TypedefDecl 0x128926368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x128855dd0 '__SVInt32_t'
|-TypedefDecl 0x1289263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x128855df0 '__SVInt64_t'
|-TypedefDecl 0x128926438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x128855e10 '__SVUint8_t'
|-TypedefDecl 0x1289264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x128855e30 '__SVUint16_t'
|-TypedefDecl 0x128926508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x128855e50 '__SVUint32_t'
|-TypedefDecl 0x128926570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x128855e70 '__SVUint64_t'
|-TypedefDecl 0x1289265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x128855e90 '__SVFloat16_t'
|-TypedefDecl 0x128926640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x128855eb0 '__SVFloat32_t'
|-TypedefDecl 0x1289266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x128855ed0 '__SVFloat64_t'
|-TypedefDecl 0x128926710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x128855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x128926778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x128855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1289267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x128855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x128926848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x128855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1289268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x128855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x128926918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x128855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x128926980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x128855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1289269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x128855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x128926a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x128855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x128926ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x128856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x128926b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x128856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x128926b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x128856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x128926bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x128856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x128926c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x128856090 '__clang_svint8x3_t'
|-TypedefDecl 0x128926cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1288560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x128926d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1288560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x128926d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1288560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x128926df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x128856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x128926e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x128856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x128926ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x128856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x128926f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x128856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x128926f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x128856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x128927800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1288561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x128927868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1288561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1289278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1288561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x128927938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x128856210 '__clang_svint8x4_t'
|-TypedefDecl 0x1289279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x128856230 '__clang_svint16x4_t'
|-TypedefDecl 0x128927a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x128856250 '__clang_svint32x4_t'
|-TypedefDecl 0x128927a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x128856270 '__clang_svint64x4_t'
|-TypedefDecl 0x128927ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x128856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x128927b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1288562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x128927ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1288562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x128927c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1288562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x128927c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x128856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x128927ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x128856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x128927d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x128856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x128927db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x128856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x128927e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x128856390 '__SVBool_t'
|-TypedefDecl 0x128927e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1288563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x128927ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1288563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x128927f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1288563f0 '__SVCount_t'
|-TypedefDecl 0x128927ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x128927fb0 'char *'
|   `-BuiltinType 0x1288556b0 'char'
|-TypedefDecl 0x128928068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x128927fb0 'char *'
|   `-BuiltinType 0x1288556b0 'char'
|-FunctionDecl 0x128940a88 <dataset_diviso_filec/func14203_nonvuln.c:1:1, line:45:1> line:1:1 archive_read_format_zip_options 'int (struct archive_read *, const char *, const char *)'
| |-ParmVarDecl 0x128928648 <col:33, col:54> col:54 used a 'struct archive_read *'
| |-ParmVarDecl 0x1289286c8 <line:2:5, col:17> col:17 used key 'const char *'
| |-ParmVarDecl 0x128928748 <col:22, col:34> col:34 used val 'const char *'
| `-CompoundStmt 0x128948eb0 <line:3:1, line:45:1>
|   |-DeclStmt 0x128940d78 <line:4:2, col:17>
|   | |-RecordDecl 0x128940b90 <col:2, col:9> col:9 struct zip
|   | `-VarDecl 0x128940cf8 <col:2, col:14> col:14 used zip 'struct zip *'
|   |-DeclStmt 0x128940e60 <line:5:2, col:26>
|   | `-VarDecl 0x128940da8 <col:2, col:12> col:6 used ret 'int' cinit
|   |   `-RecoveryExpr 0x128940e40 <col:12> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x128941030 <line:7:2, col:38> 'struct zip *' contains-errors '='
|   | |-DeclRefExpr 0x128940e78 <col:2> 'struct zip *' lvalue Var 0x128940cf8 'zip' 'struct zip *'
|   | `-CStyleCastExpr 0x128941008 <col:8, col:38> 'struct zip *' contains-errors <Dependent>
|   |   `-ParenExpr 0x128940fe8 <col:22, col:38> '<dependent type>' contains-errors lvalue
|   |     `-CXXDependentScopeMemberExpr 0x128940ef8 <col:23, col:34> '<dependent type>' contains-errors lvalue ->data
|   |       `-RecoveryExpr 0x128940ed0 <col:23, col:26> '<dependent type>' contains-errors lvalue
|   |         `-DeclRefExpr 0x128940e98 <col:23> 'struct archive_read *' lvalue ParmVar 0x128928648 'a' 'struct archive_read *'
|   `-IfStmt 0x128948e80 <line:8:2, line:41:2> has_else
|     |-BinaryOperator 0x128941420 <line:8:6, col:29> 'int' '=='
|     | |-CallExpr 0x128941388 <col:6, col:23> 'int'
|     | | |-ImplicitCastExpr 0x128941370 <col:6> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x128941270 <col:6> 'int (const char *, const char *)' Function 0x128941090 'strcmp' 'int (const char *, const char *)'
|     | | |-ImplicitCastExpr 0x1289413b8 <col:13> 'const char *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x128941290 <col:13> 'const char *' lvalue ParmVar 0x1289286c8 'key' 'const char *'
|     | | `-ImplicitCastExpr 0x1289413e8 <col:18> 'const char *' <NoOp>
|     | |   `-ImplicitCastExpr 0x1289413d0 <col:18> 'char *' <ArrayToPointerDecay>
|     | |     `-StringLiteral 0x1289412f0 <col:18> 'char[4]' lvalue "STR"
|     | `-IntegerLiteral 0x128941400 <col:29> 'int' 0
|     |-CompoundStmt 0x128941550 <col:32, line:12:2>
|     `-IfStmt 0x128948e50 <col:9, line:41:2> has_else
|       |-BinaryOperator 0x1289416a0 <line:12:13, col:36> 'int' '=='
|       | |-CallExpr 0x128941608 <col:13, col:30> 'int'
|       | | |-ImplicitCastExpr 0x1289415f0 <col:13> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x128941560 <col:13> 'int (const char *, const char *)' Function 0x128941090 'strcmp' 'int (const char *, const char *)'
|       | | |-ImplicitCastExpr 0x128941638 <col:20> 'const char *' <LValueToRValue>
|       | | | `-DeclRefExpr 0x128941580 <col:20> 'const char *' lvalue ParmVar 0x1289286c8 'key' 'const char *'
|       | | `-ImplicitCastExpr 0x128941668 <col:25> 'const char *' <NoOp>
|       | |   `-ImplicitCastExpr 0x128941650 <col:25> 'char *' <ArrayToPointerDecay>
|       | |     `-StringLiteral 0x1289415a0 <col:25> 'char[4]' lvalue "STR"
|       | `-IntegerLiteral 0x128941680 <col:36> 'int' 0
|       |-CompoundStmt 0x1289437f8 <col:39, line:28:2>
|       | |-IfStmt 0x128943760 <line:13:3, line:26:3> has_else
|       | | |-BinaryOperator 0x1289418e8 <line:13:7, col:32> 'int' contains-errors '||'
|       | | | |-BinaryOperator 0x128941840 <col:7, col:14> 'int' contains-errors '=='
|       | | | | |-DeclRefExpr 0x1289416c0 <col:7> 'const char *' lvalue ParmVar 0x128928748 'val' 'const char *'
|       | | | | `-RecoveryExpr 0x128941820 <col:14> '<dependent type>' contains-errors lvalue
|       | | | `-BinaryOperator 0x1289418c8 <col:22, col:32> 'int' '=='
|       | | |   |-ImplicitCastExpr 0x1289418b0 <col:22, col:27> 'int' <IntegralCast>
|       | | |   | `-ImplicitCastExpr 0x128941898 <col:22, col:27> 'char' <LValueToRValue>
|       | | |   |   `-ArraySubscriptExpr 0x128941878 <col:22, col:27> 'const char' lvalue
|       | | |   |     |-ImplicitCastExpr 0x128941860 <col:22> 'const char *' <LValueToRValue>
|       | | |   |     | `-DeclRefExpr 0x128941718 <col:22> 'const char *' lvalue ParmVar 0x128928748 'val' 'const char *'
|       | | |   |     `-IntegerLiteral 0x128941738 <col:26> 'int' 0
|       | | |   `-IntegerLiteral 0x128941790 <col:32> 'int' 0
|       | | |-CallExpr 0x128942fe0 <line:14:4, line:16:4> '<dependent type>' contains-errors
|       | | | |-DeclRefExpr 0x128942eb8 <line:14:4> 'int ()' Function 0x128942e00 'archive_set_error' 'int ()'
|       | | | |-UnaryOperator 0x128942f38 <col:22, col:26> '<dependent type>' contains-errors prefix '&' cannot overflow
|       | | | | `-RecoveryExpr 0x128942f10 <col:23, col:26> '<dependent type>' contains-errors lvalue
|       | | | |   `-DeclRefExpr 0x128942ed8 <col:23> 'struct archive_read *' lvalue ParmVar 0x128928648 'a' 'struct archive_read *'
|       | | | |-RecoveryExpr 0x128942fc0 <col:35> '<dependent type>' contains-errors lvalue
|       | | | `-StringLiteral 0x128942f68 <line:15:8> 'char[4]' lvalue "STR"
|       | | `-CompoundStmt 0x128943740 <line:17:8, line:26:3>
|       | |   |-BinaryOperator 0x128943268 <line:18:4, line:19:27> '<dependent type>' contains-errors '='
|       | |   | |-RecoveryExpr 0x128943050 <line:18:4, col:9> '<dependent type>' contains-errors lvalue
|       | |   | | `-DeclRefExpr 0x128943018 <col:4> 'struct zip *' lvalue Var 0x128940cf8 'zip' 'struct zip *'
|       | |   | `-CallExpr 0x128943230 <col:17, line:19:27> '<dependent type>' contains-errors
|       | |   |   |-DeclRefExpr 0x128943158 <line:18:17> 'int ()' Function 0x1289430a0 'archive_string_conversion_from_charset' 'int ()'
|       | |   |   |-UnaryOperator 0x1289431d8 <line:19:8, col:12> '<dependent type>' contains-errors prefix '&' cannot overflow
|       | |   |   | `-RecoveryExpr 0x1289431b0 <col:9, col:12> '<dependent type>' contains-errors lvalue
|       | |   |   |   `-DeclRefExpr 0x128943178 <col:9> 'struct archive_read *' lvalue ParmVar 0x128928648 'a' 'struct archive_read *'
|       | |   |   |-DeclRefExpr 0x1289431f0 <col:21> 'const char *' lvalue ParmVar 0x128928748 'val' 'const char *'
|       | |   |   `-IntegerLiteral 0x128943210 <col:26> 'int' 0
|       | |   `-IfStmt 0x128943710 <line:20:4, line:25:11> has_else
|       | |     |-BinaryOperator 0x128943340 <line:20:8, col:22> 'int' contains-errors '!='
|       | |     | |-RecoveryExpr 0x1289432c0 <col:8, col:13> '<dependent type>' contains-errors lvalue
|       | |     | | `-DeclRefExpr 0x128943288 <col:8> 'struct zip *' lvalue Var 0x128940cf8 'zip' 'struct zip *'
|       | |     | `-RecoveryExpr 0x128943320 <col:22> '<dependent type>' contains-errors lvalue
|       | |     |-CompoundStmt 0x128943658 <col:28, line:24:4>
|       | |     | |-IfStmt 0x1289435a0 <line:21:5, line:22:29>
|       | |     | | |-BinaryOperator 0x1289434a0 <line:21:9, col:31> 'int' '=='
|       | |     | | | |-CallExpr 0x128943408 <col:9, col:26> 'int'
|       | |     | | | | |-ImplicitCastExpr 0x1289433f0 <col:9> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|       | |     | | | | | `-DeclRefExpr 0x128943360 <col:9> 'int (const char *, const char *)' Function 0x128941090 'strcmp' 'int (const char *, const char *)'
|       | |     | | | | |-ImplicitCastExpr 0x128943438 <col:16> 'const char *' <LValueToRValue>
|       | |     | | | | | `-DeclRefExpr 0x128943380 <col:16> 'const char *' lvalue ParmVar 0x128928748 'val' 'const char *'
|       | |     | | | | `-ImplicitCastExpr 0x128943468 <col:21> 'const char *' <NoOp>
|       | |     | | | |   `-ImplicitCastExpr 0x128943450 <col:21> 'char *' <ArrayToPointerDecay>
|       | |     | | | |     `-StringLiteral 0x1289433a0 <col:21> 'char[4]' lvalue "STR"
|       | |     | | | `-IntegerLiteral 0x128943480 <col:31> 'int' 0
|       | |     | | `-BinaryOperator 0x128943580 <line:22:6, col:29> '<dependent type>' contains-errors '='
|       | |     | |   |-RecoveryExpr 0x1289434f8 <col:6, col:11> '<dependent type>' contains-errors lvalue
|       | |     | |   | `-DeclRefExpr 0x1289434c0 <col:6> 'struct zip *' lvalue Var 0x128940cf8 'zip' 'struct zip *'
|       | |     | |   `-RecoveryExpr 0x128943558 <col:24, col:29> '<dependent type>' contains-errors lvalue
|       | |     | |     `-DeclRefExpr 0x128943520 <col:24> 'struct zip *' lvalue Var 0x128940cf8 'zip' 'struct zip *'
|       | |     | `-BinaryOperator 0x128943638 <line:23:5, col:11> 'int' contains-errors '='
|       | |     |   |-DeclRefExpr 0x1289435c0 <col:5> 'int' contains-errors lvalue Var 0x128940da8 'ret' 'int'
|       | |     |   `-RecoveryExpr 0x128943618 <col:11> '<dependent type>' contains-errors lvalue
|       | |     `-BinaryOperator 0x1289436f0 <line:25:5, col:11> 'int' contains-errors '='
|       | |       |-DeclRefExpr 0x128943678 <col:5> 'int' contains-errors lvalue Var 0x128940da8 'ret' 'int'
|       | |       `-RecoveryExpr 0x1289436d0 <col:11> '<dependent type>' contains-errors lvalue
|       | `-ReturnStmt 0x1289437e8 <line:27:3, col:14>
|       |   `-ImplicitCastExpr 0x1289437d0 <col:10, col:14> 'int' contains-errors <LValueToRValue>
|       |     `-ParenExpr 0x1289437b0 <col:10, col:14> 'int' contains-errors lvalue
|       |       `-DeclRefExpr 0x128943790 <col:11> 'int' contains-errors lvalue Var 0x128940da8 'ret' 'int'
|       `-IfStmt 0x128948e20 <line:28:9, line:41:2> has_else
|         |-BinaryOperator 0x128943958 <line:28:13, col:35> 'int' '=='
|         | |-CallExpr 0x1289438c0 <col:13, col:30> 'int'
|         | | |-ImplicitCastExpr 0x1289438a8 <col:13> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|         | | | `-DeclRefExpr 0x128943818 <col:13> 'int (const char *, const char *)' Function 0x128941090 'strcmp' 'int (const char *, const char *)'
|         | | |-ImplicitCastExpr 0x1289438f0 <col:20> 'const char *' <LValueToRValue>
|         | | | `-DeclRefExpr 0x128943838 <col:20> 'const char *' lvalue ParmVar 0x1289286c8 'key' 'const char *'
|         | | `-ImplicitCastExpr 0x128943920 <col:25> 'const char *' <NoOp>
|         | |   `-ImplicitCastExpr 0x128943908 <col:25> 'char *' <ArrayToPointerDecay>
|         | |     `-StringLiteral 0x128943858 <col:25> 'char[4]' lvalue "STR"
|         | `-IntegerLiteral 0x128943938 <col:35> 'int' 0
|         |-CompoundStmt 0x128943d00 <col:38, line:38:2>
|         | `-IfStmt 0x128943cd0 <line:30:3, line:36:3> has_else
|         |   |-RecoveryExpr 0x128943a80 <line:30:7, col:32> '_Bool' contains-errors
|         |   |-CompoundStmt 0x128943ba0 <col:35, line:33:3>
|         |   | `-BinaryOperator 0x128943b80 <line:32:4, col:24> '<dependent type>' contains-errors '='
|         |   |   |-RecoveryExpr 0x128943b38 <col:4, col:9> '<dependent type>' contains-errors lvalue
|         |   |   | `-DeclRefExpr 0x128943b00 <col:4> 'struct zip *' lvalue Var 0x128940cf8 'zip' 'struct zip *'
|         |   |   `-IntegerLiteral 0x128943b60 <col:24> 'int' 0
|         |   `-CompoundStmt 0x128943cb8 <line:33:10, line:36:3>
|         |     `-BinaryOperator 0x128943c98 <line:35:4, col:24> '<dependent type>' contains-errors '='
|         |       |-RecoveryExpr 0x128943c50 <col:4, col:9> '<dependent type>' contains-errors lvalue
|         |       | `-DeclRefExpr 0x128943c18 <col:4> 'struct zip *' lvalue Var 0x128940cf8 'zip' 'struct zip *'
|         |       `-IntegerLiteral 0x128943c78 <col:24> 'int' 1
|         `-IfStmt 0x128948e00 <line:38:9, line:41:2>
|           |-BinaryOperator 0x128948c68 <line:38:13, col:35> 'int' '=='
|           | |-CallExpr 0x128943dc0 <col:13, col:30> 'int'
|           | | |-ImplicitCastExpr 0x128943da8 <col:13> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|           | | | `-DeclRefExpr 0x128943d18 <col:13> 'int (const char *, const char *)' Function 0x128941090 'strcmp' 'int (const char *, const char *)'
|           | | |-ImplicitCastExpr 0x128948c00 <col:20> 'const char *' <LValueToRValue>
|           | | | `-DeclRefExpr 0x128943d38 <col:20> 'const char *' lvalue ParmVar 0x1289286c8 'key' 'const char *'
|           | | `-ImplicitCastExpr 0x128948c30 <col:25> 'const char *' <NoOp>
|           | |   `-ImplicitCastExpr 0x128948c18 <col:25> 'char *' <ArrayToPointerDecay>
|           | |     `-StringLiteral 0x128943d58 <col:25> 'char[4]' lvalue "STR"
|           | `-IntegerLiteral 0x128948c48 <col:35> 'int' 0
|           `-CompoundStmt 0x128948df0 <col:38, line:41:2>
`-FunctionDecl 0x128941090 <line:8:6> col:6 implicit used strcmp 'int (const char *, const char *)' extern
  |-ParmVarDecl 0x128941190 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x1289411f8 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x128941138 <<invalid sloc>> Implicit 887
