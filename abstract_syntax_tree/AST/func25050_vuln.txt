TranslationUnitDecl 0x154855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1548564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x154855bd0 '__int128'
|-TypedefDecl 0x154856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x154855bf0 'unsigned __int128'
|-TypedefDecl 0x154926c30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x154926a00 'struct __NSConstantString_tag'
|   `-Record 0x154856580 '__NSConstantString_tag'
|-TypedefDecl 0x154926c98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x154855d90 '__SVInt8_t'
|-TypedefDecl 0x154926d00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x154855db0 '__SVInt16_t'
|-TypedefDecl 0x154926d68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x154855dd0 '__SVInt32_t'
|-TypedefDecl 0x154926dd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x154855df0 '__SVInt64_t'
|-TypedefDecl 0x154926e38 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x154855e10 '__SVUint8_t'
|-TypedefDecl 0x154926ea0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x154855e30 '__SVUint16_t'
|-TypedefDecl 0x154926f08 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x154855e50 '__SVUint32_t'
|-TypedefDecl 0x154926f70 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x154855e70 '__SVUint64_t'
|-TypedefDecl 0x154926fd8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x154855e90 '__SVFloat16_t'
|-TypedefDecl 0x154927040 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x154855eb0 '__SVFloat32_t'
|-TypedefDecl 0x1549270a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x154855ed0 '__SVFloat64_t'
|-TypedefDecl 0x154927110 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x154855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x154927178 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x154855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1549271e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x154855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x154927248 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x154855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1549272b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x154855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x154927318 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x154855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x154927380 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x154855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1549273e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x154855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x154927450 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x154855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x1549274b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x154856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x154927520 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x154856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x154927588 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x154856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x1549275f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x154856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x154927658 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x154856090 '__clang_svint8x3_t'
|-TypedefDecl 0x1549276c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1548560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x154927728 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1548560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x154927790 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1548560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x1549277f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x154856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x154927860 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x154856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x1549278c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x154856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x154927930 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x154856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x154927998 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x154856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x154928200 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1548561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x154928268 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1548561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1549282d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1548561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x154928338 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x154856210 '__clang_svint8x4_t'
|-TypedefDecl 0x1549283a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x154856230 '__clang_svint16x4_t'
|-TypedefDecl 0x154928408 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x154856250 '__clang_svint32x4_t'
|-TypedefDecl 0x154928470 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x154856270 '__clang_svint64x4_t'
|-TypedefDecl 0x1549284d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x154856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x154928540 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1548562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x1549285a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1548562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x154928610 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1548562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x154928678 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x154856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x1549286e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x154856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x154928748 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x154856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x1549287b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x154856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x154928818 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x154856390 '__SVBool_t'
|-TypedefDecl 0x154928880 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1548563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x1549288e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1548563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x154928950 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1548563f0 '__SVCount_t'
|-TypedefDecl 0x1549289f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1549289b0 'char *'
|   `-BuiltinType 0x1548556b0 'char'
|-TypedefDecl 0x154928a68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1549289b0 'char *'
|   `-BuiltinType 0x1548556b0 'char'
|-FunctionDecl 0x154928ec8 <dataset_diviso_filec/func25050_vuln.c:1:1, line:87:1> line:1:16 invalid ApplyFunction 'int (int, const int, const int, const double *, int *)' static
| |-ParmVarDecl 0x154928af0 <col:30, col:38> col:38 invalid pixel 'int'
| |-ParmVarDecl 0x154928b70 <col:44, col:65> col:65 invalid function 'const int'
| |-ParmVarDecl 0x154928bf0 <line:2:3, col:16> col:16 invalid number_parameters 'const int'
| |-ParmVarDecl 0x154928ca8 <col:34, col:48> col:48 used parameters 'const double *'
| |-ParmVarDecl 0x154928d58 <line:3:3, col:18> col:18 invalid exception 'int *'
| `-CompoundStmt 0x154946d98 <line:4:1, line:87:1>
|   |-DeclStmt 0x154929018 <line:5:3, line:6:11>
|   | `-VarDecl 0x154928fb0 <line:5:3, line:6:5> col:5 used result 'double'
|   |-CStyleCastExpr 0x154929078 <line:11:3, col:10> 'void' contains-errors <ToVoid>
|   | `-ImplicitCastExpr 0x154929060 <col:10> '<dependent type>' contains-errors <LValueToRValue> part_of_explicit_cast
|   |   `-RecoveryExpr 0x154929030 <col:10> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x1549290e0 <line:12:3, col:10> 'double' '='
|   | |-DeclRefExpr 0x1549290a0 <col:3> 'double' lvalue Var 0x154928fb0 'result' 'double'
|   | `-FloatingLiteral 0x1549290c0 <col:10> 'double' 0.000000e+00
|   |-SwitchStmt 0x154929138 <line:13:3, line:85:3>
|   | |-ImplicitCastExpr 0x154929120 <line:13:11> '<dependent type>' contains-errors <LValueToRValue>
|   | | `-RecoveryExpr 0x154929100 <col:11> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x154946b08 <line:14:3, line:85:3>
|   |   |-CompoundStmt 0x154943538 <line:16:5, line:23:5>
|   |   | |-BinaryOperator 0x1549291b8 <line:18:7, col:14> 'double' '='
|   |   | | |-DeclRefExpr 0x154929178 <col:7> 'double' lvalue Var 0x154928fb0 'result' 'double'
|   |   | | `-FloatingLiteral 0x154929198 <col:14> 'double' 0.000000e+00
|   |   | |-CompoundAssignOperator 0x154943500 <line:21:7, col:15> 'double' contains-errors '*=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   |   | | |-DeclRefExpr 0x154943478 <col:7> 'double' lvalue Var 0x154928fb0 'result' 'double'
|   |   | | `-RecoveryExpr 0x1549434e0 <col:15> '<dependent type>' contains-errors lvalue
|   |   | `-BreakStmt 0x154943530 <line:22:7>
|   |   |-CompoundStmt 0x154944e20 <line:25:5, line:40:5>
|   |   | |-DeclStmt 0x1549437a0 <line:26:7, line:30:14>
|   |   | | |-VarDecl 0x154943590 <line:26:7, line:27:9> col:9 used amplitude 'double'
|   |   | | |-VarDecl 0x154943610 <line:26:7, line:28:9> col:9 used bias 'double'
|   |   | | |-VarDecl 0x154943690 <line:26:7, line:29:9> col:9 used frequency 'double'
|   |   | | `-VarDecl 0x154943710 <line:26:7, line:30:9> col:9 used phase 'double'
|   |   | |-BinaryOperator 0x154943920 <line:33:7, col:60> 'double' contains-errors '='
|   |   | | |-DeclRefExpr 0x1549437b8 <col:7> 'double' lvalue Var 0x154943690 'frequency' 'double'
|   |   | | `-ConditionalOperator 0x1549438f0 <col:17, col:60> '<dependent type>' contains-errors
|   |   | |   |-ParenExpr 0x154943838 <col:17, col:40> 'int' contains-errors
|   |   | |   | `-BinaryOperator 0x154943818 <col:18, col:39> 'int' contains-errors '>='
|   |   | |   |   |-RecoveryExpr 0x1549437d8 <col:18> '<dependent type>' contains-errors lvalue
|   |   | |   |   `-IntegerLiteral 0x1549437f8 <col:39> 'int' 1
|   |   | |   |-ArraySubscriptExpr 0x1549438b0 <col:44, col:56> 'const double' lvalue
|   |   | |   | |-ImplicitCastExpr 0x154943898 <col:44> 'const double *' <LValueToRValue>
|   |   | |   | | `-DeclRefExpr 0x154943858 <col:44> 'const double *' lvalue ParmVar 0x154928ca8 'parameters' 'const double *'
|   |   | |   | `-IntegerLiteral 0x154943878 <col:55> 'int' 0
|   |   | |   `-FloatingLiteral 0x1549438d0 <col:60> 'double' 1.000000e+00
|   |   | |-BinaryOperator 0x154943aa8 <line:34:7, col:56> 'double' contains-errors '='
|   |   | | |-DeclRefExpr 0x154943940 <col:7> 'double' lvalue Var 0x154943710 'phase' 'double'
|   |   | | `-ConditionalOperator 0x154943a78 <col:13, col:56> '<dependent type>' contains-errors
|   |   | |   |-ParenExpr 0x1549439c0 <col:13, col:36> 'int' contains-errors
|   |   | |   | `-BinaryOperator 0x1549439a0 <col:14, col:35> 'int' contains-errors '>='
|   |   | |   |   |-RecoveryExpr 0x154943960 <col:14> '<dependent type>' contains-errors lvalue
|   |   | |   |   `-IntegerLiteral 0x154943980 <col:35> 'int' 2
|   |   | |   |-ArraySubscriptExpr 0x154943a38 <col:40, col:52> 'const double' lvalue
|   |   | |   | |-ImplicitCastExpr 0x154943a20 <col:40> 'const double *' <LValueToRValue>
|   |   | |   | | `-DeclRefExpr 0x1549439e0 <col:40> 'const double *' lvalue ParmVar 0x154928ca8 'parameters' 'const double *'
|   |   | |   | `-IntegerLiteral 0x154943a00 <col:51> 'int' 1
|   |   | |   `-FloatingLiteral 0x154943a58 <col:56> 'double' 0.000000e+00
|   |   | |-BinaryOperator 0x154943c30 <line:35:7, col:60> 'double' contains-errors '='
|   |   | | |-DeclRefExpr 0x154943ac8 <col:7> 'double' lvalue Var 0x154943590 'amplitude' 'double'
|   |   | | `-ConditionalOperator 0x154943c00 <col:17, col:60> '<dependent type>' contains-errors
|   |   | |   |-ParenExpr 0x154943b48 <col:17, col:40> 'int' contains-errors
|   |   | |   | `-BinaryOperator 0x154943b28 <col:18, col:39> 'int' contains-errors '>='
|   |   | |   |   |-RecoveryExpr 0x154943ae8 <col:18> '<dependent type>' contains-errors lvalue
|   |   | |   |   `-IntegerLiteral 0x154943b08 <col:39> 'int' 3
|   |   | |   |-ArraySubscriptExpr 0x154943bc0 <col:44, col:56> 'const double' lvalue
|   |   | |   | |-ImplicitCastExpr 0x154943ba8 <col:44> 'const double *' <LValueToRValue>
|   |   | |   | | `-DeclRefExpr 0x154943b68 <col:44> 'const double *' lvalue ParmVar 0x154928ca8 'parameters' 'const double *'
|   |   | |   | `-IntegerLiteral 0x154943b88 <col:55> 'int' 2
|   |   | |   `-FloatingLiteral 0x154943be0 <col:60> 'double' 5.000000e-01
|   |   | |-BinaryOperator 0x154943db8 <line:36:7, col:55> 'double' contains-errors '='
|   |   | | |-DeclRefExpr 0x154943c50 <col:7> 'double' lvalue Var 0x154943610 'bias' 'double'
|   |   | | `-ConditionalOperator 0x154943d88 <col:12, col:55> '<dependent type>' contains-errors
|   |   | |   |-ParenExpr 0x154943cd0 <col:12, col:35> 'int' contains-errors
|   |   | |   | `-BinaryOperator 0x154943cb0 <col:13, col:34> 'int' contains-errors '>='
|   |   | |   |   |-RecoveryExpr 0x154943c70 <col:13> '<dependent type>' contains-errors lvalue
|   |   | |   |   `-IntegerLiteral 0x154943c90 <col:34> 'int' 4
|   |   | |   |-ArraySubscriptExpr 0x154943d48 <col:39, col:51> 'const double' lvalue
|   |   | |   | |-ImplicitCastExpr 0x154943d30 <col:39> 'const double *' <LValueToRValue>
|   |   | |   | | `-DeclRefExpr 0x154943cf0 <col:39> 'const double *' lvalue ParmVar 0x154928ca8 'parameters' 'const double *'
|   |   | |   | `-IntegerLiteral 0x154943d10 <col:50> 'int' 3
|   |   | |   `-FloatingLiteral 0x154943d68 <col:55> 'double' 5.000000e-01
|   |   | `-BreakStmt 0x154944e18 <line:39:7>
|   |   |-CompoundStmt 0x154945e90 <line:42:5, line:64:5>
|   |   | |-DeclStmt 0x154945088 <line:43:7, line:47:14>
|   |   | | |-VarDecl 0x154944e78 <line:43:7, line:44:9> col:9 used bias 'double'
|   |   | | |-VarDecl 0x154944ef8 <line:43:7, line:45:9> col:9 used center 'double'
|   |   | | |-VarDecl 0x154944f78 <line:43:7, line:46:9> col:9 used range 'double'
|   |   | | `-VarDecl 0x154944ff8 <line:43:7, line:47:9> col:9 used width 'double'
|   |   | |-BinaryOperator 0x154945208 <line:50:7, col:56> 'double' contains-errors '='
|   |   | | |-DeclRefExpr 0x1549450a0 <col:7> 'double' lvalue Var 0x154944ff8 'width' 'double'
|   |   | | `-ConditionalOperator 0x1549451d8 <col:13, col:56> '<dependent type>' contains-errors
|   |   | |   |-ParenExpr 0x154945120 <col:13, col:36> 'int' contains-errors
|   |   | |   | `-BinaryOperator 0x154945100 <col:14, col:35> 'int' contains-errors '>='
|   |   | |   |   |-RecoveryExpr 0x1549450c0 <col:14> '<dependent type>' contains-errors lvalue
|   |   | |   |   `-IntegerLiteral 0x1549450e0 <col:35> 'int' 1
|   |   | |   |-ArraySubscriptExpr 0x154945198 <col:40, col:52> 'const double' lvalue
|   |   | |   | |-ImplicitCastExpr 0x154945180 <col:40> 'const double *' <LValueToRValue>
|   |   | |   | | `-DeclRefExpr 0x154945140 <col:40> 'const double *' lvalue ParmVar 0x154928ca8 'parameters' 'const double *'
|   |   | |   | `-IntegerLiteral 0x154945160 <col:51> 'int' 0
|   |   | |   `-FloatingLiteral 0x1549451b8 <col:56> 'double' 1.000000e+00
|   |   | |-BinaryOperator 0x154945390 <line:51:7, col:57> 'double' contains-errors '='
|   |   | | |-DeclRefExpr 0x154945228 <col:7> 'double' lvalue Var 0x154944ef8 'center' 'double'
|   |   | | `-ConditionalOperator 0x154945360 <col:14, col:57> '<dependent type>' contains-errors
|   |   | |   |-ParenExpr 0x1549452a8 <col:14, col:37> 'int' contains-errors
|   |   | |   | `-BinaryOperator 0x154945288 <col:15, col:36> 'int' contains-errors '>='
|   |   | |   |   |-RecoveryExpr 0x154945248 <col:15> '<dependent type>' contains-errors lvalue
|   |   | |   |   `-IntegerLiteral 0x154945268 <col:36> 'int' 2
|   |   | |   |-ArraySubscriptExpr 0x154945320 <col:41, col:53> 'const double' lvalue
|   |   | |   | |-ImplicitCastExpr 0x154945308 <col:41> 'const double *' <LValueToRValue>
|   |   | |   | | `-DeclRefExpr 0x1549452c8 <col:41> 'const double *' lvalue ParmVar 0x154928ca8 'parameters' 'const double *'
|   |   | |   | `-IntegerLiteral 0x1549452e8 <col:52> 'int' 1
|   |   | |   `-FloatingLiteral 0x154945340 <col:57> 'double' 5.000000e-01
|   |   | |-BinaryOperator 0x154945518 <line:52:7, col:56> 'double' contains-errors '='
|   |   | | |-DeclRefExpr 0x1549453b0 <col:7> 'double' lvalue Var 0x154944f78 'range' 'double'
|   |   | | `-ConditionalOperator 0x1549454e8 <col:13, col:56> '<dependent type>' contains-errors
|   |   | |   |-ParenExpr 0x154945430 <col:13, col:36> 'int' contains-errors
|   |   | |   | `-BinaryOperator 0x154945410 <col:14, col:35> 'int' contains-errors '>='
|   |   | |   |   |-RecoveryExpr 0x1549453d0 <col:14> '<dependent type>' contains-errors lvalue
|   |   | |   |   `-IntegerLiteral 0x1549453f0 <col:35> 'int' 3
|   |   | |   |-ArraySubscriptExpr 0x1549454a8 <col:40, col:52> 'const double' lvalue
|   |   | |   | |-ImplicitCastExpr 0x154945490 <col:40> 'const double *' <LValueToRValue>
|   |   | |   | | `-DeclRefExpr 0x154945450 <col:40> 'const double *' lvalue ParmVar 0x154928ca8 'parameters' 'const double *'
|   |   | |   | `-IntegerLiteral 0x154945470 <col:51> 'int' 2
|   |   | |   `-FloatingLiteral 0x1549454c8 <col:56> 'double' 1.000000e+00
|   |   | |-BinaryOperator 0x1549456a0 <line:53:7, col:55> 'double' contains-errors '='
|   |   | | |-DeclRefExpr 0x154945538 <col:7> 'double' lvalue Var 0x154944e78 'bias' 'double'
|   |   | | `-ConditionalOperator 0x154945670 <col:12, col:55> '<dependent type>' contains-errors
|   |   | |   |-ParenExpr 0x1549455b8 <col:12, col:35> 'int' contains-errors
|   |   | |   | `-BinaryOperator 0x154945598 <col:13, col:34> 'int' contains-errors '>='
|   |   | |   |   |-RecoveryExpr 0x154945558 <col:13> '<dependent type>' contains-errors lvalue
|   |   | |   |   `-IntegerLiteral 0x154945578 <col:34> 'int' 4
|   |   | |   |-ArraySubscriptExpr 0x154945630 <col:39, col:51> 'const double' lvalue
|   |   | |   | |-ImplicitCastExpr 0x154945618 <col:39> 'const double *' <LValueToRValue>
|   |   | |   | | `-DeclRefExpr 0x1549455d8 <col:39> 'const double *' lvalue ParmVar 0x154928ca8 'parameters' 'const double *'
|   |   | |   | `-IntegerLiteral 0x1549455f8 <col:50> 'int' 3
|   |   | |   `-FloatingLiteral 0x154945650 <col:55> 'double' 5.000000e-01
|   |   | |-IfStmt 0x154945e38 <line:55:7, line:61:11> has_else
|   |   | | |-BinaryOperator 0x154945808 <line:55:12, col:23> 'int' '<='
|   |   | | | |-ImplicitCastExpr 0x1549457f0 <col:12> 'double' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x154945798 <col:12> 'double' lvalue Var 0x154928fb0 'result' 'double'
|   |   | | | `-UnaryOperator 0x1549457d8 <col:22, col:23> 'double' prefix '-'
|   |   | | |   `-FloatingLiteral 0x1549457b8 <col:23> 'double' 1.000000e+00
|   |   | | |-BinaryOperator 0x154945918 <line:56:9, col:27> 'double' '='
|   |   | | | |-DeclRefExpr 0x154945828 <col:9> 'double' lvalue Var 0x154928fb0 'result' 'double'
|   |   | | | `-BinaryOperator 0x1549458f8 <col:16, col:27> 'double' '-'
|   |   | | |   |-ImplicitCastExpr 0x1549458e0 <col:16> 'double' <LValueToRValue>
|   |   | | |   | `-DeclRefExpr 0x154945848 <col:16> 'double' lvalue Var 0x154944e78 'bias' 'double'
|   |   | | |   `-BinaryOperator 0x1549458c0 <col:21, col:27> 'double' '/'
|   |   | | |     |-ImplicitCastExpr 0x1549458a8 <col:21> 'double' <LValueToRValue>
|   |   | | |     | `-DeclRefExpr 0x154945868 <col:21> 'double' lvalue Var 0x154944f78 'range' 'double'
|   |   | | |     `-FloatingLiteral 0x154945888 <col:27> 'double' 2.000000e+00
|   |   | | `-IfStmt 0x154945e08 <line:58:9, line:61:11> has_else
|   |   | |   |-BinaryOperator 0x154945990 <line:58:13, col:23> 'int' '>='
|   |   | |   | |-ImplicitCastExpr 0x154945978 <col:13> 'double' <LValueToRValue>
|   |   | |   | | `-DeclRefExpr 0x154945938 <col:13> 'double' lvalue Var 0x154928fb0 'result' 'double'
|   |   | |   | `-FloatingLiteral 0x154945958 <col:23> 'double' 1.000000e+00
|   |   | |   |-BinaryOperator 0x154945ab0 <line:59:11, col:29> 'double' '='
|   |   | |   | |-DeclRefExpr 0x1549459b0 <col:11> 'double' lvalue Var 0x154928fb0 'result' 'double'
|   |   | |   | `-BinaryOperator 0x154945a90 <col:18, col:29> 'double' '+'
|   |   | |   |   |-ImplicitCastExpr 0x154945a78 <col:18> 'double' <LValueToRValue>
|   |   | |   |   | `-DeclRefExpr 0x1549459d0 <col:18> 'double' lvalue Var 0x154944e78 'bias' 'double'
|   |   | |   |   `-BinaryOperator 0x154945a58 <col:23, col:29> 'double' '/'
|   |   | |   |     |-ImplicitCastExpr 0x154945a40 <col:23> 'double' <LValueToRValue>
|   |   | |   |     | `-DeclRefExpr 0x154945a00 <col:23> 'double' lvalue Var 0x154944f78 'range' 'double'
|   |   | |   |     `-FloatingLiteral 0x154945a20 <col:29> 'double' 2.000000e+00
|   |   | |   `-NullStmt 0x154945e00 <line:61:11>
|   |   | `-BreakStmt 0x154945e88 <line:63:7>
|   |   |-CompoundStmt 0x154946ac0 <line:66:5, line:82:5>
|   |   | |-DeclStmt 0x154946100 <line:67:7, line:71:14>
|   |   | | |-VarDecl 0x154945ef0 <line:67:7, line:68:9> col:9 used center 'double'
|   |   | | |-VarDecl 0x154945f70 <line:67:7, line:69:9> col:9 used bias 'double'
|   |   | | |-VarDecl 0x154945ff0 <line:67:7, line:70:9> col:9 used range 'double'
|   |   | | `-VarDecl 0x154946070 <line:67:7, line:71:9> col:9 used slope 'double'
|   |   | |-BinaryOperator 0x154946280 <line:74:7, col:56> 'double' contains-errors '='
|   |   | | |-DeclRefExpr 0x154946118 <col:7> 'double' lvalue Var 0x154946070 'slope' 'double'
|   |   | | `-ConditionalOperator 0x154946250 <col:13, col:56> '<dependent type>' contains-errors
|   |   | |   |-ParenExpr 0x154946198 <col:13, col:36> 'int' contains-errors
|   |   | |   | `-BinaryOperator 0x154946178 <col:14, col:35> 'int' contains-errors '>='
|   |   | |   |   |-RecoveryExpr 0x154946138 <col:14> '<dependent type>' contains-errors lvalue
|   |   | |   |   `-IntegerLiteral 0x154946158 <col:35> 'int' 1
|   |   | |   |-ArraySubscriptExpr 0x154946210 <col:40, col:52> 'const double' lvalue
|   |   | |   | |-ImplicitCastExpr 0x1549461f8 <col:40> 'const double *' <LValueToRValue>
|   |   | |   | | `-DeclRefExpr 0x1549461b8 <col:40> 'const double *' lvalue ParmVar 0x154928ca8 'parameters' 'const double *'
|   |   | |   | `-IntegerLiteral 0x1549461d8 <col:51> 'int' 0
|   |   | |   `-FloatingLiteral 0x154946230 <col:56> 'double' 1.000000e+00
|   |   | |-BinaryOperator 0x154946408 <line:75:7, col:57> 'double' contains-errors '='
|   |   | | |-DeclRefExpr 0x1549462a0 <col:7> 'double' lvalue Var 0x154945ef0 'center' 'double'
|   |   | | `-ConditionalOperator 0x1549463d8 <col:14, col:57> '<dependent type>' contains-errors
|   |   | |   |-ParenExpr 0x154946320 <col:14, col:37> 'int' contains-errors
|   |   | |   | `-BinaryOperator 0x154946300 <col:15, col:36> 'int' contains-errors '>='
|   |   | |   |   |-RecoveryExpr 0x1549462c0 <col:15> '<dependent type>' contains-errors lvalue
|   |   | |   |   `-IntegerLiteral 0x1549462e0 <col:36> 'int' 2
|   |   | |   |-ArraySubscriptExpr 0x154946398 <col:41, col:53> 'const double' lvalue
|   |   | |   | |-ImplicitCastExpr 0x154946380 <col:41> 'const double *' <LValueToRValue>
|   |   | |   | | `-DeclRefExpr 0x154946340 <col:41> 'const double *' lvalue ParmVar 0x154928ca8 'parameters' 'const double *'
|   |   | |   | `-IntegerLiteral 0x154946360 <col:52> 'int' 1
|   |   | |   `-FloatingLiteral 0x1549463b8 <col:57> 'double' 5.000000e-01
|   |   | |-BinaryOperator 0x154946590 <line:76:7, col:56> 'double' contains-errors '='
|   |   | | |-DeclRefExpr 0x154946428 <col:7> 'double' lvalue Var 0x154945ff0 'range' 'double'
|   |   | | `-ConditionalOperator 0x154946560 <col:13, col:56> '<dependent type>' contains-errors
|   |   | |   |-ParenExpr 0x1549464a8 <col:13, col:36> 'int' contains-errors
|   |   | |   | `-BinaryOperator 0x154946488 <col:14, col:35> 'int' contains-errors '>='
|   |   | |   |   |-RecoveryExpr 0x154946448 <col:14> '<dependent type>' contains-errors lvalue
|   |   | |   |   `-IntegerLiteral 0x154946468 <col:35> 'int' 3
|   |   | |   |-ArraySubscriptExpr 0x154946520 <col:40, col:52> 'const double' lvalue
|   |   | |   | |-ImplicitCastExpr 0x154946508 <col:40> 'const double *' <LValueToRValue>
|   |   | |   | | `-DeclRefExpr 0x1549464c8 <col:40> 'const double *' lvalue ParmVar 0x154928ca8 'parameters' 'const double *'
|   |   | |   | `-IntegerLiteral 0x1549464e8 <col:51> 'int' 2
|   |   | |   `-FloatingLiteral 0x154946540 <col:56> 'double' 1.000000e+00
|   |   | |-BinaryOperator 0x154946718 <line:77:7, col:55> 'double' contains-errors '='
|   |   | | |-DeclRefExpr 0x1549465b0 <col:7> 'double' lvalue Var 0x154945f70 'bias' 'double'
|   |   | | `-ConditionalOperator 0x1549466e8 <col:12, col:55> '<dependent type>' contains-errors
|   |   | |   |-ParenExpr 0x154946630 <col:12, col:35> 'int' contains-errors
|   |   | |   | `-BinaryOperator 0x154946610 <col:13, col:34> 'int' contains-errors '>='
|   |   | |   |   |-RecoveryExpr 0x1549465d0 <col:13> '<dependent type>' contains-errors lvalue
|   |   | |   |   `-IntegerLiteral 0x1549465f0 <col:34> 'int' 4
|   |   | |   |-ArraySubscriptExpr 0x1549466a8 <col:39, col:51> 'const double' lvalue
|   |   | |   | |-ImplicitCastExpr 0x154946690 <col:39> 'const double *' <LValueToRValue>
|   |   | |   | | `-DeclRefExpr 0x154946650 <col:39> 'const double *' lvalue ParmVar 0x154928ca8 'parameters' 'const double *'
|   |   | |   | `-IntegerLiteral 0x154946670 <col:50> 'int' 3
|   |   | |   `-FloatingLiteral 0x1549466c8 <col:55> 'double' 5.000000e-01
|   |   | `-BreakStmt 0x154946ab8 <line:81:7>
|   |   `-BreakStmt 0x154946b00 <line:84:7>
|   `-ReturnStmt 0x154946d88 <line:86:3, col:32>
|     `-ParenExpr 0x154946d68 <col:9, col:32> 'int'
|       `-CallExpr 0x154946d28 <col:10, col:31> 'int'
|         |-ImplicitCastExpr 0x154946d10 <col:10> 'int (*)()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x154946ca0 <col:10> 'int ()' Function 0x154946be8 'ClampToQuantum' 'int ()'
|         `-ImplicitCastExpr 0x154946d50 <col:25> 'double' <LValueToRValue>
|           `-DeclRefExpr 0x154946cc0 <col:25> 'double' lvalue Var 0x154928fb0 'result' 'double'
|-FunctionDecl 0x154944a90 <line:37:48> col:48 implicit used sin 'double (double)' extern
| |-ParmVarDecl 0x154944b90 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x154944b38 <<invalid sloc>> Implicit 1157
| |-ConstAttr 0x154944c00 <col:48> Implicit
| `-NoThrowAttr 0x154944c28 <col:48> Implicit
|-FunctionDecl 0x154945b10 <line:61:43> col:43 implicit used asin 'double (double)' extern
| |-ParmVarDecl 0x154945c10 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x154945bb8 <<invalid sloc>> Implicit 1037
| |-ConstAttr 0x154945c80 <col:43> Implicit
| `-NoThrowAttr 0x154945ca8 <col:43> Implicit
`-FunctionDecl 0x1549467f8 <line:79:53> col:53 implicit used atan 'double (double)' extern
  |-ParmVarDecl 0x1549468f8 <<invalid sloc>> <invalid sloc> 'double'
  |-BuiltinAttr 0x1549468a0 <<invalid sloc>> Implicit 1043
  |-ConstAttr 0x154946968 <col:53> Implicit
  `-NoThrowAttr 0x154946990 <col:53> Implicit
