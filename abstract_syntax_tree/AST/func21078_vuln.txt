TranslationUnitDecl 0x13f855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x13f8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x13f855bd0 '__int128'
|-TypedefDecl 0x13f856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x13f855bf0 'unsigned __int128'
|-TypedefDecl 0x13f926230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13f926000 'struct __NSConstantString_tag'
|   `-Record 0x13f856580 '__NSConstantString_tag'
|-TypedefDecl 0x13f926298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x13f855d90 '__SVInt8_t'
|-TypedefDecl 0x13f926300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x13f855db0 '__SVInt16_t'
|-TypedefDecl 0x13f926368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x13f855dd0 '__SVInt32_t'
|-TypedefDecl 0x13f9263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x13f855df0 '__SVInt64_t'
|-TypedefDecl 0x13f926438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x13f855e10 '__SVUint8_t'
|-TypedefDecl 0x13f9264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x13f855e30 '__SVUint16_t'
|-TypedefDecl 0x13f926508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x13f855e50 '__SVUint32_t'
|-TypedefDecl 0x13f926570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x13f855e70 '__SVUint64_t'
|-TypedefDecl 0x13f9265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x13f855e90 '__SVFloat16_t'
|-TypedefDecl 0x13f926640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x13f855eb0 '__SVFloat32_t'
|-TypedefDecl 0x13f9266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x13f855ed0 '__SVFloat64_t'
|-TypedefDecl 0x13f926710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x13f855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13f926778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x13f855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13f9267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x13f855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13f926848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x13f855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13f9268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x13f855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13f926918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x13f855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13f926980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x13f855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13f9269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x13f855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13f926a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x13f855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13f926ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x13f856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13f926b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x13f856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13f926b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x13f856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13f926bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x13f856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13f926c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x13f856090 '__clang_svint8x3_t'
|-TypedefDecl 0x13f926cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x13f8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13f926d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x13f8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13f926d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x13f8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13f926df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x13f856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13f926e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x13f856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13f926ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x13f856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13f926f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x13f856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13f926f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x13f856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13f927800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x13f8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13f927868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x13f8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13f9278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x13f8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13f927938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x13f856210 '__clang_svint8x4_t'
|-TypedefDecl 0x13f9279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x13f856230 '__clang_svint16x4_t'
|-TypedefDecl 0x13f927a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x13f856250 '__clang_svint32x4_t'
|-TypedefDecl 0x13f927a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x13f856270 '__clang_svint64x4_t'
|-TypedefDecl 0x13f927ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x13f856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13f927b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x13f8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13f927ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x13f8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13f927c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x13f8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13f927c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x13f856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13f927ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x13f856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13f927d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x13f856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13f927db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x13f856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13f927e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x13f856390 '__SVBool_t'
|-TypedefDecl 0x13f927e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x13f8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13f927ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x13f8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13f927f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x13f8563f0 '__SVCount_t'
|-TypedefDecl 0x13f927ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13f927fb0 'char *'
|   `-BuiltinType 0x13f8556b0 'char'
|-TypedefDecl 0x13f928068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13f927fb0 'char *'
|   `-BuiltinType 0x13f8556b0 'char'
|-FunctionDecl 0x13f9282f8 <dataset_diviso_filec/func21078_vuln.c:1:1, line:35:1> line:1:12 parse_token 'int (char **, char **, char **)' static
| |-ParmVarDecl 0x13f928108 <col:24, col:31> col:31 used name 'char **'
| |-ParmVarDecl 0x13f928188 <col:37, col:44> col:44 used value 'char **'
| |-ParmVarDecl 0x13f928208 <col:51, col:58> col:58 used cp 'char **'
| `-CompoundStmt 0x13f942e78 <line:2:1, line:35:1>
|   |-DeclStmt 0x13f928480 <line:3:2, col:11>
|   | `-VarDecl 0x13f928418 <col:2, col:8> col:8 used end 'char *'
|   |-IfStmt 0x13f928688 <line:5:2, line:6:11>
|   | |-BinaryOperator 0x13f9285a8 <line:5:6, col:26> 'int' '||'
|   | | |-BinaryOperator 0x13f928538 <col:6, col:16> 'int' '||'
|   | | | |-UnaryOperator 0x13f9284d0 <col:6, col:7> 'int' prefix '!' cannot overflow
|   | | | | `-ImplicitCastExpr 0x13f9284b8 <col:7> 'char **' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x13f928498 <col:7> 'char **' lvalue ParmVar 0x13f928108 'name' 'char **'
|   | | | `-UnaryOperator 0x13f928520 <col:15, col:16> 'int' prefix '!' cannot overflow
|   | | |   `-ImplicitCastExpr 0x13f928508 <col:16> 'char **' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x13f9284e8 <col:16> 'char **' lvalue ParmVar 0x13f928188 'value' 'char **'
|   | | `-UnaryOperator 0x13f928590 <col:25, col:26> 'int' prefix '!' cannot overflow
|   | |   `-ImplicitCastExpr 0x13f928578 <col:26> 'char **' <LValueToRValue>
|   | |     `-DeclRefExpr 0x13f928558 <col:26> 'char **' lvalue ParmVar 0x13f928208 'cp' 'char **'
|   | `-ReturnStmt 0x13f928678 <line:6:3, col:11>
|   |   `-UnaryOperator 0x13f928660 <col:10, col:11> '<dependent type>' contains-errors prefix '-' cannot overflow
|   |     `-ImplicitCastExpr 0x13f928648 <col:11> '<dependent type>' contains-errors <LValueToRValue>
|   |       `-RecoveryExpr 0x13f928628 <col:11> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x13f941140 <line:8:2, line:9:10>
|   | |-UnaryOperator 0x13f9410f8 <line:8:6, col:33> 'int' prefix '!' cannot overflow
|   | | `-ParenExpr 0x13f9410d8 <col:7, col:33> 'char *'
|   | |   `-BinaryOperator 0x13f9410b8 <col:8, col:32> 'char *' '='
|   | |     |-UnaryOperator 0x13f9286e0 <col:8, col:9> 'char *' lvalue prefix '*' cannot overflow
|   | |     | `-ImplicitCastExpr 0x13f9286c8 <col:9> 'char **' <LValueToRValue>
|   | |     |   `-DeclRefExpr 0x13f9286a8 <col:9> 'char **' lvalue ParmVar 0x13f928188 'value' 'char **'
|   | |     `-CallExpr 0x13f941058 <col:17, col:32> 'char *'
|   | |       |-ImplicitCastExpr 0x13f941040 <col:17> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x13f940f70 <col:17> 'char *(const char *, int)' Function 0x13f940d90 'strchr' 'char *(const char *, int)'
|   | |       |-ImplicitCastExpr 0x13f9410a0 <col:24, col:25> 'const char *' <NoOp>
|   | |       | `-ImplicitCastExpr 0x13f941088 <col:24, col:25> 'char *' <LValueToRValue>
|   | |       |   `-UnaryOperator 0x13f940fc8 <col:24, col:25> 'char *' lvalue prefix '*' cannot overflow
|   | |       |     `-ImplicitCastExpr 0x13f940fb0 <col:25> 'char **' <LValueToRValue>
|   | |       |       `-DeclRefExpr 0x13f940f90 <col:25> 'char **' lvalue ParmVar 0x13f928208 'cp' 'char **'
|   | |       `-CharacterLiteral 0x13f940fe0 <col:29> 'int' 61
|   | `-ReturnStmt 0x13f941130 <line:9:3, col:10>
|   |   `-IntegerLiteral 0x13f941110 <col:10> 'int' 0
|   |-BinaryOperator 0x13f941210 <line:11:2, col:12> 'char' '='
|   | |-UnaryOperator 0x13f9411c8 <col:2, col:4> 'char' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x13f9411b0 <col:3, col:4> 'char *' <LValueToRValue>
|   | |   `-UnaryOperator 0x13f941198 <col:3, col:4> 'char *' lvalue prefix '*' cannot overflow
|   | |     `-ImplicitCastExpr 0x13f941180 <col:4> 'char **' <LValueToRValue>
|   | |       `-DeclRefExpr 0x13f941160 <col:4> 'char **' lvalue ParmVar 0x13f928188 'value' 'char **'
|   | `-ImplicitCastExpr 0x13f9411f8 <col:12> 'char' <IntegralCast>
|   |   `-CharacterLiteral 0x13f9411e0 <col:12> 'int' 0
|   |-BinaryOperator 0x13f9414a0 <line:12:2, col:24> 'char *' '='
|   | |-UnaryOperator 0x13f941268 <col:2, col:3> 'char *' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x13f941250 <col:3> 'char **' <LValueToRValue>
|   | |   `-DeclRefExpr 0x13f941230 <col:3> 'char **' lvalue ParmVar 0x13f928108 'name' 'char **'
|   | `-ImplicitCastExpr 0x13f941488 <col:10, col:24> 'char *' <IntegralToPointer>
|   |   `-CallExpr 0x13f941448 <col:10, col:24> 'int'
|   |     |-ImplicitCastExpr 0x13f941430 <col:10> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x13f941390 <col:10> 'int ()' Function 0x13f9412d8 'strip_line' 'int ()'
|   |     `-ImplicitCastExpr 0x13f941470 <col:21, col:22> 'char *' <LValueToRValue>
|   |       `-UnaryOperator 0x13f9413e8 <col:21, col:22> 'char *' lvalue prefix '*' cannot overflow
|   |         `-ImplicitCastExpr 0x13f9413d0 <col:22> 'char **' <LValueToRValue>
|   |           `-DeclRefExpr 0x13f9413b0 <col:22> 'char **' lvalue ParmVar 0x13f928208 'cp' 'char **'
|   |-BinaryOperator 0x13f941710 <line:13:2, col:37> 'char *' '='
|   | |-UnaryOperator 0x13f9414f8 <col:2, col:3> 'char *' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x13f9414e0 <col:3> 'char **' <LValueToRValue>
|   | |   `-DeclRefExpr 0x13f9414c0 <col:3> 'char **' lvalue ParmVar 0x13f928188 'value' 'char **'
|   | `-ImplicitCastExpr 0x13f9416f8 <col:11, col:37> 'char *' <IntegralToPointer>
|   |   `-CallExpr 0x13f9416d0 <col:11, col:37> 'int'
|   |     |-ImplicitCastExpr 0x13f9416b8 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x13f9415f0 <col:11> 'int ()' Function 0x13f941538 'skip_over_blank' 'int ()'
|   |     `-BinaryOperator 0x13f941698 <col:27, col:36> 'char *' '+'
|   |       |-ImplicitCastExpr 0x13f941680 <col:27, col:28> 'char *' <LValueToRValue>
|   |       | `-UnaryOperator 0x13f941648 <col:27, col:28> 'char *' lvalue prefix '*' cannot overflow
|   |       |   `-ImplicitCastExpr 0x13f941630 <col:28> 'char **' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x13f941610 <col:28> 'char **' lvalue ParmVar 0x13f928188 'value' 'char **'
|   |       `-IntegerLiteral 0x13f941660 <col:36> 'int' 1
|   |-IfStmt 0x13f942d70 <line:15:2, line:31:2> has_else
|   | |-BinaryOperator 0x13f9417f8 <line:15:6, col:17> 'int' '=='
|   | | |-ImplicitCastExpr 0x13f9417e0 <col:6, col:8> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x13f9417c8 <col:6, col:8> 'char' <LValueToRValue>
|   | | |   `-UnaryOperator 0x13f941798 <col:6, col:8> 'char' lvalue prefix '*' cannot overflow
|   | | |     `-ImplicitCastExpr 0x13f941780 <col:7, col:8> 'char *' <LValueToRValue>
|   | | |       `-UnaryOperator 0x13f941768 <col:7, col:8> 'char *' lvalue prefix '*' cannot overflow
|   | | |         `-ImplicitCastExpr 0x13f941750 <col:8> 'char **' <LValueToRValue>
|   | | |           `-DeclRefExpr 0x13f941730 <col:8> 'char **' lvalue ParmVar 0x13f928188 'value' 'char **'
|   | | `-CharacterLiteral 0x13f9417b0 <col:17> 'int' 34
|   | |-CompoundStmt 0x13f942998 <col:22, line:25:2>
|   | | |-BinaryOperator 0x13f941978 <line:16:3, col:31> 'char *' '='
|   | | | |-DeclRefExpr 0x13f941818 <col:3> 'char *' lvalue Var 0x13f928418 'end' 'char *'
|   | | | `-CallExpr 0x13f941930 <col:9, col:31> 'char *'
|   | | |   |-ImplicitCastExpr 0x13f941918 <col:9> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x13f941838 <col:9> 'char *(const char *, int)' Function 0x13f940d90 'strchr' 'char *(const char *, int)'
|   | | |   |-ImplicitCastExpr 0x13f941960 <col:16, col:25> 'const char *' <NoOp>
|   | | |   | `-BinaryOperator 0x13f9418e0 <col:16, col:25> 'char *' '+'
|   | | |   |   |-ImplicitCastExpr 0x13f9418c8 <col:16, col:17> 'char *' <LValueToRValue>
|   | | |   |   | `-UnaryOperator 0x13f941890 <col:16, col:17> 'char *' lvalue prefix '*' cannot overflow
|   | | |   |   |   `-ImplicitCastExpr 0x13f941878 <col:17> 'char **' <LValueToRValue>
|   | | |   |   |     `-DeclRefExpr 0x13f941858 <col:17> 'char **' lvalue ParmVar 0x13f928188 'value' 'char **'
|   | | |   |   `-IntegerLiteral 0x13f9418a8 <col:25> 'int' 1
|   | | |   `-CharacterLiteral 0x13f941900 <col:28> 'int' 34
|   | | |-IfStmt 0x13f942818 <line:17:3, line:21:3>
|   | | | |-UnaryOperator 0x13f9419d0 <line:17:7, col:8> 'int' prefix '!' cannot overflow
|   | | | | `-ImplicitCastExpr 0x13f9419b8 <col:8> 'char *' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x13f941998 <col:8> 'char *' lvalue Var 0x13f928418 'end' 'char *'
|   | | | `-CompoundStmt 0x13f9427f0 <col:13, line:21:3>
|   | | |   |-CallExpr 0x13f942640 <line:18:4, col:37> '<dependent type>' contains-errors
|   | | |   | |-DeclRefExpr 0x13f9422e0 <col:4> 'int ()' Function 0x13f942228 'DBG' 'int ()'
|   | | |   | |-RecoveryExpr 0x13f942578 <col:8> '<dependent type>' contains-errors lvalue
|   | | |   | `-CallExpr 0x13f9425e0 <col:14, col:36> 'int'
|   | | |   |   |-ImplicitCastExpr 0x13f9425c8 <col:14> 'int (*)()' <FunctionToPointerDecay>
|   | | |   |   | `-DeclRefExpr 0x13f9423f8 <col:14> 'int ()' Function 0x13f942340 'ul_debug' 'int ()'
|   | | |   |   |-ImplicitCastExpr 0x13f942610 <col:23> 'char *' <ArrayToPointerDecay>
|   | | |   |   | `-StringLiteral 0x13f942460 <col:23> 'char[4]' lvalue "STR"
|   | | |   |   `-ImplicitCastExpr 0x13f942628 <col:30, col:31> 'char *' <LValueToRValue>
|   | | |   |     `-UnaryOperator 0x13f9425b0 <col:30, col:31> 'char *' lvalue prefix '*' cannot overflow
|   | | |   |       `-ImplicitCastExpr 0x13f942598 <col:31> 'char **' <LValueToRValue>
|   | | |   |         `-DeclRefExpr 0x13f942480 <col:31> 'char **' lvalue ParmVar 0x13f928188 'value' 'char **'
|   | | |   |-BinaryOperator 0x13f942728 <line:19:4, col:11> 'char *' '='
|   | | |   | |-UnaryOperator 0x13f9426a8 <col:4, col:5> 'char *' lvalue prefix '*' cannot overflow
|   | | |   | | `-ImplicitCastExpr 0x13f942690 <col:5> 'char **' <LValueToRValue>
|   | | |   | |   `-DeclRefExpr 0x13f942670 <col:5> 'char **' lvalue ParmVar 0x13f928208 'cp' 'char **'
|   | | |   | `-ImplicitCastExpr 0x13f942710 <col:10, col:11> 'char *' <LValueToRValue>
|   | | |   |   `-UnaryOperator 0x13f9426f8 <col:10, col:11> 'char *' lvalue prefix '*' cannot overflow
|   | | |   |     `-ImplicitCastExpr 0x13f9426e0 <col:11> 'char **' <LValueToRValue>
|   | | |   |       `-DeclRefExpr 0x13f9426c0 <col:11> 'char **' lvalue ParmVar 0x13f928188 'value' 'char **'
|   | | |   `-ReturnStmt 0x13f9427e0 <line:20:4, col:12>
|   | | |     `-UnaryOperator 0x13f9427c8 <col:11, col:12> '<dependent type>' contains-errors prefix '-' cannot overflow
|   | | |       `-ImplicitCastExpr 0x13f9427b0 <col:12> '<dependent type>' contains-errors <LValueToRValue>
|   | | |         `-RecoveryExpr 0x13f942790 <col:12> '<dependent type>' contains-errors lvalue
|   | | |-UnaryOperator 0x13f9428a8 <line:22:3, col:11> 'char *' postfix '++'
|   | | | `-ParenExpr 0x13f942888 <col:3, col:10> 'char *' lvalue
|   | | |   `-UnaryOperator 0x13f942870 <col:4, col:5> 'char *' lvalue prefix '*' cannot overflow
|   | | |     `-ImplicitCastExpr 0x13f942858 <col:5> 'char **' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x13f942838 <col:5> 'char **' lvalue ParmVar 0x13f928188 'value' 'char **'
|   | | |-BinaryOperator 0x13f942940 <line:23:3, col:10> 'char' '='
|   | | | |-UnaryOperator 0x13f9428f8 <col:3, col:4> 'char' lvalue prefix '*' cannot overflow
|   | | | | `-ImplicitCastExpr 0x13f9428e0 <col:4> 'char *' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x13f9428c0 <col:4> 'char *' lvalue Var 0x13f928418 'end' 'char *'
|   | | | `-ImplicitCastExpr 0x13f942928 <col:10> 'char' <IntegralCast>
|   | | |   `-CharacterLiteral 0x13f942910 <col:10> 'int' 0
|   | | `-UnaryOperator 0x13f942980 <line:24:3, col:6> 'char *' postfix '++'
|   | |   `-DeclRefExpr 0x13f942960 <col:3> 'char *' lvalue Var 0x13f928418 'end' 'char *'
|   | `-CompoundStmt 0x13f942d50 <line:25:9, line:31:2>
|   |   |-BinaryOperator 0x13f942bb0 <line:26:3, col:30> 'char *' '='
|   |   | |-DeclRefExpr 0x13f9429d0 <col:3> 'char *' lvalue Var 0x13f928418 'end' 'char *'
|   |   | `-ImplicitCastExpr 0x13f942b98 <col:9, col:30> 'char *' <IntegralToPointer>
|   |   |   `-CallExpr 0x13f942b58 <col:9, col:30> 'int'
|   |   |     |-ImplicitCastExpr 0x13f942b40 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x13f942ad0 <col:9> 'int ()' Function 0x13f942a18 'skip_over_word' 'int ()'
|   |   |     `-ImplicitCastExpr 0x13f942b80 <col:24, col:25> 'char *' <LValueToRValue>
|   |   |       `-UnaryOperator 0x13f942b28 <col:24, col:25> 'char *' lvalue prefix '*' cannot overflow
|   |   |         `-ImplicitCastExpr 0x13f942b10 <col:25> 'char **' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x13f942af0 <col:25> 'char **' lvalue ParmVar 0x13f928188 'value' 'char **'
|   |   `-IfStmt 0x13f942d30 <line:27:3, line:30:3>
|   |     |-ImplicitCastExpr 0x13f942c20 <line:27:7, col:8> 'char' <LValueToRValue>
|   |     | `-UnaryOperator 0x13f942c08 <col:7, col:8> 'char' lvalue prefix '*' cannot overflow
|   |     |   `-ImplicitCastExpr 0x13f942bf0 <col:8> 'char *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x13f942bd0 <col:8> 'char *' lvalue Var 0x13f928418 'end' 'char *'
|   |     `-CompoundStmt 0x13f942d10 <col:13, line:30:3>
|   |       |-BinaryOperator 0x13f942cb8 <line:28:4, col:11> 'char' '='
|   |       | |-UnaryOperator 0x13f942c70 <col:4, col:5> 'char' lvalue prefix '*' cannot overflow
|   |       | | `-ImplicitCastExpr 0x13f942c58 <col:5> 'char *' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x13f942c38 <col:5> 'char *' lvalue Var 0x13f928418 'end' 'char *'
|   |       | `-ImplicitCastExpr 0x13f942ca0 <col:11> 'char' <IntegralCast>
|   |       |   `-CharacterLiteral 0x13f942c88 <col:11> 'int' 0
|   |       `-UnaryOperator 0x13f942cf8 <line:29:4, col:7> 'char *' postfix '++'
|   |         `-DeclRefExpr 0x13f942cd8 <col:4> 'char *' lvalue Var 0x13f928418 'end' 'char *'
|   |-BinaryOperator 0x13f942e28 <line:32:2, col:8> 'char *' '='
|   | |-UnaryOperator 0x13f942dd8 <col:2, col:3> 'char *' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x13f942dc0 <col:3> 'char **' <LValueToRValue>
|   | |   `-DeclRefExpr 0x13f942da0 <col:3> 'char **' lvalue ParmVar 0x13f928208 'cp' 'char **'
|   | `-ImplicitCastExpr 0x13f942e10 <col:8> 'char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x13f942df0 <col:8> 'char *' lvalue Var 0x13f928418 'end' 'char *'
|   `-ReturnStmt 0x13f942e68 <line:34:2, col:9>
|     `-IntegerLiteral 0x13f942e48 <col:9> 'int' 1
`-FunctionDecl 0x13f940d90 <line:8:17> col:17 implicit used strchr 'char *(const char *, int)' extern
  |-ParmVarDecl 0x13f940e90 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x13f940ef8 <<invalid sloc>> <invalid sloc> 'int'
  `-BuiltinAttr 0x13f940e38 <<invalid sloc>> Implicit 893
