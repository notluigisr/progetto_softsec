TranslationUnitDecl 0x14e055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x14e0564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x14e055bd0 '__int128'
|-TypedefDecl 0x14e056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x14e055bf0 'unsigned __int128'
|-TypedefDecl 0x14e126a30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x14e126800 'struct __NSConstantString_tag'
|   `-Record 0x14e056580 '__NSConstantString_tag'
|-TypedefDecl 0x14e126a98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x14e055d90 '__SVInt8_t'
|-TypedefDecl 0x14e126b00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x14e055db0 '__SVInt16_t'
|-TypedefDecl 0x14e126b68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x14e055dd0 '__SVInt32_t'
|-TypedefDecl 0x14e126bd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x14e055df0 '__SVInt64_t'
|-TypedefDecl 0x14e126c38 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x14e055e10 '__SVUint8_t'
|-TypedefDecl 0x14e126ca0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x14e055e30 '__SVUint16_t'
|-TypedefDecl 0x14e126d08 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x14e055e50 '__SVUint32_t'
|-TypedefDecl 0x14e126d70 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x14e055e70 '__SVUint64_t'
|-TypedefDecl 0x14e126dd8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x14e055e90 '__SVFloat16_t'
|-TypedefDecl 0x14e126e40 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x14e055eb0 '__SVFloat32_t'
|-TypedefDecl 0x14e126ea8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x14e055ed0 '__SVFloat64_t'
|-TypedefDecl 0x14e126f10 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x14e055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x14e126f78 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x14e055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x14e126fe0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x14e055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x14e127048 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x14e055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x14e1270b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x14e055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x14e127118 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x14e055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x14e127180 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x14e055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x14e1271e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x14e055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x14e127250 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x14e055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x14e1272b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x14e056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x14e127320 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x14e056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x14e127388 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x14e056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x14e1273f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x14e056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x14e127458 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x14e056090 '__clang_svint8x3_t'
|-TypedefDecl 0x14e1274c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x14e0560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x14e127528 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x14e0560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x14e127590 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x14e0560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x14e1275f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x14e056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x14e127660 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x14e056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x14e1276c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x14e056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x14e127730 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x14e056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x14e127798 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x14e056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x14e128000 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x14e0561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x14e128068 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x14e0561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x14e1280d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x14e0561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x14e128138 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x14e056210 '__clang_svint8x4_t'
|-TypedefDecl 0x14e1281a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x14e056230 '__clang_svint16x4_t'
|-TypedefDecl 0x14e128208 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x14e056250 '__clang_svint32x4_t'
|-TypedefDecl 0x14e128270 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x14e056270 '__clang_svint64x4_t'
|-TypedefDecl 0x14e1282d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x14e056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x14e128340 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x14e0562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x14e1283a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x14e0562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x14e128410 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x14e0562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x14e128478 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x14e056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x14e1284e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x14e056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x14e128548 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x14e056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x14e1285b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x14e056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x14e128618 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x14e056390 '__SVBool_t'
|-TypedefDecl 0x14e128680 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x14e0563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x14e1286e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x14e0563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x14e128750 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x14e0563f0 '__SVCount_t'
|-TypedefDecl 0x14e1287f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x14e1287b0 'char *'
|   `-BuiltinType 0x14e0556b0 'char'
|-TypedefDecl 0x14e128868 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x14e1287b0 'char *'
|   `-BuiltinType 0x14e0556b0 'char'
`-FunctionDecl 0x14e128c18 <dataset_diviso_filec/func18628_nonvuln.c:1:1, line:68:1> line:1:12 CheckAlgo 'int (int, int, int *, int *, int *)' static
  |-ParmVarDecl 0x14e1288d8 <col:22, col:26> col:26 used first 'int'
  |-ParmVarDecl 0x14e128958 <col:33, col:37> col:37 used second 'int'
  |-ParmVarDecl 0x14e128a08 <col:45, col:50> col:50 used id 'int *'
  |-ParmVarDecl 0x14e128a88 <col:54, col:59> col:59 used version 'int *'
  |-ParmVarDecl 0x14e128b08 <col:68, col:73> col:73 used blockSz 'int *'
  `-CompoundStmt 0x14e142be0 <line:2:1, line:68:1>
    |-BinaryOperator 0x14e128e50 <line:3:5, col:16> 'int' contains-errors '='
    | |-UnaryOperator 0x14e128e18 <col:5, col:6> 'int' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x14e128e00 <col:6> 'int *' <LValueToRValue>
    | |   `-DeclRefExpr 0x14e128d30 <col:6> 'int *' lvalue ParmVar 0x14e128a08 'id' 'int *'
    | `-RecoveryExpr 0x14e128e30 <col:16> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x14e128f78 <line:4:5, col:16> 'int' contains-errors '='
    | |-UnaryOperator 0x14e128f40 <col:5, col:6> 'int' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x14e128f28 <col:6> 'int *' <LValueToRValue>
    | |   `-DeclRefExpr 0x14e128e70 <col:6> 'int *' lvalue ParmVar 0x14e128a88 'version' 'int *'
    | `-RecoveryExpr 0x14e128f58 <col:16> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x14e141270 <line:5:5, col:29>
    | |-ImplicitCastExpr 0x14e128fb8 <col:9> 'int *' <LValueToRValue>
    | | `-DeclRefExpr 0x14e128f98 <col:9> 'int *' lvalue ParmVar 0x14e128b08 'blockSz' 'int *'
    | `-BinaryOperator 0x14e141250 <col:18, col:29> 'int' '='
    |   |-UnaryOperator 0x14e141218 <col:18, col:19> 'int' lvalue prefix '*' cannot overflow
    |   | `-ImplicitCastExpr 0x14e141200 <col:19> 'int *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x14e128fd0 <col:19> 'int *' lvalue ParmVar 0x14e128b08 'blockSz' 'int *'
    |   `-IntegerLiteral 0x14e141230 <col:29> 'int' 8
    |-IfStmt 0x14e141f20 <line:7:5, line:39:5>
    | |-BinaryOperator 0x14e1412e8 <line:7:9, col:18> 'int' '=='
    | | |-ImplicitCastExpr 0x14e1412d0 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14e141290 <col:9> 'int' lvalue ParmVar 0x14e1288d8 'first' 'int'
    | | `-IntegerLiteral 0x14e1412b0 <col:18> 'int' 1
    | `-CompoundStmt 0x14e141f08 <col:21, line:39:5>
    |   `-SwitchStmt 0x14e141340 <line:8:9, line:38:9>
    |     |-ImplicitCastExpr 0x14e141328 <line:8:17> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x14e141308 <col:17> 'int' lvalue ParmVar 0x14e128958 'second' 'int'
    |     `-CompoundStmt 0x14e141e98 <col:25, line:38:9>
    |       |-BinaryOperator 0x14e141488 <line:12:13, col:19> 'int' contains-errors '='
    |       | |-UnaryOperator 0x14e141450 <col:13, col:14> 'int' lvalue prefix '*' cannot overflow
    |       | | `-ImplicitCastExpr 0x14e141438 <col:14> 'int *' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x14e141380 <col:14> 'int *' lvalue ParmVar 0x14e128a08 'id' 'int *'
    |       | `-RecoveryExpr 0x14e141468 <col:19> '<dependent type>' contains-errors lvalue
    |       |-BinaryOperator 0x14e1415b0 <line:13:13, col:24> 'int' contains-errors '='
    |       | |-UnaryOperator 0x14e141578 <col:13, col:14> 'int' lvalue prefix '*' cannot overflow
    |       | | `-ImplicitCastExpr 0x14e141560 <col:14> 'int *' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x14e1414a8 <col:14> 'int *' lvalue ParmVar 0x14e128a88 'version' 'int *'
    |       | `-RecoveryExpr 0x14e141590 <col:24> '<dependent type>' contains-errors lvalue
    |       |-ReturnStmt 0x14e1415f0 <line:14:13, col:20>
    |       | `-IntegerLiteral 0x14e1415d0 <col:20> 'int' 0
    |       |-BinaryOperator 0x14e141720 <line:18:13, col:19> 'int' contains-errors '='
    |       | |-UnaryOperator 0x14e1416e8 <col:13, col:14> 'int' lvalue prefix '*' cannot overflow
    |       | | `-ImplicitCastExpr 0x14e1416d0 <col:14> 'int *' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x14e141618 <col:14> 'int *' lvalue ParmVar 0x14e128a08 'id' 'int *'
    |       | `-RecoveryExpr 0x14e141700 <col:19> '<dependent type>' contains-errors lvalue
    |       |-BinaryOperator 0x14e141848 <line:19:13, col:24> 'int' contains-errors '='
    |       | |-UnaryOperator 0x14e141810 <col:13, col:14> 'int' lvalue prefix '*' cannot overflow
    |       | | `-ImplicitCastExpr 0x14e1417f8 <col:14> 'int *' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x14e141740 <col:14> 'int *' lvalue ParmVar 0x14e128a88 'version' 'int *'
    |       | `-RecoveryExpr 0x14e141828 <col:24> '<dependent type>' contains-errors lvalue
    |       |-IfStmt 0x14e1419c8 <line:20:13, col:37>
    |       | |-ImplicitCastExpr 0x14e141888 <col:17> 'int *' <LValueToRValue>
    |       | | `-DeclRefExpr 0x14e141868 <col:17> 'int *' lvalue ParmVar 0x14e128b08 'blockSz' 'int *'
    |       | `-BinaryOperator 0x14e1419a8 <col:26, col:37> 'int' contains-errors '='
    |       |   |-UnaryOperator 0x14e141970 <col:26, col:27> 'int' lvalue prefix '*' cannot overflow
    |       |   | `-ImplicitCastExpr 0x14e141958 <col:27> 'int *' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x14e1418a0 <col:27> 'int *' lvalue ParmVar 0x14e128b08 'blockSz' 'int *'
    |       |   `-RecoveryExpr 0x14e141988 <col:37> '<dependent type>' contains-errors lvalue
    |       |-ReturnStmt 0x14e141a08 <line:21:13, col:20>
    |       | `-IntegerLiteral 0x14e1419e8 <col:20> 'int' 0
    |       |-BinaryOperator 0x14e141b38 <line:23:13, col:19> 'int' contains-errors '='
    |       | |-UnaryOperator 0x14e141b00 <col:13, col:14> 'int' lvalue prefix '*' cannot overflow
    |       | | `-ImplicitCastExpr 0x14e141ae8 <col:14> 'int *' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x14e141a30 <col:14> 'int *' lvalue ParmVar 0x14e128a08 'id' 'int *'
    |       | `-RecoveryExpr 0x14e141b18 <col:19> '<dependent type>' contains-errors lvalue
    |       |-BinaryOperator 0x14e141c60 <line:24:13, col:24> 'int' contains-errors '='
    |       | |-UnaryOperator 0x14e141c28 <col:13, col:14> 'int' lvalue prefix '*' cannot overflow
    |       | | `-ImplicitCastExpr 0x14e141c10 <col:14> 'int *' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x14e141b58 <col:14> 'int *' lvalue ParmVar 0x14e128a88 'version' 'int *'
    |       | `-RecoveryExpr 0x14e141c40 <col:24> '<dependent type>' contains-errors lvalue
    |       |-IfStmt 0x14e141de0 <line:25:13, col:37>
    |       | |-ImplicitCastExpr 0x14e141ca0 <col:17> 'int *' <LValueToRValue>
    |       | | `-DeclRefExpr 0x14e141c80 <col:17> 'int *' lvalue ParmVar 0x14e128b08 'blockSz' 'int *'
    |       | `-BinaryOperator 0x14e141dc0 <col:26, col:37> 'int' contains-errors '='
    |       |   |-UnaryOperator 0x14e141d88 <col:26, col:27> 'int' lvalue prefix '*' cannot overflow
    |       |   | `-ImplicitCastExpr 0x14e141d70 <col:27> 'int *' <LValueToRValue>
    |       |   |   `-DeclRefExpr 0x14e141cb8 <col:27> 'int *' lvalue ParmVar 0x14e128b08 'blockSz' 'int *'
    |       |   `-RecoveryExpr 0x14e141da0 <col:37> '<dependent type>' contains-errors lvalue
    |       |-ReturnStmt 0x14e141e20 <line:26:13, col:20>
    |       | `-IntegerLiteral 0x14e141e00 <col:20> 'int' 0
    |       `-DefaultStmt 0x14e141e78 <line:36:9, line:37:20>
    |         `-ReturnStmt 0x14e141e68 <col:13, col:20>
    |           `-RecoveryExpr 0x14e141e48 <col:20> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x14e142020 <line:41:5, line:42:16>
    | |-BinaryOperator 0x14e141fb8 <line:41:9, col:18> 'int' contains-errors '!='
    | | |-DeclRefExpr 0x14e141f40 <col:9> 'int' lvalue ParmVar 0x14e1288d8 'first' 'int'
    | | `-RecoveryExpr 0x14e141f98 <col:18> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x14e142010 <line:42:9, col:16>
    |   `-RecoveryExpr 0x14e141ff0 <col:16> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x14e142650 <line:44:5, line:47:5>
    | |-BinaryOperator 0x14e1420b8 <line:44:9, col:19> 'int' contains-errors '=='
    | | |-DeclRefExpr 0x14e142040 <col:9> 'int' lvalue ParmVar 0x14e128958 'second' 'int'
    | | `-RecoveryExpr 0x14e142098 <col:19> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x14e142630 <col:26, line:47:5>
    |   |-BinaryOperator 0x14e1421e0 <line:45:9, col:20> 'int' contains-errors '='
    |   | |-UnaryOperator 0x14e1421a8 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
    |   | | `-ImplicitCastExpr 0x14e142190 <col:10> 'int *' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x14e1420d8 <col:10> 'int *' lvalue ParmVar 0x14e128a88 'version' 'int *'
    |   | `-RecoveryExpr 0x14e1421c0 <col:20> '<dependent type>' contains-errors lvalue
    |   `-ReturnStmt 0x14e142620 <line:46:9, col:16>
    |     `-IntegerLiteral 0x14e142600 <col:16> 'int' 0
    `-SwitchStmt 0x14e1426a8 <line:49:5, line:67:5>
      |-ImplicitCastExpr 0x14e142690 <line:49:13> 'int' <LValueToRValue>
      | `-DeclRefExpr 0x14e142670 <col:13> 'int' lvalue ParmVar 0x14e128958 'second' 'int'
      `-CompoundStmt 0x14e142ba0 <col:21, line:67:5>
        |-CaseStmt 0x14e142708 <line:52:5, line:53:15>
        | |-ConstantExpr 0x14e1426f0 <line:52:10> 'int'
        | | `-IntegerLiteral 0x14e1426d0 <col:10> 'int' 3
        | `-BinaryOperator 0x14e142838 <line:53:9, col:15> 'int' contains-errors '='
        |   |-UnaryOperator 0x14e142800 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
        |   | `-ImplicitCastExpr 0x14e1427e8 <col:10> 'int *' <LValueToRValue>
        |   |   `-DeclRefExpr 0x14e142730 <col:10> 'int *' lvalue ParmVar 0x14e128a08 'id' 'int *'
        |   `-RecoveryExpr 0x14e142818 <col:15> '<dependent type>' contains-errors lvalue
        |-IfStmt 0x14e1429b8 <line:54:9, col:33>
        | |-ImplicitCastExpr 0x14e142878 <col:13> 'int *' <LValueToRValue>
        | | `-DeclRefExpr 0x14e142858 <col:13> 'int *' lvalue ParmVar 0x14e128b08 'blockSz' 'int *'
        | `-BinaryOperator 0x14e142998 <col:22, col:33> 'int' contains-errors '='
        |   |-UnaryOperator 0x14e142960 <col:22, col:23> 'int' lvalue prefix '*' cannot overflow
        |   | `-ImplicitCastExpr 0x14e142948 <col:23> 'int *' <LValueToRValue>
        |   |   `-DeclRefExpr 0x14e142890 <col:23> 'int *' lvalue ParmVar 0x14e128b08 'blockSz' 'int *'
        |   `-RecoveryExpr 0x14e142978 <col:33> '<dependent type>' contains-errors lvalue
        |-ReturnStmt 0x14e1429f8 <line:55:9, col:16>
        | `-IntegerLiteral 0x14e1429d8 <col:16> 'int' 0
        |-CaseStmt 0x14e142a40 <line:58:5, <invalid sloc>>
        | |-ConstantExpr 0x14e142a28 <col:10> 'int'
        | | `-IntegerLiteral 0x14e142a08 <col:10> 'int' 10
        | `-NullStmt 0x14e142ab8 <<invalid sloc>>
        |-ReturnStmt 0x14e142b68 <line:61:9, col:16>
        | `-IntegerLiteral 0x14e142b48 <col:16> 'int' 0
        `-DefaultStmt 0x14e142b80 <line:64:5, col:12>
          `-NullStmt 0x14e142b78 <col:12>
