TranslationUnitDecl 0x120055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1200564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x120055bd0 '__int128'
|-TypedefDecl 0x120056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x120055bf0 'unsigned __int128'
|-TypedefDecl 0x10280be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x10280bc00 'struct __NSConstantString_tag'
|   `-Record 0x120056580 '__NSConstantString_tag'
|-TypedefDecl 0x10280be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x120055d90 '__SVInt8_t'
|-TypedefDecl 0x10280bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x120055db0 '__SVInt16_t'
|-TypedefDecl 0x10280bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x120055dd0 '__SVInt32_t'
|-TypedefDecl 0x10280bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x120055df0 '__SVInt64_t'
|-TypedefDecl 0x10280c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x120055e10 '__SVUint8_t'
|-TypedefDecl 0x10280c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x120055e30 '__SVUint16_t'
|-TypedefDecl 0x10280c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x120055e50 '__SVUint32_t'
|-TypedefDecl 0x10280c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x120055e70 '__SVUint64_t'
|-TypedefDecl 0x10280c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x120055e90 '__SVFloat16_t'
|-TypedefDecl 0x10280c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x120055eb0 '__SVFloat32_t'
|-TypedefDecl 0x10280c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x120055ed0 '__SVFloat64_t'
|-TypedefDecl 0x10280c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x120055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x10280c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x120055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x10280c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x120055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x10280c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x120055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x10280c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x120055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x10280c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x120055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x10280c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x120055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x10280c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x120055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x10280c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x120055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x10280c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x120056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x10280c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x120056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x10280c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x120056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x10280c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x120056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x10280c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x120056090 '__clang_svint8x3_t'
|-TypedefDecl 0x10280c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1200560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x10280c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1200560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x10280c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1200560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x10280c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x120056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x10280ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x120056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x10280cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x120056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x10280cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x120056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x10280cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x120056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x10280d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1200561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x10280d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1200561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x10280d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1200561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x10280d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x120056210 '__clang_svint8x4_t'
|-TypedefDecl 0x10280d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x120056230 '__clang_svint16x4_t'
|-TypedefDecl 0x10280d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x120056250 '__clang_svint32x4_t'
|-TypedefDecl 0x10280d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x120056270 '__clang_svint64x4_t'
|-TypedefDecl 0x10280d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x120056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x10280d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1200562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x10280d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1200562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x10280d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1200562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x10280d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x120056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x10280d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x120056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x10280d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x120056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x10280d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x120056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x10280da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x120056390 '__SVBool_t'
|-TypedefDecl 0x10280da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1200563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x10280dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1200563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x10280db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1200563f0 '__SVCount_t'
|-TypedefDecl 0x10280dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x10280dbb0 'char *'
|   `-BuiltinType 0x1200556b0 'char'
|-TypedefDecl 0x10280dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x10280dbb0 'char *'
|   `-BuiltinType 0x1200556b0 'char'
|-FunctionDecl 0x10280e0a8 <dataset_diviso_filec/func13379_vuln.c:1:1, line:45:5> line:1:12 invalid qs_parse 'int (char *, char **, int, int)' inline
| |-ParmVarDecl 0x10280dcd8 <col:21, col:27> col:27 used qs 'char *'
| |-ParmVarDecl 0x10280de00 <col:31, col:43> col:37 used qs_kv 'char **'
| |-ParmVarDecl 0x10280de80 <col:46, col:50> col:50 used qs_kv_size 'int'
| |-ParmVarDecl 0x10280df18 <col:62, col:77> col:67 invalid parse_url 'int' cinit
| | `-RecoveryExpr 0x10280df98 <col:77> 'int' contains-errors
| `-CompoundStmt 0x10282a2c0 <line:2:1, line:45:5>
|   |-DeclStmt 0x10280e288 <line:3:5, col:13>
|   | |-VarDecl 0x10280e188 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x10280e208 <col:5, col:12> col:12 used j 'int'
|   |-DeclStmt 0x10280e320 <line:4:5, col:22>
|   | `-VarDecl 0x10280e2b8 <col:5, col:12> col:12 used substr_ptr 'char *'
|   |-ForStmt 0x102827a18 <line:6:5, col:45>
|   | |-BinaryOperator 0x10280e378 <col:9, col:11> 'int' '='
|   | | |-DeclRefExpr 0x10280e338 <col:9> 'int' lvalue Var 0x10280e188 'i' 'int'
|   | | `-IntegerLiteral 0x10280e358 <col:11> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x102827818 <col:14, col:16> 'int' '<'
|   | | |-ImplicitCastExpr 0x10280e3d8 <col:14> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x10280e398 <col:14> 'int' lvalue Var 0x10280e188 'i' 'int'
|   | | `-ImplicitCastExpr 0x102827800 <col:16> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x10280e3b8 <col:16> 'int' lvalue ParmVar 0x10280de80 'qs_kv_size' 'int'
|   | |-UnaryOperator 0x102827858 <col:28, col:29> 'int' postfix '++'
|   | | `-DeclRefExpr 0x102827838 <col:28> 'int' lvalue Var 0x10280e188 'i' 'int'
|   | `-BinaryOperator 0x1028279f8 <col:34, col:45> 'char *' contains-errors '='
|   |   |-ArraySubscriptExpr 0x1028279b8 <col:34, col:41> 'char *' lvalue
|   |   | |-ImplicitCastExpr 0x102827988 <col:34> 'char **' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x102827870 <col:34> 'char **' lvalue ParmVar 0x10280de00 'qs_kv' 'char **'
|   |   | `-ImplicitCastExpr 0x1028279a0 <col:40> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x102827890 <col:40> 'int' lvalue Var 0x10280e188 'i' 'int'
|   |   `-RecoveryExpr 0x1028279d8 <col:45> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x102828320 <line:9:5, col:56> 'char *' contains-errors '='
|   | |-DeclRefExpr 0x102827a50 <col:5> 'char *' lvalue Var 0x10280e2b8 'substr_ptr' 'char *'
|   | `-ConditionalOperator 0x1028282f0 <col:18, col:56> '<dependent type>' contains-errors
|   |   |-RecoveryExpr 0x102827a70 <col:18> '<dependent type>' contains-errors lvalue
|   |   |-BinaryOperator 0x1028282b0 <col:30, col:52> 'char *' '+'
|   |   | |-ImplicitCastExpr 0x102828298 <col:30> 'char *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x102827a90 <col:30> 'char *' lvalue ParmVar 0x10280dcd8 'qs' 'char *'
|   |   | `-CallExpr 0x102828208 <col:35, col:52> 'unsigned long'
|   |   |   |-ImplicitCastExpr 0x1028281f0 <col:35> 'unsigned long (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1028280f0 <col:35> 'unsigned long (const char *, const char *)' Function 0x102827f10 'strcspn' 'unsigned long (const char *, const char *)'
|   |   |   |-ImplicitCastExpr 0x102828250 <col:43> 'const char *' <NoOp>
|   |   |   | `-ImplicitCastExpr 0x102828238 <col:43> 'char *' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x102828110 <col:43> 'char *' lvalue ParmVar 0x10280dcd8 'qs' 'char *'
|   |   |   `-ImplicitCastExpr 0x102828280 <col:47> 'const char *' <NoOp>
|   |   |     `-ImplicitCastExpr 0x102828268 <col:47> 'char *' <ArrayToPointerDecay>
|   |   |       `-StringLiteral 0x102828170 <col:47> 'char[4]' lvalue "STR"
|   |   `-DeclRefExpr 0x1028282d0 <col:56> 'char *' lvalue ParmVar 0x10280dcd8 'qs' 'char *'
|   |-IfStmt 0x1028284f0 <line:10:5, line:16:5>
|   | |-RecoveryExpr 0x102828340 <line:10:9> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x1028284d8 <line:11:5, line:16:5>
|   |   `-IfStmt 0x1028284a8 <line:12:9, line:15:20> has_else
|   |     |-BinaryOperator 0x102828420 <line:12:13, col:30> 'int' '!='
|   |     | |-ImplicitCastExpr 0x102828408 <col:13, col:25> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x1028283f0 <col:13, col:25> 'char' <LValueToRValue>
|   |     | |   `-ArraySubscriptExpr 0x1028283b8 <col:13, col:25> 'char' lvalue
|   |     | |     |-ImplicitCastExpr 0x1028283a0 <col:13> 'char *' <LValueToRValue>
|   |     | |     | `-DeclRefExpr 0x102828360 <col:13> 'char *' lvalue Var 0x10280e2b8 'substr_ptr' 'char *'
|   |     | |     `-IntegerLiteral 0x102828380 <col:24> 'int' 0
|   |     | `-CharacterLiteral 0x1028283d8 <col:30> 'int' 0
|   |     |-UnaryOperator 0x102828460 <line:13:13, col:23> 'char *' postfix '++'
|   |     | `-DeclRefExpr 0x102828440 <col:13> 'char *' lvalue Var 0x10280e2b8 'substr_ptr' 'char *'
|   |     `-ReturnStmt 0x102828498 <line:15:13, col:20>
|   |       `-IntegerLiteral 0x102828478 <col:20> 'int' 0
|   |-BinaryOperator 0x102828550 <line:18:5, col:7> 'int' '='
|   | |-DeclRefExpr 0x102828510 <col:5> 'int' lvalue Var 0x10280e188 'i' 'int'
|   | `-IntegerLiteral 0x102828530 <col:7> 'int' 0
|   |-WhileStmt 0x1028298f0 <line:19:5, line:26:5>
|   | |-BinaryOperator 0x1028285e0 <line:19:11, col:13> 'int' '<'
|   | | |-ImplicitCastExpr 0x1028285b0 <col:11> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x102828570 <col:11> 'int' lvalue Var 0x10280e188 'i' 'int'
|   | | `-ImplicitCastExpr 0x1028285c8 <col:13> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x102828590 <col:13> 'int' lvalue ParmVar 0x10280de80 'qs_kv_size' 'int'
|   | `-CompoundStmt 0x1028298b8 <line:20:5, line:26:5>
|   |   |-BinaryOperator 0x1028286c8 <line:21:9, col:20> 'char *' '='
|   |   | |-ArraySubscriptExpr 0x102828670 <col:9, col:16> 'char *' lvalue
|   |   | | |-ImplicitCastExpr 0x102828640 <col:9> 'char **' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x102828600 <col:9> 'char **' lvalue ParmVar 0x10280de00 'qs_kv' 'char **'
|   |   | | `-ImplicitCastExpr 0x102828658 <col:15> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x102828620 <col:15> 'int' lvalue Var 0x10280e188 'i' 'int'
|   |   | `-ImplicitCastExpr 0x1028286b0 <col:20> 'char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x102828690 <col:20> 'char *' lvalue Var 0x10280e2b8 'substr_ptr' 'char *'
|   |   |-BinaryOperator 0x102829660 <line:22:9, col:38> 'int' '='
|   |   | |-DeclRefExpr 0x1028286e8 <col:9> 'int' lvalue Var 0x10280e208 'j' 'int'
|   |   | `-ImplicitCastExpr 0x102829648 <col:13, col:38> 'int' <IntegralCast>
|   |   |   `-CallExpr 0x1028287b0 <col:13, col:38> 'unsigned long'
|   |   |     |-ImplicitCastExpr 0x102828798 <col:13> 'unsigned long (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x102828708 <col:13> 'unsigned long (const char *, const char *)' Function 0x102827f10 'strcspn' 'unsigned long (const char *, const char *)'
|   |   |     |-ImplicitCastExpr 0x102829600 <col:21> 'const char *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x1028287e0 <col:21> 'char *' <LValueToRValue>
|   |   |     |   `-DeclRefExpr 0x102828728 <col:21> 'char *' lvalue Var 0x10280e2b8 'substr_ptr' 'char *'
|   |   |     `-ImplicitCastExpr 0x102829630 <col:33> 'const char *' <NoOp>
|   |   |       `-ImplicitCastExpr 0x102829618 <col:33> 'char *' <ArrayToPointerDecay>
|   |   |         `-StringLiteral 0x102828748 <col:33> 'char[4]' lvalue "STR"
|   |   |-IfStmt 0x102829798 <line:23:9, col:49>
|   |   | |-BinaryOperator 0x102829758 <col:14, col:31> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x102829740 <col:14, col:26> 'int' <IntegralCast>
|   |   | | | `-ImplicitCastExpr 0x102829728 <col:14, col:26> 'char' <LValueToRValue>
|   |   | | |   `-ArraySubscriptExpr 0x1028296f0 <col:14, col:26> 'char' lvalue
|   |   | | |     |-ImplicitCastExpr 0x1028296c0 <col:14> 'char *' <LValueToRValue>
|   |   | | |     | `-DeclRefExpr 0x102829680 <col:14> 'char *' lvalue Var 0x10280e2b8 'substr_ptr' 'char *'
|   |   | | |     `-ImplicitCastExpr 0x1028296d8 <col:25> 'int' <LValueToRValue>
|   |   | | |       `-DeclRefExpr 0x1028296a0 <col:25> 'int' lvalue Var 0x10280e208 'j' 'int'
|   |   | | `-CharacterLiteral 0x102829710 <col:31> 'int' 0
|   |   | `-CompoundStmt 0x102829780 <col:38, col:49>
|   |   |   `-BreakStmt 0x102829778 <col:41>
|   |   |-CompoundAssignOperator 0x102829850 <line:24:9, col:27> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
|   |   | |-DeclRefExpr 0x1028297b8 <col:9> 'char *' lvalue Var 0x10280e2b8 'substr_ptr' 'char *'
|   |   | `-BinaryOperator 0x102829830 <col:23, col:27> 'int' '+'
|   |   |   |-ImplicitCastExpr 0x102829818 <col:23> 'int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1028297d8 <col:23> 'int' lvalue Var 0x10280e208 'j' 'int'
|   |   |   `-IntegerLiteral 0x1028297f8 <col:27> 'int' 1
|   |   `-UnaryOperator 0x1028298a0 <line:25:9, col:10> 'int' postfix '++'
|   |     `-DeclRefExpr 0x102829880 <col:9> 'int' lvalue Var 0x10280e188 'i' 'int'
|   |-UnaryOperator 0x102829930 <line:27:5, col:6> 'int' postfix '++'
|   | `-DeclRefExpr 0x102829910 <col:5> 'int' lvalue Var 0x10280e188 'i' 'int'
|   |-ForStmt 0x10282a240 <line:31:5, line:38:5>
|   | |-BinaryOperator 0x102829988 <line:31:9, col:11> 'int' '='
|   | | |-DeclRefExpr 0x102829948 <col:9> 'int' lvalue Var 0x10280e208 'j' 'int'
|   | | `-IntegerLiteral 0x102829968 <col:11> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x102829a18 <col:14, col:16> 'int' '<'
|   | | |-ImplicitCastExpr 0x1028299e8 <col:14> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1028299a8 <col:14> 'int' lvalue Var 0x10280e208 'j' 'int'
|   | | `-ImplicitCastExpr 0x102829a00 <col:16> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1028299c8 <col:16> 'int' lvalue Var 0x10280e188 'i' 'int'
|   | |-UnaryOperator 0x102829a58 <col:19, col:20> 'int' postfix '++'
|   | | `-DeclRefExpr 0x102829a38 <col:19> 'int' lvalue Var 0x10280e208 'j' 'int'
|   | `-CompoundStmt 0x10282a220 <line:32:5, line:38:5>
|   |   |-BinaryOperator 0x102829d00 <line:33:9, col:56> 'char *' '='
|   |   | |-DeclRefExpr 0x102829a70 <col:9> 'char *' lvalue Var 0x10280e2b8 'substr_ptr' 'char *'
|   |   | `-BinaryOperator 0x102829ce0 <col:22, col:56> 'char *' '+'
|   |   |   |-ImplicitCastExpr 0x102829cc8 <col:22, col:29> 'char *' <LValueToRValue>
|   |   |   | `-ArraySubscriptExpr 0x102829b00 <col:22, col:29> 'char *' lvalue
|   |   |   |   |-ImplicitCastExpr 0x102829ad0 <col:22> 'char **' <LValueToRValue>
|   |   |   |   | `-DeclRefExpr 0x102829a90 <col:22> 'char **' lvalue ParmVar 0x10280de00 'qs_kv' 'char **'
|   |   |   |   `-ImplicitCastExpr 0x102829ae8 <col:28> 'int' <LValueToRValue>
|   |   |   |     `-DeclRefExpr 0x102829ab0 <col:28> 'int' lvalue Var 0x10280e208 'j' 'int'
|   |   |   `-CallExpr 0x102829c38 <col:33, col:56> 'unsigned long'
|   |   |     |-ImplicitCastExpr 0x102829c20 <col:33> 'unsigned long (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x102829b20 <col:33> 'unsigned long (const char *, const char *)' Function 0x102827f10 'strcspn' 'unsigned long (const char *, const char *)'
|   |   |     |-ImplicitCastExpr 0x102829c80 <col:41, col:48> 'const char *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x102829c68 <col:41, col:48> 'char *' <LValueToRValue>
|   |   |     |   `-ArraySubscriptExpr 0x102829bb0 <col:41, col:48> 'char *' lvalue
|   |   |     |     |-ImplicitCastExpr 0x102829b80 <col:41> 'char **' <LValueToRValue>
|   |   |     |     | `-DeclRefExpr 0x102829b40 <col:41> 'char **' lvalue ParmVar 0x10280de00 'qs_kv' 'char **'
|   |   |     |     `-ImplicitCastExpr 0x102829b98 <col:47> 'int' <LValueToRValue>
|   |   |     |       `-DeclRefExpr 0x102829b60 <col:47> 'int' lvalue Var 0x10280e208 'j' 'int'
|   |   |     `-ImplicitCastExpr 0x102829cb0 <col:51> 'const char *' <NoOp>
|   |   |       `-ImplicitCastExpr 0x102829c98 <col:51> 'char *' <ArrayToPointerDecay>
|   |   |         `-StringLiteral 0x102829bd0 <col:51> 'char[4]' lvalue "STR"
|   |   `-IfStmt 0x10282a1f0 <line:34:9, line:37:35> has_else
|   |     |-BinaryOperator 0x102829ee0 <line:34:14, col:55> 'int' '||'
|   |     | |-BinaryOperator 0x102829de0 <col:14, col:31> 'int' '=='
|   |     | | |-ImplicitCastExpr 0x102829dc8 <col:14, col:26> 'int' <IntegralCast>
|   |     | | | `-ImplicitCastExpr 0x102829db0 <col:14, col:26> 'char' <LValueToRValue>
|   |     | | |   `-ArraySubscriptExpr 0x102829d78 <col:14, col:26> 'char' lvalue
|   |     | | |     |-ImplicitCastExpr 0x102829d60 <col:14> 'char *' <LValueToRValue>
|   |     | | |     | `-DeclRefExpr 0x102829d20 <col:14> 'char *' lvalue Var 0x10280e2b8 'substr_ptr' 'char *'
|   |     | | |     `-IntegerLiteral 0x102829d40 <col:25> 'int' 0
|   |     | | `-CharacterLiteral 0x102829d98 <col:31> 'int' 38
|   |     | `-BinaryOperator 0x102829ec0 <col:38, col:55> 'int' '=='
|   |     |   |-ImplicitCastExpr 0x102829ea8 <col:38, col:50> 'int' <IntegralCast>
|   |     |   | `-ImplicitCastExpr 0x102829e90 <col:38, col:50> 'char' <LValueToRValue>
|   |     |   |   `-ArraySubscriptExpr 0x102829e58 <col:38, col:50> 'char' lvalue
|   |     |   |     |-ImplicitCastExpr 0x102829e40 <col:38> 'char *' <LValueToRValue>
|   |     |   |     | `-DeclRefExpr 0x102829e00 <col:38> 'char *' lvalue Var 0x10280e2b8 'substr_ptr' 'char *'
|   |     |   |     `-IntegerLiteral 0x102829e20 <col:49> 'int' 0
|   |     |   `-CharacterLiteral 0x102829e78 <col:55> 'int' 0
|   |     |-BinaryOperator 0x102829fa8 <line:35:13, col:29> 'char' '='
|   |     | |-ArraySubscriptExpr 0x102829f58 <col:13, col:25> 'char' lvalue
|   |     | | |-ImplicitCastExpr 0x102829f40 <col:13> 'char *' <LValueToRValue>
|   |     | | | `-DeclRefExpr 0x102829f00 <col:13> 'char *' lvalue Var 0x10280e2b8 'substr_ptr' 'char *'
|   |     | | `-IntegerLiteral 0x102829f20 <col:24> 'int' 0
|   |     | `-ImplicitCastExpr 0x102829f90 <col:29> 'char' <IntegralCast>
|   |     |   `-CharacterLiteral 0x102829f78 <col:29> 'int' 0
|   |     `-CallExpr 0x10282a1c8 <line:37:13, col:35> 'int'
|   |       |-ImplicitCastExpr 0x10282a1b0 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x10282a120 <col:13> 'int ()' Function 0x10282a068 'qs_decode' 'int ()'
|   |       `-UnaryOperator 0x10282a160 <col:23, col:25> 'char *' prefix '++'
|   |         `-DeclRefExpr 0x10282a140 <col:25> 'char *' lvalue Var 0x10280e2b8 'substr_ptr' 'char *'
|   `-ReturnStmt 0x10282a2b0 <line:44:5, col:12>
|     `-ImplicitCastExpr 0x10282a298 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x10282a278 <col:12> 'int' lvalue Var 0x10280e188 'i' 'int'
`-FunctionDecl 0x102827f10 <line:9:35> col:35 implicit used strcspn 'unsigned long (const char *, const char *)' extern
  |-ParmVarDecl 0x102828010 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x102828078 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x102827fb8 <<invalid sloc>> Implicit 894
