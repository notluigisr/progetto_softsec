TranslationUnitDecl 0x143055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1430564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x143055bd0 '__int128'
|-TypedefDecl 0x143056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x143055bf0 'unsigned __int128'
|-TypedefDecl 0x14380be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x14380bc00 'struct __NSConstantString_tag'
|   `-Record 0x143056580 '__NSConstantString_tag'
|-TypedefDecl 0x14380be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x143055d90 '__SVInt8_t'
|-TypedefDecl 0x14380bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x143055db0 '__SVInt16_t'
|-TypedefDecl 0x14380bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x143055dd0 '__SVInt32_t'
|-TypedefDecl 0x14380bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x143055df0 '__SVInt64_t'
|-TypedefDecl 0x14380c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x143055e10 '__SVUint8_t'
|-TypedefDecl 0x14380c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x143055e30 '__SVUint16_t'
|-TypedefDecl 0x14380c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x143055e50 '__SVUint32_t'
|-TypedefDecl 0x14380c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x143055e70 '__SVUint64_t'
|-TypedefDecl 0x14380c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x143055e90 '__SVFloat16_t'
|-TypedefDecl 0x14380c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x143055eb0 '__SVFloat32_t'
|-TypedefDecl 0x14380c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x143055ed0 '__SVFloat64_t'
|-TypedefDecl 0x14380c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x143055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x14380c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x143055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x14380c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x143055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x14380c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x143055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x14380c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x143055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x14380c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x143055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x14380c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x143055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x14380c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x143055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x14380c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x143055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x14380c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x143056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x14380c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x143056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x14380c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x143056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x14380c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x143056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x14380c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x143056090 '__clang_svint8x3_t'
|-TypedefDecl 0x14380c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1430560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x14380c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1430560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x14380c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1430560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x14380c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x143056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x14380ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x143056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x14380cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x143056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x14380cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x143056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x14380cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x143056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x14380d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1430561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x14380d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1430561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x14380d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1430561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x14380d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x143056210 '__clang_svint8x4_t'
|-TypedefDecl 0x14380d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x143056230 '__clang_svint16x4_t'
|-TypedefDecl 0x14380d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x143056250 '__clang_svint32x4_t'
|-TypedefDecl 0x14380d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x143056270 '__clang_svint64x4_t'
|-TypedefDecl 0x14380d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x143056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x14380d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1430562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x14380d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1430562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x14380d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1430562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x14380d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x143056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x14380d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x143056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x14380d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x143056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x14380d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x143056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x14380da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x143056390 '__SVBool_t'
|-TypedefDecl 0x14380da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1430563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x14380dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1430563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x14380db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1430563f0 '__SVCount_t'
|-TypedefDecl 0x14380dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x14380dbb0 'char *'
|   `-BuiltinType 0x1430556b0 'char'
|-TypedefDecl 0x14380dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x14380dbb0 'char *'
|   `-BuiltinType 0x1430556b0 'char'
|-FunctionDecl 0x14380e1a0 <dataset_diviso_filec/func10969_vuln.c:1:1, line:43:1> line:1:20 ConvertXYZToJzazbz 'void (const double, const double, const double, const double, double *, double *, double *)' static inline
| |-ParmVarDecl 0x14380dcd8 <col:39, col:52> col:52 used X 'const double'
| |-ParmVarDecl 0x14380dd58 <col:54, col:67> col:67 used Y 'const double'
| |-ParmVarDecl 0x14380ddd8 <line:2:3, col:16> col:16 used Z 'const double'
| |-ParmVarDecl 0x14380de58 <col:18, col:31> col:31 used white_luminance 'const double'
| |-ParmVarDecl 0x14380df08 <col:47, col:55> col:55 used Jz 'double *'
| |-ParmVarDecl 0x14380df88 <col:58, col:66> col:66 used az 'double *'
| |-ParmVarDecl 0x14380e008 <col:69, col:77> col:77 used bz 'double *'
| `-CompoundStmt 0x143123258 <line:3:1, line:43:1>
|   |-DeclStmt 0x143826ac8 <line:14:3, line:25:7>
|   | |-VarDecl 0x14380e2e0 <line:14:3, line:15:5> col:5 used gamma 'double'
|   | |-VarDecl 0x14380e360 <line:14:3, line:16:5> col:5 used Iz 'double'
|   | |-VarDecl 0x143826600 <line:14:3, line:17:5> col:5 used L 'double'
|   | |-VarDecl 0x143826680 <line:14:3, line:18:5> col:5 used Lp 'double'
|   | |-VarDecl 0x143826700 <line:14:3, line:19:5> col:5 used M 'double'
|   | |-VarDecl 0x143826780 <line:14:3, line:20:5> col:5 used Mp 'double'
|   | |-VarDecl 0x143826800 <line:14:3, line:21:5> col:5 used S 'double'
|   | |-VarDecl 0x143826880 <line:14:3, line:22:5> col:5 used Sp 'double'
|   | |-VarDecl 0x143826900 <line:14:3, line:23:5> col:5 used Xp 'double'
|   | |-VarDecl 0x143826980 <line:14:3, line:24:5> col:5 used Yp 'double'
|   | `-VarDecl 0x143826a00 <line:14:3, line:25:5> col:5 used Zp 'double'
|   |-BinaryOperator 0x143826d30 <line:29:3, col:6> 'double' '='
|   | |-DeclRefExpr 0x143826cd8 <col:3> 'double' lvalue Var 0x143826a00 'Zp' 'double'
|   | `-ImplicitCastExpr 0x143826d18 <col:6> 'double' <LValueToRValue>
|   |   `-DeclRefExpr 0x143826cf8 <col:6> 'const double' lvalue ParmVar 0x14380ddd8 'Z' 'const double'
|   |-BinaryOperator 0x143826f18 <line:30:3, col:41> 'double' '='
|   | |-DeclRefExpr 0x143826d50 <col:3> 'double' lvalue Var 0x143826600 'L' 'double'
|   | `-BinaryOperator 0x143826ef8 <col:5, col:41> 'double' '+'
|   |   |-BinaryOperator 0x143826e60 <col:5, col:28> 'double' '+'
|   |   | |-BinaryOperator 0x143826dc8 <col:5, col:16> 'double' '*'
|   |   | | |-FloatingLiteral 0x143826d70 <col:5> 'double' 4.147897e-01
|   |   | | `-ImplicitCastExpr 0x143826db0 <col:16> 'double' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x143826d90 <col:16> 'double' lvalue Var 0x143826900 'Xp' 'double'
|   |   | `-BinaryOperator 0x143826e40 <col:19, col:28> 'double' '*'
|   |   |   |-FloatingLiteral 0x143826de8 <col:19> 'double' 5.799990e-01
|   |   |   `-ImplicitCastExpr 0x143826e28 <col:28> 'double' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x143826e08 <col:28> 'double' lvalue Var 0x143826980 'Yp' 'double'
|   |   `-BinaryOperator 0x143826ed8 <col:31, col:41> 'double' '*'
|   |     |-FloatingLiteral 0x143826e80 <col:31> 'double' 1.464800e-02
|   |     `-ImplicitCastExpr 0x143826ec0 <col:41> 'double' <LValueToRValue>
|   |       `-DeclRefExpr 0x143826ea0 <col:41> 'double' lvalue Var 0x143826a00 'Zp' 'double'
|   |-BinaryOperator 0x143827138 <line:31:3, col:43> 'double' '='
|   | |-DeclRefExpr 0x143826f38 <col:3> 'double' lvalue Var 0x143826700 'M' 'double'
|   | `-BinaryOperator 0x143827118 <col:5, col:43> 'double' '+'
|   |   |-BinaryOperator 0x143827080 <col:5, col:30> 'double' '+'
|   |   | |-BinaryOperator 0x143826fe8 <col:5, col:18> 'double' '*'
|   |   | | |-ParenExpr 0x143826f90 <col:5, col:16> 'double'
|   |   | | | `-UnaryOperator 0x143826f78 <col:6, col:7> 'double' prefix '-'
|   |   | | |   `-FloatingLiteral 0x143826f58 <col:7> 'double' 2.015100e-01
|   |   | | `-ImplicitCastExpr 0x143826fd0 <col:18> 'double' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x143826fb0 <col:18> 'double' lvalue Var 0x143826900 'Xp' 'double'
|   |   | `-BinaryOperator 0x143827060 <col:21, col:30> 'double' '*'
|   |   |   |-FloatingLiteral 0x143827008 <col:21> 'double' 1.120649e+00
|   |   |   `-ImplicitCastExpr 0x143827048 <col:30> 'double' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x143827028 <col:30> 'double' lvalue Var 0x143826980 'Yp' 'double'
|   |   `-BinaryOperator 0x1438270f8 <col:33, col:43> 'double' '*'
|   |     |-FloatingLiteral 0x1438270a0 <col:33> 'double' 5.310080e-02
|   |     `-ImplicitCastExpr 0x1438270e0 <col:43> 'double' <LValueToRValue>
|   |       `-DeclRefExpr 0x1438270c0 <col:43> 'double' lvalue Var 0x143826a00 'Zp' 'double'
|   |-BinaryOperator 0x143827358 <line:32:3, col:43> 'double' '='
|   | |-DeclRefExpr 0x143827158 <col:3> 'double' lvalue Var 0x143826800 'S' 'double'
|   | `-BinaryOperator 0x143827338 <col:5, col:43> 'double' '+'
|   |   |-BinaryOperator 0x1438272a0 <col:5, col:30> 'double' '+'
|   |   | |-BinaryOperator 0x143827208 <col:5, col:18> 'double' '*'
|   |   | | |-ParenExpr 0x1438271b0 <col:5, col:16> 'double'
|   |   | | | `-UnaryOperator 0x143827198 <col:6, col:7> 'double' prefix '-'
|   |   | | |   `-FloatingLiteral 0x143827178 <col:7> 'double' 1.660080e-02
|   |   | | `-ImplicitCastExpr 0x1438271f0 <col:18> 'double' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1438271d0 <col:18> 'double' lvalue Var 0x143826900 'Xp' 'double'
|   |   | `-BinaryOperator 0x143827280 <col:21, col:30> 'double' '*'
|   |   |   |-FloatingLiteral 0x143827228 <col:21> 'double' 2.648000e-01
|   |   |   `-ImplicitCastExpr 0x143827268 <col:30> 'double' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x143827248 <col:30> 'double' lvalue Var 0x143826980 'Yp' 'double'
|   |   `-BinaryOperator 0x143827318 <col:33, col:43> 'double' '*'
|   |     |-FloatingLiteral 0x1438272c0 <col:33> 'double' 6.684799e-01
|   |     `-ImplicitCastExpr 0x143827300 <col:43> 'double' <LValueToRValue>
|   |       `-DeclRefExpr 0x1438272e0 <col:43> 'double' lvalue Var 0x143826a00 'Zp' 'double'
|   |-BinaryOperator 0x143828c48 <line:33:3, col:39> 'double' contains-errors '='
|   | |-DeclRefExpr 0x143827378 <col:3> 'double' lvalue Var 0x14380e2e0 'gamma' 'double'
|   | `-CallExpr 0x143828c18 <col:9, col:39> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x143828a40 <col:9> 'double (double, double)' Function 0x143828810 'pow' 'double (double, double)'
|   |   |-BinaryOperator 0x143828bd8 <col:13, col:15> 'double' '/'
|   |   | |-ImplicitCastExpr 0x143828ba8 <col:13> 'double' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x143828a60 <col:13> 'double' lvalue Var 0x143826600 'L' 'double'
|   |   | `-ImplicitCastExpr 0x143828bc0 <col:15> 'double' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x143828a80 <col:15> 'const double' lvalue ParmVar 0x14380de58 'white_luminance' 'const double'
|   |   `-RecoveryExpr 0x143828bf8 <col:31> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x143829010 <line:35:3, col:39> 'double' contains-errors '='
|   | |-DeclRefExpr 0x143828de8 <col:3> 'double' lvalue Var 0x14380e2e0 'gamma' 'double'
|   | `-CallExpr 0x143828fe0 <col:9, col:39> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x143828e08 <col:9> 'double (double, double)' Function 0x143828810 'pow' 'double (double, double)'
|   |   |-BinaryOperator 0x143828fa0 <col:13, col:15> 'double' '/'
|   |   | |-ImplicitCastExpr 0x143828f70 <col:13> 'double' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x143828e28 <col:13> 'double' lvalue Var 0x143826700 'M' 'double'
|   |   | `-ImplicitCastExpr 0x143828f88 <col:15> 'double' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x143828e48 <col:15> 'const double' lvalue ParmVar 0x14380de58 'white_luminance' 'const double'
|   |   `-RecoveryExpr 0x143828fc0 <col:31> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x1438293d8 <line:37:3, col:39> 'double' contains-errors '='
|   | |-DeclRefExpr 0x1438291b0 <col:3> 'double' lvalue Var 0x14380e2e0 'gamma' 'double'
|   | `-CallExpr 0x1438293a8 <col:9, col:39> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x1438291d0 <col:9> 'double (double, double)' Function 0x143828810 'pow' 'double (double, double)'
|   |   |-BinaryOperator 0x143829368 <col:13, col:15> 'double' '/'
|   |   | |-ImplicitCastExpr 0x143829338 <col:13> 'double' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1438291f0 <col:13> 'double' lvalue Var 0x143826800 'S' 'double'
|   |   | `-ImplicitCastExpr 0x143829350 <col:15> 'double' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x143829210 <col:15> 'const double' lvalue ParmVar 0x14380de58 'white_luminance' 'const double'
|   |   `-RecoveryExpr 0x143829388 <col:31> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x143122cb8 <line:39:3, col:17> 'double' '='
|   | |-DeclRefExpr 0x143829578 <col:3> 'double' lvalue Var 0x14380e360 'Iz' 'double'
|   | `-BinaryOperator 0x143122c98 <col:6, col:17> 'double' '+'
|   |   |-BinaryOperator 0x143122c00 <col:6, col:10> 'double' '*'
|   |   | |-FloatingLiteral 0x143829598 <col:6> 'double' 5.000000e-01
|   |   | `-ImplicitCastExpr 0x1438295d8 <col:10> 'double' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1438295b8 <col:10> 'double' lvalue Var 0x143826680 'Lp' 'double'
|   |   `-BinaryOperator 0x143122c78 <col:13, col:17> 'double' '*'
|   |     |-FloatingLiteral 0x143122c20 <col:13> 'double' 5.000000e-01
|   |     `-ImplicitCastExpr 0x143122c60 <col:17> 'double' <LValueToRValue>
|   |       `-DeclRefExpr 0x143122c40 <col:17> 'double' lvalue Var 0x143826780 'Mp' 'double'
|   |-BinaryOperator 0x143122f10 <line:40:3, col:42> 'double' '='
|   | |-UnaryOperator 0x143122d10 <col:3, col:4> 'double' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x143122cf8 <col:4> 'double *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x143122cd8 <col:4> 'double *' lvalue ParmVar 0x14380df88 'az' 'double *'
|   | `-BinaryOperator 0x143122ef0 <col:7, col:42> 'double' '+'
|   |   |-BinaryOperator 0x143122eb0 <col:7, col:39> 'double' '+'
|   |   | |-BinaryOperator 0x143122e18 <col:7, col:27> 'double' '-'
|   |   | | |-BinaryOperator 0x143122d80 <col:7, col:15> 'double' '*'
|   |   | | | |-FloatingLiteral 0x143122d28 <col:7> 'double' 3.524000e+00
|   |   | | | `-ImplicitCastExpr 0x143122d68 <col:15> 'double' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x143122d48 <col:15> 'double' lvalue Var 0x143826680 'Lp' 'double'
|   |   | | `-BinaryOperator 0x143122df8 <col:18, col:27> 'double' '*'
|   |   | |   |-FloatingLiteral 0x143122da0 <col:18> 'double' 4.066708e+00
|   |   | |   `-ImplicitCastExpr 0x143122de0 <col:27> 'double' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x143122dc0 <col:27> 'double' lvalue Var 0x143826780 'Mp' 'double'
|   |   | `-BinaryOperator 0x143122e90 <col:30, col:39> 'double' '*'
|   |   |   |-FloatingLiteral 0x143122e38 <col:30> 'double' 5.427080e-01
|   |   |   `-ImplicitCastExpr 0x143122e78 <col:39> 'double' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x143122e58 <col:39> 'double' lvalue Var 0x143826880 'Sp' 'double'
|   |   `-FloatingLiteral 0x143122ed0 <col:42> 'double' 5.000000e-01
|   `-BinaryOperator 0x143123168 <line:41:3, col:43> 'double' '='
|     |-UnaryOperator 0x143122f68 <col:3, col:4> 'double' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x143122f50 <col:4> 'double *' <LValueToRValue>
|     |   `-DeclRefExpr 0x143122f30 <col:4> 'double *' lvalue ParmVar 0x14380e008 'bz' 'double *'
|     `-BinaryOperator 0x143123148 <col:7, col:43> 'double' '+'
|       |-BinaryOperator 0x143123108 <col:7, col:40> 'double' '-'
|       | |-BinaryOperator 0x143123070 <col:7, col:28> 'double' '+'
|       | | |-BinaryOperator 0x143122fd8 <col:7, col:16> 'double' '*'
|       | | | |-FloatingLiteral 0x143122f80 <col:7> 'double' 1.990760e-01
|       | | | `-ImplicitCastExpr 0x143122fc0 <col:16> 'double' <LValueToRValue>
|       | | |   `-DeclRefExpr 0x143122fa0 <col:16> 'double' lvalue Var 0x143826680 'Lp' 'double'
|       | | `-BinaryOperator 0x143123050 <col:19, col:28> 'double' '*'
|       | |   |-FloatingLiteral 0x143122ff8 <col:19> 'double' 1.096799e+00
|       | |   `-ImplicitCastExpr 0x143123038 <col:28> 'double' <LValueToRValue>
|       | |     `-DeclRefExpr 0x143123018 <col:28> 'double' lvalue Var 0x143826780 'Mp' 'double'
|       | `-BinaryOperator 0x1431230e8 <col:31, col:40> 'double' '*'
|       |   |-FloatingLiteral 0x143123090 <col:31> 'double' 1.295875e+00
|       |   `-ImplicitCastExpr 0x1431230d0 <col:40> 'double' <LValueToRValue>
|       |     `-DeclRefExpr 0x1431230b0 <col:40> 'double' lvalue Var 0x143826880 'Sp' 'double'
|       `-FloatingLiteral 0x143123128 <col:43> 'double' 5.000000e-01
`-FunctionDecl 0x143828810 <line:33:9> col:9 implicit used pow 'double (double, double)' extern
  |-ParmVarDecl 0x143828910 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x143828978 <<invalid sloc>> <invalid sloc> 'double'
  |-BuiltinAttr 0x1438288b8 <<invalid sloc>> Implicit 1028
  |-ConstAttr 0x1438289f0 <col:9> Implicit
  `-NoThrowAttr 0x143828a18 <col:9> Implicit
