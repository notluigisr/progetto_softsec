TranslationUnitDecl 0x12b855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x12b8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x12b855bd0 '__int128'
|-TypedefDecl 0x12b856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x12b855bf0 'unsigned __int128'
|-TypedefDecl 0x12b926230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12b926000 'struct __NSConstantString_tag'
|   `-Record 0x12b856580 '__NSConstantString_tag'
|-TypedefDecl 0x12b926298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x12b855d90 '__SVInt8_t'
|-TypedefDecl 0x12b926300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x12b855db0 '__SVInt16_t'
|-TypedefDecl 0x12b926368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x12b855dd0 '__SVInt32_t'
|-TypedefDecl 0x12b9263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x12b855df0 '__SVInt64_t'
|-TypedefDecl 0x12b926438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x12b855e10 '__SVUint8_t'
|-TypedefDecl 0x12b9264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x12b855e30 '__SVUint16_t'
|-TypedefDecl 0x12b926508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x12b855e50 '__SVUint32_t'
|-TypedefDecl 0x12b926570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x12b855e70 '__SVUint64_t'
|-TypedefDecl 0x12b9265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x12b855e90 '__SVFloat16_t'
|-TypedefDecl 0x12b926640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x12b855eb0 '__SVFloat32_t'
|-TypedefDecl 0x12b9266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x12b855ed0 '__SVFloat64_t'
|-TypedefDecl 0x12b926710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x12b855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12b926778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x12b855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12b9267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x12b855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12b926848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x12b855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12b9268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x12b855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12b926918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x12b855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12b926980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x12b855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12b9269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x12b855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12b926a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x12b855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12b926ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x12b856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12b926b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x12b856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12b926b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x12b856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12b926bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x12b856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12b926c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x12b856090 '__clang_svint8x3_t'
|-TypedefDecl 0x12b926cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x12b8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12b926d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x12b8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12b926d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x12b8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12b926df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x12b856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12b926e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x12b856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12b926ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x12b856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12b926f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x12b856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12b926f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x12b856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12b927800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x12b8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12b927868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x12b8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12b9278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x12b8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12b927938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x12b856210 '__clang_svint8x4_t'
|-TypedefDecl 0x12b9279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x12b856230 '__clang_svint16x4_t'
|-TypedefDecl 0x12b927a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x12b856250 '__clang_svint32x4_t'
|-TypedefDecl 0x12b927a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x12b856270 '__clang_svint64x4_t'
|-TypedefDecl 0x12b927ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x12b856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12b927b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x12b8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12b927ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x12b8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12b927c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x12b8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12b927c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x12b856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12b927ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x12b856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12b927d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x12b856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12b927db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x12b856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12b927e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x12b856390 '__SVBool_t'
|-TypedefDecl 0x12b927e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x12b8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12b927ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x12b8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12b927f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x12b8563f0 '__SVCount_t'
|-TypedefDecl 0x12b927ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12b927fb0 'char *'
|   `-BuiltinType 0x12b8556b0 'char'
|-TypedefDecl 0x12b928068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12b927fb0 'char *'
|   `-BuiltinType 0x12b8556b0 'char'
|-FunctionDecl 0x12b928558 <dataset_diviso_filec/func864_nonvuln.c:1:1, line:32:1> line:1:12 invalid do_check_string 'int (const int *, int, int, unsigned int, const char *, int, char **)' static
| |-ParmVarDecl 0x12b9280f0 <col:28, col:47> col:47 invalid a 'const int *'
| |-ParmVarDecl 0x12b928170 <col:50, col:54> col:54 used cmp_type 'int'
| |-ParmVarDecl 0x12b9281f0 <col:64, col:73> col:73 invalid equal 'int'
| |-ParmVarDecl 0x12b928270 <line:2:28, col:41> col:41 used flags 'unsigned int'
| |-ParmVarDecl 0x12b9282f0 <col:48, col:60> col:60 used b 'const char *'
| |-ParmVarDecl 0x12b928370 <col:63, col:70> col:70 invalid blen 'int'
| |-ParmVarDecl 0x12b928428 <line:3:28, col:35> col:35 used peername 'char **'
| `-CompoundStmt 0x12b945440 <line:4:1, line:32:1>
|   |-DeclStmt 0x12b9286d8 <line:5:5, col:15>
|   | `-VarDecl 0x12b928650 <col:5, col:14> col:9 used rv 'int' cinit
|   |   `-IntegerLiteral 0x12b9286b8 <col:14> 'int' 0
|   |-IfStmt 0x12b941880 <line:7:5, line:8:16>
|   | |-BinaryOperator 0x12b941830 <line:7:9, col:25> 'int' contains-errors '||'
|   | | |-UnaryOperator 0x12b928770 <col:9, col:13> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | | | `-ImplicitCastExpr 0x12b928758 <col:10, col:13> '<dependent type>' contains-errors <LValueToRValue>
|   | | |   `-CXXDependentScopeMemberExpr 0x12b928710 <col:10, col:13> '<dependent type>' contains-errors lvalue ->data
|   | | |     `-RecoveryExpr 0x12b9286f0 <col:10> '<dependent type>' contains-errors lvalue
|   | | `-UnaryOperator 0x12b941818 <col:21, col:25> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | |   `-ImplicitCastExpr 0x12b941800 <col:22, col:25> '<dependent type>' contains-errors <LValueToRValue>
|   | |     `-CXXDependentScopeMemberExpr 0x12b9287a8 <col:22, col:25> '<dependent type>' contains-errors lvalue ->length
|   | |       `-RecoveryExpr 0x12b928788 <col:22> '<dependent type>' contains-errors lvalue
|   | `-ReturnStmt 0x12b941870 <line:8:9, col:16>
|   |   `-IntegerLiteral 0x12b941850 <col:16> 'int' 0
|   |-IfStmt 0x12b9453c8 <line:9:5, line:30:5> has_else
|   | |-BinaryOperator 0x12b9418f8 <line:9:9, col:20> 'int' '>'
|   | | |-ImplicitCastExpr 0x12b9418e0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x12b9418a0 <col:9> 'int' lvalue ParmVar 0x12b928170 'cmp_type' 'int'
|   | | `-IntegerLiteral 0x12b9418c0 <col:20> 'int' 0
|   | |-CompoundStmt 0x12b944950 <col:23, line:18:5>
|   | | |-IfStmt 0x12b9419f0 <line:10:9, line:11:20>
|   | | | |-BinaryOperator 0x12b9419a0 <line:10:13, col:28> 'int' contains-errors '!='
|   | | | | |-DeclRefExpr 0x12b941918 <col:13> 'int' lvalue ParmVar 0x12b928170 'cmp_type' 'int'
|   | | | | `-CXXDependentScopeMemberExpr 0x12b941958 <col:25, col:28> '<dependent type>' contains-errors lvalue ->type
|   | | | |   `-RecoveryExpr 0x12b941938 <col:25> '<dependent type>' contains-errors lvalue
|   | | | `-ReturnStmt 0x12b9419e0 <line:11:13, col:20>
|   | | |   `-IntegerLiteral 0x12b9419c0 <col:20> 'int' 0
|   | | |-IfStmt 0x12b9426f0 <line:12:9, line:15:18> has_else
|   | | | |-BinaryOperator 0x12b941a88 <line:12:13, col:25> 'int' contains-errors '=='
|   | | | | |-DeclRefExpr 0x12b941a10 <col:13> 'int' lvalue ParmVar 0x12b928170 'cmp_type' 'int'
|   | | | | `-RecoveryExpr 0x12b941a68 <col:25> '<dependent type>' contains-errors lvalue
|   | | | |-BinaryOperator 0x12b941cf0 <line:13:13, col:75> 'int' contains-errors '='
|   | | | | |-DeclRefExpr 0x12b941aa8 <col:13> 'int' lvalue Var 0x12b928650 'rv' 'int'
|   | | | | `-CallExpr 0x12b941ca8 <col:18, col:75> '<dependent type>' contains-errors
|   | | | |   |-RecoveryExpr 0x12b941ac8 <col:18> '<dependent type>' contains-errors lvalue
|   | | | |   |-CXXDependentScopeMemberExpr 0x12b941b08 <col:24, col:27> '<dependent type>' contains-errors lvalue ->data
|   | | | |   | `-RecoveryExpr 0x12b941ae8 <col:24> '<dependent type>' contains-errors lvalue
|   | | | |   |-CXXDependentScopeMemberExpr 0x12b941b70 <col:33, col:36> '<dependent type>' contains-errors lvalue ->length
|   | | | |   | `-RecoveryExpr 0x12b941b50 <col:33> '<dependent type>' contains-errors lvalue
|   | | | |   |-CStyleCastExpr 0x12b941c40 <col:44, col:61> 'unsigned char *' <BitCast>
|   | | | |   | `-ImplicitCastExpr 0x12b941c28 <col:61> 'const char *' <LValueToRValue> part_of_explicit_cast
|   | | | |   |   `-DeclRefExpr 0x12b941bb8 <col:61> 'const char *' lvalue ParmVar 0x12b9282f0 'b' 'const char *'
|   | | | |   |-RecoveryExpr 0x12b941c68 <col:64> '<dependent type>' contains-errors lvalue
|   | | | |   `-DeclRefExpr 0x12b941c88 <col:70> 'unsigned int' lvalue ParmVar 0x12b928270 'flags' 'unsigned int'
|   | | | `-IfStmt 0x12b9426d0 <line:14:14, line:15:18>
|   | | |   |-BinaryOperator 0x12b942650 <line:14:18, col:68> 'int' contains-errors '&&'
|   | | |   | |-BinaryOperator 0x12b941dd8 <col:18, col:36> 'int' contains-errors '=='
|   | | |   | | |-CXXDependentScopeMemberExpr 0x12b941d30 <col:18, col:21> '<dependent type>' contains-errors lvalue ->length
|   | | |   | | | `-RecoveryExpr 0x12b941d10 <col:18> '<dependent type>' contains-errors lvalue
|   | | |   | | `-CStyleCastExpr 0x12b941db0 <col:31, col:36> 'int' contains-errors <Dependent>
|   | | |   | |   `-RecoveryExpr 0x12b941d78 <col:36> '<dependent type>' contains-errors lvalue
|   | | |   | `-UnaryOperator 0x12b942638 <col:44, col:68> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | | |   |   `-CallExpr 0x12b942600 <col:45, col:68> '<dependent type>' contains-errors
|   | | |   |     |-DeclRefExpr 0x12b9424f0 <col:45> 'int (const void *, const void *, unsigned long)' Function 0x12b9422a0 'memcmp' 'int (const void *, const void *, unsigned long)'
|   | | |   |     |-CXXDependentScopeMemberExpr 0x12b942530 <col:52, col:55> '<dependent type>' contains-errors lvalue ->data
|   | | |   |     | `-RecoveryExpr 0x12b942510 <col:52> '<dependent type>' contains-errors lvalue
|   | | |   |     |-DeclRefExpr 0x12b942578 <col:61> 'const char *' lvalue ParmVar 0x12b9282f0 'b' 'const char *'
|   | | |   |     `-RecoveryExpr 0x12b942598 <col:64> '<dependent type>' contains-errors lvalue
|   | | |   `-BinaryOperator 0x12b9426b0 <line:15:13, col:18> 'int' '='
|   | | |     |-DeclRefExpr 0x12b942670 <col:13> 'int' lvalue Var 0x12b928650 'rv' 'int'
|   | | |     `-IntegerLiteral 0x12b942690 <col:18> 'int' 1
|   | | `-IfStmt 0x12b944930 <line:16:9, line:17:67>
|   | |   |-BinaryOperator 0x12b9427d0 <line:16:13, col:23> 'int' '&&'
|   | |   | |-BinaryOperator 0x12b942778 <col:13, col:18> 'int' '>'
|   | |   | | |-ImplicitCastExpr 0x12b942760 <col:13> 'int' <LValueToRValue>
|   | |   | | | `-DeclRefExpr 0x12b942720 <col:13> 'int' lvalue Var 0x12b928650 'rv' 'int'
|   | |   | | `-IntegerLiteral 0x12b942740 <col:18> 'int' 0
|   | |   | `-ImplicitCastExpr 0x12b9427b8 <col:23> 'char **' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x12b942798 <col:23> 'char **' lvalue ParmVar 0x12b928428 'peername' 'char **'
|   | |   `-BinaryOperator 0x12b944910 <line:17:13, col:67> 'char *' contains-errors '='
|   | |     |-UnaryOperator 0x12b944638 <col:13, col:14> 'char *' lvalue prefix '*' cannot overflow
|   | |     | `-ImplicitCastExpr 0x12b944620 <col:14> 'char **' <LValueToRValue>
|   | |     |   `-DeclRefExpr 0x12b944600 <col:14> 'char **' lvalue ParmVar 0x12b928428 'peername' 'char **'
|   | |     `-CallExpr 0x12b9448e0 <col:25, col:67> '<dependent type>' contains-errors
|   | |       |-DeclRefExpr 0x12b9447b0 <col:25> 'int ()' Function 0x12b9446f8 'OPENSSL_strndup' 'int ()'
|   | |       |-CStyleCastExpr 0x12b944850 <col:41, col:52> 'char *' contains-errors <Dependent>
|   | |       | `-CXXDependentScopeMemberExpr 0x12b9447f0 <col:49, col:52> '<dependent type>' contains-errors lvalue ->data
|   | |       |   `-RecoveryExpr 0x12b9447d0 <col:49> '<dependent type>' contains-errors lvalue
|   | |       `-CXXDependentScopeMemberExpr 0x12b944898 <col:58, col:61> '<dependent type>' contains-errors lvalue ->length
|   | |         `-RecoveryExpr 0x12b944878 <col:58> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x12b945380 <line:18:12, line:30:5>
|   |   |-DeclStmt 0x12b9449f8 <line:19:9, col:20>
|   |   | `-VarDecl 0x12b944990 <col:9, col:13> col:13 used astrlen 'int'
|   |   |-DeclStmt 0x12b944a90 <line:20:9, col:28>
|   |   | `-VarDecl 0x12b944a28 <col:9, col:24> col:24 used astr 'unsigned char *'
|   |   |-BinaryOperator 0x12b944c88 <line:21:9, col:47> 'int' contains-errors '='
|   |   | |-DeclRefExpr 0x12b944aa8 <col:9> 'int' lvalue Var 0x12b944990 'astrlen' 'int'
|   |   | `-CallExpr 0x12b944c58 <col:19, col:47> '<dependent type>' contains-errors
|   |   |   |-DeclRefExpr 0x12b944ba8 <col:19> 'int ()' Function 0x12b944af0 'ASN1_STRING_to_UTF8' 'int ()'
|   |   |   |-UnaryOperator 0x12b944c20 <col:39, col:40> 'unsigned char **' prefix '&' cannot overflow
|   |   |   | `-DeclRefExpr 0x12b944bc8 <col:40> 'unsigned char *' lvalue Var 0x12b944a28 'astr' 'unsigned char *'
|   |   |   `-RecoveryExpr 0x12b944c38 <col:46> '<dependent type>' contains-errors lvalue
|   |   |-IfStmt 0x12b944d80 <line:22:9, line:25:9>
|   |   | |-BinaryOperator 0x12b944d00 <line:22:13, col:23> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x12b944ce8 <col:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x12b944ca8 <col:13> 'int' lvalue Var 0x12b944990 'astrlen' 'int'
|   |   | | `-IntegerLiteral 0x12b944cc8 <col:23> 'int' 0
|   |   | `-CompoundStmt 0x12b944d68 <col:26, line:25:9>
|   |   |   `-ReturnStmt 0x12b944d58 <line:24:13, col:21>
|   |   |     `-UnaryOperator 0x12b944d40 <col:20, col:21> 'int' prefix '-'
|   |   |       `-IntegerLiteral 0x12b944d20 <col:21> 'int' 1
|   |   |-BinaryOperator 0x12b944f20 <line:26:9, col:66> 'int' contains-errors '='
|   |   | |-DeclRefExpr 0x12b944da0 <col:9> 'int' lvalue Var 0x12b928650 'rv' 'int'
|   |   | `-CallExpr 0x12b944ed8 <col:14, col:66> '<dependent type>' contains-errors
|   |   |   |-RecoveryExpr 0x12b944dc0 <col:14> '<dependent type>' contains-errors lvalue
|   |   |   |-DeclRefExpr 0x12b944de0 <col:20> 'unsigned char *' lvalue Var 0x12b944a28 'astr' 'unsigned char *'
|   |   |   |-DeclRefExpr 0x12b944e00 <col:26> 'int' lvalue Var 0x12b944990 'astrlen' 'int'
|   |   |   |-CStyleCastExpr 0x12b944e70 <col:35, col:52> 'unsigned char *' <BitCast>
|   |   |   | `-ImplicitCastExpr 0x12b944e58 <col:52> 'const char *' <LValueToRValue> part_of_explicit_cast
|   |   |   |   `-DeclRefExpr 0x12b944e20 <col:52> 'const char *' lvalue ParmVar 0x12b9282f0 'b' 'const char *'
|   |   |   |-RecoveryExpr 0x12b944e98 <col:55> '<dependent type>' contains-errors lvalue
|   |   |   `-DeclRefExpr 0x12b944eb8 <col:61> 'unsigned int' lvalue ParmVar 0x12b928270 'flags' 'unsigned int'
|   |   |-IfStmt 0x12b9451e8 <line:27:9, line:28:62>
|   |   | |-BinaryOperator 0x12b944ff0 <line:27:13, col:23> 'int' '&&'
|   |   | | |-BinaryOperator 0x12b944f98 <col:13, col:18> 'int' '>'
|   |   | | | |-ImplicitCastExpr 0x12b944f80 <col:13> 'int' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x12b944f40 <col:13> 'int' lvalue Var 0x12b928650 'rv' 'int'
|   |   | | | `-IntegerLiteral 0x12b944f60 <col:18> 'int' 0
|   |   | | `-ImplicitCastExpr 0x12b944fd8 <col:23> 'char **' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x12b944fb8 <col:23> 'char **' lvalue ParmVar 0x12b928428 'peername' 'char **'
|   |   | `-BinaryOperator 0x12b9451c8 <line:28:13, col:62> 'char *' '='
|   |   |   |-UnaryOperator 0x12b945048 <col:13, col:14> 'char *' lvalue prefix '*' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x12b945030 <col:14> 'char **' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x12b945010 <col:14> 'char **' lvalue ParmVar 0x12b928428 'peername' 'char **'
|   |   |   `-ImplicitCastExpr 0x12b9451b0 <col:25, col:62> 'char *' <IntegralToPointer>
|   |   |     `-CallExpr 0x12b945168 <col:25, col:62> 'int'
|   |   |       |-ImplicitCastExpr 0x12b945150 <col:25> 'int (*)()' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x12b945060 <col:25> 'int ()' Function 0x12b9446f8 'OPENSSL_strndup' 'int ()'
|   |   |       |-CStyleCastExpr 0x12b9450d0 <col:41, col:49> 'char *' <BitCast>
|   |   |       | `-ImplicitCastExpr 0x12b9450b8 <col:49> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|   |   |       |   `-DeclRefExpr 0x12b945080 <col:49> 'unsigned char *' lvalue Var 0x12b944a28 'astr' 'unsigned char *'
|   |   |       `-ImplicitCastExpr 0x12b945198 <col:55> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x12b9450f8 <col:55> 'int' lvalue Var 0x12b944990 'astrlen' 'int'
|   |   `-CallExpr 0x12b945340 <line:29:9, col:26> 'int'
|   |     |-ImplicitCastExpr 0x12b945328 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x12b9452e8 <col:9> 'int ()' Function 0x12b945230 'OPENSSL_free' 'int ()'
|   |     `-ImplicitCastExpr 0x12b945368 <col:22> 'unsigned char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x12b945308 <col:22> 'unsigned char *' lvalue Var 0x12b944a28 'astr' 'unsigned char *'
|   `-ReturnStmt 0x12b945430 <line:31:5, col:12>
|     `-ImplicitCastExpr 0x12b945418 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x12b9453f8 <col:12> 'int' lvalue Var 0x12b928650 'rv' 'int'
`-FunctionDecl 0x12b9422a0 <line:14:45> col:45 implicit used memcmp 'int (const void *, const void *, unsigned long)' extern
  |-ParmVarDecl 0x12b9423a0 <<invalid sloc>> <invalid sloc> 'const void *'
  |-ParmVarDecl 0x12b942408 <<invalid sloc>> <invalid sloc> 'const void *'
  |-ParmVarDecl 0x12b942470 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x12b942348 <<invalid sloc>> Implicit 883
