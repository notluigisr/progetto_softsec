TranslationUnitDecl 0x144055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1440564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x144055bd0 '__int128'
|-TypedefDecl 0x144056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x144055bf0 'unsigned __int128'
|-TypedefDecl 0x144126a30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x144126800 'struct __NSConstantString_tag'
|   `-Record 0x144056580 '__NSConstantString_tag'
|-TypedefDecl 0x144126a98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x144055d90 '__SVInt8_t'
|-TypedefDecl 0x144126b00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x144055db0 '__SVInt16_t'
|-TypedefDecl 0x144126b68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x144055dd0 '__SVInt32_t'
|-TypedefDecl 0x144126bd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x144055df0 '__SVInt64_t'
|-TypedefDecl 0x144126c38 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x144055e10 '__SVUint8_t'
|-TypedefDecl 0x144126ca0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x144055e30 '__SVUint16_t'
|-TypedefDecl 0x144126d08 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x144055e50 '__SVUint32_t'
|-TypedefDecl 0x144126d70 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x144055e70 '__SVUint64_t'
|-TypedefDecl 0x144126dd8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x144055e90 '__SVFloat16_t'
|-TypedefDecl 0x144126e40 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x144055eb0 '__SVFloat32_t'
|-TypedefDecl 0x144126ea8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x144055ed0 '__SVFloat64_t'
|-TypedefDecl 0x144126f10 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x144055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x144126f78 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x144055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x144126fe0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x144055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x144127048 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x144055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1441270b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x144055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x144127118 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x144055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x144127180 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x144055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1441271e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x144055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x144127250 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x144055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x1441272b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x144056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x144127320 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x144056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x144127388 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x144056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x1441273f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x144056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x144127458 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x144056090 '__clang_svint8x3_t'
|-TypedefDecl 0x1441274c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1440560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x144127528 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1440560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x144127590 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1440560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x1441275f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x144056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x144127660 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x144056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x1441276c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x144056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x144127730 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x144056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x144127798 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x144056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x144128000 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1440561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x144128068 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1440561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1441280d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1440561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x144128138 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x144056210 '__clang_svint8x4_t'
|-TypedefDecl 0x1441281a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x144056230 '__clang_svint16x4_t'
|-TypedefDecl 0x144128208 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x144056250 '__clang_svint32x4_t'
|-TypedefDecl 0x144128270 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x144056270 '__clang_svint64x4_t'
|-TypedefDecl 0x1441282d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x144056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x144128340 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1440562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x1441283a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1440562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x144128410 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1440562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x144128478 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x144056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x1441284e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x144056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x144128548 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x144056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x1441285b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x144056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x144128618 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x144056390 '__SVBool_t'
|-TypedefDecl 0x144128680 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1440563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x1441286e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1440563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x144128750 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1440563f0 '__SVCount_t'
|-TypedefDecl 0x1441287f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1441287b0 'char *'
|   `-BuiltinType 0x1440556b0 'char'
|-TypedefDecl 0x144128868 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1441287b0 'char *'
|   `-BuiltinType 0x1440556b0 'char'
|-FunctionDecl 0x144128be0 <dataset_diviso_filec/func21031_nonvuln.c:1:1, line:70:1> line:1:13 invalid parse_tsel_args '_Bool (int **, char *, int *, int)' static
| |-ParmVarDecl 0x144128960 <col:29, col:42> col:42 referenced invalid __tsel_list 'int **'
| |-ParmVarDecl 0x1441289e0 <col:55, col:61> col:61 used opts 'char *'
| |-ParmVarDecl 0x144128a60 <col:67, col:72> col:72 invalid nb_tsel_act 'int *'
| |-ParmVarDecl 0x144128ae0 <col:85, col:100> col:100 invalid act 'int'
| `-CompoundStmt 0x14480e120 <line:2:1, line:70:1>
|   |-DeclStmt 0x144128d20 <line:4:2, col:20>
|   | `-VarDecl 0x144128cb8 <col:2, col:7> col:7 used has_switch_id '_Bool'
|   |-DeclStmt 0x144128e58 <line:9:2, col:19>
|   | `-VarDecl 0x144128df0 <col:2, col:18> col:7 used szSlot 'char[1024]'
|   |-BinaryOperator 0x144128f00 <line:12:2, col:18> '_Bool' '='
|   | |-DeclRefExpr 0x144128ea8 <col:2> '_Bool' lvalue Var 0x144128cb8 'has_switch_id' '_Bool'
|   | `-ImplicitCastExpr 0x144128ee8 <col:18> '_Bool' <IntegralToBoolean>
|   |   `-IntegerLiteral 0x144128ec8 <col:18> 'int' 0
|   |-IfStmt 0x144128fb8 <line:15:2, col:20>
|   | |-UnaryOperator 0x144128f58 <col:6, col:7> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x144128f40 <col:7> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x144128f20 <col:7> 'char *' lvalue ParmVar 0x1441289e0 'opts' 'char *'
|   | `-ReturnStmt 0x144128fa8 <col:13, col:20>
|   |   `-ImplicitCastExpr 0x144128f90 <col:20> '_Bool' <IntegralToBoolean>
|   |     `-IntegerLiteral 0x144128f70 <col:20> 'int' 0
|   |-WhileStmt 0x14480e0b8 <line:16:2, line:68:2>
|   | |-IntegerLiteral 0x144128fd8 <line:16:9> 'int' 1
|   | `-CompoundStmt 0x14480e068 <col:12, line:68:2>
|   |   |-DeclStmt 0x144809c80 <line:17:3, col:13>
|   |   | `-VarDecl 0x144809c18 <col:3, col:9> col:9 used next 'char *'
|   |   |-IfStmt 0x144809df8 <line:18:3, col:33>
|   |   | |-BinaryOperator 0x144809d90 <col:7, col:23> 'int' '||'
|   |   | | |-UnaryOperator 0x144809cd0 <col:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | | `-ImplicitCastExpr 0x144809cb8 <col:8> 'char *' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x144809c98 <col:8> 'char *' lvalue ParmVar 0x1441289e0 'opts' 'char *'
|   |   | | `-UnaryOperator 0x144809d78 <col:16, col:23> 'int' prefix '!' cannot overflow
|   |   | |   `-ImplicitCastExpr 0x144809d60 <col:17, col:23> 'char' <LValueToRValue>
|   |   | |     `-ArraySubscriptExpr 0x144809d40 <col:17, col:23> 'char' lvalue
|   |   | |       |-ImplicitCastExpr 0x144809d28 <col:17> 'char *' <LValueToRValue>
|   |   | |       | `-DeclRefExpr 0x144809ce8 <col:17> 'char *' lvalue ParmVar 0x1441289e0 'opts' 'char *'
|   |   | |       `-IntegerLiteral 0x144809d08 <col:22> 'int' 0
|   |   | `-ReturnStmt 0x144809de8 <col:26, col:33>
|   |   |   `-ImplicitCastExpr 0x144809dd0 <col:33> '_Bool' <IntegralToBoolean>
|   |   |     `-IntegerLiteral 0x144809db0 <col:33> 'int' 1
|   |   |-IfStmt 0x144809f68 <line:19:3, col:29>
|   |   | |-BinaryOperator 0x144809ed8 <col:7, col:16> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x144809ec0 <col:7, col:13> 'int' <IntegralCast>
|   |   | | | `-ImplicitCastExpr 0x144809ea8 <col:7, col:13> 'char' <LValueToRValue>
|   |   | | |   `-ArraySubscriptExpr 0x144809e70 <col:7, col:13> 'char' lvalue
|   |   | | |     |-ImplicitCastExpr 0x144809e58 <col:7> 'char *' <LValueToRValue>
|   |   | | |     | `-DeclRefExpr 0x144809e18 <col:7> 'char *' lvalue ParmVar 0x1441289e0 'opts' 'char *'
|   |   | | |     `-IntegerLiteral 0x144809e38 <col:12> 'int' 0
|   |   | | `-CharacterLiteral 0x144809e90 <col:16> 'int' 58
|   |   | `-CompoundAssignOperator 0x144809f38 <col:21, col:29> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
|   |   |   |-DeclRefExpr 0x144809ef8 <col:21> 'char *' lvalue ParmVar 0x1441289e0 'opts' 'char *'
|   |   |   `-IntegerLiteral 0x144809f18 <col:29> 'int' 1
|   |   |-CallExpr 0x14480a6a8 <line:20:3, col:22> 'char *'
|   |   | |-ImplicitCastExpr 0x14480a690 <col:3> 'char *(*)(char *, const char *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x14480a5d0 <col:3> 'char *(char *, const char *)' Function 0x14480a3f0 'strcpy' 'char *(char *, const char *)'
|   |   | |-ImplicitCastExpr 0x14480a6d8 <col:10> 'char *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x14480a5f0 <col:10> 'char[1024]' lvalue Var 0x144128df0 'szSlot' 'char[1024]'
|   |   | `-ImplicitCastExpr 0x14480a708 <col:18> 'const char *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x14480a6f0 <col:18> 'char *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x14480a610 <col:18> 'char *' lvalue ParmVar 0x1441289e0 'opts' 'char *'
|   |   |-BinaryOperator 0x14480a980 <line:21:3, col:36> 'char *' '='
|   |   | |-DeclRefExpr 0x14480a720 <col:3> 'char *' lvalue Var 0x144809c18 'next' 'char *'
|   |   | `-ImplicitCastExpr 0x14480a968 <col:10, col:36> 'char *' <IntegralToPointer>
|   |   |   `-CallExpr 0x14480a928 <col:10, col:36> 'int'
|   |   |     |-ImplicitCastExpr 0x14480a910 <col:10> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x14480a8a0 <col:10> 'int ()' Function 0x14480a7e8 'gf_url_colon_suffix' 'int ()'
|   |   |     `-ImplicitCastExpr 0x14480a950 <col:30> 'char *' <ArrayToPointerDecay>
|   |   |       `-DeclRefExpr 0x14480a8c0 <col:30> 'char[1024]' lvalue Var 0x144128df0 'szSlot' 'char[1024]'
|   |   |-IfStmt 0x14480aaa8 <line:22:3, col:23>
|   |   | |-ImplicitCastExpr 0x14480a9c0 <col:7> 'char *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x14480a9a0 <col:7> 'char *' lvalue Var 0x144809c18 'next' 'char *'
|   |   | `-BinaryOperator 0x14480aa88 <col:13, col:23> 'char' '='
|   |   |   |-ArraySubscriptExpr 0x14480aa30 <col:13, col:19> 'char' lvalue
|   |   |   | |-ImplicitCastExpr 0x14480aa18 <col:13> 'char *' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x14480a9d8 <col:13> 'char *' lvalue Var 0x144809c18 'next' 'char *'
|   |   |   | `-IntegerLiteral 0x14480a9f8 <col:18> 'int' 0
|   |   |   `-ImplicitCastExpr 0x14480aa70 <col:23> 'char' <IntegralCast>
|   |   |     `-IntegerLiteral 0x14480aa50 <col:23> 'int' 0
|   |   |-IfStmt 0x14480df20 <line:25:3, line:66:3> has_else
|   |   | |-UnaryOperator 0x14480b500 <line:25:7, col:33> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x14480b498 <col:8, col:33> 'int'
|   |   | |   |-ImplicitCastExpr 0x14480b480 <col:8> 'int (*)()' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x14480aba8 <col:8> 'int ()' Function 0x14480aaf0 'strnicmp' 'int ()'
|   |   | |   |-ImplicitCastExpr 0x14480b4d0 <col:17> 'char *' <ArrayToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x14480abc8 <col:17> 'char[1024]' lvalue Var 0x144128df0 'szSlot' 'char[1024]'
|   |   | |   |-ImplicitCastExpr 0x14480b4e8 <col:25> 'char *' <ArrayToPointerDecay>
|   |   | |   | `-StringLiteral 0x14480b440 <col:25> 'char[4]' lvalue "STR"
|   |   | |   `-IntegerLiteral 0x14480b460 <col:32> 'int' 9
|   |   | |-NullStmt 0x14480df18 <col:36>
|   |   | `-IfStmt 0x14480dee8 <line:26:8, line:66:3> has_else
|   |   |   |-UnaryOperator 0x14480b7d0 <line:26:12, col:38> 'int' prefix '!' cannot overflow
|   |   |   | `-CallExpr 0x14480b768 <col:13, col:38> 'int'
|   |   |   |   |-ImplicitCastExpr 0x14480b750 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x14480b6d0 <col:13> 'int ()' Function 0x14480aaf0 'strnicmp' 'int ()'
|   |   |   |   |-ImplicitCastExpr 0x14480b7a0 <col:22> 'char *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x14480b6f0 <col:22> 'char[1024]' lvalue Var 0x144128df0 'szSlot' 'char[1024]'
|   |   |   |   |-ImplicitCastExpr 0x14480b7b8 <col:30> 'char *' <ArrayToPointerDecay>
|   |   |   |   | `-StringLiteral 0x14480b710 <col:30> 'char[4]' lvalue "STR"
|   |   |   |   `-IntegerLiteral 0x14480b730 <col:37> 'int' 9
|   |   |   |-CompoundStmt 0x14480bb48 <col:41, line:34:3>
|   |   |   | `-IfStmt 0x14480bb18 <line:27:4, line:33:4> has_else
|   |   |   |   |-BinaryOperator 0x14480b8e0 <line:27:8, col:23> 'int' '<'
|   |   |   |   | |-CallExpr 0x14480b898 <col:8, col:21> 'int'
|   |   |   |   | | |-ImplicitCastExpr 0x14480b880 <col:8> 'int (*)()' <FunctionToPointerDecay>
|   |   |   |   | | | `-DeclRefExpr 0x14480b7e8 <col:8> 'int ()' Function 0x14480b540 'atoi' 'int ()'
|   |   |   |   | | `-BinaryOperator 0x14480b860 <col:13, col:20> 'char *' '+'
|   |   |   |   | |   |-ImplicitCastExpr 0x14480b848 <col:13> 'char *' <ArrayToPointerDecay>
|   |   |   |   | |   | `-DeclRefExpr 0x14480b808 <col:13> 'char[1024]' lvalue Var 0x144128df0 'szSlot' 'char[1024]'
|   |   |   |   | |   `-IntegerLiteral 0x14480b828 <col:20> 'int' 9
|   |   |   |   | `-IntegerLiteral 0x14480b8c0 <col:23> 'int' 0
|   |   |   |   |-CompoundStmt 0x14480b998 <col:26, line:30:4>
|   |   |   |   | `-BinaryOperator 0x14480b978 <line:29:5, col:21> '_Bool' '='
|   |   |   |   |   |-DeclRefExpr 0x14480b920 <col:5> '_Bool' lvalue Var 0x144128cb8 'has_switch_id' '_Bool'
|   |   |   |   |   `-ImplicitCastExpr 0x14480b960 <col:21> '_Bool' <IntegralToBoolean>
|   |   |   |   |     `-IntegerLiteral 0x14480b940 <col:21> 'int' 0
|   |   |   |   `-CompoundStmt 0x14480bb00 <line:30:11, line:33:4>
|   |   |   |     `-BinaryOperator 0x14480bae0 <line:32:5, col:21> '_Bool' '='
|   |   |   |       |-DeclRefExpr 0x14480ba88 <col:5> '_Bool' lvalue Var 0x144128cb8 'has_switch_id' '_Bool'
|   |   |   |       `-ImplicitCastExpr 0x14480bac8 <col:21> '_Bool' <IntegralToBoolean>
|   |   |   |         `-IntegerLiteral 0x14480baa8 <col:21> 'int' 1
|   |   |   `-IfStmt 0x14480deb8 <line:35:8, line:66:3> has_else
|   |   |     |-UnaryOperator 0x14480bc60 <line:35:12, col:38> 'int' prefix '!' cannot overflow
|   |   |     | `-CallExpr 0x14480bbf8 <col:13, col:38> 'int'
|   |   |     |   |-ImplicitCastExpr 0x14480bbe0 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |   |     |   | `-DeclRefExpr 0x14480bb60 <col:13> 'int ()' Function 0x14480aaf0 'strnicmp' 'int ()'
|   |   |     |   |-ImplicitCastExpr 0x14480bc30 <col:22> 'char *' <ArrayToPointerDecay>
|   |   |     |   | `-DeclRefExpr 0x14480bb80 <col:22> 'char[1024]' lvalue Var 0x144128df0 'szSlot' 'char[1024]'
|   |   |     |   |-ImplicitCastExpr 0x14480bc48 <col:30> 'char *' <ArrayToPointerDecay>
|   |   |     |   | `-StringLiteral 0x14480bba0 <col:30> 'char[4]' lvalue "STR"
|   |   |     |   `-IntegerLiteral 0x14480bbc0 <col:37> 'int' 8
|   |   |     |-CompoundStmt 0x14480bd10 <col:41, line:38:3>
|   |   |     | `-BinaryOperator 0x14480bcf0 <line:37:4, col:20> '_Bool' '='
|   |   |     |   |-DeclRefExpr 0x14480bc98 <col:4> '_Bool' lvalue Var 0x144128cb8 'has_switch_id' '_Bool'
|   |   |     |   `-ImplicitCastExpr 0x14480bcd8 <col:20> '_Bool' <IntegralToBoolean>
|   |   |     |     `-IntegerLiteral 0x14480bcb8 <col:20> 'int' 1
|   |   |     `-IfStmt 0x14480de88 <line:39:8, line:66:3> has_else
|   |   |       |-UnaryOperator 0x14480be28 <line:39:12, col:38> 'int' prefix '!' cannot overflow
|   |   |       | `-CallExpr 0x14480bdc0 <col:13, col:38> 'int'
|   |   |       |   |-ImplicitCastExpr 0x14480bda8 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |   |       |   | `-DeclRefExpr 0x14480bd28 <col:13> 'int ()' Function 0x14480aaf0 'strnicmp' 'int ()'
|   |   |       |   |-ImplicitCastExpr 0x14480bdf8 <col:22> 'char *' <ArrayToPointerDecay>
|   |   |       |   | `-DeclRefExpr 0x14480bd48 <col:22> 'char[1024]' lvalue Var 0x144128df0 'szSlot' 'char[1024]'
|   |   |       |   |-ImplicitCastExpr 0x14480be10 <col:30> 'char *' <ArrayToPointerDecay>
|   |   |       |   | `-StringLiteral 0x14480bd68 <col:30> 'char[4]' lvalue "STR"
|   |   |       |   `-IntegerLiteral 0x14480bd88 <col:37> 'int' 9
|   |   |       |-CompoundStmt 0x14480c370 <col:41, line:47:3>
|   |   |       | `-WhileStmt 0x14480c350 <line:42:4, line:46:4>
|   |   |       |   |-RecoveryExpr 0x14480c120 <line:42:11, col:28> '_Bool' contains-errors
|   |   |       |   `-CompoundStmt 0x14480c340 <col:31, line:46:4>
|   |   |       `-IfStmt 0x14480de68 <line:48:8, line:66:3>
|   |   |         |-BinaryOperator 0x14480d210 <line:48:12, col:62> 'int' '||'
|   |   |         | |-UnaryOperator 0x14480cea0 <col:12, col:38> 'int' prefix '!' cannot overflow
|   |   |         | | `-CallExpr 0x14480ce38 <col:13, col:38> 'int'
|   |   |         | |   |-ImplicitCastExpr 0x14480ce20 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |   |         | |   | `-DeclRefExpr 0x14480c388 <col:13> 'int ()' Function 0x14480aaf0 'strnicmp' 'int ()'
|   |   |         | |   |-ImplicitCastExpr 0x14480ce70 <col:22> 'char *' <ArrayToPointerDecay>
|   |   |         | |   | `-DeclRefExpr 0x14480c3a8 <col:22> 'char[1024]' lvalue Var 0x144128df0 'szSlot' 'char[1024]'
|   |   |         | |   |-ImplicitCastExpr 0x14480ce88 <col:30> 'char *' <ArrayToPointerDecay>
|   |   |         | |   | `-StringLiteral 0x14480c3c8 <col:30> 'char[4]' lvalue "STR"
|   |   |         | |   `-IntegerLiteral 0x14480ce00 <col:37> 'int' 8
|   |   |         | `-UnaryOperator 0x14480d1f8 <col:43, col:62> 'int' prefix '!' cannot overflow
|   |   |         |   `-CallExpr 0x14480d198 <col:44, col:62> 'char *'
|   |   |         |     |-ImplicitCastExpr 0x14480d180 <col:44> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   |   |         |     | `-DeclRefExpr 0x14480d0e0 <col:44> 'char *(const char *, int)' Function 0x14480cf00 'strchr' 'char *(const char *, int)'
|   |   |         |     |-ImplicitCastExpr 0x14480d1e0 <col:51> 'const char *' <NoOp>
|   |   |         |     | `-ImplicitCastExpr 0x14480d1c8 <col:51> 'char *' <ArrayToPointerDecay>
|   |   |         |     |   `-DeclRefExpr 0x14480d100 <col:51> 'char[1024]' lvalue Var 0x144128df0 'szSlot' 'char[1024]'
|   |   |         |     `-CharacterLiteral 0x14480d120 <col:59> 'int' 61
|   |   |         `-CompoundStmt 0x14480de50 <col:66, line:66:3>
|   |   |           `-UnaryOperator 0x14480de38 <line:65:4, col:19> '<dependent type>' contains-errors postfix '++' cannot overflow
|   |   |             `-ParenExpr 0x14480de18 <col:4, col:17> '<dependent type>' contains-errors
|   |   |               `-UnaryOperator 0x14480de00 <col:5, col:6> '<dependent type>' contains-errors prefix '*' cannot overflow
|   |   |                 `-ImplicitCastExpr 0x14480dde8 <col:6> '<dependent type>' contains-errors <LValueToRValue>
|   |   |                   `-RecoveryExpr 0x14480ddc8 <col:6> '<dependent type>' contains-errors lvalue
|   |   `-CompoundAssignOperator 0x14480e038 <line:67:3, col:24> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
|   |     |-DeclRefExpr 0x14480df50 <col:3> 'char *' lvalue ParmVar 0x1441289e0 'opts' 'char *'
|   |     `-CallExpr 0x14480dfe0 <col:11, col:24> 'unsigned long'
|   |       |-ImplicitCastExpr 0x14480dfc8 <col:11> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x14480df70 <col:11> 'unsigned long (const char *)' Function 0x14480beb8 'strlen' 'unsigned long (const char *)'
|   |       `-ImplicitCastExpr 0x14480e020 <col:18> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x14480e008 <col:18> 'char *' <ArrayToPointerDecay>
|   |           `-DeclRefExpr 0x14480df90 <col:18> 'char[1024]' lvalue Var 0x144128df0 'szSlot' 'char[1024]'
|   `-ReturnStmt 0x14480e110 <line:69:2, col:9>
|     `-ImplicitCastExpr 0x14480e0f8 <col:9> '_Bool' <IntegralToBoolean>
|       `-IntegerLiteral 0x14480e0d8 <col:9> 'int' 1
|-FunctionDecl 0x14480a3f0 <line:20:3> col:3 implicit used strcpy 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x14480a4f0 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x14480a558 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x14480a498 <<invalid sloc>> Implicit 885
|-FunctionDecl 0x14480beb8 <line:42:15> col:15 implicit used strlen 'unsigned long (const char *)' extern
| |-ParmVarDecl 0x14480bfb8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x14480bf60 <<invalid sloc>> Implicit 902
|-FunctionDecl 0x14480cf00 <line:48:44> col:44 implicit used strchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x14480d000 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x14480d068 <<invalid sloc>> <invalid sloc> 'int'
| `-BuiltinAttr 0x14480cfa8 <<invalid sloc>> Implicit 893
|-FunctionDecl 0x14480d568 <line:53:4> col:4 implicit used memset 'void *(void *, int, unsigned long)' extern
| |-ParmVarDecl 0x14480d668 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x14480d6d0 <<invalid sloc>> <invalid sloc> 'int'
| |-ParmVarDecl 0x14480d738 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x14480d610 <<invalid sloc>> Implicit 900
`-FunctionDecl 0x14480db38 <line:60:4> col:4 implicit used memcpy 'void *(void *, const void *, unsigned long)' extern
  |-ParmVarDecl 0x14480dc38 <<invalid sloc>> <invalid sloc> 'void *'
  |-ParmVarDecl 0x14480dca0 <<invalid sloc>> <invalid sloc> 'const void *'
  |-ParmVarDecl 0x14480dd08 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x14480dbe0 <<invalid sloc>> Implicit 882
