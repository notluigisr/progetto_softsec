TranslationUnitDecl 0x121055008 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x121055eb8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1210555d0 '__int128'
|-TypedefDecl 0x121055f28 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1210555f0 'unsigned __int128'
|-TypedefDecl 0x12000c430 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12000c200 'struct __NSConstantString_tag'
|   `-Record 0x121055f80 '__NSConstantString_tag'
|-TypedefDecl 0x12000c498 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x121055790 '__SVInt8_t'
|-TypedefDecl 0x12000c500 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x1210557b0 '__SVInt16_t'
|-TypedefDecl 0x12000c568 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x1210557d0 '__SVInt32_t'
|-TypedefDecl 0x12000c5d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x1210557f0 '__SVInt64_t'
|-TypedefDecl 0x12000c638 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x121055810 '__SVUint8_t'
|-TypedefDecl 0x12000c6a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x121055830 '__SVUint16_t'
|-TypedefDecl 0x12000c708 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x121055850 '__SVUint32_t'
|-TypedefDecl 0x12000c770 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x121055870 '__SVUint64_t'
|-TypedefDecl 0x12000c7d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x121055890 '__SVFloat16_t'
|-TypedefDecl 0x12000c840 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x1210558b0 '__SVFloat32_t'
|-TypedefDecl 0x12000c8a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x1210558d0 '__SVFloat64_t'
|-TypedefDecl 0x12000c910 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x1210558f0 '__SVBfloat16_t'
|-TypedefDecl 0x12000c978 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x121055910 '__clang_svint8x2_t'
|-TypedefDecl 0x12000c9e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x121055930 '__clang_svint16x2_t'
|-TypedefDecl 0x12000ca48 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x121055950 '__clang_svint32x2_t'
|-TypedefDecl 0x12000cab0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x121055970 '__clang_svint64x2_t'
|-TypedefDecl 0x12000cb18 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x121055990 '__clang_svuint8x2_t'
|-TypedefDecl 0x12000cb80 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x1210559b0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12000cbe8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x1210559d0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12000cc50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x1210559f0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12000ccb8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x121055a10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12000cd20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x121055a30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12000cd88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x121055a50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12000cdf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x121055a70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12000ce58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x121055a90 '__clang_svint8x3_t'
|-TypedefDecl 0x12000cec0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x121055ab0 '__clang_svint16x3_t'
|-TypedefDecl 0x12000cf28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x121055ad0 '__clang_svint32x3_t'
|-TypedefDecl 0x12000cf90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x121055af0 '__clang_svint64x3_t'
|-TypedefDecl 0x12000cff8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x121055b10 '__clang_svuint8x3_t'
|-TypedefDecl 0x12000d060 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x121055b30 '__clang_svuint16x3_t'
|-TypedefDecl 0x12000d0c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x121055b50 '__clang_svuint32x3_t'
|-TypedefDecl 0x12000d130 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x121055b70 '__clang_svuint64x3_t'
|-TypedefDecl 0x12000d198 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x121055b90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12000da00 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x121055bb0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12000da68 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x121055bd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12000dad0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x121055bf0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12000db38 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x121055c10 '__clang_svint8x4_t'
|-TypedefDecl 0x12000dba0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x121055c30 '__clang_svint16x4_t'
|-TypedefDecl 0x12000dc08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x121055c50 '__clang_svint32x4_t'
|-TypedefDecl 0x12000dc70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x121055c70 '__clang_svint64x4_t'
|-TypedefDecl 0x12000dcd8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x121055c90 '__clang_svuint8x4_t'
|-TypedefDecl 0x12000dd40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x121055cb0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12000dda8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x121055cd0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12000de10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x121055cf0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12000de78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x121055d10 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12000dee0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x121055d30 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12000df48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x121055d50 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12000dfb0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x121055d70 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12000e018 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x121055d90 '__SVBool_t'
|-TypedefDecl 0x12000e080 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x121055db0 '__clang_svboolx2_t'
|-TypedefDecl 0x12000e0e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x121055dd0 '__clang_svboolx4_t'
|-TypedefDecl 0x12000e150 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x121055df0 '__SVCount_t'
|-TypedefDecl 0x12000e1f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12000e1b0 'char *'
|   `-BuiltinType 0x1210550b0 'char'
|-TypedefDecl 0x12000e268 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12000e1b0 'char *'
|   `-BuiltinType 0x1210550b0 'char'
|-FunctionDecl 0x12000e638 <dataset_diviso_filec/func16800_vuln.c:1:1, line:46:1> line:1:5 invalid ff_amf_get_field_value 'int (const int *, const int *, const int *, int *, int)'
| |-ParmVarDecl 0x12000e2f0 <col:28, col:43> col:43 referenced invalid data 'const int *'
| |-ParmVarDecl 0x12000e370 <col:49, col:64> col:64 invalid data_end 'const int *'
| |-ParmVarDecl 0x12000e3f0 <line:2:28, col:43> col:43 invalid name 'const int *'
| |-ParmVarDecl 0x12000e4a8 <col:49, col:58> col:58 invalid dst 'int *'
| |-ParmVarDecl 0x12000e528 <col:63, col:67> col:67 used dst_size 'int'
| `-CompoundStmt 0x10700ad70 <line:3:1, line:46:1>
|   |-DeclStmt 0x120027e00 <line:4:5, col:31>
|   | `-VarDecl 0x12000e720 <col:5, col:30> col:9 used namelen 'int' cinit
|   |   `-CallExpr 0x120027dd8 <col:19, col:30> '<dependent type>' contains-errors
|   |     |-DeclRefExpr 0x120027d80 <col:19> 'unsigned long (const char *)' Function 0x120027c10 'strlen' 'unsigned long (const char *)'
|   |     `-RecoveryExpr 0x120027da0 <col:26> '<dependent type>' contains-errors lvalue
|   |-DeclStmt 0x120027e98 <line:5:5, col:12>
|   | `-VarDecl 0x120027e30 <col:5, col:9> col:9 used len 'int'
|   |-WhileStmt 0x120028498 <line:7:5, line:12:5>
|   | |-BinaryOperator 0x120028058 <line:7:12, col:52> 'int' contains-errors '&&'
|   | | |-BinaryOperator 0x120028038 <col:12, col:21> 'int' contains-errors '!='
|   | | | |-UnaryOperator 0x120028000 <col:12, col:13> '<dependent type>' contains-errors prefix '*' cannot overflow
|   | | | | `-ImplicitCastExpr 0x120027fe8 <col:13> '<dependent type>' contains-errors <LValueToRValue>
|   | | | |   `-RecoveryExpr 0x120027eb0 <col:13> '<dependent type>' contains-errors lvalue
|   | | | `-RecoveryExpr 0x120028018 <col:21> '<dependent type>' contains-errors lvalue
|   | | `-BinaryOperator 0x120027f78 <col:45, col:52> 'int' contains-errors '<'
|   | |   |-RecoveryExpr 0x120027f38 <col:45> '<dependent type>' contains-errors lvalue
|   | |   `-RecoveryExpr 0x120027f58 <col:52> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x120028470 <col:62, line:12:5>
|   |   |-BinaryOperator 0x120028280 <line:8:9, col:45> 'int' contains-errors '='
|   |   | |-DeclRefExpr 0x120028078 <col:9> 'int' lvalue Var 0x120027e30 'len' 'int'
|   |   | `-CallExpr 0x120028250 <col:15, col:45> '<dependent type>' contains-errors
|   |   |   |-DeclRefExpr 0x1200281f0 <col:15> 'int ()' Function 0x120028138 'ff_amf_tag_size' 'int ()'
|   |   |   |-RecoveryExpr 0x120028210 <col:31> '<dependent type>' contains-errors lvalue
|   |   |   `-RecoveryExpr 0x120028230 <col:37> '<dependent type>' contains-errors lvalue
|   |   |-IfStmt 0x1200283b8 <line:9:9, line:10:30>
|   |   | |-BinaryOperator 0x1200282f8 <line:9:13, col:19> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x1200282e0 <col:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1200282a0 <col:13> 'int' lvalue Var 0x120027e30 'len' 'int'
|   |   | | `-IntegerLiteral 0x1200282c0 <col:19> 'int' 0
|   |   | `-BinaryOperator 0x120028398 <line:10:13, col:30> 'int' contains-errors '='
|   |   |   |-DeclRefExpr 0x120028318 <col:13> 'int' lvalue Var 0x120027e30 'len' 'int'
|   |   |   `-BinaryOperator 0x120028378 <col:19, col:30> '<dependent type>' contains-errors '-'
|   |   |     |-RecoveryExpr 0x120028338 <col:19> '<dependent type>' contains-errors lvalue
|   |   |     `-RecoveryExpr 0x120028358 <col:30> '<dependent type>' contains-errors lvalue
|   |   `-CompoundAssignOperator 0x120028440 <line:11:9, col:17> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   |     |-RecoveryExpr 0x1200283f8 <col:9> '<dependent type>' contains-errors lvalue
|   |     | `-DeclRefExpr 0x1200283d8 <col:9> 'const int *' lvalue ParmVar 0x12000e2f0 'data' 'const int *'
|   |     `-DeclRefExpr 0x120028420 <col:17> 'int' lvalue Var 0x120027e30 'len' 'int'
|   |-IfStmt 0x1200285a0 <line:13:5, line:14:17>
|   | |-BinaryOperator 0x120028538 <line:13:9, col:27> 'int' contains-errors '<'
|   | | |-BinaryOperator 0x1200284f8 <col:9, col:20> '<dependent type>' contains-errors '-'
|   | | | |-RecoveryExpr 0x1200284b8 <col:9> '<dependent type>' contains-errors lvalue
|   | | | `-RecoveryExpr 0x1200284d8 <col:20> '<dependent type>' contains-errors lvalue
|   | | `-IntegerLiteral 0x120028518 <col:27> 'int' 3
|   | `-ReturnStmt 0x120028590 <line:14:9, col:17>
|   |   `-UnaryOperator 0x120028578 <col:16, col:17> 'int' prefix '-'
|   |     `-IntegerLiteral 0x120028558 <col:17> 'int' 1
|   |-UnaryOperator 0x120028608 <line:15:5, col:9> '<dependent type>' contains-errors postfix '++' cannot overflow
|   | `-RecoveryExpr 0x1200285e0 <col:5> '<dependent type>' contains-errors lvalue
|   |   `-DeclRefExpr 0x1200285c0 <col:5> 'const int *' lvalue ParmVar 0x12000e2f0 'data' 'const int *'
|   |-ForStmt 0x10700acf0 <line:16:5, line:44:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | `-CompoundStmt 0x10700aca0 <line:16:14, line:44:5>
|   |   |-DeclStmt 0x120028800 <line:17:9, col:46>
|   |   | `-VarDecl 0x120028638 <col:9, col:45> col:13 used size 'int' cinit
|   |   |   `-CallExpr 0x1200287d8 <col:20, col:45> '<dependent type>' contains-errors
|   |   |     |-DeclRefExpr 0x120028780 <col:20> 'int ()' Function 0x1200286c8 'bytestream_get_be16' 'int ()'
|   |   |     `-UnaryOperator 0x1200287c0 <col:40, col:41> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   |       `-RecoveryExpr 0x1200287a0 <col:41> '<dependent type>' contains-errors lvalue
|   |   |-IfStmt 0x120028870 <line:18:9, line:19:13>
|   |   | |-UnaryOperator 0x120028850 <line:18:13, col:14> 'int' contains-errors prefix '!' cannot overflow
|   |   | | `-ImplicitCastExpr 0x120028838 <col:14> 'int' contains-errors <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x120028818 <col:14> 'int' contains-errors lvalue Var 0x120028638 'size' 'int'
|   |   | `-BreakStmt 0x120028868 <line:19:13>
|   |   |-IfStmt 0x107009610 <line:20:9, line:21:21>
|   |   | |-BinaryOperator 0x1200289a8 <line:20:13, col:44> 'int' contains-errors '||'
|   |   | | |-BinaryOperator 0x1200288e8 <col:13, col:20> 'int' contains-errors '<'
|   |   | | | |-ImplicitCastExpr 0x1200288d0 <col:13> 'int' contains-errors <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x120028890 <col:13> 'int' contains-errors lvalue Var 0x120028638 'size' 'int'
|   |   | | | `-IntegerLiteral 0x1200288b0 <col:20> 'int' 0
|   |   | | `-BinaryOperator 0x120028988 <col:25, col:44> 'int' contains-errors '>='
|   |   | |   |-DeclRefExpr 0x120028908 <col:25> 'int' contains-errors lvalue Var 0x120028638 'size' 'int'
|   |   | |   `-BinaryOperator 0x120028968 <col:33, col:44> '<dependent type>' contains-errors '-'
|   |   | |     |-RecoveryExpr 0x120028928 <col:33> '<dependent type>' contains-errors lvalue
|   |   | |     `-RecoveryExpr 0x120028948 <col:44> '<dependent type>' contains-errors lvalue
|   |   | `-ReturnStmt 0x107009600 <line:21:13, col:21>
|   |   |   `-UnaryOperator 0x1200289e8 <col:20, col:21> 'int' prefix '-'
|   |   |     `-IntegerLiteral 0x1200289c8 <col:21> 'int' 1
|   |   |-CompoundAssignOperator 0x107009698 <line:22:9, col:17> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   |   | |-RecoveryExpr 0x107009650 <col:9> '<dependent type>' contains-errors lvalue
|   |   | | `-DeclRefExpr 0x107009630 <col:9> 'const int *' lvalue ParmVar 0x12000e2f0 'data' 'const int *'
|   |   | `-DeclRefExpr 0x107009678 <col:17> 'int' contains-errors lvalue Var 0x120028638 'size' 'int'
|   |   |-IfStmt 0x10700a978 <line:23:9, line:39:9>
|   |   | |-BinaryOperator 0x107009b68 <line:23:13, col:64> 'int' contains-errors '&&'
|   |   | | |-BinaryOperator 0x107009738 <col:13, col:21> 'int' contains-errors '=='
|   |   | | | |-ImplicitCastExpr 0x107009708 <col:13> 'int' contains-errors <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x1070096c8 <col:13> 'int' contains-errors lvalue Var 0x120028638 'size' 'int'
|   |   | | | `-ImplicitCastExpr 0x107009720 <col:21> 'int' contains-errors <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x1070096e8 <col:21> 'int' contains-errors lvalue Var 0x12000e720 'namelen' 'int'
|   |   | | `-UnaryOperator 0x107009b50 <col:32, col:64> '<dependent type>' contains-errors prefix '!' cannot overflow
|   |   | |   `-CallExpr 0x107009b18 <col:33, col:64> '<dependent type>' contains-errors
|   |   | |     |-DeclRefExpr 0x107009a28 <col:33> 'int (const void *, const void *, unsigned long)' Function 0x1070097d8 'memcmp' 'int (const void *, const void *, unsigned long)'
|   |   | |     |-BinaryOperator 0x107009a88 <col:40, col:45> '<dependent type>' contains-errors '-'
|   |   | |     | |-RecoveryExpr 0x107009a48 <col:40> '<dependent type>' contains-errors lvalue
|   |   | |     | `-DeclRefExpr 0x107009a68 <col:45> 'int' contains-errors lvalue Var 0x120028638 'size' 'int'
|   |   | |     |-RecoveryExpr 0x107009aa8 <col:51> '<dependent type>' contains-errors lvalue
|   |   | |     `-DeclRefExpr 0x107009ac8 <col:57> 'int' contains-errors lvalue Var 0x12000e720 'namelen' 'int'
|   |   | `-CompoundStmt 0x10700a958 <col:67, line:39:9>
|   |   |   |-SwitchStmt 0x107009bd8 <line:24:13, line:37:13>
|   |   |   | |-UnaryOperator 0x107009bc0 <line:24:21, col:26> '<dependent type>' contains-errors prefix '*' cannot overflow
|   |   |   | | `-UnaryOperator 0x107009ba8 <col:22, col:26> '<dependent type>' contains-errors postfix '++' cannot overflow
|   |   |   | |   `-RecoveryExpr 0x107009b88 <col:22> '<dependent type>' contains-errors lvalue
|   |   |   | `-CompoundStmt 0x10700a8d8 <col:30, line:37:13>
|   |   |   |   |-CallExpr 0x10700a278 <line:26:17, col:76> '<dependent type>' contains-errors
|   |   |   |   | |-DeclRefExpr 0x107009ef8 <col:17> 'int (char *, unsigned long, const char *, ...)' Function 0x107009c70 'snprintf' 'int (char *, unsigned long, const char *, ...)'
|   |   |   |   | |-RecoveryExpr 0x107009f18 <col:26> '<dependent type>' contains-errors lvalue
|   |   |   |   | |-DeclRefExpr 0x107009f38 <col:31> 'int' lvalue ParmVar 0x12000e528 'dst_size' 'int'
|   |   |   |   | |-StringLiteral 0x107009fa0 <col:41> 'char[4]' lvalue "STR"
|   |   |   |   | `-CallExpr 0x10700a208 <col:48, col:75> '<dependent type>' contains-errors
|   |   |   |   |   |-DeclRefExpr 0x10700a0a0 <col:48> 'int ()' Function 0x107009fe8 'av_int2double' 'int ()'
|   |   |   |   |   `-CallExpr 0x10700a1e0 <col:62, col:74> '<dependent type>' contains-errors
|   |   |   |   |     |-DeclRefExpr 0x10700a1a0 <col:62> 'int ()' Function 0x10700a0e8 'AV_RB64' 'int ()'
|   |   |   |   |     `-RecoveryExpr 0x10700a1c0 <col:70> '<dependent type>' contains-errors lvalue
|   |   |   |   |-BreakStmt 0x10700a2b8 <line:27:17>
|   |   |   |   |-CallExpr 0x10700a3a0 <line:29:17, col:46> '<dependent type>' contains-errors
|   |   |   |   | |-DeclRefExpr 0x10700a2d8 <col:17> 'int (char *, unsigned long, const char *, ...)' Function 0x107009c70 'snprintf' 'int (char *, unsigned long, const char *, ...)'
|   |   |   |   | |-RecoveryExpr 0x10700a2f8 <col:26> '<dependent type>' contains-errors lvalue
|   |   |   |   | |-DeclRefExpr 0x10700a318 <col:31> 'int' lvalue ParmVar 0x12000e528 'dst_size' 'int'
|   |   |   |   | `-StringLiteral 0x10700a338 <col:41> 'char[4]' lvalue "STR"
|   |   |   |   |-BreakStmt 0x10700a3d8 <line:30:17>
|   |   |   |   |-BinaryOperator 0x10700a498 <line:32:17, col:48> 'int' contains-errors '='
|   |   |   |   | |-DeclRefExpr 0x10700a3f8 <col:17> 'int' lvalue Var 0x120027e30 'len' 'int'
|   |   |   |   | `-CallExpr 0x10700a470 <col:23, col:48> '<dependent type>' contains-errors
|   |   |   |   |   |-DeclRefExpr 0x10700a418 <col:23> 'int ()' Function 0x1200286c8 'bytestream_get_be16' 'int ()'
|   |   |   |   |   `-UnaryOperator 0x10700a458 <col:43, col:44> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   |   |   |     `-RecoveryExpr 0x10700a438 <col:44> '<dependent type>' contains-errors lvalue
|   |   |   |   |-CallExpr 0x10700a830 <line:33:17, col:61> '<dependent type>' contains-errors
|   |   |   |   | |-DeclRefExpr 0x10700a598 <col:17> 'int ()' Function 0x10700a4e0 'av_strlcpy' 'int ()'
|   |   |   |   | |-RecoveryExpr 0x10700a5b8 <col:28> '<dependent type>' contains-errors lvalue
|   |   |   |   | |-RecoveryExpr 0x10700a5d8 <col:33> '<dependent type>' contains-errors lvalue
|   |   |   |   | `-CallExpr 0x10700a7e8 <col:39, col:60> 'int'
|   |   |   |   |   |-ImplicitCastExpr 0x10700a7d0 <col:39> 'int (*)()' <FunctionToPointerDecay>
|   |   |   |   |   | `-DeclRefExpr 0x10700a6e0 <col:39> 'int ()' Function 0x10700a628 'FFMIN' 'int ()'
|   |   |   |   |   |-BinaryOperator 0x10700a758 <col:45, col:49> 'int' '+'
|   |   |   |   |   | |-ImplicitCastExpr 0x10700a740 <col:45> 'int' <LValueToRValue>
|   |   |   |   |   | | `-DeclRefExpr 0x10700a700 <col:45> 'int' lvalue Var 0x120027e30 'len' 'int'
|   |   |   |   |   | `-IntegerLiteral 0x10700a720 <col:49> 'int' 1
|   |   |   |   |   `-ImplicitCastExpr 0x10700a818 <col:52> 'int' <LValueToRValue>
|   |   |   |   |     `-DeclRefExpr 0x10700a778 <col:52> 'int' lvalue ParmVar 0x12000e528 'dst_size' 'int'
|   |   |   |   |-BreakStmt 0x10700a868 <line:34:17>
|   |   |   |   `-DefaultStmt 0x10700a8b8 <line:35:13, line:36:25>
|   |   |   |     `-ReturnStmt 0x10700a8a8 <col:17, col:25>
|   |   |   |       `-UnaryOperator 0x10700a890 <col:24, col:25> 'int' prefix '-'
|   |   |   |         `-IntegerLiteral 0x10700a870 <col:25> 'int' 1
|   |   |   `-ReturnStmt 0x10700a948 <line:38:13, col:20>
|   |   |     `-IntegerLiteral 0x10700a928 <col:20> 'int' 0
|   |   |-BinaryOperator 0x10700aa48 <line:40:9, col:45> 'int' contains-errors '='
|   |   | |-DeclRefExpr 0x10700a998 <col:9> 'int' lvalue Var 0x120027e30 'len' 'int'
|   |   | `-CallExpr 0x10700aa18 <col:15, col:45> '<dependent type>' contains-errors
|   |   |   |-DeclRefExpr 0x10700a9b8 <col:15> 'int ()' Function 0x120028138 'ff_amf_tag_size' 'int ()'
|   |   |   |-RecoveryExpr 0x10700a9d8 <col:31> '<dependent type>' contains-errors lvalue
|   |   |   `-RecoveryExpr 0x10700a9f8 <col:37> '<dependent type>' contains-errors lvalue
|   |   |-IfStmt 0x10700abe8 <line:41:9, line:42:21>
|   |   | |-BinaryOperator 0x10700ab80 <line:41:13, col:42> 'int' contains-errors '||'
|   |   | | |-BinaryOperator 0x10700aac0 <col:13, col:19> 'int' '<'
|   |   | | | |-ImplicitCastExpr 0x10700aaa8 <col:13> 'int' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x10700aa68 <col:13> 'int' lvalue Var 0x120027e30 'len' 'int'
|   |   | | | `-IntegerLiteral 0x10700aa88 <col:19> 'int' 0
|   |   | | `-BinaryOperator 0x10700ab60 <col:24, col:42> 'int' contains-errors '>='
|   |   | |   |-DeclRefExpr 0x10700aae0 <col:24> 'int' lvalue Var 0x120027e30 'len' 'int'
|   |   | |   `-BinaryOperator 0x10700ab40 <col:31, col:42> '<dependent type>' contains-errors '-'
|   |   | |     |-RecoveryExpr 0x10700ab00 <col:31> '<dependent type>' contains-errors lvalue
|   |   | |     `-RecoveryExpr 0x10700ab20 <col:42> '<dependent type>' contains-errors lvalue
|   |   | `-ReturnStmt 0x10700abd8 <line:42:13, col:21>
|   |   |   `-UnaryOperator 0x10700abc0 <col:20, col:21> 'int' prefix '-'
|   |   |     `-IntegerLiteral 0x10700aba0 <col:21> 'int' 1
|   |   `-CompoundAssignOperator 0x10700ac70 <line:43:9, col:17> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   |     |-RecoveryExpr 0x10700ac28 <col:9> '<dependent type>' contains-errors lvalue
|   |     | `-DeclRefExpr 0x10700ac08 <col:9> 'const int *' lvalue ParmVar 0x12000e2f0 'data' 'const int *'
|   |     `-DeclRefExpr 0x10700ac50 <col:17> 'int' lvalue Var 0x120027e30 'len' 'int'
|   `-ReturnStmt 0x10700ad60 <line:45:5, col:13>
|     `-UnaryOperator 0x10700ad48 <col:12, col:13> 'int' prefix '-'
|       `-IntegerLiteral 0x10700ad28 <col:13> 'int' 1
|-FunctionDecl 0x120027c10 <line:4:19> col:19 implicit used strlen 'unsigned long (const char *)' extern
| |-ParmVarDecl 0x120027d10 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x120027cb8 <<invalid sloc>> Implicit 902
|-FunctionDecl 0x1070097d8 <line:23:33> col:33 implicit used memcmp 'int (const void *, const void *, unsigned long)' extern
| |-ParmVarDecl 0x1070098d8 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x107009940 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x1070099a8 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x107009880 <<invalid sloc>> Implicit 883
`-FunctionDecl 0x107009c70 <line:26:17> col:17 implicit used snprintf 'int (char *, unsigned long, const char *, ...)' extern
  |-ParmVarDecl 0x107009d70 <<invalid sloc>> <invalid sloc> 'char *'
  |-ParmVarDecl 0x107009dd8 <<invalid sloc>> <invalid sloc> 'unsigned long'
  |-ParmVarDecl 0x107009e40 <<invalid sloc>> <invalid sloc> 'const char *'
  |-BuiltinAttr 0x107009d18 <<invalid sloc>> Implicit 905
  `-FormatAttr 0x107009ec0 <col:17> Implicit printf 3 4
