TranslationUnitDecl 0x121855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1218564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x121855bd0 '__int128'
|-TypedefDecl 0x121856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x121855bf0 'unsigned __int128'
|-TypedefDecl 0x121926230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x121926000 'struct __NSConstantString_tag'
|   `-Record 0x121856580 '__NSConstantString_tag'
|-TypedefDecl 0x121926298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x121855d90 '__SVInt8_t'
|-TypedefDecl 0x121926300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x121855db0 '__SVInt16_t'
|-TypedefDecl 0x121926368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x121855dd0 '__SVInt32_t'
|-TypedefDecl 0x1219263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x121855df0 '__SVInt64_t'
|-TypedefDecl 0x121926438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x121855e10 '__SVUint8_t'
|-TypedefDecl 0x1219264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x121855e30 '__SVUint16_t'
|-TypedefDecl 0x121926508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x121855e50 '__SVUint32_t'
|-TypedefDecl 0x121926570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x121855e70 '__SVUint64_t'
|-TypedefDecl 0x1219265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x121855e90 '__SVFloat16_t'
|-TypedefDecl 0x121926640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x121855eb0 '__SVFloat32_t'
|-TypedefDecl 0x1219266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x121855ed0 '__SVFloat64_t'
|-TypedefDecl 0x121926710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x121855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x121926778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x121855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1219267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x121855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x121926848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x121855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1219268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x121855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x121926918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x121855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x121926980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x121855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1219269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x121855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x121926a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x121855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x121926ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x121856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x121926b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x121856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x121926b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x121856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x121926bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x121856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x121926c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x121856090 '__clang_svint8x3_t'
|-TypedefDecl 0x121926cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1218560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x121926d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1218560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x121926d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1218560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x121926df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x121856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x121926e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x121856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x121926ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x121856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x121926f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x121856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x121926f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x121856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x121927800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1218561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x121927868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1218561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1219278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1218561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x121927938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x121856210 '__clang_svint8x4_t'
|-TypedefDecl 0x1219279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x121856230 '__clang_svint16x4_t'
|-TypedefDecl 0x121927a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x121856250 '__clang_svint32x4_t'
|-TypedefDecl 0x121927a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x121856270 '__clang_svint64x4_t'
|-TypedefDecl 0x121927ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x121856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x121927b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1218562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x121927ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1218562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x121927c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1218562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x121927c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x121856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x121927ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x121856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x121927d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x121856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x121927db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x121856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x121927e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x121856390 '__SVBool_t'
|-TypedefDecl 0x121927e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1218563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x121927ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1218563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x121927f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1218563f0 '__SVCount_t'
|-TypedefDecl 0x121927ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x121927fb0 'char *'
|   `-BuiltinType 0x1218556b0 'char'
|-TypedefDecl 0x121928068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x121927fb0 'char *'
|   `-BuiltinType 0x1218556b0 'char'
`-FunctionDecl 0x1219281f8 <dataset_diviso_filec/func18696_vuln.c:1:1, line:43:1> line:1:5 invalid button_open 'int (int *)'
  |-ParmVarDecl 0x121928128 <col:17, col:25> col:25 referenced invalid b 'int *'
  `-CompoundStmt 0x1219459d8 <col:28, line:43:1>
    |-DeclStmt 0x121928450 <line:2:9, col:27>
    | |-VarDecl 0x1219282c0 <col:9, col:15> col:15 used p 'char *'
    | `-VarDecl 0x1219283d0 <col:9, col:26> col:18 used name 'char[256]'
    |-DeclStmt 0x1219284e8 <line:3:9, col:14>
    | `-VarDecl 0x121928480 <col:9, col:13> col:13 used r 'int'
    |-CallExpr 0x1219286a0 <line:5:9, col:17> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x121928660 <col:9> 'int ()' Function 0x1219285a8 'assert' 'int ()'
    | `-RecoveryExpr 0x121928680 <col:16> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x121941f68 <line:7:9, col:33> '<dependent type>' contains-errors '='
    | |-CXXDependentScopeMemberExpr 0x121928710 <col:9, col:12> '<dependent type>' contains-errors lvalue ->fd
    | | `-RecoveryExpr 0x1219286e8 <col:9> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x1219286c8 <col:9> 'int *' lvalue ParmVar 0x121928128 'b' 'int *'
    | `-CallExpr 0x121941f40 <col:17, col:33> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x121941eb8 <col:17> 'int ()' Function 0x121941e00 'safe_close' 'int ()'
    |   `-CXXDependentScopeMemberExpr 0x121941ef8 <col:28, col:31> '<dependent type>' contains-errors lvalue ->fd
    |     `-RecoveryExpr 0x121941ed8 <col:28> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x1219421a8 <line:9:9, col:36> 'char *' contains-errors '='
    | |-DeclRefExpr 0x121941f88 <col:9> 'char *' lvalue Var 0x1219282c0 'p' 'char *'
    | `-CallExpr 0x121942178 <col:13, col:36> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x121942088 <col:13> 'int ()' Function 0x121941fd0 'strjoina' 'int ()'
    |   |-StringLiteral 0x1219420f0 <col:22> 'char[4]' lvalue "STR"
    |   `-CXXDependentScopeMemberExpr 0x121942130 <col:29, col:32> '<dependent type>' contains-errors lvalue ->name
    |     `-RecoveryExpr 0x121942110 <col:29> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x121942598 <line:11:9, col:61> '<dependent type>' contains-errors '='
    | |-CXXDependentScopeMemberExpr 0x121942210 <col:9, col:12> '<dependent type>' contains-errors lvalue ->fd
    | | `-RecoveryExpr 0x1219421e8 <col:9> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x1219421c8 <col:9> 'int *' lvalue ParmVar 0x121928128 'b' 'int *'
    | `-CallExpr 0x121942568 <col:17, col:61> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x121942338 <col:17> 'int ()' Function 0x121942280 'open' 'int ()'
    |   |-DeclRefExpr 0x121942358 <col:22> 'char *' lvalue Var 0x1219282c0 'p' 'char *'
    |   `-BinaryOperator 0x121942548 <col:25, col:51> '<dependent type>' contains-errors '|'
    |     |-BinaryOperator 0x121942508 <col:25, col:42> '<dependent type>' contains-errors '|'
    |     | |-BinaryOperator 0x1219424c8 <col:25, col:32> '<dependent type>' contains-errors '|'
    |     | | |-RecoveryExpr 0x121942488 <col:25> '<dependent type>' contains-errors lvalue
    |     | | `-RecoveryExpr 0x1219424a8 <col:32> '<dependent type>' contains-errors lvalue
    |     | `-RecoveryExpr 0x1219424e8 <col:42> '<dependent type>' contains-errors lvalue
    |     `-RecoveryExpr 0x121942528 <col:51> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x121942858 <line:12:9, line:13:57>
    | |-BinaryOperator 0x121942640 <line:12:13, col:21> 'int' contains-errors '<'
    | | |-CXXDependentScopeMemberExpr 0x1219425d8 <col:13, col:16> '<dependent type>' contains-errors lvalue ->fd
    | | | `-RecoveryExpr 0x1219425b8 <col:13> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x121942620 <col:21> 'int' 0
    | `-ReturnStmt 0x121942848 <line:13:17, col:57>
    |   `-CallExpr 0x121942810 <col:24, col:57> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x121942740 <col:24> 'int ()' Function 0x121942688 'log_warning_errno' 'int ()'
    |     |-RecoveryExpr 0x1219427f0 <col:42> '<dependent type>' contains-errors lvalue
    |     |-StringLiteral 0x121942778 <col:49> 'char[4]' lvalue "STR"
    |     `-DeclRefExpr 0x121942798 <col:56> 'char *' lvalue Var 0x1219282c0 'p' 'char *'
    |-BinaryOperator 0x1219429e0 <line:15:9, col:30> 'int' contains-errors '='
    | |-DeclRefExpr 0x121942878 <col:9> 'int' lvalue Var 0x121928480 'r' 'int'
    | `-CallExpr 0x1219429b8 <col:13, col:30> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x121942978 <col:13> 'int ()' Function 0x1219428c0 'button_suitable' 'int ()'
    |   `-RecoveryExpr 0x121942998 <col:29> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x121942b98 <line:16:9, line:17:50>
    | |-BinaryOperator 0x121942a58 <line:16:13, col:17> 'int' '<'
    | | |-ImplicitCastExpr 0x121942a40 <col:13> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x121942a00 <col:13> 'int' lvalue Var 0x121928480 'r' 'int'
    | | `-IntegerLiteral 0x121942a20 <col:17> 'int' 0
    | `-ReturnStmt 0x121942b88 <line:17:17, col:50>
    |   `-CallExpr 0x121942b28 <col:24, col:50> 'int'
    |     |-ImplicitCastExpr 0x121942b10 <col:24> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x121942a78 <col:24> 'int ()' Function 0x121942688 'log_warning_errno' 'int ()'
    |     |-ImplicitCastExpr 0x121942b58 <col:42> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x121942a98 <col:42> 'int' lvalue Var 0x121928480 'r' 'int'
    |     `-ImplicitCastExpr 0x121942b70 <col:45> 'char *' <ArrayToPointerDecay>
    |       `-StringLiteral 0x121942ab8 <col:45> 'char[4]' lvalue "STR"
    |-IfStmt 0x121943378 <line:18:9, line:21:41>
    | |-BinaryOperator 0x121942c10 <line:18:13, col:18> 'int' '=='
    | | |-ImplicitCastExpr 0x121942bf8 <col:13> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x121942bb8 <col:13> 'int' lvalue Var 0x121928480 'r' 'int'
    | | `-IntegerLiteral 0x121942bd8 <col:18> 'int' 0
    | `-ReturnStmt 0x121943368 <line:19:17, line:21:41>
    |   `-CallExpr 0x121943330 <line:19:24, line:21:41> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x121942d10 <line:19:24> 'int ()' Function 0x121942c58 'log_debug_errno' 'int ()'
    |     |-CallExpr 0x121943308 <col:40, col:69> '<dependent type>' contains-errors
    |     | |-DeclRefExpr 0x121943210 <col:40> 'int ()' Function 0x121942d58 'SYNTHETIC_ERRNO' 'int ()'
    |     | `-RecoveryExpr 0x1219432e8 <col:56> '<dependent type>' contains-errors lvalue
    |     |-StringLiteral 0x121943270 <line:20:40> 'char[4]' lvalue "STR"
    |     `-DeclRefExpr 0x121943290 <line:21:40> 'char *' lvalue Var 0x1219282c0 'p' 'char *'
    |-IfStmt 0x1219439d8 <line:23:9, line:26:9>
    | |-BinaryOperator 0x121943718 <line:23:13, col:60> 'int' contains-errors '<'
    | | |-CallExpr 0x1219436c0 <col:13, col:56> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x121943478 <col:13> 'int ()' Function 0x1219433c0 'ioctl' 'int ()'
    | | | |-CXXDependentScopeMemberExpr 0x1219434b8 <col:19, col:22> '<dependent type>' contains-errors lvalue ->fd
    | | | | `-RecoveryExpr 0x121943498 <col:19> '<dependent type>' contains-errors lvalue
    | | | |-CallExpr 0x121943678 <col:26, col:49> 'int'
    | | | | |-ImplicitCastExpr 0x121943660 <col:26> 'int (*)()' <FunctionToPointerDecay>
    | | | | | `-DeclRefExpr 0x1219435e0 <col:26> 'int ()' Function 0x121943528 'EVIOCGNAME' 'int ()'
    | | | | `-UnaryExprOrTypeTraitExpr 0x121943640 <col:37, col:48> 'unsigned long' sizeof
    | | | |   `-ParenExpr 0x121943620 <col:43, col:48> 'char[256]' lvalue
    | | | |     `-DeclRefExpr 0x121943600 <col:44> 'char[256]' lvalue Var 0x1219283d0 'name' 'char[256]' non_odr_use_unevaluated
    | | | `-DeclRefExpr 0x1219436a0 <col:52> 'char[256]' lvalue Var 0x1219283d0 'name' 'char[256]'
    | | `-IntegerLiteral 0x1219436f8 <col:60> 'int' 0
    | `-CompoundStmt 0x1219439b8 <col:63, line:26:9>
    |   |-BinaryOperator 0x121943930 <line:24:17, col:49> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x121943738 <col:17> 'int' lvalue Var 0x121928480 'r' 'int'
    |   | `-CallExpr 0x121943900 <col:21, col:49> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x121943838 <col:21> 'int ()' Function 0x121943780 'log_error_errno' 'int ()'
    |   |   |-RecoveryExpr 0x1219438e0 <col:37> '<dependent type>' contains-errors lvalue
    |   |   `-StringLiteral 0x121943870 <col:44> 'char[4]' lvalue "STR"
    |   `-GotoStmt 0x1219439a0 <line:25:17, col:22> 'fail' 0x121943950
    |-CStyleCastExpr 0x121943b50 <line:28:9, col:33> 'void' contains-errors <ToVoid>
    | `-CallExpr 0x121943b18 <col:16, col:33> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x121943ad8 <col:16> 'int ()' Function 0x121943a20 'button_set_mask' 'int ()'
    |   `-RecoveryExpr 0x121943af8 <col:32> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x121943fd8 <line:31:9, line:34:9>
    | |-BinaryOperator 0x121943ea8 <line:31:13, col:17> 'int' '<'
    | | |-ImplicitCastExpr 0x121943e90 <col:13> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x121943e50 <col:13> 'int' lvalue Var 0x121928480 'r' 'int'
    | | `-IntegerLiteral 0x121943e70 <col:17> 'int' 0
    | `-CompoundStmt 0x121943fb8 <col:20, line:34:9>
    |   |-CallExpr 0x121943f40 <line:32:17, col:41> 'int'
    |   | |-ImplicitCastExpr 0x121943f28 <col:17> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x121943ec8 <col:17> 'int ()' Function 0x121943780 'log_error_errno' 'int ()'
    |   | |-ImplicitCastExpr 0x121943f70 <col:33> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x121943ee8 <col:33> 'int' lvalue Var 0x121928480 'r' 'int'
    |   | `-ImplicitCastExpr 0x121943f88 <col:36> 'char *' <ArrayToPointerDecay>
    |   |   `-StringLiteral 0x121943f08 <col:36> 'char[4]' lvalue "STR"
    |   `-GotoStmt 0x121943fa0 <line:33:17, col:22> 'fail' 0x121943950
    |-CallExpr 0x1219441a0 <line:36:9, col:38> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x1219440d8 <col:9> 'int ()' Function 0x121944020 'log_info' 'int ()'
    | |-StringLiteral 0x1219440f8 <col:18> 'char[4]' lvalue "STR"
    | |-CXXDependentScopeMemberExpr 0x121944138 <col:25, col:28> '<dependent type>' contains-errors lvalue ->name
    | | `-RecoveryExpr 0x121944118 <col:25> '<dependent type>' contains-errors lvalue
    | `-DeclRefExpr 0x121944180 <col:34> 'char[256]' lvalue Var 0x1219283d0 'name' 'char[256]'
    |-ReturnStmt 0x121945800 <line:38:9, col:16>
    | `-IntegerLiteral 0x1219441d8 <col:16> 'int' 0
    |-LabelStmt 0x121945970 <line:40:1, line:41:33> 'fail'
    | `-BinaryOperator 0x121945950 <col:9, col:33> '<dependent type>' contains-errors '='
    |   |-CXXDependentScopeMemberExpr 0x121945858 <col:9, col:12> '<dependent type>' contains-errors lvalue ->fd
    |   | `-RecoveryExpr 0x121945830 <col:9> '<dependent type>' contains-errors lvalue
    |   |   `-DeclRefExpr 0x121945810 <col:9> 'int *' lvalue ParmVar 0x121928128 'b' 'int *'
    |   `-CallExpr 0x121945928 <col:17, col:33> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x1219458a0 <col:17> 'int ()' Function 0x121941e00 'safe_close' 'int ()'
    |     `-CXXDependentScopeMemberExpr 0x1219458e0 <col:28, col:31> '<dependent type>' contains-errors lvalue ->fd
    |       `-RecoveryExpr 0x1219458c0 <col:28> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x1219459c8 <line:42:9, col:16>
      `-ImplicitCastExpr 0x1219459b0 <col:16> 'int' <LValueToRValue>
        `-DeclRefExpr 0x121945990 <col:16> 'int' lvalue Var 0x121928480 'r' 'int'
