TranslationUnitDecl 0x124855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1248564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x124855bd0 '__int128'
|-TypedefDecl 0x124856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x124855bf0 'unsigned __int128'
|-TypedefDecl 0x124926230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x124926000 'struct __NSConstantString_tag'
|   `-Record 0x124856580 '__NSConstantString_tag'
|-TypedefDecl 0x124926298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x124855d90 '__SVInt8_t'
|-TypedefDecl 0x124926300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x124855db0 '__SVInt16_t'
|-TypedefDecl 0x124926368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x124855dd0 '__SVInt32_t'
|-TypedefDecl 0x1249263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x124855df0 '__SVInt64_t'
|-TypedefDecl 0x124926438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x124855e10 '__SVUint8_t'
|-TypedefDecl 0x1249264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x124855e30 '__SVUint16_t'
|-TypedefDecl 0x124926508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x124855e50 '__SVUint32_t'
|-TypedefDecl 0x124926570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x124855e70 '__SVUint64_t'
|-TypedefDecl 0x1249265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x124855e90 '__SVFloat16_t'
|-TypedefDecl 0x124926640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x124855eb0 '__SVFloat32_t'
|-TypedefDecl 0x1249266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x124855ed0 '__SVFloat64_t'
|-TypedefDecl 0x124926710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x124855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x124926778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x124855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1249267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x124855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x124926848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x124855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1249268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x124855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x124926918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x124855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x124926980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x124855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1249269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x124855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x124926a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x124855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x124926ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x124856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x124926b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x124856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x124926b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x124856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x124926bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x124856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x124926c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x124856090 '__clang_svint8x3_t'
|-TypedefDecl 0x124926cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1248560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x124926d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1248560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x124926d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1248560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x124926df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x124856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x124926e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x124856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x124926ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x124856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x124926f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x124856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x124926f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x124856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x124927800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1248561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x124927868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1248561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1249278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1248561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x124927938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x124856210 '__clang_svint8x4_t'
|-TypedefDecl 0x1249279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x124856230 '__clang_svint16x4_t'
|-TypedefDecl 0x124927a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x124856250 '__clang_svint32x4_t'
|-TypedefDecl 0x124927a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x124856270 '__clang_svint64x4_t'
|-TypedefDecl 0x124927ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x124856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x124927b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1248562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x124927ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1248562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x124927c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1248562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x124927c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x124856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x124927ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x124856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x124927d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x124856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x124927db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x124856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x124927e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x124856390 '__SVBool_t'
|-TypedefDecl 0x124927e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1248563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x124927ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1248563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x124927f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1248563f0 '__SVCount_t'
|-TypedefDecl 0x124927ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x124927fb0 'char *'
|   `-BuiltinType 0x1248556b0 'char'
|-TypedefDecl 0x124928068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x124927fb0 'char *'
|   `-BuiltinType 0x1248556b0 'char'
`-FunctionDecl 0x124928258 <dataset_diviso_filec/func19179_nonvuln.c:1:1, line:45:1> line:1:5 invalid gdImageBrightness 'int (int, int)'
  |-ParmVarDecl 0x1249280f0 <col:23, col:34> col:34 invalid src 'int'
  |-ParmVarDecl 0x124928170 <col:39, col:43> col:43 used brightness 'int'
  `-CompoundStmt 0x1249459f8 <line:2:1, line:45:1>
    |-DeclStmt 0x124928428 <line:3:2, col:10>
    | |-VarDecl 0x124928328 <col:2, col:6> col:6 used x 'int'
    | `-VarDecl 0x1249283a8 <col:2, col:9> col:9 used y 'int'
    |-DeclStmt 0x124928668 <line:4:2, col:13>
    | |-VarDecl 0x124928458 <col:2, col:6> col:6 used r 'int'
    | |-VarDecl 0x1249284d8 <col:2, col:8> col:8 used g 'int'
    | |-VarDecl 0x124928558 <col:2, col:10> col:10 used b 'int'
    | `-VarDecl 0x1249285d8 <col:2, col:12> col:12 used a 'int'
    |-DeclStmt 0x124928798 <line:5:2, col:18>
    | |-VarDecl 0x124928698 <col:2, col:6> col:6 used new_pxl 'int'
    | `-VarDecl 0x124928718 <col:2, col:15> col:15 used pxl 'int'
    |-DeclStmt 0x124941920 <line:6:2, col:46>
    | `-TypedefDecl 0x1249418c8 <col:2, col:45> col:16 referenced FuncPtr 'int (*)()'
    |   `-PointerType 0x124941860 'int (*)()'
    |     `-ParenType 0x124941800 'int ()' sugar
    |       `-FunctionNoProtoType 0x1249287b0 'int ()' cdecl
    |         `-BuiltinType 0x124855710 'int'
    |-DeclStmt 0x124941a18 <line:7:2, col:11>
    | `-VarDecl 0x1249419b0 <col:2, col:10> col:10 used f 'FuncPtr':'int (*)()'
    |-BinaryOperator 0x124941be0 <line:8:2, col:28> 'FuncPtr':'int (*)()' contains-errors '='
    | |-DeclRefExpr 0x124941a30 <col:2> 'FuncPtr':'int (*)()' lvalue Var 0x1249419b0 'f' 'FuncPtr':'int (*)()'
    | `-CallExpr 0x124941bb8 <col:6, col:28> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x124941b78 <col:6> 'int ()' Function 0x124941ac0 'GET_PIXEL_FUNCTION' 'int ()'
    |   `-RecoveryExpr 0x124941b98 <col:25> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x124941f18 <line:10:2, line:12:2>
    | |-BinaryOperator 0x124941eb0 <line:10:6, col:55> 'int' contains-errors '||'
    | | |-BinaryOperator 0x124941de0 <col:6, col:11> 'int' contains-errors '=='
    | | | |-RecoveryExpr 0x124941c00 <col:6> '<dependent type>' contains-errors lvalue
    | | | `-RecoveryExpr 0x124941dc0 <col:11> '<dependent type>' contains-errors lvalue
    | | `-ParenExpr 0x124941e90 <col:19, col:55> 'int'
    | |   `-BinaryOperator 0x124941e70 <col:20, col:52> 'int' '||'
    | |     |-BinaryOperator 0x124941e18 <col:20, col:34> 'int' '<'
    | |     | |-ImplicitCastExpr 0x124941e00 <col:20> 'int' <LValueToRValue>
    | |     | | `-DeclRefExpr 0x124941c58 <col:20> 'int' lvalue ParmVar 0x124928170 'brightness' 'int'
    | |     | `-UnaryOperator 0x124941c98 <col:33, col:34> 'int' prefix '-'
    | |     |   `-IntegerLiteral 0x124941c78 <col:34> 'int' 255
    | |     `-BinaryOperator 0x124941e50 <col:41, col:52> 'int' '>'
    | |       |-ImplicitCastExpr 0x124941e38 <col:41> 'int' <LValueToRValue>
    | |       | `-DeclRefExpr 0x124941ce8 <col:41> 'int' lvalue ParmVar 0x124928170 'brightness' 'int'
    | |       `-IntegerLiteral 0x124941d08 <col:52> 'int' 255
    | `-CompoundStmt 0x124941f00 <col:58, line:12:2>
    |   `-ReturnStmt 0x124941ef0 <line:11:3, col:10>
    |     `-IntegerLiteral 0x124941ed0 <col:10> 'int' 0
    |-IfStmt 0x124941ff8 <line:14:2, line:16:2>
    | |-BinaryOperator 0x124941f90 <line:14:6, col:18> 'int' '=='
    | | |-ImplicitCastExpr 0x124941f78 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x124941f38 <col:6> 'int' lvalue ParmVar 0x124928170 'brightness' 'int'
    | | `-IntegerLiteral 0x124941f58 <col:18> 'int' 0
    | `-CompoundStmt 0x124941fe0 <col:21, line:16:2>
    |   `-ReturnStmt 0x124941fd0 <line:15:3, col:10>
    |     `-IntegerLiteral 0x124941fb0 <col:10> 'int' 1
    |-ForStmt 0x124945990 <line:18:2, line:43:2>
    | |-BinaryOperator 0x124942058 <line:18:7, col:9> 'int' '='
    | | |-DeclRefExpr 0x124942018 <col:7> 'int' lvalue Var 0x1249283a8 'y' 'int'
    | | `-IntegerLiteral 0x124942038 <col:9> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x124942100 <col:12, col:19> 'int' contains-errors '<'
    | | |-DeclRefExpr 0x124942078 <col:12> 'int' lvalue Var 0x1249283a8 'y' 'int'
    | | `-CXXDependentScopeMemberExpr 0x1249420b8 <col:14, col:19> '<dependent type>' contains-errors lvalue ->sy
    | |   `-RecoveryExpr 0x124942098 <col:14> '<dependent type>' contains-errors lvalue
    | |-UnaryOperator 0x124942140 <col:23, col:25> 'int' prefix '++'
    | | `-DeclRefExpr 0x124942120 <col:25> 'int' lvalue Var 0x1249283a8 'y' 'int'
    | `-CompoundStmt 0x124945978 <col:28, line:43:2>
    |   `-ForStmt 0x124945940 <line:19:3, line:42:3>
    |     |-BinaryOperator 0x124942198 <line:19:8, col:10> 'int' '='
    |     | |-DeclRefExpr 0x124942158 <col:8> 'int' lvalue Var 0x124928328 'x' 'int'
    |     | `-IntegerLiteral 0x124942178 <col:10> 'int' 0
    |     |-<<<NULL>>>
    |     |-BinaryOperator 0x124942240 <col:13, col:20> 'int' contains-errors '<'
    |     | |-DeclRefExpr 0x1249421b8 <col:13> 'int' lvalue Var 0x124928328 'x' 'int'
    |     | `-CXXDependentScopeMemberExpr 0x1249421f8 <col:15, col:20> '<dependent type>' contains-errors lvalue ->sx
    |     |   `-RecoveryExpr 0x1249421d8 <col:15> '<dependent type>' contains-errors lvalue
    |     |-UnaryOperator 0x124942280 <col:24, col:26> 'int' prefix '++'
    |     | `-DeclRefExpr 0x124942260 <col:26> 'int' lvalue Var 0x124928328 'x' 'int'
    |     `-CompoundStmt 0x1249458c0 <col:29, line:42:3>
    |       |-BinaryOperator 0x124942370 <line:20:4, col:22> 'int' contains-errors '='
    |       | |-DeclRefExpr 0x124942298 <col:4> 'int' lvalue Var 0x124928718 'pxl' 'int'
    |       | `-CallExpr 0x124942338 <col:10, col:22> '<dependent type>' contains-errors
    |       |   |-DeclRefExpr 0x1249422b8 <col:10> 'FuncPtr':'int (*)()' lvalue Var 0x1249419b0 'f' 'FuncPtr':'int (*)()'
    |       |   |-RecoveryExpr 0x1249422d8 <col:13> '<dependent type>' contains-errors lvalue
    |       |   |-DeclRefExpr 0x1249422f8 <col:18> 'int' lvalue Var 0x124928328 'x' 'int'
    |       |   `-DeclRefExpr 0x124942318 <col:21> 'int' lvalue Var 0x1249283a8 'y' 'int'
    |       |-BinaryOperator 0x124942520 <line:22:4, col:27> 'int' contains-errors '='
    |       | |-DeclRefExpr 0x124942390 <col:4> 'int' lvalue Var 0x124928458 'r' 'int'
    |       | `-CallExpr 0x1249424f0 <col:8, col:27> '<dependent type>' contains-errors
    |       |   |-DeclRefExpr 0x124942490 <col:8> 'int ()' Function 0x1249423d8 'gdImageRed' 'int ()'
    |       |   |-RecoveryExpr 0x1249424b0 <col:19> '<dependent type>' contains-errors lvalue
    |       |   `-DeclRefExpr 0x1249424d0 <col:24> 'int' lvalue Var 0x124928718 'pxl' 'int'
    |       |-BinaryOperator 0x1249426d0 <line:23:4, col:29> 'int' contains-errors '='
    |       | |-DeclRefExpr 0x124942540 <col:4> 'int' lvalue Var 0x1249284d8 'g' 'int'
    |       | `-CallExpr 0x1249426a0 <col:8, col:29> '<dependent type>' contains-errors
    |       |   |-DeclRefExpr 0x124942640 <col:8> 'int ()' Function 0x124942588 'gdImageGreen' 'int ()'
    |       |   |-RecoveryExpr 0x124942660 <col:21> '<dependent type>' contains-errors lvalue
    |       |   `-DeclRefExpr 0x124942680 <col:26> 'int' lvalue Var 0x124928718 'pxl' 'int'
    |       |-BinaryOperator 0x124943290 <line:24:4, col:28> 'int' contains-errors '='
    |       | |-DeclRefExpr 0x1249426f0 <col:4> 'int' lvalue Var 0x124928558 'b' 'int'
    |       | `-CallExpr 0x124943260 <col:8, col:28> '<dependent type>' contains-errors
    |       |   |-DeclRefExpr 0x124943200 <col:8> 'int ()' Function 0x124942738 'gdImageBlue' 'int ()'
    |       |   |-RecoveryExpr 0x124943220 <col:20> '<dependent type>' contains-errors lvalue
    |       |   `-DeclRefExpr 0x124943240 <col:25> 'int' lvalue Var 0x124928718 'pxl' 'int'
    |       |-BinaryOperator 0x124943440 <line:25:4, col:29> 'int' contains-errors '='
    |       | |-DeclRefExpr 0x1249432b0 <col:4> 'int' lvalue Var 0x1249285d8 'a' 'int'
    |       | `-CallExpr 0x124943410 <col:8, col:29> '<dependent type>' contains-errors
    |       |   |-DeclRefExpr 0x1249433b0 <col:8> 'int ()' Function 0x1249432f8 'gdImageAlpha' 'int ()'
    |       |   |-RecoveryExpr 0x1249433d0 <col:21> '<dependent type>' contains-errors lvalue
    |       |   `-DeclRefExpr 0x1249433f0 <col:26> 'int' lvalue Var 0x124928718 'pxl' 'int'
    |       |-BinaryOperator 0x124943510 <line:27:4, col:12> 'int' '='
    |       | |-DeclRefExpr 0x124943460 <col:4> 'int' lvalue Var 0x124928458 'r' 'int'
    |       | `-BinaryOperator 0x1249434f0 <col:8, col:12> 'int' '+'
    |       |   |-ImplicitCastExpr 0x1249434c0 <col:8> 'int' <LValueToRValue>
    |       |   | `-DeclRefExpr 0x124943480 <col:8> 'int' lvalue Var 0x124928458 'r' 'int'
    |       |   `-ImplicitCastExpr 0x1249434d8 <col:12> 'int' <LValueToRValue>
    |       |     `-DeclRefExpr 0x1249434a0 <col:12> 'int' lvalue ParmVar 0x124928170 'brightness' 'int'
    |       |-BinaryOperator 0x1249435e0 <line:28:4, col:12> 'int' '='
    |       | |-DeclRefExpr 0x124943530 <col:4> 'int' lvalue Var 0x1249284d8 'g' 'int'
    |       | `-BinaryOperator 0x1249435c0 <col:8, col:12> 'int' '+'
    |       |   |-ImplicitCastExpr 0x124943590 <col:8> 'int' <LValueToRValue>
    |       |   | `-DeclRefExpr 0x124943550 <col:8> 'int' lvalue Var 0x1249284d8 'g' 'int'
    |       |   `-ImplicitCastExpr 0x1249435a8 <col:12> 'int' <LValueToRValue>
    |       |     `-DeclRefExpr 0x124943570 <col:12> 'int' lvalue ParmVar 0x124928170 'brightness' 'int'
    |       |-BinaryOperator 0x1249436b0 <line:29:4, col:12> 'int' '='
    |       | |-DeclRefExpr 0x124943600 <col:4> 'int' lvalue Var 0x124928558 'b' 'int'
    |       | `-BinaryOperator 0x124943690 <col:8, col:12> 'int' '+'
    |       |   |-ImplicitCastExpr 0x124943660 <col:8> 'int' <LValueToRValue>
    |       |   | `-DeclRefExpr 0x124943620 <col:8> 'int' lvalue Var 0x124928558 'b' 'int'
    |       |   `-ImplicitCastExpr 0x124943678 <col:12> 'int' <LValueToRValue>
    |       |     `-DeclRefExpr 0x124943640 <col:12> 'int' lvalue ParmVar 0x124928170 'brightness' 'int'
    |       |-BinaryOperator 0x124943918 <line:31:4, col:38> 'int' '='
    |       | |-DeclRefExpr 0x1249436d0 <col:4> 'int' lvalue Var 0x124928458 'r' 'int'
    |       | `-ConditionalOperator 0x1249438e8 <col:8, col:38> 'int'
    |       |   |-ParenExpr 0x124943768 <col:8, col:16> 'int'
    |       |   | `-BinaryOperator 0x124943748 <col:9, col:13> 'int' '>'
    |       |   |   |-ImplicitCastExpr 0x124943730 <col:9> 'int' <LValueToRValue>
    |       |   |   | `-DeclRefExpr 0x1249436f0 <col:9> 'int' lvalue Var 0x124928458 'r' 'int'
    |       |   |   `-IntegerLiteral 0x124943710 <col:13> 'int' 255
    |       |   |-IntegerLiteral 0x124943788 <col:19> 'int' 255
    |       |   `-ParenExpr 0x1249438c8 <col:25, col:38> 'int'
    |       |     `-ConditionalOperator 0x124943898 <col:26, col:37> 'int'
    |       |       |-ParenExpr 0x124943820 <col:26, col:32> 'int'
    |       |       | `-BinaryOperator 0x124943800 <col:27, col:31> 'int' '<'
    |       |       |   |-ImplicitCastExpr 0x1249437e8 <col:27> 'int' <LValueToRValue>
    |       |       |   | `-DeclRefExpr 0x1249437a8 <col:27> 'int' lvalue Var 0x124928458 'r' 'int'
    |       |       |   `-IntegerLiteral 0x1249437c8 <col:31> 'int' 0
    |       |       |-IntegerLiteral 0x124943840 <col:35> 'int' 0
    |       |       `-ImplicitCastExpr 0x124943880 <col:37> 'int' <LValueToRValue>
    |       |         `-DeclRefExpr 0x124943860 <col:37> 'int' lvalue Var 0x124928458 'r' 'int'
    |       |-BinaryOperator 0x124943b80 <line:32:4, col:38> 'int' '='
    |       | |-DeclRefExpr 0x124943938 <col:4> 'int' lvalue Var 0x1249284d8 'g' 'int'
    |       | `-ConditionalOperator 0x124943b50 <col:8, col:38> 'int'
    |       |   |-ParenExpr 0x1249439d0 <col:8, col:16> 'int'
    |       |   | `-BinaryOperator 0x1249439b0 <col:9, col:13> 'int' '>'
    |       |   |   |-ImplicitCastExpr 0x124943998 <col:9> 'int' <LValueToRValue>
    |       |   |   | `-DeclRefExpr 0x124943958 <col:9> 'int' lvalue Var 0x1249284d8 'g' 'int'
    |       |   |   `-IntegerLiteral 0x124943978 <col:13> 'int' 255
    |       |   |-IntegerLiteral 0x1249439f0 <col:19> 'int' 255
    |       |   `-ParenExpr 0x124943b30 <col:25, col:38> 'int'
    |       |     `-ConditionalOperator 0x124943b00 <col:26, col:37> 'int'
    |       |       |-ParenExpr 0x124943a88 <col:26, col:32> 'int'
    |       |       | `-BinaryOperator 0x124943a68 <col:27, col:31> 'int' '<'
    |       |       |   |-ImplicitCastExpr 0x124943a50 <col:27> 'int' <LValueToRValue>
    |       |       |   | `-DeclRefExpr 0x124943a10 <col:27> 'int' lvalue Var 0x1249284d8 'g' 'int'
    |       |       |   `-IntegerLiteral 0x124943a30 <col:31> 'int' 0
    |       |       |-IntegerLiteral 0x124943aa8 <col:35> 'int' 0
    |       |       `-ImplicitCastExpr 0x124943ae8 <col:37> 'int' <LValueToRValue>
    |       |         `-DeclRefExpr 0x124943ac8 <col:37> 'int' lvalue Var 0x1249284d8 'g' 'int'
    |       |-BinaryOperator 0x124943de8 <line:33:4, col:38> 'int' '='
    |       | |-DeclRefExpr 0x124943ba0 <col:4> 'int' lvalue Var 0x124928558 'b' 'int'
    |       | `-ConditionalOperator 0x124943db8 <col:8, col:38> 'int'
    |       |   |-ParenExpr 0x124943c38 <col:8, col:16> 'int'
    |       |   | `-BinaryOperator 0x124943c18 <col:9, col:13> 'int' '>'
    |       |   |   |-ImplicitCastExpr 0x124943c00 <col:9> 'int' <LValueToRValue>
    |       |   |   | `-DeclRefExpr 0x124943bc0 <col:9> 'int' lvalue Var 0x124928558 'b' 'int'
    |       |   |   `-IntegerLiteral 0x124943be0 <col:13> 'int' 255
    |       |   |-IntegerLiteral 0x124943c58 <col:19> 'int' 255
    |       |   `-ParenExpr 0x124943d98 <col:25, col:38> 'int'
    |       |     `-ConditionalOperator 0x124943d68 <col:26, col:37> 'int'
    |       |       |-ParenExpr 0x124943cf0 <col:26, col:32> 'int'
    |       |       | `-BinaryOperator 0x124943cd0 <col:27, col:31> 'int' '<'
    |       |       |   |-ImplicitCastExpr 0x124943cb8 <col:27> 'int' <LValueToRValue>
    |       |       |   | `-DeclRefExpr 0x124943c78 <col:27> 'int' lvalue Var 0x124928558 'b' 'int'
    |       |       |   `-IntegerLiteral 0x124943c98 <col:31> 'int' 0
    |       |       |-IntegerLiteral 0x124943d10 <col:35> 'int' 0
    |       |       `-ImplicitCastExpr 0x124943d50 <col:37> 'int' <LValueToRValue>
    |       |         `-DeclRefExpr 0x124943d30 <col:37> 'int' lvalue Var 0x124928558 'b' 'int'
    |       |-BinaryOperator 0x124944118 <line:35:4, col:70> 'int' contains-errors '='
    |       | |-DeclRefExpr 0x124943e08 <col:4> 'int' lvalue Var 0x124928698 'new_pxl' 'int'
    |       | `-CallExpr 0x1249440d0 <col:14, col:70> '<dependent type>' contains-errors
    |       |   |-DeclRefExpr 0x124943f08 <col:14> 'int ()' Function 0x124943e50 'gdImageColorAllocateAlpha' 'int ()'
    |       |   |-RecoveryExpr 0x124943f28 <col:40> '<dependent type>' contains-errors lvalue
    |       |   |-CStyleCastExpr 0x124943f98 <col:45, col:50> 'int' <NoOp>
    |       |   | `-ImplicitCastExpr 0x124943f80 <col:50> 'int' <LValueToRValue> part_of_explicit_cast
    |       |   |   `-DeclRefExpr 0x124943f48 <col:50> 'int' lvalue Var 0x124928458 'r' 'int'
    |       |   |-CStyleCastExpr 0x124944010 <col:53, col:58> 'int' <NoOp>
    |       |   | `-ImplicitCastExpr 0x124943ff8 <col:58> 'int' <LValueToRValue> part_of_explicit_cast
    |       |   |   `-DeclRefExpr 0x124943fc0 <col:58> 'int' lvalue Var 0x1249284d8 'g' 'int'
    |       |   |-CStyleCastExpr 0x124944088 <col:61, col:66> 'int' <NoOp>
    |       |   | `-ImplicitCastExpr 0x124944070 <col:66> 'int' <LValueToRValue> part_of_explicit_cast
    |       |   |   `-DeclRefExpr 0x124944038 <col:66> 'int' lvalue Var 0x124928558 'b' 'int'
    |       |   `-DeclRefExpr 0x1249440b0 <col:69> 'int' lvalue Var 0x1249285d8 'a' 'int'
    |       |-IfStmt 0x124945528 <line:36:4, line:38:4>
    |       | |-BinaryOperator 0x1249441a8 <line:36:8, col:20> 'int' '=='
    |       | | |-ImplicitCastExpr 0x124944190 <col:8> 'int' <LValueToRValue>
    |       | | | `-DeclRefExpr 0x124944138 <col:8> 'int' lvalue Var 0x124928698 'new_pxl' 'int'
    |       | | `-UnaryOperator 0x124944178 <col:19, col:20> 'int' prefix '-'
    |       | |   `-IntegerLiteral 0x124944158 <col:20> 'int' 1
    |       | `-CompoundStmt 0x124945510 <col:23, line:38:4>
    |       |   `-BinaryOperator 0x1249454f0 <line:37:5, col:70> 'int' contains-errors '='
    |       |     |-DeclRefExpr 0x1249441c8 <col:5> 'int' lvalue Var 0x124928698 'new_pxl' 'int'
    |       |     `-CallExpr 0x1249454a8 <col:15, col:70> '<dependent type>' contains-errors
    |       |       |-DeclRefExpr 0x1249452e0 <col:15> 'int ()' Function 0x124945228 'gdImageColorClosestAlpha' 'int ()'
    |       |       |-RecoveryExpr 0x124945300 <col:40> '<dependent type>' contains-errors lvalue
    |       |       |-CStyleCastExpr 0x124945370 <col:45, col:50> 'int' <NoOp>
    |       |       | `-ImplicitCastExpr 0x124945358 <col:50> 'int' <LValueToRValue> part_of_explicit_cast
    |       |       |   `-DeclRefExpr 0x124945320 <col:50> 'int' lvalue Var 0x124928458 'r' 'int'
    |       |       |-CStyleCastExpr 0x1249453e8 <col:53, col:58> 'int' <NoOp>
    |       |       | `-ImplicitCastExpr 0x1249453d0 <col:58> 'int' <LValueToRValue> part_of_explicit_cast
    |       |       |   `-DeclRefExpr 0x124945398 <col:58> 'int' lvalue Var 0x1249284d8 'g' 'int'
    |       |       |-CStyleCastExpr 0x124945460 <col:61, col:66> 'int' <NoOp>
    |       |       | `-ImplicitCastExpr 0x124945448 <col:66> 'int' <LValueToRValue> part_of_explicit_cast
    |       |       |   `-DeclRefExpr 0x124945410 <col:66> 'int' lvalue Var 0x124928558 'b' 'int'
    |       |       `-DeclRefExpr 0x124945488 <col:69> 'int' lvalue Var 0x1249285d8 'a' 'int'
    |       `-IfStmt 0x1249458a0 <line:39:4, line:41:4>
    |         |-BinaryOperator 0x1249456a8 <line:39:8, col:32> 'int' contains-errors '&&'
    |         | |-ParenExpr 0x1249455c0 <col:8, col:15> 'int'
    |         | | `-BinaryOperator 0x1249455a0 <col:9, col:14> 'int' '>='
    |         | |   |-ImplicitCastExpr 0x124945588 <col:9> 'int' <LValueToRValue>
    |         | |   | `-DeclRefExpr 0x124945548 <col:9> 'int' lvalue Var 0x1249283a8 'y' 'int'
    |         | |   `-IntegerLiteral 0x124945568 <col:14> 'int' 0
    |         | `-ParenExpr 0x124945688 <col:20, col:32> 'int' contains-errors
    |         |   `-BinaryOperator 0x124945668 <col:21, col:30> 'int' contains-errors '<'
    |         |     |-DeclRefExpr 0x1249455e0 <col:21> 'int' lvalue Var 0x1249283a8 'y' 'int'
    |         |     `-CXXDependentScopeMemberExpr 0x124945620 <col:25, col:30> '<dependent type>' contains-errors lvalue ->sy
    |         |       `-RecoveryExpr 0x124945600 <col:25> '<dependent type>' contains-errors lvalue
    |         `-CompoundStmt 0x124945888 <col:35, line:41:4>
    |           `-CallExpr 0x124945848 <line:40:5, col:40> '<dependent type>' contains-errors
    |             |-DeclRefExpr 0x1249457a8 <col:5> 'int ()' Function 0x1249456f0 'gdImageSetPixel' 'int ()'
    |             |-RecoveryExpr 0x1249457c8 <col:22> '<dependent type>' contains-errors lvalue
    |             |-DeclRefExpr 0x1249457e8 <col:27> 'int' lvalue Var 0x124928328 'x' 'int'
    |             |-DeclRefExpr 0x124945808 <col:30> 'int' lvalue Var 0x1249283a8 'y' 'int'
    |             `-DeclRefExpr 0x124945828 <col:33> 'int' lvalue Var 0x124928698 'new_pxl' 'int'
    `-ReturnStmt 0x1249459e8 <line:44:2, col:9>
      `-IntegerLiteral 0x1249459c8 <col:9> 'int' 1
