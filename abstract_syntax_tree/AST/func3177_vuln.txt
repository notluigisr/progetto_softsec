TranslationUnitDecl 0x155855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1558564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x155855bd0 '__int128'
|-TypedefDecl 0x155856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x155855bf0 'unsigned __int128'
|-TypedefDecl 0x15600be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x15600bc00 'struct __NSConstantString_tag'
|   `-Record 0x155856580 '__NSConstantString_tag'
|-TypedefDecl 0x15600be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x155855d90 '__SVInt8_t'
|-TypedefDecl 0x15600bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x155855db0 '__SVInt16_t'
|-TypedefDecl 0x15600bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x155855dd0 '__SVInt32_t'
|-TypedefDecl 0x15600bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x155855df0 '__SVInt64_t'
|-TypedefDecl 0x15600c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x155855e10 '__SVUint8_t'
|-TypedefDecl 0x15600c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x155855e30 '__SVUint16_t'
|-TypedefDecl 0x15600c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x155855e50 '__SVUint32_t'
|-TypedefDecl 0x15600c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x155855e70 '__SVUint64_t'
|-TypedefDecl 0x15600c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x155855e90 '__SVFloat16_t'
|-TypedefDecl 0x15600c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x155855eb0 '__SVFloat32_t'
|-TypedefDecl 0x15600c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x155855ed0 '__SVFloat64_t'
|-TypedefDecl 0x15600c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x155855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x15600c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x155855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x15600c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x155855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x15600c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x155855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x15600c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x155855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x15600c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x155855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x15600c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x155855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x15600c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x155855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x15600c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x155855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x15600c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x155856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x15600c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x155856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x15600c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x155856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x15600c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x155856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x15600c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x155856090 '__clang_svint8x3_t'
|-TypedefDecl 0x15600c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1558560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x15600c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1558560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x15600c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1558560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x15600c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x155856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x15600ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x155856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x15600cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x155856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x15600cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x155856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x15600cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x155856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x15600d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1558561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x15600d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1558561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x15600d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1558561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x15600d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x155856210 '__clang_svint8x4_t'
|-TypedefDecl 0x15600d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x155856230 '__clang_svint16x4_t'
|-TypedefDecl 0x15600d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x155856250 '__clang_svint32x4_t'
|-TypedefDecl 0x15600d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x155856270 '__clang_svint64x4_t'
|-TypedefDecl 0x15600d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x155856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x15600d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1558562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x15600d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1558562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x15600d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1558562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x15600d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x155856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x15600d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x155856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x15600d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x155856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x15600d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x155856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x15600da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x155856390 '__SVBool_t'
|-TypedefDecl 0x15600da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1558563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x15600dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1558563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x15600db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1558563f0 '__SVCount_t'
|-TypedefDecl 0x15600dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x15600dbb0 'char *'
|   `-BuiltinType 0x1558556b0 'char'
|-TypedefDecl 0x15600dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x15600dbb0 'char *'
|   `-BuiltinType 0x1558556b0 'char'
|-FunctionDecl 0x15600de88 <dataset_diviso_filec/func3177_vuln.c:1:1, line:36:1> line:1:1 invalid tile_make_weights 'int (int *, double)'
| |-ParmVarDecl 0x15600dd28 <col:20, col:43> col:43 referenced invalid dim 'int *'
| |-ParmVarDecl 0x15600dda8 <line:2:6, col:29> col:29 used scale 'double'
| `-CompoundStmt 0x15602bf70 <line:3:1, line:36:1>
|   |-DeclStmt 0x156027788 <line:4:3, col:31>
|   | `-VarDecl 0x15600df58 <col:3, col:30> col:7 used n 'int' cinit
|   |   `-ImplicitCastExpr 0x156027770 <col:11, col:30> 'int' <FloatingToIntegral>
|   |     `-CallExpr 0x156027748 <col:11, col:30> 'double'
|   |       |-ImplicitCastExpr 0x156027730 <col:11> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x1560275f0 <col:11> 'double (double)' Function 0x156027430 'ceil' 'double (double)'
|   |       `-BinaryOperator 0x1560276d8 <col:17, col:29> 'double' '+'
|   |         |-BinaryOperator 0x156027680 <col:17, col:21> 'double' '/'
|   |         | |-ImplicitCastExpr 0x156027668 <col:17> 'double' <IntegralToFloating>
|   |         | | `-IntegerLiteral 0x156027610 <col:17> 'int' 1
|   |         | `-ImplicitCastExpr 0x156027650 <col:21> 'double' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x156027630 <col:21> 'double' lvalue ParmVar 0x15600dda8 'scale' 'double'
|   |         `-ImplicitCastExpr 0x1560276c0 <col:29> 'double' <IntegralToFloating>
|   |           `-IntegerLiteral 0x1560276a0 <col:29> 'int' 1
|   |-DeclStmt 0x156027a28 <line:5:3, col:56>
|   | `-VarDecl 0x1560277e8 <col:3, col:11> col:11 used pixel_weights 'double *'
|   |-DeclStmt 0x156027ac0 <line:6:3, col:13>
|   | `-VarDecl 0x156027a58 <col:3, col:7> col:7 used offset 'int'
|   |-DeclStmt 0x156027b58 <line:7:3, col:8>
|   | `-VarDecl 0x156027af0 <col:3, col:7> col:7 used i 'int'
|   |-BinaryOperator 0x156027c20 <line:9:3, col:12> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x156027bb8 <col:3, col:8> '<dependent type>' contains-errors lvalue ->n
|   | | `-RecoveryExpr 0x156027b90 <col:3> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x156027b70 <col:3> 'int *' lvalue ParmVar 0x15600dd28 'dim' 'int *'
|   | `-DeclRefExpr 0x156027c00 <col:12> 'int' lvalue Var 0x15600df58 'n' 'int'
|   |-BinaryOperator 0x156027cf0 <line:10:3, col:17> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x156027c88 <col:3, col:8> '<dependent type>' contains-errors lvalue ->offset
|   | | `-RecoveryExpr 0x156027c60 <col:3> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x156027c40 <col:3> 'int *' lvalue ParmVar 0x15600dd28 'dim' 'int *'
|   | `-IntegerLiteral 0x156027cd0 <col:17> 'int' 0
|   |-BinaryOperator 0x156027dc0 <line:11:3, col:18> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x156027d58 <col:3, col:8> '<dependent type>' contains-errors lvalue ->weights
|   | | `-RecoveryExpr 0x156027d30 <col:3> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x156027d10 <col:3> 'int *' lvalue ParmVar 0x15600dd28 'dim' 'int *'
|   | `-DeclRefExpr 0x156027da0 <col:18> 'double *' lvalue Var 0x1560277e8 'pixel_weights' 'double *'
|   `-ForStmt 0x15602bf38 <line:13:3, line:35:5>
|     |-BinaryOperator 0x156027e20 <line:13:8, col:17> 'int' '='
|     | |-DeclRefExpr 0x156027de0 <col:8> 'int' lvalue Var 0x156027a58 'offset' 'int'
|     | `-IntegerLiteral 0x156027e00 <col:17> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x156027eb8 <col:20, col:29> 'int' contains-errors '<'
|     | |-DeclRefExpr 0x156027e40 <col:20> 'int' lvalue Var 0x156027a58 'offset' 'int'
|     | `-RecoveryExpr 0x156027e98 <col:29> '<dependent type>' contains-errors lvalue
|     |-UnaryOperator 0x156027ef8 <col:40, col:46> 'int' postfix '++'
|     | `-DeclRefExpr 0x156027ed8 <col:40> 'int' lvalue Var 0x156027a58 'offset' 'int'
|     `-CompoundStmt 0x15602bf10 <line:14:5, line:35:5>
|       |-DeclStmt 0x156028130 <line:15:7, col:44>
|       | `-VarDecl 0x156027f28 <col:7, col:35> col:14 used x 'double' cinit
|       |   `-BinaryOperator 0x156028110 <col:18, col:35> '<dependent type>' contains-errors '/'
|       |     |-CStyleCastExpr 0x1560280c8 <col:18, col:26> 'double' <IntegralToFloating>
|       |     | `-ImplicitCastExpr 0x1560280b0 <col:26> 'int' <LValueToRValue> part_of_explicit_cast
|       |     |   `-DeclRefExpr 0x156027f90 <col:26> 'int' lvalue Var 0x156027a58 'offset' 'int'
|       |     `-RecoveryExpr 0x1560280f0 <col:35> '<dependent type>' contains-errors lvalue
|       |-DeclStmt 0x1560282b0 <line:16:7, col:31>
|       | `-VarDecl 0x156028160 <col:7, col:26> col:14 used a 'double' cinit
|       |   `-BinaryOperator 0x156028290 <col:18, col:26> 'double' contains-errors '+'
|       |     |-ImplicitCastExpr 0x156028278 <col:18> 'double' contains-errors <LValueToRValue>
|       |     | `-DeclRefExpr 0x1560281c8 <col:18> 'double' contains-errors lvalue Var 0x156027f28 'x' 'double'
|       |     `-BinaryOperator 0x156028258 <col:22, col:26> 'double' '/'
|       |       |-ImplicitCastExpr 0x156028240 <col:22> 'double' <IntegralToFloating>
|       |       | `-IntegerLiteral 0x1560281e8 <col:22> 'int' 1
|       |       `-ImplicitCastExpr 0x156028228 <col:26> 'double' <LValueToRValue>
|       |         `-DeclRefExpr 0x156028208 <col:26> 'double' lvalue ParmVar 0x15600dda8 'scale' 'double'
|       `-ForStmt 0x15602bed8 <line:18:7, line:34:8>
|         |-BinaryOperator 0x156028308 <line:18:12, col:16> 'int' '='
|         | |-DeclRefExpr 0x1560282c8 <col:12> 'int' lvalue Var 0x156027af0 'i' 'int'
|         | `-IntegerLiteral 0x1560282e8 <col:16> 'int' 0
|         |-<<<NULL>>>
|         |-BinaryOperator 0x156028398 <col:19, col:23> 'int' '<'
|         | |-ImplicitCastExpr 0x156028368 <col:19> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x156028328 <col:19> 'int' lvalue Var 0x156027af0 'i' 'int'
|         | `-ImplicitCastExpr 0x156028380 <col:23> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x156028348 <col:23> 'int' lvalue Var 0x15600df58 'n' 'int'
|         |-UnaryOperator 0x1560283d8 <col:26, col:27> 'int' postfix '++'
|         | `-DeclRefExpr 0x1560283b8 <col:26> 'int' lvalue Var 0x156027af0 'i' 'int'
|         `-CompoundStmt 0x15602bec0 <line:19:9, line:34:8>
|           `-IfStmt 0x15602be90 <line:20:11, line:33:13> has_else
|             |-BinaryOperator 0x15602b488 <line:20:15, col:19> 'int' contains-errors '<'
|             | |-ImplicitCastExpr 0x15602b470 <col:15> 'double' <IntegralToFloating>
|             | | `-ImplicitCastExpr 0x15602b440 <col:15> 'int' <LValueToRValue>
|             | |   `-DeclRefExpr 0x15602b400 <col:15> 'int' lvalue Var 0x156027af0 'i' 'int'
|             | `-ImplicitCastExpr 0x15602b458 <col:19> 'double' contains-errors <LValueToRValue>
|             |   `-DeclRefExpr 0x15602b420 <col:19> 'double' contains-errors lvalue Var 0x156027f28 'x' 'double'
|             |-CompoundStmt 0x15602ba30 <line:21:13, line:26:13>
|             | `-IfStmt 0x15602ba00 <line:22:15, line:25:38> has_else
|             |   |-BinaryOperator 0x15602b570 <line:22:19, col:27> 'int' contains-errors '>'
|             |   | |-ImplicitCastExpr 0x15602b558 <col:19, col:23> 'double' <IntegralToFloating>
|             |   | | `-BinaryOperator 0x15602b500 <col:19, col:23> 'int' '+'
|             |   | |   |-ImplicitCastExpr 0x15602b4e8 <col:19> 'int' <LValueToRValue>
|             |   | |   | `-DeclRefExpr 0x15602b4a8 <col:19> 'int' lvalue Var 0x156027af0 'i' 'int'
|             |   | |   `-IntegerLiteral 0x15602b4c8 <col:23> 'int' 1
|             |   | `-ImplicitCastExpr 0x15602b540 <col:27> 'double' contains-errors <LValueToRValue>
|             |   |   `-DeclRefExpr 0x15602b520 <col:27> 'double' contains-errors lvalue Var 0x156027f28 'x' 'double'
|             |   |-BinaryOperator 0x15602b918 <line:23:17, col:62> 'double' contains-errors '='
|             |   | |-UnaryOperator 0x15602b5e8 <col:17, col:34> 'double' lvalue prefix '*' cannot overflow
|             |   | | `-ParenExpr 0x15602b5c8 <col:18, col:34> 'double *'
|             |   | |   `-UnaryOperator 0x15602b5b0 <col:19, col:32> 'double *' postfix '++'
|             |   | |     `-DeclRefExpr 0x15602b590 <col:19> 'double *' lvalue Var 0x1560277e8 'pixel_weights' 'double *'
|             |   | `-BinaryOperator 0x15602b8f8 <col:39, col:62> 'double' contains-errors '*'
|             |   |   |-ParenExpr 0x15602b8a0 <col:39, col:58> 'double' contains-errors
|             |   |   | `-BinaryOperator 0x15602b880 <col:40, col:57> 'double' contains-errors '-'
|             |   |   |   |-ImplicitCastExpr 0x15602b868 <col:40, col:53> 'double' contains-errors <IntegralToFloating>
|             |   |   |   | `-CallExpr 0x15602b7e8 <col:40, col:53> 'int' contains-errors
|             |   |   |   |   |-ImplicitCastExpr 0x15602b7d0 <col:40> 'int (*)()' <FunctionToPointerDecay>
|             |   |   |   |   | `-DeclRefExpr 0x15602b6e0 <col:40> 'int ()' Function 0x15602b628 'MIN' 'int ()'
|             |   |   |   |   |-BinaryOperator 0x15602b758 <col:45, col:49> 'int' '+'
|             |   |   |   |   | |-ImplicitCastExpr 0x15602b740 <col:45> 'int' <LValueToRValue>
|             |   |   |   |   | | `-DeclRefExpr 0x15602b700 <col:45> 'int' lvalue Var 0x156027af0 'i' 'int'
|             |   |   |   |   | `-IntegerLiteral 0x15602b720 <col:49> 'int' 1
|             |   |   |   |   `-ImplicitCastExpr 0x15602b818 <col:52> 'double' contains-errors <LValueToRValue>
|             |   |   |   |     `-DeclRefExpr 0x15602b778 <col:52> 'double' contains-errors lvalue Var 0x156028160 'a' 'double'
|             |   |   |   `-ImplicitCastExpr 0x15602b850 <col:57> 'double' contains-errors <LValueToRValue>
|             |   |   |     `-DeclRefExpr 0x15602b830 <col:57> 'double' contains-errors lvalue Var 0x156027f28 'x' 'double'
|             |   |   `-ImplicitCastExpr 0x15602b8e0 <col:62> 'double' <LValueToRValue>
|             |   |     `-DeclRefExpr 0x15602b8c0 <col:62> 'double' lvalue ParmVar 0x15600dda8 'scale' 'double'
|             |   `-BinaryOperator 0x15602b9e0 <line:25:17, col:38> 'double' '='
|             |     |-UnaryOperator 0x15602b990 <col:17, col:34> 'double' lvalue prefix '*' cannot overflow
|             |     | `-ParenExpr 0x15602b970 <col:18, col:34> 'double *'
|             |     |   `-UnaryOperator 0x15602b958 <col:19, col:32> 'double *' postfix '++'
|             |     |     `-DeclRefExpr 0x15602b938 <col:19> 'double *' lvalue Var 0x1560277e8 'pixel_weights' 'double *'
|             |     `-ImplicitCastExpr 0x15602b9c8 <col:38> 'double' <IntegralToFloating>
|             |       `-IntegerLiteral 0x15602b9a8 <col:38> 'int' 0
|             `-CompoundStmt 0x15602be78 <line:28:13, line:33:13>
|               `-IfStmt 0x15602be48 <line:29:15, line:32:38> has_else
|                 |-BinaryOperator 0x15602bad0 <line:29:19, col:23> 'int' contains-errors '>'
|                 | |-ImplicitCastExpr 0x15602ba88 <col:19> 'double' contains-errors <LValueToRValue>
|                 | | `-DeclRefExpr 0x15602ba48 <col:19> 'double' contains-errors lvalue Var 0x156028160 'a' 'double'
|                 | `-ImplicitCastExpr 0x15602bab8 <col:23> 'double' <IntegralToFloating>
|                 |   `-ImplicitCastExpr 0x15602baa0 <col:23> 'int' <LValueToRValue>
|                 |     `-DeclRefExpr 0x15602ba68 <col:23> 'int' lvalue Var 0x156027af0 'i' 'int'
|                 |-BinaryOperator 0x15602bd60 <line:30:17, col:62> 'double' contains-errors '='
|                 | |-UnaryOperator 0x15602bb48 <col:17, col:34> 'double' lvalue prefix '*' cannot overflow
|                 | | `-ParenExpr 0x15602bb28 <col:18, col:34> 'double *'
|                 | |   `-UnaryOperator 0x15602bb10 <col:19, col:32> 'double *' postfix '++'
|                 | |     `-DeclRefExpr 0x15602baf0 <col:19> 'double *' lvalue Var 0x1560277e8 'pixel_weights' 'double *'
|                 | `-BinaryOperator 0x15602bd40 <col:39, col:62> 'double' contains-errors '*'
|                 |   |-ImplicitCastExpr 0x15602bd28 <col:39, col:58> 'double' contains-errors <IntegralToFloating>
|                 |   | `-ParenExpr 0x15602bcd0 <col:39, col:58> 'int' contains-errors
|                 |   |   `-BinaryOperator 0x15602bcb0 <col:40, col:57> 'int' contains-errors '-'
|                 |   |     |-CallExpr 0x15602bc30 <col:40, col:53> 'int' contains-errors
|                 |   |     | |-ImplicitCastExpr 0x15602bc18 <col:40> 'int (*)()' <FunctionToPointerDecay>
|                 |   |     | | `-DeclRefExpr 0x15602bb60 <col:40> 'int ()' Function 0x15602b628 'MIN' 'int ()'
|                 |   |     | |-BinaryOperator 0x15602bbd8 <col:45, col:49> 'int' '+'
|                 |   |     | | |-ImplicitCastExpr 0x15602bbc0 <col:45> 'int' <LValueToRValue>
|                 |   |     | | | `-DeclRefExpr 0x15602bb80 <col:45> 'int' lvalue Var 0x156027af0 'i' 'int'
|                 |   |     | | `-IntegerLiteral 0x15602bba0 <col:49> 'int' 1
|                 |   |     | `-ImplicitCastExpr 0x15602bc60 <col:52> 'double' contains-errors <LValueToRValue>
|                 |   |     |   `-DeclRefExpr 0x15602bbf8 <col:52> 'double' contains-errors lvalue Var 0x156028160 'a' 'double'
|                 |   |     `-ImplicitCastExpr 0x15602bc98 <col:57> 'int' <LValueToRValue>
|                 |   |       `-DeclRefExpr 0x15602bc78 <col:57> 'int' lvalue Var 0x156027af0 'i' 'int'
|                 |   `-ImplicitCastExpr 0x15602bd10 <col:62> 'double' <LValueToRValue>
|                 |     `-DeclRefExpr 0x15602bcf0 <col:62> 'double' lvalue ParmVar 0x15600dda8 'scale' 'double'
|                 `-BinaryOperator 0x15602be28 <line:32:17, col:38> 'double' '='
|                   |-UnaryOperator 0x15602bdd8 <col:17, col:34> 'double' lvalue prefix '*' cannot overflow
|                   | `-ParenExpr 0x15602bdb8 <col:18, col:34> 'double *'
|                   |   `-UnaryOperator 0x15602bda0 <col:19, col:32> 'double *' postfix '++'
|                   |     `-DeclRefExpr 0x15602bd80 <col:19> 'double *' lvalue Var 0x1560277e8 'pixel_weights' 'double *'
|                   `-ImplicitCastExpr 0x15602be10 <col:38> 'double' <IntegralToFloating>
|                     `-IntegerLiteral 0x15602bdf0 <col:38> 'int' 0
`-FunctionDecl 0x156027430 <line:4:11> col:11 implicit used ceil 'double (double)' extern
  |-ParmVarDecl 0x156027530 <<invalid sloc>> <invalid sloc> 'double'
  |-BuiltinAttr 0x1560274d8 <<invalid sloc>> Implicit 1052
  |-NoThrowAttr 0x1560275a0 <col:11> Implicit
  `-ConstAttr 0x1560275c8 <col:11> Implicit
