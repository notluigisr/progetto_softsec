TranslationUnitDecl 0x11f055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x11f0564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x11f055bd0 '__int128'
|-TypedefDecl 0x11f056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x11f055bf0 'unsigned __int128'
|-TypedefDecl 0x12880be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12880bc00 'struct __NSConstantString_tag'
|   `-Record 0x11f056580 '__NSConstantString_tag'
|-TypedefDecl 0x12880be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x11f055d90 '__SVInt8_t'
|-TypedefDecl 0x12880bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x11f055db0 '__SVInt16_t'
|-TypedefDecl 0x12880bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x11f055dd0 '__SVInt32_t'
|-TypedefDecl 0x12880bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x11f055df0 '__SVInt64_t'
|-TypedefDecl 0x12880c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x11f055e10 '__SVUint8_t'
|-TypedefDecl 0x12880c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x11f055e30 '__SVUint16_t'
|-TypedefDecl 0x12880c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x11f055e50 '__SVUint32_t'
|-TypedefDecl 0x12880c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x11f055e70 '__SVUint64_t'
|-TypedefDecl 0x12880c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x11f055e90 '__SVFloat16_t'
|-TypedefDecl 0x12880c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x11f055eb0 '__SVFloat32_t'
|-TypedefDecl 0x12880c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x11f055ed0 '__SVFloat64_t'
|-TypedefDecl 0x12880c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x11f055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12880c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x11f055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12880c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x11f055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12880c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x11f055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12880c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x11f055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12880c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x11f055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12880c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x11f055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12880c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x11f055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12880c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x11f055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12880c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x11f056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12880c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x11f056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12880c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x11f056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12880c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x11f056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12880c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x11f056090 '__clang_svint8x3_t'
|-TypedefDecl 0x12880c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x11f0560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12880c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x11f0560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12880c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x11f0560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12880c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x11f056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12880ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x11f056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12880cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x11f056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12880cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x11f056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12880cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x11f056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12880d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x11f0561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12880d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x11f0561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12880d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x11f0561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12880d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x11f056210 '__clang_svint8x4_t'
|-TypedefDecl 0x12880d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x11f056230 '__clang_svint16x4_t'
|-TypedefDecl 0x12880d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x11f056250 '__clang_svint32x4_t'
|-TypedefDecl 0x12880d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x11f056270 '__clang_svint64x4_t'
|-TypedefDecl 0x12880d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x11f056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12880d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x11f0562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12880d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x11f0562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12880d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x11f0562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12880d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x11f056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12880d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x11f056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12880d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x11f056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12880d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x11f056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12880da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x11f056390 '__SVBool_t'
|-TypedefDecl 0x12880da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x11f0563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12880dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x11f0563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12880db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x11f0563f0 '__SVCount_t'
|-TypedefDecl 0x12880dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12880dbb0 'char *'
|   `-BuiltinType 0x11f0556b0 'char'
|-TypedefDecl 0x12880dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12880dbb0 'char *'
|   `-BuiltinType 0x11f0556b0 'char'
|-FunctionDecl 0x1288266d8 <dataset_diviso_filec/func14443_vuln.c:1:1, line:68:1> line:1:12 rose_parse_national 'int (unsigned char *, struct rose_facilities_struct *, int)' static
| |-ParmVarDecl 0x12880dd08 <col:32, col:47> col:47 used p 'unsigned char *'
| |-ParmVarDecl 0x12880e2f8 <col:50, col:81> col:81 used facilities 'struct rose_facilities_struct *'
| |-ParmVarDecl 0x12880e378 <col:93, col:97> col:97 used len 'int'
| `-CompoundStmt 0x11f096000 <line:2:1, line:68:1>
|   |-DeclStmt 0x128826860 <line:3:2, col:19>
|   | `-VarDecl 0x1288267f8 <col:2, col:17> col:17 used pt 'unsigned char *'
|   |-DeclStmt 0x128826a50 <line:4:2, col:28>
|   | |-VarDecl 0x128826890 <col:2, col:16> col:16 used l 'unsigned char'
|   | |-VarDecl 0x128826910 <col:2, col:19> col:19 used lg 'unsigned char'
|   | `-VarDecl 0x128826990 <col:2, col:27> col:23 used n 'unsigned char' cinit
|   |   `-ImplicitCastExpr 0x128826a18 <col:27> 'unsigned char' <IntegralCast>
|   |     `-IntegerLiteral 0x1288269f8 <col:27> 'int' 0
|   |-DeclStmt 0x128826b08 <line:5:2, col:37>
|   | `-VarDecl 0x128826a80 <col:2, col:36> col:6 used fac_national_digis_received 'int' cinit
|   |   `-IntegerLiteral 0x128826ae8 <col:36> 'int' 0
|   |-DoStmt 0x11f095f80 <line:7:2, line:65:32>
|   | |-CompoundStmt 0x11f095e10 <line:7:5, line:65:2>
|   | | `-SwitchStmt 0x128826be0 <line:8:3, line:64:3>
|   | |   |-BinaryOperator 0x128826bc0 <line:8:11, col:16> 'int' '&'
|   | |   | |-ImplicitCastExpr 0x128826ba8 <col:11, col:12> 'int' <IntegralCast>
|   | |   | | `-ImplicitCastExpr 0x128826b90 <col:11, col:12> 'unsigned char' <LValueToRValue>
|   | |   | |   `-UnaryOperator 0x128826b58 <col:11, col:12> 'unsigned char' lvalue prefix '*' cannot overflow
|   | |   | |     `-ImplicitCastExpr 0x128826b40 <col:12> 'unsigned char *' <LValueToRValue>
|   | |   | |       `-DeclRefExpr 0x128826b20 <col:12> 'unsigned char *' lvalue ParmVar 0x12880dd08 'p' 'unsigned char *'
|   | |   | `-IntegerLiteral 0x128826b70 <col:16> 'int' 192
|   | |   `-CompoundStmt 0x11f095d68 <col:22, line:64:3>
|   | |     |-CaseStmt 0x128826c40 <line:9:3, line:10:11>
|   | |     | |-ConstantExpr 0x128826c28 <line:9:8> 'int'
|   | |     | | `-IntegerLiteral 0x128826c08 <col:8> 'int' 0
|   | |     | `-CompoundAssignOperator 0x128826ca8 <line:10:4, col:11> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|   | |     |   |-DeclRefExpr 0x128826c68 <col:4> 'unsigned char *' lvalue ParmVar 0x12880dd08 'p' 'unsigned char *'
|   | |     |   `-IntegerLiteral 0x128826c88 <col:11> 'int' 2
|   | |     |-CompoundAssignOperator 0x128826d18 <line:11:4, col:11> 'unsigned char' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |     | |-DeclRefExpr 0x128826cd8 <col:4> 'unsigned char' lvalue Var 0x128826990 'n' 'unsigned char'
|   | |     | `-IntegerLiteral 0x128826cf8 <col:11> 'int' 2
|   | |     |-CompoundAssignOperator 0x128826d88 <line:12:4, col:11> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |     | |-DeclRefExpr 0x128826d48 <col:4> 'int' lvalue ParmVar 0x12880e378 'len' 'int'
|   | |     | `-IntegerLiteral 0x128826d68 <col:11> 'int' 2
|   | |     |-BreakStmt 0x128826db8 <line:13:4>
|   | |     |-CaseStmt 0x128826df8 <line:15:3, line:17:70>
|   | |     | |-ConstantExpr 0x128826de0 <line:15:8> 'int'
|   | |     | | `-IntegerLiteral 0x128826dc0 <col:8> 'int' 64
|   | |     | `-IfStmt 0x1288272d0 <line:16:4, line:17:70>
|   | |     |   |-BinaryOperator 0x128826f40 <line:16:8, col:14> 'int' contains-errors '=='
|   | |     |   | |-UnaryOperator 0x128826f08 <col:8, col:9> 'unsigned char' lvalue prefix '*' cannot overflow
|   | |     |   | | `-ImplicitCastExpr 0x128826ef0 <col:9> 'unsigned char *' <LValueToRValue>
|   | |     |   | |   `-DeclRefExpr 0x128826e20 <col:9> 'unsigned char *' lvalue ParmVar 0x12880dd08 'p' 'unsigned char *'
|   | |     |   | `-RecoveryExpr 0x128826f20 <col:14> '<dependent type>' contains-errors lvalue
|   | |     |   `-BinaryOperator 0x1288272b0 <line:17:5, col:70> '<dependent type>' contains-errors '='
|   | |     |     |-RecoveryExpr 0x128826f98 <col:5, col:17> '<dependent type>' contains-errors lvalue
|   | |     |     | `-DeclRefExpr 0x128826f60 <col:5> 'struct rose_facilities_struct *' lvalue ParmVar 0x12880e2f8 'facilities' 'struct rose_facilities_struct *'
|   | |     |     `-BinaryOperator 0x128827290 <col:24, col:70> 'int' '+'
|   | |     |       |-ParenExpr 0x128827108 <col:24, col:45> 'int'
|   | |     |       | `-BinaryOperator 0x1288270e8 <col:25, col:39> 'int' '&'
|   | |     |       |   |-ParenExpr 0x1288270a8 <col:25, col:35> 'int'
|   | |     |       |   | `-BinaryOperator 0x128827088 <col:26, col:34> 'int' '<<'
|   | |     |       |   |   |-ImplicitCastExpr 0x128827070 <col:26, col:29> 'int' <IntegralCast>
|   | |     |       |   |   | `-ImplicitCastExpr 0x128827058 <col:26, col:29> 'unsigned char' <LValueToRValue>
|   | |     |       |   |   |   `-ArraySubscriptExpr 0x128827018 <col:26, col:29> 'unsigned char' lvalue
|   | |     |       |   |   |     |-ImplicitCastExpr 0x128827000 <col:26> 'unsigned char *' <LValueToRValue>
|   | |     |       |   |   |     | `-DeclRefExpr 0x128826fc0 <col:26> 'unsigned char *' lvalue ParmVar 0x12880dd08 'p' 'unsigned char *'
|   | |     |       |   |   |     `-IntegerLiteral 0x128826fe0 <col:28> 'int' 1
|   | |     |       |   |   `-IntegerLiteral 0x128827038 <col:34> 'int' 8
|   | |     |       |   `-IntegerLiteral 0x1288270c8 <col:39> 'int' 65280
|   | |     |       `-ParenExpr 0x128827270 <col:49, col:70> 'int'
|   | |     |         `-BinaryOperator 0x128827250 <col:50, col:64> 'int' '&'
|   | |     |           |-ParenExpr 0x128827210 <col:50, col:60> 'int'
|   | |     |           | `-BinaryOperator 0x1288271f0 <col:51, col:59> 'int' '<<'
|   | |     |           |   |-ImplicitCastExpr 0x1288271d8 <col:51, col:54> 'int' <IntegralCast>
|   | |     |           |   | `-ImplicitCastExpr 0x1288271c0 <col:51, col:54> 'unsigned char' <LValueToRValue>
|   | |     |           |   |   `-ArraySubscriptExpr 0x128827180 <col:51, col:54> 'unsigned char' lvalue
|   | |     |           |   |     |-ImplicitCastExpr 0x128827168 <col:51> 'unsigned char *' <LValueToRValue>
|   | |     |           |   |     | `-DeclRefExpr 0x128827128 <col:51> 'unsigned char *' lvalue ParmVar 0x12880dd08 'p' 'unsigned char *'
|   | |     |           |   |     `-IntegerLiteral 0x128827148 <col:53> 'int' 2
|   | |     |           |   `-IntegerLiteral 0x1288271a0 <col:59> 'int' 0
|   | |     |           `-IntegerLiteral 0x128827230 <col:64> 'int' 255
|   | |     |-CompoundAssignOperator 0x128827330 <line:18:4, col:11> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|   | |     | |-DeclRefExpr 0x1288272f0 <col:4> 'unsigned char *' lvalue ParmVar 0x12880dd08 'p' 'unsigned char *'
|   | |     | `-IntegerLiteral 0x128827310 <col:11> 'int' 3
|   | |     |-CompoundAssignOperator 0x1288273a0 <line:19:4, col:11> 'unsigned char' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |     | |-DeclRefExpr 0x128827360 <col:4> 'unsigned char' lvalue Var 0x128826990 'n' 'unsigned char'
|   | |     | `-IntegerLiteral 0x128827380 <col:11> 'int' 3
|   | |     |-CompoundAssignOperator 0x128827410 <line:20:4, col:11> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |     | |-DeclRefExpr 0x1288273d0 <col:4> 'int' lvalue ParmVar 0x12880e378 'len' 'int'
|   | |     | `-IntegerLiteral 0x1288273f0 <col:11> 'int' 3
|   | |     |-BreakStmt 0x128827440 <line:21:4>
|   | |     |-CaseStmt 0x128827480 <line:23:3, line:24:11>
|   | |     | |-ConstantExpr 0x128827468 <line:23:8> 'int'
|   | |     | | `-IntegerLiteral 0x128827448 <col:8> 'int' 128
|   | |     | `-CompoundAssignOperator 0x1288274e8 <line:24:4, col:11> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|   | |     |   |-DeclRefExpr 0x1288274a8 <col:4> 'unsigned char *' lvalue ParmVar 0x12880dd08 'p' 'unsigned char *'
|   | |     |   `-IntegerLiteral 0x1288274c8 <col:11> 'int' 4
|   | |     |-CompoundAssignOperator 0x128827558 <line:25:4, col:11> 'unsigned char' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |     | |-DeclRefExpr 0x128827518 <col:4> 'unsigned char' lvalue Var 0x128826990 'n' 'unsigned char'
|   | |     | `-IntegerLiteral 0x128827538 <col:11> 'int' 4
|   | |     |-CompoundAssignOperator 0x1288275c8 <line:26:4, col:11> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |     | |-DeclRefExpr 0x128827588 <col:4> 'int' lvalue ParmVar 0x12880e378 'len' 'int'
|   | |     | `-IntegerLiteral 0x1288275a8 <col:11> 'int' 4
|   | |     |-BreakStmt 0x1288275f8 <line:27:4>
|   | |     |-CaseStmt 0x11f041a38 <line:29:3, line:30:11>
|   | |     | |-ConstantExpr 0x11f041a20 <line:29:8> 'int'
|   | |     | | `-IntegerLiteral 0x11f041a00 <col:8> 'int' 192
|   | |     | `-BinaryOperator 0x11f041b10 <line:30:4, col:11> 'unsigned char' '='
|   | |     |   |-DeclRefExpr 0x11f041a60 <col:4> 'unsigned char' lvalue Var 0x128826890 'l' 'unsigned char'
|   | |     |   `-ImplicitCastExpr 0x11f041af8 <col:8, col:11> 'unsigned char' <LValueToRValue>
|   | |     |     `-ArraySubscriptExpr 0x11f041ad8 <col:8, col:11> 'unsigned char' lvalue
|   | |     |       |-ImplicitCastExpr 0x11f041ac0 <col:8> 'unsigned char *' <LValueToRValue>
|   | |     |       | `-DeclRefExpr 0x11f041a80 <col:8> 'unsigned char *' lvalue ParmVar 0x12880dd08 'p' 'unsigned char *'
|   | |     |       `-IntegerLiteral 0x11f041aa0 <col:10> 'int' 1
|   | |     |-IfStmt 0x11f095a90 <line:31:4, line:59:4> has_else
|   | |     | |-BinaryOperator 0x11f041c38 <line:31:8, col:14> 'int' contains-errors '=='
|   | |     | | |-UnaryOperator 0x11f041c00 <col:8, col:9> 'unsigned char' lvalue prefix '*' cannot overflow
|   | |     | | | `-ImplicitCastExpr 0x11f041be8 <col:9> 'unsigned char *' <LValueToRValue>
|   | |     | | |   `-DeclRefExpr 0x11f041b30 <col:9> 'unsigned char *' lvalue ParmVar 0x12880dd08 'p' 'unsigned char *'
|   | |     | | `-RecoveryExpr 0x11f041c18 <col:14> '<dependent type>' contains-errors lvalue
|   | |     | |-CompoundStmt 0x11f0423a8 <col:38, line:36:4>
|   | |     | | `-IfStmt 0x11f042388 <line:32:5, line:35:5>
|   | |     | |   |-UnaryOperator 0x11f041c90 <line:32:9, col:10> 'int' prefix '!' cannot overflow
|   | |     | |   | `-ImplicitCastExpr 0x11f041c78 <col:10> 'int' <LValueToRValue>
|   | |     | |   |   `-DeclRefExpr 0x11f041c58 <col:10> 'int' lvalue Var 0x128826a80 'fac_national_digis_received' 'int'
|   | |     | |   `-CompoundStmt 0x11f042368 <col:39, line:35:5>
|   | |     | |     |-CallExpr 0x11f042290 <line:33:6, col:63> '<dependent type>' contains-errors
|   | |     | |     | |-DeclRefExpr 0x11f041f78 <col:6> 'void *(void *, const void *, unsigned long)' Function 0x11f041d28 'memcpy' 'void *(void *, const void *, unsigned long)'
|   | |     | |     | |-UnaryOperator 0x11f042208 <col:13, col:40> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | |     | |     | | `-ArraySubscriptExpr 0x11f0421e8 <col:14, col:40> '<dependent type>' contains-errors lvalue
|   | |     | |     | |   |-ImplicitCastExpr 0x11f0421d0 <col:14, col:26> '<dependent type>' contains-errors <LValueToRValue>
|   | |     | |     | |   | `-RecoveryExpr 0x11f041fd0 <col:14, col:26> '<dependent type>' contains-errors lvalue
|   | |     | |     | |   |   `-DeclRefExpr 0x11f041f98 <col:14> 'struct rose_facilities_struct *' lvalue ParmVar 0x12880e2f8 'facilities' 'struct rose_facilities_struct *'
|   | |     | |     | |   `-IntegerLiteral 0x11f041ff8 <col:39> 'int' 0
|   | |     | |     | |-BinaryOperator 0x11f042238 <col:43, col:47> 'unsigned char *' '+'
|   | |     | |     | | |-ImplicitCastExpr 0x11f042220 <col:43> 'unsigned char *' <LValueToRValue>
|   | |     | |     | | | `-DeclRefExpr 0x11f042068 <col:43> 'unsigned char *' lvalue ParmVar 0x12880dd08 'p' 'unsigned char *'
|   | |     | |     | | `-IntegerLiteral 0x11f042088 <col:47> 'int' 2
|   | |     | |     | `-RecoveryExpr 0x11f042258 <col:50> '<dependent type>' contains-errors lvalue
|   | |     | |     `-BinaryOperator 0x11f042348 <line:34:6, col:34> '<dependent type>' contains-errors '='
|   | |     | |       |-RecoveryExpr 0x11f042300 <col:6, col:18> '<dependent type>' contains-errors lvalue
|   | |     | |       | `-DeclRefExpr 0x11f0422c8 <col:6> 'struct rose_facilities_struct *' lvalue ParmVar 0x12880e2f8 'facilities' 'struct rose_facilities_struct *'
|   | |     | |       `-IntegerLiteral 0x11f042328 <col:34> 'int' 1
|   | |     | `-IfStmt 0x11f095a60 <line:37:9, line:59:4> has_else
|   | |     |   |-BinaryOperator 0x11f0424c8 <line:37:13, col:19> 'int' contains-errors '=='
|   | |     |   | |-UnaryOperator 0x11f042490 <col:13, col:14> 'unsigned char' lvalue prefix '*' cannot overflow
|   | |     |   | | `-ImplicitCastExpr 0x11f042478 <col:14> 'unsigned char *' <LValueToRValue>
|   | |     |   | |   `-DeclRefExpr 0x11f0423c0 <col:14> 'unsigned char *' lvalue ParmVar 0x12880dd08 'p' 'unsigned char *'
|   | |     |   | `-RecoveryExpr 0x11f0424a8 <col:19> '<dependent type>' contains-errors lvalue
|   | |     |   |-CompoundStmt 0x11f042968 <col:42, line:42:4>
|   | |     |   | `-IfStmt 0x11f042948 <line:38:5, line:41:5>
|   | |     |   |   |-UnaryOperator 0x11f042520 <line:38:9, col:10> 'int' prefix '!' cannot overflow
|   | |     |   |   | `-ImplicitCastExpr 0x11f042508 <col:10> 'int' <LValueToRValue>
|   | |     |   |   |   `-DeclRefExpr 0x11f0424e8 <col:10> 'int' lvalue Var 0x128826a80 'fac_national_digis_received' 'int'
|   | |     |   |   `-CompoundStmt 0x11f042928 <col:39, line:41:5>
|   | |     |   |     |-CallExpr 0x11f042850 <line:39:6, col:61> '<dependent type>' contains-errors
|   | |     |   |     | |-DeclRefExpr 0x11f042538 <col:6> 'void *(void *, const void *, unsigned long)' Function 0x11f041d28 'memcpy' 'void *(void *, const void *, unsigned long)'
|   | |     |   |     | |-UnaryOperator 0x11f0427c8 <col:13, col:38> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | |     |   |     | | `-ArraySubscriptExpr 0x11f0427a8 <col:14, col:38> '<dependent type>' contains-errors lvalue
|   | |     |   |     | |   |-ImplicitCastExpr 0x11f042790 <col:14, col:26> '<dependent type>' contains-errors <LValueToRValue>
|   | |     |   |     | |   | `-RecoveryExpr 0x11f042590 <col:14, col:26> '<dependent type>' contains-errors lvalue
|   | |     |   |     | |   |   `-DeclRefExpr 0x11f042558 <col:14> 'struct rose_facilities_struct *' lvalue ParmVar 0x12880e2f8 'facilities' 'struct rose_facilities_struct *'
|   | |     |   |     | |   `-IntegerLiteral 0x11f0425b8 <col:37> 'int' 0
|   | |     |   |     | |-BinaryOperator 0x11f0427f8 <col:41, col:45> 'unsigned char *' '+'
|   | |     |   |     | | |-ImplicitCastExpr 0x11f0427e0 <col:41> 'unsigned char *' <LValueToRValue>
|   | |     |   |     | | | `-DeclRefExpr 0x11f042628 <col:41> 'unsigned char *' lvalue ParmVar 0x12880dd08 'p' 'unsigned char *'
|   | |     |   |     | | `-IntegerLiteral 0x11f042648 <col:45> 'int' 2
|   | |     |   |     | `-RecoveryExpr 0x11f042818 <col:48> '<dependent type>' contains-errors lvalue
|   | |     |   |     `-BinaryOperator 0x11f042908 <line:40:6, col:32> '<dependent type>' contains-errors '='
|   | |     |   |       |-RecoveryExpr 0x11f0428c0 <col:6, col:18> '<dependent type>' contains-errors lvalue
|   | |     |   |       | `-DeclRefExpr 0x11f042888 <col:6> 'struct rose_facilities_struct *' lvalue ParmVar 0x12880e2f8 'facilities' 'struct rose_facilities_struct *'
|   | |     |   |       `-IntegerLiteral 0x11f0428e8 <col:32> 'int' 1
|   | |     |   `-IfStmt 0x11f095a30 <line:43:9, line:59:4> has_else
|   | |     |     |-BinaryOperator 0x11f094aa0 <line:43:13, col:19> 'int' contains-errors '=='
|   | |     |     | |-UnaryOperator 0x11f094a68 <col:13, col:14> 'unsigned char' lvalue prefix '*' cannot overflow
|   | |     |     | | `-ImplicitCastExpr 0x11f094a50 <col:14> 'unsigned char *' <LValueToRValue>
|   | |     |     | |   `-DeclRefExpr 0x11f042980 <col:14> 'unsigned char *' lvalue ParmVar 0x12880dd08 'p' 'unsigned char *'
|   | |     |     | `-RecoveryExpr 0x11f094a80 <col:19> '<dependent type>' contains-errors lvalue
|   | |     |     |-CompoundStmt 0x11f094d18 <col:43, line:45:4>
|   | |     |     | `-CallExpr 0x11f094ce0 <line:44:5, col:56> '<dependent type>' contains-errors
|   | |     |     |   |-DeclRefExpr 0x11f094ac0 <col:5> 'void *(void *, const void *, unsigned long)' Function 0x11f041d28 'memcpy' 'void *(void *, const void *, unsigned long)'
|   | |     |     |   |-UnaryOperator 0x11f094b40 <col:12, col:25> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | |     |     |   | `-RecoveryExpr 0x11f094b18 <col:13, col:25> '<dependent type>' contains-errors lvalue
|   | |     |     |   |   `-DeclRefExpr 0x11f094ae0 <col:13> 'struct rose_facilities_struct *' lvalue ParmVar 0x12880e2f8 'facilities' 'struct rose_facilities_struct *'
|   | |     |     |   |-BinaryOperator 0x11f094c88 <col:36, col:40> 'unsigned char *' '+'
|   | |     |     |   | |-ImplicitCastExpr 0x11f094c70 <col:36> 'unsigned char *' <LValueToRValue>
|   | |     |     |   | | `-DeclRefExpr 0x11f094b58 <col:36> 'unsigned char *' lvalue ParmVar 0x12880dd08 'p' 'unsigned char *'
|   | |     |     |   | `-IntegerLiteral 0x11f094b78 <col:40> 'int' 2
|   | |     |     |   `-RecoveryExpr 0x11f094ca8 <col:43> '<dependent type>' contains-errors lvalue
|   | |     |     `-IfStmt 0x11f095a00 <line:46:9, line:59:4> has_else
|   | |     |       |-BinaryOperator 0x11f094e38 <line:46:13, col:19> 'int' contains-errors '=='
|   | |     |       | |-UnaryOperator 0x11f094e00 <col:13, col:14> 'unsigned char' lvalue prefix '*' cannot overflow
|   | |     |       | | `-ImplicitCastExpr 0x11f094de8 <col:14> 'unsigned char *' <LValueToRValue>
|   | |     |       | |   `-DeclRefExpr 0x11f094d30 <col:14> 'unsigned char *' lvalue ParmVar 0x12880dd08 'p' 'unsigned char *'
|   | |     |       | `-RecoveryExpr 0x11f094e18 <col:19> '<dependent type>' contains-errors lvalue
|   | |     |       |-CompoundStmt 0x11f0950b0 <col:42, line:48:4>
|   | |     |       | `-CallExpr 0x11f095078 <line:47:5, col:56> '<dependent type>' contains-errors
|   | |     |       |   |-DeclRefExpr 0x11f094e58 <col:5> 'void *(void *, const void *, unsigned long)' Function 0x11f041d28 'memcpy' 'void *(void *, const void *, unsigned long)'
|   | |     |       |   |-UnaryOperator 0x11f094ed8 <col:12, col:25> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | |     |       |   | `-RecoveryExpr 0x11f094eb0 <col:13, col:25> '<dependent type>' contains-errors lvalue
|   | |     |       |   |   `-DeclRefExpr 0x11f094e78 <col:13> 'struct rose_facilities_struct *' lvalue ParmVar 0x12880e2f8 'facilities' 'struct rose_facilities_struct *'
|   | |     |       |   |-BinaryOperator 0x11f095020 <col:36, col:40> 'unsigned char *' '+'
|   | |     |       |   | |-ImplicitCastExpr 0x11f095008 <col:36> 'unsigned char *' <LValueToRValue>
|   | |     |       |   | | `-DeclRefExpr 0x11f094ef0 <col:36> 'unsigned char *' lvalue ParmVar 0x12880dd08 'p' 'unsigned char *'
|   | |     |       |   | `-IntegerLiteral 0x11f094f10 <col:40> 'int' 3
|   | |     |       |   `-RecoveryExpr 0x11f095040 <col:43> '<dependent type>' contains-errors lvalue
|   | |     |       `-IfStmt 0x11f0959c0 <line:49:9, line:59:4>
|   | |     |         |-BinaryOperator 0x11f0951d0 <line:49:13, col:19> 'int' contains-errors '=='
|   | |     |         | |-UnaryOperator 0x11f095198 <col:13, col:14> 'unsigned char' lvalue prefix '*' cannot overflow
|   | |     |         | | `-ImplicitCastExpr 0x11f095180 <col:14> 'unsigned char *' <LValueToRValue>
|   | |     |         | |   `-DeclRefExpr 0x11f0950c8 <col:14> 'unsigned char *' lvalue ParmVar 0x12880dd08 'p' 'unsigned char *'
|   | |     |         | `-RecoveryExpr 0x11f0951b0 <col:19> '<dependent type>' contains-errors lvalue
|   | |     |         `-CompoundStmt 0x11f095990 <col:39, line:59:4>
|   | |     |           |-BinaryOperator 0x11f095230 <line:50:5, col:35> 'int' '='
|   | |     |           | |-DeclRefExpr 0x11f0951f0 <col:5> 'int' lvalue Var 0x128826a80 'fac_national_digis_received' 'int'
|   | |     |           | `-IntegerLiteral 0x11f095210 <col:35> 'int' 1
|   | |     |           |-BinaryOperator 0x11f0952d0 <line:51:5, col:33> '<dependent type>' contains-errors '='
|   | |     |           | |-RecoveryExpr 0x11f095288 <col:5, col:17> '<dependent type>' contains-errors lvalue
|   | |     |           | | `-DeclRefExpr 0x11f095250 <col:5> 'struct rose_facilities_struct *' lvalue ParmVar 0x12880e2f8 'facilities' 'struct rose_facilities_struct *'
|   | |     |           | `-IntegerLiteral 0x11f0952b0 <col:33> 'int' 0
|   | |     |           |-BinaryOperator 0x11f095370 <line:52:5, col:33> '<dependent type>' contains-errors '='
|   | |     |           | |-RecoveryExpr 0x11f095328 <col:5, col:17> '<dependent type>' contains-errors lvalue
|   | |     |           | | `-DeclRefExpr 0x11f0952f0 <col:5> 'struct rose_facilities_struct *' lvalue ParmVar 0x12880e2f8 'facilities' 'struct rose_facilities_struct *'
|   | |     |           | `-IntegerLiteral 0x11f095350 <col:33> 'int' 0
|   | |     |           `-ForStmt 0x11f095958 <line:53:5, line:58:5>
|   | |     |             |-BinaryOperator 0x11f0954c0 <line:53:10, col:27> 'unsigned char' ','
|   | |     |             | |-BinaryOperator 0x11f095428 <col:10, col:19> 'unsigned char *' '='
|   | |     |             | | |-DeclRefExpr 0x11f095390 <col:10> 'unsigned char *' lvalue Var 0x1288267f8 'pt' 'unsigned char *'
|   | |     |             | | `-BinaryOperator 0x11f095408 <col:15, col:19> 'unsigned char *' '+'
|   | |     |             | |   |-ImplicitCastExpr 0x11f0953f0 <col:15> 'unsigned char *' <LValueToRValue>
|   | |     |             | |   | `-DeclRefExpr 0x11f0953b0 <col:15> 'unsigned char *' lvalue ParmVar 0x12880dd08 'p' 'unsigned char *'
|   | |     |             | |   `-IntegerLiteral 0x11f0953d0 <col:19> 'int' 2
|   | |     |             | `-BinaryOperator 0x11f0954a0 <col:22, col:27> 'unsigned char' '='
|   | |     |             |   |-DeclRefExpr 0x11f095448 <col:22> 'unsigned char' lvalue Var 0x128826910 'lg' 'unsigned char'
|   | |     |             |   `-ImplicitCastExpr 0x11f095488 <col:27> 'unsigned char' <IntegralCast>
|   | |     |             |     `-IntegerLiteral 0x11f095468 <col:27> 'int' 0
|   | |     |             |-<<<NULL>>>
|   | |     |             |-BinaryOperator 0x11f095580 <col:31, col:36> 'int' '<'
|   | |     |             | |-ImplicitCastExpr 0x11f095550 <col:31> 'int' <IntegralCast>
|   | |     |             | | `-ImplicitCastExpr 0x11f095520 <col:31> 'unsigned char' <LValueToRValue>
|   | |     |             | |   `-DeclRefExpr 0x11f0954e0 <col:31> 'unsigned char' lvalue Var 0x128826910 'lg' 'unsigned char'
|   | |     |             | `-ImplicitCastExpr 0x11f095568 <col:36> 'int' <IntegralCast>
|   | |     |             |   `-ImplicitCastExpr 0x11f095538 <col:36> 'unsigned char' <LValueToRValue>
|   | |     |             |     `-DeclRefExpr 0x11f095500 <col:36> 'unsigned char' lvalue Var 0x128826890 'l' 'unsigned char'
|   | |     |             |-<<<NULL>>>
|   | |     |             `-CompoundStmt 0x11f095948 <col:82, line:58:5>
|   | |     |-CompoundAssignOperator 0x11f095b70 <line:60:4, col:15> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|   | |     | |-DeclRefExpr 0x11f095ac0 <col:4> 'unsigned char *' lvalue ParmVar 0x12880dd08 'p' 'unsigned char *'
|   | |     | `-BinaryOperator 0x11f095b50 <col:11, col:15> 'int' '+'
|   | |     |   |-ImplicitCastExpr 0x11f095b38 <col:11> 'int' <IntegralCast>
|   | |     |   | `-ImplicitCastExpr 0x11f095b20 <col:11> 'unsigned char' <LValueToRValue>
|   | |     |   |   `-DeclRefExpr 0x11f095ae0 <col:11> 'unsigned char' lvalue Var 0x128826890 'l' 'unsigned char'
|   | |     |   `-IntegerLiteral 0x11f095b00 <col:15> 'int' 2
|   | |     |-CompoundAssignOperator 0x11f095c50 <line:61:4, col:15> 'unsigned char' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |     | |-DeclRefExpr 0x11f095ba0 <col:4> 'unsigned char' lvalue Var 0x128826990 'n' 'unsigned char'
|   | |     | `-BinaryOperator 0x11f095c30 <col:11, col:15> 'int' '+'
|   | |     |   |-ImplicitCastExpr 0x11f095c18 <col:11> 'int' <IntegralCast>
|   | |     |   | `-ImplicitCastExpr 0x11f095c00 <col:11> 'unsigned char' <LValueToRValue>
|   | |     |   |   `-DeclRefExpr 0x11f095bc0 <col:11> 'unsigned char' lvalue Var 0x128826890 'l' 'unsigned char'
|   | |     |   `-IntegerLiteral 0x11f095be0 <col:15> 'int' 2
|   | |     |-CompoundAssignOperator 0x11f095d30 <line:62:4, col:15> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |     | |-DeclRefExpr 0x11f095c80 <col:4> 'int' lvalue ParmVar 0x12880e378 'len' 'int'
|   | |     | `-BinaryOperator 0x11f095d10 <col:11, col:15> 'int' '+'
|   | |     |   |-ImplicitCastExpr 0x11f095cf8 <col:11> 'int' <IntegralCast>
|   | |     |   | `-ImplicitCastExpr 0x11f095ce0 <col:11> 'unsigned char' <LValueToRValue>
|   | |     |   |   `-DeclRefExpr 0x11f095ca0 <col:11> 'unsigned char' lvalue Var 0x128826890 'l' 'unsigned char'
|   | |     |   `-IntegerLiteral 0x11f095cc0 <col:15> 'int' 2
|   | |     `-BreakStmt 0x11f095d60 <line:63:4>
|   | `-BinaryOperator 0x11f095f60 <line:65:11, col:31> 'int' '&&'
|   |   |-BinaryOperator 0x11f095ec8 <col:11, col:17> 'int' '!='
|   |   | |-ImplicitCastExpr 0x11f095eb0 <col:11, col:12> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x11f095e98 <col:11, col:12> 'unsigned char' <LValueToRValue>
|   |   | |   `-UnaryOperator 0x11f095e60 <col:11, col:12> 'unsigned char' lvalue prefix '*' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x11f095e48 <col:12> 'unsigned char *' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x11f095e28 <col:12> 'unsigned char *' lvalue ParmVar 0x12880dd08 'p' 'unsigned char *'
|   |   | `-IntegerLiteral 0x11f095e78 <col:17> 'int' 0
|   |   `-BinaryOperator 0x11f095f40 <col:25, col:31> 'int' '>'
|   |     |-ImplicitCastExpr 0x11f095f28 <col:25> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x11f095ee8 <col:25> 'int' lvalue ParmVar 0x12880e378 'len' 'int'
|   |     `-IntegerLiteral 0x11f095f08 <col:31> 'int' 0
|   `-ReturnStmt 0x11f095ff0 <line:67:2, col:9>
|     `-ImplicitCastExpr 0x11f095fd8 <col:9> 'int' <IntegralCast>
|       `-ImplicitCastExpr 0x11f095fc0 <col:9> 'unsigned char' <LValueToRValue>
|         `-DeclRefExpr 0x11f095fa0 <col:9> 'unsigned char' lvalue Var 0x128826990 'n' 'unsigned char'
`-FunctionDecl 0x11f041d28 <line:33:6> col:6 implicit used memcpy 'void *(void *, const void *, unsigned long)' extern
  |-ParmVarDecl 0x11f041e28 <<invalid sloc>> <invalid sloc> 'void *'
  |-ParmVarDecl 0x11f041e90 <<invalid sloc>> <invalid sloc> 'const void *'
  |-ParmVarDecl 0x11f041ef8 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x11f041dd0 <<invalid sloc>> Implicit 882
