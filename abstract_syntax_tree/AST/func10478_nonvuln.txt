TranslationUnitDecl 0x11f055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x11f0564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x11f055bd0 '__int128'
|-TypedefDecl 0x11f056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x11f055bf0 'unsigned __int128'
|-TypedefDecl 0x11f80be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x11f80bc00 'struct __NSConstantString_tag'
|   `-Record 0x11f056580 '__NSConstantString_tag'
|-TypedefDecl 0x11f80be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x11f055d90 '__SVInt8_t'
|-TypedefDecl 0x11f80bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x11f055db0 '__SVInt16_t'
|-TypedefDecl 0x11f80bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x11f055dd0 '__SVInt32_t'
|-TypedefDecl 0x11f80bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x11f055df0 '__SVInt64_t'
|-TypedefDecl 0x11f80c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x11f055e10 '__SVUint8_t'
|-TypedefDecl 0x11f80c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x11f055e30 '__SVUint16_t'
|-TypedefDecl 0x11f80c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x11f055e50 '__SVUint32_t'
|-TypedefDecl 0x11f80c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x11f055e70 '__SVUint64_t'
|-TypedefDecl 0x11f80c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x11f055e90 '__SVFloat16_t'
|-TypedefDecl 0x11f80c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x11f055eb0 '__SVFloat32_t'
|-TypedefDecl 0x11f80c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x11f055ed0 '__SVFloat64_t'
|-TypedefDecl 0x11f80c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x11f055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x11f80c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x11f055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x11f80c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x11f055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x11f80c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x11f055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x11f80c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x11f055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x11f80c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x11f055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x11f80c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x11f055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x11f80c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x11f055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x11f80c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x11f055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x11f80c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x11f056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x11f80c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x11f056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x11f80c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x11f056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x11f80c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x11f056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x11f80c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x11f056090 '__clang_svint8x3_t'
|-TypedefDecl 0x11f80c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x11f0560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x11f80c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x11f0560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x11f80c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x11f0560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x11f80c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x11f056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x11f80ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x11f056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x11f80cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x11f056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x11f80cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x11f056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x11f80cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x11f056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x11f80d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x11f0561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x11f80d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x11f0561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x11f80d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x11f0561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x11f80d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x11f056210 '__clang_svint8x4_t'
|-TypedefDecl 0x11f80d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x11f056230 '__clang_svint16x4_t'
|-TypedefDecl 0x11f80d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x11f056250 '__clang_svint32x4_t'
|-TypedefDecl 0x11f80d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x11f056270 '__clang_svint64x4_t'
|-TypedefDecl 0x11f80d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x11f056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x11f80d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x11f0562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x11f80d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x11f0562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x11f80d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x11f0562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x11f80d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x11f056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x11f80d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x11f056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x11f80d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x11f056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x11f80d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x11f056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x11f80da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x11f056390 '__SVBool_t'
|-TypedefDecl 0x11f80da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x11f0563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x11f80dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x11f0563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x11f80db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x11f0563f0 '__SVCount_t'
|-TypedefDecl 0x11f80dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x11f80dbb0 'char *'
|   `-BuiltinType 0x11f0556b0 'char'
|-TypedefDecl 0x11f80dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x11f80dbb0 'char *'
|   `-BuiltinType 0x11f0556b0 'char'
|-FunctionDecl 0x11f80dfe8 <dataset_diviso_filec/func10478_nonvuln.c:1:1, line:54:1> line:1:1 ppd_parse_line 'int (const char *, char *, int, char *, int)'
| |-ParmVarDecl 0x11f80dcd8 <col:16, col:28> col:28 used line 'const char *'
| |-ParmVarDecl 0x11f80dd58 <line:2:16, col:28> col:28 used option 'char *'
| |-ParmVarDecl 0x11f80ddd8 <line:3:9, col:20> col:20 used olen 'int'
| |-ParmVarDecl 0x11f80de58 <line:4:16, col:28> col:28 used choice 'char *'
| |-ParmVarDecl 0x11f80ded8 <line:5:9, col:20> col:20 used clen 'int'
| `-CompoundStmt 0x11f828a90 <line:6:1, line:54:1>
|   |-IfStmt 0x11f826c28 <line:9:3, line:10:15>
|   | |-CallExpr 0x11f826b28 <line:9:7, col:29> 'int'
|   | | |-ImplicitCastExpr 0x11f826b10 <col:7> 'int (*)(const char *, const char *, unsigned long)' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x11f8269f0 <col:7> 'int (const char *, const char *, unsigned long)' Function 0x11f8267a0 'strncmp' 'int (const char *, const char *, unsigned long)'
|   | | |-ImplicitCastExpr 0x11f826b60 <col:15> 'const char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x11f826a10 <col:15> 'const char *' lvalue ParmVar 0x11f80dcd8 'line' 'const char *'
|   | | |-ImplicitCastExpr 0x11f826b90 <col:21> 'const char *' <NoOp>
|   | | | `-ImplicitCastExpr 0x11f826b78 <col:21> 'char *' <ArrayToPointerDecay>
|   | | |   `-StringLiteral 0x11f826a70 <col:21> 'char[4]' lvalue "STR"
|   | | `-ImplicitCastExpr 0x11f826ba8 <col:28> 'unsigned long' <IntegralCast>
|   | |   `-IntegerLiteral 0x11f826a90 <col:28> 'int' 8
|   | `-ReturnStmt 0x11f826c18 <line:10:5, col:15>
|   |   `-ParenExpr 0x11f826bf8 <col:12, col:15> 'int'
|   |     `-UnaryOperator 0x11f826be0 <col:13, col:14> 'int' prefix '-'
|   |       `-IntegerLiteral 0x11f826bc0 <col:14> 'int' 1
|   |-ForStmt 0x11f827258 <line:14:3, line:21:5>
|   | |-BinaryOperator 0x11f826cf0 <line:14:8, col:24> 'int' ','
|   | | |-CompoundAssignOperator 0x11f826c88 <col:8, col:16> 'const char *' '+=' ComputeLHSTy='const char *' ComputeResultTy='const char *'
|   | | | |-DeclRefExpr 0x11f826c48 <col:8> 'const char *' lvalue ParmVar 0x11f80dcd8 'line' 'const char *'
|   | | | `-IntegerLiteral 0x11f826c68 <col:16> 'int' 8
|   | | `-UnaryOperator 0x11f826cd8 <col:19, col:24> 'int' postfix '--'
|   | |   `-DeclRefExpr 0x11f826cb8 <col:19> 'int' lvalue ParmVar 0x11f80ddd8 'olen' 'int'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x11f827038 <line:15:8, col:64> 'int' '&&'
|   | | |-BinaryOperator 0x11f826f60 <col:8, col:48> 'int' '&&'
|   | | | |-BinaryOperator 0x11f826e88 <col:8, col:31> 'int' '&&'
|   | | | | |-BinaryOperator 0x11f826da8 <col:8, col:16> 'int' '>'
|   | | | | | |-ImplicitCastExpr 0x11f826d90 <col:8, col:9> 'int' <IntegralCast>
|   | | | | | | `-ImplicitCastExpr 0x11f826d78 <col:8, col:9> 'char' <LValueToRValue>
|   | | | | | |   `-UnaryOperator 0x11f826d48 <col:8, col:9> 'const char' lvalue prefix '*' cannot overflow
|   | | | | | |     `-ImplicitCastExpr 0x11f826d30 <col:9> 'const char *' <LValueToRValue>
|   | | | | | |       `-DeclRefExpr 0x11f826d10 <col:9> 'const char *' lvalue ParmVar 0x11f80dcd8 'line' 'const char *'
|   | | | | | `-CharacterLiteral 0x11f826d60 <col:16> 'int' 32
|   | | | | `-BinaryOperator 0x11f826e68 <col:23, col:31> 'int' '<'
|   | | | |   |-ImplicitCastExpr 0x11f826e50 <col:23, col:24> 'int' <IntegralCast>
|   | | | |   | `-ImplicitCastExpr 0x11f826e38 <col:23, col:24> 'char' <LValueToRValue>
|   | | | |   |   `-UnaryOperator 0x11f826e00 <col:23, col:24> 'const char' lvalue prefix '*' cannot overflow
|   | | | |   |     `-ImplicitCastExpr 0x11f826de8 <col:24> 'const char *' <LValueToRValue>
|   | | | |   |       `-DeclRefExpr 0x11f826dc8 <col:24> 'const char *' lvalue ParmVar 0x11f80dcd8 'line' 'const char *'
|   | | | |   `-IntegerLiteral 0x11f826e18 <col:31> 'int' 127
|   | | | `-BinaryOperator 0x11f826f40 <col:39, col:48> 'int' '!='
|   | | |   |-ImplicitCastExpr 0x11f826f28 <col:39, col:40> 'int' <IntegralCast>
|   | | |   | `-ImplicitCastExpr 0x11f826f10 <col:39, col:40> 'char' <LValueToRValue>
|   | | |   |   `-UnaryOperator 0x11f826ee0 <col:39, col:40> 'const char' lvalue prefix '*' cannot overflow
|   | | |   |     `-ImplicitCastExpr 0x11f826ec8 <col:40> 'const char *' <LValueToRValue>
|   | | |   |       `-DeclRefExpr 0x11f826ea8 <col:40> 'const char *' lvalue ParmVar 0x11f80dcd8 'line' 'const char *'
|   | | |   `-CharacterLiteral 0x11f826ef8 <col:48> 'int' 58
|   | | `-BinaryOperator 0x11f827018 <col:55, col:64> 'int' '!='
|   | |   |-ImplicitCastExpr 0x11f827000 <col:55, col:56> 'int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x11f826fe8 <col:55, col:56> 'char' <LValueToRValue>
|   | |   |   `-UnaryOperator 0x11f826fb8 <col:55, col:56> 'const char' lvalue prefix '*' cannot overflow
|   | |   |     `-ImplicitCastExpr 0x11f826fa0 <col:56> 'const char *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x11f826f80 <col:56> 'const char *' lvalue ParmVar 0x11f80dcd8 'line' 'const char *'
|   | |   `-CharacterLiteral 0x11f826fd0 <col:64> 'int' 47
|   | |-UnaryOperator 0x11f827078 <line:16:8, col:13> 'const char *' postfix '++'
|   | | `-DeclRefExpr 0x11f827058 <col:8> 'const char *' lvalue ParmVar 0x11f80dcd8 'line' 'const char *'
|   | `-IfStmt 0x11f827238 <line:17:5, line:21:5>
|   |   |-BinaryOperator 0x11f8270e8 <line:17:9, col:16> 'int' '>'
|   |   | |-ImplicitCastExpr 0x11f8270d0 <col:9> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x11f827090 <col:9> 'int' lvalue ParmVar 0x11f80ddd8 'olen' 'int'
|   |   | `-IntegerLiteral 0x11f8270b0 <col:16> 'int' 0
|   |   `-CompoundStmt 0x11f827218 <line:18:5, line:21:5>
|   |     |-BinaryOperator 0x11f8271c0 <line:19:7, col:20> 'char' '='
|   |     | |-UnaryOperator 0x11f827140 <col:7, col:14> 'char' lvalue prefix '*' cannot overflow
|   |     | | `-UnaryOperator 0x11f827128 <col:8, col:14> 'char *' postfix '++'
|   |     | |   `-DeclRefExpr 0x11f827108 <col:8> 'char *' lvalue ParmVar 0x11f80dd58 'option' 'char *'
|   |     | `-ImplicitCastExpr 0x11f8271a8 <col:19, col:20> 'char' <LValueToRValue>
|   |     |   `-UnaryOperator 0x11f827190 <col:19, col:20> 'const char' lvalue prefix '*' cannot overflow
|   |     |     `-ImplicitCastExpr 0x11f827178 <col:20> 'const char *' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x11f827158 <col:20> 'const char *' lvalue ParmVar 0x11f80dcd8 'line' 'const char *'
|   |     `-UnaryOperator 0x11f827200 <line:20:7, col:12> 'int' postfix '--'
|   |       `-DeclRefExpr 0x11f8271e0 <col:7> 'int' lvalue ParmVar 0x11f80ddd8 'olen' 'int'
|   |-BinaryOperator 0x11f827310 <line:23:3, col:13> 'char' '='
|   | |-UnaryOperator 0x11f8272c8 <col:3, col:4> 'char' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x11f8272b0 <col:4> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x11f827290 <col:4> 'char *' lvalue ParmVar 0x11f80dd58 'option' 'char *'
|   | `-ImplicitCastExpr 0x11f8272f8 <col:13> 'char' <IntegralCast>
|   |   `-CharacterLiteral 0x11f8272e0 <col:13> 'int' 0
|   |-WhileStmt 0x11f8274c0 <line:27:3, line:28:10>
|   | |-BinaryOperator 0x11f827468 <line:27:10, col:28> 'int' '&&'
|   | | |-ImplicitCastExpr 0x11f827450 <col:10, col:11> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x11f827438 <col:10, col:11> 'char' <LValueToRValue>
|   | | |   `-UnaryOperator 0x11f827368 <col:10, col:11> 'const char' lvalue prefix '*' cannot overflow
|   | | |     `-ImplicitCastExpr 0x11f827350 <col:11> 'const char *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x11f827330 <col:11> 'const char *' lvalue ParmVar 0x11f80dcd8 'line' 'const char *'
|   | | `-BinaryOperator 0x11f827418 <col:19, col:28> 'int' '!='
|   | |   |-ImplicitCastExpr 0x11f827400 <col:19, col:20> 'int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x11f8273e8 <col:19, col:20> 'char' <LValueToRValue>
|   | |   |   `-UnaryOperator 0x11f8273b8 <col:19, col:20> 'const char' lvalue prefix '*' cannot overflow
|   | |   |     `-ImplicitCastExpr 0x11f8273a0 <col:20> 'const char *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x11f827380 <col:20> 'const char *' lvalue ParmVar 0x11f80dcd8 'line' 'const char *'
|   | |   `-CharacterLiteral 0x11f8273d0 <col:28> 'int' 58
|   | `-UnaryOperator 0x11f8274a8 <line:28:5, col:10> 'const char *' postfix '++'
|   |   `-DeclRefExpr 0x11f827488 <col:5> 'const char *' lvalue ParmVar 0x11f80dcd8 'line' 'const char *'
|   |-IfStmt 0x11f8275c8 <line:30:3, line:31:15>
|   | |-UnaryOperator 0x11f827548 <line:30:7, col:9> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x11f827530 <col:8, col:9> 'char' <LValueToRValue>
|   | |   `-UnaryOperator 0x11f827518 <col:8, col:9> 'const char' lvalue prefix '*' cannot overflow
|   | |     `-ImplicitCastExpr 0x11f827500 <col:9> 'const char *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x11f8274e0 <col:9> 'const char *' lvalue ParmVar 0x11f80dcd8 'line' 'const char *'
|   | `-ReturnStmt 0x11f8275b8 <line:31:5, col:15>
|   |   `-ParenExpr 0x11f827598 <col:12, col:15> 'int'
|   |     `-UnaryOperator 0x11f827580 <col:13, col:14> 'int' prefix '-'
|   |       `-IntegerLiteral 0x11f827560 <col:14> 'int' 1
|   |-UnaryOperator 0x11f828020 <line:33:3, col:8> 'const char *' postfix '++'
|   | `-DeclRefExpr 0x11f828000 <col:3> 'const char *' lvalue ParmVar 0x11f80dcd8 'line' 'const char *'
|   |-WhileStmt 0x11f8283c8 <line:37:3, line:38:10>
|   | |-CallExpr 0x11f828368 <line:37:10, col:29> 'int'
|   | | |-ImplicitCastExpr 0x11f828350 <col:10> 'int (*)(int)' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x11f828238 <col:10> 'int (int)' Function 0x11f828078 'isspace' 'int (int)'
|   | | `-BinaryOperator 0x11f8282f8 <col:18, col:26> 'int' '&'
|   | |   |-ImplicitCastExpr 0x11f8282e0 <col:18, col:19> 'int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x11f8282c8 <col:18, col:19> 'char' <LValueToRValue>
|   | |   |   `-UnaryOperator 0x11f828290 <col:18, col:19> 'const char' lvalue prefix '*' cannot overflow
|   | |   |     `-ImplicitCastExpr 0x11f828278 <col:19> 'const char *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x11f828258 <col:19> 'const char *' lvalue ParmVar 0x11f80dcd8 'line' 'const char *'
|   | |   `-IntegerLiteral 0x11f8282a8 <col:26> 'int' 255
|   | `-UnaryOperator 0x11f8283b0 <line:38:5, col:10> 'const char *' postfix '++'
|   |   `-DeclRefExpr 0x11f828390 <col:5> 'const char *' lvalue ParmVar 0x11f80dcd8 'line' 'const char *'
|   |-ForStmt 0x11f828968 <line:40:3, line:47:5>
|   | |-UnaryOperator 0x11f828408 <line:40:8, col:13> 'int' postfix '--'
|   | | `-DeclRefExpr 0x11f8283e8 <col:8> 'int' lvalue ParmVar 0x11f80ded8 'clen' 'int'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x11f828748 <line:41:8, col:64> 'int' '&&'
|   | | |-BinaryOperator 0x11f828670 <col:8, col:48> 'int' '&&'
|   | | | |-BinaryOperator 0x11f828598 <col:8, col:31> 'int' '&&'
|   | | | | |-BinaryOperator 0x11f8284b8 <col:8, col:16> 'int' '>'
|   | | | | | |-ImplicitCastExpr 0x11f8284a0 <col:8, col:9> 'int' <IntegralCast>
|   | | | | | | `-ImplicitCastExpr 0x11f828488 <col:8, col:9> 'char' <LValueToRValue>
|   | | | | | |   `-UnaryOperator 0x11f828458 <col:8, col:9> 'const char' lvalue prefix '*' cannot overflow
|   | | | | | |     `-ImplicitCastExpr 0x11f828440 <col:9> 'const char *' <LValueToRValue>
|   | | | | | |       `-DeclRefExpr 0x11f828420 <col:9> 'const char *' lvalue ParmVar 0x11f80dcd8 'line' 'const char *'
|   | | | | | `-CharacterLiteral 0x11f828470 <col:16> 'int' 32
|   | | | | `-BinaryOperator 0x11f828578 <col:23, col:31> 'int' '<'
|   | | | |   |-ImplicitCastExpr 0x11f828560 <col:23, col:24> 'int' <IntegralCast>
|   | | | |   | `-ImplicitCastExpr 0x11f828548 <col:23, col:24> 'char' <LValueToRValue>
|   | | | |   |   `-UnaryOperator 0x11f828510 <col:23, col:24> 'const char' lvalue prefix '*' cannot overflow
|   | | | |   |     `-ImplicitCastExpr 0x11f8284f8 <col:24> 'const char *' <LValueToRValue>
|   | | | |   |       `-DeclRefExpr 0x11f8284d8 <col:24> 'const char *' lvalue ParmVar 0x11f80dcd8 'line' 'const char *'
|   | | | |   `-IntegerLiteral 0x11f828528 <col:31> 'int' 127
|   | | | `-BinaryOperator 0x11f828650 <col:39, col:48> 'int' '!='
|   | | |   |-ImplicitCastExpr 0x11f828638 <col:39, col:40> 'int' <IntegralCast>
|   | | |   | `-ImplicitCastExpr 0x11f828620 <col:39, col:40> 'char' <LValueToRValue>
|   | | |   |   `-UnaryOperator 0x11f8285f0 <col:39, col:40> 'const char' lvalue prefix '*' cannot overflow
|   | | |   |     `-ImplicitCastExpr 0x11f8285d8 <col:40> 'const char *' <LValueToRValue>
|   | | |   |       `-DeclRefExpr 0x11f8285b8 <col:40> 'const char *' lvalue ParmVar 0x11f80dcd8 'line' 'const char *'
|   | | |   `-CharacterLiteral 0x11f828608 <col:48> 'int' 58
|   | | `-BinaryOperator 0x11f828728 <col:55, col:64> 'int' '!='
|   | |   |-ImplicitCastExpr 0x11f828710 <col:55, col:56> 'int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x11f8286f8 <col:55, col:56> 'char' <LValueToRValue>
|   | |   |   `-UnaryOperator 0x11f8286c8 <col:55, col:56> 'const char' lvalue prefix '*' cannot overflow
|   | |   |     `-ImplicitCastExpr 0x11f8286b0 <col:56> 'const char *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x11f828690 <col:56> 'const char *' lvalue ParmVar 0x11f80dcd8 'line' 'const char *'
|   | |   `-CharacterLiteral 0x11f8286e0 <col:64> 'int' 47
|   | |-UnaryOperator 0x11f828788 <line:42:8, col:13> 'const char *' postfix '++'
|   | | `-DeclRefExpr 0x11f828768 <col:8> 'const char *' lvalue ParmVar 0x11f80dcd8 'line' 'const char *'
|   | `-IfStmt 0x11f828948 <line:43:5, line:47:5>
|   |   |-BinaryOperator 0x11f8287f8 <line:43:9, col:16> 'int' '>'
|   |   | |-ImplicitCastExpr 0x11f8287e0 <col:9> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x11f8287a0 <col:9> 'int' lvalue ParmVar 0x11f80ded8 'clen' 'int'
|   |   | `-IntegerLiteral 0x11f8287c0 <col:16> 'int' 0
|   |   `-CompoundStmt 0x11f828928 <line:44:5, line:47:5>
|   |     |-BinaryOperator 0x11f8288d0 <line:45:7, col:20> 'char' '='
|   |     | |-UnaryOperator 0x11f828850 <col:7, col:14> 'char' lvalue prefix '*' cannot overflow
|   |     | | `-UnaryOperator 0x11f828838 <col:8, col:14> 'char *' postfix '++'
|   |     | |   `-DeclRefExpr 0x11f828818 <col:8> 'char *' lvalue ParmVar 0x11f80de58 'choice' 'char *'
|   |     | `-ImplicitCastExpr 0x11f8288b8 <col:19, col:20> 'char' <LValueToRValue>
|   |     |   `-UnaryOperator 0x11f8288a0 <col:19, col:20> 'const char' lvalue prefix '*' cannot overflow
|   |     |     `-ImplicitCastExpr 0x11f828888 <col:20> 'const char *' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x11f828868 <col:20> 'const char *' lvalue ParmVar 0x11f80dcd8 'line' 'const char *'
|   |     `-UnaryOperator 0x11f828910 <line:46:7, col:12> 'int' postfix '--'
|   |       `-DeclRefExpr 0x11f8288f0 <col:7> 'int' lvalue ParmVar 0x11f80ded8 'clen' 'int'
|   |-BinaryOperator 0x11f828a20 <line:49:3, col:13> 'char' '='
|   | |-UnaryOperator 0x11f8289d8 <col:3, col:4> 'char' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x11f8289c0 <col:4> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x11f8289a0 <col:4> 'char *' lvalue ParmVar 0x11f80de58 'choice' 'char *'
|   | `-ImplicitCastExpr 0x11f828a08 <col:13> 'char' <IntegralCast>
|   |   `-CharacterLiteral 0x11f8289f0 <col:13> 'int' 0
|   `-ReturnStmt 0x11f828a80 <line:53:3, col:12>
|     `-ParenExpr 0x11f828a60 <col:10, col:12> 'int'
|       `-IntegerLiteral 0x11f828a40 <col:11> 'int' 0
|-FunctionDecl 0x11f8267a0 <line:9:7> col:7 implicit used strncmp 'int (const char *, const char *, unsigned long)' extern
| |-ParmVarDecl 0x11f8268a0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x11f826908 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x11f826970 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x11f826848 <<invalid sloc>> Implicit 888
`-FunctionDecl 0x11f828078 <line:37:10> col:10 implicit used isspace 'int (int)' extern
  |-ParmVarDecl 0x11f828178 <<invalid sloc>> <invalid sloc> 'int'
  |-BuiltinAttr 0x11f828120 <<invalid sloc>> Implicit 929
  |-NoThrowAttr 0x11f8281e8 <col:10> Implicit
  `-PureAttr 0x11f828210 <col:10> Implicit
