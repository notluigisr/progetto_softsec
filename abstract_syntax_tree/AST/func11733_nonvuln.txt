TranslationUnitDecl 0x124855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1248564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x124855bd0 '__int128'
|-TypedefDecl 0x124856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x124855bf0 'unsigned __int128'
|-TypedefDecl 0x124926230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x124926000 'struct __NSConstantString_tag'
|   `-Record 0x124856580 '__NSConstantString_tag'
|-TypedefDecl 0x124926298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x124855d90 '__SVInt8_t'
|-TypedefDecl 0x124926300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x124855db0 '__SVInt16_t'
|-TypedefDecl 0x124926368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x124855dd0 '__SVInt32_t'
|-TypedefDecl 0x1249263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x124855df0 '__SVInt64_t'
|-TypedefDecl 0x124926438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x124855e10 '__SVUint8_t'
|-TypedefDecl 0x1249264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x124855e30 '__SVUint16_t'
|-TypedefDecl 0x124926508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x124855e50 '__SVUint32_t'
|-TypedefDecl 0x124926570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x124855e70 '__SVUint64_t'
|-TypedefDecl 0x1249265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x124855e90 '__SVFloat16_t'
|-TypedefDecl 0x124926640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x124855eb0 '__SVFloat32_t'
|-TypedefDecl 0x1249266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x124855ed0 '__SVFloat64_t'
|-TypedefDecl 0x124926710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x124855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x124926778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x124855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1249267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x124855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x124926848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x124855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1249268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x124855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x124926918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x124855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x124926980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x124855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1249269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x124855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x124926a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x124855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x124926ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x124856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x124926b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x124856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x124926b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x124856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x124926bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x124856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x124926c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x124856090 '__clang_svint8x3_t'
|-TypedefDecl 0x124926cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1248560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x124926d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1248560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x124926d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1248560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x124926df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x124856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x124926e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x124856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x124926ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x124856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x124926f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x124856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x124926f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x124856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x124927800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1248561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x124927868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1248561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1249278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1248561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x124927938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x124856210 '__clang_svint8x4_t'
|-TypedefDecl 0x1249279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x124856230 '__clang_svint16x4_t'
|-TypedefDecl 0x124927a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x124856250 '__clang_svint32x4_t'
|-TypedefDecl 0x124927a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x124856270 '__clang_svint64x4_t'
|-TypedefDecl 0x124927ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x124856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x124927b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1248562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x124927ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1248562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x124927c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1248562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x124927c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x124856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x124927ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x124856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x124927d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x124856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x124927db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x124856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x124927e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x124856390 '__SVBool_t'
|-TypedefDecl 0x124927e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1248563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x124927ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1248563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x124927f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1248563f0 '__SVCount_t'
|-TypedefDecl 0x124927ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x124927fb0 'char *'
|   `-BuiltinType 0x1248556b0 'char'
|-TypedefDecl 0x124928068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x124927fb0 'char *'
|   `-BuiltinType 0x1248556b0 'char'
|-FunctionDecl 0x124928758 <dataset_diviso_filec/func11733_nonvuln.c:1:1, line:70:1> line:1:5 audit_add_tree_rule 'int (struct audit_krule *)'
| |-ParmVarDecl 0x124928648 <col:25, col:45> col:45 used rule 'struct audit_krule *'
| `-CompoundStmt 0x124947090 <line:2:1, line:70:1>
|   |-DeclStmt 0x125008530 <line:3:2, col:45>
|   | |-RecordDecl 0x125008250 <col:2, col:9> col:9 struct audit_tree
|   | |-VarDecl 0x1250083b8 <col:2, col:34> col:21 used seed 'struct audit_tree *' cinit
|   | | `-RecoveryExpr 0x125008458 <col:28, col:34> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x125008420 <col:28> 'struct audit_krule *' lvalue ParmVar 0x124928648 'rule' 'struct audit_krule *'
|   | `-VarDecl 0x1250084a8 <col:2, col:41> col:41 used tree 'struct audit_tree *'
|   |-DeclStmt 0x1250086c8 <line:4:2, col:18>
|   | |-RecordDecl 0x125008548 <col:2, col:9> col:9 struct path
|   | `-VarDecl 0x125008648 <col:2, col:14> col:14 invalid path 'struct path'
|   |-DeclStmt 0x125008960 <line:5:2, col:26>
|   | |-RecordDecl 0x1250086e0 <col:2, col:9> col:9 struct vfsmount
|   | |-VarDecl 0x125008848 <col:2, col:19> col:19 used mnt 'struct vfsmount *'
|   | `-VarDecl 0x1250088d8 <col:2, col:25> col:25 used p 'struct vfsmount *'
|   |-DeclStmt 0x125008af8 <line:6:2, col:23>
|   | |-RecordDecl 0x125008978 <col:2, col:9> col:9 struct list_head
|   | `-VarDecl 0x125008a78 <col:2, col:19> col:19 invalid list 'struct list_head'
|   |-DeclStmt 0x125008b90 <line:7:2, col:9>
|   | `-VarDecl 0x125008b28 <col:2, col:6> col:6 used err 'int'
|   |-CallExpr 0x125008dd0 <line:9:2, col:44> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x125008cd0 <col:2> 'int ()' Function 0x125008c18 'list_for_each_entry' 'int ()'
|   | |-DeclRefExpr 0x125008cf0 <col:22> 'struct audit_tree *' lvalue Var 0x1250084a8 'tree' 'struct audit_tree *'
|   | |-UnaryOperator 0x125008db8 <col:28, col:29> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | | `-RecoveryExpr 0x125008d98 <col:29> '<dependent type>' contains-errors lvalue
|   | `-RecoveryExpr 0x125008d40 <col:40> '<dependent type>' contains-errors lvalue
|   |-CompoundStmt 0x12500a2c8 <col:46, line:16:2>
|   | `-IfStmt 0x12500a2a8 <line:10:3, line:15:3>
|   |   |-UnaryOperator 0x125009170 <line:10:7, col:45> '<dependent type>' contains-errors prefix '!' cannot overflow
|   |   | `-CallExpr 0x125009140 <col:8, col:45> '<dependent type>' contains-errors
|   |   |   |-DeclRefExpr 0x125009030 <col:8> 'int (const char *, const char *)' Function 0x125008e50 'strcmp' 'int (const char *, const char *)'
|   |   |   |-RecoveryExpr 0x125009088 <col:15, col:21> '<dependent type>' contains-errors lvalue
|   |   |   | `-DeclRefExpr 0x125009050 <col:15> 'struct audit_tree *' contains-errors lvalue Var 0x1250083b8 'seed' 'struct audit_tree *'
|   |   |   `-RecoveryExpr 0x1250090e8 <col:31, col:37> '<dependent type>' contains-errors lvalue
|   |   |     `-DeclRefExpr 0x1250090b0 <col:31> 'struct audit_tree *' lvalue Var 0x1250084a8 'tree' 'struct audit_tree *'
|   |   `-CompoundStmt 0x12500a278 <col:48, line:15:3>
|   |     |-CallExpr 0x125009f48 <line:11:4, col:17> 'int' contains-errors
|   |     | |-ImplicitCastExpr 0x125009f30 <col:4> 'int (*)()' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x125009eb8 <col:4> 'int ()' Function 0x125009e00 'put_tree' 'int ()'
|   |     | `-ImplicitCastExpr 0x125009f70 <col:13> 'struct audit_tree *' contains-errors <LValueToRValue>
|   |     |   `-DeclRefExpr 0x125009ed8 <col:13> 'struct audit_tree *' contains-errors lvalue Var 0x1250083b8 'seed' 'struct audit_tree *'
|   |     |-BinaryOperator 0x12500a008 <line:12:4, col:17> '<dependent type>' contains-errors '='
|   |     | |-RecoveryExpr 0x125009fc0 <col:4, col:10> '<dependent type>' contains-errors lvalue
|   |     | | `-DeclRefExpr 0x125009f88 <col:4> 'struct audit_krule *' lvalue ParmVar 0x124928648 'rule' 'struct audit_krule *'
|   |     | `-DeclRefExpr 0x125009fe8 <col:17> 'struct audit_tree *' lvalue Var 0x1250084a8 'tree' 'struct audit_tree *'
|   |     |-CallExpr 0x12500a218 <line:13:4, col:39> '<dependent type>' contains-errors
|   |     | |-DeclRefExpr 0x12500a108 <col:4> 'int ()' Function 0x12500a050 'list_add' 'int ()'
|   |     | |-UnaryOperator 0x12500a188 <col:13, col:20> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |     | | `-RecoveryExpr 0x12500a160 <col:14, col:20> '<dependent type>' contains-errors lvalue
|   |     | |   `-DeclRefExpr 0x12500a128 <col:14> 'struct audit_krule *' lvalue ParmVar 0x124928648 'rule' 'struct audit_krule *'
|   |     | `-UnaryOperator 0x12500a200 <col:27, col:34> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |     |   `-RecoveryExpr 0x12500a1d8 <col:28, col:34> '<dependent type>' contains-errors lvalue
|   |     |     `-DeclRefExpr 0x12500a1a0 <col:28> 'struct audit_tree *' lvalue Var 0x1250084a8 'tree' 'struct audit_tree *'
|   |     `-ReturnStmt 0x12500a268 <line:14:4, col:11>
|   |       `-IntegerLiteral 0x12500a248 <col:11> 'int' 0
|   |-BinaryOperator 0x12500a338 <line:17:2, col:9> 'struct audit_tree *' contains-errors '='
|   | |-DeclRefExpr 0x12500a2e0 <col:2> 'struct audit_tree *' lvalue Var 0x1250084a8 'tree' 'struct audit_tree *'
|   | `-ImplicitCastExpr 0x12500a320 <col:9> 'struct audit_tree *' contains-errors <LValueToRValue>
|   |   `-DeclRefExpr 0x12500a300 <col:9> 'struct audit_tree *' contains-errors lvalue Var 0x1250083b8 'seed' 'struct audit_tree *'
|   |-CallExpr 0x12500a488 <line:18:2, col:34> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x12500a358 <col:2> 'int ()' Function 0x12500a050 'list_add' 'int ()'
|   | |-UnaryOperator 0x12500a3d8 <col:11, col:18> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | | `-RecoveryExpr 0x12500a3b0 <col:12, col:18> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x12500a378 <col:12> 'struct audit_tree *' lvalue Var 0x1250084a8 'tree' 'struct audit_tree *'
|   | `-UnaryOperator 0x12500a470 <col:24, col:25> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   `-RecoveryExpr 0x12500a450 <col:25> '<dependent type>' contains-errors lvalue
|   |-CallExpr 0x12500a5c8 <line:19:2, col:37> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x12500a4b8 <col:2> 'int ()' Function 0x12500a050 'list_add' 'int ()'
|   | |-UnaryOperator 0x12500a538 <col:11, col:18> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | | `-RecoveryExpr 0x12500a510 <col:12, col:18> '<dependent type>' contains-errors lvalue
|   | |   `-DeclRefExpr 0x12500a4d8 <col:12> 'struct audit_krule *' lvalue ParmVar 0x124928648 'rule' 'struct audit_krule *'
|   | `-UnaryOperator 0x12500a5b0 <col:25, col:32> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   `-RecoveryExpr 0x12500a588 <col:26, col:32> '<dependent type>' contains-errors lvalue
|   |     `-DeclRefExpr 0x12500a550 <col:26> 'struct audit_tree *' lvalue Var 0x1250084a8 'tree' 'struct audit_tree *'
|   |-BinaryOperator 0x12500a908 <line:23:2, col:42> 'int' contains-errors '='
|   | |-DeclRefExpr 0x12500a6f8 <col:2> 'int' lvalue Var 0x125008b28 'err' 'int'
|   | `-CallExpr 0x12500a8d0 <col:8, col:42> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x12500a7f8 <col:8> 'int ()' Function 0x12500a740 'kern_path' 'int ()'
|   |   |-RecoveryExpr 0x12500a850 <col:18, col:24> '<dependent type>' contains-errors lvalue
|   |   | `-DeclRefExpr 0x12500a818 <col:18> 'struct audit_tree *' lvalue Var 0x1250084a8 'tree' 'struct audit_tree *'
|   |   |-IntegerLiteral 0x12500a878 <col:34> 'int' 0
|   |   `-UnaryOperator 0x12500a8b8 <col:37, col:38> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |     `-RecoveryExpr 0x12500a898 <col:38> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x12500a9c8 <line:24:2, line:25:8>
|   | |-ImplicitCastExpr 0x12500a948 <line:24:6> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x12500a928 <col:6> 'int' lvalue Var 0x125008b28 'err' 'int'
|   | `-GotoStmt 0x12500a9b0 <line:25:3, col:8> 'Err' 0x12500a960
|   |-BinaryOperator 0x12500ac08 <line:26:2, col:44> 'struct vfsmount *' contains-errors '='
|   | |-DeclRefExpr 0x12500a9e8 <col:2> 'struct vfsmount *' lvalue Var 0x125008848 'mnt' 'struct vfsmount *'
|   | `-CallExpr 0x12500abd8 <col:8, col:44> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x12500aae8 <col:8> 'int ()' Function 0x12500aa30 'collect_mounts' 'int ()'
|   |   |-CXXDependentScopeMemberExpr 0x12500ab28 <col:23, col:28> '<dependent type>' contains-errors lvalue .mnt
|   |   | `-RecoveryExpr 0x12500ab08 <col:23> '<dependent type>' contains-errors lvalue
|   |   `-CXXDependentScopeMemberExpr 0x12500ab90 <col:33, col:38> '<dependent type>' contains-errors lvalue .dentry
|   |     `-RecoveryExpr 0x12500ab70 <col:33> '<dependent type>' contains-errors lvalue
|   |-CallExpr 0x12500ad60 <line:27:2, col:16> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x12500ad08 <col:2> 'int ()' Function 0x12500ac50 'path_put' 'int ()'
|   | `-UnaryOperator 0x12500ad48 <col:11, col:12> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   `-RecoveryExpr 0x12500ad28 <col:12> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x124945a30 <line:28:2, line:31:2>
|   | |-UnaryOperator 0x12500adc0 <line:28:6, col:7> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x12500ada8 <col:7> 'struct vfsmount *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x12500ad88 <col:7> 'struct vfsmount *' lvalue Var 0x125008848 'mnt' 'struct vfsmount *'
|   | `-CompoundStmt 0x124945a18 <col:12, line:31:2>
|   |   `-GotoStmt 0x124945a00 <line:30:3, col:8> 'Err' 0x12500a960
|   |-CallExpr 0x124945c00 <line:32:2, col:37> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x124945b30 <col:2> 'int ()' Function 0x124945a78 'list_add_tail' 'int ()'
|   | |-UnaryOperator 0x124945b70 <col:16, col:17> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | | `-RecoveryExpr 0x124945b50 <col:17> '<dependent type>' contains-errors lvalue
|   | `-UnaryOperator 0x124945be8 <col:23, col:29> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   `-RecoveryExpr 0x124945bc0 <col:24, col:29> '<dependent type>' contains-errors lvalue
|   |     `-DeclRefExpr 0x124945b88 <col:24> 'struct vfsmount *' lvalue Var 0x125008848 'mnt' 'struct vfsmount *'
|   |-CallExpr 0x124945d68 <line:34:2, col:15> 'int'
|   | |-ImplicitCastExpr 0x124945d50 <col:2> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x124945d10 <col:2> 'int ()' Function 0x124945c58 'get_tree' 'int ()'
|   | `-ImplicitCastExpr 0x124945d90 <col:11> 'struct audit_tree *' <LValueToRValue>
|   |   `-DeclRefExpr 0x124945d30 <col:11> 'struct audit_tree *' lvalue Var 0x1250084a8 'tree' 'struct audit_tree *'
|   |-CallExpr 0x124945f58 <line:42:2, col:27> 'int'
|   | |-ImplicitCastExpr 0x124945f40 <col:2> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x124945f00 <col:2> 'int ()' Function 0x124945e48 'drop_collected_mounts' 'int ()'
|   | `-ImplicitCastExpr 0x124945f80 <col:24> 'struct vfsmount *' <LValueToRValue>
|   |   `-DeclRefExpr 0x124945f20 <col:24> 'struct vfsmount *' lvalue Var 0x125008848 'mnt' 'struct vfsmount *'
|   |-IfStmt 0x124946800 <line:44:2, line:53:2> has_else
|   | |-UnaryOperator 0x124945fd0 <line:44:6, col:7> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x124945fb8 <col:7> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x124945f98 <col:7> 'int' lvalue Var 0x125008b28 'err' 'int'
|   | |-CompoundStmt 0x124946628 <col:12, line:50:2>
|   | | |-DeclStmt 0x1249461d8 <line:45:3, col:20>
|   | | | |-RecordDecl 0x124945fe8 <col:3, col:10> col:10 struct node
|   | | | `-VarDecl 0x124946158 <col:3, col:16> col:16 used node 'struct node *'
|   | | |-CallExpr 0x1249463c8 <line:47:3, col:48> '<dependent type>' contains-errors
|   | | | |-DeclRefExpr 0x1249462f0 <col:3> 'int ()' Function 0x125008c18 'list_for_each_entry' 'int ()'
|   | | | |-DeclRefExpr 0x124946310 <col:23> 'struct node *' lvalue Var 0x124946158 'node' 'struct node *'
|   | | | |-UnaryOperator 0x124946390 <col:29, col:36> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | | | | `-RecoveryExpr 0x124946368 <col:30, col:36> '<dependent type>' contains-errors lvalue
|   | | | |   `-DeclRefExpr 0x124946330 <col:30> 'struct audit_tree *' lvalue Var 0x1250084a8 'tree' 'struct audit_tree *'
|   | | | `-RecoveryExpr 0x1249463a8 <col:44> '<dependent type>' contains-errors lvalue
|   | | `-CompoundAssignOperator 0x1249464f8 <line:48:4, col:27> '<dependent type>' contains-errors '&=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   | |   |-RecoveryExpr 0x124946438 <col:4, col:10> '<dependent type>' contains-errors lvalue
|   | |   | `-DeclRefExpr 0x124946400 <col:4> 'struct node *' lvalue Var 0x124946158 'node' 'struct node *'
|   | |   `-UnaryOperator 0x1249464e0 <col:19, col:27> 'unsigned int' prefix '~' cannot overflow
|   | |     `-ParenExpr 0x1249464c0 <col:20, col:27> 'unsigned int'
|   | |       `-BinaryOperator 0x1249464a0 <col:21, col:25> 'unsigned int' '<<'
|   | |         |-IntegerLiteral 0x124946460 <col:21> 'unsigned int' 1
|   | |         `-IntegerLiteral 0x124946480 <col:25> 'int' 31
|   | `-CompoundStmt 0x1249467e0 <line:50:9, line:53:2>
|   |   |-CallExpr 0x124946788 <line:51:3, col:19> 'int'
|   |   | |-ImplicitCastExpr 0x124946770 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x124946730 <col:3> 'int ()' Function 0x124946678 'trim_marked' 'int ()'
|   |   | `-ImplicitCastExpr 0x1249467b0 <col:15> 'struct audit_tree *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x124946750 <col:15> 'struct audit_tree *' lvalue Var 0x1250084a8 'tree' 'struct audit_tree *'
|   |   `-GotoStmt 0x1249467c8 <line:52:3, col:8> 'Err' 0x12500a960
|   |-IfStmt 0x124946b80 <line:56:2, line:59:2>
|   | |-CallExpr 0x124946aa8 <line:56:6, col:29> '<dependent type>' contains-errors
|   | | |-DeclRefExpr 0x124946a10 <col:6> 'int ()' Function 0x124946958 'list_empty' 'int ()'
|   | | `-UnaryOperator 0x124946a90 <col:17, col:24> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | |   `-RecoveryExpr 0x124946a68 <col:18, col:24> '<dependent type>' contains-errors lvalue
|   | |     `-DeclRefExpr 0x124946a30 <col:18> 'struct audit_krule *' lvalue ParmVar 0x124928648 'rule' 'struct audit_krule *'
|   | `-CompoundStmt 0x124946b68 <col:32, line:59:2>
|   |   `-CallExpr 0x124946b28 <line:57:3, col:16> 'int'
|   |     |-ImplicitCastExpr 0x124946b10 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x124946ad0 <col:3> 'int ()' Function 0x125009e00 'put_tree' 'int ()'
|   |     `-ImplicitCastExpr 0x124946b50 <col:12> 'struct audit_tree *' <LValueToRValue>
|   |       `-DeclRefExpr 0x124946af0 <col:12> 'struct audit_tree *' lvalue Var 0x1250084a8 'tree' 'struct audit_tree *'
|   |-BinaryOperator 0x124946c20 <line:60:2, col:15> '<dependent type>' contains-errors '='
|   | |-RecoveryExpr 0x124946bd8 <col:2, col:8> '<dependent type>' contains-errors lvalue
|   | | `-DeclRefExpr 0x124946ba0 <col:2> 'struct audit_krule *' lvalue ParmVar 0x124928648 'rule' 'struct audit_krule *'
|   | `-DeclRefExpr 0x124946c00 <col:15> 'struct audit_tree *' lvalue Var 0x1250084a8 'tree' 'struct audit_tree *'
|   |-CallExpr 0x124946c98 <line:61:2, col:15> 'int'
|   | |-ImplicitCastExpr 0x124946c80 <col:2> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x124946c40 <col:2> 'int ()' Function 0x125009e00 'put_tree' 'int ()'
|   | `-ImplicitCastExpr 0x124946cc0 <col:11> 'struct audit_tree *' <LValueToRValue>
|   |   `-DeclRefExpr 0x124946c60 <col:11> 'struct audit_tree *' lvalue Var 0x1250084a8 'tree' 'struct audit_tree *'
|   |-ReturnStmt 0x124946cf8 <line:63:2, col:9>
|   | `-IntegerLiteral 0x124946cd8 <col:9> 'int' 0
|   |-LabelStmt 0x124946d30 <line:64:1, col:4> 'Err'
|   | `-NullStmt 0x124946d28 <col:4>
|   |-CallExpr 0x124946ec8 <line:66:2, col:27> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x124946e30 <col:2> 'int ()' Function 0x124946d78 'list_del_init' 'int ()'
|   | `-UnaryOperator 0x124946eb0 <col:16, col:23> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   `-RecoveryExpr 0x124946e88 <col:17, col:23> '<dependent type>' contains-errors lvalue
|   |     `-DeclRefExpr 0x124946e50 <col:17> 'struct audit_tree *' lvalue Var 0x1250084a8 'tree' 'struct audit_tree *'
|   |-CallExpr 0x124946f88 <line:67:2, col:28> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x124946ef0 <col:2> 'int ()' Function 0x124946d78 'list_del_init' 'int ()'
|   | `-UnaryOperator 0x124946f70 <col:16, col:23> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   `-RecoveryExpr 0x124946f48 <col:17, col:23> '<dependent type>' contains-errors lvalue
|   |     `-DeclRefExpr 0x124946f10 <col:17> 'struct audit_tree *' lvalue Var 0x1250084a8 'tree' 'struct audit_tree *'
|   |-CallExpr 0x124947008 <line:68:2, col:15> 'int'
|   | |-ImplicitCastExpr 0x124946ff0 <col:2> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x124946fb0 <col:2> 'int ()' Function 0x125009e00 'put_tree' 'int ()'
|   | `-ImplicitCastExpr 0x124947030 <col:11> 'struct audit_tree *' <LValueToRValue>
|   |   `-DeclRefExpr 0x124946fd0 <col:11> 'struct audit_tree *' lvalue Var 0x1250084a8 'tree' 'struct audit_tree *'
|   `-ReturnStmt 0x124947080 <line:69:2, col:9>
|     `-ImplicitCastExpr 0x124947068 <col:9> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x124947048 <col:9> 'int' lvalue Var 0x125008b28 'err' 'int'
`-FunctionDecl 0x125008e50 <line:10:8> col:8 implicit used strcmp 'int (const char *, const char *)' extern
  |-ParmVarDecl 0x125008f50 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x125008fb8 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x125008ef8 <<invalid sloc>> Implicit 887
