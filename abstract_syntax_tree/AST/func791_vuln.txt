TranslationUnitDecl 0x133055008 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x133055eb8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1330555d0 '__int128'
|-TypedefDecl 0x133055f28 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1330555f0 'unsigned __int128'
|-TypedefDecl 0x133126630 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x133126400 'struct __NSConstantString_tag'
|   `-Record 0x133055f80 '__NSConstantString_tag'
|-TypedefDecl 0x133126698 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x133055790 '__SVInt8_t'
|-TypedefDecl 0x133126700 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x1330557b0 '__SVInt16_t'
|-TypedefDecl 0x133126768 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x1330557d0 '__SVInt32_t'
|-TypedefDecl 0x1331267d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x1330557f0 '__SVInt64_t'
|-TypedefDecl 0x133126838 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x133055810 '__SVUint8_t'
|-TypedefDecl 0x1331268a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x133055830 '__SVUint16_t'
|-TypedefDecl 0x133126908 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x133055850 '__SVUint32_t'
|-TypedefDecl 0x133126970 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x133055870 '__SVUint64_t'
|-TypedefDecl 0x1331269d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x133055890 '__SVFloat16_t'
|-TypedefDecl 0x133126a40 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x1330558b0 '__SVFloat32_t'
|-TypedefDecl 0x133126aa8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x1330558d0 '__SVFloat64_t'
|-TypedefDecl 0x133126b10 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x1330558f0 '__SVBfloat16_t'
|-TypedefDecl 0x133126b78 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x133055910 '__clang_svint8x2_t'
|-TypedefDecl 0x133126be0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x133055930 '__clang_svint16x2_t'
|-TypedefDecl 0x133126c48 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x133055950 '__clang_svint32x2_t'
|-TypedefDecl 0x133126cb0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x133055970 '__clang_svint64x2_t'
|-TypedefDecl 0x133126d18 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x133055990 '__clang_svuint8x2_t'
|-TypedefDecl 0x133126d80 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x1330559b0 '__clang_svuint16x2_t'
|-TypedefDecl 0x133126de8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x1330559d0 '__clang_svuint32x2_t'
|-TypedefDecl 0x133126e50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x1330559f0 '__clang_svuint64x2_t'
|-TypedefDecl 0x133126eb8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x133055a10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x133126f20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x133055a30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x133126f88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x133055a50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x133126ff0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x133055a70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x133127058 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x133055a90 '__clang_svint8x3_t'
|-TypedefDecl 0x1331270c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x133055ab0 '__clang_svint16x3_t'
|-TypedefDecl 0x133127128 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x133055ad0 '__clang_svint32x3_t'
|-TypedefDecl 0x133127190 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x133055af0 '__clang_svint64x3_t'
|-TypedefDecl 0x1331271f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x133055b10 '__clang_svuint8x3_t'
|-TypedefDecl 0x133127260 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x133055b30 '__clang_svuint16x3_t'
|-TypedefDecl 0x1331272c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x133055b50 '__clang_svuint32x3_t'
|-TypedefDecl 0x133127330 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x133055b70 '__clang_svuint64x3_t'
|-TypedefDecl 0x133127398 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x133055b90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x133127c00 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x133055bb0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x133127c68 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x133055bd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x133127cd0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x133055bf0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x133127d38 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x133055c10 '__clang_svint8x4_t'
|-TypedefDecl 0x133127da0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x133055c30 '__clang_svint16x4_t'
|-TypedefDecl 0x133127e08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x133055c50 '__clang_svint32x4_t'
|-TypedefDecl 0x133127e70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x133055c70 '__clang_svint64x4_t'
|-TypedefDecl 0x133127ed8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x133055c90 '__clang_svuint8x4_t'
|-TypedefDecl 0x133127f40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x133055cb0 '__clang_svuint16x4_t'
|-TypedefDecl 0x133127fa8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x133055cd0 '__clang_svuint32x4_t'
|-TypedefDecl 0x133128010 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x133055cf0 '__clang_svuint64x4_t'
|-TypedefDecl 0x133128078 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x133055d10 '__clang_svfloat16x4_t'
|-TypedefDecl 0x1331280e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x133055d30 '__clang_svfloat32x4_t'
|-TypedefDecl 0x133128148 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x133055d50 '__clang_svfloat64x4_t'
|-TypedefDecl 0x1331281b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x133055d70 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x133128218 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x133055d90 '__SVBool_t'
|-TypedefDecl 0x133128280 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x133055db0 '__clang_svboolx2_t'
|-TypedefDecl 0x1331282e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x133055dd0 '__clang_svboolx4_t'
|-TypedefDecl 0x133128350 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x133055df0 '__SVCount_t'
|-TypedefDecl 0x1331283f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1331283b0 'char *'
|   `-BuiltinType 0x1330550b0 'char'
|-TypedefDecl 0x133128468 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1331283b0 'char *'
|   `-BuiltinType 0x1330550b0 'char'
|-FunctionDecl 0x133128988 <dataset_diviso_filec/func791_vuln.c:1:1, line:85:1> line:1:12 invalid verify_ca 'int (const int *, unsigned int, int, int, int, int *, unsigned int *)' static
| |-ParmVarDecl 0x1331284f0 <col:22, col:44> col:44 invalid raw_crt 'const int *'
| |-ParmVarDecl 0x133128570 <col:53, col:62> col:62 used raw_crt_size 'unsigned int'
| |-ParmVarDecl 0x1331285f0 <line:2:7, col:33> col:33 invalid crt_type 'int'
| |-ParmVarDecl 0x133128670 <line:3:7, col:24> col:24 invalid ctype 'int'
| |-ParmVarDecl 0x1331286f0 <line:4:7, col:25> col:25 invalid match 'int'
| |-ParmVarDecl 0x1331287a8 <col:32, col:49> col:49 invalid data 'int *'
| |-ParmVarDecl 0x133128858 <line:5:7, col:21> col:21 used verify 'unsigned int *'
| `-CompoundStmt 0x133144d98 <line:6:1, line:85:1>
|   |-DeclStmt 0x133128ae8 <line:8:1, col:8>
|   | `-VarDecl 0x133128a80 <col:1, col:5> col:5 used ret 'int'
|   |-DeclStmt 0x133128b80 <line:9:1, col:21>
|   | `-VarDecl 0x133128b18 <col:1, col:14> col:14 used vstatus 'unsigned int'
|   |-IfStmt 0x133141e48 <line:12:2, line:13:50>
|   | |-BinaryOperator 0x133141c18 <line:12:6, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x133128bd8 <col:6> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x133128b98 <col:6> 'unsigned int' lvalue ParmVar 0x133128570 'raw_crt_size' 'unsigned int'
|   | | `-ImplicitCastExpr 0x133141c00 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x133128bb8 <col:21> 'int' 2
|   | `-ReturnStmt 0x133141e38 <line:13:3, col:50>
|   |   `-CallExpr 0x133141e10 <col:10, col:50> '<dependent type>' contains-errors
|   |     |-DeclRefExpr 0x133141d90 <col:10> 'int ()' Function 0x133141cd8 'gnutls_assert_val' 'int ()'
|   |     `-RecoveryExpr 0x133141df0 <col:28> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x133143b70 <line:15:2, line:36:2> has_else
|   | |-BinaryOperator 0x133141fb8 <line:15:6, col:45> 'int' contains-errors '&&'
|   | | |-BinaryOperator 0x133141f58 <col:6, col:15> 'int' contains-errors '=='
|   | | | |-RecoveryExpr 0x133141e68 <col:6> '<dependent type>' contains-errors lvalue
|   | | | `-RecoveryExpr 0x133141f38 <col:15> '<dependent type>' contains-errors lvalue
|   | | `-BinaryOperator 0x133141f98 <col:33, col:45> 'int' contains-errors '=='
|   | |   |-RecoveryExpr 0x133141ec0 <col:33> '<dependent type>' contains-errors lvalue
|   | |   `-RecoveryExpr 0x133141f78 <col:45> '<dependent type>' contains-errors lvalue
|   | |-CompoundStmt 0x1331424f0 <col:62, line:22:2>
|   | | `-IfStmt 0x1331424d0 <line:17:3, line:20:17>
|   | |   |-UnaryOperator 0x1331421e0 <line:17:7, col:40> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | |   | `-CallExpr 0x1331421a8 <col:8, col:40> '<dependent type>' contains-errors
|   | |   |   |-DeclRefExpr 0x1331420b8 <col:8> 'int ()' Function 0x133142000 'matches' 'int ()'
|   | |   |   |-UnaryOperator 0x133142150 <col:16, col:26> '<dependent type>' contains-errors prefix '&' cannot overflow
|   | |   |   | `-ArraySubscriptExpr 0x133142130 <col:17, col:26> '<dependent type>' contains-errors lvalue
|   | |   |   |   |-ImplicitCastExpr 0x133142118 <col:17> '<dependent type>' contains-errors <LValueToRValue>
|   | |   |   |   | `-RecoveryExpr 0x1331420d8 <col:17> '<dependent type>' contains-errors lvalue
|   | |   |   |   `-IntegerLiteral 0x1331420f8 <col:25> 'int' 1
|   | |   |   |-RecoveryExpr 0x133142168 <col:29> '<dependent type>' contains-errors lvalue
|   | |   |   `-RecoveryExpr 0x133142188 <col:35> '<dependent type>' contains-errors lvalue
|   | |   `-CompoundStmt 0x1331424b0 <col:43, line:20:17>
|   | |     |-CallExpr 0x133142348 <line:18:11, col:25> 'int'
|   | |     | `-ImplicitCastExpr 0x133142330 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   | |     |   `-DeclRefExpr 0x1331422d8 <col:11> 'int ()' Function 0x133142220 'gnutls_assert' 'int ()'
|   | |     `-CompoundAssignOperator 0x133142480 <line:19:4, col:15> 'unsigned int' contains-errors '|=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
|   | |       |-UnaryOperator 0x133142448 <col:4, col:5> 'unsigned int' lvalue prefix '*' cannot overflow
|   | |       | `-ImplicitCastExpr 0x133142430 <col:5> 'unsigned int *' <LValueToRValue>
|   | |       |   `-DeclRefExpr 0x133142368 <col:5> 'unsigned int *' lvalue ParmVar 0x133128858 'verify' 'unsigned int *'
|   | |       `-RecoveryExpr 0x133142460 <col:15> '<dependent type>' contains-errors lvalue
|   | `-IfStmt 0x133143b40 <line:22:9, line:36:2> has_else
|   |   |-BinaryOperator 0x133142658 <line:22:13, col:50> 'int' contains-errors '&&'
|   |   | |-BinaryOperator 0x1331425f8 <col:13, col:22> 'int' contains-errors '=='
|   |   | | |-RecoveryExpr 0x133142508 <col:13> '<dependent type>' contains-errors lvalue
|   |   | | `-RecoveryExpr 0x1331425d8 <col:22> '<dependent type>' contains-errors lvalue
|   |   | `-BinaryOperator 0x133142638 <col:38, col:50> 'int' contains-errors '=='
|   |   |   |-RecoveryExpr 0x133142560 <col:38> '<dependent type>' contains-errors lvalue
|   |   |   `-RecoveryExpr 0x133142618 <col:50> '<dependent type>' contains-errors lvalue
|   |   |-CompoundStmt 0x133143aa8 <col:67, line:33:2>
|   |   | |-BinaryOperator 0x1331429b0 <line:23:3, col:43> 'int' contains-errors '='
|   |   | | |-DeclRefExpr 0x133142678 <col:3> 'int' lvalue Var 0x133128a80 'ret' 'int'
|   |   | | `-CallExpr 0x133142980 <col:9, col:43> '<dependent type>' contains-errors
|   |   | |   |-DeclRefExpr 0x133142778 <col:9> 'int ()' Function 0x1331426c0 'crt_to_pubkey' 'int ()'
|   |   | |   |-UnaryOperator 0x133142930 <col:23, col:33> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   | |   | `-ArraySubscriptExpr 0x133142910 <col:24, col:33> '<dependent type>' contains-errors lvalue
|   |   | |   |   |-ImplicitCastExpr 0x1331428f8 <col:24> '<dependent type>' contains-errors <LValueToRValue>
|   |   | |   |   | `-RecoveryExpr 0x133142798 <col:24> '<dependent type>' contains-errors lvalue
|   |   | |   |   `-IntegerLiteral 0x1331427b8 <col:32> 'int' 1
|   |   | |   `-UnaryOperator 0x133142968 <col:36, col:37> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   | |     `-RecoveryExpr 0x133142948 <col:37> '<dependent type>' contains-errors lvalue
|   |   | |-IfStmt 0x133142b28 <line:24:3, line:27:17>
|   |   | | |-BinaryOperator 0x133142a28 <line:24:7, col:13> 'int' '<'
|   |   | | | |-ImplicitCastExpr 0x133142a10 <col:7> 'int' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x1331429d0 <col:7> 'int' lvalue Var 0x133128a80 'ret' 'int'
|   |   | | | `-IntegerLiteral 0x1331429f0 <col:13> 'int' 0
|   |   | | `-CompoundStmt 0x133142b08 <col:16, line:27:17>
|   |   | |   |-CallExpr 0x133142a80 <line:25:18, col:32> 'int'
|   |   | |   | `-ImplicitCastExpr 0x133142a68 <col:18> 'int (*)()' <FunctionToPointerDecay>
|   |   | |   |   `-DeclRefExpr 0x133142a48 <col:18> 'int ()' Function 0x133142220 'gnutls_assert' 'int ()'
|   |   | |   `-GotoStmt 0x133142af0 <line:26:4, col:9> 'cleanup' 0x133142aa0
|   |   | `-IfStmt 0x133143a88 <line:29:3, line:32:17>
|   |   |   |-RecoveryExpr 0x133142ba8 <line:29:7, col:36> '_Bool' contains-errors
|   |   |   `-CompoundStmt 0x133143a70 <col:39, line:32:17>
|   |   |     `-CallExpr 0x133143a00 <line:30:25, col:39> 'int'
|   |   |       `-ImplicitCastExpr 0x133142be8 <col:25> 'int (*)()' <FunctionToPointerDecay>
|   |   |         `-DeclRefExpr 0x133142bc8 <col:25> 'int ()' Function 0x133142220 'gnutls_assert' 'int ()'
|   |   `-CompoundStmt 0x133143b28 <line:33:9, line:36:2>
|   |     `-GotoStmt 0x133143b10 <line:35:3, col:8> 'cleanup' 0x133142aa0
|   |-IfStmt 0x133143da8 <line:40:4, line:43:2>
|   | |-BinaryOperator 0x133143d18 <line:40:8, col:14> 'int' '<'
|   | | |-ImplicitCastExpr 0x133143d00 <col:8> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x133143cc0 <col:8> 'int' lvalue Var 0x133128a80 'ret' 'int'
|   | | `-IntegerLiteral 0x133143ce0 <col:14> 'int' 0
|   | `-CompoundStmt 0x133143d90 <col:17, line:43:2>
|   |   `-GotoStmt 0x133143d78 <line:42:7, col:12> 'cleanup' 0x133142aa0
|   |-IfStmt 0x133143ef0 <line:46:4, line:49:2>
|   | |-BinaryOperator 0x133143e60 <line:46:8, col:14> 'int' '<'
|   | | |-ImplicitCastExpr 0x133143e48 <col:8> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x133143e08 <col:8> 'int' lvalue Var 0x133128a80 'ret' 'int'
|   | | `-IntegerLiteral 0x133143e28 <col:14> 'int' 0
|   | `-CompoundStmt 0x133143ed8 <col:17, line:49:2>
|   |   `-GotoStmt 0x133143ec0 <line:48:7, col:12> 'cleanup' 0x133142aa0
|   |-IfStmt 0x1331441a8 <line:52:4, line:55:2>
|   | |-BinaryOperator 0x133144118 <line:52:8, col:14> 'int' '<'
|   | | |-ImplicitCastExpr 0x133144100 <col:8> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1331440c0 <col:8> 'int' lvalue Var 0x133128a80 'ret' 'int'
|   | | `-IntegerLiteral 0x1331440e0 <col:14> 'int' 0
|   | `-CompoundStmt 0x133144190 <col:17, line:55:2>
|   |   `-GotoStmt 0x133144178 <line:54:7, col:12> 'cleanup' 0x133142aa0
|   |-IfStmt 0x133144380 <line:58:4, line:61:2>
|   | |-BinaryOperator 0x1331442f0 <line:58:8, col:14> 'int' '<'
|   | | |-ImplicitCastExpr 0x1331442d8 <col:8> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x133144298 <col:8> 'int' lvalue Var 0x133128a80 'ret' 'int'
|   | | `-IntegerLiteral 0x1331442b8 <col:14> 'int' 0
|   | `-CompoundStmt 0x133144368 <col:17, line:61:2>
|   |   `-GotoStmt 0x133144350 <line:60:7, col:12> 'cleanup' 0x133142aa0
|   |-IfStmt 0x1331445f8 <line:64:2, line:67:2>
|   | |-BinaryOperator 0x133144518 <line:64:6, col:13> 'int' '=='
|   | | |-ImplicitCastExpr 0x133144500 <col:6> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1331444c0 <col:6> 'int' lvalue Var 0x133128a80 'ret' 'int'
|   | | `-IntegerLiteral 0x1331444e0 <col:13> 'int' 0
|   | `-CompoundStmt 0x1331445e0 <col:16, line:67:2>
|   |   `-CallExpr 0x133144570 <line:65:3, col:17> 'int'
|   |     `-ImplicitCastExpr 0x133144558 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x133144538 <col:3> 'int ()' Function 0x133142220 'gnutls_assert' 'int ()'
|   |-IfStmt 0x133144898 <line:70:2, line:73:2>
|   | |-BinaryOperator 0x133144808 <line:70:6, col:12> 'int' '<'
|   | | |-ImplicitCastExpr 0x1331447f0 <col:6> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1331447b0 <col:6> 'int' lvalue Var 0x133128a80 'ret' 'int'
|   | | `-IntegerLiteral 0x1331447d0 <col:12> 'int' 0
|   | `-CompoundStmt 0x133144880 <col:15, line:73:2>
|   |   `-GotoStmt 0x133144868 <line:72:7, col:12> 'cleanup' 0x133142aa0
|   |-BinaryOperator 0x1331449d8 <line:77:2, col:8> 'int' '='
|   | |-DeclRefExpr 0x133144998 <col:2> 'int' lvalue Var 0x133128a80 'ret' 'int'
|   | `-IntegerLiteral 0x1331449b8 <col:8> 'int' 0
|   |-LabelStmt 0x133144bd0 <line:78:1, col:8> 'cleanup'
|   | `-NullStmt 0x133144bc8 <col:8>
|   `-ReturnStmt 0x133144d88 <line:84:2, col:9>
|     `-ImplicitCastExpr 0x133144d70 <col:9> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x133144d50 <col:9> 'int' lvalue Var 0x133128a80 'ret' 'int'
`-FunctionDecl 0x133144a38 <line:79:2> col:2 implicit used free 'void (void *)' extern
  |-ParmVarDecl 0x133144b38 <<invalid sloc>> <invalid sloc> 'void *'
  `-BuiltinAttr 0x133144ae0 <<invalid sloc>> Implicit 873
