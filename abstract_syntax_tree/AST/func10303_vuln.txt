TranslationUnitDecl 0x133055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1330564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x133055bd0 '__int128'
|-TypedefDecl 0x133056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x133055bf0 'unsigned __int128'
|-TypedefDecl 0x13400be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13400bc00 'struct __NSConstantString_tag'
|   `-Record 0x133056580 '__NSConstantString_tag'
|-TypedefDecl 0x13400be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x133055d90 '__SVInt8_t'
|-TypedefDecl 0x13400bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x133055db0 '__SVInt16_t'
|-TypedefDecl 0x13400bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x133055dd0 '__SVInt32_t'
|-TypedefDecl 0x13400bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x133055df0 '__SVInt64_t'
|-TypedefDecl 0x13400c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x133055e10 '__SVUint8_t'
|-TypedefDecl 0x13400c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x133055e30 '__SVUint16_t'
|-TypedefDecl 0x13400c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x133055e50 '__SVUint32_t'
|-TypedefDecl 0x13400c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x133055e70 '__SVUint64_t'
|-TypedefDecl 0x13400c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x133055e90 '__SVFloat16_t'
|-TypedefDecl 0x13400c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x133055eb0 '__SVFloat32_t'
|-TypedefDecl 0x13400c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x133055ed0 '__SVFloat64_t'
|-TypedefDecl 0x13400c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x133055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13400c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x133055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13400c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x133055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13400c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x133055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13400c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x133055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13400c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x133055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13400c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x133055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13400c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x133055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13400c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x133055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13400c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x133056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13400c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x133056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13400c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x133056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13400c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x133056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13400c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x133056090 '__clang_svint8x3_t'
|-TypedefDecl 0x13400c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1330560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13400c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1330560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13400c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1330560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13400c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x133056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13400ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x133056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13400cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x133056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13400cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x133056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13400cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x133056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13400d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1330561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13400d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1330561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13400d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1330561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13400d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x133056210 '__clang_svint8x4_t'
|-TypedefDecl 0x13400d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x133056230 '__clang_svint16x4_t'
|-TypedefDecl 0x13400d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x133056250 '__clang_svint32x4_t'
|-TypedefDecl 0x13400d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x133056270 '__clang_svint64x4_t'
|-TypedefDecl 0x13400d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x133056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13400d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1330562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13400d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1330562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13400d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1330562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13400d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x133056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13400d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x133056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13400d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x133056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13400d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x133056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13400da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x133056390 '__SVBool_t'
|-TypedefDecl 0x13400da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1330563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13400dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1330563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13400db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1330563f0 '__SVCount_t'
|-TypedefDecl 0x13400dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13400dbb0 'char *'
|   `-BuiltinType 0x1330556b0 'char'
|-TypedefDecl 0x13400dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13400dbb0 'char *'
|   `-BuiltinType 0x1330556b0 'char'
`-FunctionDecl 0x13400dee8 <dataset_diviso_filec/func10303_vuln.c:1:1, line:58:1> line:1:1 invalid xsltNumberFormatRoman 'int (int, double, int)'
  |-ParmVarDecl 0x13400dcf0 <col:23, col:36> col:36 invalid buffer 'int'
  |-ParmVarDecl 0x13400dd70 <line:2:9, col:16> col:16 used number 'double'
  |-ParmVarDecl 0x13400ddf0 <line:3:9, col:13> col:13 used is_upper 'int'
  `-CompoundStmt 0x1350085d0 <line:4:1, line:58:1>
    |-WhileStmt 0x13400e2e8 <line:6:5, line:9:5>
    | |-BinaryOperator 0x13400e000 <line:6:12, col:22> 'int' '>='
    | | |-ImplicitCastExpr 0x13400dfe8 <col:12> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x13400dfa8 <col:12> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    | | `-FloatingLiteral 0x13400dfc8 <col:22> 'double' 1.000000e+03
    | `-CompoundStmt 0x13400e2d0 <col:30, line:9:5>
    |   `-CompoundAssignOperator 0x13400e2a0 <line:8:2, col:12> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
    |     |-DeclRefExpr 0x13400e260 <col:2> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    |     `-FloatingLiteral 0x13400e280 <col:12> 'double' 1.000000e+03
    |-IfStmt 0x1340274a8 <line:10:5, line:13:5>
    | |-BinaryOperator 0x13400e360 <line:10:9, col:19> 'int' '>='
    | | |-ImplicitCastExpr 0x13400e348 <col:9> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x13400e308 <col:9> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    | | `-FloatingLiteral 0x13400e328 <col:19> 'double' 9.000000e+02
    | `-CompoundStmt 0x134027490 <col:26, line:13:5>
    |   `-CompoundAssignOperator 0x134027460 <line:12:2, col:12> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
    |     |-DeclRefExpr 0x134027420 <col:2> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    |     `-FloatingLiteral 0x134027440 <col:12> 'double' 9.000000e+02
    |-WhileStmt 0x134027668 <line:14:5, line:17:5>
    | |-BinaryOperator 0x134027520 <line:14:12, col:22> 'int' '>='
    | | |-ImplicitCastExpr 0x134027508 <col:12> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x1340274c8 <col:12> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    | | `-FloatingLiteral 0x1340274e8 <col:22> 'double' 5.000000e+02
    | `-CompoundStmt 0x134027650 <col:29, line:17:5>
    |   `-CompoundAssignOperator 0x134027620 <line:16:2, col:12> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
    |     |-DeclRefExpr 0x1340275e0 <col:2> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    |     `-FloatingLiteral 0x134027600 <col:12> 'double' 5.000000e+02
    |-IfStmt 0x134027828 <line:18:5, line:21:5>
    | |-BinaryOperator 0x1340276e0 <line:18:9, col:19> 'int' '>='
    | | |-ImplicitCastExpr 0x1340276c8 <col:9> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x134027688 <col:9> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    | | `-FloatingLiteral 0x1340276a8 <col:19> 'double' 4.000000e+02
    | `-CompoundStmt 0x134027810 <col:26, line:21:5>
    |   `-CompoundAssignOperator 0x1340277e0 <line:20:2, col:12> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
    |     |-DeclRefExpr 0x1340277a0 <col:2> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    |     `-FloatingLiteral 0x1340277c0 <col:12> 'double' 4.000000e+02
    |-WhileStmt 0x1340279e8 <line:22:5, line:25:5>
    | |-BinaryOperator 0x1340278a0 <line:22:12, col:22> 'int' '>='
    | | |-ImplicitCastExpr 0x134027888 <col:12> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x134027848 <col:12> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    | | `-FloatingLiteral 0x134027868 <col:22> 'double' 1.000000e+02
    | `-CompoundStmt 0x1340279d0 <col:29, line:25:5>
    |   `-CompoundAssignOperator 0x1340279a0 <line:24:2, col:12> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
    |     |-DeclRefExpr 0x134027960 <col:2> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    |     `-FloatingLiteral 0x134027980 <col:12> 'double' 1.000000e+02
    |-IfStmt 0x134027ba8 <line:26:5, line:29:5>
    | |-BinaryOperator 0x134027a60 <line:26:9, col:19> 'int' '>='
    | | |-ImplicitCastExpr 0x134027a48 <col:9> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x134027a08 <col:9> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    | | `-FloatingLiteral 0x134027a28 <col:19> 'double' 9.000000e+01
    | `-CompoundStmt 0x134027b90 <col:25, line:29:5>
    |   `-CompoundAssignOperator 0x134027b60 <line:28:2, col:12> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
    |     |-DeclRefExpr 0x134027b20 <col:2> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    |     `-FloatingLiteral 0x134027b40 <col:12> 'double' 9.000000e+01
    |-WhileStmt 0x134027d68 <line:30:5, line:33:5>
    | |-BinaryOperator 0x134027c20 <line:30:12, col:22> 'int' '>='
    | | |-ImplicitCastExpr 0x134027c08 <col:12> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x134027bc8 <col:12> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    | | `-FloatingLiteral 0x134027be8 <col:22> 'double' 5.000000e+01
    | `-CompoundStmt 0x134027d50 <col:28, line:33:5>
    |   `-CompoundAssignOperator 0x134027d20 <line:32:2, col:12> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
    |     |-DeclRefExpr 0x134027ce0 <col:2> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    |     `-FloatingLiteral 0x134027d00 <col:12> 'double' 5.000000e+01
    |-IfStmt 0x134027f28 <line:34:5, line:37:5>
    | |-BinaryOperator 0x134027de0 <line:34:9, col:19> 'int' '>='
    | | |-ImplicitCastExpr 0x134027dc8 <col:9> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x134027d88 <col:9> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    | | `-FloatingLiteral 0x134027da8 <col:19> 'double' 4.000000e+01
    | `-CompoundStmt 0x134027f10 <col:25, line:37:5>
    |   `-CompoundAssignOperator 0x134027ee0 <line:36:2, col:12> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
    |     |-DeclRefExpr 0x134027ea0 <col:2> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    |     `-FloatingLiteral 0x134027ec0 <col:12> 'double' 4.000000e+01
    |-WhileStmt 0x1340280e8 <line:38:5, line:41:5>
    | |-BinaryOperator 0x134027fa0 <line:38:12, col:22> 'int' '>='
    | | |-ImplicitCastExpr 0x134027f88 <col:12> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x134027f48 <col:12> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    | | `-FloatingLiteral 0x134027f68 <col:22> 'double' 1.000000e+01
    | `-CompoundStmt 0x1340280d0 <col:28, line:41:5>
    |   `-CompoundAssignOperator 0x1340280a0 <line:40:2, col:12> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
    |     |-DeclRefExpr 0x134028060 <col:2> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    |     `-FloatingLiteral 0x134028080 <col:12> 'double' 1.000000e+01
    |-IfStmt 0x1340282a8 <line:42:5, line:45:5>
    | |-BinaryOperator 0x134028160 <line:42:9, col:19> 'int' '>='
    | | |-ImplicitCastExpr 0x134028148 <col:9> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x134028108 <col:9> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    | | `-FloatingLiteral 0x134028128 <col:19> 'double' 9.000000e+00
    | `-CompoundStmt 0x134028290 <col:24, line:45:5>
    |   `-CompoundAssignOperator 0x134028260 <line:44:2, col:12> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
    |     |-DeclRefExpr 0x134028220 <col:2> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    |     `-FloatingLiteral 0x134028240 <col:12> 'double' 9.000000e+00
    |-WhileStmt 0x135008268 <line:46:5, line:49:5>
    | |-BinaryOperator 0x134028320 <line:46:12, col:22> 'int' '>='
    | | |-ImplicitCastExpr 0x134028308 <col:12> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x1340282c8 <col:12> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    | | `-FloatingLiteral 0x1340282e8 <col:22> 'double' 5.000000e+00
    | `-CompoundStmt 0x135008250 <col:27, line:49:5>
    |   `-CompoundAssignOperator 0x135008220 <line:48:2, col:12> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
    |     |-DeclRefExpr 0x1340283e0 <col:2> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    |     `-FloatingLiteral 0x135008200 <col:12> 'double' 5.000000e+00
    |-IfStmt 0x135008428 <line:50:5, line:53:5>
    | |-BinaryOperator 0x1350082e0 <line:50:9, col:19> 'int' '>='
    | | |-ImplicitCastExpr 0x1350082c8 <col:9> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x135008288 <col:9> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    | | `-FloatingLiteral 0x1350082a8 <col:19> 'double' 4.000000e+00
    | `-CompoundStmt 0x135008410 <col:24, line:53:5>
    |   `-CompoundAssignOperator 0x1350083e0 <line:52:2, col:12> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
    |     |-DeclRefExpr 0x1350083a0 <col:2> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    |     `-FloatingLiteral 0x1350083c0 <col:12> 'double' 4.000000e+00
    `-WhileStmt 0x1350085b0 <line:54:5, line:57:5>
      |-BinaryOperator 0x1350084a0 <line:54:12, col:22> 'int' '>='
      | |-ImplicitCastExpr 0x135008488 <col:12> 'double' <LValueToRValue>
      | | `-DeclRefExpr 0x135008448 <col:12> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
      | `-FloatingLiteral 0x135008468 <col:22> 'double' 1.000000e+00
      `-CompoundStmt 0x135008598 <col:27, line:57:5>
        `-UnaryOperator 0x135008580 <line:56:2, col:8> 'double' postfix '--'
          `-DeclRefExpr 0x135008560 <col:2> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
