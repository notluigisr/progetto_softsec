TranslationUnitDecl 0x121855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1218564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x121855bd0 '__int128'
|-TypedefDecl 0x121856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x121855bf0 'unsigned __int128'
|-TypedefDecl 0x12200be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12200bc00 'struct __NSConstantString_tag'
|   `-Record 0x121856580 '__NSConstantString_tag'
|-TypedefDecl 0x12200be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x121855d90 '__SVInt8_t'
|-TypedefDecl 0x12200bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x121855db0 '__SVInt16_t'
|-TypedefDecl 0x12200bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x121855dd0 '__SVInt32_t'
|-TypedefDecl 0x12200bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x121855df0 '__SVInt64_t'
|-TypedefDecl 0x12200c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x121855e10 '__SVUint8_t'
|-TypedefDecl 0x12200c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x121855e30 '__SVUint16_t'
|-TypedefDecl 0x12200c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x121855e50 '__SVUint32_t'
|-TypedefDecl 0x12200c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x121855e70 '__SVUint64_t'
|-TypedefDecl 0x12200c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x121855e90 '__SVFloat16_t'
|-TypedefDecl 0x12200c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x121855eb0 '__SVFloat32_t'
|-TypedefDecl 0x12200c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x121855ed0 '__SVFloat64_t'
|-TypedefDecl 0x12200c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x121855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12200c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x121855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12200c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x121855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12200c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x121855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12200c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x121855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12200c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x121855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12200c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x121855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12200c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x121855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12200c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x121855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12200c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x121856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12200c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x121856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12200c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x121856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12200c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x121856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12200c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x121856090 '__clang_svint8x3_t'
|-TypedefDecl 0x12200c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1218560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12200c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1218560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12200c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1218560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12200c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x121856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12200ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x121856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12200cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x121856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12200cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x121856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12200cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x121856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12200d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1218561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12200d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1218561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12200d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1218561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12200d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x121856210 '__clang_svint8x4_t'
|-TypedefDecl 0x12200d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x121856230 '__clang_svint16x4_t'
|-TypedefDecl 0x12200d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x121856250 '__clang_svint32x4_t'
|-TypedefDecl 0x12200d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x121856270 '__clang_svint64x4_t'
|-TypedefDecl 0x12200d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x121856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12200d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1218562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12200d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1218562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12200d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1218562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12200d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x121856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12200d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x121856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12200d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x121856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12200d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x121856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12200da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x121856390 '__SVBool_t'
|-TypedefDecl 0x12200da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1218563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12200dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1218563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12200db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1218563f0 '__SVCount_t'
|-TypedefDecl 0x12200dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12200dbb0 'char *'
|   `-BuiltinType 0x1218556b0 'char'
|-TypedefDecl 0x12200dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12200dbb0 'char *'
|   `-BuiltinType 0x1218556b0 'char'
`-FunctionDecl 0x12200dde0 <dataset_diviso_filec/func20466_nonvuln.c:1:1, line:30:1> line:1:13 maximize_sndbuf 'void (const int)' static
  |-ParmVarDecl 0x12200dcd8 <col:29, col:39> col:39 used sfd 'const int'
  `-CompoundStmt 0x121923e40 <col:44, line:30:1>
    |-DeclStmt 0x12200df90 <line:3:5, col:22>
    | `-VarDecl 0x12200df08 <col:5, col:21> col:9 used last_good 'int' cinit
    |   `-IntegerLiteral 0x12200df70 <col:21> 'int' 0
    |-DeclStmt 0x12200e148 <line:4:5, col:22>
    | |-VarDecl 0x12200dfc0 <col:5, col:9> col:9 used min 'int'
    | |-VarDecl 0x12200e040 <col:5, col:14> col:14 used max 'int'
    | `-VarDecl 0x12200e0c0 <col:5, col:19> col:19 used avg 'int'
    |-DeclStmt 0x12200e1e0 <line:5:5, col:17>
    | `-VarDecl 0x12200e178 <col:5, col:9> col:9 used old_size 'int'
    |-IfStmt 0x1220288e8 <line:8:5, line:12:5>
    | |-BinaryOperator 0x122028560 <line:8:9, col:72> 'int' contains-errors '!='
    | | |-CallExpr 0x122028518 <col:9, col:67> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x12200e310 <col:9> 'int ()' Function 0x12200e258 'getsockopt' 'int ()'
    | | | |-DeclRefExpr 0x12200e330 <col:20> 'const int' lvalue ParmVar 0x12200dcd8 'sfd' 'const int'
    | | | |-RecoveryExpr 0x1220284a0 <col:25> '<dependent type>' contains-errors lvalue
    | | | |-RecoveryExpr 0x1220284c0 <col:37> '<dependent type>' contains-errors lvalue
    | | | |-UnaryOperator 0x12200e3d0 <col:48, col:49> 'int *' prefix '&' cannot overflow
    | | | | `-DeclRefExpr 0x12200e380 <col:49> 'int' lvalue Var 0x12200e178 'old_size' 'int'
    | | | `-UnaryOperator 0x122028500 <col:59, col:60> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | |   `-RecoveryExpr 0x1220284e0 <col:60> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x122028460 <col:72> 'int' 0
    | `-CompoundStmt 0x1220288c8 <col:75, line:12:5>
    |   |-IfStmt 0x122028898 <line:9:9, line:10:25>
    |   | |-BinaryOperator 0x122028688 <line:9:13, col:32> 'int' contains-errors '>'
    |   | | |-CXXDependentScopeMemberExpr 0x122028640 <col:13, col:22> '<dependent type>' contains-errors lvalue .verbose
    |   | | | `-RecoveryExpr 0x122028620 <col:13> '<dependent type>' contains-errors lvalue
    |   | | `-IntegerLiteral 0x1220285e0 <col:32> 'int' 0
    |   | `-CallExpr 0x122028858 <line:10:13, col:25> 'int'
    |   |   |-ImplicitCastExpr 0x122028840 <col:13> 'int (*)()' <FunctionToPointerDecay>
    |   |   | `-DeclRefExpr 0x122028788 <col:13> 'int ()' Function 0x1220286d0 'perror' 'int ()'
    |   |   `-ImplicitCastExpr 0x122028880 <col:20> 'char *' <ArrayToPointerDecay>
    |   |     `-StringLiteral 0x1220287f0 <col:20> 'char[4]' lvalue "STR"
    |   `-ReturnStmt 0x1220288b8 <line:11:9>
    |-BinaryOperator 0x122028960 <line:15:5, col:11> 'int' '='
    | |-DeclRefExpr 0x122028908 <col:5> 'int' lvalue Var 0x12200dfc0 'min' 'int'
    | `-ImplicitCastExpr 0x122028948 <col:11> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x122028928 <col:11> 'int' lvalue Var 0x12200e178 'old_size' 'int'
    |-BinaryOperator 0x1220289f8 <line:16:5, col:11> 'int' contains-errors '='
    | |-DeclRefExpr 0x122028980 <col:5> 'int' lvalue Var 0x12200e040 'max' 'int'
    | `-RecoveryExpr 0x1220289d8 <col:11> '<dependent type>' contains-errors lvalue
    |-WhileStmt 0x122029268 <line:18:5, line:26:5>
    | |-BinaryOperator 0x122028a88 <line:18:12, col:19> 'int' '<='
    | | |-ImplicitCastExpr 0x122028a58 <col:12> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x122028a18 <col:12> 'int' lvalue Var 0x12200dfc0 'min' 'int'
    | | `-ImplicitCastExpr 0x122028a70 <col:19> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x122028a38 <col:19> 'int' lvalue Var 0x12200e040 'max' 'int'
    | `-CompoundStmt 0x122029248 <col:24, line:26:5>
    |   |-BinaryOperator 0x122028c68 <line:19:9, col:45> 'int' '='
    |   | |-DeclRefExpr 0x122028aa8 <col:9> 'int' lvalue Var 0x12200e0c0 'avg' 'int'
    |   | `-ImplicitCastExpr 0x122028c50 <col:15, col:45> 'int' <IntegralCast>
    |   |   `-BinaryOperator 0x122028c30 <col:15, col:45> 'unsigned int' '/'
    |   |     |-ParenExpr 0x122028bd8 <col:15, col:41> 'unsigned int'
    |   |     | `-CStyleCastExpr 0x122028bb0 <col:16, col:40> 'unsigned int' <IntegralCast>
    |   |     |   `-ParenExpr 0x122028b90 <col:30, col:40> 'int'
    |   |     |     `-BinaryOperator 0x122028b38 <col:31, col:37> 'int' '+'
    |   |     |       |-ImplicitCastExpr 0x122028b08 <col:31> 'int' <LValueToRValue>
    |   |     |       | `-DeclRefExpr 0x122028ac8 <col:31> 'int' lvalue Var 0x12200dfc0 'min' 'int'
    |   |     |       `-ImplicitCastExpr 0x122028b20 <col:37> 'int' <LValueToRValue>
    |   |     |         `-DeclRefExpr 0x122028ae8 <col:37> 'int' lvalue Var 0x12200e040 'max' 'int'
    |   |     `-ImplicitCastExpr 0x122028c18 <col:45> 'unsigned int' <IntegralCast>
    |   |       `-IntegerLiteral 0x122028bf8 <col:45> 'int' 2
    |   `-IfStmt 0x122029218 <line:20:9, line:25:9> has_else
    |     |-BinaryOperator 0x122028fd8 <line:20:13, col:78> 'int' contains-errors '=='
    |     | |-CallExpr 0x122028f90 <col:13, col:73> '<dependent type>' contains-errors
    |     | | |-DeclRefExpr 0x122028d68 <col:13> 'int ()' Function 0x122028cb0 'setsockopt' 'int ()'
    |     | | |-DeclRefExpr 0x122028d88 <col:24> 'const int' lvalue ParmVar 0x12200dcd8 'sfd' 'const int'
    |     | | |-RecoveryExpr 0x122028ef0 <col:29> '<dependent type>' contains-errors lvalue
    |     | | |-RecoveryExpr 0x122028f10 <col:41> '<dependent type>' contains-errors lvalue
    |     | | |-CStyleCastExpr 0x122028f48 <col:52, col:61> 'void *' <BitCast>
    |     | | | `-UnaryOperator 0x122028df8 <col:60, col:61> 'int *' prefix '&' cannot overflow
    |     | | |   `-DeclRefExpr 0x122028dd8 <col:61> 'int' lvalue Var 0x12200e0c0 'avg' 'int'
    |     | | `-RecoveryExpr 0x122028f70 <col:66> '<dependent type>' contains-errors lvalue
    |     | `-IntegerLiteral 0x122028eb0 <col:78> 'int' 0
    |     |-CompoundStmt 0x122029128 <col:81, line:23:9>
    |     | |-BinaryOperator 0x122029050 <line:21:13, col:25> 'int' '='
    |     | | |-DeclRefExpr 0x122028ff8 <col:13> 'int' lvalue Var 0x12200df08 'last_good' 'int'
    |     | | `-ImplicitCastExpr 0x122029038 <col:25> 'int' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x122029018 <col:25> 'int' lvalue Var 0x12200e0c0 'avg' 'int'
    |     | `-BinaryOperator 0x122029108 <line:22:13, col:25> 'int' '='
    |     |   |-DeclRefExpr 0x122029070 <col:13> 'int' lvalue Var 0x12200dfc0 'min' 'int'
    |     |   `-BinaryOperator 0x1220290e8 <col:19, col:25> 'int' '+'
    |     |     |-ImplicitCastExpr 0x1220290d0 <col:19> 'int' <LValueToRValue>
    |     |     | `-DeclRefExpr 0x122029090 <col:19> 'int' lvalue Var 0x12200e0c0 'avg' 'int'
    |     |     `-IntegerLiteral 0x1220290b0 <col:25> 'int' 1
    |     `-CompoundStmt 0x122029200 <line:23:16, line:25:9>
    |       `-BinaryOperator 0x1220291e0 <line:24:13, col:25> 'int' '='
    |         |-DeclRefExpr 0x122029148 <col:13> 'int' lvalue Var 0x12200e040 'max' 'int'
    |         `-BinaryOperator 0x1220291c0 <col:19, col:25> 'int' '-'
    |           |-ImplicitCastExpr 0x1220291a8 <col:19> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x122029168 <col:19> 'int' lvalue Var 0x12200e0c0 'avg' 'int'
    |           `-IntegerLiteral 0x122029188 <col:25> 'int' 1
    `-IfStmt 0x121923e20 <line:28:5, line:29:56>
      |-BinaryOperator 0x122029390 <line:28:9, col:28> 'int' contains-errors '>'
      | |-CXXDependentScopeMemberExpr 0x122029348 <col:9, col:18> '<dependent type>' contains-errors lvalue .verbose
      | | `-RecoveryExpr 0x122029328 <col:9> '<dependent type>' contains-errors lvalue
      | `-IntegerLiteral 0x1220292e8 <col:28> 'int' 1
      `-CallExpr 0x121923dd8 <line:29:9, col:56> '<dependent type>' contains-errors
        |-DeclRefExpr 0x121923cb8 <col:9> 'int ()' Function 0x121923c00 'fprintf' 'int ()'
        |-RecoveryExpr 0x121923db8 <col:17> '<dependent type>' contains-errors lvalue
        |-StringLiteral 0x121923cf0 <col:25> 'char[4]' lvalue "STR"
        |-DeclRefExpr 0x121923d10 <col:32> 'const int' lvalue ParmVar 0x12200dcd8 'sfd' 'const int'
        |-DeclRefExpr 0x121923d30 <col:37> 'int' lvalue Var 0x12200e178 'old_size' 'int'
        `-DeclRefExpr 0x121923d50 <col:47> 'int' lvalue Var 0x12200df08 'last_good' 'int'
