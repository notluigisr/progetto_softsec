TranslationUnitDecl 0x133055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1330564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x133055bd0 '__int128'
|-TypedefDecl 0x133056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x133055bf0 'unsigned __int128'
|-TypedefDecl 0x133126230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x133126000 'struct __NSConstantString_tag'
|   `-Record 0x133056580 '__NSConstantString_tag'
|-TypedefDecl 0x133126298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x133055d90 '__SVInt8_t'
|-TypedefDecl 0x133126300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x133055db0 '__SVInt16_t'
|-TypedefDecl 0x133126368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x133055dd0 '__SVInt32_t'
|-TypedefDecl 0x1331263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x133055df0 '__SVInt64_t'
|-TypedefDecl 0x133126438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x133055e10 '__SVUint8_t'
|-TypedefDecl 0x1331264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x133055e30 '__SVUint16_t'
|-TypedefDecl 0x133126508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x133055e50 '__SVUint32_t'
|-TypedefDecl 0x133126570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x133055e70 '__SVUint64_t'
|-TypedefDecl 0x1331265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x133055e90 '__SVFloat16_t'
|-TypedefDecl 0x133126640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x133055eb0 '__SVFloat32_t'
|-TypedefDecl 0x1331266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x133055ed0 '__SVFloat64_t'
|-TypedefDecl 0x133126710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x133055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x133126778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x133055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1331267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x133055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x133126848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x133055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1331268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x133055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x133126918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x133055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x133126980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x133055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1331269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x133055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x133126a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x133055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x133126ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x133056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x133126b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x133056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x133126b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x133056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x133126bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x133056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x133126c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x133056090 '__clang_svint8x3_t'
|-TypedefDecl 0x133126cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1330560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x133126d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1330560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x133126d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1330560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x133126df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x133056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x133126e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x133056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x133126ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x133056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x133126f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x133056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x133126f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x133056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x133127800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1330561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x133127868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1330561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1331278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1330561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x133127938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x133056210 '__clang_svint8x4_t'
|-TypedefDecl 0x1331279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x133056230 '__clang_svint16x4_t'
|-TypedefDecl 0x133127a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x133056250 '__clang_svint32x4_t'
|-TypedefDecl 0x133127a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x133056270 '__clang_svint64x4_t'
|-TypedefDecl 0x133127ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x133056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x133127b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1330562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x133127ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1330562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x133127c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1330562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x133127c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x133056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x133127ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x133056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x133127d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x133056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x133127db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x133056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x133127e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x133056390 '__SVBool_t'
|-TypedefDecl 0x133127e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1330563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x133127ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1330563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x133127f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1330563f0 '__SVCount_t'
|-TypedefDecl 0x133127ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x133127fb0 'char *'
|   `-BuiltinType 0x1330556b0 'char'
|-TypedefDecl 0x133128068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x133127fb0 'char *'
|   `-BuiltinType 0x1330556b0 'char'
|-FunctionDecl 0x133128268 <dataset_diviso_filec/func14312_vuln.c:1:1, line:32:1> line:1:5 unit_name_path_escape 'int (const char *, char **)'
| |-ParmVarDecl 0x1331280d8 <col:27, col:39> col:39 used f 'const char *'
| |-ParmVarDecl 0x133128188 <col:42, col:49> col:49 used ret 'char **'
| `-CompoundStmt 0x1331439c0 <col:54, line:32:1>
|   |-DeclStmt 0x133128480 <line:2:9, col:20>
|   | |-VarDecl 0x133128380 <col:9, col:15> col:15 used p 'char *'
|   | `-VarDecl 0x133128400 <col:9, col:19> col:19 used s 'char *'
|   |-CallExpr 0x133128648 <line:4:9, col:17> 'int'
|   | |-ImplicitCastExpr 0x133128630 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1331285c0 <col:9> 'int ()' Function 0x133128508 'assert' 'int ()'
|   | `-ImplicitCastExpr 0x133128670 <col:16> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1331285e0 <col:16> 'const char *' lvalue ParmVar 0x1331280d8 'f' 'const char *'
|   |-CallExpr 0x1331286e0 <line:5:9, col:19> 'int'
|   | |-ImplicitCastExpr 0x1331286c8 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x133128688 <col:9> 'int ()' Function 0x133128508 'assert' 'int ()'
|   | `-ImplicitCastExpr 0x133128708 <col:16> 'char **' <LValueToRValue>
|   |   `-DeclRefExpr 0x1331286a8 <col:16> 'char **' lvalue ParmVar 0x133128188 'ret' 'char **'
|   |-BinaryOperator 0x133141d90 <line:7:9, col:22> 'char *' '='
|   | |-DeclRefExpr 0x133128720 <col:9> 'char *' lvalue Var 0x133128380 'p' 'char *'
|   | `-ImplicitCastExpr 0x133141950 <col:13, col:22> 'char *' <IntegralToPointer>
|   |   `-CallExpr 0x133141910 <col:13, col:22> 'int'
|   |     |-ImplicitCastExpr 0x1331418f8 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1331418b8 <col:13> 'int ()' Function 0x133141800 'strdupa' 'int ()'
|   |     `-ImplicitCastExpr 0x133141938 <col:21> 'const char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x1331418d8 <col:21> 'const char *' lvalue ParmVar 0x1331280d8 'f' 'const char *'
|   |-IfStmt 0x133141ea8 <line:8:9, line:9:25>
|   | |-UnaryOperator 0x133141de8 <line:8:13, col:14> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x133141dd0 <col:14> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x133141db0 <col:14> 'char *' lvalue Var 0x133128380 'p' 'char *'
|   | `-ReturnStmt 0x133141e98 <line:9:17, col:25>
|   |   `-UnaryOperator 0x133141e80 <col:24, col:25> '<dependent type>' contains-errors prefix '-' cannot overflow
|   |     `-ImplicitCastExpr 0x133141e68 <col:25> '<dependent type>' contains-errors <LValueToRValue>
|   |       `-RecoveryExpr 0x133141e48 <col:25> '<dependent type>' contains-errors lvalue
|   |-CallExpr 0x133142050 <line:11:9, col:31> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x133141fa8 <col:9> 'int ()' Function 0x133141ef0 'path_simplify' 'int ()'
|   | |-DeclRefExpr 0x133141fc8 <col:23> 'char *' lvalue Var 0x133128380 'p' 'char *'
|   | `-RecoveryExpr 0x133142030 <col:26> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x1331437a0 <line:13:9, line:26:9> has_else
|   | |-CallExpr 0x1331421b8 <line:13:13, col:28> 'int'
|   | | |-ImplicitCastExpr 0x1331421a0 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x133142160 <col:13> 'int ()' Function 0x1331420a8 'empty_or_root' 'int ()'
|   | | `-ImplicitCastExpr 0x1331421e0 <col:27> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x133142180 <col:27> 'char *' lvalue Var 0x133128380 'p' 'char *'
|   | |-BinaryOperator 0x133142510 <line:14:17, col:33> 'char *' '='
|   | | |-DeclRefExpr 0x1331421f8 <col:17> 'char *' lvalue Var 0x133128400 's' 'char *'
|   | | `-CallExpr 0x1331424b8 <col:21, col:33> 'char *'
|   | |   |-ImplicitCastExpr 0x1331424a0 <col:21> 'char *(*)(const char *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x1331423c8 <col:21> 'char *(const char *)' Function 0x133142258 'strdup' 'char *(const char *)'
|   | |   `-ImplicitCastExpr 0x1331424f8 <col:28> 'const char *' <NoOp>
|   | |     `-ImplicitCastExpr 0x1331424e0 <col:28> 'char *' <ArrayToPointerDecay>
|   | |       `-StringLiteral 0x133142430 <col:28> 'char[4]' lvalue "STR"
|   | `-CompoundStmt 0x133143770 <line:15:14, line:26:9>
|   |   |-IfStmt 0x133142768 <line:16:17, line:17:33>
|   |   | |-UnaryOperator 0x1331426a8 <line:16:21, col:42> 'int' prefix '!' cannot overflow
|   |   | | `-CallExpr 0x133142668 <col:22, col:42> 'int'
|   |   | |   |-ImplicitCastExpr 0x133142650 <col:22> 'int (*)()' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x133142610 <col:22> 'int ()' Function 0x133142558 'path_is_normalized' 'int ()'
|   |   | |   `-ImplicitCastExpr 0x133142690 <col:41> 'char *' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x133142630 <col:41> 'char *' lvalue Var 0x133128380 'p' 'char *'
|   |   | `-ReturnStmt 0x133142758 <line:17:25, col:33>
|   |   |   `-UnaryOperator 0x133142740 <col:32, col:33> '<dependent type>' contains-errors prefix '-' cannot overflow
|   |   |     `-ImplicitCastExpr 0x133142728 <col:33> '<dependent type>' contains-errors <LValueToRValue>
|   |   |       `-RecoveryExpr 0x133142708 <col:33> '<dependent type>' contains-errors lvalue
|   |   |-CallExpr 0x133143330 <line:20:17, col:47> 'int'
|   |   | |-ImplicitCastExpr 0x133143318 <col:17> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1331432b8 <col:17> 'int ()' Function 0x133143200 'delete_trailing_chars' 'int ()'
|   |   | |-ImplicitCastExpr 0x133143360 <col:39> 'char *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x1331432d8 <col:39> 'char *' lvalue Var 0x133128380 'p' 'char *'
|   |   | `-ImplicitCastExpr 0x133143378 <col:42> 'char *' <ArrayToPointerDecay>
|   |   |   `-StringLiteral 0x1331432f8 <col:42> 'char[4]' lvalue "STR"
|   |   |-BinaryOperator 0x133143580 <line:23:17, col:48> 'char *' '='
|   |   | |-DeclRefExpr 0x133143390 <col:17> 'char *' lvalue Var 0x133128380 'p' 'char *'
|   |   | `-ImplicitCastExpr 0x133143568 <col:21, col:48> 'char *' <IntegralToPointer>
|   |   |   `-CallExpr 0x133143508 <col:21, col:48> 'int'
|   |   |     |-ImplicitCastExpr 0x1331434f0 <col:21> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x133143490 <col:21> 'int ()' Function 0x1331433d8 'skip_leading_chars' 'int ()'
|   |   |     |-ImplicitCastExpr 0x133143538 <col:40> 'char *' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x1331434b0 <col:40> 'char *' lvalue Var 0x133128380 'p' 'char *'
|   |   |     `-ImplicitCastExpr 0x133143550 <col:43> 'char *' <ArrayToPointerDecay>
|   |   |       `-StringLiteral 0x1331434d0 <col:43> 'char[4]' lvalue "STR"
|   |   `-BinaryOperator 0x133143750 <line:25:17, col:39> 'char *' '='
|   |     |-DeclRefExpr 0x1331435a0 <col:17> 'char *' lvalue Var 0x133128400 's' 'char *'
|   |     `-ImplicitCastExpr 0x133143738 <col:21, col:39> 'char *' <IntegralToPointer>
|   |       `-CallExpr 0x1331436f8 <col:21, col:39> 'int'
|   |         |-ImplicitCastExpr 0x1331436e0 <col:21> 'int (*)()' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x1331436a0 <col:21> 'int ()' Function 0x1331435e8 'unit_name_escape' 'int ()'
|   |         `-ImplicitCastExpr 0x133143720 <col:38> 'char *' <LValueToRValue>
|   |           `-DeclRefExpr 0x1331436c0 <col:38> 'char *' lvalue Var 0x133128380 'p' 'char *'
|   |-IfStmt 0x1331438c8 <line:27:9, line:28:25>
|   | |-UnaryOperator 0x133143808 <line:27:13, col:14> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x1331437f0 <col:14> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1331437d0 <col:14> 'char *' lvalue Var 0x133128400 's' 'char *'
|   | `-ReturnStmt 0x1331438b8 <line:28:17, col:25>
|   |   `-UnaryOperator 0x1331438a0 <col:24, col:25> '<dependent type>' contains-errors prefix '-' cannot overflow
|   |     `-ImplicitCastExpr 0x133143888 <col:25> '<dependent type>' contains-errors <LValueToRValue>
|   |       `-RecoveryExpr 0x133143868 <col:25> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x133143970 <line:30:9, col:16> 'char *' '='
|   | |-UnaryOperator 0x133143920 <col:9, col:10> 'char *' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x133143908 <col:10> 'char **' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1331438e8 <col:10> 'char **' lvalue ParmVar 0x133128188 'ret' 'char **'
|   | `-ImplicitCastExpr 0x133143958 <col:16> 'char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x133143938 <col:16> 'char *' lvalue Var 0x133128400 's' 'char *'
|   `-ReturnStmt 0x1331439b0 <line:31:9, col:16>
|     `-IntegerLiteral 0x133143990 <col:16> 'int' 0
`-FunctionDecl 0x133142258 <line:14:21> col:21 implicit used strdup 'char *(const char *)' extern
  |-ParmVarDecl 0x133142358 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x133142300 <<invalid sloc>> Implicit 950
