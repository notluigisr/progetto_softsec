TranslationUnitDecl 0x11f855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x11f8564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x11f855bd0 '__int128'
|-TypedefDecl 0x11f856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x11f855bf0 'unsigned __int128'
|-TypedefDecl 0x12800be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12800bc00 'struct __NSConstantString_tag'
|   `-Record 0x11f856580 '__NSConstantString_tag'
|-TypedefDecl 0x12800be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x11f855d90 '__SVInt8_t'
|-TypedefDecl 0x12800bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x11f855db0 '__SVInt16_t'
|-TypedefDecl 0x12800bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x11f855dd0 '__SVInt32_t'
|-TypedefDecl 0x12800bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x11f855df0 '__SVInt64_t'
|-TypedefDecl 0x12800c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x11f855e10 '__SVUint8_t'
|-TypedefDecl 0x12800c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x11f855e30 '__SVUint16_t'
|-TypedefDecl 0x12800c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x11f855e50 '__SVUint32_t'
|-TypedefDecl 0x12800c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x11f855e70 '__SVUint64_t'
|-TypedefDecl 0x12800c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x11f855e90 '__SVFloat16_t'
|-TypedefDecl 0x12800c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x11f855eb0 '__SVFloat32_t'
|-TypedefDecl 0x12800c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x11f855ed0 '__SVFloat64_t'
|-TypedefDecl 0x12800c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x11f855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12800c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x11f855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12800c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x11f855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12800c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x11f855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12800c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x11f855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12800c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x11f855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12800c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x11f855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12800c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x11f855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12800c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x11f855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12800c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x11f856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12800c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x11f856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12800c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x11f856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12800c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x11f856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12800c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x11f856090 '__clang_svint8x3_t'
|-TypedefDecl 0x12800c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x11f8560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12800c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x11f8560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12800c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x11f8560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12800c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x11f856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12800ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x11f856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12800cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x11f856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12800cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x11f856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12800cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x11f856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12800d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x11f8561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12800d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x11f8561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12800d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x11f8561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12800d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x11f856210 '__clang_svint8x4_t'
|-TypedefDecl 0x12800d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x11f856230 '__clang_svint16x4_t'
|-TypedefDecl 0x12800d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x11f856250 '__clang_svint32x4_t'
|-TypedefDecl 0x12800d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x11f856270 '__clang_svint64x4_t'
|-TypedefDecl 0x12800d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x11f856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12800d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x11f8562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12800d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x11f8562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12800d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x11f8562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12800d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x11f856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12800d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x11f856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12800d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x11f856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12800d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x11f856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12800da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x11f856390 '__SVBool_t'
|-TypedefDecl 0x12800da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x11f8563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12800dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x11f8563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12800db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x11f8563f0 '__SVCount_t'
|-TypedefDecl 0x12800dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12800dbb0 'char *'
|   `-BuiltinType 0x11f8556b0 'char'
|-TypedefDecl 0x12800dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12800dbb0 'char *'
|   `-BuiltinType 0x11f8556b0 'char'
|-FunctionDecl 0x12800de38 <dataset_diviso_filec/func11972_vuln.c:1:1, line:48:1> line:1:1 escapes 'int (const char *, char *)'
| |-ParmVarDecl 0x12800dcd8 <line:2:1, col:13> col:13 used cp 'const char *'
| |-ParmVarDecl 0x12800dd58 <line:3:1, col:7> col:7 used tp 'char *'
| `-CompoundStmt 0x12802b4f8 <line:4:1, line:48:1>
|   |-WhileStmt 0x12802b438 <line:5:5, line:46:5>
|   | |-ImplicitCastExpr 0x12800df88 <line:5:12, col:13> 'char' <LValueToRValue>
|   | | `-UnaryOperator 0x12800df70 <col:12, col:13> 'const char' lvalue prefix '*' cannot overflow
|   | |   `-ImplicitCastExpr 0x12800df58 <col:13> 'const char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x12800df38 <col:13> 'const char *' lvalue ParmVar 0x12800dcd8 'cp' 'const char *'
|   | `-CompoundStmt 0x12802b400 <col:17, line:46:5>
|   |   |-DeclStmt 0x12800e0f8 <line:6:2, col:24>
|   |   | |-VarDecl 0x12800dfb8 <col:2, col:13> col:6 used cval 'int' cinit
|   |   | | `-IntegerLiteral 0x12800e020 <col:13> 'int' 0
|   |   | `-VarDecl 0x12800e058 <col:2, col:23> col:16 used meta 'int' cinit
|   |   |   `-IntegerLiteral 0x12800e0c0 <col:23> 'int' 0
|   |   |-IfStmt 0x128026ec0 <line:8:2, line:11:2>
|   |   | |-BinaryOperator 0x128026db0 <line:8:6, col:57> 'int' '&&'
|   |   | | |-BinaryOperator 0x128026ce8 <col:6, col:48> 'int' '&&'
|   |   | | | |-BinaryOperator 0x12800e270 <col:6, col:25> 'int' '&&'
|   |   | | | | |-BinaryOperator 0x12800e1a8 <col:6, col:13> 'int' '=='
|   |   | | | | | |-ImplicitCastExpr 0x12800e190 <col:6, col:7> 'int' <IntegralCast>
|   |   | | | | | | `-ImplicitCastExpr 0x12800e178 <col:6, col:7> 'char' <LValueToRValue>
|   |   | | | | | |   `-UnaryOperator 0x12800e148 <col:6, col:7> 'const char' lvalue prefix '*' cannot overflow
|   |   | | | | | |     `-ImplicitCastExpr 0x12800e130 <col:7> 'const char *' <LValueToRValue>
|   |   | | | | | |       `-DeclRefExpr 0x12800e110 <col:7> 'const char *' lvalue ParmVar 0x12800dcd8 'cp' 'const char *'
|   |   | | | | | `-CharacterLiteral 0x12800e160 <col:13> 'int' 92
|   |   | | | | `-ImplicitCastExpr 0x12800e258 <col:21, col:25> 'int' <IntegralCast>
|   |   | | | |   `-ImplicitCastExpr 0x12800e240 <col:21, col:25> 'char' <LValueToRValue>
|   |   | | | |     `-ArraySubscriptExpr 0x12800e220 <col:21, col:25> 'const char' lvalue
|   |   | | | |       |-ImplicitCastExpr 0x12800e208 <col:21> 'const char *' <LValueToRValue>
|   |   | | | |       | `-DeclRefExpr 0x12800e1c8 <col:21> 'const char *' lvalue ParmVar 0x12800dcd8 'cp' 'const char *'
|   |   | | | |       `-IntegerLiteral 0x12800e1e8 <col:24> 'int' 1
|   |   | | | `-CallExpr 0x128026c58 <col:30, col:48> 'char *'
|   |   | | |   |-ImplicitCastExpr 0x128026c40 <col:30> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   |   | | |   | `-DeclRefExpr 0x128026ae0 <col:30> 'char *(const char *, int)' Function 0x128026900 'index' 'char *(const char *, int)'
|   |   | | |   |-ImplicitCastExpr 0x128026ca0 <col:36> 'const char *' <NoOp>
|   |   | | |   | `-ImplicitCastExpr 0x128026c88 <col:36> 'char *' <ArrayToPointerDecay>
|   |   | | |   |   `-StringLiteral 0x128026b40 <col:36> 'char[4]' lvalue "STR"
|   |   | | |   `-ImplicitCastExpr 0x128026cd0 <col:43, col:47> 'int' <IntegralCast>
|   |   | | |     `-ImplicitCastExpr 0x128026cb8 <col:43, col:47> 'char' <LValueToRValue>
|   |   | | |       `-ArraySubscriptExpr 0x128026bb8 <col:43, col:47> 'const char' lvalue
|   |   | | |         |-ImplicitCastExpr 0x128026ba0 <col:43> 'const char *' <LValueToRValue>
|   |   | | |         | `-DeclRefExpr 0x128026b60 <col:43> 'const char *' lvalue ParmVar 0x12800dcd8 'cp' 'const char *'
|   |   | | |         `-IntegerLiteral 0x128026b80 <col:46> 'int' 1
|   |   | | `-ImplicitCastExpr 0x128026d98 <col:53, col:57> 'int' <IntegralCast>
|   |   | |   `-ImplicitCastExpr 0x128026d80 <col:53, col:57> 'char' <LValueToRValue>
|   |   | |     `-ArraySubscriptExpr 0x128026d60 <col:53, col:57> 'const char' lvalue
|   |   | |       |-ImplicitCastExpr 0x128026d48 <col:53> 'const char *' <LValueToRValue>
|   |   | |       | `-DeclRefExpr 0x128026d08 <col:53> 'const char *' lvalue ParmVar 0x12800dcd8 'cp' 'const char *'
|   |   | |       `-IntegerLiteral 0x128026d28 <col:56> 'int' 2
|   |   | `-CompoundStmt 0x128026ea0 <col:60, line:11:2>
|   |   |   |-BinaryOperator 0x128026e10 <line:9:3, col:10> 'int' '='
|   |   |   | |-DeclRefExpr 0x128026dd0 <col:3> 'int' lvalue Var 0x12800e058 'meta' 'int'
|   |   |   | `-IntegerLiteral 0x128026df0 <col:10> 'int' 1
|   |   |   `-CompoundAssignOperator 0x128026e70 <line:10:3, col:9> 'const char *' '+=' ComputeLHSTy='const char *' ComputeResultTy='const char *'
|   |   |     |-DeclRefExpr 0x128026e30 <col:3> 'const char *' lvalue ParmVar 0x12800dcd8 'cp' 'const char *'
|   |   |     `-IntegerLiteral 0x128026e50 <col:9> 'int' 2
|   |   |-IfStmt 0x12802b248 <line:12:2, line:41:16> has_else
|   |   | |-BinaryOperator 0x1280272b8 <line:12:6, col:57> 'int' '&&'
|   |   | | |-BinaryOperator 0x1280271f0 <col:6, col:48> 'int' '&&'
|   |   | | | |-BinaryOperator 0x128027040 <col:6, col:25> 'int' '&&'
|   |   | | | | |-BinaryOperator 0x128026f78 <col:6, col:13> 'int' '=='
|   |   | | | | | |-ImplicitCastExpr 0x128026f60 <col:6, col:7> 'int' <IntegralCast>
|   |   | | | | | | `-ImplicitCastExpr 0x128026f48 <col:6, col:7> 'char' <LValueToRValue>
|   |   | | | | | |   `-UnaryOperator 0x128026f18 <col:6, col:7> 'const char' lvalue prefix '*' cannot overflow
|   |   | | | | | |     `-ImplicitCastExpr 0x128026f00 <col:7> 'const char *' <LValueToRValue>
|   |   | | | | | |       `-DeclRefExpr 0x128026ee0 <col:7> 'const char *' lvalue ParmVar 0x12800dcd8 'cp' 'const char *'
|   |   | | | | | `-CharacterLiteral 0x128026f30 <col:13> 'int' 92
|   |   | | | | `-ImplicitCastExpr 0x128027028 <col:21, col:25> 'int' <IntegralCast>
|   |   | | | |   `-ImplicitCastExpr 0x128027010 <col:21, col:25> 'char' <LValueToRValue>
|   |   | | | |     `-ArraySubscriptExpr 0x128026ff0 <col:21, col:25> 'const char' lvalue
|   |   | | | |       |-ImplicitCastExpr 0x128026fd8 <col:21> 'const char *' <LValueToRValue>
|   |   | | | |       | `-DeclRefExpr 0x128026f98 <col:21> 'const char *' lvalue ParmVar 0x12800dcd8 'cp' 'const char *'
|   |   | | | |       `-IntegerLiteral 0x128026fb8 <col:24> 'int' 1
|   |   | | | `-CallExpr 0x128027160 <col:30, col:48> 'char *'
|   |   | | |   |-ImplicitCastExpr 0x128027148 <col:30> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   |   | | |   | `-DeclRefExpr 0x128027060 <col:30> 'char *(const char *, int)' Function 0x128026900 'index' 'char *(const char *, int)'
|   |   | | |   |-ImplicitCastExpr 0x1280271a8 <col:36> 'const char *' <NoOp>
|   |   | | |   | `-ImplicitCastExpr 0x128027190 <col:36> 'char *' <ArrayToPointerDecay>
|   |   | | |   |   `-StringLiteral 0x128027080 <col:36> 'char[4]' lvalue "STR"
|   |   | | |   `-ImplicitCastExpr 0x1280271d8 <col:43, col:47> 'int' <IntegralCast>
|   |   | | |     `-ImplicitCastExpr 0x1280271c0 <col:43, col:47> 'char' <LValueToRValue>
|   |   | | |       `-ArraySubscriptExpr 0x1280270f8 <col:43, col:47> 'const char' lvalue
|   |   | | |         |-ImplicitCastExpr 0x1280270e0 <col:43> 'const char *' <LValueToRValue>
|   |   | | |         | `-DeclRefExpr 0x1280270a0 <col:43> 'const char *' lvalue ParmVar 0x12800dcd8 'cp' 'const char *'
|   |   | | |         `-IntegerLiteral 0x1280270c0 <col:46> 'int' 1
|   |   | | `-ImplicitCastExpr 0x1280272a0 <col:53, col:57> 'int' <IntegralCast>
|   |   | |   `-ImplicitCastExpr 0x128027288 <col:53, col:57> 'char' <LValueToRValue>
|   |   | |     `-ArraySubscriptExpr 0x128027268 <col:53, col:57> 'const char' lvalue
|   |   | |       |-ImplicitCastExpr 0x128027250 <col:53> 'const char *' <LValueToRValue>
|   |   | |       | `-DeclRefExpr 0x128027210 <col:53> 'const char *' lvalue ParmVar 0x12800dcd8 'cp' 'const char *'
|   |   | |       `-IntegerLiteral 0x128027230 <col:56> 'int' 2
|   |   | |-CompoundStmt 0x12802a6a0 <col:60, line:27:2>
|   |   | | |-DeclStmt 0x128027370 <line:14:6, col:20>
|   |   | | | `-VarDecl 0x128027308 <col:6, col:18> col:18 used dp 'const char *'
|   |   | | |-DeclStmt 0x128027428 <line:15:6, col:20>
|   |   | | | `-VarDecl 0x1280273a0 <col:6, col:19> col:10 used dcount 'int' cinit
|   |   | | |   `-IntegerLiteral 0x128027408 <col:19> 'int' 0
|   |   | | |-UnaryOperator 0x128027460 <line:17:6, col:8> 'const char *' postfix '++'
|   |   | | | `-DeclRefExpr 0x128027440 <col:6> 'const char *' lvalue ParmVar 0x12800dcd8 'cp' 'const char *'
|   |   | | `-IfStmt 0x12802a670 <line:18:6, line:26:38> has_else
|   |   | |   |-BinaryOperator 0x128029200 <line:18:10, col:31> 'int' '||'
|   |   | |   | |-BinaryOperator 0x128027510 <col:10, col:17> 'int' '=='
|   |   | |   | | |-ImplicitCastExpr 0x1280274f8 <col:10, col:11> 'int' <IntegralCast>
|   |   | |   | | | `-ImplicitCastExpr 0x1280274e0 <col:10, col:11> 'char' <LValueToRValue>
|   |   | |   | | |   `-UnaryOperator 0x1280274b0 <col:10, col:11> 'const char' lvalue prefix '*' cannot overflow
|   |   | |   | | |     `-ImplicitCastExpr 0x128027498 <col:11> 'const char *' <LValueToRValue>
|   |   | |   | | |       `-DeclRefExpr 0x128027478 <col:11> 'const char *' lvalue ParmVar 0x12800dcd8 'cp' 'const char *'
|   |   | |   | | `-CharacterLiteral 0x1280274c8 <col:17> 'int' 120
|   |   | |   | `-BinaryOperator 0x1280275c8 <col:24, col:31> 'int' '=='
|   |   | |   |   |-ImplicitCastExpr 0x1280275b0 <col:24, col:25> 'int' <IntegralCast>
|   |   | |   |   | `-ImplicitCastExpr 0x128027598 <col:24, col:25> 'char' <LValueToRValue>
|   |   | |   |   |   `-UnaryOperator 0x128027568 <col:24, col:25> 'const char' lvalue prefix '*' cannot overflow
|   |   | |   |   |     `-ImplicitCastExpr 0x128027550 <col:25> 'const char *' <LValueToRValue>
|   |   | |   |   |       `-DeclRefExpr 0x128027530 <col:25> 'const char *' lvalue ParmVar 0x12800dcd8 'cp' 'const char *'
|   |   | |   |   `-CharacterLiteral 0x128027580 <col:31> 'int' 88
|   |   | |   |-NullStmt 0x12802a668 <line:19:3>
|   |   | |   `-IfStmt 0x12802a638 <line:21:11, line:26:38> has_else
|   |   | |     |-BinaryOperator 0x128029778 <line:21:15, col:36> 'int' '||'
|   |   | |     | |-BinaryOperator 0x1280296a0 <col:15, col:22> 'int' '=='
|   |   | |     | | |-ImplicitCastExpr 0x128029688 <col:15, col:16> 'int' <IntegralCast>
|   |   | |     | | | `-ImplicitCastExpr 0x128029670 <col:15, col:16> 'char' <LValueToRValue>
|   |   | |     | | |   `-UnaryOperator 0x128029640 <col:15, col:16> 'const char' lvalue prefix '*' cannot overflow
|   |   | |     | | |     `-ImplicitCastExpr 0x128029628 <col:16> 'const char *' <LValueToRValue>
|   |   | |     | | |       `-DeclRefExpr 0x128029608 <col:16> 'const char *' lvalue ParmVar 0x12800dcd8 'cp' 'const char *'
|   |   | |     | | `-CharacterLiteral 0x128029658 <col:22> 'int' 111
|   |   | |     | `-BinaryOperator 0x128029758 <col:29, col:36> 'int' '=='
|   |   | |     |   |-ImplicitCastExpr 0x128029740 <col:29, col:30> 'int' <IntegralCast>
|   |   | |     |   | `-ImplicitCastExpr 0x128029728 <col:29, col:30> 'char' <LValueToRValue>
|   |   | |     |   |   `-UnaryOperator 0x1280296f8 <col:29, col:30> 'const char' lvalue prefix '*' cannot overflow
|   |   | |     |   |     `-ImplicitCastExpr 0x1280296e0 <col:30> 'const char *' <LValueToRValue>
|   |   | |     |   |       `-DeclRefExpr 0x1280296c0 <col:30> 'const char *' lvalue ParmVar 0x12800dcd8 'cp' 'const char *'
|   |   | |     |   `-CharacterLiteral 0x128029710 <col:36> 'int' 79
|   |   | |     |-ForStmt 0x128029cb8 <line:22:3, line:23:37>
|   |   | |     | |-UnaryOperator 0x1280297b8 <line:22:8, col:10> 'const char *' prefix '++'
|   |   | |     | | `-DeclRefExpr 0x128029798 <col:10> 'const char *' lvalue ParmVar 0x12800dcd8 'cp' 'const char *'
|   |   | |     | |-<<<NULL>>>
|   |   | |     | |-BinaryOperator 0x128029a90 <col:14, col:56> 'int' '&&'
|   |   | |     | | |-BinaryOperator 0x1280299d8 <col:14, col:38> 'int' '&&'
|   |   | |     | | | |-ImplicitCastExpr 0x1280299c0 <col:14, col:15> 'int' <IntegralCast>
|   |   | |     | | | | `-ImplicitCastExpr 0x1280299a8 <col:14, col:15> 'char' <LValueToRValue>
|   |   | |     | | | |   `-UnaryOperator 0x128029808 <col:14, col:15> 'const char' lvalue prefix '*' cannot overflow
|   |   | |     | | | |     `-ImplicitCastExpr 0x1280297f0 <col:15> 'const char *' <LValueToRValue>
|   |   | |     | | | |       `-DeclRefExpr 0x1280297d0 <col:15> 'const char *' lvalue ParmVar 0x12800dcd8 'cp' 'const char *'
|   |   | |     | | | `-ParenExpr 0x128029988 <col:21, col:38> 'char *'
|   |   | |     | | |   `-CallExpr 0x1280298f8 <col:22, col:37> 'char *'
|   |   | |     | | |     |-ImplicitCastExpr 0x1280298e0 <col:22> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   |   | |     | | |     | `-DeclRefExpr 0x128029820 <col:22> 'char *(const char *, int)' Function 0x128026900 'index' 'char *(const char *, int)'
|   |   | |     | | |     |-ImplicitCastExpr 0x128029940 <col:28> 'const char *' <NoOp>
|   |   | |     | | |     | `-ImplicitCastExpr 0x128029928 <col:28> 'char *' <ArrayToPointerDecay>
|   |   | |     | | |     |   `-StringLiteral 0x128029840 <col:28> 'char[4]' lvalue "STR"
|   |   | |     | | |     `-ImplicitCastExpr 0x128029970 <col:34, col:35> 'int' <IntegralCast>
|   |   | |     | | |       `-ImplicitCastExpr 0x128029958 <col:34, col:35> 'char' <LValueToRValue>
|   |   | |     | | |         `-UnaryOperator 0x128029898 <col:34, col:35> 'const char' lvalue prefix '*' cannot overflow
|   |   | |     | | |           `-ImplicitCastExpr 0x128029880 <col:35> 'const char *' <LValueToRValue>
|   |   | |     | | |             `-DeclRefExpr 0x128029860 <col:35> 'const char *' lvalue ParmVar 0x12800dcd8 'cp' 'const char *'
|   |   | |     | | `-ParenExpr 0x128029a70 <col:43, col:56> 'int'
|   |   | |     | |   `-BinaryOperator 0x128029a50 <col:44, col:55> 'int' '<'
|   |   | |     | |     |-UnaryOperator 0x128029a18 <col:44, col:50> 'int' postfix '++'
|   |   | |     | |     | `-DeclRefExpr 0x1280299f8 <col:44> 'int' lvalue Var 0x1280273a0 'dcount' 'int'
|   |   | |     | |     `-IntegerLiteral 0x128029a30 <col:55> 'int' 3
|   |   | |     | |-UnaryOperator 0x128029ad0 <col:59, col:61> 'const char *' postfix '++'
|   |   | |     | | `-DeclRefExpr 0x128029ab0 <col:59> 'const char *' lvalue ParmVar 0x12800dcd8 'cp' 'const char *'
|   |   | |     | `-BinaryOperator 0x128029c98 <line:23:7, col:37> 'int' '='
|   |   | |     |   |-DeclRefExpr 0x128029ae8 <col:7> 'int' lvalue Var 0x12800dfb8 'cval' 'int'
|   |   | |     |   `-BinaryOperator 0x128029c78 <col:14, col:37> 'int' '+'
|   |   | |     |     |-ParenExpr 0x128029b80 <col:14, col:23> 'int'
|   |   | |     |     | `-BinaryOperator 0x128029b60 <col:15, col:22> 'int' '*'
|   |   | |     |     |   |-ImplicitCastExpr 0x128029b48 <col:15> 'int' <LValueToRValue>
|   |   | |     |     |   | `-DeclRefExpr 0x128029b08 <col:15> 'int' lvalue Var 0x12800dfb8 'cval' 'int'
|   |   | |     |     |   `-IntegerLiteral 0x128029b28 <col:22> 'int' 8
|   |   | |     |     `-ParenExpr 0x128029c58 <col:27, col:37> 'int'
|   |   | |     |       `-BinaryOperator 0x128029c38 <col:28, col:34> 'int' '-'
|   |   | |     |         |-ImplicitCastExpr 0x128029c20 <col:28, col:29> 'int' <IntegralCast>
|   |   | |     |         | `-ImplicitCastExpr 0x128029c08 <col:28, col:29> 'char' <LValueToRValue>
|   |   | |     |         |   `-UnaryOperator 0x128029bd8 <col:28, col:29> 'const char' lvalue prefix '*' cannot overflow
|   |   | |     |         |     `-ImplicitCastExpr 0x128029bc0 <col:29> 'const char *' <LValueToRValue>
|   |   | |     |         |       `-DeclRefExpr 0x128029ba0 <col:29> 'const char *' lvalue ParmVar 0x12800dcd8 'cp' 'const char *'
|   |   | |     |         `-CharacterLiteral 0x128029bf0 <col:34> 'int' 48
|   |   | |     `-ForStmt 0x12802a600 <line:25:3, line:26:38>
|   |   | |       |-<<<NULL>>>
|   |   | |       |-<<<NULL>>>
|   |   | |       |-BinaryOperator 0x128029fb0 <line:25:10, col:52> 'int' '&&'
|   |   | |       | |-BinaryOperator 0x128029ef8 <col:10, col:34> 'int' '&&'
|   |   | |       | | |-ImplicitCastExpr 0x128029ee0 <col:10, col:11> 'int' <IntegralCast>
|   |   | |       | | | `-ImplicitCastExpr 0x128029ec8 <col:10, col:11> 'char' <LValueToRValue>
|   |   | |       | | |   `-UnaryOperator 0x128029d28 <col:10, col:11> 'const char' lvalue prefix '*' cannot overflow
|   |   | |       | | |     `-ImplicitCastExpr 0x128029d10 <col:11> 'const char *' <LValueToRValue>
|   |   | |       | | |       `-DeclRefExpr 0x128029cf0 <col:11> 'const char *' lvalue ParmVar 0x12800dcd8 'cp' 'const char *'
|   |   | |       | | `-ParenExpr 0x128029ea8 <col:17, col:34> 'char *'
|   |   | |       | |   `-CallExpr 0x128029e18 <col:18, col:33> 'char *'
|   |   | |       | |     |-ImplicitCastExpr 0x128029e00 <col:18> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   |   | |       | |     | `-DeclRefExpr 0x128029d40 <col:18> 'char *(const char *, int)' Function 0x128026900 'index' 'char *(const char *, int)'
|   |   | |       | |     |-ImplicitCastExpr 0x128029e60 <col:24> 'const char *' <NoOp>
|   |   | |       | |     | `-ImplicitCastExpr 0x128029e48 <col:24> 'char *' <ArrayToPointerDecay>
|   |   | |       | |     |   `-StringLiteral 0x128029d60 <col:24> 'char[4]' lvalue "STR"
|   |   | |       | |     `-ImplicitCastExpr 0x128029e90 <col:30, col:31> 'int' <IntegralCast>
|   |   | |       | |       `-ImplicitCastExpr 0x128029e78 <col:30, col:31> 'char' <LValueToRValue>
|   |   | |       | |         `-UnaryOperator 0x128029db8 <col:30, col:31> 'const char' lvalue prefix '*' cannot overflow
|   |   | |       | |           `-ImplicitCastExpr 0x128029da0 <col:31> 'const char *' <LValueToRValue>
|   |   | |       | |             `-DeclRefExpr 0x128029d80 <col:31> 'const char *' lvalue ParmVar 0x12800dcd8 'cp' 'const char *'
|   |   | |       | `-ParenExpr 0x128029f90 <col:39, col:52> 'int'
|   |   | |       |   `-BinaryOperator 0x128029f70 <col:40, col:51> 'int' '<'
|   |   | |       |     |-UnaryOperator 0x128029f38 <col:40, col:46> 'int' postfix '++'
|   |   | |       |     | `-DeclRefExpr 0x128029f18 <col:40> 'int' lvalue Var 0x1280273a0 'dcount' 'int'
|   |   | |       |     `-IntegerLiteral 0x128029f50 <col:51> 'int' 3
|   |   | |       |-UnaryOperator 0x128029ff0 <col:55, col:57> 'const char *' postfix '++'
|   |   | |       | `-DeclRefExpr 0x128029fd0 <col:55> 'const char *' lvalue ParmVar 0x12800dcd8 'cp' 'const char *'
|   |   | |       `-BinaryOperator 0x12802a1b8 <line:26:7, col:38> 'int' '='
|   |   | |         |-DeclRefExpr 0x12802a008 <col:7> 'int' lvalue Var 0x12800dfb8 'cval' 'int'
|   |   | |         `-BinaryOperator 0x12802a198 <col:14, col:38> 'int' '+'
|   |   | |           |-ParenExpr 0x12802a0a0 <col:14, col:24> 'int'
|   |   | |           | `-BinaryOperator 0x12802a080 <col:15, col:22> 'int' '*'
|   |   | |           |   |-ImplicitCastExpr 0x12802a068 <col:15> 'int' <LValueToRValue>
|   |   | |           |   | `-DeclRefExpr 0x12802a028 <col:15> 'int' lvalue Var 0x12800dfb8 'cval' 'int'
|   |   | |           |   `-IntegerLiteral 0x12802a048 <col:22> 'int' 10
|   |   | |           `-ParenExpr 0x12802a178 <col:28, col:38> 'int'
|   |   | |             `-BinaryOperator 0x12802a158 <col:29, col:35> 'int' '-'
|   |   | |               |-ImplicitCastExpr 0x12802a140 <col:29, col:30> 'int' <IntegralCast>
|   |   | |               | `-ImplicitCastExpr 0x12802a128 <col:29, col:30> 'char' <LValueToRValue>
|   |   | |               |   `-UnaryOperator 0x12802a0f8 <col:29, col:30> 'const char' lvalue prefix '*' cannot overflow
|   |   | |               |     `-ImplicitCastExpr 0x12802a0e0 <col:30> 'const char *' <LValueToRValue>
|   |   | |               |       `-DeclRefExpr 0x12802a0c0 <col:30> 'const char *' lvalue ParmVar 0x12800dcd8 'cp' 'const char *'
|   |   | |               `-CharacterLiteral 0x12802a110 <col:35> 'int' 48
|   |   | `-IfStmt 0x12802b218 <line:27:9, line:41:16> has_else
|   |   |   |-BinaryOperator 0x12802a830 <line:27:13, col:32> 'int' '&&'
|   |   |   | |-BinaryOperator 0x12802a768 <col:13, col:20> 'int' '=='
|   |   |   | | |-ImplicitCastExpr 0x12802a750 <col:13, col:14> 'int' <IntegralCast>
|   |   |   | | | `-ImplicitCastExpr 0x12802a738 <col:13, col:14> 'char' <LValueToRValue>
|   |   |   | | |   `-UnaryOperator 0x12802a708 <col:13, col:14> 'const char' lvalue prefix '*' cannot overflow
|   |   |   | | |     `-ImplicitCastExpr 0x12802a6f0 <col:14> 'const char *' <LValueToRValue>
|   |   |   | | |       `-DeclRefExpr 0x12802a6d0 <col:14> 'const char *' lvalue ParmVar 0x12800dcd8 'cp' 'const char *'
|   |   |   | | `-CharacterLiteral 0x12802a720 <col:20> 'int' 92
|   |   |   | `-ImplicitCastExpr 0x12802a818 <col:28, col:32> 'int' <IntegralCast>
|   |   |   |   `-ImplicitCastExpr 0x12802a800 <col:28, col:32> 'char' <LValueToRValue>
|   |   |   |     `-ArraySubscriptExpr 0x12802a7e0 <col:28, col:32> 'const char' lvalue
|   |   |   |       |-ImplicitCastExpr 0x12802a7c8 <col:28> 'const char *' <LValueToRValue>
|   |   |   |       | `-DeclRefExpr 0x12802a788 <col:28> 'const char *' lvalue ParmVar 0x12800dcd8 'cp' 'const char *'
|   |   |   |       `-IntegerLiteral 0x12802a7a8 <col:31> 'int' 1
|   |   |   |-CompoundStmt 0x12802ae10 <col:35, line:37:2>
|   |   |   | |-SwitchStmt 0x12802a8d0 <line:28:6, line:35:6>
|   |   |   | | |-ImplicitCastExpr 0x12802a8b8 <line:28:14, col:17> 'int' <IntegralCast>
|   |   |   | | | `-ImplicitCastExpr 0x12802a8a0 <col:14, col:17> 'char' <LValueToRValue>
|   |   |   | | |   `-UnaryOperator 0x12802a888 <col:14, col:17> 'const char' lvalue prefix '*' cannot overflow
|   |   |   | | |     `-UnaryOperator 0x12802a870 <col:15, col:17> 'const char *' prefix '++'
|   |   |   | | |       `-DeclRefExpr 0x12802a850 <col:17> 'const char *' lvalue ParmVar 0x12800dcd8 'cp' 'const char *'
|   |   |   | | `-CompoundStmt 0x12802ad70 <col:21, line:35:6>
|   |   |   | |   |-CaseStmt 0x12802a928 <line:29:6, col:24>
|   |   |   | |   | |-ConstantExpr 0x12802a910 <col:11> 'int'
|   |   |   | |   | | `-CharacterLiteral 0x12802a8f8 <col:11> 'int' 92
|   |   |   | |   | `-BinaryOperator 0x12802a988 <col:17, col:24> 'int' '='
|   |   |   | |   |   |-DeclRefExpr 0x12802a950 <col:17> 'int' lvalue Var 0x12800dfb8 'cval' 'int'
|   |   |   | |   |   `-CharacterLiteral 0x12802a970 <col:24> 'int' 92
|   |   |   | |   |-BreakStmt 0x12802a9a8 <col:30>
|   |   |   | |   |-CaseStmt 0x12802a9e0 <line:30:6, col:23>
|   |   |   | |   | |-ConstantExpr 0x12802a9c8 <col:11> 'int'
|   |   |   | |   | | `-CharacterLiteral 0x12802a9b0 <col:11> 'int' 110
|   |   |   | |   | `-BinaryOperator 0x12802aa40 <col:16, col:23> 'int' '='
|   |   |   | |   |   |-DeclRefExpr 0x12802aa08 <col:16> 'int' lvalue Var 0x12800dfb8 'cval' 'int'
|   |   |   | |   |   `-CharacterLiteral 0x12802aa28 <col:23> 'int' 10
|   |   |   | |   |-BreakStmt 0x12802aa60 <col:29>
|   |   |   | |   |-CaseStmt 0x12802aa98 <line:31:6, col:23>
|   |   |   | |   | |-ConstantExpr 0x12802aa80 <col:11> 'int'
|   |   |   | |   | | `-CharacterLiteral 0x12802aa68 <col:11> 'int' 116
|   |   |   | |   | `-BinaryOperator 0x12802aaf8 <col:16, col:23> 'int' '='
|   |   |   | |   |   |-DeclRefExpr 0x12802aac0 <col:16> 'int' lvalue Var 0x12800dfb8 'cval' 'int'
|   |   |   | |   |   `-CharacterLiteral 0x12802aae0 <col:23> 'int' 9
|   |   |   | |   |-BreakStmt 0x12802ab18 <col:29>
|   |   |   | |   |-CaseStmt 0x12802ab50 <line:32:6, col:23>
|   |   |   | |   | |-ConstantExpr 0x12802ab38 <col:11> 'int'
|   |   |   | |   | | `-CharacterLiteral 0x12802ab20 <col:11> 'int' 98
|   |   |   | |   | `-BinaryOperator 0x12802abb0 <col:16, col:23> 'int' '='
|   |   |   | |   |   |-DeclRefExpr 0x12802ab78 <col:16> 'int' lvalue Var 0x12800dfb8 'cval' 'int'
|   |   |   | |   |   `-CharacterLiteral 0x12802ab98 <col:23> 'int' 8
|   |   |   | |   |-BreakStmt 0x12802abd0 <col:29>
|   |   |   | |   |-CaseStmt 0x12802ac08 <line:33:6, col:23>
|   |   |   | |   | |-ConstantExpr 0x12802abf0 <col:11> 'int'
|   |   |   | |   | | `-CharacterLiteral 0x12802abd8 <col:11> 'int' 114
|   |   |   | |   | `-BinaryOperator 0x12802ac68 <col:16, col:23> 'int' '='
|   |   |   | |   |   |-DeclRefExpr 0x12802ac30 <col:16> 'int' lvalue Var 0x12800dfb8 'cval' 'int'
|   |   |   | |   |   `-CharacterLiteral 0x12802ac50 <col:23> 'int' 13
|   |   |   | |   |-BreakStmt 0x12802ac88 <col:29>
|   |   |   | |   `-DefaultStmt 0x12802ad50 <line:34:6, col:23>
|   |   |   | |     `-BinaryOperator 0x12802ad30 <col:15, col:23> 'int' '='
|   |   |   | |       |-DeclRefExpr 0x12802ac90 <col:15> 'int' lvalue Var 0x12800dfb8 'cval' 'int'
|   |   |   | |       `-ImplicitCastExpr 0x12802ad18 <col:22, col:23> 'int' <IntegralCast>
|   |   |   | |         `-ImplicitCastExpr 0x12802ad00 <col:22, col:23> 'char' <LValueToRValue>
|   |   |   | |           `-UnaryOperator 0x12802ace8 <col:22, col:23> 'const char' lvalue prefix '*' cannot overflow
|   |   |   | |             `-ImplicitCastExpr 0x12802acd0 <col:23> 'const char *' <LValueToRValue>
|   |   |   | |               `-DeclRefExpr 0x12802acb0 <col:23> 'const char *' lvalue ParmVar 0x12800dcd8 'cp' 'const char *'
|   |   |   | `-UnaryOperator 0x12802adf8 <line:36:6, col:8> 'const char *' postfix '++'
|   |   |   |   `-DeclRefExpr 0x12802add8 <col:6> 'const char *' lvalue ParmVar 0x12800dcd8 'cp' 'const char *'
|   |   |   `-IfStmt 0x12802b1e8 <line:37:9, line:41:16> has_else
|   |   |     |-BinaryOperator 0x12802af90 <line:37:13, col:31> 'int' '&&'
|   |   |     | |-BinaryOperator 0x12802aec8 <col:13, col:20> 'int' '=='
|   |   |     | | |-ImplicitCastExpr 0x12802aeb0 <col:13, col:14> 'int' <IntegralCast>
|   |   |     | | | `-ImplicitCastExpr 0x12802ae98 <col:13, col:14> 'char' <LValueToRValue>
|   |   |     | | |   `-UnaryOperator 0x12802ae68 <col:13, col:14> 'const char' lvalue prefix '*' cannot overflow
|   |   |     | | |     `-ImplicitCastExpr 0x12802ae50 <col:14> 'const char *' <LValueToRValue>
|   |   |     | | |       `-DeclRefExpr 0x12802ae30 <col:14> 'const char *' lvalue ParmVar 0x12800dcd8 'cp' 'const char *'
|   |   |     | | `-CharacterLiteral 0x12802ae80 <col:20> 'int' 94
|   |   |     | `-ImplicitCastExpr 0x12802af78 <col:27, col:31> 'int' <IntegralCast>
|   |   |     |   `-ImplicitCastExpr 0x12802af60 <col:27, col:31> 'char' <LValueToRValue>
|   |   |     |     `-ArraySubscriptExpr 0x12802af40 <col:27, col:31> 'const char' lvalue
|   |   |     |       |-ImplicitCastExpr 0x12802af28 <col:27> 'const char *' <LValueToRValue>
|   |   |     |       | `-DeclRefExpr 0x12802aee8 <col:27> 'const char *' lvalue ParmVar 0x12800dcd8 'cp' 'const char *'
|   |   |     |       `-IntegerLiteral 0x12802af08 <col:30> 'int' 1
|   |   |     |-CompoundStmt 0x12802b108 <col:34, line:40:2>
|   |   |     | |-BinaryOperator 0x12802b0b0 <line:38:6, col:26> 'int' '='
|   |   |     | | |-DeclRefExpr 0x12802afb0 <col:6> 'int' lvalue Var 0x12800dfb8 'cval' 'int'
|   |   |     | | `-ParenExpr 0x12802b090 <col:13, col:26> 'int'
|   |   |     | |   `-BinaryOperator 0x12802b070 <col:14, col:22> 'int' '&'
|   |   |     | |     |-ImplicitCastExpr 0x12802b058 <col:14, col:17> 'int' <IntegralCast>
|   |   |     | |     | `-ImplicitCastExpr 0x12802b040 <col:14, col:17> 'char' <LValueToRValue>
|   |   |     | |     |   `-UnaryOperator 0x12802b008 <col:14, col:17> 'const char' lvalue prefix '*' cannot overflow
|   |   |     | |     |     `-UnaryOperator 0x12802aff0 <col:15, col:17> 'const char *' prefix '++'
|   |   |     | |     |       `-DeclRefExpr 0x12802afd0 <col:17> 'const char *' lvalue ParmVar 0x12800dcd8 'cp' 'const char *'
|   |   |     | |     `-IntegerLiteral 0x12802b020 <col:22> 'int' 31
|   |   |     | `-UnaryOperator 0x12802b0f0 <line:39:6, col:8> 'const char *' postfix '++'
|   |   |     |   `-DeclRefExpr 0x12802b0d0 <col:6> 'const char *' lvalue ParmVar 0x12800dcd8 'cp' 'const char *'
|   |   |     `-BinaryOperator 0x12802b1c8 <line:41:6, col:16> 'int' '='
|   |   |       |-DeclRefExpr 0x12802b128 <col:6> 'int' lvalue Var 0x12800dfb8 'cval' 'int'
|   |   |       `-ImplicitCastExpr 0x12802b1b0 <col:13, col:16> 'int' <IntegralCast>
|   |   |         `-ImplicitCastExpr 0x12802b198 <col:13, col:16> 'char' <LValueToRValue>
|   |   |           `-UnaryOperator 0x12802b180 <col:13, col:16> 'const char' lvalue prefix '*' cannot overflow
|   |   |             `-UnaryOperator 0x12802b168 <col:14, col:16> 'const char *' postfix '++'
|   |   |               `-DeclRefExpr 0x12802b148 <col:14> 'const char *' lvalue ParmVar 0x12800dcd8 'cp' 'const char *'
|   |   |-IfStmt 0x12802b320 <line:43:2, line:44:14>
|   |   | |-ImplicitCastExpr 0x12802b298 <line:43:6> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x12802b278 <col:6> 'int' lvalue Var 0x12800e058 'meta' 'int'
|   |   | `-CompoundAssignOperator 0x12802b2f0 <line:44:6, col:14> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |   |-DeclRefExpr 0x12802b2b0 <col:6> 'int' lvalue Var 0x12800dfb8 'cval' 'int'
|   |   |   `-IntegerLiteral 0x12802b2d0 <col:14> 'int' 128
|   |   `-BinaryOperator 0x12802b3e0 <line:45:2, col:10> 'char' '='
|   |     |-UnaryOperator 0x12802b378 <col:2, col:5> 'char' lvalue prefix '*' cannot overflow
|   |     | `-UnaryOperator 0x12802b360 <col:3, col:5> 'char *' postfix '++'
|   |     |   `-DeclRefExpr 0x12802b340 <col:3> 'char *' lvalue ParmVar 0x12800dd58 'tp' 'char *'
|   |     `-ImplicitCastExpr 0x12802b3c8 <col:10> 'char' <IntegralCast>
|   |       `-ImplicitCastExpr 0x12802b3b0 <col:10> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x12802b390 <col:10> 'int' lvalue Var 0x12800dfb8 'cval' 'int'
|   `-BinaryOperator 0x12802b4d8 <line:47:5, col:11> 'char' '='
|     |-UnaryOperator 0x12802b490 <col:5, col:6> 'char' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x12802b478 <col:6> 'char *' <LValueToRValue>
|     |   `-DeclRefExpr 0x12802b458 <col:6> 'char *' lvalue ParmVar 0x12800dd58 'tp' 'char *'
|     `-ImplicitCastExpr 0x12802b4c0 <col:11> 'char' <IntegralCast>
|       `-CharacterLiteral 0x12802b4a8 <col:11> 'int' 0
`-FunctionDecl 0x128026900 <line:8:30> col:30 implicit used index 'char *(const char *, int)' extern
  |-ParmVarDecl 0x128026a00 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x128026a68 <<invalid sloc>> <invalid sloc> 'int'
  `-BuiltinAttr 0x1280269a8 <<invalid sloc>> Implicit 952
