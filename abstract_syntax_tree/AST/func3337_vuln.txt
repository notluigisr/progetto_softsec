TranslationUnitDecl 0x152055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1520564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x152055bd0 '__int128'
|-TypedefDecl 0x152056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x152055bf0 'unsigned __int128'
|-TypedefDecl 0x15280be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x15280bc00 'struct __NSConstantString_tag'
|   `-Record 0x152056580 '__NSConstantString_tag'
|-TypedefDecl 0x15280be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x152055d90 '__SVInt8_t'
|-TypedefDecl 0x15280bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x152055db0 '__SVInt16_t'
|-TypedefDecl 0x15280bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x152055dd0 '__SVInt32_t'
|-TypedefDecl 0x15280bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x152055df0 '__SVInt64_t'
|-TypedefDecl 0x15280c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x152055e10 '__SVUint8_t'
|-TypedefDecl 0x15280c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x152055e30 '__SVUint16_t'
|-TypedefDecl 0x15280c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x152055e50 '__SVUint32_t'
|-TypedefDecl 0x15280c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x152055e70 '__SVUint64_t'
|-TypedefDecl 0x15280c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x152055e90 '__SVFloat16_t'
|-TypedefDecl 0x15280c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x152055eb0 '__SVFloat32_t'
|-TypedefDecl 0x15280c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x152055ed0 '__SVFloat64_t'
|-TypedefDecl 0x15280c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x152055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x15280c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x152055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x15280c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x152055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x15280c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x152055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x15280c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x152055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x15280c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x152055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x15280c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x152055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x15280c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x152055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x15280c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x152055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x15280c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x152056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x15280c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x152056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x15280c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x152056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x15280c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x152056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x15280c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x152056090 '__clang_svint8x3_t'
|-TypedefDecl 0x15280c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1520560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x15280c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1520560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x15280c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1520560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x15280c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x152056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x15280ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x152056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x15280cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x152056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x15280cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x152056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x15280cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x152056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x15280d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1520561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x15280d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1520561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x15280d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1520561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x15280d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x152056210 '__clang_svint8x4_t'
|-TypedefDecl 0x15280d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x152056230 '__clang_svint16x4_t'
|-TypedefDecl 0x15280d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x152056250 '__clang_svint32x4_t'
|-TypedefDecl 0x15280d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x152056270 '__clang_svint64x4_t'
|-TypedefDecl 0x15280d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x152056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x15280d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1520562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x15280d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1520562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x15280d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1520562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x15280d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x152056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x15280d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x152056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x15280d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x152056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x15280d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x152056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x15280da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x152056390 '__SVBool_t'
|-TypedefDecl 0x15280da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1520563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x15280dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1520563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x15280db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1520563f0 '__SVCount_t'
|-TypedefDecl 0x15280dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x15280dbb0 'char *'
|   `-BuiltinType 0x1520556b0 'char'
|-TypedefDecl 0x15280dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x15280dbb0 'char *'
|   `-BuiltinType 0x1520556b0 'char'
|-FunctionDecl 0x15280ddf0 <dataset_diviso_filec/func3337_vuln.c:1:1, line:61:1> line:1:13 invalid sycc422_to_rgb 'void (int *)' static
| |-ParmVarDecl 0x15280dd28 <col:28, col:41> col:41 referenced invalid img 'int *'
| `-CompoundStmt 0x15282dd90 <line:2:1, line:61:1>
|   |-DeclStmt 0x15280e1d8 <line:3:2, col:31>
|   | |-VarDecl 0x15280deb8 <col:2, col:7> col:7 used d0 'int *'
|   | |-VarDecl 0x15280df38 <col:2, col:12> col:12 used d1 'int *'
|   | |-VarDecl 0x15280dfb8 <col:2, col:17> col:17 used d2 'int *'
|   | |-VarDecl 0x15280e038 <col:2, col:22> col:22 used r 'int *'
|   | |-VarDecl 0x15280e0b8 <col:2, col:26> col:26 used g 'int *'
|   | `-VarDecl 0x15280e138 <col:2, col:30> col:30 used b 'int *'
|   |-DeclStmt 0x15280e390 <line:4:2, col:24>
|   | |-VarDecl 0x15280e208 <col:2, col:13> col:13 used y 'const int *'
|   | |-VarDecl 0x15280e288 <col:2, col:17> col:17 used cb 'const int *'
|   | `-VarDecl 0x15280e308 <col:2, col:22> col:22 used cr 'const int *'
|   |-DeclStmt 0x152827588 <line:5:2, col:30>
|   | |-VarDecl 0x152827400 <col:2, col:15> col:15 used maxw 'unsigned int'
|   | |-VarDecl 0x152827480 <col:2, col:21> col:21 used maxh 'unsigned int'
|   | `-VarDecl 0x152827500 <col:2, col:27> col:27 used max 'unsigned int'
|   |-DeclStmt 0x1528276b8 <line:6:2, col:17>
|   | |-VarDecl 0x1528275b8 <col:2, col:6> col:6 used offset 'int'
|   | `-VarDecl 0x152827638 <col:2, col:14> col:14 used upb 'int'
|   |-DeclStmt 0x1528277e8 <line:7:2, col:19>
|   | |-VarDecl 0x1528276e8 <col:2, col:15> col:15 used i 'unsigned int'
|   | `-VarDecl 0x152827768 <col:2, col:18> col:18 used j 'unsigned int'
|   |-BinaryOperator 0x152827968 <line:9:2, col:27> 'int' contains-errors '='
|   | |-DeclRefExpr 0x152827800 <col:2> 'int' lvalue Var 0x152827638 'upb' 'int'
|   | `-CStyleCastExpr 0x152827940 <col:8, col:27> 'int' contains-errors <Dependent>
|   |   `-CXXDependentScopeMemberExpr 0x1528278e0 <col:13, col:27> '<dependent type>' contains-errors lvalue .prec
|   |     `-ArraySubscriptExpr 0x1528278c0 <col:13, col:25> '<dependent type>' contains-errors lvalue
|   |       |-ImplicitCastExpr 0x1528278a8 <col:13, col:18> '<dependent type>' contains-errors <LValueToRValue>
|   |       | `-CXXDependentScopeMemberExpr 0x152827840 <col:13, col:18> '<dependent type>' contains-errors lvalue ->comps
|   |       |   `-RecoveryExpr 0x152827820 <col:13> '<dependent type>' contains-errors lvalue
|   |       `-IntegerLiteral 0x152827888 <col:24> 'int' 0
|   |-BinaryOperator 0x152827a80 <line:10:2, col:22> 'int' '='
|   | |-DeclRefExpr 0x152827988 <col:2> 'int' lvalue Var 0x1528275b8 'offset' 'int'
|   | `-BinaryOperator 0x152827a60 <col:11, col:22> 'int' '<<'
|   |   |-IntegerLiteral 0x1528279a8 <col:11> 'int' 1
|   |   `-ParenExpr 0x152827a40 <col:14, col:22> 'int'
|   |     `-BinaryOperator 0x152827a20 <col:15, col:21> 'int' '-'
|   |       |-ImplicitCastExpr 0x152827a08 <col:15> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1528279c8 <col:15> 'int' lvalue Var 0x152827638 'upb' 'int'
|   |       `-IntegerLiteral 0x1528279e8 <col:21> 'int' 1
|   |-BinaryOperator 0x152827b98 <col:25, col:40> 'int' '='
|   | |-DeclRefExpr 0x152827aa0 <col:25> 'int' lvalue Var 0x152827638 'upb' 'int'
|   | `-BinaryOperator 0x152827b78 <col:31, col:40> 'int' '-'
|   |   |-ParenExpr 0x152827b38 <col:31, col:38> 'int'
|   |   | `-BinaryOperator 0x152827b18 <col:32, col:35> 'int' '<<'
|   |   |   |-IntegerLiteral 0x152827ac0 <col:32> 'int' 1
|   |   |   `-ImplicitCastExpr 0x152827b00 <col:35> 'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x152827ae0 <col:35> 'int' lvalue Var 0x152827638 'upb' 'int'
|   |   `-IntegerLiteral 0x152827b58 <col:40> 'int' 1
|   |-BinaryOperator 0x152827d20 <line:12:2, col:37> 'unsigned int' contains-errors '='
|   | |-DeclRefExpr 0x152827bb8 <col:2> 'unsigned int' lvalue Var 0x152827400 'maxw' 'unsigned int'
|   | `-CStyleCastExpr 0x152827cf8 <col:9, col:37> 'unsigned int' contains-errors <Dependent>
|   |   `-CXXDependentScopeMemberExpr 0x152827c98 <col:23, col:37> '<dependent type>' contains-errors lvalue .w
|   |     `-ArraySubscriptExpr 0x152827c78 <col:23, col:35> '<dependent type>' contains-errors lvalue
|   |       |-ImplicitCastExpr 0x152827c60 <col:23, col:28> '<dependent type>' contains-errors <LValueToRValue>
|   |       | `-CXXDependentScopeMemberExpr 0x152827bf8 <col:23, col:28> '<dependent type>' contains-errors lvalue ->comps
|   |       |   `-RecoveryExpr 0x152827bd8 <col:23> '<dependent type>' contains-errors lvalue
|   |       `-IntegerLiteral 0x152827c40 <col:34> 'int' 0
|   |-BinaryOperator 0x152827ea8 <col:40, col:75> 'unsigned int' contains-errors '='
|   | |-DeclRefExpr 0x152827d40 <col:40> 'unsigned int' lvalue Var 0x152827480 'maxh' 'unsigned int'
|   | `-CStyleCastExpr 0x152827e80 <col:47, col:75> 'unsigned int' contains-errors <Dependent>
|   |   `-CXXDependentScopeMemberExpr 0x152827e20 <col:61, col:75> '<dependent type>' contains-errors lvalue .h
|   |     `-ArraySubscriptExpr 0x152827e00 <col:61, col:73> '<dependent type>' contains-errors lvalue
|   |       |-ImplicitCastExpr 0x152827de8 <col:61, col:66> '<dependent type>' contains-errors <LValueToRValue>
|   |       | `-CXXDependentScopeMemberExpr 0x152827d80 <col:61, col:66> '<dependent type>' contains-errors lvalue ->comps
|   |       |   `-RecoveryExpr 0x152827d60 <col:61> '<dependent type>' contains-errors lvalue
|   |       `-IntegerLiteral 0x152827dc8 <col:72> 'int' 0
|   |-BinaryOperator 0x152827f78 <line:13:2, col:15> 'unsigned int' '='
|   | |-DeclRefExpr 0x152827ec8 <col:2> 'unsigned int' lvalue Var 0x152827500 'max' 'unsigned int'
|   | `-BinaryOperator 0x152827f58 <col:8, col:15> 'unsigned int' '*'
|   |   |-ImplicitCastExpr 0x152827f28 <col:8> 'unsigned int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x152827ee8 <col:8> 'unsigned int' lvalue Var 0x152827400 'maxw' 'unsigned int'
|   |   `-ImplicitCastExpr 0x152827f40 <col:15> 'unsigned int' <LValueToRValue>
|   |     `-DeclRefExpr 0x152827f08 <col:15> 'unsigned int' lvalue Var 0x152827480 'maxh' 'unsigned int'
|   |-BinaryOperator 0x1528280c0 <line:15:2, col:20> 'const int *' contains-errors '='
|   | |-DeclRefExpr 0x152827f98 <col:2> 'const int *' lvalue Var 0x15280e208 'y' 'const int *'
|   | `-CXXDependentScopeMemberExpr 0x152828078 <col:6, col:20> '<dependent type>' contains-errors lvalue .data
|   |   `-ArraySubscriptExpr 0x152828058 <col:6, col:18> '<dependent type>' contains-errors lvalue
|   |     |-ImplicitCastExpr 0x152828040 <col:6, col:11> '<dependent type>' contains-errors <LValueToRValue>
|   |     | `-CXXDependentScopeMemberExpr 0x152827fd8 <col:6, col:11> '<dependent type>' contains-errors lvalue ->comps
|   |     |   `-RecoveryExpr 0x152827fb8 <col:6> '<dependent type>' contains-errors lvalue
|   |     `-IntegerLiteral 0x152828020 <col:17> 'int' 0
|   |-BinaryOperator 0x152828208 <line:16:2, col:21> 'const int *' contains-errors '='
|   | |-DeclRefExpr 0x1528280e0 <col:2> 'const int *' lvalue Var 0x15280e288 'cb' 'const int *'
|   | `-CXXDependentScopeMemberExpr 0x1528281c0 <col:7, col:21> '<dependent type>' contains-errors lvalue .data
|   |   `-ArraySubscriptExpr 0x1528281a0 <col:7, col:19> '<dependent type>' contains-errors lvalue
|   |     |-ImplicitCastExpr 0x152828188 <col:7, col:12> '<dependent type>' contains-errors <LValueToRValue>
|   |     | `-CXXDependentScopeMemberExpr 0x152828120 <col:7, col:12> '<dependent type>' contains-errors lvalue ->comps
|   |     |   `-RecoveryExpr 0x152828100 <col:7> '<dependent type>' contains-errors lvalue
|   |     `-IntegerLiteral 0x152828168 <col:18> 'int' 1
|   |-BinaryOperator 0x152828350 <line:17:2, col:21> 'const int *' contains-errors '='
|   | |-DeclRefExpr 0x152828228 <col:2> 'const int *' lvalue Var 0x15280e308 'cr' 'const int *'
|   | `-CXXDependentScopeMemberExpr 0x152828308 <col:7, col:21> '<dependent type>' contains-errors lvalue .data
|   |   `-ArraySubscriptExpr 0x1528282e8 <col:7, col:19> '<dependent type>' contains-errors lvalue
|   |     |-ImplicitCastExpr 0x1528282d0 <col:7, col:12> '<dependent type>' contains-errors <LValueToRValue>
|   |     | `-CXXDependentScopeMemberExpr 0x152828268 <col:7, col:12> '<dependent type>' contains-errors lvalue ->comps
|   |     |   `-RecoveryExpr 0x152828248 <col:7> '<dependent type>' contains-errors lvalue
|   |     `-IntegerLiteral 0x1528282b0 <col:18> 'int' 2
|   |-IfStmt 0x152829ff0 <line:23:2, col:47>
|   | |-BinaryOperator 0x152829f68 <col:5, col:36> 'int' contains-errors '||'
|   | | |-BinaryOperator 0x152829f08 <col:5, col:23> 'int' contains-errors '||'
|   | | | |-BinaryOperator 0x152829ea8 <col:5, col:10> 'int' contains-errors '=='
|   | | | | |-DeclRefExpr 0x152829d40 <col:5> 'int *' lvalue Var 0x15280e038 'r' 'int *'
|   | | | | `-RecoveryExpr 0x152829e88 <col:10> '<dependent type>' contains-errors lvalue
|   | | | `-BinaryOperator 0x152829ee8 <col:18, col:23> 'int' contains-errors '=='
|   | | |   |-DeclRefExpr 0x152829d98 <col:18> 'int *' lvalue Var 0x15280e0b8 'g' 'int *'
|   | | |   `-RecoveryExpr 0x152829ec8 <col:23> '<dependent type>' contains-errors lvalue
|   | | `-BinaryOperator 0x152829f48 <col:31, col:36> 'int' contains-errors '=='
|   | |   |-DeclRefExpr 0x152829e10 <col:31> 'int *' lvalue Var 0x15280e138 'b' 'int *'
|   | |   `-RecoveryExpr 0x152829f28 <col:36> '<dependent type>' contains-errors lvalue
|   | `-GotoStmt 0x152829fd8 <col:42, col:47> 'fails' 0x152829f88
|   |-ForStmt 0x152123ce8 <line:25:2, line:38:2>
|   | |-BinaryOperator 0x15282a050 <line:25:6, col:8> 'unsigned int' '='
|   | | |-DeclRefExpr 0x15282a010 <col:6> 'unsigned int' lvalue Var 0x1528276e8 'i' 'unsigned int'
|   | | `-IntegerLiteral 0x15282a030 <col:8> 'unsigned int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x15282a0e0 <col:12, col:16> 'int' '<'
|   | | |-ImplicitCastExpr 0x15282a0b0 <col:12> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x15282a070 <col:12> 'unsigned int' lvalue Var 0x1528276e8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x15282a0c8 <col:16> 'unsigned int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x15282a090 <col:16> 'unsigned int' lvalue Var 0x152827480 'maxh' 'unsigned int'
|   | |-UnaryOperator 0x15282a120 <col:22, col:24> 'unsigned int' prefix '++'
|   | | `-DeclRefExpr 0x15282a100 <col:24> 'unsigned int' lvalue Var 0x1528276e8 'i' 'unsigned int'
|   | `-CompoundStmt 0x152123cc8 <line:26:2, line:38:2>
|   |   |-ForStmt 0x152123760 <line:27:3, line:33:3>
|   |   | |-BinaryOperator 0x15282a178 <line:27:7, col:9> 'unsigned int' '='
|   |   | | |-DeclRefExpr 0x15282a138 <col:7> 'unsigned int' lvalue Var 0x152827768 'j' 'unsigned int'
|   |   | | `-IntegerLiteral 0x15282a158 <col:9> 'unsigned int' 0
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x15282a2c0 <col:13, col:42> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x15282a2a8 <col:13> 'unsigned int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x15282a198 <col:13> 'unsigned int' lvalue Var 0x152827768 'j' 'unsigned int'
|   |   | | `-ParenExpr 0x15282a288 <col:17, col:42> 'unsigned int'
|   |   | |   `-BinaryOperator 0x15282a268 <col:18, col:40> 'unsigned int' '&'
|   |   | |     |-ImplicitCastExpr 0x15282a250 <col:18> 'unsigned int' <LValueToRValue>
|   |   | |     | `-DeclRefExpr 0x15282a1b8 <col:18> 'unsigned int' lvalue Var 0x152827400 'maxw' 'unsigned int'
|   |   | |     `-UnaryOperator 0x15282a238 <col:25, col:40> 'unsigned int' prefix '~' cannot overflow
|   |   | |       `-CStyleCastExpr 0x15282a210 <col:26, col:40> 'unsigned int' <NoOp>
|   |   | |         `-IntegerLiteral 0x15282a1d8 <col:40> 'unsigned int' 1
|   |   | |-CompoundAssignOperator 0x15282a320 <col:45, col:50> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   |   | | |-DeclRefExpr 0x15282a2e0 <col:45> 'unsigned int' lvalue Var 0x152827768 'j' 'unsigned int'
|   |   | | `-IntegerLiteral 0x15282a300 <col:50> 'unsigned int' 2
|   |   | `-CompoundStmt 0x1521236f0 <line:28:3, line:33:3>
|   |   |   |-CallExpr 0x1521230b8 <line:29:4, col:50> 'int'
|   |   |   | |-ImplicitCastExpr 0x1521230a0 <col:4> 'int (*)()' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x152122eb8 <col:4> 'int ()' Function 0x152122e00 'sycc_to_rgb' 'int ()'
|   |   |   | |-ImplicitCastExpr 0x152123118 <col:16> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x152122ed8 <col:16> 'int' lvalue Var 0x1528275b8 'offset' 'int'
|   |   |   | |-ImplicitCastExpr 0x152123130 <col:24> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x152122ef8 <col:24> 'int' lvalue Var 0x152827638 'upb' 'int'
|   |   |   | |-ImplicitCastExpr 0x152123148 <col:29, col:30> 'int' <LValueToRValue>
|   |   |   | | `-UnaryOperator 0x152122f50 <col:29, col:30> 'const int' lvalue prefix '*' cannot overflow
|   |   |   | |   `-ImplicitCastExpr 0x152122f38 <col:30> 'const int *' <LValueToRValue>
|   |   |   | |     `-DeclRefExpr 0x152122f18 <col:30> 'const int *' lvalue Var 0x15280e208 'y' 'const int *'
|   |   |   | |-ImplicitCastExpr 0x152123160 <col:33, col:34> 'int' <LValueToRValue>
|   |   |   | | `-UnaryOperator 0x152122fa0 <col:33, col:34> 'const int' lvalue prefix '*' cannot overflow
|   |   |   | |   `-ImplicitCastExpr 0x152122f88 <col:34> 'const int *' <LValueToRValue>
|   |   |   | |     `-DeclRefExpr 0x152122f68 <col:34> 'const int *' lvalue Var 0x15280e288 'cb' 'const int *'
|   |   |   | |-ImplicitCastExpr 0x152123178 <col:38, col:39> 'int' <LValueToRValue>
|   |   |   | | `-UnaryOperator 0x152122ff0 <col:38, col:39> 'const int' lvalue prefix '*' cannot overflow
|   |   |   | |   `-ImplicitCastExpr 0x152122fd8 <col:39> 'const int *' <LValueToRValue>
|   |   |   | |     `-DeclRefExpr 0x152122fb8 <col:39> 'const int *' lvalue Var 0x15280e308 'cr' 'const int *'
|   |   |   | |-ImplicitCastExpr 0x152123190 <col:43> 'int *' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x152123008 <col:43> 'int *' lvalue Var 0x15280e038 'r' 'int *'
|   |   |   | |-ImplicitCastExpr 0x1521231a8 <col:46> 'int *' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x152123028 <col:46> 'int *' lvalue Var 0x15280e0b8 'g' 'int *'
|   |   |   | `-ImplicitCastExpr 0x1521231c0 <col:49> 'int *' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x152123048 <col:49> 'int *' lvalue Var 0x15280e138 'b' 'int *'
|   |   |   |-UnaryOperator 0x1521231f8 <line:30:4, col:6> 'const int *' prefix '++'
|   |   |   | `-DeclRefExpr 0x1521231d8 <col:6> 'const int *' lvalue Var 0x15280e208 'y' 'const int *'
|   |   |   |-UnaryOperator 0x152123230 <col:9, col:11> 'int *' prefix '++'
|   |   |   | `-DeclRefExpr 0x152123210 <col:11> 'int *' lvalue Var 0x15280e038 'r' 'int *'
|   |   |   |-UnaryOperator 0x152123268 <col:14, col:16> 'int *' prefix '++'
|   |   |   | `-DeclRefExpr 0x152123248 <col:16> 'int *' lvalue Var 0x15280e0b8 'g' 'int *'
|   |   |   |-UnaryOperator 0x1521232a0 <col:19, col:21> 'int *' prefix '++'
|   |   |   | `-DeclRefExpr 0x152123280 <col:21> 'int *' lvalue Var 0x15280e138 'b' 'int *'
|   |   |   |-CallExpr 0x152123480 <line:31:4, col:50> 'int'
|   |   |   | |-ImplicitCastExpr 0x152123468 <col:4> 'int (*)()' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x1521232b8 <col:4> 'int ()' Function 0x152122e00 'sycc_to_rgb' 'int ()'
|   |   |   | |-ImplicitCastExpr 0x1521234e0 <col:16> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x1521232d8 <col:16> 'int' lvalue Var 0x1528275b8 'offset' 'int'
|   |   |   | |-ImplicitCastExpr 0x1521234f8 <col:24> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x1521232f8 <col:24> 'int' lvalue Var 0x152827638 'upb' 'int'
|   |   |   | |-ImplicitCastExpr 0x152123510 <col:29, col:30> 'int' <LValueToRValue>
|   |   |   | | `-UnaryOperator 0x152123350 <col:29, col:30> 'const int' lvalue prefix '*' cannot overflow
|   |   |   | |   `-ImplicitCastExpr 0x152123338 <col:30> 'const int *' <LValueToRValue>
|   |   |   | |     `-DeclRefExpr 0x152123318 <col:30> 'const int *' lvalue Var 0x15280e208 'y' 'const int *'
|   |   |   | |-ImplicitCastExpr 0x152123528 <col:33, col:34> 'int' <LValueToRValue>
|   |   |   | | `-UnaryOperator 0x1521233a0 <col:33, col:34> 'const int' lvalue prefix '*' cannot overflow
|   |   |   | |   `-ImplicitCastExpr 0x152123388 <col:34> 'const int *' <LValueToRValue>
|   |   |   | |     `-DeclRefExpr 0x152123368 <col:34> 'const int *' lvalue Var 0x15280e288 'cb' 'const int *'
|   |   |   | |-ImplicitCastExpr 0x152123540 <col:38, col:39> 'int' <LValueToRValue>
|   |   |   | | `-UnaryOperator 0x1521233f0 <col:38, col:39> 'const int' lvalue prefix '*' cannot overflow
|   |   |   | |   `-ImplicitCastExpr 0x1521233d8 <col:39> 'const int *' <LValueToRValue>
|   |   |   | |     `-DeclRefExpr 0x1521233b8 <col:39> 'const int *' lvalue Var 0x15280e308 'cr' 'const int *'
|   |   |   | |-ImplicitCastExpr 0x152123558 <col:43> 'int *' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x152123408 <col:43> 'int *' lvalue Var 0x15280e038 'r' 'int *'
|   |   |   | |-ImplicitCastExpr 0x152123570 <col:46> 'int *' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x152123428 <col:46> 'int *' lvalue Var 0x15280e0b8 'g' 'int *'
|   |   |   | `-ImplicitCastExpr 0x152123588 <col:49> 'int *' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x152123448 <col:49> 'int *' lvalue Var 0x15280e138 'b' 'int *'
|   |   |   |-UnaryOperator 0x1521235c0 <line:32:4, col:6> 'const int *' prefix '++'
|   |   |   | `-DeclRefExpr 0x1521235a0 <col:6> 'const int *' lvalue Var 0x15280e208 'y' 'const int *'
|   |   |   |-UnaryOperator 0x1521235f8 <col:9, col:11> 'int *' prefix '++'
|   |   |   | `-DeclRefExpr 0x1521235d8 <col:11> 'int *' lvalue Var 0x15280e038 'r' 'int *'
|   |   |   |-UnaryOperator 0x152123630 <col:14, col:16> 'int *' prefix '++'
|   |   |   | `-DeclRefExpr 0x152123610 <col:16> 'int *' lvalue Var 0x15280e0b8 'g' 'int *'
|   |   |   |-UnaryOperator 0x152123668 <col:19, col:21> 'int *' prefix '++'
|   |   |   | `-DeclRefExpr 0x152123648 <col:21> 'int *' lvalue Var 0x15280e138 'b' 'int *'
|   |   |   |-UnaryOperator 0x1521236a0 <col:24, col:26> 'const int *' prefix '++'
|   |   |   | `-DeclRefExpr 0x152123680 <col:26> 'const int *' lvalue Var 0x15280e288 'cb' 'const int *'
|   |   |   `-UnaryOperator 0x1521236d8 <col:30, col:32> 'const int *' prefix '++'
|   |   |     `-DeclRefExpr 0x1521236b8 <col:32> 'const int *' lvalue Var 0x15280e308 'cr' 'const int *'
|   |   `-IfStmt 0x152123ca8 <line:34:3, line:37:3>
|   |     |-BinaryOperator 0x152123808 <line:34:7, col:11> 'int' '<'
|   |     | |-ImplicitCastExpr 0x1521237d8 <col:7> 'unsigned int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x152123798 <col:7> 'unsigned int' lvalue Var 0x152827768 'j' 'unsigned int'
|   |     | `-ImplicitCastExpr 0x1521237f0 <col:11> 'unsigned int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x1521237b8 <col:11> 'unsigned int' lvalue Var 0x152827400 'maxw' 'unsigned int'
|   |     `-CompoundStmt 0x152123c60 <col:17, line:37:3>
|   |       |-CallExpr 0x1521239f0 <line:35:4, col:50> 'int'
|   |       | |-ImplicitCastExpr 0x1521239d8 <col:4> 'int (*)()' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x152123828 <col:4> 'int ()' Function 0x152122e00 'sycc_to_rgb' 'int ()'
|   |       | |-ImplicitCastExpr 0x152123a50 <col:16> 'int' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x152123848 <col:16> 'int' lvalue Var 0x1528275b8 'offset' 'int'
|   |       | |-ImplicitCastExpr 0x152123a68 <col:24> 'int' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x152123868 <col:24> 'int' lvalue Var 0x152827638 'upb' 'int'
|   |       | |-ImplicitCastExpr 0x152123a80 <col:29, col:30> 'int' <LValueToRValue>
|   |       | | `-UnaryOperator 0x1521238c0 <col:29, col:30> 'const int' lvalue prefix '*' cannot overflow
|   |       | |   `-ImplicitCastExpr 0x1521238a8 <col:30> 'const int *' <LValueToRValue>
|   |       | |     `-DeclRefExpr 0x152123888 <col:30> 'const int *' lvalue Var 0x15280e208 'y' 'const int *'
|   |       | |-ImplicitCastExpr 0x152123a98 <col:33, col:34> 'int' <LValueToRValue>
|   |       | | `-UnaryOperator 0x152123910 <col:33, col:34> 'const int' lvalue prefix '*' cannot overflow
|   |       | |   `-ImplicitCastExpr 0x1521238f8 <col:34> 'const int *' <LValueToRValue>
|   |       | |     `-DeclRefExpr 0x1521238d8 <col:34> 'const int *' lvalue Var 0x15280e288 'cb' 'const int *'
|   |       | |-ImplicitCastExpr 0x152123ab0 <col:38, col:39> 'int' <LValueToRValue>
|   |       | | `-UnaryOperator 0x152123960 <col:38, col:39> 'const int' lvalue prefix '*' cannot overflow
|   |       | |   `-ImplicitCastExpr 0x152123948 <col:39> 'const int *' <LValueToRValue>
|   |       | |     `-DeclRefExpr 0x152123928 <col:39> 'const int *' lvalue Var 0x15280e308 'cr' 'const int *'
|   |       | |-ImplicitCastExpr 0x152123ac8 <col:43> 'int *' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x152123978 <col:43> 'int *' lvalue Var 0x15280e038 'r' 'int *'
|   |       | |-ImplicitCastExpr 0x152123ae0 <col:46> 'int *' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x152123998 <col:46> 'int *' lvalue Var 0x15280e0b8 'g' 'int *'
|   |       | `-ImplicitCastExpr 0x152123af8 <col:49> 'int *' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x1521239b8 <col:49> 'int *' lvalue Var 0x15280e138 'b' 'int *'
|   |       |-UnaryOperator 0x152123b30 <line:36:4, col:6> 'const int *' prefix '++'
|   |       | `-DeclRefExpr 0x152123b10 <col:6> 'const int *' lvalue Var 0x15280e208 'y' 'const int *'
|   |       |-UnaryOperator 0x152123b68 <col:9, col:11> 'int *' prefix '++'
|   |       | `-DeclRefExpr 0x152123b48 <col:11> 'int *' lvalue Var 0x15280e038 'r' 'int *'
|   |       |-UnaryOperator 0x152123ba0 <col:14, col:16> 'int *' prefix '++'
|   |       | `-DeclRefExpr 0x152123b80 <col:16> 'int *' lvalue Var 0x15280e0b8 'g' 'int *'
|   |       |-UnaryOperator 0x152123bd8 <col:19, col:21> 'int *' prefix '++'
|   |       | `-DeclRefExpr 0x152123bb8 <col:21> 'int *' lvalue Var 0x15280e138 'b' 'int *'
|   |       |-UnaryOperator 0x152123c10 <col:24, col:26> 'const int *' prefix '++'
|   |       | `-DeclRefExpr 0x152123bf0 <col:26> 'const int *' lvalue Var 0x15280e288 'cb' 'const int *'
|   |       `-UnaryOperator 0x152123c48 <col:30, col:32> 'const int *' prefix '++'
|   |         `-DeclRefExpr 0x152123c28 <col:32> 'const int *' lvalue Var 0x15280e308 'cr' 'const int *'
|   |-CallExpr 0x15282c408 <line:39:2, col:25> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x15282c2c8 <col:2> 'void (void *)' Function 0x152123d58 'free' 'void (void *)'
|   | `-CXXDependentScopeMemberExpr 0x15282c3a8 <col:7, col:21> '<dependent type>' contains-errors lvalue .data
|   |   `-ArraySubscriptExpr 0x15282c388 <col:7, col:19> '<dependent type>' contains-errors lvalue
|   |     |-ImplicitCastExpr 0x15282c370 <col:7, col:12> '<dependent type>' contains-errors <LValueToRValue>
|   |     | `-CXXDependentScopeMemberExpr 0x15282c308 <col:7, col:12> '<dependent type>' contains-errors lvalue ->comps
|   |     |   `-RecoveryExpr 0x15282c2e8 <col:7> '<dependent type>' contains-errors lvalue
|   |     `-IntegerLiteral 0x15282c350 <col:18> 'int' 0
|   |-BinaryOperator 0x15282c580 <col:28, col:49> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x15282c518 <col:28, col:42> '<dependent type>' contains-errors lvalue .data
|   | | `-ArraySubscriptExpr 0x15282c4f8 <col:28, col:40> '<dependent type>' contains-errors lvalue
|   | |   |-ImplicitCastExpr 0x15282c4e0 <col:28, col:33> '<dependent type>' contains-errors <LValueToRValue>
|   | |   | `-CXXDependentScopeMemberExpr 0x15282c478 <col:28, col:33> '<dependent type>' contains-errors lvalue ->comps
|   | |   |   `-RecoveryExpr 0x15282c450 <col:28> '<dependent type>' contains-errors lvalue
|   | |   |     `-DeclRefExpr 0x15282c430 <col:28> 'int *' lvalue ParmVar 0x15280dd28 'img' 'int *'
|   | |   `-IntegerLiteral 0x15282c4c0 <col:39> 'int' 0
|   | `-DeclRefExpr 0x15282c560 <col:49> 'int *' lvalue Var 0x15280deb8 'd0' 'int *'
|   |-CallExpr 0x15282c6e0 <line:40:2, col:25> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x15282c5a0 <col:2> 'void (void *)' Function 0x152123d58 'free' 'void (void *)'
|   | `-CXXDependentScopeMemberExpr 0x15282c680 <col:7, col:21> '<dependent type>' contains-errors lvalue .data
|   |   `-ArraySubscriptExpr 0x15282c660 <col:7, col:19> '<dependent type>' contains-errors lvalue
|   |     |-ImplicitCastExpr 0x15282c648 <col:7, col:12> '<dependent type>' contains-errors <LValueToRValue>
|   |     | `-CXXDependentScopeMemberExpr 0x15282c5e0 <col:7, col:12> '<dependent type>' contains-errors lvalue ->comps
|   |     |   `-RecoveryExpr 0x15282c5c0 <col:7> '<dependent type>' contains-errors lvalue
|   |     `-IntegerLiteral 0x15282c628 <col:18> 'int' 1
|   |-BinaryOperator 0x15282c858 <col:28, col:49> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x15282c7f0 <col:28, col:42> '<dependent type>' contains-errors lvalue .data
|   | | `-ArraySubscriptExpr 0x15282c7d0 <col:28, col:40> '<dependent type>' contains-errors lvalue
|   | |   |-ImplicitCastExpr 0x15282c7b8 <col:28, col:33> '<dependent type>' contains-errors <LValueToRValue>
|   | |   | `-CXXDependentScopeMemberExpr 0x15282c750 <col:28, col:33> '<dependent type>' contains-errors lvalue ->comps
|   | |   |   `-RecoveryExpr 0x15282c728 <col:28> '<dependent type>' contains-errors lvalue
|   | |   |     `-DeclRefExpr 0x15282c708 <col:28> 'int *' lvalue ParmVar 0x15280dd28 'img' 'int *'
|   | |   `-IntegerLiteral 0x15282c798 <col:39> 'int' 1
|   | `-DeclRefExpr 0x15282c838 <col:49> 'int *' lvalue Var 0x15280df38 'd1' 'int *'
|   |-CallExpr 0x15282c9b8 <line:41:2, col:25> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x15282c878 <col:2> 'void (void *)' Function 0x152123d58 'free' 'void (void *)'
|   | `-CXXDependentScopeMemberExpr 0x15282c958 <col:7, col:21> '<dependent type>' contains-errors lvalue .data
|   |   `-ArraySubscriptExpr 0x15282c938 <col:7, col:19> '<dependent type>' contains-errors lvalue
|   |     |-ImplicitCastExpr 0x15282c920 <col:7, col:12> '<dependent type>' contains-errors <LValueToRValue>
|   |     | `-CXXDependentScopeMemberExpr 0x15282c8b8 <col:7, col:12> '<dependent type>' contains-errors lvalue ->comps
|   |     |   `-RecoveryExpr 0x15282c898 <col:7> '<dependent type>' contains-errors lvalue
|   |     `-IntegerLiteral 0x15282c900 <col:18> 'int' 2
|   |-BinaryOperator 0x15282cb30 <col:28, col:49> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x15282cac8 <col:28, col:42> '<dependent type>' contains-errors lvalue .data
|   | | `-ArraySubscriptExpr 0x15282caa8 <col:28, col:40> '<dependent type>' contains-errors lvalue
|   | |   |-ImplicitCastExpr 0x15282ca90 <col:28, col:33> '<dependent type>' contains-errors <LValueToRValue>
|   | |   | `-CXXDependentScopeMemberExpr 0x15282ca28 <col:28, col:33> '<dependent type>' contains-errors lvalue ->comps
|   | |   |   `-RecoveryExpr 0x15282ca00 <col:28> '<dependent type>' contains-errors lvalue
|   | |   |     `-DeclRefExpr 0x15282c9e0 <col:28> 'int *' lvalue ParmVar 0x15280dd28 'img' 'int *'
|   | |   `-IntegerLiteral 0x15282ca70 <col:39> 'int' 2
|   | `-DeclRefExpr 0x15282cb10 <col:49> 'int *' lvalue Var 0x15280dfb8 'd2' 'int *'
|   |-BinaryOperator 0x15282d2a0 <line:50:2, col:35> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x15282d140 <col:2, col:16> '<dependent type>' contains-errors lvalue .dx
|   | | `-ArraySubscriptExpr 0x15282d120 <col:2, col:14> '<dependent type>' contains-errors lvalue
|   | |   |-ImplicitCastExpr 0x15282d108 <col:2, col:7> '<dependent type>' contains-errors <LValueToRValue>
|   | |   | `-CXXDependentScopeMemberExpr 0x15282d0a0 <col:2, col:7> '<dependent type>' contains-errors lvalue ->comps
|   | |   |   `-RecoveryExpr 0x15282d078 <col:2> '<dependent type>' contains-errors lvalue
|   | |   |     `-DeclRefExpr 0x15282d058 <col:2> 'int *' lvalue ParmVar 0x15280dd28 'img' 'int *'
|   | |   `-IntegerLiteral 0x15282d0e8 <col:13> 'int' 1
|   | `-CXXDependentScopeMemberExpr 0x15282d258 <col:21, col:35> '<dependent type>' contains-errors lvalue .dx
|   |   `-ArraySubscriptExpr 0x15282d238 <col:21, col:33> '<dependent type>' contains-errors lvalue
|   |     |-ImplicitCastExpr 0x15282d220 <col:21, col:26> '<dependent type>' contains-errors <LValueToRValue>
|   |     | `-CXXDependentScopeMemberExpr 0x15282d1a8 <col:21, col:26> '<dependent type>' contains-errors lvalue ->comps
|   |     |   `-RecoveryExpr 0x15282d188 <col:21> '<dependent type>' contains-errors lvalue
|   |     `-IntegerLiteral 0x15282d200 <col:32> 'int' 0
|   |-BinaryOperator 0x15282d4f8 <line:51:2, col:35> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x15282d3a8 <col:2, col:16> '<dependent type>' contains-errors lvalue .dx
|   | | `-ArraySubscriptExpr 0x15282d388 <col:2, col:14> '<dependent type>' contains-errors lvalue
|   | |   |-ImplicitCastExpr 0x15282d370 <col:2, col:7> '<dependent type>' contains-errors <LValueToRValue>
|   | |   | `-CXXDependentScopeMemberExpr 0x15282d308 <col:2, col:7> '<dependent type>' contains-errors lvalue ->comps
|   | |   |   `-RecoveryExpr 0x15282d2e0 <col:2> '<dependent type>' contains-errors lvalue
|   | |   |     `-DeclRefExpr 0x15282d2c0 <col:2> 'int *' lvalue ParmVar 0x15280dd28 'img' 'int *'
|   | |   `-IntegerLiteral 0x15282d350 <col:13> 'int' 2
|   | `-CXXDependentScopeMemberExpr 0x15282d4b0 <col:21, col:35> '<dependent type>' contains-errors lvalue .dx
|   |   `-ArraySubscriptExpr 0x15282d490 <col:21, col:33> '<dependent type>' contains-errors lvalue
|   |     |-ImplicitCastExpr 0x15282d478 <col:21, col:26> '<dependent type>' contains-errors <LValueToRValue>
|   |     | `-CXXDependentScopeMemberExpr 0x15282d410 <col:21, col:26> '<dependent type>' contains-errors lvalue ->comps
|   |     |   `-RecoveryExpr 0x15282d3f0 <col:21> '<dependent type>' contains-errors lvalue
|   |     `-IntegerLiteral 0x15282d458 <col:32> 'int' 0
|   |-BinaryOperator 0x15282d750 <line:52:2, col:35> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x15282d600 <col:2, col:16> '<dependent type>' contains-errors lvalue .dy
|   | | `-ArraySubscriptExpr 0x15282d5e0 <col:2, col:14> '<dependent type>' contains-errors lvalue
|   | |   |-ImplicitCastExpr 0x15282d5c8 <col:2, col:7> '<dependent type>' contains-errors <LValueToRValue>
|   | |   | `-CXXDependentScopeMemberExpr 0x15282d560 <col:2, col:7> '<dependent type>' contains-errors lvalue ->comps
|   | |   |   `-RecoveryExpr 0x15282d538 <col:2> '<dependent type>' contains-errors lvalue
|   | |   |     `-DeclRefExpr 0x15282d518 <col:2> 'int *' lvalue ParmVar 0x15280dd28 'img' 'int *'
|   | |   `-IntegerLiteral 0x15282d5a8 <col:13> 'int' 1
|   | `-CXXDependentScopeMemberExpr 0x15282d708 <col:21, col:35> '<dependent type>' contains-errors lvalue .dy
|   |   `-ArraySubscriptExpr 0x15282d6e8 <col:21, col:33> '<dependent type>' contains-errors lvalue
|   |     |-ImplicitCastExpr 0x15282d6d0 <col:21, col:26> '<dependent type>' contains-errors <LValueToRValue>
|   |     | `-CXXDependentScopeMemberExpr 0x15282d668 <col:21, col:26> '<dependent type>' contains-errors lvalue ->comps
|   |     |   `-RecoveryExpr 0x15282d648 <col:21> '<dependent type>' contains-errors lvalue
|   |     `-IntegerLiteral 0x15282d6b0 <col:32> 'int' 0
|   |-BinaryOperator 0x15282d9a8 <line:53:2, col:35> '<dependent type>' contains-errors '='
|   | |-CXXDependentScopeMemberExpr 0x15282d858 <col:2, col:16> '<dependent type>' contains-errors lvalue .dy
|   | | `-ArraySubscriptExpr 0x15282d838 <col:2, col:14> '<dependent type>' contains-errors lvalue
|   | |   |-ImplicitCastExpr 0x15282d820 <col:2, col:7> '<dependent type>' contains-errors <LValueToRValue>
|   | |   | `-CXXDependentScopeMemberExpr 0x15282d7b8 <col:2, col:7> '<dependent type>' contains-errors lvalue ->comps
|   | |   |   `-RecoveryExpr 0x15282d790 <col:2> '<dependent type>' contains-errors lvalue
|   | |   |     `-DeclRefExpr 0x15282d770 <col:2> 'int *' lvalue ParmVar 0x15280dd28 'img' 'int *'
|   | |   `-IntegerLiteral 0x15282d800 <col:13> 'int' 2
|   | `-CXXDependentScopeMemberExpr 0x15282d960 <col:21, col:35> '<dependent type>' contains-errors lvalue .dy
|   |   `-ArraySubscriptExpr 0x15282d940 <col:21, col:33> '<dependent type>' contains-errors lvalue
|   |     |-ImplicitCastExpr 0x15282d928 <col:21, col:26> '<dependent type>' contains-errors <LValueToRValue>
|   |     | `-CXXDependentScopeMemberExpr 0x15282d8c0 <col:21, col:26> '<dependent type>' contains-errors lvalue ->comps
|   |     |   `-RecoveryExpr 0x15282d8a0 <col:21> '<dependent type>' contains-errors lvalue
|   |     `-IntegerLiteral 0x15282d908 <col:32> 'int' 0
|   |-ReturnStmt 0x15282d9c8 <line:54:2>
|   |-LabelStmt 0x15282db30 <line:56:1, line:57:14> 'fails'
|   | `-IfStmt 0x15282db10 <col:2, col:14>
|   |   |-ImplicitCastExpr 0x15282d9f8 <col:5> 'int *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x15282d9d8 <col:5> 'int *' lvalue Var 0x15280e038 'r' 'int *'
|   |   `-CallExpr 0x15282dab8 <col:8, col:14> 'void'
|   |     |-ImplicitCastExpr 0x15282daa0 <col:8> 'void (*)(void *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x15282da10 <col:8> 'void (void *)' Function 0x152123d58 'free' 'void (void *)'
|   |     `-ImplicitCastExpr 0x15282daf8 <col:13> 'void *' <BitCast>
|   |       `-ImplicitCastExpr 0x15282dae0 <col:13> 'int *' <LValueToRValue>
|   |         `-DeclRefExpr 0x15282da30 <col:13> 'int *' lvalue Var 0x15280e038 'r' 'int *'
|   |-IfStmt 0x15282dc50 <line:58:2, col:14>
|   | |-ImplicitCastExpr 0x15282db70 <col:5> 'int *' <LValueToRValue>
|   | | `-DeclRefExpr 0x15282db50 <col:5> 'int *' lvalue Var 0x15280e0b8 'g' 'int *'
|   | `-CallExpr 0x15282dbf8 <col:8, col:14> 'void'
|   |   |-ImplicitCastExpr 0x15282dbe0 <col:8> 'void (*)(void *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x15282db88 <col:8> 'void (void *)' Function 0x152123d58 'free' 'void (void *)'
|   |   `-ImplicitCastExpr 0x15282dc38 <col:13> 'void *' <BitCast>
|   |     `-ImplicitCastExpr 0x15282dc20 <col:13> 'int *' <LValueToRValue>
|   |       `-DeclRefExpr 0x15282dba8 <col:13> 'int *' lvalue Var 0x15280e0b8 'g' 'int *'
|   `-IfStmt 0x15282dd70 <line:59:2, col:14>
|     |-ImplicitCastExpr 0x15282dc90 <col:5> 'int *' <LValueToRValue>
|     | `-DeclRefExpr 0x15282dc70 <col:5> 'int *' lvalue Var 0x15280e138 'b' 'int *'
|     `-CallExpr 0x15282dd18 <col:8, col:14> 'void'
|       |-ImplicitCastExpr 0x15282dd00 <col:8> 'void (*)(void *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x15282dca8 <col:8> 'void (void *)' Function 0x152123d58 'free' 'void (void *)'
|       `-ImplicitCastExpr 0x15282dd58 <col:13> 'void *' <BitCast>
|         `-ImplicitCastExpr 0x15282dd40 <col:13> 'int *' <LValueToRValue>
|           `-DeclRefExpr 0x15282dcc8 <col:13> 'int *' lvalue Var 0x15280e138 'b' 'int *'
|-FunctionDecl 0x152829820 <line:19:17> col:17 implicit used malloc 'void *(unsigned long)' extern
| |-ParmVarDecl 0x152829920 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-BuiltinAttr 0x1528298c8 <<invalid sloc>> Implicit 871
| `-AllocSizeAttr 0x152829990 <col:17> Implicit 1
`-FunctionDecl 0x152123d58 <line:39:2> col:2 implicit used free 'void (void *)' extern
  |-ParmVarDecl 0x15282c258 <<invalid sloc>> <invalid sloc> 'void *'
  `-BuiltinAttr 0x15282c200 <<invalid sloc>> Implicit 873
