TranslationUnitDecl 0x134055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1340564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x134055bd0 '__int128'
|-TypedefDecl 0x134056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x134055bf0 'unsigned __int128'
|-TypedefDecl 0x13480be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13480bc00 'struct __NSConstantString_tag'
|   `-Record 0x134056580 '__NSConstantString_tag'
|-TypedefDecl 0x13480be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x134055d90 '__SVInt8_t'
|-TypedefDecl 0x13480bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x134055db0 '__SVInt16_t'
|-TypedefDecl 0x13480bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x134055dd0 '__SVInt32_t'
|-TypedefDecl 0x13480bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x134055df0 '__SVInt64_t'
|-TypedefDecl 0x13480c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x134055e10 '__SVUint8_t'
|-TypedefDecl 0x13480c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x134055e30 '__SVUint16_t'
|-TypedefDecl 0x13480c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x134055e50 '__SVUint32_t'
|-TypedefDecl 0x13480c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x134055e70 '__SVUint64_t'
|-TypedefDecl 0x13480c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x134055e90 '__SVFloat16_t'
|-TypedefDecl 0x13480c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x134055eb0 '__SVFloat32_t'
|-TypedefDecl 0x13480c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x134055ed0 '__SVFloat64_t'
|-TypedefDecl 0x13480c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x134055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13480c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x134055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13480c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x134055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13480c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x134055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13480c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x134055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13480c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x134055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13480c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x134055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13480c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x134055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13480c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x134055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13480c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x134056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13480c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x134056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13480c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x134056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13480c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x134056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13480c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x134056090 '__clang_svint8x3_t'
|-TypedefDecl 0x13480c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1340560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13480c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1340560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13480c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1340560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13480c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x134056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13480ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x134056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13480cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x134056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13480cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x134056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13480cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x134056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13480d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1340561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13480d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1340561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13480d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1340561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13480d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x134056210 '__clang_svint8x4_t'
|-TypedefDecl 0x13480d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x134056230 '__clang_svint16x4_t'
|-TypedefDecl 0x13480d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x134056250 '__clang_svint32x4_t'
|-TypedefDecl 0x13480d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x134056270 '__clang_svint64x4_t'
|-TypedefDecl 0x13480d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x134056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13480d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1340562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13480d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1340562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13480d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1340562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13480d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x134056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13480d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x134056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13480d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x134056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13480d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x134056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13480da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x134056390 '__SVBool_t'
|-TypedefDecl 0x13480da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1340563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13480dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1340563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13480db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1340563f0 '__SVCount_t'
|-TypedefDecl 0x13480dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13480dbb0 'char *'
|   `-BuiltinType 0x1340556b0 'char'
|-TypedefDecl 0x13480dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13480dbb0 'char *'
|   `-BuiltinType 0x1340556b0 'char'
|-RecordDecl 0x13480dcc0 <dataset_diviso_filec/func15402_nonvuln.c:1:8, col:15> col:15 struct tm
`-FunctionDecl 0x13480e088 <col:1, line:19:2> line:1:19 invalid k_gmtime 'struct tm *(int *, struct tm *)' static
  |-ParmVarDecl 0x13480ddc8 <col:28, col:50> col:50 invalid gtime 'int *'
  |-ParmVarDecl 0x13480dee8 <col:57, col:68> col:68 used k_tm 'struct tm *'
  `-CompoundStmt 0x13482a730 <line:2:2, line:19:2>
    |-DeclStmt 0x13480e250 <line:3:2, col:14>
    | |-VarDecl 0x13480e150 <col:2, col:9> col:9 used c 'char'
    | `-VarDecl 0x13480e1d0 <col:2, col:13> col:13 used p 'char *'
    |-IfStmt 0x13480e300 <line:5:2, col:21>
    | |-UnaryOperator 0x13480e2a0 <col:6, col:7> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x13480e288 <col:7> 'struct tm *' <LValueToRValue>
    | |   `-DeclRefExpr 0x13480e268 <col:7> 'struct tm *' lvalue ParmVar 0x13480dee8 'k_tm' 'struct tm *'
    | `-ReturnStmt 0x13480e2f0 <col:14, col:21>
    |   `-RecoveryExpr 0x13480e2d0 <col:21> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x1348278e8 <line:6:2, col:53>
    | |-BinaryOperator 0x134827880 <col:6, col:41> 'int' contains-errors '||'
    | | |-BinaryOperator 0x134827860 <col:6, col:15> 'int' contains-errors '=='
    | | | |-RecoveryExpr 0x13480e320 <col:6> '<dependent type>' contains-errors lvalue
    | | | `-RecoveryExpr 0x134827840 <col:15> '<dependent type>' contains-errors lvalue
    | | `-BinaryOperator 0x134827800 <col:25, col:41> 'int' contains-errors '<'
    | |   |-CXXDependentScopeMemberExpr 0x13480e398 <col:25, col:32> '<dependent type>' contains-errors lvalue ->length
    | |   | `-RecoveryExpr 0x13480e378 <col:25> '<dependent type>' contains-errors lvalue
    | |   `-IntegerLiteral 0x13480e3e0 <col:41> 'int' 14
    | `-ReturnStmt 0x1348278d8 <col:46, col:53>
    |   `-RecoveryExpr 0x1348278b8 <col:53> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x134827a30 <line:7:2, col:35>
    | |-BinaryOperator 0x1348279c8 <col:6, col:21> 'int' contains-errors '=='
    | | |-CXXDependentScopeMemberExpr 0x134827928 <col:6, col:13> '<dependent type>' contains-errors lvalue ->data
    | | | `-RecoveryExpr 0x134827908 <col:6> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x1348279a8 <col:21> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x134827a20 <col:28, col:35>
    |   `-RecoveryExpr 0x134827a00 <col:35> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x134827b88 <line:9:2, col:29> 'char *' contains-errors '='
    | |-DeclRefExpr 0x134827a50 <col:2> 'char *' lvalue Var 0x13480e1d0 'p' 'char *'
    | `-CStyleCastExpr 0x134827b60 <col:6, col:29> 'char *' contains-errors <Dependent>
    |   `-UnaryOperator 0x134827b30 <col:14, col:29> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-ArraySubscriptExpr 0x134827b10 <col:15, col:29> '<dependent type>' contains-errors lvalue
    |       |-ImplicitCastExpr 0x134827af8 <col:15, col:22> '<dependent type>' contains-errors <LValueToRValue>
    |       | `-CXXDependentScopeMemberExpr 0x134827a90 <col:15, col:22> '<dependent type>' contains-errors lvalue ->data
    |       |   `-RecoveryExpr 0x134827a70 <col:15> '<dependent type>' contains-errors lvalue
    |       `-IntegerLiteral 0x134827ad8 <col:27> 'int' 14
    |-BinaryOperator 0x134827c30 <line:11:2, col:7> 'char' '='
    | |-DeclRefExpr 0x134827ba8 <col:2> 'char' lvalue Var 0x13480e150 'c' 'char'
    | `-ImplicitCastExpr 0x134827c18 <col:6, col:7> 'char' <LValueToRValue>
    |   `-UnaryOperator 0x134827c00 <col:6, col:7> 'char' lvalue prefix '*' cannot overflow
    |     `-ImplicitCastExpr 0x134827be8 <col:7> 'char *' <LValueToRValue>
    |       `-DeclRefExpr 0x134827bc8 <col:7> 'char *' lvalue Var 0x13480e1d0 'p' 'char *'
    |-BinaryOperator 0x134827cd0 <col:11, col:16> 'char' '='
    | |-UnaryOperator 0x134827c88 <col:11, col:12> 'char' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x134827c70 <col:12> 'char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x134827c50 <col:12> 'char *' lvalue Var 0x13480e1d0 'p' 'char *'
    | `-ImplicitCastExpr 0x134827cb8 <col:16> 'char' <IntegralCast>
    |   `-CharacterLiteral 0x134827ca0 <col:16> 'int' 0
    |-CompoundAssignOperator 0x134827d30 <col:23, col:28> 'char *' '-=' ComputeLHSTy='char *' ComputeResultTy='char *'
    | |-DeclRefExpr 0x134827cf0 <col:23> 'char *' lvalue Var 0x13480e1d0 'p' 'char *'
    | `-IntegerLiteral 0x134827d10 <col:28> 'int' 2
    |-BinaryOperator 0x134828408 <col:32, col:54> '<dependent type>' contains-errors '='
    | |-RecoveryExpr 0x1348281c0 <col:32, col:38> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x134827d60 <col:32> 'struct tm *' lvalue ParmVar 0x13480dee8 'k_tm' 'struct tm *'
    | `-CallExpr 0x1348283c8 <col:48, col:54> 'int'
    |   |-ImplicitCastExpr 0x1348283b0 <col:48> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x134828340 <col:48> 'int ()' Function 0x134828288 'atoi' 'int ()'
    |   `-ImplicitCastExpr 0x1348283f0 <col:53> 'char *' <LValueToRValue>
    |     `-DeclRefExpr 0x134828360 <col:53> 'char *' lvalue Var 0x13480e1d0 'p' 'char *'
    |-BinaryOperator 0x134828510 <col:62, col:71> 'char' '='
    | |-UnaryOperator 0x1348284c0 <col:62, col:67> 'char' lvalue prefix '*' cannot overflow
    | | `-ParenExpr 0x1348284a0 <col:63, col:67> 'char *'
    | |   `-BinaryOperator 0x134828480 <col:64, col:66> 'char *' '+'
    | |     |-ImplicitCastExpr 0x134828468 <col:64> 'char *' <LValueToRValue>
    | |     | `-DeclRefExpr 0x134828428 <col:64> 'char *' lvalue Var 0x13480e1d0 'p' 'char *'
    | |     `-IntegerLiteral 0x134828448 <col:66> 'int' 2
    | `-ImplicitCastExpr 0x1348284f8 <col:71> 'char' <LValueToRValue>
    |   `-DeclRefExpr 0x1348284d8 <col:71> 'char' lvalue Var 0x13480e150 'c' 'char'
    |-BinaryOperator 0x1348285b8 <line:12:2, col:7> 'char' '='
    | |-DeclRefExpr 0x134828530 <col:2> 'char' lvalue Var 0x13480e150 'c' 'char'
    | `-ImplicitCastExpr 0x1348285a0 <col:6, col:7> 'char' <LValueToRValue>
    |   `-UnaryOperator 0x134828588 <col:6, col:7> 'char' lvalue prefix '*' cannot overflow
    |     `-ImplicitCastExpr 0x134828570 <col:7> 'char *' <LValueToRValue>
    |       `-DeclRefExpr 0x134828550 <col:7> 'char *' lvalue Var 0x13480e1d0 'p' 'char *'
    |-BinaryOperator 0x134828658 <col:11, col:16> 'char' '='
    | |-UnaryOperator 0x134828610 <col:11, col:12> 'char' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x1348285f8 <col:12> 'char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x1348285d8 <col:12> 'char *' lvalue Var 0x13480e1d0 'p' 'char *'
    | `-ImplicitCastExpr 0x134828640 <col:16> 'char' <IntegralCast>
    |   `-CharacterLiteral 0x134828628 <col:16> 'int' 0
    |-CompoundAssignOperator 0x1348286b8 <col:23, col:28> 'char *' '-=' ComputeLHSTy='char *' ComputeResultTy='char *'
    | |-DeclRefExpr 0x134828678 <col:23> 'char *' lvalue Var 0x13480e1d0 'p' 'char *'
    | `-IntegerLiteral 0x134828698 <col:28> 'int' 2
    |-BinaryOperator 0x1348287e0 <col:32, col:54> '<dependent type>' contains-errors '='
    | |-RecoveryExpr 0x134828720 <col:32, col:38> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x1348286e8 <col:32> 'struct tm *' lvalue ParmVar 0x13480dee8 'k_tm' 'struct tm *'
    | `-CallExpr 0x1348287a0 <col:48, col:54> 'int'
    |   |-ImplicitCastExpr 0x134828788 <col:48> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x134828748 <col:48> 'int ()' Function 0x134828288 'atoi' 'int ()'
    |   `-ImplicitCastExpr 0x1348287c8 <col:53> 'char *' <LValueToRValue>
    |     `-DeclRefExpr 0x134828768 <col:53> 'char *' lvalue Var 0x13480e1d0 'p' 'char *'
    |-BinaryOperator 0x1360082e8 <col:62, col:71> 'char' '='
    | |-UnaryOperator 0x136008298 <col:62, col:67> 'char' lvalue prefix '*' cannot overflow
    | | `-ParenExpr 0x136008278 <col:63, col:67> 'char *'
    | |   `-BinaryOperator 0x136008258 <col:64, col:66> 'char *' '+'
    | |     |-ImplicitCastExpr 0x136008240 <col:64> 'char *' <LValueToRValue>
    | |     | `-DeclRefExpr 0x136008200 <col:64> 'char *' lvalue Var 0x13480e1d0 'p' 'char *'
    | |     `-IntegerLiteral 0x136008220 <col:66> 'int' 2
    | `-ImplicitCastExpr 0x1360082d0 <col:71> 'char' <LValueToRValue>
    |   `-DeclRefExpr 0x1360082b0 <col:71> 'char' lvalue Var 0x13480e150 'c' 'char'
    |-BinaryOperator 0x136008390 <line:13:2, col:7> 'char' '='
    | |-DeclRefExpr 0x136008308 <col:2> 'char' lvalue Var 0x13480e150 'c' 'char'
    | `-ImplicitCastExpr 0x136008378 <col:6, col:7> 'char' <LValueToRValue>
    |   `-UnaryOperator 0x136008360 <col:6, col:7> 'char' lvalue prefix '*' cannot overflow
    |     `-ImplicitCastExpr 0x136008348 <col:7> 'char *' <LValueToRValue>
    |       `-DeclRefExpr 0x136008328 <col:7> 'char *' lvalue Var 0x13480e1d0 'p' 'char *'
    |-BinaryOperator 0x136008430 <col:11, col:16> 'char' '='
    | |-UnaryOperator 0x1360083e8 <col:11, col:12> 'char' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x1360083d0 <col:12> 'char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x1360083b0 <col:12> 'char *' lvalue Var 0x13480e1d0 'p' 'char *'
    | `-ImplicitCastExpr 0x136008418 <col:16> 'char' <IntegralCast>
    |   `-CharacterLiteral 0x136008400 <col:16> 'int' 0
    |-CompoundAssignOperator 0x136008490 <col:23, col:28> 'char *' '-=' ComputeLHSTy='char *' ComputeResultTy='char *'
    | |-DeclRefExpr 0x136008450 <col:23> 'char *' lvalue Var 0x13480e1d0 'p' 'char *'
    | `-IntegerLiteral 0x136008470 <col:28> 'int' 2
    |-BinaryOperator 0x1360085b8 <col:32, col:54> '<dependent type>' contains-errors '='
    | |-RecoveryExpr 0x1360084f8 <col:32, col:38> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x1360084c0 <col:32> 'struct tm *' lvalue ParmVar 0x13480dee8 'k_tm' 'struct tm *'
    | `-CallExpr 0x136008578 <col:48, col:54> 'int'
    |   |-ImplicitCastExpr 0x136008560 <col:48> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x136008520 <col:48> 'int ()' Function 0x134828288 'atoi' 'int ()'
    |   `-ImplicitCastExpr 0x1360085a0 <col:53> 'char *' <LValueToRValue>
    |     `-DeclRefExpr 0x136008540 <col:53> 'char *' lvalue Var 0x13480e1d0 'p' 'char *'
    |-BinaryOperator 0x1360086c0 <col:62, col:71> 'char' '='
    | |-UnaryOperator 0x136008670 <col:62, col:67> 'char' lvalue prefix '*' cannot overflow
    | | `-ParenExpr 0x136008650 <col:63, col:67> 'char *'
    | |   `-BinaryOperator 0x136008630 <col:64, col:66> 'char *' '+'
    | |     |-ImplicitCastExpr 0x136008618 <col:64> 'char *' <LValueToRValue>
    | |     | `-DeclRefExpr 0x1360085d8 <col:64> 'char *' lvalue Var 0x13480e1d0 'p' 'char *'
    | |     `-IntegerLiteral 0x1360085f8 <col:66> 'int' 2
    | `-ImplicitCastExpr 0x1360086a8 <col:71> 'char' <LValueToRValue>
    |   `-DeclRefExpr 0x136008688 <col:71> 'char' lvalue Var 0x13480e150 'c' 'char'
    |-BinaryOperator 0x136008768 <line:14:2, col:7> 'char' '='
    | |-DeclRefExpr 0x1360086e0 <col:2> 'char' lvalue Var 0x13480e150 'c' 'char'
    | `-ImplicitCastExpr 0x136008750 <col:6, col:7> 'char' <LValueToRValue>
    |   `-UnaryOperator 0x136008738 <col:6, col:7> 'char' lvalue prefix '*' cannot overflow
    |     `-ImplicitCastExpr 0x136008720 <col:7> 'char *' <LValueToRValue>
    |       `-DeclRefExpr 0x136008700 <col:7> 'char *' lvalue Var 0x13480e1d0 'p' 'char *'
    |-BinaryOperator 0x136008808 <col:11, col:16> 'char' '='
    | |-UnaryOperator 0x1360087c0 <col:11, col:12> 'char' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x1360087a8 <col:12> 'char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x136008788 <col:12> 'char *' lvalue Var 0x13480e1d0 'p' 'char *'
    | `-ImplicitCastExpr 0x1360087f0 <col:16> 'char' <IntegralCast>
    |   `-CharacterLiteral 0x1360087d8 <col:16> 'int' 0
    |-CompoundAssignOperator 0x136008868 <col:23, col:28> 'char *' '-=' ComputeLHSTy='char *' ComputeResultTy='char *'
    | |-DeclRefExpr 0x136008828 <col:23> 'char *' lvalue Var 0x13480e1d0 'p' 'char *'
    | `-IntegerLiteral 0x136008848 <col:28> 'int' 2
    |-BinaryOperator 0x136008990 <col:32, col:54> '<dependent type>' contains-errors '='
    | |-RecoveryExpr 0x1360088d0 <col:32, col:38> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x136008898 <col:32> 'struct tm *' lvalue ParmVar 0x13480dee8 'k_tm' 'struct tm *'
    | `-CallExpr 0x136008950 <col:48, col:54> 'int'
    |   |-ImplicitCastExpr 0x136008938 <col:48> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x1360088f8 <col:48> 'int ()' Function 0x134828288 'atoi' 'int ()'
    |   `-ImplicitCastExpr 0x136008978 <col:53> 'char *' <LValueToRValue>
    |     `-DeclRefExpr 0x136008918 <col:53> 'char *' lvalue Var 0x13480e1d0 'p' 'char *'
    |-BinaryOperator 0x136008a98 <col:62, col:71> 'char' '='
    | |-UnaryOperator 0x136008a48 <col:62, col:67> 'char' lvalue prefix '*' cannot overflow
    | | `-ParenExpr 0x136008a28 <col:63, col:67> 'char *'
    | |   `-BinaryOperator 0x136008a08 <col:64, col:66> 'char *' '+'
    | |     |-ImplicitCastExpr 0x1360089f0 <col:64> 'char *' <LValueToRValue>
    | |     | `-DeclRefExpr 0x1360089b0 <col:64> 'char *' lvalue Var 0x13480e1d0 'p' 'char *'
    | |     `-IntegerLiteral 0x1360089d0 <col:66> 'int' 2
    | `-ImplicitCastExpr 0x136008a80 <col:71> 'char' <LValueToRValue>
    |   `-DeclRefExpr 0x136008a60 <col:71> 'char' lvalue Var 0x13480e150 'c' 'char'
    |-BinaryOperator 0x136008b40 <line:15:2, col:7> 'char' '='
    | |-DeclRefExpr 0x136008ab8 <col:2> 'char' lvalue Var 0x13480e150 'c' 'char'
    | `-ImplicitCastExpr 0x136008b28 <col:6, col:7> 'char' <LValueToRValue>
    |   `-UnaryOperator 0x136008b10 <col:6, col:7> 'char' lvalue prefix '*' cannot overflow
    |     `-ImplicitCastExpr 0x136008af8 <col:7> 'char *' <LValueToRValue>
    |       `-DeclRefExpr 0x136008ad8 <col:7> 'char *' lvalue Var 0x13480e1d0 'p' 'char *'
    |-BinaryOperator 0x136008be0 <col:11, col:16> 'char' '='
    | |-UnaryOperator 0x136008b98 <col:11, col:12> 'char' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x136008b80 <col:12> 'char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x136008b60 <col:12> 'char *' lvalue Var 0x13480e1d0 'p' 'char *'
    | `-ImplicitCastExpr 0x136008bc8 <col:16> 'char' <IntegralCast>
    |   `-CharacterLiteral 0x136008bb0 <col:16> 'int' 0
    |-CompoundAssignOperator 0x136008c40 <col:23, col:28> 'char *' '-=' ComputeLHSTy='char *' ComputeResultTy='char *'
    | |-DeclRefExpr 0x136008c00 <col:23> 'char *' lvalue Var 0x13480e1d0 'p' 'char *'
    | `-IntegerLiteral 0x136008c20 <col:28> 'int' 2
    |-BinaryOperator 0x136008da8 <col:32, col:56> '<dependent type>' contains-errors '='
    | |-RecoveryExpr 0x136008ca8 <col:32, col:38> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x136008c70 <col:32> 'struct tm *' lvalue ParmVar 0x13480dee8 'k_tm' 'struct tm *'
    | `-BinaryOperator 0x136008d88 <col:48, col:56> 'int' '-'
    |   |-CallExpr 0x136008d28 <col:48, col:54> 'int'
    |   | |-ImplicitCastExpr 0x136008d10 <col:48> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x136008cd0 <col:48> 'int ()' Function 0x134828288 'atoi' 'int ()'
    |   | `-ImplicitCastExpr 0x136008d50 <col:53> 'char *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x136008cf0 <col:53> 'char *' lvalue Var 0x13480e1d0 'p' 'char *'
    |   `-IntegerLiteral 0x136008d68 <col:56> 'int' 1
    |-BinaryOperator 0x136008eb0 <col:62, col:71> 'char' '='
    | |-UnaryOperator 0x136008e60 <col:62, col:67> 'char' lvalue prefix '*' cannot overflow
    | | `-ParenExpr 0x136008e40 <col:63, col:67> 'char *'
    | |   `-BinaryOperator 0x136008e20 <col:64, col:66> 'char *' '+'
    | |     |-ImplicitCastExpr 0x136008e08 <col:64> 'char *' <LValueToRValue>
    | |     | `-DeclRefExpr 0x136008dc8 <col:64> 'char *' lvalue Var 0x13480e1d0 'p' 'char *'
    | |     `-IntegerLiteral 0x136008de8 <col:66> 'int' 2
    | `-ImplicitCastExpr 0x136008e98 <col:71> 'char' <LValueToRValue>
    |   `-DeclRefExpr 0x136008e78 <col:71> 'char' lvalue Var 0x13480e150 'c' 'char'
    |-BinaryOperator 0x136008f58 <line:16:2, col:7> 'char' '='
    | |-DeclRefExpr 0x136008ed0 <col:2> 'char' lvalue Var 0x13480e150 'c' 'char'
    | `-ImplicitCastExpr 0x136008f40 <col:6, col:7> 'char' <LValueToRValue>
    |   `-UnaryOperator 0x136008f28 <col:6, col:7> 'char' lvalue prefix '*' cannot overflow
    |     `-ImplicitCastExpr 0x136008f10 <col:7> 'char *' <LValueToRValue>
    |       `-DeclRefExpr 0x136008ef0 <col:7> 'char *' lvalue Var 0x13480e1d0 'p' 'char *'
    |-BinaryOperator 0x136008ff8 <col:11, col:16> 'char' '='
    | |-UnaryOperator 0x136008fb0 <col:11, col:12> 'char' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x136008f98 <col:12> 'char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x136008f78 <col:12> 'char *' lvalue Var 0x13480e1d0 'p' 'char *'
    | `-ImplicitCastExpr 0x136008fe0 <col:16> 'char' <IntegralCast>
    |   `-CharacterLiteral 0x136008fc8 <col:16> 'int' 0
    |-CompoundAssignOperator 0x136009058 <col:23, col:28> 'char *' '-=' ComputeLHSTy='char *' ComputeResultTy='char *'
    | |-DeclRefExpr 0x136009018 <col:23> 'char *' lvalue Var 0x13480e1d0 'p' 'char *'
    | `-IntegerLiteral 0x136009038 <col:28> 'int' 4
    |-BinaryOperator 0x1360091c0 <col:32, col:56> '<dependent type>' contains-errors '='
    | |-RecoveryExpr 0x1360090c0 <col:32, col:38> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x136009088 <col:32> 'struct tm *' lvalue ParmVar 0x13480dee8 'k_tm' 'struct tm *'
    | `-BinaryOperator 0x1360091a0 <col:48, col:56> 'int' '-'
    |   |-CallExpr 0x136009140 <col:48, col:54> 'int'
    |   | |-ImplicitCastExpr 0x136009128 <col:48> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x1360090e8 <col:48> 'int ()' Function 0x134828288 'atoi' 'int ()'
    |   | `-ImplicitCastExpr 0x136009168 <col:53> 'char *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x136009108 <col:53> 'char *' lvalue Var 0x13480e1d0 'p' 'char *'
    |   `-IntegerLiteral 0x136009180 <col:56> 'int' 1900
    |-BinaryOperator 0x13482a6c8 <col:62, col:71> 'char' '='
    | |-UnaryOperator 0x13482a678 <col:62, col:67> 'char' lvalue prefix '*' cannot overflow
    | | `-ParenExpr 0x13482a658 <col:63, col:67> 'char *'
    | |   `-BinaryOperator 0x13482a638 <col:64, col:66> 'char *' '+'
    | |     |-ImplicitCastExpr 0x13482a620 <col:64> 'char *' <LValueToRValue>
    | |     | `-DeclRefExpr 0x1360091e0 <col:64> 'char *' lvalue Var 0x13480e1d0 'p' 'char *'
    | |     `-IntegerLiteral 0x13482a600 <col:66> 'int' 4
    | `-ImplicitCastExpr 0x13482a6b0 <col:71> 'char' <LValueToRValue>
    |   `-DeclRefExpr 0x13482a690 <col:71> 'char' lvalue Var 0x13480e150 'c' 'char'
    `-ReturnStmt 0x13482a720 <line:18:2, col:9>
      `-ImplicitCastExpr 0x13482a708 <col:9> 'struct tm *' <LValueToRValue>
        `-DeclRefExpr 0x13482a6e8 <col:9> 'struct tm *' lvalue ParmVar 0x13480dee8 'k_tm' 'struct tm *'
