TranslationUnitDecl 0x155855008 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x155855eb8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1558555d0 '__int128'
|-TypedefDecl 0x155855f28 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1558555f0 'unsigned __int128'
|-TypedefDecl 0x15500c430 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x15500c200 'struct __NSConstantString_tag'
|   `-Record 0x155855f80 '__NSConstantString_tag'
|-TypedefDecl 0x15500c498 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x155855790 '__SVInt8_t'
|-TypedefDecl 0x15500c500 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x1558557b0 '__SVInt16_t'
|-TypedefDecl 0x15500c568 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x1558557d0 '__SVInt32_t'
|-TypedefDecl 0x15500c5d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x1558557f0 '__SVInt64_t'
|-TypedefDecl 0x15500c638 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x155855810 '__SVUint8_t'
|-TypedefDecl 0x15500c6a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x155855830 '__SVUint16_t'
|-TypedefDecl 0x15500c708 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x155855850 '__SVUint32_t'
|-TypedefDecl 0x15500c770 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x155855870 '__SVUint64_t'
|-TypedefDecl 0x15500c7d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x155855890 '__SVFloat16_t'
|-TypedefDecl 0x15500c840 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x1558558b0 '__SVFloat32_t'
|-TypedefDecl 0x15500c8a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x1558558d0 '__SVFloat64_t'
|-TypedefDecl 0x15500c910 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x1558558f0 '__SVBfloat16_t'
|-TypedefDecl 0x15500c978 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x155855910 '__clang_svint8x2_t'
|-TypedefDecl 0x15500c9e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x155855930 '__clang_svint16x2_t'
|-TypedefDecl 0x15500ca48 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x155855950 '__clang_svint32x2_t'
|-TypedefDecl 0x15500cab0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x155855970 '__clang_svint64x2_t'
|-TypedefDecl 0x15500cb18 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x155855990 '__clang_svuint8x2_t'
|-TypedefDecl 0x15500cb80 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x1558559b0 '__clang_svuint16x2_t'
|-TypedefDecl 0x15500cbe8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x1558559d0 '__clang_svuint32x2_t'
|-TypedefDecl 0x15500cc50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x1558559f0 '__clang_svuint64x2_t'
|-TypedefDecl 0x15500ccb8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x155855a10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x15500cd20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x155855a30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x15500cd88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x155855a50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x15500cdf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x155855a70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x15500ce58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x155855a90 '__clang_svint8x3_t'
|-TypedefDecl 0x15500cec0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x155855ab0 '__clang_svint16x3_t'
|-TypedefDecl 0x15500cf28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x155855ad0 '__clang_svint32x3_t'
|-TypedefDecl 0x15500cf90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x155855af0 '__clang_svint64x3_t'
|-TypedefDecl 0x15500cff8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x155855b10 '__clang_svuint8x3_t'
|-TypedefDecl 0x15500d060 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x155855b30 '__clang_svuint16x3_t'
|-TypedefDecl 0x15500d0c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x155855b50 '__clang_svuint32x3_t'
|-TypedefDecl 0x15500d130 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x155855b70 '__clang_svuint64x3_t'
|-TypedefDecl 0x15500d198 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x155855b90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x15500da00 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x155855bb0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x15500da68 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x155855bd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x15500dad0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x155855bf0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x15500db38 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x155855c10 '__clang_svint8x4_t'
|-TypedefDecl 0x15500dba0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x155855c30 '__clang_svint16x4_t'
|-TypedefDecl 0x15500dc08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x155855c50 '__clang_svint32x4_t'
|-TypedefDecl 0x15500dc70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x155855c70 '__clang_svint64x4_t'
|-TypedefDecl 0x15500dcd8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x155855c90 '__clang_svuint8x4_t'
|-TypedefDecl 0x15500dd40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x155855cb0 '__clang_svuint16x4_t'
|-TypedefDecl 0x15500dda8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x155855cd0 '__clang_svuint32x4_t'
|-TypedefDecl 0x15500de10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x155855cf0 '__clang_svuint64x4_t'
|-TypedefDecl 0x15500de78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x155855d10 '__clang_svfloat16x4_t'
|-TypedefDecl 0x15500dee0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x155855d30 '__clang_svfloat32x4_t'
|-TypedefDecl 0x15500df48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x155855d50 '__clang_svfloat64x4_t'
|-TypedefDecl 0x15500dfb0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x155855d70 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x15500e018 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x155855d90 '__SVBool_t'
|-TypedefDecl 0x15500e080 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x155855db0 '__clang_svboolx2_t'
|-TypedefDecl 0x15500e0e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x155855dd0 '__clang_svboolx4_t'
|-TypedefDecl 0x15500e150 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x155855df0 '__SVCount_t'
|-TypedefDecl 0x15500e1f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x15500e1b0 'char *'
|   `-BuiltinType 0x1558550b0 'char'
|-TypedefDecl 0x15500e268 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x15500e1b0 'char *'
|   `-BuiltinType 0x1558550b0 'char'
|-FunctionDecl 0x15500e468 <dataset_diviso_filec/func6864_nonvuln.c:1:1, line:40:1> line:1:20 chdir_to_parent 'const char *(const char *, char **)' static
| |-ParmVarDecl 0x15500e2d8 <col:36, col:48> col:48 used node 'const char *'
| |-ParmVarDecl 0x15500e388 <col:54, col:61> col:61 used resbuf 'char **'
| `-CompoundStmt 0x15680a888 <line:2:1, line:40:1>
|   |-DeclStmt 0x15500e680 <line:3:2, col:17>
|   | |-VarDecl 0x15500e580 <col:2, col:8> col:8 used tmp 'char *'
|   | `-VarDecl 0x15500e600 <col:2, col:14> col:14 used res 'char *'
|   |-DeclStmt 0x15500e718 <line:4:2, col:20>
|   | `-VarDecl 0x15500e6b0 <col:2, col:14> col:14 used parent 'const char *'
|   |-DeclStmt 0x15500e838 <line:5:2, col:17>
|   | `-VarDecl 0x15500e7d0 <col:2, col:16> col:7 used buf 'char[65536]'
|   |-BinaryOperator 0x1550284e0 <line:7:2, col:24> 'char *' '='
|   | |-UnaryOperator 0x15500e888 <col:2, col:3> 'char *' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x15500e870 <col:3> 'char **' <LValueToRValue>
|   | |   `-DeclRefExpr 0x15500e850 <col:3> 'char **' lvalue ParmVar 0x15500e388 'resbuf' 'char **'
|   | `-ImplicitCastExpr 0x1550280a8 <col:12, col:24> 'char *' <IntegralToPointer>
|   |   `-CallExpr 0x155028068 <col:12, col:24> 'int'
|   |     |-ImplicitCastExpr 0x155028050 <col:12> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x15500e9d0 <col:12> 'int ()' Function 0x15500e918 'xstrdup' 'int ()'
|   |     `-ImplicitCastExpr 0x155028090 <col:20> 'const char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x155028000 <col:20> 'const char *' lvalue ParmVar 0x15500e2d8 'node' 'const char *'
|   |-BinaryOperator 0x155028888 <line:9:2, col:28> 'char *' '='
|   | |-DeclRefExpr 0x155028500 <col:2> 'char *' lvalue Var 0x15500e580 'tmp' 'char *'
|   | `-CallExpr 0x155028828 <col:8, col:28> 'char *'
|   |   |-ImplicitCastExpr 0x155028810 <col:8> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x155028740 <col:8> 'char *(const char *, int)' Function 0x155028560 'strrchr' 'char *(const char *, int)'
|   |   |-ImplicitCastExpr 0x155028870 <col:16, col:17> 'const char *' <NoOp>
|   |   | `-ImplicitCastExpr 0x155028858 <col:16, col:17> 'char *' <LValueToRValue>
|   |   |   `-UnaryOperator 0x155028798 <col:16, col:17> 'char *' lvalue prefix '*' cannot overflow
|   |   |     `-ImplicitCastExpr 0x155028780 <col:17> 'char **' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x155028760 <col:17> 'char **' lvalue ParmVar 0x15500e388 'resbuf' 'char **'
|   |   `-CharacterLiteral 0x1550287b0 <col:25> 'int' 47
|   |-IfStmt 0x155028c60 <line:10:2, line:11:25>
|   | |-UnaryOperator 0x1550288e0 <line:10:6, col:7> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x1550288c8 <col:7> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1550288a8 <col:7> 'char *' lvalue Var 0x15500e580 'tmp' 'char *'
|   | `-CallExpr 0x155028c10 <line:11:3, col:25> 'int'
|   |   |-ImplicitCastExpr 0x155028bf8 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1550289d8 <col:3> 'int ()' Function 0x155028920 'die' 'int ()'
|   |   |-IntegerLiteral 0x1550289f8 <col:8> 'int' 2
|   |   |-CallExpr 0x155028b98 <col:11, col:18> 'int'
|   |   | |-ImplicitCastExpr 0x155028b80 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x155028af8 <col:11> 'int ()' Function 0x155028a40 '_' 'int ()'
|   |   | `-ImplicitCastExpr 0x155028bc0 <col:13> 'char *' <ArrayToPointerDecay>
|   |   |   `-StringLiteral 0x155028b60 <col:13> 'char[4]' lvalue "STR"
|   |   `-ImplicitCastExpr 0x155028c48 <col:21> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x155028bd8 <col:21> 'const char *' lvalue ParmVar 0x15500e2d8 'node' 'const char *'
|   |-IfStmt 0x156808f28 <line:13:2, line:23:2> has_else
|   | |-BinaryOperator 0x155028d20 <line:13:6, col:14> 'int' '!='
|   | | |-ImplicitCastExpr 0x155028cf0 <col:6> 'char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x155028c80 <col:6> 'char *' lvalue Var 0x15500e580 'tmp' 'char *'
|   | | `-ImplicitCastExpr 0x155028d08 <col:13, col:14> 'char *' <LValueToRValue>
|   | |   `-UnaryOperator 0x155028cd8 <col:13, col:14> 'char *' lvalue prefix '*' cannot overflow
|   | |     `-ImplicitCastExpr 0x155028cc0 <col:14> 'char **' <LValueToRValue>
|   | |       `-DeclRefExpr 0x155028ca0 <col:14> 'char **' lvalue ParmVar 0x15500e388 'resbuf' 'char **'
|   | |-CompoundStmt 0x155028f58 <col:22, line:17:2>
|   | | |-BinaryOperator 0x155028dc0 <line:14:3, col:10> 'char' '='
|   | | | |-UnaryOperator 0x155028d78 <col:3, col:4> 'char' lvalue prefix '*' cannot overflow
|   | | | | `-ImplicitCastExpr 0x155028d60 <col:4> 'char *' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x155028d40 <col:4> 'char *' lvalue Var 0x15500e580 'tmp' 'char *'
|   | | | `-ImplicitCastExpr 0x155028da8 <col:10> 'char' <IntegralCast>
|   | | |   `-CharacterLiteral 0x155028d90 <col:10> 'int' 0
|   | | |-BinaryOperator 0x155028e78 <line:15:3, col:15> 'char *' '='
|   | | | |-DeclRefExpr 0x155028de0 <col:3> 'char *' lvalue Var 0x15500e600 'res' 'char *'
|   | | | `-BinaryOperator 0x155028e58 <col:9, col:15> 'char *' '+'
|   | | |   |-ImplicitCastExpr 0x155028e40 <col:9> 'char *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x155028e00 <col:9> 'char *' lvalue Var 0x15500e580 'tmp' 'char *'
|   | | |   `-IntegerLiteral 0x155028e20 <col:15> 'int' 1
|   | | `-BinaryOperator 0x155028f38 <line:16:3, col:13> 'const char *' '='
|   | |   |-DeclRefExpr 0x155028e98 <col:3> 'const char *' lvalue Var 0x15500e6b0 'parent' 'const char *'
|   | |   `-ImplicitCastExpr 0x155028f20 <col:12, col:13> 'const char *' <NoOp>
|   | |     `-ImplicitCastExpr 0x155028f08 <col:12, col:13> 'char *' <LValueToRValue>
|   | |       `-UnaryOperator 0x155028ef0 <col:12, col:13> 'char *' lvalue prefix '*' cannot overflow
|   | |         `-ImplicitCastExpr 0x155028ed8 <col:13> 'char **' <LValueToRValue>
|   | |           `-DeclRefExpr 0x155028eb8 <col:13> 'char **' lvalue ParmVar 0x15500e388 'resbuf' 'char **'
|   | `-IfStmt 0x156808ef8 <line:17:9, line:23:2> has_else
|   |   |-BinaryOperator 0x156808c48 <line:17:13, col:23> 'int' '!='
|   |   | |-ImplicitCastExpr 0x156808c30 <col:13, col:18> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x156808c18 <col:13, col:18> 'char' <LValueToRValue>
|   |   | |   `-ArraySubscriptExpr 0x155028fd8 <col:13, col:18> 'char' lvalue
|   |   | |     |-ImplicitCastExpr 0x155028fc0 <col:13> 'char *' <LValueToRValue>
|   |   | |     | `-DeclRefExpr 0x155028f80 <col:13> 'char *' lvalue Var 0x15500e580 'tmp' 'char *'
|   |   | |     `-IntegerLiteral 0x155028fa0 <col:17> 'int' 1
|   |   | `-CharacterLiteral 0x156808c00 <col:23> 'int' 0
|   |   |-CompoundStmt 0x156808db0 <col:29, line:20:2>
|   |   | |-BinaryOperator 0x156808d00 <line:18:3, col:15> 'char *' '='
|   |   | | |-DeclRefExpr 0x156808c68 <col:3> 'char *' lvalue Var 0x15500e600 'res' 'char *'
|   |   | | `-BinaryOperator 0x156808ce0 <col:9, col:15> 'char *' '+'
|   |   | |   |-ImplicitCastExpr 0x156808cc8 <col:9> 'char *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x156808c88 <col:9> 'char *' lvalue Var 0x15500e580 'tmp' 'char *'
|   |   | |   `-IntegerLiteral 0x156808ca8 <col:15> 'int' 1
|   |   | `-BinaryOperator 0x156808d90 <line:19:3, col:12> 'const char *' '='
|   |   |   |-DeclRefExpr 0x156808d20 <col:3> 'const char *' lvalue Var 0x15500e6b0 'parent' 'const char *'
|   |   |   `-ImplicitCastExpr 0x156808d78 <col:12> 'const char *' <NoOp>
|   |   |     `-ImplicitCastExpr 0x156808d60 <col:12> 'char *' <ArrayToPointerDecay>
|   |   |       `-StringLiteral 0x156808d40 <col:12> 'char[4]' lvalue "STR"
|   |   `-CompoundStmt 0x156808ed8 <line:20:9, line:23:2>
|   |     |-BinaryOperator 0x156808e28 <line:21:3, col:9> 'char *' '='
|   |     | |-DeclRefExpr 0x156808dd0 <col:3> 'char *' lvalue Var 0x15500e600 'res' 'char *'
|   |     | `-ImplicitCastExpr 0x156808e10 <col:9> 'char *' <ArrayToPointerDecay>
|   |     |   `-StringLiteral 0x156808df0 <col:9> 'char[4]' lvalue "STR"
|   |     `-BinaryOperator 0x156808eb8 <line:22:3, col:12> 'const char *' '='
|   |       |-DeclRefExpr 0x156808e48 <col:3> 'const char *' lvalue Var 0x15500e6b0 'parent' 'const char *'
|   |       `-ImplicitCastExpr 0x156808ea0 <col:12> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x156808e88 <col:12> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x156808e68 <col:12> 'char[4]' lvalue "STR"
|   |-IfStmt 0x1568095d0 <line:25:2, line:27:29>
|   | |-BinaryOperator 0x156809108 <line:25:6, col:24> 'int' '=='
|   | | |-CallExpr 0x156809090 <col:6, col:18> 'int'
|   | | | |-ImplicitCastExpr 0x156809078 <col:6> 'int (*)()' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x156809038 <col:6> 'int ()' Function 0x156808f80 'chdir' 'int ()'
|   | | | `-ImplicitCastExpr 0x1568090b8 <col:12> 'const char *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x156809058 <col:12> 'const char *' lvalue Var 0x15500e6b0 'parent' 'const char *'
|   | | `-UnaryOperator 0x1568090f0 <col:23, col:24> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x1568090d0 <col:24> 'int' 1
|   | `-CallExpr 0x156809590 <line:26:3, line:27:29> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x156809128 <line:26:3> 'int ()' Function 0x155028920 'die' 'int ()'
|   |   |-IntegerLiteral 0x156809148 <col:8> 'int' 2
|   |   |-CallExpr 0x1568094f0 <col:11, col:18> 'int'
|   |   | |-ImplicitCastExpr 0x1568094d8 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x156809168 <col:11> 'int ()' Function 0x155028a40 '_' 'int ()'
|   |   | `-ImplicitCastExpr 0x156809518 <col:13> 'char *' <ArrayToPointerDecay>
|   |   |   `-StringLiteral 0x156809188 <col:13> 'char[4]' lvalue "STR"
|   |   |-DeclRefExpr 0x156809200 <line:27:6> 'const char *' lvalue Var 0x15500e6b0 'parent' 'const char *'
|   |   `-CallExpr 0x156809568 <col:14, col:28> '<dependent type>' contains-errors
|   |     |-DeclRefExpr 0x1568093c8 <col:14> 'char *(int)' Function 0x156809258 'strerror' 'char *(int)'
|   |     `-RecoveryExpr 0x156809530 <col:23> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x156809ab8 <line:29:2, line:31:19>
|   | |-UnaryOperator 0x1568097d0 <line:29:6, col:30> 'int' prefix '!' cannot overflow
|   | | `-CallExpr 0x156809788 <col:7, col:30> 'int'
|   | |   |-ImplicitCastExpr 0x156809770 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x1568096d0 <col:7> 'int ()' Function 0x156809618 'getcwd' 'int ()'
|   | |   |-ImplicitCastExpr 0x1568097b8 <col:14> 'char *' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x1568096f0 <col:14> 'char[65536]' lvalue Var 0x15500e7d0 'buf' 'char[65536]'
|   | |   `-UnaryExprOrTypeTraitExpr 0x156809750 <col:19, col:29> 'unsigned long' sizeof
|   | |     `-ParenExpr 0x156809730 <col:25, col:29> 'char[65536]' lvalue
|   | |       `-DeclRefExpr 0x156809710 <col:26> 'char[65536]' lvalue Var 0x15500e7d0 'buf' 'char[65536]' non_odr_use_unevaluated
|   | `-CallExpr 0x156809a80 <line:30:3, line:31:19> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x1568097e8 <line:30:3> 'int ()' Function 0x155028920 'die' 'int ()'
|   |   |-IntegerLiteral 0x156809808 <col:8> 'int' 2
|   |   |-CallExpr 0x1568099e0 <col:11, col:18> 'int'
|   |   | |-ImplicitCastExpr 0x1568099c8 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x156809828 <col:11> 'int ()' Function 0x155028a40 '_' 'int ()'
|   |   | `-ImplicitCastExpr 0x156809a08 <col:13> 'char *' <ArrayToPointerDecay>
|   |   |   `-StringLiteral 0x156809848 <col:13> 'char[4]' lvalue "STR"
|   |   `-CallExpr 0x156809a58 <line:31:4, col:18> '<dependent type>' contains-errors
|   |     |-DeclRefExpr 0x1568098c0 <col:4> 'char *(int)' Function 0x156809258 'strerror' 'char *(int)'
|   |     `-RecoveryExpr 0x156809a20 <col:13> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x15680a440 <line:33:2, line:34:32>
|   | |-BinaryOperator 0x15680a280 <line:33:6, col:29> 'int' '!='
|   | | |-CallExpr 0x15680a1e8 <col:6, col:24> 'int'
|   | | | |-ImplicitCastExpr 0x15680a1d0 <col:6> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x15680a110 <col:6> 'int (const char *, const char *)' Function 0x156809b20 'strcmp' 'int (const char *, const char *)'
|   | | | |-ImplicitCastExpr 0x15680a230 <col:13> 'const char *' <NoOp>
|   | | | | `-ImplicitCastExpr 0x15680a218 <col:13> 'char *' <ArrayToPointerDecay>
|   | | | |   `-DeclRefExpr 0x15680a130 <col:13> 'char[65536]' lvalue Var 0x15500e7d0 'buf' 'char[65536]'
|   | | | `-ImplicitCastExpr 0x15680a248 <col:18> 'const char *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x15680a150 <col:18> 'const char *' lvalue Var 0x15500e6b0 'parent' 'const char *'
|   | | `-IntegerLiteral 0x15680a260 <col:29> 'int' 0
|   | `-CallExpr 0x15680a3d0 <line:34:3, col:32> 'int'
|   |   |-ImplicitCastExpr 0x15680a3b8 <col:3> 'int (*)()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x15680a2a0 <col:3> 'int ()' Function 0x155028920 'die' 'int ()'
|   |   |-IntegerLiteral 0x15680a2c0 <col:8> 'int' 2
|   |   |-CallExpr 0x15680a338 <col:11, col:18> 'int'
|   |   | |-ImplicitCastExpr 0x15680a320 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x15680a2e0 <col:11> 'int ()' Function 0x155028a40 '_' 'int ()'
|   |   | `-ImplicitCastExpr 0x15680a360 <col:13> 'char *' <ArrayToPointerDecay>
|   |   |   `-StringLiteral 0x15680a300 <col:13> 'char[4]' lvalue "STR"
|   |   |-ImplicitCastExpr 0x15680a410 <col:21> 'const char *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x15680a378 <col:21> 'const char *' lvalue Var 0x15500e6b0 'parent' 'const char *'
|   |   `-ImplicitCastExpr 0x15680a428 <col:29> 'char *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x15680a398 <col:29> 'char[65536]' lvalue Var 0x15500e7d0 'buf' 'char[65536]'
|   |-IfStmt 0x15680a808 <line:36:2, line:37:23>
|   | |-RecoveryExpr 0x15680a478 <line:36:6> '<dependent type>' contains-errors lvalue
|   | `-CallExpr 0x15680a7a8 <line:37:3, col:23> 'int'
|   |   |-ImplicitCastExpr 0x15680a790 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x15680a688 <col:3> 'int (const char *, ...)' Function 0x15680a4e0 'printf' 'int (const char *, ...)'
|   |   |-ImplicitCastExpr 0x15680a7d8 <col:10, col:17> 'const char *' <IntegralToPointer>
|   |   | `-CallExpr 0x15680a700 <col:10, col:17> 'int'
|   |   |   |-ImplicitCastExpr 0x15680a6e8 <col:10> 'int (*)()' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x15680a6a8 <col:10> 'int ()' Function 0x155028a40 '_' 'int ()'
|   |   |   `-ImplicitCastExpr 0x15680a728 <col:12> 'char *' <ArrayToPointerDecay>
|   |   |     `-StringLiteral 0x15680a6c8 <col:12> 'char[4]' lvalue "STR"
|   |   `-ImplicitCastExpr 0x15680a7f0 <col:20> 'char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x15680a740 <col:20> 'char *' lvalue Var 0x15500e600 'res' 'char *'
|   `-ReturnStmt 0x15680a878 <line:39:2, col:9>
|     `-ImplicitCastExpr 0x15680a860 <col:9> 'const char *' <NoOp>
|       `-ImplicitCastExpr 0x15680a848 <col:9> 'char *' <LValueToRValue>
|         `-DeclRefExpr 0x15680a828 <col:9> 'char *' lvalue Var 0x15500e600 'res' 'char *'
|-FunctionDecl 0x155028560 <line:9:8> col:8 implicit used strrchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x155028660 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1550286c8 <<invalid sloc>> <invalid sloc> 'int'
| `-BuiltinAttr 0x155028608 <<invalid sloc>> Implicit 896
|-FunctionDecl 0x156809258 <line:27:14> col:14 implicit used strerror 'char *(int)' extern
| |-ParmVarDecl 0x156809358 <<invalid sloc>> <invalid sloc> 'int'
| `-BuiltinAttr 0x156809300 <<invalid sloc>> Implicit 901
|-FunctionDecl 0x156809b20 <line:33:6> col:6 implicit used strcmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x15680a030 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x15680a098 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x156809bc8 <<invalid sloc>> Implicit 887
`-FunctionDecl 0x15680a4e0 <line:37:3> col:3 implicit used printf 'int (const char *, ...)' extern
  |-ParmVarDecl 0x15680a5e0 <<invalid sloc>> <invalid sloc> 'const char *'
  |-BuiltinAttr 0x15680a588 <<invalid sloc>> Implicit 903
  `-FormatAttr 0x15680a650 <col:3> Implicit printf 1 2
