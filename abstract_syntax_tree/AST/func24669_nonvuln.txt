TranslationUnitDecl 0x12383d008 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x12383deb8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x12383d5d0 '__int128'
|-TypedefDecl 0x12383df28 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x12383d5f0 'unsigned __int128'
|-TypedefDecl 0x12390dc30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12390da00 'struct __NSConstantString_tag'
|   `-Record 0x12383df80 '__NSConstantString_tag'
|-TypedefDecl 0x12390dc98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x12383d790 '__SVInt8_t'
|-TypedefDecl 0x12390dd00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x12383d7b0 '__SVInt16_t'
|-TypedefDecl 0x12390dd68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x12383d7d0 '__SVInt32_t'
|-TypedefDecl 0x12390ddd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x12383d7f0 '__SVInt64_t'
|-TypedefDecl 0x12390de38 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x12383d810 '__SVUint8_t'
|-TypedefDecl 0x12390dea0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x12383d830 '__SVUint16_t'
|-TypedefDecl 0x12390df08 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x12383d850 '__SVUint32_t'
|-TypedefDecl 0x12390df70 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x12383d870 '__SVUint64_t'
|-TypedefDecl 0x12390dfd8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x12383d890 '__SVFloat16_t'
|-TypedefDecl 0x12390e040 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x12383d8b0 '__SVFloat32_t'
|-TypedefDecl 0x12390e0a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x12383d8d0 '__SVFloat64_t'
|-TypedefDecl 0x12390e110 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x12383d8f0 '__SVBfloat16_t'
|-TypedefDecl 0x12390e178 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x12383d910 '__clang_svint8x2_t'
|-TypedefDecl 0x12390e1e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x12383d930 '__clang_svint16x2_t'
|-TypedefDecl 0x12390e248 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x12383d950 '__clang_svint32x2_t'
|-TypedefDecl 0x12390e2b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x12383d970 '__clang_svint64x2_t'
|-TypedefDecl 0x12390e318 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x12383d990 '__clang_svuint8x2_t'
|-TypedefDecl 0x12390e380 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x12383d9b0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12390e3e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x12383d9d0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12390e450 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x12383d9f0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12390e4b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x12383da10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12390e520 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x12383da30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12390e588 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x12383da50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12390e5f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x12383da70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12390e658 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x12383da90 '__clang_svint8x3_t'
|-TypedefDecl 0x12390e6c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x12383dab0 '__clang_svint16x3_t'
|-TypedefDecl 0x12390e728 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x12383dad0 '__clang_svint32x3_t'
|-TypedefDecl 0x12390e790 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x12383daf0 '__clang_svint64x3_t'
|-TypedefDecl 0x12390e7f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x12383db10 '__clang_svuint8x3_t'
|-TypedefDecl 0x12390e860 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x12383db30 '__clang_svuint16x3_t'
|-TypedefDecl 0x12390e8c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x12383db50 '__clang_svuint32x3_t'
|-TypedefDecl 0x12390e930 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x12383db70 '__clang_svuint64x3_t'
|-TypedefDecl 0x12390e998 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x12383db90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12390f200 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x12383dbb0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12390f268 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x12383dbd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12390f2d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x12383dbf0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12390f338 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x12383dc10 '__clang_svint8x4_t'
|-TypedefDecl 0x12390f3a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x12383dc30 '__clang_svint16x4_t'
|-TypedefDecl 0x12390f408 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x12383dc50 '__clang_svint32x4_t'
|-TypedefDecl 0x12390f470 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x12383dc70 '__clang_svint64x4_t'
|-TypedefDecl 0x12390f4d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x12383dc90 '__clang_svuint8x4_t'
|-TypedefDecl 0x12390f540 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x12383dcb0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12390f5a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x12383dcd0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12390f610 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x12383dcf0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12390f678 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x12383dd10 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12390f6e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x12383dd30 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12390f748 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x12383dd50 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12390f7b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x12383dd70 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12390f818 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x12383dd90 '__SVBool_t'
|-TypedefDecl 0x12390f880 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x12383ddb0 '__clang_svboolx2_t'
|-TypedefDecl 0x12390f8e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x12383ddd0 '__clang_svboolx4_t'
|-TypedefDecl 0x12390f950 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x12383ddf0 '__SVCount_t'
|-TypedefDecl 0x12390f9f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12390f9b0 'char *'
|   `-BuiltinType 0x12383d0b0 'char'
|-TypedefDecl 0x12390fa68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12390f9b0 'char *'
|   `-BuiltinType 0x12383d0b0 'char'
|-FunctionDecl 0x12390fbc8 <dataset_diviso_filec/func24669_nonvuln.c:1:1, line:38:1> line:1:12 invalid php_handle_auth_data 'int (const char *)'
| |-ParmVarDecl 0x12390faf0 <col:33, col:45> col:45 used auth 'const char *'
| `-CompoundStmt 0x1248096d0 <line:2:1, line:38:1>
|   |-DeclStmt 0x12390fd30 <line:3:2, col:14>
|   | `-VarDecl 0x12390fc90 <col:2, col:13> col:6 used ret 'int' cinit
|   |   `-UnaryOperator 0x12390fd18 <col:12, col:13> 'int' prefix '-'
|   |     `-IntegerLiteral 0x12390fcf8 <col:13> 'int' 1
|   |-IfStmt 0x12392c500 <line:5:2, line:20:2>
|   | |-BinaryOperator 0x123929770 <line:5:6, col:60> 'int' '&&'
|   | | |-BinaryOperator 0x12390fe60 <col:6, col:25> 'int' '&&'
|   | | | |-ImplicitCastExpr 0x12390fe48 <col:6> 'const char *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x12390fd48 <col:6> 'const char *' lvalue ParmVar 0x12390faf0 'auth' 'const char *'
|   | | | `-BinaryOperator 0x12390fe28 <col:14, col:25> 'int' '!='
|   | | |   |-ImplicitCastExpr 0x12390fe10 <col:14, col:20> 'int' <IntegralCast>
|   | | |   | `-ImplicitCastExpr 0x12390fdf8 <col:14, col:20> 'char' <LValueToRValue>
|   | | |   |   `-ArraySubscriptExpr 0x12390fdc0 <col:14, col:20> 'const char' lvalue
|   | | |   |     |-ImplicitCastExpr 0x12390fda8 <col:14> 'const char *' <LValueToRValue>
|   | | |   |     | `-DeclRefExpr 0x12390fd68 <col:14> 'const char *' lvalue ParmVar 0x12390faf0 'auth' 'const char *'
|   | | |   |     `-IntegerLiteral 0x12390fd88 <col:19> 'int' 0
|   | | |   `-CharacterLiteral 0x12390fde0 <col:25> 'int' 0
|   | | `-BinaryOperator 0x123929750 <col:33, col:60> 'int' '=='
|   | |   |-CallExpr 0x123929698 <col:33, col:55> 'int'
|   | |   | |-ImplicitCastExpr 0x123929680 <col:33> 'int (*)(const char *, const char *, unsigned long)' <FunctionToPointerDecay>
|   | |   | | `-DeclRefExpr 0x123929560 <col:33> 'int (const char *, const char *, unsigned long)' Function 0x123929310 'strncmp' 'int (const char *, const char *, unsigned long)'
|   | |   | |-ImplicitCastExpr 0x1239296d0 <col:41> 'const char *' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x123929580 <col:41> 'const char *' lvalue ParmVar 0x12390faf0 'auth' 'const char *'
|   | |   | |-ImplicitCastExpr 0x123929700 <col:47> 'const char *' <NoOp>
|   | |   | | `-ImplicitCastExpr 0x1239296e8 <col:47> 'char *' <ArrayToPointerDecay>
|   | |   | |   `-StringLiteral 0x1239295e0 <col:47> 'char[4]' lvalue "STR"
|   | |   | `-ImplicitCastExpr 0x123929718 <col:54> 'unsigned long' <IntegralCast>
|   | |   |   `-IntegerLiteral 0x123929600 <col:54> 'int' 6
|   | |   `-IntegerLiteral 0x123929730 <col:60> 'int' 0
|   | `-CompoundStmt 0x12392c4e0 <col:63, line:20:2>
|   |   |-DeclStmt 0x123929810 <line:6:3, col:13>
|   |   | `-VarDecl 0x1239297a8 <col:3, col:9> col:9 used pass 'char *'
|   |   `-IfStmt 0x12392c4c0 <line:10:3, line:19:3>
|   |     |-RecoveryExpr 0x123929e20 <line:10:7> '<dependent type>' contains-errors lvalue
|   |     `-CompoundStmt 0x12392c4a0 <col:13, line:19:3>
|   |       |-BinaryOperator 0x12392b8c8 <line:11:4, col:37> 'char *' contains-errors '='
|   |       | |-DeclRefExpr 0x123929e40 <col:4> 'char *' lvalue Var 0x1239297a8 'pass' 'char *'
|   |       | `-CallExpr 0x12392b898 <col:11, col:37> '<dependent type>' contains-errors
|   |       |   |-DeclRefExpr 0x12392a080 <col:11> 'char *(const char *, int)' Function 0x123929ea0 'strchr' 'char *(const char *, int)'
|   |       |   |-CallExpr 0x12392b870 <col:18, col:31> '<dependent type>' contains-errors
|   |       |   | |-DeclRefExpr 0x12392a180 <col:18> 'int ()' Function 0x12392a0c8 'ZSTR_VAL' 'int ()'
|   |       |   | `-RecoveryExpr 0x12392b850 <col:27> '<dependent type>' contains-errors lvalue
|   |       |   `-CharacterLiteral 0x12392a1e0 <col:34> 'int' 58
|   |       `-IfStmt 0x12392c380 <line:12:4, line:17:4>
|   |         |-ImplicitCastExpr 0x12392b908 <line:12:8> 'char *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x12392b8e8 <col:8> 'char *' lvalue Var 0x1239297a8 'pass' 'char *'
|   |         `-CompoundStmt 0x12392c350 <col:14, line:17:4>
|   |           |-BinaryOperator 0x12392b9a0 <line:13:5, col:15> 'char' '='
|   |           | |-UnaryOperator 0x12392b958 <col:5, col:10> 'char' lvalue prefix '*' cannot overflow
|   |           | | `-UnaryOperator 0x12392b940 <col:6, col:10> 'char *' postfix '++'
|   |           | |   `-DeclRefExpr 0x12392b920 <col:6> 'char *' lvalue Var 0x1239297a8 'pass' 'char *'
|   |           | `-ImplicitCastExpr 0x12392b988 <col:15> 'char' <IntegralCast>
|   |           |   `-CharacterLiteral 0x12392b970 <col:15> 'int' 0
|   |           |-BinaryOperator 0x12392bf88 <line:14:5, col:73> '<dependent type>' contains-errors '='
|   |           | |-CXXDependentScopeMemberExpr 0x12392be80 <col:5, col:22> '<dependent type>' contains-errors lvalue .auth_user
|   |           | | `-CallExpr 0x12392be58 <col:5, col:20> '<dependent type>' contains-errors
|   |           | |   |-DeclRefExpr 0x12392baa0 <col:5> 'int ()' Function 0x12392b9e8 'SG' 'int ()'
|   |           | |   `-RecoveryExpr 0x12392be38 <col:8> '<dependent type>' contains-errors lvalue
|   |           | `-CallExpr 0x12392bf58 <col:34, col:73> '<dependent type>' contains-errors
|   |           |   |-DeclRefExpr 0x12392bc28 <col:34> 'int ()' Function 0x12392bb70 'estrndup' 'int ()'
|   |           |   |-CallExpr 0x12392bee8 <col:43, col:56> '<dependent type>' contains-errors
|   |           |   | |-DeclRefExpr 0x12392bc48 <col:43> 'int ()' Function 0x12392a0c8 'ZSTR_VAL' 'int ()'
|   |           |   | `-RecoveryExpr 0x12392bec8 <col:52> '<dependent type>' contains-errors lvalue
|   |           |   `-CallExpr 0x12392bf30 <col:59, col:72> '<dependent type>' contains-errors
|   |           |     |-DeclRefExpr 0x12392bd88 <col:59> 'int ()' Function 0x12392bcd0 'ZSTR_LEN' 'int ()'
|   |           |     `-RecoveryExpr 0x12392bf10 <col:68> '<dependent type>' contains-errors lvalue
|   |           |-BinaryOperator 0x12392c2d0 <line:15:5, col:50> '<dependent type>' contains-errors '='
|   |           | |-CXXDependentScopeMemberExpr 0x12392c230 <col:5, col:22> '<dependent type>' contains-errors lvalue .auth_password
|   |           | | `-CallExpr 0x12392c208 <col:5, col:20> '<dependent type>' contains-errors
|   |           | |   |-DeclRefExpr 0x12392bfa8 <col:5> 'int ()' Function 0x12392b9e8 'SG' 'int ()'
|   |           | |   `-RecoveryExpr 0x12392c1e8 <col:8> '<dependent type>' contains-errors lvalue
|   |           | `-CallExpr 0x12392c290 <col:38, col:50> 'int'
|   |           |   |-ImplicitCastExpr 0x12392c278 <col:38> 'int (*)()' <FunctionToPointerDecay>
|   |           |   | `-DeclRefExpr 0x12392c130 <col:38> 'int ()' Function 0x12392c078 'estrdup' 'int ()'
|   |           |   `-ImplicitCastExpr 0x12392c2b8 <col:46> 'char *' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x12392c150 <col:46> 'char *' lvalue Var 0x1239297a8 'pass' 'char *'
|   |           `-BinaryOperator 0x12392c330 <line:16:5, col:11> 'int' '='
|   |             |-DeclRefExpr 0x12392c2f0 <col:5> 'int' lvalue Var 0x12390fc90 'ret' 'int'
|   |             `-IntegerLiteral 0x12392c310 <col:11> 'int' 0
|   |-IfStmt 0x12392c630 <line:22:2, line:26:2> has_else
|   | |-BinaryOperator 0x12392c590 <line:22:6, col:14> 'int' '=='
|   | | |-ImplicitCastExpr 0x12392c578 <col:6> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x12392c520 <col:6> 'int' lvalue Var 0x12390fc90 'ret' 'int'
|   | | `-UnaryOperator 0x12392c560 <col:13, col:14> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x12392c540 <col:14> 'int' 1
|   | |-CompoundStmt 0x12392c5f0 <col:17, line:24:2>
|   | `-CompoundStmt 0x12392c620 <col:9, line:26:2>
|   |-IfStmt 0x124809588 <line:28:2, line:31:2>
|   | |-BinaryOperator 0x1248093f8 <line:28:6, col:73> 'int' '&&'
|   | | |-BinaryOperator 0x124809238 <col:6, col:38> 'int' '&&'
|   | | | |-BinaryOperator 0x12392c728 <col:6, col:19> 'int' '&&'
|   | | | | |-BinaryOperator 0x12392c6d0 <col:6, col:14> 'int' '=='
|   | | | | | |-ImplicitCastExpr 0x12392c6b8 <col:6> 'int' <LValueToRValue>
|   | | | | | | `-DeclRefExpr 0x12392c660 <col:6> 'int' lvalue Var 0x12390fc90 'ret' 'int'
|   | | | | | `-UnaryOperator 0x12392c6a0 <col:13, col:14> 'int' prefix '-'
|   | | | | |   `-IntegerLiteral 0x12392c680 <col:14> 'int' 1
|   | | | | `-ImplicitCastExpr 0x12392c710 <col:19> 'const char *' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x12392c6f0 <col:19> 'const char *' lvalue ParmVar 0x12390faf0 'auth' 'const char *'
|   | | | `-BinaryOperator 0x124809218 <col:27, col:38> 'int' '!='
|   | | |   |-ImplicitCastExpr 0x124809200 <col:27, col:33> 'int' <IntegralCast>
|   | | |   | `-ImplicitCastExpr 0x12392c7d8 <col:27, col:33> 'char' <LValueToRValue>
|   | | |   |   `-ArraySubscriptExpr 0x12392c7a0 <col:27, col:33> 'const char' lvalue
|   | | |   |     |-ImplicitCastExpr 0x12392c788 <col:27> 'const char *' <LValueToRValue>
|   | | |   |     | `-DeclRefExpr 0x12392c748 <col:27> 'const char *' lvalue ParmVar 0x12390faf0 'auth' 'const char *'
|   | | |   |     `-IntegerLiteral 0x12392c768 <col:32> 'int' 0
|   | | |   `-CharacterLiteral 0x12392c7c0 <col:38> 'int' 0
|   | | `-BinaryOperator 0x1248093d8 <col:46, col:73> 'int' '=='
|   | |   |-CallExpr 0x124809320 <col:46, col:68> 'int'
|   | |   | |-ImplicitCastExpr 0x124809308 <col:46> 'int (*)(const char *, const char *, unsigned long)' <FunctionToPointerDecay>
|   | |   | | `-DeclRefExpr 0x124809258 <col:46> 'int (const char *, const char *, unsigned long)' Function 0x123929310 'strncmp' 'int (const char *, const char *, unsigned long)'
|   | |   | |-ImplicitCastExpr 0x124809358 <col:54> 'const char *' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x124809278 <col:54> 'const char *' lvalue ParmVar 0x12390faf0 'auth' 'const char *'
|   | |   | |-ImplicitCastExpr 0x124809388 <col:60> 'const char *' <NoOp>
|   | |   | | `-ImplicitCastExpr 0x124809370 <col:60> 'char *' <ArrayToPointerDecay>
|   | |   | |   `-StringLiteral 0x124809298 <col:60> 'char[4]' lvalue "STR"
|   | |   | `-ImplicitCastExpr 0x1248093a0 <col:67> 'unsigned long' <IntegralCast>
|   | |   |   `-IntegerLiteral 0x1248092b8 <col:67> 'int' 7
|   | |   `-IntegerLiteral 0x1248093b8 <col:73> 'int' 0
|   | `-CompoundStmt 0x124809570 <col:76, line:31:2>
|   |   `-BinaryOperator 0x124809550 <line:30:3, col:9> 'int' '='
|   |     |-DeclRefExpr 0x124809510 <col:3> 'int' lvalue Var 0x12390fc90 'ret' 'int'
|   |     `-IntegerLiteral 0x124809530 <col:9> 'int' 0
|   |-IfStmt 0x124809668 <line:33:2, line:35:2>
|   | |-BinaryOperator 0x124809618 <line:33:6, col:14> 'int' '=='
|   | | |-ImplicitCastExpr 0x124809600 <col:6> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1248095a8 <col:6> 'int' lvalue Var 0x12390fc90 'ret' 'int'
|   | | `-UnaryOperator 0x1248095e8 <col:13, col:14> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x1248095c8 <col:14> 'int' 1
|   | `-CompoundStmt 0x124809658 <col:17, line:35:2>
|   `-ReturnStmt 0x1248096c0 <line:37:2, col:9>
|     `-ImplicitCastExpr 0x1248096a8 <col:9> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x124809688 <col:9> 'int' lvalue Var 0x12390fc90 'ret' 'int'
|-FunctionDecl 0x123929310 <line:5:33> col:33 implicit used strncmp 'int (const char *, const char *, unsigned long)' extern
| |-ParmVarDecl 0x123929410 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x123929478 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1239294e0 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x1239293b8 <<invalid sloc>> Implicit 888
|-FunctionDecl 0x123929ae8 <line:9:60> col:60 implicit used strlen 'unsigned long (const char *)' extern
| |-ParmVarDecl 0x123929be8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x123929b90 <<invalid sloc>> Implicit 902
`-FunctionDecl 0x123929ea0 <line:11:11> col:11 implicit used strchr 'char *(const char *, int)' extern
  |-ParmVarDecl 0x123929fa0 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x12392a008 <<invalid sloc>> <invalid sloc> 'int'
  `-BuiltinAttr 0x123929f48 <<invalid sloc>> Implicit 893
