TranslationUnitDecl 0x155055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1550564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x155055bd0 '__int128'
|-TypedefDecl 0x155056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x155055bf0 'unsigned __int128'
|-TypedefDecl 0x15580be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x15580bc00 'struct __NSConstantString_tag'
|   `-Record 0x155056580 '__NSConstantString_tag'
|-TypedefDecl 0x15580be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x155055d90 '__SVInt8_t'
|-TypedefDecl 0x15580bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x155055db0 '__SVInt16_t'
|-TypedefDecl 0x15580bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x155055dd0 '__SVInt32_t'
|-TypedefDecl 0x15580bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x155055df0 '__SVInt64_t'
|-TypedefDecl 0x15580c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x155055e10 '__SVUint8_t'
|-TypedefDecl 0x15580c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x155055e30 '__SVUint16_t'
|-TypedefDecl 0x15580c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x155055e50 '__SVUint32_t'
|-TypedefDecl 0x15580c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x155055e70 '__SVUint64_t'
|-TypedefDecl 0x15580c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x155055e90 '__SVFloat16_t'
|-TypedefDecl 0x15580c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x155055eb0 '__SVFloat32_t'
|-TypedefDecl 0x15580c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x155055ed0 '__SVFloat64_t'
|-TypedefDecl 0x15580c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x155055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x15580c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x155055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x15580c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x155055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x15580c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x155055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x15580c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x155055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x15580c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x155055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x15580c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x155055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x15580c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x155055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x15580c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x155055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x15580c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x155056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x15580c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x155056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x15580c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x155056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x15580c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x155056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x15580c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x155056090 '__clang_svint8x3_t'
|-TypedefDecl 0x15580c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1550560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x15580c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1550560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x15580c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1550560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x15580c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x155056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x15580ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x155056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x15580cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x155056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x15580cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x155056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x15580cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x155056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x15580d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1550561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x15580d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1550561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x15580d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1550561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x15580d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x155056210 '__clang_svint8x4_t'
|-TypedefDecl 0x15580d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x155056230 '__clang_svint16x4_t'
|-TypedefDecl 0x15580d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x155056250 '__clang_svint32x4_t'
|-TypedefDecl 0x15580d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x155056270 '__clang_svint64x4_t'
|-TypedefDecl 0x15580d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x155056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x15580d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1550562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x15580d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1550562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x15580d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1550562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x15580d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x155056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x15580d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x155056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x15580d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x155056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x15580d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x155056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x15580da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x155056390 '__SVBool_t'
|-TypedefDecl 0x15580da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1550563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x15580dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1550563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x15580db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1550563f0 '__SVCount_t'
|-TypedefDecl 0x15580dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x15580dbb0 'char *'
|   `-BuiltinType 0x1550556b0 'char'
|-TypedefDecl 0x15580dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x15580dbb0 'char *'
|   `-BuiltinType 0x1550556b0 'char'
|-FunctionDecl 0x155827558 <dataset_diviso_filec/func4043_vuln.c:1:1, line:65:1> line:1:12 invalid apparmor_setprocattr 'int (struct task_struct *, char *, void *, int)' static
| |-ParmVarDecl 0x15580e248 <col:33, col:53> col:53 used task 'struct task_struct *'
| |-ParmVarDecl 0x15580e2c8 <col:59, col:65> col:65 used name 'char *'
| |-ParmVarDecl 0x15580e348 <line:2:5, col:11> col:11 used value 'void *'
| |-ParmVarDecl 0x155827400 <col:18, col:25> col:25 invalid size 'int'
| `-CompoundStmt 0x15582e3d0 <line:3:1, line:65:1>
|   |-DeclStmt 0x155827788 <line:4:2, col:30>
|   | |-VarDecl 0x155827638 <col:2, col:8> col:8 used command 'char *'
|   | `-VarDecl 0x1558276b8 <col:2, col:25> col:18 used args 'char *' cinit
|   |   `-ImplicitCastExpr 0x155827758 <col:25> 'char *' <BitCast>
|   |     `-ImplicitCastExpr 0x155827740 <col:25> 'void *' <LValueToRValue>
|   |       `-DeclRefExpr 0x155827720 <col:25> 'void *' lvalue ParmVar 0x15580e348 'value' 'void *'
|   |-UnaryExprOrTypeTraitExpr 0x155827810 <line:5:2, col:9> 'unsigned long' contains-errors sizeof
|   | `-RecoveryExpr 0x1558277f0 <col:9> '<dependent type>' contains-errors lvalue
|   |-DeclStmt 0x1558278b0 <line:6:2, col:11>
|   | `-VarDecl 0x155827848 <col:2, col:6> col:6 used error 'int'
|   |-IfStmt 0x155827a00 <line:8:2, line:9:11>
|   | |-BinaryOperator 0x155827908 <line:8:6, col:14> 'int' contains-errors '=='
|   | | |-RecoveryExpr 0x1558278c8 <col:6> '<dependent type>' contains-errors lvalue
|   | | `-IntegerLiteral 0x1558278e8 <col:14> 'int' 0
|   | `-ReturnStmt 0x1558279f0 <line:9:3, col:11>
|   |   `-UnaryOperator 0x1558279d8 <col:10, col:11> '<dependent type>' contains-errors prefix '-' cannot overflow
|   |     `-ImplicitCastExpr 0x1558279c0 <col:11> '<dependent type>' contains-errors <LValueToRValue>
|   |       `-RecoveryExpr 0x155827970 <col:11> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x155827e50 <line:11:2, line:15:2>
|   | |-BinaryOperator 0x155827b48 <line:11:6, col:24> 'int' contains-errors '!='
|   | | |-ArraySubscriptExpr 0x155827b28 <col:6, col:19> '<dependent type>' contains-errors lvalue
|   | | | |-ImplicitCastExpr 0x155827b10 <col:6> 'char *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x155827a20 <col:6> 'char *' lvalue Var 0x1558276b8 'args' 'char *'
|   | | | `-BinaryOperator 0x155827a80 <col:11, col:18> '<dependent type>' contains-errors '-'
|   | | |   |-RecoveryExpr 0x155827a40 <col:11> '<dependent type>' contains-errors lvalue
|   | | |   `-IntegerLiteral 0x155827a60 <col:18> 'int' 1
|   | | `-CharacterLiteral 0x155827ad8 <col:24> 'int' 0
|   | `-CompoundStmt 0x155827e30 <col:30, line:15:2>
|   |   |-IfStmt 0x155827cd8 <line:12:3, line:13:12>
|   |   | |-BinaryOperator 0x155827be0 <line:12:7, col:15> 'int' contains-errors '=='
|   |   | | |-RecoveryExpr 0x155827b68 <col:7> '<dependent type>' contains-errors lvalue
|   |   | | `-RecoveryExpr 0x155827bc0 <col:15> '<dependent type>' contains-errors lvalue
|   |   | `-ReturnStmt 0x155827cc8 <line:13:4, col:12>
|   |   |   `-UnaryOperator 0x155827cb0 <col:11, col:12> '<dependent type>' contains-errors prefix '-' cannot overflow
|   |   |     `-ImplicitCastExpr 0x155827c98 <col:12> '<dependent type>' contains-errors <LValueToRValue>
|   |   |       `-RecoveryExpr 0x155827c48 <col:12> '<dependent type>' contains-errors lvalue
|   |   `-BinaryOperator 0x155827e10 <line:14:3, col:16> '<dependent type>' contains-errors '='
|   |     |-ArraySubscriptExpr 0x155827df0 <col:3, col:12> '<dependent type>' contains-errors lvalue
|   |     | |-ImplicitCastExpr 0x155827dc0 <col:3> 'char *' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x155827cf8 <col:3> 'char *' lvalue Var 0x1558276b8 'args' 'char *'
|   |     | `-ImplicitCastExpr 0x155827dd8 <col:8> '<dependent type>' contains-errors <LValueToRValue>
|   |     |   `-RecoveryExpr 0x155827d18 <col:8> '<dependent type>' contains-errors lvalue
|   |     `-CharacterLiteral 0x155827d88 <col:16> 'int' 0
|   |-IfStmt 0x155827fe0 <line:18:2, line:19:11>
|   | |-BinaryOperator 0x155827ee8 <line:18:6, col:17> 'int' contains-errors '!='
|   | | |-RecoveryExpr 0x155827ec8 <col:6> '<dependent type>' contains-errors lvalue
|   | | `-DeclRefExpr 0x155827e88 <col:17> 'struct task_struct *' lvalue ParmVar 0x15580e248 'task' 'struct task_struct *'
|   | `-ReturnStmt 0x155827fd0 <line:19:3, col:11>
|   |   `-UnaryOperator 0x155827fb8 <col:10, col:11> '<dependent type>' contains-errors prefix '-' cannot overflow
|   |     `-ImplicitCastExpr 0x155827fa0 <col:11> '<dependent type>' contains-errors <LValueToRValue>
|   |       `-RecoveryExpr 0x155827f50 <col:11> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x155828070 <line:21:2, col:9> 'char *' '='
|   | |-DeclRefExpr 0x155828000 <col:2> 'char *' lvalue Var 0x1558276b8 'args' 'char *'
|   | `-ImplicitCastExpr 0x155828058 <col:9> 'char *' <BitCast>
|   |   `-ImplicitCastExpr 0x155828040 <col:9> 'void *' <LValueToRValue>
|   |     `-DeclRefExpr 0x155828020 <col:9> 'void *' lvalue ParmVar 0x15580e348 'value' 'void *'
|   |-BinaryOperator 0x1558282f0 <line:22:2, col:19> 'char *' '='
|   | |-DeclRefExpr 0x155828090 <col:2> 'char *' lvalue Var 0x1558276b8 'args' 'char *'
|   | `-ImplicitCastExpr 0x1558282d8 <col:9, col:19> 'char *' <IntegralToPointer>
|   |   `-CallExpr 0x155828298 <col:9, col:19> 'int'
|   |     |-ImplicitCastExpr 0x155828280 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x155828210 <col:9> 'int ()' Function 0x155828158 'strim' 'int ()'
|   |     `-ImplicitCastExpr 0x1558282c0 <col:15> 'char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x155828230 <col:15> 'char *' lvalue Var 0x1558276b8 'args' 'char *'
|   |-BinaryOperator 0x155828f78 <line:23:2, col:31> 'char *' '='
|   | |-DeclRefExpr 0x155828310 <col:2> 'char *' lvalue Var 0x155827638 'command' 'char *'
|   | `-ImplicitCastExpr 0x155828f60 <col:12, col:31> 'char *' <IntegralToPointer>
|   |   `-CallExpr 0x155828f18 <col:12, col:31> 'int'
|   |     |-ImplicitCastExpr 0x155828f00 <col:12> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x155828e10 <col:12> 'int ()' Function 0x155828358 'strsep' 'int ()'
|   |     |-UnaryOperator 0x155828e80 <col:19, col:20> 'char **' prefix '&' cannot overflow
|   |     | `-DeclRefExpr 0x155828e30 <col:20> 'char *' lvalue Var 0x1558276b8 'args' 'char *'
|   |     `-ImplicitCastExpr 0x155828f48 <col:26> 'char *' <ArrayToPointerDecay>
|   |       `-StringLiteral 0x155828ee0 <col:26> 'char[4]' lvalue "STR"
|   |-IfStmt 0x1558290c0 <line:24:2, line:25:11>
|   | |-UnaryOperator 0x155828fd0 <line:24:6, col:7> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x155828fb8 <col:7> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x155828f98 <col:7> 'char *' lvalue Var 0x1558276b8 'args' 'char *'
|   | `-ReturnStmt 0x1558290b0 <line:25:3, col:11>
|   |   `-UnaryOperator 0x155829098 <col:10, col:11> '<dependent type>' contains-errors prefix '-' cannot overflow
|   |     `-ImplicitCastExpr 0x155829080 <col:11> '<dependent type>' contains-errors <LValueToRValue>
|   |       `-RecoveryExpr 0x155829030 <col:11> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x155829290 <line:26:2, col:25> 'char *' '='
|   | |-DeclRefExpr 0x1558290e0 <col:2> 'char *' lvalue Var 0x1558276b8 'args' 'char *'
|   | `-ImplicitCastExpr 0x155829278 <col:9, col:25> 'char *' <IntegralToPointer>
|   |   `-CallExpr 0x155829238 <col:9, col:25> 'int'
|   |     |-ImplicitCastExpr 0x155829220 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1558291e0 <col:9> 'int ()' Function 0x155829128 'skip_spaces' 'int ()'
|   |     `-ImplicitCastExpr 0x155829260 <col:21> 'char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x155829200 <col:21> 'char *' lvalue Var 0x1558276b8 'args' 'char *'
|   |-IfStmt 0x155829408 <line:27:2, line:28:11>
|   | |-UnaryOperator 0x155829318 <line:27:6, col:8> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x155829300 <col:7, col:8> 'char' <LValueToRValue>
|   | |   `-UnaryOperator 0x1558292e8 <col:7, col:8> 'char' lvalue prefix '*' cannot overflow
|   | |     `-ImplicitCastExpr 0x1558292d0 <col:8> 'char *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x1558292b0 <col:8> 'char *' lvalue Var 0x1558276b8 'args' 'char *'
|   | `-ReturnStmt 0x1558293f8 <line:28:3, col:11>
|   |   `-UnaryOperator 0x1558293e0 <col:10, col:11> '<dependent type>' contains-errors prefix '-' cannot overflow
|   |     `-ImplicitCastExpr 0x1558293c8 <col:11> '<dependent type>' contains-errors <LValueToRValue>
|   |       `-RecoveryExpr 0x155829378 <col:11> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x15582e288 <line:31:2, line:61:2> has_else
|   | |-BinaryOperator 0x1558299d8 <line:31:6, col:29> 'int' '=='
|   | | |-CallExpr 0x155829928 <col:6, col:24> 'int'
|   | | | |-ImplicitCastExpr 0x155829910 <col:6> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x155829850 <col:6> 'int (const char *, const char *)' Function 0x155829670 'strcmp' 'int (const char *, const char *)'
|   | | | |-ImplicitCastExpr 0x155829970 <col:13> 'const char *' <NoOp>
|   | | | | `-ImplicitCastExpr 0x155829958 <col:13> 'char *' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x155829870 <col:13> 'char *' lvalue ParmVar 0x15580e2c8 'name' 'char *'
|   | | | `-ImplicitCastExpr 0x1558299a0 <col:19> 'const char *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x155829988 <col:19> 'char *' <ArrayToPointerDecay>
|   | | |     `-StringLiteral 0x155829890 <col:19> 'char[4]' lvalue "STR"
|   | | `-IntegerLiteral 0x1558299b8 <col:29> 'int' 0
|   | |-CompoundStmt 0x15582e048 <col:32, line:55:2>
|   | | `-IfStmt 0x15582e018 <line:32:3, line:54:3> has_else
|   | |   |-BinaryOperator 0x155829b50 <line:32:7, col:33> 'int' '=='
|   | |   | |-CallExpr 0x155829aa0 <col:7, col:28> 'int'
|   | |   | | |-ImplicitCastExpr 0x155829a88 <col:7> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   | |   | | | `-DeclRefExpr 0x1558299f8 <col:7> 'int (const char *, const char *)' Function 0x155829670 'strcmp' 'int (const char *, const char *)'
|   | |   | | |-ImplicitCastExpr 0x155829ae8 <col:14> 'const char *' <NoOp>
|   | |   | | | `-ImplicitCastExpr 0x155829ad0 <col:14> 'char *' <LValueToRValue>
|   | |   | | |   `-DeclRefExpr 0x155829a18 <col:14> 'char *' lvalue Var 0x155827638 'command' 'char *'
|   | |   | | `-ImplicitCastExpr 0x155829b18 <col:23> 'const char *' <NoOp>
|   | |   | |   `-ImplicitCastExpr 0x155829b00 <col:23> 'char *' <ArrayToPointerDecay>
|   | |   | |     `-StringLiteral 0x155829a38 <col:23> 'char[4]' lvalue "STR"
|   | |   | `-IntegerLiteral 0x155829b30 <col:33> 'int' 0
|   | |   |-CompoundStmt 0x15582ce58 <col:36, line:35:3>
|   | |   | `-BinaryOperator 0x15582ce38 <line:33:4, line:34:20> 'int' contains-errors '='
|   | |   |   |-DeclRefExpr 0x155829b70 <line:33:4> 'int' lvalue Var 0x155827848 'error' 'int'
|   | |   |   `-CallExpr 0x15582ce00 <col:12, line:34:20> '<dependent type>' contains-errors
|   | |   |     |-DeclRefExpr 0x155829c70 <line:33:12> 'int ()' Function 0x155829bb8 'aa_setprocattr_changehat' 'int ()'
|   | |   |     |-DeclRefExpr 0x155829c90 <col:37> 'char *' lvalue Var 0x1558276b8 'args' 'char *'
|   | |   |     |-RecoveryExpr 0x155829d68 <col:43> '<dependent type>' contains-errors lvalue
|   | |   |     `-UnaryOperator 0x155829dc0 <line:34:9, col:10> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | |   |       `-ImplicitCastExpr 0x155829da8 <col:10> '<dependent type>' contains-errors <LValueToRValue>
|   | |   |         `-RecoveryExpr 0x155829d88 <col:10> '<dependent type>' contains-errors lvalue
|   | |   `-IfStmt 0x15582dfe8 <line:35:10, line:54:3> has_else
|   | |     |-BinaryOperator 0x15582cfc8 <line:35:14, col:40> 'int' '=='
|   | |     | |-CallExpr 0x15582cf18 <col:14, col:35> 'int'
|   | |     | | |-ImplicitCastExpr 0x15582cf00 <col:14> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   | |     | | | `-DeclRefExpr 0x15582ce70 <col:14> 'int (const char *, const char *)' Function 0x155829670 'strcmp' 'int (const char *, const char *)'
|   | |     | | |-ImplicitCastExpr 0x15582cf60 <col:21> 'const char *' <NoOp>
|   | |     | | | `-ImplicitCastExpr 0x15582cf48 <col:21> 'char *' <LValueToRValue>
|   | |     | | |   `-DeclRefExpr 0x15582ce90 <col:21> 'char *' lvalue Var 0x155827638 'command' 'char *'
|   | |     | | `-ImplicitCastExpr 0x15582cf90 <col:30> 'const char *' <NoOp>
|   | |     | |   `-ImplicitCastExpr 0x15582cf78 <col:30> 'char *' <ArrayToPointerDecay>
|   | |     | |     `-StringLiteral 0x15582ceb0 <col:30> 'char[4]' lvalue "STR"
|   | |     | `-IntegerLiteral 0x15582cfa8 <col:40> 'int' 0
|   | |     |-CompoundStmt 0x15582d048 <col:43, line:38:3>
|   | |     `-IfStmt 0x15582dfb8 <col:10, line:54:3> has_else
|   | |       |-BinaryOperator 0x15582d1b0 <line:38:14, col:40> 'int' '=='
|   | |       | |-CallExpr 0x15582d100 <col:14, col:35> 'int'
|   | |       | | |-ImplicitCastExpr 0x15582d0e8 <col:14> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   | |       | | | `-DeclRefExpr 0x15582d058 <col:14> 'int (const char *, const char *)' Function 0x155829670 'strcmp' 'int (const char *, const char *)'
|   | |       | | |-ImplicitCastExpr 0x15582d148 <col:21> 'const char *' <NoOp>
|   | |       | | | `-ImplicitCastExpr 0x15582d130 <col:21> 'char *' <LValueToRValue>
|   | |       | | |   `-DeclRefExpr 0x15582d078 <col:21> 'char *' lvalue Var 0x155827638 'command' 'char *'
|   | |       | | `-ImplicitCastExpr 0x15582d178 <col:30> 'const char *' <NoOp>
|   | |       | |   `-ImplicitCastExpr 0x15582d160 <col:30> 'char *' <ArrayToPointerDecay>
|   | |       | |     `-StringLiteral 0x15582d098 <col:30> 'char[4]' lvalue "STR"
|   | |       | `-IntegerLiteral 0x15582d190 <col:40> 'int' 0
|   | |       |-CompoundStmt 0x15582d310 <col:43, line:41:3>
|   | |       `-IfStmt 0x15582df88 <col:10, line:54:3> has_else
|   | |         |-BinaryOperator 0x15582d478 <line:41:14, col:40> 'int' '=='
|   | |         | |-CallExpr 0x15582d3c8 <col:14, col:35> 'int'
|   | |         | | |-ImplicitCastExpr 0x15582d3b0 <col:14> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   | |         | | | `-DeclRefExpr 0x15582d320 <col:14> 'int (const char *, const char *)' Function 0x155829670 'strcmp' 'int (const char *, const char *)'
|   | |         | | |-ImplicitCastExpr 0x15582d410 <col:21> 'const char *' <NoOp>
|   | |         | | | `-ImplicitCastExpr 0x15582d3f8 <col:21> 'char *' <LValueToRValue>
|   | |         | | |   `-DeclRefExpr 0x15582d340 <col:21> 'char *' lvalue Var 0x155827638 'command' 'char *'
|   | |         | | `-ImplicitCastExpr 0x15582d440 <col:30> 'const char *' <NoOp>
|   | |         | |   `-ImplicitCastExpr 0x15582d428 <col:30> 'char *' <ArrayToPointerDecay>
|   | |         | |     `-StringLiteral 0x15582d360 <col:30> 'char[4]' lvalue "STR"
|   | |         | `-IntegerLiteral 0x15582d458 <col:40> 'int' 0
|   | |         |-CompoundStmt 0x15582d4f8 <col:43, line:44:3>
|   | |         `-IfStmt 0x15582df58 <col:10, line:54:3> has_else
|   | |           |-BinaryOperator 0x15582d660 <line:44:14, col:40> 'int' '=='
|   | |           | |-CallExpr 0x15582d5b0 <col:14, col:35> 'int'
|   | |           | | |-ImplicitCastExpr 0x15582d598 <col:14> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   | |           | | | `-DeclRefExpr 0x15582d508 <col:14> 'int (const char *, const char *)' Function 0x155829670 'strcmp' 'int (const char *, const char *)'
|   | |           | | |-ImplicitCastExpr 0x15582d5f8 <col:21> 'const char *' <NoOp>
|   | |           | | | `-ImplicitCastExpr 0x15582d5e0 <col:21> 'char *' <LValueToRValue>
|   | |           | | |   `-DeclRefExpr 0x15582d528 <col:21> 'char *' lvalue Var 0x155827638 'command' 'char *'
|   | |           | | `-ImplicitCastExpr 0x15582d628 <col:30> 'const char *' <NoOp>
|   | |           | |   `-ImplicitCastExpr 0x15582d610 <col:30> 'char *' <ArrayToPointerDecay>
|   | |           | |     `-StringLiteral 0x15582d548 <col:30> 'char[4]' lvalue "STR"
|   | |           | `-IntegerLiteral 0x15582d640 <col:40> 'int' 0
|   | |           |-CompoundStmt 0x15582d838 <col:43, line:46:3>
|   | |           | `-BinaryOperator 0x15582d818 <line:45:4, col:39> 'int' '='
|   | |           |   |-DeclRefExpr 0x15582d680 <col:4> 'int' lvalue Var 0x155827848 'error' 'int'
|   | |           |   `-CallExpr 0x15582d7d8 <col:12, col:39> 'int'
|   | |           |     |-ImplicitCastExpr 0x15582d7c0 <col:12> 'int (*)()' <FunctionToPointerDecay>
|   | |           |     | `-DeclRefExpr 0x15582d780 <col:12> 'int ()' Function 0x15582d6c8 'aa_setprocattr_permipc' 'int ()'
|   | |           |     `-ImplicitCastExpr 0x15582d800 <col:35> 'char *' <LValueToRValue>
|   | |           |       `-DeclRefExpr 0x15582d7a0 <col:35> 'char *' lvalue Var 0x1558276b8 'args' 'char *'
|   | |           `-CompoundStmt 0x15582df38 <line:46:10, line:54:3>
|   | |             |-DeclStmt 0x15582d9c8 <line:47:4, col:31>
|   | |             | |-RecordDecl 0x15582d850 <col:4, col:11> col:11 struct common_audit_data
|   | |             | `-VarDecl 0x15582d948 <col:4, col:29> col:29 referenced invalid sa 'struct common_audit_data'
|   | |             `-BinaryOperator 0x15582dce8 <line:50:4, col:18> '<dependent type>' contains-errors '='
|   | |               |-CXXDependentScopeMemberExpr 0x15582dc80 <col:4, col:11> '<dependent type>' contains-errors lvalue .info
|   | |               | `-CXXDependentScopeMemberExpr 0x15582dc38 <col:4, col:7> '<dependent type>' contains-errors lvalue .aad
|   | |               |   `-RecoveryExpr 0x15582dc10 <col:4> '<dependent type>' contains-errors lvalue
|   | |               |     `-DeclRefExpr 0x15582dbf0 <col:4> 'struct common_audit_data' lvalue Var 0x15582d948 'sa' 'struct common_audit_data'
|   | |               `-DeclRefExpr 0x15582dcc8 <col:18> 'char *' lvalue ParmVar 0x15580e2c8 'name' 'char *'
|   | `-IfStmt 0x15582e258 <line:55:9, line:61:2> has_else
|   |   |-BinaryOperator 0x15582e1b8 <line:55:13, col:36> 'int' '=='
|   |   | |-CallExpr 0x15582e108 <col:13, col:31> 'int'
|   |   | | |-ImplicitCastExpr 0x15582e0f0 <col:13> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |   | | | `-DeclRefExpr 0x15582e060 <col:13> 'int (const char *, const char *)' Function 0x155829670 'strcmp' 'int (const char *, const char *)'
|   |   | | |-ImplicitCastExpr 0x15582e150 <col:20> 'const char *' <NoOp>
|   |   | | | `-ImplicitCastExpr 0x15582e138 <col:20> 'char *' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x15582e080 <col:20> 'char *' lvalue ParmVar 0x15580e2c8 'name' 'char *'
|   |   | | `-ImplicitCastExpr 0x15582e180 <col:26> 'const char *' <NoOp>
|   |   | |   `-ImplicitCastExpr 0x15582e168 <col:26> 'char *' <ArrayToPointerDecay>
|   |   | |     `-StringLiteral 0x15582e0a0 <col:26> 'char[4]' lvalue "STR"
|   |   | `-IntegerLiteral 0x15582e198 <col:36> 'int' 0
|   |   |-CompoundStmt 0x15582e238 <col:39, line:58:2>
|   |   `-CompoundStmt 0x15582e248 <col:9, line:61:2>
|   |-IfStmt 0x15582e368 <line:62:2, line:63:11>
|   | |-UnaryOperator 0x15582e2f0 <line:62:6, col:7> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x15582e2d8 <col:7> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x15582e2b8 <col:7> 'int' lvalue Var 0x155827848 'error' 'int'
|   | `-BinaryOperator 0x15582e348 <line:63:3, col:11> 'int' contains-errors '='
|   |   |-DeclRefExpr 0x15582e308 <col:3> 'int' lvalue Var 0x155827848 'error' 'int'
|   |   `-RecoveryExpr 0x15582e328 <col:11> '<dependent type>' contains-errors lvalue
|   `-ReturnStmt 0x15582e3c0 <line:64:2, col:9>
|     `-ImplicitCastExpr 0x15582e3a8 <col:9> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x15582e388 <col:9> 'int' lvalue Var 0x155827848 'error' 'int'
`-FunctionDecl 0x155829670 <line:31:6> col:6 implicit used strcmp 'int (const char *, const char *)' extern
  |-ParmVarDecl 0x155829770 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x1558297d8 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x155829718 <<invalid sloc>> Implicit 887
