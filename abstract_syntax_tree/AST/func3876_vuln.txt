TranslationUnitDecl 0x14b827808 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x14b8286b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x14b827dd0 '__int128'
|-TypedefDecl 0x14b828728 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x14b827df0 'unsigned __int128'
|-TypedefDecl 0x14b8f8430 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x14b8f8200 'struct __NSConstantString_tag'
|   `-Record 0x14b828780 '__NSConstantString_tag'
|-TypedefDecl 0x14b8f8498 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x14b827f90 '__SVInt8_t'
|-TypedefDecl 0x14b8f8500 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x14b827fb0 '__SVInt16_t'
|-TypedefDecl 0x14b8f8568 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x14b827fd0 '__SVInt32_t'
|-TypedefDecl 0x14b8f85d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x14b827ff0 '__SVInt64_t'
|-TypedefDecl 0x14b8f8638 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x14b828010 '__SVUint8_t'
|-TypedefDecl 0x14b8f86a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x14b828030 '__SVUint16_t'
|-TypedefDecl 0x14b8f8708 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x14b828050 '__SVUint32_t'
|-TypedefDecl 0x14b8f8770 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x14b828070 '__SVUint64_t'
|-TypedefDecl 0x14b8f87d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x14b828090 '__SVFloat16_t'
|-TypedefDecl 0x14b8f8840 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x14b8280b0 '__SVFloat32_t'
|-TypedefDecl 0x14b8f88a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x14b8280d0 '__SVFloat64_t'
|-TypedefDecl 0x14b8f8910 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x14b8280f0 '__SVBfloat16_t'
|-TypedefDecl 0x14b8f8978 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x14b828110 '__clang_svint8x2_t'
|-TypedefDecl 0x14b8f89e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x14b828130 '__clang_svint16x2_t'
|-TypedefDecl 0x14b8f8a48 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x14b828150 '__clang_svint32x2_t'
|-TypedefDecl 0x14b8f8ab0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x14b828170 '__clang_svint64x2_t'
|-TypedefDecl 0x14b8f8b18 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x14b828190 '__clang_svuint8x2_t'
|-TypedefDecl 0x14b8f8b80 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x14b8281b0 '__clang_svuint16x2_t'
|-TypedefDecl 0x14b8f8be8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x14b8281d0 '__clang_svuint32x2_t'
|-TypedefDecl 0x14b8f8c50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x14b8281f0 '__clang_svuint64x2_t'
|-TypedefDecl 0x14b8f8cb8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x14b828210 '__clang_svfloat16x2_t'
|-TypedefDecl 0x14b8f8d20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x14b828230 '__clang_svfloat32x2_t'
|-TypedefDecl 0x14b8f8d88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x14b828250 '__clang_svfloat64x2_t'
|-TypedefDecl 0x14b8f8df0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x14b828270 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x14b8f8e58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x14b828290 '__clang_svint8x3_t'
|-TypedefDecl 0x14b8f8ec0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x14b8282b0 '__clang_svint16x3_t'
|-TypedefDecl 0x14b8f8f28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x14b8282d0 '__clang_svint32x3_t'
|-TypedefDecl 0x14b8f8f90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x14b8282f0 '__clang_svint64x3_t'
|-TypedefDecl 0x14b8f8ff8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x14b828310 '__clang_svuint8x3_t'
|-TypedefDecl 0x14b8f9060 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x14b828330 '__clang_svuint16x3_t'
|-TypedefDecl 0x14b8f90c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x14b828350 '__clang_svuint32x3_t'
|-TypedefDecl 0x14b8f9130 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x14b828370 '__clang_svuint64x3_t'
|-TypedefDecl 0x14b8f9198 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x14b828390 '__clang_svfloat16x3_t'
|-TypedefDecl 0x14b8f9a00 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x14b8283b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x14b8f9a68 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x14b8283d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x14b8f9ad0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x14b8283f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x14b8f9b38 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x14b828410 '__clang_svint8x4_t'
|-TypedefDecl 0x14b8f9ba0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x14b828430 '__clang_svint16x4_t'
|-TypedefDecl 0x14b8f9c08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x14b828450 '__clang_svint32x4_t'
|-TypedefDecl 0x14b8f9c70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x14b828470 '__clang_svint64x4_t'
|-TypedefDecl 0x14b8f9cd8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x14b828490 '__clang_svuint8x4_t'
|-TypedefDecl 0x14b8f9d40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x14b8284b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x14b8f9da8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x14b8284d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x14b8f9e10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x14b8284f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x14b8f9e78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x14b828510 '__clang_svfloat16x4_t'
|-TypedefDecl 0x14b8f9ee0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x14b828530 '__clang_svfloat32x4_t'
|-TypedefDecl 0x14b8f9f48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x14b828550 '__clang_svfloat64x4_t'
|-TypedefDecl 0x14b8f9fb0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x14b828570 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x14b8fa018 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x14b828590 '__SVBool_t'
|-TypedefDecl 0x14b8fa080 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x14b8285b0 '__clang_svboolx2_t'
|-TypedefDecl 0x14b8fa0e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x14b8285d0 '__clang_svboolx4_t'
|-TypedefDecl 0x14b8fa150 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x14b8285f0 '__SVCount_t'
|-TypedefDecl 0x14b8fa1f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x14b8fa1b0 'char *'
|   `-BuiltinType 0x14b8278b0 'char'
|-TypedefDecl 0x14b8fa268 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x14b8fa1b0 'char *'
|   `-BuiltinType 0x14b8278b0 'char'
|-FunctionDecl 0x14b8fa728 <dataset_diviso_filec/func3876_vuln.c:1:1, line:38:1> line:1:19 invalid ConvertRGBToHSV 'int (const int, const int, const int, double *, double *, double *)'
| |-ParmVarDecl 0x14b8fa2f0 <col:35, col:49> col:49 invalid red 'const int'
| |-ParmVarDecl 0x14b8fa370 <col:53, col:67> col:67 invalid green 'const int'
| |-ParmVarDecl 0x14b8fa3f0 <line:2:3, col:17> col:17 invalid blue 'const int'
| |-ParmVarDecl 0x14b8fa4a8 <col:22, col:30> col:30 used hue 'double *'
| |-ParmVarDecl 0x14b8fa528 <col:34, col:42> col:42 used saturation 'double *'
| |-ParmVarDecl 0x14b8fa5a8 <col:53, col:61> col:61 used value 'double *'
| `-CompoundStmt 0x14b030cc0 <line:3:1, line:38:1>
|   |-DeclStmt 0x14b8fa9a0 <line:4:3, line:7:8>
|   | |-VarDecl 0x14b8fa818 <line:4:3, line:5:5> col:5 used c 'double'
|   | |-VarDecl 0x14b8fa898 <line:4:3, line:6:5> col:5 used max 'double'
|   | `-VarDecl 0x14b8fa918 <line:4:3, line:7:5> col:5 used min 'double'
|   |-BinaryOperator 0x14b914048 <line:13:3, line:14:23> 'double' contains-errors '='
|   | |-DeclRefExpr 0x14b913c60 <line:13:3> 'double' lvalue Var 0x14b8fa898 'max' 'double'
|   | `-CallExpr 0x14b914018 <col:7, line:14:23> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x14b913d60 <line:13:7> 'int ()' Function 0x14b913ca8 'MagickMax' 'int ()'
|   |   |-BinaryOperator 0x14b913f48 <col:17, col:30> '<dependent type>' contains-errors '*'
|   |   | |-RecoveryExpr 0x14b913f28 <col:17> '<dependent type>' contains-errors lvalue
|   |   | `-RecoveryExpr 0x14b913d98 <col:30> '<dependent type>' contains-errors lvalue
|   |   `-CallExpr 0x14b913fe8 <col:34, line:14:22> '<dependent type>' contains-errors
|   |     |-DeclRefExpr 0x14b913dd8 <line:13:34> 'int ()' Function 0x14b913ca8 'MagickMax' 'int ()'
|   |     |-BinaryOperator 0x14b913f88 <col:44, col:57> '<dependent type>' contains-errors '*'
|   |     | |-RecoveryExpr 0x14b913f68 <col:44> '<dependent type>' contains-errors lvalue
|   |     | `-RecoveryExpr 0x14b913e10 <col:57> '<dependent type>' contains-errors lvalue
|   |     `-BinaryOperator 0x14b913fc8 <line:14:5, col:18> '<dependent type>' contains-errors '*'
|   |       |-RecoveryExpr 0x14b913fa8 <col:5> '<dependent type>' contains-errors lvalue
|   |       `-RecoveryExpr 0x14b913e68 <col:18> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x14b914450 <line:15:3, line:16:23> 'double' contains-errors '='
|   | |-DeclRefExpr 0x14b914068 <line:15:3> 'double' lvalue Var 0x14b8fa918 'min' 'double'
|   | `-CallExpr 0x14b914420 <col:7, line:16:23> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x14b914168 <line:15:7> 'int ()' Function 0x14b9140b0 'MagickMin' 'int ()'
|   |   |-BinaryOperator 0x14b914350 <col:17, col:30> '<dependent type>' contains-errors '*'
|   |   | |-RecoveryExpr 0x14b914330 <col:17> '<dependent type>' contains-errors lvalue
|   |   | `-RecoveryExpr 0x14b9141a0 <col:30> '<dependent type>' contains-errors lvalue
|   |   `-CallExpr 0x14b9143f0 <col:34, line:16:22> '<dependent type>' contains-errors
|   |     |-DeclRefExpr 0x14b9141e0 <line:15:34> 'int ()' Function 0x14b9140b0 'MagickMin' 'int ()'
|   |     |-BinaryOperator 0x14b914390 <col:44, col:57> '<dependent type>' contains-errors '*'
|   |     | |-RecoveryExpr 0x14b914370 <col:44> '<dependent type>' contains-errors lvalue
|   |     | `-RecoveryExpr 0x14b914218 <col:57> '<dependent type>' contains-errors lvalue
|   |     `-BinaryOperator 0x14b9143d0 <line:16:5, col:18> '<dependent type>' contains-errors '*'
|   |       |-RecoveryExpr 0x14b9143b0 <col:5> '<dependent type>' contains-errors lvalue
|   |       `-RecoveryExpr 0x14b914270 <col:18> '<dependent type>' contains-errors lvalue
|   |-BinaryOperator 0x14b914520 <line:17:3, col:9> 'double' '='
|   | |-DeclRefExpr 0x14b914470 <col:3> 'double' lvalue Var 0x14b8fa818 'c' 'double'
|   | `-BinaryOperator 0x14b914500 <col:5, col:9> 'double' '-'
|   |   |-ImplicitCastExpr 0x14b9144d0 <col:5> 'double' <LValueToRValue>
|   |   | `-DeclRefExpr 0x14b914490 <col:5> 'double' lvalue Var 0x14b8fa898 'max' 'double'
|   |   `-ImplicitCastExpr 0x14b9144e8 <col:9> 'double' <LValueToRValue>
|   |     `-DeclRefExpr 0x14b9144b0 <col:9> 'double' lvalue Var 0x14b8fa918 'min' 'double'
|   |-BinaryOperator 0x14b9145c8 <line:18:3, col:10> 'double' '='
|   | |-UnaryOperator 0x14b914578 <col:3, col:4> 'double' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x14b914560 <col:4> 'double *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x14b914540 <col:4> 'double *' lvalue ParmVar 0x14b8fa5a8 'value' 'double *'
|   | `-ImplicitCastExpr 0x14b9145b0 <col:10> 'double' <LValueToRValue>
|   |   `-DeclRefExpr 0x14b914590 <col:10> 'double' lvalue Var 0x14b8fa898 'max' 'double'
|   |-IfStmt 0x14b9147b8 <line:19:3, line:24:5>
|   | |-BinaryOperator 0x14b914640 <line:19:7, col:12> 'int' '<='
|   | | |-ImplicitCastExpr 0x14b914628 <col:7> 'double' <LValueToRValue>
|   | | | `-DeclRefExpr 0x14b9145e8 <col:7> 'double' lvalue Var 0x14b8fa818 'c' 'double'
|   | | `-FloatingLiteral 0x14b914608 <col:12> 'double' 0.000000e+00
|   | `-CompoundStmt 0x14b914790 <line:20:5, line:24:5>
|   |   |-BinaryOperator 0x14b9146d0 <line:21:7, col:12> 'double' '='
|   |   | |-UnaryOperator 0x14b914698 <col:7, col:8> 'double' lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x14b914680 <col:8> 'double *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x14b914660 <col:8> 'double *' lvalue ParmVar 0x14b8fa4a8 'hue' 'double *'
|   |   | `-FloatingLiteral 0x14b9146b0 <col:12> 'double' 0.000000e+00
|   |   |-BinaryOperator 0x14b914760 <line:22:7, col:19> 'double' '='
|   |   | |-UnaryOperator 0x14b914728 <col:7, col:8> 'double' lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x14b914710 <col:8> 'double *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x14b9146f0 <col:8> 'double *' lvalue ParmVar 0x14b8fa528 'saturation' 'double *'
|   |   | `-FloatingLiteral 0x14b914740 <col:19> 'double' 0.000000e+00
|   |   `-ReturnStmt 0x14b914780 <line:23:7>
|   |-IfStmt 0x14b030ab0 <line:25:3, line:32:5> has_else
|   | |-BinaryOperator 0x14b0305f0 <line:25:7, col:36> 'int' contains-errors '<'
|   | | |-CallExpr 0x14b0305a8 <col:7, col:32> '<dependent type>' contains-errors
|   | | | |-DeclRefExpr 0x14b030430 <col:7> 'double (double)' Function 0x14b030270 'fabs' 'double (double)'
|   | | | `-BinaryOperator 0x14b030588 <col:12, col:29> '<dependent type>' contains-errors '-'
|   | | |   |-DeclRefExpr 0x14b030450 <col:12> 'double' lvalue Var 0x14b8fa898 'max' 'double'
|   | | |   `-BinaryOperator 0x14b030568 <col:16, col:29> '<dependent type>' contains-errors '*'
|   | | |     |-RecoveryExpr 0x14b030548 <col:16> '<dependent type>' contains-errors lvalue
|   | | |     `-RecoveryExpr 0x14b030488 <col:29> '<dependent type>' contains-errors lvalue
|   | | `-RecoveryExpr 0x14b0305d0 <col:36> '<dependent type>' contains-errors lvalue
|   | |-CompoundStmt 0x14b030870 <line:26:5, line:30:5>
|   | | `-IfStmt 0x14b030850 <line:28:7, line:29:15>
|   | |   |-RecoveryExpr 0x14b030790 <line:28:11, col:52> '_Bool' contains-errors
|   | |   `-CompoundAssignOperator 0x14b030820 <line:29:9, col:15> 'double' '+=' ComputeLHSTy='double' ComputeResultTy='double'
|   | |     |-UnaryOperator 0x14b0307e8 <col:9, col:10> 'double' lvalue prefix '*' cannot overflow
|   | |     | `-ImplicitCastExpr 0x14b0307d0 <col:10> 'double *' <LValueToRValue>
|   | |     |   `-DeclRefExpr 0x14b0307b0 <col:10> 'double *' lvalue ParmVar 0x14b8fa4a8 'hue' 'double *'
|   | |     `-FloatingLiteral 0x14b030800 <col:15> 'double' 6.000000e+00
|   | `-NullStmt 0x14b030aa8 <line:32:5>
|   |-CompoundAssignOperator 0x14b030b90 <line:36:3, col:14> 'double' '*=' ComputeLHSTy='double' ComputeResultTy='double'
|   | |-UnaryOperator 0x14b030b18 <col:3, col:4> 'double' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x14b030b00 <col:4> 'double *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x14b030ae0 <col:4> 'double *' lvalue ParmVar 0x14b8fa4a8 'hue' 'double *'
|   | `-BinaryOperator 0x14b030b70 <col:9, col:14> 'double' '/'
|   |   |-FloatingLiteral 0x14b030b30 <col:9> 'double' 6.000000e+01
|   |   `-FloatingLiteral 0x14b030b50 <col:14> 'double' 3.600000e+02
|   `-BinaryOperator 0x14b030ca0 <line:37:3, col:17> 'double' '='
|     |-UnaryOperator 0x14b030bf8 <col:3, col:4> 'double' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x14b030be0 <col:4> 'double *' <LValueToRValue>
|     |   `-DeclRefExpr 0x14b030bc0 <col:4> 'double *' lvalue ParmVar 0x14b8fa528 'saturation' 'double *'
|     `-BinaryOperator 0x14b030c80 <col:15, col:17> 'double' '/'
|       |-ImplicitCastExpr 0x14b030c50 <col:15> 'double' <LValueToRValue>
|       | `-DeclRefExpr 0x14b030c10 <col:15> 'double' lvalue Var 0x14b8fa818 'c' 'double'
|       `-ImplicitCastExpr 0x14b030c68 <col:17> 'double' <LValueToRValue>
|         `-DeclRefExpr 0x14b030c30 <col:17> 'double' lvalue Var 0x14b8fa898 'max' 'double'
`-FunctionDecl 0x14b030270 <line:25:7> col:7 implicit used fabs 'double (double)' extern
  |-ParmVarDecl 0x14b030370 <<invalid sloc>> <invalid sloc> 'double'
  |-BuiltinAttr 0x14b030318 <<invalid sloc>> Implicit 1004
  |-NoThrowAttr 0x14b0303e0 <col:7> Implicit
  `-ConstAttr 0x14b030408 <col:7> Implicit
