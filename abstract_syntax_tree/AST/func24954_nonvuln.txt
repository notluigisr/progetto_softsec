TranslationUnitDecl 0x12e055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x12e0564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x12e055bd0 '__int128'
|-TypedefDecl 0x12e056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x12e055bf0 'unsigned __int128'
|-TypedefDecl 0x12e80be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12e80bc00 'struct __NSConstantString_tag'
|   `-Record 0x12e056580 '__NSConstantString_tag'
|-TypedefDecl 0x12e80be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x12e055d90 '__SVInt8_t'
|-TypedefDecl 0x12e80bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x12e055db0 '__SVInt16_t'
|-TypedefDecl 0x12e80bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x12e055dd0 '__SVInt32_t'
|-TypedefDecl 0x12e80bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x12e055df0 '__SVInt64_t'
|-TypedefDecl 0x12e80c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x12e055e10 '__SVUint8_t'
|-TypedefDecl 0x12e80c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x12e055e30 '__SVUint16_t'
|-TypedefDecl 0x12e80c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x12e055e50 '__SVUint32_t'
|-TypedefDecl 0x12e80c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x12e055e70 '__SVUint64_t'
|-TypedefDecl 0x12e80c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x12e055e90 '__SVFloat16_t'
|-TypedefDecl 0x12e80c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x12e055eb0 '__SVFloat32_t'
|-TypedefDecl 0x12e80c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x12e055ed0 '__SVFloat64_t'
|-TypedefDecl 0x12e80c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x12e055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12e80c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x12e055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12e80c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x12e055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12e80c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x12e055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12e80c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x12e055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12e80c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x12e055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12e80c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x12e055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12e80c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x12e055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12e80c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x12e055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12e80c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x12e056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12e80c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x12e056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12e80c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x12e056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12e80c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x12e056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12e80c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x12e056090 '__clang_svint8x3_t'
|-TypedefDecl 0x12e80c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x12e0560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12e80c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x12e0560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12e80c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x12e0560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12e80c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x12e056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12e80ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x12e056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12e80cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x12e056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12e80cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x12e056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12e80cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x12e056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12e80d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x12e0561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12e80d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x12e0561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12e80d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x12e0561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12e80d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x12e056210 '__clang_svint8x4_t'
|-TypedefDecl 0x12e80d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x12e056230 '__clang_svint16x4_t'
|-TypedefDecl 0x12e80d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x12e056250 '__clang_svint32x4_t'
|-TypedefDecl 0x12e80d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x12e056270 '__clang_svint64x4_t'
|-TypedefDecl 0x12e80d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x12e056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12e80d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x12e0562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12e80d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x12e0562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12e80d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x12e0562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12e80d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x12e056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12e80d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x12e056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12e80d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x12e056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12e80d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x12e056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12e80da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x12e056390 '__SVBool_t'
|-TypedefDecl 0x12e80da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x12e0563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12e80dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x12e0563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12e80db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x12e0563f0 '__SVCount_t'
|-TypedefDecl 0x12e80dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12e80dbb0 'char *'
|   `-BuiltinType 0x12e0556b0 'char'
|-TypedefDecl 0x12e80dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12e80dbb0 'char *'
|   `-BuiltinType 0x12e0556b0 'char'
`-FunctionDecl 0x12e80de38 <dataset_diviso_filec/func24954_nonvuln.c:1:1, line:16:1> line:1:7 find_hdr_value_end 'char *(char *, const char *)'
  |-ParmVarDecl 0x12e80dcd8 <col:26, col:32> col:32 used s 'char *'
  |-ParmVarDecl 0x12e80dd58 <col:35, col:47> col:47 used e 'const char *'
  `-CompoundStmt 0x12e826ac0 <line:2:1, line:16:1>
    |-DeclStmt 0x12e80e050 <line:3:2, col:20>
    | |-VarDecl 0x12e80df50 <col:2, col:6> col:6 used quoted 'int'
    | `-VarDecl 0x12e80dfd0 <col:2, col:14> col:14 used qdpair 'int'
    |-BinaryOperator 0x12e80e0e8 <line:5:2, col:20> 'int' '='
    | |-DeclRefExpr 0x12e80e068 <col:2> 'int' lvalue Var 0x12e80df50 'quoted' 'int'
    | `-BinaryOperator 0x12e80e0c8 <col:11, col:20> 'int' '='
    |   |-DeclRefExpr 0x12e80e088 <col:11> 'int' lvalue Var 0x12e80dfd0 'qdpair' 'int'
    |   `-IntegerLiteral 0x12e80e0a8 <col:20> 'int' 0
    |-ForStmt 0x12e826a40 <line:6:2, line:14:2>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-BinaryOperator 0x12e80e190 <line:6:9, col:13> 'int' '<'
    | | |-ImplicitCastExpr 0x12e80e148 <col:9> 'char *' <LValueToRValue>
    | | | `-DeclRefExpr 0x12e80e108 <col:9> 'char *' lvalue ParmVar 0x12e80dcd8 's' 'char *'
    | | `-ImplicitCastExpr 0x12e80e178 <col:13> 'char *' <BitCast>
    | |   `-ImplicitCastExpr 0x12e80e160 <col:13> 'const char *' <LValueToRValue>
    | |     `-DeclRefExpr 0x12e80e128 <col:13> 'const char *' lvalue ParmVar 0x12e80dd58 'e' 'const char *'
    | |-UnaryOperator 0x12e80e1d0 <col:16, col:17> 'char *' postfix '++'
    | | `-DeclRefExpr 0x12e80e1b0 <col:16> 'char *' lvalue ParmVar 0x12e80dcd8 's' 'char *'
    | `-CompoundStmt 0x12e826a28 <col:21, line:14:2>
    |   `-IfStmt 0x12e8269f8 <line:7:3, line:13:41> has_else
    |     |-ImplicitCastExpr 0x12e80e208 <line:7:7> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x12e80e1e8 <col:7> 'int' lvalue Var 0x12e80dfd0 'qdpair' 'int'
    |     |-BinaryOperator 0x12e80e260 <col:34, col:43> 'int' '='
    |     | |-DeclRefExpr 0x12e80e220 <col:34> 'int' lvalue Var 0x12e80dfd0 'qdpair' 'int'
    |     | `-IntegerLiteral 0x12e80e240 <col:43> 'int' 0
    |     `-IfStmt 0x12e8269c8 <line:8:8, line:13:41> has_else
    |       |-ImplicitCastExpr 0x12e80e2a0 <line:8:12> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x12e80e280 <col:12> 'int' lvalue Var 0x12e80df50 'quoted' 'int'
    |       |-CompoundStmt 0x12e826748 <col:20, line:11:3>
    |       | `-IfStmt 0x12e826718 <line:9:4, line:10:36> has_else
    |       |   |-BinaryOperator 0x12e80e350 <line:9:8, col:14> 'int' '=='
    |       |   | |-ImplicitCastExpr 0x12e80e338 <col:8, col:9> 'int' <IntegralCast>
    |       |   | | `-ImplicitCastExpr 0x12e80e320 <col:8, col:9> 'char' <LValueToRValue>
    |       |   | |   `-UnaryOperator 0x12e80e2f0 <col:8, col:9> 'char' lvalue prefix '*' cannot overflow
    |       |   | |     `-ImplicitCastExpr 0x12e80e2d8 <col:9> 'char *' <LValueToRValue>
    |       |   | |       `-DeclRefExpr 0x12e80e2b8 <col:9> 'char *' lvalue ParmVar 0x12e80dcd8 's' 'char *'
    |       |   | `-CharacterLiteral 0x12e80e308 <col:14> 'int' 92
    |       |   |-BinaryOperator 0x12e80e3b0 <col:27, col:36> 'int' '='
    |       |   | |-DeclRefExpr 0x12e80e370 <col:27> 'int' lvalue Var 0x12e80dfd0 'qdpair' 'int'
    |       |   | `-IntegerLiteral 0x12e80e390 <col:36> 'int' 1
    |       |   `-IfStmt 0x12e8266f8 <line:10:9, col:36>
    |       |     |-BinaryOperator 0x12e826678 <col:13, col:19> 'int' '=='
    |       |     | |-ImplicitCastExpr 0x12e826660 <col:13, col:14> 'int' <IntegralCast>
    |       |     | | `-ImplicitCastExpr 0x12e826648 <col:13, col:14> 'char' <LValueToRValue>
    |       |     | |   `-UnaryOperator 0x12e826618 <col:13, col:14> 'char' lvalue prefix '*' cannot overflow
    |       |     | |     `-ImplicitCastExpr 0x12e826600 <col:14> 'char *' <LValueToRValue>
    |       |     | |       `-DeclRefExpr 0x12e80e3d0 <col:14> 'char *' lvalue ParmVar 0x12e80dcd8 's' 'char *'
    |       |     | `-CharacterLiteral 0x12e826630 <col:19> 'int' 34
    |       |     `-BinaryOperator 0x12e8266d8 <col:27, col:36> 'int' '='
    |       |       |-DeclRefExpr 0x12e826698 <col:27> 'int' lvalue Var 0x12e80df50 'quoted' 'int'
    |       |       `-IntegerLiteral 0x12e8266b8 <col:36> 'int' 0
    |       `-IfStmt 0x12e826998 <line:12:8, line:13:41> has_else
    |         |-BinaryOperator 0x12e8267f8 <line:12:12, col:18> 'int' '=='
    |         | |-ImplicitCastExpr 0x12e8267e0 <col:12, col:13> 'int' <IntegralCast>
    |         | | `-ImplicitCastExpr 0x12e8267c8 <col:12, col:13> 'char' <LValueToRValue>
    |         | |   `-UnaryOperator 0x12e826798 <col:12, col:13> 'char' lvalue prefix '*' cannot overflow
    |         | |     `-ImplicitCastExpr 0x12e826780 <col:13> 'char *' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x12e826760 <col:13> 'char *' lvalue ParmVar 0x12e80dcd8 's' 'char *'
    |         | `-CharacterLiteral 0x12e8267b0 <col:18> 'int' 34
    |         |-BinaryOperator 0x12e826858 <col:34, col:43> 'int' '='
    |         | |-DeclRefExpr 0x12e826818 <col:34> 'int' lvalue Var 0x12e80df50 'quoted' 'int'
    |         | `-IntegerLiteral 0x12e826838 <col:43> 'int' 1
    |         `-IfStmt 0x12e826978 <line:13:8, col:41>
    |           |-BinaryOperator 0x12e826910 <col:12, col:18> 'int' '=='
    |           | |-ImplicitCastExpr 0x12e8268f8 <col:12, col:13> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x12e8268e0 <col:12, col:13> 'char' <LValueToRValue>
    |           | |   `-UnaryOperator 0x12e8268b0 <col:12, col:13> 'char' lvalue prefix '*' cannot overflow
    |           | |     `-ImplicitCastExpr 0x12e826898 <col:13> 'char *' <LValueToRValue>
    |           | |       `-DeclRefExpr 0x12e826878 <col:13> 'char *' lvalue ParmVar 0x12e80dcd8 's' 'char *'
    |           | `-CharacterLiteral 0x12e8268c8 <col:18> 'int' 44
    |           `-ReturnStmt 0x12e826968 <col:34, col:41>
    |             `-ImplicitCastExpr 0x12e826950 <col:41> 'char *' <LValueToRValue>
    |               `-DeclRefExpr 0x12e826930 <col:41> 'char *' lvalue ParmVar 0x12e80dcd8 's' 'char *'
    `-ReturnStmt 0x12e826ab0 <line:15:2, col:9>
      `-ImplicitCastExpr 0x12e826a98 <col:9> 'char *' <LValueToRValue>
        `-DeclRefExpr 0x12e826a78 <col:9> 'char *' lvalue ParmVar 0x12e80dcd8 's' 'char *'
