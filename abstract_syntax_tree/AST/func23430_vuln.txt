TranslationUnitDecl 0x14f026e08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x14f027cb8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x14f0273d0 '__int128'
|-TypedefDecl 0x14f027d28 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x14f0273f0 'unsigned __int128'
|-TypedefDecl 0x14f0f8a30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x14f0f8800 'struct __NSConstantString_tag'
|   `-Record 0x14f027d80 '__NSConstantString_tag'
|-TypedefDecl 0x14f0f8a98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x14f027590 '__SVInt8_t'
|-TypedefDecl 0x14f0f8b00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x14f0275b0 '__SVInt16_t'
|-TypedefDecl 0x14f0f8b68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x14f0275d0 '__SVInt32_t'
|-TypedefDecl 0x14f0f8bd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x14f0275f0 '__SVInt64_t'
|-TypedefDecl 0x14f0f8c38 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x14f027610 '__SVUint8_t'
|-TypedefDecl 0x14f0f8ca0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x14f027630 '__SVUint16_t'
|-TypedefDecl 0x14f0f8d08 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x14f027650 '__SVUint32_t'
|-TypedefDecl 0x14f0f8d70 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x14f027670 '__SVUint64_t'
|-TypedefDecl 0x14f0f8dd8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x14f027690 '__SVFloat16_t'
|-TypedefDecl 0x14f0f8e40 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x14f0276b0 '__SVFloat32_t'
|-TypedefDecl 0x14f0f8ea8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x14f0276d0 '__SVFloat64_t'
|-TypedefDecl 0x14f0f8f10 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x14f0276f0 '__SVBfloat16_t'
|-TypedefDecl 0x14f0f8f78 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x14f027710 '__clang_svint8x2_t'
|-TypedefDecl 0x14f0f8fe0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x14f027730 '__clang_svint16x2_t'
|-TypedefDecl 0x14f0f9048 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x14f027750 '__clang_svint32x2_t'
|-TypedefDecl 0x14f0f90b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x14f027770 '__clang_svint64x2_t'
|-TypedefDecl 0x14f0f9118 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x14f027790 '__clang_svuint8x2_t'
|-TypedefDecl 0x14f0f9180 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x14f0277b0 '__clang_svuint16x2_t'
|-TypedefDecl 0x14f0f91e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x14f0277d0 '__clang_svuint32x2_t'
|-TypedefDecl 0x14f0f9250 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x14f0277f0 '__clang_svuint64x2_t'
|-TypedefDecl 0x14f0f92b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x14f027810 '__clang_svfloat16x2_t'
|-TypedefDecl 0x14f0f9320 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x14f027830 '__clang_svfloat32x2_t'
|-TypedefDecl 0x14f0f9388 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x14f027850 '__clang_svfloat64x2_t'
|-TypedefDecl 0x14f0f93f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x14f027870 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x14f0f9458 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x14f027890 '__clang_svint8x3_t'
|-TypedefDecl 0x14f0f94c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x14f0278b0 '__clang_svint16x3_t'
|-TypedefDecl 0x14f0f9528 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x14f0278d0 '__clang_svint32x3_t'
|-TypedefDecl 0x14f0f9590 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x14f0278f0 '__clang_svint64x3_t'
|-TypedefDecl 0x14f0f95f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x14f027910 '__clang_svuint8x3_t'
|-TypedefDecl 0x14f0f9660 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x14f027930 '__clang_svuint16x3_t'
|-TypedefDecl 0x14f0f96c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x14f027950 '__clang_svuint32x3_t'
|-TypedefDecl 0x14f0f9730 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x14f027970 '__clang_svuint64x3_t'
|-TypedefDecl 0x14f0f9798 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x14f027990 '__clang_svfloat16x3_t'
|-TypedefDecl 0x14f0fa000 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x14f0279b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x14f0fa068 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x14f0279d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x14f0fa0d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x14f0279f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x14f0fa138 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x14f027a10 '__clang_svint8x4_t'
|-TypedefDecl 0x14f0fa1a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x14f027a30 '__clang_svint16x4_t'
|-TypedefDecl 0x14f0fa208 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x14f027a50 '__clang_svint32x4_t'
|-TypedefDecl 0x14f0fa270 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x14f027a70 '__clang_svint64x4_t'
|-TypedefDecl 0x14f0fa2d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x14f027a90 '__clang_svuint8x4_t'
|-TypedefDecl 0x14f0fa340 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x14f027ab0 '__clang_svuint16x4_t'
|-TypedefDecl 0x14f0fa3a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x14f027ad0 '__clang_svuint32x4_t'
|-TypedefDecl 0x14f0fa410 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x14f027af0 '__clang_svuint64x4_t'
|-TypedefDecl 0x14f0fa478 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x14f027b10 '__clang_svfloat16x4_t'
|-TypedefDecl 0x14f0fa4e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x14f027b30 '__clang_svfloat32x4_t'
|-TypedefDecl 0x14f0fa548 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x14f027b50 '__clang_svfloat64x4_t'
|-TypedefDecl 0x14f0fa5b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x14f027b70 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x14f0fa618 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x14f027b90 '__SVBool_t'
|-TypedefDecl 0x14f0fa680 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x14f027bb0 '__clang_svboolx2_t'
|-TypedefDecl 0x14f0fa6e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x14f027bd0 '__clang_svboolx4_t'
|-TypedefDecl 0x14f0fa750 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x14f027bf0 '__SVCount_t'
|-TypedefDecl 0x14f0fa7f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x14f0fa7b0 'char *'
|   `-BuiltinType 0x14f026eb0 'char'
|-TypedefDecl 0x14f0fa868 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x14f0fa7b0 'char *'
|   `-BuiltinType 0x14f026eb0 'char'
`-FunctionDecl 0x14f0fab18 <dataset_diviso_filec/func23430_vuln.c:1:1, line:97:1> line:1:1 invalid bgp_capabilities_print 'int (int *, const char *, int)'
  |-ParmVarDecl 0x14f0fa928 <col:24, col:44> col:44 invalid ndo 'int *'
  |-ParmVarDecl 0x14f0fa9a8 <line:2:24, col:38> col:38 used opt 'const char *'
  |-ParmVarDecl 0x14f0faa28 <col:43, col:47> col:47 used caps_len 'int'
  `-CompoundStmt 0x14f10cf28 <line:3:1, line:97:1>
    |-DeclStmt 0x14f0fae00 <line:4:2, col:45>
    | |-VarDecl 0x14f0fabf0 <col:2, col:6> col:6 used cap_type 'int'
    | |-VarDecl 0x14f0fac70 <col:2, col:16> col:16 used cap_len 'int'
    | |-VarDecl 0x14f0facf0 <col:2, col:25> col:25 used tcap_len 'int'
    | `-VarDecl 0x14f0fad70 <col:2, col:35> col:35 used cap_offset 'int'
    |-DeclStmt 0x14f0faeb8 <line:5:9, col:18>
    | `-VarDecl 0x14f0fae30 <col:9, col:17> col:13 used i 'int' cinit
    |   `-IntegerLiteral 0x14f0fae98 <col:17> 'int' 0
    |-WhileStmt 0x14f10cdc0 <line:7:9, line:92:9>
    | |-BinaryOperator 0x14f0faf40 <line:7:16, col:20> 'int' '<'
    | | |-ImplicitCastExpr 0x14f0faf10 <col:16> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14f0faed0 <col:16> 'int' lvalue Var 0x14f0fae30 'i' 'int'
    | | `-ImplicitCastExpr 0x14f0faf28 <col:20> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x14f0faef0 <col:20> 'int' lvalue ParmVar 0x14f0faa28 'caps_len' 'int'
    | `-CompoundStmt 0x14f10cd78 <col:30, line:92:9>
    |   |-CallExpr 0x14e830e98 <line:8:17, col:55> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x14e830ce0 <col:17> 'int ()' Function 0x14e830c28 'ND_TCHECK2' 'int ()'
    |   | |-ArraySubscriptExpr 0x14e830e58 <col:28, col:33> 'const char' lvalue
    |   | | |-ImplicitCastExpr 0x14e830e28 <col:28> 'const char *' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x14e830d00 <col:28> 'const char *' lvalue ParmVar 0x14f0fa9a8 'opt' 'const char *'
    |   | | `-ImplicitCastExpr 0x14e830e40 <col:32> 'int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x14e830d20 <col:32> 'int' lvalue Var 0x14f0fae30 'i' 'int'
    |   | `-RecoveryExpr 0x14e830e78 <col:36> '<dependent type>' contains-errors lvalue
    |   |-BinaryOperator 0x14e830fa8 <line:9:17, col:31> 'int' '='
    |   | |-DeclRefExpr 0x14e830ec8 <col:17> 'int' lvalue Var 0x14f0fabf0 'cap_type' 'int'
    |   | `-ImplicitCastExpr 0x14e830f90 <col:26, col:31> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x14e830f78 <col:26, col:31> 'char' <LValueToRValue>
    |   |     `-ArraySubscriptExpr 0x14e830f58 <col:26, col:31> 'const char' lvalue
    |   |       |-ImplicitCastExpr 0x14e830f28 <col:26> 'const char *' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x14e830ee8 <col:26> 'const char *' lvalue ParmVar 0x14f0fa9a8 'opt' 'const char *'
    |   |       `-ImplicitCastExpr 0x14e830f40 <col:30> 'int' <LValueToRValue>
    |   |         `-DeclRefExpr 0x14e830f08 <col:30> 'int' lvalue Var 0x14f0fae30 'i' 'int'
    |   |-BinaryOperator 0x14e8310e8 <line:10:17, col:32> 'int' '='
    |   | |-DeclRefExpr 0x14e830fc8 <col:17> 'int' lvalue Var 0x14f0fac70 'cap_len' 'int'
    |   | `-ImplicitCastExpr 0x14e8310d0 <col:25, col:32> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x14e8310b8 <col:25, col:32> 'char' <LValueToRValue>
    |   |     `-ArraySubscriptExpr 0x14e831098 <col:25, col:32> 'const char' lvalue
    |   |       |-ImplicitCastExpr 0x14e831080 <col:25> 'const char *' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x14e830fe8 <col:25> 'const char *' lvalue ParmVar 0x14f0fa9a8 'opt' 'const char *'
    |   |       `-BinaryOperator 0x14e831060 <col:29, col:31> 'int' '+'
    |   |         |-ImplicitCastExpr 0x14e831048 <col:29> 'int' <LValueToRValue>
    |   |         | `-DeclRefExpr 0x14e831008 <col:29> 'int' lvalue Var 0x14f0fae30 'i' 'int'
    |   |         `-IntegerLiteral 0x14e831028 <col:31> 'int' 1
    |   |-BinaryOperator 0x14e831160 <line:11:17, col:26> 'int' '='
    |   | |-DeclRefExpr 0x14e831108 <col:17> 'int' lvalue Var 0x14f0facf0 'tcap_len' 'int'
    |   | `-ImplicitCastExpr 0x14e831148 <col:26> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x14e831128 <col:26> 'int' lvalue Var 0x14f0fac70 'cap_len' 'int'
    |   |-CallExpr 0x14e8316a8 <line:17:17, col:45> 'int'
    |   | |-ImplicitCastExpr 0x14e831690 <col:17> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x14e831550 <col:17> 'int ()' Function 0x14e830c28 'ND_TCHECK2' 'int ()'
    |   | |-ImplicitCastExpr 0x14e8316f0 <col:28, col:35> 'int' <IntegralCast>
    |   | | `-ImplicitCastExpr 0x14e8316d8 <col:28, col:35> 'char' <LValueToRValue>
    |   | |   `-ArraySubscriptExpr 0x14e831620 <col:28, col:35> 'const char' lvalue
    |   | |     |-ImplicitCastExpr 0x14e831608 <col:28> 'const char *' <LValueToRValue>
    |   | |     | `-DeclRefExpr 0x14e831570 <col:28> 'const char *' lvalue ParmVar 0x14f0fa9a8 'opt' 'const char *'
    |   | |     `-BinaryOperator 0x14e8315e8 <col:32, col:34> 'int' '+'
    |   | |       |-ImplicitCastExpr 0x14e8315d0 <col:32> 'int' <LValueToRValue>
    |   | |       | `-DeclRefExpr 0x14e831590 <col:32> 'int' lvalue Var 0x14f0fae30 'i' 'int'
    |   | |       `-IntegerLiteral 0x14e8315b0 <col:34> 'int' 2
    |   | `-ImplicitCastExpr 0x14e831708 <col:38> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x14e831640 <col:38> 'int' lvalue Var 0x14f0fac70 'cap_len' 'int'
    |   |-SwitchStmt 0x14e831758 <line:18:17, line:87:17>
    |   | |-ImplicitCastExpr 0x14e831740 <line:18:25> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x14e831720 <col:25> 'int' lvalue Var 0x14f0fabf0 'cap_type' 'int'
    |   | `-CompoundStmt 0x14f10c990 <col:35, line:87:17>
    |   |   |-BreakStmt 0x14f1044b8 <line:27:21>
    |   |   |-CompoundAssignOperator 0x14f1048e0 <line:32:21, col:31> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
    |   |   | |-DeclRefExpr 0x14f1048a0 <col:21> 'int' lvalue Var 0x14f0facf0 'tcap_len' 'int'
    |   |   | `-IntegerLiteral 0x14f1048c0 <col:31> 'int' 2
    |   |   |-BinaryOperator 0x14f104950 <line:33:21, col:32> 'int' '='
    |   |   | |-DeclRefExpr 0x14f104910 <col:21> 'int' lvalue Var 0x14f0fad70 'cap_offset' 'int'
    |   |   | `-IntegerLiteral 0x14f104930 <col:32> 'int' 4
    |   |   |-WhileStmt 0x14f1053f0 <line:34:21, line:45:21>
    |   |   | |-BinaryOperator 0x14f1049c8 <line:34:27, col:37> 'int' '>='
    |   |   | | |-ImplicitCastExpr 0x14f1049b0 <col:27> 'int' <LValueToRValue>
    |   |   | | | `-DeclRefExpr 0x14f104970 <col:27> 'int' lvalue Var 0x14f0facf0 'tcap_len' 'int'
    |   |   | | `-IntegerLiteral 0x14f104990 <col:37> 'int' 4
    |   |   | `-CompoundStmt 0x14f1053d0 <col:40, line:45:21>
    |   |   |   |-CompoundAssignOperator 0x14f105330 <line:43:25, col:35> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
    |   |   |   | |-DeclRefExpr 0x14f1052f0 <col:25> 'int' lvalue Var 0x14f0facf0 'tcap_len' 'int'
    |   |   |   | `-IntegerLiteral 0x14f105310 <col:35> 'int' 4
    |   |   |   `-CompoundAssignOperator 0x14f1053a0 <line:44:25, col:37> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |   |   |     |-DeclRefExpr 0x14f105360 <col:25> 'int' lvalue Var 0x14f0fad70 'cap_offset' 'int'
    |   |   |     `-IntegerLiteral 0x14f105380 <col:37> 'int' 4
    |   |   |-BreakStmt 0x14f105410 <line:46:21>
    |   |   |-BreakStmt 0x14f105430 <line:49:21>
    |   |   |-IfStmt 0x14f105870 <line:53:21, line:57:21>
    |   |   | |-BinaryOperator 0x14f105490 <line:53:25, col:36> 'int' '=='
    |   |   | | |-ImplicitCastExpr 0x14f105478 <col:25> 'int' <LValueToRValue>
    |   |   | | | `-DeclRefExpr 0x14f105438 <col:25> 'int' lvalue Var 0x14f0fac70 'cap_len' 'int'
    |   |   | | `-IntegerLiteral 0x14f105458 <col:36> 'int' 4
    |   |   | `-CompoundStmt 0x14f105860 <col:39, line:57:21>
    |   |   |-BreakStmt 0x14f105890 <line:58:21>
    |   |   |-BinaryOperator 0x14f1058d8 <line:60:21, col:32> 'int' '='
    |   |   | |-DeclRefExpr 0x14f105898 <col:21> 'int' lvalue Var 0x14f0fad70 'cap_offset' 'int'
    |   |   | `-IntegerLiteral 0x14f1058b8 <col:32> 'int' 2
    |   |   |-IfStmt 0x14f105a60 <line:61:21, line:64:21>
    |   |   | |-BinaryOperator 0x14f105950 <line:61:25, col:37> 'int' '=='
    |   |   | | |-ImplicitCastExpr 0x14f105938 <col:25> 'int' <LValueToRValue>
    |   |   | | | `-DeclRefExpr 0x14f1058f8 <col:25> 'int' lvalue Var 0x14f0facf0 'tcap_len' 'int'
    |   |   | | `-IntegerLiteral 0x14f105918 <col:37> 'int' 0
    |   |   | `-CompoundStmt 0x14f105a40 <col:40, line:64:21>
    |   |   |   |-CallExpr 0x14f105a10 <line:62:25, col:46> '<dependent type>' contains-errors
    |   |   |   | |-DeclRefExpr 0x14f105970 <col:25> 'int ()' Function 0x14e8311a8 'ND_PRINT' 'int ()'
    |   |   |   | `-ParenExpr 0x14f1059f0 <col:34, col:45> 'char[4]' contains-errors
    |   |   |   |   `-BinaryOperator 0x14f1059d0 <col:35, col:40> 'char[4]' contains-errors ','
    |   |   |   |     |-RecoveryExpr 0x14f105990 <col:35> '<dependent type>' contains-errors lvalue
    |   |   |   |     `-StringLiteral 0x14f1059b0 <col:40> 'char[4]' lvalue "STR"
    |   |   |   `-BreakStmt 0x14f105a38 <line:63:25>
    |   |   |-WhileStmt 0x14f10c4e8 <line:65:21, line:79:21>
    |   |   | |-BinaryOperator 0x14f105ad8 <line:65:28, col:39> 'int' '>'
    |   |   | | |-ImplicitCastExpr 0x14f105ac0 <col:28> 'int' <LValueToRValue>
    |   |   | | | `-DeclRefExpr 0x14f105a80 <col:28> 'int' lvalue Var 0x14f0facf0 'tcap_len' 'int'
    |   |   | | `-IntegerLiteral 0x14f105aa0 <col:39> 'int' 0
    |   |   | `-CompoundStmt 0x14f10c4c0 <col:42, line:79:21>
    |   |   |   |-IfStmt 0x14f105c60 <line:66:25, line:69:25>
    |   |   |   | |-BinaryOperator 0x14f105b50 <line:66:29, col:40> 'int' '<'
    |   |   |   | | |-ImplicitCastExpr 0x14f105b38 <col:29> 'int' <LValueToRValue>
    |   |   |   | | | `-DeclRefExpr 0x14f105af8 <col:29> 'int' lvalue Var 0x14f0facf0 'tcap_len' 'int'
    |   |   |   | | `-IntegerLiteral 0x14f105b18 <col:40> 'int' 4
    |   |   |   | `-CompoundStmt 0x14f105c40 <col:43, line:69:25>
    |   |   |   |   |-CallExpr 0x14f105c10 <line:67:29, col:50> '<dependent type>' contains-errors
    |   |   |   |   | |-DeclRefExpr 0x14f105b70 <col:29> 'int ()' Function 0x14e8311a8 'ND_PRINT' 'int ()'
    |   |   |   |   | `-ParenExpr 0x14f105bf0 <col:38, col:49> 'char[4]' contains-errors
    |   |   |   |   |   `-BinaryOperator 0x14f105bd0 <col:39, col:44> 'char[4]' contains-errors ','
    |   |   |   |   |     |-RecoveryExpr 0x14f105b90 <col:39> '<dependent type>' contains-errors lvalue
    |   |   |   |   |     `-StringLiteral 0x14f105bb0 <col:44> 'char[4]' lvalue "STR"
    |   |   |   |   `-BreakStmt 0x14f105c38 <line:68:29>
    |   |   |   |-CompoundAssignOperator 0x14f10c420 <line:77:25, col:35> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
    |   |   |   | |-DeclRefExpr 0x14f10c3e0 <col:25> 'int' lvalue Var 0x14f0facf0 'tcap_len' 'int'
    |   |   |   | `-IntegerLiteral 0x14f10c400 <col:35> 'int' 4
    |   |   |   `-CompoundAssignOperator 0x14f10c490 <line:78:25, col:37> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |   |   |     |-DeclRefExpr 0x14f10c450 <col:25> 'int' lvalue Var 0x14f0fad70 'cap_offset' 'int'
    |   |   |     `-IntegerLiteral 0x14f10c470 <col:37> 'int' 4
    |   |   |-BreakStmt 0x14f10c508 <line:80:21>
    |   |   |-DefaultStmt 0x14f10c618 <line:81:17, line:83:37>
    |   |   | `-CallExpr 0x14f10c5f0 <line:82:21, line:83:37> '<dependent type>' contains-errors
    |   |   |   |-DeclRefExpr 0x14f10c510 <line:82:21> 'int ()' Function 0x14e8311a8 'ND_PRINT' 'int ()'
    |   |   |   `-ParenExpr 0x14f10c5d0 <col:30, line:83:36> 'int' contains-errors
    |   |   |     `-BinaryOperator 0x14f10c5b0 <line:82:31, line:83:28> 'int' contains-errors ','
    |   |   |       |-BinaryOperator 0x14f10c570 <line:82:31, col:36> 'char[4]' contains-errors ','
    |   |   |       | |-RecoveryExpr 0x14f10c530 <col:31> '<dependent type>' contains-errors lvalue
    |   |   |       | `-StringLiteral 0x14f10c550 <col:36> 'char[4]' lvalue "STR"
    |   |   |       `-DeclRefExpr 0x14f10c590 <line:83:28> 'int' lvalue Var 0x14f0fabf0 'cap_type' 'int'
    |   |   |-IfStmt 0x14f10c968 <line:84:21, line:85:74>
    |   |   | |-BinaryOperator 0x14f10c6c0 <line:84:25, col:43> 'int' contains-errors '<='
    |   |   | | |-CXXDependentScopeMemberExpr 0x14f10c658 <col:25, col:30> '<dependent type>' contains-errors lvalue ->ndo_vflag
    |   |   | | | `-RecoveryExpr 0x14f10c638 <col:25> '<dependent type>' contains-errors lvalue
    |   |   | | `-IntegerLiteral 0x14f10c6a0 <col:43> 'int' 1
    |   |   | `-CallExpr 0x14f10c928 <line:85:25, col:74> '<dependent type>' contains-errors
    |   |   |   |-DeclRefExpr 0x14f10c7c0 <col:25> 'int ()' Function 0x14f10c708 'print_unknown_data' 'int ()'
    |   |   |   |-RecoveryExpr 0x14f10c7e0 <col:44> '<dependent type>' contains-errors lvalue
    |   |   |   |-UnaryOperator 0x14f10c8d0 <col:49, col:57> 'const char *' prefix '&' cannot overflow
    |   |   |   | `-ArraySubscriptExpr 0x14f10c8b0 <col:50, col:57> 'const char' lvalue
    |   |   |   |   |-ImplicitCastExpr 0x14f10c898 <col:50> 'const char *' <LValueToRValue>
    |   |   |   |   | `-DeclRefExpr 0x14f10c800 <col:50> 'const char *' lvalue ParmVar 0x14f0fa9a8 'opt' 'const char *'
    |   |   |   |   `-BinaryOperator 0x14f10c878 <col:54, col:56> 'int' '+'
    |   |   |   |     |-ImplicitCastExpr 0x14f10c860 <col:54> 'int' <LValueToRValue>
    |   |   |   |     | `-DeclRefExpr 0x14f10c820 <col:54> 'int' lvalue Var 0x14f0fae30 'i' 'int'
    |   |   |   |     `-IntegerLiteral 0x14f10c840 <col:56> 'int' 2
    |   |   |   |-StringLiteral 0x14f10c8e8 <col:60> 'char[4]' lvalue "STR"
    |   |   |   `-DeclRefExpr 0x14f10c908 <col:67> 'int' lvalue Var 0x14f0fac70 'cap_len' 'int'
    |   |   `-BreakStmt 0x14f10c988 <line:86:21>
    |   `-IfStmt 0x14f10cd18 <line:88:17, line:90:17>
    |     |-BinaryOperator 0x14f10cb38 <line:88:21, col:53> 'int' contains-errors '&&'
    |     | |-BinaryOperator 0x14f10caa0 <col:21, col:38> 'int' contains-errors '>'
    |     | | |-CXXDependentScopeMemberExpr 0x14f10ca38 <col:21, col:26> '<dependent type>' contains-errors lvalue ->ndo_vflag
    |     | | | `-RecoveryExpr 0x14f10ca18 <col:21> '<dependent type>' contains-errors lvalue
    |     | | `-IntegerLiteral 0x14f10ca80 <col:38> 'int' 1
    |     | `-BinaryOperator 0x14f10cb18 <col:43, col:53> 'int' '>'
    |     |   |-ImplicitCastExpr 0x14f10cb00 <col:43> 'int' <LValueToRValue>
    |     |   | `-DeclRefExpr 0x14f10cac0 <col:43> 'int' lvalue Var 0x14f0fac70 'cap_len' 'int'
    |     |   `-IntegerLiteral 0x14f10cae0 <col:53> 'int' 0
    |     `-CompoundStmt 0x14f10cd00 <col:56, line:90:17>
    |       `-CallExpr 0x14f10ccc0 <line:89:21, col:70> '<dependent type>' contains-errors
    |         |-DeclRefExpr 0x14f10cb58 <col:21> 'int ()' Function 0x14f10c708 'print_unknown_data' 'int ()'
    |         |-RecoveryExpr 0x14f10cb78 <col:40> '<dependent type>' contains-errors lvalue
    |         |-UnaryOperator 0x14f10cc68 <col:45, col:53> 'const char *' prefix '&' cannot overflow
    |         | `-ArraySubscriptExpr 0x14f10cc48 <col:46, col:53> 'const char' lvalue
    |         |   |-ImplicitCastExpr 0x14f10cc30 <col:46> 'const char *' <LValueToRValue>
    |         |   | `-DeclRefExpr 0x14f10cb98 <col:46> 'const char *' lvalue ParmVar 0x14f0fa9a8 'opt' 'const char *'
    |         |   `-BinaryOperator 0x14f10cc10 <col:50, col:52> 'int' '+'
    |         |     |-ImplicitCastExpr 0x14f10cbf8 <col:50> 'int' <LValueToRValue>
    |         |     | `-DeclRefExpr 0x14f10cbb8 <col:50> 'int' lvalue Var 0x14f0fae30 'i' 'int'
    |         |     `-IntegerLiteral 0x14f10cbd8 <col:52> 'int' 2
    |         |-StringLiteral 0x14f10cc80 <col:56> 'char[4]' lvalue "STR"
    |         `-DeclRefExpr 0x14f10cca0 <col:63> 'int' lvalue Var 0x14f0fac70 'cap_len' 'int'
    |-ReturnStmt 0x14f10cde0 <line:93:9>
    `-LabelStmt 0x14f10cf08 <line:95:1, line:96:23> 'trunc'
      `-CallExpr 0x14f10ce90 <col:2, col:23> '<dependent type>' contains-errors
        |-DeclRefExpr 0x14f10cdf0 <col:2> 'int ()' Function 0x14e8311a8 'ND_PRINT' 'int ()'
        `-ParenExpr 0x14f10ce70 <col:11, col:22> 'char[4]' contains-errors
          `-BinaryOperator 0x14f10ce50 <col:12, col:17> 'char[4]' contains-errors ','
            |-RecoveryExpr 0x14f10ce10 <col:12> '<dependent type>' contains-errors lvalue
            `-StringLiteral 0x14f10ce30 <col:17> 'char[4]' lvalue "STR"
