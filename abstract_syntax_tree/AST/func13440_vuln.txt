TranslationUnitDecl 0x13503e008 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x13503eeb8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x13503e5d0 '__int128'
|-TypedefDecl 0x13503ef28 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x13503e5f0 'unsigned __int128'
|-TypedefDecl 0x135824030 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x135823e00 'struct __NSConstantString_tag'
|   `-Record 0x13503ef80 '__NSConstantString_tag'
|-TypedefDecl 0x135824098 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x13503e790 '__SVInt8_t'
|-TypedefDecl 0x135824100 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x13503e7b0 '__SVInt16_t'
|-TypedefDecl 0x135824168 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x13503e7d0 '__SVInt32_t'
|-TypedefDecl 0x1358241d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x13503e7f0 '__SVInt64_t'
|-TypedefDecl 0x135824238 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x13503e810 '__SVUint8_t'
|-TypedefDecl 0x1358242a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x13503e830 '__SVUint16_t'
|-TypedefDecl 0x135824308 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x13503e850 '__SVUint32_t'
|-TypedefDecl 0x135824370 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x13503e870 '__SVUint64_t'
|-TypedefDecl 0x1358243d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x13503e890 '__SVFloat16_t'
|-TypedefDecl 0x135824440 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x13503e8b0 '__SVFloat32_t'
|-TypedefDecl 0x1358244a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x13503e8d0 '__SVFloat64_t'
|-TypedefDecl 0x135824510 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x13503e8f0 '__SVBfloat16_t'
|-TypedefDecl 0x135824578 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x13503e910 '__clang_svint8x2_t'
|-TypedefDecl 0x1358245e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x13503e930 '__clang_svint16x2_t'
|-TypedefDecl 0x135824648 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x13503e950 '__clang_svint32x2_t'
|-TypedefDecl 0x1358246b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x13503e970 '__clang_svint64x2_t'
|-TypedefDecl 0x135824718 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x13503e990 '__clang_svuint8x2_t'
|-TypedefDecl 0x135824780 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x13503e9b0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1358247e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x13503e9d0 '__clang_svuint32x2_t'
|-TypedefDecl 0x135824850 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x13503e9f0 '__clang_svuint64x2_t'
|-TypedefDecl 0x1358248b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x13503ea10 '__clang_svfloat16x2_t'
|-TypedefDecl 0x135824920 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x13503ea30 '__clang_svfloat32x2_t'
|-TypedefDecl 0x135824988 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x13503ea50 '__clang_svfloat64x2_t'
|-TypedefDecl 0x1358249f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x13503ea70 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x135824a58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x13503ea90 '__clang_svint8x3_t'
|-TypedefDecl 0x135824ac0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x13503eab0 '__clang_svint16x3_t'
|-TypedefDecl 0x135824b28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x13503ead0 '__clang_svint32x3_t'
|-TypedefDecl 0x135824b90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x13503eaf0 '__clang_svint64x3_t'
|-TypedefDecl 0x135824bf8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x13503eb10 '__clang_svuint8x3_t'
|-TypedefDecl 0x135824c60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x13503eb30 '__clang_svuint16x3_t'
|-TypedefDecl 0x135824cc8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x13503eb50 '__clang_svuint32x3_t'
|-TypedefDecl 0x135824d30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x13503eb70 '__clang_svuint64x3_t'
|-TypedefDecl 0x135824d98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x13503eb90 '__clang_svfloat16x3_t'
|-TypedefDecl 0x135825600 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x13503ebb0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x135825668 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x13503ebd0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1358256d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x13503ebf0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x135825738 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x13503ec10 '__clang_svint8x4_t'
|-TypedefDecl 0x1358257a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x13503ec30 '__clang_svint16x4_t'
|-TypedefDecl 0x135825808 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x13503ec50 '__clang_svint32x4_t'
|-TypedefDecl 0x135825870 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x13503ec70 '__clang_svint64x4_t'
|-TypedefDecl 0x1358258d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x13503ec90 '__clang_svuint8x4_t'
|-TypedefDecl 0x135825940 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x13503ecb0 '__clang_svuint16x4_t'
|-TypedefDecl 0x1358259a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x13503ecd0 '__clang_svuint32x4_t'
|-TypedefDecl 0x135825a10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x13503ecf0 '__clang_svuint64x4_t'
|-TypedefDecl 0x135825a78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x13503ed10 '__clang_svfloat16x4_t'
|-TypedefDecl 0x135825ae0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x13503ed30 '__clang_svfloat32x4_t'
|-TypedefDecl 0x135825b48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x13503ed50 '__clang_svfloat64x4_t'
|-TypedefDecl 0x135825bb0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x13503ed70 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x135825c18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x13503ed90 '__SVBool_t'
|-TypedefDecl 0x135825c80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x13503edb0 '__clang_svboolx2_t'
|-TypedefDecl 0x135825ce8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x13503edd0 '__clang_svboolx4_t'
|-TypedefDecl 0x135825d50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x13503edf0 '__SVCount_t'
|-TypedefDecl 0x135825df8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x135825db0 'char *'
|   `-BuiltinType 0x13503e0b0 'char'
|-TypedefDecl 0x135825e68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x135825db0 'char *'
|   `-BuiltinType 0x13503e0b0 'char'
|-FunctionDecl 0x135826168 <dataset_diviso_filec/func13440_vuln.c:1:1, line:47:1> line:1:5 jpc_atoaf 'int (char *, int *, double **)'
| |-ParmVarDecl 0x135825ed8 <col:15, col:21> col:21 used s 'char *'
| |-ParmVarDecl 0x135825f88 <col:24, col:29> col:29 used numvalues 'int *'
| |-ParmVarDecl 0x135826070 <col:40, col:49> col:49 used values 'double **'
| `-CompoundStmt 0x135842f90 <line:2:1, line:47:1>
|   |-DeclStmt 0x135826390 <line:3:2, col:29>
|   | `-VarDecl 0x1358262c0 <col:2, col:24> col:14 used delim 'char[4]' static cinit
|   |   `-StringLiteral 0x135826370 <col:24> 'char[4]' "STR"
|   |-DeclStmt 0x1358264b8 <line:4:2, col:16>
|   | `-VarDecl 0x135826450 <col:2, col:15> col:7 used buf 'char[4096]'
|   |-DeclStmt 0x135826550 <line:5:2, col:7>
|   | `-VarDecl 0x1358264e8 <col:2, col:6> col:6 used n 'int'
|   |-DeclStmt 0x1358265e8 <line:6:2, col:12>
|   | `-VarDecl 0x135826580 <col:2, col:10> col:10 used vs 'double *'
|   |-DeclStmt 0x13583e080 <line:7:2, col:10>
|   | `-VarDecl 0x13583e018 <col:2, col:8> col:8 used cp 'char *'
|   |-CallExpr 0x13583e898 <line:9:2, col:29> 'char *'
|   | |-ImplicitCastExpr 0x13583e880 <col:2> 'char *(*)(char *, const char *, unsigned long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x13583e760 <col:2> 'char *(char *, const char *, unsigned long)' Function 0x13583e510 'strncpy' 'char *(char *, const char *, unsigned long)'
|   | |-ImplicitCastExpr 0x13583e8d0 <col:10> 'char *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x13583e780 <col:10> 'char[4096]' lvalue Var 0x135826450 'buf' 'char[4096]'
|   | |-ImplicitCastExpr 0x13583e900 <col:15> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x13583e8e8 <col:15> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x13583e7a0 <col:15> 'char *' lvalue ParmVar 0x135825ed8 's' 'char *'
|   | `-UnaryExprOrTypeTraitExpr 0x13583e800 <col:18, col:28> 'unsigned long' sizeof
|   |   `-ParenExpr 0x13583e7e0 <col:24, col:28> 'char[4096]' lvalue
|   |     `-DeclRefExpr 0x13583e7c0 <col:25> 'char[4096]' lvalue Var 0x135826450 'buf' 'char[4096]' non_odr_use_unevaluated
|   |-BinaryOperator 0x13583ea58 <line:10:2, col:25> 'char' '='
|   | |-ArraySubscriptExpr 0x13583ea08 <col:2, col:21> 'char' lvalue
|   | | |-ImplicitCastExpr 0x13583e9f0 <col:2> 'char *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x13583e918 <col:2> 'char[4096]' lvalue Var 0x135826450 'buf' 'char[4096]'
|   | | `-BinaryOperator 0x13583e9d0 <col:6, col:20> 'unsigned long' '-'
|   | |   |-UnaryExprOrTypeTraitExpr 0x13583e978 <col:6, col:16> 'unsigned long' sizeof
|   | |   | `-ParenExpr 0x13583e958 <col:12, col:16> 'char[4096]' lvalue
|   | |   |   `-DeclRefExpr 0x13583e938 <col:13> 'char[4096]' lvalue Var 0x135826450 'buf' 'char[4096]' non_odr_use_unevaluated
|   | |   `-ImplicitCastExpr 0x13583e9b8 <col:20> 'unsigned long' <IntegralCast>
|   | |     `-IntegerLiteral 0x13583e998 <col:20> 'int' 1
|   | `-ImplicitCastExpr 0x13583ea40 <col:25> 'char' <IntegralCast>
|   |   `-CharacterLiteral 0x13583ea28 <col:25> 'int' 0
|   |-BinaryOperator 0x13583eab8 <line:11:2, col:6> 'int' '='
|   | |-DeclRefExpr 0x13583ea78 <col:2> 'int' lvalue Var 0x1358264e8 'n' 'int'
|   | `-IntegerLiteral 0x13583ea98 <col:6> 'int' 0
|   |-IfStmt 0x13583f9a8 <line:12:2, line:19:2>
|   | |-ParenExpr 0x13583ee90 <line:12:6, col:30> 'char *'
|   | | `-BinaryOperator 0x13583ee70 <col:7, col:29> 'char *' '='
|   | |   |-DeclRefExpr 0x13583ead8 <col:7> 'char *' lvalue Var 0x13583e018 'cp' 'char *'
|   | |   `-CallExpr 0x13583edf8 <col:12, col:29> 'char *'
|   | |     |-ImplicitCastExpr 0x13583ede0 <col:12> 'char *(*)(char *, const char *)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x13583ed20 <col:12> 'char *(char *, const char *)' Function 0x13583eb40 'strtok' 'char *(char *, const char *)'
|   | |     |-ImplicitCastExpr 0x13583ee28 <col:19> 'char *' <ArrayToPointerDecay>
|   | |     | `-DeclRefExpr 0x13583ed40 <col:19> 'char[4096]' lvalue Var 0x135826450 'buf' 'char[4096]'
|   | |     `-ImplicitCastExpr 0x13583ee58 <col:24> 'const char *' <NoOp>
|   | |       `-ImplicitCastExpr 0x13583ee40 <col:24> 'char *' <ArrayToPointerDecay>
|   | |         `-DeclRefExpr 0x13583ed60 <col:24> 'char[4]' lvalue Var 0x1358262c0 'delim' 'char[4]'
|   | `-CompoundStmt 0x13583f988 <col:33, line:19:2>
|   |   |-UnaryOperator 0x13583eed0 <line:13:3, col:5> 'int' prefix '++'
|   |   | `-DeclRefExpr 0x13583eeb0 <col:5> 'int' lvalue Var 0x1358264e8 'n' 'int'
|   |   `-WhileStmt 0x13583f968 <line:14:3, line:18:3>
|   |     |-ParenExpr 0x13583f838 <line:14:10, col:32> 'char *'
|   |     | `-BinaryOperator 0x13583f818 <col:11, col:31> 'char *' '='
|   |     |   |-DeclRefExpr 0x13583eee8 <col:11> 'char *' lvalue Var 0x13583e018 'cp' 'char *'
|   |     |   `-CallExpr 0x13583ef98 <col:16, col:31> 'char *'
|   |     |     |-ImplicitCastExpr 0x13583ef80 <col:16> 'char *(*)(char *, const char *)' <FunctionToPointerDecay>
|   |     |     | `-DeclRefExpr 0x13583ef08 <col:16> 'char *(char *, const char *)' Function 0x13583eb40 'strtok' 'char *(char *, const char *)'
|   |     |     |-ImplicitCastExpr 0x13583efc8 <col:23> 'char *' <NullToPointer>
|   |     |     | `-IntegerLiteral 0x13583ef28 <col:23> 'int' 0
|   |     |     `-ImplicitCastExpr 0x13583f800 <col:26> 'const char *' <NoOp>
|   |     |       `-ImplicitCastExpr 0x13583efe0 <col:26> 'char *' <ArrayToPointerDecay>
|   |     |         `-DeclRefExpr 0x13583ef48 <col:26> 'char[4]' lvalue Var 0x1358262c0 'delim' 'char[4]'
|   |     `-CompoundStmt 0x13583f950 <col:35, line:18:3>
|   |       `-IfStmt 0x13583f930 <line:15:4, line:17:4>
|   |         |-BinaryOperator 0x13583f8c0 <line:15:8, col:14> 'int' '!='
|   |         | |-ImplicitCastExpr 0x13583f890 <col:8> 'char *' <LValueToRValue>
|   |         | | `-DeclRefExpr 0x13583f858 <col:8> 'char *' lvalue Var 0x13583e018 'cp' 'char *'
|   |         | `-ImplicitCastExpr 0x13583f8a8 <col:14> 'char *' <NullToPointer>
|   |         |   `-CharacterLiteral 0x13583f878 <col:14> 'int' 0
|   |         `-CompoundStmt 0x13583f918 <col:20, line:17:4>
|   |           `-UnaryOperator 0x13583f900 <line:16:5, col:7> 'int' prefix '++'
|   |             `-DeclRefExpr 0x13583f8e0 <col:7> 'int' lvalue Var 0x1358264e8 'n' 'int'
|   |-IfStmt 0x135842de0 <line:21:2, line:41:2> has_else
|   | |-ImplicitCastExpr 0x13583f9e8 <line:21:6> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x13583f9c8 <col:6> 'int' lvalue Var 0x1358264e8 'n' 'int'
|   | |-CompoundStmt 0x135842d18 <col:9, line:39:2>
|   | | |-IfStmt 0x13583fd60 <line:22:3, line:24:3>
|   | | | |-UnaryOperator 0x13583fce8 <line:22:7, col:44> 'int' prefix '!' cannot overflow
|   | | | | `-ParenExpr 0x13583fcc8 <col:8, col:44> 'double *'
|   | | | |   `-BinaryOperator 0x13583fca8 <col:9, col:43> 'double *' '='
|   | | | |     |-DeclRefExpr 0x13583fa00 <col:9> 'double *' lvalue Var 0x135826580 'vs' 'double *'
|   | | | |     `-ImplicitCastExpr 0x13583fc90 <col:14, col:43> 'double *' <IntegralToPointer>
|   | | | |       `-CallExpr 0x13583fc68 <col:14, col:43> 'int'
|   | | | |         |-ImplicitCastExpr 0x13583fc50 <col:14> 'int (*)()' <FunctionToPointerDecay>
|   | | | |         | `-DeclRefExpr 0x13583fb50 <col:14> 'int ()' Function 0x13583fa98 'jas_malloc' 'int ()'
|   | | | |         `-BinaryOperator 0x13583fbf8 <col:25, col:42> 'unsigned long' '*'
|   | | | |           |-ImplicitCastExpr 0x13583fbe0 <col:25> 'unsigned long' <IntegralCast>
|   | | | |           | `-ImplicitCastExpr 0x13583fbc8 <col:25> 'int' <LValueToRValue>
|   | | | |           |   `-DeclRefExpr 0x13583fb70 <col:25> 'int' lvalue Var 0x1358264e8 'n' 'int'
|   | | | |           `-UnaryExprOrTypeTraitExpr 0x13583fba8 <col:29, col:42> 'unsigned long' sizeof 'double'
|   | | | `-CompoundStmt 0x13583fd48 <col:47, line:24:3>
|   | | |   `-ReturnStmt 0x13583fd38 <line:23:4, col:12>
|   | | |     `-UnaryOperator 0x13583fd20 <col:11, col:12> 'int' prefix '-'
|   | | |       `-IntegerLiteral 0x13583fd00 <col:12> 'int' 1
|   | | |-CallExpr 0x13583fe88 <line:26:3, col:30> 'char *'
|   | | | |-ImplicitCastExpr 0x13583fe70 <col:3> 'char *(*)(char *, const char *, unsigned long)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x13583fd80 <col:3> 'char *(char *, const char *, unsigned long)' Function 0x13583e510 'strncpy' 'char *(char *, const char *, unsigned long)'
|   | | | |-ImplicitCastExpr 0x13583fec0 <col:11> 'char *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x13583fda0 <col:11> 'char[4096]' lvalue Var 0x135826450 'buf' 'char[4096]'
|   | | | |-ImplicitCastExpr 0x13583fef0 <col:16> 'const char *' <NoOp>
|   | | | | `-ImplicitCastExpr 0x13583fed8 <col:16> 'char *' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x13583fdc0 <col:16> 'char *' lvalue ParmVar 0x135825ed8 's' 'char *'
|   | | | `-UnaryExprOrTypeTraitExpr 0x13583fe20 <col:19, col:29> 'unsigned long' sizeof
|   | | |   `-ParenExpr 0x13583fe00 <col:25, col:29> 'char[4096]' lvalue
|   | | |     `-DeclRefExpr 0x13583fde0 <col:26> 'char[4096]' lvalue Var 0x135826450 'buf' 'char[4096]' non_odr_use_unevaluated
|   | | |-BinaryOperator 0x135840048 <line:27:3, col:26> 'char' '='
|   | | | |-ArraySubscriptExpr 0x13583fff8 <col:3, col:22> 'char' lvalue
|   | | | | |-ImplicitCastExpr 0x13583ffe0 <col:3> 'char *' <ArrayToPointerDecay>
|   | | | | | `-DeclRefExpr 0x13583ff08 <col:3> 'char[4096]' lvalue Var 0x135826450 'buf' 'char[4096]'
|   | | | | `-BinaryOperator 0x13583ffc0 <col:7, col:21> 'unsigned long' '-'
|   | | | |   |-UnaryExprOrTypeTraitExpr 0x13583ff68 <col:7, col:17> 'unsigned long' sizeof
|   | | | |   | `-ParenExpr 0x13583ff48 <col:13, col:17> 'char[4096]' lvalue
|   | | | |   |   `-DeclRefExpr 0x13583ff28 <col:14> 'char[4096]' lvalue Var 0x135826450 'buf' 'char[4096]' non_odr_use_unevaluated
|   | | | |   `-ImplicitCastExpr 0x13583ffa8 <col:21> 'unsigned long' <IntegralCast>
|   | | | |     `-IntegerLiteral 0x13583ff88 <col:21> 'int' 1
|   | | | `-ImplicitCastExpr 0x135840030 <col:26> 'char' <IntegralCast>
|   | | |   `-CharacterLiteral 0x135840018 <col:26> 'int' 0
|   | | |-BinaryOperator 0x1358400a8 <line:28:3, col:7> 'int' '='
|   | | | |-DeclRefExpr 0x135840068 <col:3> 'int' lvalue Var 0x1358264e8 'n' 'int'
|   | | | `-IntegerLiteral 0x135840088 <col:7> 'int' 0
|   | | `-IfStmt 0x135842cf8 <line:29:3, line:38:3>
|   | |   |-ParenExpr 0x135840228 <line:29:7, col:31> 'char *'
|   | |   | `-BinaryOperator 0x135840208 <col:8, col:30> 'char *' '='
|   | |   |   |-DeclRefExpr 0x1358400c8 <col:8> 'char *' lvalue Var 0x13583e018 'cp' 'char *'
|   | |   |   `-CallExpr 0x135840190 <col:13, col:30> 'char *'
|   | |   |     |-ImplicitCastExpr 0x135840178 <col:13> 'char *(*)(char *, const char *)' <FunctionToPointerDecay>
|   | |   |     | `-DeclRefExpr 0x1358400e8 <col:13> 'char *(char *, const char *)' Function 0x13583eb40 'strtok' 'char *(char *, const char *)'
|   | |   |     |-ImplicitCastExpr 0x1358401c0 <col:20> 'char *' <ArrayToPointerDecay>
|   | |   |     | `-DeclRefExpr 0x135840108 <col:20> 'char[4096]' lvalue Var 0x135826450 'buf' 'char[4096]'
|   | |   |     `-ImplicitCastExpr 0x1358401f0 <col:25> 'const char *' <NoOp>
|   | |   |       `-ImplicitCastExpr 0x1358401d8 <col:25> 'char *' <ArrayToPointerDecay>
|   | |   |         `-DeclRefExpr 0x135840128 <col:25> 'char[4]' lvalue Var 0x1358262c0 'delim' 'char[4]'
|   | |   `-CompoundStmt 0x135842cd0 <col:34, line:38:3>
|   | |     |-BinaryOperator 0x135840468 <line:30:4, col:19> 'double' '='
|   | |     | |-ArraySubscriptExpr 0x1358402b8 <col:4, col:8> 'double' lvalue
|   | |     | | |-ImplicitCastExpr 0x135840288 <col:4> 'double *' <LValueToRValue>
|   | |     | | | `-DeclRefExpr 0x135840248 <col:4> 'double *' lvalue Var 0x135826580 'vs' 'double *'
|   | |     | | `-ImplicitCastExpr 0x1358402a0 <col:7> 'int' <LValueToRValue>
|   | |     | |   `-DeclRefExpr 0x135840268 <col:7> 'int' lvalue Var 0x1358264e8 'n' 'int'
|   | |     | `-ImplicitCastExpr 0x135840450 <col:12, col:19> 'double' <IntegralToFloating>
|   | |     |   `-CallExpr 0x135840410 <col:12, col:19> 'int'
|   | |     |     |-ImplicitCastExpr 0x1358403f8 <col:12> 'int (*)()' <FunctionToPointerDecay>
|   | |     |     | `-DeclRefExpr 0x1358403b8 <col:12> 'int ()' Function 0x135840300 'atof' 'int ()'
|   | |     |     `-ImplicitCastExpr 0x135840438 <col:17> 'char *' <LValueToRValue>
|   | |     |       `-DeclRefExpr 0x1358403d8 <col:17> 'char *' lvalue Var 0x13583e018 'cp' 'char *'
|   | |     |-UnaryOperator 0x1358404a8 <line:31:4, col:6> 'int' prefix '++'
|   | |     | `-DeclRefExpr 0x135840488 <col:6> 'int' lvalue Var 0x1358264e8 'n' 'int'
|   | |     `-WhileStmt 0x135842cb0 <line:32:4, line:37:4>
|   | |       |-ParenExpr 0x135840608 <line:32:11, col:33> 'char *'
|   | |       | `-BinaryOperator 0x1358405e8 <col:12, col:32> 'char *' '='
|   | |       |   |-DeclRefExpr 0x1358404c0 <col:12> 'char *' lvalue Var 0x13583e018 'cp' 'char *'
|   | |       |   `-CallExpr 0x135840570 <col:17, col:32> 'char *'
|   | |       |     |-ImplicitCastExpr 0x135840558 <col:17> 'char *(*)(char *, const char *)' <FunctionToPointerDecay>
|   | |       |     | `-DeclRefExpr 0x1358404e0 <col:17> 'char *(char *, const char *)' Function 0x13583eb40 'strtok' 'char *(char *, const char *)'
|   | |       |     |-ImplicitCastExpr 0x1358405a0 <col:24> 'char *' <NullToPointer>
|   | |       |     | `-IntegerLiteral 0x135840500 <col:24> 'int' 0
|   | |       |     `-ImplicitCastExpr 0x1358405d0 <col:27> 'const char *' <NoOp>
|   | |       |       `-ImplicitCastExpr 0x1358405b8 <col:27> 'char *' <ArrayToPointerDecay>
|   | |       |         `-DeclRefExpr 0x135840520 <col:27> 'char[4]' lvalue Var 0x1358262c0 'delim' 'char[4]'
|   | |       `-CompoundStmt 0x135842c98 <col:36, line:37:4>
|   | |         `-IfStmt 0x135842c78 <line:33:5, line:36:5>
|   | |           |-BinaryOperator 0x135840690 <line:33:9, col:15> 'int' '!='
|   | |           | |-ImplicitCastExpr 0x135840660 <col:9> 'char *' <LValueToRValue>
|   | |           | | `-DeclRefExpr 0x135840628 <col:9> 'char *' lvalue Var 0x13583e018 'cp' 'char *'
|   | |           | `-ImplicitCastExpr 0x135840678 <col:15> 'char *' <NullToPointer>
|   | |           |   `-CharacterLiteral 0x135840648 <col:15> 'int' 0
|   | |           `-CompoundStmt 0x135842c58 <col:21, line:36:5>
|   | |             |-BinaryOperator 0x135842c00 <line:34:6, col:21> 'double' '='
|   | |             | |-ArraySubscriptExpr 0x135840720 <col:6, col:10> 'double' lvalue
|   | |             | | |-ImplicitCastExpr 0x1358406f0 <col:6> 'double *' <LValueToRValue>
|   | |             | | | `-DeclRefExpr 0x1358406b0 <col:6> 'double *' lvalue Var 0x135826580 'vs' 'double *'
|   | |             | | `-ImplicitCastExpr 0x135840708 <col:9> 'int' <LValueToRValue>
|   | |             | |   `-DeclRefExpr 0x1358406d0 <col:9> 'int' lvalue Var 0x1358264e8 'n' 'int'
|   | |             | `-ImplicitCastExpr 0x1358407d8 <col:14, col:21> 'double' <IntegralToFloating>
|   | |             |   `-CallExpr 0x135840798 <col:14, col:21> 'int'
|   | |             |     |-ImplicitCastExpr 0x135840780 <col:14> 'int (*)()' <FunctionToPointerDecay>
|   | |             |     | `-DeclRefExpr 0x135840740 <col:14> 'int ()' Function 0x135840300 'atof' 'int ()'
|   | |             |     `-ImplicitCastExpr 0x1358407c0 <col:19> 'char *' <LValueToRValue>
|   | |             |       `-DeclRefExpr 0x135840760 <col:19> 'char *' lvalue Var 0x13583e018 'cp' 'char *'
|   | |             `-UnaryOperator 0x135842c40 <line:35:6, col:8> 'int' prefix '++'
|   | |               `-DeclRefExpr 0x135842c20 <col:8> 'int' lvalue Var 0x1358264e8 'n' 'int'
|   | `-CompoundStmt 0x135842dc8 <line:39:9, line:41:2>
|   |   `-BinaryOperator 0x135842da8 <line:40:3, col:8> 'double *' '='
|   |     |-DeclRefExpr 0x135842d50 <col:3> 'double *' lvalue Var 0x135826580 'vs' 'double *'
|   |     `-ImplicitCastExpr 0x135842d90 <col:8> 'double *' <NullToPointer>
|   |       `-IntegerLiteral 0x135842d70 <col:8> 'int' 0
|   |-BinaryOperator 0x135842e98 <line:43:2, col:15> 'int' '='
|   | |-UnaryOperator 0x135842e48 <col:2, col:3> 'int' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x135842e30 <col:3> 'int *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x135842e10 <col:3> 'int *' lvalue ParmVar 0x135825f88 'numvalues' 'int *'
|   | `-ImplicitCastExpr 0x135842e80 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x135842e60 <col:15> 'int' lvalue Var 0x1358264e8 'n' 'int'
|   |-BinaryOperator 0x135842f40 <line:44:2, col:12> 'double *' '='
|   | |-UnaryOperator 0x135842ef0 <col:2, col:3> 'double *' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x135842ed8 <col:3> 'double **' <LValueToRValue>
|   | |   `-DeclRefExpr 0x135842eb8 <col:3> 'double **' lvalue ParmVar 0x135826070 'values' 'double **'
|   | `-ImplicitCastExpr 0x135842f28 <col:12> 'double *' <LValueToRValue>
|   |   `-DeclRefExpr 0x135842f08 <col:12> 'double *' lvalue Var 0x135826580 'vs' 'double *'
|   `-ReturnStmt 0x135842f80 <line:46:2, col:9>
|     `-IntegerLiteral 0x135842f60 <col:9> 'int' 0
|-FunctionDecl 0x13583e510 <line:9:2> col:2 implicit used strncpy 'char *(char *, const char *, unsigned long)' extern
| |-ParmVarDecl 0x13583e610 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x13583e678 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x13583e6e0 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x13583e5b8 <<invalid sloc>> Implicit 886
`-FunctionDecl 0x13583eb40 <line:12:12> col:12 implicit used strtok 'char *(char *, const char *)' extern
  |-ParmVarDecl 0x13583ec40 <<invalid sloc>> <invalid sloc> 'char *'
  |-ParmVarDecl 0x13583eca8 <<invalid sloc>> <invalid sloc> 'const char *'
  `-BuiltinAttr 0x13583ebe8 <<invalid sloc>> Implicit 899
