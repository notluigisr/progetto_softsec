TranslationUnitDecl 0x123055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1230564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x123055bd0 '__int128'
|-TypedefDecl 0x123056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x123055bf0 'unsigned __int128'
|-TypedefDecl 0x123126a30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x123126800 'struct __NSConstantString_tag'
|   `-Record 0x123056580 '__NSConstantString_tag'
|-TypedefDecl 0x123126a98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x123055d90 '__SVInt8_t'
|-TypedefDecl 0x123126b00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x123055db0 '__SVInt16_t'
|-TypedefDecl 0x123126b68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x123055dd0 '__SVInt32_t'
|-TypedefDecl 0x123126bd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x123055df0 '__SVInt64_t'
|-TypedefDecl 0x123126c38 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x123055e10 '__SVUint8_t'
|-TypedefDecl 0x123126ca0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x123055e30 '__SVUint16_t'
|-TypedefDecl 0x123126d08 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x123055e50 '__SVUint32_t'
|-TypedefDecl 0x123126d70 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x123055e70 '__SVUint64_t'
|-TypedefDecl 0x123126dd8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x123055e90 '__SVFloat16_t'
|-TypedefDecl 0x123126e40 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x123055eb0 '__SVFloat32_t'
|-TypedefDecl 0x123126ea8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x123055ed0 '__SVFloat64_t'
|-TypedefDecl 0x123126f10 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x123055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x123126f78 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x123055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x123126fe0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x123055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x123127048 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x123055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1231270b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x123055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x123127118 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x123055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x123127180 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x123055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1231271e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x123055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x123127250 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x123055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x1231272b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x123056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x123127320 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x123056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x123127388 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x123056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x1231273f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x123056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x123127458 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x123056090 '__clang_svint8x3_t'
|-TypedefDecl 0x1231274c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1230560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x123127528 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1230560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x123127590 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1230560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x1231275f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x123056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x123127660 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x123056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x1231276c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x123056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x123127730 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x123056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x123127798 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x123056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x123128000 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1230561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x123128068 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1230561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1231280d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1230561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x123128138 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x123056210 '__clang_svint8x4_t'
|-TypedefDecl 0x1231281a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x123056230 '__clang_svint16x4_t'
|-TypedefDecl 0x123128208 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x123056250 '__clang_svint32x4_t'
|-TypedefDecl 0x123128270 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x123056270 '__clang_svint64x4_t'
|-TypedefDecl 0x1231282d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x123056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x123128340 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1230562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x1231283a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1230562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x123128410 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1230562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x123128478 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x123056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x1231284e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x123056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x123128548 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x123056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x1231285b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x123056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x123128618 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x123056390 '__SVBool_t'
|-TypedefDecl 0x123128680 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1230563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x1231286e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1230563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x123128750 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1230563f0 '__SVCount_t'
|-TypedefDecl 0x1231287f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1231287b0 'char *'
|   `-BuiltinType 0x1230556b0 'char'
|-TypedefDecl 0x123128868 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1231287b0 'char *'
|   `-BuiltinType 0x1230556b0 'char'
`-FunctionDecl 0x123128a38 <dataset_diviso_filec/func7491_nonvuln.c:1:1, line:53:1> line:1:8 ConvertAnyFormat 'double (void *, int)'
  |-ParmVarDecl 0x1231288d8 <col:25, col:32> col:32 used ValuePtr 'void *'
  |-ParmVarDecl 0x123128958 <col:42, col:46> col:46 used Format 'int'
  `-CompoundStmt 0x123144a60 <line:2:1, line:53:1>
    |-DeclStmt 0x123128bb8 <line:3:5, col:17>
    | `-VarDecl 0x123128b50 <col:5, col:12> col:12 used Value 'double'
    |-BinaryOperator 0x123128c28 <line:4:5, col:13> 'double' '='
    | |-DeclRefExpr 0x123128bd0 <col:5> 'double' lvalue Var 0x123128b50 'Value' 'double'
    | `-ImplicitCastExpr 0x123128c10 <col:13> 'double' <IntegralToFloating>
    |   `-IntegerLiteral 0x123128bf0 <col:13> 'int' 0
    |-SwitchStmt 0x123128c80 <line:6:5, line:51:5>
    | |-ImplicitCastExpr 0x123128c68 <line:6:12> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x123128c48 <col:12> 'int' lvalue ParmVar 0x123128958 'Format' 'int'
    | `-CompoundStmt 0x123144980 <col:19, line:51:5>
    |   |-BinaryOperator 0x123128df0 <line:7:29, col:53> 'double' '='
    |   | |-DeclRefExpr 0x123128cd8 <col:29> 'double' lvalue Var 0x123128b50 'Value' 'double'
    |   | `-ImplicitCastExpr 0x123128dd8 <col:37, col:53> 'double' <IntegralToFloating>
    |   |   `-ImplicitCastExpr 0x123128dc0 <col:37, col:53> 'signed char' <LValueToRValue>
    |   |     `-UnaryOperator 0x123128da8 <col:37, col:53> 'signed char' lvalue prefix '*' cannot overflow
    |   |       `-CStyleCastExpr 0x123128d80 <col:38, col:53> 'signed char *' <BitCast>
    |   |         `-ImplicitCastExpr 0x123128d68 <col:53> 'void *' <LValueToRValue> part_of_explicit_cast
    |   |           `-DeclRefExpr 0x123128cf8 <col:53> 'void *' lvalue ParmVar 0x1231288d8 'ValuePtr' 'void *'
    |   |-BreakStmt 0x123128e10 <col:64>
    |   |-BreakStmt 0x123128e68 <line:8:64>
    |   |-BinaryOperator 0x1231430a0 <line:10:29, col:52> 'double' '='
    |   | |-DeclRefExpr 0x123128e88 <col:29> 'double' lvalue Var 0x123128b50 'Value' 'double'
    |   | `-ImplicitCastExpr 0x123143088 <col:37, col:52> 'double' <IntegralToFloating>
    |   |   `-CallExpr 0x123143048 <col:37, col:52> 'int'
    |   |     |-ImplicitCastExpr 0x123143030 <col:37> 'int (*)()' <FunctionToPointerDecay>
    |   |     | `-DeclRefExpr 0x123128fc0 <col:37> 'int ()' Function 0x123128f08 'Get16u' 'int ()'
    |   |     `-ImplicitCastExpr 0x123143070 <col:44> 'void *' <LValueToRValue>
    |   |       `-DeclRefExpr 0x123128fe0 <col:44> 'void *' lvalue ParmVar 0x1231288d8 'ValuePtr' 'void *'
    |   |-BreakStmt 0x1231430c0 <col:64>
    |   |-BinaryOperator 0x123143290 <line:11:29, col:52> 'double' '='
    |   | |-DeclRefExpr 0x1231430e0 <col:29> 'double' lvalue Var 0x123128b50 'Value' 'double'
    |   | `-ImplicitCastExpr 0x123143278 <col:37, col:52> 'double' <IntegralToFloating>
    |   |   `-CallExpr 0x123143238 <col:37, col:52> 'int'
    |   |     |-ImplicitCastExpr 0x123143220 <col:37> 'int (*)()' <FunctionToPointerDecay>
    |   |     | `-DeclRefExpr 0x1231431e0 <col:37> 'int ()' Function 0x123143128 'Get32u' 'int ()'
    |   |     `-ImplicitCastExpr 0x123143260 <col:44> 'void *' <LValueToRValue>
    |   |       `-DeclRefExpr 0x123143200 <col:44> 'void *' lvalue ParmVar 0x1231288d8 'ValuePtr' 'void *'
    |   |-BreakStmt 0x1231432b0 <col:64>
    |   |-CompoundStmt 0x123143c70 <line:15:13, line:29:13>
    |   | |-DeclStmt 0x123143400 <line:16:17, col:28>
    |   | | |-VarDecl 0x123143300 <col:17, col:21> col:21 used Num 'int'
    |   | | `-VarDecl 0x123143380 <col:17, col:25> col:25 used Den 'int'
    |   | |-BinaryOperator 0x1231435b0 <line:17:17, col:38> 'int' '='
    |   | | |-DeclRefExpr 0x123143418 <col:17> 'int' lvalue Var 0x123143300 'Num' 'int'
    |   | | `-CallExpr 0x123143570 <col:23, col:38> 'int'
    |   | |   |-ImplicitCastExpr 0x123143558 <col:23> 'int (*)()' <FunctionToPointerDecay>
    |   | |   | `-DeclRefExpr 0x123143518 <col:23> 'int ()' Function 0x123143460 'Get32s' 'int ()'
    |   | |   `-ImplicitCastExpr 0x123143598 <col:30> 'void *' <LValueToRValue>
    |   | |     `-DeclRefExpr 0x123143538 <col:30> 'void *' lvalue ParmVar 0x1231288d8 'ValuePtr' 'void *'
    |   | |-BinaryOperator 0x123143708 <line:18:17, col:48> 'int' '='
    |   | | |-DeclRefExpr 0x1231435d0 <col:17> 'int' lvalue Var 0x123143380 'Den' 'int'
    |   | | `-CallExpr 0x1231436e0 <col:23, col:48> 'int'
    |   | |   |-ImplicitCastExpr 0x1231436c8 <col:23> 'int (*)()' <FunctionToPointerDecay>
    |   | |   | `-DeclRefExpr 0x1231435f0 <col:23> 'int ()' Function 0x123143460 'Get32s' 'int ()'
    |   | |   `-BinaryOperator 0x1231436a8 <col:30, col:40> 'char *' '+'
    |   | |     |-IntegerLiteral 0x123143610 <col:30> 'int' 4
    |   | |     `-CStyleCastExpr 0x123143680 <col:32, col:40> 'char *' <BitCast>
    |   | |       `-ImplicitCastExpr 0x123143668 <col:40> 'void *' <LValueToRValue> part_of_explicit_cast
    |   | |         `-DeclRefExpr 0x123143630 <col:40> 'void *' lvalue ParmVar 0x1231288d8 'ValuePtr' 'void *'
    |   | |-IfStmt 0x123143c38 <line:19:17, line:27:17> has_else
    |   | | |-BinaryOperator 0x123143780 <line:19:21, col:28> 'int' '=='
    |   | | | |-ImplicitCastExpr 0x123143768 <col:21> 'int' <LValueToRValue>
    |   | | | | `-DeclRefExpr 0x123143728 <col:21> 'int' lvalue Var 0x123143380 'Den' 'int'
    |   | | | `-IntegerLiteral 0x123143748 <col:28> 'int' 0
    |   | | |-CompoundStmt 0x123143818 <col:30, line:21:17>
    |   | | | `-BinaryOperator 0x1231437f8 <line:20:21, col:29> 'double' '='
    |   | | |   |-DeclRefExpr 0x1231437a0 <col:21> 'double' lvalue Var 0x123128b50 'Value' 'double'
    |   | | |   `-ImplicitCastExpr 0x1231437e0 <col:29> 'double' <IntegralToFloating>
    |   | | |     `-IntegerLiteral 0x1231437c0 <col:29> 'int' 0
    |   | | `-CompoundStmt 0x123143c20 <line:21:22, line:27:17>
    |   | |   `-IfStmt 0x123143bf0 <line:22:21, line:26:21> has_else
    |   | |     |-BinaryOperator 0x1231438a8 <line:22:25, col:35> 'int' contains-errors '=='
    |   | |     | |-DeclRefExpr 0x123143830 <col:25> 'int' lvalue ParmVar 0x123128958 'Format' 'int'
    |   | |     | `-RecoveryExpr 0x123143888 <col:35> '<dependent type>' contains-errors lvalue
    |   | |     |-CompoundStmt 0x1231439f0 <col:49, line:24:21>
    |   | |     | `-BinaryOperator 0x1231439d0 <line:23:25, col:45> 'double' '='
    |   | |     |   |-DeclRefExpr 0x1231438c8 <col:25> 'double' lvalue Var 0x123128b50 'Value' 'double'
    |   | |     |   `-BinaryOperator 0x1231439b0 <col:33, col:45> 'double' '/'
    |   | |     |     |-CStyleCastExpr 0x123143938 <col:33, col:41> 'double' <IntegralToFloating>
    |   | |     |     | `-ImplicitCastExpr 0x123143920 <col:41> 'int' <LValueToRValue> part_of_explicit_cast
    |   | |     |     |   `-DeclRefExpr 0x1231438e8 <col:41> 'int' lvalue Var 0x123143300 'Num' 'int'
    |   | |     |     `-ImplicitCastExpr 0x123143998 <col:45> 'double' <IntegralToFloating>
    |   | |     |       `-ImplicitCastExpr 0x123143980 <col:45> 'int' <LValueToRValue>
    |   | |     |         `-DeclRefExpr 0x123143960 <col:45> 'int' lvalue Var 0x123143380 'Den' 'int'
    |   | |     `-CompoundStmt 0x123143bd8 <line:24:26, line:26:21>
    |   | |       `-BinaryOperator 0x123143bb8 <line:25:25, col:73> 'double' '='
    |   | |         |-DeclRefExpr 0x123143a08 <col:25> 'double' lvalue Var 0x123128b50 'Value' 'double'
    |   | |         `-BinaryOperator 0x123143b98 <col:33, col:73> 'double' '/'
    |   | |           |-CStyleCastExpr 0x123143ab8 <col:33, col:51> 'double' <IntegralToFloating>
    |   | |           | `-CStyleCastExpr 0x123143a78 <col:41, col:51> 'unsigned int' <IntegralCast>
    |   | |           |   `-ImplicitCastExpr 0x123143a60 <col:51> 'int' <LValueToRValue> part_of_explicit_cast
    |   | |           |     `-DeclRefExpr 0x123143a28 <col:51> 'int' lvalue Var 0x123143300 'Num' 'int'
    |   | |           `-CStyleCastExpr 0x123143b70 <col:55, col:73> 'double' <IntegralToFloating>
    |   | |             `-CStyleCastExpr 0x123143b30 <col:63, col:73> 'unsigned int' <IntegralCast>
    |   | |               `-ImplicitCastExpr 0x123143b18 <col:73> 'int' <LValueToRValue> part_of_explicit_cast
    |   | |                 `-DeclRefExpr 0x123143ae0 <col:73> 'int' lvalue Var 0x123143380 'Den' 'int'
    |   | `-BreakStmt 0x123143c68 <line:28:17>
    |   |-BinaryOperator 0x123143dd0 <line:31:29, col:66> 'double' '='
    |   | |-DeclRefExpr 0x123143cc0 <col:29> 'double' lvalue Var 0x123128b50 'Value' 'double'
    |   | `-ImplicitCastExpr 0x123143db8 <col:37, col:66> 'double' <IntegralToFloating>
    |   |   `-CStyleCastExpr 0x123143d90 <col:37, col:66> 'short' <IntegralCast>
    |   |     `-CallExpr 0x123143d38 <col:51, col:66> 'int'
    |   |       |-ImplicitCastExpr 0x123143d20 <col:51> 'int (*)()' <FunctionToPointerDecay>
    |   |       | `-DeclRefExpr 0x123143ce0 <col:51> 'int ()' Function 0x123128f08 'Get16u' 'int ()'
    |   |       `-ImplicitCastExpr 0x123143d60 <col:58> 'void *' <LValueToRValue>
    |   |         `-DeclRefExpr 0x123143d00 <col:58> 'void *' lvalue ParmVar 0x1231288d8 'ValuePtr' 'void *'
    |   |-BreakStmt 0x123143df0 <col:70>
    |   |-BinaryOperator 0x123143ee0 <line:32:29, col:52> 'double' '='
    |   | |-DeclRefExpr 0x123143e10 <col:29> 'double' lvalue Var 0x123128b50 'Value' 'double'
    |   | `-ImplicitCastExpr 0x123143ec8 <col:37, col:52> 'double' <IntegralToFloating>
    |   |   `-CallExpr 0x123143e88 <col:37, col:52> 'int'
    |   |     |-ImplicitCastExpr 0x123143e70 <col:37> 'int (*)()' <FunctionToPointerDecay>
    |   |     | `-DeclRefExpr 0x123143e30 <col:37> 'int ()' Function 0x123143460 'Get32s' 'int ()'
    |   |     `-ImplicitCastExpr 0x123143eb0 <col:44> 'void *' <LValueToRValue>
    |   |       `-DeclRefExpr 0x123143e50 <col:44> 'void *' lvalue ParmVar 0x1231288d8 'ValuePtr' 'void *'
    |   |-BreakStmt 0x123143f00 <col:70>
    |   |-CompoundStmt 0x1231445d8 <line:40:13, line:43:13>
    |   | |-DeclStmt 0x123144488 <line:41:17, col:42>
    |   | | `-VarDecl 0x123143f38 <col:17, col:34> col:21 used tmp 'int' cinit
    |   | |   `-ImplicitCastExpr 0x123144470 <col:27, col:34> 'int' <LValueToRValue>
    |   | |     `-UnaryOperator 0x123144458 <col:27, col:34> 'int' lvalue prefix '*' cannot overflow
    |   | |       `-CStyleCastExpr 0x123144430 <col:28, col:34> 'int *' <BitCast>
    |   | |         `-ImplicitCastExpr 0x123144418 <col:34> 'void *' <LValueToRValue> part_of_explicit_cast
    |   | |           `-DeclRefExpr 0x123143fa0 <col:34> 'void *' lvalue ParmVar 0x1231288d8 'ValuePtr' 'void *'
    |   | `-BinaryOperator 0x1231445b8 <line:42:17, col:36> 'double' '='
    |   |   |-DeclRefExpr 0x1231444a0 <col:17> 'double' lvalue Var 0x123128b50 'Value' 'double'
    |   |   `-ImplicitCastExpr 0x1231445a0 <col:25, col:36> 'double' <FloatingCast>
    |   |     `-ImplicitCastExpr 0x123144588 <col:25, col:36> 'float' <LValueToRValue>
    |   |       `-UnaryOperator 0x123144570 <col:25, col:36> 'float' lvalue prefix '*' cannot overflow
    |   |         `-CStyleCastExpr 0x123144548 <col:26, col:36> 'float *' <BitCast>
    |   |           `-UnaryOperator 0x1231444e0 <col:35, col:36> 'int *' prefix '&' cannot overflow
    |   |             `-DeclRefExpr 0x1231444c0 <col:36> 'int' lvalue Var 0x123143f38 'tmp' 'int'
    |   |-BreakStmt 0x1231445f8 <line:44:13>
    |   |-BinaryOperator 0x123144718 <line:47:13, col:32> 'double' '='
    |   | |-DeclRefExpr 0x123144618 <col:13> 'double' lvalue Var 0x123128b50 'Value' 'double'
    |   | `-ImplicitCastExpr 0x123144700 <col:21, col:32> 'double' <LValueToRValue>
    |   |   `-UnaryOperator 0x1231446e8 <col:21, col:32> 'double' lvalue prefix '*' cannot overflow
    |   |     `-CStyleCastExpr 0x1231446c0 <col:22, col:32> 'double *' <BitCast>
    |   |       `-ImplicitCastExpr 0x1231446a8 <col:32> 'void *' <LValueToRValue> part_of_explicit_cast
    |   |         `-DeclRefExpr 0x123144638 <col:32> 'void *' lvalue ParmVar 0x1231288d8 'ValuePtr' 'void *'
    |   |-BreakStmt 0x123144738 <col:54>
    |   `-DefaultStmt 0x123144960 <line:49:9, line:50:39>
    |     `-CallExpr 0x1231448f8 <col:13, col:39> 'int'
    |       |-ImplicitCastExpr 0x1231448e0 <col:13> 'int (*)()' <FunctionToPointerDecay>
    |       | `-DeclRefExpr 0x123144820 <col:13> 'int ()' Function 0x123144768 'ErrNonfatal' 'int ()'
    |       |-ImplicitCastExpr 0x123144930 <col:25> 'char *' <ArrayToPointerDecay>
    |       | `-StringLiteral 0x123144880 <col:25> 'char[4]' lvalue "STR"
    |       |-ImplicitCastExpr 0x123144948 <col:31> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x1231448a0 <col:31> 'int' lvalue ParmVar 0x123128958 'Format' 'int'
    |       `-IntegerLiteral 0x1231448c0 <col:38> 'int' 0
    `-ReturnStmt 0x123144a50 <line:52:5, col:12>
      `-ImplicitCastExpr 0x123144a38 <col:12> 'double' <LValueToRValue>
        `-DeclRefExpr 0x123144a18 <col:12> 'double' lvalue Var 0x123128b50 'Value' 'double'
