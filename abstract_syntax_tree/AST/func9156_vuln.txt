TranslationUnitDecl 0x152855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1528564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x152855bd0 '__int128'
|-TypedefDecl 0x152856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x152855bf0 'unsigned __int128'
|-TypedefDecl 0x15300be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x15300bc00 'struct __NSConstantString_tag'
|   `-Record 0x152856580 '__NSConstantString_tag'
|-TypedefDecl 0x15300be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x152855d90 '__SVInt8_t'
|-TypedefDecl 0x15300bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x152855db0 '__SVInt16_t'
|-TypedefDecl 0x15300bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x152855dd0 '__SVInt32_t'
|-TypedefDecl 0x15300bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x152855df0 '__SVInt64_t'
|-TypedefDecl 0x15300c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x152855e10 '__SVUint8_t'
|-TypedefDecl 0x15300c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x152855e30 '__SVUint16_t'
|-TypedefDecl 0x15300c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x152855e50 '__SVUint32_t'
|-TypedefDecl 0x15300c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x152855e70 '__SVUint64_t'
|-TypedefDecl 0x15300c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x152855e90 '__SVFloat16_t'
|-TypedefDecl 0x15300c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x152855eb0 '__SVFloat32_t'
|-TypedefDecl 0x15300c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x152855ed0 '__SVFloat64_t'
|-TypedefDecl 0x15300c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x152855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x15300c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x152855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x15300c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x152855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x15300c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x152855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x15300c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x152855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x15300c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x152855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x15300c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x152855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x15300c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x152855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x15300c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x152855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x15300c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x152856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x15300c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x152856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x15300c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x152856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x15300c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x152856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x15300c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x152856090 '__clang_svint8x3_t'
|-TypedefDecl 0x15300c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1528560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x15300c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1528560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x15300c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1528560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x15300c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x152856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x15300ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x152856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x15300cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x152856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x15300cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x152856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x15300cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x152856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x15300d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1528561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x15300d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1528561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x15300d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1528561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x15300d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x152856210 '__clang_svint8x4_t'
|-TypedefDecl 0x15300d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x152856230 '__clang_svint16x4_t'
|-TypedefDecl 0x15300d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x152856250 '__clang_svint32x4_t'
|-TypedefDecl 0x15300d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x152856270 '__clang_svint64x4_t'
|-TypedefDecl 0x15300d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x152856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x15300d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1528562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x15300d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1528562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x15300d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1528562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x15300d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x152856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x15300d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x152856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x15300d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x152856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x15300d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x152856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x15300da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x152856390 '__SVBool_t'
|-TypedefDecl 0x15300da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1528563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x15300dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1528563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x15300db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1528563f0 '__SVCount_t'
|-TypedefDecl 0x15300dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x15300dbb0 'char *'
|   `-BuiltinType 0x1528556b0 'char'
|-TypedefDecl 0x15300dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x15300dbb0 'char *'
|   `-BuiltinType 0x1528556b0 'char'
|-FunctionDecl 0x15300e250 <dataset_diviso_filec/func9156_vuln.c:1:1, line:41:1> line:1:13 calc_coeff 'void (double *, const int *, int, double, double)' static
| |-ParmVarDecl 0x15300ddd0 <col:24, col:35> col:31 used mu 'double *'
| |-ParmVarDecl 0x15300df60 <col:38, col:55> col:48 used index 'const int *'
| |-ParmVarDecl 0x15300dfe0 <col:58, col:62> col:62 used prefilter 'int'
| |-ParmVarDecl 0x15300e060 <col:73, col:80> col:80 used r2 'double'
| |-ParmVarDecl 0x15300e0e0 <col:84, col:91> col:91 used mul 'double'
| `-CompoundStmt 0x15302c9a0 <line:2:1, line:41:1>
|   |-DeclStmt 0x1530267b8 <line:3:5, col:47>
|   | |-VarDecl 0x15300e380 <col:5, col:25> col:12 used mul2 'double' cinit
|   | | `-BinaryOperator 0x153026670 <col:19, col:25> 'double' '*'
|   | |   |-ImplicitCastExpr 0x153026640 <col:19> 'double' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x153026600 <col:19> 'double' lvalue ParmVar 0x15300e0e0 'mul' 'double'
|   | |   `-ImplicitCastExpr 0x153026658 <col:25> 'double' <LValueToRValue>
|   | |     `-DeclRefExpr 0x153026620 <col:25> 'double' lvalue ParmVar 0x15300e0e0 'mul' 'double'
|   | `-VarDecl 0x1530266a8 <col:5, col:44> col:30 used mul3 'double' cinit
|   |   `-BinaryOperator 0x153026780 <col:37, col:44> 'double' '*'
|   |     |-ImplicitCastExpr 0x153026750 <col:37> 'double' <LValueToRValue>
|   |     | `-DeclRefExpr 0x153026710 <col:37> 'double' lvalue Var 0x15300e380 'mul2' 'double'
|   |     `-ImplicitCastExpr 0x153026768 <col:44> 'double' <LValueToRValue>
|   |       `-DeclRefExpr 0x153026730 <col:44> 'double' lvalue ParmVar 0x15300e0e0 'mul' 'double'
|   |-DeclStmt 0x153027478 <line:4:5, line:9:6>
|   | `-VarDecl 0x153026828 <line:4:5, line:9:5> line:4:12 used kernel 'double[4]' cinit
|   |   `-InitListExpr 0x153027400 <col:23, line:9:5> 'double[4]'
|   |     |-BinaryOperator 0x153026b30 <line:5:9, col:59> 'double' '/'
|   |     | |-ParenExpr 0x153026ad8 <col:9, col:55> 'double'
|   |     | | `-BinaryOperator 0x153026ab8 <col:10, col:51> 'double' '+'
|   |     | |   |-BinaryOperator 0x153026a08 <col:10, col:37> 'double' '+'
|   |     | |   | |-BinaryOperator 0x153026958 <col:10, col:24> 'double' '+'
|   |     | |   | | |-ImplicitCastExpr 0x153026940 <col:10> 'double' <IntegralToFloating>
|   |     | |   | | | `-IntegerLiteral 0x153026890 <col:10> 'int' 5204
|   |     | |   | | `-BinaryOperator 0x153026920 <col:17, col:24> 'double' '*'
|   |     | |   | |   |-ImplicitCastExpr 0x153026908 <col:17> 'double' <IntegralToFloating>
|   |     | |   | |   | `-IntegerLiteral 0x1530268b0 <col:17> 'int' 2520
|   |     | |   | |   `-ImplicitCastExpr 0x1530268f0 <col:24> 'double' <LValueToRValue>
|   |     | |   | |     `-DeclRefExpr 0x1530268d0 <col:24> 'double' lvalue ParmVar 0x15300e0e0 'mul' 'double'
|   |     | |   | `-BinaryOperator 0x1530269e8 <col:30, col:37> 'double' '*'
|   |     | |   |   |-ImplicitCastExpr 0x1530269d0 <col:30> 'double' <IntegralToFloating>
|   |     | |   |   | `-IntegerLiteral 0x153026978 <col:30> 'int' 1092
|   |     | |   |   `-ImplicitCastExpr 0x1530269b8 <col:37> 'double' <LValueToRValue>
|   |     | |   |     `-DeclRefExpr 0x153026998 <col:37> 'double' lvalue Var 0x15300e380 'mul2' 'double'
|   |     | |   `-BinaryOperator 0x153026a98 <col:44, col:51> 'double' '*'
|   |     | |     |-ImplicitCastExpr 0x153026a80 <col:44> 'double' <IntegralToFloating>
|   |     | |     | `-IntegerLiteral 0x153026a28 <col:44> 'int' 3280
|   |     | |     `-ImplicitCastExpr 0x153026a68 <col:51> 'double' <LValueToRValue>
|   |     | |       `-DeclRefExpr 0x153026a48 <col:51> 'double' lvalue Var 0x1530266a8 'mul3' 'double'
|   |     | `-ImplicitCastExpr 0x153026b18 <col:59> 'double' <IntegralToFloating>
|   |     |   `-IntegerLiteral 0x153026af8 <col:59> 'int' 12096
|   |     |-BinaryOperator 0x153026df0 <line:6:9, col:59> 'double' '/'
|   |     | |-ParenExpr 0x153026d98 <col:9, col:55> 'double'
|   |     | | `-BinaryOperator 0x153026d78 <col:10, col:51> 'double' '-'
|   |     | |   |-BinaryOperator 0x153026cc8 <col:10, col:37> 'double' '-'
|   |     | |   | |-BinaryOperator 0x153026c18 <col:10, col:24> 'double' '-'
|   |     | |   | | |-ImplicitCastExpr 0x153026c00 <col:10> 'double' <IntegralToFloating>
|   |     | |   | | | `-IntegerLiteral 0x153026b50 <col:10> 'int' 2943
|   |     | |   | | `-BinaryOperator 0x153026be0 <col:18, col:24> 'double' '*'
|   |     | |   | |   |-ImplicitCastExpr 0x153026bc8 <col:18> 'double' <IntegralToFloating>
|   |     | |   | |   | `-IntegerLiteral 0x153026b70 <col:18> 'int' 210
|   |     | |   | |   `-ImplicitCastExpr 0x153026bb0 <col:24> 'double' <LValueToRValue>
|   |     | |   | |     `-DeclRefExpr 0x153026b90 <col:24> 'double' lvalue ParmVar 0x15300e0e0 'mul' 'double'
|   |     | |   | `-BinaryOperator 0x153026ca8 <col:31, col:37> 'double' '*'
|   |     | |   |   |-ImplicitCastExpr 0x153026c90 <col:31> 'double' <IntegralToFloating>
|   |     | |   |   | `-IntegerLiteral 0x153026c38 <col:31> 'int' 273
|   |     | |   |   `-ImplicitCastExpr 0x153026c78 <col:37> 'double' <LValueToRValue>
|   |     | |   |     `-DeclRefExpr 0x153026c58 <col:37> 'double' lvalue Var 0x15300e380 'mul2' 'double'
|   |     | |   `-BinaryOperator 0x153026d58 <col:44, col:51> 'double' '*'
|   |     | |     |-ImplicitCastExpr 0x153026d40 <col:44> 'double' <IntegralToFloating>
|   |     | |     | `-IntegerLiteral 0x153026ce8 <col:44> 'int' 2460
|   |     | |     `-ImplicitCastExpr 0x153026d28 <col:51> 'double' <LValueToRValue>
|   |     | |       `-DeclRefExpr 0x153026d08 <col:51> 'double' lvalue Var 0x1530266a8 'mul3' 'double'
|   |     | `-ImplicitCastExpr 0x153026dd8 <col:59> 'double' <IntegralToFloating>
|   |     |   `-IntegerLiteral 0x153026db8 <col:59> 'int' 12096
|   |     |-BinaryOperator 0x1530270b0 <line:7:9, col:59> 'double' '/'
|   |     | |-ParenExpr 0x153027058 <col:9, col:55> 'double'
|   |     | | `-BinaryOperator 0x153027038 <col:11, col:51> 'double' '+'
|   |     | |   |-BinaryOperator 0x153026f88 <col:11, col:37> 'double' '-'
|   |     | |   | |-BinaryOperator 0x153026ed8 <col:11, col:24> 'double' '-'
|   |     | |   | | |-ImplicitCastExpr 0x153026ec0 <col:11> 'double' <IntegralToFloating>
|   |     | |   | | | `-IntegerLiteral 0x153026e10 <col:11> 'int' 486
|   |     | |   | | `-BinaryOperator 0x153026ea0 <col:18, col:24> 'double' '*'
|   |     | |   | |   |-ImplicitCastExpr 0x153026e88 <col:18> 'double' <IntegralToFloating>
|   |     | |   | |   | `-IntegerLiteral 0x153026e30 <col:18> 'int' 924
|   |     | |   | |   `-ImplicitCastExpr 0x153026e70 <col:24> 'double' <LValueToRValue>
|   |     | |   | |     `-DeclRefExpr 0x153026e50 <col:24> 'double' lvalue ParmVar 0x15300e0e0 'mul' 'double'
|   |     | |   | `-BinaryOperator 0x153026f68 <col:31, col:37> 'double' '*'
|   |     | |   |   |-ImplicitCastExpr 0x153026f50 <col:31> 'double' <IntegralToFloating>
|   |     | |   |   | `-IntegerLiteral 0x153026ef8 <col:31> 'int' 546
|   |     | |   |   `-ImplicitCastExpr 0x153026f38 <col:37> 'double' <LValueToRValue>
|   |     | |   |     `-DeclRefExpr 0x153026f18 <col:37> 'double' lvalue Var 0x15300e380 'mul2' 'double'
|   |     | |   `-BinaryOperator 0x153027018 <col:45, col:51> 'double' '*'
|   |     | |     |-ImplicitCastExpr 0x153027000 <col:45> 'double' <IntegralToFloating>
|   |     | |     | `-IntegerLiteral 0x153026fa8 <col:45> 'int' 984
|   |     | |     `-ImplicitCastExpr 0x153026fe8 <col:51> 'double' <LValueToRValue>
|   |     | |       `-DeclRefExpr 0x153026fc8 <col:51> 'double' lvalue Var 0x1530266a8 'mul3' 'double'
|   |     | `-ImplicitCastExpr 0x153027098 <col:59> 'double' <IntegralToFloating>
|   |     |   `-IntegerLiteral 0x153027078 <col:59> 'int' 12096
|   |     `-BinaryOperator 0x153027370 <line:8:9, col:59> 'double' '/'
|   |       |-ParenExpr 0x153027318 <col:9, col:55> 'double'
|   |       | `-BinaryOperator 0x1530272f8 <col:12, col:51> 'double' '-'
|   |       |   |-BinaryOperator 0x153027248 <col:12, col:37> 'double' '+'
|   |       |   | |-BinaryOperator 0x153027198 <col:12, col:24> 'double' '-'
|   |       |   | | |-ImplicitCastExpr 0x153027180 <col:12> 'double' <IntegralToFloating>
|   |       |   | | | `-IntegerLiteral 0x1530270d0 <col:12> 'int' 17
|   |       |   | | `-BinaryOperator 0x153027160 <col:18, col:24> 'double' '*'
|   |       |   | |   |-ImplicitCastExpr 0x153027148 <col:18> 'double' <IntegralToFloating>
|   |       |   | |   | `-IntegerLiteral 0x1530270f0 <col:18> 'int' 126
|   |       |   | |   `-ImplicitCastExpr 0x153027130 <col:24> 'double' <LValueToRValue>
|   |       |   | |     `-DeclRefExpr 0x153027110 <col:24> 'double' lvalue ParmVar 0x15300e0e0 'mul' 'double'
|   |       |   | `-BinaryOperator 0x153027228 <col:31, col:37> 'double' '*'
|   |       |   |   |-ImplicitCastExpr 0x153027210 <col:31> 'double' <IntegralToFloating>
|   |       |   |   | `-IntegerLiteral 0x1530271b8 <col:31> 'int' 273
|   |       |   |   `-ImplicitCastExpr 0x1530271f8 <col:37> 'double' <LValueToRValue>
|   |       |   |     `-DeclRefExpr 0x1530271d8 <col:37> 'double' lvalue Var 0x15300e380 'mul2' 'double'
|   |       |   `-BinaryOperator 0x1530272d8 <col:45, col:51> 'double' '*'
|   |       |     |-ImplicitCastExpr 0x1530272c0 <col:45> 'double' <IntegralToFloating>
|   |       |     | `-IntegerLiteral 0x153027268 <col:45> 'int' 164
|   |       |     `-ImplicitCastExpr 0x1530272a8 <col:51> 'double' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x153027288 <col:51> 'double' lvalue Var 0x1530266a8 'mul3' 'double'
|   |       `-ImplicitCastExpr 0x153027358 <col:59> 'double' <IntegralToFloating>
|   |         `-IntegerLiteral 0x153027338 <col:59> 'int' 12096
|   |-DeclStmt 0x1530275a0 <line:11:5, col:24>
|   | `-VarDecl 0x153027538 <col:5, col:23> col:12 used mat_freq 'double[13]'
|   |-CallExpr 0x1530285f8 <line:12:5, col:44> 'void *'
|   | |-ImplicitCastExpr 0x1530285e0 <col:5> 'void *(*)(void *, const void *, unsigned long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1530284c0 <col:5> 'void *(void *, const void *, unsigned long)' Function 0x153028270 'memcpy' 'void *(void *, const void *, unsigned long)'
|   | |-ImplicitCastExpr 0x153028648 <col:12> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x153028630 <col:12> 'double *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x1530284e0 <col:12> 'double[13]' lvalue Var 0x153027538 'mat_freq' 'double[13]'
|   | |-ImplicitCastExpr 0x153028678 <col:22> 'const void *' <BitCast>
|   | | `-ImplicitCastExpr 0x153028660 <col:22> 'double *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x153028500 <col:22> 'double[4]' lvalue Var 0x153026828 'kernel' 'double[4]'
|   | `-UnaryExprOrTypeTraitExpr 0x153028560 <col:30, col:43> 'unsigned long' sizeof
|   |   `-ParenExpr 0x153028540 <col:36, col:43> 'double[4]' lvalue
|   |     `-DeclRefExpr 0x153028520 <col:37> 'double[4]' lvalue Var 0x153026828 'kernel' 'double[4]' non_odr_use_unevaluated
|   |-CallExpr 0x153028b08 <line:13:5, col:62> 'void *'
|   | |-ImplicitCastExpr 0x153028af0 <col:5> 'void *(*)(void *, int, unsigned long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x153028928 <col:5> 'void *(void *, int, unsigned long)' Function 0x1530286d8 'memset' 'void *(void *, int, unsigned long)'
|   | |-ImplicitCastExpr 0x153028b40 <col:12, col:23> 'void *' <BitCast>
|   | | `-BinaryOperator 0x1530289a0 <col:12, col:23> 'double *' '+'
|   | |   |-ImplicitCastExpr 0x153028988 <col:12> 'double *' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x153028948 <col:12> 'double[13]' lvalue Var 0x153027538 'mat_freq' 'double[13]'
|   | |   `-IntegerLiteral 0x153028968 <col:23> 'int' 4
|   | |-IntegerLiteral 0x1530289c0 <col:26> 'int' 0
|   | `-BinaryOperator 0x153028aa0 <col:29, col:61> 'unsigned long' '-'
|   |   |-UnaryExprOrTypeTraitExpr 0x153028a20 <col:29, col:44> 'unsigned long' sizeof
|   |   | `-ParenExpr 0x153028a00 <col:35, col:44> 'double[13]' lvalue
|   |   |   `-DeclRefExpr 0x1530289e0 <col:36> 'double[13]' lvalue Var 0x153027538 'mat_freq' 'double[13]' non_odr_use_unevaluated
|   |   `-UnaryExprOrTypeTraitExpr 0x153028a80 <col:48, col:61> 'unsigned long' sizeof
|   |     `-ParenExpr 0x153028a60 <col:54, col:61> 'double[4]' lvalue
|   |       `-DeclRefExpr 0x153028a40 <col:55> 'double[4]' lvalue Var 0x153026828 'kernel' 'double[4]' non_odr_use_unevaluated
|   |-DeclStmt 0x153028bf8 <line:14:5, col:14>
|   | `-VarDecl 0x153028b70 <col:5, col:13> col:9 used n 'int' cinit
|   |   `-IntegerLiteral 0x153028bd8 <col:13> 'int' 6
|   |-CallExpr 0x15302a218 <line:15:5, col:37> 'int'
|   | |-ImplicitCastExpr 0x15302a200 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x153028d40 <col:5> 'int ()' Function 0x153028c88 'coeff_filter' 'int ()'
|   | |-ImplicitCastExpr 0x15302a250 <col:18> 'double *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x153028d60 <col:18> 'double[13]' lvalue Var 0x153027538 'mat_freq' 'double[13]'
|   | |-ImplicitCastExpr 0x15302a268 <col:28> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x153028d80 <col:28> 'int' lvalue Var 0x153028b70 'n' 'int'
|   | `-ImplicitCastExpr 0x15302a280 <col:31> 'double *' <ArrayToPointerDecay>
|   |   `-DeclRefExpr 0x153028da0 <col:31> 'double[4]' lvalue Var 0x153026828 'kernel' 'double[4]'
|   |-ForStmt 0x15302a610 <line:16:5, line:17:36>
|   | |-DeclStmt 0x15302a338 <line:16:10, col:19>
|   | | `-VarDecl 0x15302a2b0 <col:10, col:18> col:14 used k 'int' cinit
|   | |   `-IntegerLiteral 0x15302a318 <col:18> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x15302a400 <col:21, col:29> 'int' '<'
|   | | |-ImplicitCastExpr 0x15302a3e8 <col:21> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x15302a350 <col:21> 'int' lvalue Var 0x15302a2b0 'k' 'int'
|   | | `-BinaryOperator 0x15302a3c8 <col:25, col:29> 'int' '*'
|   | |   |-IntegerLiteral 0x15302a370 <col:25> 'int' 2
|   | |   `-ImplicitCastExpr 0x15302a3b0 <col:29> 'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x15302a390 <col:29> 'int' lvalue ParmVar 0x15300dfe0 'prefilter' 'int'
|   | |-UnaryOperator 0x15302a440 <col:40, col:42> 'int' prefix '++'
|   | | `-DeclRefExpr 0x15302a420 <col:42> 'int' lvalue Var 0x15302a2b0 'k' 'int'
|   | `-CallExpr 0x15302a5c8 <line:17:9, col:36> 'int'
|   |   |-ImplicitCastExpr 0x15302a5b0 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x15302a538 <col:9> 'int ()' Function 0x15302a480 'coeff_blur121' 'int ()'
|   |   |-ImplicitCastExpr 0x15302a5f8 <col:23> 'double *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x15302a558 <col:23> 'double[13]' lvalue Var 0x153027538 'mat_freq' 'double[13]'
|   |   `-UnaryOperator 0x15302a598 <col:33, col:35> 'int' prefix '++'
|   |     `-DeclRefExpr 0x15302a578 <col:35> 'int' lvalue Var 0x153028b70 'n' 'int'
|   |-DeclStmt 0x15302a718 <line:19:5, col:24>
|   | `-VarDecl 0x15302a6b0 <col:5, col:23> col:12 used vec_freq 'double[13]'
|   |-BinaryOperator 0x15302a878 <line:20:5, col:32> 'int' '='
|   | |-DeclRefExpr 0x15302a730 <col:5> 'int' lvalue Var 0x153028b70 'n' 'int'
|   | `-BinaryOperator 0x15302a858 <col:9, col:32> 'int' '+'
|   |   |-BinaryOperator 0x15302a818 <col:9, col:20> 'int' '+'
|   |   | |-ImplicitCastExpr 0x15302a7e8 <col:9, col:16> 'int' <LValueToRValue>
|   |   | | `-ArraySubscriptExpr 0x15302a7a8 <col:9, col:16> 'const int' lvalue
|   |   | |   |-ImplicitCastExpr 0x15302a790 <col:9> 'const int *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x15302a750 <col:9> 'const int *' lvalue ParmVar 0x15300df60 'index' 'const int *'
|   |   | |   `-IntegerLiteral 0x15302a770 <col:15> 'int' 3
|   |   | `-ImplicitCastExpr 0x15302a800 <col:20> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x15302a7c8 <col:20> 'int' lvalue ParmVar 0x15300dfe0 'prefilter' 'int'
|   |   `-IntegerLiteral 0x15302a838 <col:32> 'int' 3
|   |-CallExpr 0x15302aa10 <line:21:5, col:31> 'int'
|   | |-ImplicitCastExpr 0x15302a9f8 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x15302a978 <col:5> 'int ()' Function 0x15302a8c0 'calc_gauss' 'int ()'
|   | |-ImplicitCastExpr 0x15302aa48 <col:16> 'double *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x15302a998 <col:16> 'double[13]' lvalue Var 0x15302a6b0 'vec_freq' 'double[13]'
|   | |-ImplicitCastExpr 0x15302aa60 <col:26> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x15302a9b8 <col:26> 'int' lvalue Var 0x153028b70 'n' 'int'
|   | `-ImplicitCastExpr 0x15302aa78 <col:29> 'double' <LValueToRValue>
|   |   `-DeclRefExpr 0x15302a9d8 <col:29> 'double' lvalue ParmVar 0x15300e060 'r2' 'double'
|   |-CallExpr 0x15302adc0 <line:22:5, col:81> 'void *'
|   | |-ImplicitCastExpr 0x15302ada8 <col:5> 'void *(*)(void *, int, unsigned long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x15302aa90 <col:5> 'void *(void *, int, unsigned long)' Function 0x1530286d8 'memset' 'void *(void *, int, unsigned long)'
|   | |-ImplicitCastExpr 0x15302adf8 <col:12, col:27> 'void *' <BitCast>
|   | | `-BinaryOperator 0x15302ab60 <col:12, col:27> 'double *' '+'
|   | |   |-BinaryOperator 0x15302ab20 <col:12, col:23> 'double *' '+'
|   | |   | |-ImplicitCastExpr 0x15302aaf0 <col:12> 'double *' <ArrayToPointerDecay>
|   | |   | | `-DeclRefExpr 0x15302aab0 <col:12> 'double[13]' lvalue Var 0x15302a6b0 'vec_freq' 'double[13]'
|   | |   | `-ImplicitCastExpr 0x15302ab08 <col:23> 'int' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x15302aad0 <col:23> 'int' lvalue Var 0x153028b70 'n' 'int'
|   | |   `-IntegerLiteral 0x15302ab40 <col:27> 'int' 1
|   | |-IntegerLiteral 0x15302ab80 <col:30> 'int' 0
|   | `-BinaryOperator 0x15302ad88 <col:33, col:80> 'unsigned long' '-'
|   |   |-UnaryExprOrTypeTraitExpr 0x15302abe0 <col:33, col:48> 'unsigned long' sizeof
|   |   | `-ParenExpr 0x15302abc0 <col:39, col:48> 'double[13]' lvalue
|   |   |   `-DeclRefExpr 0x15302aba0 <col:40> 'double[13]' lvalue Var 0x15302a6b0 'vec_freq' 'double[13]' non_odr_use_unevaluated
|   |   `-BinaryOperator 0x15302ad68 <col:52, col:80> 'unsigned long' '*'
|   |     |-ImplicitCastExpr 0x15302ad50 <col:52, col:58> 'unsigned long' <IntegralCast>
|   |     | `-ParenExpr 0x15302ac78 <col:52, col:58> 'int'
|   |     |   `-BinaryOperator 0x15302ac58 <col:53, col:57> 'int' '+'
|   |     |     |-ImplicitCastExpr 0x15302ac40 <col:53> 'int' <LValueToRValue>
|   |     |     | `-DeclRefExpr 0x15302ac00 <col:53> 'int' lvalue Var 0x153028b70 'n' 'int'
|   |     |     `-IntegerLiteral 0x15302ac20 <col:57> 'int' 1
|   |     `-UnaryExprOrTypeTraitExpr 0x15302ad30 <col:62, col:80> 'unsigned long' sizeof
|   |       `-ParenExpr 0x15302ad10 <col:68, col:80> 'double' lvalue
|   |         `-ArraySubscriptExpr 0x15302acf0 <col:69, col:79> 'double' lvalue
|   |           |-ImplicitCastExpr 0x15302acd8 <col:69> 'double *' <ArrayToPointerDecay>
|   |           | `-DeclRefExpr 0x15302ac98 <col:69> 'double[13]' lvalue Var 0x15302a6b0 'vec_freq' 'double[13]' non_odr_use_unevaluated
|   |           `-IntegerLiteral 0x15302acb8 <col:78> 'int' 0
|   |-CompoundAssignOperator 0x15302ae50 <line:23:5, col:10> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x15302ae10 <col:5> 'int' lvalue Var 0x153028b70 'n' 'int'
|   | `-IntegerLiteral 0x15302ae30 <col:10> 'int' 3
|   |-CallExpr 0x15302af18 <line:24:5, col:37> 'int'
|   | |-ImplicitCastExpr 0x15302af00 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x15302ae80 <col:5> 'int ()' Function 0x153028c88 'coeff_filter' 'int ()'
|   | |-ImplicitCastExpr 0x15302af50 <col:18> 'double *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x15302aea0 <col:18> 'double[13]' lvalue Var 0x15302a6b0 'vec_freq' 'double[13]'
|   | |-ImplicitCastExpr 0x15302af68 <col:28> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x15302aec0 <col:28> 'int' lvalue Var 0x153028b70 'n' 'int'
|   | `-ImplicitCastExpr 0x15302af80 <col:31> 'double *' <ArrayToPointerDecay>
|   |   `-DeclRefExpr 0x15302aee0 <col:31> 'double[4]' lvalue Var 0x153026828 'kernel' 'double[4]'
|   |-ForStmt 0x15302b600 <line:25:5, line:26:36>
|   | |-DeclStmt 0x15302b038 <line:25:10, col:19>
|   | | `-VarDecl 0x15302afb0 <col:10, col:18> col:14 used k 'int' cinit
|   | |   `-IntegerLiteral 0x15302b018 <col:18> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x15302b0c0 <col:21, col:25> 'int' '<'
|   | | |-ImplicitCastExpr 0x15302b090 <col:21> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x15302b050 <col:21> 'int' lvalue Var 0x15302afb0 'k' 'int'
|   | | `-ImplicitCastExpr 0x15302b0a8 <col:25> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x15302b070 <col:25> 'int' lvalue ParmVar 0x15300dfe0 'prefilter' 'int'
|   | |-UnaryOperator 0x15302b100 <col:36, col:38> 'int' prefix '++'
|   | | `-DeclRefExpr 0x15302b0e0 <col:38> 'int' lvalue Var 0x15302afb0 'k' 'int'
|   | `-CallExpr 0x15302b1a8 <line:26:9, col:36> 'int'
|   |   |-ImplicitCastExpr 0x15302b190 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x15302b118 <col:9> 'int ()' Function 0x15302a480 'coeff_blur121' 'int ()'
|   |   |-ImplicitCastExpr 0x15302b1d8 <col:23> 'double *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x15302b138 <col:23> 'double[13]' lvalue Var 0x15302a6b0 'vec_freq' 'double[13]'
|   |   `-UnaryOperator 0x15302b178 <col:33, col:35> 'int' prefix '--'
|   |     `-DeclRefExpr 0x15302b158 <col:35> 'int' lvalue Var 0x153028b70 'n' 'int'
|   |-DeclStmt 0x15302b7a0 <line:28:5, col:21>
|   | `-VarDecl 0x15302b738 <col:5, col:20> col:12 used mat 'double[4][4]'
|   |-CallExpr 0x15302b930 <line:29:5, col:37> 'int'
|   | |-ImplicitCastExpr 0x15302b918 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x15302b898 <col:5> 'int ()' Function 0x15302b7e0 'calc_matrix' 'int ()'
|   | |-ImplicitCastExpr 0x15302b9a0 <col:17> 'double (*)[4]' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x15302b8b8 <col:17> 'double[4][4]' lvalue Var 0x15302b738 'mat' 'double[4][4]'
|   | |-ImplicitCastExpr 0x15302b9b8 <col:22> 'double *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x15302b8d8 <col:22> 'double[13]' lvalue Var 0x153027538 'mat_freq' 'double[13]'
|   | `-ImplicitCastExpr 0x15302b9d0 <col:32> 'const int *' <LValueToRValue>
|   |   `-DeclRefExpr 0x15302b8f8 <col:32> 'const int *' lvalue ParmVar 0x15300df60 'index' 'const int *'
|   |-DeclStmt 0x15302bab8 <line:31:5, col:18>
|   | `-VarDecl 0x15302ba50 <col:5, col:17> col:12 used vec 'double[4]'
|   |-ForStmt 0x15302c098 <line:32:5, line:33:84>
|   | |-DeclStmt 0x15302bb70 <line:32:10, col:19>
|   | | `-VarDecl 0x15302bae8 <col:10, col:18> col:14 used i 'int' cinit
|   | |   `-IntegerLiteral 0x15302bb50 <col:18> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x15302bbe0 <col:21, col:25> 'int' '<'
|   | | |-ImplicitCastExpr 0x15302bbc8 <col:21> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x15302bb88 <col:21> 'int' lvalue Var 0x15302bae8 'i' 'int'
|   | | `-IntegerLiteral 0x15302bba8 <col:25> 'int' 4
|   | |-UnaryOperator 0x15302bc20 <col:28, col:30> 'int' prefix '++'
|   | | `-DeclRefExpr 0x15302bc00 <col:30> 'int' lvalue Var 0x15302bae8 'i' 'int'
|   | `-BinaryOperator 0x15302c078 <line:33:9, col:84> 'double' '='
|   |   |-ArraySubscriptExpr 0x15302bca8 <col:9, col:14> 'double' lvalue
|   |   | |-ImplicitCastExpr 0x15302bc78 <col:9> 'double *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x15302bc38 <col:9> 'double[4]' lvalue Var 0x15302ba50 'vec' 'double[4]'
|   |   | `-ImplicitCastExpr 0x15302bc90 <col:13> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x15302bc58 <col:13> 'int' lvalue Var 0x15302bae8 'i' 'int'
|   |   `-BinaryOperator 0x15302c058 <col:18, col:84> 'double' '+'
|   |     |-BinaryOperator 0x15302bf20 <col:18, col:63> 'double' '-'
|   |     | |-BinaryOperator 0x15302be70 <col:18, col:49> 'double' '-'
|   |     | | |-ImplicitCastExpr 0x15302be40 <col:18, col:28> 'double' <LValueToRValue>
|   |     | | | `-ArraySubscriptExpr 0x15302bd20 <col:18, col:28> 'double' lvalue
|   |     | | |   |-ImplicitCastExpr 0x15302bd08 <col:18> 'double *' <ArrayToPointerDecay>
|   |     | | |   | `-DeclRefExpr 0x15302bcc8 <col:18> 'double[13]' lvalue Var 0x153027538 'mat_freq' 'double[13]'
|   |     | | |   `-IntegerLiteral 0x15302bce8 <col:27> 'int' 0
|   |     | | `-ImplicitCastExpr 0x15302be58 <col:32, col:49> 'double' <LValueToRValue>
|   |     | |   `-ArraySubscriptExpr 0x15302be20 <col:32, col:49> 'double' lvalue
|   |     | |     |-ImplicitCastExpr 0x15302bdf0 <col:32> 'double *' <ArrayToPointerDecay>
|   |     | |     | `-DeclRefExpr 0x15302bd40 <col:32> 'double[13]' lvalue Var 0x153027538 'mat_freq' 'double[13]'
|   |     | |     `-ImplicitCastExpr 0x15302be08 <col:41, col:48> 'int' <LValueToRValue>
|   |     | |       `-ArraySubscriptExpr 0x15302bdd0 <col:41, col:48> 'const int' lvalue
|   |     | |         |-ImplicitCastExpr 0x15302bda0 <col:41> 'const int *' <LValueToRValue>
|   |     | |         | `-DeclRefExpr 0x15302bd60 <col:41> 'const int *' lvalue ParmVar 0x15300df60 'index' 'const int *'
|   |     | |         `-ImplicitCastExpr 0x15302bdb8 <col:47> 'int' <LValueToRValue>
|   |     | |           `-DeclRefExpr 0x15302bd80 <col:47> 'int' lvalue Var 0x15302bae8 'i' 'int'
|   |     | `-ImplicitCastExpr 0x15302bf08 <col:53, col:63> 'double' <LValueToRValue>
|   |     |   `-ArraySubscriptExpr 0x15302bee8 <col:53, col:63> 'double' lvalue
|   |     |     |-ImplicitCastExpr 0x15302bed0 <col:53> 'double *' <ArrayToPointerDecay>
|   |     |     | `-DeclRefExpr 0x15302be90 <col:53> 'double[13]' lvalue Var 0x15302a6b0 'vec_freq' 'double[13]'
|   |     |     `-IntegerLiteral 0x15302beb0 <col:62> 'int' 0
|   |     `-ImplicitCastExpr 0x15302c040 <col:67, col:84> 'double' <LValueToRValue>
|   |       `-ArraySubscriptExpr 0x15302c020 <col:67, col:84> 'double' lvalue
|   |         |-ImplicitCastExpr 0x15302bff0 <col:67> 'double *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x15302bf40 <col:67> 'double[13]' lvalue Var 0x15302a6b0 'vec_freq' 'double[13]'
|   |         `-ImplicitCastExpr 0x15302c008 <col:76, col:83> 'int' <LValueToRValue>
|   |           `-ArraySubscriptExpr 0x15302bfd0 <col:76, col:83> 'const int' lvalue
|   |             |-ImplicitCastExpr 0x15302bfa0 <col:76> 'const int *' <LValueToRValue>
|   |             | `-DeclRefExpr 0x15302bf60 <col:76> 'const int *' lvalue ParmVar 0x15300df60 'index' 'const int *'
|   |             `-ImplicitCastExpr 0x15302bfb8 <col:82> 'int' <LValueToRValue>
|   |               `-DeclRefExpr 0x15302bf80 <col:82> 'int' lvalue Var 0x15302bae8 'i' 'int'
|   `-ForStmt 0x15302c968 <line:35:5, line:40:5>
|     |-DeclStmt 0x15302c170 <line:35:10, col:19>
|     | `-VarDecl 0x15302c0e8 <col:10, col:18> col:14 used i 'int' cinit
|     |   `-IntegerLiteral 0x15302c150 <col:18> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x15302c1e0 <col:21, col:25> 'int' '<'
|     | |-ImplicitCastExpr 0x15302c1c8 <col:21> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x15302c188 <col:21> 'int' lvalue Var 0x15302c0e8 'i' 'int'
|     | `-IntegerLiteral 0x15302c1a8 <col:25> 'int' 4
|     |-UnaryOperator 0x15302c220 <col:28, col:30> 'int' prefix '++'
|     | `-DeclRefExpr 0x15302c200 <col:30> 'int' lvalue Var 0x15302c0e8 'i' 'int'
|     `-CompoundStmt 0x15302c940 <col:33, line:40:5>
|       |-DeclStmt 0x15302c2f0 <line:36:9, col:23>
|       | `-VarDecl 0x15302c250 <col:9, col:22> col:16 used res 'double' cinit
|       |   `-ImplicitCastExpr 0x15302c2d8 <col:22> 'double' <IntegralToFloating>
|       |     `-IntegerLiteral 0x15302c2b8 <col:22> 'int' 0
|       |-ForStmt 0x15302c6a0 <line:37:9, line:38:37>
|       | |-DeclStmt 0x15302c3a8 <line:37:14, col:23>
|       | | `-VarDecl 0x15302c320 <col:14, col:22> col:18 used j 'int' cinit
|       | |   `-IntegerLiteral 0x15302c388 <col:22> 'int' 0
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x15302c418 <col:25, col:29> 'int' '<'
|       | | |-ImplicitCastExpr 0x15302c400 <col:25> 'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x15302c3c0 <col:25> 'int' lvalue Var 0x15302c320 'j' 'int'
|       | | `-IntegerLiteral 0x15302c3e0 <col:29> 'int' 4
|       | |-UnaryOperator 0x15302c458 <col:32, col:34> 'int' prefix '++'
|       | | `-DeclRefExpr 0x15302c438 <col:34> 'int' lvalue Var 0x15302c320 'j' 'int'
|       | `-CompoundAssignOperator 0x15302c670 <line:38:13, col:37> 'double' '+=' ComputeLHSTy='double' ComputeResultTy='double'
|       |   |-DeclRefExpr 0x15302c470 <col:13> 'double' lvalue Var 0x15302c250 'res' 'double'
|       |   `-BinaryOperator 0x15302c650 <col:20, col:37> 'double' '*'
|       |     |-ImplicitCastExpr 0x15302c620 <col:20, col:28> 'double' <LValueToRValue>
|       |     | `-ArraySubscriptExpr 0x15302c570 <col:20, col:28> 'double' lvalue
|       |     |   |-ImplicitCastExpr 0x15302c540 <col:20, col:25> 'double *' <ArrayToPointerDecay>
|       |     |   | `-ArraySubscriptExpr 0x15302c500 <col:20, col:25> 'double[4]' lvalue
|       |     |   |   |-ImplicitCastExpr 0x15302c4d0 <col:20> 'double (*)[4]' <ArrayToPointerDecay>
|       |     |   |   | `-DeclRefExpr 0x15302c490 <col:20> 'double[4][4]' lvalue Var 0x15302b738 'mat' 'double[4][4]'
|       |     |   |   `-ImplicitCastExpr 0x15302c4e8 <col:24> 'int' <LValueToRValue>
|       |     |   |     `-DeclRefExpr 0x15302c4b0 <col:24> 'int' lvalue Var 0x15302c0e8 'i' 'int'
|       |     |   `-ImplicitCastExpr 0x15302c558 <col:27> 'int' <LValueToRValue>
|       |     |     `-DeclRefExpr 0x15302c520 <col:27> 'int' lvalue Var 0x15302c320 'j' 'int'
|       |     `-ImplicitCastExpr 0x15302c638 <col:32, col:37> 'double' <LValueToRValue>
|       |       `-ArraySubscriptExpr 0x15302c600 <col:32, col:37> 'double' lvalue
|       |         |-ImplicitCastExpr 0x15302c5d0 <col:32> 'double *' <ArrayToPointerDecay>
|       |         | `-DeclRefExpr 0x15302c590 <col:32> 'double[4]' lvalue Var 0x15302ba50 'vec' 'double[4]'
|       |         `-ImplicitCastExpr 0x15302c5e8 <col:36> 'int' <LValueToRValue>
|       |           `-DeclRefExpr 0x15302c5b0 <col:36> 'int' lvalue Var 0x15302c320 'j' 'int'
|       `-BinaryOperator 0x15302c920 <line:39:9, col:29> 'double' '='
|         |-ArraySubscriptExpr 0x15302c748 <col:9, col:13> 'double' lvalue
|         | |-ImplicitCastExpr 0x15302c718 <col:9> 'double *' <LValueToRValue>
|         | | `-DeclRefExpr 0x15302c6d8 <col:9> 'double *' lvalue ParmVar 0x15300ddd0 'mu' 'double *'
|         | `-ImplicitCastExpr 0x15302c730 <col:12> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x15302c6f8 <col:12> 'int' lvalue Var 0x15302c0e8 'i' 'int'
|         `-ImplicitCastExpr 0x15302c908 <col:17, col:29> 'double' <IntegralToFloating>
|           `-CallExpr 0x15302c8c0 <col:17, col:29> 'int'
|             |-ImplicitCastExpr 0x15302c8a8 <col:17> 'int (*)()' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x15302c848 <col:17> 'int ()' Function 0x15302c790 'FFMAX' 'int ()'
|             |-IntegerLiteral 0x15302c868 <col:23> 'int' 0
|             `-ImplicitCastExpr 0x15302c8f0 <col:26> 'double' <LValueToRValue>
|               `-DeclRefExpr 0x15302c888 <col:26> 'double' lvalue Var 0x15302c250 'res' 'double'
|-FunctionDecl 0x153028270 <line:12:5> col:5 implicit used memcpy 'void *(void *, const void *, unsigned long)' extern
| |-ParmVarDecl 0x153028370 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1530283d8 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x153028440 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x153028318 <<invalid sloc>> Implicit 882
`-FunctionDecl 0x1530286d8 <line:13:5> col:5 implicit used memset 'void *(void *, int, unsigned long)' extern
  |-ParmVarDecl 0x1530287d8 <<invalid sloc>> <invalid sloc> 'void *'
  |-ParmVarDecl 0x153028840 <<invalid sloc>> <invalid sloc> 'int'
  |-ParmVarDecl 0x1530288a8 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x153028780 <<invalid sloc>> Implicit 900
