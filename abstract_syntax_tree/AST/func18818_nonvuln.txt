TranslationUnitDecl 0x130855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1308564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x130855bd0 '__int128'
|-TypedefDecl 0x130856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x130855bf0 'unsigned __int128'
|-TypedefDecl 0x130918630 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x130918400 'struct __NSConstantString_tag'
|   `-Record 0x130856580 '__NSConstantString_tag'
|-TypedefDecl 0x130918698 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x130855d90 '__SVInt8_t'
|-TypedefDecl 0x130918700 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x130855db0 '__SVInt16_t'
|-TypedefDecl 0x130918768 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x130855dd0 '__SVInt32_t'
|-TypedefDecl 0x1309187d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x130855df0 '__SVInt64_t'
|-TypedefDecl 0x130918838 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x130855e10 '__SVUint8_t'
|-TypedefDecl 0x1309188a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x130855e30 '__SVUint16_t'
|-TypedefDecl 0x130918908 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x130855e50 '__SVUint32_t'
|-TypedefDecl 0x130918970 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x130855e70 '__SVUint64_t'
|-TypedefDecl 0x1309189d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x130855e90 '__SVFloat16_t'
|-TypedefDecl 0x130918a40 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x130855eb0 '__SVFloat32_t'
|-TypedefDecl 0x130918aa8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x130855ed0 '__SVFloat64_t'
|-TypedefDecl 0x130918b10 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x130855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x130918b78 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x130855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x130918be0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x130855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x130918c48 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x130855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x130918cb0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x130855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x130918d18 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x130855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x130918d80 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x130855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x130918de8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x130855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x130918e50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x130855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x130918eb8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x130856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x130918f20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x130856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x130918f88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x130856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x130918ff0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x130856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x130919058 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x130856090 '__clang_svint8x3_t'
|-TypedefDecl 0x1309190c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1308560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x130919128 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1308560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x130919190 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1308560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x1309191f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x130856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x130919260 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x130856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x1309192c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x130856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x130919330 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x130856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x130919398 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x130856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x130919c00 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1308561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x130919c68 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1308561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x130919cd0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1308561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x130919d38 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x130856210 '__clang_svint8x4_t'
|-TypedefDecl 0x130919da0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x130856230 '__clang_svint16x4_t'
|-TypedefDecl 0x130919e08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x130856250 '__clang_svint32x4_t'
|-TypedefDecl 0x130919e70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x130856270 '__clang_svint64x4_t'
|-TypedefDecl 0x130919ed8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x130856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x130919f40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1308562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x130919fa8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1308562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13091a010 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1308562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13091a078 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x130856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13091a0e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x130856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13091a148 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x130856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13091a1b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x130856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13091a218 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x130856390 '__SVBool_t'
|-TypedefDecl 0x13091a280 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1308563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13091a2e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1308563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13091a350 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1308563f0 '__SVCount_t'
|-TypedefDecl 0x13091a3f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13091a3b0 'char *'
|   `-BuiltinType 0x1308556b0 'char'
|-TypedefDecl 0x13091a468 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13091a3b0 'char *'
|   `-BuiltinType 0x1308556b0 'char'
|-FunctionDecl 0x13091a668 <dataset_diviso_filec/func18818_nonvuln.c:1:1, line:105:1> line:1:5 main 'int (int, char **)'
| |-ParmVarDecl 0x13091a4d8 <col:10, col:14> col:14 used argc 'int'
| |-ParmVarDecl 0x13091a588 <col:20, col:27> col:27 used argv 'char **'
| `-CompoundStmt 0x1310353a8 <col:33, line:105:1>
|   |-DeclStmt 0x13091a820 <line:4:5, col:18>
|   | `-VarDecl 0x13091a798 <col:5, col:17> col:9 used seedset 'int' cinit
|   |   `-IntegerLiteral 0x13091a800 <col:17> 'int' 0
|   |-DeclStmt 0x13091a8b8 <line:5:5, col:14>
|   | `-VarDecl 0x13091a850 <col:5, col:9> col:9 used argNb 'int'
|   |-DeclStmt 0x13091a988 <line:6:5, col:30>
|   | `-VarDecl 0x13091a8e8 <col:5, col:19> col:9 used nbTests 'int' cinit
|   |   `-RecoveryExpr 0x13091a968 <col:19> '<dependent type>' contains-errors lvalue
|   |-DeclStmt 0x13091aa40 <line:7:5, col:19>
|   | `-VarDecl 0x13091a9b8 <col:5, col:18> col:9 used testNb 'int' cinit
|   |   `-IntegerLiteral 0x13091aa20 <col:18> 'int' 0
|   |-DeclStmt 0x13091ab10 <line:8:5, col:44>
|   | `-VarDecl 0x13091aa70 <col:5, col:17> col:9 used proba 'int' cinit
|   |   `-RecoveryExpr 0x13091aaf0 <col:17> '<dependent type>' contains-errors lvalue
|   |-ForStmt 0x1310334e8 <line:12:5, line:81:5>
|   | |-BinaryOperator 0x13091abe0 <line:12:9, col:15> 'int' '='
|   | | |-DeclRefExpr 0x13091aba0 <col:9> 'int' lvalue Var 0x13091a850 'argNb' 'int'
|   | | `-IntegerLiteral 0x13091abc0 <col:15> 'int' 1
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x131030070 <col:18, col:24> 'int' '<'
|   | | |-ImplicitCastExpr 0x131030040 <col:18> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x131030000 <col:18> 'int' lvalue Var 0x13091a850 'argNb' 'int'
|   | | `-ImplicitCastExpr 0x131030058 <col:24> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x131030020 <col:24> 'int' lvalue ParmVar 0x13091a4d8 'argc' 'int'
|   | |-UnaryOperator 0x1310300b0 <col:30, col:35> 'int' postfix '++'
|   | | `-DeclRefExpr 0x131030090 <col:30> 'int' lvalue Var 0x13091a850 'argNb' 'int'
|   | `-CompoundStmt 0x1310334c0 <line:13:5, line:81:5>
|   |   |-DeclStmt 0x1310301f0 <line:14:9, col:37>
|   |   | `-VarDecl 0x1310300e0 <col:9, col:36> col:15 used argument 'char *' cinit
|   |   |   `-ImplicitCastExpr 0x1310301d8 <col:26, col:36> 'char *' <LValueToRValue>
|   |   |     `-ArraySubscriptExpr 0x1310301b8 <col:26, col:36> 'char *' lvalue
|   |   |       |-ImplicitCastExpr 0x131030188 <col:26> 'char **' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x131030148 <col:26> 'char **' lvalue ParmVar 0x13091a588 'argv' 'char **'
|   |   |       `-ImplicitCastExpr 0x1310301a0 <col:31> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x131030168 <col:31> 'int' lvalue Var 0x13091a850 'argNb' 'int'
|   |   |-IfStmt 0x131030260 <line:16:9, col:23>
|   |   | |-UnaryOperator 0x131030240 <col:12, col:13> 'int' prefix '!' cannot overflow
|   |   | | `-ImplicitCastExpr 0x131030228 <col:13> 'char *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x131030208 <col:13> 'char *' lvalue Var 0x1310300e0 'argument' 'char *'
|   |   | `-ContinueStmt 0x131030258 <col:23>
|   |   `-IfStmt 0x1310334a0 <line:19:9, line:80:9>
|   |     |-BinaryOperator 0x131030340 <line:19:13, col:26> 'int' '=='
|   |     | |-ImplicitCastExpr 0x131030328 <col:13, col:23> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x131030310 <col:13, col:23> 'char' <LValueToRValue>
|   |     | |   `-ArraySubscriptExpr 0x1310302d8 <col:13, col:23> 'char' lvalue
|   |     | |     |-ImplicitCastExpr 0x1310302c0 <col:13> 'char *' <LValueToRValue>
|   |     | |     | `-DeclRefExpr 0x131030280 <col:13> 'char *' lvalue Var 0x1310300e0 'argument' 'char *'
|   |     | |     `-IntegerLiteral 0x1310302a0 <col:22> 'int' 0
|   |     | `-CharacterLiteral 0x1310302f8 <col:26> 'int' 45
|   |     `-CompoundStmt 0x131033480 <line:20:9, line:80:9>
|   |       |-IfStmt 0x131030c28 <line:21:13, col:95>
|   |       | |-UnaryOperator 0x131030b48 <col:17, col:40> 'int' prefix '!' cannot overflow
|   |       | | `-CallExpr 0x131030ab8 <col:18, col:40> 'int'
|   |       | |   |-ImplicitCastExpr 0x131030aa0 <col:18> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|   |       | |   | `-DeclRefExpr 0x1310309a0 <col:18> 'int (const char *, const char *)' Function 0x1310307c0 'strcmp' 'int (const char *, const char *)'
|   |       | |   |-ImplicitCastExpr 0x131030b00 <col:25> 'const char *' <NoOp>
|   |       | |   | `-ImplicitCastExpr 0x131030ae8 <col:25> 'char *' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x1310309c0 <col:25> 'char *' lvalue Var 0x1310300e0 'argument' 'char *'
|   |       | |   `-ImplicitCastExpr 0x131030b30 <col:35> 'const char *' <NoOp>
|   |       | |     `-ImplicitCastExpr 0x131030b18 <col:35> 'char *' <ArrayToPointerDecay>
|   |       | |       `-StringLiteral 0x131030a20 <col:35> 'char[4]' lvalue "STR"
|   |       | `-CompoundStmt 0x131030c08 <col:43, col:95>
|   |       |   |-BinaryOperator 0x131030bc0 <col:58, col:66> 'int' '='
|   |       |   | |-DeclRefExpr 0x131030b80 <col:58> 'int' lvalue Var 0x13091a798 'seedset' 'int'
|   |       |   | `-IntegerLiteral 0x131030ba0 <col:66> 'int' 1
|   |       |   `-ContinueStmt 0x131030c00 <col:85>
|   |       `-WhileStmt 0x131033460 <line:23:13, line:78:13>
|   |         |-BinaryOperator 0x131030d10 <line:23:20, col:33> 'int' '!='
|   |         | |-ImplicitCastExpr 0x131030cf8 <col:20, col:30> 'int' <IntegralCast>
|   |         | | `-ImplicitCastExpr 0x131030ce0 <col:20, col:30> 'char' <LValueToRValue>
|   |         | |   `-ArraySubscriptExpr 0x131030ca0 <col:20, col:30> 'char' lvalue
|   |         | |     |-ImplicitCastExpr 0x131030c88 <col:20> 'char *' <LValueToRValue>
|   |         | |     | `-DeclRefExpr 0x131030c48 <col:20> 'char *' lvalue Var 0x1310300e0 'argument' 'char *'
|   |         | |     `-IntegerLiteral 0x131030c68 <col:29> 'int' 1
|   |         | `-IntegerLiteral 0x131030cc0 <col:33> 'int' 0
|   |         `-CompoundStmt 0x131033440 <line:24:13, line:78:13>
|   |           |-UnaryOperator 0x131030d50 <line:25:17, col:25> 'char *' postfix '++'
|   |           | `-DeclRefExpr 0x131030d30 <col:17> 'char *' lvalue Var 0x1310300e0 'argument' 'char *'
|   |           `-SwitchStmt 0x131030de8 <line:26:17, line:77:17>
|   |             |-ImplicitCastExpr 0x131030dd0 <line:26:24, col:25> 'int' <IntegralCast>
|   |             | `-ImplicitCastExpr 0x131030db8 <col:24, col:25> 'char' <LValueToRValue>
|   |             |   `-UnaryOperator 0x131030da0 <col:24, col:25> 'char' lvalue prefix '*' cannot overflow
|   |             |     `-ImplicitCastExpr 0x131030d88 <col:25> 'char *' <LValueToRValue>
|   |             |       `-DeclRefExpr 0x131030d68 <col:25> 'char *' lvalue Var 0x1310300e0 'argument' 'char *'
|   |             `-CompoundStmt 0x131033380 <line:27:17, line:77:17>
|   |               |-CaseStmt 0x131030e40 <line:28:17, line:29:38>
|   |               | |-ConstantExpr 0x131030e28 <line:28:22> 'int'
|   |               | | `-CharacterLiteral 0x131030e10 <col:22> 'int' 104
|   |               | `-ReturnStmt 0x131031e20 <line:29:21, col:38>
|   |               |   `-CallExpr 0x131031e00 <col:28, col:38> 'int'
|   |               |     `-ImplicitCastExpr 0x131030fd0 <col:28> 'int (*)()' <FunctionToPointerDecay>
|   |               |       `-DeclRefExpr 0x131030f80 <col:28> 'int ()' Function 0x131030ec8 'FUZ_usage' 'int ()'
|   |               |-CaseStmt 0x131031e60 <line:30:17, line:31:29>
|   |               | |-ConstantExpr 0x131031e48 <line:30:22> 'int'
|   |               | | `-CharacterLiteral 0x131031e30 <col:22> 'int' 118
|   |               | `-UnaryOperator 0x131031ea8 <line:31:21, col:29> 'char *' postfix '++'
|   |               |   `-DeclRefExpr 0x131031e88 <col:21> 'char *' lvalue Var 0x1310300e0 'argument' 'char *'
|   |               |-BreakStmt 0x131031ee0 <line:33:21>
|   |               |-CaseStmt 0x131031f18 <line:34:17, line:35:29>
|   |               | |-ConstantExpr 0x131031f00 <line:34:22> 'int'
|   |               | | `-CharacterLiteral 0x131031ee8 <col:22> 'int' 105
|   |               | `-UnaryOperator 0x131031f60 <line:35:21, col:29> 'char *' postfix '++'
|   |               |   `-DeclRefExpr 0x131031f40 <col:21> 'char *' lvalue Var 0x1310300e0 'argument' 'char *'
|   |               |-BinaryOperator 0x131031fb8 <line:36:21, col:29> 'int' contains-errors '='
|   |               | |-DeclRefExpr 0x131031f78 <col:21> 'int' contains-errors lvalue Var 0x13091a8e8 'nbTests' 'int'
|   |               | `-IntegerLiteral 0x131031f98 <col:29> 'int' 0
|   |               |-WhileStmt 0x131032380 <line:37:21, line:42:21>
|   |               | |-BinaryOperator 0x131032188 <line:37:28, col:63> 'int' '&&'
|   |               | | |-ParenExpr 0x131032090 <col:28, col:43> 'int'
|   |               | | | `-BinaryOperator 0x131032070 <col:29, col:40> 'int' '>='
|   |               | | |   |-ImplicitCastExpr 0x131032058 <col:29, col:30> 'int' <IntegralCast>
|   |               | | |   | `-ImplicitCastExpr 0x131032040 <col:29, col:30> 'char' <LValueToRValue>
|   |               | | |   |   `-UnaryOperator 0x131032010 <col:29, col:30> 'char' lvalue prefix '*' cannot overflow
|   |               | | |   |     `-ImplicitCastExpr 0x131031ff8 <col:30> 'char *' <LValueToRValue>
|   |               | | |   |       `-DeclRefExpr 0x131031fd8 <col:30> 'char *' lvalue Var 0x1310300e0 'argument' 'char *'
|   |               | | |   `-CharacterLiteral 0x131032028 <col:40> 'int' 48
|   |               | | `-ParenExpr 0x131032168 <col:48, col:63> 'int'
|   |               | |   `-BinaryOperator 0x131032148 <col:49, col:60> 'int' '<='
|   |               | |     |-ImplicitCastExpr 0x131032130 <col:49, col:50> 'int' <IntegralCast>
|   |               | |     | `-ImplicitCastExpr 0x131032118 <col:49, col:50> 'char' <LValueToRValue>
|   |               | |     |   `-UnaryOperator 0x1310320e8 <col:49, col:50> 'char' lvalue prefix '*' cannot overflow
|   |               | |     |     `-ImplicitCastExpr 0x1310320d0 <col:50> 'char *' <LValueToRValue>
|   |               | |     |       `-DeclRefExpr 0x1310320b0 <col:50> 'char *' lvalue Var 0x1310300e0 'argument' 'char *'
|   |               | |     `-CharacterLiteral 0x131032100 <col:60> 'int' 57
|   |               | `-CompoundStmt 0x131032358 <line:38:21, line:42:21>
|   |               |   |-CompoundAssignOperator 0x1310321e8 <line:39:25, col:36> 'int' contains-errors '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   |               |   | |-DeclRefExpr 0x1310321a8 <col:25> 'int' contains-errors lvalue Var 0x13091a8e8 'nbTests' 'int'
|   |               |   | `-IntegerLiteral 0x1310321c8 <col:36> 'int' 10
|   |               |   |-CompoundAssignOperator 0x1310322f0 <line:40:25, col:48> 'int' contains-errors '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |               |   | |-DeclRefExpr 0x131032218 <col:25> 'int' contains-errors lvalue Var 0x13091a8e8 'nbTests' 'int'
|   |               |   | `-BinaryOperator 0x1310322d0 <col:36, col:48> 'int' '-'
|   |               |   |   |-ImplicitCastExpr 0x1310322b8 <col:36, col:37> 'int' <IntegralCast>
|   |               |   |   | `-ImplicitCastExpr 0x1310322a0 <col:36, col:37> 'char' <LValueToRValue>
|   |               |   |   |   `-UnaryOperator 0x131032270 <col:36, col:37> 'char' lvalue prefix '*' cannot overflow
|   |               |   |   |     `-ImplicitCastExpr 0x131032258 <col:37> 'char *' <LValueToRValue>
|   |               |   |   |       `-DeclRefExpr 0x131032238 <col:37> 'char *' lvalue Var 0x1310300e0 'argument' 'char *'
|   |               |   |   `-CharacterLiteral 0x131032288 <col:48> 'int' 48
|   |               |   `-UnaryOperator 0x131032340 <line:41:25, col:33> 'char *' postfix '++'
|   |               |     `-DeclRefExpr 0x131032320 <col:25> 'char *' lvalue Var 0x1310300e0 'argument' 'char *'
|   |               |-BreakStmt 0x1310323a0 <line:43:21>
|   |               |-CaseStmt 0x1310323d8 <line:44:17, line:45:29>
|   |               | |-ConstantExpr 0x1310323c0 <line:44:22> 'int'
|   |               | | `-CharacterLiteral 0x1310323a8 <col:22> 'int' 115
|   |               | `-UnaryOperator 0x131032420 <line:45:21, col:29> 'char *' postfix '++'
|   |               |   `-DeclRefExpr 0x131032400 <col:21> 'char *' lvalue Var 0x1310300e0 'argument' 'char *'
|   |               |-BinaryOperator 0x131032498 <line:46:29, col:37> 'int' '='
|   |               | |-DeclRefExpr 0x131032458 <col:29> 'int' lvalue Var 0x13091a798 'seedset' 'int'
|   |               | `-IntegerLiteral 0x131032478 <col:37> 'int' 1
|   |               |-WhileStmt 0x1310327b0 <line:47:21, line:52:21>
|   |               | |-BinaryOperator 0x131032668 <line:47:28, col:63> 'int' '&&'
|   |               | | |-ParenExpr 0x131032570 <col:28, col:43> 'int'
|   |               | | | `-BinaryOperator 0x131032550 <col:29, col:40> 'int' '>='
|   |               | | |   |-ImplicitCastExpr 0x131032538 <col:29, col:30> 'int' <IntegralCast>
|   |               | | |   | `-ImplicitCastExpr 0x131032520 <col:29, col:30> 'char' <LValueToRValue>
|   |               | | |   |   `-UnaryOperator 0x1310324f0 <col:29, col:30> 'char' lvalue prefix '*' cannot overflow
|   |               | | |   |     `-ImplicitCastExpr 0x1310324d8 <col:30> 'char *' <LValueToRValue>
|   |               | | |   |       `-DeclRefExpr 0x1310324b8 <col:30> 'char *' lvalue Var 0x1310300e0 'argument' 'char *'
|   |               | | |   `-CharacterLiteral 0x131032508 <col:40> 'int' 48
|   |               | | `-ParenExpr 0x131032648 <col:48, col:63> 'int'
|   |               | |   `-BinaryOperator 0x131032628 <col:49, col:60> 'int' '<='
|   |               | |     |-ImplicitCastExpr 0x131032610 <col:49, col:50> 'int' <IntegralCast>
|   |               | |     | `-ImplicitCastExpr 0x1310325f8 <col:49, col:50> 'char' <LValueToRValue>
|   |               | |     |   `-UnaryOperator 0x1310325c8 <col:49, col:50> 'char' lvalue prefix '*' cannot overflow
|   |               | |     |     `-ImplicitCastExpr 0x1310325b0 <col:50> 'char *' <LValueToRValue>
|   |               | |     |       `-DeclRefExpr 0x131032590 <col:50> 'char *' lvalue Var 0x1310300e0 'argument' 'char *'
|   |               | |     `-CharacterLiteral 0x1310325e0 <col:60> 'int' 57
|   |               | `-CompoundStmt 0x131032798 <line:48:21, line:52:21>
|   |               |   `-UnaryOperator 0x131032780 <line:51:25, col:33> 'char *' postfix '++'
|   |               |     `-DeclRefExpr 0x131032760 <col:25> 'char *' lvalue Var 0x1310300e0 'argument' 'char *'
|   |               |-BreakStmt 0x1310327d0 <line:53:21>
|   |               |-CaseStmt 0x131032808 <line:54:17, line:55:29>
|   |               | |-ConstantExpr 0x1310327f0 <line:54:22> 'int'
|   |               | | `-CharacterLiteral 0x1310327d8 <col:22> 'int' 116
|   |               | `-UnaryOperator 0x131032850 <line:55:21, col:29> 'char *' postfix '++'
|   |               |   `-DeclRefExpr 0x131032830 <col:21> 'char *' lvalue Var 0x1310300e0 'argument' 'char *'
|   |               |-BinaryOperator 0x1310328a8 <line:56:21, col:28> 'int' '='
|   |               | |-DeclRefExpr 0x131032868 <col:21> 'int' lvalue Var 0x13091a9b8 'testNb' 'int'
|   |               | `-IntegerLiteral 0x131032888 <col:28> 'int' 0
|   |               |-WhileStmt 0x131032c70 <line:57:21, line:62:21>
|   |               | |-BinaryOperator 0x131032a78 <line:57:28, col:63> 'int' '&&'
|   |               | | |-ParenExpr 0x131032980 <col:28, col:43> 'int'
|   |               | | | `-BinaryOperator 0x131032960 <col:29, col:40> 'int' '>='
|   |               | | |   |-ImplicitCastExpr 0x131032948 <col:29, col:30> 'int' <IntegralCast>
|   |               | | |   | `-ImplicitCastExpr 0x131032930 <col:29, col:30> 'char' <LValueToRValue>
|   |               | | |   |   `-UnaryOperator 0x131032900 <col:29, col:30> 'char' lvalue prefix '*' cannot overflow
|   |               | | |   |     `-ImplicitCastExpr 0x1310328e8 <col:30> 'char *' <LValueToRValue>
|   |               | | |   |       `-DeclRefExpr 0x1310328c8 <col:30> 'char *' lvalue Var 0x1310300e0 'argument' 'char *'
|   |               | | |   `-CharacterLiteral 0x131032918 <col:40> 'int' 48
|   |               | | `-ParenExpr 0x131032a58 <col:48, col:63> 'int'
|   |               | |   `-BinaryOperator 0x131032a38 <col:49, col:60> 'int' '<='
|   |               | |     |-ImplicitCastExpr 0x131032a20 <col:49, col:50> 'int' <IntegralCast>
|   |               | |     | `-ImplicitCastExpr 0x131032a08 <col:49, col:50> 'char' <LValueToRValue>
|   |               | |     |   `-UnaryOperator 0x1310329d8 <col:49, col:50> 'char' lvalue prefix '*' cannot overflow
|   |               | |     |     `-ImplicitCastExpr 0x1310329c0 <col:50> 'char *' <LValueToRValue>
|   |               | |     |       `-DeclRefExpr 0x1310329a0 <col:50> 'char *' lvalue Var 0x1310300e0 'argument' 'char *'
|   |               | |     `-CharacterLiteral 0x1310329f0 <col:60> 'int' 57
|   |               | `-CompoundStmt 0x131032c48 <line:58:21, line:62:21>
|   |               |   |-CompoundAssignOperator 0x131032ad8 <line:59:25, col:35> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   |               |   | |-DeclRefExpr 0x131032a98 <col:25> 'int' lvalue Var 0x13091a9b8 'testNb' 'int'
|   |               |   | `-IntegerLiteral 0x131032ab8 <col:35> 'int' 10
|   |               |   |-CompoundAssignOperator 0x131032be0 <line:60:25, col:47> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |               |   | |-DeclRefExpr 0x131032b08 <col:25> 'int' lvalue Var 0x13091a9b8 'testNb' 'int'
|   |               |   | `-BinaryOperator 0x131032bc0 <col:35, col:47> 'int' '-'
|   |               |   |   |-ImplicitCastExpr 0x131032ba8 <col:35, col:36> 'int' <IntegralCast>
|   |               |   |   | `-ImplicitCastExpr 0x131032b90 <col:35, col:36> 'char' <LValueToRValue>
|   |               |   |   |   `-UnaryOperator 0x131032b60 <col:35, col:36> 'char' lvalue prefix '*' cannot overflow
|   |               |   |   |     `-ImplicitCastExpr 0x131032b48 <col:36> 'char *' <LValueToRValue>
|   |               |   |   |       `-DeclRefExpr 0x131032b28 <col:36> 'char *' lvalue Var 0x1310300e0 'argument' 'char *'
|   |               |   |   `-CharacterLiteral 0x131032b78 <col:47> 'int' 48
|   |               |   `-UnaryOperator 0x131032c30 <line:61:25, col:33> 'char *' postfix '++'
|   |               |     `-DeclRefExpr 0x131032c10 <col:25> 'char *' lvalue Var 0x1310300e0 'argument' 'char *'
|   |               |-BreakStmt 0x131032c90 <line:63:21>
|   |               |-CaseStmt 0x131032cc8 <line:64:17, line:65:29>
|   |               | |-ConstantExpr 0x131032cb0 <line:64:22> 'int'
|   |               | | `-CharacterLiteral 0x131032c98 <col:22> 'int' 112
|   |               | `-UnaryOperator 0x131032d10 <line:65:21, col:29> 'char *' postfix '++'
|   |               |   `-DeclRefExpr 0x131032cf0 <col:21> 'char *' lvalue Var 0x1310300e0 'argument' 'char *'
|   |               |-BinaryOperator 0x131032d68 <line:66:21, col:27> 'int' contains-errors '='
|   |               | |-DeclRefExpr 0x131032d28 <col:21> 'int' contains-errors lvalue Var 0x13091aa70 'proba' 'int'
|   |               | `-IntegerLiteral 0x131032d48 <col:27> 'int' 0
|   |               |-WhileStmt 0x131033140 <line:67:21, line:72:21>
|   |               | |-BinaryOperator 0x131032f48 <line:67:28, col:63> 'int' '&&'
|   |               | | |-ParenExpr 0x131032e50 <col:28, col:43> 'int'
|   |               | | | `-BinaryOperator 0x131032e30 <col:29, col:40> 'int' '>='
|   |               | | |   |-ImplicitCastExpr 0x131032e18 <col:29, col:30> 'int' <IntegralCast>
|   |               | | |   | `-ImplicitCastExpr 0x131032e00 <col:29, col:30> 'char' <LValueToRValue>
|   |               | | |   |   `-UnaryOperator 0x131032dc0 <col:29, col:30> 'char' lvalue prefix '*' cannot overflow
|   |               | | |   |     `-ImplicitCastExpr 0x131032da8 <col:30> 'char *' <LValueToRValue>
|   |               | | |   |       `-DeclRefExpr 0x131032d88 <col:30> 'char *' lvalue Var 0x1310300e0 'argument' 'char *'
|   |               | | |   `-CharacterLiteral 0x131032dd8 <col:40> 'int' 48
|   |               | | `-ParenExpr 0x131032f28 <col:48, col:63> 'int'
|   |               | |   `-BinaryOperator 0x131032f08 <col:49, col:60> 'int' '<='
|   |               | |     |-ImplicitCastExpr 0x131032ef0 <col:49, col:50> 'int' <IntegralCast>
|   |               | |     | `-ImplicitCastExpr 0x131032ed8 <col:49, col:50> 'char' <LValueToRValue>
|   |               | |     |   `-UnaryOperator 0x131032ea8 <col:49, col:50> 'char' lvalue prefix '*' cannot overflow
|   |               | |     |     `-ImplicitCastExpr 0x131032e90 <col:50> 'char *' <LValueToRValue>
|   |               | |     |       `-DeclRefExpr 0x131032e70 <col:50> 'char *' lvalue Var 0x1310300e0 'argument' 'char *'
|   |               | |     `-CharacterLiteral 0x131032ec0 <col:60> 'int' 57
|   |               | `-CompoundStmt 0x131033118 <line:68:21, line:72:21>
|   |               |   |-CompoundAssignOperator 0x131032fa8 <line:69:25, col:34> 'int' contains-errors '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   |               |   | |-DeclRefExpr 0x131032f68 <col:25> 'int' contains-errors lvalue Var 0x13091aa70 'proba' 'int'
|   |               |   | `-IntegerLiteral 0x131032f88 <col:34> 'int' 10
|   |               |   |-CompoundAssignOperator 0x1310330b0 <line:70:25, col:46> 'int' contains-errors '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |               |   | |-DeclRefExpr 0x131032fd8 <col:25> 'int' contains-errors lvalue Var 0x13091aa70 'proba' 'int'
|   |               |   | `-BinaryOperator 0x131033090 <col:34, col:46> 'int' '-'
|   |               |   |   |-ImplicitCastExpr 0x131033078 <col:34, col:35> 'int' <IntegralCast>
|   |               |   |   | `-ImplicitCastExpr 0x131033060 <col:34, col:35> 'char' <LValueToRValue>
|   |               |   |   |   `-UnaryOperator 0x131033030 <col:34, col:35> 'char' lvalue prefix '*' cannot overflow
|   |               |   |   |     `-ImplicitCastExpr 0x131033018 <col:35> 'char *' <LValueToRValue>
|   |               |   |   |       `-DeclRefExpr 0x131032ff8 <col:35> 'char *' lvalue Var 0x1310300e0 'argument' 'char *'
|   |               |   |   `-CharacterLiteral 0x131033048 <col:46> 'int' 48
|   |               |   `-UnaryOperator 0x131033100 <line:71:25, col:33> 'char *' postfix '++'
|   |               |     `-DeclRefExpr 0x1310330e0 <col:25> 'char *' lvalue Var 0x1310300e0 'argument' 'char *'
|   |               |-IfStmt 0x131033238 <line:73:21, col:40>
|   |               | |-BinaryOperator 0x1310331b8 <col:25, col:31> 'int' contains-errors '<'
|   |               | | |-ImplicitCastExpr 0x1310331a0 <col:25> 'int' contains-errors <LValueToRValue>
|   |               | | | `-DeclRefExpr 0x131033160 <col:25> 'int' contains-errors lvalue Var 0x13091aa70 'proba' 'int'
|   |               | | `-IntegerLiteral 0x131033180 <col:31> 'int' 0
|   |               | `-BinaryOperator 0x131033218 <col:34, col:40> 'int' contains-errors '='
|   |               |   |-DeclRefExpr 0x1310331d8 <col:34> 'int' contains-errors lvalue Var 0x13091aa70 'proba' 'int'
|   |               |   `-IntegerLiteral 0x1310331f8 <col:40> 'int' 0
|   |               |-IfStmt 0x131033330 <line:74:21, col:42>
|   |               | |-BinaryOperator 0x1310332b0 <col:25, col:31> 'int' contains-errors '>'
|   |               | | |-ImplicitCastExpr 0x131033298 <col:25> 'int' contains-errors <LValueToRValue>
|   |               | | | `-DeclRefExpr 0x131033258 <col:25> 'int' contains-errors lvalue Var 0x13091aa70 'proba' 'int'
|   |               | | `-IntegerLiteral 0x131033278 <col:31> 'int' 100
|   |               | `-BinaryOperator 0x131033310 <col:36, col:42> 'int' contains-errors '='
|   |               |   |-DeclRefExpr 0x1310332d0 <col:36> 'int' contains-errors lvalue Var 0x13091aa70 'proba' 'int'
|   |               |   `-IntegerLiteral 0x1310332f0 <col:42> 'int' 100
|   |               |-BreakStmt 0x131033350 <line:75:21>
|   |               `-DefaultStmt 0x131033360 <line:76:17, col:26>
|   |                 `-NullStmt 0x131033358 <col:26>
|   |-IfStmt 0x131034d80 <line:86:5, line:96:5>
|   | |-UnaryOperator 0x131033830 <line:86:9, col:10> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x131033818 <col:10> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1310337f8 <col:10> 'int' lvalue Var 0x13091a798 'seedset' 'int'
|   | `-CompoundStmt 0x131034d50 <line:87:5, line:96:5>
|   |   |-DeclStmt 0x131033a40 <line:88:9, col:33>
|   |   | `-VarDecl 0x1310338f0 <col:9, col:32> col:14 used userInput 'char[50]' cinit
|   |   |   `-InitListExpr 0x1310339d0 <col:30, col:32> 'char[50]'
|   |   |     |-array_filler: ImplicitValueInitExpr 0x131033a30 <<invalid sloc>> 'char'
|   |   |     `-ImplicitCastExpr 0x131033a10 <col:31> 'char' <IntegralCast>
|   |   |       `-IntegerLiteral 0x131033958 <col:31> 'int' 0
|   |   |-CallExpr 0x131033af8 <line:89:9, col:21> 'int'
|   |   | |-ImplicitCastExpr 0x131033ae0 <col:9> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x131033a58 <col:9> 'int (const char *, ...)' Function 0x131033560 'printf' 'int (const char *, ...)'
|   |   | `-ImplicitCastExpr 0x131033b38 <col:16> 'const char *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x131033b20 <col:16> 'char *' <ArrayToPointerDecay>
|   |   |     `-StringLiteral 0x131033a78 <col:16> 'char[4]' lvalue "STR"
|   |   |-CallExpr 0x131033cb0 <line:90:9, col:22> '<dependent type>' contains-errors
|   |   | |-DeclRefExpr 0x131033c30 <col:9> 'int ()' Function 0x131033b78 'fflush' 'int ()'
|   |   | `-RecoveryExpr 0x131033c90 <col:16> '<dependent type>' contains-errors lvalue
|   |   `-IfStmt 0x131034d30 <line:91:9, line:95:9>
|   |     |-RecoveryExpr 0x131034860 <line:91:14, col:67> '_Bool' contains-errors
|   |     `-CompoundStmt 0x131034d18 <line:92:9, line:95:9>
|   |       `-IfStmt 0x131034ce8 <line:93:13, line:94:18> has_else
|   |         |-RecoveryExpr 0x131034bb0 <line:93:18, col:53> '_Bool' contains-errors
|   |         |-CompoundStmt 0x131034bd0 <col:57, col:58>
|   |         `-NullStmt 0x131034ce0 <line:94:18>
|   |-IfStmt 0x131034f28 <line:98:5, col:64>
|   | |-RecoveryExpr 0x131034e00 <col:9, col:16> '_Bool' contains-errors
|   | `-CallExpr 0x131034eb0 <col:45, col:64> 'int' contains-errors
|   |   |-ImplicitCastExpr 0x131034e98 <col:45> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x131034e20 <col:45> 'int (const char *, ...)' Function 0x131033560 'printf' 'int (const char *, ...)'
|   |   |-ImplicitCastExpr 0x131034ef8 <col:52> 'const char *' <NoOp>
|   |   | `-ImplicitCastExpr 0x131034ee0 <col:52> 'char *' <ArrayToPointerDecay>
|   |   |   `-StringLiteral 0x131034e40 <col:52> 'char[4]' lvalue "STR"
|   |   `-ImplicitCastExpr 0x131034f10 <col:59> 'int' contains-errors <LValueToRValue>
|   |     `-DeclRefExpr 0x131034e60 <col:59> 'int' contains-errors lvalue Var 0x13091aa70 'proba' 'int'
|   |-CallExpr 0x131035060 <line:100:5, col:22> 'int'
|   | `-ImplicitCastExpr 0x131035048 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x131035028 <col:5> 'int ()' Function 0x131034f70 'FUZ_SecurityTest' 'int ()'
|   `-IfStmt 0x131035158 <line:102:5, col:29>
|     |-BinaryOperator 0x1310350d8 <col:9, col:18> 'int' contains-errors '<='
|     | |-ImplicitCastExpr 0x1310350c0 <col:9> 'int' contains-errors <LValueToRValue>
|     | | `-DeclRefExpr 0x131035080 <col:9> 'int' contains-errors lvalue Var 0x13091a8e8 'nbTests' 'int'
|     | `-IntegerLiteral 0x1310350a0 <col:18> 'int' 0
|     `-BinaryOperator 0x131035138 <col:21, col:29> 'int' contains-errors '='
|       |-DeclRefExpr 0x1310350f8 <col:21> 'int' contains-errors lvalue Var 0x13091a8e8 'nbTests' 'int'
|       `-IntegerLiteral 0x131035118 <col:29> 'int' 1
|-FunctionDecl 0x1310307c0 <line:21:18> col:18 implicit used strcmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x1310308c0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x131030928 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x131030868 <<invalid sloc>> Implicit 887
|-FunctionDecl 0x131033560 <line:84:5> col:5 implicit used printf 'int (const char *, ...)' extern
| |-ParmVarDecl 0x131033660 <<invalid sloc>> <invalid sloc> 'const char *'
| |-BuiltinAttr 0x131033608 <<invalid sloc>> Implicit 903
| `-FormatAttr 0x1310336d0 <col:5> Implicit printf 1 2
`-FunctionDecl 0x131034918 <line:93:18> col:18 implicit used sscanf 'int (const char *restrict, const char *restrict, ...)' extern
  |-ParmVarDecl 0x131034a18 <<invalid sloc>> <invalid sloc> 'const char *restrict'
  |-ParmVarDecl 0x131034a80 <<invalid sloc>> <invalid sloc> 'const char *restrict'
  |-BuiltinAttr 0x1310349c0 <<invalid sloc>> Implicit 913
  `-FormatAttr 0x131034af8 <col:18> Implicit scanf 2 3
