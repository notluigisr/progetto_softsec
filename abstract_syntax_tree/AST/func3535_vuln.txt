TranslationUnitDecl 0x147855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1478564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x147855bd0 '__int128'
|-TypedefDecl 0x147856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x147855bf0 'unsigned __int128'
|-TypedefDecl 0x147926230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x147926000 'struct __NSConstantString_tag'
|   `-Record 0x147856580 '__NSConstantString_tag'
|-TypedefDecl 0x147926298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x147855d90 '__SVInt8_t'
|-TypedefDecl 0x147926300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x147855db0 '__SVInt16_t'
|-TypedefDecl 0x147926368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x147855dd0 '__SVInt32_t'
|-TypedefDecl 0x1479263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x147855df0 '__SVInt64_t'
|-TypedefDecl 0x147926438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x147855e10 '__SVUint8_t'
|-TypedefDecl 0x1479264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x147855e30 '__SVUint16_t'
|-TypedefDecl 0x147926508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x147855e50 '__SVUint32_t'
|-TypedefDecl 0x147926570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x147855e70 '__SVUint64_t'
|-TypedefDecl 0x1479265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x147855e90 '__SVFloat16_t'
|-TypedefDecl 0x147926640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x147855eb0 '__SVFloat32_t'
|-TypedefDecl 0x1479266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x147855ed0 '__SVFloat64_t'
|-TypedefDecl 0x147926710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x147855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x147926778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x147855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1479267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x147855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x147926848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x147855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1479268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x147855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x147926918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x147855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x147926980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x147855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1479269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x147855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x147926a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x147855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x147926ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x147856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x147926b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x147856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x147926b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x147856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x147926bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x147856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x147926c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x147856090 '__clang_svint8x3_t'
|-TypedefDecl 0x147926cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1478560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x147926d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1478560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x147926d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1478560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x147926df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x147856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x147926e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x147856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x147926ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x147856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x147926f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x147856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x147926f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x147856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x147927800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1478561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x147927868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1478561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1479278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1478561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x147927938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x147856210 '__clang_svint8x4_t'
|-TypedefDecl 0x1479279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x147856230 '__clang_svint16x4_t'
|-TypedefDecl 0x147927a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x147856250 '__clang_svint32x4_t'
|-TypedefDecl 0x147927a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x147856270 '__clang_svint64x4_t'
|-TypedefDecl 0x147927ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x147856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x147927b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1478562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x147927ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1478562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x147927c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1478562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x147927c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x147856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x147927ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x147856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x147927d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x147856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x147927db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x147856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x147927e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x147856390 '__SVBool_t'
|-TypedefDecl 0x147927e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1478563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x147927ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1478563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x147927f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1478563f0 '__SVCount_t'
|-TypedefDecl 0x147927ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x147927fb0 'char *'
|   `-BuiltinType 0x1478556b0 'char'
|-TypedefDecl 0x147928068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x147927fb0 'char *'
|   `-BuiltinType 0x1478556b0 'char'
|-FunctionDecl 0x1479281a8 <dataset_diviso_filec/func3535_vuln.c:1:1, line:32:1> line:1:1 read_hwclock_file 'int (const char *)'
| |-ParmVarDecl 0x1479280d8 <col:19, col:31> col:31 used hwclock_file 'const char *'
| `-CompoundStmt 0x15000bb88 <line:2:1, line:32:1>
|   |-DeclStmt 0x1479283d8 <line:4:3, col:17>
|   | `-VarDecl 0x147928370 <col:3, col:16> col:8 used line 'char[256]'
|   |-DeclStmt 0x147928470 <line:5:3, col:8>
|   | `-VarDecl 0x147928408 <col:3, col:7> col:7 used i 'int'
|   |-IfStmt 0x1479285b0 <line:7:3, line:8:5>
|   | |-BinaryOperator 0x147928580 <line:7:7, col:39> 'int' '||'
|   | | |-UnaryOperator 0x1479284c0 <col:7, col:8> 'int' prefix '!' cannot overflow
|   | | | `-ImplicitCastExpr 0x1479284a8 <col:8> 'const char *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x147928488 <col:8> 'const char *' lvalue ParmVar 0x1479280d8 'hwclock_file' 'const char *'
|   | | `-UnaryOperator 0x147928568 <col:24, col:39> 'int' prefix '!' cannot overflow
|   | |   `-ImplicitCastExpr 0x147928550 <col:25, col:39> 'char' <LValueToRValue>
|   | |     `-ArraySubscriptExpr 0x147928530 <col:25, col:39> 'const char' lvalue
|   | |       |-ImplicitCastExpr 0x147928518 <col:25> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x1479284d8 <col:25> 'const char *' lvalue ParmVar 0x1479280d8 'hwclock_file' 'const char *'
|   | |       `-IntegerLiteral 0x1479284f8 <col:38> 'int' 0
|   | `-ReturnStmt 0x1479285a0 <line:8:5>
|   |-IfStmt 0x150009b98 <line:11:3, line:15:3>
|   | |-UnaryOperator 0x1500092b0 <line:11:7, col:8> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x150009298 <col:8> '<dependent type>' contains-errors <LValueToRValue>
|   | |   `-RecoveryExpr 0x150009278 <col:8> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x150009b78 <col:12, line:15:3>
|   |   |-CallExpr 0x150009b28 <line:12:5, line:13:38> '<dependent type>' contains-errors
|   |   | |-DeclRefExpr 0x1500093a8 <line:12:5> 'int ()' Function 0x1500092f0 'LOG' 'int ()'
|   |   | |-RecoveryExpr 0x150009aa8 <col:9> '<dependent type>' contains-errors lvalue
|   |   | |-StringLiteral 0x1500093e0 <col:20> 'char[4]' lvalue "STR"
|   |   | |-DeclRefExpr 0x150009400 <line:13:9> 'const char *' lvalue ParmVar 0x1479280d8 'hwclock_file' 'const char *'
|   |   | `-CallExpr 0x150009b00 <col:23, col:37> '<dependent type>' contains-errors
|   |   |   |-DeclRefExpr 0x1500099f0 <col:23> 'char *(int)' Function 0x150009880 'strerror' 'char *(int)'
|   |   |   `-RecoveryExpr 0x150009ac8 <col:32> '<dependent type>' contains-errors lvalue
|   |   `-ReturnStmt 0x150009b68 <line:14:5>
|   |-ForStmt 0x150009f60 <line:18:3, line:21:3>
|   | |-BinaryOperator 0x150009bf8 <line:18:8, col:12> 'int' '='
|   | | |-DeclRefExpr 0x150009bb8 <col:8> 'int' lvalue Var 0x147928408 'i' 'int'
|   | | `-IntegerLiteral 0x150009bd8 <col:12> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x150009c70 <col:15, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x150009c58 <col:15> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x150009c18 <col:15> 'int' lvalue Var 0x147928408 'i' 'int'
|   | | `-IntegerLiteral 0x150009c38 <col:19> 'int' 3
|   | |-UnaryOperator 0x150009cb0 <col:22, col:23> 'int' postfix '++'
|   | | `-DeclRefExpr 0x150009c90 <col:22> 'int' lvalue Var 0x147928408 'i' 'int'
|   | `-CompoundStmt 0x150009f48 <col:27, line:21:3>
|   |   `-IfStmt 0x150009f28 <line:19:5, line:20:7>
|   |     |-UnaryOperator 0x150009f08 <line:19:9, col:38> '<dependent type>' contains-errors prefix '!' cannot overflow
|   |     | `-CallExpr 0x150009ed0 <col:10, col:38> '<dependent type>' contains-errors
|   |     |   |-DeclRefExpr 0x150009da8 <col:10> 'int ()' Function 0x150009cf0 'fgets' 'int ()'
|   |     |   |-DeclRefExpr 0x150009dc8 <col:16> 'char[256]' lvalue Var 0x147928370 'line' 'char[256]'
|   |     |   |-UnaryExprOrTypeTraitExpr 0x150009e28 <col:22, col:33> 'unsigned long' sizeof
|   |     |   | `-ParenExpr 0x150009e08 <col:28, col:33> 'char[256]' lvalue
|   |     |   |   `-DeclRefExpr 0x150009de8 <col:29> 'char[256]' lvalue Var 0x147928370 'line' 'char[256]' non_odr_use_unevaluated
|   |     |   `-RecoveryExpr 0x150009eb0 <col:36> '<dependent type>' contains-errors lvalue
|   |     `-BreakStmt 0x150009f20 <line:20:7>
|   |-CallExpr 0x15000a0f8 <line:23:3, col:12> '<dependent type>' contains-errors
|   | |-DeclRefExpr 0x15000a078 <col:3> 'int ()' Function 0x150009fc0 'fclose' 'int ()'
|   | `-RecoveryExpr 0x15000a0d8 <col:10> '<dependent type>' contains-errors lvalue
|   `-IfStmt 0x15000bb58 <line:25:3, line:31:3> has_else
|     |-BinaryOperator 0x15000b810 <line:25:7, col:40> 'int' '&&'
|     | |-BinaryOperator 0x15000a178 <col:7, col:12> 'int' '=='
|     | | |-ImplicitCastExpr 0x15000a160 <col:7> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x15000a120 <col:7> 'int' lvalue Var 0x147928408 'i' 'int'
|     | | `-IntegerLiteral 0x15000a140 <col:12> 'int' 3
|     | `-UnaryOperator 0x15000b7f8 <col:17, col:40> 'int' prefix '!' cannot overflow
|     |   `-CallExpr 0x15000b748 <col:18, col:40> 'int'
|     |     |-ImplicitCastExpr 0x15000b730 <col:18> 'int (*)(const char *, const char *, unsigned long)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x15000b650 <col:18> 'int (const char *, const char *, unsigned long)' Function 0x15000b400 'strncmp' 'int (const char *, const char *, unsigned long)'
|     |     |-ImplicitCastExpr 0x15000b798 <col:26> 'const char *' <NoOp>
|     |     | `-ImplicitCastExpr 0x15000b780 <col:26> 'char *' <ArrayToPointerDecay>
|     |     |   `-DeclRefExpr 0x15000b670 <col:26> 'char[256]' lvalue Var 0x147928370 'line' 'char[256]'
|     |     |-ImplicitCastExpr 0x15000b7c8 <col:32> 'const char *' <NoOp>
|     |     | `-ImplicitCastExpr 0x15000b7b0 <col:32> 'char *' <ArrayToPointerDecay>
|     |     |   `-StringLiteral 0x15000b690 <col:32> 'char[4]' lvalue "STR"
|     |     `-ImplicitCastExpr 0x15000b7e0 <col:39> 'unsigned long' <IntegralCast>
|     |       `-IntegerLiteral 0x15000b6b0 <col:39> 'int' 5
|     |-CompoundStmt 0x15000b850 <col:43, line:27:3>
|     `-IfStmt 0x15000bb28 <col:10, line:31:3> has_else
|       |-BinaryOperator 0x15000ba68 <line:27:14, col:47> 'int' '&&'
|       | |-BinaryOperator 0x15000b8b8 <col:14, col:19> 'int' '=='
|       | | |-ImplicitCastExpr 0x15000b8a0 <col:14> 'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x15000b860 <col:14> 'int' lvalue Var 0x147928408 'i' 'int'
|       | | `-IntegerLiteral 0x15000b880 <col:19> 'int' 3
|       | `-UnaryOperator 0x15000ba50 <col:24, col:47> 'int' prefix '!' cannot overflow
|       |   `-CallExpr 0x15000b9a0 <col:25, col:47> 'int'
|       |     |-ImplicitCastExpr 0x15000b988 <col:25> 'int (*)(const char *, const char *, unsigned long)' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x15000b8d8 <col:25> 'int (const char *, const char *, unsigned long)' Function 0x15000b400 'strncmp' 'int (const char *, const char *, unsigned long)'
|       |     |-ImplicitCastExpr 0x15000b9f0 <col:33> 'const char *' <NoOp>
|       |     | `-ImplicitCastExpr 0x15000b9d8 <col:33> 'char *' <ArrayToPointerDecay>
|       |     |   `-DeclRefExpr 0x15000b8f8 <col:33> 'char[256]' lvalue Var 0x147928370 'line' 'char[256]'
|       |     |-ImplicitCastExpr 0x15000ba20 <col:39> 'const char *' <NoOp>
|       |     | `-ImplicitCastExpr 0x15000ba08 <col:39> 'char *' <ArrayToPointerDecay>
|       |     |   `-StringLiteral 0x15000b918 <col:39> 'char[4]' lvalue "STR"
|       |     `-ImplicitCastExpr 0x15000ba38 <col:46> 'unsigned long' <IntegralCast>
|       |       `-IntegerLiteral 0x15000b938 <col:46> 'int' 3
|       |-CompoundStmt 0x15000baa8 <col:50, line:29:3>
|       `-CompoundStmt 0x15000bb18 <col:10, line:31:3>
|-FunctionDecl 0x150009880 <line:13:23> col:23 implicit used strerror 'char *(int)' extern
| |-ParmVarDecl 0x150009980 <<invalid sloc>> <invalid sloc> 'int'
| `-BuiltinAttr 0x150009928 <<invalid sloc>> Implicit 901
`-FunctionDecl 0x15000b400 <line:25:18> col:18 implicit used strncmp 'int (const char *, const char *, unsigned long)' extern
  |-ParmVarDecl 0x15000b500 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x15000b568 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x15000b5d0 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x15000b4a8 <<invalid sloc>> Implicit 888
