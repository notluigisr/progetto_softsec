TranslationUnitDecl 0x12e055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x12e0564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x12e055bd0 '__int128'
|-TypedefDecl 0x12e056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x12e055bf0 'unsigned __int128'
|-TypedefDecl 0x12e126a30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12e126800 'struct __NSConstantString_tag'
|   `-Record 0x12e056580 '__NSConstantString_tag'
|-TypedefDecl 0x12e126a98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x12e055d90 '__SVInt8_t'
|-TypedefDecl 0x12e126b00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x12e055db0 '__SVInt16_t'
|-TypedefDecl 0x12e126b68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x12e055dd0 '__SVInt32_t'
|-TypedefDecl 0x12e126bd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x12e055df0 '__SVInt64_t'
|-TypedefDecl 0x12e126c38 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x12e055e10 '__SVUint8_t'
|-TypedefDecl 0x12e126ca0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x12e055e30 '__SVUint16_t'
|-TypedefDecl 0x12e126d08 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x12e055e50 '__SVUint32_t'
|-TypedefDecl 0x12e126d70 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x12e055e70 '__SVUint64_t'
|-TypedefDecl 0x12e126dd8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x12e055e90 '__SVFloat16_t'
|-TypedefDecl 0x12e126e40 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x12e055eb0 '__SVFloat32_t'
|-TypedefDecl 0x12e126ea8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x12e055ed0 '__SVFloat64_t'
|-TypedefDecl 0x12e126f10 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x12e055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12e126f78 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x12e055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12e126fe0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x12e055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12e127048 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x12e055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12e1270b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x12e055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12e127118 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x12e055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12e127180 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x12e055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12e1271e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x12e055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12e127250 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x12e055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12e1272b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x12e056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12e127320 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x12e056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12e127388 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x12e056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12e1273f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x12e056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12e127458 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x12e056090 '__clang_svint8x3_t'
|-TypedefDecl 0x12e1274c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x12e0560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12e127528 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x12e0560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12e127590 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x12e0560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12e1275f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x12e056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12e127660 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x12e056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12e1276c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x12e056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12e127730 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x12e056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12e127798 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x12e056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12e128000 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x12e0561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12e128068 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x12e0561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12e1280d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x12e0561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12e128138 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x12e056210 '__clang_svint8x4_t'
|-TypedefDecl 0x12e1281a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x12e056230 '__clang_svint16x4_t'
|-TypedefDecl 0x12e128208 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x12e056250 '__clang_svint32x4_t'
|-TypedefDecl 0x12e128270 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x12e056270 '__clang_svint64x4_t'
|-TypedefDecl 0x12e1282d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x12e056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12e128340 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x12e0562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12e1283a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x12e0562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12e128410 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x12e0562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12e128478 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x12e056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12e1284e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x12e056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12e128548 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x12e056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12e1285b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x12e056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12e128618 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x12e056390 '__SVBool_t'
|-TypedefDecl 0x12e128680 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x12e0563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12e1286e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x12e0563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12e128750 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x12e0563f0 '__SVCount_t'
|-TypedefDecl 0x12e1287f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12e1287b0 'char *'
|   `-BuiltinType 0x12e0556b0 'char'
|-TypedefDecl 0x12e128868 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12e1287b0 'char *'
|   `-BuiltinType 0x12e0556b0 'char'
`-FunctionDecl 0x12e128b68 <dataset_diviso_filec/func10716_vuln.c:1:1, line:79:1> line:1:1 invalid mobility_opt_print 'int (int *, const char *, const unsigned int)'
  |-ParmVarDecl 0x12e128928 <col:20, col:40> col:40 invalid ndo 'int *'
  |-ParmVarDecl 0x12e1289a8 <line:2:20, col:34> col:34 used bp 'const char *'
  |-ParmVarDecl 0x12e128a28 <col:38, col:53> col:53 used len 'const unsigned int'
  `-CompoundStmt 0x12e144270 <line:3:1, line:79:1>
    |-DeclStmt 0x12e128d40 <line:4:2, col:20>
    | |-VarDecl 0x12e128c40 <col:2, col:11> col:11 used i 'unsigned int'
    | `-VarDecl 0x12e128cc0 <col:2, col:14> col:14 used optlen 'unsigned int'
    |-ForStmt 0x12e1441b8 <line:6:2, line:74:2>
    | |-BinaryOperator 0x12e128db0 <line:6:7, col:11> 'unsigned int' '='
    | | |-DeclRefExpr 0x12e128d58 <col:7> 'unsigned int' lvalue Var 0x12e128c40 'i' 'unsigned int'
    | | `-ImplicitCastExpr 0x12e128d98 <col:11> 'unsigned int' <IntegralCast>
    | |   `-IntegerLiteral 0x12e128d78 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x12e128e40 <col:14, col:18> 'int' '<'
    | | |-ImplicitCastExpr 0x12e128e10 <col:14> 'unsigned int' <LValueToRValue>
    | | | `-DeclRefExpr 0x12e128dd0 <col:14> 'unsigned int' lvalue Var 0x12e128c40 'i' 'unsigned int'
    | | `-ImplicitCastExpr 0x12e128e28 <col:18> 'unsigned int' <LValueToRValue>
    | |   `-DeclRefExpr 0x12e128df0 <col:18> 'const unsigned int' lvalue ParmVar 0x12e128a28 'len' 'const unsigned int'
    | |-CompoundAssignOperator 0x12e128eb8 <col:23, col:28> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    | | |-DeclRefExpr 0x12e128e60 <col:23> 'unsigned int' lvalue Var 0x12e128c40 'i' 'unsigned int'
    | | `-ImplicitCastExpr 0x12e128ea0 <col:28> 'unsigned int' <LValueToRValue>
    | |   `-DeclRefExpr 0x12e128e80 <col:28> 'unsigned int' lvalue Var 0x12e128cc0 'optlen' 'unsigned int'
    | `-CompoundStmt 0x12e144180 <col:36, line:74:2>
    |   |-CallExpr 0x12e1421b8 <line:7:3, col:18> 'int'
    |   | |-ImplicitCastExpr 0x12e1421a0 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x12e1420b8 <col:3> 'int ()' Function 0x12e142000 'ND_TCHECK' 'int ()'
    |   | `-ImplicitCastExpr 0x12e1421f8 <col:13, col:17> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x12e1421e0 <col:13, col:17> 'char' <LValueToRValue>
    |   |     `-ArraySubscriptExpr 0x12e142148 <col:13, col:17> 'const char' lvalue
    |   |       |-ImplicitCastExpr 0x12e142118 <col:13> 'const char *' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x12e1420d8 <col:13> 'const char *' lvalue ParmVar 0x12e1289a8 'bp' 'const char *'
    |   |       `-ImplicitCastExpr 0x12e142130 <col:16> 'unsigned int' <LValueToRValue>
    |   |         `-DeclRefExpr 0x12e1420f8 <col:16> 'unsigned int' lvalue Var 0x12e128c40 'i' 'unsigned int'
    |   |-IfStmt 0x12e142910 <line:8:3, line:17:3> has_else
    |   | |-BinaryOperator 0x12e142398 <line:8:7, col:16> 'int' contains-errors '=='
    |   | | |-ArraySubscriptExpr 0x12e142358 <col:7, col:11> 'const char' lvalue
    |   | | | |-ImplicitCastExpr 0x12e142328 <col:7> 'const char *' <LValueToRValue>
    |   | | | | `-DeclRefExpr 0x12e142210 <col:7> 'const char *' lvalue ParmVar 0x12e1289a8 'bp' 'const char *'
    |   | | | `-ImplicitCastExpr 0x12e142340 <col:10> 'unsigned int' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x12e142230 <col:10> 'unsigned int' lvalue Var 0x12e128c40 'i' 'unsigned int'
    |   | | `-RecoveryExpr 0x12e142378 <col:16> '<dependent type>' contains-errors lvalue
    |   | |-BinaryOperator 0x12e142410 <line:9:4, col:13> 'unsigned int' '='
    |   | | |-DeclRefExpr 0x12e1423b8 <col:4> 'unsigned int' lvalue Var 0x12e128cc0 'optlen' 'unsigned int'
    |   | | `-ImplicitCastExpr 0x12e1423f8 <col:13> 'unsigned int' <IntegralCast>
    |   | |   `-IntegerLiteral 0x12e1423d8 <col:13> 'int' 1
    |   | `-CompoundStmt 0x12e1428f8 <line:10:8, line:17:3>
    |   |   `-IfStmt 0x12e1428c8 <line:11:4, line:16:10> has_else
    |   |     |-BinaryOperator 0x12e1424f8 <line:11:8, col:16> 'int' '<'
    |   |     | |-BinaryOperator 0x12e1424a0 <col:8, col:12> 'unsigned int' '+'
    |   |     | | |-ImplicitCastExpr 0x12e142470 <col:8> 'unsigned int' <LValueToRValue>
    |   |     | | | `-DeclRefExpr 0x12e142430 <col:8> 'unsigned int' lvalue Var 0x12e128c40 'i' 'unsigned int'
    |   |     | | `-ImplicitCastExpr 0x12e142488 <col:12> 'unsigned int' <IntegralCast>
    |   |     | |   `-IntegerLiteral 0x12e142450 <col:12> 'int' 1
    |   |     | `-ImplicitCastExpr 0x12e1424e0 <col:16> 'unsigned int' <LValueToRValue>
    |   |     |   `-DeclRefExpr 0x12e1424c0 <col:16> 'const unsigned int' lvalue ParmVar 0x12e128a28 'len' 'const unsigned int'
    |   |     |-CompoundStmt 0x12e142840 <col:21, line:14:4>
    |   |     | |-CallExpr 0x12e142638 <line:12:5, col:24> 'int'
    |   |     | | |-ImplicitCastExpr 0x12e142620 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |   |     | | | `-DeclRefExpr 0x12e142518 <col:5> 'int ()' Function 0x12e142000 'ND_TCHECK' 'int ()'
    |   |     | | `-ImplicitCastExpr 0x12e142678 <col:15, col:23> 'int' <IntegralCast>
    |   |     | |   `-ImplicitCastExpr 0x12e142660 <col:15, col:23> 'char' <LValueToRValue>
    |   |     | |     `-ArraySubscriptExpr 0x12e142600 <col:15, col:23> 'const char' lvalue
    |   |     | |       |-ImplicitCastExpr 0x12e1425e8 <col:15> 'const char *' <LValueToRValue>
    |   |     | |       | `-DeclRefExpr 0x12e142538 <col:15> 'const char *' lvalue ParmVar 0x12e1289a8 'bp' 'const char *'
    |   |     | |       `-BinaryOperator 0x12e1425c8 <col:18, col:22> 'unsigned int' '+'
    |   |     | |         |-ImplicitCastExpr 0x12e142598 <col:18> 'unsigned int' <LValueToRValue>
    |   |     | |         | `-DeclRefExpr 0x12e142558 <col:18> 'unsigned int' lvalue Var 0x12e128c40 'i' 'unsigned int'
    |   |     | |         `-ImplicitCastExpr 0x12e1425b0 <col:22> 'unsigned int' <IntegralCast>
    |   |     | |           `-IntegerLiteral 0x12e142578 <col:22> 'int' 1
    |   |     | `-BinaryOperator 0x12e142820 <line:13:5, col:26> 'unsigned int' '='
    |   |     |   |-DeclRefExpr 0x12e142690 <col:5> 'unsigned int' lvalue Var 0x12e128cc0 'optlen' 'unsigned int'
    |   |     |   `-ImplicitCastExpr 0x12e142808 <col:14, col:26> 'unsigned int' <IntegralCast>
    |   |     |     `-BinaryOperator 0x12e1427e8 <col:14, col:26> 'int' '+'
    |   |     |       |-ImplicitCastExpr 0x12e1427d0 <col:14, col:22> 'int' <IntegralCast>
    |   |     |       | `-ImplicitCastExpr 0x12e1427b8 <col:14, col:22> 'char' <LValueToRValue>
    |   |     |       |   `-ArraySubscriptExpr 0x12e142778 <col:14, col:22> 'const char' lvalue
    |   |     |       |     |-ImplicitCastExpr 0x12e142760 <col:14> 'const char *' <LValueToRValue>
    |   |     |       |     | `-DeclRefExpr 0x12e1426b0 <col:14> 'const char *' lvalue ParmVar 0x12e1289a8 'bp' 'const char *'
    |   |     |       |     `-BinaryOperator 0x12e142740 <col:17, col:21> 'unsigned int' '+'
    |   |     |       |       |-ImplicitCastExpr 0x12e142710 <col:17> 'unsigned int' <LValueToRValue>
    |   |     |       |       | `-DeclRefExpr 0x12e1426d0 <col:17> 'unsigned int' lvalue Var 0x12e128c40 'i' 'unsigned int'
    |   |     |       |       `-ImplicitCastExpr 0x12e142728 <col:21> 'unsigned int' <IntegralCast>
    |   |     |       |         `-IntegerLiteral 0x12e1426f0 <col:21> 'int' 1
    |   |     |       `-IntegerLiteral 0x12e142798 <col:26> 'int' 2
    |   |     `-GotoStmt 0x12e1428b0 <line:16:5, col:10> 'trunc' 0x12e142860
    |   |-IfStmt 0x12e142a40 <line:18:3, line:19:9>
    |   | |-BinaryOperator 0x12e142a08 <line:18:7, col:20> 'int' '>'
    |   | | |-BinaryOperator 0x12e1429b0 <col:7, col:11> 'unsigned int' '+'
    |   | | | |-ImplicitCastExpr 0x12e142980 <col:7> 'unsigned int' <LValueToRValue>
    |   | | | | `-DeclRefExpr 0x12e142940 <col:7> 'unsigned int' lvalue Var 0x12e128c40 'i' 'unsigned int'
    |   | | | `-ImplicitCastExpr 0x12e142998 <col:11> 'unsigned int' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x12e142960 <col:11> 'unsigned int' lvalue Var 0x12e128cc0 'optlen' 'unsigned int'
    |   | | `-ImplicitCastExpr 0x12e1429f0 <col:20> 'unsigned int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x12e1429d0 <col:20> 'const unsigned int' lvalue ParmVar 0x12e128a28 'len' 'const unsigned int'
    |   | `-GotoStmt 0x12e142a28 <line:19:4, col:9> 'trunc' 0x12e142860
    |   |-CallExpr 0x12e142b80 <line:20:3, col:27> 'int'
    |   | |-ImplicitCastExpr 0x12e142b68 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x12e142a60 <col:3> 'int ()' Function 0x12e142000 'ND_TCHECK' 'int ()'
    |   | `-ImplicitCastExpr 0x12e142bc0 <col:13, col:26> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x12e142ba8 <col:13, col:26> 'char' <LValueToRValue>
    |   |     `-ArraySubscriptExpr 0x12e142b48 <col:13, col:26> 'const char' lvalue
    |   |       |-ImplicitCastExpr 0x12e142b30 <col:13> 'const char *' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x12e142a80 <col:13> 'const char *' lvalue ParmVar 0x12e1289a8 'bp' 'const char *'
    |   |       `-BinaryOperator 0x12e142b10 <col:16, col:20> 'unsigned int' '+'
    |   |         |-ImplicitCastExpr 0x12e142ae0 <col:16> 'unsigned int' <LValueToRValue>
    |   |         | `-DeclRefExpr 0x12e142aa0 <col:16> 'unsigned int' lvalue Var 0x12e128c40 'i' 'unsigned int'
    |   |         `-ImplicitCastExpr 0x12e142af8 <col:20> 'unsigned int' <LValueToRValue>
    |   |           `-DeclRefExpr 0x12e142ac0 <col:20> 'unsigned int' lvalue Var 0x12e128cc0 'optlen' 'unsigned int'
    |   `-SwitchStmt 0x12e142c98 <line:22:3, line:73:3>
    |     |-ImplicitCastExpr 0x12e142c80 <line:22:11, col:15> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x12e142c68 <col:11, col:15> 'char' <LValueToRValue>
    |     |   `-ArraySubscriptExpr 0x12e142c48 <col:11, col:15> 'const char' lvalue
    |     |     |-ImplicitCastExpr 0x12e142c18 <col:11> 'const char *' <LValueToRValue>
    |     |     | `-DeclRefExpr 0x12e142bd8 <col:11> 'const char *' lvalue ParmVar 0x12e1289a8 'bp' 'const char *'
    |     |     `-ImplicitCastExpr 0x12e142c30 <col:14> 'unsigned int' <LValueToRValue>
    |     |       `-DeclRefExpr 0x12e142bf8 <col:14> 'unsigned int' lvalue Var 0x12e128c40 'i' 'unsigned int'
    |     `-CompoundStmt 0x12e1440c8 <col:18, line:73:3>
    |       |-CallExpr 0x12e142ea0 <line:24:4, col:25> '<dependent type>' contains-errors
    |       | |-DeclRefExpr 0x12e142db8 <col:4> 'int ()' Function 0x12e142d00 'ND_PRINT' 'int ()'
    |       | `-ParenExpr 0x12e142e80 <col:13, col:24> 'char[4]' contains-errors
    |       |   `-BinaryOperator 0x12e142e60 <col:14, col:19> 'char[4]' contains-errors ','
    |       |     |-RecoveryExpr 0x12e142dd8 <col:14> '<dependent type>' contains-errors lvalue
    |       |     `-StringLiteral 0x12e142e40 <col:19> 'char[4]' lvalue "STR"
    |       |-BreakStmt 0x12e142ec8 <line:25:4>
    |       |-IfStmt 0x12e808990 <line:27:4, line:30:4>
    |       | |-BinaryOperator 0x12e808870 <line:27:8, col:18> 'int' contains-errors '<'
    |       | | |-BinaryOperator 0x12e808830 <col:8, col:14> 'unsigned int' '-'
    |       | | | |-ImplicitCastExpr 0x12e808800 <col:8> 'unsigned int' <LValueToRValue>
    |       | | | | `-DeclRefExpr 0x12e142ee8 <col:8> 'const unsigned int' lvalue ParmVar 0x12e128a28 'len' 'const unsigned int'
    |       | | | `-ImplicitCastExpr 0x12e808818 <col:14> 'unsigned int' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x12e142f08 <col:14> 'unsigned int' lvalue Var 0x12e128c40 'i' 'unsigned int'
    |       | | `-RecoveryExpr 0x12e808850 <col:18> '<dependent type>' contains-errors lvalue
    |       | `-CompoundStmt 0x12e808970 <col:34, line:30:4>
    |       |   |-CallExpr 0x12e808930 <line:28:5, col:26> '<dependent type>' contains-errors
    |       |   | |-DeclRefExpr 0x12e808890 <col:5> 'int ()' Function 0x12e142d00 'ND_PRINT' 'int ()'
    |       |   | `-ParenExpr 0x12e808910 <col:14, col:25> 'char[4]' contains-errors
    |       |   |   `-BinaryOperator 0x12e8088f0 <col:15, col:20> 'char[4]' contains-errors ','
    |       |   |     |-RecoveryExpr 0x12e8088b0 <col:15> '<dependent type>' contains-errors lvalue
    |       |   |     `-StringLiteral 0x12e8088d0 <col:20> 'char[4]' lvalue "STR"
    |       |   `-GotoStmt 0x12e808958 <line:29:5, col:10> 'trunc' 0x12e142860
    |       |-CallExpr 0x12e808a50 <line:31:4, col:25> '<dependent type>' contains-errors
    |       | |-DeclRefExpr 0x12e8089b0 <col:4> 'int ()' Function 0x12e142d00 'ND_PRINT' 'int ()'
    |       | `-ParenExpr 0x12e808a30 <col:13, col:24> 'char[4]' contains-errors
    |       |   `-BinaryOperator 0x12e808a10 <col:14, col:19> 'char[4]' contains-errors ','
    |       |     |-RecoveryExpr 0x12e8089d0 <col:14> '<dependent type>' contains-errors lvalue
    |       |     `-StringLiteral 0x12e8089f0 <col:19> 'char[4]' lvalue "STR"
    |       |-BreakStmt 0x12e808a78 <line:32:4>
    |       |-IfStmt 0x12e808d40 <line:34:4, line:37:4>
    |       | |-BinaryOperator 0x12e808c20 <line:34:8, col:18> 'int' contains-errors '<'
    |       | | |-BinaryOperator 0x12e808be0 <col:8, col:14> 'unsigned int' '-'
    |       | | | |-ImplicitCastExpr 0x12e808bb0 <col:8> 'unsigned int' <LValueToRValue>
    |       | | | | `-DeclRefExpr 0x12e808a98 <col:8> 'const unsigned int' lvalue ParmVar 0x12e128a28 'len' 'const unsigned int'
    |       | | | `-ImplicitCastExpr 0x12e808bc8 <col:14> 'unsigned int' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x12e808ab8 <col:14> 'unsigned int' lvalue Var 0x12e128c40 'i' 'unsigned int'
    |       | | `-RecoveryExpr 0x12e808c00 <col:18> '<dependent type>' contains-errors lvalue
    |       | `-CompoundStmt 0x12e808d20 <col:42, line:37:4>
    |       |   |-CallExpr 0x12e808ce0 <line:35:5, col:26> '<dependent type>' contains-errors
    |       |   | |-DeclRefExpr 0x12e808c40 <col:5> 'int ()' Function 0x12e142d00 'ND_PRINT' 'int ()'
    |       |   | `-ParenExpr 0x12e808cc0 <col:14, col:25> 'char[4]' contains-errors
    |       |   |   `-BinaryOperator 0x12e808ca0 <col:15, col:20> 'char[4]' contains-errors ','
    |       |   |     |-RecoveryExpr 0x12e808c60 <col:15> '<dependent type>' contains-errors lvalue
    |       |   |     `-StringLiteral 0x12e808c80 <col:20> 'char[4]' lvalue "STR"
    |       |   `-GotoStmt 0x12e808d08 <line:36:5, col:10> 'trunc' 0x12e142860
    |       |-CallExpr 0x12e808f78 <line:39:4, col:29> 'int'
    |       | |-ImplicitCastExpr 0x12e808f60 <col:4> 'int (*)()' <FunctionToPointerDecay>
    |       | | `-DeclRefExpr 0x12e808e40 <col:4> 'int ()' Function 0x12e808d88 'ND_TCHECK_16BITS' 'int ()'
    |       | `-UnaryOperator 0x12e808f48 <col:21, col:28> 'const char *' prefix '&' cannot overflow
    |       |   `-ArraySubscriptExpr 0x12e808f28 <col:22, col:28> 'const char' lvalue
    |       |     |-ImplicitCastExpr 0x12e808f10 <col:22> 'const char *' <LValueToRValue>
    |       |     | `-DeclRefExpr 0x12e808e60 <col:22> 'const char *' lvalue ParmVar 0x12e1289a8 'bp' 'const char *'
    |       |     `-BinaryOperator 0x12e808ef0 <col:25, col:27> 'unsigned int' '+'
    |       |       |-ImplicitCastExpr 0x12e808ec0 <col:25> 'unsigned int' <LValueToRValue>
    |       |       | `-DeclRefExpr 0x12e808e80 <col:25> 'unsigned int' lvalue Var 0x12e128c40 'i' 'unsigned int'
    |       |       `-ImplicitCastExpr 0x12e808ed8 <col:27> 'unsigned int' <IntegralCast>
    |       |         `-IntegerLiteral 0x12e808ea0 <col:27> 'int' 2
    |       |-CallExpr 0x12e8092e0 <line:40:4, line:41:35> '<dependent type>' contains-errors
    |       | |-DeclRefExpr 0x12e808fa0 <line:40:4> 'int ()' Function 0x12e142d00 'ND_PRINT' 'int ()'
    |       | `-ParenExpr 0x12e8092c0 <col:13, line:41:34> 'int' contains-errors
    |       |   `-BinaryOperator 0x12e8092a0 <line:40:14, line:41:33> 'int' contains-errors ','
    |       |     |-BinaryOperator 0x12e809000 <line:40:14, col:19> 'char[4]' contains-errors ','
    |       |     | |-RecoveryExpr 0x12e808fc0 <col:14> '<dependent type>' contains-errors lvalue
    |       |     | `-StringLiteral 0x12e808fe0 <col:19> 'char[4]' lvalue "STR"
    |       |     `-BinaryOperator 0x12e809280 <line:41:5, col:33> 'int' '<<'
    |       |       |-CallExpr 0x12e809238 <col:5, col:28> 'int'
    |       |       | |-ImplicitCastExpr 0x12e809220 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |       |       | | `-DeclRefExpr 0x12e809100 <col:5> 'int ()' Function 0x12e809048 'EXTRACT_16BITS' 'int ()'
    |       |       | `-UnaryOperator 0x12e809208 <col:20, col:27> 'const char *' prefix '&' cannot overflow
    |       |       |   `-ArraySubscriptExpr 0x12e8091e8 <col:21, col:27> 'const char' lvalue
    |       |       |     |-ImplicitCastExpr 0x12e8091d0 <col:21> 'const char *' <LValueToRValue>
    |       |       |     | `-DeclRefExpr 0x12e809120 <col:21> 'const char *' lvalue ParmVar 0x12e1289a8 'bp' 'const char *'
    |       |       |     `-BinaryOperator 0x12e8091b0 <col:24, col:26> 'unsigned int' '+'
    |       |       |       |-ImplicitCastExpr 0x12e809180 <col:24> 'unsigned int' <LValueToRValue>
    |       |       |       | `-DeclRefExpr 0x12e809140 <col:24> 'unsigned int' lvalue Var 0x12e128c40 'i' 'unsigned int'
    |       |       |       `-ImplicitCastExpr 0x12e809198 <col:26> 'unsigned int' <IntegralCast>
    |       |       |         `-IntegerLiteral 0x12e809160 <col:26> 'int' 2
    |       |       `-IntegerLiteral 0x12e809260 <col:33> 'int' 2
    |       |-BreakStmt 0x12e809308 <line:42:4>
    |       |-IfStmt 0x12e8095d0 <line:44:4, line:47:4>
    |       | |-BinaryOperator 0x12e8094b0 <line:44:8, col:18> 'int' contains-errors '<'
    |       | | |-BinaryOperator 0x12e809470 <col:8, col:14> 'unsigned int' '-'
    |       | | | |-ImplicitCastExpr 0x12e809440 <col:8> 'unsigned int' <LValueToRValue>
    |       | | | | `-DeclRefExpr 0x12e809328 <col:8> 'const unsigned int' lvalue ParmVar 0x12e128a28 'len' 'const unsigned int'
    |       | | | `-ImplicitCastExpr 0x12e809458 <col:14> 'unsigned int' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x12e809348 <col:14> 'unsigned int' lvalue Var 0x12e128c40 'i' 'unsigned int'
    |       | | `-RecoveryExpr 0x12e809490 <col:18> '<dependent type>' contains-errors lvalue
    |       | `-CompoundStmt 0x12e8095b0 <col:41, line:47:4>
    |       |   |-CallExpr 0x12e809570 <line:45:5, col:26> '<dependent type>' contains-errors
    |       |   | |-DeclRefExpr 0x12e8094d0 <col:5> 'int ()' Function 0x12e142d00 'ND_PRINT' 'int ()'
    |       |   | `-ParenExpr 0x12e809550 <col:14, col:25> 'char[4]' contains-errors
    |       |   |   `-BinaryOperator 0x12e809530 <col:15, col:20> 'char[4]' contains-errors ','
    |       |   |     |-RecoveryExpr 0x12e8094f0 <col:15> '<dependent type>' contains-errors lvalue
    |       |   |     `-StringLiteral 0x12e809510 <col:20> 'char[4]' lvalue "STR"
    |       |   `-GotoStmt 0x12e809598 <line:46:5, col:10> 'trunc' 0x12e142860
    |       |-CallExpr 0x12e143110 <line:48:4, col:56> '<dependent type>' contains-errors
    |       | |-DeclRefExpr 0x12e8095f0 <col:4> 'int ()' Function 0x12e142d00 'ND_PRINT' 'int ()'
    |       | `-ParenExpr 0x12e1430f0 <col:13, col:55> '<dependent type>' contains-errors
    |       |   `-BinaryOperator 0x12e1430d0 <col:14, col:54> '<dependent type>' contains-errors ','
    |       |     |-BinaryOperator 0x12e809650 <col:14, col:19> 'char[4]' contains-errors ','
    |       |     | |-RecoveryExpr 0x12e809610 <col:14> '<dependent type>' contains-errors lvalue
    |       |     | `-StringLiteral 0x12e809630 <col:19> 'char[4]' lvalue "STR"
    |       |     `-CallExpr 0x12e1430a0 <col:26, col:54> '<dependent type>' contains-errors
    |       |       |-DeclRefExpr 0x12e809750 <col:26> 'int ()' Function 0x12e809698 'ip6addr_string' 'int ()'
    |       |       |-RecoveryExpr 0x12e809770 <col:41> '<dependent type>' contains-errors lvalue
    |       |       `-UnaryOperator 0x12e143088 <col:46, col:53> 'const char *' prefix '&' cannot overflow
    |       |         `-ArraySubscriptExpr 0x12e143068 <col:47, col:53> 'const char' lvalue
    |       |           |-ImplicitCastExpr 0x12e143050 <col:47> 'const char *' <LValueToRValue>
    |       |           | `-DeclRefExpr 0x12e809790 <col:47> 'const char *' lvalue ParmVar 0x12e1289a8 'bp' 'const char *'
    |       |           `-BinaryOperator 0x12e143030 <col:50, col:52> 'unsigned int' '+'
    |       |             |-ImplicitCastExpr 0x12e143000 <col:50> 'unsigned int' <LValueToRValue>
    |       |             | `-DeclRefExpr 0x12e8097b0 <col:50> 'unsigned int' lvalue Var 0x12e128c40 'i' 'unsigned int'
    |       |             `-ImplicitCastExpr 0x12e143018 <col:52> 'unsigned int' <IntegralCast>
    |       |               `-IntegerLiteral 0x12e8097d0 <col:52> 'int' 2
    |       |-BreakStmt 0x12e143138 <line:49:4>
    |       |-IfStmt 0x12e143400 <line:51:4, line:54:4>
    |       | |-BinaryOperator 0x12e1432e0 <line:51:8, col:18> 'int' contains-errors '<'
    |       | | |-BinaryOperator 0x12e1432a0 <col:8, col:14> 'unsigned int' '-'
    |       | | | |-ImplicitCastExpr 0x12e143270 <col:8> 'unsigned int' <LValueToRValue>
    |       | | | | `-DeclRefExpr 0x12e143158 <col:8> 'const unsigned int' lvalue ParmVar 0x12e128a28 'len' 'const unsigned int'
    |       | | | `-ImplicitCastExpr 0x12e143288 <col:14> 'unsigned int' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x12e143178 <col:14> 'unsigned int' lvalue Var 0x12e128c40 'i' 'unsigned int'
    |       | | `-RecoveryExpr 0x12e1432c0 <col:18> '<dependent type>' contains-errors lvalue
    |       | `-CompoundStmt 0x12e1433e0 <col:42, line:54:4>
    |       |   |-CallExpr 0x12e1433a0 <line:52:5, col:26> '<dependent type>' contains-errors
    |       |   | |-DeclRefExpr 0x12e143300 <col:5> 'int ()' Function 0x12e142d00 'ND_PRINT' 'int ()'
    |       |   | `-ParenExpr 0x12e143380 <col:14, col:25> 'char[4]' contains-errors
    |       |   |   `-BinaryOperator 0x12e143360 <col:15, col:20> 'char[4]' contains-errors ','
    |       |   |     |-RecoveryExpr 0x12e143320 <col:15> '<dependent type>' contains-errors lvalue
    |       |   |     `-StringLiteral 0x12e143340 <col:20> 'char[4]' lvalue "STR"
    |       |   `-GotoStmt 0x12e1433c8 <line:53:5, col:10> 'trunc' 0x12e142860
    |       |-CallExpr 0x12e1437c0 <line:55:4, line:57:30> '<dependent type>' contains-errors
    |       | |-DeclRefExpr 0x12e143420 <line:55:4> 'int ()' Function 0x12e142d00 'ND_PRINT' 'int ()'
    |       | `-ParenExpr 0x12e1437a0 <col:13, line:57:29> 'int' contains-errors
    |       |   `-BinaryOperator 0x12e143780 <line:55:14, line:57:28> 'int' contains-errors ','
    |       |     |-BinaryOperator 0x12e143600 <line:55:14, line:56:28> 'int' contains-errors ','
    |       |     | |-BinaryOperator 0x12e143480 <line:55:14, col:19> 'char[4]' contains-errors ','
    |       |     | | |-RecoveryExpr 0x12e143440 <col:14> '<dependent type>' contains-errors lvalue
    |       |     | | `-StringLiteral 0x12e143460 <col:19> 'char[4]' lvalue "STR"
    |       |     | `-CallExpr 0x12e1435d8 <line:56:5, col:28> 'int'
    |       |     |   |-ImplicitCastExpr 0x12e1435c0 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |       |     |   | `-DeclRefExpr 0x12e1434a0 <col:5> 'int ()' Function 0x12e809048 'EXTRACT_16BITS' 'int ()'
    |       |     |   `-UnaryOperator 0x12e1435a8 <col:20, col:27> 'const char *' prefix '&' cannot overflow
    |       |     |     `-ArraySubscriptExpr 0x12e143588 <col:21, col:27> 'const char' lvalue
    |       |     |       |-ImplicitCastExpr 0x12e143570 <col:21> 'const char *' <LValueToRValue>
    |       |     |       | `-DeclRefExpr 0x12e1434c0 <col:21> 'const char *' lvalue ParmVar 0x12e1289a8 'bp' 'const char *'
    |       |     |       `-BinaryOperator 0x12e143550 <col:24, col:26> 'unsigned int' '+'
    |       |     |         |-ImplicitCastExpr 0x12e143520 <col:24> 'unsigned int' <LValueToRValue>
    |       |     |         | `-DeclRefExpr 0x12e1434e0 <col:24> 'unsigned int' lvalue Var 0x12e128c40 'i' 'unsigned int'
    |       |     |         `-ImplicitCastExpr 0x12e143538 <col:26> 'unsigned int' <IntegralCast>
    |       |     |           `-IntegerLiteral 0x12e143500 <col:26> 'int' 2
    |       |     `-CallExpr 0x12e143758 <line:57:5, col:28> 'int'
    |       |       |-ImplicitCastExpr 0x12e143740 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |       |       | `-DeclRefExpr 0x12e143620 <col:5> 'int ()' Function 0x12e809048 'EXTRACT_16BITS' 'int ()'
    |       |       `-UnaryOperator 0x12e143728 <col:20, col:27> 'const char *' prefix '&' cannot overflow
    |       |         `-ArraySubscriptExpr 0x12e143708 <col:21, col:27> 'const char' lvalue
    |       |           |-ImplicitCastExpr 0x12e1436f0 <col:21> 'const char *' <LValueToRValue>
    |       |           | `-DeclRefExpr 0x12e143640 <col:21> 'const char *' lvalue ParmVar 0x12e1289a8 'bp' 'const char *'
    |       |           `-BinaryOperator 0x12e1436d0 <col:24, col:26> 'unsigned int' '+'
    |       |             |-ImplicitCastExpr 0x12e1436a0 <col:24> 'unsigned int' <LValueToRValue>
    |       |             | `-DeclRefExpr 0x12e143660 <col:24> 'unsigned int' lvalue Var 0x12e128c40 'i' 'unsigned int'
    |       |             `-ImplicitCastExpr 0x12e1436b8 <col:26> 'unsigned int' <IntegralCast>
    |       |               `-IntegerLiteral 0x12e143680 <col:26> 'int' 4
    |       |-BreakStmt 0x12e1437e8 <line:58:4>
    |       |-IfStmt 0x12e143ab0 <line:60:4, line:63:4>
    |       | |-BinaryOperator 0x12e143990 <line:60:8, col:18> 'int' contains-errors '<'
    |       | | |-BinaryOperator 0x12e143950 <col:8, col:14> 'unsigned int' '-'
    |       | | | |-ImplicitCastExpr 0x12e143920 <col:8> 'unsigned int' <LValueToRValue>
    |       | | | | `-DeclRefExpr 0x12e143808 <col:8> 'const unsigned int' lvalue ParmVar 0x12e128a28 'len' 'const unsigned int'
    |       | | | `-ImplicitCastExpr 0x12e143938 <col:14> 'unsigned int' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x12e143828 <col:14> 'unsigned int' lvalue Var 0x12e128c40 'i' 'unsigned int'
    |       | | `-RecoveryExpr 0x12e143970 <col:18> '<dependent type>' contains-errors lvalue
    |       | `-CompoundStmt 0x12e143a90 <col:39, line:63:4>
    |       |   |-CallExpr 0x12e143a50 <line:61:5, col:26> '<dependent type>' contains-errors
    |       |   | |-DeclRefExpr 0x12e1439b0 <col:5> 'int ()' Function 0x12e142d00 'ND_PRINT' 'int ()'
    |       |   | `-ParenExpr 0x12e143a30 <col:14, col:25> 'char[4]' contains-errors
    |       |   |   `-BinaryOperator 0x12e143a10 <col:15, col:20> 'char[4]' contains-errors ','
    |       |   |     |-RecoveryExpr 0x12e1439d0 <col:15> '<dependent type>' contains-errors lvalue
    |       |   |     `-StringLiteral 0x12e1439f0 <col:20> 'char[4]' lvalue "STR"
    |       |   `-GotoStmt 0x12e143a78 <line:62:5, col:10> 'trunc' 0x12e142860
    |       |-CallExpr 0x12e143b70 <line:64:4, col:25> '<dependent type>' contains-errors
    |       | |-DeclRefExpr 0x12e143ad0 <col:4> 'int ()' Function 0x12e142d00 'ND_PRINT' 'int ()'
    |       | `-ParenExpr 0x12e143b50 <col:13, col:24> 'char[4]' contains-errors
    |       |   `-BinaryOperator 0x12e143b30 <col:14, col:19> 'char[4]' contains-errors ','
    |       |     |-RecoveryExpr 0x12e143af0 <col:14> '<dependent type>' contains-errors lvalue
    |       |     `-StringLiteral 0x12e143b10 <col:19> 'char[4]' lvalue "STR"
    |       |-BreakStmt 0x12e143b98 <line:65:4>
    |       |-DefaultStmt 0x12e143e20 <line:66:3, line:70:4>
    |       | `-IfStmt 0x12e143e00 <line:67:4, line:70:4>
    |       |   |-RecoveryExpr 0x12e143c30 <line:67:8, col:18> '_Bool' contains-errors
    |       |   `-CompoundStmt 0x12e143de0 <col:34, line:70:4>
    |       |     |-CallExpr 0x12e143da0 <line:68:5, col:33> '<dependent type>' contains-errors
    |       |     | |-DeclRefExpr 0x12e143c50 <col:5> 'int ()' Function 0x12e142d00 'ND_PRINT' 'int ()'
    |       |     | `-ParenExpr 0x12e143d80 <col:14, col:32> 'const char' contains-errors
    |       |     |   `-BinaryOperator 0x12e143d60 <col:15, col:31> 'const char' contains-errors ','
    |       |     |     |-BinaryOperator 0x12e143cb0 <col:15, col:20> 'char[4]' contains-errors ','
    |       |     |     | |-RecoveryExpr 0x12e143c70 <col:15> '<dependent type>' contains-errors lvalue
    |       |     |     | `-StringLiteral 0x12e143c90 <col:20> 'char[4]' lvalue "STR"
    |       |     |     `-ArraySubscriptExpr 0x12e143d40 <col:27, col:31> 'const char' lvalue
    |       |     |       |-ImplicitCastExpr 0x12e143d10 <col:27> 'const char *' <LValueToRValue>
    |       |     |       | `-DeclRefExpr 0x12e143cd0 <col:27> 'const char *' lvalue ParmVar 0x12e1289a8 'bp' 'const char *'
    |       |     |       `-ImplicitCastExpr 0x12e143d28 <col:30> 'unsigned int' <LValueToRValue>
    |       |     |         `-DeclRefExpr 0x12e143cf0 <col:30> 'unsigned int' lvalue Var 0x12e128c40 'i' 'unsigned int'
    |       |     `-GotoStmt 0x12e143dc8 <line:69:5, col:10> 'trunc' 0x12e142860
    |       |-CallExpr 0x12e144098 <line:71:4, col:43> '<dependent type>' contains-errors
    |       | |-DeclRefExpr 0x12e143e40 <col:4> 'int ()' Function 0x12e142d00 'ND_PRINT' 'int ()'
    |       | `-ParenExpr 0x12e144078 <col:13, col:42> 'const char' contains-errors
    |       |   `-BinaryOperator 0x12e144058 <col:14, col:41> 'const char' contains-errors ','
    |       |     |-BinaryOperator 0x12e143f50 <col:14, col:30> 'const char' contains-errors ','
    |       |     | |-BinaryOperator 0x12e143ea0 <col:14, col:19> 'char[4]' contains-errors ','
    |       |     | | |-RecoveryExpr 0x12e143e60 <col:14> '<dependent type>' contains-errors lvalue
    |       |     | | `-StringLiteral 0x12e143e80 <col:19> 'char[4]' lvalue "STR"
    |       |     | `-ArraySubscriptExpr 0x12e143f30 <col:26, col:30> 'const char' lvalue
    |       |     |   |-ImplicitCastExpr 0x12e143f00 <col:26> 'const char *' <LValueToRValue>
    |       |     |   | `-DeclRefExpr 0x12e143ec0 <col:26> 'const char *' lvalue ParmVar 0x12e1289a8 'bp' 'const char *'
    |       |     |   `-ImplicitCastExpr 0x12e143f18 <col:29> 'unsigned int' <LValueToRValue>
    |       |     |     `-DeclRefExpr 0x12e143ee0 <col:29> 'unsigned int' lvalue Var 0x12e128c40 'i' 'unsigned int'
    |       |     `-ArraySubscriptExpr 0x12e144038 <col:33, col:41> 'const char' lvalue
    |       |       |-ImplicitCastExpr 0x12e144020 <col:33> 'const char *' <LValueToRValue>
    |       |       | `-DeclRefExpr 0x12e143f70 <col:33> 'const char *' lvalue ParmVar 0x12e1289a8 'bp' 'const char *'
    |       |       `-BinaryOperator 0x12e144000 <col:36, col:40> 'unsigned int' '+'
    |       |         |-ImplicitCastExpr 0x12e143fd0 <col:36> 'unsigned int' <LValueToRValue>
    |       |         | `-DeclRefExpr 0x12e143f90 <col:36> 'unsigned int' lvalue Var 0x12e128c40 'i' 'unsigned int'
    |       |         `-ImplicitCastExpr 0x12e143fe8 <col:40> 'unsigned int' <IntegralCast>
    |       |           `-IntegerLiteral 0x12e143fb0 <col:40> 'int' 1
    |       `-BreakStmt 0x12e1440c0 <line:72:4>
    |-ReturnStmt 0x12e144210 <line:75:2, col:9>
    | `-IntegerLiteral 0x12e1441f0 <col:9> 'int' 0
    `-LabelStmt 0x12e144250 <line:77:1, line:78:9> 'trunc'
      `-ReturnStmt 0x12e144240 <col:2, col:9>
        `-IntegerLiteral 0x12e144220 <col:9> 'int' 1
