TranslationUnitDecl 0x141855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1418564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x141855bd0 '__int128'
|-TypedefDecl 0x141856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x141855bf0 'unsigned __int128'
|-TypedefDecl 0x141926230 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x141926000 'struct __NSConstantString_tag'
|   `-Record 0x141856580 '__NSConstantString_tag'
|-TypedefDecl 0x141926298 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x141855d90 '__SVInt8_t'
|-TypedefDecl 0x141926300 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x141855db0 '__SVInt16_t'
|-TypedefDecl 0x141926368 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x141855dd0 '__SVInt32_t'
|-TypedefDecl 0x1419263d0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x141855df0 '__SVInt64_t'
|-TypedefDecl 0x141926438 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x141855e10 '__SVUint8_t'
|-TypedefDecl 0x1419264a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x141855e30 '__SVUint16_t'
|-TypedefDecl 0x141926508 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x141855e50 '__SVUint32_t'
|-TypedefDecl 0x141926570 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x141855e70 '__SVUint64_t'
|-TypedefDecl 0x1419265d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x141855e90 '__SVFloat16_t'
|-TypedefDecl 0x141926640 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x141855eb0 '__SVFloat32_t'
|-TypedefDecl 0x1419266a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x141855ed0 '__SVFloat64_t'
|-TypedefDecl 0x141926710 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x141855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x141926778 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x141855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x1419267e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x141855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x141926848 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x141855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1419268b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x141855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x141926918 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x141855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x141926980 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x141855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1419269e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x141855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x141926a50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x141855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x141926ab8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x141856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x141926b20 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x141856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x141926b88 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x141856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x141926bf0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x141856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x141926c58 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x141856090 '__clang_svint8x3_t'
|-TypedefDecl 0x141926cc0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1418560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x141926d28 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1418560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x141926d90 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1418560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x141926df8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x141856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x141926e60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x141856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x141926ec8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x141856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x141926f30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x141856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x141926f98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x141856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x141927800 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1418561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x141927868 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1418561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1419278d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1418561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x141927938 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x141856210 '__clang_svint8x4_t'
|-TypedefDecl 0x1419279a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x141856230 '__clang_svint16x4_t'
|-TypedefDecl 0x141927a08 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x141856250 '__clang_svint32x4_t'
|-TypedefDecl 0x141927a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x141856270 '__clang_svint64x4_t'
|-TypedefDecl 0x141927ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x141856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x141927b40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1418562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x141927ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1418562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x141927c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1418562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x141927c78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x141856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x141927ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x141856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x141927d48 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x141856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x141927db0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x141856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x141927e18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x141856390 '__SVBool_t'
|-TypedefDecl 0x141927e80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1418563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x141927ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1418563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x141927f50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1418563f0 '__SVCount_t'
|-TypedefDecl 0x141927ff8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x141927fb0 'char *'
|   `-BuiltinType 0x1418556b0 'char'
|-TypedefDecl 0x141928068 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x141927fb0 'char *'
|   `-BuiltinType 0x1418556b0 'char'
`-FunctionDecl 0x1419284d8 <dataset_diviso_filec/func14326_nonvuln.c:1:1, line:29:1> line:1:1 invalid strtoargvsub 'int (int *, char *, unsigned int *, char ***, unsigned int)'
  |-ParmVarDecl 0x141928128 <col:14, col:25> col:25 invalid mctx 'int *'
  |-ParmVarDecl 0x1419281a8 <col:31, col:37> col:37 used s 'char *'
  |-ParmVarDecl 0x141928258 <col:40, col:54> col:54 used argcp 'unsigned int *'
  |-ParmVarDecl 0x141928340 <line:2:7, col:15> col:15 used argvp 'char ***'
  |-ParmVarDecl 0x1419283c0 <col:22, col:35> col:35 used n 'unsigned int'
  `-CompoundStmt 0x141942630 <line:3:1, line:29:1>
    |-WhileStmt 0x141928770 <line:7:2, line:8:4>
    | |-BinaryOperator 0x141928718 <line:7:9, col:28> 'int' '||'
    | | |-BinaryOperator 0x141928640 <col:9, col:15> 'int' '=='
    | | | |-ImplicitCastExpr 0x141928628 <col:9, col:10> 'int' <IntegralCast>
    | | | | `-ImplicitCastExpr 0x141928610 <col:9, col:10> 'char' <LValueToRValue>
    | | | |   `-UnaryOperator 0x1419285e0 <col:9, col:10> 'char' lvalue prefix '*' cannot overflow
    | | | |     `-ImplicitCastExpr 0x1419285c8 <col:10> 'char *' <LValueToRValue>
    | | | |       `-DeclRefExpr 0x1419285a8 <col:10> 'char *' lvalue ParmVar 0x1419281a8 's' 'char *'
    | | | `-CharacterLiteral 0x1419285f8 <col:15> 'int' 32
    | | `-BinaryOperator 0x1419286f8 <col:22, col:28> 'int' '=='
    | |   |-ImplicitCastExpr 0x1419286e0 <col:22, col:23> 'int' <IntegralCast>
    | |   | `-ImplicitCastExpr 0x1419286c8 <col:22, col:23> 'char' <LValueToRValue>
    | |   |   `-UnaryOperator 0x141928698 <col:22, col:23> 'char' lvalue prefix '*' cannot overflow
    | |   |     `-ImplicitCastExpr 0x141928680 <col:23> 'char *' <LValueToRValue>
    | |   |       `-DeclRefExpr 0x141928660 <col:23> 'char *' lvalue ParmVar 0x1419281a8 's' 'char *'
    | |   `-CharacterLiteral 0x1419286b0 <col:28> 'int' 9
    | `-UnaryOperator 0x141928758 <line:8:3, col:4> 'char *' postfix '++'
    |   `-DeclRefExpr 0x141928738 <col:3> 'char *' lvalue ParmVar 0x1419281a8 's' 'char *'
    `-IfStmt 0x1419425e8 <line:10:2, line:27:2> has_else
      |-BinaryOperator 0x141941830 <line:10:6, col:12> 'int' '=='
      | |-ImplicitCastExpr 0x141941818 <col:6, col:7> 'int' <IntegralCast>
      | | `-ImplicitCastExpr 0x141941800 <col:6, col:7> 'char' <LValueToRValue>
      | |   `-UnaryOperator 0x1419287c8 <col:6, col:7> 'char' lvalue prefix '*' cannot overflow
      | |     `-ImplicitCastExpr 0x1419287b0 <col:7> 'char *' <LValueToRValue>
      | |       `-DeclRefExpr 0x141928790 <col:7> 'char *' lvalue ParmVar 0x1419281a8 's' 'char *'
      | `-CharacterLiteral 0x1419287e0 <col:12> 'int' 0
      |-CompoundStmt 0x141941d18 <col:18, line:16:2>
      | |-BinaryOperator 0x1419418d8 <line:12:3, col:12> 'unsigned int' '='
      | | |-UnaryOperator 0x141941888 <col:3, col:4> 'unsigned int' lvalue prefix '*' cannot overflow
      | | | `-ImplicitCastExpr 0x141941870 <col:4> 'unsigned int *' <LValueToRValue>
      | | |   `-DeclRefExpr 0x141941850 <col:4> 'unsigned int *' lvalue ParmVar 0x141928258 'argcp' 'unsigned int *'
      | | `-ImplicitCastExpr 0x1419418c0 <col:12> 'unsigned int' <LValueToRValue>
      | |   `-DeclRefExpr 0x1419418a0 <col:12> 'unsigned int' lvalue ParmVar 0x1419283c0 'n' 'unsigned int'
      | `-BinaryOperator 0x141941bb8 <line:13:3, col:48> 'char **' contains-errors '='
      |   |-UnaryOperator 0x141941930 <col:3, col:4> 'char **' lvalue prefix '*' cannot overflow
      |   | `-ImplicitCastExpr 0x141941918 <col:4> 'char ***' <LValueToRValue>
      |   |   `-DeclRefExpr 0x1419418f8 <col:4> 'char ***' lvalue ParmVar 0x141928340 'argvp' 'char ***'
      |   `-CallExpr 0x141941b88 <col:12, col:48> '<dependent type>' contains-errors
      |     |-DeclRefExpr 0x141941aa0 <col:12> 'int ()' Function 0x1419419e8 'isc_mem_get' 'int ()'
      |     |-RecoveryExpr 0x141941ac0 <col:24> '<dependent type>' contains-errors lvalue
      |     `-BinaryOperator 0x141941b68 <col:30, col:47> 'unsigned long' '*'
      |       |-ImplicitCastExpr 0x141941b50 <col:30> 'unsigned long' <IntegralCast>
      |       | `-ImplicitCastExpr 0x141941b38 <col:30> 'unsigned int' <LValueToRValue>
      |       |   `-DeclRefExpr 0x141941ae0 <col:30> 'unsigned int' lvalue ParmVar 0x1419283c0 'n' 'unsigned int'
      |       `-UnaryExprOrTypeTraitExpr 0x141941b18 <col:34, col:47> 'unsigned long' sizeof 'char *'
      `-CompoundStmt 0x1419425b8 <line:16:9, line:27:2>
        |-DeclStmt 0x141941df0 <line:17:3, col:14>
        | `-VarDecl 0x141941d50 <col:3, col:13> col:9 used p 'char *' cinit
        |   `-ImplicitCastExpr 0x141941dd8 <col:13> 'char *' <LValueToRValue>
        |     `-DeclRefExpr 0x141941db8 <col:13> 'char *' lvalue ParmVar 0x1419281a8 's' 'char *'
        |-WhileStmt 0x1419420a8 <line:18:3, line:19:5>
        | |-BinaryOperator 0x141942050 <line:18:10, col:43> 'int' '&&'
        | | |-BinaryOperator 0x141941f78 <col:10, col:29> 'int' '&&'
        | | | |-BinaryOperator 0x141941ea0 <col:10, col:16> 'int' '!='
        | | | | |-ImplicitCastExpr 0x141941e88 <col:10, col:11> 'int' <IntegralCast>
        | | | | | `-ImplicitCastExpr 0x141941e70 <col:10, col:11> 'char' <LValueToRValue>
        | | | | |   `-UnaryOperator 0x141941e40 <col:10, col:11> 'char' lvalue prefix '*' cannot overflow
        | | | | |     `-ImplicitCastExpr 0x141941e28 <col:11> 'char *' <LValueToRValue>
        | | | | |       `-DeclRefExpr 0x141941e08 <col:11> 'char *' lvalue Var 0x141941d50 'p' 'char *'
        | | | | `-CharacterLiteral 0x141941e58 <col:16> 'int' 32
        | | | `-BinaryOperator 0x141941f58 <col:23, col:29> 'int' '!='
        | | |   |-ImplicitCastExpr 0x141941f40 <col:23, col:24> 'int' <IntegralCast>
        | | |   | `-ImplicitCastExpr 0x141941f28 <col:23, col:24> 'char' <LValueToRValue>
        | | |   |   `-UnaryOperator 0x141941ef8 <col:23, col:24> 'char' lvalue prefix '*' cannot overflow
        | | |   |     `-ImplicitCastExpr 0x141941ee0 <col:24> 'char *' <LValueToRValue>
        | | |   |       `-DeclRefExpr 0x141941ec0 <col:24> 'char *' lvalue Var 0x141941d50 'p' 'char *'
        | | |   `-CharacterLiteral 0x141941f10 <col:29> 'int' 9
        | | `-BinaryOperator 0x141942030 <col:37, col:43> 'int' '!='
        | |   |-ImplicitCastExpr 0x141942018 <col:37, col:38> 'int' <IntegralCast>
        | |   | `-ImplicitCastExpr 0x141942000 <col:37, col:38> 'char' <LValueToRValue>
        | |   |   `-UnaryOperator 0x141941fd0 <col:37, col:38> 'char' lvalue prefix '*' cannot overflow
        | |   |     `-ImplicitCastExpr 0x141941fb8 <col:38> 'char *' <LValueToRValue>
        | |   |       `-DeclRefExpr 0x141941f98 <col:38> 'char *' lvalue Var 0x141941d50 'p' 'char *'
        | |   `-CharacterLiteral 0x141941fe8 <col:43> 'int' 0
        | `-UnaryOperator 0x141942090 <line:19:4, col:5> 'char *' postfix '++'
        |   `-DeclRefExpr 0x141942070 <col:4> 'char *' lvalue Var 0x141941d50 'p' 'char *'
        |-IfStmt 0x141942220 <line:20:3, line:21:11>
        | |-BinaryOperator 0x141942160 <line:20:7, col:13> 'int' '!='
        | | |-ImplicitCastExpr 0x141942148 <col:7, col:8> 'int' <IntegralCast>
        | | | `-ImplicitCastExpr 0x141942130 <col:7, col:8> 'char' <LValueToRValue>
        | | |   `-UnaryOperator 0x141942100 <col:7, col:8> 'char' lvalue prefix '*' cannot overflow
        | | |     `-ImplicitCastExpr 0x1419420e8 <col:8> 'char *' <LValueToRValue>
        | | |       `-DeclRefExpr 0x1419420c8 <col:8> 'char *' lvalue Var 0x141941d50 'p' 'char *'
        | | `-CharacterLiteral 0x141942118 <col:13> 'int' 0
        | `-BinaryOperator 0x141942200 <line:21:4, col:11> 'char' '='
        |   |-UnaryOperator 0x1419421b8 <col:4, col:6> 'char' lvalue prefix '*' cannot overflow
        |   | `-UnaryOperator 0x1419421a0 <col:5, col:6> 'char *' postfix '++'
        |   |   `-DeclRefExpr 0x141942180 <col:5> 'char *' lvalue Var 0x141941d50 'p' 'char *'
        |   `-ImplicitCastExpr 0x1419421e8 <col:11> 'char' <IntegralCast>
        |     `-CharacterLiteral 0x1419421d0 <col:11> 'int' 0
        `-BinaryOperator 0x141942598 <line:26:3, col:17> 'char *' '='
          |-ArraySubscriptExpr 0x141942540 <col:3, col:13> 'char *' lvalue
          | |-ImplicitCastExpr 0x141942510 <col:3, col:10> 'char **' <LValueToRValue>
          | | `-ParenExpr 0x1419424d0 <col:3, col:10> 'char **' lvalue
          | |   `-UnaryOperator 0x1419424b8 <col:4, col:5> 'char **' lvalue prefix '*' cannot overflow
          | |     `-ImplicitCastExpr 0x1419424a0 <col:5> 'char ***' <LValueToRValue>
          | |       `-DeclRefExpr 0x141942480 <col:5> 'char ***' lvalue ParmVar 0x141928340 'argvp' 'char ***'
          | `-ImplicitCastExpr 0x141942528 <col:12> 'unsigned int' <LValueToRValue>
          |   `-DeclRefExpr 0x1419424f0 <col:12> 'unsigned int' lvalue ParmVar 0x1419283c0 'n' 'unsigned int'
          `-ImplicitCastExpr 0x141942580 <col:17> 'char *' <LValueToRValue>
            `-DeclRefExpr 0x141942560 <col:17> 'char *' lvalue ParmVar 0x1419281a8 's' 'char *'
