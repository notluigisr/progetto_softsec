TranslationUnitDecl 0x134855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1348564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x134855bd0 '__int128'
|-TypedefDecl 0x134856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x134855bf0 'unsigned __int128'
|-TypedefDecl 0x13500be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13500bc00 'struct __NSConstantString_tag'
|   `-Record 0x134856580 '__NSConstantString_tag'
|-TypedefDecl 0x13500be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x134855d90 '__SVInt8_t'
|-TypedefDecl 0x13500bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x134855db0 '__SVInt16_t'
|-TypedefDecl 0x13500bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x134855dd0 '__SVInt32_t'
|-TypedefDecl 0x13500bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x134855df0 '__SVInt64_t'
|-TypedefDecl 0x13500c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x134855e10 '__SVUint8_t'
|-TypedefDecl 0x13500c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x134855e30 '__SVUint16_t'
|-TypedefDecl 0x13500c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x134855e50 '__SVUint32_t'
|-TypedefDecl 0x13500c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x134855e70 '__SVUint64_t'
|-TypedefDecl 0x13500c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x134855e90 '__SVFloat16_t'
|-TypedefDecl 0x13500c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x134855eb0 '__SVFloat32_t'
|-TypedefDecl 0x13500c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x134855ed0 '__SVFloat64_t'
|-TypedefDecl 0x13500c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x134855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13500c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x134855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13500c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x134855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13500c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x134855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13500c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x134855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13500c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x134855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13500c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x134855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13500c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x134855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13500c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x134855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13500c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x134856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13500c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x134856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13500c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x134856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13500c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x134856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13500c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x134856090 '__clang_svint8x3_t'
|-TypedefDecl 0x13500c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1348560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13500c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1348560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13500c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1348560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13500c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x134856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13500ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x134856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13500cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x134856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13500cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x134856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13500cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x134856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13500d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1348561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13500d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1348561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13500d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1348561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13500d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x134856210 '__clang_svint8x4_t'
|-TypedefDecl 0x13500d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x134856230 '__clang_svint16x4_t'
|-TypedefDecl 0x13500d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x134856250 '__clang_svint32x4_t'
|-TypedefDecl 0x13500d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x134856270 '__clang_svint64x4_t'
|-TypedefDecl 0x13500d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x134856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13500d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1348562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13500d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1348562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13500d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1348562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13500d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x134856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13500d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x134856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13500d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x134856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13500d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x134856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13500da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x134856390 '__SVBool_t'
|-TypedefDecl 0x13500da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1348563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13500dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1348563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13500db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1348563f0 '__SVCount_t'
|-TypedefDecl 0x13500dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13500dbb0 'char *'
|   `-BuiltinType 0x1348556b0 'char'
|-TypedefDecl 0x13500dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13500dbb0 'char *'
|   `-BuiltinType 0x1348556b0 'char'
|-FunctionDecl 0x13500de88 <dataset_diviso_filec/func20987_vuln.c:1:1, line:54:1> line:1:13 invalid fbo_check_config 'int (const char *, char **)' static
| |-ParmVarDecl 0x13500dcf0 <col:30, col:42> col:42 used cfgstring 'const char *'
| |-ParmVarDecl 0x13500dda8 <col:53, col:60> col:60 used reason 'char **'
| `-CompoundStmt 0x13502a778 <line:2:1, line:54:1>
|   |-DeclStmt 0x13500dfc0 <line:3:2, col:15>
|   | `-VarDecl 0x13500df58 <col:2, col:8> col:8 used options 'char *'
|   |-DeclStmt 0x13500e058 <line:4:2, col:12>
|   | `-VarDecl 0x13500dff0 <col:2, col:8> col:8 used path 'char *'
|   |-DeclStmt 0x13500e0f0 <line:5:2, col:8>
|   | `-VarDecl 0x13500e088 <col:2, col:6> col:6 used fd 'int'
|   |-CallExpr 0x13500e348 <line:7:2, col:27> 'int'
|   | |-ImplicitCastExpr 0x13500e330 <col:2> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x13500e260 <col:2> 'int ()' Function 0x13500e1a8 'tcmu_dbg' 'int ()'
|   | |-ImplicitCastExpr 0x13500e378 <col:11> 'char *' <ArrayToPointerDecay>
|   | | `-StringLiteral 0x13500e2c0 <col:11> 'char[4]' lvalue "STR"
|   | `-ImplicitCastExpr 0x13500e390 <col:18> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x13500e2e0 <col:18> 'const char *' lvalue ParmVar 0x13500dcf0 'cfgstring' 'const char *'
|   |-BinaryOperator 0x135027b40 <line:8:2, col:33> 'char *' '='
|   | |-DeclRefExpr 0x13500e3a8 <col:2> 'char *' lvalue Var 0x13500df58 'options' 'char *'
|   | `-CallExpr 0x135027af8 <col:12, col:33> 'char *'
|   |   |-ImplicitCastExpr 0x135027ae0 <col:12> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x135027a40 <col:12> 'char *(const char *, int)' Function 0x135027860 'strchr' 'char *(const char *, int)'
|   |   |-ImplicitCastExpr 0x135027b28 <col:19> 'const char *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x135027a60 <col:19> 'const char *' lvalue ParmVar 0x13500dcf0 'cfgstring' 'const char *'
|   |   `-CharacterLiteral 0x135027a80 <col:30> 'int' 47
|   |-IfStmt 0x135027fa0 <line:9:2, line:13:2>
|   | |-UnaryOperator 0x135027b98 <line:9:6, col:7> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x135027b80 <col:7> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x135027b60 <col:7> 'char *' lvalue Var 0x13500df58 'options' 'char *'
|   | `-CompoundStmt 0x135027f88 <col:16, line:13:2>
|   |   `-IfStmt 0x135027f50 <line:10:3, line:11:14>
|   |     |-BinaryOperator 0x135027e08 <line:10:7, col:35> 'int' '=='
|   |     | |-CallExpr 0x135027d70 <col:7, col:29> 'int'
|   |     | | |-ImplicitCastExpr 0x135027d58 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x135027cf8 <col:7> 'int ()' Function 0x135027bd8 'asprintf' 'int ()'
|   |     | | |-ImplicitCastExpr 0x135027da0 <col:16> 'char **' <LValueToRValue>
|   |     | | | `-DeclRefExpr 0x135027d18 <col:16> 'char **' lvalue ParmVar 0x13500dda8 'reason' 'char **'
|   |     | | `-ImplicitCastExpr 0x135027db8 <col:24> 'char *' <ArrayToPointerDecay>
|   |     | |   `-StringLiteral 0x135027d38 <col:24> 'char[4]' lvalue "STR"
|   |     | `-UnaryOperator 0x135027df0 <col:34, col:35> 'int' prefix '-'
|   |     |   `-IntegerLiteral 0x135027dd0 <col:35> 'int' 1
|   |     `-BinaryOperator 0x135027f30 <line:11:4, col:14> 'char *' contains-errors '='
|   |       |-UnaryOperator 0x135027ef8 <col:4, col:5> 'char *' lvalue prefix '*' cannot overflow
|   |       | `-ImplicitCastExpr 0x135027ee0 <col:5> 'char **' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x135027e28 <col:5> 'char **' lvalue ParmVar 0x13500dda8 'reason' 'char **'
|   |       `-RecoveryExpr 0x135027f10 <col:14> '<dependent type>' contains-errors lvalue
|   |-CompoundAssignOperator 0x135028000 <line:14:2, col:13> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
|   | |-DeclRefExpr 0x135027fc0 <col:2> 'char *' lvalue Var 0x13500df58 'options' 'char *'
|   | `-IntegerLiteral 0x135027fe0 <col:13> 'int' 1
|   |-WhileStmt 0x135029950 <line:15:2, line:30:2>
|   | |-BinaryOperator 0x1350280f0 <line:15:9, col:23> 'int' '!='
|   | | |-ImplicitCastExpr 0x1350280d8 <col:9, col:18> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x1350280c0 <col:9, col:18> 'char' <LValueToRValue>
|   | | |   `-ArraySubscriptExpr 0x135028088 <col:9, col:18> 'char' lvalue
|   | | |     |-ImplicitCastExpr 0x135028070 <col:9> 'char *' <LValueToRValue>
|   | | |     | `-DeclRefExpr 0x135028030 <col:9> 'char *' lvalue Var 0x13500df58 'options' 'char *'
|   | | |     `-IntegerLiteral 0x135028050 <col:17> 'int' 0
|   | | `-CharacterLiteral 0x1350280a8 <col:23> 'int' 47
|   | `-CompoundStmt 0x135029920 <col:28, line:30:2>
|   |   |-IfStmt 0x135029450 <line:16:3, line:21:3>
|   |   | |-CallExpr 0x1350290b8 <line:16:7, col:36> 'int'
|   |   | | |-ImplicitCastExpr 0x1350290a0 <col:7> 'int (*)(const char *, const char *, unsigned long)' <FunctionToPointerDecay>
|   |   | | | `-DeclRefExpr 0x1350283a8 <col:7> 'int (const char *, const char *, unsigned long)' Function 0x135028158 'strncasecmp' 'int (const char *, const char *, unsigned long)'
|   |   | | |-ImplicitCastExpr 0x135029108 <col:19> 'const char *' <NoOp>
|   |   | | | `-ImplicitCastExpr 0x1350290f0 <col:19> 'char *' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x1350283c8 <col:19> 'char *' lvalue Var 0x13500df58 'options' 'char *'
|   |   | | |-ImplicitCastExpr 0x135029138 <col:28> 'const char *' <NoOp>
|   |   | | | `-ImplicitCastExpr 0x135029120 <col:28> 'char *' <ArrayToPointerDecay>
|   |   | | |   `-StringLiteral 0x135029000 <col:28> 'char[4]' lvalue "STR"
|   |   | | `-ImplicitCastExpr 0x135029150 <col:35> 'unsigned long' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x135029020 <col:35> 'int' 3
|   |   | `-CompoundStmt 0x135029438 <col:39, line:21:3>
|   |   |   `-IfStmt 0x135029400 <line:17:4, line:19:15>
|   |   |     |-BinaryOperator 0x1350292b8 <line:17:8, line:18:23> 'int' '=='
|   |   |     | |-CallExpr 0x135029200 <line:17:8, line:18:17> 'int'
|   |   |     | | |-ImplicitCastExpr 0x1350291e8 <line:17:8> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | | | `-DeclRefExpr 0x135029168 <col:8> 'int ()' Function 0x135027bd8 'asprintf' 'int ()'
|   |   |     | | |-ImplicitCastExpr 0x135029238 <col:17> 'char **' <LValueToRValue>
|   |   |     | | | `-DeclRefExpr 0x135029188 <col:17> 'char **' lvalue ParmVar 0x13500dda8 'reason' 'char **'
|   |   |     | | |-ImplicitCastExpr 0x135029250 <col:25> 'char *' <ArrayToPointerDecay>
|   |   |     | | | `-StringLiteral 0x1350291a8 <col:25> 'char[4]' lvalue "STR"
|   |   |     | | `-ImplicitCastExpr 0x135029268 <line:18:10> 'char *' <LValueToRValue>
|   |   |     | |   `-DeclRefExpr 0x1350291c8 <col:10> 'char *' lvalue Var 0x13500df58 'options' 'char *'
|   |   |     | `-UnaryOperator 0x1350292a0 <col:22, col:23> 'int' prefix '-'
|   |   |     |   `-IntegerLiteral 0x135029280 <col:23> 'int' 1
|   |   |     `-BinaryOperator 0x1350293e0 <line:19:5, col:15> 'char *' contains-errors '='
|   |   |       |-UnaryOperator 0x1350293a8 <col:5, col:6> 'char *' lvalue prefix '*' cannot overflow
|   |   |       | `-ImplicitCastExpr 0x135029390 <col:6> 'char **' <LValueToRValue>
|   |   |       |   `-DeclRefExpr 0x1350292d8 <col:6> 'char **' lvalue ParmVar 0x13500dda8 'reason' 'char **'
|   |   |       `-RecoveryExpr 0x1350293c0 <col:15> '<dependent type>' contains-errors lvalue
|   |   |-BinaryOperator 0x135029578 <line:23:3, col:32> 'char *' '='
|   |   | |-DeclRefExpr 0x135029470 <col:3> 'char *' lvalue Var 0x13500df58 'options' 'char *'
|   |   | `-CallExpr 0x135029518 <col:13, col:32> 'char *'
|   |   |   |-ImplicitCastExpr 0x135029500 <col:13> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x135029490 <col:13> 'char *(const char *, int)' Function 0x135027860 'strchr' 'char *(const char *, int)'
|   |   |   |-ImplicitCastExpr 0x135029560 <col:20> 'const char *' <NoOp>
|   |   |   | `-ImplicitCastExpr 0x135029548 <col:20> 'char *' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x1350294b0 <col:20> 'char *' lvalue Var 0x13500df58 'options' 'char *'
|   |   |   `-CharacterLiteral 0x1350294d0 <col:29> 'int' 47
|   |   |-IfStmt 0x135029890 <line:24:3, line:28:3>
|   |   | |-UnaryOperator 0x1350295d0 <line:24:7, col:8> 'int' prefix '!' cannot overflow
|   |   | | `-ImplicitCastExpr 0x1350295b8 <col:8> 'char *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x135029598 <col:8> 'char *' lvalue Var 0x13500df58 'options' 'char *'
|   |   | `-CompoundStmt 0x135029878 <col:17, line:28:3>
|   |   |   `-IfStmt 0x135029840 <line:25:4, line:26:15>
|   |   |     |-BinaryOperator 0x1350296f8 <line:25:8, col:36> 'int' '=='
|   |   |     | |-CallExpr 0x135029660 <col:8, col:30> 'int'
|   |   |     | | |-ImplicitCastExpr 0x135029648 <col:8> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | | | `-DeclRefExpr 0x1350295e8 <col:8> 'int ()' Function 0x135027bd8 'asprintf' 'int ()'
|   |   |     | | |-ImplicitCastExpr 0x135029690 <col:17> 'char **' <LValueToRValue>
|   |   |     | | | `-DeclRefExpr 0x135029608 <col:17> 'char **' lvalue ParmVar 0x13500dda8 'reason' 'char **'
|   |   |     | | `-ImplicitCastExpr 0x1350296a8 <col:25> 'char *' <ArrayToPointerDecay>
|   |   |     | |   `-StringLiteral 0x135029628 <col:25> 'char[4]' lvalue "STR"
|   |   |     | `-UnaryOperator 0x1350296e0 <col:35, col:36> 'int' prefix '-'
|   |   |     |   `-IntegerLiteral 0x1350296c0 <col:36> 'int' 1
|   |   |     `-BinaryOperator 0x135029820 <line:26:5, col:15> 'char *' contains-errors '='
|   |   |       |-UnaryOperator 0x1350297e8 <col:5, col:6> 'char *' lvalue prefix '*' cannot overflow
|   |   |       | `-ImplicitCastExpr 0x1350297d0 <col:6> 'char **' <LValueToRValue>
|   |   |       |   `-DeclRefExpr 0x135029718 <col:6> 'char **' lvalue ParmVar 0x13500dda8 'reason' 'char **'
|   |   |       `-RecoveryExpr 0x135029800 <col:15> '<dependent type>' contains-errors lvalue
|   |   `-CompoundAssignOperator 0x1350298f0 <line:29:3, col:14> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
|   |     |-DeclRefExpr 0x1350298b0 <col:3> 'char *' lvalue Var 0x13500df58 'options' 'char *'
|   |     `-IntegerLiteral 0x1350298d0 <col:14> 'int' 1
|   |-BinaryOperator 0x1350299c8 <line:32:2, col:9> 'char *' '='
|   | |-DeclRefExpr 0x135029970 <col:2> 'char *' lvalue Var 0x13500dff0 'path' 'char *'
|   | `-ImplicitCastExpr 0x1350299b0 <col:9> 'char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x135029990 <col:9> 'char *' lvalue Var 0x13500df58 'options' 'char *'
|   |-IfStmt 0x135029ce0 <line:33:2, line:37:2>
|   | |-UnaryOperator 0x135029a20 <line:33:6, col:7> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x135029a08 <col:7> 'char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1350299e8 <col:7> 'char *' lvalue Var 0x13500dff0 'path' 'char *'
|   | `-CompoundStmt 0x135029cc8 <col:13, line:37:2>
|   |   `-IfStmt 0x135029c90 <line:34:3, line:35:14>
|   |     |-BinaryOperator 0x135029b48 <line:34:7, col:35> 'int' '=='
|   |     | |-CallExpr 0x135029ab0 <col:7, col:29> 'int'
|   |     | | |-ImplicitCastExpr 0x135029a98 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x135029a38 <col:7> 'int ()' Function 0x135027bd8 'asprintf' 'int ()'
|   |     | | |-ImplicitCastExpr 0x135029ae0 <col:16> 'char **' <LValueToRValue>
|   |     | | | `-DeclRefExpr 0x135029a58 <col:16> 'char **' lvalue ParmVar 0x13500dda8 'reason' 'char **'
|   |     | | `-ImplicitCastExpr 0x135029af8 <col:24> 'char *' <ArrayToPointerDecay>
|   |     | |   `-StringLiteral 0x135029a78 <col:24> 'char[4]' lvalue "STR"
|   |     | `-UnaryOperator 0x135029b30 <col:34, col:35> 'int' prefix '-'
|   |     |   `-IntegerLiteral 0x135029b10 <col:35> 'int' 1
|   |     `-BinaryOperator 0x135029c70 <line:35:4, col:14> 'char *' contains-errors '='
|   |       |-UnaryOperator 0x135029c38 <col:4, col:5> 'char *' lvalue prefix '*' cannot overflow
|   |       | `-ImplicitCastExpr 0x135029c20 <col:5> 'char **' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x135029b68 <col:5> 'char **' lvalue ParmVar 0x13500dda8 'reason' 'char **'
|   |       `-RecoveryExpr 0x135029c50 <col:14> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x13502a5e0 <line:45:2, line:49:2>
|   | |-BinaryOperator 0x13502a430 <line:45:6, col:13> 'int' '=='
|   | | |-ImplicitCastExpr 0x13502a418 <col:6> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x135029fb8 <col:6> 'int' lvalue Var 0x13500e088 'fd' 'int'
|   | | `-UnaryOperator 0x13502a400 <col:12, col:13> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x135029fd8 <col:13> 'int' 1
|   | `-CompoundStmt 0x13502a5d0 <col:16, line:49:2>
|   `-CallExpr 0x13502a738 <line:51:2, col:13> 'int'
|     |-ImplicitCastExpr 0x13502a720 <col:2> 'int (*)()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x13502a6e0 <col:2> 'int ()' Function 0x13502a628 'unlink' 'int ()'
|     `-ImplicitCastExpr 0x13502a760 <col:9> 'char *' <LValueToRValue>
|       `-DeclRefExpr 0x13502a700 <col:9> 'char *' lvalue Var 0x13500dff0 'path' 'char *'
|-FunctionDecl 0x135027860 <line:8:12> col:12 implicit used strchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x135027960 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1350279c8 <<invalid sloc>> <invalid sloc> 'int'
| `-BuiltinAttr 0x135027908 <<invalid sloc>> Implicit 893
`-FunctionDecl 0x135028158 <line:16:7> col:7 implicit used strncasecmp 'int (const char *, const char *, unsigned long)' extern
  |-ParmVarDecl 0x135028258 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x1350282c0 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x135028328 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x135028200 <<invalid sloc>> Implicit 958
