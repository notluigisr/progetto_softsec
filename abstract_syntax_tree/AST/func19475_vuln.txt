TranslationUnitDecl 0x140055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1400564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x140055bd0 '__int128'
|-TypedefDecl 0x140056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x140055bf0 'unsigned __int128'
|-TypedefDecl 0x140126a30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x140126800 'struct __NSConstantString_tag'
|   `-Record 0x140056580 '__NSConstantString_tag'
|-TypedefDecl 0x140126a98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x140055d90 '__SVInt8_t'
|-TypedefDecl 0x140126b00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x140055db0 '__SVInt16_t'
|-TypedefDecl 0x140126b68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x140055dd0 '__SVInt32_t'
|-TypedefDecl 0x140126bd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x140055df0 '__SVInt64_t'
|-TypedefDecl 0x140126c38 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x140055e10 '__SVUint8_t'
|-TypedefDecl 0x140126ca0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x140055e30 '__SVUint16_t'
|-TypedefDecl 0x140126d08 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x140055e50 '__SVUint32_t'
|-TypedefDecl 0x140126d70 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x140055e70 '__SVUint64_t'
|-TypedefDecl 0x140126dd8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x140055e90 '__SVFloat16_t'
|-TypedefDecl 0x140126e40 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x140055eb0 '__SVFloat32_t'
|-TypedefDecl 0x140126ea8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x140055ed0 '__SVFloat64_t'
|-TypedefDecl 0x140126f10 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x140055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x140126f78 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x140055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x140126fe0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x140055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x140127048 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x140055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x1401270b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x140055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x140127118 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x140055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x140127180 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x140055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x1401271e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x140055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x140127250 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x140055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x1401272b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x140056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x140127320 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x140056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x140127388 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x140056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x1401273f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x140056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x140127458 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x140056090 '__clang_svint8x3_t'
|-TypedefDecl 0x1401274c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1400560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x140127528 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1400560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x140127590 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1400560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x1401275f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x140056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x140127660 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x140056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x1401276c8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x140056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x140127730 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x140056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x140127798 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x140056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x140128000 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1400561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x140128068 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1400561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1401280d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1400561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x140128138 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x140056210 '__clang_svint8x4_t'
|-TypedefDecl 0x1401281a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x140056230 '__clang_svint16x4_t'
|-TypedefDecl 0x140128208 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x140056250 '__clang_svint32x4_t'
|-TypedefDecl 0x140128270 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x140056270 '__clang_svint64x4_t'
|-TypedefDecl 0x1401282d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x140056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x140128340 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1400562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x1401283a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1400562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x140128410 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1400562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x140128478 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x140056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x1401284e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x140056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x140128548 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x140056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x1401285b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x140056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x140128618 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x140056390 '__SVBool_t'
|-TypedefDecl 0x140128680 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1400563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x1401286e8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1400563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x140128750 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1400563f0 '__SVCount_t'
|-TypedefDecl 0x1401287f8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1401287b0 'char *'
|   `-BuiltinType 0x1400556b0 'char'
|-TypedefDecl 0x140128868 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1401287b0 'char *'
|   `-BuiltinType 0x1400556b0 'char'
`-FunctionDecl 0x140128bd8 <dataset_diviso_filec/func19475_vuln.c:1:1, line:78:1> line:1:1 invalid _asn1_get_octet_string 'int (int, const unsigned char *, unsigned int, int *)'
  |-ParmVarDecl 0x1401288f0 <col:25, col:35> col:35 invalid node 'int'
  |-ParmVarDecl 0x1401289a8 <col:41, col:62> col:62 used der 'const unsigned char *'
  |-ParmVarDecl 0x140128a28 <col:67, col:76> col:76 used der_len 'unsigned int'
  |-ParmVarDecl 0x140128ad8 <col:85, col:90> col:90 used len 'int *'
  `-CompoundStmt 0x140144768 <line:2:1, line:78:1>
    |-DeclStmt 0x140128f50 <line:3:3, col:47>
    | |-VarDecl 0x140128cb8 <col:3, col:7> col:7 used len2 'int'
    | |-VarDecl 0x140128d38 <col:3, col:13> col:13 used len3 'int'
    | |-VarDecl 0x140128db8 <col:3, col:19> col:19 used counter 'int'
    | |-VarDecl 0x140128e38 <col:3, col:28> col:28 used tot_len 'int'
    | `-VarDecl 0x140128eb8 <col:3, col:37> col:37 used indefinite 'int'
    |-BinaryOperator 0x140128fa8 <line:5:3, col:13> 'int' '='
    | |-DeclRefExpr 0x140128f68 <col:3> 'int' lvalue Var 0x140128db8 'counter' 'int'
    | `-IntegerLiteral 0x140128f88 <col:13> 'int' 0
    |-IfStmt 0x140144648 <line:7:3, line:73:5> has_else
    | |-BinaryOperator 0x1401421c8 <line:7:7, col:20> '<dependent type>' contains-errors '&'
    | | |-UnaryOperator 0x140142190 <col:7, col:16> 'const unsigned char' lvalue prefix '*' cannot overflow
    | | | `-ParenExpr 0x140142170 <col:8, col:16> 'const unsigned char *'
    | | |   `-BinaryOperator 0x140142150 <col:9, col:15> 'const unsigned char *' '-'
    | | |     |-ImplicitCastExpr 0x140142138 <col:9> 'const unsigned char *' <LValueToRValue>
    | | |     | `-DeclRefExpr 0x140128fc8 <col:9> 'const unsigned char *' lvalue ParmVar 0x1401289a8 'der' 'const unsigned char *'
    | | |     `-IntegerLiteral 0x140142000 <col:15> 'int' 1
    | | `-RecoveryExpr 0x1401421a8 <col:20> '<dependent type>' contains-errors lvalue
    | |-CompoundStmt 0x140143db8 <line:8:5, line:63:5>
    | | |-BinaryOperator 0x140142228 <line:9:7, col:17> 'int' '='
    | | | |-DeclRefExpr 0x1401421e8 <col:7> 'int' lvalue Var 0x140128e38 'tot_len' 'int'
    | | | `-IntegerLiteral 0x140142208 <col:17> 'int' 0
    | | |-BinaryOperator 0x140142510 <line:10:7, col:60> 'int' '='
    | | | |-DeclRefExpr 0x140142248 <col:7> 'int' lvalue Var 0x140128eb8 'indefinite' 'int'
    | | | `-CallExpr 0x1401424a8 <col:20, col:60> 'int'
    | | |   |-ImplicitCastExpr 0x140142490 <col:20> 'int (*)()' <FunctionToPointerDecay>
    | | |   | `-DeclRefExpr 0x1401423c0 <col:20> 'int ()' Function 0x140142308 'asn1_get_length_der' 'int ()'
    | | |   |-ImplicitCastExpr 0x1401424e0 <col:41> 'const unsigned char *' <LValueToRValue>
    | | |   | `-DeclRefExpr 0x1401423e0 <col:41> 'const unsigned char *' lvalue ParmVar 0x1401289a8 'der' 'const unsigned char *'
    | | |   |-ImplicitCastExpr 0x1401424f8 <col:46> 'unsigned int' <LValueToRValue>
    | | |   | `-DeclRefExpr 0x140142400 <col:46> 'unsigned int' lvalue ParmVar 0x140128a28 'der_len' 'unsigned int'
    | | |   `-UnaryOperator 0x140142440 <col:55, col:56> 'int *' prefix '&' cannot overflow
    | | |     `-DeclRefExpr 0x140142420 <col:56> 'int' lvalue Var 0x140128d38 'len3' 'int'
    | | |-IfStmt 0x140142608 <line:11:7, line:12:9>
    | | | |-BinaryOperator 0x1401425a0 <line:11:11, col:25> 'int' '<'
    | | | | |-ImplicitCastExpr 0x140142588 <col:11> 'int' <LValueToRValue>
    | | | | | `-DeclRefExpr 0x140142530 <col:11> 'int' lvalue Var 0x140128eb8 'indefinite' 'int'
    | | | | `-UnaryOperator 0x140142570 <col:24, col:25> 'int' prefix '-'
    | | | |   `-IntegerLiteral 0x140142550 <col:25> 'int' 1
    | | | `-ReturnStmt 0x1401425f8 <line:12:2, col:9>
    | | |   `-RecoveryExpr 0x1401425d8 <col:9> '<dependent type>' contains-errors lvalue
    | | |-CompoundAssignOperator 0x140142680 <line:14:7, col:18> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    | | | |-DeclRefExpr 0x140142628 <col:7> 'int' lvalue Var 0x140128db8 'counter' 'int'
    | | | `-ImplicitCastExpr 0x140142668 <col:18> 'int' <LValueToRValue>
    | | |   `-DeclRefExpr 0x140142648 <col:18> 'int' lvalue Var 0x140128d38 'len3' 'int'
    | | |-IfStmt 0x1401427b0 <line:15:7, line:16:16>
    | | | |-BinaryOperator 0x140142708 <line:15:11, col:25> 'int' '>='
    | | | | |-ImplicitCastExpr 0x1401426f0 <col:11> 'int' <LValueToRValue>
    | | | | | `-DeclRefExpr 0x1401426b0 <col:11> 'int' lvalue Var 0x140128eb8 'indefinite' 'int'
    | | | | `-IntegerLiteral 0x1401426d0 <col:25> 'int' 0
    | | | `-CompoundAssignOperator 0x140142780 <line:16:2, col:16> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    | | |   |-DeclRefExpr 0x140142728 <col:2> 'int' lvalue Var 0x140128eb8 'indefinite' 'int'
    | | |   `-ImplicitCastExpr 0x140142768 <col:16> 'int' <LValueToRValue>
    | | |     `-DeclRefExpr 0x140142748 <col:16> 'int' lvalue Var 0x140128d38 'len3' 'int'
    | | |-WhileStmt 0x1401434f0 <line:18:7, line:45:2>
    | | | |-IntegerLiteral 0x1401427d0 <line:18:14> 'int' 1
    | | | `-CompoundStmt 0x1401434a0 <line:19:2, line:45:2>
    | | |   |-IfStmt 0x1401428e0 <line:20:4, line:21:13>
    | | |   | |-BinaryOperator 0x140142878 <line:20:8, col:18> 'int' '>'
    | | |   | | |-ImplicitCastExpr 0x140142860 <col:8> 'unsigned int' <IntegralCast>
    | | |   | | | `-ImplicitCastExpr 0x140142830 <col:8> 'int' <LValueToRValue>
    | | |   | | |   `-DeclRefExpr 0x1401427f0 <col:8> 'int' lvalue Var 0x140128db8 'counter' 'int'
    | | |   | | `-ImplicitCastExpr 0x140142848 <col:18> 'unsigned int' <LValueToRValue>
    | | |   | |   `-DeclRefExpr 0x140142810 <col:18> 'unsigned int' lvalue ParmVar 0x140128a28 'der_len' 'unsigned int'
    | | |   | `-ReturnStmt 0x1401428d0 <line:21:6, col:13>
    | | |   |   `-RecoveryExpr 0x1401428b0 <col:13> '<dependent type>' contains-errors lvalue
    | | |   |-IfStmt 0x140142db8 <line:23:4, line:32:6> has_else
    | | |   | |-BinaryOperator 0x140142970 <line:23:8, col:23> 'int' '=='
    | | |   | | |-ImplicitCastExpr 0x140142958 <col:8> 'int' <LValueToRValue>
    | | |   | | | `-DeclRefExpr 0x140142900 <col:8> 'int' lvalue Var 0x140128eb8 'indefinite' 'int'
    | | |   | | `-UnaryOperator 0x140142940 <col:22, col:23> 'int' prefix '-'
    | | |   | |   `-IntegerLiteral 0x140142920 <col:23> 'int' 1
    | | |   | |-CompoundStmt 0x140142ce8 <line:24:6, line:30:6>
    | | |   | | `-IfStmt 0x140142cc8 <line:25:8, line:29:3>
    | | |   | |   |-BinaryOperator 0x140142c10 <line:25:12, col:57> 'int' '&&'
    | | |   | |   | |-ParenExpr 0x140142a90 <col:12, col:30> 'int'
    | | |   | |   | | `-BinaryOperator 0x140142a70 <col:13, col:29> 'int' '=='
    | | |   | |   | |   |-ImplicitCastExpr 0x140142a58 <col:13, col:24> 'int' <IntegralCast>
    | | |   | |   | |   | `-ImplicitCastExpr 0x140142a40 <col:13, col:24> 'unsigned char' <LValueToRValue>
    | | |   | |   | |   |   `-ArraySubscriptExpr 0x140142a00 <col:13, col:24> 'const unsigned char' lvalue
    | | |   | |   | |   |     |-ImplicitCastExpr 0x1401429d0 <col:13> 'const unsigned char *' <LValueToRValue>
    | | |   | |   | |   |     | `-DeclRefExpr 0x140142990 <col:13> 'const unsigned char *' lvalue ParmVar 0x1401289a8 'der' 'const unsigned char *'
    | | |   | |   | |   |     `-ImplicitCastExpr 0x1401429e8 <col:17> 'int' <LValueToRValue>
    | | |   | |   | |   |       `-DeclRefExpr 0x1401429b0 <col:17> 'int' lvalue Var 0x140128db8 'counter' 'int'
    | | |   | |   | |   `-IntegerLiteral 0x140142a20 <col:29> 'int' 0
    | | |   | |   | `-ParenExpr 0x140142bf0 <col:35, col:57> 'int'
    | | |   | |   |   `-BinaryOperator 0x140142bd0 <col:36, col:56> 'int' '=='
    | | |   | |   |     |-ImplicitCastExpr 0x140142bb8 <col:36, col:51> 'int' <IntegralCast>
    | | |   | |   |     | `-ImplicitCastExpr 0x140142ba0 <col:36, col:51> 'unsigned char' <LValueToRValue>
    | | |   | |   |     |   `-ArraySubscriptExpr 0x140142b60 <col:36, col:51> 'const unsigned char' lvalue
    | | |   | |   |     |     |-ImplicitCastExpr 0x140142b48 <col:36> 'const unsigned char *' <LValueToRValue>
    | | |   | |   |     |     | `-DeclRefExpr 0x140142ab0 <col:36> 'const unsigned char *' lvalue ParmVar 0x1401289a8 'der' 'const unsigned char *'
    | | |   | |   |     |     `-BinaryOperator 0x140142b28 <col:40, col:50> 'int' '+'
    | | |   | |   |     |       |-ImplicitCastExpr 0x140142b10 <col:40> 'int' <LValueToRValue>
    | | |   | |   |     |       | `-DeclRefExpr 0x140142ad0 <col:40> 'int' lvalue Var 0x140128db8 'counter' 'int'
    | | |   | |   |     |       `-IntegerLiteral 0x140142af0 <col:50> 'int' 1
    | | |   | |   |     `-IntegerLiteral 0x140142b80 <col:56> 'int' 0
    | | |   | |   `-CompoundStmt 0x140142ca8 <line:26:3, line:29:3>
    | | |   | |     |-CompoundAssignOperator 0x140142c70 <line:27:5, col:16> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    | | |   | |     | |-DeclRefExpr 0x140142c30 <col:5> 'int' lvalue Var 0x140128db8 'counter' 'int'
    | | |   | |     | `-IntegerLiteral 0x140142c50 <col:16> 'int' 2
    | | |   | |     `-BreakStmt 0x140142ca0 <line:28:5>
    | | |   | `-IfStmt 0x140142d98 <line:31:9, line:32:6>
    | | |   |   |-BinaryOperator 0x140142d70 <line:31:13, col:24> 'int' '>='
    | | |   |   | |-ImplicitCastExpr 0x140142d40 <col:13> 'int' <LValueToRValue>
    | | |   |   | | `-DeclRefExpr 0x140142d00 <col:13> 'int' lvalue Var 0x140128db8 'counter' 'int'
    | | |   |   | `-ImplicitCastExpr 0x140142d58 <col:24> 'int' <LValueToRValue>
    | | |   |   |   `-DeclRefExpr 0x140142d20 <col:24> 'int' lvalue Var 0x140128eb8 'indefinite' 'int'
    | | |   |   `-BreakStmt 0x140142d90 <line:32:6>
    | | |   |-IfStmt 0x140142fd8 <line:34:4, line:35:13>
    | | |   | |-BinaryOperator 0x140142f70 <line:34:8, col:24> 'int' contains-errors '!='
    | | |   | | |-ArraySubscriptExpr 0x140142f30 <col:8, col:19> 'const unsigned char' lvalue
    | | |   | | | |-ImplicitCastExpr 0x140142f00 <col:8> 'const unsigned char *' <LValueToRValue>
    | | |   | | | | `-DeclRefExpr 0x140142de8 <col:8> 'const unsigned char *' lvalue ParmVar 0x1401289a8 'der' 'const unsigned char *'
    | | |   | | | `-ImplicitCastExpr 0x140142f18 <col:12> 'int' <LValueToRValue>
    | | |   | | |   `-DeclRefExpr 0x140142e08 <col:12> 'int' lvalue Var 0x140128db8 'counter' 'int'
    | | |   | | `-RecoveryExpr 0x140142f50 <col:24> '<dependent type>' contains-errors lvalue
    | | |   | `-ReturnStmt 0x140142fc8 <line:35:6, col:13>
    | | |   |   `-RecoveryExpr 0x140142fa8 <col:13> '<dependent type>' contains-errors lvalue
    | | |   |-UnaryOperator 0x140143020 <line:37:4, col:11> 'int' postfix '++'
    | | |   | `-DeclRefExpr 0x140143000 <col:4> 'int' lvalue Var 0x140128db8 'counter' 'int'
    | | |   |-BinaryOperator 0x140143238 <line:39:4, col:71> 'int' '='
    | | |   | |-DeclRefExpr 0x140143038 <col:4> 'int' lvalue Var 0x140128cb8 'len2' 'int'
    | | |   | `-CallExpr 0x140143200 <col:11, col:71> 'int'
    | | |   |   |-ImplicitCastExpr 0x1401431e8 <col:11> 'int (*)()' <FunctionToPointerDecay>
    | | |   |   | `-DeclRefExpr 0x140143058 <col:11> 'int ()' Function 0x140142308 'asn1_get_length_der' 'int ()'
    | | |   |   |-BinaryOperator 0x1401430e8 <col:32, col:38> 'const unsigned char *' '+'
    | | |   |   | |-ImplicitCastExpr 0x1401430b8 <col:32> 'const unsigned char *' <LValueToRValue>
    | | |   |   | | `-DeclRefExpr 0x140143078 <col:32> 'const unsigned char *' lvalue ParmVar 0x1401289a8 'der' 'const unsigned char *'
    | | |   |   | `-ImplicitCastExpr 0x1401430d0 <col:38> 'int' <LValueToRValue>
    | | |   |   |   `-DeclRefExpr 0x140143098 <col:38> 'int' lvalue Var 0x140128db8 'counter' 'int'
    | | |   |   |-BinaryOperator 0x140143190 <col:47, col:57> 'unsigned int' '-'
    | | |   |   | |-ImplicitCastExpr 0x140143148 <col:47> 'unsigned int' <LValueToRValue>
    | | |   |   | | `-DeclRefExpr 0x140143108 <col:47> 'unsigned int' lvalue ParmVar 0x140128a28 'der_len' 'unsigned int'
    | | |   |   | `-ImplicitCastExpr 0x140143178 <col:57> 'unsigned int' <IntegralCast>
    | | |   |   |   `-ImplicitCastExpr 0x140143160 <col:57> 'int' <LValueToRValue>
    | | |   |   |     `-DeclRefExpr 0x140143128 <col:57> 'int' lvalue Var 0x140128db8 'counter' 'int'
    | | |   |   `-UnaryOperator 0x1401431d0 <col:66, col:67> 'int *' prefix '&' cannot overflow
    | | |   |     `-DeclRefExpr 0x1401431b0 <col:67> 'int' lvalue Var 0x140128d38 'len3' 'int'
    | | |   |-IfStmt 0x140143318 <line:40:4, line:41:13>
    | | |   | |-BinaryOperator 0x1401432b0 <line:40:8, col:16> 'int' '<='
    | | |   | | |-ImplicitCastExpr 0x140143298 <col:8> 'int' <LValueToRValue>
    | | |   | | | `-DeclRefExpr 0x140143258 <col:8> 'int' lvalue Var 0x140128cb8 'len2' 'int'
    | | |   | | `-IntegerLiteral 0x140143278 <col:16> 'int' 0
    | | |   | `-ReturnStmt 0x140143308 <line:41:6, col:13>
    | | |   |   `-RecoveryExpr 0x1401432e8 <col:13> '<dependent type>' contains-errors lvalue
    | | |   |-CompoundAssignOperator 0x1401433e8 <line:43:4, col:22> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    | | |   | |-DeclRefExpr 0x140143338 <col:4> 'int' lvalue Var 0x140128db8 'counter' 'int'
    | | |   | `-BinaryOperator 0x1401433c8 <col:15, col:22> 'int' '+'
    | | |   |   |-ImplicitCastExpr 0x140143398 <col:15> 'int' <LValueToRValue>
    | | |   |   | `-DeclRefExpr 0x140143358 <col:15> 'int' lvalue Var 0x140128d38 'len3' 'int'
    | | |   |   `-ImplicitCastExpr 0x1401433b0 <col:22> 'int' <LValueToRValue>
    | | |   |     `-DeclRefExpr 0x140143378 <col:22> 'int' lvalue Var 0x140128cb8 'len2' 'int'
    | | |   `-CompoundAssignOperator 0x140143470 <line:44:4, col:15> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    | | |     |-DeclRefExpr 0x140143418 <col:4> 'int' lvalue Var 0x140128e38 'tot_len' 'int'
    | | |     `-ImplicitCastExpr 0x140143458 <col:15> 'int' <LValueToRValue>
    | | |       `-DeclRefExpr 0x140143438 <col:15> 'int' lvalue Var 0x140128cb8 'len2' 'int'
    | | `-IfStmt 0x140143d98 <line:48:7, line:62:2>
    | |   |-RecoveryExpr 0x140143510 <line:48:11> '<dependent type>' contains-errors lvalue
    | |   `-CompoundStmt 0x140143d50 <line:49:2, line:62:2>
    | |     |-DeclStmt 0x1401435c8 <line:50:4, col:44>
    | |     | `-VarDecl 0x140143560 <col:4, col:18> col:18 invalid temp 'unsigned char'
    | |     |-DeclStmt 0x140143660 <line:51:4, col:11>
    | |     | `-VarDecl 0x1401435f8 <col:4, col:8> col:8 used ret 'int'
    | |     |-BinaryOperator 0x140143710 <line:53:4, col:23> 'int' contains-errors '='
    | |     | |-DeclRefExpr 0x140143678 <col:4> 'int' lvalue Var 0x140128cb8 'len2' 'int'
    | |     | `-ImplicitCastExpr 0x1401436f8 <col:11, col:23> 'int' contains-errors <IntegralCast>
    | |     |   `-UnaryExprOrTypeTraitExpr 0x1401436d8 <col:11, col:23> 'unsigned long' contains-errors sizeof
    | |     |     `-ParenExpr 0x1401436b8 <col:18, col:23> '<dependent type>' contains-errors lvalue
    | |     |       `-RecoveryExpr 0x140143698 <col:19> '<dependent type>' contains-errors lvalue
    | |     |-CallExpr 0x1401438a8 <line:55:4, col:41> '<dependent type>' contains-errors
    | |     | |-DeclRefExpr 0x140143810 <col:4> 'int ()' Function 0x140143758 'asn1_length_der' 'int ()'
    | |     | |-DeclRefExpr 0x140143830 <col:21> 'int' lvalue Var 0x140128e38 'tot_len' 'int'
    | |     | |-RecoveryExpr 0x140143850 <col:30> '<dependent type>' contains-errors lvalue
    | |     | `-UnaryOperator 0x140143890 <col:36, col:37> 'int *' prefix '&' cannot overflow
    | |     |   `-DeclRefExpr 0x140143870 <col:37> 'int' lvalue Var 0x140128cb8 'len2' 'int'
    | |     |-CallExpr 0x140143a40 <line:56:4, col:37> '<dependent type>' contains-errors
    | |     | |-DeclRefExpr 0x1401439c0 <col:4> 'int ()' Function 0x140143908 '_asn1_set_value' 'int ()'
    | |     | |-RecoveryExpr 0x1401439e0 <col:21> '<dependent type>' contains-errors lvalue
    | |     | |-RecoveryExpr 0x140143a00 <col:27> '<dependent type>' contains-errors lvalue
    | |     | `-DeclRefExpr 0x140143a20 <col:33> 'int' lvalue Var 0x140128cb8 'len2' 'int'
    | |     |-BinaryOperator 0x140143c30 <line:58:4, col:53> 'int' contains-errors '='
    | |     | |-DeclRefExpr 0x140143a78 <col:4> 'int' lvalue Var 0x1401435f8 'ret' 'int'
    | |     | `-CallExpr 0x140143bf8 <col:10, col:53> '<dependent type>' contains-errors
    | |     |   |-DeclRefExpr 0x140143b78 <col:10> 'int ()' Function 0x140143ac0 '_asn1_extract_der_octet' 'int ()'
    | |     |   |-RecoveryExpr 0x140143b98 <col:35> '<dependent type>' contains-errors lvalue
    | |     |   |-DeclRefExpr 0x140143bb8 <col:41> 'const unsigned char *' lvalue ParmVar 0x1401289a8 'der' 'const unsigned char *'
    | |     |   `-DeclRefExpr 0x140143bd8 <col:46> 'unsigned int' lvalue ParmVar 0x140128a28 'der_len' 'unsigned int'
    | |     `-IfStmt 0x140143d30 <line:59:4, line:60:13>
    | |       |-BinaryOperator 0x140143cc8 <line:59:8, col:15> 'int' contains-errors '!='
    | |       | |-DeclRefExpr 0x140143c50 <col:8> 'int' lvalue Var 0x1401435f8 'ret' 'int'
    | |       | `-RecoveryExpr 0x140143ca8 <col:15> '<dependent type>' contains-errors lvalue
    | |       `-ReturnStmt 0x140143d20 <line:60:6, col:13>
    | |         `-ImplicitCastExpr 0x140143d08 <col:13> 'int' <LValueToRValue>
    | |           `-DeclRefExpr 0x140143ce8 <col:13> 'int' lvalue Var 0x1401435f8 'ret' 'int'
    | `-CompoundStmt 0x140144618 <line:65:5, line:73:5>
    |   |-BinaryOperator 0x140143f38 <line:66:7, col:54> 'int' '='
    |   | |-DeclRefExpr 0x140143e00 <col:7> 'int' lvalue Var 0x140128cb8 'len2' 'int'
    |   | `-CallExpr 0x140143ed0 <col:14, col:54> 'int'
    |   |   |-ImplicitCastExpr 0x140143eb8 <col:14> 'int (*)()' <FunctionToPointerDecay>
    |   |   | `-DeclRefExpr 0x140143e20 <col:14> 'int ()' Function 0x140142308 'asn1_get_length_der' 'int ()'
    |   |   |-ImplicitCastExpr 0x140143f08 <col:35> 'const unsigned char *' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x140143e40 <col:35> 'const unsigned char *' lvalue ParmVar 0x1401289a8 'der' 'const unsigned char *'
    |   |   |-ImplicitCastExpr 0x140143f20 <col:40> 'unsigned int' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x140143e60 <col:40> 'unsigned int' lvalue ParmVar 0x140128a28 'der_len' 'unsigned int'
    |   |   `-UnaryOperator 0x140143ea0 <col:49, col:50> 'int *' prefix '&' cannot overflow
    |   |     `-DeclRefExpr 0x140143e80 <col:50> 'int' lvalue Var 0x140128d38 'len3' 'int'
    |   |-IfStmt 0x140144430 <line:67:7, line:68:9>
    |   | |-BinaryOperator 0x140143fb0 <line:67:11, col:18> 'int' '<'
    |   | | |-ImplicitCastExpr 0x140143f98 <col:11> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x140143f58 <col:11> 'int' lvalue Var 0x140128cb8 'len2' 'int'
    |   | | `-IntegerLiteral 0x140143f78 <col:18> 'int' 0
    |   | `-ReturnStmt 0x140144420 <line:68:2, col:9>
    |   |   `-RecoveryExpr 0x140144400 <col:9> '<dependent type>' contains-errors lvalue
    |   |-BinaryOperator 0x140144500 <line:70:7, col:24> 'int' '='
    |   | |-DeclRefExpr 0x140144450 <col:7> 'int' lvalue Var 0x140128db8 'counter' 'int'
    |   | `-BinaryOperator 0x1401444e0 <col:17, col:24> 'int' '+'
    |   |   |-ImplicitCastExpr 0x1401444b0 <col:17> 'int' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x140144470 <col:17> 'int' lvalue Var 0x140128d38 'len3' 'int'
    |   |   `-ImplicitCastExpr 0x1401444c8 <col:24> 'int' <LValueToRValue>
    |   |     `-DeclRefExpr 0x140144490 <col:24> 'int' lvalue Var 0x140128cb8 'len2' 'int'
    |   `-IfStmt 0x1401445f8 <line:71:7, line:72:37>
    |     |-RecoveryExpr 0x140144520 <line:71:11> '<dependent type>' contains-errors lvalue
    |     `-CallExpr 0x1401445c0 <line:72:2, col:37> '<dependent type>' contains-errors
    |       |-DeclRefExpr 0x140144540 <col:2> 'int ()' Function 0x140143908 '_asn1_set_value' 'int ()'
    |       |-RecoveryExpr 0x140144560 <col:19> '<dependent type>' contains-errors lvalue
    |       |-DeclRefExpr 0x140144580 <col:25> 'const unsigned char *' lvalue ParmVar 0x1401289a8 'der' 'const unsigned char *'
    |       `-DeclRefExpr 0x1401445a0 <col:30> 'int' lvalue Var 0x140128db8 'counter' 'int'
    |-BinaryOperator 0x140144700 <line:75:3, col:10> 'int' '='
    | |-UnaryOperator 0x1401446b0 <col:3, col:4> 'int' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x140144698 <col:4> 'int *' <LValueToRValue>
    | |   `-DeclRefExpr 0x140144678 <col:4> 'int *' lvalue ParmVar 0x140128ad8 'len' 'int *'
    | `-ImplicitCastExpr 0x1401446e8 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x1401446c8 <col:10> 'int' lvalue Var 0x140128db8 'counter' 'int'
    `-ReturnStmt 0x140144758 <line:76:3, col:10>
      `-RecoveryExpr 0x140144738 <col:10> '<dependent type>' contains-errors lvalue
