TranslationUnitDecl 0x13e055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x13e0564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x13e055bd0 '__int128'
|-TypedefDecl 0x13e056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x13e055bf0 'unsigned __int128'
|-TypedefDecl 0x13e80be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13e80bc00 'struct __NSConstantString_tag'
|   `-Record 0x13e056580 '__NSConstantString_tag'
|-TypedefDecl 0x13e80be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x13e055d90 '__SVInt8_t'
|-TypedefDecl 0x13e80bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x13e055db0 '__SVInt16_t'
|-TypedefDecl 0x13e80bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x13e055dd0 '__SVInt32_t'
|-TypedefDecl 0x13e80bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x13e055df0 '__SVInt64_t'
|-TypedefDecl 0x13e80c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x13e055e10 '__SVUint8_t'
|-TypedefDecl 0x13e80c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x13e055e30 '__SVUint16_t'
|-TypedefDecl 0x13e80c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x13e055e50 '__SVUint32_t'
|-TypedefDecl 0x13e80c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x13e055e70 '__SVUint64_t'
|-TypedefDecl 0x13e80c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x13e055e90 '__SVFloat16_t'
|-TypedefDecl 0x13e80c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x13e055eb0 '__SVFloat32_t'
|-TypedefDecl 0x13e80c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x13e055ed0 '__SVFloat64_t'
|-TypedefDecl 0x13e80c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x13e055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13e80c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x13e055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13e80c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x13e055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13e80c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x13e055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13e80c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x13e055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13e80c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x13e055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13e80c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x13e055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13e80c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x13e055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13e80c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x13e055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13e80c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x13e056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13e80c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x13e056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13e80c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x13e056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13e80c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x13e056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13e80c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x13e056090 '__clang_svint8x3_t'
|-TypedefDecl 0x13e80c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x13e0560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13e80c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x13e0560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13e80c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x13e0560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13e80c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x13e056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13e80ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x13e056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13e80cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x13e056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13e80cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x13e056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13e80cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x13e056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13e80d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x13e0561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13e80d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x13e0561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13e80d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x13e0561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13e80d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x13e056210 '__clang_svint8x4_t'
|-TypedefDecl 0x13e80d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x13e056230 '__clang_svint16x4_t'
|-TypedefDecl 0x13e80d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x13e056250 '__clang_svint32x4_t'
|-TypedefDecl 0x13e80d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x13e056270 '__clang_svint64x4_t'
|-TypedefDecl 0x13e80d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x13e056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13e80d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x13e0562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13e80d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x13e0562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13e80d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x13e0562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13e80d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x13e056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13e80d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x13e056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13e80d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x13e056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13e80d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x13e056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13e80da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x13e056390 '__SVBool_t'
|-TypedefDecl 0x13e80da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x13e0563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13e80dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x13e0563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13e80db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x13e0563f0 '__SVCount_t'
|-TypedefDecl 0x13e80dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13e80dbb0 'char *'
|   `-BuiltinType 0x13e0556b0 'char'
|-TypedefDecl 0x13e80dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13e80dbb0 'char *'
|   `-BuiltinType 0x13e0556b0 'char'
|-FunctionDecl 0x13e80df18 <dataset_diviso_filec/func11627_nonvuln.c:1:1, line:42:1> line:1:1 invalid put_param_pdf14_spot_names 'int (int *, int *, int *)'
| |-ParmVarDecl 0x13e80dd28 <col:28, col:40> col:40 invalid pdev 'int *'
| |-ParmVarDecl 0x13e80dda8 <line:2:17, col:34> col:34 referenced invalid pseparations 'int *'
| |-ParmVarDecl 0x13e80de28 <col:48, col:64> col:64 invalid plist 'int *'
| `-CompoundStmt 0x13e1237d0 <line:3:1, line:42:1>
|   |-DeclStmt 0x13e80e178 <line:4:5, col:33>
|   | |-VarDecl 0x13e80dff0 <col:5, col:9> col:9 used code 'int'
|   | |-VarDecl 0x13e80e070 <col:5, col:15> col:15 used num_spot_colors 'int'
|   | `-VarDecl 0x13e80e0f0 <col:5, col:32> col:32 used i 'int'
|   |-BinaryOperator 0x13e827858 <line:8:5, line:9:65> 'int' contains-errors '='
|   | |-DeclRefExpr 0x13e80e190 <line:8:5> 'int' lvalue Var 0x13e80dff0 'code' 'int'
|   | `-CallExpr 0x13e827820 <col:12, line:9:65> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x13e80e310 <line:8:12> 'int ()' Function 0x13e80e258 'param_read_int' 'int ()'
|   |   |-RecoveryExpr 0x13e80e330 <col:27> '<dependent type>' contains-errors lvalue
|   |   |-RecoveryExpr 0x13e827800 <col:34> '<dependent type>' contains-errors lvalue
|   |   `-UnaryOperator 0x13e80e388 <line:9:49, col:50> 'int *' prefix '&' cannot overflow
|   |     `-DeclRefExpr 0x13e80e368 <col:50> 'int' lvalue Var 0x13e80e070 'num_spot_colors' 'int'
|   |-SwitchStmt 0x13e8278b0 <line:10:5, line:40:5>
|   | |-ImplicitCastExpr 0x13e827898 <line:10:13> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x13e827878 <col:13> 'int' lvalue Var 0x13e80dff0 'code' 'int'
|   | `-CompoundStmt 0x13e123750 <col:19, line:40:5>
|   |   |-DefaultStmt 0x13e827ac0 <line:11:9, line:12:72>
|   |   | `-CallExpr 0x13e827a88 <col:13, col:72> '<dependent type>' contains-errors
|   |   |   |-DeclRefExpr 0x13e8279b8 <col:13> 'int ()' Function 0x13e827900 'param_signal_error' 'int ()'
|   |   |   |-RecoveryExpr 0x13e8279d8 <col:32> '<dependent type>' contains-errors lvalue
|   |   |   |-RecoveryExpr 0x13e827a68 <col:39> '<dependent type>' contains-errors lvalue
|   |   |   `-DeclRefExpr 0x13e827a10 <col:68> 'int' lvalue Var 0x13e80dff0 'code' 'int'
|   |   |-BreakStmt 0x13e827ae0 <line:13:13>
|   |   |-CaseStmt 0x13e827b20 <line:14:9, line:15:20>
|   |   | |-ConstantExpr 0x13e827b08 <line:14:14> 'int'
|   |   | | `-IntegerLiteral 0x13e827ae8 <col:14> 'int' 1
|   |   | `-ReturnStmt 0x13e827b68 <line:15:13, col:20>
|   |   |   `-IntegerLiteral 0x13e827b48 <col:20> 'int' 0
|   |   |-CaseStmt 0x13e827bb0 <line:16:9, line:19:49>
|   |   | |-ConstantExpr 0x13e827b98 <line:16:14> 'int'
|   |   | | `-IntegerLiteral 0x13e827b78 <col:14> 'int' 0
|   |   | `-IfStmt 0x13e827f20 <line:17:13, line:19:49>
|   |   |   |-BinaryOperator 0x13e827d78 <line:17:17, line:18:35> 'int' contains-errors '||'
|   |   |   | |-BinaryOperator 0x13e827d18 <line:17:17, col:35> 'int' '<'
|   |   |   | | |-ImplicitCastExpr 0x13e827d00 <col:17> 'int' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x13e827bd8 <col:17> 'int' lvalue Var 0x13e80e070 'num_spot_colors' 'int'
|   |   |   | | `-IntegerLiteral 0x13e827bf8 <col:35> 'int' 1
|   |   |   | `-BinaryOperator 0x13e827d58 <line:18:17, col:35> 'int' contains-errors '>'
|   |   |   |   |-DeclRefExpr 0x13e827c50 <col:17> 'int' lvalue Var 0x13e80e070 'num_spot_colors' 'int'
|   |   |   |   `-RecoveryExpr 0x13e827d38 <col:35> '<dependent type>' contains-errors lvalue
|   |   |   `-CallExpr 0x13e827ef8 <line:19:17, col:49> '<dependent type>' contains-errors
|   |   |     |-DeclRefExpr 0x13e827e78 <col:17> 'int ()' Function 0x13e827dc0 'return_error' 'int ()'
|   |   |     `-RecoveryExpr 0x13e827ed8 <col:30> '<dependent type>' contains-errors lvalue
|   |   |-ForStmt 0x13e123640 <line:20:13, line:37:13>
|   |   | |-BinaryOperator 0x13e827f80 <line:20:18, col:22> 'int' '='
|   |   | | |-DeclRefExpr 0x13e827f40 <col:18> 'int' lvalue Var 0x13e80e0f0 'i' 'int'
|   |   | | `-IntegerLiteral 0x13e827f60 <col:22> 'int' 0
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x13e828010 <col:25, col:29> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x13e827fe0 <col:25> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x13e827fa0 <col:25> 'int' lvalue Var 0x13e80e0f0 'i' 'int'
|   |   | | `-ImplicitCastExpr 0x13e827ff8 <col:29> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x13e827fc0 <col:29> 'int' lvalue Var 0x13e80e070 'num_spot_colors' 'int'
|   |   | |-UnaryOperator 0x13e828050 <col:46, col:47> 'int' postfix '++'
|   |   | | `-DeclRefExpr 0x13e828030 <col:46> 'int' lvalue Var 0x13e80e0f0 'i' 'int'
|   |   | `-CompoundStmt 0x13e123610 <col:51, line:37:13>
|   |   |   |-DeclStmt 0x13e828178 <line:21:17, col:30>
|   |   |   | `-VarDecl 0x13e828110 <col:17, col:29> col:22 used buff 'char[20]'
|   |   |   |-CallExpr 0x13e828398 <line:24:17, col:42> 'int'
|   |   |   | |-ImplicitCastExpr 0x13e828380 <col:17> 'int (*)()' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x13e828288 <col:17> 'int ()' Function 0x13e8281d0 'gs_sprintf' 'int ()'
|   |   |   | |-ImplicitCastExpr 0x13e8283d0 <col:28> 'char *' <ArrayToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x13e8282a8 <col:28> 'char[20]' lvalue Var 0x13e828110 'buff' 'char[20]'
|   |   |   | |-ImplicitCastExpr 0x13e8283e8 <col:34> 'char *' <ArrayToPointerDecay>
|   |   |   | | `-StringLiteral 0x13e828310 <col:34> 'char[4]' lvalue "STR"
|   |   |   | `-ImplicitCastExpr 0x13e828400 <col:41> 'int' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x13e828330 <col:41> 'int' lvalue Var 0x13e80e0f0 'i' 'int'
|   |   |   |-BinaryOperator 0x13e828670 <line:25:17, col:59> 'int' contains-errors '='
|   |   |   | |-DeclRefExpr 0x13e828418 <col:17> 'int' lvalue Var 0x13e80dff0 'code' 'int'
|   |   |   | `-CallExpr 0x13e828638 <col:24, col:59> '<dependent type>' contains-errors
|   |   |   |   |-DeclRefExpr 0x13e828518 <col:24> 'int ()' Function 0x13e828460 'param_read_string' 'int ()'
|   |   |   |   |-RecoveryExpr 0x13e828538 <col:42> '<dependent type>' contains-errors lvalue
|   |   |   |   |-DeclRefExpr 0x13e828558 <col:49> 'char[20]' lvalue Var 0x13e828110 'buff' 'char[20]'
|   |   |   |   `-UnaryOperator 0x13e828620 <col:55, col:56> '<dependent type>' contains-errors prefix '&' cannot overflow
|   |   |   |     `-RecoveryExpr 0x13e828600 <col:56> '<dependent type>' contains-errors lvalue
|   |   |   `-SwitchStmt 0x13e8286c8 <line:26:17, line:36:17>
|   |   |     |-ImplicitCastExpr 0x13e8286b0 <line:26:25> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x13e828690 <col:25> 'int' lvalue Var 0x13e80dff0 'code' 'int'
|   |   |     `-CompoundStmt 0x13e1235e8 <col:31, line:36:17>
|   |   |       |-DefaultStmt 0x13e8287a8 <line:27:21, line:28:61>
|   |   |       | `-CallExpr 0x13e828770 <col:25, col:61> '<dependent type>' contains-errors
|   |   |       |   |-DeclRefExpr 0x13e8286f0 <col:25> 'int ()' Function 0x13e827900 'param_signal_error' 'int ()'
|   |   |       |   |-RecoveryExpr 0x13e828710 <col:44> '<dependent type>' contains-errors lvalue
|   |   |       |   |-DeclRefExpr 0x13e828730 <col:51> 'char[20]' lvalue Var 0x13e828110 'buff' 'char[20]'
|   |   |       |   `-DeclRefExpr 0x13e828750 <col:57> 'int' lvalue Var 0x13e80dff0 'code' 'int'
|   |   |       |-BreakStmt 0x13e8287c8 <line:29:25>
|   |   |       `-CaseStmt 0x13e122e18 <line:30:21, <invalid sloc>>
|   |   |         |-ConstantExpr 0x13e122e00 <col:26> 'int'
|   |   |         | `-IntegerLiteral 0x13e8287d0 <col:26> 'int' 0
|   |   |         `-NullStmt 0x13e123060 <<invalid sloc>>
|   |   |-BinaryOperator 0x13e123728 <line:38:13, col:45> '<dependent type>' contains-errors '='
|   |   | |-CXXDependentScopeMemberExpr 0x13e1236c0 <col:13, col:27> '<dependent type>' contains-errors lvalue ->num_separations
|   |   | | `-RecoveryExpr 0x13e123698 <col:13> '<dependent type>' contains-errors lvalue
|   |   | |   `-DeclRefExpr 0x13e123678 <col:13> 'int *' lvalue ParmVar 0x13e80dda8 'pseparations' 'int *'
|   |   | `-DeclRefExpr 0x13e123708 <col:45> 'int' lvalue Var 0x13e80e070 'num_spot_colors' 'int'
|   |   `-BreakStmt 0x13e123748 <line:39:13>
|   |-ReturnStmt 0x13e1237b8 <line:41:5, col:12>
|   | `-IntegerLiteral 0x13e123798 <col:12> 'int' 0
|   `-NullStmt 0x13e1237c8 <col:14>
`-FunctionDecl 0x13e1230e8 <line:33:25> col:25 implicit used memcpy 'void *(void *, const void *, unsigned long)' extern
  |-ParmVarDecl 0x13e1231e8 <<invalid sloc>> <invalid sloc> 'void *'
  |-ParmVarDecl 0x13e123250 <<invalid sloc>> <invalid sloc> 'const void *'
  |-ParmVarDecl 0x13e1232b8 <<invalid sloc>> <invalid sloc> 'unsigned long'
  `-BuiltinAttr 0x13e123190 <<invalid sloc>> Implicit 882
