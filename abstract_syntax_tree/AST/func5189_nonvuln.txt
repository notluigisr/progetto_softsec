TranslationUnitDecl 0x138855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1388564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x138855bd0 '__int128'
|-TypedefDecl 0x138856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x138855bf0 'unsigned __int128'
|-TypedefDecl 0x13900be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13900bc00 'struct __NSConstantString_tag'
|   `-Record 0x138856580 '__NSConstantString_tag'
|-TypedefDecl 0x13900be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x138855d90 '__SVInt8_t'
|-TypedefDecl 0x13900bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x138855db0 '__SVInt16_t'
|-TypedefDecl 0x13900bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x138855dd0 '__SVInt32_t'
|-TypedefDecl 0x13900bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x138855df0 '__SVInt64_t'
|-TypedefDecl 0x13900c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x138855e10 '__SVUint8_t'
|-TypedefDecl 0x13900c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x138855e30 '__SVUint16_t'
|-TypedefDecl 0x13900c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x138855e50 '__SVUint32_t'
|-TypedefDecl 0x13900c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x138855e70 '__SVUint64_t'
|-TypedefDecl 0x13900c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x138855e90 '__SVFloat16_t'
|-TypedefDecl 0x13900c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x138855eb0 '__SVFloat32_t'
|-TypedefDecl 0x13900c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x138855ed0 '__SVFloat64_t'
|-TypedefDecl 0x13900c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x138855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13900c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x138855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13900c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x138855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13900c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x138855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13900c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x138855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13900c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x138855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13900c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x138855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13900c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x138855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13900c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x138855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13900c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x138856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13900c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x138856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13900c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x138856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13900c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x138856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13900c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x138856090 '__clang_svint8x3_t'
|-TypedefDecl 0x13900c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1388560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13900c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1388560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13900c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1388560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13900c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x138856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13900ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x138856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13900cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x138856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13900cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x138856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13900cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x138856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13900d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1388561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13900d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1388561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13900d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1388561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13900d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x138856210 '__clang_svint8x4_t'
|-TypedefDecl 0x13900d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x138856230 '__clang_svint16x4_t'
|-TypedefDecl 0x13900d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x138856250 '__clang_svint32x4_t'
|-TypedefDecl 0x13900d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x138856270 '__clang_svint64x4_t'
|-TypedefDecl 0x13900d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x138856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13900d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1388562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13900d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1388562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13900d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1388562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13900d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x138856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13900d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x138856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13900d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x138856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13900d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x138856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13900da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x138856390 '__SVBool_t'
|-TypedefDecl 0x13900da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1388563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13900dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1388563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13900db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1388563f0 '__SVCount_t'
|-TypedefDecl 0x13900dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13900dbb0 'char *'
|   `-BuiltinType 0x1388556b0 'char'
|-TypedefDecl 0x13900dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13900dbb0 'char *'
|   `-BuiltinType 0x1388556b0 'char'
`-FunctionDecl 0x13900e038 <dataset_diviso_filec/func5189_nonvuln.c:1:1, line:61:1> line:1:12 invalid setcalrgbspace 'int (int *, int *, int *, int *, int)' static
  |-ParmVarDecl 0x13900dd28 <col:27, col:37> col:37 invalid i_ctx_p 'int *'
  |-ParmVarDecl 0x13900dda8 <col:46, col:51> col:51 invalid r 'int *'
  |-ParmVarDecl 0x13900de28 <col:54, col:59> col:59 stage 'int *'
  |-ParmVarDecl 0x13900dea8 <col:66, col:71> col:71 used cont 'int *'
  |-ParmVarDecl 0x13900df28 <col:77, col:81> col:81 CIESubst 'int'
  `-CompoundStmt 0x13a808848 <line:2:1, line:61:1>
    |-DeclStmt 0x13900e1a8 <line:4:5, col:17>
    | `-VarDecl 0x13900e120 <col:5, col:16> col:9 used code 'int' cinit
    |   `-IntegerLiteral 0x13900e188 <col:16> 'int' 0
    |-DeclStmt 0x1390275c8 <line:5:5, col:68>
    | |-VarDecl 0x13900e268 <col:5, col:36> col:29 used gamma 'float[3]'
    | |-VarDecl 0x13900e338 <col:5, col:46> col:39 used white 'float[3]'
    | |-VarDecl 0x139027428 <col:5, col:56> col:49 used black 'float[3]'
    | `-VarDecl 0x139027538 <col:5, col:67> col:59 used matrix 'float[9]'
    |-DeclStmt 0x139027858 <line:6:5, col:62>
    | `-VarDecl 0x139027688 <col:5, col:61> col:29 used dflt_gamma 'const float[3]' static cinit
    |   `-InitListExpr 0x1390277b8 <col:45, col:61> 'const float[3]'
    |     |-ImplicitCastExpr 0x139027810 <col:47> 'float' <FloatingCast>
    |     | `-FloatingLiteral 0x1390276f0 <col:47> 'double' 1.000000e+00
    |     |-ImplicitCastExpr 0x139027828 <col:52> 'float' <FloatingCast>
    |     | `-FloatingLiteral 0x139027710 <col:52> 'double' 1.000000e+00
    |     `-ImplicitCastExpr 0x139027840 <col:57> 'float' <FloatingCast>
    |       `-FloatingLiteral 0x139027730 <col:57> 'double' 1.000000e+00
    |-DeclStmt 0x139027cf8 <line:7:5, col:77>
    | |-VarDecl 0x1390278d8 <col:5, col:51> col:29 used dflt_black 'const float[3]' static cinit
    | | `-InitListExpr 0x139027a08 <col:45, col:51> 'const float[3]'
    | |   |-ImplicitCastExpr 0x139027a60 <col:46> 'float' <IntegralToFloating>
    | |   | `-IntegerLiteral 0x139027940 <col:46> 'int' 0
    | |   |-ImplicitCastExpr 0x139027a78 <col:48> 'float' <IntegralToFloating>
    | |   | `-IntegerLiteral 0x139027960 <col:48> 'int' 0
    | |   `-ImplicitCastExpr 0x139027a90 <col:50> 'float' <IntegralToFloating>
    | |     `-IntegerLiteral 0x139027980 <col:50> 'int' 0
    | `-VarDecl 0x139027b10 <col:5, col:76> col:54 used dflt_white 'const float[3]' static cinit
    |   `-InitListExpr 0x139027c40 <col:70, col:76> 'const float[3]'
    |     |-ImplicitCastExpr 0x139027c98 <col:71> 'float' <IntegralToFloating>
    |     | `-IntegerLiteral 0x139027b78 <col:71> 'int' 0
    |     |-ImplicitCastExpr 0x139027cb0 <col:73> 'float' <IntegralToFloating>
    |     | `-IntegerLiteral 0x139027b98 <col:73> 'int' 0
    |     `-ImplicitCastExpr 0x139027cc8 <col:75> 'float' <IntegralToFloating>
    |       `-IntegerLiteral 0x139027bb8 <col:75> 'int' 0
    |-DeclStmt 0x139028138 <line:8:5, col:65>
    | `-VarDecl 0x139027db8 <col:5, col:64> col:29 used dflt_matrix 'const float[9]' static cinit
    |   `-InitListExpr 0x139027fd8 <col:46, col:64> 'const float[9]'
    |     |-ImplicitCastExpr 0x139028060 <col:47> 'float' <IntegralToFloating>
    |     | `-IntegerLiteral 0x139027e20 <col:47> 'int' 1
    |     |-ImplicitCastExpr 0x139028078 <col:49> 'float' <IntegralToFloating>
    |     | `-IntegerLiteral 0x139027e40 <col:49> 'int' 0
    |     |-ImplicitCastExpr 0x139028090 <col:51> 'float' <IntegralToFloating>
    |     | `-IntegerLiteral 0x139027e60 <col:51> 'int' 0
    |     |-ImplicitCastExpr 0x1390280a8 <col:53> 'float' <IntegralToFloating>
    |     | `-IntegerLiteral 0x139027e80 <col:53> 'int' 0
    |     |-ImplicitCastExpr 0x1390280c0 <col:55> 'float' <IntegralToFloating>
    |     | `-IntegerLiteral 0x139027ea0 <col:55> 'int' 1
    |     |-ImplicitCastExpr 0x1390280d8 <col:57> 'float' <IntegralToFloating>
    |     | `-IntegerLiteral 0x139027ec0 <col:57> 'int' 0
    |     |-ImplicitCastExpr 0x1390280f0 <col:59> 'float' <IntegralToFloating>
    |     | `-IntegerLiteral 0x139027ee0 <col:59> 'int' 0
    |     |-ImplicitCastExpr 0x139028108 <col:61> 'float' <IntegralToFloating>
    |     | `-IntegerLiteral 0x139027f00 <col:61> 'int' 0
    |     `-ImplicitCastExpr 0x139028120 <col:63> 'float' <IntegralToFloating>
    |       `-IntegerLiteral 0x139027f20 <col:63> 'int' 1
    |-DeclStmt 0x1390281d0 <line:9:5, col:10>
    | `-VarDecl 0x139028168 <col:5, col:9> col:9 used i 'int'
    |-BinaryOperator 0x139028258 <line:12:5, col:13> 'int' '='
    | |-UnaryOperator 0x139028220 <col:5, col:6> 'int' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x139028208 <col:6> 'int *' <LValueToRValue>
    | |   `-DeclRefExpr 0x1390281e8 <col:6> 'int *' lvalue ParmVar 0x13900dea8 'cont' 'int *'
    | `-IntegerLiteral 0x139028238 <col:13> 'int' 0
    |-BinaryOperator 0x139808da0 <line:13:5, col:45> 'int' contains-errors '='
    | |-DeclRefExpr 0x139028278 <col:5> 'int' lvalue Var 0x13900e120 'code' 'int'
    | `-CallExpr 0x139808d60 <col:12, col:45> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x139808c00 <col:12> 'int ()' Function 0x139028338 'array_get' 'int ()'
    |   |-RecoveryExpr 0x139808d08 <col:22> '<dependent type>' contains-errors lvalue
    |   |-RecoveryExpr 0x139808c38 <col:31> '<dependent type>' contains-errors lvalue
    |   |-IntegerLiteral 0x139808c58 <col:34> 'int' 1
    |   `-UnaryOperator 0x139808d48 <col:37, col:38> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-RecoveryExpr 0x139808d28 <col:38> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x139808e80 <line:14:5, line:15:16>
    | |-BinaryOperator 0x139808e18 <line:14:9, col:16> 'int' '<'
    | | |-ImplicitCastExpr 0x139808e00 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x139808dc0 <col:9> 'int' lvalue Var 0x13900e120 'code' 'int'
    | | `-IntegerLiteral 0x139808de0 <col:16> 'int' 0
    | `-ReturnStmt 0x139808e70 <line:15:9, col:16>
    |   `-ImplicitCastExpr 0x139808e58 <col:16> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x139808e38 <col:16> 'int' lvalue Var 0x13900e120 'code' 'int'
    |-BinaryOperator 0x1398091e8 <line:17:5, line:22:42> 'int' contains-errors '='
    | |-DeclRefExpr 0x139808ea0 <line:17:5> 'int' lvalue Var 0x13900e120 'code' 'int'
    | `-CallExpr 0x139809198 <col:12, line:22:42> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x139808fa0 <line:17:12> 'int ()' Function 0x139808ee8 'dict_floats_param' 'int ()'
    |   |-RecoveryExpr 0x139809140 <col:31> '<dependent type>' contains-errors lvalue
    |   |-UnaryOperator 0x139809180 <line:18:31, col:32> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | `-RecoveryExpr 0x139809160 <col:32> '<dependent type>' contains-errors lvalue
    |   |-StringLiteral 0x139809050 <line:19:31> 'char[4]' lvalue "STR"
    |   |-IntegerLiteral 0x139809070 <line:20:31> 'int' 3
    |   |-DeclRefExpr 0x139809090 <line:21:31> 'float[3]' lvalue Var 0x13900e268 'gamma' 'float[3]'
    |   `-DeclRefExpr 0x1398090b0 <line:22:31> 'const float[3]' lvalue Var 0x139027688 'dflt_gamma' 'const float[3]'
    |-IfStmt 0x1398092c8 <line:23:5, line:24:16>
    | |-BinaryOperator 0x139809260 <line:23:9, col:16> 'int' '<'
    | | |-ImplicitCastExpr 0x139809248 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x139809208 <col:9> 'int' lvalue Var 0x13900e120 'code' 'int'
    | | `-IntegerLiteral 0x139809228 <col:16> 'int' 0
    | `-ReturnStmt 0x1398092b8 <line:24:9, col:16>
    |   `-ImplicitCastExpr 0x1398092a0 <col:16> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x139809280 <col:16> 'int' lvalue Var 0x13900e120 'code' 'int'
    |-IfStmt 0x1398097a0 <line:25:5, line:26:41>
    | |-BinaryOperator 0x1398095f8 <line:25:9, col:55> 'int' '||'
    | | |-BinaryOperator 0x1398094f0 <col:9, col:38> 'int' '||'
    | | | |-BinaryOperator 0x1398093e8 <col:9, col:21> 'int' '<='
    | | | | |-ImplicitCastExpr 0x1398093b8 <col:9, col:16> 'float' <LValueToRValue>
    | | | | | `-ArraySubscriptExpr 0x139809378 <col:9, col:16> 'float' lvalue
    | | | | |   |-ImplicitCastExpr 0x139809360 <col:9> 'float *' <ArrayToPointerDecay>
    | | | | |   | `-DeclRefExpr 0x1398092e8 <col:9> 'float[3]' lvalue Var 0x13900e268 'gamma' 'float[3]'
    | | | | |   `-IntegerLiteral 0x139809308 <col:15> 'int' 0
    | | | | `-ImplicitCastExpr 0x1398093d0 <col:21> 'float' <IntegralToFloating>
    | | | |   `-IntegerLiteral 0x139809398 <col:21> 'int' 0
    | | | `-BinaryOperator 0x1398094d0 <col:26, col:38> 'int' '<='
    | | |   |-ImplicitCastExpr 0x1398094a0 <col:26, col:33> 'float' <LValueToRValue>
    | | |   | `-ArraySubscriptExpr 0x139809460 <col:26, col:33> 'float' lvalue
    | | |   |   |-ImplicitCastExpr 0x139809448 <col:26> 'float *' <ArrayToPointerDecay>
    | | |   |   | `-DeclRefExpr 0x139809408 <col:26> 'float[3]' lvalue Var 0x13900e268 'gamma' 'float[3]'
    | | |   |   `-IntegerLiteral 0x139809428 <col:32> 'int' 1
    | | |   `-ImplicitCastExpr 0x1398094b8 <col:38> 'float' <IntegralToFloating>
    | | |     `-IntegerLiteral 0x139809480 <col:38> 'int' 0
    | | `-BinaryOperator 0x1398095d8 <col:43, col:55> 'int' '<='
    | |   |-ImplicitCastExpr 0x1398095a8 <col:43, col:50> 'float' <LValueToRValue>
    | |   | `-ArraySubscriptExpr 0x139809568 <col:43, col:50> 'float' lvalue
    | |   |   |-ImplicitCastExpr 0x139809550 <col:43> 'float *' <ArrayToPointerDecay>
    | |   |   | `-DeclRefExpr 0x139809510 <col:43> 'float[3]' lvalue Var 0x13900e268 'gamma' 'float[3]'
    | |   |   `-IntegerLiteral 0x139809530 <col:49> 'int' 2
    | |   `-ImplicitCastExpr 0x1398095c0 <col:55> 'float' <IntegralToFloating>
    | |     `-IntegerLiteral 0x139809588 <col:55> 'int' 0
    | `-CallExpr 0x139809778 <line:26:9, col:41> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x1398096f8 <col:9> 'int ()' Function 0x139809640 'return_error' 'int ()'
    |   `-RecoveryExpr 0x139809758 <col:22> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x1398099e0 <line:27:5, line:32:42> 'int' contains-errors '='
    | |-DeclRefExpr 0x1398097c0 <line:27:5> 'int' lvalue Var 0x13900e120 'code' 'int'
    | `-CallExpr 0x139809990 <col:12, line:32:42> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x1398097e0 <line:27:12> 'int ()' Function 0x139808ee8 'dict_floats_param' 'int ()'
    |   |-RecoveryExpr 0x139809938 <col:31> '<dependent type>' contains-errors lvalue
    |   |-UnaryOperator 0x139809978 <line:28:31, col:32> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | `-RecoveryExpr 0x139809958 <col:32> '<dependent type>' contains-errors lvalue
    |   |-StringLiteral 0x139809848 <line:29:31> 'char[4]' lvalue "STR"
    |   |-IntegerLiteral 0x139809868 <line:30:31> 'int' 3
    |   |-DeclRefExpr 0x139809888 <line:31:31> 'float[3]' lvalue Var 0x139027428 'black' 'float[3]'
    |   `-DeclRefExpr 0x1398098a8 <line:32:31> 'const float[3]' lvalue Var 0x1390278d8 'dflt_black' 'const float[3]'
    |-IfStmt 0x139809ac0 <line:33:5, line:34:16>
    | |-BinaryOperator 0x139809a58 <line:33:9, col:16> 'int' '<'
    | | |-ImplicitCastExpr 0x139809a40 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x139809a00 <col:9> 'int' lvalue Var 0x13900e120 'code' 'int'
    | | `-IntegerLiteral 0x139809a20 <col:16> 'int' 0
    | `-ReturnStmt 0x139809ab0 <line:34:9, col:16>
    |   `-ImplicitCastExpr 0x139809a98 <col:16> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x139809a78 <col:16> 'int' lvalue Var 0x13900e120 'code' 'int'
    |-BinaryOperator 0x138923b18 <line:35:5, line:40:42> 'int' contains-errors '='
    | |-DeclRefExpr 0x139809ae0 <line:35:5> 'int' lvalue Var 0x13900e120 'code' 'int'
    | `-CallExpr 0x138923ac8 <col:12, line:40:42> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x139809b00 <line:35:12> 'int ()' Function 0x139808ee8 'dict_floats_param' 'int ()'
    |   |-RecoveryExpr 0x138923a70 <col:31> '<dependent type>' contains-errors lvalue
    |   |-UnaryOperator 0x138923ab0 <line:36:31, col:32> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | `-RecoveryExpr 0x138923a90 <col:32> '<dependent type>' contains-errors lvalue
    |   |-StringLiteral 0x139809b68 <line:37:31> 'char[4]' lvalue "STR"
    |   |-IntegerLiteral 0x139809b88 <line:38:31> 'int' 3
    |   |-DeclRefExpr 0x139809ba8 <line:39:31> 'float[3]' lvalue Var 0x13900e338 'white' 'float[3]'
    |   `-DeclRefExpr 0x139809bc8 <line:40:31> 'const float[3]' lvalue Var 0x139027b10 'dflt_white' 'const float[3]'
    |-IfStmt 0x138923bf8 <line:41:5, line:42:16>
    | |-BinaryOperator 0x138923b90 <line:41:9, col:16> 'int' '<'
    | | |-ImplicitCastExpr 0x138923b78 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x138923b38 <col:9> 'int' lvalue Var 0x13900e120 'code' 'int'
    | | `-IntegerLiteral 0x138923b58 <col:16> 'int' 0
    | `-ReturnStmt 0x138923be8 <line:42:9, col:16>
    |   `-ImplicitCastExpr 0x138923bd0 <col:16> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x138923bb0 <col:16> 'int' lvalue Var 0x13900e120 'code' 'int'
    |-IfStmt 0x138923fb8 <line:43:5, line:44:41>
    | |-BinaryOperator 0x138923ef0 <line:43:9, col:57> 'int' '||'
    | | |-BinaryOperator 0x138923de8 <col:9, col:38> 'int' '||'
    | | | |-BinaryOperator 0x138923ce0 <col:9, col:21> 'int' '<='
    | | | | |-ImplicitCastExpr 0x138923cb0 <col:9, col:16> 'float' <LValueToRValue>
    | | | | | `-ArraySubscriptExpr 0x138923c70 <col:9, col:16> 'float' lvalue
    | | | | |   |-ImplicitCastExpr 0x138923c58 <col:9> 'float *' <ArrayToPointerDecay>
    | | | | |   | `-DeclRefExpr 0x138923c18 <col:9> 'float[3]' lvalue Var 0x13900e338 'white' 'float[3]'
    | | | | |   `-IntegerLiteral 0x138923c38 <col:15> 'int' 0
    | | | | `-ImplicitCastExpr 0x138923cc8 <col:21> 'float' <IntegralToFloating>
    | | | |   `-IntegerLiteral 0x138923c90 <col:21> 'int' 0
    | | | `-BinaryOperator 0x138923dc8 <col:26, col:38> 'int' '!='
    | | |   |-ImplicitCastExpr 0x138923db0 <col:26, col:33> 'double' <FloatingCast>
    | | |   | `-ImplicitCastExpr 0x138923d98 <col:26, col:33> 'float' <LValueToRValue>
    | | |   |   `-ArraySubscriptExpr 0x138923d58 <col:26, col:33> 'float' lvalue
    | | |   |     |-ImplicitCastExpr 0x138923d40 <col:26> 'float *' <ArrayToPointerDecay>
    | | |   |     | `-DeclRefExpr 0x138923d00 <col:26> 'float[3]' lvalue Var 0x13900e338 'white' 'float[3]'
    | | |   |     `-IntegerLiteral 0x138923d20 <col:32> 'int' 1
    | | |   `-FloatingLiteral 0x138923d78 <col:38> 'double' 1.000000e+00
    | | `-BinaryOperator 0x138923ed0 <col:45, col:57> 'int' '<='
    | |   |-ImplicitCastExpr 0x138923ea0 <col:45, col:52> 'float' <LValueToRValue>
    | |   | `-ArraySubscriptExpr 0x138923e60 <col:45, col:52> 'float' lvalue
    | |   |   |-ImplicitCastExpr 0x138923e48 <col:45> 'float *' <ArrayToPointerDecay>
    | |   |   | `-DeclRefExpr 0x138923e08 <col:45> 'float[3]' lvalue Var 0x13900e338 'white' 'float[3]'
    | |   |   `-IntegerLiteral 0x138923e28 <col:51> 'int' 2
    | |   `-ImplicitCastExpr 0x138923eb8 <col:57> 'float' <IntegralToFloating>
    | |     `-IntegerLiteral 0x138923e80 <col:57> 'int' 0
    | `-CallExpr 0x138923f90 <line:44:9, col:41> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x138923f10 <col:9> 'int ()' Function 0x139809640 'return_error' 'int ()'
    |   `-RecoveryExpr 0x138923f70 <col:22> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x1389241f8 <line:45:5, line:50:43> 'int' contains-errors '='
    | |-DeclRefExpr 0x138923fd8 <line:45:5> 'int' lvalue Var 0x13900e120 'code' 'int'
    | `-CallExpr 0x1389241a8 <col:12, line:50:43> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x138923ff8 <line:45:12> 'int ()' Function 0x139808ee8 'dict_floats_param' 'int ()'
    |   |-RecoveryExpr 0x138924150 <col:31> '<dependent type>' contains-errors lvalue
    |   |-UnaryOperator 0x138924190 <line:46:31, col:32> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | `-RecoveryExpr 0x138924170 <col:32> '<dependent type>' contains-errors lvalue
    |   |-StringLiteral 0x138924060 <line:47:31> 'char[4]' lvalue "STR"
    |   |-IntegerLiteral 0x138924080 <line:48:31> 'int' 9
    |   |-DeclRefExpr 0x1389240a0 <line:49:31> 'float[9]' lvalue Var 0x139027538 'matrix' 'float[9]'
    |   `-DeclRefExpr 0x1389240c0 <line:50:31> 'const float[9]' lvalue Var 0x139027db8 'dflt_matrix' 'const float[9]'
    |-IfStmt 0x1389242d8 <line:51:5, line:52:16>
    | |-BinaryOperator 0x138924270 <line:51:9, col:16> 'int' '<'
    | | |-ImplicitCastExpr 0x138924258 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x138924218 <col:9> 'int' lvalue Var 0x13900e120 'code' 'int'
    | | `-IntegerLiteral 0x138924238 <col:16> 'int' 0
    | `-ReturnStmt 0x1389242c8 <line:52:9, col:16>
    |   `-ImplicitCastExpr 0x1389242b0 <col:16> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x138924290 <col:16> 'int' lvalue Var 0x13900e120 'code' 'int'
    |-IfStmt 0x138924748 <line:54:5, line:55:38>
    | |-BinaryOperator 0x138924530 <line:54:10, col:17> 'int' '<'
    | | |-ImplicitCastExpr 0x138924518 <col:10> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1389244d8 <col:10> 'int' lvalue Var 0x13900e120 'code' 'int'
    | | `-IntegerLiteral 0x1389244f8 <col:17> 'int' 0
    | `-ReturnStmt 0x138924738 <line:55:9, col:38>
    |   `-CallExpr 0x1389246d8 <col:16, col:38> 'int'
    |     |-ImplicitCastExpr 0x1389246c0 <col:16> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x138924630 <col:16> 'int ()' Function 0x138924578 'gs_rethrow' 'int ()'
    |     |-ImplicitCastExpr 0x138924708 <col:27> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x138924650 <col:27> 'int' lvalue Var 0x13900e120 'code' 'int'
    |     `-ImplicitCastExpr 0x138924720 <col:33> 'char *' <ArrayToPointerDecay>
    |       `-StringLiteral 0x138924670 <col:33> 'char[4]' lvalue "STR"
    `-ReturnStmt 0x13a808838 <line:60:5, col:12>
      `-ImplicitCastExpr 0x13a808820 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x13a808800 <col:12> 'int' lvalue Var 0x13900e120 'code' 'int'
