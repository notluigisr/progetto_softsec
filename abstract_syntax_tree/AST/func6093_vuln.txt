TranslationUnitDecl 0x13a055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x13a0564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x13a055bd0 '__int128'
|-TypedefDecl 0x13a056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x13a055bf0 'unsigned __int128'
|-TypedefDecl 0x13a80be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x13a80bc00 'struct __NSConstantString_tag'
|   `-Record 0x13a056580 '__NSConstantString_tag'
|-TypedefDecl 0x13a80be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x13a055d90 '__SVInt8_t'
|-TypedefDecl 0x13a80bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x13a055db0 '__SVInt16_t'
|-TypedefDecl 0x13a80bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x13a055dd0 '__SVInt32_t'
|-TypedefDecl 0x13a80bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x13a055df0 '__SVInt64_t'
|-TypedefDecl 0x13a80c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x13a055e10 '__SVUint8_t'
|-TypedefDecl 0x13a80c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x13a055e30 '__SVUint16_t'
|-TypedefDecl 0x13a80c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x13a055e50 '__SVUint32_t'
|-TypedefDecl 0x13a80c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x13a055e70 '__SVUint64_t'
|-TypedefDecl 0x13a80c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x13a055e90 '__SVFloat16_t'
|-TypedefDecl 0x13a80c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x13a055eb0 '__SVFloat32_t'
|-TypedefDecl 0x13a80c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x13a055ed0 '__SVFloat64_t'
|-TypedefDecl 0x13a80c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x13a055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x13a80c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x13a055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x13a80c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x13a055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x13a80c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x13a055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x13a80c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x13a055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x13a80c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x13a055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x13a80c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x13a055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13a80c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x13a055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x13a80c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x13a055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x13a80c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x13a056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13a80c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x13a056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13a80c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x13a056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13a80c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x13a056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13a80c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x13a056090 '__clang_svint8x3_t'
|-TypedefDecl 0x13a80c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x13a0560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x13a80c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x13a0560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x13a80c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x13a0560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x13a80c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x13a056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x13a80ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x13a056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x13a80cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x13a056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x13a80cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x13a056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x13a80cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x13a056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13a80d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x13a0561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13a80d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x13a0561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13a80d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x13a0561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13a80d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x13a056210 '__clang_svint8x4_t'
|-TypedefDecl 0x13a80d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x13a056230 '__clang_svint16x4_t'
|-TypedefDecl 0x13a80d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x13a056250 '__clang_svint32x4_t'
|-TypedefDecl 0x13a80d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x13a056270 '__clang_svint64x4_t'
|-TypedefDecl 0x13a80d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x13a056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x13a80d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x13a0562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13a80d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x13a0562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x13a80d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x13a0562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x13a80d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x13a056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13a80d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x13a056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13a80d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x13a056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13a80d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x13a056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13a80da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x13a056390 '__SVBool_t'
|-TypedefDecl 0x13a80da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x13a0563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x13a80dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x13a0563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x13a80db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x13a0563f0 '__SVCount_t'
|-TypedefDecl 0x13a80dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13a80dbb0 'char *'
|   `-BuiltinType 0x13a0556b0 'char'
|-TypedefDecl 0x13a80dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13a80dbb0 'char *'
|   `-BuiltinType 0x13a0556b0 'char'
|-FunctionDecl 0x13a80dff8 <dataset_diviso_filec/func6093_vuln.c:1:1, line:107:1> line:1:21 invalid GenerateDifferentialNoise 'int (int *, const int, const int, const int)'
| |-ParmVarDecl 0x13a80dd28 <col:47, col:59> col:59 invalid random_info 'int *'
| |-ParmVarDecl 0x13a80dda8 <line:2:3, col:17> col:17 invalid pixel 'const int'
| |-ParmVarDecl 0x13a80de28 <col:23, col:39> col:39 invalid noise_type 'const int'
| |-ParmVarDecl 0x13a80dea8 <col:50, col:71> col:71 invalid attenuate 'const int'
| `-CompoundStmt 0x13a82d4b0 <line:3:1, line:107:1>
|   |-DeclStmt 0x13a80e2e8 <line:13:3, line:17:10>
|   | |-VarDecl 0x13a80e0d8 <line:13:3, line:14:5> col:5 used alpha 'double'
|   | |-VarDecl 0x13a80e158 <line:13:3, line:15:5> col:5 used beta 'double'
|   | |-VarDecl 0x13a80e1d8 <line:13:3, line:16:5> col:5 used noise 'double'
|   | `-VarDecl 0x13a80e258 <line:13:3, line:17:5> col:5 used sigma 'double'
|   |-BinaryOperator 0x13a827520 <line:19:3, col:41> 'double' contains-errors '='
|   | |-DeclRefExpr 0x13a80e300 <col:3> 'double' lvalue Var 0x13a80e0d8 'alpha' 'double'
|   | `-CallExpr 0x13a8274f8 <col:9, col:41> '<dependent type>' contains-errors
|   |   |-DeclRefExpr 0x13a8274b8 <col:9> 'int ()' Function 0x13a827400 'GetPseudoRandomValue' 'int ()'
|   |   `-RecoveryExpr 0x13a8274d8 <col:30> '<dependent type>' contains-errors lvalue
|   |-SwitchStmt 0x13a827578 <line:20:3, line:105:3>
|   | |-ImplicitCastExpr 0x13a827560 <line:20:11> '<dependent type>' contains-errors <LValueToRValue>
|   | | `-RecoveryExpr 0x13a827540 <col:11> '<dependent type>' contains-errors lvalue
|   | `-CompoundStmt 0x13a82d3e8 <line:21:3, line:105:3>
|   |   |-DefaultStmt 0x13a827778 <line:23:5, line:27:5>
|   |   | `-CompoundStmt 0x13a827760 <line:24:5, line:27:5>
|   |   |   `-BreakStmt 0x13a827758 <line:26:7>
|   |   |-CompoundStmt 0x13a82a618 <line:29:5, line:43:5>
|   |   | |-DeclStmt 0x13a8278c8 <line:30:7, line:32:12>
|   |   | | |-VarDecl 0x13a8277c8 <line:30:7, line:31:9> col:9 used gamma 'double'
|   |   | | `-VarDecl 0x13a827848 <line:30:7, line:32:9> col:9 used tau 'double'
|   |   | |-IfStmt 0x13a828150 <line:34:7, line:35:15>
|   |   | | |-BinaryOperator 0x13a8280d0 <line:34:11, col:25> 'int' contains-errors '<'
|   |   | | | |-CallExpr 0x13a828070 <col:11, col:21> 'double'
|   |   | | | | |-ImplicitCastExpr 0x13a828058 <col:11> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | `-DeclRefExpr 0x13a827f00 <col:11> 'double (double)' Function 0x13a827d40 'fabs' 'double (double)'
|   |   | | | | `-ImplicitCastExpr 0x13a828098 <col:16> 'double' <LValueToRValue>
|   |   | | | |   `-DeclRefExpr 0x13a827f20 <col:16> 'double' lvalue Var 0x13a80e0d8 'alpha' 'double'
|   |   | | | `-RecoveryExpr 0x13a8280b0 <col:25> '<dependent type>' contains-errors lvalue
|   |   | | `-BinaryOperator 0x13a828130 <line:35:9, col:15> 'double' '='
|   |   | |   |-DeclRefExpr 0x13a8280f0 <col:9> 'double' lvalue Var 0x13a80e0d8 'alpha' 'double'
|   |   | |   `-FloatingLiteral 0x13a828110 <col:15> 'double' 1.000000e+00
|   |   | |-BinaryOperator 0x13a8281f8 <line:36:7, col:44> 'double' contains-errors '='
|   |   | | |-DeclRefExpr 0x13a828170 <col:7> 'double' lvalue Var 0x13a80e158 'beta' 'double'
|   |   | | `-CallExpr 0x13a8281d0 <col:12, col:44> '<dependent type>' contains-errors
|   |   | |   |-DeclRefExpr 0x13a828190 <col:12> 'int ()' Function 0x13a827400 'GetPseudoRandomValue' 'int ()'
|   |   | |   `-RecoveryExpr 0x13a8281b0 <col:33> '<dependent type>' contains-errors lvalue
|   |   | |-BinaryOperator 0x13a829d10 <line:37:7, col:33> 'double' '='
|   |   | | |-DeclRefExpr 0x13a828218 <col:7> 'double' lvalue Var 0x13a8277c8 'gamma' 'double'
|   |   | | `-CallExpr 0x13a829ce8 <col:13, col:33> 'double'
|   |   | |   |-ImplicitCastExpr 0x13a829cd0 <col:13> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x13a829a00 <col:13> 'double (double)' Function 0x13a828238 'sqrt' 'double (double)'
|   |   | |   `-BinaryOperator 0x13a829cb0 <col:18, col:32> 'double' '*'
|   |   | |     |-UnaryOperator 0x13a829a40 <col:18, col:19> 'double' prefix '-'
|   |   | |     | `-FloatingLiteral 0x13a829a20 <col:19> 'double' 2.000000e+00
|   |   | |     `-CallExpr 0x13a829c70 <col:23, col:32> 'double'
|   |   | |       |-ImplicitCastExpr 0x13a829c58 <col:23> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | |       | `-DeclRefExpr 0x13a829c18 <col:23> 'double (double)' Function 0x13a829a58 'log' 'double (double)'
|   |   | |       `-ImplicitCastExpr 0x13a829c98 <col:27> 'double' <LValueToRValue>
|   |   | |         `-DeclRefExpr 0x13a829c38 <col:27> 'double' lvalue Var 0x13a80e0d8 'alpha' 'double'
|   |   | `-BreakStmt 0x13a82a610 <line:42:7>
|   |   |-CompoundStmt 0x13a82a8c0 <line:45:5, line:54:5>
|   |   | |-IfStmt 0x13a82a888 <line:46:7, line:52:26> has_else
|   |   | | |-RecoveryExpr 0x13a82a690 <line:46:11, col:36> '_Bool' contains-errors
|   |   | | |-BinaryOperator 0x13a82a6f0 <line:47:9, col:15> 'double' '='
|   |   | | | |-DeclRefExpr 0x13a82a6b0 <col:9> 'double' lvalue Var 0x13a80e1d8 'noise' 'double'
|   |   | | | `-FloatingLiteral 0x13a82a6d0 <col:15> 'double' 0.000000e+00
|   |   | | `-IfStmt 0x13a82a858 <line:49:9, line:52:26> has_else
|   |   | |   |-RecoveryExpr 0x13a82a770 <line:49:13, col:45> '_Bool' contains-errors
|   |   | |   |-NullStmt 0x13a82a850 <line:50:11>
|   |   | |   `-BinaryOperator 0x13a82a830 <line:52:11, col:26> 'double' contains-errors '='
|   |   | |     |-DeclRefExpr 0x13a82a7b0 <col:11> 'double' lvalue Var 0x13a80e1d8 'noise' 'double'
|   |   | |     `-CStyleCastExpr 0x13a82a808 <col:17, col:26> 'double' contains-errors <Dependent>
|   |   | |       `-RecoveryExpr 0x13a82a7d0 <col:26> '<dependent type>' contains-errors lvalue
|   |   | `-BreakStmt 0x13a82a8b8 <line:53:7>
|   |   |-CompoundStmt 0x13a82c9f0 <line:56:5, line:72:5>
|   |   | |-IfStmt 0x13a82c738 <line:57:7, line:65:9>
|   |   | | |-BinaryOperator 0x13a82a938 <line:57:11, col:20> 'int' '<='
|   |   | | | |-ImplicitCastExpr 0x13a82a920 <col:11> 'double' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x13a82a8e0 <col:11> 'double' lvalue Var 0x13a80e0d8 'alpha' 'double'
|   |   | | | `-FloatingLiteral 0x13a82a900 <col:20> 'double' 5.000000e-01
|   |   | | `-CompoundStmt 0x13a82c720 <line:58:9, line:65:9>
|   |   | |   `-BreakStmt 0x13a82c718 <line:64:11>
|   |   | |-BinaryOperator 0x13a82c7f0 <line:66:7, col:16> 'double' '='
|   |   | | |-DeclRefExpr 0x13a82c758 <col:7> 'double' lvalue Var 0x13a80e158 'beta' 'double'
|   |   | | `-BinaryOperator 0x13a82c7d0 <col:12, col:16> 'double' '-'
|   |   | |   |-FloatingLiteral 0x13a82c778 <col:12> 'double' 1.000000e+00
|   |   | |   `-ImplicitCastExpr 0x13a82c7b8 <col:16> 'double' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x13a82c798 <col:16> 'double' lvalue Var 0x13a80e0d8 'alpha' 'double'
|   |   | `-BreakStmt 0x13a82c9e8 <line:71:7>
|   |   |-CompoundStmt 0x13a82ce18 <line:74:5, line:82:5>
|   |   | |-BinaryOperator 0x13a82ca58 <line:75:7, col:13> 'double' '='
|   |   | | |-DeclRefExpr 0x13a82ca18 <col:7> 'double' lvalue Var 0x13a80e258 'sigma' 'double'
|   |   | | `-FloatingLiteral 0x13a82ca38 <col:13> 'double' 1.000000e+00
|   |   | |-IfStmt 0x13a82cc48 <line:76:7, line:77:35>
|   |   | | |-RecoveryExpr 0x13a82ca98 <line:76:11, col:19> '_Bool' contains-errors
|   |   | | `-BinaryOperator 0x13a82cc28 <line:77:9, col:35> 'double' '='
|   |   | |   |-DeclRefExpr 0x13a82cab8 <col:9> 'double' lvalue Var 0x13a80e258 'sigma' 'double'
|   |   | |   `-CallExpr 0x13a82cc00 <col:15, col:35> 'double'
|   |   | |     |-ImplicitCastExpr 0x13a82cbe8 <col:15> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | |     | `-DeclRefExpr 0x13a82cad8 <col:15> 'double (double)' Function 0x13a828238 'sqrt' 'double (double)'
|   |   | |     `-BinaryOperator 0x13a82cbc8 <col:20, col:34> 'double' '*'
|   |   | |       |-UnaryOperator 0x13a82cb18 <col:20, col:21> 'double' prefix '-'
|   |   | |       | `-FloatingLiteral 0x13a82caf8 <col:21> 'double' 2.000000e+00
|   |   | |       `-CallExpr 0x13a82cb88 <col:25, col:34> 'double'
|   |   | |         |-ImplicitCastExpr 0x13a82cb70 <col:25> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | |         | `-DeclRefExpr 0x13a82cb30 <col:25> 'double (double)' Function 0x13a829a58 'log' 'double (double)'
|   |   | |         `-ImplicitCastExpr 0x13a82cbb0 <col:29> 'double' <LValueToRValue>
|   |   | |           `-DeclRefExpr 0x13a82cb50 <col:29> 'double' lvalue Var 0x13a80e0d8 'alpha' 'double'
|   |   | |-BinaryOperator 0x13a82ccf0 <line:78:7, col:44> 'double' contains-errors '='
|   |   | | |-DeclRefExpr 0x13a82cc68 <col:7> 'double' lvalue Var 0x13a80e158 'beta' 'double'
|   |   | | `-CallExpr 0x13a82ccc8 <col:12, col:44> '<dependent type>' contains-errors
|   |   | |   |-DeclRefExpr 0x13a82cc88 <col:12> 'int ()' Function 0x13a827400 'GetPseudoRandomValue' 'int ()'
|   |   | |   `-RecoveryExpr 0x13a82cca8 <col:33> '<dependent type>' contains-errors lvalue
|   |   | `-BreakStmt 0x13a82ce10 <line:81:7>
|   |   |-CompoundStmt 0x13a82d360 <line:84:5, line:99:5>
|   |   | |-DeclStmt 0x13a82cec8 <line:85:7, line:86:16>
|   |   | | `-VarDecl 0x13a82ce60 <line:85:7, line:86:9> col:9 used poisson 'double'
|   |   | |-ForStmt 0x13a82d300 <line:92:7, line:96:7>
|   |   | | |-<<<NULL>>>
|   |   | | |-<<<NULL>>>
|   |   | | |-BinaryOperator 0x13a82d190 <line:92:17, col:25> 'int' '>'
|   |   | | | |-ImplicitCastExpr 0x13a82d160 <col:17> 'double' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x13a82d120 <col:17> 'double' lvalue Var 0x13a80e0d8 'alpha' 'double'
|   |   | | | `-ImplicitCastExpr 0x13a82d178 <col:25> 'double' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x13a82d140 <col:25> 'double' lvalue Var 0x13a82ce60 'poisson' 'double'
|   |   | | |-<<<NULL>>>
|   |   | | `-CompoundStmt 0x13a82d2e0 <line:93:7, line:96:7>
|   |   | |   |-BinaryOperator 0x13a82d238 <line:94:9, col:46> 'double' contains-errors '='
|   |   | |   | |-DeclRefExpr 0x13a82d1b0 <col:9> 'double' lvalue Var 0x13a80e158 'beta' 'double'
|   |   | |   | `-CallExpr 0x13a82d210 <col:14, col:46> '<dependent type>' contains-errors
|   |   | |   |   |-DeclRefExpr 0x13a82d1d0 <col:14> 'int ()' Function 0x13a827400 'GetPseudoRandomValue' 'int ()'
|   |   | |   |   `-RecoveryExpr 0x13a82d1f0 <col:35> '<dependent type>' contains-errors lvalue
|   |   | |   `-CompoundAssignOperator 0x13a82d2b0 <line:95:9, col:16> 'double' '*=' ComputeLHSTy='double' ComputeResultTy='double'
|   |   | |     |-DeclRefExpr 0x13a82d258 <col:9> 'double' lvalue Var 0x13a80e0d8 'alpha' 'double'
|   |   | |     `-ImplicitCastExpr 0x13a82d298 <col:16> 'double' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x13a82d278 <col:16> 'double' lvalue Var 0x13a80e158 'beta' 'double'
|   |   | `-BreakStmt 0x13a82d358 <line:98:7>
|   |   `-CompoundStmt 0x13a82d3d0 <line:101:5, line:104:5>
|   |     `-BreakStmt 0x13a82d3c8 <line:103:7>
|   `-ReturnStmt 0x13a82d4a0 <line:106:3, col:15>
|     `-ImplicitCastExpr 0x13a82d488 <col:9, col:15> 'int' <FloatingToIntegral>
|       `-ImplicitCastExpr 0x13a82d470 <col:9, col:15> 'double' <LValueToRValue>
|         `-ParenExpr 0x13a82d450 <col:9, col:15> 'double' lvalue
|           `-DeclRefExpr 0x13a82d430 <col:10> 'double' lvalue Var 0x13a80e1d8 'noise' 'double'
|-FunctionDecl 0x13a827d40 <line:34:11> col:11 implicit used fabs 'double (double)' extern
| |-ParmVarDecl 0x13a827e40 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x13a827de8 <<invalid sloc>> Implicit 1004
| |-NoThrowAttr 0x13a827eb0 <col:11> Implicit
| `-ConstAttr 0x13a827ed8 <col:11> Implicit
|-FunctionDecl 0x13a828238 <line:37:13> col:13 implicit used sqrt 'double (double)' extern
| |-ParmVarDecl 0x13a828338 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x13a8282e0 <<invalid sloc>> Implicit 1163
| |-ConstAttr 0x13a8283a8 <col:13> Implicit
| `-NoThrowAttr 0x13a8283d0 <col:13> Implicit
|-FunctionDecl 0x13a829a58 <col:23> col:23 implicit used log 'double (double)' extern
| |-ParmVarDecl 0x13a829b58 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x13a829b00 <<invalid sloc>> Implicit 1106
| |-ConstAttr 0x13a829bc8 <col:23> Implicit
| `-NoThrowAttr 0x13a829bf0 <col:23> Implicit
|-FunctionDecl 0x13a829d70 <line:38:19> col:19 implicit used cos 'double (double)' extern
| |-ParmVarDecl 0x13a829e70 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x13a829e18 <<invalid sloc>> Implicit 1055
| |-ConstAttr 0x13a829ee0 <col:19> Implicit
| `-NoThrowAttr 0x13a829f08 <col:19> Implicit
|-FunctionDecl 0x13a82a060 <line:39:17> col:17 implicit used sin 'double (double)' extern
| |-ParmVarDecl 0x13a82a160 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x13a82a108 <<invalid sloc>> Implicit 1157
| |-ConstAttr 0x13a82a1d0 <col:17> Implicit
| `-NoThrowAttr 0x13a82a1f8 <col:17> Implicit
`-FunctionDecl 0x13a82cf00 <line:91:15> col:15 implicit used exp 'double (double)' extern
  |-ParmVarDecl 0x13a82d000 <<invalid sloc>> <invalid sloc> 'double'
  |-BuiltinAttr 0x13a82cfa8 <<invalid sloc>> Implicit 1067
  |-ConstAttr 0x13a82d070 <col:15> Implicit
  `-NoThrowAttr 0x13a82d098 <col:15> Implicit
