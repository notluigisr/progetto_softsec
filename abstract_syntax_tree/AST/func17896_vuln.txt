TranslationUnitDecl 0x130055608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1300564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x130055bd0 '__int128'
|-TypedefDecl 0x130056528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x130055bf0 'unsigned __int128'
|-TypedefDecl 0x12800be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x12800bc00 'struct __NSConstantString_tag'
|   `-Record 0x130056580 '__NSConstantString_tag'
|-TypedefDecl 0x12800be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x130055d90 '__SVInt8_t'
|-TypedefDecl 0x12800bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x130055db0 '__SVInt16_t'
|-TypedefDecl 0x12800bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x130055dd0 '__SVInt32_t'
|-TypedefDecl 0x12800bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x130055df0 '__SVInt64_t'
|-TypedefDecl 0x12800c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x130055e10 '__SVUint8_t'
|-TypedefDecl 0x12800c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x130055e30 '__SVUint16_t'
|-TypedefDecl 0x12800c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x130055e50 '__SVUint32_t'
|-TypedefDecl 0x12800c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x130055e70 '__SVUint64_t'
|-TypedefDecl 0x12800c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x130055e90 '__SVFloat16_t'
|-TypedefDecl 0x12800c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x130055eb0 '__SVFloat32_t'
|-TypedefDecl 0x12800c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x130055ed0 '__SVFloat64_t'
|-TypedefDecl 0x12800c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x130055ef0 '__SVBfloat16_t'
|-TypedefDecl 0x12800c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x130055f10 '__clang_svint8x2_t'
|-TypedefDecl 0x12800c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x130055f30 '__clang_svint16x2_t'
|-TypedefDecl 0x12800c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x130055f50 '__clang_svint32x2_t'
|-TypedefDecl 0x12800c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x130055f70 '__clang_svint64x2_t'
|-TypedefDecl 0x12800c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x130055f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x12800c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x130055fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12800c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x130055fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x12800c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x130055ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x12800c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x130056010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12800c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x130056030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12800c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x130056050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12800c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x130056070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12800c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x130056090 '__clang_svint8x3_t'
|-TypedefDecl 0x12800c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1300560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x12800c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1300560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x12800c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1300560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x12800c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x130056110 '__clang_svuint8x3_t'
|-TypedefDecl 0x12800ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x130056130 '__clang_svuint16x3_t'
|-TypedefDecl 0x12800cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x130056150 '__clang_svuint32x3_t'
|-TypedefDecl 0x12800cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x130056170 '__clang_svuint64x3_t'
|-TypedefDecl 0x12800cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x130056190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x12800d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1300561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x12800d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1300561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x12800d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1300561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x12800d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x130056210 '__clang_svint8x4_t'
|-TypedefDecl 0x12800d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x130056230 '__clang_svint16x4_t'
|-TypedefDecl 0x12800d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x130056250 '__clang_svint32x4_t'
|-TypedefDecl 0x12800d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x130056270 '__clang_svint64x4_t'
|-TypedefDecl 0x12800d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x130056290 '__clang_svuint8x4_t'
|-TypedefDecl 0x12800d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1300562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x12800d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1300562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x12800d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1300562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x12800d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x130056310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x12800d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x130056330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x12800d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x130056350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x12800d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x130056370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x12800da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x130056390 '__SVBool_t'
|-TypedefDecl 0x12800da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1300563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x12800dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1300563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x12800db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1300563f0 '__SVCount_t'
|-TypedefDecl 0x12800dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x12800dbb0 'char *'
|   `-BuiltinType 0x1300556b0 'char'
|-TypedefDecl 0x12800dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x12800dbb0 'char *'
|   `-BuiltinType 0x1300556b0 'char'
|-RecordDecl 0x12800dcc0 <dataset_diviso_filec/func17896_vuln.c:1:1, col:8> col:8 struct import_t
|-RecordDecl 0x12800dd60 <col:38, col:45> col:45 struct MACH0_
|-FunctionDecl 0x128026748 <col:1, line:68:1> line:1:18 invalid MACH0_ 'int (int)'
| |-ParmVarDecl 0x12800e338 <col:25> col:25 get_imports 'int'
| `-CompoundStmt 0x128030c70 <col:65, line:68:1>
|   |-DeclStmt 0x1280268f0 <line:2:2, col:26>
|   | `-VarDecl 0x128026888 <col:2, col:19> col:19 used imports 'struct import_t *'
|   |-DeclStmt 0x128026b30 <line:3:2, col:23>
|   | |-VarDecl 0x128026920 <col:2, col:6> col:6 used i 'int'
|   | |-VarDecl 0x1280269a0 <col:2, col:9> col:9 used j 'int'
|   | |-VarDecl 0x128026a20 <col:2, col:12> col:12 used idx 'int'
|   | `-VarDecl 0x128026aa0 <col:2, col:17> col:17 used stridx 'int'
|   |-DeclStmt 0x128026bc8 <line:4:2, col:20>
|   | `-VarDecl 0x128026b60 <col:2, col:14> col:14 used symstr 'const char *'
|   |-IfStmt 0x1280271a0 <line:6:2, line:7:10>
|   | |-BinaryOperator 0x128027138 <line:6:6, col:59> 'int' contains-errors '||'
|   | | |-BinaryOperator 0x128027080 <col:6, col:44> 'int' contains-errors '||'
|   | | | |-BinaryOperator 0x128026fc8 <col:6, col:28> 'int' contains-errors '||'
|   | | | | |-UnaryOperator 0x128026f18 <col:6, col:12> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | | | | | `-ImplicitCastExpr 0x128026f00 <col:7, col:12> '<dependent type>' contains-errors <LValueToRValue>
|   | | | | |   `-CXXDependentScopeMemberExpr 0x128026eb8 <col:7, col:12> '<dependent type>' contains-errors lvalue ->symtab
|   | | | | |     `-RecoveryExpr 0x128026e98 <col:7> '<dependent type>' contains-errors lvalue
|   | | | | `-UnaryOperator 0x128026fb0 <col:22, col:28> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | | | |   `-ImplicitCastExpr 0x128026f98 <col:23, col:28> '<dependent type>' contains-errors <LValueToRValue>
|   | | | |     `-CXXDependentScopeMemberExpr 0x128026f50 <col:23, col:28> '<dependent type>' contains-errors lvalue ->symstr
|   | | | |       `-RecoveryExpr 0x128026f30 <col:23> '<dependent type>' contains-errors lvalue
|   | | | `-UnaryOperator 0x128027068 <col:38, col:44> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | | |   `-ImplicitCastExpr 0x128027050 <col:39, col:44> '<dependent type>' contains-errors <LValueToRValue>
|   | | |     `-CXXDependentScopeMemberExpr 0x128027008 <col:39, col:44> '<dependent type>' contains-errors lvalue ->sects
|   | | |       `-RecoveryExpr 0x128026fe8 <col:39> '<dependent type>' contains-errors lvalue
|   | | `-UnaryOperator 0x128027120 <col:53, col:59> '<dependent type>' contains-errors prefix '!' cannot overflow
|   | |   `-ImplicitCastExpr 0x128027108 <col:54, col:59> '<dependent type>' contains-errors <LValueToRValue>
|   | |     `-CXXDependentScopeMemberExpr 0x1280270c0 <col:54, col:59> '<dependent type>' contains-errors lvalue ->indirectsyms
|   | |       `-RecoveryExpr 0x1280270a0 <col:54> '<dependent type>' contains-errors lvalue
|   | `-ReturnStmt 0x128027190 <line:7:3, col:10>
|   |   `-RecoveryExpr 0x128027170 <col:10> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x1280275d0 <line:8:2, line:10:2>
|   | |-BinaryOperator 0x128027550 <line:8:6, col:63> 'int' contains-errors '||'
|   | | |-BinaryOperator 0x128027460 <col:6, col:32> 'int' contains-errors '<'
|   | | | |-CXXDependentScopeMemberExpr 0x128027418 <col:6, col:20> '<dependent type>' contains-errors lvalue .nundefsym
|   | | | | `-CXXDependentScopeMemberExpr 0x1280273d0 <col:6, col:11> '<dependent type>' contains-errors lvalue ->dysymtab
|   | | | |   `-RecoveryExpr 0x1280273b0 <col:6> '<dependent type>' contains-errors lvalue
|   | | | `-IntegerLiteral 0x128027268 <col:32> 'int' 1
|   | | `-BinaryOperator 0x128027530 <col:37, col:63> 'int' contains-errors '>'
|   | |   |-CXXDependentScopeMemberExpr 0x1280274e8 <col:37, col:51> '<dependent type>' contains-errors lvalue .nundefsym
|   | |   | `-CXXDependentScopeMemberExpr 0x1280274a0 <col:37, col:42> '<dependent type>' contains-errors lvalue ->dysymtab
|   | |   |   `-RecoveryExpr 0x128027480 <col:37> '<dependent type>' contains-errors lvalue
|   | |   `-IntegerLiteral 0x128027350 <col:63> 'int' 1048575
|   | `-CompoundStmt 0x1280275b8 <col:72, line:10:2>
|   |   `-ReturnStmt 0x1280275a8 <line:9:3, col:10>
|   |     `-RecoveryExpr 0x128027588 <col:10> '<dependent type>' contains-errors lvalue
|   |-IfStmt 0x128027fa0 <line:11:2, line:13:2>
|   | |-RecoveryExpr 0x128027f20 <line:11:6, col:83> '_Bool' contains-errors
|   | `-CompoundStmt 0x128027f88 <col:86, line:13:2>
|   |   `-ReturnStmt 0x128027f78 <line:12:3, col:10>
|   |     `-RecoveryExpr 0x128027f58 <col:10> '<dependent type>' contains-errors lvalue
|   |-ForStmt 0x1280309e8 <line:14:2, line:54:2>
|   | |-BinaryOperator 0x128028040 <line:14:7, col:15> 'int' '='
|   | | |-DeclRefExpr 0x128027fc0 <col:7> 'int' lvalue Var 0x128026920 'i' 'int'
|   | | `-BinaryOperator 0x128028020 <col:11, col:15> 'int' '='
|   | |   |-DeclRefExpr 0x128027fe0 <col:11> 'int' lvalue Var 0x1280269a0 'j' 'int'
|   | |   `-IntegerLiteral 0x128028000 <col:15> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x1280281f8 <col:18, col:36> 'int' contains-errors '<'
|   | | |-DeclRefExpr 0x128028060 <col:18> 'int' lvalue Var 0x128026920 'i' 'int'
|   | | `-CXXDependentScopeMemberExpr 0x1280281b0 <col:22, col:36> '<dependent type>' contains-errors lvalue .nundefsym
|   | |   `-CXXDependentScopeMemberExpr 0x128028168 <col:22, col:27> '<dependent type>' contains-errors lvalue ->dysymtab
|   | |     `-RecoveryExpr 0x128028148 <col:22> '<dependent type>' contains-errors lvalue
|   | |-UnaryOperator 0x128028238 <col:47, col:48> 'int' postfix '++'
|   | | `-DeclRefExpr 0x128028218 <col:47> 'int' lvalue Var 0x128026920 'i' 'int'
|   | `-CompoundStmt 0x1280309b0 <col:52, line:54:2>
|   |   |-BinaryOperator 0x128028448 <line:15:3, col:35> 'int' contains-errors '='
|   |   | |-DeclRefExpr 0x128028250 <col:3> 'int' lvalue Var 0x128026a20 'idx' 'int'
|   |   | `-BinaryOperator 0x128028428 <col:9, col:35> '<dependent type>' contains-errors '+'
|   |   |   |-CXXDependentScopeMemberExpr 0x1280283e0 <col:9, col:23> '<dependent type>' contains-errors lvalue .iundefsym
|   |   |   | `-CXXDependentScopeMemberExpr 0x128028398 <col:9, col:14> '<dependent type>' contains-errors lvalue ->dysymtab
|   |   |   |   `-RecoveryExpr 0x128028378 <col:9> '<dependent type>' contains-errors lvalue
|   |   |   `-DeclRefExpr 0x128028318 <col:35> 'int' lvalue Var 0x128026920 'i' 'int'
|   |   |-IfStmt 0x128028be0 <line:16:3, line:20:3>
|   |   | |-BinaryOperator 0x128028698 <line:16:7, col:30> 'int' contains-errors '||'
|   |   | | |-BinaryOperator 0x1280285f0 <col:7, col:13> 'int' '<'
|   |   | | | |-ImplicitCastExpr 0x1280285d8 <col:7> 'int' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x128028468 <col:7> 'int' lvalue Var 0x128026a20 'idx' 'int'
|   |   | | | `-IntegerLiteral 0x128028488 <col:13> 'int' 0
|   |   | | `-BinaryOperator 0x128028678 <col:18, col:30> 'int' contains-errors '>='
|   |   | |   |-DeclRefExpr 0x1280284e0 <col:18> 'int' lvalue Var 0x128026a20 'idx' 'int'
|   |   | |   `-CXXDependentScopeMemberExpr 0x128028630 <col:25, col:30> '<dependent type>' contains-errors lvalue ->nsymtab
|   |   | |     `-RecoveryExpr 0x128028610 <col:25> '<dependent type>' contains-errors lvalue
|   |   | `-CompoundStmt 0x128028bc0 <col:39, line:20:3>
|   |   |   |-CallExpr 0x1280288d8 <line:17:4, col:18> 'int'
|   |   |   | |-ImplicitCastExpr 0x1280288c0 <col:4> 'int (*)()' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x128028810 <col:4> 'int ()' Function 0x128028758 'bprintf' 'int ()'
|   |   |   | `-ImplicitCastExpr 0x128028900 <col:13> 'char *' <ArrayToPointerDecay>
|   |   |   |   `-StringLiteral 0x128028870 <col:13> 'char[4]' lvalue "STR"
|   |   |   `-CallExpr 0x128028b68 <line:18:4, col:17> 'void'
|   |   |     |-ImplicitCastExpr 0x128028b50 <col:4> 'void (*)(void *)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x128028ac8 <col:4> 'void (void *)' Function 0x128028958 'free' 'void (void *)'
|   |   |     `-ImplicitCastExpr 0x128028ba8 <col:10> 'void *' <BitCast>
|   |   |       `-ImplicitCastExpr 0x128028b90 <col:10> 'struct import_t *' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x128028ae8 <col:10> 'struct import_t *' lvalue Var 0x128026888 'imports' 'struct import_t *'
|   |   |-IfStmt 0x12802b630 <line:22:3, line:26:3> has_else
|   |   | |-RecoveryExpr 0x12802b4d8 <line:22:7, col:36> '_Bool' contains-errors
|   |   | |-CompoundStmt 0x12802b538 <col:47, line:24:3>
|   |   | `-CompoundStmt 0x12802b618 <col:10, line:26:3>
|   |   |   `-BinaryOperator 0x12802b5f8 <line:25:4, col:13> 'const char *' '='
|   |   |     |-DeclRefExpr 0x12802b548 <col:4> 'const char *' lvalue Var 0x128026b60 'symstr' 'const char *'
|   |   |     `-ImplicitCastExpr 0x12802b5e0 <col:13> 'const char *' <NoOp>
|   |   |       `-ImplicitCastExpr 0x12802b5c8 <col:13> 'char *' <ArrayToPointerDecay>
|   |   |         `-StringLiteral 0x12802b5b0 <col:13> 'char[1]' lvalue ""
|   |   |-IfStmt 0x12802b700 <line:27:3, line:29:3>
|   |   | |-UnaryOperator 0x12802b6c8 <line:27:7, col:9> 'int' prefix '!' cannot overflow
|   |   | | `-ImplicitCastExpr 0x12802b6b0 <col:8, col:9> 'char' <LValueToRValue>
|   |   | |   `-UnaryOperator 0x12802b698 <col:8, col:9> 'const char' lvalue prefix '*' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x12802b680 <col:9> 'const char *' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x12802b660 <col:9> 'const char *' lvalue Var 0x128026b60 'symstr' 'const char *'
|   |   | `-CompoundStmt 0x12802b6e8 <col:17, line:29:3>
|   |   |   `-ContinueStmt 0x12802b6e0 <line:28:4>
|   |   `-CompoundStmt 0x128030860 <line:30:3, line:51:3>
|   |     |-DeclStmt 0x12802b7c0 <line:31:4, col:13>
|   |     | `-VarDecl 0x12802b738 <col:4, col:12> col:8 used i 'int' cinit
|   |     |   `-IntegerLiteral 0x12802b7a0 <col:12> 'int' 0
|   |     |-DeclStmt 0x12802b878 <line:32:4, col:15>
|   |     | `-VarDecl 0x12802b7f0 <col:4, col:14> col:8 used len 'int' cinit
|   |     |   `-IntegerLiteral 0x12802b858 <col:14> 'int' 0
|   |     |-DeclStmt 0x12802b910 <line:33:4, col:27>
|   |     | `-VarDecl 0x12802b8a8 <col:4, col:10> col:10 used symstr_dup 'char *'
|   |     `-IfStmt 0x128030840 <line:36:4, line:50:4>
|   |       |-BinaryOperator 0x12802ba70 <line:36:8, col:14> 'int' '>'
|   |       | |-ImplicitCastExpr 0x12802ba58 <col:8> 'int' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x12802ba18 <col:8> 'int' lvalue Var 0x12802b7f0 'len' 'int'
|   |       | `-IntegerLiteral 0x12802ba38 <col:14> 'int' 0
|   |       `-CompoundStmt 0x128030818 <col:17, line:50:4>
|   |         |-ForStmt 0x12802beb0 <line:37:5, line:42:5>
|   |         | |-BinaryOperator 0x12802bad0 <line:37:10, col:14> 'int' '='
|   |         | | |-DeclRefExpr 0x12802ba90 <col:10> 'int' lvalue Var 0x12802b738 'i' 'int'
|   |         | | `-IntegerLiteral 0x12802bab0 <col:14> 'int' 0
|   |         | |-<<<NULL>>>
|   |         | |-BinaryOperator 0x12802bb60 <col:17, col:21> 'int' '<'
|   |         | | |-ImplicitCastExpr 0x12802bb30 <col:17> 'int' <LValueToRValue>
|   |         | | | `-DeclRefExpr 0x12802baf0 <col:17> 'int' lvalue Var 0x12802b738 'i' 'int'
|   |         | | `-ImplicitCastExpr 0x12802bb48 <col:21> 'int' <LValueToRValue>
|   |         | |   `-DeclRefExpr 0x12802bb10 <col:21> 'int' lvalue Var 0x12802b7f0 'len' 'int'
|   |         | |-UnaryOperator 0x12802bba0 <col:26, col:27> 'int' postfix '++'
|   |         | | `-DeclRefExpr 0x12802bb80 <col:26> 'int' lvalue Var 0x12802b738 'i' 'int'
|   |         | `-CompoundStmt 0x12802be98 <col:31, line:42:5>
|   |         |   `-IfStmt 0x12802be78 <line:38:6, line:41:6>
|   |         |     |-BinaryOperator 0x12802bdb8 <line:38:10, col:55> 'int' '||'
|   |         |     | |-BinaryOperator 0x12802bcd8 <col:10, col:38> 'int' '=='
|   |         |     | | |-ImplicitCastExpr 0x12802bcc0 <col:10, col:33> 'int' <IntegralCast>
|   |         |     | | | `-CStyleCastExpr 0x12802bc78 <col:10, col:33> 'unsigned char' <IntegralCast>
|   |         |     | | |   `-ImplicitCastExpr 0x12802bc60 <col:25, col:33> 'char' <LValueToRValue> part_of_explicit_cast
|   |         |     | | |     `-ArraySubscriptExpr 0x12802bc28 <col:25, col:33> 'const char' lvalue
|   |         |     | | |       |-ImplicitCastExpr 0x12802bbf8 <col:25> 'const char *' <LValueToRValue>
|   |         |     | | |       | `-DeclRefExpr 0x12802bbb8 <col:25> 'const char *' lvalue Var 0x128026b60 'symstr' 'const char *'
|   |         |     | | |       `-ImplicitCastExpr 0x12802bc10 <col:32> 'int' <LValueToRValue>
|   |         |     | | |         `-DeclRefExpr 0x12802bbd8 <col:32> 'int' lvalue Var 0x12802b738 'i' 'int'
|   |         |     | | `-IntegerLiteral 0x12802bca0 <col:38> 'int' 255
|   |         |     | `-UnaryOperator 0x12802bda0 <col:46, col:55> 'int' prefix '!' cannot overflow
|   |         |     |   `-ImplicitCastExpr 0x12802bd88 <col:47, col:55> 'char' <LValueToRValue>
|   |         |     |     `-ArraySubscriptExpr 0x12802bd68 <col:47, col:55> 'const char' lvalue
|   |         |     |       |-ImplicitCastExpr 0x12802bd38 <col:47> 'const char *' <LValueToRValue>
|   |         |     |       | `-DeclRefExpr 0x12802bcf8 <col:47> 'const char *' lvalue Var 0x128026b60 'symstr' 'const char *'
|   |         |     |       `-ImplicitCastExpr 0x12802bd50 <col:54> 'int' <LValueToRValue>
|   |         |     |         `-DeclRefExpr 0x12802bd18 <col:54> 'int' lvalue Var 0x12802b738 'i' 'int'
|   |         |     `-CompoundStmt 0x12802be58 <col:58, line:41:6>
|   |         |       |-BinaryOperator 0x12802be30 <line:39:7, col:13> 'int' '='
|   |         |       | |-DeclRefExpr 0x12802bdd8 <col:7> 'int' lvalue Var 0x12802b7f0 'len' 'int'
|   |         |       | `-ImplicitCastExpr 0x12802be18 <col:13> 'int' <LValueToRValue>
|   |         |       |   `-DeclRefExpr 0x12802bdf8 <col:13> 'int' lvalue Var 0x12802b738 'i' 'int'
|   |         |       `-BreakStmt 0x12802be50 <line:40:7>
|   |         |-BinaryOperator 0x12802c0d8 <line:43:5, col:41> 'char *' '='
|   |         | |-DeclRefExpr 0x12802bee8 <col:5> 'char *' lvalue Var 0x12802b8a8 'symstr_dup' 'char *'
|   |         | `-ImplicitCastExpr 0x12802c0c0 <col:18, col:41> 'char *' <IntegralToPointer>
|   |         |   `-CallExpr 0x12802c060 <col:18, col:41> 'int'
|   |         |     |-ImplicitCastExpr 0x12802c048 <col:18> 'int (*)()' <FunctionToPointerDecay>
|   |         |     | `-DeclRefExpr 0x12802bfe8 <col:18> 'int ()' Function 0x12802bf30 'r_str_ndup' 'int ()'
|   |         |     |-ImplicitCastExpr 0x12802c090 <col:30> 'const char *' <LValueToRValue>
|   |         |     | `-DeclRefExpr 0x12802c008 <col:30> 'const char *' lvalue Var 0x128026b60 'symstr' 'const char *'
|   |         |     `-ImplicitCastExpr 0x12802c0a8 <col:38> 'int' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x12802c028 <col:38> 'int' lvalue Var 0x12802b7f0 'len' 'int'
|   |         `-IfStmt 0x1280307f8 <line:44:5, line:49:5>
|   |           |-ImplicitCastExpr 0x12802c118 <line:44:9> 'char *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x12802c0f8 <col:9> 'char *' lvalue Var 0x12802b8a8 'symstr_dup' 'char *'
|   |           `-CompoundStmt 0x1280307e0 <col:21, line:49:5>
|   |             `-CallExpr 0x128030788 <line:48:6, col:22> 'void'
|   |               |-ImplicitCastExpr 0x128030770 <col:6> 'void (*)(void *)' <FunctionToPointerDecay>
|   |               | `-DeclRefExpr 0x128030718 <col:6> 'void (void *)' Function 0x128028958 'free' 'void (void *)'
|   |               `-ImplicitCastExpr 0x1280307c8 <col:12> 'void *' <BitCast>
|   |                 `-ImplicitCastExpr 0x1280307b0 <col:12> 'char *' <LValueToRValue>
|   |                   `-DeclRefExpr 0x128030738 <col:12> 'char *' lvalue Var 0x12802b8a8 'symstr_dup' 'char *'
|   |-IfStmt 0x128030bf0 <line:57:2, line:65:2>
|   | |-RecoveryExpr 0x128030ab0 <line:57:6, col:12> '_Bool' contains-errors
|   | `-CompoundStmt 0x128030bd8 <col:33, line:65:2>
|   |   `-IfStmt 0x128030ba8 <line:58:3, line:64:3> has_else
|   |     |-BinaryOperator 0x128030b28 <line:58:7, col:11> 'int' '>'
|   |     | |-ImplicitCastExpr 0x128030b10 <col:7> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x128030ad0 <col:7> 'int' lvalue Var 0x1280269a0 'j' 'int'
|   |     | `-IntegerLiteral 0x128030af0 <col:11> 'int' 0
|   |     |-CompoundStmt 0x128030b68 <col:14, line:61:3>
|   |     `-CompoundStmt 0x128030b98 <col:10, line:64:3>
|   `-ReturnStmt 0x128030c60 <line:67:2, col:9>
|     `-ImplicitCastExpr 0x128030c48 <col:9> 'int' <PointerToIntegral>
|       `-ImplicitCastExpr 0x128030c30 <col:9> 'struct import_t *' <LValueToRValue>
|         `-DeclRefExpr 0x128030c10 <col:9> 'struct import_t *' lvalue Var 0x128026888 'imports' 'struct import_t *'
|-FunctionDecl 0x128027c58 <line:11:18> col:18 implicit used malloc 'void *(unsigned long)' extern
| |-ParmVarDecl 0x128027d58 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-BuiltinAttr 0x128027d00 <<invalid sloc>> Implicit 871
| `-AllocSizeAttr 0x128027dc8 <col:18> Implicit 1
`-FunctionDecl 0x128028958 <line:18:4> col:4 implicit used free 'void (void *)' extern
  |-ParmVarDecl 0x128028a58 <<invalid sloc>> <invalid sloc> 'void *'
  `-BuiltinAttr 0x128028a00 <<invalid sloc>> Implicit 873
