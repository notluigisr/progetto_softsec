TranslationUnitDecl 0x148855608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1488564b8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x148855bd0 '__int128'
|-TypedefDecl 0x148856528 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x148855bf0 'unsigned __int128'
|-TypedefDecl 0x14900be30 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x14900bc00 'struct __NSConstantString_tag'
|   `-Record 0x148856580 '__NSConstantString_tag'
|-TypedefDecl 0x14900be98 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x148855d90 '__SVInt8_t'
|-TypedefDecl 0x14900bf00 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x148855db0 '__SVInt16_t'
|-TypedefDecl 0x14900bf68 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x148855dd0 '__SVInt32_t'
|-TypedefDecl 0x14900bfd0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x148855df0 '__SVInt64_t'
|-TypedefDecl 0x14900c038 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x148855e10 '__SVUint8_t'
|-TypedefDecl 0x14900c0a0 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x148855e30 '__SVUint16_t'
|-TypedefDecl 0x14900c108 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x148855e50 '__SVUint32_t'
|-TypedefDecl 0x14900c170 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x148855e70 '__SVUint64_t'
|-TypedefDecl 0x14900c1d8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x148855e90 '__SVFloat16_t'
|-TypedefDecl 0x14900c240 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x148855eb0 '__SVFloat32_t'
|-TypedefDecl 0x14900c2a8 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x148855ed0 '__SVFloat64_t'
|-TypedefDecl 0x14900c310 <<invalid sloc>> <invalid sloc> implicit __SVBfloat16_t '__SVBfloat16_t'
| `-BuiltinType 0x148855ef0 '__SVBfloat16_t'
|-TypedefDecl 0x14900c378 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x148855f10 '__clang_svint8x2_t'
|-TypedefDecl 0x14900c3e0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x148855f30 '__clang_svint16x2_t'
|-TypedefDecl 0x14900c448 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x148855f50 '__clang_svint32x2_t'
|-TypedefDecl 0x14900c4b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x148855f70 '__clang_svint64x2_t'
|-TypedefDecl 0x14900c518 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x148855f90 '__clang_svuint8x2_t'
|-TypedefDecl 0x14900c580 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x148855fb0 '__clang_svuint16x2_t'
|-TypedefDecl 0x14900c5e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x148855fd0 '__clang_svuint32x2_t'
|-TypedefDecl 0x14900c650 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x148855ff0 '__clang_svuint64x2_t'
|-TypedefDecl 0x14900c6b8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x148856010 '__clang_svfloat16x2_t'
|-TypedefDecl 0x14900c720 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x148856030 '__clang_svfloat32x2_t'
|-TypedefDecl 0x14900c788 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x148856050 '__clang_svfloat64x2_t'
|-TypedefDecl 0x14900c7f0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x148856070 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x14900c858 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x148856090 '__clang_svint8x3_t'
|-TypedefDecl 0x14900c8c0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1488560b0 '__clang_svint16x3_t'
|-TypedefDecl 0x14900c928 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x1488560d0 '__clang_svint32x3_t'
|-TypedefDecl 0x14900c990 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x1488560f0 '__clang_svint64x3_t'
|-TypedefDecl 0x14900c9f8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x148856110 '__clang_svuint8x3_t'
|-TypedefDecl 0x14900ca60 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x148856130 '__clang_svuint16x3_t'
|-TypedefDecl 0x14900cac8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x148856150 '__clang_svuint32x3_t'
|-TypedefDecl 0x14900cb30 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x148856170 '__clang_svuint64x3_t'
|-TypedefDecl 0x14900cb98 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x148856190 '__clang_svfloat16x3_t'
|-TypedefDecl 0x14900d400 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1488561b0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x14900d468 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x1488561d0 '__clang_svfloat64x3_t'
|-TypedefDecl 0x14900d4d0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x1488561f0 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x14900d538 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x148856210 '__clang_svint8x4_t'
|-TypedefDecl 0x14900d5a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x148856230 '__clang_svint16x4_t'
|-TypedefDecl 0x14900d608 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x148856250 '__clang_svint32x4_t'
|-TypedefDecl 0x14900d670 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x148856270 '__clang_svint64x4_t'
|-TypedefDecl 0x14900d6d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x148856290 '__clang_svuint8x4_t'
|-TypedefDecl 0x14900d740 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1488562b0 '__clang_svuint16x4_t'
|-TypedefDecl 0x14900d7a8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x1488562d0 '__clang_svuint32x4_t'
|-TypedefDecl 0x14900d810 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x1488562f0 '__clang_svuint64x4_t'
|-TypedefDecl 0x14900d878 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x148856310 '__clang_svfloat16x4_t'
|-TypedefDecl 0x14900d8e0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x148856330 '__clang_svfloat32x4_t'
|-TypedefDecl 0x14900d948 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x148856350 '__clang_svfloat64x4_t'
|-TypedefDecl 0x14900d9b0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x148856370 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x14900da18 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x148856390 '__SVBool_t'
|-TypedefDecl 0x14900da80 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1488563b0 '__clang_svboolx2_t'
|-TypedefDecl 0x14900dae8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x1488563d0 '__clang_svboolx4_t'
|-TypedefDecl 0x14900db50 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x1488563f0 '__SVCount_t'
|-TypedefDecl 0x14900dbf8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x14900dbb0 'char *'
|   `-BuiltinType 0x1488556b0 'char'
|-TypedefDecl 0x14900dc68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x14900dbb0 'char *'
|   `-BuiltinType 0x1488556b0 'char'
`-FunctionDecl 0x14900dfb8 <dataset_diviso_filec/func17649_nonvuln.c:1:1, line:24:1> line:1:5 zipTryEncoding 'int (unsigned char *, unsigned int, long long *, unsigned char *)'
  |-ParmVarDecl 0x14900dd08 <col:20, col:35> col:35 used entry 'unsigned char *'
  |-ParmVarDecl 0x14900dd88 <col:42, col:55> col:55 used entrylen 'unsigned int'
  |-ParmVarDecl 0x14900de38 <col:65, col:76> col:76 used v 'long long *'
  |-ParmVarDecl 0x14900deb8 <col:79, col:94> col:94 used encoding 'unsigned char *'
  `-CompoundStmt 0x148922f80 <col:104, line:24:1>
    |-DeclStmt 0x14900e148 <line:2:5, col:20>
    | `-VarDecl 0x14900e0e0 <col:5, col:15> col:15 used value 'long long'
    |-IfStmt 0x14900e2d0 <line:4:5, col:49>
    | |-BinaryOperator 0x14900e280 <col:9, col:39> 'int' '||'
    | | |-BinaryOperator 0x14900e1d0 <col:9, col:21> 'int' '>='
    | | | |-ImplicitCastExpr 0x14900e1a0 <col:9> 'unsigned int' <LValueToRValue>
    | | | | `-DeclRefExpr 0x14900e160 <col:9> 'unsigned int' lvalue ParmVar 0x14900dd88 'entrylen' 'unsigned int'
    | | | `-ImplicitCastExpr 0x14900e1b8 <col:21> 'unsigned int' <IntegralCast>
    | | |   `-IntegerLiteral 0x14900e180 <col:21> 'int' 32
    | | `-BinaryOperator 0x14900e260 <col:27, col:39> 'int' '=='
    | |   |-ImplicitCastExpr 0x14900e230 <col:27> 'unsigned int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x14900e1f0 <col:27> 'unsigned int' lvalue ParmVar 0x14900dd88 'entrylen' 'unsigned int'
    | |   `-ImplicitCastExpr 0x14900e248 <col:39> 'unsigned int' <IntegralCast>
    | |     `-IntegerLiteral 0x14900e210 <col:39> 'int' 0
    | `-ReturnStmt 0x14900e2c0 <col:42, col:49>
    |   `-IntegerLiteral 0x14900e2a0 <col:49> 'int' 0
    |-IfStmt 0x148922f30 <line:5:5, line:22:5>
    | |-CallExpr 0x149027bf8 <line:5:9, col:47> 'int'
    | | |-ImplicitCastExpr 0x149027be0 <col:9> 'int (*)()' <FunctionToPointerDecay>
    | | | `-DeclRefExpr 0x149027ab8 <col:9> 'int ()' Function 0x149027a00 'string2ll' 'int ()'
    | | |-CStyleCastExpr 0x149027b28 <col:19, col:26> 'char *' <BitCast>
    | | | `-ImplicitCastExpr 0x149027b10 <col:26> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
    | | |   `-DeclRefExpr 0x149027ad8 <col:26> 'unsigned char *' lvalue ParmVar 0x14900dd08 'entry' 'unsigned char *'
    | | |-ImplicitCastExpr 0x149027c30 <col:32> 'unsigned int' <LValueToRValue>
    | | | `-DeclRefExpr 0x149027b50 <col:32> 'unsigned int' lvalue ParmVar 0x14900dd88 'entrylen' 'unsigned int'
    | | `-UnaryOperator 0x149027b90 <col:41, col:42> 'long long *' prefix '&' cannot overflow
    | |   `-DeclRefExpr 0x149027b70 <col:42> 'long long' lvalue Var 0x14900e0e0 'value' 'long long'
    | `-CompoundStmt 0x148922f08 <col:50, line:22:5>
    |   |-IfStmt 0x148922e00 <line:7:9, line:19:9> has_else
    |   | |-BinaryOperator 0x149027d68 <line:7:13, col:36> 'int' '&&'
    |   | | |-BinaryOperator 0x149027cb8 <col:13, col:22> 'int' '>='
    |   | | | |-ImplicitCastExpr 0x149027c88 <col:13> 'long long' <LValueToRValue>
    |   | | | | `-DeclRefExpr 0x149027c48 <col:13> 'long long' lvalue Var 0x14900e0e0 'value' 'long long'
    |   | | | `-ImplicitCastExpr 0x149027ca0 <col:22> 'long long' <IntegralCast>
    |   | | |   `-IntegerLiteral 0x149027c68 <col:22> 'int' 0
    |   | | `-BinaryOperator 0x149027d48 <col:27, col:36> 'int' '<='
    |   | |   |-ImplicitCastExpr 0x149027d18 <col:27> 'long long' <LValueToRValue>
    |   | |   | `-DeclRefExpr 0x149027cd8 <col:27> 'long long' lvalue Var 0x14900e0e0 'value' 'long long'
    |   | |   `-ImplicitCastExpr 0x149027d30 <col:36> 'long long' <IntegralCast>
    |   | |     `-IntegerLiteral 0x149027cf8 <col:36> 'int' 12
    |   | |-CompoundStmt 0x149027f10 <col:40, line:9:9>
    |   | | `-BinaryOperator 0x149027ef0 <line:8:13, col:41> 'unsigned char' contains-errors '='
    |   | |   |-UnaryOperator 0x149027e98 <col:13, col:14> 'unsigned char' lvalue prefix '*' cannot overflow
    |   | |   | `-ImplicitCastExpr 0x149027e80 <col:14> 'unsigned char *' <LValueToRValue>
    |   | |   |   `-DeclRefExpr 0x149027d88 <col:14> 'unsigned char *' lvalue ParmVar 0x14900deb8 'encoding' 'unsigned char *'
    |   | |   `-BinaryOperator 0x149027ed0 <col:25, col:41> '<dependent type>' contains-errors '+'
    |   | |     |-RecoveryExpr 0x149027eb0 <col:25> '<dependent type>' contains-errors lvalue
    |   | |     `-DeclRefExpr 0x149027df0 <col:41> 'long long' lvalue Var 0x14900e0e0 'value' 'long long'
    |   | `-IfStmt 0x148922dd0 <line:9:16, line:19:9> has_else
    |   |   |-BinaryOperator 0x149028078 <line:9:20, col:50> 'int' contains-errors '&&'
    |   |   | |-BinaryOperator 0x149028018 <col:20, col:29> 'int' contains-errors '>='
    |   |   | | |-DeclRefExpr 0x149027f28 <col:20> 'long long' lvalue Var 0x14900e0e0 'value' 'long long'
    |   |   | | `-RecoveryExpr 0x149027ff8 <col:29> '<dependent type>' contains-errors lvalue
    |   |   | `-BinaryOperator 0x149028058 <col:41, col:50> 'int' contains-errors '<='
    |   |   |   |-DeclRefExpr 0x149027f80 <col:41> 'long long' lvalue Var 0x14900e0e0 'value' 'long long'
    |   |   |   `-RecoveryExpr 0x149028038 <col:50> '<dependent type>' contains-errors lvalue
    |   |   |-CompoundStmt 0x1490281c0 <col:60, line:11:9>
    |   |   | `-BinaryOperator 0x1490281a0 <line:10:13, col:25> 'unsigned char' contains-errors '='
    |   |   |   |-UnaryOperator 0x149028168 <col:13, col:14> 'unsigned char' lvalue prefix '*' cannot overflow
    |   |   |   | `-ImplicitCastExpr 0x149028150 <col:14> 'unsigned char *' <LValueToRValue>
    |   |   |   |   `-DeclRefExpr 0x149028098 <col:14> 'unsigned char *' lvalue ParmVar 0x14900deb8 'encoding' 'unsigned char *'
    |   |   |   `-RecoveryExpr 0x149028180 <col:25> '<dependent type>' contains-errors lvalue
    |   |   `-IfStmt 0x148922da0 <line:11:16, line:19:9> has_else
    |   |     |-BinaryOperator 0x149028328 <line:11:20, col:51> 'int' contains-errors '&&'
    |   |     | |-BinaryOperator 0x1490282c8 <col:20, col:29> 'int' contains-errors '>='
    |   |     | | |-DeclRefExpr 0x1490281d8 <col:20> 'long long' lvalue Var 0x14900e0e0 'value' 'long long'
    |   |     | | `-RecoveryExpr 0x1490282a8 <col:29> '<dependent type>' contains-errors lvalue
    |   |     | `-BinaryOperator 0x149028308 <col:42, col:51> 'int' contains-errors '<='
    |   |     |   |-DeclRefExpr 0x149028230 <col:42> 'long long' lvalue Var 0x14900e0e0 'value' 'long long'
    |   |     |   `-RecoveryExpr 0x1490282e8 <col:51> '<dependent type>' contains-errors lvalue
    |   |     |-CompoundStmt 0x149028470 <col:62, line:13:9>
    |   |     | `-BinaryOperator 0x149028450 <line:12:13, col:25> 'unsigned char' contains-errors '='
    |   |     |   |-UnaryOperator 0x149028418 <col:13, col:14> 'unsigned char' lvalue prefix '*' cannot overflow
    |   |     |   | `-ImplicitCastExpr 0x149028400 <col:14> 'unsigned char *' <LValueToRValue>
    |   |     |   |   `-DeclRefExpr 0x149028348 <col:14> 'unsigned char *' lvalue ParmVar 0x14900deb8 'encoding' 'unsigned char *'
    |   |     |   `-RecoveryExpr 0x149028430 <col:25> '<dependent type>' contains-errors lvalue
    |   |     `-IfStmt 0x148922d70 <line:13:16, line:19:9> has_else
    |   |       |-BinaryOperator 0x1490285d8 <line:13:20, col:51> 'int' contains-errors '&&'
    |   |       | |-BinaryOperator 0x149028578 <col:20, col:29> 'int' contains-errors '>='
    |   |       | | |-DeclRefExpr 0x149028488 <col:20> 'long long' lvalue Var 0x14900e0e0 'value' 'long long'
    |   |       | | `-RecoveryExpr 0x149028558 <col:29> '<dependent type>' contains-errors lvalue
    |   |       | `-BinaryOperator 0x1490285b8 <col:42, col:51> 'int' contains-errors '<='
    |   |       |   |-DeclRefExpr 0x1490284e0 <col:42> 'long long' lvalue Var 0x14900e0e0 'value' 'long long'
    |   |       |   `-RecoveryExpr 0x149028598 <col:51> '<dependent type>' contains-errors lvalue
    |   |       |-CompoundStmt 0x149028720 <col:62, line:15:9>
    |   |       | `-BinaryOperator 0x149028700 <line:14:13, col:25> 'unsigned char' contains-errors '='
    |   |       |   |-UnaryOperator 0x1490286c8 <col:13, col:14> 'unsigned char' lvalue prefix '*' cannot overflow
    |   |       |   | `-ImplicitCastExpr 0x1490286b0 <col:14> 'unsigned char *' <LValueToRValue>
    |   |       |   |   `-DeclRefExpr 0x1490285f8 <col:14> 'unsigned char *' lvalue ParmVar 0x14900deb8 'encoding' 'unsigned char *'
    |   |       |   `-RecoveryExpr 0x1490286e0 <col:25> '<dependent type>' contains-errors lvalue
    |   |       `-IfStmt 0x148922d40 <line:15:16, line:19:9> has_else
    |   |         |-BinaryOperator 0x149028888 <line:15:20, col:51> 'int' contains-errors '&&'
    |   |         | |-BinaryOperator 0x149028828 <col:20, col:29> 'int' contains-errors '>='
    |   |         | | |-DeclRefExpr 0x149028738 <col:20> 'long long' lvalue Var 0x14900e0e0 'value' 'long long'
    |   |         | | `-RecoveryExpr 0x149028808 <col:29> '<dependent type>' contains-errors lvalue
    |   |         | `-BinaryOperator 0x149028868 <col:42, col:51> 'int' contains-errors '<='
    |   |         |   |-DeclRefExpr 0x149028790 <col:42> 'long long' lvalue Var 0x14900e0e0 'value' 'long long'
    |   |         |   `-RecoveryExpr 0x149028848 <col:51> '<dependent type>' contains-errors lvalue
    |   |         |-CompoundStmt 0x1490289d0 <col:62, line:17:9>
    |   |         | `-BinaryOperator 0x1490289b0 <line:16:13, col:25> 'unsigned char' contains-errors '='
    |   |         |   |-UnaryOperator 0x149028978 <col:13, col:14> 'unsigned char' lvalue prefix '*' cannot overflow
    |   |         |   | `-ImplicitCastExpr 0x149028960 <col:14> 'unsigned char *' <LValueToRValue>
    |   |         |   |   `-DeclRefExpr 0x1490288a8 <col:14> 'unsigned char *' lvalue ParmVar 0x14900deb8 'encoding' 'unsigned char *'
    |   |         |   `-RecoveryExpr 0x149028990 <col:25> '<dependent type>' contains-errors lvalue
    |   |         `-CompoundStmt 0x148922d28 <line:17:16, line:19:9>
    |   |           `-BinaryOperator 0x148922d08 <line:18:13, col:25> 'unsigned char' contains-errors '='
    |   |             |-UnaryOperator 0x148922cd0 <col:13, col:14> 'unsigned char' lvalue prefix '*' cannot overflow
    |   |             | `-ImplicitCastExpr 0x148922cb8 <col:14> 'unsigned char *' <LValueToRValue>
    |   |             |   `-DeclRefExpr 0x148922c00 <col:14> 'unsigned char *' lvalue ParmVar 0x14900deb8 'encoding' 'unsigned char *'
    |   |             `-RecoveryExpr 0x148922ce8 <col:25> '<dependent type>' contains-errors lvalue
    |   |-BinaryOperator 0x148922eb8 <line:20:9, col:14> 'long long' '='
    |   | |-UnaryOperator 0x148922e68 <col:9, col:10> 'long long' lvalue prefix '*' cannot overflow
    |   | | `-ImplicitCastExpr 0x148922e50 <col:10> 'long long *' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x148922e30 <col:10> 'long long *' lvalue ParmVar 0x14900de38 'v' 'long long *'
    |   | `-ImplicitCastExpr 0x148922ea0 <col:14> 'long long' <LValueToRValue>
    |   |   `-DeclRefExpr 0x148922e80 <col:14> 'long long' lvalue Var 0x14900e0e0 'value' 'long long'
    |   `-ReturnStmt 0x148922ef8 <line:21:9, col:16>
    |     `-IntegerLiteral 0x148922ed8 <col:16> 'int' 1
    `-ReturnStmt 0x148922f70 <line:23:5, col:12>
      `-IntegerLiteral 0x148922f50 <col:12> 'int' 0
