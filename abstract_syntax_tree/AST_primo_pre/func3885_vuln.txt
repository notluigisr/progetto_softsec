`-FunctionDecl 0x12a142408  line:1:1 invalid handle_keywordonly_args 'int (struct compiling *, const int *, int, int *, int *)'
  |-ParmVarDecl 0x12a129048 <col:25, col:43> col:43 used c 'struct compiling *'
  |-ParmVarDecl 0x12a1290e0 <col:46, col:58> col:58 invalid n 'const int *'
  |-ParmVarDecl 0x12a129160 <col:61, col:65> col:65 used start 'int'
  |-ParmVarDecl 0x12a142218 <line:2:25, col:35> col:35 invalid kwonlyargs 'int *'
  |-ParmVarDecl 0x12a142298 <col:47, col:57> col:57 invalid kwdefaults 'int *'
  `-CompoundStmt 0x12a144400 <line:3:1, line:64:1>
    |-DeclStmt 0x12a1425c0 <line:8:5, col:18>
    | `-VarDecl 0x12a142520 <col:5, col:13> col:9 used i 'int' cinit
    |   `-ImplicitCastExpr 0x12a1425a8 <col:13> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x12a142588 <col:13> 'int' lvalue ParmVar 0x12a129160 'start' 'int'
    |-DeclStmt 0x12a142678 <line:9:5, col:14>
    | `-VarDecl 0x12a1425f0 <col:5, col:13> col:9 used j 'int' cinit
    |   `-IntegerLiteral 0x12a142658 <col:13> 'int' 0
    |-IfStmt 0x12a142b30 <line:11:5, line:14:5>
    | |-BinaryOperator 0x12a142708 <line:11:9, col:23> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x12a142690 <col:9> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x12a1426e8 <col:23> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x12a142b10 <col:29, line:14:5>
    |   |-CallExpr 0x12a142a90 <line:12:9, col:44> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x12a142880 <col:9> 'int ()' Function 0x12a1427c8 'ast_error' 'int ()'
    |   | |-DeclRefExpr 0x12a1428a0 <col:19> 'struct compiling *' lvalue ParmVar 0x12a129048 'c' 'struct compiling *'
    |   | |-CallExpr 0x12a142a00 <col:22, col:36> '<dependent type>' contains-errors
    |   | | |-DeclRefExpr 0x12a1429a0 <col:22> 'int ()' Function 0x12a1428e8 'CHILD' 'int ()'
    |   | | |-RecoveryExpr 0x12a1429c0 <col:28> '<dependent type>' contains-errors lvalue
    |   | | `-DeclRefExpr 0x12a1429e0 <col:31> 'int' lvalue ParmVar 0x12a129160 'start' 'int'
    |   | `-StringLiteral 0x12a142a70 <col:39> 'char[4]' lvalue "STR"
    |   `-ReturnStmt 0x12a142b00 <line:13:9, col:17>
    |     `-UnaryOperator 0x12a142ae8 <col:16, col:17> 'int' prefix '-'
    |       `-IntegerLiteral 0x12a142ac8 <col:17> 'int' 1
    |-CallExpr 0x12a142d10 <line:15:5, col:30> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x12a142c30 <col:5> 'int ()' Function 0x12a142b78 'assert' 'int ()'
    | `-BinaryOperator 0x12a142cf0 <col:12, col:26> 'int' contains-errors '!='
    |   |-RecoveryExpr 0x12a142c50 <col:12> '<dependent type>' contains-errors lvalue
    |   `-RecoveryExpr 0x12a142cd0 <col:26> '<dependent type>' contains-errors lvalue
    |-WhileStmt 0x12a144330 <line:16:5, line:60:5>
    | |-BinaryOperator 0x12a142ea0 <line:16:12, col:21> 'int' contains-errors '<'
    | | |-DeclRefExpr 0x12a142d38 <col:12> 'int' lvalue Var 0x12a142520 'i' 'int'
    | | `-CallExpr 0x12a142e78 <col:16, col:21> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x12a142e38 <col:16> 'int ()' Function 0x12a142d80 'NCH' 'int ()'
    | |   `-RecoveryExpr 0x12a142e58 <col:20> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x12a144318 <col:24, line:60:5>
    |   `-SwitchStmt 0x12a1430d8 <line:18:9, line:59:9>
    |     |-CallExpr 0x12a1430b0 <line:18:17, col:24> '<dependent type>' contains-errors
    |     | |-DeclRefExpr 0x12a143030 <col:17> 'int ()' Function 0x12a142f78 'TYPE' 'int ()'
    |     | `-RecoveryExpr 0x12a143090 <col:22> '<dependent type>' contains-errors lvalue
    |     `-CompoundStmt 0x12a1442b0 <col:27, line:59:9>
    |       |-IfStmt 0x12a143870 <line:21:17, line:30:17> has_else
    |       | |-RecoveryExpr 0x12a143330 <line:21:21, col:64> '_Bool' contains-errors
    |       | |-CompoundStmt 0x12a1437e0 <col:71, line:27:17>
    |       | | |-IfStmt 0x12a143610 <line:23:21, line:24:30>
    |       | | | |-RecoveryExpr 0x12a143588 <line:23:25, col:26> '_Bool' contains-errors
    |       | | | `-GotoStmt 0x12a1435f8 <line:24:25, col:30> 'error' 0x12a1435a8
    |       | | `-CompoundAssignOperator 0x12a1437b0 <line:26:21, col:26> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |       | |   |-DeclRefExpr 0x12a143770 <col:21> 'int' lvalue Var 0x12a142520 'i' 'int'
    |       | |   `-IntegerLiteral 0x12a143790 <col:26> 'int' 2
    |       | `-CompoundStmt 0x12a143860 <line:28:22, line:30:17>
    |       |-IfStmt 0x12a143a00 <line:31:17, line:39:17> has_else
    |       | |-RecoveryExpr 0x12a1438e0 <line:31:21, col:32> '_Bool' contains-errors
    |       | |-CompoundStmt 0x12a1439d8 <col:35, line:36:17>
    |       | | `-IfStmt 0x12a1439b8 <line:34:21, line:35:30>
    |       | |   |-RecoveryExpr 0x12a143980 <line:34:25, col:26> '_Bool' contains-errors
    |       | |   `-GotoStmt 0x12a1439a0 <line:35:25, col:30> 'error' 0x12a1435a8
    |       | `-CompoundStmt 0x12a1439f0 <line:37:22, line:39:17>
    |       |-IfStmt 0x12a143ba8 <line:42:17, line:43:26>
    |       | |-RecoveryExpr 0x12a143b70 <line:42:21, col:22> '_Bool' contains-errors
    |       | `-GotoStmt 0x12a143b90 <line:43:21, col:26> 'error' 0x12a1435a8
    |       |-IfStmt 0x12a143d40 <line:44:17, line:45:26>
    |       | |-RecoveryExpr 0x12a143d08 <line:44:21, col:53> '_Bool' contains-errors
    |       | `-GotoStmt 0x12a143d28 <line:45:21, col:26> 'error' 0x12a1435a8
    |       |-IfStmt 0x12a144058 <line:49:17, line:50:26>
    |       | |-UnaryOperator 0x12a144028 <line:49:21, col:22> 'int' prefix '!' cannot overflow
    |       | | `-ImplicitCastExpr 0x12a144010 <col:22> 'int (*)()' <FunctionToPointerDecay>
    |       | |   `-DeclRefExpr 0x12a143fc0 <col:22> 'int ()' Function 0x12a143d88 'arg' 'int ()'
    |       | `-GotoStmt 0x12a144040 <line:50:21, col:26> 'error' 0x12a1435a8
    |       |-CallExpr 0x12a144110 <line:51:17, col:50> '<dependent type>' contains-errors
    |       | |-DeclRefExpr 0x12a144078 <col:17> 'int ()' Function 0x12a143658 'asdl_seq_SET' 'int ()'
    |       | |-RecoveryExpr 0x12a144098 <col:30> '<dependent type>' contains-errors lvalue
    |       | |-UnaryOperator 0x12a1440d8 <col:42, col:43> 'int' postfix '++'
    |       | | `-DeclRefExpr 0x12a1440b8 <col:42> 'int' lvalue Var 0x12a1425f0 'j' 'int'
    |       | `-DeclRefExpr 0x12a1440f0 <col:47> 'int ()' Function 0x12a143d88 'arg' 'int ()'
    |       |-CompoundAssignOperator 0x12a144188 <line:52:17, col:22> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |       | |-DeclRefExpr 0x12a144148 <col:17> 'int' lvalue Var 0x12a142520 'i' 'int'
    |       | `-IntegerLiteral 0x12a144168 <col:22> 'int' 2
    |       |-BreakStmt 0x12a1441b8 <line:53:17>
    |       |-ReturnStmt 0x12a144200 <line:55:17, col:24>
    |       | `-ImplicitCastExpr 0x12a1441e0 <col:24> 'int' <LValueToRValue>
    |       |   `-DeclRefExpr 0x12a1441c0 <col:24> 'int' lvalue Var 0x12a142520 'i' 'int'
    |       |-DefaultStmt 0x12a144278 <line:56:13, col:20>
    |       | `-NullStmt 0x12a144270 <col:20>
    |       `-GotoStmt 0x12a144298 <line:58:17, col:22> 'error' 0x12a1435a8
    |-ReturnStmt 0x12a144388 <line:61:5, col:12>
    | `-ImplicitCastExpr 0x12a144370 <col:12> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x12a144350 <col:12> 'int' lvalue Var 0x12a142520 'i' 'int'
    `-LabelStmt 0x12a1443e0 <line:62:2, line:63:13> 'error'
      `-ReturnStmt 0x12a1443d0 <col:5, col:13>
        `-UnaryOperator 0x12a1443b8 <col:12, col:13> 'int' prefix '-'
          `-IntegerLiteral 0x12a144398 <col:13> 'int' 1
