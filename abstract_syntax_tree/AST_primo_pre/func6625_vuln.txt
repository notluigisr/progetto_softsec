`-FunctionDecl 0x1471283e8  line:1:15 invalid CurvesAlloc 'int *(int, int, int, int **)'
  |-ParmVarDecl 0x1471280f0 <col:27, col:38> col:38 invalid ContextID 'int'
  |-ParmVarDecl 0x147128170 <col:49, col:53> col:53 used nCurves 'int'
  |-ParmVarDecl 0x1471281f0 <col:62, col:66> col:66 used nElements 'int'
  |-ParmVarDecl 0x1471282e0 <col:77, col:92> col:92 invalid G 'int **'
  `-CompoundStmt 0x147142d48 <line:2:1, line:45:1>
    |-DeclStmt 0x1471285c8 <line:3:5, col:13>
    | |-VarDecl 0x1471284c8 <col:5, col:9> col:9 used i 'int'
    | `-VarDecl 0x147128548 <col:5, col:12> col:12 used j 'int'
    |-IfStmt 0x147128708 <line:7:5, col:29>
    | |-BinaryOperator 0x1471286a0 <col:9, col:16> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x147128660 <col:9> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x147128680 <col:16> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x1471286f8 <col:22, col:29>
    |   `-RecoveryExpr 0x1471286d8 <col:29> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x147141f10 <line:13:5, col:38>
    | |-BinaryOperator 0x147141ea8 <col:9, col:25> 'int' contains-errors '=='
    | | |-CXXDependentScopeMemberExpr 0x147141e40 <col:9, col:15> '<dependent type>' contains-errors lvalue ->Curves
    | | | `-RecoveryExpr 0x147141e20 <col:9> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x147141e88 <col:25> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x147141f00 <col:31, col:38>
    |   `-RecoveryExpr 0x147141ee0 <col:38> '<dependent type>' contains-errors lvalue
    `-ForStmt 0x147142d10 <line:15:5, line:42:5>
      |-BinaryOperator 0x147141f70 <line:15:10, col:12> 'int' '='
      | |-DeclRefExpr 0x147141f30 <col:10> 'int' lvalue Var 0x1471284c8 'i' 'int'
      | `-IntegerLiteral 0x147141f50 <col:12> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x147142000 <col:15, col:19> 'int' '<'
      | |-ImplicitCastExpr 0x147141fd0 <col:15> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x147141f90 <col:15> 'int' lvalue Var 0x1471284c8 'i' 'int'
      | `-ImplicitCastExpr 0x147141fe8 <col:19> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x147141fb0 <col:19> 'int' lvalue ParmVar 0x147128170 'nCurves' 'int'
      |-UnaryOperator 0x147142040 <col:28, col:29> 'int' postfix '++'
      | `-DeclRefExpr 0x147142020 <col:28> 'int' lvalue Var 0x1471284c8 'i' 'int'
      `-CompoundStmt 0x147142cf0 <col:33, line:42:5>
        |-IfStmt 0x147142480 <line:19:9, line:27:9>
        | |-RecoveryExpr 0x147142098 <line:19:13, col:31> '_Bool' contains-errors
        | `-CompoundStmt 0x147142468 <col:37, line:27:9>
        |   `-ForStmt 0x1471423b0 <line:21:13, line:23:13>
        |     |-BinaryOperator 0x1471420f8 <line:21:18, col:20> 'int' '='
        |     | |-DeclRefExpr 0x1471420b8 <col:18> 'int' lvalue Var 0x147128548 'j' 'int'
        |     | `-IntegerLiteral 0x1471420d8 <col:20> 'int' 0
        |     |-<<<NULL>>>
        |     |-BinaryOperator 0x147142188 <col:23, col:27> 'int' '<'
        |     | |-ImplicitCastExpr 0x147142158 <col:23> 'int' <LValueToRValue>
        |     | | `-DeclRefExpr 0x147142118 <col:23> 'int' lvalue Var 0x147128548 'j' 'int'
        |     | `-ImplicitCastExpr 0x147142170 <col:27> 'int' <LValueToRValue>
        |     |   `-DeclRefExpr 0x147142138 <col:27> 'int' lvalue Var 0x1471284c8 'i' 'int'
        |     |-UnaryOperator 0x1471421c8 <col:30, col:31> 'int' postfix '++'
        |     | `-DeclRefExpr 0x1471421a8 <col:30> 'int' lvalue Var 0x147128548 'j' 'int'
        |     `-CompoundStmt 0x1471423a0 <col:35, line:23:13>
        `-IfStmt 0x147142cc0 <line:29:9, line:41:9> has_else
          |-BinaryOperator 0x1471424f8 <line:29:13, col:26> 'int' '=='
          | |-ImplicitCastExpr 0x1471424e0 <col:13> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x1471424a0 <col:13> 'int' lvalue ParmVar 0x1471281f0 'nElements' 'int'
          | `-IntegerLiteral 0x1471424c0 <col:26> 'int' 256
          |-CompoundStmt 0x147142a30 <col:31, line:35:9>
          | `-ForStmt 0x1471429f8 <line:31:13, line:34:13>
          |   |-BinaryOperator 0x147142558 <line:31:18, col:20> 'int' '='
          |   | |-DeclRefExpr 0x147142518 <col:18> 'int' lvalue Var 0x147128548 'j' 'int'
          |   | `-IntegerLiteral 0x147142538 <col:20> 'int' 0
          |   |-<<<NULL>>>
          |   |-BinaryOperator 0x1471425e8 <col:23, col:27> 'int' '<'
          |   | |-ImplicitCastExpr 0x1471425b8 <col:23> 'int' <LValueToRValue>
          |   | | `-DeclRefExpr 0x147142578 <col:23> 'int' lvalue Var 0x147128548 'j' 'int'
          |   | `-ImplicitCastExpr 0x1471425d0 <col:27> 'int' <LValueToRValue>
          |   |   `-DeclRefExpr 0x147142598 <col:27> 'int' lvalue ParmVar 0x1471281f0 'nElements' 'int'
          |   |-UnaryOperator 0x147142628 <col:38, col:39> 'int' postfix '++'
          |   | `-DeclRefExpr 0x147142608 <col:38> 'int' lvalue Var 0x147128548 'j' 'int'
          |   `-CompoundStmt 0x1471429e8 <col:43, line:34:13>
          `-CompoundStmt 0x147142ca8 <line:36:14, line:41:9>
            `-ForStmt 0x147142c70 <line:38:13, line:40:13>
              |-BinaryOperator 0x147142a88 <line:38:18, col:20> 'int' '='
              | |-DeclRefExpr 0x147142a48 <col:18> 'int' lvalue Var 0x147128548 'j' 'int'
              | `-IntegerLiteral 0x147142a68 <col:20> 'int' 0
              |-<<<NULL>>>
              |-BinaryOperator 0x147142b18 <col:23, col:27> 'int' '<'
              | |-ImplicitCastExpr 0x147142ae8 <col:23> 'int' <LValueToRValue>
              | | `-DeclRefExpr 0x147142aa8 <col:23> 'int' lvalue Var 0x147128548 'j' 'int'
              | `-ImplicitCastExpr 0x147142b00 <col:27> 'int' <LValueToRValue>
              |   `-DeclRefExpr 0x147142ac8 <col:27> 'int' lvalue ParmVar 0x1471281f0 'nElements' 'int'
              |-UnaryOperator 0x147142b58 <col:38, col:39> 'int' postfix '++'
              | `-DeclRefExpr 0x147142b38 <col:38> 'int' lvalue Var 0x147128548 'j' 'int'
              `-CompoundStmt 0x147142c60 <col:43, line:40:13>
