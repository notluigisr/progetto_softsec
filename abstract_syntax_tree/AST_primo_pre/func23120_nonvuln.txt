`-FunctionDecl 0x12e00dda8  line:1:1 check_valid_filter_name_or_fail 'int (const char *)'
  |-ParmVarDecl 0x12e00dcd8 <col:33, col:45> col:45 used filter_name 'const char *'
  `-CompoundStmt 0x12e0284e0 <line:2:1, line:20:1>
    |-IfStmt 0x12e00e218 <line:6:2, line:13:2>
    | |-UnaryOperator 0x12e00df38 <line:6:6, col:7> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x12e00df20 <col:7> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x12e00df00 <col:7> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x12e00e208 <col:22, line:13:2>
    `-IfStmt 0x12e0284c0 <line:15:2, line:19:2>
      |-RecoveryExpr 0x12e00e250 <line:15:6> '<dependent type>' contains-errors lvalue
      `-CompoundStmt 0x12e0284a8 <col:21, line:19:2>
        `-CallExpr 0x12e028448 <line:16:3, line:18:22> 'int'
          |-ImplicitCastExpr 0x12e028430 <line:16:3> 'int (*)()' <FunctionToPointerDecay>
          | `-DeclRefExpr 0x12e00e350 <col:3> 'int ()' Function 0x12e00e298 'g_error' 'int ()'
          |-ImplicitCastExpr 0x12e028478 <col:11, line:18:4> 'char *' <ArrayToPointerDecay>
          | `-StringLiteral 0x12e00e3b0 <line:16:11, line:18:4> 'char[10]' lvalue "STRSTRSTR"
          `-ImplicitCastExpr 0x12e028490 <col:11> 'const char *' <LValueToRValue>
            `-DeclRefExpr 0x12e00e3e0 <col:11> 'const char *' lvalue ParmVar 0x12e00dcd8 'filter_name' 'const char *'
