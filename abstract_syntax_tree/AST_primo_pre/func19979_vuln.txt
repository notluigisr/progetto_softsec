`-FunctionDecl 0x144128238  line:1:15 referenced ipow 'double (double, int)' static
  |-ParmVarDecl 0x1441280d8 <col:21, col:28> col:28 used n 'double'
  |-ParmVarDecl 0x144128158 <col:31, col:35> col:35 used exp 'int'
  `-CompoundStmt 0x144140ba0 <line:2:1, line:15:1>
    |-DeclStmt 0x1441283b8 <line:3:2, col:10>
    | `-VarDecl 0x144128350 <col:2, col:9> col:9 used r 'double'
    |-IfStmt 0x1441285c0 <line:5:2, line:6:30>
    | |-BinaryOperator 0x144128428 <line:5:7, col:13> 'int' '<'
    | | |-ImplicitCastExpr 0x144128410 <col:7> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1441283d0 <col:7> 'int' lvalue ParmVar 0x144128158 'exp' 'int'
    | | `-IntegerLiteral 0x1441283f0 <col:13> 'int' 0
    | `-ReturnStmt 0x1441285b0 <line:6:3, col:30>
    |   `-BinaryOperator 0x144128590 <col:10, col:30> 'double' '/'
    |     |-FloatingLiteral 0x144128448 <col:10> 'double' 1.000000e+00
    |     `-CallExpr 0x144128548 <col:16, col:30> 'double'
    |       |-ImplicitCastExpr 0x144128530 <col:16> 'double (*)(double, int)' <FunctionToPointerDecay>
    |       | `-DeclRefExpr 0x144128468 <col:16> 'double (double, int)' Function 0x144128238 'ipow' 'double (double, int)'
    |       |-ImplicitCastExpr 0x144128578 <col:22> 'double' <LValueToRValue>
    |       | `-DeclRefExpr 0x144128488 <col:22> 'double' lvalue ParmVar 0x1441280d8 'n' 'double'
    |       `-UnaryOperator 0x1441284e0 <col:25, col:26> 'int' prefix '-'
    |         `-ImplicitCastExpr 0x1441284c8 <col:26> 'int' <LValueToRValue>
    |           `-DeclRefExpr 0x1441284a8 <col:26> 'int' lvalue ParmVar 0x144128158 'exp' 'int'
    |-BinaryOperator 0x144128638 <line:7:2, col:6> 'double' '='
    | |-DeclRefExpr 0x1441285e0 <col:2> 'double' lvalue Var 0x144128350 'r' 'double'
    | `-ImplicitCastExpr 0x144128620 <col:6> 'double' <IntegralToFloating>
    |   `-IntegerLiteral 0x144128600 <col:6> 'int' 1
    |-WhileStmt 0x144140b38 <line:8:2, line:13:2>
    | |-BinaryOperator 0x1441286b0 <line:8:10, col:16> 'int' '>'
    | | |-ImplicitCastExpr 0x144128698 <col:10> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x144128658 <col:10> 'int' lvalue ParmVar 0x144128158 'exp' 'int'
    | | `-IntegerLiteral 0x144128678 <col:16> 'int' 0
    | `-CompoundStmt 0x144140b10 <col:20, line:13:2>
    |   |-IfStmt 0x1441287d0 <line:9:3, line:10:9>
    |   | |-BinaryOperator 0x144128728 <line:9:8, col:14> 'int' '&'
    |   | | |-ImplicitCastExpr 0x144128710 <col:8> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x1441286d0 <col:8> 'int' lvalue ParmVar 0x144128158 'exp' 'int'
    |   | | `-IntegerLiteral 0x1441286f0 <col:14> 'int' 1
    |   | `-CompoundAssignOperator 0x1441287a0 <line:10:4, col:9> 'double' '*=' ComputeLHSTy='double' ComputeResultTy='double'
    |   |   |-DeclRefExpr 0x144128748 <col:4> 'double' lvalue Var 0x144128350 'r' 'double'
    |   |   `-ImplicitCastExpr 0x144128788 <col:9> 'double' <LValueToRValue>
    |   |     `-DeclRefExpr 0x144128768 <col:9> 'double' lvalue ParmVar 0x1441280d8 'n' 'double'
    |   |-CompoundAssignOperator 0x144140a58 <line:11:3, col:11> 'int' '>>=' ComputeLHSTy='int' ComputeResultTy='int'
    |   | |-DeclRefExpr 0x144140a00 <col:3> 'int' lvalue ParmVar 0x144128158 'exp' 'int'
    |   | `-IntegerLiteral 0x144140a20 <col:11> 'int' 1
    |   `-CompoundAssignOperator 0x144140ae0 <line:12:3, col:8> 'double' '*=' ComputeLHSTy='double' ComputeResultTy='double'
    |     |-DeclRefExpr 0x144140a88 <col:3> 'double' lvalue ParmVar 0x1441280d8 'n' 'double'
    |     `-ImplicitCastExpr 0x144140ac8 <col:8> 'double' <LValueToRValue>
    |       `-DeclRefExpr 0x144140aa8 <col:8> 'double' lvalue ParmVar 0x1441280d8 'n' 'double'
    `-ReturnStmt 0x144140b90 <line:14:2, col:9>
      `-ImplicitCastExpr 0x144140b78 <col:9> 'double' <LValueToRValue>
        `-DeclRefExpr 0x144140b58 <col:9> 'double' lvalue Var 0x144128350 'r' 'double'
