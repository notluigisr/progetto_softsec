`-FunctionDecl 0x15480e038  line:1:1 invalid set_one_pref 'int (int, int, const char *, int *, int *)'
  |-ParmVarDecl 0x15480dcd8 <col:15, col:19> col:19 used val 'int'
  |-ParmVarDecl 0x15480dd58 <col:24, col:28> col:28 used type 'int'
  |-ParmVarDecl 0x15480ddd8 <col:34, col:46> col:46 used item 'const char *'
  |-ParmVarDecl 0x15480dea8 <col:52, col:58> col:58 referenced invalid buf 'int *'
  |-ParmVarDecl 0x15480df28 <col:63, col:68> col:68 used nbuf 'int *'
  `-CompoundStmt 0x1548281e8 <line:2:1, line:28:1>
    |-DeclStmt 0x15480e188 <line:3:5, col:10>
    | `-VarDecl 0x15480e120 <col:5, col:9> col:9 used i 'int'
    |-ForStmt 0x154827870 <line:5:5, line:10:9>
    | |-BinaryOperator 0x15480e1e0 <line:5:10, col:12> 'int' '='
    | | |-DeclRefExpr 0x15480e1a0 <col:10> 'int' lvalue Var 0x15480e120 'i' 'int'
    | | `-IntegerLiteral 0x15480e1c0 <col:12> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x15480e2a0 <col:15, col:20> 'int' '<'
    | | |-ImplicitCastExpr 0x15480e270 <col:15> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x15480e200 <col:15> 'int' lvalue Var 0x15480e120 'i' 'int'
    | | `-ImplicitCastExpr 0x15480e288 <col:19, col:20> 'int' <LValueToRValue>
    | |   `-UnaryOperator 0x15480e258 <col:19, col:20> 'int' lvalue prefix '*' cannot overflow
    | |     `-ImplicitCastExpr 0x15480e240 <col:20> 'int *' <LValueToRValue>
    | |       `-DeclRefExpr 0x15480e220 <col:20> 'int *' lvalue ParmVar 0x15480df28 'nbuf' 'int *'
    | |-UnaryOperator 0x15480e2e0 <col:26, col:27> 'int' postfix '++'
    | | `-DeclRefExpr 0x15480e2c0 <col:26> 'int' lvalue Var 0x15480e120 'i' 'int'
    | `-IfStmt 0x154827850 <line:6:7, line:10:9>
    |   |-BinaryOperator 0x15480e3a8 <line:6:11, col:21> 'int' contains-errors '=='
    |   | |-ArraySubscriptExpr 0x15480e368 <col:11, col:16> '<dependent type>' contains-errors lvalue
    |   | | |-ImplicitCastExpr 0x15480e338 <col:11> '<dependent type>' contains-errors <LValueToRValue>
    |   | | | `-RecoveryExpr 0x15480e2f8 <col:11> '<dependent type>' contains-errors lvalue
    |   | | `-ImplicitCastExpr 0x15480e350 <col:15> 'int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x15480e318 <col:15> 'int' lvalue Var 0x15480e120 'i' 'int'
    |   | `-DeclRefExpr 0x15480e388 <col:21> 'int' lvalue ParmVar 0x15480dcd8 'val' 'int'
    |   `-CompoundStmt 0x154827830 <line:7:2, line:10:9>
    |     |-CallExpr 0x1548277a0 <line:8:4, col:28> 'int'
    |     | |-ImplicitCastExpr 0x154827788 <col:4> 'int (*)()' <FunctionToPointerDecay>
    |     | | `-DeclRefExpr 0x154827560 <col:4> 'int ()' Function 0x1548274a8 'log_info' 'int ()'
    |     | |-CallExpr 0x154827728 <col:14, col:21> 'int'
    |     | | |-ImplicitCastExpr 0x154827710 <col:14> 'int (*)()' <FunctionToPointerDecay>
    |     | | | `-DeclRefExpr 0x154827660 <col:14> 'int ()' Function 0x1548275a8 '_' 'int ()'
    |     | | `-ImplicitCastExpr 0x154827750 <col:16> 'char *' <ArrayToPointerDecay>
    |     | |   `-StringLiteral 0x1548276c0 <col:16> 'char[4]' lvalue "STR"
    |     | `-ImplicitCastExpr 0x1548277d0 <col:24> 'const char *' <LValueToRValue>
    |     |   `-DeclRefExpr 0x154827768 <col:24> 'const char *' lvalue ParmVar 0x15480ddd8 'item' 'const char *'
    |     `-ReturnStmt 0x154827820 <line:9:4, col:12>
    |       `-UnaryOperator 0x154827808 <col:11, col:12> 'int' prefix '-'
    |         `-IntegerLiteral 0x1548277e8 <col:12> 'int' 1
    |-IfStmt 0x154828050 <line:12:5, line:24:7>
    | |-BinaryOperator 0x1548279b0 <line:12:9, col:18> 'int' contains-errors '>='
    | | |-UnaryOperator 0x154827978 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
    | | | `-ImplicitCastExpr 0x154827960 <col:10> 'int *' <LValueToRValue>
    | | |   `-DeclRefExpr 0x1548278a8 <col:10> 'int *' lvalue ParmVar 0x15480df28 'nbuf' 'int *'
    | | `-RecoveryExpr 0x154827990 <col:18> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x154828030 <line:13:7, line:24:7>
    |   |-IfStmt 0x154827fb8 <line:14:2, line:21:8> has_else
    |   | |-BinaryOperator 0x154827a28 <line:14:5, col:11> 'int' '=='
    |   | | |-ImplicitCastExpr 0x154827a10 <col:5> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x1548279d0 <col:5> 'int' lvalue ParmVar 0x15480dd58 'type' 'int'
    |   | | `-IntegerLiteral 0x1548279f0 <col:11> 'int' 1
    |   | |-CallExpr 0x154827b18 <line:15:4, col:21> 'int'
    |   | | |-ImplicitCastExpr 0x154827b00 <col:4> 'int (*)()' <FunctionToPointerDecay>
    |   | | | `-DeclRefExpr 0x154827a48 <col:4> 'int ()' Function 0x1548274a8 'log_info' 'int ()'
    |   | | `-CallExpr 0x154827ac0 <col:13, col:20> 'int'
    |   | |   |-ImplicitCastExpr 0x154827aa8 <col:13> 'int (*)()' <FunctionToPointerDecay>
    |   | |   | `-DeclRefExpr 0x154827a68 <col:13> 'int ()' Function 0x1548275a8 '_' 'int ()'
    |   | |   `-ImplicitCastExpr 0x154827ae8 <col:15> 'char *' <ArrayToPointerDecay>
    |   | |     `-StringLiteral 0x154827a88 <col:15> 'char[4]' lvalue "STR"
    |   | `-IfStmt 0x154827f88 <line:16:7, line:21:8> has_else
    |   |   |-BinaryOperator 0x154827b98 <line:16:10, col:16> 'int' '=='
    |   |   | |-ImplicitCastExpr 0x154827b80 <col:10> 'int' <LValueToRValue>
    |   |   | | `-DeclRefExpr 0x154827b40 <col:10> 'int' lvalue ParmVar 0x15480dd58 'type' 'int'
    |   |   | `-IntegerLiteral 0x154827b60 <col:16> 'int' 2
    |   |   |-CallExpr 0x154827c88 <line:17:4, col:21> 'int'
    |   |   | |-ImplicitCastExpr 0x154827c70 <col:4> 'int (*)()' <FunctionToPointerDecay>
    |   |   | | `-DeclRefExpr 0x154827bb8 <col:4> 'int ()' Function 0x1548274a8 'log_info' 'int ()'
    |   |   | `-CallExpr 0x154827c30 <col:13, col:20> 'int'
    |   |   |   |-ImplicitCastExpr 0x154827c18 <col:13> 'int (*)()' <FunctionToPointerDecay>
    |   |   |   | `-DeclRefExpr 0x154827bd8 <col:13> 'int ()' Function 0x1548275a8 '_' 'int ()'
    |   |   |   `-ImplicitCastExpr 0x154827c58 <col:15> 'char *' <ArrayToPointerDecay>
    |   |   |     `-StringLiteral 0x154827bf8 <col:15> 'char[4]' lvalue "STR"
    |   |   `-IfStmt 0x154827f58 <line:18:7, line:21:8> has_else
    |   |     |-BinaryOperator 0x154827d08 <line:18:10, col:16> 'int' '=='
    |   |     | |-ImplicitCastExpr 0x154827cf0 <col:10> 'int' <LValueToRValue>
    |   |     | | `-DeclRefExpr 0x154827cb0 <col:10> 'int' lvalue ParmVar 0x15480dd58 'type' 'int'
    |   |     | `-IntegerLiteral 0x154827cd0 <col:16> 'int' 3
    |   |     |-CallExpr 0x154827df8 <line:19:4, col:21> 'int'
    |   |     | |-ImplicitCastExpr 0x154827de0 <col:4> 'int (*)()' <FunctionToPointerDecay>
    |   |     | | `-DeclRefExpr 0x154827d28 <col:4> 'int ()' Function 0x1548274a8 'log_info' 'int ()'
    |   |     | `-CallExpr 0x154827da0 <col:13, col:20> 'int'
    |   |     |   |-ImplicitCastExpr 0x154827d88 <col:13> 'int (*)()' <FunctionToPointerDecay>
    |   |     |   | `-DeclRefExpr 0x154827d48 <col:13> 'int ()' Function 0x1548275a8 '_' 'int ()'
    |   |     |   `-ImplicitCastExpr 0x154827dc8 <col:15> 'char *' <ArrayToPointerDecay>
    |   |     |     `-StringLiteral 0x154827d68 <col:15> 'char[4]' lvalue "STR"
    |   |     `-CallExpr 0x154827f38 <line:21:4, col:8> 'int'
    |   |       `-ImplicitCastExpr 0x154827f20 <col:4> 'int (*)()' <FunctionToPointerDecay>
    |   |         `-DeclRefExpr 0x154827f00 <col:4> 'int ()' Function 0x154827e48 'BUG' 'int ()'
    |   `-ReturnStmt 0x154828020 <line:23:9, col:17>
    |     `-UnaryOperator 0x154828008 <col:16, col:17> 'int' prefix '-'
    |       `-IntegerLiteral 0x154827fe8 <col:17> 'int' 1
    |-BinaryOperator 0x154828198 <line:26:5, col:22> '<dependent type>' contains-errors '='
    | |-ArraySubscriptExpr 0x154828158 <col:5, col:18> '<dependent type>' contains-errors lvalue
    | | |-ImplicitCastExpr 0x154828140 <col:5> '<dependent type>' contains-errors <LValueToRValue>
    | | | `-RecoveryExpr 0x154828090 <col:5> '<dependent type>' contains-errors lvalue
    | | |   `-DeclRefExpr 0x154828070 <col:5> 'int *' lvalue ParmVar 0x15480dea8 'buf' 'int *'
    | | `-UnaryOperator 0x154828128 <col:9, col:16> 'int' postfix '++'
    | |   `-ParenExpr 0x154828108 <col:9, col:15> 'int' lvalue
    | |     `-UnaryOperator 0x1548280f0 <col:10, col:11> 'int' lvalue prefix '*' cannot overflow
    | |       `-ImplicitCastExpr 0x1548280d8 <col:11> 'int *' <LValueToRValue>
    | |         `-DeclRefExpr 0x1548280b8 <col:11> 'int *' lvalue ParmVar 0x15480df28 'nbuf' 'int *'
    | `-DeclRefExpr 0x154828178 <col:22> 'int' lvalue ParmVar 0x15480dcd8 'val' 'int'
    `-ReturnStmt 0x1548281d8 <line:27:5, col:12>
      `-IntegerLiteral 0x1548281b8 <col:12> 'int' 0
