`-FunctionDecl 0x157928dc8  line:1:9 invalid d2i_ECPrivateKey 'int *(int **, const unsigned char **, long)'
  |-ParmVarDecl 0x157928b60 <col:26, col:35> col:35 invalid a 'int **'
  |-ParmVarDecl 0x157928c50 <col:38, col:60> col:60 used in 'const unsigned char **'
  |-ParmVarDecl 0x157928cd0 <col:64, col:69> col:69 used len 'long'
  `-CompoundStmt 0x1579443f0 <line:2:1, line:88:1>
    |-DeclStmt 0x157928f28 <line:3:5, col:15>
    | `-VarDecl 0x157928ea0 <col:5, col:14> col:9 used ok 'int' cinit
    |   `-IntegerLiteral 0x157928f08 <col:14> 'int' 0
    |-IfStmt 0x157942438 <line:7:5, line:10:5>
    | |-RecoveryExpr 0x1579291d0 <line:7:9, col:45> '_Bool' contains-errors
    | `-CompoundStmt 0x157942418 <col:51, line:10:5>
    |   |-CallExpr 0x1579423a0 <line:8:9, col:58> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x1579422e0 <col:9> 'int ()' Function 0x157942228 'ECerr' 'int ()'
    |   | |-RecoveryExpr 0x157942360 <col:15> '<dependent type>' contains-errors lvalue
    |   | `-RecoveryExpr 0x157942380 <col:38> '<dependent type>' contains-errors lvalue
    |   `-ReturnStmt 0x157942408 <line:9:9, col:16>
    |     `-RecoveryExpr 0x1579423e8 <col:16> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x1579427a0 <line:12:5, line:16:5>
    | |-RecoveryExpr 0x157942650 <line:12:9, col:63> '_Bool' contains-errors
    | `-CompoundStmt 0x157942790 <col:69, line:16:5>
    |-IfStmt 0x157942b48 <line:18:5, line:26:9> has_else
    | |-RecoveryExpr 0x157942830 <line:18:9, col:28> '_Bool' contains-errors
    | |-CompoundStmt 0x157942ad8 <col:34, line:25:5>
    | | `-IfStmt 0x157942a48 <line:19:9, line:22:9>
    | |   |-RecoveryExpr 0x157942988 <line:19:13, col:37> '_Bool' contains-errors
    | |   `-CompoundStmt 0x157942a30 <col:43, line:22:9>
    | |     `-GotoStmt 0x157942a18 <line:21:13, col:18> 'err' 0x1579429c8
    | `-NullStmt 0x157942b40 <line:26:9>
    |-IfStmt 0x157942dc8 <line:28:5, line:32:5>
    | |-RecoveryExpr 0x157942b78 <line:28:9, col:19> '_Bool' contains-errors
    | `-CompoundStmt 0x157942db8 <col:31, line:32:5>
    |-IfStmt 0x157942e58 <line:34:5, line:37:5>
    | |-RecoveryExpr 0x157942de8 <line:34:9, col:23> '_Bool' contains-errors
    | `-CompoundStmt 0x157942e40 <col:29, line:37:5>
    |   `-GotoStmt 0x157942e28 <line:36:9, col:14> 'err' 0x1579429c8
    |-IfStmt 0x157943aa0 <line:41:5, line:52:5> has_else
    | |-RecoveryExpr 0x157942e78 <line:41:9, col:19> '_Bool' contains-errors
    | |-CompoundStmt 0x157943a38 <col:31, line:49:5>
    | | `-IfStmt 0x157943a18 <line:45:9, line:48:9>
    | |   |-RecoveryExpr 0x157943198 <line:45:13, col:30> '_Bool' contains-errors
    | |   `-CompoundStmt 0x157943a00 <col:36, line:48:9>
    | |     `-GotoStmt 0x1579431d8 <line:47:13, col:18> 'err' 0x1579429c8
    | `-CompoundStmt 0x157943a88 <line:49:12, line:52:5>
    |   `-GotoStmt 0x157943a70 <line:51:9, col:14> 'err' 0x1579429c8
    |-IfStmt 0x157944170 <line:54:5, line:74:5>
    | |-RecoveryExpr 0x157943ad0 <line:54:9, col:19> '_Bool' contains-errors
    | `-CompoundStmt 0x157944148 <col:30, line:74:5>
    |   |-DeclStmt 0x157943b70 <line:55:9, col:37>
    |   | `-VarDecl 0x157943b08 <col:9, col:30> col:30 used pub_oct 'const unsigned char *'
    |   |-IfStmt 0x157943e18 <line:61:9, line:64:9>
    |   | |-RecoveryExpr 0x157943da8 <line:61:13, col:29> '_Bool' contains-errors
    |   | `-CompoundStmt 0x157943e00 <col:35, line:64:9>
    |   |   `-GotoStmt 0x157943de8 <line:63:13, col:18> 'err' 0x1579429c8
    |   `-IfStmt 0x157944128 <line:69:9, line:73:9>
    |     |-RecoveryExpr 0x1579440b8 <line:69:13, line:70:59> '_Bool' contains-errors
    |     `-CompoundStmt 0x157944110 <col:62, line:73:9>
    |       `-GotoStmt 0x1579440f8 <line:72:13, col:18> 'err' 0x1579429c8
    |-BinaryOperator 0x1579441d0 <line:76:5, col:10> 'int' '='
    | |-DeclRefExpr 0x157944190 <col:5> 'int' lvalue Var 0x157928ea0 'ok' 'int'
    | `-IntegerLiteral 0x1579441b0 <col:10> 'int' 1
    `-LabelStmt 0x157944390 <line:77:2, line:82:5> 'err'
      `-IfStmt 0x157944370 <line:78:5, line:82:5>
        |-UnaryOperator 0x157944228 <line:78:9, col:10> 'int' prefix '!' cannot overflow
        | `-ImplicitCastExpr 0x157944210 <col:10> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x1579441f0 <col:10> 'int' lvalue Var 0x157928ea0 'ok' 'int'
        `-CompoundStmt 0x157944360 <col:14, line:82:5>
