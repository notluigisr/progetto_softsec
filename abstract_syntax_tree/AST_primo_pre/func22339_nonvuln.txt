`-FunctionDecl 0x157128288  line:1:12 invalid jpeg_nextmarker 'int (int *, int *)' static
  |-ParmVarDecl 0x157128128 <col:28, col:35> col:35 invalid ifile 'int *'
  |-ParmVarDecl 0x1571281a8 <col:42, col:49> col:49 invalid ofile 'int *'
  `-CompoundStmt 0x157141ce0 <line:2:1, line:25:1>
    |-DeclStmt 0x1571283c0 <line:3:3, col:8>
    | `-VarDecl 0x157128358 <col:3, col:7> col:7 used c 'int'
    |-DoStmt 0x157141a18 <line:6:3, line:14:21>
    | |-CompoundStmt 0x157141980 <line:7:3, line:14:3>
    | | |-BinaryOperator 0x1571285b8 <line:8:5, col:27> 'int' contains-errors '='
    | | | |-DeclRefExpr 0x1571283d8 <col:5> 'int' lvalue Var 0x157128358 'c' 'int'
    | | | `-CallExpr 0x157128590 <col:9, col:27> '<dependent type>' contains-errors
    | | |   |-DeclRefExpr 0x157128550 <col:9> 'int ()' Function 0x157128498 'ReadBlobByte' 'int ()'
    | | |   `-RecoveryExpr 0x157128570 <col:22> '<dependent type>' contains-errors lvalue
    | | `-IfStmt 0x157141950 <line:9:5, line:13:53> has_else
    | |   |-BinaryOperator 0x157128650 <line:9:9, col:14> 'int' contains-errors '=='
    | |   | |-DeclRefExpr 0x1571285d8 <col:9> 'int' lvalue Var 0x157128358 'c' 'int'
    | |   | `-RecoveryExpr 0x157128630 <col:14> '<dependent type>' contains-errors lvalue
    | |   |-ReturnStmt 0x1571286a8 <line:10:7, col:14>
    | |   | `-RecoveryExpr 0x157128688 <col:14> '<dependent type>' contains-errors lvalue
    | |   `-IfStmt 0x157141930 <line:12:7, line:13:53>
    | |     |-BinaryOperator 0x157128710 <line:12:11, col:16> 'int' '!='
    | |     | |-ImplicitCastExpr 0x1571286f8 <col:11> 'int' <LValueToRValue>
    | |     | | `-DeclRefExpr 0x1571286b8 <col:11> 'int' lvalue Var 0x157128358 'c' 'int'
    | |     | `-IntegerLiteral 0x1571286d8 <col:16> 'int' 255
    | |     `-CStyleCastExpr 0x157141908 <line:13:9, col:53> 'void' contains-errors <ToVoid>
    | |       `-CallExpr 0x1571418c8 <col:16, col:53> '<dependent type>' contains-errors
    | |         |-DeclRefExpr 0x157141810 <col:16> 'int ()' Function 0x157128758 'WriteBlobByte' 'int ()'
    | |         |-RecoveryExpr 0x157141830 <col:30> '<dependent type>' contains-errors lvalue
    | |         `-CStyleCastExpr 0x1571418a0 <col:36, col:52> 'unsigned char' <IntegralCast>
    | |           `-ImplicitCastExpr 0x157141888 <col:52> 'int' <LValueToRValue> part_of_explicit_cast
    | |             `-DeclRefExpr 0x157141850 <col:52> 'int' lvalue Var 0x157128358 'c' 'int'
    | `-BinaryOperator 0x1571419f8 <line:14:12, col:17> 'int' '!='
    |   |-ImplicitCastExpr 0x1571419e0 <col:12> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x1571419a0 <col:12> 'int' lvalue Var 0x157128358 'c' 'int'
    |   `-IntegerLiteral 0x1571419c0 <col:17> 'int' 255
    |-DoStmt 0x157141c78 <line:17:3, line:22:21>
    | |-CompoundStmt 0x157141be0 <line:18:3, line:22:3>
    | | |-BinaryOperator 0x157141ac0 <line:19:5, col:27> 'int' contains-errors '='
    | | | |-DeclRefExpr 0x157141a38 <col:5> 'int' lvalue Var 0x157128358 'c' 'int'
    | | | `-CallExpr 0x157141a98 <col:9, col:27> '<dependent type>' contains-errors
    | | |   |-DeclRefExpr 0x157141a58 <col:9> 'int ()' Function 0x157128498 'ReadBlobByte' 'int ()'
    | | |   `-RecoveryExpr 0x157141a78 <col:22> '<dependent type>' contains-errors lvalue
    | | `-IfStmt 0x157141bc0 <line:20:5, line:21:14>
    | |   |-BinaryOperator 0x157141b58 <line:20:9, col:14> 'int' contains-errors '=='
    | |   | |-DeclRefExpr 0x157141ae0 <col:9> 'int' lvalue Var 0x157128358 'c' 'int'
    | |   | `-RecoveryExpr 0x157141b38 <col:14> '<dependent type>' contains-errors lvalue
    | |   `-ReturnStmt 0x157141bb0 <line:21:7, col:14>
    | |     `-RecoveryExpr 0x157141b90 <col:14> '<dependent type>' contains-errors lvalue
    | `-BinaryOperator 0x157141c58 <line:22:12, col:17> 'int' '=='
    |   |-ImplicitCastExpr 0x157141c40 <col:12> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x157141c00 <col:12> 'int' lvalue Var 0x157128358 'c' 'int'
    |   `-IntegerLiteral 0x157141c20 <col:17> 'int' 255
    `-ReturnStmt 0x157141cd0 <line:24:3, col:10>
      `-ImplicitCastExpr 0x157141cb8 <col:10> 'int' <LValueToRValue>
        `-DeclRefExpr 0x157141c98 <col:10> 'int' lvalue Var 0x157128358 'c' 'int'
