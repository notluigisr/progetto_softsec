`-FunctionDecl 0x1318101a0  line:1:6 spl_SplOjectStorage_free_storage 'void (void *)'
  |-ParmVarDecl 0x1318100d8 <col:39, col:45> col:45 used object 'void *'
  `-CompoundStmt 0x131828e78 <line:2:1, line:15:1>
    |-CallExpr 0x1318106a8 <line:7:2, col:36> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x131810568 <col:2> 'int ()' Function 0x1318104b0 'zend_hash_destroy' 'int ()'
    | `-UnaryOperator 0x131810690 <col:20, col:29> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   `-CXXDependentScopeMemberExpr 0x131810648 <col:21, col:29> '<dependent type>' contains-errors lvalue ->storage
    |     `-RecoveryExpr 0x131810628 <col:21> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x131828d90 <line:9:2, line:12:2>
    | |-BinaryOperator 0x131828a00 <line:9:6, col:28> 'int' contains-errors '!='
    | | |-CXXDependentScopeMemberExpr 0x131810788 <col:6, col:14> '<dependent type>' contains-errors lvalue ->debug_info
    | | | `-RecoveryExpr 0x131810768 <col:6> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x1318107d0 <col:28> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x131828d70 <col:34, line:12:2>
    |   |-CallExpr 0x131828b30 <line:10:3, col:39> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x131828a20 <col:3> 'int ()' Function 0x1318104b0 'zend_hash_destroy' 'int ()'
    |   | `-CXXDependentScopeMemberExpr 0x131828ae8 <col:21, col:29> '<dependent type>' contains-errors lvalue ->debug_info
    |   |   `-RecoveryExpr 0x131828ac8 <col:21> '<dependent type>' contains-errors lvalue
    |   `-CallExpr 0x131828d48 <line:11:3, col:27> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x131828c38 <col:3> 'int ()' Function 0x131828b80 'efree' 'int ()'
    |     `-CXXDependentScopeMemberExpr 0x131828d00 <col:9, col:17> '<dependent type>' contains-errors lvalue ->debug_info
    |       `-RecoveryExpr 0x131828ce0 <col:9> '<dependent type>' contains-errors lvalue
    `-CallExpr 0x131828e38 <line:14:2, col:14> 'int'
      |-ImplicitCastExpr 0x131828e20 <col:2> 'int (*)()' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x131828db0 <col:2> 'int ()' Function 0x131828b80 'efree' 'int ()'
      `-ImplicitCastExpr 0x131828e60 <col:8> 'void *' <LValueToRValue>
        `-DeclRefExpr 0x131828dd0 <col:8> 'void *' lvalue ParmVar 0x1318100d8 'object' 'void *'
