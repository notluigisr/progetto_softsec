`-FunctionDecl 0x12800dd90  line:1:6 M_SaveDefaults 'void (void)'
  `-CompoundStmt 0x1288091b0 <line:2:1, line:28:1>
    |-DeclStmt 0x12800df00 <line:3:5, col:11>
    | `-VarDecl 0x12800de98 <col:5, col:10> col:10 used i 'int'
    |-DeclStmt 0x12800df98 <line:4:5, col:11>
    | `-VarDecl 0x12800df30 <col:5, col:10> col:10 used v 'int'
    |-IfStmt 0x12800e268 <line:8:5, line:9:2>
    | |-UnaryOperator 0x12800e240 <line:8:9, col:10> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x12800e228 <col:10> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x12800e208 <col:10> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x12800e258 <line:9:2>
    `-ForStmt 0x128809078 <line:11:5, line:25:5>
      |-BinaryOperator 0x12800e2c8 <line:11:10, col:12> 'int' '='
      | |-DeclRefExpr 0x12800e288 <col:10> 'int' lvalue Var 0x12800de98 'i' 'int'
      | `-IntegerLiteral 0x12800e2a8 <col:12> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x12800e360 <col:16, col:18> 'int' contains-errors '<'
      | |-DeclRefExpr 0x12800e2e8 <col:16> 'int' lvalue Var 0x12800de98 'i' 'int'
      | `-RecoveryExpr 0x12800e340 <col:18> '<dependent type>' contains-errors lvalue
      |-UnaryOperator 0x12800e3a0 <col:32, col:33> 'int' postfix '++'
      | `-DeclRefExpr 0x12800e380 <col:32> 'int' lvalue Var 0x12800de98 'i' 'int'
      `-CompoundStmt 0x128809060 <line:12:5, line:25:5>
        `-IfStmt 0x128809030 <line:16:2, line:24:2> has_else
          |-RecoveryExpr 0x128808d40 <line:16:6, line:17:36> '_Bool' contains-errors
          |-CompoundStmt 0x128808f48 <line:18:2, line:21:2>
          `-CompoundStmt 0x128809020 <col:9, line:24:2>
