`-FunctionDecl 0x14900dfa8  line:1:8 invalid jswrap_graphics_createArrayBuffer 'int *(int, int, int, int *)'
  |-ParmVarDecl 0x14900dcf0 <col:42, col:46> col:46 used width 'int'
  |-ParmVarDecl 0x14900dd70 <col:53, col:57> col:57 used height 'int'
  |-ParmVarDecl 0x14900ddf0 <col:65, col:69> col:69 used bpp 'int'
  |-ParmVarDecl 0x14900dea8 <col:74, col:81> col:81 invalid options 'int *'
  `-CompoundStmt 0x14902aea8 <col:90, line:56:1>
    |-IfStmt 0x149027b98 <line:2:3, line:5:3>
    | |-BinaryOperator 0x14900e290 <line:2:7, col:54> 'int' '||'
    | | |-BinaryOperator 0x14900e1f8 <col:7, col:38> 'int' '||'
    | | | |-BinaryOperator 0x14900e160 <col:7, col:27> 'int' '||'
    | | | | |-BinaryOperator 0x14900e0c8 <col:7, col:14> 'int' '<='
    | | | | | |-ImplicitCastExpr 0x14900e0b0 <col:7> 'int' <LValueToRValue>
    | | | | | | `-DeclRefExpr 0x14900e070 <col:7> 'int' lvalue ParmVar 0x14900dcf0 'width' 'int'
    | | | | | `-IntegerLiteral 0x14900e090 <col:14> 'int' 0
    | | | | `-BinaryOperator 0x14900e140 <col:19, col:27> 'int' '<='
    | | | |   |-ImplicitCastExpr 0x14900e128 <col:19> 'int' <LValueToRValue>
    | | | |   | `-DeclRefExpr 0x14900e0e8 <col:19> 'int' lvalue ParmVar 0x14900dd70 'height' 'int'
    | | | |   `-IntegerLiteral 0x14900e108 <col:27> 'int' 0
    | | | `-BinaryOperator 0x14900e1d8 <col:32, col:38> 'int' '>'
    | | |   |-ImplicitCastExpr 0x14900e1c0 <col:32> 'int' <LValueToRValue>
    | | |   | `-DeclRefExpr 0x14900e180 <col:32> 'int' lvalue ParmVar 0x14900dcf0 'width' 'int'
    | | |   `-IntegerLiteral 0x14900e1a0 <col:38> 'int' 32767
    | | `-BinaryOperator 0x14900e270 <col:47, col:54> 'int' '>'
    | |   |-ImplicitCastExpr 0x14900e258 <col:47> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x14900e218 <col:47> 'int' lvalue ParmVar 0x14900dd70 'height' 'int'
    | |   `-IntegerLiteral 0x14900e238 <col:54> 'int' 32767
    | `-CompoundStmt 0x149027b78 <col:61, line:5:3>
    |   |-CallExpr 0x149027b00 <line:3:5, col:38> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x149027a10 <col:5> 'int ()' Function 0x14900e358 'jsExceptionHere' 'int ()'
    |   | |-RecoveryExpr 0x149027ae0 <col:21> '<dependent type>' contains-errors lvalue
    |   | `-StringLiteral 0x149027a90 <col:33> 'char[4]' lvalue "STR"
    |   `-ReturnStmt 0x149027b68 <line:4:5, col:12>
    |     `-ImplicitCastExpr 0x149027b50 <col:12> 'int *' <NullToPointer>
    |       `-IntegerLiteral 0x149027b30 <col:12> 'int' 0
    |-IfStmt 0x149027ec0 <line:6:3, line:9:3>
    | |-UnaryOperator 0x149027d68 <line:6:7, col:22> 'int' prefix '!' cannot overflow
    | | `-CallExpr 0x149027d28 <col:8, col:22> 'int'
    | |   |-ImplicitCastExpr 0x149027d10 <col:8> 'int (*)()' <FunctionToPointerDecay>
    | |   | `-DeclRefExpr 0x149027c98 <col:8> 'int ()' Function 0x149027be0 'isValidBPP' 'int ()'
    | |   `-ImplicitCastExpr 0x149027d50 <col:19> 'int' <LValueToRValue>
    | |     `-DeclRefExpr 0x149027cb8 <col:19> 'int' lvalue ParmVar 0x14900ddf0 'bpp' 'int'
    | `-CompoundStmt 0x149027ea0 <col:25, line:9:3>
    |   |-CallExpr 0x149027e28 <line:7:5, col:38> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x149027d80 <col:5> 'int ()' Function 0x14900e358 'jsExceptionHere' 'int ()'
    |   | |-RecoveryExpr 0x149027e08 <col:21> '<dependent type>' contains-errors lvalue
    |   | `-StringLiteral 0x149027db8 <col:33> 'char[4]' lvalue "STR"
    |   `-ReturnStmt 0x149027e90 <line:8:5, col:12>
    |     `-ImplicitCastExpr 0x149027e78 <col:12> 'int *' <NullToPointer>
    |       `-IntegerLiteral 0x149027e58 <col:12> 'int' 0
    |-IfStmt 0x149028178 <line:12:3, col:23>
    | |-UnaryOperator 0x149028118 <col:7, col:8> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x149028100 <col:8> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x1490280e0 <col:8> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x149028168 <col:16, col:23>
    |   `-ImplicitCastExpr 0x149028150 <col:23> 'int *' <NullToPointer>
    |     `-IntegerLiteral 0x149028130 <col:23> 'int' 0
    |-CallExpr 0x149028328 <line:15:3, col:26> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x149028278 <col:3> 'int ()' Function 0x1490281c0 'graphicsStructInit' 'int ()'
    | `-UnaryOperator 0x149028310 <col:22, col:23> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   `-RecoveryExpr 0x1490282f0 <col:23> '<dependent type>' contains-errors lvalue
    `-IfStmt 0x14902ac88 <line:23:3, line:51:3>
      |-CallExpr 0x149028620 <line:23:7, col:26> '<dependent type>' contains-errors
      | |-DeclRefExpr 0x1490285e0 <col:7> 'int ()' Function 0x149028528 'jsvIsObject' 'int ()'
      | `-RecoveryExpr 0x149028600 <col:19> '<dependent type>' contains-errors lvalue
      `-CompoundStmt 0x14902ac68 <col:29, line:51:3>
        |-IfStmt 0x14902a530 <line:28:5, line:33:5>
        | |-CallExpr 0x14902a300 <line:28:9, col:65> '<dependent type>' contains-errors
        | | |-DeclRefExpr 0x14902a228 <col:9> 'int ()' Function 0x149028670 'jsvGetBoolAndUnLock' 'int ()'
        | | `-CallExpr 0x14902a2c8 <col:29, col:64> '<dependent type>' contains-errors
        | |   |-DeclRefExpr 0x14902a248 <col:29> 'int ()' Function 0x149028770 'jsvObjectGetChild' 'int ()'
        | |   |-RecoveryExpr 0x14902a268 <col:47> '<dependent type>' contains-errors lvalue
        | |   |-StringLiteral 0x14902a288 <col:56> 'char[4]' lvalue "STR"
        | |   `-IntegerLiteral 0x14902a2a8 <col:63> 'int' 0
        | `-CompoundStmt 0x14902a518 <col:68, line:33:5>
        |   `-IfStmt 0x14902a4e8 <line:29:7, line:32:21> has_else
        |     |-RecoveryExpr 0x14902a348 <line:29:11, col:25> '_Bool' contains-errors
        |     |-NullStmt 0x14902a4e0 <line:30:9>
        |     `-CallExpr 0x14902a4a0 <line:32:9, col:21> 'int'
        |       |-ImplicitCastExpr 0x14902a488 <col:9> 'int (*)()' <FunctionToPointerDecay>
        |       | `-DeclRefExpr 0x14902a448 <col:9> 'int ()' Function 0x14902a390 'jsWarn' 'int ()'
        |       `-ImplicitCastExpr 0x14902a4c8 <col:16> 'char *' <ArrayToPointerDecay>
        |         `-StringLiteral 0x14902a468 <col:16> 'char[4]' lvalue "STR"
        `-IfStmt 0x14902ac48 <line:35:5, line:50:5>
          |-RecoveryExpr 0x14902a608 <line:35:9> '_Bool' contains-errors
          `-CompoundStmt 0x14902ac30 <col:17, line:50:5>
            `-IfStmt 0x14902ab00 <line:36:7, line:48:21> has_else
              |-RecoveryExpr 0x14902a748 <line:36:11, col:41> '_Bool' contains-errors
              |-NullStmt 0x14902a768 <col:44>
              `-IfStmt 0x14902aad0 <line:37:12, line:48:21> has_else
                |-RecoveryExpr 0x14902a7b0 <line:37:16, col:47> '_Bool' contains-errors
                |-NullStmt 0x14902aac8 <line:38:9>
                `-IfStmt 0x14902aa98 <line:39:12, line:48:21> has_else
                  |-RecoveryExpr 0x14902a810 <line:39:16, col:47> '_Bool' contains-errors
                  |-NullStmt 0x14902aa90 <line:40:9>
                  `-IfStmt 0x14902aa60 <line:41:12, line:48:21> has_else
                    |-RecoveryExpr 0x14902a870 <line:41:16, col:47> '_Bool' contains-errors
                    |-NullStmt 0x14902aa58 <line:42:9>
                    `-IfStmt 0x14902aa28 <line:43:12, line:48:21> has_else
                      |-RecoveryExpr 0x14902a8d0 <line:43:16, col:47> '_Bool' contains-errors
                      |-NullStmt 0x14902aa20 <line:44:9>
                      `-IfStmt 0x14902a9f0 <line:45:12, line:48:21> has_else
                        |-RecoveryExpr 0x14902a930 <line:45:16, col:47> '_Bool' contains-errors
                        |-NullStmt 0x14902a9e8 <line:46:9>
                        `-CallExpr 0x14902a9a8 <line:48:9, col:21> 'int'
                          |-ImplicitCastExpr 0x14902a990 <col:9> 'int (*)()' <FunctionToPointerDecay>
                          | `-DeclRefExpr 0x14902a950 <col:9> 'int ()' Function 0x14902a390 'jsWarn' 'int ()'
                          `-ImplicitCastExpr 0x14902a9d0 <col:16> 'char *' <ArrayToPointerDecay>
                            `-StringLiteral 0x14902a970 <col:16> 'char[4]' lvalue "STR"
