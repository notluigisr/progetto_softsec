`-FunctionDecl 0x14800dde8  line:1:15 filter_hamming 'double (const double)' static
  |-ParmVarDecl 0x14800dcd8 <col:30, col:43> col:43 used x 'const double'
  `-CompoundStmt 0x1480268a0 <line:2:1, line:11:1>
    |-IfStmt 0x14800dfd0 <line:4:2, line:5:10>
    | |-BinaryOperator 0x14800df68 <line:4:6, col:11> 'int' '<'
    | | |-ImplicitCastExpr 0x14800df38 <col:6> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x14800dee0 <col:6> 'const double' lvalue ParmVar 0x14800dcd8 'x' 'const double'
    | | `-ImplicitCastExpr 0x14800df50 <col:10, col:11> 'double' <FloatingCast>
    | |   `-UnaryOperator 0x14800df20 <col:10, col:11> 'float' prefix '-'
    | |     `-FloatingLiteral 0x14800df00 <col:11> 'float' 1.000000e+00
    | `-ReturnStmt 0x14800dfc0 <line:5:3, col:10>
    |   `-ImplicitCastExpr 0x14800dfa8 <col:10> 'double' <FloatingCast>
    |     `-FloatingLiteral 0x14800df88 <col:10> 'float' 0.000000e+00
    |-IfStmt 0x14800e310 <line:6:2, line:7:35>
    | |-BinaryOperator 0x14800e060 <line:6:6, col:10> 'int' '<'
    | | |-ImplicitCastExpr 0x14800e030 <col:6> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x14800dff0 <col:6> 'const double' lvalue ParmVar 0x14800dcd8 'x' 'const double'
    | | `-ImplicitCastExpr 0x14800e048 <col:10> 'double' <FloatingCast>
    | |   `-FloatingLiteral 0x14800e010 <col:10> 'float' 0.000000e+00
    | `-ReturnStmt 0x14800e300 <line:7:3, col:35>
    |   `-BinaryOperator 0x14800e2e0 <col:10, col:35> 'double' '+'
    |     |-BinaryOperator 0x14800e288 <col:10, col:33> 'double' '*'
    |     | |-BinaryOperator 0x14800e230 <col:10, col:31> 'double' '*'
    |     | | |-BinaryOperator 0x14800e1d8 <col:10, col:29> 'double' '*'
    |     | | | |-ImplicitCastExpr 0x14800e1c0 <col:10> 'double' <FloatingCast>
    |     | | | | `-FloatingLiteral 0x14800e080 <col:10> 'float' 9.200000e-01
    |     | | | `-ParenExpr 0x14800e1a0 <col:16, col:29> 'double'
    |     | | |   `-BinaryOperator 0x14800e180 <col:17, col:25> 'double' '-'
    |     | | |     |-BinaryOperator 0x14800e128 <col:17, col:23> 'double' '*'
    |     | | |     | |-ImplicitCastExpr 0x14800e110 <col:17, col:18> 'double' <FloatingCast>
    |     | | |     | | `-UnaryOperator 0x14800e0c0 <col:17, col:18> 'float' prefix '-'
    |     | | |     | |   `-FloatingLiteral 0x14800e0a0 <col:18> 'float' 2.000000e+00
    |     | | |     | `-ImplicitCastExpr 0x14800e0f8 <col:23> 'double' <LValueToRValue>
    |     | | |     |   `-DeclRefExpr 0x14800e0d8 <col:23> 'const double' lvalue ParmVar 0x14800dcd8 'x' 'const double'
    |     | | |     `-ImplicitCastExpr 0x14800e168 <col:25> 'double' <FloatingCast>
    |     | | |       `-FloatingLiteral 0x14800e148 <col:25> 'float' 3.000000e+00
    |     | | `-ImplicitCastExpr 0x14800e218 <col:31> 'double' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x14800e1f8 <col:31> 'const double' lvalue ParmVar 0x14800dcd8 'x' 'const double'
    |     | `-ImplicitCastExpr 0x14800e270 <col:33> 'double' <LValueToRValue>
    |     |   `-DeclRefExpr 0x14800e250 <col:33> 'const double' lvalue ParmVar 0x14800dcd8 'x' 'const double'
    |     `-ImplicitCastExpr 0x14800e2c8 <col:35> 'double' <FloatingCast>
    |       `-FloatingLiteral 0x14800e2a8 <col:35> 'float' 1.000000e+00
    |-IfStmt 0x148026838 <line:8:2, line:9:34>
    | |-BinaryOperator 0x14800e3a0 <line:8:6, col:10> 'int' '<'
    | | |-ImplicitCastExpr 0x14800e370 <col:6> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x14800e330 <col:6> 'const double' lvalue ParmVar 0x14800dcd8 'x' 'const double'
    | | `-ImplicitCastExpr 0x14800e388 <col:10> 'double' <FloatingCast>
    | |   `-FloatingLiteral 0x14800e350 <col:10> 'float' 1.000000e+00
    | `-ReturnStmt 0x148026828 <line:9:3, col:34>
    |   `-BinaryOperator 0x148026808 <col:10, col:34> 'double' '+'
    |     |-BinaryOperator 0x1480267b0 <col:10, col:32> 'double' '*'
    |     | |-BinaryOperator 0x148026758 <col:10, col:30> 'double' '*'
    |     | | |-BinaryOperator 0x148026700 <col:10, col:28> 'double' '*'
    |     | | | |-ImplicitCastExpr 0x1480266e8 <col:10> 'double' <FloatingCast>
    |     | | | | `-FloatingLiteral 0x14800e3c0 <col:10> 'float' 9.200000e-01
    |     | | | `-ParenExpr 0x1480266c8 <col:16, col:28> 'double'
    |     | | |   `-BinaryOperator 0x1480266a8 <col:17, col:24> 'double' '-'
    |     | | |     |-BinaryOperator 0x148026650 <col:17, col:22> 'double' '*'
    |     | | |     | |-ImplicitCastExpr 0x148026638 <col:17> 'double' <FloatingCast>
    |     | | |     | | `-FloatingLiteral 0x14800e3e0 <col:17> 'float' 2.000000e+00
    |     | | |     | `-ImplicitCastExpr 0x148026620 <col:22> 'double' <LValueToRValue>
    |     | | |     |   `-DeclRefExpr 0x148026600 <col:22> 'const double' lvalue ParmVar 0x14800dcd8 'x' 'const double'
    |     | | |     `-ImplicitCastExpr 0x148026690 <col:24> 'double' <FloatingCast>
    |     | | |       `-FloatingLiteral 0x148026670 <col:24> 'float' 3.000000e+00
    |     | | `-ImplicitCastExpr 0x148026740 <col:30> 'double' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x148026720 <col:30> 'const double' lvalue ParmVar 0x14800dcd8 'x' 'const double'
    |     | `-ImplicitCastExpr 0x148026798 <col:32> 'double' <LValueToRValue>
    |     |   `-DeclRefExpr 0x148026778 <col:32> 'const double' lvalue ParmVar 0x14800dcd8 'x' 'const double'
    |     `-ImplicitCastExpr 0x1480267f0 <col:34> 'double' <FloatingCast>
    |       `-FloatingLiteral 0x1480267d0 <col:34> 'float' 1.000000e+00
    `-ReturnStmt 0x148026890 <line:10:2, col:9>
      `-ImplicitCastExpr 0x148026878 <col:9> 'double' <FloatingCast>
        `-FloatingLiteral 0x148026858 <col:9> 'float' 0.000000e+00
