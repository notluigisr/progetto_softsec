`-FunctionDecl 0x12b00dd98  line:1:1 testThread 'int (void)'
  `-CompoundStmt 0x12a923450 <line:2:1, line:58:1>
    |-DeclStmt 0x12b00dfa0 <line:3:5, col:27>
    | |-VarDecl 0x12b00dea0 <col:5, col:18> col:18 used i 'unsigned int'
    | `-VarDecl 0x12b00df20 <col:5, col:21> col:21 used repeat 'unsigned int'
    |-DeclStmt 0x12b00e0a0 <line:4:5, col:72>
    | `-VarDecl 0x12b00dfd0 <col:5, col:18> col:18 used num_threads 'unsigned int'
    |-DeclStmt 0x12b00e158 <line:7:5, col:16>
    | `-VarDecl 0x12b00e0d0 <col:5, col:15> col:9 used res 'int' cinit
    |   `-IntegerLiteral 0x12b00e138 <col:15> 'int' 0
    |-CallExpr 0x12b00e2e8 <line:9:5, col:19> 'int'
    | `-ImplicitCastExpr 0x12b00e2d0 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x12b00e280 <col:5> 'int ()' Function 0x12b00e1c8 'xmlInitParser' 'int ()'
    |-ForStmt 0x12a9233b0 <line:10:5, line:55:5>
    | |-BinaryOperator 0x12b00e360 <line:10:10, col:19> 'unsigned int' '='
    | | |-DeclRefExpr 0x12b00e308 <col:10> 'unsigned int' lvalue Var 0x12b00df20 'repeat' 'unsigned int'
    | | `-ImplicitCastExpr 0x12b00e348 <col:19> 'unsigned int' <IntegralCast>
    | |   `-IntegerLiteral 0x12b00e328 <col:19> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x12c808200 <col:22, col:31> 'int' contains-errors '<'
    | | |-DeclRefExpr 0x12b00e380 <col:22> 'unsigned int' lvalue Var 0x12b00df20 'repeat' 'unsigned int'
    | | `-RecoveryExpr 0x12b00e3d8 <col:31> '<dependent type>' contains-errors lvalue
    | |-UnaryOperator 0x12c808240 <col:50, col:56> 'unsigned int' postfix '++'
    | | `-DeclRefExpr 0x12c808220 <col:50> 'unsigned int' lvalue Var 0x12b00df20 'repeat' 'unsigned int'
    | `-CompoundStmt 0x12a923368 <col:60, line:55:5>
    |   |-CallExpr 0x12c8083b8 <line:11:9, col:31> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x12c808338 <col:9> 'int ()' Function 0x12c808280 'xmlLoadCatalog' 'int ()'
    |   | `-RecoveryExpr 0x12c808398 <col:24> '<dependent type>' contains-errors lvalue
    |   |-ForStmt 0x12c8085c8 <line:14:9, line:17:9>
    |   | |-BinaryOperator 0x12c808438 <line:14:14, col:18> 'unsigned int' '='
    |   | | |-DeclRefExpr 0x12c8083e0 <col:14> 'unsigned int' lvalue Var 0x12b00dea0 'i' 'unsigned int'
    |   | | `-ImplicitCastExpr 0x12c808420 <col:18> 'unsigned int' <IntegralCast>
    |   | |   `-IntegerLiteral 0x12c808400 <col:18> 'int' 0
    |   | |-<<<NULL>>>
    |   | |-BinaryOperator 0x12c8084c8 <col:21, col:25> 'int' '<'
    |   | | |-ImplicitCastExpr 0x12c808498 <col:21> 'unsigned int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x12c808458 <col:21> 'unsigned int' lvalue Var 0x12b00dea0 'i' 'unsigned int'
    |   | | `-ImplicitCastExpr 0x12c8084b0 <col:25> 'unsigned int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x12c808478 <col:25> 'unsigned int' lvalue Var 0x12b00dfd0 'num_threads' 'unsigned int'
    |   | |-UnaryOperator 0x12c808508 <col:38, col:39> 'unsigned int' postfix '++'
    |   | | `-DeclRefExpr 0x12c8084e8 <col:38> 'unsigned int' lvalue Var 0x12b00dea0 'i' 'unsigned int'
    |   | `-CompoundStmt 0x12c8085b8 <col:43, line:17:9>
    |   |-ForStmt 0x12c808b80 <line:19:9, line:30:9>
    |   | |-BinaryOperator 0x12c808658 <line:19:14, col:18> 'unsigned int' '='
    |   | | |-DeclRefExpr 0x12c808600 <col:14> 'unsigned int' lvalue Var 0x12b00dea0 'i' 'unsigned int'
    |   | | `-ImplicitCastExpr 0x12c808640 <col:18> 'unsigned int' <IntegralCast>
    |   | |   `-IntegerLiteral 0x12c808620 <col:18> 'int' 0
    |   | |-<<<NULL>>>
    |   | |-BinaryOperator 0x12c8086e8 <col:21, col:25> 'int' '<'
    |   | | |-ImplicitCastExpr 0x12c8086b8 <col:21> 'unsigned int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x12c808678 <col:21> 'unsigned int' lvalue Var 0x12b00dea0 'i' 'unsigned int'
    |   | | `-ImplicitCastExpr 0x12c8086d0 <col:25> 'unsigned int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x12c808698 <col:25> 'unsigned int' lvalue Var 0x12b00dfd0 'num_threads' 'unsigned int'
    |   | |-UnaryOperator 0x12c808728 <col:38, col:39> 'unsigned int' postfix '++'
    |   | | `-DeclRefExpr 0x12c808708 <col:38> 'unsigned int' lvalue Var 0x12b00dea0 'i' 'unsigned int'
    |   | `-CompoundStmt 0x12c808b68 <col:43, line:30:9>
    |   |   `-IfStmt 0x12c808b48 <line:26:13, line:29:13>
    |   |     |-RecoveryExpr 0x12c808958 <line:26:17, col:27> '_Bool' contains-errors
    |   |     `-CompoundStmt 0x12c808b30 <col:33, line:29:13>
    |   |       `-ReturnStmt 0x12c808b20 <line:28:17, col:25>
    |   |         `-ParenExpr 0x12c808b00 <col:23, col:25> 'int'
    |   |           `-IntegerLiteral 0x12c808ae0 <col:24> 'int' 1
    |   |-IfStmt 0x12c808da0 <line:32:9, line:36:2>
    |   | |-RecoveryExpr 0x12c808cd8 <line:32:13, line:33:13> '_Bool' contains-errors
    |   | `-CompoundStmt 0x12c808d88 <col:26, line:36:2>
    |   |   `-ReturnStmt 0x12c808d78 <line:35:6, col:14>
    |   |     `-ParenExpr 0x12c808d58 <col:12, col:14> 'int'
    |   |       `-IntegerLiteral 0x12c808d38 <col:13> 'int' 1
    |   |-ForStmt 0x12a922f10 <line:38:9, line:45:9>
    |   | |-BinaryOperator 0x12c808e18 <line:38:14, col:18> 'unsigned int' '='
    |   | | |-DeclRefExpr 0x12c808dc0 <col:14> 'unsigned int' lvalue Var 0x12b00dea0 'i' 'unsigned int'
    |   | | `-ImplicitCastExpr 0x12c808e00 <col:18> 'unsigned int' <IntegralCast>
    |   | |   `-IntegerLiteral 0x12c808de0 <col:18> 'int' 0
    |   | |-<<<NULL>>>
    |   | |-BinaryOperator 0x12c808ea8 <col:21, col:25> 'int' '<'
    |   | | |-ImplicitCastExpr 0x12c808e78 <col:21> 'unsigned int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x12c808e38 <col:21> 'unsigned int' lvalue Var 0x12b00dea0 'i' 'unsigned int'
    |   | | `-ImplicitCastExpr 0x12c808e90 <col:25> 'unsigned int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x12c808e58 <col:25> 'unsigned int' lvalue Var 0x12b00dfd0 'num_threads' 'unsigned int'
    |   | |-UnaryOperator 0x12c808ee8 <col:38, col:39> 'unsigned int' postfix '++'
    |   | | `-DeclRefExpr 0x12c808ec8 <col:38> 'unsigned int' lvalue Var 0x12b00dea0 'i' 'unsigned int'
    |   | `-CompoundStmt 0x12a922ef8 <col:43, line:45:9>
    |   |   `-IfStmt 0x12c809128 <line:40:13, line:43:13>
    |   |     |-RecoveryExpr 0x12c809060 <line:40:17, col:24> '_Bool' contains-errors
    |   |     `-CompoundStmt 0x12c809110 <col:27, line:43:13>
    |   |       `-ReturnStmt 0x12c809100 <line:42:17, col:25>
    |   |         `-ParenExpr 0x12c8090e0 <col:23, col:25> 'int'
    |   |           `-IntegerLiteral 0x12c8090c0 <col:24> 'int' 1
    |   |-CallExpr 0x12a923060 <line:47:9, col:27> 'int'
    |   | `-ImplicitCastExpr 0x12a923048 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   |   `-DeclRefExpr 0x12a923028 <col:9> 'int ()' Function 0x12a922f70 'xmlCatalogCleanup' 'int ()'
    |   `-ForStmt 0x12a923330 <line:48:9, line:54:9>
    |     |-BinaryOperator 0x12a9230d8 <line:48:14, col:18> 'unsigned int' '='
    |     | |-DeclRefExpr 0x12a923080 <col:14> 'unsigned int' lvalue Var 0x12b00dea0 'i' 'unsigned int'
    |     | `-ImplicitCastExpr 0x12a9230c0 <col:18> 'unsigned int' <IntegralCast>
    |     |   `-IntegerLiteral 0x12a9230a0 <col:18> 'int' 0
    |     |-<<<NULL>>>
    |     |-BinaryOperator 0x12a923168 <col:21, col:25> 'int' '<'
    |     | |-ImplicitCastExpr 0x12a923138 <col:21> 'unsigned int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x12a9230f8 <col:21> 'unsigned int' lvalue Var 0x12b00dea0 'i' 'unsigned int'
    |     | `-ImplicitCastExpr 0x12a923150 <col:25> 'unsigned int' <LValueToRValue>
    |     |   `-DeclRefExpr 0x12a923118 <col:25> 'unsigned int' lvalue Var 0x12b00dfd0 'num_threads' 'unsigned int'
    |     |-UnaryOperator 0x12a9231a8 <col:38, col:39> 'unsigned int' postfix '++'
    |     | `-DeclRefExpr 0x12a923188 <col:38> 'unsigned int' lvalue Var 0x12b00dea0 'i' 'unsigned int'
    |     `-CompoundStmt 0x12a923318 <col:43, line:54:9>
    |       `-IfStmt 0x12a9232f8 <line:49:13, line:53:6>
    |         |-RecoveryExpr 0x12a9231e0 <line:49:17, col:39> '_Bool' contains-errors
    |         `-CompoundStmt 0x12a9232e0 <col:45, line:53:6>
    |           `-BinaryOperator 0x12a9232c0 <line:52:10, col:16> 'int' '='
    |             |-DeclRefExpr 0x12a923280 <col:10> 'int' lvalue Var 0x12b00e0d0 'res' 'int'
    |             `-IntegerLiteral 0x12a9232a0 <col:16> 'int' 1
    `-ReturnStmt 0x12a923440 <line:57:5, col:16>
      `-ImplicitCastExpr 0x12a923428 <col:12, col:16> 'int' <LValueToRValue>
        `-ParenExpr 0x12a923408 <col:12, col:16> 'int' lvalue
          `-DeclRefExpr 0x12a9233e8 <col:13> 'int' lvalue Var 0x12b00e0d0 'res' 'int'
