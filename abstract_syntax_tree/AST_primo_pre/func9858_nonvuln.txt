`-FunctionDecl 0x12e00de88  line:1:1 invalid vte_sequence_handler_ec 'int (int *, int *)'
  |-ParmVarDecl 0x12e00dd28 <col:26, col:39> col:39 referenced invalid terminal 'int *'
  |-ParmVarDecl 0x12e00dda8 <col:49, col:62> col:62 invalid params 'int *'
  `-CompoundStmt 0x12e808d10 <line:2:1, line:46:1>
    |-DeclStmt 0x12e00e140 <line:7:2, col:20>
    | |-VarDecl 0x12e00dfb8 <col:2, col:7> col:7 used col 'long'
    | |-VarDecl 0x12e00e038 <col:2, col:12> col:12 used i 'long'
    | `-VarDecl 0x12e00e0b8 <col:2, col:15> col:15 used count 'long'
    |-BinaryOperator 0x12e00e260 <line:12:2, col:10> 'long' '='
    | |-DeclRefExpr 0x12e00e208 <col:2> 'long' lvalue Var 0x12e00e0b8 'count' 'long'
    | `-ImplicitCastExpr 0x12e00e248 <col:10> 'long' <IntegralCast>
    |   `-IntegerLiteral 0x12e00e228 <col:10> 'int' 1
    |-IfStmt 0x12e0283b0 <line:13:2, line:18:2>
    | |-RecoveryExpr 0x12e00e3a0 <line:13:6, col:47> '_Bool' contains-errors
    | `-CompoundStmt 0x12e028398 <col:50, line:18:2>
    |   `-IfStmt 0x12e028378 <line:15:3, line:17:3>
    |     |-CallExpr 0x12e028150 <line:15:7, col:31> '<dependent type>' contains-errors
    |     | |-DeclRefExpr 0x12e0280d0 <col:7> 'int ()' Function 0x12e028018 'G_VALUE_HOLDS_LONG' 'int ()'
    |     | `-RecoveryExpr 0x12e028130 <col:26> '<dependent type>' contains-errors lvalue
    |     `-CompoundStmt 0x12e028360 <col:34, line:17:3>
    |       `-BinaryOperator 0x12e028340 <line:16:4, col:34> 'long' contains-errors '='
    |         |-DeclRefExpr 0x12e028178 <col:4> 'long' lvalue Var 0x12e00e0b8 'count' 'long'
    |         `-CallExpr 0x12e028318 <col:12, col:34> '<dependent type>' contains-errors
    |           |-DeclRefExpr 0x12e028278 <col:12> 'int ()' Function 0x12e0281c0 'g_value_get_long' 'int ()'
    |           `-RecoveryExpr 0x12e0282f8 <col:29> '<dependent type>' contains-errors lvalue
    `-IfStmt 0x12e808c18 <line:22:2, line:42:2>
      |-RecoveryExpr 0x12e028618 <line:22:6, col:64> '_Bool' contains-errors
      `-CompoundStmt 0x12e808c00 <col:69, line:42:2>
        `-ForStmt 0x12e028c68 <line:25:3, line:37:3>
          |-BinaryOperator 0x12e028790 <line:25:8, col:12> 'long' '='
          | |-DeclRefExpr 0x12e028738 <col:8> 'long' lvalue Var 0x12e00e038 'i' 'long'
          | `-ImplicitCastExpr 0x12e028778 <col:12> 'long' <IntegralCast>
          |   `-IntegerLiteral 0x12e028758 <col:12> 'int' 0
          |-<<<NULL>>>
          |-BinaryOperator 0x12e028820 <col:15, col:19> 'int' '<'
          | |-ImplicitCastExpr 0x12e0287f0 <col:15> 'long' <LValueToRValue>
          | | `-DeclRefExpr 0x12e0287b0 <col:15> 'long' lvalue Var 0x12e00e038 'i' 'long'
          | `-ImplicitCastExpr 0x12e028808 <col:19> 'long' <LValueToRValue>
          |   `-DeclRefExpr 0x12e0287d0 <col:19> 'long' lvalue Var 0x12e00e0b8 'count' 'long'
          |-UnaryOperator 0x12e028860 <col:26, col:27> 'long' postfix '++'
          | `-DeclRefExpr 0x12e028840 <col:26> 'long' lvalue Var 0x12e00e038 'i' 'long'
          `-CompoundStmt 0x12e028c50 <col:31, line:37:3>
            `-IfStmt 0x12e028c30 <line:27:4, line:36:4>
              |-BinaryOperator 0x12e028928 <line:27:8, col:15> 'int' '>='
              | |-ImplicitCastExpr 0x12e0288f8 <col:8> 'long' <LValueToRValue>
              | | `-DeclRefExpr 0x12e0288b8 <col:8> 'long' lvalue Var 0x12e00dfb8 'col' 'long'
              | `-ImplicitCastExpr 0x12e028910 <col:15> 'long' <IntegralCast>
              |   `-IntegerLiteral 0x12e0288d8 <col:15> 'int' 0
              `-CompoundStmt 0x12e028c18 <col:18, line:36:4>
                `-IfStmt 0x12e028be8 <line:28:5, line:35:5> has_else
                  |-RecoveryExpr 0x12e028968 <line:28:9, col:52> '_Bool' contains-errors
                  |-CompoundStmt 0x12e028aa8 <col:55, line:32:5>
                  `-CompoundStmt 0x12e028bd8 <col:12, line:35:5>
