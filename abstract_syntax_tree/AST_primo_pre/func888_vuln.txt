`-FunctionDecl 0x14d00de88  line:1:33 invalid _gdContributionsAlloc 'int *(unsigned int, unsigned int)' static inline
  |-ParmVarDecl 0x14d00dcf0 <col:55, col:68> col:68 used line_length 'unsigned int'
  |-ParmVarDecl 0x14d00dd70 <col:81, col:94> col:94 used windows_size 'unsigned int'
  `-CompoundStmt 0x14d028a38 <line:2:1, line:38:1>
    |-DeclStmt 0x14d00dff8 <line:3:2, col:20>
    | `-VarDecl 0x14d00df58 <col:2, col:19> col:15 used u 'unsigned int' cinit
    |   `-ImplicitCastExpr 0x14d00dfe0 <col:19> 'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x14d00dfc0 <col:19> 'int' 0
    |-DeclStmt 0x14d00e0c8 <line:5:2, col:24>
    | `-VarDecl 0x14d00e040 <col:2, col:23> col:6 used overflow_error 'int' cinit
    |   `-IntegerLiteral 0x14d00e0a8 <col:23> 'int' 0
    |-IfStmt 0x14d00e1f0 <line:8:2, line:10:2>
    | |-UnaryOperator 0x14d00e178 <line:8:6, col:7> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x14d00e160 <col:7> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x14d00e140 <col:7> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x14d00e1d8 <col:12, line:10:2>
    |   `-ReturnStmt 0x14d00e1c8 <line:9:3, col:10>
    |     `-RecoveryExpr 0x14d00e1a8 <col:10> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x14d028028 <line:13:2, line:16:2>
    | |-RecoveryExpr 0x14d027e18 <line:13:6, col:53> '_Bool' contains-errors
    | `-CompoundStmt 0x14d028008 <col:56, line:16:2>
    |   |-CallExpr 0x14d027f98 <line:14:3, col:13> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x14d027f18 <col:3> 'int ()' Function 0x14d027e60 'gdFree' 'int ()'
    |   | `-RecoveryExpr 0x14d027f78 <col:10> '<dependent type>' contains-errors lvalue
    |   `-ReturnStmt 0x14d027ff8 <line:15:3, col:10>
    |     `-RecoveryExpr 0x14d027fd8 <col:10> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x14d0281d0 <line:18:2, line:21:2>
    | |-BinaryOperator 0x14d028180 <line:18:6, col:25> 'int' contains-errors '=='
    | | |-CXXDependentScopeMemberExpr 0x14d028118 <col:6, col:11> '<dependent type>' contains-errors lvalue ->ContribRow
    | | | `-RecoveryExpr 0x14d0280f8 <col:6> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x14d028160 <col:25> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x14d0281c0 <col:31, line:21:2>
    `-ForStmt 0x14d028a00 <line:22:2, line:36:2>
      |-BinaryOperator 0x14d028248 <line:22:7, col:11> 'unsigned int' '='
      | |-DeclRefExpr 0x14d0281f0 <col:7> 'unsigned int' lvalue Var 0x14d00df58 'u' 'unsigned int'
      | `-ImplicitCastExpr 0x14d028230 <col:11> 'unsigned int' <IntegralCast>
      |   `-IntegerLiteral 0x14d028210 <col:11> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x14d0282d8 <col:15, col:19> 'int' '<'
      | |-ImplicitCastExpr 0x14d0282a8 <col:15> 'unsigned int' <LValueToRValue>
      | | `-DeclRefExpr 0x14d028268 <col:15> 'unsigned int' lvalue Var 0x14d00df58 'u' 'unsigned int'
      | `-ImplicitCastExpr 0x14d0282c0 <col:19> 'unsigned int' <LValueToRValue>
      |   `-DeclRefExpr 0x14d028288 <col:19> 'unsigned int' lvalue ParmVar 0x14d00dcf0 'line_length' 'unsigned int'
      |-UnaryOperator 0x14d028318 <col:33, col:34> 'unsigned int' postfix '++'
      | `-DeclRefExpr 0x14d0282f8 <col:33> 'unsigned int' lvalue Var 0x14d00df58 'u' 'unsigned int'
      `-CompoundStmt 0x14d0289e0 <col:38, line:36:2>
        |-IfStmt 0x14d028740 <line:23:3, line:27:3> has_else
        | |-CallExpr 0x14d0283f8 <line:23:7, col:45> 'int'
        | | |-ImplicitCastExpr 0x14d0283e0 <col:7> 'int (*)()' <FunctionToPointerDecay>
        | | | `-DeclRefExpr 0x14d028330 <col:7> 'int ()' Function 0x14d00e2f8 'overflow2' 'int ()'
        | | |-ImplicitCastExpr 0x14d028428 <col:17> 'unsigned int' <LValueToRValue>
        | | | `-DeclRefExpr 0x14d028350 <col:17> 'unsigned int' lvalue ParmVar 0x14d00dd70 'windows_size' 'unsigned int'
        | | `-UnaryExprOrTypeTraitExpr 0x14d028388 <col:31, col:44> 'unsigned long' sizeof 'double'
        | |-CompoundStmt 0x14d0284a0 <col:48, line:25:3>
        | | `-BinaryOperator 0x14d028480 <line:24:4, col:21> 'int' '='
        | |   |-DeclRefExpr 0x14d028440 <col:4> 'int' lvalue Var 0x14d00e040 'overflow_error' 'int'
        | |   `-IntegerLiteral 0x14d028460 <col:21> 'int' 1
        | `-CompoundStmt 0x14d028730 <line:25:10, line:27:3>
        `-IfStmt 0x14d0289c0 <line:28:3, line:35:3>
          |-RecoveryExpr 0x14d028808 <line:28:7, col:60> '_Bool' contains-errors
          `-CompoundStmt 0x14d0289a0 <col:66, line:35:3>
            |-UnaryOperator 0x14d028848 <line:29:4, col:5> 'unsigned int' postfix '--'
            | `-DeclRefExpr 0x14d028828 <col:4> 'unsigned int' lvalue Var 0x14d00df58 'u' 'unsigned int'
            `-WhileStmt 0x14d028980 <line:30:4, line:33:4>
              |-BinaryOperator 0x14d0288d0 <line:30:11, col:16> 'int' '>='
              | |-ImplicitCastExpr 0x14d0288a0 <col:11> 'unsigned int' <LValueToRValue>
              | | `-DeclRefExpr 0x14d028860 <col:11> 'unsigned int' lvalue Var 0x14d00df58 'u' 'unsigned int'
              | `-ImplicitCastExpr 0x14d0288b8 <col:16> 'unsigned int' <IntegralCast>
              |   `-IntegerLiteral 0x14d028880 <col:16> 'int' 0
              `-CompoundStmt 0x14d028968 <col:19, line:33:4>
                `-UnaryOperator 0x14d028950 <line:32:5, col:6> 'unsigned int' postfix '--'
                  `-DeclRefExpr 0x14d028930 <col:5> 'unsigned int' lvalue Var 0x14d00df58 'u' 'unsigned int'
