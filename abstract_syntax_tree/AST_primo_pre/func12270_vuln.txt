`-FunctionDecl 0x12e00e0b8  line:2:16 invalid js_sys_basecode_ex 'int (int *, int, int, int *, _Bool, _Bool)' static
  |-ParmVarDecl 0x12e00dd28 <col:35, col:46> col:46 invalid ctx 'int *'
  |-ParmVarDecl 0x12e00dda8 <col:51, col:64> col:64 invalid this_val 'int'
  |-ParmVarDecl 0x12e00de28 <col:74, col:78> col:78 used argc 'int'
  |-ParmVarDecl 0x12e00dea8 <col:84, col:98> col:98 invalid argv 'int *'
  |-ParmVarDecl 0x12e00df20 <col:104, col:109> col:109 used is_dec '_Bool'
  |-ParmVarDecl 0x12e00df98 <col:117, col:122> col:122 used is_16 '_Bool'
  `-CompoundStmt 0x12e027e00 <line:3:1, line:51:13>
    |-IfStmt 0x12d922e00 <line:8:2, col:39>
    | |-UnaryOperator 0x12e00e1f8 <col:6, col:7> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x12e00e1e0 <col:7> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x12e00e1c0 <col:7> 'int' lvalue ParmVar 0x12e00de28 'argc' 'int'
    | `-ReturnStmt 0x12e00e3d8 <col:13, col:39>
    |   `-CallExpr 0x12e00e3b0 <col:20, col:39> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x12e00e370 <col:20> 'int ()' Function 0x12e00e2b8 'GF_JS_EXCEPTION' 'int ()'
    |     `-RecoveryExpr 0x12e00e390 <col:36> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x12e027888 <line:10:2, line:41:2> has_else
    | |-ImplicitCastExpr 0x12d922e40 <line:10:6> '_Bool' <LValueToRValue>
    | | `-DeclRefExpr 0x12d922e20 <col:6> '_Bool' lvalue ParmVar 0x12e00df20 'is_dec' '_Bool'
    | |-CompoundStmt 0x12d923728 <col:14, line:26:2>
    | | |-DeclStmt 0x12d9230a0 <line:12:3, col:47>
    | | | `-VarDecl 0x12d922e70 <col:3, col:46> col:15 used str 'const char *' cinit
    | | |   `-CallExpr 0x12d923070 <col:21, col:46> '<dependent type>' contains-errors
    | | |     |-DeclRefExpr 0x12d922fb8 <col:21> 'int ()' Function 0x12d922f00 'JS_ToCString' 'int ()'
    | | |     |-RecoveryExpr 0x12d922fd8 <col:34> '<dependent type>' contains-errors lvalue
    | | |     `-ArraySubscriptExpr 0x12d923050 <col:39, col:45> '<dependent type>' contains-errors lvalue
    | | |       |-ImplicitCastExpr 0x12d923038 <col:39> '<dependent type>' contains-errors <LValueToRValue>
    | | |       | `-RecoveryExpr 0x12d922ff8 <col:39> '<dependent type>' contains-errors lvalue
    | | |       `-IntegerLiteral 0x12d923018 <col:44> 'int' 0
    | | |-IfStmt 0x12d923180 <line:13:3, col:39>
    | | | |-UnaryOperator 0x12d9230f0 <col:7, col:8> 'int' contains-errors prefix '!' cannot overflow
    | | | | `-ImplicitCastExpr 0x12d9230d8 <col:8> 'const char *' contains-errors <LValueToRValue>
    | | | |   `-DeclRefExpr 0x12d9230b8 <col:8> 'const char *' contains-errors lvalue Var 0x12d922e70 'str' 'const char *'
    | | | `-ReturnStmt 0x12d923170 <col:13, col:39>
    | | |   `-CallExpr 0x12d923148 <col:20, col:39> '<dependent type>' contains-errors
    | | |     |-DeclRefExpr 0x12d923108 <col:20> 'int ()' Function 0x12e00e2b8 'GF_JS_EXCEPTION' 'int ()'
    | | |     `-RecoveryExpr 0x12d923128 <col:36> '<dependent type>' contains-errors lvalue
    | | |-IfStmt 0x12d923588 <line:16:3, line:24:3> has_else
    | | | |-RecoveryExpr 0x12d9232d0 <line:16:7, col:8> '_Bool' contains-errors
    | | | |-CompoundStmt 0x12d9232f0 <col:17, line:18:3>
    | | | `-IfStmt 0x12d923558 <col:10, line:24:3> has_else
    | | |   |-ImplicitCastExpr 0x12d923320 <line:18:14> '_Bool' <LValueToRValue>
    | | |   | `-DeclRefExpr 0x12d923300 <col:14> '_Bool' lvalue ParmVar 0x12e00df98 'is_16' '_Bool'
    | | |   |-CompoundStmt 0x12d923438 <col:21, line:21:3>
    | | |   `-CompoundStmt 0x12d923548 <col:10, line:24:3>
    | | `-CallExpr 0x12d9236f8 <line:25:3, col:26> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x12d923698 <col:3> 'int ()' Function 0x12d9235e0 'JS_FreeCString' 'int ()'
    | |   |-RecoveryExpr 0x12d9236b8 <col:18> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x12d9236d8 <col:23> 'const char *' contains-errors lvalue Var 0x12d922e70 'str' 'const char *'
    | `-CompoundStmt 0x12e027860 <line:26:9, line:41:2>
    |   |-DeclStmt 0x12d9237d8 <line:27:3, col:17>
    |   | `-VarDecl 0x12d923770 <col:3, col:13> col:13 referenced invalid data 'const int *'
    |   |-IfStmt 0x12d923a98 <line:30:3, col:40>
    |   | |-UnaryOperator 0x12d923a08 <col:7, col:8> '<dependent type>' contains-errors prefix '!' cannot overflow
    |   | | `-ImplicitCastExpr 0x12d9239f0 <col:8> '<dependent type>' contains-errors <LValueToRValue>
    |   | |   `-RecoveryExpr 0x12d9239d0 <col:8> '<dependent type>' contains-errors lvalue
    |   | `-ReturnStmt 0x12d923a88 <col:14, col:40>
    |   |   `-CallExpr 0x12d923a60 <col:21, col:40> '<dependent type>' contains-errors
    |   |     |-DeclRefExpr 0x12d923a20 <col:21> 'int ()' Function 0x12e00e2b8 'GF_JS_EXCEPTION' 'int ()'
    |   |     `-RecoveryExpr 0x12d923a40 <col:37> '<dependent type>' contains-errors lvalue
    |   `-IfStmt 0x12e027830 <line:32:3, line:40:3> has_else
    |     |-RecoveryExpr 0x12d923b18 <line:32:7, col:8> '_Bool' contains-errors
    |     |-CompoundStmt 0x12d923b38 <col:17, line:34:3>
    |     `-IfStmt 0x12e027800 <col:10, line:40:3> has_else
    |       |-ImplicitCastExpr 0x12d923b68 <line:34:14> '_Bool' <LValueToRValue>
    |       | `-DeclRefExpr 0x12d923b48 <col:14> '_Bool' lvalue ParmVar 0x12e00df98 'is_16' '_Bool'
    |       |-CompoundStmt 0x12d923ca0 <col:21, line:37:3>
    |       `-CompoundStmt 0x12d923dd0 <col:10, line:40:3>
    `-IfStmt 0x12e027dd0 <line:44:2, line:50:2> has_else
      |-ImplicitCastExpr 0x12e027a18 <line:44:6> '_Bool' <LValueToRValue>
      | `-DeclRefExpr 0x12e0279f8 <col:6> '_Bool' lvalue ParmVar 0x12e00df20 'is_dec' '_Bool'
      |-CompoundStmt 0x12e027b70 <col:14, line:46:2>
      `-CompoundStmt 0x12e027dc0 <col:9, line:50:2>
