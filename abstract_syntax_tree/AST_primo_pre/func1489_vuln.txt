`-FunctionDecl 0x152826688  line:1:12 smk_curacc_on_task 'int (struct task_struct *, int, const char *)' static
  |-ParmVarDecl 0x15280e248 <col:31, col:51> col:51 used p 'struct task_struct *'
  |-ParmVarDecl 0x15280e2c8 <col:54, col:58> col:58 used access 'int'
  |-ParmVarDecl 0x15280e348 <line:2:5, col:17> col:17 used caller 'const char *'
  `-CompoundStmt 0x152829200 <line:3:1, line:13:1>
    |-DeclStmt 0x152826908 <line:4:2, col:26>
    | |-RecordDecl 0x152826790 <col:2, col:9> col:9 struct smk_audit_info
    | `-VarDecl 0x152826888 <col:2, col:24> col:24 invalid ad 'struct smk_audit_info'
    |-DeclStmt 0x152826d18 <line:5:2, col:54>
    | |-RecordDecl 0x152826920 <col:2, col:9> col:9 struct smack_known
    | `-VarDecl 0x152826a88 <col:2, col:53> col:22 used skp 'struct smack_known *' cinit
    |   `-ImplicitCastExpr 0x152826ce8 <col:28, col:53> 'struct smack_known *' <IntegralToPointer>
    |     `-CallExpr 0x152826ca8 <col:28, col:53> 'int'
    |       |-ImplicitCastExpr 0x152826c90 <col:28> 'int (*)()' <FunctionToPointerDecay>
    |       | `-DeclRefExpr 0x152826c20 <col:28> 'int ()' Function 0x152826b68 'smk_of_task_struct_subj' 'int ()'
    |       `-ImplicitCastExpr 0x152826cd0 <col:52> 'struct task_struct *' <LValueToRValue>
    |         `-DeclRefExpr 0x152826c40 <col:52> 'struct task_struct *' lvalue ParmVar 0x15280e248 'p' 'struct task_struct *'
    |-DeclStmt 0x152826db0 <line:6:2, col:8>
    | `-VarDecl 0x152826d48 <col:2, col:6> col:6 used rc 'int'
    |-CallExpr 0x152826f90 <line:8:2, col:46> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x152826ea8 <col:2> 'int ()' Function 0x152826df0 'smk_ad_init' 'int ()'
    | |-UnaryOperator 0x152826ee8 <col:14, col:15> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | `-RecoveryExpr 0x152826ec8 <col:15> '<dependent type>' contains-errors lvalue
    | |-DeclRefExpr 0x152826f00 <col:19> 'const char *' lvalue ParmVar 0x15280e348 'caller' 'const char *'
    | `-RecoveryExpr 0x152826f70 <col:27> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x152827120 <line:9:2, col:30> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x1528270a8 <col:2> 'int ()' Function 0x152826ff0 'smk_ad_setfield_u_tsk' 'int ()'
    | |-UnaryOperator 0x1528270e8 <col:24, col:25> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | `-RecoveryExpr 0x1528270c8 <col:25> '<dependent type>' contains-errors lvalue
    | `-DeclRefExpr 0x152827100 <col:29> 'struct task_struct *' lvalue ParmVar 0x15280e248 'p' 'struct task_struct *'
    |-BinaryOperator 0x152827320 <line:10:2, col:34> 'int' contains-errors '='
    | |-DeclRefExpr 0x152827150 <col:2> 'int' lvalue Var 0x152826d48 'rc' 'int'
    | `-CallExpr 0x1528272e8 <col:7, col:34> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x152827250 <col:7> 'int ()' Function 0x152827198 'smk_curacc' 'int ()'
    |   |-DeclRefExpr 0x152827270 <col:18> 'struct smack_known *' lvalue Var 0x152826a88 'skp' 'struct smack_known *'
    |   |-DeclRefExpr 0x152827290 <col:23> 'int' lvalue ParmVar 0x15280e2c8 'access' 'int'
    |   `-UnaryOperator 0x1528272d0 <col:31, col:32> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-RecoveryExpr 0x1528272b0 <col:32> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x152827558 <line:11:2, col:32> 'int' '='
    | |-DeclRefExpr 0x152827340 <col:2> 'int' lvalue Var 0x152826d48 'rc' 'int'
    | `-CallExpr 0x1528274d8 <col:7, col:32> 'int'
    |   |-ImplicitCastExpr 0x1528274c0 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x152827440 <col:7> 'int ()' Function 0x152827388 'smk_bu_task' 'int ()'
    |   |-ImplicitCastExpr 0x152827510 <col:19> 'struct task_struct *' <LValueToRValue>
    |   | `-DeclRefExpr 0x152827460 <col:19> 'struct task_struct *' lvalue ParmVar 0x15280e248 'p' 'struct task_struct *'
    |   |-ImplicitCastExpr 0x152827528 <col:22> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x152827480 <col:22> 'int' lvalue ParmVar 0x15280e2c8 'access' 'int'
    |   `-ImplicitCastExpr 0x152827540 <col:30> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x1528274a0 <col:30> 'int' lvalue Var 0x152826d48 'rc' 'int'
    `-ReturnStmt 0x1528275b0 <line:12:2, col:9>
      `-ImplicitCastExpr 0x152827598 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x152827578 <col:9> 'int' lvalue Var 0x152826d48 'rc' 'int'
