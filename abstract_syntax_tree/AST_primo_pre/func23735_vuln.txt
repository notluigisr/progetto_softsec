`-FunctionDecl 0x11f9283d8  line:1:12 invalid sh_strnum 'int (int *, const char *, char **, int)'
  |-ParmVarDecl 0x11f928128 <col:22, col:31> col:31 invalid shp 'int *'
  |-ParmVarDecl 0x11f9281a8 <col:36, col:48> col:48 used str 'const char *'
  |-ParmVarDecl 0x11f928258 <col:53, col:60> col:60 used ptr 'char **'
  |-ParmVarDecl 0x11f9282d8 <col:65, col:69> col:69 used mode 'int'
  `-CompoundStmt 0x11f944798 <col:75, line:22:1>
    |-DeclStmt 0x11f928520 <line:3:5, col:15>
    | `-VarDecl 0x11f9284b8 <col:5, col:11> col:11 used last 'char *'
    |-IfStmt 0x11f928788 <line:5:5, line:8:5>
    | |-BinaryOperator 0x11f9285d8 <line:5:9, col:17> 'int' '=='
    | | |-ImplicitCastExpr 0x11f9285c0 <col:9, col:10> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x11f9285a8 <col:9, col:10> 'char' <LValueToRValue>
    | | |   `-UnaryOperator 0x11f928570 <col:9, col:10> 'const char' lvalue prefix '*' cannot overflow
    | | |     `-ImplicitCastExpr 0x11f928558 <col:10> 'const char *' <LValueToRValue>
    | | |       `-DeclRefExpr 0x11f928538 <col:10> 'const char *' lvalue ParmVar 0x11f9281a8 'str' 'const char *'
    | | `-IntegerLiteral 0x11f928588 <col:17> 'int' 0
    | `-CompoundStmt 0x11f928768 <col:20, line:8:5>
    |   |-IfStmt 0x11f928718 <line:6:9, col:33>
    |   | |-ImplicitCastExpr 0x11f928618 <col:13> 'char **' <LValueToRValue>
    |   | | `-DeclRefExpr 0x11f9285f8 <col:13> 'char **' lvalue ParmVar 0x11f928258 'ptr' 'char **'
    |   | `-BinaryOperator 0x11f9286f8 <col:18, col:33> 'char *' '='
    |   |   |-UnaryOperator 0x11f928668 <col:18, col:19> 'char *' lvalue prefix '*' cannot overflow
    |   |   | `-ImplicitCastExpr 0x11f928650 <col:19> 'char **' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x11f928630 <col:19> 'char **' lvalue ParmVar 0x11f928258 'ptr' 'char **'
    |   |   `-CStyleCastExpr 0x11f9286d0 <col:25, col:33> 'char *' <NoOp>
    |   |     `-ImplicitCastExpr 0x11f9286b8 <col:33> 'const char *' <LValueToRValue> part_of_explicit_cast
    |   |       `-DeclRefExpr 0x11f928680 <col:33> 'const char *' lvalue ParmVar 0x11f9281a8 'str' 'const char *'
    |   `-ReturnStmt 0x11f928758 <line:7:9, col:16>
    |     `-IntegerLiteral 0x11f928738 <col:16> 'int' 0
    |-IfStmt 0x11f944620 <line:11:5, line:19:5> has_else
    | |-ImplicitCastExpr 0x11f942b58 <line:11:9, col:10> 'char' <LValueToRValue>
    | | `-UnaryOperator 0x11f942b40 <col:9, col:10> 'char' lvalue prefix '*' cannot overflow
    | |   `-ImplicitCastExpr 0x11f942b28 <col:10> 'char *' <LValueToRValue>
    | |     `-DeclRefExpr 0x11f942b08 <col:10> 'char *' lvalue Var 0x11f9284b8 'last' 'char *'
    | |-CompoundStmt 0x11f943588 <col:16, line:17:5>
    | | |-IfStmt 0x11f942f48 <line:12:9, line:15:9>
    | | | |-BinaryOperator 0x11f942d08 <line:12:13, col:40> 'int' '||'
    | | | | |-BinaryOperator 0x11f942c08 <col:13, col:22> 'int' '!='
    | | | | | |-ImplicitCastExpr 0x11f942bf0 <col:13, col:14> 'int' <IntegralCast>
    | | | | | | `-ImplicitCastExpr 0x11f942bd8 <col:13, col:14> 'char' <LValueToRValue>
    | | | | | |   `-UnaryOperator 0x11f942ba8 <col:13, col:14> 'char' lvalue prefix '*' cannot overflow
    | | | | | |     `-ImplicitCastExpr 0x11f942b90 <col:14> 'char *' <LValueToRValue>
    | | | | | |       `-DeclRefExpr 0x11f942b70 <col:14> 'char *' lvalue Var 0x11f9284b8 'last' 'char *'
    | | | | | `-CharacterLiteral 0x11f942bc0 <col:22> 'int' 46
    | | | | `-BinaryOperator 0x11f942ce8 <col:29, col:40> 'int' '!='
    | | | |   |-ImplicitCastExpr 0x11f942cd0 <col:29, col:35> 'int' <IntegralCast>
    | | | |   | `-ImplicitCastExpr 0x11f942cb8 <col:29, col:35> 'char' <LValueToRValue>
    | | | |   |   `-ArraySubscriptExpr 0x11f942c80 <col:29, col:35> 'char' lvalue
    | | | |   |     |-ImplicitCastExpr 0x11f942c68 <col:29> 'char *' <LValueToRValue>
    | | | |   |     | `-DeclRefExpr 0x11f942c28 <col:29> 'char *' lvalue Var 0x11f9284b8 'last' 'char *'
    | | | |   |     `-IntegerLiteral 0x11f942c48 <col:34> 'int' 1
    | | | |   `-CharacterLiteral 0x11f942ca0 <col:40> 'int' 46
    | | | `-CompoundStmt 0x11f942f38 <col:45, line:15:9>
    | | `-IfStmt 0x11f943568 <line:16:9, col:97>
    | |   |-BinaryOperator 0x11f9430d0 <col:13, col:37> 'int' '&&'
    | |   | |-BinaryOperator 0x11f943038 <col:13, col:22> 'int' '&&'
    | |   | | |-UnaryOperator 0x11f942fa0 <col:13, col:14> 'int' prefix '!' cannot overflow
    | |   | | | `-ImplicitCastExpr 0x11f942f88 <col:14> 'char **' <LValueToRValue>
    | |   | | |   `-DeclRefExpr 0x11f942f68 <col:14> 'char **' lvalue ParmVar 0x11f928258 'ptr' 'char **'
    | |   | | `-ImplicitCastExpr 0x11f943020 <col:21, col:22> 'int' <IntegralCast>
    | |   | |   `-ImplicitCastExpr 0x11f943008 <col:21, col:22> 'char' <LValueToRValue>
    | |   | |     `-UnaryOperator 0x11f942ff0 <col:21, col:22> 'char' lvalue prefix '*' cannot overflow
    | |   | |       `-ImplicitCastExpr 0x11f942fd8 <col:22> 'char *' <LValueToRValue>
    | |   | |         `-DeclRefExpr 0x11f942fb8 <col:22> 'char *' lvalue Var 0x11f9284b8 'last' 'char *'
    | |   | `-BinaryOperator 0x11f9430b0 <col:30, col:37> 'int' '>'
    | |   |   |-ImplicitCastExpr 0x11f943098 <col:30> 'int' <LValueToRValue>
    | |   |   | `-DeclRefExpr 0x11f943058 <col:30> 'int' lvalue ParmVar 0x11f9282d8 'mode' 'int'
    | |   |   `-IntegerLiteral 0x11f943078 <col:37> 'int' 0
    | |   `-CallExpr 0x11f943520 <col:40, col:97> '<dependent type>' contains-errors
    | |     |-DeclRefExpr 0x11f9431d0 <col:40> 'int ()' Function 0x11f943118 'errormsg' 'int ()'
    | |     |-RecoveryExpr 0x11f943470 <col:49> '<dependent type>' contains-errors lvalue
    | |     |-CallExpr 0x11f9434a8 <col:58, col:70> 'int'
    | |     | |-ImplicitCastExpr 0x11f943490 <col:58> 'int (*)()' <FunctionToPointerDecay>
    | |     | | `-DeclRefExpr 0x11f9432e8 <col:58> 'int ()' Function 0x11f943230 'ERROR_exit' 'int ()'
    | |     | `-IntegerLiteral 0x11f943308 <col:69> 'int' 1
    | |     |-RecoveryExpr 0x11f9434d0 <col:73> '<dependent type>' contains-errors lvalue
    | |     |-UnaryOperator 0x11f943508 <col:87, col:88> 'char' lvalue prefix '*' cannot overflow
    | |     | `-ImplicitCastExpr 0x11f9434f0 <col:88> 'char *' <LValueToRValue>
    | |     |   `-DeclRefExpr 0x11f9433b8 <col:88> 'char *' lvalue Var 0x11f9284b8 'last' 'char *'
    | |     `-DeclRefExpr 0x11f943408 <col:94> 'const char *' lvalue ParmVar 0x11f9281a8 'str' 'const char *'
    | `-IfStmt 0x11f944600 <line:17:12, line:19:5>
    |   |-BinaryOperator 0x11f943798 <line:17:16, col:30> 'int' contains-errors '&&'
    |   | |-UnaryOperator 0x11f943700 <col:16, col:17> '<dependent type>' contains-errors prefix '!' cannot overflow
    |   | | `-ImplicitCastExpr 0x11f9436e8 <col:17> '<dependent type>' contains-errors <LValueToRValue>
    |   | |   `-RecoveryExpr 0x11f9436c8 <col:17> '<dependent type>' contains-errors lvalue
    |   | `-BinaryOperator 0x11f943778 <col:22, col:30> 'int' '=='
    |   |   |-ImplicitCastExpr 0x11f943760 <col:22, col:23> 'int' <IntegralCast>
    |   |   | `-ImplicitCastExpr 0x11f943748 <col:22, col:23> 'char' <LValueToRValue>
    |   |   |   `-UnaryOperator 0x11f943730 <col:22, col:23> 'const char' lvalue prefix '*' cannot overflow
    |   |   |     `-ImplicitCastExpr 0x11f943718 <col:23> 'const char *' <LValueToRValue>
    |   |   |       `-DeclRefExpr 0x11f9435f0 <col:23> 'const char *' lvalue ParmVar 0x11f9281a8 'str' 'const char *'
    |   |   `-CharacterLiteral 0x11f943640 <col:30> 'int' 45
    |   `-CompoundStmt 0x11f9437f0 <col:35, line:19:5>
    |-IfStmt 0x11f944730 <line:20:5, col:21>
    | |-ImplicitCastExpr 0x11f944670 <col:9> 'char **' <LValueToRValue>
    | | `-DeclRefExpr 0x11f944650 <col:9> 'char **' lvalue ParmVar 0x11f928258 'ptr' 'char **'
    | `-BinaryOperator 0x11f944710 <col:14, col:21> 'char *' '='
    |   |-UnaryOperator 0x11f9446c0 <col:14, col:15> 'char *' lvalue prefix '*' cannot overflow
    |   | `-ImplicitCastExpr 0x11f9446a8 <col:15> 'char **' <LValueToRValue>
    |   |   `-DeclRefExpr 0x11f944688 <col:15> 'char **' lvalue ParmVar 0x11f928258 'ptr' 'char **'
    |   `-ImplicitCastExpr 0x11f9446f8 <col:21> 'char *' <LValueToRValue>
    |     `-DeclRefExpr 0x11f9446d8 <col:21> 'char *' lvalue Var 0x11f9284b8 'last' 'char *'
    `-ReturnStmt 0x11f944788 <line:21:5, col:12>
      `-RecoveryExpr 0x11f944768 <col:12> '<dependent type>' contains-errors lvalue
