`-FunctionDecl 0x1280267f8  line:1:12 invalid FNAME 'int (int)' static
  |-ParmVarDecl 0x1280266a8 <col:18> col:18 sync_page 'int'
  `-CompoundStmt 0x11f00f438 <line:2:1, line:57:1>
    |-DeclStmt 0x128026a48 <line:3:2, col:27>
    | |-VarDecl 0x1280268c0 <col:2, col:6> col:6 used i 'int'
    | |-VarDecl 0x128026940 <col:2, col:9> col:9 used offset 'int'
    | `-VarDecl 0x1280269c0 <col:2, col:17> col:17 used nr_present 'int'
    |-BinaryOperator 0x128026af8 <line:7:2, col:24> 'int' '='
    | |-DeclRefExpr 0x128026a78 <col:2> 'int' lvalue Var 0x128026940 'offset' 'int'
    | `-BinaryOperator 0x128026ad8 <col:11, col:24> 'int' '='
    |   |-DeclRefExpr 0x128026a98 <col:11> 'int' lvalue Var 0x1280269c0 'nr_present' 'int'
    |   `-IntegerLiteral 0x128026ab8 <col:24> 'int' 0
    |-CallExpr 0x128026e10 <line:10:2, col:24> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x128026c70 <col:2> 'int ()' Function 0x128026bb8 'BUG_ON' 'int ()'
    | `-CXXDependentScopeMemberExpr 0x128026dc8 <col:9, col:18> '<dependent type>' contains-errors lvalue .direct
    |   `-CXXDependentScopeMemberExpr 0x128026d80 <col:9, col:13> '<dependent type>' contains-errors lvalue ->role
    |     `-RecoveryExpr 0x128026d60 <col:9> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x128027100 <line:12:2, line:13:33>
    | |-BinaryOperator 0x128026eb0 <line:12:6, col:16> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x128026e90 <col:6> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x128026e50 <col:16> 'int' 32
    | `-BinaryOperator 0x1280270e0 <line:13:3, col:33> 'int' contains-errors '='
    |   |-DeclRefExpr 0x128026ed0 <col:3> 'int' lvalue Var 0x128026940 'offset' 'int'
    |   `-BinaryOperator 0x1280270c0 <col:12, col:33> '<dependent type>' contains-errors '<<'
    |     |-CXXDependentScopeMemberExpr 0x128027058 <col:12, col:21> '<dependent type>' contains-errors lvalue .quadrant
    |     | `-CXXDependentScopeMemberExpr 0x128027010 <col:12, col:16> '<dependent type>' contains-errors lvalue ->role
    |     |   `-RecoveryExpr 0x128026ff0 <col:12> '<dependent type>' contains-errors lvalue
    |     `-RecoveryExpr 0x1280270a0 <col:33> '<dependent type>' contains-errors lvalue
    |-ForStmt 0x11f00f3a0 <line:17:2, line:54:2>
    | |-BinaryOperator 0x128027320 <line:17:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x1280272e0 <col:7> 'int' lvalue Var 0x1280268c0 'i' 'int'
    | | `-IntegerLiteral 0x128027300 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x1280273b8 <col:14, col:18> 'int' contains-errors '<'
    | | |-DeclRefExpr 0x128027340 <col:14> 'int' lvalue Var 0x1280268c0 'i' 'int'
    | | `-RecoveryExpr 0x128027398 <col:18> '<dependent type>' contains-errors lvalue
    | |-UnaryOperator 0x1280273f8 <col:37, col:38> 'int' postfix '++'
    | | `-DeclRefExpr 0x1280273d8 <col:37> 'int' lvalue Var 0x1280268c0 'i' 'int'
    | `-CompoundStmt 0x11f00f368 <col:42, line:54:2>
    |   |-DeclStmt 0x128027490 <line:18:3, col:22>
    |   | `-VarDecl 0x128027428 <col:3, col:12> col:12 used pte_access 'unsigned int'
    |   |-IfStmt 0x11f00ea90 <line:23:3, line:24:4>
    |   | |-RecoveryExpr 0x11f00ea68 <line:23:7, col:40> '_Bool' contains-errors
    |   | `-ContinueStmt 0x11f00ea88 <line:24:4>
    |   |-IfStmt 0x11f00ed70 <line:34:3, line:37:3>
    |   | |-RecoveryExpr 0x11f00ed30 <line:34:7, col:63> '_Bool' contains-errors
    |   | `-CompoundStmt 0x11f00ed58 <col:66, line:37:3>
    |   |   `-ContinueStmt 0x11f00ed50 <line:36:4>
    |   |-IfStmt 0x11f00ef10 <line:39:3, line:44:3>
    |   | |-RecoveryExpr 0x11f00edb0 <line:39:7, col:24> '_Bool' contains-errors
    |   | `-CompoundStmt 0x11f00eef8 <col:27, line:44:3>
    |   |   `-ContinueStmt 0x11f00eef0 <line:43:4>
    |   `-UnaryOperator 0x11f00ef50 <line:46:3, col:13> 'int' postfix '++'
    |     `-DeclRefExpr 0x11f00ef30 <col:3> 'int' lvalue Var 0x1280269c0 'nr_present' 'int'
    `-ReturnStmt 0x11f00f428 <line:56:2, col:10>
      `-UnaryOperator 0x11f00f410 <col:9, col:10> 'int' prefix '!' cannot overflow
        `-ImplicitCastExpr 0x11f00f3f8 <col:10> 'int' <LValueToRValue>
          `-DeclRefExpr 0x11f00f3d8 <col:10> 'int' lvalue Var 0x1280269c0 'nr_present' 'int'
