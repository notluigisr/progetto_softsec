`-FunctionDecl 0x11f8e9688  line:1:19 invalid spl_filesystem_object_get_debug_info 'int *(int *, int *)' static
  |-ParmVarDecl 0x11f8e9528 <col:56, col:62> col:62 invalid obj 'int *'
  |-ParmVarDecl 0x11f8e95a8 <col:67, col:72> col:72 used is_temp 'int *'
  `-CompoundStmt 0x12800a460 <line:2:1, line:74:1>
    |-DeclStmt 0x11f8e98d0 <line:6:2, col:20>
    | |-VarDecl 0x11f8e97d0 <col:2, col:8> col:8 used pnstr 'char *'
    | `-VarDecl 0x11f8e9850 <col:2, col:16> col:16 used path 'char *'
    |-DeclStmt 0x11f8e9a00 <line:7:2, col:22>
    | |-VarDecl 0x11f8e9900 <col:2, col:7> col:7 used pnlen 'int'
    | `-VarDecl 0x11f8e9980 <col:2, col:14> col:14 used path_len 'int'
    |-DeclStmt 0x11f8e9b28 <line:8:2, col:14>
    | `-VarDecl 0x11f8e9ac0 <col:2, col:13> col:7 used stmp 'char[2]'
    |-BinaryOperator 0x11f8e9bb0 <line:10:2, col:13> 'int' '='
    | |-UnaryOperator 0x11f8e9b78 <col:2, col:3> 'int' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x11f8e9b60 <col:3> 'int *' <LValueToRValue>
    | |   `-DeclRefExpr 0x11f8e9b40 <col:3> 'int *' lvalue ParmVar 0x11f8e95a8 'is_temp' 'int *'
    | `-IntegerLiteral 0x11f8e9b90 <col:13> 'int' 1
    |-IfStmt 0x11e040e80 <line:12:2, line:14:2>
    | |-UnaryOperator 0x11e040b88 <line:12:6, col:19> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x11e040b70 <col:7, col:19> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-CXXDependentScopeMemberExpr 0x11e040b28 <col:7, col:19> '<dependent type>' contains-errors lvalue .properties
    | |     `-CXXDependentScopeMemberExpr 0x11e040ae0 <col:7, col:15> '<dependent type>' contains-errors lvalue ->std
    | |       `-RecoveryExpr 0x11e040ac0 <col:7> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x11e040e68 <col:31, line:14:2>
    |   `-CallExpr 0x11e040e40 <line:13:3, col:41> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x11e040d00 <col:3> 'int ()' Function 0x11e040c48 'rebuild_object_properties' 'int ()'
    |     `-UnaryOperator 0x11e040e28 <col:29, col:38> '<dependent type>' contains-errors prefix '&' cannot overflow
    |       `-CXXDependentScopeMemberExpr 0x11e040de0 <col:30, col:38> '<dependent type>' contains-errors lvalue ->std
    |         `-RecoveryExpr 0x11e040dc0 <col:30> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x11e041000 <line:16:2, col:20> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x11e040f80 <col:2> 'int ()' Function 0x11e040ec8 'ALLOC_HASHTABLE' 'int ()'
    | `-RecoveryExpr 0x11e040fe0 <col:18> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x11e0414c0 <line:17:2, col:81> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x11e041108 <col:2> 'int ()' Function 0x11e041050 'ZEND_INIT_SYMTABLE_EX' 'int ()'
    | |-RecoveryExpr 0x11e0413a8 <col:24> '<dependent type>' contains-errors lvalue
    | |-BinaryOperator 0x11e0414a0 <col:28, col:77> '<dependent type>' contains-errors '+'
    | | |-CallExpr 0x11e041478 <col:28, col:73> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x11e041220 <col:28> 'int ()' Function 0x11e041168 'zend_hash_num_elements' 'int ()'
    | | | `-CXXDependentScopeMemberExpr 0x11e041430 <col:51, col:63> '<dependent type>' contains-errors lvalue .properties
    | | |   `-CXXDependentScopeMemberExpr 0x11e0413e8 <col:51, col:59> '<dependent type>' contains-errors lvalue ->std
    | | |     `-RecoveryExpr 0x11e0413c8 <col:51> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x11e041310 <col:77> 'int' 3
    | `-IntegerLiteral 0x11e041350 <col:80> 'int' 0
    |-CallExpr 0x128008c98 <line:27:2, col:13> 'int'
    | |-ImplicitCastExpr 0x128008c80 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x128008c10 <col:2> 'int ()' Function 0x128008b58 'efree' 'int ()'
    | `-ImplicitCastExpr 0x128008cc0 <col:8> 'char *' <LValueToRValue>
    |   `-DeclRefExpr 0x128008c30 <col:8> 'char *' lvalue Var 0x11f8e97d0 'pnstr' 'char *'
    |-IfStmt 0x1280092d8 <line:29:2, line:39:2>
    | |-RecoveryExpr 0x128008cd8 <line:29:6, col:14> '_Bool' contains-errors
    | `-CompoundStmt 0x1280092b8 <col:25, line:39:2>
    |   |-IfStmt 0x1280091f0 <line:33:3, line:37:3> has_else
    |   | |-RecoveryExpr 0x128008f28 <line:33:7, col:38> '_Bool' contains-errors
    |   | |-CompoundStmt 0x1280090f8 <col:53, line:35:3>
    |   | `-CompoundStmt 0x1280091e0 <col:10, line:37:3>
    |   `-CallExpr 0x128009278 <line:38:3, col:14> 'int'
    |     |-ImplicitCastExpr 0x128009260 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x128009220 <col:3> 'int ()' Function 0x128008b58 'efree' 'int ()'
    |     `-ImplicitCastExpr 0x1280092a0 <col:9> 'char *' <LValueToRValue>
    |       `-DeclRefExpr 0x128009240 <col:9> 'char *' lvalue Var 0x11f8e97d0 'pnstr' 'char *'
    |-IfStmt 0x128009720 <line:40:2, line:57:2>
    | |-RecoveryExpr 0x1280092f8 <line:40:6, col:22> '_Bool' contains-errors
    | `-CompoundStmt 0x128009700 <col:34, line:57:2>
    |   |-IfStmt 0x128009638 <line:51:3, line:55:3> has_else
    |   | |-RecoveryExpr 0x1280093d0 <line:51:7, col:21> '_Bool' contains-errors
    |   | |-CompoundStmt 0x1280094c8 <col:31, line:53:3>
    |   | `-CompoundStmt 0x128009628 <col:10, line:55:3>
    |   `-CallExpr 0x1280096c0 <line:56:3, col:14> 'int'
    |     |-ImplicitCastExpr 0x1280096a8 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x128009668 <col:3> 'int ()' Function 0x128008b58 'efree' 'int ()'
    |     `-ImplicitCastExpr 0x1280096e8 <col:9> 'char *' <LValueToRValue>
    |       `-DeclRefExpr 0x128009688 <col:9> 'char *' lvalue Var 0x11f8e97d0 'pnstr' 'char *'
    `-IfStmt 0x12800a440 <line:58:2, line:71:2>
      |-RecoveryExpr 0x128009740 <line:58:6, col:22> '_Bool' contains-errors
      `-CompoundStmt 0x12800a410 <col:35, line:71:2>
        |-CallExpr 0x128009d48 <line:61:3, col:14> 'int'
        | |-ImplicitCastExpr 0x128009d30 <col:3> 'int (*)()' <FunctionToPointerDecay>
        | | `-DeclRefExpr 0x128009cf0 <col:3> 'int ()' Function 0x128008b58 'efree' 'int ()'
        | `-ImplicitCastExpr 0x128009d70 <col:9> 'char *' <LValueToRValue>
        |   `-DeclRefExpr 0x128009d10 <col:9> 'char *' lvalue Var 0x11f8e97d0 'pnstr' 'char *'
        |-BinaryOperator 0x128009e30 <line:62:3, col:13> 'char' '='
        | |-ArraySubscriptExpr 0x128009de0 <col:3, col:9> 'char' lvalue
        | | |-ImplicitCastExpr 0x128009dc8 <col:3> 'char *' <ArrayToPointerDecay>
        | | | `-DeclRefExpr 0x128009d88 <col:3> 'char[2]' lvalue Var 0x11f8e9ac0 'stmp' 'char[2]'
        | | `-IntegerLiteral 0x128009da8 <col:8> 'int' 1
        | `-ImplicitCastExpr 0x128009e18 <col:13> 'char' <IntegralCast>
        |   `-CharacterLiteral 0x128009e00 <col:13> 'int' 0
        |-CallExpr 0x12800a0f0 <line:66:3, col:14> 'int'
        | |-ImplicitCastExpr 0x12800a0d8 <col:3> 'int (*)()' <FunctionToPointerDecay>
        | | `-DeclRefExpr 0x12800a098 <col:3> 'int ()' Function 0x128008b58 'efree' 'int ()'
        | `-ImplicitCastExpr 0x12800a118 <col:9> 'char *' <LValueToRValue>
        |   `-DeclRefExpr 0x12800a0b8 <col:9> 'char *' lvalue Var 0x11f8e97d0 'pnstr' 'char *'
        `-CallExpr 0x12800a3d0 <line:70:3, col:14> 'int'
          |-ImplicitCastExpr 0x12800a3b8 <col:3> 'int (*)()' <FunctionToPointerDecay>
          | `-DeclRefExpr 0x12800a378 <col:3> 'int ()' Function 0x128008b58 'efree' 'int ()'
          `-ImplicitCastExpr 0x12800a3f8 <col:9> 'char *' <LValueToRValue>
            `-DeclRefExpr 0x12800a398 <col:9> 'char *' lvalue Var 0x11f8e97d0 'pnstr' 'char *'
