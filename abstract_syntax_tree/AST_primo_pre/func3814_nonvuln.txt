`-FunctionDecl 0x1549281f0  line:1:13 invalid parlist 'void (int *)' static
  |-ParmVarDecl 0x154928128 <col:22, col:32> col:32 invalid ls 'int *'
  `-CompoundStmt 0x1549427c0 <col:36, line:29:1>
    |-DeclStmt 0x154928438 <line:5:3, col:18>
    | `-VarDecl 0x1549283b0 <col:3, col:17> col:7 used nparams 'int' cinit
    |   `-IntegerLiteral 0x154928418 <col:17> 'int' 0
    |-DeclStmt 0x1549284f0 <line:6:3, col:19>
    | `-VarDecl 0x154928468 <col:3, col:18> col:7 used isvararg 'int' cinit
    |   `-IntegerLiteral 0x1549284d0 <col:18> 'int' 0
    |-IfStmt 0x1549420f0 <line:7:3, line:23:3>
    | |-BinaryOperator 0x1549285d0 <line:7:7, col:22> 'int' contains-errors '!='
    | | |-CXXDependentScopeMemberExpr 0x154928570 <col:7, col:13> '<dependent type>' contains-errors lvalue .token
    | | | `-CXXDependentScopeMemberExpr 0x154928528 <col:7, col:11> '<dependent type>' contains-errors lvalue ->t
    | | |   `-RecoveryExpr 0x154928508 <col:7> '<dependent type>' contains-errors lvalue
    | | `-CharacterLiteral 0x1549285b8 <col:22> 'int' 41
    | `-CompoundStmt 0x1549420d8 <col:27, line:23:3>
    |   `-DoStmt 0x1549420b8 <line:8:5, line:22:44>
    |     |-CompoundStmt 0x154941ec8 <line:8:8, line:22:5>
    |     | `-SwitchStmt 0x1549286b8 <line:9:7, line:21:7>
    |     |   |-ImplicitCastExpr 0x1549286a0 <line:9:15, col:21> '<dependent type>' contains-errors <LValueToRValue>
    |     |   | `-CXXDependentScopeMemberExpr 0x154928658 <col:15, col:21> '<dependent type>' contains-errors lvalue .token
    |     |   |   `-CXXDependentScopeMemberExpr 0x154928610 <col:15, col:19> '<dependent type>' contains-errors lvalue ->t
    |     |   |     `-RecoveryExpr 0x1549285f0 <col:15> '<dependent type>' contains-errors lvalue
    |     |   `-CompoundStmt 0x154941ea0 <col:28, line:21:7>
    |     |     |-CompoundStmt 0x154941ab0 <line:10:23, line:14:9>
    |     |     | |-CallExpr 0x154941a40 <line:11:11, col:45> '<dependent type>' contains-errors
    |     |     | | |-DeclRefExpr 0x1549418b8 <col:11> 'int ()' Function 0x154941800 'new_localvar' 'int ()'
    |     |     | | |-RecoveryExpr 0x1549418d8 <col:24> '<dependent type>' contains-errors lvalue
    |     |     | | `-CallExpr 0x154941a18 <col:28, col:44> '<dependent type>' contains-errors
    |     |     | |   |-DeclRefExpr 0x1549419d8 <col:28> 'int ()' Function 0x154941920 'str_checkname' 'int ()'
    |     |     | |   `-RecoveryExpr 0x1549419f8 <col:42> '<dependent type>' contains-errors lvalue
    |     |     | |-UnaryOperator 0x154941a90 <line:12:11, col:18> 'int' postfix '++'
    |     |     | | `-DeclRefExpr 0x154941a70 <col:11> 'int' lvalue Var 0x1549283b0 'nparams' 'int'
    |     |     | `-BreakStmt 0x154941aa8 <line:13:11>
    |     |     |-CompoundStmt 0x154941ca0 <line:15:23, line:19:9>
    |     |     | |-CallExpr 0x154941c10 <line:16:11, col:23> '<dependent type>' contains-errors
    |     |     | | |-DeclRefExpr 0x154941bd0 <col:11> 'int ()' Function 0x154941b18 'luaX_next' 'int ()'
    |     |     | | `-RecoveryExpr 0x154941bf0 <col:21> '<dependent type>' contains-errors lvalue
    |     |     | |-BinaryOperator 0x154941c78 <line:17:11, col:22> 'int' '='
    |     |     | | |-DeclRefExpr 0x154941c38 <col:11> 'int' lvalue Var 0x154928468 'isvararg' 'int'
    |     |     | | `-IntegerLiteral 0x154941c58 <col:22> 'int' 1
    |     |     | `-BreakStmt 0x154941c98 <line:18:11>
    |     |     `-DefaultStmt 0x154941e80 <line:20:9, col:44>
    |     |       `-CallExpr 0x154941e50 <col:18, col:44> '<dependent type>' contains-errors
    |     |         |-DeclRefExpr 0x154941da8 <col:18> 'int ()' Function 0x154941cf0 'luaX_syntaxerror' 'int ()'
    |     |         |-RecoveryExpr 0x154941dc8 <col:35> '<dependent type>' contains-errors lvalue
    |     |         `-StringLiteral 0x154941e30 <col:39> 'char[4]' lvalue "STR"
    |     `-BinaryOperator 0x154942098 <line:22:14, col:43> 'int' contains-errors '&&'
    |       |-UnaryOperator 0x154941f18 <col:14, col:15> 'int' prefix '!' cannot overflow
    |       | `-ImplicitCastExpr 0x154941f00 <col:15> 'int' <LValueToRValue>
    |       |   `-DeclRefExpr 0x154941ee0 <col:15> 'int' lvalue Var 0x154928468 'isvararg' 'int'
    |       `-CallExpr 0x154942068 <col:27, col:43> '<dependent type>' contains-errors
    |         |-DeclRefExpr 0x154942010 <col:27> 'int ()' Function 0x154941f58 'testnext' 'int ()'
    |         |-RecoveryExpr 0x154942030 <col:36> '<dependent type>' contains-errors lvalue
    |         `-CharacterLiteral 0x154942050 <col:40> 'int' 44
    |-CallExpr 0x154942250 <line:24:3, col:30> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x1549421f0 <col:3> 'int ()' Function 0x154942138 'adjustlocalvars' 'int ()'
    | |-RecoveryExpr 0x154942210 <col:19> '<dependent type>' contains-errors lvalue
    | `-DeclRefExpr 0x154942230 <col:23> 'int' lvalue Var 0x1549283b0 'nparams' 'int'
    `-IfStmt 0x1549426a0 <line:26:3, line:27:31>
      |-ImplicitCastExpr 0x154942428 <line:26:7> 'int' <LValueToRValue>
      | `-DeclRefExpr 0x154942408 <col:7> 'int' lvalue Var 0x154928468 'isvararg' 'int'
      `-CallExpr 0x154942670 <line:27:5, col:31> '<dependent type>' contains-errors
        |-DeclRefExpr 0x154942520 <col:5> 'int ()' Function 0x154942468 'setvararg' 'int ()'
        |-RecoveryExpr 0x1549425e8 <col:15> '<dependent type>' contains-errors lvalue
        `-CXXDependentScopeMemberExpr 0x154942628 <col:19, col:22> '<dependent type>' contains-errors lvalue ->numparams
          `-RecoveryExpr 0x154942608 <col:19> '<dependent type>' contains-errors lvalue
