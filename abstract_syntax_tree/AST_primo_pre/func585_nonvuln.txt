`-FunctionDecl 0x136128500  line:1:13 ConvertRGBToProPhoto 'void (const double, const double, const double, double *, double *, double *)' static
  |-ParmVarDecl 0x1361280d8 <col:34, col:47> col:47 used red 'const double'
  |-ParmVarDecl 0x136128158 <col:51, col:64> col:64 used green 'const double'
  |-ParmVarDecl 0x1361281d8 <line:2:3, col:16> col:16 used blue 'const double'
  |-ParmVarDecl 0x136128288 <col:21, col:29> col:29 used r 'double *'
  |-ParmVarDecl 0x136128308 <col:31, col:39> col:39 used g 'double *'
  |-ParmVarDecl 0x136128388 <col:41, col:49> col:49 used b 'double *'
  `-CompoundStmt 0x136141dd8 <line:3:1, line:11:1>
    |-DeclStmt 0x1361287c0 <line:4:3, line:7:6>
    | |-VarDecl 0x136128638 <line:4:3, line:5:5> col:5 used X 'double'
    | |-VarDecl 0x1361286b8 <line:4:3, line:6:5> col:5 used Y 'double'
    | `-VarDecl 0x136128738 <line:4:3, line:7:5> col:5 used Z 'double'
    |-CallExpr 0x136141a88 <line:9:3, col:42> 'int'
    | |-ImplicitCastExpr 0x136141a70 <col:3> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x136141910 <col:3> 'int ()' Function 0x136141858 'ConvertRGBToXYZ' 'int ()'
    | |-ImplicitCastExpr 0x136141ad8 <col:19> 'double' <LValueToRValue>
    | | `-DeclRefExpr 0x136141930 <col:19> 'const double' lvalue ParmVar 0x1361280d8 'red' 'const double'
    | |-ImplicitCastExpr 0x136141af0 <col:23> 'double' <LValueToRValue>
    | | `-DeclRefExpr 0x136141950 <col:23> 'const double' lvalue ParmVar 0x136128158 'green' 'const double'
    | |-ImplicitCastExpr 0x136141b08 <col:29> 'double' <LValueToRValue>
    | | `-DeclRefExpr 0x136141970 <col:29> 'const double' lvalue ParmVar 0x1361281d8 'blue' 'const double'
    | |-UnaryOperator 0x1361419b0 <col:34, col:35> 'double *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x136141990 <col:35> 'double' lvalue Var 0x136128638 'X' 'double'
    | |-UnaryOperator 0x1361419e8 <col:37, col:38> 'double *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x1361419c8 <col:38> 'double' lvalue Var 0x1361286b8 'Y' 'double'
    | `-UnaryOperator 0x136141a20 <col:40, col:41> 'double *' prefix '&' cannot overflow
    |   `-DeclRefExpr 0x136141a00 <col:41> 'double' lvalue Var 0x136128738 'Z' 'double'
    `-CallExpr 0x136141cf8 <line:10:3, col:35> 'int'
      |-ImplicitCastExpr 0x136141ce0 <col:3> 'int (*)()' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x136141c00 <col:3> 'int ()' Function 0x136141b48 'ConvertXYZToProPhoto' 'int ()'
      |-ImplicitCastExpr 0x136141d48 <col:24> 'double' <LValueToRValue>
      | `-DeclRefExpr 0x136141c20 <col:24> 'double' lvalue Var 0x136128638 'X' 'double'
      |-ImplicitCastExpr 0x136141d60 <col:26> 'double' <LValueToRValue>
      | `-DeclRefExpr 0x136141c40 <col:26> 'double' lvalue Var 0x1361286b8 'Y' 'double'
      |-ImplicitCastExpr 0x136141d78 <col:28> 'double' <LValueToRValue>
      | `-DeclRefExpr 0x136141c60 <col:28> 'double' lvalue Var 0x136128738 'Z' 'double'
      |-ImplicitCastExpr 0x136141d90 <col:30> 'double *' <LValueToRValue>
      | `-DeclRefExpr 0x136141c80 <col:30> 'double *' lvalue ParmVar 0x136128288 'r' 'double *'
      |-ImplicitCastExpr 0x136141da8 <col:32> 'double *' <LValueToRValue>
      | `-DeclRefExpr 0x136141ca0 <col:32> 'double *' lvalue ParmVar 0x136128308 'g' 'double *'
      `-ImplicitCastExpr 0x136141dc0 <col:34> 'double *' <LValueToRValue>
        `-DeclRefExpr 0x136141cc0 <col:34> 'double *' lvalue ParmVar 0x136128388 'b' 'double *'
