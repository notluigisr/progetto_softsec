`-FunctionDecl 0x1490fae38  line:1:5 invalid vnc_hextile_send_framebuffer_update 'int (int *, int, int, int, int)'
  |-ParmVarDecl 0x1490fab28 <col:41, col:51> col:51 referenced invalid vs 'int *'
  |-ParmVarDecl 0x1490faba8 <col:55, col:59> col:59 used x 'int'
  |-ParmVarDecl 0x1490fac28 <line:2:41, col:45> col:45 used y 'int'
  |-ParmVarDecl 0x1490faca8 <col:48, col:52> col:52 used w 'int'
  |-ParmVarDecl 0x1490fad28 <col:55, col:59> col:59 used h 'int'
  `-CompoundStmt 0x149115498 <line:3:1, line:23:1>
    |-DeclStmt 0x1490fb020 <line:4:5, col:13>
    | |-VarDecl 0x1490faf20 <col:5, col:9> col:9 used i 'int'
    | `-VarDecl 0x1490fafa0 <col:5, col:12> col:12 used j 'int'
    |-DeclStmt 0x1490fb150 <line:5:5, col:23>
    | |-VarDecl 0x1490fb050 <col:5, col:9> col:9 used has_fg 'int'
    | `-VarDecl 0x1490fb0d0 <col:5, col:17> col:17 used has_bg 'int'
    |-BinaryOperator 0x1491143e0 <line:11:5, col:23> 'int' '='
    | |-DeclRefExpr 0x149114360 <col:5> 'int' lvalue Var 0x1490fb050 'has_fg' 'int'
    | `-BinaryOperator 0x1491143c0 <col:14, col:23> 'int' '='
    |   |-DeclRefExpr 0x149114380 <col:14> 'int' lvalue Var 0x1490fb0d0 'has_bg' 'int'
    |   `-IntegerLiteral 0x1491143a0 <col:23> 'int' 0
    |-ForStmt 0x149115140 <line:12:5, line:18:5>
    | |-BinaryOperator 0x149114458 <line:12:10, col:14> 'int' '='
    | | |-DeclRefExpr 0x149114400 <col:10> 'int' lvalue Var 0x1490fafa0 'j' 'int'
    | | `-ImplicitCastExpr 0x149114440 <col:14> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x149114420 <col:14> 'int' lvalue ParmVar 0x1490fac28 'y' 'int'
    | |-<<<NULL>>>
    | |-BinaryOperator 0x149114560 <col:17, col:27> 'int' '<'
    | | |-ImplicitCastExpr 0x149114548 <col:17> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x149114478 <col:17> 'int' lvalue Var 0x1490fafa0 'j' 'int'
    | | `-ParenExpr 0x149114528 <col:21, col:27> 'int'
    | |   `-BinaryOperator 0x149114508 <col:22, col:26> 'int' '+'
    | |     |-ImplicitCastExpr 0x1491144d8 <col:22> 'int' <LValueToRValue>
    | |     | `-DeclRefExpr 0x149114498 <col:22> 'int' lvalue ParmVar 0x1490fac28 'y' 'int'
    | |     `-ImplicitCastExpr 0x1491144f0 <col:26> 'int' <LValueToRValue>
    | |       `-DeclRefExpr 0x1491144b8 <col:26> 'int' lvalue ParmVar 0x1490fad28 'h' 'int'
    | |-CompoundAssignOperator 0x1491145c0 <col:30, col:35> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    | | |-DeclRefExpr 0x149114580 <col:30> 'int' lvalue Var 0x1490fafa0 'j' 'int'
    | | `-IntegerLiteral 0x1491145a0 <col:35> 'int' 16
    | `-CompoundStmt 0x149115128 <col:39, line:18:5>
    |   `-ForStmt 0x1491150f0 <line:13:9, line:17:9>
    |     |-BinaryOperator 0x149114648 <line:13:14, col:18> 'int' '='
    |     | |-DeclRefExpr 0x1491145f0 <col:14> 'int' lvalue Var 0x1490faf20 'i' 'int'
    |     | `-ImplicitCastExpr 0x149114630 <col:18> 'int' <LValueToRValue>
    |     |   `-DeclRefExpr 0x149114610 <col:18> 'int' lvalue ParmVar 0x1490faba8 'x' 'int'
    |     |-<<<NULL>>>
    |     |-BinaryOperator 0x149114750 <col:21, col:31> 'int' '<'
    |     | |-ImplicitCastExpr 0x149114738 <col:21> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x149114668 <col:21> 'int' lvalue Var 0x1490faf20 'i' 'int'
    |     | `-ParenExpr 0x149114718 <col:25, col:31> 'int'
    |     |   `-BinaryOperator 0x1491146f8 <col:26, col:30> 'int' '+'
    |     |     |-ImplicitCastExpr 0x1491146c8 <col:26> 'int' <LValueToRValue>
    |     |     | `-DeclRefExpr 0x149114688 <col:26> 'int' lvalue ParmVar 0x1490faba8 'x' 'int'
    |     |     `-ImplicitCastExpr 0x1491146e0 <col:30> 'int' <LValueToRValue>
    |     |       `-DeclRefExpr 0x1491146a8 <col:30> 'int' lvalue ParmVar 0x1490faca8 'w' 'int'
    |     |-CompoundAssignOperator 0x1491147b0 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |     | |-DeclRefExpr 0x149114770 <col:34> 'int' lvalue Var 0x1490faf20 'i' 'int'
    |     | `-IntegerLiteral 0x149114790 <col:39> 'int' 16
    |     `-CompoundStmt 0x1491150d8 <col:43, line:17:9>
    |       `-CallExpr 0x149115070 <line:14:13, line:16:69> '<dependent type>' contains-errors
    |         |-CXXDependentScopeMemberExpr 0x149114870 <line:14:13, col:25> '<dependent type>' contains-errors lvalue .send_tile
    |         | `-CXXDependentScopeMemberExpr 0x149114828 <col:13, col:17> '<dependent type>' contains-errors lvalue ->hextile
    |         |   `-RecoveryExpr 0x149114800 <col:13> '<dependent type>' contains-errors lvalue
    |         |     `-DeclRefExpr 0x1491147e0 <col:13> 'int *' lvalue ParmVar 0x1490fab28 'vs' 'int *'
    |         |-RecoveryExpr 0x1491148b8 <col:35> '<dependent type>' contains-errors lvalue
    |         |-DeclRefExpr 0x1491148d8 <col:39> 'int' lvalue Var 0x1490faf20 'i' 'int'
    |         |-DeclRefExpr 0x1491148f8 <col:42> 'int' lvalue Var 0x1490fafa0 'j' 'int'
    |         |-CallExpr 0x149114f30 <line:15:35, col:52> 'int'
    |         | |-ImplicitCastExpr 0x149114f18 <col:35> 'int (*)()' <FunctionToPointerDecay>
    |         | | `-DeclRefExpr 0x149114a70 <col:35> 'int ()' Function 0x1491149b8 'MIN' 'int ()'
    |         | |-IntegerLiteral 0x149114a90 <col:39> 'int' 16
    |         | `-BinaryOperator 0x149114ef8 <col:43, col:51> 'int' '-'
    |         |   |-BinaryOperator 0x149114ec0 <col:43, col:47> 'int' '+'
    |         |   | |-ImplicitCastExpr 0x149114e90 <col:43> 'int' <LValueToRValue>
    |         |   | | `-DeclRefExpr 0x149114ab0 <col:43> 'int' lvalue ParmVar 0x1490faba8 'x' 'int'
    |         |   | `-ImplicitCastExpr 0x149114ea8 <col:47> 'int' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x149114ad0 <col:47> 'int' lvalue ParmVar 0x1490faca8 'w' 'int'
    |         |   `-ImplicitCastExpr 0x149114ee0 <col:51> 'int' <LValueToRValue>
    |         |     `-DeclRefExpr 0x149114b40 <col:51> 'int' lvalue Var 0x1490faf20 'i' 'int'
    |         |-CallExpr 0x149115000 <col:55, col:72> 'int'
    |         | |-ImplicitCastExpr 0x149114fe8 <col:55> 'int (*)()' <FunctionToPointerDecay>
    |         | | `-DeclRefExpr 0x149114c18 <col:55> 'int ()' Function 0x1491149b8 'MIN' 'int ()'
    |         | |-IntegerLiteral 0x149114c38 <col:59> 'int' 16
    |         | `-BinaryOperator 0x149114fc8 <col:63, col:71> 'int' '-'
    |         |   |-BinaryOperator 0x149114f90 <col:63, col:67> 'int' '+'
    |         |   | |-ImplicitCastExpr 0x149114f60 <col:63> 'int' <LValueToRValue>
    |         |   | | `-DeclRefExpr 0x149114c58 <col:63> 'int' lvalue ParmVar 0x1490fac28 'y' 'int'
    |         |   | `-ImplicitCastExpr 0x149114f78 <col:67> 'int' <LValueToRValue>
    |         |   |   `-DeclRefExpr 0x149114c78 <col:67> 'int' lvalue ParmVar 0x1490fad28 'h' 'int'
    |         |   `-ImplicitCastExpr 0x149114fb0 <col:71> 'int' <LValueToRValue>
    |         |     `-DeclRefExpr 0x149114ce8 <col:71> 'int' lvalue Var 0x1490fafa0 'j' 'int'
    |         |-DeclRefExpr 0x149115030 <line:16:35> 'int' lvalue Var 0x1490fb0d0 'has_bg' 'int'
    |         |-DeclRefExpr 0x149115050 <col:44> 'int' lvalue Var 0x1490fb050 'has_fg' 'int'
    |         |-UnaryOperator 0x149114dd8 <col:53, col:54> 'int *' prefix '&' cannot overflow
    |         | `-DeclRefExpr 0x149114db8 <col:54> 'int' lvalue Var 0x1490fb0d0 'has_bg' 'int'
    |         `-UnaryOperator 0x149114e10 <col:62, col:63> 'int *' prefix '&' cannot overflow
    |           `-DeclRefExpr 0x149114df0 <col:63> 'int' lvalue Var 0x1490fb050 'has_fg' 'int'
    |-CallExpr 0x149115350 <line:19:5, col:19> 'int'
    | |-ImplicitCastExpr 0x149115338 <col:5> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x1491152b8 <col:5> 'int ()' Function 0x149115200 'g_free' 'int ()'
    | `-ImplicitCastExpr 0x149115378 <col:12> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x149115318 <col:12> 'int' lvalue Var 0x1490fb050 'has_fg' 'int'
    |-CallExpr 0x149115428 <line:20:5, col:19> 'int'
    | |-ImplicitCastExpr 0x149115410 <col:5> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x149115390 <col:5> 'int ()' Function 0x149115200 'g_free' 'int ()'
    | `-ImplicitCastExpr 0x149115450 <col:12> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x1491153f0 <col:12> 'int' lvalue Var 0x1490fb0d0 'has_bg' 'int'
    `-ReturnStmt 0x149115488 <line:22:5, col:12>
      `-IntegerLiteral 0x149115468 <col:12> 'int' 1
