`-FunctionDecl 0x158129238  line:1:1 invalid dissect_kafka_update_metadata_request_partition 'int (int *, int *, int *, int, int)'
  |-ParmVarDecl 0x158128f28 <col:49, col:59> col:59 invalid tvb 'int *'
  |-ParmVarDecl 0x158128fa8 <col:64, col:77> col:77 invalid pinfo 'int *'
  |-ParmVarDecl 0x158129028 <col:84, col:96> col:96 invalid tree 'int *'
  |-ParmVarDecl 0x1581290a8 <line:2:55, col:59> col:59 used offset 'int'
  |-ParmVarDecl 0x158129128 <col:67, col:87> col:87 invalid api_version 'int'
  `-CompoundStmt 0x1581430b0 <line:3:1, line:74:1>
    |-DeclStmt 0x1581294e0 <line:6:5, col:31>
    | |-VarDecl 0x1581293e0 <col:5, col:9> col:9 used topic_start 'int'
    | `-VarDecl 0x158129460 <col:5, col:22> col:22 used topic_len 'int'
    |-IfStmt 0x150008870 <line:14:5, line:17:5>
    | |-BinaryOperator 0x1500084b8 <line:14:9, col:23> 'int' contains-errors '<'
    | | |-RecoveryExpr 0x150008478 <col:9> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x150008498 <col:23> 'int' 5
    | `-CompoundStmt 0x150008858 <col:26, line:17:5>
    |   `-BinaryOperator 0x150008838 <line:15:9, line:16:63> 'int' contains-errors '='
    |     |-DeclRefExpr 0x1500084d8 <line:15:9> 'int' lvalue ParmVar 0x1581290a8 'offset' 'int'
    |     `-CallExpr 0x1500087d8 <col:18, line:16:63> '<dependent type>' contains-errors
    |       |-DeclRefExpr 0x1500085d8 <line:15:18> 'int ()' Function 0x150008520 'dissect_kafka_string' 'int ()'
    |       |-RecoveryExpr 0x150008798 <col:39> '<dependent type>' contains-errors lvalue
    |       |-RecoveryExpr 0x1500087b8 <col:48> '<dependent type>' contains-errors lvalue
    |       |-RecoveryExpr 0x150008628 <col:69> '<dependent type>' contains-errors lvalue
    |       |-RecoveryExpr 0x150008648 <col:74> '<dependent type>' contains-errors lvalue
    |       |-DeclRefExpr 0x150008668 <col:81> 'int' lvalue ParmVar 0x1581290a8 'offset' 'int'
    |       |-IntegerLiteral 0x150008688 <col:89> 'int' 0
    |       |-UnaryOperator 0x1500086c8 <line:16:39, col:40> 'int *' prefix '&' cannot overflow
    |       | `-DeclRefExpr 0x1500086a8 <col:40> 'int' lvalue Var 0x1581293e0 'topic_start' 'int'
    |       `-UnaryOperator 0x150008700 <col:53, col:54> 'int *' prefix '&' cannot overflow
    |         `-DeclRefExpr 0x1500086e0 <col:54> 'int' lvalue Var 0x158129460 'topic_len' 'int'
    |-IfStmt 0x158142b08 <line:58:5, line:60:5>
    | |-BinaryOperator 0x158142938 <line:58:9, col:24> 'int' contains-errors '>='
    | | |-RecoveryExpr 0x1581428f8 <col:9> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x158142918 <col:24> 'int' 6
    | `-CompoundStmt 0x158142af8 <col:27, line:60:5>
    |-IfStmt 0x158143038 <line:64:5, line:72:5> has_else
    | |-BinaryOperator 0x158142bc8 <line:64:9, col:24> 'int' contains-errors '>='
    | | |-RecoveryExpr 0x158142b88 <col:9> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x158142ba8 <col:24> 'int' 5
    | |-CompoundStmt 0x158142d08 <col:27, line:67:5>
    | `-CompoundStmt 0x158143028 <col:12, line:72:5>
    `-ReturnStmt 0x1581430a0 <line:73:5, col:12>
      `-ImplicitCastExpr 0x158143088 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x158143068 <col:12> 'int' lvalue ParmVar 0x1581290a8 'offset' 'int'
