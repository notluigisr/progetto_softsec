`-FunctionDecl 0x12e928378  line:1:1 find_next_quote 'int (char *, int, int, char *)'
  |-ParmVarDecl 0x12e9280f0 <line:2:5, col:13> col:13 used line 'char *'
  |-ParmVarDecl 0x12e928170 <line:3:5, col:10> col:10 used col 'int'
  |-ParmVarDecl 0x12e9281f0 <line:4:5, col:10> col:10 used quotechar 'int'
  |-ParmVarDecl 0x12e928270 <line:5:5, col:13> col:13 used escape 'char *'
  `-CompoundStmt 0x12e942458 <line:6:1, line:24:1>
    |-DeclStmt 0x12e928508 <line:7:5, col:11>
    | `-VarDecl 0x12e9284a0 <col:5, col:10> col:10 used c 'int'
    |-ForStmt 0x12e9423d8 <line:9:5, line:22:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | `-CompoundStmt 0x12e9423b0 <line:10:5, line:22:5>
    |   |-BinaryOperator 0x12e928600 <line:11:2, col:14> 'int' '='
    |   | |-DeclRefExpr 0x12e928520 <col:2> 'int' lvalue Var 0x12e9284a0 'c' 'int'
    |   | `-ImplicitCastExpr 0x12e9285e8 <col:6, col:14> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x12e9285d0 <col:6, col:14> 'char' <LValueToRValue>
    |   |     `-ArraySubscriptExpr 0x12e9285b0 <col:6, col:14> 'char' lvalue
    |   |       |-ImplicitCastExpr 0x12e928580 <col:6> 'char *' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x12e928540 <col:6> 'char *' lvalue ParmVar 0x12e9280f0 'line' 'char *'
    |   |       `-ImplicitCastExpr 0x12e928598 <col:11> 'int' <LValueToRValue>
    |   |         `-DeclRefExpr 0x12e928560 <col:11> 'int' lvalue ParmVar 0x12e928170 'col' 'int'
    |   |-IfStmt 0x12e9421e0 <line:12:2, line:17:6> has_else
    |   | |-BinaryOperator 0x12e928698 <line:12:6, col:11> 'int' contains-errors '=='
    |   | | |-DeclRefExpr 0x12e928620 <col:6> 'int' lvalue Var 0x12e9284a0 'c' 'int'
    |   | | `-RecoveryExpr 0x12e928678 <col:11> '<dependent type>' contains-errors lvalue
    |   | |-ReturnStmt 0x12e9286f0 <line:13:6, col:14>
    |   | | `-UnaryOperator 0x12e9286d8 <col:13, col:14> 'int' prefix '-'
    |   | |   `-IntegerLiteral 0x12e9286b8 <col:14> 'int' 1
    |   | `-IfStmt 0x12e9421b0 <line:14:7, line:17:6> has_else
    |   |   |-BinaryOperator 0x12e9420a0 <line:14:11, col:49> 'int' contains-errors '&&'
    |   |   | |-BinaryOperator 0x12e942008 <col:11, col:21> 'int' contains-errors '!='
    |   |   | | |-DeclRefExpr 0x12e928700 <col:11> 'char *' lvalue ParmVar 0x12e928270 'escape' 'char *'
    |   |   | | `-RecoveryExpr 0x12e941fe8 <col:21> '<dependent type>' contains-errors lvalue
    |   |   | `-CallExpr 0x12e942040 <col:29, col:49> 'int'
    |   |   |   |-ImplicitCastExpr 0x12e942028 <col:29> 'int (*)()' <FunctionToPointerDecay>
    |   |   |   | `-DeclRefExpr 0x12e941eb8 <col:29> 'int ()' Function 0x12e941e00 'vim_strchr' 'int ()'
    |   |   |   |-ImplicitCastExpr 0x12e942070 <col:40> 'char *' <LValueToRValue>
    |   |   |   | `-DeclRefExpr 0x12e941ed8 <col:40> 'char *' lvalue ParmVar 0x12e928270 'escape' 'char *'
    |   |   |   `-ImplicitCastExpr 0x12e942088 <col:48> 'int' <LValueToRValue>
    |   |   |     `-DeclRefExpr 0x12e941ef8 <col:48> 'int' lvalue Var 0x12e9284a0 'c' 'int'
    |   |   |-UnaryOperator 0x12e9420e0 <line:15:6, col:8> 'int' prefix '++'
    |   |   | `-DeclRefExpr 0x12e9420c0 <col:8> 'int' lvalue ParmVar 0x12e928170 'col' 'int'
    |   |   `-IfStmt 0x12e942190 <line:16:7, line:17:6>
    |   |     |-BinaryOperator 0x12e942168 <line:16:11, col:16> 'int' '=='
    |   |     | |-ImplicitCastExpr 0x12e942138 <col:11> 'int' <LValueToRValue>
    |   |     | | `-DeclRefExpr 0x12e9420f8 <col:11> 'int' lvalue Var 0x12e9284a0 'c' 'int'
    |   |     | `-ImplicitCastExpr 0x12e942150 <col:16> 'int' <LValueToRValue>
    |   |     |   `-DeclRefExpr 0x12e942118 <col:16> 'int' lvalue ParmVar 0x12e9281f0 'quotechar' 'int'
    |   |     `-BreakStmt 0x12e942188 <line:17:6>
    |   `-IfStmt 0x12e942380 <line:18:2, line:21:8> has_else
    |     |-RecoveryExpr 0x12e942228 <line:18:6> '<dependent type>' contains-errors lvalue
    |     |-NullStmt 0x12e942378 <line:19:6>
    |     `-UnaryOperator 0x12e942360 <line:21:6, col:8> 'int' prefix '++'
    |       `-DeclRefExpr 0x12e942340 <col:8> 'int' lvalue ParmVar 0x12e928170 'col' 'int'
    `-ReturnStmt 0x12e942448 <line:23:5, col:12>
      `-ImplicitCastExpr 0x12e942430 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x12e942410 <col:12> 'int' lvalue ParmVar 0x12e928170 'col' 'int'
