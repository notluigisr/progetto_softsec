`-FunctionDecl 0x14f83cdf8  line:1:12 invalid FVSelCount 'int (int *)' static
  |-ParmVarDecl 0x14f83cd28 <col:23, col:33> col:33 invalid fv 'int *'
  `-CompoundStmt 0x14f8569d0 <col:37, line:15:1>
    |-DeclStmt 0x14f83cfe0 <line:2:5, col:17>
    | |-VarDecl 0x14f83cec0 <col:5, col:9> col:9 used i 'int'
    | `-VarDecl 0x14f83cf40 <col:5, col:16> col:12 used cnt 'int' cinit
    |   `-IntegerLiteral 0x14f83cfa8 <col:16> 'int' 0
    |-ForStmt 0x14f83d340 <line:4:5, line:5:29>
    | |-BinaryOperator 0x14f83d038 <line:4:11, col:13> 'int' '='
    | | |-DeclRefExpr 0x14f83cff8 <col:11> 'int' lvalue Var 0x14f83cec0 'i' 'int'
    | | `-IntegerLiteral 0x14f83d018 <col:13> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x14f83d170 <col:16, col:29> 'int' contains-errors '<'
    | | |-DeclRefExpr 0x14f83d058 <col:16> 'int' lvalue Var 0x14f83cec0 'i' 'int'
    | | `-CXXDependentScopeMemberExpr 0x14f83d128 <col:18, col:29> '<dependent type>' contains-errors lvalue ->enccount
    | |   `-CXXDependentScopeMemberExpr 0x14f83d0e0 <col:18, col:24> '<dependent type>' contains-errors lvalue .map
    | |     `-CXXDependentScopeMemberExpr 0x14f83d098 <col:18, col:22> '<dependent type>' contains-errors lvalue ->b
    | |       `-RecoveryExpr 0x14f83d078 <col:18> '<dependent type>' contains-errors lvalue
    | |-UnaryOperator 0x14f83d1b0 <col:39, col:41> 'int' prefix '++'
    | | `-DeclRefExpr 0x14f83d190 <col:41> 'int' lvalue Var 0x14f83cec0 'i' 'int'
    | `-IfStmt 0x14f83d320 <line:5:2, col:29>
    |   |-ArraySubscriptExpr 0x14f83d2c8 <col:7, col:23> '<dependent type>' contains-errors lvalue
    |   | |-ImplicitCastExpr 0x14f83d298 <col:7, col:13> '<dependent type>' contains-errors <LValueToRValue>
    |   | | `-CXXDependentScopeMemberExpr 0x14f83d230 <col:7, col:13> '<dependent type>' contains-errors lvalue .selected
    |   | |   `-CXXDependentScopeMemberExpr 0x14f83d1e8 <col:7, col:11> '<dependent type>' contains-errors lvalue ->b
    |   | |     `-RecoveryExpr 0x14f83d1c8 <col:7> '<dependent type>' contains-errors lvalue
    |   | `-ImplicitCastExpr 0x14f83d2b0 <col:22> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x14f83d278 <col:22> 'int' lvalue Var 0x14f83cec0 'i' 'int'
    |   `-UnaryOperator 0x14f83d308 <col:27, col:29> 'int' prefix '++'
    |     `-DeclRefExpr 0x14f83d2e8 <col:29> 'int' lvalue Var 0x14f83cf40 'cnt' 'int'
    `-IfStmt 0x14f856998 <line:6:5, line:13:5>
      |-BinaryOperator 0x14f83d3d0 <line:6:10, col:14> 'int' '>'
      | |-ImplicitCastExpr 0x14f83d3b8 <col:10> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x14f83d378 <col:10> 'int' lvalue Var 0x14f83cf40 'cnt' 'int'
      | `-IntegerLiteral 0x14f83d398 <col:14> 'int' 10
      `-CompoundStmt 0x14f856968 <col:19, line:13:5>
        |-DeclStmt 0x14f855d10 <line:7:2, col:15>
        | `-VarDecl 0x14f855ca8 <col:2, col:14> col:8 used buts 'char *[3]'
        |-BinaryOperator 0x14f856470 <line:8:2, col:19> 'char *' '='
        | |-ArraySubscriptExpr 0x14f855db8 <col:2, col:8> 'char *' lvalue
        | | |-ImplicitCastExpr 0x14f855da0 <col:2> 'char **' <ArrayToPointerDecay>
        | | | `-DeclRefExpr 0x14f855d28 <col:2> 'char *[3]' lvalue Var 0x14f855ca8 'buts' 'char *[3]'
        | | `-IntegerLiteral 0x14f855d48 <col:7> 'int' 0
        | `-ImplicitCastExpr 0x14f856038 <col:12, col:19> 'char *' <IntegralToPointer>
        |   `-CallExpr 0x14f855ff8 <col:12, col:19> 'int'
        |     |-ImplicitCastExpr 0x14f855fe0 <col:12> 'int (*)()' <FunctionToPointerDecay>
        |     | `-DeclRefExpr 0x14f855f30 <col:12> 'int ()' Function 0x14f855e78 '_' 'int ()'
        |     `-ImplicitCastExpr 0x14f856020 <col:14> 'char *' <ArrayToPointerDecay>
        |       `-StringLiteral 0x14f855f90 <col:14> 'char[4]' lvalue "STR"
        |-BinaryOperator 0x14f8565b8 <line:9:2, col:19> 'char *' '='
        | |-ArraySubscriptExpr 0x14f8564e8 <col:2, col:8> 'char *' lvalue
        | | |-ImplicitCastExpr 0x14f8564d0 <col:2> 'char **' <ArrayToPointerDecay>
        | | | `-DeclRefExpr 0x14f856490 <col:2> 'char *[3]' lvalue Var 0x14f855ca8 'buts' 'char *[3]'
        | | `-IntegerLiteral 0x14f8564b0 <col:7> 'int' 1
        | `-ImplicitCastExpr 0x14f8565a0 <col:12, col:19> 'char *' <IntegralToPointer>
        |   `-CallExpr 0x14f856560 <col:12, col:19> 'int'
        |     |-ImplicitCastExpr 0x14f856548 <col:12> 'int (*)()' <FunctionToPointerDecay>
        |     | `-DeclRefExpr 0x14f856508 <col:12> 'int ()' Function 0x14f855e78 '_' 'int ()'
        |     `-ImplicitCastExpr 0x14f856588 <col:14> 'char *' <ArrayToPointerDecay>
        |       `-StringLiteral 0x14f856528 <col:14> 'char[4]' lvalue "STR"
        `-BinaryOperator 0x14f856718 <line:10:2, col:12> 'char *' contains-errors '='
          |-ArraySubscriptExpr 0x14f8566d8 <col:2, col:8> 'char *' lvalue
          | |-ImplicitCastExpr 0x14f8566c0 <col:2> 'char **' <ArrayToPointerDecay>
          | | `-DeclRefExpr 0x14f8565d8 <col:2> 'char *[3]' lvalue Var 0x14f855ca8 'buts' 'char *[3]'
          | `-IntegerLiteral 0x14f8565f8 <col:7> 'int' 2
          `-RecoveryExpr 0x14f8566f8 <col:12> '<dependent type>' contains-errors lvalue
