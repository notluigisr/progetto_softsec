`-FunctionDecl 0x1519281f8  line:1:1 invalid zsetdevice 'int (int *)'
  |-ParmVarDecl 0x151928128 <col:12, col:21> col:21 invalid i_ctx_p 'int *'
  `-CompoundStmt 0x151942590 <line:2:1, line:25:1>
    |-DeclStmt 0x151928520 <line:5:5, col:17>
    | `-VarDecl 0x151928498 <col:5, col:16> col:9 used code 'int' cinit
    |   `-IntegerLiteral 0x151928500 <col:16> 'int' 0
    |-CallExpr 0x151928738 <line:7:5, col:35> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x151928618 <col:5> 'int ()' Function 0x151928560 'check_write_type' 'int ()'
    | |-UnaryOperator 0x151928700 <col:22, col:23> '<dependent type>' contains-errors prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x1519286e8 <col:23> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x1519286c8 <col:23> '<dependent type>' contains-errors lvalue
    | `-RecoveryExpr 0x151928718 <col:27> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x151941bd8 <line:8:5, line:11:5>
    | |-CXXDependentScopeMemberExpr 0x151941800 <line:8:9, col:14> '<dependent type>' contains-errors lvalue ->LockSafetyParams
    | | `-RecoveryExpr 0x1519287c8 <col:9> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x151941bc0 <col:32, line:11:5>
    |   `-IfStmt 0x151941ba0 <line:9:9, line:10:48>
    |     |-BinaryOperator 0x1519419f8 <line:9:12, col:33> 'int' contains-errors '!='
    |     | |-CXXDependentScopeMemberExpr 0x151941990 <col:12, col:22> '<dependent type>' contains-errors lvalue .pdevice
    |     | | `-CXXDependentScopeMemberExpr 0x151941948 <col:12, col:16> '<dependent type>' contains-errors lvalue ->value
    |     | |   `-RecoveryExpr 0x151941928 <col:12> '<dependent type>' contains-errors lvalue
    |     | `-RecoveryExpr 0x1519419d8 <col:33> '<dependent type>' contains-errors lvalue
    |     `-CallExpr 0x151941b78 <line:10:13, col:48> '<dependent type>' contains-errors
    |       |-DeclRefExpr 0x151941af8 <col:13> 'int ()' Function 0x151941a40 'return_error' 'int ()'
    |       `-RecoveryExpr 0x151941b58 <col:26> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x151941f68 <line:14:5, line:15:48>
    | |-BinaryOperator 0x151941db0 <line:14:9, col:30> 'int' contains-errors '=='
    | | |-CXXDependentScopeMemberExpr 0x151941d68 <col:9, col:19> '<dependent type>' contains-errors lvalue .pdevice
    | | | `-CXXDependentScopeMemberExpr 0x151941d20 <col:9, col:13> '<dependent type>' contains-errors lvalue ->value
    | | |   `-RecoveryExpr 0x151941d00 <col:9> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x151941cc0 <col:30> 'int' 0
    | `-ReturnStmt 0x151941f58 <line:15:9, col:48>
    |   `-CallExpr 0x151941f30 <col:16, col:48> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x151941eb0 <col:16> 'int ()' Function 0x151941df8 'gs_note_error' 'int ()'
    |     `-RecoveryExpr 0x151941f10 <col:30> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x151942168 <line:18:5, line:19:16>
    | |-BinaryOperator 0x151942100 <line:18:9, col:16> 'int' '<'
    | | |-ImplicitCastExpr 0x1519420e8 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1519420a8 <col:9> 'int' lvalue Var 0x151928498 'code' 'int'
    | | `-IntegerLiteral 0x1519420c8 <col:16> 'int' 0
    | `-ReturnStmt 0x151942158 <line:19:9, col:16>
    |   `-ImplicitCastExpr 0x151942140 <col:16> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x151942120 <col:16> 'int' lvalue Var 0x151928498 'code' 'int'
    |-CallExpr 0x151942420 <line:22:5, col:37> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x1519423e0 <col:5> 'int ()' Function 0x151942328 'invalidate_stack_devices' 'int ()'
    | `-RecoveryExpr 0x151942400 <col:30> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x151942580 <line:24:5, col:12>
      `-ImplicitCastExpr 0x151942568 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x151942548 <col:12> 'int' lvalue Var 0x151928498 'code' 'int'
