`-FunctionDecl 0x14280ddc8  line:1:7 invalid BN_bn2dec 'char *(const int *)'
  |-ParmVarDecl 0x14280dcf0 <col:17, col:31> col:31 invalid a 'const int *'
  `-CompoundStmt 0x14282aba8 <line:2:1, line:56:1>
    |-DeclStmt 0x14280e058 <line:3:5, col:27>
    | |-VarDecl 0x14280de90 <col:5, col:13> col:9 used i 'int' cinit
    | | `-IntegerLiteral 0x14280def8 <col:13> 'int' 0
    | |-VarDecl 0x14280df30 <col:5, col:16> col:16 used num 'int'
    | `-VarDecl 0x14280dfb0 <col:5, col:26> col:21 used ok 'int' cinit
    |   `-IntegerLiteral 0x14280e018 <col:26> 'int' 0
    |-DeclStmt 0x14280e128 <line:4:5, col:21>
    | `-VarDecl 0x14280e088 <col:5, col:17> col:11 used buf 'char *' cinit
    |   `-RecoveryExpr 0x14280e108 <col:17> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x14280e1c0 <line:5:5, col:12>
    | `-VarDecl 0x14280e158 <col:5, col:11> col:11 used p 'char *'
    |-BinaryOperator 0x1428278a8 <line:10:5, col:26> 'int' contains-errors '='
    | |-DeclRefExpr 0x14280e280 <col:5> 'int' lvalue Var 0x14280de90 'i' 'int'
    | `-BinaryOperator 0x142827888 <col:9, col:26> '<dependent type>' contains-errors '*'
    |   |-CallExpr 0x142827840 <col:9, col:22> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x142827800 <col:9> 'int ()' Function 0x14280e348 'BN_num_bits' 'int ()'
    |   | `-RecoveryExpr 0x142827820 <col:21> '<dependent type>' contains-errors lvalue
    |   `-IntegerLiteral 0x142827868 <col:26> 'int' 3
    |-BinaryOperator 0x142827a98 <line:11:5, col:37> 'int' '='
    | |-DeclRefExpr 0x1428278c8 <col:5> 'int' lvalue Var 0x14280df30 'num' 'int'
    | `-BinaryOperator 0x142827a78 <col:11, col:37> 'int' '+'
    |   |-ParenExpr 0x142827a38 <col:11, col:33> 'int'
    |   | `-BinaryOperator 0x142827a18 <col:12, col:32> 'int' '+'
    |   |   |-BinaryOperator 0x1428279d8 <col:12, col:25> 'int' '+'
    |   |   | |-BinaryOperator 0x142827940 <col:12, col:16> 'int' '/'
    |   |   | | |-ImplicitCastExpr 0x142827928 <col:12> 'int' <LValueToRValue>
    |   |   | | | `-DeclRefExpr 0x1428278e8 <col:12> 'int' lvalue Var 0x14280de90 'i' 'int'
    |   |   | | `-IntegerLiteral 0x142827908 <col:16> 'int' 10
    |   |   | `-BinaryOperator 0x1428279b8 <col:21, col:25> 'int' '/'
    |   |   |   |-ImplicitCastExpr 0x1428279a0 <col:21> 'int' <LValueToRValue>
    |   |   |   | `-DeclRefExpr 0x142827960 <col:21> 'int' lvalue Var 0x14280de90 'i' 'int'
    |   |   |   `-IntegerLiteral 0x142827980 <col:25> 'int' 1000
    |   |   `-IntegerLiteral 0x1428279f8 <col:32> 'int' 1
    |   `-IntegerLiteral 0x142827a58 <col:37> 'int' 1
    |-BinaryOperator 0x1428281d0 <line:13:5, col:33> 'char *' contains-errors '='
    | |-DeclRefExpr 0x142827c68 <col:5> 'char *' contains-errors lvalue Var 0x14280e088 'buf' 'char *'
    | `-ImplicitCastExpr 0x142827d90 <col:11, col:33> 'char *' <IntegralToPointer>
    |   `-CallExpr 0x142827d68 <col:11, col:33> 'int'
    |     |-ImplicitCastExpr 0x142827d50 <col:11> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x142827c88 <col:11> 'int ()' Function 0x142827ae0 'OPENSSL_malloc' 'int ()'
    |     `-BinaryOperator 0x142827d00 <col:26, col:32> 'int' '+'
    |       |-ImplicitCastExpr 0x142827ce8 <col:26> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x142827ca8 <col:26> 'int' lvalue Var 0x14280df30 'num' 'int'
    |       `-IntegerLiteral 0x142827cc8 <col:32> 'int' 3
    |-IfStmt 0x142828510 <line:14:5, line:17:5>
    | |-RecoveryExpr 0x142828298 <line:14:9, col:42> '_Bool' contains-errors
    | `-CompoundStmt 0x1428284f0 <col:45, line:17:5>
    |   |-CallExpr 0x142828458 <line:15:9, col:51> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x142828398 <col:9> 'int ()' Function 0x1428282e0 'BNerr' 'int ()'
    |   | |-RecoveryExpr 0x142828418 <col:15> '<dependent type>' contains-errors lvalue
    |   | `-RecoveryExpr 0x142828438 <col:31> '<dependent type>' contains-errors lvalue
    |   `-GotoStmt 0x1428284d8 <line:16:9, col:14> 'err' 0x142828488
    |-IfStmt 0x1428286b0 <line:18:5, line:19:14>
    | |-RecoveryExpr 0x142828678 <line:18:9, col:28> '_Bool' contains-errors
    | `-GotoStmt 0x142828698 <line:19:9, col:14> 'err' 0x142828488
    |-BinaryOperator 0x142828728 <line:22:5, col:9> 'char *' contains-errors '='
    | |-DeclRefExpr 0x1428286d0 <col:5> 'char *' lvalue Var 0x14280e158 'p' 'char *'
    | `-ImplicitCastExpr 0x142828710 <col:9> 'char *' contains-errors <LValueToRValue>
    |   `-DeclRefExpr 0x1428286f0 <col:9> 'char *' contains-errors lvalue Var 0x14280e088 'buf' 'char *'
    |-IfStmt 0x14282a7b8 <line:24:5, line:47:5> has_else
    | |-RecoveryExpr 0x142829ed8 <line:24:9, col:21> '_Bool' contains-errors
    | |-CompoundStmt 0x14282a078 <col:24, line:27:5>
    | | |-BinaryOperator 0x142829f98 <line:25:9, col:18> 'char' '='
    | | | |-UnaryOperator 0x142829f50 <col:9, col:14> 'char' lvalue prefix '*' cannot overflow
    | | | | `-ParenExpr 0x142829f30 <col:10, col:14> 'char *'
    | | | |   `-UnaryOperator 0x142829f18 <col:11, col:12> 'char *' postfix '++'
    | | | |     `-DeclRefExpr 0x142829ef8 <col:11> 'char *' lvalue Var 0x14280e158 'p' 'char *'
    | | | `-ImplicitCastExpr 0x142829f80 <col:18> 'char' <IntegralCast>
    | | |   `-CharacterLiteral 0x142829f68 <col:18> 'int' 48
    | | `-BinaryOperator 0x14282a058 <line:26:9, col:18> 'char' '='
    | |   |-UnaryOperator 0x14282a010 <col:9, col:14> 'char' lvalue prefix '*' cannot overflow
    | |   | `-ParenExpr 0x142829ff0 <col:10, col:14> 'char *'
    | |   |   `-UnaryOperator 0x142829fd8 <col:11, col:12> 'char *' postfix '++'
    | |   |     `-DeclRefExpr 0x142829fb8 <col:11> 'char *' lvalue Var 0x14280e158 'p' 'char *'
    | |   `-ImplicitCastExpr 0x14282a040 <col:18> 'char' <IntegralCast>
    | |     `-CharacterLiteral 0x14282a028 <col:18> 'int' 0
    | `-CompoundStmt 0x14282a780 <line:27:12, line:47:5>
    |   |-IfStmt 0x14282a258 <line:28:9, line:29:20>
    |   | |-RecoveryExpr 0x14282a198 <line:28:13, col:29> '_Bool' contains-errors
    |   | `-BinaryOperator 0x14282a238 <line:29:13, col:20> 'char' '='
    |   |   |-UnaryOperator 0x14282a1f0 <col:13, col:15> 'char' lvalue prefix '*' cannot overflow
    |   |   | `-UnaryOperator 0x14282a1d8 <col:14, col:15> 'char *' postfix '++'
    |   |   |   `-DeclRefExpr 0x14282a1b8 <col:14> 'char *' lvalue Var 0x14280e158 'p' 'char *'
    |   |   `-ImplicitCastExpr 0x14282a220 <col:20> 'char' <IntegralCast>
    |   |     `-CharacterLiteral 0x14282a208 <col:20> 'int' 45
    |   |-BinaryOperator 0x14282a2b8 <line:31:9, col:13> 'int' '='
    |   | |-DeclRefExpr 0x14282a278 <col:9> 'int' lvalue Var 0x14280de90 'i' 'int'
    |   | `-IntegerLiteral 0x14282a298 <col:13> 'int' 0
    |   |-WhileStmt 0x14282a428 <line:32:9, line:35:9>
    |   | |-RecoveryExpr 0x14282a2f8 <line:32:16, col:29> '_Bool' contains-errors
    |   | `-CompoundStmt 0x14282a418 <col:32, line:35:9>
    |   |-WhileStmt 0x14282a608 <line:39:9, line:40:14>
    |   | |-ImplicitCastExpr 0x14282a5b8 <line:39:16, col:17> 'char' <LValueToRValue>
    |   | | `-UnaryOperator 0x14282a5a0 <col:16, col:17> 'char' lvalue prefix '*' cannot overflow
    |   | |   `-ImplicitCastExpr 0x14282a588 <col:17> 'char *' <LValueToRValue>
    |   | |     `-DeclRefExpr 0x14282a568 <col:17> 'char *' lvalue Var 0x14280e158 'p' 'char *'
    |   | `-UnaryOperator 0x14282a5f0 <line:40:13, col:14> 'char *' postfix '++'
    |   |   `-DeclRefExpr 0x14282a5d0 <col:13> 'char *' lvalue Var 0x14280e158 'p' 'char *'
    |   `-WhileStmt 0x14282a760 <line:41:9, line:46:9>
    |     |-RecoveryExpr 0x14282a628 <line:41:16, col:22> '_Bool' contains-errors
    |     `-CompoundStmt 0x14282a748 <col:31, line:46:9>
    |       `-WhileStmt 0x14282a728 <line:44:13, line:45:18>
    |         |-ImplicitCastExpr 0x14282a6d8 <line:44:20, col:21> 'char' <LValueToRValue>
    |         | `-UnaryOperator 0x14282a6c0 <col:20, col:21> 'char' lvalue prefix '*' cannot overflow
    |         |   `-ImplicitCastExpr 0x14282a6a8 <col:21> 'char *' <LValueToRValue>
    |         |     `-DeclRefExpr 0x14282a688 <col:21> 'char *' lvalue Var 0x14280e158 'p' 'char *'
    |         `-UnaryOperator 0x14282a710 <line:45:17, col:18> 'char *' postfix '++'
    |           `-DeclRefExpr 0x14282a6f0 <col:17> 'char *' lvalue Var 0x14280e158 'p' 'char *'
    |-BinaryOperator 0x14282a828 <line:48:5, col:10> 'int' '='
    | |-DeclRefExpr 0x14282a7e8 <col:5> 'int' lvalue Var 0x14280dfb0 'ok' 'int'
    | `-IntegerLiteral 0x14282a808 <col:10> 'int' 1
    |-LabelStmt 0x14282a950 <line:49:2, col:5> 'err'
    | `-NullStmt 0x14282a948 <col:5>
    |-IfStmt 0x14282aaf0 <line:52:5, line:53:16>
    | |-ImplicitCastExpr 0x14282aa90 <line:52:9> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x14282aa70 <col:9> 'int' lvalue Var 0x14280dfb0 'ok' 'int'
    | `-ReturnStmt 0x14282aae0 <line:53:9, col:16>
    |   `-ImplicitCastExpr 0x14282aac8 <col:16> 'char *' contains-errors <LValueToRValue>
    |     `-DeclRefExpr 0x14282aaa8 <col:16> 'char *' contains-errors lvalue Var 0x14280e088 'buf' 'char *'
    `-CallExpr 0x14282ab68 <line:54:5, col:21> 'int' contains-errors
      |-ImplicitCastExpr 0x14282ab50 <col:5> 'int (*)()' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x14282ab10 <col:5> 'int ()' Function 0x14282a870 'OPENSSL_free' 'int ()'
      `-ImplicitCastExpr 0x14282ab90 <col:18> 'char *' contains-errors <LValueToRValue>
        `-DeclRefExpr 0x14282ab30 <col:18> 'char *' contains-errors lvalue Var 0x14280e088 'buf' 'char *'
