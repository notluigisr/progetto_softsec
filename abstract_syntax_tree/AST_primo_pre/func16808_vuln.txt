`-FunctionDecl 0x11c928258  line:1:20 decode_twos_comp 'long (long, int)' static inline
  |-ParmVarDecl 0x11c9280f0 <col:37, col:43> col:43 used c 'long'
  |-ParmVarDecl 0x11c928170 <col:46, col:50> col:50 used prec 'int'
  `-CompoundStmt 0x11c940df8 <line:2:1, line:9:1>
    |-DeclStmt 0x11c9283d8 <line:3:2, col:13>
    | `-VarDecl 0x11c928370 <col:2, col:7> col:7 used result 'long'
    |-CallExpr 0x11c9285e8 <line:4:2, col:18> 'int'
    | |-ImplicitCastExpr 0x11c9285d0 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x11c928500 <col:2> 'int ()' Function 0x11c928448 'assert' 'int ()'
    | `-BinaryOperator 0x11c928578 <col:9, col:17> 'int' '>='
    |   |-ImplicitCastExpr 0x11c928560 <col:9> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x11c928520 <col:9> 'int' lvalue ParmVar 0x11c928170 'prec' 'int'
    |   `-IntegerLiteral 0x11c928540 <col:17> 'int' 2
    |-CallExpr 0x11c928788 <line:5:2, col:19> 'int'
    | |-ImplicitCastExpr 0x11c928770 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x11c9286f0 <col:2> 'int ()' Function 0x11c928638 'jas_eprintf' 'int ()'
    | `-ImplicitCastExpr 0x11c9287b0 <col:14> 'char *' <ArrayToPointerDecay>
    |   `-StringLiteral 0x11c928750 <col:14> 'char[4]' lvalue "STR"
    |-BinaryOperator 0x11c940d90 <line:7:2, col:65> 'long' '='
    | |-DeclRefExpr 0x11c9287c8 <col:2> 'long' lvalue Var 0x11c928370 'result' 'long'
    | `-BinaryOperator 0x11c940d70 <col:11, col:65> 'long' '-'
    |   |-ParenExpr 0x11c940bc8 <col:11, col:39> 'long'
    |   | `-BinaryOperator 0x11c940ba8 <col:12, col:38> 'long' '&'
    |   |   |-ImplicitCastExpr 0x11c940b78 <col:12> 'long' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x11c940a00 <col:12> 'long' lvalue ParmVar 0x11c9280f0 'c' 'long'
    |   |   `-ImplicitCastExpr 0x11c940b90 <col:16, col:38> 'long' <IntegralCast>
    |   |     `-ParenExpr 0x11c940b58 <col:16, col:38> 'int'
    |   |       `-BinaryOperator 0x11c940b38 <col:17, col:37> 'int' '-'
    |   |         |-ParenExpr 0x11c940af8 <col:17, col:33> 'int'
    |   |         | `-BinaryOperator 0x11c940ad8 <col:18, col:32> 'int' '<<'
    |   |         |   |-IntegerLiteral 0x11c940a20 <col:18> 'int' 1
    |   |         |   `-ParenExpr 0x11c940ab8 <col:23, col:32> 'int'
    |   |         |     `-BinaryOperator 0x11c940a98 <col:24, col:31> 'int' '-'
    |   |         |       |-ImplicitCastExpr 0x11c940a80 <col:24> 'int' <LValueToRValue>
    |   |         |       | `-DeclRefExpr 0x11c940a40 <col:24> 'int' lvalue ParmVar 0x11c928170 'prec' 'int'
    |   |         |       `-IntegerLiteral 0x11c940a60 <col:31> 'int' 1
    |   |         `-IntegerLiteral 0x11c940b18 <col:37> 'int' 1
    |   `-ParenExpr 0x11c940d50 <col:43, col:65> 'long'
    |     `-BinaryOperator 0x11c940d30 <col:44, col:64> 'long' '&'
    |       |-ImplicitCastExpr 0x11c940d00 <col:44> 'long' <LValueToRValue>
    |       | `-DeclRefExpr 0x11c940be8 <col:44> 'long' lvalue ParmVar 0x11c9280f0 'c' 'long'
    |       `-ImplicitCastExpr 0x11c940d18 <col:48, col:64> 'long' <IntegralCast>
    |         `-ParenExpr 0x11c940ce0 <col:48, col:64> 'int'
    |           `-BinaryOperator 0x11c940cc0 <col:49, col:63> 'int' '<<'
    |             |-IntegerLiteral 0x11c940c08 <col:49> 'int' 1
    |             `-ParenExpr 0x11c940ca0 <col:54, col:63> 'int'
    |               `-BinaryOperator 0x11c940c80 <col:55, col:62> 'int' '-'
    |                 |-ImplicitCastExpr 0x11c940c68 <col:55> 'int' <LValueToRValue>
    |                 | `-DeclRefExpr 0x11c940c28 <col:55> 'int' lvalue ParmVar 0x11c928170 'prec' 'int'
    |                 `-IntegerLiteral 0x11c940c48 <col:62> 'int' 1
    `-ReturnStmt 0x11c940de8 <line:8:2, col:9>
      `-ImplicitCastExpr 0x11c940dd0 <col:9> 'long' <LValueToRValue>
        `-DeclRefExpr 0x11c940db0 <col:9> 'long' lvalue Var 0x11c928370 'result' 'long'
