`-FunctionDecl 0x12100deb8  line:1:7 invalid OPENSSL_LH_retrieve 'void *(int *, const void *)'
  |-ParmVarDecl 0x12100dd28 <col:27, col:42> col:42 referenced invalid lh 'int *'
  |-ParmVarDecl 0x12100ddd8 <col:46, col:58> col:58 used data 'const void *'
  `-CompoundStmt 0x121027930 <line:2:1, line:12:1>
    |-DeclStmt 0x12100dff0 <line:3:5, col:23>
    | `-VarDecl 0x12100df88 <col:5, col:19> col:19 used hash 'unsigned long'
    `-IfStmt 0x12100e1c8 <line:6:5, line:7:21>
      |-BinaryOperator 0x12100e0d8 <line:6:9, col:22> 'int' contains-errors '!='
      | |-CXXDependentScopeMemberExpr 0x12100e070 <col:9, col:13> '<dependent type>' contains-errors lvalue ->error
      | | `-RecoveryExpr 0x12100e050 <col:9> '<dependent type>' contains-errors lvalue
      | `-IntegerLiteral 0x12100e0b8 <col:22> 'int' 0
      `-BinaryOperator 0x12100e1a8 <line:7:9, col:21> '<dependent type>' contains-errors '='
        |-CXXDependentScopeMemberExpr 0x12100e140 <col:9, col:13> '<dependent type>' contains-errors lvalue ->error
        | `-RecoveryExpr 0x12100e118 <col:9> '<dependent type>' contains-errors lvalue
        |   `-DeclRefExpr 0x12100e0f8 <col:9> 'int *' lvalue ParmVar 0x12100dd28 'lh' 'int *'
        `-IntegerLiteral 0x12100e188 <col:21> 'int' 0
