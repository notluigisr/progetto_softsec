`-FunctionDecl 0x12d904f18  line:1:1 invalid yydestruct 'int (const char *, int, int *)'
  |-ParmVarDecl 0x12d904cd8 <col:13, col:25> col:25 used yymsg 'const char *'
  |-ParmVarDecl 0x12d904d58 <col:32, col:36> col:36 used yytype 'int'
  |-ParmVarDecl 0x12d904e28 <col:44, col:53> col:53 invalid yyvaluep 'int *'
  `-CompoundStmt 0x12e808cf8 <line:2:1, line:11:1>
    |-CallExpr 0x12d905170 <line:3:3, col:18> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x12d905130 <col:3> 'int ()' Function 0x12d905078 'YYUSE' 'int ()'
    | `-RecoveryExpr 0x12d905150 <col:10> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x12d9052c0 <line:4:3, line:5:13>
    | |-UnaryOperator 0x12d9051d0 <line:4:7, col:8> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x12d9051b8 <col:8> 'const char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x12d905198 <col:8> 'const char *' lvalue ParmVar 0x12d904cd8 'yymsg' 'const char *'
    | `-BinaryOperator 0x12d9052a0 <line:5:5, col:13> 'const char *' '='
    |   |-DeclRefExpr 0x12d9051e8 <col:5> 'const char *' lvalue ParmVar 0x12d904cd8 'yymsg' 'const char *'
    |   `-ImplicitCastExpr 0x12d905288 <col:13> 'const char *' <NoOp>
    |     `-ImplicitCastExpr 0x12d905270 <col:13> 'char *' <ArrayToPointerDecay>
    |       `-StringLiteral 0x12d905250 <col:13> 'char[4]' lvalue "STR"
    `-CallExpr 0x12e808cb8 <line:6:3, col:56> '<dependent type>' contains-errors
      |-DeclRefExpr 0x12d9053c0 <col:3> 'int ()' Function 0x12d905308 'YY_SYMBOL_PRINT' 'int ()'
      |-DeclRefExpr 0x12d9053e0 <col:20> 'const char *' lvalue ParmVar 0x12d904cd8 'yymsg' 'const char *'
      |-DeclRefExpr 0x12e808c00 <col:27> 'int' lvalue ParmVar 0x12d904d58 'yytype' 'int'
      |-RecoveryExpr 0x12e808c20 <col:35> '<dependent type>' contains-errors lvalue
      `-RecoveryExpr 0x12e808c98 <col:45> '<dependent type>' contains-errors lvalue
