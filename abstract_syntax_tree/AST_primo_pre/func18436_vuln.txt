`-FunctionDecl 0x15980e038  line:1:5 invalid ASN1_item_verify 'int (const int *, int *, int *, void *, int *)'
  |-ParmVarDecl 0x15980dcf0 <col:22, col:39> col:39 invalid it 'const int *'
  |-ParmVarDecl 0x15980dda8 <col:43, col:55> col:55 invalid a 'int *'
  |-ParmVarDecl 0x15980de28 <line:2:3, col:20> col:20 invalid signature 'int *'
  |-ParmVarDecl 0x15980dea8 <col:31, col:37> col:37 used asn 'void *'
  |-ParmVarDecl 0x15980df28 <col:42, col:52> col:52 invalid pkey 'int *'
  `-CompoundStmt 0x15b00a4f0 <line:3:2, line:103:2>
    |-DeclStmt 0x15980e1f8 <line:5:2, col:28>
    | `-VarDecl 0x15980e158 <col:2, col:24> col:17 used buf_in 'unsigned char *' cinit
    |   `-RecoveryExpr 0x15980e1d8 <col:24> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x15980e360 <line:6:2, col:17>
    | |-VarDecl 0x15980e228 <col:2, col:12> col:6 used ret 'int' cinit
    | | `-UnaryOperator 0x15980e2b0 <col:11, col:12> 'int' prefix '-'
    | |   `-IntegerLiteral 0x15980e290 <col:12> 'int' 1
    | `-VarDecl 0x15980e2e0 <col:2, col:14> col:14 used inl 'int'
    |-DeclStmt 0x159123698 <line:8:2, col:18>
    | |-VarDecl 0x15980e390 <col:2, col:6> col:6 used mdnid 'int'
    | `-VarDecl 0x159123618 <col:2, col:13> col:13 used pknid 'int'
    |-IfStmt 0x1591239b8 <line:10:2, line:14:3>
    | |-UnaryOperator 0x1591236e8 <line:10:6, col:7> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x1591236d0 <col:7> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x1591236b0 <col:7> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x159123998 <line:11:3, line:14:3>
    |   |-CallExpr 0x159123920 <line:12:3, col:63> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x159123860 <col:3> 'int ()' Function 0x1591237a8 'ASN1err' 'int ()'
    |   | |-RecoveryExpr 0x1591238e0 <col:11> '<dependent type>' contains-errors lvalue
    |   | `-RecoveryExpr 0x159123900 <col:36> '<dependent type>' contains-errors lvalue
    |   `-ReturnStmt 0x159123988 <line:13:3, col:11>
    |     `-UnaryOperator 0x159123970 <col:10, col:11> 'int' prefix '-'
    |       `-IntegerLiteral 0x159123950 <col:11> 'int' 1
    |-IfStmt 0x159123cf8 <line:16:2, line:20:3>
    | |-BinaryOperator 0x159123b80 <line:16:6, col:65> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x159123b60 <col:6, col:25> 'int' contains-errors '=='
    | | | |-CXXDependentScopeMemberExpr 0x1591239f8 <col:6, col:17> '<dependent type>' contains-errors lvalue ->type
    | | | | `-RecoveryExpr 0x1591239d8 <col:6> '<dependent type>' contains-errors lvalue
    | | | `-RecoveryExpr 0x159123b40 <col:25> '<dependent type>' contains-errors lvalue
    | | `-BinaryOperator 0x159123b00 <col:46, col:65> '<dependent type>' contains-errors '&'
    | |   |-CXXDependentScopeMemberExpr 0x159123a98 <col:46, col:57> '<dependent type>' contains-errors lvalue ->flags
    | |   | `-RecoveryExpr 0x159123a78 <col:46> '<dependent type>' contains-errors lvalue
    | |   `-IntegerLiteral 0x159123ae0 <col:65> 'int' 7
    | `-CompoundStmt 0x159123cd8 <line:17:3, line:20:3>
    |   |-CallExpr 0x159123c60 <line:18:3, col:66> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x159123ba0 <col:3> 'int ()' Function 0x1591237a8 'ASN1err' 'int ()'
    |   | |-RecoveryExpr 0x159123c20 <col:11> '<dependent type>' contains-errors lvalue
    |   | `-RecoveryExpr 0x159123c40 <col:31> '<dependent type>' contains-errors lvalue
    |   `-ReturnStmt 0x159123cc8 <line:19:3, col:11>
    |     `-UnaryOperator 0x159123cb0 <col:10, col:11> 'int' prefix '-'
    |       `-IntegerLiteral 0x159123c90 <col:11> 'int' 1
    |-CallExpr 0x159123ea8 <line:22:2, col:22> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x159123df8 <col:2> 'int ()' Function 0x159123d40 'EVP_MD_CTX_init' 'int ()'
    | `-UnaryOperator 0x159123e90 <col:18, col:19> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   `-RecoveryExpr 0x159123e70 <col:19> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x159124398 <line:25:2, line:29:3>
    | |-UnaryOperator 0x159124208 <line:25:6, col:68> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-CallExpr 0x1591241d0 <col:7, col:68> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x159123fb0 <col:7> 'int ()' Function 0x159123ef8 'OBJ_find_sigid_algs' 'int ()'
    | |   |-CallExpr 0x159124138 <col:27, col:51> '<dependent type>' contains-errors
    | |   | |-DeclRefExpr 0x1591240b0 <col:27> 'int ()' Function 0x159123ff8 'OBJ_obj2nid' 'int ()'
    | |   | `-CXXDependentScopeMemberExpr 0x1591240f0 <col:39, col:42> '<dependent type>' contains-errors lvalue ->algorithm
    | |   |   `-RecoveryExpr 0x1591240d0 <col:39> '<dependent type>' contains-errors lvalue
    | |   |-UnaryOperator 0x159124180 <col:54, col:55> 'int *' prefix '&' cannot overflow
    | |   | `-DeclRefExpr 0x159124160 <col:55> 'int' lvalue Var 0x15980e390 'mdnid' 'int'
    | |   `-UnaryOperator 0x1591241b8 <col:62, col:63> 'int *' prefix '&' cannot overflow
    | |     `-DeclRefExpr 0x159124198 <col:63> 'int' lvalue Var 0x159123618 'pknid' 'int'
    | `-CompoundStmt 0x159124378 <line:26:3, line:29:3>
    |   |-CallExpr 0x1591242e0 <line:27:3, col:69> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x159124220 <col:3> 'int ()' Function 0x1591237a8 'ASN1err' 'int ()'
    |   | |-RecoveryExpr 0x1591242a0 <col:11> '<dependent type>' contains-errors lvalue
    |   | `-RecoveryExpr 0x1591242c0 <col:35> '<dependent type>' contains-errors lvalue
    |   `-GotoStmt 0x159124360 <line:28:3, col:8> 'err' 0x159124310
    |-IfStmt 0x15b009140 <line:30:2, line:68:3> has_else
    | |-RecoveryExpr 0x1591243d8 <line:30:6, col:15> '_Bool' contains-errors
    | |-CompoundStmt 0x15b008898 <line:31:3, line:43:3>
    | | |-IfStmt 0x1591245e0 <line:32:3, line:36:4>
    | | | |-BinaryOperator 0x159124570 <line:32:7, col:37> 'int' contains-errors '||'
    | | | | |-UnaryOperator 0x159124478 <col:7, col:14> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | | | | `-ImplicitCastExpr 0x159124460 <col:8, col:14> '<dependent type>' contains-errors <LValueToRValue>
    | | | | |   `-CXXDependentScopeMemberExpr 0x159124418 <col:8, col:14> '<dependent type>' contains-errors lvalue ->ameth
    | | | | |     `-RecoveryExpr 0x1591243f8 <col:8> '<dependent type>' contains-errors lvalue
    | | | | `-UnaryOperator 0x159124558 <col:23, col:37> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | | |   `-ImplicitCastExpr 0x159124540 <col:24, col:37> '<dependent type>' contains-errors <LValueToRValue>
    | | | |     `-CXXDependentScopeMemberExpr 0x1591244f8 <col:24, col:37> '<dependent type>' contains-errors lvalue ->item_verify
    | | | |       `-CXXDependentScopeMemberExpr 0x1591244b0 <col:24, col:30> '<dependent type>' contains-errors lvalue ->ameth
    | | | |         `-RecoveryExpr 0x159124490 <col:24> '<dependent type>' contains-errors lvalue
    | | | `-CompoundStmt 0x1591245c8 <line:33:4, line:36:4>
    | | |   `-GotoStmt 0x1591245b0 <line:35:4, col:9> 'err' 0x159124310
    | | |-IfStmt 0x15b008800 <line:40:3, line:41:9>
    | | | |-BinaryOperator 0x15b0087c8 <line:40:7, col:14> 'int' '!='
    | | | | |-ImplicitCastExpr 0x15b0087b0 <col:7> 'int' <LValueToRValue>
    | | | | | `-DeclRefExpr 0x15b008770 <col:7> 'int' lvalue Var 0x15980e228 'ret' 'int'
    | | | | `-IntegerLiteral 0x15b008790 <col:14> 'int' 2
    | | | `-GotoStmt 0x15b0087e8 <line:41:4, col:9> 'err' 0x159124310
    | | `-BinaryOperator 0x15b008878 <line:42:3, col:10> 'int' '='
    | |   |-DeclRefExpr 0x15b008820 <col:3> 'int' lvalue Var 0x15980e228 'ret' 'int'
    | |   `-UnaryOperator 0x15b008860 <col:9, col:10> 'int' prefix '-'
    | |     `-IntegerLiteral 0x15b008840 <col:10> 'int' 1
    | `-CompoundStmt 0x15b009108 <line:45:3, line:68:3>
    |   |-DeclStmt 0x15b008940 <line:46:3, col:21>
    |   | `-VarDecl 0x15b0088d8 <col:3, col:17> col:17 referenced invalid type 'const int *'
    |   |-BinaryOperator 0x15b008b48 <line:47:3, col:33> '<dependent type>' contains-errors '='
    |   | |-RecoveryExpr 0x15b008978 <col:3> '<dependent type>' contains-errors lvalue
    |   | | `-DeclRefExpr 0x15b008958 <col:3> 'const int *' lvalue Var 0x15b0088d8 'type' 'const int *'
    |   | `-CallExpr 0x15b008b08 <col:8, col:33> 'int'
    |   |   |-ImplicitCastExpr 0x15b008af0 <col:8> 'int (*)()' <FunctionToPointerDecay>
    |   |   | `-DeclRefExpr 0x15b008a80 <col:8> 'int ()' Function 0x15b0089c8 'EVP_get_digestbynid' 'int ()'
    |   |   `-ImplicitCastExpr 0x15b008b30 <col:28> 'int' <LValueToRValue>
    |   |     `-DeclRefExpr 0x15b008aa0 <col:28> 'int' lvalue Var 0x15980e390 'mdnid' 'int'
    |   |-IfStmt 0x15b008bf8 <line:48:3, line:52:4>
    |   | |-RecoveryExpr 0x15b008b88 <line:48:7, col:15> '_Bool' contains-errors
    |   | `-CompoundStmt 0x15b008be0 <line:49:4, line:52:4>
    |   |   `-GotoStmt 0x15b008bc8 <line:51:4, col:9> 'err' 0x159124310
    |   |-IfStmt 0x15b008eb0 <line:55:3, line:59:4>
    |   | |-BinaryOperator 0x15b008e40 <line:55:7, col:44> 'int' contains-errors '!='
    |   | | |-CallExpr 0x15b008d50 <col:7, col:26> 'int'
    |   | | | |-ImplicitCastExpr 0x15b008d38 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |   | | | | `-DeclRefExpr 0x15b008cf8 <col:7> 'int ()' Function 0x15b008c40 'EVP_PKEY_type' 'int ()'
    |   | | | `-ImplicitCastExpr 0x15b008d78 <col:21> 'int' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x15b008d18 <col:21> 'int' lvalue Var 0x159123618 'pknid' 'int'
    |   | | `-CXXDependentScopeMemberExpr 0x15b008df8 <col:31, col:44> '<dependent type>' contains-errors lvalue ->pkey_id
    |   | |   `-CXXDependentScopeMemberExpr 0x15b008db0 <col:31, col:37> '<dependent type>' contains-errors lvalue ->ameth
    |   | |     `-RecoveryExpr 0x15b008d90 <col:31> '<dependent type>' contains-errors lvalue
    |   | `-CompoundStmt 0x15b008e98 <line:56:4, line:59:4>
    |   |   `-GotoStmt 0x15b008e80 <line:58:4, col:9> 'err' 0x159124310
    |   `-IfStmt 0x15b0090e8 <line:61:3, line:66:4>
    |     |-RecoveryExpr 0x15b009010 <line:61:7, col:57> '_Bool' contains-errors
    |     `-CompoundStmt 0x15b0090c8 <line:62:4, line:66:4>
    |       |-BinaryOperator 0x15b009090 <line:64:4, col:8> 'int' '='
    |       | |-DeclRefExpr 0x15b009050 <col:4> 'int' lvalue Var 0x15980e228 'ret' 'int'
    |       | `-IntegerLiteral 0x15b009070 <col:8> 'int' 0
    |       `-GotoStmt 0x15b0090b0 <line:65:4, col:9> 'err' 0x159124310
    |-BinaryOperator 0x15b009370 <line:70:2, col:38> 'int' contains-errors '='
    | |-DeclRefExpr 0x15b009170 <col:2> 'int' lvalue Var 0x15980e2e0 'inl' 'int'
    | `-CallExpr 0x15b009338 <col:8, col:38> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x15b009270 <col:8> 'int ()' Function 0x15b0091b8 'ASN1_item_i2d' 'int ()'
    |   |-DeclRefExpr 0x15b009290 <col:22> 'void *' lvalue ParmVar 0x15980dea8 'asn' 'void *'
    |   |-UnaryOperator 0x15b009300 <col:27, col:28> 'unsigned char **' contains-errors prefix '&' cannot overflow
    |   | `-DeclRefExpr 0x15b0092b0 <col:28> 'unsigned char *' contains-errors lvalue Var 0x15980e158 'buf_in' 'unsigned char *'
    |   `-RecoveryExpr 0x15b009318 <col:36> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x15b009420 <line:72:2, line:76:3>
    | |-RecoveryExpr 0x15b0093b0 <line:72:6, col:16> '_Bool' contains-errors
    | `-CompoundStmt 0x15b009408 <line:73:3, line:76:3>
    |   `-GotoStmt 0x15b0093f0 <line:75:3, col:8> 'err' 0x159124310
    |-CallExpr 0x15b009d88 <line:80:2, col:42> 'int' contains-errors
    | |-ImplicitCastExpr 0x15b009d70 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x15b009cb8 <col:2> 'int ()' Function 0x15b009c00 'OPENSSL_cleanse' 'int ()'
    | |-ImplicitCastExpr 0x15b009db8 <col:18> 'unsigned char *' contains-errors <LValueToRValue>
    | | `-DeclRefExpr 0x15b009cd8 <col:18> 'unsigned char *' contains-errors lvalue Var 0x15980e158 'buf_in' 'unsigned char *'
    | `-CStyleCastExpr 0x15b009d48 <col:25, col:39> 'unsigned int' <IntegralCast>
    |   `-ImplicitCastExpr 0x15b009d30 <col:39> 'int' <LValueToRValue> part_of_explicit_cast
    |     `-DeclRefExpr 0x15b009cf8 <col:39> 'int' lvalue Var 0x15980e2e0 'inl' 'int'
    |-CallExpr 0x15b009f08 <line:81:2, col:21> 'int' contains-errors
    | |-ImplicitCastExpr 0x15b009ef0 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x15b009eb0 <col:2> 'int ()' Function 0x15b009df8 'OPENSSL_free' 'int ()'
    | `-ImplicitCastExpr 0x15b009f30 <col:15> 'unsigned char *' contains-errors <LValueToRValue>
    |   `-DeclRefExpr 0x15b009ed0 <col:15> 'unsigned char *' contains-errors lvalue Var 0x15980e158 'buf_in' 'unsigned char *'
    |-IfStmt 0x15b009fe8 <line:83:2, line:87:3>
    | |-UnaryOperator 0x15b009f80 <line:83:6, col:7> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x15b009f68 <col:7> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x15b009f48 <col:7> 'int' lvalue Var 0x15980e228 'ret' 'int'
    | `-CompoundStmt 0x15b009fd0 <line:84:3, line:87:3>
    |   `-GotoStmt 0x15b009fb8 <line:86:3, col:8> 'err' 0x159124310
    |-BinaryOperator 0x15b00a060 <line:88:2, col:9> 'int' '='
    | |-DeclRefExpr 0x15b00a008 <col:2> 'int' lvalue Var 0x15980e228 'ret' 'int'
    | `-UnaryOperator 0x15b00a048 <col:8, col:9> 'int' prefix '-'
    |   `-IntegerLiteral 0x15b00a028 <col:9> 'int' 1
    |-IfStmt 0x15b00a2e0 <line:90:2, line:96:3>
    | |-RecoveryExpr 0x15b00a208 <line:90:6, line:91:34> '_Bool' contains-errors
    | `-CompoundStmt 0x15b00a2c0 <line:92:3, line:96:3>
    |   |-BinaryOperator 0x15b00a288 <line:94:3, col:7> 'int' '='
    |   | |-DeclRefExpr 0x15b00a248 <col:3> 'int' lvalue Var 0x15980e228 'ret' 'int'
    |   | `-IntegerLiteral 0x15b00a268 <col:7> 'int' 0
    |   `-GotoStmt 0x15b00a2a8 <line:95:3, col:8> 'err' 0x159124310
    |-BinaryOperator 0x15b00a340 <line:99:2, col:6> 'int' '='
    | |-DeclRefExpr 0x15b00a300 <col:2> 'int' lvalue Var 0x15980e228 'ret' 'int'
    | `-IntegerLiteral 0x15b00a320 <col:6> 'int' 1
    |-LabelStmt 0x15b00a468 <line:100:1, col:4> 'err'
    | `-NullStmt 0x15b00a460 <col:4>
    `-ReturnStmt 0x15b00a4e0 <line:102:2, col:12>
      `-ImplicitCastExpr 0x15b00a4c8 <col:8, col:12> 'int' <LValueToRValue>
        `-ParenExpr 0x15b00a4a8 <col:8, col:12> 'int' lvalue
          `-DeclRefExpr 0x15b00a488 <col:9> 'int' lvalue Var 0x15980e228 'ret' 'int'
