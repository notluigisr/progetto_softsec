`-FunctionDecl 0x1239283a8  line:1:1 invalid gen_values 'int (int *, int *, int, int)'
  |-ParmVarDecl 0x123928128 <col:12, col:27> col:27 invalid s 'int *'
  |-ParmVarDecl 0x1239281a8 <col:30, col:36> col:36 referenced invalid t 'int *'
  |-ParmVarDecl 0x123928228 <col:39, col:43> col:43 used val 'int'
  |-ParmVarDecl 0x1239282a8 <col:48, col:52> col:52 used limit 'int'
  `-CompoundStmt 0x123944420 <line:2:1, line:62:1>
    |-DeclStmt 0x123928510 <line:3:3, col:12>
    | `-VarDecl 0x123928488 <col:3, col:11> col:7 used n 'int' cinit
    |   `-IntegerLiteral 0x1239284f0 <col:11> 'int' 0
    |-DeclStmt 0x1239285c8 <line:4:3, col:16>
    | `-VarDecl 0x123928540 <col:3, col:15> col:7 used first 'int' cinit
    |   `-IntegerLiteral 0x1239285a8 <col:15> 'int' 1
    |-DeclStmt 0x123928698 <line:5:3, col:33>
    | `-VarDecl 0x1239285f8 <col:3, col:16> col:7 used slimit 'int' cinit
    |   `-RecoveryExpr 0x123928678 <col:16> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x1239287c0 <line:7:3, col:27>
    | |-BinaryOperator 0x123928708 <col:7, col:16> 'int' '=='
    | | |-ImplicitCastExpr 0x1239286f0 <col:7> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1239286b0 <col:7> 'int' lvalue ParmVar 0x1239282a8 'limit' 'int'
    | | `-IntegerLiteral 0x1239286d0 <col:16> 'int' 0
    | `-BinaryOperator 0x1239287a0 <col:19, col:27> 'int' contains-errors '='
    |   |-DeclRefExpr 0x123928728 <col:19> 'int' lvalue ParmVar 0x1239282a8 'limit' 'int'
    |   `-RecoveryExpr 0x123928780 <col:27> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x1239420d8 <line:8:3, col:35>
    | |-BinaryOperator 0x123942020 <col:7, col:18> 'int' contains-errors '>='
    | | |-CallExpr 0x123941fc8 <col:7, col:13> 'int'
    | | | `-ImplicitCastExpr 0x123941fb0 <col:7> 'int (*)()' <FunctionToPointerDecay>
    | | |   `-DeclRefExpr 0x123941f60 <col:7> 'int ()' Function 0x123941ea8 'cursp' 'int ()'
    | | `-ImplicitCastExpr 0x123942008 <col:18> 'int' contains-errors <LValueToRValue>
    | |   `-DeclRefExpr 0x123941fe8 <col:18> 'int' contains-errors lvalue Var 0x1239285f8 'slimit' 'int'
    | `-BinaryOperator 0x1239420b8 <col:26, col:35> 'int' contains-errors '='
    |   |-DeclRefExpr 0x123942040 <col:26> 'int' contains-errors lvalue Var 0x1239285f8 'slimit' 'int'
    |   `-RecoveryExpr 0x123942098 <col:35> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x123942550 <line:10:3, line:17:3>
    | |-UnaryOperator 0x123942130 <line:10:7, col:8> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x123942118 <col:8> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x1239420f8 <col:8> 'int' lvalue ParmVar 0x123928228 'val' 'int'
    | `-CompoundStmt 0x123942530 <col:13, line:17:3>
    |   |-WhileStmt 0x1239424c8 <line:11:5, line:15:5>
    |   | |-RecoveryExpr 0x123942148 <line:11:12> '<dependent type>' contains-errors lvalue
    |   | `-CompoundStmt 0x1239424a0 <col:15, line:15:5>
    |   |   |-CallExpr 0x123942360 <line:12:7, col:31> '<dependent type>' contains-errors
    |   |   | |-DeclRefExpr 0x123942248 <col:7> 'int ()' Function 0x123942190 'codegen' 'int ()'
    |   |   | |-RecoveryExpr 0x123942268 <col:15> '<dependent type>' contains-errors lvalue
    |   |   | |-CXXDependentScopeMemberExpr 0x1239422a8 <col:18, col:21> '<dependent type>' contains-errors lvalue ->car
    |   |   | | `-RecoveryExpr 0x123942288 <col:18> '<dependent type>' contains-errors lvalue
    |   |   | `-RecoveryExpr 0x123942340 <col:26> '<dependent type>' contains-errors lvalue
    |   |   |-UnaryOperator 0x1239423b8 <line:13:7, col:8> 'int' postfix '++'
    |   |   | `-DeclRefExpr 0x123942398 <col:7> 'int' lvalue Var 0x123928488 'n' 'int'
    |   |   `-BinaryOperator 0x123942480 <line:14:7, col:14> '<dependent type>' contains-errors '='
    |   |     |-RecoveryExpr 0x1239423f0 <col:7> '<dependent type>' contains-errors lvalue
    |   |     | `-DeclRefExpr 0x1239423d0 <col:7> 'int *' lvalue ParmVar 0x1239281a8 't' 'int *'
    |   |     `-CXXDependentScopeMemberExpr 0x123942438 <col:11, col:14> '<dependent type>' contains-errors lvalue ->cdr
    |   |       `-RecoveryExpr 0x123942418 <col:11> '<dependent type>' contains-errors lvalue
    |   `-ReturnStmt 0x123942520 <line:16:5, col:12>
    |     `-ImplicitCastExpr 0x123942508 <col:12> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x1239424e8 <col:12> 'int' lvalue Var 0x123928488 'n' 'int'
    |-WhileStmt 0x123944070 <line:19:3, line:52:3>
    | |-RecoveryExpr 0x123942570 <line:19:10> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x123944038 <col:13, line:52:3>
    |   |-DeclStmt 0x123942860 <line:20:5, col:51>
    |   | `-VarDecl 0x1239425a8 <col:5, col:41> col:9 used is_splat 'int' cinit
    |   |   `-BinaryOperator 0x123942840 <col:20, col:41> 'int' contains-errors '=='
    |   |     |-CallExpr 0x1239427c0 <col:20, col:36> '<dependent type>' contains-errors
    |   |     | |-DeclRefExpr 0x1239426f0 <col:20> 'int ()' Function 0x123942638 'nint' 'int ()'
    |   |     | `-CXXDependentScopeMemberExpr 0x123942778 <col:25, col:33> '<dependent type>' contains-errors lvalue ->car
    |   |     |   `-CXXDependentScopeMemberExpr 0x123942730 <col:25, col:28> '<dependent type>' contains-errors lvalue ->car
    |   |     |     `-RecoveryExpr 0x123942710 <col:25> '<dependent type>' contains-errors lvalue
    |   |     `-RecoveryExpr 0x123942820 <col:41> '<dependent type>' contains-errors lvalue
    |   |-IfStmt 0x123943bc8 <line:22:5, line:41:5>
    |   | |-BinaryOperator 0x123942a10 <line:22:9, col:45> 'int' contains-errors '||'
    |   | | |-BinaryOperator 0x123942940 <col:9, col:25> 'int' contains-errors '||'
    |   | | | |-ImplicitCastExpr 0x123942928 <col:9> 'int' contains-errors <LValueToRValue>
    |   | | | | `-DeclRefExpr 0x123942878 <col:9> 'int' contains-errors lvalue Var 0x1239425a8 'is_splat' 'int'
    |   | | | `-BinaryOperator 0x123942908 <col:21, col:25> 'int' '>'
    |   | | |   |-ImplicitCastExpr 0x1239428d8 <col:21> 'int' <LValueToRValue>
    |   | | |   | `-DeclRefExpr 0x123942898 <col:21> 'int' lvalue Var 0x123928488 'n' 'int'
    |   | | |   `-ImplicitCastExpr 0x1239428f0 <col:25> 'int' <LValueToRValue>
    |   | | |     `-DeclRefExpr 0x1239428b8 <col:25> 'int' lvalue ParmVar 0x1239282a8 'limit' 'int'
    |   | | `-BinaryOperator 0x1239429f0 <col:34, col:45> 'int' contains-errors '>='
    |   | |   |-CallExpr 0x123942998 <col:34, col:40> 'int'
    |   | |   | `-ImplicitCastExpr 0x123942980 <col:34> 'int (*)()' <FunctionToPointerDecay>
    |   | |   |   `-DeclRefExpr 0x123942960 <col:34> 'int ()' Function 0x123941ea8 'cursp' 'int ()'
    |   | |   `-ImplicitCastExpr 0x1239429d8 <col:45> 'int' contains-errors <LValueToRValue>
    |   | |     `-DeclRefExpr 0x1239429b8 <col:45> 'int' contains-errors lvalue Var 0x1239285f8 'slimit' 'int'
    |   | `-CompoundStmt 0x123943ba0 <col:53, line:41:5>
    |   |   |-CallExpr 0x123942b68 <line:23:7, col:14> 'int'
    |   |   | |-ImplicitCastExpr 0x123942b50 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |   |   | | `-DeclRefExpr 0x123942b10 <col:7> 'int ()' Function 0x123942a58 'pop_n' 'int ()'
    |   |   | `-ImplicitCastExpr 0x123942b90 <col:13> 'int' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x123942b30 <col:13> 'int' lvalue Var 0x123928488 'n' 'int'
    |   |   |-IfStmt 0x123943b10 <line:24:7, line:39:7> has_else
    |   |   | |-ImplicitCastExpr 0x123942bc8 <line:24:11> 'int' <LValueToRValue>
    |   |   | | `-DeclRefExpr 0x123942ba8 <col:11> 'int' lvalue Var 0x123928540 'first' 'int'
    |   |   | |-CompoundStmt 0x1239437e0 <col:18, line:34:7>
    |   |   | | |-IfStmt 0x123943580 <line:25:9, line:30:9> has_else
    |   |   | | | |-BinaryOperator 0x123942c38 <line:25:13, col:18> 'int' '=='
    |   |   | | | | |-ImplicitCastExpr 0x123942c20 <col:13> 'int' <LValueToRValue>
    |   |   | | | | | `-DeclRefExpr 0x123942be0 <col:13> 'int' lvalue Var 0x123928488 'n' 'int'
    |   |   | | | | `-IntegerLiteral 0x123942c00 <col:18> 'int' 0
    |   |   | | | |-CompoundStmt 0x1239432c8 <col:21, line:27:9>
    |   |   | | | | `-CallExpr 0x123943290 <line:26:11, col:41> '<dependent type>' contains-errors
    |   |   | | | |   |-DeclRefExpr 0x123942d38 <col:11> 'int ()' Function 0x123942c80 'genop_1' 'int ()'
    |   |   | | | |   |-RecoveryExpr 0x123942d58 <col:19> '<dependent type>' contains-errors lvalue
    |   |   | | | |   |-RecoveryExpr 0x123943238 <col:22> '<dependent type>' contains-errors lvalue
    |   |   | | | |   `-CallExpr 0x123943270 <col:34, col:40> 'int'
    |   |   | | | |     `-ImplicitCastExpr 0x123943258 <col:34> 'int (*)()' <FunctionToPointerDecay>
    |   |   | | | |       `-DeclRefExpr 0x123942d90 <col:34> 'int ()' Function 0x123941ea8 'cursp' 'int ()'
    |   |   | | | `-CompoundStmt 0x123943568 <line:28:14, line:30:9>
    |   |   | | |   `-CallExpr 0x123943528 <line:29:11, col:42> '<dependent type>' contains-errors
    |   |   | | |     |-DeclRefExpr 0x1239433c0 <col:11> 'int ()' Function 0x123943308 'genop_2' 'int ()'
    |   |   | | |     |-RecoveryExpr 0x1239433e0 <col:19> '<dependent type>' contains-errors lvalue
    |   |   | | |     |-RecoveryExpr 0x1239434d0 <col:22> '<dependent type>' contains-errors lvalue
    |   |   | | |     |-CallExpr 0x123943508 <col:32, col:38> 'int'
    |   |   | | |     | `-ImplicitCastExpr 0x1239434f0 <col:32> 'int (*)()' <FunctionToPointerDecay>
    |   |   | | |     |   `-DeclRefExpr 0x123943418 <col:32> 'int ()' Function 0x123941ea8 'cursp' 'int ()'
    |   |   | | |     `-DeclRefExpr 0x123943470 <col:41> 'int' lvalue Var 0x123928488 'n' 'int'
    |   |   | | |-CallExpr 0x1239436c8 <line:31:9, col:14> 'int'
    |   |   | | | `-ImplicitCastExpr 0x1239436b0 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   |   | | |   `-DeclRefExpr 0x123943690 <col:9> 'int ()' Function 0x1239435d8 'push' 'int ()'
    |   |   | | |-BinaryOperator 0x123943728 <line:32:9, col:17> 'int' '='
    |   |   | | | |-DeclRefExpr 0x1239436e8 <col:9> 'int' lvalue Var 0x123928540 'first' 'int'
    |   |   | | | `-IntegerLiteral 0x123943708 <col:17> 'int' 0
    |   |   | | `-BinaryOperator 0x1239437c0 <line:33:9, col:17> 'int' contains-errors '='
    |   |   | |   |-DeclRefExpr 0x123943748 <col:9> 'int' lvalue ParmVar 0x1239282a8 'limit' 'int'
    |   |   | |   `-RecoveryExpr 0x1239437a0 <col:17> '<dependent type>' contains-errors lvalue
    |   |   | `-IfStmt 0x123943af0 <line:35:12, line:39:7>
    |   |   |   |-BinaryOperator 0x123943868 <line:35:16, col:20> 'int' '>'
    |   |   |   | |-ImplicitCastExpr 0x123943850 <col:16> 'int' <LValueToRValue>
    |   |   |   | | `-DeclRefExpr 0x123943810 <col:16> 'int' lvalue Var 0x123928488 'n' 'int'
    |   |   |   | `-IntegerLiteral 0x123943830 <col:20> 'int' 0
    |   |   |   `-CompoundStmt 0x123943ad0 <col:23, line:39:7>
    |   |   |     |-CallExpr 0x1239439a0 <line:36:9, col:13> 'int'
    |   |   |     | `-ImplicitCastExpr 0x123943988 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   |   |     |   `-DeclRefExpr 0x123943968 <col:9> 'int ()' Function 0x1239438b0 'pop' 'int ()'
    |   |   |     `-CallExpr 0x123943ab0 <line:38:9, col:14> 'int'
    |   |   |       `-ImplicitCastExpr 0x123943a98 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   |   |         `-DeclRefExpr 0x123943a78 <col:9> 'int ()' Function 0x1239435d8 'push' 'int ()'
    |   |   `-BinaryOperator 0x123943b80 <line:40:7, col:11> 'int' '='
    |   |     |-DeclRefExpr 0x123943b40 <col:7> 'int' lvalue Var 0x123928488 'n' 'int'
    |   |     `-IntegerLiteral 0x123943b60 <col:11> 'int' 0
    |   |-CallExpr 0x123943cb0 <line:42:5, col:27> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x123943be8 <col:5> 'int ()' Function 0x123942190 'codegen' 'int ()'
    |   | |-RecoveryExpr 0x123943c08 <col:13> '<dependent type>' contains-errors lvalue
    |   | |-CXXDependentScopeMemberExpr 0x123943c48 <col:16, col:19> '<dependent type>' contains-errors lvalue ->car
    |   | | `-RecoveryExpr 0x123943c28 <col:16> '<dependent type>' contains-errors lvalue
    |   | `-DeclRefExpr 0x123943c90 <col:24> 'int' lvalue ParmVar 0x123928228 'val' 'int'
    |   |-IfStmt 0x123943f38 <line:43:5, line:50:5> has_else
    |   | |-ImplicitCastExpr 0x123943d08 <line:43:9> 'int' contains-errors <LValueToRValue>
    |   | | `-DeclRefExpr 0x123943ce8 <col:9> 'int' contains-errors lvalue Var 0x1239425a8 'is_splat' 'int'
    |   | |-CompoundStmt 0x123943ec0 <col:19, line:47:5>
    |   | | |-CallExpr 0x123943d58 <line:44:7, col:11> 'int'
    |   | | | `-ImplicitCastExpr 0x123943d40 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |   | | |   `-DeclRefExpr 0x123943d20 <col:7> 'int ()' Function 0x1239438b0 'pop' 'int ()'
    |   | | |-CallExpr 0x123943db0 <col:14, col:18> 'int'
    |   | | | `-ImplicitCastExpr 0x123943d98 <col:14> 'int (*)()' <FunctionToPointerDecay>
    |   | | |   `-DeclRefExpr 0x123943d78 <col:14> 'int ()' Function 0x1239438b0 'pop' 'int ()'
    |   | | `-CallExpr 0x123943ea0 <line:46:7, col:12> 'int'
    |   | |   `-ImplicitCastExpr 0x123943e88 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |   | |     `-DeclRefExpr 0x123943e68 <col:7> 'int ()' Function 0x1239435d8 'push' 'int ()'
    |   | `-CompoundStmt 0x123943f20 <line:48:10, line:50:5>
    |   |   `-UnaryOperator 0x123943f08 <line:49:7, col:8> 'int' postfix '++'
    |   |     `-DeclRefExpr 0x123943ee8 <col:7> 'int' lvalue Var 0x123928488 'n' 'int'
    |   `-BinaryOperator 0x123944018 <line:51:5, col:12> '<dependent type>' contains-errors '='
    |     |-RecoveryExpr 0x123943f88 <col:5> '<dependent type>' contains-errors lvalue
    |     | `-DeclRefExpr 0x123943f68 <col:5> 'int *' lvalue ParmVar 0x1239281a8 't' 'int *'
    |     `-CXXDependentScopeMemberExpr 0x123943fd0 <col:9, col:12> '<dependent type>' contains-errors lvalue ->cdr
    |       `-RecoveryExpr 0x123943fb0 <col:9> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x1239443b8 <line:53:3, line:60:3>
    | |-UnaryOperator 0x1239440c8 <line:53:7, col:8> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x1239440b0 <col:8> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x123944090 <col:8> 'int' lvalue Var 0x123928540 'first' 'int'
    | `-CompoundStmt 0x123944390 <col:15, line:60:3>
    |   |-CallExpr 0x123944118 <line:54:5, col:9> 'int'
    |   | `-ImplicitCastExpr 0x123944100 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |   |   `-DeclRefExpr 0x1239440e0 <col:5> 'int ()' Function 0x1239438b0 'pop' 'int ()'
    |   |-IfStmt 0x123944328 <line:55:5, line:58:5>
    |   | |-BinaryOperator 0x123944190 <line:55:9, col:13> 'int' '>'
    |   | | |-ImplicitCastExpr 0x123944178 <col:9> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x123944138 <col:9> 'int' lvalue Var 0x123928488 'n' 'int'
    |   | | `-IntegerLiteral 0x123944158 <col:13> 'int' 0
    |   | `-CompoundStmt 0x123944310 <col:16, line:58:5>
    |   |   `-CallExpr 0x123944218 <line:56:7, col:14> 'int'
    |   |     |-ImplicitCastExpr 0x123944200 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |   |     | `-DeclRefExpr 0x1239441b0 <col:7> 'int ()' Function 0x123942a58 'pop_n' 'int ()'
    |   |     `-ImplicitCastExpr 0x123944240 <col:13> 'int' <LValueToRValue>
    |   |       `-DeclRefExpr 0x1239441d0 <col:13> 'int' lvalue Var 0x123928488 'n' 'int'
    |   `-ReturnStmt 0x123944380 <line:59:5, col:13>
    |     `-UnaryOperator 0x123944368 <col:12, col:13> 'int' prefix '-'
    |       `-IntegerLiteral 0x123944348 <col:13> 'int' 1
    `-ReturnStmt 0x123944410 <line:61:3, col:10>
      `-ImplicitCastExpr 0x1239443f8 <col:10> 'int' <LValueToRValue>
        `-DeclRefExpr 0x1239443d8 <col:10> 'int' lvalue Var 0x123928488 'n' 'int'
