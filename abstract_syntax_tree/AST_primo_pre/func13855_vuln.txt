`-FunctionDecl 0x12000e6c0  line:1:13 invalid ZRLE_ENCODE 'void (int, int, int, int, int *, void *)' static
  |-ParmVarDecl 0x12000e2d8 <col:26, col:30> col:30 used x 'int'
  |-ParmVarDecl 0x12000e358 <col:33, col:37> col:37 used y 'int'
  |-ParmVarDecl 0x12000e3d8 <col:40, col:44> col:44 used w 'int'
  |-ParmVarDecl 0x12000e458 <col:47, col:51> col:51 used h 'int'
  |-ParmVarDecl 0x12000e528 <line:2:5, col:20> col:20 invalid os 'int *'
  |-ParmVarDecl 0x12000e5a8 <col:24, col:30> col:30 used buf 'void *'
  `-CompoundStmt 0x120922120 <line:5:1, line:21:1>
    |-DeclStmt 0x12000e818 <line:6:3, col:9>
    | `-VarDecl 0x12000e7b0 <col:3, col:7> col:7 used ty 'int'
    |-ForStmt 0x120028d98 <line:7:3, line:19:3>
    | |-BinaryOperator 0x12000e888 <line:7:8, col:13> 'int' '='
    | | |-DeclRefExpr 0x12000e830 <col:8> 'int' lvalue Var 0x12000e7b0 'ty' 'int'
    | | `-ImplicitCastExpr 0x12000e870 <col:13> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x12000e850 <col:13> 'int' lvalue ParmVar 0x12000e358 'y' 'int'
    | |-<<<NULL>>>
    | |-BinaryOperator 0x12000e970 <col:16, col:23> 'int' '<'
    | | |-ImplicitCastExpr 0x12000e958 <col:16> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x12000e8a8 <col:16> 'int' lvalue Var 0x12000e7b0 'ty' 'int'
    | | `-BinaryOperator 0x12000e938 <col:21, col:23> 'int' '+'
    | |   |-ImplicitCastExpr 0x12000e908 <col:21> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x12000e8c8 <col:21> 'int' lvalue ParmVar 0x12000e358 'y' 'int'
    | |   `-ImplicitCastExpr 0x12000e920 <col:23> 'int' <LValueToRValue>
    | |     `-DeclRefExpr 0x12000e8e8 <col:23> 'int' lvalue ParmVar 0x12000e458 'h' 'int'
    | |-CompoundAssignOperator 0x120027e20 <col:26, col:32> 'int' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    | | |-DeclRefExpr 0x12000e990 <col:26> 'int' lvalue Var 0x12000e7b0 'ty' 'int'
    | | `-RecoveryExpr 0x120027e00 <col:32> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x120028d70 <col:51, line:19:3>
    |   |-DeclStmt 0x120027fa0 <line:8:5, col:35>
    |   | |-VarDecl 0x120027e68 <col:5, col:9> col:9 used tx 'int'
    |   | `-VarDecl 0x120027ee8 <col:5, col:18> col:13 used th 'int' cinit
    |   |   `-RecoveryExpr 0x120027f68 <col:18> '<dependent type>' contains-errors lvalue
    |   |-IfStmt 0x120028220 <line:9:5, col:31>
    |   | |-BinaryOperator 0x1200280d8 <col:9, col:18> 'int' contains-errors '>'
    |   | | |-ImplicitCastExpr 0x1200280c0 <col:9> 'int' contains-errors <LValueToRValue>
    |   | | | `-DeclRefExpr 0x120027fb8 <col:9> 'int' contains-errors lvalue Var 0x120027ee8 'th' 'int'
    |   | | `-BinaryOperator 0x1200280a0 <col:14, col:18> 'int' '-'
    |   | |   |-BinaryOperator 0x120028048 <col:14, col:16> 'int' '+'
    |   | |   | |-ImplicitCastExpr 0x120028018 <col:14> 'int' <LValueToRValue>
    |   | |   | | `-DeclRefExpr 0x120027fd8 <col:14> 'int' lvalue ParmVar 0x12000e358 'y' 'int'
    |   | |   | `-ImplicitCastExpr 0x120028030 <col:16> 'int' <LValueToRValue>
    |   | |   |   `-DeclRefExpr 0x120027ff8 <col:16> 'int' lvalue ParmVar 0x12000e458 'h' 'int'
    |   | |   `-ImplicitCastExpr 0x120028088 <col:18> 'int' <LValueToRValue>
    |   | |     `-DeclRefExpr 0x120028068 <col:18> 'int' lvalue Var 0x12000e7b0 'ty' 'int'
    |   | `-BinaryOperator 0x120028200 <col:22, col:31> 'int' contains-errors '='
    |   |   |-DeclRefExpr 0x1200280f8 <col:22> 'int' contains-errors lvalue Var 0x120027ee8 'th' 'int'
    |   |   `-BinaryOperator 0x1200281e0 <col:27, col:31> 'int' '-'
    |   |     |-BinaryOperator 0x120028188 <col:27, col:29> 'int' '+'
    |   |     | |-ImplicitCastExpr 0x120028158 <col:27> 'int' <LValueToRValue>
    |   |     | | `-DeclRefExpr 0x120028118 <col:27> 'int' lvalue ParmVar 0x12000e358 'y' 'int'
    |   |     | `-ImplicitCastExpr 0x120028170 <col:29> 'int' <LValueToRValue>
    |   |     |   `-DeclRefExpr 0x120028138 <col:29> 'int' lvalue ParmVar 0x12000e458 'h' 'int'
    |   |     `-ImplicitCastExpr 0x1200281c8 <col:31> 'int' <LValueToRValue>
    |   |       `-DeclRefExpr 0x1200281a8 <col:31> 'int' lvalue Var 0x12000e7b0 'ty' 'int'
    |   `-ForStmt 0x120028d38 <line:10:5, line:18:5>
    |     |-BinaryOperator 0x120028298 <line:10:10, col:15> 'int' '='
    |     | |-DeclRefExpr 0x120028240 <col:10> 'int' lvalue Var 0x120027e68 'tx' 'int'
    |     | `-ImplicitCastExpr 0x120028280 <col:15> 'int' <LValueToRValue>
    |     |   `-DeclRefExpr 0x120028260 <col:15> 'int' lvalue ParmVar 0x12000e2d8 'x' 'int'
    |     |-<<<NULL>>>
    |     |-BinaryOperator 0x120028380 <col:18, col:25> 'int' '<'
    |     | |-ImplicitCastExpr 0x120028368 <col:18> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x1200282b8 <col:18> 'int' lvalue Var 0x120027e68 'tx' 'int'
    |     | `-BinaryOperator 0x120028348 <col:23, col:25> 'int' '+'
    |     |   |-ImplicitCastExpr 0x120028318 <col:23> 'int' <LValueToRValue>
    |     |   | `-DeclRefExpr 0x1200282d8 <col:23> 'int' lvalue ParmVar 0x12000e2d8 'x' 'int'
    |     |   `-ImplicitCastExpr 0x120028330 <col:25> 'int' <LValueToRValue>
    |     |     `-DeclRefExpr 0x1200282f8 <col:25> 'int' lvalue ParmVar 0x12000e3d8 'w' 'int'
    |     |-CompoundAssignOperator 0x120028428 <col:28, col:34> 'int' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    |     | |-DeclRefExpr 0x1200283a0 <col:28> 'int' lvalue Var 0x120027e68 'tx' 'int'
    |     | `-RecoveryExpr 0x120028408 <col:34> '<dependent type>' contains-errors lvalue
    |     `-CompoundStmt 0x120028d10 <col:52, line:18:5>
    |       |-DeclStmt 0x120028510 <line:11:7, col:32>
    |       | `-VarDecl 0x120028470 <col:7, col:16> col:11 used tw 'int' cinit
    |       |   `-RecoveryExpr 0x1200284f0 <col:16> '<dependent type>' contains-errors lvalue
    |       |-IfStmt 0x120028790 <line:12:7, col:33>
    |       | |-BinaryOperator 0x120028648 <col:11, col:20> 'int' contains-errors '>'
    |       | | |-ImplicitCastExpr 0x120028630 <col:11> 'int' contains-errors <LValueToRValue>
    |       | | | `-DeclRefExpr 0x120028528 <col:11> 'int' contains-errors lvalue Var 0x120028470 'tw' 'int'
    |       | | `-BinaryOperator 0x120028610 <col:16, col:20> 'int' '-'
    |       | |   |-BinaryOperator 0x1200285b8 <col:16, col:18> 'int' '+'
    |       | |   | |-ImplicitCastExpr 0x120028588 <col:16> 'int' <LValueToRValue>
    |       | |   | | `-DeclRefExpr 0x120028548 <col:16> 'int' lvalue ParmVar 0x12000e2d8 'x' 'int'
    |       | |   | `-ImplicitCastExpr 0x1200285a0 <col:18> 'int' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x120028568 <col:18> 'int' lvalue ParmVar 0x12000e3d8 'w' 'int'
    |       | |   `-ImplicitCastExpr 0x1200285f8 <col:20> 'int' <LValueToRValue>
    |       | |     `-DeclRefExpr 0x1200285d8 <col:20> 'int' lvalue Var 0x120027e68 'tx' 'int'
    |       | `-BinaryOperator 0x120028770 <col:24, col:33> 'int' contains-errors '='
    |       |   |-DeclRefExpr 0x120028668 <col:24> 'int' contains-errors lvalue Var 0x120028470 'tw' 'int'
    |       |   `-BinaryOperator 0x120028750 <col:29, col:33> 'int' '-'
    |       |     |-BinaryOperator 0x1200286f8 <col:29, col:31> 'int' '+'
    |       |     | |-ImplicitCastExpr 0x1200286c8 <col:29> 'int' <LValueToRValue>
    |       |     | | `-DeclRefExpr 0x120028688 <col:29> 'int' lvalue ParmVar 0x12000e2d8 'x' 'int'
    |       |     | `-ImplicitCastExpr 0x1200286e0 <col:31> 'int' <LValueToRValue>
    |       |     |   `-DeclRefExpr 0x1200286a8 <col:31> 'int' lvalue ParmVar 0x12000e3d8 'w' 'int'
    |       |     `-ImplicitCastExpr 0x120028738 <col:33> 'int' <LValueToRValue>
    |       |       `-DeclRefExpr 0x120028718 <col:33> 'int' lvalue Var 0x120027e68 'tx' 'int'
    |       `-CallExpr 0x120028a18 <line:14:7, col:41> 'int' contains-errors
    |         |-ImplicitCastExpr 0x120028a00 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |         | `-DeclRefExpr 0x120028910 <col:7> 'int ()' Function 0x120028858 'GET_IMAGE_INTO_BUF' 'int ()'
    |         |-ImplicitCastExpr 0x120028a60 <col:26> 'int' <LValueToRValue>
    |         | `-DeclRefExpr 0x120028930 <col:26> 'int' lvalue Var 0x120027e68 'tx' 'int'
    |         |-ImplicitCastExpr 0x120028a78 <col:29> 'int' <LValueToRValue>
    |         | `-DeclRefExpr 0x120028950 <col:29> 'int' lvalue Var 0x12000e7b0 'ty' 'int'
    |         |-ImplicitCastExpr 0x120028a90 <col:32> 'int' contains-errors <LValueToRValue>
    |         | `-DeclRefExpr 0x120028970 <col:32> 'int' contains-errors lvalue Var 0x120028470 'tw' 'int'
    |         |-ImplicitCastExpr 0x120028aa8 <col:35> 'int' contains-errors <LValueToRValue>
    |         | `-DeclRefExpr 0x120028990 <col:35> 'int' contains-errors lvalue Var 0x120027ee8 'th' 'int'
    |         `-ImplicitCastExpr 0x120028ac0 <col:38> 'void *' <LValueToRValue>
    |           `-DeclRefExpr 0x1200289b0 <col:38> 'void *' lvalue ParmVar 0x12000e5a8 'buf' 'void *'
    `-CallExpr 0x1209220f8 <line:20:3, col:24> '<dependent type>' contains-errors
      |-DeclRefExpr 0x1209220b8 <col:3> 'int ()' Function 0x120922000 'zrleOutStreamFlush' 'int ()'
      `-RecoveryExpr 0x1209220d8 <col:22> '<dependent type>' contains-errors lvalue
