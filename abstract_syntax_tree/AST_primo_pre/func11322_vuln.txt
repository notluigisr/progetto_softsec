`-FunctionDecl 0x14f128318  line:1:8 invalid PyAST_obj2mod 'int (int *, int *, int)'
  |-ParmVarDecl 0x14f128128 <col:22, col:32> col:32 invalid ast 'int *'
  |-ParmVarDecl 0x14f1281a8 <col:37, col:46> col:46 invalid arena 'int *'
  |-ParmVarDecl 0x14f128228 <col:53, col:57> col:57 used mode 'int'
  `-CompoundStmt 0x14f142470 <line:2:1, line:29:1>
    |-DeclStmt 0x14f128630 <line:5:5, col:31>
    | `-VarDecl 0x14f128468 <col:5, col:30> col:11 used req_name 'char *[1]' cinit
    |   `-InitListExpr 0x14f128588 <col:24, col:30> 'char *[1]'
    |     `-ImplicitCastExpr 0x14f1285c8 <col:25> 'char *' <ArrayToPointerDecay>
    |       `-StringLiteral 0x14f128510 <col:25> 'char[4]' lvalue "STR"
    |-DeclStmt 0x14f1286c8 <line:6:5, col:19>
    | `-VarDecl 0x14f128660 <col:5, col:9> col:9 used isinstance 'int'
    |-CallExpr 0x14f141a58 <line:12:5, col:34> 'int'
    | |-ImplicitCastExpr 0x14f141a40 <col:5> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x14f1418e0 <col:5> 'int ()' Function 0x14f141828 'assert' 'int ()'
    | `-BinaryOperator 0x14f1419f0 <col:12, col:33> 'int' '&&'
    |   |-BinaryOperator 0x14f141958 <col:12, col:17> 'int' '<='
    |   | |-IntegerLiteral 0x14f141900 <col:12> 'int' 0
    |   | `-ImplicitCastExpr 0x14f141940 <col:17> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x14f141920 <col:17> 'int' lvalue ParmVar 0x14f128228 'mode' 'int'
    |   `-BinaryOperator 0x14f1419d0 <col:25, col:33> 'int' '<='
    |     |-ImplicitCastExpr 0x14f1419b8 <col:25> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x14f141978 <col:25> 'int' lvalue ParmVar 0x14f128228 'mode' 'int'
    |     `-IntegerLiteral 0x14f141998 <col:33> 'int' 2
    |-IfStmt 0x14f141c18 <line:14:5, line:15:16>
    | |-UnaryOperator 0x14f141bb8 <line:14:9, col:21> 'int' prefix '!' cannot overflow
    | | `-CallExpr 0x14f141b98 <col:10, col:21> 'int'
    | |   `-ImplicitCastExpr 0x14f141b80 <col:10> 'int (*)()' <FunctionToPointerDecay>
    | |     `-DeclRefExpr 0x14f141b60 <col:10> 'int ()' Function 0x14f141aa8 'init_types' 'int ()'
    | `-ReturnStmt 0x14f141c08 <line:15:9, col:16>
    |   `-RecoveryExpr 0x14f141be8 <col:16> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x14f141e80 <line:17:5, col:57> 'int' contains-errors '='
    | |-DeclRefExpr 0x14f141c38 <col:5> 'int' lvalue Var 0x14f128660 'isinstance' 'int'
    | `-CallExpr 0x14f141e50 <col:18, col:57> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x14f141d38 <col:18> 'int ()' Function 0x14f141c80 'PyObject_IsInstance' 'int ()'
    |   |-RecoveryExpr 0x14f141d58 <col:38> '<dependent type>' contains-errors lvalue
    |   `-ArraySubscriptExpr 0x14f141e30 <col:43, col:56> 'char *' lvalue
    |     |-ImplicitCastExpr 0x14f141e00 <col:43> 'char **' <ArrayToPointerDecay>
    |     | `-DeclRefExpr 0x14f141db0 <col:43> 'char *[1]' lvalue Var 0x14f128468 'req_name' 'char *[1]'
    |     `-ImplicitCastExpr 0x14f141e18 <col:52> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x14f141d90 <col:52> 'int' lvalue ParmVar 0x14f128228 'mode' 'int'
    `-IfStmt 0x14f1422d0 <line:20:5, line:24:5>
      |-UnaryOperator 0x14f141f68 <line:20:9, col:10> 'int' prefix '!' cannot overflow
      | `-ImplicitCastExpr 0x14f141f50 <col:10> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x14f141f30 <col:10> 'int' lvalue Var 0x14f128660 'isinstance' 'int'
      `-CompoundStmt 0x14f1422c0 <col:22, line:24:5>
