`-FunctionDecl 0x15a0d8948  line:1:1 invalid get_visual_text 'int (int *, char **, int *)'
  |-ParmVarDecl 0x15a0d8728 <line:2:5, col:15> col:15 invalid cap 'int *'
  |-ParmVarDecl 0x15a0d87d8 <line:3:5, col:14> col:14 used pp 'char **'
  |-ParmVarDecl 0x15a0d8858 <line:4:5, col:11> col:11 used lenp 'int *'
  `-CompoundStmt 0x15a0f4310 <line:5:1, line:39:1>
    |-IfStmt 0x15a0d8c78 <line:6:5, line:7:19>
    | |-BinaryOperator 0x15a0d8a78 <line:6:9, col:24> 'int' contains-errors '!='
    | | |-RecoveryExpr 0x15a0d8a58 <col:9> '<dependent type>' contains-errors lvalue
    | | `-CharacterLiteral 0x15a0d8a20 <col:24> 'int' 86
    | `-CallExpr 0x15a0d8c58 <line:7:2, col:19> 'int'
    |   `-ImplicitCastExpr 0x15a0d8c40 <col:2> 'int (*)()' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x15a0d8bf0 <col:2> 'int ()' Function 0x15a0d8b38 'unadjust_for_sel' 'int ()'
    |-IfStmt 0x15a0f21c8 <line:8:5, line:13:5>
    | |-BinaryOperator 0x15a0f1ef8 <line:8:9, col:41> 'int' contains-errors '!='
    | | |-CXXDependentScopeMemberExpr 0x15a0f1e00 <col:9, col:16> '<dependent type>' contains-errors lvalue .lnum
    | | | `-RecoveryExpr 0x15a0d8dc0 <col:9> '<dependent type>' contains-errors lvalue
    | | `-CXXDependentScopeMemberExpr 0x15a0f1eb0 <col:24, col:41> '<dependent type>' contains-errors lvalue .lnum
    | |   `-CXXDependentScopeMemberExpr 0x15a0f1e68 <col:24, col:32> '<dependent type>' contains-errors lvalue ->w_cursor
    | |     `-RecoveryExpr 0x15a0f1e48 <col:24> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x15a0f21a8 <line:9:5, line:13:5>
    |   |-IfStmt 0x15a0f2140 <line:10:2, line:11:26>
    |   | |-BinaryOperator 0x15a0f1f90 <line:10:6, col:13> 'int' contains-errors '!='
    |   | | |-RecoveryExpr 0x15a0f1f18 <col:6> '<dependent type>' contains-errors lvalue
    |   | | `-RecoveryExpr 0x15a0f1f70 <col:13> '<dependent type>' contains-errors lvalue
    |   | `-CallExpr 0x15a0f2118 <line:11:6, col:26> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x15a0f2090 <col:6> 'int ()' Function 0x15a0f1fd8 'clearopbeep' 'int ()'
    |   |   `-CXXDependentScopeMemberExpr 0x15a0f20d0 <col:18, col:23> '<dependent type>' contains-errors lvalue ->oap
    |   |     `-RecoveryExpr 0x15a0f20b0 <col:18> '<dependent type>' contains-errors lvalue
    |   `-ReturnStmt 0x15a0f2198 <line:12:2, col:9>
    |     `-RecoveryExpr 0x15a0f2178 <col:9> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x15a0f41a8 <line:14:5, line:36:5> has_else
    | |-BinaryOperator 0x15a0f2258 <line:14:9, col:24> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x15a0f2238 <col:9> '<dependent type>' contains-errors lvalue
    | | `-CharacterLiteral 0x15a0f2200 <col:24> 'int' 86
    | |-CompoundStmt 0x15a0f2ab8 <line:15:5, line:18:5>
    | | |-BinaryOperator 0x15a0f2840 <line:16:2, col:23> 'char *' '='
    | | | |-UnaryOperator 0x15a0f22b0 <col:2, col:3> 'char *' lvalue prefix '*' cannot overflow
    | | | | `-ImplicitCastExpr 0x15a0f2298 <col:3> 'char **' <LValueToRValue>
    | | | |   `-DeclRefExpr 0x15a0f2278 <col:3> 'char **' lvalue ParmVar 0x15a0d87d8 'pp' 'char **'
    | | | `-ImplicitCastExpr 0x15a0f2400 <col:8, col:23> 'char *' <IntegralToPointer>
    | | |   `-CallExpr 0x15a0f23e0 <col:8, col:23> 'int'
    | | |     `-ImplicitCastExpr 0x15a0f23c8 <col:8> 'int (*)()' <FunctionToPointerDecay>
    | | |       `-DeclRefExpr 0x15a0f23a8 <col:8> 'int ()' Function 0x15a0f22f0 'ml_get_curline' 'int ()'
    | | `-BinaryOperator 0x15a0f2a98 <line:17:2, col:25> 'int' '='
    | |   |-UnaryOperator 0x15a0f2898 <col:2, col:3> 'int' lvalue prefix '*' cannot overflow
    | |   | `-ImplicitCastExpr 0x15a0f2880 <col:3> 'int *' <LValueToRValue>
    | |   |   `-DeclRefExpr 0x15a0f2860 <col:3> 'int *' lvalue ParmVar 0x15a0d8858 'lenp' 'int *'
    | |   `-CStyleCastExpr 0x15a0f2a70 <col:10, col:25> 'int' <NoOp>
    | |     `-CallExpr 0x15a0f2a18 <col:15, col:25> 'int'
    | |       |-ImplicitCastExpr 0x15a0f2a00 <col:15> 'int (*)()' <FunctionToPointerDecay>
    | |       | `-DeclRefExpr 0x15a0f2990 <col:15> 'int ()' Function 0x15a0f28d8 'STRLEN' 'int ()'
    | |       `-ImplicitCastExpr 0x15a0f2a40 <col:22, col:23> 'char *' <LValueToRValue>
    | |         `-UnaryOperator 0x15a0f29e8 <col:22, col:23> 'char *' lvalue prefix '*' cannot overflow
    | |           `-ImplicitCastExpr 0x15a0f29d0 <col:23> 'char **' <LValueToRValue>
    | |             `-DeclRefExpr 0x15a0f29b0 <col:23> 'char **' lvalue ParmVar 0x15a0d87d8 'pp' 'char **'
    | `-CompoundStmt 0x15a0f4188 <line:20:5, line:36:5>
    |   |-IfStmt 0x15a0f3d80 <line:21:2, line:30:2> has_else
    |   | |-CallExpr 0x15a0f2d08 <line:21:6, col:37> '<dependent type>' contains-errors
    |   | | |-DeclRefExpr 0x15a0f2bb8 <col:6> 'int ()' Function 0x15a0f2b00 'LT_POS' 'int ()'
    |   | | |-CXXDependentScopeMemberExpr 0x15a0f2ca0 <col:13, col:21> '<dependent type>' contains-errors lvalue ->w_cursor
    |   | | | `-RecoveryExpr 0x15a0f2c80 <col:13> '<dependent type>' contains-errors lvalue
    |   | | `-RecoveryExpr 0x15a0f2ce8 <col:31> '<dependent type>' contains-errors lvalue
    |   | |-CompoundStmt 0x15a0f3c70 <line:22:2, line:25:2>
    |   | | |-BinaryOperator 0x15a0f38a0 <line:23:6, col:40> 'char *' contains-errors '='
    |   | | | |-UnaryOperator 0x15a0f37e0 <col:6, col:7> 'char *' lvalue prefix '*' cannot overflow
    |   | | | | `-ImplicitCastExpr 0x15a0f37c8 <col:7> 'char **' <LValueToRValue>
    |   | | | |   `-DeclRefExpr 0x15a0f2d38 <col:7> 'char **' lvalue ParmVar 0x15a0d87d8 'pp' 'char **'
    |   | | | `-CallExpr 0x15a0f3878 <col:12, col:40> '<dependent type>' contains-errors
    |   | | |   |-DeclRefExpr 0x15a0f36b8 <col:12> 'int ()' Function 0x15a0f3600 'ml_get_pos' 'int ()'
    |   | | |   `-UnaryOperator 0x15a0f3860 <col:23, col:32> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | | |     `-CXXDependentScopeMemberExpr 0x15a0f3818 <col:24, col:32> '<dependent type>' contains-errors lvalue ->w_cursor
    |   | | |       `-RecoveryExpr 0x15a0f37f8 <col:24> '<dependent type>' contains-errors lvalue
    |   | | `-BinaryOperator 0x15a0f3c50 <line:24:6, col:50> 'int' contains-errors '='
    |   | |   |-UnaryOperator 0x15a0f3ae0 <col:6, col:7> 'int' lvalue prefix '*' cannot overflow
    |   | |   | `-ImplicitCastExpr 0x15a0f3ac8 <col:7> 'int *' <LValueToRValue>
    |   | |   |   `-DeclRefExpr 0x15a0f38c0 <col:7> 'int *' lvalue ParmVar 0x15a0d8858 'lenp' 'int *'
    |   | |   `-BinaryOperator 0x15a0f3c30 <col:14, col:50> '<dependent type>' contains-errors '+'
    |   | |     |-BinaryOperator 0x15a0f3c10 <col:14, col:44> '<dependent type>' contains-errors '-'
    |   | |     | |-CXXDependentScopeMemberExpr 0x15a0f3b18 <col:14, col:21> '<dependent type>' contains-errors lvalue .col
    |   | |     | | `-RecoveryExpr 0x15a0f3af8 <col:14> '<dependent type>' contains-errors lvalue
    |   | |     | `-CXXDependentScopeMemberExpr 0x15a0f3bc8 <col:27, col:44> '<dependent type>' contains-errors lvalue .col
    |   | |     |   `-CXXDependentScopeMemberExpr 0x15a0f3b80 <col:27, col:35> '<dependent type>' contains-errors lvalue ->w_cursor
    |   | |     |     `-RecoveryExpr 0x15a0f3b60 <col:27> '<dependent type>' contains-errors lvalue
    |   | |     `-IntegerLiteral 0x15a0f3a38 <col:50> 'int' 1
    |   | `-CompoundStmt 0x15a0f3d70 <line:27:2, line:30:2>
    |   `-IfStmt 0x15a0f3ee0 <line:31:2, line:32:14>
    |     |-RecoveryExpr 0x15a0f3e30 <line:31:6, col:14> '_Bool' contains-errors
    |     `-BinaryOperator 0x15a0f3ec0 <line:32:6, col:14> 'int' '='
    |       |-UnaryOperator 0x15a0f3e88 <col:6, col:7> 'int' lvalue prefix '*' cannot overflow
    |       | `-ImplicitCastExpr 0x15a0f3e70 <col:7> 'int *' <LValueToRValue>
    |       |   `-DeclRefExpr 0x15a0f3e50 <col:7> 'int *' lvalue ParmVar 0x15a0d8858 'lenp' 'int *'
    |       `-IntegerLiteral 0x15a0f3ea0 <col:14> 'int' 0
    `-CallExpr 0x15a0f42f0 <line:37:5, col:28> 'int'
      `-ImplicitCastExpr 0x15a0f42d8 <col:5> 'int (*)()' <FunctionToPointerDecay>
        `-DeclRefExpr 0x15a0f42b8 <col:5> 'int ()' Function 0x15a0f4200 'reset_VIsual_and_resel' 'int ()'
