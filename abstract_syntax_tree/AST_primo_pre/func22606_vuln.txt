`-FunctionDecl 0x13208d738  line:1:1 invalid decode_bits_in_field 'int (const int, const int, const int)'
  |-ParmVarDecl 0x13208d4f0 <col:22, col:34> col:34 invalid bit_offset 'const int'
  |-ParmVarDecl 0x13208d570 <col:46, col:57> col:57 used no_of_bits 'const int'
  |-ParmVarDecl 0x13208d5f0 <col:69, col:83> col:83 invalid value 'const int'
  `-CompoundStmt 0x1320a7f48 <line:2:1, line:53:1>
    |-DeclStmt 0x13208d878 <line:4:2, col:11>
    | `-VarDecl 0x13208d810 <col:2, col:8> col:8 used str 'char *'
    |-DeclStmt 0x13208d9c8 <line:5:2, col:20>
    | |-VarDecl 0x13208d8a8 <col:2, col:6> col:6 used bit 'int'
    | `-VarDecl 0x13208d928 <col:2, col:19> col:11 used str_p 'int' cinit
    |   `-IntegerLiteral 0x13208d990 <col:19> 'int' 0
    |-DeclStmt 0x13208da60 <line:6:2, col:7>
    | `-VarDecl 0x13208d9f8 <col:2, col:6> col:6 used i 'int'
    |-BinaryOperator 0x1320a4b78 <line:12:2, col:53> 'char *' '='
    | |-DeclRefExpr 0x13208db68 <col:2> 'char *' lvalue Var 0x13208d810 'str' 'char *'
    | `-CStyleCastExpr 0x1320a4b50 <col:6, col:53> 'char *' <IntegralToPointer>
    |   `-CallExpr 0x1320a46e0 <col:14, col:53> 'int'
    |     |-ImplicitCastExpr 0x1320a46c8 <col:14> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x1320a44e0 <col:14> 'int ()' Function 0x1320a4428 'wmem_alloc0' 'int ()'
    |     |-CallExpr 0x1320a4648 <col:26, col:44> 'int'
    |     | `-ImplicitCastExpr 0x1320a4630 <col:26> 'int (*)()' <FunctionToPointerDecay>
    |     |   `-DeclRefExpr 0x1320a45e0 <col:26> 'int ()' Function 0x1320a4528 'wmem_packet_scope' 'int ()'
    |     `-BinaryOperator 0x1320a46a8 <col:47, col:51> 'int' '+'
    |       |-IntegerLiteral 0x1320a4668 <col:47> 'int' 256
    |       `-IntegerLiteral 0x1320a4688 <col:51> 'int' 64
    |-ForStmt 0x1320a5148 <line:13:2, line:20:2>
    | |-BinaryOperator 0x1320a4bd8 <line:13:6, col:10> 'int' '='
    | | |-DeclRefExpr 0x1320a4b98 <col:6> 'int' lvalue Var 0x13208d8a8 'bit' 'int'
    | | `-IntegerLiteral 0x1320a4bb8 <col:10> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x1320a4d30 <col:12, col:39> 'int' contains-errors '<'
    | | |-ImplicitCastExpr 0x1320a4d18 <col:12> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1320a4bf8 <col:12> 'int' lvalue Var 0x13208d8a8 'bit' 'int'
    | | `-ParenExpr 0x1320a4cf8 <col:16, col:39> 'int' contains-errors
    | |   `-CStyleCastExpr 0x1320a4cd0 <col:17, col:38> 'int' contains-errors <Dependent>
    | |     `-ParenExpr 0x1320a4cb0 <col:22, col:38> '<dependent type>' contains-errors
    | |       `-BinaryOperator 0x1320a4c58 <col:23, col:34> '<dependent type>' contains-errors '&'
    | |         |-RecoveryExpr 0x1320a4c18 <col:23> '<dependent type>' contains-errors lvalue
    | |         `-IntegerLiteral 0x1320a4c38 <col:34> 'int' 7
    | |-UnaryOperator 0x1320a4d70 <col:41, col:44> 'int' postfix '++'
    | | `-DeclRefExpr 0x1320a4d50 <col:41> 'int' lvalue Var 0x13208d8a8 'bit' 'int'
    | `-CompoundStmt 0x1320a5120 <col:47, line:20:2>
    |   |-IfStmt 0x1320a4fe8 <line:14:3, line:17:3>
    |   | |-BinaryOperator 0x1320a4e90 <line:14:6, col:20> 'int' '&&'
    |   | | |-ImplicitCastExpr 0x1320a4e78 <col:6> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x1320a4d88 <col:6> 'int' lvalue Var 0x13208d8a8 'bit' 'int'
    |   | | `-ParenExpr 0x1320a4e58 <col:11, col:20> 'int'
    |   | |   `-UnaryOperator 0x1320a4e40 <col:12, col:19> 'int' prefix '!' cannot overflow
    |   | |     `-ParenExpr 0x1320a4e20 <col:13, col:19> 'int'
    |   | |       `-BinaryOperator 0x1320a4e00 <col:14, col:18> 'int' '%'
    |   | |         |-ImplicitCastExpr 0x1320a4de8 <col:14> 'int' <LValueToRValue>
    |   | |         | `-DeclRefExpr 0x1320a4da8 <col:14> 'int' lvalue Var 0x13208d8a8 'bit' 'int'
    |   | |         `-IntegerLiteral 0x1320a4dc8 <col:18> 'int' 4
    |   | `-CompoundStmt 0x1320a4fc8 <col:22, line:17:3>
    |   |   |-BinaryOperator 0x1320a4f70 <line:15:4, col:17> 'char' '='
    |   |   | |-ArraySubscriptExpr 0x1320a4f20 <col:4, col:13> 'char' lvalue
    |   |   | | |-ImplicitCastExpr 0x1320a4ef0 <col:4> 'char *' <LValueToRValue>
    |   |   | | | `-DeclRefExpr 0x1320a4eb0 <col:4> 'char *' lvalue Var 0x13208d810 'str' 'char *'
    |   |   | | `-ImplicitCastExpr 0x1320a4f08 <col:8> 'int' <LValueToRValue>
    |   |   | |   `-DeclRefExpr 0x1320a4ed0 <col:8> 'int' lvalue Var 0x13208d928 'str_p' 'int'
    |   |   | `-ImplicitCastExpr 0x1320a4f58 <col:17> 'char' <IntegralCast>
    |   |   |   `-CharacterLiteral 0x1320a4f40 <col:17> 'int' 32
    |   |   `-UnaryOperator 0x1320a4fb0 <line:16:4, col:9> 'int' postfix '++'
    |   |     `-DeclRefExpr 0x1320a4f90 <col:4> 'int' lvalue Var 0x13208d928 'str_p' 'int'
    |   |-BinaryOperator 0x1320a50c8 <line:18:3, col:16> 'char' '='
    |   | |-ArraySubscriptExpr 0x1320a5078 <col:3, col:12> 'char' lvalue
    |   | | |-ImplicitCastExpr 0x1320a5048 <col:3> 'char *' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x1320a5008 <col:3> 'char *' lvalue Var 0x13208d810 'str' 'char *'
    |   | | `-ImplicitCastExpr 0x1320a5060 <col:7> 'int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x1320a5028 <col:7> 'int' lvalue Var 0x13208d928 'str_p' 'int'
    |   | `-ImplicitCastExpr 0x1320a50b0 <col:16> 'char' <IntegralCast>
    |   |   `-CharacterLiteral 0x1320a5098 <col:16> 'int' 46
    |   `-UnaryOperator 0x1320a5108 <line:19:3, col:8> 'int' postfix '++'
    |     `-DeclRefExpr 0x1320a50e8 <col:3> 'int' lvalue Var 0x13208d928 'str_p' 'int'
    |-ForStmt 0x1320a7a08 <line:23:2, line:42:2>
    | |-BinaryOperator 0x1320a51c0 <line:23:6, col:8> 'int' '='
    | | |-DeclRefExpr 0x1320a5180 <col:6> 'int' lvalue Var 0x13208d9f8 'i' 'int'
    | | `-IntegerLiteral 0x1320a51a0 <col:8> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x1320a5250 <col:10, col:12> 'int' '<'
    | | |-ImplicitCastExpr 0x1320a5220 <col:10> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1320a51e0 <col:10> 'int' lvalue Var 0x13208d9f8 'i' 'int'
    | | `-ImplicitCastExpr 0x1320a5238 <col:12> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x1320a5200 <col:12> 'const int' lvalue ParmVar 0x13208d570 'no_of_bits' 'const int'
    | |-UnaryOperator 0x1320a5290 <col:23, col:24> 'int' postfix '++'
    | | `-DeclRefExpr 0x1320a5270 <col:23> 'int' lvalue Var 0x13208d9f8 'i' 'int'
    | `-CompoundStmt 0x1320a79d8 <col:27, line:42:2>
    |   |-IfStmt 0x1320a7318 <line:24:3, line:27:3>
    |   | |-BinaryOperator 0x1320a53b0 <line:24:6, col:20> 'int' '&&'
    |   | | |-ImplicitCastExpr 0x1320a5398 <col:6> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x1320a52a8 <col:6> 'int' lvalue Var 0x13208d8a8 'bit' 'int'
    |   | | `-ParenExpr 0x1320a5378 <col:11, col:20> 'int'
    |   | |   `-UnaryOperator 0x1320a5360 <col:12, col:19> 'int' prefix '!' cannot overflow
    |   | |     `-ParenExpr 0x1320a5340 <col:13, col:19> 'int'
    |   | |       `-BinaryOperator 0x1320a5320 <col:14, col:18> 'int' '%'
    |   | |         |-ImplicitCastExpr 0x1320a5308 <col:14> 'int' <LValueToRValue>
    |   | |         | `-DeclRefExpr 0x1320a52c8 <col:14> 'int' lvalue Var 0x13208d8a8 'bit' 'int'
    |   | |         `-IntegerLiteral 0x1320a52e8 <col:18> 'int' 4
    |   | `-CompoundStmt 0x1320a72f8 <col:22, line:27:3>
    |   |   |-BinaryOperator 0x1320a72a0 <line:25:4, col:17> 'char' '='
    |   |   | |-ArraySubscriptExpr 0x1320a7250 <col:4, col:13> 'char' lvalue
    |   |   | | |-ImplicitCastExpr 0x1320a7220 <col:4> 'char *' <LValueToRValue>
    |   |   | | | `-DeclRefExpr 0x1320a53d0 <col:4> 'char *' lvalue Var 0x13208d810 'str' 'char *'
    |   |   | | `-ImplicitCastExpr 0x1320a7238 <col:8> 'int' <LValueToRValue>
    |   |   | |   `-DeclRefExpr 0x1320a7200 <col:8> 'int' lvalue Var 0x13208d928 'str_p' 'int'
    |   |   | `-ImplicitCastExpr 0x1320a7288 <col:17> 'char' <IntegralCast>
    |   |   |   `-CharacterLiteral 0x1320a7270 <col:17> 'int' 32
    |   |   `-UnaryOperator 0x1320a72e0 <line:26:4, col:9> 'int' postfix '++'
    |   |     `-DeclRefExpr 0x1320a72c0 <col:4> 'int' lvalue Var 0x13208d928 'str_p' 'int'
    |   |-IfStmt 0x1320a7598 <line:28:3, line:31:3>
    |   | |-BinaryOperator 0x1320a7440 <line:28:6, col:20> 'int' '&&'
    |   | | |-ImplicitCastExpr 0x1320a7428 <col:6> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x1320a7338 <col:6> 'int' lvalue Var 0x13208d8a8 'bit' 'int'
    |   | | `-ParenExpr 0x1320a7408 <col:11, col:20> 'int'
    |   | |   `-UnaryOperator 0x1320a73f0 <col:12, col:19> 'int' prefix '!' cannot overflow
    |   | |     `-ParenExpr 0x1320a73d0 <col:13, col:19> 'int'
    |   | |       `-BinaryOperator 0x1320a73b0 <col:14, col:18> 'int' '%'
    |   | |         |-ImplicitCastExpr 0x1320a7398 <col:14> 'int' <LValueToRValue>
    |   | |         | `-DeclRefExpr 0x1320a7358 <col:14> 'int' lvalue Var 0x13208d8a8 'bit' 'int'
    |   | |         `-IntegerLiteral 0x1320a7378 <col:18> 'int' 8
    |   | `-CompoundStmt 0x1320a7578 <col:22, line:31:3>
    |   |   |-BinaryOperator 0x1320a7520 <line:29:4, col:17> 'char' '='
    |   |   | |-ArraySubscriptExpr 0x1320a74d0 <col:4, col:13> 'char' lvalue
    |   |   | | |-ImplicitCastExpr 0x1320a74a0 <col:4> 'char *' <LValueToRValue>
    |   |   | | | `-DeclRefExpr 0x1320a7460 <col:4> 'char *' lvalue Var 0x13208d810 'str' 'char *'
    |   |   | | `-ImplicitCastExpr 0x1320a74b8 <col:8> 'int' <LValueToRValue>
    |   |   | |   `-DeclRefExpr 0x1320a7480 <col:8> 'int' lvalue Var 0x13208d928 'str_p' 'int'
    |   |   | `-ImplicitCastExpr 0x1320a7508 <col:17> 'char' <IntegralCast>
    |   |   |   `-CharacterLiteral 0x1320a74f0 <col:17> 'int' 32
    |   |   `-UnaryOperator 0x1320a7560 <line:30:4, col:9> 'int' postfix '++'
    |   |     `-DeclRefExpr 0x1320a7540 <col:4> 'int' lvalue Var 0x13208d928 'str_p' 'int'
    |   |-UnaryOperator 0x1320a75d8 <line:32:3, col:6> 'int' postfix '++'
    |   | `-DeclRefExpr 0x1320a75b8 <col:3> 'int' lvalue Var 0x13208d8a8 'bit' 'int'
    |   `-IfStmt 0x1320a7950 <line:34:3, line:40:3> has_else
    |     |-BinaryOperator 0x1320a76c0 <line:34:6, col:13> 'int' contains-errors '!='
    |     | |-RecoveryExpr 0x1320a76a0 <col:6> '<dependent type>' contains-errors lvalue
    |     | `-IntegerLiteral 0x1320a7660 <col:13> 'int' 0
    |     |-CompoundStmt 0x1320a77f8 <col:15, line:37:3>
    |     | |-BinaryOperator 0x1320a77a0 <line:35:4, col:17> 'char' '='
    |     | | |-ArraySubscriptExpr 0x1320a7750 <col:4, col:13> 'char' lvalue
    |     | | | |-ImplicitCastExpr 0x1320a7720 <col:4> 'char *' <LValueToRValue>
    |     | | | | `-DeclRefExpr 0x1320a76e0 <col:4> 'char *' lvalue Var 0x13208d810 'str' 'char *'
    |     | | | `-ImplicitCastExpr 0x1320a7738 <col:8> 'int' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x1320a7700 <col:8> 'int' lvalue Var 0x13208d928 'str_p' 'int'
    |     | | `-ImplicitCastExpr 0x1320a7788 <col:17> 'char' <IntegralCast>
    |     | |   `-CharacterLiteral 0x1320a7770 <col:17> 'int' 49
    |     | `-UnaryOperator 0x1320a77e0 <line:36:4, col:9> 'int' postfix '++'
    |     |   `-DeclRefExpr 0x1320a77c0 <col:4> 'int' lvalue Var 0x13208d928 'str_p' 'int'
    |     `-CompoundStmt 0x1320a7930 <line:37:10, line:40:3>
    |       |-BinaryOperator 0x1320a78d8 <line:38:4, col:17> 'char' '='
    |       | |-ArraySubscriptExpr 0x1320a7888 <col:4, col:13> 'char' lvalue
    |       | | |-ImplicitCastExpr 0x1320a7858 <col:4> 'char *' <LValueToRValue>
    |       | | | `-DeclRefExpr 0x1320a7818 <col:4> 'char *' lvalue Var 0x13208d810 'str' 'char *'
    |       | | `-ImplicitCastExpr 0x1320a7870 <col:8> 'int' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x1320a7838 <col:8> 'int' lvalue Var 0x13208d928 'str_p' 'int'
    |       | `-ImplicitCastExpr 0x1320a78c0 <col:17> 'char' <IntegralCast>
    |       |   `-CharacterLiteral 0x1320a78a8 <col:17> 'int' 48
    |       `-UnaryOperator 0x1320a7918 <line:39:4, col:9> 'int' postfix '++'
    |         `-DeclRefExpr 0x1320a78f8 <col:4> 'int' lvalue Var 0x13208d928 'str_p' 'int'
    |-ForStmt 0x1320a7eb0 <line:44:2, line:51:2>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-BinaryOperator 0x1320a7a98 <line:44:7, col:11> 'int' '%'
    | | |-ImplicitCastExpr 0x1320a7a80 <col:7> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1320a7a40 <col:7> 'int' lvalue Var 0x13208d8a8 'bit' 'int'
    | | `-IntegerLiteral 0x1320a7a60 <col:11> 'int' 8
    | |-UnaryOperator 0x1320a7ad8 <col:13, col:16> 'int' postfix '++'
    | | `-DeclRefExpr 0x1320a7ab8 <col:13> 'int' lvalue Var 0x13208d8a8 'bit' 'int'
    | `-CompoundStmt 0x1320a7e88 <col:19, line:51:2>
    |   |-IfStmt 0x1320a7d50 <line:45:3, line:48:3>
    |   | |-BinaryOperator 0x1320a7bf8 <line:45:6, col:20> 'int' '&&'
    |   | | |-ImplicitCastExpr 0x1320a7be0 <col:6> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x1320a7af0 <col:6> 'int' lvalue Var 0x13208d8a8 'bit' 'int'
    |   | | `-ParenExpr 0x1320a7bc0 <col:11, col:20> 'int'
    |   | |   `-UnaryOperator 0x1320a7ba8 <col:12, col:19> 'int' prefix '!' cannot overflow
    |   | |     `-ParenExpr 0x1320a7b88 <col:13, col:19> 'int'
    |   | |       `-BinaryOperator 0x1320a7b68 <col:14, col:18> 'int' '%'
    |   | |         |-ImplicitCastExpr 0x1320a7b50 <col:14> 'int' <LValueToRValue>
    |   | |         | `-DeclRefExpr 0x1320a7b10 <col:14> 'int' lvalue Var 0x13208d8a8 'bit' 'int'
    |   | |         `-IntegerLiteral 0x1320a7b30 <col:18> 'int' 4
    |   | `-CompoundStmt 0x1320a7d30 <col:22, line:48:3>
    |   |   |-BinaryOperator 0x1320a7cd8 <line:46:4, col:17> 'char' '='
    |   |   | |-ArraySubscriptExpr 0x1320a7c88 <col:4, col:13> 'char' lvalue
    |   |   | | |-ImplicitCastExpr 0x1320a7c58 <col:4> 'char *' <LValueToRValue>
    |   |   | | | `-DeclRefExpr 0x1320a7c18 <col:4> 'char *' lvalue Var 0x13208d810 'str' 'char *'
    |   |   | | `-ImplicitCastExpr 0x1320a7c70 <col:8> 'int' <LValueToRValue>
    |   |   | |   `-DeclRefExpr 0x1320a7c38 <col:8> 'int' lvalue Var 0x13208d928 'str_p' 'int'
    |   |   | `-ImplicitCastExpr 0x1320a7cc0 <col:17> 'char' <IntegralCast>
    |   |   |   `-CharacterLiteral 0x1320a7ca8 <col:17> 'int' 32
    |   |   `-UnaryOperator 0x1320a7d18 <line:47:4, col:9> 'int' postfix '++'
    |   |     `-DeclRefExpr 0x1320a7cf8 <col:4> 'int' lvalue Var 0x13208d928 'str_p' 'int'
    |   |-BinaryOperator 0x1320a7e30 <line:49:3, col:16> 'char' '='
    |   | |-ArraySubscriptExpr 0x1320a7de0 <col:3, col:12> 'char' lvalue
    |   | | |-ImplicitCastExpr 0x1320a7db0 <col:3> 'char *' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x1320a7d70 <col:3> 'char *' lvalue Var 0x13208d810 'str' 'char *'
    |   | | `-ImplicitCastExpr 0x1320a7dc8 <col:7> 'int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x1320a7d90 <col:7> 'int' lvalue Var 0x13208d928 'str_p' 'int'
    |   | `-ImplicitCastExpr 0x1320a7e18 <col:16> 'char' <IntegralCast>
    |   |   `-CharacterLiteral 0x1320a7e00 <col:16> 'int' 46
    |   `-UnaryOperator 0x1320a7e70 <line:50:3, col:8> 'int' postfix '++'
    |     `-DeclRefExpr 0x1320a7e50 <col:3> 'int' lvalue Var 0x13208d928 'str_p' 'int'
    `-ReturnStmt 0x1320a7f38 <line:52:2, col:9>
      `-ImplicitCastExpr 0x1320a7f20 <col:9> 'int' <PointerToIntegral>
        `-ImplicitCastExpr 0x1320a7f08 <col:9> 'char *' <LValueToRValue>
          `-DeclRefExpr 0x1320a7ee8 <col:9> 'char *' lvalue Var 0x13208d810 'str' 'char *'
