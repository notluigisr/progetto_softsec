`-FunctionDecl 0x13b83cef8  line:1:1 WindowChangedCheck 'int (char *, int, int *)'
  |-ParmVarDecl 0x13b83ccd8 <line:2:1, col:7> col:7 used s 'char *'
  |-ParmVarDecl 0x13b83cd58 <line:3:1, col:5> col:5 used what 'int'
  |-ParmVarDecl 0x13b83ce08 <line:4:1, col:6> col:6 used hp 'int *'
  `-CompoundStmt 0x13b854b00 <line:5:1, line:32:1>
    |-DeclStmt 0x13b83d0a0 <line:6:3, col:12>
    | `-VarDecl 0x13b83d018 <col:3, col:11> col:7 used h 'int' cinit
    |   `-IntegerLiteral 0x13b83d080 <col:11> 'int' 0
    |-DeclStmt 0x13b83d138 <line:7:3, col:8>
    | `-VarDecl 0x13b83d0d0 <col:3, col:7> col:7 used l 'int'
    |-WhileStmt 0x13b8548e0 <line:8:3, line:28:5>
    | |-ImplicitCastExpr 0x13b83d1a0 <line:8:9, col:10> 'char' <LValueToRValue>
    | | `-UnaryOperator 0x13b83d188 <col:9, col:10> 'char' lvalue prefix '*' cannot overflow
    | |   `-ImplicitCastExpr 0x13b83d170 <col:10> 'char *' <LValueToRValue>
    | |     `-DeclRefExpr 0x13b83d150 <col:10> 'char *' lvalue ParmVar 0x13b83ccd8 's' 'char *'
    | `-CompoundStmt 0x13b854888 <line:9:5, line:28:5>
    |   |-IfStmt 0x13b83d318 <line:10:7, line:11:2>
    |   | |-BinaryOperator 0x13b83d2f0 <line:10:11, col:37> 'int' '!='
    |   | | |-ImplicitCastExpr 0x13b83d2d8 <col:11, col:13> 'int' <IntegralCast>
    |   | | | `-ImplicitCastExpr 0x13b83d2c0 <col:11, col:13> 'char' <LValueToRValue>
    |   | | |   `-UnaryOperator 0x13b83d1f0 <col:11, col:13> 'char' lvalue prefix '*' cannot overflow
    |   | | |     `-UnaryOperator 0x13b83d1d8 <col:12, col:13> 'char *' postfix '++'
    |   | | |       `-DeclRefExpr 0x13b83d1b8 <col:12> 'char *' lvalue ParmVar 0x13b83ccd8 's' 'char *'
    |   | | `-ParenExpr 0x13b83d2a0 <col:19, col:37> 'int'
    |   | |   `-ConditionalOperator 0x13b83d270 <col:20, col:31> 'int'
    |   | |     |-ImplicitCastExpr 0x13b83d258 <col:20> 'int *' <LValueToRValue>
    |   | |     | `-DeclRefExpr 0x13b83d208 <col:20> 'int *' lvalue ParmVar 0x13b83ce08 'hp' 'int *'
    |   | |     |-CharacterLiteral 0x13b83d228 <col:25> 'int' 37
    |   | |     `-CharacterLiteral 0x13b83d240 <col:31> 'int' 5
    |   | `-ContinueStmt 0x13b83d310 <line:11:2>
    |   |-BinaryOperator 0x13b83d378 <line:12:7, col:11> 'int' '='
    |   | |-DeclRefExpr 0x13b83d338 <col:7> 'int' lvalue Var 0x13b83d0d0 'l' 'int'
    |   | `-IntegerLiteral 0x13b83d358 <col:11> 'int' 0
    |   |-CompoundAssignOperator 0x13b853ea0 <line:13:7, col:22> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
    |   | |-DeclRefExpr 0x13b83d398 <col:7> 'char *' lvalue ParmVar 0x13b83ccd8 's' 'char *'
    |   | `-ParenExpr 0x13b853e80 <col:12, col:22> 'int'
    |   |   `-BinaryOperator 0x13b853e60 <col:13, col:19> 'int' '=='
    |   |     |-ImplicitCastExpr 0x13b853e48 <col:13, col:14> 'int' <IntegralCast>
    |   |     | `-ImplicitCastExpr 0x13b853e30 <col:13, col:14> 'char' <LValueToRValue>
    |   |     |   `-UnaryOperator 0x13b853e00 <col:13, col:14> 'char' lvalue prefix '*' cannot overflow
    |   |     |     `-ImplicitCastExpr 0x13b83d3d8 <col:14> 'char *' <LValueToRValue>
    |   |     |       `-DeclRefExpr 0x13b83d3b8 <col:14> 'char *' lvalue ParmVar 0x13b83ccd8 's' 'char *'
    |   |     `-CharacterLiteral 0x13b853e18 <col:19> 'int' 43
    |   |-CompoundAssignOperator 0x13b853fc8 <line:14:7, col:22> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
    |   | |-DeclRefExpr 0x13b853ed0 <col:7> 'char *' lvalue ParmVar 0x13b83ccd8 's' 'char *'
    |   | `-ParenExpr 0x13b853fa8 <col:12, col:22> 'int'
    |   |   `-BinaryOperator 0x13b853f88 <col:13, col:19> 'int' '=='
    |   |     |-ImplicitCastExpr 0x13b853f70 <col:13, col:14> 'int' <IntegralCast>
    |   |     | `-ImplicitCastExpr 0x13b853f58 <col:13, col:14> 'char' <LValueToRValue>
    |   |     |   `-UnaryOperator 0x13b853f28 <col:13, col:14> 'char' lvalue prefix '*' cannot overflow
    |   |     |     `-ImplicitCastExpr 0x13b853f10 <col:14> 'char *' <LValueToRValue>
    |   |     |       `-DeclRefExpr 0x13b853ef0 <col:14> 'char *' lvalue ParmVar 0x13b83ccd8 's' 'char *'
    |   |     `-CharacterLiteral 0x13b853f40 <col:19> 'int' 45
    |   |-WhileStmt 0x13b8541c0 <line:15:7, line:16:3>
    |   | |-BinaryOperator 0x13b854168 <line:15:14, col:33> 'int' '&&'
    |   | | |-BinaryOperator 0x13b854090 <col:14, col:20> 'int' '>='
    |   | | | |-ImplicitCastExpr 0x13b854078 <col:14, col:15> 'int' <IntegralCast>
    |   | | | | `-ImplicitCastExpr 0x13b854060 <col:14, col:15> 'char' <LValueToRValue>
    |   | | | |   `-UnaryOperator 0x13b854030 <col:14, col:15> 'char' lvalue prefix '*' cannot overflow
    |   | | | |     `-ImplicitCastExpr 0x13b854018 <col:15> 'char *' <LValueToRValue>
    |   | | | |       `-DeclRefExpr 0x13b853ff8 <col:15> 'char *' lvalue ParmVar 0x13b83ccd8 's' 'char *'
    |   | | | `-CharacterLiteral 0x13b854048 <col:20> 'int' 48
    |   | | `-BinaryOperator 0x13b854148 <col:27, col:33> 'int' '<='
    |   | |   |-ImplicitCastExpr 0x13b854130 <col:27, col:28> 'int' <IntegralCast>
    |   | |   | `-ImplicitCastExpr 0x13b854118 <col:27, col:28> 'char' <LValueToRValue>
    |   | |   |   `-UnaryOperator 0x13b8540e8 <col:27, col:28> 'char' lvalue prefix '*' cannot overflow
    |   | |   |     `-ImplicitCastExpr 0x13b8540d0 <col:28> 'char *' <LValueToRValue>
    |   | |   |       `-DeclRefExpr 0x13b8540b0 <col:28> 'char *' lvalue ParmVar 0x13b83ccd8 's' 'char *'
    |   | |   `-CharacterLiteral 0x13b854100 <col:33> 'int' 57
    |   | `-UnaryOperator 0x13b8541a8 <line:16:2, col:3> 'char *' postfix '++'
    |   |   `-DeclRefExpr 0x13b854188 <col:2> 'char *' lvalue ParmVar 0x13b83ccd8 's' 'char *'
    |   |-IfStmt 0x13b854350 <line:17:7, line:21:2>
    |   | |-BinaryOperator 0x13b854278 <line:17:11, col:17> 'int' '=='
    |   | | |-ImplicitCastExpr 0x13b854260 <col:11, col:12> 'int' <IntegralCast>
    |   | | | `-ImplicitCastExpr 0x13b854248 <col:11, col:12> 'char' <LValueToRValue>
    |   | | |   `-UnaryOperator 0x13b854218 <col:11, col:12> 'char' lvalue prefix '*' cannot overflow
    |   | | |     `-ImplicitCastExpr 0x13b854200 <col:12> 'char *' <LValueToRValue>
    |   | | |       `-DeclRefExpr 0x13b8541e0 <col:12> 'char *' lvalue ParmVar 0x13b83ccd8 's' 'char *'
    |   | | `-CharacterLiteral 0x13b854230 <col:17> 'int' 76
    |   | `-CompoundStmt 0x13b854330 <line:18:2, line:21:2>
    |   |   |-UnaryOperator 0x13b8542b8 <line:19:4, col:5> 'char *' postfix '++'
    |   |   | `-DeclRefExpr 0x13b854298 <col:4> 'char *' lvalue ParmVar 0x13b83ccd8 's' 'char *'
    |   |   `-BinaryOperator 0x13b854310 <line:20:4, col:8> 'int' '='
    |   |     |-DeclRefExpr 0x13b8542d0 <col:4> 'int' lvalue Var 0x13b83d0d0 'l' 'int'
    |   |     `-IntegerLiteral 0x13b8542f0 <col:8> 'int' 256
    |   |-IfStmt 0x13b854488 <line:22:7, line:23:6>
    |   | |-BinaryOperator 0x13b854408 <line:22:11, col:17> 'int' '=='
    |   | | |-ImplicitCastExpr 0x13b8543f0 <col:11, col:12> 'int' <IntegralCast>
    |   | | | `-ImplicitCastExpr 0x13b8543d8 <col:11, col:12> 'char' <LValueToRValue>
    |   | | |   `-UnaryOperator 0x13b8543a8 <col:11, col:12> 'char' lvalue prefix '*' cannot overflow
    |   | | |     `-ImplicitCastExpr 0x13b854390 <col:12> 'char *' <LValueToRValue>
    |   | | |       `-DeclRefExpr 0x13b854370 <col:12> 'char *' lvalue ParmVar 0x13b83ccd8 's' 'char *'
    |   | | `-CharacterLiteral 0x13b8543c0 <col:17> 'int' 104
    |   | `-BinaryOperator 0x13b854468 <line:23:2, col:6> 'int' '='
    |   |   |-DeclRefExpr 0x13b854428 <col:2> 'int' lvalue Var 0x13b83d018 'h' 'int'
    |   |   `-IntegerLiteral 0x13b854448 <col:6> 'int' 1
    |   |-IfStmt 0x13b8547a8 <line:24:7, line:25:2>
    |   | |-BinaryOperator 0x13b854780 <line:24:11, col:55> 'int' '||'
    |   | | |-BinaryOperator 0x13b8546f0 <col:11, col:42> 'int' '||'
    |   | | | |-BinaryOperator 0x13b854560 <col:11, col:17> 'int' '=='
    |   | | | | |-ImplicitCastExpr 0x13b854548 <col:11, col:12> 'int' <IntegralCast>
    |   | | | | | `-ImplicitCastExpr 0x13b854518 <col:11, col:12> 'char' <LValueToRValue>
    |   | | | | |   `-UnaryOperator 0x13b8544e0 <col:11, col:12> 'char' lvalue prefix '*' cannot overflow
    |   | | | | |     `-ImplicitCastExpr 0x13b8544c8 <col:12> 'char *' <LValueToRValue>
    |   | | | | |       `-DeclRefExpr 0x13b8544a8 <col:12> 'char *' lvalue ParmVar 0x13b83ccd8 's' 'char *'
    |   | | | | `-ImplicitCastExpr 0x13b854530 <col:17> 'int' <LValueToRValue>
    |   | | | |   `-DeclRefExpr 0x13b8544f8 <col:17> 'int' lvalue ParmVar 0x13b83cd58 'what' 'int'
    |   | | | `-ParenExpr 0x13b8546d0 <col:25, col:42> 'int'
    |   | | |   `-BinaryOperator 0x13b8546b0 <col:26, col:38> 'int' '=='
    |   | | |     |-ParenExpr 0x13b854658 <col:26, col:33> 'int'
    |   | | |     | `-BinaryOperator 0x13b854638 <col:27, col:32> 'int' '|'
    |   | | |     |   |-ImplicitCastExpr 0x13b854608 <col:27, col:28> 'int' <IntegralCast>
    |   | | |     |   | `-ImplicitCastExpr 0x13b8545f0 <col:27, col:28> 'char' <LValueToRValue>
    |   | | |     |   |   `-UnaryOperator 0x13b8545b8 <col:27, col:28> 'char' lvalue prefix '*' cannot overflow
    |   | | |     |   |     `-ImplicitCastExpr 0x13b8545a0 <col:28> 'char *' <LValueToRValue>
    |   | | |     |   |       `-DeclRefExpr 0x13b854580 <col:28> 'char *' lvalue ParmVar 0x13b83ccd8 's' 'char *'
    |   | | |     |   `-ImplicitCastExpr 0x13b854620 <col:32> 'int' <LValueToRValue>
    |   | | |     |     `-DeclRefExpr 0x13b8545d0 <col:32> 'int' lvalue Var 0x13b83d0d0 'l' 'int'
    |   | | |     `-ImplicitCastExpr 0x13b854698 <col:38> 'int' <LValueToRValue>
    |   | | |       `-DeclRefExpr 0x13b854678 <col:38> 'int' lvalue ParmVar 0x13b83cd58 'what' 'int'
    |   | | `-BinaryOperator 0x13b854760 <col:47, col:55> 'int' '=='
    |   | |   |-ImplicitCastExpr 0x13b854748 <col:47> 'int' <LValueToRValue>
    |   | |   | `-DeclRefExpr 0x13b854710 <col:47> 'int' lvalue ParmVar 0x13b83cd58 'what' 'int'
    |   | |   `-CharacterLiteral 0x13b854730 <col:55> 'int' 100
    |   | `-BreakStmt 0x13b8547a0 <line:25:2>
    |   `-IfStmt 0x13b854868 <line:26:7, line:27:3>
    |     |-ImplicitCastExpr 0x13b854818 <line:26:11, col:12> 'char' <LValueToRValue>
    |     | `-UnaryOperator 0x13b854800 <col:11, col:12> 'char' lvalue prefix '*' cannot overflow
    |     |   `-ImplicitCastExpr 0x13b8547e8 <col:12> 'char *' <LValueToRValue>
    |     |     `-DeclRefExpr 0x13b8547c8 <col:12> 'char *' lvalue ParmVar 0x13b83ccd8 's' 'char *'
    |     `-UnaryOperator 0x13b854850 <line:27:2, col:3> 'char *' postfix '++'
    |       `-DeclRefExpr 0x13b854830 <col:2> 'char *' lvalue ParmVar 0x13b83ccd8 's' 'char *'
    |-IfStmt 0x13b8549e0 <line:29:3, line:30:11>
    | |-ImplicitCastExpr 0x13b854920 <line:29:7> 'int *' <LValueToRValue>
    | | `-DeclRefExpr 0x13b854900 <col:7> 'int *' lvalue ParmVar 0x13b83ce08 'hp' 'int *'
    | `-BinaryOperator 0x13b8549c0 <line:30:5, col:11> 'int' '='
    |   |-UnaryOperator 0x13b854970 <col:5, col:6> 'int' lvalue prefix '*' cannot overflow
    |   | `-ImplicitCastExpr 0x13b854958 <col:6> 'int *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x13b854938 <col:6> 'int *' lvalue ParmVar 0x13b83ce08 'hp' 'int *'
    |   `-ImplicitCastExpr 0x13b8549a8 <col:11> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x13b854988 <col:11> 'int' lvalue Var 0x13b83d018 'h' 'int'
    `-ReturnStmt 0x13b854af0 <line:31:3, col:19>
      `-ConditionalOperator 0x13b854ac0 <col:10, col:19> 'int'
        |-ImplicitCastExpr 0x13b854aa8 <col:10, col:11> 'int' <IntegralCast>
        | `-ImplicitCastExpr 0x13b854a90 <col:10, col:11> 'char' <LValueToRValue>
        |   `-UnaryOperator 0x13b854a38 <col:10, col:11> 'char' lvalue prefix '*' cannot overflow
        |     `-ImplicitCastExpr 0x13b854a20 <col:11> 'char *' <LValueToRValue>
        |       `-DeclRefExpr 0x13b854a00 <col:11> 'char *' lvalue ParmVar 0x13b83ccd8 's' 'char *'
        |-IntegerLiteral 0x13b854a50 <col:15> 'int' 1
        `-IntegerLiteral 0x13b854a70 <col:19> 'int' 0
