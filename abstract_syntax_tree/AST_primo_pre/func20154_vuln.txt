`-FunctionDecl 0x13a8bb900  line:1:6 invalid EvalHybrid 'void (int *, int *, int *, int *, const int *, const int *, const int *, int *, int *, int *)'
  |-ParmVarDecl 0x13a8bb328 <col:17, col:32> col:32 invalid context 'int *'
  |-ParmVarDecl 0x13a8bb3a8 <col:41, col:53> col:53 invalid node 'int *'
  |-ParmVarDecl 0x13a8bb428 <line:2:17, col:35> col:35 invalid params 'int *'
  |-ParmVarDecl 0x13a8bb4a8 <col:43, col:51> col:51 invalid data 'int *'
  |-ParmVarDecl 0x13a8bb528 <line:3:17, col:37> col:37 invalid input 'const int *'
  |-ParmVarDecl 0x13a8bb5a8 <col:44, col:64> col:64 invalid filter 'const int *'
  |-ParmVarDecl 0x13a8bb628 <line:4:17, col:37> col:37 invalid bias 'const int *'
  |-ParmVarDecl 0x13a8bb6a8 <col:43, col:57> col:57 invalid im2col 'int *'
  |-ParmVarDecl 0x13a8bb728 <line:5:17, col:31> col:31 invalid accum_scratch 'int *'
  |-ParmVarDecl 0x13a8bb7a8 <col:46, col:60> col:60 invalid output 'int *'
  `-CompoundStmt 0x13b077b80 <col:68, line:60:1>
    |-DeclStmt 0x13a8d4318 <line:6:3, col:53>
    | |-VarDecl 0x13a8d4218 <col:3, col:9> col:9 used output_activation_min 'float'
    | `-VarDecl 0x13a8d4298 <col:3, col:32> col:32 used output_activation_max 'float'
    |-CallExpr 0x13a8d45c0 <line:7:3, line:8:50> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x13a8d4490 <line:7:3> 'int ()' Function 0x13a8d43d8 'CalculateActivationRange' 'int ()'
    | |-CXXDependentScopeMemberExpr 0x13a8d44d0 <col:28, col:36> '<dependent type>' contains-errors lvalue ->activation
    | | `-RecoveryExpr 0x13a8d44b0 <col:28> '<dependent type>' contains-errors lvalue
    | |-UnaryOperator 0x13a8d4570 <col:48, col:49> 'float *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x13a8d4518 <col:49> 'float' lvalue Var 0x13a8d4218 'output_activation_min' 'float'
    | `-UnaryOperator 0x13a8d45a8 <line:8:28, col:29> 'float *' prefix '&' cannot overflow
    |   `-DeclRefExpr 0x13a8d4588 <col:29> 'float' lvalue Var 0x13a8d4298 'output_activation_max' 'float'
    |-DeclStmt 0x13a8d4950 <line:10:3, col:72>
    | `-VarDecl 0x13a8d4610 <col:3, col:71> col:13 used input_size 'const int' cinit
    |   `-BinaryOperator 0x13a8d4930 <col:26, col:71> '<dependent type>' contains-errors '/'
    |     |-CallExpr 0x13a8d4798 <col:26, col:43> '<dependent type>' contains-errors
    |     | |-DeclRefExpr 0x13a8d4758 <col:26> 'int ()' Function 0x13a8d46a0 'NumElements' 'int ()'
    |     | `-RecoveryExpr 0x13a8d4778 <col:38> '<dependent type>' contains-errors lvalue
    |     `-CallExpr 0x13a8d4900 <col:47, col:71> '<dependent type>' contains-errors
    |       |-DeclRefExpr 0x13a8d48a0 <col:47> 'int ()' Function 0x13a8d47e8 'SizeOfDimension' 'int ()'
    |       |-RecoveryExpr 0x13a8d48c0 <col:63> '<dependent type>' contains-errors lvalue
    |       `-IntegerLiteral 0x13a8d48e0 <col:70> 'int' 0
    |-DeclStmt 0x13a8d4a78 <line:11:3, col:51>
    | `-VarDecl 0x13a8d4980 <col:3, col:50> col:13 used batch_size 'const int' cinit
    |   `-CallExpr 0x13a8d4a48 <col:26, col:50> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x13a8d49e8 <col:26> 'int ()' Function 0x13a8d47e8 'SizeOfDimension' 'int ()'
    |     |-RecoveryExpr 0x13a8d4a08 <col:42> '<dependent type>' contains-errors lvalue
    |     `-IntegerLiteral 0x13a8d4a28 <col:49> 'int' 0
    |-DeclStmt 0x13a8d4b58 <line:13:3, col:55>
    | `-VarDecl 0x13a8d4ad8 <col:3, col:16> col:16 input_ptr 'const float *'
    |-DeclStmt 0x13a8d4e78 <line:16:3, line:17:64>
    | `-VarDecl 0x13a8d4e10 <line:16:3, col:10> col:10 used scaling_factors_ptr 'float *'
    |-CompoundStmt 0x13b077838 <line:20:3, line:30:3>
    | `-ForStmt 0x13b077800 <line:22:5, line:29:5>
    |   |-DeclStmt 0x13a8d4f30 <line:22:10, col:19>
    |   | `-VarDecl 0x13a8d4ea8 <col:10, col:18> col:14 used b 'int' cinit
    |   |   `-IntegerLiteral 0x13a8d4f10 <col:18> 'int' 0
    |   |-<<<NULL>>>
    |   |-BinaryOperator 0x13a8d4fb8 <col:21, col:25> 'int' contains-errors '<'
    |   | |-ImplicitCastExpr 0x13a8d4f88 <col:21> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x13a8d4f48 <col:21> 'int' lvalue Var 0x13a8d4ea8 'b' 'int'
    |   | `-ImplicitCastExpr 0x13a8d4fa0 <col:25> 'int' contains-errors <LValueToRValue>
    |   |   `-DeclRefExpr 0x13a8d4f68 <col:25> 'const int' contains-errors lvalue Var 0x13a8d4980 'batch_size' 'const int'
    |   |-UnaryOperator 0x13a8d4ff8 <col:37, col:39> 'int' prefix '++'
    |   | `-DeclRefExpr 0x13a8d4fd8 <col:39> 'int' lvalue Var 0x13a8d4ea8 'b' 'int'
    |   `-CompoundStmt 0x13b0777d8 <col:42, line:29:5>
    |     |-DeclStmt 0x13a8d5128 <line:23:7, col:35>
    |     | |-VarDecl 0x13a8d5028 <col:7, col:13> col:13 unused_min 'float'
    |     | `-VarDecl 0x13a8d50a8 <col:7, col:25> col:25 unused_max 'float'
    |     |-DeclStmt 0x13b077650 <line:24:7, col:40>
    |     | `-VarDecl 0x13a8d5158 <col:7, col:30> col:17 offset 'const int' cinit
    |     |   `-BinaryOperator 0x13b077630 <col:26, col:30> 'int' contains-errors '*'
    |     |     |-ImplicitCastExpr 0x13b077600 <col:26> 'int' <LValueToRValue>
    |     |     | `-DeclRefExpr 0x13a8d51c0 <col:26> 'int' lvalue Var 0x13a8d4ea8 'b' 'int'
    |     |     `-ImplicitCastExpr 0x13b077618 <col:30> 'int' contains-errors <LValueToRValue>
    |     |       `-DeclRefExpr 0x13a8d51e0 <col:30> 'const int' contains-errors lvalue Var 0x13a8d4610 'input_size' 'const int'
    |     `-CompoundAssignOperator 0x13b0777a8 <line:28:7, col:48> 'float' contains-errors '*=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    |       |-ArraySubscriptExpr 0x13b0776d8 <col:7, col:28> 'float' lvalue
    |       | |-ImplicitCastExpr 0x13b0776a8 <col:7> 'float *' <LValueToRValue>
    |       | | `-DeclRefExpr 0x13b077668 <col:7> 'float *' lvalue Var 0x13a8d4e10 'scaling_factors_ptr' 'float *'
    |       | `-ImplicitCastExpr 0x13b0776c0 <col:27> 'int' <LValueToRValue>
    |       |   `-DeclRefExpr 0x13b077688 <col:27> 'int' lvalue Var 0x13a8d4ea8 'b' 'int'
    |       `-CXXDependentScopeMemberExpr 0x13b077760 <col:33, col:48> '<dependent type>' contains-errors lvalue .scale
    |         `-CXXDependentScopeMemberExpr 0x13b077718 <col:33, col:41> '<dependent type>' contains-errors lvalue ->params
    |           `-RecoveryExpr 0x13b0776f8 <col:33> '<dependent type>' contains-errors lvalue
    `-SwitchStmt 0x13b077870 <line:32:3, line:59:3>
      |-RecoveryExpr 0x13b077850 <line:32:11> 'int' contains-errors
      `-CompoundStmt 0x13b077b68 <col:24, line:59:3>
        `-CompoundStmt 0x13b077b50 <line:36:27, line:58:5>
          `-BreakStmt 0x13b077b48 <line:57:7>
