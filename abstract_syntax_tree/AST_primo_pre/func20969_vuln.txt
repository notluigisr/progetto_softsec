`-FunctionDecl 0x14e81f3a8  line:1:1 PHP_FUNCTION 'int (int)'
  |-ParmVarDecl 0x14e81f2d8 <col:14> col:14 imageconvolution 'int'
  `-CompoundStmt 0x14f103700 <line:2:1, line:48:1>
    |-DeclStmt 0x14e81f728 <line:6:2, col:20>
    | |-VarDecl 0x14e81f628 <col:2, col:9> col:9 used div 'double'
    | `-VarDecl 0x14e81f6a8 <col:2, col:14> col:14 used offset 'double'
    |-DeclStmt 0x14e81f968 <line:7:2, col:22>
    | |-VarDecl 0x14e81f758 <col:2, col:6> col:6 used nelem 'int'
    | |-VarDecl 0x14e81f7d8 <col:2, col:13> col:13 used i 'int'
    | |-VarDecl 0x14e81f858 <col:2, col:16> col:16 used j 'int'
    | `-VarDecl 0x14e81f8d8 <col:2, col:19> col:19 used res 'int'
    |-DeclStmt 0x14e848858 <line:8:2, col:50>
    | `-VarDecl 0x14e8482d8 <col:2, col:49> col:8 used matrix 'float[3][3]' cinit
    |   `-InitListExpr 0x14e8485f0 <col:23, col:49> 'float[3][3]'
    |     |-InitListExpr 0x14e848658 <col:24, col:30> 'float[3]'
    |     | |-ImplicitCastExpr 0x14e8486b0 <col:25> 'float' <IntegralToFloating>
    |     | | `-IntegerLiteral 0x14e848340 <col:25> 'int' 0
    |     | |-ImplicitCastExpr 0x14e8486c8 <col:27> 'float' <IntegralToFloating>
    |     | | `-IntegerLiteral 0x14e848360 <col:27> 'int' 0
    |     | `-ImplicitCastExpr 0x14e8486e0 <col:29> 'float' <IntegralToFloating>
    |     |   `-IntegerLiteral 0x14e848380 <col:29> 'int' 0
    |     |-InitListExpr 0x14e848708 <col:33, col:39> 'float[3]'
    |     | |-ImplicitCastExpr 0x14e848760 <col:34> 'float' <IntegralToFloating>
    |     | | `-IntegerLiteral 0x14e8483f8 <col:34> 'int' 0
    |     | |-ImplicitCastExpr 0x14e848778 <col:36> 'float' <IntegralToFloating>
    |     | | `-IntegerLiteral 0x14e848418 <col:36> 'int' 0
    |     | `-ImplicitCastExpr 0x14e848790 <col:38> 'float' <IntegralToFloating>
    |     |   `-IntegerLiteral 0x14e848438 <col:38> 'int' 0
    |     `-InitListExpr 0x14e8487b8 <col:42, col:48> 'float[3]'
    |       |-ImplicitCastExpr 0x14e848810 <col:43> 'float' <IntegralToFloating>
    |       | `-IntegerLiteral 0x14e8484b0 <col:43> 'int' 0
    |       |-ImplicitCastExpr 0x14e848828 <col:45> 'float' <IntegralToFloating>
    |       | `-IntegerLiteral 0x14e8484d0 <col:45> 'int' 0
    |       `-ImplicitCastExpr 0x14e848840 <col:47> 'float' <IntegralToFloating>
    |         `-IntegerLiteral 0x14e8484f0 <col:47> 'int' 0
    |-IfStmt 0x14e848b50 <line:10:2, line:12:2>
    | |-RecoveryExpr 0x14e848b20 <line:10:6, col:100> '_Bool' contains-errors
    | `-CompoundStmt 0x14e848b40 <col:109, line:12:2>
    |-CallExpr 0x14e848e70 <line:14:2, col:64> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x14e848c50 <col:2> 'int ()' Function 0x14e848b98 'ZEND_FETCH_RESOURCE' 'int ()'
    | |-RecoveryExpr 0x14e848dd8 <col:22> '<dependent type>' contains-errors lvalue
    | |-RecoveryExpr 0x14e848df8 <col:30> '<dependent type>' contains-errors lvalue
    | |-UnaryOperator 0x14e848e38 <col:42, col:43> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | `-RecoveryExpr 0x14e848e18 <col:43> '<dependent type>' contains-errors lvalue
    | |-UnaryOperator 0x14e848cf0 <col:48, col:49> 'int' prefix '-'
    | | `-IntegerLiteral 0x14e848cd0 <col:49> 'int' 1
    | |-StringLiteral 0x14e848d50 <col:52> 'char[4]' lvalue "STR"
    | `-RecoveryExpr 0x14e848e50 <col:59> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x14f101708 <line:17:2, line:20:2>
    | |-BinaryOperator 0x14e849138 <line:17:6, col:15> 'int' '!='
    | | |-ImplicitCastExpr 0x14e849120 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14e8490e0 <col:6> 'int' lvalue Var 0x14e81f758 'nelem' 'int'
    | | `-IntegerLiteral 0x14e849100 <col:15> 'int' 3
    | `-CompoundStmt 0x14f1016f8 <col:18, line:20:2>
    |-ForStmt 0x14f1023f8 <line:22:2, line:40:2>
    | |-BinaryOperator 0x14f101768 <line:22:7, col:9> 'int' '='
    | | |-DeclRefExpr 0x14f101728 <col:7> 'int' lvalue Var 0x14e81f7d8 'i' 'int'
    | | `-IntegerLiteral 0x14f101748 <col:9> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x14f1017e0 <col:12, col:14> 'int' '<'
    | | |-ImplicitCastExpr 0x14f1017c8 <col:12> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14f101788 <col:12> 'int' lvalue Var 0x14e81f7d8 'i' 'int'
    | | `-IntegerLiteral 0x14f1017a8 <col:14> 'int' 3
    | |-UnaryOperator 0x14f101820 <col:17, col:18> 'int' postfix '++'
    | | `-DeclRefExpr 0x14f101800 <col:17> 'int' lvalue Var 0x14e81f7d8 'i' 'int'
    | `-CompoundStmt 0x14f1023e0 <col:22, line:40:2>
    |   `-IfStmt 0x14f1023c0 <line:23:3, line:39:3>
    |     |-RecoveryExpr 0x14f101a98 <line:23:7, col:106> '_Bool' contains-errors
    |     `-CompoundStmt 0x14f1023a0 <col:116, line:39:3>
    |       |-IfStmt 0x14f101c88 <line:24:4, line:27:4>
    |       | |-RecoveryExpr 0x14f101c18 <line:24:8, col:82> '_Bool' contains-errors
    |       | `-CompoundStmt 0x14f101c78 <col:86, line:27:4>
    |       `-ForStmt 0x14f102368 <line:29:4, line:38:4>
    |         |-BinaryOperator 0x14f101ce8 <line:29:9, col:11> 'int' '='
    |         | |-DeclRefExpr 0x14f101ca8 <col:9> 'int' lvalue Var 0x14e81f858 'j' 'int'
    |         | `-IntegerLiteral 0x14f101cc8 <col:11> 'int' 0
    |         |-<<<NULL>>>
    |         |-BinaryOperator 0x14f101d60 <col:14, col:16> 'int' '<'
    |         | |-ImplicitCastExpr 0x14f101d48 <col:14> 'int' <LValueToRValue>
    |         | | `-DeclRefExpr 0x14f101d08 <col:14> 'int' lvalue Var 0x14e81f858 'j' 'int'
    |         | `-IntegerLiteral 0x14f101d28 <col:16> 'int' 3
    |         |-UnaryOperator 0x14f101da0 <col:19, col:20> 'int' postfix '++'
    |         | `-DeclRefExpr 0x14f101d80 <col:19> 'int' lvalue Var 0x14e81f858 'j' 'int'
    |         `-CompoundStmt 0x14f102350 <col:24, line:38:4>
    |           `-IfStmt 0x14f102320 <line:30:5, line:37:5> has_else
    |             |-RecoveryExpr 0x14f101e38 <line:30:9, col:73> '_Bool' contains-errors
    |             |-CompoundStmt 0x14f1022c0 <col:82, line:34:5>
    |             `-CompoundStmt 0x14f102310 <col:12, line:37:5>
    `-IfStmt 0x14f1036d0 <line:43:2, line:47:2> has_else
      |-ImplicitCastExpr 0x14f103698 <line:43:6> 'int' <LValueToRValue>
      | `-DeclRefExpr 0x14f103678 <col:6> 'int' lvalue Var 0x14e81f8d8 'res' 'int'
      |-CompoundStmt 0x14f1036b0 <col:11, line:45:2>
      `-CompoundStmt 0x14f1036c0 <col:9, line:47:2>
