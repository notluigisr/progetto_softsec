`-FunctionDecl 0x1440fbc88  line:1:12 invalid php_snmp_write_exceptions_enabled 'int (int *, int *)' static
  |-ParmVarDecl 0x1440fbb28 <col:46, col:63> col:63 referenced invalid snmp_object 'int *'
  |-ParmVarDecl 0x1440fbba8 <col:76, col:82> col:82 referenced invalid newval 'int *'
  `-CompoundStmt 0x1441159d8 <line:2:1, line:18:1>
    |-DeclStmt 0x1440fbdf8 <line:4:2, col:19>
    | `-VarDecl 0x1440fbd58 <col:2, col:12> col:6 used ret 'int' cinit
    |   `-RecoveryExpr 0x1440fbdd8 <col:12> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x144115530 <line:5:2, line:10:2>
    | |-BinaryOperator 0x1440fc030 <line:5:6, col:26> 'int' contains-errors '!='
    | | |-CallExpr 0x1440fbfb0 <col:6, col:21> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x1440fbf70 <col:6> 'int ()' Function 0x1440fbeb8 'Z_TYPE_P' 'int ()'
    | | | `-RecoveryExpr 0x1440fbf90 <col:15> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x1440fc010 <col:26> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x144115508 <col:35, line:10:2>
    |   |-CallExpr 0x144115238 <line:7:3, col:23> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x1440fc180 <col:3> 'int ()' Function 0x1440fc0c8 'zval_copy_ctor' 'int ()'
    |   | `-UnaryOperator 0x144115220 <col:18, col:19> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   |   `-RecoveryExpr 0x144115200 <col:19> '<dependent type>' contains-errors lvalue
    |   |-CallExpr 0x1441153f0 <line:8:3, col:24> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x144115340 <col:3> 'int ()' Function 0x144115288 'convert_to_long' 'int ()'
    |   | `-UnaryOperator 0x1441153d8 <col:19, col:20> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   |   `-RecoveryExpr 0x1441153b8 <col:20> '<dependent type>' contains-errors lvalue
    |   `-BinaryOperator 0x1441154e8 <line:9:3, col:13> '<dependent type>' contains-errors '='
    |     |-RecoveryExpr 0x144115438 <col:3> '<dependent type>' contains-errors lvalue
    |     | `-DeclRefExpr 0x144115418 <col:3> 'int *' lvalue ParmVar 0x1440fbba8 'newval' 'int *'
    |     `-UnaryOperator 0x1441154d0 <col:12, col:13> '<dependent type>' contains-errors prefix '&' cannot overflow
    |       `-RecoveryExpr 0x1441154b0 <col:13> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x144115728 <line:12:2, col:51> '<dependent type>' contains-errors '='
    | |-CXXDependentScopeMemberExpr 0x144115598 <col:2, col:15> '<dependent type>' contains-errors lvalue ->exceptions_enabled
    | | `-RecoveryExpr 0x144115570 <col:2> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x144115550 <col:2> 'int *' lvalue ParmVar 0x1440fbb28 'snmp_object' 'int *'
    | `-CallExpr 0x144115700 <col:36, col:51> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x1441156c0 <col:36> 'int ()' Function 0x144115608 'Z_LVAL_P' 'int ()'
    |   `-RecoveryExpr 0x1441156e0 <col:45> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x144115970 <line:14:2, line:16:2>
    | |-BinaryOperator 0x1441157f0 <line:14:6, col:17> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x144115748 <col:6> '<dependent type>' contains-errors lvalue
    | | `-UnaryOperator 0x1441157d8 <col:16, col:17> '<dependent type>' contains-errors prefix '&' cannot overflow
    | |   `-RecoveryExpr 0x1441157b8 <col:17> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x144115958 <col:23, line:16:2>
    |   `-CallExpr 0x144115930 <line:15:3, col:19> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x1441158f0 <col:3> 'int ()' Function 0x144115838 'zval_dtor' 'int ()'
    |     `-RecoveryExpr 0x144115910 <col:13> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x1441159c8 <line:17:2, col:9>
      `-ImplicitCastExpr 0x1441159b0 <col:9> 'int' contains-errors <LValueToRValue>
        `-DeclRefExpr 0x144115990 <col:9> 'int' contains-errors lvalue Var 0x1440fbd58 'ret' 'int'
