`-FunctionDecl 0x13780df18  line:1:14 invalid _xml_xmlchar_zval 'int *(const int *, int, const int *)' static
  |-ParmVarDecl 0x13780dcf0 <col:32, col:48> col:48 invalid s 'const int *'
  |-ParmVarDecl 0x13780dd70 <col:51, col:55> col:55 used len 'int'
  |-ParmVarDecl 0x13780ddf0 <col:60, col:76> col:76 invalid encoding 'const int *'
  `-CompoundStmt 0x137827e48 <line:2:1, line:16:1>
    |-CallExpr 0x13780e1d0 <line:4:2, col:19> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x13780e150 <col:2> 'int ()' Function 0x13780e098 'MAKE_STD_ZVAL' 'int ()'
    | `-RecoveryExpr 0x13780e1b0 <col:16> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x137827490 <line:6:2, line:9:2>
    | |-BinaryOperator 0x13780e270 <line:6:6, col:11> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x13780e1f8 <col:6> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x13780e250 <col:11> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x137827470 <col:17, line:9:2>
    |   |-CallExpr 0x137827400 <line:7:3, col:17> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x13780e370 <col:3> 'int ()' Function 0x13780e2b8 'ZVAL_FALSE' 'int ()'
    |   | `-RecoveryExpr 0x13780e3d0 <col:14> '<dependent type>' contains-errors lvalue
    |   `-ReturnStmt 0x137827460 <line:8:3, col:10>
    |     `-RecoveryExpr 0x137827440 <col:10> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x1378276c8 <line:10:2, line:12:2>
    | |-BinaryOperator 0x137827508 <line:10:6, col:13> 'int' '=='
    | | |-ImplicitCastExpr 0x1378274f0 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1378274b0 <col:6> 'int' lvalue ParmVar 0x13780dd70 'len' 'int'
    | | `-IntegerLiteral 0x1378274d0 <col:13> 'int' 0
    | `-CompoundStmt 0x1378276b0 <col:16, line:12:2>
    |   `-BinaryOperator 0x137827690 <line:11:3, col:26> 'int' contains-errors '='
    |     |-DeclRefExpr 0x137827528 <col:3> 'int' lvalue ParmVar 0x13780dd70 'len' 'int'
    |     `-CallExpr 0x137827668 <col:9, col:26> '<dependent type>' contains-errors
    |       |-DeclRefExpr 0x137827628 <col:9> 'int ()' Function 0x137827570 '_xml_xmlcharlen' 'int ()'
    |       `-RecoveryExpr 0x137827648 <col:25> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x1378278c8 <line:13:2, col:18> '<dependent type>' contains-errors '='
    | |-CallExpr 0x137827880 <col:2, col:14> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x1378277c8 <col:2> 'int ()' Function 0x137827710 'Z_TYPE_P' 'int ()'
    | | `-RecoveryExpr 0x137827860 <col:11> '<dependent type>' contains-errors lvalue
    | `-RecoveryExpr 0x1378278a8 <col:18> '<dependent type>' contains-errors lvalue
    `-BinaryOperator 0x137827e28 <line:14:2, col:70> '<dependent type>' contains-errors '='
      |-CallExpr 0x137827d60 <col:2, col:16> '<dependent type>' contains-errors
      | |-DeclRefExpr 0x1378279c8 <col:2> 'int ()' Function 0x137827910 'Z_STRVAL_P' 'int ()'
      | `-RecoveryExpr 0x137827d40 <col:13> '<dependent type>' contains-errors lvalue
      `-CallExpr 0x137827de8 <col:20, col:70> '<dependent type>' contains-errors
        |-DeclRefExpr 0x137827b08 <col:20> 'int ()' Function 0x137827a50 'xml_utf8_decode' 'int ()'
        |-RecoveryExpr 0x137827b28 <col:36> '<dependent type>' contains-errors lvalue
        |-DeclRefExpr 0x137827b48 <col:39> 'int' lvalue ParmVar 0x13780dd70 'len' 'int'
        |-UnaryOperator 0x137827dd0 <col:44, col:59> '<dependent type>' contains-errors prefix '&' cannot overflow
        | `-CallExpr 0x137827da8 <col:45, col:59> '<dependent type>' contains-errors
        |   |-DeclRefExpr 0x137827c48 <col:45> 'int ()' Function 0x137827b90 'Z_STRLEN_P' 'int ()'
        |   `-RecoveryExpr 0x137827d88 <col:56> '<dependent type>' contains-errors lvalue
        `-RecoveryExpr 0x137827cc0 <col:62> '<dependent type>' contains-errors lvalue
