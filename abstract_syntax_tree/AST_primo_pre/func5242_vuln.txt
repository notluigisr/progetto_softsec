`-FunctionDecl 0x132928238  line:1:1 copytoks 'int (int, int)'
  |-ParmVarDecl 0x1329280d8 <col:11, col:15> col:15 used tindex 'int'
  |-ParmVarDecl 0x132928158 <col:23, col:27> col:27 used ntokens 'int'
  `-CompoundStmt 0x132940ca0 <line:2:1, line:12:1>
    |-DeclStmt 0x1329283b8 <line:3:3, col:8>
    | `-VarDecl 0x132928350 <col:3, col:7> col:7 used i 'int'
    `-ForStmt 0x132940c68 <line:5:3, line:11:5>
      |-BinaryOperator 0x132928410 <line:5:8, col:12> 'int' '='
      | |-DeclRefExpr 0x1329283d0 <col:8> 'int' lvalue Var 0x132928350 'i' 'int'
      | `-IntegerLiteral 0x1329283f0 <col:12> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x1329284a0 <col:15, col:19> 'int' '<'
      | |-ImplicitCastExpr 0x132928470 <col:15> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x132928430 <col:15> 'int' lvalue Var 0x132928350 'i' 'int'
      | `-ImplicitCastExpr 0x132928488 <col:19> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x132928450 <col:19> 'int' lvalue ParmVar 0x132928158 'ntokens' 'int'
      |-UnaryOperator 0x1329284e0 <col:28, col:30> 'int' prefix '++'
      | `-DeclRefExpr 0x1329284c0 <col:30> 'int' lvalue Var 0x132928350 'i' 'int'
      `-CompoundStmt 0x132940c58 <line:6:5, line:11:5>
