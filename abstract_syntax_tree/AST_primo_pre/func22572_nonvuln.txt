`-FunctionDecl 0x124128750  line:1:6 skb_orphan_partial 'void (struct sk_buff *)'
  |-ParmVarDecl 0x124128648 <col:25, col:41> col:41 used skb 'struct sk_buff *'
  `-CompoundStmt 0x124141768 <line:2:1, line:20:1>
    |-IfStmt 0x124140c48 <line:3:2, line:4:3>
    | |-CallExpr 0x124140bf8 <line:3:6, col:29> 'int'
    | | |-ImplicitCastExpr 0x124140be0 <col:6> 'int (*)()' <FunctionToPointerDecay>
    | | | `-DeclRefExpr 0x124140b70 <col:6> 'int ()' Function 0x124140ab8 'skb_is_tcp_pure_ack' 'int ()'
    | | `-ImplicitCastExpr 0x124140c20 <col:26> 'struct sk_buff *' <LValueToRValue>
    | |   `-DeclRefExpr 0x124140b90 <col:26> 'struct sk_buff *' lvalue ParmVar 0x124128648 'skb' 'struct sk_buff *'
    | `-ReturnStmt 0x124140c38 <line:4:3>
    `-IfStmt 0x124141738 <line:6:2, line:19:2> has_else
      |-BinaryOperator 0x124140d20 <line:6:6, col:25> 'int' contains-errors '=='
      | |-RecoveryExpr 0x124140ca0 <col:6, col:11> '<dependent type>' contains-errors lvalue
      | | `-DeclRefExpr 0x124140c68 <col:6> 'struct sk_buff *' lvalue ParmVar 0x124128648 'skb' 'struct sk_buff *'
      | `-RecoveryExpr 0x124140d00 <col:25> '<dependent type>' contains-errors lvalue
      |-CompoundStmt 0x124141588 <line:10:5, line:17:2>
      | |-DeclStmt 0x124140f88 <line:11:3, col:28>
      | | |-RecordDecl 0x124140d40 <col:3, col:10> col:10 struct sock
      | | `-VarDecl 0x124140ea8 <col:3, col:26> col:16 used sk 'struct sock *' cinit
      | |   `-RecoveryExpr 0x124140f48 <col:21, col:26> '<dependent type>' contains-errors lvalue
      | |     `-DeclRefExpr 0x124140f10 <col:21> 'struct sk_buff *' lvalue ParmVar 0x124128648 'skb' 'struct sk_buff *'
      | `-IfStmt 0x124141568 <line:13:3, line:16:3>
      |   |-CallExpr 0x124141118 <line:13:7, col:43> '<dependent type>' contains-errors
      |   | |-DeclRefExpr 0x124141080 <col:7> 'int ()' Function 0x124140fc8 'refcount_inc_not_zero' 'int ()'
      |   | `-UnaryOperator 0x124141100 <col:29, col:34> '<dependent type>' contains-errors prefix '&' cannot overflow
      |   |   `-RecoveryExpr 0x1241410d8 <col:30, col:34> '<dependent type>' contains-errors lvalue
      |   |     `-DeclRefExpr 0x1241410a0 <col:30> 'struct sock *' contains-errors lvalue Var 0x124140ea8 'sk' 'struct sock *'
      |   `-CompoundStmt 0x124141548 <col:46, line:16:3>
      |     |-CallExpr 0x124141448 <line:14:4, col:68> '<dependent type>' contains-errors
      |     | |-DeclRefExpr 0x124141220 <col:4> 'int ()' Function 0x124141168 'WARN_ON' 'int ()'
      |     | `-CallExpr 0x124141418 <col:12, col:67> '<dependent type>' contains-errors
      |     |   |-DeclRefExpr 0x124141320 <col:12> 'int ()' Function 0x124141268 'refcount_sub_and_test' 'int ()'
      |     |   |-RecoveryExpr 0x124141378 <col:34, col:39> '<dependent type>' contains-errors lvalue
      |     |   | `-DeclRefExpr 0x124141340 <col:34> 'struct sk_buff *' lvalue ParmVar 0x124128648 'skb' 'struct sk_buff *'
      |     |   `-UnaryOperator 0x124141400 <col:49, col:54> '<dependent type>' contains-errors prefix '&' cannot overflow
      |     |     `-RecoveryExpr 0x1241413d8 <col:50, col:54> '<dependent type>' contains-errors lvalue
      |     |       `-DeclRefExpr 0x1241413a0 <col:50> 'struct sock *' contains-errors lvalue Var 0x124140ea8 'sk' 'struct sock *'
      |     `-BinaryOperator 0x124141528 <line:15:4, col:22> '<dependent type>' contains-errors '='
      |       |-RecoveryExpr 0x1241414a8 <col:4, col:9> '<dependent type>' contains-errors lvalue
      |       | `-DeclRefExpr 0x124141470 <col:4> 'struct sk_buff *' lvalue ParmVar 0x124128648 'skb' 'struct sk_buff *'
      |       `-RecoveryExpr 0x124141508 <col:22> '<dependent type>' contains-errors lvalue
      `-CompoundStmt 0x124141720 <line:17:9, line:19:2>
        `-CallExpr 0x1241416e0 <line:18:3, col:17> 'int'
          |-ImplicitCastExpr 0x1241416c8 <col:3> 'int (*)()' <FunctionToPointerDecay>
          | `-DeclRefExpr 0x124141688 <col:3> 'int ()' Function 0x1241415d0 'skb_orphan' 'int ()'
          `-ImplicitCastExpr 0x124141708 <col:14> 'struct sk_buff *' <LValueToRValue>
            `-DeclRefExpr 0x1241416a8 <col:14> 'struct sk_buff *' lvalue ParmVar 0x124128648 'skb' 'struct sk_buff *'
