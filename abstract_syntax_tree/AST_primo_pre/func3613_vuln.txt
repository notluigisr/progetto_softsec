`-FunctionDecl 0x128928118  line:1:1 referenced cleanup_environment 'int ()'
  `-CompoundStmt 0x128945f40 <line:2:1, line:32:1>
    |-IfStmt 0x128941660 <line:3:1, line:21:3> has_else
    | |-BinaryOperator 0x128928430 <line:3:5, col:47> 'int' '||'
    | | |-UnaryOperator 0x128928378 <col:5, col:6> 'int' prefix '!' cannot overflow
    | | | `-ImplicitCastExpr 0x128928360 <col:6> 'int (*)()' <FunctionToPointerDecay>
    | | |   `-DeclRefExpr 0x128928308 <col:6> 'int ()' Function 0x128928118 'cleanup_environment' 'int ()'
    | | `-BinaryOperator 0x128928410 <col:26, col:47> 'int' '=='
    | |   |-ImplicitCastExpr 0x1289283e0 <col:26, col:27> 'int (*)()' <FunctionToPointerDecay>
    | |   | `-UnaryOperator 0x1289283c8 <col:26, col:27> 'int ()' prefix '*' cannot overflow
    | |   |   `-ImplicitCastExpr 0x1289283b0 <col:27> 'int (*)()' <FunctionToPointerDecay>
    | |   |     `-DeclRefExpr 0x128928390 <col:27> 'int ()' Function 0x128928118 'cleanup_environment' 'int ()'
    | |   `-ImplicitCastExpr 0x1289283f8 <col:47> 'int (*)()' <NullToPointer>
    | |     `-CharacterLiteral 0x1289282b0 <col:47> 'int' 0
    | |-CallExpr 0x128928568 <line:4:3, col:12> 'int'
    | | `-ImplicitCastExpr 0x128928550 <col:3> 'int (*)()' <FunctionToPointerDecay>
    | |   `-DeclRefExpr 0x128928530 <col:3> 'int ()' Function 0x128928478 'clearenv' 'int ()'
    | `-IfStmt 0x128941640 <line:5:6, line:21:3>
    |   |-BinaryOperator 0x128940a18 <line:5:10, col:46> 'int' '!='
    |   | |-CallExpr 0x1289287a8 <col:10, col:41> 'int'
    |   | | |-ImplicitCastExpr 0x128928790 <col:10> 'int (*)()' <FunctionToPointerDecay>
    |   | | | `-DeclRefExpr 0x128928668 <col:10> 'int ()' Function 0x1289285b0 'Ustrcmp' 'int ()'
    |   | | |-ImplicitCastExpr 0x1289287d8 <col:18> 'int (*)()' <FunctionToPointerDecay>
    |   | | | `-DeclRefExpr 0x128928770 <col:18> 'int ()' Function 0x128928118 'cleanup_environment' 'int ()'
    |   | | `-ImplicitCastExpr 0x128940a00 <col:36> 'char *' <ArrayToPointerDecay>
    |   | |   `-StringLiteral 0x1289286e0 <col:36> 'char[4]' lvalue "STR"
    |   | `-IntegerLiteral 0x128928730 <col:46> 'int' 0
    |   `-CompoundStmt 0x128941620 <line:6:3, line:21:3>
    |     |-DeclStmt 0x128940af0 <line:7:3, col:13>
    |     | `-VarDecl 0x128940a88 <col:3, col:12> col:12 used p 'char **'
    |     `-IfStmt 0x128941600 <line:8:3, line:20:5>
    |       |-RecoveryExpr 0x128940b20 <line:8:7> '<dependent type>' contains-errors lvalue
    |       `-ForStmt 0x1289415c8 <col:16, line:20:5>
    |         |-<<<NULL>>>
    |         |-<<<NULL>>>
    |         |-ImplicitCastExpr 0x128940be8 <line:8:38, col:39> 'char *' <LValueToRValue>
    |         | `-UnaryOperator 0x128940bd0 <col:38, col:39> 'char *' lvalue prefix '*' cannot overflow
    |         |   `-ImplicitCastExpr 0x128940bb8 <col:39> 'char **' <LValueToRValue>
    |         |     `-DeclRefExpr 0x128940b98 <col:39> 'char **' lvalue Var 0x128940a88 'p' 'char **'
    |         |-<<<NULL>>>
    |         `-CompoundStmt 0x1289415a0 <line:9:5, line:20:5>
    |           |-DeclStmt 0x128940de8 <line:10:5, col:62>
    |           | `-VarDecl 0x128940c18 <col:5, col:13> col:13 used name 'char *'
    |           |-IfStmt 0x1289413f8 <line:12:5, line:17:8> has_else
    |           | |-BinaryOperator 0x128941220 <line:12:9, line:13:49> 'int' contains-errors '!='
    |           | | |-RecoveryExpr 0x1289410a0 <line:12:9> '<dependent type>' contains-errors lvalue
    |           | | `-CallExpr 0x1289411c0 <col:15, line:13:49> '<dependent type>' contains-errors
    |           | |   |-DeclRefExpr 0x128940ef8 <line:12:15> 'int ()' Function 0x128940e40 'match_isinlist' 'int ()'
    |           | |   |-DeclRefExpr 0x128940f18 <col:30> 'char *' lvalue Var 0x128940c18 'name' 'char *'
    |           | |   |-BinaryOperator 0x128941100 <col:36, col:42> '<dependent type>' contains-errors '&'
    |           | |   | |-RecoveryExpr 0x1289410c0 <col:36> '<dependent type>' contains-errors lvalue
    |           | |   | `-RecoveryExpr 0x1289410e0 <col:42> '<dependent type>' contains-errors lvalue
    |           | |   |-IntegerLiteral 0x128940f88 <line:13:9> 'int' 0
    |           | |   |-RecoveryExpr 0x128941120 <col:12> '<dependent type>' contains-errors lvalue
    |           | |   |-RecoveryExpr 0x128941140 <col:18> '<dependent type>' contains-errors lvalue
    |           | |   |-RecoveryExpr 0x128941160 <col:24> '<dependent type>' contains-errors lvalue
    |           | |   |-RecoveryExpr 0x128941180 <col:38> '<dependent type>' contains-errors lvalue
    |           | |   `-RecoveryExpr 0x1289411a0 <col:45> '<dependent type>' contains-errors lvalue
    |           | |-IfStmt 0x128941390 <line:14:7, line:15:12> has_else
    |           | | |-RecoveryExpr 0x128941360 <line:14:11, col:31> '_Bool' contains-errors
    |           | | |-NullStmt 0x128941388 <col:34>
    |           | | `-NullStmt 0x128941380 <line:15:12>
    |           | `-UnaryOperator 0x1289413e0 <line:17:7, col:8> 'char **' postfix '++'
    |           |   `-DeclRefExpr 0x1289413c0 <col:7> 'char **' lvalue Var 0x128940a88 'p' 'char **'
    |           `-CallExpr 0x128941560 <line:19:5, col:21> 'int'
    |             |-ImplicitCastExpr 0x128941548 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |             | `-DeclRefExpr 0x128941508 <col:5> 'int ()' Function 0x128941450 'store_reset' 'int ()'
    |             `-ImplicitCastExpr 0x128941588 <col:17> 'char *' <LValueToRValue>
    |               `-DeclRefExpr 0x128941528 <col:17> 'char *' lvalue Var 0x128940c18 'name' 'char *'
    `-IfStmt 0x128945f20 <line:22:1, line:29:3>
      |-RecoveryExpr 0x128941690 <line:22:5> '_Bool' contains-errors
      `-CompoundStmt 0x128945f00 <line:23:3, line:29:3>
        |-DeclStmt 0x128941750 <line:25:5, col:16>
        | `-VarDecl 0x1289416c8 <col:5, col:15> col:9 used sep 'int' cinit
        |   `-IntegerLiteral 0x128941730 <col:15> 'int' 0
        `-DeclStmt 0x1289417e8 <line:26:5, col:44>
          `-VarDecl 0x128941780 <col:5, col:19> col:19 invalid envlist 'const int *'
