`-FunctionDecl 0x13000dde8  line:1:15 filter_catmullrom 'double (const double)' static
  |-ParmVarDecl 0x13000dcd8 <col:33, col:46> col:46 used x 'const double'
  `-CompoundStmt 0x130027048 <line:2:1, line:14:1>
    |-IfStmt 0x13000dfd8 <line:3:2, line:4:14>
    | |-BinaryOperator 0x13000df50 <line:3:6, col:11> 'int' '<'
    | | |-ImplicitCastExpr 0x13000df38 <col:6> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x13000dee0 <col:6> 'const double' lvalue ParmVar 0x13000dcd8 'x' 'const double'
    | | `-UnaryOperator 0x13000df20 <col:10, col:11> 'double' prefix '-'
    | |   `-FloatingLiteral 0x13000df00 <col:11> 'double' 2.000000e+00
    | `-ReturnStmt 0x13000dfc8 <line:4:3, col:14>
    |   `-ImplicitCastExpr 0x13000dfb0 <col:9, col:14> 'double' <FloatingCast>
    |     `-ParenExpr 0x13000df90 <col:9, col:14> 'float'
    |       `-FloatingLiteral 0x13000df70 <col:10> 'float' 0.000000e+00
    |-IfStmt 0x13000e360 <line:5:2, line:6:41>
    | |-BinaryOperator 0x13000e068 <line:5:6, col:11> 'int' '<'
    | | |-ImplicitCastExpr 0x13000e050 <col:6> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x13000dff8 <col:6> 'const double' lvalue ParmVar 0x13000dcd8 'x' 'const double'
    | | `-UnaryOperator 0x13000e038 <col:10, col:11> 'double' prefix '-'
    | |   `-FloatingLiteral 0x13000e018 <col:11> 'double' 1.000000e+00
    | `-ReturnStmt 0x13000e350 <line:6:3, col:41>
    |   `-ParenExpr 0x13000e330 <col:9, col:41> 'double'
    |     `-BinaryOperator 0x13000e310 <col:10, col:40> 'double' '*'
    |       |-ImplicitCastExpr 0x13000e2f8 <col:10> 'double' <FloatingCast>
    |       | `-FloatingLiteral 0x13000e088 <col:10> 'float' 5.000000e-01
    |       `-ParenExpr 0x13000e2d8 <col:15, col:40> 'double'
    |         `-BinaryOperator 0x13000e2b8 <col:16, col:39> 'double' '+'
    |           |-ImplicitCastExpr 0x13000e2a0 <col:16> 'double' <FloatingCast>
    |           | `-FloatingLiteral 0x13000e0a8 <col:16> 'float' 4.000000e+00
    |           `-BinaryOperator 0x13000e280 <col:21, col:39> 'double' '*'
    |             |-ImplicitCastExpr 0x13000e268 <col:21> 'double' <LValueToRValue>
    |             | `-DeclRefExpr 0x13000e0c8 <col:21> 'const double' lvalue ParmVar 0x13000dcd8 'x' 'const double'
    |             `-ParenExpr 0x13000e248 <col:23, col:39> 'double'
    |               `-BinaryOperator 0x13000e228 <col:24, col:38> 'double' '+'
    |                 |-ImplicitCastExpr 0x13000e210 <col:24> 'double' <FloatingCast>
    |                 | `-FloatingLiteral 0x13000e0e8 <col:24> 'float' 8.000000e+00
    |                 `-BinaryOperator 0x13000e1f0 <col:29, col:38> 'double' '*'
    |                   |-ImplicitCastExpr 0x13000e1d8 <col:29> 'double' <LValueToRValue>
    |                   | `-DeclRefExpr 0x13000e108 <col:29> 'const double' lvalue ParmVar 0x13000dcd8 'x' 'const double'
    |                   `-ParenExpr 0x13000e1b8 <col:31, col:38> 'double'
    |                     `-BinaryOperator 0x13000e198 <col:32, col:37> 'double' '+'
    |                       |-ImplicitCastExpr 0x13000e180 <col:32> 'double' <FloatingCast>
    |                       | `-FloatingLiteral 0x13000e128 <col:32> 'float' 5.000000e+00
    |                       `-ImplicitCastExpr 0x13000e168 <col:37> 'double' <LValueToRValue>
    |                         `-DeclRefExpr 0x13000e148 <col:37> 'const double' lvalue ParmVar 0x13000dcd8 'x' 'const double'
    |-IfStmt 0x1300268d0 <line:7:2, line:8:40>
    | |-BinaryOperator 0x13000e3d8 <line:7:6, col:10> 'int' '<'
    | | |-ImplicitCastExpr 0x13000e3c0 <col:6> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x13000e380 <col:6> 'const double' lvalue ParmVar 0x13000dcd8 'x' 'const double'
    | | `-FloatingLiteral 0x13000e3a0 <col:10> 'double' 0.000000e+00
    | `-ReturnStmt 0x1300268c0 <line:8:3, col:40>
    |   `-ParenExpr 0x1300268a0 <col:9, col:40> 'double'
    |     `-BinaryOperator 0x130026880 <col:10, col:39> 'double' '*'
    |       |-ImplicitCastExpr 0x130026868 <col:10> 'double' <FloatingCast>
    |       | `-FloatingLiteral 0x130026600 <col:10> 'float' 5.000000e-01
    |       `-ParenExpr 0x130026848 <col:15, col:39> 'double'
    |         `-BinaryOperator 0x130026828 <col:16, col:38> 'double' '+'
    |           |-ImplicitCastExpr 0x130026810 <col:16> 'double' <FloatingCast>
    |           | `-FloatingLiteral 0x130026620 <col:16> 'float' 2.000000e+00
    |           `-BinaryOperator 0x1300267f0 <col:21, col:38> 'double' '*'
    |             |-BinaryOperator 0x1300266b0 <col:21, col:23> 'double' '*'
    |             | |-ImplicitCastExpr 0x130026680 <col:21> 'double' <LValueToRValue>
    |             | | `-DeclRefExpr 0x130026640 <col:21> 'const double' lvalue ParmVar 0x13000dcd8 'x' 'const double'
    |             | `-ImplicitCastExpr 0x130026698 <col:23> 'double' <LValueToRValue>
    |             |   `-DeclRefExpr 0x130026660 <col:23> 'const double' lvalue ParmVar 0x13000dcd8 'x' 'const double'
    |             `-ParenExpr 0x1300267d0 <col:25, col:38> 'double'
    |               `-BinaryOperator 0x1300267b0 <col:26, col:37> 'double' '-'
    |                 |-ImplicitCastExpr 0x130026798 <col:26, col:27> 'double' <FloatingCast>
    |                 | `-UnaryOperator 0x1300266f0 <col:26, col:27> 'float' prefix '-'
    |                 |   `-FloatingLiteral 0x1300266d0 <col:27> 'float' 5.000000e+00
    |                 `-BinaryOperator 0x130026778 <col:32, col:37> 'double' '*'
    |                   |-ImplicitCastExpr 0x130026760 <col:32> 'double' <FloatingCast>
    |                   | `-FloatingLiteral 0x130026708 <col:32> 'float' 3.000000e+00
    |                   `-ImplicitCastExpr 0x130026748 <col:37> 'double' <LValueToRValue>
    |                     `-DeclRefExpr 0x130026728 <col:37> 'const double' lvalue ParmVar 0x13000dcd8 'x' 'const double'
    |-IfStmt 0x130026c38 <line:9:2, line:10:40>
    | |-BinaryOperator 0x130026948 <line:9:6, col:10> 'int' '<'
    | | |-ImplicitCastExpr 0x130026930 <col:6> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x1300268f0 <col:6> 'const double' lvalue ParmVar 0x13000dcd8 'x' 'const double'
    | | `-FloatingLiteral 0x130026910 <col:10> 'double' 1.000000e+00
    | `-ReturnStmt 0x130026c28 <line:10:3, col:40>
    |   `-ParenExpr 0x130026c08 <col:9, col:40> 'double'
    |     `-BinaryOperator 0x130026be8 <col:10, col:39> 'double' '*'
    |       |-ImplicitCastExpr 0x130026bd0 <col:10> 'double' <FloatingCast>
    |       | `-FloatingLiteral 0x130026968 <col:10> 'float' 5.000000e-01
    |       `-ParenExpr 0x130026bb0 <col:15, col:39> 'double'
    |         `-BinaryOperator 0x130026b90 <col:16, col:38> 'double' '+'
    |           |-ImplicitCastExpr 0x130026b78 <col:16> 'double' <FloatingCast>
    |           | `-FloatingLiteral 0x130026988 <col:16> 'float' 2.000000e+00
    |           `-BinaryOperator 0x130026b58 <col:21, col:38> 'double' '*'
    |             |-BinaryOperator 0x130026a18 <col:21, col:23> 'double' '*'
    |             | |-ImplicitCastExpr 0x1300269e8 <col:21> 'double' <LValueToRValue>
    |             | | `-DeclRefExpr 0x1300269a8 <col:21> 'const double' lvalue ParmVar 0x13000dcd8 'x' 'const double'
    |             | `-ImplicitCastExpr 0x130026a00 <col:23> 'double' <LValueToRValue>
    |             |   `-DeclRefExpr 0x1300269c8 <col:23> 'const double' lvalue ParmVar 0x13000dcd8 'x' 'const double'
    |             `-ParenExpr 0x130026b38 <col:25, col:38> 'double'
    |               `-BinaryOperator 0x130026b18 <col:26, col:37> 'double' '+'
    |                 |-ImplicitCastExpr 0x130026b00 <col:26, col:27> 'double' <FloatingCast>
    |                 | `-UnaryOperator 0x130026a58 <col:26, col:27> 'float' prefix '-'
    |                 |   `-FloatingLiteral 0x130026a38 <col:27> 'float' 5.000000e+00
    |                 `-BinaryOperator 0x130026ae0 <col:32, col:37> 'double' '*'
    |                   |-ImplicitCastExpr 0x130026ac8 <col:32> 'double' <FloatingCast>
    |                   | `-FloatingLiteral 0x130026a70 <col:32> 'float' 3.000000e+00
    |                   `-ImplicitCastExpr 0x130026ab0 <col:37> 'double' <LValueToRValue>
    |                     `-DeclRefExpr 0x130026a90 <col:37> 'const double' lvalue ParmVar 0x13000dcd8 'x' 'const double'
    |-IfStmt 0x130026fc0 <line:11:2, line:12:42>
    | |-BinaryOperator 0x130026cb0 <line:11:6, col:10> 'int' '<'
    | | |-ImplicitCastExpr 0x130026c98 <col:6> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x130026c58 <col:6> 'const double' lvalue ParmVar 0x13000dcd8 'x' 'const double'
    | | `-FloatingLiteral 0x130026c78 <col:10> 'double' 2.000000e+00
    | `-ReturnStmt 0x130026fb0 <line:12:3, col:42>
    |   `-ParenExpr 0x130026f90 <col:9, col:42> 'double'
    |     `-BinaryOperator 0x130026f70 <col:10, col:41> 'double' '*'
    |       |-ImplicitCastExpr 0x130026f58 <col:10> 'double' <FloatingCast>
    |       | `-FloatingLiteral 0x130026cd0 <col:10> 'float' 5.000000e-01
    |       `-ParenExpr 0x130026f38 <col:15, col:41> 'double'
    |         `-BinaryOperator 0x130026f18 <col:16, col:40> 'double' '+'
    |           |-ImplicitCastExpr 0x130026f00 <col:16> 'double' <FloatingCast>
    |           | `-FloatingLiteral 0x130026cf0 <col:16> 'float' 4.000000e+00
    |           `-BinaryOperator 0x130026ee0 <col:21, col:40> 'double' '*'
    |             |-ImplicitCastExpr 0x130026ec8 <col:21> 'double' <LValueToRValue>
    |             | `-DeclRefExpr 0x130026d10 <col:21> 'const double' lvalue ParmVar 0x13000dcd8 'x' 'const double'
    |             `-ParenExpr 0x130026ea8 <col:23, col:40> 'double'
    |               `-BinaryOperator 0x130026e88 <col:24, col:39> 'double' '+'
    |                 |-ImplicitCastExpr 0x130026e70 <col:24, col:25> 'double' <FloatingCast>
    |                 | `-UnaryOperator 0x130026d50 <col:24, col:25> 'float' prefix '-'
    |                 |   `-FloatingLiteral 0x130026d30 <col:25> 'float' 8.000000e+00
    |                 `-BinaryOperator 0x130026e50 <col:30, col:39> 'double' '*'
    |                   |-ImplicitCastExpr 0x130026e38 <col:30> 'double' <LValueToRValue>
    |                   | `-DeclRefExpr 0x130026d68 <col:30> 'const double' lvalue ParmVar 0x13000dcd8 'x' 'const double'
    |                   `-ParenExpr 0x130026e18 <col:32, col:39> 'double'
    |                     `-BinaryOperator 0x130026df8 <col:33, col:38> 'double' '-'
    |                       |-ImplicitCastExpr 0x130026de0 <col:33> 'double' <FloatingCast>
    |                       | `-FloatingLiteral 0x130026d88 <col:33> 'float' 5.000000e+00
    |                       `-ImplicitCastExpr 0x130026dc8 <col:38> 'double' <LValueToRValue>
    |                         `-DeclRefExpr 0x130026da8 <col:38> 'const double' lvalue ParmVar 0x13000dcd8 'x' 'const double'
    `-ReturnStmt 0x130027038 <line:13:2, col:13>
      `-ImplicitCastExpr 0x130027020 <col:8, col:13> 'double' <FloatingCast>
        `-ParenExpr 0x130027000 <col:8, col:13> 'float'
          `-FloatingLiteral 0x130026fe0 <col:9> 'float' 0.000000e+00
