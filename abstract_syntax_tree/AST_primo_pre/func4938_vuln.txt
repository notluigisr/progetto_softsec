`-FunctionDecl 0x1471283b8  line:1:1 parse_ihu_subtlv 'int (const unsigned char *, int, unsigned int *, unsigned int *)'
  |-ParmVarDecl 0x147128108 <col:18, col:39> col:39 used a 'const unsigned char *'
  |-ParmVarDecl 0x147128188 <col:42, col:46> col:46 used alen 'int'
  |-ParmVarDecl 0x147128238 <line:2:18, col:32> col:32 used hello_send_us 'unsigned int *'
  |-ParmVarDecl 0x1471282b8 <line:3:18, col:32> col:32 used hello_rtt_receive_time 'unsigned int *'
  `-CompoundStmt 0x1471432b8 <line:4:1, line:46:1>
    |-DeclStmt 0x147128730 <line:5:5, col:34>
    | |-VarDecl 0x1471284e0 <col:5, col:9> col:9 used type 'int'
    | |-VarDecl 0x147128560 <col:5, col:15> col:15 used len 'int'
    | |-VarDecl 0x1471285e0 <col:5, col:24> col:20 used i 'int' cinit
    | | `-IntegerLiteral 0x147128648 <col:24> 'int' 0
    | `-VarDecl 0x147128680 <col:5, col:33> col:27 used ret 'int' cinit
    |   `-IntegerLiteral 0x1471286e8 <col:33> 'int' 0
    |-WhileStmt 0x147143250 <line:7:5, line:44:5>
    | |-BinaryOperator 0x1471287b8 <line:7:11, col:15> 'int' '<'
    | | |-ImplicitCastExpr 0x147128788 <col:11> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x147128748 <col:11> 'int' lvalue Var 0x1471285e0 'i' 'int'
    | | `-ImplicitCastExpr 0x1471287a0 <col:15> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x147128768 <col:15> 'int' lvalue ParmVar 0x147128188 'alen' 'int'
    | `-CompoundStmt 0x147143208 <col:21, line:44:5>
    |   |-BinaryOperator 0x147140aa8 <line:8:9, col:19> 'int' '='
    |   | |-DeclRefExpr 0x1471287d8 <col:9> 'int' lvalue Var 0x1471284e0 'type' 'int'
    |   | `-ImplicitCastExpr 0x147140a90 <col:16, col:19> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x147140a78 <col:16, col:19> 'unsigned char' <LValueToRValue>
    |   |     `-ArraySubscriptExpr 0x147140a58 <col:16, col:19> 'const unsigned char' lvalue
    |   |       |-ImplicitCastExpr 0x147140a40 <col:16> 'const unsigned char *' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x147140a00 <col:16> 'const unsigned char *' lvalue ParmVar 0x147128108 'a' 'const unsigned char *'
    |   |       `-IntegerLiteral 0x147140a20 <col:18> 'int' 0
    |   |-IfStmt 0x147140bd8 <line:9:9, line:12:9>
    |   | |-BinaryOperator 0x147140b58 <line:9:12, col:20> 'int' contains-errors '=='
    |   | | |-DeclRefExpr 0x147140ac8 <col:12> 'int' lvalue Var 0x1471284e0 'type' 'int'
    |   | | `-RecoveryExpr 0x147140b38 <col:20> '<dependent type>' contains-errors lvalue
    |   | `-CompoundStmt 0x147140bb8 <col:33, line:12:9>
    |   |   |-UnaryOperator 0x147140b98 <line:10:13, col:14> 'int' postfix '++'
    |   |   | `-DeclRefExpr 0x147140b78 <col:13> 'int' lvalue Var 0x1471285e0 'i' 'int'
    |   |   `-ContinueStmt 0x147140bb0 <line:11:13>
    |   |-IfStmt 0x147140f68 <line:14:9, line:18:9>
    |   | |-BinaryOperator 0x147140ca8 <line:14:12, col:20> 'int' '>'
    |   | | |-BinaryOperator 0x147140c50 <col:12, col:16> 'int' '+'
    |   | | | |-ImplicitCastExpr 0x147140c38 <col:12> 'int' <LValueToRValue>
    |   | | | | `-DeclRefExpr 0x147140bf8 <col:12> 'int' lvalue Var 0x1471285e0 'i' 'int'
    |   | | | `-IntegerLiteral 0x147140c18 <col:16> 'int' 1
    |   | | `-ImplicitCastExpr 0x147140c90 <col:20> 'int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x147140c70 <col:20> 'int' lvalue ParmVar 0x147128188 'alen' 'int'
    |   | `-CompoundStmt 0x147140f48 <col:26, line:18:9>
    |   |   |-CallExpr 0x147140ed0 <line:15:13, line:16:14> '<dependent type>' contains-errors
    |   |   | |-DeclRefExpr 0x147140de0 <line:15:13> 'int ()' Function 0x147140d28 'flog_err' 'int ()'
    |   |   | |-RecoveryExpr 0x147140eb0 <col:22> '<dependent type>' contains-errors lvalue
    |   |   | `-StringLiteral 0x147140e60 <line:16:9> 'char[4]' lvalue "STR"
    |   |   `-ReturnStmt 0x147140f38 <line:17:13, col:21>
    |   |     `-UnaryOperator 0x147140f20 <col:20, col:21> 'int' prefix '-'
    |   |       `-IntegerLiteral 0x147140f00 <col:21> 'int' 1
    |   |-BinaryOperator 0x1471410a8 <line:19:9, col:22> 'int' '='
    |   | |-DeclRefExpr 0x147140f88 <col:9> 'int' lvalue Var 0x147128560 'len' 'int'
    |   | `-ImplicitCastExpr 0x147141090 <col:15, col:22> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x147141078 <col:15, col:22> 'unsigned char' <LValueToRValue>
    |   |     `-ArraySubscriptExpr 0x147141058 <col:15, col:22> 'const unsigned char' lvalue
    |   |       |-ImplicitCastExpr 0x147141040 <col:15> 'const unsigned char *' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x147140fa8 <col:15> 'const unsigned char *' lvalue ParmVar 0x147128108 'a' 'const unsigned char *'
    |   |       `-BinaryOperator 0x147141020 <col:17, col:21> 'int' '+'
    |   |         |-ImplicitCastExpr 0x147141008 <col:17> 'int' <LValueToRValue>
    |   |         | `-DeclRefExpr 0x147140fc8 <col:17> 'int' lvalue Var 0x1471285e0 'i' 'int'
    |   |         `-IntegerLiteral 0x147140fe8 <col:21> 'int' 1
    |   |-IfStmt 0x1471412f0 <line:20:9, line:24:9>
    |   | |-BinaryOperator 0x147141190 <line:20:12, col:22> 'int' '>'
    |   | | |-BinaryOperator 0x147141138 <col:12, col:16> 'int' '+'
    |   | | | |-ImplicitCastExpr 0x147141108 <col:12> 'int' <LValueToRValue>
    |   | | | | `-DeclRefExpr 0x1471410c8 <col:12> 'int' lvalue Var 0x1471285e0 'i' 'int'
    |   | | | `-ImplicitCastExpr 0x147141120 <col:16> 'int' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x1471410e8 <col:16> 'int' lvalue Var 0x147128560 'len' 'int'
    |   | | `-ImplicitCastExpr 0x147141178 <col:22> 'int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x147141158 <col:22> 'int' lvalue ParmVar 0x147128188 'alen' 'int'
    |   | `-CompoundStmt 0x1471412d0 <col:28, line:24:9>
    |   |   |-CallExpr 0x147141258 <line:21:13, line:22:14> '<dependent type>' contains-errors
    |   |   | |-DeclRefExpr 0x1471411b0 <line:21:13> 'int ()' Function 0x147140d28 'flog_err' 'int ()'
    |   |   | |-RecoveryExpr 0x147141238 <col:22> '<dependent type>' contains-errors lvalue
    |   |   | `-StringLiteral 0x1471411e8 <line:22:9> 'char[4]' lvalue "STR"
    |   |   `-ReturnStmt 0x1471412c0 <line:23:13, col:21>
    |   |     `-UnaryOperator 0x1471412a8 <col:20, col:21> 'int' prefix '-'
    |   |       `-IntegerLiteral 0x147141288 <col:21> 'int' 1
    |   |-IfStmt 0x147143110 <line:26:9, line:41:9> has_else
    |   | |-BinaryOperator 0x147141388 <line:26:12, col:20> 'int' contains-errors '=='
    |   | | |-DeclRefExpr 0x147141310 <col:12> 'int' lvalue Var 0x1471284e0 'type' 'int'
    |   | | `-RecoveryExpr 0x147141368 <col:20> '<dependent type>' contains-errors lvalue
    |   | |-CompoundStmt 0x1471413a8 <col:33, line:28:9>
    |   | `-IfStmt 0x1471430e0 <col:16, line:41:9> has_else
    |   |   |-BinaryOperator 0x147141430 <line:28:19, col:27> 'int' contains-errors '=='
    |   |   | |-DeclRefExpr 0x1471413b8 <col:19> 'int' lvalue Var 0x1471284e0 'type' 'int'
    |   |   | `-RecoveryExpr 0x147141410 <col:27> '<dependent type>' contains-errors lvalue
    |   |   |-CompoundStmt 0x147142ec8 <col:45, line:38:9>
    |   |   | `-IfStmt 0x147142e98 <line:29:13, line:37:13> has_else
    |   |   |   |-BinaryOperator 0x1471414a8 <line:29:16, col:23> 'int' '>='
    |   |   |   | |-ImplicitCastExpr 0x147141490 <col:16> 'int' <LValueToRValue>
    |   |   |   | | `-DeclRefExpr 0x147141450 <col:16> 'int' lvalue Var 0x147128560 'len' 'int'
    |   |   |   | `-IntegerLiteral 0x147141470 <col:23> 'int' 8
    |   |   |   |-CompoundStmt 0x147141980 <col:26, line:33:13>
    |   |   |   | |-CallExpr 0x147141738 <line:30:17, col:51> 'int'
    |   |   |   | | |-ImplicitCastExpr 0x147141720 <col:17> 'int (*)()' <FunctionToPointerDecay>
    |   |   |   | | | `-DeclRefExpr 0x1471415a8 <col:17> 'int ()' Function 0x1471414f0 'DO_NTOHL' 'int ()'
    |   |   |   | | |-ImplicitCastExpr 0x147141768 <col:26, col:27> 'unsigned int' <LValueToRValue>
    |   |   |   | | | `-UnaryOperator 0x147141600 <col:26, col:27> 'unsigned int' lvalue prefix '*' cannot overflow
    |   |   |   | | |   `-ImplicitCastExpr 0x1471415e8 <col:27> 'unsigned int *' <LValueToRValue>
    |   |   |   | | |     `-DeclRefExpr 0x1471415c8 <col:27> 'unsigned int *' lvalue ParmVar 0x147128238 'hello_send_us' 'unsigned int *'
    |   |   |   | | `-BinaryOperator 0x1471416c8 <col:42, col:50> 'const unsigned char *' '+'
    |   |   |   | |   |-BinaryOperator 0x147141688 <col:42, col:46> 'const unsigned char *' '+'
    |   |   |   | |   | |-ImplicitCastExpr 0x147141658 <col:42> 'const unsigned char *' <LValueToRValue>
    |   |   |   | |   | | `-DeclRefExpr 0x147141618 <col:42> 'const unsigned char *' lvalue ParmVar 0x147128108 'a' 'const unsigned char *'
    |   |   |   | |   | `-ImplicitCastExpr 0x147141670 <col:46> 'int' <LValueToRValue>
    |   |   |   | |   |   `-DeclRefExpr 0x147141638 <col:46> 'int' lvalue Var 0x1471285e0 'i' 'int'
    |   |   |   | |   `-IntegerLiteral 0x1471416a8 <col:50> 'int' 2
    |   |   |   | |-CallExpr 0x1471418d8 <line:31:17, col:60> 'int'
    |   |   |   | | |-ImplicitCastExpr 0x1471418c0 <col:17> 'int (*)()' <FunctionToPointerDecay>
    |   |   |   | | | `-DeclRefExpr 0x147141780 <col:17> 'int ()' Function 0x1471414f0 'DO_NTOHL' 'int ()'
    |   |   |   | | |-ImplicitCastExpr 0x147141908 <col:26, col:27> 'unsigned int' <LValueToRValue>
    |   |   |   | | | `-UnaryOperator 0x1471417d8 <col:26, col:27> 'unsigned int' lvalue prefix '*' cannot overflow
    |   |   |   | | |   `-ImplicitCastExpr 0x1471417c0 <col:27> 'unsigned int *' <LValueToRValue>
    |   |   |   | | |     `-DeclRefExpr 0x1471417a0 <col:27> 'unsigned int *' lvalue ParmVar 0x1471282b8 'hello_rtt_receive_time' 'unsigned int *'
    |   |   |   | | `-BinaryOperator 0x1471418a0 <col:51, col:59> 'const unsigned char *' '+'
    |   |   |   | |   |-BinaryOperator 0x147141860 <col:51, col:55> 'const unsigned char *' '+'
    |   |   |   | |   | |-ImplicitCastExpr 0x147141830 <col:51> 'const unsigned char *' <LValueToRValue>
    |   |   |   | |   | | `-DeclRefExpr 0x1471417f0 <col:51> 'const unsigned char *' lvalue ParmVar 0x147128108 'a' 'const unsigned char *'
    |   |   |   | |   | `-ImplicitCastExpr 0x147141848 <col:55> 'int' <LValueToRValue>
    |   |   |   | |   |   `-DeclRefExpr 0x147141810 <col:55> 'int' lvalue Var 0x1471285e0 'i' 'int'
    |   |   |   | |   `-IntegerLiteral 0x147141880 <col:59> 'int' 6
    |   |   |   | `-BinaryOperator 0x147141960 <line:32:17, col:23> 'int' '='
    |   |   |   |   |-DeclRefExpr 0x147141920 <col:17> 'int' lvalue Var 0x147128680 'ret' 'int'
    |   |   |   |   `-IntegerLiteral 0x147141940 <col:23> 'int' 1
    |   |   |   `-CompoundStmt 0x147142e80 <line:34:18, line:37:13>
    |   |   |     `-CallExpr 0x147142e50 <line:35:17, line:36:11> '<dependent type>' contains-errors
    |   |   |       |-DeclRefExpr 0x1471419a8 <line:35:17> 'int ()' Function 0x147140d28 'flog_err' 'int ()'
    |   |   |       |-RecoveryExpr 0x147142e30 <col:26> '<dependent type>' contains-errors lvalue
    |   |   |       `-StringLiteral 0x1471419e0 <line:36:6> 'char[4]' lvalue "STR"
    |   |   `-CompoundStmt 0x1471430c8 <line:38:16, line:41:9>
    |   |     `-CallExpr 0x147143090 <line:39:13, line:40:31> '<dependent type>' contains-errors
    |   |       |-DeclRefExpr 0x147142fc0 <line:39:13> 'int ()' Function 0x147142f08 'debugf' 'int ()'
    |   |       |-RecoveryExpr 0x147143070 <col:20> '<dependent type>' contains-errors lvalue
    |   |       |-StringLiteral 0x147142ff8 <line:40:20> 'char[4]' lvalue "STR"
    |   |       `-DeclRefExpr 0x147143018 <col:27> 'int' lvalue Var 0x1471284e0 'type' 'int'
    |   `-CompoundAssignOperator 0x1471431d8 <line:43:9, col:20> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |     |-DeclRefExpr 0x147143140 <col:9> 'int' lvalue Var 0x1471285e0 'i' 'int'
    |     `-BinaryOperator 0x1471431b8 <col:14, col:20> 'int' '+'
    |       |-ImplicitCastExpr 0x1471431a0 <col:14> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x147143160 <col:14> 'int' lvalue Var 0x147128560 'len' 'int'
    |       `-IntegerLiteral 0x147143180 <col:20> 'int' 2
    `-ReturnStmt 0x1471432a8 <line:45:5, col:12>
      `-ImplicitCastExpr 0x147143290 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x147143270 <col:12> 'int' lvalue Var 0x147128680 'ret' 'int'
