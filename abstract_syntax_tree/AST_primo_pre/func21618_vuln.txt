`-FunctionDecl 0x140128258  line:1:15 invalid codepoint_length 'int (const char *, int)' inline
  |-ParmVarDecl 0x1401280f0 <col:32, col:44> col:44 used s8 'const char *'
  |-ParmVarDecl 0x140128170 <col:48, col:55> col:55 invalid l 'int'
  `-CompoundStmt 0x140141f60 <col:58, line:15:1>
    |-IfStmt 0x140141f10 <line:2:3, line:13:3>
    | |-RecoveryExpr 0x140128310 <line:2:7> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x140141ef0 <col:10, line:13:3>
    |   |-DeclStmt 0x140128590 <line:3:5, col:41>
    |   | `-VarDecl 0x140128348 <col:5, col:40> col:10 used b 'int' auto cinit
    |   |   `-BinaryOperator 0x140128570 <col:14, col:40> 'int' contains-errors '>'
    |   |     |-BinaryOperator 0x1401284f8 <col:14, col:26> 'int' contains-errors '<'
    |   |     | |-RecoveryExpr 0x1401284b8 <col:14> '<dependent type>' contains-errors lvalue
    |   |     | `-RecoveryExpr 0x1401284d8 <col:26> '<dependent type>' contains-errors lvalue
    |   |     `-ParenExpr 0x140128550 <col:34, col:40> 'const char' lvalue
    |   |       `-ArraySubscriptExpr 0x140128530 <col:35, col:39> 'const char' lvalue
    |   |         |-ImplicitCastExpr 0x140128518 <col:35> 'const char *' <LValueToRValue>
    |   |         | `-DeclRefExpr 0x140128400 <col:35> 'const char *' lvalue ParmVar 0x1401280f0 's8' 'const char *'
    |   |         `-IntegerLiteral 0x140128420 <col:38> 'int' 0
    |   `-IfStmt 0x140141ec0 <line:4:5, line:12:5> has_else
    |     |-BinaryOperator 0x140128660 <line:4:9, col:23> 'int' contains-errors '=='
    |     | |-ParenExpr 0x140128620 <col:9, col:18> 'int' contains-errors
    |     | | `-BinaryOperator 0x140128600 <col:10, col:14> 'int' contains-errors '&'
    |     | |   |-ImplicitCastExpr 0x1401285e8 <col:10> 'int' contains-errors <LValueToRValue>
    |     | |   | `-DeclRefExpr 0x1401285a8 <col:10> 'int' contains-errors lvalue Var 0x140128348 'b' 'int'
    |     | |   `-IntegerLiteral 0x1401285c8 <col:14> 'int' 128
    |     | `-IntegerLiteral 0x140128640 <col:23> 'int' 0
    |     |-CompoundStmt 0x1401286b0 <col:26, line:6:5>
    |     | `-ReturnStmt 0x1401286a0 <line:5:7, col:14>
    |     |   `-IntegerLiteral 0x140128680 <col:14> 'int' 1
    |     `-IfStmt 0x140141e90 <line:6:12, line:12:5> has_else
    |       |-BinaryOperator 0x140128780 <line:6:16, col:30> 'int' contains-errors '=='
    |       | |-ParenExpr 0x140128740 <col:16, col:25> 'int' contains-errors
    |       | | `-BinaryOperator 0x140128720 <col:17, col:21> 'int' contains-errors '&'
    |       | |   |-ImplicitCastExpr 0x140128708 <col:17> 'int' contains-errors <LValueToRValue>
    |       | |   | `-DeclRefExpr 0x1401286c8 <col:17> 'int' contains-errors lvalue Var 0x140128348 'b' 'int'
    |       | |   `-IntegerLiteral 0x1401286e8 <col:21> 'int' 224
    |       | `-IntegerLiteral 0x140128760 <col:30> 'int' 192
    |       |-CompoundStmt 0x1401287d0 <col:36, line:8:5>
    |       | `-ReturnStmt 0x1401287c0 <line:7:7, col:14>
    |       |   `-IntegerLiteral 0x1401287a0 <col:14> 'int' 2
    |       `-IfStmt 0x140141e60 <line:8:12, line:12:5> has_else
    |         |-BinaryOperator 0x140141cb8 <line:8:16, col:30> 'int' contains-errors '=='
    |         | |-ParenExpr 0x140141c78 <col:16, col:25> 'int' contains-errors
    |         | | `-BinaryOperator 0x140141c58 <col:17, col:21> 'int' contains-errors '&'
    |         | |   |-ImplicitCastExpr 0x140141c40 <col:17> 'int' contains-errors <LValueToRValue>
    |         | |   | `-DeclRefExpr 0x140141c00 <col:17> 'int' contains-errors lvalue Var 0x140128348 'b' 'int'
    |         | |   `-IntegerLiteral 0x140141c20 <col:21> 'int' 240
    |         | `-IntegerLiteral 0x140141c98 <col:30> 'int' 224
    |         |-CompoundStmt 0x140141d08 <col:36, line:10:5>
    |         | `-ReturnStmt 0x140141cf8 <line:9:7, col:14>
    |         |   `-IntegerLiteral 0x140141cd8 <col:14> 'int' 3
    |         `-IfStmt 0x140141e40 <line:10:12, line:12:5>
    |           |-BinaryOperator 0x140141dd8 <line:10:16, col:30> 'int' contains-errors '=='
    |           | |-ParenExpr 0x140141d98 <col:16, col:25> 'int' contains-errors
    |           | | `-BinaryOperator 0x140141d78 <col:17, col:21> 'int' contains-errors '&'
    |           | |   |-ImplicitCastExpr 0x140141d60 <col:17> 'int' contains-errors <LValueToRValue>
    |           | |   | `-DeclRefExpr 0x140141d20 <col:17> 'int' contains-errors lvalue Var 0x140128348 'b' 'int'
    |           | |   `-IntegerLiteral 0x140141d40 <col:21> 'int' 248
    |           | `-IntegerLiteral 0x140141db8 <col:30> 'int' 240
    |           `-CompoundStmt 0x140141e28 <col:36, line:12:5>
    |             `-ReturnStmt 0x140141e18 <line:11:7, col:14>
    |               `-IntegerLiteral 0x140141df8 <col:14> 'int' 4
    `-ReturnStmt 0x140141f50 <line:14:3, col:10>
      `-IntegerLiteral 0x140141f30 <col:10> 'int' 0
