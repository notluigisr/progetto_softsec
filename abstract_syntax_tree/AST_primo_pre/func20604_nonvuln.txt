`-FunctionDecl 0x14c140d18  line:1:1 yang_read_message 'int (struct lys_module *, struct lys_restr *, char *, char *, int)'
  |-ParmVarDecl 0x14c128648 <col:19, col:38> col:38 used module 'struct lys_module *'
  |-ParmVarDecl 0x14c140a28 <col:45, col:63> col:63 used save 'struct lys_restr *'
  |-ParmVarDecl 0x14c140aa8 <col:68, col:74> col:74 used value 'char *'
  |-ParmVarDecl 0x14c140b28 <col:81, col:87> col:87 used what 'char *'
  |-ParmVarDecl 0x14c140ba8 <col:93, col:97> col:97 used message 'int'
  `-CompoundStmt 0x14c141620 <line:2:1, line:11:1>
    |-DeclStmt 0x14c140eb0 <line:3:5, col:12>
    | `-VarDecl 0x14c140e48 <col:5, col:9> col:9 used ret 'int'
    |-IfStmt 0x14c1415a8 <line:5:5, line:9:5> has_else
    | |-BinaryOperator 0x14c140f58 <line:5:9, col:20> 'int' contains-errors '=='
    | | |-DeclRefExpr 0x14c140ec8 <col:9> 'int' lvalue ParmVar 0x14c140ba8 'message' 'int'
    | | `-RecoveryExpr 0x14c140f38 <col:20> '<dependent type>' contains-errors lvalue
    | |-CompoundStmt 0x14c141328 <col:43, line:7:5>
    | | `-BinaryOperator 0x14c141308 <line:6:9, col:81> 'int' contains-errors '='
    | |   |-DeclRefExpr 0x14c140f78 <col:9> 'int' lvalue Var 0x14c140e48 'ret' 'int'
    | |   `-CallExpr 0x14c1412b8 <col:15, col:81> '<dependent type>' contains-errors
    | |     |-DeclRefExpr 0x14c1410b0 <col:15> 'int ()' Function 0x14c140ff8 'yang_check_string' 'int ()'
    | |     |-DeclRefExpr 0x14c1410d0 <col:33> 'struct lys_module *' lvalue ParmVar 0x14c128648 'module' 'struct lys_module *'
    | |     |-UnaryOperator 0x14c141150 <col:41, col:48> '<dependent type>' contains-errors prefix '&' cannot overflow
    | |     | `-RecoveryExpr 0x14c141128 <col:42, col:48> '<dependent type>' contains-errors lvalue
    | |     |   `-DeclRefExpr 0x14c1410f0 <col:42> 'struct lys_restr *' lvalue ParmVar 0x14c140a28 'save' 'struct lys_restr *'
    | |     |-StringLiteral 0x14c1411b0 <col:57> 'char[4]' lvalue "STR"
    | |     |-DeclRefExpr 0x14c1411d0 <col:64> 'char *' lvalue ParmVar 0x14c140b28 'what' 'char *'
    | |     |-DeclRefExpr 0x14c1411f0 <col:70> 'char *' lvalue ParmVar 0x14c140aa8 'value' 'char *'
    | |     `-RecoveryExpr 0x14c141298 <col:77> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x14c141590 <line:7:12, line:9:5>
    |   `-BinaryOperator 0x14c141570 <line:8:9, col:78> 'int' contains-errors '='
    |     |-DeclRefExpr 0x14c141340 <col:9> 'int' lvalue Var 0x14c140e48 'ret' 'int'
    |     `-CallExpr 0x14c141520 <col:15, col:78> '<dependent type>' contains-errors
    |       |-DeclRefExpr 0x14c141360 <col:15> 'int ()' Function 0x14c140ff8 'yang_check_string' 'int ()'
    |       |-DeclRefExpr 0x14c141380 <col:33> 'struct lys_module *' lvalue ParmVar 0x14c128648 'module' 'struct lys_module *'
    |       |-UnaryOperator 0x14c141400 <col:41, col:48> '<dependent type>' contains-errors prefix '&' cannot overflow
    |       | `-RecoveryExpr 0x14c1413d8 <col:42, col:48> '<dependent type>' contains-errors lvalue
    |       |   `-DeclRefExpr 0x14c1413a0 <col:42> 'struct lys_restr *' lvalue ParmVar 0x14c140a28 'save' 'struct lys_restr *'
    |       |-StringLiteral 0x14c141418 <col:54> 'char[4]' lvalue "STR"
    |       |-DeclRefExpr 0x14c141438 <col:61> 'char *' lvalue ParmVar 0x14c140b28 'what' 'char *'
    |       |-DeclRefExpr 0x14c141458 <col:67> 'char *' lvalue ParmVar 0x14c140aa8 'value' 'char *'
    |       `-RecoveryExpr 0x14c141500 <col:74> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x14c141610 <line:10:5, col:12>
      `-ImplicitCastExpr 0x14c1415f8 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x14c1415d8 <col:12> 'int' lvalue Var 0x14c140e48 'ret' 'int'
