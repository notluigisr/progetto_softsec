`-FunctionDecl 0x14692efa8  line:1:12 invalid gup_huge_pmd 'int (int, int *, unsigned long, unsigned long, int, struct page **, int *)' static
  |-ParmVarDecl 0x1469154f0 <col:25, col:31> col:31 invalid orig 'int'
  |-ParmVarDecl 0x1469155a8 <col:37, col:44> col:44 invalid pmdp 'int *'
  |-ParmVarDecl 0x146915628 <col:50, col:64> col:64 used addr 'unsigned long'
  |-ParmVarDecl 0x1469156a8 <line:2:3, col:17> col:17 used end 'unsigned long'
  |-ParmVarDecl 0x146915728 <col:22, col:26> col:26 used write 'int'
  |-ParmVarDecl 0x14692ed88 <col:33, col:47> col:47 used pages 'struct page **'
  |-ParmVarDecl 0x14692ee08 <col:54, col:59> col:59 used nr 'int *'
  `-CompoundStmt 0x14700e960 <line:3:1, line:34:1>
    |-DeclStmt 0x14692f228 <line:4:2, col:26>
    | |-VarDecl 0x14692f118 <col:2, col:15> col:15 used head 'struct page *'
    | `-VarDecl 0x14692f1a8 <col:2, col:22> col:22 used page 'struct page *'
    |-DeclStmt 0x14692f2c0 <line:5:2, col:10>
    | `-VarDecl 0x14692f258 <col:2, col:6> col:6 used refs 'int'
    |-IfStmt 0x14692f520 <line:7:2, line:8:10>
    | |-BinaryOperator 0x14692f4d0 <line:7:6, col:30> 'int' contains-errors '&&'
    | | |-DeclRefExpr 0x14692f2d8 <col:6> 'int' lvalue ParmVar 0x146915728 'write' 'int'
    | | `-UnaryOperator 0x14692f4b8 <col:15, col:30> '<dependent type>' contains-errors prefix '!' cannot overflow
    | |   `-CallExpr 0x14692f490 <col:16, col:30> '<dependent type>' contains-errors
    | |     |-DeclRefExpr 0x14692f450 <col:16> 'int ()' Function 0x14692f398 'pmd_write' 'int ()'
    | |     `-RecoveryExpr 0x14692f470 <col:26> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x14692f510 <line:8:3, col:10>
    |   `-IntegerLiteral 0x14692f4f0 <col:10> 'int' 0
    |-BinaryOperator 0x14692f580 <line:10:2, col:9> 'int' '='
    | |-DeclRefExpr 0x14692f540 <col:2> 'int' lvalue Var 0x14692f258 'refs' 'int'
    | `-IntegerLiteral 0x14692f560 <col:9> 'int' 0
    |-BinaryOperator 0x14692f708 <line:11:2, col:22> 'struct page *' contains-errors '='
    | |-DeclRefExpr 0x14692f5a0 <col:2> 'struct page *' lvalue Var 0x14692f118 'head' 'struct page *'
    | `-CallExpr 0x14692f6e0 <col:9, col:22> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x14692f6a0 <col:9> 'int ()' Function 0x14692f5e8 'pmd_page' 'int ()'
    |   `-RecoveryExpr 0x14692f6c0 <col:18> '<dependent type>' contains-errors lvalue
    |-DoStmt 0x14700dff0 <line:13:2, line:19:41>
    | |-CompoundStmt 0x14700dde0 <line:13:5, line:19:2>
    | | |-CallExpr 0x14692fb60 <line:14:3, col:51> 'int'
    | | | |-ImplicitCastExpr 0x14692fb48 <col:3> 'int (*)()' <FunctionToPointerDecay>
    | | | | `-DeclRefExpr 0x14692f8e8 <col:3> 'int ()' Function 0x14692f830 'VM_BUG_ON_PAGE' 'int ()'
    | | | |-BinaryOperator 0x14692fb08 <col:18, col:41> 'int' '!='
    | | | | |-ImplicitCastExpr 0x14692faf0 <col:18, col:36> 'struct page *' <IntegralToPointer>
    | | | | | `-CallExpr 0x14692fa78 <col:18, col:36> 'int'
    | | | | |   |-ImplicitCastExpr 0x14692fa60 <col:18> 'int (*)()' <FunctionToPointerDecay>
    | | | | |   | `-DeclRefExpr 0x14692f9e8 <col:18> 'int ()' Function 0x14692f930 'compound_head' 'int ()'
    | | | | |   `-ImplicitCastExpr 0x14692faa0 <col:32> 'struct page *' <LValueToRValue>
    | | | | |     `-DeclRefExpr 0x14692fa08 <col:32> 'struct page *' lvalue Var 0x14692f1a8 'page' 'struct page *'
    | | | | `-ImplicitCastExpr 0x14692fad8 <col:41> 'struct page *' <LValueToRValue>
    | | | |   `-DeclRefExpr 0x14692fab8 <col:41> 'struct page *' lvalue Var 0x14692f118 'head' 'struct page *'
    | | | `-ImplicitCastExpr 0x14692fb90 <col:47> 'struct page *' <LValueToRValue>
    | | |   `-DeclRefExpr 0x14692fb28 <col:47> 'struct page *' lvalue Var 0x14692f1a8 'page' 'struct page *'
    | | |-BinaryOperator 0x14700dca0 <line:15:3, col:16> 'struct page *' '='
    | | | |-ArraySubscriptExpr 0x14700dc48 <col:3, col:12> 'struct page *' lvalue
    | | | | |-ImplicitCastExpr 0x14700dc18 <col:3> 'struct page **' <LValueToRValue>
    | | | | | `-DeclRefExpr 0x14692fba8 <col:3> 'struct page **' lvalue ParmVar 0x14692ed88 'pages' 'struct page **'
    | | | | `-ImplicitCastExpr 0x14700dc30 <col:9, col:10> 'int' <LValueToRValue>
    | | | |   `-UnaryOperator 0x14700dc00 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
    | | | |     `-ImplicitCastExpr 0x14692fbe8 <col:10> 'int *' <LValueToRValue>
    | | | |       `-DeclRefExpr 0x14692fbc8 <col:10> 'int *' lvalue ParmVar 0x14692ee08 'nr' 'int *'
    | | | `-ImplicitCastExpr 0x14700dc88 <col:16> 'struct page *' <LValueToRValue>
    | | |   `-DeclRefExpr 0x14700dc68 <col:16> 'struct page *' lvalue Var 0x14692f1a8 'page' 'struct page *'
    | | |-UnaryOperator 0x14700dd30 <line:16:3, col:8> 'int' postfix '++'
    | | | `-ParenExpr 0x14700dd10 <col:3, col:7> 'int' lvalue
    | | |   `-UnaryOperator 0x14700dcf8 <col:4, col:5> 'int' lvalue prefix '*' cannot overflow
    | | |     `-ImplicitCastExpr 0x14700dce0 <col:5> 'int *' <LValueToRValue>
    | | |       `-DeclRefExpr 0x14700dcc0 <col:5> 'int *' lvalue ParmVar 0x14692ee08 'nr' 'int *'
    | | |-ImplicitCastExpr 0x14700dd90 <line:17:3, col:7> '<dependent type>' contains-errors <LValueToRValue>
    | | | `-RecoveryExpr 0x14700dd68 <col:3, col:7> '<dependent type>' contains-errors lvalue
    | | |   `-DeclRefExpr 0x14700dd48 <col:3> 'struct page *' lvalue Var 0x14692f1a8 'page' 'struct page *'
    | | `-UnaryOperator 0x14700ddc8 <line:18:3, col:7> 'int' postfix '++'
    | |   `-DeclRefExpr 0x14700dda8 <col:3> 'int' lvalue Var 0x14692f258 'refs' 'int'
    | `-BinaryOperator 0x14700dfd0 <line:19:11, col:38> 'int' contains-errors ','
    |   |-CompoundAssignOperator 0x14700df50 <col:11, col:19> 'unsigned long' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    |   | |-DeclRefExpr 0x14700de18 <col:11> 'unsigned long' lvalue ParmVar 0x146915628 'addr' 'unsigned long'
    |   | `-RecoveryExpr 0x14700df30 <col:19> '<dependent type>' contains-errors lvalue
    |   `-BinaryOperator 0x14700dfb0 <col:30, col:38> 'int' '!='
    |     |-ImplicitCastExpr 0x14700df80 <col:30> 'unsigned long' <LValueToRValue>
    |     | `-DeclRefExpr 0x14700de80 <col:30> 'unsigned long' lvalue ParmVar 0x146915628 'addr' 'unsigned long'
    |     `-ImplicitCastExpr 0x14700df98 <col:38> 'unsigned long' <LValueToRValue>
    |       `-DeclRefExpr 0x14700dea0 <col:38> 'unsigned long' lvalue ParmVar 0x1469156a8 'end' 'unsigned long'
    |-IfStmt 0x14700e2e8 <line:21:2, line:24:2>
    | |-UnaryOperator 0x14700e1c8 <line:21:6, col:44> 'int' prefix '!' cannot overflow
    | | `-CallExpr 0x14700e168 <col:7, col:44> 'int'
    | |   |-ImplicitCastExpr 0x14700e150 <col:7> 'int (*)()' <FunctionToPointerDecay>
    | |   | `-DeclRefExpr 0x14700e0f0 <col:7> 'int ()' Function 0x14700e038 'page_cache_add_speculative' 'int ()'
    | |   |-ImplicitCastExpr 0x14700e198 <col:34> 'struct page *' <LValueToRValue>
    | |   | `-DeclRefExpr 0x14700e110 <col:34> 'struct page *' lvalue Var 0x14692f118 'head' 'struct page *'
    | |   `-ImplicitCastExpr 0x14700e1b0 <col:40> 'int' <LValueToRValue>
    | |     `-DeclRefExpr 0x14700e130 <col:40> 'int' lvalue Var 0x14692f258 'refs' 'int'
    | `-CompoundStmt 0x14700e2c8 <col:47, line:24:2>
    |   |-CompoundAssignOperator 0x14700e268 <line:22:3, col:10> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
    |   | |-UnaryOperator 0x14700e218 <col:3, col:4> 'int' lvalue prefix '*' cannot overflow
    |   | | `-ImplicitCastExpr 0x14700e200 <col:4> 'int *' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x14700e1e0 <col:4> 'int *' lvalue ParmVar 0x14692ee08 'nr' 'int *'
    |   | `-ImplicitCastExpr 0x14700e250 <col:10> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x14700e230 <col:10> 'int' lvalue Var 0x14692f258 'refs' 'int'
    |   `-ReturnStmt 0x14700e2b8 <line:23:3, col:10>
    |     `-IntegerLiteral 0x14700e298 <col:10> 'int' 0
    |-IfStmt 0x14700e910 <line:26:2, line:31:2>
    | |-CallExpr 0x14700e608 <line:26:6, col:46> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x14700e3e8 <col:6> 'int ()' Function 0x14700e330 'unlikely' 'int ()'
    | | `-BinaryOperator 0x14700e5e8 <col:15, col:45> 'int' contains-errors '!='
    | |   |-CallExpr 0x14700e528 <col:15, col:27> '<dependent type>' contains-errors
    | |   | |-DeclRefExpr 0x14700e4e8 <col:15> 'int ()' Function 0x14700e430 'pmd_val' 'int ()'
    | |   | `-RecoveryExpr 0x14700e508 <col:23> '<dependent type>' contains-errors lvalue
    | |   `-CallExpr 0x14700e5c0 <col:32, col:45> '<dependent type>' contains-errors
    | |     |-DeclRefExpr 0x14700e550 <col:32> 'int ()' Function 0x14700e430 'pmd_val' 'int ()'
    | |     `-UnaryOperator 0x14700e5a8 <col:40, col:41> '<dependent type>' contains-errors prefix '*' cannot overflow
    | |       `-ImplicitCastExpr 0x14700e590 <col:41> '<dependent type>' contains-errors <LValueToRValue>
    | |         `-RecoveryExpr 0x14700e570 <col:41> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x14700e8e8 <col:49, line:31:2>
    |   |-CompoundAssignOperator 0x14700e6b8 <line:27:3, col:10> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
    |   | |-UnaryOperator 0x14700e668 <col:3, col:4> 'int' lvalue prefix '*' cannot overflow
    |   | | `-ImplicitCastExpr 0x14700e650 <col:4> 'int *' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x14700e630 <col:4> 'int *' lvalue ParmVar 0x14692ee08 'nr' 'int *'
    |   | `-ImplicitCastExpr 0x14700e6a0 <col:10> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x14700e680 <col:10> 'int' lvalue Var 0x14692f258 'refs' 'int'
    |   |-WhileStmt 0x14700e898 <line:28:3, line:29:17>
    |   | |-UnaryOperator 0x14700e708 <line:28:10, col:14> 'int' postfix '--'
    |   | | `-DeclRefExpr 0x14700e6e8 <col:10> 'int' lvalue Var 0x14692f258 'refs' 'int'
    |   | `-CallExpr 0x14700e858 <line:29:4, col:17> 'int'
    |   |   |-ImplicitCastExpr 0x14700e840 <col:4> 'int (*)()' <FunctionToPointerDecay>
    |   |   | `-DeclRefExpr 0x14700e800 <col:4> 'int ()' Function 0x14700e748 'put_page' 'int ()'
    |   |   `-ImplicitCastExpr 0x14700e880 <col:13> 'struct page *' <LValueToRValue>
    |   |     `-DeclRefExpr 0x14700e820 <col:13> 'struct page *' lvalue Var 0x14692f118 'head' 'struct page *'
    |   `-ReturnStmt 0x14700e8d8 <line:30:3, col:10>
    |     `-IntegerLiteral 0x14700e8b8 <col:10> 'int' 0
    `-ReturnStmt 0x14700e950 <line:33:2, col:9>
      `-IntegerLiteral 0x14700e930 <col:9> 'int' 1
