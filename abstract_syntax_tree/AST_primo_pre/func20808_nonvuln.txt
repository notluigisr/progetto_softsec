`-FunctionDecl 0x139128258  line:1:14 invalid r_bin_java_raw_to_double 'int (const int *, int)'
  |-ParmVarDecl 0x1391280f0 <col:39, col:50> col:50 invalid raw 'const int *'
  |-ParmVarDecl 0x139128170 <col:55, col:60> col:60 invalid offset 'int'
  `-CompoundStmt 0x139142338 <col:68, line:27:1>
    |-DeclStmt 0x139128460 <line:3:2, col:38>
    | `-VarDecl 0x139128328 <col:2, col:6> col:6 used s 'int'
    |-DeclStmt 0x139128570 <line:4:2, col:39>
    | `-VarDecl 0x139128490 <col:2, col:6> col:6 used e 'int'
    |-DeclStmt 0x139128790 <line:5:2, line:7:49>
    | `-VarDecl 0x1391285a0 <line:5:2, col:7> col:7 used m 'long'
    |-DeclStmt 0x139141888 <line:8:2, col:18>
    | `-VarDecl 0x139141800 <col:2, col:15> col:9 used res 'double' cinit
    |   `-FloatingLiteral 0x139141868 <col:15> 'double' 0.000000e+00
    |-IfStmt 0x139141998 <line:10:2, line:12:2>
    | |-BinaryOperator 0x139141918 <line:10:6, col:14> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x1391418f8 <col:6> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x1391418b8 <col:14> 'long long' 9218868437227405312
    | `-CompoundStmt 0x139141980 <col:36, line:12:2>
    |   `-ReturnStmt 0x139141970 <line:11:3, col:10>
    |     `-RecoveryExpr 0x139141950 <col:10> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x139141b10 <line:13:2, line:15:2>
    | |-BinaryOperator 0x139141a30 <line:13:6, col:14> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x139141a10 <col:6> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x1391419d0 <col:14> 'unsigned long long' 18442240474082181120
    | `-CompoundStmt 0x139141af8 <col:36, line:15:2>
    |   `-ReturnStmt 0x139141ae8 <line:14:3, col:11>
    |     `-UnaryOperator 0x139141ad0 <col:10, col:11> '<dependent type>' contains-errors prefix '-' cannot overflow
    |       `-ImplicitCastExpr 0x139141ab8 <col:11> '<dependent type>' contains-errors <LValueToRValue>
    |         `-RecoveryExpr 0x139141a98 <col:11> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x139141d00 <line:16:2, line:18:2>
    | |-BinaryOperator 0x139141c80 <line:16:6, col:46> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x139141c20 <col:6, col:30> 'int' contains-errors '<='
    | | | |-IntegerLiteral 0x139141b30 <col:6> 'long long' 9218868437227405313
    | | | `-RecoveryExpr 0x139141c00 <col:30> '<dependent type>' contains-errors lvalue
    | | `-BinaryOperator 0x139141c60 <col:38, col:46> 'int' contains-errors '<='
    | |   |-RecoveryExpr 0x139141c40 <col:38> '<dependent type>' contains-errors lvalue
    | |   `-IntegerLiteral 0x139141ba0 <col:46> 'long long' 9223372036854775807
    | `-CompoundStmt 0x139141ce8 <col:68, line:18:2>
    |   `-ReturnStmt 0x139141cd8 <line:17:3, col:10>
    |     `-RecoveryExpr 0x139141cb8 <col:10> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x139141ef0 <line:19:2, line:21:2>
    | |-BinaryOperator 0x139141e70 <line:19:6, col:46> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x139141e10 <col:6, col:30> 'int' contains-errors '<='
    | | | |-IntegerLiteral 0x139141d20 <col:6> 'unsigned long long' 18442240474082181121
    | | | `-RecoveryExpr 0x139141df0 <col:30> '<dependent type>' contains-errors lvalue
    | | `-BinaryOperator 0x139141e50 <col:38, col:46> 'int' contains-errors '<='
    | |   |-RecoveryExpr 0x139141e30 <col:38> '<dependent type>' contains-errors lvalue
    | |   `-IntegerLiteral 0x139141d90 <col:46> 'unsigned long long' 18446744073709551615
    | `-CompoundStmt 0x139141ed8 <col:68, line:21:2>
    |   `-ReturnStmt 0x139141ec8 <line:20:3, col:10>
    |     `-RecoveryExpr 0x139141ea8 <col:10> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x1391422b8 <line:22:2, col:35> 'double' '='
    | |-DeclRefExpr 0x139141f10 <col:2> 'double' lvalue Var 0x139141800 'res' 'double'
    | `-ImplicitCastExpr 0x1391422a0 <col:8, col:35> 'double' <IntegralToFloating>
    |   `-BinaryOperator 0x139142280 <col:8, col:35> 'long' '*'
    |     |-BinaryOperator 0x139141fb8 <col:8, col:12> 'long' '*'
    |     | |-ImplicitCastExpr 0x139141fa0 <col:8> 'long' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x139141f70 <col:8> 'int' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x139141f30 <col:8> 'int' lvalue Var 0x139128328 's' 'int'
    |     | `-ImplicitCastExpr 0x139141f88 <col:12> 'long' <LValueToRValue>
    |     |   `-DeclRefExpr 0x139141f50 <col:12> 'long' lvalue Var 0x1391285a0 'm' 'long'
    |     `-ImplicitCastExpr 0x139142268 <col:16, col:35> 'long' <IntegralCast>
    |       `-CallExpr 0x139142238 <col:16, col:35> 'int'
    |         |-ImplicitCastExpr 0x139142220 <col:16> 'int (*)()' <FunctionToPointerDecay>
    |         | `-DeclRefExpr 0x139142130 <col:16> 'int ()' Function 0x139142078 'my_pow' 'int ()'
    |         |-IntegerLiteral 0x139142150 <col:24> 'int' 2
    |         `-BinaryOperator 0x1391421c8 <col:27, col:31> 'int' '-'
    |           |-ImplicitCastExpr 0x1391421b0 <col:27> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x139142170 <col:27> 'int' lvalue Var 0x139128490 'e' 'int'
    |           `-IntegerLiteral 0x139142190 <col:31> 'int' 1075
    `-ReturnStmt 0x139142328 <line:26:2, col:9>
      `-ImplicitCastExpr 0x139142310 <col:9> 'int' <FloatingToIntegral>
        `-ImplicitCastExpr 0x1391422f8 <col:9> 'double' <LValueToRValue>
          `-DeclRefExpr 0x1391422d8 <col:9> 'double' lvalue Var 0x139141800 'res' 'double'
