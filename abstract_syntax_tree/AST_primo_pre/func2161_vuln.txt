`-FunctionDecl 0x158128318  line:1:13 invalid rz_analysis_extract_vars 'int (int *, int *, int *)'
  |-ParmVarDecl 0x158128128 <col:38, col:50> col:50 invalid analysis 'int *'
  |-ParmVarDecl 0x1581281a8 <col:60, col:80> col:80 invalid fcn 'int *'
  |-ParmVarDecl 0x158128228 <col:85, col:99> col:99 invalid op 'int *'
  `-CompoundStmt 0x158141f48 <col:103, line:11:1>
    |-CallExpr 0x1581285f0 <line:2:2, col:41> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x158128530 <col:2> 'int ()' Function 0x158128478 'rz_return_if_fail' 'int ()'
    | `-BinaryOperator 0x1581285d0 <col:20, col:39> 'int' contains-errors '&&'
    |   |-BinaryOperator 0x158128590 <col:20, col:32> 'int' contains-errors '&&'
    |   | |-RecoveryExpr 0x158128550 <col:20> '<dependent type>' contains-errors lvalue
    |   | `-RecoveryExpr 0x158128570 <col:32> '<dependent type>' contains-errors lvalue
    |   `-RecoveryExpr 0x1581285b0 <col:39> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x158128760 <line:4:2, col:54>
    | `-VarDecl 0x158128630 <col:2, col:14> col:14 used BP 'const char *'
    |-DeclStmt 0x1581418c8 <line:5:2, col:54>
    | `-VarDecl 0x158128790 <col:2, col:14> col:14 used SP 'const char *'
    |-IfStmt 0x158141d90 <line:6:2, line:9:2>
    | |-ImplicitCastExpr 0x158141900 <line:6:6> 'const char *' <LValueToRValue>
    | | `-DeclRefExpr 0x1581418e0 <col:6> 'const char *' lvalue Var 0x158128630 'BP' 'const char *'
    | `-CompoundStmt 0x158141d70 <col:10, line:9:2>
    |   |-CallExpr 0x158141b88 <line:7:3, col:69> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x1581419f8 <col:3> 'int ()' Function 0x158141940 'extract_arg' 'int ()'
    |   | |-RecoveryExpr 0x158141a18 <col:15> '<dependent type>' contains-errors lvalue
    |   | |-RecoveryExpr 0x158141a38 <col:25> '<dependent type>' contains-errors lvalue
    |   | |-RecoveryExpr 0x158141a58 <col:30> '<dependent type>' contains-errors lvalue
    |   | |-DeclRefExpr 0x158141a78 <col:34> 'const char *' lvalue Var 0x158128630 'BP' 'const char *'
    |   | |-StringLiteral 0x158141ae0 <col:38> 'char[4]' lvalue "STR"
    |   | `-RecoveryExpr 0x158141b68 <col:45> '<dependent type>' contains-errors lvalue
    |   `-CallExpr 0x158141d20 <line:8:3, col:69> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x158141bd8 <col:3> 'int ()' Function 0x158141940 'extract_arg' 'int ()'
    |     |-RecoveryExpr 0x158141bf8 <col:15> '<dependent type>' contains-errors lvalue
    |     |-RecoveryExpr 0x158141c18 <col:25> '<dependent type>' contains-errors lvalue
    |     |-RecoveryExpr 0x158141c38 <col:30> '<dependent type>' contains-errors lvalue
    |     |-DeclRefExpr 0x158141c58 <col:34> 'const char *' lvalue Var 0x158128630 'BP' 'const char *'
    |     |-StringLiteral 0x158141c78 <col:38> 'char[4]' lvalue "STR"
    |     `-RecoveryExpr 0x158141d00 <col:45> '<dependent type>' contains-errors lvalue
    `-CallExpr 0x158141ef8 <line:10:2, col:68> '<dependent type>' contains-errors
      |-DeclRefExpr 0x158141db0 <col:2> 'int ()' Function 0x158141940 'extract_arg' 'int ()'
      |-RecoveryExpr 0x158141dd0 <col:14> '<dependent type>' contains-errors lvalue
      |-RecoveryExpr 0x158141df0 <col:24> '<dependent type>' contains-errors lvalue
      |-RecoveryExpr 0x158141e10 <col:29> '<dependent type>' contains-errors lvalue
      |-DeclRefExpr 0x158141e30 <col:33> 'const char *' lvalue Var 0x158128790 'SP' 'const char *'
      |-StringLiteral 0x158141e50 <col:37> 'char[4]' lvalue "STR"
      `-RecoveryExpr 0x158141ed8 <col:44> '<dependent type>' contains-errors lvalue
