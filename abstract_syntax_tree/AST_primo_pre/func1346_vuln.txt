`-FunctionDecl 0x1468d89e0  line:1:15 invalid spl_array_get_dimension_ptr_ptr 'int **(int, int *, int *, int)' static
  |-ParmVarDecl 0x1468d86f0 <col:47, col:51> col:51 check_inherited 'int'
  |-ParmVarDecl 0x1468d87a8 <col:68, col:74> col:74 invalid object 'int *'
  |-ParmVarDecl 0x1468d8828 <col:82, col:88> col:88 invalid offset 'int *'
  |-ParmVarDecl 0x1468d88a8 <col:96, col:100> col:100 used type 'int'
  `-CompoundStmt 0x147038488 <line:2:1, line:73:1>
    |-DeclStmt 0x1468d8ba0 <line:5:2, col:12>
    | `-VarDecl 0x1468d8b38 <col:2, col:7> col:7 used index 'long'
    |-IfStmt 0x148009bb8 <line:8:2, line:10:2>
    | |-UnaryOperator 0x1468d8dc0 <line:8:6, col:7> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x1468d8da8 <col:7> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x1468d8d88 <col:7> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x148009ba0 <col:15, line:10:2>
    |   `-ReturnStmt 0x148009b90 <line:9:3, col:36>
    |     `-UnaryOperator 0x148009b78 <col:10, col:36> '<dependent type>' contains-errors prefix '&' cannot overflow
    |       `-CallExpr 0x148009b50 <col:11, col:36> '<dependent type>' contains-errors
    |         |-DeclRefExpr 0x148009ab8 <col:11> 'int ()' Function 0x148009a00 'EG' 'int ()'
    |         `-RecoveryExpr 0x148009b30 <col:14> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x148009f10 <line:12:2, line:15:2>
    | |-RecoveryExpr 0x148009d48 <line:12:6, col:69> '_Bool' contains-errors
    | `-CompoundStmt 0x148009ef8 <col:72, line:15:2>
    |   `-NullStmt 0x148009ef0 <line:14:30>
    `-SwitchStmt 0x14800a078 <line:17:2, line:72:2>
      |-CallExpr 0x14800a050 <line:17:9, col:24> '<dependent type>' contains-errors
      | |-DeclRefExpr 0x14800a010 <col:9> 'int ()' Function 0x148009f58 'Z_TYPE_P' 'int ()'
      | `-RecoveryExpr 0x14800a030 <col:18> '<dependent type>' contains-errors lvalue
      `-CompoundStmt 0x147038448 <col:27, line:72:2>
        |-BinaryOperator 0x14800a248 <line:19:3, col:24> '<dependent type>' contains-errors '='
        | |-CallExpr 0x14800a1c0 <col:3, col:20> '<dependent type>' contains-errors
        | | |-DeclRefExpr 0x14800a180 <col:3> 'int ()' Function 0x14800a0c8 'Z_STRVAL_P' 'int ()'
        | | `-RecoveryExpr 0x14800a1a0 <col:14> '<dependent type>' contains-errors lvalue
        | `-StringLiteral 0x14800a230 <col:24> 'char[1]' lvalue ""
        |-BinaryOperator 0x14800a3d0 <line:20:3, col:24> '<dependent type>' contains-errors '='
        | |-CallExpr 0x14800a388 <col:3, col:20> '<dependent type>' contains-errors
        | | |-DeclRefExpr 0x14800a348 <col:3> 'int ()' Function 0x14800a290 'Z_STRLEN_P' 'int ()'
        | | `-RecoveryExpr 0x14800a368 <col:14> '<dependent type>' contains-errors lvalue
        | `-IntegerLiteral 0x14800a3b0 <col:24> 'int' 0
        |-IfStmt 0x147037990 <line:22:3, line:38:3>
        | |-RecoveryExpr 0x14800a600 <line:22:7, col:94> '_Bool' contains-errors
        | `-CompoundStmt 0x147037978 <col:103, line:38:3>
        |   `-SwitchStmt 0x14800a658 <line:23:4, line:37:4>
        |     |-ImplicitCastExpr 0x14800a640 <line:23:12> 'int' <LValueToRValue>
        |     | `-DeclRefExpr 0x14800a620 <col:12> 'int' lvalue ParmVar 0x1468d88a8 'type' 'int'
        |     `-CompoundStmt 0x147037958 <col:18, line:37:4>
        |       |-BreakStmt 0x14800a748 <line:29:6>
        |       `-CompoundStmt 0x147037948 <line:32:20, line:36:5>
        |-IfStmt 0x147037ec8 <line:45:3, line:49:3> has_else
        | |-RecoveryExpr 0x147037c08 <line:45:7, col:23> '_Bool' contains-errors
        | |-CompoundStmt 0x147037df0 <col:34, line:47:3>
        | | `-BinaryOperator 0x147037dd0 <line:46:4, col:33> 'long' contains-errors '='
        | |   |-DeclRefExpr 0x147037c28 <col:4> 'long' lvalue Var 0x1468d8b38 'index' 'long'
        | |   `-CStyleCastExpr 0x147037da8 <col:12, col:33> 'long' contains-errors <Dependent>
        | |     `-CallExpr 0x147037d68 <col:18, col:33> '<dependent type>' contains-errors
        | |       |-DeclRefExpr 0x147037d28 <col:18> 'int ()' Function 0x147037c70 'Z_DVAL_P' 'int ()'
        | |       `-RecoveryExpr 0x147037d48 <col:27> '<dependent type>' contains-errors lvalue
        | `-CompoundStmt 0x147037eb0 <line:47:10, line:49:3>
        |   `-BinaryOperator 0x147037e90 <line:48:4, col:27> 'long' contains-errors '='
        |     |-DeclRefExpr 0x147037e08 <col:4> 'long' lvalue Var 0x1468d8b38 'index' 'long'
        |     `-CallExpr 0x147037e68 <col:12, col:27> '<dependent type>' contains-errors
        |       |-DeclRefExpr 0x147037e28 <col:12> 'int ()' Function 0x147037a18 'Z_LVAL_P' 'int ()'
        |       `-RecoveryExpr 0x147037e48 <col:21> '<dependent type>' contains-errors lvalue
        |-IfStmt 0x147038340 <line:50:3, line:66:3>
        | |-RecoveryExpr 0x147038018 <line:50:7, col:61> '_Bool' contains-errors
        | `-CompoundStmt 0x147038328 <col:70, line:66:3>
        |   `-SwitchStmt 0x147038070 <line:51:4, line:65:4>
        |     |-ImplicitCastExpr 0x147038058 <line:51:12> 'int' <LValueToRValue>
        |     | `-DeclRefExpr 0x147038038 <col:12> 'int' lvalue ParmVar 0x1468d88a8 'type' 'int'
        |     `-CompoundStmt 0x147038308 <col:18, line:65:4>
        |       |-BreakStmt 0x147038118 <line:57:6>
        |       `-CompoundStmt 0x1470382f8 <line:60:20, line:64:7>
        `-DefaultStmt 0x1470383a8 <line:68:2, col:9>
          `-NullStmt 0x1470383a0 <col:9>
