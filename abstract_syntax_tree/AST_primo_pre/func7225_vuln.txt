`-FunctionDecl 0x11e128558  line:1:12 invalid fts3SelectLeaf 'int (int *, const char *, int, const char *, int, int *, int *)' static
  |-ParmVarDecl 0x11e128128 <line:2:3, col:14> col:14 invalid p 'int *'
  |-ParmVarDecl 0x11e1281a8 <line:3:3, col:15> col:15 used zTerm 'const char *'
  |-ParmVarDecl 0x11e128228 <line:4:3, col:7> col:7 used nTerm 'int'
  |-ParmVarDecl 0x11e1282a8 <line:5:3, col:15> col:15 used zNode 'const char *'
  |-ParmVarDecl 0x11e128328 <line:6:3, col:7> col:7 used nNode 'int'
  |-ParmVarDecl 0x11e1283a8 <line:7:3, col:18> col:18 referenced invalid piLeaf 'int *'
  |-ParmVarDecl 0x11e128428 <line:8:3, col:18> col:18 invalid piLeaf2 'int *'
  `-CompoundStmt 0x11e143db8 <line:9:2, line:49:1>
    |-DeclStmt 0x11e1286f0 <line:10:3, col:21>
    | `-VarDecl 0x11e128650 <col:3, col:12> col:7 used rc 'int' cinit
    |   `-RecoveryExpr 0x11e1286d0 <col:12> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x11e128788 <line:11:3, col:14>
    | `-VarDecl 0x11e128720 <col:3, col:7> col:7 used iHeight 'int'
    |-CallExpr 0x11e141990 <line:13:3, col:29> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x11e141910 <col:3> 'int ()' Function 0x11e141858 'assert' 'int ()'
    | `-BinaryOperator 0x11e141970 <col:11, col:21> 'int' contains-errors '||'
    |   |-RecoveryExpr 0x11e141930 <col:11> '<dependent type>' contains-errors lvalue
    |   `-RecoveryExpr 0x11e141950 <col:21> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x11e141b58 <line:15:3, col:34> 'int'
    | |-ImplicitCastExpr 0x11e141b40 <col:3> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x11e141a98 <col:3> 'int ()' Function 0x11e1419e0 'fts3GetVarint32' 'int ()'
    | |-ImplicitCastExpr 0x11e141b88 <col:19> 'const char *' <LValueToRValue>
    | | `-DeclRefExpr 0x11e141ab8 <col:19> 'const char *' lvalue ParmVar 0x11e1282a8 'zNode' 'const char *'
    | `-UnaryOperator 0x11e141af8 <col:26, col:27> 'int *' prefix '&' cannot overflow
    |   `-DeclRefExpr 0x11e141ad8 <col:27> 'int' lvalue Var 0x11e128720 'iHeight' 'int'
    |-BinaryOperator 0x11e141dd0 <line:16:3, col:72> 'int' contains-errors '='
    | |-DeclRefExpr 0x11e141ba0 <col:3> 'int' contains-errors lvalue Var 0x11e128650 'rc' 'int'
    | `-CallExpr 0x11e141d80 <col:8, col:72> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x11e141ca0 <col:8> 'int ()' Function 0x11e141be8 'fts3ScanInteriorNode' 'int ()'
    |   |-DeclRefExpr 0x11e141cc0 <col:29> 'const char *' lvalue ParmVar 0x11e1281a8 'zTerm' 'const char *'
    |   |-DeclRefExpr 0x11e141ce0 <col:36> 'int' lvalue ParmVar 0x11e128228 'nTerm' 'int'
    |   |-DeclRefExpr 0x11e141d00 <col:43> 'const char *' lvalue ParmVar 0x11e1282a8 'zNode' 'const char *'
    |   |-DeclRefExpr 0x11e141d20 <col:50> 'int' lvalue ParmVar 0x11e128328 'nNode' 'int'
    |   |-RecoveryExpr 0x11e141d40 <col:57> '<dependent type>' contains-errors lvalue
    |   `-RecoveryExpr 0x11e141d60 <col:65> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x11e142310 <line:17:3, col:71> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x11e141df0 <col:3> 'int ()' Function 0x11e141858 'assert' 'int ()'
    | `-BinaryOperator 0x11e1422f0 <col:11, col:69> 'int' contains-errors '||'
    |   |-BinaryOperator 0x11e142230 <col:11, col:38> 'int' contains-errors '||'
    |   | |-BinaryOperator 0x11e1421d0 <col:11, col:24> 'int' contains-errors '||'
    |   | | |-UnaryOperator 0x11e142188 <col:11, col:12> '<dependent type>' contains-errors prefix '!' cannot overflow
    |   | | | `-ImplicitCastExpr 0x11e142170 <col:12> '<dependent type>' contains-errors <LValueToRValue>
    |   | | |   `-RecoveryExpr 0x11e141e10 <col:12> '<dependent type>' contains-errors lvalue
    |   | | `-UnaryOperator 0x11e1421b8 <col:23, col:24> '<dependent type>' contains-errors prefix '!' cannot overflow
    |   | |   `-ImplicitCastExpr 0x11e1421a0 <col:24> '<dependent type>' contains-errors <LValueToRValue>
    |   | |     `-RecoveryExpr 0x11e141e60 <col:24> '<dependent type>' contains-errors lvalue
    |   | `-BinaryOperator 0x11e142210 <col:34, col:38> 'int' contains-errors '!='
    |   |   |-DeclRefExpr 0x11e141ed0 <col:34> 'int' contains-errors lvalue Var 0x11e128650 'rc' 'int'
    |   |   `-RecoveryExpr 0x11e1421f0 <col:38> '<dependent type>' contains-errors lvalue
    |   `-ParenExpr 0x11e1422d0 <col:51, col:69> 'int' contains-errors
    |     `-BinaryOperator 0x11e1422b0 <col:52, col:62> 'int' contains-errors '<='
    |       |-UnaryOperator 0x11e142268 <col:52, col:53> '<dependent type>' contains-errors prefix '*' cannot overflow
    |       | `-ImplicitCastExpr 0x11e142250 <col:53> '<dependent type>' contains-errors <LValueToRValue>
    |       |   `-RecoveryExpr 0x11e141f48 <col:53> '<dependent type>' contains-errors lvalue
    |       `-UnaryOperator 0x11e142298 <col:61, col:62> '<dependent type>' contains-errors prefix '*' cannot overflow
    |         `-ImplicitCastExpr 0x11e142280 <col:62> '<dependent type>' contains-errors <LValueToRValue>
    |           `-RecoveryExpr 0x11e141f98 <col:62> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x11e143d50 <line:19:3, line:46:3>
    | |-BinaryOperator 0x11e1424a0 <line:19:7, col:32> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x11e142448 <col:7, col:11> 'int' contains-errors '=='
    | | | |-DeclRefExpr 0x11e142338 <col:7> 'int' contains-errors lvalue Var 0x11e128650 'rc' 'int'
    | | | `-RecoveryExpr 0x11e142428 <col:11> '<dependent type>' contains-errors lvalue
    | | `-BinaryOperator 0x11e142480 <col:24, col:32> 'int' '>'
    | |   |-ImplicitCastExpr 0x11e142468 <col:24> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x11e142390 <col:24> 'int' lvalue Var 0x11e128720 'iHeight' 'int'
    | |   `-IntegerLiteral 0x11e1423b0 <col:32> 'int' 1
    | `-CompoundStmt 0x11e143d10 <col:35, line:46:3>
    |   |-DeclStmt 0x11e142578 <line:20:5, col:20>
    |   | `-VarDecl 0x11e1424d8 <col:5, col:19> col:11 used zBlob 'char *' cinit
    |   |   `-ImplicitCastExpr 0x11e142560 <col:19> 'char *' <NullToPointer>
    |   |     `-IntegerLiteral 0x11e142540 <col:19> 'int' 0
    |   |-DeclStmt 0x11e142630 <line:21:5, col:18>
    |   | `-VarDecl 0x11e1425a8 <col:5, col:17> col:9 used nBlob 'int' cinit
    |   |   `-IntegerLiteral 0x11e142610 <col:17> 'int' 0
    |   |-IfStmt 0x11e143390 <line:23:5, line:31:5>
    |   | |-BinaryOperator 0x11e142788 <line:23:9, col:48> 'int' contains-errors '&&'
    |   | | |-BinaryOperator 0x11e142688 <col:9, col:19> 'int' contains-errors '&&'
    |   | | | |-RecoveryExpr 0x11e142648 <col:9> '<dependent type>' contains-errors lvalue
    |   | | | `-RecoveryExpr 0x11e142668 <col:19> '<dependent type>' contains-errors lvalue
    |   | | `-ParenExpr 0x11e142768 <col:30, col:48> 'int' contains-errors
    |   | |   `-BinaryOperator 0x11e142748 <col:31, col:41> 'int' contains-errors '!='
    |   | |     |-UnaryOperator 0x11e1426e0 <col:31, col:32> '<dependent type>' contains-errors prefix '*' cannot overflow
    |   | |     | `-ImplicitCastExpr 0x11e1426c8 <col:32> '<dependent type>' contains-errors <LValueToRValue>
    |   | |     |   `-RecoveryExpr 0x11e1426a8 <col:32> '<dependent type>' contains-errors lvalue
    |   | |     `-UnaryOperator 0x11e142730 <col:40, col:41> '<dependent type>' contains-errors prefix '*' cannot overflow
    |   | |       `-ImplicitCastExpr 0x11e142718 <col:41> '<dependent type>' contains-errors <LValueToRValue>
    |   | |         `-RecoveryExpr 0x11e1426f8 <col:41> '<dependent type>' contains-errors lvalue
    |   | `-CompoundStmt 0x11e143358 <col:51, line:31:5>
    |   |   |-BinaryOperator 0x11e142e58 <line:24:7, col:62> 'int' contains-errors '='
    |   |   | |-DeclRefExpr 0x11e1427a8 <col:7> 'int' contains-errors lvalue Var 0x11e128650 'rc' 'int'
    |   |   | `-CallExpr 0x11e142e10 <col:12, col:62> '<dependent type>' contains-errors
    |   |   |   |-DeclRefExpr 0x11e142cb8 <col:12> 'int ()' Function 0x11e142c00 'sqlite3Fts3ReadBlock' 'int ()'
    |   |   |   |-RecoveryExpr 0x11e142cd8 <col:33> '<dependent type>' contains-errors lvalue
    |   |   |   |-UnaryOperator 0x11e142d30 <col:36, col:37> '<dependent type>' contains-errors prefix '*' cannot overflow
    |   |   |   | `-ImplicitCastExpr 0x11e142d18 <col:37> '<dependent type>' contains-errors <LValueToRValue>
    |   |   |   |   `-RecoveryExpr 0x11e142cf8 <col:37> '<dependent type>' contains-errors lvalue
    |   |   |   |-UnaryOperator 0x11e142da0 <col:45, col:46> 'char **' prefix '&' cannot overflow
    |   |   |   | `-DeclRefExpr 0x11e142d48 <col:46> 'char *' lvalue Var 0x11e1424d8 'zBlob' 'char *'
    |   |   |   |-UnaryOperator 0x11e142dd8 <col:53, col:54> 'int *' prefix '&' cannot overflow
    |   |   |   | `-DeclRefExpr 0x11e142db8 <col:54> 'int' lvalue Var 0x11e1425a8 'nBlob' 'int'
    |   |   |   `-IntegerLiteral 0x11e142df0 <col:61> 'int' 0
    |   |   |-IfStmt 0x11e1430c0 <line:25:7, line:27:7>
    |   |   | |-BinaryOperator 0x11e142ef0 <line:25:11, col:15> 'int' contains-errors '=='
    |   |   | | |-DeclRefExpr 0x11e142e78 <col:11> 'int' contains-errors lvalue Var 0x11e128650 'rc' 'int'
    |   |   | | `-RecoveryExpr 0x11e142ed0 <col:15> '<dependent type>' contains-errors lvalue
    |   |   | `-CompoundStmt 0x11e1430a8 <col:26, line:27:7>
    |   |   |   `-BinaryOperator 0x11e143088 <line:26:9, col:69> 'int' contains-errors '='
    |   |   |     |-DeclRefExpr 0x11e142f10 <col:9> 'int' contains-errors lvalue Var 0x11e128650 'rc' 'int'
    |   |   |     `-CallExpr 0x11e143030 <col:14, col:69> '<dependent type>' contains-errors
    |   |   |       |-RecoveryExpr 0x11e142f30 <col:14> '<dependent type>' contains-errors lvalue
    |   |   |       |-RecoveryExpr 0x11e142f50 <col:29> '<dependent type>' contains-errors lvalue
    |   |   |       |-DeclRefExpr 0x11e142f70 <col:32> 'const char *' lvalue ParmVar 0x11e1281a8 'zTerm' 'const char *'
    |   |   |       |-DeclRefExpr 0x11e142f90 <col:39> 'int' lvalue ParmVar 0x11e128228 'nTerm' 'int'
    |   |   |       |-DeclRefExpr 0x11e142fb0 <col:46> 'char *' lvalue Var 0x11e1424d8 'zBlob' 'char *'
    |   |   |       |-DeclRefExpr 0x11e142fd0 <col:53> 'int' lvalue Var 0x11e1425a8 'nBlob' 'int'
    |   |   |       |-RecoveryExpr 0x11e142ff0 <col:60> '<dependent type>' contains-errors lvalue
    |   |   |       `-IntegerLiteral 0x11e143010 <col:68> 'int' 0
    |   |   |-CallExpr 0x11e143218 <line:28:7, col:25> 'int'
    |   |   | |-ImplicitCastExpr 0x11e143200 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |   |   | | `-DeclRefExpr 0x11e1431c0 <col:7> 'int ()' Function 0x11e143108 'sqlite3_free' 'int ()'
    |   |   | `-ImplicitCastExpr 0x11e143240 <col:20> 'char *' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x11e1431e0 <col:20> 'char *' lvalue Var 0x11e1424d8 'zBlob' 'char *'
    |   |   |-BinaryOperator 0x11e1432c0 <line:29:7, col:16> '<dependent type>' contains-errors '='
    |   |   | |-RecoveryExpr 0x11e143278 <col:7> '<dependent type>' contains-errors lvalue
    |   |   | | `-DeclRefExpr 0x11e143258 <col:7> 'int *' lvalue ParmVar 0x11e1283a8 'piLeaf' 'int *'
    |   |   | `-IntegerLiteral 0x11e1432a0 <col:16> 'int' 0
    |   |   `-BinaryOperator 0x11e143338 <line:30:7, col:15> 'char *' '='
    |   |     |-DeclRefExpr 0x11e1432e0 <col:7> 'char *' lvalue Var 0x11e1424d8 'zBlob' 'char *'
    |   |     `-ImplicitCastExpr 0x11e143320 <col:15> 'char *' <NullToPointer>
    |   |       `-IntegerLiteral 0x11e143300 <col:15> 'int' 0
    |   |-IfStmt 0x11e1436a8 <line:33:5, line:35:5>
    |   | |-BinaryOperator 0x11e143428 <line:33:9, col:13> 'int' contains-errors '=='
    |   | | |-DeclRefExpr 0x11e1433b0 <col:9> 'int' contains-errors lvalue Var 0x11e128650 'rc' 'int'
    |   | | `-RecoveryExpr 0x11e143408 <col:13> '<dependent type>' contains-errors lvalue
    |   | `-CompoundStmt 0x11e143690 <col:24, line:35:5>
    |   |   `-BinaryOperator 0x11e143670 <line:34:7, col:78> 'int' contains-errors '='
    |   |     |-DeclRefExpr 0x11e143448 <col:7> 'int' contains-errors lvalue Var 0x11e128650 'rc' 'int'
    |   |     `-CallExpr 0x11e143628 <col:12, col:78> '<dependent type>' contains-errors
    |   |       |-DeclRefExpr 0x11e143468 <col:12> 'int ()' Function 0x11e142c00 'sqlite3Fts3ReadBlock' 'int ()'
    |   |       |-RecoveryExpr 0x11e143488 <col:33> '<dependent type>' contains-errors lvalue
    |   |       |-ConditionalOperator 0x11e143568 <col:36, col:52> '<dependent type>' contains-errors
    |   |       | |-RecoveryExpr 0x11e1434a8 <col:36> '<dependent type>' contains-errors lvalue
    |   |       | |-UnaryOperator 0x11e143500 <col:43, col:44> '<dependent type>' contains-errors prefix '*' cannot overflow
    |   |       | | `-ImplicitCastExpr 0x11e1434e8 <col:44> '<dependent type>' contains-errors <LValueToRValue>
    |   |       | |   `-RecoveryExpr 0x11e1434c8 <col:44> '<dependent type>' contains-errors lvalue
    |   |       | `-UnaryOperator 0x11e143550 <col:51, col:52> '<dependent type>' contains-errors prefix '*' cannot overflow
    |   |       |   `-ImplicitCastExpr 0x11e143538 <col:52> '<dependent type>' contains-errors <LValueToRValue>
    |   |       |     `-RecoveryExpr 0x11e143518 <col:52> '<dependent type>' contains-errors lvalue
    |   |       |-UnaryOperator 0x11e1435b8 <col:61, col:62> 'char **' prefix '&' cannot overflow
    |   |       | `-DeclRefExpr 0x11e143598 <col:62> 'char *' lvalue Var 0x11e1424d8 'zBlob' 'char *'
    |   |       |-UnaryOperator 0x11e1435f0 <col:69, col:70> 'int *' prefix '&' cannot overflow
    |   |       | `-DeclRefExpr 0x11e1435d0 <col:70> 'int' lvalue Var 0x11e1425a8 'nBlob' 'int'
    |   |       `-IntegerLiteral 0x11e143608 <col:77> 'int' 0
    |   |-IfStmt 0x11e143c58 <line:36:5, line:44:5>
    |   | |-BinaryOperator 0x11e143740 <line:36:9, col:13> 'int' contains-errors '=='
    |   | | |-DeclRefExpr 0x11e1436c8 <col:9> 'int' contains-errors lvalue Var 0x11e128650 'rc' 'int'
    |   | | `-RecoveryExpr 0x11e143720 <col:13> '<dependent type>' contains-errors lvalue
    |   | `-CompoundStmt 0x11e143c30 <col:24, line:44:5>
    |   |   |-DeclStmt 0x11e143800 <line:37:7, col:25>
    |   |   | `-VarDecl 0x11e143778 <col:7, col:24> col:11 used iNewHeight 'int' cinit
    |   |   |   `-IntegerLiteral 0x11e1437e0 <col:24> 'int' 0
    |   |   |-CallExpr 0x11e1438a8 <line:38:7, col:41> 'int'
    |   |   | |-ImplicitCastExpr 0x11e143890 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |   |   | | `-DeclRefExpr 0x11e143818 <col:7> 'int ()' Function 0x11e1419e0 'fts3GetVarint32' 'int ()'
    |   |   | |-ImplicitCastExpr 0x11e1438d8 <col:23> 'char *' <LValueToRValue>
    |   |   | | `-DeclRefExpr 0x11e143838 <col:23> 'char *' lvalue Var 0x11e1424d8 'zBlob' 'char *'
    |   |   | `-UnaryOperator 0x11e143878 <col:30, col:31> 'int *' prefix '&' cannot overflow
    |   |   |   `-DeclRefExpr 0x11e143858 <col:31> 'int' lvalue Var 0x11e143778 'iNewHeight' 'int'
    |   |   `-IfStmt 0x11e143c00 <line:39:7, line:43:7> has_else
    |   |     |-BinaryOperator 0x11e143960 <line:39:11, col:23> 'int' '<='
    |   |     | |-ImplicitCastExpr 0x11e143930 <col:11> 'int' <LValueToRValue>
    |   |     | | `-DeclRefExpr 0x11e1438f0 <col:11> 'int' lvalue Var 0x11e143778 'iNewHeight' 'int'
    |   |     | `-ImplicitCastExpr 0x11e143948 <col:23> 'int' <LValueToRValue>
    |   |     |   `-DeclRefExpr 0x11e143910 <col:23> 'int' lvalue Var 0x11e128720 'iHeight' 'int'
    |   |     |-CompoundStmt 0x11e143a18 <col:32, line:41:7>
    |   |     | `-BinaryOperator 0x11e1439f8 <line:40:9, col:14> 'int' contains-errors '='
    |   |     |   |-DeclRefExpr 0x11e143980 <col:9> 'int' contains-errors lvalue Var 0x11e128650 'rc' 'int'
    |   |     |   `-RecoveryExpr 0x11e1439d8 <col:14> '<dependent type>' contains-errors lvalue
    |   |     `-CompoundStmt 0x11e143bc8 <line:41:12, line:43:7>
    |   |       `-BinaryOperator 0x11e143ba8 <line:42:9, col:75> 'int' contains-errors '='
    |   |         |-DeclRefExpr 0x11e143a30 <col:9> 'int' contains-errors lvalue Var 0x11e128650 'rc' 'int'
    |   |         `-CallExpr 0x11e143b50 <col:14, col:75> '<dependent type>' contains-errors
    |   |           |-RecoveryExpr 0x11e143a50 <col:14> '<dependent type>' contains-errors lvalue
    |   |           |-RecoveryExpr 0x11e143a70 <col:29> '<dependent type>' contains-errors lvalue
    |   |           |-DeclRefExpr 0x11e143a90 <col:32> 'const char *' lvalue ParmVar 0x11e1281a8 'zTerm' 'const char *'
    |   |           |-DeclRefExpr 0x11e143ab0 <col:39> 'int' lvalue ParmVar 0x11e128228 'nTerm' 'int'
    |   |           |-DeclRefExpr 0x11e143ad0 <col:46> 'char *' lvalue Var 0x11e1424d8 'zBlob' 'char *'
    |   |           |-DeclRefExpr 0x11e143af0 <col:53> 'int' lvalue Var 0x11e1425a8 'nBlob' 'int'
    |   |           |-RecoveryExpr 0x11e143b10 <col:60> '<dependent type>' contains-errors lvalue
    |   |           `-RecoveryExpr 0x11e143b30 <col:68> '<dependent type>' contains-errors lvalue
    |   `-CallExpr 0x11e143cd0 <line:45:5, col:23> 'int'
    |     |-ImplicitCastExpr 0x11e143cb8 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x11e143c78 <col:5> 'int ()' Function 0x11e143108 'sqlite3_free' 'int ()'
    |     `-ImplicitCastExpr 0x11e143cf8 <col:18> 'char *' <LValueToRValue>
    |       `-DeclRefExpr 0x11e143c98 <col:18> 'char *' lvalue Var 0x11e1424d8 'zBlob' 'char *'
    `-ReturnStmt 0x11e143da8 <line:48:3, col:10>
      `-ImplicitCastExpr 0x11e143d90 <col:10> 'int' contains-errors <LValueToRValue>
        `-DeclRefExpr 0x11e143d70 <col:10> 'int' contains-errors lvalue Var 0x11e128650 'rc' 'int'
