`-FunctionDecl 0x14c919970  line:1:6 invalid flush_hash_page 'void (unsigned long, int, int, int)'
  |-ParmVarDecl 0x14c9196d8 <col:22, col:36> col:36 used va 'unsigned long'
  |-ParmVarDecl 0x14c919770 <col:40, col:51> col:51 invalid pte 'int'
  |-ParmVarDecl 0x14c9197f0 <col:56, col:60> col:60 used psize 'int'
  |-ParmVarDecl 0x14c919870 <col:67, col:71> col:71 used local 'int'
  `-CompoundStmt 0x14c933be8 <line:2:1, line:16:1>
    |-DeclStmt 0x14c919ce8 <line:3:2, col:46>
    | |-VarDecl 0x14c919a50 <col:2, col:16> col:16 used hash 'unsigned long'
    | |-VarDecl 0x14c919ad0 <col:2, col:22> col:22 used index 'unsigned long'
    | |-VarDecl 0x14c919b50 <col:2, col:29> col:29 used shift 'unsigned long'
    | |-VarDecl 0x14c919bd0 <col:2, col:36> col:36 used hidx 'unsigned long'
    | `-VarDecl 0x14c919c50 <col:2, col:42> col:42 used slot 'unsigned long'
    |-CallExpr 0x14c932fa8 <line:5:2, col:19> 'int'
    | |-ImplicitCastExpr 0x14c932f90 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x14c932eb8 <col:2> 'int ()' Function 0x14c932e00 'DBG_LOW' 'int ()'
    | |-ImplicitCastExpr 0x14c932fd8 <col:10> 'char *' <ArrayToPointerDecay>
    | | `-StringLiteral 0x14c932f20 <col:10> 'char[4]' lvalue "STR"
    | `-ImplicitCastExpr 0x14c932ff0 <col:17> 'unsigned long' <LValueToRValue>
    |   `-DeclRefExpr 0x14c932f40 <col:17> 'unsigned long' lvalue ParmVar 0x14c9196d8 'va' 'unsigned long'
    |-CallExpr 0x14c9331a8 <line:6:2, col:58> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x14c9330e8 <col:2> 'int ()' Function 0x14c933030 'pte_iterate_hashed_subpages' 'int ()'
    | |-RecoveryExpr 0x14c933108 <col:30> '<dependent type>' contains-errors lvalue
    | |-DeclRefExpr 0x14c933128 <col:35> 'int' lvalue ParmVar 0x14c9197f0 'psize' 'int'
    | |-DeclRefExpr 0x14c933148 <col:42> 'unsigned long' lvalue ParmVar 0x14c9196d8 'va' 'unsigned long'
    | |-DeclRefExpr 0x14c933168 <col:46> 'unsigned long' lvalue Var 0x14c919ad0 'index' 'unsigned long'
    | `-DeclRefExpr 0x14c933188 <col:53> 'unsigned long' lvalue Var 0x14c919b50 'shift' 'unsigned long'
    |-CompoundStmt 0x14c933a78 <col:60, line:15:2>
    | |-BinaryOperator 0x14c9333e0 <line:7:3, col:28> 'unsigned long' '='
    | | |-DeclRefExpr 0x14c9331f0 <col:3> 'unsigned long' lvalue Var 0x14c919a50 'hash' 'unsigned long'
    | | `-ImplicitCastExpr 0x14c9333c8 <col:10, col:28> 'unsigned long' <IntegralCast>
    | |   `-CallExpr 0x14c933368 <col:10, col:28> 'int'
    | |     |-ImplicitCastExpr 0x14c933350 <col:10> 'int (*)()' <FunctionToPointerDecay>
    | |     | `-DeclRefExpr 0x14c9332f0 <col:10> 'int ()' Function 0x14c933238 'hpt_hash' 'int ()'
    | |     |-ImplicitCastExpr 0x14c933398 <col:19> 'unsigned long' <LValueToRValue>
    | |     | `-DeclRefExpr 0x14c933310 <col:19> 'unsigned long' lvalue ParmVar 0x14c9196d8 'va' 'unsigned long'
    | |     `-ImplicitCastExpr 0x14c9333b0 <col:23> 'unsigned long' <LValueToRValue>
    | |       `-DeclRefExpr 0x14c933330 <col:23> 'unsigned long' lvalue Var 0x14c919b50 'shift' 'unsigned long'
    | |-BinaryOperator 0x14c933590 <line:8:3, col:35> 'unsigned long' contains-errors '='
    | | |-DeclRefExpr 0x14c933400 <col:3> 'unsigned long' lvalue Var 0x14c919bd0 'hidx' 'unsigned long'
    | | `-CallExpr 0x14c933560 <col:10, col:35> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x14c933500 <col:10> 'int ()' Function 0x14c933448 '__rpte_to_hidx' 'int ()'
    | |   |-RecoveryExpr 0x14c933520 <col:25> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x14c933540 <col:30> 'unsigned long' lvalue Var 0x14c919ad0 'index' 'unsigned long'
    | |-IfStmt 0x14c9336d8 <line:9:3, line:10:12>
    | | |-BinaryOperator 0x14c933628 <line:9:7, col:14> '<dependent type>' contains-errors '&'
    | | | |-DeclRefExpr 0x14c9335b0 <col:7> 'unsigned long' lvalue Var 0x14c919bd0 'hidx' 'unsigned long'
    | | | `-RecoveryExpr 0x14c933608 <col:14> '<dependent type>' contains-errors lvalue
    | | `-BinaryOperator 0x14c9336b8 <line:10:4, col:12> 'unsigned long' '='
    | |   |-DeclRefExpr 0x14c933648 <col:4> 'unsigned long' lvalue Var 0x14c919a50 'hash' 'unsigned long'
    | |   `-UnaryOperator 0x14c9336a0 <col:11, col:12> 'unsigned long' prefix '~' cannot overflow
    | |     `-ImplicitCastExpr 0x14c933688 <col:12> 'unsigned long' <LValueToRValue>
    | |       `-DeclRefExpr 0x14c933668 <col:12> 'unsigned long' lvalue Var 0x14c919a50 'hash' 'unsigned long'
    | |-CompoundAssignOperator 0x14c933870 <line:12:3, col:18> 'unsigned long' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    | | |-DeclRefExpr 0x14c933788 <col:3> 'unsigned long' lvalue Var 0x14c919c50 'slot' 'unsigned long'
    | | `-BinaryOperator 0x14c933850 <col:11, col:18> '<dependent type>' contains-errors '&'
    | |   |-DeclRefExpr 0x14c9337a8 <col:11> 'unsigned long' lvalue Var 0x14c919bd0 'hidx' 'unsigned long'
    | |   `-RecoveryExpr 0x14c933830 <col:18> '<dependent type>' contains-errors lvalue
    | `-CallExpr 0x14c933958 <line:13:3, col:35> 'int'
    |   |-ImplicitCastExpr 0x14c933940 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x14c9338a0 <col:3> 'int ()' Function 0x14c932e00 'DBG_LOW' 'int ()'
    |   |-ImplicitCastExpr 0x14c933998 <col:11> 'char *' <ArrayToPointerDecay>
    |   | `-StringLiteral 0x14c9338c0 <col:11> 'char[4]' lvalue "STR"
    |   |-ImplicitCastExpr 0x14c9339b0 <col:18> 'unsigned long' <LValueToRValue>
    |   | `-DeclRefExpr 0x14c9338e0 <col:18> 'unsigned long' lvalue Var 0x14c919ad0 'index' 'unsigned long'
    |   |-ImplicitCastExpr 0x14c9339c8 <col:25> 'unsigned long' <LValueToRValue>
    |   | `-DeclRefExpr 0x14c933900 <col:25> 'unsigned long' lvalue Var 0x14c919c50 'slot' 'unsigned long'
    |   `-ImplicitCastExpr 0x14c9339e0 <col:31> 'unsigned long' <LValueToRValue>
    |     `-DeclRefExpr 0x14c933920 <col:31> 'unsigned long' lvalue Var 0x14c919bd0 'hidx' 'unsigned long'
    `-CallExpr 0x14c933bc8 <line:15:4, col:27> 'int'
      `-ImplicitCastExpr 0x14c933bb0 <col:4> 'int (*)()' <FunctionToPointerDecay>
        `-DeclRefExpr 0x14c933b90 <col:4> 'int ()' Function 0x14c933ad8 'pte_iterate_hashed_end' 'int ()'
