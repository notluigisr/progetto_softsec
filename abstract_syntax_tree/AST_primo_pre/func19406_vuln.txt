`-FunctionDecl 0x124128340  line:1:13 invalid format_expand_code 'void (const char **, int *, int *)' static
  |-ParmVarDecl 0x124128108 <col:32, col:45> col:45 used format 'const char **'
  |-ParmVarDecl 0x1241281d8 <col:53, col:62> col:62 invalid out 'int *'
  |-ParmVarDecl 0x124128258 <col:67, col:72> col:72 used flags 'int *'
  `-CompoundStmt 0x1241439a0 <line:2:1, line:38:1>
    |-DeclStmt 0x124128480 <line:3:2, col:9>
    | `-VarDecl 0x124128418 <col:2, col:6> col:6 used set 'int'
    |-IfStmt 0x1241286f0 <line:5:2, line:10:2>
    | |-BinaryOperator 0x124128510 <line:5:6, col:15> 'int' contains-errors '=='
    | | |-DeclRefExpr 0x124128498 <col:6> 'int *' lvalue ParmVar 0x124128258 'flags' 'int *'
    | | `-RecoveryExpr 0x1241284f0 <col:15> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x1241286d0 <col:21, line:10:2>
    |   |-WhileStmt 0x1241286a0 <line:7:3, line:8:13>
    |   | |-BinaryOperator 0x1241285f8 <line:7:10, col:22> 'int' '!='
    |   | | |-ImplicitCastExpr 0x1241285e0 <col:10, col:12> 'int' <IntegralCast>
    |   | | | `-ImplicitCastExpr 0x1241285c8 <col:10, col:12> 'char' <LValueToRValue>
    |   | | |   `-UnaryOperator 0x124128598 <col:10, col:12> 'const char' lvalue prefix '*' cannot overflow
    |   | | |     `-ImplicitCastExpr 0x124128580 <col:11, col:12> 'const char *' <LValueToRValue>
    |   | | |       `-UnaryOperator 0x124128568 <col:11, col:12> 'const char *' lvalue prefix '*' cannot overflow
    |   | | |         `-ImplicitCastExpr 0x124128550 <col:12> 'const char **' <LValueToRValue>
    |   | | |           `-DeclRefExpr 0x124128530 <col:12> 'const char **' lvalue ParmVar 0x124128108 'format' 'const char **'
    |   | | `-CharacterLiteral 0x1241285b0 <col:22> 'int' 93
    |   | `-UnaryOperator 0x124128688 <line:8:4, col:13> 'const char *' postfix '++'
    |   |   `-ParenExpr 0x124128668 <col:4, col:12> 'const char *' lvalue
    |   |     `-UnaryOperator 0x124128650 <col:5, col:6> 'const char *' lvalue prefix '*' cannot overflow
    |   |       `-ImplicitCastExpr 0x124128638 <col:6> 'const char **' <LValueToRValue>
    |   |         `-DeclRefExpr 0x124128618 <col:6> 'const char **' lvalue ParmVar 0x124128108 'format' 'const char **'
    |   `-ReturnStmt 0x1241286c0 <line:9:3>
    |-BinaryOperator 0x124128788 <line:12:2, col:8> 'int' contains-errors '='
    | |-DeclRefExpr 0x124128710 <col:2> 'int' lvalue Var 0x124128418 'set' 'int'
    | `-RecoveryExpr 0x124128768 <col:8> '<dependent type>' contains-errors lvalue
    |-UnaryOperator 0x124141820 <line:13:2, col:11> 'const char *' postfix '++'
    | `-ParenExpr 0x124141800 <col:2, col:10> 'const char *' lvalue
    |   `-UnaryOperator 0x1241287e0 <col:3, col:4> 'const char *' lvalue prefix '*' cannot overflow
    |     `-ImplicitCastExpr 0x1241287c8 <col:4> 'const char **' <LValueToRValue>
    |       `-DeclRefExpr 0x1241287a8 <col:4> 'const char **' lvalue ParmVar 0x124128108 'format' 'const char **'
    `-WhileStmt 0x124143980 <line:14:2, line:37:2>
      |-BinaryOperator 0x124141a08 <line:14:9, col:40> 'int' '&&'
      | |-BinaryOperator 0x124141900 <col:9, col:21> 'int' '!='
      | | |-ImplicitCastExpr 0x1241418e8 <col:9, col:11> 'int' <IntegralCast>
      | | | `-ImplicitCastExpr 0x1241418d0 <col:9, col:11> 'char' <LValueToRValue>
      | | |   `-UnaryOperator 0x1241418a0 <col:9, col:11> 'const char' lvalue prefix '*' cannot overflow
      | | |     `-ImplicitCastExpr 0x124141888 <col:10, col:11> 'const char *' <LValueToRValue>
      | | |       `-UnaryOperator 0x124141870 <col:10, col:11> 'const char *' lvalue prefix '*' cannot overflow
      | | |         `-ImplicitCastExpr 0x124141858 <col:11> 'const char **' <LValueToRValue>
      | | |           `-DeclRefExpr 0x124141838 <col:11> 'const char **' lvalue ParmVar 0x124128108 'format' 'const char **'
      | | `-CharacterLiteral 0x1241418b8 <col:21> 'int' 93
      | `-BinaryOperator 0x1241419e8 <col:28, col:40> 'int' '!='
      |   |-ImplicitCastExpr 0x1241419d0 <col:28, col:30> 'int' <IntegralCast>
      |   | `-ImplicitCastExpr 0x1241419b8 <col:28, col:30> 'char' <LValueToRValue>
      |   |   `-UnaryOperator 0x124141988 <col:28, col:30> 'const char' lvalue prefix '*' cannot overflow
      |   |     `-ImplicitCastExpr 0x124141970 <col:29, col:30> 'const char *' <LValueToRValue>
      |   |       `-UnaryOperator 0x124141958 <col:29, col:30> 'const char *' lvalue prefix '*' cannot overflow
      |   |         `-ImplicitCastExpr 0x124141940 <col:30> 'const char **' <LValueToRValue>
      |   |           `-DeclRefExpr 0x124141920 <col:30> 'const char **' lvalue ParmVar 0x124128108 'format' 'const char **'
      |   `-CharacterLiteral 0x1241419a0 <col:40> 'int' 0
      `-CompoundStmt 0x124143960 <col:46, line:37:2>
        |-IfStmt 0x1241438a8 <line:15:3, line:34:3> has_else
        | |-BinaryOperator 0x124141af0 <line:15:7, col:19> 'int' '=='
        | | |-ImplicitCastExpr 0x124141ad8 <col:7, col:9> 'int' <IntegralCast>
        | | | `-ImplicitCastExpr 0x124141ac0 <col:7, col:9> 'char' <LValueToRValue>
        | | |   `-UnaryOperator 0x124141a90 <col:7, col:9> 'const char' lvalue prefix '*' cannot overflow
        | | |     `-ImplicitCastExpr 0x124141a78 <col:8, col:9> 'const char *' <LValueToRValue>
        | | |       `-UnaryOperator 0x124141a60 <col:8, col:9> 'const char *' lvalue prefix '*' cannot overflow
        | | |         `-ImplicitCastExpr 0x124141a48 <col:9> 'const char **' <LValueToRValue>
        | | |           `-DeclRefExpr 0x124141a28 <col:9> 'const char **' lvalue ParmVar 0x124128108 'format' 'const char **'
        | | `-CharacterLiteral 0x124141aa8 <col:19> 'int' 43
        | |-BinaryOperator 0x124141b88 <line:16:4, col:10> 'int' contains-errors '='
        | | |-DeclRefExpr 0x124141b10 <col:4> 'int' lvalue Var 0x124128418 'set' 'int'
        | | `-RecoveryExpr 0x124141b68 <col:10> '<dependent type>' contains-errors lvalue
        | `-IfStmt 0x124143878 <line:17:8, line:34:3> has_else
        |   |-BinaryOperator 0x124141c70 <line:17:12, col:24> 'int' '=='
        |   | |-ImplicitCastExpr 0x124141c58 <col:12, col:14> 'int' <IntegralCast>
        |   | | `-ImplicitCastExpr 0x124141c40 <col:12, col:14> 'char' <LValueToRValue>
        |   | |   `-UnaryOperator 0x124141c10 <col:12, col:14> 'const char' lvalue prefix '*' cannot overflow
        |   | |     `-ImplicitCastExpr 0x124141bf8 <col:13, col:14> 'const char *' <LValueToRValue>
        |   | |       `-UnaryOperator 0x124141be0 <col:13, col:14> 'const char *' lvalue prefix '*' cannot overflow
        |   | |         `-ImplicitCastExpr 0x124141bc8 <col:14> 'const char **' <LValueToRValue>
        |   | |           `-DeclRefExpr 0x124141ba8 <col:14> 'const char **' lvalue ParmVar 0x124128108 'format' 'const char **'
        |   | `-CharacterLiteral 0x124141c28 <col:24> 'int' 45
        |   |-BinaryOperator 0x124141d08 <line:18:4, col:10> 'int' contains-errors '='
        |   | |-DeclRefExpr 0x124141c90 <col:4> 'int' lvalue Var 0x124128418 'set' 'int'
        |   | `-RecoveryExpr 0x124141ce8 <col:10> '<dependent type>' contains-errors lvalue
        |   `-SwitchStmt 0x124141dd8 <line:19:8, line:34:3>
        |     |-ImplicitCastExpr 0x124141dc0 <line:19:16, col:18> 'int' <IntegralCast>
        |     | `-ImplicitCastExpr 0x124141da8 <col:16, col:18> 'char' <LValueToRValue>
        |     |   `-UnaryOperator 0x124141d90 <col:16, col:18> 'const char' lvalue prefix '*' cannot overflow
        |     |     `-ImplicitCastExpr 0x124141d78 <col:17, col:18> 'const char *' <LValueToRValue>
        |     |       `-UnaryOperator 0x124141d60 <col:17, col:18> 'const char *' lvalue prefix '*' cannot overflow
        |     |         `-ImplicitCastExpr 0x124141d48 <col:18> 'const char **' <LValueToRValue>
        |     |           `-DeclRefExpr 0x124141d28 <col:18> 'const char **' lvalue ParmVar 0x124128108 'format' 'const char **'
        |     `-CompoundStmt 0x124143838 <col:26, line:34:3>
        |       |-CaseStmt 0x124141e30 <line:20:3, line:24:5>
        |       | |-ConstantExpr 0x124141e18 <line:20:8> 'int'
        |       | | `-CharacterLiteral 0x124141e00 <col:8> 'int' 115
        |       | `-CaseStmt 0x124141e88 <line:21:3, line:24:5>
        |       |   |-ConstantExpr 0x124141e70 <line:21:8> 'int'
        |       |   | `-CharacterLiteral 0x124141e58 <col:8> 'int' 83
        |       |   `-CompoundAssignOperator 0x124142340 <line:22:4, line:24:5> 'int' contains-errors '|=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
        |       |     |-UnaryOperator 0x124142188 <line:22:4, col:5> 'int' lvalue prefix '*' cannot overflow
        |       |     | `-ImplicitCastExpr 0x124142170 <col:5> 'int *' <LValueToRValue>
        |       |     |   `-DeclRefExpr 0x124141eb0 <col:5> 'int *' lvalue ParmVar 0x124128258 'flags' 'int *'
        |       |     `-ConditionalOperator 0x124142310 <col:14, line:24:5> '<dependent type>' contains-errors
        |       |       |-UnaryOperator 0x1241421b8 <line:22:14, col:15> 'int' prefix '!' cannot overflow
        |       |       | `-ImplicitCastExpr 0x1241421a0 <col:15> 'int' <LValueToRValue>
        |       |       |   `-DeclRefExpr 0x124141f00 <col:15> 'int' lvalue Var 0x124128418 'set' 'int'
        |       |       |-RecoveryExpr 0x1241421d0 <col:21> '<dependent type>' contains-errors lvalue
        |       |       `-ConditionalOperator 0x1241422e0 <line:23:5, line:24:5> '<dependent type>' contains-errors
        |       |         |-BinaryOperator 0x124142280 <line:23:5, col:17> 'int' '=='
        |       |         | |-ImplicitCastExpr 0x124142268 <col:5, col:7> 'int' <IntegralCast>
        |       |         | | `-ImplicitCastExpr 0x124142250 <col:5, col:7> 'char' <LValueToRValue>
        |       |         | |   `-UnaryOperator 0x124142238 <col:5, col:7> 'const char' lvalue prefix '*' cannot overflow
        |       |         | |     `-ImplicitCastExpr 0x124142220 <col:6, col:7> 'const char *' <LValueToRValue>
        |       |         | |       `-UnaryOperator 0x124142208 <col:6, col:7> 'const char *' lvalue prefix '*' cannot overflow
        |       |         | |         `-ImplicitCastExpr 0x1241421f0 <col:7> 'const char **' <LValueToRValue>
        |       |         | |           `-DeclRefExpr 0x124141f68 <col:7> 'const char **' lvalue ParmVar 0x124128108 'format' 'const char **'
        |       |         | `-CharacterLiteral 0x124141fe8 <col:17> 'int' 115
        |       |         |-RecoveryExpr 0x1241422a0 <col:23> '<dependent type>' contains-errors lvalue
        |       |         `-RecoveryExpr 0x1241422c0 <line:24:5> '<dependent type>' contains-errors lvalue
        |       |-BreakStmt 0x124142370 <line:25:4>
        |       |-CaseStmt 0x1241423a8 <line:26:3, line:28:5>
        |       | |-ConstantExpr 0x124142390 <line:26:8> 'int'
        |       | | `-CharacterLiteral 0x124142378 <col:8> 'int' 116
        |       | `-CompoundAssignOperator 0x1241425a0 <line:27:4, line:28:5> 'int' contains-errors '|=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
        |       |   |-UnaryOperator 0x124142518 <line:27:4, col:5> 'int' lvalue prefix '*' cannot overflow
        |       |   | `-ImplicitCastExpr 0x124142500 <col:5> 'int *' <LValueToRValue>
        |       |   |   `-DeclRefExpr 0x1241423d0 <col:5> 'int *' lvalue ParmVar 0x124128258 'flags' 'int *'
        |       |   `-ConditionalOperator 0x124142570 <col:14, line:28:5> '<dependent type>' contains-errors
        |       |     |-DeclRefExpr 0x124142420 <line:27:14> 'int' lvalue Var 0x124128418 'set' 'int'
        |       |     |-RecoveryExpr 0x124142530 <col:20> '<dependent type>' contains-errors lvalue
        |       |     `-RecoveryExpr 0x124142550 <line:28:5> '<dependent type>' contains-errors lvalue
        |       |-BreakStmt 0x1241425d0 <line:29:4>
        |       |-CaseStmt 0x124142608 <line:30:3, line:32:5>
        |       | |-ConstantExpr 0x1241425f0 <line:30:8> 'int'
        |       | | `-CharacterLiteral 0x1241425d8 <col:8> 'int' 84
        |       | `-CompoundAssignOperator 0x124143800 <line:31:4, line:32:5> 'int' contains-errors '|=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
        |       |   |-UnaryOperator 0x124142778 <line:31:4, col:5> 'int' lvalue prefix '*' cannot overflow
        |       |   | `-ImplicitCastExpr 0x124142760 <col:5> 'int *' <LValueToRValue>
        |       |   |   `-DeclRefExpr 0x124142630 <col:5> 'int *' lvalue ParmVar 0x124128258 'flags' 'int *'
        |       |   `-ConditionalOperator 0x1241427d0 <col:14, line:32:5> '<dependent type>' contains-errors
        |       |     |-DeclRefExpr 0x124142680 <line:31:14> 'int' lvalue Var 0x124128418 'set' 'int'
        |       |     |-RecoveryExpr 0x124142790 <col:20> '<dependent type>' contains-errors lvalue
        |       |     `-RecoveryExpr 0x1241427b0 <line:32:5> '<dependent type>' contains-errors lvalue
        |       `-BreakStmt 0x124143830 <line:33:4>
        `-UnaryOperator 0x124143948 <line:36:3, col:12> 'const char *' postfix '++'
          `-ParenExpr 0x124143928 <col:3, col:11> 'const char *' lvalue
            `-UnaryOperator 0x124143910 <col:4, col:5> 'const char *' lvalue prefix '*' cannot overflow
              `-ImplicitCastExpr 0x1241438f8 <col:5> 'const char **' <LValueToRValue>
                `-DeclRefExpr 0x1241438d8 <col:5> 'const char **' lvalue ParmVar 0x124128108 'format' 'const char **'
