`-FunctionDecl 0x15b80dda8  line:1:1 PHP_FUNCTION 'int (int)'
  |-ParmVarDecl 0x15b80dcd8 <col:14> col:14 stream_set_chunk_size 'int'
  `-CompoundStmt 0x15c8099a8 <line:2:1, line:27:1>
    |-DeclStmt 0x15b80df20 <line:3:2, col:11>
    | `-VarDecl 0x15b80deb8 <col:2, col:8> col:8 used ret 'int'
    |-DeclStmt 0x15b80dfb8 <line:4:2, col:13>
    | `-VarDecl 0x15b80df50 <col:2, col:8> col:8 used csize 'long'
    |-IfStmt 0x15b80e300 <line:8:2, line:10:2>
    | |-RecoveryExpr 0x15b80e2d0 <line:8:6, col:83> '_Bool' contains-errors
    | `-CompoundStmt 0x15b80e2f0 <col:92, line:10:2>
    |-IfStmt 0x15c809300 <line:12:2, line:15:2>
    | |-BinaryOperator 0x15b80e390 <line:12:6, col:15> 'int' '<='
    | | |-ImplicitCastExpr 0x15b80e360 <col:6> 'long' <LValueToRValue>
    | | | `-DeclRefExpr 0x15b80e320 <col:6> 'long' lvalue Var 0x15b80df50 'csize' 'long'
    | | `-ImplicitCastExpr 0x15b80e378 <col:15> 'long' <IntegralCast>
    | |   `-IntegerLiteral 0x15b80e340 <col:15> 'int' 0
    | `-CompoundStmt 0x15c8092f0 <col:18, line:15:2>
    |-IfStmt 0x15c809400 <line:17:2, line:20:2>
    | |-BinaryOperator 0x15c809398 <line:17:6, col:14> 'int' contains-errors '>'
    | | |-DeclRefExpr 0x15c809320 <col:6> 'long' lvalue Var 0x15b80df50 'csize' 'long'
    | | `-RecoveryExpr 0x15c809378 <col:14> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x15c8093f0 <col:23, line:20:2>
    `-CallExpr 0x15c8095f0 <line:22:2, col:39> '<dependent type>' contains-errors
      |-DeclRefExpr 0x15c809500 <col:2> 'int ()' Function 0x15c809448 'php_stream_from_zval' 'int ()'
      |-RecoveryExpr 0x15c809598 <col:23> '<dependent type>' contains-errors lvalue
      `-UnaryOperator 0x15c8095d8 <col:31, col:32> '<dependent type>' contains-errors prefix '&' cannot overflow
        `-RecoveryExpr 0x15c8095b8 <col:32> '<dependent type>' contains-errors lvalue
