`-FunctionDecl 0x129128438  line:1:1 invalid create_version 'int (int *, int, int, int, int)'
  |-ParmVarDecl 0x129128128 <col:17, col:29> col:29 invalid domain 'int *'
  |-ParmVarDecl 0x1291281a8 <col:37, col:45> col:45 invalid major 'int'
  |-ParmVarDecl 0x129128228 <col:52, col:60> col:60 invalid minor 'int'
  |-ParmVarDecl 0x1291282a8 <col:67, col:75> col:75 invalid build 'int'
  |-ParmVarDecl 0x129128328 <col:82, col:90> col:90 invalid revision 'int'
  `-CompoundStmt 0x12a80daf8 <line:2:1, line:28:1>
    |-DeclStmt 0x1291285a0 <line:3:2, col:41>
    | `-VarDecl 0x129128520 <col:2, col:20> col:20 referenced invalid System_Version 'int *' static
    |-DeclStmt 0x129128650 <line:4:2, col:42>
    | `-VarDecl 0x1291285d0 <col:2, col:21> col:21 referenced invalid create_version 'int *' static
    |-IfStmt 0x12a80d210 <line:8:2, line:11:2>
    | |-UnaryOperator 0x1291286b8 <line:8:6, col:7> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x1291286a0 <col:7> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x129128680 <col:7> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x12a80d1f0 <col:23, line:11:2>
    |   |-BinaryOperator 0x12a80d088 <line:9:3, col:69> '<dependent type>' contains-errors '='
    |   | |-RecoveryExpr 0x1291286f0 <col:3> '<dependent type>' contains-errors lvalue
    |   | | `-DeclRefExpr 0x1291286d0 <col:3> 'int *' lvalue Var 0x129128520 'System_Version' 'int *'
    |   | `-CallExpr 0x12a80d058 <col:20, col:69> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x12a80ceb8 <col:20> 'int ()' Function 0x12a80ce00 'mono_class_from_name' 'int ()'
    |   |   |-CXXDependentScopeMemberExpr 0x12a80d010 <col:42, col:56> '<dependent type>' contains-errors lvalue .corlib
    |   |   | `-RecoveryExpr 0x12a80cff0 <col:42> '<dependent type>' contains-errors lvalue
    |   |   `-StringLiteral 0x12a80cf80 <col:64> 'char[4]' lvalue "STR"
    |   `-CallExpr 0x12a80d1c8 <line:10:3, col:27> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x12a80d188 <col:3> 'int ()' Function 0x12a80d0d0 'g_assert' 'int ()'
    |     `-RecoveryExpr 0x12a80d1a8 <col:13> '<dependent type>' contains-errors lvalue
    `-IfStmt 0x12a80d6e8 <line:13:2, line:18:2>
      |-UnaryOperator 0x12a80d268 <line:13:6, col:7> '<dependent type>' contains-errors prefix '!' cannot overflow
      | `-ImplicitCastExpr 0x12a80d250 <col:7> '<dependent type>' contains-errors <LValueToRValue>
      |   `-RecoveryExpr 0x12a80d230 <col:7> '<dependent type>' contains-errors lvalue
      `-CompoundStmt 0x12a80d6d0 <col:23, line:18:2>
        `-CallExpr 0x12a80d5a8 <line:16:3, col:27> '<dependent type>' contains-errors
          |-DeclRefExpr 0x12a80d568 <col:3> 'int ()' Function 0x12a80d0d0 'g_assert' 'int ()'
          `-RecoveryExpr 0x12a80d588 <col:13> '<dependent type>' contains-errors lvalue
