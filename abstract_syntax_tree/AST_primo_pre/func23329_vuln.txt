`-FunctionDecl 0x157128288  line:1:15 invalid jas_matrix_create 'int *(int, int)'
  |-ParmVarDecl 0x1571280f0 <col:33, col:37> col:37 used numrows 'int'
  |-ParmVarDecl 0x157128170 <col:46, col:50> col:50 used numcols 'int'
  `-CompoundStmt 0x157808da0 <line:2:1, line:64:1>
    |-DeclStmt 0x1571283d8 <line:4:2, col:7>
    | `-VarDecl 0x157128370 <col:2, col:6> col:6 used i 'int'
    |-UnaryExprOrTypeTraitExpr 0x157128448 <line:5:2, col:9> 'unsigned long' contains-errors sizeof
    | `-RecoveryExpr 0x157128428 <col:9> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x157128618 <line:9:2, line:11:2>
    | |-BinaryOperator 0x157128578 <line:9:6, col:31> 'int' '||'
    | | |-BinaryOperator 0x1571284e0 <col:6, col:16> 'int' '<'
    | | | |-ImplicitCastExpr 0x1571284c8 <col:6> 'int' <LValueToRValue>
    | | | | `-DeclRefExpr 0x157128488 <col:6> 'int' lvalue ParmVar 0x1571280f0 'numrows' 'int'
    | | | `-IntegerLiteral 0x1571284a8 <col:16> 'int' 0
    | | `-BinaryOperator 0x157128558 <col:21, col:31> 'int' '<'
    | |   |-ImplicitCastExpr 0x157128540 <col:21> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x157128500 <col:21> 'int' lvalue ParmVar 0x157128170 'numcols' 'int'
    | |   `-IntegerLiteral 0x157128520 <col:31> 'int' 0
    | `-CompoundStmt 0x157128600 <col:34, line:11:2>
    |   `-GotoStmt 0x1571285e8 <line:10:3, col:8> 'error' 0x157128598
    |-IfStmt 0x157808250 <line:13:2, line:15:2>
    | |-RecoveryExpr 0x157808200 <line:13:6, col:49> '_Bool' contains-errors
    | `-CompoundStmt 0x157808238 <col:52, line:15:2>
    |   `-GotoStmt 0x157808220 <line:14:3, col:8> 'error' 0x157128598
    |-IfStmt 0x1578085c8 <line:25:2, line:27:2>
    | |-UnaryOperator 0x157808580 <line:25:6, col:48> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-CallExpr 0x157808548 <col:7, col:48> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x157808430 <col:7> 'int ()' Function 0x157808378 'jas_safe_size_mul' 'int ()'
    | |   |-DeclRefExpr 0x157808450 <col:25> 'int' lvalue ParmVar 0x1571280f0 'numrows' 'int'
    | |   |-DeclRefExpr 0x157808470 <col:34> 'int' lvalue ParmVar 0x157128170 'numcols' 'int'
    | |   `-UnaryOperator 0x157808530 <col:43, col:44> '<dependent type>' contains-errors prefix '&' cannot overflow
    | |     `-RecoveryExpr 0x157808510 <col:44> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x1578085b0 <col:51, line:27:2>
    |   `-GotoStmt 0x157808598 <line:26:3, col:8> 'error' 0x157128598
    |-IfStmt 0x1578087c8 <line:30:2, line:35:2>
    | |-RecoveryExpr 0x157808620 <line:30:6, col:25> '_Bool' contains-errors
    | `-CompoundStmt 0x1578087b0 <col:28, line:35:2>
    |   `-IfStmt 0x157808790 <line:31:3, line:34:3>
    |     |-RecoveryExpr 0x157808740 <line:31:7, line:32:28> '_Bool' contains-errors
    |     `-CompoundStmt 0x157808778 <col:31, line:34:3>
    |       `-GotoStmt 0x157808760 <line:33:4, col:9> 'error' 0x157128598
    |-IfStmt 0x1578088d0 <line:37:2, line:42:2>
    | |-RecoveryExpr 0x157808808 <line:37:6, col:26> '_Bool' contains-errors
    | `-CompoundStmt 0x1578088b8 <col:29, line:42:2>
    |   `-IfStmt 0x157808898 <line:38:3, line:41:3>
    |     |-RecoveryExpr 0x157808848 <line:38:7, line:39:26> '_Bool' contains-errors
    |     `-CompoundStmt 0x157808880 <col:29, line:41:3>
    |       `-GotoStmt 0x157808868 <line:40:4, col:9> 'error' 0x157128598
    |-ForStmt 0x157808a68 <line:44:2, line:46:2>
    | |-BinaryOperator 0x157808930 <line:44:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x1578088f0 <col:7> 'int' lvalue Var 0x157128370 'i' 'int'
    | | `-IntegerLiteral 0x157808910 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x1578089c0 <col:14, col:18> 'int' '<'
    | | |-ImplicitCastExpr 0x157808990 <col:14> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x157808950 <col:14> 'int' lvalue Var 0x157128370 'i' 'int'
    | | `-ImplicitCastExpr 0x1578089a8 <col:18> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x157808970 <col:18> 'int' lvalue ParmVar 0x1571280f0 'numrows' 'int'
    | |-UnaryOperator 0x157808a00 <col:27, col:29> 'int' prefix '++'
    | | `-DeclRefExpr 0x1578089e0 <col:29> 'int' lvalue Var 0x157128370 'i' 'int'
    | `-CompoundStmt 0x157808a58 <col:32, line:46:2>
    |-LabelStmt 0x157808d38 <line:59:1, line:62:2> 'error'
    | `-IfStmt 0x157808d18 <line:60:2, line:62:2>
    |   |-RecoveryExpr 0x157808be8 <line:60:6> '_Bool' contains-errors
    |   `-CompoundStmt 0x157808d08 <col:14, line:62:2>
    `-ReturnStmt 0x157808d90 <line:63:2, col:9>
      `-ImplicitCastExpr 0x157808d78 <col:9> 'int *' <NullToPointer>
        `-IntegerLiteral 0x157808d58 <col:9> 'int' 0
