`-FunctionDecl 0x14800dee8  line:1:1 spa_bits_to_base64 'int (char *, const char *, int)'
  |-ParmVarDecl 0x14800dcf0 <col:21, col:29> col:29 used out 'char *'
  |-ParmVarDecl 0x14800dd70 <col:34, col:48> col:48 used in 'const char *'
  |-ParmVarDecl 0x14800ddf0 <col:52, col:56> col:56 used inlen 'int'
  `-CompoundStmt 0x148808880 <line:3:1, line:25:1>
    |-ForStmt 0x148026bf8 <line:4:3, line:11:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-BinaryOperator 0x14800e048 <line:4:10, col:19> 'int' '>='
    | | |-ImplicitCastExpr 0x14800e030 <col:10> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14800dff0 <col:10> 'int' lvalue ParmVar 0x14800ddf0 'inlen' 'int'
    | | `-IntegerLiteral 0x14800e010 <col:19> 'int' 3
    | |-CompoundAssignOperator 0x14800e0a8 <col:22, col:31> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
    | | |-DeclRefExpr 0x14800e068 <col:22> 'int' lvalue ParmVar 0x14800ddf0 'inlen' 'int'
    | | `-IntegerLiteral 0x14800e088 <col:31> 'int' 3
    | `-CompoundStmt 0x148026be0 <line:5:5, line:11:5>
    |   `-CompoundAssignOperator 0x148026bb0 <line:10:7, col:13> 'const char *' '+=' ComputeLHSTy='const char *' ComputeResultTy='const char *'
    |     |-DeclRefExpr 0x148026b70 <col:7> 'const char *' lvalue ParmVar 0x14800dd70 'in' 'const char *'
    |     `-IntegerLiteral 0x148026b90 <col:13> 'int' 3
    |-IfStmt 0x1480275b0 <line:12:3, line:23:5>
    | |-BinaryOperator 0x148026c88 <line:12:7, col:15> 'int' '>'
    | | |-ImplicitCastExpr 0x148026c70 <col:7> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x148026c30 <col:7> 'int' lvalue ParmVar 0x14800ddf0 'inlen' 'int'
    | | `-IntegerLiteral 0x148026c50 <col:15> 'int' 0
    | `-CompoundStmt 0x148027580 <line:13:5, line:23:5>
    |   |-DeclStmt 0x148026d20 <line:14:7, col:22>
    |   | `-VarDecl 0x148026cb8 <col:7, col:14> col:14 used fragment 'char'
    |   |-BinaryOperator 0x148027008 <line:17:7, col:33> 'char' '='
    |   | |-DeclRefExpr 0x148026e88 <col:7> 'char' lvalue Var 0x148026cb8 'fragment' 'char'
    |   | `-ImplicitCastExpr 0x148026ff0 <col:18, col:33> 'char' <IntegralCast>
    |   |   `-BinaryOperator 0x148026fd0 <col:18, col:33> 'int' '&'
    |   |     |-ParenExpr 0x148026f90 <col:18, col:29> 'int'
    |   |     | `-BinaryOperator 0x148026f70 <col:19, col:28> 'int' '<<'
    |   |     |   |-ImplicitCastExpr 0x148026f58 <col:19, col:23> 'int' <IntegralCast>
    |   |     |   | `-ImplicitCastExpr 0x148026f40 <col:19, col:23> 'char' <LValueToRValue>
    |   |     |   |   `-ArraySubscriptExpr 0x148026f00 <col:19, col:23> 'const char' lvalue
    |   |     |   |     |-ImplicitCastExpr 0x148026ee8 <col:19> 'const char *' <LValueToRValue>
    |   |     |   |     | `-DeclRefExpr 0x148026ea8 <col:19> 'const char *' lvalue ParmVar 0x14800dd70 'in' 'const char *'
    |   |     |   |     `-IntegerLiteral 0x148026ec8 <col:22> 'int' 0
    |   |     |   `-IntegerLiteral 0x148026f20 <col:28> 'int' 4
    |   |     `-IntegerLiteral 0x148026fb0 <col:33> 'int' 48
    |   |-IfStmt 0x1480271d8 <line:18:7, line:19:29>
    |   | |-BinaryOperator 0x148027080 <line:18:11, col:19> 'int' '>'
    |   | | |-ImplicitCastExpr 0x148027068 <col:11> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x148027028 <col:11> 'int' lvalue ParmVar 0x14800ddf0 'inlen' 'int'
    |   | | `-IntegerLiteral 0x148027048 <col:19> 'int' 1
    |   | `-CompoundAssignOperator 0x1480271a8 <line:19:8, col:29> 'char' '|=' ComputeLHSTy='int' ComputeResultTy='int'
    |   |   |-DeclRefExpr 0x1480270a0 <col:8> 'char' lvalue Var 0x148026cb8 'fragment' 'char'
    |   |   `-BinaryOperator 0x148027188 <col:20, col:29> 'int' '>>'
    |   |     |-ImplicitCastExpr 0x148027170 <col:20, col:24> 'int' <IntegralCast>
    |   |     | `-ImplicitCastExpr 0x148027158 <col:20, col:24> 'char' <LValueToRValue>
    |   |     |   `-ArraySubscriptExpr 0x148027118 <col:20, col:24> 'const char' lvalue
    |   |     |     |-ImplicitCastExpr 0x148027100 <col:20> 'const char *' <LValueToRValue>
    |   |     |     | `-DeclRefExpr 0x1480270c0 <col:20> 'const char *' lvalue ParmVar 0x14800dd70 'in' 'const char *'
    |   |     |     `-IntegerLiteral 0x1480270e0 <col:23> 'int' 1
    |   |     `-IntegerLiteral 0x148027138 <col:29> 'int' 4
    |   `-BinaryOperator 0x148027560 <line:22:7, col:16> 'char' '='
    |     |-UnaryOperator 0x148027518 <col:7, col:11> 'char' lvalue prefix '*' cannot overflow
    |     | `-UnaryOperator 0x148027500 <col:8, col:11> 'char *' postfix '++'
    |     |   `-DeclRefExpr 0x1480274e0 <col:8> 'char *' lvalue ParmVar 0x14800dcf0 'out' 'char *'
    |     `-ImplicitCastExpr 0x148027548 <col:16> 'char' <IntegralCast>
    |       `-CharacterLiteral 0x148027530 <col:16> 'int' 61
    `-BinaryOperator 0x148808860 <line:24:3, col:10> 'char' '='
      |-UnaryOperator 0x148808818 <col:3, col:4> 'char' lvalue prefix '*' cannot overflow
      | `-ImplicitCastExpr 0x148808800 <col:4> 'char *' <LValueToRValue>
      |   `-DeclRefExpr 0x1480275d0 <col:4> 'char *' lvalue ParmVar 0x14800dcf0 'out' 'char *'
      `-ImplicitCastExpr 0x148808848 <col:10> 'char' <IntegralCast>
        `-CharacterLiteral 0x148808830 <col:10> 'int' 0
