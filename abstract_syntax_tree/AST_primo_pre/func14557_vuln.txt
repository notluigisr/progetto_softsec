`-FunctionDecl 0x15a9284a8  line:1:1 invalid spell_read_tree 'int (int *, char **, int **, int, int)'
  |-ParmVarDecl 0x15a928128 <line:2:5, col:11> col:11 invalid fd 'int *'
  |-ParmVarDecl 0x15a9281d8 <line:3:5, col:14> col:14 used bytsp 'char **'
  |-ParmVarDecl 0x15a928290 <line:4:5, col:13> col:13 referenced invalid idxsp 'int **'
  |-ParmVarDecl 0x15a928310 <line:5:5, col:10> col:10 used prefixtree 'int'
  |-ParmVarDecl 0x15a928390 <line:6:5, col:10> col:10 used prefixcnt 'int'
  `-CompoundStmt 0x15b808ce0 <line:7:1, line:37:1>
    |-DeclStmt 0x15a9285f8 <line:8:5, col:13>
    | `-VarDecl 0x15a928590 <col:5, col:10> col:10 used len 'int'
    |-DeclStmt 0x15a928690 <line:9:5, col:13>
    | `-VarDecl 0x15a928628 <col:5, col:10> col:10 used idx 'int'
    |-DeclStmt 0x15a928728 <line:10:5, col:15>
    | `-VarDecl 0x15a9286c0 <col:5, col:13> col:13 used bp 'char *'
    |-BinaryOperator 0x15b808348 <line:14:5, col:19> 'int' contains-errors '='
    | |-DeclRefExpr 0x15a928758 <col:5> 'int' lvalue Var 0x15a928590 'len' 'int'
    | `-CallExpr 0x15b808320 <col:11, col:19> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x15b8082e0 <col:11> 'int ()' Function 0x15b808228 'get4c' 'int ()'
    |   `-RecoveryExpr 0x15b808300 <col:17> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x15b808428 <line:15:5, line:16:9>
    | |-BinaryOperator 0x15b8083c0 <line:15:9, col:15> 'int' '<'
    | | |-ImplicitCastExpr 0x15b8083a8 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x15b808368 <col:9> 'int' lvalue Var 0x15a928590 'len' 'int'
    | | `-IntegerLiteral 0x15b808388 <col:15> 'int' 0
    | `-ReturnStmt 0x15b808418 <line:16:2, col:9>
    |   `-RecoveryExpr 0x15b8083f8 <col:9> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x15b808c90 <line:17:5, line:35:5>
    | |-BinaryOperator 0x15b8084a0 <line:17:9, col:15> 'int' '>'
    | | |-ImplicitCastExpr 0x15b808488 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x15b808448 <col:9> 'int' lvalue Var 0x15a928590 'len' 'int'
    | | `-IntegerLiteral 0x15b808468 <col:15> 'int' 0
    | `-CompoundStmt 0x15b808c60 <line:18:5, line:35:5>
    |   |-IfStmt 0x15b808738 <line:21:2, line:22:13>
    |   | |-BinaryOperator 0x15b8086d0 <line:21:6, col:12> 'int' contains-errors '=='
    |   | | |-DeclRefExpr 0x15b808658 <col:6> 'char *' lvalue Var 0x15a9286c0 'bp' 'char *'
    |   | | `-RecoveryExpr 0x15b8086b0 <col:12> '<dependent type>' contains-errors lvalue
    |   | `-ReturnStmt 0x15b808728 <line:22:6, col:13>
    |   |   `-RecoveryExpr 0x15b808708 <col:13> '<dependent type>' contains-errors lvalue
    |   |-BinaryOperator 0x15b8087e0 <line:23:2, col:11> 'char *' '='
    |   | |-UnaryOperator 0x15b808790 <col:2, col:3> 'char *' lvalue prefix '*' cannot overflow
    |   | | `-ImplicitCastExpr 0x15b808778 <col:3> 'char **' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x15b808758 <col:3> 'char **' lvalue ParmVar 0x15a9281d8 'bytsp' 'char **'
    |   | `-ImplicitCastExpr 0x15b8087c8 <col:11> 'char *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x15b8087a8 <col:11> 'char *' lvalue Var 0x15a9286c0 'bp' 'char *'
    |   |-IfStmt 0x15b808930 <line:27:2, line:28:13>
    |   | |-BinaryOperator 0x15b8088c8 <line:27:6, col:12> 'int' contains-errors '=='
    |   | | |-RecoveryExpr 0x15b808888 <col:6> '<dependent type>' contains-errors lvalue
    |   | | `-RecoveryExpr 0x15b8088a8 <col:12> '<dependent type>' contains-errors lvalue
    |   | `-ReturnStmt 0x15b808920 <line:28:6, col:13>
    |   |   `-RecoveryExpr 0x15b808900 <col:13> '<dependent type>' contains-errors lvalue
    |   `-IfStmt 0x15b808c40 <line:33:2, line:34:13>
    |     |-BinaryOperator 0x15b808bd8 <line:33:6, col:12> 'int' '<'
    |     | |-ImplicitCastExpr 0x15b808bc0 <col:6> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x15b808b80 <col:6> 'int' lvalue Var 0x15a928628 'idx' 'int'
    |     | `-IntegerLiteral 0x15b808ba0 <col:12> 'int' 0
    |     `-ReturnStmt 0x15b808c30 <line:34:6, col:13>
    |       `-ImplicitCastExpr 0x15b808c18 <col:13> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x15b808bf8 <col:13> 'int' lvalue Var 0x15a928628 'idx' 'int'
    `-ReturnStmt 0x15b808cd0 <line:36:5, col:12>
      `-IntegerLiteral 0x15b808cb0 <col:12> 'int' 0
