`-FunctionDecl 0x1349093e8  line:1:1 invalid rb_fiddle_handle_initialize 'int (int, int *, int)'
  |-ParmVarDecl 0x1349090d8 <col:29, col:33> col:33 used argc 'int'
  |-ParmVarDecl 0x134909220 <col:39, col:50> col:45 invalid argv 'int *'
  |-ParmVarDecl 0x1349092a0 <col:53, col:59> col:59 invalid self 'int'
  `-CompoundStmt 0x134925ce8 <line:2:1, line:72:1>
    |-DeclStmt 0x134909528 <line:3:5, col:14>
    | `-VarDecl 0x1349094c0 <col:5, col:11> col:11 used ptr 'void *'
    |-DeclStmt 0x134909728 <line:4:5, col:36>
    | |-RecordDecl 0x134909540 <col:5, col:12> col:12 struct dl_handle
    | `-VarDecl 0x1349096a8 <col:5, col:23> col:23 used fiddle_handle 'struct dl_handle *'
    |-DeclStmt 0x1349097c0 <line:6:5, col:16>
    | `-VarDecl 0x134909758 <col:5, col:12> col:12 used clib 'char *'
    |-DeclStmt 0x134922868 <line:7:5, col:16>
    | `-VarDecl 0x134922800 <col:5, col:11> col:11 used cflag 'int'
    |-DeclStmt 0x134922900 <line:8:5, col:20>
    | `-VarDecl 0x134922898 <col:5, col:17> col:17 used err 'const char *'
    |-SwitchStmt 0x134922cc8 <line:10:5, line:25:5>
    | |-CallExpr 0x134922c80 <line:10:13, col:56> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x134922a70 <col:13> 'int ()' Function 0x1349229b8 'rb_scan_args' 'int ()'
    | | |-DeclRefExpr 0x134922a90 <col:26> 'int' lvalue ParmVar 0x1349090d8 'argc' 'int'
    | | |-RecoveryExpr 0x134922ab0 <col:32> '<dependent type>' contains-errors lvalue
    | | |-StringLiteral 0x134922b10 <col:38> 'char[4]' lvalue "STR"
    | | |-UnaryOperator 0x134922c30 <col:45, col:46> 'char **' prefix '&' cannot overflow
    | | | `-DeclRefExpr 0x134922bd8 <col:46> 'char *' lvalue Var 0x134909758 'clib' 'char *'
    | | `-UnaryOperator 0x134922c68 <col:51, col:52> 'int *' prefix '&' cannot overflow
    | |   `-DeclRefExpr 0x134922c48 <col:52> 'int' lvalue Var 0x134922800 'cflag' 'int'
    | `-CompoundStmt 0x134924ce0 <col:59, line:25:5>
    |   |-CaseStmt 0x134922d10 <line:11:7, line:12:9>
    |   | |-IntegerLiteral 0x134922cf0 <line:11:12> 'int' 0
    |   | `-BinaryOperator 0x134922db0 <line:12:2, col:9> 'char *' contains-errors '='
    |   |   |-DeclRefExpr 0x134922d38 <col:2> 'char *' lvalue Var 0x134909758 'clib' 'char *'
    |   |   `-RecoveryExpr 0x134922d90 <col:9> '<dependent type>' contains-errors lvalue
    |   |-BinaryOperator 0x134922ec0 <line:13:2, col:22> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x134922dd0 <col:2> 'int' lvalue Var 0x134922800 'cflag' 'int'
    |   | `-BinaryOperator 0x134922ea0 <col:10, col:22> '<dependent type>' contains-errors '|'
    |   |   |-RecoveryExpr 0x134922e60 <col:10> '<dependent type>' contains-errors lvalue
    |   |   `-RecoveryExpr 0x134922e80 <col:22> '<dependent type>' contains-errors lvalue
    |   |-BreakStmt 0x134922ee0 <line:14:2>
    |   |-CaseStmt 0x134922f08 <line:15:7, line:16:47>
    |   | |-IntegerLiteral 0x134922ee8 <line:15:12> 'int' 1
    |   | `-BinaryOperator 0x1349233c8 <line:16:2, col:47> 'char *' contains-errors '='
    |   |   |-DeclRefExpr 0x134922f30 <col:2> 'char *' lvalue Var 0x134909758 'clib' 'char *'
    |   |   `-ConditionalOperator 0x134923398 <col:9, col:47> '<dependent type>' contains-errors
    |   |     |-CallExpr 0x134923308 <col:9, col:18> '<dependent type>' contains-errors
    |   |     | |-DeclRefExpr 0x134923030 <col:9> 'int ()' Function 0x134922f78 'NIL_P' 'int ()'
    |   |     | `-RecoveryExpr 0x1349232e8 <col:15> '<dependent type>' contains-errors lvalue
    |   |     |-RecoveryExpr 0x134923330 <col:22> '<dependent type>' contains-errors lvalue
    |   |     `-CallExpr 0x134923370 <col:29, col:47> '<dependent type>' contains-errors
    |   |       |-DeclRefExpr 0x134923188 <col:29> 'int ()' Function 0x1349230d0 'StringValuePtr' 'int ()'
    |   |       `-RecoveryExpr 0x134923350 <col:44> '<dependent type>' contains-errors lvalue
    |   |-BinaryOperator 0x1349234d8 <line:17:2, col:22> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x1349233e8 <col:2> 'int' lvalue Var 0x134922800 'cflag' 'int'
    |   | `-BinaryOperator 0x1349234b8 <col:10, col:22> '<dependent type>' contains-errors '|'
    |   |   |-RecoveryExpr 0x134923478 <col:10> '<dependent type>' contains-errors lvalue
    |   |   `-RecoveryExpr 0x134923498 <col:22> '<dependent type>' contains-errors lvalue
    |   |-BreakStmt 0x1349234f8 <line:18:2>
    |   |-CaseStmt 0x134923520 <line:19:7, line:20:47>
    |   | |-IntegerLiteral 0x134923500 <line:19:12> 'int' 2
    |   | `-BinaryOperator 0x134924a00 <line:20:2, col:47> 'char *' contains-errors '='
    |   |   |-DeclRefExpr 0x134923548 <col:2> 'char *' lvalue Var 0x134909758 'clib' 'char *'
    |   |   `-ConditionalOperator 0x1349237b8 <col:9, col:47> '<dependent type>' contains-errors
    |   |     |-CallExpr 0x134923728 <col:9, col:18> '<dependent type>' contains-errors
    |   |     | |-DeclRefExpr 0x134923568 <col:9> 'int ()' Function 0x134922f78 'NIL_P' 'int ()'
    |   |     | `-RecoveryExpr 0x134923708 <col:15> '<dependent type>' contains-errors lvalue
    |   |     |-RecoveryExpr 0x134923750 <col:22> '<dependent type>' contains-errors lvalue
    |   |     `-CallExpr 0x134923790 <col:29, col:47> '<dependent type>' contains-errors
    |   |       |-DeclRefExpr 0x1349235e0 <col:29> 'int ()' Function 0x1349230d0 'StringValuePtr' 'int ()'
    |   |       `-RecoveryExpr 0x134923770 <col:44> '<dependent type>' contains-errors lvalue
    |   |-BreakStmt 0x134924b40 <line:22:2>
    |   `-DefaultStmt 0x134924cc0 <line:23:7, line:24:14>
    |     `-CallExpr 0x134924c80 <col:2, col:14> 'int'
    |       |-ImplicitCastExpr 0x134924c68 <col:2> 'int (*)()' <FunctionToPointerDecay>
    |       | `-DeclRefExpr 0x134924c28 <col:2> 'int ()' Function 0x134924b70 'rb_bug' 'int ()'
    |       `-ImplicitCastExpr 0x134924ca8 <col:9> 'char *' <ArrayToPointerDecay>
    |         `-StringLiteral 0x134924c48 <col:9> 'char[4]' lvalue "STR"
    |-CallExpr 0x134924e70 <line:27:5, col:16> 'int'
    | |-ImplicitCastExpr 0x134924e58 <col:5> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x134924e18 <col:5> 'int ()' Function 0x134924d60 'rb_secure' 'int ()'
    | `-IntegerLiteral 0x134924e38 <col:15> 'int' 2
    |-BinaryOperator 0x134925088 <line:48:2, col:26> 'void *' '='
    | |-DeclRefExpr 0x134924e98 <col:2> 'void *' lvalue Var 0x1349094c0 'ptr' 'void *'
    | `-ImplicitCastExpr 0x134925070 <col:8, col:26> 'void *' <IntegralToPointer>
    |   `-CallExpr 0x134925010 <col:8, col:26> 'int'
    |     |-ImplicitCastExpr 0x134924ff8 <col:8> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x134924f98 <col:8> 'int ()' Function 0x134924ee0 'dlopen' 'int ()'
    |     |-ImplicitCastExpr 0x134925040 <col:15> 'char *' <LValueToRValue>
    |     | `-DeclRefExpr 0x134924fb8 <col:15> 'char *' lvalue Var 0x134909758 'clib' 'char *'
    |     `-ImplicitCastExpr 0x134925058 <col:21> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x134924fd8 <col:21> 'int' lvalue Var 0x134922800 'cflag' 'int'
    |-IfStmt 0x1349253e0 <line:54:5, line:57:5>
    | |-UnaryOperator 0x1349250e0 <line:54:9, col:10> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x1349250c8 <col:10> 'void *' <LValueToRValue>
    | |   `-DeclRefExpr 0x1349250a8 <col:10> 'void *' lvalue Var 0x1349094c0 'ptr' 'void *'
    | `-CompoundStmt 0x1349253c8 <col:15, line:57:5>
    |   `-BinaryOperator 0x134925268 <line:55:2, col:16> 'const char *' '='
    |     |-DeclRefExpr 0x1349250f8 <col:2> 'const char *' lvalue Var 0x134922898 'err' 'const char *'
    |     `-ImplicitCastExpr 0x134925250 <col:8, col:16> 'const char *' <IntegralToPointer>
    |       `-CallExpr 0x134925230 <col:8, col:16> 'int'
    |         `-ImplicitCastExpr 0x134925218 <col:8> 'int (*)()' <FunctionToPointerDecay>
    |           `-DeclRefExpr 0x1349251f8 <col:8> 'int ()' Function 0x134925140 'dlerror' 'int ()'
    |-IfStmt 0x134925840 <line:60:5, line:62:5>
    | |-BinaryOperator 0x134925680 <line:60:9, col:69> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x134925600 <col:9, col:46> 'int' contains-errors '&&'
    | | | |-RecoveryExpr 0x134925578 <col:9, col:24> '<dependent type>' contains-errors lvalue
    | | | | `-DeclRefExpr 0x134925540 <col:9> 'struct dl_handle *' lvalue Var 0x1349096a8 'fiddle_handle' 'struct dl_handle *'
    | | | `-RecoveryExpr 0x1349255d8 <col:31, col:46> '<dependent type>' contains-errors lvalue
    | | |   `-DeclRefExpr 0x1349255a0 <col:31> 'struct dl_handle *' lvalue Var 0x1349096a8 'fiddle_handle' 'struct dl_handle *'
    | | `-RecoveryExpr 0x134925658 <col:54, col:69> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x134925620 <col:54> 'struct dl_handle *' lvalue Var 0x1349096a8 'fiddle_handle' 'struct dl_handle *'
    | `-CompoundStmt 0x134925828 <col:83, line:62:5>
    |   `-CallExpr 0x134925800 <line:61:2, col:28> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x134925780 <col:2> 'int ()' Function 0x1349256c8 'dlclose' 'int ()'
    |     `-RecoveryExpr 0x1349257d8 <col:10, col:25> '<dependent type>' contains-errors lvalue
    |       `-DeclRefExpr 0x1349257a0 <col:10> 'struct dl_handle *' lvalue Var 0x1349096a8 'fiddle_handle' 'struct dl_handle *'
    |-BinaryOperator 0x1349258e0 <line:63:5, col:26> '<dependent type>' contains-errors '='
    | |-RecoveryExpr 0x134925898 <col:5, col:20> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x134925860 <col:5> 'struct dl_handle *' lvalue Var 0x1349096a8 'fiddle_handle' 'struct dl_handle *'
    | `-DeclRefExpr 0x1349258c0 <col:26> 'void *' lvalue Var 0x1349094c0 'ptr' 'void *'
    |-BinaryOperator 0x134925980 <line:64:5, col:27> '<dependent type>' contains-errors '='
    | |-RecoveryExpr 0x134925938 <col:5, col:20> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x134925900 <col:5> 'struct dl_handle *' lvalue Var 0x1349096a8 'fiddle_handle' 'struct dl_handle *'
    | `-IntegerLiteral 0x134925960 <col:27> 'int' 1
    |-BinaryOperator 0x134925a20 <line:65:5, col:35> '<dependent type>' contains-errors '='
    | |-RecoveryExpr 0x1349259d8 <col:5, col:20> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x1349259a0 <col:5> 'struct dl_handle *' lvalue Var 0x1349096a8 'fiddle_handle' 'struct dl_handle *'
    | `-IntegerLiteral 0x134925a00 <col:35> 'int' 0
    `-IfStmt 0x134925cc8 <line:67:5, line:69:5>
      |-CallExpr 0x134925b58 <line:67:9, col:26> 'int'
      | `-ImplicitCastExpr 0x134925b40 <col:9> 'int (*)()' <FunctionToPointerDecay>
      |   `-DeclRefExpr 0x134925b20 <col:9> 'int ()' Function 0x134925a68 'rb_block_given_p' 'int ()'
      `-CompoundStmt 0x134925cb8 <col:29, line:69:5>
