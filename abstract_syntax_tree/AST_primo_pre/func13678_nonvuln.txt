`-FunctionDecl 0x13100df08  line:1:1 invalid snmpTreeEntry 'int (int, int, int *)'
  |-ParmVarDecl 0x13100dce8 <col:15, col:19> col:19 used entry 'int'
  |-ParmVarDecl 0x13100dd68 <col:26, col:32> col:32 invalid len 'int'
  |-ParmVarDecl 0x13100de18 <col:37, col:54> col:54 invalid current 'int *'
  `-CompoundStmt 0x131028578 <line:2:1, line:15:1>
    |-DeclStmt 0x13100e098 <line:4:5, col:18>
    | `-VarDecl 0x13100e010 <col:5, col:17> col:9 used count 'int' cinit
    |   `-IntegerLiteral 0x13100e078 <col:17> 'int' 0
    `-WhileStmt 0x131028540 <line:6:5, line:12:5>
      |-RecoveryExpr 0x13100e1e0 <line:6:12, col:60> '_Bool' contains-errors
      `-CompoundStmt 0x131028520 <col:63, line:12:5>
        |-IfStmt 0x1310284c8 <line:7:9, line:9:9>
        | |-BinaryOperator 0x13100e3b0 <line:7:13, col:50> 'int' contains-errors '=='
        | | |-ArraySubscriptExpr 0x13100e370 <col:13, col:45> '<dependent type>' contains-errors lvalue
        | | | |-ImplicitCastExpr 0x13100e340 <col:13, col:37> '<dependent type>' contains-errors <LValueToRValue>
        | | | | `-CXXDependentScopeMemberExpr 0x13100e2d8 <col:13, col:37> '<dependent type>' contains-errors lvalue ->name
        | | | |   `-ArraySubscriptExpr 0x13100e2b8 <col:13, col:34> '<dependent type>' contains-errors lvalue
        | | | |     |-ImplicitCastExpr 0x13100e288 <col:13, col:22> '<dependent type>' contains-errors <LValueToRValue>
        | | | |     | `-CXXDependentScopeMemberExpr 0x13100e220 <col:13, col:22> '<dependent type>' contains-errors lvalue ->leaves
        | | | |     |   `-RecoveryExpr 0x13100e200 <col:13> '<dependent type>' contains-errors lvalue
        | | | |     `-ImplicitCastExpr 0x13100e2a0 <col:29> 'int' <LValueToRValue>
        | | | |       `-DeclRefExpr 0x13100e268 <col:29> 'int' lvalue Var 0x13100e010 'count' 'int'
        | | | `-ImplicitCastExpr 0x13100e358 <col:42> '<dependent type>' contains-errors <LValueToRValue>
        | | |   `-RecoveryExpr 0x13100e320 <col:42> '<dependent type>' contains-errors lvalue
        | | `-DeclRefExpr 0x13100e390 <col:50> 'int' lvalue ParmVar 0x13100dce8 'entry' 'int'
        | `-CompoundStmt 0x1310284b8 <col:57, line:9:9>
        `-UnaryOperator 0x131028508 <line:11:9, col:11> 'int' prefix '++'
          `-DeclRefExpr 0x1310284e8 <col:11> 'int' lvalue Var 0x13100e010 'count' 'int'
