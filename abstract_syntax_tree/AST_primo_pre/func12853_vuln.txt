`-FunctionDecl 0x151814d18  line:1:11 invalid r_socket_read_block 'int (int *, int *, int)'
  |-ParmVarDecl 0x151814b28 <col:31, col:40> col:40 invalid s 'int *'
  |-ParmVarDecl 0x151814ba8 <col:43, col:48> col:48 invalid buf 'int *'
  |-ParmVarDecl 0x151814c28 <col:53, col:57> col:57 used len 'int'
  `-CompoundStmt 0x15182dde0 <col:62, line:14:1>
    |-DeclStmt 0x151814e78 <line:2:2, col:13>
    | `-VarDecl 0x151814df0 <col:2, col:12> col:6 used ret 'int' cinit
    |   `-IntegerLiteral 0x151814e58 <col:12> 'int' 0
    |-ForStmt 0x15182dd60 <line:3:2, line:12:2>
    | |-BinaryOperator 0x151814ed0 <line:3:7, col:13> 'int' '='
    | | |-DeclRefExpr 0x151814e90 <col:7> 'int' lvalue Var 0x151814df0 'ret' 'int'
    | | `-IntegerLiteral 0x151814eb0 <col:13> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x151814f60 <col:16, col:22> 'int' '<'
    | | |-ImplicitCastExpr 0x151814f30 <col:16> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x151814ef0 <col:16> 'int' lvalue Var 0x151814df0 'ret' 'int'
    | | `-ImplicitCastExpr 0x151814f48 <col:22> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x151814f10 <col:22> 'int' lvalue ParmVar 0x151814c28 'len' 'int'
    | |-<<<NULL>>>
    | `-CompoundStmt 0x15182dd30 <col:29, line:12:2>
    |   |-DeclStmt 0x15182dac8 <line:4:3, col:50>
    |   | `-VarDecl 0x151814f98 <col:3, col:49> col:7 used r 'int' cinit
    |   |   `-CallExpr 0x15182da90 <col:11, col:49> '<dependent type>' contains-errors
    |   |     |-DeclRefExpr 0x151815160 <col:11> 'int ()' Function 0x1518150a8 'r_socket_read' 'int ()'
    |   |     |-RecoveryExpr 0x151815180 <col:26> '<dependent type>' contains-errors lvalue
    |   |     |-BinaryOperator 0x1518151e0 <col:29, col:35> '<dependent type>' contains-errors '+'
    |   |     | |-RecoveryExpr 0x1518151a0 <col:29> '<dependent type>' contains-errors lvalue
    |   |     | `-DeclRefExpr 0x1518151c0 <col:35> 'int' lvalue Var 0x151814df0 'ret' 'int'
    |   |     `-BinaryOperator 0x15182da70 <col:40, col:46> 'int' '-'
    |   |       |-ImplicitCastExpr 0x15182da40 <col:40> 'int' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x15182da00 <col:40> 'int' lvalue ParmVar 0x151814c28 'len' 'int'
    |   |       `-ImplicitCastExpr 0x15182da58 <col:46> 'int' <LValueToRValue>
    |   |         `-DeclRefExpr 0x15182da20 <col:46> 'int' lvalue Var 0x151814df0 'ret' 'int'
    |   |-IfStmt 0x15182dbd0 <line:5:3, line:7:3>
    |   | |-BinaryOperator 0x15182db50 <line:5:7, col:13> 'int' contains-errors '=='
    |   | | |-ImplicitCastExpr 0x15182db38 <col:7> 'int' contains-errors <LValueToRValue>
    |   | | | `-DeclRefExpr 0x15182dae0 <col:7> 'int' contains-errors lvalue Var 0x151814f98 'r' 'int'
    |   | | `-UnaryOperator 0x15182db20 <col:12, col:13> 'int' prefix '-'
    |   | |   `-IntegerLiteral 0x15182db00 <col:13> 'int' 1
    |   | `-CompoundStmt 0x15182dbb8 <col:16, line:7:3>
    |   |   `-ReturnStmt 0x15182dba8 <line:6:4, col:12>
    |   |     `-UnaryOperator 0x15182db90 <col:11, col:12> 'int' prefix '-'
    |   |       `-IntegerLiteral 0x15182db70 <col:12> 'int' 1
    |   |-IfStmt 0x15182dc88 <line:8:3, line:10:3>
    |   | |-BinaryOperator 0x15182dc48 <line:8:7, col:11> 'int' contains-errors '<'
    |   | | |-ImplicitCastExpr 0x15182dc30 <col:7> 'int' contains-errors <LValueToRValue>
    |   | | | `-DeclRefExpr 0x15182dbf0 <col:7> 'int' contains-errors lvalue Var 0x151814f98 'r' 'int'
    |   | | `-IntegerLiteral 0x15182dc10 <col:11> 'int' 1
    |   | `-CompoundStmt 0x15182dc70 <col:14, line:10:3>
    |   |   `-BreakStmt 0x15182dc68 <line:9:4>
    |   `-CompoundAssignOperator 0x15182dd00 <line:11:3, col:10> 'int' contains-errors '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |     |-DeclRefExpr 0x15182dca8 <col:3> 'int' lvalue Var 0x151814df0 'ret' 'int'
    |     `-ImplicitCastExpr 0x15182dce8 <col:10> 'int' contains-errors <LValueToRValue>
    |       `-DeclRefExpr 0x15182dcc8 <col:10> 'int' contains-errors lvalue Var 0x151814f98 'r' 'int'
    `-ReturnStmt 0x15182ddd0 <line:13:2, col:9>
      `-ImplicitCastExpr 0x15182ddb8 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x15182dd98 <col:9> 'int' lvalue Var 0x151814df0 'ret' 'int'
