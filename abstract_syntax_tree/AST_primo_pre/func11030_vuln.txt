`-FunctionDecl 0x12e128a08  line:1:6 invalid ParseVP9SuperFrameIndex 'int (const int)'
  |-ParmVarDecl 0x12e1288f0 <col:30, <invalid sloc>> col:39 invalid 'const int'
  `-CompoundStmt 0x12e809c90 <line:2:78, line:54:1>
    `-IfStmt 0x12e809c70 <line:12:3, line:52:3>
      |-RecoveryExpr 0x12e128d98 <line:12:7, col:45> '_Bool' contains-errors
      `-CompoundStmt 0x12e809c40 <col:64, line:52:3>
        |-DeclStmt 0x12e128e58 <line:14:5, col:58>
        | `-VarDecl 0x12e128dd0 <col:5, col:15> col:15 used num_frames 'const int'
        |-DeclStmt 0x12e128f30 <line:15:5, col:77>
        | `-VarDecl 0x12e128e88 <col:5, col:15> col:15 used length_field_size 'const int'
        |-IfStmt 0x12e128f78 <line:18:5, line:21:5>
        | |-RecoveryExpr 0x12e128f48 <line:18:9, col:24> '_Bool' contains-errors
        | `-CompoundStmt 0x12e128f68 <col:38, line:21:5>
        `-IfStmt 0x12e809c10 <line:26:5, line:51:5> has_else
          |-RecoveryExpr 0x12e128f98 <line:26:9, line:27:47> '_Bool' contains-errors
          |-CompoundStmt 0x12e809be0 <col:55, line:49:5>
          | |-ForStmt 0x12e809b58 <line:32:7, line:41:7>
          | | |-DeclStmt 0x12e809688 <line:32:12, col:21>
          | | | `-VarDecl 0x12e809600 <col:12, col:20> col:16 used i 'int' cinit
          | | |   `-IntegerLiteral 0x12e809668 <col:20> 'int' 0
          | | |-<<<NULL>>>
          | | |-BinaryOperator 0x12e809710 <col:23, col:27> 'int' '<'
          | | | |-ImplicitCastExpr 0x12e8096e0 <col:23> 'int' <LValueToRValue>
          | | | | `-DeclRefExpr 0x12e8096a0 <col:23> 'int' lvalue Var 0x12e809600 'i' 'int'
          | | | `-ImplicitCastExpr 0x12e8096f8 <col:27> 'int' <LValueToRValue>
          | | |   `-DeclRefExpr 0x12e8096c0 <col:27> 'const int' lvalue Var 0x12e128dd0 'num_frames' 'const int'
          | | |-UnaryOperator 0x12e809750 <col:39, col:41> 'int' prefix '++'
          | | | `-DeclRefExpr 0x12e809730 <col:41> 'int' lvalue Var 0x12e809600 'i' 'int'
          | | `-CompoundStmt 0x12e809b40 <col:44, line:41:7>
          | |   `-ForStmt 0x12e809990 <line:35:9, line:37:9>
          | |     |-DeclStmt 0x12e809808 <line:35:14, col:23>
          | |     | `-VarDecl 0x12e809780 <col:14, col:22> col:18 used j 'int' cinit
          | |     |   `-IntegerLiteral 0x12e8097e8 <col:22> 'int' 0
          | |     |-<<<NULL>>>
          | |     |-BinaryOperator 0x12e809890 <col:25, col:29> 'int' '<'
          | |     | |-ImplicitCastExpr 0x12e809860 <col:25> 'int' <LValueToRValue>
          | |     | | `-DeclRefExpr 0x12e809820 <col:25> 'int' lvalue Var 0x12e809780 'j' 'int'
          | |     | `-ImplicitCastExpr 0x12e809878 <col:29> 'int' <LValueToRValue>
          | |     |   `-DeclRefExpr 0x12e809840 <col:29> 'const int' lvalue Var 0x12e128e88 'length_field_size' 'const int'
          | |     |-UnaryOperator 0x12e8098d0 <col:48, col:50> 'int' prefix '++'
          | |     | `-DeclRefExpr 0x12e8098b0 <col:50> 'int' lvalue Var 0x12e809780 'j' 'int'
          | |     `-CompoundStmt 0x12e809980 <col:53, line:37:9>
          | `-IfStmt 0x12e809bc0 <line:43:7, line:46:7>
          |   |-RecoveryExpr 0x12e809b90 <line:43:11, col:53> '_Bool' contains-errors
          |   `-CompoundStmt 0x12e809bb0 <col:65, line:46:7>
          `-CompoundStmt 0x12e809c00 <line:49:12, line:51:5>
