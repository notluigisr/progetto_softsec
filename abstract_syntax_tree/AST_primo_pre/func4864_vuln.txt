`-FunctionDecl 0x137928288  line:1:12 invalid mif_hdr_growcmpts 'int (int *, int)' static
  |-ParmVarDecl 0x137928128 <col:30, col:41> col:41 referenced invalid hdr 'int *'
  |-ParmVarDecl 0x1379281a8 <col:46, col:50> col:50 used maxcmpts 'int'
  `-CompoundStmt 0x1379420e8 <line:2:1, line:17:1>
    |-DeclStmt 0x1379283c0 <line:3:2, col:12>
    | `-VarDecl 0x137928358 <col:2, col:6> col:6 used cmptno 'int'
    |-CallExpr 0x137928678 <line:5:2, col:34> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x1379285b0 <col:2> 'int ()' Function 0x1379284f8 'assert' 'int ()'
    | `-BinaryOperator 0x137928658 <col:9, col:26> 'int' contains-errors '>='
    |   |-DeclRefExpr 0x1379285d0 <col:9> 'int' lvalue ParmVar 0x1379281a8 'maxcmpts' 'int'
    |   `-CXXDependentScopeMemberExpr 0x137928610 <col:21, col:26> '<dependent type>' contains-errors lvalue ->numcmpts
    |     `-RecoveryExpr 0x1379285f0 <col:21> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x137941ba8 <line:8:2, line:10:2>
    | |-UnaryOperator 0x137941b30 <line:8:6, col:7> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x137941b18 <col:7> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x137941af8 <col:7> 'int' lvalue ParmVar 0x1379281a8 'maxcmpts' 'int'
    | `-CompoundStmt 0x137941b90 <col:17, line:10:2>
    |   `-ReturnStmt 0x137941b80 <line:9:3, col:11>
    |     `-UnaryOperator 0x137941b68 <col:10, col:11> 'int' prefix '-'
    |       `-IntegerLiteral 0x137941b48 <col:11> 'int' 1
    |-BinaryOperator 0x137941c78 <line:11:2, col:18> '<dependent type>' contains-errors '='
    | |-CXXDependentScopeMemberExpr 0x137941c10 <col:2, col:7> '<dependent type>' contains-errors lvalue ->maxcmpts
    | | `-RecoveryExpr 0x137941be8 <col:2> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x137941bc8 <col:2> 'int *' lvalue ParmVar 0x137928128 'hdr' 'int *'
    | `-DeclRefExpr 0x137941c58 <col:18> 'int' lvalue ParmVar 0x1379281a8 'maxcmpts' 'int'
    |-BinaryOperator 0x137941d80 <line:12:2, col:15> '<dependent type>' contains-errors '='
    | |-CXXDependentScopeMemberExpr 0x137941ce0 <col:2, col:7> '<dependent type>' contains-errors lvalue ->cmpts
    | | `-RecoveryExpr 0x137941cb8 <col:2> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x137941c98 <col:2> 'int *' lvalue ParmVar 0x137928128 'hdr' 'int *'
    | `-DeclRefExpr 0x137941d60 <col:15> 'int' lvalue ParmVar 0x1379281a8 'maxcmpts' 'int'
    |-ForStmt 0x137942080 <line:13:2, line:15:2>
    | |-BinaryOperator 0x137941e28 <line:13:7, col:21> 'int' contains-errors '='
    | | |-DeclRefExpr 0x137941da0 <col:7> 'int' lvalue Var 0x137928358 'cmptno' 'int'
    | | `-CXXDependentScopeMemberExpr 0x137941de0 <col:16, col:21> '<dependent type>' contains-errors lvalue ->numcmpts
    | |   `-RecoveryExpr 0x137941dc0 <col:16> '<dependent type>' contains-errors lvalue
    | |-<<<NULL>>>
    | |-BinaryOperator 0x137941ed0 <col:31, col:45> 'int' contains-errors '<'
    | | |-DeclRefExpr 0x137941e48 <col:31> 'int' lvalue Var 0x137928358 'cmptno' 'int'
    | | `-CXXDependentScopeMemberExpr 0x137941e88 <col:40, col:45> '<dependent type>' contains-errors lvalue ->maxcmpts
    | |   `-RecoveryExpr 0x137941e68 <col:40> '<dependent type>' contains-errors lvalue
    | |-UnaryOperator 0x137941f10 <col:55, col:57> 'int' prefix '++'
    | | `-DeclRefExpr 0x137941ef0 <col:57> 'int' lvalue Var 0x137928358 'cmptno' 'int'
    | `-CompoundStmt 0x137942068 <col:65, line:15:2>
    |   `-BinaryOperator 0x137942048 <line:14:3, col:24> '<dependent type>' contains-errors '='
    |     |-ArraySubscriptExpr 0x137942008 <col:3, col:20> '<dependent type>' contains-errors lvalue
    |     | |-ImplicitCastExpr 0x137941fd8 <col:3, col:8> '<dependent type>' contains-errors <LValueToRValue>
    |     | | `-CXXDependentScopeMemberExpr 0x137941f70 <col:3, col:8> '<dependent type>' contains-errors lvalue ->cmpts
    |     | |   `-RecoveryExpr 0x137941f48 <col:3> '<dependent type>' contains-errors lvalue
    |     | |     `-DeclRefExpr 0x137941f28 <col:3> 'int *' lvalue ParmVar 0x137928128 'hdr' 'int *'
    |     | `-ImplicitCastExpr 0x137941ff0 <col:14> 'int' <LValueToRValue>
    |     |   `-DeclRefExpr 0x137941fb8 <col:14> 'int' lvalue Var 0x137928358 'cmptno' 'int'
    |     `-IntegerLiteral 0x137942028 <col:24> 'int' 0
    `-ReturnStmt 0x1379420d8 <line:16:2, col:9>
      `-IntegerLiteral 0x1379420b8 <col:9> 'int' 0
