`-FunctionDecl 0x12280de88  line:1:19 invalid spl_object_storage_debug_info 'int *(int *, int *)' static
  |-ParmVarDecl 0x12280dd28 <col:49, col:55> col:55 invalid obj 'int *'
  |-ParmVarDecl 0x12280dda8 <col:60, col:65> col:65 used is_temp 'int *'
  `-CompoundStmt 0x12380ac88 <line:2:1, line:47:1>
    |-DeclStmt 0x12280e108 <line:8:2, col:17>
    | `-VarDecl 0x12280e0a0 <col:2, col:16> col:7 used md5str 'char[33]'
    |-DeclStmt 0x12280e1a0 <line:9:2, col:14>
    | `-VarDecl 0x12280e138 <col:2, col:6> col:6 used name_len 'int'
    |-DeclStmt 0x12280e238 <line:10:2, col:13>
    | `-VarDecl 0x12280e1d0 <col:2, col:8> col:8 used zname 'char *'
    |-BinaryOperator 0x12280e2c0 <line:12:2, col:13> 'int' '='
    | |-UnaryOperator 0x12280e288 <col:2, col:3> 'int' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x12280e270 <col:3> 'int *' <LValueToRValue>
    | |   `-DeclRefExpr 0x12280e250 <col:3> 'int *' lvalue ParmVar 0x12280dda8 'is_temp' 'int *'
    | `-IntegerLiteral 0x12280e2a0 <col:13> 'int' 0
    |-CallExpr 0x1238094f0 <line:15:2, col:28> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x123809400 <col:2> 'int ()' Function 0x123809348 'zend_hash_del' 'int ()'
    | |-RecoveryExpr 0x1238094d0 <col:16> '<dependent type>' contains-errors lvalue
    | `-StringLiteral 0x123809480 <col:23> 'char[4]' lvalue "STR"
    |-IfStmt 0x123809890 <line:17:2, line:20:2>
    | |-RecoveryExpr 0x123809520 <line:17:6, col:28> '_Bool' contains-errors
    | `-CompoundStmt 0x123809880 <col:34, line:20:2>
    `-IfStmt 0x12380ac68 <line:22:2, line:44:2>
      |-RecoveryExpr 0x1238098d0 <line:22:6, col:41> '_Bool' contains-errors
      `-CompoundStmt 0x12380ac48 <col:44, line:44:2>
        |-WhileStmt 0x12380a750 <line:29:3, line:39:3>
        | |-RecoveryExpr 0x123809df0 <line:29:10, col:86> '_Bool' contains-errors
        | `-CompoundStmt 0x12380a740 <col:95, line:39:3>
        `-CallExpr 0x12380ac08 <line:43:3, col:14> 'int'
          |-ImplicitCastExpr 0x12380abf0 <col:3> 'int (*)()' <FunctionToPointerDecay>
          | `-DeclRefExpr 0x12380ab80 <col:3> 'int ()' Function 0x12380aac8 'efree' 'int ()'
          `-ImplicitCastExpr 0x12380ac30 <col:9> 'char *' <LValueToRValue>
            `-DeclRefExpr 0x12380aba0 <col:9> 'char *' lvalue Var 0x12280e1d0 'zname' 'char *'
