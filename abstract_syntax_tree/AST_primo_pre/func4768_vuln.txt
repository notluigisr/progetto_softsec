`-FunctionDecl 0x147928438  line:1:1 invalid check_sgr 'int (int *, char *, int, char *, const char *)'
  |-ParmVarDecl 0x147928128 <col:11, col:22> col:22 invalid tp 'int *'
  |-ParmVarDecl 0x1479281a8 <col:26, col:32> col:32 used zero 'char *'
  |-ParmVarDecl 0x147928228 <col:38, col:42> col:42 used num 'int'
  |-ParmVarDecl 0x1479282a8 <col:47, col:53> col:53 used cap 'char *'
  |-ParmVarDecl 0x147928328 <col:58, col:70> col:70 used name 'const char *'
  `-CompoundStmt 0x1479423e0 <line:2:1, line:33:1>
    |-DeclStmt 0x147928588 <line:3:5, col:15>
    | `-VarDecl 0x147928520 <col:5, col:11> col:11 used test 'char *'
    |-BinaryOperator 0x150009cd8 <line:6:5, line:15:14> 'char *' contains-errors '='
    | |-DeclRefExpr 0x1479285c0 <line:6:5> 'char *' lvalue Var 0x147928520 'test' 'char *'
    | `-CallExpr 0x150009c68 <col:12, line:15:14> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x147928740 <line:6:12> 'int ()' Function 0x147928688 'TPARM_9' 'int ()'
    |   |-RecoveryExpr 0x150009a50 <col:20> '<dependent type>' contains-errors lvalue
    |   |-BinaryOperator 0x150009a88 <line:7:6, col:13> 'int' '=='
    |   | |-ImplicitCastExpr 0x150009a70 <col:6> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x147928778 <col:6> 'int' lvalue ParmVar 0x147928228 'num' 'int'
    |   | `-IntegerLiteral 0x147928798 <col:13> 'int' 1
    |   |-BinaryOperator 0x150009ac0 <line:8:6, col:13> 'int' '=='
    |   | |-ImplicitCastExpr 0x150009aa8 <col:6> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x150009600 <col:6> 'int' lvalue ParmVar 0x147928228 'num' 'int'
    |   | `-IntegerLiteral 0x150009620 <col:13> 'int' 2
    |   |-BinaryOperator 0x150009af8 <line:9:6, col:13> 'int' '=='
    |   | |-ImplicitCastExpr 0x150009ae0 <col:6> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x150009678 <col:6> 'int' lvalue ParmVar 0x147928228 'num' 'int'
    |   | `-IntegerLiteral 0x150009698 <col:13> 'int' 3
    |   |-BinaryOperator 0x150009b30 <line:10:6, col:13> 'int' '=='
    |   | |-ImplicitCastExpr 0x150009b18 <col:6> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x1500096f0 <col:6> 'int' lvalue ParmVar 0x147928228 'num' 'int'
    |   | `-IntegerLiteral 0x150009710 <col:13> 'int' 4
    |   |-BinaryOperator 0x150009b68 <line:11:6, col:13> 'int' '=='
    |   | |-ImplicitCastExpr 0x150009b50 <col:6> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x150009768 <col:6> 'int' lvalue ParmVar 0x147928228 'num' 'int'
    |   | `-IntegerLiteral 0x150009788 <col:13> 'int' 5
    |   |-BinaryOperator 0x150009ba0 <line:12:6, col:13> 'int' '=='
    |   | |-ImplicitCastExpr 0x150009b88 <col:6> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x1500097e0 <col:6> 'int' lvalue ParmVar 0x147928228 'num' 'int'
    |   | `-IntegerLiteral 0x150009800 <col:13> 'int' 6
    |   |-BinaryOperator 0x150009bd8 <line:13:6, col:13> 'int' '=='
    |   | |-ImplicitCastExpr 0x150009bc0 <col:6> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x150009858 <col:6> 'int' lvalue ParmVar 0x147928228 'num' 'int'
    |   | `-IntegerLiteral 0x150009878 <col:13> 'int' 7
    |   |-BinaryOperator 0x150009c10 <line:14:6, col:13> 'int' '=='
    |   | |-ImplicitCastExpr 0x150009bf8 <col:6> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x1500098d0 <col:6> 'int' lvalue ParmVar 0x147928228 'num' 'int'
    |   | `-IntegerLiteral 0x1500098f0 <col:13> 'int' 8
    |   `-BinaryOperator 0x150009c48 <line:15:6, col:13> 'int' '=='
    |     |-ImplicitCastExpr 0x150009c30 <col:6> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x150009948 <col:6> 'int' lvalue ParmVar 0x147928228 'num' 'int'
    |     `-IntegerLiteral 0x150009968 <col:13> 'int' 9
    |-IfStmt 0x147941e00 <line:16:5, line:29:5> has_else
    | |-BinaryOperator 0x150009d68 <line:16:9, col:17> 'int' '!='
    | | |-ImplicitCastExpr 0x150009d38 <col:9> 'char *' <LValueToRValue>
    | | | `-DeclRefExpr 0x150009cf8 <col:9> 'char *' lvalue Var 0x147928520 'test' 'char *'
    | | `-ImplicitCastExpr 0x150009d50 <col:17> 'char *' <NullToPointer>
    | |   `-IntegerLiteral 0x150009d18 <col:17> 'int' 0
    | |-CompoundStmt 0x147941c00 <col:20, line:27:5>
    | | `-IfStmt 0x147941bd0 <line:17:2, line:26:2> has_else
    | |   |-CallExpr 0x150009ef8 <line:17:6, col:17> 'int'
    | |   | |-ImplicitCastExpr 0x150009ee0 <col:6> 'int (*)()' <FunctionToPointerDecay>
    | |   | | `-DeclRefExpr 0x150009e68 <col:6> 'int ()' Function 0x150009db0 'PRESENT' 'int ()'
    | |   | `-ImplicitCastExpr 0x150009f20 <col:14> 'char *' <LValueToRValue>
    | |   |   `-DeclRefExpr 0x150009e88 <col:14> 'char *' lvalue ParmVar 0x1479282a8 'cap' 'char *'
    | |   |-CompoundStmt 0x1479418b0 <col:20, line:24:2>
    | |   | `-IfStmt 0x147941890 <line:18:6, line:23:6>
    | |   |   |-UnaryOperator 0x15000a130 <line:18:10, col:37> 'int' prefix '!' cannot overflow
    | |   |   | `-CallExpr 0x15000a0b0 <col:11, col:37> 'int'
    | |   |   |   |-ImplicitCastExpr 0x15000a098 <col:11> 'int (*)()' <FunctionToPointerDecay>
    | |   |   |   | `-DeclRefExpr 0x15000a018 <col:11> 'int ()' Function 0x150009f60 'similar_sgr' 'int ()'
    | |   |   |   |-ImplicitCastExpr 0x15000a0e8 <col:23> 'int' <LValueToRValue>
    | |   |   |   | `-DeclRefExpr 0x15000a038 <col:23> 'int' lvalue ParmVar 0x147928228 'num' 'int'
    | |   |   |   |-ImplicitCastExpr 0x15000a100 <col:28> 'char *' <LValueToRValue>
    | |   |   |   | `-DeclRefExpr 0x15000a058 <col:28> 'char *' lvalue Var 0x147928520 'test' 'char *'
    | |   |   |   `-ImplicitCastExpr 0x15000a118 <col:34> 'char *' <LValueToRValue>
    | |   |   |     `-DeclRefExpr 0x15000a078 <col:34> 'char *' lvalue ParmVar 0x1479282a8 'cap' 'char *'
    | |   |   `-CompoundStmt 0x147941878 <col:40, line:23:6>
    | |   |     `-CallExpr 0x15000a5a8 <line:19:3, line:22:33> 'int'
    | |   |       |-ImplicitCastExpr 0x15000a590 <line:19:3> 'int (*)()' <FunctionToPointerDecay>
    | |   |       | `-DeclRefExpr 0x15000a228 <col:3> 'int ()' Function 0x15000a170 '_nc_warning' 'int ()'
    | |   |       |-ImplicitCastExpr 0x147941800 <col:15> 'char *' <ArrayToPointerDecay>
    | |   |       | `-StringLiteral 0x15000a290 <col:15> 'char[4]' lvalue "STR"
    | |   |       |-ImplicitCastExpr 0x147941818 <line:20:8> 'const char *' <LValueToRValue>
    | |   |       | `-DeclRefExpr 0x15000a2b0 <col:8> 'const char *' lvalue ParmVar 0x147928328 'name' 'const char *'
    | |   |       |-ImplicitCastExpr 0x147941830 <col:14> 'int' <LValueToRValue>
    | |   |       | `-DeclRefExpr 0x15000a2d0 <col:14> 'int' lvalue ParmVar 0x147928228 'num' 'int'
    | |   |       |-ImplicitCastExpr 0x147941848 <line:21:8> 'const char *' <LValueToRValue>
    | |   |       | `-DeclRefExpr 0x15000a2f0 <col:8> 'const char *' lvalue ParmVar 0x147928328 'name' 'const char *'
    | |   |       |-CallExpr 0x15000a468 <col:14, col:32> 'int'
    | |   |       | |-ImplicitCastExpr 0x15000a450 <col:14> 'int (*)()' <FunctionToPointerDecay>
    | |   |       | | `-DeclRefExpr 0x15000a3f0 <col:14> 'int ()' Function 0x15000a338 '_nc_visbuf2' 'int ()'
    | |   |       | |-IntegerLiteral 0x15000a410 <col:26> 'int' 1
    | |   |       | `-ImplicitCastExpr 0x15000a498 <col:29> 'char *' <LValueToRValue>
    | |   |       |   `-DeclRefExpr 0x15000a430 <col:29> 'char *' lvalue ParmVar 0x1479282a8 'cap' 'char *'
    | |   |       |-ImplicitCastExpr 0x147941860 <line:22:8> 'int' <LValueToRValue>
    | |   |       | `-DeclRefExpr 0x15000a4b0 <col:8> 'int' lvalue ParmVar 0x147928228 'num' 'int'
    | |   |       `-CallExpr 0x15000a548 <col:13, col:32> 'int'
    | |   |         |-ImplicitCastExpr 0x15000a530 <col:13> 'int (*)()' <FunctionToPointerDecay>
    | |   |         | `-DeclRefExpr 0x15000a4d0 <col:13> 'int ()' Function 0x15000a338 '_nc_visbuf2' 'int ()'
    | |   |         |-IntegerLiteral 0x15000a4f0 <col:25> 'int' 2
    | |   |         `-ImplicitCastExpr 0x15000a578 <col:28> 'char *' <LValueToRValue>
    | |   |           `-DeclRefExpr 0x15000a510 <col:28> 'char *' lvalue Var 0x147928520 'test' 'char *'
    | |   `-IfStmt 0x147941bb0 <line:24:9, line:26:2>
    | |     |-CallExpr 0x147941a20 <line:24:13, col:34> 'int'
    | |     | |-ImplicitCastExpr 0x147941a08 <col:13> 'int (*)()' <FunctionToPointerDecay>
    | |     | | `-DeclRefExpr 0x1479419a8 <col:13> 'int ()' Function 0x1479418f0 '_nc_capcmp' 'int ()'
    | |     | |-ImplicitCastExpr 0x147941a50 <col:24> 'char *' <LValueToRValue>
    | |     | | `-DeclRefExpr 0x1479419c8 <col:24> 'char *' lvalue Var 0x147928520 'test' 'char *'
    | |     | `-ImplicitCastExpr 0x147941a68 <col:30> 'char *' <LValueToRValue>
    | |     |   `-DeclRefExpr 0x1479419e8 <col:30> 'char *' lvalue ParmVar 0x1479281a8 'zero' 'char *'
    | |     `-CompoundStmt 0x147941b98 <col:37, line:26:2>
    | |       `-CallExpr 0x147941b18 <line:25:6, col:34> 'int'
    | |         |-ImplicitCastExpr 0x147941b00 <col:6> 'int (*)()' <FunctionToPointerDecay>
    | |         | `-DeclRefExpr 0x147941a80 <col:6> 'int ()' Function 0x15000a170 '_nc_warning' 'int ()'
    | |         |-ImplicitCastExpr 0x147941b50 <col:18> 'char *' <ArrayToPointerDecay>
    | |         | `-StringLiteral 0x147941aa0 <col:18> 'char[4]' lvalue "STR"
    | |         |-ImplicitCastExpr 0x147941b68 <col:25> 'int' <LValueToRValue>
    | |         | `-DeclRefExpr 0x147941ac0 <col:25> 'int' lvalue ParmVar 0x147928228 'num' 'int'
    | |         `-ImplicitCastExpr 0x147941b80 <col:30> 'const char *' <LValueToRValue>
    | |           `-DeclRefExpr 0x147941ae0 <col:30> 'const char *' lvalue ParmVar 0x147928328 'name' 'const char *'
    | `-IfStmt 0x147941de0 <line:27:12, line:29:5>
    |   |-CallExpr 0x147941c70 <line:27:16, col:27> 'int'
    |   | |-ImplicitCastExpr 0x147941c58 <col:16> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x147941c18 <col:16> 'int ()' Function 0x150009db0 'PRESENT' 'int ()'
    |   | `-ImplicitCastExpr 0x147941c98 <col:24> 'char *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x147941c38 <col:24> 'char *' lvalue ParmVar 0x1479282a8 'cap' 'char *'
    |   `-CompoundStmt 0x147941dc8 <col:30, line:29:5>
    |     `-CallExpr 0x147941d48 <line:28:2, col:30> 'int'
    |       |-ImplicitCastExpr 0x147941d30 <col:2> 'int (*)()' <FunctionToPointerDecay>
    |       | `-DeclRefExpr 0x147941cb0 <col:2> 'int ()' Function 0x15000a170 '_nc_warning' 'int ()'
    |       |-ImplicitCastExpr 0x147941d80 <col:14> 'char *' <ArrayToPointerDecay>
    |       | `-StringLiteral 0x147941cd0 <col:14> 'char[4]' lvalue "STR"
    |       |-ImplicitCastExpr 0x147941d98 <col:21> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x147941cf0 <col:21> 'int' lvalue ParmVar 0x147928228 'num' 'int'
    |       `-ImplicitCastExpr 0x147941db0 <col:26> 'const char *' <LValueToRValue>
    |         `-DeclRefExpr 0x147941d10 <col:26> 'const char *' lvalue ParmVar 0x147928328 'name' 'const char *'
    |-IfStmt 0x147941f40 <line:30:5, line:31:24>
    | |-RecoveryExpr 0x147941e48 <line:30:9> '<dependent type>' contains-errors lvalue
    | `-CallExpr 0x147941ee0 <line:31:2, col:24> 'int'
    |   |-ImplicitCastExpr 0x147941ec8 <col:2> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x147941e68 <col:2> 'int ()' Function 0x15000a170 '_nc_warning' 'int ()'
    |   |-ImplicitCastExpr 0x147941f10 <col:14> 'char *' <ArrayToPointerDecay>
    |   | `-StringLiteral 0x147941e88 <col:14> 'char[4]' lvalue "STR"
    |   `-ImplicitCastExpr 0x147941f28 <col:21> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x147941ea8 <col:21> 'int' lvalue ParmVar 0x147928228 'num' 'int'
    `-ReturnStmt 0x1479423d0 <line:32:5, col:12>
      `-ImplicitCastExpr 0x147941f98 <col:12> 'int' <PointerToIntegral>
        `-ImplicitCastExpr 0x147941f80 <col:12> 'char *' <LValueToRValue>
          `-DeclRefExpr 0x147941f60 <col:12> 'char *' lvalue Var 0x147928520 'test' 'char *'
