`-FunctionDecl 0x1201289a8  line:1:1 win_new_tabpage 'int (int)'
  |-ParmVarDecl 0x1201288d8 <col:17, col:21> col:21 used after 'int'
  `-CompoundStmt 0x10300a368 <line:2:1, line:76:1>
    |-DeclStmt 0x120128bb0 <line:6:5, col:11>
    | `-VarDecl 0x120128b48 <col:5, col:10> col:10 used n 'int'
    |-IfStmt 0x120128e60 <line:9:5, line:10:9>
    | |-BinaryOperator 0x120128df8 <line:9:9, col:18> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x120128db8 <col:9> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x120128dd8 <col:18> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x120128e50 <line:10:2, col:9>
    |   `-RecoveryExpr 0x120128e30 <col:9> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x103009670 <line:13:5, line:17:5>
    | |-BinaryOperator 0x1030094b0 <line:13:9, col:40> 'int' contains-errors '=='
    | | |-CallExpr 0x103009460 <col:9, col:35> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x120128f60 <col:9> 'int ()' Function 0x120128ea8 'leave_tabpage' 'int ()'
    | | | |-RecoveryExpr 0x103009420 <col:23> '<dependent type>' contains-errors lvalue
    | | | `-RecoveryExpr 0x103009440 <col:31> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x103009490 <col:40> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x103009658 <line:14:5, line:17:5>
    |   `-CallExpr 0x103009630 <line:15:2, col:16> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x1030095b0 <col:2> 'int ()' Function 0x1030094f8 'vim_free' 'int ()'
    |     `-RecoveryExpr 0x103009610 <col:11> '<dependent type>' contains-errors lvalue
    `-IfStmt 0x10300a248 <line:23:5, line:71:5>
      |-RecoveryExpr 0x103009890 <line:23:9, col:46> '_Bool' contains-errors
      `-CompoundStmt 0x10300a228 <line:24:5, line:71:5>
        |-IfStmt 0x103009b28 <line:26:2, line:44:2> has_else
        | |-BinaryOperator 0x103009908 <line:26:6, col:15> 'int' '=='
        | | |-ImplicitCastExpr 0x1030098f0 <col:6> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x1030098b0 <col:6> 'int' lvalue ParmVar 0x1201288d8 'after' 'int'
        | | `-IntegerLiteral 0x1030098d0 <col:15> 'int' 1
        | |-CompoundStmt 0x103009928 <line:27:2, line:31:2>
        | `-CompoundStmt 0x103009b10 <line:33:2, line:44:2>
        |   `-IfStmt 0x103009af0 <line:34:6, line:41:6>
        |     |-BinaryOperator 0x103009990 <line:34:10, col:18> 'int' '>'
        |     | |-ImplicitCastExpr 0x103009978 <col:10> 'int' <LValueToRValue>
        |     | | `-DeclRefExpr 0x103009938 <col:10> 'int' lvalue ParmVar 0x1201288d8 'after' 'int'
        |     | `-IntegerLiteral 0x103009958 <col:18> 'int' 0
        |     `-CompoundStmt 0x103009ad8 <line:35:6, line:41:6>
        |       `-BinaryOperator 0x1030099f0 <line:37:3, col:7> 'int' '='
        |         |-DeclRefExpr 0x1030099b0 <col:3> 'int' lvalue Var 0x120128b48 'n' 'int'
        |         `-IntegerLiteral 0x1030099d0 <col:7> 'int' 2
        `-CallExpr 0x103009c70 <line:47:2, col:16> 'int'
          `-ImplicitCastExpr 0x103009c58 <col:2> 'int (*)()' <FunctionToPointerDecay>
            `-DeclRefExpr 0x103009c38 <col:2> 'int ()' Function 0x103009b80 'win_init_size' 'int ()'
