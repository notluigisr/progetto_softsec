`-FunctionDecl 0x13d127c58  line:1:5 invalid GC_generic_malloc_ignore_off_page 'int (int, int)'
  |-ParmVarDecl 0x13d127af0 <col:39, col:46> col:46 invalid lb 'int'
  |-ParmVarDecl 0x13d127b70 <col:50, col:54> col:54 used k 'int'
  `-CompoundStmt 0x13d142b40 <line:2:1, line:51:1>
    |-DeclStmt 0x13d127d90 <line:3:5, col:17>
    | `-VarDecl 0x13d127d28 <col:5, col:11> col:11 used result 'void *'
    |-UnaryExprOrTypeTraitExpr 0x13d127e00 <line:4:5, col:12> 'unsigned long' contains-errors sizeof
    | `-RecoveryExpr 0x13d127de0 <col:12> '<dependent type>' contains-errors lvalue
    |-UnaryExprOrTypeTraitExpr 0x13d127e78 <line:5:5, col:12> 'unsigned long' contains-errors sizeof
    | `-RecoveryExpr 0x13d127e58 <col:12> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x13d1281d8 <line:10:5, line:11:39>
    | |-CallExpr 0x13d128030 <line:10:9, col:21> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x13d127ff0 <col:9> 'int ()' Function 0x13d127f38 'SMALL_OBJ' 'int ()'
    | | `-RecoveryExpr 0x13d128010 <col:19> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x13d1281c8 <line:11:9, col:39>
    |   `-CallExpr 0x13d128198 <col:16, col:39> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x13d128138 <col:16> 'int ()' Function 0x13d128080 'GC_generic_malloc' 'int ()'
    |     |-RecoveryExpr 0x13d128158 <col:34> '<dependent type>' contains-errors lvalue
    |     `-DeclRefExpr 0x13d128178 <col:38> 'int' lvalue ParmVar 0x13d127b70 'k' 'int'
    |-CallExpr 0x13d1413c0 <line:12:5, col:30> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x13d1412e0 <col:5> 'int ()' Function 0x13d141228 'GC_ASSERT' 'int ()'
    | `-BinaryOperator 0x13d1413a0 <col:15, col:19> 'int' contains-errors '<'
    |   |-DeclRefExpr 0x13d141300 <col:15> 'int' lvalue ParmVar 0x13d127b70 'k' 'int'
    |   `-RecoveryExpr 0x13d141380 <col:19> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x13d141938 <line:15:5, line:16:38>
    | |-BinaryOperator 0x13d1416e8 <line:15:9, col:22> 'int' contains-errors '<'
    | | |-RecoveryExpr 0x13d1416c8 <col:9> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x13d141688 <col:22> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x13d141928 <line:16:9, col:38>
    |   `-ParenExpr 0x13d141908 <col:15, col:38> '<dependent type>' contains-errors
    |     `-CallExpr 0x13d1418e0 <col:16, col:37> '<dependent type>' contains-errors
    |       |-ParenExpr 0x13d1418a0 <col:16, col:33> '<dependent type>' contains-errors lvalue
    |       | `-RecoveryExpr 0x13d141878 <col:17, col:32> '<dependent type>' contains-errors lvalue
    |       |   `-CallExpr 0x13d141858 <col:18, col:32> 'int'
    |       |     `-ImplicitCastExpr 0x13d141840 <col:18> 'int (*)()' <FunctionToPointerDecay>
    |       |       `-DeclRefExpr 0x13d1417e8 <col:18> 'int ()' Function 0x13d141730 'GC_get_oom_fn' 'int ()'
    |       `-RecoveryExpr 0x13d1418c0 <col:35> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x13d141cd0 <line:19:5, line:20:27>
    | |-RecoveryExpr 0x13d141b78 <line:19:9, col:37> '_Bool' contains-errors
    | `-CallExpr 0x13d141cb0 <line:20:7, col:27> 'int'
    |   `-ImplicitCastExpr 0x13d141c98 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x13d141c78 <col:7> 'int ()' Function 0x13d141bc0 'GC_print_all_errors' 'int ()'
    |-CallExpr 0x13d141e08 <line:21:5, col:26> 'int'
    | `-ImplicitCastExpr 0x13d141df0 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x13d141dd0 <col:5> 'int ()' Function 0x13d141d18 'GC_INVOKE_FINALIZERS' 'int ()'
    |-CallExpr 0x13d141f48 <line:22:5, col:32> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x13d141f08 <col:5> 'int ()' Function 0x13d141e50 'GC_DBG_COLLECT_AT_MALLOC' 'int ()'
    | `-RecoveryExpr 0x13d141f28 <col:30> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x13d142088 <line:23:5, col:10> 'int'
    | `-ImplicitCastExpr 0x13d142070 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x13d142050 <col:5> 'int ()' Function 0x13d141f98 'LOCK' 'int ()'
    |-IfStmt 0x13d142760 <line:25:5, line:38:5>
    | |-BinaryOperator 0x13d142138 <line:25:9, col:14> 'int' '!='
    | | |-ImplicitCastExpr 0x13d142120 <col:9> 'void *' <NullToPointer>
    | | | `-IntegerLiteral 0x13d1420c8 <col:9> 'int' 0
    | | `-ImplicitCastExpr 0x13d142108 <col:14> 'void *' <LValueToRValue>
    | |   `-DeclRefExpr 0x13d1420e8 <col:14> 'void *' lvalue Var 0x13d127d28 'result' 'void *'
    | `-CompoundStmt 0x13d142748 <col:22, line:38:5>
    |   `-IfStmt 0x13d142718 <line:26:9, line:37:9> has_else
    |     |-RecoveryExpr 0x13d142158 <line:26:13> '_Bool' contains-errors
    |     |-CompoundStmt 0x13d1426f8 <col:35, line:28:9>
    |     `-CompoundStmt 0x13d142708 <col:16, line:37:9>
    `-IfStmt 0x13d142b10 <line:40:5, line:50:5> has_else
      |-BinaryOperator 0x13d1427f0 <line:40:9, col:14> 'int' '=='
      | |-ImplicitCastExpr 0x13d1427d8 <col:9> 'void *' <NullToPointer>
      | | `-IntegerLiteral 0x13d142780 <col:9> 'int' 0
      | `-ImplicitCastExpr 0x13d1427c0 <col:14> 'void *' <LValueToRValue>
      |   `-DeclRefExpr 0x13d1427a0 <col:14> 'void *' lvalue Var 0x13d127d28 'result' 'void *'
      |-CompoundStmt 0x13d142968 <col:22, line:44:5>
      | `-CallExpr 0x13d142928 <line:42:9, col:16> 'int'
      |   `-ImplicitCastExpr 0x13d142910 <col:9> 'int (*)()' <FunctionToPointerDecay>
      |     `-DeclRefExpr 0x13d1428f0 <col:9> 'int ()' Function 0x13d142838 'UNLOCK' 'int ()'
      `-CompoundStmt 0x13d142ae8 <line:44:12, line:50:5>
        |-CallExpr 0x13d1429b8 <line:45:9, col:16> 'int'
        | `-ImplicitCastExpr 0x13d1429a0 <col:9> 'int (*)()' <FunctionToPointerDecay>
        |   `-DeclRefExpr 0x13d142980 <col:9> 'int ()' Function 0x13d142838 'UNLOCK' 'int ()'
        |-IfStmt 0x13d142a48 <line:46:9, line:48:9>
        | |-RecoveryExpr 0x13d1429d8 <line:46:13, col:22> '_Bool' contains-errors
        | `-CompoundStmt 0x13d142a38 <col:44, line:48:9>
        `-ReturnStmt 0x13d142ad8 <line:49:9, col:22>
          `-ImplicitCastExpr 0x13d142ac0 <col:15, col:22> 'int' <PointerToIntegral>
            `-ImplicitCastExpr 0x13d142aa8 <col:15, col:22> 'void *' <LValueToRValue>
              `-ParenExpr 0x13d142a88 <col:15, col:22> 'void *' lvalue
                `-DeclRefExpr 0x13d142a68 <col:16> 'void *' lvalue Var 0x13d127d28 'result' 'void *'
