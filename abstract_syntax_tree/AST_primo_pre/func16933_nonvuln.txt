`-FunctionDecl 0x13504f5f8  line:1:1 invalid xsltUTF8Size 'int (int *)'
  |-ParmVarDecl 0x13504f528 <col:14, col:23> col:23 invalid utf 'int *'
  `-CompoundStmt 0x135066698 <col:28, line:20:1>
    |-DeclStmt 0x13504f728 <line:3:5, col:12>
    | `-VarDecl 0x13504f6c0 <col:5, col:9> col:9 used len 'int'
    |-IfStmt 0x13504f820 <line:5:5, line:6:17>
    | |-BinaryOperator 0x13504f7b8 <line:5:9, col:16> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x13504f740 <col:9> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x13504f798 <col:16> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x13504f810 <line:6:9, col:17>
    |   `-UnaryOperator 0x13504f7f8 <col:16, col:17> 'int' prefix '-'
    |     `-IntegerLiteral 0x13504f7d8 <col:17> 'int' 1
    |-IfStmt 0x13504f900 <line:7:5, line:8:16>
    | |-BinaryOperator 0x13504f8b0 <line:7:9, col:16> 'int' contains-errors '<'
    | | |-UnaryOperator 0x13504f878 <col:9, col:10> '<dependent type>' contains-errors prefix '*' cannot overflow
    | | | `-ImplicitCastExpr 0x13504f860 <col:10> '<dependent type>' contains-errors <LValueToRValue>
    | | |   `-RecoveryExpr 0x13504f840 <col:10> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x13504f890 <col:16> 'int' 128
    | `-ReturnStmt 0x13504f8f0 <line:8:9, col:16>
    |   `-IntegerLiteral 0x13504f8d0 <col:16> 'int' 1
    |-IfStmt 0x13504fa30 <line:10:5, line:11:17>
    | |-UnaryOperator 0x13504f9d0 <line:10:9, col:22> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ParenExpr 0x13504f9b0 <col:10, col:22> '<dependent type>' contains-errors
    | |   `-BinaryOperator 0x13504f990 <col:11, col:18> '<dependent type>' contains-errors '&'
    | |     |-UnaryOperator 0x13504f958 <col:11, col:12> '<dependent type>' contains-errors prefix '*' cannot overflow
    | |     | `-ImplicitCastExpr 0x13504f940 <col:12> '<dependent type>' contains-errors <LValueToRValue>
    | |     |   `-RecoveryExpr 0x13504f920 <col:12> '<dependent type>' contains-errors lvalue
    | |     `-IntegerLiteral 0x13504f970 <col:18> 'int' 64
    | `-ReturnStmt 0x13504fa20 <line:11:9, col:17>
    |   `-UnaryOperator 0x13504fa08 <col:16, col:17> 'int' prefix '-'
    |     `-IntegerLiteral 0x13504f9e8 <col:17> 'int' 1
    |-BinaryOperator 0x13504fa90 <line:13:5, col:11> 'int' '='
    | |-DeclRefExpr 0x13504fa50 <col:5> 'int' lvalue Var 0x13504f6c0 'len' 'int'
    | `-IntegerLiteral 0x13504fa70 <col:11> 'int' 2
    |-ForStmt 0x135066618 <line:14:5, line:18:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-BinaryOperator 0x13504fb80 <line:14:21, col:29> 'int' contains-errors '!='
    | | |-RecoveryExpr 0x13504fb60 <col:21> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x13504fb20 <col:29> 'int' 0
    | |-CompoundAssignOperator 0x135066450 <col:32, col:39> '<dependent type>' contains-errors '>>=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    | | |-RecoveryExpr 0x135066430 <col:32> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x13504fbb8 <col:39> 'int' 1
    | `-CompoundStmt 0x1350665f8 <col:42, line:18:5>
    |   |-IfStmt 0x1350665a0 <line:15:9, line:16:20>
    |   | |-RecoveryExpr 0x135066538 <line:15:13, col:26> '_Bool' contains-errors
    |   | `-ReturnStmt 0x135066590 <line:16:13, col:20>
    |   |   `-ImplicitCastExpr 0x135066578 <col:20> 'int' <LValueToRValue>
    |   |     `-DeclRefExpr 0x135066558 <col:20> 'int' lvalue Var 0x13504f6c0 'len' 'int'
    |   `-UnaryOperator 0x1350665e0 <line:17:9, col:12> 'int' postfix '++'
    |     `-DeclRefExpr 0x1350665c0 <col:9> 'int' lvalue Var 0x13504f6c0 'len' 'int'
    `-ReturnStmt 0x135066688 <line:19:5, col:13>
      `-UnaryOperator 0x135066670 <col:12, col:13> 'int' prefix '-'
        `-IntegerLiteral 0x135066650 <col:13> 'int' 1
