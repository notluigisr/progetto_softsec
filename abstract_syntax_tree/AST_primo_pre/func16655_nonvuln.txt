`-FunctionDecl 0x137128390  line:1:34 invalid err_argmsg 'void (int *, int, const char *)' static
  |-ParmVarDecl 0x1371281a8 <col:45, col:56> col:56 invalid L 'int *'
  |-ParmVarDecl 0x137128228 <col:59, col:63> col:63 used narg 'int'
  |-ParmVarDecl 0x1371282a8 <line:2:10, col:22> col:22 used msg 'const char *'
  `-CompoundStmt 0x137142690 <line:3:1, line:13:1>
    |-DeclStmt 0x137128560 <line:4:3, col:28>
    | `-VarDecl 0x137128468 <col:3, col:23> col:15 used fname 'const char *' cinit
    |   `-ImplicitCastExpr 0x137128548 <col:23> 'const char *' <NoOp>
    |     `-ImplicitCastExpr 0x137128530 <col:23> 'char *' <ArrayToPointerDecay>
    |       `-StringLiteral 0x137128510 <col:23> 'char[4]' lvalue "STR"
    |-DeclStmt 0x1371418e0 <line:5:3, col:64>
    | `-VarDecl 0x137128590 <col:3, col:63> col:15 used ftype 'const char *' cinit
    |   `-CallExpr 0x1371418a8 <col:23, col:63> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x137128750 <col:23> 'int ()' Function 0x137128698 'lj_debug_funcname' 'int ()'
    |     |-RecoveryExpr 0x137128770 <col:41> '<dependent type>' contains-errors lvalue
    |     |-BinaryOperator 0x137141820 <col:44, col:54> '<dependent type>' contains-errors '-'
    |     | |-CXXDependentScopeMemberExpr 0x1371287b0 <col:44, col:47> '<dependent type>' contains-errors lvalue ->base
    |     | | `-RecoveryExpr 0x137128790 <col:44> '<dependent type>' contains-errors lvalue
    |     | `-IntegerLiteral 0x137141800 <col:54> 'int' 1
    |     `-UnaryOperator 0x137141890 <col:57, col:58> 'const char **' prefix '&' cannot overflow
    |       `-DeclRefExpr 0x137141840 <col:58> 'const char *' lvalue Var 0x137128468 'fname' 'const char *'
    |-IfStmt 0x137141d00 <line:6:3, line:7:45>
    | |-BinaryOperator 0x137141a98 <line:6:7, col:26> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x137141a38 <col:7, col:14> 'int' '<'
    | | | |-ImplicitCastExpr 0x137141a20 <col:7> 'int' <LValueToRValue>
    | | | | `-DeclRefExpr 0x1371418f8 <col:7> 'int' lvalue ParmVar 0x137128228 'narg' 'int'
    | | | `-IntegerLiteral 0x137141918 <col:14> 'int' 0
    | | `-BinaryOperator 0x137141a78 <col:19, col:26> 'int' contains-errors '>'
    | |   |-DeclRefExpr 0x137141970 <col:19> 'int' lvalue ParmVar 0x137128228 'narg' 'int'
    | |   `-RecoveryExpr 0x137141a58 <col:26> '<dependent type>' contains-errors lvalue
    | `-BinaryOperator 0x137141ce0 <line:7:5, col:45> 'int' contains-errors '='
    |   |-DeclRefExpr 0x137141ab8 <col:5> 'int' lvalue ParmVar 0x137128228 'narg' 'int'
    |   `-BinaryOperator 0x137141cc0 <col:12, col:45> 'int' contains-errors '+'
    |     |-BinaryOperator 0x137141c80 <col:12, col:38> 'int' contains-errors '+'
    |     | |-CStyleCastExpr 0x137141c20 <col:12, col:34> 'int' contains-errors <Dependent>
    |     | | `-ParenExpr 0x137141c00 <col:17, col:34> '<dependent type>' contains-errors
    |     | |   `-BinaryOperator 0x137141ba8 <col:18, col:30> '<dependent type>' contains-errors '-'
    |     | |     |-CXXDependentScopeMemberExpr 0x137141af8 <col:18, col:21> '<dependent type>' contains-errors lvalue ->top
    |     | |     | `-RecoveryExpr 0x137141ad8 <col:18> '<dependent type>' contains-errors lvalue
    |     | |     `-CXXDependentScopeMemberExpr 0x137141b60 <col:27, col:30> '<dependent type>' contains-errors lvalue ->base
    |     | |       `-RecoveryExpr 0x137141b40 <col:27> '<dependent type>' contains-errors lvalue
    |     | `-ImplicitCastExpr 0x137141c68 <col:38> 'int' <LValueToRValue>
    |     |   `-DeclRefExpr 0x137141c48 <col:38> 'int' lvalue ParmVar 0x137128228 'narg' 'int'
    |     `-IntegerLiteral 0x137141ca0 <col:45> 'int' 1
    |-IfStmt 0x1371424f0 <line:8:3, line:11:67> has_else
    | |-BinaryOperator 0x137141ed0 <line:8:7, col:45> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x137141e38 <col:7, col:28> 'int' contains-errors '&&'
    | | | |-ImplicitCastExpr 0x137141e20 <col:7> 'const char *' contains-errors <LValueToRValue>
    | | | | `-DeclRefExpr 0x137141d20 <col:7> 'const char *' contains-errors lvalue Var 0x137128590 'ftype' 'const char *'
    | | | `-BinaryOperator 0x137141e00 <col:16, col:28> 'int' contains-errors '=='
    | | |   |-ImplicitCastExpr 0x137141de8 <col:16, col:23> 'int' contains-errors <IntegralCast>
    | | |   | `-ImplicitCastExpr 0x137141dd0 <col:16, col:23> 'char' contains-errors <LValueToRValue>
    | | |   |   `-ArraySubscriptExpr 0x137141d98 <col:16, col:23> 'const char' contains-errors lvalue
    | | |   |     |-ImplicitCastExpr 0x137141d80 <col:16> 'const char *' contains-errors <LValueToRValue>
    | | |   |     | `-DeclRefExpr 0x137141d40 <col:16> 'const char *' contains-errors lvalue Var 0x137128590 'ftype' 'const char *'
    | | |   |     `-IntegerLiteral 0x137141d60 <col:22> 'int' 3
    | | |   `-CharacterLiteral 0x137141db8 <col:28> 'int' 104
    | | `-BinaryOperator 0x137141eb0 <col:35, col:45> 'int' '=='
    | |   |-UnaryOperator 0x137141e78 <col:35, col:37> 'int' prefix '--'
    | |   | `-DeclRefExpr 0x137141e58 <col:37> 'int' lvalue ParmVar 0x137128228 'narg' 'int'
    | |   `-IntegerLiteral 0x137141e90 <col:45> 'int' 0
    | |-BinaryOperator 0x137142298 <line:9:5, col:62> 'const char *' contains-errors '='
    | | |-DeclRefExpr 0x137141ef0 <col:5> 'const char *' lvalue ParmVar 0x1371282a8 'msg' 'const char *'
    | | `-CallExpr 0x137142258 <col:11, col:62> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x137141ff0 <col:11> 'int ()' Function 0x137141f38 'lj_str_pushf' 'int ()'
    | |   |-RecoveryExpr 0x137142010 <col:24> '<dependent type>' contains-errors lvalue
    | |   |-CallExpr 0x137142230 <col:27, col:49> '<dependent type>' contains-errors
    | |   | |-DeclRefExpr 0x137142110 <col:27> 'int ()' Function 0x137142058 'err2msg' 'int ()'
    | |   | `-RecoveryExpr 0x137142210 <col:35> '<dependent type>' contains-errors lvalue
    | |   |-DeclRefExpr 0x137142170 <col:52> 'const char *' lvalue Var 0x137128468 'fname' 'const char *'
    | |   `-DeclRefExpr 0x137142190 <col:59> 'const char *' lvalue ParmVar 0x1371282a8 'msg' 'const char *'
    | `-BinaryOperator 0x1371424d0 <line:11:5, col:67> 'const char *' contains-errors '='
    |   |-DeclRefExpr 0x1371422b8 <col:5> 'const char *' lvalue ParmVar 0x1371282a8 'msg' 'const char *'
    |   `-CallExpr 0x137142488 <col:11, col:67> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x1371422d8 <col:11> 'int ()' Function 0x137141f38 'lj_str_pushf' 'int ()'
    |     |-RecoveryExpr 0x1371422f8 <col:24> '<dependent type>' contains-errors lvalue
    |     |-CallExpr 0x137142460 <col:27, col:48> '<dependent type>' contains-errors
    |     | |-DeclRefExpr 0x137142318 <col:27> 'int ()' Function 0x137142058 'err2msg' 'int ()'
    |     | `-RecoveryExpr 0x137142440 <col:35> '<dependent type>' contains-errors lvalue
    |     |-DeclRefExpr 0x137142378 <col:51> 'int' lvalue ParmVar 0x137128228 'narg' 'int'
    |     |-DeclRefExpr 0x137142398 <col:57> 'const char *' lvalue Var 0x137128468 'fname' 'const char *'
    |     `-DeclRefExpr 0x1371423b8 <col:64> 'const char *' lvalue ParmVar 0x1371282a8 'msg' 'const char *'
    `-CallExpr 0x137142660 <line:12:3, col:26> '<dependent type>' contains-errors
      |-DeclRefExpr 0x137142600 <col:3> 'int ()' Function 0x137142548 'lj_err_callermsg' 'int ()'
      |-RecoveryExpr 0x137142620 <col:20> '<dependent type>' contains-errors lvalue
      `-DeclRefExpr 0x137142640 <col:23> 'const char *' lvalue ParmVar 0x1371282a8 'msg' 'const char *'
