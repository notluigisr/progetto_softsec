`-FunctionDecl 0x13680de88  line:1:12 referenced invalid php_stream_temp_close 'int (int *, int)' static
  |-ParmVarDecl 0x13680dd28 <col:34, col:46> col:46 invalid stream 'int *'
  |-ParmVarDecl 0x13680dda8 <col:54, col:58> col:58 used close_handle 'int'
  `-CompoundStmt 0x1368281d0 <line:2:1, line:21:1>
    |-DeclStmt 0x13680e078 <line:4:2, col:9>
    | `-VarDecl 0x13680e010 <col:2, col:6> col:6 used ret 'int'
    |-CallExpr 0x13680e2e8 <line:6:2, col:19> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x13680e1f0 <col:2> 'int ()' Function 0x13680e138 'assert' 'int ()'
    | `-BinaryOperator 0x13680e2c8 <col:9, col:15> 'int' contains-errors '!='
    |   |-RecoveryExpr 0x13680e288 <col:9> '<dependent type>' contains-errors lvalue
    |   `-RecoveryExpr 0x13680e2a8 <col:15> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x136827c88 <line:8:2, line:12:2> has_else
    | |-CXXDependentScopeMemberExpr 0x13680e390 <line:8:6, col:10> '<dependent type>' contains-errors lvalue ->innerstream
    | | `-RecoveryExpr 0x13680e370 <col:6> '<dependent type>' contains-errors lvalue
    | |-CompoundStmt 0x136827c00 <col:23, line:10:2>
    | `-CompoundStmt 0x136827c70 <col:9, line:12:2>
    |   `-BinaryOperator 0x136827c50 <line:11:3, col:9> 'int' '='
    |     |-DeclRefExpr 0x136827c10 <col:3> 'int' lvalue Var 0x13680e010 'ret' 'int'
    |     `-IntegerLiteral 0x136827c30 <col:9> 'int' 0
    |-IfStmt 0x136827fe0 <line:14:2, line:16:2>
    | |-CXXDependentScopeMemberExpr 0x136827d38 <line:14:6, col:10> '<dependent type>' contains-errors lvalue ->meta
    | | `-RecoveryExpr 0x136827d18 <col:6> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x136827fc8 <col:16, line:16:2>
    |   `-CallExpr 0x136827fa0 <line:15:3, col:26> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x136827e60 <col:3> 'int ()' Function 0x136827da8 'zval_ptr_dtor' 'int ()'
    |     `-UnaryOperator 0x136827f88 <col:17, col:22> '<dependent type>' contains-errors prefix '&' cannot overflow
    |       `-CXXDependentScopeMemberExpr 0x136827f40 <col:18, col:22> '<dependent type>' contains-errors lvalue ->meta
    |         `-RecoveryExpr 0x136827f20 <col:18> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x136828160 <line:18:2, col:10> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x1368280e0 <col:2> 'int ()' Function 0x136828028 'efree' 'int ()'
    | `-RecoveryExpr 0x136828140 <col:8> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x1368281c0 <line:20:2, col:9>
      `-ImplicitCastExpr 0x1368281a8 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x136828188 <col:9> 'int' lvalue Var 0x13680e010 'ret' 'int'
