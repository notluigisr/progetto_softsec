`-FunctionDecl 0x124928238  line:1:1 SPL_METHOD 'int (int, int)'
  |-ParmVarDecl 0x124928158 <col:12> col:12 SplFileObject 'int'
  |-ParmVarDecl 0x1249280d8 <col:27> col:27 setCsvControl 'int'
  `-CompoundStmt 0x125009c28 <line:2:1, line:39:1>
    |-DeclStmt 0x124928598 <line:4:2, col:52>
    | |-VarDecl 0x124928390 <col:2, col:19> col:7 used delimiter 'char' cinit
    | | `-ImplicitCastExpr 0x124928410 <col:19> 'char' <IntegralCast>
    | |   `-CharacterLiteral 0x1249283f8 <col:19> 'int' 44
    | |-VarDecl 0x124928438 <col:2, col:36> col:24 used enclosure 'char' cinit
    | | `-ImplicitCastExpr 0x1249284b8 <col:36> 'char' <IntegralCast>
    | |   `-CharacterLiteral 0x1249284a0 <col:36> 'int' 34
    | `-VarDecl 0x1249284e0 <col:2, col:48> col:41 used escape 'char' cinit
    |   `-ImplicitCastExpr 0x124928560 <col:48> 'char' <IntegralCast>
    |     `-CharacterLiteral 0x124928548 <col:48> 'int' 92
    |-DeclStmt 0x125008e00 <line:5:2, col:48>
    | |-VarDecl 0x1249285c8 <col:2, col:16> col:8 used delim 'char *' cinit
    | | `-RecoveryExpr 0x124928648 <col:16> '<dependent type>' contains-errors lvalue
    | |-VarDecl 0x124928680 <col:2, col:31> col:23 used enclo 'char *' cinit
    | | `-RecoveryExpr 0x124928700 <col:31> '<dependent type>' contains-errors lvalue
    | `-VarDecl 0x124928738 <col:2, col:44> col:38 used esc 'char *' cinit
    |   `-RecoveryExpr 0x1249287b8 <col:44> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x125009018 <line:6:2, col:39>
    | |-VarDecl 0x125008e30 <col:2, col:14> col:6 used d_len 'int' cinit
    | | `-IntegerLiteral 0x125008e98 <col:14> 'int' 0
    | |-VarDecl 0x125008ed0 <col:2, col:25> col:17 used e_len 'int' cinit
    | | `-IntegerLiteral 0x125008f38 <col:25> 'int' 0
    | `-VarDecl 0x125008f70 <col:2, col:38> col:28 used esc_len 'int' cinit
    |   `-IntegerLiteral 0x125008fd8 <col:38> 'int' 0
    `-IfStmt 0x125009c08 <line:8:2, line:38:2>
      |-RecoveryExpr 0x1250092e0 <line:8:6, col:113> '_Bool' contains-errors
      `-CompoundStmt 0x125009bf0 <col:122, line:38:2>
        `-SwitchStmt 0x125009358 <line:9:3, line:34:3>
          |-CallExpr 0x125009338 <line:9:10, col:24> 'int'
          | `-ImplicitCastExpr 0x125009320 <col:10> 'int (*)()' <FunctionToPointerDecay>
          |   `-DeclRefExpr 0x125009300 <col:10> 'int ()' Function 0x125009188 'ZEND_NUM_ARGS' 'int ()'
          `-CompoundStmt 0x125009b48 <line:10:3, line:34:3>
            |-CaseStmt 0x1250093b8 <line:11:3, line:15:4>
            | |-ConstantExpr 0x1250093a0 <line:11:8> 'int'
            | | `-IntegerLiteral 0x125009380 <col:8> 'int' 3
            | `-IfStmt 0x125009580 <line:12:4, line:15:4>
            |   |-BinaryOperator 0x125009438 <line:12:8, col:19> 'int' '!='
            |   | |-ImplicitCastExpr 0x125009420 <col:8> 'int' <LValueToRValue>
            |   | | `-DeclRefExpr 0x1250093e0 <col:8> 'int' lvalue Var 0x125008f70 'esc_len' 'int'
            |   | `-IntegerLiteral 0x125009400 <col:19> 'int' 1
            |   `-CompoundStmt 0x125009570 <col:22, line:15:4>
            |-BinaryOperator 0x125009650 <line:16:4, col:18> 'char' contains-errors '='
            | |-DeclRefExpr 0x1250095a0 <col:4> 'char' lvalue Var 0x1249284e0 'escape' 'char'
            | `-ImplicitCastExpr 0x125009638 <col:13, col:18> 'char' contains-errors <LValueToRValue>
            |   `-ArraySubscriptExpr 0x125009618 <col:13, col:18> 'char' contains-errors lvalue
            |     |-ImplicitCastExpr 0x125009600 <col:13> 'char *' contains-errors <LValueToRValue>
            |     | `-DeclRefExpr 0x1250095c0 <col:13> 'char *' contains-errors lvalue Var 0x124928738 'esc' 'char *'
            |     `-IntegerLiteral 0x1250095e0 <col:17> 'int' 0
            |-CaseStmt 0x1250096a8 <line:18:3, line:22:4>
            | |-ConstantExpr 0x125009690 <line:18:8> 'int'
            | | `-IntegerLiteral 0x125009670 <col:8> 'int' 2
            | `-IfStmt 0x125009790 <line:19:4, line:22:4>
            |   |-BinaryOperator 0x125009728 <line:19:8, col:17> 'int' '!='
            |   | |-ImplicitCastExpr 0x125009710 <col:8> 'int' <LValueToRValue>
            |   | | `-DeclRefExpr 0x1250096d0 <col:8> 'int' lvalue Var 0x125008ed0 'e_len' 'int'
            |   | `-IntegerLiteral 0x1250096f0 <col:17> 'int' 1
            |   `-CompoundStmt 0x125009780 <col:20, line:22:4>
            |-BinaryOperator 0x125009860 <line:23:4, col:23> 'char' contains-errors '='
            | |-DeclRefExpr 0x1250097b0 <col:4> 'char' lvalue Var 0x124928438 'enclosure' 'char'
            | `-ImplicitCastExpr 0x125009848 <col:16, col:23> 'char' contains-errors <LValueToRValue>
            |   `-ArraySubscriptExpr 0x125009828 <col:16, col:23> 'char' contains-errors lvalue
            |     |-ImplicitCastExpr 0x125009810 <col:16> 'char *' contains-errors <LValueToRValue>
            |     | `-DeclRefExpr 0x1250097d0 <col:16> 'char *' contains-errors lvalue Var 0x124928680 'enclo' 'char *'
            |     `-IntegerLiteral 0x1250097f0 <col:22> 'int' 0
            |-CaseStmt 0x1250098b8 <line:25:3, line:29:4>
            | |-ConstantExpr 0x1250098a0 <line:25:8> 'int'
            | | `-IntegerLiteral 0x125009880 <col:8> 'int' 1
            | `-IfStmt 0x1250099f0 <line:26:4, line:29:4>
            |   |-BinaryOperator 0x125009938 <line:26:8, col:17> 'int' '!='
            |   | |-ImplicitCastExpr 0x125009920 <col:8> 'int' <LValueToRValue>
            |   | | `-DeclRefExpr 0x1250098e0 <col:8> 'int' lvalue Var 0x125008e30 'd_len' 'int'
            |   | `-IntegerLiteral 0x125009900 <col:17> 'int' 1
            |   `-CompoundStmt 0x1250099e0 <col:20, line:29:4>
            |-BinaryOperator 0x125009ac0 <line:30:4, col:23> 'char' contains-errors '='
            | |-DeclRefExpr 0x125009a10 <col:4> 'char' lvalue Var 0x124928390 'delimiter' 'char'
            | `-ImplicitCastExpr 0x125009aa8 <col:16, col:23> 'char' contains-errors <LValueToRValue>
            |   `-ArraySubscriptExpr 0x125009a88 <col:16, col:23> 'char' contains-errors lvalue
            |     |-ImplicitCastExpr 0x125009a70 <col:16> 'char *' contains-errors <LValueToRValue>
            |     | `-DeclRefExpr 0x125009a30 <col:16> 'char *' contains-errors lvalue Var 0x1249285c8 'delim' 'char *'
            |     `-IntegerLiteral 0x125009a50 <col:22> 'int' 0
            `-CaseStmt 0x125009b18 <line:32:3, line:33:4>
              |-ConstantExpr 0x125009b00 <line:32:8> 'int'
              | `-IntegerLiteral 0x125009ae0 <col:8> 'int' 0
              `-BreakStmt 0x125009b40 <line:33:4>
