`-FunctionDecl 0x14b80de58  line:1:16 invalid gcd 'int (int, int)' static
  |-ParmVarDecl 0x14b80dcf0 <col:20, col:24> col:24 used a 'int'
  |-ParmVarDecl 0x14b80dd70 <col:27, col:31> col:31 used b 'int'
  `-CompoundStmt 0x14b827f00 <line:2:1, line:19:1>
    |-IfStmt 0x14b80e068 <line:3:3, line:5:3>
    | |-BinaryOperator 0x14b80e000 <line:3:7, col:22> 'int' '&&'
    | | |-BinaryOperator 0x14b80df68 <col:7, col:12> 'int' '=='
    | | | |-ImplicitCastExpr 0x14b80df50 <col:7> 'int' <LValueToRValue>
    | | | | `-DeclRefExpr 0x14b80df10 <col:7> 'int' lvalue ParmVar 0x14b80dcf0 'a' 'int'
    | | | `-IntegerLiteral 0x14b80df30 <col:12> 'int' 0
    | | `-BinaryOperator 0x14b80dfe0 <col:17, col:22> 'int' '=='
    | |   |-ImplicitCastExpr 0x14b80dfc8 <col:17> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x14b80df88 <col:17> 'int' lvalue ParmVar 0x14b80dd70 'b' 'int'
    | |   `-IntegerLiteral 0x14b80dfa8 <col:22> 'int' 0
    | `-CompoundStmt 0x14b80e050 <col:25, line:5:3>
    |   `-ReturnStmt 0x14b80e040 <line:4:5, col:12>
    |     `-IntegerLiteral 0x14b80e020 <col:12> 'int' 1
    |-IfStmt 0x14b80e148 <line:7:3, col:22>
    | |-BinaryOperator 0x14b80e0e0 <col:7, col:12> 'int' '=='
    | | |-ImplicitCastExpr 0x14b80e0c8 <col:7> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14b80e088 <col:7> 'int' lvalue ParmVar 0x14b80dcf0 'a' 'int'
    | | `-IntegerLiteral 0x14b80e0a8 <col:12> 'int' 0
    | `-ReturnStmt 0x14b80e138 <col:15, col:22>
    |   `-ImplicitCastExpr 0x14b80e120 <col:22> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x14b80e100 <col:22> 'int' lvalue ParmVar 0x14b80dd70 'b' 'int'
    |-IfStmt 0x14b80e228 <line:8:3, col:22>
    | |-BinaryOperator 0x14b80e1c0 <col:7, col:12> 'int' '=='
    | | |-ImplicitCastExpr 0x14b80e1a8 <col:7> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14b80e168 <col:7> 'int' lvalue ParmVar 0x14b80dd70 'b' 'int'
    | | `-IntegerLiteral 0x14b80e188 <col:12> 'int' 0
    | `-ReturnStmt 0x14b80e218 <col:15, col:22>
    |   `-ImplicitCastExpr 0x14b80e200 <col:22> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x14b80e1e0 <col:22> 'int' lvalue ParmVar 0x14b80dcf0 'a' 'int'
    |-DoStmt 0x14b827e98 <line:12:3, line:16:18>
    | |-CompoundStmt 0x14b827e00 <line:12:6, line:16:3>
    | | |-BinaryOperator 0x14b80e330 <line:14:5, col:9> 'int' '='
    | | | |-DeclRefExpr 0x14b80e2d8 <col:5> 'int' lvalue ParmVar 0x14b80dcf0 'a' 'int'
    | | | `-ImplicitCastExpr 0x14b80e318 <col:9> 'int' <LValueToRValue>
    | | |   `-DeclRefExpr 0x14b80e2f8 <col:9> 'int' lvalue ParmVar 0x14b80dd70 'b' 'int'
    | | `-BinaryOperator 0x14b80e3c8 <line:15:5, col:9> 'int' contains-errors '='
    | |   |-DeclRefExpr 0x14b80e350 <col:5> 'int' lvalue ParmVar 0x14b80dd70 'b' 'int'
    | |   `-RecoveryExpr 0x14b80e3a8 <col:9> '<dependent type>' contains-errors lvalue
    | `-BinaryOperator 0x14b827e78 <line:16:12, col:17> 'int' '!='
    |   |-ImplicitCastExpr 0x14b827e60 <col:12> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x14b827e20 <col:12> 'int' lvalue ParmVar 0x14b80dd70 'b' 'int'
    |   `-IntegerLiteral 0x14b827e40 <col:17> 'int' 0
    `-ReturnStmt 0x14b827ef0 <line:18:3, col:10>
      `-ImplicitCastExpr 0x14b827ed8 <col:10> 'int' <LValueToRValue>
        `-DeclRefExpr 0x14b827eb8 <col:10> 'int' lvalue ParmVar 0x14b80dcf0 'a' 'int'
