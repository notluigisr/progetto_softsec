`-FunctionDecl 0x12480ddc8  line:1:12 invalid jpc_calcssmant 'int (int)' static
  |-ParmVarDecl 0x12480dcf0 <col:27, col:37> col:37 invalid stepsize 'int'
  `-CompoundStmt 0x124827c30 <line:2:1, line:15:1>
    |-DeclStmt 0x12480def8 <line:3:2, col:7>
    | `-VarDecl 0x12480de90 <col:2, col:6> col:6 used n 'int'
    |-DeclStmt 0x12480df90 <line:4:2, col:7>
    | `-VarDecl 0x12480df28 <col:2, col:6> col:6 used e 'int'
    |-DeclStmt 0x12480e028 <line:5:2, col:7>
    | `-VarDecl 0x12480dfc0 <col:2, col:6> col:6 used m 'int'
    |-BinaryOperator 0x12480e228 <line:7:2, col:27> 'int' contains-errors '='
    | |-DeclRefExpr 0x12480e040 <col:2> 'int' lvalue Var 0x12480de90 'n' 'int'
    | `-CallExpr 0x12480e200 <col:6, col:27> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x12480e1c0 <col:6> 'int ()' Function 0x12480e108 'jpc_firstone' 'int ()'
    |   `-RecoveryExpr 0x12480e1e0 <col:19> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x12480e320 <line:8:2, col:10> 'int' contains-errors '='
    | |-DeclRefExpr 0x12480e248 <col:2> 'int' lvalue Var 0x12480df28 'e' 'int'
    | `-BinaryOperator 0x12480e300 <col:6, col:10> '<dependent type>' contains-errors '-'
    |   |-DeclRefExpr 0x12480e268 <col:6> 'int' lvalue Var 0x12480de90 'n' 'int'
    |   `-RecoveryExpr 0x12480e2e0 <col:10> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x124827bb8 <line:9:2, line:13:2> has_else
    | |-BinaryOperator 0x12480e398 <line:9:6, col:11> 'int' '>='
    | | |-ImplicitCastExpr 0x12480e380 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x12480e340 <col:6> 'int' lvalue Var 0x12480de90 'n' 'int'
    | | `-IntegerLiteral 0x12480e360 <col:11> 'int' 11
    | |-CompoundStmt 0x124827938 <col:15, line:11:2>
    | | `-BinaryOperator 0x124827918 <line:10:3, col:32> 'int' contains-errors '='
    | |   |-DeclRefExpr 0x12480e3b8 <col:3> 'int' lvalue Var 0x12480dfc0 'm' 'int'
    | |   `-BinaryOperator 0x1248278f8 <col:7, col:32> '<dependent type>' contains-errors '&'
    | |     |-ParenExpr 0x1248278b8 <col:7, col:28> '<dependent type>' contains-errors
    | |     | `-BinaryOperator 0x124827898 <col:8, col:27> '<dependent type>' contains-errors '>>'
    | |     |   |-RecoveryExpr 0x12480e3d8 <col:8> '<dependent type>' contains-errors lvalue
    | |     |   `-ParenExpr 0x124827878 <col:20, col:27> 'int'
    | |     |     `-BinaryOperator 0x124827858 <col:21, col:25> 'int' '-'
    | |     |       |-ImplicitCastExpr 0x124827840 <col:21> 'int' <LValueToRValue>
    | |     |       | `-DeclRefExpr 0x124827800 <col:21> 'int' lvalue Var 0x12480de90 'n' 'int'
    | |     |       `-IntegerLiteral 0x124827820 <col:25> 'int' 11
    | |     `-IntegerLiteral 0x1248278d8 <col:32> 'int' 2047
    | `-CompoundStmt 0x124827ba0 <line:11:9, line:13:2>
    |   `-BinaryOperator 0x124827b80 <line:12:3, col:45> 'int' contains-errors '='
    |     |-DeclRefExpr 0x124827950 <col:3> 'int' lvalue Var 0x12480dfc0 'm' 'int'
    |     `-BinaryOperator 0x124827b60 <col:7, col:45> '<dependent type>' contains-errors '<<'
    |       |-ParenExpr 0x124827aa8 <col:7, col:33> '<dependent type>' contains-errors
    |       | `-BinaryOperator 0x124827a88 <col:8, col:32> '<dependent type>' contains-errors '&'
    |       |   |-RecoveryExpr 0x124827970 <col:8> '<dependent type>' contains-errors lvalue
    |       |   `-ParenExpr 0x124827a68 <col:19, col:32> 'int'
    |       |     `-BinaryOperator 0x124827a48 <col:20, col:31> 'int' '-'
    |       |       |-ParenExpr 0x124827a08 <col:20, col:27> 'int'
    |       |       | `-BinaryOperator 0x1248279e8 <col:21, col:26> 'int' '<<'
    |       |       |   |-IntegerLiteral 0x124827990 <col:21> 'int' 1
    |       |       |   `-ImplicitCastExpr 0x1248279d0 <col:26> 'int' <LValueToRValue>
    |       |       |     `-DeclRefExpr 0x1248279b0 <col:26> 'int' lvalue Var 0x12480de90 'n' 'int'
    |       |       `-IntegerLiteral 0x124827a28 <col:31> 'int' 1
    |       `-ParenExpr 0x124827b40 <col:38, col:45> 'int'
    |         `-BinaryOperator 0x124827b20 <col:39, col:44> 'int' '-'
    |           |-IntegerLiteral 0x124827ac8 <col:39> 'int' 11
    |           `-ImplicitCastExpr 0x124827b08 <col:44> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x124827ae8 <col:44> 'int' lvalue Var 0x12480de90 'n' 'int'
    `-ReturnStmt 0x124827c20 <line:14:2, col:9>
      `-ImplicitCastExpr 0x124827c08 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x124827be8 <col:9> 'int' lvalue Var 0x12480dfc0 'm' 'int'
