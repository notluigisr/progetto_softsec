`-FunctionDecl 0x15900dda8  line:1:12 mg_b64idx 'int (int)' static
  |-ParmVarDecl 0x15900dcd8 <col:22, col:26> col:26 used c 'int'
  `-CompoundStmt 0x15900e3e0 <col:29, line:11:1>
    `-IfStmt 0x15900e3b0 <line:2:3, line:10:3> has_else
      |-BinaryOperator 0x15900def8 <line:2:7, col:11> 'int' '<'
      | |-ImplicitCastExpr 0x15900dee0 <col:7> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x15900dea0 <col:7> 'int' lvalue ParmVar 0x15900dcd8 'c' 'int'
      | `-IntegerLiteral 0x15900dec0 <col:11> 'int' 26
      |-CompoundStmt 0x15900df98 <col:15, line:4:3>
      | `-ReturnStmt 0x15900df88 <line:3:5, col:16>
      |   `-BinaryOperator 0x15900df68 <col:12, col:16> 'int' '+'
      |     |-ImplicitCastExpr 0x15900df50 <col:12> 'int' <LValueToRValue>
      |     | `-DeclRefExpr 0x15900df18 <col:12> 'int' lvalue ParmVar 0x15900dcd8 'c' 'int'
      |     `-CharacterLiteral 0x15900df38 <col:16> 'int' 65
      `-IfStmt 0x15900e380 <line:4:10, line:10:3> has_else
        |-BinaryOperator 0x15900e008 <line:4:14, col:18> 'int' '<'
        | |-ImplicitCastExpr 0x15900dff0 <col:14> 'int' <LValueToRValue>
        | | `-DeclRefExpr 0x15900dfb0 <col:14> 'int' lvalue ParmVar 0x15900dcd8 'c' 'int'
        | `-IntegerLiteral 0x15900dfd0 <col:18> 'int' 52
        |-CompoundStmt 0x15900e0e8 <col:22, line:6:3>
        | `-ReturnStmt 0x15900e0d8 <line:5:5, col:21>
        |   `-BinaryOperator 0x15900e0b8 <col:12, col:21> 'int' '+'
        |     |-BinaryOperator 0x15900e080 <col:12, col:16> 'int' '-'
        |     | |-ImplicitCastExpr 0x15900e068 <col:12> 'int' <LValueToRValue>
        |     | | `-DeclRefExpr 0x15900e028 <col:12> 'int' lvalue ParmVar 0x15900dcd8 'c' 'int'
        |     | `-IntegerLiteral 0x15900e048 <col:16> 'int' 26
        |     `-CharacterLiteral 0x15900e0a0 <col:21> 'int' 97
        `-IfStmt 0x15900e350 <line:6:10, line:10:3> has_else
          |-BinaryOperator 0x15900e158 <line:6:14, col:18> 'int' '<'
          | |-ImplicitCastExpr 0x15900e140 <col:14> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x15900e100 <col:14> 'int' lvalue ParmVar 0x15900dcd8 'c' 'int'
          | `-IntegerLiteral 0x15900e120 <col:18> 'int' 62
          |-CompoundStmt 0x15900e238 <col:22, line:8:3>
          | `-ReturnStmt 0x15900e228 <line:7:5, col:21>
          |   `-BinaryOperator 0x15900e208 <col:12, col:21> 'int' '+'
          |     |-BinaryOperator 0x15900e1d0 <col:12, col:16> 'int' '-'
          |     | |-ImplicitCastExpr 0x15900e1b8 <col:12> 'int' <LValueToRValue>
          |     | | `-DeclRefExpr 0x15900e178 <col:12> 'int' lvalue ParmVar 0x15900dcd8 'c' 'int'
          |     | `-IntegerLiteral 0x15900e198 <col:16> 'int' 52
          |     `-CharacterLiteral 0x15900e1f0 <col:21> 'int' 48
          `-CompoundStmt 0x15900e338 <line:8:10, line:10:3>
            `-ReturnStmt 0x15900e328 <line:9:5, col:28>
              `-ConditionalOperator 0x15900e2f8 <col:12, col:28> 'int'
                |-BinaryOperator 0x15900e2a8 <col:12, col:17> 'int' '=='
                | |-ImplicitCastExpr 0x15900e290 <col:12> 'int' <LValueToRValue>
                | | `-DeclRefExpr 0x15900e250 <col:12> 'int' lvalue ParmVar 0x15900dcd8 'c' 'int'
                | `-IntegerLiteral 0x15900e270 <col:17> 'int' 62
                |-CharacterLiteral 0x15900e2c8 <col:22> 'int' 43
                `-CharacterLiteral 0x15900e2e0 <col:28> 'int' 47
