`-FunctionDecl 0x15c80de38  line:1:1 fiddle_handle_sym 'int (void *, const char *)'
  |-ParmVarDecl 0x15c80dcd8 <col:19, col:25> col:25 handle 'void *'
  |-ParmVarDecl 0x15c80dd58 <col:33, col:45> col:45 used name 'const char *'
  `-CompoundStmt 0x15c8287c0 <line:2:1, line:63:1>
    |-DeclStmt 0x15c80e098 <line:9:5, col:19>
    | `-VarDecl 0x15c80e030 <col:5, col:18> col:12 used func 'void (*)()'
    |-CallExpr 0x15c80e268 <line:11:5, col:16> 'int'
    | |-ImplicitCastExpr 0x15c80e250 <col:5> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x15c80e1e0 <col:5> 'int ()' Function 0x15c80e128 'rb_secure' 'int ()'
    | `-IntegerLiteral 0x15c80e200 <col:15> 'int' 2
    |-NullStmt 0x15c80e318 <line:16:18>
    |-IfStmt 0x15c828618 <line:58:5, line:60:5>
    | |-UnaryOperator 0x15c80e358 <line:58:9, col:10> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x15c80e340 <col:10> 'void (*)()' <LValueToRValue>
    | |   `-DeclRefExpr 0x15c80e320 <col:10> 'void (*)()' lvalue Var 0x15c80e030 'func' 'void (*)()'
    | `-CompoundStmt 0x15c828600 <col:16, line:60:5>
    |   `-CallExpr 0x15c8285c8 <line:59:2, col:39> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x15c8284b8 <col:2> 'int ()' Function 0x15c828400 'rb_raise' 'int ()'
    |     |-RecoveryExpr 0x15c8285a8 <col:11> '<dependent type>' contains-errors lvalue
    |     |-StringLiteral 0x15c828530 <col:28> 'char[4]' lvalue "STR"
    |     `-DeclRefExpr 0x15c828550 <col:35> 'const char *' lvalue ParmVar 0x15c80dd58 'name' 'const char *'
    `-ReturnStmt 0x15c8287b0 <line:62:5, col:24>
      `-CallExpr 0x15c828770 <col:12, col:24> 'int'
        |-ImplicitCastExpr 0x15c828758 <col:12> 'int (*)()' <FunctionToPointerDecay>
        | `-DeclRefExpr 0x15c828718 <col:12> 'int ()' Function 0x15c828660 'PTR2NUM' 'int ()'
        `-ImplicitCastExpr 0x15c828798 <col:20> 'void (*)()' <LValueToRValue>
          `-DeclRefExpr 0x15c828738 <col:20> 'void (*)()' lvalue Var 0x15c80e030 'func' 'void (*)()'
