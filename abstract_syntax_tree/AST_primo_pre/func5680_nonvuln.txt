`-FunctionDecl 0x16000ddf8  line:1:12 invalid manager_run_generators 'int (int *)' static
  |-ParmVarDecl 0x16000dd28 <col:35, col:44> col:44 invalid m 'int *'
  `-CompoundStmt 0x160029f90 <col:47, line:43:1>
    |-DeclStmt 0x16000dfc0 <line:3:9, col:28>
    | `-VarDecl 0x16000df58 <col:9, col:27> col:21 used argv 'const char *[5]'
    |-DeclStmt 0x16000e090 <line:4:9, col:20>
    | `-VarDecl 0x16000e028 <col:9, col:16> col:16 used path 'char **'
    |-DeclStmt 0x16000e128 <line:5:9, col:14>
    | `-VarDecl 0x16000e0c0 <col:9, col:13> col:13 used r 'int'
    |-CallExpr 0x16000e2e0 <line:7:9, col:17> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x16000e2a0 <col:9> 'int ()' Function 0x16000e1e8 'assert' 'int ()'
    | `-RecoveryExpr 0x16000e2c0 <col:16> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x16000e3a0 <line:9:9, line:10:24>
    | |-CXXDependentScopeMemberExpr 0x16000e328 <line:9:13, col:16> '<dependent type>' contains-errors lvalue ->test_run
    | | `-RecoveryExpr 0x16000e308 <col:13> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x16000e390 <line:10:17, col:24>
    |   `-IntegerLiteral 0x16000e370 <col:24> 'int' 0
    |-BinaryOperator 0x160027b90 <line:12:9, col:58> 'char **' contains-errors '='
    | |-DeclRefExpr 0x16000e3c0 <col:9> 'char **' lvalue Var 0x16000e028 'path' 'char **'
    | `-CallExpr 0x160027b68 <col:17, col:58> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x160027ae0 <col:17> 'int ()' Function 0x160027a28 'generator_binary_paths' 'int ()'
    |   `-CXXDependentScopeMemberExpr 0x160027b20 <col:40, col:43> '<dependent type>' contains-errors lvalue ->unit_file_scope
    |     `-RecoveryExpr 0x160027b00 <col:40> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x160027dc8 <line:13:9, line:14:32>
    | |-UnaryOperator 0x160027c30 <line:13:13, col:14> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x160027c18 <col:14> 'char **' <LValueToRValue>
    | |   `-DeclRefExpr 0x160027bf8 <col:14> 'char **' lvalue Var 0x16000e028 'path' 'char **'
    | `-ReturnStmt 0x160027db8 <line:14:17, col:32>
    |   `-CallExpr 0x160027d98 <col:24, col:32> 'int'
    |     `-ImplicitCastExpr 0x160027d80 <col:24> 'int (*)()' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x160027d28 <col:24> 'int ()' Function 0x160027c70 'log_oom' 'int ()'
    |-CallExpr 0x160027f88 <line:17:9, col:33> 'int'
    | |-ImplicitCastExpr 0x160027f70 <col:9> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x160027ec8 <col:9> 'int ()' Function 0x160027e10 'STRV_FOREACH' 'int ()'
    | |-ImplicitCastExpr 0x160027fb8 <col:22> 'char **' <LValueToRValue>
    | | `-DeclRefExpr 0x160027ee8 <col:22> 'char **' lvalue Var 0x16000e028 'path' 'char **'
    | `-ImplicitCastExpr 0x160027fd0 <col:28> 'char **' <LValueToRValue>
    |   `-DeclRefExpr 0x160027f50 <col:28> 'char **' lvalue Var 0x16000e028 'path' 'char **'
    |-CompoundStmt 0x160028670 <col:35, line:22:9>
    | |-IfStmt 0x1600282f8 <line:18:17, line:19:30>
    | | |-BinaryOperator 0x160028270 <line:18:21, col:44> 'int' contains-errors '>='
    | | | |-CallExpr 0x160028240 <col:21, col:39> '<dependent type>' contains-errors
    | | | | |-DeclRefExpr 0x1600280c8 <col:21> 'int ()' Function 0x160028010 'access' 'int ()'
    | | | | |-UnaryOperator 0x160028208 <col:28, col:29> 'char *' lvalue prefix '*' cannot overflow
    | | | | | `-ImplicitCastExpr 0x1600281f0 <col:29> 'char **' <LValueToRValue>
    | | | | |   `-DeclRefExpr 0x1600280e8 <col:29> 'char **' lvalue Var 0x16000e028 'path' 'char **'
    | | | | `-RecoveryExpr 0x160028220 <col:35> '<dependent type>' contains-errors lvalue
    | | | `-IntegerLiteral 0x160028180 <col:44> 'int' 0
    | | `-GotoStmt 0x1600282e0 <line:19:25, col:30> 'found' 0x160028290
    | `-IfStmt 0x160028650 <line:20:17, line:21:62>
    |   |-BinaryOperator 0x1600283a8 <line:20:21, col:30> 'int' contains-errors '!='
    |   | |-RecoveryExpr 0x160028368 <col:21> '<dependent type>' contains-errors lvalue
    |   | `-RecoveryExpr 0x160028388 <col:30> '<dependent type>' contains-errors lvalue
    |   `-CallExpr 0x160028618 <line:21:25, col:62> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x1600284a8 <col:25> 'int ()' Function 0x1600283f0 'log_warning_errno' 'int ()'
    |     |-RecoveryExpr 0x1600285c8 <col:43> '<dependent type>' contains-errors lvalue
    |     |-StringLiteral 0x160028520 <col:50> 'char[4]' lvalue "STR"
    |     `-UnaryOperator 0x160028600 <col:57, col:58> 'char *' lvalue prefix '*' cannot overflow
    |       `-ImplicitCastExpr 0x1600285e8 <col:58> 'char **' <LValueToRValue>
    |         `-DeclRefExpr 0x160028540 <col:58> 'char **' lvalue Var 0x16000e028 'path' 'char **'
    |-ReturnStmt 0x1600286b0 <line:24:9, col:16>
    | `-IntegerLiteral 0x160028690 <col:16> 'int' 0
    |-LabelStmt 0x1600288a8 <line:26:2, line:27:58> 'found'
    | `-BinaryOperator 0x160028888 <col:9, col:58> 'int' contains-errors '='
    |   |-DeclRefExpr 0x1600286c0 <col:9> 'int' lvalue Var 0x16000e0c0 'r' 'int'
    |   `-CallExpr 0x160028860 <col:13, col:58> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x1600287c0 <col:13> 'int ()' Function 0x160028708 'lookup_paths_mkdir_generator' 'int ()'
    |     `-UnaryOperator 0x160028848 <col:42, col:46> '<dependent type>' contains-errors prefix '&' cannot overflow
    |       `-CXXDependentScopeMemberExpr 0x160028800 <col:43, col:46> '<dependent type>' contains-errors lvalue ->lookup_paths
    |         `-RecoveryExpr 0x1600287e0 <col:43> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x1600289a8 <line:28:9, line:29:22>
    | |-BinaryOperator 0x160028920 <line:28:13, col:17> 'int' '<'
    | | |-ImplicitCastExpr 0x160028908 <col:13> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1600288c8 <col:13> 'int' lvalue Var 0x16000e0c0 'r' 'int'
    | | `-IntegerLiteral 0x1600288e8 <col:17> 'int' 0
    | `-GotoStmt 0x160028990 <line:29:17, col:22> 'finish' 0x160028940
    |-BinaryOperator 0x160029550 <line:31:9, col:19> 'const char *' contains-errors '='
    | |-ArraySubscriptExpr 0x160029510 <col:9, col:15> 'const char *' lvalue
    | | |-ImplicitCastExpr 0x1600294f8 <col:9> 'const char **' <ArrayToPointerDecay>
    | | | `-DeclRefExpr 0x1600289c8 <col:9> 'const char *[5]' lvalue Var 0x16000df58 'argv' 'const char *[5]'
    | | `-IntegerLiteral 0x160029400 <col:14> 'int' 0
    | `-RecoveryExpr 0x160029530 <col:19> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x160029698 <line:32:9, col:35> 'const char *' contains-errors '='
    | |-ArraySubscriptExpr 0x1600295c8 <col:9, col:15> 'const char *' lvalue
    | | |-ImplicitCastExpr 0x1600295b0 <col:9> 'const char **' <ArrayToPointerDecay>
    | | | `-DeclRefExpr 0x160029570 <col:9> 'const char *[5]' lvalue Var 0x16000df58 'argv' 'const char *[5]'
    | | `-IntegerLiteral 0x160029590 <col:14> 'int' 1
    | `-CXXDependentScopeMemberExpr 0x160029650 <col:19, col:35> '<dependent type>' contains-errors lvalue .generator
    |   `-CXXDependentScopeMemberExpr 0x160029608 <col:19, col:22> '<dependent type>' contains-errors lvalue ->lookup_paths
    |     `-RecoveryExpr 0x1600295e8 <col:19> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x1600297e0 <line:33:9, col:35> 'const char *' contains-errors '='
    | |-ArraySubscriptExpr 0x160029710 <col:9, col:15> 'const char *' lvalue
    | | |-ImplicitCastExpr 0x1600296f8 <col:9> 'const char **' <ArrayToPointerDecay>
    | | | `-DeclRefExpr 0x1600296b8 <col:9> 'const char *[5]' lvalue Var 0x16000df58 'argv' 'const char *[5]'
    | | `-IntegerLiteral 0x1600296d8 <col:14> 'int' 2
    | `-CXXDependentScopeMemberExpr 0x160029798 <col:19, col:35> '<dependent type>' contains-errors lvalue .generator_early
    |   `-CXXDependentScopeMemberExpr 0x160029750 <col:19, col:22> '<dependent type>' contains-errors lvalue ->lookup_paths
    |     `-RecoveryExpr 0x160029730 <col:19> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x160029928 <line:34:9, col:35> 'const char *' contains-errors '='
    | |-ArraySubscriptExpr 0x160029858 <col:9, col:15> 'const char *' lvalue
    | | |-ImplicitCastExpr 0x160029840 <col:9> 'const char **' <ArrayToPointerDecay>
    | | | `-DeclRefExpr 0x160029800 <col:9> 'const char *[5]' lvalue Var 0x16000df58 'argv' 'const char *[5]'
    | | `-IntegerLiteral 0x160029820 <col:14> 'int' 3
    | `-CXXDependentScopeMemberExpr 0x1600298e0 <col:19, col:35> '<dependent type>' contains-errors lvalue .generator_late
    |   `-CXXDependentScopeMemberExpr 0x160029898 <col:19, col:22> '<dependent type>' contains-errors lvalue ->lookup_paths
    |     `-RecoveryExpr 0x160029878 <col:19> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x160029a88 <line:35:9, col:19> 'const char *' contains-errors '='
    | |-ArraySubscriptExpr 0x160029a48 <col:9, col:15> 'const char *' lvalue
    | | |-ImplicitCastExpr 0x160029a30 <col:9> 'const char **' <ArrayToPointerDecay>
    | | | `-DeclRefExpr 0x160029948 <col:9> 'const char *[5]' lvalue Var 0x16000df58 'argv' 'const char *[5]'
    | | `-IntegerLiteral 0x160029968 <col:14> 'int' 4
    | `-RecoveryExpr 0x160029a68 <col:19> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x160029be0 <line:37:9, col:28> 'int'
    | |-ImplicitCastExpr 0x160029bc8 <col:9> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x160029b88 <col:9> 'int ()' Function 0x160029ad0 'RUN_WITH_UMASK' 'int ()'
    | `-IntegerLiteral 0x160029ba8 <col:24> 'int' 18
    |-LabelStmt 0x160029f28 <line:40:1, line:41:53> 'finish'
    | `-CallExpr 0x160029f00 <col:9, col:53> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x160029e60 <col:9> 'int ()' Function 0x160029da8 'lookup_paths_trim_generator' 'int ()'
    |   `-UnaryOperator 0x160029ee8 <col:37, col:41> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-CXXDependentScopeMemberExpr 0x160029ea0 <col:38, col:41> '<dependent type>' contains-errors lvalue ->lookup_paths
    |       `-RecoveryExpr 0x160029e80 <col:38> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x160029f80 <line:42:9, col:16>
      `-ImplicitCastExpr 0x160029f68 <col:16> 'int' <LValueToRValue>
        `-DeclRefExpr 0x160029f48 <col:16> 'int' lvalue Var 0x16000e0c0 'r' 'int'
