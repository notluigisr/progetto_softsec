`-FunctionDecl 0x12a00de80  line:1:13 invalid vmxnet3_update_interrupt_line_state 'void (int *, int)' static
  |-ParmVarDecl 0x12a00dd28 <col:49, col:63> col:63 referenced invalid s 'int *'
  |-ParmVarDecl 0x12a00dda8 <col:66, col:70> col:70 used lidx 'int'
  `-CompoundStmt 0x12a028d70 <line:2:1, line:20:1>
    |-IfStmt 0x12a027818 <line:3:5, line:9:5>
    | |-BinaryOperator 0x12a00e1a8 <line:3:9, line:4:34> 'int' contains-errors '&&'
    | | |-UnaryOperator 0x12a00e070 <line:3:9, col:36> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | | `-ImplicitCastExpr 0x12a00e058 <col:10, col:36> '<dependent type>' contains-errors <LValueToRValue>
    | | |   `-CXXDependentScopeMemberExpr 0x12a00e010 <col:10, col:36> '<dependent type>' contains-errors lvalue .is_pending
    | | |     `-ArraySubscriptExpr 0x12a00dff0 <col:10, col:34> '<dependent type>' contains-errors lvalue
    | | |       |-ImplicitCastExpr 0x12a00dfc0 <col:10, col:13> '<dependent type>' contains-errors <LValueToRValue>
    | | |       | `-CXXDependentScopeMemberExpr 0x12a00df58 <col:10, col:13> '<dependent type>' contains-errors lvalue ->interrupt_states
    | | |       |   `-RecoveryExpr 0x12a00df38 <col:10> '<dependent type>' contains-errors lvalue
    | | |       `-ImplicitCastExpr 0x12a00dfd8 <col:30> 'int' <LValueToRValue>
    | | |         `-DeclRefExpr 0x12a00dfa0 <col:30> 'int' lvalue ParmVar 0x12a00dda8 'lidx' 'int'
    | | `-CXXDependentScopeMemberExpr 0x12a00e160 <line:4:8, col:34> '<dependent type>' contains-errors lvalue .is_asserted
    | |   `-ArraySubscriptExpr 0x12a00e140 <col:8, col:32> '<dependent type>' contains-errors lvalue
    | |     |-ImplicitCastExpr 0x12a00e110 <col:8, col:11> '<dependent type>' contains-errors <LValueToRValue>
    | |     | `-CXXDependentScopeMemberExpr 0x12a00e0a8 <col:8, col:11> '<dependent type>' contains-errors lvalue ->interrupt_states
    | |     |   `-RecoveryExpr 0x12a00e088 <col:8> '<dependent type>' contains-errors lvalue
    | |     `-ImplicitCastExpr 0x12a00e128 <col:28> 'int' <LValueToRValue>
    | |       `-DeclRefExpr 0x12a00e0f0 <col:28> 'int' lvalue ParmVar 0x12a00dda8 'lidx' 'int'
    | `-CompoundStmt 0x12a0277f0 <col:47, line:9:5>
    |   |-CallExpr 0x12a027418 <line:5:9, col:30> 'int'
    |   | |-ImplicitCastExpr 0x12a027400 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x12a00e320 <col:9> 'int ()' Function 0x12a00e268 'VMW_IRPRN' 'int ()'
    |   | |-ImplicitCastExpr 0x12a027448 <col:19> 'char *' <ArrayToPointerDecay>
    |   | | `-StringLiteral 0x12a00e380 <col:19> 'char[4]' lvalue "STR"
    |   | `-ImplicitCastExpr 0x12a027460 <col:26> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x12a00e3a0 <col:26> 'int' lvalue ParmVar 0x12a00dda8 'lidx' 'int'
    |   |-CallExpr 0x12a0275b8 <line:6:9, col:49> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x12a027558 <col:9> 'int ()' Function 0x12a0274a0 '_vmxnet3_deassert_interrupt_line' 'int ()'
    |   | |-RecoveryExpr 0x12a027578 <col:42> '<dependent type>' contains-errors lvalue
    |   | `-DeclRefExpr 0x12a027598 <col:45> 'int' lvalue ParmVar 0x12a00dda8 'lidx' 'int'
    |   `-ReturnStmt 0x12a0277e0 <line:8:9>
    `-IfStmt 0x12a028d50 <line:11:5, line:19:5>
      |-BinaryOperator 0x12a027e80 <line:11:9, line:13:35> 'int' contains-errors '&&'
      | |-BinaryOperator 0x12a027d98 <line:11:9, line:12:35> 'int' contains-errors '&&'
      | | |-CXXDependentScopeMemberExpr 0x12a027c88 <line:11:9, col:35> '<dependent type>' contains-errors lvalue .is_pending
      | | | `-ArraySubscriptExpr 0x12a027c68 <col:9, col:33> '<dependent type>' contains-errors lvalue
      | | |   |-ImplicitCastExpr 0x12a027c38 <col:9, col:12> '<dependent type>' contains-errors <LValueToRValue>
      | | |   | `-CXXDependentScopeMemberExpr 0x12a027858 <col:9, col:12> '<dependent type>' contains-errors lvalue ->interrupt_states
      | | |   |   `-RecoveryExpr 0x12a027838 <col:9> '<dependent type>' contains-errors lvalue
      | | |   `-ImplicitCastExpr 0x12a027c50 <col:29> 'int' <LValueToRValue>
      | | |     `-DeclRefExpr 0x12a0278a0 <col:29> 'int' lvalue ParmVar 0x12a00dda8 'lidx' 'int'
      | | `-UnaryOperator 0x12a027d80 <line:12:8, col:35> '<dependent type>' contains-errors prefix '!' cannot overflow
      | |   `-ImplicitCastExpr 0x12a027d68 <col:9, col:35> '<dependent type>' contains-errors <LValueToRValue>
      | |     `-CXXDependentScopeMemberExpr 0x12a027d20 <col:9, col:35> '<dependent type>' contains-errors lvalue .is_masked
      | |       `-ArraySubscriptExpr 0x12a027d00 <col:9, col:33> '<dependent type>' contains-errors lvalue
      | |         |-ImplicitCastExpr 0x12a027cd0 <col:9, col:12> '<dependent type>' contains-errors <LValueToRValue>
      | |         | `-CXXDependentScopeMemberExpr 0x12a027978 <col:9, col:12> '<dependent type>' contains-errors lvalue ->interrupt_states
      | |         |   `-RecoveryExpr 0x12a027958 <col:9> '<dependent type>' contains-errors lvalue
      | |         `-ImplicitCastExpr 0x12a027ce8 <col:29> 'int' <LValueToRValue>
      | |           `-DeclRefExpr 0x12a0279c0 <col:29> 'int' lvalue ParmVar 0x12a00dda8 'lidx' 'int'
      | `-UnaryOperator 0x12a027e68 <line:13:8, col:35> '<dependent type>' contains-errors prefix '!' cannot overflow
      |   `-ImplicitCastExpr 0x12a027e50 <col:9, col:35> '<dependent type>' contains-errors <LValueToRValue>
      |     `-CXXDependentScopeMemberExpr 0x12a027e08 <col:9, col:35> '<dependent type>' contains-errors lvalue .is_asserted
      |       `-ArraySubscriptExpr 0x12a027de8 <col:9, col:33> '<dependent type>' contains-errors lvalue
      |         |-ImplicitCastExpr 0x12a027db8 <col:9, col:12> '<dependent type>' contains-errors <LValueToRValue>
      |         | `-CXXDependentScopeMemberExpr 0x12a027ae8 <col:9, col:12> '<dependent type>' contains-errors lvalue ->interrupt_states
      |         |   `-RecoveryExpr 0x12a027ac8 <col:9> '<dependent type>' contains-errors lvalue
      |         `-ImplicitCastExpr 0x12a027dd0 <col:29> 'int' <LValueToRValue>
      |           `-DeclRefExpr 0x12a027b30 <col:29> 'int' lvalue ParmVar 0x12a00dda8 'lidx' 'int'
      `-CompoundStmt 0x12a028d28 <col:48, line:19:5>
        |-CallExpr 0x12a027f18 <line:14:9, col:30> 'int'
        | |-ImplicitCastExpr 0x12a027f00 <col:9> 'int (*)()' <FunctionToPointerDecay>
        | | `-DeclRefExpr 0x12a027ea0 <col:9> 'int ()' Function 0x12a00e268 'VMW_IRPRN' 'int ()'
        | |-ImplicitCastExpr 0x12a027f48 <col:19> 'char *' <ArrayToPointerDecay>
        | | `-StringLiteral 0x12a027ec0 <col:19> 'char[4]' lvalue "STR"
        | `-ImplicitCastExpr 0x12a027f60 <col:26> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x12a027ee0 <col:26> 'int' lvalue ParmVar 0x12a00dda8 'lidx' 'int'
        |-BinaryOperator 0x12a0282e8 <line:15:9, line:16:51> '<dependent type>' contains-errors '='
        | |-CXXDependentScopeMemberExpr 0x12a0282a0 <line:15:9, col:35> '<dependent type>' contains-errors lvalue .is_asserted
        | | `-ArraySubscriptExpr 0x12a028280 <col:9, col:33> '<dependent type>' contains-errors lvalue
        | |   |-ImplicitCastExpr 0x12a028250 <col:9, col:12> '<dependent type>' contains-errors <LValueToRValue>
        | |   | `-CXXDependentScopeMemberExpr 0x12a027fc0 <col:9, col:12> '<dependent type>' contains-errors lvalue ->interrupt_states
        | |   |   `-RecoveryExpr 0x12a027f98 <col:9> '<dependent type>' contains-errors lvalue
        | |   |     `-DeclRefExpr 0x12a027f78 <col:9> 'int *' lvalue ParmVar 0x12a00dd28 's' 'int *'
        | |   `-ImplicitCastExpr 0x12a028268 <col:29> 'int' <LValueToRValue>
        | |     `-DeclRefExpr 0x12a028008 <col:29> 'int' lvalue ParmVar 0x12a00dda8 'lidx' 'int'
        | `-CallExpr 0x12a028200 <line:16:13, col:51> '<dependent type>' contains-errors
        |   |-DeclRefExpr 0x12a0281a0 <col:13> 'int ()' Function 0x12a0280e8 '_vmxnet3_assert_interrupt_line' 'int ()'
        |   |-RecoveryExpr 0x12a0281c0 <col:44> '<dependent type>' contains-errors lvalue
        |   `-DeclRefExpr 0x12a0281e0 <col:47> 'int' lvalue ParmVar 0x12a00dda8 'lidx' 'int'
        `-ReturnStmt 0x12a028d18 <line:18:9>
