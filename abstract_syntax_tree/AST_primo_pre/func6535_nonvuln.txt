`-FunctionDecl 0x11e827438  line:1:9 invalid cli_bcapi_jsnorm_process 'int (struct cli_bc_ctx *, int)'
  |-ParmVarDecl 0x11e80e268 <col:34, col:53> col:53 used ctx 'struct cli_bc_ctx *'
  |-ParmVarDecl 0x11e80e2e8 <col:58, col:66> col:66 invalid id 'int'
  `-CompoundStmt 0x11e82a290 <line:2:1, line:19:1>
    |-DeclStmt 0x11e827570 <line:3:5, col:19>
    | `-VarDecl 0x11e827508 <col:5, col:14> col:14 used avail 'unsigned int'
    |-DeclStmt 0x11e827640 <line:4:5, col:22>
    | `-VarDecl 0x11e8275d8 <col:5, col:20> col:20 used in 'unsigned char *'
    |-DeclStmt 0x11e827ac8 <line:6:5, col:46>
    | |-RecordDecl 0x11e8276f0 <col:5, col:12> col:12 struct bc_jsnorm
    | `-VarDecl 0x11e827858 <col:5, col:45> col:23 used b 'struct bc_jsnorm *' cinit
    |   `-CallExpr 0x11e827a80 <col:27, col:45> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x11e827a20 <col:27> 'int ()' Function 0x11e827968 'get_jsnorm' 'int ()'
    |     |-DeclRefExpr 0x11e827a40 <col:38> 'struct cli_bc_ctx *' lvalue ParmVar 0x11e80e268 'ctx' 'struct cli_bc_ctx *'
    |     `-RecoveryExpr 0x11e827a60 <col:43> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x11e827d00 <line:7:5, line:8:10>
    | |-BinaryOperator 0x11e827c98 <line:7:9, col:36> 'int' contains-errors '||'
    | | |-BinaryOperator 0x11e827be8 <col:9, col:27> 'int' contains-errors '||'
    | | | |-UnaryOperator 0x11e827b18 <col:9, col:10> 'int' contains-errors prefix '!' cannot overflow
    | | | | `-ImplicitCastExpr 0x11e827b00 <col:10> 'struct bc_jsnorm *' contains-errors <LValueToRValue>
    | | | |   `-DeclRefExpr 0x11e827ae0 <col:10> 'struct bc_jsnorm *' contains-errors lvalue Var 0x11e827858 'b' 'struct bc_jsnorm *'
    | | | `-BinaryOperator 0x11e827bc8 <col:15, col:27> 'int' contains-errors '=='
    | | |   |-RecoveryExpr 0x11e827b68 <col:15, col:18> '<dependent type>' contains-errors lvalue
    | | |   | `-DeclRefExpr 0x11e827b30 <col:15> 'struct bc_jsnorm *' contains-errors lvalue Var 0x11e827858 'b' 'struct bc_jsnorm *'
    | | |   `-UnaryOperator 0x11e827bb0 <col:26, col:27> 'int' prefix '-'
    | | |     `-IntegerLiteral 0x11e827b90 <col:27> 'int' 1
    | | `-UnaryOperator 0x11e827c80 <col:32, col:36> '<dependent type>' contains-errors prefix '!' cannot overflow
    | |   `-ImplicitCastExpr 0x11e827c68 <col:33, col:36> '<dependent type>' contains-errors <LValueToRValue>
    | |     `-RecoveryExpr 0x11e827c40 <col:33, col:36> '<dependent type>' contains-errors lvalue
    | |       `-DeclRefExpr 0x11e827c08 <col:33> 'struct bc_jsnorm *' contains-errors lvalue Var 0x11e827858 'b' 'struct bc_jsnorm *'
    | `-ReturnStmt 0x11e827cf0 <line:8:2, col:10>
    |   `-UnaryOperator 0x11e827cd8 <col:9, col:10> 'int' prefix '-'
    |     `-IntegerLiteral 0x11e827cb8 <col:10> 'int' 1
    |-BinaryOperator 0x11e827ef0 <line:10:5, col:58> 'unsigned int' contains-errors '='
    | |-DeclRefExpr 0x11e827d20 <col:5> 'unsigned int' lvalue Var 0x11e827508 'avail' 'unsigned int'
    | `-CallExpr 0x11e827ec0 <col:13, col:58> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x11e827e20 <col:13> 'int ()' Function 0x11e827d68 'cli_bcapi_buffer_pipe_read_avail' 'int ()'
    |   |-DeclRefExpr 0x11e827e40 <col:46> 'struct cli_bc_ctx *' lvalue ParmVar 0x11e80e268 'ctx' 'struct cli_bc_ctx *'
    |   `-RecoveryExpr 0x11e827e98 <col:51, col:54> '<dependent type>' contains-errors lvalue
    |     `-DeclRefExpr 0x11e827e60 <col:51> 'struct bc_jsnorm *' contains-errors lvalue Var 0x11e827858 'b' 'struct bc_jsnorm *'
    |-BinaryOperator 0x11e828108 <line:11:5, col:60> 'unsigned char *' contains-errors '='
    | |-DeclRefExpr 0x11e827f10 <col:5> 'unsigned char *' lvalue Var 0x11e8275d8 'in' 'unsigned char *'
    | `-CallExpr 0x11e8280d0 <col:10, col:60> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x11e828010 <col:10> 'int ()' Function 0x11e827f58 'cli_bcapi_buffer_pipe_read_get' 'int ()'
    |   |-DeclRefExpr 0x11e828030 <col:41> 'struct cli_bc_ctx *' lvalue ParmVar 0x11e80e268 'ctx' 'struct cli_bc_ctx *'
    |   |-RecoveryExpr 0x11e828088 <col:46, col:49> '<dependent type>' contains-errors lvalue
    |   | `-DeclRefExpr 0x11e828050 <col:46> 'struct bc_jsnorm *' contains-errors lvalue Var 0x11e827858 'b' 'struct bc_jsnorm *'
    |   `-DeclRefExpr 0x11e8280b0 <col:55> 'unsigned int' lvalue Var 0x11e827508 'avail' 'unsigned int'
    |-IfStmt 0x11e828230 <line:12:5, line:13:10>
    | |-BinaryOperator 0x11e8281c8 <line:12:9, col:20> 'int' '||'
    | | |-UnaryOperator 0x11e828160 <col:9, col:10> 'int' prefix '!' cannot overflow
    | | | `-ImplicitCastExpr 0x11e828148 <col:10> 'unsigned int' <LValueToRValue>
    | | |   `-DeclRefExpr 0x11e828128 <col:10> 'unsigned int' lvalue Var 0x11e827508 'avail' 'unsigned int'
    | | `-UnaryOperator 0x11e8281b0 <col:19, col:20> 'int' prefix '!' cannot overflow
    | |   `-ImplicitCastExpr 0x11e828198 <col:20> 'unsigned char *' <LValueToRValue>
    | |     `-DeclRefExpr 0x11e828178 <col:20> 'unsigned char *' lvalue Var 0x11e8275d8 'in' 'unsigned char *'
    | `-ReturnStmt 0x11e828220 <line:13:2, col:10>
    |   `-UnaryOperator 0x11e828208 <col:9, col:10> 'int' prefix '-'
    |     `-IntegerLiteral 0x11e8281e8 <col:10> 'int' 1
    |-IfStmt 0x11e829e38 <line:14:5, line:15:10>
    | |-BinaryOperator 0x11e829dd0 <line:14:9, col:78> 'int' contains-errors '&&'
    | | |-DeclRefExpr 0x11e829d48 <col:9> 'struct cli_bc_ctx *' lvalue ParmVar 0x11e80e268 'ctx' 'struct cli_bc_ctx *'
    | | `-CallExpr 0x11e829d88 <col:17, col:78> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x11e828348 <col:17> 'int ()' Function 0x11e828290 'cli_checklimits' 'int ()'
    | |   |-StringLiteral 0x11e8283b0 <col:33> 'char[4]' lvalue "STR"
    | |   |-DeclRefExpr 0x11e829d68 <col:40> 'struct cli_bc_ctx *' lvalue ParmVar 0x11e80e268 'ctx' 'struct cli_bc_ctx *'
    | |   |-BinaryOperator 0x11e829c80 <col:46, col:67> '<dependent type>' contains-errors '+'
    | |   | |-RecoveryExpr 0x11e829c38 <col:46, col:51> '<dependent type>' contains-errors lvalue
    | |   | | `-DeclRefExpr 0x11e829c00 <col:46> 'struct cli_bc_ctx *' lvalue ParmVar 0x11e80e268 'ctx' 'struct cli_bc_ctx *'
    | |   | `-DeclRefExpr 0x11e829c60 <col:67> 'unsigned int' lvalue Var 0x11e827508 'avail' 'unsigned int'
    | |   |-IntegerLiteral 0x11e829ca0 <col:74> 'int' 0
    | |   `-IntegerLiteral 0x11e829cc0 <col:77> 'int' 0
    | `-ReturnStmt 0x11e829e28 <line:15:2, col:10>
    |   `-UnaryOperator 0x11e829e10 <col:9, col:10> 'int' prefix '-'
    |     `-IntegerLiteral 0x11e829df0 <col:10> 'int' 1
    |-CallExpr 0x11e829ff8 <line:16:5, col:59> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x11e829f38 <col:5> 'int ()' Function 0x11e829e80 'cli_bcapi_buffer_pipe_read_stopped' 'int ()'
    | |-DeclRefExpr 0x11e829f58 <col:40> 'struct cli_bc_ctx *' lvalue ParmVar 0x11e80e268 'ctx' 'struct cli_bc_ctx *'
    | |-RecoveryExpr 0x11e829fb0 <col:45, col:48> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x11e829f78 <col:45> 'struct bc_jsnorm *' contains-errors lvalue Var 0x11e827858 'b' 'struct bc_jsnorm *'
    | `-DeclRefExpr 0x11e829fd8 <col:54> 'unsigned int' lvalue Var 0x11e827508 'avail' 'unsigned int'
    |-CallExpr 0x11e82a228 <line:17:5, col:53> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x11e82a110 <col:5> 'int ()' Function 0x11e82a058 'cli_js_process_buffer' 'int ()'
    | |-RecoveryExpr 0x11e82a168 <col:27, col:30> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x11e82a130 <col:27> 'struct bc_jsnorm *' contains-errors lvalue Var 0x11e827858 'b' 'struct bc_jsnorm *'
    | |-CStyleCastExpr 0x11e82a1e0 <col:37, col:44> 'char *' <BitCast>
    | | `-ImplicitCastExpr 0x11e82a1c8 <col:44> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
    | |   `-DeclRefExpr 0x11e82a190 <col:44> 'unsigned char *' lvalue Var 0x11e8275d8 'in' 'unsigned char *'
    | `-DeclRefExpr 0x11e82a208 <col:48> 'unsigned int' lvalue Var 0x11e827508 'avail' 'unsigned int'
    `-ReturnStmt 0x11e82a280 <line:18:5, col:12>
      `-IntegerLiteral 0x11e82a260 <col:12> 'int' 0
