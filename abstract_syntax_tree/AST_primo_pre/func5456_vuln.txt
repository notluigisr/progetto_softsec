`-FunctionDecl 0x12e91f5c8  line:1:1 append_command 'int (char *)'
  |-ParmVarDecl 0x12e91f4f0 <col:16, col:24> col:24 used cmd 'char *'
  `-CompoundStmt 0x12e93a600 <line:2:1, line:20:1>
    |-DeclStmt 0x12e91f778 <line:3:5, col:20>
    | `-VarDecl 0x12e91f6d8 <col:5, col:17> col:13 used s 'char *' cinit
    |   `-ImplicitCastExpr 0x12e91f760 <col:17> 'char *' <LValueToRValue>
    |     `-DeclRefExpr 0x12e91f740 <col:17> 'char *' lvalue ParmVar 0x12e91f4f0 'cmd' 'char *'
    |-DeclStmt 0x12e91f810 <line:4:5, col:14>
    | `-VarDecl 0x12e91f7a8 <col:5, col:13> col:13 used d 'char *'
    |-CallExpr 0x12e91fa30 <line:6:5, col:25> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x12e91f940 <col:5> 'int ()' Function 0x12e91f888 'STRCAT' 'int ()'
    | |-RecoveryExpr 0x12e91fa10 <col:12> '<dependent type>' contains-errors lvalue
    | `-StringLiteral 0x12e91f9c0 <col:20> 'char[4]' lvalue "STR"
    |-BinaryOperator 0x12e937ea8 <line:7:5, col:31> 'char *' contains-errors '='
    | |-DeclRefExpr 0x12e91fa60 <col:5> 'char *' lvalue Var 0x12e91f7a8 'd' 'char *'
    | `-BinaryOperator 0x12e937e88 <col:9, col:31> '<dependent type>' contains-errors '+'
    |   |-RecoveryExpr 0x12e937e20 <col:9> '<dependent type>' contains-errors lvalue
    |   `-CallExpr 0x12e937e60 <col:18, col:31> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x12e91fb78 <col:18> 'int ()' Function 0x12e91fac0 'STRLEN' 'int ()'
    |     `-RecoveryExpr 0x12e937e40 <col:25> '<dependent type>' contains-errors lvalue
    |-WhileStmt 0x12e938cb0 <line:8:5, line:18:5>
    | |-BinaryOperator 0x12e938180 <line:8:12, col:47> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x12e9380c0 <col:12, col:18> 'int' contains-errors '!='
    | | | |-UnaryOperator 0x12e938088 <col:12, col:13> 'char' lvalue prefix '*' cannot overflow
    | | | | `-ImplicitCastExpr 0x12e938070 <col:13> 'char *' <LValueToRValue>
    | | | |   `-DeclRefExpr 0x12e937ec8 <col:13> 'char *' lvalue Var 0x12e91f6d8 's' 'char *'
    | | | `-RecoveryExpr 0x12e9380a0 <col:18> '<dependent type>' contains-errors lvalue
    | | `-BinaryOperator 0x12e938160 <col:25, col:47> 'int' contains-errors '<'
    | |   |-BinaryOperator 0x12e938100 <col:25, col:29> '<dependent type>' contains-errors '-'
    | |   | |-DeclRefExpr 0x12e937f50 <col:25> 'char *' lvalue Var 0x12e91f7a8 'd' 'char *'
    | |   | `-RecoveryExpr 0x12e9380e0 <col:29> '<dependent type>' contains-errors lvalue
    | |   `-BinaryOperator 0x12e938140 <col:38, col:47> '<dependent type>' contains-errors '-'
    | |     |-RecoveryExpr 0x12e938120 <col:38> '<dependent type>' contains-errors lvalue
    | |     `-IntegerLiteral 0x12e937fc0 <col:47> 'int' 7
    | `-CompoundStmt 0x12e938c98 <line:9:5, line:18:5>
    |   `-IfStmt 0x12e938c68 <line:10:2, line:17:23> has_else
    |     |-ConditionalOperator 0x12e9386a8 <line:10:6, col:56> '<dependent type>' contains-errors
    |     | |-RecoveryExpr 0x12e9384b8 <col:6> '<dependent type>' contains-errors lvalue
    |     | |-ParenExpr 0x12e938608 <col:17, col:46> 'int'
    |     | | `-BinaryOperator 0x12e9385e8 <col:18, col:42> 'int' '&&'
    |     | |   |-BinaryOperator 0x12e938540 <col:18, col:26> 'int' '=='
    |     | |   | |-ImplicitCastExpr 0x12e938528 <col:18, col:21> 'int' <IntegralCast>
    |     | |   | | `-ImplicitCastExpr 0x12e938510 <col:18, col:21> 'char' <LValueToRValue>
    |     | |   | |   `-ArraySubscriptExpr 0x12e9384f0 <col:18, col:21> 'char' lvalue
    |     | |   | |     |-ImplicitCastExpr 0x12e9384d8 <col:18> 'char *' <LValueToRValue>
    |     | |   | |     | `-DeclRefExpr 0x12e9381b8 <col:18> 'char *' lvalue Var 0x12e91f6d8 's' 'char *'
    |     | |   | |     `-IntegerLiteral 0x12e9381d8 <col:20> 'int' 0
    |     | |   | `-IntegerLiteral 0x12e938230 <col:26> 'int' 194
    |     | |   `-BinaryOperator 0x12e9385c8 <col:34, col:42> 'int' '=='
    |     | |     |-ImplicitCastExpr 0x12e9385b0 <col:34, col:37> 'int' <IntegralCast>
    |     | |     | `-ImplicitCastExpr 0x12e938598 <col:34, col:37> 'char' <LValueToRValue>
    |     | |     |   `-ArraySubscriptExpr 0x12e938578 <col:34, col:37> 'char' lvalue
    |     | |     |     |-ImplicitCastExpr 0x12e938560 <col:34> 'char *' <LValueToRValue>
    |     | |     |     | `-DeclRefExpr 0x12e9382a0 <col:34> 'char *' lvalue Var 0x12e91f6d8 's' 'char *'
    |     | |     |     `-IntegerLiteral 0x12e9382c0 <col:36> 'int' 1
    |     | |     `-IntegerLiteral 0x12e938318 <col:42> 'int' 160
    |     | `-BinaryOperator 0x12e938688 <col:50, col:56> 'int' '=='
    |     |   |-ImplicitCastExpr 0x12e938670 <col:50, col:51> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x12e938658 <col:50, col:51> 'char' <LValueToRValue>
    |     |   |   `-UnaryOperator 0x12e938640 <col:50, col:51> 'char' lvalue prefix '*' cannot overflow
    |     |   |     `-ImplicitCastExpr 0x12e938628 <col:51> 'char *' <LValueToRValue>
    |     |   |       `-DeclRefExpr 0x12e9383c8 <col:51> 'char *' lvalue Var 0x12e91f6d8 's' 'char *'
    |     |   `-IntegerLiteral 0x12e938418 <col:56> 'int' 160
    |     |-CompoundStmt 0x12e938a88 <line:11:2, line:15:2>
    |     | |-CompoundAssignOperator 0x12e938800 <line:12:6, col:26> 'char *' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    |     | | |-DeclRefExpr 0x12e9386d8 <col:6> 'char *' lvalue Var 0x12e91f6d8 's' 'char *'
    |     | | `-ConditionalOperator 0x12e9387d0 <col:11, col:26> '<dependent type>' contains-errors
    |     | |   |-RecoveryExpr 0x12e9387b0 <col:11> '<dependent type>' contains-errors lvalue
    |     | |   |-IntegerLiteral 0x12e938710 <col:22> 'int' 2
    |     | |   `-IntegerLiteral 0x12e938730 <col:26> 'int' 1
    |     | |-CallExpr 0x12e9389b8 <line:13:6, col:21> 'int'
    |     | | |-ImplicitCastExpr 0x12e9389a0 <col:6> 'int (*)()' <FunctionToPointerDecay>
    |     | | | `-DeclRefExpr 0x12e938910 <col:6> 'int ()' Function 0x12e938858 'STRCPY' 'int ()'
    |     | | |-ImplicitCastExpr 0x12e9389e8 <col:13> 'char *' <LValueToRValue>
    |     | | | `-DeclRefExpr 0x12e938930 <col:13> 'char *' lvalue Var 0x12e91f7a8 'd' 'char *'
    |     | | `-ImplicitCastExpr 0x12e938a00 <col:16> 'char *' <ArrayToPointerDecay>
    |     | |   `-StringLiteral 0x12e938950 <col:16> 'char[4]' lvalue "STR"
    |     | `-CompoundAssignOperator 0x12e938a58 <line:14:6, col:11> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
    |     |   |-DeclRefExpr 0x12e938a18 <col:6> 'char *' lvalue Var 0x12e91f7a8 'd' 'char *'
    |     |   `-IntegerLiteral 0x12e938a38 <col:11> 'int' 4
    |     `-CallExpr 0x12e938c08 <line:17:6, col:23> 'int'
    |       |-ImplicitCastExpr 0x12e938bf0 <col:6> 'int (*)()' <FunctionToPointerDecay>
    |       | `-DeclRefExpr 0x12e938b90 <col:6> 'int ()' Function 0x12e938ad8 'MB_COPY_CHAR' 'int ()'
    |       |-ImplicitCastExpr 0x12e938c38 <col:19> 'char *' <LValueToRValue>
    |       | `-DeclRefExpr 0x12e938bb0 <col:19> 'char *' lvalue Var 0x12e91f6d8 's' 'char *'
    |       `-ImplicitCastExpr 0x12e938c50 <col:22> 'char *' <LValueToRValue>
    |         `-DeclRefExpr 0x12e938bd0 <col:22> 'char *' lvalue Var 0x12e91f7a8 'd' 'char *'
    `-BinaryOperator 0x12e938dd8 <line:19:5, col:10> 'char' contains-errors '='
      |-UnaryOperator 0x12e938da0 <col:5, col:6> 'char' lvalue prefix '*' cannot overflow
      | `-ImplicitCastExpr 0x12e938d88 <col:6> 'char *' <LValueToRValue>
      |   `-DeclRefExpr 0x12e938cd0 <col:6> 'char *' lvalue Var 0x12e91f7a8 'd' 'char *'
      `-RecoveryExpr 0x12e938db8 <col:10> '<dependent type>' contains-errors lvalue
