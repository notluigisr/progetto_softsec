`-FunctionDecl 0x12800df78  line:1:1 invalid xmlValidNormalizeAttributeValue 'int (int, int, const int *, const int *)'
  |-ParmVarDecl 0x12800dcf0 <col:33, col:43> col:43 invalid doc 'int'
  |-ParmVarDecl 0x12800dd70 <col:48, col:59> col:59 invalid elem 'int'
  |-ParmVarDecl 0x12800ddf0 <line:2:12, col:27> col:27 invalid name 'const int *'
  |-ParmVarDecl 0x12800de70 <col:33, col:48> col:48 invalid value 'const int *'
  `-CompoundStmt 0x130123d60 <col:55, line:48:1>
    |-DeclStmt 0x12800e120 <line:4:5, col:23>
    | `-VarDecl 0x12800e0b8 <col:5, col:20> col:20 referenced invalid src 'const int *'
    |-IfStmt 0x130122c10 <line:12:5, line:21:5>
    | |-RecoveryExpr 0x130122788 <line:12:9, col:56> '_Bool' contains-errors
    | `-CompoundStmt 0x130122c00 <col:59, line:21:5>
    |-BinaryOperator 0x130123238 <line:34:5, col:11> '<dependent type>' contains-errors '='
    | |-RecoveryExpr 0x1301231f0 <col:5> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x1301231d0 <col:5> 'const int *' lvalue Var 0x12800e0b8 'src' 'const int *'
    | `-RecoveryExpr 0x130123218 <col:11> '<dependent type>' contains-errors lvalue
    |-WhileStmt 0x130123348 <line:36:5, col:29>
    | |-BinaryOperator 0x1301232c8 <col:12, col:20> 'int' contains-errors '=='
    | | |-UnaryOperator 0x130123290 <col:12, col:13> '<dependent type>' contains-errors prefix '*' cannot overflow
    | | | `-ImplicitCastExpr 0x130123278 <col:13> '<dependent type>' contains-errors <LValueToRValue>
    | | |   `-RecoveryExpr 0x130123258 <col:13> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x1301232a8 <col:20> 'int' 32
    | `-UnaryOperator 0x130123330 <col:26, col:29> '<dependent type>' contains-errors postfix '++' cannot overflow
    |   `-RecoveryExpr 0x130123308 <col:26> '<dependent type>' contains-errors lvalue
    |     `-DeclRefExpr 0x1301232e8 <col:26> 'const int *' lvalue Var 0x12800e0b8 'src' 'const int *'
    `-WhileStmt 0x130123d20 <line:37:5, line:45:5>
      |-BinaryOperator 0x1301233d8 <line:37:12, col:20> 'int' contains-errors '!='
      | |-UnaryOperator 0x1301233a0 <col:12, col:13> '<dependent type>' contains-errors prefix '*' cannot overflow
      | | `-ImplicitCastExpr 0x130123388 <col:13> '<dependent type>' contains-errors <LValueToRValue>
      | |   `-RecoveryExpr 0x130123368 <col:13> '<dependent type>' contains-errors lvalue
      | `-IntegerLiteral 0x1301233b8 <col:20> 'int' 0
      `-CompoundStmt 0x130123d08 <col:23, line:45:5>
        `-IfStmt 0x130123cd8 <line:38:2, line:44:2> has_else
          |-BinaryOperator 0x130123468 <line:38:6, col:14> 'int' contains-errors '=='
          | |-UnaryOperator 0x130123430 <col:6, col:7> '<dependent type>' contains-errors prefix '*' cannot overflow
          | | `-ImplicitCastExpr 0x130123418 <col:7> '<dependent type>' contains-errors <LValueToRValue>
          | |   `-RecoveryExpr 0x1301233f8 <col:7> '<dependent type>' contains-errors lvalue
          | `-IntegerLiteral 0x130123448 <col:14> 'int' 32
          |-CompoundStmt 0x130123c60 <col:20, line:42:2>
          | `-WhileStmt 0x130123578 <line:39:6, col:30>
          |   |-BinaryOperator 0x1301234f8 <col:13, col:21> 'int' contains-errors '=='
          |   | |-UnaryOperator 0x1301234c0 <col:13, col:14> '<dependent type>' contains-errors prefix '*' cannot overflow
          |   | | `-ImplicitCastExpr 0x1301234a8 <col:14> '<dependent type>' contains-errors <LValueToRValue>
          |   | |   `-RecoveryExpr 0x130123488 <col:14> '<dependent type>' contains-errors lvalue
          |   | `-IntegerLiteral 0x1301234d8 <col:21> 'int' 32
          |   `-UnaryOperator 0x130123560 <col:27, col:30> '<dependent type>' contains-errors postfix '++' cannot overflow
          |     `-RecoveryExpr 0x130123538 <col:27> '<dependent type>' contains-errors lvalue
          |       `-DeclRefExpr 0x130123518 <col:27> 'const int *' lvalue Var 0x12800e0b8 'src' 'const int *'
          `-CompoundStmt 0x130123cc8 <line:42:9, line:44:2>
