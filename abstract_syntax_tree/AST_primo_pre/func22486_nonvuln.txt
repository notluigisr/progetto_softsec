`-FunctionDecl 0x147928238  line:1:1 g_tcp_select 'int (int, int)'
  |-ParmVarDecl 0x1479280d8 <col:14, col:18> col:18 used sck1 'int'
  |-ParmVarDecl 0x147928158 <col:24, col:28> col:28 used sck2 'int'
  `-CompoundStmt 0x147945888 <line:2:1, line:45:1>
    |-DeclStmt 0x147940b28 <line:4:3, col:22>
    | |-RecordDecl 0x147928350 <col:3, col:10> col:10 struct timeval
    | `-VarDecl 0x147928448 <col:3, col:18> col:18 referenced invalid time 'struct timeval'
    |-DeclStmt 0x147940be0 <line:5:3, col:14>
    | `-VarDecl 0x147940b58 <col:3, col:13> col:7 used max 'int' cinit
    |   `-IntegerLiteral 0x147940bc0 <col:13> 'int' 0
    |-DeclStmt 0x147940c98 <line:6:3, col:13>
    | `-VarDecl 0x147940c10 <col:3, col:12> col:7 used rv 'int' cinit
    |   `-IntegerLiteral 0x147940c78 <col:12> 'int' 0
    |-BinaryOperator 0x147940fc0 <line:11:3, col:17> '<dependent type>' contains-errors '='
    | |-CXXDependentScopeMemberExpr 0x147940f58 <col:3, col:8> '<dependent type>' contains-errors lvalue .tv_sec
    | | `-RecoveryExpr 0x147940f30 <col:3> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x147940f10 <col:3> 'struct timeval' lvalue Var 0x147928448 'time' 'struct timeval'
    | `-IntegerLiteral 0x147940fa0 <col:17> 'int' 0
    |-BinaryOperator 0x147941090 <line:12:3, col:18> '<dependent type>' contains-errors '='
    | |-CXXDependentScopeMemberExpr 0x147941028 <col:3, col:8> '<dependent type>' contains-errors lvalue .tv_usec
    | | `-RecoveryExpr 0x147941000 <col:3> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x147940fe0 <col:3> 'struct timeval' lvalue Var 0x147928448 'time' 'struct timeval'
    | `-IntegerLiteral 0x147941070 <col:18> 'int' 0
    |-CallExpr 0x147941240 <line:13:3, col:16> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x147941190 <col:3> 'int ()' Function 0x1479410d8 'FD_ZERO' 'int ()'
    | `-UnaryOperator 0x147941228 <col:11, col:12> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   `-RecoveryExpr 0x147941208 <col:12> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x147941648 <line:14:3, line:17:3>
    | |-BinaryOperator 0x1479412c0 <line:14:7, col:14> 'int' '>'
    | | |-ImplicitCastExpr 0x1479412a8 <col:7> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x147941268 <col:7> 'int' lvalue ParmVar 0x1479280d8 'sck1' 'int'
    | | `-IntegerLiteral 0x147941288 <col:14> 'int' 0
    | `-CompoundStmt 0x147941630 <line:15:3, line:17:3>
    |   `-CallExpr 0x147941600 <line:16:5, col:39> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x1479413c0 <col:5> 'int ()' Function 0x147941308 'FD_SET' 'int ()'
    |     |-ParenExpr 0x1479415a8 <col:12, col:31> 'unsigned int'
    |     | `-CStyleCastExpr 0x147941580 <col:13, col:27> 'unsigned int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x147941568 <col:27> 'int' <LValueToRValue> part_of_explicit_cast
    |     |     `-DeclRefExpr 0x1479413e0 <col:27> 'int' lvalue ParmVar 0x1479280d8 'sck1' 'int'
    |     `-UnaryOperator 0x1479415e8 <col:34, col:35> '<dependent type>' contains-errors prefix '&' cannot overflow
    |       `-RecoveryExpr 0x1479415c8 <col:35> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x147941968 <line:18:3, line:21:3>
    | |-BinaryOperator 0x1479416c0 <line:18:7, col:14> 'int' '>'
    | | |-ImplicitCastExpr 0x1479416a8 <col:7> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x147941668 <col:7> 'int' lvalue ParmVar 0x147928158 'sck2' 'int'
    | | `-IntegerLiteral 0x147941688 <col:14> 'int' 0
    | `-CompoundStmt 0x147941950 <line:19:3, line:21:3>
    |   `-CallExpr 0x147941920 <line:20:5, col:39> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x1479416e0 <col:5> 'int ()' Function 0x147941308 'FD_SET' 'int ()'
    |     |-ParenExpr 0x1479418c8 <col:12, col:31> 'unsigned int'
    |     | `-CStyleCastExpr 0x1479418a0 <col:13, col:27> 'unsigned int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x147941888 <col:27> 'int' <LValueToRValue> part_of_explicit_cast
    |     |     `-DeclRefExpr 0x147941700 <col:27> 'int' lvalue ParmVar 0x147928158 'sck2' 'int'
    |     `-UnaryOperator 0x147941908 <col:34, col:35> '<dependent type>' contains-errors prefix '&' cannot overflow
    |       `-RecoveryExpr 0x1479418e8 <col:35> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x1479419e0 <line:22:3, col:9> 'int' '='
    | |-DeclRefExpr 0x147941988 <col:3> 'int' lvalue Var 0x147940b58 'max' 'int'
    | `-ImplicitCastExpr 0x1479419c8 <col:9> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x1479419a8 <col:9> 'int' lvalue ParmVar 0x1479280d8 'sck1' 'int'
    |-IfStmt 0x147944b20 <line:23:3, line:26:3>
    | |-BinaryOperator 0x147944a70 <line:23:7, col:14> 'int' '>'
    | | |-ImplicitCastExpr 0x147944a40 <col:7> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x147944a00 <col:7> 'int' lvalue ParmVar 0x147928158 'sck2' 'int'
    | | `-ImplicitCastExpr 0x147944a58 <col:14> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x147944a20 <col:14> 'int' lvalue Var 0x147940b58 'max' 'int'
    | `-CompoundStmt 0x147944b08 <line:24:3, line:26:3>
    |   `-BinaryOperator 0x147944ae8 <line:25:5, col:11> 'int' '='
    |     |-DeclRefExpr 0x147944a90 <col:5> 'int' lvalue Var 0x147940b58 'max' 'int'
    |     `-ImplicitCastExpr 0x147944ad0 <col:11> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x147944ab0 <col:11> 'int' lvalue ParmVar 0x147928158 'sck2' 'int'
    |-BinaryOperator 0x147944ed8 <line:27:3, col:42> 'int' contains-errors '='
    | |-DeclRefExpr 0x147944b40 <col:3> 'int' lvalue Var 0x147940c10 'rv' 'int'
    | `-CallExpr 0x147944e90 <col:8, col:42> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x147944c40 <col:8> 'int ()' Function 0x147944b88 'select' 'int ()'
    |   |-BinaryOperator 0x147944e38 <col:15, col:21> 'int' '+'
    |   | |-ImplicitCastExpr 0x147944e20 <col:15> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x147944c60 <col:15> 'int' lvalue Var 0x147940b58 'max' 'int'
    |   | `-IntegerLiteral 0x147944c80 <col:21> 'int' 1
    |   |-UnaryOperator 0x147944e78 <col:24, col:25> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | `-RecoveryExpr 0x147944e58 <col:25> '<dependent type>' contains-errors lvalue
    |   |-IntegerLiteral 0x147944d08 <col:31> 'int' 0
    |   |-IntegerLiteral 0x147944d28 <col:34> 'int' 0
    |   `-UnaryOperator 0x147944d68 <col:37, col:38> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-RecoveryExpr 0x147944d48 <col:38> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x147945810 <line:28:3, line:43:3> has_else
    | |-BinaryOperator 0x147944f50 <line:28:7, col:12> 'int' '>'
    | | |-ImplicitCastExpr 0x147944f38 <col:7> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x147944ef8 <col:7> 'int' lvalue Var 0x147940c10 'rv' 'int'
    | | `-IntegerLiteral 0x147944f18 <col:12> 'int' 0
    | |-CompoundStmt 0x147945770 <line:29:3, line:39:3>
    | | |-BinaryOperator 0x147944fb0 <line:30:5, col:10> 'int' '='
    | | | |-DeclRefExpr 0x147944f70 <col:5> 'int' lvalue Var 0x147940c10 'rv' 'int'
    | | | `-IntegerLiteral 0x147944f90 <col:10> 'int' 0
    | | |-IfStmt 0x1479453f0 <line:31:5, line:34:5>
    | | | |-CallExpr 0x1479452f0 <line:31:9, col:45> '<dependent type>' contains-errors
    | | | | |-DeclRefExpr 0x1479450b0 <col:9> 'int ()' Function 0x147944ff8 'FD_ISSET' 'int ()'
    | | | | |-ParenExpr 0x147945298 <col:18, col:37> 'unsigned int'
    | | | | | `-CStyleCastExpr 0x147945270 <col:19, col:33> 'unsigned int' <IntegralCast>
    | | | | |   `-ImplicitCastExpr 0x147945258 <col:33> 'int' <LValueToRValue> part_of_explicit_cast
    | | | | |     `-DeclRefExpr 0x1479450d0 <col:33> 'int' lvalue ParmVar 0x1479280d8 'sck1' 'int'
    | | | | `-UnaryOperator 0x1479452d8 <col:40, col:41> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | | |   `-RecoveryExpr 0x1479452b8 <col:41> '<dependent type>' contains-errors lvalue
    | | | `-CompoundStmt 0x1479453d8 <line:32:5, line:34:5>
    | | |   `-BinaryOperator 0x1479453b8 <line:33:7, col:17> 'int' '='
    | | |     |-DeclRefExpr 0x147945320 <col:7> 'int' lvalue Var 0x147940c10 'rv' 'int'
    | | |     `-BinaryOperator 0x147945398 <col:12, col:17> 'int' '|'
    | | |       |-ImplicitCastExpr 0x147945380 <col:12> 'int' <LValueToRValue>
    | | |       | `-DeclRefExpr 0x147945340 <col:12> 'int' lvalue Var 0x147940c10 'rv' 'int'
    | | |       `-IntegerLiteral 0x147945360 <col:17> 'int' 1
    | | `-IfStmt 0x147945750 <line:35:5, line:38:5>
    | |   |-CallExpr 0x147945650 <line:35:9, col:45> '<dependent type>' contains-errors
    | |   | |-DeclRefExpr 0x147945410 <col:9> 'int ()' Function 0x147944ff8 'FD_ISSET' 'int ()'
    | |   | |-ParenExpr 0x1479455f8 <col:18, col:37> 'unsigned int'
    | |   | | `-CStyleCastExpr 0x1479455d0 <col:19, col:33> 'unsigned int' <IntegralCast>
    | |   | |   `-ImplicitCastExpr 0x1479455b8 <col:33> 'int' <LValueToRValue> part_of_explicit_cast
    | |   | |     `-DeclRefExpr 0x147945430 <col:33> 'int' lvalue ParmVar 0x147928158 'sck2' 'int'
    | |   | `-UnaryOperator 0x147945638 <col:40, col:41> '<dependent type>' contains-errors prefix '&' cannot overflow
    | |   |   `-RecoveryExpr 0x147945618 <col:41> '<dependent type>' contains-errors lvalue
    | |   `-CompoundStmt 0x147945738 <line:36:5, line:38:5>
    | |     `-BinaryOperator 0x147945718 <line:37:7, col:17> 'int' '='
    | |       |-DeclRefExpr 0x147945680 <col:7> 'int' lvalue Var 0x147940c10 'rv' 'int'
    | |       `-BinaryOperator 0x1479456f8 <col:12, col:17> 'int' '|'
    | |         |-ImplicitCastExpr 0x1479456e0 <col:12> 'int' <LValueToRValue>
    | |         | `-DeclRefExpr 0x1479456a0 <col:12> 'int' lvalue Var 0x147940c10 'rv' 'int'
    | |         `-IntegerLiteral 0x1479456c0 <col:17> 'int' 2
    | `-CompoundStmt 0x1479457f8 <line:41:3, line:43:3>
    |   `-BinaryOperator 0x1479457d8 <line:42:5, col:10> 'int' '='
    |     |-DeclRefExpr 0x147945798 <col:5> 'int' lvalue Var 0x147940c10 'rv' 'int'
    |     `-IntegerLiteral 0x1479457b8 <col:10> 'int' 0
    `-ReturnStmt 0x147945878 <line:44:3, col:10>
      `-ImplicitCastExpr 0x147945860 <col:10> 'int' <LValueToRValue>
        `-DeclRefExpr 0x147945840 <col:10> 'int' lvalue Var 0x147940c10 'rv' 'int'
