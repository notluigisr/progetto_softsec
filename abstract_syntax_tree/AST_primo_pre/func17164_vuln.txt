`-FunctionDecl 0x14180e068  line:1:1 invalid check_1_6_dummy 'int (int, long, int, int *, char **)'
  |-ParmVarDecl 0x14180dcf0 <col:17, col:39> col:39 invalid entry 'int'
  |-ParmVarDecl 0x14180dd70 <col:46, col:51> col:51 used mask 'long'
  |-ParmVarDecl 0x14180ddf0 <line:2:17, col:21> col:21 n_ks_tuple 'int'
  |-ParmVarDecl 0x14180dea8 <col:33, col:54> col:54 invalid ks_tuple 'int *'
  |-ParmVarDecl 0x14180df58 <col:64, col:71> col:71 used passptr 'char **'
  `-CompoundStmt 0x141827978 <line:3:1, line:19:1>
    |-DeclStmt 0x14180e1b8 <line:4:5, col:10>
    | `-VarDecl 0x14180e150 <col:5, col:9> col:9 used i 'int'
    |-DeclStmt 0x14180e2b8 <line:5:5, col:30>
    | `-VarDecl 0x14180e1e8 <col:5, col:23> col:11 used password 'char *' cinit
    |   `-ImplicitCastExpr 0x14180e2a0 <col:22, col:23> 'char *' <LValueToRValue>
    |     `-UnaryOperator 0x14180e288 <col:22, col:23> 'char *' lvalue prefix '*' cannot overflow
    |       `-ImplicitCastExpr 0x14180e270 <col:23> 'char **' <LValueToRValue>
    |         `-DeclRefExpr 0x14180e250 <col:23> 'char **' lvalue ParmVar 0x14180df58 'passptr' 'char **'
    |-IfStmt 0x141827400 <line:8:5, line:10:9>
    | |-RecoveryExpr 0x14180e3c8 <line:8:9, line:9:56> '_Bool' contains-errors
    | `-ReturnStmt 0x14180e3e8 <line:10:9>
    |-ForStmt 0x141827658 <line:13:5, col:59>
    | |-BinaryOperator 0x141827460 <col:10, col:14> 'int' '='
    | | |-DeclRefExpr 0x141827420 <col:10> 'int' lvalue Var 0x14180e150 'i' 'int'
    | | `-IntegerLiteral 0x141827440 <col:14> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x1418275f8 <col:17, col:52> 'int' '=='
    | | |-ImplicitCastExpr 0x1418275e0 <col:17, col:43> 'int' <IntegralCast>
    | | | `-CStyleCastExpr 0x141827540 <col:17, col:43> 'unsigned char' <IntegralCast>
    | | |   `-ImplicitCastExpr 0x141827528 <col:33, col:43> 'char' <LValueToRValue> part_of_explicit_cast
    | | |     `-ArraySubscriptExpr 0x1418274f0 <col:33, col:43> 'char' lvalue
    | | |       |-ImplicitCastExpr 0x1418274c0 <col:33> 'char *' <LValueToRValue>
    | | |       | `-DeclRefExpr 0x141827480 <col:33> 'char *' lvalue Var 0x14180e1e8 'password' 'char *'
    | | |       `-ImplicitCastExpr 0x1418274d8 <col:42> 'int' <LValueToRValue>
    | | |         `-DeclRefExpr 0x1418274a0 <col:42> 'int' lvalue Var 0x14180e150 'i' 'int'
    | | `-BinaryOperator 0x1418275c0 <col:48, col:52> 'int' '+'
    | |   |-ImplicitCastExpr 0x1418275a8 <col:48> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x141827568 <col:48> 'int' lvalue Var 0x14180e150 'i' 'int'
    | |   `-IntegerLiteral 0x141827588 <col:52> 'int' 1
    | |-UnaryOperator 0x141827638 <col:55, col:56> 'int' postfix '++'
    | | `-DeclRefExpr 0x141827618 <col:55> 'int' lvalue Var 0x14180e150 'i' 'int'
    | `-NullStmt 0x141827650 <col:59>
    |-IfStmt 0x141827830 <line:14:5, line:15:9>
    | |-BinaryOperator 0x141827800 <line:14:9, col:37> 'int' '||'
    | | |-BinaryOperator 0x141827768 <col:9, col:24> 'int' '!='
    | | | |-ImplicitCastExpr 0x141827750 <col:9, col:19> 'int' <IntegralCast>
    | | | | `-ImplicitCastExpr 0x141827738 <col:9, col:19> 'char' <LValueToRValue>
    | | | |   `-ArraySubscriptExpr 0x141827700 <col:9, col:19> 'char' lvalue
    | | | |     |-ImplicitCastExpr 0x1418276d0 <col:9> 'char *' <LValueToRValue>
    | | | |     | `-DeclRefExpr 0x141827690 <col:9> 'char *' lvalue Var 0x14180e1e8 'password' 'char *'
    | | | |     `-ImplicitCastExpr 0x1418276e8 <col:18> 'int' <LValueToRValue>
    | | | |       `-DeclRefExpr 0x1418276b0 <col:18> 'int' lvalue Var 0x14180e150 'i' 'int'
    | | | `-CharacterLiteral 0x141827720 <col:24> 'int' 0
    | | `-BinaryOperator 0x1418277e0 <col:32, col:37> 'int' '!='
    | |   |-ImplicitCastExpr 0x1418277c8 <col:32> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x141827788 <col:32> 'int' lvalue Var 0x14180e150 'i' 'int'
    | |   `-IntegerLiteral 0x1418277a8 <col:37> 'int' 255
    | `-ReturnStmt 0x141827820 <line:15:9>
    `-BinaryOperator 0x141827958 <line:18:5, col:16> 'char *' contains-errors '='
      |-UnaryOperator 0x141827920 <col:5, col:6> 'char *' lvalue prefix '*' cannot overflow
      | `-ImplicitCastExpr 0x141827908 <col:6> 'char **' <LValueToRValue>
      |   `-DeclRefExpr 0x141827850 <col:6> 'char **' lvalue ParmVar 0x14180df58 'passptr' 'char **'
      `-RecoveryExpr 0x141827938 <col:16> '<dependent type>' contains-errors lvalue
