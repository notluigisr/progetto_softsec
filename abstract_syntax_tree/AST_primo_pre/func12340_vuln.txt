`-FunctionDecl 0x150144de8  line:1:1 ext2_set_acl 'int (struct inode *, struct posix_acl *, int)'
  |-ParmVarDecl 0x150128648 <col:14, col:28> col:28 used inode 'struct inode *'
  |-ParmVarDecl 0x150144c28 <col:35, col:53> col:53 used acl 'struct posix_acl *'
  |-ParmVarDecl 0x150144ca8 <col:58, col:62> col:62 used type 'int'
  `-CompoundStmt 0x150147f30 <line:2:1, line:45:1>
    |-DeclStmt 0x150144f70 <line:3:2, col:16>
    | `-VarDecl 0x150144f08 <col:2, col:6> col:6 used name_index 'int'
    |-DeclStmt 0x150145058 <line:4:2, col:20>
    | `-VarDecl 0x150144fa0 <col:2, col:16> col:8 used value 'void *' cinit
    |   `-RecoveryExpr 0x150145038 <col:16> '<dependent type>' contains-errors lvalue
    |-RecoveryExpr 0x150145150 <line:5:2, col:16> '<dependent type>' contains-errors lvalue
    | |-UnaryExprOrTypeTraitExpr 0x150145130 <col:2, col:9> 'unsigned long' contains-errors sizeof
    | | `-RecoveryExpr 0x150145110 <col:9> '<dependent type>' contains-errors lvalue
    | `-IntegerLiteral 0x1501450a8 <col:16> 'int' 0
    |-DeclStmt 0x150145200 <line:6:2, col:11>
    | `-VarDecl 0x150145198 <col:2, col:6> col:6 used error 'int'
    |-SwitchStmt 0x150145250 <line:8:2, line:32:2>
    | |-ImplicitCastExpr 0x150145238 <line:8:9> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x150145218 <col:9> 'int' lvalue ParmVar 0x150144ca8 'type' 'int'
    | `-CompoundStmt 0x1501473b0 <col:15, line:32:2>
    |   |-BinaryOperator 0x150145308 <line:10:4, col:17> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x150145290 <col:4> 'int' lvalue Var 0x150144f08 'name_index' 'int'
    |   | `-RecoveryExpr 0x1501452e8 <col:17> '<dependent type>' contains-errors lvalue
    |   |-IfStmt 0x150145a80 <line:11:4, line:21:4>
    |   | |-ImplicitCastExpr 0x150145348 <line:11:8> 'struct posix_acl *' <LValueToRValue>
    |   | | `-DeclRefExpr 0x150145328 <col:8> 'struct posix_acl *' lvalue ParmVar 0x150144c28 'acl' 'struct posix_acl *'
    |   | `-CompoundStmt 0x150145a60 <col:13, line:21:4>
    |   |   |-BinaryOperator 0x150145578 <line:12:5, col:53> 'int' contains-errors '='
    |   |   | |-DeclRefExpr 0x150145360 <col:5> 'int' lvalue Var 0x150145198 'error' 'int'
    |   |   | `-CallExpr 0x150145548 <col:13, col:53> '<dependent type>' contains-errors
    |   |   |   |-DeclRefExpr 0x150145490 <col:13> 'int ()' Function 0x1501453d8 'posix_acl_equiv_mode' 'int ()'
    |   |   |   |-DeclRefExpr 0x1501454b0 <col:34> 'struct posix_acl *' lvalue ParmVar 0x150144c28 'acl' 'struct posix_acl *'
    |   |   |   `-UnaryOperator 0x150145530 <col:39, col:47> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   |   |     `-RecoveryExpr 0x150145508 <col:40, col:47> '<dependent type>' contains-errors lvalue
    |   |   |       `-DeclRefExpr 0x1501454d0 <col:40> 'struct inode *' lvalue ParmVar 0x150128648 'inode' 'struct inode *'
    |   |   `-IfStmt 0x150145a30 <line:13:5, line:20:5> has_else
    |   |     |-BinaryOperator 0x1501455f0 <line:13:9, col:17> 'int' '<'
    |   |     | |-ImplicitCastExpr 0x1501455d8 <col:9> 'int' <LValueToRValue>
    |   |     | | `-DeclRefExpr 0x150145598 <col:9> 'int' lvalue Var 0x150145198 'error' 'int'
    |   |     | `-IntegerLiteral 0x1501455b8 <col:17> 'int' 0
    |   |     |-ReturnStmt 0x150145648 <line:14:6, col:13>
    |   |     | `-ImplicitCastExpr 0x150145630 <col:13> 'int' <LValueToRValue>
    |   |     |   `-DeclRefExpr 0x150145610 <col:13> 'int' lvalue Var 0x150145198 'error' 'int'
    |   |     `-CompoundStmt 0x150145a08 <line:15:10, line:20:5>
    |   |       |-BinaryOperator 0x150145710 <line:16:6, col:23> '<dependent type>' contains-errors '='
    |   |       | |-RecoveryExpr 0x150145690 <col:6, col:13> '<dependent type>' contains-errors lvalue
    |   |       | | `-DeclRefExpr 0x150145658 <col:6> 'struct inode *' lvalue ParmVar 0x150128648 'inode' 'struct inode *'
    |   |       | `-RecoveryExpr 0x1501456f0 <col:23> '<dependent type>' contains-errors lvalue
    |   |       |-CallExpr 0x150145898 <line:17:6, col:28> 'int'
    |   |       | |-ImplicitCastExpr 0x150145880 <col:6> 'int (*)()' <FunctionToPointerDecay>
    |   |       | | `-DeclRefExpr 0x150145810 <col:6> 'int ()' Function 0x150145758 'mark_inode_dirty' 'int ()'
    |   |       | `-ImplicitCastExpr 0x1501458c0 <col:23> 'struct inode *' <LValueToRValue>
    |   |       |   `-DeclRefExpr 0x150145830 <col:23> 'struct inode *' lvalue ParmVar 0x150128648 'inode' 'struct inode *'
    |   |       `-IfStmt 0x1501459e8 <line:18:6, line:19:13>
    |   |         |-BinaryOperator 0x150145930 <line:18:10, col:19> 'int' '=='
    |   |         | |-ImplicitCastExpr 0x150145918 <col:10> 'int' <LValueToRValue>
    |   |         | | `-DeclRefExpr 0x1501458d8 <col:10> 'int' lvalue Var 0x150145198 'error' 'int'
    |   |         | `-IntegerLiteral 0x1501458f8 <col:19> 'int' 0
    |   |         `-BinaryOperator 0x1501459c8 <line:19:7, col:13> 'struct posix_acl *' contains-errors '='
    |   |           |-DeclRefExpr 0x150145950 <col:7> 'struct posix_acl *' lvalue ParmVar 0x150144c28 'acl' 'struct posix_acl *'
    |   |           `-RecoveryExpr 0x1501459a8 <col:13> '<dependent type>' contains-errors lvalue
    |   |-BreakStmt 0x150145aa0 <line:22:4>
    |   |-BinaryOperator 0x150145b38 <line:25:4, col:17> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x150145ac0 <col:4> 'int' lvalue Var 0x150144f08 'name_index' 'int'
    |   | `-RecoveryExpr 0x150145b18 <col:17> '<dependent type>' contains-errors lvalue
    |   |-IfStmt 0x1501472c0 <line:26:4, line:27:28>
    |   | |-UnaryOperator 0x150147160 <line:26:8, col:30> '<dependent type>' contains-errors prefix '!' cannot overflow
    |   | | `-CallExpr 0x150147138 <col:9, col:30> '<dependent type>' contains-errors
    |   | |   |-DeclRefExpr 0x1501470b8 <col:9> 'int ()' Function 0x150147000 'S_ISDIR' 'int ()'
    |   | |   `-RecoveryExpr 0x150147110 <col:17, col:24> '<dependent type>' contains-errors lvalue
    |   | |     `-DeclRefExpr 0x1501470d8 <col:17> 'struct inode *' lvalue ParmVar 0x150128648 'inode' 'struct inode *'
    |   | `-ReturnStmt 0x1501472b0 <line:27:5, col:28>
    |   |   `-ConditionalOperator 0x150147280 <col:12, col:28> '<dependent type>' contains-errors
    |   |     |-DeclRefExpr 0x150147178 <col:12> 'struct posix_acl *' lvalue ParmVar 0x150144c28 'acl' 'struct posix_acl *'
    |   |     |-UnaryOperator 0x150147268 <col:18, col:19> '<dependent type>' contains-errors prefix '-' cannot overflow
    |   |     | `-ImplicitCastExpr 0x150147250 <col:19> '<dependent type>' contains-errors <LValueToRValue>
    |   |     |   `-RecoveryExpr 0x150147230 <col:19> '<dependent type>' contains-errors lvalue
    |   |     `-IntegerLiteral 0x1501471e0 <col:28> 'int' 0
    |   |-BreakStmt 0x1501472e0 <line:28:4>
    |   `-DefaultStmt 0x150147390 <line:30:3, line:31:12>
    |     `-ReturnStmt 0x150147380 <col:4, col:12>
    |       `-UnaryOperator 0x150147368 <col:11, col:12> '<dependent type>' contains-errors prefix '-' cannot overflow
    |         `-ImplicitCastExpr 0x150147350 <col:12> '<dependent type>' contains-errors <LValueToRValue>
    |           `-RecoveryExpr 0x150147330 <col:12> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x1501478e8 <line:33:3, line:37:2>
    | |-ImplicitCastExpr 0x150147418 <line:33:7> 'struct posix_acl *' <LValueToRValue>
    | | `-DeclRefExpr 0x1501473f8 <col:7> 'struct posix_acl *' lvalue ParmVar 0x150144c28 'acl' 'struct posix_acl *'
    | `-CompoundStmt 0x1501478d0 <col:12, line:37:2>
    |   `-IfStmt 0x1501478b0 <line:35:3, line:36:29>
    |     |-CallExpr 0x1501476a8 <line:35:7, col:19> 'int' contains-errors
    |     | |-ImplicitCastExpr 0x150147690 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |     | | `-DeclRefExpr 0x150147650 <col:7> 'int ()' Function 0x150147598 'IS_ERR' 'int ()'
    |     | `-ImplicitCastExpr 0x1501476d0 <col:14> 'void *' contains-errors <LValueToRValue>
    |     |   `-DeclRefExpr 0x150147670 <col:14> 'void *' contains-errors lvalue Var 0x150144fa0 'value' 'void *'
    |     `-ReturnStmt 0x1501478a0 <line:36:4, col:29>
    |       `-CStyleCastExpr 0x150147878 <col:11, col:29> 'int' contains-errors <NoOp>
    |         `-CallExpr 0x150147820 <col:16, col:29> 'int' contains-errors
    |           |-ImplicitCastExpr 0x150147808 <col:16> 'int (*)()' <FunctionToPointerDecay>
    |           | `-DeclRefExpr 0x1501477c8 <col:16> 'int ()' Function 0x150147710 'PTR_ERR' 'int ()'
    |           `-ImplicitCastExpr 0x150147848 <col:24> 'void *' contains-errors <LValueToRValue>
    |             `-DeclRefExpr 0x1501477e8 <col:24> 'void *' contains-errors lvalue Var 0x150144fa0 'value' 'void *'
    |-CallExpr 0x150147c40 <line:41:2, col:13> 'int' contains-errors
    | |-ImplicitCastExpr 0x150147c28 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x150147be8 <col:2> 'int ()' Function 0x150147b30 'kfree' 'int ()'
    | `-ImplicitCastExpr 0x150147c68 <col:8> 'void *' contains-errors <LValueToRValue>
    |   `-DeclRefExpr 0x150147c08 <col:8> 'void *' contains-errors lvalue Var 0x150144fa0 'value' 'void *'
    |-IfStmt 0x150147ec8 <line:42:2, line:43:34>
    | |-UnaryOperator 0x150147cb8 <line:42:6, col:7> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x150147ca0 <col:7> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x150147c80 <col:7> 'int' lvalue Var 0x150145198 'error' 'int'
    | `-CallExpr 0x150147e48 <line:43:3, col:34> 'int'
    |   |-ImplicitCastExpr 0x150147e30 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x150147db0 <col:3> 'int ()' Function 0x150147cf8 'set_cached_acl' 'int ()'
    |   |-ImplicitCastExpr 0x150147e80 <col:18> 'struct inode *' <LValueToRValue>
    |   | `-DeclRefExpr 0x150147dd0 <col:18> 'struct inode *' lvalue ParmVar 0x150128648 'inode' 'struct inode *'
    |   |-ImplicitCastExpr 0x150147e98 <col:25> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x150147df0 <col:25> 'int' lvalue ParmVar 0x150144ca8 'type' 'int'
    |   `-ImplicitCastExpr 0x150147eb0 <col:31> 'struct posix_acl *' <LValueToRValue>
    |     `-DeclRefExpr 0x150147e10 <col:31> 'struct posix_acl *' lvalue ParmVar 0x150144c28 'acl' 'struct posix_acl *'
    `-ReturnStmt 0x150147f20 <line:44:2, col:9>
      `-ImplicitCastExpr 0x150147f08 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x150147ee8 <col:9> 'int' lvalue Var 0x150145198 'error' 'int'
