`-FunctionDecl 0x105826758  line:1:5 idr_get_new_above 'int (struct idr *, void *, int, int *)'
  |-ParmVarDecl 0x10580e248 <col:23, col:35> col:35 used idp 'struct idr *'
  |-ParmVarDecl 0x10580e2c8 <col:40, col:46> col:46 used ptr 'void *'
  |-ParmVarDecl 0x10580e348 <col:51, col:55> col:55 used starting_id 'int'
  |-ParmVarDecl 0x105826600 <col:68, col:73> col:73 used id 'int *'
  `-CompoundStmt 0x1058272c0 <line:2:1, line:13:1>
    |-DeclStmt 0x105826a88 <line:3:2, col:37>
    | |-RecordDecl 0x105826868 <col:2, col:9> col:9 struct idr_layer
    | `-VarDecl 0x105826a08 <col:2, col:20> col:20 invalid pa 'struct idr_layer *'
    |-DeclStmt 0x105826b20 <line:4:2, col:8>
    | `-VarDecl 0x105826ab8 <col:2, col:6> col:6 used rv 'int'
    |-BinaryOperator 0x105826d78 <line:6:2, col:54> 'int' contains-errors '='
    | |-DeclRefExpr 0x105826b38 <col:2> 'int' lvalue Var 0x105826ab8 'rv' 'int'
    | `-CallExpr 0x105826d30 <col:7, col:54> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x105826c70 <col:7> 'int ()' Function 0x105826bb8 'idr_get_empty_slot' 'int ()'
    |   |-DeclRefExpr 0x105826c90 <col:26> 'struct idr *' lvalue ParmVar 0x10580e248 'idp' 'struct idr *'
    |   |-DeclRefExpr 0x105826cb0 <col:31> 'int' lvalue ParmVar 0x10580e348 'starting_id' 'int'
    |   |-RecoveryExpr 0x105826cd0 <col:44> '<dependent type>' contains-errors lvalue
    |   |-IntegerLiteral 0x105826cf0 <col:48> 'int' 0
    |   `-DeclRefExpr 0x105826d10 <col:51> 'struct idr *' lvalue ParmVar 0x10580e248 'idp' 'struct idr *'
    |-IfStmt 0x105827030 <line:7:2, line:8:36>
    | |-BinaryOperator 0x105826df0 <line:7:6, col:11> 'int' '<'
    | | |-ImplicitCastExpr 0x105826dd8 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x105826d98 <col:6> 'int' lvalue Var 0x105826ab8 'rv' 'int'
    | | `-IntegerLiteral 0x105826db8 <col:11> 'int' 0
    | `-ReturnStmt 0x105827020 <line:8:3, col:36>
    |   `-ConditionalOperator 0x105826ff0 <col:10, col:36> '<dependent type>' contains-errors
    |     |-BinaryOperator 0x105826f80 <col:10, col:17> 'int' contains-errors '=='
    |     | |-DeclRefExpr 0x105826e10 <col:10> 'int' lvalue Var 0x105826ab8 'rv' 'int'
    |     | `-UnaryOperator 0x105826f68 <col:16, col:17> '<dependent type>' contains-errors prefix '-' cannot overflow
    |     |   `-ImplicitCastExpr 0x105826f50 <col:17> '<dependent type>' contains-errors <LValueToRValue>
    |     |     `-RecoveryExpr 0x105826f30 <col:17> '<dependent type>' contains-errors lvalue
    |     |-UnaryOperator 0x105826fd8 <col:26, col:27> '<dependent type>' contains-errors prefix '-' cannot overflow
    |     | `-ImplicitCastExpr 0x105826fc0 <col:27> '<dependent type>' contains-errors <LValueToRValue>
    |     |   `-RecoveryExpr 0x105826fa0 <col:27> '<dependent type>' contains-errors lvalue
    |     `-DeclRefExpr 0x105826ee0 <col:36> 'int' lvalue Var 0x105826ab8 'rv' 'int'
    |-CallExpr 0x1058271b0 <line:10:2, col:27> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x105827130 <col:2> 'int ()' Function 0x105827078 'idr_fill_slot' 'int ()'
    | |-DeclRefExpr 0x105827150 <col:16> 'void *' lvalue ParmVar 0x10580e2c8 'ptr' 'void *'
    | |-DeclRefExpr 0x105827170 <col:21> 'int' lvalue Var 0x105826ab8 'rv' 'int'
    | `-RecoveryExpr 0x105827190 <col:25> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x105827270 <line:11:2, col:8> 'int' '='
    | |-UnaryOperator 0x105827220 <col:2, col:3> 'int' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x105827208 <col:3> 'int *' <LValueToRValue>
    | |   `-DeclRefExpr 0x1058271e8 <col:3> 'int *' lvalue ParmVar 0x105826600 'id' 'int *'
    | `-ImplicitCastExpr 0x105827258 <col:8> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x105827238 <col:8> 'int' lvalue Var 0x105826ab8 'rv' 'int'
    `-ReturnStmt 0x1058272b0 <line:12:2, col:9>
      `-IntegerLiteral 0x105827290 <col:9> 'int' 0
