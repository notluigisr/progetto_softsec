`-FunctionDecl 0x1498407a8  line:1:1 PHP_FUNCTION 'int (int)'
  |-ParmVarDecl 0x1498406d8 <col:14> col:14 pcntl_waitpid 'int'
  `-CompoundStmt 0x149858698 <line:2:1, line:24:1>
    |-DeclStmt 0x1498409f0 <line:3:2, col:23>
    | |-VarDecl 0x1498408b8 <col:2, col:7> col:7 pid 'long'
    | `-VarDecl 0x149840938 <col:2, col:22> col:12 used options 'long' cinit
    |   `-ImplicitCastExpr 0x1498409c0 <col:22> 'long' <IntegralCast>
    |     `-IntegerLiteral 0x1498409a0 <col:22> 'int' 0
    |-DeclStmt 0x149840ad0 <line:5:2, col:12>
    | `-VarDecl 0x149840a68 <col:2, col:6> col:6 used status 'int'
    |-IfStmt 0x149840dd0 <line:8:2, line:9:3>
    | |-RecoveryExpr 0x149840da0 <line:8:6, col:92> '_Bool' contains-errors
    | `-ReturnStmt 0x149840dc0 <line:9:3>
    |-CallExpr 0x149857fe0 <line:11:2, col:30> 'int'
    | |-ImplicitCastExpr 0x149857fc8 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x149857ee0 <col:2> 'int ()' Function 0x149857e28 'convert_to_long_ex' 'int ()'
    | `-UnaryOperator 0x149857fb0 <col:21, col:22> 'int *' prefix '&' cannot overflow
    |   `-DeclRefExpr 0x149857f58 <col:22> 'int' lvalue Var 0x149840a68 'status' 'int'
    |-BinaryOperator 0x149858200 <line:13:2, col:28> 'int' '='
    | |-DeclRefExpr 0x149858008 <col:2> 'int' lvalue Var 0x149840a68 'status' 'int'
    | `-CallExpr 0x1498581c0 <col:11, col:28> 'int'
    |   |-ImplicitCastExpr 0x1498581a8 <col:11> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x149858108 <col:11> 'int ()' Function 0x149858050 'Z_LVAL_P' 'int ()'
    |   `-ImplicitCastExpr 0x1498581e8 <col:20> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x149858188 <col:20> 'int' lvalue Var 0x149840a68 'status' 'int'
    `-IfStmt 0x149858538 <line:17:2, line:19:2>
      |-BinaryOperator 0x149858408 <line:17:6, col:17> 'int' contains-errors '<'
      | |-RecoveryExpr 0x1498583e8 <col:6> '<dependent type>' contains-errors lvalue
      | `-IntegerLiteral 0x1498583a8 <col:17> 'int' 0
      `-CompoundStmt 0x149858528 <col:20, line:19:2>
