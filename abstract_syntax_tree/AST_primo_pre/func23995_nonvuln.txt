`-FunctionDecl 0x1491283d8  line:1:12 invalid cmykvalidate 'int (int *, int *, float *, int)' static
  |-ParmVarDecl 0x149128128 <col:25, col:34> col:34 invalid i_ctx_p 'int *'
  |-ParmVarDecl 0x1491281a8 <col:43, col:48> col:48 invalid space 'int *'
  |-ParmVarDecl 0x149128258 <col:55, col:62> col:62 used values 'float *'
  |-ParmVarDecl 0x1491282d8 <col:70, col:74> col:74 used num_comps 'int'
  `-CompoundStmt 0x149142330 <line:2:1, line:25:1>
    |-DeclStmt 0x149128520 <line:4:5, col:10>
    | `-VarDecl 0x1491284b8 <col:5, col:9> col:9 used i 'int'
    |-IfStmt 0x1491287b8 <line:6:5, line:7:45>
    | |-BinaryOperator 0x149128590 <line:6:9, col:21> 'int' '<'
    | | |-ImplicitCastExpr 0x149128578 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x149128538 <col:9> 'int' lvalue ParmVar 0x1491282d8 'num_comps' 'int'
    | | `-IntegerLiteral 0x149128558 <col:21> 'int' 4
    | `-CallExpr 0x149128790 <line:7:9, col:45> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x149128710 <col:9> 'int ()' Function 0x149128658 'return_error' 'int ()'
    |   `-RecoveryExpr 0x149128770 <col:22> '<dependent type>' contains-errors lvalue
    |-ForStmt 0x149141d50 <line:10:5, line:14:5>
    | |-BinaryOperator 0x149141840 <line:10:10, col:12> 'int' '='
    | | |-DeclRefExpr 0x149141800 <col:10> 'int' lvalue Var 0x1491284b8 'i' 'int'
    | | `-IntegerLiteral 0x149141820 <col:12> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x1491418b8 <col:14, col:18> 'int' '<'
    | | |-ImplicitCastExpr 0x1491418a0 <col:14> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x149141860 <col:14> 'int' lvalue Var 0x1491284b8 'i' 'int'
    | | `-IntegerLiteral 0x149141880 <col:18> 'int' 4
    | |-UnaryOperator 0x1491418f8 <col:20, col:21> 'int' postfix '++'
    | | `-DeclRefExpr 0x1491418d8 <col:20> 'int' lvalue Var 0x1491284b8 'i' 'int'
    | `-CompoundStmt 0x149141d38 <col:25, line:14:5>
    |   `-IfStmt 0x149141d18 <line:11:9, line:12:44>
    |     |-BinaryOperator 0x149141c50 <line:11:13, col:65> 'int' contains-errors '&&'
    |     | |-UnaryOperator 0x149141bb0 <col:13, col:38> '<dependent type>' contains-errors prefix '!' cannot overflow
    |     | | `-CallExpr 0x149141b80 <col:14, col:38> '<dependent type>' contains-errors
    |     | |   |-DeclRefExpr 0x1491419f0 <col:14> 'int ()' Function 0x149141938 'r_has_type' 'int ()'
    |     | |   |-RecoveryExpr 0x149141b40 <col:25> '<dependent type>' contains-errors lvalue
    |     | |   `-RecoveryExpr 0x149141b60 <col:29> '<dependent type>' contains-errors lvalue
    |     | `-UnaryOperator 0x149141c38 <col:43, col:65> '<dependent type>' contains-errors prefix '!' cannot overflow
    |     |   `-CallExpr 0x149141c08 <col:44, col:65> '<dependent type>' contains-errors
    |     |     |-DeclRefExpr 0x149141a88 <col:44> 'int ()' Function 0x149141938 'r_has_type' 'int ()'
    |     |     |-RecoveryExpr 0x149141bc8 <col:55> '<dependent type>' contains-errors lvalue
    |     |     `-RecoveryExpr 0x149141be8 <col:59> '<dependent type>' contains-errors lvalue
    |     `-CallExpr 0x149141cf0 <line:12:13, col:44> '<dependent type>' contains-errors
    |       |-DeclRefExpr 0x149141c70 <col:13> 'int ()' Function 0x149128658 'return_error' 'int ()'
    |       `-RecoveryExpr 0x149141cd0 <col:26> '<dependent type>' contains-errors lvalue
    |-ForStmt 0x1491422c8 <line:16:5, line:22:5>
    | |-BinaryOperator 0x149141dc8 <line:16:10, col:12> 'int' '='
    | | |-DeclRefExpr 0x149141d88 <col:10> 'int' lvalue Var 0x1491284b8 'i' 'int'
    | | `-IntegerLiteral 0x149141da8 <col:12> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x149141e40 <col:14, col:18> 'int' '<'
    | | |-ImplicitCastExpr 0x149141e28 <col:14> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x149141de8 <col:14> 'int' lvalue Var 0x1491284b8 'i' 'int'
    | | `-IntegerLiteral 0x149141e08 <col:18> 'int' 4
    | |-UnaryOperator 0x149141e80 <col:21, col:22> 'int' postfix '++'
    | | `-DeclRefExpr 0x149141e60 <col:21> 'int' lvalue Var 0x1491284b8 'i' 'int'
    | `-CompoundStmt 0x1491422a8 <col:26, line:22:5>
    |   |-IfStmt 0x149142080 <line:17:9, line:18:25>
    |   | |-BinaryOperator 0x149141f78 <line:17:13, col:25> 'int' '>'
    |   | | |-ImplicitCastExpr 0x149141f60 <col:13, col:21> 'double' <FloatingCast>
    |   | | | `-ImplicitCastExpr 0x149141f48 <col:13, col:21> 'float' <LValueToRValue>
    |   | | |   `-ArraySubscriptExpr 0x149141f08 <col:13, col:21> 'float' lvalue
    |   | | |     |-ImplicitCastExpr 0x149141ed8 <col:13> 'float *' <LValueToRValue>
    |   | | |     | `-DeclRefExpr 0x149141e98 <col:13> 'float *' lvalue ParmVar 0x149128258 'values' 'float *'
    |   | | |     `-ImplicitCastExpr 0x149141ef0 <col:20> 'int' <LValueToRValue>
    |   | | |       `-DeclRefExpr 0x149141eb8 <col:20> 'int' lvalue Var 0x1491284b8 'i' 'int'
    |   | | `-FloatingLiteral 0x149141f28 <col:25> 'double' 1.000000e+00
    |   | `-BinaryOperator 0x149142060 <line:18:13, col:25> 'float' '='
    |   |   |-ArraySubscriptExpr 0x149142008 <col:13, col:21> 'float' lvalue
    |   |   | |-ImplicitCastExpr 0x149141fd8 <col:13> 'float *' <LValueToRValue>
    |   |   | | `-DeclRefExpr 0x149141f98 <col:13> 'float *' lvalue ParmVar 0x149128258 'values' 'float *'
    |   |   | `-ImplicitCastExpr 0x149141ff0 <col:20> 'int' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x149141fb8 <col:20> 'int' lvalue Var 0x1491284b8 'i' 'int'
    |   |   `-ImplicitCastExpr 0x149142048 <col:25> 'float' <FloatingCast>
    |   |     `-FloatingLiteral 0x149142028 <col:25> 'double' 1.000000e+00
    |   `-IfStmt 0x149142288 <line:20:9, line:21:25>
    |     |-BinaryOperator 0x149142180 <line:20:13, col:25> 'int' '<'
    |     | |-ImplicitCastExpr 0x149142168 <col:13, col:21> 'double' <FloatingCast>
    |     | | `-ImplicitCastExpr 0x149142150 <col:13, col:21> 'float' <LValueToRValue>
    |     | |   `-ArraySubscriptExpr 0x149142110 <col:13, col:21> 'float' lvalue
    |     | |     |-ImplicitCastExpr 0x1491420e0 <col:13> 'float *' <LValueToRValue>
    |     | |     | `-DeclRefExpr 0x1491420a0 <col:13> 'float *' lvalue ParmVar 0x149128258 'values' 'float *'
    |     | |     `-ImplicitCastExpr 0x1491420f8 <col:20> 'int' <LValueToRValue>
    |     | |       `-DeclRefExpr 0x1491420c0 <col:20> 'int' lvalue Var 0x1491284b8 'i' 'int'
    |     | `-FloatingLiteral 0x149142130 <col:25> 'double' 0.000000e+00
    |     `-BinaryOperator 0x149142268 <line:21:13, col:25> 'float' '='
    |       |-ArraySubscriptExpr 0x149142210 <col:13, col:21> 'float' lvalue
    |       | |-ImplicitCastExpr 0x1491421e0 <col:13> 'float *' <LValueToRValue>
    |       | | `-DeclRefExpr 0x1491421a0 <col:13> 'float *' lvalue ParmVar 0x149128258 'values' 'float *'
    |       | `-ImplicitCastExpr 0x1491421f8 <col:20> 'int' <LValueToRValue>
    |       |   `-DeclRefExpr 0x1491421c0 <col:20> 'int' lvalue Var 0x1491284b8 'i' 'int'
    |       `-ImplicitCastExpr 0x149142250 <col:25> 'float' <FloatingCast>
    |         `-FloatingLiteral 0x149142230 <col:25> 'double' 0.000000e+00
    `-ReturnStmt 0x149142320 <line:24:5, col:12>
      `-IntegerLiteral 0x149142300 <col:12> 'int' 0
