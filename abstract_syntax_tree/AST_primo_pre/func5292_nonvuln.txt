`-FunctionDecl 0x14a93b800  line:1:13 invalid vblur 'void (int *, int, const int *, int, int, int, int, int, int **)' static
  |-ParmVarDecl 0x14a922128 <col:19, col:28> col:28 invalid dst 'int *'
  |-ParmVarDecl 0x14a9221a8 <col:33, col:37> col:37 used dst_linesize 'int'
  |-ParmVarDecl 0x14a922228 <col:51, col:66> col:66 invalid src 'const int *'
  |-ParmVarDecl 0x14a9222a8 <col:71, col:75> col:75 used src_linesize 'int'
  |-ParmVarDecl 0x14a922328 <line:2:19, col:23> col:23 used w 'int'
  |-ParmVarDecl 0x14a9223a8 <col:26, col:30> col:30 used h 'int'
  |-ParmVarDecl 0x14a922428 <col:33, col:37> col:37 used radius 'int'
  |-ParmVarDecl 0x14a9224a8 <col:45, col:49> col:49 used power 'int'
  |-ParmVarDecl 0x14a922620 <col:56, col:71> col:65 invalid temp 'int **'
  `-CompoundStmt 0x14a93bf68 <line:3:1, line:12:1>
    |-DeclStmt 0x14a93b970 <line:4:5, col:10>
    | `-VarDecl 0x14a93b908 <col:5, col:9> col:9 used x 'int'
    |-IfStmt 0x14a93ba90 <line:6:5, line:7:9>
    | |-BinaryOperator 0x14a93ba60 <line:6:9, col:31> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x14a93b9e0 <col:9, col:19> 'int' '=='
    | | | |-ImplicitCastExpr 0x14a93b9c8 <col:9> 'int' <LValueToRValue>
    | | | | `-DeclRefExpr 0x14a93b988 <col:9> 'int' lvalue ParmVar 0x14a922428 'radius' 'int'
    | | | `-IntegerLiteral 0x14a93b9a8 <col:19> 'int' 0
    | | `-BinaryOperator 0x14a93ba40 <col:24, col:31> 'int' contains-errors '=='
    | |   |-RecoveryExpr 0x14a93ba00 <col:24> '<dependent type>' contains-errors lvalue
    | |   `-RecoveryExpr 0x14a93ba20 <col:31> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x14a93ba80 <line:7:9>
    `-ForStmt 0x14a93bf30 <line:9:5, line:11:42>
      |-BinaryOperator 0x14a93baf0 <line:9:10, col:14> 'int' '='
      | |-DeclRefExpr 0x14a93bab0 <col:10> 'int' lvalue Var 0x14a93b908 'x' 'int'
      | `-IntegerLiteral 0x14a93bad0 <col:14> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x14a93bb80 <col:17, col:21> 'int' '<'
      | |-ImplicitCastExpr 0x14a93bb50 <col:17> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x14a93bb10 <col:17> 'int' lvalue Var 0x14a93b908 'x' 'int'
      | `-ImplicitCastExpr 0x14a93bb68 <col:21> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x14a93bb30 <col:21> 'int' lvalue ParmVar 0x14a922328 'w' 'int'
      |-UnaryOperator 0x14a93bbc0 <col:24, col:25> 'int' postfix '++'
      | `-DeclRefExpr 0x14a93bba0 <col:24> 'int' lvalue Var 0x14a93b908 'x' 'int'
      `-CallExpr 0x14a93bed0 <line:10:9, line:11:42> '<dependent type>' contains-errors
        |-DeclRefExpr 0x14a93bd30 <line:10:9> 'int ()' Function 0x14a93bc78 'blur_power' 'int ()'
        |-BinaryOperator 0x14a93bd90 <col:20, col:26> '<dependent type>' contains-errors '+'
        | |-RecoveryExpr 0x14a93bd50 <col:20> '<dependent type>' contains-errors lvalue
        | `-DeclRefExpr 0x14a93bd70 <col:26> 'int' lvalue Var 0x14a93b908 'x' 'int'
        |-DeclRefExpr 0x14a93bdb0 <col:29> 'int' lvalue ParmVar 0x14a9221a8 'dst_linesize' 'int'
        |-BinaryOperator 0x14a93be10 <col:43, col:49> '<dependent type>' contains-errors '+'
        | |-RecoveryExpr 0x14a93bdd0 <col:43> '<dependent type>' contains-errors lvalue
        | `-DeclRefExpr 0x14a93bdf0 <col:49> 'int' lvalue Var 0x14a93b908 'x' 'int'
        |-DeclRefExpr 0x14a93be30 <col:52> 'int' lvalue ParmVar 0x14a9222a8 'src_linesize' 'int'
        |-DeclRefExpr 0x14a93be50 <line:11:20> 'int' lvalue ParmVar 0x14a9223a8 'h' 'int'
        |-DeclRefExpr 0x14a93be70 <col:23> 'int' lvalue ParmVar 0x14a922428 'radius' 'int'
        |-DeclRefExpr 0x14a93be90 <col:31> 'int' lvalue ParmVar 0x14a9224a8 'power' 'int'
        `-RecoveryExpr 0x14a93beb0 <col:38> '<dependent type>' contains-errors lvalue
