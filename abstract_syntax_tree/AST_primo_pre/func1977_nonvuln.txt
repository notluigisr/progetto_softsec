`-FunctionDecl 0x123826600  line:1:6 bitbag_set_bit 'void (struct bitbag *, int)'
  |-ParmVarDecl 0x12380e248 <col:21, col:36> col:36 used bb 'struct bitbag *'
  |-ParmVarDecl 0x12380e2c8 <col:40, col:44> col:44 used ndx 'int'
  `-CompoundStmt 0x123827008 <line:2:1, line:12:1>
    |-DeclStmt 0x123826830 <line:3:2, col:35>
    | `-VarDecl 0x123826718 <col:2, col:19> col:6 used slot 'int' cinit
    |   `-BinaryOperator 0x123826810 <col:13, col:19> '<dependent type>' contains-errors '/'
    |     |-DeclRefExpr 0x123826780 <col:13> 'int' lvalue ParmVar 0x12380e2c8 'ndx' 'int'
    |     `-RecoveryExpr 0x1238267f0 <col:19> '<dependent type>' contains-errors lvalue
    |-CompoundAssignOperator 0x1238268d0 <line:4:2, col:9> 'int' contains-errors '%=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    | |-DeclRefExpr 0x123826848 <col:2> 'int' lvalue ParmVar 0x12380e2c8 'ndx' 'int'
    | `-RecoveryExpr 0x1238268b0 <col:9> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x123826d60 <line:6:2, line:9:2>
    | |-UnaryOperator 0x1238269e8 <line:6:6, col:20> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x1238269d0 <col:7, col:20> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-ArraySubscriptExpr 0x1238269b0 <col:7, col:20> '<dependent type>' contains-errors lvalue
    | |     |-ImplicitCastExpr 0x123826980 <col:7, col:11> '<dependent type>' contains-errors <LValueToRValue>
    | |     | `-RecoveryExpr 0x123826938 <col:7, col:11> '<dependent type>' contains-errors lvalue
    | |     |   `-DeclRefExpr 0x123826900 <col:7> 'struct bitbag *' lvalue ParmVar 0x12380e248 'bb' 'struct bitbag *'
    | |     `-ImplicitCastExpr 0x123826998 <col:16> 'int' contains-errors <LValueToRValue>
    | |       `-DeclRefExpr 0x123826960 <col:16> 'int' contains-errors lvalue Var 0x123826718 'slot' 'int'
    | `-CompoundStmt 0x123826d48 <col:23, line:9:2>
    |   `-IfStmt 0x123826d28 <line:7:3, line:8:23>
    |     |-RecoveryExpr 0x123826ae8 <line:7:7, col:62> '_Bool' contains-errors
    |     `-CallExpr 0x123826ce8 <line:8:4, col:23> 'int'
    |       |-ImplicitCastExpr 0x123826cd0 <col:4> 'int (*)()' <FunctionToPointerDecay>
    |       | `-DeclRefExpr 0x123826c20 <col:4> 'int ()' Function 0x123826b68 'out_of_memory' 'int ()'
    |       `-ImplicitCastExpr 0x123826d10 <col:18> 'char *' <ArrayToPointerDecay>
    |         `-StringLiteral 0x123826c80 <col:18> 'char[4]' lvalue "STR"
    `-CompoundAssignOperator 0x123826fd8 <line:11:2, col:43> '<dependent type>' contains-errors '|=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
      |-ArraySubscriptExpr 0x123826ee0 <col:2, col:23> '<dependent type>' contains-errors lvalue
      | |-ImplicitCastExpr 0x123826ec8 <col:2, col:15> '<dependent type>' contains-errors <LValueToRValue>
      | | `-ArraySubscriptExpr 0x123826e30 <col:2, col:15> '<dependent type>' contains-errors lvalue
      | |   |-ImplicitCastExpr 0x123826e00 <col:2, col:6> '<dependent type>' contains-errors <LValueToRValue>
      | |   | `-RecoveryExpr 0x123826db8 <col:2, col:6> '<dependent type>' contains-errors lvalue
      | |   |   `-DeclRefExpr 0x123826d80 <col:2> 'struct bitbag *' lvalue ParmVar 0x12380e248 'bb' 'struct bitbag *'
      | |   `-ImplicitCastExpr 0x123826e18 <col:11> 'int' contains-errors <LValueToRValue>
      | |     `-DeclRefExpr 0x123826de0 <col:11> 'int' contains-errors lvalue Var 0x123826718 'slot' 'int'
      | `-BinaryOperator 0x123826ea8 <col:17, col:21> 'int' '/'
      |   |-ImplicitCastExpr 0x123826e90 <col:17> 'int' <LValueToRValue>
      |   | `-DeclRefExpr 0x123826e50 <col:17> 'int' lvalue ParmVar 0x12380e2c8 'ndx' 'int'
      |   `-IntegerLiteral 0x123826e70 <col:21> 'int' 32
      `-BinaryOperator 0x123826fb8 <col:28, col:43> 'unsigned int' '<<'
        |-IntegerLiteral 0x123826f00 <col:28> 'unsigned int' 1
        `-ParenExpr 0x123826f98 <col:34, col:43> 'int'
          `-BinaryOperator 0x123826f78 <col:35, col:41> 'int' '%'
            |-ImplicitCastExpr 0x123826f60 <col:35> 'int' <LValueToRValue>
            | `-DeclRefExpr 0x123826f20 <col:35> 'int' lvalue ParmVar 0x12380e2c8 'ndx' 'int'
            `-IntegerLiteral 0x123826f40 <col:41> 'int' 32
