`-FunctionDecl 0x12986ce98  line:1:1 _asn1_get_indefinite_length_string 'int (const unsigned char *, int *)'
  |-ParmVarDecl 0x12986cd08 <col:37, col:58> col:58 used der 'const unsigned char *'
  |-ParmVarDecl 0x12986cdb8 <col:63, col:68> col:68 used len 'int *'
  `-CompoundStmt 0x12a81bcd0 <line:2:1, line:48:1>
    |-DeclStmt 0x12986d1c0 <line:3:3, col:38>
    | |-VarDecl 0x12986cfb0 <col:3, col:7> col:7 used len2 'int'
    | |-VarDecl 0x12986d030 <col:3, col:13> col:13 used len3 'int'
    | |-VarDecl 0x12986d0b0 <col:3, col:19> col:19 used counter 'int'
    | `-VarDecl 0x12986d130 <col:3, col:28> col:28 used indefinite 'int'
    |-DeclStmt 0x12986d258 <line:4:3, col:20>
    | `-VarDecl 0x12986d1f0 <col:3, col:17> col:17 used tag 'unsigned long'
    |-DeclStmt 0x12986d2f0 <line:5:3, col:22>
    | `-VarDecl 0x12986d288 <col:3, col:17> col:17 used class 'unsigned char'
    |-BinaryOperator 0x12986d388 <line:7:3, col:26> 'int' '='
    | |-DeclRefExpr 0x12986d308 <col:3> 'int' lvalue Var 0x12986d0b0 'counter' 'int'
    | `-BinaryOperator 0x12986d368 <col:13, col:26> 'int' '='
    |   |-DeclRefExpr 0x12986d328 <col:13> 'int' lvalue Var 0x12986d130 'indefinite' 'int'
    |   `-IntegerLiteral 0x12986d348 <col:26> 'int' 0
    |-WhileStmt 0x12a81bbc0 <line:9:3, line:43:5>
    | |-IntegerLiteral 0x12986d3a8 <line:9:10> 'int' 1
    | `-CompoundStmt 0x12a81bb70 <line:10:5, line:43:5>
    |   |-IfStmt 0x12a819d08 <line:11:7, line:12:9>
    |   | |-BinaryOperator 0x12a819c88 <line:11:11, col:20> 'int' '<'
    |   | | |-ImplicitCastExpr 0x12a819c58 <col:11, col:16> 'int' <LValueToRValue>
    |   | | | `-ParenExpr 0x12a819c18 <col:11, col:16> 'int' lvalue
    |   | | |   `-UnaryOperator 0x12a819c00 <col:12, col:13> 'int' lvalue prefix '*' cannot overflow
    |   | | |     `-ImplicitCastExpr 0x12986d3e8 <col:13> 'int *' <LValueToRValue>
    |   | | |       `-DeclRefExpr 0x12986d3c8 <col:13> 'int *' lvalue ParmVar 0x12986cdb8 'len' 'int *'
    |   | | `-ImplicitCastExpr 0x12a819c70 <col:20> 'int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x12a819c38 <col:20> 'int' lvalue Var 0x12986d0b0 'counter' 'int'
    |   | `-ReturnStmt 0x12a819cf8 <line:12:2, col:9>
    |   |   `-RecoveryExpr 0x12a819cd8 <col:9> '<dependent type>' contains-errors lvalue
    |   |-IfStmt 0x12a81a150 <line:14:7, line:22:2>
    |   | |-BinaryOperator 0x12a819fa8 <line:14:11, col:56> 'int' '&&'
    |   | | |-ParenExpr 0x12a819e28 <col:11, col:29> 'int'
    |   | | | `-BinaryOperator 0x12a819e08 <col:12, col:28> 'int' '=='
    |   | | |   |-ImplicitCastExpr 0x12a819df0 <col:12, col:23> 'int' <IntegralCast>
    |   | | |   | `-ImplicitCastExpr 0x12a819dd8 <col:12, col:23> 'unsigned char' <LValueToRValue>
    |   | | |   |   `-ArraySubscriptExpr 0x12a819d98 <col:12, col:23> 'const unsigned char' lvalue
    |   | | |   |     |-ImplicitCastExpr 0x12a819d68 <col:12> 'const unsigned char *' <LValueToRValue>
    |   | | |   |     | `-DeclRefExpr 0x12a819d28 <col:12> 'const unsigned char *' lvalue ParmVar 0x12986cd08 'der' 'const unsigned char *'
    |   | | |   |     `-ImplicitCastExpr 0x12a819d80 <col:16> 'int' <LValueToRValue>
    |   | | |   |       `-DeclRefExpr 0x12a819d48 <col:16> 'int' lvalue Var 0x12986d0b0 'counter' 'int'
    |   | | |   `-IntegerLiteral 0x12a819db8 <col:28> 'int' 0
    |   | | `-ParenExpr 0x12a819f88 <col:34, col:56> 'int'
    |   | |   `-BinaryOperator 0x12a819f68 <col:35, col:55> 'int' '=='
    |   | |     |-ImplicitCastExpr 0x12a819f50 <col:35, col:50> 'int' <IntegralCast>
    |   | |     | `-ImplicitCastExpr 0x12a819f38 <col:35, col:50> 'unsigned char' <LValueToRValue>
    |   | |     |   `-ArraySubscriptExpr 0x12a819ef8 <col:35, col:50> 'const unsigned char' lvalue
    |   | |     |     |-ImplicitCastExpr 0x12a819ee0 <col:35> 'const unsigned char *' <LValueToRValue>
    |   | |     |     | `-DeclRefExpr 0x12a819e48 <col:35> 'const unsigned char *' lvalue ParmVar 0x12986cd08 'der' 'const unsigned char *'
    |   | |     |     `-BinaryOperator 0x12a819ec0 <col:39, col:49> 'int' '+'
    |   | |     |       |-ImplicitCastExpr 0x12a819ea8 <col:39> 'int' <LValueToRValue>
    |   | |     |       | `-DeclRefExpr 0x12a819e68 <col:39> 'int' lvalue Var 0x12986d0b0 'counter' 'int'
    |   | |     |       `-IntegerLiteral 0x12a819e88 <col:49> 'int' 1
    |   | |     `-IntegerLiteral 0x12a819f18 <col:55> 'int' 0
    |   | `-CompoundStmt 0x12a81a128 <line:15:2, line:22:2>
    |   |   |-CompoundAssignOperator 0x12a81a008 <line:16:4, col:15> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |   |   | |-DeclRefExpr 0x12a819fc8 <col:4> 'int' lvalue Var 0x12986d0b0 'counter' 'int'
    |   |   | `-IntegerLiteral 0x12a819fe8 <col:15> 'int' 2
    |   |   |-UnaryOperator 0x12a81a058 <line:17:4, col:14> 'int' postfix '--'
    |   |   | `-DeclRefExpr 0x12a81a038 <col:4> 'int' lvalue Var 0x12986d130 'indefinite' 'int'
    |   |   `-IfStmt 0x12a81a0f8 <line:18:4, line:21:6> has_else
    |   |     |-BinaryOperator 0x12a81a0c8 <line:18:8, col:22> 'int' '<='
    |   |     | |-ImplicitCastExpr 0x12a81a0b0 <col:8> 'int' <LValueToRValue>
    |   |     | | `-DeclRefExpr 0x12a81a070 <col:8> 'int' lvalue Var 0x12986d130 'indefinite' 'int'
    |   |     | `-IntegerLiteral 0x12a81a090 <col:22> 'int' 0
    |   |     |-BreakStmt 0x12a81a0e8 <line:19:6>
    |   |     `-ContinueStmt 0x12a81a0f0 <line:21:6>
    |   |-IfStmt 0x12a81a8b0 <line:24:7, line:27:9>
    |   | |-BinaryOperator 0x12a81a848 <line:24:11, line:26:14> 'int' contains-errors '!='
    |   | | |-CallExpr 0x12a81a7e0 <line:24:11, line:26:9> 'int'
    |   | | | |-ImplicitCastExpr 0x12a81a7c8 <line:24:11> 'int (*)()' <FunctionToPointerDecay>
    |   | | | | `-DeclRefExpr 0x12a81a280 <col:11> 'int ()' Function 0x12a81a1c8 'asn1_get_tag_der' 'int ()'
    |   | | | |-BinaryOperator 0x12a81a728 <line:25:5, col:11> 'const unsigned char *' '+'
    |   | | | | |-ImplicitCastExpr 0x12a81a6f8 <col:5> 'const unsigned char *' <LValueToRValue>
    |   | | | | | `-DeclRefExpr 0x12a81a2a0 <col:5> 'const unsigned char *' lvalue ParmVar 0x12986cd08 'der' 'const unsigned char *'
    |   | | | | `-ImplicitCastExpr 0x12a81a710 <col:11> 'int' <LValueToRValue>
    |   | | | |   `-DeclRefExpr 0x12a81a2c0 <col:11> 'int' lvalue Var 0x12986d0b0 'counter' 'int'
    |   | | | |-BinaryOperator 0x12a81a7a8 <col:20, col:27> 'int' '-'
    |   | | | | |-ImplicitCastExpr 0x12a81a778 <col:20, col:21> 'int' <LValueToRValue>
    |   | | | | | `-UnaryOperator 0x12a81a760 <col:20, col:21> 'int' lvalue prefix '*' cannot overflow
    |   | | | | |   `-ImplicitCastExpr 0x12a81a748 <col:21> 'int *' <LValueToRValue>
    |   | | | | |     `-DeclRefExpr 0x12a81a330 <col:21> 'int *' lvalue ParmVar 0x12986cdb8 'len' 'int *'
    |   | | | | `-ImplicitCastExpr 0x12a81a790 <col:27> 'int' <LValueToRValue>
    |   | | | |   `-DeclRefExpr 0x12a81a380 <col:27> 'int' lvalue Var 0x12986d0b0 'counter' 'int'
    |   | | | |-UnaryOperator 0x12a81a440 <col:36, col:37> 'unsigned char *' prefix '&' cannot overflow
    |   | | | | `-DeclRefExpr 0x12a81a3f0 <col:37> 'unsigned char' lvalue Var 0x12986d288 'class' 'unsigned char'
    |   | | | |-UnaryOperator 0x12a81a478 <col:44, col:45> 'int *' prefix '&' cannot overflow
    |   | | | | `-DeclRefExpr 0x12a81a458 <col:45> 'int' lvalue Var 0x12986cfb0 'len2' 'int'
    |   | | | `-UnaryOperator 0x12a81a4e0 <line:26:5, col:6> 'unsigned long *' prefix '&' cannot overflow
    |   | | |   `-DeclRefExpr 0x12a81a490 <col:6> 'unsigned long' lvalue Var 0x12986d1f0 'tag' 'unsigned long'
    |   | | `-RecoveryExpr 0x12a81a828 <col:14> '<dependent type>' contains-errors lvalue
    |   | `-ReturnStmt 0x12a81a8a0 <line:27:2, col:9>
    |   |   `-RecoveryExpr 0x12a81a880 <col:9> '<dependent type>' contains-errors lvalue
    |   |-IfStmt 0x12a81aa30 <line:28:7, line:29:9>
    |   | |-BinaryOperator 0x12a81a9c8 <line:28:11, col:29> 'int' '>'
    |   | | |-BinaryOperator 0x12a81a940 <col:11, col:21> 'int' '+'
    |   | | | |-ImplicitCastExpr 0x12a81a910 <col:11> 'int' <LValueToRValue>
    |   | | | | `-DeclRefExpr 0x12a81a8d0 <col:11> 'int' lvalue Var 0x12986d0b0 'counter' 'int'
    |   | | | `-ImplicitCastExpr 0x12a81a928 <col:21> 'int' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x12a81a8f0 <col:21> 'int' lvalue Var 0x12986cfb0 'len2' 'int'
    |   | | `-ImplicitCastExpr 0x12a81a9b0 <col:28, col:29> 'int' <LValueToRValue>
    |   | |   `-UnaryOperator 0x12a81a998 <col:28, col:29> 'int' lvalue prefix '*' cannot overflow
    |   | |     `-ImplicitCastExpr 0x12a81a980 <col:29> 'int *' <LValueToRValue>
    |   | |       `-DeclRefExpr 0x12a81a960 <col:29> 'int *' lvalue ParmVar 0x12986cdb8 'len' 'int *'
    |   | `-ReturnStmt 0x12a81aa20 <line:29:2, col:9>
    |   |   `-RecoveryExpr 0x12a81aa00 <col:9> '<dependent type>' contains-errors lvalue
    |   |-CompoundAssignOperator 0x12a81aaa8 <line:30:7, col:18> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |   | |-DeclRefExpr 0x12a81aa50 <col:7> 'int' lvalue Var 0x12986d0b0 'counter' 'int'
    |   | `-ImplicitCastExpr 0x12a81aa90 <col:18> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x12a81aa70 <col:18> 'int' lvalue Var 0x12986cfb0 'len2' 'int'
    |   |-BinaryOperator 0x12a81b7d8 <line:31:7, col:71> 'int' '='
    |   | |-DeclRefExpr 0x12a81aad8 <col:7> 'int' lvalue Var 0x12986cfb0 'len2' 'int'
    |   | `-CallExpr 0x12a81b7a0 <col:14, col:71> 'int'
    |   |   |-ImplicitCastExpr 0x12a81b788 <col:14> 'int (*)()' <FunctionToPointerDecay>
    |   |   | `-DeclRefExpr 0x12a81abd8 <col:14> 'int ()' Function 0x12a81ab20 'asn1_get_length_der' 'int ()'
    |   |   |-BinaryOperator 0x12a81b670 <col:35, col:41> 'const unsigned char *' '+'
    |   |   | |-ImplicitCastExpr 0x12a81b640 <col:35> 'const unsigned char *' <LValueToRValue>
    |   |   | | `-DeclRefExpr 0x12a81b600 <col:35> 'const unsigned char *' lvalue ParmVar 0x12986cd08 'der' 'const unsigned char *'
    |   |   | `-ImplicitCastExpr 0x12a81b658 <col:41> 'int' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x12a81b620 <col:41> 'int' lvalue Var 0x12986d0b0 'counter' 'int'
    |   |   |-BinaryOperator 0x12a81b730 <col:50, col:57> 'int' '-'
    |   |   | |-ImplicitCastExpr 0x12a81b700 <col:50, col:51> 'int' <LValueToRValue>
    |   |   | | `-UnaryOperator 0x12a81b6c8 <col:50, col:51> 'int' lvalue prefix '*' cannot overflow
    |   |   | |   `-ImplicitCastExpr 0x12a81b6b0 <col:51> 'int *' <LValueToRValue>
    |   |   | |     `-DeclRefExpr 0x12a81b690 <col:51> 'int *' lvalue ParmVar 0x12986cdb8 'len' 'int *'
    |   |   | `-ImplicitCastExpr 0x12a81b718 <col:57> 'int' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x12a81b6e0 <col:57> 'int' lvalue Var 0x12986d0b0 'counter' 'int'
    |   |   `-UnaryOperator 0x12a81b770 <col:66, col:67> 'int *' prefix '&' cannot overflow
    |   |     `-DeclRefExpr 0x12a81b750 <col:67> 'int' lvalue Var 0x12986d030 'len3' 'int'
    |   |-IfStmt 0x12a81b8d0 <line:32:7, line:33:9>
    |   | |-BinaryOperator 0x12a81b868 <line:32:11, col:19> 'int' '<'
    |   | | |-ImplicitCastExpr 0x12a81b850 <col:11> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x12a81b7f8 <col:11> 'int' lvalue Var 0x12986cfb0 'len2' 'int'
    |   | | `-UnaryOperator 0x12a81b838 <col:18, col:19> 'int' prefix '-'
    |   | |   `-IntegerLiteral 0x12a81b818 <col:19> 'int' 1
    |   | `-ReturnStmt 0x12a81b8c0 <line:33:2, col:9>
    |   |   `-RecoveryExpr 0x12a81b8a0 <col:9> '<dependent type>' contains-errors lvalue
    |   `-IfStmt 0x12a81bb40 <line:34:7, line:42:2> has_else
    |     |-BinaryOperator 0x12a81b960 <line:34:11, col:20> 'int' '=='
    |     | |-ImplicitCastExpr 0x12a81b948 <col:11> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x12a81b8f0 <col:11> 'int' lvalue Var 0x12986cfb0 'len2' 'int'
    |     | `-UnaryOperator 0x12a81b930 <col:19, col:20> 'int' prefix '-'
    |     |   `-IntegerLiteral 0x12a81b910 <col:20> 'int' 1
    |     |-CompoundStmt 0x12a81ba28 <line:35:2, line:38:2>
    |     | |-UnaryOperator 0x12a81b9a0 <line:36:4, col:14> 'int' postfix '++'
    |     | | `-DeclRefExpr 0x12a81b980 <col:4> 'int' lvalue Var 0x12986d130 'indefinite' 'int'
    |     | `-CompoundAssignOperator 0x12a81b9f8 <line:37:4, col:15> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |     |   |-DeclRefExpr 0x12a81b9b8 <col:4> 'int' lvalue Var 0x12986d0b0 'counter' 'int'
    |     |   `-IntegerLiteral 0x12a81b9d8 <col:15> 'int' 1
    |     `-CompoundStmt 0x12a81bb28 <line:40:2, line:42:2>
    |       `-CompoundAssignOperator 0x12a81baf8 <line:41:4, col:22> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |         |-DeclRefExpr 0x12a81ba48 <col:4> 'int' lvalue Var 0x12986d0b0 'counter' 'int'
    |         `-BinaryOperator 0x12a81bad8 <col:15, col:22> 'int' '+'
    |           |-ImplicitCastExpr 0x12a81baa8 <col:15> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x12a81ba68 <col:15> 'int' lvalue Var 0x12986cfb0 'len2' 'int'
    |           `-ImplicitCastExpr 0x12a81bac0 <col:22> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x12a81ba88 <col:22> 'int' lvalue Var 0x12986d030 'len3' 'int'
    |-BinaryOperator 0x12a81bc68 <line:45:3, col:10> 'int' '='
    | |-UnaryOperator 0x12a81bc18 <col:3, col:4> 'int' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x12a81bc00 <col:4> 'int *' <LValueToRValue>
    | |   `-DeclRefExpr 0x12a81bbe0 <col:4> 'int *' lvalue ParmVar 0x12986cdb8 'len' 'int *'
    | `-ImplicitCastExpr 0x12a81bc50 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x12a81bc30 <col:10> 'int' lvalue Var 0x12986d0b0 'counter' 'int'
    `-ReturnStmt 0x12a81bcc0 <line:46:3, col:10>
      `-RecoveryExpr 0x12a81bca0 <col:10> '<dependent type>' contains-errors lvalue
