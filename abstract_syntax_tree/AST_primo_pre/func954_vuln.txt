`-FunctionDecl 0x14902a800  line:1:5 selinux_netlbl_inode_permission 'int (struct inode *, int)'
  |-ParmVarDecl 0x14900e248 <col:37, col:51> col:51 used inode 'struct inode *'
  |-ParmVarDecl 0x14900e2c8 <col:58, col:62> col:62 used mask 'int'
  `-CompoundStmt 0x14902e318 <line:2:1, line:28:1>
    |-DeclStmt 0x14902a980 <line:3:2, col:8>
    | `-VarDecl 0x14902a918 <col:2, col:6> col:6 used rc 'int'
    |-DeclStmt 0x14902ab88 <line:4:2, col:17>
    | |-RecordDecl 0x14902a998 <col:2, col:9> col:9 struct sock
    | `-VarDecl 0x14902ab08 <col:2, col:15> col:15 used sk 'struct sock *'
    |-DeclStmt 0x14902ad88 <line:5:2, col:21>
    | |-RecordDecl 0x14902aba0 <col:2, col:9> col:9 struct socket
    | `-VarDecl 0x14902ad08 <col:2, col:17> col:17 used sock 'struct socket *'
    |-DeclStmt 0x14902af88 <line:6:2, col:34>
    | |-RecordDecl 0x14902ada0 <col:2, col:9> col:9 struct sk_security_struct
    | `-VarDecl 0x14902af08 <col:2, col:29> col:29 used sksec 'struct sk_security_struct *'
    |-IfStmt 0x14902b270 <line:8:2, line:10:10>
    | |-RecoveryExpr 0x14902b220 <line:8:6, line:9:45> '_Bool' contains-errors
    | `-ReturnStmt 0x14902b260 <line:10:3, col:10>
    |   `-IntegerLiteral 0x14902b240 <col:10> 'int' 0
    |-BinaryOperator 0x14902b470 <line:12:2, col:23> 'struct socket *' '='
    | |-DeclRefExpr 0x14902b290 <col:2> 'struct socket *' lvalue Var 0x14902ad08 'sock' 'struct socket *'
    | `-ImplicitCastExpr 0x14902b458 <col:9, col:23> 'struct socket *' <IntegralToPointer>
    |   `-CallExpr 0x14902b418 <col:9, col:23> 'int'
    |     |-ImplicitCastExpr 0x14902b400 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x14902b390 <col:9> 'int ()' Function 0x14902b2d8 'SOCKET_I' 'int ()'
    |     `-ImplicitCastExpr 0x14902b440 <col:18> 'struct inode *' <LValueToRValue>
    |       `-DeclRefExpr 0x14902b3b0 <col:18> 'struct inode *' lvalue ParmVar 0x14900e248 'inode' 'struct inode *'
    |-BinaryOperator 0x14902b510 <line:13:2, col:13> 'struct sock *' contains-errors '='
    | |-DeclRefExpr 0x14902b490 <col:2> 'struct sock *' lvalue Var 0x14902ab08 'sk' 'struct sock *'
    | `-RecoveryExpr 0x14902b4e8 <col:7, col:13> '<dependent type>' contains-errors lvalue
    |   `-DeclRefExpr 0x14902b4b0 <col:7> 'struct socket *' lvalue Var 0x14902ad08 'sock' 'struct socket *'
    |-BinaryOperator 0x14902b5b0 <line:14:2, col:14> 'struct sk_security_struct *' contains-errors '='
    | |-DeclRefExpr 0x14902b530 <col:2> 'struct sk_security_struct *' lvalue Var 0x14902af08 'sksec' 'struct sk_security_struct *'
    | `-RecoveryExpr 0x14902b588 <col:10, col:14> '<dependent type>' contains-errors lvalue
    |   `-DeclRefExpr 0x14902b550 <col:10> 'struct sock *' lvalue Var 0x14902ab08 'sk' 'struct sock *'
    |-IfStmt 0x14902b6d8 <line:15:2, line:16:10>
    | |-BinaryOperator 0x14902b688 <line:15:6, col:27> 'int' contains-errors '!='
    | | |-RecoveryExpr 0x14902b608 <col:6, col:13> '<dependent type>' contains-errors lvalue
    | | | `-DeclRefExpr 0x14902b5d0 <col:6> 'struct sk_security_struct *' lvalue Var 0x14902af08 'sksec' 'struct sk_security_struct *'
    | | `-RecoveryExpr 0x14902b668 <col:27> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x14902b6c8 <line:16:3, col:10>
    |   `-IntegerLiteral 0x14902b6a8 <col:10> 'int' 0
    |-CallExpr 0x14902da18 <line:18:2, col:19> 'int'
    | `-ImplicitCastExpr 0x14902da00 <col:2> 'int (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x14902b7d8 <col:2> 'int ()' Function 0x14902b720 'local_bh_disable' 'int ()'
    |-CallExpr 0x14902db70 <line:19:2, col:24> 'int'
    | |-ImplicitCastExpr 0x14902db58 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x14902db18 <col:2> 'int ()' Function 0x14902da60 'bh_lock_sock_nested' 'int ()'
    | `-ImplicitCastExpr 0x14902db98 <col:22> 'struct sock *' <LValueToRValue>
    |   `-DeclRefExpr 0x14902db38 <col:22> 'struct sock *' lvalue Var 0x14902ab08 'sk' 'struct sock *'
    |-IfStmt 0x14902dff0 <line:20:2, line:23:8> has_else
    | |-CallExpr 0x14902ddb0 <line:20:6, col:46> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x14902dc90 <col:6> 'int ()' Function 0x14902dbd8 'likely' 'int ()'
    | | `-BinaryOperator 0x14902dd90 <col:13, col:34> 'int' contains-errors '=='
    | |   |-RecoveryExpr 0x14902dce8 <col:13, col:20> '<dependent type>' contains-errors lvalue
    | |   | `-DeclRefExpr 0x14902dcb0 <col:13> 'struct sk_security_struct *' lvalue Var 0x14902af08 'sksec' 'struct sk_security_struct *'
    | |   `-RecoveryExpr 0x14902dd70 <col:34> '<dependent type>' contains-errors lvalue
    | |-BinaryOperator 0x14902df70 <line:21:3, col:37> 'int' '='
    | | |-DeclRefExpr 0x14902ddd8 <col:3> 'int' lvalue Var 0x14902a918 'rc' 'int'
    | | `-CallExpr 0x14902df30 <col:8, col:37> 'int'
    | |   |-ImplicitCastExpr 0x14902df18 <col:8> 'int (*)()' <FunctionToPointerDecay>
    | |   | `-DeclRefExpr 0x14902ded8 <col:8> 'int ()' Function 0x14902de20 'selinux_netlbl_sock_setsid' 'int ()'
    | |   `-ImplicitCastExpr 0x14902df58 <col:35> 'struct sock *' <LValueToRValue>
    | |     `-DeclRefExpr 0x14902def8 <col:35> 'struct sock *' lvalue Var 0x14902ab08 'sk' 'struct sock *'
    | `-BinaryOperator 0x14902dfd0 <line:23:3, col:8> 'int' '='
    |   |-DeclRefExpr 0x14902df90 <col:3> 'int' lvalue Var 0x14902a918 'rc' 'int'
    |   `-IntegerLiteral 0x14902dfb0 <col:8> 'int' 0
    |-CallExpr 0x14902e158 <line:24:2, col:19> 'int'
    | |-ImplicitCastExpr 0x14902e140 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x14902e100 <col:2> 'int ()' Function 0x14902e048 'bh_unlock_sock' 'int ()'
    | `-ImplicitCastExpr 0x14902e180 <col:17> 'struct sock *' <LValueToRValue>
    |   `-DeclRefExpr 0x14902e120 <col:17> 'struct sock *' lvalue Var 0x14902ab08 'sk' 'struct sock *'
    |-CallExpr 0x14902e2b0 <line:25:2, col:18> 'int'
    | `-ImplicitCastExpr 0x14902e298 <col:2> 'int (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x14902e278 <col:2> 'int ()' Function 0x14902e1c0 'local_bh_enable' 'int ()'
    `-ReturnStmt 0x14902e308 <line:27:2, col:9>
      `-ImplicitCastExpr 0x14902e2f0 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x14902e2d0 <col:9> 'int' lvalue Var 0x14902a918 'rc' 'int'
