`-FunctionDecl 0x11e80de88  line:1:15 referenced invalid BN_to_ASN1_INTEGER 'int *(const int *, int *)'
  |-ParmVarDecl 0x11e80dcf0 <col:34, col:48> col:48 invalid bn 'const int *'
  |-ParmVarDecl 0x11e80dda8 <col:52, col:66> col:66 invalid ai 'int *'
  `-CompoundStmt 0x11e828d28 <line:2:1, line:39:1>
    |-DeclStmt 0x11e80e070 <line:4:5, col:15>
    | |-VarDecl 0x11e80df70 <col:5, col:9> col:9 used len 'int'
    | `-VarDecl 0x11e80dff0 <col:5, col:14> col:14 used j 'int'
    |-IfStmt 0x11e828050 <line:10:5, line:13:5>
    | |-BinaryOperator 0x11e80e3b8 <line:10:9, col:16> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x11e80e378 <col:9> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x11e80e398 <col:16> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x11e828030 <col:22, line:13:5>
    |   |-CallExpr 0x11e827f98 <line:11:9, col:67> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x11e827eb8 <col:9> 'int ()' Function 0x11e827e00 'ASN1err' 'int ()'
    |   | |-RecoveryExpr 0x11e827f58 <col:17> '<dependent type>' contains-errors lvalue
    |   | `-RecoveryExpr 0x11e827f78 <col:44> '<dependent type>' contains-errors lvalue
    |   `-GotoStmt 0x11e828018 <line:12:9, col:14> 'err' 0x11e827fc8
    |-BinaryOperator 0x11e828390 <line:18:5, col:23> 'int' contains-errors '='
    | |-DeclRefExpr 0x11e828228 <col:5> 'int' lvalue Var 0x11e80dff0 'j' 'int'
    | `-CallExpr 0x11e828368 <col:9, col:23> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x11e828328 <col:9> 'int ()' Function 0x11e828270 'BN_num_bits' 'int ()'
    |   `-RecoveryExpr 0x11e828348 <col:21> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x11e8285d0 <line:19:5, col:40> 'int' '='
    | |-DeclRefExpr 0x11e8283b0 <col:5> 'int' lvalue Var 0x11e80df70 'len' 'int'
    | `-ParenExpr 0x11e8285b0 <col:11, col:40> 'int'
    |   `-ConditionalOperator 0x11e828580 <col:12, col:39> 'int'
    |     |-ParenExpr 0x11e828448 <col:12, col:19> 'int'
    |     | `-BinaryOperator 0x11e828428 <col:13, col:18> 'int' '=='
    |     |   |-ImplicitCastExpr 0x11e828410 <col:13> 'int' <LValueToRValue>
    |     |   | `-DeclRefExpr 0x11e8283d0 <col:13> 'int' lvalue Var 0x11e80dff0 'j' 'int'
    |     |   `-IntegerLiteral 0x11e8283f0 <col:18> 'int' 0
    |     |-IntegerLiteral 0x11e828468 <col:23> 'int' 0
    |     `-ParenExpr 0x11e828560 <col:27, col:39> 'int'
    |       `-BinaryOperator 0x11e828540 <col:28, col:38> 'int' '+'
    |         |-ParenExpr 0x11e828500 <col:28, col:34> 'int'
    |         | `-BinaryOperator 0x11e8284e0 <col:29, col:33> 'int' '/'
    |         |   |-ImplicitCastExpr 0x11e8284c8 <col:29> 'int' <LValueToRValue>
    |         |   | `-DeclRefExpr 0x11e828488 <col:29> 'int' lvalue Var 0x11e80dff0 'j' 'int'
    |         |   `-IntegerLiteral 0x11e8284a8 <col:33> 'int' 8
    |         `-IntegerLiteral 0x11e828520 <col:38> 'int' 1
    |-IfStmt 0x11e8289d0 <line:20:5, line:27:5>
    | |-RecoveryExpr 0x11e828668 <line:20:9, col:29> '_Bool' contains-errors
    | `-CompoundStmt 0x11e8289b0 <col:32, line:27:5>
    |   |-DeclStmt 0x11e8288b8 <line:21:9, col:70>
    |   | `-VarDecl 0x11e8286d8 <col:9, col:24> col:24 used new_data 'unsigned char *'
    |   `-IfStmt 0x11e828970 <line:22:9, line:25:9>
    |     |-UnaryOperator 0x11e828908 <line:22:13, col:14> 'int' prefix '!' cannot overflow
    |     | `-ImplicitCastExpr 0x11e8288f0 <col:14> 'unsigned char *' <LValueToRValue>
    |     |   `-DeclRefExpr 0x11e8288d0 <col:14> 'unsigned char *' lvalue Var 0x11e8286d8 'new_data' 'unsigned char *'
    |     `-CompoundStmt 0x11e828958 <col:24, line:25:9>
    |       `-GotoStmt 0x11e828940 <line:24:13, col:18> 'err' 0x11e827fc8
    |-IfStmt 0x11e828ba0 <line:30:5, line:33:5>
    | |-RecoveryExpr 0x11e828b10 <line:30:9, col:15> '_Bool' contains-errors
    | `-CompoundStmt 0x11e828b90 <col:23, line:33:5>
    `-LabelStmt 0x11e828d08 <line:35:2, col:5> 'err'
      `-NullStmt 0x11e828d00 <col:5>
