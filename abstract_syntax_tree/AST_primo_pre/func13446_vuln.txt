`-FunctionDecl 0x140128c38  line:1:1 invalid drv_do_color 'int (int *, int, int, int, int)'
  |-ParmVarDecl 0x140128928 <col:14, col:39> col:39 invalid TCB 'int *'
  |-ParmVarDecl 0x1401289a8 <line:2:7, col:11> col:11 used old_pair 'int'
  |-ParmVarDecl 0x140128a28 <line:3:7, col:11> col:11 used pair 'int'
  |-ParmVarDecl 0x140128aa8 <line:4:7, col:11> col:11 used reverse 'int'
  |-ParmVarDecl 0x140128b28 <line:5:7, col:23> col:23 invalid outc 'int'
  `-CompoundStmt 0x140145430 <line:6:1, line:76:1>
    |-DeclStmt 0x140128e40 <line:8:5, col:27>
    | `-VarDecl 0x140128da0 <col:5, col:14> col:9 used fg 'int' cinit
    |   `-RecoveryExpr 0x140128e20 <col:14> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x140128f10 <line:9:5, col:27>
    | `-VarDecl 0x140128e70 <col:5, col:14> col:9 used bg 'int' cinit
    |   `-RecoveryExpr 0x140128ef0 <col:14> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x140142080 <line:10:5, col:23>
    | |-VarDecl 0x140128f40 <col:5, col:9> col:9 used old_fg 'int'
    | `-VarDecl 0x140142000 <col:5, col:17> col:17 used old_bg 'int'
    |-CallExpr 0x140142258 <line:12:5, col:15> 'int'
    | `-ImplicitCastExpr 0x140142240 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x1401421f0 <col:5> 'int ()' Function 0x140142138 'AssertTCB' 'int ()'
    |-IfStmt 0x140142320 <line:13:5, line:14:2>
    | |-BinaryOperator 0x1401422f0 <line:13:9, col:15> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x1401422d0 <col:9> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x140142290 <col:15> 'int' 0
    | `-ReturnStmt 0x140142310 <line:14:2>
    |-IfStmt 0x140142cc0 <line:16:5, line:27:5> has_else
    | |-BinaryOperator 0x1401424e0 <line:16:9, col:29> 'int' contains-errors '||'
    | | |-BinaryOperator 0x140142480 <col:9, col:16> 'int' '<'
    | | | |-ImplicitCastExpr 0x140142468 <col:9> 'int' <LValueToRValue>
    | | | | `-DeclRefExpr 0x140142340 <col:9> 'int' lvalue ParmVar 0x140128a28 'pair' 'int'
    | | | `-IntegerLiteral 0x140142360 <col:16> 'int' 0
    | | `-BinaryOperator 0x1401424c0 <col:21, col:29> 'int' contains-errors '>='
    | |   |-DeclRefExpr 0x1401423b8 <col:21> 'int' lvalue ParmVar 0x140128a28 'pair' 'int'
    | |   `-RecoveryExpr 0x1401424a0 <col:29> '<dependent type>' contains-errors lvalue
    | |-CompoundStmt 0x140142510 <col:42, line:18:5>
    | | `-ReturnStmt 0x140142500 <line:17:2>
    | `-IfStmt 0x140142ca0 <line:18:12, line:27:5>
    |   |-BinaryOperator 0x140142580 <line:18:16, col:24> 'int' '!='
    |   | |-ImplicitCastExpr 0x140142568 <col:16> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x140142528 <col:16> 'int' lvalue ParmVar 0x140128a28 'pair' 'int'
    |   | `-IntegerLiteral 0x140142548 <col:24> 'int' 0
    |   `-CompoundStmt 0x140142c88 <col:27, line:27:5>
    |     `-IfStmt 0x140142c58 <line:19:2, line:26:2> has_else
    |       |-RecoveryExpr 0x1401425b8 <line:19:6> '<dependent type>' contains-errors lvalue
    |       |-CompoundStmt 0x140142920 <col:22, line:24:2>
    |       | |-CallExpr 0x140142758 <line:20:6, col:23> 'int'
    |       | | |-ImplicitCastExpr 0x140142740 <col:6> 'int (*)()' <FunctionToPointerDecay>
    |       | | | `-DeclRefExpr 0x1401426b8 <col:6> 'int ()' Function 0x140142600 'TPUTS_TRACE' 'int ()'
    |       | | `-ImplicitCastExpr 0x140142780 <col:18> 'char *' <ArrayToPointerDecay>
    |       | |   `-StringLiteral 0x140142720 <col:18> 'char[4]' lvalue "STR"
    |       | `-ReturnStmt 0x140142910 <line:23:6>
    |       `-IfStmt 0x140142c38 <line:24:9, line:26:2>
    |         |-BinaryOperator 0x1401429b8 <line:24:13, col:19> 'int' contains-errors '!='
    |         | |-RecoveryExpr 0x140142998 <col:13> '<dependent type>' contains-errors lvalue
    |         | `-IntegerLiteral 0x140142958 <col:19> 'int' 0
    |         `-CompoundStmt 0x140142c20 <col:22, line:26:2>
    |           `-CallExpr 0x140142be0 <line:25:6, col:46> '<dependent type>' contains-errors
    |             |-DeclRefExpr 0x140142ab8 <col:6> 'int ()' Function 0x140142a00 '_nc_pair_content' 'int ()'
    |             |-RecoveryExpr 0x140142bc0 <col:23> '<dependent type>' contains-errors lvalue
    |             |-DeclRefExpr 0x140142af0 <col:32> 'int' lvalue ParmVar 0x140128a28 'pair' 'int'
    |             |-UnaryOperator 0x140142b30 <col:38, col:39> 'int *' contains-errors prefix '&' cannot overflow
    |             | `-DeclRefExpr 0x140142b10 <col:39> 'int' contains-errors lvalue Var 0x140128da0 'fg' 'int'
    |             `-UnaryOperator 0x140142b68 <col:43, col:44> 'int *' contains-errors prefix '&' cannot overflow
    |               `-DeclRefExpr 0x140142b48 <col:44> 'int' contains-errors lvalue Var 0x140128e70 'bg' 'int'
    |-IfStmt 0x140144bb8 <line:29:5, line:52:5> has_else
    | |-BinaryOperator 0x1401444c0 <line:29:9, line:31:62> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x140144400 <line:29:9, line:30:11> 'int' contains-errors '&&'
    | | | |-BinaryOperator 0x140142f90 <line:29:9, col:21> 'int' '>='
    | | | | |-ImplicitCastExpr 0x140142f78 <col:9> 'int' <LValueToRValue>
    | | | | | `-DeclRefExpr 0x140142cf0 <col:9> 'int' lvalue ParmVar 0x1401289a8 'old_pair' 'int'
    | | | | `-IntegerLiteral 0x140142d10 <col:21> 'int' 0
    | | | `-BinaryOperator 0x140142fd0 <line:30:5, col:11> 'int' contains-errors '!='
    | | |   |-RecoveryExpr 0x140142fb0 <col:5> '<dependent type>' contains-errors lvalue
    | | |   `-IntegerLiteral 0x140142d80 <col:11> 'int' 0
    | | `-BinaryOperator 0x1401444a0 <line:31:5, col:62> 'int' contains-errors '!='
    | |   |-CallExpr 0x140144440 <col:5, col:57> '<dependent type>' contains-errors
    | |   | |-DeclRefExpr 0x140142de0 <col:5> 'int ()' Function 0x140142a00 '_nc_pair_content' 'int ()'
    | |   | |-RecoveryExpr 0x140144420 <col:22> '<dependent type>' contains-errors lvalue
    | |   | |-DeclRefExpr 0x140142e18 <col:31> 'int' lvalue ParmVar 0x1401289a8 'old_pair' 'int'
    | |   | |-UnaryOperator 0x140142e58 <col:41, col:42> 'int *' prefix '&' cannot overflow
    | |   | | `-DeclRefExpr 0x140142e38 <col:42> 'int' lvalue Var 0x140128f40 'old_fg' 'int'
    | |   | `-UnaryOperator 0x140142e90 <col:50, col:51> 'int *' prefix '&' cannot overflow
    | |   |   `-DeclRefExpr 0x140142e70 <col:51> 'int' lvalue Var 0x140142000 'old_bg' 'int'
    | |   `-RecoveryExpr 0x140144480 <col:62> '<dependent type>' contains-errors lvalue
    | |-CompoundStmt 0x140144a70 <col:67, line:48:5>
    | | `-IfStmt 0x140144a50 <line:32:2, line:47:2>
    | |   |-BinaryOperator 0x1401448d0 <line:32:6, line:33:55> 'int' contains-errors '||'
    | |   | |-ParenExpr 0x140144728 <line:32:6, col:52> 'int' contains-errors
    | |   | | `-BinaryOperator 0x140144708 <col:7, col:51> 'int' contains-errors '&&'
    | |   | |   |-CallExpr 0x140144618 <col:7, col:24> 'int' contains-errors
    | |   | |   | |-ImplicitCastExpr 0x140144600 <col:7> 'int (*)()' <FunctionToPointerDecay>
    | |   | |   | | `-DeclRefExpr 0x1401445c0 <col:7> 'int ()' Function 0x140144508 'isDefaultColor' 'int ()'
    | |   | |   | `-ImplicitCastExpr 0x140144640 <col:22> 'int' contains-errors <LValueToRValue>
    | |   | |   |   `-DeclRefExpr 0x1401445e0 <col:22> 'int' contains-errors lvalue Var 0x140128da0 'fg' 'int'
    | |   | |   `-UnaryOperator 0x1401446f0 <col:29, col:51> 'int' prefix '!' cannot overflow
    | |   | |     `-CallExpr 0x1401446b0 <col:30, col:51> 'int'
    | |   | |       |-ImplicitCastExpr 0x140144698 <col:30> 'int (*)()' <FunctionToPointerDecay>
    | |   | |       | `-DeclRefExpr 0x140144658 <col:30> 'int ()' Function 0x140144508 'isDefaultColor' 'int ()'
    | |   | |       `-ImplicitCastExpr 0x1401446d8 <col:45> 'int' <LValueToRValue>
    | |   | |         `-DeclRefExpr 0x140144678 <col:45> 'int' lvalue Var 0x140128f40 'old_fg' 'int'
    | |   | `-ParenExpr 0x1401448b0 <line:33:9, col:55> 'int' contains-errors
    | |   |   `-BinaryOperator 0x140144890 <col:10, col:54> 'int' contains-errors '&&'
    | |   |     |-CallExpr 0x1401447a0 <col:10, col:27> 'int' contains-errors
    | |   |     | |-ImplicitCastExpr 0x140144788 <col:10> 'int (*)()' <FunctionToPointerDecay>
    | |   |     | | `-DeclRefExpr 0x140144748 <col:10> 'int ()' Function 0x140144508 'isDefaultColor' 'int ()'
    | |   |     | `-ImplicitCastExpr 0x1401447c8 <col:25> 'int' contains-errors <LValueToRValue>
    | |   |     |   `-DeclRefExpr 0x140144768 <col:25> 'int' contains-errors lvalue Var 0x140128e70 'bg' 'int'
    | |   |     `-UnaryOperator 0x140144878 <col:32, col:54> 'int' prefix '!' cannot overflow
    | |   |       `-CallExpr 0x140144838 <col:33, col:54> 'int'
    | |   |         |-ImplicitCastExpr 0x140144820 <col:33> 'int (*)()' <FunctionToPointerDecay>
    | |   |         | `-DeclRefExpr 0x1401447e0 <col:33> 'int ()' Function 0x140144508 'isDefaultColor' 'int ()'
    | |   |         `-ImplicitCastExpr 0x140144860 <col:48> 'int' <LValueToRValue>
    | |   |           `-DeclRefExpr 0x140144800 <col:48> 'int' lvalue Var 0x140142000 'old_bg' 'int'
    | |   `-CompoundStmt 0x140144a38 <col:58, line:47:2>
    | |     `-CallExpr 0x140144a10 <line:46:3, col:17> '<dependent type>' contains-errors
    | |       |-DeclRefExpr 0x1401449d0 <col:3> 'int ()' Function 0x140144918 'drv_rescol' 'int ()'
    | |       `-RecoveryExpr 0x1401449f0 <col:14> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x140144b98 <line:48:12, line:52:5>
    |   |-CallExpr 0x140144ac8 <line:49:2, col:16> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x140144a88 <col:2> 'int ()' Function 0x140144918 'drv_rescol' 'int ()'
    |   | `-RecoveryExpr 0x140144aa8 <col:13> '<dependent type>' contains-errors lvalue
    |   `-IfStmt 0x140144b78 <line:50:2, line:51:6>
    |     |-BinaryOperator 0x140144b48 <line:50:6, col:17> 'int' '<'
    |     | |-ImplicitCastExpr 0x140144b30 <col:6> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x140144af0 <col:6> 'int' lvalue ParmVar 0x1401289a8 'old_pair' 'int'
    |     | `-IntegerLiteral 0x140144b10 <col:17> 'int' 0
    |     `-ReturnStmt 0x140144b68 <line:51:6>
    |-IfStmt 0x140144e08 <line:61:5, line:65:5>
    | |-ImplicitCastExpr 0x140144c08 <line:61:9> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x140144be8 <col:9> 'int' lvalue ParmVar 0x140128aa8 'reverse' 'int'
    | `-CompoundStmt 0x140144de0 <col:18, line:65:5>
    |   |-DeclStmt 0x140144cd8 <line:62:2, col:13>
    |   | `-VarDecl 0x140144c38 <col:2, col:11> col:6 used xx 'int' cinit
    |   |   `-ImplicitCastExpr 0x140144cc0 <col:11> 'int' contains-errors <LValueToRValue>
    |   |     `-DeclRefExpr 0x140144ca0 <col:11> 'int' contains-errors lvalue Var 0x140128da0 'fg' 'int'
    |   |-BinaryOperator 0x140144d48 <line:63:2, col:7> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x140144cf0 <col:2> 'int' contains-errors lvalue Var 0x140128da0 'fg' 'int'
    |   | `-ImplicitCastExpr 0x140144d30 <col:7> 'int' contains-errors <LValueToRValue>
    |   |   `-DeclRefExpr 0x140144d10 <col:7> 'int' contains-errors lvalue Var 0x140128e70 'bg' 'int'
    |   `-BinaryOperator 0x140144dc0 <line:64:2, col:7> 'int' contains-errors '='
    |     |-DeclRefExpr 0x140144d68 <col:2> 'int' contains-errors lvalue Var 0x140128e70 'bg' 'int'
    |     `-ImplicitCastExpr 0x140144da8 <col:7> 'int' contains-errors <LValueToRValue>
    |       `-DeclRefExpr 0x140144d88 <col:7> 'int' contains-errors lvalue Var 0x140144c38 'xx' 'int'
    |-IfStmt 0x1401452a8 <line:70:5, line:72:5>
    | |-UnaryOperator 0x140145120 <line:70:9, col:27> 'int' contains-errors prefix '!' cannot overflow
    | | `-CallExpr 0x1401450e0 <col:10, col:27> 'int' contains-errors
    | |   |-ImplicitCastExpr 0x1401450c8 <col:10> 'int (*)()' <FunctionToPointerDecay>
    | |   | `-DeclRefExpr 0x140145088 <col:10> 'int ()' Function 0x140144508 'isDefaultColor' 'int ()'
    | |   `-ImplicitCastExpr 0x140145108 <col:25> 'int' contains-errors <LValueToRValue>
    | |     `-DeclRefExpr 0x1401450a8 <col:25> 'int' contains-errors lvalue Var 0x140128da0 'fg' 'int'
    | `-CompoundStmt 0x140145298 <col:30, line:72:5>
    `-IfStmt 0x140145410 <line:73:5, line:75:5>
      |-UnaryOperator 0x140145360 <line:73:9, col:27> 'int' contains-errors prefix '!' cannot overflow
      | `-CallExpr 0x140145320 <col:10, col:27> 'int' contains-errors
      |   |-ImplicitCastExpr 0x140145308 <col:10> 'int (*)()' <FunctionToPointerDecay>
      |   | `-DeclRefExpr 0x1401452c8 <col:10> 'int ()' Function 0x140144508 'isDefaultColor' 'int ()'
      |   `-ImplicitCastExpr 0x140145348 <col:25> 'int' contains-errors <LValueToRValue>
      |     `-DeclRefExpr 0x1401452e8 <col:25> 'int' contains-errors lvalue Var 0x140128e70 'bg' 'int'
      `-CompoundStmt 0x140145400 <col:30, line:75:5>
