`-FunctionDecl 0x137928378  line:1:1 invalid xmlGetBooleanProp 'int (int, int, const char *, int)'
  |-ParmVarDecl 0x1379280f0 <col:19, col:42> col:42 invalid ctxt 'int'
  |-ParmVarDecl 0x137928170 <line:2:5, col:16> col:16 invalid node 'int'
  |-ParmVarDecl 0x1379281f0 <line:3:19, col:31> col:31 used name 'const char *'
  |-ParmVarDecl 0x137928270 <col:37, col:41> col:41 used def 'int'
  `-CompoundStmt 0x137942128 <line:4:1, line:28:1>
    |-DeclStmt 0x1379284c0 <line:5:5, col:23>
    | `-VarDecl 0x137928458 <col:5, col:20> col:20 referenced invalid val 'const int *'
    |-BinaryOperator 0x137928738 <line:7:5, col:44> '<dependent type>' contains-errors '='
    | |-RecoveryExpr 0x1379284f8 <col:5> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x1379284d8 <col:5> 'const int *' lvalue Var 0x137928458 'val' 'const int *'
    | `-CallExpr 0x137928700 <col:11, col:44> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x137928680 <col:11> 'int ()' Function 0x1379285c8 'xmlSchemaGetProp' 'int ()'
    |   |-RecoveryExpr 0x1379286a0 <col:28> '<dependent type>' contains-errors lvalue
    |   |-RecoveryExpr 0x1379286c0 <col:34> '<dependent type>' contains-errors lvalue
    |   `-DeclRefExpr 0x1379286e0 <col:40> 'const char *' lvalue ParmVar 0x1379281f0 'name' 'const char *'
    |-IfStmt 0x137941868 <line:8:5, line:9:20>
    | |-BinaryOperator 0x1379287d0 <line:8:9, col:16> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x137928758 <col:9> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x1379287b0 <col:16> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x137941858 <line:9:9, col:20>
    |   `-ImplicitCastExpr 0x137941840 <col:16, col:20> 'int' <LValueToRValue>
    |     `-ParenExpr 0x137941820 <col:16, col:20> 'int' lvalue
    |       `-DeclRefExpr 0x137941800 <col:17> 'int' lvalue ParmVar 0x137928270 'def' 'int'
    |-IfStmt 0x137942090 <line:11:5, line:26:5> has_else
    | |-RecoveryExpr 0x1379419c0 <line:11:9, col:40> '_Bool' contains-errors
    | |-BinaryOperator 0x137941a20 <line:12:9, col:15> 'int' '='
    | | |-DeclRefExpr 0x1379419e0 <col:9> 'int' lvalue ParmVar 0x137928270 'def' 'int'
    | | `-IntegerLiteral 0x137941a00 <col:15> 'int' 1
    | `-IfStmt 0x137942060 <line:13:10, line:26:5> has_else
    |   |-RecoveryExpr 0x137941a98 <line:13:14, col:45> '_Bool' contains-errors
    |   |-BinaryOperator 0x137941af8 <line:14:9, col:15> 'int' '='
    |   | |-DeclRefExpr 0x137941ab8 <col:9> 'int' lvalue ParmVar 0x137928270 'def' 'int'
    |   | `-IntegerLiteral 0x137941ad8 <col:15> 'int' 0
    |   `-IfStmt 0x137942030 <line:15:10, line:26:5> has_else
    |     |-RecoveryExpr 0x137941b70 <line:15:14, col:45> '_Bool' contains-errors
    |     |-BinaryOperator 0x137941bd0 <line:16:2, col:8> 'int' '='
    |     | |-DeclRefExpr 0x137941b90 <col:2> 'int' lvalue ParmVar 0x137928270 'def' 'int'
    |     | `-IntegerLiteral 0x137941bb0 <col:8> 'int' 1
    |     `-IfStmt 0x137942000 <line:17:10, line:26:5> has_else
    |       |-RecoveryExpr 0x137941c48 <line:17:14, col:45> '_Bool' contains-errors
    |       |-BinaryOperator 0x137941ca8 <line:18:9, col:15> 'int' '='
    |       | |-DeclRefExpr 0x137941c68 <col:9> 'int' lvalue ParmVar 0x137928270 'def' 'int'
    |       | `-IntegerLiteral 0x137941c88 <col:15> 'int' 0
    |       `-CompoundStmt 0x137941ff0 <line:19:10, line:26:5>
    `-ReturnStmt 0x137942118 <line:27:5, col:16>
      `-ImplicitCastExpr 0x137942100 <col:12, col:16> 'int' <LValueToRValue>
        `-ParenExpr 0x1379420e0 <col:12, col:16> 'int' lvalue
          `-DeclRefExpr 0x1379420c0 <col:13> 'int' lvalue ParmVar 0x137928270 'def' 'int'
