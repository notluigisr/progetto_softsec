`-FunctionDecl 0x157928258  line:1:5 invalid ASN1_TYPE_cmp 'int (const int *, const int *)'
  |-ParmVarDecl 0x1579280f0 <col:19, col:36> col:36 invalid a 'const int *'
  |-ParmVarDecl 0x157928170 <col:39, col:56> col:56 invalid b 'const int *'
  `-CompoundStmt 0x157941e50 <line:2:1, line:44:1>
    |-DeclStmt 0x1579283c8 <line:3:5, col:20>
    | `-VarDecl 0x157928328 <col:5, col:19> col:9 used result 'int' cinit
    |   `-UnaryOperator 0x1579283b0 <col:18, col:19> 'int' prefix '-'
    |     `-IntegerLiteral 0x157928390 <col:19> 'int' 1
    |-IfStmt 0x1579285f8 <line:5:5, line:6:17>
    | |-BinaryOperator 0x157928590 <line:5:9, col:35> 'int' contains-errors '||'
    | | |-BinaryOperator 0x157928480 <col:9, col:16> 'int' contains-errors '||'
    | | | |-UnaryOperator 0x157928418 <col:9, col:10> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | | | `-ImplicitCastExpr 0x157928400 <col:10> '<dependent type>' contains-errors <LValueToRValue>
    | | | |   `-RecoveryExpr 0x1579283e0 <col:10> '<dependent type>' contains-errors lvalue
    | | | `-UnaryOperator 0x157928468 <col:15, col:16> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | |   `-ImplicitCastExpr 0x157928450 <col:16> '<dependent type>' contains-errors <LValueToRValue>
    | | |     `-RecoveryExpr 0x157928430 <col:16> '<dependent type>' contains-errors lvalue
    | | `-BinaryOperator 0x157928570 <col:21, col:35> 'int' contains-errors '!='
    | |   |-CXXDependentScopeMemberExpr 0x1579284c0 <col:21, col:24> '<dependent type>' contains-errors lvalue ->type
    | |   | `-RecoveryExpr 0x1579284a0 <col:21> '<dependent type>' contains-errors lvalue
    | |   `-CXXDependentScopeMemberExpr 0x157928528 <col:32, col:35> '<dependent type>' contains-errors lvalue ->type
    | |     `-RecoveryExpr 0x157928508 <col:32> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x1579285e8 <line:6:9, col:17>
    |   `-UnaryOperator 0x1579285d0 <col:16, col:17> 'int' prefix '-'
    |     `-IntegerLiteral 0x1579285b0 <col:17> 'int' 1
    |-SwitchStmt 0x157928698 <line:8:5, line:41:5>
    | |-ImplicitCastExpr 0x157928680 <line:8:13, col:16> '<dependent type>' contains-errors <LValueToRValue>
    | | `-CXXDependentScopeMemberExpr 0x157928638 <col:13, col:16> '<dependent type>' contains-errors lvalue ->type
    | |   `-RecoveryExpr 0x157928618 <col:13> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x157941dc8 <col:22, line:41:5>
    |   |-BinaryOperator 0x157941a68 <line:10:9, col:58> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x1579286d8 <col:9> 'int' lvalue Var 0x157928328 'result' 'int'
    |   | `-CallExpr 0x157941a38 <col:18, col:58> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x1579418b8 <col:18> 'int ()' Function 0x157941800 'OBJ_cmp' 'int ()'
    |   |   |-CXXDependentScopeMemberExpr 0x157941940 <col:26, col:35> '<dependent type>' contains-errors lvalue .object
    |   |   | `-CXXDependentScopeMemberExpr 0x1579418f8 <col:26, col:29> '<dependent type>' contains-errors lvalue ->value
    |   |   |   `-RecoveryExpr 0x1579418d8 <col:26> '<dependent type>' contains-errors lvalue
    |   |   `-CXXDependentScopeMemberExpr 0x1579419f0 <col:43, col:52> '<dependent type>' contains-errors lvalue .object
    |   |     `-CXXDependentScopeMemberExpr 0x1579419a8 <col:43, col:46> '<dependent type>' contains-errors lvalue ->value
    |   |       `-RecoveryExpr 0x157941988 <col:43> '<dependent type>' contains-errors lvalue
    |   |-BreakStmt 0x157941a88 <line:11:9>
    |   |-BinaryOperator 0x157941ae8 <line:13:9, col:18> 'int' '='
    |   | |-DeclRefExpr 0x157941aa8 <col:9> 'int' lvalue Var 0x157928328 'result' 'int'
    |   | `-IntegerLiteral 0x157941ac8 <col:18> 'int' 0
    |   |-BreakStmt 0x157941b08 <line:14:9>
    |   |-DefaultStmt 0x157941da0 <line:37:5, col:12>
    |   | `-NullStmt 0x157941d98 <col:12>
    |   `-BreakStmt 0x157941dc0 <line:40:9>
    `-ReturnStmt 0x157941e40 <line:43:5, col:12>
      `-ImplicitCastExpr 0x157941e28 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x157941e08 <col:12> 'int' lvalue Var 0x157928328 'result' 'int'
