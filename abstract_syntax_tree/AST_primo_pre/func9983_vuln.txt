`-FunctionDecl 0x1459419f8  line:1:1 invalid getln 'int (int, char *, int, int, enum tgetpass_errval *)'
  |-ParmVarDecl 0x1459280d8 <col:7, col:11> col:11 used fd 'int'
  |-ParmVarDecl 0x145928158 <col:15, col:21> col:21 used buf 'char *'
  |-ParmVarDecl 0x1459281f0 <col:26, col:33> col:33 invalid bufsiz 'int'
  |-ParmVarDecl 0x145928270 <col:41, col:45> col:45 used feedback 'int'
  |-ParmVarDecl 0x145941888 <line:2:5, col:27> col:27 used errval 'enum tgetpass_errval *'
  `-CompoundStmt 0x14600a2d0 <line:3:1, line:77:1>
    |-BinaryOperator 0x145941b80 <line:4:5, col:19> 'unsigned long' contains-errors '='
    | |-UnaryExprOrTypeTraitExpr 0x145941b60 <col:5, col:12> 'unsigned long' contains-errors sizeof
    | | `-RecoveryExpr 0x145941b40 <col:12> '<dependent type>' contains-errors lvalue
    | `-RecoveryExpr 0x145941b00 <col:19> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x145941c58 <line:6:5, col:19>
    | `-VarDecl 0x145941bb8 <col:5, col:16> col:11 used cp 'char *' cinit
    |   `-ImplicitCastExpr 0x145941c40 <col:16> 'char *' <LValueToRValue>
    |     `-DeclRefExpr 0x145941c20 <col:16> 'char *' lvalue ParmVar 0x145928158 'buf' 'char *'
    |-DeclStmt 0x145941d18 <line:7:5, col:18>
    | `-VarDecl 0x145941c80 <col:5, col:14> col:10 used c 'char' cinit
    |   `-ImplicitCastExpr 0x145941d00 <col:14> 'char' <IntegralCast>
    |     `-CharacterLiteral 0x145941ce8 <col:14> 'int' 0
    |-CallExpr 0x145941f38 <line:8:5, col:38> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x145941e90 <col:5> 'int ()' Function 0x145941dd8 'debug_decl' 'int ()'
    | |-RecoveryExpr 0x145941eb0 <col:16> '<dependent type>' contains-errors lvalue
    | `-RecoveryExpr 0x145941f18 <col:23> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x145942070 <line:10:5, col:15> 'enum tgetpass_errval' contains-errors '='
    | |-UnaryOperator 0x145942038 <col:5, col:6> 'enum tgetpass_errval' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x145942020 <col:6> 'enum tgetpass_errval *' <LValueToRValue>
    | |   `-DeclRefExpr 0x145941f68 <col:6> 'enum tgetpass_errval *' lvalue ParmVar 0x145941888 'errval' 'enum tgetpass_errval *'
    | `-RecoveryExpr 0x145942050 <col:15> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x145942410 <line:12:5, line:16:5>
    | |-BinaryOperator 0x145942108 <line:12:9, col:17> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x1459420e8 <col:9> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x1459420a8 <col:17> 'int' 0
    | `-CompoundStmt 0x1459423f0 <col:20, line:16:5>
    |   |-BinaryOperator 0x145942230 <line:13:2, col:12> 'enum tgetpass_errval' contains-errors '='
    |   | |-UnaryOperator 0x1459421f8 <col:2, col:3> 'enum tgetpass_errval' lvalue prefix '*' cannot overflow
    |   | | `-ImplicitCastExpr 0x1459421e0 <col:3> 'enum tgetpass_errval *' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x145942128 <col:3> 'enum tgetpass_errval *' lvalue ParmVar 0x145941888 'errval' 'enum tgetpass_errval *'
    |   | `-RecoveryExpr 0x145942210 <col:12> '<dependent type>' contains-errors lvalue
    |   `-CallExpr 0x1459423c8 <line:15:2, col:23> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x145942348 <col:2> 'int ()' Function 0x145942290 'debug_return_str' 'int ()'
    |     `-RecoveryExpr 0x1459423a8 <col:19> '<dependent type>' contains-errors lvalue
    |-WhileStmt 0x1460099a0 <line:18:5, line:46:5>
    | |-UnaryOperator 0x145942480 <line:18:12, col:14> '<dependent type>' contains-errors prefix '--' cannot overflow
    | | `-RecoveryExpr 0x145942460 <col:14> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x146009978 <col:20, line:46:5>
    |   |-IfStmt 0x146008d80 <line:20:2, line:21:6>
    |   | |-BinaryOperator 0x146008d58 <line:20:6, col:35> 'int' contains-errors '||'
    |   | | |-BinaryOperator 0x146008ce8 <col:6, col:22> 'int' contains-errors '||'
    |   | | | |-BinaryOperator 0x146008c78 <col:6, col:12> 'int' contains-errors '!='
    |   | | | | |-RecoveryExpr 0x146008c58 <col:6> '<dependent type>' contains-errors lvalue
    |   | | | | `-IntegerLiteral 0x1459426c0 <col:12> 'int' 1
    |   | | | `-BinaryOperator 0x146008cc8 <col:17, col:22> 'int' '=='
    |   | | |   |-ImplicitCastExpr 0x146008cb0 <col:17> 'int' <IntegralCast>
    |   | | |   | `-ImplicitCastExpr 0x146008c98 <col:17> 'char' <LValueToRValue>
    |   | | |   |   `-DeclRefExpr 0x145942700 <col:17> 'char' lvalue Var 0x145941c80 'c' 'char'
    |   | | |   `-CharacterLiteral 0x145942720 <col:22> 'int' 10
    |   | | `-BinaryOperator 0x146008d38 <col:30, col:35> 'int' '=='
    |   | |   |-ImplicitCastExpr 0x146008d20 <col:30> 'int' <IntegralCast>
    |   | |   | `-ImplicitCastExpr 0x146008d08 <col:30> 'char' <LValueToRValue>
    |   | |   |   `-DeclRefExpr 0x1459427a8 <col:30> 'char' lvalue Var 0x145941c80 'c' 'char'
    |   | |   `-CharacterLiteral 0x1459427c8 <col:35> 'int' 13
    |   | `-BreakStmt 0x146008d78 <line:21:6>
    |   |-IfStmt 0x1460098b0 <line:22:2, line:44:2>
    |   | |-ImplicitCastExpr 0x146008dc0 <line:22:6> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x146008da0 <col:6> 'int' lvalue ParmVar 0x145928270 'feedback' 'int'
    |   | `-CompoundStmt 0x146009890 <col:16, line:44:2>
    |   |   |-IfStmt 0x146009620 <line:23:6, line:42:6> has_else
    |   |   | |-BinaryOperator 0x146008e50 <line:23:10, col:15> 'int' contains-errors '=='
    |   |   | | |-DeclRefExpr 0x146008dd8 <col:10> 'char' lvalue Var 0x145941c80 'c' 'char'
    |   |   | | `-RecoveryExpr 0x146008e30 <col:15> '<dependent type>' contains-errors lvalue
    |   |   | |-CompoundStmt 0x146008e98 <col:30, line:26:6>
    |   |   | | `-BreakStmt 0x146008e90 <line:25:3>
    |   |   | `-IfStmt 0x1460095f0 <line:26:13, line:42:6> has_else
    |   |   |   |-RecoveryExpr 0x146008ed0 <line:26:17, col:22> '_Bool' contains-errors
    |   |   |   |-CompoundStmt 0x1460092c0 <col:38, line:34:6>
    |   |   |   | |-WhileStmt 0x146009278 <line:27:3, line:31:3>
    |   |   |   | | |-BinaryOperator 0x146008f60 <line:27:10, col:15> 'int' '>'
    |   |   |   | | | |-ImplicitCastExpr 0x146008f30 <col:10> 'char *' <LValueToRValue>
    |   |   |   | | | | `-DeclRefExpr 0x146008ef0 <col:10> 'char *' lvalue Var 0x145941bb8 'cp' 'char *'
    |   |   |   | | | `-ImplicitCastExpr 0x146008f48 <col:15> 'char *' <LValueToRValue>
    |   |   |   | | |   `-DeclRefExpr 0x146008f10 <col:15> 'char *' lvalue ParmVar 0x145928158 'buf' 'char *'
    |   |   |   | | `-CompoundStmt 0x146009258 <col:20, line:31:3>
    |   |   |   | |   |-IfStmt 0x146009200 <line:28:7, line:29:4>
    |   |   |   | |   | |-BinaryOperator 0x1460091d8 <line:28:11, col:35> 'int' '=='
    |   |   |   | |   | | |-CallExpr 0x146009138 <col:11, col:29> 'int'
    |   |   |   | |   | | | |-ImplicitCastExpr 0x146009120 <col:11> 'int (*)()' <FunctionToPointerDecay>
    |   |   |   | |   | | | | `-DeclRefExpr 0x146009060 <col:11> 'int ()' Function 0x146008fa8 'write' 'int ()'
    |   |   |   | |   | | | |-ImplicitCastExpr 0x146009170 <col:17> 'int' <LValueToRValue>
    |   |   |   | |   | | | | `-DeclRefExpr 0x146009080 <col:17> 'int' lvalue ParmVar 0x1459280d8 'fd' 'int'
    |   |   |   | |   | | | |-ImplicitCastExpr 0x146009188 <col:21> 'char *' <ArrayToPointerDecay>
    |   |   |   | |   | | | | `-StringLiteral 0x1460090e0 <col:21> 'char[4]' lvalue "STR"
    |   |   |   | |   | | | `-IntegerLiteral 0x146009100 <col:28> 'int' 3
    |   |   |   | |   | | `-UnaryOperator 0x1460091c0 <col:34, col:35> 'int' prefix '-'
    |   |   |   | |   | |   `-IntegerLiteral 0x1460091a0 <col:35> 'int' 1
    |   |   |   | |   | `-BreakStmt 0x1460091f8 <line:29:4>
    |   |   |   | |   `-UnaryOperator 0x146009240 <line:30:7, col:9> 'char *' prefix '--'
    |   |   |   | |     `-DeclRefExpr 0x146009220 <col:9> 'char *' lvalue Var 0x145941bb8 'cp' 'char *'
    |   |   |   | `-ContinueStmt 0x1460092b8 <line:33:3>
    |   |   |   `-IfStmt 0x1460095d0 <line:34:13, line:42:6>
    |   |   |     |-RecoveryExpr 0x146009300 <line:34:17, col:22> '_Bool' contains-errors
    |   |   |     `-CompoundStmt 0x1460095b0 <col:39, line:42:6>
    |   |   |       |-IfStmt 0x146009588 <line:35:3, line:40:3>
    |   |   |       | |-BinaryOperator 0x146009390 <line:35:7, col:12> 'int' '>'
    |   |   |       | | |-ImplicitCastExpr 0x146009360 <col:7> 'char *' <LValueToRValue>
    |   |   |       | | | `-DeclRefExpr 0x146009320 <col:7> 'char *' lvalue Var 0x145941bb8 'cp' 'char *'
    |   |   |       | | `-ImplicitCastExpr 0x146009378 <col:12> 'char *' <LValueToRValue>
    |   |   |       | |   `-DeclRefExpr 0x146009340 <col:12> 'char *' lvalue ParmVar 0x145928158 'buf' 'char *'
    |   |   |       | `-CompoundStmt 0x146009568 <col:17, line:40:3>
    |   |   |       |   |-IfStmt 0x146009510 <line:36:7, line:37:4>
    |   |   |       |   | |-BinaryOperator 0x1460094e8 <line:36:11, col:35> 'int' '=='
    |   |   |       |   | | |-CallExpr 0x146009448 <col:11, col:29> 'int'
    |   |   |       |   | | | |-ImplicitCastExpr 0x146009430 <col:11> 'int (*)()' <FunctionToPointerDecay>
    |   |   |       |   | | | | `-DeclRefExpr 0x1460093b0 <col:11> 'int ()' Function 0x146008fa8 'write' 'int ()'
    |   |   |       |   | | | |-ImplicitCastExpr 0x146009480 <col:17> 'int' <LValueToRValue>
    |   |   |       |   | | | | `-DeclRefExpr 0x1460093d0 <col:17> 'int' lvalue ParmVar 0x1459280d8 'fd' 'int'
    |   |   |       |   | | | |-ImplicitCastExpr 0x146009498 <col:21> 'char *' <ArrayToPointerDecay>
    |   |   |       |   | | | | `-StringLiteral 0x1460093f0 <col:21> 'char[4]' lvalue "STR"
    |   |   |       |   | | | `-IntegerLiteral 0x146009410 <col:28> 'int' 3
    |   |   |       |   | | `-UnaryOperator 0x1460094d0 <col:34, col:35> 'int' prefix '-'
    |   |   |       |   | |   `-IntegerLiteral 0x1460094b0 <col:35> 'int' 1
    |   |   |       |   | `-BreakStmt 0x146009508 <line:37:4>
    |   |   |       |   `-UnaryOperator 0x146009550 <line:38:7, col:9> 'char *' prefix '--'
    |   |   |       |     `-DeclRefExpr 0x146009530 <col:9> 'char *' lvalue Var 0x145941bb8 'cp' 'char *'
    |   |   |       `-ContinueStmt 0x1460095a8 <line:41:3>
    |   |   `-CallExpr 0x146009868 <line:43:6, col:39> 'int'
    |   |     |-ImplicitCastExpr 0x146009850 <col:6> 'int (*)()' <FunctionToPointerDecay>
    |   |     | `-DeclRefExpr 0x146009730 <col:6> 'int ()' Function 0x146009678 'ignore_result' 'int ()'
    |   |     `-CallExpr 0x1460097e8 <col:20, col:38> 'int'
    |   |       |-ImplicitCastExpr 0x1460097d0 <col:20> 'int (*)()' <FunctionToPointerDecay>
    |   |       | `-DeclRefExpr 0x146009750 <col:20> 'int ()' Function 0x146008fa8 'write' 'int ()'
    |   |       |-ImplicitCastExpr 0x146009820 <col:26> 'int' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x146009770 <col:26> 'int' lvalue ParmVar 0x1459280d8 'fd' 'int'
    |   |       |-ImplicitCastExpr 0x146009838 <col:30> 'char *' <ArrayToPointerDecay>
    |   |       | `-StringLiteral 0x146009790 <col:30> 'char[4]' lvalue "STR"
    |   |       `-IntegerLiteral 0x1460097b0 <col:37> 'int' 1
    |   `-BinaryOperator 0x146009958 <line:45:2, col:10> 'char' '='
    |     |-UnaryOperator 0x146009908 <col:2, col:5> 'char' lvalue prefix '*' cannot overflow
    |     | `-UnaryOperator 0x1460098f0 <col:3, col:5> 'char *' postfix '++'
    |     |   `-DeclRefExpr 0x1460098d0 <col:3> 'char *' lvalue Var 0x145941bb8 'cp' 'char *'
    |     `-ImplicitCastExpr 0x146009940 <col:10> 'char' <LValueToRValue>
    |       `-DeclRefExpr 0x146009920 <col:10> 'char' lvalue Var 0x145941c80 'c' 'char'
    |-BinaryOperator 0x146009a40 <line:47:5, col:11> 'char' '='
    | |-UnaryOperator 0x1460099f8 <col:5, col:6> 'char' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x1460099e0 <col:6> 'char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x1460099c0 <col:6> 'char *' lvalue Var 0x145941bb8 'cp' 'char *'
    | `-ImplicitCastExpr 0x146009a28 <col:11> 'char' <IntegralCast>
    |   `-CharacterLiteral 0x146009a10 <col:11> 'int' 0
    |-IfStmt 0x146009d40 <line:48:5, line:55:5>
    | |-ImplicitCastExpr 0x146009a80 <line:48:9> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x146009a60 <col:9> 'int' lvalue ParmVar 0x145928270 'feedback' 'int'
    | `-CompoundStmt 0x146009d28 <col:19, line:55:5>
    |   `-WhileStmt 0x146009d08 <line:50:2, line:54:2>
    |     |-BinaryOperator 0x146009b08 <line:50:9, col:14> 'int' '>'
    |     | |-ImplicitCastExpr 0x146009ad8 <col:9> 'char *' <LValueToRValue>
    |     | | `-DeclRefExpr 0x146009a98 <col:9> 'char *' lvalue Var 0x145941bb8 'cp' 'char *'
    |     | `-ImplicitCastExpr 0x146009af0 <col:14> 'char *' <LValueToRValue>
    |     |   `-DeclRefExpr 0x146009ab8 <col:14> 'char *' lvalue ParmVar 0x145928158 'buf' 'char *'
    |     `-CompoundStmt 0x146009ce8 <col:19, line:54:2>
    |       |-IfStmt 0x146009c90 <line:51:6, line:52:3>
    |       | |-BinaryOperator 0x146009c68 <line:51:10, col:34> 'int' '=='
    |       | | |-CallExpr 0x146009bc0 <col:10, col:28> 'int'
    |       | | | |-ImplicitCastExpr 0x146009ba8 <col:10> 'int (*)()' <FunctionToPointerDecay>
    |       | | | | `-DeclRefExpr 0x146009b28 <col:10> 'int ()' Function 0x146008fa8 'write' 'int ()'
    |       | | | |-ImplicitCastExpr 0x146009c00 <col:16> 'int' <LValueToRValue>
    |       | | | | `-DeclRefExpr 0x146009b48 <col:16> 'int' lvalue ParmVar 0x1459280d8 'fd' 'int'
    |       | | | |-ImplicitCastExpr 0x146009c18 <col:20> 'char *' <ArrayToPointerDecay>
    |       | | | | `-StringLiteral 0x146009b68 <col:20> 'char[4]' lvalue "STR"
    |       | | | `-IntegerLiteral 0x146009b88 <col:27> 'int' 3
    |       | | `-UnaryOperator 0x146009c50 <col:33, col:34> 'int' prefix '-'
    |       | |   `-IntegerLiteral 0x146009c30 <col:34> 'int' 1
    |       | `-BreakStmt 0x146009c88 <line:52:3>
    |       `-UnaryOperator 0x146009cd0 <line:53:6, col:8> 'char *' prefix '--'
    |         `-DeclRefExpr 0x146009cb0 <col:8> 'char *' lvalue Var 0x145941bb8 'cp' 'char *'
    `-SwitchStmt 0x146009d80 <line:57:5, line:76:5>
      |-RecoveryExpr 0x146009d60 <line:57:13> 'int' contains-errors
      `-CompoundStmt 0x14600a2a8 <col:17, line:76:5>
        |-CaseStmt 0x146009df8 <line:58:5, line:65:2>
        | |-ConstantExpr 0x146009de0 <line:58:10, col:11> 'int'
        | | `-UnaryOperator 0x146009dc8 <col:10, col:11> 'int' prefix '-'
        | |   `-IntegerLiteral 0x146009da8 <col:11> 'int' 1
        | `-IfStmt 0x146009f40 <line:60:2, line:65:2> has_else
        |   |-RecoveryExpr 0x146009e20 <line:60:6, col:15> '_Bool' contains-errors
        |   |-CompoundStmt 0x146009ed0 <col:22, line:63:2>
        |   `-CompoundStmt 0x146009f30 <col:9, line:65:2>
        |-CaseStmt 0x146009fc8 <line:67:5, line:72:2>
        | |-ConstantExpr 0x146009fb0 <line:67:10> 'int'
        | | `-IntegerLiteral 0x146009f90 <col:10> 'int' 0
        | `-IfStmt 0x14600a0f0 <line:69:2, line:72:2>
        |   |-RecoveryExpr 0x14600a050 <line:69:6, col:23> '_Bool' contains-errors
        |   `-CompoundStmt 0x14600a0e0 <col:26, line:72:2>
        `-DefaultStmt 0x14600a288 <line:74:5, line:75:29>
          `-CallExpr 0x14600a248 <col:2, col:29> 'int'
            |-ImplicitCastExpr 0x14600a230 <col:2> 'int (*)()' <FunctionToPointerDecay>
            | `-DeclRefExpr 0x14600a1f0 <col:2> 'int ()' Function 0x14600a138 'debug_return_str_masked' 'int ()'
            `-ImplicitCastExpr 0x14600a270 <col:26> 'char *' <LValueToRValue>
              `-DeclRefExpr 0x14600a210 <col:26> 'char *' lvalue ParmVar 0x145928158 'buf' 'char *'
