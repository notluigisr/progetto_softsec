`-FunctionDecl 0x151128508  line:1:1 invalid decompress_zstd 'int (int *, int *, int, int, int **, int *)'
  |-ParmVarDecl 0x151128128 <col:17, col:27> col:27 invalid tvb 'int *'
  |-ParmVarDecl 0x1511281a8 <col:32, col:45> col:45 invalid pinfo 'int *'
  |-ParmVarDecl 0x151128228 <col:52, col:56> col:56 offset 'int'
  |-ParmVarDecl 0x1511282a8 <col:64, col:72> col:72 invalid length 'int'
  |-ParmVarDecl 0x151128360 <col:80, col:91> col:91 invalid decompressed_tvb 'int **'
  |-ParmVarDecl 0x1511283e0 <col:109, col:114> col:114 used decompressed_offset 'int *'
  `-CompoundStmt 0x151809210 <line:2:1, line:38:1>
    |-RecoveryExpr 0x1530088c8 <line:5:5, col:17> '<dependent type>' contains-errors lvalue
    | |-UnaryExprOrTypeTraitExpr 0x1530088a8 <col:5, col:12> 'unsigned long' contains-errors sizeof
    | | `-RecoveryExpr 0x153008888 <col:12> '<dependent type>' contains-errors lvalue
    | `-IntegerLiteral 0x153008820 <col:17> 'int' 0
    |-DeclStmt 0x1530089c8 <line:7:5, col:16>
    | `-VarDecl 0x153008940 <col:5, col:15> col:9 used ret 'int' cinit
    |   `-IntegerLiteral 0x1530089a8 <col:15> 'int' 0
    |-DoStmt 0x153009158 <line:9:5, line:23:20>
    | |-CompoundStmt 0x1530090f8 <line:9:8, line:23:5>
    | | |-IfStmt 0x153008d30 <line:14:9, line:16:9>
    | | | |-RecoveryExpr 0x153008c90 <line:14:13, col:28> '_Bool' contains-errors
    | | | `-CompoundStmt 0x153008d18 <col:31, line:16:9>
    | | |   `-GotoStmt 0x153008d00 <line:15:13, col:18> 'end' 0x153008cb0
    | | `-IfStmt 0x153008eb8 <line:17:9, line:19:9>
    | |   |-RecoveryExpr 0x153008d50 <line:17:13, col:14> '_Bool' contains-errors
    | |   `-CompoundStmt 0x153008ea8 <col:29, line:19:9>
    | `-RecoveryExpr 0x153009138 <line:23:14, col:19> '_Bool' contains-errors
    |-BinaryOperator 0x1530091b8 <line:24:5, col:11> 'int' '='
    | |-DeclRefExpr 0x153009178 <col:5> 'int' lvalue Var 0x153008940 'ret' 'int'
    | `-IntegerLiteral 0x153009198 <col:11> 'int' 1
    |-LabelStmt 0x153009328 <line:25:1, line:28:5> 'end'
    | `-IfStmt 0x153009308 <line:26:5, line:28:5>
    |   |-RecoveryExpr 0x1530091d8 <line:26:9> '_Bool' contains-errors
    |   `-CompoundStmt 0x1530092f8 <col:24, line:28:5>
    |-IfStmt 0x153009790 <line:30:5, line:36:5> has_else
    | |-BinaryOperator 0x1530094a0 <line:30:9, col:16> 'int' '=='
    | | |-ImplicitCastExpr 0x153009488 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x153009448 <col:9> 'int' lvalue Var 0x153008940 'ret' 'int'
    | | `-IntegerLiteral 0x153009468 <col:16> 'int' 1
    | |-CompoundStmt 0x1530095a0 <col:19, line:33:5>
    | | `-BinaryOperator 0x153009580 <line:32:9, col:32> 'int' '='
    | |   |-UnaryOperator 0x153009548 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
    | |   | `-ImplicitCastExpr 0x153009530 <col:10> 'int *' <LValueToRValue>
    | |   |   `-DeclRefExpr 0x153009510 <col:10> 'int *' lvalue ParmVar 0x1511283e0 'decompressed_offset' 'int *'
    | |   `-IntegerLiteral 0x153009560 <col:32> 'int' 0
    | `-CompoundStmt 0x153009780 <line:34:10, line:36:5>
    `-ReturnStmt 0x151809200 <line:37:5, col:12>
      `-ImplicitCastExpr 0x1530097e0 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x1530097c0 <col:12> 'int' lvalue Var 0x153008940 'ret' 'int'
