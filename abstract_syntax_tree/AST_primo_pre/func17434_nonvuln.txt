`-FunctionDecl 0x131128328  line:1:12 main 'int (int, char **)' extern
  |-ParmVarDecl 0x1311280d8 <col:17, col:21> col:21 argc 'int'
  |-ParmVarDecl 0x131128200 <col:27, col:38> col:33 argv 'char **'
  `-CompoundStmt 0x131143c10 <line:2:1, line:60:1>
    |-DeclStmt 0x1311284a8 <line:3:3, col:8>
    | `-VarDecl 0x131128440 <col:3, col:7> col:7 used r 'int'
    |-DeclStmt 0x1311285c8 <line:4:3, col:16>
    | `-VarDecl 0x131128560 <col:3, col:15> col:8 used buf 'char[200]'
    |-IfStmt 0x131142940 <line:11:3, line:15:3>
    | |-ImplicitCastExpr 0x131142400 <line:11:7> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x1311287e0 <col:7> 'int' lvalue Var 0x131128440 'r' 'int'
    | `-CompoundStmt 0x131142918 <col:10, line:15:3>
    |   |-CallExpr 0x131142660 <line:12:5, col:39> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x1311424f8 <col:5> 'int ()' Function 0x131142440 'regerror' 'int ()'
    |   | |-DeclRefExpr 0x131142518 <col:14> 'int' lvalue Var 0x131128440 'r' 'int'
    |   | |-UnaryOperator 0x131142648 <col:17, col:18> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | | `-RecoveryExpr 0x131142628 <col:18> '<dependent type>' contains-errors lvalue
    |   | |-DeclRefExpr 0x131142568 <col:23> 'char[200]' lvalue Var 0x131128560 'buf' 'char[200]'
    |   | `-UnaryExprOrTypeTraitExpr 0x1311425c8 <col:28, col:38> 'unsigned long' sizeof
    |   |   `-ParenExpr 0x1311425a8 <col:34, col:38> 'char[200]' lvalue
    |   |     `-DeclRefExpr 0x131142588 <col:35> 'char[200]' lvalue Var 0x131128560 'buf' 'char[200]' non_odr_use_unevaluated
    |   |-CallExpr 0x131142898 <line:13:5, col:31> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x131142780 <col:5> 'int ()' Function 0x1311426c8 'fprintf' 'int ()'
    |   | |-RecoveryExpr 0x131142878 <col:13> '<dependent type>' contains-errors lvalue
    |   | |-StringLiteral 0x131142800 <col:21> 'char[4]' lvalue "STR"
    |   | `-DeclRefExpr 0x131142820 <col:28> 'char[200]' lvalue Var 0x131128560 'buf' 'char[200]'
    |   `-ReturnStmt 0x131142908 <line:14:5, col:13>
    |     `-UnaryOperator 0x1311428f0 <col:12, col:13> 'int' prefix '-'
    |       `-IntegerLiteral 0x1311428d0 <col:13> 'int' 1
    |-IfStmt 0x131142cd8 <line:21:3, line:25:3>
    | |-ImplicitCastExpr 0x131142b40 <line:21:7> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x131142b20 <col:7> 'int' lvalue Var 0x131128440 'r' 'int'
    | `-CompoundStmt 0x131142cc0 <col:10, line:25:3>
    |   `-ReturnStmt 0x131142cb0 <line:24:5, col:13>
    |     `-UnaryOperator 0x131142c98 <col:12, col:13> 'int' prefix '-'
    |       `-IntegerLiteral 0x131142c78 <col:13> 'int' 1
    |-IfStmt 0x131142f30 <line:31:3, line:35:3>
    | |-ImplicitCastExpr 0x131142d98 <line:31:7> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x131142d78 <col:7> 'int' lvalue Var 0x131128440 'r' 'int'
    | `-CompoundStmt 0x131142f18 <col:10, line:35:3>
    |   `-ReturnStmt 0x131142f08 <line:34:5, col:13>
    |     `-UnaryOperator 0x131142ef0 <col:12, col:13> 'int' prefix '-'
    |       `-IntegerLiteral 0x131142ed0 <col:13> 'int' 1
    |-IfStmt 0x131143268 <line:42:3, line:46:3>
    | |-ImplicitCastExpr 0x1311430d0 <line:42:7> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x1311430b0 <col:7> 'int' lvalue Var 0x131128440 'r' 'int'
    | `-CompoundStmt 0x131143250 <col:10, line:46:3>
    |   `-ReturnStmt 0x131143240 <line:45:5, col:13>
    |     `-UnaryOperator 0x131143228 <col:12, col:13> 'int' prefix '-'
    |       `-IntegerLiteral 0x131143208 <col:13> 'int' 1
    |-IfStmt 0x131143aa0 <line:51:3, line:55:3>
    | |-ImplicitCastExpr 0x131143308 <line:51:7> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x1311432e8 <col:7> 'int' lvalue Var 0x131128440 'r' 'int'
    | `-CompoundStmt 0x131143a88 <col:10, line:55:3>
    |   `-ReturnStmt 0x131143a78 <line:54:5, col:13>
    |     `-UnaryOperator 0x131143a60 <col:12, col:13> 'int' prefix '-'
    |       `-IntegerLiteral 0x131143a40 <col:13> 'int' 1
    `-ReturnStmt 0x131143c00 <line:59:3, col:10>
      `-IntegerLiteral 0x131143be0 <col:10> 'int' 0
