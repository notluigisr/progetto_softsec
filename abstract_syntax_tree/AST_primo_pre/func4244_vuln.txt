`-FunctionDecl 0x1300fac88  line:1:14 invalid ResizeOutput 'int (int *, int *)'
  |-ParmVarDecl 0x1300fab28 <col:27, col:42> col:42 invalid context 'int *'
  |-ParmVarDecl 0x1300faba8 <col:51, col:63> col:63 invalid node 'int *'
  `-CompoundStmt 0x12781fcf0 <col:69, line:33:1>
    |-RecoveryExpr 0x1300faf70 <line:3:3> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x1300fb1a0 <line:6:3, col:68>
    | `-VarDecl 0x1300fafa8 <col:3, col:23> col:23 invalid input 'const int *'
    |-DeclStmt 0x12781f130 <line:13:3, col:46>
    | `-VarDecl 0x12781ef80 <col:3, col:45> col:7 used num_input_elements 'int' cinit
    |   `-CallExpr 0x12781f108 <col:28, col:45> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x12781f0c8 <col:28> 'int ()' Function 0x12781f010 'NumElements' 'int ()'
    |     `-RecoveryExpr 0x12781f0e8 <col:40> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x12781f1e8 <line:15:3, col:30>
    | `-VarDecl 0x12781f160 <col:3, col:29> col:7 used num_output_elements 'int' cinit
    |   `-IntegerLiteral 0x12781f1c8 <col:29> 'int' 1
    |-DeclStmt 0x12781f2b8 <line:16:3, col:23>
    | `-VarDecl 0x12781f218 <col:3, col:22> col:7 used stretch_dim 'int' cinit
    |   `-UnaryOperator 0x12781f2a0 <col:21, col:22> 'int' prefix '-'
    |     `-IntegerLiteral 0x12781f280 <col:22> 'int' 1
    |-ForStmt 0x12781f9c8 <line:17:3, line:25:3>
    | |-DeclStmt 0x12781f370 <line:17:8, col:17>
    | | `-VarDecl 0x12781f2e8 <col:8, col:16> col:12 used i 'int' cinit
    | |   `-IntegerLiteral 0x12781f350 <col:16> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x12781f490 <col:19, col:37> 'int' contains-errors '<'
    | | |-DeclRefExpr 0x12781f388 <col:19> 'int' lvalue Var 0x12781f2e8 'i' 'int'
    | | `-CXXDependentScopeMemberExpr 0x12781f448 <col:23, col:37> '<dependent type>' contains-errors lvalue ->size
    | |   `-RecoveryExpr 0x12781f428 <col:23> '<dependent type>' contains-errors lvalue
    | |-UnaryOperator 0x12781f4d0 <col:43, col:45> 'int' prefix '++'
    | | `-DeclRefExpr 0x12781f4b0 <col:45> 'int' lvalue Var 0x12781f2e8 'i' 'int'
    | `-CompoundStmt 0x12781f9a8 <col:48, line:25:3>
    |   |-DeclStmt 0x12781f5e8 <line:18:5, col:38>
    |   | `-VarDecl 0x12781f500 <col:5, col:9> col:9 used value 'int'
    |   `-IfStmt 0x12781f978 <line:19:5, line:24:5> has_else
    |     |-BinaryOperator 0x12781f670 <line:19:9, col:19> 'int' '=='
    |     | |-ImplicitCastExpr 0x12781f658 <col:9> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x12781f600 <col:9> 'int' lvalue Var 0x12781f500 'value' 'int'
    |     | `-UnaryOperator 0x12781f640 <col:18, col:19> 'int' prefix '-'
    |     |   `-IntegerLiteral 0x12781f620 <col:19> 'int' 1
    |     |-CompoundStmt 0x12781f8b8 <col:22, line:22:5>
    |     | |-CallExpr 0x12781f808 <line:20:7, col:49> '<dependent type>' contains-errors
    |     | | |-DeclRefExpr 0x12781f770 <col:7> 'int ()' Function 0x12781f6b8 'TF_LITE_ENSURE_EQ' 'int ()'
    |     | | |-RecoveryExpr 0x12781f790 <col:25> '<dependent type>' contains-errors lvalue
    |     | | |-DeclRefExpr 0x12781f7b0 <col:34> 'int' lvalue Var 0x12781f218 'stretch_dim' 'int'
    |     | | `-UnaryOperator 0x12781f7f0 <col:47, col:48> 'int' prefix '-'
    |     | |   `-IntegerLiteral 0x12781f7d0 <col:48> 'int' 1
    |     | `-BinaryOperator 0x12781f898 <line:21:7, col:21> 'int' '='
    |     |   |-DeclRefExpr 0x12781f840 <col:7> 'int' lvalue Var 0x12781f218 'stretch_dim' 'int'
    |     |   `-ImplicitCastExpr 0x12781f880 <col:21> 'int' <LValueToRValue>
    |     |     `-DeclRefExpr 0x12781f860 <col:21> 'int' lvalue Var 0x12781f2e8 'i' 'int'
    |     `-CompoundStmt 0x12781f960 <line:22:12, line:24:5>
    |       `-CompoundAssignOperator 0x12781f930 <line:23:7, col:30> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
    |         |-DeclRefExpr 0x12781f8d8 <col:7> 'int' lvalue Var 0x12781f160 'num_output_elements' 'int'
    |         `-ImplicitCastExpr 0x12781f918 <col:30> 'int' <LValueToRValue>
    |           `-DeclRefExpr 0x12781f8f8 <col:30> 'int' lvalue Var 0x12781f500 'value' 'int'
    |-IfStmt 0x12781fb90 <line:26:3, line:29:3>
    | |-BinaryOperator 0x12781fa70 <line:26:7, col:23> 'int' '!='
    | | |-ImplicitCastExpr 0x12781fa58 <col:7> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x12781fa00 <col:7> 'int' lvalue Var 0x12781f218 'stretch_dim' 'int'
    | | `-UnaryOperator 0x12781fa40 <col:22, col:23> 'int' prefix '-'
    | |   `-IntegerLiteral 0x12781fa20 <col:23> 'int' 1
    | `-CompoundStmt 0x12781fb80 <col:26, line:29:3>
    `-CallExpr 0x12781fc30 <line:31:3, col:69> '<dependent type>' contains-errors
      |-DeclRefExpr 0x12781fbb0 <col:3> 'int ()' Function 0x12781f6b8 'TF_LITE_ENSURE_EQ' 'int ()'
      |-RecoveryExpr 0x12781fbd0 <col:21> '<dependent type>' contains-errors lvalue
      |-DeclRefExpr 0x12781fbf0 <col:30> 'int' contains-errors lvalue Var 0x12781ef80 'num_input_elements' 'int'
      `-DeclRefExpr 0x12781fc10 <col:50> 'int' lvalue Var 0x12781f160 'num_output_elements' 'int'
