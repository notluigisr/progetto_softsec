`-FunctionDecl 0x1308c53a8  line:1:12 invalid spl_array_has_dimension_ex 'int (int, int *, int *, int)' static
  |-ParmVarDecl 0x1308c50d8 <col:39, col:43> col:43 used check_inherited 'int'
  |-ParmVarDecl 0x1308c51a8 <col:60, col:66> col:66 invalid object 'int *'
  |-ParmVarDecl 0x1308c5228 <col:74, col:80> col:80 invalid offset 'int *'
  |-ParmVarDecl 0x1308c52a8 <col:88, col:92> col:92 used check_empty 'int'
  `-CompoundStmt 0x12f811620 <line:2:1, line:73:1>
    |-DeclStmt 0x1308c5520 <line:4:2, col:12>
    | `-VarDecl 0x1308c54b8 <col:2, col:7> col:7 used index 'long'
    |-IfStmt 0x1308c96e0 <line:7:2, line:26:2>
    | |-BinaryOperator 0x1308c5738 <line:7:6, col:33> 'int' contains-errors '&&'
    | | |-DeclRefExpr 0x1308c5630 <col:6> 'int' lvalue ParmVar 0x1308c50d8 'check_inherited' 'int'
    | | `-CXXDependentScopeMemberExpr 0x1308c56f0 <col:25, col:33> '<dependent type>' contains-errors lvalue ->fptr_offset_has
    | |   `-RecoveryExpr 0x1308c56d0 <col:25> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x1308c96b8 <col:50, line:26:2>
    |   |-CallExpr 0x1308c8b90 <line:9:3, col:33> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x1308c8b10 <col:3> 'int ()' Function 0x1308c8a58 'SEPARATE_ARG_IF_REF' 'int ()'
    |   | `-RecoveryExpr 0x1308c8b70 <col:23> '<dependent type>' contains-errors lvalue
    |   |-CallExpr 0x1308c9080 <line:10:3, col:110> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x1308c8c98 <col:3> 'int ()' Function 0x1308c8be0 'zend_call_method_with_1_params' 'int ()'
    |   | |-UnaryOperator 0x1308c8cd8 <col:34, col:35> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | | `-RecoveryExpr 0x1308c8cb8 <col:35> '<dependent type>' contains-errors lvalue
    |   | |-CallExpr 0x1308c8e10 <col:43, col:59> '<dependent type>' contains-errors
    |   | | |-DeclRefExpr 0x1308c8dd0 <col:43> 'int ()' Function 0x1308c8d18 'Z_OBJCE_P' 'int ()'
    |   | | `-RecoveryExpr 0x1308c8df0 <col:53> '<dependent type>' contains-errors lvalue
    |   | |-UnaryOperator 0x1308c9010 <col:62, col:71> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | | `-CXXDependentScopeMemberExpr 0x1308c8fc8 <col:63, col:71> '<dependent type>' contains-errors lvalue ->fptr_offset_has
    |   | |   `-RecoveryExpr 0x1308c8fa8 <col:63> '<dependent type>' contains-errors lvalue
    |   | |-StringLiteral 0x1308c8ef0 <col:88> 'char[4]' lvalue "STR"
    |   | |-UnaryOperator 0x1308c9048 <col:95, col:96> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | | `-RecoveryExpr 0x1308c9028 <col:96> '<dependent type>' contains-errors lvalue
    |   | `-RecoveryExpr 0x1308c9060 <col:100> '<dependent type>' contains-errors lvalue
    |   `-IfStmt 0x1308c9688 <line:13:3, line:25:3> has_else
    |     |-RecoveryExpr 0x1308c92d0 <line:13:7, col:28> '_Bool' contains-errors
    |     |-CompoundStmt 0x1308c95b0 <col:31, line:20:3>
    |     | `-IfStmt 0x1308c9580 <line:15:4, line:19:4> has_else
    |     |   |-BinaryOperator 0x1308c9368 <line:15:8, col:23> 'int' '!='
    |     |   | |-ImplicitCastExpr 0x1308c9350 <col:8> 'int' <LValueToRValue>
    |     |   | | `-DeclRefExpr 0x1308c9310 <col:8> 'int' lvalue ParmVar 0x1308c52a8 'check_empty' 'int'
    |     |   | `-IntegerLiteral 0x1308c9330 <col:23> 'int' 1
    |     |   |-CompoundStmt 0x1308c93b8 <col:26, line:17:4>
    |     |   | `-ReturnStmt 0x1308c93a8 <line:16:5, col:12>
    |     |   |   `-IntegerLiteral 0x1308c9388 <col:12> 'int' 1
    |     |   `-IfStmt 0x1308c9560 <line:17:11, line:19:4>
    |     |     |-RecoveryExpr 0x1308c93d0 <line:17:15, col:23> '_Bool' contains-errors
    |     |     `-CompoundStmt 0x1308c9550 <col:40, line:19:4>
    |     `-CompoundStmt 0x1308c9668 <line:20:10, line:25:3>
    |       |-IfStmt 0x1308c9618 <line:21:4, line:23:4>
    |       | |-RecoveryExpr 0x1308c95c8 <line:21:8> '_Bool' contains-errors
    |       | `-CompoundStmt 0x1308c9608 <col:12, line:23:4>
    |       `-ReturnStmt 0x1308c9658 <line:24:4, col:11>
    |         `-IntegerLiteral 0x1308c9638 <col:11> 'int' 0
    `-IfStmt 0x12f810590 <line:28:2, line:70:2>
      |-RecoveryExpr 0x1308c9700 <line:28:6, col:7> '_Bool' contains-errors
      `-CompoundStmt 0x12f810570 <col:14, line:70:2>
        |-SwitchStmt 0x1308c9988 <line:31:3, line:63:3>
        | |-CallExpr 0x1308c9960 <line:31:10, col:25> '<dependent type>' contains-errors
        | | |-DeclRefExpr 0x1308c9920 <col:10> 'int ()' Function 0x1308c9868 'Z_TYPE_P' 'int ()'
        | | `-RecoveryExpr 0x1308c9940 <col:19> '<dependent type>' contains-errors lvalue
        | `-CompoundStmt 0x12f8103a8 <col:28, line:63:3>
        |   |-IfStmt 0x12f80fb08 <line:33:5, line:39:5> has_else
        |   | |-RecoveryExpr 0x12f80f9a8 <line:33:9, col:93> '_Bool' contains-errors
        |   | |-CompoundStmt 0x12f80faa8 <col:102, line:37:5>
        |   | | `-IfStmt 0x12f80fa88 <line:34:6, line:36:6>
        |   | |   |-BinaryOperator 0x12f80fa20 <line:34:10, col:25> 'int' '=='
        |   | |   | |-ImplicitCastExpr 0x12f80fa08 <col:10> 'int' <LValueToRValue>
        |   | |   | | `-DeclRefExpr 0x12f80f9c8 <col:10> 'int' lvalue ParmVar 0x1308c52a8 'check_empty' 'int'
        |   | |   | `-IntegerLiteral 0x12f80f9e8 <col:25> 'int' 2
        |   | |   `-CompoundStmt 0x12f80fa70 <col:28, line:36:6>
        |   | |     `-ReturnStmt 0x12f80fa60 <line:35:7, col:14>
        |   | |       `-IntegerLiteral 0x12f80fa40 <col:14> 'int' 1
        |   | `-CompoundStmt 0x12f80faf0 <line:37:12, line:39:5>
        |   |   `-ReturnStmt 0x12f80fae0 <line:38:6, col:13>
        |   |     `-IntegerLiteral 0x12f80fac0 <col:13> 'int' 0
        |   |-BreakStmt 0x12f80fb38 <line:40:5>
        |   |-IfStmt 0x12f80ff48 <line:46:5, line:50:5> has_else
        |   | |-RecoveryExpr 0x12f80fba8 <line:46:9, col:25> '_Bool' contains-errors
        |   | |-CompoundStmt 0x12f80fd90 <col:36, line:48:5>
        |   | | `-BinaryOperator 0x12f80fd70 <line:47:6, col:35> 'long' contains-errors '='
        |   | |   |-DeclRefExpr 0x12f80fbc8 <col:6> 'long' lvalue Var 0x1308c54b8 'index' 'long'
        |   | |   `-CStyleCastExpr 0x12f80fd48 <col:14, col:35> 'long' contains-errors <Dependent>
        |   | |     `-CallExpr 0x12f80fd08 <col:20, col:35> '<dependent type>' contains-errors
        |   | |       |-DeclRefExpr 0x12f80fcc8 <col:20> 'int ()' Function 0x12f80fc10 'Z_DVAL_P' 'int ()'
        |   | |       `-RecoveryExpr 0x12f80fce8 <col:29> '<dependent type>' contains-errors lvalue
        |   | `-CompoundStmt 0x12f80ff30 <line:48:12, line:50:5>
        |   |   `-BinaryOperator 0x12f80ff10 <line:49:6, col:29> 'long' contains-errors '='
        |   |     |-DeclRefExpr 0x12f80fda8 <col:6> 'long' lvalue Var 0x1308c54b8 'index' 'long'
        |   |     `-CallExpr 0x12f80fee8 <col:14, col:29> '<dependent type>' contains-errors
        |   |       |-DeclRefExpr 0x12f80fea8 <col:14> 'int ()' Function 0x12f80fdf0 'Z_LVAL_P' 'int ()'
        |   |       `-RecoveryExpr 0x12f80fec8 <col:23> '<dependent type>' contains-errors lvalue
        |   |-IfStmt 0x12f8101f8 <line:51:5, line:57:5> has_else
        |   | |-RecoveryExpr 0x12f810098 <line:51:9, col:59> '_Bool' contains-errors
        |   | |-CompoundStmt 0x12f810198 <col:68, line:55:5>
        |   | | `-IfStmt 0x12f810178 <line:52:6, line:54:6>
        |   | |   |-BinaryOperator 0x12f810110 <line:52:10, col:25> 'int' '=='
        |   | |   | |-ImplicitCastExpr 0x12f8100f8 <col:10> 'int' <LValueToRValue>
        |   | |   | | `-DeclRefExpr 0x12f8100b8 <col:10> 'int' lvalue ParmVar 0x1308c52a8 'check_empty' 'int'
        |   | |   | `-IntegerLiteral 0x12f8100d8 <col:25> 'int' 2
        |   | |   `-CompoundStmt 0x12f810160 <col:28, line:54:6>
        |   | |     `-ReturnStmt 0x12f810150 <line:53:7, col:14>
        |   | |       `-IntegerLiteral 0x12f810130 <col:14> 'int' 1
        |   | `-CompoundStmt 0x12f8101e0 <line:55:12, line:57:5>
        |   |   `-ReturnStmt 0x12f8101d0 <line:56:6, col:13>
        |   |     `-IntegerLiteral 0x12f8101b0 <col:13> 'int' 0
        |   |-BreakStmt 0x12f810228 <line:58:5>
        |   |-DefaultStmt 0x12f810358 <line:60:4, col:11>
        |   | `-NullStmt 0x12f810350 <col:11>
        |   `-ReturnStmt 0x12f810398 <line:62:5, col:12>
        |     `-IntegerLiteral 0x12f810378 <col:12> 'int' 0
        `-IfStmt 0x12f810540 <line:65:3, line:69:3> has_else
          |-RecoveryExpr 0x12f810480 <line:65:7, col:49> '_Bool' contains-errors
          |-CompoundStmt 0x12f810520 <col:66, line:67:3>
          `-CompoundStmt 0x12f810530 <col:10, line:69:3>
