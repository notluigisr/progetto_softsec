`-FunctionDecl 0x12200de08  line:1:17 invalid ParseEquation 'int (const int)' static
  |-ParmVarDecl 0x12200dcf0 <col:31, <invalid sloc>> col:43 invalid 'const int'
  `-CompoundStmt 0x1230096e0 <line:8:58, line:58:3>
    |-RecoveryExpr 0x12200dee8 <line:9:5> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x12200e320 <line:11:5, col:78> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x12200e060 <col:5> 'int ()' Function 0x12200dfa8 'TF_RETURN_IF_ERROR' 'int ()'
    | `-CallExpr 0x12200e2e8 <col:24, col:77> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x12200e160 <col:24> 'int ()' Function 0x12200e0a8 'ParseEinsumEquation' 'int ()'
    |   |-RecoveryExpr 0x12200e258 <col:44> '<dependent type>' contains-errors lvalue
    |   |-UnaryOperator 0x12200e298 <col:54, col:55> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | `-RecoveryExpr 0x12200e278 <col:55> '<dependent type>' contains-errors lvalue
    |   `-UnaryOperator 0x12200e2d0 <col:66, col:67> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-RecoveryExpr 0x12200e2b0 <col:67> '<dependent type>' contains-errors lvalue
    |-RecoveryExpr 0x12200e378 <line:15:5> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x123008970 <line:16:5, col:38>
    | `-VarDecl 0x123008800 <col:5, col:37> col:9 used num_inputs 'int' cinit
    |   `-CallExpr 0x123008950 <col:22, col:37> '<dependent type>' contains-errors
    |     `-CXXDependentScopeMemberExpr 0x123008908 <col:22, col:32> '<dependent type>' contains-errors lvalue .size
    |       `-RecoveryExpr 0x1230088e8 <col:22> '<dependent type>' contains-errors lvalue
    |-ForStmt 0x123008d60 <line:20:5, line:22:5>
    | |-DeclStmt 0x123008a48 <line:20:10, col:19>
    | | `-VarDecl 0x1230089c0 <col:10, col:18> col:14 used i 'int' cinit
    | |   `-IntegerLiteral 0x123008a28 <col:18> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x123008ad0 <col:21, col:25> 'int' contains-errors '<'
    | | |-ImplicitCastExpr 0x123008aa0 <col:21> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x123008a60 <col:21> 'int' lvalue Var 0x1230089c0 'i' 'int'
    | | `-ImplicitCastExpr 0x123008ab8 <col:25> 'int' contains-errors <LValueToRValue>
    | |   `-DeclRefExpr 0x123008a80 <col:25> 'int' contains-errors lvalue Var 0x123008800 'num_inputs' 'int'
    | |-UnaryOperator 0x123008b10 <col:37, col:39> 'int' prefix '++'
    | | `-DeclRefExpr 0x123008af0 <col:39> 'int' lvalue Var 0x1230089c0 'i' 'int'
    | `-CompoundStmt 0x123008d50 <col:42, line:22:5>
    |-DeclStmt 0x123008e38 <line:26:5, col:42>
    | `-VarDecl 0x123008dd0 <col:5, col:9> col:9 used num_labels 'int'
    |-ForStmt 0x1230091e8 <line:29:5, line:38:5>
    | |-DeclStmt 0x123008f30 <line:29:10, col:19>
    | | `-VarDecl 0x123008ea8 <col:10, col:18> col:14 used i 'int' cinit
    | |   `-IntegerLiteral 0x123008f10 <col:18> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x123008fb8 <col:21, col:25> 'int' contains-errors '<'
    | | |-ImplicitCastExpr 0x123008f88 <col:21> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x123008f48 <col:21> 'int' lvalue Var 0x123008ea8 'i' 'int'
    | | `-ImplicitCastExpr 0x123008fa0 <col:25> 'int' contains-errors <LValueToRValue>
    | |   `-DeclRefExpr 0x123008f68 <col:25> 'int' contains-errors lvalue Var 0x123008800 'num_inputs' 'int'
    | |-UnaryOperator 0x123008ff8 <col:37, col:39> 'int' prefix '++'
    | | `-DeclRefExpr 0x123008fd8 <col:39> 'int' lvalue Var 0x123008ea8 'i' 'int'
    | `-CompoundStmt 0x1230091d8 <col:42, line:38:5>
    `-ForStmt 0x1230096a8 <line:50:5, line:56:5>
      |-DeclStmt 0x123009428 <line:50:10, col:23>
      | `-VarDecl 0x1230093a0 <col:10, col:22> col:14 used label 'int' cinit
      |   `-IntegerLiteral 0x123009408 <col:22> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x1230094b0 <col:25, col:33> 'int' '<'
      | |-ImplicitCastExpr 0x123009480 <col:25> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x123009440 <col:25> 'int' lvalue Var 0x1230093a0 'label' 'int'
      | `-ImplicitCastExpr 0x123009498 <col:33> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x123009460 <col:33> 'int' lvalue Var 0x123008dd0 'num_labels' 'int'
      |-UnaryOperator 0x1230094f0 <col:45, col:47> 'int' prefix '++'
      | `-DeclRefExpr 0x1230094d0 <col:47> 'int' lvalue Var 0x1230093a0 'label' 'int'
      `-CompoundStmt 0x123009690 <col:54, line:56:5>
        `-IfStmt 0x123009550 <line:51:7, col:36>
          |-RecoveryExpr 0x123009528 <col:11, col:20> '_Bool' contains-errors
          `-ContinueStmt 0x123009548 <col:36>
