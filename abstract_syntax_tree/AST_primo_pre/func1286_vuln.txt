`-FunctionDecl 0x1449281c8  line:1:15 invalid get_next_utf8_codepoint 'unsigned long (int)'
  |-ParmVarDecl 0x1449280f0 <line:2:5, <invalid sloc>> col:8 invalid 'int'
  `-CompoundStmt 0x1449428a8 <line:3:1, line:43:1>
    |-BinaryOperator 0x144928418 <line:4:5, col:34> 'unsigned long' contains-errors '='
    | |-UnaryExprOrTypeTraitExpr 0x144928370 <col:5, col:12> 'unsigned long' contains-errors sizeof
    | | `-RecoveryExpr 0x144928350 <col:12> '<dependent type>' contains-errors lvalue
    | `-CallExpr 0x1449283f8 <col:18, col:34> '<dependent type>' contains-errors
    |   `-CXXDependentScopeMemberExpr 0x1449283b0 <col:18, col:27> '<dependent type>' contains-errors lvalue .length
    |     `-RecoveryExpr 0x144928390 <col:18> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x1449284d0 <line:5:5, col:68>
    | `-VarDecl 0x144928450 <col:5, col:19> col:19 used ch 'unsigned char'
    |-IfStmt 0x1449285b8 <line:7:5, line:10:5>
    | |-BinaryOperator 0x144928570 <line:7:9, col:14> 'int' '<'
    | | |-ImplicitCastExpr 0x144928558 <col:9> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x144928540 <col:9> 'unsigned char' <LValueToRValue>
    | | |   `-DeclRefExpr 0x144928500 <col:9> 'unsigned char' lvalue Var 0x144928450 'ch' 'unsigned char'
    | | `-IntegerLiteral 0x144928520 <col:14> 'int' 128
    | `-CompoundStmt 0x1449285a8 <line:8:5, line:10:5>
    |-RecoveryExpr 0x1449286b8 <line:12:5, col:27> '<dependent type>' contains-errors lvalue
    | |-UnaryExprOrTypeTraitExpr 0x144928698 <col:5, col:12> 'unsigned long' contains-errors sizeof
    | | `-RecoveryExpr 0x144928678 <col:12> '<dependent type>' contains-errors lvalue
    | `-IntegerLiteral 0x144928610 <col:27> 'int' 0
    |-DeclStmt 0x1449287a0 <line:13:5, col:30>
    | `-VarDecl 0x144928700 <col:5, col:26> col:14 used bit_check 'unsigned int' cinit
    |   `-ImplicitCastExpr 0x144928788 <col:26> 'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x144928768 <col:26> 'int' 64
    |-DeclStmt 0x144941ea0 <line:14:5, col:34>
    | `-VarDecl 0x144941e00 <col:5, col:30> col:19 used to_clear 'unsigned char' cinit
    |   `-ImplicitCastExpr 0x144941e88 <col:30> 'unsigned char' <IntegralCast>
    |     `-IntegerLiteral 0x144941e68 <col:30> 'int' 128
    |-WhileStmt 0x144942100 <line:15:5, line:20:5>
    | |-BinaryOperator 0x144941f40 <line:15:12, col:17> 'unsigned int' '&'
    | | |-ImplicitCastExpr 0x144941f10 <col:12> 'unsigned int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x144941ef8 <col:12> 'unsigned char' <LValueToRValue>
    | | |   `-DeclRefExpr 0x144941eb8 <col:12> 'unsigned char' lvalue Var 0x144928450 'ch' 'unsigned char'
    | | `-ImplicitCastExpr 0x144941f28 <col:17> 'unsigned int' <LValueToRValue>
    | |   `-DeclRefExpr 0x144941ed8 <col:17> 'unsigned int' lvalue Var 0x144928700 'bit_check' 'unsigned int'
    | `-CompoundStmt 0x1449420d8 <line:16:5, line:20:5>
    |   |-UnaryOperator 0x144941fb0 <line:17:9, col:11> '<dependent type>' contains-errors prefix '++' cannot overflow
    |   | `-RecoveryExpr 0x144941f90 <col:11> '<dependent type>' contains-errors lvalue
    |   |-CompoundAssignOperator 0x144942020 <line:18:9, col:21> 'unsigned char' '|=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    |   | |-DeclRefExpr 0x144941fc8 <col:9> 'unsigned char' lvalue Var 0x144941e00 'to_clear' 'unsigned char'
    |   | `-ImplicitCastExpr 0x144942008 <col:21> 'unsigned int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x144941fe8 <col:21> 'unsigned int' lvalue Var 0x144928700 'bit_check' 'unsigned int'
    |   `-CompoundAssignOperator 0x1449420a8 <line:19:9, col:23> 'unsigned int' '>>=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    |     |-DeclRefExpr 0x144942050 <col:9> 'unsigned int' lvalue Var 0x144928700 'bit_check' 'unsigned int'
    |     `-IntegerLiteral 0x144942070 <col:23> 'int' 1
    |-IfStmt 0x1449422a0 <line:21:5, line:26:5>
    | |-RecoveryExpr 0x144942220 <line:21:9, line:22:37> '_Bool' contains-errors
    | `-CompoundStmt 0x144942288 <line:23:5, line:26:5>
    |   `-ReturnStmt 0x144942278 <line:25:9, col:16>
    |     `-ImplicitCastExpr 0x144942260 <col:16> 'unsigned long' <IntegralCast>
    |       `-IntegerLiteral 0x144942240 <col:16> 'int' 65533
    |-DeclStmt 0x144942450 <line:28:5, col:47>
    | `-VarDecl 0x1449422d8 <col:5, col:46> col:19 used codepoint 'unsigned long' cinit
    |   `-ImplicitCastExpr 0x144942438 <col:31, col:46> 'unsigned long' <IntegralCast>
    |     `-ParenExpr 0x144942418 <col:31, col:46> 'int'
    |       `-BinaryOperator 0x1449423f8 <col:32, col:38> 'int' '&'
    |         |-ImplicitCastExpr 0x1449423e0 <col:32> 'int' <IntegralCast>
    |         | `-ImplicitCastExpr 0x1449423c8 <col:32> 'unsigned char' <LValueToRValue>
    |         |   `-DeclRefExpr 0x144942340 <col:32> 'unsigned char' lvalue Var 0x144928450 'ch' 'unsigned char'
    |         `-UnaryOperator 0x1449423b0 <col:37, col:38> 'int' prefix '~' cannot overflow
    |           `-ImplicitCastExpr 0x144942398 <col:38> 'int' <IntegralCast>
    |             `-ImplicitCastExpr 0x144942380 <col:38> 'unsigned char' <LValueToRValue>
    |               `-DeclRefExpr 0x144942360 <col:38> 'unsigned char' lvalue Var 0x144941e00 'to_clear' 'unsigned char'
    |-WhileStmt 0x144942840 <line:29:5, line:41:5>
    | |-RecoveryExpr 0x144942488 <line:29:12, col:27> '_Bool' contains-errors
    | `-CompoundStmt 0x144942818 <line:30:5, line:41:5>
    |   |-IfStmt 0x144942658 <line:33:9, line:38:9>
    |   | |-BinaryOperator 0x144942598 <line:33:13, col:28> 'int' '!='
    |   | | |-ParenExpr 0x144942558 <col:13, col:23> 'int'
    |   | | | `-BinaryOperator 0x144942538 <col:14, col:19> 'int' '&'
    |   | | |   |-ImplicitCastExpr 0x144942520 <col:14> 'int' <IntegralCast>
    |   | | |   | `-ImplicitCastExpr 0x144942508 <col:14> 'unsigned char' <LValueToRValue>
    |   | | |   |   `-DeclRefExpr 0x1449424c8 <col:14> 'unsigned char' lvalue Var 0x144928450 'ch' 'unsigned char'
    |   | | |   `-IntegerLiteral 0x1449424e8 <col:19> 'int' 192
    |   | | `-IntegerLiteral 0x144942578 <col:28> 'int' 128
    |   | `-CompoundStmt 0x144942638 <line:34:9, line:38:9>
    |   |   |-BinaryOperator 0x144942610 <line:36:13, col:25> 'unsigned long' '='
    |   |   | |-DeclRefExpr 0x1449425b8 <col:13> 'unsigned long' lvalue Var 0x1449422d8 'codepoint' 'unsigned long'
    |   |   | `-ImplicitCastExpr 0x1449425f8 <col:25> 'unsigned long' <IntegralCast>
    |   |   |   `-IntegerLiteral 0x1449425d8 <col:25> 'int' 65533
    |   |   `-BreakStmt 0x144942630 <line:37:13>
    |   |-CompoundAssignOperator 0x1449426d0 <line:39:9, col:23> 'unsigned long' '<<=' ComputeLHSTy='unsigned long' ComputeResultTy='unsigned long'
    |   | |-DeclRefExpr 0x144942678 <col:9> 'unsigned long' lvalue Var 0x1449422d8 'codepoint' 'unsigned long'
    |   | `-IntegerLiteral 0x144942698 <col:23> 'int' 6
    |   `-CompoundAssignOperator 0x1449427e8 <line:40:9, col:32> 'unsigned long' '+=' ComputeLHSTy='unsigned long' ComputeResultTy='unsigned long'
    |     |-DeclRefExpr 0x144942700 <col:9> 'unsigned long' lvalue Var 0x1449422d8 'codepoint' 'unsigned long'
    |     `-ImplicitCastExpr 0x1449427d0 <col:22, col:32> 'unsigned long' <IntegralCast>
    |       `-ParenExpr 0x1449427b0 <col:22, col:32> 'int'
    |         `-BinaryOperator 0x144942790 <col:23, col:28> 'int' '&'
    |           |-ImplicitCastExpr 0x144942778 <col:23> 'int' <IntegralCast>
    |           | `-ImplicitCastExpr 0x144942760 <col:23> 'unsigned char' <LValueToRValue>
    |           |   `-DeclRefExpr 0x144942720 <col:23> 'unsigned char' lvalue Var 0x144928450 'ch' 'unsigned char'
    |           `-IntegerLiteral 0x144942740 <col:28> 'int' 63
    `-ReturnStmt 0x144942898 <line:42:5, col:12>
      `-ImplicitCastExpr 0x144942880 <col:12> 'unsigned long' <LValueToRValue>
        `-DeclRefExpr 0x144942860 <col:12> 'unsigned long' lvalue Var 0x1449422d8 'codepoint' 'unsigned long'
