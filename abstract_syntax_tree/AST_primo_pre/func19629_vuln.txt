`-FunctionDecl 0x12300de38  line:1:1 SPL_METHOD 'int (int, int)'
  |-ParmVarDecl 0x12300dd58 <col:12> col:12 SplDoublyLinkedList 'int'
  |-ParmVarDecl 0x12300dcd8 <col:33> col:33 unserialize 'int'
  `-CompoundStmt 0x123809610 <line:2:1, line:56:1>
    |-DeclStmt 0x12300e030 <line:5:2, col:11>
    | `-VarDecl 0x12300dfc8 <col:2, col:8> col:8 used buf 'char *'
    |-DeclStmt 0x12300e0c8 <line:6:2, col:13>
    | `-VarDecl 0x12300e060 <col:2, col:6> col:6 used buf_len 'int'
    |-DeclStmt 0x12300e228 <line:7:2, col:28>
    | |-VarDecl 0x12300e128 <col:2, col:23> col:23 used p 'const unsigned char *'
    | `-VarDecl 0x12300e1a8 <col:2, col:27> col:27 used s 'const unsigned char *'
    |-IfStmt 0x1229227a8 <line:10:2, line:12:2>
    | |-RecoveryExpr 0x122922760 <line:10:6, col:81> '_Bool' contains-errors
    | `-CompoundStmt 0x122922790 <col:90, line:12:2>
    |   `-ReturnStmt 0x122922780 <line:11:3>
    |-IfStmt 0x1229229a0 <line:14:2, line:17:2>
    | |-BinaryOperator 0x122922820 <line:14:6, col:17> 'int' '=='
    | | |-ImplicitCastExpr 0x122922808 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1229227c8 <col:6> 'int' lvalue Var 0x12300e060 'buf_len' 'int'
    | | `-IntegerLiteral 0x1229227e8 <col:17> 'int' 0
    | `-CompoundStmt 0x122922988 <col:20, line:17:2>
    |   `-ReturnStmt 0x122922978 <line:16:3>
    |-BinaryOperator 0x122922a98 <line:19:2, col:32> 'const unsigned char *' '='
    | |-DeclRefExpr 0x1229229c0 <col:2> 'const unsigned char *' lvalue Var 0x12300e1a8 's' 'const unsigned char *'
    | `-BinaryOperator 0x122922a78 <col:6, col:32> 'const unsigned char *' '='
    |   |-DeclRefExpr 0x1229229e0 <col:6> 'const unsigned char *' lvalue Var 0x12300e128 'p' 'const unsigned char *'
    |   `-CStyleCastExpr 0x122922a50 <col:10, col:32> 'const unsigned char *' <BitCast>
    |     `-ImplicitCastExpr 0x122922a38 <col:32> 'char *' <LValueToRValue> part_of_explicit_cast
    |       `-DeclRefExpr 0x122922a00 <col:32> 'char *' lvalue Var 0x12300dfc8 'buf' 'char *'
    |-IfStmt 0x122923158 <line:24:2, line:27:2>
    | |-RecoveryExpr 0x122922fb8 <line:24:6, col:95> '_Bool' contains-errors
    | `-CompoundStmt 0x122923140 <col:104, line:27:2>
    |   `-GotoStmt 0x122923128 <line:26:3, col:8> 'error' 0x1229230d8
    |-WhileStmt 0x123809340 <line:33:2, line:42:2>
    | |-BinaryOperator 0x122923430 <line:33:8, col:14> 'int' '=='
    | | |-ImplicitCastExpr 0x122923418 <col:8, col:9> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x122923400 <col:8, col:9> 'unsigned char' <LValueToRValue>
    | | |   `-UnaryOperator 0x1229233d0 <col:8, col:9> 'const unsigned char' lvalue prefix '*' cannot overflow
    | | |     `-ImplicitCastExpr 0x1229233b8 <col:9> 'const unsigned char *' <LValueToRValue>
    | | |       `-DeclRefExpr 0x122923398 <col:9> 'const unsigned char *' lvalue Var 0x12300e128 'p' 'const unsigned char *'
    | | `-CharacterLiteral 0x1229233e8 <col:14> 'int' 58
    | `-CompoundStmt 0x123809320 <col:19, line:42:2>
    |   |-UnaryOperator 0x122923470 <line:34:3, col:5> 'const unsigned char *' prefix '++'
    |   | `-DeclRefExpr 0x122923450 <col:5> 'const unsigned char *' lvalue Var 0x12300e128 'p' 'const unsigned char *'
    |   `-IfStmt 0x123809200 <line:36:3, line:39:3>
    |     |-RecoveryExpr 0x122923590 <line:36:7, col:71> '_Bool' contains-errors
    |     `-CompoundStmt 0x1229235e8 <col:74, line:39:3>
    |       `-GotoStmt 0x1229235d0 <line:38:4, col:9> 'error' 0x1229230d8
    |-IfStmt 0x123809448 <line:44:2, line:46:2>
    | |-BinaryOperator 0x1238093f8 <line:44:6, col:12> 'int' '!='
    | | |-ImplicitCastExpr 0x1238093e0 <col:6, col:7> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x1238093c8 <col:6, col:7> 'unsigned char' <LValueToRValue>
    | | |   `-UnaryOperator 0x123809398 <col:6, col:7> 'const unsigned char' lvalue prefix '*' cannot overflow
    | | |     `-ImplicitCastExpr 0x123809380 <col:7> 'const unsigned char *' <LValueToRValue>
    | | |       `-DeclRefExpr 0x123809360 <col:7> 'const unsigned char *' lvalue Var 0x12300e128 'p' 'const unsigned char *'
    | | `-CharacterLiteral 0x1238093b0 <col:12> 'int' 0
    | `-CompoundStmt 0x123809430 <col:18, line:46:2>
    |   `-GotoStmt 0x123809418 <line:45:3, col:8> 'error' 0x1229230d8
    |-ReturnStmt 0x123809568 <line:49:2>
    |-LabelStmt 0x1238095a0 <line:51:1, col:6> 'error'
    | `-NullStmt 0x123809598 <col:6>
    `-ReturnStmt 0x123809600 <line:54:2>
