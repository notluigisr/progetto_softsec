`-FunctionDecl 0x14a1286a8  line:1:1 invalid dissect_spoolss_relstr 'int (int *, int, int *, int *, int *, int *, int, int, char **)'
  |-ParmVarDecl 0x14a128128 <col:24, col:34> col:34 invalid tvb 'int *'
  |-ParmVarDecl 0x14a1281a8 <col:39, col:43> col:43 used offset 'int'
  |-ParmVarDecl 0x14a128228 <col:51, col:64> col:64 invalid pinfo 'int *'
  |-ParmVarDecl 0x14a1282a8 <line:2:10, col:22> col:22 invalid tree 'int *'
  |-ParmVarDecl 0x14a128328 <col:28, col:41> col:41 invalid di 'int *'
  |-ParmVarDecl 0x14a1283a8 <col:45, col:53> col:53 invalid drep 'int *'
  |-ParmVarDecl 0x14a128428 <col:59, col:63> col:63 used hf_index 'int'
  |-ParmVarDecl 0x14a1284a8 <line:3:10, col:14> col:14 used struct_start 'int'
  |-ParmVarDecl 0x14a128558 <col:28, col:35> col:35 used data 'char **'
  `-CompoundStmt 0x14b80b478 <line:4:1, line:43:1>
    |-DeclStmt 0x14b809e68 <line:8:2, col:12>
    | `-VarDecl 0x14b809e00 <col:2, col:8> col:8 used text 'char *'
    |-BinaryOperator 0x14b80a278 <line:12:2, line:13:64> 'int' contains-errors '='
    | |-DeclRefExpr 0x14b809e80 <line:12:2> 'int' lvalue ParmVar 0x14a1281a8 'offset' 'int'
    | `-CallExpr 0x14b80a218 <col:11, line:13:64> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x14b80a000 <line:12:11> 'int ()' Function 0x14b809f48 'dissect_ndr_uint32' 'int ()'
    |   |-RecoveryExpr 0x14b80a020 <line:13:3> '<dependent type>' contains-errors lvalue
    |   |-DeclRefExpr 0x14b80a040 <col:8> 'int' lvalue ParmVar 0x14a1281a8 'offset' 'int'
    |   |-RecoveryExpr 0x14b80a060 <col:16> '<dependent type>' contains-errors lvalue
    |   |-RecoveryExpr 0x14b80a1a0 <col:23> '<dependent type>' contains-errors lvalue
    |   |-RecoveryExpr 0x14b80a098 <col:29> '<dependent type>' contains-errors lvalue
    |   |-RecoveryExpr 0x14b80a0b8 <col:33> '<dependent type>' contains-errors lvalue
    |   |-RecoveryExpr 0x14b80a1c0 <col:39> '<dependent type>' contains-errors lvalue
    |   `-UnaryOperator 0x14b80a200 <col:50, col:51> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-RecoveryExpr 0x14b80a1e0 <col:51> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x14b80a728 <line:17:2, line:23:2> has_else
    | |-RecoveryExpr 0x14b80a308 <line:17:6> '<dependent type>' contains-errors lvalue
    | |-CompoundStmt 0x14b80a4c0 <col:21, line:20:2>
    | `-CompoundStmt 0x14b80a710 <col:9, line:23:2>
    |   `-BinaryOperator 0x14b80a6f0 <line:21:3, col:21> 'char *' '='
    |     |-DeclRefExpr 0x14b80a4d0 <col:3> 'char *' lvalue Var 0x14b809e00 'text' 'char *'
    |     `-ImplicitCastExpr 0x14b80a6d8 <col:10, col:21> 'char *' <IntegralToPointer>
    |       `-CallExpr 0x14b80a698 <col:10, col:21> 'int'
    |         |-ImplicitCastExpr 0x14b80a680 <col:10> 'int (*)()' <FunctionToPointerDecay>
    |         | `-DeclRefExpr 0x14b80a5d0 <col:10> 'int ()' Function 0x14b80a518 'g_strdup' 'int ()'
    |         `-ImplicitCastExpr 0x14b80a6c0 <col:19> 'char *' <ArrayToPointerDecay>
    |           `-StringLiteral 0x14b80a630 <col:19> 'char[1]' lvalue ""
    |-IfStmt 0x14b80b400 <line:37:2, line:40:14> has_else
    | |-ImplicitCastExpr 0x14b80abb0 <line:37:6> 'char **' <LValueToRValue>
    | | `-DeclRefExpr 0x14b80ab90 <col:6> 'char **' lvalue ParmVar 0x14a128558 'data' 'char **'
    | |-BinaryOperator 0x14b80ac50 <line:38:3, col:11> 'char *' '='
    | | |-UnaryOperator 0x14b80ac00 <col:3, col:4> 'char *' lvalue prefix '*' cannot overflow
    | | | `-ImplicitCastExpr 0x14b80abe8 <col:4> 'char **' <LValueToRValue>
    | | |   `-DeclRefExpr 0x14b80abc8 <col:4> 'char **' lvalue ParmVar 0x14a128558 'data' 'char **'
    | | `-ImplicitCastExpr 0x14b80ac38 <col:11> 'char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x14b80ac18 <col:11> 'char *' lvalue Var 0x14b809e00 'text' 'char *'
    | `-CallExpr 0x14b80ada8 <line:40:3, col:14> 'int'
    |   |-ImplicitCastExpr 0x14b80ad90 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x14b80ad50 <col:3> 'int ()' Function 0x14b80ac98 'g_free' 'int ()'
    |   `-ImplicitCastExpr 0x14b80add0 <col:10> 'char *' <LValueToRValue>
    |     `-DeclRefExpr 0x14b80ad70 <col:10> 'char *' lvalue Var 0x14b809e00 'text' 'char *'
    `-ReturnStmt 0x14b80b468 <line:42:2, col:9>
      `-ImplicitCastExpr 0x14b80b450 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x14b80b430 <col:9> 'int' lvalue ParmVar 0x14a1281a8 'offset' 'int'
