`-FunctionDecl 0x1541282c8  line:1:1 decay_load_missed 'int (unsigned long, unsigned long, int)'
  |-ParmVarDecl 0x1541280d8 <col:19, col:33> col:33 used load 'unsigned long'
  |-ParmVarDecl 0x154128158 <col:39, col:53> col:53 used missed_updates 'unsigned long'
  |-ParmVarDecl 0x1541281d8 <col:69, col:73> col:73 used idx 'int'
  `-CompoundStmt 0x154140c60 <line:2:1, line:22:1>
    |-DeclStmt 0x154128470 <line:3:2, col:11>
    | `-VarDecl 0x1541283e8 <col:2, col:10> col:6 used j 'int' cinit
    |   `-IntegerLiteral 0x154128450 <col:10> 'int' 0
    |-IfStmt 0x154128538 <line:5:2, line:6:10>
    | |-UnaryOperator 0x1541284c0 <line:5:6, col:7> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x1541284a8 <col:7> 'unsigned long' <LValueToRValue>
    | |   `-DeclRefExpr 0x154128488 <col:7> 'unsigned long' lvalue ParmVar 0x154128158 'missed_updates' 'unsigned long'
    | `-ReturnStmt 0x154128528 <line:6:3, col:10>
    |   `-ImplicitCastExpr 0x154128510 <col:10> 'int' <IntegralCast>
    |     `-ImplicitCastExpr 0x1541284f8 <col:10> 'unsigned long' <LValueToRValue>
    |       `-DeclRefExpr 0x1541284d8 <col:10> 'unsigned long' lvalue ParmVar 0x1541280d8 'load' 'unsigned long'
    |-IfStmt 0x154128618 <line:8:2, line:9:10>
    | |-RecoveryExpr 0x1541285c8 <line:8:6, col:46> '_Bool' contains-errors
    | `-ReturnStmt 0x154128608 <line:9:3, col:10>
    |   `-IntegerLiteral 0x1541285e8 <col:10> 'int' 0
    |-IfStmt 0x154128768 <line:11:2, line:12:18>
    | |-BinaryOperator 0x154128690 <line:11:6, col:13> 'int' '=='
    | | |-ImplicitCastExpr 0x154128678 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x154128638 <col:6> 'int' lvalue ParmVar 0x1541281d8 'idx' 'int'
    | | `-IntegerLiteral 0x154128658 <col:13> 'int' 1
    | `-ReturnStmt 0x154128758 <line:12:3, col:18>
    |   `-ImplicitCastExpr 0x154128740 <col:10, col:18> 'int' <IntegralCast>
    |     `-BinaryOperator 0x154128720 <col:10, col:18> 'unsigned long' '>>'
    |       |-ImplicitCastExpr 0x1541286f0 <col:10> 'unsigned long' <LValueToRValue>
    |       | `-DeclRefExpr 0x1541286b0 <col:10> 'unsigned long' lvalue ParmVar 0x1541280d8 'load' 'unsigned long'
    |       `-ImplicitCastExpr 0x154128708 <col:18> 'unsigned long' <LValueToRValue>
    |         `-DeclRefExpr 0x1541286d0 <col:18> 'unsigned long' lvalue ParmVar 0x154128158 'missed_updates' 'unsigned long'
    |-WhileStmt 0x154140be0 <line:14:2, line:20:2>
    | |-ImplicitCastExpr 0x1541287a8 <line:14:9> 'unsigned long' <LValueToRValue>
    | | `-DeclRefExpr 0x154128788 <col:9> 'unsigned long' lvalue ParmVar 0x154128158 'missed_updates' 'unsigned long'
    | `-CompoundStmt 0x154140bc0 <col:25, line:20:2>
    |   |-CompoundAssignOperator 0x154140b58 <line:18:3, col:22> 'unsigned long' '>>=' ComputeLHSTy='unsigned long' ComputeResultTy='unsigned long'
    |   | |-DeclRefExpr 0x154140b00 <col:3> 'unsigned long' lvalue ParmVar 0x154128158 'missed_updates' 'unsigned long'
    |   | `-IntegerLiteral 0x154140b20 <col:22> 'int' 1
    |   `-UnaryOperator 0x154140ba8 <line:19:3, col:4> 'int' postfix '++'
    |     `-DeclRefExpr 0x154140b88 <col:3> 'int' lvalue Var 0x1541283e8 'j' 'int'
    `-ReturnStmt 0x154140c50 <line:21:2, col:9>
      `-ImplicitCastExpr 0x154140c38 <col:9> 'int' <IntegralCast>
        `-ImplicitCastExpr 0x154140c20 <col:9> 'unsigned long' <LValueToRValue>
          `-DeclRefExpr 0x154140c00 <col:9> 'unsigned long' lvalue ParmVar 0x1541280d8 'load' 'unsigned long'
