`-FunctionDecl 0x12700de58  line:1:1 invalid _rsvg_node_poly_build_path 'int (const char *, int)'
  |-ParmVarDecl 0x12700dcd8 <col:29, col:41> col:41 used value 'const char *'
  |-ParmVarDecl 0x12700dd70 <line:2:29, col:38> col:38 invalid close_path 'int'
  `-CompoundStmt 0x126922db8 <line:3:1, line:44:1>
    |-DeclStmt 0x12700dfc0 <line:4:5, col:22>
    | `-VarDecl 0x12700df58 <col:5, col:13> col:13 used pointlist 'double *'
    |-DeclStmt 0x12700e098 <line:8:5, col:38>
    | `-VarDecl 0x12700e030 <col:5, col:10> col:10 invalid buf 'char'
    |-BinaryOperator 0x127027818 <line:10:5, col:66> 'double *' '='
    | |-DeclRefExpr 0x12700e0b0 <col:5> 'double *' lvalue Var 0x12700df58 'pointlist' 'double *'
    | `-ImplicitCastExpr 0x127027800 <col:17, col:66> 'double *' <IntegralToPointer>
    |   `-CallExpr 0x12700e3a8 <col:17, col:66> 'int'
    |     |-ImplicitCastExpr 0x12700e390 <col:17> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x12700e230 <col:17> 'int ()' Function 0x12700e178 'rsvg_css_parse_number_list' 'int ()'
    |     |-ImplicitCastExpr 0x12700e3d8 <col:45> 'const char *' <LValueToRValue>
    |     | `-DeclRefExpr 0x12700e250 <col:45> 'const char *' lvalue ParmVar 0x12700dcd8 'value' 'const char *'
    |     `-UnaryOperator 0x12700e340 <col:52, col:53> 'double **' prefix '&' cannot overflow
    |       `-DeclRefExpr 0x12700e2f0 <col:53> 'double *' lvalue Var 0x12700df58 'pointlist' 'double *'
    |-IfStmt 0x127027918 <line:11:5, line:12:16>
    | |-BinaryOperator 0x1270278b0 <line:11:9, col:22> 'int' contains-errors '=='
    | | |-DeclRefExpr 0x127027838 <col:9> 'double *' lvalue Var 0x12700df58 'pointlist' 'double *'
    | | `-RecoveryExpr 0x127027890 <col:22> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x127027908 <line:12:9, col:16>
    |   `-RecoveryExpr 0x1270278e8 <col:16> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x127027be0 <line:14:5, line:17:5>
    | |-BinaryOperator 0x1270279e0 <line:14:9, col:25> 'int' '<'
    | | |-ImplicitCastExpr 0x1270279b0 <col:9> 'double *' <LValueToRValue>
    | | | `-DeclRefExpr 0x127027990 <col:9> 'double *' lvalue Var 0x12700df58 'pointlist' 'double *'
    | | `-ImplicitCastExpr 0x1270279c8 <col:25> 'double *' <IntegralToPointer>
    | |   `-IntegerLiteral 0x127027950 <col:25> 'int' 2
    | `-CompoundStmt 0x127027bc0 <col:28, line:17:5>
    |   |-CallExpr 0x127027b38 <line:15:9, col:26> 'int'
    |   | |-ImplicitCastExpr 0x127027b20 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x127027ae0 <col:9> 'int ()' Function 0x127027a28 'g_free' 'int ()'
    |   | `-ImplicitCastExpr 0x127027b60 <col:17> 'double *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x127027b00 <col:17> 'double *' lvalue Var 0x12700df58 'pointlist' 'double *'
    |   `-ReturnStmt 0x127027bb0 <line:16:9, col:16>
    |     `-RecoveryExpr 0x127027b90 <col:16> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x127027f10 <line:22:5, col:30> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x127027e20 <col:5> 'int ()' Function 0x127027d68 'g_string_append' 'int ()'
    | |-RecoveryExpr 0x127027ef0 <col:22> '<dependent type>' contains-errors lvalue
    | `-StringLiteral 0x127027ea0 <col:25> 'char[4]' lvalue "STR"
    `-CallExpr 0x126922d78 <line:41:5, col:22> 'int'
      |-ImplicitCastExpr 0x126922d60 <col:5> 'int (*)()' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x126922d20 <col:5> 'int ()' Function 0x127027a28 'g_free' 'int ()'
      `-ImplicitCastExpr 0x126922da0 <col:13> 'double *' <LValueToRValue>
        `-DeclRefExpr 0x126922d40 <col:13> 'double *' lvalue Var 0x12700df58 'pointlist' 'double *'
