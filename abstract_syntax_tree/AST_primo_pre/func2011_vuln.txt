`-FunctionDecl 0x12a80dd18  line:1:1 TEST_CASE 'int ()'
  `-CompoundStmt 0x12a828590 <line:2:1, line:23:1>
    |-DeclStmt 0x12a80e038 <line:16:5, col:31>
    | `-VarDecl 0x12a80de98 <col:5, col:30> col:10 used ret 'int' auto cinit
    |   `-CallExpr 0x12a80e010 <col:16, col:30> '<dependent type>' contains-errors
    |     |-CXXDependentScopeMemberExpr 0x12a80dfc8 <col:16, col:19> '<dependent type>' contains-errors lvalue .parse
    |     | `-RecoveryExpr 0x12a80dfa8 <col:16> '<dependent type>' contains-errors lvalue
    |     `-StringLiteral 0x12a80df60 <col:25> 'char[4]' lvalue "STR"
    |-CallExpr 0x12a80e210 <line:18:5, col:24> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x12a80e130 <col:5> 'int ()' Function 0x12a80e078 'REQUIRE' 'int ()'
    | `-BinaryOperator 0x12a80e1f0 <col:13, col:20> 'int' contains-errors '=='
    |   |-DeclRefExpr 0x12a80e150 <col:13> 'int' contains-errors lvalue Var 0x12a80de98 'ret' 'int'
    |   `-RecoveryExpr 0x12a80e1d0 <col:20> '<dependent type>' contains-errors lvalue
    `-CallExpr 0x12a828400 <line:19:5, col:29> '<dependent type>' contains-errors
      |-DeclRefExpr 0x12a80e238 <col:5> 'int ()' Function 0x12a80e078 'REQUIRE' 'int ()'
      `-BinaryOperator 0x12a80e3c8 <col:13, col:28> 'int' contains-errors '=='
        |-CallExpr 0x12a80e3a8 <col:13, col:23> '<dependent type>' contains-errors
        | `-CXXDependentScopeMemberExpr 0x12a80e360 <col:13, col:18> '<dependent type>' contains-errors lvalue .size
        |   `-RecoveryExpr 0x12a80e340 <col:13> '<dependent type>' contains-errors lvalue
        `-IntegerLiteral 0x12a80e2d8 <col:28> 'int' 3
