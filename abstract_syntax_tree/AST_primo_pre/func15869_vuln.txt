`-FunctionDecl 0x125128d18  line:1:17 invalid listener_event 'int (int *, int, int)' static
  |-ParmVarDecl 0x125128b28 <col:32, col:44> col:44 invalid channel 'int *'
  |-ParmVarDecl 0x125128ba8 <col:53, col:66> col:66 invalid condition 'int'
  |-ParmVarDecl 0x125128c28 <line:2:8, col:17> col:17 invalid user_data 'int'
  `-CompoundStmt 0x12580ac20 <line:3:1, line:103:1>
    |-DeclStmt 0x1251423b8 <line:5:2, col:27>
    | |-RecordDecl 0x125128e10 <col:2, col:9> col:9 struct dhcp_packet
    | `-VarDecl 0x125128f08 <col:2, col:21> col:21 invalid packet 'struct dhcp_packet'
    |-DeclStmt 0x1251425b8 <line:6:2, col:26>
    | |-RecordDecl 0x1251423d0 <col:2, col:9> col:9 struct dhcp_lease
    | `-VarDecl 0x125142538 <col:2, col:21> col:21 used lease 'struct dhcp_lease *'
    |-DeclStmt 0x125142650 <line:9:2, col:8>
    | `-VarDecl 0x1251425e8 <col:2, col:6> col:6 used re 'int'
    |-IfStmt 0x1251427b0 <line:11:2, line:14:2>
    | |-RecoveryExpr 0x125142710 <line:11:6, col:50> '_Bool' contains-errors
    | `-CompoundStmt 0x125142798 <col:53, line:14:2>
    |   `-ReturnStmt 0x125142788 <line:13:3, col:10>
    |     `-RecoveryExpr 0x125142768 <col:10> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x125142af0 <line:16:2, col:64> 'int' contains-errors '='
    | |-DeclRefExpr 0x1251427d0 <col:2> 'int' lvalue Var 0x1251425e8 're' 'int'
    | `-CallExpr 0x125142ac0 <col:7, col:64> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x125142950 <col:7> 'int ()' Function 0x125142898 'dhcp_recv_l3_packet' 'int ()'
    |   |-UnaryOperator 0x125142990 <col:27, col:28> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | `-RecoveryExpr 0x125142970 <col:28> '<dependent type>' contains-errors lvalue
    |   `-CXXDependentScopeMemberExpr 0x125142a78 <col:36, col:49> '<dependent type>' contains-errors lvalue ->listener_sockfd
    |     `-RecoveryExpr 0x125142a58 <col:36> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x125142bd0 <line:17:2, line:18:10>
    | |-BinaryOperator 0x125142b68 <line:17:6, col:11> 'int' '<'
    | | |-ImplicitCastExpr 0x125142b50 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x125142b10 <col:6> 'int' lvalue Var 0x1251425e8 're' 'int'
    | | `-IntegerLiteral 0x125142b30 <col:11> 'int' 0
    | `-ReturnStmt 0x125142bc0 <line:18:3, col:10>
    |   `-RecoveryExpr 0x125142ba0 <col:10> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x125142f70 <line:25:2, line:31:2>
    | |-RecoveryExpr 0x125142f20 <line:25:6> '_Bool' contains-errors
    | `-CompoundStmt 0x125142f60 <col:24, line:31:2>
    `-SwitchStmt 0x1258098b8 <line:39:2, line:100:2>
      |-RecoveryExpr 0x125809898 <line:39:10> 'int' contains-errors
      `-CompoundStmt 0x12580aba8 <col:16, line:100:2>
        |-BreakStmt 0x125809b98 <line:44:3>
        |-IfStmt 0x125809e30 <line:48:3, line:52:3>
        | |-RecoveryExpr 0x125809c00 <line:48:7, col:24> '_Bool' contains-errors
        | `-CompoundStmt 0x125809e18 <col:27, line:52:3>
        |   `-IfStmt 0x125809df8 <line:50:4, line:51:5>
        |     |-RecoveryExpr 0x125809dd0 <line:50:8, col:25> '_Bool' contains-errors
        |     `-BreakStmt 0x125809df0 <line:51:5>
        |-IfStmt 0x12580a0e8 <line:54:3, line:59:3>
        | |-RecoveryExpr 0x125809ed0 <line:54:7, col:40> '_Bool' contains-errors
        | `-CompoundStmt 0x12580a0d0 <col:51, line:59:3>
        |   `-BreakStmt 0x12580a0c8 <line:58:4>
        |-IfStmt 0x12580a300 <line:61:3, line:64:3>
        | |-RecoveryExpr 0x12580a158 <line:61:7, col:28> '_Bool' contains-errors
        | `-CompoundStmt 0x12580a2f0 <col:35, line:64:3>
        |-BreakStmt 0x12580a320 <line:66:3>
        |-IfStmt 0x12580a390 <line:70:3, line:71:4>
        | |-RecoveryExpr 0x12580a368 <line:70:7, col:8> '_Bool' contains-errors
        | `-BreakStmt 0x12580a388 <line:71:4>
        |-IfStmt 0x12580a3d8 <line:73:3, line:74:4>
        | |-RecoveryExpr 0x12580a3b0 <line:73:7, col:8> '_Bool' contains-errors
        | `-BreakStmt 0x12580a3d0 <line:74:4>
        |-IfStmt 0x12580a450 <line:76:3, line:77:4>
        | |-UnaryOperator 0x12580a430 <line:76:7, col:8> 'int' prefix '!' cannot overflow
        | | `-ImplicitCastExpr 0x12580a418 <col:8> 'struct dhcp_lease *' <LValueToRValue>
        | |   `-DeclRefExpr 0x12580a3f8 <col:8> 'struct dhcp_lease *' lvalue Var 0x125142538 'lease' 'struct dhcp_lease *'
        | `-BreakStmt 0x12580a448 <line:77:4>
        |-BreakStmt 0x12580a610 <line:82:3>
        |-IfStmt 0x12580a680 <line:86:3, line:87:4>
        | |-RecoveryExpr 0x12580a658 <line:86:7, col:8> '_Bool' contains-errors
        | `-BreakStmt 0x12580a678 <line:87:4>
        |-IfStmt 0x12580a6f8 <line:89:3, line:90:4>
        | |-UnaryOperator 0x12580a6d8 <line:89:7, col:8> 'int' prefix '!' cannot overflow
        | | `-ImplicitCastExpr 0x12580a6c0 <col:8> 'struct dhcp_lease *' <LValueToRValue>
        | |   `-DeclRefExpr 0x12580a6a0 <col:8> 'struct dhcp_lease *' lvalue Var 0x125142538 'lease' 'struct dhcp_lease *'
        | `-BreakStmt 0x12580a6f0 <line:90:4>
        |-BreakStmt 0x12580aa20 <line:95:3>
        `-BreakStmt 0x12580aba0 <line:99:3>
