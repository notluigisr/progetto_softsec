`-FunctionDecl 0x14000dd98  line:1:1 DefragInOrderSimpleTest 'int (void)'
  `-CompoundStmt 0x14100ae40 <line:2:1, line:72:1>
    |-DeclStmt 0x14000e0a0 <line:5:5, col:16>
    | `-VarDecl 0x14000e018 <col:5, col:14> col:9 used id 'int' cinit
    |   `-IntegerLiteral 0x14000e080 <col:14> 'int' 12
    |-DeclStmt 0x14000e138 <line:6:5, col:10>
    | `-VarDecl 0x14000e0d0 <col:5, col:9> col:9 used i 'int'
    |-DeclStmt 0x14000e1f0 <line:7:5, col:16>
    | `-VarDecl 0x14000e168 <col:5, col:15> col:9 used ret 'int' cinit
    |   `-IntegerLiteral 0x14000e1d0 <col:15> 'int' 0
    |-CallExpr 0x14000e388 <line:9:5, col:16> 'int'
    | `-ImplicitCastExpr 0x14000e370 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x14000e320 <col:5> 'int ()' Function 0x14000e268 'DefragInit' 'int ()'
    |-IfStmt 0x141009500 <line:12:5, line:13:14>
    | |-BinaryOperator 0x141009478 <line:12:9, col:15> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x141009438 <col:9> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x141009458 <col:15> '<dependent type>' contains-errors lvalue
    | `-GotoStmt 0x1410094e8 <line:13:9, col:14> 'end' 0x141009498
    |-IfStmt 0x141009718 <line:15:5, line:16:14>
    | |-BinaryOperator 0x1410096e0 <line:15:9, col:15> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x1410096a0 <col:9> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x1410096c0 <col:15> '<dependent type>' contains-errors lvalue
    | `-GotoStmt 0x141009700 <line:16:9, col:14> 'end' 0x141009498
    |-IfStmt 0x1410098a0 <line:18:5, line:19:14>
    | |-RecoveryExpr 0x141009868 <line:18:9, col:15> '_Bool' contains-errors
    | `-GotoStmt 0x141009888 <line:19:9, col:14> 'end' 0x141009498
    |-IfStmt 0x1410099f8 <line:21:5, line:22:14>
    | |-RecoveryExpr 0x1410099c0 <line:21:9, col:41> '_Bool' contains-errors
    | `-GotoStmt 0x1410099e0 <line:22:9, col:14> 'end' 0x141009498
    |-IfStmt 0x141009a70 <line:23:5, line:24:14>
    | |-RecoveryExpr 0x141009a38 <line:23:9, col:41> '_Bool' contains-errors
    | `-GotoStmt 0x141009a58 <line:24:9, col:14> 'end' 0x141009498
    |-IfStmt 0x141009b00 <line:27:5, line:29:5>
    | |-RecoveryExpr 0x141009ab0 <line:27:9, col:24> '_Bool' contains-errors
    | `-CompoundStmt 0x141009ae8 <col:30, line:29:5>
    |   `-GotoStmt 0x141009ad0 <line:28:9, col:14> 'end' 0x141009498
    |-IfStmt 0x141009c90 <line:31:5, line:33:5>
    | |-RecoveryExpr 0x141009c40 <line:31:9, col:39> '_Bool' contains-errors
    | `-CompoundStmt 0x141009c78 <col:43, line:33:5>
    |   `-GotoStmt 0x141009c60 <line:32:9, col:14> 'end' 0x141009498
    |-IfStmt 0x141009e20 <line:34:5, line:36:5>
    | |-RecoveryExpr 0x141009dd0 <line:34:9, col:40> '_Bool' contains-errors
    | `-CompoundStmt 0x141009e08 <col:44, line:36:5>
    |   `-GotoStmt 0x141009df0 <line:35:9, col:14> 'end' 0x141009498
    |-ForStmt 0x14100a150 <line:39:5, line:43:5>
    | |-BinaryOperator 0x141009e80 <line:39:10, col:14> 'int' '='
    | | |-DeclRefExpr 0x141009e40 <col:10> 'int' lvalue Var 0x14000e0d0 'i' 'int'
    | | `-IntegerLiteral 0x141009e60 <col:14> 'int' 20
    | |-<<<NULL>>>
    | |-BinaryOperator 0x141009f38 <col:18, col:27> 'int' '<'
    | | |-ImplicitCastExpr 0x141009f20 <col:18> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x141009ea0 <col:18> 'int' lvalue Var 0x14000e0d0 'i' 'int'
    | | `-BinaryOperator 0x141009f00 <col:22, col:27> 'int' '+'
    | |   |-IntegerLiteral 0x141009ec0 <col:22> 'int' 20
    | |   `-IntegerLiteral 0x141009ee0 <col:27> 'int' 8
    | |-UnaryOperator 0x141009f78 <col:30, col:31> 'int' postfix '++'
    | | `-DeclRefExpr 0x141009f58 <col:30> 'int' lvalue Var 0x14000e0d0 'i' 'int'
    | `-CompoundStmt 0x14100a138 <col:35, line:43:5>
    |   `-IfStmt 0x14100a118 <line:40:9, line:42:9>
    |     |-RecoveryExpr 0x14100a0c8 <line:40:13, col:45> '_Bool' contains-errors
    |     `-CompoundStmt 0x14100a100 <col:50, line:42:9>
    |       `-GotoStmt 0x14100a0e8 <line:41:13, col:18> 'end' 0x141009498
    |-ForStmt 0x14100a7d0 <line:46:5, line:50:5>
    | |-BinaryOperator 0x14100a1c8 <line:46:10, col:14> 'int' '='
    | | |-DeclRefExpr 0x14100a188 <col:10> 'int' lvalue Var 0x14000e0d0 'i' 'int'
    | | `-IntegerLiteral 0x14100a1a8 <col:14> 'int' 28
    | |-<<<NULL>>>
    | |-BinaryOperator 0x14100a698 <col:18, col:27> 'int' '<'
    | | |-ImplicitCastExpr 0x14100a680 <col:18> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14100a600 <col:18> 'int' lvalue Var 0x14000e0d0 'i' 'int'
    | | `-BinaryOperator 0x14100a660 <col:22, col:27> 'int' '+'
    | |   |-IntegerLiteral 0x14100a620 <col:22> 'int' 28
    | |   `-IntegerLiteral 0x14100a640 <col:27> 'int' 8
    | |-UnaryOperator 0x14100a6d8 <col:30, col:31> 'int' postfix '++'
    | | `-DeclRefExpr 0x14100a6b8 <col:30> 'int' lvalue Var 0x14000e0d0 'i' 'int'
    | `-CompoundStmt 0x14100a7b8 <col:35, line:50:5>
    |   `-IfStmt 0x14100a798 <line:47:9, line:49:9>
    |     |-RecoveryExpr 0x14100a748 <line:47:13, col:45> '_Bool' contains-errors
    |     `-CompoundStmt 0x14100a780 <col:50, line:49:9>
    |       `-GotoStmt 0x14100a768 <line:48:13, col:18> 'end' 0x141009498
    |-ForStmt 0x14100aa20 <line:53:5, line:56:5>
    | |-BinaryOperator 0x14100a848 <line:53:10, col:14> 'int' '='
    | | |-DeclRefExpr 0x14100a808 <col:10> 'int' lvalue Var 0x14000e0d0 'i' 'int'
    | | `-IntegerLiteral 0x14100a828 <col:14> 'int' 36
    | |-<<<NULL>>>
    | |-BinaryOperator 0x14100a900 <col:18, col:27> 'int' '<'
    | | |-ImplicitCastExpr 0x14100a8e8 <col:18> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14100a868 <col:18> 'int' lvalue Var 0x14000e0d0 'i' 'int'
    | | `-BinaryOperator 0x14100a8c8 <col:22, col:27> 'int' '+'
    | |   |-IntegerLiteral 0x14100a888 <col:22> 'int' 36
    | |   `-IntegerLiteral 0x14100a8a8 <col:27> 'int' 3
    | |-UnaryOperator 0x14100a940 <col:30, col:31> 'int' postfix '++'
    | | `-DeclRefExpr 0x14100a920 <col:30> 'int' lvalue Var 0x14000e0d0 'i' 'int'
    | `-CompoundStmt 0x14100aa08 <col:35, line:56:5>
    |   `-IfStmt 0x14100a9e8 <line:54:9, line:55:18>
    |     |-RecoveryExpr 0x14100a9b0 <line:54:13, col:45> '_Bool' contains-errors
    |     `-GotoStmt 0x14100a9d0 <line:55:13, col:18> 'end' 0x141009498
    |-BinaryOperator 0x14100aa98 <line:58:5, col:11> 'int' '='
    | |-DeclRefExpr 0x14100aa58 <col:5> 'int' lvalue Var 0x14000e168 'ret' 'int'
    | `-IntegerLiteral 0x14100aa78 <col:11> 'int' 1
    |-LabelStmt 0x14100abe0 <line:60:1, col:4> 'end'
    | `-NullStmt 0x14100abd8 <col:4>
    |-CallExpr 0x14100add8 <line:70:5, col:19> 'int'
    | `-ImplicitCastExpr 0x14100adc0 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x14100ada0 <col:5> 'int ()' Function 0x14100ace8 'DefragDestroy' 'int ()'
    `-ReturnStmt 0x14100ae30 <line:71:5, col:12>
      `-ImplicitCastExpr 0x14100ae18 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x14100adf8 <col:12> 'int' lvalue Var 0x14000e168 'ret' 'int'
