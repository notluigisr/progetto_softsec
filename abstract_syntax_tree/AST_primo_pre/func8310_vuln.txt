`-FunctionDecl 0x11f00e088  line:1:1 asn1_get_oid 'int (unsigned char **, unsigned char *, unsigned int, int *, int)'
  |-ParmVarDecl 0x11f00dd40 <line:2:5, col:21> col:21 used buffer 'unsigned char **'
  |-ParmVarDecl 0x11f00ddc0 <line:3:5, col:20> col:20 used bufend 'unsigned char *'
  |-ParmVarDecl 0x11f00de40 <line:4:5, col:19> col:19 used length 'unsigned int'
  |-ParmVarDecl 0x11f00def8 <line:5:5, col:20> col:20 used oid 'int *'
  |-ParmVarDecl 0x11f00df78 <line:6:5, col:19> col:19 used oidsize 'int'
  `-CompoundStmt 0x11f028678 <line:7:1, line:47:1>
    |-DeclStmt 0x11f00e220 <line:8:3, col:24>
    | `-VarDecl 0x11f00e1b8 <col:3, col:18> col:18 used valend 'unsigned char *'
    |-DeclStmt 0x11f00e350 <line:9:3, line:10:10>
    | |-VarDecl 0x11f00e250 <line:9:3, col:9> col:9 used oidptr 'int *'
    | `-VarDecl 0x11f00e2d0 <col:3, line:10:4> col:4 used oidend 'int *'
    |-DeclStmt 0x11f00e3e8 <line:11:3, col:14>
    | `-VarDecl 0x11f00e380 <col:3, col:8> col:8 used number 'int'
    |-BinaryOperator 0x11f0266e0 <line:14:3, col:22> 'unsigned char *' '='
    | |-DeclRefExpr 0x11f026600 <col:3> 'unsigned char *' lvalue Var 0x11f00e1b8 'valend' 'unsigned char *'
    | `-BinaryOperator 0x11f0266c0 <col:12, col:22> 'unsigned char *' '+'
    |   |-ImplicitCastExpr 0x11f026690 <col:12, col:13> 'unsigned char *' <LValueToRValue>
    |   | `-UnaryOperator 0x11f026658 <col:12, col:13> 'unsigned char *' lvalue prefix '*' cannot overflow
    |   |   `-ImplicitCastExpr 0x11f026640 <col:13> 'unsigned char **' <LValueToRValue>
    |   |     `-DeclRefExpr 0x11f026620 <col:13> 'unsigned char **' lvalue ParmVar 0x11f00dd40 'buffer' 'unsigned char **'
    |   `-ImplicitCastExpr 0x11f0266a8 <col:22> 'unsigned int' <LValueToRValue>
    |     `-DeclRefExpr 0x11f026670 <col:22> 'unsigned int' lvalue ParmVar 0x11f00de40 'length' 'unsigned int'
    |-BinaryOperator 0x11f026758 <line:15:3, col:12> 'int *' '='
    | |-DeclRefExpr 0x11f026700 <col:3> 'int *' lvalue Var 0x11f00e250 'oidptr' 'int *'
    | `-ImplicitCastExpr 0x11f026740 <col:12> 'int *' <LValueToRValue>
    |   `-DeclRefExpr 0x11f026720 <col:12> 'int *' lvalue ParmVar 0x11f00def8 'oid' 'int *'
    |-BinaryOperator 0x11f026868 <line:16:3, col:28> 'int *' '='
    | |-DeclRefExpr 0x11f026778 <col:3> 'int *' lvalue Var 0x11f00e2d0 'oidend' 'int *'
    | `-BinaryOperator 0x11f026848 <col:12, col:28> 'int *' '-'
    |   |-BinaryOperator 0x11f026808 <col:12, col:18> 'int *' '+'
    |   | |-ImplicitCastExpr 0x11f0267d8 <col:12> 'int *' <LValueToRValue>
    |   | | `-DeclRefExpr 0x11f026798 <col:12> 'int *' lvalue ParmVar 0x11f00def8 'oid' 'int *'
    |   | `-ImplicitCastExpr 0x11f0267f0 <col:18> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x11f0267b8 <col:18> 'int' lvalue ParmVar 0x11f00df78 'oidsize' 'int'
    |   `-IntegerLiteral 0x11f026828 <col:28> 'int' 1
    |-IfStmt 0x11f026990 <line:18:3, line:19:14>
    | |-BinaryOperator 0x11f0268f8 <line:18:7, col:16> 'int' '>'
    | | |-ImplicitCastExpr 0x11f0268c8 <col:7> 'unsigned char *' <LValueToRValue>
    | | | `-DeclRefExpr 0x11f026888 <col:7> 'unsigned char *' lvalue Var 0x11f00e1b8 'valend' 'unsigned char *'
    | | `-ImplicitCastExpr 0x11f0268e0 <col:16> 'unsigned char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x11f0268a8 <col:16> 'unsigned char *' lvalue ParmVar 0x11f00ddc0 'bufend' 'unsigned char *'
    | `-BinaryOperator 0x11f026970 <line:19:5, col:14> 'unsigned char *' '='
    |   |-DeclRefExpr 0x11f026918 <col:5> 'unsigned char *' lvalue Var 0x11f00e1b8 'valend' 'unsigned char *'
    |   `-ImplicitCastExpr 0x11f026958 <col:14> 'unsigned char *' <LValueToRValue>
    |     `-DeclRefExpr 0x11f026938 <col:14> 'unsigned char *' lvalue ParmVar 0x11f00ddc0 'bufend' 'unsigned char *'
    |-BinaryOperator 0x11f026c08 <line:21:3, col:42> 'int' '='
    | |-DeclRefExpr 0x11f0269b0 <col:3> 'int' lvalue Var 0x11f00e380 'number' 'int'
    | `-CallExpr 0x11f026ba8 <col:12, col:42> 'int'
    |   |-ImplicitCastExpr 0x11f026b90 <col:12> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x11f026b00 <col:12> 'int ()' Function 0x11f026a48 'asn1_get_packed' 'int ()'
    |   |-ImplicitCastExpr 0x11f026bd8 <col:28> 'unsigned char **' <LValueToRValue>
    |   | `-DeclRefExpr 0x11f026b20 <col:28> 'unsigned char **' lvalue ParmVar 0x11f00dd40 'buffer' 'unsigned char **'
    |   `-ImplicitCastExpr 0x11f026bf0 <col:36> 'unsigned char *' <LValueToRValue>
    |     `-DeclRefExpr 0x11f026b40 <col:36> 'unsigned char *' lvalue ParmVar 0x11f00ddc0 'bufend' 'unsigned char *'
    |-IfStmt 0x11f0270e0 <line:23:3, line:34:3> has_else
    | |-BinaryOperator 0x11f026c80 <line:23:7, col:16> 'int' '<'
    | | |-ImplicitCastExpr 0x11f026c68 <col:7> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x11f026c28 <col:7> 'int' lvalue Var 0x11f00e380 'number' 'int'
    | | `-IntegerLiteral 0x11f026c48 <col:16> 'int' 80
    | |-CompoundStmt 0x11f026ee8 <line:24:3, line:28:3>
    | | |-BinaryOperator 0x11f026d68 <line:25:5, col:26> 'int' '='
    | | | |-UnaryOperator 0x11f026cd8 <col:5, col:12> 'int' lvalue prefix '*' cannot overflow
    | | | | `-UnaryOperator 0x11f026cc0 <col:6, col:12> 'int *' postfix '++'
    | | | |   `-DeclRefExpr 0x11f026ca0 <col:6> 'int *' lvalue Var 0x11f00e250 'oidptr' 'int *'
    | | | `-BinaryOperator 0x11f026d48 <col:17, col:26> 'int' '/'
    | | |   |-ImplicitCastExpr 0x11f026d30 <col:17> 'int' <LValueToRValue>
    | | |   | `-DeclRefExpr 0x11f026cf0 <col:17> 'int' lvalue Var 0x11f00e380 'number' 'int'
    | | |   `-IntegerLiteral 0x11f026d10 <col:26> 'int' 40
    | | |-BinaryOperator 0x11f026e20 <line:26:5, col:26> 'int' '='
    | | | |-DeclRefExpr 0x11f026d88 <col:5> 'int' lvalue Var 0x11f00e380 'number' 'int'
    | | | `-BinaryOperator 0x11f026e00 <col:17, col:26> 'int' '%'
    | | |   |-ImplicitCastExpr 0x11f026de8 <col:17> 'int' <LValueToRValue>
    | | |   | `-DeclRefExpr 0x11f026da8 <col:17> 'int' lvalue Var 0x11f00e380 'number' 'int'
    | | |   `-IntegerLiteral 0x11f026dc8 <col:26> 'int' 40
    | | `-BinaryOperator 0x11f026ec8 <line:27:5, col:17> 'int' '='
    | |   |-UnaryOperator 0x11f026e78 <col:5, col:12> 'int' lvalue prefix '*' cannot overflow
    | |   | `-UnaryOperator 0x11f026e60 <col:6, col:12> 'int *' postfix '++'
    | |   |   `-DeclRefExpr 0x11f026e40 <col:6> 'int *' lvalue Var 0x11f00e250 'oidptr' 'int *'
    | |   `-ImplicitCastExpr 0x11f026eb0 <col:17> 'int' <LValueToRValue>
    | |     `-DeclRefExpr 0x11f026e90 <col:17> 'int' lvalue Var 0x11f00e380 'number' 'int'
    | `-CompoundStmt 0x11f0270b8 <line:30:3, line:34:3>
    |   |-BinaryOperator 0x11f026f80 <line:31:5, col:17> 'int' '='
    |   | |-UnaryOperator 0x11f026f48 <col:5, col:12> 'int' lvalue prefix '*' cannot overflow
    |   | | `-UnaryOperator 0x11f026f30 <col:6, col:12> 'int *' postfix '++'
    |   | |   `-DeclRefExpr 0x11f026f10 <col:6> 'int *' lvalue Var 0x11f00e250 'oidptr' 'int *'
    |   | `-IntegerLiteral 0x11f026f60 <col:17> 'int' 2
    |   |-CompoundAssignOperator 0x11f026fe0 <line:32:5, col:18> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
    |   | |-DeclRefExpr 0x11f026fa0 <col:5> 'int' lvalue Var 0x11f00e380 'number' 'int'
    |   | `-IntegerLiteral 0x11f026fc0 <col:18> 'int' 80
    |   `-BinaryOperator 0x11f027098 <line:33:5, col:17> 'int' '='
    |     |-UnaryOperator 0x11f027048 <col:5, col:12> 'int' lvalue prefix '*' cannot overflow
    |     | `-UnaryOperator 0x11f027030 <col:6, col:12> 'int *' postfix '++'
    |     |   `-DeclRefExpr 0x11f027010 <col:6> 'int *' lvalue Var 0x11f00e250 'oidptr' 'int *'
    |     `-ImplicitCastExpr 0x11f027080 <col:17> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x11f027060 <col:17> 'int' lvalue Var 0x11f00e380 'number' 'int'
    |-WhileStmt 0x11f027460 <line:36:3, line:42:3>
    | |-BinaryOperator 0x11f0271b0 <line:36:10, col:20> 'int' '<'
    | | |-ImplicitCastExpr 0x11f027180 <col:10, col:11> 'unsigned char *' <LValueToRValue>
    | | | `-UnaryOperator 0x11f027148 <col:10, col:11> 'unsigned char *' lvalue prefix '*' cannot overflow
    | | |   `-ImplicitCastExpr 0x11f027130 <col:11> 'unsigned char **' <LValueToRValue>
    | | |     `-DeclRefExpr 0x11f027110 <col:11> 'unsigned char **' lvalue ParmVar 0x11f00dd40 'buffer' 'unsigned char **'
    | | `-ImplicitCastExpr 0x11f027198 <col:20> 'unsigned char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x11f027160 <col:20> 'unsigned char *' lvalue Var 0x11f00e1b8 'valend' 'unsigned char *'
    | `-CompoundStmt 0x11f027440 <line:37:3, line:42:3>
    |   |-BinaryOperator 0x11f0272c8 <line:38:5, col:44> 'int' '='
    |   | |-DeclRefExpr 0x11f0271d0 <col:5> 'int' lvalue Var 0x11f00e380 'number' 'int'
    |   | `-CallExpr 0x11f027268 <col:14, col:44> 'int'
    |   |   |-ImplicitCastExpr 0x11f027250 <col:14> 'int (*)()' <FunctionToPointerDecay>
    |   |   | `-DeclRefExpr 0x11f0271f0 <col:14> 'int ()' Function 0x11f026a48 'asn1_get_packed' 'int ()'
    |   |   |-ImplicitCastExpr 0x11f027298 <col:30> 'unsigned char **' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x11f027210 <col:30> 'unsigned char **' lvalue ParmVar 0x11f00dd40 'buffer' 'unsigned char **'
    |   |   `-ImplicitCastExpr 0x11f0272b0 <col:38> 'unsigned char *' <LValueToRValue>
    |   |     `-DeclRefExpr 0x11f027230 <col:38> 'unsigned char *' lvalue ParmVar 0x11f00ddc0 'bufend' 'unsigned char *'
    |   `-IfStmt 0x11f027420 <line:40:5, line:41:19>
    |     |-BinaryOperator 0x11f027358 <line:40:9, col:18> 'int' '<'
    |     | |-ImplicitCastExpr 0x11f027328 <col:9> 'int *' <LValueToRValue>
    |     | | `-DeclRefExpr 0x11f0272e8 <col:9> 'int *' lvalue Var 0x11f00e250 'oidptr' 'int *'
    |     | `-ImplicitCastExpr 0x11f027340 <col:18> 'int *' <LValueToRValue>
    |     |   `-DeclRefExpr 0x11f027308 <col:18> 'int *' lvalue Var 0x11f00e2d0 'oidend' 'int *'
    |     `-BinaryOperator 0x11f027400 <line:41:7, col:19> 'int' '='
    |       |-UnaryOperator 0x11f0273b0 <col:7, col:14> 'int' lvalue prefix '*' cannot overflow
    |       | `-UnaryOperator 0x11f027398 <col:8, col:14> 'int *' postfix '++'
    |       |   `-DeclRefExpr 0x11f027378 <col:8> 'int *' lvalue Var 0x11f00e250 'oidptr' 'int *'
    |       `-ImplicitCastExpr 0x11f0273e8 <col:19> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x11f0273c8 <col:19> 'int' lvalue Var 0x11f00e380 'number' 'int'
    |-BinaryOperator 0x11f027508 <line:44:3, col:14> 'int' '='
    | |-UnaryOperator 0x11f0274b8 <col:3, col:4> 'int' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x11f0274a0 <col:4> 'int *' <LValueToRValue>
    | |   `-DeclRefExpr 0x11f027480 <col:4> 'int *' lvalue Var 0x11f00e250 'oidptr' 'int *'
    | `-UnaryOperator 0x11f0274f0 <col:13, col:14> 'int' prefix '-'
    |   `-IntegerLiteral 0x11f0274d0 <col:14> 'int' 1
    `-ReturnStmt 0x11f028668 <line:46:3, col:30>
      `-ParenExpr 0x11f028648 <col:10, col:30> 'int'
        `-CStyleCastExpr 0x11f028620 <col:11, col:29> 'int' <IntegralCast>
          `-ParenExpr 0x11f028600 <col:16, col:29> 'long'
            `-BinaryOperator 0x11f027598 <col:17, col:26> 'long' '-'
              |-ImplicitCastExpr 0x11f027568 <col:17> 'int *' <LValueToRValue>
              | `-DeclRefExpr 0x11f027528 <col:17> 'int *' lvalue Var 0x11f00e250 'oidptr' 'int *'
              `-ImplicitCastExpr 0x11f027580 <col:26> 'int *' <LValueToRValue>
                `-DeclRefExpr 0x11f027548 <col:26> 'int *' lvalue ParmVar 0x11f00def8 'oid' 'int *'
