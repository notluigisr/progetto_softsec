`-FunctionDecl 0x130928468  line:1:14 invalid find_set 'long (int *, const char *, int, char **, int *)' static
  |-ParmVarDecl 0x130928128 <col:23, col:32> col:32 invalid lib 'int *'
  |-ParmVarDecl 0x1309281a8 <col:37, col:49> col:49 used x 'const char *'
  |-ParmVarDecl 0x130928228 <col:52, col:59> col:59 invalid length 'int'
  |-ParmVarDecl 0x1309282d8 <line:2:23, col:30> col:30 used err_pos 'char **'
  |-ParmVarDecl 0x130928358 <col:39, col:45> col:45 used err_len 'int *'
  `-CompoundStmt 0x130943450 <line:3:1, line:39:1>
    |-DeclStmt 0x130928618 <line:4:3, col:30>
    | `-VarDecl 0x130928550 <col:3, col:24> col:15 used end 'const char *' cinit
    |   `-BinaryOperator 0x1309285f8 <col:20, col:24> '<dependent type>' contains-errors '+'
    |     |-DeclRefExpr 0x1309285b8 <col:20> 'const char *' lvalue ParmVar 0x1309281a8 'x' 'const char *'
    |     `-RecoveryExpr 0x1309285d8 <col:24> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x1309286e8 <line:5:3, col:17>
    | `-VarDecl 0x130928648 <col:3, col:16> col:9 used found 'long' cinit
    |   `-ImplicitCastExpr 0x1309286d0 <col:16> 'long' <IntegralCast>
    |     `-IntegerLiteral 0x1309286b0 <col:16> 'int' 0
    |-DeclStmt 0x130928780 <line:6:3, col:12>
    | `-VarDecl 0x130928718 <col:3, col:8> col:8 used find 'int'
    |-DeclStmt 0x130940ac8 <line:7:3, col:17>
    | `-VarDecl 0x130940a60 <col:3, col:16> col:8 used buff 'char[255]'
    |-BinaryOperator 0x130940b68 <line:9:3, col:13> 'char *' '='
    | |-UnaryOperator 0x130940b18 <col:3, col:4> 'char *' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x130940b00 <col:4> 'char **' <LValueToRValue>
    | |   `-DeclRefExpr 0x130940ae0 <col:4> 'char **' lvalue ParmVar 0x1309282d8 'err_pos' 'char **'
    | `-ImplicitCastExpr 0x130940b50 <col:13> 'char *' <NullToPointer>
    |   `-IntegerLiteral 0x130940b30 <col:13> 'int' 0
    |-WhileStmt 0x130941008 <line:10:3, line:11:8>
    | |-BinaryOperator 0x130940fb0 <line:10:10, col:53> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x130940f08 <col:10, col:16> 'int' contains-errors '>'
    | | | |-ImplicitCastExpr 0x130940ed8 <col:10> 'const char *' contains-errors <LValueToRValue>
    | | | | `-DeclRefExpr 0x130940b88 <col:10> 'const char *' contains-errors lvalue Var 0x130928550 'end' 'const char *'
    | | | `-ImplicitCastExpr 0x130940ef0 <col:16> 'const char *' <LValueToRValue>
    | | |   `-DeclRefExpr 0x130940ba8 <col:16> 'const char *' lvalue ParmVar 0x1309281a8 'x' 'const char *'
    | | `-CallExpr 0x130940f80 <col:21, col:53> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x130940d70 <col:21> 'int ()' Function 0x130940cb8 'my_isspace' 'int ()'
    | |   |-RecoveryExpr 0x130940f28 <col:32> '<dependent type>' contains-errors lvalue
    | |   `-ArraySubscriptExpr 0x130940f60 <col:46, col:52> 'const char' contains-errors lvalue
    | |     |-ImplicitCastExpr 0x130940f48 <col:46> 'const char *' contains-errors <LValueToRValue>
    | |     | `-DeclRefExpr 0x130940da8 <col:46> 'const char *' contains-errors lvalue Var 0x130928550 'end' 'const char *'
    | |     `-UnaryOperator 0x130940de8 <col:50, col:51> 'int' prefix '-'
    | |       `-IntegerLiteral 0x130940dc8 <col:51> 'int' 1
    | `-UnaryOperator 0x130940ff0 <line:11:5, col:8> 'const char *' contains-errors postfix '--'
    |   `-DeclRefExpr 0x130940fd0 <col:5> 'const char *' contains-errors lvalue Var 0x130928550 'end' 'const char *'
    |-BinaryOperator 0x130941098 <line:13:3, col:13> 'int' '='
    | |-UnaryOperator 0x130941060 <col:3, col:4> 'int' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x130941048 <col:4> 'int *' <LValueToRValue>
    | |   `-DeclRefExpr 0x130941028 <col:4> 'int *' lvalue ParmVar 0x130928358 'err_len' 'int *'
    | `-IntegerLiteral 0x130941078 <col:13> 'int' 0
    |-IfStmt 0x1309433e8 <line:14:3, line:37:3>
    | |-BinaryOperator 0x130941128 <line:14:7, col:12> 'int' contains-errors '!='
    | | |-ImplicitCastExpr 0x1309410f8 <col:7> 'const char *' <LValueToRValue>
    | | | `-DeclRefExpr 0x1309410b8 <col:7> 'const char *' lvalue ParmVar 0x1309281a8 'x' 'const char *'
    | | `-ImplicitCastExpr 0x130941110 <col:12> 'const char *' contains-errors <LValueToRValue>
    | |   `-DeclRefExpr 0x1309410d8 <col:12> 'const char *' contains-errors lvalue Var 0x130928550 'end' 'const char *'
    | `-CompoundStmt 0x1309433c8 <line:15:3, line:37:3>
    |   |-DeclStmt 0x130941200 <line:16:5, col:25>
    |   | `-VarDecl 0x130941160 <col:5, col:24> col:17 used start 'const char *' cinit
    |   |   `-ImplicitCastExpr 0x1309411e8 <col:24> 'const char *' <LValueToRValue>
    |   |     `-DeclRefExpr 0x1309411c8 <col:24> 'const char *' lvalue ParmVar 0x1309281a8 'x' 'const char *'
    |   `-ForStmt 0x130943390 <line:17:5, line:36:5>
    |     |-<<<NULL>>>
    |     |-<<<NULL>>>
    |     |-<<<NULL>>>
    |     |-<<<NULL>>>
    |     `-CompoundStmt 0x130943338 <line:18:5, line:36:5>
    |       |-DeclStmt 0x1309412d0 <line:19:7, col:29>
    |       | `-VarDecl 0x130941230 <col:7, col:24> col:19 used pos 'const char *' cinit
    |       |   `-ImplicitCastExpr 0x1309412b8 <col:24> 'const char *' <LValueToRValue>
    |       |     `-DeclRefExpr 0x130941298 <col:24> 'const char *' lvalue Var 0x130941160 'start' 'const char *'
    |       |-DeclStmt 0x130941368 <line:20:7, col:19>
    |       | `-VarDecl 0x130941300 <col:7, col:12> col:12 used var_len 'int'
    |       |-ForStmt 0x130941528 <line:22:7, col:48>
    |       | |-<<<NULL>>>
    |       | |-<<<NULL>>>
    |       | |-BinaryOperator 0x1309414c8 <col:14, col:36> 'int' contains-errors '&&'
    |       | | |-BinaryOperator 0x1309413f0 <col:14, col:21> 'int' contains-errors '!='
    |       | | | |-ImplicitCastExpr 0x1309413c0 <col:14> 'const char *' <LValueToRValue>
    |       | | | | `-DeclRefExpr 0x130941380 <col:14> 'const char *' lvalue Var 0x130941230 'pos' 'const char *'
    |       | | | `-ImplicitCastExpr 0x1309413d8 <col:21> 'const char *' contains-errors <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x1309413a0 <col:21> 'const char *' contains-errors lvalue Var 0x130928550 'end' 'const char *'
    |       | | `-BinaryOperator 0x1309414a8 <col:28, col:36> 'int' '!='
    |       | |   |-ImplicitCastExpr 0x130941490 <col:28, col:29> 'int' <IntegralCast>
    |       | |   | `-ImplicitCastExpr 0x130941478 <col:28, col:29> 'char' <LValueToRValue>
    |       | |   |   `-UnaryOperator 0x130941448 <col:28, col:29> 'const char' lvalue prefix '*' cannot overflow
    |       | |   |     `-ImplicitCastExpr 0x130941430 <col:29> 'const char *' <LValueToRValue>
    |       | |   |       `-DeclRefExpr 0x130941410 <col:29> 'const char *' lvalue Var 0x130941230 'pos' 'const char *'
    |       | |   `-CharacterLiteral 0x130941460 <col:36> 'int' 44
    |       | |-UnaryOperator 0x130941508 <col:41, col:44> 'const char *' postfix '++'
    |       | | `-DeclRefExpr 0x1309414e8 <col:41> 'const char *' lvalue Var 0x130941230 'pos' 'const char *'
    |       | `-NullStmt 0x130941520 <col:48>
    |       |-BinaryOperator 0x1309416b8 <line:23:7, col:35> 'int' contains-errors '='
    |       | |-DeclRefExpr 0x130941560 <col:7> 'int' lvalue Var 0x130941300 'var_len' 'int'
    |       | `-RecoveryExpr 0x130941688 <col:16, col:35> '<dependent type>' contains-errors lvalue
    |       |   |-ParenExpr 0x1309415d8 <col:16, col:21> '<overloaded function type>' lvalue
    |       |   | `-UnresolvedLookupExpr 0x130941598 <col:17> '<overloaded function type>' lvalue (no ADL) = 'uint' empty
    |       |   `-BinaryOperator 0x130941668 <col:24, col:30> 'long' '-'
    |       |     |-ImplicitCastExpr 0x130941638 <col:24> 'const char *' <LValueToRValue>
    |       |     | `-DeclRefExpr 0x1309415f8 <col:24> 'const char *' lvalue Var 0x130941230 'pos' 'const char *'
    |       |     `-ImplicitCastExpr 0x130941650 <col:30> 'const char *' <LValueToRValue>
    |       |       `-DeclRefExpr 0x130941618 <col:30> 'const char *' lvalue Var 0x130941160 'start' 'const char *'
    |       |-CallExpr 0x130942ca8 <line:24:7, col:61> 'int'
    |       | |-ImplicitCastExpr 0x130942c90 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |       | | `-DeclRefExpr 0x1309417b8 <col:7> 'int ()' Function 0x130941700 'strmake' 'int ()'
    |       | |-ImplicitCastExpr 0x130942ce0 <col:15> 'char *' <ArrayToPointerDecay>
    |       | | `-DeclRefExpr 0x1309417d8 <col:15> 'char[255]' lvalue Var 0x130940a60 'buff' 'char[255]'
    |       | |-ImplicitCastExpr 0x130942cf8 <col:21> 'const char *' <LValueToRValue>
    |       | | `-DeclRefExpr 0x1309417f8 <col:21> 'const char *' lvalue Var 0x130941160 'start' 'const char *'
    |       | `-CallExpr 0x130942c48 <col:28, col:60> 'int'
    |       |   |-ImplicitCastExpr 0x130942c30 <col:28> 'int (*)()' <FunctionToPointerDecay>
    |       |   | `-DeclRefExpr 0x1309418f8 <col:28> 'int ()' Function 0x130941840 'MY_MIN' 'int ()'
    |       |   |-BinaryOperator 0x1309419b0 <col:35, col:50> 'unsigned long' '-'
    |       |   | |-UnaryExprOrTypeTraitExpr 0x130941958 <col:35, col:46> 'unsigned long' sizeof
    |       |   | | `-ParenExpr 0x130941938 <col:41, col:46> 'char[255]' lvalue
    |       |   | |   `-DeclRefExpr 0x130941918 <col:42> 'char[255]' lvalue Var 0x130940a60 'buff' 'char[255]' non_odr_use_unevaluated
    |       |   | `-ImplicitCastExpr 0x130941998 <col:50> 'unsigned long' <IntegralCast>
    |       |   |   `-IntegerLiteral 0x130941978 <col:50> 'int' 1
    |       |   `-ImplicitCastExpr 0x130942c78 <col:53> 'int' <LValueToRValue>
    |       |     `-DeclRefExpr 0x1309419d0 <col:53> 'int' lvalue Var 0x130941300 'var_len' 'int'
    |       |-BinaryOperator 0x130942f38 <line:25:7, col:49> 'int' contains-errors '='
    |       | |-DeclRefExpr 0x130942d10 <col:7> 'int' lvalue Var 0x130928718 'find' 'int'
    |       | `-CallExpr 0x130942f00 <col:13, col:49> '<dependent type>' contains-errors
    |       |   |-DeclRefExpr 0x130942e10 <col:13> 'int ()' Function 0x130942d58 'find_type' 'int ()'
    |       |   |-DeclRefExpr 0x130942e30 <col:23> 'char[255]' lvalue Var 0x130940a60 'buff' 'char[255]'
    |       |   |-RecoveryExpr 0x130942e50 <col:29> '<dependent type>' contains-errors lvalue
    |       |   `-RecoveryExpr 0x130942ee0 <col:34> '<dependent type>' contains-errors lvalue
    |       |-IfStmt 0x130943198 <line:26:7, line:32:9> has_else
    |       | |-UnaryOperator 0x130942f90 <line:26:11, col:12> 'int' prefix '!' cannot overflow
    |       | | `-ImplicitCastExpr 0x130942f78 <col:12> 'int' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x130942f58 <col:12> 'int' lvalue Var 0x130928718 'find' 'int'
    |       | |-CompoundStmt 0x130943138 <line:27:7, line:30:7>
    |       | | |-BinaryOperator 0x130943070 <line:28:9, col:27> 'char *' '='
    |       | | | |-UnaryOperator 0x130942fe0 <col:9, col:10> 'char *' lvalue prefix '*' cannot overflow
    |       | | | | `-ImplicitCastExpr 0x130942fc8 <col:10> 'char **' <LValueToRValue>
    |       | | | |   `-DeclRefExpr 0x130942fa8 <col:10> 'char **' lvalue ParmVar 0x1309282d8 'err_pos' 'char **'
    |       | | | `-CStyleCastExpr 0x130943048 <col:19, col:27> 'char *' <NoOp>
    |       | | |   `-ImplicitCastExpr 0x130943030 <col:27> 'const char *' <LValueToRValue> part_of_explicit_cast
    |       | | |     `-DeclRefExpr 0x130942ff8 <col:27> 'const char *' lvalue Var 0x130941160 'start' 'const char *'
    |       | | `-BinaryOperator 0x130943118 <line:29:9, col:19> 'int' '='
    |       | |   |-UnaryOperator 0x1309430c8 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
    |       | |   | `-ImplicitCastExpr 0x1309430b0 <col:10> 'int *' <LValueToRValue>
    |       | |   |   `-DeclRefExpr 0x130943090 <col:10> 'int *' lvalue ParmVar 0x130928358 'err_len' 'int *'
    |       | |   `-ImplicitCastExpr 0x130943100 <col:19> 'int' <LValueToRValue>
    |       | |     `-DeclRefExpr 0x1309430e0 <col:19> 'int' lvalue Var 0x130941300 'var_len' 'int'
    |       | `-NullStmt 0x130943190 <line:32:9>
    |       |-IfStmt 0x130943260 <line:33:7, line:34:9>
    |       | |-BinaryOperator 0x130943238 <line:33:11, col:18> 'int' contains-errors '=='
    |       | | |-ImplicitCastExpr 0x130943208 <col:11> 'const char *' <LValueToRValue>
    |       | | | `-DeclRefExpr 0x1309431c8 <col:11> 'const char *' lvalue Var 0x130941230 'pos' 'const char *'
    |       | | `-ImplicitCastExpr 0x130943220 <col:18> 'const char *' contains-errors <LValueToRValue>
    |       | |   `-DeclRefExpr 0x1309431e8 <col:18> 'const char *' contains-errors lvalue Var 0x130928550 'end' 'const char *'
    |       | `-BreakStmt 0x130943258 <line:34:9>
    |       `-BinaryOperator 0x130943318 <line:35:7, col:20> 'const char *' '='
    |         |-DeclRefExpr 0x130943280 <col:7> 'const char *' lvalue Var 0x130941160 'start' 'const char *'
    |         `-BinaryOperator 0x1309432f8 <col:14, col:20> 'const char *' '+'
    |           |-ImplicitCastExpr 0x1309432e0 <col:14> 'const char *' <LValueToRValue>
    |           | `-DeclRefExpr 0x1309432a0 <col:14> 'const char *' lvalue Var 0x130941230 'pos' 'const char *'
    |           `-IntegerLiteral 0x1309432c0 <col:20> 'int' 1
    `-ReturnStmt 0x130943440 <line:38:3, col:10>
      `-ImplicitCastExpr 0x130943428 <col:10> 'long' <LValueToRValue>
        `-DeclRefExpr 0x130943408 <col:10> 'long' lvalue Var 0x130928648 'found' 'long'
