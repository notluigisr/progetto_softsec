`-FunctionDecl 0x124910a98  line:1:1 invalid GetNumSameData 'int (const int *, const int)'
  |-ParmVarDecl 0x1249108f0 <col:16, col:29> col:29 invalid curPtr 'const int *'
  |-ParmVarDecl 0x124910970 <col:37, col:47> col:47 used maxnum 'const int'
  `-CompoundStmt 0x124910f98 <line:2:1, line:13:1>
    |-DeclStmt 0x124910bf0 <line:3:5, col:18>
    | `-VarDecl 0x124910b68 <col:5, col:17> col:9 used count 'int' cinit
    |   `-IntegerLiteral 0x124910bd0 <col:17> 'int' 1
    |-IfStmt 0x124910ce8 <line:5:5, line:7:5>
    | |-BinaryOperator 0x124910c60 <line:5:9, col:14> 'int' '=='
    | | |-IntegerLiteral 0x124910c08 <col:9> 'int' 1
    | | `-ImplicitCastExpr 0x124910c48 <col:14> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x124910c28 <col:14> 'const int' lvalue ParmVar 0x124910970 'maxnum' 'const int'
    | `-CompoundStmt 0x124910cd0 <col:22, line:7:5>
    |   `-ReturnStmt 0x124910cc0 <line:6:9, col:18>
    |     `-ParenExpr 0x124910ca0 <col:16, col:18> 'int'
    |       `-IntegerLiteral 0x124910c80 <col:17> 'int' 1
    |-WhileStmt 0x124910f10 <line:8:5, line:10:5>
    | |-BinaryOperator 0x124910ea0 <line:8:12, col:53> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x124910df0 <col:12, col:39> 'int' contains-errors '=='
    | | | |-UnaryOperator 0x124910d40 <col:12, col:13> '<dependent type>' contains-errors prefix '*' cannot overflow
    | | | | `-ImplicitCastExpr 0x124910d28 <col:13> '<dependent type>' contains-errors <LValueToRValue>
    | | | |   `-RecoveryExpr 0x124910d08 <col:13> '<dependent type>' contains-errors lvalue
    | | | `-UnaryOperator 0x124910dd8 <col:23, col:39> '<dependent type>' contains-errors prefix '*' cannot overflow
    | | |   `-ParenExpr 0x124910db8 <col:24, col:39> '<dependent type>' contains-errors
    | | |     `-BinaryOperator 0x124910d98 <col:25, col:34> '<dependent type>' contains-errors '+'
    | | |       |-RecoveryExpr 0x124910d58 <col:25> '<dependent type>' contains-errors lvalue
    | | |       `-DeclRefExpr 0x124910d78 <col:34> 'int' lvalue Var 0x124910b68 'count' 'int'
    | | `-BinaryOperator 0x124910e80 <col:44, col:53> 'int' '>'
    | |   |-ImplicitCastExpr 0x124910e50 <col:44> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x124910e10 <col:44> 'const int' lvalue ParmVar 0x124910970 'maxnum' 'const int'
    | |   `-ImplicitCastExpr 0x124910e68 <col:53> 'int' <LValueToRValue>
    | |     `-DeclRefExpr 0x124910e30 <col:53> 'int' lvalue Var 0x124910b68 'count' 'int'
    | `-CompoundStmt 0x124910ef8 <col:60, line:10:5>
    |   `-UnaryOperator 0x124910ee0 <line:9:9, col:14> 'int' postfix '++'
    |     `-DeclRefExpr 0x124910ec0 <col:9> 'int' lvalue Var 0x124910b68 'count' 'int'
    `-ReturnStmt 0x124910f88 <line:12:5, col:18>
      `-ImplicitCastExpr 0x124910f70 <col:12, col:18> 'int' <LValueToRValue>
        `-ParenExpr 0x124910f50 <col:12, col:18> 'int' lvalue
          `-DeclRefExpr 0x124910f30 <col:13> 'int' lvalue Var 0x124910b68 'count' 'int'
