`-FunctionDecl 0x13e9281a8  line:1:1 PHP_FUNCTION 'int (int)'
  |-ParmVarDecl 0x13e9280d8 <col:14> col:14 wddx_deserialize 'int'
  `-CompoundStmt 0x13f00ae00 <line:2:1, line:34:1>
    |-DeclStmt 0x13e928350 <line:4:2, col:15>
    | `-VarDecl 0x13e9282e8 <col:2, col:8> col:8 used payload 'char *'
    |-DeclStmt 0x13e9283e8 <line:5:2, col:17>
    | `-VarDecl 0x13e928380 <col:2, col:6> col:6 used payload_len 'int'
    |-IfStmt 0x13e928728 <line:8:2, line:10:2>
    | |-RecoveryExpr 0x13e9286e0 <line:8:6, col:74> '_Bool' contains-errors
    | `-CompoundStmt 0x13e928710 <col:83, line:10:2>
    |   `-ReturnStmt 0x13e928700 <line:9:3>
    |-IfStmt 0x13f0097b8 <line:12:2, line:23:2> has_else
    | |-BinaryOperator 0x13f008db8 <line:12:6, col:26> 'int' contains-errors '=='
    | | |-CallExpr 0x13f008d70 <col:6, col:21> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x13f008cb8 <col:6> 'int ()' Function 0x13f008c00 'Z_TYPE_P' 'int ()'
    | | | `-RecoveryExpr 0x13f008d50 <col:15> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x13f008d98 <col:26> '<dependent type>' contains-errors lvalue
    | |-CompoundStmt 0x13f0091a8 <col:37, line:15:2>
    | | |-BinaryOperator 0x13f008fa0 <line:13:3, col:31> 'char *' contains-errors '='
    | | | |-DeclRefExpr 0x13f008dd8 <col:3> 'char *' lvalue Var 0x13e9282e8 'payload' 'char *'
    | | | `-CallExpr 0x13f008f78 <col:14, col:31> '<dependent type>' contains-errors
    | | |   |-DeclRefExpr 0x13f008ed8 <col:14> 'int ()' Function 0x13f008e20 'Z_STRVAL_P' 'int ()'
    | | |   `-RecoveryExpr 0x13f008f58 <col:25> '<dependent type>' contains-errors lvalue
    | | `-BinaryOperator 0x13f009188 <line:14:3, col:34> 'int' contains-errors '='
    | |   |-DeclRefExpr 0x13f008fc0 <col:3> 'int' lvalue Var 0x13e928380 'payload_len' 'int'
    | |   `-CallExpr 0x13f009160 <col:17, col:34> '<dependent type>' contains-errors
    | |     |-DeclRefExpr 0x13f0090c0 <col:17> 'int ()' Function 0x13f009008 'Z_STRLEN_P' 'int ()'
    | |     `-RecoveryExpr 0x13f009140 <col:28> '<dependent type>' contains-errors lvalue
    | `-IfStmt 0x13f009788 <line:15:9, line:23:2> has_else
    |   |-BinaryOperator 0x13f0092c8 <line:15:13, col:33> 'int' contains-errors '=='
    |   | |-CallExpr 0x13f009280 <col:13, col:28> '<dependent type>' contains-errors
    |   | | |-DeclRefExpr 0x13f0091c8 <col:13> 'int ()' Function 0x13f008c00 'Z_TYPE_P' 'int ()'
    |   | | `-RecoveryExpr 0x13f009260 <col:22> '<dependent type>' contains-errors lvalue
    |   | `-RecoveryExpr 0x13f0092a8 <col:33> '<dependent type>' contains-errors lvalue
    |   |-CompoundStmt 0x13f0095e8 <col:46, line:20:2>
    |   | `-IfStmt 0x13f0095c8 <line:17:3, line:19:3>
    |   |   |-RecoveryExpr 0x13f0093e8 <line:17:7> '_Bool' contains-errors
    |   |   `-CompoundStmt 0x13f0095b8 <col:15, line:19:3>
    |   `-CompoundStmt 0x13f009770 <line:20:9, line:23:2>
    |     `-ReturnStmt 0x13f009760 <line:22:3>
    |-IfStmt 0x13f009888 <line:25:2, line:27:2>
    | |-BinaryOperator 0x13f009840 <line:25:6, col:21> 'int' '=='
    | | |-ImplicitCastExpr 0x13f009828 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x13f0097e8 <col:6> 'int' lvalue Var 0x13e928380 'payload_len' 'int'
    | | `-IntegerLiteral 0x13f009808 <col:21> 'int' 0
    | `-CompoundStmt 0x13f009870 <col:24, line:27:2>
    |   `-ReturnStmt 0x13f009860 <line:26:3>
    `-IfStmt 0x13f009bc0 <line:31:2, line:33:2>
      |-RecoveryExpr 0x13f0099e8 <line:31:6> '_Bool' contains-errors
      `-CompoundStmt 0x13f009ba8 <col:14, line:33:2>
        `-CallExpr 0x13f009b60 <line:32:3, col:20> 'int'
          |-ImplicitCastExpr 0x13f009b48 <col:3> 'int (*)()' <FunctionToPointerDecay>
          | `-DeclRefExpr 0x13f009ae8 <col:3> 'int ()' Function 0x13f009a30 'pefree' 'int ()'
          |-ImplicitCastExpr 0x13f009b90 <col:10> 'char *' <LValueToRValue>
          | `-DeclRefExpr 0x13f009b08 <col:10> 'char *' lvalue Var 0x13e9282e8 'payload' 'char *'
          `-IntegerLiteral 0x13f009b28 <col:19> 'int' 0
