`-FunctionDecl 0x15500e218  line:1:1 invalid fmtstr 'int (char **, char **, int *, int *, const char *, int, int, int)'
  |-ParmVarDecl 0x15500dd08 <col:8, col:15> col:15 used sbuffer 'char **'
  |-ParmVarDecl 0x15500dd88 <line:2:8, col:15> col:15 used buffer 'char **'
  |-ParmVarDecl 0x15500de58 <line:3:8, col:16> col:16 invalid currlen 'int *'
  |-ParmVarDecl 0x15500ded8 <line:4:8, col:16> col:16 invalid maxlen 'int *'
  |-ParmVarDecl 0x15500df58 <col:24, col:36> col:36 used value 'const char *'
  |-ParmVarDecl 0x15500dfd8 <col:43, col:47> col:47 used flags 'int'
  |-ParmVarDecl 0x15500e058 <col:54, col:58> col:58 used min 'int'
  |-ParmVarDecl 0x15500e0d8 <col:63, col:67> col:67 used max 'int'
  `-CompoundStmt 0x155028f98 <line:5:1, line:32:1>
    |-DeclStmt 0x155027418 <line:6:5, col:22>
    | |-VarDecl 0x15500e318 <col:5, col:9> col:9 used padlen 'int'
    | `-VarDecl 0x15500e398 <col:5, col:17> col:17 used strln 'int'
    |-DeclStmt 0x1550274d0 <line:7:5, col:16>
    | `-VarDecl 0x155027448 <col:5, col:15> col:9 used cnt 'int' cinit
    |   `-IntegerLiteral 0x1550274b0 <col:15> 'int' 0
    |-IfStmt 0x155027650 <line:9:5, line:10:17>
    | |-BinaryOperator 0x155027558 <line:9:9, col:18> 'int' '=='
    | | |-ImplicitCastExpr 0x155027528 <col:9> 'const char *' <LValueToRValue>
    | | | `-DeclRefExpr 0x1550274e8 <col:9> 'const char *' lvalue ParmVar 0x15500df58 'value' 'const char *'
    | | `-ImplicitCastExpr 0x155027540 <col:18> 'const char *' <NullToPointer>
    | |   `-IntegerLiteral 0x155027508 <col:18> 'int' 0
    | `-BinaryOperator 0x155027630 <line:10:9, col:17> 'const char *' '='
    |   |-DeclRefExpr 0x155027578 <col:9> 'const char *' lvalue ParmVar 0x15500df58 'value' 'const char *'
    |   `-ImplicitCastExpr 0x155027618 <col:17> 'const char *' <NoOp>
    |     `-ImplicitCastExpr 0x155027600 <col:17> 'char *' <ArrayToPointerDecay>
    |       `-StringLiteral 0x1550275e0 <col:17> 'char[4]' lvalue "STR"
    |-ForStmt 0x1550277b8 <line:11:5, col:44>
    | |-BinaryOperator 0x1550276b0 <col:10, col:18> 'int' '='
    | | |-DeclRefExpr 0x155027670 <col:10> 'int' lvalue Var 0x15500e398 'strln' 'int'
    | | `-IntegerLiteral 0x155027690 <col:18> 'int' 0
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x155027760 <col:21, col:32> 'char' <LValueToRValue>
    | | `-ArraySubscriptExpr 0x155027740 <col:21, col:32> 'const char' lvalue
    | |   |-ImplicitCastExpr 0x155027710 <col:21> 'const char *' <LValueToRValue>
    | |   | `-DeclRefExpr 0x1550276d0 <col:21> 'const char *' lvalue ParmVar 0x15500df58 'value' 'const char *'
    | |   `-ImplicitCastExpr 0x155027728 <col:27> 'int' <LValueToRValue>
    | |     `-DeclRefExpr 0x1550276f0 <col:27> 'int' lvalue Var 0x15500e398 'strln' 'int'
    | |-UnaryOperator 0x155027798 <col:35, col:37> 'int' prefix '++'
    | | `-DeclRefExpr 0x155027778 <col:37> 'int' lvalue Var 0x15500e398 'strln' 'int'
    | `-NullStmt 0x1550277b0 <col:44>
    |-BinaryOperator 0x1550278a0 <line:12:5, col:20> 'int' '='
    | |-DeclRefExpr 0x1550277f0 <col:5> 'int' lvalue Var 0x15500e318 'padlen' 'int'
    | `-BinaryOperator 0x155027880 <col:14, col:20> 'int' '-'
    |   |-ImplicitCastExpr 0x155027850 <col:14> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x155027810 <col:14> 'int' lvalue ParmVar 0x15500e058 'min' 'int'
    |   `-ImplicitCastExpr 0x155027868 <col:20> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x155027830 <col:20> 'int' lvalue Var 0x15500e398 'strln' 'int'
    |-IfStmt 0x155027998 <line:13:5, line:14:18>
    | |-BinaryOperator 0x155027918 <line:13:9, col:18> 'int' '<'
    | | |-ImplicitCastExpr 0x155027900 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1550278c0 <col:9> 'int' lvalue Var 0x15500e318 'padlen' 'int'
    | | `-IntegerLiteral 0x1550278e0 <col:18> 'int' 0
    | `-BinaryOperator 0x155027978 <line:14:9, col:18> 'int' '='
    |   |-DeclRefExpr 0x155027938 <col:9> 'int' lvalue Var 0x15500e318 'padlen' 'int'
    |   `-IntegerLiteral 0x155027958 <col:18> 'int' 0
    |-IfStmt 0x155027ae0 <line:15:5, line:16:19>
    | |-BinaryOperator 0x155027a30 <line:15:9, col:17> '<dependent type>' contains-errors '&'
    | | |-DeclRefExpr 0x1550279b8 <col:9> 'int' lvalue ParmVar 0x15500dfd8 'flags' 'int'
    | | `-RecoveryExpr 0x155027a10 <col:17> '<dependent type>' contains-errors lvalue
    | `-BinaryOperator 0x155027ac0 <line:16:9, col:19> 'int' '='
    |   |-DeclRefExpr 0x155027a50 <col:9> 'int' lvalue Var 0x15500e318 'padlen' 'int'
    |   `-UnaryOperator 0x155027aa8 <col:18, col:19> 'int' prefix '-'
    |     `-ImplicitCastExpr 0x155027a90 <col:19> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x155027a70 <col:19> 'int' lvalue Var 0x15500e318 'padlen' 'int'
    |-WhileStmt 0x155027f58 <line:18:5, line:22:5>
    | |-BinaryOperator 0x155027c48 <line:18:12, col:38> 'int' '&&'
    | | |-ParenExpr 0x155027b78 <col:12, col:23> 'int'
    | | | `-BinaryOperator 0x155027b58 <col:13, col:22> 'int' '>'
    | | |   |-ImplicitCastExpr 0x155027b40 <col:13> 'int' <LValueToRValue>
    | | |   | `-DeclRefExpr 0x155027b00 <col:13> 'int' lvalue Var 0x15500e318 'padlen' 'int'
    | | |   `-IntegerLiteral 0x155027b20 <col:22> 'int' 0
    | | `-ParenExpr 0x155027c28 <col:28, col:38> 'int'
    | |   `-BinaryOperator 0x155027c08 <col:29, col:35> 'int' '<'
    | |     |-ImplicitCastExpr 0x155027bd8 <col:29> 'int' <LValueToRValue>
    | |     | `-DeclRefExpr 0x155027b98 <col:29> 'int' lvalue Var 0x155027448 'cnt' 'int'
    | |     `-ImplicitCastExpr 0x155027bf0 <col:35> 'int' <LValueToRValue>
    | |       `-DeclRefExpr 0x155027bb8 <col:35> 'int' lvalue ParmVar 0x15500e0d8 'max' 'int'
    | `-CompoundStmt 0x155027f30 <col:41, line:22:5>
    |   |-CallExpr 0x155027e78 <line:19:9, col:58> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x155027dc0 <col:9> 'int ()' Function 0x155027d08 'doapr_outch' 'int ()'
    |   | |-DeclRefExpr 0x155027de0 <col:21> 'char **' lvalue ParmVar 0x15500dd08 'sbuffer' 'char **'
    |   | |-DeclRefExpr 0x155027e00 <col:30> 'char **' lvalue ParmVar 0x15500dd88 'buffer' 'char **'
    |   | |-RecoveryExpr 0x155027e20 <col:38> '<dependent type>' contains-errors lvalue
    |   | |-RecoveryExpr 0x155027e40 <col:47> '<dependent type>' contains-errors lvalue
    |   | `-CharacterLiteral 0x155027e60 <col:55> 'int' 32
    |   |-UnaryOperator 0x155027ee0 <line:20:9, col:11> 'int' prefix '--'
    |   | `-DeclRefExpr 0x155027ec0 <col:11> 'int' lvalue Var 0x15500e318 'padlen' 'int'
    |   `-UnaryOperator 0x155027f18 <line:21:9, col:11> 'int' prefix '++'
    |     `-DeclRefExpr 0x155027ef8 <col:11> 'int' lvalue Var 0x155027448 'cnt' 'int'
    |-WhileStmt 0x155028258 <line:23:5, line:26:5>
    | |-BinaryOperator 0x1550280a8 <line:23:12, col:32> 'int' '&&'
    | | |-ImplicitCastExpr 0x155028090 <col:12, col:13> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x155028078 <col:12, col:13> 'char' <LValueToRValue>
    | | |   `-UnaryOperator 0x155027fb0 <col:12, col:13> 'const char' lvalue prefix '*' cannot overflow
    | | |     `-ImplicitCastExpr 0x155027f98 <col:13> 'const char *' <LValueToRValue>
    | | |       `-DeclRefExpr 0x155027f78 <col:13> 'const char *' lvalue ParmVar 0x15500df58 'value' 'const char *'
    | | `-ParenExpr 0x155028058 <col:22, col:32> 'int'
    | |   `-BinaryOperator 0x155028038 <col:23, col:29> 'int' '<'
    | |     |-ImplicitCastExpr 0x155028008 <col:23> 'int' <LValueToRValue>
    | |     | `-DeclRefExpr 0x155027fc8 <col:23> 'int' lvalue Var 0x155027448 'cnt' 'int'
    | |     `-ImplicitCastExpr 0x155028020 <col:29> 'int' <LValueToRValue>
    | |       `-DeclRefExpr 0x155027fe8 <col:29> 'int' lvalue ParmVar 0x15500e0d8 'max' 'int'
    | `-CompoundStmt 0x155028238 <col:35, line:26:5>
    |   |-CallExpr 0x1550281b8 <line:24:9, col:63> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x1550280c8 <col:9> 'int ()' Function 0x155027d08 'doapr_outch' 'int ()'
    |   | |-DeclRefExpr 0x1550280e8 <col:21> 'char **' lvalue ParmVar 0x15500dd08 'sbuffer' 'char **'
    |   | |-DeclRefExpr 0x155028108 <col:30> 'char **' lvalue ParmVar 0x15500dd88 'buffer' 'char **'
    |   | |-RecoveryExpr 0x155028128 <col:38> '<dependent type>' contains-errors lvalue
    |   | |-RecoveryExpr 0x155028148 <col:47> '<dependent type>' contains-errors lvalue
    |   | `-UnaryOperator 0x1550281a0 <col:55, col:61> 'const char' lvalue prefix '*' cannot overflow
    |   |   `-UnaryOperator 0x155028188 <col:56, col:61> 'const char *' postfix '++'
    |   |     `-DeclRefExpr 0x155028168 <col:56> 'const char *' lvalue ParmVar 0x15500df58 'value' 'const char *'
    |   `-UnaryOperator 0x155028220 <line:25:9, col:11> 'int' prefix '++'
    |     `-DeclRefExpr 0x155028200 <col:11> 'int' lvalue Var 0x155027448 'cnt' 'int'
    `-WhileStmt 0x155028f78 <line:27:5, line:31:5>
      |-BinaryOperator 0x1550283c0 <line:27:12, col:38> 'int' '&&'
      | |-ParenExpr 0x1550282f0 <col:12, col:23> 'int'
      | | `-BinaryOperator 0x1550282d0 <col:13, col:22> 'int' '<'
      | |   |-ImplicitCastExpr 0x1550282b8 <col:13> 'int' <LValueToRValue>
      | |   | `-DeclRefExpr 0x155028278 <col:13> 'int' lvalue Var 0x15500e318 'padlen' 'int'
      | |   `-IntegerLiteral 0x155028298 <col:22> 'int' 0
      | `-ParenExpr 0x1550283a0 <col:28, col:38> 'int'
      |   `-BinaryOperator 0x155028380 <col:29, col:35> 'int' '<'
      |     |-ImplicitCastExpr 0x155028350 <col:29> 'int' <LValueToRValue>
      |     | `-DeclRefExpr 0x155028310 <col:29> 'int' lvalue Var 0x155027448 'cnt' 'int'
      |     `-ImplicitCastExpr 0x155028368 <col:35> 'int' <LValueToRValue>
      |       `-DeclRefExpr 0x155028330 <col:35> 'int' lvalue ParmVar 0x15500e0d8 'max' 'int'
      `-CompoundStmt 0x155028f50 <col:41, line:31:5>
        |-CallExpr 0x155028e98 <line:28:9, col:58> '<dependent type>' contains-errors
        | |-DeclRefExpr 0x1550283e0 <col:9> 'int ()' Function 0x155027d08 'doapr_outch' 'int ()'
        | |-DeclRefExpr 0x155028e00 <col:21> 'char **' lvalue ParmVar 0x15500dd08 'sbuffer' 'char **'
        | |-DeclRefExpr 0x155028e20 <col:30> 'char **' lvalue ParmVar 0x15500dd88 'buffer' 'char **'
        | |-RecoveryExpr 0x155028e40 <col:38> '<dependent type>' contains-errors lvalue
        | |-RecoveryExpr 0x155028e60 <col:47> '<dependent type>' contains-errors lvalue
        | `-CharacterLiteral 0x155028e80 <col:55> 'int' 32
        |-UnaryOperator 0x155028f00 <line:29:9, col:11> 'int' prefix '++'
        | `-DeclRefExpr 0x155028ee0 <col:11> 'int' lvalue Var 0x15500e318 'padlen' 'int'
        `-UnaryOperator 0x155028f38 <line:30:9, col:11> 'int' prefix '++'
          `-DeclRefExpr 0x155028f18 <col:11> 'int' lvalue Var 0x155027448 'cnt' 'int'
