`-FunctionDecl 0x12700ddf8  line:1:1 invalid ex_packadd 'int (int *)'
  |-ParmVarDecl 0x12700dd28 <col:12, col:21> col:21 invalid eap 'int *'
  `-CompoundStmt 0x12702b668 <line:2:1, line:28:1>
    |-DeclStmt 0x12700dfa8 <line:3:5, col:33>
    | `-VarDecl 0x12700dec0 <col:5, col:28> col:18 used plugpat 'char *' static cinit
    |   `-ImplicitCastExpr 0x12700df90 <col:28> 'char *' <ArrayToPointerDecay>
    |     `-StringLiteral 0x12700df70 <col:28> 'char[4]' lvalue "STR"
    |-DeclStmt 0x12700e040 <line:4:5, col:13>
    | `-VarDecl 0x12700dfd8 <col:5, col:10> col:10 used len 'int'
    |-DeclStmt 0x12700e0d8 <line:5:5, col:14>
    | `-VarDecl 0x12700e070 <col:5, col:11> col:11 used pat 'char *'
    |-DeclStmt 0x12700e170 <line:6:5, col:15>
    | `-VarDecl 0x12700e108 <col:5, col:10> col:10 used round 'int'
    |-DeclStmt 0x12700e240 <line:7:5, col:18>
    | `-VarDecl 0x12700e1a0 <col:5, col:16> col:10 used res 'int' cinit
    |   `-RecoveryExpr 0x12700e220 <col:16> '<dependent type>' contains-errors lvalue
    `-ForStmt 0x12702b630 <line:10:5, line:27:5>
      |-BinaryOperator 0x12700e298 <line:10:10, col:18> 'int' '='
      | |-DeclRefExpr 0x12700e258 <col:10> 'int' lvalue Var 0x12700e108 'round' 'int'
      | `-IntegerLiteral 0x12700e278 <col:18> 'int' 1
      |-<<<NULL>>>
      |-BinaryOperator 0x12700e310 <col:21, col:30> 'int' '<='
      | |-ImplicitCastExpr 0x12700e2f8 <col:21> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x12700e2b8 <col:21> 'int' lvalue Var 0x12700e108 'round' 'int'
      | `-IntegerLiteral 0x12700e2d8 <col:30> 'int' 2
      |-UnaryOperator 0x12700e350 <col:33, col:35> 'int' prefix '++'
      | `-DeclRefExpr 0x12700e330 <col:35> 'int' lvalue Var 0x12700e108 'round' 'int'
      `-CompoundStmt 0x12702b5f8 <line:11:5, line:27:5>
        |-IfStmt 0x127027ed8 <line:13:2, line:14:6>
        | |-BinaryOperator 0x127027eb0 <line:13:6, col:20> 'int' contains-errors '&&'
        | | |-BinaryOperator 0x127027e70 <col:6, col:15> 'int' '=='
        | | | |-ImplicitCastExpr 0x127027e58 <col:6> 'int' <LValueToRValue>
        | | | | `-DeclRefExpr 0x12700e368 <col:6> 'int' lvalue Var 0x12700e108 'round' 'int'
        | | | `-IntegerLiteral 0x12700e388 <col:15> 'int' 1
        | | `-RecoveryExpr 0x127027e90 <col:20> '<dependent type>' contains-errors lvalue
        | `-ContinueStmt 0x127027ed0 <line:14:6>
        |-BinaryOperator 0x1270282c8 <line:16:2, col:55> 'int' contains-errors '='
        | |-DeclRefExpr 0x127027ef8 <col:2> 'int' lvalue Var 0x12700dfd8 'len' 'int'
        | `-BinaryOperator 0x1270282a8 <col:8, col:55> 'int' contains-errors '+'
        |   |-BinaryOperator 0x127028268 <col:8, col:51> 'int' contains-errors '+'
        |   | |-CStyleCastExpr 0x127028150 <col:8, col:27> 'int' <NoOp>
        |   | | `-CallExpr 0x1270280f8 <col:13, col:27> 'int'
        |   | |   |-ImplicitCastExpr 0x1270280e0 <col:13> 'int (*)()' <FunctionToPointerDecay>
        |   | |   | `-DeclRefExpr 0x127028070 <col:13> 'int ()' Function 0x127027fb8 'STRLEN' 'int ()'
        |   | |   `-ImplicitCastExpr 0x127028120 <col:20> 'char *' <LValueToRValue>
        |   | |     `-DeclRefExpr 0x127028090 <col:20> 'char *' lvalue Var 0x12700dec0 'plugpat' 'char *'
        |   | `-CStyleCastExpr 0x127028240 <col:31, col:51> 'int' contains-errors <Dependent>
        |   |   `-CallExpr 0x127028200 <col:36, col:51> '<dependent type>' contains-errors
        |   |     |-DeclRefExpr 0x127028178 <col:36> 'int ()' Function 0x127027fb8 'STRLEN' 'int ()'
        |   |     `-CXXDependentScopeMemberExpr 0x1270281b8 <col:43, col:48> '<dependent type>' contains-errors lvalue ->arg
        |   |       `-RecoveryExpr 0x127028198 <col:43> '<dependent type>' contains-errors lvalue
        |   `-IntegerLiteral 0x127028288 <col:55> 'int' 5
        |-BinaryOperator 0x1270288c0 <line:17:2, col:17> 'char *' '='
        | |-DeclRefExpr 0x1270282e8 <col:2> 'char *' lvalue Var 0x12700e070 'pat' 'char *'
        | `-ImplicitCastExpr 0x127028480 <col:8, col:17> 'char *' <IntegralToPointer>
        |   `-CallExpr 0x127028440 <col:8, col:17> 'int'
        |     |-ImplicitCastExpr 0x127028428 <col:8> 'int (*)()' <FunctionToPointerDecay>
        |     | `-DeclRefExpr 0x1270283e8 <col:8> 'int ()' Function 0x127028330 'alloc' 'int ()'
        |     `-ImplicitCastExpr 0x127028468 <col:14> 'int' <LValueToRValue>
        |       `-DeclRefExpr 0x127028408 <col:14> 'int' lvalue Var 0x12700dfd8 'len' 'int'
        |-IfStmt 0x127028988 <line:18:2, line:19:6>
        | |-BinaryOperator 0x127028958 <line:18:6, col:13> 'int' contains-errors '=='
        | | |-DeclRefExpr 0x1270288e0 <col:6> 'char *' lvalue Var 0x12700e070 'pat' 'char *'
        | | `-RecoveryExpr 0x127028938 <col:13> '<dependent type>' contains-errors lvalue
        | `-ReturnStmt 0x127028978 <line:19:6>
        `-CallExpr 0x12702b5b8 <line:26:2, col:14> 'int'
          |-ImplicitCastExpr 0x12702b5a0 <col:2> 'int (*)()' <FunctionToPointerDecay>
          | `-DeclRefExpr 0x12702b560 <col:2> 'int ()' Function 0x12702b4a8 'vim_free' 'int ()'
          `-ImplicitCastExpr 0x12702b5e0 <col:11> 'char *' <LValueToRValue>
            `-DeclRefExpr 0x12702b580 <col:11> 'char *' lvalue Var 0x12700e070 'pat' 'char *'
