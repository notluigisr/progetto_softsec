`-FunctionDecl 0x13a1281a8  line:1:1 base64_decode_string 'int (const char *)'
  |-ParmVarDecl 0x13a1280d8 <col:23, col:35> col:35 used enc 'const char *'
  `-CompoundStmt 0x13a141d20 <line:2:1, line:11:1>
    |-IfStmt 0x13a128398 <line:3:3, line:4:12>
    | |-BinaryOperator 0x13a128330 <line:3:7, col:14> 'int' contains-errors '=='
    | | |-DeclRefExpr 0x13a1282a0 <col:7> 'const char *' lvalue ParmVar 0x13a1280d8 'enc' 'const char *'
    | | `-RecoveryExpr 0x13a128310 <col:14> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x13a128388 <line:4:5, col:12>
    |   `-RecoveryExpr 0x13a128368 <col:12> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x13a141a70 <line:6:3, col:29>
    | `-VarDecl 0x13a1283d0 <col:3, col:28> col:9 used dec 'char *' cinit
    |   `-ImplicitCastExpr 0x13a128618 <col:15, col:28> 'char *' <IntegralToPointer>
    |     `-CallExpr 0x13a1285d8 <col:15, col:28> 'int'
    |       |-ImplicitCastExpr 0x13a1285c0 <col:15> 'int (*)()' <FunctionToPointerDecay>
    |       | `-DeclRefExpr 0x13a128550 <col:15> 'int ()' Function 0x13a128498 'g_strdup' 'int ()'
    |       `-ImplicitCastExpr 0x13a128600 <col:25> 'const char *' <LValueToRValue>
    |         `-DeclRefExpr 0x13a128570 <col:25> 'const char *' lvalue ParmVar 0x13a1280d8 'enc' 'const char *'
    |-CallExpr 0x13a141c40 <line:8:3, col:37> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x13a141b68 <col:3> 'int ()' Function 0x13a141ab0 'g_base64_decode_inplace' 'int ()'
    | |-DeclRefExpr 0x13a141b88 <col:28> 'char *' lvalue Var 0x13a1283d0 'dec' 'char *'
    | `-UnaryOperator 0x13a141c28 <col:33, col:34> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   `-RecoveryExpr 0x13a141c08 <col:34> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x13a141d10 <line:10:3, col:10>
      `-ImplicitCastExpr 0x13a141cf8 <col:10> 'int' <PointerToIntegral>
        `-ImplicitCastExpr 0x13a141ce0 <col:10> 'char *' <LValueToRValue>
          `-DeclRefExpr 0x13a141cc0 <col:10> 'char *' lvalue Var 0x13a1283d0 'dec' 'char *'
