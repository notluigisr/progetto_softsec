`-FunctionDecl 0x15380dd18  line:1:1 TEST_CASE 'int ()'
  `-CompoundStmt 0x153828590 <line:2:1, line:22:1>
    |-DeclStmt 0x15380e038 <line:15:5, col:35>
    | `-VarDecl 0x15380de98 <col:5, col:34> col:10 used ret 'int' auto cinit
    |   `-CallExpr 0x15380e010 <col:16, col:34> '<dependent type>' contains-errors
    |     |-CXXDependentScopeMemberExpr 0x15380dfc8 <col:16, col:23> '<dependent type>' contains-errors lvalue .parse
    |     | `-RecoveryExpr 0x15380dfa8 <col:16> '<dependent type>' contains-errors lvalue
    |     `-StringLiteral 0x15380df60 <col:29> 'char[4]' lvalue "STR"
    |-CallExpr 0x15380e210 <line:17:5, col:24> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x15380e130 <col:5> 'int ()' Function 0x15380e078 'REQUIRE' 'int ()'
    | `-BinaryOperator 0x15380e1f0 <col:13, col:20> 'int' contains-errors '=='
    |   |-DeclRefExpr 0x15380e150 <col:13> 'int' contains-errors lvalue Var 0x15380de98 'ret' 'int'
    |   `-RecoveryExpr 0x15380e1d0 <col:20> '<dependent type>' contains-errors lvalue
    `-CallExpr 0x153828400 <line:18:5, col:29> '<dependent type>' contains-errors
      |-DeclRefExpr 0x15380e238 <col:5> 'int ()' Function 0x15380e078 'REQUIRE' 'int ()'
      `-BinaryOperator 0x15380e3c8 <col:13, col:28> 'int' contains-errors '=='
        |-CallExpr 0x15380e3a8 <col:13, col:23> '<dependent type>' contains-errors
        | `-CXXDependentScopeMemberExpr 0x15380e360 <col:13, col:18> '<dependent type>' contains-errors lvalue .size
        |   `-RecoveryExpr 0x15380e340 <col:13> '<dependent type>' contains-errors lvalue
        `-IntegerLiteral 0x15380e2d8 <col:28> 'int' 3
