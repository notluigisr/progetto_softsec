`-FunctionDecl 0x11f928198  line:1:12 do_drbg_all 'int (void)' static
  `-CompoundStmt 0x11f942440 <line:2:5, line:45:5>
    |-DeclStmt 0x11f942070 <line:3:5, line:34:3>
    | `-VarDecl 0x11f9282f8 <line:3:5, col:33> col:22 invalid drbg_types 'int[]' static
    |-DeclStmt 0x11f942128 <line:36:5, col:15>
    | `-VarDecl 0x11f9420a0 <col:5, col:14> col:9 used rv 'int' cinit
    |   `-IntegerLiteral 0x11f942108 <col:14> 'int' 1
    |-ForStmt 0x11f9423c0 <line:37:5, line:43:2>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | `-CompoundStmt 0x11f9423a0 <line:38:2, line:43:2>
    |   |-IfStmt 0x11f9421a8 <line:39:2, line:40:3>
    |   | |-RecoveryExpr 0x11f942180 <line:39:6, col:19> '_Bool' contains-errors
    |   | `-BreakStmt 0x11f9421a0 <line:40:3>
    |   `-IfStmt 0x11f942380 <line:41:2, line:42:8>
    |     |-RecoveryExpr 0x11f942300 <line:41:6, col:41> '_Bool' contains-errors
    |     `-BinaryOperator 0x11f942360 <line:42:3, col:8> 'int' '='
    |       |-DeclRefExpr 0x11f942320 <col:3> 'int' lvalue Var 0x11f9420a0 'rv' 'int'
    |       `-IntegerLiteral 0x11f942340 <col:8> 'int' 0
    `-ReturnStmt 0x11f942430 <line:44:5, col:12>
      `-ImplicitCastExpr 0x11f942418 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x11f9423f8 <col:12> 'int' lvalue Var 0x11f9420a0 'rv' 'int'
