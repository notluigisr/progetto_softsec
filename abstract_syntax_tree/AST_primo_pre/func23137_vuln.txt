`-FunctionDecl 0x14d00df28  line:1:5 main 'int (int, char **)'
  |-ParmVarDecl 0x14d00dcd8 <col:10, col:14> col:14 used argc 'int'
  |-ParmVarDecl 0x14d00de00 <col:20, col:31> col:26 used argv 'char **'
  `-CompoundStmt 0x14d028590 <line:2:1, line:62:1>
    |-IfStmt 0x14d00e270 <line:3:5, line:6:5>
    | |-BinaryOperator 0x14d00e080 <line:3:9, col:17> 'int' '!='
    | | |-ImplicitCastExpr 0x14d00e068 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14d00e028 <col:9> 'int' lvalue ParmVar 0x14d00dcd8 'argc' 'int'
    | | `-IntegerLiteral 0x14d00e048 <col:17> 'int' 6
    | `-CompoundStmt 0x14d00e258 <line:4:5, line:6:5>
    |   `-CallExpr 0x14d00e238 <line:5:9, col:15> 'int'
    |     `-ImplicitCastExpr 0x14d00e220 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x14d00e1d0 <col:9> 'int ()' Function 0x14d00e118 'usage' 'int ()'
    |-DeclStmt 0x14d00e3a0 <line:8:5, col:31>
    | `-VarDecl 0x14d00e2a8 <col:5, col:30> col:11 infilename 'char *' cinit
    |   `-ImplicitCastExpr 0x14d00e388 <col:24, col:30> 'char *' <LValueToRValue>
    |     `-ArraySubscriptExpr 0x14d00e368 <col:24, col:30> 'char *' lvalue
    |       |-ImplicitCastExpr 0x14d00e350 <col:24> 'char **' <LValueToRValue>
    |       | `-DeclRefExpr 0x14d00e310 <col:24> 'char **' lvalue ParmVar 0x14d00de00 'argv' 'char **'
    |       `-IntegerLiteral 0x14d00e330 <col:29> 'int' 1
    |-DeclStmt 0x14d027af8 <line:9:5, col:32>
    | `-VarDecl 0x14d027a00 <col:5, col:31> col:11 outfilename 'char *' cinit
    |   `-ImplicitCastExpr 0x14d027ae0 <col:25, col:31> 'char *' <LValueToRValue>
    |     `-ArraySubscriptExpr 0x14d027ac0 <col:25, col:31> 'char *' lvalue
    |       |-ImplicitCastExpr 0x14d027aa8 <col:25> 'char **' <LValueToRValue>
    |       | `-DeclRefExpr 0x14d027a68 <col:25> 'char **' lvalue ParmVar 0x14d00de00 'argv' 'char **'
    |       `-IntegerLiteral 0x14d027a88 <col:30> 'int' 2
    |-DeclStmt 0x14d027bc8 <line:10:5, col:22>
    | `-VarDecl 0x14d027b28 <col:5, col:17> col:9 width 'int' cinit
    |   `-RecoveryExpr 0x14d027ba8 <col:17> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x14d027c98 <line:11:5, col:23>
    | `-VarDecl 0x14d027bf8 <col:5, col:18> col:9 height 'int' cinit
    |   `-RecoveryExpr 0x14d027c78 <col:18> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x14d027dc0 <line:12:5, col:31>
    | `-VarDecl 0x14d027cc8 <col:5, col:30> col:11 colorspace 'char *' cinit
    |   `-ImplicitCastExpr 0x14d027da8 <col:24, col:30> 'char *' <LValueToRValue>
    |     `-ArraySubscriptExpr 0x14d027d88 <col:24, col:30> 'char *' lvalue
    |       |-ImplicitCastExpr 0x14d027d70 <col:24> 'char **' <LValueToRValue>
    |       | `-DeclRefExpr 0x14d027d30 <col:24> 'char **' lvalue ParmVar 0x14d00de00 'argv' 'char **'
    |       `-IntegerLiteral 0x14d027d50 <col:29> 'int' 5
    |-DeclStmt 0x14d027e78 <line:18:5, col:23>
    | `-VarDecl 0x14d027df0 <col:5, col:22> col:9 used components 'int' cinit
    |   `-IntegerLiteral 0x14d027e58 <col:22> 'int' 0
    |-SwitchStmt 0x14d027ee0 <line:19:5, line:33:5>
    | |-RecoveryExpr 0x14d027ec0 <line:19:13> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x14d028108 <line:20:5, line:33:5>
    |   |-BinaryOperator 0x14d027f60 <line:22:9, col:22> 'int' '='
    |   | |-DeclRefExpr 0x14d027f20 <col:9> 'int' lvalue Var 0x14d027df0 'components' 'int'
    |   | `-IntegerLiteral 0x14d027f40 <col:22> 'int' 3
    |   |-BreakStmt 0x14d027f80 <line:23:9>
    |   |-BinaryOperator 0x14d027fe0 <line:25:9, col:22> 'int' '='
    |   | |-DeclRefExpr 0x14d027fa0 <col:9> 'int' lvalue Var 0x14d027df0 'components' 'int'
    |   | `-IntegerLiteral 0x14d027fc0 <col:22> 'int' 4
    |   |-BreakStmt 0x14d028000 <line:26:9>
    |   |-BinaryOperator 0x14d028060 <line:28:9, col:22> 'int' '='
    |   | |-DeclRefExpr 0x14d028020 <col:9> 'int' lvalue Var 0x14d027df0 'components' 'int'
    |   | `-IntegerLiteral 0x14d028040 <col:22> 'int' 1
    |   |-BreakStmt 0x14d028080 <line:29:9>
    |   |-DefaultStmt 0x14d0280e0 <line:30:7, line:31:15>
    |   | `-CallExpr 0x14d0280c0 <col:9, col:15> 'int'
    |   |   `-ImplicitCastExpr 0x14d0280a8 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   |     `-DeclRefExpr 0x14d028088 <col:9> 'int ()' Function 0x14d00e118 'usage' 'int ()'
    |   `-BreakStmt 0x14d028100 <line:32:9>
    |-DeclStmt 0x14d0282d0 <line:38:5, col:27>
    | `-VarDecl 0x14d028268 <col:5, col:26> col:19 used buf 'unsigned char[100]'
    |-WhileStmt 0x14d0283d0 <line:42:5, line:53:5>
    | |-RecoveryExpr 0x14d0282e8 <line:42:12, col:14> '_Bool' contains-errors
    | `-CompoundStmt 0x14d0283b8 <line:43:5, line:53:5>
    |   `-IfStmt 0x14d028388 <line:45:2, line:52:2> has_else
    |     |-RecoveryExpr 0x14d028328 <line:45:6, col:13> '_Bool' contains-errors
    |     |-CompoundStmt 0x14d028348 <line:46:2, line:48:2>
    |     `-CompoundStmt 0x14d028378 <line:50:2, line:52:2>
    |-IfStmt 0x14d028420 <line:55:5, line:58:5>
    | |-RecoveryExpr 0x14d0283f0 <line:55:9, col:20> '_Bool' contains-errors
    | `-CompoundStmt 0x14d028410 <line:56:5, line:58:5>
    `-ReturnStmt 0x14d028580 <line:61:5, col:12>
      `-IntegerLiteral 0x14d028560 <col:12> 'int' 0
