`-FunctionDecl 0x1541283e8  line:1:12 invalid iccalternatespace 'int (int *, int *, int **, int *)' static
  |-ParmVarDecl 0x154128128 <col:30, col:40> col:40 invalid i_ctx_p 'int *'
  |-ParmVarDecl 0x1541281a8 <col:49, col:54> col:54 invalid space 'int *'
  |-ParmVarDecl 0x154128260 <col:61, col:67> col:67 invalid r 'int **'
  |-ParmVarDecl 0x1541282e0 <col:70, col:75> col:75 used CIESubst 'int *'
  `-CompoundStmt 0x154144428 <line:2:1, line:44:1>
    |-DeclStmt 0x1541285e8 <line:3:5, col:29>
    | |-VarDecl 0x1541284c8 <col:5, col:9> col:9 used components 'int'
    | `-VarDecl 0x154128548 <col:5, col:28> col:21 used code 'int' cinit
    |   `-IntegerLiteral 0x1541285b0 <col:28> 'int' 0
    |-IfStmt 0x1541419a0 <line:6:5, line:7:40>
    | |-UnaryOperator 0x154141800 <line:6:9, col:26> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-CallExpr 0x1541287d0 <col:10, col:26> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x154128790 <col:10> 'int ()' Function 0x1541286d8 'r_is_array' 'int ()'
    | |   `-RecoveryExpr 0x1541287b0 <col:21> '<dependent type>' contains-errors lvalue
    | `-CallExpr 0x154141978 <line:7:9, col:40> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x1541418f8 <col:9> 'int ()' Function 0x154141840 'return_error' 'int ()'
    |   `-RecoveryExpr 0x154141958 <col:22> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x154141bf0 <line:9:5, line:10:41>
    | |-BinaryOperator 0x154141b28 <line:9:9, col:26> 'int' contains-errors '!='
    | | |-CallExpr 0x154141ae0 <col:9, col:21> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x154141aa0 <col:9> 'int ()' Function 0x1541419e8 'r_size' 'int ()'
    | | | `-RecoveryExpr 0x154141ac0 <col:16> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x154141b08 <col:26> 'int' 2
    | `-CallExpr 0x154141bc8 <line:10:9, col:41> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x154141b48 <col:9> 'int ()' Function 0x154141840 'return_error' 'int ()'
    |   `-RecoveryExpr 0x154141ba8 <col:22> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x154141eb0 <line:12:5, col:49> 'int' contains-errors '='
    | |-DeclRefExpr 0x154141c10 <col:5> 'int' lvalue Var 0x154128548 'code' 'int'
    | `-CallExpr 0x154141e70 <col:12, col:49> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x154141d10 <col:12> 'int ()' Function 0x154141c58 'array_get' 'int ()'
    |   |-RecoveryExpr 0x154141e18 <col:22> '<dependent type>' contains-errors lvalue
    |   |-RecoveryExpr 0x154141d48 <col:31> '<dependent type>' contains-errors lvalue
    |   |-IntegerLiteral 0x154141d68 <col:38> 'int' 1
    |   `-UnaryOperator 0x154141e58 <col:41, col:42> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-RecoveryExpr 0x154141e38 <col:42> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x154141f90 <line:13:5, line:14:16>
    | |-BinaryOperator 0x154141f28 <line:13:9, col:16> 'int' '<'
    | | |-ImplicitCastExpr 0x154141f10 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x154141ed0 <col:9> 'int' lvalue Var 0x154128548 'code' 'int'
    | | `-IntegerLiteral 0x154141ef0 <col:16> 'int' 0
    | `-ReturnStmt 0x154141f80 <line:14:9, col:16>
    |   `-ImplicitCastExpr 0x154141f68 <col:16> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x154141f48 <col:16> 'int' lvalue Var 0x154128548 'code' 'int'
    |-BinaryOperator 0x154142290 <line:16:5, col:54> 'int' contains-errors '='
    | |-DeclRefExpr 0x154141fb0 <col:5> 'int' lvalue Var 0x154128548 'code' 'int'
    | `-CallExpr 0x154142258 <col:12, col:54> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x1541420b0 <col:12> 'int ()' Function 0x154141ff8 'dict_find_string' 'int ()'
    |   |-UnaryOperator 0x154142208 <col:29, col:30> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | `-RecoveryExpr 0x1541421e8 <col:30> '<dependent type>' contains-errors lvalue
    |   |-StringLiteral 0x154142140 <col:39> 'char[4]' lvalue "STR"
    |   `-UnaryOperator 0x154142240 <col:46, col:47> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-RecoveryExpr 0x154142220 <col:47> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x154142370 <line:17:5, line:18:16>
    | |-BinaryOperator 0x154142308 <line:17:9, col:16> 'int' '<'
    | | |-ImplicitCastExpr 0x1541422f0 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1541422b0 <col:9> 'int' lvalue Var 0x154128548 'code' 'int'
    | | `-IntegerLiteral 0x1541422d0 <col:16> 'int' 0
    | `-ReturnStmt 0x154142360 <line:18:9, col:16>
    |   `-ImplicitCastExpr 0x154142348 <col:16> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x154142328 <col:16> 'int' lvalue Var 0x154128548 'code' 'int'
    |-IfStmt 0x1541425a0 <line:19:5, line:20:48>
    | |-BinaryOperator 0x1541423e8 <line:19:9, col:17> 'int' '=='
    | | |-ImplicitCastExpr 0x1541423d0 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x154142390 <col:9> 'int' lvalue Var 0x154128548 'code' 'int'
    | | `-IntegerLiteral 0x1541423b0 <col:17> 'int' 0
    | `-ReturnStmt 0x154142590 <line:20:9, col:48>
    |   `-CallExpr 0x154142568 <col:16, col:48> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x1541424e8 <col:16> 'int ()' Function 0x154142430 'gs_note_error' 'int ()'
    |     `-RecoveryExpr 0x154142548 <col:30> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x154142758 <line:22:5, col:33> 'int' contains-errors '='
    | |-DeclRefExpr 0x1541425c0 <col:5> 'int' lvalue Var 0x1541284c8 'components' 'int'
    | `-CXXDependentScopeMemberExpr 0x154142710 <col:18, col:33> '<dependent type>' contains-errors lvalue .intval
    |   `-CXXDependentScopeMemberExpr 0x1541426c8 <col:18, col:27> '<dependent type>' contains-errors lvalue ->value
    |     `-RecoveryExpr 0x1541426a8 <col:18> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x154144320 <line:25:5, line:41:5> has_else
    | |-RecoveryExpr 0x154143d58 <line:25:9, col:48> '_Bool' contains-errors
    | |-CompoundStmt 0x154143dc8 <col:51, line:27:5>
    | `-CompoundStmt 0x154144308 <col:12, line:41:5>
    |   `-SwitchStmt 0x154143e10 <line:28:9, line:40:9>
    |     |-ImplicitCastExpr 0x154143df8 <line:28:17> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x154143dd8 <col:17> 'int' lvalue Var 0x1541284c8 'components' 'int'
    |     `-CompoundStmt 0x1541442c0 <col:29, line:40:9>
    |       |-CaseStmt 0x154143e70 <line:29:13, <invalid sloc>>
    |       | |-ConstantExpr 0x154143e58 <col:18> 'int'
    |       | | `-IntegerLiteral 0x154143e38 <col:18> 'int' 1
    |       | `-NullStmt 0x154144028 <<invalid sloc>>
    |       |-BreakStmt 0x154144030 <line:31:17>
    |       |-CaseStmt 0x154144070 <line:32:13, <invalid sloc>>
    |       | |-ConstantExpr 0x154144058 <col:18> 'int'
    |       | | `-IntegerLiteral 0x154144038 <col:18> 'int' 3
    |       | `-NullStmt 0x154144148 <<invalid sloc>>
    |       |-BreakStmt 0x154144150 <line:34:17>
    |       |-CaseStmt 0x154144190 <line:35:13, <invalid sloc>>
    |       | |-ConstantExpr 0x154144178 <col:18> 'int'
    |       | | `-IntegerLiteral 0x154144158 <col:18> 'int' 4
    |       | `-NullStmt 0x154144268 <<invalid sloc>>
    |       |-BreakStmt 0x154144270 <line:37:17>
    |       `-DefaultStmt 0x1541442a0 <line:38:13, col:20>
    |         `-NullStmt 0x154144298 <col:20>
    |-BinaryOperator 0x1541443c0 <line:42:5, col:17> 'int' '='
    | |-UnaryOperator 0x154144388 <col:5, col:6> 'int' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x154144370 <col:6> 'int *' <LValueToRValue>
    | |   `-DeclRefExpr 0x154144350 <col:6> 'int *' lvalue ParmVar 0x1541282e0 'CIESubst' 'int *'
    | `-IntegerLiteral 0x1541443a0 <col:17> 'int' 1
    `-ReturnStmt 0x154144418 <line:43:5, col:12>
      `-ImplicitCastExpr 0x154144400 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x1541443e0 <col:12> 'int' lvalue Var 0x154128548 'code' 'int'
