`-FunctionDecl 0x153140ad8  line:1:22 asn1_length_decode 'unsigned char (struct asn1_ctx *, unsigned int *, unsigned int *)' static
  |-ParmVarDecl 0x153128648 <col:41, col:58> col:58 used ctx 'struct asn1_ctx *'
  |-ParmVarDecl 0x1531286f8 <line:2:6, col:20> col:20 used def 'unsigned int *'
  |-ParmVarDecl 0x153128778 <line:3:6, col:20> col:20 used len 'unsigned int *'
  `-CompoundStmt 0x1531419a8 <line:4:1, line:31:1>
    |-DeclStmt 0x153140cf8 <line:5:2, col:23>
    | |-VarDecl 0x153140bf8 <col:2, col:16> col:16 used ch 'unsigned char'
    | `-VarDecl 0x153140c78 <col:2, col:20> col:20 used cnt 'unsigned char'
    |-IfStmt 0x153140fe0 <line:7:2, line:8:10>
    | |-UnaryOperator 0x153140f80 <line:7:6, col:33> 'int' prefix '!' cannot overflow
    | | `-CallExpr 0x153140f38 <col:7, col:33> 'int'
    | |   |-ImplicitCastExpr 0x153140f20 <col:7> 'int (*)()' <FunctionToPointerDecay>
    | |   | `-DeclRefExpr 0x153140e40 <col:7> 'int ()' Function 0x153140d88 'asn1_octet_decode' 'int ()'
    | |   |-ImplicitCastExpr 0x153140f68 <col:25> 'struct asn1_ctx *' <LValueToRValue>
    | |   | `-DeclRefExpr 0x153140e60 <col:25> 'struct asn1_ctx *' lvalue ParmVar 0x153128648 'ctx' 'struct asn1_ctx *'
    | |   `-UnaryOperator 0x153140ed0 <col:30, col:31> 'unsigned char *' prefix '&' cannot overflow
    | |     `-DeclRefExpr 0x153140e80 <col:31> 'unsigned char' lvalue Var 0x153140bf8 'ch' 'unsigned char'
    | `-ReturnStmt 0x153140fd0 <line:8:3, col:10>
    |   `-ImplicitCastExpr 0x153140fb8 <col:10> 'unsigned char' <IntegralCast>
    |     `-IntegerLiteral 0x153140f98 <col:10> 'int' 0
    |-IfStmt 0x153141930 <line:10:2, line:29:2> has_else
    | |-BinaryOperator 0x153141070 <line:10:6, col:12> 'int' '=='
    | | |-ImplicitCastExpr 0x153141058 <col:6> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x153141040 <col:6> 'unsigned char' <LValueToRValue>
    | | |   `-DeclRefExpr 0x153141000 <col:6> 'unsigned char' lvalue Var 0x153140bf8 'ch' 'unsigned char'
    | | `-IntegerLiteral 0x153141020 <col:12> 'int' 128
    | |-BinaryOperator 0x153141118 <line:11:3, col:10> 'unsigned int' '='
    | | |-UnaryOperator 0x1531410c8 <col:3, col:4> 'unsigned int' lvalue prefix '*' cannot overflow
    | | | `-ImplicitCastExpr 0x1531410b0 <col:4> 'unsigned int *' <LValueToRValue>
    | | |   `-DeclRefExpr 0x153141090 <col:4> 'unsigned int *' lvalue ParmVar 0x1531286f8 'def' 'unsigned int *'
    | | `-ImplicitCastExpr 0x153141100 <col:10> 'unsigned int' <IntegralCast>
    | |   `-IntegerLiteral 0x1531410e0 <col:10> 'int' 0
    | `-CompoundStmt 0x153141910 <line:12:7, line:29:2>
    |   |-BinaryOperator 0x1531411c0 <line:13:3, col:10> 'unsigned int' '='
    |   | |-UnaryOperator 0x153141170 <col:3, col:4> 'unsigned int' lvalue prefix '*' cannot overflow
    |   | | `-ImplicitCastExpr 0x153141158 <col:4> 'unsigned int *' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x153141138 <col:4> 'unsigned int *' lvalue ParmVar 0x1531286f8 'def' 'unsigned int *'
    |   | `-ImplicitCastExpr 0x1531411a8 <col:10> 'unsigned int' <IntegralCast>
    |   |   `-IntegerLiteral 0x153141188 <col:10> 'int' 1
    |   `-IfStmt 0x1531418e0 <line:15:3, line:28:3> has_else
    |     |-BinaryOperator 0x153141250 <line:15:7, col:12> 'int' '<'
    |     | |-ImplicitCastExpr 0x153141238 <col:7> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x153141220 <col:7> 'unsigned char' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x1531411e0 <col:7> 'unsigned char' lvalue Var 0x153140bf8 'ch' 'unsigned char'
    |     | `-IntegerLiteral 0x153141200 <col:12> 'int' 128
    |     |-BinaryOperator 0x153141310 <line:16:4, col:11> 'unsigned int' '='
    |     | |-UnaryOperator 0x1531412a8 <col:4, col:5> 'unsigned int' lvalue prefix '*' cannot overflow
    |     | | `-ImplicitCastExpr 0x153141290 <col:5> 'unsigned int *' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x153141270 <col:5> 'unsigned int *' lvalue ParmVar 0x153128778 'len' 'unsigned int *'
    |     | `-ImplicitCastExpr 0x1531412f8 <col:11> 'unsigned int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x1531412e0 <col:11> 'unsigned char' <LValueToRValue>
    |     |     `-DeclRefExpr 0x1531412c0 <col:11> 'unsigned char' lvalue Var 0x153140bf8 'ch' 'unsigned char'
    |     `-CompoundStmt 0x1531418b8 <line:17:8, line:28:3>
    |       |-BinaryOperator 0x1531413f8 <line:18:4, col:15> 'unsigned char' '='
    |       | |-DeclRefExpr 0x153141330 <col:4> 'unsigned char' lvalue Var 0x153140c78 'cnt' 'unsigned char'
    |       | `-ImplicitCastExpr 0x1531413e0 <col:10, col:15> 'unsigned char' <IntegralCast>
    |       |   `-BinaryOperator 0x1531413c0 <col:10, col:15> 'int' '&'
    |       |     |-ImplicitCastExpr 0x1531413a8 <col:10> 'int' <IntegralCast>
    |       |     | `-ImplicitCastExpr 0x153141390 <col:10> 'unsigned char' <LValueToRValue>
    |       |     |   `-DeclRefExpr 0x153141350 <col:10> 'unsigned char' lvalue Var 0x153140bf8 'ch' 'unsigned char'
    |       |     `-IntegerLiteral 0x153141370 <col:15> 'int' 127
    |       |-BinaryOperator 0x1531414a0 <line:19:4, col:11> 'unsigned int' '='
    |       | |-UnaryOperator 0x153141450 <col:4, col:5> 'unsigned int' lvalue prefix '*' cannot overflow
    |       | | `-ImplicitCastExpr 0x153141438 <col:5> 'unsigned int *' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x153141418 <col:5> 'unsigned int *' lvalue ParmVar 0x153128778 'len' 'unsigned int *'
    |       | `-ImplicitCastExpr 0x153141488 <col:11> 'unsigned int' <IntegralCast>
    |       |   `-IntegerLiteral 0x153141468 <col:11> 'int' 0
    |       `-WhileStmt 0x153141898 <line:21:4, line:27:4>
    |         |-BinaryOperator 0x153141530 <line:21:11, col:17> 'int' '>'
    |         | |-ImplicitCastExpr 0x153141518 <col:11> 'int' <IntegralCast>
    |         | | `-ImplicitCastExpr 0x153141500 <col:11> 'unsigned char' <LValueToRValue>
    |         | |   `-DeclRefExpr 0x1531414c0 <col:11> 'unsigned char' lvalue Var 0x153140c78 'cnt' 'unsigned char'
    |         | `-IntegerLiteral 0x1531414e0 <col:17> 'int' 0
    |         `-CompoundStmt 0x153141868 <col:20, line:27:4>
    |           |-IfStmt 0x153141688 <line:22:5, line:23:13>
    |           | |-UnaryOperator 0x153141628 <line:22:9, col:36> 'int' prefix '!' cannot overflow
    |           | | `-CallExpr 0x1531415e0 <col:10, col:36> 'int'
    |           | |   |-ImplicitCastExpr 0x1531415c8 <col:10> 'int (*)()' <FunctionToPointerDecay>
    |           | |   | `-DeclRefExpr 0x153141550 <col:10> 'int ()' Function 0x153140d88 'asn1_octet_decode' 'int ()'
    |           | |   |-ImplicitCastExpr 0x153141610 <col:28> 'struct asn1_ctx *' <LValueToRValue>
    |           | |   | `-DeclRefExpr 0x153141570 <col:28> 'struct asn1_ctx *' lvalue ParmVar 0x153128648 'ctx' 'struct asn1_ctx *'
    |           | |   `-UnaryOperator 0x1531415b0 <col:33, col:34> 'unsigned char *' prefix '&' cannot overflow
    |           | |     `-DeclRefExpr 0x153141590 <col:34> 'unsigned char' lvalue Var 0x153140bf8 'ch' 'unsigned char'
    |           | `-ReturnStmt 0x153141678 <line:23:6, col:13>
    |           |   `-ImplicitCastExpr 0x153141660 <col:13> 'unsigned char' <IntegralCast>
    |           |     `-IntegerLiteral 0x153141640 <col:13> 'int' 0
    |           |-CompoundAssignOperator 0x153141730 <line:24:5, col:14> 'unsigned int' '<<=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    |           | |-UnaryOperator 0x1531416e0 <col:5, col:6> 'unsigned int' lvalue prefix '*' cannot overflow
    |           | | `-ImplicitCastExpr 0x1531416c8 <col:6> 'unsigned int *' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x1531416a8 <col:6> 'unsigned int *' lvalue ParmVar 0x153128778 'len' 'unsigned int *'
    |           | `-IntegerLiteral 0x1531416f8 <col:14> 'int' 8
    |           |-CompoundAssignOperator 0x153141800 <line:25:5, col:13> 'unsigned int' '|=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    |           | |-UnaryOperator 0x153141798 <col:5, col:6> 'unsigned int' lvalue prefix '*' cannot overflow
    |           | | `-ImplicitCastExpr 0x153141780 <col:6> 'unsigned int *' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x153141760 <col:6> 'unsigned int *' lvalue ParmVar 0x153128778 'len' 'unsigned int *'
    |           | `-ImplicitCastExpr 0x1531417e8 <col:13> 'unsigned int' <IntegralCast>
    |           |   `-ImplicitCastExpr 0x1531417d0 <col:13> 'unsigned char' <LValueToRValue>
    |           |     `-DeclRefExpr 0x1531417b0 <col:13> 'unsigned char' lvalue Var 0x153140bf8 'ch' 'unsigned char'
    |           `-UnaryOperator 0x153141850 <line:26:5, col:8> 'unsigned char' postfix '--' cannot overflow
    |             `-DeclRefExpr 0x153141830 <col:5> 'unsigned char' lvalue Var 0x153140c78 'cnt' 'unsigned char'
    `-ReturnStmt 0x153141998 <line:30:2, col:9>
      `-ImplicitCastExpr 0x153141980 <col:9> 'unsigned char' <IntegralCast>
        `-IntegerLiteral 0x153141960 <col:9> 'int' 1
