`-FunctionDecl 0x159128318  line:1:12 invalid tls1_check_sig_alg 'int (int *, int *, int)' static
  |-ParmVarDecl 0x159128128 <col:31, col:36> col:36 invalid s 'int *'
  |-ParmVarDecl 0x1591281a8 <col:39, col:45> col:45 invalid x 'int *'
  |-ParmVarDecl 0x159128228 <col:48, col:52> col:52 used default_nid 'int'
  `-CompoundStmt 0x159141c48 <line:2:1, line:14:1>
    |-DeclStmt 0x159128458 <line:3:5, col:16>
    | `-VarDecl 0x1591283f0 <col:5, col:9> col:9 used sig_nid 'int'
    |-UnaryExprOrTypeTraitExpr 0x1591284c8 <line:4:5, col:12> 'unsigned long' contains-errors sizeof
    | `-RecoveryExpr 0x1591284a8 <col:12> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x1591285a8 <line:5:5, line:6:16>
    | |-BinaryOperator 0x159128558 <line:5:9, col:25> 'int' '=='
    | | |-ImplicitCastExpr 0x159128540 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1591284e8 <col:9> 'int' lvalue ParmVar 0x159128228 'default_nid' 'int'
    | | `-UnaryOperator 0x159128528 <col:24, col:25> 'int' prefix '-'
    | |   `-IntegerLiteral 0x159128508 <col:25> 'int' 1
    | `-ReturnStmt 0x159128598 <line:6:9, col:16>
    |   `-IntegerLiteral 0x159128578 <col:16> 'int' 1
    |-BinaryOperator 0x1591287a8 <line:7:5, col:39> 'int' contains-errors '='
    | |-DeclRefExpr 0x1591285c8 <col:5> 'int' lvalue Var 0x1591283f0 'sig_nid' 'int'
    | `-CallExpr 0x159128780 <col:15, col:39> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x159128740 <col:15> 'int ()' Function 0x159128688 'X509_get_signature_nid' 'int ()'
    |   `-RecoveryExpr 0x159128760 <col:38> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x159141910 <line:8:5, line:9:45>
    | |-ImplicitCastExpr 0x1591287e8 <line:8:9> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x1591287c8 <col:9> 'int' lvalue ParmVar 0x159128228 'default_nid' 'int'
    | `-ReturnStmt 0x159141900 <line:9:9, col:45>
    |   `-ConditionalOperator 0x1591418d0 <col:16, col:45> 'int'
    |     |-BinaryOperator 0x159141870 <col:16, col:27> 'int' '=='
    |     | |-ImplicitCastExpr 0x159141840 <col:16> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x159141800 <col:16> 'int' lvalue Var 0x1591283f0 'sig_nid' 'int'
    |     | `-ImplicitCastExpr 0x159141858 <col:27> 'int' <LValueToRValue>
    |     |   `-DeclRefExpr 0x159141820 <col:27> 'int' lvalue ParmVar 0x159128228 'default_nid' 'int'
    |     |-IntegerLiteral 0x159141890 <col:41> 'int' 1
    |     `-IntegerLiteral 0x1591418b0 <col:45> 'int' 0
    |-ForStmt 0x159141be0 <line:10:5, line:12:20>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-BinaryOperator 0x159141a48 <line:10:17, col:24> 'int' contains-errors '<'
    | | |-RecoveryExpr 0x159141a28 <col:17> '<dependent type>' contains-errors lvalue
    | | `-CXXDependentScopeMemberExpr 0x1591419c0 <col:21, col:24> '<dependent type>' contains-errors lvalue ->shared_sigalgslen
    | |   `-RecoveryExpr 0x1591419a0 <col:21> '<dependent type>' contains-errors lvalue
    | |-UnaryOperator 0x159141ab8 <col:43, col:44> '<dependent type>' contains-errors postfix '++' cannot overflow
    | | `-RecoveryExpr 0x159141a98 <col:43> '<dependent type>' contains-errors lvalue
    | `-IfStmt 0x159141bc0 <line:11:9, line:12:20>
    |   |-RecoveryExpr 0x159141b70 <line:11:13, col:46> '_Bool' contains-errors
    |   `-ReturnStmt 0x159141bb0 <line:12:13, col:20>
    |     `-IntegerLiteral 0x159141b90 <col:20> 'int' 1
    `-ReturnStmt 0x159141c38 <line:13:5, col:12>
      `-IntegerLiteral 0x159141c18 <col:12> 'int' 0
