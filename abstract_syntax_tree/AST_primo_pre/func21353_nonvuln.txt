`-FunctionDecl 0x13f1281c8  line:1:1 invalid xmlXPathCastToNumber 'int (int)'
  |-ParmVarDecl 0x13f1280f0 <col:22, col:40> col:40 invalid val 'int'
  `-CompoundStmt 0x13f141e60 <col:45, line:35:1>
    |-DeclStmt 0x13f128318 <line:2:5, col:21>
    | `-VarDecl 0x13f128290 <col:5, col:18> col:12 used ret 'double' cinit
    |   `-FloatingLiteral 0x13f1282f8 <col:18> 'double' 0.000000e+00
    |-SwitchStmt 0x13f128460 <line:6:5, line:33:5>
    | |-ImplicitCastExpr 0x13f128448 <line:6:13, col:18> '<dependent type>' contains-errors <LValueToRValue>
    | | `-CXXDependentScopeMemberExpr 0x13f128400 <col:13, col:18> '<dependent type>' contains-errors lvalue ->type
    | |   `-RecoveryExpr 0x13f1283e0 <col:13> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x13f141d70 <col:24, line:33:5>
    |   |-BinaryOperator 0x13f128518 <line:11:2, col:8> 'double' contains-errors '='
    |   | |-DeclRefExpr 0x13f1284a0 <col:2> 'double' lvalue Var 0x13f128290 'ret' 'double'
    |   | `-RecoveryExpr 0x13f1284f8 <col:8> '<dependent type>' contains-errors lvalue
    |   |-BreakStmt 0x13f128538 <line:12:2>
    |   |-BinaryOperator 0x13f1287a0 <line:15:2, col:51> 'double' contains-errors '='
    |   | |-DeclRefExpr 0x13f128570 <col:2> 'double' lvalue Var 0x13f128290 'ret' 'double'
    |   | `-CallExpr 0x13f128778 <col:8, col:51> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x13f1286f0 <col:8> 'int ()' Function 0x13f128638 'xmlXPathCastNodeSetToNumber' 'int ()'
    |   |   `-CXXDependentScopeMemberExpr 0x13f128730 <col:36, col:41> '<dependent type>' contains-errors lvalue ->nodesetval
    |   |     `-RecoveryExpr 0x13f128710 <col:36> '<dependent type>' contains-errors lvalue
    |   |-BreakStmt 0x13f1287c0 <line:16:2>
    |   |-BinaryOperator 0x13f141990 <line:18:2, col:49> 'double' contains-errors '='
    |   | |-DeclRefExpr 0x13f1287e0 <col:2> 'double' lvalue Var 0x13f128290 'ret' 'double'
    |   | `-CallExpr 0x13f141968 <col:8, col:49> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x13f1418e0 <col:8> 'int ()' Function 0x13f141828 'xmlXPathCastStringToNumber' 'int ()'
    |   |   `-CXXDependentScopeMemberExpr 0x13f141920 <col:35, col:40> '<dependent type>' contains-errors lvalue ->stringval
    |   |     `-RecoveryExpr 0x13f141900 <col:35> '<dependent type>' contains-errors lvalue
    |   |-BreakStmt 0x13f1419b0 <line:19:2>
    |   |-BinaryOperator 0x13f141a58 <line:21:2, col:13> 'double' contains-errors '='
    |   | |-DeclRefExpr 0x13f1419d0 <col:2> 'double' lvalue Var 0x13f128290 'ret' 'double'
    |   | `-CXXDependentScopeMemberExpr 0x13f141a10 <col:8, col:13> '<dependent type>' contains-errors lvalue ->floatval
    |   |   `-RecoveryExpr 0x13f1419f0 <col:8> '<dependent type>' contains-errors lvalue
    |   |-BreakStmt 0x13f141a78 <line:22:2>
    |   |-BinaryOperator 0x13f141c48 <line:24:2, col:48> 'double' contains-errors '='
    |   | |-DeclRefExpr 0x13f141a98 <col:2> 'double' lvalue Var 0x13f128290 'ret' 'double'
    |   | `-CallExpr 0x13f141c20 <col:8, col:48> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x13f141b98 <col:8> 'int ()' Function 0x13f141ae0 'xmlXPathCastBooleanToNumber' 'int ()'
    |   |   `-CXXDependentScopeMemberExpr 0x13f141bd8 <col:36, col:41> '<dependent type>' contains-errors lvalue ->boolval
    |   |     `-RecoveryExpr 0x13f141bb8 <col:36> '<dependent type>' contains-errors lvalue
    |   |-BreakStmt 0x13f141c68 <line:25:2>
    |   |-BinaryOperator 0x13f141d48 <line:31:2, col:8> 'double' contains-errors '='
    |   | |-DeclRefExpr 0x13f141cd0 <col:2> 'double' lvalue Var 0x13f128290 'ret' 'double'
    |   | `-RecoveryExpr 0x13f141d28 <col:8> '<dependent type>' contains-errors lvalue
    |   `-BreakStmt 0x13f141d68 <line:32:2>
    `-ReturnStmt 0x13f141e50 <line:34:5, col:15>
      `-ImplicitCastExpr 0x13f141e38 <col:11, col:15> 'int' <FloatingToIntegral>
        `-ImplicitCastExpr 0x13f141e20 <col:11, col:15> 'double' <LValueToRValue>
          `-ParenExpr 0x13f141e00 <col:11, col:15> 'double' lvalue
            `-DeclRefExpr 0x13f141de0 <col:12> 'double' lvalue Var 0x13f128290 'ret' 'double'
