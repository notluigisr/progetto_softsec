`-FunctionDecl 0x13200dd18  line:1:1 referenced passGetEmphasis 'int ()'
  `-CompoundStmt 0x132028990 <line:2:1, line:36:1>
    |-DeclStmt 0x13200dea8 <line:3:3, col:15>
    | `-VarDecl 0x13200de20 <col:3, col:14> col:7 used more 'int' cinit
    |   `-IntegerLiteral 0x13200de88 <col:14> 'int' 1
    |-WhileStmt 0x132028638 <line:6:3, line:28:5>
    | |-ImplicitCastExpr 0x13200df18 <line:6:10> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x13200def8 <col:10> 'int' lvalue Var 0x13200de20 'more' 'int'
    | `-CompoundStmt 0x132028620 <line:7:5, line:28:5>
    |   `-SwitchStmt 0x13200dfc8 <line:8:7, line:25:2>
    |     |-RecoveryExpr 0x13200dfa8 <line:8:15, col:41> 'int' contains-errors
    |     `-CompoundStmt 0x132028588 <line:9:2, line:25:2>
    |       |-CaseStmt 0x13200e020 <line:10:2, line:11:20>
    |       | |-ConstantExpr 0x13200e008 <line:10:7> 'int'
    |       | | `-CharacterLiteral 0x13200dff0 <col:7> 'int' 105
    |       | `-CompoundAssignOperator 0x13200e118 <line:11:4, col:20> 'int ()' contains-errors '|=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    |       |   |-DeclRefExpr 0x13200e048 <col:4> 'int ()' Function 0x13200dd18 'passGetEmphasis' 'int ()'
    |       |   `-RecoveryExpr 0x13200e0f8 <col:20> '<dependent type>' contains-errors lvalue
    |       |-BreakStmt 0x13200e148 <line:12:4>
    |       |-CaseStmt 0x13200e180 <line:13:2, line:14:20>
    |       | |-ConstantExpr 0x13200e168 <line:13:7> 'int'
    |       | | `-CharacterLiteral 0x13200e150 <col:7> 'int' 98
    |       | `-CompoundAssignOperator 0x13200e248 <line:14:4, col:20> 'int ()' contains-errors '|=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    |       |   |-DeclRefExpr 0x13200e1a8 <col:4> 'int ()' Function 0x13200dd18 'passGetEmphasis' 'int ()'
    |       |   `-RecoveryExpr 0x13200e228 <col:20> '<dependent type>' contains-errors lvalue
    |       |-BreakStmt 0x13200e278 <line:15:4>
    |       |-CaseStmt 0x13200e2b0 <line:16:2, line:17:20>
    |       | |-ConstantExpr 0x13200e298 <line:16:7> 'int'
    |       | | `-CharacterLiteral 0x13200e280 <col:7> 'int' 117
    |       | `-CompoundAssignOperator 0x13200e378 <line:17:4, col:20> 'int ()' contains-errors '|=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    |       |   |-DeclRefExpr 0x13200e2d8 <col:4> 'int ()' Function 0x13200dd18 'passGetEmphasis' 'int ()'
    |       |   `-RecoveryExpr 0x13200e358 <col:20> '<dependent type>' contains-errors lvalue
    |       |-BreakStmt 0x13200e3a8 <line:18:4>
    |       |-CaseStmt 0x132028400 <line:19:2, line:20:20>
    |       | |-ConstantExpr 0x13200e3c8 <line:19:7> 'int'
    |       | | `-CharacterLiteral 0x13200e3b0 <col:7> 'int' 99
    |       | `-CompoundAssignOperator 0x1320284c8 <line:20:4, col:20> 'int ()' contains-errors '|=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    |       |   |-DeclRefExpr 0x132028428 <col:4> 'int ()' Function 0x13200dd18 'passGetEmphasis' 'int ()'
    |       |   `-RecoveryExpr 0x1320284a8 <col:20> '<dependent type>' contains-errors lvalue
    |       |-BreakStmt 0x1320284f8 <line:21:4>
    |       |-DefaultStmt 0x132028560 <line:22:2, line:23:11>
    |       | `-BinaryOperator 0x132028540 <col:4, col:11> 'int' '='
    |       |   |-DeclRefExpr 0x132028500 <col:4> 'int' lvalue Var 0x13200de20 'more' 'int'
    |       |   `-IntegerLiteral 0x132028520 <col:11> 'int' 0
    |       `-BreakStmt 0x132028580 <line:24:4>
    |-IfStmt 0x132028940 <line:29:3, line:34:5>
    | |-UnaryOperator 0x1320286d8 <line:29:7, col:8> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x1320286c0 <col:8> 'int (*)()' <FunctionToPointerDecay>
    | |   `-DeclRefExpr 0x1320286a0 <col:8> 'int ()' Function 0x13200dd18 'passGetEmphasis' 'int ()'
    | `-CompoundStmt 0x132028920 <line:30:5, line:34:5>
    |   |-CallExpr 0x1320288c0 <line:31:7, col:38> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x1320287d0 <col:7> 'int ()' Function 0x132028718 'compileError' 'int ()'
    |   | |-RecoveryExpr 0x1320288a0 <col:21> '<dependent type>' contains-errors lvalue
    |   | `-StringLiteral 0x132028850 <col:33> 'char[4]' lvalue "STR"
    |   `-ReturnStmt 0x132028910 <line:33:7, col:14>
    |     `-IntegerLiteral 0x1320288f0 <col:14> 'int' 0
    `-ReturnStmt 0x132028980 <line:35:3, col:10>
      `-IntegerLiteral 0x132028960 <col:10> 'int' 1
