`-FunctionDecl 0x12c928728  line:1:1 _asn1_get_indefinite_length_string 'int (const unsigned char *, unsigned int, int *)'
  |-ParmVarDecl 0x12c928508 <col:37, col:58> col:58 used der 'const unsigned char *'
  |-ParmVarDecl 0x12c928588 <line:2:9, col:18> col:18 used der_len 'unsigned int'
  |-ParmVarDecl 0x12c928638 <col:27, col:32> col:32 used len 'int *'
  `-CompoundStmt 0x12c943390 <line:3:1, line:49:1>
    |-DeclStmt 0x12c928a58 <line:4:3, col:38>
    | |-VarDecl 0x12c928848 <col:3, col:7> col:7 used len2 'int'
    | |-VarDecl 0x12c9288c8 <col:3, col:13> col:13 used len3 'int'
    | |-VarDecl 0x12c928948 <col:3, col:19> col:19 used counter 'int'
    | `-VarDecl 0x12c9289c8 <col:3, col:28> col:28 used indefinite 'int'
    |-DeclStmt 0x12c928af0 <line:5:3, col:20>
    | `-VarDecl 0x12c928a88 <col:3, col:17> col:17 used tag 'unsigned long'
    |-DeclStmt 0x12c928b88 <line:6:3, col:22>
    | `-VarDecl 0x12c928b20 <col:3, col:17> col:17 used class 'unsigned char'
    |-BinaryOperator 0x12c940e20 <line:8:3, col:26> 'int' '='
    | |-DeclRefExpr 0x12c928ba0 <col:3> 'int' lvalue Var 0x12c928948 'counter' 'int'
    | `-BinaryOperator 0x12c940e00 <col:13, col:26> 'int' '='
    |   |-DeclRefExpr 0x12c928bc0 <col:13> 'int' lvalue Var 0x12c9289c8 'indefinite' 'int'
    |   `-IntegerLiteral 0x12c928be0 <col:26> 'int' 0
    |-WhileStmt 0x12c943280 <line:10:3, line:44:5>
    | |-IntegerLiteral 0x12c940e40 <line:10:10> 'int' 1
    | `-CompoundStmt 0x12c943230 <line:11:5, line:44:5>
    |   |-IfStmt 0x12c940fa8 <line:12:7, line:13:9>
    |   | |-BinaryOperator 0x12c940f28 <line:12:11, col:24> 'int' '>='
    |   | | |-ImplicitCastExpr 0x12c940f10 <col:11, col:19> 'unsigned int' <IntegralCast>
    |   | | | `-BinaryOperator 0x12c940eb8 <col:11, col:19> 'int' '+'
    |   | | |   |-ImplicitCastExpr 0x12c940ea0 <col:11> 'int' <LValueToRValue>
    |   | | |   | `-DeclRefExpr 0x12c940e60 <col:11> 'int' lvalue Var 0x12c928948 'counter' 'int'
    |   | | |   `-IntegerLiteral 0x12c940e80 <col:19> 'int' 1
    |   | | `-ImplicitCastExpr 0x12c940ef8 <col:24> 'unsigned int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x12c940ed8 <col:24> 'unsigned int' lvalue ParmVar 0x12c928588 'der_len' 'unsigned int'
    |   | `-ReturnStmt 0x12c940f98 <line:13:2, col:9>
    |   |   `-RecoveryExpr 0x12c940f78 <col:9> '<dependent type>' contains-errors lvalue
    |   |-IfStmt 0x12c9413f0 <line:15:7, line:23:2>
    |   | |-BinaryOperator 0x12c941248 <line:15:11, col:56> 'int' '&&'
    |   | | |-ParenExpr 0x12c9410c8 <col:11, col:29> 'int'
    |   | | | `-BinaryOperator 0x12c9410a8 <col:12, col:28> 'int' '=='
    |   | | |   |-ImplicitCastExpr 0x12c941090 <col:12, col:23> 'int' <IntegralCast>
    |   | | |   | `-ImplicitCastExpr 0x12c941078 <col:12, col:23> 'unsigned char' <LValueToRValue>
    |   | | |   |   `-ArraySubscriptExpr 0x12c941038 <col:12, col:23> 'const unsigned char' lvalue
    |   | | |   |     |-ImplicitCastExpr 0x12c941008 <col:12> 'const unsigned char *' <LValueToRValue>
    |   | | |   |     | `-DeclRefExpr 0x12c940fc8 <col:12> 'const unsigned char *' lvalue ParmVar 0x12c928508 'der' 'const unsigned char *'
    |   | | |   |     `-ImplicitCastExpr 0x12c941020 <col:16> 'int' <LValueToRValue>
    |   | | |   |       `-DeclRefExpr 0x12c940fe8 <col:16> 'int' lvalue Var 0x12c928948 'counter' 'int'
    |   | | |   `-IntegerLiteral 0x12c941058 <col:28> 'int' 0
    |   | | `-ParenExpr 0x12c941228 <col:34, col:56> 'int'
    |   | |   `-BinaryOperator 0x12c941208 <col:35, col:55> 'int' '=='
    |   | |     |-ImplicitCastExpr 0x12c9411f0 <col:35, col:50> 'int' <IntegralCast>
    |   | |     | `-ImplicitCastExpr 0x12c9411d8 <col:35, col:50> 'unsigned char' <LValueToRValue>
    |   | |     |   `-ArraySubscriptExpr 0x12c941198 <col:35, col:50> 'const unsigned char' lvalue
    |   | |     |     |-ImplicitCastExpr 0x12c941180 <col:35> 'const unsigned char *' <LValueToRValue>
    |   | |     |     | `-DeclRefExpr 0x12c9410e8 <col:35> 'const unsigned char *' lvalue ParmVar 0x12c928508 'der' 'const unsigned char *'
    |   | |     |     `-BinaryOperator 0x12c941160 <col:39, col:49> 'int' '+'
    |   | |     |       |-ImplicitCastExpr 0x12c941148 <col:39> 'int' <LValueToRValue>
    |   | |     |       | `-DeclRefExpr 0x12c941108 <col:39> 'int' lvalue Var 0x12c928948 'counter' 'int'
    |   | |     |       `-IntegerLiteral 0x12c941128 <col:49> 'int' 1
    |   | |     `-IntegerLiteral 0x12c9411b8 <col:55> 'int' 0
    |   | `-CompoundStmt 0x12c9413c8 <line:16:2, line:23:2>
    |   |   |-CompoundAssignOperator 0x12c9412a8 <line:17:4, col:15> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |   |   | |-DeclRefExpr 0x12c941268 <col:4> 'int' lvalue Var 0x12c928948 'counter' 'int'
    |   |   | `-IntegerLiteral 0x12c941288 <col:15> 'int' 2
    |   |   |-UnaryOperator 0x12c9412f8 <line:18:4, col:14> 'int' postfix '--'
    |   |   | `-DeclRefExpr 0x12c9412d8 <col:4> 'int' lvalue Var 0x12c9289c8 'indefinite' 'int'
    |   |   `-IfStmt 0x12c941398 <line:19:4, line:22:6> has_else
    |   |     |-BinaryOperator 0x12c941368 <line:19:8, col:22> 'int' '<='
    |   |     | |-ImplicitCastExpr 0x12c941350 <col:8> 'int' <LValueToRValue>
    |   |     | | `-DeclRefExpr 0x12c941310 <col:8> 'int' lvalue Var 0x12c9289c8 'indefinite' 'int'
    |   |     | `-IntegerLiteral 0x12c941330 <col:22> 'int' 0
    |   |     |-BreakStmt 0x12c941388 <line:20:6>
    |   |     `-ContinueStmt 0x12c941390 <line:22:6>
    |   |-IfStmt 0x12c941b10 <line:25:7, line:28:9>
    |   | |-BinaryOperator 0x12c941aa8 <line:25:11, line:27:14> 'int' contains-errors '!='
    |   | | |-CallExpr 0x12c941a40 <line:25:11, line:27:9> 'int'
    |   | | | |-ImplicitCastExpr 0x12c941a28 <line:25:11> 'int (*)()' <FunctionToPointerDecay>
    |   | | | | `-DeclRefExpr 0x12c941520 <col:11> 'int ()' Function 0x12c941468 'asn1_get_tag_der' 'int ()'
    |   | | | |-BinaryOperator 0x12c9419a0 <line:26:5, col:11> 'const unsigned char *' '+'
    |   | | | | |-ImplicitCastExpr 0x12c941970 <col:5> 'const unsigned char *' <LValueToRValue>
    |   | | | | | `-DeclRefExpr 0x12c941540 <col:5> 'const unsigned char *' lvalue ParmVar 0x12c928508 'der' 'const unsigned char *'
    |   | | | | `-ImplicitCastExpr 0x12c941988 <col:11> 'int' <LValueToRValue>
    |   | | | |   `-DeclRefExpr 0x12c941560 <col:11> 'int' lvalue Var 0x12c928948 'counter' 'int'
    |   | | | |-BinaryOperator 0x12c941a08 <col:20, col:30> 'unsigned int' '-'
    |   | | | | |-ImplicitCastExpr 0x12c9419c0 <col:20> 'unsigned int' <LValueToRValue>
    |   | | | | | `-DeclRefExpr 0x12c9415d0 <col:20> 'unsigned int' lvalue ParmVar 0x12c928588 'der_len' 'unsigned int'
    |   | | | | `-ImplicitCastExpr 0x12c9419f0 <col:30> 'unsigned int' <IntegralCast>
    |   | | | |   `-ImplicitCastExpr 0x12c9419d8 <col:30> 'int' <LValueToRValue>
    |   | | | |     `-DeclRefExpr 0x12c9415f0 <col:30> 'int' lvalue Var 0x12c928948 'counter' 'int'
    |   | | | |-UnaryOperator 0x12c9416d0 <col:39, col:40> 'unsigned char *' prefix '&' cannot overflow
    |   | | | | `-DeclRefExpr 0x12c941678 <col:40> 'unsigned char' lvalue Var 0x12c928b20 'class' 'unsigned char'
    |   | | | |-UnaryOperator 0x12c941708 <col:47, col:48> 'int *' prefix '&' cannot overflow
    |   | | | | `-DeclRefExpr 0x12c9416e8 <col:48> 'int' lvalue Var 0x12c928848 'len2' 'int'
    |   | | | `-UnaryOperator 0x12c941770 <line:27:5, col:6> 'unsigned long *' prefix '&' cannot overflow
    |   | | |   `-DeclRefExpr 0x12c941720 <col:6> 'unsigned long' lvalue Var 0x12c928a88 'tag' 'unsigned long'
    |   | | `-RecoveryExpr 0x12c941a88 <col:14> '<dependent type>' contains-errors lvalue
    |   | `-ReturnStmt 0x12c941b00 <line:28:2, col:9>
    |   |   `-RecoveryExpr 0x12c941ae0 <col:9> '<dependent type>' contains-errors lvalue
    |   |-IfStmt 0x12c941c78 <line:29:7, line:30:9>
    |   | |-BinaryOperator 0x12c941c10 <line:29:11, col:28> 'int' '>'
    |   | | |-ImplicitCastExpr 0x12c941bf8 <col:11, col:21> 'unsigned int' <IntegralCast>
    |   | | | `-BinaryOperator 0x12c941ba0 <col:11, col:21> 'int' '+'
    |   | | |   |-ImplicitCastExpr 0x12c941b70 <col:11> 'int' <LValueToRValue>
    |   | | |   | `-DeclRefExpr 0x12c941b30 <col:11> 'int' lvalue Var 0x12c928948 'counter' 'int'
    |   | | |   `-ImplicitCastExpr 0x12c941b88 <col:21> 'int' <LValueToRValue>
    |   | | |     `-DeclRefExpr 0x12c941b50 <col:21> 'int' lvalue Var 0x12c928848 'len2' 'int'
    |   | | `-ImplicitCastExpr 0x12c941be0 <col:28> 'unsigned int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x12c941bc0 <col:28> 'unsigned int' lvalue ParmVar 0x12c928588 'der_len' 'unsigned int'
    |   | `-ReturnStmt 0x12c941c68 <line:30:2, col:9>
    |   |   `-RecoveryExpr 0x12c941c48 <col:9> '<dependent type>' contains-errors lvalue
    |   |-CompoundAssignOperator 0x12c941cf0 <line:31:7, col:18> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |   | |-DeclRefExpr 0x12c941c98 <col:7> 'int' lvalue Var 0x12c928948 'counter' 'int'
    |   | `-ImplicitCastExpr 0x12c941cd8 <col:18> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x12c941cb8 <col:18> 'int' lvalue Var 0x12c928848 'len2' 'int'
    |   |-BinaryOperator 0x12c942e98 <line:32:7, col:74> 'int' '='
    |   | |-DeclRefExpr 0x12c941d20 <col:7> 'int' lvalue Var 0x12c928848 'len2' 'int'
    |   | `-CallExpr 0x12c942e60 <col:14, col:74> 'int'
    |   |   |-ImplicitCastExpr 0x12c942e48 <col:14> 'int (*)()' <FunctionToPointerDecay>
    |   |   | `-DeclRefExpr 0x12c942cb8 <col:14> 'int ()' Function 0x12c942c00 'asn1_get_length_der' 'int ()'
    |   |   |-BinaryOperator 0x12c942d48 <col:35, col:41> 'const unsigned char *' '+'
    |   |   | |-ImplicitCastExpr 0x12c942d18 <col:35> 'const unsigned char *' <LValueToRValue>
    |   |   | | `-DeclRefExpr 0x12c942cd8 <col:35> 'const unsigned char *' lvalue ParmVar 0x12c928508 'der' 'const unsigned char *'
    |   |   | `-ImplicitCastExpr 0x12c942d30 <col:41> 'int' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x12c942cf8 <col:41> 'int' lvalue Var 0x12c928948 'counter' 'int'
    |   |   |-BinaryOperator 0x12c942df0 <col:50, col:60> 'unsigned int' '-'
    |   |   | |-ImplicitCastExpr 0x12c942da8 <col:50> 'unsigned int' <LValueToRValue>
    |   |   | | `-DeclRefExpr 0x12c942d68 <col:50> 'unsigned int' lvalue ParmVar 0x12c928588 'der_len' 'unsigned int'
    |   |   | `-ImplicitCastExpr 0x12c942dd8 <col:60> 'unsigned int' <IntegralCast>
    |   |   |   `-ImplicitCastExpr 0x12c942dc0 <col:60> 'int' <LValueToRValue>
    |   |   |     `-DeclRefExpr 0x12c942d88 <col:60> 'int' lvalue Var 0x12c928948 'counter' 'int'
    |   |   `-UnaryOperator 0x12c942e30 <col:69, col:70> 'int *' prefix '&' cannot overflow
    |   |     `-DeclRefExpr 0x12c942e10 <col:70> 'int' lvalue Var 0x12c9288c8 'len3' 'int'
    |   |-IfStmt 0x12c942f90 <line:33:7, line:34:9>
    |   | |-BinaryOperator 0x12c942f28 <line:33:11, col:19> 'int' '<'
    |   | | |-ImplicitCastExpr 0x12c942f10 <col:11> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x12c942eb8 <col:11> 'int' lvalue Var 0x12c928848 'len2' 'int'
    |   | | `-UnaryOperator 0x12c942ef8 <col:18, col:19> 'int' prefix '-'
    |   | |   `-IntegerLiteral 0x12c942ed8 <col:19> 'int' 1
    |   | `-ReturnStmt 0x12c942f80 <line:34:2, col:9>
    |   |   `-RecoveryExpr 0x12c942f60 <col:9> '<dependent type>' contains-errors lvalue
    |   `-IfStmt 0x12c943200 <line:35:7, line:43:2> has_else
    |     |-BinaryOperator 0x12c943020 <line:35:11, col:20> 'int' '=='
    |     | |-ImplicitCastExpr 0x12c943008 <col:11> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x12c942fb0 <col:11> 'int' lvalue Var 0x12c928848 'len2' 'int'
    |     | `-UnaryOperator 0x12c942ff0 <col:19, col:20> 'int' prefix '-'
    |     |   `-IntegerLiteral 0x12c942fd0 <col:20> 'int' 1
    |     |-CompoundStmt 0x12c9430e8 <line:36:2, line:39:2>
    |     | |-UnaryOperator 0x12c943060 <line:37:4, col:14> 'int' postfix '++'
    |     | | `-DeclRefExpr 0x12c943040 <col:4> 'int' lvalue Var 0x12c9289c8 'indefinite' 'int'
    |     | `-CompoundAssignOperator 0x12c9430b8 <line:38:4, col:15> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |     |   |-DeclRefExpr 0x12c943078 <col:4> 'int' lvalue Var 0x12c928948 'counter' 'int'
    |     |   `-IntegerLiteral 0x12c943098 <col:15> 'int' 1
    |     `-CompoundStmt 0x12c9431e8 <line:41:2, line:43:2>
    |       `-CompoundAssignOperator 0x12c9431b8 <line:42:4, col:22> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |         |-DeclRefExpr 0x12c943108 <col:4> 'int' lvalue Var 0x12c928948 'counter' 'int'
    |         `-BinaryOperator 0x12c943198 <col:15, col:22> 'int' '+'
    |           |-ImplicitCastExpr 0x12c943168 <col:15> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x12c943128 <col:15> 'int' lvalue Var 0x12c928848 'len2' 'int'
    |           `-ImplicitCastExpr 0x12c943180 <col:22> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x12c943148 <col:22> 'int' lvalue Var 0x12c9288c8 'len3' 'int'
    |-BinaryOperator 0x12c943328 <line:46:3, col:10> 'int' '='
    | |-UnaryOperator 0x12c9432d8 <col:3, col:4> 'int' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x12c9432c0 <col:4> 'int *' <LValueToRValue>
    | |   `-DeclRefExpr 0x12c9432a0 <col:4> 'int *' lvalue ParmVar 0x12c928638 'len' 'int *'
    | `-ImplicitCastExpr 0x12c943310 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x12c9432f0 <col:10> 'int' lvalue Var 0x12c928948 'counter' 'int'
    `-ReturnStmt 0x12c943380 <line:47:3, col:10>
      `-RecoveryExpr 0x12c943360 <col:10> '<dependent type>' contains-errors lvalue
