`-FunctionDecl 0x14980de98  line:1:12 preg_get_backref 'int (char **, int *)' static
  |-ParmVarDecl 0x14980dd08 <col:29, col:36> col:36 used str 'char **'
  |-ParmVarDecl 0x14980ddb8 <col:41, col:46> col:46 used backref 'int *'
  `-CompoundStmt 0x149827300 <line:2:1, line:35:1>
    |-DeclStmt 0x14980e048 <line:3:2, col:28>
    | `-VarDecl 0x14980dfa8 <col:2, col:27> col:16 used in_brace 'char' register cinit
    |   `-ImplicitCastExpr 0x14980e030 <col:27> 'char' <IntegralCast>
    |     `-IntegerLiteral 0x14980e010 <col:27> 'int' 0
    |-DeclStmt 0x14980e148 <line:4:2, col:28>
    | `-VarDecl 0x14980e078 <col:2, col:25> col:17 used walk 'char *' register cinit
    |   `-ImplicitCastExpr 0x14980e130 <col:24, col:25> 'char *' <LValueToRValue>
    |     `-UnaryOperator 0x14980e118 <col:24, col:25> 'char *' lvalue prefix '*' cannot overflow
    |       `-ImplicitCastExpr 0x14980e100 <col:25> 'char **' <LValueToRValue>
    |         `-DeclRefExpr 0x14980e0e0 <col:25> 'char **' lvalue ParmVar 0x14980dd08 'str' 'char **'
    |-IfStmt 0x14980e278 <line:6:2, line:7:10>
    | |-BinaryOperator 0x14980e228 <line:6:6, col:17> 'int' '=='
    | | |-ImplicitCastExpr 0x14980e210 <col:6, col:12> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x14980e1f8 <col:6, col:12> 'char' <LValueToRValue>
    | | |   `-ArraySubscriptExpr 0x14980e1b8 <col:6, col:12> 'char' lvalue
    | | |     |-ImplicitCastExpr 0x14980e1a0 <col:6> 'char *' <LValueToRValue>
    | | |     | `-DeclRefExpr 0x14980e160 <col:6> 'char *' lvalue Var 0x14980e078 'walk' 'char *'
    | | |     `-IntegerLiteral 0x14980e180 <col:11> 'int' 1
    | | `-IntegerLiteral 0x14980e1d8 <col:17> 'int' 0
    | `-ReturnStmt 0x14980e268 <line:7:3, col:10>
    |   `-IntegerLiteral 0x14980e248 <col:10> 'int' 0
    |-IfStmt 0x149826728 <line:9:2, line:12:2>
    | |-BinaryOperator 0x149826638 <line:9:6, col:33> 'int' '&&'
    | | |-BinaryOperator 0x14980e330 <col:6, col:15> 'int' '=='
    | | | |-ImplicitCastExpr 0x14980e318 <col:6, col:7> 'int' <IntegralCast>
    | | | | `-ImplicitCastExpr 0x14980e300 <col:6, col:7> 'char' <LValueToRValue>
    | | | |   `-UnaryOperator 0x14980e2d0 <col:6, col:7> 'char' lvalue prefix '*' cannot overflow
    | | | |     `-ImplicitCastExpr 0x14980e2b8 <col:7> 'char *' <LValueToRValue>
    | | | |       `-DeclRefExpr 0x14980e298 <col:7> 'char *' lvalue Var 0x14980e078 'walk' 'char *'
    | | | `-CharacterLiteral 0x14980e2e8 <col:15> 'int' 36
    | | `-BinaryOperator 0x149826618 <col:22, col:33> 'int' '=='
    | |   |-ImplicitCastExpr 0x149826600 <col:22, col:28> 'int' <IntegralCast>
    | |   | `-ImplicitCastExpr 0x14980e3e0 <col:22, col:28> 'char' <LValueToRValue>
    | |   |   `-ArraySubscriptExpr 0x14980e3a8 <col:22, col:28> 'char' lvalue
    | |   |     |-ImplicitCastExpr 0x14980e390 <col:22> 'char *' <LValueToRValue>
    | |   |     | `-DeclRefExpr 0x14980e350 <col:22> 'char *' lvalue Var 0x14980e078 'walk' 'char *'
    | |   |     `-IntegerLiteral 0x14980e370 <col:27> 'int' 1
    | |   `-CharacterLiteral 0x14980e3c8 <col:33> 'int' 123
    | `-CompoundStmt 0x149826708 <col:38, line:12:2>
    |   |-BinaryOperator 0x1498266b0 <line:10:3, col:14> 'char' '='
    |   | |-DeclRefExpr 0x149826658 <col:3> 'char' lvalue Var 0x14980dfa8 'in_brace' 'char'
    |   | `-ImplicitCastExpr 0x149826698 <col:14> 'char' <IntegralCast>
    |   |   `-IntegerLiteral 0x149826678 <col:14> 'int' 1
    |   `-UnaryOperator 0x1498266f0 <line:11:3, col:7> 'char *' postfix '++'
    |     `-DeclRefExpr 0x1498266d0 <col:3> 'char *' lvalue Var 0x14980e078 'walk' 'char *'
    |-UnaryOperator 0x149826768 <line:13:2, col:6> 'char *' postfix '++'
    | `-DeclRefExpr 0x149826748 <col:2> 'char *' lvalue Var 0x14980e078 'walk' 'char *'
    |-IfStmt 0x149826ac0 <line:15:2, line:19:10> has_else
    | |-BinaryOperator 0x1498268f0 <line:15:6, col:31> 'int' '&&'
    | | |-BinaryOperator 0x149826818 <col:6, col:15> 'int' '>='
    | | | |-ImplicitCastExpr 0x149826800 <col:6, col:7> 'int' <IntegralCast>
    | | | | `-ImplicitCastExpr 0x1498267e8 <col:6, col:7> 'char' <LValueToRValue>
    | | | |   `-UnaryOperator 0x1498267b8 <col:6, col:7> 'char' lvalue prefix '*' cannot overflow
    | | | |     `-ImplicitCastExpr 0x1498267a0 <col:7> 'char *' <LValueToRValue>
    | | | |       `-DeclRefExpr 0x149826780 <col:7> 'char *' lvalue Var 0x14980e078 'walk' 'char *'
    | | | `-CharacterLiteral 0x1498267d0 <col:15> 'int' 48
    | | `-BinaryOperator 0x1498268d0 <col:22, col:31> 'int' '<='
    | |   |-ImplicitCastExpr 0x1498268b8 <col:22, col:23> 'int' <IntegralCast>
    | |   | `-ImplicitCastExpr 0x1498268a0 <col:22, col:23> 'char' <LValueToRValue>
    | |   |   `-UnaryOperator 0x149826870 <col:22, col:23> 'char' lvalue prefix '*' cannot overflow
    | |   |     `-ImplicitCastExpr 0x149826858 <col:23> 'char *' <LValueToRValue>
    | |   |       `-DeclRefExpr 0x149826838 <col:23> 'char *' lvalue Var 0x14980e078 'walk' 'char *'
    | |   `-CharacterLiteral 0x149826888 <col:31> 'int' 57
    | |-CompoundStmt 0x149826a70 <col:36, line:18:2>
    | | |-BinaryOperator 0x149826a18 <line:16:3, col:22> 'int' '='
    | | | |-UnaryOperator 0x149826948 <col:3, col:4> 'int' lvalue prefix '*' cannot overflow
    | | | | `-ImplicitCastExpr 0x149826930 <col:4> 'int *' <LValueToRValue>
    | | | |   `-DeclRefExpr 0x149826910 <col:4> 'int *' lvalue ParmVar 0x14980ddb8 'backref' 'int *'
    | | | `-BinaryOperator 0x1498269f8 <col:14, col:22> 'int' '-'
    | | |   |-ImplicitCastExpr 0x1498269e0 <col:14, col:15> 'int' <IntegralCast>
    | | |   | `-ImplicitCastExpr 0x1498269c8 <col:14, col:15> 'char' <LValueToRValue>
    | | |   |   `-UnaryOperator 0x149826998 <col:14, col:15> 'char' lvalue prefix '*' cannot overflow
    | | |   |     `-ImplicitCastExpr 0x149826980 <col:15> 'char *' <LValueToRValue>
    | | |   |       `-DeclRefExpr 0x149826960 <col:15> 'char *' lvalue Var 0x14980e078 'walk' 'char *'
    | | |   `-CharacterLiteral 0x1498269b0 <col:22> 'int' 48
    | | `-UnaryOperator 0x149826a58 <line:17:3, col:7> 'char *' postfix '++'
    | |   `-DeclRefExpr 0x149826a38 <col:3> 'char *' lvalue Var 0x14980e078 'walk' 'char *'
    | `-ReturnStmt 0x149826ab0 <line:19:3, col:10>
    |   `-IntegerLiteral 0x149826a90 <col:10> 'int' 0
    |-IfStmt 0x149826f68 <line:21:2, line:24:2>
    | |-BinaryOperator 0x149826d00 <line:21:6, col:40> 'int' '&&'
    | | |-BinaryOperator 0x149826c28 <col:6, col:24> 'int' '&&'
    | | | |-ImplicitCastExpr 0x149826c10 <col:6, col:7> 'int' <IntegralCast>
    | | | | `-ImplicitCastExpr 0x149826bf8 <col:6, col:7> 'char' <LValueToRValue>
    | | | |   `-UnaryOperator 0x149826b28 <col:6, col:7> 'char' lvalue prefix '*' cannot overflow
    | | | |     `-ImplicitCastExpr 0x149826b10 <col:7> 'char *' <LValueToRValue>
    | | | |       `-DeclRefExpr 0x149826af0 <col:7> 'char *' lvalue Var 0x14980e078 'walk' 'char *'
    | | | `-BinaryOperator 0x149826bd8 <col:15, col:24> 'int' '>='
    | | |   |-ImplicitCastExpr 0x149826bc0 <col:15, col:16> 'int' <IntegralCast>
    | | |   | `-ImplicitCastExpr 0x149826ba8 <col:15, col:16> 'char' <LValueToRValue>
    | | |   |   `-UnaryOperator 0x149826b78 <col:15, col:16> 'char' lvalue prefix '*' cannot overflow
    | | |   |     `-ImplicitCastExpr 0x149826b60 <col:16> 'char *' <LValueToRValue>
    | | |   |       `-DeclRefExpr 0x149826b40 <col:16> 'char *' lvalue Var 0x14980e078 'walk' 'char *'
    | | |   `-CharacterLiteral 0x149826b90 <col:24> 'int' 48
    | | `-BinaryOperator 0x149826ce0 <col:31, col:40> 'int' '<='
    | |   |-ImplicitCastExpr 0x149826cc8 <col:31, col:32> 'int' <IntegralCast>
    | |   | `-ImplicitCastExpr 0x149826cb0 <col:31, col:32> 'char' <LValueToRValue>
    | |   |   `-UnaryOperator 0x149826c80 <col:31, col:32> 'char' lvalue prefix '*' cannot overflow
    | |   |     `-ImplicitCastExpr 0x149826c68 <col:32> 'char *' <LValueToRValue>
    | |   |       `-DeclRefExpr 0x149826c48 <col:32> 'char *' lvalue Var 0x14980e078 'walk' 'char *'
    | |   `-CharacterLiteral 0x149826c98 <col:40> 'int' 57
    | `-CompoundStmt 0x149826f48 <col:45, line:24:2>
    |   |-BinaryOperator 0x149826ef0 <line:22:3, col:38> 'int' '='
    |   | |-UnaryOperator 0x149826d58 <col:3, col:4> 'int' lvalue prefix '*' cannot overflow
    |   | | `-ImplicitCastExpr 0x149826d40 <col:4> 'int *' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x149826d20 <col:4> 'int *' lvalue ParmVar 0x14980ddb8 'backref' 'int *'
    |   | `-BinaryOperator 0x149826ed0 <col:14, col:38> 'int' '-'
    |   |   |-BinaryOperator 0x149826e98 <col:14, col:31> 'int' '+'
    |   |   | |-BinaryOperator 0x149826df8 <col:14, col:25> 'int' '*'
    |   |   | | |-ImplicitCastExpr 0x149826de0 <col:14, col:15> 'int' <LValueToRValue>
    |   |   | | | `-UnaryOperator 0x149826da8 <col:14, col:15> 'int' lvalue prefix '*' cannot overflow
    |   |   | | |   `-ImplicitCastExpr 0x149826d90 <col:15> 'int *' <LValueToRValue>
    |   |   | | |     `-DeclRefExpr 0x149826d70 <col:15> 'int *' lvalue ParmVar 0x14980ddb8 'backref' 'int *'
    |   |   | | `-IntegerLiteral 0x149826dc0 <col:25> 'int' 10
    |   |   | `-ImplicitCastExpr 0x149826e80 <col:30, col:31> 'int' <IntegralCast>
    |   |   |   `-ImplicitCastExpr 0x149826e68 <col:30, col:31> 'char' <LValueToRValue>
    |   |   |     `-UnaryOperator 0x149826e50 <col:30, col:31> 'char' lvalue prefix '*' cannot overflow
    |   |   |       `-ImplicitCastExpr 0x149826e38 <col:31> 'char *' <LValueToRValue>
    |   |   |         `-DeclRefExpr 0x149826e18 <col:31> 'char *' lvalue Var 0x14980e078 'walk' 'char *'
    |   |   `-CharacterLiteral 0x149826eb8 <col:38> 'int' 48
    |   `-UnaryOperator 0x149826f30 <line:23:3, col:7> 'char *' postfix '++'
    |     `-DeclRefExpr 0x149826f10 <col:3> 'char *' lvalue Var 0x14980e078 'walk' 'char *'
    |-IfStmt 0x149827208 <line:26:2, line:31:2>
    | |-ImplicitCastExpr 0x149826fa8 <line:26:6> 'char' <LValueToRValue>
    | | `-DeclRefExpr 0x149826f88 <col:6> 'char' lvalue Var 0x14980dfa8 'in_brace' 'char'
    | `-CompoundStmt 0x1498271f0 <col:16, line:31:2>
    |   `-IfStmt 0x1498271c0 <line:27:3, line:30:8> has_else
    |     |-BinaryOperator 0x149827138 <line:27:7, col:30> 'int' '||'
    |     | |-BinaryOperator 0x149827060 <col:7, col:16> 'int' '=='
    |     | | |-ImplicitCastExpr 0x149827048 <col:7, col:8> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x149827030 <col:7, col:8> 'char' <LValueToRValue>
    |     | | |   `-UnaryOperator 0x149826ff8 <col:7, col:8> 'char' lvalue prefix '*' cannot overflow
    |     | | |     `-ImplicitCastExpr 0x149826fe0 <col:8> 'char *' <LValueToRValue>
    |     | | |       `-DeclRefExpr 0x149826fc0 <col:8> 'char *' lvalue Var 0x14980e078 'walk' 'char *'
    |     | | `-IntegerLiteral 0x149827010 <col:16> 'int' 0
    |     | `-BinaryOperator 0x149827118 <col:21, col:30> 'int' '!='
    |     |   |-ImplicitCastExpr 0x149827100 <col:21, col:22> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x1498270e8 <col:21, col:22> 'char' <LValueToRValue>
    |     |   |   `-UnaryOperator 0x1498270b8 <col:21, col:22> 'char' lvalue prefix '*' cannot overflow
    |     |   |     `-ImplicitCastExpr 0x1498270a0 <col:22> 'char *' <LValueToRValue>
    |     |   |       `-DeclRefExpr 0x149827080 <col:22> 'char *' lvalue Var 0x14980e078 'walk' 'char *'
    |     |   `-CharacterLiteral 0x1498270d0 <col:30> 'int' 125
    |     |-ReturnStmt 0x149827178 <line:28:4, col:11>
    |     | `-IntegerLiteral 0x149827158 <col:11> 'int' 0
    |     `-UnaryOperator 0x1498271a8 <line:30:4, col:8> 'char *' postfix '++'
    |       `-DeclRefExpr 0x149827188 <col:4> 'char *' lvalue Var 0x14980e078 'walk' 'char *'
    |-BinaryOperator 0x1498272b0 <line:33:2, col:9> 'char *' '='
    | |-UnaryOperator 0x149827260 <col:2, col:3> 'char *' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x149827248 <col:3> 'char **' <LValueToRValue>
    | |   `-DeclRefExpr 0x149827228 <col:3> 'char **' lvalue ParmVar 0x14980dd08 'str' 'char **'
    | `-ImplicitCastExpr 0x149827298 <col:9> 'char *' <LValueToRValue>
    |   `-DeclRefExpr 0x149827278 <col:9> 'char *' lvalue Var 0x14980e078 'walk' 'char *'
    `-ReturnStmt 0x1498272f0 <line:34:2, col:9>
      `-IntegerLiteral 0x1498272d0 <col:9> 'int' 1
