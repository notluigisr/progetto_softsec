`-FunctionDecl 0x14b128658  line:1:1 invalid proto_tree_add_item_ret_varint 'int (int *, int, int *, const int, int, const int, int *, int *)'
  |-ParmVarDecl 0x14b128128 <col:32, col:44> col:44 invalid tree 'int *'
  |-ParmVarDecl 0x14b1281a8 <col:50, col:54> col:54 used hfindex 'int'
  |-ParmVarDecl 0x14b128228 <col:63, col:73> col:73 invalid tvb 'int *'
  |-ParmVarDecl 0x14b1282a8 <line:2:5, col:16> col:16 used start 'const int'
  |-ParmVarDecl 0x14b128328 <col:23, col:28> col:28 used length 'int'
  |-ParmVarDecl 0x14b1283a8 <col:36, col:48> col:48 invalid encoding 'const int'
  |-ParmVarDecl 0x14b128428 <col:58, col:67> col:67 invalid retval 'int *'
  |-ParmVarDecl 0x14b1284a8 <col:75, col:81> col:81 used lenretval 'int *'
  `-CompoundStmt 0x14b143540 <line:3:1, line:56:1>
    |-CallExpr 0x14b141be0 <line:8:2, col:45> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x14b141a80 <col:2> 'int ()' Function 0x14b1419c8 'DISSECTOR_ASSERT_HINT' 'int ()'
    | |-BinaryOperator 0x14b141bc0 <col:24, col:34> 'int' contains-errors '!='
    | | |-RecoveryExpr 0x14b141b80 <col:24> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x14b141ba0 <col:34> '<dependent type>' contains-errors lvalue
    | `-StringLiteral 0x14b141b30 <col:40> 'char[4]' lvalue "STR"
    |-IfStmt 0x14b142000 <line:10:2, line:13:2>
    | |-RecoveryExpr 0x14b141eb0 <line:10:6, col:62> '_Bool' contains-errors
    | `-CompoundStmt 0x14b141ff0 <col:65, line:13:2>
    |-IfStmt 0x14b142170 <line:17:2, line:19:10>
    | |-BinaryOperator 0x14b142078 <line:17:6, col:16> 'int' '=='
    | | |-ImplicitCastExpr 0x14b142060 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14b142020 <col:6> 'int' lvalue ParmVar 0x14b128328 'length' 'int'
    | | `-IntegerLiteral 0x14b142040 <col:16> 'int' 0
    | `-CallExpr 0x14b142110 <line:18:3, line:19:10> 'int'
    |   |-ImplicitCastExpr 0x14b1420f8 <line:18:3> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x14b142098 <col:3> 'int ()' Function 0x14b141ef8 'REPORT_DISSECTOR_BUG' 'int ()'
    |   |-ImplicitCastExpr 0x14b142140 <col:24> 'char *' <ArrayToPointerDecay>
    |   | `-StringLiteral 0x14b1420b8 <col:24> 'char[4]' lvalue "STR"
    |   `-ImplicitCastExpr 0x14b142158 <line:19:4> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x14b1420d8 <col:4> 'int' lvalue ParmVar 0x14b128328 'length' 'int'
    |-IfStmt 0x14b142280 <line:21:2, line:23:2>
    | |-RecoveryExpr 0x14b1421b0 <line:21:6, col:17> '_Bool' contains-errors
    | `-CompoundStmt 0x14b142268 <col:29, line:23:2>
    |   `-CallExpr 0x14b142228 <line:22:3, col:29> 'int'
    |     |-ImplicitCastExpr 0x14b142210 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x14b1421d0 <col:3> 'int ()' Function 0x14b141ef8 'REPORT_DISSECTOR_BUG' 'int ()'
    |     `-ImplicitCastExpr 0x14b142250 <col:24> 'char *' <ArrayToPointerDecay>
    |       `-StringLiteral 0x14b1421f0 <col:24> 'char[4]' lvalue "STR"
    |-IfStmt 0x14b142768 <line:27:2, line:35:2>
    | |-RecoveryExpr 0x14b1424f0 <line:27:6> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x14b142750 <col:14, line:35:2>
    |   `-IfStmt 0x14b142730 <line:29:3, line:34:3>
    |     |-RecoveryExpr 0x14b142560 <line:29:7, col:15> '_Bool' contains-errors
    |     `-CompoundStmt 0x14b142720 <col:24, line:34:3>
    |-IfStmt 0x14b142e88 <line:37:2, line:39:2>
    | |-ImplicitCastExpr 0x14b1427a8 <line:37:6> 'int *' <LValueToRValue>
    | | `-DeclRefExpr 0x14b142788 <col:6> 'int *' lvalue ParmVar 0x14b1284a8 'lenretval' 'int *'
    | `-CompoundStmt 0x14b142e70 <col:17, line:39:2>
    |   `-BinaryOperator 0x14b142e50 <line:38:3, col:16> 'int' '='
    |     |-UnaryOperator 0x14b142e00 <col:3, col:4> 'int' lvalue prefix '*' cannot overflow
    |     | `-ImplicitCastExpr 0x14b1427e0 <col:4> 'int *' <LValueToRValue>
    |     |   `-DeclRefExpr 0x14b1427c0 <col:4> 'int *' lvalue ParmVar 0x14b1284a8 'lenretval' 'int *'
    |     `-ImplicitCastExpr 0x14b142e38 <col:16> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x14b142e18 <col:16> 'int' lvalue ParmVar 0x14b128328 'length' 'int'
    |-CallExpr 0x14b142fc8 <line:41:2, col:26> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x14b142f88 <col:2> 'int ()' Function 0x14b142ed0 'CHECK_FOR_NULL_TREE' 'int ()'
    | `-RecoveryExpr 0x14b142fa8 <col:22> '<dependent type>' contains-errors lvalue
    `-IfStmt 0x14b143400 <line:50:2, line:52:2>
      |-RecoveryExpr 0x14b1433d0 <line:50:6, col:55> '_Bool' contains-errors
      `-CompoundStmt 0x14b1433f0 <col:58, line:52:2>
