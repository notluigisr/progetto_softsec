`-FunctionDecl 0x13a00df18  line:1:1 invalid get_compflags 'int (int *, char *, char *)'
  |-ParmVarDecl 0x13a00dd28 <line:2:5, col:16> col:16 invalid affile 'int *'
  |-ParmVarDecl 0x13a00dda8 <line:3:5, col:13> col:13 used afflist 'char *'
  |-ParmVarDecl 0x13a00de28 <line:4:5, col:13> col:13 used store_afflist 'char *'
  `-CompoundStmt 0x13a029250 <line:5:1, line:28:1>
    |-DeclStmt 0x13a00e058 <line:6:5, col:14>
    | `-VarDecl 0x13a00dff0 <col:5, col:13> col:13 used p 'char *'
    |-DeclStmt 0x13a00e0f0 <line:7:5, col:18>
    | `-VarDecl 0x13a00e088 <col:5, col:13> col:13 used prevp 'char *'
    |-DeclStmt 0x13a00e1a8 <line:8:5, col:17>
    | `-VarDecl 0x13a00e120 <col:5, col:16> col:10 used cnt 'int' cinit
    |   `-IntegerLiteral 0x13a00e188 <col:16> 'int' 0
    |-DeclStmt 0x13a00e250 <line:9:5, col:27>
    | `-VarDecl 0x13a00e1e8 <col:5, col:12> col:12 invalid key 'char'
    `-ForStmt 0x13a028778 <line:12:5, line:25:5>
      |-BinaryOperator 0x13a00e2d8 <line:12:10, col:14> 'char *' '='
      | |-DeclRefExpr 0x13a00e280 <col:10> 'char *' lvalue Var 0x13a00dff0 'p' 'char *'
      | `-ImplicitCastExpr 0x13a00e2c0 <col:14> 'char *' <LValueToRValue>
      |   `-DeclRefExpr 0x13a00e2a0 <col:14> 'char *' lvalue ParmVar 0x13a00dda8 'afflist' 'char *'
      |-<<<NULL>>>
      |-BinaryOperator 0x13a027800 <col:23, col:29> 'int' contains-errors '!='
      | |-UnaryOperator 0x13a00e3c8 <col:23, col:24> 'char' lvalue prefix '*' cannot overflow
      | | `-ImplicitCastExpr 0x13a00e3b0 <col:24> 'char *' <LValueToRValue>
      | |   `-DeclRefExpr 0x13a00e2f8 <col:24> 'char *' lvalue Var 0x13a00dff0 'p' 'char *'
      | `-RecoveryExpr 0x13a00e3e0 <col:29> '<dependent type>' contains-errors lvalue
      |-<<<NULL>>>
      `-CompoundStmt 0x13a028750 <line:13:5, line:25:5>
        |-BinaryOperator 0x13a027878 <line:14:2, col:10> 'char *' '='
        | |-DeclRefExpr 0x13a027820 <col:2> 'char *' lvalue Var 0x13a00e088 'prevp' 'char *'
        | `-ImplicitCastExpr 0x13a027860 <col:10> 'char *' <LValueToRValue>
        |   `-DeclRefExpr 0x13a027840 <col:10> 'char *' lvalue Var 0x13a00dff0 'p' 'char *'
        |-IfStmt 0x13a028480 <line:15:2, line:22:2>
        | |-BinaryOperator 0x13a027b38 <line:15:6, col:46> 'int' contains-errors '!='
        | | |-CallExpr 0x13a027ae8 <col:6, col:41> '<dependent type>' contains-errors
        | | | |-DeclRefExpr 0x13a0279f0 <col:6> 'int ()' Function 0x13a027938 'get_affitem' 'int ()'
        | | | |-CXXDependentScopeMemberExpr 0x13a027a30 <col:18, col:26> '<dependent type>' contains-errors lvalue ->af_flagtype
        | | | | `-RecoveryExpr 0x13a027a10 <col:18> '<dependent type>' contains-errors lvalue
        | | | `-UnaryOperator 0x13a027ad0 <col:39, col:40> 'char **' prefix '&' cannot overflow
        | | |   `-DeclRefExpr 0x13a027a78 <col:40> 'char *' lvalue Var 0x13a00dff0 'p' 'char *'
        | | `-IntegerLiteral 0x13a027b18 <col:46> 'int' 0
        | `-CompoundStmt 0x13a028460 <line:16:2, line:22:2>
        |   |-CallExpr 0x13a027d28 <line:18:6, col:39> '<dependent type>' contains-errors
        |   | |-DeclRefExpr 0x13a027c38 <col:6> 'int ()' Function 0x13a027b80 'vim_strncpy' 'int ()'
        |   | |-RecoveryExpr 0x13a027c58 <col:18> '<dependent type>' contains-errors lvalue
        |   | |-DeclRefExpr 0x13a027c78 <col:23> 'char *' lvalue Var 0x13a00e088 'prevp' 'char *'
        |   | `-BinaryOperator 0x13a027d08 <col:30, col:34> 'long' '-'
        |   |   |-ImplicitCastExpr 0x13a027cd8 <col:30> 'char *' <LValueToRValue>
        |   |   | `-DeclRefExpr 0x13a027c98 <col:30> 'char *' lvalue Var 0x13a00dff0 'p' 'char *'
        |   |   `-ImplicitCastExpr 0x13a027cf0 <col:34> 'char *' <LValueToRValue>
        |   |     `-DeclRefExpr 0x13a027cb8 <col:34> 'char *' lvalue Var 0x13a00e088 'prevp' 'char *'
        |   `-IfStmt 0x13a028440 <line:20:6, line:21:37>
        |     |-UnaryOperator 0x13a0280d0 <line:20:10, col:28> '<dependent type>' contains-errors prefix '!' cannot overflow
        |     | `-CallExpr 0x13a0280a8 <col:11, col:28> '<dependent type>' contains-errors
        |     |   |-DeclRefExpr 0x13a028010 <col:11> 'int ()' Function 0x13a027f58 'HASHITEM_EMPTY' 'int ()'
        |     |   `-RecoveryExpr 0x13a028088 <col:26> '<dependent type>' contains-errors lvalue
        |     `-BinaryOperator 0x13a028420 <line:21:3, col:37> 'char' contains-errors '='
        |       |-ArraySubscriptExpr 0x13a028370 <col:3, col:22> 'char' lvalue
        |       | |-ImplicitCastExpr 0x13a028358 <col:3> 'char *' <LValueToRValue>
        |       | | `-DeclRefExpr 0x13a0280e8 <col:3> 'char *' lvalue ParmVar 0x13a00de28 'store_afflist' 'char *'
        |       | `-UnaryOperator 0x13a028128 <col:17, col:20> 'int' postfix '++'
        |       |   `-DeclRefExpr 0x13a028108 <col:17> 'int' lvalue Var 0x13a00e120 'cnt' 'int'
        |       `-CXXDependentScopeMemberExpr 0x13a0283d8 <col:26, col:37> '<dependent type>' contains-errors lvalue ->ci_newID
        |         `-CallExpr 0x13a0283b0 <col:26, col:34> '<dependent type>' contains-errors
        |           |-DeclRefExpr 0x13a028258 <col:26> 'int ()' Function 0x13a0281a0 'HI2CI' 'int ()'
        |           `-RecoveryExpr 0x13a028390 <col:32> '<dependent type>' contains-errors lvalue
        `-IfStmt 0x13a028730 <line:23:2, line:24:8>
          |-BinaryOperator 0x13a0286d8 <line:23:6, col:46> 'int' contains-errors '&&'
          | |-BinaryOperator 0x13a028638 <col:6, col:29> 'int' contains-errors '=='
          | | |-CXXDependentScopeMemberExpr 0x13a0284c0 <col:6, col:14> '<dependent type>' contains-errors lvalue ->af_flagtype
          | | | `-RecoveryExpr 0x13a0284a0 <col:6> '<dependent type>' contains-errors lvalue
          | | `-RecoveryExpr 0x13a028618 <col:29> '<dependent type>' contains-errors lvalue
          | `-BinaryOperator 0x13a0286b8 <col:40, col:46> 'int' '=='
          |   |-ImplicitCastExpr 0x13a0286a0 <col:40, col:41> 'int' <IntegralCast>
          |   | `-ImplicitCastExpr 0x13a028688 <col:40, col:41> 'char' <LValueToRValue>
          |   |   `-UnaryOperator 0x13a028670 <col:40, col:41> 'char' lvalue prefix '*' cannot overflow
          |   |     `-ImplicitCastExpr 0x13a028658 <col:41> 'char *' <LValueToRValue>
          |   |       `-DeclRefExpr 0x13a028540 <col:41> 'char *' lvalue Var 0x13a00dff0 'p' 'char *'
          |   `-CharacterLiteral 0x13a028590 <col:46> 'int' 44
          `-UnaryOperator 0x13a028718 <line:24:6, col:8> 'char *' prefix '++'
            `-DeclRefExpr 0x13a0286f8 <col:8> 'char *' lvalue Var 0x13a00dff0 'p' 'char *'
