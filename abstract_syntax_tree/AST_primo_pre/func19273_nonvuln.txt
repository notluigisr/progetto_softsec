`-FunctionDecl 0x15300dda8  line:1:14 DestroyModuleNode 'void *(void *)' static
  |-ParmVarDecl 0x15300dcd8 <col:32, col:38> col:38 used module_info 'void *'
  `-CompoundStmt 0x1530279f8 <line:2:1, line:19:1>
    |-BinaryOperator 0x15300df48 <line:6:3, line:7:6> '<dependent type>' contains-errors '*'
    | |-DeclRefExpr 0x15300ded0 <line:6:3> 'void *' lvalue ParmVar 0x15300dcd8 'module_info' 'void *'
    | `-RecoveryExpr 0x15300df28 <line:7:6> '<dependent type>' contains-errors lvalue
    `-IfStmt 0x153027560 <line:11:3, line:12:29>
      |-BinaryOperator 0x15300e368 <line:11:7, col:40> 'int' contains-errors '=='
      | |-CallExpr 0x15300e318 <col:7, col:35> '<dependent type>' contains-errors
      | | |-DeclRefExpr 0x15300e220 <col:7> 'int ()' Function 0x15300e168 'UnregisterModule' 'int ()'
      | | |-RecoveryExpr 0x15300e2d8 <col:24> '<dependent type>' contains-errors lvalue
      | | `-RecoveryExpr 0x15300e2f8 <col:26> '<dependent type>' contains-errors lvalue
      | `-RecoveryExpr 0x15300e348 <col:40> '<dependent type>' contains-errors lvalue
      `-CallExpr 0x153027538 <line:12:5, col:29> '<dependent type>' contains-errors
        |-DeclRefExpr 0x1530274b8 <col:5> 'int ()' Function 0x153027400 'CatchException' 'int ()'
        `-RecoveryExpr 0x153027518 <col:20> '<dependent type>' contains-errors lvalue
