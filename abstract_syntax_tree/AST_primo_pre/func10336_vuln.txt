`-FunctionDecl 0x143928318  line:1:12 invalid add_push_report_sideband_pkt 'int (int *, int *, int *)' static
  |-ParmVarDecl 0x143928128 <col:41, col:51> col:51 invalid push 'int *'
  |-ParmVarDecl 0x1439281a8 <col:57, col:71> col:71 invalid data_pkt 'int *'
  |-ParmVarDecl 0x143928228 <col:81, col:90> col:90 invalid data_pkt_buf 'int *'
  `-CompoundStmt 0x144008bd8 <line:2:1, line:55:1>
    |-DeclStmt 0x143928508 <line:4:2, col:29>
    | |-VarDecl 0x143928408 <col:2, col:14> col:14 used line 'const char *'
    | `-VarDecl 0x143928488 <col:2, col:21> col:21 used line_end 'const char *'
    |-UnaryExprOrTypeTraitExpr 0x143928578 <line:5:2, col:9> 'unsigned long' sizeof
    | `-DeclRefExpr 0x143928558 <col:9> 'const char *' lvalue Var 0x143928488 'line_end' 'const char *' non_odr_use_unevaluated
    |-DeclStmt 0x143928618 <line:6:2, col:11>
    | `-VarDecl 0x1439285b0 <col:2, col:6> col:6 used error 'int'
    |-DeclStmt 0x143928758 <line:7:2, col:47>
    | `-VarDecl 0x143928648 <col:2, col:46> col:6 used reading_from_buf 'int' cinit
    |   `-BinaryOperator 0x143928738 <col:25, col:46> 'int' contains-errors '>'
    |     |-CXXDependentScopeMemberExpr 0x1439286d0 <col:25, col:39> '<dependent type>' contains-errors lvalue ->size
    |     | `-RecoveryExpr 0x1439286b0 <col:25> '<dependent type>' contains-errors lvalue
    |     `-IntegerLiteral 0x143928718 <col:46> 'int' 0
    |-IfStmt 0x143941d40 <line:9:2, line:18:2> has_else
    | |-ImplicitCastExpr 0x143928790 <line:9:6> 'int' contains-errors <LValueToRValue>
    | | `-DeclRefExpr 0x143928770 <col:6> 'int' contains-errors lvalue Var 0x143928648 'reading_from_buf' 'int'
    | |-CompoundStmt 0x143941ba8 <col:24, line:14:2>
    | | |-CallExpr 0x143941a20 <line:11:3, col:58> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x143941910 <col:3> 'int ()' Function 0x143941858 'git_buf_put' 'int ()'
    | | | |-RecoveryExpr 0x143941930 <col:15> '<dependent type>' contains-errors lvalue
    | | | |-CXXDependentScopeMemberExpr 0x143941970 <col:29, col:39> '<dependent type>' contains-errors lvalue ->data
    | | | | `-RecoveryExpr 0x143941950 <col:29> '<dependent type>' contains-errors lvalue
    | | | `-CXXDependentScopeMemberExpr 0x1439419d8 <col:45, col:55> '<dependent type>' contains-errors lvalue ->len
    | | |   `-RecoveryExpr 0x1439419b8 <col:45> '<dependent type>' contains-errors lvalue
    | | |-BinaryOperator 0x143941ae0 <line:12:3, col:24> 'const char *' contains-errors '='
    | | | |-DeclRefExpr 0x143941a58 <col:3> 'const char *' lvalue Var 0x143928408 'line' 'const char *'
    | | | `-CXXDependentScopeMemberExpr 0x143941a98 <col:10, col:24> '<dependent type>' contains-errors lvalue ->ptr
    | | |   `-RecoveryExpr 0x143941a78 <col:10> '<dependent type>' contains-errors lvalue
    | | `-BinaryOperator 0x143941b88 <line:13:3, col:28> 'const char *' contains-errors '='
    | |   |-DeclRefExpr 0x143941b00 <col:3> 'const char *' lvalue Var 0x143928488 'line_end' 'const char *'
    | |   `-CXXDependentScopeMemberExpr 0x143941b40 <col:14, col:28> '<dependent type>' contains-errors lvalue ->size
    | |     `-RecoveryExpr 0x143941b20 <col:14> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x143941d20 <line:15:7, line:18:2>
    |   |-BinaryOperator 0x143941c58 <line:16:3, col:20> 'const char *' contains-errors '='
    |   | |-DeclRefExpr 0x143941bd0 <col:3> 'const char *' lvalue Var 0x143928408 'line' 'const char *'
    |   | `-CXXDependentScopeMemberExpr 0x143941c10 <col:10, col:20> '<dependent type>' contains-errors lvalue ->data
    |   |   `-RecoveryExpr 0x143941bf0 <col:10> '<dependent type>' contains-errors lvalue
    |   `-BinaryOperator 0x143941d00 <line:17:3, col:24> 'const char *' contains-errors '='
    |     |-DeclRefExpr 0x143941c78 <col:3> 'const char *' lvalue Var 0x143928488 'line_end' 'const char *'
    |     `-CXXDependentScopeMemberExpr 0x143941cb8 <col:14, col:24> '<dependent type>' contains-errors lvalue ->len
    |       `-RecoveryExpr 0x143941c98 <col:14> '<dependent type>' contains-errors lvalue
    |-WhileStmt 0x144008928 <line:20:2, line:47:2>
    | |-BinaryOperator 0x143941e18 <line:20:9, col:20> 'int' '>'
    | | |-ImplicitCastExpr 0x143941de8 <col:9> 'const char *' <LValueToRValue>
    | | | `-DeclRefExpr 0x143941dc8 <col:9> 'const char *' lvalue Var 0x143928488 'line_end' 'const char *'
    | | `-ImplicitCastExpr 0x143941e00 <col:20> 'const char *' <NullToPointer>
    | |   `-IntegerLiteral 0x143941d88 <col:20> 'int' 0
    | `-CompoundStmt 0x1440088e8 <col:23, line:47:2>
    |   |-BinaryOperator 0x143942128 <line:21:3, col:61> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x143941e38 <col:3> 'int' lvalue Var 0x1439285b0 'error' 'int'
    |   | `-CallExpr 0x1439420e8 <col:11, col:61> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x143941f38 <col:11> 'int ()' Function 0x143941e80 'git_pkt_parse_line' 'int ()'
    |   |   |-UnaryOperator 0x1439420b0 <col:30, col:31> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   |   | `-RecoveryExpr 0x143942090 <col:31> '<dependent type>' contains-errors lvalue
    |   |   |-DeclRefExpr 0x143941f88 <col:36> 'const char *' lvalue Var 0x143928408 'line' 'const char *'
    |   |   |-UnaryOperator 0x143942000 <col:42, col:43> 'const char **' prefix '&' cannot overflow
    |   |   | `-DeclRefExpr 0x143941fa8 <col:43> 'const char *' lvalue Var 0x143928488 'line_end' 'const char *'
    |   |   `-RecoveryExpr 0x1439420c8 <col:53> '<dependent type>' contains-errors lvalue
    |   |-IfStmt 0x1439424f8 <line:23:3, line:31:9> has_else
    |   | |-BinaryOperator 0x1439421c0 <line:23:7, col:16> 'int' contains-errors '=='
    |   | | |-DeclRefExpr 0x143942148 <col:7> 'int' lvalue Var 0x1439285b0 'error' 'int'
    |   | | `-RecoveryExpr 0x1439421a0 <col:16> '<dependent type>' contains-errors lvalue
    |   | |-CompoundStmt 0x143942420 <col:27, line:29:3>
    |   | | |-IfStmt 0x143942338 <line:25:4, line:26:45>
    |   | | | |-UnaryOperator 0x143942218 <line:25:8, col:9> 'int' contains-errors prefix '!' cannot overflow
    |   | | | | `-ImplicitCastExpr 0x143942200 <col:9> 'int' contains-errors <LValueToRValue>
    |   | | | |   `-DeclRefExpr 0x1439421e0 <col:9> 'int' contains-errors lvalue Var 0x143928648 'reading_from_buf' 'int'
    |   | | | `-CallExpr 0x143942300 <line:26:5, col:45> '<dependent type>' contains-errors
    |   | | |   |-DeclRefExpr 0x143942230 <col:5> 'int ()' Function 0x143941858 'git_buf_put' 'int ()'
    |   | | |   |-RecoveryExpr 0x143942250 <col:17> '<dependent type>' contains-errors lvalue
    |   | | |   |-DeclRefExpr 0x143942270 <col:31> 'const char *' lvalue Var 0x143928408 'line' 'const char *'
    |   | | |   `-DeclRefExpr 0x1439422e0 <col:37> 'const char *' lvalue Var 0x143928488 'line_end' 'const char *'
    |   | | |-BinaryOperator 0x143942398 <line:27:4, col:12> 'int' '='
    |   | | | |-DeclRefExpr 0x143942358 <col:4> 'int' lvalue Var 0x1439285b0 'error' 'int'
    |   | | | `-IntegerLiteral 0x143942378 <col:12> 'int' 0
    |   | | `-GotoStmt 0x143942408 <line:28:4, col:9> 'done' 0x1439423b8
    |   | `-IfStmt 0x1439424d8 <line:30:8, line:31:9>
    |   |   |-BinaryOperator 0x1439424a0 <line:30:12, col:20> 'int' '<'
    |   |   | |-ImplicitCastExpr 0x143942488 <col:12> 'int' <LValueToRValue>
    |   |   | | `-DeclRefExpr 0x143942448 <col:12> 'int' lvalue Var 0x1439285b0 'error' 'int'
    |   |   | `-IntegerLiteral 0x143942468 <col:20> 'int' 0
    |   |   `-GotoStmt 0x1439424c0 <line:31:4, col:9> 'done' 0x1439423b8
    |   |-CompoundAssignOperator 0x1439425f8 <line:34:3, col:31> 'const char *' '-=' ComputeLHSTy='const char *' ComputeResultTy='const char *'
    |   | |-DeclRefExpr 0x143942528 <col:3> 'const char *' lvalue Var 0x143928488 'line_end' 'const char *'
    |   | `-ParenExpr 0x1439425d8 <col:15, col:31> 'long'
    |   |   `-BinaryOperator 0x1439425b8 <col:16, col:27> 'long' '-'
    |   |     |-ImplicitCastExpr 0x143942588 <col:16> 'const char *' <LValueToRValue>
    |   |     | `-DeclRefExpr 0x143942548 <col:16> 'const char *' lvalue Var 0x143928488 'line_end' 'const char *'
    |   |     `-ImplicitCastExpr 0x1439425a0 <col:27> 'const char *' <LValueToRValue>
    |   |       `-DeclRefExpr 0x143942568 <col:27> 'const char *' lvalue Var 0x143928408 'line' 'const char *'
    |   |-BinaryOperator 0x143942680 <line:35:3, col:10> 'const char *' '='
    |   | |-DeclRefExpr 0x143942628 <col:3> 'const char *' lvalue Var 0x143928408 'line' 'const char *'
    |   | `-ImplicitCastExpr 0x143942668 <col:10> 'const char *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x143942648 <col:10> 'const char *' lvalue Var 0x143928488 'line_end' 'const char *'
    |   |-IfStmt 0x143942758 <line:38:3, line:39:4>
    |   | |-BinaryOperator 0x143942730 <line:38:7, col:14> 'int' contains-errors '=='
    |   | | |-RecoveryExpr 0x1439426f0 <col:7> '<dependent type>' contains-errors lvalue
    |   | | `-RecoveryExpr 0x143942710 <col:14> '<dependent type>' contains-errors lvalue
    |   | `-ContinueStmt 0x143942750 <line:39:4>
    |   `-IfStmt 0x1440088c8 <line:45:3, line:46:9>
    |     |-RecoveryExpr 0x144008890 <line:45:7, col:29> '_Bool' contains-errors
    |     `-GotoStmt 0x1440088b0 <line:46:4, col:9> 'done' 0x1439423b8
    |-BinaryOperator 0x144008988 <line:49:2, col:10> 'int' '='
    | |-DeclRefExpr 0x144008948 <col:2> 'int' lvalue Var 0x1439285b0 'error' 'int'
    | `-IntegerLiteral 0x144008968 <col:10> 'int' 0
    |-LabelStmt 0x144008b70 <line:51:1, line:53:41> 'done'
    | `-IfStmt 0x144008b50 <line:52:2, line:53:41>
    |   |-ImplicitCastExpr 0x1440089c8 <line:52:6> 'int' contains-errors <LValueToRValue>
    |   | `-DeclRefExpr 0x1440089a8 <col:6> 'int' contains-errors lvalue Var 0x143928648 'reading_from_buf' 'int'
    |   `-CallExpr 0x144008b20 <line:53:3, col:41> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x144008ac0 <col:3> 'int ()' Function 0x144008a08 'git_buf_consume' 'int ()'
    |     |-RecoveryExpr 0x144008ae0 <col:19> '<dependent type>' contains-errors lvalue
    |     `-DeclRefExpr 0x144008b00 <col:33> 'const char *' lvalue Var 0x143928488 'line_end' 'const char *'
    `-ReturnStmt 0x144008bc8 <line:54:2, col:9>
      `-ImplicitCastExpr 0x144008bb0 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x144008b90 <col:9> 'int' lvalue Var 0x1439285b0 'error' 'int'
