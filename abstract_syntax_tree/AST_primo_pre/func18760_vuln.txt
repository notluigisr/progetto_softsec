`-FunctionDecl 0x1561287d8  line:1:1 invalid eval_lambda 'int (char **, int *, int *, int)'
  |-ParmVarDecl 0x156128528 <line:2:5, col:14> col:14 used arg 'char **'
  |-ParmVarDecl 0x1561285d8 <line:3:5, col:15> col:15 referenced invalid rettv 'int *'
  |-ParmVarDecl 0x156128658 <line:4:5, col:16> col:16 invalid evalarg 'int *'
  |-ParmVarDecl 0x1561286d8 <line:5:5, col:10> col:10 used verbose 'int'
  `-CompoundStmt 0x157809040 <line:6:1, line:55:1>
    |-DeclStmt 0x156128a18 <line:7:5, line:8:51>
    | `-VarDecl 0x1561288b8 <line:7:5, col:10> col:10 used evaluate 'int'
    |-DeclStmt 0x156128ab0 <line:10:5, col:13>
    | `-VarDecl 0x156128a48 <col:5, col:10> col:10 used ret 'int'
    |-BinaryOperator 0x156128bb0 <line:12:5, col:21> '<dependent type>' contains-errors '='
    | |-CXXDependentScopeMemberExpr 0x156128b10 <col:5, col:12> '<dependent type>' contains-errors lvalue ->v_type
    | | `-RecoveryExpr 0x156128ae8 <col:5> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x156128ac8 <col:5> 'int *' lvalue ParmVar 0x1561285d8 'rettv' 'int *'
    | `-RecoveryExpr 0x156128b90 <col:21> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x156809958 <line:14:5, line:31:5> has_else
    | |-BinaryOperator 0x156808ca8 <line:14:9, col:18> 'int' '=='
    | | |-ImplicitCastExpr 0x156808c90 <col:9, col:11> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x156808c78 <col:9, col:11> 'char' <LValueToRValue>
    | | |   `-UnaryOperator 0x156808c48 <col:9, col:11> 'char' lvalue prefix '*' cannot overflow
    | | |     `-ImplicitCastExpr 0x156808c30 <col:10, col:11> 'char *' <LValueToRValue>
    | | |       `-UnaryOperator 0x156808c18 <col:10, col:11> 'char *' lvalue prefix '*' cannot overflow
    | | |         `-ImplicitCastExpr 0x156808c00 <col:11> 'char **' <LValueToRValue>
    | | |           `-DeclRefExpr 0x156128bd0 <col:11> 'char **' lvalue ParmVar 0x156128528 'arg' 'char **'
    | | `-CharacterLiteral 0x156808c60 <col:18> 'int' 123
    | |-CompoundStmt 0x156808fb8 <line:15:5, line:18:5>
    | | `-BinaryOperator 0x156808f98 <line:17:2, col:48> 'int' contains-errors '='
    | |   |-DeclRefExpr 0x156808cc8 <col:2> 'int' lvalue Var 0x156128a48 'ret' 'int'
    | |   `-CallExpr 0x156808f58 <col:8, col:48> '<dependent type>' contains-errors
    | |     |-DeclRefExpr 0x156808e40 <col:8> 'int ()' Function 0x156808d88 'get_lambda_tv' 'int ()'
    | |     |-DeclRefExpr 0x156808e60 <col:22> 'char **' lvalue ParmVar 0x156128528 'arg' 'char **'
    | |     |-RecoveryExpr 0x156808e80 <col:27> '<dependent type>' contains-errors lvalue
    | |     |-RecoveryExpr 0x156808f38 <col:34> '<dependent type>' contains-errors lvalue
    | |     `-RecoveryExpr 0x156808eb8 <col:41> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x156809920 <line:20:5, line:31:5>
    |   |-UnaryOperator 0x156809020 <line:22:2, col:5> 'char *' prefix '++'
    |   | `-UnaryOperator 0x156809008 <col:4, col:5> 'char *' lvalue prefix '*' cannot overflow
    |   |   `-ImplicitCastExpr 0x156808ff0 <col:5> 'char **' <LValueToRValue>
    |   |     `-DeclRefExpr 0x156808fd0 <col:5> 'char **' lvalue ParmVar 0x156128528 'arg' 'char **'
    |   |-BinaryOperator 0x1568091f0 <line:23:2, col:33> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x156809038 <col:2> 'int' lvalue Var 0x156128a48 'ret' 'int'
    |   | `-CallExpr 0x1568091b8 <col:8, col:33> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x156809138 <col:8> 'int ()' Function 0x156809080 'eval1' 'int ()'
    |   |   |-DeclRefExpr 0x156809158 <col:14> 'char **' lvalue ParmVar 0x156128528 'arg' 'char **'
    |   |   |-RecoveryExpr 0x156809178 <col:19> '<dependent type>' contains-errors lvalue
    |   |   `-RecoveryExpr 0x156809198 <col:26> '<dependent type>' contains-errors lvalue
    |   |-BinaryOperator 0x156809400 <line:24:2, col:46> 'char *' contains-errors '='
    |   | |-UnaryOperator 0x156809248 <col:2, col:3> 'char *' lvalue prefix '*' cannot overflow
    |   | | `-ImplicitCastExpr 0x156809230 <col:3> 'char **' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x156809210 <col:3> 'char **' lvalue ParmVar 0x156128528 'arg' 'char **'
    |   | `-CallExpr 0x1568093d0 <col:9, col:46> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x156809340 <col:9> 'int ()' Function 0x156809288 'skipwhite_and_linebreak' 'int ()'
    |   |   |-UnaryOperator 0x156809398 <col:33, col:34> 'char *' lvalue prefix '*' cannot overflow
    |   |   | `-ImplicitCastExpr 0x156809380 <col:34> 'char **' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x156809360 <col:34> 'char **' lvalue ParmVar 0x156128528 'arg' 'char **'
    |   |   `-RecoveryExpr 0x1568093b0 <col:39> '<dependent type>' contains-errors lvalue
    |   |-IfStmt 0x156809898 <line:25:2, line:29:2>
    |   | |-BinaryOperator 0x1568094e8 <line:25:6, col:15> 'int' '!='
    |   | | |-ImplicitCastExpr 0x1568094d0 <col:6, col:8> 'int' <IntegralCast>
    |   | | | `-ImplicitCastExpr 0x1568094b8 <col:6, col:8> 'char' <LValueToRValue>
    |   | | |   `-UnaryOperator 0x156809488 <col:6, col:8> 'char' lvalue prefix '*' cannot overflow
    |   | | |     `-ImplicitCastExpr 0x156809470 <col:7, col:8> 'char *' <LValueToRValue>
    |   | | |       `-UnaryOperator 0x156809458 <col:7, col:8> 'char *' lvalue prefix '*' cannot overflow
    |   | | |         `-ImplicitCastExpr 0x156809440 <col:8> 'char **' <LValueToRValue>
    |   | | |           `-DeclRefExpr 0x156809420 <col:8> 'char **' lvalue ParmVar 0x156128528 'arg' 'char **'
    |   | | `-CharacterLiteral 0x1568094a0 <col:15> 'int' 41
    |   | `-CompoundStmt 0x156809878 <line:26:2, line:29:2>
    |   |   |-CallExpr 0x1568097b8 <line:27:6, col:37> '<dependent type>' contains-errors
    |   |   | |-DeclRefExpr 0x1568095e8 <col:6> 'int ()' Function 0x156809530 'emsg' 'int ()'
    |   |   | `-CallExpr 0x156809790 <col:11, col:36> '<dependent type>' contains-errors
    |   |   |   |-DeclRefExpr 0x1568096e8 <col:11> 'int ()' Function 0x156809630 '_' 'int ()'
    |   |   |   `-RecoveryExpr 0x156809770 <col:13> '<dependent type>' contains-errors lvalue
    |   |   `-BinaryOperator 0x156809858 <line:28:6, col:12> 'int' contains-errors '='
    |   |     |-DeclRefExpr 0x1568097e0 <col:6> 'int' lvalue Var 0x156128a48 'ret' 'int'
    |   |     `-RecoveryExpr 0x156809838 <col:12> '<dependent type>' contains-errors lvalue
    |   `-UnaryOperator 0x156809908 <line:30:2, col:5> 'char *' prefix '++'
    |     `-UnaryOperator 0x1568098f0 <col:4, col:5> 'char *' lvalue prefix '*' cannot overflow
    |       `-ImplicitCastExpr 0x1568098d8 <col:5> 'char **' <LValueToRValue>
    |         `-DeclRefExpr 0x1568098b8 <col:5> 'char **' lvalue ParmVar 0x156128528 'arg' 'char **'
    |-IfStmt 0x157808f70 <line:32:5, line:47:2> has_else
    | |-BinaryOperator 0x156809a00 <line:32:9, col:16> 'int' contains-errors '!='
    | | |-DeclRefExpr 0x156809988 <col:9> 'int' lvalue Var 0x156128a48 'ret' 'int'
    | | `-RecoveryExpr 0x1568099e0 <col:16> '<dependent type>' contains-errors lvalue
    | |-ReturnStmt 0x156809a58 <line:33:2, col:9>
    | | `-RecoveryExpr 0x156809a38 <col:9> '<dependent type>' contains-errors lvalue
    | `-IfStmt 0x157808f40 <line:34:10, line:47:2> has_else
    |   |-BinaryOperator 0x156809b30 <line:34:14, col:23> 'int' '!='
    |   | |-ImplicitCastExpr 0x156809b18 <col:14, col:16> 'int' <IntegralCast>
    |   | | `-ImplicitCastExpr 0x156809b00 <col:14, col:16> 'char' <LValueToRValue>
    |   | |   `-UnaryOperator 0x156809ad0 <col:14, col:16> 'char' lvalue prefix '*' cannot overflow
    |   | |     `-ImplicitCastExpr 0x156809ab8 <col:15, col:16> 'char *' <LValueToRValue>
    |   | |       `-UnaryOperator 0x156809aa0 <col:15, col:16> 'char *' lvalue prefix '*' cannot overflow
    |   | |         `-ImplicitCastExpr 0x156809a88 <col:16> 'char **' <LValueToRValue>
    |   | |           `-DeclRefExpr 0x156809a68 <col:16> 'char **' lvalue ParmVar 0x156128528 'arg' 'char **'
    |   | `-CharacterLiteral 0x156809ae8 <col:23> 'int' 40
    |   |-CompoundStmt 0x157808d78 <line:35:5, line:45:5>
    |   | |-IfStmt 0x157808bf0 <line:36:2, line:42:2>
    |   | | |-ImplicitCastExpr 0x156809b70 <line:36:6> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x156809b50 <col:6> 'int' lvalue ParmVar 0x1561286d8 'verbose' 'int'
    |   | | `-CompoundStmt 0x157808be0 <line:37:2, line:42:2>
    |   | `-CallExpr 0x157808d30 <line:43:2, col:16> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x157808cf0 <col:2> 'int ()' Function 0x157808c38 'clear_tv' 'int ()'
    |   |   `-RecoveryExpr 0x157808d10 <col:11> '<dependent type>' contains-errors lvalue
    |   `-NullStmt 0x157808f38 <line:47:2>
    `-ReturnStmt 0x157809030 <line:54:5, col:12>
      `-ImplicitCastExpr 0x157809018 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x157808ff8 <col:12> 'int' lvalue Var 0x156128a48 'ret' 'int'
