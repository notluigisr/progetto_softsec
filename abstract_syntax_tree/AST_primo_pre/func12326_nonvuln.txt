`-FunctionDecl 0x10100ddf8  line:1:10 invalid val_real_from_item 'double (int *)'
  |-ParmVarDecl 0x10100dd28 <col:29, col:35> col:35 invalid item 'int *'
  `-CompoundStmt 0x10100e2d8 <line:2:3, line:7:3>
    |-CallExpr 0x10100e0e0 <line:3:5, col:27> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x10100e000 <col:5> 'int ()' Function 0x10100df48 'DBUG_ASSERT' 'int ()'
    | `-BinaryOperator 0x10100e0c0 <col:17, col:26> 'int' contains-errors '=='
    |   |-RecoveryExpr 0x10100e0a0 <col:17> '<dependent type>' contains-errors lvalue
    |   `-IntegerLiteral 0x10100e038 <col:26> 'int' 1
    |-DeclStmt 0x10100e210 <line:4:5, col:35>
    | `-VarDecl 0x10100e120 <col:5, col:34> col:12 used value 'double' cinit
    |   `-CallExpr 0x10100e1f0 <col:19, col:34> '<dependent type>' contains-errors
    |     `-CXXDependentScopeMemberExpr 0x10100e1a8 <col:19, col:25> '<dependent type>' contains-errors lvalue ->val_real
    |       `-RecoveryExpr 0x10100e188 <col:19> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x10100e2c8 <line:6:5, col:12>
      `-ImplicitCastExpr 0x10100e2b0 <col:12> 'double' contains-errors <LValueToRValue>
        `-DeclRefExpr 0x10100e290 <col:12> 'double' contains-errors lvalue Var 0x10100e120 'value' 'double'
