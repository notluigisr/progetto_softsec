`-FunctionDecl 0x12d9281c8  line:1:1 invalid rdpsnddbg_process 'int (int)'
  |-ParmVarDecl 0x12d9280f0 <col:19, col:26> col:26 invalid s 'int'
  `-CompoundStmt 0x12d942380 <line:2:1, line:15:1>
    |-DeclStmt 0x12d9282f8 <line:3:2, col:21>
    | `-VarDecl 0x12d928290 <col:2, col:15> col:15 used pkglen 'unsigned int'
    |-DeclStmt 0x12d9283c8 <line:4:2, col:26>
    | `-VarDecl 0x12d928328 <col:2, col:22> col:15 used rest 'char *' static cinit
    |   `-RecoveryExpr 0x12d9283a8 <col:22> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x12d928460 <line:5:2, col:11>
    | `-VarDecl 0x12d9283f8 <col:2, col:8> col:8 used buf 'char *'
    |-BinaryOperator 0x12d928588 <line:7:2, col:23> 'unsigned int' contains-errors '='
    | |-DeclRefExpr 0x12d928478 <col:2> 'unsigned int' lvalue Var 0x12d928290 'pkglen' 'unsigned int'
    | `-BinaryOperator 0x12d928568 <col:11, col:23> '<dependent type>' contains-errors '-'
    |   |-CXXDependentScopeMemberExpr 0x12d9284b8 <col:11, col:14> '<dependent type>' contains-errors lvalue ->end
    |   | `-RecoveryExpr 0x12d928498 <col:11> '<dependent type>' contains-errors lvalue
    |   `-CXXDependentScopeMemberExpr 0x12d928520 <col:20, col:23> '<dependent type>' contains-errors lvalue ->p
    |     `-RecoveryExpr 0x12d928500 <col:20> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x12d941ca8 <line:9:2, col:35> 'char *' '='
    | |-DeclRefExpr 0x12d9285a8 <col:2> 'char *' lvalue Var 0x12d9283f8 'buf' 'char *'
    | `-CStyleCastExpr 0x12d941c80 <col:8, col:35> 'char *' <IntegralToPointer>
    |   `-CallExpr 0x12d941818 <col:17, col:35> 'int'
    |     |-ImplicitCastExpr 0x12d941800 <col:17> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x12d928720 <col:17> 'int ()' Function 0x12d928668 'xmalloc' 'int ()'
    |     `-BinaryOperator 0x12d9287b0 <col:25, col:34> 'unsigned int' '+'
    |       |-ImplicitCastExpr 0x12d928780 <col:25> 'unsigned int' <LValueToRValue>
    |       | `-DeclRefExpr 0x12d928740 <col:25> 'unsigned int' lvalue Var 0x12d928290 'pkglen' 'unsigned int'
    |       `-ImplicitCastExpr 0x12d928798 <col:34> 'unsigned int' <IntegralCast>
    |         `-IntegerLiteral 0x12d928760 <col:34> 'int' 1
    |-CallExpr 0x12d941f38 <line:10:2, col:40> 'int' contains-errors
    | |-ImplicitCastExpr 0x12d941f20 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x12d941da8 <col:2> 'int ()' Function 0x12d941cf0 'STRNCPY' 'int ()'
    | |-ImplicitCastExpr 0x12d941f70 <col:10> 'char *' <LValueToRValue>
    | | `-DeclRefExpr 0x12d941dc8 <col:10> 'char *' lvalue Var 0x12d9283f8 'buf' 'char *'
    | |-CStyleCastExpr 0x12d941e68 <col:15, col:27> 'char *' contains-errors <Dependent>
    | | `-CXXDependentScopeMemberExpr 0x12d941e08 <col:24, col:27> '<dependent type>' contains-errors lvalue ->p
    | |   `-RecoveryExpr 0x12d941de8 <col:24> '<dependent type>' contains-errors lvalue
    | `-BinaryOperator 0x12d941f00 <col:30, col:39> 'unsigned int' '+'
    |   |-ImplicitCastExpr 0x12d941ed0 <col:30> 'unsigned int' <LValueToRValue>
    |   | `-DeclRefExpr 0x12d941e90 <col:30> 'unsigned int' lvalue Var 0x12d928290 'pkglen' 'unsigned int'
    |   `-ImplicitCastExpr 0x12d941ee8 <col:39> 'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x12d941eb0 <col:39> 'int' 1
    |-CallExpr 0x12d9421c8 <line:12:2, col:59> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x12d942068 <col:2> 'int ()' Function 0x12d941fb0 'str_handle_lines' 'int ()'
    | |-DeclRefExpr 0x12d942088 <col:19> 'char *' lvalue Var 0x12d9283f8 'buf' 'char *'
    | |-UnaryOperator 0x12d942100 <col:24, col:25> 'char **' contains-errors prefix '&' cannot overflow
    | | `-DeclRefExpr 0x12d9420a8 <col:25> 'char *' contains-errors lvalue Var 0x12d928328 'rest' 'char *'
    | |-RecoveryExpr 0x12d942188 <col:31> '<dependent type>' contains-errors lvalue
    | `-RecoveryExpr 0x12d9421a8 <col:55> '<dependent type>' contains-errors lvalue
    `-CallExpr 0x12d942340 <line:14:2, col:11> 'int'
      |-ImplicitCastExpr 0x12d942328 <col:2> 'int (*)()' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x12d9422e8 <col:2> 'int ()' Function 0x12d942230 'xfree' 'int ()'
      `-ImplicitCastExpr 0x12d942368 <col:8> 'char *' <LValueToRValue>
        `-DeclRefExpr 0x12d942308 <col:8> 'char *' lvalue Var 0x12d9283f8 'buf' 'char *'
