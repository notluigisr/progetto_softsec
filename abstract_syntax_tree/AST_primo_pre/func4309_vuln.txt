`-FunctionDecl 0x13e928288  line:1:1 invalid delete 'int (int, int *)'
  |-ParmVarDecl 0x13e9280f0 <col:9, col:18> col:18 invalid p 'int'
  |-ParmVarDecl 0x13e9281a8 <col:21, col:35> col:35 referenced invalid s 'int *'
  `-CompoundStmt 0x13e941bd0 <line:2:1, line:11:1>
    |-DeclStmt 0x13e9283c0 <line:3:3, col:8>
    | `-VarDecl 0x13e928358 <col:3, col:7> col:7 used i 'int'
    |-ForStmt 0x13e9286e8 <line:5:3, line:7:7>
    | |-BinaryOperator 0x13e928418 <line:5:8, col:12> 'int' '='
    | | |-DeclRefExpr 0x13e9283d8 <col:8> 'int' lvalue Var 0x13e928358 'i' 'int'
    | | `-IntegerLiteral 0x13e9283f8 <col:12> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x13e9284c0 <col:15, col:22> 'int' contains-errors '<'
    | | |-DeclRefExpr 0x13e928438 <col:15> 'int' lvalue Var 0x13e928358 'i' 'int'
    | | `-CXXDependentScopeMemberExpr 0x13e928478 <col:19, col:22> '<dependent type>' contains-errors lvalue ->nelem
    | |   `-RecoveryExpr 0x13e928458 <col:19> '<dependent type>' contains-errors lvalue
    | |-UnaryOperator 0x13e928500 <col:29, col:31> 'int' prefix '++'
    | | `-DeclRefExpr 0x13e9284e0 <col:31> 'int' lvalue Var 0x13e928358 'i' 'int'
    | `-IfStmt 0x13e9286c8 <line:6:5, line:7:7>
    |   |-BinaryOperator 0x13e9286a0 <line:6:9, col:32> 'int' contains-errors '=='
    |   | |-CXXDependentScopeMemberExpr 0x13e928538 <col:9, col:11> '<dependent type>' contains-errors lvalue .index
    |   | | `-RecoveryExpr 0x13e928518 <col:9> '<dependent type>' contains-errors lvalue
    |   | `-CXXDependentScopeMemberExpr 0x13e928658 <col:20, col:32> '<dependent type>' contains-errors lvalue .index
    |   |   `-ArraySubscriptExpr 0x13e928638 <col:20, col:30> '<dependent type>' contains-errors lvalue
    |   |     |-ImplicitCastExpr 0x13e928608 <col:20, col:23> '<dependent type>' contains-errors <LValueToRValue>
    |   |     | `-CXXDependentScopeMemberExpr 0x13e9285a0 <col:20, col:23> '<dependent type>' contains-errors lvalue ->elems
    |   |     |   `-RecoveryExpr 0x13e928580 <col:20> '<dependent type>' contains-errors lvalue
    |   |     `-ImplicitCastExpr 0x13e928620 <col:29> 'int' <LValueToRValue>
    |   |       `-DeclRefExpr 0x13e9285e8 <col:29> 'int' lvalue Var 0x13e928358 'i' 'int'
    |   `-BreakStmt 0x13e9286c0 <line:7:7>
    `-IfStmt 0x13e941bb0 <line:8:3, line:10:35>
      |-BinaryOperator 0x13e9287a8 <line:8:7, col:14> 'int' contains-errors '<'
      | |-DeclRefExpr 0x13e928720 <col:7> 'int' lvalue Var 0x13e928358 'i' 'int'
      | `-CXXDependentScopeMemberExpr 0x13e928760 <col:11, col:14> '<dependent type>' contains-errors lvalue ->nelem
      |   `-RecoveryExpr 0x13e928740 <col:11> '<dependent type>' contains-errors lvalue
      `-ForStmt 0x13e941b78 <line:9:5, line:10:35>
        |-UnaryOperator 0x13e941848 <line:9:10, col:15> '<dependent type>' contains-errors prefix '--' cannot overflow
        | `-CXXDependentScopeMemberExpr 0x13e941800 <col:12, col:15> '<dependent type>' contains-errors lvalue ->nelem
        |   `-RecoveryExpr 0x13e9287c8 <col:12> '<dependent type>' contains-errors lvalue
        |-<<<NULL>>>
        |-BinaryOperator 0x13e9418e8 <col:22, col:29> 'int' contains-errors '<'
        | |-DeclRefExpr 0x13e941860 <col:22> 'int' lvalue Var 0x13e928358 'i' 'int'
        | `-CXXDependentScopeMemberExpr 0x13e9418a0 <col:26, col:29> '<dependent type>' contains-errors lvalue ->nelem
        |   `-RecoveryExpr 0x13e941880 <col:26> '<dependent type>' contains-errors lvalue
        |-UnaryOperator 0x13e941928 <col:36, col:38> 'int' prefix '++'
        | `-DeclRefExpr 0x13e941908 <col:38> 'int' lvalue Var 0x13e928358 'i' 'int'
        `-BinaryOperator 0x13e941b58 <line:10:7, col:35> '<dependent type>' contains-errors '='
          |-ArraySubscriptExpr 0x13e941a20 <col:7, col:17> '<dependent type>' contains-errors lvalue
          | |-ImplicitCastExpr 0x13e9419f0 <col:7, col:10> '<dependent type>' contains-errors <LValueToRValue>
          | | `-CXXDependentScopeMemberExpr 0x13e941988 <col:7, col:10> '<dependent type>' contains-errors lvalue ->elems
          | |   `-RecoveryExpr 0x13e941960 <col:7> '<dependent type>' contains-errors lvalue
          | |     `-DeclRefExpr 0x13e941940 <col:7> 'int *' lvalue ParmVar 0x13e9281a8 's' 'int *'
          | `-ImplicitCastExpr 0x13e941a08 <col:16> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x13e9419d0 <col:16> 'int' lvalue Var 0x13e928358 'i' 'int'
          `-ArraySubscriptExpr 0x13e941b38 <col:21, col:35> '<dependent type>' contains-errors lvalue
            |-ImplicitCastExpr 0x13e941b20 <col:21, col:24> '<dependent type>' contains-errors <LValueToRValue>
            | `-CXXDependentScopeMemberExpr 0x13e941a60 <col:21, col:24> '<dependent type>' contains-errors lvalue ->elems
            |   `-RecoveryExpr 0x13e941a40 <col:21> '<dependent type>' contains-errors lvalue
            `-BinaryOperator 0x13e941b00 <col:30, col:34> 'int' '+'
              |-ImplicitCastExpr 0x13e941ae8 <col:30> 'int' <LValueToRValue>
              | `-DeclRefExpr 0x13e941aa8 <col:30> 'int' lvalue Var 0x13e928358 'i' 'int'
              `-IntegerLiteral 0x13e941ac8 <col:34> 'int' 1
