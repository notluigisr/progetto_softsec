`-FunctionDecl 0x15700dda8  line:1:12 xen_evtchn_cpu_prepare 'int (unsigned int)' static
  |-ParmVarDecl 0x15700dcd8 <col:35, col:48> col:48 used cpu 'unsigned int'
  `-CompoundStmt 0x15700e238 <line:2:1, line:9:1>
    |-DeclStmt 0x15700df40 <line:3:2, col:13>
    | `-VarDecl 0x15700deb8 <col:2, col:12> col:6 used ret 'int' cinit
    |   `-IntegerLiteral 0x15700df20 <col:12> 'int' 0
    |-IfStmt 0x15700e1d0 <line:5:2, line:6:36>
    | |-CXXDependentScopeMemberExpr 0x15700dff0 <line:5:6, col:18> '<dependent type>' contains-errors lvalue ->percpu_init
    | | `-RecoveryExpr 0x15700dfd0 <col:6> '<dependent type>' contains-errors lvalue
    | `-BinaryOperator 0x15700e1b0 <line:6:3, col:36> 'int' contains-errors '='
    |   |-DeclRefExpr 0x15700e038 <col:3> 'int' lvalue Var 0x15700deb8 'ret' 'int'
    |   `-CallExpr 0x15700e188 <col:9, col:36> '<dependent type>' contains-errors
    |     |-CXXDependentScopeMemberExpr 0x15700e140 <col:9, col:21> '<dependent type>' contains-errors lvalue ->percpu_init
    |     | `-RecoveryExpr 0x15700e120 <col:9> '<dependent type>' contains-errors lvalue
    |     `-DeclRefExpr 0x15700e0b8 <col:33> 'unsigned int' lvalue ParmVar 0x15700dcd8 'cpu' 'unsigned int'
    `-ReturnStmt 0x15700e228 <line:8:2, col:9>
      `-ImplicitCastExpr 0x15700e210 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x15700e1f0 <col:9> 'int' lvalue Var 0x15700deb8 'ret' 'int'
