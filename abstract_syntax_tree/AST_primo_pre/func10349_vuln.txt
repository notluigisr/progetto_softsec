`-FunctionDecl 0x13186bff8  line:1:1 invalid zput 'int (int *)'
  |-ParmVarDecl 0x13186bf28 <col:6, col:15> col:15 invalid i_ctx_p 'int *'
  `-CompoundStmt 0x131885880 <line:2:1, line:52:1>
    |-DeclStmt 0x13186c140 <line:7:5, col:15>
    | `-VarDecl 0x13186c0d8 <col:5, col:10> col:10 used ssize 'int'
    |-SwitchStmt 0x13186c358 <line:9:5, line:49:5>
    | |-CallExpr 0x13186c330 <line:9:13, col:23> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x13186c2b0 <col:13> 'int ()' Function 0x13186c1f8 'r_type' 'int ()'
    | | `-RecoveryExpr 0x13186c310 <col:20> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x131885660 <col:26, line:49:5>
    |   |-IfStmt 0x131882e28 <line:11:13, line:12:38>
    |   | |-BinaryOperator 0x13186c420 <line:11:17, col:42> 'int' contains-errors '=='
    |   | | |-CXXDependentScopeMemberExpr 0x13186c3b8 <col:17, col:26> '<dependent type>' contains-errors lvalue ->in_superexec
    |   | | | `-RecoveryExpr 0x13186c398 <col:17> '<dependent type>' contains-errors lvalue
    |   | | `-IntegerLiteral 0x13186c400 <col:42> 'int' 0
    |   | `-CallExpr 0x131882e00 <line:12:17, col:38> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x13186c520 <col:17> 'int ()' Function 0x13186c468 'check_dict_write' 'int ()'
    |   |   `-UnaryOperator 0x13186c5e8 <col:34, col:35> '<dependent type>' contains-errors prefix '*' cannot overflow
    |   |     `-ImplicitCastExpr 0x13186c5d0 <col:35> '<dependent type>' contains-errors <LValueToRValue>
    |   |       `-RecoveryExpr 0x13186c5b0 <col:35> '<dependent type>' contains-errors lvalue
    |   |-CompoundStmt 0x1318831d8 <line:13:13, line:18:13>
    |   | |-DeclStmt 0x1318830e0 <line:14:17, col:51>
    |   | | `-VarDecl 0x131882e60 <col:17, col:50> col:21 used code 'int' cinit
    |   | |   `-CallExpr 0x1318830a8 <col:28, col:50> '<dependent type>' contains-errors
    |   | |     |-DeclRefExpr 0x131882fa8 <col:28> 'int ()' Function 0x131882ef0 'idict_put' 'int ()'
    |   | |     |-RecoveryExpr 0x131883048 <col:38> '<dependent type>' contains-errors lvalue
    |   | |     |-RecoveryExpr 0x131883068 <col:43> '<dependent type>' contains-errors lvalue
    |   | |     `-RecoveryExpr 0x131883088 <col:48> '<dependent type>' contains-errors lvalue
    |   | `-IfStmt 0x1318831b8 <line:16:17, line:17:28>
    |   |   |-BinaryOperator 0x131883150 <line:16:21, col:28> 'int' contains-errors '<'
    |   |   | |-ImplicitCastExpr 0x131883138 <col:21> 'int' contains-errors <LValueToRValue>
    |   |   | | `-DeclRefExpr 0x1318830f8 <col:21> 'int' contains-errors lvalue Var 0x131882e60 'code' 'int'
    |   |   | `-IntegerLiteral 0x131883118 <col:28> 'int' 0
    |   |   `-ReturnStmt 0x1318831a8 <line:17:21, col:28>
    |   |     `-ImplicitCastExpr 0x131883190 <col:28> 'int' contains-errors <LValueToRValue>
    |   |       `-DeclRefExpr 0x131883170 <col:28> 'int' contains-errors lvalue Var 0x131882e60 'code' 'int'
    |   |-BreakStmt 0x1318831f8 <line:19:13>
    |   |-CallExpr 0x1318833d8 <line:21:13, col:29> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x1318832f8 <col:13> 'int ()' Function 0x131883240 'check_write' 'int ()'
    |   | `-UnaryOperator 0x1318833c0 <col:25, col:26> '<dependent type>' contains-errors prefix '*' cannot overflow
    |   |   `-ImplicitCastExpr 0x1318833a8 <col:26> '<dependent type>' contains-errors <LValueToRValue>
    |   |     `-RecoveryExpr 0x131883388 <col:26> '<dependent type>' contains-errors lvalue
    |   |-CompoundStmt 0x131883860 <line:24:13, line:28:13>
    |   |-BreakStmt 0x131883870 <line:29:13>
    |   |-LabelStmt 0x131883a30 <line:36:1, col:4> 'str'
    |   | `-NullStmt 0x1318839d8 <col:4>
    |   |-BreakStmt 0x131883bb0 <line:40:13>
    |   |-GotoStmt 0x131885520 <line:46:13, col:18> 'str' 0x1318839e0
    |   `-DefaultStmt 0x131885640 <line:47:9, col:16>
    |     `-NullStmt 0x131885638 <col:16>
    |-CallExpr 0x131885828 <line:50:5, col:10> 'int'
    | |-ImplicitCastExpr 0x131885810 <col:5> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x1318857a0 <col:5> 'int ()' Function 0x1318856e8 'pop' 'int ()'
    | `-IntegerLiteral 0x1318857c0 <col:9> 'int' 3
    `-ReturnStmt 0x131885870 <line:51:5, col:12>
      `-IntegerLiteral 0x131885850 <col:12> 'int' 0
