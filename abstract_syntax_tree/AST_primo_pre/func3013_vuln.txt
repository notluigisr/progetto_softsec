`-FunctionDecl 0x14000df18  line:1:1 invalid njs_string_trim 'int (const int *, int *, unsigned int)'
  |-ParmVarDecl 0x14000dcf0 <col:17, col:36> col:36 invalid value 'const int *'
  |-ParmVarDecl 0x14000dda8 <col:43, col:62> col:62 referenced invalid string 'int *'
  |-ParmVarDecl 0x14000de28 <line:2:5, col:14> col:14 used mode 'unsigned int'
  `-CompoundStmt 0x14100b960 <line:3:1, line:114:1>
    |-DeclStmt 0x14000e200 <line:5:5, col:50>
    | |-VarDecl 0x14000dff0 <col:5, col:28> col:28 used p 'const char *'
    | |-VarDecl 0x14000e070 <col:5, col:32> col:32 used prev 'const char *'
    | |-VarDecl 0x14000e0f0 <col:5, col:39> col:39 used start 'const char *'
    | `-VarDecl 0x14000e170 <col:5, col:47> col:47 used end 'const char *'
    |-CallExpr 0x141008200 <line:10:5, col:34> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x14000e390 <col:5> 'int ()' Function 0x14000e2d8 'njs_string_prop' 'int ()'
    | |-RecoveryExpr 0x14000e3b0 <col:21> '<dependent type>' contains-errors lvalue
    | `-RecoveryExpr 0x14000e3d0 <col:29> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x1410082b8 <line:12:5, col:21> 'const char *' contains-errors '='
    | |-DeclRefExpr 0x141008230 <col:5> 'const char *' lvalue Var 0x14000e0f0 'start' 'const char *'
    | `-CXXDependentScopeMemberExpr 0x141008270 <col:13, col:21> '<dependent type>' contains-errors lvalue ->start
    |   `-RecoveryExpr 0x141008250 <col:13> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x1410083e8 <line:13:5, col:35> 'const char *' contains-errors '='
    | |-DeclRefExpr 0x1410082d8 <col:5> 'const char *' lvalue Var 0x14000e170 'end' 'const char *'
    | `-BinaryOperator 0x1410083c8 <col:11, col:35> '<dependent type>' contains-errors '+'
    |   |-CXXDependentScopeMemberExpr 0x141008318 <col:11, col:19> '<dependent type>' contains-errors lvalue ->start
    |   | `-RecoveryExpr 0x1410082f8 <col:11> '<dependent type>' contains-errors lvalue
    |   `-CXXDependentScopeMemberExpr 0x141008380 <col:27, col:35> '<dependent type>' contains-errors lvalue ->size
    |     `-RecoveryExpr 0x141008360 <col:27> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x14100b388 <line:15:5, line:98:5> has_else
    | |-CallExpr 0x141008528 <line:15:9, col:43> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x1410084e8 <col:9> 'int ()' Function 0x141008430 'njs_is_byte_or_ascii_string' 'int ()'
    | | `-RecoveryExpr 0x141008508 <col:37> '<dependent type>' contains-errors lvalue
    | |-CompoundStmt 0x141008d78 <col:46, line:51:5>
    | | |-IfStmt 0x1410089b0 <line:17:9, line:31:9>
    | | | |-BinaryOperator 0x1410085c8 <line:17:13, col:20> '<dependent type>' contains-errors '&'
    | | | | |-DeclRefExpr 0x141008550 <col:13> 'unsigned int' lvalue ParmVar 0x14000de28 'mode' 'unsigned int'
    | | | | `-RecoveryExpr 0x1410085a8 <col:20> '<dependent type>' contains-errors lvalue
    | | | `-CompoundStmt 0x141008998 <col:36, line:31:9>
    | | |   `-ForStmt 0x141008960 <line:18:13, line:30:13>
    | | |     |-<<<NULL>>>
    | | |     |-<<<NULL>>>
    | | |     |-<<<NULL>>>
    | | |     |-<<<NULL>>>
    | | |     `-CompoundStmt 0x141008938 <line:18:24, line:30:13>
    | | |       |-IfStmt 0x141008698 <line:19:17, line:21:17>
    | | |       | |-BinaryOperator 0x141008658 <line:19:21, col:30> 'int' '=='
    | | |       | | |-ImplicitCastExpr 0x141008628 <col:21> 'const char *' <LValueToRValue>
    | | |       | | | `-DeclRefExpr 0x1410085e8 <col:21> 'const char *' lvalue Var 0x14000e0f0 'start' 'const char *'
    | | |       | | `-ImplicitCastExpr 0x141008640 <col:30> 'const char *' <LValueToRValue>
    | | |       | |   `-DeclRefExpr 0x141008608 <col:30> 'const char *' lvalue Var 0x14000e170 'end' 'const char *'
    | | |       | `-CompoundStmt 0x141008680 <col:35, line:21:17>
    | | |       |   `-BreakStmt 0x141008678 <line:20:21>
    | | |       |-IfStmt 0x141008910 <line:23:17, line:27:17>
    | | |       | |-CallExpr 0x141008858 <line:23:21, col:45> 'int'
    | | |       | | |-ImplicitCastExpr 0x141008840 <col:21> 'int (*)()' <FunctionToPointerDecay>
    | | |       | | | `-DeclRefExpr 0x141008798 <col:21> 'int ()' Function 0x1410086e0 'njs_is_whitespace' 'int ()'
    | | |       | | `-ImplicitCastExpr 0x141008898 <col:39, col:40> 'int' <IntegralCast>
    | | |       | |   `-ImplicitCastExpr 0x141008880 <col:39, col:40> 'char' <LValueToRValue>
    | | |       | |     `-UnaryOperator 0x1410087f0 <col:39, col:40> 'const char' lvalue prefix '*' cannot overflow
    | | |       | |       `-ImplicitCastExpr 0x1410087d8 <col:40> 'const char *' <LValueToRValue>
    | | |       | |         `-DeclRefExpr 0x1410087b8 <col:40> 'const char *' lvalue Var 0x14000e0f0 'start' 'const char *'
    | | |       | `-CompoundStmt 0x1410088f0 <col:48, line:27:17>
    | | |       |   |-UnaryOperator 0x1410088d0 <line:24:21, col:26> 'const char *' postfix '++'
    | | |       |   | `-DeclRefExpr 0x1410088b0 <col:21> 'const char *' lvalue Var 0x14000e0f0 'start' 'const char *'
    | | |       |   `-ContinueStmt 0x1410088e8 <line:26:21>
    | | |       `-BreakStmt 0x141008930 <line:29:17>
    | | `-IfStmt 0x141008d58 <line:33:9, line:49:9>
    | |   |-BinaryOperator 0x141008a48 <line:33:13, col:20> '<dependent type>' contains-errors '&'
    | |   | |-DeclRefExpr 0x1410089d0 <col:13> 'unsigned int' lvalue ParmVar 0x14000de28 'mode' 'unsigned int'
    | |   | `-RecoveryExpr 0x141008a28 <col:20> '<dependent type>' contains-errors lvalue
    | |   `-CompoundStmt 0x141008d40 <col:34, line:49:9>
    | |     `-ForStmt 0x141008d08 <line:34:13, line:48:13>
    | |       |-<<<NULL>>>
    | |       |-<<<NULL>>>
    | |       |-<<<NULL>>>
    | |       |-<<<NULL>>>
    | |       `-CompoundStmt 0x141008cd0 <line:34:24, line:48:13>
    | |         |-IfStmt 0x141008b18 <line:35:17, line:37:17>
    | |         | |-BinaryOperator 0x141008ad8 <line:35:21, col:30> 'int' '=='
    | |         | | |-ImplicitCastExpr 0x141008aa8 <col:21> 'const char *' <LValueToRValue>
    | |         | | | `-DeclRefExpr 0x141008a68 <col:21> 'const char *' lvalue Var 0x14000e0f0 'start' 'const char *'
    | |         | | `-ImplicitCastExpr 0x141008ac0 <col:30> 'const char *' <LValueToRValue>
    | |         | |   `-DeclRefExpr 0x141008a88 <col:30> 'const char *' lvalue Var 0x14000e170 'end' 'const char *'
    | |         | `-CompoundStmt 0x141008b00 <col:35, line:37:17>
    | |         |   `-BreakStmt 0x141008af8 <line:36:21>
    | |         |-UnaryOperator 0x141008b58 <line:39:17, col:20> 'const char *' postfix '--'
    | |         | `-DeclRefExpr 0x141008b38 <col:17> 'const char *' lvalue Var 0x14000e170 'end' 'const char *'
    | |         |-IfStmt 0x141008c70 <line:41:17, line:44:17>
    | |         | |-CallExpr 0x141008bf8 <line:41:21, col:43> 'int'
    | |         | | |-ImplicitCastExpr 0x141008be0 <col:21> 'int (*)()' <FunctionToPointerDecay>
    | |         | | | `-DeclRefExpr 0x141008b70 <col:21> 'int ()' Function 0x1410086e0 'njs_is_whitespace' 'int ()'
    | |         | | `-ImplicitCastExpr 0x141008c38 <col:39, col:40> 'int' <IntegralCast>
    | |         | |   `-ImplicitCastExpr 0x141008c20 <col:39, col:40> 'char' <LValueToRValue>
    | |         | |     `-UnaryOperator 0x141008bc8 <col:39, col:40> 'const char' lvalue prefix '*' cannot overflow
    | |         | |       `-ImplicitCastExpr 0x141008bb0 <col:40> 'const char *' <LValueToRValue>
    | |         | |         `-DeclRefExpr 0x141008b90 <col:40> 'const char *' lvalue Var 0x14000e170 'end' 'const char *'
    | |         | `-CompoundStmt 0x141008c58 <col:46, line:44:17>
    | |         |   `-ContinueStmt 0x141008c50 <line:43:21>
    | |         |-UnaryOperator 0x141008cb0 <line:46:17, col:20> 'const char *' postfix '++'
    | |         | `-DeclRefExpr 0x141008c90 <col:17> 'const char *' lvalue Var 0x14000e170 'end' 'const char *'
    | |         `-BreakStmt 0x141008cc8 <line:47:17>
    | `-CompoundStmt 0x14100b368 <line:51:12, line:98:5>
    |   |-IfStmt 0x14100ad28 <line:54:9, line:73:9>
    |   | |-BinaryOperator 0x141008e10 <line:54:13, col:20> '<dependent type>' contains-errors '&'
    |   | | |-DeclRefExpr 0x141008d98 <col:13> 'unsigned int' lvalue ParmVar 0x14000de28 'mode' 'unsigned int'
    |   | | `-RecoveryExpr 0x141008df0 <col:20> '<dependent type>' contains-errors lvalue
    |   | `-CompoundStmt 0x14100ad08 <col:36, line:73:9>
    |   |   |-CallExpr 0x141008fc0 <line:55:13, col:38> '<dependent type>' contains-errors
    |   |   | |-DeclRefExpr 0x141008f10 <col:13> 'int ()' Function 0x141008e58 'njs_utf8_decode_init' 'int ()'
    |   |   | `-UnaryOperator 0x141008fa8 <col:34, col:35> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   |   |   `-RecoveryExpr 0x141008f88 <col:35> '<dependent type>' contains-errors lvalue
    |   |   `-ForStmt 0x14100acd0 <line:57:13, line:72:13>
    |   |     |-<<<NULL>>>
    |   |     |-<<<NULL>>>
    |   |     |-<<<NULL>>>
    |   |     |-<<<NULL>>>
    |   |     `-CompoundStmt 0x14100ac98 <line:57:24, line:72:13>
    |   |       |-IfStmt 0x141009098 <line:58:17, line:60:17>
    |   |       | |-BinaryOperator 0x141009058 <line:58:21, col:30> 'int' '=='
    |   |       | | |-ImplicitCastExpr 0x141009028 <col:21> 'const char *' <LValueToRValue>
    |   |       | | | `-DeclRefExpr 0x141008fe8 <col:21> 'const char *' lvalue Var 0x14000e0f0 'start' 'const char *'
    |   |       | | `-ImplicitCastExpr 0x141009040 <col:30> 'const char *' <LValueToRValue>
    |   |       | |   `-DeclRefExpr 0x141009008 <col:30> 'const char *' lvalue Var 0x14000e170 'end' 'const char *'
    |   |       | `-CompoundStmt 0x141009080 <col:35, line:60:17>
    |   |       |   `-BreakStmt 0x141009078 <line:59:21>
    |   |       |-BinaryOperator 0x141009110 <line:62:17, col:21> 'const char *' '='
    |   |       | |-DeclRefExpr 0x1410090b8 <col:17> 'const char *' lvalue Var 0x14000dff0 'p' 'const char *'
    |   |       | `-ImplicitCastExpr 0x1410090f8 <col:21> 'const char *' <LValueToRValue>
    |   |       |   `-DeclRefExpr 0x1410090d8 <col:21> 'const char *' lvalue Var 0x14000e0f0 'start' 'const char *'
    |   |       |-IfStmt 0x14100abf8 <line:65:17, line:68:17>
    |   |       | |-RecoveryExpr 0x14100abb8 <line:65:21, col:46> '_Bool' contains-errors
    |   |       | `-CompoundStmt 0x14100abe0 <col:49, line:68:17>
    |   |       |   `-ContinueStmt 0x14100abd8 <line:67:21>
    |   |       |-BinaryOperator 0x14100ac70 <line:70:17, col:25> 'const char *' '='
    |   |       | |-DeclRefExpr 0x14100ac18 <col:17> 'const char *' lvalue Var 0x14000e0f0 'start' 'const char *'
    |   |       | `-ImplicitCastExpr 0x14100ac58 <col:25> 'const char *' <LValueToRValue>
    |   |       |   `-DeclRefExpr 0x14100ac38 <col:25> 'const char *' lvalue Var 0x14000dff0 'p' 'const char *'
    |   |       `-BreakStmt 0x14100ac90 <line:71:17>
    |   `-IfStmt 0x14100b348 <line:75:9, line:97:9>
    |     |-RecoveryExpr 0x14100ad68 <line:75:13, col:20> '_Bool' contains-errors
    |     `-CompoundStmt 0x14100b328 <col:34, line:97:9>
    |       |-BinaryOperator 0x14100ade0 <line:76:13, col:20> 'const char *' '='
    |       | |-DeclRefExpr 0x14100ad88 <col:13> 'const char *' lvalue Var 0x14000e070 'prev' 'const char *'
    |       | `-ImplicitCastExpr 0x14100adc8 <col:20> 'const char *' <LValueToRValue>
    |       |   `-DeclRefExpr 0x14100ada8 <col:20> 'const char *' lvalue Var 0x14000e170 'end' 'const char *'
    |       `-ForStmt 0x14100b2f0 <line:80:13, line:96:13>
    |         |-<<<NULL>>>
    |         |-<<<NULL>>>
    |         |-<<<NULL>>>
    |         |-<<<NULL>>>
    |         `-CompoundStmt 0x14100b2b0 <line:80:24, line:96:13>
    |           |-IfStmt 0x14100aed0 <line:81:17, line:83:17>
    |           | |-BinaryOperator 0x14100ae90 <line:81:21, col:30> 'int' '=='
    |           | | |-ImplicitCastExpr 0x14100ae60 <col:21> 'const char *' <LValueToRValue>
    |           | | | `-DeclRefExpr 0x14100ae20 <col:21> 'const char *' lvalue Var 0x14000e0f0 'start' 'const char *'
    |           | | `-ImplicitCastExpr 0x14100ae78 <col:30> 'const char *' <LValueToRValue>
    |           | |   `-DeclRefExpr 0x14100ae40 <col:30> 'const char *' lvalue Var 0x14000e070 'prev' 'const char *'
    |           | `-CompoundStmt 0x14100aeb8 <col:36, line:83:17>
    |           |   `-BreakStmt 0x14100aeb0 <line:82:21>
    |           |-BinaryOperator 0x14100b0a0 <line:85:17, col:42> 'const char *' '='
    |           | |-DeclRefExpr 0x14100aef0 <col:17> 'const char *' lvalue Var 0x14000e070 'prev' 'const char *'
    |           | `-ImplicitCastExpr 0x14100b088 <col:24, col:42> 'const char *' <IntegralToPointer>
    |           |   `-CallExpr 0x14100b048 <col:24, col:42> 'int'
    |           |     |-ImplicitCastExpr 0x14100b030 <col:24> 'int (*)()' <FunctionToPointerDecay>
    |           |     | `-DeclRefExpr 0x14100aff0 <col:24> 'int ()' Function 0x14100af38 'njs_utf8_prev' 'int ()'
    |           |     `-ImplicitCastExpr 0x14100b070 <col:38> 'const char *' <LValueToRValue>
    |           |       `-DeclRefExpr 0x14100b010 <col:38> 'const char *' lvalue Var 0x14000e070 'prev' 'const char *'
    |           |-BinaryOperator 0x14100b118 <line:86:17, col:21> 'const char *' '='
    |           | |-DeclRefExpr 0x14100b0c0 <col:17> 'const char *' lvalue Var 0x14000dff0 'p' 'const char *'
    |           | `-ImplicitCastExpr 0x14100b100 <col:21> 'const char *' <LValueToRValue>
    |           |   `-DeclRefExpr 0x14100b0e0 <col:21> 'const char *' lvalue Var 0x14000e070 'prev' 'const char *'
    |           |-IfStmt 0x14100b210 <line:89:17, line:92:17>
    |           | |-RecoveryExpr 0x14100b1d0 <line:89:21, col:46> '_Bool' contains-errors
    |           | `-CompoundStmt 0x14100b1f8 <col:49, line:92:17>
    |           |   `-ContinueStmt 0x14100b1f0 <line:91:21>
    |           |-BinaryOperator 0x14100b288 <line:94:17, col:23> 'const char *' '='
    |           | |-DeclRefExpr 0x14100b230 <col:17> 'const char *' lvalue Var 0x14000e170 'end' 'const char *'
    |           | `-ImplicitCastExpr 0x14100b270 <col:23> 'const char *' <LValueToRValue>
    |           |   `-DeclRefExpr 0x14100b250 <col:23> 'const char *' lvalue Var 0x14000dff0 'p' 'const char *'
    |           `-BreakStmt 0x14100b2a8 <line:95:17>
    |-IfStmt 0x14100b608 <line:100:5, line:104:5>
    | |-BinaryOperator 0x14100b428 <line:100:9, col:18> 'int' '=='
    | | |-ImplicitCastExpr 0x14100b3f8 <col:9> 'const char *' <LValueToRValue>
    | | | `-DeclRefExpr 0x14100b3b8 <col:9> 'const char *' lvalue Var 0x14000e0f0 'start' 'const char *'
    | | `-ImplicitCastExpr 0x14100b410 <col:18> 'const char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x14100b3d8 <col:18> 'const char *' lvalue Var 0x14000e170 'end' 'const char *'
    | `-CompoundStmt 0x14100b5e8 <col:23, line:104:5>
    |   |-BinaryOperator 0x14100b4f8 <line:101:9, col:26> '<dependent type>' contains-errors '='
    |   | |-CXXDependentScopeMemberExpr 0x14100b490 <col:9, col:17> '<dependent type>' contains-errors lvalue ->length
    |   | | `-RecoveryExpr 0x14100b468 <col:9> '<dependent type>' contains-errors lvalue
    |   | |   `-DeclRefExpr 0x14100b448 <col:9> 'int *' lvalue ParmVar 0x14000dda8 'string' 'int *'
    |   | `-IntegerLiteral 0x14100b4d8 <col:26> 'int' 0
    |   `-BinaryOperator 0x14100b5c8 <line:102:9, col:24> '<dependent type>' contains-errors '='
    |     |-CXXDependentScopeMemberExpr 0x14100b560 <col:9, col:17> '<dependent type>' contains-errors lvalue ->size
    |     | `-RecoveryExpr 0x14100b538 <col:9> '<dependent type>' contains-errors lvalue
    |     |   `-DeclRefExpr 0x14100b518 <col:9> 'int *' lvalue ParmVar 0x14000dda8 'string' 'int *'
    |     `-IntegerLiteral 0x14100b5a8 <col:24> 'int' 0
    |-BinaryOperator 0x14100b7d8 <line:107:5, col:26> '<dependent type>' contains-errors '='
    | |-CXXDependentScopeMemberExpr 0x14100b700 <col:5, col:13> '<dependent type>' contains-errors lvalue ->size
    | | `-RecoveryExpr 0x14100b6d8 <col:5> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x14100b6b8 <col:5> 'int *' lvalue ParmVar 0x14000dda8 'string' 'int *'
    | `-BinaryOperator 0x14100b7b8 <col:20, col:26> 'long' '-'
    |   |-ImplicitCastExpr 0x14100b788 <col:20> 'const char *' <LValueToRValue>
    |   | `-DeclRefExpr 0x14100b748 <col:20> 'const char *' lvalue Var 0x14000e170 'end' 'const char *'
    |   `-ImplicitCastExpr 0x14100b7a0 <col:26> 'const char *' <LValueToRValue>
    |     `-DeclRefExpr 0x14100b768 <col:26> 'const char *' lvalue Var 0x14000e0f0 'start' 'const char *'
    `-IfStmt 0x14100b940 <line:109:5, line:111:5>
      |-BinaryOperator 0x14100b880 <line:109:9, col:27> 'int' contains-errors '!='
      | |-CXXDependentScopeMemberExpr 0x14100b818 <col:9, col:17> '<dependent type>' contains-errors lvalue ->length
      | | `-RecoveryExpr 0x14100b7f8 <col:9> '<dependent type>' contains-errors lvalue
      | `-IntegerLiteral 0x14100b860 <col:27> 'int' 0
      `-CompoundStmt 0x14100b930 <col:30, line:111:5>
