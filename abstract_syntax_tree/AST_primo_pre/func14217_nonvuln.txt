`-FunctionDecl 0x14680e038  line:1:14 invalid ResizeOutputTensors 'int (int *, int *, const int *, const int *, int)'
  |-ParmVarDecl 0x14680dd28 <col:34, col:49> col:49 invalid context 'int *'
  |-ParmVarDecl 0x14680dda8 <col:58, col:70> col:70 invalid node 'int *'
  |-ParmVarDecl 0x14680de28 <line:2:34, col:54> col:54 invalid axis 'const int *'
  |-ParmVarDecl 0x14680dea8 <line:3:34, col:54> col:54 invalid input 'const int *'
  |-ParmVarDecl 0x14680df28 <col:61, col:65> col:65 used num_splits 'int'
  `-CompoundStmt 0x146122f08 <col:77, line:27:1>
    |-DeclStmt 0x14680e1a0 <line:4:3, col:47>
    | `-VarDecl 0x14680e120 <col:3, col:7> col:7 used axis_value 'int'
    |-IfStmt 0x147809270 <line:5:3, line:7:3>
    | |-BinaryOperator 0x14680e210 <line:5:7, col:20> 'int' '<'
    | | |-ImplicitCastExpr 0x14680e1f8 <col:7> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14680e1b8 <col:7> 'int' lvalue Var 0x14680e120 'axis_value' 'int'
    | | `-IntegerLiteral 0x14680e1d8 <col:20> 'int' 0
    | `-CompoundStmt 0x147809258 <col:23, line:7:3>
    |   `-CompoundAssignOperator 0x147809228 <line:6:5, col:38> 'int' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    |     |-DeclRefExpr 0x14680e230 <col:5> 'int' lvalue Var 0x14680e120 'axis_value' 'int'
    |     `-CallExpr 0x147809200 <col:19, col:38> '<dependent type>' contains-errors
    |       |-DeclRefExpr 0x14680e3b0 <col:19> 'int ()' Function 0x14680e2f8 'NumDimensions' 'int ()'
    |       `-RecoveryExpr 0x14680e3d0 <col:33> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x147809428 <line:9:3, col:42> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x147809370 <col:3> 'int ()' Function 0x1478092b8 'TF_LITE_ENSURE' 'int ()'
    | |-RecoveryExpr 0x147809390 <col:18> '<dependent type>' contains-errors lvalue
    | `-BinaryOperator 0x147809408 <col:27, col:41> 'int' '>='
    |   |-ImplicitCastExpr 0x1478093f0 <col:27> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x1478093b0 <col:27> 'int' lvalue Var 0x14680e120 'axis_value' 'int'
    |   `-IntegerLiteral 0x1478093d0 <col:41> 'int' 0
    |-CallExpr 0x147809540 <line:10:3, col:60> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x147809458 <col:3> 'int ()' Function 0x1478092b8 'TF_LITE_ENSURE' 'int ()'
    | |-RecoveryExpr 0x147809478 <col:18> '<dependent type>' contains-errors lvalue
    | `-BinaryOperator 0x147809520 <col:27, col:59> 'int' contains-errors '<'
    |   |-DeclRefExpr 0x147809498 <col:27> 'int' lvalue Var 0x14680e120 'axis_value' 'int'
    |   `-CallExpr 0x1478094f8 <col:40, col:59> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x1478094b8 <col:40> 'int ()' Function 0x14680e2f8 'NumDimensions' 'int ()'
    |     `-RecoveryExpr 0x1478094d8 <col:54> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x147809760 <line:12:3, col:60>
    | `-VarDecl 0x147809588 <col:3, col:59> col:13 used input_size 'const int' cinit
    |   `-CallExpr 0x147809730 <col:26, col:59> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x1478096d0 <col:26> 'int ()' Function 0x147809618 'SizeOfDimension' 'int ()'
    |     |-RecoveryExpr 0x1478096f0 <col:42> '<dependent type>' contains-errors lvalue
    |     `-DeclRefExpr 0x147809710 <col:49> 'int' lvalue Var 0x14680e120 'axis_value' 'int'
    |-CallExpr 0x147809830 <line:13:3, col:42> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x147809778 <col:3> 'int ()' Function 0x1478092b8 'TF_LITE_ENSURE' 'int ()'
    | |-RecoveryExpr 0x147809798 <col:18> '<dependent type>' contains-errors lvalue
    | `-BinaryOperator 0x147809810 <col:27, col:41> 'int' '!='
    |   |-ImplicitCastExpr 0x1478097f8 <col:27> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x1478097b8 <col:27> 'int' lvalue ParmVar 0x14680df28 'num_splits' 'int'
    |   `-IntegerLiteral 0x1478097d8 <col:41> 'int' 0
    |-CallExpr 0x147809ab0 <line:14:3, line:15:27> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x147809940 <line:14:3> 'int ()' Function 0x147809888 'TF_LITE_ENSURE_MSG' 'int ()'
    | |-RecoveryExpr 0x147809960 <col:22> '<dependent type>' contains-errors lvalue
    | |-BinaryOperator 0x147809a30 <col:31, col:58> 'int' contains-errors '=='
    | | |-BinaryOperator 0x1478099f0 <col:31, col:44> 'int' contains-errors '%'
    | | | |-ImplicitCastExpr 0x1478099c0 <col:31> 'int' contains-errors <LValueToRValue>
    | | | | `-DeclRefExpr 0x147809980 <col:31> 'const int' contains-errors lvalue Var 0x147809588 'input_size' 'const int'
    | | | `-ImplicitCastExpr 0x1478099d8 <col:44> 'int' <LValueToRValue>
    | | |   `-DeclRefExpr 0x1478099a0 <col:44> 'int' lvalue ParmVar 0x14680df28 'num_splits' 'int'
    | | `-IntegerLiteral 0x147809a10 <col:58> 'int' 0
    | `-StringLiteral 0x147809a90 <line:15:22> 'char[4]' lvalue "STR"
    |-DeclStmt 0x147809bf8 <line:16:3, col:49>
    | `-VarDecl 0x147809b00 <col:3, col:39> col:13 used slice_size 'const int' cinit
    |   `-BinaryOperator 0x147809bd8 <col:26, col:39> 'int' contains-errors '/'
    |     |-ImplicitCastExpr 0x147809ba8 <col:26> 'int' contains-errors <LValueToRValue>
    |     | `-DeclRefExpr 0x147809b68 <col:26> 'const int' contains-errors lvalue Var 0x147809588 'input_size' 'const int'
    |     `-ImplicitCastExpr 0x147809bc0 <col:39> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x147809b88 <col:39> 'int' lvalue ParmVar 0x14680df28 'num_splits' 'int'
    `-ForStmt 0x146122ed0 <line:18:3, line:24:3>
      |-DeclStmt 0x147809cb0 <line:18:8, col:17>
      | `-VarDecl 0x147809c28 <col:8, col:16> col:12 used i 'int' cinit
      |   `-IntegerLiteral 0x147809c90 <col:16> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x147809e30 <col:19, col:38> 'int' contains-errors '<'
      | |-DeclRefExpr 0x147809cc8 <col:19> 'int' lvalue Var 0x147809c28 'i' 'int'
      | `-CallExpr 0x147809e08 <col:23, col:38> '<dependent type>' contains-errors
      |   |-DeclRefExpr 0x147809dc8 <col:23> 'int ()' Function 0x147809d10 'NumOutputs' 'int ()'
      |   `-RecoveryExpr 0x147809de8 <col:34> '<dependent type>' contains-errors lvalue
      |-UnaryOperator 0x147809e70 <col:41, col:43> 'int' prefix '++'
      | `-DeclRefExpr 0x147809e50 <col:43> 'int' lvalue Var 0x147809c28 'i' 'int'
      `-CompoundStmt 0x146122ec0 <col:46, line:24:3>
