`-FunctionDecl 0x1280266d8  line:1:12 io_do_iopoll 'int (struct io_ring_ctx *, unsigned int *, long)' static
  |-ParmVarDecl 0x12800e248 <col:25, col:45> col:45 used ctx 'struct io_ring_ctx *'
  |-ParmVarDecl 0x12800e2f8 <col:50, col:64> col:64 used nr_events 'unsigned int *'
  |-ParmVarDecl 0x12800e378 <line:2:4, col:9> col:9 used min 'long'
  `-CompoundStmt 0x128029f78 <line:3:1, line:37:1>
    |-DeclStmt 0x128026a60 <line:4:2, col:28>
    | |-RecordDecl 0x1280267e0 <col:2, col:9> col:9 struct io_kiocb
    | |-VarDecl 0x128026948 <col:2, col:19> col:19 used req 'struct io_kiocb *'
    | `-VarDecl 0x1280269d8 <col:2, col:25> col:25 used tmp 'struct io_kiocb *'
    |-CallExpr 0x128026c20 <line:5:2, col:16> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x128026ba0 <col:2> 'int ()' Function 0x128026ae8 'LIST_HEAD' 'int ()'
    | `-RecoveryExpr 0x128026c00 <col:12> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x128026cc8 <line:7:2, col:9>
    | `-VarDecl 0x128026c60 <col:2, col:6> col:6 used ret 'int'
    |-BinaryOperator 0x128026ea8 <line:12:2, col:8> 'int' '='
    | |-DeclRefExpr 0x128026e68 <col:2> 'int' lvalue Var 0x128026c60 'ret' 'int'
    | `-IntegerLiteral 0x128026e88 <col:8> 'int' 0
    |-CallExpr 0x1280270f8 <line:13:2, col:58> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x128026fa8 <col:2> 'int ()' Function 0x128026ef0 'list_for_each_entry_safe' 'int ()'
    | |-DeclRefExpr 0x128026fc8 <col:27> 'struct io_kiocb *' lvalue Var 0x128026948 'req' 'struct io_kiocb *'
    | |-DeclRefExpr 0x128026fe8 <col:32> 'struct io_kiocb *' lvalue Var 0x1280269d8 'tmp' 'struct io_kiocb *'
    | |-UnaryOperator 0x128027068 <col:37, col:43> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | `-RecoveryExpr 0x128027040 <col:38, col:43> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x128027008 <col:38> 'struct io_ring_ctx *' lvalue ParmVar 0x12800e248 'ctx' 'struct io_ring_ctx *'
    | `-RecoveryExpr 0x1280270d8 <col:54> '<dependent type>' contains-errors lvalue
    |-CompoundStmt 0x128029d88 <col:60, line:31:2>
    | |-DeclStmt 0x1280273e8 <line:14:3, col:39>
    | | |-RecordDecl 0x128027138 <col:3, col:10> col:10 struct kiocb
    | | `-VarDecl 0x1280272a8 <col:3, col:34> col:17 used kiocb 'struct kiocb *' cinit
    | |   `-UnaryOperator 0x1280273b8 <col:25, col:34> '<dependent type>' contains-errors prefix '&' cannot overflow
    | |     `-CXXDependentScopeMemberExpr 0x128027370 <col:26, col:34> '<dependent type>' contains-errors lvalue .kiocb
    | |       `-RecoveryExpr 0x128027348 <col:26, col:31> '<dependent type>' contains-errors lvalue
    | |         `-DeclRefExpr 0x128027310 <col:26> 'struct io_kiocb *' lvalue Var 0x128026948 'req' 'struct io_kiocb *'
    | |-IfStmt 0x128029938 <line:17:3, line:20:3>
    | | |-BinaryOperator 0x1280274b8 <line:17:7, col:20> '<dependent type>' contains-errors '&'
    | | | |-RecoveryExpr 0x128027438 <col:7, col:12> '<dependent type>' contains-errors lvalue
    | | | | `-DeclRefExpr 0x128027400 <col:7> 'struct io_kiocb *' lvalue Var 0x128026948 'req' 'struct io_kiocb *'
    | | | `-RecoveryExpr 0x128027498 <col:20> '<dependent type>' contains-errors lvalue
    | | `-CompoundStmt 0x128029920 <col:44, line:20:3>
    | |   `-CallExpr 0x1280298f0 <line:18:4, col:36> '<dependent type>' contains-errors
    | |     |-DeclRefExpr 0x1280275b8 <col:4> 'int ()' Function 0x128027500 'list_move_tail' 'int ()'
    | |     |-UnaryOperator 0x128029840 <col:19, col:25> '<dependent type>' contains-errors prefix '&' cannot overflow
    | |     | `-RecoveryExpr 0x128029818 <col:20, col:25> '<dependent type>' contains-errors lvalue
    | |     |   `-DeclRefExpr 0x1280275d8 <col:20> 'struct io_kiocb *' lvalue Var 0x128026948 'req' 'struct io_kiocb *'
    | |     `-UnaryOperator 0x1280298d8 <col:31, col:32> '<dependent type>' contains-errors prefix '&' cannot overflow
    | |       `-RecoveryExpr 0x1280298b8 <col:32> '<dependent type>' contains-errors lvalue
    | `-BinaryOperator 0x128029d68 <line:30:3, col:9> 'int' '='
    |   |-DeclRefExpr 0x128029d28 <col:3> 'int' lvalue Var 0x128026c60 'ret' 'int'
    |   `-IntegerLiteral 0x128029d48 <col:9> 'int' 0
    `-ReturnStmt 0x128029f68 <line:36:2, col:9>
      `-ImplicitCastExpr 0x128029f50 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x128029f30 <col:9> 'int' lvalue Var 0x128026c60 'ret' 'int'
