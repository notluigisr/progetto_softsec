`-FunctionDecl 0x1451281a8  line:1:1 PHP_FUNCTION 'int (int)'
  |-ParmVarDecl 0x1451280d8 <col:14> col:14 imagefilledarc 'int'
  `-CompoundStmt 0x14680af18 <line:2:1, line:29:1>
    |-DeclStmt 0x1451283e8 <line:6:2, col:11>
    | |-VarDecl 0x1451282e8 <col:2, col:6> col:6 used e 'int'
    | `-VarDecl 0x145128368 <col:2, col:9> col:9 used st 'int'
    |-IfStmt 0x14680aab8 <line:8:2, line:10:2>
    | |-BinaryOperator 0x14680aa70 <line:8:6, col:101> 'int' contains-errors '=='
    | | |-CallExpr 0x14680a9d8 <col:6, col:96> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x145128510 <col:6> 'int ()' Function 0x145128458 'zend_parse_parameters' 'int ()'
    | | | |-CallExpr 0x14680a7c0 <col:28, col:42> 'int'
    | | | | `-ImplicitCastExpr 0x14680a7a8 <col:28> 'int (*)()' <FunctionToPointerDecay>
    | | | |   `-DeclRefExpr 0x145128610 <col:28> 'int ()' Function 0x145128558 'ZEND_NUM_ARGS' 'int ()'
    | | | |-StringLiteral 0x1451286e0 <col:45> 'char[4]' lvalue "STR"
    | | | |-UnaryOperator 0x14680a800 <col:52, col:53> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | | | `-RecoveryExpr 0x14680a7e0 <col:53> '<dependent type>' contains-errors lvalue
    | | | |-UnaryOperator 0x14680a838 <col:57, col:58> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | | | `-RecoveryExpr 0x14680a818 <col:58> '<dependent type>' contains-errors lvalue
    | | | |-UnaryOperator 0x14680a870 <col:62, col:63> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | | | `-RecoveryExpr 0x14680a850 <col:63> '<dependent type>' contains-errors lvalue
    | | | |-UnaryOperator 0x14680a8a8 <col:67, col:68> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | | | `-RecoveryExpr 0x14680a888 <col:68> '<dependent type>' contains-errors lvalue
    | | | |-UnaryOperator 0x14680a8e0 <col:71, col:72> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | | | `-RecoveryExpr 0x14680a8c0 <col:72> '<dependent type>' contains-errors lvalue
    | | | |-UnaryOperator 0x14680a918 <col:75, col:76> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | | | `-RecoveryExpr 0x14680a8f8 <col:76> '<dependent type>' contains-errors lvalue
    | | | |-UnaryOperator 0x14680a950 <col:80, col:81> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | | | `-RecoveryExpr 0x14680a930 <col:81> '<dependent type>' contains-errors lvalue
    | | | |-UnaryOperator 0x14680a988 <col:84, col:85> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | | | `-RecoveryExpr 0x14680a968 <col:85> '<dependent type>' contains-errors lvalue
    | | | `-UnaryOperator 0x14680a9c0 <col:90, col:91> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | |   `-RecoveryExpr 0x14680a9a0 <col:91> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x14680aa50 <col:101> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x14680aaa0 <col:110, line:10:2>
    |   `-ReturnStmt 0x14680aa90 <line:9:3>
    |-IfStmt 0x14680ab38 <line:12:2, line:14:2>
    | |-RecoveryExpr 0x14680ab08 <line:12:6, col:75> '_Bool' contains-errors
    | `-CompoundStmt 0x14680ab28 <col:81, line:14:2>
    |-IfStmt 0x14680ac78 <line:17:2, line:19:2>
    | |-BinaryOperator 0x14680abd0 <line:17:6, col:10> 'int' '<'
    | | |-ImplicitCastExpr 0x14680abb8 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14680ab78 <col:6> 'int' lvalue Var 0x1451282e8 'e' 'int'
    | | `-IntegerLiteral 0x14680ab98 <col:10> 'int' 0
    | `-CompoundStmt 0x14680ac60 <col:13, line:19:2>
    |   `-CompoundAssignOperator 0x14680ac30 <line:18:3, col:8> 'int' '%=' ComputeLHSTy='int' ComputeResultTy='int'
    |     |-DeclRefExpr 0x14680abf0 <col:3> 'int' lvalue Var 0x1451282e8 'e' 'int'
    |     `-IntegerLiteral 0x14680ac10 <col:8> 'int' 360
    `-IfStmt 0x14680adb8 <line:22:2, line:24:2>
      |-BinaryOperator 0x14680ad10 <line:22:6, col:11> 'int' '<'
      | |-ImplicitCastExpr 0x14680acf8 <col:6> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x14680acb8 <col:6> 'int' lvalue Var 0x145128368 'st' 'int'
      | `-IntegerLiteral 0x14680acd8 <col:11> 'int' 0
      `-CompoundStmt 0x14680ada0 <col:14, line:24:2>
        `-CompoundAssignOperator 0x14680ad70 <line:23:3, col:9> 'int' '%=' ComputeLHSTy='int' ComputeResultTy='int'
          |-DeclRefExpr 0x14680ad30 <col:3> 'int' lvalue Var 0x145128368 'st' 'int'
          `-IntegerLiteral 0x14680ad50 <col:9> 'int' 360
