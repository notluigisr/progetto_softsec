`-FunctionDecl 0x149941b58  line:1:1 referenced invalid pimv2_addr_print 'int (int *, const char *, enum pimv2_addrtype, int)'
  |-ParmVarDecl 0x149928328 <col:18, col:38> col:38 invalid ndo 'int *'
  |-ParmVarDecl 0x1499283a8 <line:2:18, col:32> col:32 used bp 'const char *'
  |-ParmVarDecl 0x149928948 <col:36, col:56> col:56 invalid at 'enum pimv2_addrtype'
  |-ParmVarDecl 0x149941a00 <col:60, col:64> col:64 used silent 'int'
  `-CompoundStmt 0x1499444e0 <line:3:1, line:92:1>
    |-DeclStmt 0x149941ca0 <line:4:2, col:8>
    | `-VarDecl 0x149941c38 <col:2, col:6> col:6 used af 'int'
    |-DeclStmt 0x149941dd0 <line:5:2, col:17>
    | |-VarDecl 0x149941cd0 <col:2, col:6> col:6 used len 'int'
    | `-VarDecl 0x149941d50 <col:2, col:11> col:11 used hdrlen 'int'
    |-CallExpr 0x149942028 <line:7:2, col:17> 'int'
    | |-ImplicitCastExpr 0x149942010 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x149941f40 <col:2> 'int ()' Function 0x149941e88 'ND_TCHECK' 'int ()'
    | `-ImplicitCastExpr 0x149942068 <col:12, col:16> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x149942050 <col:12, col:16> 'char' <LValueToRValue>
    |     `-ArraySubscriptExpr 0x149941fb8 <col:12, col:16> 'const char' lvalue
    |       |-ImplicitCastExpr 0x149941fa0 <col:12> 'const char *' <LValueToRValue>
    |       | `-DeclRefExpr 0x149941f60 <col:12> 'const char *' lvalue ParmVar 0x1499283a8 'bp' 'const char *'
    |       `-IntegerLiteral 0x149941f80 <col:15> 'int' 0
    |-IfStmt 0x14900b198 <line:9:2, line:40:2> has_else
    | |-BinaryOperator 0x149942118 <line:9:6, col:24> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x1499420f8 <col:6> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x149942098 <col:24> 'int' 0
    | |-CompoundStmt 0x1499429a0 <col:27, line:26:2>
    | | |-CallExpr 0x1499421e8 <line:10:3, col:18> 'int'
    | | | |-ImplicitCastExpr 0x1499421d0 <col:3> 'int (*)()' <FunctionToPointerDecay>
    | | | | `-DeclRefExpr 0x149942138 <col:3> 'int ()' Function 0x149941e88 'ND_TCHECK' 'int ()'
    | | | `-ImplicitCastExpr 0x149942228 <col:13, col:17> 'int' <IntegralCast>
    | | |   `-ImplicitCastExpr 0x149942210 <col:13, col:17> 'char' <LValueToRValue>
    | | |     `-ArraySubscriptExpr 0x1499421b0 <col:13, col:17> 'const char' lvalue
    | | |       |-ImplicitCastExpr 0x149942198 <col:13> 'const char *' <LValueToRValue>
    | | |       | `-DeclRefExpr 0x149942158 <col:13> 'const char *' lvalue ParmVar 0x1499283a8 'bp' 'const char *'
    | | |       `-IntegerLiteral 0x149942178 <col:16> 'int' 1
    | | |-SwitchStmt 0x1499422e8 <line:11:3, line:22:3>
    | | | |-ImplicitCastExpr 0x1499422d0 <line:11:11, col:15> 'int' <IntegralCast>
    | | | | `-ImplicitCastExpr 0x1499422b8 <col:11, col:15> 'char' <LValueToRValue>
    | | | |   `-ArraySubscriptExpr 0x149942298 <col:11, col:15> 'const char' lvalue
    | | | |     |-ImplicitCastExpr 0x149942280 <col:11> 'const char *' <LValueToRValue>
    | | | |     | `-DeclRefExpr 0x149942240 <col:11> 'const char *' lvalue ParmVar 0x1499283a8 'bp' 'const char *'
    | | | |     `-IntegerLiteral 0x149942260 <col:14> 'int' 0
    | | | `-CompoundStmt 0x1499427b8 <col:18, line:22:3>
    | | |   |-CaseStmt 0x149942348 <line:12:3, line:13:9>
    | | |   | |-ConstantExpr 0x149942330 <line:12:8> 'int'
    | | |   | | `-IntegerLiteral 0x149942310 <col:8> 'int' 1
    | | |   | `-BinaryOperator 0x1499423e8 <line:13:4, col:9> 'int' contains-errors '='
    | | |   |   |-DeclRefExpr 0x149942370 <col:4> 'int' lvalue Var 0x149941c38 'af' 'int'
    | | |   |   `-RecoveryExpr 0x1499423c8 <col:9> '<dependent type>' contains-errors lvalue
    | | |   |-BreakStmt 0x149942528 <line:15:4>
    | | |   |-CaseStmt 0x149942568 <line:16:3, line:17:9>
    | | |   | |-ConstantExpr 0x149942550 <line:16:8> 'int'
    | | |   | | `-IntegerLiteral 0x149942530 <col:8> 'int' 2
    | | |   | `-BinaryOperator 0x149942608 <line:17:4, col:9> 'int' contains-errors '='
    | | |   |   |-DeclRefExpr 0x149942590 <col:4> 'int' lvalue Var 0x149941c38 'af' 'int'
    | | |   |   `-RecoveryExpr 0x1499425e8 <col:9> '<dependent type>' contains-errors lvalue
    | | |   |-BreakStmt 0x149942748 <line:19:4>
    | | |   `-DefaultStmt 0x149942798 <line:20:3, line:21:12>
    | | |     `-ReturnStmt 0x149942788 <col:4, col:12>
    | | |       `-UnaryOperator 0x149942770 <col:11, col:12> 'int' prefix '-'
    | | |         `-IntegerLiteral 0x149942750 <col:12> 'int' 1
    | | |-IfStmt 0x149942920 <line:23:3, line:24:12>
    | | | |-BinaryOperator 0x1499428b8 <line:23:7, col:16> 'int' '!='
    | | | | |-ImplicitCastExpr 0x1499428a0 <col:7, col:11> 'int' <IntegralCast>
    | | | | | `-ImplicitCastExpr 0x149942888 <col:7, col:11> 'char' <LValueToRValue>
    | | | | |   `-ArraySubscriptExpr 0x149942848 <col:7, col:11> 'const char' lvalue
    | | | | |     |-ImplicitCastExpr 0x149942830 <col:7> 'const char *' <LValueToRValue>
    | | | | |     | `-DeclRefExpr 0x1499427f0 <col:7> 'const char *' lvalue ParmVar 0x1499283a8 'bp' 'const char *'
    | | | | |     `-IntegerLiteral 0x149942810 <col:10> 'int' 1
    | | | | `-IntegerLiteral 0x149942868 <col:16> 'int' 0
    | | | `-ReturnStmt 0x149942910 <line:24:4, col:12>
    | | |   `-UnaryOperator 0x1499428f8 <col:11, col:12> 'int' prefix '-'
    | | |     `-IntegerLiteral 0x1499428d8 <col:12> 'int' 1
    | | `-BinaryOperator 0x149942980 <line:25:3, col:12> 'int' '='
    | |   |-DeclRefExpr 0x149942940 <col:3> 'int' lvalue Var 0x149941d50 'hdrlen' 'int'
    | |   `-IntegerLiteral 0x149942960 <col:12> 'int' 2
    | `-CompoundStmt 0x14900b170 <line:26:9, line:40:2>
    |   |-SwitchStmt 0x14900ac40 <line:27:3, line:37:3>
    |   | |-RecoveryExpr 0x14900ac20 <line:27:11> '<dependent type>' contains-errors lvalue
    |   | `-CompoundStmt 0x14900b018 <col:27, line:37:3>
    |   |   |-BinaryOperator 0x14900ade0 <line:29:4, col:9> 'int' contains-errors '='
    |   |   | |-DeclRefExpr 0x14900ad68 <col:4> 'int' lvalue Var 0x149941c38 'af' 'int'
    |   |   | `-RecoveryExpr 0x14900adc0 <col:9> '<dependent type>' contains-errors lvalue
    |   |   |-BreakStmt 0x14900ae00 <line:30:4>
    |   |   |-BinaryOperator 0x14900af80 <line:32:4, col:9> 'int' contains-errors '='
    |   |   | |-DeclRefExpr 0x14900af08 <col:4> 'int' lvalue Var 0x149941c38 'af' 'int'
    |   |   | `-RecoveryExpr 0x14900af60 <col:9> '<dependent type>' contains-errors lvalue
    |   |   |-BreakStmt 0x14900afa0 <line:33:4>
    |   |   |-DefaultStmt 0x14900aff0 <line:34:3, line:35:12>
    |   |   | `-ReturnStmt 0x14900afe0 <col:4, col:12>
    |   |   |   `-UnaryOperator 0x14900afc8 <col:11, col:12> 'int' prefix '-'
    |   |   |     `-IntegerLiteral 0x14900afa8 <col:12> 'int' 1
    |   |   `-BreakStmt 0x14900b010 <line:36:4>
    |   |-BinaryOperator 0x14900b0f0 <line:38:3, col:9> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x14900b058 <col:3> 'int' lvalue Var 0x149941cd0 'len' 'int'
    |   | `-RecoveryExpr 0x14900b0d0 <col:9> '<dependent type>' contains-errors lvalue
    |   `-BinaryOperator 0x14900b150 <line:39:3, col:12> 'int' '='
    |     |-DeclRefExpr 0x14900b110 <col:3> 'int' lvalue Var 0x149941d50 'hdrlen' 'int'
    |     `-IntegerLiteral 0x14900b130 <col:12> 'int' 0
    |-CompoundAssignOperator 0x14900b220 <line:42:2, col:8> 'const char *' '+=' ComputeLHSTy='const char *' ComputeResultTy='const char *'
    | |-DeclRefExpr 0x14900b1c8 <col:2> 'const char *' lvalue ParmVar 0x1499283a8 'bp' 'const char *'
    | `-ImplicitCastExpr 0x14900b208 <col:8> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x14900b1e8 <col:8> 'int' lvalue Var 0x149941d50 'hdrlen' 'int'
    |-SwitchStmt 0x14900b288 <line:43:2, line:89:2>
    | |-ImplicitCastExpr 0x14900b270 <line:43:10> '<dependent type>' contains-errors <LValueToRValue>
    | | `-RecoveryExpr 0x14900b250 <col:10> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x1499443d8 <col:14, line:89:2>
    |   |-CallExpr 0x14900b478 <line:45:3, col:24> 'int'
    |   | |-ImplicitCastExpr 0x14900b460 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x14900b3a8 <col:3> 'int ()' Function 0x14900b2f0 'ND_TCHECK2' 'int ()'
    |   | |-ImplicitCastExpr 0x14900b4c0 <col:14, col:18> 'int' <IntegralCast>
    |   | | `-ImplicitCastExpr 0x14900b4a8 <col:14, col:18> 'char' <LValueToRValue>
    |   | |   `-ArraySubscriptExpr 0x14900b420 <col:14, col:18> 'const char' lvalue
    |   | |     |-ImplicitCastExpr 0x14900b408 <col:14> 'const char *' <LValueToRValue>
    |   | |     | `-DeclRefExpr 0x14900b3c8 <col:14> 'const char *' lvalue ParmVar 0x1499283a8 'bp' 'const char *'
    |   | |     `-IntegerLiteral 0x14900b3e8 <col:17> 'int' 0
    |   | `-ImplicitCastExpr 0x14900b4d8 <col:21> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x14900b440 <col:21> 'int' lvalue Var 0x149941cd0 'len' 'int'
    |   |-IfStmt 0x149942af0 <line:46:3, line:53:3> has_else
    |   | |-BinaryOperator 0x14900b568 <line:46:7, col:13> 'int' contains-errors '=='
    |   | | |-DeclRefExpr 0x14900b4f0 <col:7> 'int' lvalue Var 0x149941c38 'af' 'int'
    |   | | `-RecoveryExpr 0x14900b548 <col:13> '<dependent type>' contains-errors lvalue
    |   | |-CompoundStmt 0x14900b978 <col:22, line:49:3>
    |   | | `-IfStmt 0x14900b958 <line:47:4, line:48:50>
    |   | |   |-UnaryOperator 0x14900b5c0 <line:47:8, col:9> 'int' prefix '!' cannot overflow
    |   | |   | `-ImplicitCastExpr 0x14900b5a8 <col:9> 'int' <LValueToRValue>
    |   | |   |   `-DeclRefExpr 0x14900b588 <col:9> 'int' lvalue ParmVar 0x149941a00 'silent' 'int'
    |   | |   `-CallExpr 0x14900b930 <line:48:5, col:50> '<dependent type>' contains-errors
    |   | |     |-DeclRefExpr 0x14900b6b8 <col:5> 'int ()' Function 0x14900b600 'ND_PRINT' 'int ()'
    |   | |     `-ParenExpr 0x14900b910 <col:14, col:49> '<dependent type>' contains-errors
    |   | |       `-BinaryOperator 0x14900b8f0 <col:15, col:48> '<dependent type>' contains-errors ','
    |   | |         |-BinaryOperator 0x14900b760 <col:15, col:20> 'char[4]' contains-errors ','
    |   | |         | |-RecoveryExpr 0x14900b6d8 <col:15> '<dependent type>' contains-errors lvalue
    |   | |         | `-StringLiteral 0x14900b740 <col:20> 'char[4]' lvalue "STR"
    |   | |         `-CallExpr 0x14900b8c0 <col:27, col:48> '<dependent type>' contains-errors
    |   | |           |-DeclRefExpr 0x14900b860 <col:27> 'int ()' Function 0x14900b7a8 'ipaddr_string' 'int ()'
    |   | |           |-RecoveryExpr 0x14900b880 <col:41> '<dependent type>' contains-errors lvalue
    |   | |           `-DeclRefExpr 0x14900b8a0 <col:46> 'const char *' lvalue ParmVar 0x1499283a8 'bp' 'const char *'
    |   | `-IfStmt 0x149942ad0 <line:50:8, line:53:3>
    |   |   |-RecoveryExpr 0x14900b9b0 <line:50:12, col:18> '_Bool' contains-errors
    |   |   `-CompoundStmt 0x149942ab8 <col:28, line:53:3>
    |   |     `-IfStmt 0x149942a98 <line:51:4, line:52:51>
    |   |       |-UnaryOperator 0x14900ba08 <line:51:8, col:9> 'int' prefix '!' cannot overflow
    |   |       | `-ImplicitCastExpr 0x14900b9f0 <col:9> 'int' <LValueToRValue>
    |   |       |   `-DeclRefExpr 0x14900b9d0 <col:9> 'int' lvalue ParmVar 0x149941a00 'silent' 'int'
    |   |       `-CallExpr 0x149942a70 <line:52:5, col:51> '<dependent type>' contains-errors
    |   |         |-DeclRefExpr 0x14900ba20 <col:5> 'int ()' Function 0x14900b600 'ND_PRINT' 'int ()'
    |   |         `-ParenExpr 0x149942a50 <col:14, col:50> '<dependent type>' contains-errors
    |   |           `-BinaryOperator 0x149942a30 <col:15, col:49> '<dependent type>' contains-errors ','
    |   |             |-BinaryOperator 0x14900ba80 <col:15, col:20> 'char[4]' contains-errors ','
    |   |             | |-RecoveryExpr 0x14900ba40 <col:15> '<dependent type>' contains-errors lvalue
    |   |             | `-StringLiteral 0x14900ba60 <col:20> 'char[4]' lvalue "STR"
    |   |             `-CallExpr 0x149942a00 <col:27, col:49> '<dependent type>' contains-errors
    |   |               |-DeclRefExpr 0x14900bb80 <col:27> 'int ()' Function 0x14900bac8 'ip6addr_string' 'int ()'
    |   |               |-RecoveryExpr 0x14900bba0 <col:42> '<dependent type>' contains-errors lvalue
    |   |               `-DeclRefExpr 0x14900bbc0 <col:47> 'const char *' lvalue ParmVar 0x1499283a8 'bp' 'const char *'
    |   |-ReturnStmt 0x149942bb0 <line:54:3, col:19>
    |   | `-BinaryOperator 0x149942b90 <col:10, col:19> 'int' '+'
    |   |   |-ImplicitCastExpr 0x149942b60 <col:10> 'int' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x149942b20 <col:10> 'int' lvalue Var 0x149941d50 'hdrlen' 'int'
    |   |   `-ImplicitCastExpr 0x149942b78 <col:19> 'int' <LValueToRValue>
    |   |     `-DeclRefExpr 0x149942b40 <col:19> 'int' lvalue Var 0x149941cd0 'len' 'int'
    |   |-CallExpr 0x149942ce8 <line:57:3, col:28> 'int'
    |   | |-ImplicitCastExpr 0x149942cd0 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x149942bc0 <col:3> 'int ()' Function 0x14900b2f0 'ND_TCHECK2' 'int ()'
    |   | |-ImplicitCastExpr 0x149942d30 <col:14, col:18> 'int' <IntegralCast>
    |   | | `-ImplicitCastExpr 0x149942d18 <col:14, col:18> 'char' <LValueToRValue>
    |   | |   `-ArraySubscriptExpr 0x149942c38 <col:14, col:18> 'const char' lvalue
    |   | |     |-ImplicitCastExpr 0x149942c20 <col:14> 'const char *' <LValueToRValue>
    |   | |     | `-DeclRefExpr 0x149942be0 <col:14> 'const char *' lvalue ParmVar 0x1499283a8 'bp' 'const char *'
    |   | |     `-IntegerLiteral 0x149942c00 <col:17> 'int' 0
    |   | `-BinaryOperator 0x149942cb0 <col:21, col:27> 'int' '+'
    |   |   |-ImplicitCastExpr 0x149942c98 <col:21> 'int' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x149942c58 <col:21> 'int' lvalue Var 0x149941cd0 'len' 'int'
    |   |   `-IntegerLiteral 0x149942c78 <col:27> 'int' 2
    |   |-IfStmt 0x1499437a8 <line:58:3, line:71:3> has_else
    |   | |-RecoveryExpr 0x149942d68 <line:58:7, col:13> '_Bool' contains-errors
    |   | |-CompoundStmt 0x149943250 <col:22, line:64:3>
    |   | | `-IfStmt 0x149943230 <line:59:4, line:63:4>
    |   | |   |-UnaryOperator 0x149942dc0 <line:59:8, col:9> 'int' prefix '!' cannot overflow
    |   | |   | `-ImplicitCastExpr 0x149942da8 <col:9> 'int' <LValueToRValue>
    |   | |   |   `-DeclRefExpr 0x149942d88 <col:9> 'int' lvalue ParmVar 0x149941a00 'silent' 'int'
    |   | |   `-CompoundStmt 0x149943210 <col:17, line:63:4>
    |   | |     |-CallExpr 0x149942f80 <line:60:5, col:54> '<dependent type>' contains-errors
    |   | |     | |-DeclRefExpr 0x149942dd8 <col:5> 'int ()' Function 0x14900b600 'ND_PRINT' 'int ()'
    |   | |     | `-ParenExpr 0x149942f60 <col:14, col:53> '<dependent type>' contains-errors
    |   | |     |   `-BinaryOperator 0x149942f40 <col:15, col:52> '<dependent type>' contains-errors ','
    |   | |     |     |-BinaryOperator 0x149942e38 <col:15, col:20> 'char[4]' contains-errors ','
    |   | |     |     | |-RecoveryExpr 0x149942df8 <col:15> '<dependent type>' contains-errors lvalue
    |   | |     |     | `-StringLiteral 0x149942e18 <col:20> 'char[4]' lvalue "STR"
    |   | |     |     `-CallExpr 0x149942f10 <col:27, col:52> '<dependent type>' contains-errors
    |   | |     |       |-DeclRefExpr 0x149942e58 <col:27> 'int ()' Function 0x14900b7a8 'ipaddr_string' 'int ()'
    |   | |     |       |-RecoveryExpr 0x149942e78 <col:41> '<dependent type>' contains-errors lvalue
    |   | |     |       `-BinaryOperator 0x149942ef0 <col:46, col:51> 'const char *' '+'
    |   | |     |         |-ImplicitCastExpr 0x149942ed8 <col:46> 'const char *' <LValueToRValue>
    |   | |     |         | `-DeclRefExpr 0x149942e98 <col:46> 'const char *' lvalue ParmVar 0x1499283a8 'bp' 'const char *'
    |   | |     |         `-IntegerLiteral 0x149942eb8 <col:51> 'int' 2
    |   | |     `-IfStmt 0x1499431f0 <line:61:5, line:62:34>
    |   | |       |-BinaryOperator 0x149943070 <line:61:9, col:18> 'int' '!='
    |   | |       | |-ImplicitCastExpr 0x149943058 <col:9, col:13> 'int' <IntegralCast>
    |   | |       | | `-ImplicitCastExpr 0x149943040 <col:9, col:13> 'char' <LValueToRValue>
    |   | |       | |   `-ArraySubscriptExpr 0x149943000 <col:9, col:13> 'const char' lvalue
    |   | |       | |     |-ImplicitCastExpr 0x149942fe8 <col:9> 'const char *' <LValueToRValue>
    |   | |       | |     | `-DeclRefExpr 0x149942fa8 <col:9> 'const char *' lvalue ParmVar 0x1499283a8 'bp' 'const char *'
    |   | |       | |     `-IntegerLiteral 0x149942fc8 <col:12> 'int' 1
    |   | |       | `-IntegerLiteral 0x149943020 <col:18> 'int' 32
    |   | |       `-CallExpr 0x1499431c8 <line:62:6, col:34> '<dependent type>' contains-errors
    |   | |         |-DeclRefExpr 0x149943090 <col:6> 'int ()' Function 0x14900b600 'ND_PRINT' 'int ()'
    |   | |         `-ParenExpr 0x1499431a8 <col:15, col:33> 'const char' contains-errors
    |   | |           `-BinaryOperator 0x149943188 <col:16, col:32> 'const char' contains-errors ','
    |   | |             |-BinaryOperator 0x1499430f0 <col:16, col:21> 'char[4]' contains-errors ','
    |   | |             | |-RecoveryExpr 0x1499430b0 <col:16> '<dependent type>' contains-errors lvalue
    |   | |             | `-StringLiteral 0x1499430d0 <col:21> 'char[4]' lvalue "STR"
    |   | |             `-ArraySubscriptExpr 0x149943168 <col:28, col:32> 'const char' lvalue
    |   | |               |-ImplicitCastExpr 0x149943150 <col:28> 'const char *' <LValueToRValue>
    |   | |               | `-DeclRefExpr 0x149943110 <col:28> 'const char *' lvalue ParmVar 0x1499283a8 'bp' 'const char *'
    |   | |               `-IntegerLiteral 0x149943130 <col:31> 'int' 1
    |   | `-IfStmt 0x149943788 <line:65:8, line:71:3>
    |   |   |-RecoveryExpr 0x149943288 <line:65:12, col:18> '_Bool' contains-errors
    |   |   `-CompoundStmt 0x149943770 <col:28, line:71:3>
    |   |     `-IfStmt 0x149943750 <line:66:4, line:70:4>
    |   |       |-UnaryOperator 0x1499432e0 <line:66:8, col:9> 'int' prefix '!' cannot overflow
    |   |       | `-ImplicitCastExpr 0x1499432c8 <col:9> 'int' <LValueToRValue>
    |   |       |   `-DeclRefExpr 0x1499432a8 <col:9> 'int' lvalue ParmVar 0x149941a00 'silent' 'int'
    |   |       `-CompoundStmt 0x149943730 <col:17, line:70:4>
    |   |         |-CallExpr 0x1499434a0 <line:67:5, col:55> '<dependent type>' contains-errors
    |   |         | |-DeclRefExpr 0x1499432f8 <col:5> 'int ()' Function 0x14900b600 'ND_PRINT' 'int ()'
    |   |         | `-ParenExpr 0x149943480 <col:14, col:54> '<dependent type>' contains-errors
    |   |         |   `-BinaryOperator 0x149943460 <col:15, col:53> '<dependent type>' contains-errors ','
    |   |         |     |-BinaryOperator 0x149943358 <col:15, col:20> 'char[4]' contains-errors ','
    |   |         |     | |-RecoveryExpr 0x149943318 <col:15> '<dependent type>' contains-errors lvalue
    |   |         |     | `-StringLiteral 0x149943338 <col:20> 'char[4]' lvalue "STR"
    |   |         |     `-CallExpr 0x149943430 <col:27, col:53> '<dependent type>' contains-errors
    |   |         |       |-DeclRefExpr 0x149943378 <col:27> 'int ()' Function 0x14900bac8 'ip6addr_string' 'int ()'
    |   |         |       |-RecoveryExpr 0x149943398 <col:42> '<dependent type>' contains-errors lvalue
    |   |         |       `-BinaryOperator 0x149943410 <col:47, col:52> 'const char *' '+'
    |   |         |         |-ImplicitCastExpr 0x1499433f8 <col:47> 'const char *' <LValueToRValue>
    |   |         |         | `-DeclRefExpr 0x1499433b8 <col:47> 'const char *' lvalue ParmVar 0x1499283a8 'bp' 'const char *'
    |   |         |         `-IntegerLiteral 0x1499433d8 <col:52> 'int' 2
    |   |         `-IfStmt 0x149943710 <line:68:5, line:69:34>
    |   |           |-BinaryOperator 0x149943590 <line:68:9, col:18> 'int' '!='
    |   |           | |-ImplicitCastExpr 0x149943578 <col:9, col:13> 'int' <IntegralCast>
    |   |           | | `-ImplicitCastExpr 0x149943560 <col:9, col:13> 'char' <LValueToRValue>
    |   |           | |   `-ArraySubscriptExpr 0x149943520 <col:9, col:13> 'const char' lvalue
    |   |           | |     |-ImplicitCastExpr 0x149943508 <col:9> 'const char *' <LValueToRValue>
    |   |           | |     | `-DeclRefExpr 0x1499434c8 <col:9> 'const char *' lvalue ParmVar 0x1499283a8 'bp' 'const char *'
    |   |           | |     `-IntegerLiteral 0x1499434e8 <col:12> 'int' 1
    |   |           | `-IntegerLiteral 0x149943540 <col:18> 'int' 128
    |   |           `-CallExpr 0x1499436e8 <line:69:6, col:34> '<dependent type>' contains-errors
    |   |             |-DeclRefExpr 0x1499435b0 <col:6> 'int ()' Function 0x14900b600 'ND_PRINT' 'int ()'
    |   |             `-ParenExpr 0x1499436c8 <col:15, col:33> 'const char' contains-errors
    |   |               `-BinaryOperator 0x1499436a8 <col:16, col:32> 'const char' contains-errors ','
    |   |                 |-BinaryOperator 0x149943610 <col:16, col:21> 'char[4]' contains-errors ','
    |   |                 | |-RecoveryExpr 0x1499435d0 <col:16> '<dependent type>' contains-errors lvalue
    |   |                 | `-StringLiteral 0x1499435f0 <col:21> 'char[4]' lvalue "STR"
    |   |                 `-ArraySubscriptExpr 0x149943688 <col:28, col:32> 'const char' lvalue
    |   |                   |-ImplicitCastExpr 0x149943670 <col:28> 'const char *' <LValueToRValue>
    |   |                   | `-DeclRefExpr 0x149943630 <col:28> 'const char *' lvalue ParmVar 0x1499283a8 'bp' 'const char *'
    |   |                   `-IntegerLiteral 0x149943650 <col:31> 'int' 1
    |   |-IfStmt 0x149944270 <line:72:3, line:85:3>
    |   | |-BinaryOperator 0x1499438d0 <line:72:7, col:17> 'int' '&&'
    |   | | |-ImplicitCastExpr 0x1499438b8 <col:7, col:11> 'int' <IntegralCast>
    |   | | | `-ImplicitCastExpr 0x1499438a0 <col:7, col:11> 'char' <LValueToRValue>
    |   | | |   `-ArraySubscriptExpr 0x149943830 <col:7, col:11> 'const char' lvalue
    |   | | |     |-ImplicitCastExpr 0x149943818 <col:7> 'const char *' <LValueToRValue>
    |   | | |     | `-DeclRefExpr 0x1499437d8 <col:7> 'const char *' lvalue ParmVar 0x1499283a8 'bp' 'const char *'
    |   | | |     `-IntegerLiteral 0x1499437f8 <col:10> 'int' 0
    |   | | `-UnaryOperator 0x149943888 <col:16, col:17> 'int' prefix '!' cannot overflow
    |   | |   `-ImplicitCastExpr 0x149943870 <col:17> 'int' <LValueToRValue>
    |   | |     `-DeclRefExpr 0x149943850 <col:17> 'int' lvalue ParmVar 0x149941a00 'silent' 'int'
    |   | `-CompoundStmt 0x149944258 <col:25, line:85:3>
    |   |   `-IfStmt 0x149944228 <line:73:4, line:84:4> has_else
    |   |     |-RecoveryExpr 0x149943910 <line:73:8, col:14> '_Bool' contains-errors
    |   |     |-CompoundStmt 0x149943aa0 <col:27, line:75:4>
    |   |     | `-CallExpr 0x149943a78 <line:74:5, col:33> '<dependent type>' contains-errors
    |   |     |   |-DeclRefExpr 0x149943930 <col:5> 'int ()' Function 0x14900b600 'ND_PRINT' 'int ()'
    |   |     |   `-ParenExpr 0x149943a58 <col:14, col:32> 'const char' contains-errors
    |   |     |     `-BinaryOperator 0x149943a38 <col:15, col:31> 'const char' contains-errors ','
    |   |     |       |-BinaryOperator 0x149943990 <col:15, col:20> 'char[4]' contains-errors ','
    |   |     |       | |-RecoveryExpr 0x149943950 <col:15> '<dependent type>' contains-errors lvalue
    |   |     |       | `-StringLiteral 0x149943970 <col:20> 'char[4]' lvalue "STR"
    |   |     |       `-ArraySubscriptExpr 0x149943a18 <col:27, col:31> 'const char' lvalue
    |   |     |         |-ImplicitCastExpr 0x149943a00 <col:27> 'const char *' <LValueToRValue>
    |   |     |         | `-DeclRefExpr 0x1499439b0 <col:27> 'const char *' lvalue ParmVar 0x1499283a8 'bp' 'const char *'
    |   |     |         `-IntegerLiteral 0x1499439d0 <col:30> 'int' 0
    |   |     `-CompoundStmt 0x149944208 <line:75:11, line:84:4>
    |   |       |-IfStmt 0x149944120 <line:80:5, line:82:5>
    |   |       | |-BinaryOperator 0x149943f18 <line:80:9, col:17> 'int' '&'
    |   |       | | |-ImplicitCastExpr 0x149943f00 <col:9, col:13> 'int' <IntegralCast>
    |   |       | | | `-ImplicitCastExpr 0x149943ee8 <col:9, col:13> 'char' <LValueToRValue>
    |   |       | | |   `-ArraySubscriptExpr 0x149943ea8 <col:9, col:13> 'const char' lvalue
    |   |       | | |     |-ImplicitCastExpr 0x149943e90 <col:9> 'const char *' <LValueToRValue>
    |   |       | | |     | `-DeclRefExpr 0x149943e50 <col:9> 'const char *' lvalue ParmVar 0x1499283a8 'bp' 'const char *'
    |   |       | | |     `-IntegerLiteral 0x149943e70 <col:12> 'int' 0
    |   |       | | `-IntegerLiteral 0x149943ec8 <col:17> 'int' 248
    |   |       | `-CompoundStmt 0x149944108 <col:23, line:82:5>
    |   |       |   `-CallExpr 0x1499440e0 <line:81:6, col:41> '<dependent type>' contains-errors
    |   |       |     |-DeclRefExpr 0x149943f38 <col:6> 'int ()' Function 0x14900b600 'ND_PRINT' 'int ()'
    |   |       |     `-ParenExpr 0x1499440c0 <col:15, col:40> 'int' contains-errors
    |   |       |       `-BinaryOperator 0x1499440a0 <col:16, col:36> 'int' contains-errors ','
    |   |       |         |-BinaryOperator 0x149943f98 <col:16, col:21> 'char[4]' contains-errors ','
    |   |       |         | |-RecoveryExpr 0x149943f58 <col:16> '<dependent type>' contains-errors lvalue
    |   |       |         | `-StringLiteral 0x149943f78 <col:21> 'char[4]' lvalue "STR"
    |   |       |         `-BinaryOperator 0x149944080 <col:28, col:36> 'int' '&'
    |   |       |           |-ImplicitCastExpr 0x149944068 <col:28, col:32> 'int' <IntegralCast>
    |   |       |           | `-ImplicitCastExpr 0x149944050 <col:28, col:32> 'char' <LValueToRValue>
    |   |       |           |   `-ArraySubscriptExpr 0x149944010 <col:28, col:32> 'const char' lvalue
    |   |       |           |     |-ImplicitCastExpr 0x149943ff8 <col:28> 'const char *' <LValueToRValue>
    |   |       |           |     | `-DeclRefExpr 0x149943fb8 <col:28> 'const char *' lvalue ParmVar 0x1499283a8 'bp' 'const char *'
    |   |       |           |     `-IntegerLiteral 0x149943fd8 <col:31> 'int' 0
    |   |       |           `-IntegerLiteral 0x149944030 <col:36> 'int' 248
    |   |       `-CallExpr 0x1499441e0 <line:83:5, col:26> '<dependent type>' contains-errors
    |   |         |-DeclRefExpr 0x149944140 <col:5> 'int ()' Function 0x14900b600 'ND_PRINT' 'int ()'
    |   |         `-ParenExpr 0x1499441c0 <col:14, col:25> 'char[4]' contains-errors
    |   |           `-BinaryOperator 0x1499441a0 <col:15, col:20> 'char[4]' contains-errors ','
    |   |             |-RecoveryExpr 0x149944160 <col:15> '<dependent type>' contains-errors lvalue
    |   |             `-StringLiteral 0x149944180 <col:20> 'char[4]' lvalue "STR"
    |   |-ReturnStmt 0x149944360 <line:86:3, col:23>
    |   | `-BinaryOperator 0x149944340 <col:10, col:23> 'int' '+'
    |   |   |-BinaryOperator 0x1499442e8 <col:10, col:19> 'int' '+'
    |   |   | |-ImplicitCastExpr 0x1499442d0 <col:10> 'int' <LValueToRValue>
    |   |   | | `-DeclRefExpr 0x149944290 <col:10> 'int' lvalue Var 0x149941d50 'hdrlen' 'int'
    |   |   | `-IntegerLiteral 0x1499442b0 <col:19> 'int' 2
    |   |   `-ImplicitCastExpr 0x149944328 <col:23> 'int' <LValueToRValue>
    |   |     `-DeclRefExpr 0x149944308 <col:23> 'int' lvalue Var 0x149941cd0 'len' 'int'
    |   `-DefaultStmt 0x1499443b8 <line:87:2, line:88:11>
    |     `-ReturnStmt 0x1499443a8 <col:3, col:11>
    |       `-UnaryOperator 0x149944390 <col:10, col:11> 'int' prefix '-'
    |         `-IntegerLiteral 0x149944370 <col:11> 'int' 1
    `-LabelStmt 0x1499444c0 <line:90:1, line:91:10> 'trunc'
      `-ReturnStmt 0x149944460 <col:2, col:10>
        `-UnaryOperator 0x149944448 <col:9, col:10> 'int' prefix '-'
          `-IntegerLiteral 0x149944428 <col:10> 'int' 1
