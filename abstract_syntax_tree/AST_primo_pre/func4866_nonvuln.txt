`-FunctionDecl 0x131928758  line:1:1 schedule_fb_drift 'int (struct timespec *)'
  |-ParmVarDecl 0x131928648 <col:19, col:36> col:36 used now 'struct timespec *'
  `-CompoundStmt 0x132009580 <line:2:1, line:36:1>
    |-DeclStmt 0x131940bf0 <line:3:3, col:17>
    | |-VarDecl 0x131940a68 <col:3, col:7> col:7 used i 'int'
    | |-VarDecl 0x131940ae8 <col:3, col:10> col:10 used c 'int'
    | `-VarDecl 0x131940b68 <col:3, col:13> col:13 used secs 'int'
    |-DeclStmt 0x131940c88 <line:4:3, col:24>
    | `-VarDecl 0x131940c20 <col:3, col:10> col:10 used unsynchronised 'double'
    |-DeclStmt 0x131940d58 <line:5:3, col:23>
    | `-VarDecl 0x131940cf0 <col:3, col:19> col:19 invalid when 'struct timespec'
    |-IfStmt 0x131940dd0 <line:7:3, line:8:5>
    | |-RecoveryExpr 0x131940da0 <line:7:7> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x131940dc0 <line:8:5>
    |-BinaryOperator 0x131941048 <line:10:3, col:67> 'double' contains-errors '='
    | |-DeclRefExpr 0x131940df0 <col:3> 'double' lvalue Var 0x131940c20 'unsynchronised' 'double'
    | `-CallExpr 0x131941018 <col:20, col:67> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x131940f20 <col:20> 'int ()' Function 0x131940e68 'UTI_DiffTimespecsToDouble' 'int ()'
    |   |-DeclRefExpr 0x131940f40 <col:46> 'struct timespec *' lvalue ParmVar 0x131928648 'now' 'struct timespec *'
    |   `-UnaryOperator 0x131941000 <col:51, col:52> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-RecoveryExpr 0x131940fe0 <col:52> '<dependent type>' contains-errors lvalue
    |-ForStmt 0x131941700 <line:12:3, line:22:3>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-BinaryOperator 0x1319411f8 <line:12:40, col:45> 'int' contains-errors '<='
    | | |-DeclRefExpr 0x131941180 <col:40> 'int' lvalue Var 0x131940a68 'i' 'int'
    | | `-RecoveryExpr 0x1319411d8 <col:45> '<dependent type>' contains-errors lvalue
    | |-UnaryOperator 0x131941238 <col:59, col:60> 'int' postfix '++'
    | | `-DeclRefExpr 0x131941218 <col:59> 'int' lvalue Var 0x131940a68 'i' 'int'
    | `-CompoundStmt 0x1319416d0 <col:64, line:22:3>
    |   |-BinaryOperator 0x1319412e8 <line:13:5, col:17> 'int' '='
    |   | |-DeclRefExpr 0x131941250 <col:5> 'int' lvalue Var 0x131940b68 'secs' 'int'
    |   | `-BinaryOperator 0x1319412c8 <col:12, col:17> 'int' '<<'
    |   |   |-IntegerLiteral 0x131941270 <col:12> 'int' 1
    |   |   `-ImplicitCastExpr 0x1319412b0 <col:17> 'int' <LValueToRValue>
    |   |     `-DeclRefExpr 0x131941290 <col:17> 'int' lvalue Var 0x131940a68 'i' 'int'
    |   |-IfStmt 0x1319413c0 <line:15:5, line:16:7>
    |   | |-RecoveryExpr 0x131941398 <line:15:9, col:44> '_Bool' contains-errors
    |   | `-ContinueStmt 0x1319413b8 <line:16:7>
    |   |-IfStmt 0x131941638 <line:18:5, line:19:7>
    |   | |-BinaryOperator 0x131941610 <line:18:9, col:38> 'int' contains-errors '&&'
    |   | | |-BinaryOperator 0x1319415b0 <col:9, col:26> 'int' '<'
    |   | | | |-ImplicitCastExpr 0x131941568 <col:9> 'double' <LValueToRValue>
    |   | | | | `-DeclRefExpr 0x1319413e0 <col:9> 'double' lvalue Var 0x131940c20 'unsynchronised' 'double'
    |   | | | `-ImplicitCastExpr 0x131941598 <col:26> 'double' <IntegralToFloating>
    |   | | |   `-ImplicitCastExpr 0x131941580 <col:26> 'int' <LValueToRValue>
    |   | | |     `-DeclRefExpr 0x131941400 <col:26> 'int' lvalue Var 0x131940b68 'secs' 'int'
    |   | | `-BinaryOperator 0x1319415f0 <col:34, col:38> 'int' contains-errors '>'
    |   | |   |-DeclRefExpr 0x131941488 <col:34> 'int' lvalue Var 0x131940a68 'i' 'int'
    |   | |   `-RecoveryExpr 0x1319415d0 <col:38> '<dependent type>' contains-errors lvalue
    |   | `-BreakStmt 0x131941630 <line:19:7>
    |   `-BinaryOperator 0x1319416b0 <line:21:5, col:9> 'int' '='
    |     |-DeclRefExpr 0x131941658 <col:5> 'int' lvalue Var 0x131940ae8 'c' 'int'
    |     `-ImplicitCastExpr 0x131941698 <col:9> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x131941678 <col:9> 'int' lvalue Var 0x131940a68 'i' 'int'
    |-IfStmt 0x132009020 <line:24:3, line:28:3>
    | |-BinaryOperator 0x1319417b0 <line:24:7, col:11> 'int' contains-errors '>'
    | | |-DeclRefExpr 0x131941738 <col:7> 'int' lvalue Var 0x131940ae8 'c' 'int'
    | | `-RecoveryExpr 0x131941790 <col:11> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x132009008 <col:26, line:28:3>
    |   `-CallExpr 0x132008fa8 <line:27:5, col:23> 'int'
    |     |-ImplicitCastExpr 0x132008f90 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x132008eb8 <col:5> 'int ()' Function 0x132008e00 'DEBUG_LOG' 'int ()'
    |     |-ImplicitCastExpr 0x132008fd8 <col:15> 'char *' <ArrayToPointerDecay>
    |     | `-StringLiteral 0x132008f20 <col:15> 'char[4]' lvalue "STR"
    |     `-ImplicitCastExpr 0x132008ff0 <col:22> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x132008f40 <col:22> 'int' lvalue Var 0x131940ae8 'c' 'int'
    `-IfStmt 0x132009560 <line:30:3, line:35:3>
      |-BinaryOperator 0x1320090b8 <line:30:7, col:12> 'int' contains-errors '<='
      | |-DeclRefExpr 0x132009040 <col:7> 'int' lvalue Var 0x131940a68 'i' 'int'
      | `-RecoveryExpr 0x132009098 <col:12> '<dependent type>' contains-errors lvalue
      `-CompoundStmt 0x132009540 <col:26, line:35:3>
        |-CallExpr 0x1320092f8 <line:32:5, col:62> '<dependent type>' contains-errors
        | |-DeclRefExpr 0x1320091d8 <col:5> 'int ()' Function 0x132009120 'UTI_AddDoubleToTimespec' 'int ()'
        | |-DeclRefExpr 0x1320091f8 <col:29> 'struct timespec *' lvalue ParmVar 0x131928648 'now' 'struct timespec *'
        | |-BinaryOperator 0x1320092a0 <col:34, col:41> 'double' '-'
        | | |-ImplicitCastExpr 0x132009288 <col:34> 'double' <IntegralToFloating>
        | | | `-ImplicitCastExpr 0x132009258 <col:34> 'int' <LValueToRValue>
        | | |   `-DeclRefExpr 0x132009218 <col:34> 'int' lvalue Var 0x131940b68 'secs' 'int'
        | | `-ImplicitCastExpr 0x132009270 <col:41> 'double' <LValueToRValue>
        | |   `-DeclRefExpr 0x132009238 <col:41> 'double' lvalue Var 0x131940c20 'unsynchronised' 'double'
        | `-UnaryOperator 0x1320092e0 <col:57, col:58> '<dependent type>' contains-errors prefix '&' cannot overflow
        |   `-RecoveryExpr 0x1320092c0 <col:58> '<dependent type>' contains-errors lvalue
        `-CallExpr 0x1320094e0 <line:34:5, col:23> 'int'
          |-ImplicitCastExpr 0x1320094c8 <col:5> 'int (*)()' <FunctionToPointerDecay>
          | `-DeclRefExpr 0x132009468 <col:5> 'int ()' Function 0x132008e00 'DEBUG_LOG' 'int ()'
          |-ImplicitCastExpr 0x132009510 <col:15> 'char *' <ArrayToPointerDecay>
          | `-StringLiteral 0x132009488 <col:15> 'char[4]' lvalue "STR"
          `-ImplicitCastExpr 0x132009528 <col:22> 'int' <LValueToRValue>
            `-DeclRefExpr 0x1320094a8 <col:22> 'int' lvalue Var 0x131940a68 'i' 'int'
