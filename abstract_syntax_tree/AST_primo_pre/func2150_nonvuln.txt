`-FunctionDecl 0x14b1281c0  line:1:13 invalid dumpCallArguments 'void (int)' static
  |-ParmVarDecl 0x14b1280f0 <line:2:5, <invalid sloc>> col:9 invalid 'int'
  `-CompoundStmt 0x14b141920 <line:4:32, line:12:1>
    `-ForStmt 0x14b1418e8 <line:8:3, line:11:3>
      |-DeclStmt 0x14b1285f0 <line:8:8, col:22>
      | `-VarDecl 0x14b128550 <col:8, col:21> col:17 used i 'unsigned int' cinit
      |   `-ImplicitCastExpr 0x14b1285d8 <col:21> 'unsigned int' <IntegralCast>
      |     `-IntegerLiteral 0x14b1285b8 <col:21> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x14b128750 <col:24, col:52> 'int' contains-errors '<'
      | |-DeclRefExpr 0x14b128608 <col:24> 'unsigned int' lvalue Var 0x14b128550 'i' 'unsigned int'
      | `-CallExpr 0x14b128730 <col:28, col:52> '<dependent type>' contains-errors
      |   `-CXXDependentScopeMemberExpr 0x14b1286e8 <col:28, col:40> '<dependent type>' contains-errors lvalue .getArgCount
      |     `-RecoveryExpr 0x14b1286c8 <col:28> '<dependent type>' contains-errors lvalue
      |-UnaryOperator 0x14b128790 <col:55, col:57> 'unsigned int' prefix '++'
      | `-DeclRefExpr 0x14b128770 <col:57> 'unsigned int' lvalue Var 0x14b128550 'i' 'unsigned int'
      `-CompoundStmt 0x14b1418d8 <col:60, line:11:3>
