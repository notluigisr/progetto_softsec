`-FunctionDecl 0x10680dfa8  line:1:12 invalid xhci_ep_nuke_xfers 'int (int *, unsigned int, unsigned int, int)' static
  |-ParmVarDecl 0x10680dd28 <col:31, col:42> col:42 invalid xhci 'int *'
  |-ParmVarDecl 0x10680dda8 <col:48, col:61> col:61 used slotid 'unsigned int'
  |-ParmVarDecl 0x10680de28 <line:2:32, col:45> col:45 used epid 'unsigned int'
  |-ParmVarDecl 0x10680dea8 <col:51, col:60> col:60 referenced invalid report 'int'
  `-CompoundStmt 0x128124150 <line:3:1, line:39:1>
    |-DeclStmt 0x10680e158 <line:7:5, col:19>
    | `-VarDecl 0x10680e0d0 <col:5, col:18> col:9 used killed 'int' cinit
    |   `-IntegerLiteral 0x10680e138 <col:18> 'int' 0
    |-CallExpr 0x128122720 <line:9:5, col:51> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x10680e300 <col:5> 'int ()' Function 0x10680e248 'assert' 'int ()'
    | `-BinaryOperator 0x128122700 <col:12, col:43> 'int' contains-errors '&&'
    |   |-BinaryOperator 0x1281226e0 <col:12, col:22> 'int' '>='
    |   | |-ImplicitCastExpr 0x1281226b0 <col:12> 'unsigned int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x10680e320 <col:12> 'unsigned int' lvalue ParmVar 0x10680dda8 'slotid' 'unsigned int'
    |   | `-ImplicitCastExpr 0x1281226c8 <col:22> 'unsigned int' <IntegralCast>
    |   |   `-IntegerLiteral 0x10680e340 <col:22> 'int' 1
    |   `-BinaryOperator 0x128122648 <col:27, col:43> 'int' contains-errors '<='
    |     |-DeclRefExpr 0x10680e3b0 <col:27> 'unsigned int' lvalue ParmVar 0x10680dda8 'slotid' 'unsigned int'
    |     `-CXXDependentScopeMemberExpr 0x128122600 <col:37, col:43> '<dependent type>' contains-errors lvalue ->numslots
    |       `-RecoveryExpr 0x10680e3d0 <col:37> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x1281228f8 <line:10:5, col:35> 'int'
    | |-ImplicitCastExpr 0x1281228e0 <col:5> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x128122748 <col:5> 'int ()' Function 0x10680e248 'assert' 'int ()'
    | `-BinaryOperator 0x128122888 <col:12, col:33> 'int' '&&'
    |   |-BinaryOperator 0x1281227d8 <col:12, col:20> 'int' '>='
    |   | |-ImplicitCastExpr 0x1281227a8 <col:12> 'unsigned int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x128122768 <col:12> 'unsigned int' lvalue ParmVar 0x10680de28 'epid' 'unsigned int'
    |   | `-ImplicitCastExpr 0x1281227c0 <col:20> 'unsigned int' <IntegralCast>
    |   |   `-IntegerLiteral 0x128122788 <col:20> 'int' 1
    |   `-BinaryOperator 0x128122868 <col:25, col:33> 'int' '<='
    |     |-ImplicitCastExpr 0x128122838 <col:25> 'unsigned int' <LValueToRValue>
    |     | `-DeclRefExpr 0x1281227f8 <col:25> 'unsigned int' lvalue ParmVar 0x10680de28 'epid' 'unsigned int'
    |     `-ImplicitCastExpr 0x128122850 <col:33> 'unsigned int' <IntegralCast>
    |       `-IntegerLiteral 0x128122818 <col:33> 'int' 31
    |-CallExpr 0x128122ad8 <line:12:5, col:32> 'int'
    | |-ImplicitCastExpr 0x128122ac0 <col:5> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x128122a00 <col:5> 'int ()' Function 0x128122948 'DPRINTF' 'int ()'
    | |-ImplicitCastExpr 0x128122b10 <col:13> 'char *' <ArrayToPointerDecay>
    | | `-StringLiteral 0x128122a60 <col:13> 'char[4]' lvalue "STR"
    | |-ImplicitCastExpr 0x128122b28 <col:20> 'unsigned int' <LValueToRValue>
    | | `-DeclRefExpr 0x128122a80 <col:20> 'unsigned int' lvalue ParmVar 0x10680dda8 'slotid' 'unsigned int'
    | `-ImplicitCastExpr 0x128122b40 <col:28> 'unsigned int' <LValueToRValue>
    |   `-DeclRefExpr 0x128122aa0 <col:28> 'unsigned int' lvalue ParmVar 0x10680de28 'epid' 'unsigned int'
    |-IfStmt 0x128122e98 <line:16:5, line:18:5>
    | |-RecoveryExpr 0x128122e30 <line:16:9, col:26> '_Bool' contains-errors
    | `-CompoundStmt 0x128122e80 <col:29, line:18:5>
    |   `-ReturnStmt 0x128122e70 <line:17:9, col:16>
    |     `-IntegerLiteral 0x128122e50 <col:16> 'int' 0
    |-ForStmt 0x128123460 <line:22:5, line:32:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | `-CompoundStmt 0x128123440 <line:22:14, line:32:5>
    |   |-IfStmt 0x1281230e8 <line:24:9, line:26:9>
    |   | |-RecoveryExpr 0x1281230a8 <line:24:13, col:21> '_Bool' contains-errors
    |   | `-CompoundStmt 0x1281230d0 <col:27, line:26:9>
    |   |   `-BreakStmt 0x1281230c8 <line:25:13>
    |   `-IfStmt 0x128123320 <line:28:9, line:30:9>
    |     |-ImplicitCastExpr 0x128123268 <line:28:13> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x128123248 <col:13> 'int' lvalue Var 0x10680e0d0 'killed' 'int'
    |     `-CompoundStmt 0x128123308 <col:21, line:30:9>
    |       `-BinaryOperator 0x1281232e8 <line:29:13, col:22> '<dependent type>' contains-errors '='
    |         |-RecoveryExpr 0x1281232a0 <col:13> '<dependent type>' contains-errors lvalue
    |         | `-DeclRefExpr 0x128123280 <col:13> 'int' lvalue ParmVar 0x10680dea8 'report' 'int'
    |         `-IntegerLiteral 0x1281232c8 <col:22> 'int' 0
    |-IfStmt 0x1281240e8 <line:35:5, line:37:5>
    | |-RecoveryExpr 0x128123598 <line:35:9> '_Bool' contains-errors
    | `-CompoundStmt 0x1281240d8 <col:13, line:37:5>
    `-ReturnStmt 0x128124140 <line:38:5, col:12>
      `-ImplicitCastExpr 0x128124128 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x128124108 <col:12> 'int' lvalue Var 0x10680e0d0 'killed' 'int'
