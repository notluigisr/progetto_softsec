`-FunctionDecl 0x11f928298  line:2:20 invalid scalar1 'unsigned int (const int, const unsigned int)'
  |-ParmVarDecl 0x11f9280f0 <col:28, col:42> col:42 invalid op 'const int'
  |-ParmVarDecl 0x11f928170 <col:46, col:65> col:65 used arg1 'const unsigned int'
  `-CompoundStmt 0x1280091c8 <col:71, line:6:20>
    |-DeclStmt 0x128009150 <line:3:9, line:4:99>
    | `-VarDecl 0x11f928368 <line:3:9, line:4:98> line:3:28 used pos 'const unsigned int' cinit
    |   `-ConditionalOperator 0x128009120 <line:4:11, col:98> '<dependent type>' contains-errors
    |     |-BinaryOperator 0x1280090c8 <col:11, col:78> 'int' contains-errors '&&'
    |     | |-BinaryOperator 0x128009068 <col:11, col:69> 'int' contains-errors '&&'
    |     | | |-BinaryOperator 0x128008ff0 <col:11, col:29> 'int' contains-errors '&&'
    |     | | | |-BinaryOperator 0x128008f90 <col:11, col:18> 'int' '!='
    |     | | | | |-ImplicitCastExpr 0x128008f78 <col:11> 'unsigned int' <LValueToRValue>
    |     | | | | | `-DeclRefExpr 0x11f9283d0 <col:11> 'const unsigned int' lvalue ParmVar 0x11f928170 'arg1' 'const unsigned int'
    |     | | | | `-UnaryOperator 0x11f928410 <col:17, col:18> 'unsigned int' prefix '~' cannot overflow
    |     | | | |   `-IntegerLiteral 0x11f9283f0 <col:18> 'unsigned int' 0
    |     | | | `-BinaryOperator 0x128008fd0 <col:24, col:29> 'int' contains-errors '>'
    |     | | |   |-DeclRefExpr 0x11f928460 <col:24> 'const unsigned int' lvalue ParmVar 0x11f928170 'arg1' 'const unsigned int'
    |     | | |   `-RecoveryExpr 0x128008fb0 <col:29> '<dependent type>' contains-errors lvalue
    |     | | `-CallExpr 0x128009028 <col:48, col:69> 'int'
    |     | |   |-ImplicitCastExpr 0x128009010 <col:48> 'int (*)()' <FunctionToPointerDecay>
    |     | |   | `-DeclRefExpr 0x11f928630 <col:48> 'int ()' Function 0x11f928578 '_cimg_mp_is_comp' 'int ()'
    |     | |   `-ImplicitCastExpr 0x128009050 <col:65> 'unsigned int' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x11f928650 <col:65> 'const unsigned int' lvalue ParmVar 0x11f928170 'arg1' 'const unsigned int'
    |     | `-BinaryOperator 0x1280090a8 <col:74, col:78> 'int' contains-errors '!='
    |     |   |-RecoveryExpr 0x11f928718 <col:74> '<dependent type>' contains-errors lvalue
    |     |   `-RecoveryExpr 0x128009088 <col:78> '<dependent type>' contains-errors lvalue
    |     |-DeclRefExpr 0x11f928790 <col:86> 'const unsigned int' lvalue ParmVar 0x11f928170 'arg1' 'const unsigned int'
    |     `-CallExpr 0x128009100 <col:91, col:98> 'int'
    |       `-ImplicitCastExpr 0x1280090e8 <col:91> 'int (*)()' <FunctionToPointerDecay>
    |         `-DeclRefExpr 0x128008eb8 <col:91> 'int ()' Function 0x128008e00 'scalar' 'int ()'
    `-ReturnStmt 0x1280091b8 <line:6:9, col:16>
      `-ImplicitCastExpr 0x1280091a0 <col:16> 'unsigned int' contains-errors <LValueToRValue>
        `-DeclRefExpr 0x128009180 <col:16> 'const unsigned int' contains-errors lvalue Var 0x11f928368 'pos' 'const unsigned int'
