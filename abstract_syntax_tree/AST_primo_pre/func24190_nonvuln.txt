`-FunctionDecl 0x12280ddf8  line:1:1 invalid printVmArgumentsList 'int (int *)'
  |-ParmVarDecl 0x12280dd28 <col:22, col:36> col:36 invalid argList 'int *'
  `-CompoundStmt 0x122827b88 <line:2:1, line:17:1>
    `-ForStmt 0x122827b50 <line:5:2, line:16:2>
      |-<<<NULL>>>
      |-<<<NULL>>>
      |-BinaryOperator 0x12280e040 <line:5:14, col:27> 'int' contains-errors '<'
      | |-RecoveryExpr 0x12280e020 <col:14> '<dependent type>' contains-errors lvalue
      | `-CXXDependentScopeMemberExpr 0x12280dfb8 <col:18, col:27> '<dependent type>' contains-errors lvalue ->nOptions
      |   `-RecoveryExpr 0x12280df98 <col:18> '<dependent type>' contains-errors lvalue
      |-UnaryOperator 0x12280e0b0 <col:37, col:39> '<dependent type>' contains-errors prefix '++' cannot overflow
      | `-RecoveryExpr 0x12280e090 <col:39> '<dependent type>' contains-errors lvalue
      `-CompoundStmt 0x122827b30 <col:42, line:16:2>
        |-DeclStmt 0x12280e2a8 <line:7:3, col:38>
        | `-VarDecl 0x12280e178 <col:3, col:28> col:9 used envVar 'char *' cinit
        |   `-CXXDependentScopeMemberExpr 0x12280e260 <col:18, col:28> '<dependent type>' contains-errors lvalue ->fromEnvVar
        |     `-RecoveryExpr 0x12280e240 <col:18> '<dependent type>' contains-errors lvalue
        `-IfStmt 0x122827838 <line:9:3, line:11:3>
          |-BinaryOperator 0x12280e338 <line:9:7, col:15> 'int' contains-errors '=='
          | |-RecoveryExpr 0x12280e318 <col:7> '<dependent type>' contains-errors lvalue
          | `-DeclRefExpr 0x12280e2d8 <col:15> 'char *' contains-errors lvalue Var 0x12280e178 'envVar' 'char *'
          `-CompoundStmt 0x122827820 <col:23, line:11:3>
            `-BinaryOperator 0x122827800 <line:10:4, col:13> 'char *' contains-errors '='
              |-DeclRefExpr 0x12280e358 <col:4> 'char *' contains-errors lvalue Var 0x12280e178 'envVar' 'char *'
              `-ImplicitCastExpr 0x12280e3e0 <col:13> 'char *' <ArrayToPointerDecay>
                `-StringLiteral 0x12280e3c0 <col:13> 'char[4]' lvalue "STR"
