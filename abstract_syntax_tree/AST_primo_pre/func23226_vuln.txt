`-FunctionDecl 0x12e140a78  line:1:19 cipso_v4_validate 'int (const struct sk_buff *, unsigned char **)' static inline
  |-ParmVarDecl 0x12e128648 <col:37, col:59> col:59 skb 'const struct sk_buff *'
  |-ParmVarDecl 0x12e128730 <line:2:9, col:25> col:25 used option 'unsigned char **'
  `-CompoundStmt 0x12e141850 <line:3:1, line:31:1>
    |-DeclStmt 0x12e140c60 <line:4:2, col:30>
    | `-VarDecl 0x12e140b90 <col:2, col:24> col:17 used opt 'unsigned char *' cinit
    |   `-ImplicitCastExpr 0x12e140c48 <col:23, col:24> 'unsigned char *' <LValueToRValue>
    |     `-UnaryOperator 0x12e140c30 <col:23, col:24> 'unsigned char *' lvalue prefix '*' cannot overflow
    |       `-ImplicitCastExpr 0x12e140c18 <col:24> 'unsigned char **' <LValueToRValue>
    |         `-DeclRefExpr 0x12e140bf8 <col:24> 'unsigned char **' lvalue ParmVar 0x12e128730 'option' 'unsigned char **'
    |-DeclStmt 0x12e140d30 <line:5:2, col:30>
    | `-VarDecl 0x12e140c90 <col:2, col:29> col:16 used err_offset 'unsigned char' cinit
    |   `-ImplicitCastExpr 0x12e140d18 <col:29> 'unsigned char' <IntegralCast>
    |     `-IntegerLiteral 0x12e140cf8 <col:29> 'int' 0
    |-IfStmt 0x12e140f28 <line:9:2, line:12:2>
    | |-BinaryOperator 0x12e140e08 <line:9:6, col:16> 'int' '<'
    | | |-ImplicitCastExpr 0x12e140dd8 <col:6> 'unsigned char **' <LValueToRValue>
    | | | `-DeclRefExpr 0x12e140db8 <col:6> 'unsigned char **' lvalue ParmVar 0x12e128730 'option' 'unsigned char **'
    | | `-ImplicitCastExpr 0x12e140df0 <col:16> 'unsigned char **' <IntegralToPointer>
    | |   `-IntegerLiteral 0x12e140d78 <col:16> 'int' 8
    | `-CompoundStmt 0x12e140f08 <col:19, line:12:2>
    |   |-BinaryOperator 0x12e140e80 <line:10:3, col:16> 'unsigned char' '='
    |   | |-DeclRefExpr 0x12e140e28 <col:3> 'unsigned char' lvalue Var 0x12e140c90 'err_offset' 'unsigned char'
    |   | `-ImplicitCastExpr 0x12e140e68 <col:16> 'unsigned char' <IntegralCast>
    |   |   `-IntegerLiteral 0x12e140e48 <col:16> 'int' 1
    |   `-GotoStmt 0x12e140ef0 <line:11:3, col:8> 'out' 0x12e140ea0
    |-IfStmt 0x12e141270 <line:14:2, line:17:2>
    | |-BinaryOperator 0x12e1411a0 <line:14:6, col:37> 'int' '=='
    | | |-CallExpr 0x12e141158 <col:6, col:32> 'int'
    | | | |-ImplicitCastExpr 0x12e141140 <col:6> 'int (*)()' <FunctionToPointerDecay>
    | | | | `-DeclRefExpr 0x12e141060 <col:6> 'int ()' Function 0x12e140fa8 'get_unaligned_be32' 'int ()'
    | | | `-UnaryOperator 0x12e1410f8 <col:25, col:31> 'unsigned char *' prefix '&' cannot overflow
    | | |   `-ArraySubscriptExpr 0x12e1410d8 <col:26, col:31> 'unsigned char' lvalue
    | | |     |-ImplicitCastExpr 0x12e1410c0 <col:26> 'unsigned char *' <LValueToRValue>
    | | |     | `-DeclRefExpr 0x12e141080 <col:26> 'unsigned char *' lvalue Var 0x12e140b90 'opt' 'unsigned char *'
    | | |     `-IntegerLiteral 0x12e1410a0 <col:30> 'int' 2
    | | `-IntegerLiteral 0x12e141180 <col:37> 'int' 0
    | `-CompoundStmt 0x12e141250 <col:40, line:17:2>
    |   |-BinaryOperator 0x12e141218 <line:15:3, col:16> 'unsigned char' '='
    |   | |-DeclRefExpr 0x12e1411c0 <col:3> 'unsigned char' lvalue Var 0x12e140c90 'err_offset' 'unsigned char'
    |   | `-ImplicitCastExpr 0x12e141200 <col:16> 'unsigned char' <IntegralCast>
    |   |   `-IntegerLiteral 0x12e1411e0 <col:16> 'int' 2
    |   `-GotoStmt 0x12e141238 <line:16:3, col:8> 'out' 0x12e140ea0
    |-ForStmt 0x12e141680 <line:19:2, line:25:2>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-BinaryOperator 0x12e141378 <line:19:21, col:32> 'int' contains-errors '<'
    | | |-RecoveryExpr 0x12e141338 <col:21> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x12e141358 <col:32> '<dependent type>' contains-errors lvalue
    | |-<<<NULL>>>
    | `-CompoundStmt 0x12e141668 <col:42, line:25:2>
    |   `-IfStmt 0x12e1415d0 <line:20:3, line:23:3>
    |     |-RecoveryExpr 0x12e141480 <line:20:7, col:46> '_Bool' contains-errors
    |     `-CompoundStmt 0x12e1415b0 <col:49, line:23:3>
    |       |-BinaryOperator 0x12e141578 <line:21:4, col:28> 'unsigned char' contains-errors '='
    |       | |-DeclRefExpr 0x12e1414a0 <col:4> 'unsigned char' lvalue Var 0x12e140c90 'err_offset' 'unsigned char'
    |       | `-BinaryOperator 0x12e141558 <col:17, col:28> '<dependent type>' contains-errors '+'
    |       |   |-RecoveryExpr 0x12e141538 <col:17> '<dependent type>' contains-errors lvalue
    |       |   `-IntegerLiteral 0x12e1414d8 <col:28> 'int' 1
    |       `-GotoStmt 0x12e141598 <line:22:4, col:9> 'out' 0x12e140ea0
    |-LabelStmt 0x12e1417d0 <line:27:1, line:28:18> 'out'
    | `-BinaryOperator 0x12e1417b0 <col:2, col:18> 'unsigned char *' '='
    |   |-UnaryOperator 0x12e1416f0 <col:2, col:3> 'unsigned char *' lvalue prefix '*' cannot overflow
    |   | `-ImplicitCastExpr 0x12e1416d8 <col:3> 'unsigned char **' <LValueToRValue>
    |   |   `-DeclRefExpr 0x12e1416b8 <col:3> 'unsigned char **' lvalue ParmVar 0x12e128730 'option' 'unsigned char **'
    |   `-BinaryOperator 0x12e141790 <col:12, col:18> 'unsigned char *' '+'
    |     |-ImplicitCastExpr 0x12e141748 <col:12> 'unsigned char *' <LValueToRValue>
    |     | `-DeclRefExpr 0x12e141708 <col:12> 'unsigned char *' lvalue Var 0x12e140b90 'opt' 'unsigned char *'
    |     `-ImplicitCastExpr 0x12e141778 <col:18> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x12e141760 <col:18> 'unsigned char' <LValueToRValue>
    |         `-DeclRefExpr 0x12e141728 <col:18> 'unsigned char' lvalue Var 0x12e140c90 'err_offset' 'unsigned char'
    `-ReturnStmt 0x12e141840 <line:29:2, col:9>
      `-ImplicitCastExpr 0x12e141828 <col:9> 'int' <IntegralCast>
        `-ImplicitCastExpr 0x12e141810 <col:9> 'unsigned char' <LValueToRValue>
          `-DeclRefExpr 0x12e1417f0 <col:9> 'unsigned char' lvalue Var 0x12e140c90 'err_offset' 'unsigned char'
