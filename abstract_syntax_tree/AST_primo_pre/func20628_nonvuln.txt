`-FunctionDecl 0x12a00df18  line:1:1 invalid node_str_cat_codepoint 'int (int *, int, int)'
  |-ParmVarDecl 0x12a00dd28 <col:24, col:30> col:30 invalid node 'int *'
  |-ParmVarDecl 0x12a00dda8 <col:36, col:49> col:49 invalid enc 'int'
  |-ParmVarDecl 0x12a00de28 <col:54, col:68> col:68 invalid c 'int'
  `-CompoundStmt 0x12a028048 <line:2:1, line:7:1>
    |-DeclStmt 0x12a00e2b8 <line:4:3, col:45>
    | `-VarDecl 0x12a00dff0 <col:3, col:44> col:7 used num 'int' cinit
    |   `-CallExpr 0x12a00e280 <col:13, col:44> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x12a00e1b0 <col:13> 'int ()' Function 0x12a00e0f8 'ONIGENC_CODE_TO_MBC' 'int ()'
    |     |-RecoveryExpr 0x12a00e1d0 <col:33> '<dependent type>' contains-errors lvalue
    |     |-RecoveryExpr 0x12a00e1f0 <col:38> '<dependent type>' contains-errors lvalue
    |     `-RecoveryExpr 0x12a00e260 <col:41> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x12a00e390 <line:5:3, col:23>
    | |-BinaryOperator 0x12a00e328 <col:7, col:13> 'int' contains-errors '<'
    | | |-ImplicitCastExpr 0x12a00e310 <col:7> 'int' contains-errors <LValueToRValue>
    | | | `-DeclRefExpr 0x12a00e2d0 <col:7> 'int' contains-errors lvalue Var 0x12a00dff0 'num' 'int'
    | | `-IntegerLiteral 0x12a00e2f0 <col:13> 'int' 0
    | `-ReturnStmt 0x12a00e380 <col:16, col:23>
    |   `-ImplicitCastExpr 0x12a00e368 <col:23> 'int' contains-errors <LValueToRValue>
    |     `-DeclRefExpr 0x12a00e348 <col:23> 'int' contains-errors lvalue Var 0x12a00dff0 'num' 'int'
    `-ReturnStmt 0x12a028038 <line:6:3, col:48>
      `-CallExpr 0x12a028000 <col:10, col:48> '<dependent type>' contains-errors
        |-DeclRefExpr 0x12a027eb8 <col:10> 'int ()' Function 0x12a027e00 'onig_node_str_cat' 'int ()'
        |-RecoveryExpr 0x12a027ed8 <col:28> '<dependent type>' contains-errors lvalue
        |-RecoveryExpr 0x12a027fa0 <col:34> '<dependent type>' contains-errors lvalue
        `-BinaryOperator 0x12a027fe0 <col:39, col:45> '<dependent type>' contains-errors '+'
          |-RecoveryExpr 0x12a027fc0 <col:39> '<dependent type>' contains-errors lvalue
          `-DeclRefExpr 0x12a027f28 <col:45> 'int' contains-errors lvalue Var 0x12a00dff0 'num' 'int'
