`-FunctionDecl 0x13300def8  line:1:1 pin_cb 'int (void *, const char *, char **)'
  |-ParmVarDecl 0x13300dcd8 <col:9, col:15> col:15 opaque 'void *'
  |-ParmVarDecl 0x13300dd58 <col:23, col:35> col:35 used info 'const char *'
  |-ParmVarDecl 0x13300de08 <col:41, col:48> col:48 used retstr 'char **'
  `-CompoundStmt 0x132922f08 <line:2:1, line:53:1>
    |-DeclStmt 0x13300e098 <line:4:3, col:16>
    | `-VarDecl 0x13300e030 <col:3, col:9> col:9 used command 'char *'
    |-DeclStmt 0x13300e130 <line:5:3, col:9>
    | `-VarDecl 0x13300e0c8 <col:3, col:7> col:7 used rc 'int'
    |-DeclStmt 0x13300e200 <line:6:3, col:23>
    | `-VarDecl 0x13300e198 <col:3, col:18> col:18 used value 'unsigned char *'
    |-UnaryExprOrTypeTraitExpr 0x13300e270 <line:7:3, col:10> 'unsigned long' contains-errors sizeof
    | `-RecoveryExpr 0x13300e250 <col:10> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x132922778 <line:9:3, line:30:5>
    | |-UnaryOperator 0x13300e2c8 <line:9:7, col:8> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x13300e2b0 <col:8> 'char **' <LValueToRValue>
    | |   `-DeclRefExpr 0x13300e290 <col:8> 'char **' lvalue ParmVar 0x13300de08 'retstr' 'char **'
    | `-CompoundStmt 0x132922750 <line:10:5, line:30:5>
    |   |-IfStmt 0x1330293c0 <line:12:7, line:26:9> has_else
    |   | |-ImplicitCastExpr 0x13300e300 <line:12:11> 'const char *' <LValueToRValue>
    |   | | `-DeclRefExpr 0x13300e2e0 <col:11> 'const char *' lvalue ParmVar 0x13300dd58 'info' 'const char *'
    |   | |-CompoundStmt 0x133029090 <line:13:9, line:20:9>
    |   | | |-CallExpr 0x1330285a8 <line:14:11, col:33> 'int'
    |   | | | |-ImplicitCastExpr 0x133028590 <col:11> 'int (*)()' <FunctionToPointerDecay>
    |   | | | | `-DeclRefExpr 0x1330284b8 <col:11> 'int ()' Function 0x133028400 'log_debug' 'int ()'
    |   | | | |-ImplicitCastExpr 0x1330285d8 <col:22> 'char *' <ArrayToPointerDecay>
    |   | | | | `-StringLiteral 0x133028520 <col:22> 'char[4]' lvalue "STR"
    |   | | | `-ImplicitCastExpr 0x1330285f0 <col:29> 'const char *' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x133028540 <col:29> 'const char *' lvalue ParmVar 0x13300dd58 'info' 'const char *'
    |   | | |-BinaryOperator 0x133028820 <line:15:11, col:53> 'int' '='
    |   | | | |-DeclRefExpr 0x133028608 <col:11> 'int' lvalue Var 0x13300e0c8 'rc' 'int'
    |   | | | `-CallExpr 0x1330287b8 <col:16, col:53> 'int'
    |   | | |   |-ImplicitCastExpr 0x1330287a0 <col:16> 'int (*)()' <FunctionToPointerDecay>
    |   | | |   | `-DeclRefExpr 0x133028708 <col:16> 'int ()' Function 0x133028650 'gpgrt_asprintf' 'int ()'
    |   | | |   |-UnaryOperator 0x133028748 <col:32, col:33> 'char **' prefix '&' cannot overflow
    |   | | |   | `-DeclRefExpr 0x133028728 <col:33> 'char *' lvalue Var 0x13300e030 'command' 'char *'
    |   | | |   |-ImplicitCastExpr 0x1330287f0 <col:42> 'char *' <ArrayToPointerDecay>
    |   | | |   | `-StringLiteral 0x133028760 <col:42> 'char[4]' lvalue "STR"
    |   | | |   `-ImplicitCastExpr 0x133028808 <col:49> 'const char *' <LValueToRValue>
    |   | | |     `-DeclRefExpr 0x133028780 <col:49> 'const char *' lvalue ParmVar 0x13300dd58 'info' 'const char *'
    |   | | |-IfStmt 0x133028ba0 <line:16:11, line:17:62>
    |   | | | |-BinaryOperator 0x133028898 <line:16:15, col:20> 'int' '<'
    |   | | | | |-ImplicitCastExpr 0x133028880 <col:15> 'int' <LValueToRValue>
    |   | | | | | `-DeclRefExpr 0x133028840 <col:15> 'int' lvalue Var 0x13300e0c8 'rc' 'int'
    |   | | | | `-IntegerLiteral 0x133028860 <col:20> 'int' 0
    |   | | | `-ReturnStmt 0x133028b90 <line:17:13, col:62>
    |   | | |   `-CallExpr 0x133028b68 <col:20, col:62> '<dependent type>' contains-errors
    |   | | |     |-DeclRefExpr 0x133028998 <col:20> 'int ()' Function 0x1330288e0 'gpg_error' 'int ()'
    |   | | |     `-CallExpr 0x133028b40 <col:31, col:61> '<dependent type>' contains-errors
    |   | | |       |-DeclRefExpr 0x133028a98 <col:31> 'int ()' Function 0x1330289e0 'gpg_err_code_from_errno' 'int ()'
    |   | | |       `-RecoveryExpr 0x133028b20 <col:56> '<dependent type>' contains-errors lvalue
    |   | | |-BinaryOperator 0x133028ef8 <line:18:11, col:75> 'int' contains-errors '='
    |   | | | |-DeclRefExpr 0x133028bc0 <col:11> 'int' lvalue Var 0x13300e0c8 'rc' 'int'
    |   | | | `-CallExpr 0x133028eb0 <col:16, col:75> '<dependent type>' contains-errors
    |   | | |   |-DeclRefExpr 0x133028cc0 <col:16> 'int ()' Function 0x133028c08 'assuan_inquire' 'int ()'
    |   | | |   |-RecoveryExpr 0x133028e38 <col:32> '<dependent type>' contains-errors lvalue
    |   | | |   |-DeclRefExpr 0x133028cf8 <col:37> 'char *' lvalue Var 0x13300e030 'command' 'char *'
    |   | | |   |-UnaryOperator 0x133028d70 <col:46, col:47> 'unsigned char **' prefix '&' cannot overflow
    |   | | |   | `-DeclRefExpr 0x133028d18 <col:47> 'unsigned char *' lvalue Var 0x13300e198 'value' 'unsigned char *'
    |   | | |   |-UnaryOperator 0x133028e78 <col:54, col:55> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | | |   | `-RecoveryExpr 0x133028e58 <col:55> '<dependent type>' contains-errors lvalue
    |   | | |   `-RecoveryExpr 0x133028e90 <col:65> '<dependent type>' contains-errors lvalue
    |   | | `-CallExpr 0x133029050 <line:19:11, col:25> 'int'
    |   | |   |-ImplicitCastExpr 0x133029038 <col:11> 'int (*)()' <FunctionToPointerDecay>
    |   | |   | `-DeclRefExpr 0x133028ff8 <col:11> 'int ()' Function 0x133028f40 'xfree' 'int ()'
    |   | |   `-ImplicitCastExpr 0x133029078 <col:18> 'char *' <LValueToRValue>
    |   | |     `-DeclRefExpr 0x133029018 <col:18> 'char *' lvalue Var 0x13300e030 'command' 'char *'
    |   | `-CompoundStmt 0x1330293a0 <line:22:9, line:26:9>
    |   |   |-CallExpr 0x133029120 <line:23:11, col:27> 'int'
    |   |   | |-ImplicitCastExpr 0x133029108 <col:11> 'int (*)()' <FunctionToPointerDecay>
    |   |   | | `-DeclRefExpr 0x1330290c8 <col:11> 'int ()' Function 0x133028400 'log_debug' 'int ()'
    |   |   | `-ImplicitCastExpr 0x133029148 <col:22> 'char *' <ArrayToPointerDecay>
    |   |   |   `-StringLiteral 0x1330290e8 <col:22> 'char[4]' lvalue "STR"
    |   |   `-BinaryOperator 0x133029380 <line:24:11, line:25:61> 'int' contains-errors '='
    |   |     |-DeclRefExpr 0x133029160 <line:24:11> 'int' lvalue Var 0x13300e0c8 'rc' 'int'
    |   |     `-CallExpr 0x133029338 <col:16, line:25:61> '<dependent type>' contains-errors
    |   |       |-DeclRefExpr 0x133029180 <line:24:16> 'int ()' Function 0x133028c08 'assuan_inquire' 'int ()'
    |   |       |-RecoveryExpr 0x1330292c0 <col:32> '<dependent type>' contains-errors lvalue
    |   |       |-StringLiteral 0x1330291b8 <col:37> 'char[4]' lvalue "STR"
    |   |       |-UnaryOperator 0x1330291f8 <line:25:32, col:33> 'unsigned char **' prefix '&' cannot overflow
    |   |       | `-DeclRefExpr 0x1330291d8 <col:33> 'unsigned char *' lvalue Var 0x13300e198 'value' 'unsigned char *'
    |   |       |-UnaryOperator 0x133029300 <col:40, col:41> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   |       | `-RecoveryExpr 0x1330292e0 <col:41> '<dependent type>' contains-errors lvalue
    |   |       `-RecoveryExpr 0x133029318 <col:51> '<dependent type>' contains-errors lvalue
    |   |-IfStmt 0x1329226e8 <line:27:7, line:28:21>
    |   | |-UnaryOperator 0x132922638 <line:27:11, col:12> 'int' prefix '!' cannot overflow
    |   | | `-ImplicitCastExpr 0x132922620 <col:12> 'int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x132922600 <col:12> 'int' lvalue Var 0x13300e0c8 'rc' 'int'
    |   | `-CallExpr 0x1329226a8 <line:28:9, col:21> 'int'
    |   |   |-ImplicitCastExpr 0x132922690 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   |   | `-DeclRefExpr 0x132922650 <col:9> 'int ()' Function 0x133028f40 'xfree' 'int ()'
    |   |   `-ImplicitCastExpr 0x1329226d0 <col:16> 'unsigned char *' <LValueToRValue>
    |   |     `-DeclRefExpr 0x132922670 <col:16> 'unsigned char *' lvalue Var 0x13300e198 'value' 'unsigned char *'
    |   `-ReturnStmt 0x132922740 <line:29:7, col:14>
    |     `-ImplicitCastExpr 0x132922728 <col:14> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x132922708 <col:14> 'int' lvalue Var 0x13300e0c8 'rc' 'int'
    |-CallExpr 0x132922860 <line:33:3, col:25> 'int'
    | |-ImplicitCastExpr 0x132922848 <col:3> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x1329227e8 <col:3> 'int ()' Function 0x133028400 'log_debug' 'int ()'
    | |-ImplicitCastExpr 0x132922890 <col:14> 'char *' <ArrayToPointerDecay>
    | | `-StringLiteral 0x132922808 <col:14> 'char[4]' lvalue "STR"
    | `-ImplicitCastExpr 0x1329228a8 <col:21> 'const char *' <LValueToRValue>
    |   `-DeclRefExpr 0x132922828 <col:21> 'const char *' lvalue ParmVar 0x13300dd58 'info' 'const char *'
    |-BinaryOperator 0x1329229f8 <line:35:3, col:45> 'int' '='
    | |-DeclRefExpr 0x1329228c0 <col:3> 'int' lvalue Var 0x13300e0c8 'rc' 'int'
    | `-CallExpr 0x132922990 <col:8, col:45> 'int'
    |   |-ImplicitCastExpr 0x132922978 <col:8> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x1329228e0 <col:8> 'int ()' Function 0x133028650 'gpgrt_asprintf' 'int ()'
    |   |-UnaryOperator 0x132922920 <col:24, col:25> 'char **' prefix '&' cannot overflow
    |   | `-DeclRefExpr 0x132922900 <col:25> 'char *' lvalue Var 0x13300e030 'command' 'char *'
    |   |-ImplicitCastExpr 0x1329229c8 <col:34> 'char *' <ArrayToPointerDecay>
    |   | `-StringLiteral 0x132922938 <col:34> 'char[4]' lvalue "STR"
    |   `-ImplicitCastExpr 0x1329229e0 <col:41> 'const char *' <LValueToRValue>
    |     `-DeclRefExpr 0x132922958 <col:41> 'const char *' lvalue ParmVar 0x13300dd58 'info' 'const char *'
    |-CallExpr 0x132922bc0 <line:41:3, col:17> 'int'
    | |-ImplicitCastExpr 0x132922ba8 <col:3> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x132922b68 <col:3> 'int ()' Function 0x133028f40 'xfree' 'int ()'
    | `-ImplicitCastExpr 0x132922be8 <col:10> 'char *' <LValueToRValue>
    |   `-DeclRefExpr 0x132922b88 <col:10> 'char *' lvalue Var 0x13300e030 'command' 'char *'
    |-IfStmt 0x132922c80 <line:42:3, line:43:12>
    | |-ImplicitCastExpr 0x132922c20 <line:42:7> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x132922c00 <col:7> 'int' lvalue Var 0x13300e0c8 'rc' 'int'
    | `-ReturnStmt 0x132922c70 <line:43:5, col:12>
    |   `-ImplicitCastExpr 0x132922c58 <col:12> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x132922c38 <col:12> 'int' lvalue Var 0x13300e0c8 'rc' 'int'
    |-IfStmt 0x132922dd0 <line:45:3, line:50:5>
    | |-RecoveryExpr 0x132922ce0 <line:45:7, col:36> '_Bool' contains-errors
    | `-CompoundStmt 0x132922db8 <line:46:5, line:50:5>
    |   `-CallExpr 0x132922d58 <line:48:7, col:19> 'int'
    |     |-ImplicitCastExpr 0x132922d40 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x132922d00 <col:7> 'int ()' Function 0x133028f40 'xfree' 'int ()'
    |     `-ImplicitCastExpr 0x132922d80 <col:14> 'unsigned char *' <LValueToRValue>
    |       `-DeclRefExpr 0x132922d20 <col:14> 'unsigned char *' lvalue Var 0x13300e198 'value' 'unsigned char *'
    |-BinaryOperator 0x132922eb8 <line:51:3, col:20> 'char *' '='
    | |-UnaryOperator 0x132922e28 <col:3, col:4> 'char *' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x132922e10 <col:4> 'char **' <LValueToRValue>
    | |   `-DeclRefExpr 0x132922df0 <col:4> 'char **' lvalue ParmVar 0x13300de08 'retstr' 'char **'
    | `-CStyleCastExpr 0x132922e90 <col:13, col:20> 'char *' <BitCast>
    |   `-ImplicitCastExpr 0x132922e78 <col:20> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
    |     `-DeclRefExpr 0x132922e40 <col:20> 'unsigned char *' lvalue Var 0x13300e198 'value' 'unsigned char *'
    `-ReturnStmt 0x132922ef8 <line:52:3, col:10>
      `-IntegerLiteral 0x132922ed8 <col:10> 'int' 0
