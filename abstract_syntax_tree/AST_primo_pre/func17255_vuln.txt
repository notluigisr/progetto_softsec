`-FunctionDecl 0x15180ddc8  line:1:10 invalid GetZoomLevel 'double (int)'
  |-ParmVarDecl 0x15180dcf0 <col:23, <invalid sloc>> col:25 invalid 'int'
  `-CompoundStmt 0x151827e10 <col:45, line:12:3>
    |-DeclStmt 0x15180df18 <line:2:5, col:24>
    | `-VarDecl 0x15180de90 <col:5, col:21> col:12 used result 'double' cinit
    |   `-FloatingLiteral 0x15180def8 <col:21> 'double' 0.000000e+00
    |-RecoveryExpr 0x15180df60 <line:3:5> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x15180e2f0 <line:4:5, line:5:14>
    | |-UnaryOperator 0x15180e290 <line:4:9, col:59> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-CallExpr 0x15180e258 <col:10, col:59> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x15180e0e0 <col:10> 'int ()' Function 0x15180e028 'MaybeGetRenderFrame' 'int ()'
    | |   |-RecoveryExpr 0x15180e200 <col:30> '<dependent type>' contains-errors lvalue
    | |   |-StringLiteral 0x15180e160 <col:39> 'char[4]' lvalue "STR"
    | |   `-UnaryOperator 0x15180e240 <col:46, col:47> '<dependent type>' contains-errors prefix '&' cannot overflow
    | |     `-RecoveryExpr 0x15180e220 <col:47> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x15180e2e0 <line:5:7, col:14>
    |   `-ImplicitCastExpr 0x15180e2c8 <col:14> 'double' <LValueToRValue>
    |     `-DeclRefExpr 0x15180e2a8 <col:14> 'double' lvalue Var 0x15180de90 'result' 'double'
    `-ReturnStmt 0x151827e00 <line:11:5, col:12>
      `-ImplicitCastExpr 0x15180e3e8 <col:12> 'double' <LValueToRValue>
        `-DeclRefExpr 0x15180e3c8 <col:12> 'double' lvalue Var 0x15180de90 'result' 'double'
