`-FunctionDecl 0x12a80f718  line:1:14 invalid print_value 'char *(int *, int, int)' static
  |-ParmVarDecl 0x12a80f528 <col:27, col:34> col:34 invalid item 'int *'
  |-ParmVarDecl 0x12a80f5a8 <col:40, col:44> col:44 used depth 'int'
  |-ParmVarDecl 0x12a80f628 <col:51, col:55> col:55 used fmt 'int'
  `-CompoundStmt 0x12a82a800 <line:2:1, line:17:1>
    |-DeclStmt 0x12a80f890 <line:3:2, col:15>
    | `-VarDecl 0x12a80f7f0 <col:2, col:14> col:8 used out 'char *' cinit
    |   `-ImplicitCastExpr 0x12a80f878 <col:14> 'char *' <NullToPointer>
    |     `-IntegerLiteral 0x12a80f858 <col:14> 'int' 0
    |-IfStmt 0x12a80f940 <line:5:2, line:6:10>
    | |-UnaryOperator 0x12a80f8e0 <line:5:7, col:9> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x12a80f8c8 <col:9> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x12a80f8a8 <col:9> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x12a80f930 <line:6:3, col:10>
    |   `-ImplicitCastExpr 0x12a80f918 <col:10> 'char *' <NullToPointer>
    |     `-IntegerLiteral 0x12a80f8f8 <col:10> 'int' 0
    |-SwitchStmt 0x12a80fa28 <line:7:2, line:15:2>
    | |-BinaryOperator 0x12a80fa08 <line:7:11, col:28> '<dependent type>' contains-errors '&'
    | | |-ParenExpr 0x12a80f9c8 <col:11, col:24> '<dependent type>' contains-errors lvalue
    | | | `-CXXDependentScopeMemberExpr 0x12a80f980 <col:13, col:19> '<dependent type>' contains-errors lvalue ->type
    | | |   `-RecoveryExpr 0x12a80f960 <col:13> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x12a80f9e8 <col:28> 'int' 255
    | `-CompoundStmt 0x12a829f38 <col:34, line:15:2>
    |   |-BinaryOperator 0x12a829520 <line:8:22, col:48> 'char *' '='
    |   | |-DeclRefExpr 0x12a80fa68 <col:22> 'char *' lvalue Var 0x12a80f7f0 'out' 'char *'
    |   | `-ImplicitCastExpr 0x12a8290e8 <col:28, col:48> 'char *' <IntegralToPointer>
    |   |   `-CallExpr 0x12a8290a8 <col:28, col:48> 'int'
    |   |     |-ImplicitCastExpr 0x12a829090 <col:28> 'int (*)()' <FunctionToPointerDecay>
    |   |     | `-DeclRefExpr 0x12a80fbe0 <col:28> 'int ()' Function 0x12a80fb28 'cJSON_strdup' 'int ()'
    |   |     `-ImplicitCastExpr 0x12a8290d0 <col:42> 'char *' <ArrayToPointerDecay>
    |   |       `-StringLiteral 0x12a829040 <col:42> 'char[4]' lvalue "STR"
    |   |-BreakStmt 0x12a829540 <col:51>
    |   |-BinaryOperator 0x12a829630 <line:9:22, col:48> 'char *' '='
    |   | |-DeclRefExpr 0x12a829560 <col:22> 'char *' lvalue Var 0x12a80f7f0 'out' 'char *'
    |   | `-ImplicitCastExpr 0x12a829618 <col:28, col:48> 'char *' <IntegralToPointer>
    |   |   `-CallExpr 0x12a8295d8 <col:28, col:48> 'int'
    |   |     |-ImplicitCastExpr 0x12a8295c0 <col:28> 'int (*)()' <FunctionToPointerDecay>
    |   |     | `-DeclRefExpr 0x12a829580 <col:28> 'int ()' Function 0x12a80fb28 'cJSON_strdup' 'int ()'
    |   |     `-ImplicitCastExpr 0x12a829600 <col:42> 'char *' <ArrayToPointerDecay>
    |   |       `-StringLiteral 0x12a8295a0 <col:42> 'char[4]' lvalue "STR"
    |   |-BreakStmt 0x12a829650 <col:51>
    |   |-CaseStmt 0x12a829690 <line:10:3, col:48>
    |   | |-DeclRefExpr 0x12a829670 <col:8> 'int ()' Function 0x12a80fb28 'cJSON_strdup' 'int ()'
    |   | `-BinaryOperator 0x12a829788 <col:22, col:48> 'char *' '='
    |   |   |-DeclRefExpr 0x12a8296b8 <col:22> 'char *' lvalue Var 0x12a80f7f0 'out' 'char *'
    |   |   `-ImplicitCastExpr 0x12a829770 <col:28, col:48> 'char *' <IntegralToPointer>
    |   |     `-CallExpr 0x12a829730 <col:28, col:48> 'int'
    |   |       |-ImplicitCastExpr 0x12a829718 <col:28> 'int (*)()' <FunctionToPointerDecay>
    |   |       | `-DeclRefExpr 0x12a8296d8 <col:28> 'int ()' Function 0x12a80fb28 'cJSON_strdup' 'int ()'
    |   |       `-ImplicitCastExpr 0x12a829758 <col:42> 'char *' <ArrayToPointerDecay>
    |   |         `-StringLiteral 0x12a8296f8 <col:42> 'char[4]' lvalue "STR"
    |   |-BreakStmt 0x12a8297a8 <col:51>
    |   |-BinaryOperator 0x12a829930 <line:11:22, col:47> 'char *' contains-errors '='
    |   | |-DeclRefExpr 0x12a8297c8 <col:22> 'char *' lvalue Var 0x12a80f7f0 'out' 'char *'
    |   | `-CallExpr 0x12a829908 <col:28, col:47> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x12a8298c8 <col:28> 'int ()' Function 0x12a829810 'print_number' 'int ()'
    |   |   `-RecoveryExpr 0x12a8298e8 <col:42> '<dependent type>' contains-errors lvalue
    |   |-BreakStmt 0x12a829950 <col:50>
    |   |-CaseStmt 0x12a829990 <line:12:3, col:47>
    |   | |-DeclRefExpr 0x12a829970 <col:8> 'int ()' Function 0x12a80fb28 'cJSON_strdup' 'int ()'
    |   | `-BinaryOperator 0x12a829b20 <col:22, col:47> 'char *' contains-errors '='
    |   |   |-DeclRefExpr 0x12a8299b8 <col:22> 'char *' lvalue Var 0x12a80f7f0 'out' 'char *'
    |   |   `-CallExpr 0x12a829af8 <col:28, col:47> '<dependent type>' contains-errors
    |   |     |-DeclRefExpr 0x12a829ab8 <col:28> 'int ()' Function 0x12a829a00 'print_string' 'int ()'
    |   |     `-RecoveryExpr 0x12a829ad8 <col:42> '<dependent type>' contains-errors lvalue
    |   |-BreakStmt 0x12a829b40 <col:50>
    |   |-BinaryOperator 0x12a829d18 <line:13:22, col:58> 'char *' contains-errors '='
    |   | |-DeclRefExpr 0x12a829b60 <col:22> 'char *' lvalue Var 0x12a80f7f0 'out' 'char *'
    |   | `-CallExpr 0x12a829ce0 <col:28, col:58> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x12a829c60 <col:28> 'int ()' Function 0x12a829ba8 'print_array' 'int ()'
    |   |   |-RecoveryExpr 0x12a829c80 <col:41> '<dependent type>' contains-errors lvalue
    |   |   |-DeclRefExpr 0x12a829ca0 <col:47> 'int' lvalue ParmVar 0x12a80f5a8 'depth' 'int'
    |   |   `-DeclRefExpr 0x12a829cc0 <col:54> 'int' lvalue ParmVar 0x12a80f628 'fmt' 'int'
    |   |-BreakStmt 0x12a829d38 <col:61>
    |   |-BinaryOperator 0x12a829f10 <line:14:22, col:59> 'char *' contains-errors '='
    |   | |-DeclRefExpr 0x12a829d58 <col:22> 'char *' lvalue Var 0x12a80f7f0 'out' 'char *'
    |   | `-CallExpr 0x12a829ed8 <col:28, col:59> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x12a829e58 <col:28> 'int ()' Function 0x12a829da0 'print_object' 'int ()'
    |   |   |-RecoveryExpr 0x12a829e78 <col:42> '<dependent type>' contains-errors lvalue
    |   |   |-DeclRefExpr 0x12a829e98 <col:48> 'int' lvalue ParmVar 0x12a80f5a8 'depth' 'int'
    |   |   `-DeclRefExpr 0x12a829eb8 <col:55> 'int' lvalue ParmVar 0x12a80f628 'fmt' 'int'
    |   `-BreakStmt 0x12a829f30 <col:62>
    `-ReturnStmt 0x12a829ff0 <line:16:2, col:9>
      `-ImplicitCastExpr 0x12a829fd8 <col:9> 'char *' <LValueToRValue>
        `-DeclRefExpr 0x12a829fb8 <col:9> 'char *' lvalue Var 0x12a80f7f0 'out' 'char *'
