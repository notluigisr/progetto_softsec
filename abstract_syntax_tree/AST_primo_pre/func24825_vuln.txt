`-FunctionDecl 0x12600dfe8  line:1:12 invalid cloop_open 'int (int *, int *, int, int **)' static
  |-ParmVarDecl 0x12600dd28 <col:23, col:41> col:41 referenced invalid bs 'int *'
  |-ParmVarDecl 0x12600dda8 <col:45, col:52> col:52 invalid options 'int *'
  |-ParmVarDecl 0x12600de28 <col:61, col:65> col:65 flags 'int'
  |-ParmVarDecl 0x12600dee0 <line:2:23, col:31> col:31 invalid errp 'int **'
  `-CompoundStmt 0x126029740 <line:3:1, line:61:1>
    |-DeclStmt 0x12600e1b0 <line:6:5, col:12>
    | `-VarDecl 0x12600e148 <col:5, col:9> col:9 used ret 'int'
    |-BinaryOperator 0x12600e278 <line:8:5, col:21> '<dependent type>' contains-errors '='
    | |-CXXDependentScopeMemberExpr 0x12600e210 <col:5, col:9> '<dependent type>' contains-errors lvalue ->read_only
    | | `-RecoveryExpr 0x12600e1e8 <col:5> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x12600e1c8 <col:5> 'int *' lvalue ParmVar 0x12600dd28 'bs' 'int *'
    | `-IntegerLiteral 0x12600e258 <col:21> 'int' 1
    |-BinaryOperator 0x126027a70 <line:11:5, col:54> 'int' contains-errors '='
    | |-DeclRefExpr 0x12600e298 <col:5> 'int' lvalue Var 0x12600e148 'ret' 'int'
    | `-CallExpr 0x126027a30 <col:11, col:54> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x126027810 <col:11> 'int ()' Function 0x12600e358 'bdrv_pread' 'int ()'
    |   |-CXXDependentScopeMemberExpr 0x126027850 <col:22, col:26> '<dependent type>' contains-errors lvalue ->file
    |   | `-RecoveryExpr 0x126027830 <col:22> '<dependent type>' contains-errors lvalue
    |   |-IntegerLiteral 0x126027898 <col:32> 'int' 128
    |   |-UnaryOperator 0x126027a18 <col:37, col:41> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | `-CXXDependentScopeMemberExpr 0x1260279d0 <col:38, col:41> '<dependent type>' contains-errors lvalue ->block_size
    |   |   `-RecoveryExpr 0x1260279b0 <col:38> '<dependent type>' contains-errors lvalue
    |   `-IntegerLiteral 0x126027930 <col:53> 'int' 4
    |-IfStmt 0x126027b68 <line:12:5, line:14:5>
    | |-BinaryOperator 0x126027ae8 <line:12:9, col:15> 'int' '<'
    | | |-ImplicitCastExpr 0x126027ad0 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x126027a90 <col:9> 'int' lvalue Var 0x12600e148 'ret' 'int'
    | | `-IntegerLiteral 0x126027ab0 <col:15> 'int' 0
    | `-CompoundStmt 0x126027b50 <col:18, line:14:5>
    |   `-ReturnStmt 0x126027b40 <line:13:9, col:16>
    |     `-ImplicitCastExpr 0x126027b28 <col:16> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x126027b08 <col:16> 'int' lvalue Var 0x12600e148 'ret' 'int'
    |-BinaryOperator 0x126027fd0 <line:17:5, col:56> 'int' contains-errors '='
    | |-DeclRefExpr 0x126027d10 <col:5> 'int' lvalue Var 0x12600e148 'ret' 'int'
    | `-CallExpr 0x126027f90 <col:11, col:56> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x126027d30 <col:11> 'int ()' Function 0x12600e358 'bdrv_pread' 'int ()'
    |   |-CXXDependentScopeMemberExpr 0x126027d70 <col:22, col:26> '<dependent type>' contains-errors lvalue ->file
    |   | `-RecoveryExpr 0x126027d50 <col:22> '<dependent type>' contains-errors lvalue
    |   |-BinaryOperator 0x126027df8 <col:32, col:38> 'int' '+'
    |   | |-IntegerLiteral 0x126027db8 <col:32> 'int' 128
    |   | `-IntegerLiteral 0x126027dd8 <col:38> 'int' 4
    |   |-UnaryOperator 0x126027f78 <col:41, col:45> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | `-CXXDependentScopeMemberExpr 0x126027f30 <col:42, col:45> '<dependent type>' contains-errors lvalue ->n_blocks
    |   |   `-RecoveryExpr 0x126027f10 <col:42> '<dependent type>' contains-errors lvalue
    |   `-IntegerLiteral 0x126027e90 <col:55> 'int' 4
    |-IfStmt 0x1260280c8 <line:18:5, line:20:5>
    | |-BinaryOperator 0x126028048 <line:18:9, col:15> 'int' '<'
    | | |-ImplicitCastExpr 0x126028030 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x126027ff0 <col:9> 'int' lvalue Var 0x12600e148 'ret' 'int'
    | | `-IntegerLiteral 0x126028010 <col:15> 'int' 0
    | `-CompoundStmt 0x1260280b0 <col:18, line:20:5>
    |   `-ReturnStmt 0x1260280a0 <line:19:9, col:16>
    |     `-ImplicitCastExpr 0x126028088 <col:16> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x126028068 <col:16> 'int' lvalue Var 0x12600e148 'ret' 'int'
    |-IfStmt 0x126028588 <line:28:5, line:30:5>
    | |-BinaryOperator 0x1260284e8 <line:28:9, col:15> 'int' '<'
    | | |-ImplicitCastExpr 0x1260284d0 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x126028490 <col:9> 'int' lvalue Var 0x12600e148 'ret' 'int'
    | | `-IntegerLiteral 0x1260284b0 <col:15> 'int' 0
    | `-CompoundStmt 0x126028570 <col:18, line:30:5>
    |   `-GotoStmt 0x126028558 <line:29:9, col:14> 'fail' 0x126028508
    |-IfStmt 0x126029390 <line:45:5, line:48:5>
    | |-RecoveryExpr 0x126029320 <line:45:9, col:37> '_Bool' contains-errors
    | `-CompoundStmt 0x126029378 <col:43, line:48:5>
    |   `-GotoStmt 0x126029360 <line:47:9, col:14> 'fail' 0x126028508
    |-ReturnStmt 0x126029580 <line:54:5, col:12>
    | `-IntegerLiteral 0x126029560 <col:12> 'int' 0
    |-LabelStmt 0x126029698 <line:56:1, col:5> 'fail'
    | `-NullStmt 0x126029690 <col:5>
    `-ReturnStmt 0x126029730 <line:60:5, col:12>
      `-ImplicitCastExpr 0x126029718 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x1260296f8 <col:12> 'int' lvalue Var 0x12600e148 'ret' 'int'
