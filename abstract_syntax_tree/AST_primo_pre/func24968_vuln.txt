`-FunctionDecl 0x1311229e8  line:1:1 invalid next_state_class 'int (int *, int *, enum CCVALTYPE *, enum CCSTATE *, int *)'
  |-ParmVarDecl 0x13180dd28 <col:18, col:30> col:30 invalid cc 'int *'
  |-ParmVarDecl 0x13180dda8 <col:34, col:49> col:49 invalid vs 'int *'
  |-ParmVarDecl 0x131122600 <col:53, col:69> col:69 used type 'enum CCVALTYPE *'
  |-ParmVarDecl 0x1311227f8 <line:2:4, col:18> col:18 used state 'enum CCSTATE *'
  |-ParmVarDecl 0x131122878 <col:25, col:34> col:34 invalid env 'int *'
  `-CompoundStmt 0x131828aa8 <line:3:1, line:23:1>
    |-DeclStmt 0x131122b38 <line:4:3, col:8>
    | `-VarDecl 0x131122ad0 <col:3, col:7> col:7 used r 'int'
    |-IfStmt 0x131122cc0 <line:6:3, line:7:12>
    | |-BinaryOperator 0x131122c58 <line:6:7, col:17> 'int' contains-errors '=='
    | | |-UnaryOperator 0x131122c20 <col:7, col:8> 'enum CCSTATE' lvalue prefix '*' cannot overflow
    | | | `-ImplicitCastExpr 0x131122c08 <col:8> 'enum CCSTATE *' <LValueToRValue>
    | | |   `-DeclRefExpr 0x131122b50 <col:8> 'enum CCSTATE *' lvalue ParmVar 0x1311227f8 'state' 'enum CCSTATE *'
    | | `-RecoveryExpr 0x131122c38 <col:17> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x131122cb0 <line:7:5, col:12>
    |   `-RecoveryExpr 0x131122c90 <col:12> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x1318286c0 <line:9:3, line:16:3>
    | |-BinaryOperator 0x131122f20 <line:9:7, col:39> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x131122e90 <col:7, col:17> 'int' contains-errors '=='
    | | | |-UnaryOperator 0x131122e58 <col:7, col:8> 'enum CCSTATE' lvalue prefix '*' cannot overflow
    | | | | `-ImplicitCastExpr 0x131122e40 <col:8> 'enum CCSTATE *' <LValueToRValue>
    | | | |   `-DeclRefExpr 0x131122ce0 <col:8> 'enum CCSTATE *' lvalue ParmVar 0x1311227f8 'state' 'enum CCSTATE *'
    | | | `-RecoveryExpr 0x131122e70 <col:17> '<dependent type>' contains-errors lvalue
    | | `-BinaryOperator 0x131122f00 <col:30, col:39> 'int' contains-errors '!='
    | |   |-UnaryOperator 0x131122ec8 <col:30, col:31> 'enum CCVALTYPE' lvalue prefix '*' cannot overflow
    | |   | `-ImplicitCastExpr 0x131122eb0 <col:31> 'enum CCVALTYPE *' <LValueToRValue>
    | |   |   `-DeclRefExpr 0x131122d68 <col:31> 'enum CCVALTYPE *' lvalue ParmVar 0x131122600 'type' 'enum CCVALTYPE *'
    | |   `-RecoveryExpr 0x131122ee0 <col:39> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x1318286a8 <col:50, line:16:3>
    |   `-IfStmt 0x131828678 <line:10:5, line:15:5> has_else
    |     |-BinaryOperator 0x131123048 <line:10:9, col:18> 'int' contains-errors '=='
    |     | |-UnaryOperator 0x131123010 <col:9, col:10> 'enum CCVALTYPE' lvalue prefix '*' cannot overflow
    |     | | `-ImplicitCastExpr 0x131122ff8 <col:10> 'enum CCVALTYPE *' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x131122f40 <col:10> 'enum CCVALTYPE *' lvalue ParmVar 0x131122600 'type' 'enum CCVALTYPE *'
    |     | `-RecoveryExpr 0x131123028 <col:18> '<dependent type>' contains-errors lvalue
    |     |-CallExpr 0x131123318 <line:11:7, col:41> '<dependent type>' contains-errors
    |     | |-DeclRefExpr 0x1311231c0 <col:7> 'int ()' Function 0x131123108 'BITSET_SET_BIT' 'int ()'
    |     | |-CXXDependentScopeMemberExpr 0x131123200 <col:22, col:26> '<dependent type>' contains-errors lvalue ->bs
    |     | | `-RecoveryExpr 0x1311231e0 <col:22> '<dependent type>' contains-errors lvalue
    |     | `-CStyleCastExpr 0x1311232f0 <col:30, col:40> 'int' contains-errors <Dependent>
    |     |   `-ParenExpr 0x1311232d0 <col:36, col:40> '<dependent type>' contains-errors
    |     |     `-UnaryOperator 0x131123280 <col:37, col:38> '<dependent type>' contains-errors prefix '*' cannot overflow
    |     |       `-ImplicitCastExpr 0x131123268 <col:38> '<dependent type>' contains-errors <LValueToRValue>
    |     |         `-RecoveryExpr 0x131123248 <col:38> '<dependent type>' contains-errors lvalue
    |     `-IfStmt 0x131828658 <line:12:10, line:15:5>
    |       |-BinaryOperator 0x131123450 <line:12:14, col:23> 'int' contains-errors '=='
    |       | |-UnaryOperator 0x131123418 <col:14, col:15> 'enum CCVALTYPE' lvalue prefix '*' cannot overflow
    |       | | `-ImplicitCastExpr 0x131123400 <col:15> 'enum CCVALTYPE *' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x131123348 <col:15> 'enum CCVALTYPE *' lvalue ParmVar 0x131122600 'type' 'enum CCVALTYPE *'
    |       | `-RecoveryExpr 0x131123430 <col:23> '<dependent type>' contains-errors lvalue
    |       `-CompoundStmt 0x131828638 <col:39, line:15:5>
    |         |-BinaryOperator 0x131828538 <line:13:7, col:52> 'int' contains-errors '='
    |         | |-DeclRefExpr 0x131123470 <col:7> 'int' lvalue Var 0x131122ad0 'r' 'int'
    |         | `-CallExpr 0x1318284f8 <col:11, col:52> '<dependent type>' contains-errors
    |         |   |-DeclRefExpr 0x131123570 <col:11> 'int ()' Function 0x1311234b8 'add_code_range' 'int ()'
    |         |   |-UnaryOperator 0x131828420 <col:26, col:36> '<dependent type>' contains-errors prefix '&' cannot overflow
    |         |   | `-ParenExpr 0x131828400 <col:27, col:36> '<dependent type>' contains-errors lvalue
    |         |   |   `-CXXDependentScopeMemberExpr 0x1311235b0 <col:28, col:32> '<dependent type>' contains-errors lvalue ->mbuf
    |         |   |     `-RecoveryExpr 0x131123590 <col:28> '<dependent type>' contains-errors lvalue
    |         |   |-RecoveryExpr 0x131828438 <col:39> '<dependent type>' contains-errors lvalue
    |         |   |-UnaryOperator 0x131828490 <col:44, col:45> '<dependent type>' contains-errors prefix '*' cannot overflow
    |         |   | `-ImplicitCastExpr 0x131828478 <col:45> '<dependent type>' contains-errors <LValueToRValue>
    |         |   |   `-RecoveryExpr 0x131828458 <col:45> '<dependent type>' contains-errors lvalue
    |         |   `-UnaryOperator 0x1318284e0 <col:49, col:50> '<dependent type>' contains-errors prefix '*' cannot overflow
    |         |     `-ImplicitCastExpr 0x1318284c8 <col:50> '<dependent type>' contains-errors <LValueToRValue>
    |         |       `-RecoveryExpr 0x1318284a8 <col:50> '<dependent type>' contains-errors lvalue
    |         `-IfStmt 0x131828618 <line:14:7, col:25>
    |           |-BinaryOperator 0x1318285b0 <col:11, col:15> 'int' '<'
    |           | |-ImplicitCastExpr 0x131828598 <col:11> 'int' <LValueToRValue>
    |           | | `-DeclRefExpr 0x131828558 <col:11> 'int' lvalue Var 0x131122ad0 'r' 'int'
    |           | `-IntegerLiteral 0x131828578 <col:15> 'int' 0
    |           `-ReturnStmt 0x131828608 <col:18, col:25>
    |             `-ImplicitCastExpr 0x1318285f0 <col:25> 'int' <LValueToRValue>
    |               `-DeclRefExpr 0x1318285d0 <col:25> 'int' lvalue Var 0x131122ad0 'r' 'int'
    |-IfStmt 0x131828930 <line:18:3, line:19:14>
    | |-BinaryOperator 0x1318287e8 <line:18:7, col:17> 'int' contains-errors '!='
    | | |-UnaryOperator 0x1318287b0 <col:7, col:8> 'enum CCSTATE' lvalue prefix '*' cannot overflow
    | | | `-ImplicitCastExpr 0x131828798 <col:8> 'enum CCSTATE *' <LValueToRValue>
    | | |   `-DeclRefExpr 0x1318286e0 <col:8> 'enum CCSTATE *' lvalue ParmVar 0x1311227f8 'state' 'enum CCSTATE *'
    | | `-RecoveryExpr 0x1318287c8 <col:17> '<dependent type>' contains-errors lvalue
    | `-BinaryOperator 0x131828910 <line:19:5, col:14> 'enum CCSTATE' contains-errors '='
    |   |-UnaryOperator 0x1318288d8 <col:5, col:6> 'enum CCSTATE' lvalue prefix '*' cannot overflow
    |   | `-ImplicitCastExpr 0x1318288c0 <col:6> 'enum CCSTATE *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x131828808 <col:6> 'enum CCSTATE *' lvalue ParmVar 0x1311227f8 'state' 'enum CCSTATE *'
    |   `-RecoveryExpr 0x1318288f0 <col:14> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x131828a58 <line:21:3, col:12> 'enum CCVALTYPE' contains-errors '='
    | |-UnaryOperator 0x131828a20 <col:3, col:4> 'enum CCVALTYPE' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x131828a08 <col:4> 'enum CCVALTYPE *' <LValueToRValue>
    | |   `-DeclRefExpr 0x131828950 <col:4> 'enum CCVALTYPE *' lvalue ParmVar 0x131122600 'type' 'enum CCVALTYPE *'
    | `-RecoveryExpr 0x131828a38 <col:12> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x131828a98 <line:22:3, col:10>
      `-IntegerLiteral 0x131828a78 <col:10> 'int' 0
