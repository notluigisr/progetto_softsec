`-FunctionDecl 0x13e128288  line:1:1 invalid decodets 'int (char *, int *)'
  |-ParmVarDecl 0x13e1280d8 <line:2:2, col:8> col:8 used str 'char *'
  |-ParmVarDecl 0x13e1281a8 <line:3:2, col:8> col:8 invalid lfp 'int *'
  `-CompoundStmt 0x13e143110 <line:5:1, line:34:1>
    |-DeclStmt 0x13e1283c0 <line:6:2, col:10>
    | `-VarDecl 0x13e128358 <col:2, col:8> col:8 used cp 'char *'
    |-DeclStmt 0x13e1284e8 <line:7:2, col:14>
    | `-VarDecl 0x13e128480 <col:2, col:13> col:7 used buf 'char[30]'
    |-UnaryExprOrTypeTraitExpr 0x13e128558 <line:8:2, col:9> 'unsigned long' contains-errors sizeof
    | `-RecoveryExpr 0x13e128538 <col:9> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x13e141b18 <line:11:2, line:12:29>
    | |-BinaryOperator 0x13e1418a8 <line:11:6, col:56> 'int' '&&'
    | | |-BinaryOperator 0x13e128610 <col:6, col:14> 'int' '=='
    | | | |-ImplicitCastExpr 0x13e1285f8 <col:6, col:7> 'int' <IntegralCast>
    | | | | `-ImplicitCastExpr 0x13e1285e0 <col:6, col:7> 'char' <LValueToRValue>
    | | | |   `-UnaryOperator 0x13e1285b0 <col:6, col:7> 'char' lvalue prefix '*' cannot overflow
    | | | |     `-ImplicitCastExpr 0x13e128598 <col:7> 'char *' <LValueToRValue>
    | | | |       `-DeclRefExpr 0x13e128578 <col:7> 'char *' lvalue ParmVar 0x13e1280d8 'str' 'char *'
    | | | `-CharacterLiteral 0x13e1285c8 <col:14> 'int' 48
    | | `-ParenExpr 0x13e141888 <col:21, col:56> 'int'
    | |   `-BinaryOperator 0x13e141868 <col:22, col:53> 'int' '||'
    | |     |-BinaryOperator 0x13e128728 <col:22, col:34> 'int' '=='
    | |     | |-ImplicitCastExpr 0x13e128710 <col:22, col:29> 'int' <IntegralCast>
    | |     | | `-ImplicitCastExpr 0x13e1286f8 <col:22, col:29> 'char' <LValueToRValue>
    | |     | |   `-UnaryOperator 0x13e1286c8 <col:22, col:29> 'char' lvalue prefix '*' cannot overflow
    | |     | |     `-ParenExpr 0x13e1286a8 <col:23, col:29> 'char *'
    | |     | |       `-BinaryOperator 0x13e128688 <col:24, col:28> 'char *' '+'
    | |     | |         |-ImplicitCastExpr 0x13e128670 <col:24> 'char *' <LValueToRValue>
    | |     | |         | `-DeclRefExpr 0x13e128630 <col:24> 'char *' lvalue ParmVar 0x13e1280d8 'str' 'char *'
    | |     | |         `-IntegerLiteral 0x13e128650 <col:28> 'int' 1
    | |     | `-CharacterLiteral 0x13e1286e0 <col:34> 'int' 120
    | |     `-BinaryOperator 0x13e141848 <col:41, col:53> 'int' '=='
    | |       |-ImplicitCastExpr 0x13e141830 <col:41, col:48> 'int' <IntegralCast>
    | |       | `-ImplicitCastExpr 0x13e141818 <col:41, col:48> 'char' <LValueToRValue>
    | |       |   `-UnaryOperator 0x13e1287e0 <col:41, col:48> 'char' lvalue prefix '*' cannot overflow
    | |       |     `-ParenExpr 0x13e1287c0 <col:42, col:48> 'char *'
    | |       |       `-BinaryOperator 0x13e1287a0 <col:43, col:47> 'char *' '+'
    | |       |         |-ImplicitCastExpr 0x13e128788 <col:43> 'char *' <LValueToRValue>
    | |       |         | `-DeclRefExpr 0x13e128748 <col:43> 'char *' lvalue ParmVar 0x13e1280d8 'str' 'char *'
    | |       |         `-IntegerLiteral 0x13e128768 <col:47> 'int' 1
    | |       `-CharacterLiteral 0x13e141800 <col:53> 'int' 88
    | `-ReturnStmt 0x13e141b08 <line:12:3, col:29>
    |   `-CallExpr 0x13e141ad8 <col:10, col:29> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x13e141a20 <col:10> 'int ()' Function 0x13e141968 'hextolfp' 'int ()'
    |     |-BinaryOperator 0x13e141a98 <col:19, col:23> 'char *' '+'
    |     | |-ImplicitCastExpr 0x13e141a80 <col:19> 'char *' <LValueToRValue>
    |     | | `-DeclRefExpr 0x13e141a40 <col:19> 'char *' lvalue ParmVar 0x13e1280d8 'str' 'char *'
    |     | `-IntegerLiteral 0x13e141a60 <col:23> 'int' 2
    |     `-RecoveryExpr 0x13e141ab8 <col:26> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x13e142640 <line:15:2, line:23:2>
    | |-BinaryOperator 0x13e141bd0 <line:15:6, col:14> 'int' '=='
    | | |-ImplicitCastExpr 0x13e141bb8 <col:6, col:7> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x13e141ba0 <col:6, col:7> 'char' <LValueToRValue>
    | | |   `-UnaryOperator 0x13e141b70 <col:6, col:7> 'char' lvalue prefix '*' cannot overflow
    | | |     `-ImplicitCastExpr 0x13e141b58 <col:7> 'char *' <LValueToRValue>
    | | |       `-DeclRefExpr 0x13e141b38 <col:7> 'char *' lvalue ParmVar 0x13e1280d8 'str' 'char *'
    | | `-CharacterLiteral 0x13e141b88 <col:14> 'int' 34
    | `-CompoundStmt 0x13e142620 <col:19, line:23:2>
    |   |-BinaryOperator 0x13e141c88 <line:16:3, col:14> 'char *' '='
    |   | |-DeclRefExpr 0x13e141bf0 <col:3> 'char *' lvalue Var 0x13e128358 'cp' 'char *'
    |   | `-BinaryOperator 0x13e141c68 <col:8, col:14> 'char *' '+'
    |   |   |-ImplicitCastExpr 0x13e141c50 <col:8> 'char *' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x13e141c10 <col:8> 'char *' lvalue ParmVar 0x13e1280d8 'str' 'char *'
    |   |   `-IntegerLiteral 0x13e141c30 <col:14> 'int' 1
    |   `-ReturnStmt 0x13e142610 <line:22:3, col:30>
    |     `-CallExpr 0x13e1425e0 <col:10, col:30> '<dependent type>' contains-errors
    |       |-DeclRefExpr 0x13e142580 <col:10> 'int ()' Function 0x13e1424c8 'rtdatetolfp' 'int ()'
    |       |-DeclRefExpr 0x13e1425a0 <col:22> 'char[30]' lvalue Var 0x13e128480 'buf' 'char[30]'
    |       `-RecoveryExpr 0x13e1425c0 <col:27> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x13e142e90 <line:26:2, line:27:27>
    | |-BinaryOperator 0x13e142dd0 <line:26:6, col:65> 'int' '||'
    | | |-ParenExpr 0x13e142c00 <col:6, col:33> 'int'
    | | | `-BinaryOperator 0x13e1427d0 <col:7, col:30> 'int' '&&'
    | | |   |-BinaryOperator 0x13e1426f8 <col:7, col:15> 'int' '>='
    | | |   | |-ImplicitCastExpr 0x13e1426e0 <col:7, col:8> 'int' <IntegralCast>
    | | |   | | `-ImplicitCastExpr 0x13e1426c8 <col:7, col:8> 'char' <LValueToRValue>
    | | |   | |   `-UnaryOperator 0x13e142698 <col:7, col:8> 'char' lvalue prefix '*' cannot overflow
    | | |   | |     `-ImplicitCastExpr 0x13e142680 <col:8> 'char *' <LValueToRValue>
    | | |   | |       `-DeclRefExpr 0x13e142660 <col:8> 'char *' lvalue ParmVar 0x13e1280d8 'str' 'char *'
    | | |   | `-CharacterLiteral 0x13e1426b0 <col:15> 'int' 65
    | | |   `-BinaryOperator 0x13e1427b0 <col:22, col:30> 'int' '<='
    | | |     |-ImplicitCastExpr 0x13e142798 <col:22, col:23> 'int' <IntegralCast>
    | | |     | `-ImplicitCastExpr 0x13e142780 <col:22, col:23> 'char' <LValueToRValue>
    | | |     |   `-UnaryOperator 0x13e142750 <col:22, col:23> 'char' lvalue prefix '*' cannot overflow
    | | |     |     `-ImplicitCastExpr 0x13e142738 <col:23> 'char *' <LValueToRValue>
    | | |     |       `-DeclRefExpr 0x13e142718 <col:23> 'char *' lvalue ParmVar 0x13e1280d8 'str' 'char *'
    | | |     `-CharacterLiteral 0x13e142768 <col:30> 'int' 70
    | | `-ParenExpr 0x13e142db0 <col:38, col:65> 'int'
    | |   `-BinaryOperator 0x13e142d90 <col:39, col:62> 'int' '&&'
    | |     |-BinaryOperator 0x13e142cb8 <col:39, col:47> 'int' '>='
    | |     | |-ImplicitCastExpr 0x13e142ca0 <col:39, col:40> 'int' <IntegralCast>
    | |     | | `-ImplicitCastExpr 0x13e142c88 <col:39, col:40> 'char' <LValueToRValue>
    | |     | |   `-UnaryOperator 0x13e142c58 <col:39, col:40> 'char' lvalue prefix '*' cannot overflow
    | |     | |     `-ImplicitCastExpr 0x13e142c40 <col:40> 'char *' <LValueToRValue>
    | |     | |       `-DeclRefExpr 0x13e142c20 <col:40> 'char *' lvalue ParmVar 0x13e1280d8 'str' 'char *'
    | |     | `-CharacterLiteral 0x13e142c70 <col:47> 'int' 97
    | |     `-BinaryOperator 0x13e142d70 <col:54, col:62> 'int' '<='
    | |       |-ImplicitCastExpr 0x13e142d58 <col:54, col:55> 'int' <IntegralCast>
    | |       | `-ImplicitCastExpr 0x13e142d40 <col:54, col:55> 'char' <LValueToRValue>
    | |       |   `-UnaryOperator 0x13e142d10 <col:54, col:55> 'char' lvalue prefix '*' cannot overflow
    | |       |     `-ImplicitCastExpr 0x13e142cf8 <col:55> 'char *' <LValueToRValue>
    | |       |       `-DeclRefExpr 0x13e142cd8 <col:55> 'char *' lvalue ParmVar 0x13e1280d8 'str' 'char *'
    | |       `-CharacterLiteral 0x13e142d28 <col:62> 'int' 102
    | `-ReturnStmt 0x13e142e80 <line:27:3, col:27>
    |   `-CallExpr 0x13e142e50 <col:10, col:27> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x13e142df0 <col:10> 'int ()' Function 0x13e141968 'hextolfp' 'int ()'
    |     |-DeclRefExpr 0x13e142e10 <col:19> 'char *' lvalue ParmVar 0x13e1280d8 'str' 'char *'
    |     `-RecoveryExpr 0x13e142e30 <col:24> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x13e143050 <line:30:2, line:31:10>
    | |-CallExpr 0x13e142ff0 <line:30:6, col:21> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x13e142f90 <col:6> 'int ()' Function 0x13e142ed8 'atolfp' 'int ()'
    | | |-DeclRefExpr 0x13e142fb0 <col:13> 'char *' lvalue ParmVar 0x13e1280d8 'str' 'char *'
    | | `-RecoveryExpr 0x13e142fd0 <col:18> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x13e143040 <line:31:3, col:10>
    |   `-IntegerLiteral 0x13e143020 <col:10> 'int' 1
    `-ReturnStmt 0x13e143100 <line:33:2, col:29>
      `-CallExpr 0x13e1430d0 <col:9, col:29> '<dependent type>' contains-errors
        |-DeclRefExpr 0x13e143070 <col:9> 'int ()' Function 0x13e1424c8 'rtdatetolfp' 'int ()'
        |-DeclRefExpr 0x13e143090 <col:21> 'char *' lvalue ParmVar 0x13e1280d8 'str' 'char *'
        `-RecoveryExpr 0x13e1430b0 <col:26> '<dependent type>' contains-errors lvalue
