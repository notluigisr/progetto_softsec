`-FunctionDecl 0x16000de68  line:1:1 breakcmd 'int (int, char **)'
  |-ParmVarDecl 0x16000dcd8 <col:10, col:14> col:14 used argc 'int'
  |-ParmVarDecl 0x16000dd88 <col:20, col:27> col:27 used argv 'char **'
  `-CompoundStmt 0x160028a48 <line:2:1, line:14:1>
    |-DeclStmt 0x16000e308 <line:3:2, col:40>
    | `-VarDecl 0x16000df80 <col:2, col:39> col:6 used n 'int' cinit
    |   `-ConditionalOperator 0x16000e2d8 <col:10, col:39> 'int'
    |     |-BinaryOperator 0x16000e040 <col:10, col:17> 'int' '>'
    |     | |-ImplicitCastExpr 0x16000e028 <col:10> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x16000dfe8 <col:10> 'int' lvalue ParmVar 0x16000dcd8 'argc' 'int'
    |     | `-IntegerLiteral 0x16000e008 <col:17> 'int' 1
    |     |-CallExpr 0x16000e278 <col:21, col:35> 'int'
    |     | |-ImplicitCastExpr 0x16000e260 <col:21> 'int (*)()' <FunctionToPointerDecay>
    |     | | `-DeclRefExpr 0x16000e190 <col:21> 'int ()' Function 0x16000e0d8 'number' 'int ()'
    |     | `-ImplicitCastExpr 0x16000e2a0 <col:28, col:34> 'char *' <LValueToRValue>
    |     |   `-ArraySubscriptExpr 0x16000e208 <col:28, col:34> 'char *' lvalue
    |     |     |-ImplicitCastExpr 0x16000e1f0 <col:28> 'char **' <LValueToRValue>
    |     |     | `-DeclRefExpr 0x16000e1b0 <col:28> 'char **' lvalue ParmVar 0x16000dd88 'argv' 'char **'
    |     |     `-IntegerLiteral 0x16000e1d0 <col:33> 'int' 1
    |     `-IntegerLiteral 0x16000e2b8 <col:39> 'int' 1
    |-IfStmt 0x1600285a8 <line:5:2, line:6:17>
    | |-BinaryOperator 0x16000e378 <line:5:6, col:11> 'int' '<='
    | | |-ImplicitCastExpr 0x16000e360 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x16000e320 <col:6> 'int' lvalue Var 0x16000df80 'n' 'int'
    | | `-IntegerLiteral 0x16000e340 <col:11> 'int' 0
    | `-CallExpr 0x160028568 <line:6:3, col:17> 'int'
    |   |-ImplicitCastExpr 0x160028550 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x1600284b8 <col:3> 'int ()' Function 0x160028400 'badnum' 'int ()'
    |   `-ImplicitCastExpr 0x160028590 <col:10, col:16> 'char *' <LValueToRValue>
    |     `-ArraySubscriptExpr 0x160028530 <col:10, col:16> 'char *' lvalue
    |       |-ImplicitCastExpr 0x160028518 <col:10> 'char **' <LValueToRValue>
    |       | `-DeclRefExpr 0x1600284d8 <col:10> 'char **' lvalue ParmVar 0x16000dd88 'argv' 'char **'
    |       `-IntegerLiteral 0x1600284f8 <col:15> 'int' 1
    |-IfStmt 0x1600286f8 <line:7:2, line:8:7>
    | |-BinaryOperator 0x160028640 <line:7:6, col:10> 'int' contains-errors '>'
    | | |-DeclRefExpr 0x1600285c8 <col:6> 'int' lvalue Var 0x16000df80 'n' 'int'
    | | `-RecoveryExpr 0x160028620 <col:10> '<dependent type>' contains-errors lvalue
    | `-BinaryOperator 0x1600286d8 <line:8:3, col:7> 'int' contains-errors '='
    |   |-DeclRefExpr 0x160028660 <col:3> 'int' lvalue Var 0x16000df80 'n' 'int'
    |   `-RecoveryExpr 0x1600286b8 <col:7> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x1600289f8 <line:9:2, line:12:2>
    | |-BinaryOperator 0x160028770 <line:9:6, col:10> 'int' '>'
    | | |-ImplicitCastExpr 0x160028758 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x160028718 <col:6> 'int' lvalue Var 0x16000df80 'n' 'int'
    | | `-IntegerLiteral 0x160028738 <col:10> 'int' 0
    | `-CompoundStmt 0x1600289e8 <col:13, line:12:2>
    `-ReturnStmt 0x160028a38 <line:13:2, col:9>
      `-IntegerLiteral 0x160028a18 <col:9> 'int' 0
