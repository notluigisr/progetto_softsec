`-FunctionDecl 0x12700dda8  line:1:1 PHP_FUNCTION 'int (int)'
  |-ParmVarDecl 0x12700dcd8 <col:14> col:14 radius_get_vendor_attr 'int'
  `-CompoundStmt 0x127027218 <line:2:1, line:23:1>
    |-DeclStmt 0x12700df20 <line:3:2, col:9>
    | `-VarDecl 0x12700deb8 <col:2, col:6> col:6 used res 'int'
    |-DeclStmt 0x12700dff0 <line:4:2, col:18>
    | `-VarDecl 0x12700df88 <col:2, col:14> col:14 used data 'const void *'
    |-DeclStmt 0x12700e088 <line:5:2, col:9>
    | `-VarDecl 0x12700e020 <col:2, col:6> col:6 used len 'int'
    |-DeclStmt 0x12700e198 <line:6:2, col:18>
    | `-VarDecl 0x12700e130 <col:2, col:12> col:12 used vendor '__int128_t':'__int128'
    |-IfStmt 0x1270266c8 <line:8:2, line:10:2>
    | |-RecoveryExpr 0x127026680 <line:8:6, col:78> '_Bool' contains-errors
    | `-CompoundStmt 0x1270266b0 <col:87, line:10:2>
    |   `-ReturnStmt 0x1270266a0 <line:9:3>
    `-IfStmt 0x1270271e8 <line:13:2, line:22:2> has_else
      |-BinaryOperator 0x1270269c0 <line:13:6, col:14> 'int' '=='
      | |-ImplicitCastExpr 0x1270269a8 <col:6> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x127026950 <col:6> 'int' lvalue Var 0x12700deb8 'res' 'int'
      | `-UnaryOperator 0x127026990 <col:13, col:14> 'int' prefix '-'
      |   `-IntegerLiteral 0x127026970 <col:14> 'int' 1
      |-CompoundStmt 0x1270269e0 <col:17, line:15:2>
      `-CompoundStmt 0x1270271b0 <col:9, line:22:2>
        |-CallExpr 0x127026b50 <line:17:3, col:26> '<dependent type>' contains-errors
        | |-DeclRefExpr 0x127026ad0 <col:3> 'int ()' Function 0x127026a18 'array_init' 'int ()'
        | `-RecoveryExpr 0x127026b30 <col:14> '<dependent type>' contains-errors lvalue
        |-CallExpr 0x127026d68 <line:18:3, col:42> '<dependent type>' contains-errors
        | |-DeclRefExpr 0x127026c58 <col:3> 'int ()' Function 0x127026ba0 'add_assoc_long' 'int ()'
        | |-RecoveryExpr 0x127026d48 <col:18> '<dependent type>' contains-errors lvalue
        | |-StringLiteral 0x127026cd0 <col:32> 'char[4]' lvalue "STR"
        | `-DeclRefExpr 0x127026cf0 <col:39> 'int' lvalue Var 0x12700deb8 'res' 'int'
        |-CallExpr 0x127026e70 <line:19:3, col:45> '<dependent type>' contains-errors
        | |-DeclRefExpr 0x127026da0 <col:3> 'int ()' Function 0x127026ba0 'add_assoc_long' 'int ()'
        | |-RecoveryExpr 0x127026e50 <col:18> '<dependent type>' contains-errors lvalue
        | |-StringLiteral 0x127026dd8 <col:32> 'char[4]' lvalue "STR"
        | `-DeclRefExpr 0x127026df8 <col:39> '__int128_t':'__int128' lvalue Var 0x12700e130 'vendor' '__int128_t':'__int128'
        |-CallExpr 0x127027158 <line:20:3, col:63> '<dependent type>' contains-errors
        | |-DeclRefExpr 0x127026f88 <col:3> 'int ()' Function 0x127026ed0 'add_assoc_stringl' 'int ()'
        | |-RecoveryExpr 0x1270270e0 <col:21> '<dependent type>' contains-errors lvalue
        | |-StringLiteral 0x127026fc0 <col:35> 'char[4]' lvalue "STR"
        | |-CStyleCastExpr 0x127027130 <col:42, col:51> 'char *' <BitCast>
        | | `-ImplicitCastExpr 0x127027118 <col:51> 'const void *' <LValueToRValue> part_of_explicit_cast
        | |   `-DeclRefExpr 0x127026fe0 <col:51> 'const void *' lvalue Var 0x12700df88 'data' 'const void *'
        | |-DeclRefExpr 0x127027058 <col:57> 'int' lvalue Var 0x12700e020 'len' 'int'
        | `-IntegerLiteral 0x127027078 <col:62> 'int' 1
        `-ReturnStmt 0x1270271a0 <line:21:3>
