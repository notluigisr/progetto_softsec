`-FunctionDecl 0x1589281c8  line:1:1 dbcs_ptr2char 'int (char *)'
  |-ParmVarDecl 0x1589280f0 <col:15, col:23> col:23 used p 'char *'
  `-CompoundStmt 0x158940cd0 <line:2:1, line:6:1>
    |-IfStmt 0x158940c20 <line:3:5, line:4:26>
    | |-BinaryOperator 0x158940a20 <line:3:9, col:40> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x158928788 <col:9, col:27> 'int' '>'
    | | | |-CallExpr 0x158928730 <col:9, col:23> 'int'
    | | | | |-ImplicitCastExpr 0x158928718 <col:9> 'int (*)()' <FunctionToPointerDecay>
    | | | | | `-DeclRefExpr 0x1589283d0 <col:9> 'int ()' Function 0x158928318 'MB_BYTE2LEN' 'int ()'
    | | | | `-ImplicitCastExpr 0x158928770 <col:21, col:22> 'int' <IntegralCast>
    | | | |   `-ImplicitCastExpr 0x158928758 <col:21, col:22> 'char' <LValueToRValue>
    | | | |     `-UnaryOperator 0x158928700 <col:21, col:22> 'char' lvalue prefix '*' cannot overflow
    | | | |       `-ImplicitCastExpr 0x1589286e8 <col:22> 'char *' <LValueToRValue>
    | | | |         `-DeclRefExpr 0x1589283f0 <col:22> 'char *' lvalue ParmVar 0x1589280f0 'p' 'char *'
    | | | `-IntegerLiteral 0x1589284e0 <col:27> 'int' 1
    | | `-BinaryOperator 0x158940a00 <col:32, col:40> 'int' contains-errors '!='
    | |   |-ArraySubscriptExpr 0x1589287c0 <col:32, col:35> 'char' lvalue
    | |   | |-ImplicitCastExpr 0x1589287a8 <col:32> 'char *' <LValueToRValue>
    | |   | | `-DeclRefExpr 0x158928520 <col:32> 'char *' lvalue ParmVar 0x1589280f0 'p' 'char *'
    | |   | `-IntegerLiteral 0x158928540 <col:34> 'int' 1
    | |   `-RecoveryExpr 0x1589287e0 <col:40> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x158940c10 <line:4:2, col:26>
    |   `-BinaryOperator 0x158940bf0 <col:9, col:26> 'int' '+'
    |     |-ParenExpr 0x158940b28 <col:9, col:19> 'int'
    |     | `-BinaryOperator 0x158940b08 <col:10, col:18> 'int' '<<'
    |     |   |-ImplicitCastExpr 0x158940af0 <col:10, col:13> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x158940ad8 <col:10, col:13> 'char' <LValueToRValue>
    |     |   |   `-ArraySubscriptExpr 0x158940a98 <col:10, col:13> 'char' lvalue
    |     |   |     |-ImplicitCastExpr 0x158940a80 <col:10> 'char *' <LValueToRValue>
    |     |   |     | `-DeclRefExpr 0x158940a40 <col:10> 'char *' lvalue ParmVar 0x1589280f0 'p' 'char *'
    |     |   |     `-IntegerLiteral 0x158940a60 <col:12> 'int' 0
    |     |   `-IntegerLiteral 0x158940ab8 <col:18> 'int' 8
    |     `-ImplicitCastExpr 0x158940bd8 <col:23, col:26> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x158940bc0 <col:23, col:26> 'char' <LValueToRValue>
    |         `-ArraySubscriptExpr 0x158940ba0 <col:23, col:26> 'char' lvalue
    |           |-ImplicitCastExpr 0x158940b88 <col:23> 'char *' <LValueToRValue>
    |           | `-DeclRefExpr 0x158940b48 <col:23> 'char *' lvalue ParmVar 0x1589280f0 'p' 'char *'
    |           `-IntegerLiteral 0x158940b68 <col:25> 'int' 1
    `-ReturnStmt 0x158940cc0 <line:5:5, col:13>
      `-ImplicitCastExpr 0x158940ca8 <col:12, col:13> 'int' <IntegralCast>
        `-ImplicitCastExpr 0x158940c90 <col:12, col:13> 'char' <LValueToRValue>
          `-UnaryOperator 0x158940c78 <col:12, col:13> 'char' lvalue prefix '*' cannot overflow
            `-ImplicitCastExpr 0x158940c60 <col:13> 'char *' <LValueToRValue>
              `-DeclRefExpr 0x158940c40 <col:13> 'char *' lvalue ParmVar 0x1589280f0 'p' 'char *'
