`-FunctionDecl 0x14a1283a8  line:1:13 invalid luaG_findlocal 'const char *(int *, int *, int, int *)'
  |-ParmVarDecl 0x14a128128 <col:29, col:40> col:40 invalid L 'int *'
  |-ParmVarDecl 0x14a1281a8 <col:43, col:53> col:53 invalid ci 'int *'
  |-ParmVarDecl 0x14a128228 <col:57, col:61> col:61 used n 'int'
  |-ParmVarDecl 0x14a1282a8 <col:64, col:71> col:71 invalid pos 'int *'
  `-CompoundStmt 0x14a142220 <col:76, line:22:1>
    |-DeclStmt 0x14a128528 <line:3:3, col:26>
    | `-VarDecl 0x14a128488 <col:3, col:22> col:15 used name 'const char *' cinit
    |   `-RecoveryExpr 0x14a128508 <col:22> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x14a141e68 <line:4:3, line:9:3>
    | |-CallExpr 0x14a1286e0 <line:4:7, col:15> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x14a1286a0 <col:7> 'int ()' Function 0x14a1285e8 'isLua' 'int ()'
    | | `-RecoveryExpr 0x14a1286c0 <col:13> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x14a141e50 <col:18, line:9:3>
    |   `-IfStmt 0x14a141e20 <line:5:5, line:8:64> has_else
    |     |-BinaryOperator 0x14a128760 <line:5:9, col:13> 'int' '<'
    |     | |-ImplicitCastExpr 0x14a128748 <col:9> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x14a128708 <col:9> 'int' lvalue ParmVar 0x14a128228 'n' 'int'
    |     | `-IntegerLiteral 0x14a128728 <col:13> 'int' 0
    |     |-ReturnStmt 0x14a1419a0 <line:6:7, col:36>
    |     | `-CallExpr 0x14a141968 <col:14, col:36> '<dependent type>' contains-errors
    |     |   |-DeclRefExpr 0x14a1418b8 <col:14> 'int ()' Function 0x14a141800 'findvararg' 'int ()'
    |     |   |-RecoveryExpr 0x14a1418d8 <col:25> '<dependent type>' contains-errors lvalue
    |     |   |-UnaryOperator 0x14a141930 <col:29, col:30> 'int' prefix '-'
    |     |   | `-ImplicitCastExpr 0x14a141918 <col:30> 'int' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x14a1418f8 <col:30> 'int' lvalue ParmVar 0x14a128228 'n' 'int'
    |     |   `-RecoveryExpr 0x14a141948 <col:33> '<dependent type>' contains-errors lvalue
    |     `-BinaryOperator 0x14a141e00 <line:8:7, col:64> 'const char *' contains-errors '='
    |       |-DeclRefExpr 0x14a1419b0 <col:7> 'const char *' contains-errors lvalue Var 0x14a128488 'name' 'const char *'
    |       `-CallExpr 0x14a141dc8 <col:14, col:64> '<dependent type>' contains-errors
    |         |-DeclRefExpr 0x14a141ab0 <col:14> 'int ()' Function 0x14a1419f8 'luaF_getlocalname' 'int ()'
    |         |-CXXDependentScopeMemberExpr 0x14a141c18 <col:32, col:45> '<dependent type>' contains-errors lvalue ->p
    |         | `-CallExpr 0x14a141bf0 <col:32, col:42> '<dependent type>' contains-errors
    |         |   |-DeclRefExpr 0x14a141bb0 <col:32> 'int ()' Function 0x14a141af8 'ci_func' 'int ()'
    |         |   `-RecoveryExpr 0x14a141bd0 <col:40> '<dependent type>' contains-errors lvalue
    |         |-DeclRefExpr 0x14a141c60 <col:48> 'int' lvalue ParmVar 0x14a128228 'n' 'int'
    |         `-CallExpr 0x14a141da0 <col:51, col:63> '<dependent type>' contains-errors
    |           |-DeclRefExpr 0x14a141d60 <col:51> 'int ()' Function 0x14a141ca8 'currentpc' 'int ()'
    |           `-RecoveryExpr 0x14a141d80 <col:61> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x14a142100 <line:10:3, line:18:3>
    | |-BinaryOperator 0x14a141f00 <line:10:7, col:15> 'int' contains-errors '=='
    | | |-DeclRefExpr 0x14a141e88 <col:7> 'const char *' contains-errors lvalue Var 0x14a128488 'name' 'const char *'
    | | `-RecoveryExpr 0x14a141ee0 <col:15> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x14a1420e8 <col:21, line:18:3>
    |   `-IfStmt 0x14a1420b8 <line:12:5, line:17:14> has_else
    |     |-RecoveryExpr 0x14a141f50 <line:12:9, col:34> '_Bool' contains-errors
    |     |-CompoundStmt 0x14a142060 <col:37, line:15:5>
    |     `-ReturnStmt 0x14a1420a8 <line:17:7, col:14>
    |       `-RecoveryExpr 0x14a142088 <col:14> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x14a142210 <line:21:3, col:10>
      `-ImplicitCastExpr 0x14a1421f8 <col:10> 'const char *' contains-errors <LValueToRValue>
        `-DeclRefExpr 0x14a1421d8 <col:10> 'const char *' contains-errors lvalue Var 0x14a128488 'name' 'const char *'
