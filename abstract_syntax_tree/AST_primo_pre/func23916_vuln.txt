`-FunctionDecl 0x14f00e488  line:1:1 invalid hb_set_subtract 'int (int *, const int *)'
  |-ParmVarDecl 0x14f00e328 <col:18, col:34> col:34 referenced invalid set 'int *'
  |-ParmVarDecl 0x14f00e3a8 <line:2:4, col:20> col:20 invalid other 'const int *'
  `-CompoundStmt 0x14f00e968 <line:3:1, line:8:1>
    |-IfStmt 0x14f00e840 <line:4:3, line:5:5>
    | |-CallExpr 0x14f00e808 <line:4:7, col:45> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x14f00e6a0 <col:7> 'int ()' Function 0x14f00e5e8 'unlikely' 'int ()'
    | | `-CallExpr 0x14f00e7e0 <col:17, col:44> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x14f00e7a0 <col:17> 'int ()' Function 0x14f00e6e8 'hb_object_is_immutable' 'int ()'
    | |   `-RecoveryExpr 0x14f00e7c0 <col:41> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x14f00e830 <line:5:5>
    `-CallExpr 0x14f00e940 <line:7:3, col:24> '<dependent type>' contains-errors
      |-CXXDependentScopeMemberExpr 0x14f00e8a8 <col:3, col:8> '<dependent type>' contains-errors lvalue ->subtract
      | `-RecoveryExpr 0x14f00e880 <col:3> '<dependent type>' contains-errors lvalue
      |   `-DeclRefExpr 0x14f00e860 <col:3> 'int *' lvalue ParmVar 0x14f00e328 'set' 'int *'
      `-UnaryOperator 0x14f00e928 <col:18, col:19> '<dependent type>' contains-errors prefix '*' cannot overflow
        `-ImplicitCastExpr 0x14f00e910 <col:19> '<dependent type>' contains-errors <LValueToRValue>
          `-RecoveryExpr 0x14f00e8f0 <col:19> '<dependent type>' contains-errors lvalue
