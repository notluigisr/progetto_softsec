`-FunctionDecl 0x139140a00  line:1:1 hash_findi_add 'int (struct hash_table *, const char *)'
  |-ParmVarDecl 0x139128648 <col:16, col:35> col:35 used hash 'struct hash_table *'
  |-ParmVarDecl 0x1391286c8 <col:41, col:53> col:53 used str 'const char *'
  `-CompoundStmt 0x139141500 <line:2:1, line:13:1>
    |-DeclStmt 0x139140c78 <line:3:5, col:26>
    | |-RecordDecl 0x139140b00 <col:5, col:12> col:12 struct hash_insert
    | `-VarDecl 0x139140bf8 <col:5, col:24> col:24 invalid hi 'struct hash_insert'
    |-DeclStmt 0x139140d40 <line:4:5, col:13>
    | `-VarDecl 0x139140cd8 <col:5, col:12> col:12 used r 'void **'
    |-DeclStmt 0x139140dd8 <line:5:5, col:15>
    | `-VarDecl 0x139140d70 <col:5, col:11> col:11 used strx 'char *'
    |-BinaryOperator 0x139141010 <line:7:5, col:34> 'void **' contains-errors '='
    | |-DeclRefExpr 0x139140df0 <col:5> 'void **' lvalue Var 0x139140cd8 'r' 'void **'
    | `-CallExpr 0x139140fd8 <col:9, col:34> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x139140f40 <col:9> 'int ()' Function 0x139140e88 'hash_findi' 'int ()'
    |   |-DeclRefExpr 0x139140f60 <col:20> 'struct hash_table *' lvalue ParmVar 0x139128648 'hash' 'struct hash_table *'
    |   |-DeclRefExpr 0x139140f80 <col:26> 'const char *' lvalue ParmVar 0x1391286c8 'str' 'const char *'
    |   `-UnaryOperator 0x139140fc0 <col:31, col:32> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-RecoveryExpr 0x139140fa0 <col:32> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x1391410c8 <line:8:5, line:9:16>
    | |-ImplicitCastExpr 0x139141050 <line:8:9> 'void **' <LValueToRValue>
    | | `-DeclRefExpr 0x139141030 <col:9> 'void **' lvalue Var 0x139140cd8 'r' 'void **'
    | `-ReturnStmt 0x1391410b8 <line:9:9, col:16>
    |   `-ImplicitCastExpr 0x1391410a0 <col:16> 'int' <PointerToIntegral>
    |     `-ImplicitCastExpr 0x139141088 <col:16> 'void **' <LValueToRValue>
    |       `-DeclRefExpr 0x139141068 <col:16> 'void **' lvalue Var 0x139140cd8 'r' 'void **'
    |-BinaryOperator 0x1391412d0 <line:11:5, col:27> 'char *' '='
    | |-DeclRefExpr 0x1391410e8 <col:5> 'char *' lvalue Var 0x139140d70 'strx' 'char *'
    | `-ImplicitCastExpr 0x1391412b8 <col:12, col:27> 'char *' <IntegralToPointer>
    |   `-CallExpr 0x139141278 <col:12, col:27> 'int'
    |     |-ImplicitCastExpr 0x139141260 <col:12> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x1391411e8 <col:12> 'int ()' Function 0x139141130 'nasm_strdup' 'int ()'
    |     `-ImplicitCastExpr 0x1391412a0 <col:24> 'const char *' <LValueToRValue>
    |       `-DeclRefExpr 0x139141208 <col:24> 'const char *' lvalue ParmVar 0x1391286c8 'str' 'const char *'
    `-ReturnStmt 0x1391414f0 <line:12:5, col:36>
      `-CallExpr 0x1391414b8 <col:12, col:36> '<dependent type>' contains-errors
        |-DeclRefExpr 0x1391413d0 <col:12> 'int ()' Function 0x139141318 'hash_add' 'int ()'
        |-UnaryOperator 0x139141410 <col:21, col:22> '<dependent type>' contains-errors prefix '&' cannot overflow
        | `-RecoveryExpr 0x1391413f0 <col:22> '<dependent type>' contains-errors lvalue
        |-DeclRefExpr 0x139141428 <col:26> 'char *' lvalue Var 0x139140d70 'strx' 'char *'
        `-RecoveryExpr 0x139141498 <col:32> '<dependent type>' contains-errors lvalue
