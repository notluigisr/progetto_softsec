`-FunctionDecl 0x122095fc8  line:1:10 invalid GetZoomLevel 'double (int)'
  |-ParmVarDecl 0x122095ef0 <col:23, <invalid sloc>> col:25 invalid 'int'
  `-CompoundStmt 0x12404c460 <col:45, line:12:3>
    |-DeclStmt 0x122096118 <line:2:5, col:24>
    | `-VarDecl 0x122096090 <col:5, col:21> col:12 used result 'double' cinit
    |   `-FloatingLiteral 0x1220960f8 <col:21> 'double' 0.000000e+00
    |-RecoveryExpr 0x122096160 <line:3:5> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x1220964f0 <line:4:5, line:5:14>
    | |-UnaryOperator 0x122096490 <line:4:9, col:59> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-CallExpr 0x122096458 <col:10, col:59> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x1220962e0 <col:10> 'int ()' Function 0x122096228 'MaybeGetRenderFrame' 'int ()'
    | |   |-RecoveryExpr 0x122096400 <col:30> '<dependent type>' contains-errors lvalue
    | |   |-StringLiteral 0x122096360 <col:39> 'char[4]' lvalue "STR"
    | |   `-UnaryOperator 0x122096440 <col:46, col:47> '<dependent type>' contains-errors prefix '&' cannot overflow
    | |     `-RecoveryExpr 0x122096420 <col:47> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x1220964e0 <line:5:7, col:14>
    |   `-ImplicitCastExpr 0x1220964c8 <col:14> 'double' <LValueToRValue>
    |     `-DeclRefExpr 0x1220964a8 <col:14> 'double' lvalue Var 0x122096090 'result' 'double'
    `-ReturnStmt 0x12404c450 <line:11:5, col:12>
      `-ImplicitCastExpr 0x12404c438 <col:12> 'double' <LValueToRValue>
        `-DeclRefExpr 0x12404c418 <col:12> 'double' lvalue Var 0x122096090 'result' 'double'
