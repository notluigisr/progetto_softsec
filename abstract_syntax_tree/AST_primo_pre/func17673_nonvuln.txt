`-FunctionDecl 0x159128258  line:1:1 invalid onigenc_strlen_null 'int (int, const int *)'
  |-ParmVarDecl 0x1591280f0 <col:21, col:34> col:34 invalid enc 'int'
  |-ParmVarDecl 0x159128170 <col:39, col:52> col:52 invalid s 'const int *'
  `-CompoundStmt 0x159141f30 <line:2:1, line:25:1>
    |-DeclStmt 0x1591283b0 <line:3:3, col:12>
    | `-VarDecl 0x159128328 <col:3, col:11> col:7 used n 'int' cinit
    |   `-IntegerLiteral 0x159128390 <col:11> 'int' 0
    `-WhileStmt 0x159141f10 <line:7:3, line:24:3>
      |-IntegerLiteral 0x159128410 <line:7:10> 'int' 1
      `-CompoundStmt 0x159141ef0 <col:13, line:24:3>
        |-IfStmt 0x159141bf8 <line:8:5, line:20:5>
        | |-BinaryOperator 0x159128500 <line:8:9, col:15> 'int' contains-errors '=='
        | | |-UnaryOperator 0x1591284e8 <col:9, col:10> '<dependent type>' contains-errors prefix '*' cannot overflow
        | | | `-ImplicitCastExpr 0x1591284d0 <col:10> '<dependent type>' contains-errors <LValueToRValue>
        | | |   `-RecoveryExpr 0x1591284b0 <col:10> '<dependent type>' contains-errors lvalue
        | | `-CharacterLiteral 0x159128478 <col:15> 'int' 0
        | `-CompoundStmt 0x159141bc8 <col:21, line:20:5>
        |   |-DeclStmt 0x159128778 <line:10:7, col:40>
        |   | `-VarDecl 0x159128550 <col:7, col:39> col:11 used len 'int' cinit
        |   |   `-CallExpr 0x159128750 <col:17, col:39> '<dependent type>' contains-errors
        |   |     |-DeclRefExpr 0x159128710 <col:17> 'int ()' Function 0x159128658 'ONIGENC_MBC_MINLEN' 'int ()'
        |   |     `-RecoveryExpr 0x159128730 <col:36> '<dependent type>' contains-errors lvalue
        |   |-IfStmt 0x159141868 <line:12:7, col:28>
        |   | |-BinaryOperator 0x159141800 <col:11, col:18> 'int' contains-errors '=='
        |   | | |-ImplicitCastExpr 0x1591287d0 <col:11> 'int' contains-errors <LValueToRValue>
        |   | | | `-DeclRefExpr 0x159128790 <col:11> 'int' contains-errors lvalue Var 0x159128550 'len' 'int'
        |   | | `-IntegerLiteral 0x1591287b0 <col:18> 'int' 1
        |   | `-ReturnStmt 0x159141858 <col:21, col:28>
        |   |   `-ImplicitCastExpr 0x159141840 <col:28> 'int' <LValueToRValue>
        |   |     `-DeclRefExpr 0x159141820 <col:28> 'int' lvalue Var 0x159128328 'n' 'int'
        |   |-WhileStmt 0x159141ac8 <line:14:7, line:18:7>
        |   | |-BinaryOperator 0x159141938 <line:14:14, col:20> 'int' contains-errors '>'
        |   | | |-ImplicitCastExpr 0x159141920 <col:14> 'int' contains-errors <LValueToRValue>
        |   | | | `-DeclRefExpr 0x1591418e0 <col:14> 'int' contains-errors lvalue Var 0x159128550 'len' 'int'
        |   | | `-IntegerLiteral 0x159141900 <col:20> 'int' 1
        |   | `-CompoundStmt 0x159141aa8 <col:23, line:18:7>
        |   |   |-IfStmt 0x159141a50 <line:15:9, col:25>
        |   |   | |-BinaryOperator 0x159141a28 <col:13, col:19> 'int' contains-errors '!='
        |   |   | | |-UnaryOperator 0x159141a10 <col:13, col:14> '<dependent type>' contains-errors prefix '*' cannot overflow
        |   |   | | | `-ImplicitCastExpr 0x1591419f8 <col:14> '<dependent type>' contains-errors <LValueToRValue>
        |   |   | | |   `-RecoveryExpr 0x1591419d8 <col:14> '<dependent type>' contains-errors lvalue
        |   |   | | `-CharacterLiteral 0x1591419a0 <col:19> 'int' 0
        |   |   | `-BreakStmt 0x159141a48 <col:25>
        |   |   `-UnaryOperator 0x159141a90 <line:17:9, col:12> 'int' contains-errors postfix '--'
        |   |     `-DeclRefExpr 0x159141a70 <col:9> 'int' contains-errors lvalue Var 0x159128550 'len' 'int'
        |   `-IfStmt 0x159141ba8 <line:19:7, col:28>
        |     |-BinaryOperator 0x159141b40 <col:11, col:18> 'int' contains-errors '=='
        |     | |-ImplicitCastExpr 0x159141b28 <col:11> 'int' contains-errors <LValueToRValue>
        |     | | `-DeclRefExpr 0x159141ae8 <col:11> 'int' contains-errors lvalue Var 0x159128550 'len' 'int'
        |     | `-IntegerLiteral 0x159141b08 <col:18> 'int' 1
        |     `-ReturnStmt 0x159141b98 <col:21, col:28>
        |       `-ImplicitCastExpr 0x159141b80 <col:28> 'int' <LValueToRValue>
        |         `-DeclRefExpr 0x159141b60 <col:28> 'int' lvalue Var 0x159128328 'n' 'int'
        `-UnaryOperator 0x159141ed8 <line:23:5, col:6> 'int' postfix '++'
          `-DeclRefExpr 0x159141eb8 <col:5> 'int' lvalue Var 0x159128328 'n' 'int'
