`-FunctionDecl 0x14d02b008  line:1:21 invalid udp6_lib_lookup2 'struct sock *(struct net *, const struct in6_addr *, int, const struct in6_addr *, unsigned int, int, struct udp_hslot *, unsigned int)' static
  |-ParmVarDecl 0x14d00e2e8 <col:38, col:50> col:50 used net 'struct net *'
  |-ParmVarDecl 0x14d02a8c8 <line:2:3, col:26> col:26 used saddr 'const struct in6_addr *'
  |-ParmVarDecl 0x14d02a960 <col:33, col:40> col:40 invalid sport 'int'
  |-ParmVarDecl 0x14d02aa58 <line:3:3, col:26> col:26 used daddr 'const struct in6_addr *'
  |-ParmVarDecl 0x14d02aad8 <col:33, col:46> col:46 used hnum 'unsigned int'
  |-ParmVarDecl 0x14d02ab58 <col:52, col:56> col:56 used dif 'int'
  |-ParmVarDecl 0x14d02ad28 <line:4:3, col:21> col:21 used hslot2 'struct udp_hslot *'
  |-ParmVarDecl 0x14d02ada8 <col:29, col:42> col:42 used slot2 'unsigned int'
  `-CompoundStmt 0x14d02efe8 <line:5:1, line:49:1>
    |-DeclStmt 0x14d02b288 <line:6:2, col:26>
    | |-VarDecl 0x14d02b178 <col:2, col:15> col:15 used sk 'struct sock *'
    | `-VarDecl 0x14d02b208 <col:2, col:20> col:20 used result 'struct sock *'
    |-DeclStmt 0x14d02b488 <line:7:2, col:31>
    | |-RecordDecl 0x14d02b2a0 <col:2, col:9> col:9 struct hlist_nulls_node
    | `-VarDecl 0x14d02b408 <col:2, col:27> col:27 used node 'struct hlist_nulls_node *'
    |-DeclStmt 0x14d02b708 <line:8:2, col:48>
    | |-VarDecl 0x14d02b4b8 <col:2, col:6> col:6 used score 'int'
    | |-VarDecl 0x14d02b538 <col:2, col:13> col:13 used badness 'int'
    | |-VarDecl 0x14d02b5b8 <col:2, col:32> col:22 used matches 'int' cinit
    | | `-IntegerLiteral 0x14d02b620 <col:32> 'int' 0
    | `-VarDecl 0x14d02b658 <col:2, col:47> col:35 used reuseport 'int' cinit
    |   `-IntegerLiteral 0x14d02b6c0 <col:47> 'int' 0
    |-LabelStmt 0x14d02d050 <line:11:1, line:12:11> 'begin'
    | `-BinaryOperator 0x14d02b798 <col:2, col:11> 'struct sock *' contains-errors '='
    |   |-DeclRefExpr 0x14d02b720 <col:2> 'struct sock *' lvalue Var 0x14d02b208 'result' 'struct sock *'
    |   `-RecoveryExpr 0x14d02b778 <col:11> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x14d02d0c8 <line:13:2, col:13> 'int' '='
    | |-DeclRefExpr 0x14d02d070 <col:2> 'int' lvalue Var 0x14d02b538 'badness' 'int'
    | `-UnaryOperator 0x14d02d0b0 <col:12, col:13> 'int' prefix '-'
    |   `-IntegerLiteral 0x14d02d090 <col:13> 'int' 1
    |-CallExpr 0x14d02d318 <line:14:2, col:57> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x14d02d240 <col:2> 'int ()' Function 0x14d02d188 'udp_portaddr_for_each_entry_rcu' 'int ()'
    | |-DeclRefExpr 0x14d02d260 <col:34> 'struct sock *' lvalue Var 0x14d02b178 'sk' 'struct sock *'
    | |-DeclRefExpr 0x14d02d280 <col:38> 'struct hlist_nulls_node *' lvalue Var 0x14d02b408 'node' 'struct hlist_nulls_node *'
    | `-UnaryOperator 0x14d02d300 <col:44, col:53> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   `-RecoveryExpr 0x14d02d2d8 <col:45, col:53> '<dependent type>' contains-errors lvalue
    |     `-DeclRefExpr 0x14d02d2a0 <col:45> 'struct udp_hslot *' lvalue ParmVar 0x14d02ad28 'hslot2' 'struct udp_hslot *'
    |-CompoundStmt 0x14d02e588 <col:59, line:33:2>
    | |-BinaryOperator 0x14d02d5a8 <line:15:3, line:16:27> 'int' contains-errors '='
    | | |-DeclRefExpr 0x14d02d350 <line:15:3> 'int' lvalue Var 0x14d02b4b8 'score' 'int'
    | | `-CallExpr 0x14d02d550 <col:11, line:16:27> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x14d02d450 <line:15:11> 'int ()' Function 0x14d02d398 'compute_score2' 'int ()'
    | |   |-DeclRefExpr 0x14d02d470 <col:26> 'struct sock *' lvalue Var 0x14d02b178 'sk' 'struct sock *'
    | |   |-DeclRefExpr 0x14d02d490 <col:30> 'struct net *' lvalue ParmVar 0x14d00e2e8 'net' 'struct net *'
    | |   |-DeclRefExpr 0x14d02d4b0 <col:35> 'const struct in6_addr *' lvalue ParmVar 0x14d02a8c8 'saddr' 'const struct in6_addr *'
    | |   |-RecoveryExpr 0x14d02d4d0 <col:42> '<dependent type>' contains-errors lvalue
    | |   |-DeclRefExpr 0x14d02d4f0 <line:16:11> 'const struct in6_addr *' lvalue ParmVar 0x14d02aa58 'daddr' 'const struct in6_addr *'
    | |   |-DeclRefExpr 0x14d02d510 <col:18> 'unsigned int' lvalue ParmVar 0x14d02aad8 'hnum' 'unsigned int'
    | |   `-DeclRefExpr 0x14d02d530 <col:24> 'int' lvalue ParmVar 0x14d02ab58 'dif' 'int'
    | `-IfStmt 0x14d02e558 <line:17:3, line:32:3> has_else
    |   |-BinaryOperator 0x14d02d638 <line:17:7, col:15> 'int' '>'
    |   | |-ImplicitCastExpr 0x14d02d608 <col:7> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x14d02d5c8 <col:7> 'int' lvalue Var 0x14d02b4b8 'score' 'int'
    |   | `-ImplicitCastExpr 0x14d02d620 <col:15> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x14d02d5e8 <col:15> 'int' lvalue Var 0x14d02b538 'badness' 'int'
    |   |-CompoundStmt 0x14d02dbd0 <col:24, line:27:3>
    |   | |-BinaryOperator 0x14d02d6b0 <line:18:4, col:13> 'struct sock *' '='
    |   | | |-DeclRefExpr 0x14d02d658 <col:4> 'struct sock *' lvalue Var 0x14d02b208 'result' 'struct sock *'
    |   | | `-ImplicitCastExpr 0x14d02d698 <col:13> 'struct sock *' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x14d02d678 <col:13> 'struct sock *' lvalue Var 0x14d02b178 'sk' 'struct sock *'
    |   | |-BinaryOperator 0x14d02d728 <line:19:4, col:14> 'int' '='
    |   | | |-DeclRefExpr 0x14d02d6d0 <col:4> 'int' lvalue Var 0x14d02b538 'badness' 'int'
    |   | | `-ImplicitCastExpr 0x14d02d710 <col:14> 'int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x14d02d6f0 <col:14> 'int' lvalue Var 0x14d02b4b8 'score' 'int'
    |   | |-BinaryOperator 0x14d02d7c8 <line:20:4, col:20> 'int' contains-errors '='
    |   | | |-DeclRefExpr 0x14d02d748 <col:4> 'int' lvalue Var 0x14d02b658 'reuseport' 'int'
    |   | | `-RecoveryExpr 0x14d02d7a0 <col:16, col:20> '<dependent type>' contains-errors lvalue
    |   | |   `-DeclRefExpr 0x14d02d768 <col:16> 'struct sock *' lvalue Var 0x14d02b178 'sk' 'struct sock *'
    |   | `-IfStmt 0x14d02dba0 <line:21:4, line:26:10> has_else
    |   |   |-ImplicitCastExpr 0x14d02d808 <line:21:8> 'int' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x14d02d7e8 <col:8> 'int' lvalue Var 0x14d02b658 'reuseport' 'int'
    |   |   |-CompoundStmt 0x14d02da68 <col:19, line:25:4>
    |   |   | `-BinaryOperator 0x14d02da48 <line:24:5, col:15> 'int' '='
    |   |   |   |-DeclRefExpr 0x14d02da08 <col:5> 'int' lvalue Var 0x14d02b5b8 'matches' 'int'
    |   |   |   `-IntegerLiteral 0x14d02da28 <col:15> 'int' 1
    |   |   `-IfStmt 0x14d02db80 <line:25:11, line:26:10>
    |   |     |-BinaryOperator 0x14d02daf8 <line:25:15, col:24> 'int' contains-errors '=='
    |   |     | |-DeclRefExpr 0x14d02da80 <col:15> 'int' lvalue Var 0x14d02b4b8 'score' 'int'
    |   |     | `-RecoveryExpr 0x14d02dad8 <col:24> '<dependent type>' contains-errors lvalue
    |   |     `-GotoStmt 0x14d02db68 <line:26:5, col:10> 'exact_match' 0x14d02db18
    |   `-IfStmt 0x14d02e538 <line:27:10, line:32:3>
    |     |-BinaryOperator 0x14d02dcc8 <line:27:14, col:34> 'int' '&&'
    |     | |-BinaryOperator 0x14d02dc70 <col:14, col:23> 'int' '=='
    |     | | |-ImplicitCastExpr 0x14d02dc40 <col:14> 'int' <LValueToRValue>
    |     | | | `-DeclRefExpr 0x14d02dc00 <col:14> 'int' lvalue Var 0x14d02b4b8 'score' 'int'
    |     | | `-ImplicitCastExpr 0x14d02dc58 <col:23> 'int' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x14d02dc20 <col:23> 'int' lvalue Var 0x14d02b538 'badness' 'int'
    |     | `-ImplicitCastExpr 0x14d02dcb0 <col:34> 'int' <LValueToRValue>
    |     |   `-DeclRefExpr 0x14d02dc90 <col:34> 'int' lvalue Var 0x14d02b658 'reuseport' 'int'
    |     `-CompoundStmt 0x14d02e518 <col:45, line:32:3>
    |       |-UnaryOperator 0x14d02dd08 <line:28:4, col:11> 'int' postfix '++'
    |       | `-DeclRefExpr 0x14d02dce8 <col:4> 'int' lvalue Var 0x14d02b5b8 'matches' 'int'
    |       `-IfStmt 0x14d02dfb0 <line:29:4, line:30:14>
    |         |-BinaryOperator 0x14d02df18 <line:29:8, col:43> 'int' contains-errors '=='
    |         | |-CallExpr 0x14d02dee8 <col:8, col:38> '<dependent type>' contains-errors
    |         | | |-DeclRefExpr 0x14d02de00 <col:8> 'int ()' Function 0x14d02dd48 'reciprocal_scale' 'int ()'
    |         | | |-RecoveryExpr 0x14d02dec8 <col:25> '<dependent type>' contains-errors lvalue
    |         | | `-DeclRefExpr 0x14d02de38 <col:31> 'int' lvalue Var 0x14d02b5b8 'matches' 'int'
    |         | `-IntegerLiteral 0x14d02de88 <col:43> 'int' 0
    |         `-BinaryOperator 0x14d02df90 <line:30:5, col:14> 'struct sock *' '='
    |           |-DeclRefExpr 0x14d02df38 <col:5> 'struct sock *' lvalue Var 0x14d02b208 'result' 'struct sock *'
    |           `-ImplicitCastExpr 0x14d02df78 <col:14> 'struct sock *' <LValueToRValue>
    |             `-DeclRefExpr 0x14d02df58 <col:14> 'struct sock *' lvalue Var 0x14d02b178 'sk' 'struct sock *'
    |-IfStmt 0x14d02e7e0 <line:35:2, line:36:8>
    | |-BinaryOperator 0x14d02e7a8 <line:35:6, col:31> 'int' '!='
    | | |-ImplicitCastExpr 0x14d02e790 <col:6, col:26> 'unsigned int' <IntegralCast>
    | | | `-CallExpr 0x14d02e718 <col:6, col:26> 'int'
    | | |   |-ImplicitCastExpr 0x14d02e700 <col:6> 'int (*)()' <FunctionToPointerDecay>
    | | |   | `-DeclRefExpr 0x14d02e688 <col:6> 'int ()' Function 0x14d02e5d0 'get_nulls_value' 'int ()'
    | | |   `-ImplicitCastExpr 0x14d02e740 <col:22> 'struct hlist_nulls_node *' <LValueToRValue>
    | | |     `-DeclRefExpr 0x14d02e6a8 <col:22> 'struct hlist_nulls_node *' lvalue Var 0x14d02b408 'node' 'struct hlist_nulls_node *'
    | | `-ImplicitCastExpr 0x14d02e778 <col:31> 'unsigned int' <LValueToRValue>
    | |   `-DeclRefExpr 0x14d02e758 <col:31> 'unsigned int' lvalue ParmVar 0x14d02ada8 'slot2' 'unsigned int'
    | `-GotoStmt 0x14d02e7c8 <line:36:3, col:8> 'begin' 0x14d02d000
    |-IfStmt 0x14d02ef80 <line:38:2, line:47:2>
    | |-ImplicitCastExpr 0x14d02e820 <line:38:6> 'struct sock *' <LValueToRValue>
    | | `-DeclRefExpr 0x14d02e800 <col:6> 'struct sock *' lvalue Var 0x14d02b208 'result' 'struct sock *'
    | `-CompoundStmt 0x14d02ef68 <col:14, line:47:2>
    |   `-LabelStmt 0x14d02ef48 <line:39:1, line:46:3> 'exact_match'
    |     `-IfStmt 0x14d02ef18 <line:40:3, line:46:3> has_else
    |       |-CallExpr 0x14d02eb18 <line:40:7, col:64> '<dependent type>' contains-errors
    |       | |-DeclRefExpr 0x14d02e918 <col:7> 'int ()' Function 0x14d02e860 'unlikely' 'int ()'
    |       | `-UnaryOperator 0x14d02eb00 <col:16, col:63> '<dependent type>' contains-errors prefix '!' cannot overflow
    |       |   `-CallExpr 0x14d02ead0 <col:17, col:63> '<dependent type>' contains-errors
    |       |     |-DeclRefExpr 0x14d02ea18 <col:17> 'int ()' Function 0x14d02e960 'atomic_inc_not_zero_hint' 'int ()'
    |       |     |-UnaryOperator 0x14d02ea98 <col:42, col:51> '<dependent type>' contains-errors prefix '&' cannot overflow
    |       |     | `-RecoveryExpr 0x14d02ea70 <col:43, col:51> '<dependent type>' contains-errors lvalue
    |       |     |   `-DeclRefExpr 0x14d02ea38 <col:43> 'struct sock *' lvalue Var 0x14d02b208 'result' 'struct sock *'
    |       |     `-IntegerLiteral 0x14d02eab0 <col:62> 'int' 2
    |       |-NullStmt 0x14d02ef10 <line:41:4>
    |       `-IfStmt 0x14d02eef0 <line:42:8, line:46:3>
    |         |-CallExpr 0x14d02ed18 <line:42:12, line:43:34> '<dependent type>' contains-errors
    |         | |-DeclRefExpr 0x14d02eb60 <line:42:12> 'int ()' Function 0x14d02e860 'unlikely' 'int ()'
    |         | `-BinaryOperator 0x14d02ecf8 <col:21, line:43:27> 'int' contains-errors '<'
    |         |   |-CallExpr 0x14d02ec80 <line:42:21, line:43:23> '<dependent type>' contains-errors
    |         |   | |-DeclRefExpr 0x14d02eb80 <line:42:21> 'int ()' Function 0x14d02d398 'compute_score2' 'int ()'
    |         |   | |-DeclRefExpr 0x14d02eba0 <col:36> 'struct sock *' lvalue Var 0x14d02b208 'result' 'struct sock *'
    |         |   | |-DeclRefExpr 0x14d02ebc0 <col:44> 'struct net *' lvalue ParmVar 0x14d00e2e8 'net' 'struct net *'
    |         |   | |-DeclRefExpr 0x14d02ebe0 <col:49> 'const struct in6_addr *' lvalue ParmVar 0x14d02a8c8 'saddr' 'const struct in6_addr *'
    |         |   | |-RecoveryExpr 0x14d02ec00 <col:56> '<dependent type>' contains-errors lvalue
    |         |   | |-DeclRefExpr 0x14d02ec20 <line:43:7> 'const struct in6_addr *' lvalue ParmVar 0x14d02aa58 'daddr' 'const struct in6_addr *'
    |         |   | |-DeclRefExpr 0x14d02ec40 <col:14> 'unsigned int' lvalue ParmVar 0x14d02aad8 'hnum' 'unsigned int'
    |         |   | `-DeclRefExpr 0x14d02ec60 <col:20> 'int' lvalue ParmVar 0x14d02ab58 'dif' 'int'
    |         |   `-DeclRefExpr 0x14d02ecd8 <col:27> 'int' lvalue Var 0x14d02b538 'badness' 'int'
    |         `-CompoundStmt 0x14d02eed0 <col:37, line:46:3>
    |           |-CallExpr 0x14d02ee78 <line:44:4, col:19> 'int'
    |           | |-ImplicitCastExpr 0x14d02ee60 <col:4> 'int (*)()' <FunctionToPointerDecay>
    |           | | `-DeclRefExpr 0x14d02ee20 <col:4> 'int ()' Function 0x14d02ed68 'sock_put' 'int ()'
    |           | `-ImplicitCastExpr 0x14d02eea0 <col:13> 'struct sock *' <LValueToRValue>
    |           |   `-DeclRefExpr 0x14d02ee40 <col:13> 'struct sock *' lvalue Var 0x14d02b208 'result' 'struct sock *'
    |           `-GotoStmt 0x14d02eeb8 <line:45:4, col:9> 'begin' 0x14d02d000
    `-ReturnStmt 0x14d02efd8 <line:48:2, col:9>
      `-ImplicitCastExpr 0x14d02efc0 <col:9> 'struct sock *' <LValueToRValue>
        `-DeclRefExpr 0x14d02efa0 <col:9> 'struct sock *' lvalue Var 0x14d02b208 'result' 'struct sock *'
