`-FunctionDecl 0x144110838  line:1:1 invalid dissect_kafka_txn_offset_commit_response 'int (int *, int *, int *, int, int)'
  |-ParmVarDecl 0x144110528 <col:42, col:52> col:52 invalid tvb 'int *'
  |-ParmVarDecl 0x1441105a8 <col:57, col:70> col:70 invalid pinfo 'int *'
  |-ParmVarDecl 0x144110628 <col:77, col:89> col:89 invalid tree 'int *'
  |-ParmVarDecl 0x1441106a8 <col:95, col:99> col:99 used offset 'int'
  |-ParmVarDecl 0x144110728 <line:2:39, col:59> col:59 invalid api_version 'int'
  `-CompoundStmt 0x146008d40 <line:3:1, line:22:1>
    |-BinaryOperator 0x144110b90 <line:7:5, col:66> 'int' contains-errors '='
    | |-DeclRefExpr 0x144110938 <col:5> 'int' lvalue ParmVar 0x1441106a8 'offset' 'int'
    | `-CallExpr 0x144110b50 <col:14, col:66> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x144110ab0 <col:14> 'int ()' Function 0x1441109f8 'dissect_kafka_throttle_time' 'int ()'
    |   |-RecoveryExpr 0x144110ad0 <col:42> '<dependent type>' contains-errors lvalue
    |   |-RecoveryExpr 0x144110af0 <col:47> '<dependent type>' contains-errors lvalue
    |   |-RecoveryExpr 0x144110b10 <col:54> '<dependent type>' contains-errors lvalue
    |   `-DeclRefExpr 0x144110b30 <col:60> 'int' lvalue ParmVar 0x1441106a8 'offset' 'int'
    |-BinaryOperator 0x146008830 <line:13:5, line:14:87> 'int' contains-errors '='
    | |-DeclRefExpr 0x146008478 <line:13:5> 'int' lvalue ParmVar 0x1441106a8 'offset' 'int'
    | `-CallExpr 0x1460087d0 <col:14, line:14:87> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x146008578 <line:13:14> 'int ()' Function 0x1460084c0 'dissect_kafka_array' 'int ()'
    |   |-RecoveryExpr 0x146008758 <col:34> '<dependent type>' contains-errors lvalue
    |   |-RecoveryExpr 0x1460085b0 <col:43> '<dependent type>' contains-errors lvalue
    |   |-RecoveryExpr 0x1460085d0 <col:48> '<dependent type>' contains-errors lvalue
    |   |-DeclRefExpr 0x1460085f0 <col:55> 'int' lvalue ParmVar 0x1441106a8 'offset' 'int'
    |   |-BinaryOperator 0x146008650 <col:63, col:78> 'int' contains-errors '>='
    |   | |-RecoveryExpr 0x146008610 <col:63> '<dependent type>' contains-errors lvalue
    |   | `-IntegerLiteral 0x146008630 <col:78> 'int' 3
    |   |-RecoveryExpr 0x146008670 <col:81> '<dependent type>' contains-errors lvalue
    |   |-UnaryOperator 0x146008798 <line:14:34, col:35> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | `-RecoveryExpr 0x146008778 <col:35> '<dependent type>' contains-errors lvalue
    |   `-RecoveryExpr 0x1460087b0 <col:83> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x146008a00 <line:15:5, col:42> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x146008930 <col:5> 'int ()' Function 0x146008878 'proto_item_set_end' 'int ()'
    | |-RecoveryExpr 0x1460089e0 <col:24> '<dependent type>' contains-errors lvalue
    | |-RecoveryExpr 0x146008968 <col:31> '<dependent type>' contains-errors lvalue
    | `-DeclRefExpr 0x146008988 <col:36> 'int' lvalue ParmVar 0x1441106a8 'offset' 'int'
    |-IfStmt 0x146008cd8 <line:17:5, line:19:5>
    | |-BinaryOperator 0x146008a78 <line:17:9, col:24> 'int' contains-errors '>='
    | | |-RecoveryExpr 0x146008a38 <col:9> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x146008a58 <col:24> 'int' 3
    | `-CompoundStmt 0x146008cc0 <col:27, line:19:5>
    |   `-BinaryOperator 0x146008ca0 <line:18:9, col:73> 'int' contains-errors '='
    |     |-DeclRefExpr 0x146008a98 <col:9> 'int' lvalue ParmVar 0x1441106a8 'offset' 'int'
    |     `-CallExpr 0x146008c58 <col:18, col:73> '<dependent type>' contains-errors
    |       |-DeclRefExpr 0x146008b98 <col:18> 'int ()' Function 0x146008ae0 'dissect_kafka_tagged_fields' 'int ()'
    |       |-RecoveryExpr 0x146008bb8 <col:46> '<dependent type>' contains-errors lvalue
    |       |-RecoveryExpr 0x146008bd8 <col:51> '<dependent type>' contains-errors lvalue
    |       |-RecoveryExpr 0x146008bf8 <col:58> '<dependent type>' contains-errors lvalue
    |       |-DeclRefExpr 0x146008c18 <col:64> 'int' lvalue ParmVar 0x1441106a8 'offset' 'int'
    |       `-IntegerLiteral 0x146008c38 <col:72> 'int' 0
    `-ReturnStmt 0x146008d30 <line:21:5, col:12>
      `-ImplicitCastExpr 0x146008d18 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x146008cf8 <col:12> 'int' lvalue ParmVar 0x1441106a8 'offset' 'int'
