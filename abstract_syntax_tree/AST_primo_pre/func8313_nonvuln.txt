`-FunctionDecl 0x1248fbc88  line:1:1 invalid find_attendee 'int (int *, const char *)'
  |-ParmVarDecl 0x1248fbb28 <col:16, col:31> col:31 invalid ical_comp 'int *'
  |-ParmVarDecl 0x1248fbba8 <line:2:16, col:29> col:29 used address 'const char *'
  `-CompoundStmt 0x12600a2e8 <line:3:1, line:32:1>
    |-IfStmt 0x1248fbe38 <line:6:2, line:7:10>
    | |-BinaryOperator 0x1248fbdd0 <line:6:6, col:17> 'int' contains-errors '=='
    | | |-DeclRefExpr 0x1248fbd58 <col:6> 'const char *' lvalue ParmVar 0x1248fbba8 'address' 'const char *'
    | | `-RecoveryExpr 0x1248fbdb0 <col:17> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x1248fbe28 <line:7:3, col:10>
    |   `-RecoveryExpr 0x1248fbe08 <col:10> '<dependent type>' contains-errors lvalue
    `-ForStmt 0x12600a2b0 <line:9:2, line:29:2>
      |-<<<NULL>>>
      |-<<<NULL>>>
      |-BinaryOperator 0x1248fc108 <line:10:7, col:15> 'int' contains-errors '!='
      | |-RecoveryExpr 0x1248fc0c8 <col:7> '<dependent type>' contains-errors lvalue
      | `-RecoveryExpr 0x1248fc0e8 <col:15> '<dependent type>' contains-errors lvalue
      |-BinaryOperator 0x1260093d0 <line:11:7, col:80> '<dependent type>' contains-errors '='
      | |-RecoveryExpr 0x126009360 <col:7> '<dependent type>' contains-errors lvalue
      | `-CallExpr 0x1260093a0 <col:14, col:80> '<dependent type>' contains-errors
      |   |-DeclRefExpr 0x1260092b8 <col:14> 'int ()' Function 0x126009200 'icalcomponent_get_next_property' 'int ()'
      |   |-RecoveryExpr 0x1260092d8 <col:47> '<dependent type>' contains-errors lvalue
      |   `-RecoveryExpr 0x126009380 <col:58> '<dependent type>' contains-errors lvalue
      `-CompoundStmt 0x12600a258 <col:83, line:29:2>
        |-DeclStmt 0x126009470 <line:12:3, col:18>
        | `-VarDecl 0x126009408 <col:3, col:10> col:10 used attendee 'char *'
        |-DeclStmt 0x126009508 <line:13:3, col:14>
        | `-VarDecl 0x1260094a0 <col:3, col:10> col:10 used text 'char *'
        |-BinaryOperator 0x1260096e8 <line:15:3, col:54> 'char *' contains-errors '='
        | |-DeclRefExpr 0x126009520 <col:3> 'char *' lvalue Var 0x126009408 'attendee' 'char *'
        | `-CallExpr 0x1260096c0 <col:14, col:54> '<dependent type>' contains-errors
        |   |-DeclRefExpr 0x126009620 <col:14> 'int ()' Function 0x126009568 'icalproperty_get_value_as_string_r' 'int ()'
        |   `-RecoveryExpr 0x1260096a0 <col:50> '<dependent type>' contains-errors lvalue
        |-IfStmt 0x126009760 <line:17:4, line:18:4>
        | |-UnaryOperator 0x126009740 <line:17:8, col:9> 'int' prefix '!' cannot overflow
        | | `-ImplicitCastExpr 0x126009728 <col:9> 'char *' <LValueToRValue>
        | |   `-DeclRefExpr 0x126009708 <col:9> 'char *' lvalue Var 0x126009408 'attendee' 'char *'
        | `-ContinueStmt 0x126009758 <line:18:4>
        |-BinaryOperator 0x126009aa0 <line:20:3, col:48> 'char *' '='
        | |-DeclRefExpr 0x126009780 <col:3> 'char *' lvalue Var 0x1260094a0 'text' 'char *'
        | `-ImplicitCastExpr 0x126009a88 <col:10, col:48> 'char *' <IntegralToPointer>
        |   `-CallExpr 0x126009a60 <col:10, col:48> 'int'
        |     |-ImplicitCastExpr 0x126009a48 <col:10> 'int (*)()' <FunctionToPointerDecay>
        |     | `-DeclRefExpr 0x126009880 <col:10> 'int ()' Function 0x1260097c8 'g_strdup' 'int ()'
        |     `-CallExpr 0x126009a08 <col:20, col:47> 'int'
        |       |-ImplicitCastExpr 0x1260099f0 <col:20> 'int (*)()' <FunctionToPointerDecay>
        |       | `-DeclRefExpr 0x126009980 <col:20> 'int ()' Function 0x1260098c8 'itip_strip_mailto' 'int ()'
        |       `-ImplicitCastExpr 0x126009a30 <col:39> 'char *' <LValueToRValue>
        |         `-DeclRefExpr 0x1260099a0 <col:39> 'char *' lvalue Var 0x126009408 'attendee' 'char *'
        |-BinaryOperator 0x126009c70 <line:21:3, col:26> 'char *' '='
        | |-DeclRefExpr 0x126009ac0 <col:3> 'char *' lvalue Var 0x1260094a0 'text' 'char *'
        | `-ImplicitCastExpr 0x126009c58 <col:10, col:26> 'char *' <IntegralToPointer>
        |   `-CallExpr 0x126009c18 <col:10, col:26> 'int'
        |     |-ImplicitCastExpr 0x126009c00 <col:10> 'int (*)()' <FunctionToPointerDecay>
        |     | `-DeclRefExpr 0x126009bc0 <col:10> 'int ()' Function 0x126009b08 'g_strstrip' 'int ()'
        |     `-ImplicitCastExpr 0x126009c40 <col:22> 'char *' <LValueToRValue>
        |       `-DeclRefExpr 0x126009be0 <col:22> 'char *' lvalue Var 0x1260094a0 'text' 'char *'
        |-IfStmt 0x12600a0f8 <line:22:3, line:26:3>
        | |-BinaryOperator 0x126009e98 <line:22:7, col:49> 'int' '&&'
        | | |-ImplicitCastExpr 0x126009e80 <col:7> 'char *' <LValueToRValue>
        | | | `-DeclRefExpr 0x126009c90 <col:7> 'char *' lvalue Var 0x1260094a0 'text' 'char *'
        | | `-UnaryOperator 0x126009e68 <col:15, col:49> 'int' prefix '!' cannot overflow
        | |   `-CallExpr 0x126009e08 <col:16, col:49> 'int'
        | |     |-ImplicitCastExpr 0x126009df0 <col:16> 'int (*)()' <FunctionToPointerDecay>
        | |     | `-DeclRefExpr 0x126009d90 <col:16> 'int ()' Function 0x126009cd8 'g_ascii_strcasecmp' 'int ()'
        | |     |-ImplicitCastExpr 0x126009e38 <col:36> 'const char *' <LValueToRValue>
        | |     | `-DeclRefExpr 0x126009db0 <col:36> 'const char *' lvalue ParmVar 0x1248fbba8 'address' 'const char *'
        | |     `-ImplicitCastExpr 0x126009e50 <col:45> 'char *' <LValueToRValue>
        | |       `-DeclRefExpr 0x126009dd0 <col:45> 'char *' lvalue Var 0x1260094a0 'text' 'char *'
        | `-CompoundStmt 0x12600a0d0 <col:52, line:26:3>
        |   |-CallExpr 0x126009ff0 <line:23:4, col:16> 'int'
        |   | |-ImplicitCastExpr 0x126009fd8 <col:4> 'int (*)()' <FunctionToPointerDecay>
        |   | | `-DeclRefExpr 0x126009f98 <col:4> 'int ()' Function 0x126009ee0 'g_free' 'int ()'
        |   | `-ImplicitCastExpr 0x12600a018 <col:12> 'char *' <LValueToRValue>
        |   |   `-DeclRefExpr 0x126009fb8 <col:12> 'char *' lvalue Var 0x1260094a0 'text' 'char *'
        |   |-CallExpr 0x12600a088 <line:24:4, col:20> 'int'
        |   | |-ImplicitCastExpr 0x12600a070 <col:4> 'int (*)()' <FunctionToPointerDecay>
        |   | | `-DeclRefExpr 0x12600a030 <col:4> 'int ()' Function 0x126009ee0 'g_free' 'int ()'
        |   | `-ImplicitCastExpr 0x12600a0b0 <col:12> 'char *' <LValueToRValue>
        |   |   `-DeclRefExpr 0x12600a050 <col:12> 'char *' lvalue Var 0x126009408 'attendee' 'char *'
        |   `-BreakStmt 0x12600a0c8 <line:25:4>
        |-CallExpr 0x12600a170 <line:27:3, col:15> 'int'
        | |-ImplicitCastExpr 0x12600a158 <col:3> 'int (*)()' <FunctionToPointerDecay>
        | | `-DeclRefExpr 0x12600a118 <col:3> 'int ()' Function 0x126009ee0 'g_free' 'int ()'
        | `-ImplicitCastExpr 0x12600a198 <col:11> 'char *' <LValueToRValue>
        |   `-DeclRefExpr 0x12600a138 <col:11> 'char *' lvalue Var 0x1260094a0 'text' 'char *'
        `-CallExpr 0x12600a218 <line:28:3, col:19> 'int'
          |-ImplicitCastExpr 0x12600a200 <col:3> 'int (*)()' <FunctionToPointerDecay>
          | `-DeclRefExpr 0x12600a1b0 <col:3> 'int ()' Function 0x126009ee0 'g_free' 'int ()'
          `-ImplicitCastExpr 0x12600a240 <col:11> 'char *' <LValueToRValue>
            `-DeclRefExpr 0x12600a1d0 <col:11> 'char *' lvalue Var 0x126009408 'attendee' 'char *'
