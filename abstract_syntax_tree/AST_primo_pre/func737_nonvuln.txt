`-FunctionDecl 0x1321410a8  line:1:12 hns_nic_maybe_stop_tso 'int (struct sk_buff **, int *, struct hnae_ring *)' static
  |-ParmVarDecl 0x132128aa8 <line:2:2, col:19> col:19 used out_skb 'struct sk_buff **'
  |-ParmVarDecl 0x132128b58 <col:28, col:33> col:33 used bnum 'int *'
  |-ParmVarDecl 0x132140f68 <col:39, col:57> col:57 used ring 'struct hnae_ring *'
  `-CompoundStmt 0x132143e08 <line:3:1, line:39:1>
    |-DeclStmt 0x132141230 <line:4:2, col:7>
    | `-VarDecl 0x1321411c8 <col:2, col:6> col:6 used i 'int'
    |-DeclStmt 0x1321412c8 <line:5:2, col:10>
    | `-VarDecl 0x132141260 <col:2, col:6> col:6 used size 'int'
    |-DeclStmt 0x132141360 <line:6:2, col:13>
    | `-VarDecl 0x1321412f8 <col:2, col:6> col:6 used buf_num 'int'
    |-DeclStmt 0x1321413f8 <line:7:2, col:14>
    | `-VarDecl 0x132141390 <col:2, col:6> col:6 used frag_num 'int'
    |-DeclStmt 0x132141568 <line:8:2, col:32>
    | `-VarDecl 0x132141498 <col:2, col:25> col:18 used skb 'struct sk_buff *' cinit
    |   `-ImplicitCastExpr 0x132141550 <col:24, col:25> 'struct sk_buff *' <LValueToRValue>
    |     `-UnaryOperator 0x132141538 <col:24, col:25> 'struct sk_buff *' lvalue prefix '*' cannot overflow
    |       `-ImplicitCastExpr 0x132141520 <col:25> 'struct sk_buff **' <LValueToRValue>
    |         `-DeclRefExpr 0x132141500 <col:25> 'struct sk_buff **' lvalue ParmVar 0x132128aa8 'out_skb' 'struct sk_buff **'
    |-DeclStmt 0x132141660 <line:9:2, col:32>
    | `-VarDecl 0x1321415a8 <col:2, col:28> col:18 used new_skb 'struct sk_buff *' cinit
    |   `-RecoveryExpr 0x132141640 <col:28> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x132141868 <line:10:2, col:30>
    | |-RecordDecl 0x132141678 <col:2, col:9> col:9 struct skb_frag_struct
    | `-VarDecl 0x1321417e8 <col:2, col:26> col:26 used frag 'struct skb_frag_struct *'
    |-BinaryOperator 0x132141a78 <line:12:2, col:24> 'int' '='
    | |-DeclRefExpr 0x132141880 <col:2> 'int' lvalue Var 0x132141260 'size' 'int'
    | `-CallExpr 0x132141a38 <col:9, col:24> 'int'
    |   |-ImplicitCastExpr 0x132141a20 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x1321419b0 <col:9> 'int ()' Function 0x1321418f8 'skb_headlen' 'int ()'
    |   `-ImplicitCastExpr 0x132141a60 <col:21> 'struct sk_buff *' <LValueToRValue>
    |     `-DeclRefExpr 0x1321419d0 <col:21> 'struct sk_buff *' lvalue Var 0x132141498 'skb' 'struct sk_buff *'
    |-BinaryOperator 0x132141d28 <line:15:2, col:30> 'int' contains-errors '='
    | |-DeclRefExpr 0x132141b68 <col:2> 'int' lvalue Var 0x132141390 'frag_num' 'int'
    | `-RecoveryExpr 0x132141d00 <col:13, col:30> '<dependent type>' contains-errors lvalue
    |   `-CallExpr 0x132141cc0 <col:13, col:27> 'int'
    |     |-ImplicitCastExpr 0x132141ca8 <col:13> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x132141c68 <col:13> 'int ()' Function 0x132141bb0 'skb_shinfo' 'int ()'
    |     `-ImplicitCastExpr 0x132141ce8 <col:24> 'struct sk_buff *' <LValueToRValue>
    |       `-DeclRefExpr 0x132141c88 <col:24> 'struct sk_buff *' lvalue Var 0x132141498 'skb' 'struct sk_buff *'
    |-ForStmt 0x1321430a0 <line:16:2, line:20:2>
    | |-BinaryOperator 0x132141d88 <line:16:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x132141d48 <col:7> 'int' lvalue Var 0x1321411c8 'i' 'int'
    | | `-IntegerLiteral 0x132141d68 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x132142c18 <col:14, col:18> 'int' '<'
    | | |-ImplicitCastExpr 0x132141de8 <col:14> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x132141da8 <col:14> 'int' lvalue Var 0x1321411c8 'i' 'int'
    | | `-ImplicitCastExpr 0x132142c00 <col:18> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x132141dc8 <col:18> 'int' lvalue Var 0x132141390 'frag_num' 'int'
    | |-UnaryOperator 0x132142c58 <col:28, col:29> 'int' postfix '++'
    | | `-DeclRefExpr 0x132142c38 <col:28> 'int' lvalue Var 0x1321411c8 'i' 'int'
    | `-CompoundStmt 0x132143080 <col:33, line:20:2>
    |   |-BinaryOperator 0x132142dd8 <line:17:3, col:35> 'struct skb_frag_struct *' contains-errors '='
    |   | |-DeclRefExpr 0x132142c70 <col:3> 'struct skb_frag_struct *' lvalue Var 0x1321417e8 'frag' 'struct skb_frag_struct *'
    |   | `-UnaryOperator 0x132142dc0 <col:10, col:35> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   |   `-ArraySubscriptExpr 0x132142da0 <col:11, col:35> '<dependent type>' contains-errors lvalue
    |   |     |-ImplicitCastExpr 0x132142d70 <col:11, col:28> '<dependent type>' contains-errors <LValueToRValue>
    |   |     | `-RecoveryExpr 0x132142d28 <col:11, col:28> '<dependent type>' contains-errors lvalue
    |   |     |   `-CallExpr 0x132142ce8 <col:11, col:25> 'int'
    |   |     |     |-ImplicitCastExpr 0x132142cd0 <col:11> 'int (*)()' <FunctionToPointerDecay>
    |   |     |     | `-DeclRefExpr 0x132142c90 <col:11> 'int ()' Function 0x132141bb0 'skb_shinfo' 'int ()'
    |   |     |     `-ImplicitCastExpr 0x132142d10 <col:22> 'struct sk_buff *' <LValueToRValue>
    |   |     |       `-DeclRefExpr 0x132142cb0 <col:22> 'struct sk_buff *' lvalue Var 0x132141498 'skb' 'struct sk_buff *'
    |   |     `-ImplicitCastExpr 0x132142d88 <col:34> 'int' <LValueToRValue>
    |   |       `-DeclRefExpr 0x132142d50 <col:34> 'int' lvalue Var 0x1321411c8 'i' 'int'
    |   `-BinaryOperator 0x132142f90 <line:18:3, col:28> 'int' '='
    |     |-DeclRefExpr 0x132142df8 <col:3> 'int' lvalue Var 0x132141260 'size' 'int'
    |     `-CallExpr 0x132142f50 <col:10, col:28> 'int'
    |       |-ImplicitCastExpr 0x132142f38 <col:10> 'int (*)()' <FunctionToPointerDecay>
    |       | `-DeclRefExpr 0x132142ef8 <col:10> 'int ()' Function 0x132142e40 'skb_frag_size' 'int ()'
    |       `-ImplicitCastExpr 0x132142f78 <col:24> 'struct skb_frag_struct *' <LValueToRValue>
    |         `-DeclRefExpr 0x132142f18 <col:24> 'struct skb_frag_struct *' lvalue Var 0x1321417e8 'frag' 'struct skb_frag_struct *'
    |-IfStmt 0x132143d00 <line:22:2, line:35:2> has_else
    | |-CallExpr 0x132143278 <line:22:6, col:51> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x1321431b8 <col:6> 'int ()' Function 0x132143100 'unlikely' 'int ()'
    | | `-BinaryOperator 0x132143258 <col:15, col:31> 'int' contains-errors '>'
    | |   |-DeclRefExpr 0x1321431d8 <col:15> 'int' lvalue Var 0x1321412f8 'buf_num' 'int'
    | |   `-RecoveryExpr 0x132143230 <col:25, col:31> '<dependent type>' contains-errors lvalue
    | |     `-DeclRefExpr 0x1321431f8 <col:25> 'struct hnae_ring *' lvalue ParmVar 0x132140f68 'ring' 'struct hnae_ring *'
    | |-CompoundStmt 0x132143b98 <col:54, line:33:2>
    | | |-IfStmt 0x132143628 <line:24:3, line:25:12>
    | | | |-BinaryOperator 0x132143560 <line:24:7, col:26> 'int' '<'
    | | | | |-CallExpr 0x1321434e8 <col:7, col:22> 'int'
    | | | | | |-ImplicitCastExpr 0x1321434d0 <col:7> 'int (*)()' <FunctionToPointerDecay>
    | | | | | | `-DeclRefExpr 0x132143490 <col:7> 'int ()' Function 0x1321433d8 'ring_space' 'int ()'
    | | | | | `-ImplicitCastExpr 0x132143510 <col:18> 'struct hnae_ring *' <LValueToRValue>
    | | | | |   `-DeclRefExpr 0x1321434b0 <col:18> 'struct hnae_ring *' lvalue ParmVar 0x132140f68 'ring' 'struct hnae_ring *'
    | | | | `-ImplicitCastExpr 0x132143548 <col:26> 'int' <LValueToRValue>
    | | | |   `-DeclRefExpr 0x132143528 <col:26> 'int' lvalue Var 0x1321412f8 'buf_num' 'int'
    | | | `-ReturnStmt 0x132143618 <line:25:4, col:12>
    | | |   `-UnaryOperator 0x132143600 <col:11, col:12> '<dependent type>' contains-errors prefix '-' cannot overflow
    | | |     `-ImplicitCastExpr 0x1321435e8 <col:12> '<dependent type>' contains-errors <LValueToRValue>
    | | |       `-RecoveryExpr 0x1321435c8 <col:12> '<dependent type>' contains-errors lvalue
    | | |-BinaryOperator 0x132143840 <line:27:3, col:37> 'struct sk_buff *' contains-errors '='
    | | | |-DeclRefExpr 0x132143648 <col:3> 'struct sk_buff *' contains-errors lvalue Var 0x1321415a8 'new_skb' 'struct sk_buff *'
    | | | `-CallExpr 0x132143810 <col:13, col:37> '<dependent type>' contains-errors
    | | |   |-DeclRefExpr 0x132143748 <col:13> 'int ()' Function 0x132143690 'skb_copy' 'int ()'
    | | |   |-DeclRefExpr 0x132143768 <col:22> 'struct sk_buff *' lvalue Var 0x132141498 'skb' 'struct sk_buff *'
    | | |   `-RecoveryExpr 0x1321437f0 <col:27> '<dependent type>' contains-errors lvalue
    | | |-IfStmt 0x132143958 <line:28:3, line:29:12>
    | | | |-UnaryOperator 0x132143898 <line:28:7, col:8> 'int' contains-errors prefix '!' cannot overflow
    | | | | `-ImplicitCastExpr 0x132143880 <col:8> 'struct sk_buff *' contains-errors <LValueToRValue>
    | | | |   `-DeclRefExpr 0x132143860 <col:8> 'struct sk_buff *' contains-errors lvalue Var 0x1321415a8 'new_skb' 'struct sk_buff *'
    | | | `-ReturnStmt 0x132143948 <line:29:4, col:12>
    | | |   `-UnaryOperator 0x132143930 <col:11, col:12> '<dependent type>' contains-errors prefix '-' cannot overflow
    | | |     `-ImplicitCastExpr 0x132143918 <col:12> '<dependent type>' contains-errors <LValueToRValue>
    | | |       `-RecoveryExpr 0x1321438f8 <col:12> '<dependent type>' contains-errors lvalue
    | | |-CallExpr 0x132143ab0 <line:30:3, col:24> 'int'
    | | | |-ImplicitCastExpr 0x132143a98 <col:3> 'int (*)()' <FunctionToPointerDecay>
    | | | | `-DeclRefExpr 0x132143a58 <col:3> 'int ()' Function 0x1321439a0 'dev_kfree_skb_any' 'int ()'
    | | | `-ImplicitCastExpr 0x132143ad8 <col:21> 'struct sk_buff *' <LValueToRValue>
    | | |   `-DeclRefExpr 0x132143a78 <col:21> 'struct sk_buff *' lvalue Var 0x132141498 'skb' 'struct sk_buff *'
    | | `-BinaryOperator 0x132143b78 <line:31:3, col:14> 'struct sk_buff *' contains-errors '='
    | |   |-UnaryOperator 0x132143b28 <col:3, col:4> 'struct sk_buff *' lvalue prefix '*' cannot overflow
    | |   | `-ImplicitCastExpr 0x132143b10 <col:4> 'struct sk_buff **' <LValueToRValue>
    | |   |   `-DeclRefExpr 0x132143af0 <col:4> 'struct sk_buff **' lvalue ParmVar 0x132128aa8 'out_skb' 'struct sk_buff **'
    | |   `-ImplicitCastExpr 0x132143b60 <col:14> 'struct sk_buff *' contains-errors <LValueToRValue>
    | |     `-DeclRefExpr 0x132143b40 <col:14> 'struct sk_buff *' contains-errors lvalue Var 0x1321415a8 'new_skb' 'struct sk_buff *'
    | `-IfStmt 0x132143ce0 <line:33:9, line:35:2>
    |   |-BinaryOperator 0x132143cb0 <line:33:13, col:32> 'int' '<'
    |   | |-CallExpr 0x132143c38 <col:13, col:28> 'int'
    |   | | |-ImplicitCastExpr 0x132143c20 <col:13> 'int (*)()' <FunctionToPointerDecay>
    |   | | | `-DeclRefExpr 0x132143bd0 <col:13> 'int ()' Function 0x1321433d8 'ring_space' 'int ()'
    |   | | `-ImplicitCastExpr 0x132143c60 <col:24> 'struct hnae_ring *' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x132143c00 <col:24> 'struct hnae_ring *' lvalue ParmVar 0x132140f68 'ring' 'struct hnae_ring *'
    |   | `-ImplicitCastExpr 0x132143c98 <col:32> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x132143c78 <col:32> 'int' lvalue Var 0x1321412f8 'buf_num' 'int'
    |   `-CompoundStmt 0x132143cd0 <col:41, line:35:2>
    |-BinaryOperator 0x132143db8 <line:37:2, col:10> 'int' '='
    | |-UnaryOperator 0x132143d68 <col:2, col:3> 'int' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x132143d50 <col:3> 'int *' <LValueToRValue>
    | |   `-DeclRefExpr 0x132143d30 <col:3> 'int *' lvalue ParmVar 0x132128b58 'bnum' 'int *'
    | `-ImplicitCastExpr 0x132143da0 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x132143d80 <col:10> 'int' lvalue Var 0x1321412f8 'buf_num' 'int'
    `-ReturnStmt 0x132143df8 <line:38:2, col:9>
      `-IntegerLiteral 0x132143dd8 <col:9> 'int' 0
