`-FunctionDecl 0x15400dfa8  line:1:1 invalid set_quantifier 'int (int *, int *, int, int *)'
  |-ParmVarDecl 0x15400dd28 <col:16, col:22> col:22 invalid qnode 'int *'
  |-ParmVarDecl 0x15400dda8 <col:29, col:35> col:35 invalid target 'int *'
  |-ParmVarDecl 0x15400de28 <col:43, col:47> col:47 used group 'int'
  |-ParmVarDecl 0x15400dea8 <col:54, col:63> col:63 invalid env 'int *'
  `-CompoundStmt 0x153032040 <line:2:1, line:88:1>
    |-IfStmt 0x154809758 <line:6:3, line:8:3>
    | |-BinaryOperator 0x1548096f0 <line:6:7, col:38> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x154809648 <col:7, col:20> 'int' contains-errors '=='
    | | | |-CXXDependentScopeMemberExpr 0x154809600 <col:7, col:11> '<dependent type>' contains-errors lvalue ->lower
    | | | | `-RecoveryExpr 0x15400e3a8 <col:7> '<dependent type>' contains-errors lvalue
    | | | `-IntegerLiteral 0x15400e2a8 <col:20> 'int' 1
    | | `-BinaryOperator 0x1548096d0 <col:25, col:38> 'int' contains-errors '=='
    | |   |-CXXDependentScopeMemberExpr 0x154809688 <col:25, col:29> '<dependent type>' contains-errors lvalue ->upper
    | |   | `-RecoveryExpr 0x154809668 <col:25> '<dependent type>' contains-errors lvalue
    | |   `-IntegerLiteral 0x15400e348 <col:38> 'int' 1
    | `-CompoundStmt 0x154809740 <col:41, line:8:3>
    |   `-ReturnStmt 0x154809730 <line:7:5, col:12>
    |     `-IntegerLiteral 0x154809710 <col:12> 'int' 1
    |-SwitchStmt 0x1548098c0 <line:10:3, line:83:3>
    | |-CallExpr 0x154809898 <line:10:11, col:23> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x154809858 <col:11> 'int ()' Function 0x1548097a0 'NTYPE' 'int ()'
    | | `-RecoveryExpr 0x154809878 <col:17> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x153031f98 <col:26, line:83:3>
    |   |-IfStmt 0x15480a008 <line:12:5, line:21:5>
    |   | |-UnaryOperator 0x154809938 <line:12:9, col:11> 'int' prefix '!' cannot overflow
    |   | | `-ImplicitCastExpr 0x154809920 <col:11> 'int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x154809900 <col:11> 'int' lvalue ParmVar 0x15400de28 'group' 'int'
    |   | `-CompoundStmt 0x154809ff0 <col:18, line:21:5>
    |   |   `-IfStmt 0x154809fd0 <line:14:7, line:20:7>
    |   |     |-CallExpr 0x154809c80 <line:14:11, col:45> '<dependent type>' contains-errors
    |   |     | |-DeclRefExpr 0x154809b90 <col:11> 'int ()' Function 0x154809ad8 'str_node_can_be_split' 'int ()'
    |   |     | |-RecoveryExpr 0x154809c60 <col:33> '<dependent type>' contains-errors lvalue
    |   |     | `-CXXDependentScopeMemberExpr 0x154809be8 <col:37, col:42> '<dependent type>' contains-errors lvalue ->enc
    |   |     |   `-RecoveryExpr 0x154809bc8 <col:37> '<dependent type>' contains-errors lvalue
    |   |     `-CompoundStmt 0x154809fb8 <col:48, line:20:7>
    |   |       `-IfStmt 0x154809f98 <line:16:2, line:19:2>
    |   |         |-RecoveryExpr 0x154809f30 <line:16:6, col:19> '_Bool' contains-errors
    |   |         `-CompoundStmt 0x154809f80 <col:22, line:19:2>
    |   |           `-ReturnStmt 0x154809f70 <line:18:4, col:11>
    |   |             `-IntegerLiteral 0x154809f50 <col:11> 'int' 2
    |   |-BreakStmt 0x15480a028 <line:22:5>
    |   |-CompoundStmt 0x153031f40 <line:25:5, line:78:5>
    |   | |-DeclStmt 0x15480a218 <line:28:7, col:51>
    |   | | `-VarDecl 0x15480a0b0 <col:7, col:11> col:11 used nestq_num 'int'
    |   | |-DeclStmt 0x15480a2d0 <line:29:7, col:52>
    |   | | `-VarDecl 0x15480a248 <col:7, col:11> col:11 used targetq_num 'int'
    |   | `-IfStmt 0x153031f20 <line:66:7, line:77:7>
    |   |   |-BinaryOperator 0x15480a340 <line:66:11, col:26> 'int' '>='
    |   |   | |-ImplicitCastExpr 0x15480a328 <col:11> 'int' <LValueToRValue>
    |   |   | | `-DeclRefExpr 0x15480a2e8 <col:11> 'int' lvalue Var 0x15480a248 'targetq_num' 'int'
    |   |   | `-IntegerLiteral 0x15480a308 <col:26> 'int' 0
    |   |   `-CompoundStmt 0x153031f08 <col:29, line:77:7>
    |   |     `-IfStmt 0x153031ed8 <line:67:2, line:76:2> has_else
    |   |       |-BinaryOperator 0x15480a3b8 <line:67:6, col:19> 'int' '>='
    |   |       | |-ImplicitCastExpr 0x15480a3a0 <col:6> 'int' <LValueToRValue>
    |   |       | | `-DeclRefExpr 0x15480a360 <col:6> 'int' lvalue Var 0x15480a0b0 'nestq_num' 'int'
    |   |       | `-IntegerLiteral 0x15480a380 <col:19> 'int' 0
    |   |       |-CompoundStmt 0x15480a5b0 <col:22, line:70:2>
    |   |       | |-CallExpr 0x15480a518 <line:68:4, col:47> '<dependent type>' contains-errors
    |   |       | | |-DeclRefExpr 0x15480a4b8 <col:4> 'int ()' Function 0x15480a400 'onig_reduce_nested_quantifier' 'int ()'
    |   |       | | |-RecoveryExpr 0x15480a4d8 <col:34> '<dependent type>' contains-errors lvalue
    |   |       | | `-RecoveryExpr 0x15480a4f8 <col:41> '<dependent type>' contains-errors lvalue
    |   |       | `-GotoStmt 0x15480a598 <line:69:4, col:9> 'q_exit' 0x15480a548
    |   |       `-IfStmt 0x153031eb8 <line:71:7, line:76:2>
    |   |         |-BinaryOperator 0x153031cd0 <line:71:11, col:46> 'int' '||'
    |   |         | |-BinaryOperator 0x153031c38 <col:11, col:26> 'int' '=='
    |   |         | | |-ImplicitCastExpr 0x153031c20 <col:11> 'int' <LValueToRValue>
    |   |         | | | `-DeclRefExpr 0x15480a5d0 <col:11> 'int' lvalue Var 0x15480a248 'targetq_num' 'int'
    |   |         | | `-IntegerLiteral 0x153031c00 <col:26> 'int' 1
    |   |         | `-BinaryOperator 0x153031cb0 <col:31, col:46> 'int' '=='
    |   |         |   |-ImplicitCastExpr 0x153031c98 <col:31> 'int' <LValueToRValue>
    |   |         |   | `-DeclRefExpr 0x153031c58 <col:31> 'int' lvalue Var 0x15480a248 'targetq_num' 'int'
    |   |         |   `-IntegerLiteral 0x153031c78 <col:46> 'int' 2
    |   |         `-CompoundStmt 0x153031ea0 <col:49, line:76:2>
    |   |           `-IfStmt 0x153031e80 <line:73:4, line:75:4>
    |   |             |-RecoveryExpr 0x153031e10 <line:73:8, col:64> '_Bool' contains-errors
    |   |             `-CompoundStmt 0x153031e70 <col:72, line:75:4>
    |   |-BreakStmt 0x153031f68 <line:79:5>
    |   `-DefaultStmt 0x153031f78 <line:81:3, line:82:5>
    |     `-BreakStmt 0x153031f70 <col:5>
    `-LabelStmt 0x153032020 <line:86:2, line:87:10> 'q_exit'
      `-ReturnStmt 0x153032010 <col:3, col:10>
        `-IntegerLiteral 0x153031ff0 <col:10> 'int' 0
