`-FunctionDecl 0x15a928288  line:1:12 invalid bcf_index 'int *(int *, int)'
  |-ParmVarDecl 0x15a928128 <col:22, col:31> col:31 invalid fp 'int *'
  |-ParmVarDecl 0x15a9281a8 <col:35, col:39> col:39 used min_shift 'int'
  `-CompoundStmt 0x15a943338 <line:2:1, line:32:1>
    |-DeclStmt 0x15a9283c0 <line:3:5, col:15>
    | `-VarDecl 0x15a928358 <col:5, col:9> col:9 used n_lvls 'int'
    |-DeclStmt 0x15a9284d0 <line:7:5, col:10>
    | `-VarDecl 0x15a928468 <col:5, col:9> col:9 used r 'int'
    |-IfStmt 0x15a928788 <line:9:5, col:22>
    | |-UnaryOperator 0x15a928728 <col:10, col:11> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x15a928710 <col:11> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x15a9286f0 <col:11> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x15a928778 <col:15, col:22>
    |   `-RecoveryExpr 0x15a928758 <col:22> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x15a941888 <line:10:5, col:17>
    | `-VarDecl 0x15a941800 <col:5, col:16> col:9 used nids 'int' cinit
    |   `-IntegerLiteral 0x15a941868 <col:16> 'int' 0
    |-BinaryOperator 0x15a941b10 <line:11:5, col:56> 'int' contains-errors '='
    | |-DeclRefExpr 0x15a9418a0 <col:5> 'int' lvalue Var 0x15a928358 'n_lvls' 'int'
    | `-CallExpr 0x15a941ad0 <col:14, col:56> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x15a9419a0 <col:14> 'int ()' Function 0x15a9418e8 'idx_calc_n_lvls_ids' 'int ()'
    |   |-RecoveryExpr 0x15a941ab0 <col:34> '<dependent type>' contains-errors lvalue
    |   |-DeclRefExpr 0x15a9419d8 <col:37> 'int' lvalue ParmVar 0x15a9281a8 'min_shift' 'int'
    |   |-IntegerLiteral 0x15a9419f8 <col:48> 'int' 0
    |   `-UnaryOperator 0x15a941a38 <col:51, col:52> 'int *' prefix '&' cannot overflow
    |     `-DeclRefExpr 0x15a941a18 <col:52> 'int' lvalue Var 0x15a941800 'nids' 'int'
    |-IfStmt 0x15a941f50 <line:13:5, col:20>
    | |-RecoveryExpr 0x15a941ec8 <col:9, col:10> '_Bool' contains-errors
    | `-GotoStmt 0x15a941f38 <col:15, col:20> 'fail' 0x15a941ee8
    |-IfStmt 0x15a942110 <line:15:5, col:18>
    | |-RecoveryExpr 0x15a9420d8 <col:9, col:10> '_Bool' contains-errors
    | `-GotoStmt 0x15a9420f8 <col:13, col:18> 'fail' 0x15a941ee8
    |-WhileStmt 0x15a942650 <line:16:5, line:20:5>
    | |-RecoveryExpr 0x15a942290 <line:16:12, col:40> '_Bool' contains-errors
    | `-CompoundStmt 0x15a942630 <col:43, line:20:5>
    |   |-DeclStmt 0x15a942330 <line:17:9, col:16>
    |   | `-VarDecl 0x15a9422c8 <col:9, col:13> col:13 used ret 'int'
    |   `-IfStmt 0x15a942610 <line:19:9, col:27>
    |     |-BinaryOperator 0x15a9425d8 <col:13, col:19> 'int' '<'
    |     | |-ImplicitCastExpr 0x15a9425c0 <col:13> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x15a942580 <col:13> 'int' lvalue Var 0x15a9422c8 'ret' 'int'
    |     | `-IntegerLiteral 0x15a9425a0 <col:19> 'int' 0
    |     `-GotoStmt 0x15a9425f8 <col:22, col:27> 'fail' 0x15a941ee8
    |-IfStmt 0x15a942718 <line:21:5, col:22>
    | |-BinaryOperator 0x15a9426e0 <col:9, col:14> 'int' '<'
    | | |-ImplicitCastExpr 0x15a9426c8 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x15a942670 <col:9> 'int' lvalue Var 0x15a928468 'r' 'int'
    | | `-UnaryOperator 0x15a9426b0 <col:13, col:14> 'int' prefix '-'
    | |   `-IntegerLiteral 0x15a942690 <col:14> 'int' 1
    | `-GotoStmt 0x15a942700 <col:17, col:22> 'fail' 0x15a941ee8
    `-LabelStmt 0x15a9432d8 <line:27:2, col:6> 'fail'
      `-NullStmt 0x15a9432d0 <col:6>
