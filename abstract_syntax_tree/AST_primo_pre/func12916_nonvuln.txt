`-FunctionDecl 0x128128358  line:1:1 invalid onig_scan_unsigned_number 'int (int **, const int *, int)'
  |-ParmVarDecl 0x128128160 <col:27, col:35> col:35 invalid src 'int **'
  |-ParmVarDecl 0x1281281e0 <col:40, col:53> col:53 invalid end 'const int *'
  |-ParmVarDecl 0x128128260 <col:58, col:71> col:71 invalid enc 'int'
  `-CompoundStmt 0x128142188 <line:2:1, line:25:1>
    |-DeclStmt 0x128128530 <line:3:3, col:24>
    | |-VarDecl 0x128128430 <col:3, col:16> col:16 used num 'unsigned int'
    | `-VarDecl 0x1281284b0 <col:3, col:21> col:21 used val 'unsigned int'
    |-BinaryOperator 0x128128608 <line:8:3, col:9> 'unsigned int' '='
    | |-DeclRefExpr 0x1281285b0 <col:3> 'unsigned int' lvalue Var 0x128128430 'num' 'unsigned int'
    | `-ImplicitCastExpr 0x1281285f0 <col:9> 'unsigned int' <IntegralCast>
    |   `-IntegerLiteral 0x1281285d0 <col:9> 'int' 0
    |-WhileStmt 0x128141fe0 <line:9:3, line:22:3>
    | |-UnaryOperator 0x1281286a8 <line:9:10, col:11> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x128128690 <col:11> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x128128670 <col:11> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x128141fc0 <col:17, line:22:3>
    |   |-CallExpr 0x128141938 <line:10:5, col:13> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x1281418b8 <col:5> 'int ()' Function 0x128141800 'PFETCH' 'int ()'
    |   | `-RecoveryExpr 0x128141918 <col:12> '<dependent type>' contains-errors lvalue
    |   `-IfStmt 0x128141f90 <line:11:5, line:21:5> has_else
    |     |-CallExpr 0x128141ae8 <line:11:9, col:37> '<dependent type>' contains-errors
    |     | |-DeclRefExpr 0x128141a40 <col:9> 'int ()' Function 0x128141988 'ONIGENC_IS_CODE_DIGIT' 'int ()'
    |     | |-RecoveryExpr 0x128141a60 <col:31> '<dependent type>' contains-errors lvalue
    |     | `-RecoveryExpr 0x128141ac8 <col:36> '<dependent type>' contains-errors lvalue
    |     |-CompoundStmt 0x128141ed8 <col:40, line:17:5>
    |     | |-IfStmt 0x128141d90 <line:13:7, line:14:10>
    |     | | |-RecoveryExpr 0x128141d28 <line:13:11, col:42> '_Bool' contains-errors
    |     | | `-ReturnStmt 0x128141d80 <line:14:2, col:10>
    |     | |   `-UnaryOperator 0x128141d68 <col:9, col:10> 'int' prefix '-'
    |     | |     `-IntegerLiteral 0x128141d48 <col:10> 'int' 1
    |     | `-BinaryOperator 0x128141eb8 <line:16:7, col:24> 'unsigned int' '='
    |     |   |-DeclRefExpr 0x128141db0 <col:7> 'unsigned int' lvalue Var 0x128128430 'num' 'unsigned int'
    |     |   `-BinaryOperator 0x128141e98 <col:13, col:24> 'unsigned int' '+'
    |     |     |-BinaryOperator 0x128141e40 <col:13, col:19> 'unsigned int' '*'
    |     |     | |-ImplicitCastExpr 0x128141e10 <col:13> 'unsigned int' <LValueToRValue>
    |     |     | | `-DeclRefExpr 0x128141dd0 <col:13> 'unsigned int' lvalue Var 0x128128430 'num' 'unsigned int'
    |     |     | `-ImplicitCastExpr 0x128141e28 <col:19> 'unsigned int' <IntegralCast>
    |     |     |   `-IntegerLiteral 0x128141df0 <col:19> 'int' 10
    |     |     `-ImplicitCastExpr 0x128141e80 <col:24> 'unsigned int' <LValueToRValue>
    |     |       `-DeclRefExpr 0x128141e60 <col:24> 'unsigned int' lvalue Var 0x1281284b0 'val' 'unsigned int'
    |     `-CompoundStmt 0x128141f70 <line:18:10, line:21:5>
    |       |-ImplicitCastExpr 0x128141f50 <line:19:7> 'int (*)()' <FunctionToPointerDecay>
    |       | `-DeclRefExpr 0x128141ef8 <col:7> 'int ()' Function 0x128141800 'PFETCH' 'int ()'
    |       `-BreakStmt 0x128141f68 <line:20:7>
    |-BinaryOperator 0x128142108 <line:23:3, col:10> '<dependent type>' contains-errors '='
    | |-UnaryOperator 0x1281420d0 <col:3, col:4> '<dependent type>' contains-errors prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x1281420b8 <col:4> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x128142000 <col:4> '<dependent type>' contains-errors lvalue
    | `-RecoveryExpr 0x1281420e8 <col:10> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x128142178 <line:24:3, col:10>
      `-ImplicitCastExpr 0x128142160 <col:10> 'int' <IntegralCast>
        `-ImplicitCastExpr 0x128142148 <col:10> 'unsigned int' <LValueToRValue>
          `-DeclRefExpr 0x128142128 <col:10> 'unsigned int' lvalue Var 0x128128430 'num' 'unsigned int'
