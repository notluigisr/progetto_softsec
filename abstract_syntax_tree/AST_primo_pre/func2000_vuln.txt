`-FunctionDecl 0x12f00dd98  line:1:1 ipcp_store_vr_results 'int (void)'
  `-CompoundStmt 0x12f029398 <line:2:1, line:65:1>
    |-CallExpr 0x12f00e050 <line:5:3, col:43> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x12f00dfd0 <col:3> 'int ()' Function 0x12f00df18 'FOR_EACH_FUNCTION_WITH_GIMPLE_BODY' 'int ()'
    | `-RecoveryExpr 0x12f00e030 <col:39> '<dependent type>' contains-errors lvalue
    `-CompoundStmt 0x12f029360 <line:6:5, line:64:5>
      |-IfStmt 0x12f0287f8 <line:10:7, line:17:2>
      | |-UnaryOperator 0x12f028450 <line:10:11, col:48> '<dependent type>' contains-errors prefix '!' cannot overflow
      | | `-CallExpr 0x12f028420 <col:12, col:48> '<dependent type>' contains-errors
      | |   |-DeclRefExpr 0x12f00e2b0 <col:12> 'int ()' Function 0x12f00e1f8 'opt_for_fn' 'int ()'
      | |   |-CXXDependentScopeMemberExpr 0x12f00e3b0 <col:24, col:30> '<dependent type>' contains-errors lvalue ->decl
      | |   | `-RecoveryExpr 0x12f00e390 <col:24> '<dependent type>' contains-errors lvalue
      | |   `-RecoveryExpr 0x12f028400 <col:36> '<dependent type>' contains-errors lvalue
      | `-CompoundStmt 0x12f0287e0 <line:11:2, line:17:2>
      |   `-IfStmt 0x12f0287c0 <line:12:4, line:15:21>
      |     |-RecoveryExpr 0x12f028480 <line:12:8> '<dependent type>' contains-errors lvalue
      |     `-CallExpr 0x12f028788 <line:13:6, line:15:21> '<dependent type>' contains-errors
      |       |-DeclRefExpr 0x12f028580 <line:13:6> 'int ()' Function 0x12f0284c8 'fprintf' 'int ()'
      |       |-RecoveryExpr 0x12f0286e0 <col:15> '<dependent type>' contains-errors lvalue
      |       |-StringLiteral 0x12f028600 <col:26, line:14:8> 'char[7]' lvalue "STRSTR"
      |       `-CallExpr 0x12f028768 <line:15:8, col:20> '<dependent type>' contains-errors
      |         `-CXXDependentScopeMemberExpr 0x12f028720 <col:8, col:14> '<dependent type>' contains-errors lvalue ->name
      |           `-RecoveryExpr 0x12f028700 <col:8> '<dependent type>' contains-errors lvalue
      |-DeclStmt 0x12f028aa0 <line:25:7, col:50>
      | `-VarDecl 0x12f028938 <col:7, col:16> col:16 used count 'unsigned int'
      |-ForStmt 0x12f028de8 <line:26:7, line:35:2>
      | |-DeclStmt 0x12f028b70 <line:26:12, col:26>
      | | `-VarDecl 0x12f028ad0 <col:12, col:25> col:21 used i 'unsigned int' cinit
      | |   `-ImplicitCastExpr 0x12f028b58 <col:25> 'unsigned int' <IntegralCast>
      | |     `-IntegerLiteral 0x12f028b38 <col:25> 'int' 0
      | |-<<<NULL>>>
      | |-BinaryOperator 0x12f028bf8 <col:28, col:32> 'int' '<'
      | | |-ImplicitCastExpr 0x12f028bc8 <col:28> 'unsigned int' <LValueToRValue>
      | | | `-DeclRefExpr 0x12f028b88 <col:28> 'unsigned int' lvalue Var 0x12f028ad0 'i' 'unsigned int'
      | | `-ImplicitCastExpr 0x12f028be0 <col:32> 'unsigned int' <LValueToRValue>
      | |   `-DeclRefExpr 0x12f028ba8 <col:32> 'unsigned int' lvalue Var 0x12f028938 'count' 'unsigned int'
      | |-UnaryOperator 0x12f028c38 <col:39, col:40> 'unsigned int' postfix '++'
      | | `-DeclRefExpr 0x12f028c18 <col:39> 'unsigned int' lvalue Var 0x12f028ad0 'i' 'unsigned int'
      | `-CompoundStmt 0x12f028dd0 <line:27:2, line:35:2>
      |   `-IfStmt 0x12f028db0 <line:29:4, line:34:6>
      |     |-RecoveryExpr 0x12f028d70 <line:29:8, line:30:40> '_Bool' contains-errors
      |     `-CompoundStmt 0x12f028d98 <line:31:6, line:34:6>
      |       `-BreakStmt 0x12f028d90 <line:33:8>
      |-CallExpr 0x12f028f88 <line:39:7, col:39> 'int'
      | `-ImplicitCastExpr 0x12f028f70 <col:7> 'int (*)()' <FunctionToPointerDecay>
      |   `-DeclRefExpr 0x12f028f20 <col:7> 'int ()' Function 0x12f028e68 'ipcp_transformation_initialize' 'int ()'
      `-ForStmt 0x12f029328 <line:43:7, line:63:2>
        |-DeclStmt 0x12f029180 <line:43:12, col:26>
        | `-VarDecl 0x12f0290e0 <col:12, col:25> col:21 used i 'unsigned int' cinit
        |   `-ImplicitCastExpr 0x12f029168 <col:25> 'unsigned int' <IntegralCast>
        |     `-IntegerLiteral 0x12f029148 <col:25> 'int' 0
        |-<<<NULL>>>
        |-BinaryOperator 0x12f029208 <col:28, col:32> 'int' '<'
        | |-ImplicitCastExpr 0x12f0291d8 <col:28> 'unsigned int' <LValueToRValue>
        | | `-DeclRefExpr 0x12f029198 <col:28> 'unsigned int' lvalue Var 0x12f0290e0 'i' 'unsigned int'
        | `-ImplicitCastExpr 0x12f0291f0 <col:32> 'unsigned int' <LValueToRValue>
        |   `-DeclRefExpr 0x12f0291b8 <col:32> 'unsigned int' lvalue Var 0x12f028938 'count' 'unsigned int'
        |-UnaryOperator 0x12f029248 <col:39, col:40> 'unsigned int' postfix '++'
        | `-DeclRefExpr 0x12f029228 <col:39> 'unsigned int' lvalue Var 0x12f0290e0 'i' 'unsigned int'
        `-CompoundStmt 0x12f029310 <line:44:2, line:63:2>
          `-IfStmt 0x12f0292e0 <line:48:4, line:61:6> has_else
            |-RecoveryExpr 0x12f0292a0 <line:48:8, line:49:40> '_Bool' contains-errors
            |-CompoundStmt 0x12f0292c0 <line:50:6, line:55:6>
            `-CompoundStmt 0x12f0292d0 <line:57:6, line:61:6>
