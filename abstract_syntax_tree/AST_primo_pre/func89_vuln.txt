`-FunctionDecl 0x142128b18  line:1:1 invalid ns_nprint 'int (int *, const char *, const char *)'
  |-ParmVarDecl 0x142128928 <col:11, col:31> col:31 invalid ndo 'int *'
  |-ParmVarDecl 0x1421289a8 <line:2:11, col:34> col:34 used cp 'const char *' register
  |-ParmVarDecl 0x142128a28 <col:38, col:61> col:61 used bp 'const char *' register
  `-CompoundStmt 0x142144598 <line:3:1, line:77:1>
    |-DeclStmt 0x142128c58 <line:4:2, col:21>
    | `-VarDecl 0x142128bf0 <col:2, col:17> col:17 referenced invalid i 'int' register
    |-DeclStmt 0x142128d28 <line:5:2, col:34>
    | `-VarDecl 0x142128c88 <col:2, col:30> col:25 used rp 'const char *' register cinit
    |   `-RecoveryExpr 0x142128d08 <col:30> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x142128de0 <line:6:2, col:27>
    | `-VarDecl 0x142128d58 <col:2, col:26> col:15 used compress 'int' register cinit
    |   `-IntegerLiteral 0x142128dc0 <col:26> 'int' 0
    |-DeclStmt 0x142128e78 <line:7:2, col:21>
    | `-VarDecl 0x142128e10 <col:2, col:6> col:6 used chars_processed 'int'
    |-DeclStmt 0x142128f10 <line:8:2, col:9>
    | `-VarDecl 0x142128ea8 <col:2, col:6> col:6 used elt 'int'
    |-DeclStmt 0x142142088 <line:9:2, col:39>
    | `-VarDecl 0x142128f40 <col:2, col:37> col:6 used data_size 'int' cinit
    |   `-BinaryOperator 0x142142068 <col:18, col:37> '<dependent type>' contains-errors '-'
    |     |-CXXDependentScopeMemberExpr 0x142142000 <col:18, col:23> '<dependent type>' contains-errors lvalue ->ndo_snapend
    |     | `-RecoveryExpr 0x142128fa8 <col:18> '<dependent type>' contains-errors lvalue
    |     `-DeclRefExpr 0x142142048 <col:37> 'const char *' lvalue ParmVar 0x142128a28 'bp' 'const char *'
    |-BinaryOperator 0x1421425b8 <line:15:2, col:20> 'int' '='
    | |-DeclRefExpr 0x142142578 <col:2> 'int' lvalue Var 0x142128e10 'chars_processed' 'int'
    | `-IntegerLiteral 0x142142598 <col:20> 'int' 1
    |-IfStmt 0x142142870 <line:16:2, line:19:2>
    | |-RecoveryExpr 0x1421426d8 <line:16:6, col:36> '_Bool' contains-errors
    | `-CompoundStmt 0x142142850 <col:48, line:19:2>
    |   |-BinaryOperator 0x142142738 <line:17:3, col:14> 'int' '='
    |   | |-DeclRefExpr 0x1421426f8 <col:3> 'int' lvalue Var 0x142128d58 'compress' 'int'
    |   | `-IntegerLiteral 0x142142718 <col:14> 'int' 0
    |   `-BinaryOperator 0x142142830 <line:18:3, col:13> 'const char *' contains-errors '='
    |     |-DeclRefExpr 0x142142758 <col:3> 'const char *' contains-errors lvalue Var 0x142128c88 'rp' 'const char *'
    |     `-BinaryOperator 0x142142810 <col:8, col:13> '<dependent type>' contains-errors '+'
    |       |-DeclRefExpr 0x142142778 <col:8> 'const char *' lvalue ParmVar 0x1421289a8 'cp' 'const char *'
    |       `-RecoveryExpr 0x1421427f0 <col:13> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x1421444e8 <line:21:2, line:75:24> has_else
    | |-BinaryOperator 0x1421428d0 <line:21:6, col:11> 'int' contains-errors '!='
    | | |-RecoveryExpr 0x142142890 <col:6> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x1421428b0 <col:11> 'int' 0
    | |-WhileStmt 0x142144400 <line:22:3, line:73:3>
    | | |-BinaryOperator 0x1421429b8 <line:22:10, col:25> 'int' contains-errors '&&'
    | | | |-RecoveryExpr 0x1421428f0 <col:10> '<dependent type>' contains-errors lvalue
    | | | `-BinaryOperator 0x142142998 <col:15, col:25> 'int' contains-errors '<'
    | | |   |-DeclRefExpr 0x142142910 <col:15> 'const char *' lvalue ParmVar 0x1421289a8 'cp' 'const char *'
    | | |   `-CXXDependentScopeMemberExpr 0x142142950 <col:20, col:25> '<dependent type>' contains-errors lvalue ->ndo_snapend
    | | |     `-RecoveryExpr 0x142142930 <col:20> '<dependent type>' contains-errors lvalue
    | | `-CompoundStmt 0x142143fc0 <col:38, line:73:3>
    | |   |-IfStmt 0x142143548 <line:23:4, line:44:4>
    | |   | |-RecoveryExpr 0x142142a48 <line:23:8, col:28> '_Bool' contains-errors
    | |   | `-CompoundStmt 0x142143508 <col:40, line:44:4>
    | |   |   |-IfStmt 0x142142bf0 <line:24:5, line:27:5>
    | |   |   | |-UnaryOperator 0x142142aa0 <line:24:9, col:10> 'int' prefix '!' cannot overflow
    | |   |   | | `-ImplicitCastExpr 0x142142a88 <col:10> 'int' <LValueToRValue>
    | |   |   | |   `-DeclRefExpr 0x142142a68 <col:10> 'int' lvalue Var 0x142128d58 'compress' 'int'
    | |   |   | `-CompoundStmt 0x142142bd0 <col:20, line:27:5>
    | |   |   |   |-BinaryOperator 0x142142b50 <line:25:6, col:16> 'const char *' contains-errors '='
    | |   |   |   | |-DeclRefExpr 0x142142ab8 <col:6> 'const char *' contains-errors lvalue Var 0x142128c88 'rp' 'const char *'
    | |   |   |   | `-BinaryOperator 0x142142b30 <col:11, col:16> 'const char *' '+'
    | |   |   |   |   |-ImplicitCastExpr 0x142142b18 <col:11> 'const char *' <LValueToRValue>
    | |   |   |   |   | `-DeclRefExpr 0x142142ad8 <col:11> 'const char *' lvalue ParmVar 0x1421289a8 'cp' 'const char *'
    | |   |   |   |   `-IntegerLiteral 0x142142af8 <col:16> 'int' 1
    | |   |   |   `-BinaryOperator 0x142142bb0 <line:26:6, col:17> 'int' '='
    | |   |   |     |-DeclRefExpr 0x142142b70 <col:6> 'int' lvalue Var 0x142128d58 'compress' 'int'
    | |   |   |     `-IntegerLiteral 0x142142b90 <col:17> 'int' 1
    | |   |   |-BinaryOperator 0x142142f18 <line:30:5, col:41> 'const char *' contains-errors '='
    | |   |   | |-DeclRefExpr 0x142142d48 <col:5> 'const char *' lvalue ParmVar 0x1421289a8 'cp' 'const char *'
    | |   |   | `-BinaryOperator 0x142142ef8 <col:10, col:41> '<dependent type>' contains-errors '+'
    | |   |   |   |-DeclRefExpr 0x142142d68 <col:10> 'const char *' lvalue ParmVar 0x142128a28 'bp' 'const char *'
    | |   |   |   `-ParenExpr 0x142142ed8 <col:15, col:41> '<dependent type>' contains-errors
    | |   |   |     `-BinaryOperator 0x142142eb8 <col:16, col:35> '<dependent type>' contains-errors '&'
    | |   |   |       |-ParenExpr 0x142142e78 <col:16, col:31> '<dependent type>' contains-errors
    | |   |   |       | `-BinaryOperator 0x142142e58 <col:17, col:29> '<dependent type>' contains-errors '|'
    | |   |   |       |   |-ParenExpr 0x142142de8 <col:17, col:24> '<dependent type>' contains-errors
    | |   |   |       |   | `-BinaryOperator 0x142142dc8 <col:18, col:23> '<dependent type>' contains-errors '<<'
    | |   |   |       |   |   |-RecoveryExpr 0x142142d88 <col:18> '<dependent type>' contains-errors lvalue
    | |   |   |       |   |   `-IntegerLiteral 0x142142da8 <col:23> 'int' 8
    | |   |   |       |   `-UnaryOperator 0x142142e40 <col:28, col:29> 'const char' lvalue prefix '*' cannot overflow
    | |   |   |       |     `-ImplicitCastExpr 0x142142e28 <col:29> 'const char *' <LValueToRValue>
    | |   |   |       |       `-DeclRefExpr 0x142142e08 <col:29> 'const char *' lvalue ParmVar 0x1421289a8 'cp' 'const char *'
    | |   |   |       `-IntegerLiteral 0x142142e98 <col:35> 'int' 16383
    | |   |   |-BinaryOperator 0x1421431f8 <line:35:5, col:12> '<dependent type>' contains-errors '='
    | |   |   | |-RecoveryExpr 0x142143180 <col:5> '<dependent type>' contains-errors lvalue
    | |   |   | | `-DeclRefExpr 0x142143160 <col:5> 'int' lvalue Var 0x142128bf0 'i' 'int'
    | |   |   | `-UnaryOperator 0x1421431e0 <col:9, col:12> 'const char' lvalue prefix '*' cannot overflow
    | |   |   |   `-UnaryOperator 0x1421431c8 <col:10, col:12> 'const char *' postfix '++'
    | |   |   |     `-DeclRefExpr 0x1421431a8 <col:10> 'const char *' lvalue ParmVar 0x1421289a8 'cp' 'const char *'
    | |   |   |-UnaryOperator 0x142143238 <line:36:5, col:20> 'int' postfix '++'
    | |   |   | `-DeclRefExpr 0x142143218 <col:5> 'int' lvalue Var 0x142128e10 'chars_processed' 'int'
    | |   |   |-IfStmt 0x1421434e0 <line:39:5, line:42:5>
    | |   |   | |-BinaryOperator 0x1421432c0 <line:39:9, col:28> 'int' contains-errors '>='
    | |   |   | | |-ImplicitCastExpr 0x142143290 <col:9> 'int' <LValueToRValue>
    | |   |   | | | `-DeclRefExpr 0x142143250 <col:9> 'int' lvalue Var 0x142128e10 'chars_processed' 'int'
    | |   |   | | `-ImplicitCastExpr 0x1421432a8 <col:28> 'int' contains-errors <LValueToRValue>
    | |   |   | |   `-DeclRefExpr 0x142143270 <col:28> 'int' contains-errors lvalue Var 0x142128f40 'data_size' 'int'
    | |   |   | `-CompoundStmt 0x1421434c8 <col:39, line:42:5>
    | |   |   |   `-CallExpr 0x1421434a0 <line:40:6, col:27> '<dependent type>' contains-errors
    | |   |   |     |-DeclRefExpr 0x1421433c0 <col:6> 'int ()' Function 0x142143308 'ND_PRINT' 'int ()'
    | |   |   |     `-ParenExpr 0x142143480 <col:15, col:26> 'char[4]' contains-errors
    | |   |   |       `-BinaryOperator 0x142143460 <col:16, col:21> 'char[4]' contains-errors ','
    | |   |   |         |-RecoveryExpr 0x1421433e0 <col:16> '<dependent type>' contains-errors lvalue
    | |   |   |         `-StringLiteral 0x142143440 <col:21> 'char[4]' lvalue "STR"
    | |   |   `-ContinueStmt 0x142143500 <line:43:5>
    | |   |-IfStmt 0x142143b18 <line:45:4, line:60:4> has_else
    | |   | |-RecoveryExpr 0x142143588 <line:45:8, col:28> '_Bool' contains-errors
    | |   | |-CompoundStmt 0x142143928 <col:40, line:57:4>
    | |   | | `-SwitchStmt 0x142143620 <line:47:5, line:56:5>
    | |   | |   |-ImplicitCastExpr 0x142143608 <line:47:12> 'int' <LValueToRValue>
    | |   | |   | `-DeclRefExpr 0x1421435e8 <col:12> 'int' lvalue Var 0x142128ea8 'elt' 'int'
    | |   | |   `-CompoundStmt 0x142143908 <col:17, line:56:5>
    | |   | |     |-BreakStmt 0x1421437d8 <line:51:6>
    | |   | |     `-DefaultStmt 0x1421438e8 <line:52:5, line:54:32>
    | |   | |       `-CallExpr 0x1421438c0 <col:6, col:32> '<dependent type>' contains-errors
    | |   | |         |-DeclRefExpr 0x1421437e0 <col:6> 'int ()' Function 0x142143308 'ND_PRINT' 'int ()'
    | |   | |         `-ParenExpr 0x1421438a0 <col:15, col:31> 'int' contains-errors
    | |   | |           `-BinaryOperator 0x142143880 <col:16, col:28> 'int' contains-errors ','
    | |   | |             |-BinaryOperator 0x142143840 <col:16, col:21> 'char[4]' contains-errors ','
    | |   | |             | |-RecoveryExpr 0x142143800 <col:16> '<dependent type>' contains-errors lvalue
    | |   | |             | `-StringLiteral 0x142143820 <col:21> 'char[4]' lvalue "STR"
    | |   | |             `-DeclRefExpr 0x142143860 <col:28> 'int' lvalue Var 0x142128ea8 'elt' 'int'
    | |   | `-CompoundStmt 0x142143b08 <line:57:11, line:60:4>
    | |   |-CallExpr 0x142143c28 <line:64:4, col:25> '<dependent type>' contains-errors
    | |   | |-DeclRefExpr 0x142143b88 <col:4> 'int ()' Function 0x142143308 'ND_PRINT' 'int ()'
    | |   | `-ParenExpr 0x142143c08 <col:13, col:24> 'char[4]' contains-errors
    | |   |   `-BinaryOperator 0x142143be8 <col:14, col:19> 'char[4]' contains-errors ','
    | |   |     |-RecoveryExpr 0x142143ba8 <col:14> '<dependent type>' contains-errors lvalue
    | |   |     `-StringLiteral 0x142143bc8 <col:19> 'char[4]' lvalue "STR"
    | |   |-BinaryOperator 0x142143ed8 <line:69:4, col:11> '<dependent type>' contains-errors '='
    | |   | |-RecoveryExpr 0x142143e60 <col:4> '<dependent type>' contains-errors lvalue
    | |   | | `-DeclRefExpr 0x142143e40 <col:4> 'int' lvalue Var 0x142128bf0 'i' 'int'
    | |   | `-UnaryOperator 0x142143ec0 <col:8, col:11> 'const char' lvalue prefix '*' cannot overflow
    | |   |   `-UnaryOperator 0x142143ea8 <col:9, col:11> 'const char *' postfix '++'
    | |   |     `-DeclRefExpr 0x142143e88 <col:9> 'const char *' lvalue ParmVar 0x1421289a8 'cp' 'const char *'
    | |   `-UnaryOperator 0x142143f18 <line:70:4, col:19> 'int' postfix '++'
    | |     `-DeclRefExpr 0x142143ef8 <col:4> 'int' lvalue Var 0x142128e10 'chars_processed' 'int'
    | `-CallExpr 0x1421444c0 <line:75:3, col:24> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x142144420 <col:3> 'int ()' Function 0x142143308 'ND_PRINT' 'int ()'
    |   `-ParenExpr 0x1421444a0 <col:12, col:23> 'char[4]' contains-errors
    |     `-BinaryOperator 0x142144480 <col:13, col:18> 'char[4]' contains-errors ','
    |       |-RecoveryExpr 0x142144440 <col:13> '<dependent type>' contains-errors lvalue
    |       `-StringLiteral 0x142144460 <col:18> 'char[4]' lvalue "STR"
    `-ReturnStmt 0x142144588 <line:76:2, col:12>
      `-ImplicitCastExpr 0x142144570 <col:9, col:12> 'int' contains-errors <PointerToIntegral>
        `-ImplicitCastExpr 0x142144558 <col:9, col:12> 'const char *' contains-errors <LValueToRValue>
          `-ParenExpr 0x142144538 <col:9, col:12> 'const char *' contains-errors lvalue
            `-DeclRefExpr 0x142144518 <col:10> 'const char *' contains-errors lvalue Var 0x142128c88 'rp' 'const char *'
