`-FunctionDecl 0x148928288  line:1:7 invalid redisProtocolToLuaType 'char *(int *, char *)'
  |-ParmVarDecl 0x148928128 <col:30, col:41> col:41 invalid lua 'int *'
  |-ParmVarDecl 0x1489281a8 <col:46, col:52> col:52 used reply 'char *'
  `-CompoundStmt 0x14a0084b0 <col:59, line:17:1>
    |-DeclStmt 0x1489283f8 <line:2:5, col:20>
    | `-VarDecl 0x148928358 <col:5, col:15> col:11 used p 'char *' cinit
    |   `-ImplicitCastExpr 0x1489283e0 <col:15> 'char *' <LValueToRValue>
    |     `-DeclRefExpr 0x1489283c0 <col:15> 'char *' lvalue ParmVar 0x1489281a8 'reply' 'char *'
    |-SwitchStmt 0x148928490 <line:4:5, line:15:5>
    | |-ImplicitCastExpr 0x148928478 <line:4:12, col:13> 'int' <IntegralCast>
    | | `-ImplicitCastExpr 0x148928460 <col:12, col:13> 'char' <LValueToRValue>
    | |   `-UnaryOperator 0x148928448 <col:12, col:13> 'char' lvalue prefix '*' cannot overflow
    | |     `-ImplicitCastExpr 0x148928430 <col:13> 'char *' <LValueToRValue>
    | |       `-DeclRefExpr 0x148928410 <col:13> 'char *' lvalue Var 0x148928358 'p' 'char *'
    | `-CompoundStmt 0x14a0083b8 <col:16, line:15:5>
    |   |-CaseStmt 0x1489284e8 <line:5:5, col:55>
    |   | |-ConstantExpr 0x1489284d0 <col:10> 'int'
    |   | | `-CharacterLiteral 0x1489284b8 <col:10> 'int' 58
    |   | `-BinaryOperator 0x148928720 <col:15, col:55> 'char *' contains-errors '='
    |   |   |-DeclRefExpr 0x148928510 <col:15> 'char *' lvalue Var 0x148928358 'p' 'char *'
    |   |   `-CallExpr 0x1489286f0 <col:19, col:55> '<dependent type>' contains-errors
    |   |     |-DeclRefExpr 0x148928690 <col:19> 'int ()' Function 0x1489285d8 'redisProtocolToLuaType_Int' 'int ()'
    |   |     |-RecoveryExpr 0x1489286b0 <col:46> '<dependent type>' contains-errors lvalue
    |   |     `-DeclRefExpr 0x1489286d0 <col:50> 'char *' lvalue ParmVar 0x1489281a8 'reply' 'char *'
    |   |-BreakStmt 0x148928740 <col:58>
    |   |-CaseStmt 0x148928778 <line:6:5, col:56>
    |   | |-ConstantExpr 0x148928760 <col:10> 'int'
    |   | | `-CharacterLiteral 0x148928748 <col:10> 'int' 36
    |   | `-BinaryOperator 0x149808348 <col:15, col:56> 'char *' contains-errors '='
    |   |   |-DeclRefExpr 0x1489287a0 <col:15> 'char *' lvalue Var 0x148928358 'p' 'char *'
    |   |   `-CallExpr 0x149808318 <col:19, col:56> '<dependent type>' contains-errors
    |   |     |-DeclRefExpr 0x1498082b8 <col:19> 'int ()' Function 0x149808200 'redisProtocolToLuaType_Bulk' 'int ()'
    |   |     |-RecoveryExpr 0x1498082d8 <col:47> '<dependent type>' contains-errors lvalue
    |   |     `-DeclRefExpr 0x1498082f8 <col:51> 'char *' lvalue ParmVar 0x1489281a8 'reply' 'char *'
    |   |-BreakStmt 0x149808368 <col:59>
    |   |-CaseStmt 0x1498083a0 <line:7:5, col:58>
    |   | |-ConstantExpr 0x149808388 <col:10> 'int'
    |   | | `-CharacterLiteral 0x149808370 <col:10> 'int' 43
    |   | `-BinaryOperator 0x149808558 <col:15, col:58> 'char *' contains-errors '='
    |   |   |-DeclRefExpr 0x1498083c8 <col:15> 'char *' lvalue Var 0x148928358 'p' 'char *'
    |   |   `-CallExpr 0x149808528 <col:19, col:58> '<dependent type>' contains-errors
    |   |     |-DeclRefExpr 0x1498084c8 <col:19> 'int ()' Function 0x149808410 'redisProtocolToLuaType_Status' 'int ()'
    |   |     |-RecoveryExpr 0x1498084e8 <col:49> '<dependent type>' contains-errors lvalue
    |   |     `-DeclRefExpr 0x149808508 <col:53> 'char *' lvalue ParmVar 0x1489281a8 'reply' 'char *'
    |   |-BreakStmt 0x149808578 <col:61>
    |   |-CaseStmt 0x1498085b0 <line:8:5, col:57>
    |   | |-ConstantExpr 0x149808598 <col:10> 'int'
    |   | | `-CharacterLiteral 0x149808580 <col:10> 'int' 45
    |   | `-BinaryOperator 0x149808768 <col:15, col:57> 'char *' contains-errors '='
    |   |   |-DeclRefExpr 0x1498085d8 <col:15> 'char *' lvalue Var 0x148928358 'p' 'char *'
    |   |   `-CallExpr 0x149808738 <col:19, col:57> '<dependent type>' contains-errors
    |   |     |-DeclRefExpr 0x1498086d8 <col:19> 'int ()' Function 0x149808620 'redisProtocolToLuaType_Error' 'int ()'
    |   |     |-RecoveryExpr 0x1498086f8 <col:48> '<dependent type>' contains-errors lvalue
    |   |     `-DeclRefExpr 0x149808718 <col:52> 'char *' lvalue ParmVar 0x1489281a8 'reply' 'char *'
    |   |-BreakStmt 0x149808788 <col:60>
    |   |-CaseStmt 0x1498087c0 <line:9:5, col:64>
    |   | |-ConstantExpr 0x1498087a8 <col:10> 'int'
    |   | | `-CharacterLiteral 0x149808790 <col:10> 'int' 42
    |   | `-BinaryOperator 0x1498089d0 <col:15, col:64> 'char *' contains-errors '='
    |   |   |-DeclRefExpr 0x1498087e8 <col:15> 'char *' lvalue Var 0x148928358 'p' 'char *'
    |   |   `-CallExpr 0x149808998 <col:19, col:64> '<dependent type>' contains-errors
    |   |     |-DeclRefExpr 0x1498088e8 <col:19> 'int ()' Function 0x149808830 'redisProtocolToLuaType_Aggregate' 'int ()'
    |   |     |-RecoveryExpr 0x149808908 <col:52> '<dependent type>' contains-errors lvalue
    |   |     |-DeclRefExpr 0x149808928 <col:56> 'char *' lvalue ParmVar 0x1489281a8 'reply' 'char *'
    |   |     `-UnaryOperator 0x149808980 <col:62, col:63> 'char' lvalue prefix '*' cannot overflow
    |   |       `-ImplicitCastExpr 0x149808968 <col:63> 'char *' <LValueToRValue>
    |   |         `-DeclRefExpr 0x149808948 <col:63> 'char *' lvalue Var 0x148928358 'p' 'char *'
    |   |-BreakStmt 0x1498089f0 <col:67>
    |   |-CaseStmt 0x149808a28 <line:10:5, col:64>
    |   | |-ConstantExpr 0x149808a10 <col:10> 'int'
    |   | | `-CharacterLiteral 0x1498089f8 <col:10> 'int' 37
    |   | `-BinaryOperator 0x149808b58 <col:15, col:64> 'char *' contains-errors '='
    |   |   |-DeclRefExpr 0x149808a50 <col:15> 'char *' lvalue Var 0x148928358 'p' 'char *'
    |   |   `-CallExpr 0x149808b20 <col:19, col:64> '<dependent type>' contains-errors
    |   |     |-DeclRefExpr 0x149808a70 <col:19> 'int ()' Function 0x149808830 'redisProtocolToLuaType_Aggregate' 'int ()'
    |   |     |-RecoveryExpr 0x149808a90 <col:52> '<dependent type>' contains-errors lvalue
    |   |     |-DeclRefExpr 0x149808ab0 <col:56> 'char *' lvalue ParmVar 0x1489281a8 'reply' 'char *'
    |   |     `-UnaryOperator 0x149808b08 <col:62, col:63> 'char' lvalue prefix '*' cannot overflow
    |   |       `-ImplicitCastExpr 0x149808af0 <col:63> 'char *' <LValueToRValue>
    |   |         `-DeclRefExpr 0x149808ad0 <col:63> 'char *' lvalue Var 0x148928358 'p' 'char *'
    |   |-BreakStmt 0x149808b78 <col:67>
    |   |-CaseStmt 0x149808bb0 <line:11:5, col:64>
    |   | |-ConstantExpr 0x149808b98 <col:10> 'int'
    |   | | `-CharacterLiteral 0x149808b80 <col:10> 'int' 126
    |   | `-BinaryOperator 0x149808ce0 <col:15, col:64> 'char *' contains-errors '='
    |   |   |-DeclRefExpr 0x149808bd8 <col:15> 'char *' lvalue Var 0x148928358 'p' 'char *'
    |   |   `-CallExpr 0x149808ca8 <col:19, col:64> '<dependent type>' contains-errors
    |   |     |-DeclRefExpr 0x149808bf8 <col:19> 'int ()' Function 0x149808830 'redisProtocolToLuaType_Aggregate' 'int ()'
    |   |     |-RecoveryExpr 0x149808c18 <col:52> '<dependent type>' contains-errors lvalue
    |   |     |-DeclRefExpr 0x149808c38 <col:56> 'char *' lvalue ParmVar 0x1489281a8 'reply' 'char *'
    |   |     `-UnaryOperator 0x149808c90 <col:62, col:63> 'char' lvalue prefix '*' cannot overflow
    |   |       `-ImplicitCastExpr 0x149808c78 <col:63> 'char *' <LValueToRValue>
    |   |         `-DeclRefExpr 0x149808c58 <col:63> 'char *' lvalue Var 0x148928358 'p' 'char *'
    |   |-BreakStmt 0x149808d00 <col:67>
    |   |-CaseStmt 0x149808d38 <line:12:5, col:56>
    |   | |-ConstantExpr 0x149808d20 <col:10> 'int'
    |   | | `-CharacterLiteral 0x149808d08 <col:10> 'int' 95
    |   | `-BinaryOperator 0x149808ef0 <col:15, col:56> 'char *' contains-errors '='
    |   |   |-DeclRefExpr 0x149808d60 <col:15> 'char *' lvalue Var 0x148928358 'p' 'char *'
    |   |   `-CallExpr 0x149808ec0 <col:19, col:56> '<dependent type>' contains-errors
    |   |     |-DeclRefExpr 0x149808e60 <col:19> 'int ()' Function 0x149808da8 'redisProtocolToLuaType_Null' 'int ()'
    |   |     |-RecoveryExpr 0x149808e80 <col:47> '<dependent type>' contains-errors lvalue
    |   |     `-DeclRefExpr 0x149808ea0 <col:51> 'char *' lvalue ParmVar 0x1489281a8 'reply' 'char *'
    |   |-BreakStmt 0x149808f10 <col:59>
    |   |-CaseStmt 0x149808f48 <line:13:5, col:61>
    |   | |-ConstantExpr 0x149808f30 <col:10> 'int'
    |   | | `-CharacterLiteral 0x149808f18 <col:10> 'int' 35
    |   | `-BinaryOperator 0x149809180 <col:15, col:61> 'char *' contains-errors '='
    |   |   |-DeclRefExpr 0x149808f70 <col:15> 'char *' lvalue Var 0x148928358 'p' 'char *'
    |   |   `-CallExpr 0x149809148 <col:19, col:61> '<dependent type>' contains-errors
    |   |     |-DeclRefExpr 0x149809070 <col:19> 'int ()' Function 0x149808fb8 'redisProtocolToLuaType_Bool' 'int ()'
    |   |     |-RecoveryExpr 0x149809090 <col:47> '<dependent type>' contains-errors lvalue
    |   |     |-DeclRefExpr 0x1498090b0 <col:51> 'char *' lvalue ParmVar 0x1489281a8 'reply' 'char *'
    |   |     `-ArraySubscriptExpr 0x149809128 <col:57, col:60> 'char' lvalue
    |   |       |-ImplicitCastExpr 0x149809110 <col:57> 'char *' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x1498090d0 <col:57> 'char *' lvalue Var 0x148928358 'p' 'char *'
    |   |       `-IntegerLiteral 0x1498090f0 <col:59> 'int' 1
    |   |-BreakStmt 0x1498091a0 <col:64>
    |   |-CaseStmt 0x1498091d8 <line:14:5, col:58>
    |   | |-ConstantExpr 0x1498091c0 <col:10> 'int'
    |   | | `-CharacterLiteral 0x1498091a8 <col:10> 'int' 44
    |   | `-BinaryOperator 0x14a008390 <col:15, col:58> 'char *' contains-errors '='
    |   |   |-DeclRefExpr 0x14a008200 <col:15> 'char *' lvalue Var 0x148928358 'p' 'char *'
    |   |   `-CallExpr 0x14a008360 <col:19, col:58> '<dependent type>' contains-errors
    |   |     |-DeclRefExpr 0x14a008300 <col:19> 'int ()' Function 0x14a008248 'redisProtocolToLuaType_Double' 'int ()'
    |   |     |-RecoveryExpr 0x14a008320 <col:49> '<dependent type>' contains-errors lvalue
    |   |     `-DeclRefExpr 0x14a008340 <col:53> 'char *' lvalue ParmVar 0x1489281a8 'reply' 'char *'
    |   `-BreakStmt 0x14a0083b0 <col:61>
    `-ReturnStmt 0x14a0084a0 <line:16:5, col:12>
      `-ImplicitCastExpr 0x14a008488 <col:12> 'char *' <LValueToRValue>
        `-DeclRefExpr 0x14a008468 <col:12> 'char *' lvalue Var 0x148928358 'p' 'char *'
