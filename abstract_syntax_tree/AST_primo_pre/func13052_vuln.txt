`-FunctionDecl 0x123072978  line:1:11 invalid decode 'int (struct state *, struct huffman *)'
  |-ParmVarDecl 0x12305b668 <col:18, col:32> col:32 used s 'struct state *'
  |-ParmVarDecl 0x123072858 <col:35, col:51> col:51 used h 'struct huffman *'
  `-CompoundStmt 0x125008e30 <line:2:1, line:40:1>
    |-DeclStmt 0x123072ab0 <line:3:5, col:12>
    | `-VarDecl 0x123072a48 <col:5, col:9> col:9 used len 'int'
    |-DeclStmt 0x123072b48 <line:4:5, col:13>
    | `-VarDecl 0x123072ae0 <col:5, col:9> col:9 used code 'int'
    |-DeclStmt 0x123072be0 <line:5:5, col:14>
    | `-VarDecl 0x123072b78 <col:5, col:9> col:9 used first 'int'
    |-DeclStmt 0x123072c78 <line:6:5, col:14>
    | `-VarDecl 0x123072c10 <col:5, col:9> col:9 used count 'int'
    |-DeclStmt 0x123072d10 <line:7:5, col:14>
    | `-VarDecl 0x123072ca8 <col:5, col:9> col:9 used index 'int'
    |-DeclStmt 0x123072da8 <line:8:5, col:15>
    | `-VarDecl 0x123072d40 <col:5, col:9> col:9 used bitbuf 'int'
    |-DeclStmt 0x123072e40 <line:9:5, col:13>
    | `-VarDecl 0x123072dd8 <col:5, col:9> col:9 used left 'int'
    |-RecoveryExpr 0x123072e88 <line:10:3> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x123072f28 <line:12:5, col:17> 'int' contains-errors '='
    | |-DeclRefExpr 0x123072ea8 <col:5> 'int' lvalue Var 0x123072d40 'bitbuf' 'int'
    | `-RecoveryExpr 0x123072f00 <col:14, col:17> '<dependent type>' contains-errors lvalue
    |   `-DeclRefExpr 0x123072ec8 <col:14> 'struct state *' lvalue ParmVar 0x12305b668 's' 'struct state *'
    |-BinaryOperator 0x123072fc8 <line:13:5, col:15> 'int' contains-errors '='
    | |-DeclRefExpr 0x123072f48 <col:5> 'int' lvalue Var 0x123072dd8 'left' 'int'
    | `-RecoveryExpr 0x123072fa0 <col:12, col:15> '<dependent type>' contains-errors lvalue
    |   `-DeclRefExpr 0x123072f68 <col:12> 'struct state *' lvalue ParmVar 0x12305b668 's' 'struct state *'
    |-BinaryOperator 0x1230730a8 <line:14:5, col:28> 'int' '='
    | |-DeclRefExpr 0x123072fe8 <col:5> 'int' lvalue Var 0x123072ae0 'code' 'int'
    | `-BinaryOperator 0x123073088 <col:12, col:28> 'int' '='
    |   |-DeclRefExpr 0x123073008 <col:12> 'int' lvalue Var 0x123072b78 'first' 'int'
    |   `-BinaryOperator 0x123073068 <col:20, col:28> 'int' '='
    |     |-DeclRefExpr 0x123073028 <col:20> 'int' lvalue Var 0x123072ca8 'index' 'int'
    |     `-IntegerLiteral 0x123073048 <col:28> 'int' 0
    |-BinaryOperator 0x123073108 <line:15:5, col:11> 'int' '='
    | |-DeclRefExpr 0x1230730c8 <col:5> 'int' lvalue Var 0x123072a48 'len' 'int'
    | `-IntegerLiteral 0x1230730e8 <col:11> 'int' 1
    |-WhileStmt 0x125008dc8 <line:17:5, line:38:5>
    | |-IntegerLiteral 0x1230731c8 <line:17:12> 'int' 1
    | `-CompoundStmt 0x125008d90 <col:15, line:38:5>
    |   |-WhileStmt 0x125008670 <line:18:9, line:32:9>
    |   | |-UnaryOperator 0x123073208 <line:18:16, col:20> 'int' postfix '--'
    |   | | `-DeclRefExpr 0x1230731e8 <col:16> 'int' lvalue Var 0x123072dd8 'left' 'int'
    |   | `-CompoundStmt 0x125008618 <col:24, line:32:9>
    |   |   |-CompoundAssignOperator 0x1230732b8 <line:19:13, col:30> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
    |   |   | |-DeclRefExpr 0x123073220 <col:13> 'int' lvalue Var 0x123072ae0 'code' 'int'
    |   |   | `-BinaryOperator 0x123073298 <col:21, col:30> 'int' '&'
    |   |   |   |-ImplicitCastExpr 0x123073280 <col:21> 'int' <LValueToRValue>
    |   |   |   | `-DeclRefExpr 0x123073240 <col:21> 'int' lvalue Var 0x123072d40 'bitbuf' 'int'
    |   |   |   `-IntegerLiteral 0x123073260 <col:30> 'int' 1
    |   |   |-CompoundAssignOperator 0x123073340 <line:20:13, col:24> 'int' '>>=' ComputeLHSTy='int' ComputeResultTy='int'
    |   |   | |-DeclRefExpr 0x1230732e8 <col:13> 'int' lvalue Var 0x123072d40 'bitbuf' 'int'
    |   |   | `-IntegerLiteral 0x123073308 <col:24> 'int' 1
    |   |   |-BinaryOperator 0x123073480 <line:21:13, col:26> 'int' contains-errors '='
    |   |   | |-DeclRefExpr 0x123073370 <col:13> 'int' lvalue Var 0x123072c10 'count' 'int'
    |   |   | `-UnaryOperator 0x123073468 <col:21, col:26> '<dependent type>' contains-errors prefix '*' cannot overflow
    |   |   |   `-UnaryOperator 0x123073450 <col:22, col:26> '<dependent type>' contains-errors postfix '++' cannot overflow
    |   |   |     `-RecoveryExpr 0x123073430 <col:22> '<dependent type>' contains-errors lvalue
    |   |   |-IfStmt 0x1250083a0 <line:22:13, line:26:13>
    |   |   | |-BinaryOperator 0x123073568 <line:22:17, col:32> 'int' '<'
    |   |   | | |-ImplicitCastExpr 0x123073550 <col:17> 'int' <LValueToRValue>
    |   |   | | | `-DeclRefExpr 0x1230734a0 <col:17> 'int' lvalue Var 0x123072ae0 'code' 'int'
    |   |   | | `-BinaryOperator 0x123073530 <col:24, col:32> 'int' '+'
    |   |   | |   |-ImplicitCastExpr 0x123073500 <col:24> 'int' <LValueToRValue>
    |   |   | |   | `-DeclRefExpr 0x1230734c0 <col:24> 'int' lvalue Var 0x123072b78 'first' 'int'
    |   |   | |   `-ImplicitCastExpr 0x123073518 <col:32> 'int' <LValueToRValue>
    |   |   | |     `-DeclRefExpr 0x1230734e0 <col:32> 'int' lvalue Var 0x123072c10 'count' 'int'
    |   |   | `-CompoundStmt 0x125008378 <col:39, line:26:13>
    |   |   |   |-BinaryOperator 0x123073608 <line:23:17, col:29> '<dependent type>' contains-errors '='
    |   |   |   | |-RecoveryExpr 0x1230735c0 <col:17, col:20> '<dependent type>' contains-errors lvalue
    |   |   |   | | `-DeclRefExpr 0x123073588 <col:17> 'struct state *' lvalue ParmVar 0x12305b668 's' 'struct state *'
    |   |   |   | `-DeclRefExpr 0x1230735e8 <col:29> 'int' lvalue Var 0x123072d40 'bitbuf' 'int'
    |   |   |   |-BinaryOperator 0x123073788 <line:24:17, col:49> '<dependent type>' contains-errors '='
    |   |   |   | |-RecoveryExpr 0x123073660 <col:17, col:20> '<dependent type>' contains-errors lvalue
    |   |   |   | | `-DeclRefExpr 0x123073628 <col:17> 'struct state *' lvalue ParmVar 0x12305b668 's' 'struct state *'
    |   |   |   | `-BinaryOperator 0x123073768 <col:29, col:49> '<dependent type>' contains-errors '&'
    |   |   |   |   |-ParenExpr 0x123073728 <col:29, col:45> '<dependent type>' contains-errors
    |   |   |   |   | `-BinaryOperator 0x123073708 <col:30, col:42> '<dependent type>' contains-errors '-'
    |   |   |   |   |   |-RecoveryExpr 0x1230736c0 <col:30, col:33> '<dependent type>' contains-errors lvalue
    |   |   |   |   |   | `-DeclRefExpr 0x123073688 <col:30> 'struct state *' lvalue ParmVar 0x12305b668 's' 'struct state *'
    |   |   |   |   |   `-DeclRefExpr 0x1230736e8 <col:42> 'int' lvalue Var 0x123072a48 'len' 'int'
    |   |   |   |   `-IntegerLiteral 0x123073748 <col:49> 'int' 7
    |   |   |   `-ReturnStmt 0x125008368 <line:25:17, col:56>
    |   |   |     `-ArraySubscriptExpr 0x125008348 <col:24, col:56> '<dependent type>' contains-errors lvalue
    |   |   |       |-ImplicitCastExpr 0x125008330 <col:24, col:27> '<dependent type>' contains-errors <LValueToRValue>
    |   |   |       | `-RecoveryExpr 0x125008200 <col:24, col:27> '<dependent type>' contains-errors lvalue
    |   |   |       |   `-DeclRefExpr 0x1230737a8 <col:24> 'struct huffman *' lvalue ParmVar 0x123072858 'h' 'struct huffman *'
    |   |   |       `-BinaryOperator 0x125008310 <col:34, col:55> 'int' '+'
    |   |   |         |-ImplicitCastExpr 0x1250082f8 <col:34> 'int' <LValueToRValue>
    |   |   |         | `-DeclRefExpr 0x125008228 <col:34> 'int' lvalue Var 0x123072ca8 'index' 'int'
    |   |   |         `-ParenExpr 0x1250082d8 <col:42, col:55> 'int'
    |   |   |           `-BinaryOperator 0x1250082b8 <col:43, col:50> 'int' '-'
    |   |   |             |-ImplicitCastExpr 0x125008288 <col:43> 'int' <LValueToRValue>
    |   |   |             | `-DeclRefExpr 0x125008248 <col:43> 'int' lvalue Var 0x123072ae0 'code' 'int'
    |   |   |             `-ImplicitCastExpr 0x1250082a0 <col:50> 'int' <LValueToRValue>
    |   |   |               `-DeclRefExpr 0x125008268 <col:50> 'int' lvalue Var 0x123072b78 'first' 'int'
    |   |   |-CompoundAssignOperator 0x125008418 <line:27:13, col:22> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |   |   | |-DeclRefExpr 0x1250083c0 <col:13> 'int' lvalue Var 0x123072ca8 'index' 'int'
    |   |   | `-ImplicitCastExpr 0x125008400 <col:22> 'int' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x1250083e0 <col:22> 'int' lvalue Var 0x123072c10 'count' 'int'
    |   |   |-CompoundAssignOperator 0x1250084a0 <line:28:13, col:22> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |   |   | |-DeclRefExpr 0x125008448 <col:13> 'int' lvalue Var 0x123072b78 'first' 'int'
    |   |   | `-ImplicitCastExpr 0x125008488 <col:22> 'int' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x125008468 <col:22> 'int' lvalue Var 0x123072c10 'count' 'int'
    |   |   |-CompoundAssignOperator 0x125008528 <line:29:13, col:23> 'int' '<<=' ComputeLHSTy='int' ComputeResultTy='int'
    |   |   | |-DeclRefExpr 0x1250084d0 <col:13> 'int' lvalue Var 0x123072b78 'first' 'int'
    |   |   | `-IntegerLiteral 0x1250084f0 <col:23> 'int' 1
    |   |   |-CompoundAssignOperator 0x1250085b0 <line:30:13, col:22> 'int' '<<=' ComputeLHSTy='int' ComputeResultTy='int'
    |   |   | |-DeclRefExpr 0x125008558 <col:13> 'int' lvalue Var 0x123072ae0 'code' 'int'
    |   |   | `-IntegerLiteral 0x125008578 <col:22> 'int' 1
    |   |   `-UnaryOperator 0x125008600 <line:31:13, col:16> 'int' postfix '++'
    |   |     `-DeclRefExpr 0x1250085e0 <col:13> 'int' lvalue Var 0x123072a48 'len' 'int'
    |   |-IfStmt 0x1250087a8 <line:34:9, col:24>
    |   | |-BinaryOperator 0x125008780 <col:13, col:21> 'int' '=='
    |   | | |-ImplicitCastExpr 0x125008768 <col:13> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x125008728 <col:13> 'int' lvalue Var 0x123072dd8 'left' 'int'
    |   | | `-IntegerLiteral 0x125008748 <col:21> 'int' 0
    |   | `-BreakStmt 0x1250087a0 <col:24>
    |   |-IfStmt 0x125008b28 <line:35:9, col:52>
    |   | |-BinaryOperator 0x125008888 <col:13, col:28> 'int' contains-errors '=='
    |   | | |-RecoveryExpr 0x125008800 <col:13, col:16> '<dependent type>' contains-errors lvalue
    |   | | | `-DeclRefExpr 0x1250087c8 <col:13> 'struct state *' lvalue ParmVar 0x12305b668 's' 'struct state *'
    |   | | `-RecoveryExpr 0x125008860 <col:25, col:28> '<dependent type>' contains-errors lvalue
    |   | |   `-DeclRefExpr 0x125008828 <col:25> 'struct state *' lvalue ParmVar 0x12305b668 's' 'struct state *'
    |   | `-CallExpr 0x125008af8 <col:35, col:52> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x125008a58 <col:35> 'int ()' Function 0x125008948 'longjmp' 'int ()'
    |   |   |-RecoveryExpr 0x125008ab0 <col:43, col:46> '<dependent type>' contains-errors lvalue
    |   |   | `-DeclRefExpr 0x125008a78 <col:43> 'struct state *' lvalue ParmVar 0x12305b668 's' 'struct state *'
    |   |   `-IntegerLiteral 0x125008ad8 <col:51> 'int' 1
    |   |-BinaryOperator 0x125008c78 <line:36:9, col:34> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x125008b48 <col:9> 'int' lvalue Var 0x123072d40 'bitbuf' 'int'
    |   | `-ArraySubscriptExpr 0x125008c58 <col:18, col:34> '<dependent type>' contains-errors lvalue
    |   |   |-ImplicitCastExpr 0x125008c40 <col:18, col:21> '<dependent type>' contains-errors <LValueToRValue>
    |   |   | `-RecoveryExpr 0x125008ba0 <col:18, col:21> '<dependent type>' contains-errors lvalue
    |   |   |   `-DeclRefExpr 0x125008b68 <col:18> 'struct state *' lvalue ParmVar 0x12305b668 's' 'struct state *'
    |   |   `-UnaryOperator 0x125008c28 <col:24, col:32> '<dependent type>' contains-errors postfix '++' cannot overflow
    |   |     `-RecoveryExpr 0x125008c00 <col:24, col:27> '<dependent type>' contains-errors lvalue
    |   |       `-DeclRefExpr 0x125008bc8 <col:24> 'struct state *' lvalue ParmVar 0x12305b668 's' 'struct state *'
    |   `-IfStmt 0x125008d70 <line:37:9, col:30>
    |     |-BinaryOperator 0x125008cf0 <col:13, col:20> 'int' '>'
    |     | |-ImplicitCastExpr 0x125008cd8 <col:13> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x125008c98 <col:13> 'int' lvalue Var 0x123072dd8 'left' 'int'
    |     | `-IntegerLiteral 0x125008cb8 <col:20> 'int' 8
    |     `-BinaryOperator 0x125008d50 <col:23, col:30> 'int' '='
    |       |-DeclRefExpr 0x125008d10 <col:23> 'int' lvalue Var 0x123072dd8 'left' 'int'
    |       `-IntegerLiteral 0x125008d30 <col:30> 'int' 8
    `-ReturnStmt 0x125008e20 <line:39:5, col:13>
      `-UnaryOperator 0x125008e08 <col:12, col:13> 'int' prefix '-'
        `-IntegerLiteral 0x125008de8 <col:13> 'int' 9
