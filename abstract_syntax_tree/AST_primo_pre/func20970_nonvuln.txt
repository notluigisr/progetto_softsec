`-FunctionDecl 0x14980de90  line:1:13 hexToDigit 'void (unsigned int *, const unsigned char *)' static
  |-ParmVarDecl 0x14980dd08 <col:24, col:39> col:39 used val 'unsigned int *'
  |-ParmVarDecl 0x14980ddb8 <col:44, col:66> col:66 used hex 'const unsigned char *'
  `-CompoundStmt 0x149826bc8 <line:2:1, line:11:1>
    |-DeclStmt 0x14980e010 <line:3:5, col:19>
    | `-VarDecl 0x14980dfa8 <col:5, col:18> col:18 used i 'unsigned int'
    `-ForStmt 0x149826b90 <line:4:5, line:10:5>
      |-BinaryOperator 0x14980e080 <line:4:10, col:12> 'unsigned int' '='
      | |-DeclRefExpr 0x14980e028 <col:10> 'unsigned int' lvalue Var 0x14980dfa8 'i' 'unsigned int'
      | `-ImplicitCastExpr 0x14980e068 <col:12> 'unsigned int' <IntegralCast>
      |   `-IntegerLiteral 0x14980e048 <col:12> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x14980e110 <col:14, col:16> 'int' '<'
      | |-ImplicitCastExpr 0x14980e0e0 <col:14> 'unsigned int' <LValueToRValue>
      | | `-DeclRefExpr 0x14980e0a0 <col:14> 'unsigned int' lvalue Var 0x14980dfa8 'i' 'unsigned int'
      | `-ImplicitCastExpr 0x14980e0f8 <col:16> 'unsigned int' <IntegralCast>
      |   `-IntegerLiteral 0x14980e0c0 <col:16> 'int' 4
      |-UnaryOperator 0x14980e150 <col:18, col:19> 'unsigned int' postfix '++'
      | `-DeclRefExpr 0x14980e130 <col:18> 'unsigned int' lvalue Var 0x14980dfa8 'i' 'unsigned int'
      `-CompoundStmt 0x149826b58 <col:23, line:10:5>
        |-DeclStmt 0x14980e290 <line:5:9, col:33>
        | `-VarDecl 0x14980e180 <col:9, col:32> col:23 used c 'unsigned char' cinit
        |   `-ImplicitCastExpr 0x14980e278 <col:27, col:32> 'unsigned char' <LValueToRValue>
        |     `-ArraySubscriptExpr 0x14980e258 <col:27, col:32> 'const unsigned char' lvalue
        |       |-ImplicitCastExpr 0x14980e228 <col:27> 'const unsigned char *' <LValueToRValue>
        |       | `-DeclRefExpr 0x14980e1e8 <col:27> 'const unsigned char *' lvalue ParmVar 0x14980ddb8 'hex' 'const unsigned char *'
        |       `-ImplicitCastExpr 0x14980e240 <col:31> 'unsigned int' <LValueToRValue>
        |         `-DeclRefExpr 0x14980e208 <col:31> 'unsigned int' lvalue Var 0x14980dfa8 'i' 'unsigned int'
        |-IfStmt 0x149826698 <line:6:9, col:41>
        | |-BinaryOperator 0x14980e310 <col:13, col:18> 'int' '>='
        | | |-ImplicitCastExpr 0x14980e2f8 <col:13> 'int' <IntegralCast>
        | | | `-ImplicitCastExpr 0x14980e2e0 <col:13> 'unsigned char' <LValueToRValue>
        | | |   `-DeclRefExpr 0x14980e2a8 <col:13> 'unsigned char' lvalue Var 0x14980e180 'c' 'unsigned char'
        | | `-CharacterLiteral 0x14980e2c8 <col:18> 'int' 65
        | `-BinaryOperator 0x149826678 <col:23, col:41> 'unsigned char' '='
        |   |-DeclRefExpr 0x14980e330 <col:23> 'unsigned char' lvalue Var 0x14980e180 'c' 'unsigned char'
        |   `-ImplicitCastExpr 0x149826660 <col:27, col:41> 'unsigned char' <IntegralCast>
        |     `-BinaryOperator 0x149826640 <col:27, col:41> 'int' '-'
        |       |-ParenExpr 0x149826600 <col:27, col:37> 'int'
        |       | `-BinaryOperator 0x14980e3d8 <col:28, col:33> 'int' '&'
        |       |   |-ImplicitCastExpr 0x14980e3c0 <col:28> 'int' <IntegralCast>
        |       |   | `-ImplicitCastExpr 0x14980e3a8 <col:28> 'unsigned char' <LValueToRValue>
        |       |   |   `-DeclRefExpr 0x14980e350 <col:28> 'unsigned char' lvalue Var 0x14980e180 'c' 'unsigned char'
        |       |   `-UnaryOperator 0x14980e390 <col:32, col:33> 'int' prefix '~' cannot overflow
        |       |     `-IntegerLiteral 0x14980e370 <col:33> 'int' 32
        |       `-IntegerLiteral 0x149826620 <col:41> 'int' 7
        |-CompoundAssignOperator 0x1498266f0 <line:7:9, col:14> 'unsigned char' '-=' ComputeLHSTy='int' ComputeResultTy='int'
        | |-DeclRefExpr 0x1498266b8 <col:9> 'unsigned char' lvalue Var 0x14980e180 'c' 'unsigned char'
        | `-CharacterLiteral 0x1498266d8 <col:14> 'int' 48
        |-CallExpr 0x149826988 <line:8:9, col:27> 'int'
        | |-ImplicitCastExpr 0x149826970 <col:9> 'int (*)()' <FunctionToPointerDecay>
        | | `-DeclRefExpr 0x149826850 <col:9> 'int ()' Function 0x149826798 'assert' 'int ()'
        | `-UnaryOperator 0x149826920 <col:16, col:26> 'int' prefix '!' cannot overflow
        |   `-ParenExpr 0x149826900 <col:17, col:26> 'int'
        |     `-BinaryOperator 0x1498268e0 <col:18, col:22> 'int' '&'
        |       |-ImplicitCastExpr 0x1498268c8 <col:18> 'int' <IntegralCast>
        |       | `-ImplicitCastExpr 0x1498268b0 <col:18> 'unsigned char' <LValueToRValue>
        |       |   `-DeclRefExpr 0x149826870 <col:18> 'unsigned char' lvalue Var 0x14980e180 'c' 'unsigned char'
        |       `-IntegerLiteral 0x149826890 <col:22> 'int' 240
        `-BinaryOperator 0x149826b38 <line:9:9, col:30> 'unsigned int' '='
          |-UnaryOperator 0x1498269e8 <col:9, col:10> 'unsigned int' lvalue prefix '*' cannot overflow
          | `-ImplicitCastExpr 0x1498269d0 <col:10> 'unsigned int *' <LValueToRValue>
          |   `-DeclRefExpr 0x1498269b0 <col:10> 'unsigned int *' lvalue ParmVar 0x14980dd08 'val' 'unsigned int *'
          `-BinaryOperator 0x149826b18 <col:16, col:30> 'unsigned int' '|'
            |-ParenExpr 0x149826aa8 <col:16, col:26> 'unsigned int'
            | `-BinaryOperator 0x149826a88 <col:17, col:25> 'unsigned int' '<<'
            |   |-ImplicitCastExpr 0x149826a70 <col:17, col:18> 'unsigned int' <LValueToRValue>
            |   | `-UnaryOperator 0x149826a38 <col:17, col:18> 'unsigned int' lvalue prefix '*' cannot overflow
            |   |   `-ImplicitCastExpr 0x149826a20 <col:18> 'unsigned int *' <LValueToRValue>
            |   |     `-DeclRefExpr 0x149826a00 <col:18> 'unsigned int *' lvalue ParmVar 0x14980dd08 'val' 'unsigned int *'
            |   `-IntegerLiteral 0x149826a50 <col:25> 'int' 4
            `-ImplicitCastExpr 0x149826b00 <col:30> 'unsigned int' <IntegralCast>
              `-ImplicitCastExpr 0x149826ae8 <col:30> 'unsigned char' <LValueToRValue>
                `-DeclRefExpr 0x149826ac8 <col:30> 'unsigned char' lvalue Var 0x14980e180 'c' 'unsigned char'
