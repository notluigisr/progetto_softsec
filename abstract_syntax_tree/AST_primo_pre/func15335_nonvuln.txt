`-FunctionDecl 0x11f928288  line:1:1 invalid sync_is_active_scope 'int (const int *, int *)'
  |-ParmVarDecl 0x11f9280f0 <col:22, col:38> col:38 invalid dn 'const int *'
  |-ParmVarDecl 0x11f9281a8 <col:42, col:56> col:56 invalid pb 'int *'
  `-CompoundStmt 0x11f942228 <line:2:1, line:22:1>
    |-DeclStmt 0x11f9283c0 <line:3:5, col:11>
    | `-VarDecl 0x11f928358 <col:5, col:9> col:9 used rc 'int'
    |-DeclStmt 0x11f928490 <line:4:5, col:26>
    | `-VarDecl 0x11f9283f0 <col:5, col:22> col:11 used origbase 'char *' cinit
    |   `-RecoveryExpr 0x11f928470 <col:22> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x11f928540 <line:6:5, col:14>
    | `-VarDecl 0x11f9284d8 <col:5, col:9> col:9 used scope 'int'
    |-CallExpr 0x11f941800 <line:8:5, col:61> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x11f9286b0 <col:5> 'int ()' Function 0x11f9285f8 'slapi_pblock_get' 'int ()'
    | |-RecoveryExpr 0x11f9286d0 <col:22> '<dependent type>' contains-errors lvalue
    | |-RecoveryExpr 0x11f9287b0 <col:26> '<dependent type>' contains-errors lvalue
    | `-UnaryOperator 0x11f928760 <col:52, col:53> 'char **' contains-errors prefix '&' cannot overflow
    |   `-DeclRefExpr 0x11f928708 <col:53> 'char *' contains-errors lvalue Var 0x11f9283f0 'origbase' 'char *'
    |-CallExpr 0x11f941950 <line:9:5, col:56> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x11f941838 <col:5> 'int ()' Function 0x11f9285f8 'slapi_pblock_get' 'int ()'
    | |-RecoveryExpr 0x11f941858 <col:22> '<dependent type>' contains-errors lvalue
    | |-RecoveryExpr 0x11f9418f8 <col:26> '<dependent type>' contains-errors lvalue
    | `-UnaryOperator 0x11f941938 <col:51, col:52> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   `-RecoveryExpr 0x11f941918 <col:52> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x11f941a70 <line:10:5, col:52> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x11f941988 <col:5> 'int ()' Function 0x11f9285f8 'slapi_pblock_get' 'int ()'
    | |-RecoveryExpr 0x11f9419a8 <col:22> '<dependent type>' contains-errors lvalue
    | |-RecoveryExpr 0x11f941a50 <col:26> '<dependent type>' contains-errors lvalue
    | `-UnaryOperator 0x11f941a00 <col:46, col:47> 'int *' prefix '&' cannot overflow
    |   `-DeclRefExpr 0x11f9419e0 <col:47> 'int' lvalue Var 0x11f9284d8 'scope' 'int'
    |-IfStmt 0x11f941f20 <line:11:5, line:14:5>
    | |-BinaryOperator 0x11f941b38 <line:11:9, col:17> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x11f941af8 <col:9> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x11f941b18 <col:17> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x11f941f08 <col:23, line:14:5>
    |   `-CallExpr 0x11f941ed0 <line:13:9, col:59> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x11f941de8 <col:9> 'int ()' Function 0x11f941d30 'slapi_pblock_set' 'int ()'
    |     |-RecoveryExpr 0x11f941e08 <col:26> '<dependent type>' contains-errors lvalue
    |     |-RecoveryExpr 0x11f941e90 <col:30> '<dependent type>' contains-errors lvalue
    |     `-RecoveryExpr 0x11f941eb0 <col:55> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x11f942190 <line:15:5, line:19:5> has_else
    | |-RecoveryExpr 0x11f942080 <line:15:9, col:45> '_Bool' contains-errors
    | |-CompoundStmt 0x11f942100 <col:48, line:17:5>
    | | `-BinaryOperator 0x11f9420e0 <line:16:9, col:14> 'int' '='
    | |   |-DeclRefExpr 0x11f9420a0 <col:9> 'int' lvalue Var 0x11f928358 'rc' 'int'
    | |   `-IntegerLiteral 0x11f9420c0 <col:14> 'int' 1
    | `-CompoundStmt 0x11f942178 <line:17:12, line:19:5>
    |   `-BinaryOperator 0x11f942158 <line:18:9, col:14> 'int' '='
    |     |-DeclRefExpr 0x11f942118 <col:9> 'int' lvalue Var 0x11f928358 'rc' 'int'
    |     `-IntegerLiteral 0x11f942138 <col:14> 'int' 0
    `-ReturnStmt 0x11f942218 <line:21:5, col:15>
      `-ImplicitCastExpr 0x11f942200 <col:12, col:15> 'int' <LValueToRValue>
        `-ParenExpr 0x11f9421e0 <col:12, col:15> 'int' lvalue
          `-DeclRefExpr 0x11f9421c0 <col:13> 'int' lvalue Var 0x11f928358 'rc' 'int'
