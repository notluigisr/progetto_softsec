`-FunctionDecl 0x145128288  line:1:1 invalid virDomainObjGetState 'int (int, int *)'
  |-ParmVarDecl 0x1451280f0 <col:22, col:38> col:38 invalid dom 'int'
  |-ParmVarDecl 0x1451281a8 <col:43, col:48> col:48 used reason 'int *'
  `-CompoundStmt 0x145128578 <line:2:1, line:7:1>
    |-IfStmt 0x145128498 <line:3:5, line:4:30>
    | |-ImplicitCastExpr 0x145128360 <line:3:9> 'int *' <LValueToRValue>
    | | `-DeclRefExpr 0x145128340 <col:9> 'int *' lvalue ParmVar 0x1451281a8 'reason' 'int *'
    | `-BinaryOperator 0x145128478 <line:4:9, col:30> 'int' contains-errors '='
    |   |-UnaryOperator 0x1451283b0 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
    |   | `-ImplicitCastExpr 0x145128398 <col:10> 'int *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x145128378 <col:10> 'int *' lvalue ParmVar 0x1451281a8 'reason' 'int *'
    |   `-CXXDependentScopeMemberExpr 0x145128430 <col:19, col:30> '<dependent type>' contains-errors lvalue .reason
    |     `-CXXDependentScopeMemberExpr 0x1451283e8 <col:19, col:24> '<dependent type>' contains-errors lvalue ->state
    |       `-RecoveryExpr 0x1451283c8 <col:19> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x145128568 <line:6:5, col:23>
      `-CXXDependentScopeMemberExpr 0x145128520 <col:12, col:23> '<dependent type>' contains-errors lvalue .state
        `-CXXDependentScopeMemberExpr 0x1451284d8 <col:12, col:17> '<dependent type>' contains-errors lvalue ->state
          `-RecoveryExpr 0x1451284b8 <col:12> '<dependent type>' contains-errors lvalue
