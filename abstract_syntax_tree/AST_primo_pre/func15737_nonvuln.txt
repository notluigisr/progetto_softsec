`-FunctionDecl 0x1511281f8  line:1:22 invalid fli_read_char 'unsigned char (int *)' static
  |-ParmVarDecl 0x151128128 <col:36, col:42> col:42 invalid f 'int *'
  `-CompoundStmt 0x151128610 <line:2:1, line:6:1>
    |-DeclStmt 0x151128328 <line:3:2, col:17>
    | `-VarDecl 0x1511282c0 <col:2, col:16> col:16 used b 'unsigned char'
    |-CallExpr 0x151128588 <line:4:2, col:16> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x1511284a0 <col:2> 'int ()' Function 0x1511283e8 'fread' 'int ()'
    | |-UnaryOperator 0x151128510 <col:8, col:9> 'unsigned char *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x1511284c0 <col:9> 'unsigned char' lvalue Var 0x1511282c0 'b' 'unsigned char'
    | |-IntegerLiteral 0x151128528 <col:11> 'int' 1
    | |-IntegerLiteral 0x151128548 <col:13> 'int' 1
    | `-RecoveryExpr 0x151128568 <col:15> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x151128600 <line:5:2, col:9>
      `-ImplicitCastExpr 0x1511285e8 <col:9> 'unsigned char' <LValueToRValue>
        `-DeclRefExpr 0x1511285c8 <col:9> 'unsigned char' lvalue Var 0x1511282c0 'b' 'unsigned char'
