`-FunctionDecl 0x148928500  line:1:20 ModulateHSI 'void (const double, const double, const double, double *, double *, double *)' static inline
  |-ParmVarDecl 0x1489280d8 <col:32, col:45> col:45 used percent_hue 'const double'
  |-ParmVarDecl 0x148928158 <line:2:3, col:16> col:16 used percent_saturation 'const double'
  |-ParmVarDecl 0x1489281d8 <col:35, col:48> col:48 used percent_intensity 'const double'
  |-ParmVarDecl 0x148928288 <col:66, col:74> col:74 used red 'double *'
  |-ParmVarDecl 0x148928308 <line:3:3, col:11> col:11 used green 'double *'
  |-ParmVarDecl 0x148928388 <col:17, col:25> col:25 used blue 'double *'
  `-CompoundStmt 0x148942370 <line:4:1, line:20:1>
    |-DeclStmt 0x1489287c0 <line:5:3, line:8:15>
    | |-VarDecl 0x148928638 <line:5:3, line:6:5> col:5 used intensity 'double'
    | |-VarDecl 0x1489286b8 <line:5:3, line:7:5> col:5 used hue 'double'
    | `-VarDecl 0x148928738 <line:5:3, line:8:5> col:5 used saturation 'double'
    |-CallExpr 0x148941b18 <line:11:3, col:64> 'int'
    | |-ImplicitCastExpr 0x148941b00 <col:3> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x148941910 <col:3> 'int ()' Function 0x148941858 'ConvertRGBToHSI' 'int ()'
    | |-ImplicitCastExpr 0x148941b68 <col:19, col:20> 'double' <LValueToRValue>
    | | `-UnaryOperator 0x148941968 <col:19, col:20> 'double' lvalue prefix '*' cannot overflow
    | |   `-ImplicitCastExpr 0x148941950 <col:20> 'double *' <LValueToRValue>
    | |     `-DeclRefExpr 0x148941930 <col:20> 'double *' lvalue ParmVar 0x148928288 'red' 'double *'
    | |-ImplicitCastExpr 0x148941b80 <col:24, col:25> 'double' <LValueToRValue>
    | | `-UnaryOperator 0x1489419b8 <col:24, col:25> 'double' lvalue prefix '*' cannot overflow
    | |   `-ImplicitCastExpr 0x1489419a0 <col:25> 'double *' <LValueToRValue>
    | |     `-DeclRefExpr 0x148941980 <col:25> 'double *' lvalue ParmVar 0x148928308 'green' 'double *'
    | |-ImplicitCastExpr 0x148941b98 <col:31, col:32> 'double' <LValueToRValue>
    | | `-UnaryOperator 0x148941a08 <col:31, col:32> 'double' lvalue prefix '*' cannot overflow
    | |   `-ImplicitCastExpr 0x1489419f0 <col:32> 'double *' <LValueToRValue>
    | |     `-DeclRefExpr 0x1489419d0 <col:32> 'double *' lvalue ParmVar 0x148928388 'blue' 'double *'
    | |-UnaryOperator 0x148941a40 <col:37, col:38> 'double *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x148941a20 <col:38> 'double' lvalue Var 0x1489286b8 'hue' 'double'
    | |-UnaryOperator 0x148941a78 <col:42, col:43> 'double *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x148941a58 <col:43> 'double' lvalue Var 0x148928738 'saturation' 'double'
    | `-UnaryOperator 0x148941ab0 <col:54, col:55> 'double *' prefix '&' cannot overflow
    |   `-DeclRefExpr 0x148941a90 <col:55> 'double' lvalue Var 0x148928638 'intensity' 'double'
    |-CompoundAssignOperator 0x148941ce8 <line:12:3, col:33> 'double' '+=' ComputeLHSTy='double' ComputeResultTy='double'
    | |-DeclRefExpr 0x148941bb0 <col:3> 'double' lvalue Var 0x1489286b8 'hue' 'double'
    | `-BinaryOperator 0x148941cc8 <col:8, col:33> 'double' '*'
    |   |-FloatingLiteral 0x148941bd0 <col:8> 'double' 5.000000e-01
    |   `-ParenExpr 0x148941ca8 <col:12, col:33> 'double'
    |     `-BinaryOperator 0x148941c88 <col:13, col:30> 'double' '-'
    |       |-BinaryOperator 0x148941c48 <col:13, col:18> 'double' '*'
    |       | |-FloatingLiteral 0x148941bf0 <col:13> 'double' 1.000000e-02
    |       | `-ImplicitCastExpr 0x148941c30 <col:18> 'double' <LValueToRValue>
    |       |   `-DeclRefExpr 0x148941c10 <col:18> 'const double' lvalue ParmVar 0x1489280d8 'percent_hue' 'const double'
    |       `-FloatingLiteral 0x148941c68 <col:30> 'double' 1.000000e+00
    |-WhileStmt 0x148941e00 <line:13:3, line:14:10>
    | |-BinaryOperator 0x148941d70 <line:13:10, col:16> 'int' '<'
    | | |-ImplicitCastExpr 0x148941d58 <col:10> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x148941d18 <col:10> 'double' lvalue Var 0x1489286b8 'hue' 'double'
    | | `-FloatingLiteral 0x148941d38 <col:16> 'double' 0.000000e+00
    | `-CompoundAssignOperator 0x148941dd0 <line:14:5, col:10> 'double' '+=' ComputeLHSTy='double' ComputeResultTy='double'
    |   |-DeclRefExpr 0x148941d90 <col:5> 'double' lvalue Var 0x1489286b8 'hue' 'double'
    |   `-FloatingLiteral 0x148941db0 <col:10> 'double' 1.000000e+00
    |-WhileStmt 0x148941f08 <line:15:3, line:16:10>
    | |-BinaryOperator 0x148941e78 <line:15:10, col:16> 'int' '>'
    | | |-ImplicitCastExpr 0x148941e60 <col:10> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x148941e20 <col:10> 'double' lvalue Var 0x1489286b8 'hue' 'double'
    | | `-FloatingLiteral 0x148941e40 <col:16> 'double' 1.000000e+00
    | `-CompoundAssignOperator 0x148941ed8 <line:16:5, col:10> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
    |   |-DeclRefExpr 0x148941e98 <col:5> 'double' lvalue Var 0x1489286b8 'hue' 'double'
    |   `-FloatingLiteral 0x148941eb8 <col:10> 'double' 1.000000e+00
    |-CompoundAssignOperator 0x148941fc0 <line:17:3, col:20> 'double' '*=' ComputeLHSTy='double' ComputeResultTy='double'
    | |-DeclRefExpr 0x148941f28 <col:3> 'double' lvalue Var 0x148928738 'saturation' 'double'
    | `-BinaryOperator 0x148941fa0 <col:15, col:20> 'double' '*'
    |   |-FloatingLiteral 0x148941f48 <col:15> 'double' 1.000000e-02
    |   `-ImplicitCastExpr 0x148941f88 <col:20> 'double' <LValueToRValue>
    |     `-DeclRefExpr 0x148941f68 <col:20> 'const double' lvalue ParmVar 0x148928158 'percent_saturation' 'const double'
    |-CompoundAssignOperator 0x148942088 <line:18:3, col:19> 'double' '*=' ComputeLHSTy='double' ComputeResultTy='double'
    | |-DeclRefExpr 0x148941ff0 <col:3> 'double' lvalue Var 0x148928638 'intensity' 'double'
    | `-BinaryOperator 0x148942068 <col:14, col:19> 'double' '*'
    |   |-FloatingLiteral 0x148942010 <col:14> 'double' 1.000000e-02
    |   `-ImplicitCastExpr 0x148942050 <col:19> 'double' <LValueToRValue>
    |     `-DeclRefExpr 0x148942030 <col:19> 'const double' lvalue ParmVar 0x1489281d8 'percent_intensity' 'const double'
    `-CallExpr 0x148942290 <line:19:3, col:58> 'int'
      |-ImplicitCastExpr 0x148942278 <col:3> 'int (*)()' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x148942198 <col:3> 'int ()' Function 0x1489420e0 'ConvertHSIToRGB' 'int ()'
      |-ImplicitCastExpr 0x1489422e0 <col:19> 'double' <LValueToRValue>
      | `-DeclRefExpr 0x1489421b8 <col:19> 'double' lvalue Var 0x1489286b8 'hue' 'double'
      |-ImplicitCastExpr 0x1489422f8 <col:23> 'double' <LValueToRValue>
      | `-DeclRefExpr 0x1489421d8 <col:23> 'double' lvalue Var 0x148928738 'saturation' 'double'
      |-ImplicitCastExpr 0x148942310 <col:34> 'double' <LValueToRValue>
      | `-DeclRefExpr 0x1489421f8 <col:34> 'double' lvalue Var 0x148928638 'intensity' 'double'
      |-ImplicitCastExpr 0x148942328 <col:44> 'double *' <LValueToRValue>
      | `-DeclRefExpr 0x148942218 <col:44> 'double *' lvalue ParmVar 0x148928288 'red' 'double *'
      |-ImplicitCastExpr 0x148942340 <col:48> 'double *' <LValueToRValue>
      | `-DeclRefExpr 0x148942238 <col:48> 'double *' lvalue ParmVar 0x148928308 'green' 'double *'
      `-ImplicitCastExpr 0x148942358 <col:54> 'double *' <LValueToRValue>
        `-DeclRefExpr 0x148942258 <col:54> 'double *' lvalue ParmVar 0x148928388 'blue' 'double *'
