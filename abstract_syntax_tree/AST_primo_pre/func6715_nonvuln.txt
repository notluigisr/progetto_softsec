`-FunctionDecl 0x12c00dea8  line:1:15 mask_password 'char **(int, char ***)' static
  |-ParmVarDecl 0x12c00dcd8 <col:29, col:33> col:33 used argc 'int'
  |-ParmVarDecl 0x12c00ddc0 <col:39, col:47> col:47 used argv 'char ***'
  `-CompoundStmt 0x12c02ad20 <line:2:1, line:23:1>
    |-DeclStmt 0x12c00e028 <line:3:3, col:19>
    | `-VarDecl 0x12c00dfc0 <col:3, col:10> col:10 used temp_argv 'char **'
    |-UnaryOperator 0x12c028ea8 <line:5:3, col:7> 'int' postfix '--'
    | `-DeclRefExpr 0x12c028e88 <col:3> 'int' lvalue ParmVar 0x12c00dcd8 'argc' 'int'
    |-WhileStmt 0x12c02a7e0 <line:6:3, line:20:3>
    | |-BinaryOperator 0x12c028f18 <line:6:10, col:17> 'int' '>'
    | | |-ImplicitCastExpr 0x12c028f00 <col:10> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x12c028ec0 <col:10> 'int' lvalue ParmVar 0x12c00dcd8 'argc' 'int'
    | | `-IntegerLiteral 0x12c028ee0 <col:17> 'int' 0
    | `-CompoundStmt 0x12c02a7b8 <line:7:3, line:20:3>
    |   |-BinaryOperator 0x12c0294b0 <line:8:5, col:58> 'char *' contains-errors '='
    |   | |-ArraySubscriptExpr 0x12c029378 <col:5, col:19> 'char *' lvalue
    |   | | |-ImplicitCastExpr 0x12c029348 <col:5> 'char **' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x12c028f38 <col:5> 'char **' lvalue Var 0x12c00dfc0 'temp_argv' 'char **'
    |   | | `-ImplicitCastExpr 0x12c029360 <col:15> 'int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x12c028f58 <col:15> 'int' lvalue ParmVar 0x12c00dcd8 'argc' 'int'
    |   | `-CallExpr 0x12c029480 <col:22, col:58> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x12c0290a8 <col:22> 'int ()' Function 0x12c028ff0 'my_strdup' 'int ()'
    |   |   |-ArraySubscriptExpr 0x12c029418 <col:32, col:44> 'char *' lvalue
    |   |   | |-ImplicitCastExpr 0x12c0293e8 <col:32, col:38> 'char **' <LValueToRValue>
    |   |   | | `-ParenExpr 0x12c0293c8 <col:32, col:38> 'char **' lvalue
    |   |   | |   `-UnaryOperator 0x12c0293b0 <col:33, col:34> 'char **' lvalue prefix '*' cannot overflow
    |   |   | |     `-ImplicitCastExpr 0x12c029398 <col:34> 'char ***' <LValueToRValue>
    |   |   | |       `-DeclRefExpr 0x12c0290c8 <col:34> 'char ***' lvalue ParmVar 0x12c00ddc0 'argv' 'char ***'
    |   |   | `-ImplicitCastExpr 0x12c029400 <col:40> 'int' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x12c029138 <col:40> 'int' lvalue ParmVar 0x12c00dcd8 'argc' 'int'
    |   |   `-CallExpr 0x12c029458 <col:47, col:57> '<dependent type>' contains-errors
    |   |     |-DeclRefExpr 0x12c0291a8 <col:47> 'int ()' Function 0x12c00e280 'MYF' 'int ()'
    |   |     `-RecoveryExpr 0x12c029438 <col:51> '<dependent type>' contains-errors lvalue
    |   |-IfStmt 0x12c02a760 <line:9:5, line:18:6>
    |   | |-BinaryOperator 0x12c029da0 <line:9:9, line:10:75> 'int' contains-errors '||'
    |   | | |-BinaryOperator 0x12c029bf0 <line:9:9, col:75> 'int' contains-errors '=='
    |   | | | |-CallExpr 0x12c029b98 <col:9, col:70> '<dependent type>' contains-errors
    |   | | | | |-DeclRefExpr 0x12c0295b0 <col:9> 'int ()' Function 0x12c0294f8 'find_type' 'int ()'
    |   | | | | |-ArraySubscriptExpr 0x12c029b20 <col:19, col:35> 'char *' lvalue
    |   | | | | | |-ImplicitCastExpr 0x12c029b08 <col:19, col:25> 'char **' <LValueToRValue>
    |   | | | | | | `-ParenExpr 0x12c029ab0 <col:19, col:25> 'char **' lvalue
    |   | | | | | |   `-UnaryOperator 0x12c029a98 <col:20, col:21> 'char **' lvalue prefix '*' cannot overflow
    |   | | | | | |     `-ImplicitCastExpr 0x12c029a80 <col:21> 'char ***' <LValueToRValue>
    |   | | | | | |       `-DeclRefExpr 0x12c0295d0 <col:21> 'char ***' lvalue ParmVar 0x12c00ddc0 'argv' 'char ***'
    |   | | | | | `-BinaryOperator 0x12c029ae8 <col:27, col:34> 'int' '-'
    |   | | | | |   |-ImplicitCastExpr 0x12c029ad0 <col:27> 'int' <LValueToRValue>
    |   | | | | |   | `-DeclRefExpr 0x12c029640 <col:27> 'int' lvalue ParmVar 0x12c00dcd8 'argc' 'int'
    |   | | | | |   `-IntegerLiteral 0x12c029660 <col:34> 'int' 1
    |   | | | | |-UnaryOperator 0x12c029b60 <col:37, col:38> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | | | | | `-RecoveryExpr 0x12c029b40 <col:38> '<dependent type>' contains-errors lvalue
    |   | | | | `-RecoveryExpr 0x12c029b78 <col:55> '<dependent type>' contains-errors lvalue
    |   | | | `-RecoveryExpr 0x12c029bd0 <col:75> '<dependent type>' contains-errors lvalue
    |   | | `-BinaryOperator 0x12c029d80 <line:10:9, col:75> 'int' contains-errors '=='
    |   | |   |-CallExpr 0x12c029d28 <col:9, col:70> '<dependent type>' contains-errors
    |   | |   | |-DeclRefExpr 0x12c0297a8 <col:9> 'int ()' Function 0x12c0294f8 'find_type' 'int ()'
    |   | |   | |-ArraySubscriptExpr 0x12c029cb0 <col:19, col:35> 'char *' lvalue
    |   | |   | | |-ImplicitCastExpr 0x12c029c98 <col:19, col:25> 'char **' <LValueToRValue>
    |   | |   | | | `-ParenExpr 0x12c029c40 <col:19, col:25> 'char **' lvalue
    |   | |   | | |   `-UnaryOperator 0x12c029c28 <col:20, col:21> 'char **' lvalue prefix '*' cannot overflow
    |   | |   | | |     `-ImplicitCastExpr 0x12c029c10 <col:21> 'char ***' <LValueToRValue>
    |   | |   | | |       `-DeclRefExpr 0x12c0297c8 <col:21> 'char ***' lvalue ParmVar 0x12c00ddc0 'argv' 'char ***'
    |   | |   | | `-BinaryOperator 0x12c029c78 <col:27, col:34> 'int' '-'
    |   | |   | |   |-ImplicitCastExpr 0x12c029c60 <col:27> 'int' <LValueToRValue>
    |   | |   | |   | `-DeclRefExpr 0x12c029838 <col:27> 'int' lvalue ParmVar 0x12c00dcd8 'argc' 'int'
    |   | |   | |   `-IntegerLiteral 0x12c029858 <col:34> 'int' 1
    |   | |   | |-UnaryOperator 0x12c029cf0 <col:37, col:38> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | |   | | `-RecoveryExpr 0x12c029cd0 <col:38> '<dependent type>' contains-errors lvalue
    |   | |   | `-RecoveryExpr 0x12c029d08 <col:55> '<dependent type>' contains-errors lvalue
    |   | |   `-RecoveryExpr 0x12c029d60 <col:75> '<dependent type>' contains-errors lvalue
    |   | `-CompoundStmt 0x12c02a730 <line:11:5, line:18:6>
    |   |   |-DeclStmt 0x12c02a360 <line:12:7, col:33>
    |   |   | `-VarDecl 0x12c02a200 <col:7, col:32> col:13 used start 'char *' cinit
    |   |   |   `-ImplicitCastExpr 0x12c02a348 <col:20, col:32> 'char *' <LValueToRValue>
    |   |   |     `-ArraySubscriptExpr 0x12c02a328 <col:20, col:32> 'char *' lvalue
    |   |   |       |-ImplicitCastExpr 0x12c02a2f8 <col:20, col:26> 'char **' <LValueToRValue>
    |   |   |       | `-ParenExpr 0x12c02a2b8 <col:20, col:26> 'char **' lvalue
    |   |   |       |   `-UnaryOperator 0x12c02a2a0 <col:21, col:22> 'char **' lvalue prefix '*' cannot overflow
    |   |   |       |     `-ImplicitCastExpr 0x12c02a288 <col:22> 'char ***' <LValueToRValue>
    |   |   |       |       `-DeclRefExpr 0x12c02a268 <col:22> 'char ***' lvalue ParmVar 0x12c00ddc0 'argv' 'char ***'
    |   |   |       `-ImplicitCastExpr 0x12c02a310 <col:28> 'int' <LValueToRValue>
    |   |   |         `-DeclRefExpr 0x12c02a2d8 <col:28> 'int' lvalue ParmVar 0x12c00dcd8 'argc' 'int'
    |   |   |-WhileStmt 0x12c02a480 <line:13:7, line:14:19>
    |   |   | |-ImplicitCastExpr 0x12c02a3c8 <line:13:14, col:15> 'char' <LValueToRValue>
    |   |   | | `-UnaryOperator 0x12c02a3b0 <col:14, col:15> 'char' lvalue prefix '*' cannot overflow
    |   |   | |   `-ImplicitCastExpr 0x12c02a398 <col:15> 'char *' <LValueToRValue>
    |   |   | |     `-DeclRefExpr 0x12c02a378 <col:15> 'char *' lvalue Var 0x12c02a200 'start' 'char *'
    |   |   | `-BinaryOperator 0x12c02a460 <line:14:9, col:19> 'char' '='
    |   |   |   |-UnaryOperator 0x12c02a418 <col:9, col:15> 'char' lvalue prefix '*' cannot overflow
    |   |   |   | `-UnaryOperator 0x12c02a400 <col:10, col:15> 'char *' postfix '++'
    |   |   |   |   `-DeclRefExpr 0x12c02a3e0 <col:10> 'char *' lvalue Var 0x12c02a200 'start' 'char *'
    |   |   |   `-ImplicitCastExpr 0x12c02a448 <col:19> 'char' <IntegralCast>
    |   |   |     `-CharacterLiteral 0x12c02a430 <col:19> 'int' 120
    |   |   |-BinaryOperator 0x12c02a5b8 <line:15:7, col:26> 'char *' '='
    |   |   | |-DeclRefExpr 0x12c02a4a0 <col:7> 'char *' lvalue Var 0x12c02a200 'start' 'char *'
    |   |   | `-ImplicitCastExpr 0x12c02a5a0 <col:14, col:26> 'char *' <LValueToRValue>
    |   |   |   `-ArraySubscriptExpr 0x12c02a580 <col:14, col:26> 'char *' lvalue
    |   |   |     |-ImplicitCastExpr 0x12c02a550 <col:14, col:20> 'char **' <LValueToRValue>
    |   |   |     | `-ParenExpr 0x12c02a510 <col:14, col:20> 'char **' lvalue
    |   |   |     |   `-UnaryOperator 0x12c02a4f8 <col:15, col:16> 'char **' lvalue prefix '*' cannot overflow
    |   |   |     |     `-ImplicitCastExpr 0x12c02a4e0 <col:16> 'char ***' <LValueToRValue>
    |   |   |     |       `-DeclRefExpr 0x12c02a4c0 <col:16> 'char ***' lvalue ParmVar 0x12c00ddc0 'argv' 'char ***'
    |   |   |     `-ImplicitCastExpr 0x12c02a568 <col:22> 'int' <LValueToRValue>
    |   |   |       `-DeclRefExpr 0x12c02a530 <col:22> 'int' lvalue ParmVar 0x12c00dcd8 'argc' 'int'
    |   |   `-IfStmt 0x12c02a710 <line:16:7, line:17:19>
    |   |     |-ImplicitCastExpr 0x12c02a628 <line:16:11, col:12> 'char' <LValueToRValue>
    |   |     | `-UnaryOperator 0x12c02a610 <col:11, col:12> 'char' lvalue prefix '*' cannot overflow
    |   |     |   `-ImplicitCastExpr 0x12c02a5f8 <col:12> 'char *' <LValueToRValue>
    |   |     |     `-DeclRefExpr 0x12c02a5d8 <col:12> 'char *' lvalue Var 0x12c02a200 'start' 'char *'
    |   |     `-BinaryOperator 0x12c02a6f0 <line:17:9, col:19> 'char' '='
    |   |       |-ArraySubscriptExpr 0x12c02a698 <col:9, col:16> 'char' lvalue
    |   |       | |-ImplicitCastExpr 0x12c02a680 <col:9> 'char *' <LValueToRValue>
    |   |       | | `-DeclRefExpr 0x12c02a640 <col:9> 'char *' lvalue Var 0x12c02a200 'start' 'char *'
    |   |       | `-IntegerLiteral 0x12c02a660 <col:15> 'int' 1
    |   |       `-ImplicitCastExpr 0x12c02a6d8 <col:19> 'char' <IntegralCast>
    |   |         `-IntegerLiteral 0x12c02a6b8 <col:19> 'int' 0
    |   `-UnaryOperator 0x12c02a7a0 <line:19:5, col:9> 'int' postfix '--'
    |     `-DeclRefExpr 0x12c02a780 <col:5> 'int' lvalue ParmVar 0x12c00dcd8 'argc' 'int'
    |-BinaryOperator 0x12c02ac98 <line:21:3, col:56> 'char *' contains-errors '='
    | |-ArraySubscriptExpr 0x12c02ab60 <col:3, col:17> 'char *' lvalue
    | | |-ImplicitCastExpr 0x12c02ab30 <col:3> 'char **' <LValueToRValue>
    | | | `-DeclRefExpr 0x12c02a800 <col:3> 'char **' lvalue Var 0x12c00dfc0 'temp_argv' 'char **'
    | | `-ImplicitCastExpr 0x12c02ab48 <col:13> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x12c02a820 <col:13> 'int' lvalue ParmVar 0x12c00dcd8 'argc' 'int'
    | `-CallExpr 0x12c02ac68 <col:20, col:56> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x12c02a890 <col:20> 'int ()' Function 0x12c028ff0 'my_strdup' 'int ()'
    |   |-ArraySubscriptExpr 0x12c02ac00 <col:30, col:42> 'char *' lvalue
    |   | |-ImplicitCastExpr 0x12c02abd0 <col:30, col:36> 'char **' <LValueToRValue>
    |   | | `-ParenExpr 0x12c02abb0 <col:30, col:36> 'char **' lvalue
    |   | |   `-UnaryOperator 0x12c02ab98 <col:31, col:32> 'char **' lvalue prefix '*' cannot overflow
    |   | |     `-ImplicitCastExpr 0x12c02ab80 <col:32> 'char ***' <LValueToRValue>
    |   | |       `-DeclRefExpr 0x12c02a8b0 <col:32> 'char ***' lvalue ParmVar 0x12c00ddc0 'argv' 'char ***'
    |   | `-ImplicitCastExpr 0x12c02abe8 <col:38> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x12c02a920 <col:38> 'int' lvalue ParmVar 0x12c00dcd8 'argc' 'int'
    |   `-CallExpr 0x12c02ac40 <col:45, col:55> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x12c02a990 <col:45> 'int ()' Function 0x12c00e280 'MYF' 'int ()'
    |     `-RecoveryExpr 0x12c02ac20 <col:49> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x12c02ad10 <line:22:3, col:19>
      `-ImplicitCastExpr 0x12c02acf8 <col:9, col:19> 'char **' <LValueToRValue>
        `-ParenExpr 0x12c02acd8 <col:9, col:19> 'char **' lvalue
          `-DeclRefExpr 0x12c02acb8 <col:10> 'char **' lvalue Var 0x12c00dfc0 'temp_argv' 'char **'
