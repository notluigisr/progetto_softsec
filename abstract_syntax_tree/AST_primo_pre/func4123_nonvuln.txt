`-FunctionDecl 0x15500df18  line:3:1 invalid xmlXPathIsPositionalPredicate 'int (int, int, int *)' static
  |-ParmVarDecl 0x15500dcf0 <col:31, col:56> col:56 invalid ctxt 'int'
  |-ParmVarDecl 0x15500dd70 <line:4:8, col:26> col:26 invalid op 'int'
  |-ParmVarDecl 0x15500de28 <line:5:8, col:13> col:13 used maxPos 'int *'
  `-CompoundStmt 0x154922ca8 <line:6:1, line:35:6>
    |-IfStmt 0x15500e188 <line:13:5, line:14:10>
    | |-RecoveryExpr 0x15500e118 <line:13:9, col:69> '_Bool' contains-errors
    | `-ReturnStmt 0x15500e178 <line:14:2, col:10>
    |   `-ParenExpr 0x15500e158 <col:8, col:10> 'int'
    |     `-IntegerLiteral 0x15500e138 <col:9> 'int' 0
    |-IfStmt 0x154922650 <line:16:5, line:19:10> has_else
    | |-BinaryOperator 0x15500e248 <line:16:9, col:21> 'int' contains-errors '!='
    | | |-CXXDependentScopeMemberExpr 0x15500e1c8 <col:9, col:13> '<dependent type>' contains-errors lvalue ->ch2
    | | | `-RecoveryExpr 0x15500e1a8 <col:9> '<dependent type>' contains-errors lvalue
    | | `-UnaryOperator 0x15500e230 <col:20, col:21> 'int' prefix '-'
    | |   `-IntegerLiteral 0x15500e210 <col:21> 'int' 1
    | |-CompoundStmt 0x15500e3e8 <col:24, line:18:5>
    | `-ReturnStmt 0x154922640 <line:19:2, col:10>
    |   `-ParenExpr 0x154922620 <col:8, col:10> 'int'
    |     `-IntegerLiteral 0x154922600 <col:9> 'int' 0
    `-IfStmt 0x154922c88 <line:21:5, line:35:5>
      |-RecoveryExpr 0x154922830 <line:21:9, line:24:61> '_Bool' contains-errors
      `-CompoundStmt 0x154922c68 <line:25:5, line:35:5>
        |-DeclStmt 0x1549228e8 <line:26:9, col:73>
        | `-VarDecl 0x154922868 <col:9, col:16> col:16 used floatval 'double'
        `-IfStmt 0x154922c48 <line:30:9, line:34:9>
          |-RecoveryExpr 0x1549229b0 <line:30:13, col:56> '_Bool' contains-errors
          `-CompoundStmt 0x154922c28 <col:59, line:34:9>
            |-BinaryOperator 0x154922a98 <line:31:6, col:22> 'int' '='
            | |-UnaryOperator 0x154922a08 <col:6, col:7> 'int' lvalue prefix '*' cannot overflow
            | | `-ImplicitCastExpr 0x1549229f0 <col:7> 'int *' <LValueToRValue>
            | |   `-DeclRefExpr 0x1549229d0 <col:7> 'int *' lvalue ParmVar 0x15500de28 'maxPos' 'int *'
            | `-CStyleCastExpr 0x154922a70 <col:16, col:22> 'int' <FloatingToIntegral>
            |   `-ImplicitCastExpr 0x154922a58 <col:22> 'double' <LValueToRValue> part_of_explicit_cast
            |     `-DeclRefExpr 0x154922a20 <col:22> 'double' lvalue Var 0x154922868 'floatval' 'double'
            `-IfStmt 0x154922c08 <line:32:13, line:33:25>
              |-BinaryOperator 0x154922b98 <line:32:17, col:39> 'int' '=='
              | |-ImplicitCastExpr 0x154922b80 <col:17> 'double' <LValueToRValue>
              | | `-DeclRefExpr 0x154922ab8 <col:17> 'double' lvalue Var 0x154922868 'floatval' 'double'
              | `-CStyleCastExpr 0x154922b58 <col:29, col:39> 'double' <IntegralToFloating>
              |   `-ImplicitCastExpr 0x154922b40 <col:38, col:39> 'int' <LValueToRValue> part_of_explicit_cast
              |     `-UnaryOperator 0x154922b10 <col:38, col:39> 'int' lvalue prefix '*' cannot overflow
              |       `-ImplicitCastExpr 0x154922af8 <col:39> 'int *' <LValueToRValue>
              |         `-DeclRefExpr 0x154922ad8 <col:39> 'int *' lvalue ParmVar 0x15500de28 'maxPos' 'int *'
              `-ReturnStmt 0x154922bf8 <line:33:17, col:25>
                `-ParenExpr 0x154922bd8 <col:23, col:25> 'int'
                  `-IntegerLiteral 0x154922bb8 <col:24> 'int' 1
