`-FunctionDecl 0x122128318  line:1:14 invalid oidc_cache_get_hashed_key 'char *(int *, const char *, const char *)' static
  |-ParmVarDecl 0x122128128 <col:40, col:53> col:53 invalid r 'int *'
  |-ParmVarDecl 0x1221281a8 <col:56, col:68> col:68 used passphrase 'const char *'
  |-ParmVarDecl 0x122128228 <line:2:3, col:15> col:15 used key 'const char *'
  `-CompoundStmt 0x122141d30 <col:20, line:12:1>
    |-DeclStmt 0x122128720 <line:3:2, col:61>
    | `-VarDecl 0x1221283f0 <col:2, col:60> col:8 used input 'char *' cinit
    |   `-CallExpr 0x1221286e0 <col:16, col:60> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x1221285b0 <col:16> 'int ()' Function 0x1221284f8 'apr_psprintf' 'int ()'
    |     |-CXXDependentScopeMemberExpr 0x1221285f0 <col:29, col:32> '<dependent type>' contains-errors lvalue ->pool
    |     | `-RecoveryExpr 0x1221285d0 <col:29> '<dependent type>' contains-errors lvalue
    |     |-StringLiteral 0x122128680 <col:38> 'char[4]' lvalue "STR"
    |     |-DeclRefExpr 0x1221286a0 <col:45> 'const char *' lvalue ParmVar 0x1221281a8 'passphrase' 'const char *'
    |     `-DeclRefExpr 0x1221286c0 <col:57> 'const char *' lvalue ParmVar 0x122128228 'key' 'const char *'
    |-DeclStmt 0x122141800 <line:4:2, col:21>
    | `-VarDecl 0x122128750 <col:2, col:17> col:8 used output 'char *' cinit
    |   `-RecoveryExpr 0x1221287d0 <col:17> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x122141cc8 <line:5:2, line:10:2>
    | |-BinaryOperator 0x122141ad0 <line:5:6, line:6:23> 'int' contains-errors '=='
    | | |-CallExpr 0x122141a70 <line:5:6, line:6:18> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x1221418f8 <line:5:6> 'int ()' Function 0x122141840 'oidc_util_hash_string_and_base64url_encode' 'int ()'
    | | | |-RecoveryExpr 0x122141918 <col:49> '<dependent type>' contains-errors lvalue
    | | | |-RecoveryExpr 0x122141a50 <col:52> '<dependent type>' contains-errors lvalue
    | | | |-DeclRefExpr 0x122141950 <line:6:4> 'char *' contains-errors lvalue Var 0x1221283f0 'input' 'char *'
    | | | `-UnaryOperator 0x1221419c0 <col:11, col:12> 'char **' contains-errors prefix '&' cannot overflow
    | | |   `-DeclRefExpr 0x122141970 <col:12> 'char *' contains-errors lvalue Var 0x122128750 'output' 'char *'
    | | `-RecoveryExpr 0x122141ab0 <col:23> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x122141ca8 <col:30, line:10:2>
    |   |-CallExpr 0x122141c30 <line:7:3, line:8:10> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x122141bd0 <line:7:3> 'int ()' Function 0x122141b18 'oidc_error' 'int ()'
    |   | |-RecoveryExpr 0x122141bf0 <col:14> '<dependent type>' contains-errors lvalue
    |   | `-StringLiteral 0x122141c10 <line:8:5> 'char[4]' lvalue "STR"
    |   `-ReturnStmt 0x122141c98 <line:9:3, col:10>
    |     `-RecoveryExpr 0x122141c78 <col:10> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x122141d20 <line:11:2, col:9>
      `-ImplicitCastExpr 0x122141d08 <col:9> 'char *' contains-errors <LValueToRValue>
        `-DeclRefExpr 0x122141ce8 <col:9> 'char *' contains-errors lvalue Var 0x122128750 'output' 'char *'
