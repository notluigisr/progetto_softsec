`-FunctionDecl 0x13c85e158  line:1:1 flattenenv 'int (struct env *)'
  |-ParmVarDecl 0x13c85e048 <col:12, col:24> col:24 used env 'struct env *'
  `-CompoundStmt 0x13c07dc00 <line:2:1, line:18:1>
    |-DeclStmt 0x13e008d00 <line:3:2, col:13>
    | `-VarDecl 0x13e008c98 <col:2, col:9> col:9 used envp 'char **'
    |-DeclStmt 0x13e008f08 <line:4:2, col:22>
    | |-RecordDecl 0x13e008d18 <col:2, col:9> col:9 struct envnode
    | `-VarDecl 0x13e008e88 <col:2, col:18> col:18 used node 'struct envnode *'
    |-BinaryOperator 0x13e009268 <line:7:2, col:58> 'char **' contains-errors '='
    | |-DeclRefExpr 0x13e008f38 <col:2> 'char **' lvalue Var 0x13e008c98 'envp' 'char **'
    | `-CallExpr 0x13e009230 <col:9, col:58> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x13e009070 <col:9> 'int ()' Function 0x13e008fb8 'reallocarray' 'int ()'
    |   |-RecoveryExpr 0x13e0091d8 <col:22> '<dependent type>' contains-errors lvalue
    |   |-BinaryOperator 0x13e009128 <col:28, col:41> '<dependent type>' contains-errors '+'
    |   | |-RecoveryExpr 0x13e0090e0 <col:28, col:33> '<dependent type>' contains-errors lvalue
    |   | | `-DeclRefExpr 0x13e0090a8 <col:28> 'struct env *' lvalue ParmVar 0x13c85e048 'env' 'struct env *'
    |   | `-IntegerLiteral 0x13e009108 <col:41> 'int' 1
    |   `-UnaryExprOrTypeTraitExpr 0x13e009210 <col:44, col:57> 'unsigned long' sizeof 'char *'
    |-IfStmt 0x13e009490 <line:8:2, line:9:14>
    | |-UnaryOperator 0x13e0092c0 <line:8:6, col:7> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x13e0092a8 <col:7> 'char **' <LValueToRValue>
    | |   `-DeclRefExpr 0x13e009288 <col:7> 'char **' lvalue Var 0x13e008c98 'envp' 'char **'
    | `-CallExpr 0x13e009460 <line:9:3, col:14> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x13e0093b8 <col:3> 'int ()' Function 0x13e009300 'err' 'int ()'
    |   |-IntegerLiteral 0x13e0093d8 <col:7> 'int' 1
    |   `-RecoveryExpr 0x13e009440 <col:10> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x13e0096d8 <line:11:2, col:38> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x13e0095b0 <col:2> 'int ()' Function 0x13e0094f8 'RB_FOREACH' 'int ()'
    | |-DeclRefExpr 0x13e0095d0 <col:13> 'struct envnode *' lvalue Var 0x13e008e88 'node' 'struct envnode *'
    | |-RecoveryExpr 0x13e0096b8 <col:19> '<dependent type>' contains-errors lvalue
    | `-UnaryOperator 0x13e009668 <col:28, col:34> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   `-RecoveryExpr 0x13e009640 <col:29, col:34> '<dependent type>' contains-errors lvalue
    |     `-DeclRefExpr 0x13e009608 <col:29> 'struct env *' lvalue ParmVar 0x13c85e048 'env' 'struct env *'
    |-CompoundStmt 0x13e009b20 <col:40, line:15:2>
    | `-IfStmt 0x13e009b00 <line:12:3, line:13:15>
    |   |-RecoveryExpr 0x13e009a08 <line:12:7, col:61> '_Bool' contains-errors
    |   `-CallExpr 0x13e009ad0 <line:13:4, col:15> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x13e009a28 <col:4> 'int ()' Function 0x13e009300 'err' 'int ()'
    |     |-IntegerLiteral 0x13e009a48 <col:8> 'int' 1
    |     `-RecoveryExpr 0x13e009ab0 <col:11> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x13e009bd8 <line:17:2, col:9>
      `-ImplicitCastExpr 0x13e009bc0 <col:9> 'int' <PointerToIntegral>
        `-ImplicitCastExpr 0x13e009ba8 <col:9> 'char **' <LValueToRValue>
          `-DeclRefExpr 0x13e009b88 <col:9> 'char **' lvalue Var 0x13e008c98 'envp' 'char **'
