`-FunctionDecl 0x14f9281a8  line:1:5 dbg_remove_sw_break 'int (unsigned long)'
  |-ParmVarDecl 0x14f9280d8 <col:25, col:39> col:39 used addr 'unsigned long'
  `-CompoundStmt 0x14f9286e0 <line:2:1, line:13:1>
    |-DeclStmt 0x14f928320 <line:3:2, col:7>
    | `-VarDecl 0x14f9282b8 <col:2, col:6> col:6 used i 'int'
    |-ForStmt 0x14f928600 <line:5:2, line:11:2>
    | |-BinaryOperator 0x14f928378 <line:5:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x14f928338 <col:7> 'int' lvalue Var 0x14f9282b8 'i' 'int'
    | | `-IntegerLiteral 0x14f928358 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x14f928428 <col:14, col:18> 'int' contains-errors '<'
    | | |-DeclRefExpr 0x14f928398 <col:14> 'int' lvalue Var 0x14f9282b8 'i' 'int'
    | | `-RecoveryExpr 0x14f928408 <col:18> '<dependent type>' contains-errors lvalue
    | |-UnaryOperator 0x14f928468 <col:40, col:41> 'int' postfix '++'
    | | `-DeclRefExpr 0x14f928448 <col:40> 'int' lvalue Var 0x14f9282b8 'i' 'int'
    | `-CompoundStmt 0x14f9285e8 <col:45, line:11:2>
    |   `-IfStmt 0x14f9285c8 <line:6:3, line:10:3>
    |     |-RecoveryExpr 0x14f928528 <line:6:7, line:7:36> '_Bool' contains-errors
    |     `-CompoundStmt 0x14f9285b0 <col:39, line:10:3>
    |       `-ReturnStmt 0x14f9285a0 <line:9:4, col:11>
    |         `-IntegerLiteral 0x14f928580 <col:11> 'int' 0
    `-ReturnStmt 0x14f9286d0 <line:12:2, col:10>
      `-UnaryOperator 0x14f9286b8 <col:9, col:10> '<dependent type>' contains-errors prefix '-' cannot overflow
        `-ImplicitCastExpr 0x14f9286a0 <col:10> '<dependent type>' contains-errors <LValueToRValue>
          `-RecoveryExpr 0x14f928680 <col:10> '<dependent type>' contains-errors lvalue
