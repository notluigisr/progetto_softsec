`-FunctionDecl 0x12b9281c8  line:1:1 referenced invalid seamless_process 'int (int)'
  |-ParmVarDecl 0x12b9280f0 <col:18, col:25> col:25 invalid s 'int'
  `-CompoundStmt 0x12b9422b0 <line:2:1, line:13:1>
    |-DeclStmt 0x12b9282f8 <line:3:2, col:21>
    | `-VarDecl 0x12b928290 <col:2, col:15> col:15 used pkglen 'unsigned int'
    |-DeclStmt 0x12b928390 <line:4:2, col:11>
    | `-VarDecl 0x12b928328 <col:2, col:8> col:8 used buf 'char *'
    |-BinaryOperator 0x12b9284b8 <line:6:2, col:23> 'unsigned int' contains-errors '='
    | |-DeclRefExpr 0x12b9283a8 <col:2> 'unsigned int' lvalue Var 0x12b928290 'pkglen' 'unsigned int'
    | `-BinaryOperator 0x12b928498 <col:11, col:23> '<dependent type>' contains-errors '-'
    |   |-CXXDependentScopeMemberExpr 0x12b9283e8 <col:11, col:14> '<dependent type>' contains-errors lvalue ->end
    |   | `-RecoveryExpr 0x12b9283c8 <col:11> '<dependent type>' contains-errors lvalue
    |   `-CXXDependentScopeMemberExpr 0x12b928450 <col:20, col:23> '<dependent type>' contains-errors lvalue ->p
    |     `-RecoveryExpr 0x12b928430 <col:20> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x12b941bc0 <line:8:2, col:26> 'char *' '='
    | |-DeclRefExpr 0x12b9284d8 <col:2> 'char *' lvalue Var 0x12b928328 'buf' 'char *'
    | `-ImplicitCastExpr 0x12b928770 <col:8, col:26> 'char *' <IntegralToPointer>
    |   `-CallExpr 0x12b928748 <col:8, col:26> 'int'
    |     |-ImplicitCastExpr 0x12b928730 <col:8> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x12b928650 <col:8> 'int ()' Function 0x12b928598 'xmalloc' 'int ()'
    |     `-BinaryOperator 0x12b9286e0 <col:16, col:25> 'unsigned int' '+'
    |       |-ImplicitCastExpr 0x12b9286b0 <col:16> 'unsigned int' <LValueToRValue>
    |       | `-DeclRefExpr 0x12b928670 <col:16> 'unsigned int' lvalue Var 0x12b928290 'pkglen' 'unsigned int'
    |       `-ImplicitCastExpr 0x12b9286c8 <col:25> 'unsigned int' <IntegralCast>
    |         `-IntegerLiteral 0x12b928690 <col:25> 'int' 1
    |-CallExpr 0x12b941e50 <line:9:2, col:40> 'int' contains-errors
    | |-ImplicitCastExpr 0x12b941e38 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x12b941cc0 <col:2> 'int ()' Function 0x12b941c08 'STRNCPY' 'int ()'
    | |-ImplicitCastExpr 0x12b941e88 <col:10> 'char *' <LValueToRValue>
    | | `-DeclRefExpr 0x12b941ce0 <col:10> 'char *' lvalue Var 0x12b928328 'buf' 'char *'
    | |-CStyleCastExpr 0x12b941d80 <col:15, col:27> 'char *' contains-errors <Dependent>
    | | `-CXXDependentScopeMemberExpr 0x12b941d20 <col:24, col:27> '<dependent type>' contains-errors lvalue ->p
    | |   `-RecoveryExpr 0x12b941d00 <col:24> '<dependent type>' contains-errors lvalue
    | `-BinaryOperator 0x12b941e18 <col:30, col:39> 'unsigned int' '+'
    |   |-ImplicitCastExpr 0x12b941de8 <col:30> 'unsigned int' <LValueToRValue>
    |   | `-DeclRefExpr 0x12b941da8 <col:30> 'unsigned int' lvalue Var 0x12b928290 'pkglen' 'unsigned int'
    |   `-ImplicitCastExpr 0x12b941e00 <col:39> 'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x12b941dc8 <col:39> 'int' 1
    |-CallExpr 0x12b9420f8 <line:10:2, col:67> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x12b941f80 <col:2> 'int ()' Function 0x12b941ec8 'str_handle_lines' 'int ()'
    | |-DeclRefExpr 0x12b941fa0 <col:19> 'char *' lvalue Var 0x12b928328 'buf' 'char *'
    | |-UnaryOperator 0x12b9420a0 <col:24, col:25> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | `-RecoveryExpr 0x12b942080 <col:25> '<dependent type>' contains-errors lvalue
    | |-RecoveryExpr 0x12b9420b8 <col:40> '<dependent type>' contains-errors lvalue
    | `-RecoveryExpr 0x12b9420d8 <col:63> '<dependent type>' contains-errors lvalue
    `-CallExpr 0x12b942270 <line:12:2, col:11> 'int'
      |-ImplicitCastExpr 0x12b942258 <col:2> 'int (*)()' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x12b942218 <col:2> 'int ()' Function 0x12b942160 'xfree' 'int ()'
      `-ImplicitCastExpr 0x12b942298 <col:8> 'char *' <LValueToRValue>
        `-DeclRefExpr 0x12b942238 <col:8> 'char *' lvalue Var 0x12b928328 'buf' 'char *'
