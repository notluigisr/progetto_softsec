`-FunctionDecl 0x15900dfa8  line:1:1 referenced invalid zfont_info 'int (int *, const int *, int, int *)'
  |-ParmVarDecl 0x15900dd28 <col:12, col:21> col:21 invalid font 'int *'
  |-ParmVarDecl 0x15900dda8 <col:27, col:43> col:43 invalid pscale 'const int *'
  |-ParmVarDecl 0x15900de28 <col:51, col:55> col:55 used members 'int'
  |-ParmVarDecl 0x15900dea8 <line:2:12, col:28> col:28 referenced invalid info 'int *'
  `-CompoundStmt 0x1590276e8 <line:3:1, line:35:1>
    |-DeclStmt 0x15900e3b0 <line:4:5, line:7:42>
    | `-VarDecl 0x15900e088 <line:4:5, col:9> col:9 used code 'int'
    |-DeclStmt 0x158922c68 <line:8:5, col:22>
    | `-VarDecl 0x158922c00 <col:5, col:16> col:16 referenced invalid pfdict 'const int *'
    |-IfStmt 0x158922dc0 <line:11:5, line:12:16>
    | |-BinaryOperator 0x158922d58 <line:11:9, col:16> 'int' '<'
    | | |-ImplicitCastExpr 0x158922d40 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x158922d00 <col:9> 'int' lvalue Var 0x15900e088 'code' 'int'
    | | `-IntegerLiteral 0x158922d20 <col:16> 'int' 0
    | `-ReturnStmt 0x158922db0 <line:12:9, col:16>
    |   `-ImplicitCastExpr 0x158922d98 <col:16> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x158922d78 <col:16> 'int' lvalue Var 0x15900e088 'code' 'int'
    |-BinaryOperator 0x158922fd0 <line:13:5, col:33> '<dependent type>' contains-errors '='
    | |-RecoveryExpr 0x158922e00 <col:5> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x158922de0 <col:5> 'const int *' lvalue Var 0x158922c00 'pfdict' 'const int *'
    | `-UnaryOperator 0x158922fb8 <col:14, col:33> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   `-CXXDependentScopeMemberExpr 0x158922f70 <col:15, col:33> '<dependent type>' contains-errors lvalue ->dict
    |     `-CallExpr 0x158922f48 <col:15, col:30> '<dependent type>' contains-errors
    |       |-DeclRefExpr 0x158922f08 <col:15> 'int ()' Function 0x158922e50 'pfont_data' 'int ()'
    |       `-RecoveryExpr 0x158922f28 <col:26> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x158923538 <line:14:5, line:16:16>
    | |-BinaryOperator 0x1589234e8 <line:14:9, line:15:44> 'int' contains-errors '||'
    | | |-BinaryOperator 0x158923440 <line:14:9, col:56> 'int' contains-errors '<='
    | | | |-CallExpr 0x158923408 <col:9, col:51> '<dependent type>' contains-errors
    | | | | |-DeclRefExpr 0x1589230d0 <col:9> 'int ()' Function 0x158923018 'dict_find_string' 'int ()'
    | | | | |-RecoveryExpr 0x1589230f0 <col:26> '<dependent type>' contains-errors lvalue
    | | | | |-StringLiteral 0x158923150 <col:34> 'char[4]' lvalue "STR"
    | | | | `-UnaryOperator 0x1589233f0 <col:41, col:42> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | | |   `-RecoveryExpr 0x1589233d0 <col:42> '<dependent type>' contains-errors lvalue
    | | | `-IntegerLiteral 0x1589231d8 <col:56> 'int' 0
    | | `-UnaryOperator 0x1589234d0 <line:15:9, col:44> '<dependent type>' contains-errors prefix '!' cannot overflow
    | |   `-CallExpr 0x1589234a0 <col:10, col:44> '<dependent type>' contains-errors
    | |     |-DeclRefExpr 0x1589232f8 <col:10> 'int ()' Function 0x158923240 'r_has_type' 'int ()'
    | |     |-RecoveryExpr 0x158923460 <col:21> '<dependent type>' contains-errors lvalue
    | |     `-RecoveryExpr 0x158923480 <col:32> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x158923528 <line:16:9, col:16>
    |   `-IntegerLiteral 0x158923508 <col:16> 'int' 0
    |-IfStmt 0x159027680 <line:29:5, line:33:5>
    | |-RecoveryExpr 0x159027530 <line:29:9, line:30:60> '_Bool' contains-errors
    | `-CompoundStmt 0x159027670 <col:63, line:33:5>
    `-ReturnStmt 0x1590276d8 <line:34:5, col:12>
      `-ImplicitCastExpr 0x1590276c0 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x1590276a0 <col:12> 'int' lvalue Var 0x15900e088 'code' 'int'
