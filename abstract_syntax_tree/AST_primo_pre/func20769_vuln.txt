`-FunctionDecl 0x15600de08  line:1:1 invalid do_sigaltstack 'int (const int)'
  |-ParmVarDecl 0x15600dcf0 <col:17, col:31> col:31 invalid __user 'const int'
  `-CompoundStmt 0x156028338 <line:2:1, line:55:1>
    |-DeclStmt 0x15600df38 <line:4:2, col:11>
    | `-VarDecl 0x15600ded0 <col:2, col:6> col:6 used error 'int'
    |-IfStmt 0x15600e220 <line:6:2, line:10:2>
    | |-RecoveryExpr 0x15600df68 <line:6:6> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x15600e210 <col:12, line:10:2>
    |-IfStmt 0x156028080 <line:12:2, line:44:2>
    | |-RecoveryExpr 0x15600e258 <line:12:6> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x156028030 <col:11, line:44:2>
    |   |-DeclStmt 0x156027730 <line:13:3, col:15>
    |   | `-VarDecl 0x15600e288 <col:3, col:8> col:8 invalid __user 'void'
    |   |-UnaryExprOrTypeTraitExpr 0x1560277a0 <line:14:3, col:10> 'unsigned long' contains-errors sizeof
    |   | `-RecoveryExpr 0x156027780 <col:10> '<dependent type>' contains-errors lvalue
    |   |-DeclStmt 0x156027840 <line:15:3, col:15>
    |   | `-VarDecl 0x1560277d8 <col:3, col:7> col:7 used ss_flags 'int'
    |   |-BinaryOperator 0x156027930 <line:17:3, col:12> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x156027858 <col:3> 'int' lvalue Var 0x15600ded0 'error' 'int'
    |   | `-UnaryOperator 0x156027918 <col:11, col:12> '<dependent type>' contains-errors prefix '-' cannot overflow
    |   |   `-ImplicitCastExpr 0x156027900 <col:12> '<dependent type>' contains-errors <LValueToRValue>
    |   |     `-RecoveryExpr 0x1560278e0 <col:12> '<dependent type>' contains-errors lvalue
    |   |-IfStmt 0x156027c38 <line:18:3, line:22:9>
    |   | |-RecoveryExpr 0x156027bb0 <line:18:7, line:21:43> '_Bool' contains-errors
    |   | `-GotoStmt 0x156027c20 <line:22:4, col:9> 'out' 0x156027bd0
    |   |-IfStmt 0x156027db0 <line:25:3, line:26:9>
    |   | |-RecoveryExpr 0x156027d78 <line:25:7, col:22> '_Bool' contains-errors
    |   | `-GotoStmt 0x156027d98 <line:26:4, col:9> 'out' 0x156027bd0
    |   |-IfStmt 0x156027ee0 <line:30:3, line:31:9>
    |   | |-RecoveryExpr 0x156027ea8 <line:30:7, col:71> '_Bool' contains-errors
    |   | `-GotoStmt 0x156027ec8 <line:31:4, col:9> 'out' 0x156027bd0
    |   `-IfStmt 0x156028000 <line:33:3, line:40:3> has_else
    |     |-RecoveryExpr 0x156027f20 <line:33:7, col:19> '_Bool' contains-errors
    |     |-CompoundStmt 0x156027f60 <col:31, line:36:3>
    |     `-CompoundStmt 0x156027fe8 <col:10, line:40:3>
    |       `-IfStmt 0x156027fc8 <line:38:4, line:39:10>
    |         |-RecoveryExpr 0x156027f90 <line:38:8, col:18> '_Bool' contains-errors
    |         `-GotoStmt 0x156027fb0 <line:39:5, col:10> 'out' 0x156027bd0
    |-IfStmt 0x156028250 <line:46:2, line:50:2>
    | |-RecoveryExpr 0x1560280a0 <line:46:6> '_Bool' contains-errors
    | `-CompoundStmt 0x156028238 <col:12, line:50:2>
    |   `-IfStmt 0x156028218 <line:48:3, line:49:9>
    |     |-RecoveryExpr 0x1560281e0 <line:48:7, col:43> '_Bool' contains-errors
    |     `-GotoStmt 0x156028200 <line:49:4, col:9> 'out' 0x156027bd0
    |-BinaryOperator 0x1560282b0 <line:52:2, col:10> 'int' '='
    | |-DeclRefExpr 0x156028270 <col:2> 'int' lvalue Var 0x15600ded0 'error' 'int'
    | `-IntegerLiteral 0x156028290 <col:10> 'int' 0
    `-LabelStmt 0x156028318 <line:53:1, line:54:9> 'out'
      `-ReturnStmt 0x156028308 <col:2, col:9>
        `-ImplicitCastExpr 0x1560282f0 <col:9> 'int' <LValueToRValue>
          `-DeclRefExpr 0x1560282d0 <col:9> 'int' lvalue Var 0x15600ded0 'error' 'int'
