`-FunctionDecl 0x14a826600  line:1:1 evalcase 'int (union node *, int)'
  |-ParmVarDecl 0x14a80e248 <col:10, col:22> col:22 used n 'union node *'
  |-ParmVarDecl 0x14a80e2c8 <col:25, col:29> col:29 used flags 'int'
  `-CompoundStmt 0x14a829578 <line:2:1, line:28:1>
    |-DeclStmt 0x14a8267f0 <line:3:2, col:16>
    | `-VarDecl 0x14a826788 <col:2, col:14> col:14 used cp 'union node *'
    |-DeclStmt 0x14a826898 <line:4:2, col:18>
    | `-VarDecl 0x14a826830 <col:2, col:14> col:14 used patp 'union node *'
    |-DeclStmt 0x14a826a28 <line:5:2, col:24>
    | |-RecordDecl 0x14a8268b0 <col:2, col:9> col:9 struct arglist
    | `-VarDecl 0x14a8269a8 <col:2, col:17> col:17 referenced invalid arglist 'struct arglist'
    |-DeclStmt 0x14a826ae0 <line:6:2, col:16>
    | `-VarDecl 0x14a826a58 <col:2, col:15> col:6 used status 'int' cinit
    |   `-IntegerLiteral 0x14a826ac0 <col:15> 'int' 0
    |-BinaryOperator 0x14a826d90 <line:12:2, col:27> '<dependent type>' contains-errors '='
    | |-CXXDependentScopeMemberExpr 0x14a826cc8 <col:2, col:10> '<dependent type>' contains-errors lvalue .lastp
    | | `-RecoveryExpr 0x14a826ca0 <col:2> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x14a826c80 <col:2> 'struct arglist' lvalue Var 0x14a8269a8 'arglist' 'struct arglist'
    | `-UnaryOperator 0x14a826d78 <col:18, col:27> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   `-CXXDependentScopeMemberExpr 0x14a826d30 <col:19, col:27> '<dependent type>' contains-errors lvalue .list
    |     `-RecoveryExpr 0x14a826d10 <col:19> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x14a827030 <line:13:2, col:46> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x14a826ec0 <col:2> 'int ()' Function 0x14a826e08 'expandarg' 'int ()'
    | |-CXXDependentScopeMemberExpr 0x14a826f40 <col:12, col:21> '<dependent type>' contains-errors lvalue .expr
    | | `-RecoveryExpr 0x14a826f18 <col:12, col:15> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x14a826ee0 <col:12> 'union node *' lvalue ParmVar 0x14a80e248 'n' 'union node *'
    | |-UnaryOperator 0x14a826fa8 <col:27, col:28> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | `-RecoveryExpr 0x14a826f88 <col:28> '<dependent type>' contains-errors lvalue
    | `-RecoveryExpr 0x14a827010 <col:37> '<dependent type>' contains-errors lvalue
    |-ForStmt 0x14a8294d8 <line:14:2, line:25:2>
    | |-BinaryOperator 0x14a827130 <line:14:7, col:21> 'union node *' contains-errors '='
    | | |-DeclRefExpr 0x14a827068 <col:7> 'union node *' lvalue Var 0x14a826788 'cp' 'union node *'
    | | `-CXXDependentScopeMemberExpr 0x14a8270e8 <col:12, col:21> '<dependent type>' contains-errors lvalue .cases
    | |   `-RecoveryExpr 0x14a8270c0 <col:12, col:15> '<dependent type>' contains-errors lvalue
    | |     `-DeclRefExpr 0x14a827088 <col:12> 'union node *' lvalue ParmVar 0x14a80e248 'n' 'union node *'
    | |-<<<NULL>>>
    | |-BinaryOperator 0x14a827228 <col:29, col:47> 'int' contains-errors '&&'
    | | |-DeclRefExpr 0x14a827150 <col:29> 'union node *' lvalue Var 0x14a826788 'cp' 'union node *'
    | | `-BinaryOperator 0x14a827208 <col:35, col:47> 'int' contains-errors '=='
    | |   |-RecoveryExpr 0x14a8271e8 <col:35> '<dependent type>' contains-errors lvalue
    | |   `-IntegerLiteral 0x14a827188 <col:47> 'int' 0
    | |-BinaryOperator 0x14a827310 <col:51, col:67> 'union node *' contains-errors '='
    | | |-DeclRefExpr 0x14a827248 <col:51> 'union node *' lvalue Var 0x14a826788 'cp' 'union node *'
    | | `-CXXDependentScopeMemberExpr 0x14a8272c8 <col:56, col:67> '<dependent type>' contains-errors lvalue .next
    | |   `-RecoveryExpr 0x14a8272a0 <col:56, col:60> '<dependent type>' contains-errors lvalue
    | |     `-DeclRefExpr 0x14a827268 <col:56> 'union node *' lvalue Var 0x14a826788 'cp' 'union node *'
    | `-CompoundStmt 0x14a8294c0 <col:73, line:25:2>
    |   `-ForStmt 0x14a829488 <line:15:3, line:24:3>
    |     |-BinaryOperator 0x14a8273f8 <line:15:8, col:26> 'union node *' contains-errors '='
    |     | |-DeclRefExpr 0x14a827330 <col:8> 'union node *' lvalue Var 0x14a826830 'patp' 'union node *'
    |     | `-CXXDependentScopeMemberExpr 0x14a8273b0 <col:15, col:26> '<dependent type>' contains-errors lvalue .pattern
    |     |   `-RecoveryExpr 0x14a827388 <col:15, col:19> '<dependent type>' contains-errors lvalue
    |     |     `-DeclRefExpr 0x14a827350 <col:15> 'union node *' lvalue Var 0x14a826788 'cp' 'union node *'
    |     |-<<<NULL>>>
    |     |-ImplicitCastExpr 0x14a827438 <col:36> 'union node *' <LValueToRValue>
    |     | `-DeclRefExpr 0x14a827418 <col:36> 'union node *' lvalue Var 0x14a826830 'patp' 'union node *'
    |     |-BinaryOperator 0x14a827518 <col:43, col:61> 'union node *' contains-errors '='
    |     | |-DeclRefExpr 0x14a827450 <col:43> 'union node *' lvalue Var 0x14a826830 'patp' 'union node *'
    |     | `-CXXDependentScopeMemberExpr 0x14a8274d0 <col:50, col:61> '<dependent type>' contains-errors lvalue .next
    |     |   `-RecoveryExpr 0x14a8274a8 <col:50, col:56> '<dependent type>' contains-errors lvalue
    |     |     `-DeclRefExpr 0x14a827470 <col:50> 'union node *' lvalue Var 0x14a826830 'patp' 'union node *'
    |     `-CompoundStmt 0x14a829470 <col:67, line:24:3>
    |       `-IfStmt 0x14a829450 <line:16:4, line:23:4>
    |         |-CallExpr 0x14a828fa8 <line:16:8, col:42> '<dependent type>' contains-errors
    |         | |-DeclRefExpr 0x14a828eb8 <col:8> 'int ()' Function 0x14a828e00 'casematch' 'int ()'
    |         | |-DeclRefExpr 0x14a828ed8 <col:18> 'union node *' lvalue Var 0x14a826830 'patp' 'union node *'
    |         | `-CXXDependentScopeMemberExpr 0x14a828f60 <col:24, col:38> '<dependent type>' contains-errors lvalue ->text
    |         |   `-CXXDependentScopeMemberExpr 0x14a828f18 <col:24, col:32> '<dependent type>' contains-errors lvalue .list
    |         |     `-RecoveryExpr 0x14a828ef8 <col:24> '<dependent type>' contains-errors lvalue
    |         `-CompoundStmt 0x14a829430 <col:45, line:23:4>
    |           |-IfStmt 0x14a8293a8 <line:18:5, line:21:5>
    |           | |-BinaryOperator 0x14a829138 <line:18:9, col:37> 'int' contains-errors '&&'
    |           | | |-BinaryOperator 0x14a829118 <col:9, col:21> 'int' contains-errors '=='
    |           | | | |-RecoveryExpr 0x14a8290f8 <col:9> '<dependent type>' contains-errors lvalue
    |           | | | `-IntegerLiteral 0x14a828ff0 <col:21> 'int' 0
    |           | | `-CXXDependentScopeMemberExpr 0x14a829090 <col:26, col:37> '<dependent type>' contains-errors lvalue .body
    |           | |   `-RecoveryExpr 0x14a829068 <col:26, col:30> '<dependent type>' contains-errors lvalue
    |           | |     `-DeclRefExpr 0x14a829030 <col:26> 'union node *' lvalue Var 0x14a826788 'cp' 'union node *'
    |           | `-CompoundStmt 0x14a829390 <col:43, line:21:5>
    |           |   `-BinaryOperator 0x14a829370 <line:19:6, line:20:15> 'int' contains-errors '='
    |           |     |-DeclRefExpr 0x14a829158 <line:19:6> 'int' lvalue Var 0x14a826a58 'status' 'int'
    |           |     `-CallExpr 0x14a829340 <col:15, line:20:15> '<dependent type>' contains-errors
    |           |       |-DeclRefExpr 0x14a829258 <line:19:15> 'int ()' Function 0x14a8291a0 'evaltree' 'int ()'
    |           |       |-CXXDependentScopeMemberExpr 0x14a8292d8 <col:24, col:35> '<dependent type>' contains-errors lvalue .body
    |           |       | `-RecoveryExpr 0x14a8292b0 <col:24, col:28> '<dependent type>' contains-errors lvalue
    |           |       |   `-DeclRefExpr 0x14a829278 <col:24> 'union node *' lvalue Var 0x14a826788 'cp' 'union node *'
    |           |       `-DeclRefExpr 0x14a829320 <line:20:10> 'int' lvalue ParmVar 0x14a80e2c8 'flags' 'int'
    |           `-GotoStmt 0x14a829418 <line:22:5, col:10> 'out' 0x14a8293c8
    `-LabelStmt 0x14a829558 <line:26:1, line:27:9> 'out'
      `-ReturnStmt 0x14a829548 <col:2, col:9>
        `-ImplicitCastExpr 0x14a829530 <col:9> 'int' <LValueToRValue>
          `-DeclRefExpr 0x14a829510 <col:9> 'int' lvalue Var 0x14a826a58 'status' 'int'
