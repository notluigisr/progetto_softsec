`-FunctionDecl 0x1600e2a38  line:1:1 invalid expandrow 'int (int *, int *, int, int, int)'
  |-ParmVarDecl 0x1600e2728 <col:11, col:18> col:18 referenced invalid dest 'int *'
  |-ParmVarDecl 0x1600e27a8 <col:24, col:31> col:31 invalid src 'int *'
  |-ParmVarDecl 0x1600e2828 <col:36, col:40> col:40 used n 'int'
  |-ParmVarDecl 0x1600e28a8 <col:43, col:47> col:47 used z 'int'
  |-ParmVarDecl 0x1600e2928 <col:50, col:54> col:54 used xsize 'int'
  `-CompoundStmt 0x1600fc900 <col:61, line:33:1>
    |-DeclStmt 0x1600e2ba8 <line:3:5, col:14>
    | `-VarDecl 0x1600e2b20 <col:5, col:13> col:9 used x 'int' cinit
    |   `-IntegerLiteral 0x1600e2b88 <col:13> 'int' 0
    |-ForStmt 0x1600fc898 <line:5:5, line:31:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-BinaryOperator 0x1600e2c18 <line:5:12, col:16> 'int' '>'
    | | |-ImplicitCastExpr 0x1600e2c00 <col:12> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1600e2bc0 <col:12> 'int' lvalue ParmVar 0x1600e2828 'n' 'int'
    | | `-IntegerLiteral 0x1600e2be0 <col:16> 'int' 0
    | |-UnaryOperator 0x1600e2c58 <col:19, col:20> 'int' postfix '--'
    | | `-DeclRefExpr 0x1600e2c38 <col:19> 'int' lvalue ParmVar 0x1600e2828 'n' 'int'
    | `-CompoundStmt 0x1600fc860 <col:24, line:31:5>
    |   |-IfStmt 0x1600fbee0 <line:7:9, line:9:9>
    |   | |-BinaryOperator 0x1600fbe60 <line:7:13, col:32> 'int' contains-errors '&&'
    |   | | |-BinaryOperator 0x1600fbe00 <col:13, col:18> 'int' '=='
    |   | | | |-ImplicitCastExpr 0x1600e2de8 <col:13> 'int' <LValueToRValue>
    |   | | | | `-DeclRefExpr 0x1600e2cc0 <col:13> 'int' lvalue ParmVar 0x1600e2828 'n' 'int'
    |   | | | `-IntegerLiteral 0x1600e2ce0 <col:18> 'int' 1
    |   | | `-BinaryOperator 0x1600fbe40 <col:23, col:32> 'int' contains-errors '!='
    |   | |   |-RecoveryExpr 0x1600fbe20 <col:23> '<dependent type>' contains-errors lvalue
    |   | |   `-IntegerLiteral 0x1600e2d50 <col:32> 'int' 0
    |   | `-CompoundStmt 0x1600fbec8 <col:35, line:9:9>
    |   |   `-ReturnStmt 0x1600fbeb8 <line:8:13, col:20>
    |   |     `-ImplicitCastExpr 0x1600fbea0 <col:20> 'int' <LValueToRValue>
    |   |       `-DeclRefExpr 0x1600fbe80 <col:20> 'int' lvalue ParmVar 0x1600e2828 'n' 'int'
    |   |-IfStmt 0x1600fc048 <line:11:9, line:13:9>
    |   | |-UnaryOperator 0x1600fbfd0 <line:11:13, col:14> '<dependent type>' contains-errors prefix '!' cannot overflow
    |   | | `-ImplicitCastExpr 0x1600fbfb8 <col:14> '<dependent type>' contains-errors <LValueToRValue>
    |   | |   `-RecoveryExpr 0x1600fbf98 <col:14> '<dependent type>' contains-errors lvalue
    |   | `-CompoundStmt 0x1600fc030 <col:21, line:13:9>
    |   |   `-ReturnStmt 0x1600fc020 <line:12:13, col:20>
    |   |     `-RecoveryExpr 0x1600fc000 <col:20> '<dependent type>' contains-errors lvalue
    |   |-IfStmt 0x1600fc1c0 <line:14:9, line:16:9>
    |   | |-BinaryOperator 0x1600fc140 <line:14:13, col:25> 'int' contains-errors '>'
    |   | | |-BinaryOperator 0x1600fc120 <col:13, col:17> '<dependent type>' contains-errors '+'
    |   | | | |-DeclRefExpr 0x1600fc068 <col:13> 'int' lvalue Var 0x1600e2b20 'x' 'int'
    |   | | | `-RecoveryExpr 0x1600fc100 <col:17> '<dependent type>' contains-errors lvalue
    |   | | `-DeclRefExpr 0x1600fc0c0 <col:25> 'int' lvalue ParmVar 0x1600e2928 'xsize' 'int'
    |   | `-CompoundStmt 0x1600fc1a8 <col:32, line:16:9>
    |   |   `-ReturnStmt 0x1600fc198 <line:15:13, col:21>
    |   |     `-UnaryOperator 0x1600fc180 <col:20, col:21> 'int' prefix '-'
    |   |       `-IntegerLiteral 0x1600fc160 <col:21> 'int' 1
    |   |-CompoundAssignOperator 0x1600fc268 <line:17:9, col:14> 'int' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    |   | |-DeclRefExpr 0x1600fc1e0 <col:9> 'int' lvalue Var 0x1600e2b20 'x' 'int'
    |   | `-RecoveryExpr 0x1600fc248 <col:14> '<dependent type>' contains-errors lvalue
    |   `-IfStmt 0x1600fc830 <line:18:9, line:30:9> has_else
    |     |-BinaryOperator 0x1600fc328 <line:18:13, col:21> '<dependent type>' contains-errors '&'
    |     | |-RecoveryExpr 0x1600fc2e8 <col:13> '<dependent type>' contains-errors lvalue
    |     | `-RecoveryExpr 0x1600fc308 <col:21> '<dependent type>' contains-errors lvalue
    |     |-CompoundStmt 0x1600fc548 <col:36, line:24:9>
    |     | `-WhileStmt 0x1600fc528 <line:19:13, line:22:13>
    |     |   |-UnaryOperator 0x1600fc398 <line:19:20, col:25> '<dependent type>' contains-errors postfix '--' cannot overflow
    |     |   | `-RecoveryExpr 0x1600fc378 <col:20> '<dependent type>' contains-errors lvalue
    |     |   `-CompoundStmt 0x1600fc508 <col:29, line:22:13>
    |     |     |-BinaryOperator 0x1600fc450 <line:20:17, col:29> '<dependent type>' contains-errors '='
    |     |     | |-UnaryOperator 0x1600fc3e8 <col:17, col:18> '<dependent type>' contains-errors prefix '*' cannot overflow
    |     |     | | `-ImplicitCastExpr 0x1600fc3d0 <col:18> '<dependent type>' contains-errors <LValueToRValue>
    |     |     | |   `-RecoveryExpr 0x1600fc3b0 <col:18> '<dependent type>' contains-errors lvalue
    |     |     | `-UnaryOperator 0x1600fc438 <col:25, col:29> '<dependent type>' contains-errors prefix '*' cannot overflow
    |     |     |   `-UnaryOperator 0x1600fc420 <col:26, col:29> '<dependent type>' contains-errors postfix '++' cannot overflow
    |     |     |     `-RecoveryExpr 0x1600fc400 <col:26> '<dependent type>' contains-errors lvalue
    |     |     `-CompoundAssignOperator 0x1600fc4d8 <line:21:17, col:25> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    |     |       |-RecoveryExpr 0x1600fc490 <col:17> '<dependent type>' contains-errors lvalue
    |     |       | `-DeclRefExpr 0x1600fc470 <col:17> 'int *' lvalue ParmVar 0x1600e2728 'dest' 'int *'
    |     |       `-DeclRefExpr 0x1600fc4b8 <col:25> 'int' lvalue ParmVar 0x1600e28a8 'z' 'int'
    |     `-CompoundStmt 0x1600fc818 <line:24:16, line:30:9>
    |       `-WhileStmt 0x1600fc7f8 <line:26:13, line:29:13>
    |         |-UnaryOperator 0x1600fc600 <line:26:20, col:25> '<dependent type>' contains-errors postfix '--' cannot overflow
    |         | `-RecoveryExpr 0x1600fc5e0 <col:20> '<dependent type>' contains-errors lvalue
    |         `-CompoundStmt 0x1600fc7d8 <col:29, line:29:13>
    |           |-BinaryOperator 0x1600fc720 <line:27:17, col:25> '<dependent type>' contains-errors '='
    |           | |-UnaryOperator 0x1600fc6e8 <col:17, col:18> '<dependent type>' contains-errors prefix '*' cannot overflow
    |           | | `-ImplicitCastExpr 0x1600fc6d0 <col:18> '<dependent type>' contains-errors <LValueToRValue>
    |           | |   `-RecoveryExpr 0x1600fc618 <col:18> '<dependent type>' contains-errors lvalue
    |           | `-RecoveryExpr 0x1600fc700 <col:25> '<dependent type>' contains-errors lvalue
    |           `-CompoundAssignOperator 0x1600fc7a8 <line:28:17, col:25> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    |             |-RecoveryExpr 0x1600fc760 <col:17> '<dependent type>' contains-errors lvalue
    |             | `-DeclRefExpr 0x1600fc740 <col:17> 'int *' lvalue ParmVar 0x1600e2728 'dest' 'int *'
    |             `-DeclRefExpr 0x1600fc788 <col:25> 'int' lvalue ParmVar 0x1600e28a8 'z' 'int'
    `-ReturnStmt 0x1600fc8f0 <line:32:5, col:12>
      `-IntegerLiteral 0x1600fc8d0 <col:12> 'int' 0
