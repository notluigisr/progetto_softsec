`-FunctionDecl 0x1579283e0  line:1:13 invalid fts3SqlExec 'void (int *, int *, int, int **)' static
  |-ParmVarDecl 0x157928108 <line:2:3, col:8> col:8 used pRC 'int *'
  |-ParmVarDecl 0x1579281a0 <line:3:3, col:14> col:14 invalid p 'int *'
  |-ParmVarDecl 0x157928220 <line:4:3, col:7> col:7 used eStmt 'int'
  |-ParmVarDecl 0x1579282e0 <line:5:3, col:19> col:19 invalid apVal 'int **'
  `-CompoundStmt 0x157941ec8 <line:6:2, line:16:1>
    |-DeclStmt 0x157928560 <line:8:3, col:9>
    | `-VarDecl 0x1579284f8 <col:3, col:7> col:7 used rc 'int'
    |-IfStmt 0x1579285f0 <line:9:3, col:14>
    | |-ImplicitCastExpr 0x1579285c8 <col:7, col:8> 'int' <LValueToRValue>
    | | `-UnaryOperator 0x1579285b0 <col:7, col:8> 'int' lvalue prefix '*' cannot overflow
    | |   `-ImplicitCastExpr 0x157928598 <col:8> 'int *' <LValueToRValue>
    | |     `-DeclRefExpr 0x157928578 <col:8> 'int *' lvalue ParmVar 0x157928108 'pRC' 'int *'
    | `-ReturnStmt 0x1579285e0 <col:14>
    |-BinaryOperator 0x157941928 <line:10:3, col:43> 'int' contains-errors '='
    | |-DeclRefExpr 0x157928610 <col:3> 'int' lvalue Var 0x1579284f8 'rc' 'int'
    | `-CallExpr 0x1579418e8 <col:8, col:43> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x157928790 <col:8> 'int ()' Function 0x1579286d8 'fts3SqlStmt' 'int ()'
    |   |-RecoveryExpr 0x1579287b0 <col:20> '<dependent type>' contains-errors lvalue
    |   |-DeclRefExpr 0x1579287d0 <col:23> 'int' lvalue ParmVar 0x157928220 'eStmt' 'int'
    |   |-UnaryOperator 0x1579418d0 <col:30, col:31> 'int *' prefix '&' cannot overflow
    |   | `-DeclRefExpr 0x1579418b0 <col:31> 'int' lvalue ParmVar 0x157928220 'eStmt' 'int'
    |   `-RecoveryExpr 0x157941830 <col:38> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x157941e00 <line:11:3, line:14:3>
    | |-BinaryOperator 0x1579419c0 <line:11:7, col:11> 'int' contains-errors '=='
    | | |-DeclRefExpr 0x157941948 <col:7> 'int' lvalue Var 0x1579284f8 'rc' 'int'
    | | `-RecoveryExpr 0x1579419a0 <col:11> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x157941de0 <col:22, line:14:3>
    |   |-CallExpr 0x157941b88 <line:12:5, col:23> 'int'
    |   | |-ImplicitCastExpr 0x157941b70 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x157941ac0 <col:5> 'int ()' Function 0x157941a08 'sqlite3_step' 'int ()'
    |   | `-ImplicitCastExpr 0x157941bb0 <col:18> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x157941b20 <col:18> 'int' lvalue ParmVar 0x157928220 'eStmt' 'int'
    |   `-BinaryOperator 0x157941dc0 <line:13:5, col:29> 'int' '='
    |     |-DeclRefExpr 0x157941bc8 <col:5> 'int' lvalue Var 0x1579284f8 'rc' 'int'
    |     `-CallExpr 0x157941d80 <col:10, col:29> 'int'
    |       |-ImplicitCastExpr 0x157941d68 <col:10> 'int (*)()' <FunctionToPointerDecay>
    |       | `-DeclRefExpr 0x157941cc8 <col:10> 'int ()' Function 0x157941c10 'sqlite3_reset' 'int ()'
    |       `-ImplicitCastExpr 0x157941da8 <col:24> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x157941d48 <col:24> 'int' lvalue ParmVar 0x157928220 'eStmt' 'int'
    `-BinaryOperator 0x157941ea8 <line:15:3, col:10> 'int' '='
      |-UnaryOperator 0x157941e58 <col:3, col:4> 'int' lvalue prefix '*' cannot overflow
      | `-ImplicitCastExpr 0x157941e40 <col:4> 'int *' <LValueToRValue>
      |   `-DeclRefExpr 0x157941e20 <col:4> 'int *' lvalue ParmVar 0x157928108 'pRC' 'int *'
      `-ImplicitCastExpr 0x157941e90 <col:10> 'int' <LValueToRValue>
        `-DeclRefExpr 0x157941e70 <col:10> 'int' lvalue Var 0x1579284f8 'rc' 'int'
