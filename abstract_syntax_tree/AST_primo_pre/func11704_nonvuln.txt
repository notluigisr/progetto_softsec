`-FunctionDecl 0x12d02b1a0  line:1:6 invalid ComparisonQuantized 'void (const int *, const int *, int *, int)'
  |-ParmVarDecl 0x12d02aef0 <col:26, col:46> col:46 invalid input1 'const int *'
  |-ParmVarDecl 0x12d02af70 <col:54, col:74> col:74 invalid input2 'const int *'
  |-ParmVarDecl 0x12d02b028 <line:2:26, col:40> col:40 invalid output 'int *'
  |-ParmVarDecl 0x12d02b0a8 <col:48, col:53> col:53 invalid requires_broadcast 'int'
  `-CompoundStmt 0x12d8edbf8 <col:73, line:35:1>
    `-IfStmt 0x12d8edbd8 <line:3:3, line:34:3>
      |-BinaryOperator 0x12d02b448 <line:3:7, col:55> 'int' contains-errors '||'
      | |-BinaryOperator 0x12d02b3e8 <col:7, col:23> 'int' contains-errors '=='
      | | |-CXXDependentScopeMemberExpr 0x12d02b288 <col:7, col:15> '<dependent type>' contains-errors lvalue ->type
      | | | `-RecoveryExpr 0x12d02b268 <col:7> '<dependent type>' contains-errors lvalue
      | | `-RecoveryExpr 0x12d02b3c8 <col:23> '<dependent type>' contains-errors lvalue
      | `-BinaryOperator 0x12d02b428 <col:39, col:55> 'int' contains-errors '=='
      |   |-CXXDependentScopeMemberExpr 0x12d02b328 <col:39, col:47> '<dependent type>' contains-errors lvalue ->type
      |   | `-RecoveryExpr 0x12d02b308 <col:39> '<dependent type>' contains-errors lvalue
      |   `-RecoveryExpr 0x12d02b408 <col:55> '<dependent type>' contains-errors lvalue
      `-CompoundStmt 0x12d8edb88 <col:68, line:34:3>
        |-DeclStmt 0x12d02b5c8 <line:4:5, col:52>
        | `-VarDecl 0x12d02b480 <col:5, col:42> col:10 used input1_offset 'int' auto cinit
        |   `-UnaryOperator 0x12d02b5b0 <col:26, col:42> '<dependent type>' contains-errors prefix '-' cannot overflow
        |     `-ImplicitCastExpr 0x12d02b598 <col:27, col:42> '<dependent type>' contains-errors <LValueToRValue>
        |       `-CXXDependentScopeMemberExpr 0x12d02b550 <col:27, col:42> '<dependent type>' contains-errors lvalue .zero_point
        |         `-CXXDependentScopeMemberExpr 0x12d02b508 <col:27, col:35> '<dependent type>' contains-errors lvalue ->params
        |           `-RecoveryExpr 0x12d02b4e8 <col:27> '<dependent type>' contains-errors lvalue
        |-DeclStmt 0x12d8ed348 <line:5:5, col:52>
        | `-VarDecl 0x12d8ed200 <col:5, col:42> col:10 used input2_offset 'int' auto cinit
        |   `-UnaryOperator 0x12d8ed330 <col:26, col:42> '<dependent type>' contains-errors prefix '-' cannot overflow
        |     `-ImplicitCastExpr 0x12d8ed318 <col:27, col:42> '<dependent type>' contains-errors <LValueToRValue>
        |       `-CXXDependentScopeMemberExpr 0x12d8ed2d0 <col:27, col:42> '<dependent type>' contains-errors lvalue .zero_point
        |         `-CXXDependentScopeMemberExpr 0x12d8ed288 <col:27, col:35> '<dependent type>' contains-errors lvalue ->params
        |           `-RecoveryExpr 0x12d8ed268 <col:27> '<dependent type>' contains-errors lvalue
        |-DeclStmt 0x12d8ed400 <line:6:5, col:29>
        | `-VarDecl 0x12d8ed378 <col:5, col:28> col:15 used left_shift 'const int' cinit
        |   `-IntegerLiteral 0x12d8ed3e0 <col:28> 'int' 8
        |-DeclStmt 0x12d8ed498 <line:10:5, col:21>
        | `-VarDecl 0x12d8ed430 <col:5, col:9> col:9 used input1_shift 'int'
        |-DeclStmt 0x12d8ed530 <line:11:5, col:21>
        | `-VarDecl 0x12d8ed4c8 <col:5, col:9> col:9 used input2_shift 'int'
        |-CallExpr 0x12d8ed848 <line:12:5, col:79> '<dependent type>' contains-errors
        | |-DeclRefExpr 0x12d8ed6a0 <col:5> 'int ()' Function 0x12d8ed5e8 'QuantizeMultiplier' 'int ()'
        | |-CXXDependentScopeMemberExpr 0x12d8ed728 <col:24, col:39> '<dependent type>' contains-errors lvalue .scale
        | | `-CXXDependentScopeMemberExpr 0x12d8ed6e0 <col:24, col:32> '<dependent type>' contains-errors lvalue ->params
        | |   `-RecoveryExpr 0x12d8ed6c0 <col:24> '<dependent type>' contains-errors lvalue
        | |-UnaryOperator 0x12d8ed830 <col:46, col:47> '<dependent type>' contains-errors prefix '&' cannot overflow
        | | `-RecoveryExpr 0x12d8ed810 <col:47> '<dependent type>' contains-errors lvalue
        | `-UnaryOperator 0x12d8ed7c0 <col:66, col:67> 'int *' prefix '&' cannot overflow
        |   `-DeclRefExpr 0x12d8ed7a0 <col:67> 'int' lvalue Var 0x12d8ed430 'input1_shift' 'int'
        |-CallExpr 0x12d8eda28 <line:13:5, col:79> '<dependent type>' contains-errors
        | |-DeclRefExpr 0x12d8ed880 <col:5> 'int ()' Function 0x12d8ed5e8 'QuantizeMultiplier' 'int ()'
        | |-CXXDependentScopeMemberExpr 0x12d8ed908 <col:24, col:39> '<dependent type>' contains-errors lvalue .scale
        | | `-CXXDependentScopeMemberExpr 0x12d8ed8c0 <col:24, col:32> '<dependent type>' contains-errors lvalue ->params
        | |   `-RecoveryExpr 0x12d8ed8a0 <col:24> '<dependent type>' contains-errors lvalue
        | |-UnaryOperator 0x12d8eda10 <col:46, col:47> '<dependent type>' contains-errors prefix '&' cannot overflow
        | | `-RecoveryExpr 0x12d8ed9f0 <col:47> '<dependent type>' contains-errors lvalue
        | `-UnaryOperator 0x12d8ed9a0 <col:66, col:67> 'int *' prefix '&' cannot overflow
        |   `-DeclRefExpr 0x12d8ed980 <col:67> 'int' lvalue Var 0x12d8ed4c8 'input2_shift' 'int'
        `-IfStmt 0x12d8edb58 <line:23:5, line:33:5> has_else
          |-RecoveryExpr 0x12d8edb18 <line:23:9> '<dependent type>' contains-errors lvalue
          |-CompoundStmt 0x12d8edb38 <col:29, line:28:5>
          `-CompoundStmt 0x12d8edb48 <col:12, line:33:5>
