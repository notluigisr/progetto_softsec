`-FunctionDecl 0x125114288  line:1:14 invalid rfc2047_decode_word 'char *(const char *, int, enum ContentEncoding)' static
  |-ParmVarDecl 0x1250faad8 <col:34, col:46> col:46 used s 'const char *'
  |-ParmVarDecl 0x1250fab70 <col:49, col:56> col:56 invalid len 'int'
  |-ParmVarDecl 0x1250fb118 <col:61, col:82> col:82 invalid enc 'enum ContentEncoding'
  `-CompoundStmt 0x124831358 <line:2:1, line:44:1>
    |-DeclStmt 0x125114400 <line:3:3, col:21>
    | `-VarDecl 0x125114360 <col:3, col:20> col:15 used it 'const char *' cinit
    |   `-ImplicitCastExpr 0x1251143e8 <col:20> 'const char *' <LValueToRValue>
    |     `-DeclRefExpr 0x1251143c8 <col:20> 'const char *' lvalue ParmVar 0x1250faad8 's' 'const char *'
    |-DeclStmt 0x1251144f8 <line:4:3, col:28>
    | `-VarDecl 0x125114430 <col:3, col:25> col:15 used end 'const char *' cinit
    |   `-BinaryOperator 0x1251144d8 <col:21, col:25> '<dependent type>' contains-errors '+'
    |     |-DeclRefExpr 0x125114498 <col:21> 'const char *' lvalue ParmVar 0x1250faad8 's' 'const char *'
    |     `-RecoveryExpr 0x1251144b8 <col:25> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x124831180 <line:6:3, line:40:3> has_else
    | |-BinaryOperator 0x125114588 <line:6:7, col:14> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x125114510 <col:7> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x125114568 <col:14> '<dependent type>' contains-errors lvalue
    | |-CompoundStmt 0x124830770 <line:7:3, line:28:3>
    | | |-DeclStmt 0x125114790 <line:8:5, col:30>
    | | | |-RecordDecl 0x1251145a8 <col:5, col:12> col:12 struct Buffer
    | | | `-VarDecl 0x1251146a8 <col:5, col:19> col:19 invalid buf 'struct Buffer'
    | | |-ForStmt 0x124830620 <line:9:5, line:25:5>
    | | | |-<<<NULL>>>
    | | | |-<<<NULL>>>
    | | | |-BinaryOperator 0x125114818 <line:9:12, col:17> 'int' contains-errors '<'
    | | | | |-ImplicitCastExpr 0x1251147e8 <col:12> 'const char *' <LValueToRValue>
    | | | | | `-DeclRefExpr 0x1251147a8 <col:12> 'const char *' lvalue Var 0x125114360 'it' 'const char *'
    | | | | `-ImplicitCastExpr 0x125114800 <col:17> 'const char *' contains-errors <LValueToRValue>
    | | | |   `-DeclRefExpr 0x1251147c8 <col:17> 'const char *' contains-errors lvalue Var 0x125114430 'end' 'const char *'
    | | | |-UnaryOperator 0x125114858 <col:22, col:24> 'const char *' prefix '++'
    | | | | `-DeclRefExpr 0x125114838 <col:24> 'const char *' lvalue Var 0x125114360 'it' 'const char *'
    | | | `-CompoundStmt 0x124830608 <line:10:5, line:25:5>
    | | |   `-IfStmt 0x1248305d8 <line:11:7, line:24:7> has_else
    | | |     |-BinaryOperator 0x125114908 <line:11:11, col:18> 'int' '=='
    | | |     | |-ImplicitCastExpr 0x1251148f0 <col:11, col:12> 'int' <IntegralCast>
    | | |     | | `-ImplicitCastExpr 0x1251148d8 <col:11, col:12> 'char' <LValueToRValue>
    | | |     | |   `-UnaryOperator 0x1251148a8 <col:11, col:12> 'const char' lvalue prefix '*' cannot overflow
    | | |     | |     `-ImplicitCastExpr 0x125114890 <col:12> 'const char *' <LValueToRValue>
    | | |     | |       `-DeclRefExpr 0x125114870 <col:12> 'const char *' lvalue Var 0x125114360 'it' 'const char *'
    | | |     | `-CharacterLiteral 0x1251148c0 <col:18> 'int' 95
    | | |     |-CompoundStmt 0x125114b20 <line:12:7, line:14:7>
    | | |     | `-CallExpr 0x125114af0 <line:13:9, col:36> '<dependent type>' contains-errors
    | | |     |   |-DeclRefExpr 0x125114a80 <col:9> 'int ()' Function 0x1251149c8 'mutt_buffer_addch' 'int ()'
    | | |     |   |-UnaryOperator 0x125114ac0 <col:27, col:28> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | |     |   | `-RecoveryExpr 0x125114aa0 <col:28> '<dependent type>' contains-errors lvalue
    | | |     |   `-CharacterLiteral 0x125114ad8 <col:33> 'int' 32
    | | |     `-IfStmt 0x1248305a8 <line:15:12, line:24:7> has_else
    | | |       |-BinaryOperator 0x1248300f0 <line:15:16, line:16:55> 'int' '&&'
    | | |       | |-BinaryOperator 0x125114ff8 <line:15:16, col:71> 'int' '&&'
    | | |       | | |-ParenExpr 0x125114bf0 <col:16, col:27> 'int'
    | | |       | | | `-BinaryOperator 0x125114bd0 <col:17, col:24> 'int' '=='
    | | |       | | |   |-ImplicitCastExpr 0x125114bb8 <col:17, col:18> 'int' <IntegralCast>
    | | |       | | |   | `-ImplicitCastExpr 0x125114ba0 <col:17, col:18> 'char' <LValueToRValue>
    | | |       | | |   |   `-UnaryOperator 0x125114b70 <col:17, col:18> 'const char' lvalue prefix '*' cannot overflow
    | | |       | | |   |     `-ImplicitCastExpr 0x125114b58 <col:18> 'const char *' <LValueToRValue>
    | | |       | | |   |       `-DeclRefExpr 0x125114b38 <col:18> 'const char *' lvalue Var 0x125114360 'it' 'const char *'
    | | |       | | |   `-CharacterLiteral 0x125114b88 <col:24> 'int' 61
    | | |       | | `-ParenExpr 0x125114fd8 <col:32, col:71> 'int'
    | | |       | |   `-BinaryOperator 0x125114fb8 <col:33, col:70> 'int' '&&'
    | | |       | |     |-UnaryOperator 0x125114d30 <col:33, col:47> 'int' prefix '!' cannot overflow
    | | |       | |     | `-ParenExpr 0x125114d10 <col:34, col:47> 'int'
    | | |       | |     |   `-BinaryOperator 0x125114cf0 <col:35, col:44> 'int' '&'
    | | |       | |     |     |-ImplicitCastExpr 0x125114cd8 <col:35, col:39> 'int' <IntegralCast>
    | | |       | |     |     | `-ImplicitCastExpr 0x125114cc0 <col:35, col:39> 'char' <LValueToRValue>
    | | |       | |     |     |   `-ArraySubscriptExpr 0x125114c68 <col:35, col:39> 'const char' lvalue
    | | |       | |     |     |     |-ImplicitCastExpr 0x125114c50 <col:35> 'const char *' <LValueToRValue>
    | | |       | |     |     |     | `-DeclRefExpr 0x125114c10 <col:35> 'const char *' lvalue Var 0x125114360 'it' 'const char *'
    | | |       | |     |     |     `-IntegerLiteral 0x125114c30 <col:38> 'int' 1
    | | |       | |     |     `-UnaryOperator 0x125114ca8 <col:43, col:44> 'int' prefix '~' cannot overflow
    | | |       | |     |       `-IntegerLiteral 0x125114c88 <col:44> 'int' 127
    | | |       | |     `-BinaryOperator 0x125114f98 <col:52, col:70> 'int' '!='
    | | |       | |       |-CallExpr 0x125114f08 <col:52, col:64> 'int'
    | | |       | |       | |-ImplicitCastExpr 0x125114ef0 <col:52> 'int (*)()' <FunctionToPointerDecay>
    | | |       | |       | | `-DeclRefExpr 0x125114e28 <col:52> 'int ()' Function 0x125114d70 'hexval' 'int ()'
    | | |       | |       | `-ImplicitCastExpr 0x125114f48 <col:59, col:63> 'int' <IntegralCast>
    | | |       | |       |   `-ImplicitCastExpr 0x125114f30 <col:59, col:63> 'char' <LValueToRValue>
    | | |       | |       |     `-ArraySubscriptExpr 0x125114ea0 <col:59, col:63> 'const char' lvalue
    | | |       | |       |       |-ImplicitCastExpr 0x125114e88 <col:59> 'const char *' <LValueToRValue>
    | | |       | |       |       | `-DeclRefExpr 0x125114e48 <col:59> 'const char *' lvalue Var 0x125114360 'it' 'const char *'
    | | |       | |       |       `-IntegerLiteral 0x125114e68 <col:62> 'int' 1
    | | |       | |       `-UnaryOperator 0x125114f80 <col:69, col:70> 'int' prefix '-'
    | | |       | |         `-IntegerLiteral 0x125114f60 <col:70> 'int' 1
    | | |       | `-ParenExpr 0x1248300d0 <line:16:16, col:55> 'int'
    | | |       |   `-BinaryOperator 0x1248300b0 <col:17, col:54> 'int' '&&'
    | | |       |     |-UnaryOperator 0x125115138 <col:17, col:31> 'int' prefix '!' cannot overflow
    | | |       |     | `-ParenExpr 0x125115118 <col:18, col:31> 'int'
    | | |       |     |   `-BinaryOperator 0x1251150f8 <col:19, col:28> 'int' '&'
    | | |       |     |     |-ImplicitCastExpr 0x1251150e0 <col:19, col:23> 'int' <IntegralCast>
    | | |       |     |     | `-ImplicitCastExpr 0x1251150c8 <col:19, col:23> 'char' <LValueToRValue>
    | | |       |     |     |   `-ArraySubscriptExpr 0x125115070 <col:19, col:23> 'const char' lvalue
    | | |       |     |     |     |-ImplicitCastExpr 0x125115058 <col:19> 'const char *' <LValueToRValue>
    | | |       |     |     |     | `-DeclRefExpr 0x125115018 <col:19> 'const char *' lvalue Var 0x125114360 'it' 'const char *'
    | | |       |     |     |     `-IntegerLiteral 0x125115038 <col:22> 'int' 2
    | | |       |     |     `-UnaryOperator 0x1251150b0 <col:27, col:28> 'int' prefix '~' cannot overflow
    | | |       |     |       `-IntegerLiteral 0x125115090 <col:28> 'int' 127
    | | |       |     `-BinaryOperator 0x124830090 <col:36, col:54> 'int' '!='
    | | |       |       |-CallExpr 0x124830000 <col:36, col:48> 'int'
    | | |       |       | |-ImplicitCastExpr 0x1251151e8 <col:36> 'int (*)()' <FunctionToPointerDecay>
    | | |       |       | | `-DeclRefExpr 0x125115150 <col:36> 'int ()' Function 0x125114d70 'hexval' 'int ()'
    | | |       |       | `-ImplicitCastExpr 0x124830040 <col:43, col:47> 'int' <IntegralCast>
    | | |       |       |   `-ImplicitCastExpr 0x124830028 <col:43, col:47> 'char' <LValueToRValue>
    | | |       |       |     `-ArraySubscriptExpr 0x1251151c8 <col:43, col:47> 'const char' lvalue
    | | |       |       |       |-ImplicitCastExpr 0x1251151b0 <col:43> 'const char *' <LValueToRValue>
    | | |       |       |       | `-DeclRefExpr 0x125115170 <col:43> 'const char *' lvalue Var 0x125114360 'it' 'const char *'
    | | |       |       |       `-IntegerLiteral 0x125115190 <col:46> 'int' 2
    | | |       |       `-UnaryOperator 0x124830078 <col:53, col:54> 'int' prefix '-'
    | | |       |         `-IntegerLiteral 0x124830058 <col:54> 'int' 1
    | | |       |-CompoundStmt 0x124830498 <line:17:7, line:20:7>
    | | |       | |-CallExpr 0x1248303f8 <line:18:9, col:69> '<dependent type>' contains-errors
    | | |       | | |-DeclRefExpr 0x124830110 <col:9> 'int ()' Function 0x1251149c8 'mutt_buffer_addch' 'int ()'
    | | |       | | |-UnaryOperator 0x124830150 <col:27, col:28> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | |       | | | `-RecoveryExpr 0x124830130 <col:28> '<dependent type>' contains-errors lvalue
    | | |       | | `-BinaryOperator 0x1248303d8 <col:33, col:68> 'int' '|'
    | | |       | |   |-ParenExpr 0x1248302b0 <col:33, col:52> 'int'
    | | |       | |   | `-BinaryOperator 0x124830290 <col:34, col:51> 'int' '<<'
    | | |       | |   |   |-CallExpr 0x124830218 <col:34, col:46> 'int'
    | | |       | |   |   | |-ImplicitCastExpr 0x124830200 <col:34> 'int (*)()' <FunctionToPointerDecay>
    | | |       | |   |   | | `-DeclRefExpr 0x124830168 <col:34> 'int ()' Function 0x125114d70 'hexval' 'int ()'
    | | |       | |   |   | `-ImplicitCastExpr 0x124830258 <col:41, col:45> 'int' <IntegralCast>
    | | |       | |   |   |   `-ImplicitCastExpr 0x124830240 <col:41, col:45> 'char' <LValueToRValue>
    | | |       | |   |   |     `-ArraySubscriptExpr 0x1248301e0 <col:41, col:45> 'const char' lvalue
    | | |       | |   |   |       |-ImplicitCastExpr 0x1248301c8 <col:41> 'const char *' <LValueToRValue>
    | | |       | |   |   |       | `-DeclRefExpr 0x124830188 <col:41> 'const char *' lvalue Var 0x125114360 'it' 'const char *'
    | | |       | |   |   |       `-IntegerLiteral 0x1248301a8 <col:44> 'int' 1
    | | |       | |   |   `-IntegerLiteral 0x124830270 <col:51> 'int' 4
    | | |       | |   `-CallExpr 0x124830380 <col:56, col:68> 'int'
    | | |       | |     |-ImplicitCastExpr 0x124830368 <col:56> 'int (*)()' <FunctionToPointerDecay>
    | | |       | |     | `-DeclRefExpr 0x1248302d0 <col:56> 'int ()' Function 0x125114d70 'hexval' 'int ()'
    | | |       | |     `-ImplicitCastExpr 0x1248303c0 <col:63, col:67> 'int' <IntegralCast>
    | | |       | |       `-ImplicitCastExpr 0x1248303a8 <col:63, col:67> 'char' <LValueToRValue>
    | | |       | |         `-ArraySubscriptExpr 0x124830348 <col:63, col:67> 'const char' lvalue
    | | |       | |           |-ImplicitCastExpr 0x124830330 <col:63> 'const char *' <LValueToRValue>
    | | |       | |           | `-DeclRefExpr 0x1248302f0 <col:63> 'const char *' lvalue Var 0x125114360 'it' 'const char *'
    | | |       | |           `-IntegerLiteral 0x124830310 <col:66> 'int' 2
    | | |       | `-CompoundAssignOperator 0x124830468 <line:19:9, col:15> 'const char *' '+=' ComputeLHSTy='const char *' ComputeResultTy='const char *'
    | | |       |   |-DeclRefExpr 0x124830428 <col:9> 'const char *' lvalue Var 0x125114360 'it' 'const char *'
    | | |       |   `-IntegerLiteral 0x124830448 <col:15> 'int' 2
    | | |       `-CompoundStmt 0x124830590 <line:22:7, line:24:7>
    | | |         `-CallExpr 0x124830560 <line:23:9, col:36> '<dependent type>' contains-errors
    | | |           |-DeclRefExpr 0x1248304b8 <col:9> 'int ()' Function 0x1251149c8 'mutt_buffer_addch' 'int ()'
    | | |           |-UnaryOperator 0x1248304f8 <col:27, col:28> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | |           | `-RecoveryExpr 0x1248304d8 <col:28> '<dependent type>' contains-errors lvalue
    | | |           `-UnaryOperator 0x124830548 <col:33, col:34> 'const char' lvalue prefix '*' cannot overflow
    | | |             `-ImplicitCastExpr 0x124830530 <col:34> 'const char *' <LValueToRValue>
    | | |               `-DeclRefExpr 0x124830510 <col:34> 'const char *' lvalue Var 0x125114360 'it' 'const char *'
    | | |-CallExpr 0x1248306c8 <line:26:5, col:33> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x124830658 <col:5> 'int ()' Function 0x1251149c8 'mutt_buffer_addch' 'int ()'
    | | | |-UnaryOperator 0x124830698 <col:23, col:24> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | | | `-RecoveryExpr 0x124830678 <col:24> '<dependent type>' contains-errors lvalue
    | | | `-CharacterLiteral 0x1248306b0 <col:29> 'int' 0
    | | `-ReturnStmt 0x124830760 <line:27:5, col:16>
    | |   `-CXXDependentScopeMemberExpr 0x124830718 <col:12, col:16> '<dependent type>' contains-errors lvalue .data
    | |     `-RecoveryExpr 0x1248306f8 <col:12> '<dependent type>' contains-errors lvalue
    | `-IfStmt 0x124831160 <line:29:8, line:40:3>
    |   |-BinaryOperator 0x124830818 <line:29:12, col:19> 'int' contains-errors '=='
    |   | |-RecoveryExpr 0x1248307a0 <col:12> '<dependent type>' contains-errors lvalue
    |   | `-RecoveryExpr 0x1248307f8 <col:19> '<dependent type>' contains-errors lvalue
    |   `-CompoundStmt 0x124831128 <line:30:3, line:40:3>
    |     |-DeclStmt 0x124830ac0 <line:31:5, col:49>
    |     | `-VarDecl 0x124830850 <col:5, col:48> col:11 used out 'char *' cinit
    |     |   `-CallExpr 0x124830a98 <col:17, col:48> '<dependent type>' contains-errors
    |     |     |-DeclRefExpr 0x124830998 <col:17> 'int ()' Function 0x1248308e0 'mutt_mem_malloc' 'int ()'
    |     |     `-BinaryOperator 0x124830a78 <col:33, col:47> '<dependent type>' contains-errors '+'
    |     |       |-BinaryOperator 0x124830a38 <col:33, col:43> '<dependent type>' contains-errors '/'
    |     |       | |-BinaryOperator 0x1248309f8 <col:33, col:37> '<dependent type>' contains-errors '*'
    |     |       | | |-IntegerLiteral 0x1248309b8 <col:33> 'int' 3
    |     |       | | `-RecoveryExpr 0x1248309d8 <col:37> '<dependent type>' contains-errors lvalue
    |     |       | `-IntegerLiteral 0x124830a18 <col:43> 'int' 4
    |     |       `-IntegerLiteral 0x124830a58 <col:47> 'int' 1
    |     |-DeclStmt 0x124830d10 <line:32:5, col:40>
    |     | `-VarDecl 0x124830af0 <col:5, col:39> col:9 used dlen 'int' cinit
    |     |   `-CallExpr 0x124830cb0 <col:16, col:39> 'int' contains-errors
    |     |     |-ImplicitCastExpr 0x124830c98 <col:16> 'int (*)()' <FunctionToPointerDecay>
    |     |     | `-DeclRefExpr 0x124830c38 <col:16> 'int ()' Function 0x124830b80 'mutt_b64_decode' 'int ()'
    |     |     |-ImplicitCastExpr 0x124830ce0 <col:32> 'char *' contains-errors <LValueToRValue>
    |     |     | `-DeclRefExpr 0x124830c58 <col:32> 'char *' contains-errors lvalue Var 0x124830850 'out' 'char *'
    |     |     `-ImplicitCastExpr 0x124830cf8 <col:37> 'const char *' <LValueToRValue>
    |     |       `-DeclRefExpr 0x124830c78 <col:37> 'const char *' lvalue Var 0x125114360 'it' 'const char *'
    |     |-IfStmt 0x124830fd0 <line:33:5, line:37:5>
    |     | |-BinaryOperator 0x124830d98 <line:33:9, col:18> 'int' contains-errors '=='
    |     | | |-ImplicitCastExpr 0x124830d80 <col:9> 'int' contains-errors <LValueToRValue>
    |     | | | `-DeclRefExpr 0x124830d28 <col:9> 'int' contains-errors lvalue Var 0x124830af0 'dlen' 'int'
    |     | | `-UnaryOperator 0x124830d68 <col:17, col:18> 'int' prefix '-'
    |     | |   `-IntegerLiteral 0x124830d48 <col:18> 'int' 1
    |     | `-CompoundStmt 0x124830fb0 <line:34:5, line:37:5>
    |     |   |-CallExpr 0x124830f40 <line:35:7, col:16> 'int' contains-errors
    |     |   | |-ImplicitCastExpr 0x124830f28 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |     |   | | `-DeclRefExpr 0x124830e98 <col:7> 'int ()' Function 0x124830de0 'FREE' 'int ()'
    |     |   | `-UnaryOperator 0x124830f10 <col:12, col:13> 'char **' contains-errors prefix '&' cannot overflow
    |     |   |   `-DeclRefExpr 0x124830eb8 <col:13> 'char *' contains-errors lvalue Var 0x124830850 'out' 'char *'
    |     |   `-ReturnStmt 0x124830fa0 <line:36:7, col:14>
    |     |     `-RecoveryExpr 0x124830f80 <col:14> '<dependent type>' contains-errors lvalue
    |     |-BinaryOperator 0x1248310c0 <line:38:5, col:17> 'char' contains-errors '='
    |     | |-ArraySubscriptExpr 0x124831070 <col:5, col:13> 'char' contains-errors lvalue
    |     | | |-ImplicitCastExpr 0x124831040 <col:5> 'char *' contains-errors <LValueToRValue>
    |     | | | `-DeclRefExpr 0x124831000 <col:5> 'char *' contains-errors lvalue Var 0x124830850 'out' 'char *'
    |     | | `-ImplicitCastExpr 0x124831058 <col:9> 'int' contains-errors <LValueToRValue>
    |     | |   `-DeclRefExpr 0x124831020 <col:9> 'int' contains-errors lvalue Var 0x124830af0 'dlen' 'int'
    |     | `-ImplicitCastExpr 0x1248310a8 <col:17> 'char' <IntegralCast>
    |     |   `-CharacterLiteral 0x124831090 <col:17> 'int' 0
    |     `-ReturnStmt 0x124831118 <line:39:5, col:12>
    |       `-ImplicitCastExpr 0x124831100 <col:12> 'char *' contains-errors <LValueToRValue>
    |         `-DeclRefExpr 0x1248310e0 <col:12> 'char *' contains-errors lvalue Var 0x124830850 'out' 'char *'
    |-CallExpr 0x1248312e8 <line:42:3, col:11> 'int'
    | |-ImplicitCastExpr 0x1248312d0 <col:3> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x124831290 <col:3> 'int ()' Function 0x1248311d8 'assert' 'int ()'
    | `-IntegerLiteral 0x1248312b0 <col:10> 'int' 0
    `-ReturnStmt 0x124831348 <line:43:3, col:10>
      `-RecoveryExpr 0x124831328 <col:10> '<dependent type>' contains-errors lvalue
