`-FunctionDecl 0x15b129518  line:4:5 State 'int ()'
  `-CompoundStmt 0x15b129ab0 <line:91:5, line:112:42>
    |-DeclStmt 0x15b129688 <line:92:7, col:12>
    | `-VarDecl 0x15b129620 <col:7, col:11> col:11 used i 'int'
    |-DeclStmt 0x15b129770 <line:93:7, col:33>
    | `-VarDecl 0x15b1296b8 <col:7, col:23> col:13 used via_ptr 'char *' cinit
    |   `-RecoveryExpr 0x15b129750 <col:23> '<dependent type>' contains-errors lvalue
    `-ForStmt 0x15b129970 <line:95:7, line:97:7>
      |-BinaryOperator 0x15b1297c8 <line:95:12, col:16> 'int' '='
      | |-DeclRefExpr 0x15b129788 <col:12> 'int' lvalue Var 0x15b129620 'i' 'int'
      | `-IntegerLiteral 0x15b1297a8 <col:16> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x15b129860 <col:19, col:23> 'int' contains-errors '<'
      | |-DeclRefExpr 0x15b1297e8 <col:19> 'int' lvalue Var 0x15b129620 'i' 'int'
      | `-RecoveryExpr 0x15b129840 <col:23> '<dependent type>' contains-errors lvalue
      |-UnaryOperator 0x15b1298a0 <col:40, col:41> 'int' postfix '++'
      | `-DeclRefExpr 0x15b129880 <col:40> 'int' lvalue Var 0x15b129620 'i' 'int'
      `-CompoundStmt 0x15b129958 <col:45, line:97:7>
        `-BinaryOperator 0x15b129938 <line:96:9, col:22> 'char' contains-errors '='
          |-UnaryOperator 0x15b1298f0 <col:9, col:17> 'char' contains-errors lvalue prefix '*' cannot overflow
          | `-UnaryOperator 0x15b1298d8 <col:10, col:17> 'char *' contains-errors postfix '++'
          |   `-DeclRefExpr 0x15b1298b8 <col:10> 'char *' contains-errors lvalue Var 0x15b1296b8 'via_ptr' 'char *'
          `-ImplicitCastExpr 0x15b129920 <col:22> 'char' <IntegralCast>
            `-CharacterLiteral 0x15b129908 <col:22> 'int' 32
