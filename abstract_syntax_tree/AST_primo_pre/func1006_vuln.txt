`-FunctionDecl 0x15100de88  line:1:12 invalid php_snmp_write_valueretrieval 'int (int *, int *)' static
  |-ParmVarDecl 0x15100dd28 <col:42, col:59> col:59 referenced invalid snmp_object 'int *'
  |-ParmVarDecl 0x15100dda8 <col:72, col:78> col:78 referenced invalid newval 'int *'
  `-CompoundStmt 0x151027f18 <line:2:1, line:25:1>
    |-DeclStmt 0x15100dff8 <line:4:2, col:19>
    | `-VarDecl 0x15100df58 <col:2, col:12> col:6 used ret 'int' cinit
    |   `-RecoveryExpr 0x15100dfd8 <col:12> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x151027730 <line:6:2, line:11:2>
    | |-BinaryOperator 0x15100e230 <line:6:6, col:26> 'int' contains-errors '!='
    | | |-CallExpr 0x15100e1b0 <col:6, col:21> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x15100e170 <col:6> 'int ()' Function 0x15100e0b8 'Z_TYPE_P' 'int ()'
    | | | `-RecoveryExpr 0x15100e190 <col:15> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x15100e210 <col:26> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x151027708 <col:35, line:11:2>
    |   |-CallExpr 0x151027438 <line:8:3, col:23> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x15100e380 <col:3> 'int ()' Function 0x15100e2c8 'zval_copy_ctor' 'int ()'
    |   | `-UnaryOperator 0x151027420 <col:18, col:19> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   |   `-RecoveryExpr 0x151027400 <col:19> '<dependent type>' contains-errors lvalue
    |   |-CallExpr 0x1510275f0 <line:9:3, col:24> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x151027540 <col:3> 'int ()' Function 0x151027488 'convert_to_long' 'int ()'
    |   | `-UnaryOperator 0x1510275d8 <col:19, col:20> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   |   `-RecoveryExpr 0x1510275b8 <col:20> '<dependent type>' contains-errors lvalue
    |   `-BinaryOperator 0x1510276e8 <line:10:3, col:13> '<dependent type>' contains-errors '='
    |     |-RecoveryExpr 0x151027638 <col:3> '<dependent type>' contains-errors lvalue
    |     | `-DeclRefExpr 0x151027618 <col:3> 'int *' lvalue ParmVar 0x15100dda8 'newval' 'int *'
    |     `-UnaryOperator 0x1510276d0 <col:12, col:13> '<dependent type>' contains-errors prefix '&' cannot overflow
    |       `-RecoveryExpr 0x1510276b0 <col:13> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x151027ce0 <line:13:2, line:18:2> has_else
    | |-RecoveryExpr 0x1510279c8 <line:13:6, col:105> '_Bool' contains-errors
    | |-CompoundStmt 0x151027b00 <col:108, line:15:2>
    | | `-BinaryOperator 0x151027ae0 <line:14:3, col:48> '<dependent type>' contains-errors '='
    | |   |-CXXDependentScopeMemberExpr 0x151027a30 <col:3, col:16> '<dependent type>' contains-errors lvalue ->valueretrieval
    | |   | `-RecoveryExpr 0x151027a08 <col:3> '<dependent type>' contains-errors lvalue
    | |   |   `-DeclRefExpr 0x1510279e8 <col:3> 'int *' lvalue ParmVar 0x15100dd28 'snmp_object' 'int *'
    | |   `-CallExpr 0x151027ab8 <col:33, col:48> '<dependent type>' contains-errors
    | |     |-DeclRefExpr 0x151027a78 <col:33> 'int ()' Function 0x151027778 'Z_LVAL_P' 'int ()'
    | |     `-RecoveryExpr 0x151027a98 <col:42> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x151027cc8 <line:15:9, line:18:2>
    |   `-BinaryOperator 0x151027ca8 <line:17:3, col:9> 'int' contains-errors '='
    |     |-DeclRefExpr 0x151027c30 <col:3> 'int' contains-errors lvalue Var 0x15100df58 'ret' 'int'
    |     `-RecoveryExpr 0x151027c88 <col:9> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x151027eb0 <line:20:2, line:22:2>
    | |-RecoveryExpr 0x151027d30 <line:20:6, col:17> '_Bool' contains-errors
    | `-CompoundStmt 0x151027e98 <col:23, line:22:2>
    |   `-CallExpr 0x151027e70 <line:21:3, col:19> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x151027e30 <col:3> 'int ()' Function 0x151027d78 'zval_dtor' 'int ()'
    |     `-RecoveryExpr 0x151027e50 <col:13> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x151027f08 <line:24:2, col:9>
      `-ImplicitCastExpr 0x151027ef0 <col:9> 'int' contains-errors <LValueToRValue>
        `-DeclRefExpr 0x151027ed0 <col:9> 'int' contains-errors lvalue Var 0x15100df58 'ret' 'int'
