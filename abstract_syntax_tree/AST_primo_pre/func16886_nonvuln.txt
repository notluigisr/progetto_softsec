`-FunctionDecl 0x14700de58  line:1:1 invalid dump_index 'int (const int *, const int *)'
  |-ParmVarDecl 0x14700dcf0 <col:12, col:27> col:27 invalid k 'const int *'
  |-ParmVarDecl 0x14700dd70 <col:30, col:41> col:41 used index 'const int *'
  `-CompoundStmt 0x1470282a8 <line:2:1, line:24:1>
    |-DeclStmt 0x14700e0f0 <line:3:2, line:5:15>
    | |-VarDecl 0x14700df28 <line:3:2, col:8> col:8 used i 'int'
    | |-VarDecl 0x14700dfa8 <col:2, line:4:13> col:5 used count 'int' cinit
    | | `-IntegerLiteral 0x14700e010 <col:13> 'int' 0
    | `-VarDecl 0x14700e048 <line:3:2, line:5:14> col:5 used free_i 'int' cinit
    |   `-IntegerLiteral 0x14700e0b0 <col:14> 'int' 0
    |-CallExpr 0x14700e350 <line:7:2, col:31> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x14700e260 <col:2> 'int ()' Function 0x14700e1a8 'elog' 'int ()'
    | |-RecoveryExpr 0x14700e330 <col:7> '<dependent type>' contains-errors lvalue
    | `-StringLiteral 0x14700e2e0 <col:26> 'char[4]' lvalue "STR"
    |-ForStmt 0x147028138 <line:9:2, line:21:2>
    | |-BinaryOperator 0x14700e3c0 <line:9:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x14700e380 <col:7> 'int' lvalue Var 0x14700df28 'i' 'int'
    | | `-IntegerLiteral 0x14700e3a0 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x147027858 <col:14, col:18> 'int' contains-errors '<'
    | | |-DeclRefExpr 0x14700e3e0 <col:14> 'int' lvalue Var 0x14700df28 'i' 'int'
    | | `-RecoveryExpr 0x147027838 <col:18> '<dependent type>' contains-errors lvalue
    | |-UnaryOperator 0x147027898 <col:38, col:39> 'int' postfix '++'
    | | `-DeclRefExpr 0x147027878 <col:38> 'int' lvalue Var 0x14700df28 'i' 'int'
    | `-CompoundStmt 0x147028120 <line:10:2, line:21:2>
    |   `-IfStmt 0x1470280f0 <line:11:3, line:20:3> has_else
    |     |-BinaryOperator 0x147027990 <line:11:7, col:20> 'int' '!='
    |     | |-ImplicitCastExpr 0x147027978 <col:7, col:14> 'int' <LValueToRValue>
    |     | | `-ArraySubscriptExpr 0x147027920 <col:7, col:14> 'const int' lvalue
    |     | |   |-ImplicitCastExpr 0x1470278f0 <col:7> 'const int *' <LValueToRValue>
    |     | |   | `-DeclRefExpr 0x1470278b0 <col:7> 'const int *' lvalue ParmVar 0x14700dd70 'index' 'const int *'
    |     | |   `-ImplicitCastExpr 0x147027908 <col:13> 'int' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x1470278d0 <col:13> 'int' lvalue Var 0x14700df28 'i' 'int'
    |     | `-UnaryOperator 0x147027960 <col:19, col:20> 'int' prefix '-'
    |     |   `-IntegerLiteral 0x147027940 <col:20> 'int' 1
    |     |-CompoundStmt 0x147027dc0 <line:12:3, line:15:3>
    |     | |-CallExpr 0x147027d48 <line:13:4, col:59> '<dependent type>' contains-errors
    |     | | |-DeclRefExpr 0x1470279b0 <col:4> 'int ()' Function 0x14700e1a8 'elog' 'int ()'
    |     | | |-RecoveryExpr 0x147027c08 <col:9> '<dependent type>' contains-errors lvalue
    |     | | |-StringLiteral 0x1470279e8 <col:28> 'char[4]' lvalue "STR"
    |     | | |-BinaryOperator 0x147027c40 <col:35, col:39> 'int' '+'
    |     | | | |-ImplicitCastExpr 0x147027c28 <col:35> 'int' <LValueToRValue>
    |     | | | | `-DeclRefExpr 0x147027a08 <col:35> 'int' lvalue Var 0x14700df28 'i' 'int'
    |     | | | `-IntegerLiteral 0x147027a28 <col:39> 'int' 32
    |     | | `-CXXDependentScopeMemberExpr 0x147027d00 <col:43, col:55> '<dependent type>' contains-errors lvalue .name
    |     | |   `-ArraySubscriptExpr 0x147027ce0 <col:43, col:53> '<dependent type>' contains-errors lvalue
    |     | |     |-ImplicitCastExpr 0x147027cb0 <col:43> '<dependent type>' contains-errors <LValueToRValue>
    |     | |     | `-RecoveryExpr 0x147027a80 <col:43> '<dependent type>' contains-errors lvalue
    |     | |     `-ImplicitCastExpr 0x147027cc8 <col:45, col:52> 'int' <LValueToRValue>
    |     | |       `-ArraySubscriptExpr 0x147027c90 <col:45, col:52> 'const int' lvalue
    |     | |         |-ImplicitCastExpr 0x147027c60 <col:45> 'const int *' <LValueToRValue>
    |     | |         | `-DeclRefExpr 0x147027aa0 <col:45> 'const int *' lvalue ParmVar 0x14700dd70 'index' 'const int *'
    |     | |         `-ImplicitCastExpr 0x147027c78 <col:51> 'int' <LValueToRValue>
    |     | |           `-DeclRefExpr 0x147027ac0 <col:51> 'int' lvalue Var 0x14700df28 'i' 'int'
    |     | `-UnaryOperator 0x147027da8 <line:14:4, col:9> 'int' postfix '++'
    |     |   `-DeclRefExpr 0x147027d88 <col:4> 'int' lvalue Var 0x14700dfa8 'count' 'int'
    |     `-CompoundStmt 0x1470280d0 <line:17:3, line:20:3>
    |       |-UnaryOperator 0x147027e00 <line:18:4, col:10> 'int' postfix '++'
    |       | `-DeclRefExpr 0x147027de0 <col:4> 'int' lvalue Var 0x14700e048 'free_i' 'int'
    |       `-CallExpr 0x147028088 <line:19:4, col:54> '<dependent type>' contains-errors
    |         |-DeclRefExpr 0x147027e18 <col:4> 'int ()' Function 0x14700e1a8 'elog' 'int ()'
    |         |-RecoveryExpr 0x147027fe0 <col:9> '<dependent type>' contains-errors lvalue
    |         |-StringLiteral 0x147027e50 <col:28> 'char[4]' lvalue "STR"
    |         |-DeclRefExpr 0x147027e70 <col:35> 'int' lvalue Var 0x14700df28 'i' 'int'
    |         |-BinaryOperator 0x147028018 <col:38, col:42> 'int' '+'
    |         | |-ImplicitCastExpr 0x147028000 <col:38> 'int' <LValueToRValue>
    |         | | `-DeclRefExpr 0x147027e90 <col:38> 'int' lvalue Var 0x14700df28 'i' 'int'
    |         | `-IntegerLiteral 0x147027eb0 <col:42> 'int' 32
    |         `-ArraySubscriptExpr 0x147028068 <col:46, col:53> 'const int' lvalue
    |           |-ImplicitCastExpr 0x147028038 <col:46> 'const int *' <LValueToRValue>
    |           | `-DeclRefExpr 0x147027f08 <col:46> 'const int *' lvalue ParmVar 0x14700dd70 'index' 'const int *'
    |           `-ImplicitCastExpr 0x147028050 <col:52> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x147027f28 <col:52> 'int' lvalue Var 0x14700df28 'i' 'int'
    `-CallExpr 0x147028268 <line:22:2, line:23:17> '<dependent type>' contains-errors
      |-DeclRefExpr 0x147028170 <line:22:2> 'int ()' Function 0x14700e1a8 'elog' 'int ()'
      |-RecoveryExpr 0x147028248 <col:7> '<dependent type>' contains-errors lvalue
      |-StringLiteral 0x1470281a8 <col:26> 'char[4]' lvalue "STR"
      |-DeclRefExpr 0x1470281c8 <line:23:4> 'int' lvalue Var 0x14700dfa8 'count' 'int'
      `-DeclRefExpr 0x1470281e8 <col:11> 'int' lvalue Var 0x14700e048 'free_i' 'int'
