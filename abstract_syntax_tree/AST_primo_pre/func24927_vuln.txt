`-FunctionDecl 0x14f128238  line:1:1 PHP_METHOD 'int (int, int)'
  |-ParmVarDecl 0x14f128158 <col:12> col:12 Phar 'int'
  |-ParmVarDecl 0x14f1280d8 <col:18> col:18 delete 'int'
  `-CompoundStmt 0x14f143840 <line:2:1, line:46:1>
    |-DeclStmt 0x14f1283b8 <line:3:2, col:13>
    | `-VarDecl 0x14f128350 <col:2, col:8> col:8 used fname 'char *'
    |-UnaryExprOrTypeTraitExpr 0x14f128440 <line:4:2, col:9> 'unsigned long' contains-errors sizeof
    | `-RecoveryExpr 0x14f128420 <col:9> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x14f1284e0 <line:5:2, col:13>
    | `-VarDecl 0x14f128478 <col:2, col:8> col:8 used error 'char *'
    |-CallExpr 0x14f128688 <line:7:2, col:22> 'int'
    | `-ImplicitCastExpr 0x14f128670 <col:2> 'int (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x14f128620 <col:2> 'int ()' Function 0x14f128568 'PHAR_ARCHIVE_OBJECT' 'int ()'
    |-IfStmt 0x14f142280 <line:9:2, line:13:2>
    | |-BinaryOperator 0x14f142008 <line:9:6, col:46> 'int' contains-errors '&&'
    | | |-CallExpr 0x14f141f00 <col:6, col:21> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x14f128788 <col:6> 'int ()' Function 0x14f1286d0 'PHAR_G' 'int ()'
    | | | `-RecoveryExpr 0x14f141ee0 <col:13> '<dependent type>' contains-errors lvalue
    | | `-UnaryOperator 0x14f141ff0 <col:26, col:46> '<dependent type>' contains-errors prefix '!' cannot overflow
    | |   `-ImplicitCastExpr 0x14f141fd8 <col:27, col:46> '<dependent type>' contains-errors <LValueToRValue>
    | |     `-CXXDependentScopeMemberExpr 0x14f141f90 <col:27, col:46> '<dependent type>' contains-errors lvalue ->is_data
    | |       `-CXXDependentScopeMemberExpr 0x14f141f48 <col:27, col:37> '<dependent type>' contains-errors lvalue ->archive
    | |         `-RecoveryExpr 0x14f141f28 <col:27> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x14f142260 <col:55, line:13:2>
    |   |-CallExpr 0x14f142218 <line:10:3, line:11:9> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x14f142108 <line:10:3> 'int ()' Function 0x14f142050 'zend_throw_exception_ex' 'int ()'
    |   | |-RecoveryExpr 0x14f1421f8 <col:27> '<dependent type>' contains-errors lvalue
    |   | |-IntegerLiteral 0x14f142140 <col:60> 'int' 0
    |   | `-StringLiteral 0x14f1421a0 <line:11:4> 'char[4]' lvalue "STR"
    |   `-ReturnStmt 0x14f142250 <line:12:3>
    |-IfStmt 0x14f142748 <line:15:2, line:17:2>
    | |-BinaryOperator 0x14f142718 <line:15:6, col:75> 'int' contains-errors '=='
    | | |-CallExpr 0x14f1426b8 <col:6, col:70> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x14f142380 <col:6> 'int ()' Function 0x14f1422c8 'zend_parse_parameters' 'int ()'
    | | | |-CallExpr 0x14f142660 <col:28, col:42> 'int'
    | | | | `-ImplicitCastExpr 0x14f142648 <col:28> 'int (*)()' <FunctionToPointerDecay>
    | | | |   `-DeclRefExpr 0x14f142480 <col:28> 'int ()' Function 0x14f1423c8 'ZEND_NUM_ARGS' 'int ()'
    | | | |-StringLiteral 0x14f1424d8 <col:45> 'char[4]' lvalue "STR"
    | | | |-UnaryOperator 0x14f142550 <col:52, col:53> 'char **' prefix '&' cannot overflow
    | | | | `-DeclRefExpr 0x14f1424f8 <col:53> 'char *' lvalue Var 0x14f128350 'fname' 'char *'
    | | | `-UnaryOperator 0x14f1426a0 <col:60, col:61> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | |   `-RecoveryExpr 0x14f142680 <col:61> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x14f1426f8 <col:75> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x14f142738 <col:84, line:17:2>
    |-IfStmt 0x14f1429d0 <line:19:2, line:22:2>
    | |-RecoveryExpr 0x14f142928 <line:19:6, col:92> '_Bool' contains-errors
    | `-CompoundStmt 0x14f1429b8 <col:95, line:22:2>
    |   `-ReturnStmt 0x14f1429a8 <line:21:3>
    |-IfStmt 0x14f143430 <line:23:2, line:37:2> has_else
    | |-RecoveryExpr 0x14f142b10 <line:23:6, col:80> '_Bool' contains-errors
    | |-CompoundStmt 0x14f142d78 <col:83, line:34:2>
    | | `-IfStmt 0x14f142d58 <line:24:3, line:33:3>
    | |   |-RecoveryExpr 0x14f142c50 <line:24:7, col:101> '_Bool' contains-errors
    | |   `-CompoundStmt 0x14f142d40 <col:104, line:33:3>
    | |     `-IfStmt 0x14f142d10 <line:25:4, line:32:4> has_else
    | |       |-RecoveryExpr 0x14f142c70 <line:25:8, col:15> '_Bool' contains-errors
    | |       |-CompoundStmt 0x14f142c90 <col:27, line:28:4>
    | |       `-CompoundStmt 0x14f142d00 <col:11, line:32:4>
    | `-CompoundStmt 0x14f143420 <line:34:9, line:37:2>
    `-IfStmt 0x14f143820 <line:40:2, line:43:2>
      |-ImplicitCastExpr 0x14f1435f8 <line:40:6> 'char *' <LValueToRValue>
      | `-DeclRefExpr 0x14f1435d8 <col:6> 'char *' lvalue Var 0x14f128478 'error' 'char *'
      `-CompoundStmt 0x14f143808 <col:13, line:43:2>
        `-CallExpr 0x14f1437c8 <line:42:3, col:14> 'int'
          |-ImplicitCastExpr 0x14f1437b0 <col:3> 'int (*)()' <FunctionToPointerDecay>
          | `-DeclRefExpr 0x14f143770 <col:3> 'int ()' Function 0x14f1436b8 'efree' 'int ()'
          `-ImplicitCastExpr 0x14f1437f0 <col:9> 'char *' <LValueToRValue>
            `-DeclRefExpr 0x14f143790 <col:9> 'char *' lvalue Var 0x14f128478 'error' 'char *'
