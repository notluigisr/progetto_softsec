`-FunctionDecl 0x13b00e098  line:1:13 invalid ResolveAxis 'int (const int, const int *, const int, int *, int *)' inline
  |-ParmVarDecl 0x13b00dcf0 <col:25, col:35> col:35 used num_dims 'const int'
  |-ParmVarDecl 0x13b00dd70 <col:45, col:56> col:56 used axis 'const int *'
  |-ParmVarDecl 0x13b00ddf0 <line:2:25, col:39> col:39 invalid num_axis 'const int'
  |-ParmVarDecl 0x13b00dea8 <col:49, col:54> col:54 used out_axis 'int *'
  |-ParmVarDecl 0x13b00df28 <line:3:25, col:30> col:30 used out_num_axis 'int *'
  `-CompoundStmt 0x13b028948 <col:44, line:29:1>
    |-BinaryOperator 0x13b00e1d8 <line:4:3, col:19> 'int' '='
    | |-UnaryOperator 0x13b00e1a0 <col:3, col:4> 'int' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x13b00e188 <col:4> 'int *' <LValueToRValue>
    | |   `-DeclRefExpr 0x13b00e168 <col:4> 'int *' lvalue ParmVar 0x13b00df28 'out_num_axis' 'int *'
    | `-IntegerLiteral 0x13b00e1b8 <col:19> 'int' 0
    |-IfStmt 0x13b00e2d0 <line:6:3, line:8:3>
    | |-BinaryOperator 0x13b00e250 <line:6:7, col:19> 'int' '=='
    | | |-ImplicitCastExpr 0x13b00e238 <col:7> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x13b00e1f8 <col:7> 'const int' lvalue ParmVar 0x13b00dcf0 'num_dims' 'const int'
    | | `-IntegerLiteral 0x13b00e218 <col:19> 'int' 0
    | `-CompoundStmt 0x13b00e2b8 <col:22, line:8:3>
    |   `-ReturnStmt 0x13b00e2a8 <line:7:5, col:12>
    |     `-RecoveryExpr 0x13b00e288 <col:12> '<dependent type>' contains-errors lvalue
    |-ForStmt 0x13b0288c8 <line:10:3, line:27:3>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-BinaryOperator 0x13b00e380 <line:10:25, col:31> 'int' contains-errors '<'
    | | |-RecoveryExpr 0x13b00e360 <col:25> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x13b00e320 <col:31> '<dependent type>' contains-errors lvalue
    | |-UnaryOperator 0x13b027e00 <col:41, col:43> '<dependent type>' contains-errors prefix '++' cannot overflow
    | | `-RecoveryExpr 0x13b00e3d0 <col:43> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x13b028898 <col:48, line:27:3>
    |   |-DeclStmt 0x13b027f80 <line:14:5, col:69>
    |   | `-VarDecl 0x13b027e30 <col:5, col:9> col:9 used current 'int'
    |   |-CallExpr 0x13b028288 <line:15:5, col:53> 'int'
    |   | |-ImplicitCastExpr 0x13b028270 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x13b0280f0 <col:5> 'int ()' Function 0x13b028038 'TFLITE_DCHECK' 'int ()'
    |   | `-BinaryOperator 0x13b028218 <col:19, col:45> 'int' '&&'
    |   |   |-BinaryOperator 0x13b028168 <col:19, col:30> 'int' '>='
    |   |   | |-ImplicitCastExpr 0x13b028150 <col:19> 'int' <LValueToRValue>
    |   |   | | `-DeclRefExpr 0x13b028110 <col:19> 'int' lvalue Var 0x13b027e30 'current' 'int'
    |   |   | `-IntegerLiteral 0x13b028130 <col:30> 'int' 0
    |   |   `-BinaryOperator 0x13b0281f8 <col:35, col:45> 'int' '<'
    |   |     |-ImplicitCastExpr 0x13b0281c8 <col:35> 'int' <LValueToRValue>
    |   |     | `-DeclRefExpr 0x13b028188 <col:35> 'int' lvalue Var 0x13b027e30 'current' 'int'
    |   |     `-ImplicitCastExpr 0x13b0281e0 <col:45> 'int' <LValueToRValue>
    |   |       `-DeclRefExpr 0x13b0281a8 <col:45> 'const int' lvalue ParmVar 0x13b00dcf0 'num_dims' 'const int'
    |   |-ForStmt 0x13b0285d0 <line:17:5, line:22:5>
    |   | |-DeclStmt 0x13b028350 <line:17:10, col:19>
    |   | | `-VarDecl 0x13b0282c8 <col:10, col:18> col:14 used j 'int' cinit
    |   | |   `-IntegerLiteral 0x13b028330 <col:18> 'int' 0
    |   | |-<<<NULL>>>
    |   | |-BinaryOperator 0x13b028408 <col:21, col:26> 'int' '<'
    |   | | |-ImplicitCastExpr 0x13b0283d8 <col:21> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x13b028368 <col:21> 'int' lvalue Var 0x13b0282c8 'j' 'int'
    |   | | `-ImplicitCastExpr 0x13b0283f0 <col:25, col:26> 'int' <LValueToRValue>
    |   | |   `-UnaryOperator 0x13b0283c0 <col:25, col:26> 'int' lvalue prefix '*' cannot overflow
    |   | |     `-ImplicitCastExpr 0x13b0283a8 <col:26> 'int *' <LValueToRValue>
    |   | |       `-DeclRefExpr 0x13b028388 <col:26> 'int *' lvalue ParmVar 0x13b00df28 'out_num_axis' 'int *'
    |   | |-UnaryOperator 0x13b028448 <col:40, col:42> 'int' prefix '++'
    |   | | `-DeclRefExpr 0x13b028428 <col:42> 'int' lvalue Var 0x13b0282c8 'j' 'int'
    |   | `-CompoundStmt 0x13b0285b8 <col:45, line:22:5>
    |   |   `-IfStmt 0x13b028598 <line:18:7, line:21:7>
    |   |     |-BinaryOperator 0x13b028540 <line:18:11, col:26> 'int' '=='
    |   |     | |-ImplicitCastExpr 0x13b028510 <col:11, col:21> 'int' <LValueToRValue>
    |   |     | | `-ArraySubscriptExpr 0x13b0284d0 <col:11, col:21> 'int' lvalue
    |   |     | |   |-ImplicitCastExpr 0x13b0284a0 <col:11> 'int *' <LValueToRValue>
    |   |     | |   | `-DeclRefExpr 0x13b028460 <col:11> 'int *' lvalue ParmVar 0x13b00dea8 'out_axis' 'int *'
    |   |     | |   `-ImplicitCastExpr 0x13b0284b8 <col:20> 'int' <LValueToRValue>
    |   |     | |     `-DeclRefExpr 0x13b028480 <col:20> 'int' lvalue Var 0x13b0282c8 'j' 'int'
    |   |     | `-ImplicitCastExpr 0x13b028528 <col:26> 'int' <LValueToRValue>
    |   |     |   `-DeclRefExpr 0x13b0284f0 <col:26> 'int' lvalue Var 0x13b027e30 'current' 'int'
    |   |     `-CompoundStmt 0x13b028580 <col:35, line:21:7>
    |   |       `-BreakStmt 0x13b028578 <line:20:9>
    |   `-IfStmt 0x13b028878 <line:23:5, line:26:5>
    |     |-UnaryOperator 0x13b028688 <line:23:9, col:10> '<dependent type>' contains-errors prefix '!' cannot overflow
    |     | `-ImplicitCastExpr 0x13b028670 <col:10> '<dependent type>' contains-errors <LValueToRValue>
    |     |   `-RecoveryExpr 0x13b028650 <col:10> '<dependent type>' contains-errors lvalue
    |     `-CompoundStmt 0x13b028858 <col:18, line:26:5>
    |       |-BinaryOperator 0x13b028798 <line:24:7, col:33> 'int' '='
    |       | |-ArraySubscriptExpr 0x13b028740 <col:7, col:29> 'int' lvalue
    |       | | |-ImplicitCastExpr 0x13b028710 <col:7> 'int *' <LValueToRValue>
    |       | | | `-DeclRefExpr 0x13b0286a0 <col:7> 'int *' lvalue ParmVar 0x13b00dea8 'out_axis' 'int *'
    |       | | `-ImplicitCastExpr 0x13b028728 <col:16, col:17> 'int' <LValueToRValue>
    |       | |   `-UnaryOperator 0x13b0286f8 <col:16, col:17> 'int' lvalue prefix '*' cannot overflow
    |       | |     `-ImplicitCastExpr 0x13b0286e0 <col:17> 'int *' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x13b0286c0 <col:17> 'int *' lvalue ParmVar 0x13b00df28 'out_num_axis' 'int *'
    |       | `-ImplicitCastExpr 0x13b028780 <col:33> 'int' <LValueToRValue>
    |       |   `-DeclRefExpr 0x13b028760 <col:33> 'int' lvalue Var 0x13b027e30 'current' 'int'
    |       `-CompoundAssignOperator 0x13b028828 <line:25:7, col:24> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |         |-UnaryOperator 0x13b0287f0 <col:7, col:8> 'int' lvalue prefix '*' cannot overflow
    |         | `-ImplicitCastExpr 0x13b0287d8 <col:8> 'int *' <LValueToRValue>
    |         |   `-DeclRefExpr 0x13b0287b8 <col:8> 'int *' lvalue ParmVar 0x13b00df28 'out_num_axis' 'int *'
    |         `-IntegerLiteral 0x13b028808 <col:24> 'int' 1
    `-ReturnStmt 0x13b028938 <line:28:3, col:10>
      `-RecoveryExpr 0x13b028918 <col:10> '<dependent type>' contains-errors lvalue
