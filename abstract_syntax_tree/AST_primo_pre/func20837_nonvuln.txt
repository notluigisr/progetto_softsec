`-FunctionDecl 0x12d8f3da8  line:1:9 invalid slirp_send_wrap 'int (int, const void *, int, int)'
  |-ParmVarDecl 0x12d8f3af0 <col:25, col:29> col:29 used sockfd 'int'
  |-ParmVarDecl 0x12d8f3ba8 <col:37, col:49> col:49 used buf 'const void *'
  |-ParmVarDecl 0x12d8f3c28 <col:54, col:61> col:61 invalid len 'int'
  |-ParmVarDecl 0x12d8f3ca8 <col:66, col:70> col:70 used flags 'int'
  `-CompoundStmt 0x12d90d3e0 <line:2:1, line:9:1>
    |-DeclStmt 0x12d8f3ef0 <line:3:5, col:12>
    | `-VarDecl 0x12d8f3e88 <col:5, col:9> col:9 used ret 'int'
    |-BinaryOperator 0x12d8f4160 <line:4:5, col:39> 'int' contains-errors '='
    | |-DeclRefExpr 0x12d8f3f08 <col:5> 'int' lvalue Var 0x12d8f3e88 'ret' 'int'
    | `-CallExpr 0x12d8f4120 <col:11, col:39> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x12d8f4080 <col:11> 'int ()' Function 0x12d8f3fc8 'send' 'int ()'
    |   |-DeclRefExpr 0x12d8f40a0 <col:16> 'int' lvalue ParmVar 0x12d8f3af0 'sockfd' 'int'
    |   |-DeclRefExpr 0x12d8f40c0 <col:24> 'const void *' lvalue ParmVar 0x12d8f3ba8 'buf' 'const void *'
    |   |-RecoveryExpr 0x12d8f40e0 <col:29> '<dependent type>' contains-errors lvalue
    |   `-DeclRefExpr 0x12d8f4100 <col:34> 'int' lvalue ParmVar 0x12d8f3ca8 'flags' 'int'
    |-IfStmt 0x12d90d378 <line:5:5, line:7:5>
    | |-BinaryOperator 0x12d8f41d8 <line:5:9, col:15> 'int' '<'
    | | |-ImplicitCastExpr 0x12d8f41c0 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x12d8f4180 <col:9> 'int' lvalue Var 0x12d8f3e88 'ret' 'int'
    | | `-IntegerLiteral 0x12d8f41a0 <col:15> 'int' 0
    | `-CompoundStmt 0x12d90d368 <col:18, line:7:5>
    `-ReturnStmt 0x12d90d3d0 <line:8:5, col:12>
      `-ImplicitCastExpr 0x12d90d3b8 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x12d90d398 <col:12> 'int' lvalue Var 0x12d8f3e88 'ret' 'int'
