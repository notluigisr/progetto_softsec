`-FunctionDecl 0x12a030918  line:1:1 TEST_CASE 'int ()'
  `-CompoundStmt 0x12a053e00 <line:2:1, line:22:1>
    |-RecoveryExpr 0x12a030ab0 <line:18:5> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x12a030cd0 <line:19:5, col:40>
    | `-VarDecl 0x12a030ae8 <col:5, col:39> col:10 used ret 'int' auto cinit
    |   `-CallExpr 0x12a030ca0 <col:16, col:39> '<dependent type>' contains-errors
    |     |-CXXDependentScopeMemberExpr 0x12a030c38 <col:16, col:23> '<dependent type>' contains-errors lvalue .parse
    |     | `-RecoveryExpr 0x12a030c18 <col:16> '<dependent type>' contains-errors lvalue
    |     |-StringLiteral 0x12a030bb0 <col:29> 'char[4]' lvalue "STR"
    |     `-RecoveryExpr 0x12a030c80 <col:36> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x12a030ea8 <line:20:5, col:24> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x12a030dc8 <col:5> 'int ()' Function 0x12a030d10 'REQUIRE' 'int ()'
    | `-BinaryOperator 0x12a030e88 <col:13, col:20> 'int' contains-errors '=='
    |   |-DeclRefExpr 0x12a030de8 <col:13> 'int' contains-errors lvalue Var 0x12a030ae8 'ret' 'int'
    |   `-RecoveryExpr 0x12a030e68 <col:20> '<dependent type>' contains-errors lvalue
    `-CallExpr 0x12a030fb0 <line:21:5, col:25> '<dependent type>' contains-errors
      |-DeclRefExpr 0x12a030ed0 <col:5> 'int ()' Function 0x12a030d10 'REQUIRE' 'int ()'
      `-BinaryOperator 0x12a030f90 <col:13, col:20> 'int' contains-errors '=='
        |-RecoveryExpr 0x12a030f70 <col:13> '<dependent type>' contains-errors lvalue
        `-StringLiteral 0x12a030f08 <col:20> 'char[4]' lvalue "STR"
