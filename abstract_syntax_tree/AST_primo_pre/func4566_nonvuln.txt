`-FunctionDecl 0x11e128318  line:1:12 invalid signal_name_owner_changed 'int (int *, void *, int *)' static
  |-ParmVarDecl 0x11e128128 <col:38, col:54> col:54 invalid message 'int *'
  |-ParmVarDecl 0x11e1281a8 <col:63, col:69> col:69 used userdata 'void *'
  |-ParmVarDecl 0x11e128228 <col:79, col:93> col:93 invalid error 'int *'
  `-CompoundStmt 0x11e143bf8 <col:100, line:22:1>
    |-DeclStmt 0x11e128578 <line:2:9, col:49>
    | |-VarDecl 0x11e1283f0 <col:9, col:21> col:21 used name 'const char *'
    | |-VarDecl 0x11e128470 <col:9, col:28> col:28 used old_owner 'const char *'
    | `-VarDecl 0x11e1284f0 <col:9, col:40> col:40 used new_owner 'const char *'
    |-DeclStmt 0x11e128648 <line:4:9, col:14>
    | `-VarDecl 0x11e1285e0 <col:9, col:13> col:13 used r 'int'
    |-CallExpr 0x11e141800 <line:6:9, col:23> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x11e1287c0 <col:9> 'int ()' Function 0x11e128708 'assert' 'int ()'
    | `-RecoveryExpr 0x11e1287e0 <col:16> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x11e1418a8 <line:7:9, col:17> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x11e141828 <col:9> 'int ()' Function 0x11e128708 'assert' 'int ()'
    | `-RecoveryExpr 0x11e141888 <col:16> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x11e141b90 <line:9:9, col:78> 'int' contains-errors '='
    | |-DeclRefExpr 0x11e1418d0 <col:9> 'int' lvalue Var 0x11e1285e0 'r' 'int'
    | `-CallExpr 0x11e141b48 <col:13, col:78> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x11e1419d0 <col:13> 'int ()' Function 0x11e141918 'sd_bus_message_read' 'int ()'
    |   |-RecoveryExpr 0x11e1419f0 <col:33> '<dependent type>' contains-errors lvalue
    |   |-StringLiteral 0x11e141a50 <col:42> 'char[4]' lvalue "STR"
    |   |-UnaryOperator 0x11e141ac0 <col:49, col:50> 'const char **' prefix '&' cannot overflow
    |   | `-DeclRefExpr 0x11e141a70 <col:50> 'const char *' lvalue Var 0x11e1283f0 'name' 'const char *'
    |   |-UnaryOperator 0x11e141af8 <col:56, col:57> 'const char **' prefix '&' cannot overflow
    |   | `-DeclRefExpr 0x11e141ad8 <col:57> 'const char *' lvalue Var 0x11e128470 'old_owner' 'const char *'
    |   `-UnaryOperator 0x11e141b30 <col:68, col:69> 'const char **' prefix '&' cannot overflow
    |     `-DeclRefExpr 0x11e141b10 <col:69> 'const char *' lvalue Var 0x11e1284f0 'new_owner' 'const char *'
    |-IfStmt 0x11e141e28 <line:10:9, line:13:9>
    | |-BinaryOperator 0x11e141c08 <line:10:13, col:17> 'int' '<'
    | | |-ImplicitCastExpr 0x11e141bf0 <col:13> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x11e141bb0 <col:13> 'int' lvalue Var 0x11e1285e0 'r' 'int'
    | | `-IntegerLiteral 0x11e141bd0 <col:17> 'int' 0
    | `-CompoundStmt 0x11e141e08 <col:20, line:13:9>
    |   |-CallExpr 0x11e141d98 <line:11:17, col:38> 'int'
    |   | |-ImplicitCastExpr 0x11e141d80 <col:17> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x11e141d08 <col:17> 'int ()' Function 0x11e141c50 'bus_log_parse_error' 'int ()'
    |   | `-ImplicitCastExpr 0x11e141dc0 <col:37> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x11e141d28 <col:37> 'int' lvalue Var 0x11e1285e0 'r' 'int'
    |   `-ReturnStmt 0x11e141df8 <line:12:17, col:24>
    |     `-IntegerLiteral 0x11e141dd8 <col:24> 'int' 0
    |-BinaryOperator 0x11e142420 <line:15:9, col:44> 'const char *' '='
    | |-DeclRefExpr 0x11e141e48 <col:9> 'const char *' lvalue Var 0x11e128470 'old_owner' 'const char *'
    | `-ImplicitCastExpr 0x11e141fe0 <col:21, col:44> 'const char *' <IntegralToPointer>
    |   `-CallExpr 0x11e141fa0 <col:21, col:44> 'int'
    |     |-ImplicitCastExpr 0x11e141f88 <col:21> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x11e141f48 <col:21> 'int ()' Function 0x11e141e90 'empty_to_null' 'int ()'
    |     `-ImplicitCastExpr 0x11e141fc8 <col:35> 'const char *' <LValueToRValue>
    |       `-DeclRefExpr 0x11e141f68 <col:35> 'const char *' lvalue Var 0x11e128470 'old_owner' 'const char *'
    |-BinaryOperator 0x11e142510 <line:16:9, col:44> 'const char *' '='
    | |-DeclRefExpr 0x11e142440 <col:9> 'const char *' lvalue Var 0x11e1284f0 'new_owner' 'const char *'
    | `-ImplicitCastExpr 0x11e1424f8 <col:21, col:44> 'const char *' <IntegralToPointer>
    |   `-CallExpr 0x11e1424b8 <col:21, col:44> 'int'
    |     |-ImplicitCastExpr 0x11e1424a0 <col:21> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x11e142460 <col:21> 'int ()' Function 0x11e141e90 'empty_to_null' 'int ()'
    |     `-ImplicitCastExpr 0x11e1424e0 <col:35> 'const char *' <LValueToRValue>
    |       `-DeclRefExpr 0x11e142480 <col:35> 'const char *' lvalue Var 0x11e1284f0 'new_owner' 'const char *'
    |-IfStmt 0x11e143ba8 <line:18:9, line:19:84>
    | |-CXXDependentScopeMemberExpr 0x11e142700 <line:18:13, col:29> '<dependent type>' contains-errors lvalue ->bus_name_owner_change
    | | `-CallExpr 0x11e1426d8 <col:13, col:26> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x11e142610 <col:13> 'int ()' Function 0x11e142558 'UNIT_VTABLE' 'int ()'
    | |   `-RecoveryExpr 0x11e1426b8 <col:25> '<dependent type>' contains-errors lvalue
    | `-CallExpr 0x11e143b68 <line:19:17, col:84> '<dependent type>' contains-errors
    |   |-CXXDependentScopeMemberExpr 0x11e143b00 <col:17, col:33> '<dependent type>' contains-errors lvalue ->bus_name_owner_change
    |   | `-CallExpr 0x11e143ad8 <col:17, col:30> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x11e142748 <col:17> 'int ()' Function 0x11e142558 'UNIT_VTABLE' 'int ()'
    |   |   `-RecoveryExpr 0x11e143ab8 <col:29> '<dependent type>' contains-errors lvalue
    |   |-RecoveryExpr 0x11e143b48 <col:55> '<dependent type>' contains-errors lvalue
    |   |-DeclRefExpr 0x11e143a18 <col:58> 'const char *' lvalue Var 0x11e1283f0 'name' 'const char *'
    |   |-DeclRefExpr 0x11e143a38 <col:64> 'const char *' lvalue Var 0x11e128470 'old_owner' 'const char *'
    |   `-DeclRefExpr 0x11e143a58 <col:75> 'const char *' lvalue Var 0x11e1284f0 'new_owner' 'const char *'
    `-ReturnStmt 0x11e143be8 <line:21:9, col:16>
      `-IntegerLiteral 0x11e143bc8 <col:16> 'int' 0
