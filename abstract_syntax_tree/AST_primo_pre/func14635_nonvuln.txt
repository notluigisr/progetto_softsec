`-FunctionDecl 0x152127ce8  line:1:5 invalid blkid_probe_is_covered_by_pt 'int (int, int, int)'
  |-ParmVarDecl 0x152127af0 <col:34, col:46> col:46 referenced invalid pr 'int'
  |-ParmVarDecl 0x152127b70 <line:2:6, col:15> col:15 invalid offset 'int'
  |-ParmVarDecl 0x152127bf0 <col:23, col:32> col:32 invalid size 'int'
  `-CompoundStmt 0x152142fe8 <line:3:1, line:57:1>
    |-DeclStmt 0x152127f68 <line:7:2, col:23>
    | |-VarDecl 0x152127dc0 <col:2, col:6> col:6 used nparts 'int'
    | |-VarDecl 0x152127e40 <col:2, col:14> col:14 used i 'int'
    | `-VarDecl 0x152127ec0 <col:2, col:22> col:17 used rc 'int' cinit
    |   `-IntegerLiteral 0x152127f28 <col:22> 'int' 0
    |-CallExpr 0x152141948 <line:9:2, line:11:16> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x1521280e0 <line:9:2> 'int ()' Function 0x152128028 'DBG' 'int ()'
    | |-RecoveryExpr 0x152141928 <col:6> '<dependent type>' contains-errors lvalue
    | `-CallExpr 0x1521418c0 <col:16, line:11:15> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x152141800 <line:9:16> 'int ()' Function 0x152128140 'ul_debug' 'int ()'
    |   |-StringLiteral 0x152141860 <line:10:3> 'char[4]' lvalue "STR"
    |   |-RecoveryExpr 0x152141880 <line:11:3> '<dependent type>' contains-errors lvalue
    |   `-RecoveryExpr 0x1521418a0 <col:11> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x152141ac0 <line:13:2, line:14:8>
    | |-BinaryOperator 0x152141a38 <line:13:6, col:18> '<dependent type>' contains-errors '&'
    | | |-CXXDependentScopeMemberExpr 0x152141998 <col:6, col:10> '<dependent type>' contains-errors lvalue ->flags
    | | | `-RecoveryExpr 0x152141978 <col:6> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x152141a18 <col:18> '<dependent type>' contains-errors lvalue
    | `-GotoStmt 0x152141aa8 <line:14:3, col:8> 'done' 0x152141a58
    |-BinaryOperator 0x152141c80 <line:16:2, col:28> 'int' contains-errors '='
    | |-DeclRefExpr 0x152141c60 <col:2> 'int' lvalue Var 0x152127ec0 'rc' 'int'
    | `-CallExpr 0x152141c18 <col:8, col:28> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x152141bd8 <col:8> 'int ()' Function 0x152141b20 'blkid_clone_probe' 'int ()'
    |   `-RecoveryExpr 0x152141bf8 <col:26> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x152141d90 <line:17:2, line:18:8>
    | |-UnaryOperator 0x152141d40 <line:17:6, col:7> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x152141d28 <col:7> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x152141d08 <col:7> 'int' lvalue Var 0x152127ec0 'rc' 'int'
    | `-GotoStmt 0x152141d78 <line:18:3, col:8> 'done' 0x152141a58
    |-IfStmt 0x152142068 <line:21:2, line:22:8>
    | |-UnaryOperator 0x152142038 <line:21:6, col:7> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x152142020 <col:7> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x152142000 <col:7> '<dependent type>' contains-errors lvalue
    | `-GotoStmt 0x152142050 <line:22:3, col:8> 'done' 0x152141a58
    |-BinaryOperator 0x152142250 <line:24:2, col:45> 'int' contains-errors '='
    | |-DeclRefExpr 0x152142088 <col:2> 'int' lvalue Var 0x152127dc0 'nparts' 'int'
    | `-CallExpr 0x152142228 <col:11, col:45> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x152142188 <col:11> 'int ()' Function 0x1521420d0 'blkid_partlist_numof_partitions' 'int ()'
    |   `-RecoveryExpr 0x152142208 <col:43> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x1521422d8 <line:25:2, line:26:8>
    | |-UnaryOperator 0x1521422a8 <line:25:6, col:7> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x152142290 <col:7> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x152142270 <col:7> 'int' lvalue Var 0x152127dc0 'nparts' 'int'
    | `-GotoStmt 0x1521422c0 <line:26:3, col:8> 'done' 0x152141a58
    |-ForStmt 0x152142740 <line:32:2, line:41:2>
    | |-BinaryOperator 0x152142458 <line:32:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x152142418 <col:7> 'int' lvalue Var 0x152127e40 'i' 'int'
    | | `-IntegerLiteral 0x152142438 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x1521424e8 <col:14, col:18> 'int' '<'
    | | |-ImplicitCastExpr 0x1521424b8 <col:14> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x152142478 <col:14> 'int' lvalue Var 0x152127e40 'i' 'int'
    | | `-ImplicitCastExpr 0x1521424d0 <col:18> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x152142498 <col:18> 'int' lvalue Var 0x152127dc0 'nparts' 'int'
    | |-UnaryOperator 0x152142528 <col:26, col:27> 'int' postfix '++'
    | | `-DeclRefExpr 0x152142508 <col:26> 'int' lvalue Var 0x152127e40 'i' 'int'
    | `-CompoundStmt 0x152142728 <col:31, line:41:2>
    |   `-IfStmt 0x152142708 <line:35:3, line:40:3>
    |     |-RecoveryExpr 0x152142608 <line:35:7, col:46> '_Bool' contains-errors
    |     `-CompoundStmt 0x1521426f0 <col:49, line:40:3>
    |       `-GotoStmt 0x1521426d8 <line:39:4, col:9> 'done' 0x152141a58
    |-ForStmt 0x152142d88 <line:44:2, line:51:2>
    | |-BinaryOperator 0x1521427b8 <line:44:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x152142778 <col:7> 'int' lvalue Var 0x152127e40 'i' 'int'
    | | `-IntegerLiteral 0x152142798 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x152142c50 <col:14, col:18> 'int' '<'
    | | |-ImplicitCastExpr 0x152142c20 <col:14> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1521427d8 <col:14> 'int' lvalue Var 0x152127e40 'i' 'int'
    | | `-ImplicitCastExpr 0x152142c38 <col:18> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x152142c00 <col:18> 'int' lvalue Var 0x152127dc0 'nparts' 'int'
    | |-UnaryOperator 0x152142c90 <col:26, col:27> 'int' postfix '++'
    | | `-DeclRefExpr 0x152142c70 <col:26> 'int' lvalue Var 0x152127e40 'i' 'int'
    | `-CompoundStmt 0x152142d70 <col:31, line:51:2>
    |   `-IfStmt 0x152142d50 <line:47:3, line:50:3>
    |     |-RecoveryExpr 0x152142ca8 <line:47:7, col:55> '_Bool' contains-errors
    |     `-CompoundStmt 0x152142d30 <col:61, line:50:3>
    |       |-BinaryOperator 0x152142d08 <line:48:4, col:9> 'int' '='
    |       | |-DeclRefExpr 0x152142cc8 <col:4> 'int' lvalue Var 0x152127ec0 'rc' 'int'
    |       | `-IntegerLiteral 0x152142ce8 <col:9> 'int' 1
    |       `-BreakStmt 0x152142d28 <line:49:4>
    |-LabelStmt 0x152142ec8 <line:52:1, col:5> 'done'
    | `-NullStmt 0x152142ec0 <col:5>
    `-ReturnStmt 0x152142fd8 <line:56:2, col:9>
      `-ImplicitCastExpr 0x152142fc0 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x152142fa0 <col:9> 'int' lvalue Var 0x152127ec0 'rc' 'int'
