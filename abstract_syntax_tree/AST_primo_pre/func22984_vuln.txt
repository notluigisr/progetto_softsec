`-FunctionDecl 0x12900de38  line:1:1 SPL_METHOD 'int (int, int)'
  |-ParmVarDecl 0x12900dd58 <col:12> col:12 MultipleIterator 'int'
  |-ParmVarDecl 0x12900dcd8 <col:30> col:30 used valid 'int'
  `-CompoundStmt 0x129028848 <line:2:1, line:40:1>
    |-DeclStmt 0x11f01ef58 <line:6:2, col:44>
    | |-VarDecl 0x12900e030 <col:2, col:31> col:31 used expect 'long'
    | `-VarDecl 0x12900e0b0 <col:2, col:39> col:39 invalid valid 'long'
    |-IfStmt 0x11f01f238 <line:10:2, line:12:2>
    | |-BinaryOperator 0x11f01f1f0 <line:10:6, col:38> 'int' contains-errors '=='
    | | |-CallExpr 0x11f01f1b0 <col:6, col:33> 'int'
    | | | `-ImplicitCastExpr 0x11f01f198 <col:6> 'int (*)()' <FunctionToPointerDecay>
    | | |   `-DeclRefExpr 0x11f01f0a0 <col:6> 'int ()' Function 0x11f01efe8 'zend_parse_parameters_none' 'int ()'
    | | `-RecoveryExpr 0x11f01f1d0 <col:38> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x11f01f220 <col:47, line:12:2>
    |   `-ReturnStmt 0x11f01f210 <line:11:3>
    |-IfStmt 0x11f01f4e0 <line:14:2, line:16:2>
    | |-UnaryOperator 0x11f01f4b8 <line:14:6, col:46> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-CallExpr 0x11f01f490 <col:7, col:46> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x11f01f338 <col:7> 'int ()' Function 0x11f01f280 'zend_hash_num_elements' 'int ()'
    | |   `-UnaryOperator 0x11f01f478 <col:30, col:39> '<dependent type>' contains-errors prefix '&' cannot overflow
    | |     `-CXXDependentScopeMemberExpr 0x11f01f430 <col:31, col:39> '<dependent type>' contains-errors lvalue ->storage
    | |       `-RecoveryExpr 0x11f01f410 <col:31> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x11f01f4d0 <col:49, line:16:2>
    |-WhileStmt 0x129028790 <line:21:2, line:37:2>
    | |-RecoveryExpr 0x11f01f860 <line:21:9, col:116> '_Bool' contains-errors
    | `-CompoundStmt 0x129028770 <col:119, line:37:2>
    |   |-IfStmt 0x11f01fdc8 <line:25:3, line:30:3> has_else
    |   | |-RecoveryExpr 0x11f01fb00 <line:25:7> '_Bool' contains-errors
    |   | |-CompoundStmt 0x11f01fd40 <col:15, line:28:3>
    |   | `-CompoundStmt 0x11f01fdb0 <col:10, line:30:3>
    |   |   `-BinaryOperator 0x11f01fd90 <line:29:4, col:12> 'int' '='
    |   |     |-DeclRefExpr 0x11f01fd50 <col:4> 'int' lvalue ParmVar 0x12900dcd8 'valid' 'int'
    |   |     `-IntegerLiteral 0x11f01fd70 <col:12> 'int' 0
    |   `-IfStmt 0x129028650 <line:32:3, line:34:3>
    |     |-BinaryOperator 0x129028488 <line:32:7, col:17> 'int' '!='
    |     | |-ImplicitCastExpr 0x129028440 <col:7> 'long' <LValueToRValue>
    |     | | `-DeclRefExpr 0x129028400 <col:7> 'long' lvalue Var 0x12900e030 'expect' 'long'
    |     | `-ImplicitCastExpr 0x129028470 <col:17> 'long' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x129028458 <col:17> 'int' <LValueToRValue>
    |     |     `-DeclRefExpr 0x129028420 <col:17> 'int' lvalue ParmVar 0x12900dcd8 'valid' 'int'
    |     `-CompoundStmt 0x129028638 <col:24, line:34:3>
    |       `-CallExpr 0x129028610 <line:33:4, col:23> 'int'
    |         |-ImplicitCastExpr 0x1290285f8 <col:4> 'int (*)()' <FunctionToPointerDecay>
    |         | `-DeclRefExpr 0x129028588 <col:4> 'int ()' Function 0x1290284d0 'RETURN_BOOL' 'int ()'
    |         `-UnaryOperator 0x1290285e0 <col:16, col:17> 'int' prefix '!' cannot overflow
    |           `-ImplicitCastExpr 0x1290285c8 <col:17> 'long' <LValueToRValue>
    |             `-DeclRefExpr 0x1290285a8 <col:17> 'long' lvalue Var 0x12900e030 'expect' 'long'
    `-CallExpr 0x129028808 <line:39:2, col:20> 'int'
      |-ImplicitCastExpr 0x1290287f0 <col:2> 'int (*)()' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x1290287b0 <col:2> 'int ()' Function 0x1290284d0 'RETURN_BOOL' 'int ()'
      `-ImplicitCastExpr 0x129028830 <col:14> 'long' <LValueToRValue>
        `-DeclRefExpr 0x1290287d0 <col:14> 'long' lvalue Var 0x12900e030 'expect' 'long'
