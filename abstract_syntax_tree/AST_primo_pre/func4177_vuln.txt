`-FunctionDecl 0x14c80e168  line:1:12 invalid asn1_template_ex_d2i 'int (int **, const unsigned char **, long, const int *, char, int *)' static
  |-ParmVarDecl 0x14c80dd60 <col:33, col:46> col:46 invalid val 'int **'
  |-ParmVarDecl 0x14c80de50 <line:2:33, col:55> col:55 used in 'const unsigned char **'
  |-ParmVarDecl 0x14c80ded0 <col:59, col:64> col:64 used inlen 'long'
  |-ParmVarDecl 0x14c80df50 <line:3:33, col:54> col:54 invalid tt 'const int *'
  |-ParmVarDecl 0x14c80dfc8 <col:58, col:63> col:63 used opt 'char'
  |-ParmVarDecl 0x14c80e048 <line:4:33, col:43> col:43 invalid ctx 'int *'
  `-CompoundStmt 0x14c123b60 <line:5:1, line:65:1>
    |-DeclStmt 0x14c80e358 <line:6:5, col:22>
    | |-VarDecl 0x14c80e258 <col:5, col:9> col:9 used flags 'int'
    | `-VarDecl 0x14c80e2d8 <col:5, col:16> col:16 used aclass 'int'
    |-DeclStmt 0x14c827400 <line:7:5, col:12>
    | `-VarDecl 0x14c80e388 <col:5, col:9> col:9 used ret 'int'
    |-DeclStmt 0x14c827498 <line:8:5, col:13>
    | `-VarDecl 0x14c827430 <col:5, col:10> col:10 used len 'long'
    |-DeclStmt 0x14c8275c8 <line:9:5, col:31>
    | |-VarDecl 0x14c8274c8 <col:5, col:26> col:26 used p 'const unsigned char *'
    | `-VarDecl 0x14c827548 <col:5, col:30> col:30 used q 'const unsigned char *'
    |-DeclStmt 0x14c827658 <line:10:5, col:17>
    | `-VarDecl 0x14c8275f0 <col:5, col:10> col:10 used exp_eoc 'char'
    |-IfStmt 0x14c8276f0 <line:11:5, line:12:16>
    | |-UnaryOperator 0x14c8276a8 <line:11:9, col:10> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x14c827690 <col:10> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x14c827670 <col:10> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x14c8276e0 <line:12:9, col:16>
    |   `-IntegerLiteral 0x14c8276c0 <col:16> 'int' 0
    |-BinaryOperator 0x14c827798 <line:13:5, col:17> 'int' contains-errors '='
    | |-DeclRefExpr 0x14c827710 <col:5> 'int' lvalue Var 0x14c80e258 'flags' 'int'
    | `-CXXDependentScopeMemberExpr 0x14c827750 <col:13, col:17> '<dependent type>' contains-errors lvalue ->flags
    |   `-RecoveryExpr 0x14c827730 <col:13> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x14c827890 <line:14:5, col:22> 'int' contains-errors '='
    | |-DeclRefExpr 0x14c8277b8 <col:5> 'int' lvalue Var 0x14c80e2d8 'aclass' 'int'
    | `-BinaryOperator 0x14c827870 <col:14, col:22> '<dependent type>' contains-errors '&'
    |   |-DeclRefExpr 0x14c8277d8 <col:14> 'int' lvalue Var 0x14c80e258 'flags' 'int'
    |   `-RecoveryExpr 0x14c827850 <col:22> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x14c827938 <line:16:5, col:10> 'const unsigned char *' '='
    | |-DeclRefExpr 0x14c8278b0 <col:5> 'const unsigned char *' lvalue Var 0x14c8274c8 'p' 'const unsigned char *'
    | `-ImplicitCastExpr 0x14c827920 <col:9, col:10> 'const unsigned char *' <LValueToRValue>
    |   `-UnaryOperator 0x14c827908 <col:9, col:10> 'const unsigned char *' lvalue prefix '*' cannot overflow
    |     `-ImplicitCastExpr 0x14c8278f0 <col:10> 'const unsigned char **' <LValueToRValue>
    |       `-DeclRefExpr 0x14c8278d0 <col:10> 'const unsigned char **' lvalue ParmVar 0x14c80de50 'in' 'const unsigned char **'
    |-IfStmt 0x14c123a08 <line:19:5, line:58:68> has_else
    | |-BinaryOperator 0x14c8279d0 <line:19:9, col:17> '<dependent type>' contains-errors '&'
    | | |-DeclRefExpr 0x14c827958 <col:9> 'int' lvalue Var 0x14c80e258 'flags' 'int'
    | | `-RecoveryExpr 0x14c8279b0 <col:17> '<dependent type>' contains-errors lvalue
    | |-CompoundStmt 0x14c123870 <col:35, line:57:5>
    | | |-DeclStmt 0x14c827a68 <line:20:9, col:17>
    | | | `-VarDecl 0x14c827a00 <col:9, col:14> col:14 used cst 'char'
    | | |-BinaryOperator 0x14c827f98 <line:22:9, line:23:67> 'int' contains-errors '='
    | | | |-DeclRefExpr 0x14c827a80 <line:22:9> 'int' lvalue Var 0x14c80e388 'ret' 'int'
    | | | `-CallExpr 0x14c827f20 <col:15, line:23:67> '<dependent type>' contains-errors
    | | |   |-DeclRefExpr 0x14c827c00 <line:22:15> 'int ()' Function 0x14c827b48 'asn1_check_tlen' 'int ()'
    | | |   |-UnaryOperator 0x14c827c70 <col:31, col:32> 'long *' prefix '&' cannot overflow
    | | |   | `-DeclRefExpr 0x14c827c20 <col:32> 'long' lvalue Var 0x14c827430 'len' 'long'
    | | |   |-RecoveryExpr 0x14c827ee0 <col:37> '<dependent type>' contains-errors lvalue
    | | |   |-RecoveryExpr 0x14c827f00 <col:43> '<dependent type>' contains-errors lvalue
    | | |   |-UnaryOperator 0x14c827cd8 <col:49, col:50> 'char *' prefix '&' cannot overflow
    | | |   | `-DeclRefExpr 0x14c827cb8 <col:50> 'char' lvalue Var 0x14c8275f0 'exp_eoc' 'char'
    | | |   |-UnaryOperator 0x14c827d10 <col:59, col:60> 'char *' prefix '&' cannot overflow
    | | |   | `-DeclRefExpr 0x14c827cf0 <col:60> 'char' lvalue Var 0x14c827a00 'cst' 'char'
    | | |   |-UnaryOperator 0x14c827d48 <line:23:31, col:32> 'const unsigned char **' prefix '&' cannot overflow
    | | |   | `-DeclRefExpr 0x14c827d28 <col:32> 'const unsigned char *' lvalue Var 0x14c8274c8 'p' 'const unsigned char *'
    | | |   |-DeclRefExpr 0x14c827d60 <col:35> 'long' lvalue ParmVar 0x14c80ded0 'inlen' 'long'
    | | |   |-CXXDependentScopeMemberExpr 0x14c827da0 <col:42, col:46> '<dependent type>' contains-errors lvalue ->tag
    | | |   | `-RecoveryExpr 0x14c827d80 <col:42> '<dependent type>' contains-errors lvalue
    | | |   |-DeclRefExpr 0x14c827de8 <col:51> 'int' lvalue Var 0x14c80e2d8 'aclass' 'int'
    | | |   |-DeclRefExpr 0x14c827e08 <col:59> 'char' lvalue ParmVar 0x14c80dfc8 'opt' 'char'
    | | |   `-RecoveryExpr 0x14c827e28 <col:64> '<dependent type>' contains-errors lvalue
    | | |-BinaryOperator 0x14c828010 <line:24:9, col:13> 'const unsigned char *' '='
    | | | |-DeclRefExpr 0x14c827fb8 <col:9> 'const unsigned char *' lvalue Var 0x14c827548 'q' 'const unsigned char *'
    | | | `-ImplicitCastExpr 0x14c827ff8 <col:13> 'const unsigned char *' <LValueToRValue>
    | | |   `-DeclRefExpr 0x14c827fd8 <col:13> 'const unsigned char *' lvalue Var 0x14c8274c8 'p' 'const unsigned char *'
    | | |-IfStmt 0x14c828398 <line:25:9, line:29:21> has_else
    | | | |-UnaryOperator 0x14c828068 <line:25:13, col:14> 'int' prefix '!' cannot overflow
    | | | | `-ImplicitCastExpr 0x14c828050 <col:14> 'int' <LValueToRValue>
    | | | |   `-DeclRefExpr 0x14c828030 <col:14> 'int' lvalue Var 0x14c80e388 'ret' 'int'
    | | | |-CompoundStmt 0x14c828280 <col:19, line:28:9>
    | | | | |-CallExpr 0x14c828220 <line:26:13, col:73> '<dependent type>' contains-errors
    | | | | | |-DeclRefExpr 0x14c828160 <col:13> 'int ()' Function 0x14c8280a8 'ASN1err' 'int ()'
    | | | | | |-RecoveryExpr 0x14c8281e0 <col:21> '<dependent type>' contains-errors lvalue
    | | | | | `-RecoveryExpr 0x14c828200 <col:50> '<dependent type>' contains-errors lvalue
    | | | | `-ReturnStmt 0x14c828270 <line:27:13, col:20>
    | | | |   `-IntegerLiteral 0x14c828250 <col:20> 'int' 0
    | | | `-IfStmt 0x14c828378 <line:28:16, line:29:21>
    | | |   |-BinaryOperator 0x14c828310 <line:28:20, col:28> 'int' '=='
    | | |   | |-ImplicitCastExpr 0x14c8282f8 <col:20> 'int' <LValueToRValue>
    | | |   | | `-DeclRefExpr 0x14c8282a0 <col:20> 'int' lvalue Var 0x14c80e388 'ret' 'int'
    | | |   | `-UnaryOperator 0x14c8282e0 <col:27, col:28> 'int' prefix '-'
    | | |   |   `-IntegerLiteral 0x14c8282c0 <col:28> 'int' 1
    | | |   `-ReturnStmt 0x14c828368 <line:29:13, col:21>
    | | |     `-UnaryOperator 0x14c828350 <col:20, col:21> 'int' prefix '-'
    | | |       `-IntegerLiteral 0x14c828330 <col:21> 'int' 1
    | | |-IfStmt 0x14c122f58 <line:30:9, line:34:9>
    | | | |-UnaryOperator 0x14c122e00 <line:30:13, col:14> 'int' prefix '!' cannot overflow
    | | | | `-ImplicitCastExpr 0x14c8283e8 <col:14> 'char' <LValueToRValue>
    | | | |   `-DeclRefExpr 0x14c8283c8 <col:14> 'char' lvalue Var 0x14c827a00 'cst' 'char'
    | | | `-CompoundStmt 0x14c122f38 <col:19, line:34:9>
    | | |   |-CallExpr 0x14c122ed8 <line:31:13, line:32:56> '<dependent type>' contains-errors
    | | |   | |-DeclRefExpr 0x14c122e18 <line:31:13> 'int ()' Function 0x14c8280a8 'ASN1err' 'int ()'
    | | |   | |-RecoveryExpr 0x14c122e98 <col:21> '<dependent type>' contains-errors lvalue
    | | |   | `-RecoveryExpr 0x14c122eb8 <line:32:21> '<dependent type>' contains-errors lvalue
    | | |   `-ReturnStmt 0x14c122f28 <line:33:13, col:20>
    | | |     `-IntegerLiteral 0x14c122f08 <col:20> 'int' 0
    | | |-BinaryOperator 0x14c1231c0 <line:36:9, col:63> 'int' contains-errors '='
    | | | |-DeclRefExpr 0x14c122f78 <col:9> 'int' lvalue Var 0x14c80e388 'ret' 'int'
    | | | `-CallExpr 0x14c123170 <col:15, col:63> '<dependent type>' contains-errors
    | | |   |-DeclRefExpr 0x14c123078 <col:15> 'int ()' Function 0x14c122fc0 'asn1_template_noexp_d2i' 'int ()'
    | | |   |-RecoveryExpr 0x14c123098 <col:39> '<dependent type>' contains-errors lvalue
    | | |   |-UnaryOperator 0x14c1230d8 <col:44, col:45> 'const unsigned char **' prefix '&' cannot overflow
    | | |   | `-DeclRefExpr 0x14c1230b8 <col:45> 'const unsigned char *' lvalue Var 0x14c8274c8 'p' 'const unsigned char *'
    | | |   |-DeclRefExpr 0x14c1230f0 <col:48> 'long' lvalue Var 0x14c827430 'len' 'long'
    | | |   |-RecoveryExpr 0x14c123110 <col:53> '<dependent type>' contains-errors lvalue
    | | |   |-IntegerLiteral 0x14c123130 <col:57> 'int' 0
    | | |   `-RecoveryExpr 0x14c123150 <col:60> '<dependent type>' contains-errors lvalue
    | | |-IfStmt 0x14c123370 <line:37:9, line:40:9>
    | | | |-UnaryOperator 0x14c123218 <line:37:13, col:14> 'int' prefix '!' cannot overflow
    | | | | `-ImplicitCastExpr 0x14c123200 <col:14> 'int' <LValueToRValue>
    | | | |   `-DeclRefExpr 0x14c1231e0 <col:14> 'int' lvalue Var 0x14c80e388 'ret' 'int'
    | | | `-CompoundStmt 0x14c123350 <col:19, line:40:9>
    | | |   |-CallExpr 0x14c1232f0 <line:38:13, col:73> '<dependent type>' contains-errors
    | | |   | |-DeclRefExpr 0x14c123230 <col:13> 'int ()' Function 0x14c8280a8 'ASN1err' 'int ()'
    | | |   | |-RecoveryExpr 0x14c1232b0 <col:21> '<dependent type>' contains-errors lvalue
    | | |   | `-RecoveryExpr 0x14c1232d0 <col:50> '<dependent type>' contains-errors lvalue
    | | |   `-ReturnStmt 0x14c123340 <line:39:13, col:20>
    | | |     `-IntegerLiteral 0x14c123320 <col:20> 'int' 0
    | | |-CompoundAssignOperator 0x14c123440 <line:42:9, col:20> 'long' '-=' ComputeLHSTy='long' ComputeResultTy='long'
    | | | |-DeclRefExpr 0x14c123390 <col:9> 'long' lvalue Var 0x14c827430 'len' 'long'
    | | | `-BinaryOperator 0x14c123420 <col:16, col:20> 'long' '-'
    | | |   |-ImplicitCastExpr 0x14c1233f0 <col:16> 'const unsigned char *' <LValueToRValue>
    | | |   | `-DeclRefExpr 0x14c1233b0 <col:16> 'const unsigned char *' lvalue Var 0x14c8274c8 'p' 'const unsigned char *'
    | | |   `-ImplicitCastExpr 0x14c123408 <col:20> 'const unsigned char *' <LValueToRValue>
    | | |     `-DeclRefExpr 0x14c1233d0 <col:20> 'const unsigned char *' lvalue Var 0x14c827548 'q' 'const unsigned char *'
    | | `-IfStmt 0x14c123840 <line:43:9, line:56:9> has_else
    | |   |-ImplicitCastExpr 0x14c123490 <line:43:13> 'char' <LValueToRValue>
    | |   | `-DeclRefExpr 0x14c123470 <col:13> 'char' lvalue Var 0x14c8275f0 'exp_eoc' 'char'
    | |   |-CompoundStmt 0x14c123768 <col:22, line:49:9>
    | |   | `-IfStmt 0x14c123748 <line:45:13, line:48:13>
    | |   |   |-UnaryOperator 0x14c123690 <line:45:17, col:40> 'int' prefix '!' cannot overflow
    | |   |   | `-CallExpr 0x14c123648 <col:18, col:40> 'int'
    | |   |   |   |-ImplicitCastExpr 0x14c123630 <col:18> 'int (*)()' <FunctionToPointerDecay>
    | |   |   |   | `-DeclRefExpr 0x14c123588 <col:18> 'int ()' Function 0x14c1234d0 'asn1_check_eoc' 'int ()'
    | |   |   |   |-UnaryOperator 0x14c1235c8 <col:33, col:34> 'const unsigned char **' prefix '&' cannot overflow
    | |   |   |   | `-DeclRefExpr 0x14c1235a8 <col:34> 'const unsigned char *' lvalue Var 0x14c8274c8 'p' 'const unsigned char *'
    | |   |   |   `-ImplicitCastExpr 0x14c123678 <col:37> 'long' <LValueToRValue>
    | |   |   |     `-DeclRefExpr 0x14c1235e0 <col:37> 'long' lvalue Var 0x14c827430 'len' 'long'
    | |   |   `-CompoundStmt 0x14c123730 <col:43, line:48:13>
    | |   |     `-GotoStmt 0x14c123718 <line:47:17, col:22> 'err' 0x14c1236c8
    | |   `-CompoundStmt 0x14c123828 <line:49:16, line:56:9>
    | |     `-IfStmt 0x14c123808 <line:51:13, line:55:13>
    | |       |-ImplicitCastExpr 0x14c1237a0 <line:51:17> 'long' <LValueToRValue>
    | |       | `-DeclRefExpr 0x14c123780 <col:17> 'long' lvalue Var 0x14c827430 'len' 'long'
    | |       `-CompoundStmt 0x14c1237f0 <col:22, line:55:13>
    | |         `-GotoStmt 0x14c1237d8 <line:54:17, col:22> 'err' 0x14c1236c8
    | `-ReturnStmt 0x14c1239f8 <line:58:9, col:68>
    |   `-CallExpr 0x14c1239a8 <col:16, col:68> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x14c1238c8 <col:16> 'int ()' Function 0x14c122fc0 'asn1_template_noexp_d2i' 'int ()'
    |     |-RecoveryExpr 0x14c1238e8 <col:40> '<dependent type>' contains-errors lvalue
    |     |-DeclRefExpr 0x14c123908 <col:45> 'const unsigned char **' lvalue ParmVar 0x14c80de50 'in' 'const unsigned char **'
    |     |-DeclRefExpr 0x14c123928 <col:49> 'long' lvalue ParmVar 0x14c80ded0 'inlen' 'long'
    |     |-RecoveryExpr 0x14c123948 <col:56> '<dependent type>' contains-errors lvalue
    |     |-DeclRefExpr 0x14c123968 <col:60> 'char' lvalue ParmVar 0x14c80dfc8 'opt' 'char'
    |     `-RecoveryExpr 0x14c123988 <col:65> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x14c123ac0 <line:60:5, col:11> 'const unsigned char *' '='
    | |-UnaryOperator 0x14c123a70 <col:5, col:6> 'const unsigned char *' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x14c123a58 <col:6> 'const unsigned char **' <LValueToRValue>
    | |   `-DeclRefExpr 0x14c123a38 <col:6> 'const unsigned char **' lvalue ParmVar 0x14c80de50 'in' 'const unsigned char **'
    | `-ImplicitCastExpr 0x14c123aa8 <col:11> 'const unsigned char *' <LValueToRValue>
    |   `-DeclRefExpr 0x14c123a88 <col:11> 'const unsigned char *' lvalue Var 0x14c8274c8 'p' 'const unsigned char *'
    |-ReturnStmt 0x14c123b00 <line:61:5, col:12>
    | `-IntegerLiteral 0x14c123ae0 <col:12> 'int' 1
    `-LabelStmt 0x14c123b40 <line:63:2, line:64:12> 'err'
      `-ReturnStmt 0x14c123b30 <col:5, col:12>
        `-IntegerLiteral 0x14c123b10 <col:12> 'int' 0
