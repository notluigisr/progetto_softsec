`-FunctionDecl 0x14a0fb5f8  line:1:1 invalid zsetmaxlength 'int (int *)'
  |-ParmVarDecl 0x14a0fb528 <col:15, col:24> col:24 invalid i_ctx_p 'int *'
  `-CompoundStmt 0x14a116448 <line:2:1, line:21:1>
    |-DeclStmt 0x14a0fb728 <line:5:5, col:18>
    | `-VarDecl 0x14a0fb6c0 <col:5, col:10> col:10 used new_size 'int'
    |-DeclStmt 0x14a0fb7c0 <line:6:5, col:13>
    | `-VarDecl 0x14a0fb758 <col:5, col:9> col:9 used code 'int'
    |-CallExpr 0x14a0fba50 <line:8:5, col:34> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x14a0fb930 <col:5> 'int ()' Function 0x14a0fb878 'check_type' 'int ()'
    | |-UnaryOperator 0x14a0fba18 <col:16, col:17> '<dependent type>' contains-errors prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x14a0fba00 <col:17> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x14a0fb9e0 <col:17> '<dependent type>' contains-errors lvalue
    | `-RecoveryExpr 0x14a0fba30 <col:22> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x14a114d18 <line:9:5, line:10:30>
    | |-BinaryOperator 0x14a0fbb08 <line:9:9, col:34> 'int' contains-errors '=='
    | | |-CXXDependentScopeMemberExpr 0x14a0fbaa0 <col:9, col:18> '<dependent type>' contains-errors lvalue ->in_superexec
    | | | `-RecoveryExpr 0x14a0fba80 <col:9> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x14a0fbae8 <col:34> 'int' 0
    | `-CallExpr 0x14a114cf0 <line:10:9, col:30> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x14a114c10 <col:9> 'int ()' Function 0x14a0fbb50 'check_dict_write' 'int ()'
    |   `-UnaryOperator 0x14a114cd8 <col:26, col:27> '<dependent type>' contains-errors prefix '*' cannot overflow
    |     `-ImplicitCastExpr 0x14a114cc0 <col:27> '<dependent type>' contains-errors <LValueToRValue>
    |       `-RecoveryExpr 0x14a114ca0 <col:27> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x14a114e58 <line:11:5, col:30> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x14a114d38 <col:5> 'int ()' Function 0x14a0fb878 'check_type' 'int ()'
    | |-UnaryOperator 0x14a114e20 <col:16, col:17> '<dependent type>' contains-errors prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x14a114e08 <col:17> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x14a114de8 <col:17> '<dependent type>' contains-errors lvalue
    | `-RecoveryExpr 0x14a114e38 <col:21> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x14a1151c8 <line:12:5, line:13:41>
    | |-BinaryOperator 0x14a115020 <line:12:9, col:28> 'int' contains-errors '<'
    | | |-CXXDependentScopeMemberExpr 0x14a114fd8 <col:9, col:19> '<dependent type>' contains-errors lvalue .intval
    | | | `-CXXDependentScopeMemberExpr 0x14a114f90 <col:9, col:13> '<dependent type>' contains-errors lvalue ->value
    | | |   `-RecoveryExpr 0x14a114f70 <col:9> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x14a114f30 <col:28> 'int' 0
    | `-CallExpr 0x14a1151a0 <line:13:9, col:41> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x14a115120 <col:9> 'int ()' Function 0x14a115068 'return_error' 'int ()'
    |   `-RecoveryExpr 0x14a115180 <col:22> '<dependent type>' contains-errors lvalue
    |-ImplicitCastExpr 0x14a1156d0 <line:14:5, col:21> '<dependent type>' contains-errors <LValueToRValue>
    | `-RecoveryExpr 0x14a1156a0 <col:5, col:21> '<dependent type>' contains-errors lvalue
    |   |-DeclRefExpr 0x14a1151e8 <col:5> 'int' lvalue Var 0x14a0fb6c0 'new_size' 'int'
    |   `-ParenExpr 0x14a115260 <col:16, col:21> '<overloaded function type>' lvalue
    |     `-UnresolvedLookupExpr 0x14a115220 <col:17> '<overloaded function type>' lvalue (no ADL) = 'uint' empty
    |-IfStmt 0x14a115bd0 <line:18:5, line:19:14>
    | |-BinaryOperator 0x14a115a20 <line:18:9, col:17> 'int' '>='
    | | |-ImplicitCastExpr 0x14a115a08 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14a1159c8 <col:9> 'int' lvalue Var 0x14a0fb758 'code' 'int'
    | | `-IntegerLiteral 0x14a1159e8 <col:17> 'int' 0
    | `-CallExpr 0x14a115ba8 <line:19:9, col:14> 'int'
    |   |-ImplicitCastExpr 0x14a115b90 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x14a115b20 <col:9> 'int ()' Function 0x14a115a68 'pop' 'int ()'
    |   `-IntegerLiteral 0x14a115b40 <col:13> 'int' 2
    `-ReturnStmt 0x14a116438 <line:20:5, col:12>
      `-ImplicitCastExpr 0x14a116420 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x14a116400 <col:12> 'int' lvalue Var 0x14a0fb758 'code' 'int'
