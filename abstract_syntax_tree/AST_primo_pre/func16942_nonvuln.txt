`-FunctionDecl 0x13180de68  line:1:7 format_string_expand 'char *(const char *, int *)'
  |-ParmVarDecl 0x13180dcd8 <col:28, col:40> col:40 used text 'const char *'
  |-ParmVarDecl 0x13180dd88 <col:46, col:51> col:51 used flags 'int *'
  `-CompoundStmt 0x131829560 <line:2:1, line:38:1>
    |-DeclStmt 0x13180e0a8 <line:4:2, col:17>
    | |-VarDecl 0x13180dfa8 <col:2, col:7> col:7 used code 'char'
    | `-VarDecl 0x13180e028 <col:2, col:14> col:14 used ret 'char *'
    |-DeclStmt 0x13180e140 <line:5:2, col:9>
    | `-VarDecl 0x13180e0d8 <col:2, col:6> col:6 used adv 'int'
    |-CallExpr 0x13180e390 <line:7:2, col:41> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x13180e270 <col:2> 'int ()' Function 0x13180e1b8 'g_return_val_if_fail' 'int ()'
    | |-BinaryOperator 0x13180e350 <col:23, col:31> 'int' contains-errors '!='
    | | |-DeclRefExpr 0x13180e290 <col:23> 'const char *' lvalue ParmVar 0x13180dcd8 'text' 'const char *'
    | | `-RecoveryExpr 0x13180e330 <col:31> '<dependent type>' contains-errors lvalue
    | `-RecoveryExpr 0x13180e370 <col:37> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x131828440 <line:11:2, col:30>
    | |-BinaryOperator 0x131828390 <col:6, col:15> 'int' contains-errors '!='
    | | |-DeclRefExpr 0x131828318 <col:6> 'int *' lvalue ParmVar 0x13180dd88 'flags' 'int *'
    | | `-RecoveryExpr 0x131828370 <col:15> '<dependent type>' contains-errors lvalue
    | `-BinaryOperator 0x131828420 <col:21, col:30> 'int' '='
    |   |-UnaryOperator 0x1318283e8 <col:21, col:22> 'int' lvalue prefix '*' cannot overflow
    |   | `-ImplicitCastExpr 0x1318283d0 <col:22> 'int *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x1318283b0 <col:22> 'int *' lvalue ParmVar 0x13180dd88 'flags' 'int *'
    |   `-IntegerLiteral 0x131828400 <col:30> 'int' 0
    |-BinaryOperator 0x1318284b8 <line:12:2, col:9> 'char' '='
    | |-DeclRefExpr 0x131828460 <col:2> 'char' lvalue Var 0x13180dfa8 'code' 'char'
    | `-ImplicitCastExpr 0x1318284a0 <col:9> 'char' <IntegralCast>
    |   `-IntegerLiteral 0x131828480 <col:9> 'int' 0
    |-WhileStmt 0x131829200 <line:13:2, line:33:2>
    | |-BinaryOperator 0x131828570 <line:13:9, col:18> 'int' '!='
    | | |-ImplicitCastExpr 0x131828558 <col:9, col:10> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x131828540 <col:9, col:10> 'char' <LValueToRValue>
    | | |   `-UnaryOperator 0x131828510 <col:9, col:10> 'const char' lvalue prefix '*' cannot overflow
    | | |     `-ImplicitCastExpr 0x1318284f8 <col:10> 'const char *' <LValueToRValue>
    | | |       `-DeclRefExpr 0x1318284d8 <col:10> 'const char *' lvalue ParmVar 0x13180dcd8 'text' 'const char *'
    | | `-CharacterLiteral 0x131828528 <col:18> 'int' 0
    | `-CompoundStmt 0x1318291d0 <col:24, line:33:2>
    |   |-IfStmt 0x131829168 <line:14:3, line:30:3> has_else
    |   | |-BinaryOperator 0x1318285f8 <line:14:7, col:15> 'int' '=='
    |   | | |-ImplicitCastExpr 0x1318285e0 <col:7> 'int' <IntegralCast>
    |   | | | `-ImplicitCastExpr 0x1318285c8 <col:7> 'char' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x131828590 <col:7> 'char' lvalue Var 0x13180dfa8 'code' 'char'
    |   | | `-CharacterLiteral 0x1318285b0 <col:15> 'int' 37
    |   | |-CompoundStmt 0x131828e60 <col:20, line:25:3>
    |   | | |-BinaryOperator 0x131828888 <line:16:4, col:48> 'int' contains-errors '='
    |   | | | |-DeclRefExpr 0x131828618 <col:4> 'int' lvalue Var 0x13180e0d8 'adv' 'int'
    |   | | | `-CallExpr 0x131828850 <col:10, col:48> '<dependent type>' contains-errors
    |   | | |   |-DeclRefExpr 0x131828718 <col:10> 'int ()' Function 0x131828660 'format_expand_styles' 'int ()'
    |   | | |   |-RecoveryExpr 0x131828830 <col:31> '<dependent type>' contains-errors lvalue
    |   | | |   |-UnaryOperator 0x1318287a0 <col:36, col:37> 'const char **' prefix '&' cannot overflow
    |   | | |   | `-DeclRefExpr 0x131828750 <col:37> 'const char *' lvalue ParmVar 0x13180dcd8 'text' 'const char *'
    |   | | |   `-DeclRefExpr 0x1318287b8 <col:43> 'int *' lvalue ParmVar 0x13180dd88 'flags' 'int *'
    |   | | |-IfStmt 0x131828db8 <line:17:4, line:23:4> has_else
    |   | | | |-UnaryOperator 0x1318288e0 <line:17:8, col:9> 'int' prefix '!' cannot overflow
    |   | | | | `-ImplicitCastExpr 0x1318288c8 <col:9> 'int' <LValueToRValue>
    |   | | | |   `-DeclRefExpr 0x1318288a8 <col:9> 'int' lvalue Var 0x13180e0d8 'adv' 'int'
    |   | | | |-CompoundStmt 0x131828cb0 <col:14, line:21:4>
    |   | | | | |-CallExpr 0x131828a78 <line:18:5, col:31> '<dependent type>' contains-errors
    |   | | | | | |-DeclRefExpr 0x1318289d8 <col:5> 'int ()' Function 0x131828920 'g_string_append_c' 'int ()'
    |   | | | | | |-RecoveryExpr 0x131828a58 <col:23> '<dependent type>' contains-errors lvalue
    |   | | | | | `-CharacterLiteral 0x131828a10 <col:28> 'int' 37
    |   | | | | |-CallExpr 0x131828b48 <line:19:5, col:31> '<dependent type>' contains-errors
    |   | | | | | |-DeclRefExpr 0x131828aa8 <col:5> 'int ()' Function 0x131828920 'g_string_append_c' 'int ()'
    |   | | | | | |-RecoveryExpr 0x131828b28 <col:23> '<dependent type>' contains-errors lvalue
    |   | | | | | `-CharacterLiteral 0x131828ae0 <col:28> 'int' 37
    |   | | | | `-CallExpr 0x131828c80 <line:20:5, col:33> '<dependent type>' contains-errors
    |   | | | |   |-DeclRefExpr 0x131828b78 <col:5> 'int ()' Function 0x131828920 'g_string_append_c' 'int ()'
    |   | | | |   |-RecoveryExpr 0x131828c30 <col:23> '<dependent type>' contains-errors lvalue
    |   | | | |   `-UnaryOperator 0x131828c68 <col:28, col:29> 'const char' lvalue prefix '*' cannot overflow
    |   | | | |     `-ImplicitCastExpr 0x131828c50 <col:29> 'const char *' <LValueToRValue>
    |   | | | |       `-DeclRefExpr 0x131828bb0 <col:29> 'const char *' lvalue ParmVar 0x13180dcd8 'text' 'const char *'
    |   | | | `-CompoundStmt 0x131828da0 <line:21:11, line:23:4>
    |   | | |   `-CompoundAssignOperator 0x131828d70 <line:22:6, col:20> 'const char *' '+=' ComputeLHSTy='const char *' ComputeResultTy='const char *'
    |   | | |     |-DeclRefExpr 0x131828cd8 <col:6> 'const char *' lvalue ParmVar 0x13180dcd8 'text' 'const char *'
    |   | | |     `-BinaryOperator 0x131828d50 <col:14, col:20> 'int' '-'
    |   | | |       |-ImplicitCastExpr 0x131828d38 <col:14> 'int' <LValueToRValue>
    |   | | |       | `-DeclRefExpr 0x131828cf8 <col:14> 'int' lvalue Var 0x13180e0d8 'adv' 'int'
    |   | | |       `-IntegerLiteral 0x131828d18 <col:20> 'int' 1
    |   | | `-BinaryOperator 0x131828e40 <line:24:4, col:11> 'char' '='
    |   | |   |-DeclRefExpr 0x131828de8 <col:4> 'char' lvalue Var 0x13180dfa8 'code' 'char'
    |   | |   `-ImplicitCastExpr 0x131828e28 <col:11> 'char' <IntegralCast>
    |   | |     `-IntegerLiteral 0x131828e08 <col:11> 'int' 0
    |   | `-CompoundStmt 0x131829150 <line:25:10, line:30:3>
    |   |   `-IfStmt 0x131829120 <line:26:4, line:29:33> has_else
    |   |     |-BinaryOperator 0x131828f20 <line:26:8, col:17> 'int' '=='
    |   |     | |-ImplicitCastExpr 0x131828f08 <col:8, col:9> 'int' <IntegralCast>
    |   |     | | `-ImplicitCastExpr 0x131828ef0 <col:8, col:9> 'char' <LValueToRValue>
    |   |     | |   `-UnaryOperator 0x131828ec0 <col:8, col:9> 'const char' lvalue prefix '*' cannot overflow
    |   |     | |     `-ImplicitCastExpr 0x131828ea8 <col:9> 'const char *' <LValueToRValue>
    |   |     | |       `-DeclRefExpr 0x131828e88 <col:9> 'const char *' lvalue ParmVar 0x13180dcd8 'text' 'const char *'
    |   |     | `-CharacterLiteral 0x131828ed8 <col:17> 'int' 37
    |   |     |-BinaryOperator 0x131828fc8 <line:27:5, col:13> 'char' '='
    |   |     | |-DeclRefExpr 0x131828f40 <col:5> 'char' lvalue Var 0x13180dfa8 'code' 'char'
    |   |     | `-ImplicitCastExpr 0x131828fb0 <col:12, col:13> 'char' <LValueToRValue>
    |   |     |   `-UnaryOperator 0x131828f98 <col:12, col:13> 'const char' lvalue prefix '*' cannot overflow
    |   |     |     `-ImplicitCastExpr 0x131828f80 <col:13> 'const char *' <LValueToRValue>
    |   |     |       `-DeclRefExpr 0x131828f60 <col:13> 'const char *' lvalue ParmVar 0x13180dcd8 'text' 'const char *'
    |   |     `-CallExpr 0x1318290f0 <line:29:5, col:33> '<dependent type>' contains-errors
    |   |       |-DeclRefExpr 0x131828fe8 <col:5> 'int ()' Function 0x131828920 'g_string_append_c' 'int ()'
    |   |       |-RecoveryExpr 0x1318290a0 <col:23> '<dependent type>' contains-errors lvalue
    |   |       `-UnaryOperator 0x1318290d8 <col:28, col:29> 'const char' lvalue prefix '*' cannot overflow
    |   |         `-ImplicitCastExpr 0x1318290c0 <col:29> 'const char *' <LValueToRValue>
    |   |           `-DeclRefExpr 0x131829020 <col:29> 'const char *' lvalue ParmVar 0x13180dcd8 'text' 'const char *'
    |   `-UnaryOperator 0x1318291b8 <line:32:3, col:7> 'const char *' postfix '++'
    |     `-DeclRefExpr 0x131829198 <col:3> 'const char *' lvalue ParmVar 0x13180dcd8 'text' 'const char *'
    |-BinaryOperator 0x131829328 <line:35:2, col:13> 'char *' contains-errors '='
    | |-DeclRefExpr 0x131829220 <col:2> 'char *' lvalue Var 0x13180e028 'ret' 'char *'
    | `-CXXDependentScopeMemberExpr 0x1318292e0 <col:8, col:13> '<dependent type>' contains-errors lvalue ->str
    |   `-RecoveryExpr 0x1318292c0 <col:8> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x1318294e8 <line:36:2, col:26> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x131829428 <col:2> 'int ()' Function 0x131829370 'g_string_free' 'int ()'
    | |-RecoveryExpr 0x1318294a8 <col:16> '<dependent type>' contains-errors lvalue
    | `-RecoveryExpr 0x1318294c8 <col:21> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x131829550 <line:37:2, col:9>
      `-ImplicitCastExpr 0x131829538 <col:9> 'char *' <LValueToRValue>
        `-DeclRefExpr 0x131829518 <col:9> 'char *' lvalue Var 0x13180e028 'ret' 'char *'
