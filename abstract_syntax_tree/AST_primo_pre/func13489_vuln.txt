`-FunctionDecl 0x13d128b18  line:1:5 invalid X509_aux_print 'int (int *, int *, int)'
  |-ParmVarDecl 0x13d128928 <col:20, col:25> col:25 invalid out 'int *'
  |-ParmVarDecl 0x13d1289a8 <col:30, col:36> col:36 invalid x 'int *'
  |-ParmVarDecl 0x13d128a28 <col:39, col:43> col:43 indent 'int'
  `-CompoundStmt 0x13d1452e0 <line:2:1, line:53:1>
    |-DeclStmt 0x13d128d78 <line:3:5, col:27>
    | |-VarDecl 0x13d128c80 <col:5, col:19> col:10 used oidstr 'char[80]'
    | `-VarDecl 0x13d128cf8 <col:5, col:22> col:22 used first 'char'
    |-BinaryOperator 0x13d142cd8 <line:4:5, col:36> '<dependent type>' contains-errors ','
    | |-BinaryOperator 0x13d142c68 <col:5, col:28> '<dependent type>' contains-errors '*'
    | | |-CallExpr 0x13d142c20 <col:5, col:25> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x13d128ef0 <col:5> 'int ()' Function 0x13d128e38 'STACK_OF' 'int ()'
    | | | `-RecoveryExpr 0x13d142c00 <col:14> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x13d142c48 <col:28> '<dependent type>' contains-errors lvalue
    | `-UnaryOperator 0x13d142cc0 <col:35, col:36> '<dependent type>' contains-errors prefix '*' cannot overflow
    |   `-ImplicitCastExpr 0x13d142ca8 <col:36> '<dependent type>' contains-errors <LValueToRValue>
    |     `-RecoveryExpr 0x13d142c88 <col:36> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x13d142e48 <line:5:5, col:39>
    | |-VarDecl 0x13d142d48 <col:5, col:26> col:26 used alias 'const unsigned char *'
    | `-VarDecl 0x13d142dc8 <col:5, col:34> col:34 used keyid 'const unsigned char *'
    |-DeclStmt 0x13d142ee0 <line:6:5, col:17>
    | `-VarDecl 0x13d142e78 <col:5, col:9> col:9 used keyidlen 'int'
    |-DeclStmt 0x13d142f78 <line:7:5, col:10>
    | `-VarDecl 0x13d142f10 <col:5, col:9> col:9 used i 'int'
    |-IfStmt 0x13d143148 <line:8:5, line:9:16>
    | |-BinaryOperator 0x13d1430f8 <line:8:9, col:28> 'int' contains-errors '=='
    | | |-CallExpr 0x13d1430b0 <col:9, col:23> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x13d143070 <col:9> 'int ()' Function 0x13d142fb8 'X509_trusted' 'int ()'
    | | | `-RecoveryExpr 0x13d143090 <col:22> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x13d1430d8 <col:28> 'int' 0
    | `-ReturnStmt 0x13d143138 <line:9:9, col:16>
    |   `-IntegerLiteral 0x13d143118 <col:16> 'int' 1
    |-IfStmt 0x13d1441f0 <line:12:5, line:26:30> has_else
    | |-RecoveryExpr 0x13d143410 <line:12:9> '<dependent type>' contains-errors lvalue
    | |-CompoundStmt 0x13d144130 <col:16, line:25:5>
    | | |-BinaryOperator 0x13d143488 <line:13:9, col:17> 'char' '='
    | | | |-DeclRefExpr 0x13d143430 <col:9> 'char' lvalue Var 0x13d128cf8 'first' 'char'
    | | | `-ImplicitCastExpr 0x13d143470 <col:17> 'char' <IntegralCast>
    | | |   `-IntegerLiteral 0x13d143450 <col:17> 'int' 1
    | | |-CallExpr 0x13d143630 <line:14:9, col:30> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x13d143588 <col:9> 'int ()' Function 0x13d1434d0 'BIO_printf' 'int ()'
    | | | |-RecoveryExpr 0x13d1435a8 <col:20> '<dependent type>' contains-errors lvalue
    | | | `-StringLiteral 0x13d143610 <col:25> 'char[4]' lvalue "STR"
    | | |-ForStmt 0x13d144068 <line:15:9, line:23:9>
    | | | |-BinaryOperator 0x13d1436a0 <line:15:14, col:18> 'int' '='
    | | | | |-DeclRefExpr 0x13d143660 <col:14> 'int' lvalue Var 0x13d142f10 'i' 'int'
    | | | | `-IntegerLiteral 0x13d143680 <col:18> 'int' 0
    | | | |-<<<NULL>>>
    | | | |-BinaryOperator 0x13d143888 <col:21, col:49> 'int' contains-errors '<'
    | | | | |-DeclRefExpr 0x13d1436c0 <col:21> 'int' lvalue Var 0x13d142f10 'i' 'int'
    | | | | `-CallExpr 0x13d143860 <col:25, col:49> '<dependent type>' contains-errors
    | | | |   |-DeclRefExpr 0x13d1437c0 <col:25> 'int ()' Function 0x13d143708 'sk_ASN1_OBJECT_num' 'int ()'
    | | | |   `-RecoveryExpr 0x13d143840 <col:44> '<dependent type>' contains-errors lvalue
    | | | |-UnaryOperator 0x13d1438c8 <col:52, col:53> 'int' postfix '++'
    | | | | `-DeclRefExpr 0x13d1438a8 <col:52> 'int' lvalue Var 0x13d142f10 'i' 'int'
    | | | `-CompoundStmt 0x13d144040 <col:57, line:23:9>
    | | |   |-IfStmt 0x13d143b18 <line:16:13, line:19:25> has_else
    | | |   | |-UnaryOperator 0x13d143918 <line:16:17, col:18> 'int' prefix '!' cannot overflow
    | | |   | | `-ImplicitCastExpr 0x13d143900 <col:18> 'char' <LValueToRValue>
    | | |   | |   `-DeclRefExpr 0x13d1438e0 <col:18> 'char' lvalue Var 0x13d128cf8 'first' 'char'
    | | |   | |-CallExpr 0x13d143a70 <line:17:17, col:36> '<dependent type>' contains-errors
    | | |   | | |-DeclRefExpr 0x13d143a10 <col:17> 'int ()' Function 0x13d143958 'BIO_puts' 'int ()'
    | | |   | | |-RecoveryExpr 0x13d143a30 <col:26> '<dependent type>' contains-errors lvalue
    | | |   | | `-StringLiteral 0x13d143a50 <col:31> 'char[4]' lvalue "STR"
    | | |   | `-BinaryOperator 0x13d143af8 <line:19:17, col:25> 'char' '='
    | | |   |   |-DeclRefExpr 0x13d143aa0 <col:17> 'char' lvalue Var 0x13d128cf8 'first' 'char'
    | | |   |   `-ImplicitCastExpr 0x13d143ae0 <col:25> 'char' <IntegralCast>
    | | |   |     `-IntegerLiteral 0x13d143ac0 <col:25> 'int' 0
    | | |   |-CallExpr 0x13d143f70 <line:20:13, line:21:58> '<dependent type>' contains-errors
    | | |   | |-DeclRefExpr 0x13d143cb8 <line:20:13> 'int ()' Function 0x13d143c00 'OBJ_obj2txt' 'int ()'
    | | |   | |-DeclRefExpr 0x13d143cd8 <col:25> 'char[80]' lvalue Var 0x13d128c80 'oidstr' 'char[80]'
    | | |   | |-UnaryExprOrTypeTraitExpr 0x13d143d38 <col:33, col:46> 'unsigned long' sizeof
    | | |   | | `-ParenExpr 0x13d143d18 <col:39, col:46> 'char[80]' lvalue
    | | |   | |   `-DeclRefExpr 0x13d143cf8 <col:40> 'char[80]' lvalue Var 0x13d128c80 'oidstr' 'char[80]' non_odr_use_unevaluated
    | | |   | |-CallExpr 0x13d143f40 <line:21:25, col:54> '<dependent type>' contains-errors
    | | |   | | |-DeclRefExpr 0x13d143e38 <col:25> 'int ()' Function 0x13d143d80 'sk_ASN1_OBJECT_value' 'int ()'
    | | |   | | |-RecoveryExpr 0x13d143f20 <col:46> '<dependent type>' contains-errors lvalue
    | | |   | | `-DeclRefExpr 0x13d143e70 <col:53> 'int' lvalue Var 0x13d142f10 'i' 'int'
    | | |   | `-IntegerLiteral 0x13d143ec0 <col:57> 'int' 0
    | | |   `-CallExpr 0x13d144010 <line:22:13, col:33> '<dependent type>' contains-errors
    | | |     |-DeclRefExpr 0x13d143fb0 <col:13> 'int ()' Function 0x13d143958 'BIO_puts' 'int ()'
    | | |     |-RecoveryExpr 0x13d143fd0 <col:22> '<dependent type>' contains-errors lvalue
    | | |     `-DeclRefExpr 0x13d143ff0 <col:27> 'char[80]' lvalue Var 0x13d128c80 'oidstr' 'char[80]'
    | | `-CallExpr 0x13d144100 <line:24:9, col:28> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x13d1440a0 <col:9> 'int ()' Function 0x13d143958 'BIO_puts' 'int ()'
    | |   |-RecoveryExpr 0x13d1440c0 <col:18> '<dependent type>' contains-errors lvalue
    | |   `-StringLiteral 0x13d1440e0 <col:23> 'char[4]' lvalue "STR"
    | `-CallExpr 0x13d1441c0 <line:26:9, col:30> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x13d144160 <col:9> 'int ()' Function 0x13d1434d0 'BIO_printf' 'int ()'
    |   |-RecoveryExpr 0x13d144180 <col:20> '<dependent type>' contains-errors lvalue
    |   `-StringLiteral 0x13d1441a0 <col:25> 'char[4]' lvalue "STR"
    |-IfStmt 0x13d1448a0 <line:27:5, line:41:30> has_else
    | |-RecoveryExpr 0x13d144220 <line:27:9> '_Bool' contains-errors
    | |-CompoundStmt 0x13d1447e8 <col:17, line:40:5>
    | | |-BinaryOperator 0x13d144298 <line:28:9, col:17> 'char' '='
    | | | |-DeclRefExpr 0x13d144240 <col:9> 'char' lvalue Var 0x13d128cf8 'first' 'char'
    | | | `-ImplicitCastExpr 0x13d144280 <col:17> 'char' <IntegralCast>
    | | |   `-IntegerLiteral 0x13d144260 <col:17> 'int' 1
    | | |-CallExpr 0x13d144318 <line:29:9, col:30> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x13d1442b8 <col:9> 'int ()' Function 0x13d1434d0 'BIO_printf' 'int ()'
    | | | |-RecoveryExpr 0x13d1442d8 <col:20> '<dependent type>' contains-errors lvalue
    | | | `-StringLiteral 0x13d1442f8 <col:25> 'char[4]' lvalue "STR"
    | | `-CallExpr 0x13d1447b8 <line:39:9, col:28> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x13d144758 <col:9> 'int ()' Function 0x13d143958 'BIO_puts' 'int ()'
    | |   |-RecoveryExpr 0x13d144778 <col:18> '<dependent type>' contains-errors lvalue
    | |   `-StringLiteral 0x13d144798 <col:23> 'char[4]' lvalue "STR"
    | `-CallExpr 0x13d144870 <line:41:9, col:30> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x13d144810 <col:9> 'int ()' Function 0x13d1434d0 'BIO_printf' 'int ()'
    |   |-RecoveryExpr 0x13d144830 <col:20> '<dependent type>' contains-errors lvalue
    |   `-StringLiteral 0x13d144850 <col:25> 'char[4]' lvalue "STR"
    |-IfStmt 0x13d144b00 <line:43:5, line:44:37>
    | |-ImplicitCastExpr 0x13d144a30 <line:43:9> 'const unsigned char *' <LValueToRValue>
    | | `-DeclRefExpr 0x13d144a10 <col:9> 'const unsigned char *' lvalue Var 0x13d142d48 'alias' 'const unsigned char *'
    | `-CallExpr 0x13d144ac8 <line:44:9, col:37> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x13d144a48 <col:9> 'int ()' Function 0x13d1434d0 'BIO_printf' 'int ()'
    |   |-RecoveryExpr 0x13d144a68 <col:20> '<dependent type>' contains-errors lvalue
    |   |-StringLiteral 0x13d144a88 <col:25> 'char[4]' lvalue "STR"
    |   `-DeclRefExpr 0x13d144aa8 <col:32> 'const unsigned char *' lvalue Var 0x13d142d48 'alias' 'const unsigned char *'
    |-BinaryOperator 0x13d144d60 <line:45:5, col:41> 'const unsigned char *' contains-errors '='
    | |-DeclRefExpr 0x13d144b20 <col:5> 'const unsigned char *' lvalue Var 0x13d142dc8 'keyid' 'const unsigned char *'
    | `-CallExpr 0x13d144d30 <col:13, col:41> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x13d144cb8 <col:13> 'int ()' Function 0x13d144c00 'X509_keyid_get0' 'int ()'
    |   |-RecoveryExpr 0x13d144cd8 <col:29> '<dependent type>' contains-errors lvalue
    |   `-UnaryOperator 0x13d144d18 <col:32, col:33> 'int *' prefix '&' cannot overflow
    |     `-DeclRefExpr 0x13d144cf8 <col:33> 'int' lvalue Var 0x13d142e78 'keyidlen' 'int'
    |-IfStmt 0x13d145290 <line:46:5, line:51:5>
    | |-ImplicitCastExpr 0x13d144da0 <line:46:9> 'const unsigned char *' <LValueToRValue>
    | | `-DeclRefExpr 0x13d144d80 <col:9> 'const unsigned char *' lvalue Var 0x13d142dc8 'keyid' 'const unsigned char *'
    | `-CompoundStmt 0x13d145268 <col:16, line:51:5>
    |   |-CallExpr 0x13d144e18 <line:47:9, col:30> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x13d144db8 <col:9> 'int ()' Function 0x13d1434d0 'BIO_printf' 'int ()'
    |   | |-RecoveryExpr 0x13d144dd8 <col:20> '<dependent type>' contains-errors lvalue
    |   | `-StringLiteral 0x13d144df8 <col:25> 'char[4]' lvalue "STR"
    |   |-ForStmt 0x13d145098 <line:48:9, line:49:44>
    |   | |-BinaryOperator 0x13d144e88 <line:48:14, col:18> 'int' '='
    |   | | |-DeclRefExpr 0x13d144e48 <col:14> 'int' lvalue Var 0x13d142f10 'i' 'int'
    |   | | `-IntegerLiteral 0x13d144e68 <col:18> 'int' 0
    |   | |-<<<NULL>>>
    |   | |-BinaryOperator 0x13d144f18 <col:21, col:25> 'int' '<'
    |   | | |-ImplicitCastExpr 0x13d144ee8 <col:21> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x13d144ea8 <col:21> 'int' lvalue Var 0x13d142f10 'i' 'int'
    |   | | `-ImplicitCastExpr 0x13d144f00 <col:25> 'int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x13d144ec8 <col:25> 'int' lvalue Var 0x13d142e78 'keyidlen' 'int'
    |   | |-UnaryOperator 0x13d144f58 <col:35, col:36> 'int' postfix '++'
    |   | | `-DeclRefExpr 0x13d144f38 <col:35> 'int' lvalue Var 0x13d142f10 'i' 'int'
    |   | `-CallExpr 0x13d145060 <line:49:13, col:44> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x13d144f70 <col:13> 'int ()' Function 0x13d1434d0 'BIO_printf' 'int ()'
    |   |   |-RecoveryExpr 0x13d144f90 <col:24> '<dependent type>' contains-errors lvalue
    |   |   |-StringLiteral 0x13d144fb0 <col:29> 'char[4]' lvalue "STR"
    |   |   `-ArraySubscriptExpr 0x13d145040 <col:36, col:43> 'const unsigned char' lvalue
    |   |     |-ImplicitCastExpr 0x13d145010 <col:36> 'const unsigned char *' <LValueToRValue>
    |   |     | `-DeclRefExpr 0x13d144fd0 <col:36> 'const unsigned char *' lvalue Var 0x13d142dc8 'keyid' 'const unsigned char *'
    |   |     `-ImplicitCastExpr 0x13d145028 <col:42> 'int' <LValueToRValue>
    |   |       `-DeclRefExpr 0x13d144ff0 <col:42> 'int' lvalue Var 0x13d142f10 'i' 'int'
    |   `-CallExpr 0x13d145230 <line:50:9, col:32> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x13d1451b0 <col:9> 'int ()' Function 0x13d1450f8 'BIO_write' 'int ()'
    |     |-RecoveryExpr 0x13d1451d0 <col:19> '<dependent type>' contains-errors lvalue
    |     |-StringLiteral 0x13d1451f0 <col:24> 'char[4]' lvalue "STR"
    |     `-IntegerLiteral 0x13d145210 <col:31> 'int' 1
    `-ReturnStmt 0x13d1452d0 <line:52:5, col:12>
      `-IntegerLiteral 0x13d1452b0 <col:12> 'int' 1
