`-FunctionDecl 0x12d00de38  line:1:1 TEST_F 'int (int, int)'
  |-ParmVarDecl 0x12d00dd58 <col:8> col:8 ExpressionDateFromStringTest 'int'
  |-ParmVarDecl 0x12d00dcd8 <col:38> col:38 OptimizesToConstantIfAllInputsAreConstant 'int'
  `-CompoundStmt 0x12d026998 <col:81, line:36:1>
    |-DeclStmt 0x12d00e168 <line:2:5, col:30>
    | `-VarDecl 0x12d00df50 <col:5, col:29> col:10 expCtx 'int' auto cinit
    |   `-CallExpr 0x12d00e148 <col:19, col:29> 'int'
    |     `-ImplicitCastExpr 0x12d00e130 <col:19> 'int (*)()' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x12d00e0e0 <col:19> 'int ()' Function 0x12d00e028 'getExpCtx' 'int ()'
    |-DeclStmt 0x12e008648 <line:4:5, line:5:57>
    | `-VarDecl 0x12d00e198 <line:4:5, line:5:56> line:4:10 used spec 'int' auto cinit
    |   `-CallExpr 0x12e008620 <col:17, line:5:56> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x12d00e2e0 <line:4:17> 'int ()' Function 0x12d00e228 'BSON' 'int ()'
    |     `-RecoveryExpr 0x12e0085f0 <col:22, line:5:51> '<dependent type>' contains-errors lvalue
    |       |-StringLiteral 0x12d00e340 <line:4:22> 'char[4]' lvalue "STR"
    |       `-StringLiteral 0x12d00e360 <line:5:51> 'char[4]' lvalue "STR"
    |-DeclStmt 0x12e008718 <line:6:5, col:30>
    | `-VarDecl 0x12e008678 <col:5, col:20> col:10 used dateExp 'int' auto cinit
    |   `-RecoveryExpr 0x12e0086f8 <col:20> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x12e008d50 <line:13:5, line:16:51> 'int' contains-errors '='
    | |-DeclRefExpr 0x12e008bc8 <line:13:5> 'int' contains-errors lvalue Var 0x12d00e198 'spec' 'int'
    | `-CallExpr 0x12e008d28 <col:12, line:16:51> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x12e008be8 <line:13:12> 'int ()' Function 0x12d00e228 'BSON' 'int ()'
    |   `-BinaryOperator 0x12e008d08 <col:17, line:16:46> '<dependent type>' contains-errors '<<'
    |     |-BinaryOperator 0x12e008cc8 <line:13:17, line:15:46> '<dependent type>' contains-errors '<<'
    |     | |-RecoveryExpr 0x12e008c78 <line:13:17, line:14:46> '<dependent type>' contains-errors lvalue
    |     | | |-StringLiteral 0x12e008c08 <line:13:17> 'char[4]' lvalue "STR"
    |     | | `-StringLiteral 0x12e008c28 <line:14:46> 'char[4]' lvalue "STR"
    |     | `-StringLiteral 0x12e008ca8 <line:15:46> 'char[4]' lvalue "STR"
    |     `-StringLiteral 0x12e008ce8 <line:16:46> 'char[4]' lvalue "STR"
    |-BinaryOperator 0x12e009060 <line:24:5, line:25:51> 'int' contains-errors '='
    | |-DeclRefExpr 0x12e008f58 <line:24:5> 'int' contains-errors lvalue Var 0x12d00e198 'spec' 'int'
    | `-CallExpr 0x12e009038 <col:12, line:25:51> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x12e008f78 <line:24:12> 'int ()' Function 0x12d00e228 'BSON' 'int ()'
    |   `-RecoveryExpr 0x12e009008 <col:17, line:25:46> '<dependent type>' contains-errors lvalue
    |     |-StringLiteral 0x12e008f98 <line:24:17> 'char[4]' lvalue "STR"
    |     `-StringLiteral 0x12e008fb8 <line:25:46> 'char[4]' lvalue "STR"
    `-BinaryOperator 0x12d026830 <line:30:5, line:33:51> 'int' contains-errors '='
      |-DeclRefExpr 0x12d0266a8 <line:30:5> 'int' contains-errors lvalue Var 0x12d00e198 'spec' 'int'
      `-CallExpr 0x12d026808 <col:12, line:33:51> '<dependent type>' contains-errors
        |-DeclRefExpr 0x12d0266c8 <line:30:12> 'int ()' Function 0x12d00e228 'BSON' 'int ()'
        `-BinaryOperator 0x12d0267e8 <col:17, line:33:46> '<dependent type>' contains-errors '<<'
          |-BinaryOperator 0x12d0267a8 <line:30:17, line:32:46> '<dependent type>' contains-errors '<<'
          | |-RecoveryExpr 0x12d026758 <line:30:17, line:31:46> '<dependent type>' contains-errors lvalue
          | | |-StringLiteral 0x12d0266e8 <line:30:17> 'char[4]' lvalue "STR"
          | | `-StringLiteral 0x12d026708 <line:31:46> 'char[4]' lvalue "STR"
          | `-StringLiteral 0x12d026788 <line:32:46> 'char[4]' lvalue "STR"
          `-StringLiteral 0x12d0267c8 <line:33:46> 'char[4]' lvalue "STR"
