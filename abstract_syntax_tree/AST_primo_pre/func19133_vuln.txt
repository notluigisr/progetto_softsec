`-FunctionDecl 0x13d00e100  line:1:20 ModulateHCL 'void (const double, const double, const double, double *, double *, double *)' static inline
  |-ParmVarDecl 0x13d00dcd8 <col:32, col:45> col:45 used percent_hue 'const double'
  |-ParmVarDecl 0x13d00dd58 <line:2:3, col:16> col:16 used percent_chroma 'const double'
  |-ParmVarDecl 0x13d00ddd8 <col:31, col:44> col:44 used percent_luma 'const double'
  |-ParmVarDecl 0x13d00de88 <col:57, col:65> col:65 used red 'double *'
  |-ParmVarDecl 0x13d00df08 <line:3:3, col:11> col:11 used green 'double *'
  |-ParmVarDecl 0x13d00df88 <col:17, col:25> col:25 used blue 'double *'
  `-CompoundStmt 0x13d027f70 <line:4:1, line:20:1>
    |-DeclStmt 0x13d00e3c0 <line:5:3, line:8:11>
    | |-VarDecl 0x13d00e238 <line:5:3, line:6:5> col:5 used hue 'double'
    | |-VarDecl 0x13d00e2b8 <line:5:3, line:7:5> col:5 used luma 'double'
    | `-VarDecl 0x13d00e338 <line:5:3, line:8:5> col:5 used chroma 'double'
    |-CallExpr 0x13d027718 <line:11:3, col:55> 'int'
    | |-ImplicitCastExpr 0x13d027700 <col:3> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x13d027510 <col:3> 'int ()' Function 0x13d027458 'ConvertRGBToHCL' 'int ()'
    | |-ImplicitCastExpr 0x13d027768 <col:19, col:20> 'double' <LValueToRValue>
    | | `-UnaryOperator 0x13d027568 <col:19, col:20> 'double' lvalue prefix '*' cannot overflow
    | |   `-ImplicitCastExpr 0x13d027550 <col:20> 'double *' <LValueToRValue>
    | |     `-DeclRefExpr 0x13d027530 <col:20> 'double *' lvalue ParmVar 0x13d00de88 'red' 'double *'
    | |-ImplicitCastExpr 0x13d027780 <col:24, col:25> 'double' <LValueToRValue>
    | | `-UnaryOperator 0x13d0275b8 <col:24, col:25> 'double' lvalue prefix '*' cannot overflow
    | |   `-ImplicitCastExpr 0x13d0275a0 <col:25> 'double *' <LValueToRValue>
    | |     `-DeclRefExpr 0x13d027580 <col:25> 'double *' lvalue ParmVar 0x13d00df08 'green' 'double *'
    | |-ImplicitCastExpr 0x13d027798 <col:31, col:32> 'double' <LValueToRValue>
    | | `-UnaryOperator 0x13d027608 <col:31, col:32> 'double' lvalue prefix '*' cannot overflow
    | |   `-ImplicitCastExpr 0x13d0275f0 <col:32> 'double *' <LValueToRValue>
    | |     `-DeclRefExpr 0x13d0275d0 <col:32> 'double *' lvalue ParmVar 0x13d00df88 'blue' 'double *'
    | |-UnaryOperator 0x13d027640 <col:37, col:38> 'double *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x13d027620 <col:38> 'double' lvalue Var 0x13d00e238 'hue' 'double'
    | |-UnaryOperator 0x13d027678 <col:42, col:43> 'double *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x13d027658 <col:43> 'double' lvalue Var 0x13d00e338 'chroma' 'double'
    | `-UnaryOperator 0x13d0276b0 <col:50, col:51> 'double *' prefix '&' cannot overflow
    |   `-DeclRefExpr 0x13d027690 <col:51> 'double' lvalue Var 0x13d00e2b8 'luma' 'double'
    |-CompoundAssignOperator 0x13d0278e8 <line:12:3, col:33> 'double' '+=' ComputeLHSTy='double' ComputeResultTy='double'
    | |-DeclRefExpr 0x13d0277b0 <col:3> 'double' lvalue Var 0x13d00e238 'hue' 'double'
    | `-BinaryOperator 0x13d0278c8 <col:8, col:33> 'double' '*'
    |   |-FloatingLiteral 0x13d0277d0 <col:8> 'double' 5.000000e-01
    |   `-ParenExpr 0x13d0278a8 <col:12, col:33> 'double'
    |     `-BinaryOperator 0x13d027888 <col:13, col:30> 'double' '-'
    |       |-BinaryOperator 0x13d027848 <col:13, col:18> 'double' '*'
    |       | |-FloatingLiteral 0x13d0277f0 <col:13> 'double' 1.000000e-02
    |       | `-ImplicitCastExpr 0x13d027830 <col:18> 'double' <LValueToRValue>
    |       |   `-DeclRefExpr 0x13d027810 <col:18> 'const double' lvalue ParmVar 0x13d00dcd8 'percent_hue' 'const double'
    |       `-FloatingLiteral 0x13d027868 <col:30> 'double' 1.000000e+00
    |-WhileStmt 0x13d027a00 <line:13:3, line:14:10>
    | |-BinaryOperator 0x13d027970 <line:13:10, col:16> 'int' '<'
    | | |-ImplicitCastExpr 0x13d027958 <col:10> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x13d027918 <col:10> 'double' lvalue Var 0x13d00e238 'hue' 'double'
    | | `-FloatingLiteral 0x13d027938 <col:16> 'double' 0.000000e+00
    | `-CompoundAssignOperator 0x13d0279d0 <line:14:5, col:10> 'double' '+=' ComputeLHSTy='double' ComputeResultTy='double'
    |   |-DeclRefExpr 0x13d027990 <col:5> 'double' lvalue Var 0x13d00e238 'hue' 'double'
    |   `-FloatingLiteral 0x13d0279b0 <col:10> 'double' 1.000000e+00
    |-WhileStmt 0x13d027b08 <line:15:3, line:16:10>
    | |-BinaryOperator 0x13d027a78 <line:15:10, col:16> 'int' '>'
    | | |-ImplicitCastExpr 0x13d027a60 <col:10> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x13d027a20 <col:10> 'double' lvalue Var 0x13d00e238 'hue' 'double'
    | | `-FloatingLiteral 0x13d027a40 <col:16> 'double' 1.000000e+00
    | `-CompoundAssignOperator 0x13d027ad8 <line:16:5, col:10> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
    |   |-DeclRefExpr 0x13d027a98 <col:5> 'double' lvalue Var 0x13d00e238 'hue' 'double'
    |   `-FloatingLiteral 0x13d027ab8 <col:10> 'double' 1.000000e+00
    |-CompoundAssignOperator 0x13d027bc0 <line:17:3, col:16> 'double' '*=' ComputeLHSTy='double' ComputeResultTy='double'
    | |-DeclRefExpr 0x13d027b28 <col:3> 'double' lvalue Var 0x13d00e338 'chroma' 'double'
    | `-BinaryOperator 0x13d027ba0 <col:11, col:16> 'double' '*'
    |   |-FloatingLiteral 0x13d027b48 <col:11> 'double' 1.000000e-02
    |   `-ImplicitCastExpr 0x13d027b88 <col:16> 'double' <LValueToRValue>
    |     `-DeclRefExpr 0x13d027b68 <col:16> 'const double' lvalue ParmVar 0x13d00dd58 'percent_chroma' 'const double'
    |-CompoundAssignOperator 0x13d027c88 <line:18:3, col:14> 'double' '*=' ComputeLHSTy='double' ComputeResultTy='double'
    | |-DeclRefExpr 0x13d027bf0 <col:3> 'double' lvalue Var 0x13d00e2b8 'luma' 'double'
    | `-BinaryOperator 0x13d027c68 <col:9, col:14> 'double' '*'
    |   |-FloatingLiteral 0x13d027c10 <col:9> 'double' 1.000000e-02
    |   `-ImplicitCastExpr 0x13d027c50 <col:14> 'double' <LValueToRValue>
    |     `-DeclRefExpr 0x13d027c30 <col:14> 'const double' lvalue ParmVar 0x13d00ddd8 'percent_luma' 'const double'
    `-CallExpr 0x13d027e90 <line:19:3, col:49> 'int'
      |-ImplicitCastExpr 0x13d027e78 <col:3> 'int (*)()' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x13d027d98 <col:3> 'int ()' Function 0x13d027ce0 'ConvertHCLToRGB' 'int ()'
      |-ImplicitCastExpr 0x13d027ee0 <col:19> 'double' <LValueToRValue>
      | `-DeclRefExpr 0x13d027db8 <col:19> 'double' lvalue Var 0x13d00e238 'hue' 'double'
      |-ImplicitCastExpr 0x13d027ef8 <col:23> 'double' <LValueToRValue>
      | `-DeclRefExpr 0x13d027dd8 <col:23> 'double' lvalue Var 0x13d00e338 'chroma' 'double'
      |-ImplicitCastExpr 0x13d027f10 <col:30> 'double' <LValueToRValue>
      | `-DeclRefExpr 0x13d027df8 <col:30> 'double' lvalue Var 0x13d00e2b8 'luma' 'double'
      |-ImplicitCastExpr 0x13d027f28 <col:35> 'double *' <LValueToRValue>
      | `-DeclRefExpr 0x13d027e18 <col:35> 'double *' lvalue ParmVar 0x13d00de88 'red' 'double *'
      |-ImplicitCastExpr 0x13d027f40 <col:39> 'double *' <LValueToRValue>
      | `-DeclRefExpr 0x13d027e38 <col:39> 'double *' lvalue ParmVar 0x13d00df08 'green' 'double *'
      `-ImplicitCastExpr 0x13d027f58 <col:45> 'double *' <LValueToRValue>
        `-DeclRefExpr 0x13d027e58 <col:45> 'double *' lvalue ParmVar 0x13d00df88 'blue' 'double *'
