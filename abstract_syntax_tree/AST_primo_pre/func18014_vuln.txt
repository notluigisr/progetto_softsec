`-FunctionDecl 0x13d80dfe8  line:1:15 invalid CurvesAlloc 'int *(int, int, int, int **)'
  |-ParmVarDecl 0x13d80dcf0 <col:27, col:38> col:38 invalid ContextID 'int'
  |-ParmVarDecl 0x13d80dd70 <col:49, col:53> col:53 used nCurves 'int'
  |-ParmVarDecl 0x13d80ddf0 <col:62, col:66> col:66 used nElements 'int'
  |-ParmVarDecl 0x13d80dee0 <col:77, col:92> col:92 invalid G 'int **'
  `-CompoundStmt 0x13d828c50 <line:2:1, line:35:1>
    |-DeclStmt 0x13d80e1c8 <line:3:5, col:13>
    | |-VarDecl 0x13d80e0c8 <col:5, col:9> col:9 used i 'int'
    | `-VarDecl 0x13d80e148 <col:5, col:12> col:12 used j 'int'
    |-IfStmt 0x13d827ea8 <line:7:5, col:29>
    | |-BinaryOperator 0x13d827e40 <col:9, col:16> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x13d827e00 <col:9> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x13d827e20 <col:16> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x13d827e98 <col:22, col:29>
    |   `-RecoveryExpr 0x13d827e78 <col:29> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x13d8281e8 <line:13:5, col:38>
    | |-BinaryOperator 0x13d828180 <col:9, col:25> 'int' contains-errors '=='
    | | |-CXXDependentScopeMemberExpr 0x13d828118 <col:9, col:15> '<dependent type>' contains-errors lvalue ->Curves
    | | | `-RecoveryExpr 0x13d8280f8 <col:9> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x13d828160 <col:25> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x13d8281d8 <col:31, col:38>
    |   `-RecoveryExpr 0x13d8281b8 <col:38> '<dependent type>' contains-errors lvalue
    `-ForStmt 0x13d828c18 <line:15:5, line:32:5>
      |-BinaryOperator 0x13d828248 <line:15:10, col:12> 'int' '='
      | |-DeclRefExpr 0x13d828208 <col:10> 'int' lvalue Var 0x13d80e0c8 'i' 'int'
      | `-IntegerLiteral 0x13d828228 <col:12> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x13d8282d8 <col:15, col:19> 'int' '<'
      | |-ImplicitCastExpr 0x13d8282a8 <col:15> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x13d828268 <col:15> 'int' lvalue Var 0x13d80e0c8 'i' 'int'
      | `-ImplicitCastExpr 0x13d8282c0 <col:19> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x13d828288 <col:19> 'int' lvalue ParmVar 0x13d80dd70 'nCurves' 'int'
      |-UnaryOperator 0x13d828318 <col:28, col:29> 'int' postfix '++'
      | `-DeclRefExpr 0x13d8282f8 <col:28> 'int' lvalue Var 0x13d80e0c8 'i' 'int'
      `-CompoundStmt 0x13d828c00 <col:33, line:32:5>
        `-IfStmt 0x13d828bd0 <line:19:9, line:31:9> has_else
          |-BinaryOperator 0x13d828408 <line:19:13, col:26> 'int' '=='
          | |-ImplicitCastExpr 0x13d8283f0 <col:13> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x13d8283b0 <col:13> 'int' lvalue ParmVar 0x13d80ddf0 'nElements' 'int'
          | `-IntegerLiteral 0x13d8283d0 <col:26> 'int' 256
          |-CompoundStmt 0x13d828940 <col:31, line:25:9>
          | `-ForStmt 0x13d828908 <line:21:13, line:24:13>
          |   |-BinaryOperator 0x13d828468 <line:21:18, col:20> 'int' '='
          |   | |-DeclRefExpr 0x13d828428 <col:18> 'int' lvalue Var 0x13d80e148 'j' 'int'
          |   | `-IntegerLiteral 0x13d828448 <col:20> 'int' 0
          |   |-<<<NULL>>>
          |   |-BinaryOperator 0x13d8284f8 <col:23, col:27> 'int' '<'
          |   | |-ImplicitCastExpr 0x13d8284c8 <col:23> 'int' <LValueToRValue>
          |   | | `-DeclRefExpr 0x13d828488 <col:23> 'int' lvalue Var 0x13d80e148 'j' 'int'
          |   | `-ImplicitCastExpr 0x13d8284e0 <col:27> 'int' <LValueToRValue>
          |   |   `-DeclRefExpr 0x13d8284a8 <col:27> 'int' lvalue ParmVar 0x13d80ddf0 'nElements' 'int'
          |   |-UnaryOperator 0x13d828538 <col:38, col:39> 'int' postfix '++'
          |   | `-DeclRefExpr 0x13d828518 <col:38> 'int' lvalue Var 0x13d80e148 'j' 'int'
          |   `-CompoundStmt 0x13d8288f8 <col:43, line:24:13>
          `-CompoundStmt 0x13d828bb8 <line:26:14, line:31:9>
            `-ForStmt 0x13d828b80 <line:28:13, line:30:13>
              |-BinaryOperator 0x13d828998 <line:28:18, col:20> 'int' '='
              | |-DeclRefExpr 0x13d828958 <col:18> 'int' lvalue Var 0x13d80e148 'j' 'int'
              | `-IntegerLiteral 0x13d828978 <col:20> 'int' 0
              |-<<<NULL>>>
              |-BinaryOperator 0x13d828a28 <col:23, col:27> 'int' '<'
              | |-ImplicitCastExpr 0x13d8289f8 <col:23> 'int' <LValueToRValue>
              | | `-DeclRefExpr 0x13d8289b8 <col:23> 'int' lvalue Var 0x13d80e148 'j' 'int'
              | `-ImplicitCastExpr 0x13d828a10 <col:27> 'int' <LValueToRValue>
              |   `-DeclRefExpr 0x13d8289d8 <col:27> 'int' lvalue ParmVar 0x13d80ddf0 'nElements' 'int'
              |-UnaryOperator 0x13d828a68 <col:38, col:39> 'int' postfix '++'
              | `-DeclRefExpr 0x13d828a48 <col:38> 'int' lvalue Var 0x13d80e148 'j' 'int'
              `-CompoundStmt 0x13d828b70 <col:43, line:30:13>
