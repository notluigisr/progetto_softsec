`-FunctionDecl 0x15100dfc8  line:1:14 referenced invalid d2i_ASN1_OBJECT 'int *(int **, const unsigned char **, long)'
  |-ParmVarDecl 0x15100dd60 <col:30, col:44> col:44 invalid a 'int **'
  |-ParmVarDecl 0x15100de50 <col:47, col:69> col:69 used pp 'const unsigned char **'
  |-ParmVarDecl 0x15100ded0 <line:2:7, col:12> col:12 used length 'long'
  `-CompoundStmt 0x1510280e0 <line:3:1, line:28:1>
    |-DeclStmt 0x15100e108 <line:4:2, col:24>
    | `-VarDecl 0x15100e0a0 <col:2, col:23> col:23 used p 'const unsigned char *'
    |-DeclStmt 0x15100e1a0 <line:5:2, col:10>
    | `-VarDecl 0x15100e138 <col:2, col:7> col:7 used len 'long'
    |-DeclStmt 0x15100e2d0 <line:6:2, col:16>
    | |-VarDecl 0x15100e1d0 <col:2, col:6> col:6 used tag 'int'
    | `-VarDecl 0x15100e250 <col:2, col:10> col:10 used xclass 'int'
    |-DeclStmt 0x151027400 <line:7:2, col:11>
    | |-VarDecl 0x15100e300 <col:2, col:6> col:6 used inf 'int'
    | `-VarDecl 0x15100e380 <col:2, col:10> col:10 used i 'int'
    |-BinaryOperator 0x1510274d0 <line:9:2, col:6> 'const unsigned char *' '='
    | |-DeclRefExpr 0x151027448 <col:2> 'const unsigned char *' lvalue Var 0x15100e0a0 'p' 'const unsigned char *'
    | `-ImplicitCastExpr 0x1510274b8 <col:5, col:6> 'const unsigned char *' <LValueToRValue>
    |   `-UnaryOperator 0x1510274a0 <col:5, col:6> 'const unsigned char *' lvalue prefix '*' cannot overflow
    |     `-ImplicitCastExpr 0x151027488 <col:6> 'const unsigned char **' <LValueToRValue>
    |       `-DeclRefExpr 0x151027468 <col:6> 'const unsigned char **' lvalue ParmVar 0x15100de50 'pp' 'const unsigned char **'
    |-BinaryOperator 0x151027878 <line:10:2, col:49> 'int' '='
    | |-DeclRefExpr 0x1510274f0 <col:2> 'int' lvalue Var 0x15100e300 'inf' 'int'
    | `-CallExpr 0x151027818 <col:6, col:49> 'int'
    |   |-ImplicitCastExpr 0x151027800 <col:6> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x151027670 <col:6> 'int ()' Function 0x1510275b8 'ASN1_get_object' 'int ()'
    |   |-UnaryOperator 0x1510276b0 <col:22, col:23> 'const unsigned char **' prefix '&' cannot overflow
    |   | `-DeclRefExpr 0x151027690 <col:23> 'const unsigned char *' lvalue Var 0x15100e0a0 'p' 'const unsigned char *'
    |   |-UnaryOperator 0x151027720 <col:25, col:26> 'long *' prefix '&' cannot overflow
    |   | `-DeclRefExpr 0x1510276c8 <col:26> 'long' lvalue Var 0x15100e138 'len' 'long'
    |   |-UnaryOperator 0x151027758 <col:30, col:31> 'int *' prefix '&' cannot overflow
    |   | `-DeclRefExpr 0x151027738 <col:31> 'int' lvalue Var 0x15100e1d0 'tag' 'int'
    |   |-UnaryOperator 0x151027790 <col:35, col:36> 'int *' prefix '&' cannot overflow
    |   | `-DeclRefExpr 0x151027770 <col:36> 'int' lvalue Var 0x15100e250 'xclass' 'int'
    |   `-ImplicitCastExpr 0x151027860 <col:43> 'long' <LValueToRValue>
    |     `-DeclRefExpr 0x1510277a8 <col:43> 'long' lvalue ParmVar 0x15100ded0 'length' 'long'
    |-IfStmt 0x151027a30 <line:11:2, line:15:3>
    | |-BinaryOperator 0x1510278f0 <line:11:6, col:12> 'int' '&'
    | | |-ImplicitCastExpr 0x1510278d8 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x151027898 <col:6> 'int' lvalue Var 0x15100e300 'inf' 'int'
    | | `-IntegerLiteral 0x1510278b8 <col:12> 'int' 128
    | `-CompoundStmt 0x151027a10 <line:12:3, line:15:3>
    |   |-BinaryOperator 0x151027988 <line:13:3, col:5> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x151027910 <col:3> 'int' lvalue Var 0x15100e380 'i' 'int'
    |   | `-RecoveryExpr 0x151027968 <col:5> '<dependent type>' contains-errors lvalue
    |   `-GotoStmt 0x1510279f8 <line:14:3, col:8> 'err' 0x1510279a8
    |-IfStmt 0x151027bd8 <line:17:2, line:21:3>
    | |-BinaryOperator 0x151027ae8 <line:17:6, col:13> 'int' contains-errors '!='
    | | |-DeclRefExpr 0x151027a50 <col:6> 'int' lvalue Var 0x15100e1d0 'tag' 'int'
    | | `-RecoveryExpr 0x151027ac8 <col:13> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x151027bb8 <line:18:3, line:21:3>
    |   |-BinaryOperator 0x151027b80 <line:19:3, col:5> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x151027b08 <col:3> 'int' lvalue Var 0x15100e380 'i' 'int'
    |   | `-RecoveryExpr 0x151027b60 <col:5> '<dependent type>' contains-errors lvalue
    |   `-GotoStmt 0x151027ba0 <line:20:3, col:8> 'err' 0x1510279a8
    |-IfStmt 0x151027e88 <line:23:2, col:16>
    | |-RecoveryExpr 0x151027dc0 <col:5> '<dependent type>' contains-errors lvalue
    | `-BinaryOperator 0x151027e68 <col:10, col:16> 'const unsigned char *' '='
    |   |-UnaryOperator 0x151027e18 <col:10, col:11> 'const unsigned char *' lvalue prefix '*' cannot overflow
    |   | `-ImplicitCastExpr 0x151027e00 <col:11> 'const unsigned char **' <LValueToRValue>
    |   |   `-DeclRefExpr 0x151027de0 <col:11> 'const unsigned char **' lvalue ParmVar 0x15100de50 'pp' 'const unsigned char **'
    |   `-ImplicitCastExpr 0x151027e50 <col:16> 'const unsigned char *' <LValueToRValue>
    |     `-DeclRefExpr 0x151027e30 <col:16> 'const unsigned char *' lvalue Var 0x15100e0a0 'p' 'const unsigned char *'
    |-ReturnStmt 0x151027ee0 <line:24:2, col:9>
    | `-RecoveryExpr 0x151027ec0 <col:9> '<dependent type>' contains-errors lvalue
    `-LabelStmt 0x1510280a8 <line:25:1, line:26:34> 'err'
      `-CallExpr 0x151028078 <col:2, col:34> '<dependent type>' contains-errors
        |-DeclRefExpr 0x151027fd0 <col:2> 'int ()' Function 0x151027f18 'ASN1err' 'int ()'
        |-RecoveryExpr 0x151028058 <col:10> '<dependent type>' contains-errors lvalue
        `-DeclRefExpr 0x151028008 <col:33> 'int' lvalue Var 0x15100e380 'i' 'int'
