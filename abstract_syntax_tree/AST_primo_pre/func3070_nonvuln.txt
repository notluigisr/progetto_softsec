`-FunctionDecl 0x132026a98  line:1:1 invalid rsa_sec_decrypt 'int (const struct rsa_public_key *, const struct rsa_private_key *, void *, int *, int, int *, const int)'
  |-ParmVarDecl 0x13200e248 <col:17, col:46> col:46 used pub 'const struct rsa_public_key *'
  |-ParmVarDecl 0x132026628 <line:2:10, col:40> col:40 used key 'const struct rsa_private_key *'
  |-ParmVarDecl 0x1320266a8 <line:3:10, col:16> col:16 used random_ctx 'void *'
  |-ParmVarDecl 0x132026778 <col:28, col:48> col:48 invalid random 'int *'
  |-ParmVarDecl 0x1320267f8 <line:4:10, col:17> col:17 invalid length 'int'
  |-ParmVarDecl 0x132026878 <col:25, col:34> col:34 invalid message 'int *'
  |-ParmVarDecl 0x1320268f8 <line:5:10, col:22> col:22 invalid gibberish 'const int'
  `-CompoundStmt 0x132028000 <line:6:1, line:30:1>
    |-CallExpr 0x132026d90 <line:7:3, col:29> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x132026cd0 <col:3> 'int ()' Function 0x132026c18 'TMP_GMP_DECL' 'int ()'
    | |-RecoveryExpr 0x132026d50 <col:17> '<dependent type>' contains-errors lvalue
    | `-RecoveryExpr 0x132026d70 <col:20> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x132026e80 <line:8:3, col:28> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x132026dc0 <col:3> 'int ()' Function 0x132026c18 'TMP_GMP_DECL' 'int ()'
    | |-RecoveryExpr 0x132026e40 <col:17> '<dependent type>' contains-errors lvalue
    | `-RecoveryExpr 0x132026e60 <col:21> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x132026f30 <line:9:3, col:10>
    | `-VarDecl 0x132026ec8 <col:3, col:7> col:7 used res 'int'
    |-IfStmt 0x132027310 <line:12:3, line:13:12>
    | |-BinaryOperator 0x1320272c0 <line:12:7, col:65> 'int' contains-errors '||'
    | | |-BinaryOperator 0x1320270b0 <col:7, col:29> 'int' contains-errors '<'
    | | | |-CallExpr 0x132027068 <col:7, col:25> '<dependent type>' contains-errors
    | | | | |-DeclRefExpr 0x132027028 <col:7> 'int ()' Function 0x132026f70 'mpz_sgn' 'int ()'
    | | | | `-RecoveryExpr 0x132027048 <col:16> '<dependent type>' contains-errors lvalue
    | | | `-IntegerLiteral 0x132027090 <col:29> 'int' 0
    | | `-BinaryOperator 0x1320272a0 <col:34, col:65> 'int' contains-errors '>='
    | |   |-CallExpr 0x132027250 <col:34, col:60> '<dependent type>' contains-errors
    | |   | |-DeclRefExpr 0x1320271b0 <col:34> 'int ()' Function 0x1320270f8 'mpz_cmp' 'int ()'
    | |   | |-RecoveryExpr 0x1320271d0 <col:43> '<dependent type>' contains-errors lvalue
    | |   | `-RecoveryExpr 0x132027228 <col:54, col:59> '<dependent type>' contains-errors lvalue
    | |   |   `-DeclRefExpr 0x1320271f0 <col:54> 'const struct rsa_public_key *' lvalue ParmVar 0x13200e248 'pub' 'const struct rsa_public_key *'
    | |   `-IntegerLiteral 0x132027280 <col:65> 'int' 0
    | `-ReturnStmt 0x132027300 <line:13:5, col:12>
    |   `-IntegerLiteral 0x1320272e0 <col:12> 'int' 0
    |-CallExpr 0x132027620 <line:15:3, col:37> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x132027410 <col:3> 'int ()' Function 0x132027358 'TMP_GMP_ALLOC' 'int ()'
    | |-RecoveryExpr 0x132027600 <col:18> '<dependent type>' contains-errors lvalue
    | `-CallExpr 0x1320275a8 <col:21, col:36> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x132027528 <col:21> 'int ()' Function 0x132027470 'mpz_size' 'int ()'
    |   `-RecoveryExpr 0x132027580 <col:30, col:35> '<dependent type>' contains-errors lvalue
    |     `-DeclRefExpr 0x132027548 <col:30> 'const struct rsa_public_key *' lvalue ParmVar 0x13200e248 'pub' 'const struct rsa_public_key *'
    |-CallExpr 0x132027738 <line:16:3, col:31> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x132027650 <col:3> 'int ()' Function 0x132027358 'TMP_GMP_ALLOC' 'int ()'
    | |-RecoveryExpr 0x132027718 <col:18> '<dependent type>' contains-errors lvalue
    | `-RecoveryExpr 0x1320276c0 <col:22, col:27> '<dependent type>' contains-errors lvalue
    |   `-DeclRefExpr 0x132027688 <col:22> 'const struct rsa_private_key *' lvalue ParmVar 0x132026628 'key' 'const struct rsa_private_key *'
    `-ReturnStmt 0x132027ff0 <line:29:3, col:10>
      `-ImplicitCastExpr 0x132027fd8 <col:10> 'int' <LValueToRValue>
        `-DeclRefExpr 0x132027fb8 <col:10> 'int' lvalue Var 0x132026ec8 'res' 'int'
