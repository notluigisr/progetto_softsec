`-FunctionDecl 0x12e928438  line:1:12 invalid r_cmd_java_handle_replace_cp_value_float 'int (int *, int *, const char *, int, int)' static
  |-ParmVarDecl 0x12e928128 <col:54, col:61> col:61 invalid core 'int *'
  |-ParmVarDecl 0x12e9281a8 <col:67, col:80> col:80 invalid obj 'int *'
  |-ParmVarDecl 0x12e928228 <col:85, col:97> col:97 used cmd 'const char *'
  |-ParmVarDecl 0x12e9282a8 <col:102, col:107> col:107 invalid idx 'int'
  |-ParmVarDecl 0x12e928328 <col:112, col:117> col:117 invalid addr 'int'
  `-CompoundStmt 0x12e941c10 <col:123, line:6:1>
    |-DeclStmt 0x12e941908 <line:2:2, col:46>
    | `-VarDecl 0x12e928520 <col:2, col:43> col:8 used value 'float' cinit
    |   `-ImplicitCastExpr 0x12e9418f0 <col:16, col:43> 'float' <FloatingCast>
    |     `-ConditionalOperator 0x12e9418c0 <col:16, col:43> 'double'
    |       |-BinaryOperator 0x12e928640 <col:16, col:24> 'int' '&&'
    |       | |-ImplicitCastExpr 0x12e9285f8 <col:16> 'const char *' <LValueToRValue>
    |       | | `-DeclRefExpr 0x12e928588 <col:16> 'const char *' lvalue ParmVar 0x12e928228 'cmd' 'const char *'
    |       | `-ImplicitCastExpr 0x12e928628 <col:23, col:24> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x12e928610 <col:23, col:24> 'char' <LValueToRValue>
    |       |     `-UnaryOperator 0x12e9285e0 <col:23, col:24> 'const char' lvalue prefix '*' cannot overflow
    |       |       `-ImplicitCastExpr 0x12e9285c8 <col:24> 'const char *' <LValueToRValue>
    |       |         `-DeclRefExpr 0x12e9285a8 <col:24> 'const char *' lvalue ParmVar 0x12e928228 'cmd' 'const char *'
    |       |-ImplicitCastExpr 0x12e9418a8 <col:30, col:39> 'double' <IntegralToFloating>
    |       | `-CallExpr 0x12e941848 <col:30, col:39> 'int'
    |       |   |-ImplicitCastExpr 0x12e941830 <col:30> 'int (*)()' <FunctionToPointerDecay>
    |       |   | `-DeclRefExpr 0x12e9287c0 <col:30> 'int ()' Function 0x12e928708 'atof' 'int ()'
    |       |   `-ImplicitCastExpr 0x12e941870 <col:36> 'const char *' <LValueToRValue>
    |       |     `-DeclRefExpr 0x12e9287e0 <col:36> 'const char *' lvalue ParmVar 0x12e928228 'cmd' 'const char *'
    |       `-FloatingLiteral 0x12e941888 <col:43> 'double' 0.000000e+00
    |-DeclStmt 0x12e9419b8 <line:3:2, col:17>
    | `-VarDecl 0x12e941938 <col:2, col:6> col:6 used res 'int'
    `-ReturnStmt 0x12e941c00 <line:5:2, col:9>
      `-ImplicitCastExpr 0x12e941be8 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x12e941bc8 <col:9> 'int' lvalue Var 0x12e941938 'res' 'int'
