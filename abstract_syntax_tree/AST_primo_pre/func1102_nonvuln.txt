`-FunctionDecl 0x153128288  line:1:1 invalid f_printf 'int (int *, int *)'
  |-ParmVarDecl 0x153128128 <col:10, col:20> col:20 invalid argvars 'int *'
  |-ParmVarDecl 0x1531281a8 <col:29, col:39> col:39 referenced invalid rettv 'int *'
  `-CompoundStmt 0x1531442e8 <line:2:1, line:27:1>
    |-DeclStmt 0x1531283d0 <line:3:5, col:26>
    | `-VarDecl 0x153128368 <col:5, col:12> col:12 invalid buf 'char'
    |-DeclStmt 0x153128468 <line:4:5, col:13>
    | `-VarDecl 0x153128400 <col:5, col:10> col:10 used len 'int'
    |-DeclStmt 0x153128500 <line:5:5, col:14>
    | `-VarDecl 0x153128498 <col:5, col:13> col:13 used s 'char *'
    |-DeclStmt 0x1531285d0 <line:6:5, col:35>
    | `-VarDecl 0x153128530 <col:5, col:27> col:10 used saved_did_emsg 'int' cinit
    |   `-RecoveryExpr 0x1531285b0 <col:27> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x153128668 <line:7:5, col:14>
    | `-VarDecl 0x153128600 <col:5, col:11> col:11 used fmt 'char *'
    |-BinaryOperator 0x153128768 <line:9:5, col:21> '<dependent type>' contains-errors '='
    | |-CXXDependentScopeMemberExpr 0x1531286c8 <col:5, col:12> '<dependent type>' contains-errors lvalue ->v_type
    | | `-RecoveryExpr 0x1531286a0 <col:5> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x153128680 <col:5> 'int *' lvalue ParmVar 0x1531281a8 'rettv' 'int *'
    | `-RecoveryExpr 0x153128748 <col:21> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x1531418e8 <line:10:5, col:28> '<dependent type>' contains-errors '='
    | |-CXXDependentScopeMemberExpr 0x153141848 <col:5, col:17> '<dependent type>' contains-errors lvalue .v_string
    | | `-CXXDependentScopeMemberExpr 0x153141800 <col:5, col:12> '<dependent type>' contains-errors lvalue ->vval
    | |   `-RecoveryExpr 0x1531287a8 <col:5> '<dependent type>' contains-errors lvalue
    | |     `-DeclRefExpr 0x153128788 <col:5> 'int *' lvalue ParmVar 0x1531281a8 'rettv' 'int *'
    | `-RecoveryExpr 0x1531418c8 <col:28> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x153141be0 <line:14:5, col:53> 'char *' contains-errors '='
    | |-DeclRefExpr 0x153141920 <col:5> 'char *' lvalue Var 0x153128600 'fmt' 'char *'
    | `-CStyleCastExpr 0x153141bb8 <col:11, col:53> 'char *' contains-errors <Dependent>
    |   `-CallExpr 0x153141b70 <col:19, col:53> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x153141aa0 <col:19> 'int ()' Function 0x1531419e8 'tv_get_string_buf' 'int ()'
    |     |-UnaryOperator 0x153141b38 <col:37, col:47> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     | `-ArraySubscriptExpr 0x153141b18 <col:38, col:47> '<dependent type>' contains-errors lvalue
    |     |   |-ImplicitCastExpr 0x153141b00 <col:38> '<dependent type>' contains-errors <LValueToRValue>
    |     |   | `-RecoveryExpr 0x153141ac0 <col:38> '<dependent type>' contains-errors lvalue
    |     |   `-IntegerLiteral 0x153141ae0 <col:46> 'int' 0
    |     `-RecoveryExpr 0x153141b50 <col:50> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x153141ee0 <line:15:5, col:61> 'int' contains-errors '='
    | |-DeclRefExpr 0x153141c00 <col:5> 'int' lvalue Var 0x153128400 'len' 'int'
    | `-CallExpr 0x153141e98 <col:11, col:61> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x153141d00 <col:11> 'int ()' Function 0x153141c48 'vim_vsnprintf_typval' 'int ()'
    |   |-RecoveryExpr 0x153141e58 <col:32> '<dependent type>' contains-errors lvalue
    |   |-IntegerLiteral 0x153141d38 <col:38> 'int' 0
    |   |-DeclRefExpr 0x153141d58 <col:41> 'char *' lvalue Var 0x153128600 'fmt' 'char *'
    |   |-RecoveryExpr 0x153141e78 <col:46> '<dependent type>' contains-errors lvalue
    |   `-BinaryOperator 0x153141dd0 <col:50, col:60> '<dependent type>' contains-errors '+'
    |     |-RecoveryExpr 0x153141d90 <col:50> '<dependent type>' contains-errors lvalue
    |     `-IntegerLiteral 0x153141db0 <col:60> 'int' 1
    `-IfStmt 0x1531442a8 <line:16:5, line:25:5>
      |-UnaryOperator 0x153141f80 <line:16:9, col:10> '<dependent type>' contains-errors prefix '!' cannot overflow
      | `-ImplicitCastExpr 0x153141f68 <col:10> '<dependent type>' contains-errors <LValueToRValue>
      |   `-RecoveryExpr 0x153141f48 <col:10> '<dependent type>' contains-errors lvalue
      `-CompoundStmt 0x153144288 <line:17:5, line:25:5>
        |-BinaryOperator 0x1531425e0 <line:18:2, col:19> 'char *' '='
        | |-DeclRefExpr 0x153141f98 <col:2> 'char *' lvalue Var 0x153128498 's' 'char *'
        | `-ImplicitCastExpr 0x1531421a0 <col:6, col:19> 'char *' <IntegralToPointer>
        |   `-CallExpr 0x153142178 <col:6, col:19> 'int'
        |     |-ImplicitCastExpr 0x153142160 <col:6> 'int (*)()' <FunctionToPointerDecay>
        |     | `-DeclRefExpr 0x153142098 <col:6> 'int ()' Function 0x153141fe0 'alloc' 'int ()'
        |     `-BinaryOperator 0x153142110 <col:12, col:18> 'int' '+'
        |       |-ImplicitCastExpr 0x1531420f8 <col:12> 'int' <LValueToRValue>
        |       | `-DeclRefExpr 0x1531420b8 <col:12> 'int' lvalue Var 0x153128400 'len' 'int'
        |       `-IntegerLiteral 0x1531420d8 <col:18> 'int' 1
        `-IfStmt 0x153144268 <line:19:2, line:24:2>
          |-BinaryOperator 0x153142678 <line:19:6, col:11> 'int' contains-errors '!='
          | |-DeclRefExpr 0x153142600 <col:6> 'char *' lvalue Var 0x153128498 's' 'char *'
          | `-RecoveryExpr 0x153142658 <col:11> '<dependent type>' contains-errors lvalue
          `-CompoundStmt 0x153144250 <line:20:2, line:24:2>
            `-BinaryOperator 0x153142790 <line:21:6, col:29> '<dependent type>' contains-errors '='
              |-CXXDependentScopeMemberExpr 0x153142728 <col:6, col:18> '<dependent type>' contains-errors lvalue .v_string
              | `-CXXDependentScopeMemberExpr 0x1531426e0 <col:6, col:13> '<dependent type>' contains-errors lvalue ->vval
              |   `-RecoveryExpr 0x1531426b8 <col:6> '<dependent type>' contains-errors lvalue
              |     `-DeclRefExpr 0x153142698 <col:6> 'int *' lvalue ParmVar 0x1531281a8 'rettv' 'int *'
              `-DeclRefExpr 0x153142770 <col:29> 'char *' lvalue Var 0x153128498 's' 'char *'
