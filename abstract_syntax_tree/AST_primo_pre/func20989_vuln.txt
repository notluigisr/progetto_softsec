`-FunctionDecl 0x156128248  line:1:1 invalid addChar 'int (char, int)'
  |-ParmVarDecl 0x1561280d0 <col:9, col:14> col:14 used c 'char'
  |-ParmVarDecl 0x156128168 <col:17, col:26> col:26 invalid mode 'int'
  `-CompoundStmt 0x1561459a0 <line:3:1, line:77:1>
    |-CallExpr 0x1561284e0 <line:11:5, col:17> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x156128460 <col:5> 'int ()' Function 0x1561283a8 'do_effects' 'int ()'
    | `-RecoveryExpr 0x1561284c0 <col:16> '<dependent type>' contains-errors lvalue
    `-IfStmt 0x156145970 <line:12:5, line:75:9> has_else
      |-BinaryOperator 0x156128580 <line:12:9, col:16> '<dependent type>' contains-errors '&'
      | |-RecoveryExpr 0x156128508 <col:9> '<dependent type>' contains-errors lvalue
      | `-RecoveryExpr 0x156128560 <col:16> '<dependent type>' contains-errors lvalue
      |-CompoundStmt 0x156142930 <col:27, line:42:5>
      | |-DeclStmt 0x156128650 <line:13:2, col:15>
      | | `-VarDecl 0x1561285e8 <col:2, col:9> col:9 used symbol 'char **'
      | |-CompoundAssignOperator 0x1561286f0 <line:19:2, col:7> 'char' contains-errors '-=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
      | | |-DeclRefExpr 0x156128668 <col:2> 'char' lvalue ParmVar 0x1561280d0 'c' 'char'
      | | `-RecoveryExpr 0x1561286d0 <col:7> '<dependent type>' contains-errors lvalue
      | `-IfStmt 0x156142900 <line:21:2, line:41:2> has_else
      |   |-BinaryOperator 0x156141db0 <line:21:6, col:24> 'int' contains-errors '&&'
      |   | |-CallExpr 0x156141d50 <col:6, col:15> 'int'
      |   | | `-ImplicitCastExpr 0x156141d38 <col:6> 'int (*)()' <FunctionToPointerDecay>
      |   | |   `-DeclRefExpr 0x156141c00 <col:6> 'int ()' Function 0x156128748 'graph_ok' 'int ()'
      |   | `-BinaryOperator 0x156141d90 <col:20, col:24> 'int' contains-errors '<'
      |   |   |-DeclRefExpr 0x156141c88 <col:20> 'char' lvalue ParmVar 0x1561280d0 'c' 'char'
      |   |   `-RecoveryExpr 0x156141d70 <col:24> '<dependent type>' contains-errors lvalue
      |   |-CompoundStmt 0x156142180 <col:40, line:32:2>
      |   | `-IfStmt 0x156141fd0 <line:22:6, line:25:6>
      |   |   |-UnaryOperator 0x156141e50 <line:22:10, col:11> 'int' prefix '!' cannot overflow
      |   |   | `-ImplicitCastExpr 0x156141e38 <col:11> 'int (*)()' <FunctionToPointerDecay>
      |   |   |   `-DeclRefExpr 0x156141e18 <col:11> 'int ()' Function 0x156128748 'graph_ok' 'int ()'
      |   |   `-CompoundStmt 0x156141fb8 <col:23, line:25:6>
      |   |     `-CallExpr 0x156141f80 <line:23:3, col:14> 'int'
      |   |       `-ImplicitCastExpr 0x156141f68 <col:3> 'int (*)()' <FunctionToPointerDecay>
      |   |         `-DeclRefExpr 0x156141f48 <col:3> 'int ()' Function 0x156141e90 'graphstart' 'int ()'
      |   `-CompoundStmt 0x1561428e0 <line:33:7, line:41:2>
      |     |-BinaryOperator 0x156142730 <line:38:6, col:26> 'char **' '='
      |     | |-DeclRefExpr 0x156142198 <col:6> 'char **' lvalue Var 0x1561285e8 'symbol' 'char **'
      |     | `-ImplicitCastExpr 0x1561422f0 <col:15, col:26> 'char **' <IntegralToPointer>
      |     |   `-CallExpr 0x1561422d0 <col:15, col:26> 'int'
      |     |     `-ImplicitCastExpr 0x1561422b8 <col:15> 'int (*)()' <FunctionToPointerDecay>
      |     |       `-DeclRefExpr 0x156142298 <col:15> 'int ()' Function 0x1561421e0 'get_symbol' 'int ()'
      |     `-CallExpr 0x156142888 <line:39:6, col:27> 'int'
      |       |-ImplicitCastExpr 0x156142870 <col:6> 'int (*)()' <FunctionToPointerDecay>
      |       | `-DeclRefExpr 0x156142750 <col:6> 'int ()' Function 0x156142018 'addch' 'int ()'
      |       `-ImplicitCastExpr 0x1561428c8 <col:12, col:26> 'int' <IntegralCast>
      |         `-ImplicitCastExpr 0x1561428b0 <col:12, col:26> 'char' <LValueToRValue>
      |           `-UnaryOperator 0x156142858 <col:12, col:26> 'char' lvalue prefix '*' cannot overflow
      |             `-ImplicitCastExpr 0x156142840 <col:13, col:26> 'char *' <LValueToRValue>
      |               `-ArraySubscriptExpr 0x156142820 <col:13, col:26> 'char *' lvalue
      |                 |-ImplicitCastExpr 0x156142808 <col:13> 'char **' <LValueToRValue>
      |                 | `-DeclRefExpr 0x156142770 <col:13> 'char **' lvalue Var 0x1561285e8 'symbol' 'char **'
      |                 `-CStyleCastExpr 0x1561427e0 <col:20, col:25> 'int' <IntegralCast>
      |                   `-ImplicitCastExpr 0x1561427c8 <col:25> 'char' <LValueToRValue> part_of_explicit_cast
      |                     `-DeclRefExpr 0x156142790 <col:25> 'char' lvalue ParmVar 0x1561280d0 'c' 'char'
      `-IfStmt 0x156145940 <line:43:10, line:75:9> has_else
        |-BinaryOperator 0x1561429d0 <line:43:14, col:21> '<dependent type>' contains-errors '&'
        | |-RecoveryExpr 0x156142958 <col:14> '<dependent type>' contains-errors lvalue
        | `-RecoveryExpr 0x1561429b0 <col:21> '<dependent type>' contains-errors lvalue
        |-CompoundStmt 0x156145668 <col:30, line:61:5>
        | `-SwitchStmt 0x156142a40 <line:44:2, line:60:2>
        |   |-ImplicitCastExpr 0x156142a28 <line:44:10> 'int' <IntegralCast>
        |   | `-ImplicitCastExpr 0x156142a10 <col:10> 'char' <LValueToRValue>
        |   |   `-DeclRefExpr 0x1561429f0 <col:10> 'char' lvalue ParmVar 0x1561280d0 'c' 'char'
        |   `-CompoundStmt 0x156145608 <col:13, line:60:2>
        |     |-CaseStmt 0x156142a98 <line:45:2, line:46:13>
        |     | |-ConstantExpr 0x156142a80 <line:45:7> 'int'
        |     | | `-CharacterLiteral 0x156142a68 <col:7> 'int' 9
        |     | `-CallExpr 0x156142b18 <line:46:6, col:13> 'int'
        |     |   |-ImplicitCastExpr 0x156142b00 <col:6> 'int (*)()' <FunctionToPointerDecay>
        |     |   | `-DeclRefExpr 0x156142ac0 <col:6> 'int ()' Function 0x156142018 'addch' 'int ()'
        |     |   `-ImplicitCastExpr 0x156142b58 <col:12> 'int' <IntegralCast>
        |     |     `-ImplicitCastExpr 0x156142b40 <col:12> 'char' <LValueToRValue>
        |     |       `-DeclRefExpr 0x156142ae0 <col:12> 'char' lvalue ParmVar 0x1561280d0 'c' 'char'
        |     |-BreakStmt 0x156142b70 <line:47:6>
        |     |-CaseStmt 0x156142ba8 <line:48:2, line:49:15>
        |     | |-ConstantExpr 0x156142b90 <line:48:7> 'int'
        |     | | `-CharacterLiteral 0x156142b78 <col:7> 'int' 10
        |     | `-CallExpr 0x156145230 <line:49:6, col:15> 'int'
        |     |   |-ImplicitCastExpr 0x156145218 <col:6> 'int (*)()' <FunctionToPointerDecay>
        |     |   | `-DeclRefExpr 0x156142bd0 <col:6> 'int ()' Function 0x156142018 'addch' 'int ()'
        |     |   `-CharacterLiteral 0x156145200 <col:12> 'int' 32
        |     |-BreakStmt 0x156145258 <line:50:6>
        |     |-CaseStmt 0x156145290 <line:51:2, line:52:6>
        |     | |-ConstantExpr 0x156145278 <line:51:7> 'int'
        |     | | `-CharacterLiteral 0x156145260 <col:7> 'int' 13
        |     | `-BreakStmt 0x1561452b8 <line:52:6>
        |     |-CallExpr 0x156145438 <line:54:6, col:18> 'int'
        |     | |-ImplicitCastExpr 0x156145420 <col:6> 'int (*)()' <FunctionToPointerDecay>
        |     | | `-DeclRefExpr 0x1561453a0 <col:6> 'int ()' Function 0x1561452e8 'addstr' 'int ()'
        |     | `-ImplicitCastExpr 0x156145460 <col:13> 'char *' <ArrayToPointerDecay>
        |     |   `-StringLiteral 0x156145400 <col:13> 'char[4]' lvalue "STR"
        |     |-BreakStmt 0x156145478 <line:55:6>
        |     |-DefaultStmt 0x1561454f8 <line:56:2, line:57:15>
        |     | `-CallExpr 0x1561454d0 <col:6, col:15> 'int'
        |     |   |-ImplicitCastExpr 0x1561454b8 <col:6> 'int (*)()' <FunctionToPointerDecay>
        |     |   | `-DeclRefExpr 0x156145480 <col:6> 'int ()' Function 0x156142018 'addch' 'int ()'
        |     |   `-CharacterLiteral 0x1561454a0 <col:12> 'int' 94
        |     |-CallExpr 0x1561455d8 <line:58:6, col:19> 'int'
        |     | |-ImplicitCastExpr 0x1561455c0 <col:6> 'int (*)()' <FunctionToPointerDecay>
        |     | | `-DeclRefExpr 0x156145518 <col:6> 'int ()' Function 0x156142018 'addch' 'int ()'
        |     | `-BinaryOperator 0x1561455a0 <col:12, col:16> 'int' '+'
        |     |   |-ImplicitCastExpr 0x156145588 <col:12> 'int' <IntegralCast>
        |     |   | `-ImplicitCastExpr 0x156145570 <col:12> 'char' <LValueToRValue>
        |     |   |   `-DeclRefExpr 0x156145538 <col:12> 'char' lvalue ParmVar 0x1561280d0 'c' 'char'
        |     |   `-CharacterLiteral 0x156145558 <col:16> 'int' 64
        |     `-BreakStmt 0x156145600 <line:59:6>
        `-IfStmt 0x156145910 <line:72:10, line:75:9> has_else
          |-RecoveryExpr 0x1561457c8 <line:72:14, col:62> '_Bool' contains-errors
          |-CallExpr 0x156145838 <line:73:2, col:11> 'int'
          | |-ImplicitCastExpr 0x156145820 <col:2> 'int (*)()' <FunctionToPointerDecay>
          | | `-DeclRefExpr 0x1561457e8 <col:2> 'int ()' Function 0x156142018 'addch' 'int ()'
          | `-CharacterLiteral 0x156145808 <col:8> 'int' 32
          `-CallExpr 0x1561458b8 <line:75:2, col:9> 'int'
            |-ImplicitCastExpr 0x1561458a0 <col:2> 'int (*)()' <FunctionToPointerDecay>
            | `-DeclRefExpr 0x156145860 <col:2> 'int ()' Function 0x156142018 'addch' 'int ()'
            `-ImplicitCastExpr 0x1561458f8 <col:8> 'int' <IntegralCast>
              `-ImplicitCastExpr 0x1561458e0 <col:8> 'char' <LValueToRValue>
                `-DeclRefExpr 0x156145880 <col:8> 'char' lvalue ParmVar 0x1561280d0 'c' 'char'
