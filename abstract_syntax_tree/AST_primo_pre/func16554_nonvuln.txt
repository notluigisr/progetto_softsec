`-FunctionDecl 0x122928348  line:1:1 invalid mbfl_buffer_converter_strncat 'int (int *, const unsigned char *, int)'
  |-ParmVarDecl 0x122928128 <col:31, col:54> col:54 invalid convd 'int *'
  |-ParmVarDecl 0x1229281d8 <col:61, col:82> col:82 used p 'const unsigned char *'
  |-ParmVarDecl 0x122928258 <col:85, col:89> col:89 used n 'int'
  `-CompoundStmt 0x12300b6c8 <line:2:1, line:20:1>
    |-DeclStmt 0x1229286a0 <line:4:2, col:60>
    | `-VarDecl 0x122928638 <col:2, col:59> col:8 used filter_function 'int (*)(int, int *)'
    |-IfStmt 0x12300b660 <line:6:2, line:17:2>
    | |-BinaryOperator 0x12300b020 <line:6:6, col:28> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x1229287a8 <col:6, col:15> 'int' contains-errors '!='
    | | | |-RecoveryExpr 0x1229286b8 <col:6> '<dependent type>' contains-errors lvalue
    | | | `-RecoveryExpr 0x122928788 <col:15> '<dependent type>' contains-errors lvalue
    | | `-BinaryOperator 0x12300b000 <col:23, col:28> 'int' contains-errors '!='
    | |   |-DeclRefExpr 0x122928710 <col:23> 'const unsigned char *' lvalue ParmVar 0x1229281d8 'p' 'const unsigned char *'
    | |   `-RecoveryExpr 0x1229287c8 <col:28> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x12300b648 <col:34, line:17:2>
    |   `-IfStmt 0x12300b628 <line:8:3, line:16:3>
    |     |-BinaryOperator 0x12300b138 <line:8:7, col:17> 'int' contains-errors '!='
    |     | |-RecoveryExpr 0x12300b0f8 <col:7> '<dependent type>' contains-errors lvalue
    |     | `-RecoveryExpr 0x12300b118 <col:17> '<dependent type>' contains-errors lvalue
    |     `-CompoundStmt 0x12300b608 <col:23, line:16:3>
    |       |-BinaryOperator 0x12300b260 <line:9:4, col:30> 'int (*)(int, int *)' contains-errors '='
    |       | |-DeclRefExpr 0x12300b158 <col:4> 'int (*)(int, int *)' lvalue Var 0x122928638 'filter_function' 'int (*)(int, int *)'
    |       | `-CXXDependentScopeMemberExpr 0x12300b218 <col:22, col:30> '<dependent type>' contains-errors lvalue ->filter_function
    |       |   `-RecoveryExpr 0x12300b1f8 <col:22> '<dependent type>' contains-errors lvalue
    |       `-WhileStmt 0x12300b5e8 <line:10:4, line:15:4>
    |         |-BinaryOperator 0x12300b2d8 <line:10:11, col:15> 'int' '>'
    |         | |-ImplicitCastExpr 0x12300b2c0 <col:11> 'int' <LValueToRValue>
    |         | | `-DeclRefExpr 0x12300b280 <col:11> 'int' lvalue ParmVar 0x122928258 'n' 'int'
    |         | `-IntegerLiteral 0x12300b2a0 <col:15> 'int' 0
    |         `-CompoundStmt 0x12300b5c8 <col:18, line:15:4>
    |           |-IfStmt 0x12300b570 <line:11:5, line:13:5>
    |           | |-BinaryOperator 0x12300b530 <line:11:9, col:44> 'int' contains-errors '<'
    |           | | |-CallExpr 0x12300b500 <col:9, col:40> '<dependent type>' contains-errors
    |           | | | |-ParenExpr 0x12300b4c0 <col:9, col:26> 'int (int, int *)'
    |           | | | | `-UnaryOperator 0x12300b4a8 <col:10, col:11> 'int (int, int *)' prefix '*' cannot overflow
    |           | | | |   `-ImplicitCastExpr 0x12300b490 <col:11> 'int (*)(int, int *)' <LValueToRValue>
    |           | | | |     `-DeclRefExpr 0x12300b2f8 <col:11> 'int (*)(int, int *)' lvalue Var 0x122928638 'filter_function' 'int (*)(int, int *)'
    |           | | | |-UnaryOperator 0x12300b3a0 <col:28, col:30> 'const unsigned char' lvalue prefix '*' cannot overflow
    |           | | | | `-UnaryOperator 0x12300b388 <col:29, col:30> 'const unsigned char *' postfix '++'
    |           | | | |   `-DeclRefExpr 0x12300b368 <col:29> 'const unsigned char *' lvalue ParmVar 0x1229281d8 'p' 'const unsigned char *'
    |           | | | `-RecoveryExpr 0x12300b4e0 <col:34> '<dependent type>' contains-errors lvalue
    |           | | `-IntegerLiteral 0x12300b400 <col:44> 'int' 0
    |           | `-CompoundStmt 0x12300b558 <col:47, line:13:5>
    |           |   `-BreakStmt 0x12300b550 <line:12:6>
    |           `-UnaryOperator 0x12300b5b0 <line:14:5, col:6> 'int' postfix '--'
    |             `-DeclRefExpr 0x12300b590 <col:5> 'int' lvalue ParmVar 0x122928258 'n' 'int'
    `-ReturnStmt 0x12300b6b8 <line:19:2, col:9>
      `-ImplicitCastExpr 0x12300b6a0 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x12300b680 <col:9> 'int' lvalue ParmVar 0x122928258 'n' 'int'
