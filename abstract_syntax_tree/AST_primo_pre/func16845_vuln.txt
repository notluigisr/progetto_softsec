`-FunctionDecl 0x13800de58  line:1:13 get_alen 'int (char *, int)' static
  |-ParmVarDecl 0x13800dcf0 <col:22, col:28> col:28 used arg 'char *'
  |-ParmVarDecl 0x13800dd70 <col:33, col:37> col:37 used default_len 'int'
  `-CompoundStmt 0x138026898 <line:2:1, line:15:1>
    |-DeclStmt 0x13800dfd8 <line:3:2, col:7>
    | `-VarDecl 0x13800df70 <col:2, col:6> col:6 used j 'int'
    |-DeclStmt 0x13800e070 <line:4:2, col:10>
    | `-VarDecl 0x13800e008 <col:2, col:6> col:6 used alen 'int'
    |-BinaryOperator 0x13800e0e0 <line:6:2, col:9> 'int' '='
    | |-DeclRefExpr 0x13800e088 <col:2> 'int' lvalue Var 0x13800e008 'alen' 'int'
    | `-ImplicitCastExpr 0x13800e0c8 <col:9> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x13800e0a8 <col:9> 'int' lvalue ParmVar 0x13800dd70 'default_len' 'int'
    |-ForStmt 0x138026818 <line:7:2, line:13:2>
    | |-BinaryOperator 0x13800e140 <line:7:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x13800e100 <col:7> 'int' lvalue Var 0x13800df70 'j' 'int'
    | | `-IntegerLiteral 0x13800e120 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x13800e1b8 <col:14, col:18> 'int' '<'
    | | |-ImplicitCastExpr 0x13800e1a0 <col:14> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x13800e160 <col:14> 'int' lvalue Var 0x13800df70 'j' 'int'
    | | `-IntegerLiteral 0x13800e180 <col:18> 'int' 8
    | |-UnaryOperator 0x13800e1f8 <col:21, col:22> 'int' postfix '++'
    | | `-DeclRefExpr 0x13800e1d8 <col:21> 'int' lvalue Var 0x13800df70 'j' 'int'
    | `-CompoundStmt 0x138026800 <col:26, line:13:2>
    |   `-IfStmt 0x1380267d0 <line:8:3, line:12:4> has_else
    |     |-BinaryOperator 0x13800e2e8 <line:8:7, col:17> 'int' '=='
    |     | |-ImplicitCastExpr 0x13800e2d0 <col:7, col:12> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x13800e2b8 <col:7, col:12> 'char' <LValueToRValue>
    |     | |   `-ArraySubscriptExpr 0x13800e280 <col:7, col:12> 'char' lvalue
    |     | |     |-ImplicitCastExpr 0x13800e250 <col:7> 'char *' <LValueToRValue>
    |     | |     | `-DeclRefExpr 0x13800e210 <col:7> 'char *' lvalue ParmVar 0x13800dcf0 'arg' 'char *'
    |     | |     `-ImplicitCastExpr 0x13800e268 <col:11> 'int' <LValueToRValue>
    |     | |       `-DeclRefExpr 0x13800e230 <col:11> 'int' lvalue Var 0x13800df70 'j' 'int'
    |     | `-CharacterLiteral 0x13800e2a0 <col:17> 'int' 46
    |     |-CompoundStmt 0x138026690 <col:22, line:11:3>
    |     | |-BinaryOperator 0x138026668 <line:9:4, col:22> 'int' '='
    |     | | |-DeclRefExpr 0x13800e308 <col:4> 'int' lvalue Var 0x13800e008 'alen' 'int'
    |     | | `-BinaryOperator 0x138026648 <col:11, col:22> 'int' '-'
    |     | |   |-ImplicitCastExpr 0x138026630 <col:11, col:18> 'int' <IntegralCast>
    |     | |   | `-ImplicitCastExpr 0x138026618 <col:11, col:18> 'char' <LValueToRValue>
    |     | |   |   `-ArraySubscriptExpr 0x13800e3d8 <col:11, col:18> 'char' lvalue
    |     | |   |     |-ImplicitCastExpr 0x13800e3c0 <col:11> 'char *' <LValueToRValue>
    |     | |   |     | `-DeclRefExpr 0x13800e328 <col:11> 'char *' lvalue ParmVar 0x13800dcf0 'arg' 'char *'
    |     | |   |     `-BinaryOperator 0x13800e3a0 <col:15, col:17> 'int' '+'
    |     | |   |       |-ImplicitCastExpr 0x13800e388 <col:15> 'int' <LValueToRValue>
    |     | |   |       | `-DeclRefExpr 0x13800e348 <col:15> 'int' lvalue Var 0x13800df70 'j' 'int'
    |     | |   |       `-IntegerLiteral 0x13800e368 <col:17> 'int' 1
    |     | |   `-CharacterLiteral 0x138026600 <col:22> 'int' 48
    |     | `-BreakStmt 0x138026688 <line:10:4>
    |     `-IfStmt 0x1380267b0 <line:11:10, line:12:4>
    |       |-BinaryOperator 0x138026788 <line:11:14, col:24> 'int' '=='
    |       | |-ImplicitCastExpr 0x138026770 <col:14, col:19> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x138026758 <col:14, col:19> 'char' <LValueToRValue>
    |       | |   `-ArraySubscriptExpr 0x138026720 <col:14, col:19> 'char' lvalue
    |       | |     |-ImplicitCastExpr 0x1380266f0 <col:14> 'char *' <LValueToRValue>
    |       | |     | `-DeclRefExpr 0x1380266b0 <col:14> 'char *' lvalue ParmVar 0x13800dcf0 'arg' 'char *'
    |       | |     `-ImplicitCastExpr 0x138026708 <col:18> 'int' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x1380266d0 <col:18> 'int' lvalue Var 0x13800df70 'j' 'int'
    |       | `-CharacterLiteral 0x138026740 <col:24> 'int' 0
    |       `-BreakStmt 0x1380267a8 <line:12:4>
    `-ReturnStmt 0x138026888 <line:14:2, col:9>
      `-ImplicitCastExpr 0x138026870 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x138026850 <col:9> 'int' lvalue Var 0x13800e008 'alen' 'int'
