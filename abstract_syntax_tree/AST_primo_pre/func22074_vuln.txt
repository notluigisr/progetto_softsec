`-FunctionDecl 0x13180dfa0  line:1:6 invalid luaT_getvarargs 'void (int *, int *, int, int)'
  |-ParmVarDecl 0x13180dd28 <col:23, col:34> col:34 referenced invalid L 'int *'
  |-ParmVarDecl 0x13180dda8 <col:37, col:47> col:47 invalid ci 'int *'
  |-ParmVarDecl 0x13180de28 <col:51, col:57> col:57 invalid where 'int'
  |-ParmVarDecl 0x13180dea8 <col:64, col:68> col:68 used wanted 'int'
  `-CompoundStmt 0x131828550 <col:76, line:13:1>
    |-DeclStmt 0x13180e0e8 <line:2:3, col:8>
    | `-VarDecl 0x13180e080 <col:3, col:7> col:7 used i 'int'
    |-DeclStmt 0x13180e278 <line:3:3, col:34>
    | `-VarDecl 0x13180e118 <col:3, col:24> col:7 used nextra 'int' cinit
    |   `-CXXDependentScopeMemberExpr 0x13180e230 <col:16, col:24> '<dependent type>' contains-errors lvalue .nextraargs
    |     `-CXXDependentScopeMemberExpr 0x13180e1e8 <col:16, col:22> '<dependent type>' contains-errors lvalue .l
    |       `-CXXDependentScopeMemberExpr 0x13180e1a0 <col:16, col:20> '<dependent type>' contains-errors lvalue ->u
    |         `-RecoveryExpr 0x13180e180 <col:16> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x131827cd0 <line:4:3, line:8:3>
    | |-BinaryOperator 0x13180e2e8 <line:4:7, col:16> 'int' '<'
    | | |-ImplicitCastExpr 0x13180e2d0 <col:7> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x13180e290 <col:7> 'int' lvalue ParmVar 0x13180dea8 'wanted' 'int'
    | | `-IntegerLiteral 0x13180e2b0 <col:16> 'int' 0
    | `-CompoundStmt 0x131827ca8 <col:19, line:8:3>
    |   |-BinaryOperator 0x13180e360 <line:5:5, col:14> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x13180e308 <col:5> 'int' lvalue ParmVar 0x13180dea8 'wanted' 'int'
    |   | `-ImplicitCastExpr 0x13180e348 <col:14> 'int' contains-errors <LValueToRValue>
    |   |   `-DeclRefExpr 0x13180e328 <col:14> 'int' contains-errors lvalue Var 0x13180e118 'nextra' 'int'
    |   |-CallExpr 0x131827b60 <line:6:5, col:33> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x131827ae0 <col:5> 'int ()' Function 0x131827a28 'checkstackp' 'int ()'
    |   | |-RecoveryExpr 0x131827b00 <col:17> '<dependent type>' contains-errors lvalue
    |   | |-DeclRefExpr 0x131827b20 <col:20> 'int' contains-errors lvalue Var 0x13180e118 'nextra' 'int'
    |   | `-RecoveryExpr 0x131827b40 <col:28> '<dependent type>' contains-errors lvalue
    |   `-BinaryOperator 0x131827c88 <line:7:5, col:22> '<dependent type>' contains-errors '='
    |     |-CXXDependentScopeMemberExpr 0x131827be0 <col:5, col:8> '<dependent type>' contains-errors lvalue ->top
    |     | `-RecoveryExpr 0x131827bb8 <col:5> '<dependent type>' contains-errors lvalue
    |     |   `-DeclRefExpr 0x131827b98 <col:5> 'int *' lvalue ParmVar 0x13180dd28 'L' 'int *'
    |     `-BinaryOperator 0x131827c68 <col:14, col:22> '<dependent type>' contains-errors '+'
    |       |-RecoveryExpr 0x131827c28 <col:14> '<dependent type>' contains-errors lvalue
    |       `-DeclRefExpr 0x131827c48 <col:22> 'int' contains-errors lvalue Var 0x13180e118 'nextra' 'int'
    |-ForStmt 0x131828168 <line:9:3, line:10:50>
    | |-BinaryOperator 0x131827d30 <line:9:8, col:12> 'int' '='
    | | |-DeclRefExpr 0x131827cf0 <col:8> 'int' lvalue Var 0x13180e080 'i' 'int'
    | | `-IntegerLiteral 0x131827d10 <col:12> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x131827e70 <col:15, col:33> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x131827dc0 <col:15, col:19> 'int' '<'
    | | | |-ImplicitCastExpr 0x131827d90 <col:15> 'int' <LValueToRValue>
    | | | | `-DeclRefExpr 0x131827d50 <col:15> 'int' lvalue Var 0x13180e080 'i' 'int'
    | | | `-ImplicitCastExpr 0x131827da8 <col:19> 'int' <LValueToRValue>
    | | |   `-DeclRefExpr 0x131827d70 <col:19> 'int' lvalue ParmVar 0x13180dea8 'wanted' 'int'
    | | `-BinaryOperator 0x131827e50 <col:29, col:33> 'int' contains-errors '<'
    | |   |-ImplicitCastExpr 0x131827e20 <col:29> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x131827de0 <col:29> 'int' lvalue Var 0x13180e080 'i' 'int'
    | |   `-ImplicitCastExpr 0x131827e38 <col:33> 'int' contains-errors <LValueToRValue>
    | |     `-DeclRefExpr 0x131827e00 <col:33> 'int' contains-errors lvalue Var 0x13180e118 'nextra' 'int'
    | |-UnaryOperator 0x131827eb0 <col:41, col:42> 'int' postfix '++'
    | | `-DeclRefExpr 0x131827e90 <col:41> 'int' lvalue Var 0x13180e080 'i' 'int'
    | `-CallExpr 0x131828130 <line:10:5, col:50> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x131827fa8 <col:5> 'int ()' Function 0x131827ef0 'setobjs2s' 'int ()'
    |   |-RecoveryExpr 0x131827fc8 <col:15> '<dependent type>' contains-errors lvalue
    |   |-BinaryOperator 0x131828028 <col:18, col:26> '<dependent type>' contains-errors '+'
    |   | |-RecoveryExpr 0x131827fe8 <col:18> '<dependent type>' contains-errors lvalue
    |   | `-DeclRefExpr 0x131828008 <col:26> 'int' lvalue Var 0x13180e080 'i' 'int'
    |   `-BinaryOperator 0x131828110 <col:29, col:49> '<dependent type>' contains-errors '+'
    |     |-BinaryOperator 0x1318280d0 <col:29, col:40> '<dependent type>' contains-errors '-'
    |     | |-CXXDependentScopeMemberExpr 0x131828068 <col:29, col:33> '<dependent type>' contains-errors lvalue ->func
    |     | | `-RecoveryExpr 0x131828048 <col:29> '<dependent type>' contains-errors lvalue
    |     | `-DeclRefExpr 0x1318280b0 <col:40> 'int' contains-errors lvalue Var 0x13180e118 'nextra' 'int'
    |     `-DeclRefExpr 0x1318280f0 <col:49> 'int' lvalue Var 0x13180e080 'i' 'int'
    `-ForStmt 0x131828518 <line:11:3, line:12:31>
      |-<<<NULL>>>
      |-<<<NULL>>>
      |-BinaryOperator 0x131828210 <line:11:10, col:14> 'int' '<'
      | |-ImplicitCastExpr 0x1318281e0 <col:10> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x1318281a0 <col:10> 'int' lvalue Var 0x13180e080 'i' 'int'
      | `-ImplicitCastExpr 0x1318281f8 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x1318281c0 <col:14> 'int' lvalue ParmVar 0x13180dea8 'wanted' 'int'
      |-UnaryOperator 0x131828250 <col:22, col:23> 'int' postfix '++'
      | `-DeclRefExpr 0x131828230 <col:22> 'int' lvalue Var 0x13180e080 'i' 'int'
      `-CallExpr 0x1318284f0 <line:12:5, col:31> '<dependent type>' contains-errors
        |-DeclRefExpr 0x131828348 <col:5> 'int ()' Function 0x131828290 'setnilvalue' 'int ()'
        `-CallExpr 0x1318284c8 <col:17, col:30> '<dependent type>' contains-errors
          |-DeclRefExpr 0x131828448 <col:17> 'int ()' Function 0x131828390 's2v' 'int ()'
          `-BinaryOperator 0x1318284a8 <col:21, col:29> '<dependent type>' contains-errors '+'
            |-RecoveryExpr 0x131828468 <col:21> '<dependent type>' contains-errors lvalue
            `-DeclRefExpr 0x131828488 <col:29> 'int' lvalue Var 0x13180e080 'i' 'int'
