`-FunctionDecl 0x148928b10  line:1:13 dom_load_html 'void ()' static
  `-CompoundStmt 0x148943d68 <line:2:1, line:78:1>
    |-DeclStmt 0x148928d40 <line:7:2, col:14>
    | `-VarDecl 0x148928cd8 <col:2, col:8> col:8 used source 'char *'
    |-DeclStmt 0x148928ef8 <line:8:2, col:31>
    | |-VarDecl 0x148928d70 <col:2, col:6> col:6 used source_len 'int'
    | |-VarDecl 0x148928df0 <col:2, col:18> col:18 used refcount 'int'
    | `-VarDecl 0x148928e70 <col:2, col:28> col:28 used ret 'int'
    |-DeclStmt 0x148928fc8 <line:9:2, col:18>
    | `-VarDecl 0x148928f28 <col:2, col:17> col:7 used options 'long' cinit
    |   `-ImplicitCastExpr 0x148928fb0 <col:17> 'long' <IntegralCast>
    |     `-IntegerLiteral 0x148928f90 <col:17> 'int' 0
    |-IfStmt 0x148942470 <line:14:2, line:16:2>
    | |-RecoveryExpr 0x148942428 <line:14:6, col:97> '_Bool' contains-errors
    | `-CompoundStmt 0x148942458 <col:106, line:16:2>
    |   `-ReturnStmt 0x148942448 <line:15:3>
    |-IfStmt 0x148942608 <line:18:2, line:21:2>
    | |-UnaryOperator 0x1489424c8 <line:18:6, col:7> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x1489424b0 <col:7> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x148942490 <col:7> 'int' lvalue Var 0x148928d70 'source_len' 'int'
    | `-CompoundStmt 0x1489425f8 <col:19, line:21:2>
    |-IfStmt 0x148942b00 <line:23:2, line:28:2> has_else
    | |-RecoveryExpr 0x148942628 <line:23:6, col:14> '_Bool' contains-errors
    | |-CompoundStmt 0x148942768 <col:29, line:25:2>
    | `-CompoundStmt 0x148942ae8 <col:9, line:28:2>
    |   `-BinaryOperator 0x148942910 <line:26:3, col:32> 'int' '='
    |     |-DeclRefExpr 0x148942778 <col:3> 'int' lvalue Var 0x148928d70 'source_len' 'int'
    |     `-CallExpr 0x1489428d0 <col:16, col:32> 'int'
    |       |-ImplicitCastExpr 0x1489428b8 <col:16> 'int (*)()' <FunctionToPointerDecay>
    |       | `-DeclRefExpr 0x148942878 <col:16> 'int ()' Function 0x1489427c0 'xmlStrlen' 'int ()'
    |       `-ImplicitCastExpr 0x1489428f8 <col:26> 'char *' <LValueToRValue>
    |         `-DeclRefExpr 0x148942898 <col:26> 'char *' lvalue Var 0x148928cd8 'source' 'char *'
    |-IfStmt 0x148942b60 <line:30:2, line:32:2>
    | |-RecoveryExpr 0x148942b30 <line:30:6, col:7> '_Bool' contains-errors
    | `-CompoundStmt 0x148942b50 <col:13, line:32:2>
    |-IfStmt 0x148942ce8 <line:34:2, line:36:2>
    | |-ImplicitCastExpr 0x148942ba0 <line:34:6> 'long' <LValueToRValue>
    | | `-DeclRefExpr 0x148942b80 <col:6> 'long' lvalue Var 0x148928f28 'options' 'long'
    | `-CompoundStmt 0x148942cd8 <col:15, line:36:2>
    |-IfStmt 0x148942d38 <line:40:2, line:43:2>
    | |-RecoveryExpr 0x148942d08 <line:40:6, col:19> '_Bool' contains-errors
    | `-CompoundStmt 0x148942d28 <col:25, line:43:2>
    `-IfStmt 0x148943d38 <line:51:2, line:77:2> has_else
      |-RecoveryExpr 0x148943178 <line:51:6, col:89> '_Bool' contains-errors
      |-CompoundStmt 0x148943ba0 <col:92, line:75:2>
      | `-IfStmt 0x148943a80 <line:53:3, line:70:3>
      |   |-RecoveryExpr 0x148943198 <line:53:7, col:17> '_Bool' contains-errors
      |   `-CompoundStmt 0x148943a60 <col:23, line:70:3>
      |     |-IfStmt 0x1489438b8 <line:56:4, line:64:4>
      |     | |-RecoveryExpr 0x1489431b8 <line:56:8, col:16> '_Bool' contains-errors
      |     | `-CompoundStmt 0x1489438a0 <col:22, line:64:4>
      |     |   `-IfStmt 0x148943880 <line:61:5, line:63:5>
      |     |     |-BinaryOperator 0x148943850 <line:61:9, col:21> 'int' '!='
      |     |     | |-ImplicitCastExpr 0x148943838 <col:9> 'int' <LValueToRValue>
      |     |     | | `-DeclRefExpr 0x1489437f8 <col:9> 'int' lvalue Var 0x148928df0 'refcount' 'int'
      |     |     | `-IntegerLiteral 0x148943818 <col:21> 'int' 0
      |     |     `-CompoundStmt 0x148943870 <col:24, line:63:5>
      |     `-IfStmt 0x148943a40 <line:66:4, line:68:4>
      |       |-RecoveryExpr 0x148943a10 <line:66:8, col:93> '_Bool' contains-errors
      |       `-CompoundStmt 0x148943a30 <col:96, line:68:4>
      `-CompoundStmt 0x148943d28 <line:75:9, line:77:2>
