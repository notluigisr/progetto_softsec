`-FunctionDecl 0x14c128118  line:2:1 number_of_args 'int ()'
  `-CompoundStmt 0x14c128700 <line:3:1, line:11:12>
    |-DeclStmt 0x14c1282d0 <line:4:3, col:27>
    | `-VarDecl 0x14c128268 <col:3, col:23> col:23 invalid list 'int *' register
    |-DeclStmt 0x14c128368 <line:5:3, col:8>
    | `-VarDecl 0x14c128300 <col:3, col:7> col:7 used n 'int'
    |-ForStmt 0x14c128680 <line:9:3, line:10:6>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-RecoveryExpr 0x14c128580 <line:9:29> '<dependent type>' contains-errors lvalue
    | |-BinaryOperator 0x14c128628 <col:35, col:48> '<dependent type>' contains-errors '='
    | | |-RecoveryExpr 0x14c1285a0 <col:35> '<dependent type>' contains-errors lvalue
    | | `-CXXDependentScopeMemberExpr 0x14c1285e0 <col:42, col:48> '<dependent type>' contains-errors lvalue ->next
    | |   `-RecoveryExpr 0x14c1285c0 <col:42> '<dependent type>' contains-errors lvalue
    | `-UnaryOperator 0x14c128668 <line:10:5, col:6> 'int' postfix '++'
    |   `-DeclRefExpr 0x14c128648 <col:5> 'int' lvalue Var 0x14c128300 'n' 'int'
    `-ReturnStmt 0x14c1286f0 <line:11:3, col:10>
      `-ImplicitCastExpr 0x14c1286d8 <col:10> 'int' <LValueToRValue>
        `-DeclRefExpr 0x14c1286b8 <col:10> 'int' lvalue Var 0x14c128300 'n' 'int'
