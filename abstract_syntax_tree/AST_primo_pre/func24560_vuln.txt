`-FunctionDecl 0x135140ba0  line:1:13 audit_log_execve_info 'void (struct audit_context *, struct audit_buffer **)' static
  |-ParmVarDecl 0x135128648 <col:35, col:57> col:57 used context 'struct audit_context *'
  |-ParmVarDecl 0x135140a88 <line:2:7, col:29> col:29 used ab 'struct audit_buffer **'
  `-CompoundStmt 0x135141fb0 <line:3:1, line:28:1>
    |-DeclStmt 0x135140db8 <line:4:2, col:12>
    | |-VarDecl 0x135140cb8 <col:2, col:6> col:6 used i 'int'
    | `-VarDecl 0x135140d38 <col:2, col:9> col:9 used len 'int'
    |-RecoveryExpr 0x135140ec8 <line:5:2, col:20> '<dependent type>' contains-errors lvalue
    | |-UnaryExprOrTypeTraitExpr 0x135140ea8 <col:2, col:9> 'unsigned long' contains-errors sizeof
    | | `-RecoveryExpr 0x135140e88 <col:9> '<dependent type>' contains-errors lvalue
    | `-IntegerLiteral 0x135140e20 <col:20> 'int' 0
    |-DeclStmt 0x135140f70 <line:6:2, col:20>
    | `-VarDecl 0x135140f08 <col:2, col:13> col:13 __user 'const char'
    |-DeclStmt 0x135141008 <line:7:2, col:11>
    | `-VarDecl 0x135140fa0 <col:2, col:8> col:8 used buf 'char *'
    |-CallExpr 0x135141368 <line:11:2, col:51> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x1351411f0 <col:2> 'int ()' Function 0x135141138 'audit_log_format' 'int ()'
    | |-UnaryOperator 0x135141248 <col:19, col:20> 'struct audit_buffer *' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x135141230 <col:20> 'struct audit_buffer **' <LValueToRValue>
    | |   `-DeclRefExpr 0x135141210 <col:20> 'struct audit_buffer **' lvalue ParmVar 0x135140a88 'ab' 'struct audit_buffer **'
    | |-StringLiteral 0x1351412a0 <col:24> 'char[4]' lvalue "STR"
    | `-CXXDependentScopeMemberExpr 0x135141320 <col:31, col:47> '<dependent type>' contains-errors lvalue .argc
    |   `-RecoveryExpr 0x1351412f8 <col:31, col:40> '<dependent type>' contains-errors lvalue
    |     `-DeclRefExpr 0x1351412c0 <col:31> 'struct audit_context *' lvalue ParmVar 0x135128648 'context' 'struct audit_context *'
    |-BinaryOperator 0x135141610 <line:14:2, col:52> 'char *' contains-errors '='
    | |-DeclRefExpr 0x1351413a0 <col:2> 'char *' lvalue Var 0x135140fa0 'buf' 'char *'
    | `-CallExpr 0x1351415e0 <col:8, col:52> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x1351414a0 <col:8> 'int ()' Function 0x1351413e8 'kmalloc' 'int ()'
    |   |-BinaryOperator 0x1351415a0 <col:16, col:39> '<dependent type>' contains-errors '+'
    |   | |-RecoveryExpr 0x135141580 <col:16> '<dependent type>' contains-errors lvalue
    |   | `-IntegerLiteral 0x1351414d8 <col:39> 'int' 1
    |   `-RecoveryExpr 0x1351415c0 <col:42> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x135141858 <line:15:2, line:18:2>
    | |-UnaryOperator 0x135141668 <line:15:6, col:7> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x135141650 <col:7> 'char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x135141630 <col:7> 'char *' lvalue Var 0x135140fa0 'buf' 'char *'
    | `-CompoundStmt 0x135141838 <col:12, line:18:2>
    |   |-CallExpr 0x1351417e8 <line:16:3, col:20> 'int'
    |   | |-ImplicitCastExpr 0x1351417d0 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x135141760 <col:3> 'int ()' Function 0x1351416a8 'audit_panic' 'int ()'
    |   | `-ImplicitCastExpr 0x135141810 <col:15> 'char *' <ArrayToPointerDecay>
    |   |   `-StringLiteral 0x135141780 <col:15> 'char[4]' lvalue "STR"
    |   `-ReturnStmt 0x135141828 <line:17:3>
    |-ForStmt 0x135141e00 <line:20:2, line:26:2>
    | |-BinaryOperator 0x1351418b8 <line:20:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x135141878 <col:7> 'int' lvalue Var 0x135140cb8 'i' 'int'
    | | `-IntegerLiteral 0x135141898 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x1351419a0 <col:14, col:34> 'int' contains-errors '<'
    | | |-DeclRefExpr 0x1351418d8 <col:14> 'int' lvalue Var 0x135140cb8 'i' 'int'
    | | `-CXXDependentScopeMemberExpr 0x135141958 <col:18, col:34> '<dependent type>' contains-errors lvalue .argc
    | |   `-RecoveryExpr 0x135141930 <col:18, col:27> '<dependent type>' contains-errors lvalue
    | |     `-DeclRefExpr 0x1351418f8 <col:18> 'struct audit_context *' lvalue ParmVar 0x135128648 'context' 'struct audit_context *'
    | |-UnaryOperator 0x1351419e0 <col:40, col:41> 'int' postfix '++'
    | | `-DeclRefExpr 0x1351419c0 <col:40> 'int' lvalue Var 0x135140cb8 'i' 'int'
    | `-CompoundStmt 0x135141de0 <col:45, line:26:2>
    |   |-BinaryOperator 0x135141d00 <line:21:3, line:22:26> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x135141a00 <line:21:3> 'int' lvalue Var 0x135140d38 'len' 'int'
    |   | `-CallExpr 0x135141cb0 <col:9, line:22:26> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x135141b00 <line:21:9> 'int ()' Function 0x135141a48 'audit_log_single_execve_arg' 'int ()'
    |   |   |-DeclRefExpr 0x135141b20 <col:37> 'struct audit_context *' lvalue ParmVar 0x135128648 'context' 'struct audit_context *'
    |   |   |-DeclRefExpr 0x135141b40 <col:46> 'struct audit_buffer **' lvalue ParmVar 0x135140a88 'ab' 'struct audit_buffer **'
    |   |   |-DeclRefExpr 0x135141b60 <col:50> 'int' lvalue Var 0x135140cb8 'i' 'int'
    |   |   |-UnaryOperator 0x135141c78 <line:22:9, col:10> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   |   | `-RecoveryExpr 0x135141c58 <col:10> '<dependent type>' contains-errors lvalue
    |   |   |-RecoveryExpr 0x135141c90 <col:20> '<dependent type>' contains-errors lvalue
    |   |   `-DeclRefExpr 0x135141bc8 <col:23> 'char *' lvalue Var 0x135140fa0 'buf' 'char *'
    |   `-IfStmt 0x135141da0 <line:23:3, line:24:4>
    |     |-BinaryOperator 0x135141d78 <line:23:7, col:14> 'int' '<='
    |     | |-ImplicitCastExpr 0x135141d60 <col:7> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x135141d20 <col:7> 'int' lvalue Var 0x135140d38 'len' 'int'
    |     | `-IntegerLiteral 0x135141d40 <col:14> 'int' 0
    |     `-BreakStmt 0x135141d98 <line:24:4>
    `-CallExpr 0x135141f70 <line:27:2, col:11> 'int'
      |-ImplicitCastExpr 0x135141f58 <col:2> 'int (*)()' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x135141f18 <col:2> 'int ()' Function 0x135141e60 'kfree' 'int ()'
      `-ImplicitCastExpr 0x135141f98 <col:8> 'char *' <LValueToRValue>
        `-DeclRefExpr 0x135141f38 <col:8> 'char *' lvalue Var 0x135140fa0 'buf' 'char *'
