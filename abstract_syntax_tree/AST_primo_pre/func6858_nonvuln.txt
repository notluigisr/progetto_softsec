`-FunctionDecl 0x12a00de38  line:1:1 TEST 'int (int, int)'
  |-ParmVarDecl 0x12a00dd58 <col:6> col:6 SimpleRegexTest 'int'
  |-ParmVarDecl 0x12a00dcd8 <col:23> col:23 RootedRegexCantBeIndexedTightlyIfIndexHasCollation 'int'
  `-CompoundStmt 0x12a026b98 <col:75, line:10:1>
    |-DeclStmt 0x12a00e168 <line:3:5, col:45>
    | `-VarDecl 0x12a00df68 <col:5, col:44> col:10 used testIndex 'int' auto cinit
    |   `-CallExpr 0x12a00e148 <col:22, col:44> 'int'
    |     `-ImplicitCastExpr 0x12a00e130 <col:22> 'int (*)()' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x12a00e0e0 <col:22> 'int ()' Function 0x12a00e028 'buildSimpleIndexEntry' 'int ()'
    |-BinaryOperator 0x12a026890 <line:4:5, col:27> '<dependent type>' contains-errors '='
    | |-RecoveryExpr 0x12a0267e0 <col:5, col:15> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x12a00e180 <col:5> 'int' lvalue Var 0x12a00df68 'testIndex' 'int'
    | `-UnaryOperator 0x12a026878 <col:26, col:27> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   `-RecoveryExpr 0x12a026858 <col:27> '<dependent type>' contains-errors lvalue
    |-RecoveryExpr 0x12a0268e0 <line:6:5> '<dependent type>' contains-errors lvalue
    |-RecoveryExpr 0x12a026930 <line:7:5> '<dependent type>' contains-errors lvalue
    `-CallExpr 0x12a026b18 <line:8:5, col:29> '<dependent type>' contains-errors
      |-DeclRefExpr 0x12a026a30 <col:5> 'int ()' Function 0x12a026978 'ASSERT_EQUALS' 'int ()'
      |-RecoveryExpr 0x12a026af8 <col:19> '<dependent type>' contains-errors lvalue
      `-StringLiteral 0x12a026ab0 <col:27> 'char[1]' lvalue ""
