`-FunctionDecl 0x12c80de38  line:1:1 TEST 'int (int, int)'
  |-ParmVarDecl 0x12c80dd58 <col:6> col:6 used MessageCompressorManager 'int'
  |-ParmVarDecl 0x12c80dcd8 <col:32> col:32 MessageSizeTooSmall 'int'
  `-CompoundStmt 0x12c826c80 <col:53, line:19:1>
    |-DeclStmt 0x12c80e168 <line:2:5, col:36>
    | `-VarDecl 0x12c80df50 <col:5, col:35> col:10 used registry 'int' auto cinit
    |   `-CallExpr 0x12c80e148 <col:21, col:35> 'int'
    |     `-ImplicitCastExpr 0x12c80e130 <col:21> 'int (*)()' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x12c80e0e0 <col:21> 'int ()' Function 0x12c80e028 'buildRegistry' 'int ()'
    |-ImplicitCastExpr 0x12c80e1a0 <line:3:5> 'int' <LValueToRValue>
    | `-DeclRefExpr 0x12c80e180 <col:5> 'int' lvalue ParmVar 0x12c80dd58 'MessageCompressorManager' 'int'
    |-CallExpr 0x12c80e340 <col:30, col:51> 'int'
    | |-ImplicitCastExpr 0x12c80e328 <col:30> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x12c80e298 <col:30> 'int ()' Function 0x12c80e1e0 'compManager' 'int ()'
    | `-UnaryOperator 0x12c80e310 <col:42, col:43> 'int *' prefix '&' cannot overflow
    |   `-DeclRefExpr 0x12c80e2b8 <col:43> 'int' lvalue Var 0x12c80df50 'registry' 'int'
    |-DeclStmt 0x12c826620 <line:5:5, col:41>
    | `-VarDecl 0x12c80e380 <col:5, col:29> col:10 used badMessageBuffer 'int' auto cinit
    |   `-RecoveryExpr 0x12c826600 <col:29> '<dependent type>' contains-errors lvalue
    |-RecoveryExpr 0x12c826668 <line:6:5> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x12c826af0 <line:17:5, col:96>
    | `-VarDecl 0x12c8268c8 <col:5, col:10> col:10 used status 'int' auto
    `-CallExpr 0x12c826c40 <line:18:5, col:25> 'int'
      |-ImplicitCastExpr 0x12c826c28 <col:5> 'int (*)()' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x12c826be8 <col:5> 'int ()' Function 0x12c826b30 'ASSERT_NOT_OK' 'int ()'
      `-ImplicitCastExpr 0x12c826c68 <col:19> 'int' <LValueToRValue>
        `-DeclRefExpr 0x12c826c08 <col:19> 'int' lvalue Var 0x12c8268c8 'status' 'int'
