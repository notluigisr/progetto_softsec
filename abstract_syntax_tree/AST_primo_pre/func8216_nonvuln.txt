`-FunctionDecl 0x138125bf8  line:1:1 invalid Mat_Rewind 'int (int *)'
  |-ParmVarDecl 0x138125b28 <col:13, col:20> col:20 referenced invalid mat 'int *'
  `-CompoundStmt 0x130008cb0 <line:2:1, line:21:1>
    |-DeclStmt 0x138125d48 <line:3:5, col:16>
    | `-VarDecl 0x138125cc0 <col:5, col:15> col:9 used err 'int' cinit
    |   `-IntegerLiteral 0x138125d28 <col:15> 'int' 0
    |-SwitchStmt 0x138125de0 <line:5:5, line:18:5>
    | |-ImplicitCastExpr 0x138125dc8 <line:5:14, col:19> '<dependent type>' contains-errors <LValueToRValue>
    | | `-CXXDependentScopeMemberExpr 0x138125d80 <col:14, col:19> '<dependent type>' contains-errors lvalue ->version
    | |   `-RecoveryExpr 0x138125d60 <col:14> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x130008c28 <col:29, line:18:5>
    |   |-BreakStmt 0x138125ff0 <line:8:13>
    |   |-BinaryOperator 0x1381260c0 <line:10:13, col:31> '<dependent type>' contains-errors '='
    |   | |-CXXDependentScopeMemberExpr 0x138126058 <col:13, col:18> '<dependent type>' contains-errors lvalue ->next_index
    |   | | `-RecoveryExpr 0x138126030 <col:13> '<dependent type>' contains-errors lvalue
    |   | |   `-DeclRefExpr 0x138126010 <col:13> 'int *' lvalue ParmVar 0x138125b28 'mat' 'int *'
    |   | `-IntegerLiteral 0x1381260a0 <col:31> 'int' 0
    |   |-BreakStmt 0x1381260e0 <line:11:13>
    |   |-BreakStmt 0x138126170 <line:14:13>
    |   |-DefaultStmt 0x130008c00 <line:15:9, line:16:20>
    |   | `-BinaryOperator 0x1381261d0 <col:13, col:20> 'int' '='
    |   |   |-DeclRefExpr 0x138126178 <col:13> 'int' lvalue Var 0x138125cc0 'err' 'int'
    |   |   `-UnaryOperator 0x1381261b8 <col:19, col:20> 'int' prefix '-'
    |   |     `-IntegerLiteral 0x138126198 <col:20> 'int' 1
    |   `-BreakStmt 0x130008c20 <line:17:13>
    `-ReturnStmt 0x130008ca0 <line:20:5, col:12>
      `-ImplicitCastExpr 0x130008c88 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x130008c68 <col:12> 'int' lvalue Var 0x138125cc0 'err' 'int'
