`-FunctionDecl 0x1489201f8  line:1:12 invalid fts3DoIntegrityCheck 'int (int *)' static
  |-ParmVarDecl 0x148920128 <line:2:3, col:14> col:14 invalid p 'int *'
  `-CompoundStmt 0x14a008cc8 <line:3:2, line:9:1>
    |-DeclStmt 0x148920328 <line:4:3, col:9>
    | `-VarDecl 0x1489202c0 <col:3, col:7> col:7 used rc 'int'
    |-DeclStmt 0x1489203e0 <line:5:3, col:14>
    | `-VarDecl 0x148920358 <col:3, col:13> col:7 used bOk 'int' cinit
    |   `-IntegerLiteral 0x1489203c0 <col:13> 'int' 0
    |-BinaryOperator 0x148920618 <line:6:3, col:34> 'int' contains-errors '='
    | |-DeclRefExpr 0x1489203f8 <col:3> 'int' lvalue Var 0x1489202c0 'rc' 'int'
    | `-CallExpr 0x1489205e8 <col:8, col:34> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x148920570 <col:8> 'int ()' Function 0x1489204b8 'fts3IntegrityCheck' 'int ()'
    |   |-RecoveryExpr 0x148920590 <col:27> '<dependent type>' contains-errors lvalue
    |   `-UnaryOperator 0x1489205d0 <col:30, col:31> 'int *' prefix '&' cannot overflow
    |     `-DeclRefExpr 0x1489205b0 <col:31> 'int' lvalue Var 0x148920358 'bOk' 'int'
    |-IfStmt 0x14a008c60 <line:7:3, col:38>
    | |-BinaryOperator 0x1489207a0 <col:7, col:29> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x148920748 <col:7, col:11> 'int' contains-errors '=='
    | | | |-DeclRefExpr 0x148920638 <col:7> 'int' lvalue Var 0x1489202c0 'rc' 'int'
    | | | `-RecoveryExpr 0x148920728 <col:11> '<dependent type>' contains-errors lvalue
    | | `-BinaryOperator 0x148920780 <col:24, col:29> 'int' '=='
    | |   |-ImplicitCastExpr 0x148920768 <col:24> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x148920690 <col:24> 'int' lvalue Var 0x148920358 'bOk' 'int'
    | |   `-IntegerLiteral 0x1489206b0 <col:29> 'int' 0
    | `-BinaryOperator 0x14a008c40 <col:33, col:38> 'int' contains-errors '='
    |   |-DeclRefExpr 0x1489207c0 <col:33> 'int' lvalue Var 0x1489202c0 'rc' 'int'
    |   `-RecoveryExpr 0x14a008c20 <col:38> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x14a008cb8 <line:8:3, col:10>
      `-ImplicitCastExpr 0x14a008ca0 <col:10> 'int' <LValueToRValue>
        `-DeclRefExpr 0x14a008c80 <col:10> 'int' lvalue Var 0x1489202c0 'rc' 'int'
