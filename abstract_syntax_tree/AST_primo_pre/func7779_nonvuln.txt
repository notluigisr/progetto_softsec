`-FunctionDecl 0x12b026600  line:1:1 parse_CLONE 'int (char *, const struct ofpact_parse_params *)'
  |-ParmVarDecl 0x12b00dcd8 <col:13, col:19> col:19 used arg 'char *'
  |-ParmVarDecl 0x12b00e2c8 <col:24, col:58> col:58 used pp 'const struct ofpact_parse_params *'
  `-CompoundStmt 0x12b029768 <line:2:1, line:20:1>
    |-DeclStmt 0x12b026958 <line:3:5, col:58>
    | `-VarDecl 0x12b026730 <col:5, col:18> col:18 invalid clone_offset 'const int'
    |-DeclStmt 0x12b026ce0 <line:4:5, col:62>
    | |-RecordDecl 0x12b026970 <col:5, col:12> col:12 struct ofpact_nest
    | `-VarDecl 0x12b026ad8 <col:5, col:61> col:25 used clone 'struct ofpact_nest *' cinit
    |   `-CallExpr 0x12b026ca0 <col:33, col:61> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x12b026c20 <col:33> 'int ()' Function 0x12b026b68 'ofpact_put_CLONE' 'int ()'
    |     `-RecoveryExpr 0x12b026c78 <col:50, col:54> '<dependent type>' contains-errors lvalue
    |       `-DeclRefExpr 0x12b026c40 <col:50> 'const struct ofpact_parse_params *' lvalue ParmVar 0x12b00e2c8 'pp' 'const struct ofpact_parse_params *'
    |-DeclStmt 0x12b026d78 <line:5:5, col:16>
    | `-VarDecl 0x12b026d10 <col:5, col:11> col:11 used error 'char *'
    |-BinaryOperator 0x12b0273f0 <line:11:5, col:26> 'struct ofpact_nest *' contains-errors '='
    | |-DeclRefExpr 0x12b027328 <col:5> 'struct ofpact_nest *' contains-errors lvalue Var 0x12b026ad8 'clone' 'struct ofpact_nest *'
    | `-CXXDependentScopeMemberExpr 0x12b0273a8 <col:13, col:26> '<dependent type>' contains-errors lvalue ->header
    |   `-RecoveryExpr 0x12b027380 <col:13, col:17> '<dependent type>' contains-errors lvalue
    |     `-DeclRefExpr 0x12b027348 <col:13> 'const struct ofpact_parse_params *' lvalue ParmVar 0x12b00e2c8 'pp' 'const struct ofpact_parse_params *'
    |-IfStmt 0x12b0293f0 <line:13:5, line:15:5>
    | |-CallExpr 0x12b027570 <line:13:9, col:37> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x12b0274f0 <col:9> 'int ()' Function 0x12b027438 'ofpbuf_oversized' 'int ()'
    | | `-RecoveryExpr 0x12b027548 <col:26, col:30> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x12b027510 <col:26> 'const struct ofpact_parse_params *' lvalue ParmVar 0x12b00e2c8 'pp' 'const struct ofpact_parse_params *'
    | `-CompoundStmt 0x12b0293d8 <col:40, line:15:5>
    |   `-ReturnStmt 0x12b0293c8 <line:14:9, col:31>
    |     `-CallExpr 0x12b029388 <col:16, col:31> 'int'
    |       |-ImplicitCastExpr 0x12b029370 <col:16> 'int (*)()' <FunctionToPointerDecay>
    |       | `-DeclRefExpr 0x12b0292b8 <col:16> 'int ()' Function 0x12b029200 'xasprintf' 'int ()'
    |       `-ImplicitCastExpr 0x12b0293b0 <col:26> 'char *' <ArrayToPointerDecay>
    |         `-StringLiteral 0x12b029320 <col:26> 'char[4]' lvalue "STR"
    |-CallExpr 0x12b029608 <line:17:5, col:44> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x12b0294f0 <col:5> 'int ()' Function 0x12b029438 'ofpact_finish_CLONE' 'int ()'
    | |-RecoveryExpr 0x12b029548 <col:25, col:29> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x12b029510 <col:25> 'const struct ofpact_parse_params *' lvalue ParmVar 0x12b00e2c8 'pp' 'const struct ofpact_parse_params *'
    | `-UnaryOperator 0x12b0295f0 <col:38, col:39> 'struct ofpact_nest **' contains-errors prefix '&' cannot overflow
    |   `-DeclRefExpr 0x12b029570 <col:39> 'struct ofpact_nest *' contains-errors lvalue Var 0x12b026ad8 'clone' 'struct ofpact_nest *'
    |-CallExpr 0x12b0296d8 <line:18:5, col:49> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x12b029638 <col:5> 'int ()' Function 0x12b0271a0 'ofpbuf_push_uninit' 'int ()'
    | |-RecoveryExpr 0x12b029690 <col:24, col:28> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x12b029658 <col:24> 'const struct ofpact_parse_params *' lvalue ParmVar 0x12b00e2c8 'pp' 'const struct ofpact_parse_params *'
    | `-RecoveryExpr 0x12b0296b8 <col:37> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x12b029758 <line:19:5, col:12>
      `-ImplicitCastExpr 0x12b029740 <col:12> 'int' <PointerToIntegral>
        `-ImplicitCastExpr 0x12b029728 <col:12> 'char *' <LValueToRValue>
          `-DeclRefExpr 0x12b029708 <col:12> 'char *' lvalue Var 0x12b026d10 'error' 'char *'
