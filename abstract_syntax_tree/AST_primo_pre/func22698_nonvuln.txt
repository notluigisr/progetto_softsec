`-FunctionDecl 0x13a9282e8  line:1:1 invalid _gnutls_x509_verify_signature 'int (const int *, const int *, int)'
  |-ParmVarDecl 0x13a9280f0 <col:32, col:55> col:55 invalid tbs 'const int *'
  |-ParmVarDecl 0x13a928170 <line:2:11, col:34> col:34 invalid signature 'const int *'
  |-ParmVarDecl 0x13a9281f0 <line:3:11, col:29> col:29 invalid issuer 'int'
  `-CompoundStmt 0x13a9423b8 <line:4:1, line:34:1>
    |-DeclStmt 0x13a928548 <line:6:3, col:33>
    | |-VarDecl 0x13a9283c0 <col:3, col:7> col:7 used ret 'int'
    | |-VarDecl 0x13a928440 <col:3, col:12> col:12 used issuer_params_size 'int'
    | `-VarDecl 0x13a9284c0 <col:3, col:32> col:32 used i 'int'
    |-BinaryOperator 0x13a9285d8 <line:9:3, col:24> 'int' contains-errors '='
    | |-DeclRefExpr 0x13a928560 <col:3> 'int' lvalue Var 0x13a928440 'issuer_params_size' 'int'
    | `-RecoveryExpr 0x13a9285b8 <col:24> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x13a9418f8 <line:10:3, line:11:74> 'int' contains-errors '='
    | |-DeclRefExpr 0x13a9285f8 <line:10:3> 'int' lvalue Var 0x13a9283c0 'ret' 'int'
    | `-CallExpr 0x13a9418c0 <line:11:5, col:74> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x13a928770 <col:5> 'int ()' Function 0x13a9286b8 '_gnutls_x509_crt_get_mpis' 'int ()'
    |   |-RecoveryExpr 0x13a928790 <col:32> '<dependent type>' contains-errors lvalue
    |   |-RecoveryExpr 0x13a9418a0 <col:40> '<dependent type>' contains-errors lvalue
    |   `-UnaryOperator 0x13a941830 <col:55, col:56> 'int *' prefix '&' cannot overflow
    |     `-DeclRefExpr 0x13a9287c8 <col:56> 'int' lvalue Var 0x13a928440 'issuer_params_size' 'int'
    |-IfStmt 0x13a941b60 <line:12:3, line:16:5>
    | |-BinaryOperator 0x13a941970 <line:12:7, col:13> 'int' '<'
    | | |-ImplicitCastExpr 0x13a941958 <col:7> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x13a941918 <col:7> 'int' lvalue Var 0x13a9283c0 'ret' 'int'
    | | `-IntegerLiteral 0x13a941938 <col:13> 'int' 0
    | `-CompoundStmt 0x13a941b40 <line:13:5, line:16:5>
    |   |-CallExpr 0x13a941ad8 <line:14:7, col:22> 'int'
    |   | `-ImplicitCastExpr 0x13a941ac0 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |   |   `-DeclRefExpr 0x13a941a70 <col:7> 'int ()' Function 0x13a9419b8 'gnutls_assert' 'int ()'
    |   `-ReturnStmt 0x13a941b30 <line:15:7, col:14>
    |     `-ImplicitCastExpr 0x13a941b18 <col:14> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x13a941af8 <col:14> 'int' lvalue Var 0x13a9283c0 'ret' 'int'
    |-BinaryOperator 0x13a941fa0 <line:18:3, line:21:36> 'int' contains-errors '='
    | |-DeclRefExpr 0x13a941b80 <line:18:3> 'int' lvalue Var 0x13a9283c0 'ret' 'int'
    | `-CallExpr 0x13a941f58 <line:19:5, line:21:36> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x13a941c80 <line:19:5> 'int ()' Function 0x13a941bc8 'verify_sig' 'int ()'
    |   |-RecoveryExpr 0x13a941ca0 <col:17> '<dependent type>' contains-errors lvalue
    |   |-RecoveryExpr 0x13a941cc0 <col:22> '<dependent type>' contains-errors lvalue
    |   |-CallExpr 0x13a941f08 <line:20:3, col:49> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x13a941dc0 <col:3> 'int ()' Function 0x13a941d08 'gnutls_x509_crt_get_pk_algorithm' 'int ()'
    |   | |-RecoveryExpr 0x13a941de0 <col:37> '<dependent type>' contains-errors lvalue
    |   | `-RecoveryExpr 0x13a941ee8 <col:45> '<dependent type>' contains-errors lvalue
    |   |-RecoveryExpr 0x13a941f38 <line:21:3> '<dependent type>' contains-errors lvalue
    |   `-DeclRefExpr 0x13a941e60 <col:18> 'int' lvalue Var 0x13a928440 'issuer_params_size' 'int'
    |-IfStmt 0x13a9420a8 <line:22:3, line:25:5>
    | |-BinaryOperator 0x13a942018 <line:22:7, col:13> 'int' '<'
    | | |-ImplicitCastExpr 0x13a942000 <col:7> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x13a941fc0 <col:7> 'int' lvalue Var 0x13a9283c0 'ret' 'int'
    | | `-IntegerLiteral 0x13a941fe0 <col:13> 'int' 0
    | `-CompoundStmt 0x13a942090 <line:23:5, line:25:5>
    |   `-CallExpr 0x13a942070 <line:24:7, col:22> 'int'
    |     `-ImplicitCastExpr 0x13a942058 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x13a942038 <col:7> 'int ()' Function 0x13a9419b8 'gnutls_assert' 'int ()'
    |-ForStmt 0x13a942338 <line:28:3, line:31:5>
    | |-BinaryOperator 0x13a942108 <line:28:8, col:12> 'int' '='
    | | |-DeclRefExpr 0x13a9420c8 <col:8> 'int' lvalue Var 0x13a9284c0 'i' 'int'
    | | `-IntegerLiteral 0x13a9420e8 <col:12> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x13a942198 <col:15, col:19> 'int' '<'
    | | |-ImplicitCastExpr 0x13a942168 <col:15> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x13a942128 <col:15> 'int' lvalue Var 0x13a9284c0 'i' 'int'
    | | `-ImplicitCastExpr 0x13a942180 <col:19> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x13a942148 <col:19> 'int' lvalue Var 0x13a928440 'issuer_params_size' 'int'
    | |-UnaryOperator 0x13a9421d8 <col:39, col:40> 'int' postfix '++'
    | | `-DeclRefExpr 0x13a9421b8 <col:39> 'int' lvalue Var 0x13a9284c0 'i' 'int'
    | `-CompoundStmt 0x13a942328 <line:29:5, line:31:5>
    `-ReturnStmt 0x13a9423a8 <line:33:3, col:10>
      `-ImplicitCastExpr 0x13a942390 <col:10> 'int' <LValueToRValue>
        `-DeclRefExpr 0x13a942370 <col:10> 'int' lvalue Var 0x13a9283c0 'ret' 'int'
