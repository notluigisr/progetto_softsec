`-FunctionDecl 0x13c80e358  line:1:17 name_to_int 'unsigned int (struct dentry *)' static
  |-ParmVarDecl 0x13c80e248 <col:29, col:44> col:44 used dentry 'struct dentry *'
  `-CompoundStmt 0x13c82b3d0 <line:2:1, line:21:1>
    |-DeclStmt 0x13c82a978 <line:3:2, col:40>
    | `-VarDecl 0x13c82a868 <col:2, col:36> col:14 used name 'const char *' cinit
    |   `-CXXDependentScopeMemberExpr 0x13c82a930 <col:21, col:36> '<dependent type>' contains-errors lvalue .name
    |     `-RecoveryExpr 0x13c82a908 <col:21, col:29> '<dependent type>' contains-errors lvalue
    |       `-DeclRefExpr 0x13c82a8d0 <col:21> 'struct dentry *' lvalue ParmVar 0x13c80e248 'dentry' 'struct dentry *'
    |-DeclStmt 0x13c82aab8 <line:4:2, col:30>
    | `-VarDecl 0x13c82a9a8 <col:2, col:27> col:6 used len 'int' cinit
    |   `-CXXDependentScopeMemberExpr 0x13c82aa70 <col:12, col:27> '<dependent type>' contains-errors lvalue .len
    |     `-RecoveryExpr 0x13c82aa48 <col:12, col:20> '<dependent type>' contains-errors lvalue
    |       `-DeclRefExpr 0x13c82aa10 <col:12> 'struct dentry *' lvalue ParmVar 0x13c80e248 'dentry' 'struct dentry *'
    |-DeclStmt 0x13c82ab88 <line:5:2, col:16>
    | `-VarDecl 0x13c82aae8 <col:2, col:15> col:11 used n 'unsigned int' cinit
    |   `-ImplicitCastExpr 0x13c82ab70 <col:15> 'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x13c82ab50 <col:15> 'int' 0
    |-IfStmt 0x13c82ad58 <line:7:2, line:8:8>
    | |-BinaryOperator 0x13c82acd0 <line:7:6, col:26> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x13c82abf8 <col:6, col:12> 'int' contains-errors '>'
    | | | |-ImplicitCastExpr 0x13c82abe0 <col:6> 'int' contains-errors <LValueToRValue>
    | | | | `-DeclRefExpr 0x13c82aba0 <col:6> 'int' contains-errors lvalue Var 0x13c82a9a8 'len' 'int'
    | | | `-IntegerLiteral 0x13c82abc0 <col:12> 'int' 1
    | | `-BinaryOperator 0x13c82acb0 <col:17, col:26> 'int' contains-errors '=='
    | |   |-ImplicitCastExpr 0x13c82ac98 <col:17, col:18> 'int' contains-errors <IntegralCast>
    | |   | `-ImplicitCastExpr 0x13c82ac80 <col:17, col:18> 'char' contains-errors <LValueToRValue>
    | |   |   `-UnaryOperator 0x13c82ac50 <col:17, col:18> 'const char' contains-errors lvalue prefix '*' cannot overflow
    | |   |     `-ImplicitCastExpr 0x13c82ac38 <col:18> 'const char *' contains-errors <LValueToRValue>
    | |   |       `-DeclRefExpr 0x13c82ac18 <col:18> 'const char *' contains-errors lvalue Var 0x13c82a868 'name' 'const char *'
    | |   `-CharacterLiteral 0x13c82ac68 <col:26> 'int' 48
    | `-GotoStmt 0x13c82ad40 <line:8:3, col:8> 'out' 0x13c82acf0
    |-WhileStmt 0x13c82b300 <line:9:2, line:17:2>
    | |-BinaryOperator 0x13c82add0 <line:9:9, col:17> 'int' contains-errors '>'
    | | |-UnaryOperator 0x13c82ad98 <col:9, col:12> 'int' contains-errors postfix '--'
    | | | `-DeclRefExpr 0x13c82ad78 <col:9> 'int' contains-errors lvalue Var 0x13c82a9a8 'len' 'int'
    | | `-IntegerLiteral 0x13c82adb0 <col:17> 'int' 0
    | `-CompoundStmt 0x13c82b2c8 <col:20, line:17:2>
    |   |-DeclStmt 0x13c82af40 <line:10:3, col:29>
    |   | `-VarDecl 0x13c82ae08 <col:3, col:26> col:12 used c 'unsigned int' cinit
    |   |   `-ImplicitCastExpr 0x13c82af28 <col:16, col:26> 'unsigned int' contains-errors <IntegralCast>
    |   |     `-BinaryOperator 0x13c82af08 <col:16, col:26> 'int' contains-errors '-'
    |   |       |-ImplicitCastExpr 0x13c82aef0 <col:16, col:21> 'int' contains-errors <IntegralCast>
    |   |       | `-ImplicitCastExpr 0x13c82aed8 <col:16, col:21> 'char' contains-errors <LValueToRValue>
    |   |       |   `-UnaryOperator 0x13c82aea8 <col:16, col:21> 'const char' contains-errors lvalue prefix '*' cannot overflow
    |   |       |     `-UnaryOperator 0x13c82ae90 <col:17, col:21> 'const char *' contains-errors postfix '++'
    |   |       |       `-DeclRefExpr 0x13c82ae70 <col:17> 'const char *' contains-errors lvalue Var 0x13c82a868 'name' 'const char *'
    |   |       `-CharacterLiteral 0x13c82aec0 <col:26> 'int' 48
    |   |-IfStmt 0x13c82b000 <line:11:3, line:12:9>
    |   | |-BinaryOperator 0x13c82afc8 <line:11:7, col:11> 'int' contains-errors '>'
    |   | | |-ImplicitCastExpr 0x13c82af98 <col:7> 'unsigned int' contains-errors <LValueToRValue>
    |   | | | `-DeclRefExpr 0x13c82af58 <col:7> 'unsigned int' contains-errors lvalue Var 0x13c82ae08 'c' 'unsigned int'
    |   | | `-ImplicitCastExpr 0x13c82afb0 <col:11> 'unsigned int' <IntegralCast>
    |   | |   `-IntegerLiteral 0x13c82af78 <col:11> 'int' 9
    |   | `-GotoStmt 0x13c82afe8 <line:12:4, col:9> 'out' 0x13c82acf0
    |   |-IfStmt 0x13c82b198 <line:13:3, line:14:9>
    |   | |-BinaryOperator 0x13c82b160 <line:13:7, col:20> 'int' '>='
    |   | | |-ImplicitCastExpr 0x13c82b148 <col:7> 'unsigned int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x13c82b020 <col:7> 'unsigned int' lvalue Var 0x13c82aae8 'n' 'unsigned int'
    |   | | `-BinaryOperator 0x13c82b128 <col:12, col:20> 'unsigned int' '/'
    |   | |   |-ParenExpr 0x13c82b0d0 <col:12, col:18> 'unsigned int'
    |   | |   | `-BinaryOperator 0x13c82b0b0 <col:13, col:17> 'unsigned int' '-'
    |   | |   |   |-UnaryOperator 0x13c82b060 <col:13, col:14> 'unsigned int' prefix '~' cannot overflow
    |   | |   |   | `-IntegerLiteral 0x13c82b040 <col:14> 'unsigned int' 0
    |   | |   |   `-ImplicitCastExpr 0x13c82b098 <col:17> 'unsigned int' <IntegralCast>
    |   | |   |     `-IntegerLiteral 0x13c82b078 <col:17> 'int' 9
    |   | |   `-ImplicitCastExpr 0x13c82b110 <col:20> 'unsigned int' <IntegralCast>
    |   | |     `-IntegerLiteral 0x13c82b0f0 <col:20> 'int' 10
    |   | `-GotoStmt 0x13c82b180 <line:14:4, col:9> 'out' 0x13c82acf0
    |   |-CompoundAssignOperator 0x13c82b210 <line:15:3, col:8> 'unsigned int' '*=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    |   | |-DeclRefExpr 0x13c82b1b8 <col:3> 'unsigned int' lvalue Var 0x13c82aae8 'n' 'unsigned int'
    |   | `-ImplicitCastExpr 0x13c82b1f8 <col:8> 'unsigned int' <IntegralCast>
    |   |   `-IntegerLiteral 0x13c82b1d8 <col:8> 'int' 10
    |   `-CompoundAssignOperator 0x13c82b298 <line:16:3, col:8> 'unsigned int' contains-errors '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    |     |-DeclRefExpr 0x13c82b240 <col:3> 'unsigned int' lvalue Var 0x13c82aae8 'n' 'unsigned int'
    |     `-ImplicitCastExpr 0x13c82b280 <col:8> 'unsigned int' contains-errors <LValueToRValue>
    |       `-DeclRefExpr 0x13c82b260 <col:8> 'unsigned int' contains-errors lvalue Var 0x13c82ae08 'c' 'unsigned int'
    |-ReturnStmt 0x13c82b358 <line:18:2, col:9>
    | `-ImplicitCastExpr 0x13c82b340 <col:9> 'unsigned int' <LValueToRValue>
    |   `-DeclRefExpr 0x13c82b320 <col:9> 'unsigned int' lvalue Var 0x13c82aae8 'n' 'unsigned int'
    `-LabelStmt 0x13c82b3b0 <line:19:1, line:20:10> 'out'
      `-ReturnStmt 0x13c82b3a0 <col:2, col:10>
        `-UnaryOperator 0x13c82b388 <col:9, col:10> 'unsigned int' prefix '~' cannot overflow
          `-IntegerLiteral 0x13c82b368 <col:10> 'unsigned int' 0
