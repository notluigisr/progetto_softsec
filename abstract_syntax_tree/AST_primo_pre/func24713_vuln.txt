`-FunctionDecl 0x12f030a38  line:1:1 SPL_METHOD 'int (int, int)'
  |-ParmVarDecl 0x12f030958 <col:12> col:12 SplDoublyLinkedList 'int'
  |-ParmVarDecl 0x12f0308d8 <col:33> col:33 unserialize 'int'
  `-CompoundStmt 0x12f04f910 <line:2:1, line:55:1>
    |-DeclStmt 0x12f030c30 <line:5:2, col:11>
    | `-VarDecl 0x12f030bc8 <col:2, col:8> col:8 used buf 'char *'
    |-DeclStmt 0x12f030cc8 <line:6:2, col:13>
    | `-VarDecl 0x12f030c60 <col:2, col:6> col:6 used buf_len 'int'
    |-DeclStmt 0x12f030e28 <line:7:2, col:28>
    | |-VarDecl 0x12f030d28 <col:2, col:23> col:23 used p 'const unsigned char *'
    | `-VarDecl 0x12f030da8 <col:2, col:27> col:27 used s 'const unsigned char *'
    |-IfStmt 0x12f04cda8 <line:10:2, line:12:2>
    | |-RecoveryExpr 0x12f04cd60 <line:10:6, col:81> '_Bool' contains-errors
    | `-CompoundStmt 0x12f04cd90 <col:90, line:12:2>
    |   `-ReturnStmt 0x12f04cd80 <line:11:3>
    |-IfStmt 0x12f04cfa0 <line:14:2, line:17:2>
    | |-BinaryOperator 0x12f04ce20 <line:14:6, col:17> 'int' '=='
    | | |-ImplicitCastExpr 0x12f04ce08 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x12f04cdc8 <col:6> 'int' lvalue Var 0x12f030c60 'buf_len' 'int'
    | | `-IntegerLiteral 0x12f04cde8 <col:17> 'int' 0
    | `-CompoundStmt 0x12f04cf88 <col:20, line:17:2>
    |   `-ReturnStmt 0x12f04cf78 <line:16:3>
    |-BinaryOperator 0x12f04d098 <line:19:2, col:32> 'const unsigned char *' '='
    | |-DeclRefExpr 0x12f04cfc0 <col:2> 'const unsigned char *' lvalue Var 0x12f030da8 's' 'const unsigned char *'
    | `-BinaryOperator 0x12f04d078 <col:6, col:32> 'const unsigned char *' '='
    |   |-DeclRefExpr 0x12f04cfe0 <col:6> 'const unsigned char *' lvalue Var 0x12f030d28 'p' 'const unsigned char *'
    |   `-CStyleCastExpr 0x12f04d050 <col:10, col:32> 'const unsigned char *' <BitCast>
    |     `-ImplicitCastExpr 0x12f04d038 <col:32> 'char *' <LValueToRValue> part_of_explicit_cast
    |       `-DeclRefExpr 0x12f04d000 <col:32> 'char *' lvalue Var 0x12f030bc8 'buf' 'char *'
    |-IfStmt 0x12f04d758 <line:24:2, line:27:2>
    | |-RecoveryExpr 0x12f04d5b8 <line:24:6, col:95> '_Bool' contains-errors
    | `-CompoundStmt 0x12f04d740 <col:104, line:27:2>
    |   `-GotoStmt 0x12f04d728 <line:26:3, col:8> 'error' 0x12f04d6d8
    |-WhileStmt 0x12f04f640 <line:32:2, line:41:2>
    | |-BinaryOperator 0x12f04d930 <line:32:8, col:14> 'int' '=='
    | | |-ImplicitCastExpr 0x12f04d918 <col:8, col:9> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x12f04d900 <col:8, col:9> 'unsigned char' <LValueToRValue>
    | | |   `-UnaryOperator 0x12f04d8d0 <col:8, col:9> 'const unsigned char' lvalue prefix '*' cannot overflow
    | | |     `-ImplicitCastExpr 0x12f04d8b8 <col:9> 'const unsigned char *' <LValueToRValue>
    | | |       `-DeclRefExpr 0x12f04d898 <col:9> 'const unsigned char *' lvalue Var 0x12f030d28 'p' 'const unsigned char *'
    | | `-CharacterLiteral 0x12f04d8e8 <col:14> 'int' 58
    | `-CompoundStmt 0x12f04f620 <col:19, line:41:2>
    |   |-UnaryOperator 0x12f04d970 <line:33:3, col:5> 'const unsigned char *' prefix '++'
    |   | `-DeclRefExpr 0x12f04d950 <col:5> 'const unsigned char *' lvalue Var 0x12f030d28 'p' 'const unsigned char *'
    |   `-IfStmt 0x12f04db00 <line:35:3, line:38:3>
    |     |-RecoveryExpr 0x12f04da90 <line:35:7, col:71> '_Bool' contains-errors
    |     `-CompoundStmt 0x12f04dae8 <col:74, line:38:3>
    |       `-GotoStmt 0x12f04dad0 <line:37:4, col:9> 'error' 0x12f04d6d8
    |-IfStmt 0x12f04f748 <line:43:2, line:45:2>
    | |-BinaryOperator 0x12f04f6f8 <line:43:6, col:12> 'int' '!='
    | | |-ImplicitCastExpr 0x12f04f6e0 <col:6, col:7> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x12f04f6c8 <col:6, col:7> 'unsigned char' <LValueToRValue>
    | | |   `-UnaryOperator 0x12f04f698 <col:6, col:7> 'const unsigned char' lvalue prefix '*' cannot overflow
    | | |     `-ImplicitCastExpr 0x12f04f680 <col:7> 'const unsigned char *' <LValueToRValue>
    | | |       `-DeclRefExpr 0x12f04f660 <col:7> 'const unsigned char *' lvalue Var 0x12f030d28 'p' 'const unsigned char *'
    | | `-CharacterLiteral 0x12f04f6b0 <col:12> 'int' 0
    | `-CompoundStmt 0x12f04f730 <col:18, line:45:2>
    |   `-GotoStmt 0x12f04f718 <line:44:3, col:8> 'error' 0x12f04d6d8
    |-ReturnStmt 0x12f04f868 <line:48:2>
    |-LabelStmt 0x12f04f8a0 <line:50:1, col:6> 'error'
    | `-NullStmt 0x12f04f898 <col:6>
    `-ReturnStmt 0x12f04f900 <line:53:2>
