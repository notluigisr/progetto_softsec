`-FunctionDecl 0x133928198  line:1:1 spop 'int (void)'
  `-CompoundStmt 0x133941450 <line:2:1, line:15:1>
    |-DeclStmt 0x1339283a8 <line:3:5, col:29>
    | `-VarDecl 0x1339282e0 <col:5, col:27> col:17 used dummy 'char[1]' static cinit
    |   `-StringLiteral 0x133928390 <col:27> 'char[1]' ""
    |-DeclStmt 0x133928478 <line:4:5, col:25>
    | `-VarDecl 0x1339283d8 <col:5, col:20> col:11 used result 'char *' cinit
    |   `-ImplicitCastExpr 0x133928460 <col:20> 'char *' <ArrayToPointerDecay>
    |     `-DeclRefExpr 0x133928440 <col:20> 'char[1]' lvalue Var 0x1339282e0 'dummy' 'char[1]'
    |-IfStmt 0x133940f98 <line:5:5, line:13:5> has_else
    | |-BinaryOperator 0x1339286a8 <line:5:9, col:26> 'int' contains-errors '>'
    | | |-CallExpr 0x133928680 <col:9, col:22> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x1339285c0 <col:9> 'int ()' Function 0x133928508 'TPS' 'int ()'
    | | | `-RecoveryExpr 0x133928660 <col:13> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x133928620 <col:26> 'int' 0
    | |-CompoundStmt 0x133940c40 <col:29, line:10:5>
    | | `-UnaryOperator 0x133928788 <line:6:2, col:16> '<dependent type>' contains-errors postfix '--' cannot overflow
    | |   `-CallExpr 0x133928760 <col:2, col:15> '<dependent type>' contains-errors
    | |     |-DeclRefExpr 0x1339286c8 <col:2> 'int ()' Function 0x133928508 'TPS' 'int ()'
    | |     `-RecoveryExpr 0x133928740 <col:6> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x133940f88 <line:10:12, line:13:5>
    `-ReturnStmt 0x133941440 <line:14:5, col:12>
      `-ImplicitCastExpr 0x133941000 <col:12> 'int' <PointerToIntegral>
        `-ImplicitCastExpr 0x133940fe8 <col:12> 'char *' <LValueToRValue>
          `-DeclRefExpr 0x133940fc8 <col:12> 'char *' lvalue Var 0x1339283d8 'result' 'char *'
