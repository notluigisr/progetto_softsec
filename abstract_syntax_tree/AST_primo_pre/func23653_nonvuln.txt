`-FunctionDecl 0x15000df18  line:1:5 invalid luaV_flttointeger 'int (int, int *, int)'
  |-ParmVarDecl 0x15000dcf0 <col:24, col:35> col:35 invalid n 'int'
  |-ParmVarDecl 0x15000dda8 <col:38, col:51> col:51 invalid p 'int *'
  |-ParmVarDecl 0x15000de28 <col:54, col:61> col:61 invalid mode 'int'
  `-CompoundStmt 0x1500274b0 <col:67, line:9:1>
    |-IfStmt 0x15000e240 <line:3:3, line:7:3>
    | |-BinaryOperator 0x15000e050 <line:3:7, col:12> 'int' contains-errors '!='
    | | |-RecoveryExpr 0x15000dfd8 <col:7> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x15000e030 <col:12> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x15000e228 <col:15, line:7:3>
    |   `-IfStmt 0x15000e1f8 <line:4:5, line:5:10> has_else
    |     |-BinaryOperator 0x15000e0e8 <line:4:9, col:17> 'int' contains-errors '=='
    |     | |-RecoveryExpr 0x15000e070 <col:9> '<dependent type>' contains-errors lvalue
    |     | `-RecoveryExpr 0x15000e0c8 <col:17> '<dependent type>' contains-errors lvalue
    |     |-ReturnStmt 0x15000e128 <col:24, col:31>
    |     | `-IntegerLiteral 0x15000e108 <col:31> 'int' 0
    |     `-NullStmt 0x15000e1f0 <line:5:10>
    `-ReturnStmt 0x1500274a0 <line:8:3, col:34>
      `-CallExpr 0x150027470 <col:10, col:34> '<dependent type>' contains-errors
        |-DeclRefExpr 0x15000e3c0 <col:10> 'int ()' Function 0x15000e308 'lua_numbertointeger' 'int ()'
        |-RecoveryExpr 0x150027450 <col:30> '<dependent type>' contains-errors lvalue
        `-RecoveryExpr 0x150027400 <col:33> '<dependent type>' contains-errors lvalue
