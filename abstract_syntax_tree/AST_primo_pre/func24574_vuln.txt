`-FunctionDecl 0x145128288  line:1:12 invalid php_snmp_write_oid_output_format 'int (int *, int *)' static
  |-ParmVarDecl 0x145128128 <col:45, col:62> col:62 referenced invalid snmp_object 'int *'
  |-ParmVarDecl 0x1451281a8 <col:75, col:81> col:81 referenced invalid newval 'int *'
  `-CompoundStmt 0x1458092c0 <line:2:1, line:31:1>
    |-DeclStmt 0x1451283f8 <line:4:2, col:19>
    | `-VarDecl 0x145128358 <col:2, col:12> col:6 used ret 'int' cinit
    |   `-RecoveryExpr 0x1451283d8 <col:12> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x145808b30 <line:5:2, line:10:2>
    | |-BinaryOperator 0x145128630 <line:5:6, col:26> 'int' contains-errors '!='
    | | |-CallExpr 0x1451285b0 <col:6, col:21> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x145128570 <col:6> 'int ()' Function 0x1451284b8 'Z_TYPE_P' 'int ()'
    | | | `-RecoveryExpr 0x145128590 <col:15> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x145128610 <col:26> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x145808b08 <col:35, line:10:2>
    |   |-CallExpr 0x145808838 <line:7:3, col:23> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x145128780 <col:3> 'int ()' Function 0x1451286c8 'zval_copy_ctor' 'int ()'
    |   | `-UnaryOperator 0x145808820 <col:18, col:19> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   |   `-RecoveryExpr 0x145808800 <col:19> '<dependent type>' contains-errors lvalue
    |   |-CallExpr 0x1458089f0 <line:8:3, col:24> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x145808940 <col:3> 'int ()' Function 0x145808888 'convert_to_long' 'int ()'
    |   | `-UnaryOperator 0x1458089d8 <col:19, col:20> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   |   `-RecoveryExpr 0x1458089b8 <col:20> '<dependent type>' contains-errors lvalue
    |   `-BinaryOperator 0x145808ae8 <line:9:3, col:13> '<dependent type>' contains-errors '='
    |     |-RecoveryExpr 0x145808a38 <col:3> '<dependent type>' contains-errors lvalue
    |     | `-DeclRefExpr 0x145808a18 <col:3> 'int *' lvalue ParmVar 0x1451281a8 'newval' 'int *'
    |     `-UnaryOperator 0x145808ad0 <col:12, col:13> '<dependent type>' contains-errors prefix '&' cannot overflow
    |       `-RecoveryExpr 0x145808ab0 <col:13> '<dependent type>' contains-errors lvalue
    |-SwitchStmt 0x145808c98 <line:12:2, line:25:2>
    | |-CallExpr 0x145808c70 <line:12:9, col:24> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x145808c30 <col:9> 'int ()' Function 0x145808b78 'Z_LVAL_P' 'int ()'
    | | `-RecoveryExpr 0x145808c50 <col:18> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x145809088 <col:27, line:25:2>
    |   |-BinaryOperator 0x145808e48 <line:19:4, col:52> '<dependent type>' contains-errors '='
    |   | |-CXXDependentScopeMemberExpr 0x145808d98 <col:4, col:17> '<dependent type>' contains-errors lvalue ->oid_output_format
    |   | | `-RecoveryExpr 0x145808d70 <col:4> '<dependent type>' contains-errors lvalue
    |   | |   `-DeclRefExpr 0x145808d50 <col:4> 'int *' lvalue ParmVar 0x145128128 'snmp_object' 'int *'
    |   | `-CallExpr 0x145808e20 <col:37, col:52> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x145808de0 <col:37> 'int ()' Function 0x145808b78 'Z_LVAL_P' 'int ()'
    |   |   `-RecoveryExpr 0x145808e00 <col:46> '<dependent type>' contains-errors lvalue
    |   |-BreakStmt 0x145808e68 <line:20:4>
    |   |-DefaultStmt 0x145809040 <line:21:3, col:10>
    |   | `-NullStmt 0x145809038 <col:10>
    |   `-BreakStmt 0x145809080 <line:24:4>
    |-IfStmt 0x145809258 <line:27:2, line:29:2>
    | |-RecoveryExpr 0x1458090d8 <line:27:6, col:17> '_Bool' contains-errors
    | `-CompoundStmt 0x145809240 <col:23, line:29:2>
    |   `-CallExpr 0x145809218 <line:28:3, col:19> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x1458091d8 <col:3> 'int ()' Function 0x145809120 'zval_dtor' 'int ()'
    |     `-RecoveryExpr 0x1458091f8 <col:13> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x1458092b0 <line:30:2, col:9>
      `-ImplicitCastExpr 0x145809298 <col:9> 'int' contains-errors <LValueToRValue>
        `-DeclRefExpr 0x145809278 <col:9> 'int' contains-errors lvalue Var 0x145128358 'ret' 'int'
