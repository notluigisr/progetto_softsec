`-FunctionDecl 0x14700ddf8  line:1:1 invalid processBatchMultiRuleset 'int (int *)'
  |-ParmVarDecl 0x14700dd28 <col:26, col:35> col:35 referenced invalid pBatch 'int *'
  `-CompoundStmt 0x1470290a8 <line:2:1, line:40:1>
    |-DeclStmt 0x14700df40 <line:5:2, col:7>
    | `-VarDecl 0x14700ded8 <col:2, col:6> col:6 used i 'int'
    |-DeclStmt 0x14700dfd8 <line:6:2, col:12>
    | `-VarDecl 0x14700df70 <col:2, col:6> col:6 used iStart 'int'
    |-DeclStmt 0x14700e070 <line:7:2, col:10>
    | `-VarDecl 0x14700e008 <col:2, col:6> col:6 used iNew 'int'
    |-CallExpr 0x147027468 <line:10:2, col:50> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x14700e1e0 <col:2> 'int ()' Function 0x14700e128 'CHKiRet' 'int ()'
    | `-CallExpr 0x147027438 <col:10, col:49> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x14700e2e0 <col:10> 'int ()' Function 0x14700e228 'batchInit' 'int ()'
    |   |-UnaryOperator 0x147027420 <col:20, col:21> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | `-RecoveryExpr 0x147027400 <col:21> '<dependent type>' contains-errors lvalue
    |   `-CXXDependentScopeMemberExpr 0x14700e350 <col:36, col:44> '<dependent type>' contains-errors lvalue ->nElem
    |     `-RecoveryExpr 0x14700e330 <col:36> '<dependent type>' contains-errors lvalue
    |-WhileStmt 0x147028f10 <line:13:2, line:35:2>
    | |-IntegerLiteral 0x1470274f8 <line:13:8> 'int' 1
    | `-CompoundStmt 0x147028ee8 <col:11, line:35:2>
    |   |-ForStmt 0x147027968 <line:15:3, line:16:4>
    |   | |-BinaryOperator 0x147027558 <line:15:7, col:16> 'int' '='
    |   | | |-DeclRefExpr 0x147027518 <col:7> 'int' lvalue Var 0x14700df70 'iStart' 'int'
    |   | | `-IntegerLiteral 0x147027538 <col:16> 'int' 0
    |   | |-<<<NULL>>>
    |   | |-BinaryOperator 0x147027908 <col:20, col:77> 'int' contains-errors '&&'
    |   | | |-BinaryOperator 0x147027600 <col:20, col:37> 'int' contains-errors '<'
    |   | | | |-DeclRefExpr 0x147027578 <col:20> 'int' lvalue Var 0x14700df70 'iStart' 'int'
    |   | | | `-CXXDependentScopeMemberExpr 0x1470275b8 <col:29, col:37> '<dependent type>' contains-errors lvalue ->nElem
    |   | | |   `-RecoveryExpr 0x147027598 <col:29> '<dependent type>' contains-errors lvalue
    |   | | `-BinaryOperator 0x1470278e8 <col:46, col:77> 'int' contains-errors '=='
    |   | |   |-CXXDependentScopeMemberExpr 0x147027880 <col:46, col:68> '<dependent type>' contains-errors lvalue .state
    |   | |   | `-ArraySubscriptExpr 0x147027860 <col:46, col:66> '<dependent type>' contains-errors lvalue
    |   | |   |   |-ImplicitCastExpr 0x147027830 <col:46, col:54> '<dependent type>' contains-errors <LValueToRValue>
    |   | |   |   | `-CXXDependentScopeMemberExpr 0x147027640 <col:46, col:54> '<dependent type>' contains-errors lvalue ->pElem
    |   | |   |   |   `-RecoveryExpr 0x147027620 <col:46> '<dependent type>' contains-errors lvalue
    |   | |   |   `-ImplicitCastExpr 0x147027848 <col:60> 'int' <LValueToRValue>
    |   | |   |     `-DeclRefExpr 0x147027688 <col:60> 'int' lvalue Var 0x14700df70 'iStart' 'int'
    |   | |   `-RecoveryExpr 0x1470278c8 <col:77> '<dependent type>' contains-errors lvalue
    |   | |-UnaryOperator 0x147027948 <col:96, col:98> 'int' prefix '++'
    |   | | `-DeclRefExpr 0x147027928 <col:98> 'int' lvalue Var 0x14700df70 'iStart' 'int'
    |   | `-NullStmt 0x147027960 <line:16:4>
    |   |-BinaryOperator 0x147027bf8 <line:23:3, col:10> 'int' '='
    |   | |-DeclRefExpr 0x147027bb8 <col:3> 'int' lvalue Var 0x14700e008 'iNew' 'int'
    |   | `-IntegerLiteral 0x147027bd8 <col:10> 'int' 0
    |   `-ForStmt 0x147028c70 <line:24:3, line:30:3>
    |     |-BinaryOperator 0x147027c70 <line:24:7, col:11> 'int' '='
    |     | |-DeclRefExpr 0x147027c18 <col:7> 'int' lvalue Var 0x14700ded8 'i' 'int'
    |     | `-ImplicitCastExpr 0x147027c58 <col:11> 'int' <LValueToRValue>
    |     |   `-DeclRefExpr 0x147027c38 <col:11> 'int' lvalue Var 0x14700df70 'iStart' 'int'
    |     |-<<<NULL>>>
    |     |-BinaryOperator 0x147027d18 <col:20, col:32> 'int' contains-errors '<'
    |     | |-DeclRefExpr 0x147027c90 <col:20> 'int' lvalue Var 0x14700ded8 'i' 'int'
    |     | `-CXXDependentScopeMemberExpr 0x147027cd0 <col:24, col:32> '<dependent type>' contains-errors lvalue ->nElem
    |     |   `-RecoveryExpr 0x147027cb0 <col:24> '<dependent type>' contains-errors lvalue
    |     |-UnaryOperator 0x147027d58 <col:40, col:42> 'int' prefix '++'
    |     | `-DeclRefExpr 0x147027d38 <col:42> 'int' lvalue Var 0x14700ded8 'i' 'int'
    |     `-CompoundStmt 0x147028c58 <col:45, line:30:3>
    |       `-IfStmt 0x147028c38 <line:25:4, line:29:4>
    |         |-BinaryOperator 0x147027e58 <line:25:7, col:41> 'int' contains-errors '=='
    |         | |-CallExpr 0x147027dd0 <col:7, col:36> '<dependent type>' contains-errors
    |         | | |-DeclRefExpr 0x147027d70 <col:7> 'int ()' Function 0x147027a70 'batchElemGetRuleset' 'int ()'
    |         | | |-RecoveryExpr 0x147027d90 <col:27> '<dependent type>' contains-errors lvalue
    |         | | `-DeclRefExpr 0x147027db0 <col:35> 'int' lvalue Var 0x14700ded8 'i' 'int'
    |         | `-RecoveryExpr 0x147027e38 <col:41> '<dependent type>' contains-errors lvalue
    |         `-CompoundStmt 0x147028c20 <col:54, line:29:4>
    |           `-BinaryOperator 0x147028c00 <line:28:5, col:30> '<dependent type>' contains-errors '='
    |             |-CXXDependentScopeMemberExpr 0x147028388 <col:5, col:22> '<dependent type>' contains-errors lvalue .state
    |             | `-ArraySubscriptExpr 0x147028368 <col:5, col:20> '<dependent type>' contains-errors lvalue
    |             |   |-ImplicitCastExpr 0x147028338 <col:5, col:13> '<dependent type>' contains-errors <LValueToRValue>
    |             |   | `-CXXDependentScopeMemberExpr 0x147028168 <col:5, col:13> '<dependent type>' contains-errors lvalue ->pElem
    |             |   |   `-RecoveryExpr 0x147028140 <col:5> '<dependent type>' contains-errors lvalue
    |             |   |     `-DeclRefExpr 0x147028120 <col:5> 'int *' lvalue ParmVar 0x14700dd28 'pBatch' 'int *'
    |             |   `-ImplicitCastExpr 0x147028350 <col:19> 'int' <LValueToRValue>
    |             |     `-DeclRefExpr 0x1470281b0 <col:19> 'int' lvalue Var 0x14700ded8 'i' 'int'
    |             `-RecoveryExpr 0x1470283d0 <col:30> '<dependent type>' contains-errors lvalue
    `-LabelStmt 0x147029088 <line:38:1, col:12> 'finalize_it'
      `-NullStmt 0x147029030 <col:12>
