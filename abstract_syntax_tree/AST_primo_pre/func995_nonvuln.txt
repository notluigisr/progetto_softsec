`-FunctionDecl 0x14e80de88  line:1:1 invalid bit_write_BLL 'int (int *, int)'
  |-ParmVarDecl 0x14e80dd28 <col:16, col:27> col:27 invalid dat 'int *'
  |-ParmVarDecl 0x14e80dda8 <col:32, col:44> col:44 referenced invalid value 'int'
  `-CompoundStmt 0x14e827fd8 <line:2:1, line:23:1>
    |-DeclStmt 0x14e80dfc0 <line:4:3, col:8>
    | `-VarDecl 0x14e80df58 <col:3, col:7> col:7 used i 'int'
    |-DeclStmt 0x14e80e078 <line:5:3, col:14>
    | `-VarDecl 0x14e80dff0 <col:3, col:13> col:7 used len 'int' cinit
    |   `-IntegerLiteral 0x14e80e058 <col:13> 'int' 0
    |-ForStmt 0x14e80e3c8 <line:7:3, line:14:5>
    | |-BinaryOperator 0x14e80e0d0 <line:7:8, col:12> 'int' '='
    | | |-DeclRefExpr 0x14e80e090 <col:8> 'int' lvalue Var 0x14e80df58 'i' 'int'
    | | `-IntegerLiteral 0x14e80e0b0 <col:12> 'int' 16
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x14e80e110 <col:16> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x14e80e0f0 <col:16> 'int' lvalue Var 0x14e80df58 'i' 'int'
    | |-BinaryOperator 0x14e80e238 <col:19, col:33> '<dependent type>' contains-errors ','
    | | |-UnaryOperator 0x14e80e148 <col:19, col:20> 'int' postfix '--'
    | | | `-DeclRefExpr 0x14e80e128 <col:19> 'int' lvalue Var 0x14e80df58 'i' 'int'
    | | `-CompoundAssignOperator 0x14e80e208 <col:24, col:33> '<dependent type>' contains-errors '>>=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    | |   |-RecoveryExpr 0x14e80e1e8 <col:24> '<dependent type>' contains-errors lvalue
    | |   `-IntegerLiteral 0x14e80e178 <col:33> 'int' 8
    | `-CompoundStmt 0x14e80e3b0 <line:8:5, line:14:5>
    |   `-IfStmt 0x14e80e390 <line:9:7, line:13:9>
    |     |-BinaryOperator 0x14e80e2d0 <line:9:11, col:19> '<dependent type>' contains-errors '&'
    |     | |-RecoveryExpr 0x14e80e258 <col:11> '<dependent type>' contains-errors lvalue
    |     | `-RecoveryExpr 0x14e80e2b0 <col:19> '<dependent type>' contains-errors lvalue
    |     `-CompoundStmt 0x14e80e370 <line:10:9, line:13:9>
    |       |-BinaryOperator 0x14e80e348 <line:11:11, col:17> 'int' '='
    |       | |-DeclRefExpr 0x14e80e2f0 <col:11> 'int' lvalue Var 0x14e80dff0 'len' 'int'
    |       | `-ImplicitCastExpr 0x14e80e330 <col:17> 'int' <LValueToRValue>
    |       |   `-DeclRefExpr 0x14e80e310 <col:17> 'int' lvalue Var 0x14e80df58 'i' 'int'
    |       `-BreakStmt 0x14e80e368 <line:12:11>
    |-CallExpr 0x14e827a18 <line:15:3, col:30> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x14e827960 <col:3> 'int ()' Function 0x14e8278a8 'bit_write_BB' 'int ()'
    | |-RecoveryExpr 0x14e827980 <col:17> '<dependent type>' contains-errors lvalue
    | `-BinaryOperator 0x14e8279f8 <col:22, col:29> 'int' '<<'
    |   |-ImplicitCastExpr 0x14e8279e0 <col:22> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x14e8279a0 <col:22> 'int' lvalue Var 0x14e80dff0 'len' 'int'
    |   `-IntegerLiteral 0x14e8279c0 <col:29> 'int' 2
    |-CallExpr 0x14e827be0 <line:16:3, col:28> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x14e827b28 <col:3> 'int ()' Function 0x14e827a70 'bit_write_B' 'int ()'
    | |-RecoveryExpr 0x14e827b48 <col:16> '<dependent type>' contains-errors lvalue
    | `-BinaryOperator 0x14e827bc0 <col:21, col:27> 'int' '&'
    |   |-ImplicitCastExpr 0x14e827ba8 <col:21> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x14e827b68 <col:21> 'int' lvalue Var 0x14e80dff0 'len' 'int'
    |   `-IntegerLiteral 0x14e827b88 <col:27> 'int' 1
    `-ForStmt 0x14e827fa0 <line:17:3, line:22:5>
      |-BinaryOperator 0x14e827c50 <line:17:8, col:12> 'int' '='
      | |-DeclRefExpr 0x14e827c10 <col:8> 'int' lvalue Var 0x14e80df58 'i' 'int'
      | `-IntegerLiteral 0x14e827c30 <col:12> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x14e827ce0 <col:15, col:19> 'int' '<'
      | |-ImplicitCastExpr 0x14e827cb0 <col:15> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x14e827c70 <col:15> 'int' lvalue Var 0x14e80df58 'i' 'int'
      | `-ImplicitCastExpr 0x14e827cc8 <col:19> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x14e827c90 <col:19> 'int' lvalue Var 0x14e80dff0 'len' 'int'
      |-UnaryOperator 0x14e827d20 <col:24, col:25> 'int' postfix '++'
      | `-DeclRefExpr 0x14e827d00 <col:24> 'int' lvalue Var 0x14e80df58 'i' 'int'
      `-CompoundStmt 0x14e827f80 <line:18:5, line:22:5>
        |-CallExpr 0x14e827eb8 <line:20:7, col:38> '<dependent type>' contains-errors
        | |-DeclRefExpr 0x14e827e18 <col:7> 'int ()' Function 0x14e827d60 'bit_write_RC' 'int ()'
        | |-RecoveryExpr 0x14e827e38 <col:21> '<dependent type>' contains-errors lvalue
        | `-BinaryOperator 0x14e827e98 <col:26, col:34> '<dependent type>' contains-errors '&'
        |   |-RecoveryExpr 0x14e827e58 <col:26> '<dependent type>' contains-errors lvalue
        |   `-IntegerLiteral 0x14e827e78 <col:34> 'int' 255
        `-CompoundAssignOperator 0x14e827f50 <line:21:7, col:17> '<dependent type>' contains-errors '>>=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
          |-RecoveryExpr 0x14e827f08 <col:7> '<dependent type>' contains-errors lvalue
          | `-DeclRefExpr 0x14e827ee8 <col:7> 'int' lvalue ParmVar 0x14e80dda8 'value' 'int'
          `-IntegerLiteral 0x14e827f30 <col:17> 'int' 8
