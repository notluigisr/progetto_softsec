`-FunctionDecl 0x14c80ddc0  line:1:6 invalid set_wild_chars 'void (int)'
  |-ParmVarDecl 0x14c80dcf0 <col:22, col:30> col:30 invalid set 'int'
  `-CompoundStmt 0x14c828158 <line:2:1, line:22:1>
    |-DeclStmt 0x14c80e030 <line:3:3, col:47>
    | |-VarDecl 0x14c80de80 <col:3, col:25> col:15 used old_many 'char' static cinit
    | | `-ImplicitCastExpr 0x14c80df08 <col:25> 'char' <IntegralCast>
    | |   `-IntegerLiteral 0x14c80dee8 <col:25> 'int' 0
    | |-VarDecl 0x14c80df30 <col:3, col:28> col:28 used old_one 'char' static
    | `-VarDecl 0x14c80dfa8 <col:3, col:37> col:37 used old_prefix 'char' static
    `-IfStmt 0x14c828128 <line:5:3, line:21:3> has_else
      |-RecoveryExpr 0x14c80e048 <line:5:7> '<dependent type>' contains-errors lvalue
      |-CompoundStmt 0x14c827ec8 <line:6:3, line:14:3>
      | |-IfStmt 0x14c80e138 <line:7:5, col:27>
      | | |-BinaryOperator 0x14c80e108 <col:9, col:22> 'int' '=='
      | | | |-ImplicitCastExpr 0x14c80e0f0 <col:9> 'int' <IntegralCast>
      | | | | `-ImplicitCastExpr 0x14c80e0d8 <col:9> 'char' <LValueToRValue>
      | | | |   `-DeclRefExpr 0x14c80e0b8 <col:9> 'char' lvalue Var 0x14c80de80 'old_many' 'char'
      | | | `-CharacterLiteral 0x14c80e080 <col:22> 'int' 42
      | | `-ReturnStmt 0x14c80e128 <col:27>
      | |-BinaryOperator 0x14c80e1e8 <line:8:5, col:15> 'char' '='
      | | |-DeclRefExpr 0x14c80e158 <col:5> 'char' lvalue Var 0x14c80de80 'old_many' 'char'
      | | `-ImplicitCastExpr 0x14c80e1d0 <col:15> 'char' <LValueToRValue>
      | |   `-DeclRefExpr 0x14c80e1b0 <col:15> 'char' lvalue Var 0x14c80de80 'old_many' 'char'
      | |-BinaryOperator 0x14c80e298 <line:9:5, col:14> 'char' '='
      | | |-DeclRefExpr 0x14c80e208 <col:5> 'char' lvalue Var 0x14c80df30 'old_one' 'char'
      | | `-ImplicitCastExpr 0x14c80e280 <col:14> 'char' <LValueToRValue>
      | |   `-DeclRefExpr 0x14c80e260 <col:14> 'char' lvalue Var 0x14c80df30 'old_one' 'char'
      | |-BinaryOperator 0x14c80e348 <line:10:5, col:17> 'char' '='
      | | |-DeclRefExpr 0x14c80e2b8 <col:5> 'char' lvalue Var 0x14c80dfa8 'old_prefix' 'char'
      | | `-ImplicitCastExpr 0x14c80e330 <col:17> 'char' <LValueToRValue>
      | |   `-DeclRefExpr 0x14c80e310 <col:17> 'char' lvalue Var 0x14c80dfa8 'old_prefix' 'char'
      | |-BinaryOperator 0x14c80e3b8 <line:11:5, col:16> 'char' '='
      | | |-DeclRefExpr 0x14c80e368 <col:5> 'char' lvalue Var 0x14c80de80 'old_many' 'char'
      | | `-ImplicitCastExpr 0x14c80e3a0 <col:16> 'char' <IntegralCast>
      | |   `-CharacterLiteral 0x14c80e388 <col:16> 'int' 42
      | |-BinaryOperator 0x14c827e30 <line:12:5, col:15> 'char' '='
      | | |-DeclRefExpr 0x14c80e3d8 <col:5> 'char' lvalue Var 0x14c80df30 'old_one' 'char'
      | | `-ImplicitCastExpr 0x14c827e18 <col:15> 'char' <IntegralCast>
      | |   `-CharacterLiteral 0x14c827e00 <col:15> 'int' 63
      | `-BinaryOperator 0x14c827ea8 <line:13:5, col:18> 'char' '='
      |   |-DeclRefExpr 0x14c827e50 <col:5> 'char' lvalue Var 0x14c80dfa8 'old_prefix' 'char'
      |   `-ImplicitCastExpr 0x14c827e90 <col:18> 'char' <IntegralCast>
      |     `-IntegerLiteral 0x14c827e70 <col:18> 'int' 0
      `-CompoundStmt 0x14c8280f8 <line:16:3, line:21:3>
        |-IfStmt 0x14c827f70 <line:17:5, col:21>
        | |-UnaryOperator 0x14c827f48 <col:9, col:11> 'int' prefix '!' cannot overflow
        | | `-ImplicitCastExpr 0x14c827f30 <col:11> 'char' <LValueToRValue>
        | |   `-DeclRefExpr 0x14c827f10 <col:11> 'char' lvalue Var 0x14c80de80 'old_many' 'char'
        | `-ReturnStmt 0x14c827f60 <col:21>
        |-BinaryOperator 0x14c827fe8 <line:18:5, col:16> 'char' '='
        | |-DeclRefExpr 0x14c827f90 <col:5> 'char' lvalue Var 0x14c80de80 'old_many' 'char'
        | `-ImplicitCastExpr 0x14c827fd0 <col:16> 'char' <LValueToRValue>
        |   `-DeclRefExpr 0x14c827fb0 <col:16> 'char' lvalue Var 0x14c80de80 'old_many' 'char'
        |-BinaryOperator 0x14c828060 <line:19:5, col:15> 'char' '='
        | |-DeclRefExpr 0x14c828008 <col:5> 'char' lvalue Var 0x14c80df30 'old_one' 'char'
        | `-ImplicitCastExpr 0x14c828048 <col:15> 'char' <LValueToRValue>
        |   `-DeclRefExpr 0x14c828028 <col:15> 'char' lvalue Var 0x14c80df30 'old_one' 'char'
        `-BinaryOperator 0x14c8280d8 <line:20:5, col:18> 'char' '='
          |-DeclRefExpr 0x14c828080 <col:5> 'char' lvalue Var 0x14c80dfa8 'old_prefix' 'char'
          `-ImplicitCastExpr 0x14c8280c0 <col:18> 'char' <LValueToRValue>
            `-DeclRefExpr 0x14c8280a0 <col:18> 'char' lvalue Var 0x14c80dfa8 'old_prefix' 'char'
