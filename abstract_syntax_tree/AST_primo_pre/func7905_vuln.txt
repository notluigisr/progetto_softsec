`-FunctionDecl 0x12d1283a8  line:1:5 referenced invalid pgpPrtParams 'int (const int *, int, unsigned int, int *)'
  |-ParmVarDecl 0x12d1280f0 <col:18, col:34> col:34 invalid pkts 'const int *'
  |-ParmVarDecl 0x12d128170 <col:40, col:47> col:47 invalid pktlen 'int'
  |-ParmVarDecl 0x12d1281f0 <col:55, col:68> col:68 used pkttype 'unsigned int'
  |-ParmVarDecl 0x12d1282a8 <line:2:4, col:19> col:19 invalid ret 'int *'
  `-CompoundStmt 0x12d142dc8 <line:3:1, line:38:1>
    |-DeclStmt 0x12d128510 <line:4:5, col:28>
    | `-VarDecl 0x12d128488 <col:5, col:20> col:20 referenced invalid p 'const int *'
    |-DeclStmt 0x12d128608 <line:5:5, col:40>
    | `-VarDecl 0x12d128540 <col:5, col:20> col:20 invalid pend 'const int *'
    |-ImplicitCastExpr 0x12d128668 <line:6:5> '<dependent type>' contains-errors <LValueToRValue>
    | `-RecoveryExpr 0x12d128640 <col:5> '<dependent type>' contains-errors lvalue
    |   `-DeclRefExpr 0x12d128620 <col:5> 'int (const int *, int, unsigned int, int *)' Function 0x12d1283a8 'pgpPrtParams' 'int (const int *, int, unsigned int, int *)'
    |-DeclStmt 0x12d141c38 <line:7:5, col:22>
    | |-RecordDecl 0x12d128698 <col:5, col:12> col:12 struct pgpPkt
    | `-VarDecl 0x12d128798 <col:5, col:19> col:19 invalid pkt 'struct pgpPkt'
    |-DeclStmt 0x12d141d08 <line:8:5, col:16>
    | `-VarDecl 0x12d141c68 <col:5, col:15> col:9 used rc 'int' cinit
    |   `-UnaryOperator 0x12d141cf0 <col:14, col:15> 'int' prefix '-'
    |     `-IntegerLiteral 0x12d141cd0 <col:15> 'int' 1
    |-WhileStmt 0x12d1428f8 <line:10:5, line:28:5>
    | |-BinaryOperator 0x12d141d60 <line:10:12, col:16> 'int' contains-errors '<'
    | | |-RecoveryExpr 0x12d141d20 <col:12> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x12d141d40 <col:16> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x12d1428c0 <col:22, line:28:5>
    |   |-IfStmt 0x12d142018 <line:11:2, line:12:6>
    |   | |-CallExpr 0x12d141fd8 <line:11:6, col:35> '<dependent type>' contains-errors
    |   | | |-DeclRefExpr 0x12d141ee0 <col:6> 'int ()' Function 0x12d141e28 'decodePkt' 'int ()'
    |   | | |-RecoveryExpr 0x12d141f00 <col:16> '<dependent type>' contains-errors lvalue
    |   | | |-ParenExpr 0x12d141f80 <col:19, col:28> '<dependent type>' contains-errors
    |   | | | `-BinaryOperator 0x12d141f60 <col:20, col:27> '<dependent type>' contains-errors '-'
    |   | | |   |-RecoveryExpr 0x12d141f20 <col:20> '<dependent type>' contains-errors lvalue
    |   | | |   `-RecoveryExpr 0x12d141f40 <col:27> '<dependent type>' contains-errors lvalue
    |   | | `-UnaryOperator 0x12d141fc0 <col:31, col:32> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | |   `-RecoveryExpr 0x12d141fa0 <col:32> '<dependent type>' contains-errors lvalue
    |   | `-BreakStmt 0x12d142010 <line:12:6>
    |   |-IfStmt 0x12d1423d8 <line:14:2, line:20:2>
    |   | |-BinaryOperator 0x12d1420c8 <line:14:6, col:14> 'int' contains-errors '=='
    |   | | |-RecoveryExpr 0x12d142088 <col:6> '<dependent type>' contains-errors lvalue
    |   | | `-RecoveryExpr 0x12d1420a8 <col:14> '<dependent type>' contains-errors lvalue
    |   | `-CompoundStmt 0x12d1423c0 <col:20, line:20:2>
    |   |   `-IfStmt 0x12d142390 <line:15:6, line:19:6> has_else
    |   |     |-BinaryOperator 0x12d1421b0 <line:15:10, col:32> 'int' contains-errors '&&'
    |   |     | |-DeclRefExpr 0x12d1420e8 <col:10> 'unsigned int' lvalue ParmVar 0x12d1281f0 'pkttype' 'unsigned int'
    |   |     | `-BinaryOperator 0x12d142190 <col:21, col:32> 'int' contains-errors '!='
    |   |     |   |-CXXDependentScopeMemberExpr 0x12d142128 <col:21, col:25> '<dependent type>' contains-errors lvalue .tag
    |   |     |   | `-RecoveryExpr 0x12d142108 <col:21> '<dependent type>' contains-errors lvalue
    |   |     |   `-DeclRefExpr 0x12d142170 <col:32> 'unsigned int' lvalue ParmVar 0x12d1281f0 'pkttype' 'unsigned int'
    |   |     |-CompoundStmt 0x12d1421d8 <col:41, line:17:6>
    |   |     | `-BreakStmt 0x12d1421d0 <line:16:3>
    |   |     `-CompoundStmt 0x12d142380 <line:17:13, line:19:6>
    |   |-IfStmt 0x12d1425d0 <line:22:2, line:23:6>
    |   | |-CallExpr 0x12d142598 <line:22:6, col:26> '<dependent type>' contains-errors
    |   | | |-DeclRefExpr 0x12d1424d8 <col:6> 'int ()' Function 0x12d142420 'pgpPrtPkt' 'int ()'
    |   | | |-UnaryOperator 0x12d142518 <col:16, col:17> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | | | `-RecoveryExpr 0x12d1424f8 <col:17> '<dependent type>' contains-errors lvalue
    |   | | `-RecoveryExpr 0x12d142578 <col:22> '<dependent type>' contains-errors lvalue
    |   | `-BreakStmt 0x12d1425c8 <line:23:6>
    |   |-CompoundAssignOperator 0x12d1427d0 <line:25:2, col:35> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    |   | |-RecoveryExpr 0x12d142610 <col:2> '<dependent type>' contains-errors lvalue
    |   | | `-DeclRefExpr 0x12d1425f0 <col:2> 'const int *' lvalue Var 0x12d128488 'p' 'const int *'
    |   | `-BinaryOperator 0x12d1427b0 <col:7, col:35> '<dependent type>' contains-errors '+'
    |   |   |-ParenExpr 0x12d142728 <col:7, col:27> '<dependent type>' contains-errors
    |   |   | `-BinaryOperator 0x12d142708 <col:8, col:23> '<dependent type>' contains-errors '-'
    |   |   |   |-CXXDependentScopeMemberExpr 0x12d142658 <col:8, col:12> '<dependent type>' contains-errors lvalue .body
    |   |   |   | `-RecoveryExpr 0x12d142638 <col:8> '<dependent type>' contains-errors lvalue
    |   |   |   `-CXXDependentScopeMemberExpr 0x12d1426c0 <col:19, col:23> '<dependent type>' contains-errors lvalue .head
    |   |   |     `-RecoveryExpr 0x12d1426a0 <col:19> '<dependent type>' contains-errors lvalue
    |   |   `-CXXDependentScopeMemberExpr 0x12d142768 <col:31, col:35> '<dependent type>' contains-errors lvalue .blen
    |   |     `-RecoveryExpr 0x12d142748 <col:31> '<dependent type>' contains-errors lvalue
    |   `-IfStmt 0x12d1428a0 <line:26:2, line:27:6>
    |     |-BinaryOperator 0x12d142878 <line:26:6, col:17> 'int' contains-errors '=='
    |     | |-DeclRefExpr 0x12d142800 <col:6> 'unsigned int' lvalue ParmVar 0x12d1281f0 'pkttype' 'unsigned int'
    |     | `-RecoveryExpr 0x12d142858 <col:17> '<dependent type>' contains-errors lvalue
    |     `-BreakStmt 0x12d142898 <line:27:6>
    |-IfStmt 0x12d142d50 <line:32:5, line:36:5> has_else
    | |-BinaryOperator 0x12d142ae0 <line:32:9, col:22> 'int' contains-errors '&&'
    | | |-RecoveryExpr 0x12d142a48 <col:9> '<dependent type>' contains-errors lvalue
    | | `-BinaryOperator 0x12d142ac0 <col:16, col:22> 'int' '=='
    | |   |-ImplicitCastExpr 0x12d142aa8 <col:16> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x12d142a68 <col:16> 'int' lvalue Var 0x12d141c68 'rc' 'int'
    | |   `-IntegerLiteral 0x12d142a88 <col:22> 'int' 0
    | |-CompoundStmt 0x12d142c28 <col:25, line:34:5>
    | | `-BinaryOperator 0x12d142c08 <line:33:2, col:9> '<dependent type>' contains-errors '='
    | |   |-UnaryOperator 0x12d142bd0 <col:2, col:3> '<dependent type>' contains-errors prefix '*' cannot overflow
    | |   | `-ImplicitCastExpr 0x12d142bb8 <col:3> '<dependent type>' contains-errors <LValueToRValue>
    | |   |   `-RecoveryExpr 0x12d142b00 <col:3> '<dependent type>' contains-errors lvalue
    | |   `-RecoveryExpr 0x12d142be8 <col:9> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x12d142d40 <line:34:12, line:36:5>
    `-ReturnStmt 0x12d142db8 <line:37:5, col:12>
      `-ImplicitCastExpr 0x12d142da0 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x12d142d80 <col:12> 'int' lvalue Var 0x12d141c68 'rc' 'int'
