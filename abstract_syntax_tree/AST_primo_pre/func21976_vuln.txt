`-FunctionDecl 0x149830958  line:1:5 nfc_llcp_send_cc 'int (struct nfc_llcp_sock *)'
  |-ParmVarDecl 0x149830848 <col:22, col:44> col:44 used sock 'struct nfc_llcp_sock *'
  `-CompoundStmt 0x149013c60 <line:2:1, line:50:1>
    |-DeclStmt 0x149010838 <line:3:2, col:30>
    | |-RecordDecl 0x149010650 <col:2, col:9> col:9 struct nfc_llcp_local
    | `-VarDecl 0x1490107b8 <col:2, col:25> col:25 used local 'struct nfc_llcp_local *'
    |-DeclStmt 0x149010a38 <line:4:2, col:21>
    | |-RecordDecl 0x149010850 <col:2, col:9> col:9 struct sk_buff
    | `-VarDecl 0x1490109b8 <col:2, col:18> col:18 used skb 'struct sk_buff *'
    |-DeclStmt 0x149010b90 <line:7:2, col:9>
    | `-VarDecl 0x149010b28 <col:2, col:6> col:6 used err 'int'
    |-CallExpr 0x149010d88 <line:11:2, col:16> 'int'
    | |-ImplicitCastExpr 0x149010d70 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x149010cc0 <col:2> 'int ()' Function 0x149010c08 'pr_debug' 'int ()'
    | `-ImplicitCastExpr 0x149010db0 <col:11> 'char *' <ArrayToPointerDecay>
    |   `-StringLiteral 0x149010d20 <col:11> 'char[4]' lvalue "STR"
    |-BinaryOperator 0x149010e48 <line:13:2, col:16> 'struct nfc_llcp_local *' contains-errors '='
    | |-DeclRefExpr 0x149010dc8 <col:2> 'struct nfc_llcp_local *' lvalue Var 0x1490107b8 'local' 'struct nfc_llcp_local *'
    | `-RecoveryExpr 0x149010e20 <col:10, col:16> '<dependent type>' contains-errors lvalue
    |   `-DeclRefExpr 0x149010de8 <col:10> 'struct nfc_llcp_sock *' lvalue ParmVar 0x149830848 'sock' 'struct nfc_llcp_sock *'
    |-IfStmt 0x149010fa8 <line:14:2, line:15:11>
    | |-BinaryOperator 0x149010ee0 <line:14:6, col:15> 'int' contains-errors '=='
    | | |-DeclRefExpr 0x149010e68 <col:6> 'struct nfc_llcp_local *' lvalue Var 0x1490107b8 'local' 'struct nfc_llcp_local *'
    | | `-RecoveryExpr 0x149010ec0 <col:15> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x149010f98 <line:15:3, col:11>
    |   `-UnaryOperator 0x149010f80 <col:10, col:11> '<dependent type>' contains-errors prefix '-' cannot overflow
    |     `-ImplicitCastExpr 0x149010f68 <col:11> '<dependent type>' contains-errors <LValueToRValue>
    |       `-RecoveryExpr 0x149010f48 <col:11> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x149013520 <line:30:2, line:33:2>
    | |-RecoveryExpr 0x149013460 <line:30:6, col:13> '_Bool' contains-errors
    | `-CompoundStmt 0x149013508 <col:19, line:33:2>
    |   `-GotoStmt 0x1490134f0 <line:32:3, col:8> 'error_tlv' 0x1490134a0
    |-CallExpr 0x149013838 <line:38:2, col:38> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x149013780 <col:2> 'int ()' Function 0x1490136c8 'skb_queue_tail' 'int ()'
    | |-UnaryOperator 0x149013800 <col:17, col:25> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | `-RecoveryExpr 0x1490137d8 <col:18, col:25> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x1490137a0 <col:18> 'struct nfc_llcp_local *' lvalue Var 0x1490107b8 'local' 'struct nfc_llcp_local *'
    | `-DeclRefExpr 0x149013818 <col:35> 'struct sk_buff *' lvalue Var 0x1490109b8 'skb' 'struct sk_buff *'
    |-BinaryOperator 0x1490138a8 <line:40:2, col:8> 'int' '='
    | |-DeclRefExpr 0x149013868 <col:2> 'int' lvalue Var 0x149010b28 'err' 'int'
    | `-IntegerLiteral 0x149013888 <col:8> 'int' 0
    |-LabelStmt 0x149013ad8 <line:42:1, line:44:20> 'error_tlv'
    | `-IfStmt 0x149013ab8 <line:43:2, line:44:20>
    |   |-ImplicitCastExpr 0x1490138e8 <line:43:6> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x1490138c8 <col:6> 'int' lvalue Var 0x149010b28 'err' 'int'
    |   `-CallExpr 0x149013a58 <line:44:3, col:20> 'int'
    |     |-ImplicitCastExpr 0x149013a40 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x1490139e0 <col:3> 'int ()' Function 0x149013928 'pr_err' 'int ()'
    |     |-ImplicitCastExpr 0x149013a88 <col:10> 'char *' <ArrayToPointerDecay>
    |     | `-StringLiteral 0x149013a00 <col:10> 'char[4]' lvalue "STR"
    |     `-ImplicitCastExpr 0x149013aa0 <col:17> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x149013a20 <col:17> 'int' lvalue Var 0x149010b28 'err' 'int'
    `-ReturnStmt 0x149013c50 <line:49:2, col:9>
      `-ImplicitCastExpr 0x149013c38 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x149013c18 <col:9> 'int' lvalue Var 0x149010b28 'err' 'int'
