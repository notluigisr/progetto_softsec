`-FunctionDecl 0x1409281a8  line:1:1 PHP_FUNCTION 'int (int)'
  |-ParmVarDecl 0x1409280d8 <col:14> col:14 used umask 'int'
  `-CompoundStmt 0x140941538 <line:2:1, line:23:1>
    |-DeclStmt 0x140928358 <line:3:2, col:15>
    | `-VarDecl 0x1409282b8 <col:2, col:14> col:7 used arg1 'long' cinit
    |   `-ImplicitCastExpr 0x140928340 <col:14> 'long' <IntegralCast>
    |     `-IntegerLiteral 0x140928320 <col:14> 'int' 0
    |-DeclStmt 0x1409283f0 <line:4:2, col:14>
    | `-VarDecl 0x140928388 <col:2, col:6> col:6 used oldumask 'int'
    |-BinaryOperator 0x140940b40 <line:6:2, col:22> 'int' contains-errors '='
    | |-DeclRefExpr 0x140928408 <col:2> 'int' lvalue Var 0x140928388 'oldumask' 'int'
    | `-RecoveryExpr 0x140940b10 <col:13, col:22> '<dependent type>' contains-errors lvalue
    |   |-DeclRefExpr 0x140928428 <col:13> 'int' lvalue ParmVar 0x1409280d8 'umask' 'int'
    |   `-IntegerLiteral 0x140928448 <col:19> 'int' 63
    |-IfStmt 0x140940ec8 <line:8:2, line:10:2>
    | |-BinaryOperator 0x140940d90 <line:8:6, col:20> 'int' '=='
    | | |-CallExpr 0x140940d18 <col:6, col:14> 'int'
    | | | |-ImplicitCastExpr 0x140940d00 <col:6> 'int (*)()' <FunctionToPointerDecay>
    | | | | `-DeclRefExpr 0x140940c90 <col:6> 'int ()' Function 0x140940bd8 'BG' 'int ()'
    | | | `-ImplicitCastExpr 0x140940d40 <col:9> 'int' <LValueToRValue>
    | | |   `-DeclRefExpr 0x140940cb0 <col:9> 'int' lvalue ParmVar 0x1409280d8 'umask' 'int'
    | | `-UnaryOperator 0x140940d78 <col:19, col:20> 'int' prefix '-'
    | |   `-IntegerLiteral 0x140940d58 <col:20> 'int' 1
    | `-CompoundStmt 0x140940eb0 <col:23, line:10:2>
    |   `-ImplicitCastExpr 0x140940e98 <line:9:3, col:15> '<dependent type>' contains-errors <LValueToRValue>
    |     `-RecoveryExpr 0x140940e68 <col:3, col:15> '<dependent type>' contains-errors lvalue
    |       |-CallExpr 0x140940e08 <col:3, col:11> 'int'
    |       | |-ImplicitCastExpr 0x140940df0 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |       | | `-DeclRefExpr 0x140940db0 <col:3> 'int ()' Function 0x140940bd8 'BG' 'int ()'
    |       | `-ImplicitCastExpr 0x140940e30 <col:6> 'int' <LValueToRValue>
    |       |   `-DeclRefExpr 0x140940dd0 <col:6> 'int' lvalue ParmVar 0x1409280d8 'umask' 'int'
    |       `-DeclRefExpr 0x140940e48 <col:15> 'int' lvalue Var 0x140928388 'oldumask' 'int'
    |-IfStmt 0x140941168 <line:12:2, line:14:2>
    | |-RecoveryExpr 0x140941138 <line:12:6, col:72> '_Bool' contains-errors
    | `-CompoundStmt 0x140941158 <col:81, line:14:2>
    |-IfStmt 0x140941390 <line:16:2, line:20:2> has_else
    | |-BinaryOperator 0x140941200 <line:16:6, col:25> 'int' '=='
    | | |-CallExpr 0x1409411c0 <col:6, col:20> 'int'
    | | | `-ImplicitCastExpr 0x1409411a8 <col:6> 'int (*)()' <FunctionToPointerDecay>
    | | |   `-DeclRefExpr 0x140941188 <col:6> 'int ()' Function 0x140941010 'ZEND_NUM_ARGS' 'int ()'
    | | `-IntegerLiteral 0x1409411e0 <col:25> 'int' 0
    | |-CompoundStmt 0x1409412c0 <col:28, line:18:2>
    | | `-ImplicitCastExpr 0x1409412a8 <line:17:3, col:17> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x140941278 <col:3, col:17> '<dependent type>' contains-errors lvalue
    | |     |-DeclRefExpr 0x140941220 <col:3> 'int' lvalue ParmVar 0x1409280d8 'umask' 'int'
    | |     `-DeclRefExpr 0x140941240 <col:9> 'int' lvalue Var 0x140928388 'oldumask' 'int'
    | `-CompoundStmt 0x140941378 <line:18:9, line:20:2>
    |   `-ImplicitCastExpr 0x140941360 <line:19:3, col:13> '<dependent type>' contains-errors <LValueToRValue>
    |     `-RecoveryExpr 0x140941330 <col:3, col:13> '<dependent type>' contains-errors lvalue
    |       |-DeclRefExpr 0x1409412d8 <col:3> 'int' lvalue ParmVar 0x1409280d8 'umask' 'int'
    |       `-DeclRefExpr 0x1409412f8 <col:9> 'long' lvalue Var 0x1409282b8 'arg1' 'long'
    `-CallExpr 0x1409414f8 <line:22:2, col:22> 'int'
      |-ImplicitCastExpr 0x1409414e0 <col:2> 'int (*)()' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x1409414a0 <col:2> 'int ()' Function 0x1409413e8 'RETURN_LONG' 'int ()'
      `-ImplicitCastExpr 0x140941520 <col:14> 'int' <LValueToRValue>
        `-DeclRefExpr 0x1409414c0 <col:14> 'int' lvalue Var 0x140928388 'oldumask' 'int'
