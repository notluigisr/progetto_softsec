`-FunctionDecl 0x14500de88  line:1:1 invalid f_test_option_not_set 'int (int *, int *)'
  |-ParmVarDecl 0x14500dd28 <col:23, col:33> col:33 invalid argvars 'int *'
  |-ParmVarDecl 0x14500dda8 <col:42, col:52> col:52 invalid rettv 'int *'
  `-CompoundStmt 0x145027da8 <line:2:1, line:13:1>
    |-DeclStmt 0x14500dfd8 <line:3:5, col:32>
    | `-VarDecl 0x14500df58 <col:5, col:13> col:13 used name 'char *'
    `-IfStmt 0x145027d78 <line:5:5, line:12:5> has_else
      |-BinaryOperator 0x14500e208 <line:5:9, col:30> 'int' contains-errors '!='
      | |-CXXDependentScopeMemberExpr 0x14500e1a0 <col:9, col:20> '<dependent type>' contains-errors lvalue .v_type
      | | `-ArraySubscriptExpr 0x14500e180 <col:9, col:18> '<dependent type>' contains-errors lvalue
      | |   |-ImplicitCastExpr 0x14500e168 <col:9> '<dependent type>' contains-errors <LValueToRValue>
      | |   | `-RecoveryExpr 0x14500dff0 <col:9> '<dependent type>' contains-errors lvalue
      | |   `-IntegerLiteral 0x14500e010 <col:17> 'int' 0
      | `-RecoveryExpr 0x14500e1e8 <col:30> '<dependent type>' contains-errors lvalue
      |-CallExpr 0x145027588 <line:6:2, col:18> '<dependent type>' contains-errors
      | |-DeclRefExpr 0x14500e380 <col:2> 'int ()' Function 0x14500e2c8 'emsg' 'int ()'
      | `-CallExpr 0x145027560 <col:7, col:17> '<dependent type>' contains-errors
      |   |-DeclRefExpr 0x1450274b8 <col:7> 'int ()' Function 0x145027400 '_' 'int ()'
      |   `-RecoveryExpr 0x145027540 <col:9> '<dependent type>' contains-errors lvalue
      `-CompoundStmt 0x145027d58 <line:8:5, line:12:5>
        |-BinaryOperator 0x145027820 <line:9:2, col:34> 'char *' contains-errors '='
        | |-DeclRefExpr 0x1450275b0 <col:2> 'char *' lvalue Var 0x14500df58 'name' 'char *'
        | `-CallExpr 0x1450277f8 <col:9, col:34> '<dependent type>' contains-errors
        |   |-DeclRefExpr 0x1450276b0 <col:9> 'int ()' Function 0x1450275f8 'tv_get_string' 'int ()'
        |   `-UnaryOperator 0x1450277e0 <col:23, col:33> '<dependent type>' contains-errors prefix '&' cannot overflow
        |     `-ArraySubscriptExpr 0x1450277c0 <col:24, col:33> '<dependent type>' contains-errors lvalue
        |       |-ImplicitCastExpr 0x1450277a8 <col:24> '<dependent type>' contains-errors <LValueToRValue>
        |       | `-RecoveryExpr 0x1450276d0 <col:24> '<dependent type>' contains-errors lvalue
        |       `-IntegerLiteral 0x1450276f0 <col:32> 'int' 0
        `-IfStmt 0x145027d38 <line:10:2, line:11:30>
          |-BinaryOperator 0x145027af0 <line:10:6, col:36> 'int' contains-errors '=='
          | |-CallExpr 0x145027a90 <col:6, col:31> 'int'
          | | |-ImplicitCastExpr 0x145027a78 <col:6> 'int (*)()' <FunctionToPointerDecay>
          | | | `-DeclRefExpr 0x145027920 <col:6> 'int ()' Function 0x145027868 'reset_option_was_set' 'int ()'
          | | `-ImplicitCastExpr 0x145027ab8 <col:27> 'char *' <LValueToRValue>
          | |   `-DeclRefExpr 0x145027940 <col:27> 'char *' lvalue Var 0x14500df58 'name' 'char *'
          | `-RecoveryExpr 0x145027ad0 <col:36> '<dependent type>' contains-errors lvalue
          `-CallExpr 0x145027d08 <line:11:6, col:30> '<dependent type>' contains-errors
            |-DeclRefExpr 0x145027bf0 <col:6> 'int ()' Function 0x145027b38 'semsg' 'int ()'
            |-CallExpr 0x145027ce0 <col:12, col:23> '<dependent type>' contains-errors
            | |-DeclRefExpr 0x145027c10 <col:12> 'int ()' Function 0x145027400 '_' 'int ()'
            | `-RecoveryExpr 0x145027cc0 <col:14> '<dependent type>' contains-errors lvalue
            `-DeclRefExpr 0x145027c70 <col:26> 'char *' lvalue Var 0x14500df58 'name' 'char *'
