`-FunctionDecl 0x147128500  line:1:20 ModulateLCHab 'void (const double, const double, const double, double *, double *, double *)' static inline
  |-ParmVarDecl 0x1471280d8 <col:34, col:47> col:47 used percent_luma 'const double'
  |-ParmVarDecl 0x147128158 <line:2:3, col:16> col:16 used percent_chroma 'const double'
  |-ParmVarDecl 0x1471281d8 <col:31, col:44> col:44 used percent_hue 'const double'
  |-ParmVarDecl 0x147128288 <col:56, col:64> col:64 used red 'double *'
  |-ParmVarDecl 0x147128308 <line:3:3, col:11> col:11 used green 'double *'
  |-ParmVarDecl 0x147128388 <col:17, col:25> col:25 used blue 'double *'
  `-CompoundStmt 0x147142370 <line:4:1, line:20:1>
    |-DeclStmt 0x1471287c0 <line:5:3, line:8:11>
    | |-VarDecl 0x147128638 <line:5:3, line:6:5> col:5 used hue 'double'
    | |-VarDecl 0x1471286b8 <line:5:3, line:7:5> col:5 used luma 'double'
    | `-VarDecl 0x147128738 <line:5:3, line:8:5> col:5 used chroma 'double'
    |-CallExpr 0x147141b18 <line:11:3, col:57> 'int'
    | |-ImplicitCastExpr 0x147141b00 <col:3> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x147141910 <col:3> 'int ()' Function 0x147141858 'ConvertRGBToLCHab' 'int ()'
    | |-ImplicitCastExpr 0x147141b68 <col:21, col:22> 'double' <LValueToRValue>
    | | `-UnaryOperator 0x147141968 <col:21, col:22> 'double' lvalue prefix '*' cannot overflow
    | |   `-ImplicitCastExpr 0x147141950 <col:22> 'double *' <LValueToRValue>
    | |     `-DeclRefExpr 0x147141930 <col:22> 'double *' lvalue ParmVar 0x147128288 'red' 'double *'
    | |-ImplicitCastExpr 0x147141b80 <col:26, col:27> 'double' <LValueToRValue>
    | | `-UnaryOperator 0x1471419b8 <col:26, col:27> 'double' lvalue prefix '*' cannot overflow
    | |   `-ImplicitCastExpr 0x1471419a0 <col:27> 'double *' <LValueToRValue>
    | |     `-DeclRefExpr 0x147141980 <col:27> 'double *' lvalue ParmVar 0x147128308 'green' 'double *'
    | |-ImplicitCastExpr 0x147141b98 <col:33, col:34> 'double' <LValueToRValue>
    | | `-UnaryOperator 0x147141a08 <col:33, col:34> 'double' lvalue prefix '*' cannot overflow
    | |   `-ImplicitCastExpr 0x1471419f0 <col:34> 'double *' <LValueToRValue>
    | |     `-DeclRefExpr 0x1471419d0 <col:34> 'double *' lvalue ParmVar 0x147128388 'blue' 'double *'
    | |-UnaryOperator 0x147141a40 <col:39, col:40> 'double *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x147141a20 <col:40> 'double' lvalue Var 0x1471286b8 'luma' 'double'
    | |-UnaryOperator 0x147141a78 <col:45, col:46> 'double *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x147141a58 <col:46> 'double' lvalue Var 0x147128738 'chroma' 'double'
    | `-UnaryOperator 0x147141ab0 <col:53, col:54> 'double *' prefix '&' cannot overflow
    |   `-DeclRefExpr 0x147141a90 <col:54> 'double' lvalue Var 0x147128638 'hue' 'double'
    |-CompoundAssignOperator 0x147141c48 <line:12:3, col:14> 'double' '*=' ComputeLHSTy='double' ComputeResultTy='double'
    | |-DeclRefExpr 0x147141bb0 <col:3> 'double' lvalue Var 0x1471286b8 'luma' 'double'
    | `-BinaryOperator 0x147141c28 <col:9, col:14> 'double' '*'
    |   |-FloatingLiteral 0x147141bd0 <col:9> 'double' 1.000000e-02
    |   `-ImplicitCastExpr 0x147141c10 <col:14> 'double' <LValueToRValue>
    |     `-DeclRefExpr 0x147141bf0 <col:14> 'const double' lvalue ParmVar 0x1471280d8 'percent_luma' 'const double'
    |-CompoundAssignOperator 0x147141d10 <line:13:3, col:16> 'double' '*=' ComputeLHSTy='double' ComputeResultTy='double'
    | |-DeclRefExpr 0x147141c78 <col:3> 'double' lvalue Var 0x147128738 'chroma' 'double'
    | `-BinaryOperator 0x147141cf0 <col:11, col:16> 'double' '*'
    |   |-FloatingLiteral 0x147141c98 <col:11> 'double' 1.000000e-02
    |   `-ImplicitCastExpr 0x147141cd8 <col:16> 'double' <LValueToRValue>
    |     `-DeclRefExpr 0x147141cb8 <col:16> 'const double' lvalue ParmVar 0x147128158 'percent_chroma' 'const double'
    |-CompoundAssignOperator 0x147141e78 <line:14:3, col:33> 'double' '+=' ComputeLHSTy='double' ComputeResultTy='double'
    | |-DeclRefExpr 0x147141d40 <col:3> 'double' lvalue Var 0x147128638 'hue' 'double'
    | `-BinaryOperator 0x147141e58 <col:8, col:33> 'double' '*'
    |   |-FloatingLiteral 0x147141d60 <col:8> 'double' 5.000000e-01
    |   `-ParenExpr 0x147141e38 <col:12, col:33> 'double'
    |     `-BinaryOperator 0x147141e18 <col:13, col:30> 'double' '-'
    |       |-BinaryOperator 0x147141dd8 <col:13, col:18> 'double' '*'
    |       | |-FloatingLiteral 0x147141d80 <col:13> 'double' 1.000000e-02
    |       | `-ImplicitCastExpr 0x147141dc0 <col:18> 'double' <LValueToRValue>
    |       |   `-DeclRefExpr 0x147141da0 <col:18> 'const double' lvalue ParmVar 0x1471281d8 'percent_hue' 'const double'
    |       `-FloatingLiteral 0x147141df8 <col:30> 'double' 1.000000e+00
    |-WhileStmt 0x147141f90 <line:15:3, line:16:10>
    | |-BinaryOperator 0x147141f00 <line:15:10, col:16> 'int' '<'
    | | |-ImplicitCastExpr 0x147141ee8 <col:10> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x147141ea8 <col:10> 'double' lvalue Var 0x147128638 'hue' 'double'
    | | `-FloatingLiteral 0x147141ec8 <col:16> 'double' 0.000000e+00
    | `-CompoundAssignOperator 0x147141f60 <line:16:5, col:10> 'double' '+=' ComputeLHSTy='double' ComputeResultTy='double'
    |   |-DeclRefExpr 0x147141f20 <col:5> 'double' lvalue Var 0x147128638 'hue' 'double'
    |   `-FloatingLiteral 0x147141f40 <col:10> 'double' 1.000000e+00
    |-WhileStmt 0x147142098 <line:17:3, line:18:10>
    | |-BinaryOperator 0x147142008 <line:17:10, col:17> 'int' '>='
    | | |-ImplicitCastExpr 0x147141ff0 <col:10> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x147141fb0 <col:10> 'double' lvalue Var 0x147128638 'hue' 'double'
    | | `-FloatingLiteral 0x147141fd0 <col:17> 'double' 1.000000e+00
    | `-CompoundAssignOperator 0x147142068 <line:18:5, col:10> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
    |   |-DeclRefExpr 0x147142028 <col:5> 'double' lvalue Var 0x147128638 'hue' 'double'
    |   `-FloatingLiteral 0x147142048 <col:10> 'double' 1.000000e+00
    `-CallExpr 0x147142290 <line:19:3, col:51> 'int'
      |-ImplicitCastExpr 0x147142278 <col:3> 'int (*)()' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x147142198 <col:3> 'int ()' Function 0x1471420e0 'ConvertLCHabToRGB' 'int ()'
      |-ImplicitCastExpr 0x1471422e0 <col:21> 'double' <LValueToRValue>
      | `-DeclRefExpr 0x1471421b8 <col:21> 'double' lvalue Var 0x1471286b8 'luma' 'double'
      |-ImplicitCastExpr 0x1471422f8 <col:26> 'double' <LValueToRValue>
      | `-DeclRefExpr 0x1471421d8 <col:26> 'double' lvalue Var 0x147128738 'chroma' 'double'
      |-ImplicitCastExpr 0x147142310 <col:33> 'double' <LValueToRValue>
      | `-DeclRefExpr 0x1471421f8 <col:33> 'double' lvalue Var 0x147128638 'hue' 'double'
      |-ImplicitCastExpr 0x147142328 <col:37> 'double *' <LValueToRValue>
      | `-DeclRefExpr 0x147142218 <col:37> 'double *' lvalue ParmVar 0x147128288 'red' 'double *'
      |-ImplicitCastExpr 0x147142340 <col:41> 'double *' <LValueToRValue>
      | `-DeclRefExpr 0x147142238 <col:41> 'double *' lvalue ParmVar 0x147128308 'green' 'double *'
      `-ImplicitCastExpr 0x147142358 <col:47> 'double *' <LValueToRValue>
        `-DeclRefExpr 0x147142258 <col:47> 'double *' lvalue ParmVar 0x147128388 'blue' 'double *'
