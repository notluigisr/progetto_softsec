`-FunctionDecl 0x124026818  line:1:12 do_i2c_mw 'int (struct cmd_tbl *, int, int, char *const *)' static
  |-ParmVarDecl 0x12400e248 <col:22, col:38> col:38 cmdtp 'struct cmd_tbl *'
  |-ParmVarDecl 0x12400e2c8 <col:45, col:49> col:49 flag 'int'
  |-ParmVarDecl 0x12400e348 <col:55, col:59> col:59 used argc 'int'
  |-ParmVarDecl 0x1240266c0 <line:2:8, col:25> col:20 used argv 'char *const *'
  `-CompoundStmt 0x123924b98 <line:3:1, line:58:1>
    |-DeclStmt 0x1240269c0 <line:4:2, col:11>
    | `-VarDecl 0x124026958 <col:2, col:7> col:7 used chip 'int'
    |-DeclStmt 0x124026a58 <line:5:2, col:12>
    | `-VarDecl 0x1240269f0 <col:2, col:8> col:8 used addr 'long'
    |-DeclStmt 0x124026af0 <line:6:2, col:10>
    | `-VarDecl 0x124026a88 <col:2, col:6> col:6 used alen 'int'
    |-DeclStmt 0x124026b80 <line:7:2, col:12>
    | `-VarDecl 0x124026b18 <col:2, col:8> col:8 used byte 'char'
    |-DeclStmt 0x124026c18 <line:8:2, col:11>
    | `-VarDecl 0x124026bb0 <col:2, col:6> col:6 used count 'int'
    |-DeclStmt 0x124026cb0 <line:9:2, col:9>
    | `-VarDecl 0x124026c48 <col:2, col:6> col:6 used ret 'int'
    |-IfStmt 0x124026e60 <line:14:2, line:15:10>
    | |-BinaryOperator 0x124026df8 <line:14:6, col:29> 'int' '||'
    | | |-ParenExpr 0x124026d40 <col:6, col:15> 'int'
    | | | `-BinaryOperator 0x124026d20 <col:7, col:14> 'int' '<'
    | | |   |-ImplicitCastExpr 0x124026d08 <col:7> 'int' <LValueToRValue>
    | | |   | `-DeclRefExpr 0x124026cc8 <col:7> 'int' lvalue ParmVar 0x12400e348 'argc' 'int'
    | | |   `-IntegerLiteral 0x124026ce8 <col:14> 'int' 4
    | | `-ParenExpr 0x124026dd8 <col:20, col:29> 'int'
    | |   `-BinaryOperator 0x124026db8 <col:21, col:28> 'int' '>'
    | |     |-ImplicitCastExpr 0x124026da0 <col:21> 'int' <LValueToRValue>
    | |     | `-DeclRefExpr 0x124026d60 <col:21> 'int' lvalue ParmVar 0x12400e348 'argc' 'int'
    | |     `-IntegerLiteral 0x124026d80 <col:28> 'int' 5
    | `-ReturnStmt 0x124026e50 <line:15:3, col:10>
    |   `-RecoveryExpr 0x124026e30 <col:10> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x124027170 <line:18:2, col:30> 'int' contains-errors '='
    | |-DeclRefExpr 0x124026e80 <col:2> 'int' lvalue Var 0x124026958 'chip' 'int'
    | `-CallExpr 0x124027140 <col:9, col:30> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x124026fb0 <col:9> 'int ()' Function 0x124026ef8 'hextoul' 'int ()'
    |   |-ArraySubscriptExpr 0x124027100 <col:17, col:23> 'char *const' lvalue
    |   | |-ImplicitCastExpr 0x1240270e8 <col:17> 'char *const *' <LValueToRValue>
    |   | | `-DeclRefExpr 0x124026fd0 <col:17> 'char *const *' lvalue ParmVar 0x1240266c0 'argv' 'char *const *'
    |   | `-IntegerLiteral 0x124026ff0 <col:22> 'int' 1
    |   `-RecoveryExpr 0x124027120 <col:26> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x124027370 <line:21:2, col:30> 'long' contains-errors '='
    | |-DeclRefExpr 0x124027190 <col:2> 'long' lvalue Var 0x1240269f0 'addr' 'long'
    | `-CallExpr 0x124027340 <col:9, col:30> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x1240271b0 <col:9> 'int ()' Function 0x124026ef8 'hextoul' 'int ()'
    |   |-ArraySubscriptExpr 0x124027300 <col:17, col:23> 'char *const' lvalue
    |   | |-ImplicitCastExpr 0x1240272e8 <col:17> 'char *const *' <LValueToRValue>
    |   | | `-DeclRefExpr 0x1240271d0 <col:17> 'char *const *' lvalue ParmVar 0x1240266c0 'argv' 'char *const *'
    |   | `-IntegerLiteral 0x1240271f0 <col:22> 'int' 2
    |   `-RecoveryExpr 0x124027320 <col:26> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x123923e50 <line:22:2, col:43> 'int' contains-errors '='
    | |-DeclRefExpr 0x124027390 <col:2> 'int' lvalue Var 0x124026a88 'alen' 'int'
    | `-CallExpr 0x123923e20 <col:9, col:43> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x124027490 <col:9> 'int ()' Function 0x1240273d8 'get_alen' 'int ()'
    |   |-ArraySubscriptExpr 0x1240275e0 <col:18, col:24> 'char *const' lvalue
    |   | |-ImplicitCastExpr 0x1240275c8 <col:18> 'char *const *' <LValueToRValue>
    |   | | `-DeclRefExpr 0x1240274b0 <col:18> 'char *const *' lvalue ParmVar 0x1240266c0 'argv' 'char *const *'
    |   | `-IntegerLiteral 0x1240274d0 <col:23> 'int' 2
    |   `-RecoveryExpr 0x123923e00 <col:27> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x123923f30 <line:23:2, line:24:10>
    | |-BinaryOperator 0x123923ec8 <line:23:6, col:13> 'int' '>'
    | | |-ImplicitCastExpr 0x123923eb0 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x123923e70 <col:6> 'int' lvalue Var 0x124026a88 'alen' 'int'
    | | `-IntegerLiteral 0x123923e90 <col:13> 'int' 3
    | `-ReturnStmt 0x123923f20 <line:24:3, col:10>
    |   `-RecoveryExpr 0x123923f00 <col:10> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x123924130 <line:34:2, col:30> 'char' contains-errors '='
    | |-DeclRefExpr 0x123923f50 <col:2> 'char' lvalue Var 0x124026b18 'byte' 'char'
    | `-CallExpr 0x123924100 <col:9, col:30> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x123923f70 <col:9> 'int ()' Function 0x124026ef8 'hextoul' 'int ()'
    |   |-ArraySubscriptExpr 0x1239240c0 <col:17, col:23> 'char *const' lvalue
    |   | |-ImplicitCastExpr 0x1239240a8 <col:17> 'char *const *' <LValueToRValue>
    |   | | `-DeclRefExpr 0x123923f90 <col:17> 'char *const *' lvalue ParmVar 0x1240266c0 'argv' 'char *const *'
    |   | `-IntegerLiteral 0x123923fb0 <col:22> 'int' 3
    |   `-RecoveryExpr 0x1239240e0 <col:26> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x123924428 <line:37:2, line:40:11> has_else
    | |-BinaryOperator 0x1239241a8 <line:37:6, col:14> 'int' '=='
    | | |-ImplicitCastExpr 0x123924190 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x123924150 <col:6> 'int' lvalue ParmVar 0x12400e348 'argc' 'int'
    | | `-IntegerLiteral 0x123924170 <col:14> 'int' 5
    | |-BinaryOperator 0x1239243a8 <line:38:3, col:32> 'int' contains-errors '='
    | | |-DeclRefExpr 0x1239241c8 <col:3> 'int' lvalue Var 0x124026bb0 'count' 'int'
    | | `-CallExpr 0x123924378 <col:11, col:32> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x1239241e8 <col:11> 'int ()' Function 0x124026ef8 'hextoul' 'int ()'
    | |   |-ArraySubscriptExpr 0x123924338 <col:19, col:25> 'char *const' lvalue
    | |   | |-ImplicitCastExpr 0x123924320 <col:19> 'char *const *' <LValueToRValue>
    | |   | | `-DeclRefExpr 0x123924208 <col:19> 'char *const *' lvalue ParmVar 0x1240266c0 'argv' 'char *const *'
    | |   | `-IntegerLiteral 0x123924228 <col:24> 'int' 4
    | |   `-RecoveryExpr 0x123924358 <col:28> '<dependent type>' contains-errors lvalue
    | `-BinaryOperator 0x123924408 <line:40:3, col:11> 'int' '='
    |   |-DeclRefExpr 0x1239243c8 <col:3> 'int' lvalue Var 0x124026bb0 'count' 'int'
    |   `-IntegerLiteral 0x1239243e8 <col:11> 'int' 1
    |-WhileStmt 0x123924b48 <line:42:2, line:55:2>
    | |-BinaryOperator 0x1239244b0 <line:42:9, col:19> 'int' '>'
    | | |-UnaryOperator 0x123924478 <col:9, col:14> 'int' postfix '--'
    | | | `-DeclRefExpr 0x123924458 <col:9> 'int' lvalue Var 0x124026bb0 'count' 'int'
    | | `-IntegerLiteral 0x123924490 <col:19> 'int' 0
    | `-CompoundStmt 0x123924b20 <col:22, line:55:2>
    |   |-BinaryOperator 0x123924780 <line:46:3, col:47> 'int' '='
    |   | |-DeclRefExpr 0x1239244d0 <col:3> 'int' lvalue Var 0x124026c48 'ret' 'int'
    |   | `-CallExpr 0x123924708 <col:9, col:47> 'int'
    |   |   |-ImplicitCastExpr 0x1239246f0 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   |   | `-DeclRefExpr 0x1239245d0 <col:9> 'int ()' Function 0x123924518 'i2c_write' 'int ()'
    |   |   |-ImplicitCastExpr 0x123924750 <col:19> 'int' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x1239245f0 <col:19> 'int' lvalue Var 0x124026958 'chip' 'int'
    |   |   |-UnaryOperator 0x123924630 <col:25, col:29> 'long' postfix '++'
    |   |   | `-DeclRefExpr 0x123924610 <col:25> 'long' lvalue Var 0x1240269f0 'addr' 'long'
    |   |   |-ImplicitCastExpr 0x123924768 <col:33> 'int' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x123924648 <col:33> 'int' lvalue Var 0x124026a88 'alen' 'int'
    |   |   |-UnaryOperator 0x123924688 <col:39, col:40> 'char *' prefix '&' cannot overflow
    |   |   | `-DeclRefExpr 0x123924668 <col:40> 'char' lvalue Var 0x124026b18 'byte' 'char'
    |   |   `-IntegerLiteral 0x1239246a0 <col:46> 'int' 1
    |   |-IfStmt 0x1239249a0 <line:48:3, line:49:44>
    |   | |-ImplicitCastExpr 0x1239247c0 <line:48:7> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x1239247a0 <col:7> 'int' lvalue Var 0x124026c48 'ret' 'int'
    |   | `-ReturnStmt 0x123924990 <line:49:4, col:44>
    |   |   `-CallExpr 0x123924960 <col:11, col:44> '<dependent type>' contains-errors
    |   |     |-DeclRefExpr 0x1239248b8 <col:11> 'int ()' Function 0x123924800 'i2c_report_err' 'int ()'
    |   |     |-DeclRefExpr 0x1239248d8 <col:26> 'int' lvalue Var 0x124026c48 'ret' 'int'
    |   |     `-RecoveryExpr 0x123924940 <col:31> '<dependent type>' contains-errors lvalue
    |   `-CallExpr 0x123924af8 <line:53:3, col:15> 'int'
    |     |-ImplicitCastExpr 0x123924ae0 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x123924aa0 <col:3> 'int ()' Function 0x1239249e8 'udelay' 'int ()'
    |     `-IntegerLiteral 0x123924ac0 <col:10> 'int' 11000
    `-ReturnStmt 0x123924b88 <line:57:2, col:9>
      `-IntegerLiteral 0x123924b68 <col:9> 'int' 0
