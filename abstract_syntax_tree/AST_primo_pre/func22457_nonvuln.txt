`-FunctionDecl 0x15700dd90  line:1:6 tcg_x86_init 'void (void)'
  `-CompoundStmt 0x156924ad0 <line:2:1, line:88:1>
    |-DeclStmt 0x160009200 <line:3:5, line:31:6>
    | `-VarDecl 0x15700df90 <line:3:5, col:47> col:23 invalid reg_names 'const char[4]' static
    |-DeclStmt 0x160009738 <line:32:5, line:39:6>
    | `-VarDecl 0x1600093d0 <line:32:5, col:42> col:23 used seg_base_names 'const char[6][8]' static
    |-DeclStmt 0x1600099a8 <line:40:5, line:42:6>
    | `-VarDecl 0x160009880 <line:40:5, line:42:5> line:40:23 used bnd_regl_names 'const char[4][8]' static cinit
    |   `-InitListExpr 0x160009950 <col:46, line:42:5> 'const char[4][8]'
    |     |-array_filler: ImplicitValueInitExpr 0x160009998 <<invalid sloc>> 'const char[8]'
    |     `-StringLiteral 0x1600098e8 <line:41:9> 'const char[8]' "STR"
    |-DeclStmt 0x160009b98 <line:43:5, line:45:6>
    | `-VarDecl 0x160009a70 <line:43:5, line:45:5> line:43:23 used bnd_regu_names 'const char[4][8]' static cinit
    |   `-InitListExpr 0x160009b40 <col:46, line:45:5> 'const char[4][8]'
    |     |-array_filler: ImplicitValueInitExpr 0x160009b88 <<invalid sloc>> 'const char[8]'
    |     `-StringLiteral 0x160009ad8 <line:44:9> 'const char[8]' "STR"
    |-DeclStmt 0x160009c30 <line:46:5, col:10>
    | `-VarDecl 0x160009bc8 <col:5, col:9> col:9 used i 'int'
    |-DeclStmt 0x160009cc8 <line:47:5, col:28>
    | `-VarDecl 0x160009c60 <col:5, col:17> col:17 referenced invalid initialized 'int' static
    |-IfStmt 0x160009d28 <line:49:5, line:51:5>
    | |-RecoveryExpr 0x160009ce0 <line:49:9> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x160009d10 <col:22, line:51:5>
    |   `-ReturnStmt 0x160009d00 <line:50:9>
    |-BinaryOperator 0x160009de8 <line:52:5, col:19> '<dependent type>' contains-errors '='
    | |-RecoveryExpr 0x160009d68 <col:5> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x160009d48 <col:5> 'int' lvalue Var 0x160009c60 'initialized' 'int'
    | `-RecoveryExpr 0x160009dc8 <col:19> '<dependent type>' contains-errors lvalue
    |-ForStmt 0x156924640 <line:71:5, line:76:5>
    | |-BinaryOperator 0x1569243f0 <line:71:10, col:14> 'int' '='
    | | |-DeclRefExpr 0x1569243b0 <col:10> 'int' lvalue Var 0x160009bc8 'i' 'int'
    | | `-IntegerLiteral 0x1569243d0 <col:14> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x156924468 <col:17, col:21> 'int' '<'
    | | |-ImplicitCastExpr 0x156924450 <col:17> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x156924410 <col:17> 'int' lvalue Var 0x160009bc8 'i' 'int'
    | | `-IntegerLiteral 0x156924430 <col:21> 'int' 6
    | |-UnaryOperator 0x1569244a8 <col:24, col:26> 'int' prefix '++'
    | | `-DeclRefExpr 0x156924488 <col:26> 'int' lvalue Var 0x160009bc8 'i' 'int'
    | `-CompoundStmt 0x156924630 <col:29, line:76:5>
    `-ForStmt 0x156924a98 <line:78:5, line:87:5>
      |-BinaryOperator 0x1569246b8 <line:78:10, col:14> 'int' '='
      | |-DeclRefExpr 0x156924678 <col:10> 'int' lvalue Var 0x160009bc8 'i' 'int'
      | `-IntegerLiteral 0x156924698 <col:14> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x156924730 <col:17, col:21> 'int' '<'
      | |-ImplicitCastExpr 0x156924718 <col:17> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x1569246d8 <col:17> 'int' lvalue Var 0x160009bc8 'i' 'int'
      | `-IntegerLiteral 0x1569246f8 <col:21> 'int' 4
      |-UnaryOperator 0x156924770 <col:24, col:26> 'int' prefix '++'
      | `-DeclRefExpr 0x156924750 <col:26> 'int' lvalue Var 0x160009bc8 'i' 'int'
      `-CompoundStmt 0x156924a88 <col:29, line:87:5>
