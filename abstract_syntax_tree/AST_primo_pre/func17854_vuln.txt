`-FunctionDecl 0x133888400  line:1:12 compat_copy_entry_to_user 'int (struct ipt_entry *, int)' static
  |-ParmVarDecl 0x133032c48 <col:38, col:56> col:56 used e 'struct ipt_entry *'
  |-ParmVarDecl 0x133032cc0 <line:2:3, col:8> col:8 __user 'int'
  `-CompoundStmt 0x133891490 <line:3:1, line:38:1>
    |-DeclStmt 0x133888678 <line:4:2, col:33>
    | |-RecordDecl 0x133888500 <col:2, col:9> col:9 struct ipt_entry_target
    | `-VarDecl 0x1338885f8 <col:2, col:26> col:26 invalid __user 'struct ipt_entry_target'
    |-DeclStmt 0x133888808 <line:5:2, col:33>
    | |-RecordDecl 0x133888690 <col:2, col:9> col:9 struct compat_ipt_entry
    | `-VarDecl 0x133888788 <col:2, col:26> col:26 invalid __user 'struct compat_ipt_entry'
    |-DeclStmt 0x1338889a8 <line:6:2, col:38>
    | |-VarDecl 0x1338888b0 <col:2, col:12> col:12 used target_offset '__int128_t':'__int128'
    | `-VarDecl 0x133888928 <col:2, col:27> col:27 used next_offset '__int128_t':'__int128'
    |-DeclStmt 0x133888a40 <line:8:2, col:9>
    | `-VarDecl 0x1338889d8 <col:2, col:6> col:6 used ret 'int'
    |-BinaryOperator 0x133888b30 <line:10:2, col:9> 'int' contains-errors '='
    | |-DeclRefExpr 0x133888a58 <col:2> 'int' lvalue Var 0x1338889d8 'ret' 'int'
    | `-UnaryOperator 0x133888b18 <col:8, col:9> '<dependent type>' contains-errors prefix '-' cannot overflow
    |   `-ImplicitCastExpr 0x133888b00 <col:9> '<dependent type>' contains-errors <LValueToRValue>
    |     `-RecoveryExpr 0x133888ae0 <col:9> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x133888e78 <line:13:2, line:14:8>
    | |-RecoveryExpr 0x133888df0 <line:13:6, col:50> '_Bool' contains-errors
    | `-GotoStmt 0x133888e60 <line:14:3, col:8> 'out' 0x133888e10
    |-IfStmt 0x133889110 <line:19:2, line:20:8>
    | |-ImplicitCastExpr 0x1338890e0 <line:19:6> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x1338890c0 <col:6> 'int' lvalue Var 0x1338889d8 'ret' 'int'
    | `-GotoStmt 0x1338890f8 <line:20:3, col:8> 'out' 0x133888e10
    |-IfStmt 0x133891128 <line:27:2, line:28:8>
    | |-ImplicitCastExpr 0x1338910f8 <line:27:6> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x1338910d8 <col:6> 'int' lvalue Var 0x1338889d8 'ret' 'int'
    | `-GotoStmt 0x133891110 <line:28:3, col:8> 'out' 0x133888e10
    |-IfStmt 0x133891340 <line:31:2, line:32:8>
    | |-RecoveryExpr 0x133891308 <line:31:6, col:48> '_Bool' contains-errors
    | `-GotoStmt 0x133891328 <line:32:3, col:8> 'out' 0x133888e10
    |-IfStmt 0x1338913d8 <line:33:2, line:34:8>
    | |-RecoveryExpr 0x1338913a0 <line:33:6, col:44> '_Bool' contains-errors
    | `-GotoStmt 0x1338913c0 <line:34:3, col:8> 'out' 0x133888e10
    |-ReturnStmt 0x133891418 <line:35:2, col:9>
    | `-IntegerLiteral 0x1338913f8 <col:9> 'int' 0
    `-LabelStmt 0x133891470 <line:36:1, line:37:9> 'out'
      `-ReturnStmt 0x133891460 <col:2, col:9>
        `-ImplicitCastExpr 0x133891448 <col:9> 'int' <LValueToRValue>
          `-DeclRefExpr 0x133891428 <col:9> 'int' lvalue Var 0x1338889d8 'ret' 'int'
