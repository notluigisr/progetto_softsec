`-FunctionDecl 0x13000e0c8  line:1:12 invalid labbasecolor 'int (int *, int *, int, int *, int *, int *)' static
  |-ParmVarDecl 0x13000dd28 <col:25, col:35> col:35 invalid i_ctx_p 'int *'
  |-ParmVarDecl 0x13000dda8 <col:44, col:49> col:49 invalid space 'int *'
  |-ParmVarDecl 0x13000de28 <col:56, col:60> col:60 base 'int'
  |-ParmVarDecl 0x13000dea8 <col:66, col:71> col:71 used stage 'int *'
  |-ParmVarDecl 0x13000df28 <col:78, col:83> col:83 used cont 'int *'
  |-ParmVarDecl 0x13000dfa8 <col:89, col:94> col:94 stack_depth 'int *'
  `-CompoundStmt 0x130027cf0 <line:2:1, line:19:1>
    |-DeclStmt 0x13000e2d8 <line:4:5, col:24>
    | |-VarDecl 0x13000e1b8 <col:5, col:9> col:9 used i 'int'
    | `-VarDecl 0x13000e238 <col:5, col:23> col:12 used components 'int' cinit
    |   `-IntegerLiteral 0x13000e2a0 <col:23> 'int' 1
    |-BinaryOperator 0x13000e330 <line:6:5, col:18> 'int' '='
    | |-DeclRefExpr 0x13000e2f0 <col:5> 'int' lvalue Var 0x13000e238 'components' 'int'
    | `-IntegerLiteral 0x13000e310 <col:18> 'int' 3
    |-CallExpr 0x130027548 <line:7:5, col:19> 'int'
    | |-ImplicitCastExpr 0x130027530 <col:5> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x1300274b8 <col:5> 'int ()' Function 0x130027400 'pop' 'int ()'
    | `-ImplicitCastExpr 0x130027570 <col:9> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x1300274d8 <col:9> 'int' lvalue Var 0x13000e238 'components' 'int'
    |-BinaryOperator 0x1300275e0 <line:9:5, col:18> 'int' '='
    | |-DeclRefExpr 0x1300275a0 <col:5> 'int' lvalue Var 0x13000e238 'components' 'int'
    | `-IntegerLiteral 0x1300275c0 <col:18> 'int' 3
    |-CallExpr 0x130027738 <line:10:5, col:20> 'int'
    | |-ImplicitCastExpr 0x130027720 <col:5> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x1300276e0 <col:5> 'int ()' Function 0x130027628 'push' 'int ()'
    | `-ImplicitCastExpr 0x130027760 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x130027700 <col:10> 'int' lvalue Var 0x13000e238 'components' 'int'
    |-ForStmt 0x130027b68 <line:12:5, line:15:5>
    | |-BinaryOperator 0x130027830 <line:12:10, col:12> 'int' '='
    | | |-DeclRefExpr 0x1300277f0 <col:10> 'int' lvalue Var 0x13000e1b8 'i' 'int'
    | | `-IntegerLiteral 0x130027810 <col:12> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x1300278c0 <col:14, col:16> 'int' '<'
    | | |-ImplicitCastExpr 0x130027890 <col:14> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x130027850 <col:14> 'int' lvalue Var 0x13000e1b8 'i' 'int'
    | | `-ImplicitCastExpr 0x1300278a8 <col:16> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x130027870 <col:16> 'int' lvalue Var 0x13000e238 'components' 'int'
    | |-UnaryOperator 0x130027900 <col:27, col:28> 'int' postfix '++'
    | | `-DeclRefExpr 0x1300278e0 <col:27> 'int' lvalue Var 0x13000e1b8 'i' 'int'
    | `-CompoundStmt 0x130027b50 <col:32, line:15:5>
    |   `-CallExpr 0x130027b20 <line:13:9, col:31> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x1300279f8 <col:9> 'int ()' Function 0x130027940 'make_real' 'int ()'
    |     |-RecoveryExpr 0x130027ac0 <col:19> '<dependent type>' contains-errors lvalue
    |     `-CStyleCastExpr 0x130027af8 <col:23, col:30> 'float' <IntegralToFloating>
    |       `-IntegerLiteral 0x130027a30 <col:30> 'int' 0
    |-BinaryOperator 0x130027c10 <line:16:5, col:14> 'int' '='
    | |-UnaryOperator 0x130027bd8 <col:5, col:6> 'int' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x130027bc0 <col:6> 'int *' <LValueToRValue>
    | |   `-DeclRefExpr 0x130027ba0 <col:6> 'int *' lvalue ParmVar 0x13000dea8 'stage' 'int *'
    | `-IntegerLiteral 0x130027bf0 <col:14> 'int' 0
    |-BinaryOperator 0x130027ca0 <line:17:5, col:13> 'int' '='
    | |-UnaryOperator 0x130027c68 <col:5, col:6> 'int' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x130027c50 <col:6> 'int *' <LValueToRValue>
    | |   `-DeclRefExpr 0x130027c30 <col:6> 'int *' lvalue ParmVar 0x13000df28 'cont' 'int *'
    | `-IntegerLiteral 0x130027c80 <col:13> 'int' 0
    `-ReturnStmt 0x130027ce0 <line:18:5, col:12>
      `-IntegerLiteral 0x130027cc0 <col:12> 'int' 0
