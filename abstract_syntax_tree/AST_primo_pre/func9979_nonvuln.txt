`-FunctionDecl 0x135940a88  line:1:1 rectangle_intersect 'int (int, int, int, int, int, int, int, int, int *, int *, int *, int *)'
  |-ParmVarDecl 0x1359280f0 <col:22, col:27> col:27 used ax 'int'
  |-ParmVarDecl 0x135928170 <col:31, col:36> col:36 used ay 'int'
  |-ParmVarDecl 0x1359281f0 <col:40, col:45> col:45 used awidth 'int'
  |-ParmVarDecl 0x135928270 <col:53, col:58> col:58 used aheight 'int'
  |-ParmVarDecl 0x1359282f0 <line:2:22, col:27> col:27 used bx 'int'
  |-ParmVarDecl 0x135928370 <col:31, col:36> col:36 used by 'int'
  |-ParmVarDecl 0x1359283f0 <col:40, col:45> col:45 used bwidth 'int'
  |-ParmVarDecl 0x135928470 <col:53, col:58> col:58 used bheight 'int'
  |-ParmVarDecl 0x135928528 <line:3:22, col:28> col:28 used rx 'int *'
  |-ParmVarDecl 0x1359285a8 <col:32, col:38> col:38 used ry 'int *'
  |-ParmVarDecl 0x135928628 <col:42, col:48> col:48 used rwidth 'int *'
  |-ParmVarDecl 0x1359286a8 <col:56, col:62> col:62 used rheight 'int *'
  `-CompoundStmt 0x135941d88 <line:4:1, line:24:1>
    |-DeclStmt 0x135940e00 <line:5:5, col:28>
    | |-VarDecl 0x135940bf0 <col:5, col:10> col:10 used rx1 'int'
    | |-VarDecl 0x135940c70 <col:5, col:15> col:15 used ry1 'int'
    | |-VarDecl 0x135940cf0 <col:5, col:20> col:20 used rx2 'int'
    | `-VarDecl 0x135940d70 <col:5, col:25> col:25 used ry2 'int'
    |-BinaryOperator 0x135941058 <line:7:5, col:22> 'int' '='
    | |-DeclRefExpr 0x135940e18 <col:5> 'int' lvalue Var 0x135940bf0 'rx1' 'int'
    | `-CallExpr 0x135940ff8 <col:11, col:22> 'int'
    |   |-ImplicitCastExpr 0x135940fe0 <col:11> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x135940f50 <col:11> 'int ()' Function 0x135940e98 'MAX' 'int ()'
    |   |-ImplicitCastExpr 0x135941028 <col:16> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x135940f70 <col:16> 'int' lvalue ParmVar 0x1359280f0 'ax' 'int'
    |   `-ImplicitCastExpr 0x135941040 <col:20> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x135940f90 <col:20> 'int' lvalue ParmVar 0x1359282f0 'bx' 'int'
    |-BinaryOperator 0x135941170 <line:8:5, col:22> 'int' '='
    | |-DeclRefExpr 0x135941078 <col:5> 'int' lvalue Var 0x135940c70 'ry1' 'int'
    | `-CallExpr 0x135941110 <col:11, col:22> 'int'
    |   |-ImplicitCastExpr 0x1359410f8 <col:11> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x135941098 <col:11> 'int ()' Function 0x135940e98 'MAX' 'int ()'
    |   |-ImplicitCastExpr 0x135941140 <col:16> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x1359410b8 <col:16> 'int' lvalue ParmVar 0x135928170 'ay' 'int'
    |   `-ImplicitCastExpr 0x135941158 <col:20> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x1359410d8 <col:20> 'int' lvalue ParmVar 0x135928370 'by' 'int'
    |-BinaryOperator 0x135941418 <line:9:5, col:40> 'int' '='
    | |-DeclRefExpr 0x135941190 <col:5> 'int' lvalue Var 0x135940cf0 'rx2' 'int'
    | `-CallExpr 0x1359413e8 <col:11, col:40> 'int'
    |   |-ImplicitCastExpr 0x1359413d0 <col:11> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x135941290 <col:11> 'int ()' Function 0x1359411d8 'MIN' 'int ()'
    |   |-BinaryOperator 0x135941320 <col:16, col:21> 'int' '+'
    |   | |-ImplicitCastExpr 0x1359412f0 <col:16> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x1359412b0 <col:16> 'int' lvalue ParmVar 0x1359280f0 'ax' 'int'
    |   | `-ImplicitCastExpr 0x135941308 <col:21> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x1359412d0 <col:21> 'int' lvalue ParmVar 0x1359281f0 'awidth' 'int'
    |   `-BinaryOperator 0x1359413b0 <col:29, col:34> 'int' '+'
    |     |-ImplicitCastExpr 0x135941380 <col:29> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x135941340 <col:29> 'int' lvalue ParmVar 0x1359282f0 'bx' 'int'
    |     `-ImplicitCastExpr 0x135941398 <col:34> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x135941360 <col:34> 'int' lvalue ParmVar 0x1359283f0 'bwidth' 'int'
    |-BinaryOperator 0x1359415e0 <line:10:5, col:42> 'int' '='
    | |-DeclRefExpr 0x135941438 <col:5> 'int' lvalue Var 0x135940d70 'ry2' 'int'
    | `-CallExpr 0x1359415b0 <col:11, col:42> 'int'
    |   |-ImplicitCastExpr 0x135941598 <col:11> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x135941458 <col:11> 'int ()' Function 0x1359411d8 'MIN' 'int ()'
    |   |-BinaryOperator 0x1359414e8 <col:16, col:21> 'int' '+'
    |   | |-ImplicitCastExpr 0x1359414b8 <col:16> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x135941478 <col:16> 'int' lvalue ParmVar 0x135928170 'ay' 'int'
    |   | `-ImplicitCastExpr 0x1359414d0 <col:21> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x135941498 <col:21> 'int' lvalue ParmVar 0x135928270 'aheight' 'int'
    |   `-BinaryOperator 0x135941578 <col:30, col:35> 'int' '+'
    |     |-ImplicitCastExpr 0x135941548 <col:30> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x135941508 <col:30> 'int' lvalue ParmVar 0x135928370 'by' 'int'
    |     `-ImplicitCastExpr 0x135941560 <col:35> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x135941528 <col:35> 'int' lvalue ParmVar 0x135928470 'bheight' 'int'
    `-IfStmt 0x135941d58 <line:12:5, line:23:5> has_else
      |-BinaryOperator 0x135941720 <line:12:9, col:28> 'int' '&&'
      | |-BinaryOperator 0x135941670 <col:9, col:15> 'int' '>'
      | | |-ImplicitCastExpr 0x135941640 <col:9> 'int' <LValueToRValue>
      | | | `-DeclRefExpr 0x135941600 <col:9> 'int' lvalue Var 0x135940cf0 'rx2' 'int'
      | | `-ImplicitCastExpr 0x135941658 <col:15> 'int' <LValueToRValue>
      | |   `-DeclRefExpr 0x135941620 <col:15> 'int' lvalue Var 0x135940bf0 'rx1' 'int'
      | `-BinaryOperator 0x135941700 <col:22, col:28> 'int' '>'
      |   |-ImplicitCastExpr 0x1359416d0 <col:22> 'int' <LValueToRValue>
      |   | `-DeclRefExpr 0x135941690 <col:22> 'int' lvalue Var 0x135940d70 'ry2' 'int'
      |   `-ImplicitCastExpr 0x1359416e8 <col:28> 'int' <LValueToRValue>
      |     `-DeclRefExpr 0x1359416b0 <col:28> 'int' lvalue Var 0x135940c70 'ry1' 'int'
      |-CompoundStmt 0x135941ad8 <col:33, line:19:5>
      | |-BinaryOperator 0x1359417c8 <line:13:9, col:15> 'int' '='
      | | |-UnaryOperator 0x135941778 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
      | | | `-ImplicitCastExpr 0x135941760 <col:10> 'int *' <LValueToRValue>
      | | |   `-DeclRefExpr 0x135941740 <col:10> 'int *' lvalue ParmVar 0x135928528 'rx' 'int *'
      | | `-ImplicitCastExpr 0x1359417b0 <col:15> 'int' <LValueToRValue>
      | |   `-DeclRefExpr 0x135941790 <col:15> 'int' lvalue Var 0x135940bf0 'rx1' 'int'
      | |-BinaryOperator 0x135941870 <line:14:9, col:15> 'int' '='
      | | |-UnaryOperator 0x135941820 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
      | | | `-ImplicitCastExpr 0x135941808 <col:10> 'int *' <LValueToRValue>
      | | |   `-DeclRefExpr 0x1359417e8 <col:10> 'int *' lvalue ParmVar 0x1359285a8 'ry' 'int *'
      | | `-ImplicitCastExpr 0x135941858 <col:15> 'int' <LValueToRValue>
      | |   `-DeclRefExpr 0x135941838 <col:15> 'int' lvalue Var 0x135940c70 'ry1' 'int'
      | |-BinaryOperator 0x135941970 <line:15:9, col:25> 'int' '='
      | | |-UnaryOperator 0x1359418c8 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
      | | | `-ImplicitCastExpr 0x1359418b0 <col:10> 'int *' <LValueToRValue>
      | | |   `-DeclRefExpr 0x135941890 <col:10> 'int *' lvalue ParmVar 0x135928628 'rwidth' 'int *'
      | | `-BinaryOperator 0x135941950 <col:19, col:25> 'int' '-'
      | |   |-ImplicitCastExpr 0x135941920 <col:19> 'int' <LValueToRValue>
      | |   | `-DeclRefExpr 0x1359418e0 <col:19> 'int' lvalue Var 0x135940cf0 'rx2' 'int'
      | |   `-ImplicitCastExpr 0x135941938 <col:25> 'int' <LValueToRValue>
      | |     `-DeclRefExpr 0x135941900 <col:25> 'int' lvalue Var 0x135940bf0 'rx1' 'int'
      | |-BinaryOperator 0x135941a70 <line:16:9, col:26> 'int' '='
      | | |-UnaryOperator 0x1359419c8 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
      | | | `-ImplicitCastExpr 0x1359419b0 <col:10> 'int *' <LValueToRValue>
      | | |   `-DeclRefExpr 0x135941990 <col:10> 'int *' lvalue ParmVar 0x1359286a8 'rheight' 'int *'
      | | `-BinaryOperator 0x135941a50 <col:20, col:26> 'int' '-'
      | |   |-ImplicitCastExpr 0x135941a20 <col:20> 'int' <LValueToRValue>
      | |   | `-DeclRefExpr 0x1359419e0 <col:20> 'int' lvalue Var 0x135940d70 'ry2' 'int'
      | |   `-ImplicitCastExpr 0x135941a38 <col:26> 'int' <LValueToRValue>
      | |     `-DeclRefExpr 0x135941a00 <col:26> 'int' lvalue Var 0x135940c70 'ry1' 'int'
      | `-ReturnStmt 0x135941ac8 <line:18:9, col:16>
      |   `-RecoveryExpr 0x135941aa8 <col:16> '<dependent type>' contains-errors lvalue
      `-CompoundStmt 0x135941d38 <line:19:12, line:23:5>
        |-BinaryOperator 0x135941cd0 <line:20:9, col:42> 'int' '='
        | |-UnaryOperator 0x135941b48 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
        | | `-ImplicitCastExpr 0x135941b30 <col:10> 'int *' <LValueToRValue>
        | |   `-DeclRefExpr 0x135941b10 <col:10> 'int *' lvalue ParmVar 0x135928528 'rx' 'int *'
        | `-BinaryOperator 0x135941cb0 <col:15, col:42> 'int' '='
        |   |-UnaryOperator 0x135941b98 <col:15, col:16> 'int' lvalue prefix '*' cannot overflow
        |   | `-ImplicitCastExpr 0x135941b80 <col:16> 'int *' <LValueToRValue>
        |   |   `-DeclRefExpr 0x135941b60 <col:16> 'int *' lvalue ParmVar 0x1359285a8 'ry' 'int *'
        |   `-BinaryOperator 0x135941c90 <col:21, col:42> 'int' '='
        |     |-UnaryOperator 0x135941be8 <col:21, col:22> 'int' lvalue prefix '*' cannot overflow
        |     | `-ImplicitCastExpr 0x135941bd0 <col:22> 'int *' <LValueToRValue>
        |     |   `-DeclRefExpr 0x135941bb0 <col:22> 'int *' lvalue ParmVar 0x135928628 'rwidth' 'int *'
        |     `-BinaryOperator 0x135941c70 <col:31, col:42> 'int' '='
        |       |-UnaryOperator 0x135941c38 <col:31, col:32> 'int' lvalue prefix '*' cannot overflow
        |       | `-ImplicitCastExpr 0x135941c20 <col:32> 'int *' <LValueToRValue>
        |       |   `-DeclRefExpr 0x135941c00 <col:32> 'int *' lvalue ParmVar 0x1359286a8 'rheight' 'int *'
        |       `-IntegerLiteral 0x135941c50 <col:42> 'int' 0
        `-ReturnStmt 0x135941d28 <line:22:9, col:16>
          `-RecoveryExpr 0x135941d08 <col:16> '<dependent type>' contains-errors lvalue
