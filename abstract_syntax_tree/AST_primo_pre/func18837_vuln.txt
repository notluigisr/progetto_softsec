`-FunctionDecl 0x12e026748  line:1:12 selinux_netlink_send 'int (struct sock *, struct sk_buff *)' static
  |-ParmVarDecl 0x12e00e248 <col:33, col:46> col:46 used sk 'struct sock *'
  |-ParmVarDecl 0x12e026628 <col:50, col:66> col:66 used skb 'struct sk_buff *'
  `-CompoundStmt 0x12e0298b8 <line:2:1, line:37:1>
    |-DeclStmt 0x12e0268e8 <line:3:2, col:13>
    | `-VarDecl 0x12e026860 <col:2, col:12> col:6 used err 'int' cinit
    |   `-IntegerLiteral 0x12e0268c8 <col:12> 'int' 0
    |-DeclStmt 0x12e026b08 <line:5:2, col:22>
    | |-RecordDecl 0x12e026918 <col:2, col:9> col:9 struct nlmsghdr
    | `-VarDecl 0x12e026a88 <col:2, col:19> col:19 used nlh 'struct nlmsghdr *'
    |-DeclStmt 0x12e026d68 <line:6:2, col:52>
    | |-RecordDecl 0x12e026b20 <col:2, col:9> col:9 struct sk_security_struct
    | `-VarDecl 0x12e026c88 <col:2, col:41> col:29 used sksec 'struct sk_security_struct *' cinit
    |   `-RecoveryExpr 0x12e026d28 <col:37, col:41> '<dependent type>' contains-errors lvalue
    |     `-DeclRefExpr 0x12e026cf0 <col:37> 'struct sock *' lvalue ParmVar 0x12e00e248 'sk' 'struct sock *'
    |-IfStmt 0x12e026fd8 <line:8:2, line:11:2>
    | |-BinaryOperator 0x12e026e38 <line:8:6, col:17> 'int' contains-errors '<'
    | | |-RecoveryExpr 0x12e026db8 <col:6, col:11> '<dependent type>' contains-errors lvalue
    | | | `-DeclRefExpr 0x12e026d80 <col:6> 'struct sk_buff *' lvalue ParmVar 0x12e026628 'skb' 'struct sk_buff *'
    | | `-RecoveryExpr 0x12e026e18 <col:17> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x12e026fb8 <col:31, line:11:2>
    |   |-BinaryOperator 0x12e026f30 <line:9:3, col:10> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x12e026e58 <col:3> 'int' lvalue Var 0x12e026860 'err' 'int'
    |   | `-UnaryOperator 0x12e026f18 <col:9, col:10> '<dependent type>' contains-errors prefix '-' cannot overflow
    |   |   `-ImplicitCastExpr 0x12e026f00 <col:10> '<dependent type>' contains-errors <LValueToRValue>
    |   |     `-RecoveryExpr 0x12e026ee0 <col:10> '<dependent type>' contains-errors lvalue
    |   `-GotoStmt 0x12e026fa0 <line:10:3, col:8> 'out' 0x12e026f50
    |-BinaryOperator 0x12e027210 <line:12:2, col:21> 'struct nlmsghdr *' '='
    | |-DeclRefExpr 0x12e026ff8 <col:2> 'struct nlmsghdr *' lvalue Var 0x12e026a88 'nlh' 'struct nlmsghdr *'
    | `-ImplicitCastExpr 0x12e0271f8 <col:8, col:21> 'struct nlmsghdr *' <IntegralToPointer>
    |   `-CallExpr 0x12e0271b8 <col:8, col:21> 'int'
    |     |-ImplicitCastExpr 0x12e0271a0 <col:8> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x12e027130 <col:8> 'int ()' Function 0x12e027078 'nlmsg_hdr' 'int ()'
    |     `-ImplicitCastExpr 0x12e0271e0 <col:18> 'struct sk_buff *' <LValueToRValue>
    |       `-DeclRefExpr 0x12e027150 <col:18> 'struct sk_buff *' lvalue ParmVar 0x12e026628 'skb' 'struct sk_buff *'
    |-BinaryOperator 0x12e027540 <line:14:2, col:66> 'int' contains-errors '='
    | |-DeclRefExpr 0x12e027230 <col:2> 'int' lvalue Var 0x12e026860 'err' 'int'
    | `-CallExpr 0x12e027508 <col:8, col:66> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x12e027330 <col:8> 'int ()' Function 0x12e027278 'selinux_nlmsg_lookup' 'int ()'
    |   |-RecoveryExpr 0x12e027388 <col:29, col:36> '<dependent type>' contains-errors lvalue
    |   | `-DeclRefExpr 0x12e027350 <col:29> 'struct sk_security_struct *' contains-errors lvalue Var 0x12e026c88 'sksec' 'struct sk_security_struct *'
    |   |-RecoveryExpr 0x12e0273e8 <col:44, col:49> '<dependent type>' contains-errors lvalue
    |   | `-DeclRefExpr 0x12e0273b0 <col:44> 'struct nlmsghdr *' lvalue Var 0x12e026a88 'nlh' 'struct nlmsghdr *'
    |   `-UnaryOperator 0x12e0274f0 <col:61, col:62> 'int *' prefix '&' cannot overflow
    |     `-DeclRefExpr 0x12e027498 <col:62> 'int' lvalue Var 0x12e026860 'err' 'int'
    |-IfStmt 0x12e0296f0 <line:15:2, line:32:2>
    | |-ImplicitCastExpr 0x12e027580 <line:15:6> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x12e027560 <col:6> 'int' lvalue Var 0x12e026860 'err' 'int'
    | `-CompoundStmt 0x12e0296c8 <col:11, line:32:2>
    |   |-IfStmt 0x12e0295d0 <line:16:3, line:26:3>
    |   | |-BinaryOperator 0x12e028e70 <line:16:7, col:15> 'int' contains-errors '=='
    |   | | |-DeclRefExpr 0x12e027598 <col:7> 'int' lvalue Var 0x12e026860 'err' 'int'
    |   | | `-UnaryOperator 0x12e028e58 <col:14, col:15> '<dependent type>' contains-errors prefix '-' cannot overflow
    |   | |   `-ImplicitCastExpr 0x12e028e40 <col:15> '<dependent type>' contains-errors <LValueToRValue>
    |   | |     `-RecoveryExpr 0x12e028e20 <col:15> '<dependent type>' contains-errors lvalue
    |   | `-CompoundStmt 0x12e0295b8 <col:23, line:26:3>
    |   |   `-IfStmt 0x12e029598 <line:23:4, line:25:11>
    |   |     |-RecoveryExpr 0x12e029518 <line:23:8, line:24:49> '_Bool' contains-errors
    |   |     `-BinaryOperator 0x12e029578 <line:25:5, col:11> 'int' '='
    |   |       |-DeclRefExpr 0x12e029538 <col:5> 'int' lvalue Var 0x12e026860 'err' 'int'
    |   |       `-IntegerLiteral 0x12e029558 <col:11> 'int' 0
    |   |-IfStmt 0x12e029690 <line:29:3, line:30:10>
    |   | |-RecoveryExpr 0x12e029610 <line:29:7, col:15> '_Bool' contains-errors
    |   | `-BinaryOperator 0x12e029670 <line:30:4, col:10> 'int' '='
    |   |   |-DeclRefExpr 0x12e029630 <col:4> 'int' lvalue Var 0x12e026860 'err' 'int'
    |   |   `-IntegerLiteral 0x12e029650 <col:10> 'int' 0
    |   `-GotoStmt 0x12e0296b0 <line:31:3, col:8> 'out' 0x12e026f50
    `-LabelStmt 0x12e029898 <line:35:1, line:36:9> 'out'
      `-ReturnStmt 0x12e029888 <col:2, col:9>
        `-ImplicitCastExpr 0x12e029870 <col:9> 'int' <LValueToRValue>
          `-DeclRefExpr 0x12e029850 <col:9> 'int' lvalue Var 0x12e026860 'err' 'int'
