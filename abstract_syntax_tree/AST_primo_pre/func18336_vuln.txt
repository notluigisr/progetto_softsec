`-FunctionDecl 0x14e9281f8  line:1:5 invalid bmp_validate 'int (int *)'
  |-ParmVarDecl 0x14e928128 <col:18, col:32> col:32 invalid in 'int *'
  `-CompoundStmt 0x14e9423c0 <line:2:1, line:28:1>
    |-DeclStmt 0x14e928328 <line:3:2, col:7>
    | `-VarDecl 0x14e9282c0 <col:2, col:6> col:6 used n 'int'
    |-DeclStmt 0x14e9283c0 <line:4:2, col:7>
    | `-VarDecl 0x14e928358 <col:2, col:6> col:6 used i 'int'
    |-DeclStmt 0x14e9284e8 <line:5:2, col:14>
    | `-VarDecl 0x14e928480 <col:2, col:13> col:8 used buf 'char[2]'
    |-CallExpr 0x14e928740 <line:7:2, col:35> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x14e928660 <col:2> 'int ()' Function 0x14e9285a8 'assert' 'int ()'
    | `-BinaryOperator 0x14e928720 <col:9, col:34> 'int' contains-errors '>='
    |   |-RecoveryExpr 0x14e928700 <col:9> '<dependent type>' contains-errors lvalue
    |   `-IntegerLiteral 0x14e928698 <col:34> 'int' 2
    |-IfStmt 0x14e941aa8 <line:10:2, line:12:2>
    | |-BinaryOperator 0x14e941a28 <line:10:6, col:51> 'int' contains-errors '<'
    | | |-ParenExpr 0x14e9419e8 <col:6, col:47> 'int' contains-errors
    | | | `-BinaryOperator 0x14e9419c8 <col:7, col:46> 'int' contains-errors '='
    | | |   |-DeclRefExpr 0x14e928768 <col:7> 'int' lvalue Var 0x14e9282c0 'n' 'int'
    | | |   `-CallExpr 0x14e941990 <col:11, col:46> '<dependent type>' contains-errors
    | | |     |-DeclRefExpr 0x14e9418b8 <col:11> 'int ()' Function 0x14e941800 'jas_stream_read' 'int ()'
    | | |     |-RecoveryExpr 0x14e9418d8 <col:27> '<dependent type>' contains-errors lvalue
    | | |     |-CStyleCastExpr 0x14e941948 <col:31, col:40> 'char *' <NoOp>
    | | |     | `-ImplicitCastExpr 0x14e941930 <col:40> 'char *' <ArrayToPointerDecay> part_of_explicit_cast
    | | |     |   `-DeclRefExpr 0x14e9418f8 <col:40> 'char[2]' lvalue Var 0x14e928480 'buf' 'char[2]'
    | | |     `-IntegerLiteral 0x14e941970 <col:45> 'int' 2
    | | `-IntegerLiteral 0x14e941a08 <col:51> 'int' 0
    | `-CompoundStmt 0x14e941a90 <col:54, line:12:2>
    |   `-ReturnStmt 0x14e941a80 <line:11:3, col:11>
    |     `-UnaryOperator 0x14e941a68 <col:10, col:11> 'int' prefix '-'
    |       `-IntegerLiteral 0x14e941a48 <col:11> 'int' 1
    |-ForStmt 0x14e942020 <line:14:2, line:18:2>
    | |-BinaryOperator 0x14e941b60 <line:14:7, col:15> 'int' '='
    | | |-DeclRefExpr 0x14e941ac8 <col:7> 'int' lvalue Var 0x14e928358 'i' 'int'
    | | `-BinaryOperator 0x14e941b40 <col:11, col:15> 'int' '-'
    | |   |-ImplicitCastExpr 0x14e941b28 <col:11> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x14e941ae8 <col:11> 'int' lvalue Var 0x14e9282c0 'n' 'int'
    | |   `-IntegerLiteral 0x14e941b08 <col:15> 'int' 1
    | |-<<<NULL>>>
    | |-BinaryOperator 0x14e941bd8 <col:18, col:23> 'int' '>='
    | | |-ImplicitCastExpr 0x14e941bc0 <col:18> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14e941b80 <col:18> 'int' lvalue Var 0x14e928358 'i' 'int'
    | | `-IntegerLiteral 0x14e941ba0 <col:23> 'int' 0
    | |-UnaryOperator 0x14e941c18 <col:26, col:28> 'int' prefix '--'
    | | `-DeclRefExpr 0x14e941bf8 <col:28> 'int' lvalue Var 0x14e928358 'i' 'int'
    | `-CompoundStmt 0x14e942008 <col:31, line:18:2>
    |   `-IfStmt 0x14e941fe8 <line:15:3, line:17:3>
    |     |-BinaryOperator 0x14e941f68 <line:15:7, col:40> 'int' contains-errors '=='
    |     | |-CallExpr 0x14e941f18 <col:7, col:35> '<dependent type>' contains-errors
    |     | | |-DeclRefExpr 0x14e941d10 <col:7> 'int ()' Function 0x14e941c58 'jas_stream_ungetc' 'int ()'
    |     | | |-RecoveryExpr 0x14e941d30 <col:25> '<dependent type>' contains-errors lvalue
    |     | | `-ArraySubscriptExpr 0x14e941ef8 <col:29, col:34> 'char' lvalue
    |     | |   |-ImplicitCastExpr 0x14e941ec8 <col:29> 'char *' <ArrayToPointerDecay>
    |     | |   | `-DeclRefExpr 0x14e941d50 <col:29> 'char[2]' lvalue Var 0x14e928480 'buf' 'char[2]'
    |     | |   `-ImplicitCastExpr 0x14e941ee0 <col:33> 'int' <LValueToRValue>
    |     | |     `-DeclRefExpr 0x14e941d70 <col:33> 'int' lvalue Var 0x14e928358 'i' 'int'
    |     | `-RecoveryExpr 0x14e941f48 <col:40> '<dependent type>' contains-errors lvalue
    |     `-CompoundStmt 0x14e941fd0 <col:45, line:17:3>
    |       `-ReturnStmt 0x14e941fc0 <line:16:4, col:12>
    |         `-UnaryOperator 0x14e941fa8 <col:11, col:12> 'int' prefix '-'
    |           `-IntegerLiteral 0x14e941f88 <col:12> 'int' 1
    |-IfStmt 0x14e942130 <line:20:2, line:22:2>
    | |-BinaryOperator 0x14e9420b0 <line:20:6, col:10> 'int' '<'
    | | |-ImplicitCastExpr 0x14e942098 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14e942058 <col:6> 'int' lvalue Var 0x14e9282c0 'n' 'int'
    | | `-IntegerLiteral 0x14e942078 <col:10> 'int' 2
    | `-CompoundStmt 0x14e942118 <col:13, line:22:2>
    |   `-ReturnStmt 0x14e942108 <line:21:3, col:11>
    |     `-UnaryOperator 0x14e9420f0 <col:10, col:11> 'int' prefix '-'
    |       `-IntegerLiteral 0x14e9420d0 <col:11> 'int' 1
    |-IfStmt 0x14e942358 <line:24:2, line:26:2>
    | |-RecoveryExpr 0x14e9422f0 <line:24:6, col:63> '_Bool' contains-errors
    | `-CompoundStmt 0x14e942340 <col:66, line:26:2>
    |   `-ReturnStmt 0x14e942330 <line:25:3, col:10>
    |     `-IntegerLiteral 0x14e942310 <col:10> 'int' 0
    `-ReturnStmt 0x14e9423b0 <line:27:2, col:10>
      `-UnaryOperator 0x14e942398 <col:9, col:10> 'int' prefix '-'
        `-IntegerLiteral 0x14e942378 <col:10> 'int' 1
