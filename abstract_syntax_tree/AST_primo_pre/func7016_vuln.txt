`-FunctionDecl 0x157128438  line:1:5 invalid ASN1_verify 'int (int *, int *, int *, char *, int *)'
  |-ParmVarDecl 0x157128128 <col:17, col:30> col:30 referenced invalid i2d 'int *'
  |-ParmVarDecl 0x1571281a8 <col:35, col:47> col:47 invalid a 'int *'
  |-ParmVarDecl 0x157128228 <col:50, col:67> col:67 invalid signature 'int *'
  |-ParmVarDecl 0x1571282a8 <line:2:3, col:9> col:9 used data 'char *'
  |-ParmVarDecl 0x157128328 <col:15, col:25> col:25 invalid pkey 'int *'
  `-CompoundStmt 0x15780b8a8 <line:3:2, line:56:2>
    |-DeclStmt 0x157128588 <line:5:2, col:20>
    | `-VarDecl 0x157128520 <col:2, col:16> col:16 referenced invalid type 'const int *'
    |-DeclStmt 0x157128720 <line:6:2, col:31>
    | |-VarDecl 0x1571285e8 <col:2, col:17> col:17 used p 'unsigned char *'
    | `-VarDecl 0x157128668 <col:2, col:27> col:20 used buf_in 'unsigned char *' cinit
    |   `-RecoveryExpr 0x1571286e8 <col:27> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x157141920 <line:7:2, col:19>
    | |-VarDecl 0x157128750 <col:2, col:12> col:6 used ret 'int' cinit
    | | `-UnaryOperator 0x1571287d8 <col:11, col:12> 'int' prefix '-'
    | |   `-IntegerLiteral 0x1571287b8 <col:12> 'int' 1
    | |-VarDecl 0x157141818 <col:2, col:14> col:14 used i 'int'
    | `-VarDecl 0x157141898 <col:2, col:16> col:16 used inl 'int'
    |-CallExpr 0x157141b40 <line:9:2, col:22> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x157141a90 <col:2> 'int ()' Function 0x1571419d8 'EVP_MD_CTX_init' 'int ()'
    | `-UnaryOperator 0x157141b28 <col:18, col:19> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   `-RecoveryExpr 0x157141b08 <col:19> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x157141d18 <line:10:2, col:28> 'int' contains-errors '='
    | |-DeclRefExpr 0x157141b68 <col:2> 'int' lvalue Var 0x157141818 'i' 'int'
    | `-CallExpr 0x157141cf0 <col:4, col:28> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x157141c68 <col:4> 'int ()' Function 0x157141bb0 'OBJ_obj2nid' 'int ()'
    |   `-CXXDependentScopeMemberExpr 0x157141ca8 <col:16, col:19> '<dependent type>' contains-errors lvalue ->algorithm
    |     `-RecoveryExpr 0x157141c88 <col:16> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x157142068 <line:11:2, col:41> '<dependent type>' contains-errors '='
    | |-RecoveryExpr 0x157141d58 <col:2> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x157141d38 <col:2> 'const int *' lvalue Var 0x157128520 'type' 'const int *'
    | `-CallExpr 0x157142040 <col:7, col:41> 'int'
    |   |-ImplicitCastExpr 0x157142028 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x157141e60 <col:7> 'int ()' Function 0x157141da8 'EVP_get_digestbyname' 'int ()'
    |   `-CallExpr 0x157141fe8 <col:28, col:40> 'int'
    |     |-ImplicitCastExpr 0x157141fd0 <col:28> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x157141f60 <col:28> 'int ()' Function 0x157141ea8 'OBJ_nid2sn' 'int ()'
    |     `-ImplicitCastExpr 0x157142010 <col:39> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x157141f80 <col:39> 'int' lvalue Var 0x157141818 'i' 'int'
    |-IfStmt 0x157142378 <line:12:2, line:16:3>
    | |-BinaryOperator 0x157142100 <line:12:6, col:14> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x157142088 <col:6> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x1571420e0 <col:14> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x157142358 <line:13:3, line:16:3>
    |   |-CallExpr 0x1571422c0 <line:14:3, col:69> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x157142200 <col:3> 'int ()' Function 0x157142148 'ASN1err' 'int ()'
    |   | |-RecoveryExpr 0x157142280 <col:11> '<dependent type>' contains-errors lvalue
    |   | `-RecoveryExpr 0x1571422a0 <col:30> '<dependent type>' contains-errors lvalue
    |   `-GotoStmt 0x157142340 <line:15:3, col:8> 'err' 0x1571422f0
    |-BinaryOperator 0x1571424b0 <line:18:2, col:19> 'int' contains-errors '='
    | |-DeclRefExpr 0x157142398 <col:2> 'int' lvalue Var 0x157141898 'inl' 'int'
    | `-CallExpr 0x157142480 <col:6, col:19> '<dependent type>' contains-errors
    |   |-RecoveryExpr 0x1571423b8 <col:6> '<dependent type>' contains-errors lvalue
    |   |-DeclRefExpr 0x1571423d8 <col:10> 'char *' lvalue ParmVar 0x1571282a8 'data' 'char *'
    |   `-RecoveryExpr 0x157142460 <col:15> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x15780a900 <line:19:2, col:41> 'unsigned char *' contains-errors '='
    | |-DeclRefExpr 0x1571424d0 <col:2> 'unsigned char *' contains-errors lvalue Var 0x157128668 'buf_in' 'unsigned char *'
    | `-ImplicitCastExpr 0x1571426a8 <col:9, col:41> 'unsigned char *' <IntegralToPointer>
    |   `-CallExpr 0x157142680 <col:9, col:41> 'int'
    |     |-ImplicitCastExpr 0x157142668 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x1571425d0 <col:9> 'int ()' Function 0x157142518 'OPENSSL_malloc' 'int ()'
    |     `-CStyleCastExpr 0x157142640 <col:24, col:38> 'unsigned int' <IntegralCast>
    |       `-ImplicitCastExpr 0x157142628 <col:38> 'int' <LValueToRValue> part_of_explicit_cast
    |         `-DeclRefExpr 0x1571425f0 <col:38> 'int' lvalue Var 0x157141898 'inl' 'int'
    |-IfStmt 0x15780aa08 <line:20:2, line:24:3>
    | |-BinaryOperator 0x15780a998 <line:20:6, col:16> 'int' contains-errors '=='
    | | |-DeclRefExpr 0x15780a920 <col:6> 'unsigned char *' contains-errors lvalue Var 0x157128668 'buf_in' 'unsigned char *'
    | | `-RecoveryExpr 0x15780a978 <col:16> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x15780a9f0 <line:21:3, line:24:3>
    |   `-GotoStmt 0x15780a9d8 <line:23:3, col:8> 'err' 0x1571422f0
    |-BinaryOperator 0x15780aa80 <line:25:2, col:4> 'unsigned char *' contains-errors '='
    | |-DeclRefExpr 0x15780aa28 <col:2> 'unsigned char *' lvalue Var 0x1571285e8 'p' 'unsigned char *'
    | `-ImplicitCastExpr 0x15780aa68 <col:4> 'unsigned char *' contains-errors <LValueToRValue>
    |   `-DeclRefExpr 0x15780aa48 <col:4> 'unsigned char *' contains-errors lvalue Var 0x157128668 'buf_in' 'unsigned char *'
    |-CallExpr 0x15780ab78 <line:27:2, col:13> '<dependent type>' contains-errors
    | |-RecoveryExpr 0x15780aac0 <col:2> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x15780aaa0 <col:2> 'int *' lvalue ParmVar 0x157128128 'i2d' 'int *'
    | |-DeclRefExpr 0x15780aae8 <col:6> 'char *' lvalue ParmVar 0x1571282a8 'data' 'char *'
    | `-UnaryOperator 0x15780ab60 <col:11, col:12> 'unsigned char **' prefix '&' cannot overflow
    |   `-DeclRefExpr 0x15780ab08 <col:12> 'unsigned char *' lvalue Var 0x1571285e8 'p' 'unsigned char *'
    |-CallExpr 0x15780b030 <line:32:2, col:42> 'int' contains-errors
    | |-ImplicitCastExpr 0x15780b018 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x15780af60 <col:2> 'int ()' Function 0x15780aea8 'OPENSSL_cleanse' 'int ()'
    | |-ImplicitCastExpr 0x15780b060 <col:18> 'unsigned char *' contains-errors <LValueToRValue>
    | | `-DeclRefExpr 0x15780af80 <col:18> 'unsigned char *' contains-errors lvalue Var 0x157128668 'buf_in' 'unsigned char *'
    | `-CStyleCastExpr 0x15780aff0 <col:25, col:39> 'unsigned int' <IntegralCast>
    |   `-ImplicitCastExpr 0x15780afd8 <col:39> 'int' <LValueToRValue> part_of_explicit_cast
    |     `-DeclRefExpr 0x15780afa0 <col:39> 'int' lvalue Var 0x157141898 'inl' 'int'
    |-CallExpr 0x15780b1b0 <line:33:2, col:21> 'int' contains-errors
    | |-ImplicitCastExpr 0x15780b198 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x15780b158 <col:2> 'int ()' Function 0x15780b0a0 'OPENSSL_free' 'int ()'
    | `-ImplicitCastExpr 0x15780b1d8 <col:15> 'unsigned char *' contains-errors <LValueToRValue>
    |   `-DeclRefExpr 0x15780b178 <col:15> 'unsigned char *' contains-errors lvalue Var 0x157128668 'buf_in' 'unsigned char *'
    |-IfStmt 0x15780b290 <line:35:2, line:39:3>
    | |-UnaryOperator 0x15780b228 <line:35:6, col:7> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x15780b210 <col:7> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x15780b1f0 <col:7> 'int' lvalue Var 0x157128750 'ret' 'int'
    | `-CompoundStmt 0x15780b278 <line:36:3, line:39:3>
    |   `-GotoStmt 0x15780b260 <line:38:3, col:8> 'err' 0x1571422f0
    |-BinaryOperator 0x15780b308 <line:40:2, col:9> 'int' '='
    | |-DeclRefExpr 0x15780b2b0 <col:2> 'int' lvalue Var 0x157128750 'ret' 'int'
    | `-UnaryOperator 0x15780b2f0 <col:8, col:9> 'int' prefix '-'
    |   `-IntegerLiteral 0x15780b2d0 <col:9> 'int' 1
    |-IfStmt 0x15780b698 <line:43:2, line:49:3>
    | |-RecoveryExpr 0x15780b5b8 <line:43:6, line:44:45> '_Bool' contains-errors
    | `-CompoundStmt 0x15780b678 <line:45:3, line:49:3>
    |   |-BinaryOperator 0x15780b640 <line:47:3, col:7> 'int' '='
    |   | |-DeclRefExpr 0x15780b600 <col:3> 'int' lvalue Var 0x157128750 'ret' 'int'
    |   | `-IntegerLiteral 0x15780b620 <col:7> 'int' 0
    |   `-GotoStmt 0x15780b660 <line:48:3, col:8> 'err' 0x1571422f0
    |-BinaryOperator 0x15780b6f8 <line:52:2, col:6> 'int' '='
    | |-DeclRefExpr 0x15780b6b8 <col:2> 'int' lvalue Var 0x157128750 'ret' 'int'
    | `-IntegerLiteral 0x15780b6d8 <col:6> 'int' 1
    |-LabelStmt 0x15780b820 <line:53:1, col:4> 'err'
    | `-NullStmt 0x15780b818 <col:4>
    `-ReturnStmt 0x15780b898 <line:55:2, col:12>
      `-ImplicitCastExpr 0x15780b880 <col:8, col:12> 'int' <LValueToRValue>
        `-ParenExpr 0x15780b860 <col:8, col:12> 'int' lvalue
          `-DeclRefExpr 0x15780b840 <col:9> 'int' lvalue Var 0x157128750 'ret' 'int'
