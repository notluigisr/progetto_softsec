`-FunctionDecl 0x13b80de38  line:1:1 PHP_METHOD 'int (int, int)'
  |-ParmVarDecl 0x13b80dd58 <col:12> col:12 Phar 'int'
  |-ParmVarDecl 0x13b80dcd8 <col:18> col:18 offsetUnset 'int'
  `-CompoundStmt 0x13c8085c0 <line:2:1, line:47:1>
    |-DeclStmt 0x13b80e050 <line:3:2, col:21>
    | |-VarDecl 0x13b80df50 <col:2, col:8> col:8 used fname 'char *'
    | `-VarDecl 0x13b80dfd0 <col:2, col:16> col:16 used error 'char *'
    |-UnaryExprOrTypeTraitExpr 0x13b80e0d8 <line:4:2, col:9> 'unsigned long' contains-errors sizeof
    | `-RecoveryExpr 0x13b80e0b8 <col:9> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x13b80e288 <line:6:2, col:22> 'int'
    | `-ImplicitCastExpr 0x13b80e270 <col:2> 'int (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x13b80e220 <col:2> 'int ()' Function 0x13b80e168 'PHAR_ARCHIVE_OBJECT' 'int ()'
    |-IfStmt 0x13b827e80 <line:8:2, line:11:2>
    | |-BinaryOperator 0x13b827c08 <line:8:6, col:46> 'int' contains-errors '&&'
    | | |-CallExpr 0x13b827b00 <col:6, col:21> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x13b80e388 <col:6> 'int ()' Function 0x13b80e2d0 'PHAR_G' 'int ()'
    | | | `-RecoveryExpr 0x13b827ae0 <col:13> '<dependent type>' contains-errors lvalue
    | | `-UnaryOperator 0x13b827bf0 <col:26, col:46> '<dependent type>' contains-errors prefix '!' cannot overflow
    | |   `-ImplicitCastExpr 0x13b827bd8 <col:27, col:46> '<dependent type>' contains-errors <LValueToRValue>
    | |     `-CXXDependentScopeMemberExpr 0x13b827b90 <col:27, col:46> '<dependent type>' contains-errors lvalue ->is_data
    | |       `-CXXDependentScopeMemberExpr 0x13b827b48 <col:27, col:37> '<dependent type>' contains-errors lvalue ->archive
    | |         `-RecoveryExpr 0x13b827b28 <col:27> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x13b827e60 <col:55, line:11:2>
    |   |-CallExpr 0x13b827e18 <line:9:3, col:66> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x13b827d08 <col:3> 'int ()' Function 0x13b827c50 'zend_throw_exception_ex' 'int ()'
    |   | |-RecoveryExpr 0x13b827df8 <col:27> '<dependent type>' contains-errors lvalue
    |   | |-IntegerLiteral 0x13b827d40 <col:58> 'int' 0
    |   | `-StringLiteral 0x13b827da0 <col:61> 'char[4]' lvalue "STR"
    |   `-ReturnStmt 0x13b827e50 <line:10:3>
    |-IfStmt 0x13b828360 <line:13:2, line:15:2>
    | |-BinaryOperator 0x13b828318 <line:13:6, col:75> 'int' contains-errors '=='
    | | |-CallExpr 0x13b8282b8 <col:6, col:70> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x13b827f80 <col:6> 'int ()' Function 0x13b827ec8 'zend_parse_parameters' 'int ()'
    | | | |-CallExpr 0x13b828260 <col:28, col:42> 'int'
    | | | | `-ImplicitCastExpr 0x13b828248 <col:28> 'int (*)()' <FunctionToPointerDecay>
    | | | |   `-DeclRefExpr 0x13b828080 <col:28> 'int ()' Function 0x13b827fc8 'ZEND_NUM_ARGS' 'int ()'
    | | | |-StringLiteral 0x13b8280d8 <col:45> 'char[4]' lvalue "STR"
    | | | |-UnaryOperator 0x13b828150 <col:52, col:53> 'char **' prefix '&' cannot overflow
    | | | | `-DeclRefExpr 0x13b8280f8 <col:53> 'char *' lvalue Var 0x13b80df50 'fname' 'char *'
    | | | `-UnaryOperator 0x13b8282a0 <col:60, col:61> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | |   `-RecoveryExpr 0x13b828280 <col:61> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x13b8282f8 <col:75> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x13b828348 <col:84, line:15:2>
    |   `-ReturnStmt 0x13b828338 <line:14:3>
    `-IfStmt 0x13c808590 <line:17:2, line:46:2> has_else
      |-RecoveryExpr 0x13b8284a0 <line:17:6, col:80> '_Bool' contains-errors
      |-CompoundStmt 0x13c808568 <col:83, line:44:2>
      | `-IfStmt 0x13c808548 <line:18:3, line:43:3>
      |   |-RecoveryExpr 0x13b8285e0 <line:18:7, col:101> '_Bool' contains-errors
      |   `-CompoundStmt 0x13c808520 <col:104, line:43:3>
      |     |-IfStmt 0x13b828648 <line:19:4, line:22:4>
      |     | |-RecoveryExpr 0x13b828600 <line:19:8, col:15> '_Bool' contains-errors
      |     | `-CompoundStmt 0x13b828630 <col:27, line:22:4>
      |     |   `-ReturnStmt 0x13b828620 <line:21:5>
      |     |-IfStmt 0x13b8288a8 <line:24:4, line:31:4>
      |     | |-RecoveryExpr 0x13b828668 <line:24:8, col:27> '_Bool' contains-errors
      |     | `-CompoundStmt 0x13b828890 <col:42, line:31:4>
      |     |   `-IfStmt 0x13b828830 <line:25:5, line:28:5>
      |     |     |-RecoveryExpr 0x13b828788 <line:25:9, col:59> '_Bool' contains-errors
      |     |     `-CompoundStmt 0x13b828818 <col:62, line:28:5>
      |     |       `-ReturnStmt 0x13b828808 <line:27:6>
      |     `-IfStmt 0x13c808500 <line:37:4, line:40:4>
      |       |-ImplicitCastExpr 0x13c8082d8 <line:37:8> 'char *' <LValueToRValue>
      |       | `-DeclRefExpr 0x13c8082b8 <col:8> 'char *' lvalue Var 0x13b80dfd0 'error' 'char *'
      |       `-CompoundStmt 0x13c8084e8 <col:15, line:40:4>
      |         `-CallExpr 0x13c8084a8 <line:39:5, col:16> 'int'
      |           |-ImplicitCastExpr 0x13c808490 <col:5> 'int (*)()' <FunctionToPointerDecay>
      |           | `-DeclRefExpr 0x13c808450 <col:5> 'int ()' Function 0x13c808398 'efree' 'int ()'
      |           `-ImplicitCastExpr 0x13c8084d0 <col:11> 'char *' <LValueToRValue>
      |             `-DeclRefExpr 0x13c808470 <col:11> 'char *' lvalue Var 0x13b80dfd0 'error' 'char *'
      `-CompoundStmt 0x13c808580 <line:44:9, line:46:2>
