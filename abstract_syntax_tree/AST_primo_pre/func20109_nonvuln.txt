`-FunctionDecl 0x1261281c8  line:1:1 vimpty_getenv 'int (const char *)'
  |-ParmVarDecl 0x1261280f0 <col:15, col:29> col:29 used string 'const char *'
  `-CompoundStmt 0x126142e60 <line:2:1, line:16:1>
    |-DeclStmt 0x126128340 <line:3:5, col:10>
    | `-VarDecl 0x1261282d8 <col:5, col:9> col:9 used i 'int'
    |-DeclStmt 0x1261283d8 <line:4:5, col:14>
    | `-VarDecl 0x126128370 <col:5, col:13> col:13 used p 'char *'
    |-IfStmt 0x1261284d0 <line:6:5, line:7:9>
    | |-BinaryOperator 0x126128468 <line:6:9, col:19> 'int' contains-errors '<'
    | | |-RecoveryExpr 0x126128448 <col:9> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x126128408 <col:19> 'int' 0
    | `-ReturnStmt 0x1261284c0 <line:7:2, col:9>
    |   `-RecoveryExpr 0x1261284a0 <col:9> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x126128730 <line:9:5, col:31> 'int' '='
    | |-DeclRefExpr 0x1261284f0 <col:5> 'int' lvalue Var 0x1261282d8 'i' 'int'
    | `-CallExpr 0x126128708 <col:9, col:31> 'int'
    |   |-ImplicitCastExpr 0x1261286f0 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x126128620 <col:9> 'int ()' Function 0x126128568 'findenv' 'int ()'
    |   `-CStyleCastExpr 0x126128690 <col:17, col:25> 'char *' <NoOp>
    |     `-ImplicitCastExpr 0x126128678 <col:25> 'const char *' <LValueToRValue> part_of_explicit_cast
    |       `-DeclRefExpr 0x126128640 <col:25> 'const char *' lvalue ParmVar 0x1261280f0 'string' 'const char *'
    |-IfStmt 0x126142810 <line:11:5, line:12:9>
    | |-BinaryOperator 0x1261287a8 <line:11:9, col:13> 'int' '<'
    | | |-ImplicitCastExpr 0x126128790 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x126128750 <col:9> 'int' lvalue Var 0x1261282d8 'i' 'int'
    | | `-IntegerLiteral 0x126128770 <col:13> 'int' 0
    | `-ReturnStmt 0x126142800 <line:12:2, col:9>
    |   `-RecoveryExpr 0x1261287e0 <col:9> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x126142e50 <line:15:5, col:18>
      `-ImplicitCastExpr 0x126142a18 <col:12, col:18> 'int' <PointerToIntegral>
        `-ParenExpr 0x1261429f8 <col:12, col:18> 'char *'
          `-BinaryOperator 0x1261429d8 <col:13, col:17> 'char *' '+'
            |-ImplicitCastExpr 0x1261429c0 <col:13> 'char *' <LValueToRValue>
            | `-DeclRefExpr 0x126142980 <col:13> 'char *' lvalue Var 0x126128370 'p' 'char *'
            `-IntegerLiteral 0x1261429a0 <col:17> 'int' 1
