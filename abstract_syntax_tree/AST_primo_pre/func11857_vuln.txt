`-FunctionDecl 0x13900dda8  line:1:1 validate_exec 'int (const char *)'
  |-ParmVarDecl 0x13900dcd8 <col:15, col:27> col:27 used path 'const char *'
  `-CompoundStmt 0x139027060 <line:2:1, line:36:1>
    |-DeclStmt 0x139026648 <line:3:2, col:17>
    | |-RecordDecl 0x13900dea0 <col:2, col:9> col:9 struct stat
    | `-VarDecl 0x13900df98 <col:2, col:14> col:14 invalid buf 'struct stat'
    |-DeclStmt 0x1390266e0 <line:4:2, col:12>
    | `-VarDecl 0x139026678 <col:2, col:8> col:8 used is_r 'int'
    |-DeclStmt 0x139026778 <line:5:2, col:12>
    | `-VarDecl 0x139026710 <col:2, col:8> col:8 used is_x 'int'
    |-IfStmt 0x1390269f0 <line:21:2, line:22:11>
    | |-BinaryOperator 0x139026988 <line:21:6, col:25> 'int' contains-errors '<'
    | | |-CallExpr 0x139026938 <col:6, col:21> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x1390268c0 <col:6> 'int ()' Function 0x139026808 'stat' 'int ()'
    | | | |-DeclRefExpr 0x1390268e0 <col:11> 'const char *' lvalue ParmVar 0x13900dcd8 'path' 'const char *'
    | | | `-UnaryOperator 0x139026920 <col:17, col:18> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | |   `-RecoveryExpr 0x139026900 <col:18> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x139026968 <col:25> 'int' 0
    | `-ReturnStmt 0x1390269e0 <line:22:3, col:11>
    |   `-UnaryOperator 0x1390269c8 <col:10, col:11> 'int' prefix '-'
    |     `-IntegerLiteral 0x1390269a8 <col:11> 'int' 1
    |-IfStmt 0x139026c00 <line:24:2, line:25:11>
    | |-UnaryOperator 0x139026ba0 <line:24:6, col:26> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-CallExpr 0x139026b78 <col:7, col:26> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x139026af0 <col:7> 'int ()' Function 0x139026a38 'S_ISREG' 'int ()'
    | |   `-CXXDependentScopeMemberExpr 0x139026b30 <col:15, col:19> '<dependent type>' contains-errors lvalue .st_mode
    | |     `-RecoveryExpr 0x139026b10 <col:15> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x139026bf0 <line:25:3, col:11>
    |   `-UnaryOperator 0x139026bd8 <col:10, col:11> 'int' prefix '-'
    |     `-IntegerLiteral 0x139026bb8 <col:11> 'int' 1
    `-ReturnStmt 0x139027050 <line:35:2, col:35>
      `-ConditionalOperator 0x139027020 <col:9, col:35> 'int'
        |-ImplicitCastExpr 0x139027008 <col:9> 'int' <LValueToRValue>
        | `-DeclRefExpr 0x139026ed0 <col:9> 'int' lvalue Var 0x139026710 'is_x' 'int'
        |-ParenExpr 0x139026fb0 <col:16, col:30> 'int'
        | `-ConditionalOperator 0x139026f80 <col:17, col:29> 'int'
        |   |-ImplicitCastExpr 0x139026f68 <col:17> 'int' <LValueToRValue>
        |   | `-DeclRefExpr 0x139026ef0 <col:17> 'int' lvalue Var 0x139026678 'is_r' 'int'
        |   |-IntegerLiteral 0x139026f10 <col:24> 'int' 0
        |   `-UnaryOperator 0x139026f50 <col:28, col:29> 'int' prefix '-'
        |     `-IntegerLiteral 0x139026f30 <col:29> 'int' 2
        `-UnaryOperator 0x139026ff0 <col:34, col:35> 'int' prefix '-'
          `-IntegerLiteral 0x139026fd0 <col:35> 'int' 1
