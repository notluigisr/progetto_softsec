`-FunctionDecl 0x135927bf8  line:1:14 invalid token 'char *(int *)' static
  |-ParmVarDecl 0x135927b28 <col:20, col:26> col:26 invalid stream 'int *'
  `-CompoundStmt 0x1359420e0 <line:2:1, line:24:1>
    |-DeclStmt 0x135927dc0 <line:3:5, col:16>
    | |-VarDecl 0x135927cc0 <col:5, col:9> col:9 used ch 'int'
    | `-VarDecl 0x135927d40 <col:5, col:13> col:13 used idx 'int'
    |-WhileStmt 0x1359413c8 <line:6:5, line:7:50>
    | |-BinaryOperator 0x1359413a0 <line:6:12, line:7:46> 'int' contains-errors '||'
    | | |-BinaryOperator 0x135941348 <line:6:12, line:7:32> 'int' contains-errors '||'
    | | | |-BinaryOperator 0x1359412f0 <line:6:12, line:7:19> 'int' contains-errors '||'
    | | | | |-BinaryOperator 0x135941298 <line:6:12, col:49> 'int' contains-errors '||'
    | | | | | |-BinaryOperator 0x135928010 <col:12, col:36> 'int' contains-errors '=='
    | | | | | | |-ParenExpr 0x135927fd8 <col:12, col:31> 'int' contains-errors
    | | | | | | | `-BinaryOperator 0x135927fb8 <col:13, col:30> 'int' contains-errors '='
    | | | | | | |   |-DeclRefExpr 0x135927dd8 <col:13> 'int' lvalue Var 0x135927cc0 'ch' 'int'
    | | | | | | |   `-CallExpr 0x135927f90 <col:18, col:30> '<dependent type>' contains-errors
    | | | | | | |     |-DeclRefExpr 0x135927f50 <col:18> 'int ()' Function 0x135927e98 'fgetc' 'int ()'
    | | | | | | |     `-RecoveryExpr 0x135927f70 <col:24> '<dependent type>' contains-errors lvalue
    | | | | | | `-CharacterLiteral 0x135927ff8 <col:36> 'int' 32
    | | | | | `-BinaryOperator 0x135941278 <col:43, col:49> 'int' contains-errors '=='
    | | | | |   |-DeclRefExpr 0x135928030 <col:43> 'int' lvalue Var 0x135927cc0 'ch' 'int'
    | | | | |   `-RecoveryExpr 0x135941258 <col:49> '<dependent type>' contains-errors lvalue
    | | | | `-BinaryOperator 0x1359412d0 <line:7:13, col:19> 'int' '=='
    | | | |   |-ImplicitCastExpr 0x1359412b8 <col:13> 'int' <LValueToRValue>
    | | | |   | `-DeclRefExpr 0x1359280a8 <col:13> 'int' lvalue Var 0x135927cc0 'ch' 'int'
    | | | |   `-CharacterLiteral 0x1359280c8 <col:19> 'int' 44
    | | | `-BinaryOperator 0x135941328 <col:26, col:32> 'int' '=='
    | | |   |-ImplicitCastExpr 0x135941310 <col:26> 'int' <LValueToRValue>
    | | |   | `-DeclRefExpr 0x135928138 <col:26> 'int' lvalue Var 0x135927cc0 'ch' 'int'
    | | |   `-CharacterLiteral 0x135928158 <col:32> 'int' 9
    | | `-BinaryOperator 0x135941380 <col:40, col:46> 'int' '=='
    | |   |-ImplicitCastExpr 0x135941368 <col:40> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x1359281c8 <col:40> 'int' lvalue Var 0x135927cc0 'ch' 'int'
    | |   `-CharacterLiteral 0x1359281e8 <col:46> 'int' 59
    | `-NullStmt 0x1359413c0 <col:50>
    |-BinaryOperator 0x135941428 <line:9:5, col:11> 'int' '='
    | |-DeclRefExpr 0x1359413e8 <col:5> 'int' lvalue Var 0x135927d40 'idx' 'int'
    | `-IntegerLiteral 0x135941408 <col:11> 'int' 0
    |-WhileStmt 0x135941b48 <line:10:5, line:15:5>
    | |-BinaryOperator 0x135941a10 <line:10:12, line:11:61> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x1359419b0 <line:10:12, line:11:48> 'int' contains-errors '&&'
    | | | |-BinaryOperator 0x135941958 <line:10:12, line:11:35> 'int' contains-errors '&&'
    | | | | |-BinaryOperator 0x135941900 <line:10:12, line:11:21> 'int' contains-errors '&&'
    | | | | | |-BinaryOperator 0x1359418a8 <line:10:12, col:44> 'int' contains-errors '&&'
    | | | | | | |-BinaryOperator 0x135941848 <col:12, col:31> 'int' contains-errors '&&'
    | | | | | | | |-BinaryOperator 0x1359417f0 <col:12, col:18> 'int' contains-errors '!='
    | | | | | | | | |-DeclRefExpr 0x135941448 <col:12> 'int' lvalue Var 0x135927cc0 'ch' 'int'
    | | | | | | | | `-RecoveryExpr 0x1359417d0 <col:18> '<dependent type>' contains-errors lvalue
    | | | | | | | `-BinaryOperator 0x135941828 <col:25, col:31> 'int' '!='
    | | | | | | |   |-ImplicitCastExpr 0x135941810 <col:25> 'int' <LValueToRValue>
    | | | | | | |   | `-DeclRefExpr 0x1359414a0 <col:25> 'int' lvalue Var 0x135927cc0 'ch' 'int'
    | | | | | | |   `-CharacterLiteral 0x1359414c0 <col:31> 'int' 32
    | | | | | | `-BinaryOperator 0x135941888 <col:38, col:44> 'int' contains-errors '!='
    | | | | | |   |-DeclRefExpr 0x135941530 <col:38> 'int' lvalue Var 0x135927cc0 'ch' 'int'
    | | | | | |   `-RecoveryExpr 0x135941868 <col:44> '<dependent type>' contains-errors lvalue
    | | | | | `-BinaryOperator 0x1359418e0 <line:11:15, col:21> 'int' '!='
    | | | | |   |-ImplicitCastExpr 0x1359418c8 <col:15> 'int' <LValueToRValue>
    | | | | |   | `-DeclRefExpr 0x1359415a8 <col:15> 'int' lvalue Var 0x135927cc0 'ch' 'int'
    | | | | |   `-CharacterLiteral 0x1359415c8 <col:21> 'int' 9
    | | | | `-BinaryOperator 0x135941938 <col:29, col:35> 'int' '!='
    | | | |   |-ImplicitCastExpr 0x135941920 <col:29> 'int' <LValueToRValue>
    | | | |   | `-DeclRefExpr 0x135941638 <col:29> 'int' lvalue Var 0x135927cc0 'ch' 'int'
    | | | |   `-CharacterLiteral 0x135941658 <col:35> 'int' 58
    | | | `-BinaryOperator 0x135941990 <col:42, col:48> 'int' '!='
    | | |   |-ImplicitCastExpr 0x135941978 <col:42> 'int' <LValueToRValue>
    | | |   | `-DeclRefExpr 0x1359416c8 <col:42> 'int' lvalue Var 0x135927cc0 'ch' 'int'
    | | |   `-CharacterLiteral 0x1359416e8 <col:48> 'int' 59
    | | `-BinaryOperator 0x1359419f0 <col:55, col:61> 'int' contains-errors '<'
    | |   |-DeclRefExpr 0x135941758 <col:55> 'int' lvalue Var 0x135927d40 'idx' 'int'
    | |   `-RecoveryExpr 0x1359419d0 <col:61> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x135941b30 <line:12:5, line:15:5>
    |   `-BinaryOperator 0x135941b10 <line:14:9, col:26> 'int' contains-errors '='
    |     |-DeclRefExpr 0x135941a88 <col:9> 'int' lvalue Var 0x135927cc0 'ch' 'int'
    |     `-CallExpr 0x135941ae8 <col:14, col:26> '<dependent type>' contains-errors
    |       |-DeclRefExpr 0x135941aa8 <col:14> 'int ()' Function 0x135927e98 'fgetc' 'int ()'
    |       `-RecoveryExpr 0x135941ac8 <col:20> '<dependent type>' contains-errors lvalue
    `-IfStmt 0x135941f98 <line:18:5, col:50>
      |-BinaryOperator 0x135941e08 <col:9, col:27> 'int' '&&'
      | |-BinaryOperator 0x135941d78 <col:9, col:16> 'int' '>='
      | | |-ImplicitCastExpr 0x135941d60 <col:9> 'int' <LValueToRValue>
      | | | `-DeclRefExpr 0x135941d20 <col:9> 'int' lvalue Var 0x135927d40 'idx' 'int'
      | | `-IntegerLiteral 0x135941d40 <col:16> 'int' 1
      | `-BinaryOperator 0x135941de8 <col:21, col:27> 'int' '!='
      |   |-ImplicitCastExpr 0x135941dd0 <col:21> 'int' <LValueToRValue>
      |   | `-DeclRefExpr 0x135941d98 <col:21> 'int' lvalue Var 0x135927cc0 'ch' 'int'
      |   `-CharacterLiteral 0x135941db8 <col:27> 'int' 58
      `-CallExpr 0x135941f68 <col:33, col:50> '<dependent type>' contains-errors
        |-DeclRefExpr 0x135941f08 <col:33> 'int ()' Function 0x135941e50 'ungetc' 'int ()'
        |-DeclRefExpr 0x135941f28 <col:40> 'int' lvalue Var 0x135927cc0 'ch' 'int'
        `-RecoveryExpr 0x135941f48 <col:44> '<dependent type>' contains-errors lvalue
