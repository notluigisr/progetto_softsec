`-FunctionDecl 0x1421281a8  line:1:1 sanitiseBase64 'int (char *)'
  |-ParmVarDecl 0x1421280d8 <col:16, col:22> col:22 used s 'char *'
  `-CompoundStmt 0x142142b58 <line:2:1, line:12:1>
    |-CallExpr 0x1421284b8 <line:3:2, col:21> 'int'
    | |-ImplicitCastExpr 0x1421284a0 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x1421283d0 <col:2> 'int ()' Function 0x142128318 'cli_dbgmsg' 'int ()'
    | |-ImplicitCastExpr 0x1421284e8 <col:13> 'char *' <ArrayToPointerDecay>
    | | `-StringLiteral 0x142128430 <col:13> 'char[4]' lvalue "STR"
    | `-ImplicitCastExpr 0x142128500 <col:20> 'char *' <LValueToRValue>
    |   `-DeclRefExpr 0x142128450 <col:20> 'char *' lvalue ParmVar 0x1421280d8 's' 'char *'
    `-WhileStmt 0x142142b38 <line:4:2, line:11:5>
      |-ImplicitCastExpr 0x142128568 <line:4:8, col:9> 'char' <LValueToRValue>
      | `-UnaryOperator 0x142128550 <col:8, col:9> 'char' lvalue prefix '*' cannot overflow
      |   `-ImplicitCastExpr 0x142128538 <col:9> 'char *' <LValueToRValue>
      |     `-DeclRefExpr 0x142128518 <col:9> 'char *' lvalue ParmVar 0x1421280d8 's' 'char *'
      `-IfStmt 0x142142b08 <line:5:3, line:11:5> has_else
        |-RecoveryExpr 0x1421286f8 <line:5:6, col:48> '_Bool' contains-errors
        |-CompoundStmt 0x142142ab0 <col:53, line:10:3>
        | |-DeclStmt 0x142128798 <line:6:4, col:12>
        | | `-VarDecl 0x142128730 <col:4, col:10> col:10 used p1 'char *'
        | `-ForStmt 0x142142a78 <line:8:4, line:9:17>
        |   |-BinaryOperator 0x142142818 <line:8:8, col:13> 'char *' '='
        |   | |-DeclRefExpr 0x1421287b0 <col:8> 'char *' lvalue Var 0x142128730 'p1' 'char *'
        |   | `-ImplicitCastExpr 0x142142800 <col:13> 'char *' <LValueToRValue>
        |   |   `-DeclRefExpr 0x1421287d0 <col:13> 'char *' lvalue ParmVar 0x1421280d8 's' 'char *'
        |   |-<<<NULL>>>
        |   |-BinaryOperator 0x1421428f8 <col:16, col:25> 'int' '!='
        |   | |-ImplicitCastExpr 0x1421428e0 <col:16, col:20> 'int' <IntegralCast>
        |   | | `-ImplicitCastExpr 0x1421428c8 <col:16, col:20> 'char' <LValueToRValue>
        |   | |   `-ArraySubscriptExpr 0x142142890 <col:16, col:20> 'char' lvalue
        |   | |     |-ImplicitCastExpr 0x142142878 <col:16> 'char *' <LValueToRValue>
        |   | |     | `-DeclRefExpr 0x142142838 <col:16> 'char *' lvalue Var 0x142128730 'p1' 'char *'
        |   | |     `-IntegerLiteral 0x142142858 <col:19> 'int' 0
        |   | `-CharacterLiteral 0x1421428b0 <col:25> 'int' 0
        |   |-UnaryOperator 0x142142938 <col:31, col:33> 'char *' postfix '++'
        |   | `-DeclRefExpr 0x142142918 <col:31> 'char *' lvalue Var 0x142128730 'p1' 'char *'
        |   `-BinaryOperator 0x142142a58 <line:9:5, col:17> 'char' '='
        |     |-ArraySubscriptExpr 0x1421429a8 <col:5, col:9> 'char' lvalue
        |     | |-ImplicitCastExpr 0x142142990 <col:5> 'char *' <LValueToRValue>
        |     | | `-DeclRefExpr 0x142142950 <col:5> 'char *' lvalue Var 0x142128730 'p1' 'char *'
        |     | `-IntegerLiteral 0x142142970 <col:8> 'int' 0
        |     `-ImplicitCastExpr 0x142142a40 <col:13, col:17> 'char' <LValueToRValue>
        |       `-ArraySubscriptExpr 0x142142a20 <col:13, col:17> 'char' lvalue
        |         |-ImplicitCastExpr 0x142142a08 <col:13> 'char *' <LValueToRValue>
        |         | `-DeclRefExpr 0x1421429c8 <col:13> 'char *' lvalue Var 0x142128730 'p1' 'char *'
        |         `-IntegerLiteral 0x1421429e8 <col:16> 'int' 1
        `-UnaryOperator 0x142142af0 <line:11:4, col:5> 'char *' postfix '++'
          `-DeclRefExpr 0x142142ad0 <col:4> 'char *' lvalue ParmVar 0x1421280d8 's' 'char *'
