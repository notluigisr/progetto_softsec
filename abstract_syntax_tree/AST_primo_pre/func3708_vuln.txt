`-FunctionDecl 0x12f00de88  line:1:1 invalid header_put_le_int 'int (int *, int)'
  |-ParmVarDecl 0x12f00dd28 <col:20, col:32> col:32 referenced invalid psf 'int *'
  |-ParmVarDecl 0x12f00dda8 <col:37, col:41> col:41 used x 'int'
  `-CompoundStmt 0x12f027a10 <line:2:1, line:8:1>
    |-IfStmt 0x12f0279e8 <line:2:3, line:7:3>
    | |-BinaryOperator 0x12f00e1f0 <line:2:7, col:54> 'int' contains-errors '<'
    | | |-CXXDependentScopeMemberExpr 0x12f00df60 <col:7, col:12> '<dependent type>' contains-errors lvalue ->headindex
    | | | `-RecoveryExpr 0x12f00df40 <col:7> '<dependent type>' contains-errors lvalue
    | | `-BinaryOperator 0x12f00e1d0 <col:24, col:54> '<dependent type>' contains-errors '-'
    | |   |-CallExpr 0x12f00e188 <col:24, col:50> '<dependent type>' contains-errors
    | |   | |-DeclRefExpr 0x12f00e100 <col:24> 'int ()' Function 0x12f00e048 'SIGNED_SIZEOF' 'int ()'
    | |   | `-CXXDependentScopeMemberExpr 0x12f00e140 <col:39, col:44> '<dependent type>' contains-errors lvalue ->header
    | |   |   `-RecoveryExpr 0x12f00e120 <col:39> '<dependent type>' contains-errors lvalue
    | |   `-IntegerLiteral 0x12f00e1b0 <col:54> 'int' 4
    | `-CompoundStmt 0x12f0279b8 <line:3:2, line:7:3>
    |   |-BinaryOperator 0x12f00e378 <line:3:4, col:37> '<dependent type>' contains-errors '='
    |   | |-ArraySubscriptExpr 0x12f00e338 <col:4, col:33> '<dependent type>' contains-errors lvalue
    |   | | |-ImplicitCastExpr 0x12f00e320 <col:4, col:9> '<dependent type>' contains-errors <LValueToRValue>
    |   | | | `-CXXDependentScopeMemberExpr 0x12f00e258 <col:4, col:9> '<dependent type>' contains-errors lvalue ->header
    |   | | |   `-RecoveryExpr 0x12f00e230 <col:4> '<dependent type>' contains-errors lvalue
    |   | | |     `-DeclRefExpr 0x12f00e210 <col:4> 'int *' lvalue ParmVar 0x12f00dd28 'psf' 'int *'
    |   | | `-UnaryOperator 0x12f00e308 <col:17, col:31> '<dependent type>' contains-errors postfix '++' cannot overflow
    |   | |   `-CXXDependentScopeMemberExpr 0x12f00e2c0 <col:17, col:22> '<dependent type>' contains-errors lvalue ->headindex
    |   | |     `-RecoveryExpr 0x12f00e2a0 <col:17> '<dependent type>' contains-errors lvalue
    |   | `-DeclRefExpr 0x12f00e358 <col:37> 'int' lvalue ParmVar 0x12f00dda8 'x' 'int'
    |   |-BinaryOperator 0x12f027598 <line:4:3, col:43> '<dependent type>' contains-errors '='
    |   | |-ArraySubscriptExpr 0x12f0274e0 <col:3, col:32> '<dependent type>' contains-errors lvalue
    |   | | |-ImplicitCastExpr 0x12f0274c8 <col:3, col:8> '<dependent type>' contains-errors <LValueToRValue>
    |   | | | `-CXXDependentScopeMemberExpr 0x12f027400 <col:3, col:8> '<dependent type>' contains-errors lvalue ->header
    |   | | |   `-RecoveryExpr 0x12f00e3b8 <col:3> '<dependent type>' contains-errors lvalue
    |   | | |     `-DeclRefExpr 0x12f00e398 <col:3> 'int *' lvalue ParmVar 0x12f00dd28 'psf' 'int *'
    |   | | `-UnaryOperator 0x12f0274b0 <col:16, col:30> '<dependent type>' contains-errors postfix '++' cannot overflow
    |   | |   `-CXXDependentScopeMemberExpr 0x12f027468 <col:16, col:21> '<dependent type>' contains-errors lvalue ->headindex
    |   | |     `-RecoveryExpr 0x12f027448 <col:16> '<dependent type>' contains-errors lvalue
    |   | `-ParenExpr 0x12f027578 <col:36, col:43> 'int'
    |   |   `-BinaryOperator 0x12f027558 <col:37, col:42> 'int' '>>'
    |   |     |-ImplicitCastExpr 0x12f027540 <col:37> 'int' <LValueToRValue>
    |   |     | `-DeclRefExpr 0x12f027500 <col:37> 'int' lvalue ParmVar 0x12f00dda8 'x' 'int'
    |   |     `-IntegerLiteral 0x12f027520 <col:42> 'int' 8
    |   |-BinaryOperator 0x12f027798 <line:5:3, col:44> '<dependent type>' contains-errors '='
    |   | |-ArraySubscriptExpr 0x12f0276e0 <col:3, col:32> '<dependent type>' contains-errors lvalue
    |   | | |-ImplicitCastExpr 0x12f0276c8 <col:3, col:8> '<dependent type>' contains-errors <LValueToRValue>
    |   | | | `-CXXDependentScopeMemberExpr 0x12f027600 <col:3, col:8> '<dependent type>' contains-errors lvalue ->header
    |   | | |   `-RecoveryExpr 0x12f0275d8 <col:3> '<dependent type>' contains-errors lvalue
    |   | | |     `-DeclRefExpr 0x12f0275b8 <col:3> 'int *' lvalue ParmVar 0x12f00dd28 'psf' 'int *'
    |   | | `-UnaryOperator 0x12f0276b0 <col:16, col:30> '<dependent type>' contains-errors postfix '++' cannot overflow
    |   | |   `-CXXDependentScopeMemberExpr 0x12f027668 <col:16, col:21> '<dependent type>' contains-errors lvalue ->headindex
    |   | |     `-RecoveryExpr 0x12f027648 <col:16> '<dependent type>' contains-errors lvalue
    |   | `-ParenExpr 0x12f027778 <col:36, col:44> 'int'
    |   |   `-BinaryOperator 0x12f027758 <col:37, col:42> 'int' '>>'
    |   |     |-ImplicitCastExpr 0x12f027740 <col:37> 'int' <LValueToRValue>
    |   |     | `-DeclRefExpr 0x12f027700 <col:37> 'int' lvalue ParmVar 0x12f00dda8 'x' 'int'
    |   |     `-IntegerLiteral 0x12f027720 <col:42> 'int' 16
    |   `-BinaryOperator 0x12f027998 <line:6:3, col:44> '<dependent type>' contains-errors '='
    |     |-ArraySubscriptExpr 0x12f0278e0 <col:3, col:32> '<dependent type>' contains-errors lvalue
    |     | |-ImplicitCastExpr 0x12f0278c8 <col:3, col:8> '<dependent type>' contains-errors <LValueToRValue>
    |     | | `-CXXDependentScopeMemberExpr 0x12f027800 <col:3, col:8> '<dependent type>' contains-errors lvalue ->header
    |     | |   `-RecoveryExpr 0x12f0277d8 <col:3> '<dependent type>' contains-errors lvalue
    |     | |     `-DeclRefExpr 0x12f0277b8 <col:3> 'int *' lvalue ParmVar 0x12f00dd28 'psf' 'int *'
    |     | `-UnaryOperator 0x12f0278b0 <col:16, col:30> '<dependent type>' contains-errors postfix '++' cannot overflow
    |     |   `-CXXDependentScopeMemberExpr 0x12f027868 <col:16, col:21> '<dependent type>' contains-errors lvalue ->headindex
    |     |     `-RecoveryExpr 0x12f027848 <col:16> '<dependent type>' contains-errors lvalue
    |     `-ParenExpr 0x12f027978 <col:36, col:44> 'int'
    |       `-BinaryOperator 0x12f027958 <col:37, col:42> 'int' '>>'
    |         |-ImplicitCastExpr 0x12f027940 <col:37> 'int' <LValueToRValue>
    |         | `-DeclRefExpr 0x12f027900 <col:37> 'int' lvalue ParmVar 0x12f00dda8 'x' 'int'
    |         `-IntegerLiteral 0x12f027920 <col:42> 'int' 24
    `-NullStmt 0x12f027a08 <line:7:5>
