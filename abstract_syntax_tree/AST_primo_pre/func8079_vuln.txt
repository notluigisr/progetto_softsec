`-FunctionDecl 0x124940a80  line:1:13 k_ascii 'void (struct vc_data *, unsigned char, char)' static
  |-ParmVarDecl 0x124928648 <col:21, col:37> col:37 vc 'struct vc_data *'
  |-ParmVarDecl 0x1249286c8 <col:41, col:55> col:55 used value 'unsigned char'
  |-ParmVarDecl 0x124928740 <col:62, col:67> col:67 used up_flag 'char'
  `-CompoundStmt 0x124941030 <line:2:1, line:21:1>
    |-DeclStmt 0x124940c08 <line:3:2, col:10>
    | `-VarDecl 0x124940ba0 <col:2, col:6> col:6 used base 'int'
    |-IfStmt 0x124940c68 <line:5:2, line:6:3>
    | |-ImplicitCastExpr 0x124940c40 <line:5:6> 'char' <LValueToRValue>
    | | `-DeclRefExpr 0x124940c20 <col:6> 'char' lvalue ParmVar 0x124928740 'up_flag' 'char'
    | `-ReturnStmt 0x124940c58 <line:6:3>
    `-IfStmt 0x124940e80 <line:8:2, line:15:2> has_else
      |-BinaryOperator 0x124940cf8 <line:8:6, col:14> 'int' '<'
      | |-ImplicitCastExpr 0x124940ce0 <col:6> 'int' <IntegralCast>
      | | `-ImplicitCastExpr 0x124940cc8 <col:6> 'unsigned char' <LValueToRValue>
      | |   `-DeclRefExpr 0x124940c88 <col:6> 'unsigned char' lvalue ParmVar 0x1249286c8 'value' 'unsigned char'
      | `-IntegerLiteral 0x124940ca8 <col:14> 'int' 10
      |-CompoundStmt 0x124940d78 <col:18, line:11:2>
      | `-BinaryOperator 0x124940d58 <line:10:3, col:10> 'int' '='
      |   |-DeclRefExpr 0x124940d18 <col:3> 'int' lvalue Var 0x124940ba0 'base' 'int'
      |   `-IntegerLiteral 0x124940d38 <col:10> 'int' 10
      `-CompoundStmt 0x124940e60 <line:11:9, line:15:2>
        |-CompoundAssignOperator 0x124940dd0 <line:13:3, col:12> 'unsigned char' '-=' ComputeLHSTy='int' ComputeResultTy='int'
        | |-DeclRefExpr 0x124940d90 <col:3> 'unsigned char' lvalue ParmVar 0x1249286c8 'value' 'unsigned char'
        | `-IntegerLiteral 0x124940db0 <col:12> 'int' 10
        `-BinaryOperator 0x124940e40 <line:14:3, col:10> 'int' '='
          |-DeclRefExpr 0x124940e00 <col:3> 'int' lvalue Var 0x124940ba0 'base' 'int'
          `-IntegerLiteral 0x124940e20 <col:10> 'int' 16
