`-FunctionDecl 0x12980dec8  line:1:19 invalid SetQuantumScale 'int (int *, const double)'
  |-ParmVarDecl 0x12980dd28 <col:35, col:48> col:48 referenced invalid quantum_info 'int *'
  |-ParmVarDecl 0x12980dda8 <col:61, col:74> col:74 used scale 'const double'
  `-CompoundStmt 0x12980e378 <line:2:1, line:6:1>
    |-CallExpr 0x12980e280 <line:4:3, col:56> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x12980e158 <col:3> 'int ()' Function 0x12980e028 'assert' 'int ()'
    | `-BinaryOperator 0x12980e260 <col:10, col:37> 'int' contains-errors '=='
    |   |-CXXDependentScopeMemberExpr 0x12980e198 <col:10, col:24> '<dependent type>' contains-errors lvalue ->signature
    |   | `-RecoveryExpr 0x12980e178 <col:10> '<dependent type>' contains-errors lvalue
    |   `-RecoveryExpr 0x12980e240 <col:37> '<dependent type>' contains-errors lvalue
    `-BinaryOperator 0x12980e358 <line:5:3, col:23> '<dependent type>' contains-errors '='
      |-CXXDependentScopeMemberExpr 0x12980e2f0 <col:3, col:17> '<dependent type>' contains-errors lvalue ->scale
      | `-RecoveryExpr 0x12980e2c8 <col:3> '<dependent type>' contains-errors lvalue
      |   `-DeclRefExpr 0x12980e2a8 <col:3> 'int *' lvalue ParmVar 0x12980dd28 'quantum_info' 'int *'
      `-DeclRefExpr 0x12980e338 <col:23> 'const double' lvalue ParmVar 0x12980dda8 'scale' 'const double'
