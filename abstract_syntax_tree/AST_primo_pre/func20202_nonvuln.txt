`-FunctionDecl 0x13f0f3518  line:1:14 invalid fts3ReadExprList 'char *(int *, const char *, int *)' static
  |-ParmVarDecl 0x13f0f3328 <col:31, col:42> col:42 invalid p 'int *'
  |-ParmVarDecl 0x13f0f33a8 <col:45, col:57> col:57 used zFunc 'const char *'
  |-ParmVarDecl 0x13f0f3428 <col:64, col:69> col:69 used pRc 'int *'
  `-CompoundStmt 0x13f10e570 <col:73, line:36:1>
    |-DeclStmt 0x13f0f3690 <line:2:3, col:17>
    | `-VarDecl 0x13f0f35f0 <col:3, col:16> col:9 used zRet 'char *' cinit
    |   `-ImplicitCastExpr 0x13f0f3678 <col:16> 'char *' <NullToPointer>
    |     `-IntegerLiteral 0x13f0f3658 <col:16> 'int' 0
    |-DeclStmt 0x13f0f3760 <line:3:3, col:18>
    | `-VarDecl 0x13f0f36c0 <col:3, col:17> col:9 used zFree 'char *' cinit
    |   `-ImplicitCastExpr 0x13f0f3748 <col:17> 'char *' <NullToPointer>
    |     `-IntegerLiteral 0x13f0f3728 <col:17> 'int' 0
    |-DeclStmt 0x13f0f37f8 <line:4:3, col:18>
    | `-VarDecl 0x13f0f3790 <col:3, col:9> col:9 used zFunction 'char *'
    |-DeclStmt 0x13f0f3890 <line:5:3, col:8>
    | `-VarDecl 0x13f0f3828 <col:3, col:7> col:7 used i 'int'
    |-IfStmt 0x13f10e1e8 <line:7:3, line:29:3> has_else
    | |-BinaryOperator 0x13f0f3930 <line:7:7, col:23> 'int' contains-errors '=='
    | | |-CXXDependentScopeMemberExpr 0x13f0f38c8 <col:7, col:10> '<dependent type>' contains-errors lvalue ->zContentTbl
    | | | `-RecoveryExpr 0x13f0f38a8 <col:7> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x13f0f3910 <col:23> 'int' 0
    | |-CompoundStmt 0x13f10db50 <col:26, line:21:3>
    | | |-IfStmt 0x13f10d158 <line:8:5, line:12:5> has_else
    | | | |-UnaryOperator 0x13f0f3988 <line:8:9, col:10> 'int' prefix '!' cannot overflow
    | | | | `-ImplicitCastExpr 0x13f0f3970 <col:10> 'const char *' <LValueToRValue>
    | | | |   `-DeclRefExpr 0x13f0f3950 <col:10> 'const char *' lvalue ParmVar 0x13f0f33a8 'zFunc' 'const char *'
    | | | |-CompoundStmt 0x13f10ca50 <col:17, line:10:5>
    | | | | `-BinaryOperator 0x13f10ca30 <line:9:7, col:19> 'char *' '='
    | | | |   |-DeclRefExpr 0x13f0f39a0 <col:7> 'char *' lvalue Var 0x13f0f3790 'zFunction' 'char *'
    | | | |   `-ImplicitCastExpr 0x13f10ca18 <col:19> 'char *' <ArrayToPointerDecay>
    | | | |     `-StringLiteral 0x13f10ca00 <col:19> 'char[1]' lvalue ""
    | | | `-CompoundStmt 0x13f10d140 <line:10:10, line:12:5>
    | | |   `-BinaryOperator 0x13f10d120 <line:11:7, col:44> 'char *' '='
    | | |     |-DeclRefExpr 0x13f10ca68 <col:7> 'char *' lvalue Var 0x13f0f36c0 'zFree' 'char *'
    | | |     `-BinaryOperator 0x13f10d100 <col:15, col:44> 'char *' '='
    | | |       |-DeclRefExpr 0x13f10ca88 <col:15> 'char *' lvalue Var 0x13f0f3790 'zFunction' 'char *'
    | | |       `-ImplicitCastExpr 0x13f10ccc8 <col:27, col:44> 'char *' <IntegralToPointer>
    | | |         `-CallExpr 0x13f10cc88 <col:27, col:44> 'int'
    | | |           |-ImplicitCastExpr 0x13f10cc70 <col:27> 'int (*)()' <FunctionToPointerDecay>
    | | |           | `-DeclRefExpr 0x13f10cc00 <col:27> 'int ()' Function 0x13f10cb48 'fts3QuoteId' 'int ()'
    | | |           `-ImplicitCastExpr 0x13f10ccb0 <col:39> 'const char *' <LValueToRValue>
    | | |             `-DeclRefExpr 0x13f10cc20 <col:39> 'const char *' lvalue ParmVar 0x13f0f33a8 'zFunc' 'const char *'
    | | |-CallExpr 0x13f10d398 <line:13:5, col:34> 'int'
    | | | |-ImplicitCastExpr 0x13f10d380 <col:5> 'int (*)()' <FunctionToPointerDecay>
    | | | | `-DeclRefExpr 0x13f10d268 <col:5> 'int ()' Function 0x13f10d1b0 'fts3Appendf' 'int ()'
    | | | |-ImplicitCastExpr 0x13f10d3d0 <col:17> 'int *' <LValueToRValue>
    | | | | `-DeclRefExpr 0x13f10d288 <col:17> 'int *' lvalue ParmVar 0x13f0f3428 'pRc' 'int *'
    | | | |-UnaryOperator 0x13f10d300 <col:22, col:23> 'char **' prefix '&' cannot overflow
    | | | | `-DeclRefExpr 0x13f10d2a8 <col:23> 'char *' lvalue Var 0x13f0f35f0 'zRet' 'char *'
    | | | `-ImplicitCastExpr 0x13f10d3e8 <col:29> 'char *' <ArrayToPointerDecay>
    | | |   `-StringLiteral 0x13f10d360 <col:29> 'char[4]' lvalue "STR"
    | | |-ForStmt 0x13f10d758 <line:14:5, line:16:5>
    | | | |-BinaryOperator 0x13f10d440 <line:14:9, col:11> 'int' '='
    | | | | |-DeclRefExpr 0x13f10d400 <col:9> 'int' lvalue Var 0x13f0f3828 'i' 'int'
    | | | | `-IntegerLiteral 0x13f10d420 <col:11> 'int' 0
    | | | |-<<<NULL>>>
    | | | |-BinaryOperator 0x13f10d4e8 <col:14, col:19> 'int' contains-errors '<'
    | | | | |-DeclRefExpr 0x13f10d460 <col:14> 'int' lvalue Var 0x13f0f3828 'i' 'int'
    | | | | `-CXXDependentScopeMemberExpr 0x13f10d4a0 <col:16, col:19> '<dependent type>' contains-errors lvalue ->nColumn
    | | | |   `-RecoveryExpr 0x13f10d480 <col:16> '<dependent type>' contains-errors lvalue
    | | | |-UnaryOperator 0x13f10d528 <col:28, col:29> 'int' postfix '++'
    | | | | `-DeclRefExpr 0x13f10d508 <col:28> 'int' lvalue Var 0x13f0f3828 'i' 'int'
    | | | `-CompoundStmt 0x13f10d740 <col:32, line:16:5>
    | | |   `-CallExpr 0x13f10d6f0 <line:15:7, col:66> '<dependent type>' contains-errors
    | | |     |-DeclRefExpr 0x13f10d540 <col:7> 'int ()' Function 0x13f10d1b0 'fts3Appendf' 'int ()'
    | | |     |-DeclRefExpr 0x13f10d560 <col:19> 'int *' lvalue ParmVar 0x13f0f3428 'pRc' 'int *'
    | | |     |-UnaryOperator 0x13f10d5a0 <col:24, col:25> 'char **' prefix '&' cannot overflow
    | | |     | `-DeclRefExpr 0x13f10d580 <col:25> 'char *' lvalue Var 0x13f0f35f0 'zRet' 'char *'
    | | |     |-StringLiteral 0x13f10d5b8 <col:31> 'char[4]' lvalue "STR"
    | | |     |-DeclRefExpr 0x13f10d5d8 <col:38> 'char *' lvalue Var 0x13f0f3790 'zFunction' 'char *'
    | | |     |-DeclRefExpr 0x13f10d5f8 <col:49> 'int' lvalue Var 0x13f0f3828 'i' 'int'
    | | |     `-ArraySubscriptExpr 0x13f10d6d0 <col:52, col:65> '<dependent type>' contains-errors lvalue
    | | |       |-ImplicitCastExpr 0x13f10d6a0 <col:52, col:55> '<dependent type>' contains-errors <LValueToRValue>
    | | |       | `-CXXDependentScopeMemberExpr 0x13f10d638 <col:52, col:55> '<dependent type>' contains-errors lvalue ->azColumn
    | | |       |   `-RecoveryExpr 0x13f10d618 <col:52> '<dependent type>' contains-errors lvalue
    | | |       `-ImplicitCastExpr 0x13f10d6b8 <col:64> 'int' <LValueToRValue>
    | | |         `-DeclRefExpr 0x13f10d680 <col:64> 'int' lvalue Var 0x13f0f3828 'i' 'int'
    | | |-IfStmt 0x13f10d928 <line:17:5, line:19:5>
    | | | |-CXXDependentScopeMemberExpr 0x13f10d7b0 <line:17:9, col:12> '<dependent type>' contains-errors lvalue ->zLanguageid
    | | | | `-RecoveryExpr 0x13f10d790 <col:9> '<dependent type>' contains-errors lvalue
    | | | `-CompoundStmt 0x13f10d910 <col:25, line:19:5>
    | | |   `-CallExpr 0x13f10d8a8 <line:18:7, col:36> 'int'
    | | |     |-ImplicitCastExpr 0x13f10d890 <col:7> 'int (*)()' <FunctionToPointerDecay>
    | | |     | `-DeclRefExpr 0x13f10d7f8 <col:7> 'int ()' Function 0x13f10d1b0 'fts3Appendf' 'int ()'
    | | |     |-ImplicitCastExpr 0x13f10d8e0 <col:19> 'int *' <LValueToRValue>
    | | |     | `-DeclRefExpr 0x13f10d818 <col:19> 'int *' lvalue ParmVar 0x13f0f3428 'pRc' 'int *'
    | | |     |-UnaryOperator 0x13f10d858 <col:24, col:25> 'char **' prefix '&' cannot overflow
    | | |     | `-DeclRefExpr 0x13f10d838 <col:25> 'char *' lvalue Var 0x13f0f35f0 'zRet' 'char *'
    | | |     `-ImplicitCastExpr 0x13f10d8f8 <col:31> 'char *' <ArrayToPointerDecay>
    | | |       `-StringLiteral 0x13f10d870 <col:31> 'char[4]' lvalue "STR"
    | | `-CallExpr 0x13f10db10 <line:20:5, col:23> 'int'
    | |   |-ImplicitCastExpr 0x13f10daf8 <col:5> 'int (*)()' <FunctionToPointerDecay>
    | |   | `-DeclRefExpr 0x13f10dab8 <col:5> 'int ()' Function 0x13f10da00 'sqlite3_free' 'int ()'
    | |   `-ImplicitCastExpr 0x13f10db38 <col:18> 'char *' <LValueToRValue>
    | |     `-DeclRefExpr 0x13f10dad8 <col:18> 'char *' lvalue Var 0x13f0f36c0 'zFree' 'char *'
    | `-CompoundStmt 0x13f10e1c0 <line:21:8, line:29:3>
    |   |-CallExpr 0x13f10dc38 <line:22:5, col:34> 'int'
    |   | |-ImplicitCastExpr 0x13f10dc20 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x13f10db88 <col:5> 'int ()' Function 0x13f10d1b0 'fts3Appendf' 'int ()'
    |   | |-ImplicitCastExpr 0x13f10dc70 <col:17> 'int *' <LValueToRValue>
    |   | | `-DeclRefExpr 0x13f10dba8 <col:17> 'int *' lvalue ParmVar 0x13f0f3428 'pRc' 'int *'
    |   | |-UnaryOperator 0x13f10dbe8 <col:22, col:23> 'char **' prefix '&' cannot overflow
    |   | | `-DeclRefExpr 0x13f10dbc8 <col:23> 'char *' lvalue Var 0x13f0f35f0 'zRet' 'char *'
    |   | `-ImplicitCastExpr 0x13f10dc88 <col:29> 'char *' <ArrayToPointerDecay>
    |   |   `-StringLiteral 0x13f10dc00 <col:29> 'char[4]' lvalue "STR"
    |   |-ForStmt 0x13f10dfa8 <line:23:5, line:25:5>
    |   | |-BinaryOperator 0x13f10dce0 <line:23:9, col:11> 'int' '='
    |   | | |-DeclRefExpr 0x13f10dca0 <col:9> 'int' lvalue Var 0x13f0f3828 'i' 'int'
    |   | | `-IntegerLiteral 0x13f10dcc0 <col:11> 'int' 0
    |   | |-<<<NULL>>>
    |   | |-BinaryOperator 0x13f10dd88 <col:14, col:19> 'int' contains-errors '<'
    |   | | |-DeclRefExpr 0x13f10dd00 <col:14> 'int' lvalue Var 0x13f0f3828 'i' 'int'
    |   | | `-CXXDependentScopeMemberExpr 0x13f10dd40 <col:16, col:19> '<dependent type>' contains-errors lvalue ->nColumn
    |   | |   `-RecoveryExpr 0x13f10dd20 <col:16> '<dependent type>' contains-errors lvalue
    |   | |-UnaryOperator 0x13f10ddc8 <col:28, col:29> 'int' postfix '++'
    |   | | `-DeclRefExpr 0x13f10dda8 <col:28> 'int' lvalue Var 0x13f0f3828 'i' 'int'
    |   | `-CompoundStmt 0x13f10df90 <col:32, line:25:5>
    |   |   `-CallExpr 0x13f10df50 <line:24:7, col:52> '<dependent type>' contains-errors
    |   |     |-DeclRefExpr 0x13f10dde0 <col:7> 'int ()' Function 0x13f10d1b0 'fts3Appendf' 'int ()'
    |   |     |-DeclRefExpr 0x13f10de00 <col:19> 'int *' lvalue ParmVar 0x13f0f3428 'pRc' 'int *'
    |   |     |-UnaryOperator 0x13f10de40 <col:24, col:25> 'char **' prefix '&' cannot overflow
    |   |     | `-DeclRefExpr 0x13f10de20 <col:25> 'char *' lvalue Var 0x13f0f35f0 'zRet' 'char *'
    |   |     |-StringLiteral 0x13f10de58 <col:31> 'char[4]' lvalue "STR"
    |   |     `-ArraySubscriptExpr 0x13f10df30 <col:38, col:51> '<dependent type>' contains-errors lvalue
    |   |       |-ImplicitCastExpr 0x13f10df00 <col:38, col:41> '<dependent type>' contains-errors <LValueToRValue>
    |   |       | `-CXXDependentScopeMemberExpr 0x13f10de98 <col:38, col:41> '<dependent type>' contains-errors lvalue ->azColumn
    |   |       |   `-RecoveryExpr 0x13f10de78 <col:38> '<dependent type>' contains-errors lvalue
    |   |       `-ImplicitCastExpr 0x13f10df18 <col:50> 'int' <LValueToRValue>
    |   |         `-DeclRefExpr 0x13f10dee0 <col:50> 'int' lvalue Var 0x13f0f3828 'i' 'int'
    |   `-IfStmt 0x13f10e1a0 <line:26:5, line:28:5>
    |     |-CXXDependentScopeMemberExpr 0x13f10e000 <line:26:9, col:12> '<dependent type>' contains-errors lvalue ->zLanguageid
    |     | `-RecoveryExpr 0x13f10dfe0 <col:9> '<dependent type>' contains-errors lvalue
    |     `-CompoundStmt 0x13f10e188 <col:25, line:28:5>
    |       `-CallExpr 0x13f10e148 <line:27:7, col:52> '<dependent type>' contains-errors
    |         |-DeclRefExpr 0x13f10e048 <col:7> 'int ()' Function 0x13f10d1b0 'fts3Appendf' 'int ()'
    |         |-DeclRefExpr 0x13f10e068 <col:19> 'int *' lvalue ParmVar 0x13f0f3428 'pRc' 'int *'
    |         |-UnaryOperator 0x13f10e0a8 <col:24, col:25> 'char **' prefix '&' cannot overflow
    |         | `-DeclRefExpr 0x13f10e088 <col:25> 'char *' lvalue Var 0x13f0f35f0 'zRet' 'char *'
    |         |-StringLiteral 0x13f10e0c0 <col:31> 'char[4]' lvalue "STR"
    |         `-CXXDependentScopeMemberExpr 0x13f10e100 <col:38, col:41> '<dependent type>' contains-errors lvalue ->zLanguageid
    |           `-RecoveryExpr 0x13f10e0e0 <col:38> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x13f10e560 <line:35:3, col:10>
      `-ImplicitCastExpr 0x13f10e548 <col:10> 'char *' <LValueToRValue>
        `-DeclRefExpr 0x13f10e528 <col:10> 'char *' lvalue Var 0x13f0f35f0 'zRet' 'char *'
