`-FunctionDecl 0x155128438  line:1:17 invalid streamCreateConsumer 'int *(int *, int, int *, int, int)'
  |-ParmVarDecl 0x155128128 <col:38, col:48> col:48 invalid cg 'int *'
  |-ParmVarDecl 0x1551281a8 <col:52, col:56> col:56 invalid name 'int'
  |-ParmVarDecl 0x155128228 <col:62, col:68> col:68 invalid key 'int *'
  |-ParmVarDecl 0x1551282a8 <col:73, col:77> col:77 used dbid 'int'
  |-ParmVarDecl 0x155128328 <col:83, col:87> col:87 used flags 'int'
  `-CompoundStmt 0x155142780 <col:94, line:18:1>
    |-IfStmt 0x1551285e8 <line:2:5, col:28>
    | |-BinaryOperator 0x155128580 <col:9, col:15> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x155128508 <col:9> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x155128560 <col:15> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x1551285d8 <col:21, col:28>
    |   `-RecoveryExpr 0x1551285b8 <col:28> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x1551286e0 <line:3:5, col:42>
    | `-VarDecl 0x155128620 <col:5, col:9> col:9 used notify 'int'
    |-DeclStmt 0x1551287d0 <line:4:5, col:42>
    | `-VarDecl 0x155128710 <col:5, col:9> col:9 used dirty 'int'
    |-DeclStmt 0x155141f08 <line:6:5, line:7:59>
    | `-VarDecl 0x1551419e0 <line:6:5, line:7:58> line:6:9 used success 'int' cinit
    |   `-CallExpr 0x155141ec0 <col:19, line:7:58> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x155141b28 <line:6:19> 'int ()' Function 0x155141a70 'raxTryInsert' 'int ()'
    |     |-CXXDependentScopeMemberExpr 0x155141b68 <col:32, col:36> '<dependent type>' contains-errors lvalue ->consumers
    |     | `-RecoveryExpr 0x155141b48 <col:32> '<dependent type>' contains-errors lvalue
    |     |-CStyleCastExpr 0x155141e58 <col:46, col:62> 'unsigned char *' contains-errors <Dependent>
    |     | `-RecoveryExpr 0x155141bb0 <col:62> '<dependent type>' contains-errors lvalue
    |     |-CallExpr 0x155141d60 <line:7:32, col:43> '<dependent type>' contains-errors
    |     | |-DeclRefExpr 0x155141d20 <col:32> 'int ()' Function 0x155141c68 'sdslen' 'int ()'
    |     | `-RecoveryExpr 0x155141d40 <col:39> '<dependent type>' contains-errors lvalue
    |     |-RecoveryExpr 0x155141e80 <col:45> '<dependent type>' contains-errors lvalue
    |     `-RecoveryExpr 0x155141ea0 <col:54> '<dependent type>' contains-errors lvalue
    `-IfStmt 0x155142160 <line:8:5, line:11:5>
      |-UnaryOperator 0x155141f58 <line:8:9, col:10> 'int' contains-errors prefix '!' cannot overflow
      | `-ImplicitCastExpr 0x155141f40 <col:10> 'int' contains-errors <LValueToRValue>
      |   `-DeclRefExpr 0x155141f20 <col:10> 'int' contains-errors lvalue Var 0x1551419e0 'success' 'int'
      `-CompoundStmt 0x155142140 <col:19, line:11:5>
        |-CallExpr 0x1551420d0 <line:9:9, col:23> '<dependent type>' contains-errors
        | |-DeclRefExpr 0x155142050 <col:9> 'int ()' Function 0x155141f98 'zfree' 'int ()'
        | `-RecoveryExpr 0x1551420b0 <col:15> '<dependent type>' contains-errors lvalue
        `-ReturnStmt 0x155142130 <line:10:9, col:16>
          `-RecoveryExpr 0x155142110 <col:16> '<dependent type>' contains-errors lvalue
