`-FunctionDecl 0x14800dd18  line:1:1 DEFUN 'int ()'
  `-CompoundStmt 0x148028f58 <line:2:1, line:46:1>
    |-DeclStmt 0x14800deb8 <line:4:5, col:11>
    | `-VarDecl 0x14800de50 <col:5, col:9> col:9 used ok 'int'
    |-DeclStmt 0x14800df48 <line:5:5, col:13>
    | `-VarDecl 0x14800dee0 <col:5, col:10> col:10 used cmd 'char'
    |-BinaryOperator 0x14800dfd8 <line:7:5, col:10> 'int' contains-errors '='
    | |-DeclRefExpr 0x14800df60 <col:5> 'int' lvalue Var 0x14800de50 'ok' 'int'
    | `-RecoveryExpr 0x14800dfb8 <col:10> '<dependent type>' contains-errors lvalue
    `-DoStmt 0x148028cb8 <line:8:5, line:34:17>
      |-CompoundStmt 0x148028c50 <line:8:8, line:34:5>
      | `-SwitchStmt 0x14800e1e8 <line:10:2, line:33:2>
      |   |-ImplicitCastExpr 0x14800e1d0 <line:10:10> 'int' <IntegralCast>
      |   | `-ImplicitCastExpr 0x14800e1b8 <col:10> 'char' <LValueToRValue>
      |   |   `-DeclRefExpr 0x14800e198 <col:10> 'char' lvalue Var 0x14800dee0 'cmd' 'char'
      |   `-CompoundStmt 0x148028be0 <col:15, line:33:2>
      |     |-CaseStmt 0x14800e240 <line:11:2, line:12:11>
      |     | |-ConstantExpr 0x14800e228 <line:11:7> 'int'
      |     | | `-CharacterLiteral 0x14800e210 <col:7> 'int' 66
      |     | `-BinaryOperator 0x14800e2e0 <line:12:6, col:11> 'int' contains-errors '='
      |     |   |-DeclRefExpr 0x14800e268 <col:6> 'int' lvalue Var 0x14800de50 'ok' 'int'
      |     |   `-RecoveryExpr 0x14800e2c0 <col:11> '<dependent type>' contains-errors lvalue
      |     |-BreakStmt 0x14800e300 <line:13:6>
      |     |-CaseStmt 0x14800e338 <line:14:2, <invalid sloc>>
      |     | |-ConstantExpr 0x14800e320 <col:7> 'int'
      |     | | `-CharacterLiteral 0x14800e308 <col:7> 'int' 10
      |     | `-CaseStmt 0x14800e390 <line:15:2, <invalid sloc>>
      |     |   |-ConstantExpr 0x14800e378 <col:7> 'int'
      |     |   | `-CharacterLiteral 0x14800e360 <col:7> 'int' 32
      |     |   `-NullStmt 0x14800e3d0 <<invalid sloc>>
      |     |-BinaryOperator 0x148028458 <line:17:6, col:11> 'int' contains-errors '='
      |     | |-DeclRefExpr 0x14800e3d8 <col:6> 'int' lvalue Var 0x14800de50 'ok' 'int'
      |     | `-RecoveryExpr 0x148028438 <col:11> '<dependent type>' contains-errors lvalue
      |     |-BreakStmt 0x148028478 <line:18:6>
      |     |-CaseStmt 0x1480284b0 <line:19:2, line:20:19>
      |     | |-ConstantExpr 0x148028498 <line:19:7> 'int'
      |     | | `-CharacterLiteral 0x148028480 <col:7> 'int' 68
      |     | `-CallExpr 0x148028638 <line:20:6, col:19> '<dependent type>' contains-errors
      |     |   |-DeclRefExpr 0x1480285b8 <col:6> 'int ()' Function 0x148028500 'delBuffer' 'int ()'
      |     |   `-RecoveryExpr 0x148028618 <col:16> '<dependent type>' contains-errors lvalue
      |     |-IfStmt 0x148028888 <line:21:6, line:25:6>
      |     | |-BinaryOperator 0x1480286f0 <line:21:10, col:22> 'int' contains-errors '=='
      |     | | |-RecoveryExpr 0x1480286b0 <col:10> '<dependent type>' contains-errors lvalue
      |     | | `-RecoveryExpr 0x1480286d0 <col:22> '<dependent type>' contains-errors lvalue
      |     | `-CompoundStmt 0x148028878 <col:28, line:25:6>
      |     |-BreakStmt 0x1480288a8 <line:26:6>
      |     |-CaseStmt 0x1480288e0 <line:27:2, line:28:14>
      |     | |-ConstantExpr 0x1480288c8 <line:27:7> 'int'
      |     | | `-CharacterLiteral 0x1480288b0 <col:7> 'int' 113
      |     | `-CallExpr 0x148028a20 <line:28:6, col:14> 'int'
      |     |   `-ImplicitCastExpr 0x148028a08 <col:6> 'int (*)()' <FunctionToPointerDecay>
      |     |     `-DeclRefExpr 0x1480289e8 <col:6> 'int ()' Function 0x148028930 'qquitfm' 'int ()'
      |     |-BreakStmt 0x148028a40 <line:29:6>
      |     |-CaseStmt 0x148028a78 <line:30:2, line:31:13>
      |     | |-ConstantExpr 0x148028a60 <line:30:7> 'int'
      |     | | `-CharacterLiteral 0x148028a48 <col:7> 'int' 81
      |     | `-CallExpr 0x148028bb8 <line:31:6, col:13> 'int'
      |     |   `-ImplicitCastExpr 0x148028ba0 <col:6> 'int (*)()' <FunctionToPointerDecay>
      |     |     `-DeclRefExpr 0x148028b80 <col:6> 'int ()' Function 0x148028ac8 'quitfm' 'int ()'
      |     `-BreakStmt 0x148028bd8 <line:32:6>
      `-UnaryOperator 0x148028ca0 <line:34:14, col:15> 'int' prefix '!' cannot overflow
        `-ImplicitCastExpr 0x148028c88 <col:15> 'int' <LValueToRValue>
          `-DeclRefExpr 0x148028c68 <col:15> 'int' lvalue Var 0x14800de50 'ok' 'int'
