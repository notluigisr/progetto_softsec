`-FunctionDecl 0x14d027400  line:1:14 invalid check_literal 'int (struct jv_parser *)' static
  |-ParmVarDecl 0x14d00e268 <col:28, col:46> col:46 used p 'struct jv_parser *'
  `-CompoundStmt 0x14d02a1b8 <col:49, line:29:1>
    |-IfStmt 0x14d027580 <line:2:3, col:32>
    | |-BinaryOperator 0x14d027530 <col:7, col:22> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x14d0274e8 <col:7, col:10> '<dependent type>' contains-errors lvalue
    | | | `-DeclRefExpr 0x14d0274b0 <col:7> 'struct jv_parser *' lvalue ParmVar 0x14d00e268 'p' 'struct jv_parser *'
    | | `-IntegerLiteral 0x14d027510 <col:22> 'int' 0
    | `-ReturnStmt 0x14d027570 <col:25, col:32>
    |   `-IntegerLiteral 0x14d027550 <col:32> 'int' 0
    |-DeclStmt 0x14d027658 <line:4:3, col:26>
    | `-VarDecl 0x14d0275b8 <col:3, col:25> col:15 used pattern 'const char *' cinit
    |   `-ImplicitCastExpr 0x14d027640 <col:25> 'const char *' <NullToPointer>
    |     `-IntegerLiteral 0x14d027620 <col:25> 'int' 0
    |-DeclStmt 0x14d0276f0 <line:5:3, col:11>
    | `-VarDecl 0x14d027688 <col:3, col:7> col:7 used plen 'int'
    |-SwitchStmt 0x14d0277d8 <line:7:3, line:11:3>
    | |-ImplicitCastExpr 0x14d0277c0 <line:7:11, col:24> '<dependent type>' contains-errors <LValueToRValue>
    | | `-ArraySubscriptExpr 0x14d0277a0 <col:11, col:24> '<dependent type>' contains-errors lvalue
    | |   |-ImplicitCastExpr 0x14d027788 <col:11, col:14> '<dependent type>' contains-errors <LValueToRValue>
    | |   | `-RecoveryExpr 0x14d027740 <col:11, col:14> '<dependent type>' contains-errors lvalue
    | |   |   `-DeclRefExpr 0x14d027708 <col:11> 'struct jv_parser *' lvalue ParmVar 0x14d00e268 'p' 'struct jv_parser *'
    | |   `-IntegerLiteral 0x14d027768 <col:23> 'int' 0
    | `-CompoundStmt 0x14d028040 <col:27, line:11:3>
    |   |-CaseStmt 0x14d027818 <line:8:3, col:23>
    |   | |-CharacterLiteral 0x14d027800 <col:8> 'int' 116
    |   | `-BinaryOperator 0x14d0278f0 <col:13, col:23> 'const char *' '='
    |   |   |-DeclRefExpr 0x14d027840 <col:13> 'const char *' lvalue Var 0x14d0275b8 'pattern' 'const char *'
    |   |   `-ImplicitCastExpr 0x14d0278d8 <col:23> 'const char *' <NoOp>
    |   |     `-ImplicitCastExpr 0x14d0278c0 <col:23> 'char *' <ArrayToPointerDecay>
    |   |       `-StringLiteral 0x14d0278a0 <col:23> 'char[4]' lvalue "STR"
    |   |-BinaryOperator 0x14d027950 <col:30, col:37> 'int' '='
    |   | |-DeclRefExpr 0x14d027910 <col:30> 'int' lvalue Var 0x14d027688 'plen' 'int'
    |   | `-IntegerLiteral 0x14d027930 <col:37> 'int' 4
    |   |-BreakStmt 0x14d027b58 <col:55>
    |   |-CaseStmt 0x14d027b78 <line:9:3, col:23>
    |   | |-CharacterLiteral 0x14d027b60 <col:8> 'int' 102
    |   | `-BinaryOperator 0x14d027c10 <col:13, col:23> 'const char *' '='
    |   |   |-DeclRefExpr 0x14d027ba0 <col:13> 'const char *' lvalue Var 0x14d0275b8 'pattern' 'const char *'
    |   |   `-ImplicitCastExpr 0x14d027bf8 <col:23> 'const char *' <NoOp>
    |   |     `-ImplicitCastExpr 0x14d027be0 <col:23> 'char *' <ArrayToPointerDecay>
    |   |       `-StringLiteral 0x14d027bc0 <col:23> 'char[4]' lvalue "STR"
    |   |-BinaryOperator 0x14d027c70 <col:30, col:37> 'int' '='
    |   | |-DeclRefExpr 0x14d027c30 <col:30> 'int' lvalue Var 0x14d027688 'plen' 'int'
    |   | `-IntegerLiteral 0x14d027c50 <col:37> 'int' 5
    |   |-BreakStmt 0x14d027dc8 <col:56>
    |   |-CaseStmt 0x14d027de8 <line:10:3, col:23>
    |   | |-CharacterLiteral 0x14d027dd0 <col:8> 'int' 110
    |   | `-BinaryOperator 0x14d027e80 <col:13, col:23> 'const char *' '='
    |   |   |-DeclRefExpr 0x14d027e10 <col:13> 'const char *' lvalue Var 0x14d0275b8 'pattern' 'const char *'
    |   |   `-ImplicitCastExpr 0x14d027e68 <col:23> 'const char *' <NoOp>
    |   |     `-ImplicitCastExpr 0x14d027e50 <col:23> 'char *' <ArrayToPointerDecay>
    |   |       `-StringLiteral 0x14d027e30 <col:23> 'char[4]' lvalue "STR"
    |   |-BinaryOperator 0x14d027ee0 <col:30, col:37> 'int' '='
    |   | |-DeclRefExpr 0x14d027ea0 <col:30> 'int' lvalue Var 0x14d027688 'plen' 'int'
    |   | `-IntegerLiteral 0x14d027ec0 <col:37> 'int' 4
    |   `-BreakStmt 0x14d028038 <col:55>
    |-IfStmt 0x14d02a0b8 <line:12:3, line:26:3> has_else
    | |-ImplicitCastExpr 0x14d0280b8 <line:12:7> 'const char *' <LValueToRValue>
    | | `-DeclRefExpr 0x14d028098 <col:7> 'const char *' lvalue Var 0x14d0275b8 'pattern' 'const char *'
    | |-CompoundStmt 0x14d0296c0 <col:16, line:18:3>
    | | |-IfStmt 0x14d0281d0 <line:13:5, col:37>
    | | | |-BinaryOperator 0x14d028150 <col:9, col:24> 'int' contains-errors '!='
    | | | | |-RecoveryExpr 0x14d028108 <col:9, col:12> '<dependent type>' contains-errors lvalue
    | | | | | `-DeclRefExpr 0x14d0280d0 <col:9> 'struct jv_parser *' lvalue ParmVar 0x14d00e268 'p' 'struct jv_parser *'
    | | | | `-DeclRefExpr 0x14d028130 <col:24> 'int' lvalue Var 0x14d027688 'plen' 'int'
    | | | `-ReturnStmt 0x14d0281c0 <col:30, col:37>
    | | |   `-ImplicitCastExpr 0x14d0281a8 <col:37> 'int' <PointerToIntegral>
    | | |     `-ImplicitCastExpr 0x14d028190 <col:37> 'char *' <ArrayToPointerDecay>
    | | |       `-StringLiteral 0x14d028170 <col:37> 'char[4]' lvalue "STR"
    | | |-ForStmt 0x14d029380 <line:14:5, line:16:16>
    | | | |-DeclStmt 0x14d028290 <line:14:10, col:17>
    | | | | `-VarDecl 0x14d028208 <col:10, col:16> col:14 used i 'int' cinit
    | | | |   `-IntegerLiteral 0x14d028270 <col:16> 'int' 0
    | | | |-<<<NULL>>>
    | | | |-BinaryOperator 0x14d028318 <col:19, col:21> 'int' '<'
    | | | | |-ImplicitCastExpr 0x14d0282e8 <col:19> 'int' <LValueToRValue>
    | | | | | `-DeclRefExpr 0x14d0282a8 <col:19> 'int' lvalue Var 0x14d028208 'i' 'int'
    | | | | `-ImplicitCastExpr 0x14d028300 <col:21> 'int' <LValueToRValue>
    | | | |   `-DeclRefExpr 0x14d0282c8 <col:21> 'int' lvalue Var 0x14d027688 'plen' 'int'
    | | | |-UnaryOperator 0x14d028358 <col:27, col:28> 'int' postfix '++'
    | | | | `-DeclRefExpr 0x14d028338 <col:27> 'int' lvalue Var 0x14d028208 'i' 'int'
    | | | `-IfStmt 0x14d029360 <line:15:7, line:16:16>
    | | |   |-BinaryOperator 0x14d0292e0 <line:15:11, col:38> 'int' contains-errors '!='
    | | |   | |-ArraySubscriptExpr 0x14d029230 <col:11, col:24> '<dependent type>' contains-errors lvalue
    | | |   | | |-ImplicitCastExpr 0x14d029200 <col:11, col:14> '<dependent type>' contains-errors <LValueToRValue>
    | | |   | | | `-RecoveryExpr 0x14d0283a8 <col:11, col:14> '<dependent type>' contains-errors lvalue
    | | |   | | |   `-DeclRefExpr 0x14d028370 <col:11> 'struct jv_parser *' lvalue ParmVar 0x14d00e268 'p' 'struct jv_parser *'
    | | |   | | `-ImplicitCastExpr 0x14d029218 <col:23> 'int' <LValueToRValue>
    | | |   | |   `-DeclRefExpr 0x14d0283d0 <col:23> 'int' lvalue Var 0x14d028208 'i' 'int'
    | | |   | `-ArraySubscriptExpr 0x14d0292c0 <col:29, col:38> 'const char' lvalue
    | | |   |   |-ImplicitCastExpr 0x14d029290 <col:29> 'const char *' <LValueToRValue>
    | | |   |   | `-DeclRefExpr 0x14d029250 <col:29> 'const char *' lvalue Var 0x14d0275b8 'pattern' 'const char *'
    | | |   |   `-ImplicitCastExpr 0x14d0292a8 <col:37> 'int' <LValueToRValue>
    | | |   |     `-DeclRefExpr 0x14d029270 <col:37> 'int' lvalue Var 0x14d028208 'i' 'int'
    | | |   `-ReturnStmt 0x14d029350 <line:16:9, col:16>
    | | |     `-ImplicitCastExpr 0x14d029338 <col:16> 'int' <PointerToIntegral>
    | | |       `-ImplicitCastExpr 0x14d029320 <col:16> 'char *' <ArrayToPointerDecay>
    | | |         `-StringLiteral 0x14d029300 <col:16> 'char[4]' lvalue "STR"
    | | `-CallExpr 0x14d029698 <line:17:5, col:20> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x14d029498 <col:5> 'int ()' Function 0x14d0293e0 'TRY' 'int ()'
    | |   `-CallExpr 0x14d029668 <col:9, col:19> '<dependent type>' contains-errors
    | |     |-DeclRefExpr 0x14d029598 <col:9> 'int ()' Function 0x14d0294e0 'value' 'int ()'
    | |     |-DeclRefExpr 0x14d0295b8 <col:15> 'struct jv_parser *' lvalue ParmVar 0x14d00e268 'p' 'struct jv_parser *'
    | |     `-RecoveryExpr 0x14d029648 <col:18> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x14d02a080 <line:18:10, line:26:3>
    |   |-BinaryOperator 0x14d029818 <line:20:5, col:32> '<dependent type>' contains-errors '='
    |   | |-ArraySubscriptExpr 0x14d0297d8 <col:5, col:28> '<dependent type>' contains-errors lvalue
    |   | | |-ImplicitCastExpr 0x14d0297a8 <col:5, col:8> '<dependent type>' contains-errors <LValueToRValue>
    |   | | | `-RecoveryExpr 0x14d029720 <col:5, col:8> '<dependent type>' contains-errors lvalue
    |   | | |   `-DeclRefExpr 0x14d0296e8 <col:5> 'struct jv_parser *' lvalue ParmVar 0x14d00e268 'p' 'struct jv_parser *'
    |   | | `-ImplicitCastExpr 0x14d0297c0 <col:17, col:20> '<dependent type>' contains-errors <LValueToRValue>
    |   | |   `-RecoveryExpr 0x14d029780 <col:17, col:20> '<dependent type>' contains-errors lvalue
    |   | |     `-DeclRefExpr 0x14d029748 <col:17> 'struct jv_parser *' lvalue ParmVar 0x14d00e268 'p' 'struct jv_parser *'
    |   | `-IntegerLiteral 0x14d0297f8 <col:32> 'int' 0
    |   |-DeclStmt 0x14d0298f0 <line:21:5, col:18>
    |   | `-VarDecl 0x14d029850 <col:5, col:17> col:11 used end 'char *' cinit
    |   |   `-ImplicitCastExpr 0x14d0298d8 <col:17> 'char *' <NullToPointer>
    |   |     `-IntegerLiteral 0x14d0298b8 <col:17> 'int' 0
    |   |-DeclStmt 0x14d029c00 <line:22:5, col:55>
    |   | `-VarDecl 0x14d029920 <col:5, col:54> col:12 used d 'double' cinit
    |   |   `-CallExpr 0x14d029bc8 <col:16, col:54> '<dependent type>' contains-errors
    |   |     |-DeclRefExpr 0x14d029a68 <col:16> 'int ()' Function 0x14d0299b0 'jvp_strtod' 'int ()'
    |   |     |-UnaryOperator 0x14d029ae8 <col:27, col:31> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   |     | `-RecoveryExpr 0x14d029ac0 <col:28, col:31> '<dependent type>' contains-errors lvalue
    |   |     |   `-DeclRefExpr 0x14d029a88 <col:28> 'struct jv_parser *' lvalue ParmVar 0x14d00e268 'p' 'struct jv_parser *'
    |   |     |-RecoveryExpr 0x14d029b38 <col:37, col:40> '<dependent type>' contains-errors lvalue
    |   |     | `-DeclRefExpr 0x14d029b00 <col:37> 'struct jv_parser *' lvalue ParmVar 0x14d00e268 'p' 'struct jv_parser *'
    |   |     `-UnaryOperator 0x14d029bb0 <col:50, col:51> 'char **' prefix '&' cannot overflow
    |   |       `-DeclRefExpr 0x14d029b60 <col:51> 'char *' lvalue Var 0x14d029850 'end' 'char *'
    |   |-IfStmt 0x14d029de8 <line:23:5, line:24:14>
    |   | |-BinaryOperator 0x14d029d68 <line:23:9, col:29> 'int' '||'
    |   | | |-BinaryOperator 0x14d029c88 <col:9, col:16> 'int' '=='
    |   | | | |-ImplicitCastExpr 0x14d029c58 <col:9> 'char *' <LValueToRValue>
    |   | | | | `-DeclRefExpr 0x14d029c18 <col:9> 'char *' lvalue Var 0x14d029850 'end' 'char *'
    |   | | | `-ImplicitCastExpr 0x14d029c70 <col:16> 'char *' <NullToPointer>
    |   | | |   `-IntegerLiteral 0x14d029c38 <col:16> 'int' 0
    |   | | `-BinaryOperator 0x14d029d48 <col:21, col:29> 'int' '!='
    |   | |   |-ImplicitCastExpr 0x14d029d30 <col:21, col:22> 'int' <IntegralCast>
    |   | |   | `-ImplicitCastExpr 0x14d029d18 <col:21, col:22> 'char' <LValueToRValue>
    |   | |   |   `-UnaryOperator 0x14d029ce0 <col:21, col:22> 'char' lvalue prefix '*' cannot overflow
    |   | |   |     `-ImplicitCastExpr 0x14d029cc8 <col:22> 'char *' <LValueToRValue>
    |   | |   |       `-DeclRefExpr 0x14d029ca8 <col:22> 'char *' lvalue Var 0x14d029850 'end' 'char *'
    |   | |   `-IntegerLiteral 0x14d029cf8 <col:29> 'int' 0
    |   | `-ReturnStmt 0x14d029dd8 <line:24:7, col:14>
    |   |   `-ImplicitCastExpr 0x14d029dc0 <col:14> 'int' <PointerToIntegral>
    |   |     `-ImplicitCastExpr 0x14d029da8 <col:14> 'char *' <ArrayToPointerDecay>
    |   |       `-StringLiteral 0x14d029d88 <col:14> 'char[4]' lvalue "STR"
    |   `-CallExpr 0x14d02a058 <line:25:5, col:31> 'int' contains-errors
    |     |-ImplicitCastExpr 0x14d02a040 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x14d029e08 <col:5> 'int ()' Function 0x14d0293e0 'TRY' 'int ()'
    |     `-CallExpr 0x14d029ff8 <col:9, col:30> 'int' contains-errors
    |       |-ImplicitCastExpr 0x14d029fe0 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |       | `-DeclRefExpr 0x14d029e28 <col:9> 'int ()' Function 0x14d0294e0 'value' 'int ()'
    |       |-ImplicitCastExpr 0x14d02a028 <col:15> 'struct jv_parser *' <LValueToRValue>
    |       | `-DeclRefExpr 0x14d029e48 <col:15> 'struct jv_parser *' lvalue ParmVar 0x14d00e268 'p' 'struct jv_parser *'
    |       `-CallExpr 0x14d029fa0 <col:18, col:29> 'int' contains-errors
    |         |-ImplicitCastExpr 0x14d029f88 <col:18> 'int (*)()' <FunctionToPointerDecay>
    |         | `-DeclRefExpr 0x14d029f48 <col:18> 'int ()' Function 0x14d029e90 'jv_number' 'int ()'
    |         `-ImplicitCastExpr 0x14d029fc8 <col:28> 'double' contains-errors <LValueToRValue>
    |           `-DeclRefExpr 0x14d029f68 <col:28> 'double' contains-errors lvalue Var 0x14d029920 'd' 'double'
    |-BinaryOperator 0x14d02a168 <line:27:3, col:17> '<dependent type>' contains-errors '='
    | |-RecoveryExpr 0x14d02a120 <col:3, col:6> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x14d02a0e8 <col:3> 'struct jv_parser *' lvalue ParmVar 0x14d00e268 'p' 'struct jv_parser *'
    | `-IntegerLiteral 0x14d02a148 <col:17> 'int' 0
    `-ReturnStmt 0x14d02a1a8 <line:28:3, col:10>
      `-IntegerLiteral 0x14d02a188 <col:10> 'int' 0
