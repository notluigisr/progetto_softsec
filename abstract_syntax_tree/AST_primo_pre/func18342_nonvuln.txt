`-FunctionDecl 0x1229283e8  line:1:1 invalid poppler_document_new_from_data 'int (char *, int, const char *, int **)'
  |-ParmVarDecl 0x1229280d8 <col:33, col:46> col:46 data 'char *'
  |-ParmVarDecl 0x122928158 <line:2:33, col:46> col:46 length 'int'
  |-ParmVarDecl 0x1229281d8 <line:3:33, col:46> col:46 used password 'const char *'
  |-ParmVarDecl 0x1229282e0 <line:4:33, col:46> col:46 invalid error 'int **'
  `-CompoundStmt 0x123008de8 <line:5:1, line:22:1>
    |-IfStmt 0x1229285d8 <line:10:3, line:12:3>
    | |-UnaryOperator 0x122928598 <line:10:7, col:8> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x122928580 <col:8> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x122928560 <col:8> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x1229285c8 <col:22, line:12:3>
    `-BinaryOperator 0x123008c90 <line:17:3, col:51> 'const char *' '='
      |-DeclRefExpr 0x122928610 <col:3> 'const char *' lvalue ParmVar 0x1229281d8 'password' 'const char *'
      `-ImplicitCastExpr 0x123008858 <col:16, col:51> 'const char *' <IntegralToPointer>
        `-CallExpr 0x123008818 <col:16, col:51> 'int'
          |-ImplicitCastExpr 0x123008800 <col:16> 'int (*)()' <FunctionToPointerDecay>
          | `-DeclRefExpr 0x122928790 <col:16> 'int ()' Function 0x1229286d8 'poppler_password_to_latin1' 'int ()'
          `-ImplicitCastExpr 0x123008840 <col:43> 'const char *' <LValueToRValue>
            `-DeclRefExpr 0x1229287b0 <col:43> 'const char *' lvalue ParmVar 0x1229281d8 'password' 'const char *'
