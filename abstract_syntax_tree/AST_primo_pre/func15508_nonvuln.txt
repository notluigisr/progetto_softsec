`-FunctionDecl 0x12500ddf8  line:1:1 invalid next_int 'int (int *)'
  |-ParmVarDecl 0x12500dd28 <col:11, col:17> col:17 invalid fstream 'int *'
  `-CompoundStmt 0x125028020 <line:2:1, line:27:1>
    |-DeclStmt 0x12500df28 <line:3:2, col:8>
    | `-VarDecl 0x12500dec0 <col:2, col:6> col:6 used ch 'int'
    |-DeclStmt 0x12500dfe0 <line:4:2, col:15>
    | `-VarDecl 0x12500df58 <col:2, col:14> col:6 used value 'int' cinit
    |   `-IntegerLiteral 0x12500dfc0 <col:14> 'int' 0
    |-DeclStmt 0x12500e098 <line:5:2, col:16>
    | `-VarDecl 0x12500e010 <col:2, col:15> col:6 used gotone 'int' cinit
    |   `-IntegerLiteral 0x12500e078 <col:15> 'int' 0
    |-DeclStmt 0x12500e150 <line:6:2, col:14>
    | `-VarDecl 0x12500e0c8 <col:2, col:13> col:6 used done 'int' cinit
    |   `-IntegerLiteral 0x12500e130 <col:13> 'int' 0
    |-WhileStmt 0x125027fb8 <line:10:2, line:25:2>
    | |-UnaryOperator 0x12500e1a0 <line:10:9, col:10> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x12500e188 <col:10> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x12500e168 <col:10> 'int' lvalue Var 0x12500e0c8 'done' 'int'
    | `-CompoundStmt 0x125027f98 <col:16, line:25:2>
    |   |-BinaryOperator 0x12500e398 <line:11:3, col:21> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x12500e1b8 <col:3> 'int' lvalue Var 0x12500dec0 'ch' 'int'
    |   | `-CallExpr 0x12500e370 <col:8, col:21> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x12500e330 <col:8> 'int ()' Function 0x12500e278 'getc' 'int ()'
    |   |   `-RecoveryExpr 0x12500e350 <col:14> '<dependent type>' contains-errors lvalue
    |   `-IfStmt 0x125027f68 <line:12:3, line:24:3> has_else
    |     |-BinaryOperator 0x125027840 <line:12:7, col:13> 'int' contains-errors '=='
    |     | |-DeclRefExpr 0x12500e3b8 <col:7> 'int' lvalue Var 0x12500dec0 'ch' 'int'
    |     | `-RecoveryExpr 0x125027820 <col:13> '<dependent type>' contains-errors lvalue
    |     |-CompoundStmt 0x125027910 <col:18, line:15:3>
    |     | |-BinaryOperator 0x1250278b8 <line:13:4, col:13> 'int' '='
    |     | | |-DeclRefExpr 0x125027860 <col:4> 'int' lvalue Var 0x12500df58 'value' 'int'
    |     | | `-UnaryOperator 0x1250278a0 <col:12, col:13> 'int' prefix '-'
    |     | |   `-IntegerLiteral 0x125027880 <col:13> 'int' 1
    |     | `-UnaryOperator 0x1250278f8 <line:14:4, col:8> 'int' postfix '++'
    |     |   `-DeclRefExpr 0x1250278d8 <col:4> 'int' lvalue Var 0x12500e0c8 'done' 'int'
    |     `-CompoundStmt 0x125027f48 <line:15:10, line:24:3>
    |       |-CompoundAssignOperator 0x125027970 <line:17:4, col:10> 'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
    |       | |-DeclRefExpr 0x125027930 <col:4> 'int' lvalue Var 0x12500dec0 'ch' 'int'
    |       | `-IntegerLiteral 0x125027950 <col:10> 'int' 255
    |       `-IfStmt 0x125027f18 <line:18:4, line:23:4> has_else
    |         |-CallExpr 0x125027b08 <line:18:8, col:28> 'int'
    |         | |-ImplicitCastExpr 0x125027af0 <col:8> 'int (*)()' <FunctionToPointerDecay>
    |         | | `-DeclRefExpr 0x125027a80 <col:8> 'int ()' Function 0x1250279c8 'g_ascii_isxdigit' 'int ()'
    |         | `-ImplicitCastExpr 0x125027b30 <col:26> 'int' <LValueToRValue>
    |         |   `-DeclRefExpr 0x125027aa0 <col:26> 'int' lvalue Var 0x12500dec0 'ch' 'int'
    |         |-CompoundStmt 0x125027df0 <col:31, line:21:4>
    |         | |-BinaryOperator 0x125027d98 <line:19:5, col:52> 'int' '='
    |         | | |-DeclRefExpr 0x125027b48 <col:5> 'int' lvalue Var 0x12500df58 'value' 'int'
    |         | | `-BinaryOperator 0x125027d78 <col:13, col:52> 'int' '+'
    |         | |   |-ParenExpr 0x125027be0 <col:13, col:24> 'int'
    |         | |   | `-BinaryOperator 0x125027bc0 <col:14, col:23> 'int' '<<'
    |         | |   |   |-ImplicitCastExpr 0x125027ba8 <col:14> 'int' <LValueToRValue>
    |         | |   |   | `-DeclRefExpr 0x125027b68 <col:14> 'int' lvalue Var 0x12500df58 'value' 'int'
    |         | |   |   `-IntegerLiteral 0x125027b88 <col:23> 'int' 4
    |         | |   `-CallExpr 0x125027d38 <col:28, col:52> 'int'
    |         | |     |-ImplicitCastExpr 0x125027d20 <col:28> 'int (*)()' <FunctionToPointerDecay>
    |         | |     | `-DeclRefExpr 0x125027ce0 <col:28> 'int ()' Function 0x125027c28 'g_ascii_xdigit_value' 'int ()'
    |         | |     `-ImplicitCastExpr 0x125027d60 <col:50> 'int' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x125027d00 <col:50> 'int' lvalue Var 0x12500dec0 'ch' 'int'
    |         | `-UnaryOperator 0x125027dd8 <line:20:5, col:11> 'int' postfix '++'
    |         |   `-DeclRefExpr 0x125027db8 <col:5> 'int' lvalue Var 0x12500e010 'gotone' 'int'
    |         `-IfStmt 0x125027ef8 <line:21:11, line:23:4>
    |           |-RecoveryExpr 0x125027e88 <line:21:15, col:38> '_Bool' contains-errors
    |           `-CompoundStmt 0x125027ee0 <col:46, line:23:4>
    |             `-UnaryOperator 0x125027ec8 <line:22:5, col:9> 'int' postfix '++'
    |               `-DeclRefExpr 0x125027ea8 <col:5> 'int' lvalue Var 0x12500e0c8 'done' 'int'
    `-ReturnStmt 0x125028010 <line:26:2, col:9>
      `-ImplicitCastExpr 0x125027ff8 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x125027fd8 <col:9> 'int' lvalue Var 0x12500df58 'value' 'int'
