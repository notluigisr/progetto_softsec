`-FunctionDecl 0x157053488  line:1:1 invalid f_setbufvar 'int (int *, int *)'
  |-ParmVarDecl 0x157053328 <col:13, col:23> col:23 invalid argvars 'int *'
  |-ParmVarDecl 0x1570533a8 <col:32, col:42> col:42 invalid rettv 'int *'
  `-CompoundStmt 0x15706f0c8 <line:2:1, line:49:1>
    |-DeclStmt 0x157053670 <line:4:5, col:33>
    | |-VarDecl 0x157053570 <col:5, col:13> col:13 used varname 'char *'
    | `-VarDecl 0x1570535f0 <col:5, col:23> col:23 used bufvarname 'char *'
    |-IfStmt 0x157053898 <line:7:5, line:8:2>
    | |-CallExpr 0x157053868 <line:7:9, col:22> 'int'
    | | `-ImplicitCastExpr 0x157053850 <col:9> 'int (*)()' <FunctionToPointerDecay>
    | |   `-DeclRefExpr 0x157053800 <col:9> 'int ()' Function 0x157053748 'check_secure' 'int ()'
    | `-ReturnStmt 0x157053888 <line:8:2>
    |-IfStmt 0x15706cda0 <line:10:5, line:13:2>
    | |-RecoveryExpr 0x15706cd70 <line:10:9, line:12:46> '_Bool' contains-errors
    | `-ReturnStmt 0x15706cd90 <line:13:2>
    |-BinaryOperator 0x15706cf98 <line:15:5, col:44> 'char *' contains-errors '='
    | |-DeclRefExpr 0x15706cdc0 <col:5> 'char *' lvalue Var 0x157053570 'varname' 'char *'
    | `-CallExpr 0x15706cf70 <col:15, col:44> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x15706cec0 <col:15> 'int ()' Function 0x15706ce08 'tv_get_string_chk' 'int ()'
    |   `-UnaryOperator 0x15706cf58 <col:33, col:43> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-ArraySubscriptExpr 0x15706cf38 <col:34, col:43> '<dependent type>' contains-errors lvalue
    |       |-ImplicitCastExpr 0x15706cf20 <col:34> '<dependent type>' contains-errors <LValueToRValue>
    |       | `-RecoveryExpr 0x15706cee0 <col:34> '<dependent type>' contains-errors lvalue
    |       `-IntegerLiteral 0x15706cf00 <col:42> 'int' 1
    `-IfStmt 0x15706f0a8 <line:19:5, line:48:5>
      |-BinaryOperator 0x15706d458 <line:19:9, col:51> 'int' contains-errors '&&'
      | |-BinaryOperator 0x15706d3d8 <col:9, col:35> 'int' contains-errors '&&'
      | | |-BinaryOperator 0x15706d378 <col:9, col:16> 'int' contains-errors '!='
      | | | |-RecoveryExpr 0x15706d338 <col:9> '<dependent type>' contains-errors lvalue
      | | | `-RecoveryExpr 0x15706d358 <col:16> '<dependent type>' contains-errors lvalue
      | | `-BinaryOperator 0x15706d3b8 <col:24, col:35> 'int' contains-errors '!='
      | |   |-DeclRefExpr 0x15706d250 <col:24> 'char *' lvalue Var 0x157053570 'varname' 'char *'
      | |   `-RecoveryExpr 0x15706d398 <col:35> '<dependent type>' contains-errors lvalue
      | `-BinaryOperator 0x15706d438 <col:43, col:51> 'int' contains-errors '!='
      |   |-RecoveryExpr 0x15706d3f8 <col:43> '<dependent type>' contains-errors lvalue
      |   `-RecoveryExpr 0x15706d418 <col:51> '<dependent type>' contains-errors lvalue
      `-CompoundStmt 0x15706f090 <line:20:5, line:48:5>
        `-IfStmt 0x15706f060 <line:21:2, line:47:2> has_else
          |-BinaryOperator 0x15706d510 <line:21:6, col:18> 'int' '=='
          | |-ImplicitCastExpr 0x15706d4f8 <col:6, col:7> 'int' <IntegralCast>
          | | `-ImplicitCastExpr 0x15706d4e0 <col:6, col:7> 'char' <LValueToRValue>
          | |   `-UnaryOperator 0x15706d4b0 <col:6, col:7> 'char' lvalue prefix '*' cannot overflow
          | |     `-ImplicitCastExpr 0x15706d498 <col:7> 'char *' <LValueToRValue>
          | |       `-DeclRefExpr 0x15706d478 <col:7> 'char *' lvalue Var 0x157053570 'varname' 'char *'
          | `-CharacterLiteral 0x15706d4c8 <col:18> 'int' 38
          |-CompoundStmt 0x15706d8a8 <line:22:2, line:32:2>
          `-CompoundStmt 0x15706f040 <line:34:2, line:47:2>
            |-BinaryOperator 0x15706e9e8 <line:35:6, col:44> 'char *' '='
            | |-DeclRefExpr 0x15706d8b8 <col:6> 'char *' lvalue Var 0x1570535f0 'bufvarname' 'char *'
            | `-ImplicitCastExpr 0x15706e9d0 <col:19, col:44> 'char *' <IntegralToPointer>
            |   `-CallExpr 0x15706e9a8 <col:19, col:44> 'int'
            |     |-ImplicitCastExpr 0x15706e990 <col:19> 'int (*)()' <FunctionToPointerDecay>
            |     | `-DeclRefExpr 0x15706d9b8 <col:19> 'int ()' Function 0x15706d900 'alloc' 'int ()'
            |     `-BinaryOperator 0x15706e970 <col:25, col:43> 'int' '+'
            |       |-CallExpr 0x15706e910 <col:25, col:39> 'int'
            |       | |-ImplicitCastExpr 0x15706e8f8 <col:25> 'int (*)()' <FunctionToPointerDecay>
            |       | | `-DeclRefExpr 0x15706e8b8 <col:25> 'int ()' Function 0x15706e800 'STRLEN' 'int ()'
            |       | `-ImplicitCastExpr 0x15706e938 <col:32> 'char *' <LValueToRValue>
            |       |   `-DeclRefExpr 0x15706e8d8 <col:32> 'char *' lvalue Var 0x157053570 'varname' 'char *'
            |       `-IntegerLiteral 0x15706e950 <col:43> 'int' 3
            `-IfStmt 0x15706f020 <line:36:6, line:46:6>
              |-RecoveryExpr 0x15706ea28 <line:36:10, col:24> '_Bool' contains-errors
              `-CompoundStmt 0x15706eff8 <line:37:6, line:46:6>
                |-CallExpr 0x15706ebe8 <line:41:3, col:27> 'int'
                | |-ImplicitCastExpr 0x15706ebd0 <col:3> 'int (*)()' <FunctionToPointerDecay>
                | | `-DeclRefExpr 0x15706eb28 <col:3> 'int ()' Function 0x15706ea70 'STRCPY' 'int ()'
                | |-ImplicitCastExpr 0x15706ec18 <col:10> 'char *' <LValueToRValue>
                | | `-DeclRefExpr 0x15706eb48 <col:10> 'char *' lvalue Var 0x1570535f0 'bufvarname' 'char *'
                | `-ImplicitCastExpr 0x15706ec30 <col:22> 'char *' <ArrayToPointerDecay>
                |   `-StringLiteral 0x15706ebb0 <col:22> 'char[4]' lvalue "STR"
                |-CallExpr 0x15706ed18 <line:42:3, col:33> 'int'
                | |-ImplicitCastExpr 0x15706ed00 <col:3> 'int (*)()' <FunctionToPointerDecay>
                | | `-DeclRefExpr 0x15706ec48 <col:3> 'int ()' Function 0x15706ea70 'STRCPY' 'int ()'
                | |-BinaryOperator 0x15706ecc0 <col:10, col:23> 'char *' '+'
                | | |-ImplicitCastExpr 0x15706eca8 <col:10> 'char *' <LValueToRValue>
                | | | `-DeclRefExpr 0x15706ec68 <col:10> 'char *' lvalue Var 0x1570535f0 'bufvarname' 'char *'
                | | `-IntegerLiteral 0x15706ec88 <col:23> 'int' 2
                | `-ImplicitCastExpr 0x15706ed48 <col:26> 'char *' <LValueToRValue>
                |   `-DeclRefExpr 0x15706ece0 <col:26> 'char *' lvalue Var 0x157053570 'varname' 'char *'
                `-CallExpr 0x15706efb8 <line:44:3, col:22> 'int'
                  |-ImplicitCastExpr 0x15706efa0 <col:3> 'int (*)()' <FunctionToPointerDecay>
                  | `-DeclRefExpr 0x15706ef60 <col:3> 'int ()' Function 0x15706eea8 'vim_free' 'int ()'
                  `-ImplicitCastExpr 0x15706efe0 <col:12> 'char *' <LValueToRValue>
                    `-DeclRefExpr 0x15706ef80 <col:12> 'char *' lvalue Var 0x1570535f0 'bufvarname' 'char *'
