`-FunctionDecl 0x14600e088  line:1:20 invalid crypto_larval_lookup 'struct crypto_alg *(const char *, int, int)'
  |-ParmVarDecl 0x14600dd78 <col:41, col:53> col:53 used name 'const char *'
  |-ParmVarDecl 0x14600de10 <col:59, col:63> col:63 referenced invalid type 'int'
  |-ParmVarDecl 0x14600de90 <col:69, col:73> col:73 referenced invalid mask 'int'
  `-CompoundStmt 0x147008560 <line:2:1, line:26:1>
    |-DeclStmt 0x14600e240 <line:3:2, col:24>
    | `-VarDecl 0x14600e1d8 <col:2, col:21> col:21 used alg 'struct crypto_alg *'
    |-IfStmt 0x146027518 <line:5:2, line:6:25>
    | |-UnaryOperator 0x14600e290 <line:5:6, col:7> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x14600e278 <col:7> 'const char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x14600e258 <col:7> 'const char *' lvalue ParmVar 0x14600dd78 'name' 'const char *'
    | `-ReturnStmt 0x146027508 <line:6:3, col:25>
    |   `-CallExpr 0x1460274e0 <col:10, col:25> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x146027400 <col:10> 'int ()' Function 0x14600e348 'ERR_PTR' 'int ()'
    |     `-UnaryOperator 0x1460274c8 <col:18, col:19> '<dependent type>' contains-errors prefix '-' cannot overflow
    |       `-ImplicitCastExpr 0x1460274b0 <col:19> '<dependent type>' contains-errors <LValueToRValue>
    |         `-RecoveryExpr 0x146027490 <col:19> '<dependent type>' contains-errors lvalue
    |-CompoundAssignOperator 0x146027638 <line:9:2, col:10> '<dependent type>' contains-errors '&=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    | |-RecoveryExpr 0x1460275f0 <col:2> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x1460275d0 <col:2> 'int' lvalue ParmVar 0x14600de10 'type' 'int'
    | `-RecoveryExpr 0x146027618 <col:10> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x146027820 <line:11:2, col:42> 'struct crypto_alg *' contains-errors '='
    | |-DeclRefExpr 0x146027668 <col:2> 'struct crypto_alg *' lvalue Var 0x14600e1d8 'alg' 'struct crypto_alg *'
    | `-CallExpr 0x1460277e8 <col:8, col:42> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x146027768 <col:8> 'int ()' Function 0x1460276b0 'crypto_alg_lookup' 'int ()'
    |   |-DeclRefExpr 0x146027788 <col:26> 'const char *' lvalue ParmVar 0x14600dd78 'name' 'const char *'
    |   |-RecoveryExpr 0x1460277a8 <col:32> '<dependent type>' contains-errors lvalue
    |   `-RecoveryExpr 0x1460277c8 <col:38> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x146027d80 <line:12:2, line:20:2>
    | |-UnaryOperator 0x146027878 <line:12:6, col:7> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x146027860 <col:7> 'struct crypto_alg *' <LValueToRValue>
    | |   `-DeclRefExpr 0x146027840 <col:7> 'struct crypto_alg *' lvalue Var 0x14600e1d8 'alg' 'struct crypto_alg *'
    | `-CompoundStmt 0x146027d58 <col:12, line:20:2>
    |   |-CallExpr 0x146027a58 <line:13:3, col:29> 'int'
    |   | |-ImplicitCastExpr 0x146027a40 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x146027970 <col:3> 'int ()' Function 0x1460278b8 'request_module' 'int ()'
    |   | |-ImplicitCastExpr 0x146027a88 <col:18> 'char *' <ArrayToPointerDecay>
    |   | | `-StringLiteral 0x1460279d0 <col:18> 'char[4]' lvalue "STR"
    |   | `-ImplicitCastExpr 0x146027aa0 <col:25> 'const char *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x1460279f0 <col:25> 'const char *' lvalue ParmVar 0x14600dd78 'name' 'const char *'
    |   |-IfStmt 0x146027c40 <line:15:3, line:17:30>
    |   | |-RecoveryExpr 0x146027b48 <line:15:7, line:16:33> '_Bool' contains-errors
    |   | `-CallExpr 0x146027be0 <line:17:4, col:30> 'int'
    |   |   |-ImplicitCastExpr 0x146027bc8 <col:4> 'int (*)()' <FunctionToPointerDecay>
    |   |   | `-DeclRefExpr 0x146027b68 <col:4> 'int ()' Function 0x1460278b8 'request_module' 'int ()'
    |   |   |-ImplicitCastExpr 0x146027c10 <col:19> 'char *' <ArrayToPointerDecay>
    |   |   | `-StringLiteral 0x146027b88 <col:19> 'char[4]' lvalue "STR"
    |   |   `-ImplicitCastExpr 0x146027c28 <col:26> 'const char *' <LValueToRValue>
    |   |     `-DeclRefExpr 0x146027ba8 <col:26> 'const char *' lvalue ParmVar 0x14600dd78 'name' 'const char *'
    |   `-BinaryOperator 0x146027d38 <line:19:3, col:43> 'struct crypto_alg *' contains-errors '='
    |     |-DeclRefExpr 0x146027c60 <col:3> 'struct crypto_alg *' lvalue Var 0x14600e1d8 'alg' 'struct crypto_alg *'
    |     `-CallExpr 0x146027d00 <col:9, col:43> '<dependent type>' contains-errors
    |       |-DeclRefExpr 0x146027c80 <col:9> 'int ()' Function 0x1460276b0 'crypto_alg_lookup' 'int ()'
    |       |-DeclRefExpr 0x146027ca0 <col:27> 'const char *' lvalue ParmVar 0x14600dd78 'name' 'const char *'
    |       |-RecoveryExpr 0x146027cc0 <col:33> '<dependent type>' contains-errors lvalue
    |       `-RecoveryExpr 0x146027ce0 <col:39> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x147008398 <line:22:2, line:23:60>
    | |-ImplicitCastExpr 0x146027dc0 <line:22:6> 'struct crypto_alg *' <LValueToRValue>
    | | `-DeclRefExpr 0x146027da0 <col:6> 'struct crypto_alg *' lvalue Var 0x14600e1d8 'alg' 'struct crypto_alg *'
    | `-ReturnStmt 0x147008388 <line:23:3, col:60>
    |   `-ConditionalOperator 0x147008358 <col:10, col:60> 'struct crypto_alg *'
    |     |-CallExpr 0x146027f10 <col:10, col:30> 'int'
    |     | |-ImplicitCastExpr 0x146027ef8 <col:10> 'int (*)()' <FunctionToPointerDecay>
    |     | | `-DeclRefExpr 0x146027eb8 <col:10> 'int ()' Function 0x146027e00 'crypto_is_larval' 'int ()'
    |     | `-ImplicitCastExpr 0x146027f38 <col:27> 'struct crypto_alg *' <LValueToRValue>
    |     |   `-DeclRefExpr 0x146027ed8 <col:27> 'struct crypto_alg *' lvalue Var 0x14600e1d8 'alg' 'struct crypto_alg *'
    |     |-ImplicitCastExpr 0x147008340 <col:34, col:56> 'struct crypto_alg *' <IntegralToPointer>
    |     | `-CallExpr 0x146028088 <col:34, col:56> 'int'
    |     |   |-ImplicitCastExpr 0x146028070 <col:34> 'int (*)()' <FunctionToPointerDecay>
    |     |   | `-DeclRefExpr 0x146028030 <col:34> 'int ()' Function 0x146027f78 'crypto_larval_wait' 'int ()'
    |     |   `-ImplicitCastExpr 0x1460280b0 <col:53> 'struct crypto_alg *' <LValueToRValue>
    |     |     `-DeclRefExpr 0x146028050 <col:53> 'struct crypto_alg *' lvalue Var 0x14600e1d8 'alg' 'struct crypto_alg *'
    |     `-ImplicitCastExpr 0x1460280e8 <col:60> 'struct crypto_alg *' <LValueToRValue>
    |       `-DeclRefExpr 0x1460280c8 <col:60> 'struct crypto_alg *' lvalue Var 0x14600e1d8 'alg' 'struct crypto_alg *'
    `-ReturnStmt 0x147008550 <line:25:2, col:43>
      `-CallExpr 0x147008518 <col:9, col:43> '<dependent type>' contains-errors
        |-DeclRefExpr 0x147008498 <col:9> 'int ()' Function 0x1470083e0 'crypto_larval_add' 'int ()'
        |-DeclRefExpr 0x1470084b8 <col:27> 'const char *' lvalue ParmVar 0x14600dd78 'name' 'const char *'
        |-RecoveryExpr 0x1470084d8 <col:33> '<dependent type>' contains-errors lvalue
        `-RecoveryExpr 0x1470084f8 <col:39> '<dependent type>' contains-errors lvalue
