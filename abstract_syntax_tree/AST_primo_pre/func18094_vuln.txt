`-FunctionDecl 0x12200de88  line:1:20 invalid parse_object 'const char *(int *, const char *)' static
  |-ParmVarDecl 0x12200dd28 <col:34, col:41> col:41 referenced invalid item 'int *'
  |-ParmVarDecl 0x12200dda8 <col:47, col:59> col:59 used value 'const char *'
  `-CompoundStmt 0x12202a158 <line:2:1, line:55:1>
    |-IfStmt 0x12200e090 <line:5:2, line:9:2>
    | |-BinaryOperator 0x12200dff0 <line:5:7, col:17> 'int' '!='
    | | |-ImplicitCastExpr 0x12200dfd8 <col:7, col:8> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x12200dfc0 <col:7, col:8> 'char' <LValueToRValue>
    | | |   `-UnaryOperator 0x12200df90 <col:7, col:8> 'const char' lvalue prefix '*' cannot overflow
    | | |     `-ImplicitCastExpr 0x12200df78 <col:8> 'const char *' <LValueToRValue>
    | | |       `-DeclRefExpr 0x12200df58 <col:8> 'const char *' lvalue ParmVar 0x12200dda8 'value' 'const char *'
    | | `-CharacterLiteral 0x12200dfa8 <col:17> 'int' 123
    | `-CompoundStmt 0x12200e078 <col:23, line:9:2>
    |   `-ReturnStmt 0x12200e068 <line:8:3, col:10>
    |     `-ImplicitCastExpr 0x12200e050 <col:10> 'const char *' <NullToPointer>
    |       `-IntegerLiteral 0x12200e030 <col:10> 'int' 0
    |-BinaryOperator 0x12200e198 <line:11:2, col:15> '<dependent type>' contains-errors '='
    | |-CXXDependentScopeMemberExpr 0x12200e0f8 <col:2, col:8> '<dependent type>' contains-errors lvalue ->type
    | | `-RecoveryExpr 0x12200e0d0 <col:2> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x12200e0b0 <col:2> 'int *' lvalue ParmVar 0x12200dd28 'item' 'int *'
    | `-RecoveryExpr 0x12200e178 <col:15> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x122028280 <line:12:2, col:25> 'const char *' '='
    | |-DeclRefExpr 0x12200e1b8 <col:2> 'const char *' lvalue ParmVar 0x12200dda8 'value' 'const char *'
    | `-ImplicitCastExpr 0x122027e40 <col:9, col:25> 'const char *' <IntegralToPointer>
    |   `-CallExpr 0x122027e18 <col:9, col:25> 'int'
    |     |-ImplicitCastExpr 0x122027e00 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x12200e330 <col:9> 'int ()' Function 0x12200e278 'skip' 'int ()'
    |     `-BinaryOperator 0x12200e3a8 <col:15, col:23> 'const char *' '+'
    |       |-ImplicitCastExpr 0x12200e390 <col:15> 'const char *' <LValueToRValue>
    |       | `-DeclRefExpr 0x12200e350 <col:15> 'const char *' lvalue ParmVar 0x12200dda8 'value' 'const char *'
    |       `-IntegerLiteral 0x12200e370 <col:23> 'int' 1
    |-IfStmt 0x1220283e0 <line:13:2, line:14:18>
    | |-BinaryOperator 0x122028338 <line:13:7, col:17> 'int' '=='
    | | |-ImplicitCastExpr 0x122028320 <col:7, col:8> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x122028308 <col:7, col:8> 'char' <LValueToRValue>
    | | |   `-UnaryOperator 0x1220282d8 <col:7, col:8> 'const char' lvalue prefix '*' cannot overflow
    | | |     `-ImplicitCastExpr 0x1220282c0 <col:8> 'const char *' <LValueToRValue>
    | | |       `-DeclRefExpr 0x1220282a0 <col:8> 'const char *' lvalue ParmVar 0x12200dda8 'value' 'const char *'
    | | `-CharacterLiteral 0x1220282f0 <col:17> 'int' 125
    | `-ReturnStmt 0x1220283d0 <line:14:3, col:18>
    |   `-BinaryOperator 0x1220283b0 <col:10, col:18> 'const char *' '+'
    |     |-ImplicitCastExpr 0x122028398 <col:10> 'const char *' <LValueToRValue>
    |     | `-DeclRefExpr 0x122028358 <col:10> 'const char *' lvalue ParmVar 0x12200dda8 'value' 'const char *'
    |     `-IntegerLiteral 0x122028378 <col:18> 'int' 1
    |-IfStmt 0x1220284e8 <line:16:2, line:17:10>
    | |-RecoveryExpr 0x122028480 <line:16:7, col:50> '_Bool' contains-errors
    | `-ReturnStmt 0x1220284d8 <line:17:3, col:10>
    |   `-ImplicitCastExpr 0x1220284c0 <col:10> 'const char *' <NullToPointer>
    |     `-IntegerLiteral 0x1220284a0 <col:10> 'int' 0
    |-IfStmt 0x122028760 <line:18:2, line:19:10>
    | |-RecoveryExpr 0x1220286f8 <line:18:7, col:64> '_Bool' contains-errors
    | `-ReturnStmt 0x122028750 <line:19:3, col:10>
    |   `-ImplicitCastExpr 0x122028738 <col:10> 'const char *' <NullToPointer>
    |     `-IntegerLiteral 0x122028718 <col:10> 'int' 0
    |-IfStmt 0x1220288f0 <line:22:2, line:26:2>
    | |-BinaryOperator 0x122028850 <line:22:7, col:17> 'int' '!='
    | | |-ImplicitCastExpr 0x122028838 <col:7, col:8> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x122028820 <col:7, col:8> 'char' <LValueToRValue>
    | | |   `-UnaryOperator 0x1220287f0 <col:7, col:8> 'const char' lvalue prefix '*' cannot overflow
    | | |     `-ImplicitCastExpr 0x1220287d8 <col:8> 'const char *' <LValueToRValue>
    | | |       `-DeclRefExpr 0x1220287b8 <col:8> 'const char *' lvalue ParmVar 0x12200dda8 'value' 'const char *'
    | | `-CharacterLiteral 0x122028808 <col:17> 'int' 58
    | `-CompoundStmt 0x1220288d8 <col:23, line:26:2>
    |   `-ReturnStmt 0x1220288c8 <line:25:3, col:10>
    |     `-ImplicitCastExpr 0x1220288b0 <col:10> 'const char *' <NullToPointer>
    |       `-IntegerLiteral 0x122028890 <col:10> 'int' 0
    |-IfStmt 0x122028ba8 <line:27:2, line:28:10>
    | |-RecoveryExpr 0x122028b40 <line:27:7, col:67> '_Bool' contains-errors
    | `-ReturnStmt 0x122028b98 <line:28:3, col:10>
    |   `-ImplicitCastExpr 0x122028b80 <col:10> 'const char *' <NullToPointer>
    |     `-IntegerLiteral 0x122028b60 <col:10> 'int' 0
    |-WhileStmt 0x122029f70 <line:30:2, line:48:2>
    | |-BinaryOperator 0x122028c60 <line:30:10, col:20> 'int' '=='
    | | |-ImplicitCastExpr 0x122028c48 <col:10, col:11> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x122028c30 <col:10, col:11> 'char' <LValueToRValue>
    | | |   `-UnaryOperator 0x122028c00 <col:10, col:11> 'const char' lvalue prefix '*' cannot overflow
    | | |     `-ImplicitCastExpr 0x122028be8 <col:11> 'const char *' <LValueToRValue>
    | | |       `-DeclRefExpr 0x122028bc8 <col:11> 'const char *' lvalue ParmVar 0x12200dda8 'value' 'const char *'
    | | `-CharacterLiteral 0x122028c18 <col:20> 'int' 44
    | `-CompoundStmt 0x122029f40 <col:26, line:48:2>
    |   |-IfStmt 0x122029a28 <line:32:3, line:33:11>
    |   | |-RecoveryExpr 0x122028db8 <line:32:8, col:40> '_Bool' contains-errors
    |   | `-ReturnStmt 0x122029a18 <line:33:4, col:11>
    |   |   `-ImplicitCastExpr 0x122029a00 <col:11> 'const char *' <NullToPointer>
    |   |     `-IntegerLiteral 0x122028dd8 <col:11> 'int' 0
    |   |-IfStmt 0x122029be8 <line:37:3, line:38:11>
    |   | |-RecoveryExpr 0x122029b80 <line:37:8, col:69> '_Bool' contains-errors
    |   | `-ReturnStmt 0x122029bd8 <line:38:4, col:11>
    |   |   `-ImplicitCastExpr 0x122029bc0 <col:11> 'const char *' <NullToPointer>
    |   |     `-IntegerLiteral 0x122029ba0 <col:11> 'int' 0
    |   |-IfStmt 0x122029d60 <line:41:3, line:45:3>
    |   | |-BinaryOperator 0x122029cc0 <line:41:8, col:18> 'int' '!='
    |   | | |-ImplicitCastExpr 0x122029ca8 <col:8, col:9> 'int' <IntegralCast>
    |   | | | `-ImplicitCastExpr 0x122029c90 <col:8, col:9> 'char' <LValueToRValue>
    |   | | |   `-UnaryOperator 0x122029c60 <col:8, col:9> 'const char' lvalue prefix '*' cannot overflow
    |   | | |     `-ImplicitCastExpr 0x122029c48 <col:9> 'const char *' <LValueToRValue>
    |   | | |       `-DeclRefExpr 0x122029c28 <col:9> 'const char *' lvalue ParmVar 0x12200dda8 'value' 'const char *'
    |   | | `-CharacterLiteral 0x122029c78 <col:18> 'int' 58
    |   | `-CompoundStmt 0x122029d48 <col:24, line:45:3>
    |   |   `-ReturnStmt 0x122029d38 <line:44:4, col:11>
    |   |     `-ImplicitCastExpr 0x122029d20 <col:11> 'const char *' <NullToPointer>
    |   |       `-IntegerLiteral 0x122029d00 <col:11> 'int' 0
    |   `-IfStmt 0x122029f20 <line:46:3, line:47:11>
    |     |-RecoveryExpr 0x122029eb8 <line:46:8, col:68> '_Bool' contains-errors
    |     `-ReturnStmt 0x122029f10 <line:47:4, col:11>
    |       `-ImplicitCastExpr 0x122029ef8 <col:11> 'const char *' <NullToPointer>
    |         `-IntegerLiteral 0x122029ed8 <col:11> 'int' 0
    |-IfStmt 0x12202a0d0 <line:50:2, line:51:18>
    | |-BinaryOperator 0x12202a028 <line:50:7, col:17> 'int' '=='
    | | |-ImplicitCastExpr 0x12202a010 <col:7, col:8> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x122029ff8 <col:7, col:8> 'char' <LValueToRValue>
    | | |   `-UnaryOperator 0x122029fc8 <col:7, col:8> 'const char' lvalue prefix '*' cannot overflow
    | | |     `-ImplicitCastExpr 0x122029fb0 <col:8> 'const char *' <LValueToRValue>
    | | |       `-DeclRefExpr 0x122029f90 <col:8> 'const char *' lvalue ParmVar 0x12200dda8 'value' 'const char *'
    | | `-CharacterLiteral 0x122029fe0 <col:17> 'int' 125
    | `-ReturnStmt 0x12202a0c0 <line:51:3, col:18>
    |   `-BinaryOperator 0x12202a0a0 <col:10, col:18> 'const char *' '+'
    |     |-ImplicitCastExpr 0x12202a088 <col:10> 'const char *' <LValueToRValue>
    |     | `-DeclRefExpr 0x12202a048 <col:10> 'const char *' lvalue ParmVar 0x12200dda8 'value' 'const char *'
    |     `-IntegerLiteral 0x12202a068 <col:18> 'int' 1
    `-ReturnStmt 0x12202a148 <line:54:2, col:9>
      `-ImplicitCastExpr 0x12202a130 <col:9> 'const char *' <NullToPointer>
        `-IntegerLiteral 0x12202a110 <col:9> 'int' 0
