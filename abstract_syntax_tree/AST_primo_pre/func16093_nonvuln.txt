`-FunctionDecl 0x12c928238  line:1:1 TEST 'int (int, int)'
  |-ParmVarDecl 0x12c928158 <col:6> col:6 ParseExpression 'int'
  |-ParmVarDecl 0x12c9280d8 <col:23> col:23 ShouldAcceptArgumentWithoutArrayAsSingleArgument 'int'
  `-CompoundStmt 0x12c941380 <col:73, line:7:1>
    |-DeclStmt 0x12c940d50 <line:2:5, col:62>
    | `-VarDecl 0x12c928350 <col:5, col:61> col:10 used resultExpression 'int' auto cinit
    |   `-CallExpr 0x12c940d28 <col:29, col:61> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x12c9284e0 <col:29> 'int ()' Function 0x12c928428 'parseExpression' 'int ()'
    |     `-CallExpr 0x12c940d00 <col:45, col:60> '<dependent type>' contains-errors
    |       |-DeclRefExpr 0x12c9285e0 <col:45> 'int ()' Function 0x12c928528 'BSON' 'int ()'
    |       `-RecoveryExpr 0x12c940cd0 <col:50, col:59> '<dependent type>' contains-errors lvalue
    |         |-StringLiteral 0x12c928640 <col:50> 'char[4]' lvalue "STR"
    |         `-IntegerLiteral 0x12c928660 <col:59> 'int' 1
    |-DeclStmt 0x12c940ea0 <line:3:5, col:78>
    | `-VarDecl 0x12c940d80 <col:5, col:10> col:10 used notExpression 'int' auto
    `-CallExpr 0x12c941028 <line:4:5, col:30> 'int'
      |-ImplicitCastExpr 0x12c941010 <col:5> 'int (*)()' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x12c940f98 <col:5> 'int ()' Function 0x12c940ee0 'ASSERT_TRUE' 'int ()'
      `-ImplicitCastExpr 0x12c941050 <col:17> 'int' <LValueToRValue>
        `-DeclRefExpr 0x12c940fb8 <col:17> 'int' lvalue Var 0x12c940d80 'notExpression' 'int'
