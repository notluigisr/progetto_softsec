`-FunctionDecl 0x13f80e038  line:1:5 invalid ASN1_item_verify 'int (const int *, int *, int *, void *, int *)'
  |-ParmVarDecl 0x13f80dcf0 <col:22, col:39> col:39 invalid it 'const int *'
  |-ParmVarDecl 0x13f80dda8 <col:43, col:55> col:55 invalid a 'int *'
  |-ParmVarDecl 0x13f80de28 <col:58, col:75> col:75 invalid signature 'int *'
  |-ParmVarDecl 0x13f80dea8 <line:2:7, col:13> col:13 used asn 'void *'
  |-ParmVarDecl 0x13f80df28 <col:18, col:28> col:28 invalid pkey 'int *'
  `-CompoundStmt 0x13f82a450 <line:3:2, line:57:2>
    |-DeclStmt 0x13f80e188 <line:5:2, col:20>
    | `-VarDecl 0x13f80e120 <col:2, col:16> col:16 referenced invalid type 'const int *'
    |-DeclStmt 0x13f80e288 <line:6:2, col:28>
    | `-VarDecl 0x13f80e1e8 <col:2, col:24> col:17 used buf_in 'unsigned char *' cinit
    |   `-RecoveryExpr 0x13f80e268 <col:24> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x13f827488 <line:7:2, col:19>
    | |-VarDecl 0x13f80e2b8 <col:2, col:12> col:6 used ret 'int' cinit
    | | `-UnaryOperator 0x13f80e340 <col:11, col:12> 'int' prefix '-'
    | |   `-IntegerLiteral 0x13f80e320 <col:12> 'int' 1
    | |-VarDecl 0x13f80e370 <col:2, col:14> col:14 used i 'int'
    | `-VarDecl 0x13f827400 <col:2, col:16> col:16 used inl 'int'
    |-IfStmt 0x13f8277a8 <line:9:2, line:13:3>
    | |-UnaryOperator 0x13f8274d8 <line:9:6, col:7> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x13f8274c0 <col:7> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x13f8274a0 <col:7> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x13f827788 <line:10:3, line:13:3>
    |   |-CallExpr 0x13f827710 <line:11:3, col:63> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x13f827650 <col:3> 'int ()' Function 0x13f827598 'ASN1err' 'int ()'
    |   | |-RecoveryExpr 0x13f8276d0 <col:11> '<dependent type>' contains-errors lvalue
    |   | `-RecoveryExpr 0x13f8276f0 <col:36> '<dependent type>' contains-errors lvalue
    |   `-ReturnStmt 0x13f827778 <line:12:3, col:11>
    |     `-UnaryOperator 0x13f827760 <col:10, col:11> 'int' prefix '-'
    |       `-IntegerLiteral 0x13f827740 <col:11> 'int' 1
    |-CallExpr 0x13f827958 <line:15:2, col:22> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x13f8278a8 <col:2> 'int ()' Function 0x13f8277f0 'EVP_MD_CTX_init' 'int ()'
    | `-UnaryOperator 0x13f827940 <col:18, col:19> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   `-RecoveryExpr 0x13f827920 <col:19> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x13f827b30 <line:16:2, col:28> 'int' contains-errors '='
    | |-DeclRefExpr 0x13f827980 <col:2> 'int' lvalue Var 0x13f80e370 'i' 'int'
    | `-CallExpr 0x13f827b08 <col:4, col:28> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x13f827a80 <col:4> 'int ()' Function 0x13f8279c8 'OBJ_obj2nid' 'int ()'
    |   `-CXXDependentScopeMemberExpr 0x13f827ac0 <col:16, col:19> '<dependent type>' contains-errors lvalue ->algorithm
    |     `-RecoveryExpr 0x13f827aa0 <col:16> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x13f827e88 <line:17:2, col:41> '<dependent type>' contains-errors '='
    | |-RecoveryExpr 0x13f827b70 <col:2> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x13f827b50 <col:2> 'const int *' lvalue Var 0x13f80e120 'type' 'const int *'
    | `-CallExpr 0x13f827e60 <col:7, col:41> 'int'
    |   |-ImplicitCastExpr 0x13f827e48 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x13f827c78 <col:7> 'int ()' Function 0x13f827bc0 'EVP_get_digestbyname' 'int ()'
    |   `-CallExpr 0x13f827e08 <col:28, col:40> 'int'
    |     |-ImplicitCastExpr 0x13f827df0 <col:28> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x13f827d78 <col:28> 'int ()' Function 0x13f827cc0 'OBJ_nid2sn' 'int ()'
    |     `-ImplicitCastExpr 0x13f827e30 <col:39> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x13f827d98 <col:39> 'int' lvalue Var 0x13f80e370 'i' 'int'
    |-IfStmt 0x13f8280b8 <line:18:2, line:22:3>
    | |-BinaryOperator 0x13f827f20 <line:18:6, col:14> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x13f827ea8 <col:6> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x13f827f00 <col:14> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x13f828098 <line:19:3, line:22:3>
    |   |-CallExpr 0x13f828000 <line:20:3, col:74> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x13f827f40 <col:3> 'int ()' Function 0x13f827598 'ASN1err' 'int ()'
    |   | |-RecoveryExpr 0x13f827fc0 <col:11> '<dependent type>' contains-errors lvalue
    |   | `-RecoveryExpr 0x13f827fe0 <col:35> '<dependent type>' contains-errors lvalue
    |   `-GotoStmt 0x13f828080 <line:21:3, col:8> 'err' 0x13f828030
    |-IfStmt 0x13f8282d0 <line:24:2, line:29:3>
    | |-RecoveryExpr 0x13f8281f8 <line:24:6, col:40> '_Bool' contains-errors
    | `-CompoundStmt 0x13f8282b0 <line:25:3, line:29:3>
    |   |-BinaryOperator 0x13f828278 <line:27:3, col:7> 'int' '='
    |   | |-DeclRefExpr 0x13f828238 <col:3> 'int' lvalue Var 0x13f80e2b8 'ret' 'int'
    |   | `-IntegerLiteral 0x13f828258 <col:7> 'int' 0
    |   `-GotoStmt 0x13f828298 <line:28:3, col:8> 'err' 0x13f828030
    |-BinaryOperator 0x13f829900 <line:31:2, col:38> 'int' contains-errors '='
    | |-DeclRefExpr 0x13f8282f0 <col:2> 'int' lvalue Var 0x13f827400 'inl' 'int'
    | `-CallExpr 0x13f8298c8 <col:8, col:38> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x13f829800 <col:8> 'int ()' Function 0x13f828338 'ASN1_item_i2d' 'int ()'
    |   |-DeclRefExpr 0x13f829820 <col:22> 'void *' lvalue ParmVar 0x13f80dea8 'asn' 'void *'
    |   |-UnaryOperator 0x13f829890 <col:27, col:28> 'unsigned char **' contains-errors prefix '&' cannot overflow
    |   | `-DeclRefExpr 0x13f829840 <col:28> 'unsigned char *' contains-errors lvalue Var 0x13f80e1e8 'buf_in' 'unsigned char *'
    |   `-RecoveryExpr 0x13f8298a8 <col:36> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x13f8299b0 <line:33:2, line:37:3>
    | |-RecoveryExpr 0x13f829940 <line:33:6, col:16> '_Bool' contains-errors
    | `-CompoundStmt 0x13f829998 <line:34:3, line:37:3>
    |   `-GotoStmt 0x13f829980 <line:36:3, col:8> 'err' 0x13f828030
    |-CallExpr 0x13f829d18 <line:41:2, col:42> 'int' contains-errors
    | |-ImplicitCastExpr 0x13f829d00 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x13f829c48 <col:2> 'int ()' Function 0x13f829b90 'OPENSSL_cleanse' 'int ()'
    | |-ImplicitCastExpr 0x13f829d48 <col:18> 'unsigned char *' contains-errors <LValueToRValue>
    | | `-DeclRefExpr 0x13f829c68 <col:18> 'unsigned char *' contains-errors lvalue Var 0x13f80e1e8 'buf_in' 'unsigned char *'
    | `-CStyleCastExpr 0x13f829cd8 <col:25, col:39> 'unsigned int' <IntegralCast>
    |   `-ImplicitCastExpr 0x13f829cc0 <col:39> 'int' <LValueToRValue> part_of_explicit_cast
    |     `-DeclRefExpr 0x13f829c88 <col:39> 'int' lvalue Var 0x13f827400 'inl' 'int'
    |-CallExpr 0x13f829e98 <line:42:2, col:21> 'int' contains-errors
    | |-ImplicitCastExpr 0x13f829e80 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x13f829e40 <col:2> 'int ()' Function 0x13f829d88 'OPENSSL_free' 'int ()'
    | `-ImplicitCastExpr 0x13f829ec0 <col:15> 'unsigned char *' contains-errors <LValueToRValue>
    |   `-DeclRefExpr 0x13f829e60 <col:15> 'unsigned char *' contains-errors lvalue Var 0x13f80e1e8 'buf_in' 'unsigned char *'
    |-IfStmt 0x13f82a240 <line:44:2, line:50:3>
    | |-RecoveryExpr 0x13f82a168 <line:44:6, line:45:45> '_Bool' contains-errors
    | `-CompoundStmt 0x13f82a220 <line:46:3, line:50:3>
    |   |-BinaryOperator 0x13f82a1e8 <line:48:3, col:7> 'int' '='
    |   | |-DeclRefExpr 0x13f82a1a8 <col:3> 'int' lvalue Var 0x13f80e2b8 'ret' 'int'
    |   | `-IntegerLiteral 0x13f82a1c8 <col:7> 'int' 0
    |   `-GotoStmt 0x13f82a208 <line:49:3, col:8> 'err' 0x13f828030
    |-BinaryOperator 0x13f82a2a0 <line:53:2, col:6> 'int' '='
    | |-DeclRefExpr 0x13f82a260 <col:2> 'int' lvalue Var 0x13f80e2b8 'ret' 'int'
    | `-IntegerLiteral 0x13f82a280 <col:6> 'int' 1
    |-LabelStmt 0x13f82a3c8 <line:54:1, col:4> 'err'
    | `-NullStmt 0x13f82a3c0 <col:4>
    `-ReturnStmt 0x13f82a440 <line:56:2, col:12>
      `-ImplicitCastExpr 0x13f82a428 <col:8, col:12> 'int' <LValueToRValue>
        `-ParenExpr 0x13f82a408 <col:8, col:12> 'int' lvalue
          `-DeclRefExpr 0x13f82a3e8 <col:9> 'int' lvalue Var 0x13f80e2b8 'ret' 'int'
