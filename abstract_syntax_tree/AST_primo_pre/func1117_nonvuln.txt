`-FunctionDecl 0x14e928500  line:1:20 ConvertDisplayP3ToXYZ 'void (const double, const double, const double, double *, double *, double *)' static inline
  |-ParmVarDecl 0x14e9280d8 <col:42, col:55> col:55 used red 'const double'
  |-ParmVarDecl 0x14e928158 <col:59, col:72> col:72 used green 'const double'
  |-ParmVarDecl 0x14e9281d8 <line:2:3, col:16> col:16 used blue 'const double'
  |-ParmVarDecl 0x14e928288 <col:21, col:29> col:29 used X 'double *'
  |-ParmVarDecl 0x14e928308 <col:31, col:39> col:39 used Y 'double *'
  |-ParmVarDecl 0x14e928388 <col:41, col:49> col:49 used Z 'double *'
  `-CompoundStmt 0x14e942718 <line:3:1, line:19:1>
    |-DeclStmt 0x14e9287c0 <line:4:3, line:7:6>
    | |-VarDecl 0x14e928638 <line:4:3, line:5:5> col:5 used b 'double'
    | |-VarDecl 0x14e9286b8 <line:4:3, line:6:5> col:5 used g 'double'
    | `-VarDecl 0x14e928738 <line:4:3, line:7:5> col:5 used r 'double'
    |-BinaryOperator 0x14e941d20 <line:13:3, col:38> 'double' contains-errors '='
    | |-DeclRefExpr 0x14e941a60 <col:3> 'double' lvalue Var 0x14e928738 'r' 'double'
    | `-BinaryOperator 0x14e941d00 <col:5, col:38> '<dependent type>' contains-errors '*'
    |   |-RecoveryExpr 0x14e941c88 <col:5> '<dependent type>' contains-errors lvalue
    |   `-CallExpr 0x14e941cc0 <col:18, col:38> 'int'
    |     |-ImplicitCastExpr 0x14e941ca8 <col:18> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x14e941b78 <col:18> 'int ()' Function 0x14e941ac0 'DecodePixelGamma' 'int ()'
    |     `-ImplicitCastExpr 0x14e941ce8 <col:35> 'double' <LValueToRValue>
    |       `-DeclRefExpr 0x14e941b98 <col:35> 'const double' lvalue ParmVar 0x14e9280d8 'red' 'const double'
    |-BinaryOperator 0x14e941ee8 <line:14:3, col:40> 'double' contains-errors '='
    | |-DeclRefExpr 0x14e941d40 <col:3> 'double' lvalue Var 0x14e9286b8 'g' 'double'
    | `-BinaryOperator 0x14e941ec8 <col:5, col:40> '<dependent type>' contains-errors '*'
    |   |-RecoveryExpr 0x14e941e50 <col:5> '<dependent type>' contains-errors lvalue
    |   `-CallExpr 0x14e941e88 <col:18, col:40> 'int'
    |     |-ImplicitCastExpr 0x14e941e70 <col:18> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x14e941d78 <col:18> 'int ()' Function 0x14e941ac0 'DecodePixelGamma' 'int ()'
    |     `-ImplicitCastExpr 0x14e941eb0 <col:35> 'double' <LValueToRValue>
    |       `-DeclRefExpr 0x14e941d98 <col:35> 'const double' lvalue ParmVar 0x14e928158 'green' 'const double'
    |-BinaryOperator 0x14e9420b0 <line:15:3, col:39> 'double' contains-errors '='
    | |-DeclRefExpr 0x14e941f08 <col:3> 'double' lvalue Var 0x14e928638 'b' 'double'
    | `-BinaryOperator 0x14e942090 <col:5, col:39> '<dependent type>' contains-errors '*'
    |   |-RecoveryExpr 0x14e942018 <col:5> '<dependent type>' contains-errors lvalue
    |   `-CallExpr 0x14e942050 <col:18, col:39> 'int'
    |     |-ImplicitCastExpr 0x14e942038 <col:18> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x14e941f40 <col:18> 'int ()' Function 0x14e941ac0 'DecodePixelGamma' 'int ()'
    |     `-ImplicitCastExpr 0x14e942078 <col:35> 'double' <LValueToRValue>
    |       `-DeclRefExpr 0x14e941f60 <col:35> 'const double' lvalue ParmVar 0x14e9281d8 'blue' 'const double'
    |-BinaryOperator 0x14e9422c8 <line:16:3, col:68> 'double' '='
    | |-UnaryOperator 0x14e942108 <col:3, col:4> 'double' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x14e9420f0 <col:4> 'double *' <LValueToRValue>
    | |   `-DeclRefExpr 0x14e9420d0 <col:4> 'double *' lvalue ParmVar 0x14e928288 'X' 'double *'
    | `-BinaryOperator 0x14e9422a8 <col:6, col:68> 'double' '+'
    |   |-BinaryOperator 0x14e942210 <col:6, col:47> 'double' '+'
    |   | |-BinaryOperator 0x14e942178 <col:6, col:25> 'double' '*'
    |   | | |-FloatingLiteral 0x14e942120 <col:6> 'double' 4.865709e-01
    |   | | `-ImplicitCastExpr 0x14e942160 <col:25> 'double' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x14e942140 <col:25> 'double' lvalue Var 0x14e928738 'r' 'double'
    |   | `-BinaryOperator 0x14e9421f0 <col:27, col:47> 'double' '*'
    |   |   |-FloatingLiteral 0x14e942198 <col:27> 'double' 2.656677e-01
    |   |   `-ImplicitCastExpr 0x14e9421d8 <col:47> 'double' <LValueToRValue>
    |   |     `-DeclRefExpr 0x14e9421b8 <col:47> 'double' lvalue Var 0x14e9286b8 'g' 'double'
    |   `-BinaryOperator 0x14e942288 <col:49, col:68> 'double' '*'
    |     |-FloatingLiteral 0x14e942230 <col:49> 'double' 1.982173e-01
    |     `-ImplicitCastExpr 0x14e942270 <col:68> 'double' <LValueToRValue>
    |       `-DeclRefExpr 0x14e942250 <col:68> 'double' lvalue Var 0x14e928638 'b' 'double'
    |-BinaryOperator 0x14e9424e0 <line:17:3, col:68> 'double' '='
    | |-UnaryOperator 0x14e942320 <col:3, col:4> 'double' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x14e942308 <col:4> 'double *' <LValueToRValue>
    | |   `-DeclRefExpr 0x14e9422e8 <col:4> 'double *' lvalue ParmVar 0x14e928308 'Y' 'double *'
    | `-BinaryOperator 0x14e9424c0 <col:6, col:68> 'double' '+'
    |   |-BinaryOperator 0x14e942428 <col:6, col:47> 'double' '+'
    |   | |-BinaryOperator 0x14e942390 <col:6, col:25> 'double' '*'
    |   | | |-FloatingLiteral 0x14e942338 <col:6> 'double' 2.289746e-01
    |   | | `-ImplicitCastExpr 0x14e942378 <col:25> 'double' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x14e942358 <col:25> 'double' lvalue Var 0x14e928738 'r' 'double'
    |   | `-BinaryOperator 0x14e942408 <col:27, col:47> 'double' '*'
    |   |   |-FloatingLiteral 0x14e9423b0 <col:27> 'double' 6.917385e-01
    |   |   `-ImplicitCastExpr 0x14e9423f0 <col:47> 'double' <LValueToRValue>
    |   |     `-DeclRefExpr 0x14e9423d0 <col:47> 'double' lvalue Var 0x14e9286b8 'g' 'double'
    |   `-BinaryOperator 0x14e9424a0 <col:49, col:68> 'double' '*'
    |     |-FloatingLiteral 0x14e942448 <col:49> 'double' 7.928691e-02
    |     `-ImplicitCastExpr 0x14e942488 <col:68> 'double' <LValueToRValue>
    |       `-DeclRefExpr 0x14e942468 <col:68> 'double' lvalue Var 0x14e928638 'b' 'double'
    `-BinaryOperator 0x14e9426f8 <line:18:3, col:68> 'double' '='
      |-UnaryOperator 0x14e942538 <col:3, col:4> 'double' lvalue prefix '*' cannot overflow
      | `-ImplicitCastExpr 0x14e942520 <col:4> 'double *' <LValueToRValue>
      |   `-DeclRefExpr 0x14e942500 <col:4> 'double *' lvalue ParmVar 0x14e928388 'Z' 'double *'
      `-BinaryOperator 0x14e9426d8 <col:6, col:68> 'double' '+'
        |-BinaryOperator 0x14e942640 <col:6, col:47> 'double' '+'
        | |-BinaryOperator 0x14e9425a8 <col:6, col:25> 'double' '*'
        | | |-FloatingLiteral 0x14e942550 <col:6> 'double' 0.000000e+00
        | | `-ImplicitCastExpr 0x14e942590 <col:25> 'double' <LValueToRValue>
        | |   `-DeclRefExpr 0x14e942570 <col:25> 'double' lvalue Var 0x14e928738 'r' 'double'
        | `-BinaryOperator 0x14e942620 <col:27, col:47> 'double' '*'
        |   |-FloatingLiteral 0x14e9425c8 <col:27> 'double' 4.511338e-02
        |   `-ImplicitCastExpr 0x14e942608 <col:47> 'double' <LValueToRValue>
        |     `-DeclRefExpr 0x14e9425e8 <col:47> 'double' lvalue Var 0x14e9286b8 'g' 'double'
        `-BinaryOperator 0x14e9426b8 <col:49, col:68> 'double' '*'
          |-FloatingLiteral 0x14e942660 <col:49> 'double' 1.043944e+00
          `-ImplicitCastExpr 0x14e9426a0 <col:68> 'double' <LValueToRValue>
            `-DeclRefExpr 0x14e942680 <col:68> 'double' lvalue Var 0x14e928638 'b' 'double'
