`-FunctionDecl 0x11f928238  line:1:1 PHP_METHOD 'int (int, int)'
  |-ParmVarDecl 0x11f928158 <col:12> col:12 Phar 'int'
  |-ParmVarDecl 0x11f9280d8 <col:18> col:18 isValidPharFilename 'int'
  `-CompoundStmt 0x128009260 <line:2:1, line:15:1>
    |-DeclStmt 0x11f9283b8 <line:3:2, col:13>
    | `-VarDecl 0x11f928350 <col:2, col:8> col:8 used fname 'char *'
    |-DeclStmt 0x11f928450 <line:4:2, col:21>
    | `-VarDecl 0x11f9283e8 <col:2, col:14> col:14 used ext_str 'const char *'
    |-UnaryExprOrTypeTraitExpr 0x11f9284d8 <line:5:2, col:9> 'unsigned long' contains-errors sizeof
    | `-RecoveryExpr 0x11f9284b8 <col:9> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x11f928610 <line:6:2, col:28>
    | |-VarDecl 0x11f928510 <col:2, col:6> col:6 used ext_len 'int'
    | `-VarDecl 0x11f928590 <col:2, col:15> col:15 used is_executable 'int'
    |-IfStmt 0x128008c88 <line:9:2, line:11:2>
    | |-BinaryOperator 0x128008c40 <line:9:6, col:88> 'int' contains-errors '=='
    | | |-CallExpr 0x128008bd8 <col:6, col:83> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x11f928740 <col:6> 'int ()' Function 0x11f928688 'zend_parse_parameters' 'int ()'
    | | | |-CallExpr 0x128008b48 <col:28, col:42> 'int'
    | | | | `-ImplicitCastExpr 0x128008b30 <col:28> 'int (*)()' <FunctionToPointerDecay>
    | | | |   `-DeclRefExpr 0x1280088b8 <col:28> 'int ()' Function 0x128008800 'ZEND_NUM_ARGS' 'int ()'
    | | | |-StringLiteral 0x128008990 <col:45> 'char[4]' lvalue "STR"
    | | | |-UnaryOperator 0x128008a00 <col:52, col:53> 'char **' prefix '&' cannot overflow
    | | | | `-DeclRefExpr 0x1280089b0 <col:53> 'char *' lvalue Var 0x11f928350 'fname' 'char *'
    | | | |-UnaryOperator 0x128008b88 <col:60, col:61> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | | | `-RecoveryExpr 0x128008b68 <col:61> '<dependent type>' contains-errors lvalue
    | | | `-UnaryOperator 0x128008bc0 <col:72, col:73> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | |   `-RecoveryExpr 0x128008ba0 <col:73> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x128008c20 <col:88> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x128008c70 <col:97, line:11:2>
    |   `-ReturnStmt 0x128008c60 <line:10:3>
    |-BinaryOperator 0x128008d38 <line:13:2, col:18> 'int' '='
    | |-DeclRefExpr 0x128008ca8 <col:2> 'int' lvalue Var 0x11f928590 'is_executable' 'int'
    | `-ImplicitCastExpr 0x128008d20 <col:18> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x128008d00 <col:18> 'int' lvalue Var 0x11f928590 'is_executable' 'int'
    `-CallExpr 0x128009238 <line:14:2, col:110> '<dependent type>' contains-errors
      |-DeclRefExpr 0x128008e38 <col:2> 'int ()' Function 0x128008d80 'RETVAL_BOOL' 'int ()'
      `-BinaryOperator 0x128009218 <col:14, col:103> 'int' contains-errors '=='
        |-CallExpr 0x1280091a0 <col:14, col:98> '<dependent type>' contains-errors
        | |-DeclRefExpr 0x128008f38 <col:14> 'int ()' Function 0x128008e80 'phar_detect_phar_fname_ext' 'int ()'
        | |-DeclRefExpr 0x128008f58 <col:41> 'char *' lvalue Var 0x11f928350 'fname' 'char *'
        | |-RecoveryExpr 0x128009180 <col:48> '<dependent type>' contains-errors lvalue
        | |-UnaryOperator 0x128008fe0 <col:59, col:60> 'const char **' prefix '&' cannot overflow
        | | `-DeclRefExpr 0x128008f90 <col:60> 'const char *' lvalue Var 0x11f9283e8 'ext_str' 'const char *'
        | |-UnaryOperator 0x128009050 <col:69, col:70> 'int *' prefix '&' cannot overflow
        | | `-DeclRefExpr 0x128008ff8 <col:70> 'int' lvalue Var 0x11f928510 'ext_len' 'int'
        | |-DeclRefExpr 0x128009068 <col:79> 'int' lvalue Var 0x11f928590 'is_executable' 'int'
        | |-IntegerLiteral 0x128009088 <col:94> 'int' 2
        | `-IntegerLiteral 0x1280090a8 <col:97> 'int' 1
        `-RecoveryExpr 0x1280091f8 <col:103> '<dependent type>' contains-errors lvalue
