`-FunctionDecl 0x12c128198  line:1:1 SRC_DumpSources 'int (void)'
  `-CompoundStmt 0x12c140c50 <line:2:1, line:13:1>
    |-DeclStmt 0x12c128338 <line:4:3, col:8>
    | `-VarDecl 0x12c1282d0 <col:3, col:7> col:7 used i 'int'
    `-ForStmt 0x12c140c18 <line:6:3, line:12:3>
      |-BinaryOperator 0x12c128390 <line:6:8, col:12> 'int' '='
      | |-DeclRefExpr 0x12c128350 <col:8> 'int' lvalue Var 0x12c1282d0 'i' 'int'
      | `-IntegerLiteral 0x12c128370 <col:12> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x12c128428 <col:15, col:19> 'int' contains-errors '<'
      | |-DeclRefExpr 0x12c1283b0 <col:15> 'int' lvalue Var 0x12c1282d0 'i' 'int'
      | `-RecoveryExpr 0x12c128408 <col:19> '<dependent type>' contains-errors lvalue
      |-UnaryOperator 0x12c128468 <col:30, col:31> 'int' postfix '++'
      | `-DeclRefExpr 0x12c128448 <col:30> 'int' lvalue Var 0x12c1282d0 'i' 'int'
      `-CompoundStmt 0x12c140bf8 <col:35, line:12:3>
        |-IfStmt 0x12c1286f0 <line:8:5, line:9:7>
        | |-UnaryOperator 0x12c1286d0 <line:8:9, col:10> '<dependent type>' contains-errors prefix '!' cannot overflow
        | | `-ImplicitCastExpr 0x12c1286b8 <col:10> '<dependent type>' contains-errors <LValueToRValue>
        | |   `-RecoveryExpr 0x12c128698 <col:10> '<dependent type>' contains-errors lvalue
        | `-ContinueStmt 0x12c1286e8 <line:9:7>
        `-CallExpr 0x12c140bd0 <line:11:5, col:15> '<dependent type>' contains-errors
          |-DeclRefExpr 0x12c140b50 <col:5> 'int ()' Function 0x12c140a98 'fclose' 'int ()'
          `-RecoveryExpr 0x12c140bb0 <col:12> '<dependent type>' contains-errors lvalue
