`-FunctionDecl 0x13000dfa8  line:1:1 invalid _symlink_is_external_to_destination 'int (int *, const char *, int *, int *)'
  |-ParmVarDecl 0x13000dd28 <col:38, col:50> col:50 invalid file 'int *'
  |-ParmVarDecl 0x13000dda8 <line:2:10, col:22> col:22 used symlink 'const char *'
  |-ParmVarDecl 0x13000de28 <line:3:10, col:22> col:22 invalid destination 'int *'
  |-ParmVarDecl 0x13000dea8 <line:4:10, col:22> col:22 invalid external_links 'int *'
  `-CompoundStmt 0x1279260b0 <line:5:1, line:53:1>
    |-DeclStmt 0x13000e140 <line:8:2, col:22>
    | `-VarDecl 0x13000e0d8 <col:2, col:12> col:12 used components 'char **'
    |-DeclStmt 0x13000e1d8 <line:9:2, col:13>
    | `-VarDecl 0x13000e170 <col:2, col:12> col:12 used i 'int'
    |-IfStmt 0x13000e308 <line:11:2, line:12:10>
    | |-RecoveryExpr 0x13000e2a0 <line:11:6, col:40> '_Bool' contains-errors
    | `-ReturnStmt 0x13000e2f8 <line:12:3, col:10>
    |   `-RecoveryExpr 0x13000e2d8 <col:10> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x127923668 <line:14:2, line:15:10>
    | |-BinaryOperator 0x127923600 <line:14:6, col:20> 'int' '=='
    | | |-ImplicitCastExpr 0x13000e3d0 <col:6, col:15> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x13000e3b8 <col:6, col:15> 'char' <LValueToRValue>
    | | |   `-ArraySubscriptExpr 0x13000e380 <col:6, col:15> 'const char' lvalue
    | | |     |-ImplicitCastExpr 0x13000e368 <col:6> 'const char *' <LValueToRValue>
    | | |     | `-DeclRefExpr 0x13000e328 <col:6> 'const char *' lvalue ParmVar 0x13000dda8 'symlink' 'const char *'
    | | |     `-IntegerLiteral 0x13000e348 <col:14> 'int' 0
    | | `-CharacterLiteral 0x13000e3a0 <col:20> 'int' 47
    | `-ReturnStmt 0x127923658 <line:15:3, col:10>
    |   `-RecoveryExpr 0x127923638 <col:10> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x127923f20 <line:18:2, col:45> 'char **' '='
    | |-DeclRefExpr 0x127923848 <col:2> 'char **' lvalue Var 0x13000e0d8 'components' 'char **'
    | `-ImplicitCastExpr 0x127923ae0 <col:15, col:45> 'char **' <IntegralToPointer>
    |   `-CallExpr 0x127923a78 <col:15, col:45> 'int'
    |     |-ImplicitCastExpr 0x127923a60 <col:15> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x127923948 <col:15> 'int ()' Function 0x127923890 'g_strsplit' 'int ()'
    |     |-ImplicitCastExpr 0x127923ab0 <col:27> 'const char *' <LValueToRValue>
    |     | `-DeclRefExpr 0x127923968 <col:27> 'const char *' lvalue ParmVar 0x13000dda8 'symlink' 'const char *'
    |     |-ImplicitCastExpr 0x127923ac8 <col:36> 'char *' <ArrayToPointerDecay>
    |     | `-StringLiteral 0x1279239d0 <col:36> 'char[4]' lvalue "STR"
    |     `-UnaryOperator 0x127923a10 <col:43, col:44> 'int' prefix '-'
    |       `-IntegerLiteral 0x1279239f0 <col:44> 'int' 1
    |-ForStmt 0x127925ee0 <line:19:2, line:47:2>
    | |-BinaryOperator 0x127923f80 <line:19:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x127923f40 <col:7> 'int' lvalue Var 0x13000e170 'i' 'int'
    | | `-IntegerLiteral 0x127923f60 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x127924128 <col:14, col:31> 'int' contains-errors '!='
    | | |-ArraySubscriptExpr 0x1279240e8 <col:14, col:26> 'char *' lvalue
    | | | |-ImplicitCastExpr 0x1279240b8 <col:14> 'char **' <LValueToRValue>
    | | | | `-DeclRefExpr 0x127923fa0 <col:14> 'char **' lvalue Var 0x13000e0d8 'components' 'char **'
    | | | `-ImplicitCastExpr 0x1279240d0 <col:25> 'int' <LValueToRValue>
    | | |   `-DeclRefExpr 0x127923fc0 <col:25> 'int' lvalue Var 0x13000e170 'i' 'int'
    | | `-RecoveryExpr 0x127924108 <col:31> '<dependent type>' contains-errors lvalue
    | |-UnaryOperator 0x127924168 <col:37, col:38> 'int' postfix '++'
    | | `-DeclRefExpr 0x127924148 <col:37> 'int' lvalue Var 0x13000e170 'i' 'int'
    | `-CompoundStmt 0x127925eb0 <col:42, line:47:2>
    |   |-DeclStmt 0x1279242a8 <line:20:3, col:30>
    |   | `-VarDecl 0x127924198 <col:3, col:29> col:10 used name 'char *' cinit
    |   |   `-ImplicitCastExpr 0x127924290 <col:17, col:29> 'char *' <LValueToRValue>
    |   |     `-ArraySubscriptExpr 0x127924270 <col:17, col:29> 'char *' lvalue
    |   |       |-ImplicitCastExpr 0x127924240 <col:17> 'char **' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x127924200 <col:17> 'char **' lvalue Var 0x13000e0d8 'components' 'char **'
    |   |       `-ImplicitCastExpr 0x127924258 <col:28> 'int' <LValueToRValue>
    |   |         `-DeclRefExpr 0x127924220 <col:28> 'int' lvalue Var 0x13000e170 'i' 'int'
    |   |-IfStmt 0x127925468 <line:23:3, line:24:4>
    |   | |-BinaryOperator 0x127925440 <line:23:7, col:60> 'int' '||'
    |   | | |-ParenExpr 0x1279243c0 <col:7, col:20> 'int'
    |   | | | `-BinaryOperator 0x1279243a0 <col:8, col:19> 'int' '=='
    |   | | |   |-ImplicitCastExpr 0x127924388 <col:8, col:14> 'int' <IntegralCast>
    |   | | |   | `-ImplicitCastExpr 0x127924370 <col:8, col:14> 'char' <LValueToRValue>
    |   | | |   |   `-ArraySubscriptExpr 0x127924330 <col:8, col:14> 'char' lvalue
    |   | | |   |     |-ImplicitCastExpr 0x127924318 <col:8> 'char *' <LValueToRValue>
    |   | | |   |     | `-DeclRefExpr 0x1279242d8 <col:8> 'char *' lvalue Var 0x127924198 'name' 'char *'
    |   | | |   |     `-IntegerLiteral 0x1279242f8 <col:13> 'int' 0
    |   | | |   `-IntegerLiteral 0x127924350 <col:19> 'int' 0
    |   | | `-ParenExpr 0x127925420 <col:25, col:60> 'int'
    |   | |   `-BinaryOperator 0x127925400 <col:26, col:59> 'int' '&&'
    |   | |     |-ParenExpr 0x1279244c0 <col:26, col:41> 'int'
    |   | |     | `-BinaryOperator 0x1279244a0 <col:27, col:38> 'int' '=='
    |   | |     |   |-ImplicitCastExpr 0x127924488 <col:27, col:33> 'int' <IntegralCast>
    |   | |     |   | `-ImplicitCastExpr 0x127924470 <col:27, col:33> 'char' <LValueToRValue>
    |   | |     |   |   `-ArraySubscriptExpr 0x127924438 <col:27, col:33> 'char' lvalue
    |   | |     |   |     |-ImplicitCastExpr 0x127924420 <col:27> 'char *' <LValueToRValue>
    |   | |     |   |     | `-DeclRefExpr 0x1279243e0 <col:27> 'char *' lvalue Var 0x127924198 'name' 'char *'
    |   | |     |   |     `-IntegerLiteral 0x127924400 <col:32> 'int' 0
    |   | |     |   `-CharacterLiteral 0x127924458 <col:38> 'int' 46
    |   | |     `-ParenExpr 0x1279245c8 <col:46, col:59> 'int'
    |   | |       `-BinaryOperator 0x1279245a8 <col:47, col:58> 'int' '=='
    |   | |         |-ImplicitCastExpr 0x127924590 <col:47, col:53> 'int' <IntegralCast>
    |   | |         | `-ImplicitCastExpr 0x127924578 <col:47, col:53> 'char' <LValueToRValue>
    |   | |         |   `-ArraySubscriptExpr 0x127924538 <col:47, col:53> 'char' lvalue
    |   | |         |     |-ImplicitCastExpr 0x127924520 <col:47> 'char *' <LValueToRValue>
    |   | |         |     | `-DeclRefExpr 0x1279244e0 <col:47> 'char *' lvalue Var 0x127924198 'name' 'char *'
    |   | |         |     `-IntegerLiteral 0x127924500 <col:52> 'int' 1
    |   | |         `-IntegerLiteral 0x127924558 <col:58> 'int' 0
    |   | `-ContinueStmt 0x127925460 <line:24:4>
    |   |-IfStmt 0x127925ce0 <line:26:3, line:41:3> has_else
    |   | |-BinaryOperator 0x1279257b0 <line:26:7, col:60> 'int' '&&'
    |   | | |-BinaryOperator 0x127925688 <col:7, col:42> 'int' '&&'
    |   | | | |-ParenExpr 0x127925568 <col:7, col:22> 'int'
    |   | | | | `-BinaryOperator 0x127925548 <col:8, col:19> 'int' '=='
    |   | | | |   |-ImplicitCastExpr 0x127925530 <col:8, col:14> 'int' <IntegralCast>
    |   | | | |   | `-ImplicitCastExpr 0x127925518 <col:8, col:14> 'char' <LValueToRValue>
    |   | | | |   |   `-ArraySubscriptExpr 0x1279254e0 <col:8, col:14> 'char' lvalue
    |   | | | |   |     |-ImplicitCastExpr 0x1279254c8 <col:8> 'char *' <LValueToRValue>
    |   | | | |   |     | `-DeclRefExpr 0x127925488 <col:8> 'char *' lvalue Var 0x127924198 'name' 'char *'
    |   | | | |   |     `-IntegerLiteral 0x1279254a8 <col:13> 'int' 0
    |   | | | |   `-CharacterLiteral 0x127925500 <col:19> 'int' 46
    |   | | | `-ParenExpr 0x127925668 <col:27, col:42> 'int'
    |   | | |   `-BinaryOperator 0x127925648 <col:28, col:39> 'int' '=='
    |   | | |     |-ImplicitCastExpr 0x127925630 <col:28, col:34> 'int' <IntegralCast>
    |   | | |     | `-ImplicitCastExpr 0x127925618 <col:28, col:34> 'char' <LValueToRValue>
    |   | | |     |   `-ArraySubscriptExpr 0x1279255e0 <col:28, col:34> 'char' lvalue
    |   | | |     |     |-ImplicitCastExpr 0x1279255c8 <col:28> 'char *' <LValueToRValue>
    |   | | |     |     | `-DeclRefExpr 0x127925588 <col:28> 'char *' lvalue Var 0x127924198 'name' 'char *'
    |   | | |     |     `-IntegerLiteral 0x1279255a8 <col:33> 'int' 1
    |   | | |     `-CharacterLiteral 0x127925600 <col:39> 'int' 46
    |   | | `-ParenExpr 0x127925790 <col:47, col:60> 'int'
    |   | |   `-BinaryOperator 0x127925770 <col:48, col:59> 'int' '=='
    |   | |     |-ImplicitCastExpr 0x127925758 <col:48, col:54> 'int' <IntegralCast>
    |   | |     | `-ImplicitCastExpr 0x127925740 <col:48, col:54> 'char' <LValueToRValue>
    |   | |     |   `-ArraySubscriptExpr 0x127925700 <col:48, col:54> 'char' lvalue
    |   | |     |     |-ImplicitCastExpr 0x1279256e8 <col:48> 'char *' <LValueToRValue>
    |   | |     |     | `-DeclRefExpr 0x1279256a8 <col:48> 'char *' lvalue Var 0x127924198 'name' 'char *'
    |   | |     |     `-IntegerLiteral 0x1279256c8 <col:53> 'int' 2
    |   | |     `-IntegerLiteral 0x127925720 <col:59> 'int' 0
    |   | |-CompoundStmt 0x127925b08 <col:63, line:36:3>
    |   | | `-IfStmt 0x127925ad8 <line:27:4, line:35:4> has_else
    |   | |   |-CallExpr 0x127925958 <line:27:8, col:41> '<dependent type>' contains-errors
    |   | |   | |-DeclRefExpr 0x1279258b0 <col:8> 'int ()' Function 0x1279257f8 'g_file_equal' 'int ()'
    |   | |   | |-RecoveryExpr 0x127925938 <col:22> '<dependent type>' contains-errors lvalue
    |   | |   | `-RecoveryExpr 0x1279258e8 <col:30> '<dependent type>' contains-errors lvalue
    |   | |   |-CompoundStmt 0x127925990 <col:44, line:30:4>
    |   | |   | `-BreakStmt 0x127925988 <line:29:5>
    |   | |   `-CompoundStmt 0x127925ac8 <line:31:9, line:35:4>
    |   | `-CompoundStmt 0x127925cd0 <line:37:8, line:41:3>
    |   `-IfStmt 0x127925e90 <line:43:3, line:46:3>
    |     |-RecoveryExpr 0x127925e50 <line:43:7, col:68> '_Bool' contains-errors
    |     `-CompoundStmt 0x127925e78 <col:71, line:46:3>
    |       `-BreakStmt 0x127925e70 <line:45:4>
    `-CallExpr 0x127926050 <line:49:2, col:24> 'int'
      |-ImplicitCastExpr 0x127926038 <col:2> 'int (*)()' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x127925ff8 <col:2> 'int ()' Function 0x127925f40 'g_strfreev' 'int ()'
      `-ImplicitCastExpr 0x127926078 <col:14> 'char **' <LValueToRValue>
        `-DeclRefExpr 0x127926018 <col:14> 'char **' lvalue Var 0x13000e0d8 'components' 'char **'
