`-FunctionDecl 0x137128758  line:1:1 cleanup 'int (struct query *)'
  |-ParmVarDecl 0x137128648 <col:10, col:24> col:24 used z 'struct query *'
  `-CompoundStmt 0x1371416e8 <line:2:1, line:15:1>
    |-DeclStmt 0x137140ba8 <line:3:5, col:21>
    | |-VarDecl 0x137140a68 <col:5, col:13> col:9 used j 'int' cinit
    | | `-IntegerLiteral 0x137140ad0 <col:13> 'int' 0
    | `-VarDecl 0x137140b08 <col:5, col:20> col:16 used k 'int' cinit
    |   `-IntegerLiteral 0x137140b70 <col:20> 'int' 0
    |-CallExpr 0x137140d88 <line:5:5, col:30> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x137140cf0 <col:5> 'int ()' Function 0x137140c38 'dns_transmit_free' 'int ()'
    | `-UnaryOperator 0x137140d70 <col:24, col:28> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   `-RecoveryExpr 0x137140d48 <col:25, col:28> '<dependent type>' contains-errors lvalue
    |     `-DeclRefExpr 0x137140d10 <col:25> 'struct query *' lvalue ParmVar 0x137128648 'z' 'struct query *'
    |-ForStmt 0x1371410f0 <line:6:5, line:7:38>
    | |-BinaryOperator 0x137140df0 <line:6:10, col:14> 'int' '='
    | | |-DeclRefExpr 0x137140db0 <col:10> 'int' lvalue Var 0x137140a68 'j' 'int'
    | | `-IntegerLiteral 0x137140dd0 <col:14> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x137140e88 <col:17, col:21> 'int' contains-errors '<'
    | | |-DeclRefExpr 0x137140e10 <col:17> 'int' lvalue Var 0x137140a68 'j' 'int'
    | | `-RecoveryExpr 0x137140e68 <col:21> '<dependent type>' contains-errors lvalue
    | |-UnaryOperator 0x137140ec8 <col:37, col:39> 'int' prefix '++'
    | | `-DeclRefExpr 0x137140ea8 <col:39> 'int' lvalue Var 0x137140a68 'j' 'int'
    | `-CallExpr 0x1371410c8 <line:7:9, col:38> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x137140fc0 <col:9> 'int ()' Function 0x137140f08 'dns_domain_free' 'int ()'
    |   `-UnaryOperator 0x1371410b0 <col:26, col:37> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-ArraySubscriptExpr 0x137141090 <col:27, col:37> '<dependent type>' contains-errors lvalue
    |       |-ImplicitCastExpr 0x137141060 <col:27, col:30> '<dependent type>' contains-errors <LValueToRValue>
    |       | `-RecoveryExpr 0x137141018 <col:27, col:30> '<dependent type>' contains-errors lvalue
    |       |   `-DeclRefExpr 0x137140fe0 <col:27> 'struct query *' lvalue ParmVar 0x137128648 'z' 'struct query *'
    |       `-ImplicitCastExpr 0x137141078 <col:36> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x137141040 <col:36> 'int' lvalue Var 0x137140a68 'j' 'int'
    `-ForStmt 0x1371416b0 <line:9:5, line:14:5>
      |-BinaryOperator 0x137141168 <line:9:10, col:14> 'int' '='
      | |-DeclRefExpr 0x137141128 <col:10> 'int' lvalue Var 0x137140a68 'j' 'int'
      | `-IntegerLiteral 0x137141148 <col:14> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x137141200 <col:17, col:21> 'int' contains-errors '<'
      | |-DeclRefExpr 0x137141188 <col:17> 'int' lvalue Var 0x137140a68 'j' 'int'
      | `-RecoveryExpr 0x1371411e0 <col:21> '<dependent type>' contains-errors lvalue
      |-UnaryOperator 0x137141240 <col:37, col:39> 'int' prefix '++'
      | `-DeclRefExpr 0x137141220 <col:39> 'int' lvalue Var 0x137140a68 'j' 'int'
      `-CompoundStmt 0x137141690 <line:10:5, line:14:5>
        |-CallExpr 0x137141360 <line:11:9, col:37> '<dependent type>' contains-errors
        | |-DeclRefExpr 0x137141258 <col:9> 'int ()' Function 0x137140f08 'dns_domain_free' 'int ()'
        | `-UnaryOperator 0x137141348 <col:26, col:36> '<dependent type>' contains-errors prefix '&' cannot overflow
        |   `-ArraySubscriptExpr 0x137141328 <col:27, col:36> '<dependent type>' contains-errors lvalue
        |     |-ImplicitCastExpr 0x1371412f8 <col:27, col:30> '<dependent type>' contains-errors <LValueToRValue>
        |     | `-RecoveryExpr 0x1371412b0 <col:27, col:30> '<dependent type>' contains-errors lvalue
        |     |   `-DeclRefExpr 0x137141278 <col:27> 'struct query *' lvalue ParmVar 0x137128648 'z' 'struct query *'
        |     `-ImplicitCastExpr 0x137141310 <col:35> 'int' <LValueToRValue>
        |       `-DeclRefExpr 0x1371412d8 <col:35> 'int' lvalue Var 0x137140a68 'j' 'int'
        `-ForStmt 0x137141658 <line:12:9, line:13:42>
          |-BinaryOperator 0x1371413c8 <line:12:14, col:18> 'int' '='
          | |-DeclRefExpr 0x137141388 <col:14> 'int' lvalue Var 0x137140b08 'k' 'int'
          | `-IntegerLiteral 0x1371413a8 <col:18> 'int' 0
          |-<<<NULL>>>
          |-BinaryOperator 0x137141460 <col:21, col:25> 'int' contains-errors '<'
          | |-DeclRefExpr 0x1371413e8 <col:21> 'int' lvalue Var 0x137140b08 'k' 'int'
          | `-RecoveryExpr 0x137141440 <col:25> '<dependent type>' contains-errors lvalue
          |-UnaryOperator 0x1371414a0 <col:38, col:40> 'int' prefix '++'
          | `-DeclRefExpr 0x137141480 <col:40> 'int' lvalue Var 0x137140b08 'k' 'int'
          `-CallExpr 0x137141630 <line:13:13, col:42> '<dependent type>' contains-errors
            |-DeclRefExpr 0x1371414b8 <col:13> 'int ()' Function 0x137140f08 'dns_domain_free' 'int ()'
            `-UnaryOperator 0x137141618 <col:30, col:41> '<dependent type>' contains-errors prefix '&' cannot overflow
              `-ArraySubscriptExpr 0x1371415f8 <col:31, col:41> '<dependent type>' contains-errors lvalue
                |-ImplicitCastExpr 0x1371415c8 <col:31, col:38> '<dependent type>' contains-errors <LValueToRValue>
                | `-ArraySubscriptExpr 0x137141588 <col:31, col:38> '<dependent type>' contains-errors lvalue
                |   |-ImplicitCastExpr 0x137141558 <col:31, col:34> '<dependent type>' contains-errors <LValueToRValue>
                |   | `-RecoveryExpr 0x137141510 <col:31, col:34> '<dependent type>' contains-errors lvalue
                |   |   `-DeclRefExpr 0x1371414d8 <col:31> 'struct query *' lvalue ParmVar 0x137128648 'z' 'struct query *'
                |   `-ImplicitCastExpr 0x137141570 <col:37> 'int' <LValueToRValue>
                |     `-DeclRefExpr 0x137141538 <col:37> 'int' lvalue Var 0x137140a68 'j' 'int'
                `-ImplicitCastExpr 0x1371415e0 <col:40> 'int' <LValueToRValue>
                  `-DeclRefExpr 0x1371415a8 <col:40> 'int' lvalue Var 0x137140b08 'k' 'int'
