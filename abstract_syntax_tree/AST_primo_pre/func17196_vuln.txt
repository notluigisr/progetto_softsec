`-FunctionDecl 0x12800df18  line:1:5 invalid mongo_env_read_socket 'int (int *, void *, int)'
  |-ParmVarDecl 0x12800dd28 <col:28, col:35> col:35 referenced invalid conn 'int *'
  |-ParmVarDecl 0x12800dda8 <col:41, col:47> col:47 used buf 'void *'
  |-ParmVarDecl 0x12800de28 <col:52, col:56> col:56 used len 'int'
  `-CompoundStmt 0x11f923078 <col:62, line:14:1>
    |-DeclStmt 0x12800e0a8 <line:2:5, col:21>
    | `-VarDecl 0x12800dff0 <col:5, col:18> col:11 used cbuf 'char *' cinit
    |   `-ImplicitCastExpr 0x12800e090 <col:18> 'char *' <BitCast>
    |     `-ImplicitCastExpr 0x12800e078 <col:18> 'void *' <LValueToRValue>
    |       `-DeclRefExpr 0x12800e058 <col:18> 'void *' lvalue ParmVar 0x12800dda8 'buf' 'void *'
    |-WhileStmt 0x11f923010 <line:3:5, line:11:5>
    | |-ImplicitCastExpr 0x12800e0e0 <line:3:13> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x12800e0c0 <col:13> 'int' lvalue ParmVar 0x12800de28 'len' 'int'
    | `-CompoundStmt 0x11f922fe0 <col:19, line:11:5>
    |   |-DeclStmt 0x11f922c00 <line:4:9, col:52>
    |   | `-VarDecl 0x12800e110 <col:9, col:51> col:13 used sent 'int' cinit
    |   |   `-CallExpr 0x12800e3b8 <col:20, col:51> '<dependent type>' contains-errors
    |   |     |-DeclRefExpr 0x12800e2d0 <col:20> 'int ()' Function 0x12800e218 'recv' 'int ()'
    |   |     |-CXXDependentScopeMemberExpr 0x12800e310 <col:26, col:32> '<dependent type>' contains-errors lvalue ->sock
    |   |     | `-RecoveryExpr 0x12800e2f0 <col:26> '<dependent type>' contains-errors lvalue
    |   |     |-DeclRefExpr 0x12800e358 <col:38> 'char *' lvalue Var 0x12800dff0 'cbuf' 'char *'
    |   |     |-DeclRefExpr 0x12800e378 <col:44> 'int' lvalue ParmVar 0x12800de28 'len' 'int'
    |   |     `-IntegerLiteral 0x12800e398 <col:49> 'int' 0
    |   |-IfStmt 0x11f922eb0 <line:5:9, line:8:9>
    |   | |-BinaryOperator 0x11f922d20 <line:5:14, col:36> 'int' contains-errors '||'
    |   | | |-BinaryOperator 0x11f922c70 <col:14, col:22> 'int' contains-errors '=='
    |   | | | |-ImplicitCastExpr 0x11f922c58 <col:14> 'int' contains-errors <LValueToRValue>
    |   | | | | `-DeclRefExpr 0x11f922c18 <col:14> 'int' contains-errors lvalue Var 0x12800e110 'sent' 'int'
    |   | | | `-IntegerLiteral 0x11f922c38 <col:22> 'int' 0
    |   | | `-BinaryOperator 0x11f922d00 <col:27, col:36> 'int' contains-errors '=='
    |   | |   |-ImplicitCastExpr 0x11f922ce8 <col:27> 'int' contains-errors <LValueToRValue>
    |   | |   | `-DeclRefExpr 0x11f922c90 <col:27> 'int' contains-errors lvalue Var 0x12800e110 'sent' 'int'
    |   | |   `-UnaryOperator 0x11f922cd0 <col:35, col:36> 'int' prefix '-'
    |   | |     `-IntegerLiteral 0x11f922cb0 <col:36> 'int' 1
    |   | `-CompoundStmt 0x11f922e90 <col:40, line:8:9>
    |   |   |-BinaryOperator 0x11f922e28 <line:6:13, col:25> '<dependent type>' contains-errors '='
    |   |   | |-CXXDependentScopeMemberExpr 0x11f922d88 <col:13, col:19> '<dependent type>' contains-errors lvalue ->err
    |   |   | | `-RecoveryExpr 0x11f922d60 <col:13> '<dependent type>' contains-errors lvalue
    |   |   | |   `-DeclRefExpr 0x11f922d40 <col:13> 'int *' lvalue ParmVar 0x12800dd28 'conn' 'int *'
    |   |   | `-RecoveryExpr 0x11f922e08 <col:25> '<dependent type>' contains-errors lvalue
    |   |   `-ReturnStmt 0x11f922e80 <line:7:13, col:20>
    |   |     `-RecoveryExpr 0x11f922e60 <col:20> '<dependent type>' contains-errors lvalue
    |   |-CompoundAssignOperator 0x11f922f28 <line:9:9, col:17> 'char *' contains-errors '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
    |   | |-DeclRefExpr 0x11f922ed0 <col:9> 'char *' lvalue Var 0x12800dff0 'cbuf' 'char *'
    |   | `-ImplicitCastExpr 0x11f922f10 <col:17> 'int' contains-errors <LValueToRValue>
    |   |   `-DeclRefExpr 0x11f922ef0 <col:17> 'int' contains-errors lvalue Var 0x12800e110 'sent' 'int'
    |   `-CompoundAssignOperator 0x11f922fb0 <line:10:9, col:16> 'int' contains-errors '-=' ComputeLHSTy='int' ComputeResultTy='int'
    |     |-DeclRefExpr 0x11f922f58 <col:9> 'int' lvalue ParmVar 0x12800de28 'len' 'int'
    |     `-ImplicitCastExpr 0x11f922f98 <col:16> 'int' contains-errors <LValueToRValue>
    |       `-DeclRefExpr 0x11f922f78 <col:16> 'int' contains-errors lvalue Var 0x12800e110 'sent' 'int'
    `-ReturnStmt 0x11f923068 <line:13:5, col:12>
      `-RecoveryExpr 0x11f923048 <col:12> '<dependent type>' contains-errors lvalue
