`-FunctionDecl 0x157928318  line:1:16 invalid o2nm_cluster_attr_write 'int (const char *, int, unsigned int *)' static
  |-ParmVarDecl 0x1579280f0 <col:40, col:52> col:52 used page 'const char *'
  |-ParmVarDecl 0x157928170 <col:58, col:66> col:66 invalid count 'int'
  |-ParmVarDecl 0x157928228 <line:2:40, col:54> col:54 used val 'unsigned int *'
  `-CompoundStmt 0x157942ef8 <line:3:1, line:19:1>
    |-DeclStmt 0x157928458 <line:4:2, col:19>
    | `-VarDecl 0x1579283f0 <col:2, col:16> col:16 used tmp 'unsigned long'
    |-DeclStmt 0x157928568 <line:5:2, col:24>
    | `-VarDecl 0x157928488 <col:2, col:20> col:8 used p 'char *' cinit
    |   `-CStyleCastExpr 0x157928540 <col:12, col:20> 'char *' <NoOp>
    |     `-ImplicitCastExpr 0x157928528 <col:20> 'const char *' <LValueToRValue> part_of_explicit_cast
    |       `-DeclRefExpr 0x1579284f0 <col:20> 'const char *' lvalue ParmVar 0x1579280f0 'page' 'const char *'
    |-BinaryOperator 0x157942880 <line:7:2, col:31> 'unsigned long' '='
    | |-DeclRefExpr 0x157928580 <col:2> 'unsigned long' lvalue Var 0x1579283f0 'tmp' 'unsigned long'
    | `-ImplicitCastExpr 0x157942868 <col:8, col:31> 'unsigned long' <IntegralCast>
    |   `-CallExpr 0x157942818 <col:8, col:31> 'int'
    |     |-ImplicitCastExpr 0x157942800 <col:8> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x157928700 <col:8> 'int ()' Function 0x157928648 'simple_strtoul' 'int ()'
    |     |-ImplicitCastExpr 0x157942850 <col:23> 'char *' <LValueToRValue>
    |     | `-DeclRefExpr 0x157928720 <col:23> 'char *' lvalue Var 0x157928488 'p' 'char *'
    |     |-UnaryOperator 0x157928790 <col:26, col:27> 'char **' prefix '&' cannot overflow
    |     | `-DeclRefExpr 0x157928740 <col:27> 'char *' lvalue Var 0x157928488 'p' 'char *'
    |     `-IntegerLiteral 0x1579287a8 <col:30> 'int' 0
    |-IfStmt 0x157942b50 <line:8:2, line:9:11>
    | |-BinaryOperator 0x157942a88 <line:8:6, col:31> 'int' '||'
    | | |-UnaryOperator 0x1579428d8 <col:6, col:7> 'int' prefix '!' cannot overflow
    | | | `-ImplicitCastExpr 0x1579428c0 <col:7> 'char *' <LValueToRValue>
    | | |   `-DeclRefExpr 0x1579428a0 <col:7> 'char *' lvalue Var 0x157928488 'p' 'char *'
    | | `-ParenExpr 0x157942a68 <col:12, col:31> 'int'
    | |   `-BinaryOperator 0x157942a48 <col:13, col:30> 'int' '&&'
    | |     |-ImplicitCastExpr 0x157942a30 <col:13, col:14> 'int' <IntegralCast>
    | |     | `-ImplicitCastExpr 0x157942a18 <col:13, col:14> 'char' <LValueToRValue>
    | |     |   `-UnaryOperator 0x157942928 <col:13, col:14> 'char' lvalue prefix '*' cannot overflow
    | |     |     `-ImplicitCastExpr 0x157942910 <col:14> 'char *' <LValueToRValue>
    | |     |       `-DeclRefExpr 0x1579428f0 <col:14> 'char *' lvalue Var 0x157928488 'p' 'char *'
    | |     `-ParenExpr 0x1579429f8 <col:19, col:30> 'int'
    | |       `-BinaryOperator 0x1579429d8 <col:20, col:26> 'int' '!='
    | |         |-ImplicitCastExpr 0x1579429c0 <col:20, col:21> 'int' <IntegralCast>
    | |         | `-ImplicitCastExpr 0x1579429a8 <col:20, col:21> 'char' <LValueToRValue>
    | |         |   `-UnaryOperator 0x157942978 <col:20, col:21> 'char' lvalue prefix '*' cannot overflow
    | |         |     `-ImplicitCastExpr 0x157942960 <col:21> 'char *' <LValueToRValue>
    | |         |       `-DeclRefExpr 0x157942940 <col:21> 'char *' lvalue Var 0x157928488 'p' 'char *'
    | |         `-CharacterLiteral 0x157942990 <col:26> 'int' 10
    | `-ReturnStmt 0x157942b40 <line:9:3, col:11>
    |   `-UnaryOperator 0x157942b28 <col:10, col:11> '<dependent type>' contains-errors prefix '-' cannot overflow
    |     `-ImplicitCastExpr 0x157942b10 <col:11> '<dependent type>' contains-errors <LValueToRValue>
    |       `-RecoveryExpr 0x157942af0 <col:11> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x157942ca8 <line:11:2, line:12:11>
    | |-BinaryOperator 0x157942be0 <line:11:6, col:13> 'int' '=='
    | | |-ImplicitCastExpr 0x157942bb0 <col:6> 'unsigned long' <LValueToRValue>
    | | | `-DeclRefExpr 0x157942b70 <col:6> 'unsigned long' lvalue Var 0x1579283f0 'tmp' 'unsigned long'
    | | `-ImplicitCastExpr 0x157942bc8 <col:13> 'unsigned long' <IntegralCast>
    | |   `-IntegerLiteral 0x157942b90 <col:13> 'int' 0
    | `-ReturnStmt 0x157942c98 <line:12:3, col:11>
    |   `-UnaryOperator 0x157942c80 <col:10, col:11> '<dependent type>' contains-errors prefix '-' cannot overflow
    |     `-ImplicitCastExpr 0x157942c68 <col:11> '<dependent type>' contains-errors <LValueToRValue>
    |       `-RecoveryExpr 0x157942c48 <col:11> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x157942de8 <line:13:2, line:14:11>
    | |-RecoveryExpr 0x157942d20 <line:13:6, col:19> '_Bool' contains-errors
    | `-ReturnStmt 0x157942dd8 <line:14:3, col:11>
    |   `-UnaryOperator 0x157942dc0 <col:10, col:11> '<dependent type>' contains-errors prefix '-' cannot overflow
    |     `-ImplicitCastExpr 0x157942da8 <col:11> '<dependent type>' contains-errors <LValueToRValue>
    |       `-RecoveryExpr 0x157942d88 <col:11> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x157942ea8 <line:16:2, col:9> 'unsigned int' '='
    | |-UnaryOperator 0x157942e40 <col:2, col:3> 'unsigned int' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x157942e28 <col:3> 'unsigned int *' <LValueToRValue>
    | |   `-DeclRefExpr 0x157942e08 <col:3> 'unsigned int *' lvalue ParmVar 0x157928228 'val' 'unsigned int *'
    | `-ImplicitCastExpr 0x157942e90 <col:9> 'unsigned int' <IntegralCast>
    |   `-ImplicitCastExpr 0x157942e78 <col:9> 'unsigned long' <LValueToRValue>
    |     `-DeclRefExpr 0x157942e58 <col:9> 'unsigned long' lvalue Var 0x1579283f0 'tmp' 'unsigned long'
    `-ReturnStmt 0x157942ee8 <line:18:2, col:9>
      `-RecoveryExpr 0x157942ec8 <col:9> '<dependent type>' contains-errors lvalue
