`-FunctionDecl 0x14200dec8  line:1:13 invalid extractFileTo 'int (int *, const int)' static
  |-ParmVarDecl 0x14200dd28 <col:27, col:32> col:32 invalid zip 'int *'
  |-ParmVarDecl 0x14200dda8 <col:37, <invalid sloc>> col:46 invalid 'const int'
  `-CompoundStmt 0x14202ed80 <line:2:50, line:46:1>
    |-DeclStmt 0x14200e018 <line:3:3, col:29>
    | `-VarDecl 0x14200df98 <col:3, col:8> col:8 used sep 'int' auto
    |-IfStmt 0x142028148 <line:4:3, line:13:3>
    | |-BinaryOperator 0x14200e0a8 <line:4:7, col:14> 'int' contains-errors '!='
    | | |-DeclRefExpr 0x14200e030 <col:7> 'int' lvalue Var 0x14200df98 'sep' 'int'
    | | `-RecoveryExpr 0x14200e088 <col:14> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x142028120 <col:33, line:13:3>
    |   |-DeclStmt 0x14200e178 <line:5:5, col:41>
    |   | `-VarDecl 0x14200e0e0 <col:5, col:10> col:10 used path 'int' auto
    |   |-IfStmt 0x142028078 <line:6:5, line:8:5>
    |   | |-BinaryOperator 0x142028030 <line:6:9, col:67> 'int' contains-errors '&&'
    |   | | |-UnaryOperator 0x142027f60 <col:9, col:30> '<dependent type>' contains-errors prefix '!' cannot overflow
    |   | | | `-CallExpr 0x142027f38 <col:10, col:30> '<dependent type>' contains-errors
    |   | | |   |-CallExpr 0x142027f10 <col:10, col:24> '<dependent type>' contains-errors
    |   | | |   | |-DeclRefExpr 0x14200e2f0 <col:10> 'int ()' Function 0x14200e238 'HHVM_FN' 'int ()'
    |   | | |   | `-RecoveryExpr 0x142027ef0 <col:18> '<dependent type>' contains-errors lvalue
    |   | | |   `-DeclRefExpr 0x14200e350 <col:26> 'int' lvalue Var 0x14200e0e0 'path' 'int'
    |   | | `-UnaryOperator 0x142028018 <col:35, col:67> '<dependent type>' contains-errors prefix '!' cannot overflow
    |   | |   `-CallExpr 0x142027fe0 <col:36, col:67> '<dependent type>' contains-errors
    |   | |     |-CallExpr 0x142027f98 <col:36, col:49> '<dependent type>' contains-errors
    |   | |     | |-DeclRefExpr 0x14200e3b0 <col:36> 'int ()' Function 0x14200e238 'HHVM_FN' 'int ()'
    |   | |     | `-RecoveryExpr 0x142027f78 <col:44> '<dependent type>' contains-errors lvalue
    |   | |     |-DeclRefExpr 0x142027e28 <col:51> 'int' lvalue Var 0x14200e0e0 'path' 'int'
    |   | |     |-IntegerLiteral 0x142027e48 <col:57> 'int' 511
    |   | |     `-RecoveryExpr 0x142027fc0 <col:63> '<dependent type>' contains-errors lvalue
    |   | `-CompoundStmt 0x142028068 <col:70, line:8:5>
    |   `-IfStmt 0x142028100 <line:10:5, line:12:5>
    |     |-RecoveryExpr 0x1420280d0 <line:10:9, col:32> '_Bool' contains-errors
    |     `-CompoundStmt 0x1420280f0 <col:35, line:12:5>
    |-DeclStmt 0x1420282e8 <line:16:3, col:26>
    | |-RecordDecl 0x142028168 <col:3, col:10> col:10 struct zip_stat
    | `-VarDecl 0x142028268 <col:3, col:19> col:19 invalid zipStat 'struct zip_stat'
    |-IfStmt 0x1420284c8 <line:17:3, line:19:3>
    | |-RecoveryExpr 0x142028498 <line:17:7, col:51> '_Bool' contains-errors
    | `-CompoundStmt 0x1420284b8 <col:54, line:19:3>
    |-DeclStmt 0x142028748 <line:21:3, col:56>
    | `-VarDecl 0x142028500 <col:3, col:55> col:8 used zipFile 'int' auto cinit
    |   `-CallExpr 0x142028710 <col:18, col:55> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x142028648 <col:18> 'int ()' Function 0x142028590 'zip_fopen_index' 'int ()'
    |     |-RecoveryExpr 0x142028668 <col:34> '<dependent type>' contains-errors lvalue
    |     |-CXXDependentScopeMemberExpr 0x1420286a8 <col:39, col:47> '<dependent type>' contains-errors lvalue .index
    |     | `-RecoveryExpr 0x142028688 <col:39> '<dependent type>' contains-errors lvalue
    |     `-IntegerLiteral 0x1420286f0 <col:54> 'int' 0
    |-CallExpr 0x1420288c8 <line:22:3, col:30> 'int' contains-errors
    | |-ImplicitCastExpr 0x1420288b0 <col:3> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x142028840 <col:3> 'int ()' Function 0x142028788 'FAIL_IF_INVALID_PTR' 'int ()'
    | `-ImplicitCastExpr 0x1420288f0 <col:23> 'int' contains-errors <LValueToRValue>
    |   `-DeclRefExpr 0x142028860 <col:23> 'int' contains-errors lvalue Var 0x142028500 'zipFile' 'int'
    |-DeclStmt 0x142028af0 <line:24:3, col:42>
    | `-VarDecl 0x142028920 <col:3, col:8> col:8 used outFile 'int' auto
    |-IfStmt 0x142028cd8 <line:25:3, line:28:3>
    | |-RecoveryExpr 0x142028b28 <line:25:7, col:18> '_Bool' contains-errors
    | `-CompoundStmt 0x142028cc0 <col:27, line:28:3>
    |   `-CallExpr 0x142028c80 <line:26:5, col:23> 'int' contains-errors
    |     |-ImplicitCastExpr 0x142028c68 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x142028c28 <col:5> 'int ()' Function 0x142028b70 'zip_fclose' 'int ()'
    |     `-ImplicitCastExpr 0x142028ca8 <col:16> 'int' contains-errors <LValueToRValue>
    |       `-DeclRefExpr 0x142028c48 <col:16> 'int' contains-errors lvalue Var 0x142028500 'zipFile' 'int'
    |-ForStmt 0x14202eba8 <line:30:3, line:38:3>
    | |-DeclStmt 0x14202e4f8 <line:30:8, col:45>
    | | `-VarDecl 0x142028d10 <col:8, col:13> col:13 used n 'int' auto
    | |-<<<NULL>>>
    | |-BinaryOperator 0x14202e568 <col:47, col:52> 'int' '!='
    | | |-ImplicitCastExpr 0x14202e550 <col:47> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14202e510 <col:47> 'int' lvalue Var 0x142028d10 'n' 'int'
    | | `-IntegerLiteral 0x14202e530 <col:52> 'int' 0
    | |-<<<NULL>>>
    | `-CompoundStmt 0x14202eb90 <line:31:42, line:38:3>
    |   `-IfStmt 0x14202eb70 <line:32:5, line:37:5>
    |     |-RecoveryExpr 0x14202e820 <line:32:9, col:59> '_Bool' contains-errors
    |     `-CompoundStmt 0x14202eb50 <col:62, line:37:5>
    |       |-CallExpr 0x14202e898 <line:33:7, col:25> 'int' contains-errors
    |       | |-ImplicitCastExpr 0x14202e880 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |       | | `-DeclRefExpr 0x14202e840 <col:7> 'int ()' Function 0x142028b70 'zip_fclose' 'int ()'
    |       | `-ImplicitCastExpr 0x14202e8c0 <col:18> 'int' contains-errors <LValueToRValue>
    |       |   `-DeclRefExpr 0x14202e860 <col:18> 'int' contains-errors lvalue Var 0x142028500 'zipFile' 'int'
    |       `-CallExpr 0x14202ea10 <line:34:7, col:21> 'int'
    |         |-ImplicitCastExpr 0x14202e9f8 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |         | `-DeclRefExpr 0x14202e9b8 <col:7> 'int ()' Function 0x14202e900 'fclose' 'int ()'
    |         `-ImplicitCastExpr 0x14202ea38 <col:14> 'int' <LValueToRValue>
    |           `-DeclRefExpr 0x14202e9d8 <col:14> 'int' lvalue Var 0x142028920 'outFile' 'int'
    |-CallExpr 0x14202ec38 <line:40:3, col:21> 'int' contains-errors
    | |-ImplicitCastExpr 0x14202ec20 <col:3> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x14202ebe0 <col:3> 'int ()' Function 0x142028b70 'zip_fclose' 'int ()'
    | `-ImplicitCastExpr 0x14202ec60 <col:14> 'int' contains-errors <LValueToRValue>
    |   `-DeclRefExpr 0x14202ec00 <col:14> 'int' contains-errors lvalue Var 0x142028500 'zipFile' 'int'
    `-IfStmt 0x14202ed60 <line:41:3, line:43:3>
      |-BinaryOperator 0x14202ed30 <line:41:7, col:26> 'int' '!='
      | |-CallExpr 0x14202ecd0 <col:7, col:21> 'int'
      | | |-ImplicitCastExpr 0x14202ecb8 <col:7> 'int (*)()' <FunctionToPointerDecay>
      | | | `-DeclRefExpr 0x14202ec78 <col:7> 'int ()' Function 0x14202e900 'fclose' 'int ()'
      | | `-ImplicitCastExpr 0x14202ecf8 <col:14> 'int' <LValueToRValue>
      | |   `-DeclRefExpr 0x14202ec98 <col:14> 'int' lvalue Var 0x142028920 'outFile' 'int'
      | `-IntegerLiteral 0x14202ed10 <col:26> 'int' 0
      `-CompoundStmt 0x14202ed50 <col:29, line:43:3>
