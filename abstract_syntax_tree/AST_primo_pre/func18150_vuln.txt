`-FunctionDecl 0x13b9231e8  line:1:1 invalid next_state_class 'int (int *, int *, enum CCVALTYPE *, enum CCSTATE *, int *)'
  |-ParmVarDecl 0x13c00dd28 <col:18, col:30> col:30 invalid cc 'int *'
  |-ParmVarDecl 0x13c00dda8 <col:34, col:49> col:49 invalid vs 'int *'
  |-ParmVarDecl 0x13b922e00 <col:53, col:69> col:69 used type 'enum CCVALTYPE *'
  |-ParmVarDecl 0x13b922ff8 <line:2:4, col:18> col:18 used state 'enum CCSTATE *'
  |-ParmVarDecl 0x13b923078 <col:25, col:34> col:34 invalid env 'int *'
  `-CompoundStmt 0x13d009d60 <line:3:1, line:21:1>
    |-DeclStmt 0x13b923338 <line:4:3, col:8>
    | `-VarDecl 0x13b9232d0 <col:3, col:7> col:7 used r 'int'
    |-IfStmt 0x13b9234c0 <line:6:3, line:7:12>
    | |-BinaryOperator 0x13b923458 <line:6:7, col:17> 'int' contains-errors '=='
    | | |-UnaryOperator 0x13b923420 <col:7, col:8> 'enum CCSTATE' lvalue prefix '*' cannot overflow
    | | | `-ImplicitCastExpr 0x13b923408 <col:8> 'enum CCSTATE *' <LValueToRValue>
    | | |   `-DeclRefExpr 0x13b923350 <col:8> 'enum CCSTATE *' lvalue ParmVar 0x13b922ff8 'state' 'enum CCSTATE *'
    | | `-RecoveryExpr 0x13b923438 <col:17> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x13b9234b0 <line:7:5, col:12>
    |   `-RecoveryExpr 0x13b923490 <col:12> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x13d009ac0 <line:9:3, line:16:3>
    | |-BinaryOperator 0x13b923720 <line:9:7, col:39> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x13b923690 <col:7, col:17> 'int' contains-errors '=='
    | | | |-UnaryOperator 0x13b923658 <col:7, col:8> 'enum CCSTATE' lvalue prefix '*' cannot overflow
    | | | | `-ImplicitCastExpr 0x13b923640 <col:8> 'enum CCSTATE *' <LValueToRValue>
    | | | |   `-DeclRefExpr 0x13b9234e0 <col:8> 'enum CCSTATE *' lvalue ParmVar 0x13b922ff8 'state' 'enum CCSTATE *'
    | | | `-RecoveryExpr 0x13b923670 <col:17> '<dependent type>' contains-errors lvalue
    | | `-BinaryOperator 0x13b923700 <col:30, col:39> 'int' contains-errors '!='
    | |   |-UnaryOperator 0x13b9236c8 <col:30, col:31> 'enum CCVALTYPE' lvalue prefix '*' cannot overflow
    | |   | `-ImplicitCastExpr 0x13b9236b0 <col:31> 'enum CCVALTYPE *' <LValueToRValue>
    | |   |   `-DeclRefExpr 0x13b923568 <col:31> 'enum CCVALTYPE *' lvalue ParmVar 0x13b922e00 'type' 'enum CCVALTYPE *'
    | |   `-RecoveryExpr 0x13b9236e0 <col:39> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x13d009aa8 <col:50, line:16:3>
    |   `-IfStmt 0x13d009a78 <line:10:5, line:15:5> has_else
    |     |-BinaryOperator 0x13b923848 <line:10:9, col:18> 'int' contains-errors '=='
    |     | |-UnaryOperator 0x13b923810 <col:9, col:10> 'enum CCVALTYPE' lvalue prefix '*' cannot overflow
    |     | | `-ImplicitCastExpr 0x13b9237f8 <col:10> 'enum CCVALTYPE *' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x13b923740 <col:10> 'enum CCVALTYPE *' lvalue ParmVar 0x13b922e00 'type' 'enum CCVALTYPE *'
    |     | `-RecoveryExpr 0x13b923828 <col:18> '<dependent type>' contains-errors lvalue
    |     |-CallExpr 0x13b923b18 <line:11:7, col:41> '<dependent type>' contains-errors
    |     | |-DeclRefExpr 0x13b9239c0 <col:7> 'int ()' Function 0x13b923908 'BITSET_SET_BIT' 'int ()'
    |     | |-CXXDependentScopeMemberExpr 0x13b923a00 <col:22, col:26> '<dependent type>' contains-errors lvalue ->bs
    |     | | `-RecoveryExpr 0x13b9239e0 <col:22> '<dependent type>' contains-errors lvalue
    |     | `-CStyleCastExpr 0x13b923af0 <col:30, col:40> 'int' contains-errors <Dependent>
    |     |   `-ParenExpr 0x13b923ad0 <col:36, col:40> '<dependent type>' contains-errors
    |     |     `-UnaryOperator 0x13b923a80 <col:37, col:38> '<dependent type>' contains-errors prefix '*' cannot overflow
    |     |       `-ImplicitCastExpr 0x13b923a68 <col:38> '<dependent type>' contains-errors <LValueToRValue>
    |     |         `-RecoveryExpr 0x13b923a48 <col:38> '<dependent type>' contains-errors lvalue
    |     `-IfStmt 0x13d009a58 <line:12:10, line:15:5>
    |       |-BinaryOperator 0x13b923c50 <line:12:14, col:23> 'int' contains-errors '=='
    |       | |-UnaryOperator 0x13b923c18 <col:14, col:15> 'enum CCVALTYPE' lvalue prefix '*' cannot overflow
    |       | | `-ImplicitCastExpr 0x13b923c00 <col:15> 'enum CCVALTYPE *' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x13b923b48 <col:15> 'enum CCVALTYPE *' lvalue ParmVar 0x13b922e00 'type' 'enum CCVALTYPE *'
    |       | `-RecoveryExpr 0x13b923c30 <col:23> '<dependent type>' contains-errors lvalue
    |       `-CompoundStmt 0x13d009a38 <col:39, line:15:5>
    |         |-BinaryOperator 0x13d009938 <line:13:7, col:52> 'int' contains-errors '='
    |         | |-DeclRefExpr 0x13b923c70 <col:7> 'int' lvalue Var 0x13b9232d0 'r' 'int'
    |         | `-CallExpr 0x13d0098f8 <col:11, col:52> '<dependent type>' contains-errors
    |         |   |-DeclRefExpr 0x13b923d70 <col:11> 'int ()' Function 0x13b923cb8 'add_code_range' 'int ()'
    |         |   |-UnaryOperator 0x13d009820 <col:26, col:36> '<dependent type>' contains-errors prefix '&' cannot overflow
    |         |   | `-ParenExpr 0x13d009800 <col:27, col:36> '<dependent type>' contains-errors lvalue
    |         |   |   `-CXXDependentScopeMemberExpr 0x13b923db0 <col:28, col:32> '<dependent type>' contains-errors lvalue ->mbuf
    |         |   |     `-RecoveryExpr 0x13b923d90 <col:28> '<dependent type>' contains-errors lvalue
    |         |   |-RecoveryExpr 0x13d009838 <col:39> '<dependent type>' contains-errors lvalue
    |         |   |-UnaryOperator 0x13d009890 <col:44, col:45> '<dependent type>' contains-errors prefix '*' cannot overflow
    |         |   | `-ImplicitCastExpr 0x13d009878 <col:45> '<dependent type>' contains-errors <LValueToRValue>
    |         |   |   `-RecoveryExpr 0x13d009858 <col:45> '<dependent type>' contains-errors lvalue
    |         |   `-UnaryOperator 0x13d0098e0 <col:49, col:50> '<dependent type>' contains-errors prefix '*' cannot overflow
    |         |     `-ImplicitCastExpr 0x13d0098c8 <col:50> '<dependent type>' contains-errors <LValueToRValue>
    |         |       `-RecoveryExpr 0x13d0098a8 <col:50> '<dependent type>' contains-errors lvalue
    |         `-IfStmt 0x13d009a18 <line:14:7, col:25>
    |           |-BinaryOperator 0x13d0099b0 <col:11, col:15> 'int' '<'
    |           | |-ImplicitCastExpr 0x13d009998 <col:11> 'int' <LValueToRValue>
    |           | | `-DeclRefExpr 0x13d009958 <col:11> 'int' lvalue Var 0x13b9232d0 'r' 'int'
    |           | `-IntegerLiteral 0x13d009978 <col:15> 'int' 0
    |           `-ReturnStmt 0x13d009a08 <col:18, col:25>
    |             `-ImplicitCastExpr 0x13d0099f0 <col:25> 'int' <LValueToRValue>
    |               `-DeclRefExpr 0x13d0099d0 <col:25> 'int' lvalue Var 0x13b9232d0 'r' 'int'
    |-BinaryOperator 0x13d009be8 <line:18:3, col:12> 'enum CCSTATE' contains-errors '='
    | |-UnaryOperator 0x13d009bb0 <col:3, col:4> 'enum CCSTATE' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x13d009b98 <col:4> 'enum CCSTATE *' <LValueToRValue>
    | |   `-DeclRefExpr 0x13d009ae0 <col:4> 'enum CCSTATE *' lvalue ParmVar 0x13b922ff8 'state' 'enum CCSTATE *'
    | `-RecoveryExpr 0x13d009bc8 <col:12> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x13d009d10 <line:19:3, col:12> 'enum CCVALTYPE' contains-errors '='
    | |-UnaryOperator 0x13d009cd8 <col:3, col:4> 'enum CCVALTYPE' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x13d009cc0 <col:4> 'enum CCVALTYPE *' <LValueToRValue>
    | |   `-DeclRefExpr 0x13d009c08 <col:4> 'enum CCVALTYPE *' lvalue ParmVar 0x13b922e00 'type' 'enum CCVALTYPE *'
    | `-RecoveryExpr 0x13d009cf0 <col:12> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x13d009d50 <line:20:3, col:10>
      `-IntegerLiteral 0x13d009d30 <col:10> 'int' 0
