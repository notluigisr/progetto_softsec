`-FunctionDecl 0x13780df18  line:1:5 invalid sldns_str2wire_str_buf 'int (const char *, int *, int *)'
  |-ParmVarDecl 0x13780dcd8 <col:28, col:40> col:40 used str 'const char *'
  |-ParmVarDecl 0x13780dda8 <col:45, col:54> col:54 referenced invalid rd 'int *'
  |-ParmVarDecl 0x13780de28 <col:58, col:66> col:66 invalid len 'int *'
  `-CompoundStmt 0x137828400 <line:2:1, line:24:1>
    |-RecoveryExpr 0x13780e0b8 <line:4:2, col:14> '<dependent type>' contains-errors lvalue
    | |-UnaryExprOrTypeTraitExpr 0x13780e098 <col:2, col:9> 'unsigned long' contains-errors sizeof
    | | `-RecoveryExpr 0x13780e078 <col:9> '<dependent type>' contains-errors lvalue
    | `-IntegerLiteral 0x13780e010 <col:14> 'int' 0
    |-DeclStmt 0x13780e1a0 <line:5:2, col:21>
    | `-VarDecl 0x13780e100 <col:2, col:18> col:14 used s 'const char *' cinit
    |   `-ImplicitCastExpr 0x13780e188 <col:18> 'const char *' <LValueToRValue>
    |     `-DeclRefExpr 0x13780e168 <col:18> 'const char *' lvalue ParmVar 0x13780dcd8 'str' 'const char *'
    |-IfStmt 0x13780e290 <line:7:2, line:8:10>
    | |-BinaryOperator 0x13780e228 <line:7:5, col:12> 'int' contains-errors '<'
    | | |-UnaryOperator 0x13780e1f0 <col:5, col:6> '<dependent type>' contains-errors prefix '*' cannot overflow
    | | | `-ImplicitCastExpr 0x13780e1d8 <col:6> '<dependent type>' contains-errors <LValueToRValue>
    | | |   `-RecoveryExpr 0x13780e1b8 <col:6> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x13780e208 <col:12> 'int' 1
    | `-ReturnStmt 0x13780e280 <line:8:3, col:10>
    |   `-RecoveryExpr 0x13780e260 <col:10> '<dependent type>' contains-errors lvalue
    |-WhileStmt 0x1378280a0 <line:11:2, line:18:2>
    | |-CallExpr 0x137827930 <line:11:8, col:32> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x137827810 <col:8> 'int ()' Function 0x13780e358 'sldns_parse_char' 'int ()'
    | | |-UnaryOperator 0x137827918 <col:25, col:26> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | | `-RecoveryExpr 0x1378278f8 <col:26> '<dependent type>' contains-errors lvalue
    | | `-UnaryOperator 0x1378278b0 <col:30, col:31> 'const char **' prefix '&' cannot overflow
    | |   `-DeclRefExpr 0x137827860 <col:31> 'const char *' lvalue Var 0x13780e100 's' 'const char *'
    | `-CompoundStmt 0x137828080 <col:35, line:18:2>
    |   |-IfStmt 0x137827c80 <line:12:3, line:13:56>
    |   | |-BinaryOperator 0x1378279d8 <line:12:6, col:12> 'int' contains-errors '>='
    |   | | |-RecoveryExpr 0x1378279b8 <col:6> '<dependent type>' contains-errors lvalue
    |   | | `-IntegerLiteral 0x137827978 <col:12> 'int' 255
    |   | `-ReturnStmt 0x137827c70 <line:13:4, col:56>
    |   |   `-CallExpr 0x137827c40 <col:11, col:56> '<dependent type>' contains-errors
    |   |     |-DeclRefExpr 0x137827ad8 <col:11> 'int ()' Function 0x137827a20 'RET_ERR' 'int ()'
    |   |     |-RecoveryExpr 0x137827bd0 <col:19> '<dependent type>' contains-errors lvalue
    |   |     `-BinaryOperator 0x137827c20 <col:51, col:53> 'long' '-'
    |   |       |-ImplicitCastExpr 0x137827bf0 <col:51> 'const char *' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x137827b10 <col:51> 'const char *' lvalue Var 0x13780e100 's' 'const char *'
    |   |       `-ImplicitCastExpr 0x137827c08 <col:53> 'const char *' <LValueToRValue>
    |   |         `-DeclRefExpr 0x137827b30 <col:53> 'const char *' lvalue ParmVar 0x13780dcd8 'str' 'const char *'
    |   `-IfStmt 0x137827fd0 <line:14:3, line:16:10>
    |     |-BinaryOperator 0x137827e08 <line:14:6, col:16> 'int' contains-errors '<'
    |     | |-UnaryOperator 0x137827db0 <col:6, col:7> '<dependent type>' contains-errors prefix '*' cannot overflow
    |     | | `-ImplicitCastExpr 0x137827d98 <col:7> '<dependent type>' contains-errors <LValueToRValue>
    |     | |   `-RecoveryExpr 0x137827ca0 <col:7> '<dependent type>' contains-errors lvalue
    |     | `-BinaryOperator 0x137827de8 <col:13, col:16> '<dependent type>' contains-errors '+'
    |     |   |-RecoveryExpr 0x137827dc8 <col:13> '<dependent type>' contains-errors lvalue
    |     |   `-IntegerLiteral 0x137827d08 <col:16> 'int' 1
    |     `-ReturnStmt 0x137827fc0 <line:15:4, line:16:10>
    |       `-CallExpr 0x137827f90 <line:15:11, line:16:10> '<dependent type>' contains-errors
    |         |-DeclRefExpr 0x137827e28 <line:15:11> 'int ()' Function 0x137827a20 'RET_ERR' 'int ()'
    |         |-RecoveryExpr 0x137827f20 <col:19> '<dependent type>' contains-errors lvalue
    |         `-BinaryOperator 0x137827f70 <line:16:5, col:7> 'long' '-'
    |           |-ImplicitCastExpr 0x137827f40 <col:5> 'const char *' <LValueToRValue>
    |           | `-DeclRefExpr 0x137827e60 <col:5> 'const char *' lvalue Var 0x13780e100 's' 'const char *'
    |           `-ImplicitCastExpr 0x137827f58 <col:7> 'const char *' <LValueToRValue>
    |             `-DeclRefExpr 0x137827e80 <col:7> 'const char *' lvalue ParmVar 0x13780dcd8 'str' 'const char *'
    |-IfStmt 0x137828158 <line:19:2, line:20:10>
    | |-UnaryOperator 0x1378280f8 <line:19:5, col:6> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x1378280e0 <col:6> 'const char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x1378280c0 <col:6> 'const char *' lvalue Var 0x13780e100 's' 'const char *'
    | `-ReturnStmt 0x137828148 <line:20:3, col:10>
    |   `-RecoveryExpr 0x137828128 <col:10> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x137828398 <line:22:2, col:12> '<dependent type>' contains-errors '='
    | |-UnaryOperator 0x137828340 <col:2, col:3> '<dependent type>' contains-errors prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x137828328 <col:3> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x137828230 <col:3> '<dependent type>' contains-errors lvalue
    | `-BinaryOperator 0x137828378 <col:9, col:12> '<dependent type>' contains-errors '+'
    |   |-RecoveryExpr 0x137828358 <col:9> '<dependent type>' contains-errors lvalue
    |   `-IntegerLiteral 0x137828298 <col:12> 'int' 1
    `-ReturnStmt 0x1378283f0 <line:23:2, col:9>
      `-RecoveryExpr 0x1378283d0 <col:9> '<dependent type>' contains-errors lvalue
