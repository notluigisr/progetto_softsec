`-FunctionDecl 0x14800e038  line:1:12 invalid bson_append_string_base 'int (int *, const char *, const char *, int, int)' static
  |-ParmVarDecl 0x14800dd28 <col:37, col:43> col:43 invalid b 'int *'
  |-ParmVarDecl 0x14800dda8 <col:46, col:58> col:58 used name 'const char *'
  |-ParmVarDecl 0x14800de28 <line:2:37, col:49> col:49 used value 'const char *'
  |-ParmVarDecl 0x14800dea8 <col:56, col:60> col:60 used len 'int'
  |-ParmVarDecl 0x14800df28 <col:65, col:75> col:75 invalid type 'int'
  `-CompoundStmt 0x148029000 <col:82, line:14:1>
    |-DeclStmt 0x14800e200 <line:4:5, col:21>
    | `-VarDecl 0x14800e120 <col:5, col:20> col:9 used sl 'int' cinit
    |   `-BinaryOperator 0x14800e1e0 <col:14, col:20> 'int' '+'
    |     |-ImplicitCastExpr 0x14800e1c8 <col:14> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x14800e188 <col:14> 'int' lvalue ParmVar 0x14800dea8 'len' 'int'
    |     `-IntegerLiteral 0x14800e1a8 <col:20> 'int' 1
    |-IfStmt 0x148028728 <line:5:5, line:6:16>
    | |-BinaryOperator 0x1480286c0 <line:5:10, col:67> 'int' contains-errors '=='
    | | |-CallExpr 0x148028668 <col:10, col:62> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x14800e370 <col:10> 'int ()' Function 0x14800e2b8 'bson_check_string' 'int ()'
    | | | |-RecoveryExpr 0x14800e390 <col:29> '<dependent type>' contains-errors lvalue
    | | | |-CStyleCastExpr 0x148028608 <col:32, col:48> 'const char *' <NoOp>
    | | | | `-ImplicitCastExpr 0x1480285f0 <col:48> 'const char *' <LValueToRValue> part_of_explicit_cast
    | | | |   `-DeclRefExpr 0x14800e3b0 <col:48> 'const char *' lvalue ParmVar 0x14800de28 'value' 'const char *'
    | | | `-BinaryOperator 0x148028648 <col:55, col:60> 'int' '-'
    | | |   |-ImplicitCastExpr 0x148028630 <col:55> 'int' <LValueToRValue>
    | | |   | `-DeclRefExpr 0x148028428 <col:55> 'int' lvalue Var 0x14800e120 'sl' 'int'
    | | |   `-IntegerLiteral 0x148028448 <col:60> 'int' 1
    | | `-RecoveryExpr 0x1480286a0 <col:67> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x148028718 <line:6:9, col:16>
    |   `-RecoveryExpr 0x1480286f8 <col:16> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x148028b28 <line:7:5, line:9:5>
    | |-BinaryOperator 0x148028aa8 <line:7:10, col:57> 'int' contains-errors '=='
    | | |-CallExpr 0x148028a48 <col:10, col:52> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x148028828 <col:10> 'int ()' Function 0x148028770 'bson_append_estart' 'int ()'
    | | | |-RecoveryExpr 0x148028848 <col:30> '<dependent type>' contains-errors lvalue
    | | | |-RecoveryExpr 0x148028868 <col:33> '<dependent type>' contains-errors lvalue
    | | | |-DeclRefExpr 0x148028888 <col:39> 'const char *' lvalue ParmVar 0x14800dda8 'name' 'const char *'
    | | | `-BinaryOperator 0x148028a28 <col:45, col:49> 'int' '+'
    | | |   |-IntegerLiteral 0x1480288a8 <col:45> 'int' 4
    | | |   `-ImplicitCastExpr 0x148028a10 <col:49> 'int' <LValueToRValue>
    | | |     `-DeclRefExpr 0x1480288c8 <col:49> 'int' lvalue Var 0x14800e120 'sl' 'int'
    | | `-RecoveryExpr 0x148028a88 <col:57> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x148028b10 <col:70, line:9:5>
    |   `-ReturnStmt 0x148028b00 <line:8:9, col:16>
    |     `-RecoveryExpr 0x148028ae0 <col:16> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x148028ca0 <line:10:5, col:28> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x148028c28 <col:5> 'int ()' Function 0x148028b70 'bson_append32' 'int ()'
    | |-RecoveryExpr 0x148028c48 <col:20> '<dependent type>' contains-errors lvalue
    | `-UnaryOperator 0x148028c88 <col:24, col:25> 'int *' prefix '&' cannot overflow
    |   `-DeclRefExpr 0x148028c68 <col:25> 'int' lvalue Var 0x14800e120 'sl' 'int'
    |-CallExpr 0x148028e88 <line:11:5, col:37> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x148028db0 <col:5> 'int ()' Function 0x148028cf8 'bson_append' 'int ()'
    | |-RecoveryExpr 0x148028dd0 <col:18> '<dependent type>' contains-errors lvalue
    | |-DeclRefExpr 0x148028df0 <col:22> 'const char *' lvalue ParmVar 0x14800de28 'value' 'const char *'
    | `-BinaryOperator 0x148028e68 <col:30, col:35> 'int' '-'
    |   |-ImplicitCastExpr 0x148028e50 <col:30> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x148028e10 <col:30> 'int' lvalue Var 0x14800e120 'sl' 'int'
    |   `-IntegerLiteral 0x148028e30 <col:35> 'int' 1
    |-CallExpr 0x148028f80 <line:12:5, col:32> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x148028ec0 <col:5> 'int ()' Function 0x148028cf8 'bson_append' 'int ()'
    | |-RecoveryExpr 0x148028ee0 <col:18> '<dependent type>' contains-errors lvalue
    | |-StringLiteral 0x148028f40 <col:22> 'char[4]' lvalue "STR"
    | `-IntegerLiteral 0x148028f60 <col:30> 'int' 1
    `-ReturnStmt 0x148028ff0 <line:13:5, col:12>
      `-RecoveryExpr 0x148028fd0 <col:12> '<dependent type>' contains-errors lvalue
