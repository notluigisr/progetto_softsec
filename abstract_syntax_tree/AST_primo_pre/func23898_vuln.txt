`-FunctionDecl 0x12d00dda8  line:1:5 jpc_firstone 'int (int)'
  |-ParmVarDecl 0x12d00dcd8 <col:18, col:22> col:22 used x 'int'
  `-CompoundStmt 0x12d00e3a8 <line:2:1, line:14:1>
    |-DeclStmt 0x12d00df20 <line:3:2, col:7>
    | `-VarDecl 0x12d00deb8 <col:2, col:6> col:6 used n 'int'
    |-CallExpr 0x12d00e148 <line:6:2, col:15> 'int'
    | |-ImplicitCastExpr 0x12d00e130 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x12d00e060 <col:2> 'int ()' Function 0x12d00dfa8 'assert' 'int ()'
    | `-BinaryOperator 0x12d00e0d8 <col:9, col:14> 'int' '>='
    |   |-ImplicitCastExpr 0x12d00e0c0 <col:9> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x12d00e080 <col:9> 'int' lvalue ParmVar 0x12d00dcd8 'x' 'int'
    |   `-IntegerLiteral 0x12d00e0a0 <col:14> 'int' 0
    |-BinaryOperator 0x12d00e1c8 <line:8:2, col:7> 'int' '='
    | |-DeclRefExpr 0x12d00e170 <col:2> 'int' lvalue Var 0x12d00deb8 'n' 'int'
    | `-UnaryOperator 0x12d00e1b0 <col:6, col:7> 'int' prefix '-'
    |   `-IntegerLiteral 0x12d00e190 <col:7> 'int' 1
    |-WhileStmt 0x12d00e340 <line:9:2, line:12:2>
    | |-BinaryOperator 0x12d00e240 <line:9:9, col:13> 'int' '>'
    | | |-ImplicitCastExpr 0x12d00e228 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x12d00e1e8 <col:9> 'int' lvalue ParmVar 0x12d00dcd8 'x' 'int'
    | | `-IntegerLiteral 0x12d00e208 <col:13> 'int' 0
    | `-CompoundStmt 0x12d00e320 <col:16, line:12:2>
    |   |-CompoundAssignOperator 0x12d00e2b8 <line:10:3, col:9> 'int' '>>=' ComputeLHSTy='int' ComputeResultTy='int'
    |   | |-DeclRefExpr 0x12d00e260 <col:3> 'int' lvalue ParmVar 0x12d00dcd8 'x' 'int'
    |   | `-IntegerLiteral 0x12d00e280 <col:9> 'int' 1
    |   `-UnaryOperator 0x12d00e308 <line:11:3, col:5> 'int' prefix '++'
    |     `-DeclRefExpr 0x12d00e2e8 <col:5> 'int' lvalue Var 0x12d00deb8 'n' 'int'
    `-ReturnStmt 0x12d00e398 <line:13:2, col:9>
      `-ImplicitCastExpr 0x12d00e380 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x12d00e360 <col:9> 'int' lvalue Var 0x12d00deb8 'n' 'int'
