`-FunctionDecl 0x12d128b18  line:1:12 invalid ms_adpcm_decode_block 'int (int *, int *, int *)' static
  |-ParmVarDecl 0x12d128928 <col:35, col:50> col:50 invalid msadpcm 'int *'
  |-ParmVarDecl 0x12d1289a8 <col:59, col:68> col:68 referenced invalid encoded 'int *'
  |-ParmVarDecl 0x12d128a28 <line:2:2, col:11> col:11 invalid decoded 'int *'
  `-CompoundStmt 0x12d143cb8 <line:3:1, line:82:1>
    |-DeclStmt 0x12d128d78 <line:4:2, col:40>
    | |-VarDecl 0x12d128bf0 <col:2, col:7> col:7 used i 'int'
    | |-VarDecl 0x12d128c70 <col:2, col:10> col:10 used outputLength 'int'
    | `-VarDecl 0x12d128cf0 <col:2, col:24> col:24 used samplesRemaining 'int'
    |-DeclStmt 0x12d128e10 <line:5:2, col:19>
    | `-VarDecl 0x12d128da8 <col:2, col:7> col:7 used channelCount 'int'
    |-BinaryOperator 0x12d142160 <line:14:2, col:35> 'int' contains-errors '='
    | |-DeclRefExpr 0x12d142048 <col:2> 'int' lvalue Var 0x12d128da8 'channelCount' 'int'
    | `-CXXDependentScopeMemberExpr 0x12d142118 <col:17, col:35> '<dependent type>' contains-errors lvalue .channelCount
    |   `-CXXDependentScopeMemberExpr 0x12d1420d0 <col:17, col:33> '<dependent type>' contains-errors lvalue ->f
    |     `-CXXDependentScopeMemberExpr 0x12d142088 <col:17, col:26> '<dependent type>' contains-errors lvalue ->track
    |       `-RecoveryExpr 0x12d142068 <col:17> '<dependent type>' contains-errors lvalue
    |-ForStmt 0x12d1426c0 <line:23:2, line:27:2>
    | |-BinaryOperator 0x12d142340 <line:23:7, col:9> 'int' '='
    | | |-DeclRefExpr 0x12d142300 <col:7> 'int' lvalue Var 0x12d128bf0 'i' 'int'
    | | `-IntegerLiteral 0x12d142320 <col:9> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x12d1423d0 <col:12, col:14> 'int' '<'
    | | |-ImplicitCastExpr 0x12d1423a0 <col:12> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x12d142360 <col:12> 'int' lvalue Var 0x12d128bf0 'i' 'int'
    | | `-ImplicitCastExpr 0x12d1423b8 <col:14> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x12d142380 <col:14> 'int' lvalue Var 0x12d128da8 'channelCount' 'int'
    | |-UnaryOperator 0x12d142410 <col:28, col:29> 'int' postfix '++'
    | | `-DeclRefExpr 0x12d1423f0 <col:28> 'int' lvalue Var 0x12d128bf0 'i' 'int'
    | `-CompoundStmt 0x12d1426b0 <line:24:2, line:27:2>
    |-ForStmt 0x12d142a20 <line:30:2, line:34:2>
    | |-BinaryOperator 0x12d142738 <line:30:7, col:9> 'int' '='
    | | |-DeclRefExpr 0x12d1426f8 <col:7> 'int' lvalue Var 0x12d128bf0 'i' 'int'
    | | `-IntegerLiteral 0x12d142718 <col:9> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x12d1427c8 <col:12, col:14> 'int' '<'
    | | |-ImplicitCastExpr 0x12d142798 <col:12> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x12d142758 <col:12> 'int' lvalue Var 0x12d128bf0 'i' 'int'
    | | `-ImplicitCastExpr 0x12d1427b0 <col:14> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x12d142778 <col:14> 'int' lvalue Var 0x12d128da8 'channelCount' 'int'
    | |-UnaryOperator 0x12d142808 <col:28, col:29> 'int' postfix '++'
    | | `-DeclRefExpr 0x12d1427e8 <col:28> 'int' lvalue Var 0x12d128bf0 'i' 'int'
    | `-CompoundStmt 0x12d142a10 <line:31:2, line:34:2>
    |-ForStmt 0x12d142d68 <line:37:2, line:41:2>
    | |-BinaryOperator 0x12d142a98 <line:37:7, col:9> 'int' '='
    | | |-DeclRefExpr 0x12d142a58 <col:7> 'int' lvalue Var 0x12d128bf0 'i' 'int'
    | | `-IntegerLiteral 0x12d142a78 <col:9> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x12d142b28 <col:12, col:14> 'int' '<'
    | | |-ImplicitCastExpr 0x12d142af8 <col:12> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x12d142ab8 <col:12> 'int' lvalue Var 0x12d128bf0 'i' 'int'
    | | `-ImplicitCastExpr 0x12d142b10 <col:14> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x12d142ad8 <col:14> 'int' lvalue Var 0x12d128da8 'channelCount' 'int'
    | |-UnaryOperator 0x12d142b68 <col:28, col:29> 'int' postfix '++'
    | | `-DeclRefExpr 0x12d142b48 <col:28> 'int' lvalue Var 0x12d128bf0 'i' 'int'
    | `-CompoundStmt 0x12d142d58 <line:38:2, line:41:2>
    |-ForStmt 0x12d1430b0 <line:43:2, line:47:2>
    | |-BinaryOperator 0x12d142de0 <line:43:7, col:9> 'int' '='
    | | |-DeclRefExpr 0x12d142da0 <col:7> 'int' lvalue Var 0x12d128bf0 'i' 'int'
    | | `-IntegerLiteral 0x12d142dc0 <col:9> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x12d142e70 <col:12, col:14> 'int' '<'
    | | |-ImplicitCastExpr 0x12d142e40 <col:12> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x12d142e00 <col:12> 'int' lvalue Var 0x12d128bf0 'i' 'int'
    | | `-ImplicitCastExpr 0x12d142e58 <col:14> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x12d142e20 <col:14> 'int' lvalue Var 0x12d128da8 'channelCount' 'int'
    | |-UnaryOperator 0x12d142eb0 <col:28, col:29> 'int' postfix '++'
    | | `-DeclRefExpr 0x12d142e90 <col:28> 'int' lvalue Var 0x12d128bf0 'i' 'int'
    | `-CompoundStmt 0x12d1430a0 <line:44:2, line:47:2>
    |-BinaryOperator 0x12d143768 <line:59:2, line:60:21> 'int' contains-errors '='
    | |-DeclRefExpr 0x12d143568 <line:59:2> 'int' lvalue Var 0x12d128cf0 'samplesRemaining' 'int'
    | `-BinaryOperator 0x12d143748 <col:21, line:60:21> '<dependent type>' contains-errors '*'
    |   |-ParenExpr 0x12d143630 <line:59:21, col:50> '<dependent type>' contains-errors
    |   | `-BinaryOperator 0x12d143610 <col:22, col:49> '<dependent type>' contains-errors '-'
    |   |   |-CXXDependentScopeMemberExpr 0x12d1435a8 <col:22, col:31> '<dependent type>' contains-errors lvalue ->samplesPerBlock
    |   |   | `-RecoveryExpr 0x12d143588 <col:22> '<dependent type>' contains-errors lvalue
    |   |   `-IntegerLiteral 0x12d1435f0 <col:49> 'int' 2
    |   `-CXXDependentScopeMemberExpr 0x12d143700 <line:60:3, col:21> '<dependent type>' contains-errors lvalue .channelCount
    |     `-CXXDependentScopeMemberExpr 0x12d1436b8 <col:3, col:19> '<dependent type>' contains-errors lvalue ->f
    |       `-CXXDependentScopeMemberExpr 0x12d143670 <col:3, col:12> '<dependent type>' contains-errors lvalue ->track
    |         `-RecoveryExpr 0x12d143650 <col:3> '<dependent type>' contains-errors lvalue
    |-WhileStmt 0x12d143c50 <line:62:2, line:79:2>
    | |-BinaryOperator 0x12d1437e0 <line:62:9, col:28> 'int' '>'
    | | |-ImplicitCastExpr 0x12d1437c8 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x12d143788 <col:9> 'int' lvalue Var 0x12d128cf0 'samplesRemaining' 'int'
    | | `-IntegerLiteral 0x12d1437a8 <col:28> 'int' 0
    | `-CompoundStmt 0x12d143c30 <line:63:2, line:79:2>
    |   |-UnaryOperator 0x12d143ba8 <line:77:3, col:10> '<dependent type>' contains-errors postfix '++' cannot overflow
    |   | `-RecoveryExpr 0x12d143b80 <col:3> '<dependent type>' contains-errors lvalue
    |   |   `-DeclRefExpr 0x12d143b60 <col:3> 'int *' lvalue ParmVar 0x12d1289a8 'encoded' 'int *'
    |   `-CompoundAssignOperator 0x12d143c00 <line:78:3, col:23> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
    |     |-DeclRefExpr 0x12d143bc0 <col:3> 'int' lvalue Var 0x12d128cf0 'samplesRemaining' 'int'
    |     `-IntegerLiteral 0x12d143be0 <col:23> 'int' 2
    `-ReturnStmt 0x12d143ca8 <line:81:2, col:9>
      `-ImplicitCastExpr 0x12d143c90 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x12d143c70 <col:9> 'int' lvalue Var 0x12d128c70 'outputLength' 'int'
