`-FunctionDecl 0x124928318  line:1:1 invalid njs_vmcode_typeof 'int (int *, int *, int *)'
  |-ParmVarDecl 0x124928128 <col:19, col:29> col:29 referenced invalid vm 'int *'
  |-ParmVarDecl 0x1249281a8 <col:33, col:46> col:46 invalid value 'int *'
  |-ParmVarDecl 0x124928228 <col:53, col:66> col:66 invalid invld 'int *'
  `-CompoundStmt 0x1250088e8 <line:2:1, line:37:1>
    |-DeclStmt 0x124928710 <line:5:5, line:32:6>
    | `-VarDecl 0x124928408 <line:5:5, col:32> col:32 invalid types 'const int *' static
    `-BinaryOperator 0x1250088c8 <line:34:5, col:36> '<dependent type>' contains-errors '='
      |-CXXDependentScopeMemberExpr 0x124928770 <col:5, col:9> '<dependent type>' contains-errors lvalue ->retval
      | `-RecoveryExpr 0x124928748 <col:5> '<dependent type>' contains-errors lvalue
      |   `-DeclRefExpr 0x124928728 <col:5> 'int *' lvalue ParmVar 0x124928128 'vm' 'int *'
      `-UnaryOperator 0x1250088b0 <col:18, col:36> '<dependent type>' contains-errors prefix '*' cannot overflow
        `-ImplicitCastExpr 0x125008898 <col:19, col:36> '<dependent type>' contains-errors <LValueToRValue>
          `-ArraySubscriptExpr 0x125008878 <col:19, col:36> '<dependent type>' contains-errors lvalue
            |-ImplicitCastExpr 0x125008848 <col:19> '<dependent type>' contains-errors <LValueToRValue>
            | `-RecoveryExpr 0x1249287b8 <col:19> '<dependent type>' contains-errors lvalue
            `-ImplicitCastExpr 0x125008860 <col:25, col:32> '<dependent type>' contains-errors <LValueToRValue>
              `-CXXDependentScopeMemberExpr 0x125008800 <col:25, col:32> '<dependent type>' contains-errors lvalue ->type
                `-RecoveryExpr 0x1249287d8 <col:25> '<dependent type>' contains-errors lvalue
