`-FunctionDecl 0x130128758  line:1:1 ctx_event_to_rotate 'int (struct perf_event_context *)'
  |-ParmVarDecl 0x130128648 <col:21, col:48> col:48 used ctx 'struct perf_event_context *'
  `-CompoundStmt 0x1301412f0 <line:2:1, line:19:1>
    |-DeclStmt 0x130140c38 <line:3:2, col:26>
    | |-RecordDecl 0x130140a50 <col:2, col:9> col:9 struct perf_event
    | `-VarDecl 0x130140bb8 <col:2, col:21> col:21 used event 'struct perf_event *'
    |-IfStmt 0x1301411d0 <line:10:2, line:13:2>
    | |-UnaryOperator 0x130140e88 <line:10:6, col:7> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x130140e70 <col:7> 'struct perf_event *' <LValueToRValue>
    | |   `-DeclRefExpr 0x130140e50 <col:7> 'struct perf_event *' lvalue Var 0x130140bb8 'event' 'struct perf_event *'
    | `-CompoundStmt 0x1301411c0 <col:14, line:13:2>
    |-BinaryOperator 0x130141270 <line:16:2, col:26> '<dependent type>' contains-errors '='
    | |-RecoveryExpr 0x130141228 <col:2, col:7> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x1301411f0 <col:2> 'struct perf_event_context *' lvalue ParmVar 0x130128648 'ctx' 'struct perf_event_context *'
    | `-IntegerLiteral 0x130141250 <col:26> 'int' 0
    `-ReturnStmt 0x1301412e0 <line:18:2, col:9>
      `-ImplicitCastExpr 0x1301412c8 <col:9> 'int' <PointerToIntegral>
        `-ImplicitCastExpr 0x1301412b0 <col:9> 'struct perf_event *' <LValueToRValue>
          `-DeclRefExpr 0x130141290 <col:9> 'struct perf_event *' lvalue Var 0x130140bb8 'event' 'struct perf_event *'
