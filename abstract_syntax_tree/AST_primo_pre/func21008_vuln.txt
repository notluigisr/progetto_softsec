`-FunctionDecl 0x12780df10  line:1:13 invalid calcstepsizes 'void (int, int, int *)' static
  |-ParmVarDecl 0x12780dcf0 <col:27, col:41> col:41 invalid refstepsize 'int'
  |-ParmVarDecl 0x12780dd70 <col:54, col:58> col:58 used numrlvls 'int'
  |-ParmVarDecl 0x12780de28 <line:2:3, col:18> col:18 referenced invalid stepsizes 'int *'
  `-CompoundStmt 0x127828180 <line:3:1, line:15:1>
    |-DeclStmt 0x12780e050 <line:4:2, col:12>
    | `-VarDecl 0x12780dfe8 <col:2, col:6> col:6 used bandno 'int'
    |-DeclStmt 0x12780e0e8 <line:5:2, col:14>
    | `-VarDecl 0x12780e080 <col:2, col:6> col:6 used numbands 'int'
    |-BinaryOperator 0x127827500 <line:10:2, col:28> 'int' '='
    | |-DeclRefExpr 0x127827428 <col:2> 'int' lvalue Var 0x12780e080 'numbands' 'int'
    | `-BinaryOperator 0x1278274e0 <col:13, col:28> 'int' '-'
    |   |-BinaryOperator 0x1278274a0 <col:13, col:17> 'int' '*'
    |   | |-IntegerLiteral 0x127827448 <col:13> 'int' 3
    |   | `-ImplicitCastExpr 0x127827488 <col:17> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x127827468 <col:17> 'int' lvalue ParmVar 0x12780dd70 'numrlvls' 'int'
    |   `-IntegerLiteral 0x1278274c0 <col:28> 'int' 2
    `-ForStmt 0x127828148 <line:11:2, line:14:2>
      |-BinaryOperator 0x127827560 <line:11:7, col:16> 'int' '='
      | |-DeclRefExpr 0x127827520 <col:7> 'int' lvalue Var 0x12780dfe8 'bandno' 'int'
      | `-IntegerLiteral 0x127827540 <col:16> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x1278275f0 <col:19, col:28> 'int' '<'
      | |-ImplicitCastExpr 0x1278275c0 <col:19> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x127827580 <col:19> 'int' lvalue Var 0x12780dfe8 'bandno' 'int'
      | `-ImplicitCastExpr 0x1278275d8 <col:28> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x1278275a0 <col:28> 'int' lvalue Var 0x12780e080 'numbands' 'int'
      |-UnaryOperator 0x127827630 <col:38, col:40> 'int' prefix '++'
      | `-DeclRefExpr 0x127827610 <col:40> 'int' lvalue Var 0x12780dfe8 'bandno' 'int'
      `-CompoundStmt 0x127828130 <col:48, line:14:2>
        `-BinaryOperator 0x127828110 <line:12:3, line:13:80> '<dependent type>' contains-errors '='
          |-ArraySubscriptExpr 0x127827df0 <line:12:3, col:19> '<dependent type>' contains-errors lvalue
          | |-ImplicitCastExpr 0x127827dc0 <col:3> '<dependent type>' contains-errors <LValueToRValue>
          | | `-RecoveryExpr 0x127827668 <col:3> '<dependent type>' contains-errors lvalue
          | |   `-DeclRefExpr 0x127827648 <col:3> 'int *' lvalue ParmVar 0x12780de28 'stepsizes' 'int *'
          | `-ImplicitCastExpr 0x127827dd8 <col:13> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x127827690 <col:13> 'int' lvalue Var 0x12780dfe8 'bandno' 'int'
          `-BinaryOperator 0x1278280f0 <col:23, line:13:80> '<dependent type>' contains-errors '|'
            |-CallExpr 0x127827e30 <line:12:23, col:40> '<dependent type>' contains-errors
            | |-DeclRefExpr 0x1278277e0 <col:23> 'int ()' Function 0x127827728 'JPC_QCX_MANT' 'int ()'
            | `-RecoveryExpr 0x127827e10 <col:36> '<dependent type>' contains-errors lvalue
            `-CallExpr 0x1278280c8 <col:44, line:13:80> '<dependent type>' contains-errors
              |-DeclRefExpr 0x127827920 <line:12:44> 'int ()' Function 0x127827868 'JPC_QCX_EXPN' 'int ()'
              `-BinaryOperator 0x1278280a8 <col:57, line:13:79> '<dependent type>' contains-errors '-'
                |-BinaryOperator 0x127827ed0 <line:12:57, line:13:18> '<dependent type>' contains-errors '+'
                | |-RecoveryExpr 0x127827e58 <line:12:57> '<dependent type>' contains-errors lvalue
                | `-ParenExpr 0x127827eb0 <line:13:5, col:18> 'int'
                |   `-BinaryOperator 0x127827e90 <col:6, col:17> 'int' '-'
                |     |-ImplicitCastExpr 0x127827e78 <col:6> 'int' <LValueToRValue>
                |     | `-DeclRefExpr 0x127827958 <col:6> 'int' lvalue ParmVar 0x12780dd70 'numrlvls' 'int'
                |     `-IntegerLiteral 0x127827978 <col:17> 'int' 1
                `-ParenExpr 0x127828088 <col:22, col:79> 'int'
                  `-BinaryOperator 0x127828068 <col:23, col:78> 'int' '-'
                    |-BinaryOperator 0x127827f08 <col:23, col:34> 'int' '-'
                    | |-ImplicitCastExpr 0x127827ef0 <col:23> 'int' <LValueToRValue>
                    | | `-DeclRefExpr 0x127827a10 <col:23> 'int' lvalue ParmVar 0x12780dd70 'numrlvls' 'int'
                    | `-IntegerLiteral 0x127827a30 <col:34> 'int' 1
                    `-ParenExpr 0x127828048 <col:38, col:78> 'int'
                      `-ConditionalOperator 0x127828018 <col:39, col:77> 'int'
                        |-ParenExpr 0x127827f60 <col:39, col:50> 'int'
                        | `-BinaryOperator 0x127827f40 <col:40, col:49> 'int' '>'
                        |   |-ImplicitCastExpr 0x127827f28 <col:40> 'int' <LValueToRValue>
                        |   | `-DeclRefExpr 0x127827a88 <col:40> 'int' lvalue Var 0x12780dfe8 'bandno' 'int'
                        |   `-IntegerLiteral 0x127827aa8 <col:49> 'int' 0
                        |-ParenExpr 0x127827ff8 <col:54, col:71> 'int'
                        | `-BinaryOperator 0x127827fd8 <col:55, col:70> 'int' '/'
                        |   |-ParenExpr 0x127827fb8 <col:55, col:66> 'int'
                        |   | `-BinaryOperator 0x127827f98 <col:56, col:65> 'int' '+'
                        |   |   |-ImplicitCastExpr 0x127827f80 <col:56> 'int' <LValueToRValue>
                        |   |   | `-DeclRefExpr 0x127827b20 <col:56> 'int' lvalue Var 0x12780dfe8 'bandno' 'int'
                        |   |   `-IntegerLiteral 0x127827b40 <col:65> 'int' 2
                        |   `-IntegerLiteral 0x127827bb8 <col:70> 'int' 3
                        `-ParenExpr 0x127827c38 <col:75, col:77> 'int'
                          `-IntegerLiteral 0x127827c18 <col:76> 'int' 0
