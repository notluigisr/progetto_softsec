`-FunctionDecl 0x14680dd98  line:1:12 ipmi_init_msghandler 'int (void)' static
  `-CompoundStmt 0x147009320 <line:2:1, line:24:1>
    |-DeclStmt 0x14680df08 <line:3:2, col:8>
    | `-VarDecl 0x14680dea0 <col:2, col:6> col:6 used rv 'int'
    |-CallExpr 0x14680e100 <line:5:2, col:35> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x14680e050 <col:2> 'int ()' Function 0x14680df98 'mutex_lock' 'int ()'
    | `-UnaryOperator 0x14680e0e8 <col:13, col:14> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   `-RecoveryExpr 0x14680e0c8 <col:14> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x14680e2b8 <line:6:2, col:28> 'int' '='
    | |-DeclRefExpr 0x14680e128 <col:2> 'int' lvalue Var 0x14680dea0 'rv' 'int'
    | `-CallExpr 0x14680e298 <col:7, col:28> 'int'
    |   `-ImplicitCastExpr 0x14680e280 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x14680e228 <col:7> 'int ()' Function 0x14680e170 'ipmi_register_driver' 'int ()'
    |-IfStmt 0x14680e378 <line:7:2, line:8:8>
    | |-ImplicitCastExpr 0x14680e2f8 <line:7:6> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x14680e2d8 <col:6> 'int' lvalue Var 0x14680dea0 'rv' 'int'
    | `-GotoStmt 0x14680e360 <line:8:3, col:8> 'out' 0x14680e310
    |-IfStmt 0x147008800 <line:9:2, line:10:8>
    | |-RecoveryExpr 0x14680e3b0 <line:9:6> '<dependent type>' contains-errors lvalue
    | `-GotoStmt 0x14680e3d0 <line:10:3, col:8> 'out' 0x14680e310
    |-CallExpr 0x1470089b0 <line:12:2, col:40> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x147008900 <col:2> 'int ()' Function 0x147008848 'init_srcu_struct' 'int ()'
    | `-UnaryOperator 0x147008998 <col:19, col:20> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   `-RecoveryExpr 0x147008978 <col:20> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x147008bd0 <line:14:2, col:42> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x147008ab8 <col:2> 'int ()' Function 0x147008a00 'timer_setup' 'int ()'
    | |-UnaryOperator 0x147008b98 <col:14, col:15> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | `-RecoveryExpr 0x147008b78 <col:15> '<dependent type>' contains-errors lvalue
    | |-RecoveryExpr 0x147008bb0 <col:27> '<dependent type>' contains-errors lvalue
    | `-IntegerLiteral 0x147008b20 <col:41> 'int' 0
    |-CallExpr 0x147008e88 <line:15:2, col:55> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x147008ce8 <col:2> 'int ()' Function 0x147008c30 'mod_timer' 'int ()'
    | |-UnaryOperator 0x147008e10 <col:12, col:13> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | `-RecoveryExpr 0x147008df0 <col:13> '<dependent type>' contains-errors lvalue
    | `-BinaryOperator 0x147008e68 <col:25, col:35> '<dependent type>' contains-errors '+'
    |   |-RecoveryExpr 0x147008e28 <col:25> '<dependent type>' contains-errors lvalue
    |   `-RecoveryExpr 0x147008e48 <col:35> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x1470090b8 <line:17:2, col:67> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x147008f98 <col:2> 'int ()' Function 0x147008ee0 'atomic_notifier_chain_register' 'int ()'
    | |-UnaryOperator 0x147009068 <col:33, col:34> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | `-RecoveryExpr 0x147009048 <col:34> '<dependent type>' contains-errors lvalue
    | `-UnaryOperator 0x1470090a0 <col:55, col:56> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   `-RecoveryExpr 0x147009080 <col:56> '<dependent type>' contains-errors lvalue
    |-LabelStmt 0x1470092b8 <line:21:1, line:22:37> 'out'
    | `-CallExpr 0x147009290 <col:2, col:37> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x1470091e0 <col:2> 'int ()' Function 0x147009128 'mutex_unlock' 'int ()'
    |   `-UnaryOperator 0x147009278 <col:15, col:16> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-RecoveryExpr 0x147009258 <col:16> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x147009310 <line:23:2, col:9>
      `-ImplicitCastExpr 0x1470092f8 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x1470092d8 <col:9> 'int' lvalue Var 0x14680dea0 'rv' 'int'
