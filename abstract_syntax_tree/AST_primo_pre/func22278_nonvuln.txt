`-FunctionDecl 0x1440083e8  line:1:12 lo_inode_open 'int (struct lo_data *, struct lo_inode *, int)' static
  |-ParmVarDecl 0x143928648 <col:26, col:42> col:42 used lo 'struct lo_data *'
  |-ParmVarDecl 0x144008228 <col:46, col:63> col:63 used inode 'struct lo_inode *'
  |-ParmVarDecl 0x1440082a8 <line:2:26, col:30> col:30 used open_flags 'int'
  `-CompoundStmt 0x144008f10 <line:3:1, line:17:1>
    |-DeclStmt 0x144008588 <line:5:5, col:11>
    | `-VarDecl 0x144008520 <col:5, col:9> col:9 used fd 'int'
    |-IfStmt 0x1440089f0 <line:7:5, line:9:5>
    | |-BinaryOperator 0x144008910 <line:7:9, col:62> 'int' contains-errors '&&'
    | | |-UnaryOperator 0x144008758 <col:9, col:33> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | | `-CallExpr 0x144008730 <col:10, col:33> '<dependent type>' contains-errors
    | | |   |-DeclRefExpr 0x1440086b0 <col:10> 'int ()' Function 0x1440085f8 'S_ISREG' 'int ()'
    | | |   `-RecoveryExpr 0x144008708 <col:18, col:25> '<dependent type>' contains-errors lvalue
    | | |     `-DeclRefExpr 0x1440086d0 <col:18> 'struct lo_inode *' lvalue ParmVar 0x144008228 'inode' 'struct lo_inode *'
    | | `-UnaryOperator 0x1440088f8 <col:38, col:62> '<dependent type>' contains-errors prefix '!' cannot overflow
    | |   `-CallExpr 0x1440088d0 <col:39, col:62> '<dependent type>' contains-errors
    | |     |-DeclRefExpr 0x144008850 <col:39> 'int ()' Function 0x144008798 'S_ISDIR' 'int ()'
    | |     `-RecoveryExpr 0x1440088a8 <col:47, col:54> '<dependent type>' contains-errors lvalue
    | |       `-DeclRefExpr 0x144008870 <col:47> 'struct lo_inode *' lvalue ParmVar 0x144008228 'inode' 'struct lo_inode *'
    | `-CompoundStmt 0x1440089d8 <col:65, line:9:5>
    |   `-ReturnStmt 0x1440089c8 <line:8:9, col:17>
    |     `-UnaryOperator 0x1440089b0 <col:16, col:17> '<dependent type>' contains-errors prefix '-' cannot overflow
    |       `-ImplicitCastExpr 0x144008998 <col:17> '<dependent type>' contains-errors <LValueToRValue>
    |         `-RecoveryExpr 0x144008978 <col:17> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x144008d50 <line:12:5, col:67> 'int' contains-errors '='
    | |-DeclRefExpr 0x144008a10 <col:5> 'int' lvalue Var 0x144008520 'fd' 'int'
    | `-CallExpr 0x144008d18 <col:10, col:67> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x144008b10 <col:10> 'int ()' Function 0x144008a58 'openat' 'int ()'
    |   |-RecoveryExpr 0x144008b68 <col:17, col:21> '<dependent type>' contains-errors lvalue
    |   | `-DeclRefExpr 0x144008b30 <col:17> 'struct lo_data *' lvalue ParmVar 0x143928648 'lo' 'struct lo_data *'
    |   |-RecoveryExpr 0x144008c88 <col:35> '<dependent type>' contains-errors lvalue
    |   `-BinaryOperator 0x144008cf8 <col:43, col:57> '<dependent type>' contains-errors '&'
    |     |-DeclRefExpr 0x144008ba8 <col:43> 'int' lvalue ParmVar 0x1440082a8 'open_flags' 'int'
    |     `-UnaryOperator 0x144008ce0 <col:56, col:57> '<dependent type>' contains-errors prefix '~' cannot overflow
    |       `-ImplicitCastExpr 0x144008cc8 <col:57> '<dependent type>' contains-errors <LValueToRValue>
    |         `-RecoveryExpr 0x144008ca8 <col:57> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x144008ea8 <line:13:5, line:15:5>
    | |-BinaryOperator 0x144008dc8 <line:13:9, col:14> 'int' '<'
    | | |-ImplicitCastExpr 0x144008db0 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x144008d70 <col:9> 'int' lvalue Var 0x144008520 'fd' 'int'
    | | `-IntegerLiteral 0x144008d90 <col:14> 'int' 0
    | `-CompoundStmt 0x144008e90 <col:17, line:15:5>
    |   `-ReturnStmt 0x144008e80 <line:14:9, col:17>
    |     `-UnaryOperator 0x144008e68 <col:16, col:17> '<dependent type>' contains-errors prefix '-' cannot overflow
    |       `-ImplicitCastExpr 0x144008e50 <col:17> '<dependent type>' contains-errors <LValueToRValue>
    |         `-RecoveryExpr 0x144008e30 <col:17> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x144008f00 <line:16:5, col:12>
      `-ImplicitCastExpr 0x144008ee8 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x144008ec8 <col:12> 'int' lvalue Var 0x144008520 'fd' 'int'
