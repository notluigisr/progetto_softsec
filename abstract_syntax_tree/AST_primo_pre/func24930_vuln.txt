`-FunctionDecl 0x158140c38  line:1:5 invalid LUKS2_config_get_requirements 'int (struct crypt_device *, struct luks2_hdr *, int *)'
  |-ParmVarDecl 0x158128648 <col:35, col:56> col:56 used cd 'struct crypt_device *'
  |-ParmVarDecl 0x158140a28 <col:60, col:78> col:78 used hdr 'struct luks2_hdr *'
  |-ParmVarDecl 0x158140af8 <col:83, col:93> col:93 invalid reqs 'int *'
  `-CompoundStmt 0x1581438c8 <line:2:1, line:37:1>
    |-DeclStmt 0x158140f00 <line:4:2, col:12>
    | |-VarDecl 0x158140e00 <col:2, col:6> col:6 used i 'int'
    | `-VarDecl 0x158140e80 <col:2, col:9> col:9 used len 'int'
    |-CallExpr 0x1581410f8 <line:7:2, col:12> 'int'
    | |-ImplicitCastExpr 0x1581410e0 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x158141070 <col:2> 'int ()' Function 0x158140fb8 'assert' 'int ()'
    | `-ImplicitCastExpr 0x158141120 <col:9> 'struct luks2_hdr *' <LValueToRValue>
    |   `-DeclRefExpr 0x158141090 <col:9> 'struct luks2_hdr *' lvalue ParmVar 0x158140a28 'hdr' 'struct luks2_hdr *'
    |-IfStmt 0x1581412a0 <line:8:2, line:9:11>
    | |-BinaryOperator 0x1581411d8 <line:8:6, col:15> 'int' contains-errors '||'
    | | |-UnaryOperator 0x158141170 <col:6, col:7> 'int' prefix '!' cannot overflow
    | | | `-ImplicitCastExpr 0x158141158 <col:7> 'struct luks2_hdr *' <LValueToRValue>
    | | |   `-DeclRefExpr 0x158141138 <col:7> 'struct luks2_hdr *' lvalue ParmVar 0x158140a28 'hdr' 'struct luks2_hdr *'
    | | `-UnaryOperator 0x1581411c0 <col:14, col:15> '<dependent type>' contains-errors prefix '!' cannot overflow
    | |   `-ImplicitCastExpr 0x1581411a8 <col:15> '<dependent type>' contains-errors <LValueToRValue>
    | |     `-RecoveryExpr 0x158141188 <col:15> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x158141290 <line:9:3, col:11>
    |   `-UnaryOperator 0x158141278 <col:10, col:11> '<dependent type>' contains-errors prefix '-' cannot overflow
    |     `-ImplicitCastExpr 0x158141260 <col:11> '<dependent type>' contains-errors <LValueToRValue>
    |       `-RecoveryExpr 0x158141240 <col:11> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x158141330 <line:11:2, col:10> '<dependent type>' contains-errors '='
    | |-UnaryOperator 0x1581412f8 <col:2, col:3> '<dependent type>' contains-errors prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x1581412e0 <col:3> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x1581412c0 <col:3> '<dependent type>' contains-errors lvalue
    | `-IntegerLiteral 0x158141310 <col:10> 'int' 0
    |-IfStmt 0x158141648 <line:13:2, line:14:10>
    | |-UnaryOperator 0x158141600 <line:13:6, col:63> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-CallExpr 0x1581415c8 <col:7, col:63> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x158141430 <col:7> 'int ()' Function 0x158141378 'json_object_object_get_ex' 'int ()'
    | |   |-RecoveryExpr 0x158141488 <col:33, col:38> '<dependent type>' contains-errors lvalue
    | |   | `-DeclRefExpr 0x158141450 <col:33> 'struct luks2_hdr *' lvalue ParmVar 0x158140a28 'hdr' 'struct luks2_hdr *'
    | |   |-StringLiteral 0x1581414f0 <col:44> 'char[4]' lvalue "STR"
    | |   `-UnaryOperator 0x1581415b0 <col:51, col:52> '<dependent type>' contains-errors prefix '&' cannot overflow
    | |     `-RecoveryExpr 0x158141590 <col:52> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x158141638 <line:14:3, col:10>
    |   `-IntegerLiteral 0x158141618 <col:10> 'int' 0
    |-IfStmt 0x158141818 <line:16:2, line:17:10>
    | |-UnaryOperator 0x1581417d0 <line:16:6, col:71> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-CallExpr 0x158141798 <col:7, col:71> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x158141668 <col:7> 'int ()' Function 0x158141378 'json_object_object_get_ex' 'int ()'
    | |   |-RecoveryExpr 0x158141740 <col:33> '<dependent type>' contains-errors lvalue
    | |   |-StringLiteral 0x1581416a0 <col:46> 'char[4]' lvalue "STR"
    | |   `-UnaryOperator 0x158141780 <col:53, col:54> '<dependent type>' contains-errors prefix '&' cannot overflow
    | |     `-RecoveryExpr 0x158141760 <col:54> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x158141808 <line:17:3, col:10>
    |   `-IntegerLiteral 0x1581417e8 <col:10> 'int' 0
    |-IfStmt 0x158142e00 <line:19:2, line:20:10>
    | |-UnaryOperator 0x1581419a0 <line:19:6, col:74> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-CallExpr 0x158141968 <col:7, col:74> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x158141838 <col:7> 'int ()' Function 0x158141378 'json_object_object_get_ex' 'int ()'
    | |   |-RecoveryExpr 0x158141910 <col:33> '<dependent type>' contains-errors lvalue
    | |   |-StringLiteral 0x158141870 <col:52> 'char[4]' lvalue "STR"
    | |   `-UnaryOperator 0x158141950 <col:59, col:60> '<dependent type>' contains-errors prefix '&' cannot overflow
    | |     `-RecoveryExpr 0x158141930 <col:60> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x1581419d8 <line:20:3, col:10>
    |   `-IntegerLiteral 0x1581419b8 <col:10> 'int' 0
    |-IfStmt 0x158143040 <line:23:2, line:24:10>
    | |-BinaryOperator 0x158142ff0 <line:23:6, col:13> 'int' '<='
    | | |-ImplicitCastExpr 0x158142fd8 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x158142f98 <col:6> 'int' lvalue Var 0x158140e80 'len' 'int'
    | | `-IntegerLiteral 0x158142fb8 <col:13> 'int' 0
    | `-ReturnStmt 0x158143030 <line:24:3, col:10>
    |   `-IntegerLiteral 0x158143010 <col:10> 'int' 0
    |-CallExpr 0x1581431b8 <line:26:2, col:19> 'int'
    | |-ImplicitCastExpr 0x1581431a0 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x158143140 <col:2> 'int ()' Function 0x158143088 'log_dbg' 'int ()'
    | |-ImplicitCastExpr 0x1581431e8 <col:10> 'struct crypt_device *' <LValueToRValue>
    | | `-DeclRefExpr 0x158143160 <col:10> 'struct crypt_device *' lvalue ParmVar 0x158128648 'cd' 'struct crypt_device *'
    | `-ImplicitCastExpr 0x158143200 <col:14> 'char *' <ArrayToPointerDecay>
    |   `-StringLiteral 0x158143180 <col:14> 'char[4]' lvalue "STR"
    |-ForStmt 0x158143860 <line:28:2, line:34:2>
    | |-BinaryOperator 0x158143258 <line:28:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x158143218 <col:7> 'int' lvalue Var 0x158140e00 'i' 'int'
    | | `-IntegerLiteral 0x158143238 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x1581432e8 <col:14, col:18> 'int' '<'
    | | |-ImplicitCastExpr 0x1581432b8 <col:14> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x158143278 <col:14> 'int' lvalue Var 0x158140e00 'i' 'int'
    | | `-ImplicitCastExpr 0x1581432d0 <col:18> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x158143298 <col:18> 'int' lvalue Var 0x158140e80 'len' 'int'
    | |-UnaryOperator 0x158143328 <col:23, col:24> 'int' postfix '++'
    | | `-DeclRefExpr 0x158143308 <col:23> 'int' lvalue Var 0x158140e00 'i' 'int'
    | `-CompoundStmt 0x158143850 <col:28, line:34:2>
    `-ReturnStmt 0x1581438b8 <line:36:2, col:9>
      `-IntegerLiteral 0x158143898 <col:9> 'int' 0
