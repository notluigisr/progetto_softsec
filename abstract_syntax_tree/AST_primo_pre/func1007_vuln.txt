`-FunctionDecl 0x14c80de88  line:1:33 invalid _gdContributionsAlloc 'int *(unsigned int, unsigned int)' static inline
  |-ParmVarDecl 0x14c80dcf0 <col:55, col:68> col:68 used line_length 'unsigned int'
  |-ParmVarDecl 0x14c80dd70 <col:81, col:94> col:94 used windows_size 'unsigned int'
  `-CompoundStmt 0x14c828ba0 <line:2:1, line:40:1>
    |-DeclStmt 0x14c80dff8 <line:3:2, col:20>
    | `-VarDecl 0x14c80df58 <col:2, col:19> col:15 used u 'unsigned int' cinit
    |   `-ImplicitCastExpr 0x14c80dfe0 <col:19> 'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x14c80dfc0 <col:19> 'int' 0
    |-DeclStmt 0x14c80e0c8 <line:5:2, col:24>
    | `-VarDecl 0x14c80e040 <col:2, col:23> col:6 used overflow_error 'int' cinit
    |   `-IntegerLiteral 0x14c80e0a8 <col:23> 'int' 0
    |-IfStmt 0x14c80e1f0 <line:8:2, line:10:2>
    | |-UnaryOperator 0x14c80e178 <line:8:6, col:7> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x14c80e160 <col:7> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x14c80e140 <col:7> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x14c80e1d8 <col:12, line:10:2>
    |   `-ReturnStmt 0x14c80e1c8 <line:9:3, col:10>
    |     `-RecoveryExpr 0x14c80e1a8 <col:10> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x14c828028 <line:13:2, line:16:2>
    | |-RecoveryExpr 0x14c827e18 <line:13:6, col:53> '_Bool' contains-errors
    | `-CompoundStmt 0x14c828008 <col:56, line:16:2>
    |   |-CallExpr 0x14c827f98 <line:14:3, col:13> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x14c827f18 <col:3> 'int ()' Function 0x14c827e60 'gdFree' 'int ()'
    |   | `-RecoveryExpr 0x14c827f78 <col:10> '<dependent type>' contains-errors lvalue
    |   `-ReturnStmt 0x14c827ff8 <line:15:3, col:10>
    |     `-RecoveryExpr 0x14c827fd8 <col:10> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x14c8281d0 <line:18:2, line:21:2>
    | |-BinaryOperator 0x14c828180 <line:18:6, col:25> 'int' contains-errors '=='
    | | |-CXXDependentScopeMemberExpr 0x14c828118 <col:6, col:11> '<dependent type>' contains-errors lvalue ->ContribRow
    | | | `-RecoveryExpr 0x14c8280f8 <col:6> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x14c828160 <col:25> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x14c8281c0 <col:31, line:21:2>
    `-ForStmt 0x14c828b68 <line:22:2, line:38:2>
      |-BinaryOperator 0x14c828248 <line:22:7, col:11> 'unsigned int' '='
      | |-DeclRefExpr 0x14c8281f0 <col:7> 'unsigned int' lvalue Var 0x14c80df58 'u' 'unsigned int'
      | `-ImplicitCastExpr 0x14c828230 <col:11> 'unsigned int' <IntegralCast>
      |   `-IntegerLiteral 0x14c828210 <col:11> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x14c8282d8 <col:15, col:19> 'int' '<'
      | |-ImplicitCastExpr 0x14c8282a8 <col:15> 'unsigned int' <LValueToRValue>
      | | `-DeclRefExpr 0x14c828268 <col:15> 'unsigned int' lvalue Var 0x14c80df58 'u' 'unsigned int'
      | `-ImplicitCastExpr 0x14c8282c0 <col:19> 'unsigned int' <LValueToRValue>
      |   `-DeclRefExpr 0x14c828288 <col:19> 'unsigned int' lvalue ParmVar 0x14c80dcf0 'line_length' 'unsigned int'
      |-UnaryOperator 0x14c828318 <col:33, col:34> 'unsigned int' postfix '++'
      | `-DeclRefExpr 0x14c8282f8 <col:33> 'unsigned int' lvalue Var 0x14c80df58 'u' 'unsigned int'
      `-CompoundStmt 0x14c828b48 <col:38, line:38:2>
        |-IfStmt 0x14c828740 <line:23:3, line:27:3> has_else
        | |-CallExpr 0x14c8283f8 <line:23:7, col:45> 'int'
        | | |-ImplicitCastExpr 0x14c8283e0 <col:7> 'int (*)()' <FunctionToPointerDecay>
        | | | `-DeclRefExpr 0x14c828330 <col:7> 'int ()' Function 0x14c80e2f8 'overflow2' 'int ()'
        | | |-ImplicitCastExpr 0x14c828428 <col:17> 'unsigned int' <LValueToRValue>
        | | | `-DeclRefExpr 0x14c828350 <col:17> 'unsigned int' lvalue ParmVar 0x14c80dd70 'windows_size' 'unsigned int'
        | | `-UnaryExprOrTypeTraitExpr 0x14c828388 <col:31, col:44> 'unsigned long' sizeof 'double'
        | |-CompoundStmt 0x14c8284a0 <col:48, line:25:3>
        | | `-BinaryOperator 0x14c828480 <line:24:4, col:21> 'int' '='
        | |   |-DeclRefExpr 0x14c828440 <col:4> 'int' lvalue Var 0x14c80e040 'overflow_error' 'int'
        | |   `-IntegerLiteral 0x14c828460 <col:21> 'int' 1
        | `-CompoundStmt 0x14c828730 <line:25:10, line:27:3>
        `-IfStmt 0x14c828b28 <line:28:3, line:37:3>
          |-RecoveryExpr 0x14c828808 <line:28:7, col:60> '_Bool' contains-errors
          `-CompoundStmt 0x14c828b00 <col:66, line:37:3>
            |-DeclStmt 0x14c8288a8 <line:29:4, col:18>
            | `-VarDecl 0x14c828840 <col:4, col:17> col:17 used i 'unsigned int'
            |-UnaryOperator 0x14c8288e0 <line:30:4, col:5> 'unsigned int' postfix '--'
            | `-DeclRefExpr 0x14c8288c0 <col:4> 'unsigned int' lvalue Var 0x14c80df58 'u' 'unsigned int'
            `-ForStmt 0x14c828a88 <line:31:4, line:33:4>
              |-BinaryOperator 0x14c828950 <line:31:9, col:11> 'unsigned int' '='
              | |-DeclRefExpr 0x14c8288f8 <col:9> 'unsigned int' lvalue Var 0x14c828840 'i' 'unsigned int'
              | `-ImplicitCastExpr 0x14c828938 <col:11> 'unsigned int' <IntegralCast>
              |   `-IntegerLiteral 0x14c828918 <col:11> 'int' 0
              |-<<<NULL>>>
              |-BinaryOperator 0x14c8289e0 <col:13, col:16> 'int' '<='
              | |-ImplicitCastExpr 0x14c8289b0 <col:13> 'unsigned int' <LValueToRValue>
              | | `-DeclRefExpr 0x14c828970 <col:13> 'unsigned int' lvalue Var 0x14c828840 'i' 'unsigned int'
              | `-ImplicitCastExpr 0x14c8289c8 <col:16> 'unsigned int' <LValueToRValue>
              |   `-DeclRefExpr 0x14c828990 <col:16> 'unsigned int' lvalue Var 0x14c80df58 'u' 'unsigned int'
              |-UnaryOperator 0x14c828a20 <col:18, col:19> 'unsigned int' postfix '++'
              | `-DeclRefExpr 0x14c828a00 <col:18> 'unsigned int' lvalue Var 0x14c828840 'i' 'unsigned int'
              `-CompoundStmt 0x14c828a78 <col:23, line:33:4>
