`-FunctionDecl 0x1271281f8  line:1:22 invalid get_active_class_name 'const int *(const char **)'
  |-ParmVarDecl 0x127128128 <col:44, col:57> col:57 used space 'const char **'
  `-CompoundStmt 0x127142490 <line:2:1, line:30:1>
    |-IfStmt 0x127141b00 <line:5:2, line:10:2>
    | |-UnaryOperator 0x1271284a8 <line:5:6, col:25> 'int' prefix '!' cannot overflow
    | | `-CallExpr 0x127128488 <col:7, col:25> 'int'
    | |   `-ImplicitCastExpr 0x127128470 <col:7> 'int (*)()' <FunctionToPointerDecay>
    | |     `-DeclRefExpr 0x127128420 <col:7> 'int ()' Function 0x127128368 'zend_is_executing' 'int ()'
    | `-CompoundStmt 0x127141ae0 <col:28, line:10:2>
    |   |-IfStmt 0x127128610 <line:6:3, line:8:3>
    |   | |-ImplicitCastExpr 0x1271284e0 <line:6:7> 'const char **' <LValueToRValue>
    |   | | `-DeclRefExpr 0x1271284c0 <col:7> 'const char **' lvalue ParmVar 0x127128128 'space' 'const char **'
    |   | `-CompoundStmt 0x1271285f8 <col:14, line:8:3>
    |   |   `-BinaryOperator 0x1271285d8 <line:7:4, col:13> 'const char *' '='
    |   |     |-UnaryOperator 0x127128530 <col:4, col:5> 'const char *' lvalue prefix '*' cannot overflow
    |   |     | `-ImplicitCastExpr 0x127128518 <col:5> 'const char **' <LValueToRValue>
    |   |     |   `-DeclRefExpr 0x1271284f8 <col:5> 'const char **' lvalue ParmVar 0x127128128 'space' 'const char **'
    |   |     `-ImplicitCastExpr 0x1271285c0 <col:13> 'const char *' <NoOp>
    |   |       `-ImplicitCastExpr 0x1271285a8 <col:13> 'char *' <ArrayToPointerDecay>
    |   |         `-StringLiteral 0x127128590 <col:13> 'char[1]' lvalue ""
    |   `-ReturnStmt 0x127141ad0 <line:9:3, col:10>
    |     `-ImplicitCastExpr 0x127128660 <col:10> 'const int *' <BitCast>
    |       `-ImplicitCastExpr 0x127128648 <col:10> 'char *' <ArrayToPointerDecay>
    |         `-StringLiteral 0x127128630 <col:10> 'char[1]' lvalue ""
    `-SwitchStmt 0x127141d88 <line:13:2, line:29:2>
      |-CXXDependentScopeMemberExpr 0x127141d40 <line:13:10, col:16> '<dependent type>' contains-errors lvalue ->type
      | `-RecoveryExpr 0x127141d20 <col:10> '<dependent type>' contains-errors lvalue
      `-CompoundStmt 0x127142468 <col:22, line:29:2>
        |-CompoundStmt 0x1271422a8 <line:16:3, line:23:3>
        | |-IfStmt 0x127141fb0 <line:19:4, line:21:4>
        | | |-ImplicitCastExpr 0x127141ec0 <line:19:8> 'const char **' <LValueToRValue>
        | | | `-DeclRefExpr 0x127141ea0 <col:8> 'const char **' lvalue ParmVar 0x127128128 'space' 'const char **'
        | | `-CompoundStmt 0x127141fa0 <col:15, line:21:4>
        | `-ReturnStmt 0x127142298 <line:22:4, col:37>
        |   `-ConditionalOperator 0x127142268 <col:11, col:37> '<dependent type>' contains-errors
        |     |-RecoveryExpr 0x1271421b8 <col:11> '<dependent type>' contains-errors lvalue
        |     |-CallExpr 0x127142240 <col:16, col:33> '<dependent type>' contains-errors
        |     | |-DeclRefExpr 0x1271420c8 <col:16> 'int ()' Function 0x127142010 'ZSTR_VAL' 'int ()'
        |     | `-CXXDependentScopeMemberExpr 0x1271421f8 <col:25, col:29> '<dependent type>' contains-errors lvalue ->name
        |     |   `-RecoveryExpr 0x1271421d8 <col:25> '<dependent type>' contains-errors lvalue
        |     `-StringLiteral 0x127142170 <col:37> 'char[1]' lvalue ""
        |-DefaultStmt 0x1271423f0 <line:24:3, line:27:4>
        | `-IfStmt 0x1271423d0 <line:25:4, line:27:4>
        |   |-ImplicitCastExpr 0x1271422e8 <line:25:8> 'const char **' <LValueToRValue>
        |   | `-DeclRefExpr 0x1271422c8 <col:8> 'const char **' lvalue ParmVar 0x127128128 'space' 'const char **'
        |   `-CompoundStmt 0x1271423b8 <col:15, line:27:4>
        |     `-BinaryOperator 0x127142398 <line:26:5, col:14> 'const char *' '='
        |       |-UnaryOperator 0x127142338 <col:5, col:6> 'const char *' lvalue prefix '*' cannot overflow
        |       | `-ImplicitCastExpr 0x127142320 <col:6> 'const char **' <LValueToRValue>
        |       |   `-DeclRefExpr 0x127142300 <col:6> 'const char **' lvalue ParmVar 0x127128128 'space' 'const char **'
        |       `-ImplicitCastExpr 0x127142380 <col:14> 'const char *' <NoOp>
        |         `-ImplicitCastExpr 0x127142368 <col:14> 'char *' <ArrayToPointerDecay>
        |           `-StringLiteral 0x127142350 <col:14> 'char[1]' lvalue ""
        `-ReturnStmt 0x127142458 <line:28:4, col:11>
          `-ImplicitCastExpr 0x127142440 <col:11> 'const int *' <BitCast>
            `-ImplicitCastExpr 0x127142428 <col:11> 'char *' <ArrayToPointerDecay>
              `-StringLiteral 0x127142410 <col:11> 'char[1]' lvalue ""
