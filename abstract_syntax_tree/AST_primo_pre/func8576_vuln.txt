`-FunctionDecl 0x13511dba8  line:1:20 skip 'const char *(const char *)' static
  |-ParmVarDecl 0x13511dad8 <col:26, col:38> col:38 used in 'const char *'
  `-CompoundStmt 0x13511df38 <line:2:1, line:6:1>
    |-WhileStmt 0x13511ded0 <line:3:2, line:4:5>
    | |-BinaryOperator 0x13511de78 <line:3:10, col:46> 'int' '&&'
    | | |-BinaryOperator 0x13511dd58 <col:10, col:17> 'int' '&&'
    | | | |-ImplicitCastExpr 0x13511dd10 <col:10> 'const char *' <LValueToRValue>
    | | | | `-DeclRefExpr 0x13511dca0 <col:10> 'const char *' lvalue ParmVar 0x13511dad8 'in' 'const char *'
    | | | `-ImplicitCastExpr 0x13511dd40 <col:16, col:17> 'int' <IntegralCast>
    | | |   `-ImplicitCastExpr 0x13511dd28 <col:16, col:17> 'char' <LValueToRValue>
    | | |     `-UnaryOperator 0x13511dcf8 <col:16, col:17> 'const char' lvalue prefix '*' cannot overflow
    | | |       `-ImplicitCastExpr 0x13511dce0 <col:17> 'const char *' <LValueToRValue>
    | | |         `-DeclRefExpr 0x13511dcc0 <col:17> 'const char *' lvalue ParmVar 0x13511dad8 'in' 'const char *'
    | | `-BinaryOperator 0x13511de58 <col:23, col:46> 'int' '<='
    | |   |-ImplicitCastExpr 0x13511de40 <col:23, col:40> 'int' <IntegralCast>
    | |   | `-CStyleCastExpr 0x13511ddf8 <col:23, col:40> 'unsigned char' <IntegralCast>
    | |   |   `-ImplicitCastExpr 0x13511dde0 <col:39, col:40> 'char' <LValueToRValue> part_of_explicit_cast
    | |   |     `-UnaryOperator 0x13511ddb0 <col:39, col:40> 'const char' lvalue prefix '*' cannot overflow
    | |   |       `-ImplicitCastExpr 0x13511dd98 <col:40> 'const char *' <LValueToRValue>
    | |   |         `-DeclRefExpr 0x13511dd78 <col:40> 'const char *' lvalue ParmVar 0x13511dad8 'in' 'const char *'
    | |   `-IntegerLiteral 0x13511de20 <col:46> 'int' 32
    | `-UnaryOperator 0x13511deb8 <line:4:3, col:5> 'const char *' postfix '++'
    |   `-DeclRefExpr 0x13511de98 <col:3> 'const char *' lvalue ParmVar 0x13511dad8 'in' 'const char *'
    `-ReturnStmt 0x13511df28 <line:5:2, col:9>
      `-ImplicitCastExpr 0x13511df10 <col:9> 'const char *' <LValueToRValue>
        `-DeclRefExpr 0x13511def0 <col:9> 'const char *' lvalue ParmVar 0x13511dad8 'in' 'const char *'
