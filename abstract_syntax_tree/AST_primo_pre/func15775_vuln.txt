`-FunctionDecl 0x14a80a438  line:1:11 skipSpaces 'char *(char *, int)'
  |-ParmVarDecl 0x14a80a2d8 <col:23, col:29> col:29 used ptr 'char *'
  |-ParmVarDecl 0x14a80a358 <col:34, col:38> col:38 used mode 'int'
  `-CompoundStmt 0x14b00ac00 <line:2:5, line:60:5>
    |-DeclStmt 0x14a80a5d8 <line:3:9, col:22>
    | `-VarDecl 0x14a80a550 <col:9, col:21> col:13 used level 'int' cinit
    |   `-IntegerLiteral 0x14a80a5b8 <col:21> 'int' 0
    |-ForStmt 0x14a823f78 <line:5:9, line:58:9>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | `-CompoundStmt 0x14a823f48 <line:6:9, line:58:9>
    |   |-DeclStmt 0x14a80a668 <line:7:13, col:19>
    |   | `-VarDecl 0x14a80a600 <col:13, col:18> col:18 used c 'char'
    |   |-UnaryOperator 0x14a80a6a0 <line:8:13, col:16> 'char *' postfix '--'
    |   | `-DeclRefExpr 0x14a80a680 <col:13> 'char *' lvalue ParmVar 0x14a80a2d8 'ptr' 'char *'
    |   |-IfStmt 0x14a823800 <line:10:13, line:48:13> has_else
    |   | |-BinaryOperator 0x14a80a748 <line:10:17, col:25> 'int' contains-errors '=='
    |   | | |-DeclRefExpr 0x14a80a6b8 <col:17> 'int' lvalue ParmVar 0x14a80a358 'mode' 'int'
    |   | | `-RecoveryExpr 0x14a80a728 <col:25> '<dependent type>' contains-errors lvalue
    |   | |-CompoundStmt 0x14b0097a8 <line:11:13, line:21:13>
    |   | | |-DoStmt 0x14b0092c8 <line:12:17, line:13:93>
    |   | | | |-BinaryOperator 0x14a80a7f0 <line:12:20, col:27> 'char' '='
    |   | | | | |-DeclRefExpr 0x14a80a768 <col:20> 'char' lvalue Var 0x14a80a600 'c' 'char'
    |   | | | | `-ImplicitCastExpr 0x14a80a7d8 <col:24, col:27> 'char' <LValueToRValue>
    |   | | | |   `-UnaryOperator 0x14a80a7c0 <col:24, col:27> 'char' lvalue prefix '*' cannot overflow
    |   | | | |     `-UnaryOperator 0x14a80a7a8 <col:25, col:27> 'char *' prefix '++'
    |   | | | |       `-DeclRefExpr 0x14a80a788 <col:27> 'char *' lvalue ParmVar 0x14a80a2d8 'ptr' 'char *'
    |   | | | `-BinaryOperator 0x14b0092a8 <line:13:24, col:91> 'int' '&&'
    |   | | |   |-CallExpr 0x14a80a9a8 <col:24, col:43> 'int'
    |   | | |   | |-ImplicitCastExpr 0x14a80a990 <col:24> 'int (*)()' <FunctionToPointerDecay>
    |   | | |   | | `-DeclRefExpr 0x14a80a920 <col:24> 'int ()' Function 0x14a80a868 'cv_isprint_or_tab' 'int ()'
    |   | | |   | `-ImplicitCastExpr 0x14a80a9e8 <col:42> 'int' <IntegralCast>
    |   | | |   |   `-ImplicitCastExpr 0x14a80a9d0 <col:42> 'char' <LValueToRValue>
    |   | | |   |     `-DeclRefExpr 0x14a80a940 <col:42> 'char' lvalue Var 0x14a80a600 'c' 'char'
    |   | | |   `-ParenExpr 0x14b009288 <col:48, col:91> 'int'
    |   | | |     `-BinaryOperator 0x14b009268 <col:49, col:88> 'int' '||'
    |   | | |       |-BinaryOperator 0x14b009168 <col:49, col:71> 'int' '||'
    |   | | |       | |-BinaryOperator 0x14b009068 <col:49, col:54> 'int' '!='
    |   | | |       | | |-ImplicitCastExpr 0x14b009050 <col:49> 'int' <IntegralCast>
    |   | | |       | | | `-ImplicitCastExpr 0x14b009038 <col:49> 'char' <LValueToRValue>
    |   | | |       | | |   `-DeclRefExpr 0x14b009000 <col:49> 'char' lvalue Var 0x14a80a600 'c' 'char'
    |   | | |       | | `-CharacterLiteral 0x14b009020 <col:54> 'int' 45
    |   | | |       | `-BinaryOperator 0x14b009148 <col:61, col:71> 'int' '!='
    |   | | |       |   |-ImplicitCastExpr 0x14b009130 <col:61, col:66> 'int' <IntegralCast>
    |   | | |       |   | `-ImplicitCastExpr 0x14b009118 <col:61, col:66> 'char' <LValueToRValue>
    |   | | |       |   |   `-ArraySubscriptExpr 0x14b0090e0 <col:61, col:66> 'char' lvalue
    |   | | |       |   |     |-ImplicitCastExpr 0x14b0090c8 <col:61> 'char *' <LValueToRValue>
    |   | | |       |   |     | `-DeclRefExpr 0x14b009088 <col:61> 'char *' lvalue ParmVar 0x14a80a2d8 'ptr' 'char *'
    |   | | |       |   |     `-IntegerLiteral 0x14b0090a8 <col:65> 'int' 1
    |   | | |       |   `-CharacterLiteral 0x14b009100 <col:71> 'int' 45
    |   | | |       `-BinaryOperator 0x14b009248 <col:78, col:88> 'int' '!='
    |   | | |         |-ImplicitCastExpr 0x14b009230 <col:78, col:83> 'int' <IntegralCast>
    |   | | |         | `-ImplicitCastExpr 0x14b009218 <col:78, col:83> 'char' <LValueToRValue>
    |   | | |         |   `-ArraySubscriptExpr 0x14b0091e0 <col:78, col:83> 'char' lvalue
    |   | | |         |     |-ImplicitCastExpr 0x14b0091c8 <col:78> 'char *' <LValueToRValue>
    |   | | |         |     | `-DeclRefExpr 0x14b009188 <col:78> 'char *' lvalue ParmVar 0x14a80a2d8 'ptr' 'char *'
    |   | | |         |     `-IntegerLiteral 0x14b0091a8 <col:82> 'int' 2
    |   | | |         `-CharacterLiteral 0x14b009200 <col:88> 'int' 62
    |   | | `-IfStmt 0x14b009788 <line:15:17, line:20:17>
    |   | |   |-BinaryOperator 0x14b009350 <line:15:21, col:26> 'int' '=='
    |   | |   | |-ImplicitCastExpr 0x14b009338 <col:21> 'int' <IntegralCast>
    |   | |   | | `-ImplicitCastExpr 0x14b009320 <col:21> 'char' <LValueToRValue>
    |   | |   | |   `-DeclRefExpr 0x14b0092e8 <col:21> 'char' lvalue Var 0x14a80a600 'c' 'char'
    |   | |   | `-CharacterLiteral 0x14b009308 <col:26> 'int' 45
    |   | |   `-CompoundStmt 0x14b009760 <line:16:17, line:20:17>
    |   | |     |-CallExpr 0x14b009668 <line:17:21, col:60> 'int'
    |   | |     | |-ImplicitCastExpr 0x14b009650 <col:21> 'int (*)()' <FunctionToPointerDecay>
    |   | |     | | `-DeclRefExpr 0x14b009450 <col:21> 'int ()' Function 0x14b009398 'assert' 'int ()'
    |   | |     | `-BinaryOperator 0x14b009630 <col:29, col:56> 'int' '&&'
    |   | |     |   |-BinaryOperator 0x14b009530 <col:29, col:39> 'int' '=='
    |   | |     |   | |-ImplicitCastExpr 0x14b009518 <col:29, col:34> 'int' <IntegralCast>
    |   | |     |   | | `-ImplicitCastExpr 0x14b009500 <col:29, col:34> 'char' <LValueToRValue>
    |   | |     |   | |   `-ArraySubscriptExpr 0x14b0094c8 <col:29, col:34> 'char' lvalue
    |   | |     |   | |     |-ImplicitCastExpr 0x14b0094b0 <col:29> 'char *' <LValueToRValue>
    |   | |     |   | |     | `-DeclRefExpr 0x14b009470 <col:29> 'char *' lvalue ParmVar 0x14a80a2d8 'ptr' 'char *'
    |   | |     |   | |     `-IntegerLiteral 0x14b009490 <col:33> 'int' 1
    |   | |     |   | `-CharacterLiteral 0x14b0094e8 <col:39> 'int' 45
    |   | |     |   `-BinaryOperator 0x14b009610 <col:46, col:56> 'int' '=='
    |   | |     |     |-ImplicitCastExpr 0x14b0095f8 <col:46, col:51> 'int' <IntegralCast>
    |   | |     |     | `-ImplicitCastExpr 0x14b0095e0 <col:46, col:51> 'char' <LValueToRValue>
    |   | |     |     |   `-ArraySubscriptExpr 0x14b0095a8 <col:46, col:51> 'char' lvalue
    |   | |     |     |     |-ImplicitCastExpr 0x14b009590 <col:46> 'char *' <LValueToRValue>
    |   | |     |     |     | `-DeclRefExpr 0x14b009550 <col:46> 'char *' lvalue ParmVar 0x14a80a2d8 'ptr' 'char *'
    |   | |     |     |     `-IntegerLiteral 0x14b009570 <col:50> 'int' 2
    |   | |     |     `-CharacterLiteral 0x14b0095c8 <col:56> 'int' 62
    |   | |     |-BinaryOperator 0x14b0096d0 <line:18:21, col:28> 'int' '='
    |   | |     | |-DeclRefExpr 0x14b009690 <col:21> 'int' lvalue ParmVar 0x14a80a358 'mode' 'int'
    |   | |     | `-IntegerLiteral 0x14b0096b0 <col:28> 'int' 0
    |   | |     `-CompoundAssignOperator 0x14b009730 <line:19:21, col:28> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
    |   | |       |-DeclRefExpr 0x14b0096f0 <col:21> 'char *' lvalue ParmVar 0x14a80a2d8 'ptr' 'char *'
    |   | |       `-IntegerLiteral 0x14b009710 <col:28> 'int' 3
    |   | `-IfStmt 0x14a8237d0 <line:22:18, line:48:13> has_else
    |   |   |-BinaryOperator 0x14b009840 <line:22:22, col:30> 'int' contains-errors '=='
    |   |   | |-DeclRefExpr 0x14b0097c8 <col:22> 'int' lvalue ParmVar 0x14a80a358 'mode' 'int'
    |   |   | `-RecoveryExpr 0x14b009820 <col:30> '<dependent type>' contains-errors lvalue
    |   |   |-CompoundStmt 0x14b009c98 <line:23:13, line:33:13>
    |   |   | `-DoStmt 0x14b009c78 <line:25:17, line:32:47>
    |   |   |   |-CompoundStmt 0x14b009b98 <line:26:17, line:32:17>
    |   |   |   | |-BinaryOperator 0x14b0098e8 <line:27:21, col:28> 'char' '='
    |   |   |   | | |-DeclRefExpr 0x14b009860 <col:21> 'char' lvalue Var 0x14a80a600 'c' 'char'
    |   |   |   | | `-ImplicitCastExpr 0x14b0098d0 <col:25, col:28> 'char' <LValueToRValue>
    |   |   |   | |   `-UnaryOperator 0x14b0098b8 <col:25, col:28> 'char' lvalue prefix '*' cannot overflow
    |   |   |   | |     `-UnaryOperator 0x14b0098a0 <col:26, col:28> 'char *' prefix '++'
    |   |   |   | |       `-DeclRefExpr 0x14b009880 <col:28> 'char *' lvalue ParmVar 0x14a80a2d8 'ptr' 'char *'
    |   |   |   | |-CompoundAssignOperator 0x14b0099b0 <line:28:21, col:35> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |   |   |   | | |-DeclRefExpr 0x14b009908 <col:21> 'int' lvalue Var 0x14a80a550 'level' 'int'
    |   |   |   | | `-BinaryOperator 0x14b009990 <col:30, col:35> 'int' '=='
    |   |   |   | |   |-ImplicitCastExpr 0x14b009978 <col:30> 'int' <IntegralCast>
    |   |   |   | |   | `-ImplicitCastExpr 0x14b009960 <col:30> 'char' <LValueToRValue>
    |   |   |   | |   |   `-DeclRefExpr 0x14b009928 <col:30> 'char' lvalue Var 0x14a80a600 'c' 'char'
    |   |   |   | |   `-CharacterLiteral 0x14b009948 <col:35> 'int' 60
    |   |   |   | |-CompoundAssignOperator 0x14b009a88 <line:29:21, col:35> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
    |   |   |   | | |-DeclRefExpr 0x14b0099e0 <col:21> 'int' lvalue Var 0x14a80a550 'level' 'int'
    |   |   |   | | `-BinaryOperator 0x14b009a68 <col:30, col:35> 'int' '=='
    |   |   |   | |   |-ImplicitCastExpr 0x14b009a50 <col:30> 'int' <IntegralCast>
    |   |   |   | |   | `-ImplicitCastExpr 0x14b009a38 <col:30> 'char' <LValueToRValue>
    |   |   |   | |   |   `-DeclRefExpr 0x14b009a00 <col:30> 'char' lvalue Var 0x14a80a600 'c' 'char'
    |   |   |   | |   `-CharacterLiteral 0x14b009a20 <col:35> 'int' 62
    |   |   |   | `-IfStmt 0x14b009b78 <line:30:21, line:31:32>
    |   |   |   |   |-BinaryOperator 0x14b009b10 <line:30:25, col:33> 'int' '<'
    |   |   |   |   | |-ImplicitCastExpr 0x14b009af8 <col:25> 'int' <LValueToRValue>
    |   |   |   |   | | `-DeclRefExpr 0x14b009ab8 <col:25> 'int' lvalue Var 0x14a80a550 'level' 'int'
    |   |   |   |   | `-IntegerLiteral 0x14b009ad8 <col:33> 'int' 0
    |   |   |   |   `-ReturnStmt 0x14b009b68 <line:31:25, col:32>
    |   |   |   |     `-ImplicitCastExpr 0x14b009b50 <col:32> 'char *' <LValueToRValue>
    |   |   |   |       `-DeclRefExpr 0x14b009b30 <col:32> 'char *' lvalue ParmVar 0x14a80a2d8 'ptr' 'char *'
    |   |   |   `-CallExpr 0x14b009c20 <line:32:26, col:45> 'int'
    |   |   |     |-ImplicitCastExpr 0x14b009c08 <col:26> 'int (*)()' <FunctionToPointerDecay>
    |   |   |     | `-DeclRefExpr 0x14b009bc8 <col:26> 'int ()' Function 0x14a80a868 'cv_isprint_or_tab' 'int ()'
    |   |   |     `-ImplicitCastExpr 0x14b009c60 <col:44> 'int' <IntegralCast>
    |   |   |       `-ImplicitCastExpr 0x14b009c48 <col:44> 'char' <LValueToRValue>
    |   |   |         `-DeclRefExpr 0x14b009be8 <col:44> 'char' lvalue Var 0x14a80a600 'c' 'char'
    |   |   `-CompoundStmt 0x14a8237b0 <line:35:13, line:48:13>
    |   |     |-DoStmt 0x14b009e88 <line:36:17, line:37:46>
    |   |     | |-BinaryOperator 0x14b009d38 <line:36:20, col:27> 'char' '='
    |   |     | | |-DeclRefExpr 0x14b009cb0 <col:20> 'char' lvalue Var 0x14a80a600 'c' 'char'
    |   |     | | `-ImplicitCastExpr 0x14b009d20 <col:24, col:27> 'char' <LValueToRValue>
    |   |     | |   `-UnaryOperator 0x14b009d08 <col:24, col:27> 'char' lvalue prefix '*' cannot overflow
    |   |     | |     `-UnaryOperator 0x14b009cf0 <col:25, col:27> 'char *' prefix '++'
    |   |     | |       `-DeclRefExpr 0x14b009cd0 <col:27> 'char *' lvalue ParmVar 0x14a80a2d8 'ptr' 'char *'
    |   |     | `-BinaryOperator 0x14b009e68 <line:37:24, col:41> 'int' '||'
    |   |     |   |-BinaryOperator 0x14b009dc0 <col:24, col:29> 'int' '=='
    |   |     |   | |-ImplicitCastExpr 0x14b009da8 <col:24> 'int' <IntegralCast>
    |   |     |   | | `-ImplicitCastExpr 0x14b009d90 <col:24> 'char' <LValueToRValue>
    |   |     |   | |   `-DeclRefExpr 0x14b009d58 <col:24> 'char' lvalue Var 0x14a80a600 'c' 'char'
    |   |     |   | `-CharacterLiteral 0x14b009d78 <col:29> 'int' 32
    |   |     |   `-BinaryOperator 0x14b009e48 <col:36, col:41> 'int' '=='
    |   |     |     |-ImplicitCastExpr 0x14b009e30 <col:36> 'int' <IntegralCast>
    |   |     |     | `-ImplicitCastExpr 0x14b009e18 <col:36> 'char' <LValueToRValue>
    |   |     |     |   `-DeclRefExpr 0x14b009de0 <col:36> 'char' lvalue Var 0x14a80a600 'c' 'char'
    |   |     |     `-CharacterLiteral 0x14b009e00 <col:41> 'int' 9
    |   |     `-IfStmt 0x14a823780 <line:39:17, line:47:21> has_else
    |   |       |-BinaryOperator 0x14a823220 <line:39:21, col:77> 'int' '&&'
    |   |       | |-BinaryOperator 0x14a823120 <col:21, col:60> 'int' '&&'
    |   |       | | |-BinaryOperator 0x14a823020 <col:21, col:43> 'int' '&&'
    |   |       | | | |-BinaryOperator 0x14b009f10 <col:21, col:26> 'int' '=='
    |   |       | | | | |-ImplicitCastExpr 0x14b009ef8 <col:21> 'int' <IntegralCast>
    |   |       | | | | | `-ImplicitCastExpr 0x14b009ee0 <col:21> 'char' <LValueToRValue>
    |   |       | | | | |   `-DeclRefExpr 0x14b009ea8 <col:21> 'char' lvalue Var 0x14a80a600 'c' 'char'
    |   |       | | | | `-CharacterLiteral 0x14b009ec8 <col:26> 'int' 60
    |   |       | | | `-BinaryOperator 0x14a823000 <col:33, col:43> 'int' '=='
    |   |       | | |   |-ImplicitCastExpr 0x14b009fd8 <col:33, col:38> 'int' <IntegralCast>
    |   |       | | |   | `-ImplicitCastExpr 0x14b009fc0 <col:33, col:38> 'char' <LValueToRValue>
    |   |       | | |   |   `-ArraySubscriptExpr 0x14b009f88 <col:33, col:38> 'char' lvalue
    |   |       | | |   |     |-ImplicitCastExpr 0x14b009f70 <col:33> 'char *' <LValueToRValue>
    |   |       | | |   |     | `-DeclRefExpr 0x14b009f30 <col:33> 'char *' lvalue ParmVar 0x14a80a2d8 'ptr' 'char *'
    |   |       | | |   |     `-IntegerLiteral 0x14b009f50 <col:37> 'int' 1
    |   |       | | |   `-CharacterLiteral 0x14b009fa8 <col:43> 'int' 33
    |   |       | | `-BinaryOperator 0x14a823100 <col:50, col:60> 'int' '=='
    |   |       | |   |-ImplicitCastExpr 0x14a8230e8 <col:50, col:55> 'int' <IntegralCast>
    |   |       | |   | `-ImplicitCastExpr 0x14a8230d0 <col:50, col:55> 'char' <LValueToRValue>
    |   |       | |   |   `-ArraySubscriptExpr 0x14a823098 <col:50, col:55> 'char' lvalue
    |   |       | |   |     |-ImplicitCastExpr 0x14a823080 <col:50> 'char *' <LValueToRValue>
    |   |       | |   |     | `-DeclRefExpr 0x14a823040 <col:50> 'char *' lvalue ParmVar 0x14a80a2d8 'ptr' 'char *'
    |   |       | |   |     `-IntegerLiteral 0x14a823060 <col:54> 'int' 2
    |   |       | |   `-CharacterLiteral 0x14a8230b8 <col:60> 'int' 45
    |   |       | `-BinaryOperator 0x14a823200 <col:67, col:77> 'int' '=='
    |   |       |   |-ImplicitCastExpr 0x14a8231e8 <col:67, col:72> 'int' <IntegralCast>
    |   |       |   | `-ImplicitCastExpr 0x14a8231d0 <col:67, col:72> 'char' <LValueToRValue>
    |   |       |   |   `-ArraySubscriptExpr 0x14a823198 <col:67, col:72> 'char' lvalue
    |   |       |   |     |-ImplicitCastExpr 0x14a823180 <col:67> 'char *' <LValueToRValue>
    |   |       |   |     | `-DeclRefExpr 0x14a823140 <col:67> 'char *' lvalue ParmVar 0x14a80a2d8 'ptr' 'char *'
    |   |       |   |     `-IntegerLiteral 0x14a823160 <col:71> 'int' 3
    |   |       |   `-CharacterLiteral 0x14a8231b8 <col:77> 'int' 45
    |   |       |-CompoundStmt 0x14a8235a0 <line:40:17, line:45:17>
    |   |       | |-IfStmt 0x14a823478 <line:41:21, line:42:51>
    |   |       | | |-BinaryOperator 0x14a823298 <line:41:25, col:33> 'int' '!='
    |   |       | | | |-ImplicitCastExpr 0x14a823280 <col:25> 'int' <LValueToRValue>
    |   |       | | | | `-DeclRefExpr 0x14a823240 <col:25> 'int' lvalue ParmVar 0x14a80a358 'mode' 'int'
    |   |       | | | `-IntegerLiteral 0x14a823260 <col:33> 'int' 0
    |   |       | | `-CallExpr 0x14a823438 <line:42:25, col:51> 'int'
    |   |       | |   |-ImplicitCastExpr 0x14a823420 <col:25> 'int (*)()' <FunctionToPointerDecay>
    |   |       | |   | `-DeclRefExpr 0x14a823398 <col:25> 'int ()' Function 0x14a8232e0 'CV_PARSE_ERROR_CPP' 'int ()'
    |   |       | |   `-ImplicitCastExpr 0x14a823460 <col:45> 'char *' <ArrayToPointerDecay>
    |   |       | |     `-StringLiteral 0x14a823400 <col:45> 'char[4]' lvalue "STR"
    |   |       | |-BinaryOperator 0x14a823510 <line:43:21, col:28> 'int' contains-errors '='
    |   |       | | |-DeclRefExpr 0x14a823498 <col:21> 'int' lvalue ParmVar 0x14a80a358 'mode' 'int'
    |   |       | | `-RecoveryExpr 0x14a8234f0 <col:28> '<dependent type>' contains-errors lvalue
    |   |       | `-CompoundAssignOperator 0x14a823570 <line:44:21, col:28> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
    |   |       |   |-DeclRefExpr 0x14a823530 <col:21> 'char *' lvalue ParmVar 0x14a80a2d8 'ptr' 'char *'
    |   |       |   `-IntegerLiteral 0x14a823550 <col:28> 'int' 4
    |   |       `-IfStmt 0x14a823760 <line:46:22, line:47:21>
    |   |         |-CallExpr 0x14a823700 <line:46:26, col:38> 'int'
    |   |         | |-ImplicitCastExpr 0x14a8236e8 <col:26> 'int (*)()' <FunctionToPointerDecay>
    |   |         | | `-DeclRefExpr 0x14a8236a8 <col:26> 'int ()' Function 0x14a8235f0 'cv_isprint' 'int ()'
    |   |         | `-ImplicitCastExpr 0x14a823740 <col:37> 'int' <IntegralCast>
    |   |         |   `-ImplicitCastExpr 0x14a823728 <col:37> 'char' <LValueToRValue>
    |   |         |     `-DeclRefExpr 0x14a8236c8 <col:37> 'char' lvalue Var 0x14a80a600 'c' 'char'
    |   |         `-BreakStmt 0x14a823758 <line:47:21>
    |   `-IfStmt 0x14a823f28 <line:50:13, line:57:13>
    |     |-UnaryOperator 0x14a823910 <line:50:17, col:33> 'int' prefix '!' cannot overflow
    |     | `-CallExpr 0x14a8238b8 <col:18, col:33> 'int'
    |     |   |-ImplicitCastExpr 0x14a8238a0 <col:18> 'int (*)()' <FunctionToPointerDecay>
    |     |   | `-DeclRefExpr 0x14a823830 <col:18> 'int ()' Function 0x14a8235f0 'cv_isprint' 'int ()'
    |     |   `-ImplicitCastExpr 0x14a8238f8 <col:29, col:30> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x14a8238e0 <col:29, col:30> 'char' <LValueToRValue>
    |     |       `-UnaryOperator 0x14a823888 <col:29, col:30> 'char' lvalue prefix '*' cannot overflow
    |     |         `-ImplicitCastExpr 0x14a823870 <col:30> 'char *' <LValueToRValue>
    |     |           `-DeclRefExpr 0x14a823850 <col:30> 'char *' lvalue ParmVar 0x14a80a2d8 'ptr' 'char *'
    |     `-CompoundStmt 0x14a823f00 <line:51:13, line:57:13>
    |       |-IfStmt 0x14a823c28 <line:52:17, line:53:47>
    |       | |-BinaryOperator 0x14a823b70 <line:52:21, col:61> 'int' '&&'
    |       | | |-BinaryOperator 0x14a823a98 <col:21, col:45> 'int' '&&'
    |       | | | |-BinaryOperator 0x14a8239c0 <col:21, col:29> 'int' '!='
    |       | | | | |-ImplicitCastExpr 0x14a8239a8 <col:21, col:22> 'int' <IntegralCast>
    |       | | | | | `-ImplicitCastExpr 0x14a823990 <col:21, col:22> 'char' <LValueToRValue>
    |       | | | | |   `-UnaryOperator 0x14a823960 <col:21, col:22> 'char' lvalue prefix '*' cannot overflow
    |       | | | | |     `-ImplicitCastExpr 0x14a823948 <col:22> 'char *' <LValueToRValue>
    |       | | | | |       `-DeclRefExpr 0x14a823928 <col:22> 'char *' lvalue ParmVar 0x14a80a2d8 'ptr' 'char *'
    |       | | | | `-CharacterLiteral 0x14a823978 <col:29> 'int' 0
    |       | | | `-BinaryOperator 0x14a823a78 <col:37, col:45> 'int' '!='
    |       | | |   |-ImplicitCastExpr 0x14a823a60 <col:37, col:38> 'int' <IntegralCast>
    |       | | |   | `-ImplicitCastExpr 0x14a823a48 <col:37, col:38> 'char' <LValueToRValue>
    |       | | |   |   `-UnaryOperator 0x14a823a18 <col:37, col:38> 'char' lvalue prefix '*' cannot overflow
    |       | | |   |     `-ImplicitCastExpr 0x14a823a00 <col:38> 'char *' <LValueToRValue>
    |       | | |   |       `-DeclRefExpr 0x14a8239e0 <col:38> 'char *' lvalue ParmVar 0x14a80a2d8 'ptr' 'char *'
    |       | | |   `-CharacterLiteral 0x14a823a30 <col:45> 'int' 10
    |       | | `-BinaryOperator 0x14a823b50 <col:53, col:61> 'int' '!='
    |       | |   |-ImplicitCastExpr 0x14a823b38 <col:53, col:54> 'int' <IntegralCast>
    |       | |   | `-ImplicitCastExpr 0x14a823b20 <col:53, col:54> 'char' <LValueToRValue>
    |       | |   |   `-UnaryOperator 0x14a823af0 <col:53, col:54> 'char' lvalue prefix '*' cannot overflow
    |       | |   |     `-ImplicitCastExpr 0x14a823ad8 <col:54> 'char *' <LValueToRValue>
    |       | |   |       `-DeclRefExpr 0x14a823ab8 <col:54> 'char *' lvalue ParmVar 0x14a80a2d8 'ptr' 'char *'
    |       | |   `-CharacterLiteral 0x14a823b08 <col:61> 'int' 13
    |       | `-CallExpr 0x14a823be8 <line:53:21, col:47> 'int'
    |       |   |-ImplicitCastExpr 0x14a823bd0 <col:21> 'int (*)()' <FunctionToPointerDecay>
    |       |   | `-DeclRefExpr 0x14a823b90 <col:21> 'int ()' Function 0x14a8232e0 'CV_PARSE_ERROR_CPP' 'int ()'
    |       |   `-ImplicitCastExpr 0x14a823c10 <col:41> 'char *' <ArrayToPointerDecay>
    |       |     `-StringLiteral 0x14a823bb0 <col:41> 'char[4]' lvalue "STR"
    |       |-BinaryOperator 0x14a823d90 <line:54:17, col:32> 'char *' contains-errors '='
    |       | |-DeclRefExpr 0x14a823c48 <col:17> 'char *' lvalue ParmVar 0x14a80a2d8 'ptr' 'char *'
    |       | `-CallExpr 0x14a823d70 <col:23, col:32> '<dependent type>' contains-errors
    |       |   `-CXXDependentScopeMemberExpr 0x14a823d28 <col:23, col:27> '<dependent type>' contains-errors lvalue ->gets
    |       |     `-RecoveryExpr 0x14a823d08 <col:23> '<dependent type>' contains-errors lvalue
    |       `-IfStmt 0x14a823ee0 <line:55:17, line:56:21>
    |         |-BinaryOperator 0x14a823eb8 <line:55:21, col:37> 'int' '||'
    |         | |-UnaryOperator 0x14a823de8 <col:21, col:22> 'int' prefix '!' cannot overflow
    |         | | `-ImplicitCastExpr 0x14a823dd0 <col:22> 'char *' <LValueToRValue>
    |         | |   `-DeclRefExpr 0x14a823db0 <col:22> 'char *' lvalue ParmVar 0x14a80a2d8 'ptr' 'char *'
    |         | `-BinaryOperator 0x14a823e98 <col:29, col:37> 'int' '=='
    |         |   |-ImplicitCastExpr 0x14a823e80 <col:29, col:30> 'int' <IntegralCast>
    |         |   | `-ImplicitCastExpr 0x14a823e68 <col:29, col:30> 'char' <LValueToRValue>
    |         |   |   `-UnaryOperator 0x14a823e38 <col:29, col:30> 'char' lvalue prefix '*' cannot overflow
    |         |   |     `-ImplicitCastExpr 0x14a823e20 <col:30> 'char *' <LValueToRValue>
    |         |   |       `-DeclRefExpr 0x14a823e00 <col:30> 'char *' lvalue ParmVar 0x14a80a2d8 'ptr' 'char *'
    |         |   `-CharacterLiteral 0x14a823e50 <col:37> 'int' 0
    |         `-BreakStmt 0x14a823ed8 <line:56:21>
    `-ReturnStmt 0x14a823fe8 <line:59:9, col:16>
      `-ImplicitCastExpr 0x14a823fd0 <col:16> 'char *' <LValueToRValue>
        `-DeclRefExpr 0x14a823fb0 <col:16> 'char *' lvalue ParmVar 0x14a80a2d8 'ptr' 'char *'
