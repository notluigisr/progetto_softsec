`-FunctionDecl 0x1201281c8  line:1:1 create_worker_threads 'int (int)'
  |-ParmVarDecl 0x1201280f0 <col:23, col:28> col:28 used n 'int'
  `-CompoundStmt 0x1201416a0 <line:2:1, line:57:1>
    |-DeclStmt 0x120128358 <line:4:2, col:11>
    | `-VarDecl 0x1201282f0 <col:2, col:10> col:10 used i 'int'
    |-ForStmt 0x120141190 <line:9:2, line:41:2>
    | |-BinaryOperator 0x1201283c8 <line:9:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x120128388 <col:7> 'int' lvalue Var 0x1201282f0 'i' 'int'
    | | `-IntegerLiteral 0x1201283a8 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x120128458 <col:14, col:18> 'int' '<'
    | | |-ImplicitCastExpr 0x120128428 <col:14> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1201283e8 <col:14> 'int' lvalue Var 0x1201282f0 'i' 'int'
    | | `-ImplicitCastExpr 0x120128440 <col:18> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x120128408 <col:18> 'int' lvalue ParmVar 0x1201280f0 'n' 'int'
    | |-UnaryOperator 0x120128498 <col:21, col:22> 'int' postfix '++'
    | | `-DeclRefExpr 0x120128478 <col:21> 'int' lvalue Var 0x1201282f0 'i' 'int'
    | `-CompoundStmt 0x120141168 <col:26, line:41:2>
    |   |-IfStmt 0x120140cc0 <line:22:3, line:25:3>
    |   | |-RecoveryExpr 0x120140c20 <line:22:7, line:23:46> '_Bool' contains-errors
    |   | `-CompoundStmt 0x120140ca8 <col:49, line:25:3>
    |   |   `-GotoStmt 0x120140c90 <line:24:4, col:9> 'err' 0x120140c40
    |   |-IfStmt 0x120140d70 <line:28:3, line:31:3>
    |   | |-RecoveryExpr 0x120140d20 <line:28:7, line:29:46> '_Bool' contains-errors
    |   | `-CompoundStmt 0x120140d58 <col:49, line:31:3>
    |   |   `-GotoStmt 0x120140d40 <line:30:4, col:9> 'err' 0x120140c40
    |   `-IfStmt 0x120141148 <line:35:3, line:40:3>
    |     |-RecoveryExpr 0x120140f90 <line:35:7, line:36:11> '_Bool' contains-errors
    |     `-CompoundStmt 0x120141130 <col:14, line:40:3>
    |       `-GotoStmt 0x120141118 <line:39:4, col:9> 'err' 0x120140c40
    |-ForStmt 0x120141540 <line:44:2, line:50:2>
    | |-BinaryOperator 0x120141208 <line:44:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x1201411c8 <col:7> 'int' lvalue Var 0x1201282f0 'i' 'int'
    | | `-IntegerLiteral 0x1201411e8 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x120141298 <col:14, col:18> 'int' '<'
    | | |-ImplicitCastExpr 0x120141268 <col:14> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x120141228 <col:14> 'int' lvalue Var 0x1201282f0 'i' 'int'
    | | `-ImplicitCastExpr 0x120141280 <col:18> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x120141248 <col:18> 'int' lvalue ParmVar 0x1201280f0 'n' 'int'
    | |-UnaryOperator 0x1201412d8 <col:21, col:22> 'int' postfix '++'
    | | `-DeclRefExpr 0x1201412b8 <col:21> 'int' lvalue Var 0x1201282f0 'i' 'int'
    | `-CompoundStmt 0x120141530 <col:26, line:50:2>
    `-LabelStmt 0x120141680 <line:54:1, col:4> 'err'
      `-NullStmt 0x120141678 <col:4>
