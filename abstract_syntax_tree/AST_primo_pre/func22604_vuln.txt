`-FunctionDecl 0x12700e038  line:1:14 invalid ResizeOutputTensors 'int (int *, int *, const int *, const int *, int)'
  |-ParmVarDecl 0x12700dd28 <col:34, col:49> col:49 invalid context 'int *'
  |-ParmVarDecl 0x12700dda8 <col:58, col:70> col:70 invalid node 'int *'
  |-ParmVarDecl 0x12700de28 <line:2:34, col:54> col:54 invalid axis 'const int *'
  |-ParmVarDecl 0x12700dea8 <line:3:34, col:54> col:54 invalid input 'const int *'
  |-ParmVarDecl 0x12700df28 <col:61, col:65> col:65 used num_splits 'int'
  `-CompoundStmt 0x127027610 <col:77, line:26:1>
    |-DeclStmt 0x12700e1a0 <line:4:3, col:47>
    | `-VarDecl 0x12700e120 <col:3, col:7> col:7 used axis_value 'int'
    |-IfStmt 0x126923270 <line:5:3, line:7:3>
    | |-BinaryOperator 0x12700e210 <line:5:7, col:20> 'int' '<'
    | | |-ImplicitCastExpr 0x12700e1f8 <col:7> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x12700e1b8 <col:7> 'int' lvalue Var 0x12700e120 'axis_value' 'int'
    | | `-IntegerLiteral 0x12700e1d8 <col:20> 'int' 0
    | `-CompoundStmt 0x126923258 <col:23, line:7:3>
    |   `-CompoundAssignOperator 0x126923228 <line:6:5, col:38> 'int' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    |     |-DeclRefExpr 0x12700e230 <col:5> 'int' lvalue Var 0x12700e120 'axis_value' 'int'
    |     `-CallExpr 0x126923200 <col:19, col:38> '<dependent type>' contains-errors
    |       |-DeclRefExpr 0x12700e3b0 <col:19> 'int ()' Function 0x12700e2f8 'NumDimensions' 'int ()'
    |       `-RecoveryExpr 0x12700e3d0 <col:33> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x126923428 <line:9:3, col:42> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x126923370 <col:3> 'int ()' Function 0x1269232b8 'TF_LITE_ENSURE' 'int ()'
    | |-RecoveryExpr 0x126923390 <col:18> '<dependent type>' contains-errors lvalue
    | `-BinaryOperator 0x126923408 <col:27, col:41> 'int' '>='
    |   |-ImplicitCastExpr 0x1269233f0 <col:27> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x1269233b0 <col:27> 'int' lvalue Var 0x12700e120 'axis_value' 'int'
    |   `-IntegerLiteral 0x1269233d0 <col:41> 'int' 0
    |-CallExpr 0x126923540 <line:10:3, col:60> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x126923458 <col:3> 'int ()' Function 0x1269232b8 'TF_LITE_ENSURE' 'int ()'
    | |-RecoveryExpr 0x126923478 <col:18> '<dependent type>' contains-errors lvalue
    | `-BinaryOperator 0x126923520 <col:27, col:59> 'int' contains-errors '<'
    |   |-DeclRefExpr 0x126923498 <col:27> 'int' lvalue Var 0x12700e120 'axis_value' 'int'
    |   `-CallExpr 0x1269234f8 <col:40, col:59> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x1269234b8 <col:40> 'int ()' Function 0x12700e2f8 'NumDimensions' 'int ()'
    |     `-RecoveryExpr 0x1269234d8 <col:54> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x126923760 <line:12:3, col:60>
    | `-VarDecl 0x126923588 <col:3, col:59> col:13 used input_size 'const int' cinit
    |   `-CallExpr 0x126923730 <col:26, col:59> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x1269236d0 <col:26> 'int ()' Function 0x126923618 'SizeOfDimension' 'int ()'
    |     |-RecoveryExpr 0x1269236f0 <col:42> '<dependent type>' contains-errors lvalue
    |     `-DeclRefExpr 0x126923710 <col:49> 'int' lvalue Var 0x12700e120 'axis_value' 'int'
    |-CallExpr 0x1269239d0 <line:13:3, line:14:27> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x126923858 <line:13:3> 'int ()' Function 0x1269237a0 'TF_LITE_ENSURE_MSG' 'int ()'
    | |-RecoveryExpr 0x126923878 <col:22> '<dependent type>' contains-errors lvalue
    | |-BinaryOperator 0x126923948 <col:31, col:58> 'int' contains-errors '=='
    | | |-BinaryOperator 0x126923908 <col:31, col:44> 'int' contains-errors '%'
    | | | |-ImplicitCastExpr 0x1269238d8 <col:31> 'int' contains-errors <LValueToRValue>
    | | | | `-DeclRefExpr 0x126923898 <col:31> 'const int' contains-errors lvalue Var 0x126923588 'input_size' 'const int'
    | | | `-ImplicitCastExpr 0x1269238f0 <col:44> 'int' <LValueToRValue>
    | | |   `-DeclRefExpr 0x1269238b8 <col:44> 'int' lvalue ParmVar 0x12700df28 'num_splits' 'int'
    | | `-IntegerLiteral 0x126923928 <col:58> 'int' 0
    | `-StringLiteral 0x1269239b0 <line:14:22> 'char[4]' lvalue "STR"
    |-DeclStmt 0x126923b18 <line:15:3, col:49>
    | `-VarDecl 0x126923a20 <col:3, col:39> col:13 used slice_size 'const int' cinit
    |   `-BinaryOperator 0x126923af8 <col:26, col:39> 'int' contains-errors '/'
    |     |-ImplicitCastExpr 0x126923ac8 <col:26> 'int' contains-errors <LValueToRValue>
    |     | `-DeclRefExpr 0x126923a88 <col:26> 'const int' contains-errors lvalue Var 0x126923588 'input_size' 'const int'
    |     `-ImplicitCastExpr 0x126923ae0 <col:39> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x126923aa8 <col:39> 'int' lvalue ParmVar 0x12700df28 'num_splits' 'int'
    `-ForStmt 0x1270275d8 <line:17:3, line:23:3>
      |-DeclStmt 0x126923bd0 <line:17:8, col:17>
      | `-VarDecl 0x126923b48 <col:8, col:16> col:12 used i 'int' cinit
      |   `-IntegerLiteral 0x126923bb0 <col:16> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x126923d50 <col:19, col:38> 'int' contains-errors '<'
      | |-DeclRefExpr 0x126923be8 <col:19> 'int' lvalue Var 0x126923b48 'i' 'int'
      | `-CallExpr 0x126923d28 <col:23, col:38> '<dependent type>' contains-errors
      |   |-DeclRefExpr 0x126923ce8 <col:23> 'int ()' Function 0x126923c30 'NumOutputs' 'int ()'
      |   `-RecoveryExpr 0x126923d08 <col:34> '<dependent type>' contains-errors lvalue
      |-UnaryOperator 0x126923d90 <col:41, col:43> 'int' prefix '++'
      | `-DeclRefExpr 0x126923d70 <col:43> 'int' lvalue Var 0x126923b48 'i' 'int'
      `-CompoundStmt 0x1270275c8 <col:46, line:23:3>
