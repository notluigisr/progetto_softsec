`-FunctionDecl 0x13a80de88  line:1:12 invalid fts3DoIncrmerge 'int (int *, const char *)' static
  |-ParmVarDecl 0x13a80dd28 <line:2:3, col:14> col:14 invalid p 'int *'
  |-ParmVarDecl 0x13a80dda8 <line:3:3, col:15> col:15 used zParam 'const char *'
  `-CompoundStmt 0x13a829200 <line:4:2, line:33:1>
    |-DeclStmt 0x13a80dfc0 <line:5:3, col:9>
    | `-VarDecl 0x13a80df58 <col:3, col:7> col:7 used rc 'int'
    |-DeclStmt 0x13a80e0b0 <line:6:3, col:36>
    | `-VarDecl 0x13a80dff0 <col:3, col:7> col:7 used nMin 'int'
    |-DeclStmt 0x13a80e168 <line:7:3, col:17>
    | `-VarDecl 0x13a80e0e0 <col:3, col:16> col:7 used nMerge 'int' cinit
    |   `-IntegerLiteral 0x13a80e148 <col:16> 'int' 0
    |-DeclStmt 0x13a80e238 <line:8:3, col:25>
    | `-VarDecl 0x13a80e198 <col:3, col:19> col:15 used z 'const char *' cinit
    |   `-ImplicitCastExpr 0x13a80e220 <col:19> 'const char *' <LValueToRValue>
    |     `-DeclRefExpr 0x13a80e200 <col:19> 'const char *' lvalue ParmVar 0x13a80dda8 'zParam' 'const char *'
    |-BinaryOperator 0x13a8278e0 <line:11:3, col:25> 'int' '='
    | |-DeclRefExpr 0x13a80e250 <col:3> 'int' lvalue Var 0x13a80e0e0 'nMerge' 'int'
    | `-CallExpr 0x13a8278b8 <col:12, col:25> 'int'
    |   |-ImplicitCastExpr 0x13a8278a0 <col:12> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x13a80e3d0 <col:12> 'int ()' Function 0x13a80e318 'fts3Getint' 'int ()'
    |   `-UnaryOperator 0x13a827850 <col:23, col:24> 'const char **' prefix '&' cannot overflow
    |     `-DeclRefExpr 0x13a827800 <col:24> 'const char *' lvalue Var 0x13a80e198 'z' 'const char *'
    |-IfStmt 0x13a827c10 <line:14:3, line:17:3>
    | |-BinaryOperator 0x13a827ac0 <line:14:7, col:26> 'int' '&&'
    | | |-BinaryOperator 0x13a8279c0 <col:7, col:13> 'int' '=='
    | | | |-ImplicitCastExpr 0x13a8279a8 <col:7, col:10> 'int' <IntegralCast>
    | | | | `-ImplicitCastExpr 0x13a827990 <col:7, col:10> 'char' <LValueToRValue>
    | | | |   `-ArraySubscriptExpr 0x13a827958 <col:7, col:10> 'const char' lvalue
    | | | |     |-ImplicitCastExpr 0x13a827940 <col:7> 'const char *' <LValueToRValue>
    | | | |     | `-DeclRefExpr 0x13a827900 <col:7> 'const char *' lvalue Var 0x13a80e198 'z' 'const char *'
    | | | |     `-IntegerLiteral 0x13a827920 <col:9> 'int' 0
    | | | `-CharacterLiteral 0x13a827978 <col:13> 'int' 44
    | | `-BinaryOperator 0x13a827aa0 <col:20, col:26> 'int' '!='
    | |   |-ImplicitCastExpr 0x13a827a88 <col:20, col:23> 'int' <IntegralCast>
    | |   | `-ImplicitCastExpr 0x13a827a70 <col:20, col:23> 'char' <LValueToRValue>
    | |   |   `-ArraySubscriptExpr 0x13a827a38 <col:20, col:23> 'const char' lvalue
    | |   |     |-ImplicitCastExpr 0x13a827a20 <col:20> 'const char *' <LValueToRValue>
    | |   |     | `-DeclRefExpr 0x13a8279e0 <col:20> 'const char *' lvalue Var 0x13a80e198 'z' 'const char *'
    | |   |     `-IntegerLiteral 0x13a827a00 <col:22> 'int' 1
    | |   `-CharacterLiteral 0x13a827a58 <col:26> 'int' 0
    | `-CompoundStmt 0x13a827bf0 <col:32, line:17:3>
    |   |-UnaryOperator 0x13a827b00 <line:15:5, col:6> 'const char *' postfix '++'
    |   | `-DeclRefExpr 0x13a827ae0 <col:5> 'const char *' lvalue Var 0x13a80e198 'z' 'const char *'
    |   `-BinaryOperator 0x13a827bd0 <line:16:5, col:25> 'int' '='
    |     |-DeclRefExpr 0x13a827b18 <col:5> 'int' lvalue Var 0x13a80dff0 'nMin' 'int'
    |     `-CallExpr 0x13a827ba8 <col:12, col:25> 'int'
    |       |-ImplicitCastExpr 0x13a827b90 <col:12> 'int (*)()' <FunctionToPointerDecay>
    |       | `-DeclRefExpr 0x13a827b38 <col:12> 'int ()' Function 0x13a80e318 'fts3Getint' 'int ()'
    |       `-UnaryOperator 0x13a827b78 <col:23, col:24> 'const char **' prefix '&' cannot overflow
    |         `-DeclRefExpr 0x13a827b58 <col:24> 'const char *' lvalue Var 0x13a80e198 'z' 'const char *'
    |-IfStmt 0x13a828740 <line:19:3, line:31:3> has_else
    | |-BinaryOperator 0x13a827d88 <line:19:7, col:26> 'int' '||'
    | | |-BinaryOperator 0x13a827cf0 <col:7, col:13> 'int' '!='
    | | | |-ImplicitCastExpr 0x13a827cd8 <col:7, col:10> 'int' <IntegralCast>
    | | | | `-ImplicitCastExpr 0x13a827cc0 <col:7, col:10> 'char' <LValueToRValue>
    | | | |   `-ArraySubscriptExpr 0x13a827c88 <col:7, col:10> 'const char' lvalue
    | | | |     |-ImplicitCastExpr 0x13a827c70 <col:7> 'const char *' <LValueToRValue>
    | | | |     | `-DeclRefExpr 0x13a827c30 <col:7> 'const char *' lvalue Var 0x13a80e198 'z' 'const char *'
    | | | |     `-IntegerLiteral 0x13a827c50 <col:9> 'int' 0
    | | | `-CharacterLiteral 0x13a827ca8 <col:13> 'int' 0
    | | `-BinaryOperator 0x13a827d68 <col:21, col:26> 'int' '<'
    | |   |-ImplicitCastExpr 0x13a827d50 <col:21> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x13a827d10 <col:21> 'int' lvalue Var 0x13a80dff0 'nMin' 'int'
    | |   `-IntegerLiteral 0x13a827d30 <col:26> 'int' 2
    | |-CompoundStmt 0x13a827e40 <col:29, line:21:3>
    | | `-BinaryOperator 0x13a827e20 <line:20:5, col:10> 'int' contains-errors '='
    | |   |-DeclRefExpr 0x13a827da8 <col:5> 'int' lvalue Var 0x13a80df58 'rc' 'int'
    | |   `-RecoveryExpr 0x13a827e00 <col:10> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x13a828710 <line:21:8, line:31:3>
    |   |-BinaryOperator 0x13a827ed0 <line:22:5, col:10> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x13a827e58 <col:5> 'int' lvalue Var 0x13a80df58 'rc' 'int'
    |   | `-RecoveryExpr 0x13a827eb0 <col:10> '<dependent type>' contains-errors lvalue
    |   |-IfStmt 0x13a828300 <line:23:5, line:26:5>
    |   | |-UnaryOperator 0x13a827f70 <line:23:9, col:13> '<dependent type>' contains-errors prefix '!' cannot overflow
    |   | | `-ImplicitCastExpr 0x13a827f58 <col:10, col:13> '<dependent type>' contains-errors <LValueToRValue>
    |   | |   `-CXXDependentScopeMemberExpr 0x13a827f10 <col:10, col:13> '<dependent type>' contains-errors lvalue ->bHasStat
    |   | |     `-RecoveryExpr 0x13a827ef0 <col:10> '<dependent type>' contains-errors lvalue
    |   | `-CompoundStmt 0x13a8282e0 <col:23, line:26:5>
    |   |   |-CallExpr 0x13a828130 <line:24:7, col:27> '<dependent type>' contains-errors
    |   |   | |-DeclRefExpr 0x13a828068 <col:7> 'int ()' Function 0x13a827fb0 'assert' 'int ()'
    |   |   | `-BinaryOperator 0x13a828110 <col:15, col:25> 'int' contains-errors '=='
    |   |   |   |-CXXDependentScopeMemberExpr 0x13a8280a8 <col:15, col:18> '<dependent type>' contains-errors lvalue ->bFts4
    |   |   |   | `-RecoveryExpr 0x13a828088 <col:15> '<dependent type>' contains-errors lvalue
    |   |   |   `-IntegerLiteral 0x13a8280f0 <col:25> 'int' 0
    |   |   `-CallExpr 0x13a8282b0 <line:25:7, col:40> '<dependent type>' contains-errors
    |   |     |-DeclRefExpr 0x13a828238 <col:7> 'int ()' Function 0x13a828180 'sqlite3Fts3CreateStatTable' 'int ()'
    |   |     |-UnaryOperator 0x13a828278 <col:34, col:35> 'int *' prefix '&' cannot overflow
    |   |     | `-DeclRefExpr 0x13a828258 <col:35> 'int' lvalue Var 0x13a80df58 'rc' 'int'
    |   |     `-RecoveryExpr 0x13a828290 <col:39> '<dependent type>' contains-errors lvalue
    |   |-IfStmt 0x13a8285a8 <line:27:5, line:29:5>
    |   | |-BinaryOperator 0x13a828398 <line:27:9, col:13> 'int' contains-errors '=='
    |   | | |-DeclRefExpr 0x13a828320 <col:9> 'int' lvalue Var 0x13a80df58 'rc' 'int'
    |   | | `-RecoveryExpr 0x13a828378 <col:13> '<dependent type>' contains-errors lvalue
    |   | `-CompoundStmt 0x13a828590 <col:24, line:29:5>
    |   |   `-BinaryOperator 0x13a828570 <line:28:7, col:48> 'int' contains-errors '='
    |   |     |-DeclRefExpr 0x13a8283b8 <col:7> 'int' lvalue Var 0x13a80df58 'rc' 'int'
    |   |     `-CallExpr 0x13a828538 <col:12, col:48> '<dependent type>' contains-errors
    |   |       |-DeclRefExpr 0x13a8284b8 <col:12> 'int ()' Function 0x13a828400 'sqlite3Fts3Incrmerge' 'int ()'
    |   |       |-RecoveryExpr 0x13a8284d8 <col:33> '<dependent type>' contains-errors lvalue
    |   |       |-DeclRefExpr 0x13a8284f8 <col:36> 'int' lvalue Var 0x13a80e0e0 'nMerge' 'int'
    |   |       `-DeclRefExpr 0x13a828518 <col:44> 'int' lvalue Var 0x13a80dff0 'nMin' 'int'
    |   `-CallExpr 0x13a8286e8 <line:30:5, col:31> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x13a8286a8 <col:5> 'int ()' Function 0x13a8285f0 'sqlite3Fts3SegmentsClose' 'int ()'
    |     `-RecoveryExpr 0x13a8286c8 <col:30> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x13a8287a8 <line:32:3, col:10>
      `-ImplicitCastExpr 0x13a828790 <col:10> 'int' <LValueToRValue>
        `-DeclRefExpr 0x13a828770 <col:10> 'int' lvalue Var 0x13a80df58 'rc' 'int'
