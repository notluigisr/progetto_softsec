`-FunctionDecl 0x12300dda8  line:1:1 hstore_from_arrays 'int (int)'
  |-ParmVarDecl 0x12300dcd8 <col:20> col:20 PG_FUNCTION_ARGS 'int'
  `-CompoundStmt 0x12302a918 <line:2:1, line:103:1>
    |-DeclStmt 0x12300df98 <line:8:2, col:17>
    | `-VarDecl 0x12300df30 <col:2, col:8> col:8 used key_count 'int'
    |-DeclStmt 0x12300e060 <line:11:2, col:19>
    | `-VarDecl 0x12300dff8 <col:2, col:8> col:8 used value_count 'int'
    |-DeclStmt 0x12300e128 <line:14:2, col:9>
    | `-VarDecl 0x12300e0c0 <col:2, col:8> col:8 used i 'int'
    |-IfStmt 0x123026638 <line:16:2, line:17:18>
    | |-CallExpr 0x12300e2d8 <line:16:6, col:20> 'int'
    | | |-ImplicitCastExpr 0x12300e2c0 <col:6> 'int (*)()' <FunctionToPointerDecay>
    | | | `-DeclRefExpr 0x12300e250 <col:6> 'int ()' Function 0x12300e198 'PG_ARGISNULL' 'int ()'
    | | `-IntegerLiteral 0x12300e270 <col:19> 'int' 0
    | `-CallExpr 0x123026618 <line:17:3, col:18> 'int'
    |   `-ImplicitCastExpr 0x123026600 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x12300e3e0 <col:3> 'int ()' Function 0x12300e328 'PG_RETURN_NULL' 'int ()'
    |-IfStmt 0x123028fe0 <line:36:2, line:67:2> has_else
    | |-CallExpr 0x1230270d0 <line:36:6, col:20> 'int'
    | | |-ImplicitCastExpr 0x1230270b8 <col:6> 'int (*)()' <FunctionToPointerDecay>
    | | | `-DeclRefExpr 0x123027078 <col:6> 'int ()' Function 0x12300e198 'PG_ARGISNULL' 'int ()'
    | | `-IntegerLiteral 0x123027098 <col:19> 'int' 1
    | |-CompoundStmt 0x123027170 <line:37:2, line:42:2>
    | | `-BinaryOperator 0x123027150 <line:39:3, col:17> 'int' '='
    | |   |-DeclRefExpr 0x1230270f8 <col:3> 'int' lvalue Var 0x12300dff8 'value_count' 'int'
    | |   `-ImplicitCastExpr 0x123027138 <col:17> 'int' <LValueToRValue>
    | |     `-DeclRefExpr 0x123027118 <col:17> 'int' lvalue Var 0x12300df30 'key_count' 'int'
    | `-CompoundStmt 0x123028fc8 <line:44:2, line:67:2>
    |   `-CallExpr 0x123028fa0 <line:66:3, col:34> 'int'
    |     |-ImplicitCastExpr 0x123028f88 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x123028ed8 <col:3> 'int ()' Function 0x1230267e0 'Assert' 'int ()'
    |     `-BinaryOperator 0x123028f68 <col:10, col:23> 'int' '=='
    |       |-ImplicitCastExpr 0x123028f38 <col:10> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x123028ef8 <col:10> 'int' lvalue Var 0x12300df30 'key_count' 'int'
    |       `-ImplicitCastExpr 0x123028f50 <col:23> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x123028f18 <col:23> 'int' lvalue Var 0x12300dff8 'value_count' 'int'
    `-ForStmt 0x123029b18 <line:71:2, line:96:2>
      |-BinaryOperator 0x123029170 <line:71:7, col:11> 'int' '='
      | |-DeclRefExpr 0x123029130 <col:7> 'int' lvalue Var 0x12300e0c0 'i' 'int'
      | `-IntegerLiteral 0x123029150 <col:11> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x123029200 <col:14, col:18> 'int' '<'
      | |-ImplicitCastExpr 0x1230291d0 <col:14> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x123029190 <col:14> 'int' lvalue Var 0x12300e0c0 'i' 'int'
      | `-ImplicitCastExpr 0x1230291e8 <col:18> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x1230291b0 <col:18> 'int' lvalue Var 0x12300df30 'key_count' 'int'
      |-UnaryOperator 0x123029240 <col:29, col:31> 'int' prefix '++'
      | `-DeclRefExpr 0x123029220 <col:31> 'int' lvalue Var 0x12300e0c0 'i' 'int'
      `-CompoundStmt 0x123029b00 <line:72:2, line:96:2>
        `-IfStmt 0x123029ad0 <line:78:3, line:95:3> has_else
          |-RecoveryExpr 0x123029390 <line:78:7, col:36> '_Bool' contains-errors
          |-CompoundStmt 0x1230297d0 <line:79:3, line:86:3>
          `-CompoundStmt 0x123029ac0 <line:88:3, line:95:3>
