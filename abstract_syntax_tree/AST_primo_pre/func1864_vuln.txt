`-FunctionDecl 0x14d00df48  line:1:12 invalid iccdomain 'int (int *, int *, float *)' static
  |-ParmVarDecl 0x14d00dd28 <col:22, col:32> col:32 invalid i_ctx_p 'int *'
  |-ParmVarDecl 0x14d00dda8 <col:41, col:46> col:46 invalid space 'int *'
  |-ParmVarDecl 0x14d00de58 <col:53, col:60> col:60 used ptr 'float *'
  `-CompoundStmt 0x14d0286c0 <line:2:1, line:33:1>
    |-DeclStmt 0x14d00e1c8 <line:3:5, col:32>
    | |-VarDecl 0x14d00e020 <col:5, col:9> col:9 used components 'int'
    | |-VarDecl 0x14d00e0a0 <col:5, col:21> col:21 used i 'int'
    | `-VarDecl 0x14d00e120 <col:5, col:31> col:24 used code 'int' cinit
    |   `-IntegerLiteral 0x14d00e188 <col:31> 'int' 0
    |-BinaryOperator 0x14d809748 <line:6:5, col:49> 'int' contains-errors '='
    | |-DeclRefExpr 0x14d00e228 <col:5> 'int' lvalue Var 0x14d00e120 'code' 'int'
    | `-CallExpr 0x14d809708 <col:12, col:49> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x14d00e3a0 <col:12> 'int ()' Function 0x14d00e2e8 'array_get' 'int ()'
    |   |-RecoveryExpr 0x14d8096b0 <col:22> '<dependent type>' contains-errors lvalue
    |   |-RecoveryExpr 0x14d00e3d8 <col:31> '<dependent type>' contains-errors lvalue
    |   |-IntegerLiteral 0x14d809600 <col:38> 'int' 1
    |   `-UnaryOperator 0x14d8096f0 <col:41, col:42> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-RecoveryExpr 0x14d8096d0 <col:42> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x14d809828 <line:7:5, line:8:16>
    | |-BinaryOperator 0x14d8097c0 <line:7:9, col:16> 'int' '<'
    | | |-ImplicitCastExpr 0x14d8097a8 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14d809768 <col:9> 'int' lvalue Var 0x14d00e120 'code' 'int'
    | | `-IntegerLiteral 0x14d809788 <col:16> 'int' 0
    | `-ReturnStmt 0x14d809818 <line:8:9, col:16>
    |   `-ImplicitCastExpr 0x14d809800 <col:16> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x14d8097e0 <col:16> 'int' lvalue Var 0x14d00e120 'code' 'int'
    |-BinaryOperator 0x14d809b30 <line:9:5, col:54> 'int' contains-errors '='
    | |-DeclRefExpr 0x14d809848 <col:5> 'int' lvalue Var 0x14d00e120 'code' 'int'
    | `-CallExpr 0x14d809af8 <col:12, col:54> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x14d809948 <col:12> 'int ()' Function 0x14d809890 'dict_find_string' 'int ()'
    |   |-UnaryOperator 0x14d809aa8 <col:29, col:30> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | `-RecoveryExpr 0x14d809a88 <col:30> '<dependent type>' contains-errors lvalue
    |   |-StringLiteral 0x14d8099e0 <col:39> 'char[4]' lvalue "STR"
    |   `-UnaryOperator 0x14d809ae0 <col:46, col:47> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-RecoveryExpr 0x14d809ac0 <col:47> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x14d809c10 <line:10:5, line:11:16>
    | |-BinaryOperator 0x14d809ba8 <line:10:9, col:16> 'int' '<'
    | | |-ImplicitCastExpr 0x14d809b90 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14d809b50 <col:9> 'int' lvalue Var 0x14d00e120 'code' 'int'
    | | `-IntegerLiteral 0x14d809b70 <col:16> 'int' 0
    | `-ReturnStmt 0x14d809c00 <line:11:9, col:16>
    |   `-ImplicitCastExpr 0x14d809be8 <col:16> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x14d809bc8 <col:16> 'int' lvalue Var 0x14d00e120 'code' 'int'
    |-IfStmt 0x14d809e40 <line:12:5, line:13:48>
    | |-BinaryOperator 0x14d809c88 <line:12:9, col:17> 'int' '=='
    | | |-ImplicitCastExpr 0x14d809c70 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14d809c30 <col:9> 'int' lvalue Var 0x14d00e120 'code' 'int'
    | | `-IntegerLiteral 0x14d809c50 <col:17> 'int' 0
    | `-ReturnStmt 0x14d809e30 <line:13:9, col:48>
    |   `-CallExpr 0x14d809e08 <col:16, col:48> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x14d809d88 <col:16> 'int ()' Function 0x14d809cd0 'gs_note_error' 'int ()'
    |     `-RecoveryExpr 0x14d809de8 <col:30> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x14d809ff8 <line:14:5, col:33> 'int' contains-errors '='
    | |-DeclRefExpr 0x14d809e60 <col:5> 'int' lvalue Var 0x14d00e020 'components' 'int'
    | `-CXXDependentScopeMemberExpr 0x14d809fb0 <col:18, col:33> '<dependent type>' contains-errors lvalue .intval
    |   `-CXXDependentScopeMemberExpr 0x14d809f68 <col:18, col:27> '<dependent type>' contains-errors lvalue ->value
    |     `-RecoveryExpr 0x14d809f48 <col:18> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x14d80a1d8 <line:15:5, col:54> 'int' contains-errors '='
    | |-DeclRefExpr 0x14d80a018 <col:5> 'int' lvalue Var 0x14d00e120 'code' 'int'
    | `-CallExpr 0x14d80a1a0 <col:12, col:54> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x14d80a038 <col:12> 'int ()' Function 0x14d809890 'dict_find_string' 'int ()'
    |   |-UnaryOperator 0x14d80a150 <col:29, col:30> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | `-RecoveryExpr 0x14d80a130 <col:30> '<dependent type>' contains-errors lvalue
    |   |-StringLiteral 0x14d80a088 <col:39> 'char[4]' lvalue "STR"
    |   `-UnaryOperator 0x14d80a188 <col:46, col:47> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-RecoveryExpr 0x14d80a168 <col:47> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x14d028660 <line:16:5, line:31:5> has_else
    | |-BinaryOperator 0x14d80a500 <line:16:9, col:48> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x14d80a458 <col:9, col:16> 'int' '>'
    | | | |-ImplicitCastExpr 0x14d80a440 <col:9> 'int' <LValueToRValue>
    | | | | `-DeclRefExpr 0x14d80a1f8 <col:9> 'int' lvalue Var 0x14d00e120 'code' 'int'
    | | | `-IntegerLiteral 0x14d80a218 <col:16> 'int' 0
    | | `-UnaryOperator 0x14d80a4e8 <col:21, col:48> '<dependent type>' contains-errors prefix '!' cannot overflow
    | |   `-CallExpr 0x14d80a4b8 <col:22, col:48> '<dependent type>' contains-errors
    | |     |-DeclRefExpr 0x14d80a350 <col:22> 'int ()' Function 0x14d80a298 'r_has_type' 'int ()'
    | |     |-RecoveryExpr 0x14d80a478 <col:33> '<dependent type>' contains-errors lvalue
    | |     `-RecoveryExpr 0x14d80a498 <col:42> '<dependent type>' contains-errors lvalue
    | |-CompoundStmt 0x14d028200 <col:51, line:26:5>
    | | `-ForStmt 0x14d0281c8 <line:17:9, line:25:9>
    | |   |-BinaryOperator 0x14d80a560 <line:17:14, col:16> 'int' '='
    | |   | |-DeclRefExpr 0x14d80a520 <col:14> 'int' lvalue Var 0x14d00e0a0 'i' 'int'
    | |   | `-IntegerLiteral 0x14d80a540 <col:16> 'int' 0
    | |   |-<<<NULL>>>
    | |   |-BinaryOperator 0x14d027e38 <col:18, col:33> 'int' '<'
    | |   | |-ImplicitCastExpr 0x14d027e20 <col:18> 'int' <LValueToRValue>
    | |   | | `-DeclRefExpr 0x14d80a580 <col:18> 'int' lvalue Var 0x14d00e0a0 'i' 'int'
    | |   | `-BinaryOperator 0x14d027e00 <col:20, col:33> 'int' '*'
    | |   |   |-ImplicitCastExpr 0x14d80a5e0 <col:20> 'int' <LValueToRValue>
    | |   |   | `-DeclRefExpr 0x14d80a5a0 <col:20> 'int' lvalue Var 0x14d00e020 'components' 'int'
    | |   |   `-IntegerLiteral 0x14d80a5c0 <col:33> 'int' 2
    | |   |-UnaryOperator 0x14d027e78 <col:35, col:36> 'int' postfix '++'
    | |   | `-DeclRefExpr 0x14d027e58 <col:35> 'int' lvalue Var 0x14d00e0a0 'i' 'int'
    | |   `-CompoundStmt 0x14d0281b0 <col:40, line:25:9>
    | |     `-IfStmt 0x14d027fb0 <line:19:13, line:20:24>
    | |       |-BinaryOperator 0x14d027f48 <line:19:17, col:24> 'int' '<'
    | |       | |-ImplicitCastExpr 0x14d027f30 <col:17> 'int' <LValueToRValue>
    | |       | | `-DeclRefExpr 0x14d027ef0 <col:17> 'int' lvalue Var 0x14d00e120 'code' 'int'
    | |       | `-IntegerLiteral 0x14d027f10 <col:24> 'int' 0
    | |       `-ReturnStmt 0x14d027fa0 <line:20:17, col:24>
    | |         `-ImplicitCastExpr 0x14d027f88 <col:24> 'int' <LValueToRValue>
    | |           `-DeclRefExpr 0x14d027f68 <col:24> 'int' lvalue Var 0x14d00e120 'code' 'int'
    | `-CompoundStmt 0x14d028648 <line:26:12, line:31:5>
    |   `-ForStmt 0x14d028610 <line:27:9, line:30:9>
    |     |-BinaryOperator 0x14d028258 <line:27:14, col:16> 'int' '='
    |     | |-DeclRefExpr 0x14d028218 <col:14> 'int' lvalue Var 0x14d00e0a0 'i' 'int'
    |     | `-IntegerLiteral 0x14d028238 <col:16> 'int' 0
    |     |-<<<NULL>>>
    |     |-BinaryOperator 0x14d0282e8 <col:18, col:20> 'int' '<'
    |     | |-ImplicitCastExpr 0x14d0282b8 <col:18> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x14d028278 <col:18> 'int' lvalue Var 0x14d00e0a0 'i' 'int'
    |     | `-ImplicitCastExpr 0x14d0282d0 <col:20> 'int' <LValueToRValue>
    |     |   `-DeclRefExpr 0x14d028298 <col:20> 'int' lvalue Var 0x14d00e020 'components' 'int'
    |     |-UnaryOperator 0x14d028328 <col:31, col:32> 'int' postfix '++'
    |     | `-DeclRefExpr 0x14d028308 <col:31> 'int' lvalue Var 0x14d00e0a0 'i' 'int'
    |     `-CompoundStmt 0x14d0285f0 <col:36, line:30:9>
    |       |-BinaryOperator 0x14d028448 <line:28:13, col:26> 'float' '='
    |       | |-ArraySubscriptExpr 0x14d0283f0 <col:13, col:22> 'float' lvalue
    |       | | |-ImplicitCastExpr 0x14d0283d8 <col:13> 'float *' <LValueToRValue>
    |       | | | `-DeclRefExpr 0x14d028340 <col:13> 'float *' lvalue ParmVar 0x14d00de58 'ptr' 'float *'
    |       | | `-BinaryOperator 0x14d0283b8 <col:17, col:21> 'int' '*'
    |       | |   |-ImplicitCastExpr 0x14d0283a0 <col:17> 'int' <LValueToRValue>
    |       | |   | `-DeclRefExpr 0x14d028360 <col:17> 'int' lvalue Var 0x14d00e0a0 'i' 'int'
    |       | |   `-IntegerLiteral 0x14d028380 <col:21> 'int' 2
    |       | `-ImplicitCastExpr 0x14d028430 <col:26> 'float' <IntegralToFloating>
    |       |   `-IntegerLiteral 0x14d028410 <col:26> 'int' 0
    |       `-BinaryOperator 0x14d0285d0 <line:29:13, col:32> 'float' '='
    |         |-ArraySubscriptExpr 0x14d028578 <col:13, col:28> 'float' lvalue
    |         | |-ImplicitCastExpr 0x14d028560 <col:13> 'float *' <LValueToRValue>
    |         | | `-DeclRefExpr 0x14d028468 <col:13> 'float *' lvalue ParmVar 0x14d00de58 'ptr' 'float *'
    |         | `-BinaryOperator 0x14d028540 <col:17, col:27> 'int' '+'
    |         |   |-ParenExpr 0x14d028500 <col:17, col:23> 'int'
    |         |   | `-BinaryOperator 0x14d0284e0 <col:18, col:22> 'int' '*'
    |         |   |   |-ImplicitCastExpr 0x14d0284c8 <col:18> 'int' <LValueToRValue>
    |         |   |   | `-DeclRefExpr 0x14d028488 <col:18> 'int' lvalue Var 0x14d00e0a0 'i' 'int'
    |         |   |   `-IntegerLiteral 0x14d0284a8 <col:22> 'int' 2
    |         |   `-IntegerLiteral 0x14d028520 <col:27> 'int' 1
    |         `-ImplicitCastExpr 0x14d0285b8 <col:32> 'float' <IntegralToFloating>
    |           `-IntegerLiteral 0x14d028598 <col:32> 'int' 1
    `-ReturnStmt 0x14d0286b0 <line:32:5, col:12>
      `-IntegerLiteral 0x14d028690 <col:12> 'int' 0
