`-FunctionDecl 0x146128538  line:1:6 invalid vorbis_book_decodevv_add 'long (int *, float **, long, int, int *, int)'
  |-ParmVarDecl 0x146128128 <col:31, col:41> col:41 invalid book 'int *'
  |-ParmVarDecl 0x146128210 <col:46, col:54> col:54 used a 'float **'
  |-ParmVarDecl 0x146128290 <col:56, col:61> col:61 used offset 'long'
  |-ParmVarDecl 0x146128310 <col:68, col:72> col:72 used ch 'int'
  |-ParmVarDecl 0x146128390 <line:2:31, col:47> col:47 invalid b 'int *'
  |-ParmVarDecl 0x146128410 <col:49, col:53> col:53 used n 'int'
  `-CompoundStmt 0x146142748 <col:55, line:23:1>
    |-DeclStmt 0x1461287b0 <line:4:3, col:17>
    | |-VarDecl 0x146128628 <col:3, col:8> col:8 used i 'long'
    | |-VarDecl 0x1461286a8 <col:3, col:10> col:10 used j 'long'
    | `-VarDecl 0x146128728 <col:3, col:12> col:12 used entry 'long'
    |-DeclStmt 0x146141888 <line:5:3, col:14>
    | `-VarDecl 0x146141800 <col:3, col:13> col:7 used chptr 'int' cinit
    |   `-IntegerLiteral 0x146141868 <col:13> 'int' 0
    |-IfStmt 0x1461426c0 <line:6:3, line:21:3>
    | |-BinaryOperator 0x146141928 <line:6:6, col:25> 'int' contains-errors '>'
    | | |-CXXDependentScopeMemberExpr 0x1461418c0 <col:6, col:12> '<dependent type>' contains-errors lvalue ->used_entries
    | | | `-RecoveryExpr 0x1461418a0 <col:6> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x146141908 <col:25> 'int' 0
    | `-CompoundStmt 0x1461426a8 <col:27, line:21:3>
    |   `-ForStmt 0x146142670 <line:7:5, line:20:5>
    |     |-BinaryOperator 0x146141a10 <line:7:9, col:18> 'long' '='
    |     | |-DeclRefExpr 0x146141948 <col:9> 'long' lvalue Var 0x146128628 'i' 'long'
    |     | `-BinaryOperator 0x1461419f0 <col:11, col:18> 'long' '/'
    |     |   |-ImplicitCastExpr 0x1461419a8 <col:11> 'long' <LValueToRValue>
    |     |   | `-DeclRefExpr 0x146141968 <col:11> 'long' lvalue ParmVar 0x146128290 'offset' 'long'
    |     |   `-ImplicitCastExpr 0x1461419d8 <col:18> 'long' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x1461419c0 <col:18> 'int' <LValueToRValue>
    |     |       `-DeclRefExpr 0x146141988 <col:18> 'int' lvalue ParmVar 0x146128310 'ch' 'int'
    |     |-<<<NULL>>>
    |     |-BinaryOperator 0x146141ba0 <col:21, col:34> 'int' '<'
    |     | |-ImplicitCastExpr 0x146141b88 <col:21> 'long' <LValueToRValue>
    |     | | `-DeclRefExpr 0x146141a30 <col:21> 'long' lvalue Var 0x146128628 'i' 'long'
    |     | `-BinaryOperator 0x146141b68 <col:23, col:34> 'long' '/'
    |     |   |-ParenExpr 0x146141af8 <col:23, col:32> 'long'
    |     |   | `-BinaryOperator 0x146141ad8 <col:24, col:31> 'long' '+'
    |     |   |   |-ImplicitCastExpr 0x146141a90 <col:24> 'long' <LValueToRValue>
    |     |   |   | `-DeclRefExpr 0x146141a50 <col:24> 'long' lvalue ParmVar 0x146128290 'offset' 'long'
    |     |   |   `-ImplicitCastExpr 0x146141ac0 <col:31> 'long' <IntegralCast>
    |     |   |     `-ImplicitCastExpr 0x146141aa8 <col:31> 'int' <LValueToRValue>
    |     |   |       `-DeclRefExpr 0x146141a70 <col:31> 'int' lvalue ParmVar 0x146128410 'n' 'int'
    |     |   `-ImplicitCastExpr 0x146141b50 <col:34> 'long' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x146141b38 <col:34> 'int' <LValueToRValue>
    |     |       `-DeclRefExpr 0x146141b18 <col:34> 'int' lvalue ParmVar 0x146128310 'ch' 'int'
    |     |-<<<NULL>>>
    |     `-CompoundStmt 0x146142648 <col:38, line:20:5>
    |       |-BinaryOperator 0x146141dd0 <line:8:7, col:48> 'long' contains-errors '='
    |       | |-DeclRefExpr 0x146141bc0 <col:7> 'long' lvalue Var 0x146128728 'entry' 'long'
    |       | `-CallExpr 0x146141da0 <col:15, col:48> '<dependent type>' contains-errors
    |       |   |-DeclRefExpr 0x146141d40 <col:15> 'int ()' Function 0x146141c88 'decode_packed_entry_number' 'int ()'
    |       |   |-RecoveryExpr 0x146141d60 <col:42> '<dependent type>' contains-errors lvalue
    |       |   `-RecoveryExpr 0x146141d80 <col:47> '<dependent type>' contains-errors lvalue
    |       |-IfStmt 0x146141f18 <line:9:7, col:29>
    |       | |-BinaryOperator 0x146141e78 <col:10, col:18> 'int' '=='
    |       | | |-ImplicitCastExpr 0x146141e48 <col:10> 'long' <LValueToRValue>
    |       | | | `-DeclRefExpr 0x146141df0 <col:10> 'long' lvalue Var 0x146128728 'entry' 'long'
    |       | | `-ImplicitCastExpr 0x146141e60 <col:17, col:18> 'long' <IntegralCast>
    |       | |   `-UnaryOperator 0x146141e30 <col:17, col:18> 'int' prefix '-'
    |       | |     `-IntegerLiteral 0x146141e10 <col:18> 'int' 1
    |       | `-ReturnStmt 0x146141f08 <col:20, col:29>
    |       |   `-ImplicitCastExpr 0x146141ef0 <col:26, col:29> 'long' <IntegralCast>
    |       |     `-ParenExpr 0x146141ed0 <col:26, col:29> 'int'
    |       |       `-UnaryOperator 0x146141eb8 <col:27, col:28> 'int' prefix '-'
    |       |         `-IntegerLiteral 0x146141e98 <col:28> 'int' 1
    |       `-CompoundStmt 0x146142628 <line:10:7, line:19:7>
    |         |-DeclStmt 0x146142120 <line:11:9, col:57>
    |         | `-VarDecl 0x146141f88 <col:9, col:54> col:22 used t 'const float *' cinit
    |         |   `-BinaryOperator 0x146142100 <col:26, col:54> '<dependent type>' contains-errors '+'
    |         |     |-CXXDependentScopeMemberExpr 0x146142010 <col:26, col:32> '<dependent type>' contains-errors lvalue ->valuelist
    |         |     | `-RecoveryExpr 0x146141ff0 <col:26> '<dependent type>' contains-errors lvalue
    |         |     `-BinaryOperator 0x1461420e0 <col:42, col:54> '<dependent type>' contains-errors '*'
    |         |       |-DeclRefExpr 0x146142058 <col:42> 'long' lvalue Var 0x146128728 'entry' 'long'
    |         |       `-CXXDependentScopeMemberExpr 0x146142098 <col:48, col:54> '<dependent type>' contains-errors lvalue ->dim
    |         |         `-RecoveryExpr 0x146142078 <col:48> '<dependent type>' contains-errors lvalue
    |         `-ForStmt 0x1461425f0 <line:12:9, line:18:9>
    |           |-BinaryOperator 0x146142190 <line:12:14, col:16> 'long' '='
    |           | |-DeclRefExpr 0x146142138 <col:14> 'long' lvalue Var 0x1461286a8 'j' 'long'
    |           | `-ImplicitCastExpr 0x146142178 <col:16> 'long' <IntegralCast>
    |           |   `-IntegerLiteral 0x146142158 <col:16> 'int' 0
    |           |-<<<NULL>>>
    |           |-BinaryOperator 0x146142238 <col:18, col:26> 'int' contains-errors '<'
    |           | |-DeclRefExpr 0x1461421b0 <col:18> 'long' lvalue Var 0x1461286a8 'j' 'long'
    |           | `-CXXDependentScopeMemberExpr 0x1461421f0 <col:20, col:26> '<dependent type>' contains-errors lvalue ->dim
    |           |   `-RecoveryExpr 0x1461421d0 <col:20> '<dependent type>' contains-errors lvalue
    |           |-UnaryOperator 0x146142278 <col:30, col:31> 'long' postfix '++'
    |           | `-DeclRefExpr 0x146142258 <col:30> 'long' lvalue Var 0x1461286a8 'j' 'long'
    |           `-CompoundStmt 0x1461425d0 <col:34, line:18:9>
    |             |-CompoundAssignOperator 0x146142438 <line:13:11, col:29> 'float' contains-errors '+=' ComputeLHSTy='float' ComputeResultTy='float'
    |             | |-ArraySubscriptExpr 0x146142370 <col:11, col:23> 'float' lvalue
    |             | | |-ImplicitCastExpr 0x146142340 <col:11, col:20> 'float *' <LValueToRValue>
    |             | | | `-ArraySubscriptExpr 0x146142300 <col:11, col:20> 'float *' lvalue
    |             | | |   |-ImplicitCastExpr 0x1461422e8 <col:11> 'float **' <LValueToRValue>
    |             | | |   | `-DeclRefExpr 0x146142290 <col:11> 'float **' lvalue ParmVar 0x146128210 'a' 'float **'
    |             | | |   `-UnaryOperator 0x1461422d0 <col:13, col:18> 'int' postfix '++'
    |             | | |     `-DeclRefExpr 0x1461422b0 <col:13> 'int' lvalue Var 0x146141800 'chptr' 'int'
    |             | | `-ImplicitCastExpr 0x146142358 <col:22> 'long' <LValueToRValue>
    |             | |   `-DeclRefExpr 0x146142320 <col:22> 'long' lvalue Var 0x146128628 'i' 'long'
    |             | `-ImplicitCastExpr 0x146142420 <col:26, col:29> 'float' contains-errors <LValueToRValue>
    |             |   `-ArraySubscriptExpr 0x146142400 <col:26, col:29> 'const float' contains-errors lvalue
    |             |     |-ImplicitCastExpr 0x1461423d0 <col:26> 'const float *' contains-errors <LValueToRValue>
    |             |     | `-DeclRefExpr 0x146142390 <col:26> 'const float *' contains-errors lvalue Var 0x146141f88 't' 'const float *'
    |             |     `-ImplicitCastExpr 0x1461423e8 <col:28> 'long' <LValueToRValue>
    |             |       `-DeclRefExpr 0x1461423b0 <col:28> 'long' lvalue Var 0x1461286a8 'j' 'long'
    |             `-IfStmt 0x1461425b0 <line:14:11, line:17:11>
    |               |-BinaryOperator 0x1461424d8 <line:14:14, col:21> 'int' '=='
    |               | |-ImplicitCastExpr 0x1461424a8 <col:14> 'int' <LValueToRValue>
    |               | | `-DeclRefExpr 0x146142468 <col:14> 'int' lvalue Var 0x146141800 'chptr' 'int'
    |               | `-ImplicitCastExpr 0x1461424c0 <col:21> 'int' <LValueToRValue>
    |               |   `-DeclRefExpr 0x146142488 <col:21> 'int' lvalue ParmVar 0x146128310 'ch' 'int'
    |               `-CompoundStmt 0x146142590 <col:24, line:17:11>
    |                 |-BinaryOperator 0x146142538 <line:15:13, col:19> 'int' '='
    |                 | |-DeclRefExpr 0x1461424f8 <col:13> 'int' lvalue Var 0x146141800 'chptr' 'int'
    |                 | `-IntegerLiteral 0x146142518 <col:19> 'int' 0
    |                 `-UnaryOperator 0x146142578 <line:16:13, col:14> 'long' postfix '++'
    |                   `-DeclRefExpr 0x146142558 <col:13> 'long' lvalue Var 0x146128628 'i' 'long'
    `-ReturnStmt 0x146142738 <line:22:3, col:11>
      `-ImplicitCastExpr 0x146142720 <col:9, col:11> 'long' <IntegralCast>
        `-ParenExpr 0x146142700 <col:9, col:11> 'int'
          `-IntegerLiteral 0x1461426e0 <col:10> 'int' 0
