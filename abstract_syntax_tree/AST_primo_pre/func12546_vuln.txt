`-FunctionDecl 0x12580de88  line:1:12 invalid php_snmp_write_max_oids 'int (int *, int *)' static
  |-ParmVarDecl 0x12580dd28 <col:36, col:53> col:53 referenced invalid snmp_object 'int *'
  |-ParmVarDecl 0x12580dda8 <col:66, col:72> col:72 referenced invalid newval 'int *'
  `-CompoundStmt 0x125828438 <line:2:1, line:29:1>
    |-DeclStmt 0x12580dff8 <line:4:2, col:19>
    | `-VarDecl 0x12580df58 <col:2, col:12> col:6 used ret 'int' cinit
    |   `-RecoveryExpr 0x12580dfd8 <col:12> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x12580e388 <line:6:2, line:9:2>
    | |-BinaryOperator 0x12580e230 <line:6:6, col:26> 'int' contains-errors '=='
    | | |-CallExpr 0x12580e1b0 <col:6, col:21> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x12580e170 <col:6> 'int ()' Function 0x12580e0b8 'Z_TYPE_P' 'int ()'
    | | | `-RecoveryExpr 0x12580e190 <col:15> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x12580e210 <col:26> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x12580e368 <col:35, line:9:2>
    |   |-BinaryOperator 0x12580e300 <line:7:3, col:27> '<dependent type>' contains-errors '='
    |   | |-CXXDependentScopeMemberExpr 0x12580e298 <col:3, col:16> '<dependent type>' contains-errors lvalue ->max_oids
    |   | | `-RecoveryExpr 0x12580e270 <col:3> '<dependent type>' contains-errors lvalue
    |   | |   `-DeclRefExpr 0x12580e250 <col:3> 'int *' lvalue ParmVar 0x12580dd28 'snmp_object' 'int *'
    |   | `-IntegerLiteral 0x12580e2e0 <col:27> 'int' 0
    |   `-ReturnStmt 0x12580e358 <line:8:3, col:10>
    |     `-ImplicitCastExpr 0x12580e340 <col:10> 'int' contains-errors <LValueToRValue>
    |       `-DeclRefExpr 0x12580e320 <col:10> 'int' contains-errors lvalue Var 0x12580df58 'ret' 'int'
    |-IfStmt 0x125827d78 <line:11:2, line:16:2>
    | |-BinaryOperator 0x125827880 <line:11:6, col:26> 'int' contains-errors '!='
    | | |-CallExpr 0x125827800 <col:6, col:21> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x12580e3a8 <col:6> 'int ()' Function 0x12580e0b8 'Z_TYPE_P' 'int ()'
    | | | `-RecoveryExpr 0x12580e3c8 <col:15> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x125827860 <col:26> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x125827d50 <col:35, line:16:2>
    |   |-CallExpr 0x125827a80 <line:13:3, col:23> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x1258279d0 <col:3> 'int ()' Function 0x125827918 'zval_copy_ctor' 'int ()'
    |   | `-UnaryOperator 0x125827a68 <col:18, col:19> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   |   `-RecoveryExpr 0x125827a48 <col:19> '<dependent type>' contains-errors lvalue
    |   |-CallExpr 0x125827c38 <line:14:3, col:24> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x125827b88 <col:3> 'int ()' Function 0x125827ad0 'convert_to_long' 'int ()'
    |   | `-UnaryOperator 0x125827c20 <col:19, col:20> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   |   `-RecoveryExpr 0x125827c00 <col:20> '<dependent type>' contains-errors lvalue
    |   `-BinaryOperator 0x125827d30 <line:15:3, col:13> '<dependent type>' contains-errors '='
    |     |-RecoveryExpr 0x125827c80 <col:3> '<dependent type>' contains-errors lvalue
    |     | `-DeclRefExpr 0x125827c60 <col:3> 'int *' lvalue ParmVar 0x12580dda8 'newval' 'int *'
    |     `-UnaryOperator 0x125827d18 <col:12, col:13> '<dependent type>' contains-errors prefix '&' cannot overflow
    |       `-RecoveryExpr 0x125827cf8 <col:13> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x125828178 <line:18:2, line:22:2> has_else
    | |-BinaryOperator 0x125827f00 <line:18:6, col:25> 'int' contains-errors '>'
    | | |-CallExpr 0x125827eb8 <col:6, col:21> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x125827e78 <col:6> 'int ()' Function 0x125827dc0 'Z_LVAL_P' 'int ()'
    | | | `-RecoveryExpr 0x125827e98 <col:15> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x125827ee0 <col:25> 'int' 0
    | |-CompoundStmt 0x125828038 <col:28, line:20:2>
    | | `-BinaryOperator 0x125828018 <line:19:3, col:42> '<dependent type>' contains-errors '='
    | |   |-CXXDependentScopeMemberExpr 0x125827f68 <col:3, col:16> '<dependent type>' contains-errors lvalue ->max_oids
    | |   | `-RecoveryExpr 0x125827f40 <col:3> '<dependent type>' contains-errors lvalue
    | |   |   `-DeclRefExpr 0x125827f20 <col:3> 'int *' lvalue ParmVar 0x12580dd28 'snmp_object' 'int *'
    | |   `-CallExpr 0x125827ff0 <col:27, col:42> '<dependent type>' contains-errors
    | |     |-DeclRefExpr 0x125827fb0 <col:27> 'int ()' Function 0x125827dc0 'Z_LVAL_P' 'int ()'
    | |     `-RecoveryExpr 0x125827fd0 <col:36> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x125828168 <line:20:9, line:22:2>
    |-IfStmt 0x1258283d0 <line:24:2, line:26:2>
    | |-BinaryOperator 0x125828250 <line:24:6, col:17> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x1258281a8 <col:6> '<dependent type>' contains-errors lvalue
    | | `-UnaryOperator 0x125828238 <col:16, col:17> '<dependent type>' contains-errors prefix '&' cannot overflow
    | |   `-RecoveryExpr 0x125828218 <col:17> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x1258283b8 <col:23, line:26:2>
    |   `-CallExpr 0x125828390 <line:25:3, col:19> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x125828350 <col:3> 'int ()' Function 0x125828298 'zval_dtor' 'int ()'
    |     `-RecoveryExpr 0x125828370 <col:13> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x125828428 <line:28:2, col:9>
      `-ImplicitCastExpr 0x125828410 <col:9> 'int' contains-errors <LValueToRValue>
        `-DeclRefExpr 0x1258283f0 <col:9> 'int' contains-errors lvalue Var 0x12580df58 'ret' 'int'
