`-FunctionDecl 0x1441282c8  line:1:18 invalid performFormatDouble 'int (int *const, int)' static
  |-ParmVarDecl 0x144128128 <col:38, col:63> col:63 invalid expCtx 'int *const'
  |-ParmVarDecl 0x1441281a8 <col:71, col:77> col:77 invalid inputValue 'int'
  `-CompoundStmt 0x144141a10 <col:89, line:13:5>
    |-DeclStmt 0x144128488 <line:2:9, col:52>
    | `-VarDecl 0x144128398 <col:9, col:51> col:16 used doubleValue 'double' cinit
    |   `-CallExpr 0x144128468 <col:30, col:51> '<dependent type>' contains-errors
    |     `-CXXDependentScopeMemberExpr 0x144128420 <col:30, col:41> '<dependent type>' contains-errors lvalue .getDouble
    |       `-RecoveryExpr 0x144128400 <col:30> '<dependent type>' contains-errors lvalue
    `-IfStmt 0x1441419e0 <line:4:9, line:12:9> has_else
      |-RecoveryExpr 0x1441284b8 <line:4:13> '<dependent type>' contains-errors lvalue
      |-CompoundStmt 0x144128668 <col:38, line:6:9>
      `-IfStmt 0x1441419b0 <col:16, line:12:9> has_else
        |-RecoveryExpr 0x144128690 <line:6:20> '<dependent type>' contains-errors lvalue
        |-CompoundStmt 0x144128730 <col:45, line:8:9>
        `-IfStmt 0x144141980 <col:16, line:12:9> has_else
          |-BinaryOperator 0x144141890 <line:8:20, col:42> 'int' contains-errors '&&'
          | |-BinaryOperator 0x144141850 <col:20, col:35> 'int' contains-errors '=='
          | | |-ImplicitCastExpr 0x144141838 <col:20> 'double' contains-errors <LValueToRValue>
          | | | `-DeclRefExpr 0x144128740 <col:20> 'double' contains-errors lvalue Var 0x144128398 'doubleValue' 'double'
          | | `-FloatingLiteral 0x144128760 <col:35> 'double' 0.000000e+00
          | `-RecoveryExpr 0x144141870 <col:42> '<dependent type>' contains-errors lvalue
          |-CompoundStmt 0x1441418f0 <col:69, line:10:9>
          `-CompoundStmt 0x144141970 <col:16, line:12:9>
