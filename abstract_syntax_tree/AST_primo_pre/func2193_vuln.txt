`-FunctionDecl 0x1351419e8  line:1:5 invalid __udp_lib_get_port 'int (struct sock *, unsigned short, int, int *, int (*)(const struct sock *, const struct sock *))'
  |-ParmVarDecl 0x135129048 <col:24, col:37> col:37 used sk 'struct sock *'
  |-ParmVarDecl 0x1351290c8 <col:41, col:56> col:56 used snum 'unsigned short'
  |-ParmVarDecl 0x135141450 <line:2:10, col:28> col:28 invalid udptable 'int'
  |-ParmVarDecl 0x135141508 <col:40, col:45> col:45 used port_rover 'int *'
  |-ParmVarDecl 0x135141878 <line:3:10, line:4:30> line:3:16 used saddr_comp 'int (*)(const struct sock *, const struct sock *)'
  `-CompoundStmt 0x13580c5c8 <line:5:1, line:78:1>
    |-DeclStmt 0x135141ca8 <line:6:2, col:25>
    | |-RecordDecl 0x135141ab8 <col:2, col:9> col:9 struct hlist_node
    | `-VarDecl 0x135141c28 <col:2, col:21> col:21 used node 'struct hlist_node *'
    |-DeclStmt 0x135141de0 <line:7:2, col:25>
    | `-VarDecl 0x135141d78 <col:2, col:21> col:21 used head 'struct hlist_head *'
    |-DeclStmt 0x135141ec0 <line:8:2, col:18>
    | `-VarDecl 0x135141e58 <col:2, col:15> col:15 used sk2 'struct sock *'
    |-DeclStmt 0x135141f78 <line:9:2, col:18>
    | `-VarDecl 0x135141ef0 <col:2, col:17> col:9 used error 'int' cinit
    |   `-IntegerLiteral 0x135141f58 <col:17> 'int' 1
    |-CallExpr 0x1351421b0 <line:11:2, col:30> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x135142100 <col:2> 'int ()' Function 0x135142048 'write_lock_bh' 'int ()'
    | `-UnaryOperator 0x135142198 <col:16, col:17> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   `-RecoveryExpr 0x135142178 <col:17> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x13580bbd0 <line:12:2, line:66:2> has_else
    | |-BinaryOperator 0x135142248 <line:12:6, col:14> 'int' '=='
    | | |-ImplicitCastExpr 0x135142230 <col:6> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x135142218 <col:6> 'unsigned short' <LValueToRValue>
    | | |   `-DeclRefExpr 0x1351421d8 <col:6> 'unsigned short' lvalue ParmVar 0x1351290c8 'snum' 'unsigned short'
    | | `-IntegerLiteral 0x1351421f8 <col:14> 'int' 0
    | |-CompoundStmt 0x137008ab0 <col:17, line:55:2>
    | | |-DeclStmt 0x13580a490 <line:13:3, col:40>
    | | | |-VarDecl 0x135142280 <col:3, col:7> col:7 used best_size_so_far 'int'
    | | | |-VarDecl 0x135142300 <col:3, col:25> col:25 used best 'int'
    | | | |-VarDecl 0x135142380 <col:3, col:31> col:31 used result 'int'
    | | | `-VarDecl 0x13580a400 <col:3, col:39> col:39 used i 'int'
    | | |-BinaryOperator 0x13580a6a0 <line:18:3, col:22> 'int' '='
    | | | |-DeclRefExpr 0x13580a660 <col:3> 'int' lvalue Var 0x135142280 'best_size_so_far' 'int'
    | | | `-IntegerLiteral 0x13580a680 <col:22> 'int' 32767
    | | |-BinaryOperator 0x13580a788 <line:19:3, col:20> 'int' '='
    | | | |-DeclRefExpr 0x13580a6c0 <col:3> 'int' lvalue Var 0x135142300 'best' 'int'
    | | | `-BinaryOperator 0x13580a768 <col:10, col:20> 'int' '='
    | | |   |-DeclRefExpr 0x13580a6e0 <col:10> 'int' lvalue Var 0x135142380 'result' 'int'
    | | |   `-ImplicitCastExpr 0x13580a750 <col:19, col:20> 'int' <LValueToRValue>
    | | |     `-UnaryOperator 0x13580a738 <col:19, col:20> 'int' lvalue prefix '*' cannot overflow
    | | |       `-ImplicitCastExpr 0x13580a720 <col:20> 'int *' <LValueToRValue>
    | | |         `-DeclRefExpr 0x13580a700 <col:20> 'int *' lvalue ParmVar 0x135141508 'port_rover' 'int *'
    | | |-ForStmt 0x13580b338 <line:20:3, line:40:3>
    | | | |-BinaryOperator 0x13580a7e8 <line:20:8, col:12> 'int' '='
    | | | | |-DeclRefExpr 0x13580a7a8 <col:8> 'int' lvalue Var 0x13580a400 'i' 'int'
    | | | | `-IntegerLiteral 0x13580a7c8 <col:12> 'int' 0
    | | | |-<<<NULL>>>
    | | | |-BinaryOperator 0x13580a880 <col:15, col:19> 'int' contains-errors '<'
    | | | | |-DeclRefExpr 0x13580a808 <col:15> 'int' lvalue Var 0x13580a400 'i' 'int'
    | | | | `-RecoveryExpr 0x13580a860 <col:19> '<dependent type>' contains-errors lvalue
    | | | |-BinaryOperator 0x13580a910 <col:36, col:47> 'int' ','
    | | | | |-UnaryOperator 0x13580a8c0 <col:36, col:37> 'int' postfix '++'
    | | | | | `-DeclRefExpr 0x13580a8a0 <col:36> 'int' lvalue Var 0x13580a400 'i' 'int'
    | | | | `-UnaryOperator 0x13580a8f8 <col:41, col:47> 'int' postfix '++'
    | | | |   `-DeclRefExpr 0x13580a8d8 <col:41> 'int' lvalue Var 0x135142380 'result' 'int'
    | | | `-CompoundStmt 0x13580b2e8 <col:51, line:40:3>
    | | |   |-DeclStmt 0x13580a9b0 <line:21:4, col:12>
    | | |   | `-VarDecl 0x13580a948 <col:4, col:8> col:8 used size 'int'
    | | |   |-IfStmt 0x13580ae28 <line:24:4, line:30:4>
    | | |   | |-CallExpr 0x13580abe8 <line:24:8, col:24> 'int'
    | | |   | | |-ImplicitCastExpr 0x13580abd0 <col:8> 'int (*)()' <FunctionToPointerDecay>
    | | |   | | | `-DeclRefExpr 0x13580ab60 <col:8> 'int ()' Function 0x13580aaa8 'hlist_empty' 'int ()'
    | | |   | | `-ImplicitCastExpr 0x13580ac10 <col:20> 'struct hlist_head *' <LValueToRValue>
    | | |   | |   `-DeclRefExpr 0x13580ab80 <col:20> 'struct hlist_head *' lvalue Var 0x135141d78 'head' 'struct hlist_head *'
    | | |   | `-CompoundStmt 0x13580ae10 <col:27, line:30:4>
    | | |   |   `-GotoStmt 0x13580adf8 <line:29:5, col:10> 'gotit' 0x13580ada8
    | | |   |-BinaryOperator 0x13580ae88 <line:31:4, col:11> 'int' '='
    | | |   | |-DeclRefExpr 0x13580ae48 <col:4> 'int' lvalue Var 0x13580a948 'size' 'int'
    | | |   | `-IntegerLiteral 0x13580ae68 <col:11> 'int' 0
    | | |   |-CallExpr 0x13580b020 <line:32:4, col:31> 'int'
    | | |   | |-ImplicitCastExpr 0x13580b008 <col:4> 'int (*)()' <FunctionToPointerDecay>
    | | |   | | `-DeclRefExpr 0x13580af88 <col:4> 'int ()' Function 0x13580aed0 'sk_for_each' 'int ()'
    | | |   | |-ImplicitCastExpr 0x13580b058 <col:16> 'struct sock *' <LValueToRValue>
    | | |   | | `-DeclRefExpr 0x13580afa8 <col:16> 'struct sock *' lvalue Var 0x135141e58 'sk2' 'struct sock *'
    | | |   | |-ImplicitCastExpr 0x13580b070 <col:21> 'struct hlist_node *' <LValueToRValue>
    | | |   | | `-DeclRefExpr 0x13580afc8 <col:21> 'struct hlist_node *' lvalue Var 0x135141c28 'node' 'struct hlist_node *'
    | | |   | `-ImplicitCastExpr 0x13580b088 <col:27> 'struct hlist_head *' <LValueToRValue>
    | | |   |   `-DeclRefExpr 0x13580afe8 <col:27> 'struct hlist_head *' lvalue Var 0x135141d78 'head' 'struct hlist_head *'
    | | |   |-CompoundStmt 0x13580b1b8 <col:33, line:35:4>
    | | |   | `-IfStmt 0x13580b198 <line:33:5, line:34:11>
    | | |   |   |-BinaryOperator 0x13580b110 <line:33:9, col:19> 'int' '>='
    | | |   |   | |-UnaryOperator 0x13580b0c0 <col:9, col:11> 'int' prefix '++'
    | | |   |   | | `-DeclRefExpr 0x13580b0a0 <col:11> 'int' lvalue Var 0x13580a948 'size' 'int'
    | | |   |   | `-ImplicitCastExpr 0x13580b0f8 <col:19> 'int' <LValueToRValue>
    | | |   |   |   `-DeclRefExpr 0x13580b0d8 <col:19> 'int' lvalue Var 0x135142280 'best_size_so_far' 'int'
    | | |   |   `-GotoStmt 0x13580b180 <line:34:6, col:11> 'next' 0x13580b130
    | | |   |-BinaryOperator 0x13580b228 <line:36:4, col:23> 'int' '='
    | | |   | |-DeclRefExpr 0x13580b1d0 <col:4> 'int' lvalue Var 0x135142280 'best_size_so_far' 'int'
    | | |   | `-ImplicitCastExpr 0x13580b210 <col:23> 'int' <LValueToRValue>
    | | |   |   `-DeclRefExpr 0x13580b1f0 <col:23> 'int' lvalue Var 0x13580a948 'size' 'int'
    | | |   |-BinaryOperator 0x13580b2a0 <line:37:4, col:11> 'int' '='
    | | |   | |-DeclRefExpr 0x13580b248 <col:4> 'int' lvalue Var 0x135142300 'best' 'int'
    | | |   | `-ImplicitCastExpr 0x13580b288 <col:11> 'int' <LValueToRValue>
    | | |   |   `-DeclRefExpr 0x13580b268 <col:11> 'int' lvalue Var 0x135142380 'result' 'int'
    | | |   `-LabelStmt 0x13580b2c8 <line:38:3, line:39:4> 'next'
    | | |     `-NullStmt 0x13580b2c0 <col:4>
    | | |-BinaryOperator 0x13580b3c8 <line:41:3, col:12> 'int' '='
    | | | |-DeclRefExpr 0x13580b370 <col:3> 'int' lvalue Var 0x135142380 'result' 'int'
    | | | `-ImplicitCastExpr 0x13580b3b0 <col:12> 'int' <LValueToRValue>
    | | |   `-DeclRefExpr 0x13580b390 <col:12> 'int' lvalue Var 0x135142300 'best' 'int'
    | | |-ForStmt 0x1370087f8 <line:42:3, line:50:3>
    | | | |-BinaryOperator 0x137008240 <line:42:8, col:12> 'int' '='
    | | | | |-DeclRefExpr 0x137008200 <col:8> 'int' lvalue Var 0x13580a400 'i' 'int'
    | | | | `-IntegerLiteral 0x137008220 <col:12> 'int' 0
    | | | |-<<<NULL>>>
    | | | |-BinaryOperator 0x137008398 <col:15, col:31> 'int' contains-errors '<'
    | | | | |-DeclRefExpr 0x137008260 <col:15> 'int' lvalue Var 0x13580a400 'i' 'int'
    | | | | `-BinaryOperator 0x137008378 <col:19, col:31> '<dependent type>' contains-errors '/'
    | | | |   |-ParenExpr 0x1370082e0 <col:19, col:27> 'int'
    | | | |   | `-BinaryOperator 0x1370082c0 <col:20, col:25> 'int' '<<'
    | | | |   |   |-IntegerLiteral 0x137008280 <col:20> 'int' 1
    | | | |   |   `-IntegerLiteral 0x1370082a0 <col:25> 'int' 16
    | | | |   `-RecoveryExpr 0x137008358 <col:31> '<dependent type>' contains-errors lvalue
    | | | |-BinaryOperator 0x1370084c8 <line:43:8, col:23> 'int' contains-errors ','
    | | | | |-UnaryOperator 0x1370083d8 <col:8, col:9> 'int' postfix '++'
    | | | | | `-DeclRefExpr 0x1370083b8 <col:8> 'int' lvalue Var 0x13580a400 'i' 'int'
    | | | | `-CompoundAssignOperator 0x137008498 <col:13, col:23> 'int' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    | | | |   |-DeclRefExpr 0x1370083f0 <col:13> 'int' lvalue Var 0x135142380 'result' 'int'
    | | | |   `-RecoveryExpr 0x137008478 <col:23> '<dependent type>' contains-errors lvalue
    | | | `-CompoundStmt 0x1370087e0 <col:40, line:50:3>
    | | |   `-IfStmt 0x1370087c0 <line:48:4, line:49:5>
    | | |     |-UnaryOperator 0x1370087a0 <line:48:8, col:48> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | |     | `-CallExpr 0x137008770 <col:10, col:48> '<dependent type>' contains-errors
    | | |     |   |-DeclRefExpr 0x137008710 <col:10> 'int ()' Function 0x137008658 '__udp_lib_lport_inuse' 'int ()'
    | | |     |   |-DeclRefExpr 0x137008730 <col:32> 'int' lvalue Var 0x135142380 'result' 'int'
    | | |     |   `-RecoveryExpr 0x137008750 <col:40> '<dependent type>' contains-errors lvalue
    | | |     `-BreakStmt 0x1370087b8 <line:49:5>
    | | |-IfStmt 0x137008958 <line:51:3, line:52:9>
    | | | |-RecoveryExpr 0x1370088d0 <line:51:7, col:24> '_Bool' contains-errors
    | | | `-GotoStmt 0x137008940 <line:52:4, col:9> 'fail' 0x1370088f0
    | | `-LabelStmt 0x137008a90 <line:53:1, line:54:24> 'gotit'
    | |   `-BinaryOperator 0x137008a70 <col:3, col:24> 'int' '='
    | |     |-UnaryOperator 0x1370089b0 <col:3, col:4> 'int' lvalue prefix '*' cannot overflow
    | |     | `-ImplicitCastExpr 0x137008998 <col:4> 'int *' <LValueToRValue>
    | |     |   `-DeclRefExpr 0x137008978 <col:4> 'int *' lvalue ParmVar 0x135141508 'port_rover' 'int *'
    | |     `-ImplicitCastExpr 0x137008a58 <col:17, col:24> 'int' <IntegralCast>
    | |       `-BinaryOperator 0x137008a38 <col:17, col:24> 'unsigned short' '='
    | |         |-DeclRefExpr 0x1370089c8 <col:17> 'unsigned short' lvalue ParmVar 0x1351290c8 'snum' 'unsigned short'
    | |         `-ImplicitCastExpr 0x137008a20 <col:24> 'unsigned short' <IntegralCast>
    | |           `-ImplicitCastExpr 0x137008a08 <col:24> 'int' <LValueToRValue>
    | |             `-DeclRefExpr 0x1370089e8 <col:24> 'int' lvalue Var 0x135142380 'result' 'int'
    | `-CompoundStmt 0x13580bbb0 <line:55:9, line:66:2>
    |   |-CallExpr 0x137008c18 <line:58:3, col:30> 'int'
    |   | |-ImplicitCastExpr 0x137008c00 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x137008b80 <col:3> 'int ()' Function 0x13580aed0 'sk_for_each' 'int ()'
    |   | |-ImplicitCastExpr 0x137008c50 <col:15> 'struct sock *' <LValueToRValue>
    |   | | `-DeclRefExpr 0x137008ba0 <col:15> 'struct sock *' lvalue Var 0x135141e58 'sk2' 'struct sock *'
    |   | |-ImplicitCastExpr 0x137008c68 <col:20> 'struct hlist_node *' <LValueToRValue>
    |   | | `-DeclRefExpr 0x137008bc0 <col:20> 'struct hlist_node *' lvalue Var 0x135141c28 'node' 'struct hlist_node *'
    |   | `-ImplicitCastExpr 0x137008c80 <col:26> 'struct hlist_head *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x137008be0 <col:26> 'struct hlist_head *' lvalue Var 0x135141d78 'head' 'struct hlist_head *'
    |   `-IfStmt 0x13580bb90 <line:59:4, line:65:10>
    |     |-BinaryOperator 0x13580bb58 <line:59:8, line:64:29> 'int' contains-errors '&&'
    |     | |-BinaryOperator 0x1370091c8 <line:59:8, line:63:55> 'int' contains-errors '&&'
    |     | | |-BinaryOperator 0x137008f48 <line:59:8, line:61:47> 'int' contains-errors '&&'
    |     | | | |-BinaryOperator 0x137008dc8 <line:59:8, line:60:15> 'int' contains-errors '&&'
    |     | | | | |-BinaryOperator 0x137008d18 <line:59:8, col:24> 'int' contains-errors '=='
    |     | | | | | |-RecoveryExpr 0x137008cd0 <col:8, col:13> '<dependent type>' contains-errors lvalue
    |     | | | | | | `-DeclRefExpr 0x137008c98 <col:8> 'struct sock *' lvalue Var 0x135141e58 'sk2' 'struct sock *'
    |     | | | | | `-DeclRefExpr 0x137008cf8 <col:24> 'unsigned short' lvalue ParmVar 0x1351290c8 'snum' 'unsigned short'
    |     | | | | `-BinaryOperator 0x137008da8 <line:60:8, col:15> 'int' '!='
    |     | | | |   |-ImplicitCastExpr 0x137008d78 <col:8> 'struct sock *' <LValueToRValue>
    |     | | | |   | `-DeclRefExpr 0x137008d38 <col:8> 'struct sock *' lvalue Var 0x135141e58 'sk2' 'struct sock *'
    |     | | | |   `-ImplicitCastExpr 0x137008d90 <col:15> 'struct sock *' <LValueToRValue>
    |     | | | |     `-DeclRefExpr 0x137008d58 <col:15> 'struct sock *' lvalue ParmVar 0x135129048 'sk' 'struct sock *'
    |     | | | `-ParenExpr 0x137008f28 <line:61:8, col:47> 'int' contains-errors
    |     | | |   `-BinaryOperator 0x137008f08 <col:9, col:39> 'int' contains-errors '||'
    |     | | |     |-UnaryOperator 0x137008e60 <col:9, col:15> '<dependent type>' contains-errors prefix '!' cannot overflow
    |     | | |     | `-ImplicitCastExpr 0x137008e48 <col:10, col:15> '<dependent type>' contains-errors <LValueToRValue>
    |     | | |     |   `-RecoveryExpr 0x137008e20 <col:10, col:15> '<dependent type>' contains-errors lvalue
    |     | | |     |     `-DeclRefExpr 0x137008de8 <col:10> 'struct sock *' lvalue Var 0x135141e58 'sk2' 'struct sock *'
    |     | | |     `-UnaryOperator 0x137008ef0 <col:34, col:39> '<dependent type>' contains-errors prefix '!' cannot overflow
    |     | | |       `-ImplicitCastExpr 0x137008ed8 <col:35, col:39> '<dependent type>' contains-errors <LValueToRValue>
    |     | | |         `-RecoveryExpr 0x137008eb0 <col:35, col:39> '<dependent type>' contains-errors lvalue
    |     | | |           `-DeclRefExpr 0x137008e78 <col:35> 'struct sock *' lvalue ParmVar 0x135129048 'sk' 'struct sock *'
    |     | | `-ParenExpr 0x1370091a8 <line:62:8, line:63:55> 'int' contains-errors
    |     | |   `-BinaryOperator 0x137009188 <line:62:9, line:63:40> 'int' contains-errors '||'
    |     | |     |-BinaryOperator 0x137009088 <line:62:9, col:39> 'int' contains-errors '||'
    |     | |     | |-UnaryOperator 0x137008fe0 <col:9, col:15> '<dependent type>' contains-errors prefix '!' cannot overflow
    |     | |     | | `-ImplicitCastExpr 0x137008fc8 <col:10, col:15> '<dependent type>' contains-errors <LValueToRValue>
    |     | |     | |   `-RecoveryExpr 0x137008fa0 <col:10, col:15> '<dependent type>' contains-errors lvalue
    |     | |     | |     `-DeclRefExpr 0x137008f68 <col:10> 'struct sock *' lvalue Var 0x135141e58 'sk2' 'struct sock *'
    |     | |     | `-UnaryOperator 0x137009070 <col:34, col:39> '<dependent type>' contains-errors prefix '!' cannot overflow
    |     | |     |   `-ImplicitCastExpr 0x137009058 <col:35, col:39> '<dependent type>' contains-errors <LValueToRValue>
    |     | |     |     `-RecoveryExpr 0x137009030 <col:35, col:39> '<dependent type>' contains-errors lvalue
    |     | |     |       `-DeclRefExpr 0x137008ff8 <col:35> 'struct sock *' lvalue ParmVar 0x135129048 'sk' 'struct sock *'
    |     | |     `-BinaryOperator 0x137009168 <line:63:12, col:40> 'int' contains-errors '=='
    |     | |       |-RecoveryExpr 0x1370090e0 <col:12, col:17> '<dependent type>' contains-errors lvalue
    |     | |       | `-DeclRefExpr 0x1370090a8 <col:12> 'struct sock *' lvalue Var 0x135141e58 'sk2' 'struct sock *'
    |     | |       `-RecoveryExpr 0x137009140 <col:36, col:40> '<dependent type>' contains-errors lvalue
    |     | |         `-DeclRefExpr 0x137009108 <col:36> 'struct sock *' lvalue ParmVar 0x135129048 'sk' 'struct sock *'
    |     | `-CallExpr 0x13580bac8 <line:64:8, col:29> 'int'
    |     |   |-ImplicitCastExpr 0x13580bab0 <col:8, col:20> 'int (*)(const struct sock *, const struct sock *)' <FunctionToPointerDecay>
    |     |   | `-ParenExpr 0x13580ba50 <col:8, col:20> 'int (const struct sock *, const struct sock *)'
    |     |   |   `-UnaryOperator 0x13580ba38 <col:9, col:10> 'int (const struct sock *, const struct sock *)' prefix '*' cannot overflow
    |     |   |     `-ImplicitCastExpr 0x13580ba20 <col:10> 'int (*)(const struct sock *, const struct sock *)' <LValueToRValue>
    |     |   |       `-DeclRefExpr 0x13580ba00 <col:10> 'int (*)(const struct sock *, const struct sock *)' lvalue ParmVar 0x135141878 'saddr_comp' 'int (*)(const struct sock *, const struct sock *)'
    |     |   |-ImplicitCastExpr 0x13580bb10 <col:22> 'const struct sock *' <NoOp>
    |     |   | `-ImplicitCastExpr 0x13580baf8 <col:22> 'struct sock *' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x13580ba70 <col:22> 'struct sock *' lvalue ParmVar 0x135129048 'sk' 'struct sock *'
    |     |   `-ImplicitCastExpr 0x13580bb40 <col:26> 'const struct sock *' <NoOp>
    |     |     `-ImplicitCastExpr 0x13580bb28 <col:26> 'struct sock *' <LValueToRValue>
    |     |       `-DeclRefExpr 0x13580ba90 <col:26> 'struct sock *' lvalue Var 0x135141e58 'sk2' 'struct sock *'
    |     `-GotoStmt 0x13580bb78 <line:65:5, col:10> 'fail' 0x1370088f0
    |-BinaryOperator 0x13580bdc0 <line:67:2, col:21> '<dependent type>' contains-errors '='
    | |-RecoveryExpr 0x13580bd78 <col:2, col:15> '<dependent type>' contains-errors lvalue
    | | `-CallExpr 0x13580bd38 <col:2, col:12> 'int'
    | |   |-ImplicitCastExpr 0x13580bd20 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | |   | `-DeclRefExpr 0x13580bce0 <col:2> 'int ()' Function 0x13580bc28 'inet_sk' 'int ()'
    | |   `-ImplicitCastExpr 0x13580bd60 <col:10> 'struct sock *' <LValueToRValue>
    | |     `-DeclRefExpr 0x13580bd00 <col:10> 'struct sock *' lvalue ParmVar 0x135129048 'sk' 'struct sock *'
    | `-DeclRefExpr 0x13580bda0 <col:21> 'unsigned short' lvalue ParmVar 0x1351290c8 'snum' 'unsigned short'
    |-BinaryOperator 0x13580be60 <line:68:2, col:16> '<dependent type>' contains-errors '='
    | |-RecoveryExpr 0x13580be18 <col:2, col:6> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x13580bde0 <col:2> 'struct sock *' lvalue ParmVar 0x135129048 'sk' 'struct sock *'
    | `-DeclRefExpr 0x13580be40 <col:16> 'unsigned short' lvalue ParmVar 0x1351290c8 'snum' 'unsigned short'
    |-IfStmt 0x13580c3d8 <line:69:2, line:73:2>
    | |-CallExpr 0x13580bfb8 <line:69:6, col:20> 'int'
    | | |-ImplicitCastExpr 0x13580bfa0 <col:6> 'int (*)()' <FunctionToPointerDecay>
    | | | `-DeclRefExpr 0x13580bf60 <col:6> 'int ()' Function 0x13580bea8 'sk_unhashed' 'int ()'
    | | `-ImplicitCastExpr 0x13580bfe0 <col:18> 'struct sock *' <LValueToRValue>
    | |   `-DeclRefExpr 0x13580bf80 <col:18> 'struct sock *' lvalue ParmVar 0x135129048 'sk' 'struct sock *'
    | `-CompoundStmt 0x13580c3b8 <col:23, line:73:2>
    |   |-CallExpr 0x13580c1d0 <line:71:3, col:23> 'int'
    |   | |-ImplicitCastExpr 0x13580c1b8 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x13580c158 <col:3> 'int ()' Function 0x13580c0a0 'sk_add_node' 'int ()'
    |   | |-ImplicitCastExpr 0x13580c200 <col:15> 'struct sock *' <LValueToRValue>
    |   | | `-DeclRefExpr 0x13580c178 <col:15> 'struct sock *' lvalue ParmVar 0x135129048 'sk' 'struct sock *'
    |   | `-ImplicitCastExpr 0x13580c218 <col:19> 'struct hlist_head *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x13580c198 <col:19> 'struct hlist_head *' lvalue Var 0x135141d78 'head' 'struct hlist_head *'
    |   `-CallExpr 0x13580c390 <line:72:3, col:32> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x13580c310 <col:3> 'int ()' Function 0x13580c258 'sock_prot_inc_use' 'int ()'
    |     `-RecoveryExpr 0x13580c368 <col:21, col:25> '<dependent type>' contains-errors lvalue
    |       `-DeclRefExpr 0x13580c330 <col:21> 'struct sock *' lvalue ParmVar 0x135129048 'sk' 'struct sock *'
    |-BinaryOperator 0x13580c438 <line:74:2, col:10> 'int' '='
    | |-DeclRefExpr 0x13580c3f8 <col:2> 'int' lvalue Var 0x135141ef0 'error' 'int'
    | `-IntegerLiteral 0x13580c418 <col:10> 'int' 0
    |-LabelStmt 0x13580c560 <line:75:1, col:5> 'fail'
    | `-NullStmt 0x13580c558 <col:5>
    `-ReturnStmt 0x13580c5b8 <line:77:2, col:9>
      `-ImplicitCastExpr 0x13580c5a0 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x13580c580 <col:9> 'int' lvalue Var 0x135141ef0 'error' 'int'
