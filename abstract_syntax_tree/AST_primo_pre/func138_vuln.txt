`-FunctionDecl 0x11e128318  line:1:1 invalid tokenexec_continue 'int (int *, int *, int)'
  |-ParmVarDecl 0x11e128128 <col:20, col:29> col:29 invalid i_ctx_p 'int *'
  |-ParmVarDecl 0x11e1281a8 <col:38, col:54> col:54 invalid pstate 'int *'
  |-ParmVarDecl 0x11e128228 <col:62, col:67> col:67 invalid save 'int'
  `-CompoundStmt 0x11f80b718 <line:2:1, line:49:1>
    |-DeclStmt 0x11e128458 <line:4:5, col:13>
    | `-VarDecl 0x11e1283f0 <col:5, col:9> col:9 used code 'int'
    |-CallExpr 0x11e128658 <line:6:5, col:10> 'int'
    | |-ImplicitCastExpr 0x11e128640 <col:5> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x11e1285d0 <col:5> 'int ()' Function 0x11e128518 'pop' 'int ()'
    | `-IntegerLiteral 0x11e1285f0 <col:9> 'int' 1
    |-LabelStmt 0x11f808e50 <line:7:1, line:8:19> 'again'
    | `-CallExpr 0x11e1287b8 <col:5, col:19> 'int'
    |   |-ImplicitCastExpr 0x11e1287a0 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x11e128760 <col:5> 'int ()' Function 0x11e1286a8 'check_estack' 'int ()'
    |   `-IntegerLiteral 0x11e128780 <col:18> 'int' 1
    |-SwitchStmt 0x11f809090 <line:11:5, line:44:5>
    | |-ImplicitCastExpr 0x11f809078 <line:11:13> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x11f809058 <col:13> 'int' lvalue Var 0x11e1283f0 'code' 'int'
    | `-CompoundStmt 0x11f80b478 <col:19, line:44:5>
    |   |-CaseStmt 0x11f8090f0 <line:12:9, line:18:13>
    |   | |-ConstantExpr 0x11f8090d8 <line:12:14> 'int'
    |   | | `-IntegerLiteral 0x11f8090b8 <col:14> 'int' 0
    |   | `-IfStmt 0x11f809728 <line:13:13, line:18:13>
    |   |   |-CallExpr 0x11f8092d8 <line:13:17, col:34> '<dependent type>' contains-errors
    |   |   | |-DeclRefExpr 0x11f8091f8 <col:17> 'int ()' Function 0x11f809140 'r_is_proc' 'int ()'
    |   |   | `-BinaryOperator 0x11f8092b8 <col:27, col:33> '<dependent type>' contains-errors '+'
    |   |   |   |-RecoveryExpr 0x11f809298 <col:27> '<dependent type>' contains-errors lvalue
    |   |   |   `-IntegerLiteral 0x11f809230 <col:33> 'int' 1
    |   |   `-CompoundStmt 0x11f8096f8 <col:37, line:18:13>
    |   |     |-CallExpr 0x11f809438 <line:14:17, col:23> 'int'
    |   |     | |-ImplicitCastExpr 0x11f809420 <col:17> 'int (*)()' <FunctionToPointerDecay>
    |   |     | | `-DeclRefExpr 0x11f8093e0 <col:17> 'int ()' Function 0x11f809328 'push' 'int ()'
    |   |     | `-IntegerLiteral 0x11f809400 <col:22> 'int' 1
    |   |     |-CallExpr 0x11f809660 <line:15:17, col:39> '<dependent type>' contains-errors
    |   |     | |-DeclRefExpr 0x11f809540 <col:17> 'int ()' Function 0x11f809488 'ref_assign' 'int ()'
    |   |     | |-RecoveryExpr 0x11f809600 <col:28> '<dependent type>' contains-errors lvalue
    |   |     | `-BinaryOperator 0x11f809640 <col:32, col:38> '<dependent type>' contains-errors '+'
    |   |     |   |-RecoveryExpr 0x11f809620 <col:32> '<dependent type>' contains-errors lvalue
    |   |     |   `-IntegerLiteral 0x11f809590 <col:38> 'int' 1
    |   |     |-BinaryOperator 0x11f8096d0 <line:16:17, col:24> 'int' '='
    |   |     | |-DeclRefExpr 0x11f809690 <col:17> 'int' lvalue Var 0x11e1283f0 'code' 'int'
    |   |     | `-IntegerLiteral 0x11f8096b0 <col:24> 'int' 0
    |   |     `-BreakStmt 0x11f8096f0 <line:17:17>
    |   |-BreakStmt 0x11f809780 <line:23:13>
    |   |-BinaryOperator 0x11f8097c8 <line:25:13, col:20> 'int' '='
    |   | |-DeclRefExpr 0x11f809788 <col:13> 'int' lvalue Var 0x11e1283f0 'code' 'int'
    |   | `-IntegerLiteral 0x11f8097a8 <col:20> 'int' 0
    |   |-BreakStmt 0x11f8097e8 <line:26:13>
    |   |-SwitchStmt 0x11f8099a8 <line:30:13, line:35:13>
    |   | |-ImplicitCastExpr 0x11f809990 <line:30:21> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x11f809970 <col:21> 'int' lvalue Var 0x11e1283f0 'code' 'int'
    |   | `-CompoundStmt 0x11f809a90 <col:27, line:35:13>
    |   |   |-CaseStmt 0x11f809a08 <line:31:17, line:32:26>
    |   |   | |-ConstantExpr 0x11f8099f0 <line:31:22> 'int'
    |   |   | | `-IntegerLiteral 0x11f8099d0 <col:22> 'int' 0
    |   |   | `-GotoStmt 0x11f809a30 <line:32:21, col:26> 'again' 0x11f808e00
    |   |   `-ReturnStmt 0x11f809a80 <line:34:21, col:28>
    |   |     `-ImplicitCastExpr 0x11f809a68 <col:28> 'int' <LValueToRValue>
    |   |       `-DeclRefExpr 0x11f809a48 <col:28> 'int' lvalue Var 0x11e1283f0 'code' 'int'
    |   |-BreakStmt 0x11f809ab0 <line:36:13>
    |   |-DefaultStmt 0x11f80b450 <line:41:9, line:42:76>
    |   | `-CallExpr 0x11f80b418 <col:13, col:76> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x11f809d38 <col:13> 'int ()' Function 0x11f809c80 'gs_scanner_error_object' 'int ()'
    |   |   |-RecoveryExpr 0x11f809d58 <col:37> '<dependent type>' contains-errors lvalue
    |   |   |-RecoveryExpr 0x11f809d78 <col:46> '<dependent type>' contains-errors lvalue
    |   |   `-UnaryOperator 0x11f80b400 <col:54, col:64> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   |     `-CXXDependentScopeMemberExpr 0x11f809db8 <col:55, col:64> '<dependent type>' contains-errors lvalue ->error_object
    |   |       `-RecoveryExpr 0x11f809d98 <col:55> '<dependent type>' contains-errors lvalue
    |   `-BreakStmt 0x11f80b470 <line:43:13>
    |-IfStmt 0x11f80b6b0 <line:45:5, line:47:5>
    | |-UnaryOperator 0x11f80b500 <line:45:9, col:10> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x11f80b4e8 <col:10> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x11f80b4c8 <col:10> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x11f80b6a0 <col:16, line:47:5>
    `-ReturnStmt 0x11f80b708 <line:48:5, col:12>
      `-ImplicitCastExpr 0x11f80b6f0 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x11f80b6d0 <col:12> 'int' lvalue Var 0x11e1283f0 'code' 'int'
