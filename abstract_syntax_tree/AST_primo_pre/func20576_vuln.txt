`-FunctionDecl 0x133026600  line:1:12 proc_parse_options 'int (char *, struct pid_namespace *)' static
  |-ParmVarDecl 0x13300dcd8 <col:31, col:37> col:37 used options 'char *'
  |-ParmVarDecl 0x13300e2c8 <col:46, col:68> col:68 pid 'struct pid_namespace *'
  `-CompoundStmt 0x133029c80 <line:2:1, line:27:1>
    |-DeclStmt 0x133026780 <line:3:2, col:9>
    | `-VarDecl 0x133026718 <col:2, col:8> col:8 used p 'char *'
    |-CallExpr 0x1330269a8 <line:6:2, col:25> 'int'
    | |-ImplicitCastExpr 0x133026990 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x1330268c0 <col:2> 'int ()' Function 0x133026808 'pr_debug' 'int ()'
    | |-ImplicitCastExpr 0x1330269d8 <col:11> 'char *' <ArrayToPointerDecay>
    | | `-StringLiteral 0x133026920 <col:11> 'char[4]' lvalue "STR"
    | `-ImplicitCastExpr 0x1330269f0 <col:18> 'char *' <LValueToRValue>
    |   `-DeclRefExpr 0x133026940 <col:18> 'char *' lvalue ParmVar 0x13300dcd8 'options' 'char *'
    |-IfStmt 0x133026a88 <line:8:2, line:9:10>
    | |-UnaryOperator 0x133026a40 <line:8:6, col:7> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x133026a28 <col:7> 'char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x133026a08 <col:7> 'char *' lvalue ParmVar 0x13300dcd8 'options' 'char *'
    | `-ReturnStmt 0x133026a78 <line:9:3, col:10>
    |   `-IntegerLiteral 0x133026a58 <col:10> 'int' 1
    |-WhileStmt 0x133029c30 <line:11:2, line:24:2>
    | |-BinaryOperator 0x133026ed8 <line:11:9, col:42> 'int' contains-errors '!='
    | | |-ParenExpr 0x133026e98 <col:9, col:37> 'char *'
    | | | `-BinaryOperator 0x133026e78 <col:10, col:36> 'char *' '='
    | | |   |-DeclRefExpr 0x133026aa8 <col:10> 'char *' lvalue Var 0x133026718 'p' 'char *'
    | | |   `-ImplicitCastExpr 0x133026e60 <col:14, col:36> 'char *' <IntegralToPointer>
    | | |     `-CallExpr 0x133026e18 <col:14, col:36> 'int'
    | | |       |-ImplicitCastExpr 0x133026e00 <col:14> 'int (*)()' <FunctionToPointerDecay>
    | | |       | `-DeclRefExpr 0x133026ba8 <col:14> 'int ()' Function 0x133026af0 'strsep' 'int ()'
    | | |       |-UnaryOperator 0x133026c20 <col:21, col:22> 'char **' prefix '&' cannot overflow
    | | |       | `-DeclRefExpr 0x133026bc8 <col:22> 'char *' lvalue ParmVar 0x13300dcd8 'options' 'char *'
    | | |       `-ImplicitCastExpr 0x133026e48 <col:31> 'char *' <ArrayToPointerDecay>
    | | |         `-StringLiteral 0x133026c38 <col:31> 'char[4]' lvalue "STR"
    | | `-RecoveryExpr 0x133026eb8 <col:42> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x133029c00 <col:48, line:24:2>
    |   |-DeclStmt 0x133026f78 <line:12:3, col:12>
    |   | `-VarDecl 0x133026f10 <col:3, col:7> col:7 used token 'int'
    |   |-IfStmt 0x133027018 <line:13:3, line:14:4>
    |   | |-UnaryOperator 0x133026ff8 <line:13:7, col:9> 'int' prefix '!' cannot overflow
    |   | | `-ImplicitCastExpr 0x133026fe0 <col:8, col:9> 'char' <LValueToRValue>
    |   | |   `-UnaryOperator 0x133026fc8 <col:8, col:9> 'char' lvalue prefix '*' cannot overflow
    |   | |     `-ImplicitCastExpr 0x133026fb0 <col:9> 'char *' <LValueToRValue>
    |   | |       `-DeclRefExpr 0x133026f90 <col:9> 'char *' lvalue Var 0x133026718 'p' 'char *'
    |   | `-ContinueStmt 0x133027010 <line:14:4>
    |   |-BinaryOperator 0x133027310 <line:17:3, col:38> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x1330270b0 <col:3> 'int' lvalue Var 0x133026f10 'token' 'int'
    |   | `-CallExpr 0x1330272d8 <col:11, col:38> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x1330271b0 <col:11> 'int ()' Function 0x1330270f8 'match_token' 'int ()'
    |   |   |-DeclRefExpr 0x1330271d0 <col:23> 'char *' lvalue Var 0x133026718 'p' 'char *'
    |   |   |-RecoveryExpr 0x133027298 <col:26> '<dependent type>' contains-errors lvalue
    |   |   `-RecoveryExpr 0x1330272b8 <col:34> '<dependent type>' contains-errors lvalue
    |   `-SwitchStmt 0x133027368 <line:18:3, line:23:3>
    |     |-ImplicitCastExpr 0x133027350 <line:18:11> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x133027330 <col:11> 'int' lvalue Var 0x133026f10 'token' 'int'
    |     `-CompoundStmt 0x1330275e0 <col:18, line:23:3>
    |       |-DefaultStmt 0x133027590 <line:19:3, line:21:19>
    |       | `-CallExpr 0x133027530 <line:20:4, line:21:19> 'int'
    |       |   |-ImplicitCastExpr 0x133027518 <line:20:4> 'int (*)()' <FunctionToPointerDecay>
    |       |   | `-DeclRefExpr 0x133027470 <col:4> 'int ()' Function 0x1330273b8 'pr_err' 'int ()'
    |       |   |-ImplicitCastExpr 0x133027560 <col:11, line:21:11> 'char *' <ArrayToPointerDecay>
    |       |   | `-StringLiteral 0x1330274d0 <line:20:11, line:21:11> 'char[7]' lvalue "STRSTR"
    |       |   `-ImplicitCastExpr 0x133027578 <col:18> 'char *' <LValueToRValue>
    |       |     `-DeclRefExpr 0x1330274f8 <col:18> 'char *' lvalue Var 0x133026718 'p' 'char *'
    |       `-ReturnStmt 0x1330275d0 <line:22:4, col:11>
    |         `-IntegerLiteral 0x1330275b0 <col:11> 'int' 0
    `-ReturnStmt 0x133029c70 <line:26:2, col:9>
      `-IntegerLiteral 0x133029c50 <col:9> 'int' 1
