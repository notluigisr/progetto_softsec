`-FunctionDecl 0x14a928548  line:1:12 invalid bson_validate_string 'int (int *, const unsigned char *, const int, const char, const char, const char)' static
  |-ParmVarDecl 0x14a928128 <col:34, col:40> col:40 referenced invalid b 'int *'
  |-ParmVarDecl 0x14a9281d8 <col:43, col:64> col:64 used string 'const unsigned char *'
  |-ParmVarDecl 0x14a928258 <line:2:34, col:44> col:44 used length 'const int'
  |-ParmVarDecl 0x14a9282d0 <col:52, col:63> col:63 used check_utf8 'const char'
  |-ParmVarDecl 0x14a928348 <col:75, col:86> col:86 used check_dot 'const char'
  |-ParmVarDecl 0x14a9283c0 <line:3:34, col:45> col:45 used check_dollar 'const char'
  `-CompoundStmt 0x14c00a9c8 <col:60, line:33:1>
    |-DeclStmt 0x14a9286c0 <line:5:5, col:21>
    | `-VarDecl 0x14a928638 <col:5, col:20> col:9 used position 'int' cinit
    |   `-IntegerLiteral 0x14a9286a0 <col:20> 'int' 0
    |-DeclStmt 0x14a928778 <line:6:5, col:28>
    | `-VarDecl 0x14a9286f0 <col:5, col:27> col:9 used sequence_length 'int' cinit
    |   `-IntegerLiteral 0x14a928758 <col:27> 'int' 1
    |-IfStmt 0x14c0090d0 <line:8:5, line:11:5>
    | |-BinaryOperator 0x14c008cd0 <line:8:9, col:38> 'int' '&&'
    | | |-ImplicitCastExpr 0x14c008cb8 <col:9> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x14c008ca0 <col:9> 'char' <LValueToRValue>
    | | |   `-DeclRefExpr 0x14a928790 <col:9> 'const char' lvalue ParmVar 0x14a9283c0 'check_dollar' 'const char'
    | | `-BinaryOperator 0x14c008c80 <col:25, col:38> 'int' '=='
    | |   |-ImplicitCastExpr 0x14c008c68 <col:25, col:33> 'int' <IntegralCast>
    | |   | `-ImplicitCastExpr 0x14c008c50 <col:25, col:33> 'unsigned char' <LValueToRValue>
    | |   |   `-ArraySubscriptExpr 0x14c008c18 <col:25, col:33> 'const unsigned char' lvalue
    | |   |     |-ImplicitCastExpr 0x14c008c00 <col:25> 'const unsigned char *' <LValueToRValue>
    | |   |     | `-DeclRefExpr 0x14a9287b0 <col:25> 'const unsigned char *' lvalue ParmVar 0x14a9281d8 'string' 'const unsigned char *'
    | |   |     `-IntegerLiteral 0x14a9287d0 <col:32> 'int' 0
    | |   `-CharacterLiteral 0x14c008c38 <col:38> 'int' 36
    | `-CompoundStmt 0x14c0090b8 <col:44, line:11:5>
    |   `-IfStmt 0x14c009098 <line:9:9, line:10:23>
    |     |-UnaryOperator 0x14c008f58 <line:9:13, col:52> 'int' prefix '!' cannot overflow
    |     | `-CallExpr 0x14c008ef8 <col:14, col:52> 'int'
    |     |   |-ImplicitCastExpr 0x14c008ee0 <col:14> 'int (*)()' <FunctionToPointerDecay>
    |     |   | `-DeclRefExpr 0x14c008e50 <col:14> 'int ()' Function 0x14c008d98 'bson_string_is_db_ref' 'int ()'
    |     |   |-ImplicitCastExpr 0x14c008f28 <col:37> 'const unsigned char *' <LValueToRValue>
    |     |   | `-DeclRefExpr 0x14c008e70 <col:37> 'const unsigned char *' lvalue ParmVar 0x14a9281d8 'string' 'const unsigned char *'
    |     |   `-ImplicitCastExpr 0x14c008f40 <col:45> 'int' <LValueToRValue>
    |     |     `-DeclRefExpr 0x14c008e90 <col:45> 'const int' lvalue ParmVar 0x14a928258 'length' 'const int'
    |     `-CompoundAssignOperator 0x14c009068 <line:10:13, col:23> '<dependent type>' contains-errors '|=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    |       |-CXXDependentScopeMemberExpr 0x14c008fb8 <col:13, col:16> '<dependent type>' contains-errors lvalue ->err
    |       | `-RecoveryExpr 0x14c008f90 <col:13> '<dependent type>' contains-errors lvalue
    |       |   `-DeclRefExpr 0x14c008f70 <col:13> 'int *' lvalue ParmVar 0x14a928128 'b' 'int *'
    |       `-RecoveryExpr 0x14c009048 <col:23> '<dependent type>' contains-errors lvalue
    |-WhileStmt 0x14c00a960 <line:13:5, line:30:5>
    | |-BinaryOperator 0x14c009160 <line:13:13, col:24> 'int' '<'
    | | |-ImplicitCastExpr 0x14c009130 <col:13> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14c0090f0 <col:13> 'int' lvalue Var 0x14a928638 'position' 'int'
    | | `-ImplicitCastExpr 0x14c009148 <col:24> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x14c009110 <col:24> 'const int' lvalue ParmVar 0x14a928258 'length' 'const int'
    | `-CompoundStmt 0x14c00a938 <col:33, line:30:5>
    |   |-IfStmt 0x14c009460 <line:14:9, line:16:9>
    |   | |-BinaryOperator 0x14c009300 <line:14:14, col:53> 'int' '&&'
    |   | | |-ImplicitCastExpr 0x14c0092e8 <col:14> 'int' <IntegralCast>
    |   | | | `-ImplicitCastExpr 0x14c0092d0 <col:14> 'char' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x14c009180 <col:14> 'const char' lvalue ParmVar 0x14a928348 'check_dot' 'const char'
    |   | | `-BinaryOperator 0x14c0092b0 <col:27, col:53> 'int' '=='
    |   | |   |-ImplicitCastExpr 0x14c009298 <col:27, col:48> 'int' <IntegralCast>
    |   | |   | `-ImplicitCastExpr 0x14c009280 <col:27, col:48> 'unsigned char' <LValueToRValue>
    |   | |   |   `-UnaryOperator 0x14c009250 <col:27, col:48> 'const unsigned char' lvalue prefix '*' cannot overflow
    |   | |   |     `-ParenExpr 0x14c009230 <col:28, col:48> 'const unsigned char *'
    |   | |   |       `-BinaryOperator 0x14c009210 <col:30, col:39> 'const unsigned char *' '+'
    |   | |   |         |-ImplicitCastExpr 0x14c0091e0 <col:30> 'const unsigned char *' <LValueToRValue>
    |   | |   |         | `-DeclRefExpr 0x14c0091a0 <col:30> 'const unsigned char *' lvalue ParmVar 0x14a9281d8 'string' 'const unsigned char *'
    |   | |   |         `-ImplicitCastExpr 0x14c0091f8 <col:39> 'int' <LValueToRValue>
    |   | |   |           `-DeclRefExpr 0x14c0091c0 <col:39> 'int' lvalue Var 0x14a928638 'position' 'int'
    |   | |   `-CharacterLiteral 0x14c009268 <col:53> 'int' 46
    |   | `-CompoundStmt 0x14c009448 <col:59, line:16:9>
    |   |   `-CompoundAssignOperator 0x14c009418 <line:15:13, col:23> '<dependent type>' contains-errors '|=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    |   |     |-CXXDependentScopeMemberExpr 0x14c009368 <col:13, col:16> '<dependent type>' contains-errors lvalue ->err
    |   |     | `-RecoveryExpr 0x14c009340 <col:13> '<dependent type>' contains-errors lvalue
    |   |     |   `-DeclRefExpr 0x14c009320 <col:13> 'int *' lvalue ParmVar 0x14a928128 'b' 'int *'
    |   |     `-RecoveryExpr 0x14c0093f8 <col:23> '<dependent type>' contains-errors lvalue
    |   |-IfStmt 0x14c00a890 <line:18:9, line:28:9>
    |   | |-ImplicitCastExpr 0x14c0094a0 <line:18:14> 'char' <LValueToRValue>
    |   | | `-DeclRefExpr 0x14c009480 <col:14> 'const char' lvalue ParmVar 0x14a9282d0 'check_utf8' 'const char'
    |   | `-CompoundStmt 0x14c00a870 <col:27, line:28:9>
    |   |   |-IfStmt 0x14c009870 <line:20:13, line:23:13>
    |   |   | |-BinaryOperator 0x14c0096c0 <line:20:18, col:51> 'int' '>'
    |   |   | | |-ParenExpr 0x14c009668 <col:18, col:47> 'int'
    |   |   | | | `-BinaryOperator 0x14c009648 <col:20, col:31> 'int' '+'
    |   |   | | |   |-ImplicitCastExpr 0x14c009618 <col:20> 'int' <LValueToRValue>
    |   |   | | |   | `-DeclRefExpr 0x14c0095d8 <col:20> 'int' lvalue Var 0x14a928638 'position' 'int'
    |   |   | | |   `-ImplicitCastExpr 0x14c009630 <col:31> 'int' <LValueToRValue>
    |   |   | | |     `-DeclRefExpr 0x14c0095f8 <col:31> 'int' lvalue Var 0x14a9286f0 'sequence_length' 'int'
    |   |   | | `-ImplicitCastExpr 0x14c0096a8 <col:51> 'int' <LValueToRValue>
    |   |   | |   `-DeclRefExpr 0x14c009688 <col:51> 'const int' lvalue ParmVar 0x14a928258 'length' 'const int'
    |   |   | `-CompoundStmt 0x14c009850 <col:60, line:23:13>
    |   |   |   |-CompoundAssignOperator 0x14c0097d8 <line:21:17, col:27> '<dependent type>' contains-errors '|=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    |   |   |   | |-CXXDependentScopeMemberExpr 0x14c009728 <col:17, col:20> '<dependent type>' contains-errors lvalue ->err
    |   |   |   | | `-RecoveryExpr 0x14c009700 <col:17> '<dependent type>' contains-errors lvalue
    |   |   |   | |   `-DeclRefExpr 0x14c0096e0 <col:17> 'int *' lvalue ParmVar 0x14a928128 'b' 'int *'
    |   |   |   | `-RecoveryExpr 0x14c0097b8 <col:27> '<dependent type>' contains-errors lvalue
    |   |   |   `-ReturnStmt 0x14c009840 <line:22:17, col:24>
    |   |   |     `-RecoveryExpr 0x14c009820 <col:24> '<dependent type>' contains-errors lvalue
    |   |   `-IfStmt 0x14c00a850 <line:24:13, line:27:13>
    |   |     |-UnaryOperator 0x14c009aa0 <line:24:18, col:67> 'int' prefix '!' cannot overflow
    |   |     | `-CallExpr 0x14c009a58 <col:19, col:67> 'int'
    |   |     |   |-ImplicitCastExpr 0x14c009a40 <col:19> 'int (*)()' <FunctionToPointerDecay>
    |   |     |   | `-DeclRefExpr 0x14c009970 <col:19> 'int ()' Function 0x14c0098b8 'isLegalUTF8' 'int ()'
    |   |     |   |-BinaryOperator 0x14c009a00 <col:32, col:41> 'const unsigned char *' '+'
    |   |     |   | |-ImplicitCastExpr 0x14c0099d0 <col:32> 'const unsigned char *' <LValueToRValue>
    |   |     |   | | `-DeclRefExpr 0x14c009990 <col:32> 'const unsigned char *' lvalue ParmVar 0x14a9281d8 'string' 'const unsigned char *'
    |   |     |   | `-ImplicitCastExpr 0x14c0099e8 <col:41> 'int' <LValueToRValue>
    |   |     |   |   `-DeclRefExpr 0x14c0099b0 <col:41> 'int' lvalue Var 0x14a928638 'position' 'int'
    |   |     |   `-ImplicitCastExpr 0x14c009a88 <col:51> 'int' <LValueToRValue>
    |   |     |     `-DeclRefExpr 0x14c009a20 <col:51> 'int' lvalue Var 0x14a9286f0 'sequence_length' 'int'
    |   |     `-CompoundStmt 0x14c00a830 <col:71, line:27:13>
    |   |       |-CompoundAssignOperator 0x14c009bb0 <line:25:17, col:27> '<dependent type>' contains-errors '|=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    |   |       | |-CXXDependentScopeMemberExpr 0x14c009b00 <col:17, col:20> '<dependent type>' contains-errors lvalue ->err
    |   |       | | `-RecoveryExpr 0x14c009ad8 <col:17> '<dependent type>' contains-errors lvalue
    |   |       | |   `-DeclRefExpr 0x14c009ab8 <col:17> 'int *' lvalue ParmVar 0x14a928128 'b' 'int *'
    |   |       | `-RecoveryExpr 0x14c009b90 <col:27> '<dependent type>' contains-errors lvalue
    |   |       `-ReturnStmt 0x14c00a820 <line:26:17, col:24>
    |   |         `-RecoveryExpr 0x14c00a800 <col:24> '<dependent type>' contains-errors lvalue
    |   `-CompoundAssignOperator 0x14c00a908 <line:29:9, col:21> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |     |-DeclRefExpr 0x14c00a8b0 <col:9> 'int' lvalue Var 0x14a928638 'position' 'int'
    |     `-ImplicitCastExpr 0x14c00a8f0 <col:21> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x14c00a8d0 <col:21> 'int' lvalue Var 0x14a9286f0 'sequence_length' 'int'
    `-ReturnStmt 0x14c00a9b8 <line:32:5, col:12>
      `-RecoveryExpr 0x14c00a998 <col:12> '<dependent type>' contains-errors lvalue
