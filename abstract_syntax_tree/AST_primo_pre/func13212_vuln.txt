`-FunctionDecl 0x12b9289a8  line:1:1 PHP_FUNCTION 'int (int)'
  |-ParmVarDecl 0x12b9288d8 <col:14> col:14 pcntl_signal 'int'
  `-CompoundStmt 0x12b941ea0 <line:2:1, line:61:1>
    |-DeclStmt 0x12b928be8 <line:4:2, col:17>
    | `-VarDecl 0x12b928b80 <col:2, col:8> col:8 used func_name 'char *'
    |-DeclStmt 0x12b928c80 <line:5:2, col:12>
    | `-VarDecl 0x12b928c18 <col:2, col:7> col:7 used signo 'long'
    |-IfStmt 0x12b928f98 <line:8:2, line:10:2>
    | |-RecoveryExpr 0x12b928f50 <line:8:6, col:101> '_Bool' contains-errors
    | `-CompoundStmt 0x12b928f80 <col:110, line:10:2>
    |   `-ReturnStmt 0x12b928f70 <line:9:3>
    |-IfStmt 0x12d008e28 <line:12:2, line:15:2>
    | |-BinaryOperator 0x12d008ce0 <line:12:6, col:27> 'int' '||'
    | | |-BinaryOperator 0x12d008c30 <col:6, col:14> 'int' '<'
    | | | |-ImplicitCastExpr 0x12d008c00 <col:6> 'long' <LValueToRValue>
    | | | | `-DeclRefExpr 0x12b928fb8 <col:6> 'long' lvalue Var 0x12b928c18 'signo' 'long'
    | | | `-ImplicitCastExpr 0x12d008c18 <col:14> 'long' <IntegralCast>
    | | |   `-IntegerLiteral 0x12b928fd8 <col:14> 'int' 1
    | | `-BinaryOperator 0x12d008cc0 <col:19, col:27> 'int' '>'
    | |   |-ImplicitCastExpr 0x12d008c90 <col:19> 'long' <LValueToRValue>
    | |   | `-DeclRefExpr 0x12d008c50 <col:19> 'long' lvalue Var 0x12b928c18 'signo' 'long'
    | |   `-ImplicitCastExpr 0x12d008ca8 <col:27> 'long' <IntegralCast>
    | |     `-IntegerLiteral 0x12d008c70 <col:27> 'int' 32
    | `-CompoundStmt 0x12d008e18 <col:31, line:15:2>
    |-IfStmt 0x12d009a90 <line:17:2, line:27:2>
    | |-UnaryOperator 0x12d008fe8 <line:17:6, col:21> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-CallExpr 0x12d008fc0 <col:7, col:21> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x12d008f28 <col:7> 'int ()' Function 0x12d008e70 'PCNTL_G' 'int ()'
    | |   `-RecoveryExpr 0x12d008fa0 <col:15> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x12d009a70 <col:24, line:27:2>
    |   |-DeclStmt 0x12d009080 <line:19:3, col:8>
    |   | `-VarDecl 0x12d009018 <col:3, col:7> col:7 used i 'int'
    |   `-ForStmt 0x12d009a38 <line:20:3, line:26:3>
    |     |-BinaryOperator 0x12d0090d8 <line:20:8, col:12> 'int' '='
    |     | |-DeclRefExpr 0x12d009098 <col:8> 'int' lvalue Var 0x12d009018 'i' 'int'
    |     | `-IntegerLiteral 0x12d0090b8 <col:12> 'int' 0
    |     |-<<<NULL>>>
    |     |-BinaryOperator 0x12d009150 <col:15, col:19> 'int' '<'
    |     | |-ImplicitCastExpr 0x12d009138 <col:15> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x12d0090f8 <col:15> 'int' lvalue Var 0x12d009018 'i' 'int'
    |     | `-IntegerLiteral 0x12d009118 <col:19> 'int' 32
    |     |-UnaryOperator 0x12d009190 <col:23, col:24> 'int' postfix '++'
    |     | `-DeclRefExpr 0x12d009170 <col:23> 'int' lvalue Var 0x12d009018 'i' 'int'
    |     `-CompoundStmt 0x12d009a20 <col:28, line:26:3>
    |       `-DeclStmt 0x12d009398 <line:21:4, col:41>
    |         |-RecordDecl 0x12d0091a8 <col:4, col:11> col:11 struct php_pcntl_pending_signal
    |         `-VarDecl 0x12d009318 <col:4, col:37> col:37 used psig 'struct php_pcntl_pending_signal *'
    |-IfStmt 0x12b9415c0 <line:30:2, line:41:2>
    | |-RecoveryExpr 0x12d009bb0 <line:30:6, col:24> '_Bool' contains-errors
    | `-CompoundStmt 0x12b9415a0 <col:33, line:41:2>
    |   |-IfStmt 0x12b9413b0 <line:31:3, line:34:3>
    |   | |-RecoveryExpr 0x12b9412f8 <line:31:7, col:72> '_Bool' contains-errors
    |   | `-CompoundStmt 0x12b9413a0 <col:81, line:34:3>
    |   `-IfStmt 0x12b941580 <line:35:3, line:39:3>
    |     |-RecoveryExpr 0x12b9414f0 <line:35:7, col:82> '_Bool' contains-errors
    |     `-CompoundStmt 0x12b941570 <col:91, line:39:3>
    |-IfStmt 0x12b941998 <line:43:2, line:48:2>
    | |-RecoveryExpr 0x12b941768 <line:43:6, col:55> '_Bool' contains-errors
    | `-CompoundStmt 0x12b941980 <col:58, line:48:2>
    |   `-CallExpr 0x12b941940 <line:46:3, col:18> 'int'
    |     |-ImplicitCastExpr 0x12b941928 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x12b9418e8 <col:3> 'int ()' Function 0x12b941830 'efree' 'int ()'
    |     `-ImplicitCastExpr 0x12b941968 <col:9> 'char *' <LValueToRValue>
    |       `-DeclRefExpr 0x12b941908 <col:9> 'char *' lvalue Var 0x12b928b80 'func_name' 'char *'
    |-CallExpr 0x12b941a10 <line:49:2, col:17> 'int'
    | |-ImplicitCastExpr 0x12b9419f8 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x12b9419b8 <col:2> 'int ()' Function 0x12b941830 'efree' 'int ()'
    | `-ImplicitCastExpr 0x12b941a38 <col:8> 'char *' <LValueToRValue>
    |   `-DeclRefExpr 0x12b9419d8 <col:8> 'char *' lvalue Var 0x12b928b80 'func_name' 'char *'
    `-IfStmt 0x12b941e80 <line:55:2, line:59:2>
      |-RecoveryExpr 0x12b941df0 <line:55:6, col:77> '_Bool' contains-errors
      `-CompoundStmt 0x12b941e70 <col:86, line:59:2>
