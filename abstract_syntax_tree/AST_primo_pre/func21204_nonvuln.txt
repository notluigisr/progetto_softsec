`-FunctionDecl 0x13e920518  line:1:1 invalid _zip_set_open_error 'int (int *, const int *, int)'
  |-ParmVarDecl 0x13e920308 <col:21, col:26> col:26 used zep 'int *'
  |-ParmVarDecl 0x13e9203a0 <col:31, col:50> col:50 invalid err 'const int *'
  |-ParmVarDecl 0x13e920420 <col:55, col:59> col:59 used ze 'int'
  `-CompoundStmt 0x13e939c90 <line:2:1, line:12:1>
    |-IfStmt 0x13e939b70 <line:3:5, line:8:5>
    | |-RecoveryExpr 0x13e9205d8 <line:3:9> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x13e939b50 <col:14, line:8:5>
    |   |-BinaryOperator 0x13e9207d8 <line:4:2, col:29> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x13e9205f8 <col:2> 'int' lvalue ParmVar 0x13e920420 'ze' 'int'
    |   | `-CallExpr 0x13e9207b0 <col:7, col:29> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x13e920770 <col:7> 'int ()' Function 0x13e9206b8 'zip_error_code_zip' 'int ()'
    |   |   `-RecoveryExpr 0x13e920790 <col:26> '<dependent type>' contains-errors lvalue
    |   `-IfStmt 0x13e939b30 <line:5:2, line:7:2>
    |     |-BinaryOperator 0x13e920998 <line:5:6, col:36> 'int' contains-errors '=='
    |     | |-CallExpr 0x13e920918 <col:6, col:31> '<dependent type>' contains-errors
    |     | | |-DeclRefExpr 0x13e9208d8 <col:6> 'int ()' Function 0x13e920820 'zip_error_system_type' 'int ()'
    |     | | `-RecoveryExpr 0x13e9208f8 <col:28> '<dependent type>' contains-errors lvalue
    |     | `-RecoveryExpr 0x13e920978 <col:36> '<dependent type>' contains-errors lvalue
    |     `-CompoundStmt 0x13e939b20 <col:48, line:7:2>
    `-IfStmt 0x13e939c70 <line:10:5, line:11:9>
      |-ImplicitCastExpr 0x13e939bb0 <line:10:9> 'int *' <LValueToRValue>
      | `-DeclRefExpr 0x13e939b90 <col:9> 'int *' lvalue ParmVar 0x13e920308 'zep' 'int *'
      `-BinaryOperator 0x13e939c50 <line:11:2, col:9> 'int' '='
        |-UnaryOperator 0x13e939c00 <col:2, col:3> 'int' lvalue prefix '*' cannot overflow
        | `-ImplicitCastExpr 0x13e939be8 <col:3> 'int *' <LValueToRValue>
        |   `-DeclRefExpr 0x13e939bc8 <col:3> 'int *' lvalue ParmVar 0x13e920308 'zep' 'int *'
        `-ImplicitCastExpr 0x13e939c38 <col:9> 'int' <LValueToRValue>
          `-DeclRefExpr 0x13e939c18 <col:9> 'int' lvalue ParmVar 0x13e920420 'ze' 'int'
