`-FunctionDecl 0x14900dfa0  line:1:6 invalid Huff_offsetReceive 'void (int *, int *, int *, int *)'
  |-ParmVarDecl 0x14900dd28 <col:26, col:34> col:34 referenced invalid node 'int *'
  |-ParmVarDecl 0x14900dda8 <col:40, col:45> col:45 used ch 'int *'
  |-ParmVarDecl 0x14900de28 <col:49, col:55> col:55 invalid fin 'int *'
  |-ParmVarDecl 0x14900dea8 <col:60, col:65> col:65 used offset 'int *'
  `-CompoundStmt 0x149809b20 <col:73, line:17:1>
    |-WhileStmt 0x1498097d0 <line:3:2, line:9:2>
    | |-BinaryOperator 0x14900e1d8 <line:3:9, col:33> 'int' contains-errors '&&'
    | | |-RecoveryExpr 0x14900e0b8 <col:9> '<dependent type>' contains-errors lvalue
    | | `-BinaryOperator 0x14900e1b8 <col:17, col:33> 'int' contains-errors '=='
    | |   |-CXXDependentScopeMemberExpr 0x14900e0f8 <col:17, col:23> '<dependent type>' contains-errors lvalue ->symbol
    | |   | `-RecoveryExpr 0x14900e0d8 <col:17> '<dependent type>' contains-errors lvalue
    | |   `-RecoveryExpr 0x14900e198 <col:33> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x1498097b8 <col:48, line:9:2>
    |   `-IfStmt 0x149809788 <line:4:3, line:8:3> has_else
    |     |-CallExpr 0x14900e390 <line:4:7, col:18> '<dependent type>' contains-errors
    |     | |-DeclRefExpr 0x14900e350 <col:7> 'int ()' Function 0x14900e298 'get_bit' 'int ()'
    |     | `-RecoveryExpr 0x14900e370 <col:15> '<dependent type>' contains-errors lvalue
    |     |-CompoundStmt 0x149809688 <col:21, line:6:3>
    |     | `-BinaryOperator 0x149809668 <line:5:4, col:17> '<dependent type>' contains-errors '='
    |     |   |-RecoveryExpr 0x14900e3d8 <col:4> '<dependent type>' contains-errors lvalue
    |     |   | `-DeclRefExpr 0x14900e3b8 <col:4> 'int *' lvalue ParmVar 0x14900dd28 'node' 'int *'
    |     |   `-CXXDependentScopeMemberExpr 0x149809620 <col:11, col:17> '<dependent type>' contains-errors lvalue ->right
    |     |     `-RecoveryExpr 0x149809600 <col:11> '<dependent type>' contains-errors lvalue
    |     `-CompoundStmt 0x149809770 <line:6:10, line:8:3>
    |       `-BinaryOperator 0x149809750 <line:7:4, col:17> '<dependent type>' contains-errors '='
    |         |-RecoveryExpr 0x1498096c0 <col:4> '<dependent type>' contains-errors lvalue
    |         | `-DeclRefExpr 0x1498096a0 <col:4> 'int *' lvalue ParmVar 0x14900dd28 'node' 'int *'
    |         `-CXXDependentScopeMemberExpr 0x149809708 <col:11, col:17> '<dependent type>' contains-errors lvalue ->left
    |           `-RecoveryExpr 0x1498096e8 <col:11> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x149809900 <line:10:2, line:14:2>
    | |-UnaryOperator 0x149809828 <line:10:6, col:7> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x149809810 <col:7> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x1498097f0 <col:7> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x1498098e0 <col:13, line:14:2>
    |   |-BinaryOperator 0x1498098b0 <line:11:3, col:9> 'int' '='
    |   | |-UnaryOperator 0x149809878 <col:3, col:4> 'int' lvalue prefix '*' cannot overflow
    |   | | `-ImplicitCastExpr 0x149809860 <col:4> 'int *' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x149809840 <col:4> 'int *' lvalue ParmVar 0x14900dda8 'ch' 'int *'
    |   | `-IntegerLiteral 0x149809890 <col:9> 'int' 0
    |   `-ReturnStmt 0x1498098d0 <line:12:3>
    |-BinaryOperator 0x1498099d8 <line:15:2, col:14> 'int' contains-errors '='
    | |-UnaryOperator 0x149809958 <col:2, col:3> 'int' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x149809940 <col:3> 'int *' <LValueToRValue>
    | |   `-DeclRefExpr 0x149809920 <col:3> 'int *' lvalue ParmVar 0x14900dda8 'ch' 'int *'
    | `-CXXDependentScopeMemberExpr 0x149809990 <col:8, col:14> '<dependent type>' contains-errors lvalue ->symbol
    |   `-RecoveryExpr 0x149809970 <col:8> '<dependent type>' contains-errors lvalue
    `-BinaryOperator 0x149809b00 <line:16:2, col:12> 'int' contains-errors '='
      |-UnaryOperator 0x149809ac8 <col:2, col:3> 'int' lvalue prefix '*' cannot overflow
      | `-ImplicitCastExpr 0x149809ab0 <col:3> 'int *' <LValueToRValue>
      |   `-DeclRefExpr 0x1498099f8 <col:3> 'int *' lvalue ParmVar 0x14900dea8 'offset' 'int *'
      `-RecoveryExpr 0x149809ae0 <col:12> '<dependent type>' contains-errors lvalue
