`-FunctionDecl 0x1530f3888  line:1:14 invalid mdesc_iterate_over_cpus 'void *(void *(*)(struct mdesc_handle *, int, int, void *), void *, int *)' static
  |-ParmVarDecl 0x1530f35f8 <col:38, col:91> col:46 used func 'void *(*)(struct mdesc_handle *, int, int, void *)'
  |-ParmVarDecl 0x1530f3678 <col:94, col:100> col:100 used arg 'void *'
  |-ParmVarDecl 0x1530f3748 <col:105, col:116> col:116 invalid mask 'int *'
  `-CompoundStmt 0x152831df0 <line:2:1, line:29:1>
    |-DeclStmt 0x1530f3d38 <line:3:2, col:40>
    | |-RecordDecl 0x1530f3948 <col:2, col:9> col:9 struct mdesc_handle
    | `-VarDecl 0x1530f3ab8 <col:2, col:39> col:23 used hp 'struct mdesc_handle *' cinit
    |   `-ImplicitCastExpr 0x1530f3d08 <col:28, col:39> 'struct mdesc_handle *' <IntegralToPointer>
    |     `-CallExpr 0x1530f3ce8 <col:28, col:39> 'int'
    |       `-ImplicitCastExpr 0x1530f3cd0 <col:28> 'int (*)()' <FunctionToPointerDecay>
    |         `-DeclRefExpr 0x1530f3c80 <col:28> 'int ()' Function 0x1530f3bc8 'mdesc_grab' 'int ()'
    |-DeclStmt 0x1530f3e08 <line:4:2, col:18>
    | `-VarDecl 0x1530f3d68 <col:2, col:14> col:8 used ret 'void *' cinit
    |   `-RecoveryExpr 0x1530f3de8 <col:14> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x1530f4018 <line:7:2, col:43> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x1530f3f00 <col:2> 'int ()' Function 0x1530f3e48 'mdesc_for_each_node_by_name' 'int ()'
    | |-DeclRefExpr 0x1530f3f20 <col:30> 'struct mdesc_handle *' lvalue Var 0x1530f3ab8 'hp' 'struct mdesc_handle *'
    | |-RecoveryExpr 0x1530f3ff8 <col:34> '<dependent type>' contains-errors lvalue
    | `-StringLiteral 0x1530f3fa0 <col:38> 'char[4]' lvalue "STR"
    |-CompoundStmt 0x152831be0 <col:45, line:25:2>
    | |-DeclStmt 0x1530f4280 <line:8:3, col:58>
    | | `-VarDecl 0x1530f4068 <col:3, col:14> col:14 invalid id 'const int *'
    | |-DeclStmt 0x1530f4368 <line:9:3, col:18>
    | | `-VarDecl 0x1530f42b0 <col:3, col:16> col:7 used cpuid 'int' cinit
    | |   `-UnaryOperator 0x1530f4350 <col:15, col:16> '<dependent type>' contains-errors prefix '*' cannot overflow
    | |     `-ImplicitCastExpr 0x1530f4338 <col:16> '<dependent type>' contains-errors <LValueToRValue>
    | |       `-RecoveryExpr 0x1530f4318 <col:16> '<dependent type>' contains-errors lvalue
    | |-BinaryOperator 0x152831b00 <line:22:3, col:32> 'void *' contains-errors '='
    | | |-DeclRefExpr 0x1530f4380 <col:3> 'void *' contains-errors lvalue Var 0x1530f3d68 'ret' 'void *'
    | | `-CallExpr 0x152831ac0 <col:9, col:32> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x1530f43a0 <col:9> 'void *(*)(struct mdesc_handle *, int, int, void *)' lvalue ParmVar 0x1530f35f8 'func' 'void *(*)(struct mdesc_handle *, int, int, void *)'
    | |   |-DeclRefExpr 0x1530f43c0 <col:14> 'struct mdesc_handle *' lvalue Var 0x1530f3ab8 'hp' 'struct mdesc_handle *'
    | |   |-RecoveryExpr 0x152831aa0 <col:18> '<dependent type>' contains-errors lvalue
    | |   |-DeclRefExpr 0x152831a00 <col:22> 'int' contains-errors lvalue Var 0x1530f42b0 'cpuid' 'int'
    | |   `-DeclRefExpr 0x152831a20 <col:29> 'void *' lvalue ParmVar 0x1530f3678 'arg' 'void *'
    | `-IfStmt 0x152831bc0 <line:23:3, line:24:9>
    |   |-ImplicitCastExpr 0x152831b40 <line:23:7> 'void *' contains-errors <LValueToRValue>
    |   | `-DeclRefExpr 0x152831b20 <col:7> 'void *' contains-errors lvalue Var 0x1530f3d68 'ret' 'void *'
    |   `-GotoStmt 0x152831ba8 <line:24:4, col:9> 'out' 0x152831b58
    |-LabelStmt 0x152831d88 <line:26:1, line:27:18> 'out'
    | `-CallExpr 0x152831d48 <col:2, col:18> 'int'
    |   |-ImplicitCastExpr 0x152831d30 <col:2> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x152831cf0 <col:2> 'int ()' Function 0x152831c38 'mdesc_release' 'int ()'
    |   `-ImplicitCastExpr 0x152831d70 <col:16> 'struct mdesc_handle *' <LValueToRValue>
    |     `-DeclRefExpr 0x152831d10 <col:16> 'struct mdesc_handle *' lvalue Var 0x1530f3ab8 'hp' 'struct mdesc_handle *'
    `-ReturnStmt 0x152831de0 <line:28:2, col:9>
      `-ImplicitCastExpr 0x152831dc8 <col:9> 'void *' contains-errors <LValueToRValue>
        `-DeclRefExpr 0x152831da8 <col:9> 'void *' contains-errors lvalue Var 0x1530f3d68 'ret' 'void *'
