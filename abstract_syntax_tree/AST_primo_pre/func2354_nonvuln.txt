`-FunctionDecl 0x155928288  line:1:12 invalid get_valid_node_allowed 'int (int, int *)' static
  |-ParmVarDecl 0x1559280d8 <col:35, col:39> col:39 used nid 'int'
  |-ParmVarDecl 0x1559281a8 <col:44, col:56> col:56 invalid nodes_allowed 'int *'
  `-CompoundStmt 0x155928790 <line:2:1, line:6:1>
    |-IfStmt 0x155928728 <line:3:2, line:4:45>
    | |-UnaryOperator 0x155928560 <line:3:6, col:37> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-CallExpr 0x155928530 <col:7, col:37> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x1559284a0 <col:7> 'int ()' Function 0x1559283e8 'node_isset' 'int ()'
    | |   |-DeclRefExpr 0x1559284c0 <col:18> 'int' lvalue ParmVar 0x1559280d8 'nid' 'int'
    | |   `-UnaryOperator 0x155928518 <col:23, col:24> '<dependent type>' contains-errors prefix '*' cannot overflow
    | |     `-ImplicitCastExpr 0x155928500 <col:24> '<dependent type>' contains-errors <LValueToRValue>
    | |       `-RecoveryExpr 0x1559284e0 <col:24> '<dependent type>' contains-errors lvalue
    | `-BinaryOperator 0x155928708 <line:4:3, col:45> 'int' contains-errors '='
    |   |-DeclRefExpr 0x155928578 <col:3> 'int' lvalue ParmVar 0x1559280d8 'nid' 'int'
    |   `-CallExpr 0x1559286d8 <col:9, col:45> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x155928678 <col:9> 'int ()' Function 0x1559285c0 'next_node_allowed' 'int ()'
    |     |-DeclRefExpr 0x155928698 <col:27> 'int' lvalue ParmVar 0x1559280d8 'nid' 'int'
    |     `-RecoveryExpr 0x1559286b8 <col:32> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x155928780 <line:5:2, col:9>
      `-ImplicitCastExpr 0x155928768 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x155928748 <col:9> 'int' lvalue ParmVar 0x1559280d8 'nid' 'int'
