`-FunctionDecl 0x14380df18  line:1:12 invalid fts3EvalPhraseStart 'int (int *, int, int *)' static
  |-ParmVarDecl 0x14380dd28 <col:32, col:44> col:44 invalid pCsr 'int *'
  |-ParmVarDecl 0x14380dda8 <col:50, col:54> col:54 used bOptOk 'int'
  |-ParmVarDecl 0x14380de28 <col:62, col:74> col:74 referenced invalid p 'int *'
  `-CompoundStmt 0x14382a500 <col:76, line:42:1>
    |-DeclStmt 0x14380e0c0 <line:3:3, col:21>
    | `-VarDecl 0x14380e020 <col:3, col:12> col:7 used rc 'int' cinit
    |   `-RecoveryExpr 0x14380e0a0 <col:12> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x14380e158 <line:4:3, col:8>
    | `-VarDecl 0x14380e0f0 <col:3, col:7> col:7 used i 'int'
    |-DeclStmt 0x14380e210 <line:7:3, col:20>
    | `-VarDecl 0x14380e188 <col:3, col:19> col:7 used bHaveIncr 'int' cinit
    |   `-IntegerLiteral 0x14380e1f0 <col:19> 'int' 0
    |-DeclStmt 0x143827968 <line:8:3, line:14:4>
    | `-VarDecl 0x14380e240 <line:8:3, col:7> col:7 used bIncrOk 'int'
    |-ForStmt 0x143828078 <line:15:3, line:21:3>
    | |-BinaryOperator 0x1438279c0 <line:15:7, col:9> 'int' '='
    | | |-DeclRefExpr 0x143827980 <col:7> 'int' lvalue Var 0x14380e0f0 'i' 'int'
    | | `-IntegerLiteral 0x1438279a0 <col:9> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x143827b00 <col:12, col:31> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x143827a38 <col:12, col:21> 'int' '=='
    | | | |-ImplicitCastExpr 0x143827a20 <col:12> 'int' <LValueToRValue>
    | | | | `-DeclRefExpr 0x1438279e0 <col:12> 'int' lvalue Var 0x14380e240 'bIncrOk' 'int'
    | | | `-IntegerLiteral 0x143827a00 <col:21> 'int' 1
    | | `-BinaryOperator 0x143827ae0 <col:26, col:31> 'int' contains-errors '<'
    | |   |-DeclRefExpr 0x143827a58 <col:26> 'int' lvalue Var 0x14380e0f0 'i' 'int'
    | |   `-CXXDependentScopeMemberExpr 0x143827a98 <col:28, col:31> '<dependent type>' contains-errors lvalue ->nToken
    | |     `-RecoveryExpr 0x143827a78 <col:28> '<dependent type>' contains-errors lvalue
    | |-UnaryOperator 0x143827b40 <col:39, col:40> 'int' postfix '++'
    | | `-DeclRefExpr 0x143827b20 <col:39> 'int' lvalue Var 0x14380e0f0 'i' 'int'
    | `-CompoundStmt 0x143828058 <col:43, line:21:3>
    |   |-IfStmt 0x143827ef0 <line:17:5, line:19:5>
    |   | |-RecoveryExpr 0x143827e58 <line:17:9, col:75> '_Bool' contains-errors
    |   | `-CompoundStmt 0x143827ed8 <col:78, line:19:5>
    |   |   `-BinaryOperator 0x143827eb8 <line:18:7, col:17> 'int' '='
    |   |     |-DeclRefExpr 0x143827e78 <col:7> 'int' lvalue Var 0x14380e240 'bIncrOk' 'int'
    |   |     `-IntegerLiteral 0x143827e98 <col:17> 'int' 0
    |   `-IfStmt 0x143828038 <line:20:5, col:39>
    |     |-CXXDependentScopeMemberExpr 0x143827f90 <col:9, col:17> '<dependent type>' contains-errors lvalue ->pSegcsr
    |     | `-RecoveryExpr 0x143827f70 <col:9> '<dependent type>' contains-errors lvalue
    |     `-BinaryOperator 0x143828018 <col:27, col:39> 'int' '='
    |       |-DeclRefExpr 0x143827fd8 <col:27> 'int' lvalue Var 0x14380e188 'bHaveIncr' 'int'
    |       `-IntegerLiteral 0x143827ff8 <col:39> 'int' 1
    |-IfStmt 0x14382a110 <line:23:3, line:38:3> has_else
    | |-BinaryOperator 0x143828120 <line:23:7, col:18> 'int' '&&'
    | | |-ImplicitCastExpr 0x1438280f0 <col:7> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1438280b0 <col:7> 'int' lvalue Var 0x14380e240 'bIncrOk' 'int'
    | | `-ImplicitCastExpr 0x143828108 <col:18> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x1438280d0 <col:18> 'int' lvalue Var 0x14380e188 'bHaveIncr' 'int'
    | |-CompoundStmt 0x143829e48 <col:29, line:34:3>
    | | |-DeclStmt 0x143828378 <line:25:5, col:63>
    | | | `-VarDecl 0x143828158 <col:5, col:9> col:9 used iCol 'int'
    | | |-ForStmt 0x143829d40 <line:26:5, line:32:5>
    | | | |-BinaryOperator 0x1438283d0 <line:26:9, col:11> 'int' '='
    | | | | |-DeclRefExpr 0x143828390 <col:9> 'int' lvalue Var 0x14380e0f0 'i' 'int'
    | | | | `-IntegerLiteral 0x1438283b0 <col:11> 'int' 0
    | | | |-<<<NULL>>>
    | | | |-BinaryOperator 0x143828550 <col:14, col:36> 'int' contains-errors '&&'
    | | | | |-BinaryOperator 0x143828530 <col:14, col:18> 'int' contains-errors '=='
    | | | | | |-DeclRefExpr 0x1438283f0 <col:14> 'int' contains-errors lvalue Var 0x14380e020 'rc' 'int'
    | | | | | `-RecoveryExpr 0x143828510 <col:18> '<dependent type>' contains-errors lvalue
    | | | | `-BinaryOperator 0x1438284d0 <col:31, col:36> 'int' contains-errors '<'
    | | | |   |-DeclRefExpr 0x143828448 <col:31> 'int' lvalue Var 0x14380e0f0 'i' 'int'
    | | | |   `-CXXDependentScopeMemberExpr 0x143828488 <col:33, col:36> '<dependent type>' contains-errors lvalue ->nToken
    | | | |     `-RecoveryExpr 0x143828468 <col:33> '<dependent type>' contains-errors lvalue
    | | | |-UnaryOperator 0x143828590 <col:44, col:45> 'int' postfix '++'
    | | | | `-DeclRefExpr 0x143828570 <col:44> 'int' lvalue Var 0x14380e0f0 'i' 'int'
    | | | `-CompoundStmt 0x143829d28 <col:48, line:32:5>
    | | |   `-IfStmt 0x143829d08 <line:29:7, line:31:7>
    | | |     |-RecoveryExpr 0x1438286b0 <line:29:11> '_Bool' contains-errors
    | | |     `-CompoundStmt 0x143829cf8 <col:20, line:31:7>
    | | `-BinaryOperator 0x143829e28 <line:33:5, col:16> '<dependent type>' contains-errors '='
    | |   |-CXXDependentScopeMemberExpr 0x143829dc0 <col:5, col:8> '<dependent type>' contains-errors lvalue ->bIncr
    | |   | `-RecoveryExpr 0x143829d98 <col:5> '<dependent type>' contains-errors lvalue
    | |   |   `-DeclRefExpr 0x143829d78 <col:5> 'int *' lvalue ParmVar 0x14380de28 'p' 'int *'
    | |   `-IntegerLiteral 0x143829e08 <col:16> 'int' 1
    | `-CompoundStmt 0x14382a0f0 <line:34:8, line:38:3>
    |   |-BinaryOperator 0x14382a000 <line:36:5, col:36> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x143829e70 <col:5> 'int' contains-errors lvalue Var 0x14380e020 'rc' 'int'
    |   | `-CallExpr 0x143829fd0 <col:10, col:36> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x143829f70 <col:10> 'int ()' Function 0x143829eb8 'fts3EvalPhraseLoad' 'int ()'
    |   |   |-RecoveryExpr 0x143829f90 <col:29> '<dependent type>' contains-errors lvalue
    |   |   `-RecoveryExpr 0x143829fb0 <col:35> '<dependent type>' contains-errors lvalue
    |   `-BinaryOperator 0x14382a0d0 <line:37:5, col:16> '<dependent type>' contains-errors '='
    |     |-CXXDependentScopeMemberExpr 0x14382a068 <col:5, col:8> '<dependent type>' contains-errors lvalue ->bIncr
    |     | `-RecoveryExpr 0x14382a040 <col:5> '<dependent type>' contains-errors lvalue
    |     |   `-DeclRefExpr 0x14382a020 <col:5> 'int *' lvalue ParmVar 0x14380de28 'p' 'int *'
    |     `-IntegerLiteral 0x14382a0b0 <col:16> 'int' 0
    `-ReturnStmt 0x14382a4f0 <line:41:3, col:10>
      `-ImplicitCastExpr 0x14382a4d8 <col:10> 'int' contains-errors <LValueToRValue>
        `-DeclRefExpr 0x14382a4b8 <col:10> 'int' contains-errors lvalue Var 0x14380e020 'rc' 'int'
