`-FunctionDecl 0x1559281c0  line:1:6 invalid rfbFreeZrleData 'void (int)'
  |-ParmVarDecl 0x1559280f0 <col:22, col:35> col:35 referenced invalid cl 'int'
  `-CompoundStmt 0x155928608 <line:2:1, line:6:1>
    |-IfStmt 0x1559284e0 <line:3:3, line:4:35>
    | |-CXXDependentScopeMemberExpr 0x155928290 <line:3:7, col:11> '<dependent type>' contains-errors lvalue ->zrleData
    | | `-RecoveryExpr 0x155928270 <col:7> '<dependent type>' contains-errors lvalue
    | `-CallExpr 0x1559284b8 <line:4:5, col:35> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x155928430 <col:5> 'int ()' Function 0x155928378 'zrleOutStreamFree' 'int ()'
    |   `-CXXDependentScopeMemberExpr 0x155928470 <col:23, col:27> '<dependent type>' contains-errors lvalue ->zrleData
    |     `-RecoveryExpr 0x155928450 <col:23> '<dependent type>' contains-errors lvalue
    `-BinaryOperator 0x1559285e8 <line:5:3, col:18> '<dependent type>' contains-errors '='
      |-CXXDependentScopeMemberExpr 0x155928548 <col:3, col:7> '<dependent type>' contains-errors lvalue ->zrleData
      | `-RecoveryExpr 0x155928520 <col:3> '<dependent type>' contains-errors lvalue
      |   `-DeclRefExpr 0x155928500 <col:3> 'int' lvalue ParmVar 0x1559280f0 'cl' 'int'
      `-RecoveryExpr 0x1559285c8 <col:18> '<dependent type>' contains-errors lvalue
