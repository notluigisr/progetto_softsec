`-FunctionDecl 0x1529281c8  line:1:1 dbcs_ptr2len 'int (char *)'
  |-ParmVarDecl 0x1529280f0 <line:2:5, col:13> col:13 used p 'char *'
  `-CompoundStmt 0x152940b28 <line:3:1, line:11:1>
    |-DeclStmt 0x152928340 <line:4:5, col:13>
    | `-VarDecl 0x1529282d8 <col:5, col:10> col:10 used len 'int'
    |-BinaryOperator 0x1529285a0 <line:7:5, col:25> 'int' '='
    | |-DeclRefExpr 0x152928358 <col:5> 'int' lvalue Var 0x1529282d8 'len' 'int'
    | `-CallExpr 0x152928548 <col:11, col:25> 'int'
    |   |-ImplicitCastExpr 0x152928530 <col:11> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x152928490 <col:11> 'int ()' Function 0x1529283d8 'MB_BYTE2LEN' 'int ()'
    |   `-ImplicitCastExpr 0x152928588 <col:23, col:24> 'int' <IntegralCast>
    |     `-ImplicitCastExpr 0x152928570 <col:23, col:24> 'char' <LValueToRValue>
    |       `-UnaryOperator 0x1529284e8 <col:23, col:24> 'char' lvalue prefix '*' cannot overflow
    |         `-ImplicitCastExpr 0x1529284d0 <col:24> 'char *' <LValueToRValue>
    |           `-DeclRefExpr 0x1529284b0 <col:24> 'char *' lvalue ParmVar 0x1529280f0 'p' 'char *'
    |-IfStmt 0x152940ac0 <line:8:5, line:9:8>
    | |-BinaryOperator 0x152940a40 <line:8:9, col:29> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x152928790 <col:9, col:16> 'int' '=='
    | | | |-ImplicitCastExpr 0x152928778 <col:9> 'int' <LValueToRValue>
    | | | | `-DeclRefExpr 0x1529285c0 <col:9> 'int' lvalue Var 0x1529282d8 'len' 'int'
    | | | `-IntegerLiteral 0x1529285e0 <col:16> 'int' 2
    | | `-BinaryOperator 0x152940a20 <col:21, col:29> 'int' contains-errors '=='
    | |   |-ArraySubscriptExpr 0x1529287c8 <col:21, col:24> 'char' lvalue
    | |   | |-ImplicitCastExpr 0x1529287b0 <col:21> 'char *' <LValueToRValue>
    | |   | | `-DeclRefExpr 0x152928638 <col:21> 'char *' lvalue ParmVar 0x1529280f0 'p' 'char *'
    | |   | `-IntegerLiteral 0x152928658 <col:23> 'int' 1
    | |   `-RecoveryExpr 0x152940a00 <col:29> '<dependent type>' contains-errors lvalue
    | `-BinaryOperator 0x152940aa0 <line:9:2, col:8> 'int' '='
    |   |-DeclRefExpr 0x152940a60 <col:2> 'int' lvalue Var 0x1529282d8 'len' 'int'
    |   `-IntegerLiteral 0x152940a80 <col:8> 'int' 1
    `-ReturnStmt 0x152940b18 <line:10:5, col:12>
      `-ImplicitCastExpr 0x152940b00 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x152940ae0 <col:12> 'int' lvalue Var 0x1529282d8 'len' 'int'
