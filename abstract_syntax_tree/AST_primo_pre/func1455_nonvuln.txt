`-FunctionDecl 0x13280dee8  line:1:15 invalid escape_string 'int (char *, int, const char *)' static
  |-ParmVarDecl 0x13280dcf0 <col:30, col:36> col:36 used dst 'char *'
  |-ParmVarDecl 0x13280dd70 <col:41, col:48> col:48 referenced invalid len 'int'
  |-ParmVarDecl 0x13280ddf0 <col:53, col:65> col:65 used src 'const char *'
  `-CompoundStmt 0x132827e80 <line:2:1, line:32:1>
    |-DeclStmt 0x13280e060 <line:3:3, col:16>
    | `-VarDecl 0x13280dfc0 <col:3, col:13> col:9 used p 'char *' cinit
    |   `-ImplicitCastExpr 0x13280e048 <col:13> 'char *' <LValueToRValue>
    |     `-DeclRefExpr 0x13280e028 <col:13> 'char *' lvalue ParmVar 0x13280dcf0 'dst' 'char *'
    |-IfStmt 0x13280e0f8 <line:5:3, line:6:12>
    | |-UnaryOperator 0x13280e0b0 <line:5:7, col:8> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x13280e098 <col:8> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x13280e078 <col:8> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x13280e0e8 <line:6:5, col:12>
    |   `-IntegerLiteral 0x13280e0c8 <col:12> 'int' 0
    |-UnaryOperator 0x13280e160 <line:7:3, col:6> '<dependent type>' contains-errors postfix '--' cannot overflow
    | `-RecoveryExpr 0x13280e138 <col:3> '<dependent type>' contains-errors lvalue
    |   `-DeclRefExpr 0x13280e118 <col:3> 'int' lvalue ParmVar 0x13280dd70 'len' 'int'
    |-WhileStmt 0x132827d08 <line:9:3, line:28:3>
    | |-BinaryOperator 0x13280e2d8 <line:9:10, col:35> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x13280e268 <col:10, col:27> 'int' contains-errors '&&'
    | | | |-BinaryOperator 0x13280e228 <col:10, col:20> 'int' contains-errors '<'
    | | | | |-BinaryOperator 0x13280e1e8 <col:10, col:14> 'long' '-'
    | | | | | |-ImplicitCastExpr 0x13280e1b8 <col:10> 'char *' <LValueToRValue>
    | | | | | | `-DeclRefExpr 0x13280e178 <col:10> 'char *' lvalue Var 0x13280dfc0 'p' 'char *'
    | | | | | `-ImplicitCastExpr 0x13280e1d0 <col:14> 'char *' <LValueToRValue>
    | | | | |   `-DeclRefExpr 0x13280e198 <col:14> 'char *' lvalue ParmVar 0x13280dcf0 'dst' 'char *'
    | | | | `-RecoveryExpr 0x13280e208 <col:20> '<dependent type>' contains-errors lvalue
    | | | `-DeclRefExpr 0x13280e248 <col:27> 'const char *' lvalue ParmVar 0x13280ddf0 'src' 'const char *'
    | | `-UnaryOperator 0x13280e2c0 <col:34, col:35> 'const char' lvalue prefix '*' cannot overflow
    | |   `-ImplicitCastExpr 0x13280e2a8 <col:35> 'const char *' <LValueToRValue>
    | |     `-DeclRefExpr 0x13280e288 <col:35> 'const char *' lvalue ParmVar 0x13280ddf0 'src' 'const char *'
    | `-CompoundStmt 0x132827ce8 <line:10:3, line:28:3>
    |   |-SwitchStmt 0x13280e378 <line:11:5, line:26:5>
    |   | |-ImplicitCastExpr 0x13280e360 <line:11:13, col:14> 'int' <IntegralCast>
    |   | | `-ImplicitCastExpr 0x13280e348 <col:13, col:14> 'char' <LValueToRValue>
    |   | |   `-UnaryOperator 0x13280e330 <col:13, col:14> 'const char' lvalue prefix '*' cannot overflow
    |   | |     `-ImplicitCastExpr 0x13280e318 <col:14> 'const char *' <LValueToRValue>
    |   | |       `-DeclRefExpr 0x13280e2f8 <col:14> 'const char *' lvalue ParmVar 0x13280ddf0 'src' 'const char *'
    |   | `-CompoundStmt 0x132827c60 <line:12:5, line:26:5>
    |   |   |-CaseStmt 0x13280e3d0 <line:13:5, line:14:19>
    |   |   | |-ConstantExpr 0x13280e3b8 <line:13:10> 'int'
    |   |   | | `-CharacterLiteral 0x13280e3a0 <col:10> 'int' 10
    |   |   | `-CallExpr 0x1328275e8 <line:14:7, col:19> 'int'
    |   |   |   |-ImplicitCastExpr 0x1328275d0 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |   |   |   | `-DeclRefExpr 0x132827560 <col:7> 'int ()' Function 0x1328274a8 'ESC_CHAR' 'int ()'
    |   |   |   `-CharacterLiteral 0x132827580 <col:16> 'int' 110
    |   |   |-BreakStmt 0x132827610 <line:15:7>
    |   |   |-CaseStmt 0x132827648 <line:16:5, line:17:19>
    |   |   | |-ConstantExpr 0x132827630 <line:16:10> 'int'
    |   |   | | `-CharacterLiteral 0x132827618 <col:10> 'int' 13
    |   |   | `-CallExpr 0x1328276c0 <line:17:7, col:19> 'int'
    |   |   |   |-ImplicitCastExpr 0x1328276a8 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |   |   |   | `-DeclRefExpr 0x132827670 <col:7> 'int ()' Function 0x1328274a8 'ESC_CHAR' 'int ()'
    |   |   |   `-CharacterLiteral 0x132827690 <col:16> 'int' 114
    |   |   |-BreakStmt 0x1328276e8 <line:18:7>
    |   |   |-CaseStmt 0x132827720 <line:19:5, line:20:19>
    |   |   | |-ConstantExpr 0x132827708 <line:19:10> 'int'
    |   |   | | `-CharacterLiteral 0x1328276f0 <col:10> 'int' 9
    |   |   | `-CallExpr 0x132827798 <line:20:7, col:19> 'int'
    |   |   |   |-ImplicitCastExpr 0x132827780 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |   |   |   | `-DeclRefExpr 0x132827748 <col:7> 'int ()' Function 0x1328274a8 'ESC_CHAR' 'int ()'
    |   |   |   `-CharacterLiteral 0x132827768 <col:16> 'int' 116
    |   |   |-BreakStmt 0x1328277c0 <line:21:7>
    |   |   |-DefaultStmt 0x132827b68 <line:22:5, line:24:9>
    |   |   | `-IfStmt 0x132827b48 <line:23:7, line:24:9>
    |   |   |   |-BinaryOperator 0x132827a88 <line:23:11, col:60> 'int' contains-errors '&&'
    |   |   |   | |-ParenExpr 0x132827958 <col:11, col:39> 'int'
    |   |   |   | | `-BinaryOperator 0x132827938 <col:12, col:36> 'int' '||'
    |   |   |   | |   |-BinaryOperator 0x132827860 <col:12, col:20> 'int' '=='
    |   |   |   | |   | |-ImplicitCastExpr 0x132827848 <col:12, col:13> 'int' <IntegralCast>
    |   |   |   | |   | | `-ImplicitCastExpr 0x132827830 <col:12, col:13> 'char' <LValueToRValue>
    |   |   |   | |   | |   `-UnaryOperator 0x132827800 <col:12, col:13> 'const char' lvalue prefix '*' cannot overflow
    |   |   |   | |   | |     `-ImplicitCastExpr 0x1328277e8 <col:13> 'const char *' <LValueToRValue>
    |   |   |   | |   | |       `-DeclRefExpr 0x1328277c8 <col:13> 'const char *' lvalue ParmVar 0x13280ddf0 'src' 'const char *'
    |   |   |   | |   | `-CharacterLiteral 0x132827818 <col:20> 'int' 92
    |   |   |   | |   `-BinaryOperator 0x132827918 <col:28, col:36> 'int' '=='
    |   |   |   | |     |-ImplicitCastExpr 0x132827900 <col:28, col:29> 'int' <IntegralCast>
    |   |   |   | |     | `-ImplicitCastExpr 0x1328278e8 <col:28, col:29> 'char' <LValueToRValue>
    |   |   |   | |     |   `-UnaryOperator 0x1328278b8 <col:28, col:29> 'const char' lvalue prefix '*' cannot overflow
    |   |   |   | |     |     `-ImplicitCastExpr 0x1328278a0 <col:29> 'const char *' <LValueToRValue>
    |   |   |   | |     |       `-DeclRefExpr 0x132827880 <col:29> 'const char *' lvalue ParmVar 0x13280ddf0 'src' 'const char *'
    |   |   |   | |     `-CharacterLiteral 0x1328278d0 <col:36> 'int' 34
    |   |   |   | `-BinaryOperator 0x132827a68 <col:44, col:60> 'int' contains-errors '<'
    |   |   |   |   |-BinaryOperator 0x1328279e8 <col:44, col:48> 'long' '-'
    |   |   |   |   | |-ImplicitCastExpr 0x1328279b8 <col:44> 'char *' <LValueToRValue>
    |   |   |   |   | | `-DeclRefExpr 0x132827978 <col:44> 'char *' lvalue Var 0x13280dfc0 'p' 'char *'
    |   |   |   |   | `-ImplicitCastExpr 0x1328279d0 <col:48> 'char *' <LValueToRValue>
    |   |   |   |   |   `-DeclRefExpr 0x132827998 <col:48> 'char *' lvalue ParmVar 0x13280dcf0 'dst' 'char *'
    |   |   |   |   `-BinaryOperator 0x132827a48 <col:54, col:60> '<dependent type>' contains-errors '-'
    |   |   |   |     |-RecoveryExpr 0x132827a08 <col:54> '<dependent type>' contains-errors lvalue
    |   |   |   |     `-IntegerLiteral 0x132827a28 <col:60> 'int' 1
    |   |   |   `-BinaryOperator 0x132827b28 <line:24:2, col:9> 'char' '='
    |   |   |     |-UnaryOperator 0x132827ae0 <col:2, col:4> 'char' lvalue prefix '*' cannot overflow
    |   |   |     | `-UnaryOperator 0x132827ac8 <col:3, col:4> 'char *' postfix '++'
    |   |   |     |   `-DeclRefExpr 0x132827aa8 <col:3> 'char *' lvalue Var 0x13280dfc0 'p' 'char *'
    |   |   |     `-ImplicitCastExpr 0x132827b10 <col:9> 'char' <IntegralCast>
    |   |   |       `-CharacterLiteral 0x132827af8 <col:9> 'int' 92
    |   |   `-BinaryOperator 0x132827c40 <line:25:7, col:15> 'char' '='
    |   |     |-UnaryOperator 0x132827bc0 <col:7, col:9> 'char' lvalue prefix '*' cannot overflow
    |   |     | `-UnaryOperator 0x132827ba8 <col:8, col:9> 'char *' postfix '++'
    |   |     |   `-DeclRefExpr 0x132827b88 <col:8> 'char *' lvalue Var 0x13280dfc0 'p' 'char *'
    |   |     `-ImplicitCastExpr 0x132827c28 <col:14, col:15> 'char' <LValueToRValue>
    |   |       `-UnaryOperator 0x132827c10 <col:14, col:15> 'const char' lvalue prefix '*' cannot overflow
    |   |         `-ImplicitCastExpr 0x132827bf8 <col:15> 'const char *' <LValueToRValue>
    |   |           `-DeclRefExpr 0x132827bd8 <col:15> 'const char *' lvalue ParmVar 0x13280ddf0 'src' 'const char *'
    |   `-UnaryOperator 0x132827cd0 <line:27:5, col:8> 'const char *' postfix '++'
    |     `-DeclRefExpr 0x132827cb0 <col:5> 'const char *' lvalue ParmVar 0x13280ddf0 'src' 'const char *'
    |-BinaryOperator 0x132827da8 <line:30:3, col:8> 'char' '='
    | |-UnaryOperator 0x132827d60 <col:3, col:4> 'char' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x132827d48 <col:4> 'char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x132827d28 <col:4> 'char *' lvalue Var 0x13280dfc0 'p' 'char *'
    | `-ImplicitCastExpr 0x132827d90 <col:8> 'char' <IntegralCast>
    |   `-CharacterLiteral 0x132827d78 <col:8> 'int' 0
    `-ReturnStmt 0x132827e70 <line:31:3, col:14>
      `-ImplicitCastExpr 0x132827e58 <col:10, col:14> 'int' <IntegralCast>
        `-BinaryOperator 0x132827e38 <col:10, col:14> 'long' '-'
          |-ImplicitCastExpr 0x132827e08 <col:10> 'char *' <LValueToRValue>
          | `-DeclRefExpr 0x132827dc8 <col:10> 'char *' lvalue Var 0x13280dfc0 'p' 'char *'
          `-ImplicitCastExpr 0x132827e20 <col:14> 'char *' <LValueToRValue>
            `-DeclRefExpr 0x132827de8 <col:14> 'char *' lvalue ParmVar 0x13280dcf0 'dst' 'char *'
