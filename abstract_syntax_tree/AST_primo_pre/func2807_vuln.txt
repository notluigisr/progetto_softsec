`-FunctionDecl 0x132128438  line:1:18 invalid bson_append_binary 'int (int *, const char *, char, const char *, int)'
  |-ParmVarDecl 0x132128128 <col:38, col:44> col:44 invalid b 'int *'
  |-ParmVarDecl 0x1321281a8 <col:47, col:59> col:59 used name 'const char *'
  |-ParmVarDecl 0x132128220 <col:65, col:70> col:70 used type 'char'
  |-ParmVarDecl 0x1321282a0 <col:76, col:88> col:88 used str 'const char *'
  |-ParmVarDecl 0x132128320 <col:93, col:97> col:97 used len 'int'
  `-CompoundStmt 0x132142630 <col:103, line:19:1>
    |-IfStmt 0x1321425b8 <line:2:5, line:17:5> has_else
    | |-BinaryOperator 0x132128580 <line:2:10, col:18> 'int' contains-errors '=='
    | | |-DeclRefExpr 0x132128508 <col:10> 'char' lvalue ParmVar 0x132128220 'type' 'char'
    | | `-RecoveryExpr 0x132128560 <col:18> '<dependent type>' contains-errors lvalue
    | |-CompoundStmt 0x132142070 <col:40, line:10:5>
    | | |-DeclStmt 0x132128698 <line:3:9, col:32>
    | | | `-VarDecl 0x1321285b8 <col:9, col:31> col:13 used subtwolen 'int' cinit
    | | |   `-BinaryOperator 0x132128678 <col:25, col:31> 'int' '+'
    | | |     |-ImplicitCastExpr 0x132128660 <col:25> 'int' <LValueToRValue>
    | | |     | `-DeclRefExpr 0x132128620 <col:25> 'int' lvalue ParmVar 0x132128320 'len' 'int'
    | | |     `-IntegerLiteral 0x132128640 <col:31> 'int' 4
    | | |-IfStmt 0x132141b18 <line:4:9, line:5:20>
    | | | |-BinaryOperator 0x132141ab0 <line:4:14, col:72> 'int' contains-errors '=='
    | | | | |-CallExpr 0x132141a50 <col:14, col:67> '<dependent type>' contains-errors
    | | | | | |-DeclRefExpr 0x132141810 <col:14> 'int ()' Function 0x132128758 'bson_append_estart' 'int ()'
    | | | | | |-RecoveryExpr 0x132141830 <col:34> '<dependent type>' contains-errors lvalue
    | | | | | |-RecoveryExpr 0x1321419f8 <col:37> '<dependent type>' contains-errors lvalue
    | | | | | |-DeclRefExpr 0x132141868 <col:51> 'const char *' lvalue ParmVar 0x1321281a8 'name' 'const char *'
    | | | | | `-BinaryOperator 0x132141a30 <col:57, col:63> 'int' '+'
    | | | | |   |-BinaryOperator 0x132141908 <col:57, col:61> 'int' '+'
    | | | | |   | |-BinaryOperator 0x1321418c8 <col:57, col:59> 'int' '+'
    | | | | |   | | |-IntegerLiteral 0x132141888 <col:57> 'int' 4
    | | | | |   | | `-IntegerLiteral 0x1321418a8 <col:59> 'int' 1
    | | | | |   | `-IntegerLiteral 0x1321418e8 <col:61> 'int' 4
    | | | | |   `-ImplicitCastExpr 0x132141a18 <col:63> 'int' <LValueToRValue>
    | | | | |     `-DeclRefExpr 0x132141928 <col:63> 'int' lvalue ParmVar 0x132128320 'len' 'int'
    | | | | `-RecoveryExpr 0x132141a90 <col:72> '<dependent type>' contains-errors lvalue
    | | | `-ReturnStmt 0x132141b08 <line:5:13, col:20>
    | | |   `-RecoveryExpr 0x132141ae8 <col:20> '<dependent type>' contains-errors lvalue
    | | |-CallExpr 0x132141c90 <line:6:9, col:38> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x132141c18 <col:9> 'int ()' Function 0x132141b60 'bson_append32' 'int ()'
    | | | |-RecoveryExpr 0x132141c38 <col:24> '<dependent type>' contains-errors lvalue
    | | | `-UnaryOperator 0x132141c78 <col:27, col:28> 'int *' prefix '&' cannot overflow
    | | |   `-DeclRefExpr 0x132141c58 <col:28> 'int' lvalue Var 0x1321285b8 'subtwolen' 'int'
    | | |-CallExpr 0x132141e00 <line:7:9, col:35> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x132141da0 <col:9> 'int ()' Function 0x132141ce8 'bson_append_byte' 'int ()'
    | | | |-RecoveryExpr 0x132141dc0 <col:27> '<dependent type>' contains-errors lvalue
    | | | `-DeclRefExpr 0x132141de0 <col:30> 'char' lvalue ParmVar 0x132128220 'type' 'char'
    | | |-CallExpr 0x132141ea8 <line:8:9, col:32> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x132141e30 <col:9> 'int ()' Function 0x132141b60 'bson_append32' 'int ()'
    | | | |-RecoveryExpr 0x132141e50 <col:24> '<dependent type>' contains-errors lvalue
    | | | `-UnaryOperator 0x132141e90 <col:27, col:28> 'int *' prefix '&' cannot overflow
    | | |   `-DeclRefExpr 0x132141e70 <col:28> 'int' lvalue ParmVar 0x132128320 'len' 'int'
    | | `-CallExpr 0x132142038 <line:9:9, col:34> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x132141fb8 <col:9> 'int ()' Function 0x132141f00 'bson_append' 'int ()'
    | |   |-RecoveryExpr 0x132141fd8 <col:22> '<dependent type>' contains-errors lvalue
    | |   |-DeclRefExpr 0x132141ff8 <col:25> 'const char *' lvalue ParmVar 0x1321282a0 'str' 'const char *'
    | |   `-DeclRefExpr 0x132142018 <col:30> 'int' lvalue ParmVar 0x132128320 'len' 'int'
    | `-CompoundStmt 0x132142588 <line:11:10, line:17:5>
    |   |-IfStmt 0x132142378 <line:12:9, line:13:20>
    |   | |-BinaryOperator 0x132142310 <line:12:14, col:70> 'int' contains-errors '=='
    |   | | |-CallExpr 0x1321422b0 <col:14, col:65> '<dependent type>' contains-errors
    |   | | | |-DeclRefExpr 0x1321420b0 <col:14> 'int ()' Function 0x132128758 'bson_append_estart' 'int ()'
    |   | | | |-RecoveryExpr 0x1321420d0 <col:34> '<dependent type>' contains-errors lvalue
    |   | | | |-RecoveryExpr 0x132142258 <col:37> '<dependent type>' contains-errors lvalue
    |   | | | |-DeclRefExpr 0x132142108 <col:51> 'const char *' lvalue ParmVar 0x1321281a8 'name' 'const char *'
    |   | | | `-BinaryOperator 0x132142290 <col:57, col:61> 'int' '+'
    |   | | |   |-BinaryOperator 0x132142168 <col:57, col:59> 'int' '+'
    |   | | |   | |-IntegerLiteral 0x132142128 <col:57> 'int' 4
    |   | | |   | `-IntegerLiteral 0x132142148 <col:59> 'int' 1
    |   | | |   `-ImplicitCastExpr 0x132142278 <col:61> 'int' <LValueToRValue>
    |   | | |     `-DeclRefExpr 0x132142188 <col:61> 'int' lvalue ParmVar 0x132128320 'len' 'int'
    |   | | `-RecoveryExpr 0x1321422f0 <col:70> '<dependent type>' contains-errors lvalue
    |   | `-ReturnStmt 0x132142368 <line:13:13, col:20>
    |   |   `-RecoveryExpr 0x132142348 <col:20> '<dependent type>' contains-errors lvalue
    |   |-CallExpr 0x132142410 <line:14:9, col:32> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x132142398 <col:9> 'int ()' Function 0x132141b60 'bson_append32' 'int ()'
    |   | |-RecoveryExpr 0x1321423b8 <col:24> '<dependent type>' contains-errors lvalue
    |   | `-UnaryOperator 0x1321423f8 <col:27, col:28> 'int *' prefix '&' cannot overflow
    |   |   `-DeclRefExpr 0x1321423d8 <col:28> 'int' lvalue ParmVar 0x132128320 'len' 'int'
    |   |-CallExpr 0x1321424a0 <line:15:9, col:35> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x132142440 <col:9> 'int ()' Function 0x132141ce8 'bson_append_byte' 'int ()'
    |   | |-RecoveryExpr 0x132142460 <col:27> '<dependent type>' contains-errors lvalue
    |   | `-DeclRefExpr 0x132142480 <col:30> 'char' lvalue ParmVar 0x132128220 'type' 'char'
    |   `-CallExpr 0x132142550 <line:16:9, col:34> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x1321424d0 <col:9> 'int ()' Function 0x132141f00 'bson_append' 'int ()'
    |     |-RecoveryExpr 0x1321424f0 <col:22> '<dependent type>' contains-errors lvalue
    |     |-DeclRefExpr 0x132142510 <col:25> 'const char *' lvalue ParmVar 0x1321282a0 'str' 'const char *'
    |     `-DeclRefExpr 0x132142530 <col:30> 'int' lvalue ParmVar 0x132128320 'len' 'int'
    `-ReturnStmt 0x132142620 <line:18:5, col:12>
      `-RecoveryExpr 0x132142600 <col:12> '<dependent type>' contains-errors lvalue
