`-FunctionDecl 0x15480de58  line:1:7 invalid get_arg 'char *(char *, int)'
  |-ParmVarDecl 0x15480dcd8 <col:15, col:21> col:21 used line 'char *'
  |-ParmVarDecl 0x15480dd70 <col:27, col:35> col:35 invalid get_next_arg 'int'
  `-CompoundStmt 0x154828fb0 <line:2:1, line:50:1>
    |-DeclStmt 0x15480e028 <line:3:3, col:20>
    | |-VarDecl 0x15480df28 <col:3, col:9> col:9 used ptr 'char *'
    | `-VarDecl 0x15480dfa8 <col:3, col:15> col:15 used start 'char *'
    |-DeclStmt 0x15480e0f0 <line:5:3, col:16>
    | `-VarDecl 0x15480e050 <col:3, col:15> col:8 used qtype 'char' cinit
    |   `-ImplicitCastExpr 0x15480e0d8 <col:15> 'char' <IntegralCast>
    |     `-IntegerLiteral 0x15480e0b8 <col:15> 'int' 0
    |-BinaryOperator 0x15480e160 <line:7:3, col:8> 'char *' '='
    | |-DeclRefExpr 0x15480e108 <col:3> 'char *' lvalue Var 0x15480df28 'ptr' 'char *'
    | `-ImplicitCastExpr 0x15480e148 <col:8> 'char *' <LValueToRValue>
    |   `-DeclRefExpr 0x15480e128 <col:8> 'char *' lvalue ParmVar 0x15480dcd8 'line' 'char *'
    |-IfStmt 0x154827b18 <line:8:3, line:24:3> has_else
    | |-RecoveryExpr 0x15480e180 <line:8:7> '<dependent type>' contains-errors lvalue
    | |-CompoundStmt 0x15480e3a0 <line:9:3, line:13:3>
    | | |-ForStmt 0x15480e248 <line:10:5, col:25>
    | | | |-<<<NULL>>>
    | | | |-<<<NULL>>>
    | | | |-ImplicitCastExpr 0x15480e1f0 <col:12, col:13> 'char' <LValueToRValue>
    | | | | `-UnaryOperator 0x15480e1d8 <col:12, col:13> 'char' lvalue prefix '*' cannot overflow
    | | | |   `-ImplicitCastExpr 0x15480e1c0 <col:13> 'char *' <LValueToRValue>
    | | | |     `-DeclRefExpr 0x15480e1a0 <col:13> 'char *' lvalue Var 0x15480df28 'ptr' 'char *'
    | | | |-UnaryOperator 0x15480e228 <col:18, col:21> 'char *' postfix '++'
    | | | | `-DeclRefExpr 0x15480e208 <col:18> 'char *' lvalue Var 0x15480df28 'ptr' 'char *'
    | | | `-NullStmt 0x15480e240 <col:25>
    | | `-IfStmt 0x15480e380 <line:11:5, line:12:10>
    | |   |-ImplicitCastExpr 0x15480e330 <line:11:9, col:18> 'char' <LValueToRValue>
    | |   | `-UnaryOperator 0x15480e318 <col:9, col:18> 'char' lvalue prefix '*' cannot overflow
    | |   |   `-ParenExpr 0x15480e2f8 <col:10, col:18> 'char *'
    | |   |     `-BinaryOperator 0x15480e2d8 <col:11, col:17> 'char *' '+'
    | |   |       |-ImplicitCastExpr 0x15480e2c0 <col:11> 'char *' <LValueToRValue>
    | |   |       | `-DeclRefExpr 0x15480e280 <col:11> 'char *' lvalue Var 0x15480df28 'ptr' 'char *'
    | |   |       `-IntegerLiteral 0x15480e2a0 <col:17> 'int' 1
    | |   `-UnaryOperator 0x15480e368 <line:12:7, col:10> 'char *' postfix '++'
    | |     `-DeclRefExpr 0x15480e348 <col:7> 'char *' lvalue Var 0x15480df28 'ptr' 'char *'
    | `-CompoundStmt 0x154827af8 <line:15:3, line:24:3>
    |   |-WhileStmt 0x1548276d0 <line:17:5, line:18:10>
    |   | |-CallExpr 0x154827668 <line:17:12, col:41> '<dependent type>' contains-errors
    |   | | |-DeclRefExpr 0x154827560 <col:12> 'int ()' Function 0x1548274a8 'my_isspace' 'int ()'
    |   | | |-RecoveryExpr 0x154827618 <col:23> '<dependent type>' contains-errors lvalue
    |   | | `-UnaryOperator 0x154827650 <col:37, col:38> 'char' lvalue prefix '*' cannot overflow
    |   | |   `-ImplicitCastExpr 0x154827638 <col:38> 'char *' <LValueToRValue>
    |   | |     `-DeclRefExpr 0x154827598 <col:38> 'char *' lvalue Var 0x15480df28 'ptr' 'char *'
    |   | `-UnaryOperator 0x1548276b8 <line:18:7, col:10> 'char *' postfix '++'
    |   |   `-DeclRefExpr 0x154827698 <col:7> 'char *' lvalue Var 0x15480df28 'ptr' 'char *'
    |   `-IfStmt 0x154827ac8 <line:19:5, line:23:12> has_else
    |     |-BinaryOperator 0x154827788 <line:19:9, col:17> 'int' '=='
    |     | |-ImplicitCastExpr 0x154827770 <col:9, col:10> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x154827758 <col:9, col:10> 'char' <LValueToRValue>
    |     | |   `-UnaryOperator 0x154827728 <col:9, col:10> 'char' lvalue prefix '*' cannot overflow
    |     | |     `-ImplicitCastExpr 0x154827710 <col:10> 'char *' <LValueToRValue>
    |     | |       `-DeclRefExpr 0x1548276f0 <col:10> 'char *' lvalue Var 0x15480df28 'ptr' 'char *'
    |     | `-CharacterLiteral 0x154827740 <col:17> 'int' 92
    |     |-CompoundAssignOperator 0x1548277e8 <line:20:7, col:13> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
    |     | |-DeclRefExpr 0x1548277a8 <col:7> 'char *' lvalue Var 0x15480df28 'ptr' 'char *'
    |     | `-IntegerLiteral 0x1548277c8 <col:13> 'int' 2
    |     `-WhileStmt 0x154827aa8 <line:22:7, line:23:12>
    |       |-BinaryOperator 0x154827a50 <line:22:14, col:51> 'int' contains-errors '&&'
    |       | |-UnaryOperator 0x1548279a0 <col:14, col:15> 'char' lvalue prefix '*' cannot overflow
    |       | | `-ImplicitCastExpr 0x154827988 <col:15> 'char *' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x154827818 <col:15> 'char *' lvalue Var 0x15480df28 'ptr' 'char *'
    |       | `-UnaryOperator 0x154827a38 <col:21, col:51> '<dependent type>' contains-errors prefix '!' cannot overflow
    |       |   `-CallExpr 0x154827a08 <col:22, col:51> '<dependent type>' contains-errors
    |       |     |-DeclRefExpr 0x154827868 <col:22> 'int ()' Function 0x1548274a8 'my_isspace' 'int ()'
    |       |     |-RecoveryExpr 0x1548279b8 <col:33> '<dependent type>' contains-errors lvalue
    |       |     `-UnaryOperator 0x1548279f0 <col:47, col:48> 'char' lvalue prefix '*' cannot overflow
    |       |       `-ImplicitCastExpr 0x1548279d8 <col:48> 'char *' <LValueToRValue>
    |       |         `-DeclRefExpr 0x1548278a0 <col:48> 'char *' lvalue Var 0x15480df28 'ptr' 'char *'
    |       `-UnaryOperator 0x154827a90 <line:23:9, col:12> 'char *' postfix '++'
    |         `-DeclRefExpr 0x154827a70 <col:9> 'char *' lvalue Var 0x15480df28 'ptr' 'char *'
    |-IfStmt 0x154827c10 <line:25:3, line:26:12>
    | |-UnaryOperator 0x154827bb0 <line:25:7, col:9> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x154827b98 <col:8, col:9> 'char' <LValueToRValue>
    | |   `-UnaryOperator 0x154827b80 <col:8, col:9> 'char' lvalue prefix '*' cannot overflow
    | |     `-ImplicitCastExpr 0x154827b68 <col:9> 'char *' <LValueToRValue>
    | |       `-DeclRefExpr 0x154827b48 <col:9> 'char *' lvalue Var 0x15480df28 'ptr' 'char *'
    | `-ReturnStmt 0x154827c00 <line:26:5, col:12>
    |   `-RecoveryExpr 0x154827be0 <col:12> '<dependent type>' contains-errors lvalue
    |-WhileStmt 0x154827da0 <line:27:3, line:28:8>
    | |-CallExpr 0x154827d38 <line:27:10, col:39> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x154827c30 <col:10> 'int ()' Function 0x1548274a8 'my_isspace' 'int ()'
    | | |-RecoveryExpr 0x154827ce8 <col:21> '<dependent type>' contains-errors lvalue
    | | `-UnaryOperator 0x154827d20 <col:35, col:36> 'char' lvalue prefix '*' cannot overflow
    | |   `-ImplicitCastExpr 0x154827d08 <col:36> 'char *' <LValueToRValue>
    | |     `-DeclRefExpr 0x154827c68 <col:36> 'char *' lvalue Var 0x15480df28 'ptr' 'char *'
    | `-UnaryOperator 0x154827d88 <line:28:5, col:8> 'char *' postfix '++'
    |   `-DeclRefExpr 0x154827d68 <col:5> 'char *' lvalue Var 0x15480df28 'ptr' 'char *'
    |-IfStmt 0x154828148 <line:29:3, line:34:3>
    | |-BinaryOperator 0x154828008 <line:29:7, col:47> 'int' '||'
    | | |-BinaryOperator 0x154827f30 <col:7, col:31> 'int' '||'
    | | | |-BinaryOperator 0x154827e58 <col:7, col:15> 'int' '=='
    | | | | |-ImplicitCastExpr 0x154827e40 <col:7, col:8> 'int' <IntegralCast>
    | | | | | `-ImplicitCastExpr 0x154827e28 <col:7, col:8> 'char' <LValueToRValue>
    | | | | |   `-UnaryOperator 0x154827df8 <col:7, col:8> 'char' lvalue prefix '*' cannot overflow
    | | | | |     `-ImplicitCastExpr 0x154827de0 <col:8> 'char *' <LValueToRValue>
    | | | | |       `-DeclRefExpr 0x154827dc0 <col:8> 'char *' lvalue Var 0x15480df28 'ptr' 'char *'
    | | | | `-CharacterLiteral 0x154827e10 <col:15> 'int' 39
    | | | `-BinaryOperator 0x154827f10 <col:23, col:31> 'int' '=='
    | | |   |-ImplicitCastExpr 0x154827ef8 <col:23, col:24> 'int' <IntegralCast>
    | | |   | `-ImplicitCastExpr 0x154827ee0 <col:23, col:24> 'char' <LValueToRValue>
    | | |   |   `-UnaryOperator 0x154827eb0 <col:23, col:24> 'char' lvalue prefix '*' cannot overflow
    | | |   |     `-ImplicitCastExpr 0x154827e98 <col:24> 'char *' <LValueToRValue>
    | | |   |       `-DeclRefExpr 0x154827e78 <col:24> 'char *' lvalue Var 0x15480df28 'ptr' 'char *'
    | | |   `-CharacterLiteral 0x154827ec8 <col:31> 'int' 34
    | | `-BinaryOperator 0x154827fe8 <col:39, col:47> 'int' '=='
    | |   |-ImplicitCastExpr 0x154827fd0 <col:39, col:40> 'int' <IntegralCast>
    | |   | `-ImplicitCastExpr 0x154827fb8 <col:39, col:40> 'char' <LValueToRValue>
    | |   |   `-UnaryOperator 0x154827f88 <col:39, col:40> 'char' lvalue prefix '*' cannot overflow
    | |   |     `-ImplicitCastExpr 0x154827f70 <col:40> 'char *' <LValueToRValue>
    | |   |       `-DeclRefExpr 0x154827f50 <col:40> 'char *' lvalue Var 0x15480df28 'ptr' 'char *'
    | |   `-CharacterLiteral 0x154827fa0 <col:47> 'int' 96
    | `-CompoundStmt 0x154828128 <line:30:3, line:34:3>
    |   |-BinaryOperator 0x1548280b0 <line:31:5, col:13> 'char' '='
    |   | |-DeclRefExpr 0x154828028 <col:5> 'char' lvalue Var 0x15480e050 'qtype' 'char'
    |   | `-ImplicitCastExpr 0x154828098 <col:12, col:13> 'char' <LValueToRValue>
    |   |   `-UnaryOperator 0x154828080 <col:12, col:13> 'char' lvalue prefix '*' cannot overflow
    |   |     `-ImplicitCastExpr 0x154828068 <col:13> 'char *' <LValueToRValue>
    |   |       `-DeclRefExpr 0x154828048 <col:13> 'char *' lvalue Var 0x15480df28 'ptr' 'char *'
    |   `-UnaryOperator 0x154828110 <line:33:5, col:8> 'char *' postfix '++'
    |     `-DeclRefExpr 0x1548280f0 <col:5> 'char *' lvalue Var 0x15480df28 'ptr' 'char *'
    |-ForStmt 0x154828de8 <line:35:3, line:47:3>
    | |-BinaryOperator 0x1548281c0 <line:35:8, col:14> 'char *' '='
    | | |-DeclRefExpr 0x154828168 <col:8> 'char *' lvalue Var 0x15480dfa8 'start' 'char *'
    | | `-ImplicitCastExpr 0x1548281a8 <col:14> 'char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x154828188 <col:14> 'char *' lvalue Var 0x15480df28 'ptr' 'char *'
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x154828230 <col:20, col:21> 'char' <LValueToRValue>
    | | `-UnaryOperator 0x154828218 <col:20, col:21> 'char' lvalue prefix '*' cannot overflow
    | |   `-ImplicitCastExpr 0x154828200 <col:21> 'char *' <LValueToRValue>
    | |     `-DeclRefExpr 0x1548281e0 <col:21> 'char *' lvalue Var 0x15480df28 'ptr' 'char *'
    | |-UnaryOperator 0x154828268 <col:26, col:29> 'char *' postfix '++'
    | | `-DeclRefExpr 0x154828248 <col:26> 'char *' lvalue Var 0x15480df28 'ptr' 'char *'
    | `-CompoundStmt 0x154828dd0 <line:36:3, line:47:3>
    |   `-IfStmt 0x154828da0 <line:37:5, line:46:5> has_else
    |     |-BinaryOperator 0x1548283e0 <line:37:9, col:30> 'int' '&&'
    |     | |-BinaryOperator 0x154828318 <col:9, col:17> 'int' '=='
    |     | | |-ImplicitCastExpr 0x154828300 <col:9, col:10> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x1548282e8 <col:9, col:10> 'char' <LValueToRValue>
    |     | | |   `-UnaryOperator 0x1548282b8 <col:9, col:10> 'char' lvalue prefix '*' cannot overflow
    |     | | |     `-ImplicitCastExpr 0x1548282a0 <col:10> 'char *' <LValueToRValue>
    |     | | |       `-DeclRefExpr 0x154828280 <col:10> 'char *' lvalue Var 0x15480df28 'ptr' 'char *'
    |     | | `-CharacterLiteral 0x1548282d0 <col:17> 'int' 92
    |     | `-ImplicitCastExpr 0x1548283c8 <col:25, col:30> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x1548283b0 <col:25, col:30> 'char' <LValueToRValue>
    |     |     `-ArraySubscriptExpr 0x154828390 <col:25, col:30> 'char' lvalue
    |     |       |-ImplicitCastExpr 0x154828378 <col:25> 'char *' <LValueToRValue>
    |     |       | `-DeclRefExpr 0x154828338 <col:25> 'char *' lvalue Var 0x15480df28 'ptr' 'char *'
    |     |       `-IntegerLiteral 0x154828358 <col:29> 'int' 1
    |     |-CompoundStmt 0x154828a30 <line:38:5, line:41:5>
    |     | `-CallExpr 0x1548289e8 <line:40:7, col:33> 'int'
    |     |   |-ImplicitCastExpr 0x1548289d0 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |     |   | `-DeclRefExpr 0x1548288e0 <col:7> 'int ()' Function 0x154828828 'strmov_overlapp' 'int ()'
    |     |   |-ImplicitCastExpr 0x154828a18 <col:23> 'char *' <LValueToRValue>
    |     |   | `-DeclRefExpr 0x154828900 <col:23> 'char *' lvalue Var 0x15480df28 'ptr' 'char *'
    |     |   `-BinaryOperator 0x154828978 <col:28, col:32> 'char *' '+'
    |     |     |-ImplicitCastExpr 0x154828960 <col:28> 'char *' <LValueToRValue>
    |     |     | `-DeclRefExpr 0x154828920 <col:28> 'char *' lvalue Var 0x15480df28 'ptr' 'char *'
    |     |     `-IntegerLiteral 0x154828940 <col:32> 'int' 1
    |     `-IfStmt 0x154828d80 <line:42:10, line:46:5>
    |       |-RecoveryExpr 0x154828c90 <line:42:14, col:66> '_Bool' contains-errors
    |       `-CompoundStmt 0x154828d60 <line:43:5, line:46:5>
    |         |-BinaryOperator 0x154828d38 <line:44:7, col:13> 'char' '='
    |         | |-UnaryOperator 0x154828ce8 <col:7, col:8> 'char' lvalue prefix '*' cannot overflow
    |         | | `-ImplicitCastExpr 0x154828cd0 <col:8> 'char *' <LValueToRValue>
    |         | |   `-DeclRefExpr 0x154828cb0 <col:8> 'char *' lvalue Var 0x15480df28 'ptr' 'char *'
    |         | `-ImplicitCastExpr 0x154828d20 <col:13> 'char' <IntegralCast>
    |         |   `-IntegerLiteral 0x154828d00 <col:13> 'int' 0
    |         `-BreakStmt 0x154828d58 <line:45:7>
    `-ReturnStmt 0x154828fa0 <line:49:3, col:30>
      `-ConditionalOperator 0x154828f70 <col:10, col:30> '<dependent type>' contains-errors
        |-RecoveryExpr 0x154828f30 <col:10> '<dependent type>' contains-errors lvalue
        |-DeclRefExpr 0x154828ec8 <col:22> 'char *' lvalue Var 0x15480dfa8 'start' 'char *'
        `-RecoveryExpr 0x154828f50 <col:30> '<dependent type>' contains-errors lvalue
