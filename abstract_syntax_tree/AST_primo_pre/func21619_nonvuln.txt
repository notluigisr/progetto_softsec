`-FunctionDecl 0x12a128268  line:1:1 simplify_key 'int (int, int *)'
  |-ParmVarDecl 0x12a1280d8 <col:14, col:18> col:18 used key 'int'
  |-ParmVarDecl 0x12a128188 <col:23, col:28> col:28 used modifiers 'int *'
  `-CompoundStmt 0x12a141658 <line:2:1, line:28:1>
    |-DeclStmt 0x12a1283e8 <line:3:5, col:14>
    | `-VarDecl 0x12a128380 <col:5, col:13> col:13 used i 'int'
    |-DeclStmt 0x12a128480 <line:4:5, col:17>
    | `-VarDecl 0x12a128418 <col:5, col:13> col:13 used key0 'int'
    |-DeclStmt 0x12a128518 <line:5:5, col:17>
    | `-VarDecl 0x12a1284b0 <col:5, col:13> col:13 used key1 'int'
    |-IfStmt 0x12a1415f0 <line:7:5, line:26:5>
    | |-RecoveryExpr 0x12a128620 <line:7:9, col:68> '_Bool' contains-errors
    | `-CompoundStmt 0x12a1415c8 <line:8:5, line:26:5>
    |   |-IfStmt 0x12a140b90 <line:10:2, line:14:2>
    |   | |-RecoveryExpr 0x12a128750 <line:10:6, col:48> '_Bool' contains-errors
    |   | `-CompoundStmt 0x12a140b70 <line:11:2, line:14:2>
    |   |   |-CompoundAssignOperator 0x12a140af8 <line:12:6, col:21> 'int' contains-errors '&=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    |   |   | |-UnaryOperator 0x12a140a90 <col:6, col:7> 'int' lvalue prefix '*' cannot overflow
    |   |   | | `-ImplicitCastExpr 0x12a140a78 <col:7> 'int *' <LValueToRValue>
    |   |   | |   `-DeclRefExpr 0x12a128770 <col:7> 'int *' lvalue ParmVar 0x12a128188 'modifiers' 'int *'
    |   |   | `-UnaryOperator 0x12a140ae0 <col:20, col:21> '<dependent type>' contains-errors prefix '~' cannot overflow
    |   |   |   `-ImplicitCastExpr 0x12a140ac8 <col:21> '<dependent type>' contains-errors <LValueToRValue>
    |   |   |     `-RecoveryExpr 0x12a140aa8 <col:21> '<dependent type>' contains-errors lvalue
    |   |   `-ReturnStmt 0x12a140b60 <line:13:6, col:13>
    |   |     `-RecoveryExpr 0x12a140b40 <col:13> '<dependent type>' contains-errors lvalue
    |   |-BinaryOperator 0x12a140da8 <line:15:2, col:25> 'int' '='
    |   | |-DeclRefExpr 0x12a140bb0 <col:2> 'int' lvalue Var 0x12a128418 'key0' 'int'
    |   | `-CallExpr 0x12a140d68 <col:9, col:25> 'int'
    |   |   |-ImplicitCastExpr 0x12a140d50 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   |   | `-DeclRefExpr 0x12a140ce0 <col:9> 'int ()' Function 0x12a140c28 'KEY2TERMCAP0' 'int ()'
    |   |   `-ImplicitCastExpr 0x12a140d90 <col:22> 'int' <LValueToRValue>
    |   |     `-DeclRefExpr 0x12a140d00 <col:22> 'int' lvalue ParmVar 0x12a1280d8 'key' 'int'
    |   `-BinaryOperator 0x12a140f60 <line:16:2, col:25> 'int' '='
    |     |-DeclRefExpr 0x12a140dc8 <col:2> 'int' lvalue Var 0x12a1284b0 'key1' 'int'
    |     `-CallExpr 0x12a140f20 <col:9, col:25> 'int'
    |       |-ImplicitCastExpr 0x12a140f08 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |       | `-DeclRefExpr 0x12a140ec8 <col:9> 'int ()' Function 0x12a140e10 'KEY2TERMCAP1' 'int ()'
    |       `-ImplicitCastExpr 0x12a140f48 <col:22> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x12a140ee8 <col:22> 'int' lvalue ParmVar 0x12a1280d8 'key' 'int'
    `-ReturnStmt 0x12a141648 <line:27:5, col:12>
      `-ImplicitCastExpr 0x12a141630 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x12a141610 <col:12> 'int' lvalue ParmVar 0x12a1280d8 'key' 'int'
