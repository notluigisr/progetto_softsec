`-FunctionDecl 0x14c80e358  line:1:12 gfar_of_group_count 'int (struct device_node *)' static
  |-ParmVarDecl 0x14c80e248 <col:32, col:52> col:52 used np 'struct device_node *'
  `-CompoundStmt 0x14c826ce8 <line:2:1, line:11:1>
    |-DeclStmt 0x14c826740 <line:3:2, col:27>
    | `-VarDecl 0x14c8266d8 <col:2, col:22> col:22 used child 'struct device_node *'
    |-DeclStmt 0x14c8267f8 <line:4:2, col:13>
    | `-VarDecl 0x14c826770 <col:2, col:12> col:6 used num 'int' cinit
    |   `-IntegerLiteral 0x14c8267d8 <col:12> 'int' 0
    |-CallExpr 0x14c8269e8 <line:6:2, col:44> 'int'
    | |-ImplicitCastExpr 0x14c8269d0 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x14c826940 <col:2> 'int ()' Function 0x14c826888 'for_each_available_child_of_node' 'int ()'
    | |-ImplicitCastExpr 0x14c826a18 <col:35> 'struct device_node *' <LValueToRValue>
    | | `-DeclRefExpr 0x14c826960 <col:35> 'struct device_node *' lvalue ParmVar 0x14c80e248 'np' 'struct device_node *'
    | `-ImplicitCastExpr 0x14c826a30 <col:39> 'struct device_node *' <LValueToRValue>
    |   `-DeclRefExpr 0x14c826980 <col:39> 'struct device_node *' lvalue Var 0x14c8266d8 'child' 'struct device_node *'
    |-IfStmt 0x14c826c80 <line:7:3, line:8:7>
    | |-CallExpr 0x14c826be8 <line:7:7, col:35> 'int'
    | | |-ImplicitCastExpr 0x14c826bd0 <col:7> 'int (*)()' <FunctionToPointerDecay>
    | | | `-DeclRefExpr 0x14c826b28 <col:7> 'int ()' Function 0x14c826a70 'of_node_name_eq' 'int ()'
    | | |-ImplicitCastExpr 0x14c826c18 <col:23> 'struct device_node *' <LValueToRValue>
    | | | `-DeclRefExpr 0x14c826b48 <col:23> 'struct device_node *' lvalue Var 0x14c8266d8 'child' 'struct device_node *'
    | | `-ImplicitCastExpr 0x14c826c30 <col:30> 'char *' <ArrayToPointerDecay>
    | |   `-StringLiteral 0x14c826bb0 <col:30> 'char[4]' lvalue "STR"
    | `-UnaryOperator 0x14c826c68 <line:8:4, col:7> 'int' postfix '++'
    |   `-DeclRefExpr 0x14c826c48 <col:4> 'int' lvalue Var 0x14c826770 'num' 'int'
    `-ReturnStmt 0x14c826cd8 <line:10:2, col:9>
      `-ImplicitCastExpr 0x14c826cc0 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x14c826ca0 <col:9> 'int' lvalue Var 0x14c826770 'num' 'int'
