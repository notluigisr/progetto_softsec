`-FunctionDecl 0x10500dfa8  line:1:1 invalid isakmp_rfc3948_print 'int (int *, const char *, int, const char *)'
  |-ParmVarDecl 0x10500dd28 <col:22, col:42> col:42 invalid ndo 'int *'
  |-ParmVarDecl 0x10500dda8 <line:2:8, col:22> col:22 used bp 'const char *'
  |-ParmVarDecl 0x10500de28 <col:26, col:32> col:32 referenced invalid length 'int'
  |-ParmVarDecl 0x10500dea8 <line:3:8, col:22> col:22 used bp2 'const char *'
  `-CompoundStmt 0x1050292f0 <line:4:1, line:44:1>
    |-IfStmt 0x105027478 <line:6:2, line:9:2>
    | |-BinaryOperator 0x10500e1b8 <line:6:5, col:27> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x10500e0b0 <col:5, col:15> 'int' contains-errors '=='
    | | | |-RecoveryExpr 0x10500e070 <col:5> '<dependent type>' contains-errors lvalue
    | | | `-IntegerLiteral 0x10500e090 <col:15> 'int' 1
    | | `-BinaryOperator 0x10500e198 <col:20, col:27> 'int' '=='
    | |   |-ImplicitCastExpr 0x10500e180 <col:20, col:24> 'int' <IntegralCast>
    | |   | `-ImplicitCastExpr 0x10500e168 <col:20, col:24> 'char' <LValueToRValue>
    | |   |   `-ArraySubscriptExpr 0x10500e128 <col:20, col:24> 'const char' lvalue
    | |   |     |-ImplicitCastExpr 0x10500e110 <col:20> 'const char *' <LValueToRValue>
    | |   |     | `-DeclRefExpr 0x10500e0d0 <col:20> 'const char *' lvalue ParmVar 0x10500dda8 'bp' 'const char *'
    | |   |     `-IntegerLiteral 0x10500e0f0 <col:23> 'int' 0
    | |   `-IntegerLiteral 0x10500e148 <col:27> 'int' 255
    | `-CompoundStmt 0x105027458 <col:33, line:9:2>
    |   |-CallExpr 0x105027420 <line:7:3, col:24> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x10500e330 <col:3> 'int ()' Function 0x10500e278 'ND_PRINT' 'int ()'
    |   | `-ParenExpr 0x105027400 <col:12, col:23> 'char[4]' contains-errors
    |   |   `-BinaryOperator 0x10500e3d0 <col:13, col:18> 'char[4]' contains-errors ','
    |   |     |-RecoveryExpr 0x10500e350 <col:13> '<dependent type>' contains-errors lvalue
    |   |     `-StringLiteral 0x10500e3b0 <col:18> 'char[4]' lvalue "STR"
    |   `-ReturnStmt 0x105027448 <line:8:3>
    |-IfStmt 0x105027578 <line:11:2, line:13:2>
    | |-BinaryOperator 0x1050274d8 <line:11:5, col:14> 'int' contains-errors '<'
    | | |-RecoveryExpr 0x105027498 <col:5> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x1050274b8 <col:14> 'int' 4
    | `-CompoundStmt 0x105027560 <col:17, line:13:2>
    |   `-GotoStmt 0x105027548 <line:12:3, col:8> 'trunc' 0x1050274f8
    |-IfStmt 0x105027cf0 <line:16:2, line:20:2>
    | |-BinaryOperator 0x105027978 <line:16:5, col:48> 'int' '&&'
    | | |-BinaryOperator 0x105027870 <col:5, col:36> 'int' '&&'
    | | | |-BinaryOperator 0x105027768 <col:5, col:24> 'int' '&&'
    | | | | |-BinaryOperator 0x105027660 <col:5, col:12> 'int' '=='
    | | | | | |-ImplicitCastExpr 0x105027648 <col:5, col:9> 'int' <IntegralCast>
    | | | | | | `-ImplicitCastExpr 0x105027630 <col:5, col:9> 'char' <LValueToRValue>
    | | | | | |   `-ArraySubscriptExpr 0x1050275f0 <col:5, col:9> 'const char' lvalue
    | | | | | |     |-ImplicitCastExpr 0x1050275d8 <col:5> 'const char *' <LValueToRValue>
    | | | | | |     | `-DeclRefExpr 0x105027598 <col:5> 'const char *' lvalue ParmVar 0x10500dda8 'bp' 'const char *'
    | | | | | |     `-IntegerLiteral 0x1050275b8 <col:8> 'int' 0
    | | | | | `-IntegerLiteral 0x105027610 <col:12> 'int' 0
    | | | | `-BinaryOperator 0x105027748 <col:17, col:24> 'int' '=='
    | | | |   |-ImplicitCastExpr 0x105027730 <col:17, col:21> 'int' <IntegralCast>
    | | | |   | `-ImplicitCastExpr 0x105027718 <col:17, col:21> 'char' <LValueToRValue>
    | | | |   |   `-ArraySubscriptExpr 0x1050276d8 <col:17, col:21> 'const char' lvalue
    | | | |   |     |-ImplicitCastExpr 0x1050276c0 <col:17> 'const char *' <LValueToRValue>
    | | | |   |     | `-DeclRefExpr 0x105027680 <col:17> 'const char *' lvalue ParmVar 0x10500dda8 'bp' 'const char *'
    | | | |   |     `-IntegerLiteral 0x1050276a0 <col:20> 'int' 1
    | | | |   `-IntegerLiteral 0x1050276f8 <col:24> 'int' 0
    | | | `-BinaryOperator 0x105027850 <col:29, col:36> 'int' '=='
    | | |   |-ImplicitCastExpr 0x105027838 <col:29, col:33> 'int' <IntegralCast>
    | | |   | `-ImplicitCastExpr 0x105027820 <col:29, col:33> 'char' <LValueToRValue>
    | | |   |   `-ArraySubscriptExpr 0x1050277e0 <col:29, col:33> 'const char' lvalue
    | | |   |     |-ImplicitCastExpr 0x1050277c8 <col:29> 'const char *' <LValueToRValue>
    | | |   |     | `-DeclRefExpr 0x105027788 <col:29> 'const char *' lvalue ParmVar 0x10500dda8 'bp' 'const char *'
    | | |   |     `-IntegerLiteral 0x1050277a8 <col:32> 'int' 2
    | | |   `-IntegerLiteral 0x105027800 <col:36> 'int' 0
    | | `-BinaryOperator 0x105027958 <col:41, col:48> 'int' '=='
    | |   |-ImplicitCastExpr 0x105027940 <col:41, col:45> 'int' <IntegralCast>
    | |   | `-ImplicitCastExpr 0x105027928 <col:41, col:45> 'char' <LValueToRValue>
    | |   |   `-ArraySubscriptExpr 0x1050278e8 <col:41, col:45> 'const char' lvalue
    | |   |     |-ImplicitCastExpr 0x1050278d0 <col:41> 'const char *' <LValueToRValue>
    | |   |     | `-DeclRefExpr 0x105027890 <col:41> 'const char *' lvalue ParmVar 0x10500dda8 'bp' 'const char *'
    | |   |     `-IntegerLiteral 0x1050278b0 <col:44> 'int' 3
    | |   `-IntegerLiteral 0x105027908 <col:48> 'int' 0
    | `-CompoundStmt 0x105027cc8 <col:51, line:20:2>
    |   |-CallExpr 0x105027a38 <line:17:3, col:24> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x105027998 <col:3> 'int ()' Function 0x10500e278 'ND_PRINT' 'int ()'
    |   | `-ParenExpr 0x105027a18 <col:12, col:23> 'char[4]' contains-errors
    |   |   `-BinaryOperator 0x1050279f8 <col:13, col:18> 'char[4]' contains-errors ','
    |   |     |-RecoveryExpr 0x1050279b8 <col:13> '<dependent type>' contains-errors lvalue
    |   |     `-StringLiteral 0x1050279d8 <col:18> 'char[4]' lvalue "STR"
    |   |-CallExpr 0x105027c78 <line:18:3, col:40> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x105027b40 <col:3> 'int ()' Function 0x105027a88 'isakmp_print' 'int ()'
    |   | |-RecoveryExpr 0x105027b60 <col:16> '<dependent type>' contains-errors lvalue
    |   | |-BinaryOperator 0x105027bd8 <col:21, col:24> 'const char *' '+'
    |   | | |-ImplicitCastExpr 0x105027bc0 <col:21> 'const char *' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x105027b80 <col:21> 'const char *' lvalue ParmVar 0x10500dda8 'bp' 'const char *'
    |   | | `-IntegerLiteral 0x105027ba0 <col:24> 'int' 4
    |   | |-BinaryOperator 0x105027c38 <col:27, col:34> '<dependent type>' contains-errors '-'
    |   | | |-RecoveryExpr 0x105027bf8 <col:27> '<dependent type>' contains-errors lvalue
    |   | | `-IntegerLiteral 0x105027c18 <col:34> 'int' 4
    |   | `-DeclRefExpr 0x105027c58 <col:37> 'const char *' lvalue ParmVar 0x10500dea8 'bp2' 'const char *'
    |   `-ReturnStmt 0x105027cb8 <line:19:3>
    |-CompoundStmt 0x105029198 <line:23:2, line:39:2>
    | |-DeclStmt 0x105027eb0 <line:24:3, col:22>
    | | |-VarDecl 0x105027d28 <col:3, col:7> col:7 used nh 'int'
    | | |-VarDecl 0x105027da8 <col:3, col:11> col:11 used enh 'int'
    | | `-VarDecl 0x105027e28 <col:3, col:16> col:16 used padlen 'int'
    | |-DeclStmt 0x105027f48 <line:25:3, col:14>
    | | `-VarDecl 0x105027ee0 <col:3, col:7> col:7 used advance 'int'
    | |-CallExpr 0x105028000 <line:27:3, col:24> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x105027f60 <col:3> 'int ()' Function 0x10500e278 'ND_PRINT' 'int ()'
    | | `-ParenExpr 0x105027fe0 <col:12, col:23> 'char[4]' contains-errors
    | |   `-BinaryOperator 0x105027fc0 <col:13, col:18> 'char[4]' contains-errors ','
    | |     |-RecoveryExpr 0x105027f80 <col:13> '<dependent type>' contains-errors lvalue
    | |     `-StringLiteral 0x105027fa0 <col:18> 'char[4]' lvalue "STR"
    | |-BinaryOperator 0x105028288 <line:29:3, col:58> 'int' contains-errors '='
    | | |-DeclRefExpr 0x105028028 <col:3> 'int' lvalue Var 0x105027ee0 'advance' 'int'
    | | `-CallExpr 0x105028238 <col:13, col:58> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x105028128 <col:13> 'int ()' Function 0x105028070 'esp_print' 'int ()'
    | |   |-RecoveryExpr 0x105028148 <col:23> '<dependent type>' contains-errors lvalue
    | |   |-DeclRefExpr 0x105028168 <col:28> 'const char *' lvalue ParmVar 0x10500dda8 'bp' 'const char *'
    | |   |-RecoveryExpr 0x105028188 <col:32> '<dependent type>' contains-errors lvalue
    | |   |-DeclRefExpr 0x1050281a8 <col:40> 'const char *' lvalue ParmVar 0x10500dea8 'bp2' 'const char *'
    | |   |-UnaryOperator 0x1050281e8 <col:45, col:46> 'int *' prefix '&' cannot overflow
    | |   | `-DeclRefExpr 0x1050281c8 <col:46> 'int' lvalue Var 0x105027da8 'enh' 'int'
    | |   `-UnaryOperator 0x105028220 <col:51, col:52> 'int *' prefix '&' cannot overflow
    | |     `-DeclRefExpr 0x105028200 <col:52> 'int' lvalue Var 0x105027e28 'padlen' 'int'
    | |-IfStmt 0x105028330 <line:30:3, line:31:4>
    | | |-BinaryOperator 0x105028300 <line:30:6, col:17> 'int' '<='
    | | | |-ImplicitCastExpr 0x1050282e8 <col:6> 'int' <LValueToRValue>
    | | | | `-DeclRefExpr 0x1050282a8 <col:6> 'int' lvalue Var 0x105027ee0 'advance' 'int'
    | | | `-IntegerLiteral 0x1050282c8 <col:17> 'int' 0
    | | `-ReturnStmt 0x105028320 <line:31:4>
    | |-CompoundAssignOperator 0x1050283a8 <line:33:3, col:9> 'const char *' '+=' ComputeLHSTy='const char *' ComputeResultTy='const char *'
    | | |-DeclRefExpr 0x105028350 <col:3> 'const char *' lvalue ParmVar 0x10500dda8 'bp' 'const char *'
    | | `-ImplicitCastExpr 0x105028390 <col:9> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x105028370 <col:9> 'int' lvalue Var 0x105027ee0 'advance' 'int'
    | |-CompoundAssignOperator 0x105028eb8 <line:34:3, col:23> '<dependent type>' contains-errors '-=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    | | |-RecoveryExpr 0x105028e00 <col:3> '<dependent type>' contains-errors lvalue
    | | | `-DeclRefExpr 0x1050283d8 <col:3> 'int' lvalue ParmVar 0x10500de28 'length' 'int'
    | | `-BinaryOperator 0x105028e98 <col:13, col:23> 'int' '+'
    | |   |-ImplicitCastExpr 0x105028e68 <col:13> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x105028e28 <col:13> 'int' lvalue Var 0x105027ee0 'advance' 'int'
    | |   `-ImplicitCastExpr 0x105028e80 <col:23> 'int' <LValueToRValue>
    | |     `-DeclRefExpr 0x105028e48 <col:23> 'int' lvalue Var 0x105027e28 'padlen' 'int'
    | |-BinaryOperator 0x105028f80 <line:35:3, col:14> 'int' '='
    | | |-DeclRefExpr 0x105028ee8 <col:3> 'int' lvalue Var 0x105027d28 'nh' 'int'
    | | `-BinaryOperator 0x105028f60 <col:8, col:14> 'int' '&'
    | |   |-ImplicitCastExpr 0x105028f48 <col:8> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x105028f08 <col:8> 'int' lvalue Var 0x105027da8 'enh' 'int'
    | |   `-IntegerLiteral 0x105028f28 <col:14> 'int' 255
    | |-CallExpr 0x105029140 <line:37:3, col:42> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x105029080 <col:3> 'int ()' Function 0x105028fc8 'ip_print_inner' 'int ()'
    | | |-RecoveryExpr 0x1050290a0 <col:18> '<dependent type>' contains-errors lvalue
    | | |-DeclRefExpr 0x1050290c0 <col:23> 'const char *' lvalue ParmVar 0x10500dda8 'bp' 'const char *'
    | | |-RecoveryExpr 0x1050290e0 <col:27> '<dependent type>' contains-errors lvalue
    | | |-DeclRefExpr 0x105029100 <col:35> 'int' lvalue Var 0x105027d28 'nh' 'int'
    | | `-DeclRefExpr 0x105029120 <col:39> 'const char *' lvalue ParmVar 0x10500dea8 'bp2' 'const char *'
    | `-ReturnStmt 0x105029188 <line:38:3>
    |-LabelStmt 0x1050292c0 <line:41:1, line:42:22> 'trunc'
    | `-CallExpr 0x105029298 <col:2, col:22> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x1050291f8 <col:2> 'int ()' Function 0x10500e278 'ND_PRINT' 'int ()'
    |   `-ParenExpr 0x105029278 <col:11, col:21> 'char[4]' contains-errors
    |     `-BinaryOperator 0x105029258 <col:12, col:16> 'char[4]' contains-errors ','
    |       |-RecoveryExpr 0x105029218 <col:12> '<dependent type>' contains-errors lvalue
    |       `-StringLiteral 0x105029238 <col:16> 'char[4]' lvalue "STR"
    `-ReturnStmt 0x1050292e0 <line:43:2>
