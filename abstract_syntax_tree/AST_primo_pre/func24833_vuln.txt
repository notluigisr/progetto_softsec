`-FunctionDecl 0x14b928190  line:1:13 test_parse_uid 'void (void)' static
  `-CompoundStmt 0x14c0098e8 <col:34, line:16:1>
    |-DeclStmt 0x14b928300 <line:2:9, col:14>
    | `-VarDecl 0x14b928298 <col:9, col:13> col:13 used r 'int'
    |-CallExpr 0x14b9285c8 <line:5:9, col:33> 'int'
    | |-ImplicitCastExpr 0x14b9285b0 <col:9> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x14b928440 <col:9> 'int ()' Function 0x14b928388 'log_info' 'int ()'
    | |-ImplicitCastExpr 0x14b9285f8 <col:18> 'char *' <ArrayToPointerDecay>
    | | `-StringLiteral 0x14b9284a0 <col:18> 'char[4]' lvalue "STR"
    | `-ImplicitCastExpr 0x14b928610 <col:25> 'const char *' <ArrayToPointerDecay>
    |   `-PredefinedExpr 0x14b928568 <col:25> 'const char[15]' lvalue __func__
    |     `-StringLiteral 0x14b928540 <col:25> 'const char[15]' lvalue "test_parse_uid"
    |-BinaryOperator 0x14c009068 <line:7:9, col:34> 'int' contains-errors '='
    | |-DeclRefExpr 0x14b928628 <col:9> 'int' lvalue Var 0x14b928298 'r' 'int'
    | `-CallExpr 0x14c009038 <col:13, col:34> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x14b928728 <col:13> 'int ()' Function 0x14b928670 'parse_uid' 'int ()'
    |   |-StringLiteral 0x14b928748 <col:23> 'char[4]' lvalue "STR"
    |   `-UnaryOperator 0x14c009020 <col:30, col:31> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-RecoveryExpr 0x14c009000 <col:31> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x14c009218 <line:8:9, col:25> 'int'
    | |-ImplicitCastExpr 0x14c009200 <col:9> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x14c009168 <col:9> 'int ()' Function 0x14c0090b0 'assert_se' 'int ()'
    | `-BinaryOperator 0x14c0091e0 <col:19, col:24> 'int' '=='
    |   |-ImplicitCastExpr 0x14c0091c8 <col:19> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x14c009188 <col:19> 'int' lvalue Var 0x14b928298 'r' 'int'
    |   `-IntegerLiteral 0x14c0091a8 <col:24> 'int' 0
    |-CallExpr 0x14c009320 <line:9:9, col:29> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x14c009240 <col:9> 'int ()' Function 0x14c0090b0 'assert_se' 'int ()'
    | `-BinaryOperator 0x14c009300 <col:19, col:26> 'int' contains-errors '=='
    |   |-RecoveryExpr 0x14c0092e0 <col:19> '<dependent type>' contains-errors lvalue
    |   `-IntegerLiteral 0x14c009278 <col:26> 'int' 100
    |-BinaryOperator 0x14c009490 <line:11:9, col:34> 'int' contains-errors '='
    | |-DeclRefExpr 0x14c009348 <col:9> 'int' lvalue Var 0x14b928298 'r' 'int'
    | `-CallExpr 0x14c009460 <col:13, col:34> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x14c009368 <col:13> 'int ()' Function 0x14b928670 'parse_uid' 'int ()'
    |   |-StringLiteral 0x14c009388 <col:23> 'char[4]' lvalue "STR"
    |   `-UnaryOperator 0x14c009448 <col:30, col:31> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-RecoveryExpr 0x14c009428 <col:31> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x14c0095f0 <line:12:9, col:30> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x14c0094b0 <col:9> 'int ()' Function 0x14c0090b0 'assert_se' 'int ()'
    | `-BinaryOperator 0x14c0095d0 <col:19, col:25> 'int' contains-errors '=='
    |   |-DeclRefExpr 0x14c0094d0 <col:19> 'int' lvalue Var 0x14b928298 'r' 'int'
    |   `-UnaryOperator 0x14c0095b8 <col:24, col:25> '<dependent type>' contains-errors prefix '-' cannot overflow
    |     `-ImplicitCastExpr 0x14c0095a0 <col:25> '<dependent type>' contains-errors <LValueToRValue>
    |       `-RecoveryExpr 0x14c009580 <col:25> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x14c009760 <line:14:9, col:34> 'int' contains-errors '='
    | |-DeclRefExpr 0x14c009618 <col:9> 'int' lvalue Var 0x14b928298 'r' 'int'
    | `-CallExpr 0x14c009730 <col:13, col:34> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x14c009638 <col:13> 'int ()' Function 0x14b928670 'parse_uid' 'int ()'
    |   |-StringLiteral 0x14c009658 <col:23> 'char[4]' lvalue "STR"
    |   `-UnaryOperator 0x14c009718 <col:30, col:31> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-RecoveryExpr 0x14c0096f8 <col:31> '<dependent type>' contains-errors lvalue
    `-CallExpr 0x14c0098c0 <line:15:9, col:31> '<dependent type>' contains-errors
      |-DeclRefExpr 0x14c009780 <col:9> 'int ()' Function 0x14c0090b0 'assert_se' 'int ()'
      `-BinaryOperator 0x14c0098a0 <col:19, col:25> 'int' contains-errors '=='
        |-DeclRefExpr 0x14c0097a0 <col:19> 'int' lvalue Var 0x14b928298 'r' 'int'
        `-UnaryOperator 0x14c009888 <col:24, col:25> '<dependent type>' contains-errors prefix '-' cannot overflow
          `-ImplicitCastExpr 0x14c009870 <col:25> '<dependent type>' contains-errors <LValueToRValue>
            `-RecoveryExpr 0x14c009850 <col:25> '<dependent type>' contains-errors lvalue
