`-FunctionDecl 0x13700de00  line:1:13 invalid AveragePool 'void (const int)' inline
  |-ParmVarDecl 0x13700dcf0 <col:25, <invalid sloc>> col:41 invalid 'const int'
  `-CompoundStmt 0x13780c890 <line:4:79, line:52:1>
    |-CallExpr 0x13700e188 <line:5:3, col:52> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x13700e010 <col:3> 'int ()' Function 0x13700df58 'TFLITE_DCHECK_EQ' 'int ()'
    | |-CallExpr 0x13700e168 <col:20, col:48> '<dependent type>' contains-errors
    | | `-CXXDependentScopeMemberExpr 0x13700e120 <col:20, col:32> '<dependent type>' contains-errors lvalue .DimensionsCount
    | |   `-RecoveryExpr 0x13700e100 <col:20> '<dependent type>' contains-errors lvalue
    | `-IntegerLiteral 0x13700e0b0 <col:51> 'int' 4
    |-CallExpr 0x13700e330 <line:6:3, col:53> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x13700e1b8 <col:3> 'int ()' Function 0x13700df58 'TFLITE_DCHECK_EQ' 'int ()'
    | |-CallExpr 0x13700e310 <col:20, col:49> '<dependent type>' contains-errors
    | | `-CXXDependentScopeMemberExpr 0x13700e2c8 <col:20, col:33> '<dependent type>' contains-errors lvalue .DimensionsCount
    | |   `-RecoveryExpr 0x13700e2a8 <col:20> '<dependent type>' contains-errors lvalue
    | `-IntegerLiteral 0x13700e258 <col:52> 'int' 4
    |-DeclStmt 0x137809430 <line:7:3, col:67>
    | `-VarDecl 0x13700e378 <col:3, col:66> col:13 used batches 'const int' cinit
    |   `-CallExpr 0x1378093f0 <col:23, col:66> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x1378092e0 <col:23> 'int ()' Function 0x137809228 'MatchingDim' 'int ()'
    |     |-RecoveryExpr 0x1378093b0 <col:35> '<dependent type>' contains-errors lvalue
    |     |-IntegerLiteral 0x137809318 <col:48> 'int' 0
    |     |-RecoveryExpr 0x1378093d0 <col:51> '<dependent type>' contains-errors lvalue
    |     `-IntegerLiteral 0x137809350 <col:65> 'int' 0
    |-DeclStmt 0x137809618 <line:8:3, col:65>
    | `-VarDecl 0x137809460 <col:3, col:64> col:13 used depth 'const int' cinit
    |   `-CallExpr 0x1378095d8 <col:21, col:64> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x1378094c8 <col:21> 'int ()' Function 0x137809228 'MatchingDim' 'int ()'
    |     |-RecoveryExpr 0x137809598 <col:33> '<dependent type>' contains-errors lvalue
    |     |-IntegerLiteral 0x137809500 <col:46> 'int' 3
    |     |-RecoveryExpr 0x1378095b8 <col:49> '<dependent type>' contains-errors lvalue
    |     `-IntegerLiteral 0x137809538 <col:63> 'int' 3
    |-DeclStmt 0x1378097e8 <line:9:3, col:47>
    | `-VarDecl 0x137809648 <col:3, col:46> col:13 input_height 'const int' cinit
    |   `-CallExpr 0x1378097c0 <col:28, col:46> '<dependent type>' contains-errors
    |     |-CXXDependentScopeMemberExpr 0x137809778 <col:28, col:40> '<dependent type>' contains-errors lvalue .Dims
    |     | `-RecoveryExpr 0x137809758 <col:28> '<dependent type>' contains-errors lvalue
    |     `-IntegerLiteral 0x137809710 <col:45> 'int' 1
    |-DeclStmt 0x1378099b8 <line:10:3, col:46>
    | `-VarDecl 0x137809818 <col:3, col:45> col:13 input_width 'const int' cinit
    |   `-CallExpr 0x137809990 <col:27, col:45> '<dependent type>' contains-errors
    |     |-CXXDependentScopeMemberExpr 0x137809948 <col:27, col:39> '<dependent type>' contains-errors lvalue .Dims
    |     | `-RecoveryExpr 0x137809928 <col:27> '<dependent type>' contains-errors lvalue
    |     `-IntegerLiteral 0x1378098e0 <col:44> 'int' 2
    |-DeclStmt 0x137809b88 <line:11:3, col:49>
    | `-VarDecl 0x1378099e8 <col:3, col:48> col:13 used output_height 'const int' cinit
    |   `-CallExpr 0x137809b60 <col:29, col:48> '<dependent type>' contains-errors
    |     |-CXXDependentScopeMemberExpr 0x137809b18 <col:29, col:42> '<dependent type>' contains-errors lvalue .Dims
    |     | `-RecoveryExpr 0x137809af8 <col:29> '<dependent type>' contains-errors lvalue
    |     `-IntegerLiteral 0x137809ab0 <col:47> 'int' 1
    |-DeclStmt 0x137809d58 <line:12:3, col:48>
    | `-VarDecl 0x137809bb8 <col:3, col:47> col:13 used output_width 'const int' cinit
    |   `-CallExpr 0x137809d30 <col:28, col:47> '<dependent type>' contains-errors
    |     |-CXXDependentScopeMemberExpr 0x137809ce8 <col:28, col:41> '<dependent type>' contains-errors lvalue .Dims
    |     | `-RecoveryExpr 0x137809cc8 <col:28> '<dependent type>' contains-errors lvalue
    |     `-IntegerLiteral 0x137809c80 <col:46> 'int' 2
    |-DeclStmt 0x137809eb8 <line:13:3, col:49>
    | `-VarDecl 0x137809d88 <col:3, col:36> col:13 used stride_height 'const int' cinit
    |   `-CXXDependentScopeMemberExpr 0x137809e70 <col:29, col:36> '<dependent type>' contains-errors lvalue .stride_height
    |     `-RecoveryExpr 0x137809e50 <col:29> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x13780a018 <line:14:3, col:47>
    | `-VarDecl 0x137809ee8 <col:3, col:35> col:13 used stride_width 'const int' cinit
    |   `-CXXDependentScopeMemberExpr 0x137809fd0 <col:28, col:35> '<dependent type>' contains-errors lvalue .stride_width
    |     `-RecoveryExpr 0x137809fb0 <col:28> '<dependent type>' contains-errors lvalue
    `-ForStmt 0x13780c858 <line:15:3, line:51:3>
      |-DeclStmt 0x13780a0d0 <line:15:8, col:21>
      | `-VarDecl 0x13780a048 <col:8, col:20> col:12 used batch 'int' cinit
      |   `-IntegerLiteral 0x13780a0b0 <col:20> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x13780a158 <col:23, col:31> 'int' contains-errors '<'
      | |-ImplicitCastExpr 0x13780a128 <col:23> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x13780a0e8 <col:23> 'int' lvalue Var 0x13780a048 'batch' 'int'
      | `-ImplicitCastExpr 0x13780a140 <col:31> 'int' contains-errors <LValueToRValue>
      |   `-DeclRefExpr 0x13780a108 <col:31> 'const int' contains-errors lvalue Var 0x13700e378 'batches' 'const int'
      |-UnaryOperator 0x13780a198 <col:40, col:42> 'int' prefix '++'
      | `-DeclRefExpr 0x13780a178 <col:42> 'int' lvalue Var 0x13780a048 'batch' 'int'
      `-CompoundStmt 0x13780c840 <col:49, line:51:3>
        `-ForStmt 0x13780c808 <line:16:5, line:50:5>
          |-DeclStmt 0x13780ac88 <line:16:10, col:23>
          | `-VarDecl 0x13780ac00 <col:10, col:22> col:14 used out_y 'int' cinit
          |   `-IntegerLiteral 0x13780ac68 <col:22> 'int' 0
          |-<<<NULL>>>
          |-BinaryOperator 0x13780ad10 <col:25, col:33> 'int' contains-errors '<'
          | |-ImplicitCastExpr 0x13780ace0 <col:25> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x13780aca0 <col:25> 'int' lvalue Var 0x13780ac00 'out_y' 'int'
          | `-ImplicitCastExpr 0x13780acf8 <col:33> 'int' contains-errors <LValueToRValue>
          |   `-DeclRefExpr 0x13780acc0 <col:33> 'const int' contains-errors lvalue Var 0x1378099e8 'output_height' 'const int'
          |-UnaryOperator 0x13780ad50 <col:48, col:50> 'int' prefix '++'
          | `-DeclRefExpr 0x13780ad30 <col:50> 'int' lvalue Var 0x13780ac00 'out_y' 'int'
          `-CompoundStmt 0x13780c7f0 <col:57, line:50:5>
            `-ForStmt 0x13780c7b8 <line:17:7, line:49:7>
              |-DeclStmt 0x13780ae08 <line:17:12, col:25>
              | `-VarDecl 0x13780ad80 <col:12, col:24> col:16 used out_x 'int' cinit
              |   `-IntegerLiteral 0x13780ade8 <col:24> 'int' 0
              |-<<<NULL>>>
              |-BinaryOperator 0x13780ae90 <col:27, col:35> 'int' contains-errors '<'
              | |-ImplicitCastExpr 0x13780ae60 <col:27> 'int' <LValueToRValue>
              | | `-DeclRefExpr 0x13780ae20 <col:27> 'int' lvalue Var 0x13780ad80 'out_x' 'int'
              | `-ImplicitCastExpr 0x13780ae78 <col:35> 'int' contains-errors <LValueToRValue>
              |   `-DeclRefExpr 0x13780ae40 <col:35> 'const int' contains-errors lvalue Var 0x137809bb8 'output_width' 'const int'
              |-UnaryOperator 0x13780aed0 <col:49, col:51> 'int' prefix '++'
              | `-DeclRefExpr 0x13780aeb0 <col:51> 'int' lvalue Var 0x13780ad80 'out_x' 'int'
              `-CompoundStmt 0x13780c7a0 <col:58, line:49:7>
                `-ForStmt 0x13780c768 <line:18:9, line:48:9>
                  |-DeclStmt 0x13780af88 <line:18:14, col:29>
                  | `-VarDecl 0x13780af00 <col:14, col:28> col:18 used channel 'int' cinit
                  |   `-IntegerLiteral 0x13780af68 <col:28> 'int' 0
                  |-<<<NULL>>>
                  |-BinaryOperator 0x13780b010 <col:31, col:41> 'int' contains-errors '<'
                  | |-ImplicitCastExpr 0x13780afe0 <col:31> 'int' <LValueToRValue>
                  | | `-DeclRefExpr 0x13780afa0 <col:31> 'int' lvalue Var 0x13780af00 'channel' 'int'
                  | `-ImplicitCastExpr 0x13780aff8 <col:41> 'int' contains-errors <LValueToRValue>
                  |   `-DeclRefExpr 0x13780afc0 <col:41> 'const int' contains-errors lvalue Var 0x137809460 'depth' 'const int'
                  |-UnaryOperator 0x13780b050 <col:48, col:50> 'int' prefix '++'
                  | `-DeclRefExpr 0x13780b030 <col:50> 'int' lvalue Var 0x13780af00 'channel' 'int'
                  `-CompoundStmt 0x13780c708 <col:59, line:48:9>
                    |-DeclStmt 0x13780b410 <line:19:11, line:20:67>
                    | `-VarDecl 0x13780b080 <line:19:11, line:20:62> line:19:21 used in_x_origin 'const int' cinit
                    |   `-BinaryOperator 0x13780b3f0 <line:20:15, col:62> '<dependent type>' contains-errors '-'
                    |     |-ParenExpr 0x13780b320 <col:15, col:36> 'int' contains-errors
                    |     | `-BinaryOperator 0x13780b300 <col:16, col:24> 'int' contains-errors '*'
                    |     |   |-ImplicitCastExpr 0x13780b2d0 <col:16> 'int' <LValueToRValue>
                    |     |   | `-DeclRefExpr 0x13780b0e8 <col:16> 'int' lvalue Var 0x13780ad80 'out_x' 'int'
                    |     |   `-ImplicitCastExpr 0x13780b2e8 <col:24> 'int' contains-errors <LValueToRValue>
                    |     |     `-DeclRefExpr 0x13780b108 <col:24> 'const int' contains-errors lvalue Var 0x137809ee8 'stride_width' 'const int'
                    |     `-CXXDependentScopeMemberExpr 0x13780b3a8 <col:40, col:62> '<dependent type>' contains-errors lvalue .width
                    |       `-CXXDependentScopeMemberExpr 0x13780b360 <col:40, col:47> '<dependent type>' contains-errors lvalue .padding_values
                    |         `-RecoveryExpr 0x13780b340 <col:40> '<dependent type>' contains-errors lvalue
                    |-DeclStmt 0x13780b7d0 <line:21:11, line:22:69>
                    | `-VarDecl 0x13780b440 <line:21:11, line:22:63> line:21:21 used in_y_origin 'const int' cinit
                    |   `-BinaryOperator 0x13780b7b0 <line:22:15, col:63> '<dependent type>' contains-errors '-'
                    |     |-ParenExpr 0x13780b6e0 <col:15, col:37> 'int' contains-errors
                    |     | `-BinaryOperator 0x13780b6c0 <col:16, col:24> 'int' contains-errors '*'
                    |     |   |-ImplicitCastExpr 0x13780b690 <col:16> 'int' <LValueToRValue>
                    |     |   | `-DeclRefExpr 0x13780b4a8 <col:16> 'int' lvalue Var 0x13780ac00 'out_y' 'int'
                    |     |   `-ImplicitCastExpr 0x13780b6a8 <col:24> 'int' contains-errors <LValueToRValue>
                    |     |     `-DeclRefExpr 0x13780b4c8 <col:24> 'const int' contains-errors lvalue Var 0x137809d88 'stride_height' 'const int'
                    |     `-CXXDependentScopeMemberExpr 0x13780b768 <col:41, col:63> '<dependent type>' contains-errors lvalue .height
                    |       `-CXXDependentScopeMemberExpr 0x13780b720 <col:41, col:48> '<dependent type>' contains-errors lvalue .padding_values
                    |         `-RecoveryExpr 0x13780b700 <col:41> '<dependent type>' contains-errors lvalue
                    |-DeclStmt 0x13780b8a0 <line:25:11, col:41>
                    | `-VarDecl 0x13780b800 <col:11, col:38> col:21 used filter_x_start 'const int' cinit
                    |   `-RecoveryExpr 0x13780b880 <col:38> '<dependent type>' contains-errors lvalue
                    |-DeclStmt 0x13780b938 <line:26:11, line:27:71>
                    | `-VarDecl 0x13780b8d0 <line:26:11, col:21> col:21 used filter_x_end 'const int'
                    |-DeclStmt 0x13780b9d0 <line:28:11, col:63>
                    | `-VarDecl 0x13780b968 <col:11, col:21> col:21 used filter_y_start 'const int'
                    |-DeclStmt 0x13780ba68 <line:29:11, line:30:73>
                    | `-VarDecl 0x13780ba00 <line:29:11, col:21> col:21 used filter_y_end 'const int'
                    |-DeclStmt 0x13780bb20 <line:31:11, col:28>
                    | `-VarDecl 0x13780ba98 <col:11, col:25> col:17 used total 'float' cinit
                    |   `-FloatingLiteral 0x13780bb00 <col:25> 'float' 0.000000e+00
                    |-DeclStmt 0x13780bc00 <line:32:11, col:33>
                    | `-VarDecl 0x13780bb50 <col:11, col:32> col:17 used filter_count 'float' cinit
                    |   `-ImplicitCastExpr 0x13780bbd8 <col:32> 'float' <IntegralToFloating>
                    |     `-IntegerLiteral 0x13780bbb8 <col:32> 'int' 0
                    |-ForStmt 0x13780c3e8 <line:33:11, line:43:11>
                    | |-DeclStmt 0x13780bcd0 <line:33:16, col:45>
                    | | `-VarDecl 0x13780bc30 <col:16, col:31> col:20 used filter_y 'int' cinit
                    | |   `-ImplicitCastExpr 0x13780bcb8 <col:31> 'int' <LValueToRValue>
                    | |     `-DeclRefExpr 0x13780bc98 <col:31> 'const int' lvalue Var 0x13780b968 'filter_y_start' 'const int'
                    | |-<<<NULL>>>
                    | |-BinaryOperator 0x13780bd58 <col:47, col:58> 'int' '<'
                    | | |-ImplicitCastExpr 0x13780bd28 <col:47> 'int' <LValueToRValue>
                    | | | `-DeclRefExpr 0x13780bce8 <col:47> 'int' lvalue Var 0x13780bc30 'filter_y' 'int'
                    | | `-ImplicitCastExpr 0x13780bd40 <col:58> 'int' <LValueToRValue>
                    | |   `-DeclRefExpr 0x13780bd08 <col:58> 'const int' lvalue Var 0x13780ba00 'filter_y_end' 'const int'
                    | |-UnaryOperator 0x13780bd98 <line:34:16, col:18> 'int' prefix '++'
                    | | `-DeclRefExpr 0x13780bd78 <col:18> 'int' lvalue Var 0x13780bc30 'filter_y' 'int'
                    | `-CompoundStmt 0x13780c3d0 <col:28, line:43:11>
                    |   `-ForStmt 0x13780c398 <line:35:13, line:42:13>
                    |     |-DeclStmt 0x13780be68 <line:35:18, col:47>
                    |     | `-VarDecl 0x13780bdc8 <col:18, col:33> col:22 used filter_x 'int' cinit
                    |     |   `-ImplicitCastExpr 0x13780be50 <col:33> 'int' contains-errors <LValueToRValue>
                    |     |     `-DeclRefExpr 0x13780be30 <col:33> 'const int' contains-errors lvalue Var 0x13780b800 'filter_x_start' 'const int'
                    |     |-<<<NULL>>>
                    |     |-BinaryOperator 0x13780bef0 <col:49, col:60> 'int' contains-errors '<'
                    |     | |-ImplicitCastExpr 0x13780bec0 <col:49> 'int' contains-errors <LValueToRValue>
                    |     | | `-DeclRefExpr 0x13780be80 <col:49> 'int' contains-errors lvalue Var 0x13780bdc8 'filter_x' 'int'
                    |     | `-ImplicitCastExpr 0x13780bed8 <col:60> 'int' <LValueToRValue>
                    |     |   `-DeclRefExpr 0x13780bea0 <col:60> 'const int' lvalue Var 0x13780b8d0 'filter_x_end' 'const int'
                    |     |-UnaryOperator 0x13780bf30 <line:36:18, col:20> 'int' contains-errors prefix '++'
                    |     | `-DeclRefExpr 0x13780bf10 <col:20> 'int' contains-errors lvalue Var 0x13780bdc8 'filter_x' 'int'
                    |     `-CompoundStmt 0x13780c370 <col:30, line:42:13>
                    |       |-DeclStmt 0x13780c058 <line:37:15, col:54>
                    |       | `-VarDecl 0x13780bf60 <col:15, col:46> col:25 used in_x 'const int' cinit
                    |       |   `-BinaryOperator 0x13780c038 <col:32, col:46> 'int' contains-errors '+'
                    |       |     |-ImplicitCastExpr 0x13780c008 <col:32> 'int' contains-errors <LValueToRValue>
                    |       |     | `-DeclRefExpr 0x13780bfc8 <col:32> 'const int' contains-errors lvalue Var 0x13780b080 'in_x_origin' 'const int'
                    |       |     `-ImplicitCastExpr 0x13780c020 <col:46> 'int' contains-errors <LValueToRValue>
                    |       |       `-DeclRefExpr 0x13780bfe8 <col:46> 'int' contains-errors lvalue Var 0x13780bdc8 'filter_x' 'int'
                    |       |-DeclStmt 0x13780c180 <line:38:15, col:54>
                    |       | `-VarDecl 0x13780c088 <col:15, col:46> col:25 used in_y 'const int' cinit
                    |       |   `-BinaryOperator 0x13780c160 <col:32, col:46> 'int' contains-errors '+'
                    |       |     |-ImplicitCastExpr 0x13780c130 <col:32> 'int' contains-errors <LValueToRValue>
                    |       |     | `-DeclRefExpr 0x13780c0f0 <col:32> 'const int' contains-errors lvalue Var 0x13780b440 'in_y_origin' 'const int'
                    |       |     `-ImplicitCastExpr 0x13780c148 <col:46> 'int' <LValueToRValue>
                    |       |       `-DeclRefExpr 0x13780c110 <col:46> 'int' lvalue Var 0x13780bc30 'filter_y' 'int'
                    |       `-UnaryOperator 0x13780c358 <line:41:15, col:27> 'float' postfix '++'
                    |         `-DeclRefExpr 0x13780c338 <col:15> 'float' lvalue Var 0x13780bb50 'filter_count' 'float'
                    `-DeclStmt 0x13780c530 <line:44:11, col:53>
                      `-VarDecl 0x13780c438 <col:11, col:41> col:23 used average 'const float' cinit
                        `-BinaryOperator 0x13780c510 <col:33, col:41> 'float' '/'
                          |-ImplicitCastExpr 0x13780c4e0 <col:33> 'float' <LValueToRValue>
                          | `-DeclRefExpr 0x13780c4a0 <col:33> 'float' lvalue Var 0x13780ba98 'total' 'float'
                          `-ImplicitCastExpr 0x13780c4f8 <col:41> 'float' <LValueToRValue>
                            `-DeclRefExpr 0x13780c4c0 <col:41> 'float' lvalue Var 0x13780bb50 'filter_count' 'float'
