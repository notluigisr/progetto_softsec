`-FunctionDecl 0x13980df18  line:1:12 invalid cms_copy_content 'int (int *, int *, unsigned int)' static
  |-ParmVarDecl 0x13980dd28 <col:29, col:34> col:34 invalid out 'int *'
  |-ParmVarDecl 0x13980dda8 <col:39, col:44> col:44 invalid in 'int *'
  |-ParmVarDecl 0x13980de28 <col:48, col:61> col:61 used flags 'unsigned int'
  `-CompoundStmt 0x13982a350 <line:2:1, line:51:1>
    |-DeclStmt 0x13980e0f0 <line:3:5, col:28>
    | `-VarDecl 0x13980e088 <col:5, col:27> col:19 used buf 'unsigned char[4096]'
    |-DeclStmt 0x13980e240 <line:4:5, col:17>
    | |-VarDecl 0x13980e120 <col:5, col:13> col:9 used r 'int' cinit
    | | `-IntegerLiteral 0x13980e188 <col:13> 'int' 0
    | `-VarDecl 0x13980e1c0 <col:5, col:16> col:16 used i 'int'
    |-IfStmt 0x1398280e8 <line:7:5, line:13:9> has_else
    | |-BinaryOperator 0x13980e300 <line:7:9, col:16> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x13980e288 <col:9> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x13980e2e0 <col:16> '<dependent type>' contains-errors lvalue
    | |-NullStmt 0x1398280e0 <line:8:9>
    | `-IfStmt 0x1398280b0 <line:9:10, line:13:9> has_else
    |   |-BinaryOperator 0x139827d00 <line:9:14, col:22> '<dependent type>' contains-errors '&'
    |   | |-DeclRefExpr 0x139827c88 <col:14> 'unsigned int' lvalue ParmVar 0x13980de28 'flags' 'unsigned int'
    |   | `-RecoveryExpr 0x139827ce0 <col:22> '<dependent type>' contains-errors lvalue
    |   |-CompoundStmt 0x139828070 <col:32, line:12:5>
    |   | `-CallExpr 0x139828040 <line:11:9, col:41> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x139827f98 <col:9> 'int ()' Function 0x139827ee0 'BIO_set_mem_eof_return' 'int ()'
    |   |   |-RecoveryExpr 0x139828020 <col:32> '<dependent type>' contains-errors lvalue
    |   |   `-IntegerLiteral 0x139827fd0 <col:40> 'int' 0
    |   `-NullStmt 0x1398280a8 <line:13:9>
    |-IfStmt 0x139828408 <line:15:5, line:18:5>
    | |-UnaryOperator 0x139828198 <line:15:9, col:10> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x139828180 <col:10> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x139828160 <col:10> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x1398283e8 <col:18, line:18:5>
    |   |-CallExpr 0x139828350 <line:16:9, col:60> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x139828290 <col:9> 'int ()' Function 0x1398281d8 'CMSerr' 'int ()'
    |   | |-RecoveryExpr 0x139828310 <col:16> '<dependent type>' contains-errors lvalue
    |   | `-RecoveryExpr 0x139828330 <col:40> '<dependent type>' contains-errors lvalue
    |   `-GotoStmt 0x1398283d0 <line:17:9, col:14> 'err' 0x139828380
    |-ForStmt 0x139829ee0 <line:21:5, line:35:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | `-CompoundStmt 0x139829eb8 <line:21:14, line:35:5>
    |   |-BinaryOperator 0x139828620 <line:22:9, col:42> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x139828428 <col:9> 'int' lvalue Var 0x13980e1c0 'i' 'int'
    |   | `-CallExpr 0x1398285e8 <col:13, col:42> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x139828528 <col:13> 'int ()' Function 0x139828470 'BIO_read' 'int ()'
    |   |   |-RecoveryExpr 0x139828548 <col:22> '<dependent type>' contains-errors lvalue
    |   |   |-DeclRefExpr 0x139828568 <col:26> 'unsigned char[4096]' lvalue Var 0x13980e088 'buf' 'unsigned char[4096]'
    |   |   `-UnaryExprOrTypeTraitExpr 0x1398285c8 <col:31, col:41> 'unsigned long' sizeof
    |   |     `-ParenExpr 0x1398285a8 <col:37, col:41> 'unsigned char[4096]' lvalue
    |   |       `-DeclRefExpr 0x139828588 <col:38> 'unsigned char[4096]' lvalue Var 0x13980e088 'buf' 'unsigned char[4096]' non_odr_use_unevaluated
    |   |-IfStmt 0x139829ce0 <line:23:9, line:31:9>
    |   | |-BinaryOperator 0x139828698 <line:23:13, col:18> 'int' '<='
    |   | | |-ImplicitCastExpr 0x139828680 <col:13> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x139828640 <col:13> 'int' lvalue Var 0x13980e1c0 'i' 'int'
    |   | | `-IntegerLiteral 0x139828660 <col:18> 'int' 0
    |   | `-CompoundStmt 0x139829cb8 <col:21, line:31:9>
    |   |   |-IfStmt 0x1398289d0 <line:24:13, line:27:13>
    |   |   | |-RecoveryExpr 0x139828800 <line:24:17, col:40> '_Bool' contains-errors
    |   |   | `-CompoundStmt 0x1398289b8 <col:57, line:27:13>
    |   |   |   `-IfStmt 0x139828998 <line:25:17, line:26:26>
    |   |   |     |-UnaryOperator 0x139828968 <line:25:21, col:46> '<dependent type>' contains-errors prefix '!' cannot overflow
    |   |   |     | `-CallExpr 0x139828940 <col:22, col:46> '<dependent type>' contains-errors
    |   |   |     |   |-DeclRefExpr 0x139828900 <col:22> 'int ()' Function 0x139828848 'BIO_get_cipher_status' 'int ()'
    |   |   |     |   `-RecoveryExpr 0x139828920 <col:44> '<dependent type>' contains-errors lvalue
    |   |   |     `-GotoStmt 0x139828980 <line:26:21, col:26> 'err' 0x139828380
    |   |   |-IfStmt 0x139829c90 <line:28:13, line:29:22>
    |   |   | |-BinaryOperator 0x139829c58 <line:28:17, col:21> 'int' '<'
    |   |   | | |-ImplicitCastExpr 0x139829c40 <col:17> 'int' <LValueToRValue>
    |   |   | | | `-DeclRefExpr 0x139829c00 <col:17> 'int' lvalue Var 0x13980e1c0 'i' 'int'
    |   |   | | `-IntegerLiteral 0x139829c20 <col:21> 'int' 0
    |   |   | `-GotoStmt 0x139829c78 <line:29:17, col:22> 'err' 0x139828380
    |   |   `-BreakStmt 0x139829cb0 <line:30:13>
    |   `-IfStmt 0x139829e98 <line:33:9, line:34:18>
    |     |-RecoveryExpr 0x139829e60 <line:33:13, col:54> '_Bool' contains-errors
    |     `-GotoStmt 0x139829e80 <line:34:13, col:18> 'err' 0x139828380
    |-IfStmt 0x13982a120 <line:37:5, line:42:5>
    | |-RecoveryExpr 0x139829f38 <line:37:9, col:17> '_Bool' contains-errors
    | `-CompoundStmt 0x13982a108 <col:27, line:42:5>
    |   `-IfStmt 0x13982a0e8 <line:38:9, line:41:9>
    |     |-RecoveryExpr 0x13982a078 <line:38:13, col:36> '_Bool' contains-errors
    |     `-CompoundStmt 0x13982a0d0 <col:39, line:41:9>
    |       `-GotoStmt 0x13982a0b8 <line:40:13, col:18> 'err' 0x139828380
    |-BinaryOperator 0x13982a180 <line:44:5, col:9> 'int' '='
    | |-DeclRefExpr 0x13982a140 <col:5> 'int' lvalue Var 0x13980e120 'r' 'int'
    | `-IntegerLiteral 0x13982a160 <col:9> 'int' 1
    |-LabelStmt 0x13982a2e8 <line:46:2, col:5> 'err'
    | `-NullStmt 0x13982a2e0 <col:5>
    `-ReturnStmt 0x13982a340 <line:49:5, col:12>
      `-ImplicitCastExpr 0x13982a328 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x13982a308 <col:12> 'int' lvalue Var 0x13980e120 'r' 'int'
