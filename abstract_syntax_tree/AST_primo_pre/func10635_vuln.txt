`-FunctionDecl 0x1439282a8  line:1:1 process 'int (int, unsigned char **)'
  |-ParmVarDecl 0x1439280d8 <col:9, col:22> col:22 used code 'int' register
  |-ParmVarDecl 0x1439281c0 <col:28, col:44> col:44 used fill 'unsigned char **'
  `-CompoundStmt 0x143942498 <line:2:1, line:48:1>
    |-DeclStmt 0x143928428 <line:3:5, col:15>
    | `-VarDecl 0x1439283c0 <col:5, col:9> col:9 used incode 'int'
    |-DeclStmt 0x1439284c0 <line:4:5, col:35>
    | `-VarDecl 0x143928458 <col:5, col:26> col:26 used firstchar 'unsigned char' static
    |-IfStmt 0x143928730 <line:6:5, line:12:5>
    | |-BinaryOperator 0x143928568 <line:6:9, col:17> 'int' contains-errors '=='
    | | |-DeclRefExpr 0x1439284d8 <col:9> 'int' lvalue ParmVar 0x1439280d8 'code' 'int'
    | | `-RecoveryExpr 0x143928548 <col:17> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x143928718 <col:24, line:12:5>
    |   `-ReturnStmt 0x143928708 <line:11:2, col:9>
    |     `-IntegerLiteral 0x1439286e8 <col:9> 'int' 1
    |-IfStmt 0x143941a70 <line:14:5, line:18:5>
    | |-BinaryOperator 0x143941800 <line:14:9, col:21> 'int' '=='
    | | |-ImplicitCastExpr 0x1439287e0 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1439287c0 <col:9> 'int' lvalue Var 0x1439283c0 'incode' 'int'
    | | `-UnaryOperator 0x143928788 <col:20, col:21> 'int' prefix '-'
    | |   `-IntegerLiteral 0x143928768 <col:21> 'int' 1
    | `-CompoundStmt 0x143941a50 <col:24, line:18:5>
    |   |-BinaryOperator 0x143941a00 <line:16:2, col:24> 'unsigned char' '='
    |   | |-DeclRefExpr 0x1439418f8 <col:2> 'unsigned char' lvalue Var 0x143928458 'firstchar' 'unsigned char'
    |   | `-ImplicitCastExpr 0x1439419e8 <col:14, col:24> 'unsigned char' <IntegralCast>
    |   |   `-BinaryOperator 0x1439419c8 <col:14, col:24> 'int' '='
    |   |     |-DeclRefExpr 0x143941990 <col:14> 'int' lvalue Var 0x1439283c0 'incode' 'int'
    |   |     `-ImplicitCastExpr 0x1439419b0 <col:24> 'int' <LValueToRValue>
    |   |       `-DeclRefExpr 0x143941930 <col:24> 'int' lvalue ParmVar 0x1439280d8 'code' 'int'
    |   `-ReturnStmt 0x143941a40 <line:17:2, col:9>
    |     `-IntegerLiteral 0x143941a20 <col:9> 'int' 1
    |-IfStmt 0x143941e28 <line:19:5, line:22:5>
    | |-BinaryOperator 0x143941b08 <line:19:9, col:16> 'int' contains-errors '>'
    | | |-DeclRefExpr 0x143941a90 <col:9> 'int' lvalue ParmVar 0x1439280d8 'code' 'int'
    | | `-RecoveryExpr 0x143941ae8 <col:16> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x143941e08 <col:23, line:22:5>
    |   |-CallExpr 0x143941d98 <line:20:2, col:36> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x143941c40 <col:2> 'int ()' Function 0x143941b88 'fprintf' 'int ()'
    |   | |-RecoveryExpr 0x143941d58 <col:10> '<dependent type>' contains-errors lvalue
    |   | |-StringLiteral 0x143941cc0 <col:18> 'char[4]' lvalue "STR"
    |   | |-DeclRefExpr 0x143941ce0 <col:25> 'int' lvalue ParmVar 0x1439280d8 'code' 'int'
    |   | `-RecoveryExpr 0x143941d78 <col:31> '<dependent type>' contains-errors lvalue
    |   `-ReturnStmt 0x143941df8 <line:21:2, col:9>
    |     `-IntegerLiteral 0x143941dd8 <col:9> 'int' 0
    |-BinaryOperator 0x143941ea0 <line:24:5, col:14> 'int' '='
    | |-DeclRefExpr 0x143941e48 <col:5> 'int' lvalue Var 0x1439283c0 'incode' 'int'
    | `-ImplicitCastExpr 0x143941e88 <col:14> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x143941e68 <col:14> 'int' lvalue ParmVar 0x1439280d8 'code' 'int'
    |-IfStmt 0x143942120 <line:25:5, line:28:5>
    | |-BinaryOperator 0x143941f38 <line:25:9, col:17> 'int' contains-errors '=='
    | | |-DeclRefExpr 0x143941ec0 <col:9> 'int' lvalue ParmVar 0x1439280d8 'code' 'int'
    | | `-RecoveryExpr 0x143941f18 <col:17> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x143942100 <col:24, line:28:5>
    |   |-BinaryOperator 0x143942030 <line:26:2, col:14> '<dependent type>' contains-errors '='
    |   | |-UnaryOperator 0x143942018 <col:2, col:9> '<dependent type>' contains-errors prefix '*' cannot overflow
    |   | | `-UnaryOperator 0x143942000 <col:3, col:9> '<dependent type>' contains-errors postfix '++' cannot overflow
    |   | |   `-RecoveryExpr 0x143941fe0 <col:3> '<dependent type>' contains-errors lvalue
    |   | `-DeclRefExpr 0x143941fa0 <col:14> 'unsigned char' lvalue Var 0x143928458 'firstchar' 'unsigned char'
    |   `-BinaryOperator 0x1439420e0 <line:27:2, col:9> 'int' '='
    |     |-DeclRefExpr 0x143942050 <col:2> 'int' lvalue ParmVar 0x1439280d8 'code' 'int'
    |     `-ImplicitCastExpr 0x1439420c8 <col:9> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x1439420a8 <col:9> 'int' lvalue Var 0x1439283c0 'incode' 'int'
    |-WhileStmt 0x143942248 <line:29:5, line:32:5>
    | |-BinaryOperator 0x1439421b8 <line:29:12, col:19> 'int' contains-errors '>'
    | | |-DeclRefExpr 0x143942140 <col:12> 'int' lvalue ParmVar 0x1439280d8 'code' 'int'
    | | `-RecoveryExpr 0x143942198 <col:19> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x143942238 <col:26, line:32:5>
    |-IfStmt 0x143942338 <line:39:5, line:42:5>
    | |-RecoveryExpr 0x143942308 <line:39:9, col:51> '_Bool' contains-errors
    | `-CompoundStmt 0x143942328 <col:54, line:42:5>
    |-DoStmt 0x143942448 <line:44:5, line:46:28>
    | |-CompoundStmt 0x143942418 <line:44:8, line:46:5>
    | `-RecoveryExpr 0x143942428 <col:14, col:23> '_Bool' contains-errors
    `-ReturnStmt 0x143942488 <line:47:5, col:12>
      `-IntegerLiteral 0x143942468 <col:12> 'int' 1
