`-FunctionDecl 0x126928ba8  line:1:12 invalid spl_array_has_dimension_ex 'int (int, int *, int *, int)' static
  |-ParmVarDecl 0x1269288d8 <col:39, col:43> col:43 used check_inherited 'int'
  |-ParmVarDecl 0x1269289a8 <col:60, col:66> col:66 invalid object 'int *'
  |-ParmVarDecl 0x126928a28 <col:74, col:80> col:80 invalid offset 'int *'
  |-ParmVarDecl 0x126928aa8 <col:88, col:92> col:92 used check_empty 'int'
  `-CompoundStmt 0x126942ec8 <line:2:1, line:64:1>
    |-DeclStmt 0x126928d20 <line:4:2, col:12>
    | `-VarDecl 0x126928cb8 <col:2, col:7> col:7 used index 'long'
    |-IfStmt 0x127009cf0 <line:7:2, line:19:2>
    | |-BinaryOperator 0x126928eb8 <line:7:6, col:33> 'int' contains-errors '&&'
    | | |-DeclRefExpr 0x126928db0 <col:6> 'int' lvalue ParmVar 0x1269288d8 'check_inherited' 'int'
    | | `-CXXDependentScopeMemberExpr 0x126928e70 <col:25, col:33> '<dependent type>' contains-errors lvalue ->fptr_offset_has
    | |   `-RecoveryExpr 0x126928e50 <col:25> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x127009cb0 <col:50, line:19:2>
    |   |-CallExpr 0x1270092f8 <line:8:3, col:29> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x1270092b8 <col:3> 'int ()' Function 0x127009200 'SEPARATE_ARG_IF_REF' 'int ()'
    |   | `-RecoveryExpr 0x1270092d8 <col:23> '<dependent type>' contains-errors lvalue
    |   |-CallExpr 0x1270097d8 <line:9:3, col:106> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x127009400 <col:3> 'int ()' Function 0x127009348 'zend_call_method_with_1_params' 'int ()'
    |   | |-UnaryOperator 0x127009440 <col:34, col:35> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | | `-RecoveryExpr 0x127009420 <col:35> '<dependent type>' contains-errors lvalue
    |   | |-CallExpr 0x127009578 <col:43, col:59> '<dependent type>' contains-errors
    |   | | |-DeclRefExpr 0x127009538 <col:43> 'int ()' Function 0x127009480 'Z_OBJCE_P' 'int ()'
    |   | | `-RecoveryExpr 0x127009558 <col:53> '<dependent type>' contains-errors lvalue
    |   | |-UnaryOperator 0x127009788 <col:62, col:71> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | | `-CXXDependentScopeMemberExpr 0x127009740 <col:63, col:71> '<dependent type>' contains-errors lvalue ->fptr_offset_has
    |   | |   `-RecoveryExpr 0x127009720 <col:63> '<dependent type>' contains-errors lvalue
    |   | |-StringLiteral 0x127009660 <col:88> 'char[4]' lvalue "STR"
    |   | |-UnaryOperator 0x1270097c0 <col:95, col:96> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | | `-RecoveryExpr 0x1270097a0 <col:96> '<dependent type>' contains-errors lvalue
    |   | `-RecoveryExpr 0x1270096b0 <col:100> '<dependent type>' contains-errors lvalue
    |   |-CallExpr 0x127009960 <line:10:3, col:24> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x127009908 <col:3> 'int ()' Function 0x127009850 'zval_ptr_dtor' 'int ()'
    |   | `-UnaryOperator 0x127009948 <col:17, col:18> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   |   `-RecoveryExpr 0x127009928 <col:18> '<dependent type>' contains-errors lvalue
    |   |-IfStmt 0x127009bf0 <line:11:3, line:14:3>
    |   | |-BinaryOperator 0x127009b68 <line:11:7, col:28> 'int' contains-errors '&&'
    |   | | |-RecoveryExpr 0x127009b00 <col:7> '<dependent type>' contains-errors lvalue
    |   | | `-CallExpr 0x127009b40 <col:13, col:28> '<dependent type>' contains-errors
    |   | |   |-DeclRefExpr 0x127009a80 <col:13> 'int ()' Function 0x1270099c8 'zend_is_true' 'int ()'
    |   | |   `-RecoveryExpr 0x127009b20 <col:26> '<dependent type>' contains-errors lvalue
    |   | `-CompoundStmt 0x127009bd8 <col:31, line:14:3>
    |   |   `-ReturnStmt 0x127009bc8 <line:13:4, col:11>
    |   |     `-IntegerLiteral 0x127009ba8 <col:11> 'int' 1
    |   |-IfStmt 0x127009c60 <line:15:3, line:17:3>
    |   | |-RecoveryExpr 0x127009c10 <line:15:7> '_Bool' contains-errors
    |   | `-CompoundStmt 0x127009c50 <col:11, line:17:3>
    |   `-ReturnStmt 0x127009ca0 <line:18:3, col:10>
    |     `-IntegerLiteral 0x127009c80 <col:10> 'int' 0
    |-SwitchStmt 0x127009e58 <line:21:2, line:62:2>
    | |-CallExpr 0x127009e30 <line:21:9, col:24> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x127009df0 <col:9> 'int ()' Function 0x127009d38 'Z_TYPE_P' 'int ()'
    | | `-RecoveryExpr 0x127009e10 <col:18> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x126942e68 <col:27, line:62:2>
    |   |-CompoundStmt 0x1269424a8 <line:23:4, line:35:4>
    |   | `-IfStmt 0x126942488 <line:25:5, line:34:5>
    |   |   |-RecoveryExpr 0x126942188 <line:25:9, col:93> '_Bool' contains-errors
    |   |   `-CompoundStmt 0x126942470 <col:102, line:34:5>
    |   |     `-SwitchStmt 0x1269421e0 <line:26:6, line:33:6>
    |   |       |-ImplicitCastExpr 0x1269421c8 <line:26:14> 'int' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x1269421a8 <col:14> 'int' lvalue ParmVar 0x126928aa8 'check_empty' 'int'
    |   |       `-CompoundStmt 0x126942448 <col:27, line:33:6>
    |   |         |-CaseStmt 0x126942240 <line:27:7, <invalid sloc>>
    |   |         | |-ConstantExpr 0x126942228 <col:12> 'int'
    |   |         | | `-IntegerLiteral 0x126942208 <col:12> 'int' 0
    |   |         | `-NullStmt 0x126942368 <<invalid sloc>>
    |   |         |-CaseStmt 0x1269423a8 <line:29:7, line:30:15>
    |   |         | |-ConstantExpr 0x126942390 <line:29:12> 'int'
    |   |         | | `-IntegerLiteral 0x126942370 <col:12> 'int' 2
    |   |         | `-ReturnStmt 0x1269423f0 <line:30:8, col:15>
    |   |         |   `-IntegerLiteral 0x1269423d0 <col:15> 'int' 1
    |   |         `-DefaultStmt 0x126942428 <line:31:7, col:14>
    |   |           `-NullStmt 0x126942420 <col:14>
    |   |-ReturnStmt 0x1269424e0 <line:36:4, col:11>
    |   | `-IntegerLiteral 0x1269424c0 <col:11> 'int' 0
    |   |-CompoundStmt 0x126942cf8 <line:41:4, line:59:4>
    |   | |-IfStmt 0x126942938 <line:43:5, line:47:5> has_else
    |   | | |-RecoveryExpr 0x126942598 <line:43:9, col:25> '_Bool' contains-errors
    |   | | |-CompoundStmt 0x126942780 <col:36, line:45:5>
    |   | | | `-BinaryOperator 0x126942760 <line:44:6, col:35> 'long' contains-errors '='
    |   | | |   |-DeclRefExpr 0x1269425b8 <col:6> 'long' lvalue Var 0x126928cb8 'index' 'long'
    |   | | |   `-CStyleCastExpr 0x126942738 <col:14, col:35> 'long' contains-errors <Dependent>
    |   | | |     `-CallExpr 0x1269426f8 <col:20, col:35> '<dependent type>' contains-errors
    |   | | |       |-DeclRefExpr 0x1269426b8 <col:20> 'int ()' Function 0x126942600 'Z_DVAL_P' 'int ()'
    |   | | |       `-RecoveryExpr 0x1269426d8 <col:29> '<dependent type>' contains-errors lvalue
    |   | | `-CompoundStmt 0x126942920 <line:45:12, line:47:5>
    |   | |   `-BinaryOperator 0x126942900 <line:46:6, col:29> 'long' contains-errors '='
    |   | |     |-DeclRefExpr 0x126942798 <col:6> 'long' lvalue Var 0x126928cb8 'index' 'long'
    |   | |     `-CallExpr 0x1269428d8 <col:14, col:29> '<dependent type>' contains-errors
    |   | |       |-DeclRefExpr 0x126942898 <col:14> 'int ()' Function 0x1269427e0 'Z_LVAL_P' 'int ()'
    |   | |       `-RecoveryExpr 0x1269428b8 <col:23> '<dependent type>' contains-errors lvalue
    |   | |-IfStmt 0x126942ca8 <line:48:5, line:57:5>
    |   | | |-RecoveryExpr 0x126942a88 <line:48:9, col:59> '_Bool' contains-errors
    |   | | `-CompoundStmt 0x126942c90 <col:68, line:57:5>
    |   | |   `-SwitchStmt 0x126942ae0 <line:49:6, line:56:6>
    |   | |     |-ImplicitCastExpr 0x126942ac8 <line:49:14> 'int' <LValueToRValue>
    |   | |     | `-DeclRefExpr 0x126942aa8 <col:14> 'int' lvalue ParmVar 0x126928aa8 'check_empty' 'int'
    |   | |     `-CompoundStmt 0x126942c68 <col:27, line:56:6>
    |   | |       |-CaseStmt 0x126942b40 <line:50:7, <invalid sloc>>
    |   | |       | |-ConstantExpr 0x126942b28 <col:12> 'int'
    |   | |       | | `-IntegerLiteral 0x126942b08 <col:12> 'int' 0
    |   | |       | `-NullStmt 0x126942b88 <<invalid sloc>>
    |   | |       |-CaseStmt 0x126942bc8 <line:52:7, line:53:15>
    |   | |       | |-ConstantExpr 0x126942bb0 <line:52:12> 'int'
    |   | |       | | `-IntegerLiteral 0x126942b90 <col:12> 'int' 2
    |   | |       | `-ReturnStmt 0x126942c10 <line:53:8, col:15>
    |   | |       |   `-IntegerLiteral 0x126942bf0 <col:15> 'int' 1
    |   | |       `-DefaultStmt 0x126942c48 <line:54:7, col:14>
    |   | |         `-NullStmt 0x126942c40 <col:14>
    |   | `-ReturnStmt 0x126942ce8 <line:58:5, col:12>
    |   |   `-IntegerLiteral 0x126942cc8 <col:12> 'int' 0
    |   `-DefaultStmt 0x126942e48 <line:60:3, col:10>
    |     `-NullStmt 0x126942e40 <col:10>
    `-ReturnStmt 0x126942eb8 <line:63:2, col:9>
      `-IntegerLiteral 0x126942e98 <col:9> 'int' 0
