`-FunctionDecl 0x12e80de38  line:1:7 find_hdr_value_end 'char *(char *, const char *)'
  |-ParmVarDecl 0x12e80dcd8 <col:26, col:32> col:32 used s 'char *'
  |-ParmVarDecl 0x12e80dd58 <col:35, col:47> col:47 used e 'const char *'
  `-CompoundStmt 0x12e826ac0 <line:2:1, line:16:1>
    |-DeclStmt 0x12e80e050 <line:3:2, col:20>
    | |-VarDecl 0x12e80df50 <col:2, col:6> col:6 used quoted 'int'
    | `-VarDecl 0x12e80dfd0 <col:2, col:14> col:14 used qdpair 'int'
    |-BinaryOperator 0x12e80e0e8 <line:5:2, col:20> 'int' '='
    | |-DeclRefExpr 0x12e80e068 <col:2> 'int' lvalue Var 0x12e80df50 'quoted' 'int'
    | `-BinaryOperator 0x12e80e0c8 <col:11, col:20> 'int' '='
    |   |-DeclRefExpr 0x12e80e088 <col:11> 'int' lvalue Var 0x12e80dfd0 'qdpair' 'int'
    |   `-IntegerLiteral 0x12e80e0a8 <col:20> 'int' 0
    |-ForStmt 0x12e826a40 <line:6:2, line:14:2>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-BinaryOperator 0x12e80e190 <line:6:9, col:13> 'int' '<'
    | | |-ImplicitCastExpr 0x12e80e148 <col:9> 'char *' <LValueToRValue>
    | | | `-DeclRefExpr 0x12e80e108 <col:9> 'char *' lvalue ParmVar 0x12e80dcd8 's' 'char *'
    | | `-ImplicitCastExpr 0x12e80e178 <col:13> 'char *' <BitCast>
    | |   `-ImplicitCastExpr 0x12e80e160 <col:13> 'const char *' <LValueToRValue>
    | |     `-DeclRefExpr 0x12e80e128 <col:13> 'const char *' lvalue ParmVar 0x12e80dd58 'e' 'const char *'
    | |-UnaryOperator 0x12e80e1d0 <col:16, col:17> 'char *' postfix '++'
    | | `-DeclRefExpr 0x12e80e1b0 <col:16> 'char *' lvalue ParmVar 0x12e80dcd8 's' 'char *'
    | `-CompoundStmt 0x12e826a28 <col:21, line:14:2>
    |   `-IfStmt 0x12e8269f8 <line:7:3, line:13:41> has_else
    |     |-ImplicitCastExpr 0x12e80e208 <line:7:7> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x12e80e1e8 <col:7> 'int' lvalue Var 0x12e80dfd0 'qdpair' 'int'
    |     |-BinaryOperator 0x12e80e260 <col:34, col:43> 'int' '='
    |     | |-DeclRefExpr 0x12e80e220 <col:34> 'int' lvalue Var 0x12e80dfd0 'qdpair' 'int'
    |     | `-IntegerLiteral 0x12e80e240 <col:43> 'int' 0
    |     `-IfStmt 0x12e8269c8 <line:8:8, line:13:41> has_else
    |       |-ImplicitCastExpr 0x12e80e2a0 <line:8:12> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x12e80e280 <col:12> 'int' lvalue Var 0x12e80df50 'quoted' 'int'
    |       |-CompoundStmt 0x12e826748 <col:20, line:11:3>
    |       | `-IfStmt 0x12e826718 <line:9:4, line:10:36> has_else
    |       |   |-BinaryOperator 0x12e80e350 <line:9:8, col:14> 'int' '=='
    |       |   | |-ImplicitCastExpr 0x12e80e338 <col:8, col:9> 'int' <IntegralCast>
    |       |   | | `-ImplicitCastExpr 0x12e80e320 <col:8, col:9> 'char' <LValueToRValue>
    |       |   | |   `-UnaryOperator 0x12e80e2f0 <col:8, col:9> 'char' lvalue prefix '*' cannot overflow
    |       |   | |     `-ImplicitCastExpr 0x12e80e2d8 <col:9> 'char *' <LValueToRValue>
    |       |   | |       `-DeclRefExpr 0x12e80e2b8 <col:9> 'char *' lvalue ParmVar 0x12e80dcd8 's' 'char *'
    |       |   | `-CharacterLiteral 0x12e80e308 <col:14> 'int' 92
    |       |   |-BinaryOperator 0x12e80e3b0 <col:27, col:36> 'int' '='
    |       |   | |-DeclRefExpr 0x12e80e370 <col:27> 'int' lvalue Var 0x12e80dfd0 'qdpair' 'int'
    |       |   | `-IntegerLiteral 0x12e80e390 <col:36> 'int' 1
    |       |   `-IfStmt 0x12e8266f8 <line:10:9, col:36>
    |       |     |-BinaryOperator 0x12e826678 <col:13, col:19> 'int' '=='
    |       |     | |-ImplicitCastExpr 0x12e826660 <col:13, col:14> 'int' <IntegralCast>
    |       |     | | `-ImplicitCastExpr 0x12e826648 <col:13, col:14> 'char' <LValueToRValue>
    |       |     | |   `-UnaryOperator 0x12e826618 <col:13, col:14> 'char' lvalue prefix '*' cannot overflow
    |       |     | |     `-ImplicitCastExpr 0x12e826600 <col:14> 'char *' <LValueToRValue>
    |       |     | |       `-DeclRefExpr 0x12e80e3d0 <col:14> 'char *' lvalue ParmVar 0x12e80dcd8 's' 'char *'
    |       |     | `-CharacterLiteral 0x12e826630 <col:19> 'int' 34
    |       |     `-BinaryOperator 0x12e8266d8 <col:27, col:36> 'int' '='
    |       |       |-DeclRefExpr 0x12e826698 <col:27> 'int' lvalue Var 0x12e80df50 'quoted' 'int'
    |       |       `-IntegerLiteral 0x12e8266b8 <col:36> 'int' 0
    |       `-IfStmt 0x12e826998 <line:12:8, line:13:41> has_else
    |         |-BinaryOperator 0x12e8267f8 <line:12:12, col:18> 'int' '=='
    |         | |-ImplicitCastExpr 0x12e8267e0 <col:12, col:13> 'int' <IntegralCast>
    |         | | `-ImplicitCastExpr 0x12e8267c8 <col:12, col:13> 'char' <LValueToRValue>
    |         | |   `-UnaryOperator 0x12e826798 <col:12, col:13> 'char' lvalue prefix '*' cannot overflow
    |         | |     `-ImplicitCastExpr 0x12e826780 <col:13> 'char *' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x12e826760 <col:13> 'char *' lvalue ParmVar 0x12e80dcd8 's' 'char *'
    |         | `-CharacterLiteral 0x12e8267b0 <col:18> 'int' 34
    |         |-BinaryOperator 0x12e826858 <col:34, col:43> 'int' '='
    |         | |-DeclRefExpr 0x12e826818 <col:34> 'int' lvalue Var 0x12e80df50 'quoted' 'int'
    |         | `-IntegerLiteral 0x12e826838 <col:43> 'int' 1
    |         `-IfStmt 0x12e826978 <line:13:8, col:41>
    |           |-BinaryOperator 0x12e826910 <col:12, col:18> 'int' '=='
    |           | |-ImplicitCastExpr 0x12e8268f8 <col:12, col:13> 'int' <IntegralCast>
    |           | | `-ImplicitCastExpr 0x12e8268e0 <col:12, col:13> 'char' <LValueToRValue>
    |           | |   `-UnaryOperator 0x12e8268b0 <col:12, col:13> 'char' lvalue prefix '*' cannot overflow
    |           | |     `-ImplicitCastExpr 0x12e826898 <col:13> 'char *' <LValueToRValue>
    |           | |       `-DeclRefExpr 0x12e826878 <col:13> 'char *' lvalue ParmVar 0x12e80dcd8 's' 'char *'
    |           | `-CharacterLiteral 0x12e8268c8 <col:18> 'int' 44
    |           `-ReturnStmt 0x12e826968 <col:34, col:41>
    |             `-ImplicitCastExpr 0x12e826950 <col:41> 'char *' <LValueToRValue>
    |               `-DeclRefExpr 0x12e826930 <col:41> 'char *' lvalue ParmVar 0x12e80dcd8 's' 'char *'
    `-ReturnStmt 0x12e826ab0 <line:15:2, col:9>
      `-ImplicitCastExpr 0x12e826a98 <col:9> 'char *' <LValueToRValue>
        `-DeclRefExpr 0x12e826a78 <col:9> 'char *' lvalue ParmVar 0x12e80dcd8 's' 'char *'
