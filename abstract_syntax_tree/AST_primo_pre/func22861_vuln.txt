`-FunctionDecl 0x12200df28  line:1:5 main 'int (int, char **)'
  |-ParmVarDecl 0x12200dcd8 <col:10, col:14> col:14 used argc 'int'
  |-ParmVarDecl 0x12200de00 <col:20, col:31> col:26 used argv 'char **'
  `-CompoundStmt 0x121926600 <line:2:1, line:61:1>
    |-DeclStmt 0x12200e0a8 <line:3:2, col:8>
    | `-VarDecl 0x12200e040 <col:2, col:6> col:6 used rc 'int'
    |-DeclStmt 0x122027088 <line:4:2, col:26>
    | |-RecordDecl 0x12200e0c0 <col:2, col:9> col:9 struct util_options
    | `-VarDecl 0x12200e1b8 <col:2, col:22> col:22 invalid opts 'struct util_options'
    |-BinaryOperator 0x1220272c0 <line:7:2, col:36> 'int' contains-errors '='
    | |-DeclRefExpr 0x1220270b8 <col:2> 'int' lvalue Var 0x12200e040 'rc' 'int'
    | `-CallExpr 0x122027288 <col:7, col:36> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x1220271f0 <col:7> 'int ()' Function 0x122027138 'util_getopt' 'int ()'
    |   |-DeclRefExpr 0x122027210 <col:19> 'int' lvalue ParmVar 0x12200dcd8 'argc' 'int'
    |   |-DeclRefExpr 0x122027230 <col:25> 'char **' lvalue ParmVar 0x12200de00 'argv' 'char **'
    |   `-UnaryOperator 0x122027270 <col:31, col:32> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-RecoveryExpr 0x122027250 <col:32> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x1220273c0 <line:8:2, line:9:8>
    | |-BinaryOperator 0x122027338 <line:8:6, col:11> 'int' '<'
    | | |-ImplicitCastExpr 0x122027320 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1220272e0 <col:6> 'int' lvalue Var 0x12200e040 'rc' 'int'
    | | `-IntegerLiteral 0x122027300 <col:11> 'int' 0
    | `-GotoStmt 0x1220273a8 <line:9:3, col:8> 'out' 0x122027358
    |-IfStmt 0x122027618 <line:12:2, line:13:10>
    | |-BinaryOperator 0x1220275b0 <line:12:6, col:13> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x122027570 <col:6> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x122027590 <col:13> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x122027608 <line:13:3, col:10>
    |   `-RecoveryExpr 0x1220275e8 <col:10> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x122027bd8 <line:17:2, line:18:34> 'int' contains-errors '='
    | |-DeclRefExpr 0x122027638 <line:17:2> 'int' lvalue Var 0x12200e040 'rc' 'int'
    | `-CallExpr 0x122027b90 <col:7, line:18:34> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x122027738 <line:17:7> 'int ()' Function 0x122027680 'seccomp_rule_add' 'int ()'
    |   |-RecoveryExpr 0x122027ab8 <col:24> '<dependent type>' contains-errors lvalue
    |   |-RecoveryExpr 0x122027ad8 <col:29> '<dependent type>' contains-errors lvalue
    |   |-CallExpr 0x122027b18 <col:45, col:58> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x122027868 <col:45> 'int ()' Function 0x1220277b0 'SCMP_SYS' 'int ()'
    |   | `-RecoveryExpr 0x122027af8 <col:54> '<dependent type>' contains-errors lvalue
    |   |-IntegerLiteral 0x1220278c8 <col:61> 'int' 1
    |   `-CallExpr 0x122027b60 <line:18:10, col:33> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x1220279c8 <col:10> 'int ()' Function 0x122027910 'SCMP_A2' 'int ()'
    |     |-RecoveryExpr 0x122027b40 <col:18> '<dependent type>' contains-errors lvalue
    |     `-IntegerLiteral 0x122027a00 <col:31> 'int' 64
    |-IfStmt 0x122027c88 <line:19:2, line:20:8>
    | |-BinaryOperator 0x122027c50 <line:19:6, col:12> 'int' '!='
    | | |-ImplicitCastExpr 0x122027c38 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x122027bf8 <col:6> 'int' lvalue Var 0x12200e040 'rc' 'int'
    | | `-IntegerLiteral 0x122027c18 <col:12> 'int' 0
    | `-GotoStmt 0x122027c70 <line:20:3, col:8> 'out' 0x122027358
    |-BinaryOperator 0x121924940 <line:21:2, line:22:35> 'int' contains-errors '='
    | |-DeclRefExpr 0x122027ca8 <line:21:2> 'int' lvalue Var 0x12200e040 'rc' 'int'
    | `-CallExpr 0x1219248f8 <col:7, line:22:35> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x122027cc8 <line:21:7> 'int ()' Function 0x122027680 'seccomp_rule_add' 'int ()'
    |   |-RecoveryExpr 0x121924800 <col:24> '<dependent type>' contains-errors lvalue
    |   |-CallExpr 0x121924838 <col:29, col:45> 'int'
    |   | |-ImplicitCastExpr 0x121924820 <col:29> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x122027de0 <col:29> 'int ()' Function 0x122027d28 'SCMP_ACT_ERRNO' 'int ()'
    |   | `-IntegerLiteral 0x121924600 <col:44> 'int' 5
    |   |-CallExpr 0x121924880 <col:48, col:61> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x121924690 <col:48> 'int ()' Function 0x1220277b0 'SCMP_SYS' 'int ()'
    |   | `-RecoveryExpr 0x121924860 <col:57> '<dependent type>' contains-errors lvalue
    |   |-IntegerLiteral 0x1219246f0 <col:64> 'int' 1
    |   `-CallExpr 0x1219248c8 <line:22:10, col:34> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x121924710 <col:10> 'int ()' Function 0x122027910 'SCMP_A2' 'int ()'
    |     |-RecoveryExpr 0x1219248a8 <col:18> '<dependent type>' contains-errors lvalue
    |     `-IntegerLiteral 0x121924748 <col:31> 'int' 128
    |-IfStmt 0x1219249f0 <line:23:2, line:24:8>
    | |-BinaryOperator 0x1219249b8 <line:23:6, col:12> 'int' '!='
    | | |-ImplicitCastExpr 0x1219249a0 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x121924960 <col:6> 'int' lvalue Var 0x12200e040 'rc' 'int'
    | | `-IntegerLiteral 0x121924980 <col:12> 'int' 0
    | `-GotoStmt 0x1219249d8 <line:24:3, col:8> 'out' 0x122027358
    |-IfStmt 0x121924be0 <line:27:2, line:28:8>
    | |-BinaryOperator 0x121924ba8 <line:27:6, col:12> 'int' '!='
    | | |-ImplicitCastExpr 0x121924b90 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x121924b50 <col:6> 'int' lvalue Var 0x12200e040 'rc' 'int'
    | | `-IntegerLiteral 0x121924b70 <col:12> 'int' 0
    | `-GotoStmt 0x121924bc8 <line:28:3, col:8> 'out' 0x122027358
    |-IfStmt 0x121924dd0 <line:31:2, line:32:8>
    | |-BinaryOperator 0x121924d98 <line:31:6, col:12> 'int' '!='
    | | |-ImplicitCastExpr 0x121924d80 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x121924d40 <col:6> 'int' lvalue Var 0x12200e040 'rc' 'int'
    | | `-IntegerLiteral 0x121924d60 <col:12> 'int' 0
    | `-GotoStmt 0x121924db8 <line:32:3, col:8> 'out' 0x122027358
    |-IfStmt 0x121924fc0 <line:35:2, line:36:8>
    | |-BinaryOperator 0x121924f88 <line:35:6, col:12> 'int' '!='
    | | |-ImplicitCastExpr 0x121924f70 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x121924f30 <col:6> 'int' lvalue Var 0x12200e040 'rc' 'int'
    | | `-IntegerLiteral 0x121924f50 <col:12> 'int' 0
    | `-GotoStmt 0x121924fa8 <line:36:3, col:8> 'out' 0x122027358
    |-IfStmt 0x1219251b0 <line:39:2, line:40:8>
    | |-BinaryOperator 0x121925178 <line:39:6, col:12> 'int' '!='
    | | |-ImplicitCastExpr 0x121925160 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x121925120 <col:6> 'int' lvalue Var 0x12200e040 'rc' 'int'
    | | `-IntegerLiteral 0x121925140 <col:12> 'int' 0
    | `-GotoStmt 0x121925198 <line:40:3, col:8> 'out' 0x122027358
    |-IfStmt 0x1219253a0 <line:43:2, line:44:8>
    | |-BinaryOperator 0x121925368 <line:43:6, col:12> 'int' '!='
    | | |-ImplicitCastExpr 0x121925350 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x121925310 <col:6> 'int' lvalue Var 0x12200e040 'rc' 'int'
    | | `-IntegerLiteral 0x121925330 <col:12> 'int' 0
    | `-GotoStmt 0x121925388 <line:44:3, col:8> 'out' 0x122027358
    |-IfStmt 0x121925590 <line:47:2, line:48:8>
    | |-BinaryOperator 0x121925558 <line:47:6, col:12> 'int' '!='
    | | |-ImplicitCastExpr 0x121925540 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x121925500 <col:6> 'int' lvalue Var 0x12200e040 'rc' 'int'
    | | `-IntegerLiteral 0x121925520 <col:12> 'int' 0
    | `-GotoStmt 0x121925578 <line:48:3, col:8> 'out' 0x122027358
    |-IfStmt 0x121926190 <line:51:2, line:52:8>
    | |-BinaryOperator 0x121926158 <line:51:6, col:12> 'int' '!='
    | | |-ImplicitCastExpr 0x121926140 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x121926100 <col:6> 'int' lvalue Var 0x12200e040 'rc' 'int'
    | | `-IntegerLiteral 0x121926120 <col:12> 'int' 0
    | `-GotoStmt 0x121926178 <line:52:3, col:8> 'out' 0x122027358
    |-IfStmt 0x121926358 <line:55:2, line:56:8>
    | |-ImplicitCastExpr 0x121926328 <line:55:6> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x121926308 <col:6> 'int' lvalue Var 0x12200e040 'rc' 'int'
    | `-GotoStmt 0x121926340 <line:56:3, col:8> 'out' 0x122027358
    |-LabelStmt 0x121926480 <line:58:1, col:4> 'out'
    | `-NullStmt 0x121926478 <col:4>
    `-ReturnStmt 0x1219265f0 <line:60:2, col:27>
      `-ParenExpr 0x1219265d0 <col:9, col:27> 'int'
        `-ConditionalOperator 0x1219265a0 <col:10, col:25> 'int'
          |-BinaryOperator 0x1219264f8 <col:10, col:15> 'int' '<'
          | |-ImplicitCastExpr 0x1219264e0 <col:10> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x1219264a0 <col:10> 'int' lvalue Var 0x12200e040 'rc' 'int'
          | `-IntegerLiteral 0x1219264c0 <col:15> 'int' 0
          |-UnaryOperator 0x121926550 <col:19, col:20> 'int' prefix '-'
          | `-ImplicitCastExpr 0x121926538 <col:20> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x121926518 <col:20> 'int' lvalue Var 0x12200e040 'rc' 'int'
          `-ImplicitCastExpr 0x121926588 <col:25> 'int' <LValueToRValue>
            `-DeclRefExpr 0x121926568 <col:25> 'int' lvalue Var 0x12200e040 'rc' 'int'
