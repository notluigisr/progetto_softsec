`-FunctionDecl 0x1531282f8  line:1:1 adjust_sign 'int (int, int, int *)'
  |-ParmVarDecl 0x1531280d8 <col:13, col:17> col:17 used is_negative 'int'
  |-ParmVarDecl 0x153128158 <col:30, col:34> col:34 used forcesign 'int'
  |-ParmVarDecl 0x153128208 <col:45, col:50> col:50 used signvalue 'int *'
  `-CompoundStmt 0x153128668 <line:2:1, line:11:1>
    `-IfStmt 0x153128620 <line:3:2, line:9:16> has_else
      |-ImplicitCastExpr 0x153128420 <line:3:6> 'int' <LValueToRValue>
      | `-DeclRefExpr 0x153128400 <col:6> 'int' lvalue ParmVar 0x1531280d8 'is_negative' 'int'
      |-CompoundStmt 0x153128520 <line:4:2, line:7:2>
      | |-BinaryOperator 0x1531284a0 <line:5:3, col:16> 'int' '='
      | | |-UnaryOperator 0x153128470 <col:3, col:4> 'int' lvalue prefix '*' cannot overflow
      | | | `-ImplicitCastExpr 0x153128458 <col:4> 'int *' <LValueToRValue>
      | | |   `-DeclRefExpr 0x153128438 <col:4> 'int *' lvalue ParmVar 0x153128208 'signvalue' 'int *'
      | | `-CharacterLiteral 0x153128488 <col:16> 'int' 45
      | `-ReturnStmt 0x153128510 <line:6:3, col:10>
      |   `-RecoveryExpr 0x1531284f0 <col:10> '<dependent type>' contains-errors lvalue
      `-IfStmt 0x153128600 <line:8:7, line:9:16>
        |-ImplicitCastExpr 0x153128560 <line:8:11> 'int' <LValueToRValue>
        | `-DeclRefExpr 0x153128540 <col:11> 'int' lvalue ParmVar 0x153128158 'forcesign' 'int'
        `-BinaryOperator 0x1531285e0 <line:9:3, col:16> 'int' '='
          |-UnaryOperator 0x1531285b0 <col:3, col:4> 'int' lvalue prefix '*' cannot overflow
          | `-ImplicitCastExpr 0x153128598 <col:4> 'int *' <LValueToRValue>
          |   `-DeclRefExpr 0x153128578 <col:4> 'int *' lvalue ParmVar 0x153128208 'signvalue' 'int *'
          `-CharacterLiteral 0x1531285c8 <col:16> 'int' 43
