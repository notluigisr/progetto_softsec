`-FunctionDecl 0x133140cb8  line:1:17 sctp_skb_recv_datagram 'struct sk_buff *(struct sock *, int, int, int *)'
  |-ParmVarDecl 0x1331286e8 <col:40, col:53> col:53 used sk 'struct sock *'
  |-ParmVarDecl 0x133128768 <col:57, col:61> col:61 used flags 'int'
  |-ParmVarDecl 0x133140a00 <line:2:12, col:16> col:16 used noblock 'int'
  |-ParmVarDecl 0x133140ab8 <col:25, col:30> col:30 used err 'int *'
  `-CompoundStmt 0x133143f30 <line:3:1, line:52:1>
    |-DeclStmt 0x133140e48 <line:4:2, col:11>
    | `-VarDecl 0x133140de0 <col:2, col:6> col:6 used error 'int'
    |-DeclStmt 0x133140f50 <line:5:2, col:21>
    | `-VarDecl 0x133140ee8 <col:2, col:18> col:18 used skb 'struct sk_buff *'
    |-DeclStmt 0x133140fe8 <line:6:2, col:12>
    | `-VarDecl 0x133140f80 <col:2, col:7> col:7 used timeo 'long'
    |-BinaryOperator 0x133141270 <line:8:2, col:35> 'long' '='
    | |-DeclRefExpr 0x133141000 <col:2> 'long' lvalue Var 0x133140f80 'timeo' 'long'
    | `-ImplicitCastExpr 0x133141258 <col:10, col:35> 'long' <IntegralCast>
    |   `-CallExpr 0x1331411f8 <col:10, col:35> 'int'
    |     |-ImplicitCastExpr 0x1331411e0 <col:10> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x133141150 <col:10> 'int ()' Function 0x133141098 'sock_rcvtimeo' 'int ()'
    |     |-ImplicitCastExpr 0x133141228 <col:24> 'struct sock *' <LValueToRValue>
    |     | `-DeclRefExpr 0x133141170 <col:24> 'struct sock *' lvalue ParmVar 0x1331286e8 'sk' 'struct sock *'
    |     `-ImplicitCastExpr 0x133141240 <col:28> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x133141190 <col:28> 'int' lvalue ParmVar 0x133140a00 'noblock' 'int'
    |-CallExpr 0x133141550 <line:10:2, line:11:24> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x133141370 <line:10:2> 'int ()' Function 0x1331412b8 'pr_debug' 'int ()'
    | |-StringLiteral 0x1331413d0 <col:11> 'char[4]' lvalue "STR"
    | |-PredefinedExpr 0x1331414a0 <col:18> 'const char[23]' lvalue __func__
    | | `-StringLiteral 0x133141470 <col:18> 'const char[23]' lvalue "sctp_skb_recv_datagram"
    | |-DeclRefExpr 0x1331414b8 <col:28> 'long' lvalue Var 0x133140f80 'timeo' 'long'
    | `-RecoveryExpr 0x133141530 <line:11:4> '<dependent type>' contains-errors lvalue
    |-DoStmt 0x133143e00 <line:13:2, line:45:53>
    | |-CompoundStmt 0x133143b30 <line:13:5, line:45:2>
    | | |-IfStmt 0x133143018 <line:15:3, line:21:3> has_else
    | | | |-BinaryOperator 0x133141608 <line:15:7, col:15> '<dependent type>' contains-errors '&'
    | | | | |-DeclRefExpr 0x133141590 <col:7> 'int' lvalue ParmVar 0x133128768 'flags' 'int'
    | | | | `-RecoveryExpr 0x1331415e8 <col:15> '<dependent type>' contains-errors lvalue
    | | | |-CompoundStmt 0x133142e00 <col:25, line:19:3>
    | | | | |-BinaryOperator 0x1331417e8 <line:16:4, col:40> 'struct sk_buff *' contains-errors '='
    | | | | | |-DeclRefExpr 0x133141628 <col:4> 'struct sk_buff *' lvalue Var 0x133140ee8 'skb' 'struct sk_buff *'
    | | | | | `-CallExpr 0x1331417c0 <col:10, col:40> '<dependent type>' contains-errors
    | | | | |   |-DeclRefExpr 0x133141728 <col:10> 'int ()' Function 0x133141670 'skb_peek' 'int ()'
    | | | | |   `-UnaryOperator 0x1331417a8 <col:19, col:24> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | | | |     `-RecoveryExpr 0x133141780 <col:20, col:24> '<dependent type>' contains-errors lvalue
    | | | | |       `-DeclRefExpr 0x133141748 <col:20> 'struct sock *' lvalue ParmVar 0x1331286e8 'sk' 'struct sock *'
    | | | | `-IfStmt 0x1331419e0 <line:17:4, line:18:29>
    | | | |   |-ImplicitCastExpr 0x133141828 <line:17:8> 'struct sk_buff *' <LValueToRValue>
    | | | |   | `-DeclRefExpr 0x133141808 <col:8> 'struct sk_buff *' lvalue Var 0x133140ee8 'skb' 'struct sk_buff *'
    | | | |   `-CallExpr 0x1331419b8 <line:18:5, col:29> '<dependent type>' contains-errors
    | | | |     |-DeclRefExpr 0x133141920 <col:5> 'int ()' Function 0x133141868 'refcount_inc' 'int ()'
    | | | |     `-UnaryOperator 0x1331419a0 <col:18, col:24> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | | |       `-RecoveryExpr 0x133141978 <col:19, col:24> '<dependent type>' contains-errors lvalue
    | | | |         `-DeclRefExpr 0x133141940 <col:19> 'struct sk_buff *' lvalue Var 0x133140ee8 'skb' 'struct sk_buff *'
    | | | `-CompoundStmt 0x133143000 <line:19:10, line:21:3>
    | | |   `-BinaryOperator 0x133142fe0 <line:20:4, col:45> 'struct sk_buff *' contains-errors '='
    | | |     |-DeclRefExpr 0x133142e20 <col:4> 'struct sk_buff *' lvalue Var 0x133140ee8 'skb' 'struct sk_buff *'
    | | |     `-CallExpr 0x133142fb8 <col:10, col:45> '<dependent type>' contains-errors
    | | |       |-DeclRefExpr 0x133142f20 <col:10> 'int ()' Function 0x133142e68 '__skb_dequeue' 'int ()'
    | | |       `-UnaryOperator 0x133142fa0 <col:24, col:29> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | |         `-RecoveryExpr 0x133142f78 <col:25, col:29> '<dependent type>' contains-errors lvalue
    | | |           `-DeclRefExpr 0x133142f40 <col:25> 'struct sock *' lvalue ParmVar 0x1331286e8 'sk' 'struct sock *'
    | | |-IfStmt 0x1331430c8 <line:23:3, line:24:11>
    | | | |-ImplicitCastExpr 0x133143068 <line:23:7> 'struct sk_buff *' <LValueToRValue>
    | | | | `-DeclRefExpr 0x133143048 <col:7> 'struct sk_buff *' lvalue Var 0x133140ee8 'skb' 'struct sk_buff *'
    | | | `-ReturnStmt 0x1331430b8 <line:24:4, col:11>
    | | |   `-ImplicitCastExpr 0x1331430a0 <col:11> 'struct sk_buff *' <LValueToRValue>
    | | |     `-DeclRefExpr 0x133143080 <col:11> 'struct sk_buff *' lvalue Var 0x133140ee8 'skb' 'struct sk_buff *'
    | | |-BinaryOperator 0x133143280 <line:27:3, col:24> 'int' '='
    | | | |-DeclRefExpr 0x1331430e8 <col:3> 'int' lvalue Var 0x133140de0 'error' 'int'
    | | | `-CallExpr 0x133143240 <col:11, col:24> 'int'
    | | |   |-ImplicitCastExpr 0x133143228 <col:11> 'int (*)()' <FunctionToPointerDecay>
    | | |   | `-DeclRefExpr 0x1331431e8 <col:11> 'int ()' Function 0x133143130 'sock_error' 'int ()'
    | | |   `-ImplicitCastExpr 0x133143268 <col:22> 'struct sock *' <LValueToRValue>
    | | |     `-DeclRefExpr 0x133143208 <col:22> 'struct sock *' lvalue ParmVar 0x1331286e8 'sk' 'struct sock *'
    | | |-IfStmt 0x133143340 <line:28:3, line:29:9>
    | | | |-ImplicitCastExpr 0x1331432c0 <line:28:7> 'int' <LValueToRValue>
    | | | | `-DeclRefExpr 0x1331432a0 <col:7> 'int' lvalue Var 0x133140de0 'error' 'int'
    | | | `-GotoStmt 0x133143328 <line:29:4, col:9> 'no_packet' 0x1331432d8
    | | |-IfStmt 0x133143440 <line:31:3, line:32:4>
    | | | |-BinaryOperator 0x133143418 <line:31:7, col:25> '<dependent type>' contains-errors '&'
    | | | | |-RecoveryExpr 0x133143398 <col:7, col:11> '<dependent type>' contains-errors lvalue
    | | | | | `-DeclRefExpr 0x133143360 <col:7> 'struct sock *' lvalue ParmVar 0x1331286e8 'sk' 'struct sock *'
    | | | | `-RecoveryExpr 0x1331433f8 <col:25> '<dependent type>' contains-errors lvalue
    | | | `-BreakStmt 0x133143438 <line:32:4>
    | | |-IfStmt 0x133143990 <line:34:3, line:39:3>
    | | | |-CallExpr 0x133143598 <line:34:7, col:26> 'int'
    | | | | |-ImplicitCastExpr 0x133143580 <col:7> 'int (*)()' <FunctionToPointerDecay>
    | | | | | `-DeclRefExpr 0x133143540 <col:7> 'int ()' Function 0x133143488 'sk_can_busy_loop' 'int ()'
    | | | | `-ImplicitCastExpr 0x1331435c0 <col:24> 'struct sock *' <LValueToRValue>
    | | | |   `-DeclRefExpr 0x133143560 <col:24> 'struct sock *' lvalue ParmVar 0x1331286e8 'sk' 'struct sock *'
    | | | `-CompoundStmt 0x133143970 <col:29, line:39:3>
    | | |   |-CallExpr 0x133143730 <line:35:4, col:28> 'int'
    | | |   | |-ImplicitCastExpr 0x133143718 <col:4> 'int (*)()' <FunctionToPointerDecay>
    | | |   | | `-DeclRefExpr 0x1331436b8 <col:4> 'int ()' Function 0x133143600 'sk_busy_loop' 'int ()'
    | | |   | |-ImplicitCastExpr 0x133143760 <col:17> 'struct sock *' <LValueToRValue>
    | | |   | | `-DeclRefExpr 0x1331436d8 <col:17> 'struct sock *' lvalue ParmVar 0x1331286e8 'sk' 'struct sock *'
    | | |   | `-ImplicitCastExpr 0x133143778 <col:21> 'int' <LValueToRValue>
    | | |   |   `-DeclRefExpr 0x1331436f8 <col:21> 'int' lvalue ParmVar 0x133140a00 'noblock' 'int'
    | | |   `-IfStmt 0x133143950 <line:37:4, line:38:5>
    | | |     |-UnaryOperator 0x133143930 <line:37:8, col:46> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | |     | `-CallExpr 0x133143908 <col:9, col:46> '<dependent type>' contains-errors
    | | |     |   |-DeclRefExpr 0x133143870 <col:9> 'int ()' Function 0x1331437b8 'skb_queue_empty' 'int ()'
    | | |     |   `-UnaryOperator 0x1331438f0 <col:25, col:30> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | |     |     `-RecoveryExpr 0x1331438c8 <col:26, col:30> '<dependent type>' contains-errors lvalue
    | | |     |       `-DeclRefExpr 0x133143890 <col:26> 'struct sock *' lvalue ParmVar 0x1331286e8 'sk' 'struct sock *'
    | | |     `-ContinueStmt 0x133143948 <line:38:5>
    | | |-BinaryOperator 0x133143a88 <line:42:3, col:12> 'int' contains-errors '='
    | | | |-DeclRefExpr 0x1331439b0 <col:3> 'int' lvalue Var 0x133140de0 'error' 'int'
    | | | `-UnaryOperator 0x133143a70 <col:11, col:12> '<dependent type>' contains-errors prefix '-' cannot overflow
    | | |   `-ImplicitCastExpr 0x133143a58 <col:12> '<dependent type>' contains-errors <LValueToRValue>
    | | |     `-RecoveryExpr 0x133143a38 <col:12> '<dependent type>' contains-errors lvalue
    | | `-IfStmt 0x133143b10 <line:43:3, line:44:9>
    | |   |-UnaryOperator 0x133143ae0 <line:43:7, col:8> 'int' prefix '!' cannot overflow
    | |   | `-ImplicitCastExpr 0x133143ac8 <col:8> 'long' <LValueToRValue>
    | |   |   `-DeclRefExpr 0x133143aa8 <col:8> 'long' lvalue Var 0x133140f80 'timeo' 'long'
    | |   `-GotoStmt 0x133143af8 <line:44:4, col:9> 'no_packet' 0x1331432d8
    | `-BinaryOperator 0x133143dc8 <line:45:11, col:52> 'int' '=='
    |   |-CallExpr 0x133143d40 <col:11, col:47> 'int'
    |   | |-ImplicitCastExpr 0x133143d28 <col:11> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x133143c60 <col:11> 'int ()' Function 0x133143ba8 'sctp_wait_for_packet' 'int ()'
    |   | |-ImplicitCastExpr 0x133143d78 <col:32> 'struct sock *' <LValueToRValue>
    |   | | `-DeclRefExpr 0x133143c80 <col:32> 'struct sock *' lvalue ParmVar 0x1331286e8 'sk' 'struct sock *'
    |   | |-ImplicitCastExpr 0x133143d90 <col:36> 'int *' <LValueToRValue>
    |   | | `-DeclRefExpr 0x133143ca0 <col:36> 'int *' lvalue ParmVar 0x133140ab8 'err' 'int *'
    |   | `-UnaryOperator 0x133143d10 <col:41, col:42> 'long *' prefix '&' cannot overflow
    |   |   `-DeclRefExpr 0x133143cc0 <col:42> 'long' lvalue Var 0x133140f80 'timeo' 'long'
    |   `-IntegerLiteral 0x133143da8 <col:52> 'int' 0
    |-ReturnStmt 0x133143e58 <line:47:2, col:9>
    | `-RecoveryExpr 0x133143e38 <col:9> '<dependent type>' contains-errors lvalue
    `-LabelStmt 0x133143f10 <line:49:1, line:50:9> 'no_packet'
      `-BinaryOperator 0x133143ef0 <col:2, col:9> 'int' '='
        |-UnaryOperator 0x133143ea0 <col:2, col:3> 'int' lvalue prefix '*' cannot overflow
        | `-ImplicitCastExpr 0x133143e88 <col:3> 'int *' <LValueToRValue>
        |   `-DeclRefExpr 0x133143e68 <col:3> 'int *' lvalue ParmVar 0x133140ab8 'err' 'int *'
        `-ImplicitCastExpr 0x133143ed8 <col:9> 'int' <LValueToRValue>
          `-DeclRefExpr 0x133143eb8 <col:9> 'int' lvalue Var 0x133140de0 'error' 'int'
