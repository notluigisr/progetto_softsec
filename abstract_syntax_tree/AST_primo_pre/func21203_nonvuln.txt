`-FunctionDecl 0x12f9281a8  line:1:1 del_from_showcmd 'int (int)'
  |-ParmVarDecl 0x12f9280d8 <col:18, col:22> col:22 used len 'int'
  `-CompoundStmt 0x12f941ab8 <line:2:1, line:15:1>
    |-DeclStmt 0x12f928320 <line:3:5, col:20>
    | `-VarDecl 0x12f9282b8 <col:5, col:13> col:13 used old_len 'int'
    |-IfStmt 0x12f9283f8 <line:5:5, line:6:2>
    | |-UnaryOperator 0x12f9283d0 <line:5:9, col:10> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x12f9283b8 <col:10> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x12f928398 <col:10> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x12f9283e8 <line:6:2>
    |-IfStmt 0x12f9286d0 <line:9:5, line:10:8>
    | |-BinaryOperator 0x12f928638 <line:9:9, col:15> 'int' '>'
    | | |-ImplicitCastExpr 0x12f928608 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x12f9285c8 <col:9> 'int' lvalue ParmVar 0x12f9280d8 'len' 'int'
    | | `-ImplicitCastExpr 0x12f928620 <col:15> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x12f9285e8 <col:15> 'int' lvalue Var 0x12f9282b8 'old_len' 'int'
    | `-BinaryOperator 0x12f9286b0 <line:10:2, col:8> 'int' '='
    |   |-DeclRefExpr 0x12f928658 <col:2> 'int' lvalue ParmVar 0x12f9280d8 'len' 'int'
    |   `-ImplicitCastExpr 0x12f928698 <col:8> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x12f928678 <col:8> 'int' lvalue Var 0x12f9282b8 'old_len' 'int'
    `-IfStmt 0x12f941a98 <line:13:5, line:14:18>
      |-UnaryOperator 0x12f941948 <line:13:9, col:21> 'int' prefix '!' cannot overflow
      | `-CallExpr 0x12f941928 <col:10, col:21> 'int'
      |   `-ImplicitCastExpr 0x12f941910 <col:10> 'int (*)()' <FunctionToPointerDecay>
      |     `-DeclRefExpr 0x12f9418b8 <col:10> 'int ()' Function 0x12f941800 'char_avail' 'int ()'
      `-CallExpr 0x12f941a78 <line:14:2, col:18> 'int'
        `-ImplicitCastExpr 0x12f941a60 <col:2> 'int (*)()' <FunctionToPointerDecay>
          `-DeclRefExpr 0x12f941a40 <col:2> 'int ()' Function 0x12f941988 'display_showcmd' 'int ()'
