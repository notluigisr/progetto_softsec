`-FunctionDecl 0x14000df18  line:1:5 invalid jas_matrix_resize 'int (int *, int, int)'
  |-ParmVarDecl 0x14000dd28 <col:23, col:37> col:37 referenced invalid matrix 'int *'
  |-ParmVarDecl 0x14000dda8 <col:45, col:49> col:49 used numrows 'int'
  |-ParmVarDecl 0x14000de28 <col:58, col:62> col:62 used numcols 'int'
  `-CompoundStmt 0x140027990 <line:2:1, line:19:1>
    |-DeclStmt 0x14000e058 <line:3:2, col:10>
    | `-VarDecl 0x14000dff0 <col:2, col:6> col:6 used size 'int'
    |-DeclStmt 0x14000e0f0 <line:4:2, col:7>
    | `-VarDecl 0x14000e088 <col:2, col:6> col:6 used i 'int'
    |-BinaryOperator 0x14000e1b8 <line:6:2, col:19> 'int' '='
    | |-DeclRefExpr 0x14000e108 <col:2> 'int' lvalue Var 0x14000dff0 'size' 'int'
    | `-BinaryOperator 0x14000e198 <col:9, col:19> 'int' '*'
    |   |-ImplicitCastExpr 0x14000e168 <col:9> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x14000e128 <col:9> 'int' lvalue ParmVar 0x14000dda8 'numrows' 'int'
    |   `-ImplicitCastExpr 0x14000e180 <col:19> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x14000e148 <col:19> 'int' lvalue ParmVar 0x14000de28 'numcols' 'int'
    |-IfStmt 0x14000e3a8 <line:7:2, line:9:2>
    | |-BinaryOperator 0x14000e328 <line:7:6, col:52> 'int' contains-errors '||'
    | | |-BinaryOperator 0x14000e260 <col:6, col:21> 'int' contains-errors '>'
    | | | |-DeclRefExpr 0x14000e1d8 <col:6> 'int' lvalue Var 0x14000dff0 'size' 'int'
    | | | `-CXXDependentScopeMemberExpr 0x14000e218 <col:13, col:21> '<dependent type>' contains-errors lvalue ->datasize_
    | | |   `-RecoveryExpr 0x14000e1f8 <col:13> '<dependent type>' contains-errors lvalue
    | | `-BinaryOperator 0x14000e308 <col:34, col:52> 'int' contains-errors '>'
    | |   |-DeclRefExpr 0x14000e280 <col:34> 'int' lvalue ParmVar 0x14000dda8 'numrows' 'int'
    | |   `-CXXDependentScopeMemberExpr 0x14000e2c0 <col:44, col:52> '<dependent type>' contains-errors lvalue ->maxrows_
    | |     `-RecoveryExpr 0x14000e2a0 <col:44> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x14000e390 <col:62, line:9:2>
    |   `-ReturnStmt 0x14000e380 <line:8:3, col:11>
    |     `-UnaryOperator 0x14000e368 <col:10, col:11> 'int' prefix '-'
    |       `-IntegerLiteral 0x14000e348 <col:11> 'int' 1
    |-BinaryOperator 0x140027490 <line:11:2, col:21> '<dependent type>' contains-errors '='
    | |-CXXDependentScopeMemberExpr 0x140027428 <col:2, col:10> '<dependent type>' contains-errors lvalue ->numrows_
    | | `-RecoveryExpr 0x140027400 <col:2> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x14000e3c8 <col:2> 'int *' lvalue ParmVar 0x14000dd28 'matrix' 'int *'
    | `-DeclRefExpr 0x140027470 <col:21> 'int' lvalue ParmVar 0x14000dda8 'numrows' 'int'
    |-BinaryOperator 0x140027560 <line:12:2, col:21> '<dependent type>' contains-errors '='
    | |-CXXDependentScopeMemberExpr 0x1400274f8 <col:2, col:10> '<dependent type>' contains-errors lvalue ->numcols_
    | | `-RecoveryExpr 0x1400274d0 <col:2> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x1400274b0 <col:2> 'int *' lvalue ParmVar 0x14000dd28 'matrix' 'int *'
    | `-DeclRefExpr 0x140027540 <col:21> 'int' lvalue ParmVar 0x14000de28 'numcols' 'int'
    |-ForStmt 0x140027928 <line:14:2, line:16:2>
    | |-BinaryOperator 0x1400275c0 <line:14:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x140027580 <col:7> 'int' lvalue Var 0x14000e088 'i' 'int'
    | | `-IntegerLiteral 0x1400275a0 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x140027650 <col:14, col:18> 'int' '<'
    | | |-ImplicitCastExpr 0x140027620 <col:14> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1400275e0 <col:14> 'int' lvalue Var 0x14000e088 'i' 'int'
    | | `-ImplicitCastExpr 0x140027638 <col:18> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x140027600 <col:18> 'int' lvalue ParmVar 0x14000dda8 'numrows' 'int'
    | |-UnaryOperator 0x140027690 <col:27, col:29> 'int' prefix '++'
    | | `-DeclRefExpr 0x140027670 <col:29> 'int' lvalue Var 0x14000e088 'i' 'int'
    | `-CompoundStmt 0x140027910 <col:32, line:16:2>
    |   `-BinaryOperator 0x1400278f0 <line:15:3, col:48> '<dependent type>' contains-errors '='
    |     |-ArraySubscriptExpr 0x140027788 <col:3, col:18> '<dependent type>' contains-errors lvalue
    |     | |-ImplicitCastExpr 0x140027758 <col:3, col:11> '<dependent type>' contains-errors <LValueToRValue>
    |     | | `-CXXDependentScopeMemberExpr 0x1400276f0 <col:3, col:11> '<dependent type>' contains-errors lvalue ->rows_
    |     | |   `-RecoveryExpr 0x1400276c8 <col:3> '<dependent type>' contains-errors lvalue
    |     | |     `-DeclRefExpr 0x1400276a8 <col:3> 'int *' lvalue ParmVar 0x14000dd28 'matrix' 'int *'
    |     | `-ImplicitCastExpr 0x140027770 <col:17> 'int' <LValueToRValue>
    |     |   `-DeclRefExpr 0x140027738 <col:17> 'int' lvalue Var 0x14000e088 'i' 'int'
    |     `-UnaryOperator 0x1400278d8 <col:22, col:48> '<dependent type>' contains-errors prefix '&' cannot overflow
    |       `-ArraySubscriptExpr 0x1400278b8 <col:23, col:48> '<dependent type>' contains-errors lvalue
    |         |-ImplicitCastExpr 0x1400278a0 <col:23, col:31> '<dependent type>' contains-errors <LValueToRValue>
    |         | `-CXXDependentScopeMemberExpr 0x1400277c8 <col:23, col:31> '<dependent type>' contains-errors lvalue ->data_
    |         |   `-RecoveryExpr 0x1400277a8 <col:23> '<dependent type>' contains-errors lvalue
    |         `-BinaryOperator 0x140027880 <col:37, col:47> 'int' '*'
    |           |-ImplicitCastExpr 0x140027850 <col:37> 'int' <LValueToRValue>
    |           | `-DeclRefExpr 0x140027810 <col:37> 'int' lvalue ParmVar 0x14000de28 'numcols' 'int'
    |           `-ImplicitCastExpr 0x140027868 <col:47> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x140027830 <col:47> 'int' lvalue Var 0x14000e088 'i' 'int'
    `-ReturnStmt 0x140027980 <line:18:2, col:9>
      `-IntegerLiteral 0x140027960 <col:9> 'int' 0
