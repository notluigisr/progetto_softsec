`-FunctionDecl 0x12800dda8  line:1:1 PHP_FUNCTION 'int (int)'
  |-ParmVarDecl 0x12800dcd8 <col:14> col:14 posix_access 'int'
  `-CompoundStmt 0x128027418 <line:2:1, line:33:1>
    |-DeclStmt 0x12800df58 <line:3:2, col:15>
    | `-VarDecl 0x12800deb8 <col:2, col:14> col:7 used mode 'long' cinit
    |   `-ImplicitCastExpr 0x12800df40 <col:14> 'long' <IntegralCast>
    |     `-IntegerLiteral 0x12800df20 <col:14> 'int' 0
    |-DeclStmt 0x12800e088 <line:4:2, col:23>
    | |-VarDecl 0x12800df88 <col:2, col:6> col:6 filename_len 'int'
    | `-VarDecl 0x12800e008 <col:2, col:20> col:20 used ret 'int'
    |-DeclStmt 0x12800e1b8 <line:5:2, col:23>
    | |-VarDecl 0x12800e0b8 <col:2, col:8> col:8 used filename 'char *'
    | `-VarDecl 0x12800e138 <col:2, col:19> col:19 used path 'char *'
    |-IfStmt 0x1280266d0 <line:7:2, line:9:2>
    | |-RecoveryExpr 0x1280266a0 <line:7:6, col:98> '_Bool' contains-errors
    | `-CompoundStmt 0x1280266c0 <col:107, line:9:2>
    |-IfStmt 0x128026ab0 <line:12:2, line:15:2>
    | |-UnaryOperator 0x128026880 <line:12:6, col:7> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x128026868 <col:7> 'char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x128026848 <col:7> 'char *' lvalue Var 0x12800e138 'path' 'char *'
    | `-CompoundStmt 0x128026a98 <col:13, line:15:2>
    |   `-BinaryOperator 0x128026a78 <line:13:3, col:25> '<dependent type>' contains-errors '='
    |     |-CallExpr 0x128026a30 <col:3, col:21> '<dependent type>' contains-errors
    |     | |-DeclRefExpr 0x128026978 <col:3> 'int ()' Function 0x1280268c0 'POSIX_G' 'int ()'
    |     | `-RecoveryExpr 0x128026a10 <col:11> '<dependent type>' contains-errors lvalue
    |     `-RecoveryExpr 0x128026a58 <col:25> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x1280270e0 <line:17:2, line:22:2>
    | |-RecoveryExpr 0x128026f10 <line:17:6, line:18:105> '_Bool' contains-errors
    | `-CompoundStmt 0x1280270c8 <col:108, line:22:2>
    |   `-CallExpr 0x128027068 <line:19:3, col:13> 'int'
    |     |-ImplicitCastExpr 0x128027050 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x128027010 <col:3> 'int ()' Function 0x128026f58 'efree' 'int ()'
    |     `-ImplicitCastExpr 0x128027090 <col:9> 'char *' <LValueToRValue>
    |       `-DeclRefExpr 0x128027030 <col:9> 'char *' lvalue Var 0x12800e138 'path' 'char *'
    |-BinaryOperator 0x1280272d8 <line:24:2, col:25> 'int' '='
    | |-DeclRefExpr 0x128027100 <col:2> 'int' lvalue Var 0x12800e008 'ret' 'int'
    | `-CallExpr 0x128027278 <col:8, col:25> 'int'
    |   |-ImplicitCastExpr 0x128027260 <col:8> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x128027200 <col:8> 'int ()' Function 0x128027148 'access' 'int ()'
    |   |-ImplicitCastExpr 0x1280272a8 <col:15> 'char *' <LValueToRValue>
    |   | `-DeclRefExpr 0x128027220 <col:15> 'char *' lvalue Var 0x12800e138 'path' 'char *'
    |   `-ImplicitCastExpr 0x1280272c0 <col:21> 'long' <LValueToRValue>
    |     `-DeclRefExpr 0x128027240 <col:21> 'long' lvalue Var 0x12800deb8 'mode' 'long'
    |-CallExpr 0x128027350 <line:25:2, col:12> 'int'
    | |-ImplicitCastExpr 0x128027338 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x1280272f8 <col:2> 'int ()' Function 0x128026f58 'efree' 'int ()'
    | `-ImplicitCastExpr 0x128027378 <col:8> 'char *' <LValueToRValue>
    |   `-DeclRefExpr 0x128027318 <col:8> 'char *' lvalue Var 0x12800e138 'path' 'char *'
    `-IfStmt 0x1280273f8 <line:27:2, line:30:2>
      |-ImplicitCastExpr 0x1280273b0 <line:27:6> 'int' <LValueToRValue>
      | `-DeclRefExpr 0x128027390 <col:6> 'int' lvalue Var 0x12800e008 'ret' 'int'
      `-CompoundStmt 0x1280273e8 <col:11, line:30:2>
