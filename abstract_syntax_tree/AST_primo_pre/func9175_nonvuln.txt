`-FunctionDecl 0x15a122748  line:1:12 hrtimer_reprogram 'int (struct hrtimer *, struct hrtimer_clock_base *)' static
  |-ParmVarDecl 0x15a80e248 <col:30, col:46> col:46 used timer 'struct hrtimer *'
  |-ParmVarDecl 0x15a122628 <line:2:9, col:36> col:36 base 'struct hrtimer_clock_base *'
  `-CompoundStmt 0x15a123428 <line:3:1, line:20:1>
    |-DeclStmt 0x15a122ad0 <line:6:2, col:9>
    | `-VarDecl 0x15a122a68 <col:2, col:6> col:6 used res 'int'
    |-IfStmt 0x15a122cc8 <line:9:2, line:10:10>
    | |-CallExpr 0x15a122c58 <line:9:6, col:36> 'int'
    | | |-ImplicitCastExpr 0x15a122c40 <col:6> 'int (*)()' <FunctionToPointerDecay>
    | | | `-DeclRefExpr 0x15a122bc8 <col:6> 'int ()' Function 0x15a122b10 'hrtimer_callback_running' 'int ()'
    | | `-ImplicitCastExpr 0x15a122c80 <col:31> 'struct hrtimer *' <LValueToRValue>
    | |   `-DeclRefExpr 0x15a122be8 <col:31> 'struct hrtimer *' lvalue ParmVar 0x15a80e248 'timer' 'struct hrtimer *'
    | `-ReturnStmt 0x15a122cb8 <line:10:3, col:10>
    |   `-IntegerLiteral 0x15a122c98 <col:10> 'int' 0
    |-IfStmt 0x15a122ee8 <line:12:2, line:13:10>
    | |-BinaryOperator 0x15a122e98 <line:12:6, col:36> 'int' contains-errors '>='
    | | |-CXXDependentScopeMemberExpr 0x15a122de8 <col:6, col:14> '<dependent type>' contains-errors lvalue .tv64
    | | | `-RecoveryExpr 0x15a122dc8 <col:6> '<dependent type>' contains-errors lvalue
    | | `-CXXDependentScopeMemberExpr 0x15a122e50 <col:22, col:36> '<dependent type>' contains-errors lvalue ->tv64
    | |   `-RecoveryExpr 0x15a122e30 <col:22> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x15a122ed8 <line:13:3, col:10>
    |   `-IntegerLiteral 0x15a122eb8 <col:10> 'int' 0
    |-BinaryOperator 0x15a123100 <line:16:2, col:37> 'int' contains-errors '='
    | |-DeclRefExpr 0x15a122f08 <col:2> 'int' lvalue Var 0x15a122a68 'res' 'int'
    | `-CallExpr 0x15a1230d0 <col:8, col:37> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x15a123008 <col:8> 'int ()' Function 0x15a122f50 'tick_program_event' 'int ()'
    |   |-RecoveryExpr 0x15a1230b0 <col:27> '<dependent type>' contains-errors lvalue
    |   `-IntegerLiteral 0x15a123040 <col:36> 'int' 0
    |-IfStmt 0x15a1233c0 <line:17:2, line:18:19>
    | |-UnaryOperator 0x15a123298 <line:17:6, col:23> 'int' prefix '!' cannot overflow
    | | `-CallExpr 0x15a123258 <col:7, col:23> 'int'
    | |   |-ImplicitCastExpr 0x15a123240 <col:7> 'int (*)()' <FunctionToPointerDecay>
    | |   | `-DeclRefExpr 0x15a123200 <col:7> 'int ()' Function 0x15a123148 'IS_ERR_VALUE' 'int ()'
    | |   `-ImplicitCastExpr 0x15a123280 <col:20> 'int' <LValueToRValue>
    | |     `-DeclRefExpr 0x15a123220 <col:20> 'int' lvalue Var 0x15a122a68 'res' 'int'
    | `-BinaryOperator 0x15a1233a0 <line:18:3, col:19> '<dependent type>' contains-errors '='
    |   |-UnaryOperator 0x15a123368 <col:3, col:4> '<dependent type>' contains-errors prefix '*' cannot overflow
    |   | `-ImplicitCastExpr 0x15a123350 <col:4> '<dependent type>' contains-errors <LValueToRValue>
    |   |   `-RecoveryExpr 0x15a123330 <col:4> '<dependent type>' contains-errors lvalue
    |   `-RecoveryExpr 0x15a123380 <col:19> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x15a123418 <line:19:2, col:9>
      `-ImplicitCastExpr 0x15a123400 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x15a1233e0 <col:9> 'int' lvalue Var 0x15a122a68 'res' 'int'
