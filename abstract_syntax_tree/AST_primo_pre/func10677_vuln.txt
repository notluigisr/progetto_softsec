`-FunctionDecl 0x1448b9480  line:1:6 invalid jas_matrix_divpow2 'void (int *, int)'
  |-ParmVarDecl 0x1448b9328 <col:25, col:39> col:39 invalid matrix 'int *'
  |-ParmVarDecl 0x1448b93a8 <col:47, col:51> col:51 used n 'int'
  `-CompoundStmt 0x1448d2a00 <line:2:1, line:18:1>
    |-DeclStmt 0x1448b95b8 <line:3:2, col:7>
    | `-VarDecl 0x1448b9550 <col:2, col:6> col:6 used i 'int'
    |-DeclStmt 0x1448b9650 <line:4:2, col:7>
    | `-VarDecl 0x1448b95e8 <col:2, col:6> col:6 used j 'int'
    |-DeclStmt 0x1448b9700 <line:6:2, col:13>
    | `-VarDecl 0x1448b9698 <col:2, col:6> col:6 used rowstep 'int'
    |-BinaryOperator 0x1448b9918 <line:9:2, col:37> 'int' contains-errors '='
    | |-DeclRefExpr 0x1448b9730 <col:2> 'int' lvalue Var 0x1448b9698 'rowstep' 'int'
    | `-CallExpr 0x1448b98f0 <col:12, col:37> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x1448b98b0 <col:12> 'int ()' Function 0x1448b97f8 'jas_matrix_rowstep' 'int ()'
    |   `-RecoveryExpr 0x1448b98d0 <col:31> '<dependent type>' contains-errors lvalue
    `-ForStmt 0x1448d29c8 <line:10:2, line:17:2>
      |-BinaryOperator 0x1448d2378 <line:10:7, col:55> 'int' contains-errors ','
      | |-BinaryOperator 0x1448b99c0 <col:7, col:19> 'int' contains-errors '='
      | | |-DeclRefExpr 0x1448b9938 <col:7> 'int' lvalue Var 0x1448b9550 'i' 'int'
      | | `-CXXDependentScopeMemberExpr 0x1448b9978 <col:11, col:19> '<dependent type>' contains-errors lvalue ->numrows_
      | |   `-RecoveryExpr 0x1448b9958 <col:11> '<dependent type>' contains-errors lvalue
      | `-BinaryOperator 0x1448d2358 <col:29, col:55> 'int' contains-errors '='
      |   |-DeclRefExpr 0x1448d2300 <col:29> 'int' lvalue Var 0x1448b9698 'rowstep' 'int'
      |   `-ArraySubscriptExpr 0x1448d2338 <col:40, col:55> '<dependent type>' contains-errors lvalue
      |     |-ImplicitCastExpr 0x1448d2320 <col:40, col:48> '<dependent type>' contains-errors <LValueToRValue>
      |     | `-CXXDependentScopeMemberExpr 0x1448d2220 <col:40, col:48> '<dependent type>' contains-errors lvalue ->rows_
      |     |   `-RecoveryExpr 0x1448d2200 <col:40> '<dependent type>' contains-errors lvalue
      |     `-IntegerLiteral 0x1448d2268 <col:54> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x1448d23f0 <col:58, col:62> 'int' '>'
      | |-ImplicitCastExpr 0x1448d23d8 <col:58> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x1448d2398 <col:58> 'int' lvalue Var 0x1448b9550 'i' 'int'
      | `-IntegerLiteral 0x1448d23b8 <col:62> 'int' 0
      |-BinaryOperator 0x1448d2538 <col:65, line:11:16> 'int' ','
      | |-UnaryOperator 0x1448d2430 <line:10:65, col:67> 'int' prefix '--'
      | | `-DeclRefExpr 0x1448d2410 <col:67> 'int' lvalue Var 0x1448b9550 'i' 'int'
      | `-CompoundAssignOperator 0x1448d2508 <line:11:4, col:16> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      |   |-DeclRefExpr 0x1448d24d0 <col:4> 'int' lvalue Var 0x1448b9698 'rowstep' 'int'
      |   `-ImplicitCastExpr 0x1448d24f0 <col:16> 'int' <LValueToRValue>
      |     `-DeclRefExpr 0x1448d2460 <col:16> 'int' lvalue Var 0x1448b9698 'rowstep' 'int'
      `-CompoundStmt 0x1448d29b0 <col:25, line:17:2>
        `-ForStmt 0x1448d2978 <line:12:3, line:16:3>
          |-<<<NULL>>>
          |-<<<NULL>>>
          |-BinaryOperator 0x1448d26c8 <line:12:47, col:51> 'int' '>'
          | |-ImplicitCastExpr 0x1448d26b0 <col:47> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x1448d2670 <col:47> 'int' lvalue Var 0x1448b95e8 'j' 'int'
          | `-IntegerLiteral 0x1448d2690 <col:51> 'int' 0
          |-BinaryOperator 0x1448d27a8 <col:54, line:13:7> '<dependent type>' contains-errors ','
          | |-UnaryOperator 0x1448d2708 <line:12:54, col:56> 'int' prefix '--'
          | | `-DeclRefExpr 0x1448d26e8 <col:56> 'int' lvalue Var 0x1448b95e8 'j' 'int'
          | `-UnaryOperator 0x1448d2790 <line:13:5, col:7> '<dependent type>' contains-errors prefix '++' cannot overflow
          |   `-RecoveryExpr 0x1448d2770 <col:7> '<dependent type>' contains-errors lvalue
          `-CompoundStmt 0x1448d2968 <col:13, line:16:3>
