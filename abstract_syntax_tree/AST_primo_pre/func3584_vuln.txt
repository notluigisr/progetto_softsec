`-FunctionDecl 0x13680df48  line:1:29 do_div_llr 'unsigned long (const long long, const long, long *)' static inline
  |-ParmVarDecl 0x13680dcd8 <col:40, col:56> col:56 dividend 'const long long'
  |-ParmVarDecl 0x13680dd58 <line:2:12, col:23> col:23 used divisor 'const long'
  |-ParmVarDecl 0x13680de08 <col:32, col:38> col:38 used remainder 'long *'
  `-CompoundStmt 0x13680e398 <line:3:1, line:8:1>
    `-BinaryOperator 0x13680e348 <line:6:2, col:39> 'long' contains-errors '='
      |-UnaryOperator 0x13680e2e0 <col:2, col:13> 'long' lvalue prefix '*' cannot overflow
      | `-ImplicitCastExpr 0x13680e2c8 <col:3, col:13> 'long *' <LValueToRValue>
      |   `-ParenExpr 0x13680e088 <col:3, col:13> 'long *' lvalue
      |     `-DeclRefExpr 0x13680e068 <col:4> 'long *' lvalue ParmVar 0x13680de08 'remainder' 'long *'
      `-CallExpr 0x13680e318 <col:17, col:39> '<dependent type>' contains-errors
        |-DeclRefExpr 0x13680e1f0 <col:17> 'int ()' Function 0x13680e138 'do_div' 'int ()'
        |-RecoveryExpr 0x13680e2f8 <col:24> '<dependent type>' contains-errors lvalue
        `-DeclRefExpr 0x13680e228 <col:32> 'const long' lvalue ParmVar 0x13680dd58 'divisor' 'const long'
