`-FunctionDecl 0x15680dda8  line:1:1 hstore_slice_to_hstore 'int (int)'
  |-ParmVarDecl 0x15680dcd8 <col:24> col:24 PG_FUNCTION_ARGS 'int'
  `-CompoundStmt 0x157809120 <line:2:1, line:49:1>
    |-DeclStmt 0x156828400 <line:5:2, col:27>
    | `-VarDecl 0x15680e200 <col:2, col:26> col:11 used ptr 'char *' cinit
    |   `-CallExpr 0x15680e3c8 <col:17, col:26> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x15680e348 <col:17> 'int ()' Function 0x15680e290 'STRPTR' 'int ()'
    |     `-RecoveryExpr 0x15680e3a8 <col:24> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x156828628 <line:8:2, col:13>
    | `-VarDecl 0x1568285c0 <col:2, col:8> col:8 used nkeys 'int'
    |-DeclStmt 0x156828888 <line:11:2, col:14>
    | `-VarDecl 0x156828820 <col:2, col:8> col:8 used bufsiz 'int'
    |-DeclStmt 0x156828940 <line:12:2, col:19>
    | `-VarDecl 0x1568288b8 <col:2, col:18> col:8 used lastidx 'int' cinit
    |   `-IntegerLiteral 0x156828920 <col:18> 'int' 0
    |-DeclStmt 0x1568289d8 <line:13:2, col:9>
    | `-VarDecl 0x156828970 <col:2, col:8> col:8 used i 'int'
    |-DeclStmt 0x156828a90 <line:14:2, col:21>
    | `-VarDecl 0x156828a08 <col:2, col:20> col:8 used out_count 'int' cinit
    |   `-IntegerLiteral 0x156828a70 <col:20> 'int' 0
    |-IfStmt 0x156828d70 <line:16:2, line:20:2>
    | |-BinaryOperator 0x156828b00 <line:16:6, col:15> 'int' '=='
    | | |-ImplicitCastExpr 0x156828ae8 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x156828aa8 <col:6> 'int' lvalue Var 0x1568285c0 'nkeys' 'int'
    | | `-IntegerLiteral 0x156828ac8 <col:15> 'int' 0
    | `-CompoundStmt 0x156828d60 <line:17:2, line:20:2>
    |-BinaryOperator 0x156828ef0 <line:23:2, col:11> 'int' '='
    | |-DeclRefExpr 0x156828eb0 <col:2> 'int' lvalue Var 0x156828820 'bufsiz' 'int'
    | `-IntegerLiteral 0x156828ed0 <col:11> 'int' 0
    `-ForStmt 0x157809068 <line:27:2, line:42:2>
      |-BinaryOperator 0x156828f50 <line:27:7, col:11> 'int' '='
      | |-DeclRefExpr 0x156828f10 <col:7> 'int' lvalue Var 0x156828970 'i' 'int'
      | `-IntegerLiteral 0x156828f30 <col:11> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x156828fe0 <col:14, col:18> 'int' '<'
      | |-ImplicitCastExpr 0x156828fb0 <col:14> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x156828f70 <col:14> 'int' lvalue Var 0x156828970 'i' 'int'
      | `-ImplicitCastExpr 0x156828fc8 <col:18> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x156828f90 <col:18> 'int' lvalue Var 0x1568285c0 'nkeys' 'int'
      |-UnaryOperator 0x156829020 <col:25, col:27> 'int' prefix '++'
      | `-DeclRefExpr 0x156829000 <col:27> 'int' lvalue Var 0x156828970 'i' 'int'
      `-CompoundStmt 0x157809048 <line:28:2, line:42:2>
        |-DeclStmt 0x156829230 <line:29:3, line:30:50>
        | `-VarDecl 0x156829050 <line:29:3, col:9> col:9 used idx 'int'
        `-IfStmt 0x157809028 <line:32:3, line:41:3>
          |-BinaryOperator 0x1568292a0 <line:32:7, col:14> 'int' '>='
          | |-ImplicitCastExpr 0x156829288 <col:7> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x156829248 <col:7> 'int' lvalue Var 0x156829050 'idx' 'int'
          | `-IntegerLiteral 0x156829268 <col:14> 'int' 0
          `-CompoundStmt 0x157809010 <line:33:3, line:41:3>
            `-UnaryOperator 0x157808ff8 <line:40:4, col:6> 'int' prefix '++'
              `-DeclRefExpr 0x157808fd8 <col:6> 'int' lvalue Var 0x156828a08 'out_count' 'int'
