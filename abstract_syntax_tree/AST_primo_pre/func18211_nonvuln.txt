`-FunctionDecl 0x131012938  line:1:1 invalid decode_bits_in_field 'int (const int, const int, const int)'
  |-ParmVarDecl 0x1310126f0 <col:22, col:34> col:34 invalid bit_offset 'const int'
  |-ParmVarDecl 0x131012770 <col:46, col:57> col:57 used no_of_bits 'const int'
  |-ParmVarDecl 0x1310127f0 <col:69, col:83> col:83 invalid value 'const int'
  `-CompoundStmt 0x13280d8c0 <line:2:1, line:52:1>
    |-DeclStmt 0x131012a78 <line:4:2, col:11>
    | `-VarDecl 0x131012a10 <col:2, col:8> col:8 used str 'char *'
    |-DeclStmt 0x131012bc8 <line:5:2, col:20>
    | |-VarDecl 0x131012aa8 <col:2, col:6> col:6 used bit 'int'
    | `-VarDecl 0x131012b28 <col:2, col:19> col:11 used str_p 'int' cinit
    |   `-IntegerLiteral 0x131012b90 <col:19> 'int' 0
    |-DeclStmt 0x131012c60 <line:6:2, col:7>
    | `-VarDecl 0x131012bf8 <col:2, col:6> col:6 used i 'int'
    |-DeclStmt 0x1328089b0 <line:7:2, col:36>
    | `-VarDecl 0x131012c90 <col:2, col:35> col:6 used max_bits 'int' cinit
    |   `-CallExpr 0x132808968 <col:17, col:35> 'int'
    |     |-ImplicitCastExpr 0x132808950 <col:17> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x1328088b8 <col:17> 'int ()' Function 0x132808800 'MIN' 'int ()'
    |     |-IntegerLiteral 0x1328088d8 <col:21> 'int' 64
    |     `-ImplicitCastExpr 0x132808998 <col:25> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x1328088f8 <col:25> 'const int' lvalue ParmVar 0x131012770 'no_of_bits' 'const int'
    |-BinaryOperator 0x132809348 <line:12:2, col:53> 'char *' '='
    | |-DeclRefExpr 0x132808be0 <col:2> 'char *' lvalue Var 0x131012a10 'str' 'char *'
    | `-CStyleCastExpr 0x132809320 <col:6, col:53> 'char *' <IntegralToPointer>
    |   `-CallExpr 0x132808eb0 <col:14, col:53> 'int'
    |     |-ImplicitCastExpr 0x132808e98 <col:14> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x132808ce0 <col:14> 'int ()' Function 0x132808c28 'wmem_alloc0' 'int ()'
    |     |-CallExpr 0x132808e18 <col:26, col:44> 'int'
    |     | `-ImplicitCastExpr 0x132808e00 <col:26> 'int (*)()' <FunctionToPointerDecay>
    |     |   `-DeclRefExpr 0x132808de0 <col:26> 'int ()' Function 0x132808d28 'wmem_packet_scope' 'int ()'
    |     `-BinaryOperator 0x132808e78 <col:47, col:51> 'int' '+'
    |       |-IntegerLiteral 0x132808e38 <col:47> 'int' 256
    |       `-IntegerLiteral 0x132808e58 <col:51> 'int' 64
    |-ForStmt 0x13280c920 <line:13:2, line:20:2>
    | |-BinaryOperator 0x1328093a8 <line:13:6, col:10> 'int' '='
    | | |-DeclRefExpr 0x132809368 <col:6> 'int' lvalue Var 0x131012aa8 'bit' 'int'
    | | `-IntegerLiteral 0x132809388 <col:10> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x132809500 <col:12, col:39> 'int' contains-errors '<'
    | | |-ImplicitCastExpr 0x1328094e8 <col:12> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1328093c8 <col:12> 'int' lvalue Var 0x131012aa8 'bit' 'int'
    | | `-ParenExpr 0x1328094c8 <col:16, col:39> 'int' contains-errors
    | |   `-CStyleCastExpr 0x1328094a0 <col:17, col:38> 'int' contains-errors <Dependent>
    | |     `-ParenExpr 0x132809480 <col:22, col:38> '<dependent type>' contains-errors
    | |       `-BinaryOperator 0x132809428 <col:23, col:34> '<dependent type>' contains-errors '&'
    | |         |-RecoveryExpr 0x1328093e8 <col:23> '<dependent type>' contains-errors lvalue
    | |         `-IntegerLiteral 0x132809408 <col:34> 'int' 7
    | |-UnaryOperator 0x132809540 <col:41, col:44> 'int' postfix '++'
    | | `-DeclRefExpr 0x132809520 <col:41> 'int' lvalue Var 0x131012aa8 'bit' 'int'
    | `-CompoundStmt 0x13280c8f8 <col:47, line:20:2>
    |   |-IfStmt 0x1328097b8 <line:14:3, line:17:3>
    |   | |-BinaryOperator 0x132809660 <line:14:6, col:20> 'int' '&&'
    |   | | |-ImplicitCastExpr 0x132809648 <col:6> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x132809558 <col:6> 'int' lvalue Var 0x131012aa8 'bit' 'int'
    |   | | `-ParenExpr 0x132809628 <col:11, col:20> 'int'
    |   | |   `-UnaryOperator 0x132809610 <col:12, col:19> 'int' prefix '!' cannot overflow
    |   | |     `-ParenExpr 0x1328095f0 <col:13, col:19> 'int'
    |   | |       `-BinaryOperator 0x1328095d0 <col:14, col:18> 'int' '%'
    |   | |         |-ImplicitCastExpr 0x1328095b8 <col:14> 'int' <LValueToRValue>
    |   | |         | `-DeclRefExpr 0x132809578 <col:14> 'int' lvalue Var 0x131012aa8 'bit' 'int'
    |   | |         `-IntegerLiteral 0x132809598 <col:18> 'int' 4
    |   | `-CompoundStmt 0x132809798 <col:22, line:17:3>
    |   |   |-BinaryOperator 0x132809740 <line:15:4, col:17> 'char' '='
    |   |   | |-ArraySubscriptExpr 0x1328096f0 <col:4, col:13> 'char' lvalue
    |   |   | | |-ImplicitCastExpr 0x1328096c0 <col:4> 'char *' <LValueToRValue>
    |   |   | | | `-DeclRefExpr 0x132809680 <col:4> 'char *' lvalue Var 0x131012a10 'str' 'char *'
    |   |   | | `-ImplicitCastExpr 0x1328096d8 <col:8> 'int' <LValueToRValue>
    |   |   | |   `-DeclRefExpr 0x1328096a0 <col:8> 'int' lvalue Var 0x131012b28 'str_p' 'int'
    |   |   | `-ImplicitCastExpr 0x132809728 <col:17> 'char' <IntegralCast>
    |   |   |   `-CharacterLiteral 0x132809710 <col:17> 'int' 32
    |   |   `-UnaryOperator 0x132809780 <line:16:4, col:9> 'int' postfix '++'
    |   |     `-DeclRefExpr 0x132809760 <col:4> 'int' lvalue Var 0x131012b28 'str_p' 'int'
    |   |-BinaryOperator 0x13280c8a0 <line:18:3, col:16> 'char' '='
    |   | |-ArraySubscriptExpr 0x13280c850 <col:3, col:12> 'char' lvalue
    |   | | |-ImplicitCastExpr 0x13280c820 <col:3> 'char *' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x1328097d8 <col:3> 'char *' lvalue Var 0x131012a10 'str' 'char *'
    |   | | `-ImplicitCastExpr 0x13280c838 <col:7> 'int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x13280c800 <col:7> 'int' lvalue Var 0x131012b28 'str_p' 'int'
    |   | `-ImplicitCastExpr 0x13280c888 <col:16> 'char' <IntegralCast>
    |   |   `-CharacterLiteral 0x13280c870 <col:16> 'int' 46
    |   `-UnaryOperator 0x13280c8e0 <line:19:3, col:8> 'int' postfix '++'
    |     `-DeclRefExpr 0x13280c8c0 <col:3> 'int' lvalue Var 0x131012b28 'str_p' 'int'
    |-ForStmt 0x13280d378 <line:23:2, line:41:2>
    | |-BinaryOperator 0x13280c998 <line:23:6, col:8> 'int' '='
    | | |-DeclRefExpr 0x13280c958 <col:6> 'int' lvalue Var 0x131012bf8 'i' 'int'
    | | `-IntegerLiteral 0x13280c978 <col:8> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x13280ca28 <col:10, col:12> 'int' '<'
    | | |-ImplicitCastExpr 0x13280c9f8 <col:10> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x13280c9b8 <col:10> 'int' lvalue Var 0x131012bf8 'i' 'int'
    | | `-ImplicitCastExpr 0x13280ca10 <col:12> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x13280c9d8 <col:12> 'int' lvalue Var 0x131012c90 'max_bits' 'int'
    | |-UnaryOperator 0x13280ca68 <col:21, col:22> 'int' postfix '++'
    | | `-DeclRefExpr 0x13280ca48 <col:21> 'int' lvalue Var 0x131012bf8 'i' 'int'
    | `-CompoundStmt 0x13280d348 <col:25, line:41:2>
    |   |-IfStmt 0x13280cce0 <line:24:3, line:27:3>
    |   | |-BinaryOperator 0x13280cb88 <line:24:6, col:20> 'int' '&&'
    |   | | |-ImplicitCastExpr 0x13280cb70 <col:6> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x13280ca80 <col:6> 'int' lvalue Var 0x131012aa8 'bit' 'int'
    |   | | `-ParenExpr 0x13280cb50 <col:11, col:20> 'int'
    |   | |   `-UnaryOperator 0x13280cb38 <col:12, col:19> 'int' prefix '!' cannot overflow
    |   | |     `-ParenExpr 0x13280cb18 <col:13, col:19> 'int'
    |   | |       `-BinaryOperator 0x13280caf8 <col:14, col:18> 'int' '%'
    |   | |         |-ImplicitCastExpr 0x13280cae0 <col:14> 'int' <LValueToRValue>
    |   | |         | `-DeclRefExpr 0x13280caa0 <col:14> 'int' lvalue Var 0x131012aa8 'bit' 'int'
    |   | |         `-IntegerLiteral 0x13280cac0 <col:18> 'int' 4
    |   | `-CompoundStmt 0x13280ccc0 <col:22, line:27:3>
    |   |   |-BinaryOperator 0x13280cc68 <line:25:4, col:17> 'char' '='
    |   |   | |-ArraySubscriptExpr 0x13280cc18 <col:4, col:13> 'char' lvalue
    |   |   | | |-ImplicitCastExpr 0x13280cbe8 <col:4> 'char *' <LValueToRValue>
    |   |   | | | `-DeclRefExpr 0x13280cba8 <col:4> 'char *' lvalue Var 0x131012a10 'str' 'char *'
    |   |   | | `-ImplicitCastExpr 0x13280cc00 <col:8> 'int' <LValueToRValue>
    |   |   | |   `-DeclRefExpr 0x13280cbc8 <col:8> 'int' lvalue Var 0x131012b28 'str_p' 'int'
    |   |   | `-ImplicitCastExpr 0x13280cc50 <col:17> 'char' <IntegralCast>
    |   |   |   `-CharacterLiteral 0x13280cc38 <col:17> 'int' 32
    |   |   `-UnaryOperator 0x13280cca8 <line:26:4, col:9> 'int' postfix '++'
    |   |     `-DeclRefExpr 0x13280cc88 <col:4> 'int' lvalue Var 0x131012b28 'str_p' 'int'
    |   |-IfStmt 0x13280cf60 <line:28:3, line:31:3>
    |   | |-BinaryOperator 0x13280ce08 <line:28:6, col:20> 'int' '&&'
    |   | | |-ImplicitCastExpr 0x13280cdf0 <col:6> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x13280cd00 <col:6> 'int' lvalue Var 0x131012aa8 'bit' 'int'
    |   | | `-ParenExpr 0x13280cdd0 <col:11, col:20> 'int'
    |   | |   `-UnaryOperator 0x13280cdb8 <col:12, col:19> 'int' prefix '!' cannot overflow
    |   | |     `-ParenExpr 0x13280cd98 <col:13, col:19> 'int'
    |   | |       `-BinaryOperator 0x13280cd78 <col:14, col:18> 'int' '%'
    |   | |         |-ImplicitCastExpr 0x13280cd60 <col:14> 'int' <LValueToRValue>
    |   | |         | `-DeclRefExpr 0x13280cd20 <col:14> 'int' lvalue Var 0x131012aa8 'bit' 'int'
    |   | |         `-IntegerLiteral 0x13280cd40 <col:18> 'int' 8
    |   | `-CompoundStmt 0x13280cf40 <col:22, line:31:3>
    |   |   |-BinaryOperator 0x13280cee8 <line:29:4, col:17> 'char' '='
    |   |   | |-ArraySubscriptExpr 0x13280ce98 <col:4, col:13> 'char' lvalue
    |   |   | | |-ImplicitCastExpr 0x13280ce68 <col:4> 'char *' <LValueToRValue>
    |   |   | | | `-DeclRefExpr 0x13280ce28 <col:4> 'char *' lvalue Var 0x131012a10 'str' 'char *'
    |   |   | | `-ImplicitCastExpr 0x13280ce80 <col:8> 'int' <LValueToRValue>
    |   |   | |   `-DeclRefExpr 0x13280ce48 <col:8> 'int' lvalue Var 0x131012b28 'str_p' 'int'
    |   |   | `-ImplicitCastExpr 0x13280ced0 <col:17> 'char' <IntegralCast>
    |   |   |   `-CharacterLiteral 0x13280ceb8 <col:17> 'int' 32
    |   |   `-UnaryOperator 0x13280cf28 <line:30:4, col:9> 'int' postfix '++'
    |   |     `-DeclRefExpr 0x13280cf08 <col:4> 'int' lvalue Var 0x131012b28 'str_p' 'int'
    |   |-UnaryOperator 0x13280cfa0 <line:32:3, col:6> 'int' postfix '++'
    |   | `-DeclRefExpr 0x13280cf80 <col:3> 'int' lvalue Var 0x131012aa8 'bit' 'int'
    |   `-IfStmt 0x13280d2c0 <line:33:3, line:39:3> has_else
    |     |-RecoveryExpr 0x13280d030 <line:33:6, col:24> '_Bool' contains-errors
    |     |-CompoundStmt 0x13280d168 <col:26, line:36:3>
    |     | |-BinaryOperator 0x13280d110 <line:34:4, col:17> 'char' '='
    |     | | |-ArraySubscriptExpr 0x13280d0c0 <col:4, col:13> 'char' lvalue
    |     | | | |-ImplicitCastExpr 0x13280d090 <col:4> 'char *' <LValueToRValue>
    |     | | | | `-DeclRefExpr 0x13280d050 <col:4> 'char *' lvalue Var 0x131012a10 'str' 'char *'
    |     | | | `-ImplicitCastExpr 0x13280d0a8 <col:8> 'int' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x13280d070 <col:8> 'int' lvalue Var 0x131012b28 'str_p' 'int'
    |     | | `-ImplicitCastExpr 0x13280d0f8 <col:17> 'char' <IntegralCast>
    |     | |   `-CharacterLiteral 0x13280d0e0 <col:17> 'int' 49
    |     | `-UnaryOperator 0x13280d150 <line:35:4, col:9> 'int' postfix '++'
    |     |   `-DeclRefExpr 0x13280d130 <col:4> 'int' lvalue Var 0x131012b28 'str_p' 'int'
    |     `-CompoundStmt 0x13280d2a0 <line:36:10, line:39:3>
    |       |-BinaryOperator 0x13280d248 <line:37:4, col:17> 'char' '='
    |       | |-ArraySubscriptExpr 0x13280d1f8 <col:4, col:13> 'char' lvalue
    |       | | |-ImplicitCastExpr 0x13280d1c8 <col:4> 'char *' <LValueToRValue>
    |       | | | `-DeclRefExpr 0x13280d188 <col:4> 'char *' lvalue Var 0x131012a10 'str' 'char *'
    |       | | `-ImplicitCastExpr 0x13280d1e0 <col:8> 'int' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x13280d1a8 <col:8> 'int' lvalue Var 0x131012b28 'str_p' 'int'
    |       | `-ImplicitCastExpr 0x13280d230 <col:17> 'char' <IntegralCast>
    |       |   `-CharacterLiteral 0x13280d218 <col:17> 'int' 48
    |       `-UnaryOperator 0x13280d288 <line:38:4, col:9> 'int' postfix '++'
    |         `-DeclRefExpr 0x13280d268 <col:4> 'int' lvalue Var 0x131012b28 'str_p' 'int'
    |-ForStmt 0x13280d828 <line:43:2, line:50:2>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-BinaryOperator 0x13280d408 <line:43:7, col:11> 'int' '%'
    | | |-ImplicitCastExpr 0x13280d3f0 <col:7> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x13280d3b0 <col:7> 'int' lvalue Var 0x131012aa8 'bit' 'int'
    | | `-IntegerLiteral 0x13280d3d0 <col:11> 'int' 8
    | |-UnaryOperator 0x13280d448 <col:13, col:16> 'int' postfix '++'
    | | `-DeclRefExpr 0x13280d428 <col:13> 'int' lvalue Var 0x131012aa8 'bit' 'int'
    | `-CompoundStmt 0x13280d800 <col:19, line:50:2>
    |   |-IfStmt 0x13280d6c0 <line:44:3, line:47:3>
    |   | |-BinaryOperator 0x13280d568 <line:44:6, col:20> 'int' '&&'
    |   | | |-ImplicitCastExpr 0x13280d550 <col:6> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x13280d460 <col:6> 'int' lvalue Var 0x131012aa8 'bit' 'int'
    |   | | `-ParenExpr 0x13280d530 <col:11, col:20> 'int'
    |   | |   `-UnaryOperator 0x13280d518 <col:12, col:19> 'int' prefix '!' cannot overflow
    |   | |     `-ParenExpr 0x13280d4f8 <col:13, col:19> 'int'
    |   | |       `-BinaryOperator 0x13280d4d8 <col:14, col:18> 'int' '%'
    |   | |         |-ImplicitCastExpr 0x13280d4c0 <col:14> 'int' <LValueToRValue>
    |   | |         | `-DeclRefExpr 0x13280d480 <col:14> 'int' lvalue Var 0x131012aa8 'bit' 'int'
    |   | |         `-IntegerLiteral 0x13280d4a0 <col:18> 'int' 4
    |   | `-CompoundStmt 0x13280d6a0 <col:22, line:47:3>
    |   |   |-BinaryOperator 0x13280d648 <line:45:4, col:17> 'char' '='
    |   |   | |-ArraySubscriptExpr 0x13280d5f8 <col:4, col:13> 'char' lvalue
    |   |   | | |-ImplicitCastExpr 0x13280d5c8 <col:4> 'char *' <LValueToRValue>
    |   |   | | | `-DeclRefExpr 0x13280d588 <col:4> 'char *' lvalue Var 0x131012a10 'str' 'char *'
    |   |   | | `-ImplicitCastExpr 0x13280d5e0 <col:8> 'int' <LValueToRValue>
    |   |   | |   `-DeclRefExpr 0x13280d5a8 <col:8> 'int' lvalue Var 0x131012b28 'str_p' 'int'
    |   |   | `-ImplicitCastExpr 0x13280d630 <col:17> 'char' <IntegralCast>
    |   |   |   `-CharacterLiteral 0x13280d618 <col:17> 'int' 32
    |   |   `-UnaryOperator 0x13280d688 <line:46:4, col:9> 'int' postfix '++'
    |   |     `-DeclRefExpr 0x13280d668 <col:4> 'int' lvalue Var 0x131012b28 'str_p' 'int'
    |   |-BinaryOperator 0x13280d7a0 <line:48:3, col:16> 'char' '='
    |   | |-ArraySubscriptExpr 0x13280d750 <col:3, col:12> 'char' lvalue
    |   | | |-ImplicitCastExpr 0x13280d720 <col:3> 'char *' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x13280d6e0 <col:3> 'char *' lvalue Var 0x131012a10 'str' 'char *'
    |   | | `-ImplicitCastExpr 0x13280d738 <col:7> 'int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x13280d700 <col:7> 'int' lvalue Var 0x131012b28 'str_p' 'int'
    |   | `-ImplicitCastExpr 0x13280d788 <col:16> 'char' <IntegralCast>
    |   |   `-CharacterLiteral 0x13280d770 <col:16> 'int' 46
    |   `-UnaryOperator 0x13280d7e0 <line:49:3, col:8> 'int' postfix '++'
    |     `-DeclRefExpr 0x13280d7c0 <col:3> 'int' lvalue Var 0x131012b28 'str_p' 'int'
    `-ReturnStmt 0x13280d8b0 <line:51:2, col:9>
      `-ImplicitCastExpr 0x13280d898 <col:9> 'int' <PointerToIntegral>
        `-ImplicitCastExpr 0x13280d880 <col:9> 'char *' <LValueToRValue>
          `-DeclRefExpr 0x13280d860 <col:9> 'char *' lvalue Var 0x131012a10 'str' 'char *'
