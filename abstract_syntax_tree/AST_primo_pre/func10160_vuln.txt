`-FunctionDecl 0x15700dec0  line:1:13 save_key_to 'void (const char *, const char *, const char *)' static
  |-ParmVarDecl 0x15700dcd8 <col:25, col:37> col:37 used algo 'const char *'
  |-ParmVarDecl 0x15700dd58 <col:43, col:55> col:55 used name 'const char *'
  |-ParmVarDecl 0x15700ddd8 <col:61, col:73> col:73 used keydata 'const char *'
  `-CompoundStmt 0x15581ab58 <line:2:1, line:12:1>
    |-DeclStmt 0x15700e048 <line:3:2, col:19>
    | `-VarDecl 0x15700dfe0 <col:2, col:14> col:14 used error 'const char *'
    |-DeclStmt 0x155819c40 <line:4:2, line:5:36>
    | |-RecordDecl 0x15700e060 <line:4:2, col:9> col:9 struct dict_transaction_context
    | `-VarDecl 0x15700e1c8 <col:2, line:5:35> line:4:35 used ctx 'struct dict_transaction_context *' cinit
    |   `-CallExpr 0x155819c00 <line:5:3, col:35> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x15700e360 <col:3> 'int ()' Function 0x15700e2a8 'dict_transaction_begin' 'int ()'
    |     `-RecoveryExpr 0x15700e3c0 <col:26> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x15581a260 <line:6:2, col:25> 'const char *' '='
    | |-DeclRefExpr 0x155819c58 <col:2> 'const char *' lvalue ParmVar 0x15700dcd8 'algo' 'const char *'
    | `-ImplicitCastExpr 0x155819e28 <col:9, col:25> 'const char *' <IntegralToPointer>
    |   `-CallExpr 0x155819de8 <col:9, col:25> 'int'
    |     |-ImplicitCastExpr 0x155819dd0 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x155819d58 <col:9> 'int ()' Function 0x155819ca0 't_str_ucase' 'int ()'
    |     `-ImplicitCastExpr 0x155819e10 <col:21> 'const char *' <LValueToRValue>
    |       `-DeclRefExpr 0x155819d78 <col:21> 'const char *' lvalue ParmVar 0x15700dcd8 'algo' 'const char *'
    |-CallExpr 0x15581a670 <line:7:2, line:9:11> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x15581a360 <line:7:2> 'int ()' Function 0x15581a2a8 'dict_set' 'int ()'
    | |-DeclRefExpr 0x15581a380 <col:11> 'struct dict_transaction_context *' contains-errors lvalue Var 0x15700e1c8 'ctx' 'struct dict_transaction_context *'
    | |-CallExpr 0x15581a630 <col:16, line:8:17> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x15581a480 <line:7:16> 'int ()' Function 0x15581a3c8 't_strconcat' 'int ()'
    | | |-RecoveryExpr 0x15581a5f0 <col:28> '<dependent type>' contains-errors lvalue
    | | |-StringLiteral 0x15581a500 <col:46> 'char[4]' lvalue "STR"
    | | |-DeclRefExpr 0x15581a520 <line:8:7> 'const char *' lvalue ParmVar 0x15700dd58 'name' 'const char *'
    | | `-RecoveryExpr 0x15581a610 <col:13> '<dependent type>' contains-errors lvalue
    | `-DeclRefExpr 0x15581a598 <line:9:4> 'const char *' lvalue ParmVar 0x15700ddd8 'keydata' 'const char *'
    `-IfStmt 0x15581ab38 <line:10:2, line:11:29>
      |-BinaryOperator 0x15581a920 <line:10:6, col:46> 'int' contains-errors '<'
      | |-CallExpr 0x15581a8d0 <col:6, col:42> 'int' contains-errors
      | | |-ImplicitCastExpr 0x15581a8b8 <col:6> 'int (*)()' <FunctionToPointerDecay>
      | | | `-DeclRefExpr 0x15581a788 <col:6> 'int ()' Function 0x15581a6d0 'dict_transaction_commit' 'int ()'
      | | |-UnaryOperator 0x15581a830 <col:30, col:31> 'struct dict_transaction_context **' contains-errors prefix '&' cannot overflow
      | | | `-DeclRefExpr 0x15581a7a8 <col:31> 'struct dict_transaction_context *' contains-errors lvalue Var 0x15700e1c8 'ctx' 'struct dict_transaction_context *'
      | | `-UnaryOperator 0x15581a8a0 <col:36, col:37> 'const char **' prefix '&' cannot overflow
      | |   `-DeclRefExpr 0x15581a848 <col:37> 'const char *' lvalue Var 0x15700dfe0 'error' 'const char *'
      | `-IntegerLiteral 0x15581a900 <col:46> 'int' 0
      `-CallExpr 0x15581aab8 <line:11:3, col:29> 'int'
        |-ImplicitCastExpr 0x15581aaa0 <col:3> 'int (*)()' <FunctionToPointerDecay>
        | `-DeclRefExpr 0x15581aa20 <col:3> 'int ()' Function 0x15581a968 'i_error' 'int ()'
        |-ImplicitCastExpr 0x15581aaf0 <col:11> 'char *' <ArrayToPointerDecay>
        | `-StringLiteral 0x15581aa40 <col:11> 'char[4]' lvalue "STR"
        |-ImplicitCastExpr 0x15581ab08 <col:18> 'const char *' <LValueToRValue>
        | `-DeclRefExpr 0x15581aa60 <col:18> 'const char *' lvalue ParmVar 0x15700dd58 'name' 'const char *'
        `-ImplicitCastExpr 0x15581ab20 <col:24> 'const char *' <LValueToRValue>
          `-DeclRefExpr 0x15581aa80 <col:24> 'const char *' lvalue Var 0x15700dfe0 'error' 'const char *'
