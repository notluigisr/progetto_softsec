`-FunctionDecl 0x13c00dda0  line:1:13 show_migration_types 'void (unsigned char)' static
  |-ParmVarDecl 0x13c00dcd8 <col:34, col:48> col:48 used type 'unsigned char'
  `-CompoundStmt 0x13c027318 <line:2:1, line:26:1>
    |-DeclStmt 0x13c00e120 <line:3:2, line:14:3>
    | `-VarDecl 0x13c00ded8 <line:3:2, col:20> col:20 invalid types 'const char' static
    |-DeclStmt 0x13c00e208 <line:15:2, col:29>
    | `-VarDecl 0x13c00e1a0 <col:2, col:7> col:7 invalid tmp 'char'
    |-DeclStmt 0x13c00e2c0 <line:16:2, col:15>
    | `-VarDecl 0x13c00e238 <col:2, col:12> col:8 used p 'char *' cinit
    |   `-RecoveryExpr 0x13c00e2a0 <col:12> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x13c00e358 <line:17:2, col:7>
    | `-VarDecl 0x13c00e2f0 <col:2, col:6> col:6 used i 'int'
    |-ForStmt 0x13c0270f0 <line:19:2, line:22:2>
    | |-BinaryOperator 0x13c00e3b0 <line:19:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x13c00e370 <col:7> 'int' lvalue Var 0x13c00e2f0 'i' 'int'
    | | `-IntegerLiteral 0x13c00e390 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x13c026e58 <col:14, col:18> 'int' contains-errors '<'
    | | |-DeclRefExpr 0x13c00e3d0 <col:14> 'int' lvalue Var 0x13c00e2f0 'i' 'int'
    | | `-RecoveryExpr 0x13c026e38 <col:18> '<dependent type>' contains-errors lvalue
    | |-UnaryOperator 0x13c026e98 <col:33, col:34> 'int' postfix '++'
    | | `-DeclRefExpr 0x13c026e78 <col:33> 'int' lvalue Var 0x13c00e2f0 'i' 'int'
    | `-CompoundStmt 0x13c0270d8 <col:38, line:22:2>
    |   `-IfStmt 0x13c0270b8 <line:20:3, line:21:18>
    |     |-BinaryOperator 0x13c026f98 <line:20:7, col:21> 'int' '&'
    |     | |-ImplicitCastExpr 0x13c026f80 <col:7> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x13c026f68 <col:7> 'unsigned char' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x13c026eb0 <col:7> 'unsigned char' lvalue ParmVar 0x13c00dcd8 'type' 'unsigned char'
    |     | `-ParenExpr 0x13c026f48 <col:14, col:21> 'int'
    |     |   `-BinaryOperator 0x13c026f28 <col:15, col:20> 'int' '<<'
    |     |     |-IntegerLiteral 0x13c026ed0 <col:15> 'int' 1
    |     |     `-ImplicitCastExpr 0x13c026f10 <col:20> 'int' <LValueToRValue>
    |     |       `-DeclRefExpr 0x13c026ef0 <col:20> 'int' lvalue Var 0x13c00e2f0 'i' 'int'
    |     `-BinaryOperator 0x13c027098 <line:21:4, col:18> 'char' contains-errors '='
    |       |-UnaryOperator 0x13c026ff0 <col:4, col:6> 'char' contains-errors lvalue prefix '*' cannot overflow
    |       | `-UnaryOperator 0x13c026fd8 <col:5, col:6> 'char *' contains-errors postfix '++'
    |       |   `-DeclRefExpr 0x13c026fb8 <col:5> 'char *' contains-errors lvalue Var 0x13c00e238 'p' 'char *'
    |       `-ArraySubscriptExpr 0x13c027078 <col:11, col:18> '<dependent type>' contains-errors lvalue
    |         |-ImplicitCastExpr 0x13c027048 <col:11> '<dependent type>' contains-errors <LValueToRValue>
    |         | `-RecoveryExpr 0x13c027008 <col:11> '<dependent type>' contains-errors lvalue
    |         `-ImplicitCastExpr 0x13c027060 <col:17> 'int' <LValueToRValue>
    |           `-DeclRefExpr 0x13c027028 <col:17> 'int' lvalue Var 0x13c00e2f0 'i' 'int'
    `-BinaryOperator 0x13c0271a8 <line:24:2, col:7> 'char' contains-errors '='
      |-UnaryOperator 0x13c027160 <col:2, col:3> 'char' contains-errors lvalue prefix '*' cannot overflow
      | `-ImplicitCastExpr 0x13c027148 <col:3> 'char *' contains-errors <LValueToRValue>
      |   `-DeclRefExpr 0x13c027128 <col:3> 'char *' contains-errors lvalue Var 0x13c00e238 'p' 'char *'
      `-ImplicitCastExpr 0x13c027190 <col:7> 'char' <IntegralCast>
        `-CharacterLiteral 0x13c027178 <col:7> 'int' 0
