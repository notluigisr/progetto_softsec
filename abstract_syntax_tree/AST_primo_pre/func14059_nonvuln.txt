`-FunctionDecl 0x126827598  line:1:1 invalid fat_short2uni 'int (struct nls_table *, unsigned char *, int, int *)'
  |-ParmVarDecl 0x12680e248 <col:15, col:33> col:33 used t 'struct nls_table *'
  |-ParmVarDecl 0x12680e2f8 <col:36, col:51> col:51 used c 'unsigned char *'
  |-ParmVarDecl 0x12680e378 <col:54, col:58> col:58 used clen 'int'
  |-ParmVarDecl 0x126827448 <col:64, col:73> col:73 invalid uni 'int *'
  `-CompoundStmt 0x126827a20 <line:2:1, line:11:1>
    |-DeclStmt 0x1268276e0 <line:3:2, col:13>
    | `-VarDecl 0x126827678 <col:2, col:6> col:6 used charlen 'int'
    |-BinaryOperator 0x126827810 <line:5:2, col:36> 'int' contains-errors '='
    | |-DeclRefExpr 0x1268276f8 <col:2> 'int' lvalue Var 0x126827678 'charlen' 'int'
    | `-CallExpr 0x1268277d8 <col:12, col:36> '<dependent type>' contains-errors
    |   |-RecoveryExpr 0x126827750 <col:12, col:15> '<dependent type>' contains-errors lvalue
    |   | `-DeclRefExpr 0x126827718 <col:12> 'struct nls_table *' lvalue ParmVar 0x12680e248 't' 'struct nls_table *'
    |   |-DeclRefExpr 0x126827778 <col:24> 'unsigned char *' lvalue ParmVar 0x12680e2f8 'c' 'unsigned char *'
    |   |-DeclRefExpr 0x126827798 <col:27> 'int' lvalue ParmVar 0x12680e378 'clen' 'int'
    |   `-RecoveryExpr 0x1268277b8 <col:33> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x1268279b8 <line:6:2, line:9:2>
    | |-BinaryOperator 0x126827888 <line:6:6, col:16> 'int' '<'
    | | |-ImplicitCastExpr 0x126827870 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x126827830 <col:6> 'int' lvalue Var 0x126827678 'charlen' 'int'
    | | `-IntegerLiteral 0x126827850 <col:16> 'int' 0
    | `-CompoundStmt 0x126827998 <col:19, line:9:2>
    |   |-BinaryOperator 0x126827918 <line:7:3, col:10> '<dependent type>' contains-errors '='
    |   | |-UnaryOperator 0x1268278e0 <col:3, col:4> '<dependent type>' contains-errors prefix '*' cannot overflow
    |   | | `-ImplicitCastExpr 0x1268278c8 <col:4> '<dependent type>' contains-errors <LValueToRValue>
    |   | |   `-RecoveryExpr 0x1268278a8 <col:4> '<dependent type>' contains-errors lvalue
    |   | `-IntegerLiteral 0x1268278f8 <col:10> 'int' 63
    |   `-BinaryOperator 0x126827978 <line:8:3, col:13> 'int' '='
    |     |-DeclRefExpr 0x126827938 <col:3> 'int' lvalue Var 0x126827678 'charlen' 'int'
    |     `-IntegerLiteral 0x126827958 <col:13> 'int' 1
    `-ReturnStmt 0x126827a10 <line:10:2, col:9>
      `-ImplicitCastExpr 0x1268279f8 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x1268279d8 <col:9> 'int' lvalue Var 0x126827678 'charlen' 'int'
