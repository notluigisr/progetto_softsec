`-FunctionDecl 0x15701a438  line:1:19 calc_idx 'int (int, int)' static inline
  |-ParmVarDecl 0x15701a2d8 <col:28, col:32> col:32 used idx 'int'
  |-ParmVarDecl 0x15701a358 <col:37, col:41> col:41 used rx_dlc 'int'
  `-CompoundStmt 0x15701a6c8 <line:2:1, line:7:1>
    `-IfStmt 0x15701a698 <line:3:2, line:6:10> has_else
      |-BinaryOperator 0x15701a590 <line:3:6, col:12> 'int' '<'
      | |-ImplicitCastExpr 0x15701a578 <col:6> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x15701a538 <col:6> 'int' lvalue ParmVar 0x15701a2d8 'idx' 'int'
      | `-IntegerLiteral 0x15701a558 <col:12> 'int' 0
      |-ReturnStmt 0x15701a640 <line:4:3, col:19>
      | `-BinaryOperator 0x15701a620 <col:10, col:19> 'int' '+'
      |   |-ImplicitCastExpr 0x15701a5f0 <col:10> 'int' <LValueToRValue>
      |   | `-DeclRefExpr 0x15701a5b0 <col:10> 'int' lvalue ParmVar 0x15701a358 'rx_dlc' 'int'
      |   `-ImplicitCastExpr 0x15701a608 <col:19> 'int' <LValueToRValue>
      |     `-DeclRefExpr 0x15701a5d0 <col:19> 'int' lvalue ParmVar 0x15701a2d8 'idx' 'int'
      `-ReturnStmt 0x15701a688 <line:6:3, col:10>
        `-ImplicitCastExpr 0x15701a670 <col:10> 'int' <LValueToRValue>
          `-DeclRefExpr 0x15701a650 <col:10> 'int' lvalue ParmVar 0x15701a2d8 'idx' 'int'
