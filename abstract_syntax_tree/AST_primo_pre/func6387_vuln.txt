`-FunctionDecl 0x15a9283d0  line:1:13 invalid controloptions 'void (int *, int, const char **, int *)' static
  |-ParmVarDecl 0x15a928128 <col:29, col:40> col:40 invalid L 'int *'
  |-ParmVarDecl 0x15a9281a8 <col:43, col:47> col:47 used opt 'int'
  |-ParmVarDecl 0x15a928258 <col:52, col:65> col:65 used fmt 'const char **'
  |-ParmVarDecl 0x15a9282d8 <line:2:29, col:37> col:37 referenced invalid h 'int *'
  `-CompoundStmt 0x15a942488 <col:40, line:19:1>
    `-SwitchStmt 0x15a9284d0 <line:3:3, line:18:3>
      |-ImplicitCastExpr 0x15a9284b8 <line:3:11> 'int' <LValueToRValue>
      | `-DeclRefExpr 0x15a928498 <col:11> 'int' lvalue ParmVar 0x15a9281a8 'opt' 'int'
      `-CompoundStmt 0x15a942440 <col:16, line:18:3>
        |-CaseStmt 0x15a928528 <line:4:5, col:16>
        | |-ConstantExpr 0x15a928510 <col:11> 'int'
        | | `-CharacterLiteral 0x15a9284f8 <col:11> 'int' 32
        | `-ReturnStmt 0x15a928550 <col:16>
        |-CaseStmt 0x15a928590 <line:5:5, col:27>
        | |-ConstantExpr 0x15a928578 <col:10> 'int'
        | | `-CharacterLiteral 0x15a928560 <col:10> 'int' 62
        | `-BinaryOperator 0x15a9286a0 <col:15, col:27> '<dependent type>' contains-errors '='
        |   |-CXXDependentScopeMemberExpr 0x15a928600 <col:15, col:18> '<dependent type>' contains-errors lvalue ->endian
        |   | `-RecoveryExpr 0x15a9285d8 <col:15> '<dependent type>' contains-errors lvalue
        |   |   `-DeclRefExpr 0x15a9285b8 <col:15> 'int *' lvalue ParmVar 0x15a9282d8 'h' 'int *'
        |   `-RecoveryExpr 0x15a928680 <col:27> '<dependent type>' contains-errors lvalue
        |-ReturnStmt 0x15a9286c0 <col:32>
        |-CaseStmt 0x15a928700 <line:6:5, col:27>
        | |-ConstantExpr 0x15a9286e8 <col:10> 'int'
        | | `-CharacterLiteral 0x15a9286d0 <col:10> 'int' 60
        | `-BinaryOperator 0x15a941820 <col:15, col:27> '<dependent type>' contains-errors '='
        |   |-CXXDependentScopeMemberExpr 0x15a928770 <col:15, col:18> '<dependent type>' contains-errors lvalue ->endian
        |   | `-RecoveryExpr 0x15a928748 <col:15> '<dependent type>' contains-errors lvalue
        |   |   `-DeclRefExpr 0x15a928728 <col:15> 'int *' lvalue ParmVar 0x15a9282d8 'h' 'int *'
        |   `-RecoveryExpr 0x15a941800 <col:27> '<dependent type>' contains-errors lvalue
        |-ReturnStmt 0x15a941840 <col:35>
        |-CaseStmt 0x15a941880 <line:7:5, line:13:5>
        | |-ConstantExpr 0x15a941868 <line:7:10> 'int'
        | | `-CharacterLiteral 0x15a941850 <col:10> 'int' 33
        | `-CompoundStmt 0x15a942008 <col:15, line:13:5>
        |   |-DeclStmt 0x15a941b58 <line:8:7, col:36>
        |   | `-VarDecl 0x15a9418c0 <col:7, col:35> col:11 used a 'int' cinit
        |   |   `-CallExpr 0x15a941b28 <col:15, col:35> '<dependent type>' contains-errors
        |   |     |-DeclRefExpr 0x15a941a80 <col:15> 'int ()' Function 0x15a9419c8 'getnum' 'int ()'
        |   |     |-DeclRefExpr 0x15a941aa0 <col:22> 'const char **' lvalue ParmVar 0x15a928258 'fmt' 'const char **'
        |   |     `-RecoveryExpr 0x15a941b08 <col:27> '<dependent type>' contains-errors lvalue
        |   |-IfStmt 0x15a941f08 <line:9:7, line:10:31>
        |   | |-UnaryOperator 0x15a941d18 <line:9:11, col:18> 'int' contains-errors prefix '!' cannot overflow
        |   | | `-CallExpr 0x15a941cd8 <col:12, col:18> 'int' contains-errors
        |   | |   |-ImplicitCastExpr 0x15a941cc0 <col:12> 'int (*)()' <FunctionToPointerDecay>
        |   | |   | `-DeclRefExpr 0x15a941c50 <col:12> 'int ()' Function 0x15a941b98 'isp2' 'int ()'
        |   | |   `-ImplicitCastExpr 0x15a941d00 <col:17> 'int' contains-errors <LValueToRValue>
        |   | |     `-DeclRefExpr 0x15a941c70 <col:17> 'int' contains-errors lvalue Var 0x15a9418c0 'a' 'int'
        |   | `-CallExpr 0x15a941ed0 <line:10:9, col:31> '<dependent type>' contains-errors
        |   |   |-DeclRefExpr 0x15a941e10 <col:9> 'int ()' Function 0x15a941d58 'luaL_error' 'int ()'
        |   |   |-RecoveryExpr 0x15a941e30 <col:20> '<dependent type>' contains-errors lvalue
        |   |   |-StringLiteral 0x15a941e90 <col:23> 'char[4]' lvalue "STR"
        |   |   `-DeclRefExpr 0x15a941eb0 <col:30> 'int' contains-errors lvalue Var 0x15a9418c0 'a' 'int'
        |   |-BinaryOperator 0x15a941fd8 <line:11:7, col:18> '<dependent type>' contains-errors '='
        |   | |-CXXDependentScopeMemberExpr 0x15a941f70 <col:7, col:10> '<dependent type>' contains-errors lvalue ->align
        |   | | `-RecoveryExpr 0x15a941f48 <col:7> '<dependent type>' contains-errors lvalue
        |   | |   `-DeclRefExpr 0x15a941f28 <col:7> 'int *' lvalue ParmVar 0x15a9282d8 'h' 'int *'
        |   | `-DeclRefExpr 0x15a941fb8 <col:18> 'int' contains-errors lvalue Var 0x15a9418c0 'a' 'int'
        |   `-ReturnStmt 0x15a941ff8 <line:12:7>
        `-DefaultStmt 0x15a942420 <line:14:5, line:17:5>
          `-CompoundStmt 0x15a942400 <line:14:14, line:17:5>
            |-DeclStmt 0x15a942250 <line:15:7, col:55>
            | `-VarDecl 0x15a942050 <col:7, col:54> col:19 used msg 'const char *' cinit
            |   `-CallExpr 0x15a942218 <col:25, col:54> '<dependent type>' contains-errors
            |     |-DeclRefExpr 0x15a942198 <col:25> 'int ()' Function 0x15a9420e0 'lua_pushfstring' 'int ()'
            |     |-RecoveryExpr 0x15a9421b8 <col:41> '<dependent type>' contains-errors lvalue
            |     |-StringLiteral 0x15a9421d8 <col:44> 'char[4]' lvalue "STR"
            |     `-DeclRefExpr 0x15a9421f8 <col:51> 'int' lvalue ParmVar 0x15a9281a8 'opt' 'int'
            `-CallExpr 0x15a9423c8 <line:16:7, col:30> '<dependent type>' contains-errors
              |-DeclRefExpr 0x15a942348 <col:7> 'int ()' Function 0x15a942290 'luaL_argerror' 'int ()'
              |-RecoveryExpr 0x15a942368 <col:21> '<dependent type>' contains-errors lvalue
              |-IntegerLiteral 0x15a942388 <col:24> 'int' 1
              `-DeclRefExpr 0x15a9423a8 <col:27> 'const char *' contains-errors lvalue Var 0x15a942050 'msg' 'const char *'
