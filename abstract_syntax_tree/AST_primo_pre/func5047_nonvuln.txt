`-FunctionDecl 0x11c9281a8  line:1:1 get_viminfo_parameter 'int (int)'
  |-ParmVarDecl 0x11c9280d8 <col:23, col:27> col:27 used type 'int'
  `-CompoundStmt 0x11c941128 <line:2:1, line:9:1>
    |-DeclStmt 0x11c928338 <line:3:5, col:15>
    | `-VarDecl 0x11c9282d0 <col:5, col:14> col:14 used p 'char *'
    |-BinaryOperator 0x11c940ba0 <line:5:5, col:36> 'char *' '='
    | |-DeclRefExpr 0x11c928350 <col:5> 'char *' lvalue Var 0x11c9282d0 'p' 'char *'
    | `-ImplicitCastExpr 0x11c928548 <col:9, col:36> 'char *' <IntegralToPointer>
    |   `-CallExpr 0x11c928508 <col:9, col:36> 'int'
    |     |-ImplicitCastExpr 0x11c9284f0 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x11c928480 <col:9> 'int ()' Function 0x11c9283c8 'find_viminfo_parameter' 'int ()'
    |     `-ImplicitCastExpr 0x11c928530 <col:32> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x11c9284a0 <col:32> 'int' lvalue ParmVar 0x11c9280d8 'type' 'int'
    |-IfStmt 0x11c9410c0 <line:6:5, line:7:23>
    | |-BinaryOperator 0x11c940ed8 <line:6:9, col:36> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x11c940e18 <col:9, col:14> 'int' contains-errors '!='
    | | | |-DeclRefExpr 0x11c940bc0 <col:9> 'char *' lvalue Var 0x11c9282d0 'p' 'char *'
    | | | `-RecoveryExpr 0x11c940df8 <col:14> '<dependent type>' contains-errors lvalue
    | | `-CallExpr 0x11c940e80 <col:22, col:36> 'int'
    | |   |-ImplicitCastExpr 0x11c940e68 <col:22> 'int (*)()' <FunctionToPointerDecay>
    | |   | `-DeclRefExpr 0x11c940cf8 <col:22> 'int ()' Function 0x11c940c40 'VIM_ISDIGIT' 'int ()'
    | |   `-ImplicitCastExpr 0x11c940ec0 <col:34, col:35> 'int' <IntegralCast>
    | |     `-ImplicitCastExpr 0x11c940ea8 <col:34, col:35> 'char' <LValueToRValue>
    | |       `-UnaryOperator 0x11c940e50 <col:34, col:35> 'char' lvalue prefix '*' cannot overflow
    | |         `-ImplicitCastExpr 0x11c940e38 <col:35> 'char *' <LValueToRValue>
    | |           `-DeclRefExpr 0x11c940d18 <col:35> 'char *' lvalue Var 0x11c9282d0 'p' 'char *'
    | `-ReturnStmt 0x11c9410b0 <line:7:2, col:23>
    |   `-CallExpr 0x11c941088 <col:9, col:23> 'int'
    |     |-ImplicitCastExpr 0x11c941070 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x11c940fd8 <col:9> 'int ()' Function 0x11c940f20 'atoi' 'int ()'
    |     `-CStyleCastExpr 0x11c941048 <col:14, col:22> 'char *' <NoOp>
    |       `-ImplicitCastExpr 0x11c941030 <col:22> 'char *' <LValueToRValue> part_of_explicit_cast
    |         `-DeclRefExpr 0x11c940ff8 <col:22> 'char *' lvalue Var 0x11c9282d0 'p' 'char *'
    `-ReturnStmt 0x11c941118 <line:8:5, col:13>
      `-UnaryOperator 0x11c941100 <col:12, col:13> 'int' prefix '-'
        `-IntegerLiteral 0x11c9410e0 <col:13> 'int' 1
