`-FunctionDecl 0x14400e438  line:1:1 SPL_METHOD 'int (int, int)'
  |-ParmVarDecl 0x14400e358 <col:12> col:12 SplDoublyLinkedList 'int'
  |-ParmVarDecl 0x14400e2d8 <col:33> col:33 setIteratorMode 'int'
  `-CompoundStmt 0x14482e6a8 <line:2:1, line:21:1>
    |-IfStmt 0x14482e068 <line:6:2, line:8:2>
    | |-BinaryOperator 0x14482e020 <line:6:6, col:63> 'int' contains-errors '=='
    | | |-CallExpr 0x14400e9b8 <col:6, col:58> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x14400e680 <col:6> 'int ()' Function 0x14400e5c8 'zend_parse_parameters' 'int ()'
    | | | |-CallExpr 0x14400e960 <col:28, col:42> 'int'
    | | | | `-ImplicitCastExpr 0x14400e948 <col:28> 'int (*)()' <FunctionToPointerDecay>
    | | | |   `-DeclRefExpr 0x14400e780 <col:28> 'int ()' Function 0x14400e6c8 'ZEND_NUM_ARGS' 'int ()'
    | | | |-StringLiteral 0x14400e850 <col:45> 'char[4]' lvalue "STR"
    | | | `-UnaryOperator 0x14400e9a0 <col:52, col:53> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | |   `-RecoveryExpr 0x14400e980 <col:53> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x14482e000 <col:63> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x14482e050 <col:72, line:8:2>
    |   `-ReturnStmt 0x14482e040 <line:7:3>
    `-IfStmt 0x14482e588 <line:12:2, line:16:2>
      |-RecoveryExpr 0x14482e400 <line:12:6, line:13:73> '_Bool' contains-errors
      `-CompoundStmt 0x14482e570 <col:76, line:16:2>
        `-ReturnStmt 0x14482e560 <line:15:3>
