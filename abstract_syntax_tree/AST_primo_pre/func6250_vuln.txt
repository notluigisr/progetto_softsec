`-FunctionDecl 0x15100e100  line:1:20 ModulateHSB 'void (const double, const double, const double, double *, double *, double *)' static inline
  |-ParmVarDecl 0x15100dcd8 <col:32, col:45> col:45 used percent_hue 'const double'
  |-ParmVarDecl 0x15100dd58 <line:2:3, col:16> col:16 used percent_saturation 'const double'
  |-ParmVarDecl 0x15100ddd8 <col:35, col:48> col:48 used percent_brightness 'const double'
  |-ParmVarDecl 0x15100de88 <col:67, col:75> col:75 used red 'double *'
  |-ParmVarDecl 0x15100df08 <line:3:3, col:11> col:11 used green 'double *'
  |-ParmVarDecl 0x15100df88 <col:17, col:25> col:25 used blue 'double *'
  `-CompoundStmt 0x151027f70 <line:4:1, line:20:1>
    |-DeclStmt 0x15100e3c0 <line:5:3, line:8:15>
    | |-VarDecl 0x15100e238 <line:5:3, line:6:5> col:5 used brightness 'double'
    | |-VarDecl 0x15100e2b8 <line:5:3, line:7:5> col:5 used hue 'double'
    | `-VarDecl 0x15100e338 <line:5:3, line:8:5> col:5 used saturation 'double'
    |-CallExpr 0x151027718 <line:11:3, col:65> 'int'
    | |-ImplicitCastExpr 0x151027700 <col:3> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x151027510 <col:3> 'int ()' Function 0x151027458 'ConvertRGBToHSB' 'int ()'
    | |-ImplicitCastExpr 0x151027768 <col:19, col:20> 'double' <LValueToRValue>
    | | `-UnaryOperator 0x151027568 <col:19, col:20> 'double' lvalue prefix '*' cannot overflow
    | |   `-ImplicitCastExpr 0x151027550 <col:20> 'double *' <LValueToRValue>
    | |     `-DeclRefExpr 0x151027530 <col:20> 'double *' lvalue ParmVar 0x15100de88 'red' 'double *'
    | |-ImplicitCastExpr 0x151027780 <col:24, col:25> 'double' <LValueToRValue>
    | | `-UnaryOperator 0x1510275b8 <col:24, col:25> 'double' lvalue prefix '*' cannot overflow
    | |   `-ImplicitCastExpr 0x1510275a0 <col:25> 'double *' <LValueToRValue>
    | |     `-DeclRefExpr 0x151027580 <col:25> 'double *' lvalue ParmVar 0x15100df08 'green' 'double *'
    | |-ImplicitCastExpr 0x151027798 <col:31, col:32> 'double' <LValueToRValue>
    | | `-UnaryOperator 0x151027608 <col:31, col:32> 'double' lvalue prefix '*' cannot overflow
    | |   `-ImplicitCastExpr 0x1510275f0 <col:32> 'double *' <LValueToRValue>
    | |     `-DeclRefExpr 0x1510275d0 <col:32> 'double *' lvalue ParmVar 0x15100df88 'blue' 'double *'
    | |-UnaryOperator 0x151027640 <col:37, col:38> 'double *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x151027620 <col:38> 'double' lvalue Var 0x15100e2b8 'hue' 'double'
    | |-UnaryOperator 0x151027678 <col:42, col:43> 'double *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x151027658 <col:43> 'double' lvalue Var 0x15100e338 'saturation' 'double'
    | `-UnaryOperator 0x1510276b0 <col:54, col:55> 'double *' prefix '&' cannot overflow
    |   `-DeclRefExpr 0x151027690 <col:55> 'double' lvalue Var 0x15100e238 'brightness' 'double'
    |-CompoundAssignOperator 0x1510278e8 <line:12:3, col:33> 'double' '+=' ComputeLHSTy='double' ComputeResultTy='double'
    | |-DeclRefExpr 0x1510277b0 <col:3> 'double' lvalue Var 0x15100e2b8 'hue' 'double'
    | `-BinaryOperator 0x1510278c8 <col:8, col:33> 'double' '*'
    |   |-FloatingLiteral 0x1510277d0 <col:8> 'double' 5.000000e-01
    |   `-ParenExpr 0x1510278a8 <col:12, col:33> 'double'
    |     `-BinaryOperator 0x151027888 <col:13, col:30> 'double' '-'
    |       |-BinaryOperator 0x151027848 <col:13, col:18> 'double' '*'
    |       | |-FloatingLiteral 0x1510277f0 <col:13> 'double' 1.000000e-02
    |       | `-ImplicitCastExpr 0x151027830 <col:18> 'double' <LValueToRValue>
    |       |   `-DeclRefExpr 0x151027810 <col:18> 'const double' lvalue ParmVar 0x15100dcd8 'percent_hue' 'const double'
    |       `-FloatingLiteral 0x151027868 <col:30> 'double' 1.000000e+00
    |-WhileStmt 0x151027a00 <line:13:3, line:14:10>
    | |-BinaryOperator 0x151027970 <line:13:10, col:16> 'int' '<'
    | | |-ImplicitCastExpr 0x151027958 <col:10> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x151027918 <col:10> 'double' lvalue Var 0x15100e2b8 'hue' 'double'
    | | `-FloatingLiteral 0x151027938 <col:16> 'double' 0.000000e+00
    | `-CompoundAssignOperator 0x1510279d0 <line:14:5, col:10> 'double' '+=' ComputeLHSTy='double' ComputeResultTy='double'
    |   |-DeclRefExpr 0x151027990 <col:5> 'double' lvalue Var 0x15100e2b8 'hue' 'double'
    |   `-FloatingLiteral 0x1510279b0 <col:10> 'double' 1.000000e+00
    |-WhileStmt 0x151027b08 <line:15:3, line:16:10>
    | |-BinaryOperator 0x151027a78 <line:15:10, col:16> 'int' '>'
    | | |-ImplicitCastExpr 0x151027a60 <col:10> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x151027a20 <col:10> 'double' lvalue Var 0x15100e2b8 'hue' 'double'
    | | `-FloatingLiteral 0x151027a40 <col:16> 'double' 1.000000e+00
    | `-CompoundAssignOperator 0x151027ad8 <line:16:5, col:10> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
    |   |-DeclRefExpr 0x151027a98 <col:5> 'double' lvalue Var 0x15100e2b8 'hue' 'double'
    |   `-FloatingLiteral 0x151027ab8 <col:10> 'double' 1.000000e+00
    |-CompoundAssignOperator 0x151027bc0 <line:17:3, col:20> 'double' '*=' ComputeLHSTy='double' ComputeResultTy='double'
    | |-DeclRefExpr 0x151027b28 <col:3> 'double' lvalue Var 0x15100e338 'saturation' 'double'
    | `-BinaryOperator 0x151027ba0 <col:15, col:20> 'double' '*'
    |   |-FloatingLiteral 0x151027b48 <col:15> 'double' 1.000000e-02
    |   `-ImplicitCastExpr 0x151027b88 <col:20> 'double' <LValueToRValue>
    |     `-DeclRefExpr 0x151027b68 <col:20> 'const double' lvalue ParmVar 0x15100dd58 'percent_saturation' 'const double'
    |-CompoundAssignOperator 0x151027c88 <line:18:3, col:20> 'double' '*=' ComputeLHSTy='double' ComputeResultTy='double'
    | |-DeclRefExpr 0x151027bf0 <col:3> 'double' lvalue Var 0x15100e238 'brightness' 'double'
    | `-BinaryOperator 0x151027c68 <col:15, col:20> 'double' '*'
    |   |-FloatingLiteral 0x151027c10 <col:15> 'double' 1.000000e-02
    |   `-ImplicitCastExpr 0x151027c50 <col:20> 'double' <LValueToRValue>
    |     `-DeclRefExpr 0x151027c30 <col:20> 'const double' lvalue ParmVar 0x15100ddd8 'percent_brightness' 'const double'
    `-CallExpr 0x151027e90 <line:19:3, col:59> 'int'
      |-ImplicitCastExpr 0x151027e78 <col:3> 'int (*)()' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x151027d98 <col:3> 'int ()' Function 0x151027ce0 'ConvertHSBToRGB' 'int ()'
      |-ImplicitCastExpr 0x151027ee0 <col:19> 'double' <LValueToRValue>
      | `-DeclRefExpr 0x151027db8 <col:19> 'double' lvalue Var 0x15100e2b8 'hue' 'double'
      |-ImplicitCastExpr 0x151027ef8 <col:23> 'double' <LValueToRValue>
      | `-DeclRefExpr 0x151027dd8 <col:23> 'double' lvalue Var 0x15100e338 'saturation' 'double'
      |-ImplicitCastExpr 0x151027f10 <col:34> 'double' <LValueToRValue>
      | `-DeclRefExpr 0x151027df8 <col:34> 'double' lvalue Var 0x15100e238 'brightness' 'double'
      |-ImplicitCastExpr 0x151027f28 <col:45> 'double *' <LValueToRValue>
      | `-DeclRefExpr 0x151027e18 <col:45> 'double *' lvalue ParmVar 0x15100de88 'red' 'double *'
      |-ImplicitCastExpr 0x151027f40 <col:49> 'double *' <LValueToRValue>
      | `-DeclRefExpr 0x151027e38 <col:49> 'double *' lvalue ParmVar 0x15100df08 'green' 'double *'
      `-ImplicitCastExpr 0x151027f58 <col:55> 'double *' <LValueToRValue>
        `-DeclRefExpr 0x151027e58 <col:55> 'double *' lvalue ParmVar 0x15100df88 'blue' 'double *'
