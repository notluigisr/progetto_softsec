`-FunctionDecl 0x12b80def8  line:1:17 uv__utf8_decode1_slow 'unsigned int (const char **, const char *, unsigned int)' static
  |-ParmVarDecl 0x12b80dd08 <col:39, col:52> col:52 used p 'const char **'
  |-ParmVarDecl 0x12b80dd88 <line:2:39, col:51> col:51 used pe 'const char *'
  |-ParmVarDecl 0x12b80de08 <line:3:39, col:48> col:48 used a 'unsigned int'
  `-CompoundStmt 0x12b8293b8 <col:51, line:63:1>
    |-DeclStmt 0x12b80e080 <line:4:3, col:13>
    | `-VarDecl 0x12b80e018 <col:3, col:12> col:12 used b 'unsigned int'
    |-DeclStmt 0x12b80e118 <line:5:3, col:13>
    | `-VarDecl 0x12b80e0b0 <col:3, col:12> col:12 used c 'unsigned int'
    |-DeclStmt 0x12b80e1b0 <line:6:3, col:13>
    | `-VarDecl 0x12b80e148 <col:3, col:12> col:12 used d 'unsigned int'
    |-DeclStmt 0x12b80e248 <line:7:3, col:15>
    | `-VarDecl 0x12b80e1e0 <col:3, col:12> col:12 used min 'unsigned int'
    |-IfStmt 0x12b80e350 <line:9:3, line:10:13>
    | |-BinaryOperator 0x12b80e2d0 <line:9:7, col:11> 'int' '>'
    | | |-ImplicitCastExpr 0x12b80e2a0 <col:7> 'unsigned int' <LValueToRValue>
    | | | `-DeclRefExpr 0x12b80e260 <col:7> 'unsigned int' lvalue ParmVar 0x12b80de08 'a' 'unsigned int'
    | | `-ImplicitCastExpr 0x12b80e2b8 <col:11> 'unsigned int' <IntegralCast>
    | |   `-IntegerLiteral 0x12b80e280 <col:11> 'int' 247
    | `-ReturnStmt 0x12b80e340 <line:10:5, col:13>
    |   `-ImplicitCastExpr 0x12b80e328 <col:12, col:13> 'unsigned int' <IntegralCast>
    |     `-UnaryOperator 0x12b80e310 <col:12, col:13> 'int' prefix '-'
    |       `-IntegerLiteral 0x12b80e2f0 <col:13> 'int' 1
    |-SwitchStmt 0x12b826638 <line:12:3, line:43:3>
    | |-BinaryOperator 0x12b826618 <line:12:11, col:16> 'long' '-'
    | | |-ImplicitCastExpr 0x12b80e3e0 <col:11, col:12> 'const char *' <LValueToRValue>
    | | | `-UnaryOperator 0x12b80e3a8 <col:11, col:12> 'const char *' lvalue prefix '*' cannot overflow
    | | |   `-ImplicitCastExpr 0x12b80e390 <col:12> 'const char **' <LValueToRValue>
    | | |     `-DeclRefExpr 0x12b80e370 <col:12> 'const char **' lvalue ParmVar 0x12b80dd08 'p' 'const char **'
    | | `-ImplicitCastExpr 0x12b826600 <col:16> 'const char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x12b80e3c0 <col:16> 'const char *' lvalue ParmVar 0x12b80dd88 'pe' 'const char *'
    | `-CompoundStmt 0x12b8288d0 <col:20, line:43:3>
    |   |-DefaultStmt 0x12b826c90 <line:13:3, line:21:5>
    |   | `-IfStmt 0x12b826c70 <line:14:5, line:21:5>
    |   |   |-BinaryOperator 0x12b8266d0 <line:14:9, col:13> 'int' '>'
    |   |   | |-ImplicitCastExpr 0x12b8266a0 <col:9> 'unsigned int' <LValueToRValue>
    |   |   | | `-DeclRefExpr 0x12b826660 <col:9> 'unsigned int' lvalue ParmVar 0x12b80de08 'a' 'unsigned int'
    |   |   | `-ImplicitCastExpr 0x12b8266b8 <col:13> 'unsigned int' <IntegralCast>
    |   |   |   `-IntegerLiteral 0x12b826680 <col:13> 'int' 239
    |   |   `-CompoundStmt 0x12b826c30 <col:19, line:21:5>
    |   |     |-BinaryOperator 0x12b826748 <line:15:7, col:13> 'unsigned int' '='
    |   |     | |-DeclRefExpr 0x12b8266f0 <col:7> 'unsigned int' lvalue Var 0x12b80e1e0 'min' 'unsigned int'
    |   |     | `-ImplicitCastExpr 0x12b826730 <col:13> 'unsigned int' <IntegralCast>
    |   |     |   `-IntegerLiteral 0x12b826710 <col:13> 'int' 65536
    |   |     |-BinaryOperator 0x12b826818 <line:16:7, col:15> 'unsigned int' '='
    |   |     | |-DeclRefExpr 0x12b826768 <col:7> 'unsigned int' lvalue ParmVar 0x12b80de08 'a' 'unsigned int'
    |   |     | `-BinaryOperator 0x12b8267f8 <col:11, col:15> 'unsigned int' '&'
    |   |     |   |-ImplicitCastExpr 0x12b8267c8 <col:11> 'unsigned int' <LValueToRValue>
    |   |     |   | `-DeclRefExpr 0x12b826788 <col:11> 'unsigned int' lvalue ParmVar 0x12b80de08 'a' 'unsigned int'
    |   |     |   `-ImplicitCastExpr 0x12b8267e0 <col:15> 'unsigned int' <IntegralCast>
    |   |     |     `-IntegerLiteral 0x12b8267a8 <col:15> 'int' 7
    |   |     |-BinaryOperator 0x12b826968 <line:17:7, col:32> 'unsigned int' '='
    |   |     | |-DeclRefExpr 0x12b826838 <col:7> 'unsigned int' lvalue Var 0x12b80e018 'b' 'unsigned int'
    |   |     | `-ImplicitCastExpr 0x12b826950 <col:11, col:32> 'unsigned int' <IntegralCast>
    |   |     |   `-CStyleCastExpr 0x12b826928 <col:11, col:32> 'unsigned char' <IntegralCast>
    |   |     |     `-ImplicitCastExpr 0x12b826910 <col:27, col:32> 'char' <LValueToRValue> part_of_explicit_cast
    |   |     |       `-UnaryOperator 0x12b8268e0 <col:27, col:32> 'const char' lvalue prefix '*' cannot overflow
    |   |     |         `-UnaryOperator 0x12b8268c8 <col:28, col:32> 'const char *' postfix '++'
    |   |     |           `-ParenExpr 0x12b8268a8 <col:28, col:31> 'const char *' lvalue
    |   |     |             `-UnaryOperator 0x12b826890 <col:29, col:30> 'const char *' lvalue prefix '*' cannot overflow
    |   |     |               `-ImplicitCastExpr 0x12b826878 <col:30> 'const char **' <LValueToRValue>
    |   |     |                 `-DeclRefExpr 0x12b826858 <col:30> 'const char **' lvalue ParmVar 0x12b80dd08 'p' 'const char **'
    |   |     |-BinaryOperator 0x12b826ab8 <line:18:7, col:32> 'unsigned int' '='
    |   |     | |-DeclRefExpr 0x12b826988 <col:7> 'unsigned int' lvalue Var 0x12b80e0b0 'c' 'unsigned int'
    |   |     | `-ImplicitCastExpr 0x12b826aa0 <col:11, col:32> 'unsigned int' <IntegralCast>
    |   |     |   `-CStyleCastExpr 0x12b826a78 <col:11, col:32> 'unsigned char' <IntegralCast>
    |   |     |     `-ImplicitCastExpr 0x12b826a60 <col:27, col:32> 'char' <LValueToRValue> part_of_explicit_cast
    |   |     |       `-UnaryOperator 0x12b826a30 <col:27, col:32> 'const char' lvalue prefix '*' cannot overflow
    |   |     |         `-UnaryOperator 0x12b826a18 <col:28, col:32> 'const char *' postfix '++'
    |   |     |           `-ParenExpr 0x12b8269f8 <col:28, col:31> 'const char *' lvalue
    |   |     |             `-UnaryOperator 0x12b8269e0 <col:29, col:30> 'const char *' lvalue prefix '*' cannot overflow
    |   |     |               `-ImplicitCastExpr 0x12b8269c8 <col:30> 'const char **' <LValueToRValue>
    |   |     |                 `-DeclRefExpr 0x12b8269a8 <col:30> 'const char **' lvalue ParmVar 0x12b80dd08 'p' 'const char **'
    |   |     |-BinaryOperator 0x12b826c08 <line:19:7, col:32> 'unsigned int' '='
    |   |     | |-DeclRefExpr 0x12b826ad8 <col:7> 'unsigned int' lvalue Var 0x12b80e148 'd' 'unsigned int'
    |   |     | `-ImplicitCastExpr 0x12b826bf0 <col:11, col:32> 'unsigned int' <IntegralCast>
    |   |     |   `-CStyleCastExpr 0x12b826bc8 <col:11, col:32> 'unsigned char' <IntegralCast>
    |   |     |     `-ImplicitCastExpr 0x12b826bb0 <col:27, col:32> 'char' <LValueToRValue> part_of_explicit_cast
    |   |     |       `-UnaryOperator 0x12b826b80 <col:27, col:32> 'const char' lvalue prefix '*' cannot overflow
    |   |     |         `-UnaryOperator 0x12b826b68 <col:28, col:32> 'const char *' postfix '++'
    |   |     |           `-ParenExpr 0x12b826b48 <col:28, col:31> 'const char *' lvalue
    |   |     |             `-UnaryOperator 0x12b826b30 <col:29, col:30> 'const char *' lvalue prefix '*' cannot overflow
    |   |     |               `-ImplicitCastExpr 0x12b826b18 <col:30> 'const char **' <LValueToRValue>
    |   |     |                 `-DeclRefExpr 0x12b826af8 <col:30> 'const char **' lvalue ParmVar 0x12b80dd08 'p' 'const char **'
    |   |     `-BreakStmt 0x12b826c28 <line:20:7>
    |   |-CaseStmt 0x12b826d00 <line:23:3, line:31:5>
    |   | |-ImplicitCastExpr 0x12b826ce8 <line:23:8> 'long' <IntegralCast>
    |   | | `-ConstantExpr 0x12b826cd0 <col:8> 'int'
    |   | |   `-IntegerLiteral 0x12b826cb0 <col:8> 'int' 2
    |   | `-IfStmt 0x12b8272d8 <line:24:5, line:31:5>
    |   |   |-BinaryOperator 0x12b826d98 <line:24:9, col:13> 'int' '>'
    |   |   | |-ImplicitCastExpr 0x12b826d68 <col:9> 'unsigned int' <LValueToRValue>
    |   |   | | `-DeclRefExpr 0x12b826d28 <col:9> 'unsigned int' lvalue ParmVar 0x12b80de08 'a' 'unsigned int'
    |   |   | `-ImplicitCastExpr 0x12b826d80 <col:13> 'unsigned int' <IntegralCast>
    |   |   |   `-IntegerLiteral 0x12b826d48 <col:13> 'int' 223
    |   |   `-CompoundStmt 0x12b827298 <col:19, line:31:5>
    |   |     |-BinaryOperator 0x12b826e10 <line:25:7, col:13> 'unsigned int' '='
    |   |     | |-DeclRefExpr 0x12b826db8 <col:7> 'unsigned int' lvalue Var 0x12b80e1e0 'min' 'unsigned int'
    |   |     | `-ImplicitCastExpr 0x12b826df8 <col:13> 'unsigned int' <IntegralCast>
    |   |     |   `-IntegerLiteral 0x12b826dd8 <col:13> 'int' 2048
    |   |     |-BinaryOperator 0x12b826f58 <line:26:7, col:25> 'unsigned int' '='
    |   |     | |-DeclRefExpr 0x12b826e30 <col:7> 'unsigned int' lvalue Var 0x12b80e018 'b' 'unsigned int'
    |   |     | `-BinaryOperator 0x12b826f38 <col:11, col:25> 'unsigned int' '|'
    |   |     |   |-ImplicitCastExpr 0x12b826f20 <col:11> 'unsigned int' <IntegralCast>
    |   |     |   | `-IntegerLiteral 0x12b826e50 <col:11> 'int' 128
    |   |     |   `-ParenExpr 0x12b826f00 <col:18, col:25> 'unsigned int'
    |   |     |     `-BinaryOperator 0x12b826ee0 <col:19, col:23> 'unsigned int' '&'
    |   |     |       |-ImplicitCastExpr 0x12b826eb0 <col:19> 'unsigned int' <LValueToRValue>
    |   |     |       | `-DeclRefExpr 0x12b826e70 <col:19> 'unsigned int' lvalue ParmVar 0x12b80de08 'a' 'unsigned int'
    |   |     |       `-ImplicitCastExpr 0x12b826ec8 <col:23> 'unsigned int' <IntegralCast>
    |   |     |         `-IntegerLiteral 0x12b826e90 <col:23> 'int' 15
    |   |     |-BinaryOperator 0x12b8270a8 <line:27:7, col:32> 'unsigned int' '='
    |   |     | |-DeclRefExpr 0x12b826f78 <col:7> 'unsigned int' lvalue Var 0x12b80e0b0 'c' 'unsigned int'
    |   |     | `-ImplicitCastExpr 0x12b827090 <col:11, col:32> 'unsigned int' <IntegralCast>
    |   |     |   `-CStyleCastExpr 0x12b827068 <col:11, col:32> 'unsigned char' <IntegralCast>
    |   |     |     `-ImplicitCastExpr 0x12b827050 <col:27, col:32> 'char' <LValueToRValue> part_of_explicit_cast
    |   |     |       `-UnaryOperator 0x12b827020 <col:27, col:32> 'const char' lvalue prefix '*' cannot overflow
    |   |     |         `-UnaryOperator 0x12b827008 <col:28, col:32> 'const char *' postfix '++'
    |   |     |           `-ParenExpr 0x12b826fe8 <col:28, col:31> 'const char *' lvalue
    |   |     |             `-UnaryOperator 0x12b826fd0 <col:29, col:30> 'const char *' lvalue prefix '*' cannot overflow
    |   |     |               `-ImplicitCastExpr 0x12b826fb8 <col:30> 'const char **' <LValueToRValue>
    |   |     |                 `-DeclRefExpr 0x12b826f98 <col:30> 'const char **' lvalue ParmVar 0x12b80dd08 'p' 'const char **'
    |   |     |-BinaryOperator 0x12b8271f8 <line:28:7, col:32> 'unsigned int' '='
    |   |     | |-DeclRefExpr 0x12b8270c8 <col:7> 'unsigned int' lvalue Var 0x12b80e148 'd' 'unsigned int'
    |   |     | `-ImplicitCastExpr 0x12b8271e0 <col:11, col:32> 'unsigned int' <IntegralCast>
    |   |     |   `-CStyleCastExpr 0x12b8271b8 <col:11, col:32> 'unsigned char' <IntegralCast>
    |   |     |     `-ImplicitCastExpr 0x12b8271a0 <col:27, col:32> 'char' <LValueToRValue> part_of_explicit_cast
    |   |     |       `-UnaryOperator 0x12b827170 <col:27, col:32> 'const char' lvalue prefix '*' cannot overflow
    |   |     |         `-UnaryOperator 0x12b827158 <col:28, col:32> 'const char *' postfix '++'
    |   |     |           `-ParenExpr 0x12b827138 <col:28, col:31> 'const char *' lvalue
    |   |     |             `-UnaryOperator 0x12b827120 <col:29, col:30> 'const char *' lvalue prefix '*' cannot overflow
    |   |     |               `-ImplicitCastExpr 0x12b827108 <col:30> 'const char **' <LValueToRValue>
    |   |     |                 `-DeclRefExpr 0x12b8270e8 <col:30> 'const char **' lvalue ParmVar 0x12b80dd08 'p' 'const char **'
    |   |     |-BinaryOperator 0x12b827270 <line:29:7, col:11> 'unsigned int' '='
    |   |     | |-DeclRefExpr 0x12b827218 <col:7> 'unsigned int' lvalue ParmVar 0x12b80de08 'a' 'unsigned int'
    |   |     | `-ImplicitCastExpr 0x12b827258 <col:11> 'unsigned int' <IntegralCast>
    |   |     |   `-IntegerLiteral 0x12b827238 <col:11> 'int' 0
    |   |     `-BreakStmt 0x12b827290 <line:30:7>
    |   |-CaseStmt 0x12b827348 <line:33:3, line:41:5>
    |   | |-ImplicitCastExpr 0x12b827330 <line:33:8> 'long' <IntegralCast>
    |   | | `-ConstantExpr 0x12b827318 <col:8> 'int'
    |   | |   `-IntegerLiteral 0x12b8272f8 <col:8> 'int' 1
    |   | `-IfStmt 0x12b828850 <line:34:5, line:41:5>
    |   |   |-BinaryOperator 0x12b8273e0 <line:34:9, col:13> 'int' '>'
    |   |   | |-ImplicitCastExpr 0x12b8273b0 <col:9> 'unsigned int' <LValueToRValue>
    |   |   | | `-DeclRefExpr 0x12b827370 <col:9> 'unsigned int' lvalue ParmVar 0x12b80de08 'a' 'unsigned int'
    |   |   | `-ImplicitCastExpr 0x12b8273c8 <col:13> 'unsigned int' <IntegralCast>
    |   |   |   `-IntegerLiteral 0x12b827390 <col:13> 'int' 191
    |   |   `-CompoundStmt 0x12b828810 <col:19, line:41:5>
    |   |     |-BinaryOperator 0x12b827458 <line:35:7, col:13> 'unsigned int' '='
    |   |     | |-DeclRefExpr 0x12b827400 <col:7> 'unsigned int' lvalue Var 0x12b80e1e0 'min' 'unsigned int'
    |   |     | `-ImplicitCastExpr 0x12b827440 <col:13> 'unsigned int' <IntegralCast>
    |   |     |   `-IntegerLiteral 0x12b827420 <col:13> 'int' 128
    |   |     |-BinaryOperator 0x12b8274d0 <line:36:7, col:11> 'unsigned int' '='
    |   |     | |-DeclRefExpr 0x12b827478 <col:7> 'unsigned int' lvalue Var 0x12b80e018 'b' 'unsigned int'
    |   |     | `-ImplicitCastExpr 0x12b8274b8 <col:11> 'unsigned int' <IntegralCast>
    |   |     |   `-IntegerLiteral 0x12b827498 <col:11> 'int' 128
    |   |     |-BinaryOperator 0x12b828620 <line:37:7, col:25> 'unsigned int' '='
    |   |     | |-DeclRefExpr 0x12b8274f0 <col:7> 'unsigned int' lvalue Var 0x12b80e0b0 'c' 'unsigned int'
    |   |     | `-BinaryOperator 0x12b828600 <col:11, col:25> 'unsigned int' '|'
    |   |     |   |-ImplicitCastExpr 0x12b8275e0 <col:11> 'unsigned int' <IntegralCast>
    |   |     |   | `-IntegerLiteral 0x12b827510 <col:11> 'int' 128
    |   |     |   `-ParenExpr 0x12b8275c0 <col:18, col:25> 'unsigned int'
    |   |     |     `-BinaryOperator 0x12b8275a0 <col:19, col:23> 'unsigned int' '&'
    |   |     |       |-ImplicitCastExpr 0x12b827570 <col:19> 'unsigned int' <LValueToRValue>
    |   |     |       | `-DeclRefExpr 0x12b827530 <col:19> 'unsigned int' lvalue ParmVar 0x12b80de08 'a' 'unsigned int'
    |   |     |       `-ImplicitCastExpr 0x12b827588 <col:23> 'unsigned int' <IntegralCast>
    |   |     |         `-IntegerLiteral 0x12b827550 <col:23> 'int' 31
    |   |     |-BinaryOperator 0x12b828770 <line:38:7, col:32> 'unsigned int' '='
    |   |     | |-DeclRefExpr 0x12b828640 <col:7> 'unsigned int' lvalue Var 0x12b80e148 'd' 'unsigned int'
    |   |     | `-ImplicitCastExpr 0x12b828758 <col:11, col:32> 'unsigned int' <IntegralCast>
    |   |     |   `-CStyleCastExpr 0x12b828730 <col:11, col:32> 'unsigned char' <IntegralCast>
    |   |     |     `-ImplicitCastExpr 0x12b828718 <col:27, col:32> 'char' <LValueToRValue> part_of_explicit_cast
    |   |     |       `-UnaryOperator 0x12b8286e8 <col:27, col:32> 'const char' lvalue prefix '*' cannot overflow
    |   |     |         `-UnaryOperator 0x12b8286d0 <col:28, col:32> 'const char *' postfix '++'
    |   |     |           `-ParenExpr 0x12b8286b0 <col:28, col:31> 'const char *' lvalue
    |   |     |             `-UnaryOperator 0x12b828698 <col:29, col:30> 'const char *' lvalue prefix '*' cannot overflow
    |   |     |               `-ImplicitCastExpr 0x12b828680 <col:30> 'const char **' <LValueToRValue>
    |   |     |                 `-DeclRefExpr 0x12b828660 <col:30> 'const char **' lvalue ParmVar 0x12b80dd08 'p' 'const char **'
    |   |     |-BinaryOperator 0x12b8287e8 <line:39:7, col:11> 'unsigned int' '='
    |   |     | |-DeclRefExpr 0x12b828790 <col:7> 'unsigned int' lvalue ParmVar 0x12b80de08 'a' 'unsigned int'
    |   |     | `-ImplicitCastExpr 0x12b8287d0 <col:11> 'unsigned int' <IntegralCast>
    |   |     |   `-IntegerLiteral 0x12b8287b0 <col:11> 'int' 0
    |   |     `-BreakStmt 0x12b828808 <line:40:7>
    |   `-ReturnStmt 0x12b8288c0 <line:42:5, col:13>
    |     `-ImplicitCastExpr 0x12b8288a8 <col:12, col:13> 'unsigned int' <IntegralCast>
    |       `-UnaryOperator 0x12b828890 <col:12, col:13> 'int' prefix '-'
    |         `-IntegerLiteral 0x12b828870 <col:13> 'int' 1
    |-IfStmt 0x12b828b38 <line:45:3, line:46:13>
    | |-BinaryOperator 0x12b828ab8 <line:45:7, col:34> 'int' '!='
    | | |-ImplicitCastExpr 0x12b828aa0 <col:7> 'unsigned int' <IntegralCast>
    | | | `-IntegerLiteral 0x12b828900 <col:7> 'int' 128
    | | `-ParenExpr 0x12b828a80 <col:15, col:34> 'unsigned int'
    | |   `-BinaryOperator 0x12b828a60 <col:16, col:33> 'unsigned int' '&'
    | |     |-ImplicitCastExpr 0x12b828a48 <col:16> 'unsigned int' <IntegralCast>
    | |     | `-IntegerLiteral 0x12b828920 <col:16> 'int' 192
    | |     `-ParenExpr 0x12b828a28 <col:23, col:33> 'unsigned int'
    | |       `-BinaryOperator 0x12b828a08 <col:24, col:32> 'unsigned int' '^'
    | |         |-BinaryOperator 0x12b8289b0 <col:24, col:28> 'unsigned int' '^'
    | |         | |-ImplicitCastExpr 0x12b828980 <col:24> 'unsigned int' <LValueToRValue>
    | |         | | `-DeclRefExpr 0x12b828940 <col:24> 'unsigned int' lvalue Var 0x12b80e018 'b' 'unsigned int'
    | |         | `-ImplicitCastExpr 0x12b828998 <col:28> 'unsigned int' <LValueToRValue>
    | |         |   `-DeclRefExpr 0x12b828960 <col:28> 'unsigned int' lvalue Var 0x12b80e0b0 'c' 'unsigned int'
    | |         `-ImplicitCastExpr 0x12b8289f0 <col:32> 'unsigned int' <LValueToRValue>
    | |           `-DeclRefExpr 0x12b8289d0 <col:32> 'unsigned int' lvalue Var 0x12b80e148 'd' 'unsigned int'
    | `-ReturnStmt 0x12b828b28 <line:46:5, col:13>
    |   `-ImplicitCastExpr 0x12b828b10 <col:12, col:13> 'unsigned int' <IntegralCast>
    |     `-UnaryOperator 0x12b828af8 <col:12, col:13> 'int' prefix '-'
    |       `-IntegerLiteral 0x12b828ad8 <col:13> 'int' 1
    |-CompoundAssignOperator 0x12b828bb0 <line:48:3, col:8> 'unsigned int' '&=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    | |-DeclRefExpr 0x12b828b58 <col:3> 'unsigned int' lvalue Var 0x12b80e018 'b' 'unsigned int'
    | `-ImplicitCastExpr 0x12b828b98 <col:8> 'unsigned int' <IntegralCast>
    |   `-IntegerLiteral 0x12b828b78 <col:8> 'int' 63
    |-CompoundAssignOperator 0x12b828c38 <line:49:3, col:8> 'unsigned int' '&=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    | |-DeclRefExpr 0x12b828be0 <col:3> 'unsigned int' lvalue Var 0x12b80e0b0 'c' 'unsigned int'
    | `-ImplicitCastExpr 0x12b828c20 <col:8> 'unsigned int' <IntegralCast>
    |   `-IntegerLiteral 0x12b828c00 <col:8> 'int' 63
    |-CompoundAssignOperator 0x12b828cc0 <line:50:3, col:8> 'unsigned int' '&=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    | |-DeclRefExpr 0x12b828c68 <col:3> 'unsigned int' lvalue Var 0x12b80e148 'd' 'unsigned int'
    | `-ImplicitCastExpr 0x12b828ca8 <col:8> 'unsigned int' <IntegralCast>
    |   `-IntegerLiteral 0x12b828c88 <col:8> 'int' 63
    |-BinaryOperator 0x12b828f70 <line:51:3, col:42> 'unsigned int' '='
    | |-DeclRefExpr 0x12b828cf0 <col:3> 'unsigned int' lvalue ParmVar 0x12b80de08 'a' 'unsigned int'
    | `-BinaryOperator 0x12b828f50 <col:7, col:42> 'unsigned int' '|'
    |   |-BinaryOperator 0x12b828ef8 <col:7, col:38> 'unsigned int' '|'
    |   | |-BinaryOperator 0x12b828e40 <col:7, col:27> 'unsigned int' '|'
    |   | | |-ParenExpr 0x12b828d88 <col:7, col:15> 'unsigned int'
    |   | | | `-BinaryOperator 0x12b828d68 <col:8, col:13> 'unsigned int' '<<'
    |   | | |   |-ImplicitCastExpr 0x12b828d50 <col:8> 'unsigned int' <LValueToRValue>
    |   | | |   | `-DeclRefExpr 0x12b828d10 <col:8> 'unsigned int' lvalue ParmVar 0x12b80de08 'a' 'unsigned int'
    |   | | |   `-IntegerLiteral 0x12b828d30 <col:13> 'int' 18
    |   | | `-ParenExpr 0x12b828e20 <col:19, col:27> 'unsigned int'
    |   | |   `-BinaryOperator 0x12b828e00 <col:20, col:25> 'unsigned int' '<<'
    |   | |     |-ImplicitCastExpr 0x12b828de8 <col:20> 'unsigned int' <LValueToRValue>
    |   | |     | `-DeclRefExpr 0x12b828da8 <col:20> 'unsigned int' lvalue Var 0x12b80e018 'b' 'unsigned int'
    |   | |     `-IntegerLiteral 0x12b828dc8 <col:25> 'int' 12
    |   | `-ParenExpr 0x12b828ed8 <col:31, col:38> 'unsigned int'
    |   |   `-BinaryOperator 0x12b828eb8 <col:32, col:37> 'unsigned int' '<<'
    |   |     |-ImplicitCastExpr 0x12b828ea0 <col:32> 'unsigned int' <LValueToRValue>
    |   |     | `-DeclRefExpr 0x12b828e60 <col:32> 'unsigned int' lvalue Var 0x12b80e0b0 'c' 'unsigned int'
    |   |     `-IntegerLiteral 0x12b828e80 <col:37> 'int' 6
    |   `-ImplicitCastExpr 0x12b828f38 <col:42> 'unsigned int' <LValueToRValue>
    |     `-DeclRefExpr 0x12b828f18 <col:42> 'unsigned int' lvalue Var 0x12b80e148 'd' 'unsigned int'
    |-IfStmt 0x12b829080 <line:53:3, line:54:13>
    | |-BinaryOperator 0x12b829000 <line:53:7, col:11> 'int' '<'
    | | |-ImplicitCastExpr 0x12b828fd0 <col:7> 'unsigned int' <LValueToRValue>
    | | | `-DeclRefExpr 0x12b828f90 <col:7> 'unsigned int' lvalue ParmVar 0x12b80de08 'a' 'unsigned int'
    | | `-ImplicitCastExpr 0x12b828fe8 <col:11> 'unsigned int' <LValueToRValue>
    | |   `-DeclRefExpr 0x12b828fb0 <col:11> 'unsigned int' lvalue Var 0x12b80e1e0 'min' 'unsigned int'
    | `-ReturnStmt 0x12b829070 <line:54:5, col:13>
    |   `-ImplicitCastExpr 0x12b829058 <col:12, col:13> 'unsigned int' <IntegralCast>
    |     `-UnaryOperator 0x12b829040 <col:12, col:13> 'int' prefix '-'
    |       `-IntegerLiteral 0x12b829020 <col:13> 'int' 1
    |-IfStmt 0x12b829190 <line:56:3, line:57:13>
    | |-BinaryOperator 0x12b829110 <line:56:7, col:11> 'int' '>'
    | | |-ImplicitCastExpr 0x12b8290e0 <col:7> 'unsigned int' <LValueToRValue>
    | | | `-DeclRefExpr 0x12b8290a0 <col:7> 'unsigned int' lvalue ParmVar 0x12b80de08 'a' 'unsigned int'
    | | `-ImplicitCastExpr 0x12b8290f8 <col:11> 'unsigned int' <IntegralCast>
    | |   `-IntegerLiteral 0x12b8290c0 <col:11> 'int' 1114111
    | `-ReturnStmt 0x12b829180 <line:57:5, col:13>
    |   `-ImplicitCastExpr 0x12b829168 <col:12, col:13> 'unsigned int' <IntegralCast>
    |     `-UnaryOperator 0x12b829150 <col:12, col:13> 'int' prefix '-'
    |       `-IntegerLiteral 0x12b829130 <col:13> 'int' 1
    |-IfStmt 0x12b829350 <line:59:3, line:60:13>
    | |-BinaryOperator 0x12b8292d0 <line:59:7, col:27> 'int' '&&'
    | | |-BinaryOperator 0x12b829220 <col:7, col:12> 'int' '>='
    | | | |-ImplicitCastExpr 0x12b8291f0 <col:7> 'unsigned int' <LValueToRValue>
    | | | | `-DeclRefExpr 0x12b8291b0 <col:7> 'unsigned int' lvalue ParmVar 0x12b80de08 'a' 'unsigned int'
    | | | `-ImplicitCastExpr 0x12b829208 <col:12> 'unsigned int' <IntegralCast>
    | | |   `-IntegerLiteral 0x12b8291d0 <col:12> 'int' 55296
    | | `-BinaryOperator 0x12b8292b0 <col:22, col:27> 'int' '<='
    | |   |-ImplicitCastExpr 0x12b829280 <col:22> 'unsigned int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x12b829240 <col:22> 'unsigned int' lvalue ParmVar 0x12b80de08 'a' 'unsigned int'
    | |   `-ImplicitCastExpr 0x12b829298 <col:27> 'unsigned int' <IntegralCast>
    | |     `-IntegerLiteral 0x12b829260 <col:27> 'int' 57343
    | `-ReturnStmt 0x12b829340 <line:60:5, col:13>
    |   `-ImplicitCastExpr 0x12b829328 <col:12, col:13> 'unsigned int' <IntegralCast>
    |     `-UnaryOperator 0x12b829310 <col:12, col:13> 'int' prefix '-'
    |       `-IntegerLiteral 0x12b8292f0 <col:13> 'int' 1
    `-ReturnStmt 0x12b8293a8 <line:62:3, col:10>
      `-ImplicitCastExpr 0x12b829390 <col:10> 'unsigned int' <LValueToRValue>
        `-DeclRefExpr 0x12b829370 <col:10> 'unsigned int' lvalue ParmVar 0x12b80de08 'a' 'unsigned int'
