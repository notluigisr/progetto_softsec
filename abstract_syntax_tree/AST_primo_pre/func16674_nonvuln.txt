`-FunctionDecl 0x15580e008  line:1:1 invalid verifyStringOrDots 'int (const int *, int, int, int, int)'
  |-ParmVarDecl 0x15580dcf0 <col:20, col:36> col:36 invalid file 'const int *'
  |-ParmVarDecl 0x15580dd70 <col:42, col:65> col:65 invalid opcode 'int'
  |-ParmVarDecl 0x15580ddf0 <col:73, col:77> col:77 used isString 'int'
  |-ParmVarDecl 0x15580de70 <line:2:3, col:7> col:7 used actionPart 'int'
  |-ParmVarDecl 0x15580def0 <col:19, col:23> col:23 used nofor 'int'
  `-CompoundStmt 0x155827958 <col:30, line:10:1>
    |-IfStmt 0x15580e3a0 <line:3:2, col:67>
    | |-BinaryOperator 0x15580e350 <col:6, col:50> 'int' contains-errors '=='
    | | |-UnaryOperator 0x15580e2e8 <col:6, col:44> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | | `-CallExpr 0x15580e2b0 <col:7, col:44> '<dependent type>' contains-errors
    | | |   |-DeclRefExpr 0x15580e230 <col:7> 'int ()' Function 0x15580e178 'wantsString' 'int ()'
    | | |   |-RecoveryExpr 0x15580e250 <col:19> '<dependent type>' contains-errors lvalue
    | | |   |-DeclRefExpr 0x15580e270 <col:27> 'int' lvalue ParmVar 0x15580de70 'actionPart' 'int'
    | | |   `-DeclRefExpr 0x15580e290 <col:39> 'int' lvalue ParmVar 0x15580def0 'nofor' 'int'
    | | `-UnaryOperator 0x15580e338 <col:49, col:50> 'int' prefix '!' cannot overflow
    | |   `-ImplicitCastExpr 0x15580e320 <col:50> 'int' <LValueToRValue>
    | |     `-DeclRefExpr 0x15580e300 <col:50> 'int' lvalue ParmVar 0x15580ddf0 'isString' 'int'
    | `-ReturnStmt 0x15580e390 <col:60, col:67>
    |   `-IntegerLiteral 0x15580e370 <col:67> 'int' 1
    `-ReturnStmt 0x155827948 <line:9:2, col:9>
      `-IntegerLiteral 0x155827928 <col:9> 'int' 0
