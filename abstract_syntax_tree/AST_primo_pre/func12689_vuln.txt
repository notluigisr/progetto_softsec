`-FunctionDecl 0x14c00e308  line:1:5 invalid dane_verify_crt 'int (int, const int *, unsigned int, int, const char *, const char *, unsigned int, unsigned int, unsigned int, unsigned int *)'
  |-ParmVarDecl 0x14c00dcf0 <col:22, col:35> col:35 invalid s 'int'
  |-ParmVarDecl 0x14c00dd70 <line:2:2, col:24> col:24 invalid chain 'const int *'
  |-ParmVarDecl 0x14c00ddf0 <col:31, col:40> col:40 used chain_size 'unsigned int'
  |-ParmVarDecl 0x14c00de70 <line:3:2, col:28> col:28 invalid chain_type 'int'
  |-ParmVarDecl 0x14c00def0 <line:4:2, col:15> col:15 used hostname 'const char *'
  |-ParmVarDecl 0x14c00df70 <col:25, col:37> col:37 used proto 'const char *'
  |-ParmVarDecl 0x14c00dff0 <col:44, col:57> col:57 used port 'unsigned int'
  |-ParmVarDecl 0x14c00e070 <line:5:2, col:15> col:15 used sflags 'unsigned int'
  |-ParmVarDecl 0x14c00e0f0 <col:23, col:36> col:36 used vflags 'unsigned int'
  |-ParmVarDecl 0x14c00e1a8 <line:6:2, col:16> col:16 used verify 'unsigned int *'
  `-CompoundStmt 0x14b9248b8 <line:7:1, line:72:1>
    |-DeclStmt 0x14c027480 <line:10:1, col:8>
    | `-VarDecl 0x14c027418 <col:1, col:5> col:5 used ret 'int'
    |-DeclStmt 0x14c027550 <line:11:1, col:21>
    | `-VarDecl 0x14c0274b0 <col:1, col:20> col:10 used checked 'unsigned int' cinit
    |   `-ImplicitCastExpr 0x14c027538 <col:20> 'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x14c027518 <col:20> 'int' 0
    |-DeclStmt 0x14c027790 <line:12:1, col:37>
    | |-VarDecl 0x14c027580 <col:1, col:14> col:14 used usage 'unsigned int'
    | |-VarDecl 0x14c027600 <col:1, col:21> col:21 used type 'unsigned int'
    | |-VarDecl 0x14c027680 <col:1, col:27> col:27 used match 'unsigned int'
    | `-VarDecl 0x14c027700 <col:1, col:34> col:34 used idx 'unsigned int'
    |-IfStmt 0x14c027a58 <line:15:2, line:16:50>
    | |-BinaryOperator 0x14c027820 <line:15:6, col:20> 'int' contains-errors '!='
    | | |-RecoveryExpr 0x14c0277a8 <col:6> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x14c027800 <col:20> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x14c027a48 <line:16:3, col:50>
    |   `-CallExpr 0x14c027a20 <col:10, col:50> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x14c0279a0 <col:10> 'int ()' Function 0x14c0278e8 'gnutls_assert_val' 'int ()'
    |     `-RecoveryExpr 0x14c027a00 <col:28> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x14c027b00 <line:18:2, col:12> 'unsigned int' '='
    | |-UnaryOperator 0x14c027ab0 <col:2, col:3> 'unsigned int' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x14c027a98 <col:3> 'unsigned int *' <LValueToRValue>
    | |   `-DeclRefExpr 0x14c027a78 <col:3> 'unsigned int *' lvalue ParmVar 0x14c00e1a8 'verify' 'unsigned int *'
    | `-ImplicitCastExpr 0x14c027ae8 <col:12> 'unsigned int' <IntegralCast>
    |   `-IntegerLiteral 0x14c027ac8 <col:12> 'int' 0
    |-IfStmt 0x14c0280b8 <line:20:2, line:27:3> has_else
    | |-BinaryOperator 0x14c027b98 <line:20:6, col:11> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x14c027b20 <col:6> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x14c027b78 <col:11> '<dependent type>' contains-errors lvalue
    | |-CompoundStmt 0x14c028070 <col:17, line:26:2>
    | | |-BinaryOperator 0x14c027de0 <line:21:3, col:36> 'int' contains-errors '='
    | | | |-DeclRefExpr 0x14c027bb8 <col:3> 'int' lvalue Var 0x14c027418 'ret' 'int'
    | | | `-CallExpr 0x14c027db0 <col:9, col:36> '<dependent type>' contains-errors
    | | |   |-DeclRefExpr 0x14c027cb8 <col:9> 'int ()' Function 0x14c027c00 'dane_state_init' 'int ()'
    | | |   |-UnaryOperator 0x14c027d98 <col:25, col:26> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | |   | `-RecoveryExpr 0x14c027d78 <col:26> '<dependent type>' contains-errors lvalue
    | | |   `-DeclRefExpr 0x14c027d08 <col:30> 'unsigned int' lvalue ParmVar 0x14c00e070 'sflags' 'unsigned int'
    | | `-IfStmt 0x14c028050 <line:22:3, line:25:3>
    | |   |-BinaryOperator 0x14c027e58 <line:22:7, col:13> 'int' '<'
    | |   | |-ImplicitCastExpr 0x14c027e40 <col:7> 'int' <LValueToRValue>
    | |   | | `-DeclRefExpr 0x14c027e00 <col:7> 'int' lvalue Var 0x14c027418 'ret' 'int'
    | |   | `-IntegerLiteral 0x14c027e20 <col:13> 'int' 0
    | |   `-CompoundStmt 0x14c028030 <col:16, line:25:3>
    | |     |-CallExpr 0x14c027fc8 <line:23:11, col:25> 'int'
    | |     | `-ImplicitCastExpr 0x14c027fb0 <col:11> 'int (*)()' <FunctionToPointerDecay>
    | |     |   `-DeclRefExpr 0x14c027f58 <col:11> 'int ()' Function 0x14c027ea0 'gnutls_assert' 'int ()'
    | |     `-ReturnStmt 0x14c028020 <line:24:4, col:11>
    | |       `-ImplicitCastExpr 0x14c028008 <col:11> 'int' <LValueToRValue>
    | |         `-DeclRefExpr 0x14c027fe8 <col:11> 'int' lvalue Var 0x14c027418 'ret' 'int'
    | `-NullStmt 0x14c0280b0 <line:27:3>
    |-BinaryOperator 0x14c0283b8 <line:29:2, col:53> 'int' contains-errors '='
    | |-DeclRefExpr 0x14c0280e8 <col:2> 'int' lvalue Var 0x14c027418 'ret' 'int'
    | `-CallExpr 0x14c028370 <col:8, col:53> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x14c0281e8 <col:8> 'int ()' Function 0x14c028130 'dane_query_tlsa' 'int ()'
    |   |-RecoveryExpr 0x14c028318 <col:24> '<dependent type>' contains-errors lvalue
    |   |-UnaryOperator 0x14c028358 <col:28, col:29> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | `-RecoveryExpr 0x14c028338 <col:29> '<dependent type>' contains-errors lvalue
    |   |-DeclRefExpr 0x14c028250 <col:32> 'const char *' lvalue ParmVar 0x14c00def0 'hostname' 'const char *'
    |   |-DeclRefExpr 0x14c028270 <col:42> 'const char *' lvalue ParmVar 0x14c00df70 'proto' 'const char *'
    |   `-DeclRefExpr 0x14c028290 <col:49> 'unsigned int' lvalue ParmVar 0x14c00dff0 'port' 'unsigned int'
    |-IfStmt 0x14b922f38 <line:30:2, line:33:2>
    | |-BinaryOperator 0x14b922e38 <line:30:6, col:12> 'int' '<'
    | | |-ImplicitCastExpr 0x14b922e20 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14c0283d8 <col:6> 'int' lvalue Var 0x14c027418 'ret' 'int'
    | | `-IntegerLiteral 0x14b922e00 <col:12> 'int' 0
    | `-CompoundStmt 0x14b922f18 <col:15, line:33:2>
    |   |-CallExpr 0x14b922e90 <line:31:10, col:24> 'int'
    |   | `-ImplicitCastExpr 0x14b922e78 <col:10> 'int (*)()' <FunctionToPointerDecay>
    |   |   `-DeclRefExpr 0x14b922e58 <col:10> 'int ()' Function 0x14c027ea0 'gnutls_assert' 'int ()'
    |   `-GotoStmt 0x14b922f00 <line:32:3, col:8> 'cleanup' 0x14b922eb0
    |-BinaryOperator 0x14b922fb0 <line:35:2, col:8> 'unsigned int' '='
    | |-DeclRefExpr 0x14b922f58 <col:2> 'unsigned int' lvalue Var 0x14c027700 'idx' 'unsigned int'
    | `-ImplicitCastExpr 0x14b922f98 <col:8> 'unsigned int' <IntegralCast>
    |   `-IntegerLiteral 0x14b922f78 <col:8> 'int' 0
    |-DoStmt 0x14b924420 <line:36:2, line:61:11>
    | |-CompoundStmt 0x14b923dc0 <line:36:5, line:61:2>
    | | |-BinaryOperator 0x14b923330 <line:37:3, col:63> 'int' contains-errors '='
    | | | |-DeclRefExpr 0x14b922fd0 <col:3> 'int' lvalue Var 0x14c027418 'ret' 'int'
    | | | `-CallExpr 0x14b9232e0 <col:9, col:63> '<dependent type>' contains-errors
    | | |   |-DeclRefExpr 0x14b9230d0 <col:9> 'int ()' Function 0x14b923018 'dane_query_data' 'int ()'
    | | |   |-RecoveryExpr 0x14b923288 <col:25> '<dependent type>' contains-errors lvalue
    | | |   |-UnaryOperator 0x14b923128 <col:28, col:31> 'unsigned int' postfix '++'
    | | |   | `-DeclRefExpr 0x14b923108 <col:28> 'unsigned int' lvalue Var 0x14c027700 'idx' 'unsigned int'
    | | |   |-UnaryOperator 0x14b923160 <col:35, col:36> 'unsigned int *' prefix '&' cannot overflow
    | | |   | `-DeclRefExpr 0x14b923140 <col:36> 'unsigned int' lvalue Var 0x14c027580 'usage' 'unsigned int'
    | | |   |-UnaryOperator 0x14b923198 <col:43, col:44> 'unsigned int *' prefix '&' cannot overflow
    | | |   | `-DeclRefExpr 0x14b923178 <col:44> 'unsigned int' lvalue Var 0x14c027600 'type' 'unsigned int'
    | | |   |-UnaryOperator 0x14b9231d0 <col:50, col:51> 'unsigned int *' prefix '&' cannot overflow
    | | |   | `-DeclRefExpr 0x14b9231b0 <col:51> 'unsigned int' lvalue Var 0x14c027680 'match' 'unsigned int'
    | | |   `-UnaryOperator 0x14b9232c8 <col:58, col:59> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | |     `-RecoveryExpr 0x14b9232a8 <col:59> '<dependent type>' contains-errors lvalue
    | | |-IfStmt 0x14b923398 <line:38:3, line:39:4>
    | | | |-RecoveryExpr 0x14b923370 <line:38:7, col:14> '_Bool' contains-errors
    | | | `-BreakStmt 0x14b923390 <line:39:4>
    | | |-IfStmt 0x14b9234c0 <line:41:3, line:44:3>
    | | | |-BinaryOperator 0x14b923410 <line:41:7, col:13> 'int' '<'
    | | | | |-ImplicitCastExpr 0x14b9233f8 <col:7> 'int' <LValueToRValue>
    | | | | | `-DeclRefExpr 0x14b9233b8 <col:7> 'int' lvalue Var 0x14c027418 'ret' 'int'
    | | | | `-IntegerLiteral 0x14b9233d8 <col:13> 'int' 0
    | | | `-CompoundStmt 0x14b9234a0 <col:16, line:44:3>
    | | |   |-CallExpr 0x14b923468 <line:42:4, col:18> 'int'
    | | |   | `-ImplicitCastExpr 0x14b923450 <col:4> 'int (*)()' <FunctionToPointerDecay>
    | | |   |   `-DeclRefExpr 0x14b923430 <col:4> 'int ()' Function 0x14c027ea0 'gnutls_assert' 'int ()'
    | | |   `-GotoStmt 0x14b923488 <line:43:4, col:9> 'cleanup' 0x14b922eb0
    | | `-IfStmt 0x14b923d90 <line:46:3, line:60:3> has_else
    | |   |-RecoveryExpr 0x14b923540 <line:46:7, col:118> '_Bool' contains-errors
    | |   |-CompoundStmt 0x14b9238e0 <col:121, line:53:3>
    | |   | |-IfStmt 0x14b923848 <line:48:4, line:51:25>
    | |   | | |-BinaryOperator 0x14b923798 <line:48:8, col:14> 'int' '<'
    | |   | | | |-ImplicitCastExpr 0x14b923780 <col:8> 'int' <LValueToRValue>
    | |   | | | | `-DeclRefExpr 0x14b923740 <col:8> 'int' lvalue Var 0x14c027418 'ret' 'int'
    | |   | | | `-IntegerLiteral 0x14b923760 <col:14> 'int' 0
    | |   | | `-CompoundStmt 0x14b923828 <col:17, line:51:25>
    | |   | |   |-CallExpr 0x14b9237f0 <line:49:5, col:19> 'int'
    | |   | |   | `-ImplicitCastExpr 0x14b9237d8 <col:5> 'int (*)()' <FunctionToPointerDecay>
    | |   | |   |   `-DeclRefExpr 0x14b9237b8 <col:5> 'int ()' Function 0x14c027ea0 'gnutls_assert' 'int ()'
    | |   | |   `-GotoStmt 0x14b923810 <line:50:5, col:10> 'cleanup' 0x14b922eb0
    | |   | `-BinaryOperator 0x14b9238c0 <line:52:25, col:35> 'unsigned int' '='
    | |   |   |-DeclRefExpr 0x14b923868 <col:25> 'unsigned int' lvalue Var 0x14c0274b0 'checked' 'unsigned int'
    | |   |   `-ImplicitCastExpr 0x14b9238a8 <col:35> 'unsigned int' <IntegralCast>
    | |   |     `-IntegerLiteral 0x14b923888 <col:35> 'int' 1
    | |   `-IfStmt 0x14b923d70 <line:53:10, line:60:3>
    | |     |-RecoveryExpr 0x14b923960 <line:53:14, col:125> '_Bool' contains-errors
    | |     `-CompoundStmt 0x14b923d50 <col:128, line:60:3>
    | |       |-IfStmt 0x14b923cb8 <line:55:4, line:58:25>
    | |       | |-BinaryOperator 0x14b923c08 <line:55:8, col:14> 'int' '<'
    | |       | | |-ImplicitCastExpr 0x14b923bf0 <col:8> 'int' <LValueToRValue>
    | |       | | | `-DeclRefExpr 0x14b923bb0 <col:8> 'int' lvalue Var 0x14c027418 'ret' 'int'
    | |       | | `-IntegerLiteral 0x14b923bd0 <col:14> 'int' 0
    | |       | `-CompoundStmt 0x14b923c98 <col:17, line:58:25>
    | |       |   |-CallExpr 0x14b923c60 <line:56:5, col:19> 'int'
    | |       |   | `-ImplicitCastExpr 0x14b923c48 <col:5> 'int (*)()' <FunctionToPointerDecay>
    | |       |   |   `-DeclRefExpr 0x14b923c28 <col:5> 'int ()' Function 0x14c027ea0 'gnutls_assert' 'int ()'
    | |       |   `-GotoStmt 0x14b923c80 <line:57:5, col:10> 'cleanup' 0x14b922eb0
    | |       `-BinaryOperator 0x14b923d30 <line:59:25, col:35> 'unsigned int' '='
    | |         |-DeclRefExpr 0x14b923cd8 <col:25> 'unsigned int' lvalue Var 0x14c0274b0 'checked' 'unsigned int'
    | |         `-ImplicitCastExpr 0x14b923d18 <col:35> 'unsigned int' <IntegralCast>
    | |           `-IntegerLiteral 0x14b923cf8 <col:35> 'int' 1
    | `-IntegerLiteral 0x14b924400 <line:61:10> 'int' 1
    |-IfStmt 0x14b9245b8 <line:63:2, line:66:9> has_else
    | |-RecoveryExpr 0x14b9244f0 <line:63:6, col:62> '_Bool' contains-errors
    | |-NullStmt 0x14b9245b0 <line:64:3>
    | `-BinaryOperator 0x14b924590 <line:66:3, col:9> 'int' '='
    |   |-DeclRefExpr 0x14b924550 <col:3> 'int' lvalue Var 0x14c027418 'ret' 'int'
    |   `-IntegerLiteral 0x14b924570 <col:9> 'int' 0
    |-LabelStmt 0x14b924730 <line:68:1, col:8> 'cleanup'
    | `-NullStmt 0x14b924728 <col:8>
    `-ReturnStmt 0x14b9248a8 <line:71:2, col:9>
      `-ImplicitCastExpr 0x14b924890 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x14b924870 <col:9> 'int' lvalue Var 0x14c027418 'ret' 'int'
