`-FunctionDecl 0x13c80e308  line:1:1 invalid array_to_datum_internal 'int (int *, int *, int *, int *, int, int, int, int, int *, int)'
  |-ParmVarDecl 0x13c80dd28 <col:25, col:29> col:29 referenced invalid av 'int *'
  |-ParmVarDecl 0x13c80dda8 <col:33, col:50> col:50 referenced invalid astate 'int *'
  |-ParmVarDecl 0x13c80de28 <line:2:7, col:12> col:12 used ndims 'int *'
  |-ParmVarDecl 0x13c80dea8 <col:19, col:24> col:24 used dims 'int *'
  |-ParmVarDecl 0x13c80df28 <col:30, col:34> col:34 used cur_depth 'int'
  |-ParmVarDecl 0x13c80dfa8 <line:3:7, col:11> col:11 invalid arraytypid 'int'
  |-ParmVarDecl 0x13c80e028 <col:23, col:27> col:27 invalid elemtypid 'int'
  |-ParmVarDecl 0x13c80e0a8 <col:38, col:44> col:44 invalid typmod 'int'
  |-ParmVarDecl 0x13c80e128 <line:4:7, col:17> col:17 invalid finfo 'int *'
  |-ParmVarDecl 0x13c80e1a8 <col:24, col:28> col:28 invalid typioparam 'int'
  `-CompoundStmt 0x13c82a188 <line:5:1, line:71:1>
    |-DeclStmt 0x13c827480 <line:6:2, col:9>
    | `-VarDecl 0x13c827418 <col:2, col:8> col:8 used i 'int'
    |-DeclStmt 0x13c827718 <line:7:2, col:28>
    | `-VarDecl 0x13c8274b0 <col:2, col:27> col:8 used len 'int' cinit
    |   `-BinaryOperator 0x13c8276f8 <col:14, col:27> '<dependent type>' contains-errors '+'
    |     |-CallExpr 0x13c8276b0 <col:14, col:23> '<dependent type>' contains-errors
    |     | |-DeclRefExpr 0x13c827670 <col:14> 'int ()' Function 0x13c8275b8 'av_len' 'int ()'
    |     | `-RecoveryExpr 0x13c827690 <col:21> '<dependent type>' contains-errors lvalue
    |     `-IntegerLiteral 0x13c8276d8 <col:27> 'int' 1
    |-ForStmt 0x13c82a120 <line:9:2, line:68:2>
    | |-BinaryOperator 0x13c827770 <line:9:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x13c827730 <col:7> 'int' lvalue Var 0x13c827418 'i' 'int'
    | | `-IntegerLiteral 0x13c827750 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x13c827800 <col:14, col:18> 'int' contains-errors '<'
    | | |-ImplicitCastExpr 0x13c8277d0 <col:14> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x13c827790 <col:14> 'int' lvalue Var 0x13c827418 'i' 'int'
    | | `-ImplicitCastExpr 0x13c8277e8 <col:18> 'int' contains-errors <LValueToRValue>
    | |   `-DeclRefExpr 0x13c8277b0 <col:18> 'int' contains-errors lvalue Var 0x13c8274b0 'len' 'int'
    | |-UnaryOperator 0x13c827840 <col:23, col:24> 'int' postfix '++'
    | | `-DeclRefExpr 0x13c827820 <col:23> 'int' lvalue Var 0x13c827418 'i' 'int'
    | `-CompoundStmt 0x13c82a108 <line:10:2, line:68:2>
    |   `-IfStmt 0x13c82a0d8 <line:18:3, line:67:3> has_else
    |     |-RecoveryExpr 0x13c827c70 <line:18:7> '<dependent type>' contains-errors lvalue
    |     |-CompoundStmt 0x13c829c10 <line:19:3, line:45:3>
    |     | `-IfStmt 0x13c829a00 <line:30:4, line:35:9> has_else
    |     |   |-BinaryOperator 0x13c828240 <line:30:8, col:28> 'int' '&&'
    |     |   | |-BinaryOperator 0x13c828160 <col:8, col:13> 'int' '=='
    |     |   | | |-ImplicitCastExpr 0x13c828148 <col:8> 'int' <LValueToRValue>
    |     |   | | | `-DeclRefExpr 0x13c828108 <col:8> 'int' lvalue Var 0x13c827418 'i' 'int'
    |     |   | | `-IntegerLiteral 0x13c828128 <col:13> 'int' 0
    |     |   | `-BinaryOperator 0x13c828220 <col:18, col:28> 'int' '=='
    |     |   |   |-ImplicitCastExpr 0x13c8281f0 <col:18, col:19> 'int' <LValueToRValue>
    |     |   |   | `-UnaryOperator 0x13c8281b8 <col:18, col:19> 'int' lvalue prefix '*' cannot overflow
    |     |   |   |   `-ImplicitCastExpr 0x13c8281a0 <col:19> 'int *' <LValueToRValue>
    |     |   |   |     `-DeclRefExpr 0x13c828180 <col:19> 'int *' lvalue ParmVar 0x13c80de28 'ndims' 'int *'
    |     |   |   `-ImplicitCastExpr 0x13c828208 <col:28> 'int' <LValueToRValue>
    |     |   |     `-DeclRefExpr 0x13c8281d0 <col:28> 'int' lvalue ParmVar 0x13c80df28 'cur_depth' 'int'
    |     |   |-CompoundStmt 0x13c8283e8 <line:31:4, line:34:4>
    |     |   | `-UnaryOperator 0x13c8283d0 <line:33:5, col:13> 'int' postfix '++'
    |     |   |   `-ParenExpr 0x13c8283b0 <col:5, col:12> 'int' lvalue
    |     |   |     `-UnaryOperator 0x13c828398 <col:6, col:7> 'int' lvalue prefix '*' cannot overflow
    |     |   |       `-ImplicitCastExpr 0x13c828380 <col:7> 'int *' <LValueToRValue>
    |     |   |         `-DeclRefExpr 0x13c828360 <col:7> 'int *' lvalue ParmVar 0x13c80de28 'ndims' 'int *'
    |     |   `-NullStmt 0x13c8299f8 <line:35:9>
    |     `-CompoundStmt 0x13c82a0c8 <line:47:3, line:67:3>
    `-ReturnStmt 0x13c82a178 <line:70:2, col:9>
      `-RecoveryExpr 0x13c82a158 <col:9> '<dependent type>' contains-errors lvalue
