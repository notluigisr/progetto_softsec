`-FunctionDecl 0x12b89d288  line:1:1 invalid get_bad_opt 'int (char *, int *)'
  |-ParmVarDecl 0x12b89d0f0 <col:13, col:21> col:21 used p 'char *'
  |-ParmVarDecl 0x12b89d1a8 <col:24, col:33> col:33 referenced invalid eap 'int *'
  `-CompoundStmt 0x12b8b62a0 <line:2:1, line:12:1>
    |-IfStmt 0x12b8b6228 <line:3:5, line:10:9> has_else
    | |-BinaryOperator 0x12b89d608 <line:3:9, col:30> 'int' '=='
    | | |-CallExpr 0x12b89d588 <col:9, col:25> 'int'
    | | | |-ImplicitCastExpr 0x12b89d570 <col:9> 'int (*)()' <FunctionToPointerDecay>
    | | | | `-DeclRefExpr 0x12b89d4a0 <col:9> 'int ()' Function 0x12b89d3e8 'STRICMP' 'int ()'
    | | | |-ImplicitCastExpr 0x12b89d5b8 <col:17> 'char *' <LValueToRValue>
    | | | | `-DeclRefExpr 0x12b89d4c0 <col:17> 'char *' lvalue ParmVar 0x12b89d0f0 'p' 'char *'
    | | | `-ImplicitCastExpr 0x12b89d5d0 <col:20> 'char *' <ArrayToPointerDecay>
    | | |   `-StringLiteral 0x12b89d520 <col:20> 'char[4]' lvalue "STR"
    | | `-IntegerLiteral 0x12b89d5e8 <col:30> 'int' 0
    | |-BinaryOperator 0x12b89d710 <line:4:2, col:18> '<dependent type>' contains-errors '='
    | | |-CXXDependentScopeMemberExpr 0x12b89d670 <col:2, col:7> '<dependent type>' contains-errors lvalue ->bad_char
    | | | `-RecoveryExpr 0x12b89d648 <col:2> '<dependent type>' contains-errors lvalue
    | | |   `-DeclRefExpr 0x12b89d628 <col:2> 'int *' lvalue ParmVar 0x12b89d1a8 'eap' 'int *'
    | | `-RecoveryExpr 0x12b89d6f0 <col:18> '<dependent type>' contains-errors lvalue
    | `-IfStmt 0x12b8b61f8 <line:5:10, line:10:9> has_else
    |   |-BinaryOperator 0x12b8b5a38 <line:5:14, col:35> 'int' '=='
    |   | |-CallExpr 0x12b89d7a8 <col:14, col:30> 'int'
    |   | | |-ImplicitCastExpr 0x12b89d790 <col:14> 'int (*)()' <FunctionToPointerDecay>
    |   | | | `-DeclRefExpr 0x12b89d730 <col:14> 'int ()' Function 0x12b89d3e8 'STRICMP' 'int ()'
    |   | | |-ImplicitCastExpr 0x12b89d7d8 <col:22> 'char *' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x12b89d750 <col:22> 'char *' lvalue ParmVar 0x12b89d0f0 'p' 'char *'
    |   | | `-ImplicitCastExpr 0x12b8b5a00 <col:25> 'char *' <ArrayToPointerDecay>
    |   | |   `-StringLiteral 0x12b89d770 <col:25> 'char[4]' lvalue "STR"
    |   | `-IntegerLiteral 0x12b8b5a18 <col:35> 'int' 0
    |   |-BinaryOperator 0x12b8b5b40 <line:6:2, col:18> '<dependent type>' contains-errors '='
    |   | |-CXXDependentScopeMemberExpr 0x12b8b5aa0 <col:2, col:7> '<dependent type>' contains-errors lvalue ->bad_char
    |   | | `-RecoveryExpr 0x12b8b5a78 <col:2> '<dependent type>' contains-errors lvalue
    |   | |   `-DeclRefExpr 0x12b8b5a58 <col:2> 'int *' lvalue ParmVar 0x12b89d1a8 'eap' 'int *'
    |   | `-RecoveryExpr 0x12b8b5b20 <col:18> '<dependent type>' contains-errors lvalue
    |   `-IfStmt 0x12b8b61c8 <line:7:10, line:10:9> has_else
    |     |-BinaryOperator 0x12b8b6060 <line:7:14, col:46> 'int' contains-errors '&&'
    |     | |-BinaryOperator 0x12b8b5fc8 <col:14, col:33> 'int' '=='
    |     | | |-CallExpr 0x12b8b5f70 <col:14, col:28> 'int'
    |     | | | |-ImplicitCastExpr 0x12b8b5f58 <col:14> 'int (*)()' <FunctionToPointerDecay>
    |     | | | | `-DeclRefExpr 0x12b8b5c40 <col:14> 'int ()' Function 0x12b8b5b88 'MB_BYTE2LEN' 'int ()'
    |     | | | `-ImplicitCastExpr 0x12b8b5fb0 <col:26, col:27> 'int' <IntegralCast>
    |     | | |   `-ImplicitCastExpr 0x12b8b5f98 <col:26, col:27> 'char' <LValueToRValue>
    |     | | |     `-UnaryOperator 0x12b8b5f40 <col:26, col:27> 'char' lvalue prefix '*' cannot overflow
    |     | | |       `-ImplicitCastExpr 0x12b8b5f28 <col:27> 'char *' <LValueToRValue>
    |     | | |         `-DeclRefExpr 0x12b8b5c60 <col:27> 'char *' lvalue ParmVar 0x12b89d0f0 'p' 'char *'
    |     | | `-IntegerLiteral 0x12b8b5d20 <col:33> 'int' 1
    |     | `-BinaryOperator 0x12b8b6040 <col:38, col:46> 'int' contains-errors '=='
    |     |   |-ArraySubscriptExpr 0x12b8b6000 <col:38, col:41> 'char' lvalue
    |     |   | |-ImplicitCastExpr 0x12b8b5fe8 <col:38> 'char *' <LValueToRValue>
    |     |   | | `-DeclRefExpr 0x12b8b5d60 <col:38> 'char *' lvalue ParmVar 0x12b89d0f0 'p' 'char *'
    |     |   | `-IntegerLiteral 0x12b8b5d80 <col:40> 'int' 1
    |     |   `-RecoveryExpr 0x12b8b6020 <col:46> '<dependent type>' contains-errors lvalue
    |     |-BinaryOperator 0x12b8b6160 <line:8:2, col:19> '<dependent type>' contains-errors '='
    |     | |-CXXDependentScopeMemberExpr 0x12b8b60c8 <col:2, col:7> '<dependent type>' contains-errors lvalue ->bad_char
    |     | | `-RecoveryExpr 0x12b8b60a0 <col:2> '<dependent type>' contains-errors lvalue
    |     | |   `-DeclRefExpr 0x12b8b6080 <col:2> 'int *' lvalue ParmVar 0x12b89d1a8 'eap' 'int *'
    |     | `-UnaryOperator 0x12b8b6148 <col:18, col:19> 'char' lvalue prefix '*' cannot overflow
    |     |   `-ImplicitCastExpr 0x12b8b6130 <col:19> 'char *' <LValueToRValue>
    |     |     `-DeclRefExpr 0x12b8b6110 <col:19> 'char *' lvalue ParmVar 0x12b89d0f0 'p' 'char *'
    |     `-ReturnStmt 0x12b8b61b8 <line:10:2, col:9>
    |       `-RecoveryExpr 0x12b8b6198 <col:9> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x12b8b6290 <line:11:5, col:12>
      `-RecoveryExpr 0x12b8b6270 <col:12> '<dependent type>' contains-errors lvalue
