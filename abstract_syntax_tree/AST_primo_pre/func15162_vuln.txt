`-FunctionDecl 0x14a80ddc8  line:1:1 create_worker_threads 'int (int)'
  |-ParmVarDecl 0x14a80dcf0 <col:23, col:28> col:28 used n 'int'
  `-CompoundStmt 0x14a8290c0 <line:2:1, line:58:1>
    |-DeclStmt 0x14a80df58 <line:4:2, col:11>
    | `-VarDecl 0x14a80def0 <col:2, col:10> col:10 used i 'int'
    |-ForStmt 0x14a828c90 <line:9:2, line:42:2>
    | |-BinaryOperator 0x14a80dfc8 <line:9:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x14a80df88 <col:7> 'int' lvalue Var 0x14a80def0 'i' 'int'
    | | `-IntegerLiteral 0x14a80dfa8 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x14a80e058 <col:14, col:18> 'int' '<'
    | | |-ImplicitCastExpr 0x14a80e028 <col:14> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14a80dfe8 <col:14> 'int' lvalue Var 0x14a80def0 'i' 'int'
    | | `-ImplicitCastExpr 0x14a80e040 <col:18> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x14a80e008 <col:18> 'int' lvalue ParmVar 0x14a80dcf0 'n' 'int'
    | |-UnaryOperator 0x14a80e098 <col:21, col:22> 'int' postfix '++'
    | | `-DeclRefExpr 0x14a80e078 <col:21> 'int' lvalue Var 0x14a80def0 'i' 'int'
    | `-CompoundStmt 0x14a828c68 <col:26, line:42:2>
    |   |-IfStmt 0x14a8286c0 <line:22:3, line:25:3>
    |   | |-RecoveryExpr 0x14a828620 <line:22:7, line:23:46> '_Bool' contains-errors
    |   | `-CompoundStmt 0x14a8286a8 <col:49, line:25:3>
    |   |   `-GotoStmt 0x14a828690 <line:24:4, col:9> 'err' 0x14a828640
    |   |-IfStmt 0x14a828770 <line:28:3, line:31:3>
    |   | |-RecoveryExpr 0x14a828720 <line:28:7, line:29:46> '_Bool' contains-errors
    |   | `-CompoundStmt 0x14a828758 <col:49, line:31:3>
    |   |   `-GotoStmt 0x14a828740 <line:30:4, col:9> 'err' 0x14a828640
    |   `-IfStmt 0x14a828c48 <line:35:3, line:41:3>
    |     |-RecoveryExpr 0x14a828990 <line:35:7, line:36:11> '_Bool' contains-errors
    |     `-CompoundStmt 0x14a828c30 <col:14, line:41:3>
    |       `-GotoStmt 0x14a828c18 <line:40:4, col:9> 'err' 0x14a828640
    |-ForStmt 0x14a828f60 <line:45:2, line:51:2>
    | |-BinaryOperator 0x14a828d08 <line:45:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x14a828cc8 <col:7> 'int' lvalue Var 0x14a80def0 'i' 'int'
    | | `-IntegerLiteral 0x14a828ce8 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x14a828d98 <col:14, col:18> 'int' '<'
    | | |-ImplicitCastExpr 0x14a828d68 <col:14> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14a828d28 <col:14> 'int' lvalue Var 0x14a80def0 'i' 'int'
    | | `-ImplicitCastExpr 0x14a828d80 <col:18> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x14a828d48 <col:18> 'int' lvalue ParmVar 0x14a80dcf0 'n' 'int'
    | |-UnaryOperator 0x14a828dd8 <col:21, col:22> 'int' postfix '++'
    | | `-DeclRefExpr 0x14a828db8 <col:21> 'int' lvalue Var 0x14a80def0 'i' 'int'
    | `-CompoundStmt 0x14a828f50 <col:26, line:51:2>
    `-LabelStmt 0x14a8290a0 <line:55:1, col:4> 'err'
      `-NullStmt 0x14a829098 <col:4>
