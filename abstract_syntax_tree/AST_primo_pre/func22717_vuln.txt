`-FunctionDecl 0x13f00df48  line:1:20 div_long_long_rem_signed 'long (const long long, const long, long *)' static inline
  |-ParmVarDecl 0x13f00dcd8 <col:45, col:61> col:61 used dividend 'const long long'
  |-ParmVarDecl 0x13f00dd58 <line:2:10, col:21> col:21 used divisor 'const long'
  |-ParmVarDecl 0x13f00de08 <col:30, col:36> col:36 used remainder 'long *'
  `-CompoundStmt 0x13f027f50 <line:3:1, line:13:1>
    |-DeclStmt 0x13f00e0d0 <line:4:2, col:10>
    | `-VarDecl 0x13f00e068 <col:2, col:7> col:7 used res 'long'
    |-IfStmt 0x13f027ed8 <line:6:2, line:10:55> has_else
    | |-CallExpr 0x13f00e308 <line:6:6, col:27> 'int'
    | | |-ImplicitCastExpr 0x13f00e2f0 <col:6> 'int (*)()' <FunctionToPointerDecay>
    | | | `-DeclRefExpr 0x13f00e210 <col:6> 'int ()' Function 0x13f00e158 'unlikely' 'int ()'
    | | `-BinaryOperator 0x13f00e2a0 <col:15, col:26> 'int' '<'
    | |   |-ImplicitCastExpr 0x13f00e270 <col:15> 'long long' <LValueToRValue>
    | |   | `-DeclRefExpr 0x13f00e230 <col:15> 'const long long' lvalue ParmVar 0x13f00dcd8 'dividend' 'const long long'
    | |   `-ImplicitCastExpr 0x13f00e288 <col:26> 'long long' <IntegralCast>
    | |     `-IntegerLiteral 0x13f00e250 <col:26> 'int' 0
    | |-CompoundStmt 0x13f027d48 <col:30, line:9:2>
    | | |-BinaryOperator 0x13f027c18 <line:7:3, col:57> 'long' '='
    | | | |-DeclRefExpr 0x13f00e330 <col:3> 'long' lvalue Var 0x13f00e068 'res' 'long'
    | | | `-ImplicitCastExpr 0x13f027c00 <col:9, col:57> 'long' <IntegralCast>
    | | |   `-UnaryOperator 0x13f027be8 <col:9, col:57> 'int' prefix '-'
    | | |     `-CallExpr 0x13f027b80 <col:10, col:57> 'int'
    | | |       |-ImplicitCastExpr 0x13f027b68 <col:10> 'int (*)()' <FunctionToPointerDecay>
    | | |       | `-DeclRefExpr 0x13f027ab8 <col:10> 'int ()' Function 0x13f027a00 'div_long_long_rem' 'int ()'
    | | |       |-UnaryOperator 0x13f027b10 <col:28, col:29> 'long long' prefix '-'
    | | |       | `-ImplicitCastExpr 0x13f027af8 <col:29> 'long long' <LValueToRValue>
    | | |       |   `-DeclRefExpr 0x13f027ad8 <col:29> 'const long long' lvalue ParmVar 0x13f00dcd8 'dividend' 'const long long'
    | | |       |-ImplicitCastExpr 0x13f027bb8 <col:39> 'long' <LValueToRValue>
    | | |       | `-DeclRefExpr 0x13f027b28 <col:39> 'const long' lvalue ParmVar 0x13f00dd58 'divisor' 'const long'
    | | |       `-ImplicitCastExpr 0x13f027bd0 <col:48> 'long *' <LValueToRValue>
    | | |         `-DeclRefExpr 0x13f027b48 <col:48> 'long *' lvalue ParmVar 0x13f00de08 'remainder' 'long *'
    | | `-BinaryOperator 0x13f027d28 <line:8:3, col:28> 'long' '='
    | |   |-UnaryOperator 0x13f027c70 <col:3, col:4> 'long' lvalue prefix '*' cannot overflow
    | |   | `-ImplicitCastExpr 0x13f027c58 <col:4> 'long *' <LValueToRValue>
    | |   |   `-DeclRefExpr 0x13f027c38 <col:4> 'long *' lvalue ParmVar 0x13f00de08 'remainder' 'long *'
    | |   `-UnaryOperator 0x13f027d10 <col:16, col:28> 'long' prefix '-'
    | |     `-ImplicitCastExpr 0x13f027cf8 <col:17, col:28> 'long' <LValueToRValue>
    | |       `-ParenExpr 0x13f027cd8 <col:17, col:28> 'long' lvalue
    | |         `-UnaryOperator 0x13f027cc0 <col:18, col:19> 'long' lvalue prefix '*' cannot overflow
    | |           `-ImplicitCastExpr 0x13f027ca8 <col:19> 'long *' <LValueToRValue>
    | |             `-DeclRefExpr 0x13f027c88 <col:19> 'long *' lvalue ParmVar 0x13f00de08 'remainder' 'long *'
    | `-BinaryOperator 0x13f027eb8 <line:10:3, col:55> 'long' '='
    |   |-DeclRefExpr 0x13f027d68 <col:3> 'long' lvalue Var 0x13f00e068 'res' 'long'
    |   `-ImplicitCastExpr 0x13f027ea0 <col:9, col:55> 'long' <IntegralCast>
    |     `-CallExpr 0x13f027e20 <col:9, col:55> 'int'
    |       |-ImplicitCastExpr 0x13f027e08 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |       | `-DeclRefExpr 0x13f027d88 <col:9> 'int ()' Function 0x13f027a00 'div_long_long_rem' 'int ()'
    |       |-ImplicitCastExpr 0x13f027e58 <col:27> 'long long' <LValueToRValue>
    |       | `-DeclRefExpr 0x13f027da8 <col:27> 'const long long' lvalue ParmVar 0x13f00dcd8 'dividend' 'const long long'
    |       |-ImplicitCastExpr 0x13f027e70 <col:37> 'long' <LValueToRValue>
    |       | `-DeclRefExpr 0x13f027dc8 <col:37> 'const long' lvalue ParmVar 0x13f00dd58 'divisor' 'const long'
    |       `-ImplicitCastExpr 0x13f027e88 <col:46> 'long *' <LValueToRValue>
    |         `-DeclRefExpr 0x13f027de8 <col:46> 'long *' lvalue ParmVar 0x13f00de08 'remainder' 'long *'
    `-ReturnStmt 0x13f027f40 <line:12:2, col:9>
      `-ImplicitCastExpr 0x13f027f28 <col:9> 'long' <LValueToRValue>
        `-DeclRefExpr 0x13f027f08 <col:9> 'long' lvalue Var 0x13f00e068 'res' 'long'
