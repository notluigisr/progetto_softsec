`-FunctionDecl 0x133140d88  line:1:1 invalid glue 'int (int (*)(), int)'
  |-ParmVarDecl 0x133128180 <col:6, <invalid sloc>> col:6 invalid glue 'int (*)()'
  |-ParmVarDecl 0x133128200 <col:53> col:53 _16 'int'
  `-CompoundStmt 0x1331414b8 <line:8:1, line:22:1>
    |-DeclStmt 0x133140f58 <line:9:5, col:12>
    | |-VarDecl 0x133140e58 <col:5, col:9> col:9 used x 'int'
    | `-VarDecl 0x133140ed8 <col:5, col:11> col:11 used y 'int'
    `-ForStmt 0x133141480 <line:13:5, line:21:5>
      |-BinaryOperator 0x133140fe0 <line:13:10, col:14> 'int' '='
      | |-DeclRefExpr 0x133140fa0 <col:10> 'int' lvalue Var 0x133140ed8 'y' 'int'
      | `-IntegerLiteral 0x133140fc0 <col:14> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x133141078 <col:17, col:21> 'int' contains-errors '<'
      | |-DeclRefExpr 0x133141000 <col:17> 'int' lvalue Var 0x133140ed8 'y' 'int'
      | `-RecoveryExpr 0x133141058 <col:21> '<dependent type>' contains-errors lvalue
      |-UnaryOperator 0x1331410b8 <col:32, col:33> 'int' postfix '++'
      | `-DeclRefExpr 0x133141098 <col:32> 'int' lvalue Var 0x133140ed8 'y' 'int'
      `-CompoundStmt 0x133141468 <col:37, line:21:5>
        `-ForStmt 0x133141430 <line:14:9, line:18:9>
          |-BinaryOperator 0x133141110 <line:14:14, col:18> 'int' '='
          | |-DeclRefExpr 0x1331410d0 <col:14> 'int' lvalue Var 0x133140e58 'x' 'int'
          | `-IntegerLiteral 0x1331410f0 <col:18> 'int' 0
          |-<<<NULL>>>
          |-BinaryOperator 0x1331411a8 <col:21, col:25> 'int' contains-errors '<'
          | |-DeclRefExpr 0x133141130 <col:21> 'int' lvalue Var 0x133140e58 'x' 'int'
          | `-RecoveryExpr 0x133141188 <col:25> '<dependent type>' contains-errors lvalue
          |-CompoundAssignOperator 0x133141208 <col:35, col:38> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
          | |-DeclRefExpr 0x1331411c8 <col:35> 'int' lvalue Var 0x133140e58 'x' 'int'
          | `-IntegerLiteral 0x1331411e8 <col:38> 'int' 2
          `-CompoundStmt 0x133141420 <col:41, line:18:9>
