`-FunctionDecl 0x1221282e8  line:1:5 invalid bn_cmp_words 'int (const int *, const int *, int)'
  |-ParmVarDecl 0x1221280f0 <col:18, col:34> col:34 invalid a 'const int *'
  |-ParmVarDecl 0x122128170 <col:37, col:53> col:53 invalid b 'const int *'
  |-ParmVarDecl 0x1221281f0 <col:56, col:60> col:60 used n 'int'
  `-CompoundStmt 0x122141fc0 <line:2:1, line:17:1>
    |-DeclStmt 0x122128428 <line:3:5, col:10>
    | `-VarDecl 0x1221283c0 <col:5, col:9> col:9 used i 'int'
    |-ForStmt 0x122141f38 <line:10:5, line:15:5>
    | |-BinaryOperator 0x1221287d0 <line:10:10, col:18> 'int' '='
    | | |-DeclRefExpr 0x122128738 <col:10> 'int' lvalue Var 0x1221283c0 'i' 'int'
    | | `-BinaryOperator 0x1221287b0 <col:14, col:18> 'int' '-'
    | |   |-ImplicitCastExpr 0x122128798 <col:14> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x122128758 <col:14> 'int' lvalue ParmVar 0x1221281f0 'n' 'int'
    | |   `-IntegerLiteral 0x122128778 <col:18> 'int' 2
    | |-<<<NULL>>>
    | |-BinaryOperator 0x122141c58 <col:21, col:26> 'int' '>='
    | | |-ImplicitCastExpr 0x122141c40 <col:21> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x122141c00 <col:21> 'int' lvalue Var 0x1221283c0 'i' 'int'
    | | `-IntegerLiteral 0x122141c20 <col:26> 'int' 0
    | |-UnaryOperator 0x122141c98 <col:29, col:30> 'int' postfix '--'
    | | `-DeclRefExpr 0x122141c78 <col:29> 'int' lvalue Var 0x1221283c0 'i' 'int'
    | `-CompoundStmt 0x122141f28 <col:34, line:15:5>
    `-ReturnStmt 0x122141fb0 <line:16:5, col:14>
      `-ParenExpr 0x122141f90 <col:12, col:14> 'int'
        `-IntegerLiteral 0x122141f70 <col:13> 'int' 0
