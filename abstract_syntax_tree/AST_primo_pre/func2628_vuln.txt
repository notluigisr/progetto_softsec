`-FunctionDecl 0x125128e38  line:1:12 invalid wc_ecc_shared_secret_gen_sync 'int (int *, int *, int *, int *, int *)' static
  |-ParmVarDecl 0x125128b28 <col:42, col:51> col:51 invalid private_key 'int *'
  |-ParmVarDecl 0x125128ba8 <col:64, col:75> col:75 referenced invalid point 'int *'
  |-ParmVarDecl 0x125128c28 <line:2:32, col:38> col:38 invalid out 'int *'
  |-ParmVarDecl 0x125128ca8 <col:43, col:51> col:51 invalid outlen 'int *'
  |-ParmVarDecl 0x125128d28 <col:59, col:75> col:75 invalid curve 'int *'
  `-CompoundStmt 0x125143110 <line:3:1, line:90:1>
    |-DeclStmt 0x125128f88 <line:4:5, col:12>
    | `-VarDecl 0x125128f20 <col:5, col:9> col:9 used err 'int'
    |-BinaryOperator 0x125129130 <line:9:5, col:31> '<dependent type>' contains-errors '='
    | |-BinaryOperator 0x125129110 <col:5, col:13> '<dependent type>' contains-errors '*'
    | | |-RecoveryExpr 0x125128ff0 <col:5> '<dependent type>' contains-errors lvalue
    | | | `-DeclRefExpr 0x125128fd0 <col:5> 'int *' lvalue ParmVar 0x125128ba8 'point' 'int *'
    | | `-RecoveryExpr 0x1251290f0 <col:13> '<dependent type>' contains-errors lvalue
    | `-UnaryOperator 0x1251290b8 <col:17, col:31> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   `-CXXDependentScopeMemberExpr 0x125129070 <col:18, col:31> '<dependent type>' contains-errors lvalue ->k
    |     `-RecoveryExpr 0x125129050 <col:18> '<dependent type>' contains-errors lvalue
    |-CompoundStmt 0x125143098 <line:54:5, line:82:5>
    | |-IfStmt 0x125142478 <line:57:9, line:63:9>
    | | |-BinaryOperator 0x1251423f8 <line:57:13, col:23> 'int' contains-errors '=='
    | | | |-RecoveryExpr 0x1251423b8 <col:13> '<dependent type>' contains-errors lvalue
    | | | `-RecoveryExpr 0x1251423d8 <col:23> '<dependent type>' contains-errors lvalue
    | | `-CompoundStmt 0x125142460 <col:29, line:63:9>
    | |   `-ReturnStmt 0x125142450 <line:62:13, col:20>
    | |     `-RecoveryExpr 0x125142430 <col:20> '<dependent type>' contains-errors lvalue
    | |-BinaryOperator 0x125142870 <line:65:9, line:66:79> 'int' contains-errors '='
    | | |-DeclRefExpr 0x125142498 <line:65:9> 'int' lvalue Var 0x125128f20 'err' 'int'
    | | `-CallExpr 0x125142818 <col:15, line:66:79> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x125142598 <line:65:15> 'int ()' Function 0x1251424e0 'wc_ecc_mulmod_ex' 'int ()'
    | |   |-RecoveryExpr 0x1251427d8 <col:32> '<dependent type>' contains-errors lvalue
    | |   |-RecoveryExpr 0x1251425d0 <col:35> '<dependent type>' contains-errors lvalue
    | |   |-RecoveryExpr 0x1251427f8 <col:42> '<dependent type>' contains-errors lvalue
    | |   |-CXXDependentScopeMemberExpr 0x125142628 <col:50, col:57> '<dependent type>' contains-errors lvalue ->Af
    | |   | `-RecoveryExpr 0x125142608 <col:50> '<dependent type>' contains-errors lvalue
    | |   |-CXXDependentScopeMemberExpr 0x125142690 <col:61, col:68> '<dependent type>' contains-errors lvalue ->prime
    | |   | `-RecoveryExpr 0x125142670 <col:61> '<dependent type>' contains-errors lvalue
    | |   |-IntegerLiteral 0x1251426d8 <col:75> 'int' 1
    | |   `-CXXDependentScopeMemberExpr 0x125142718 <line:66:62, col:75> '<dependent type>' contains-errors lvalue ->heap
    | |     `-RecoveryExpr 0x1251426f8 <col:62> '<dependent type>' contains-errors lvalue
    | |-IfStmt 0x125142bb0 <line:67:9, line:72:9>
    | | |-BinaryOperator 0x125142908 <line:67:13, col:20> 'int' contains-errors '=='
    | | | |-DeclRefExpr 0x125142890 <col:13> 'int' lvalue Var 0x125128f20 'err' 'int'
    | | | `-RecoveryExpr 0x1251428e8 <col:20> '<dependent type>' contains-errors lvalue
    | | `-CompoundStmt 0x125142b98 <col:29, line:72:9>
    | |   `-IfStmt 0x125142b78 <line:69:13, line:71:13>
    | |     |-RecoveryExpr 0x125142b28 <line:69:17, col:71> '_Bool' contains-errors
    | |     `-CompoundStmt 0x125142b68 <col:74, line:71:13>
    | `-IfStmt 0x125142ec0 <line:74:9, line:78:9>
    |   |-RecoveryExpr 0x125142bf0 <line:74:13, col:20> '_Bool' contains-errors
    |   `-CompoundStmt 0x125142eb0 <col:29, line:78:9>
    `-ReturnStmt 0x125143100 <line:89:5, col:12>
      `-ImplicitCastExpr 0x1251430e8 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x1251430c8 <col:12> 'int' lvalue Var 0x125128f20 'err' 'int'
