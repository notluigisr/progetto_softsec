`-FunctionDecl 0x11e80e358  line:1:12 __blk_rq_unmap_user 'int (struct bio *)' static
  |-ParmVarDecl 0x11e80e248 <col:32, col:44> col:44 used bio 'struct bio *'
  `-CompoundStmt 0x11e82af60 <line:2:1, line:13:1>
    |-DeclStmt 0x11e82a8f0 <line:3:2, col:13>
    | `-VarDecl 0x11e82a868 <col:2, col:12> col:6 used ret 'int' cinit
    |   `-IntegerLiteral 0x11e82a8d0 <col:12> 'int' 0
    |-IfStmt 0x11e82aef8 <line:5:2, line:10:2>
    | |-ImplicitCastExpr 0x11e82a928 <line:5:6> 'struct bio *' <LValueToRValue>
    | | `-DeclRefExpr 0x11e82a908 <col:6> 'struct bio *' lvalue ParmVar 0x11e80e248 'bio' 'struct bio *'
    | `-CompoundStmt 0x11e82aee0 <col:11, line:10:2>
    |   `-IfStmt 0x11e82aeb0 <line:6:3, line:9:29> has_else
    |     |-CallExpr 0x11e82ab18 <line:6:7, col:39> '<dependent type>' contains-errors
    |     | |-DeclRefExpr 0x11e82aa70 <col:7> 'int ()' Function 0x11e82a9b8 'bio_flagged' 'int ()'
    |     | |-DeclRefExpr 0x11e82aa90 <col:19> 'struct bio *' lvalue ParmVar 0x11e80e248 'bio' 'struct bio *'
    |     | `-RecoveryExpr 0x11e82aaf8 <col:24> '<dependent type>' contains-errors lvalue
    |     |-CallExpr 0x11e82acb8 <line:7:4, col:22> 'int'
    |     | |-ImplicitCastExpr 0x11e82aca0 <col:4> 'int (*)()' <FunctionToPointerDecay>
    |     | | `-DeclRefExpr 0x11e82ac28 <col:4> 'int ()' Function 0x11e82ab70 'bio_unmap_user' 'int ()'
    |     | `-ImplicitCastExpr 0x11e82ace0 <col:19> 'struct bio *' <LValueToRValue>
    |     |   `-DeclRefExpr 0x11e82ac48 <col:19> 'struct bio *' lvalue ParmVar 0x11e80e248 'bio' 'struct bio *'
    |     `-BinaryOperator 0x11e82ae90 <line:9:4, col:29> 'int' '='
    |       |-DeclRefExpr 0x11e82acf8 <col:4> 'int' lvalue Var 0x11e82a868 'ret' 'int'
    |       `-CallExpr 0x11e82ae50 <col:10, col:29> 'int'
    |         |-ImplicitCastExpr 0x11e82ae38 <col:10> 'int (*)()' <FunctionToPointerDecay>
    |         | `-DeclRefExpr 0x11e82adf8 <col:10> 'int ()' Function 0x11e82ad40 'bio_uncopy_user' 'int ()'
    |         `-ImplicitCastExpr 0x11e82ae78 <col:26> 'struct bio *' <LValueToRValue>
    |           `-DeclRefExpr 0x11e82ae18 <col:26> 'struct bio *' lvalue ParmVar 0x11e80e248 'bio' 'struct bio *'
    `-ReturnStmt 0x11e82af50 <line:12:2, col:9>
      `-ImplicitCastExpr 0x11e82af38 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x11e82af18 <col:9> 'int' lvalue Var 0x11e82a868 'ret' 'int'
