`-FunctionDecl 0x135928318  line:1:20 invalid getenv_harder 'const char *(int *, const char *, const char *)' static
  |-ParmVarDecl 0x135928128 <col:34, col:48> col:48 invalid handle 'int *'
  |-ParmVarDecl 0x1359281a8 <col:56, col:68> col:68 used key 'const char *'
  |-ParmVarDecl 0x135928228 <col:73, col:85> col:85 used fallback 'const char *'
  `-CompoundStmt 0x136009c10 <col:95, line:18:1>
    |-DeclStmt 0x135928458 <line:2:9, col:22>
    | `-VarDecl 0x1359283f0 <col:9, col:21> col:21 used v 'const char *'
    |-CallExpr 0x135928610 <line:4:9, col:22> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x1359285d0 <col:9> 'int ()' Function 0x135928518 'assert' 'int ()'
    | `-RecoveryExpr 0x1359285f0 <col:16> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x1359286c8 <line:5:9, col:19> 'int'
    | |-ImplicitCastExpr 0x1359286b0 <col:9> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x135928638 <col:9> 'int ()' Function 0x135928518 'assert' 'int ()'
    | `-ImplicitCastExpr 0x1359286f0 <col:16> 'const char *' <LValueToRValue>
    |   `-DeclRefExpr 0x135928658 <col:16> 'const char *' lvalue ParmVar 0x1359281a8 'key' 'const char *'
    |-BinaryOperator 0x1360092a0 <line:9:9, col:35> 'const char *' contains-errors '='
    | |-DeclRefExpr 0x135928708 <col:9> 'const char *' lvalue Var 0x1359283f0 'v' 'const char *'
    | `-CallExpr 0x136009270 <col:13, col:35> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x136009210 <col:13> 'int ()' Function 0x135928750 'pam_getenv' 'int ()'
    |   |-RecoveryExpr 0x136009230 <col:24> '<dependent type>' contains-errors lvalue
    |   `-DeclRefExpr 0x136009250 <col:32> 'const char *' lvalue ParmVar 0x1359281a8 'key' 'const char *'
    |-IfStmt 0x136009498 <line:10:9, line:11:24>
    | |-UnaryOperator 0x136009438 <line:10:13, col:23> 'int' prefix '!' cannot overflow
    | | `-CallExpr 0x1360093f8 <col:14, col:23> 'int'
    | |   |-ImplicitCastExpr 0x1360093e0 <col:14> 'int (*)()' <FunctionToPointerDecay>
    | |   | `-DeclRefExpr 0x1360093a0 <col:14> 'int ()' Function 0x1360092e8 'isempty' 'int ()'
    | |   `-ImplicitCastExpr 0x136009420 <col:22> 'const char *' <LValueToRValue>
    | |     `-DeclRefExpr 0x1360093c0 <col:22> 'const char *' lvalue Var 0x1359283f0 'v' 'const char *'
    | `-ReturnStmt 0x136009488 <line:11:17, col:24>
    |   `-ImplicitCastExpr 0x136009470 <col:24> 'const char *' <LValueToRValue>
    |     `-DeclRefExpr 0x136009450 <col:24> 'const char *' lvalue Var 0x1359283f0 'v' 'const char *'
    |-BinaryOperator 0x136009a90 <line:13:9, col:23> 'const char *' '='
    | |-DeclRefExpr 0x1360094b8 <col:9> 'const char *' lvalue Var 0x1359283f0 'v' 'const char *'
    | `-ImplicitCastExpr 0x136009650 <col:13, col:23> 'const char *' <IntegralToPointer>
    |   `-CallExpr 0x136009610 <col:13, col:23> 'int'
    |     |-ImplicitCastExpr 0x1360095f8 <col:13> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x1360095b8 <col:13> 'int ()' Function 0x136009500 'getenv' 'int ()'
    |     `-ImplicitCastExpr 0x136009638 <col:20> 'const char *' <LValueToRValue>
    |       `-DeclRefExpr 0x1360095d8 <col:20> 'const char *' lvalue ParmVar 0x1359281a8 'key' 'const char *'
    |-IfStmt 0x136009ba8 <line:14:9, line:15:24>
    | |-UnaryOperator 0x136009b48 <line:14:13, col:23> 'int' prefix '!' cannot overflow
    | | `-CallExpr 0x136009b08 <col:14, col:23> 'int'
    | |   |-ImplicitCastExpr 0x136009af0 <col:14> 'int (*)()' <FunctionToPointerDecay>
    | |   | `-DeclRefExpr 0x136009ab0 <col:14> 'int ()' Function 0x1360092e8 'isempty' 'int ()'
    | |   `-ImplicitCastExpr 0x136009b30 <col:22> 'const char *' <LValueToRValue>
    | |     `-DeclRefExpr 0x136009ad0 <col:22> 'const char *' lvalue Var 0x1359283f0 'v' 'const char *'
    | `-ReturnStmt 0x136009b98 <line:15:17, col:24>
    |   `-ImplicitCastExpr 0x136009b80 <col:24> 'const char *' <LValueToRValue>
    |     `-DeclRefExpr 0x136009b60 <col:24> 'const char *' lvalue Var 0x1359283f0 'v' 'const char *'
    `-ReturnStmt 0x136009c00 <line:17:9, col:16>
      `-ImplicitCastExpr 0x136009be8 <col:16> 'const char *' <LValueToRValue>
        `-DeclRefExpr 0x136009bc8 <col:16> 'const char *' lvalue ParmVar 0x135928228 'fallback' 'const char *'
