`-FunctionDecl 0x12280ddf8  line:1:18 invalid bson_append_finish_object 'int (int *)'
  |-ParmVarDecl 0x12280dd28 <col:45, col:51> col:51 invalid b 'int *'
  `-CompoundStmt 0x122122b38 <col:55, line:12:1>
    |-DeclStmt 0x12280df28 <line:2:5, col:16>
    | `-VarDecl 0x12280dec0 <col:5, col:11> col:11 used start 'char *'
    |-DeclStmt 0x12280dfc0 <line:3:5, col:10>
    | `-VarDecl 0x12280df58 <col:5, col:9> col:9 used i 'int'
    |-IfStmt 0x12280e280 <line:4:5, col:59>
    | |-BinaryOperator 0x12280e218 <col:10, col:39> 'int' contains-errors '=='
    | | |-CallExpr 0x12280e190 <col:10, col:34> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x12280e130 <col:10> 'int ()' Function 0x12280e078 'bson_ensure_space' 'int ()'
    | | | |-RecoveryExpr 0x12280e150 <col:29> '<dependent type>' contains-errors lvalue
    | | | `-IntegerLiteral 0x12280e170 <col:32> 'int' 1
    | | `-RecoveryExpr 0x12280e1f8 <col:39> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x12280e270 <col:52, col:59>
    |   `-RecoveryExpr 0x12280e250 <col:59> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x122122600 <line:5:5, col:29> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x12280e380 <col:5> 'int ()' Function 0x12280e2c8 'bson_append_byte' 'int ()'
    | |-RecoveryExpr 0x12280e3a0 <col:23> '<dependent type>' contains-errors lvalue
    | `-IntegerLiteral 0x12280e3c0 <col:27> 'int' 0
    |-BinaryOperator 0x1221227f8 <line:7:5, col:47> 'char *' contains-errors '='
    | |-DeclRefExpr 0x122122630 <col:5> 'char *' lvalue Var 0x12280dec0 'start' 'char *'
    | `-BinaryOperator 0x1221227d8 <col:13, col:47> '<dependent type>' contains-errors '+'
    |   |-CXXDependentScopeMemberExpr 0x122122670 <col:13, col:16> '<dependent type>' contains-errors lvalue ->data
    |   | `-RecoveryExpr 0x122122650 <col:13> '<dependent type>' contains-errors lvalue
    |   `-ArraySubscriptExpr 0x1221227b8 <col:23, col:47> '<dependent type>' contains-errors lvalue
    |     |-ImplicitCastExpr 0x1221227a0 <col:23, col:26> '<dependent type>' contains-errors <LValueToRValue>
    |     | `-CXXDependentScopeMemberExpr 0x1221226d8 <col:23, col:26> '<dependent type>' contains-errors lvalue ->stack
    |     |   `-RecoveryExpr 0x1221226b8 <col:23> '<dependent type>' contains-errors lvalue
    |     `-UnaryOperator 0x122122788 <col:33, col:38> '<dependent type>' contains-errors prefix '--' cannot overflow
    |       `-CXXDependentScopeMemberExpr 0x122122740 <col:35, col:38> '<dependent type>' contains-errors lvalue ->stackPos
    |         `-RecoveryExpr 0x122122720 <col:35> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x1221228e0 <line:8:5, col:18> 'int' contains-errors '='
    | |-DeclRefExpr 0x122122818 <col:5> 'int' lvalue Var 0x12280df58 'i' 'int'
    | `-BinaryOperator 0x1221228c0 <col:9, col:18> '<dependent type>' contains-errors '-'
    |   |-CXXDependentScopeMemberExpr 0x122122858 <col:9, col:12> '<dependent type>' contains-errors lvalue ->cur
    |   | `-RecoveryExpr 0x122122838 <col:9> '<dependent type>' contains-errors lvalue
    |   `-DeclRefExpr 0x1221228a0 <col:18> 'char *' lvalue Var 0x12280dec0 'start' 'char *'
    |-CallExpr 0x122122aa8 <line:9:5, col:37> 'int'
    | |-ImplicitCastExpr 0x122122a90 <col:5> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x1221229e0 <col:5> 'int ()' Function 0x122122928 'bson_little_endian32' 'int ()'
    | |-ImplicitCastExpr 0x122122ad8 <col:27> 'char *' <LValueToRValue>
    | | `-DeclRefExpr 0x122122a00 <col:27> 'char *' lvalue Var 0x12280dec0 'start' 'char *'
    | `-UnaryOperator 0x122122a40 <col:34, col:35> 'int *' prefix '&' cannot overflow
    |   `-DeclRefExpr 0x122122a20 <col:35> 'int' lvalue Var 0x12280df58 'i' 'int'
    `-ReturnStmt 0x122122b28 <line:11:5, col:12>
      `-RecoveryExpr 0x122122b08 <col:12> '<dependent type>' contains-errors lvalue
