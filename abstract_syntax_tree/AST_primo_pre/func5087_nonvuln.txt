`-FunctionDecl 0x14f82a958  line:1:17 ext4_list_backups 'unsigned int (struct super_block *, unsigned int *, unsigned int *, unsigned int *)' static
  |-ParmVarDecl 0x14f812c48 <col:35, col:55> col:55 used sb 'struct super_block *'
  |-ParmVarDecl 0x14f812cf8 <col:59, col:69> col:69 used three 'unsigned int *'
  |-ParmVarDecl 0x14f812d78 <line:2:7, col:17> col:17 used five 'unsigned int *'
  |-ParmVarDecl 0x14f82a800 <col:23, col:33> col:33 used seven 'unsigned int *'
  `-CompoundStmt 0x14f82b678 <line:3:1, line:28:1>
    |-DeclStmt 0x14f82ab20 <line:4:2, col:23>
    | `-VarDecl 0x14f82aa80 <col:2, col:18> col:12 used min 'unsigned int *' cinit
    |   `-ImplicitCastExpr 0x14f82ab08 <col:18> 'unsigned int *' <LValueToRValue>
    |     `-DeclRefExpr 0x14f82aae8 <col:18> 'unsigned int *' lvalue ParmVar 0x14f812cf8 'three' 'unsigned int *'
    |-DeclStmt 0x14f82abd8 <line:5:2, col:14>
    | `-VarDecl 0x14f82ab50 <col:2, col:13> col:6 used mult 'int' cinit
    |   `-IntegerLiteral 0x14f82abb8 <col:13> 'int' 3
    |-DeclStmt 0x14f82ac70 <line:6:2, col:14>
    | `-VarDecl 0x14f82ac08 <col:2, col:11> col:11 used ret 'unsigned int'
    |-IfStmt 0x14f82b088 <line:8:2, line:13:2>
    | |-UnaryOperator 0x14f82aea0 <line:8:6, line:9:41> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-CallExpr 0x14f82ae70 <line:8:7, line:9:41> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x14f82adb0 <line:8:7> 'int ()' Function 0x14f82acf8 'EXT4_HAS_RO_COMPAT_FEATURE' 'int ()'
    | |   |-DeclRefExpr 0x14f82add0 <col:34> 'struct super_block *' lvalue ParmVar 0x14f812c48 'sb' 'struct super_block *'
    | |   `-RecoveryExpr 0x14f82ae50 <line:9:6> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x14f82b060 <col:44, line:13:2>
    |   |-BinaryOperator 0x14f82af40 <line:10:3, col:10> 'unsigned int' '='
    |   | |-DeclRefExpr 0x14f82aeb8 <col:3> 'unsigned int' lvalue Var 0x14f82ac08 'ret' 'unsigned int'
    |   | `-ImplicitCastExpr 0x14f82af28 <col:9, col:10> 'unsigned int' <LValueToRValue>
    |   |   `-UnaryOperator 0x14f82af10 <col:9, col:10> 'unsigned int' lvalue prefix '*' cannot overflow
    |   |     `-ImplicitCastExpr 0x14f82aef8 <col:10> 'unsigned int *' <LValueToRValue>
    |   |       `-DeclRefExpr 0x14f82aed8 <col:10> 'unsigned int *' lvalue Var 0x14f82aa80 'min' 'unsigned int *'
    |   |-CompoundAssignOperator 0x14f82afe8 <line:11:3, col:11> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    |   | |-UnaryOperator 0x14f82af98 <col:3, col:4> 'unsigned int' lvalue prefix '*' cannot overflow
    |   | | `-ImplicitCastExpr 0x14f82af80 <col:4> 'unsigned int *' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x14f82af60 <col:4> 'unsigned int *' lvalue Var 0x14f82aa80 'min' 'unsigned int *'
    |   | `-ImplicitCastExpr 0x14f82afd0 <col:11> 'unsigned int' <IntegralCast>
    |   |   `-IntegerLiteral 0x14f82afb0 <col:11> 'int' 1
    |   `-ReturnStmt 0x14f82b050 <line:12:3, col:10>
    |     `-ImplicitCastExpr 0x14f82b038 <col:10> 'unsigned int' <LValueToRValue>
    |       `-DeclRefExpr 0x14f82b018 <col:10> 'unsigned int' lvalue Var 0x14f82ac08 'ret' 'unsigned int'
    |-IfStmt 0x14f82b290 <line:15:2, line:18:2>
    | |-BinaryOperator 0x14f82b178 <line:15:6, col:15> 'int' '<'
    | | |-ImplicitCastExpr 0x14f82b148 <col:6, col:7> 'unsigned int' <LValueToRValue>
    | | | `-UnaryOperator 0x14f82b0e0 <col:6, col:7> 'unsigned int' lvalue prefix '*' cannot overflow
    | | |   `-ImplicitCastExpr 0x14f82b0c8 <col:7> 'unsigned int *' <LValueToRValue>
    | | |     `-DeclRefExpr 0x14f82b0a8 <col:7> 'unsigned int *' lvalue ParmVar 0x14f812d78 'five' 'unsigned int *'
    | | `-ImplicitCastExpr 0x14f82b160 <col:14, col:15> 'unsigned int' <LValueToRValue>
    | |   `-UnaryOperator 0x14f82b130 <col:14, col:15> 'unsigned int' lvalue prefix '*' cannot overflow
    | |     `-ImplicitCastExpr 0x14f82b118 <col:15> 'unsigned int *' <LValueToRValue>
    | |       `-DeclRefExpr 0x14f82b0f8 <col:15> 'unsigned int *' lvalue Var 0x14f82aa80 'min' 'unsigned int *'
    | `-CompoundStmt 0x14f82b270 <col:20, line:18:2>
    |   |-BinaryOperator 0x14f82b1f0 <line:16:3, col:9> 'unsigned int *' '='
    |   | |-DeclRefExpr 0x14f82b198 <col:3> 'unsigned int *' lvalue Var 0x14f82aa80 'min' 'unsigned int *'
    |   | `-ImplicitCastExpr 0x14f82b1d8 <col:9> 'unsigned int *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x14f82b1b8 <col:9> 'unsigned int *' lvalue ParmVar 0x14f812d78 'five' 'unsigned int *'
    |   `-BinaryOperator 0x14f82b250 <line:17:3, col:10> 'int' '='
    |     |-DeclRefExpr 0x14f82b210 <col:3> 'int' lvalue Var 0x14f82ab50 'mult' 'int'
    |     `-IntegerLiteral 0x14f82b230 <col:10> 'int' 5
    |-IfStmt 0x14f82b498 <line:19:2, line:22:2>
    | |-BinaryOperator 0x14f82b380 <line:19:6, col:16> 'int' '<'
    | | |-ImplicitCastExpr 0x14f82b350 <col:6, col:7> 'unsigned int' <LValueToRValue>
    | | | `-UnaryOperator 0x14f82b2e8 <col:6, col:7> 'unsigned int' lvalue prefix '*' cannot overflow
    | | |   `-ImplicitCastExpr 0x14f82b2d0 <col:7> 'unsigned int *' <LValueToRValue>
    | | |     `-DeclRefExpr 0x14f82b2b0 <col:7> 'unsigned int *' lvalue ParmVar 0x14f82a800 'seven' 'unsigned int *'
    | | `-ImplicitCastExpr 0x14f82b368 <col:15, col:16> 'unsigned int' <LValueToRValue>
    | |   `-UnaryOperator 0x14f82b338 <col:15, col:16> 'unsigned int' lvalue prefix '*' cannot overflow
    | |     `-ImplicitCastExpr 0x14f82b320 <col:16> 'unsigned int *' <LValueToRValue>
    | |       `-DeclRefExpr 0x14f82b300 <col:16> 'unsigned int *' lvalue Var 0x14f82aa80 'min' 'unsigned int *'
    | `-CompoundStmt 0x14f82b478 <col:21, line:22:2>
    |   |-BinaryOperator 0x14f82b3f8 <line:20:3, col:9> 'unsigned int *' '='
    |   | |-DeclRefExpr 0x14f82b3a0 <col:3> 'unsigned int *' lvalue Var 0x14f82aa80 'min' 'unsigned int *'
    |   | `-ImplicitCastExpr 0x14f82b3e0 <col:9> 'unsigned int *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x14f82b3c0 <col:9> 'unsigned int *' lvalue ParmVar 0x14f82a800 'seven' 'unsigned int *'
    |   `-BinaryOperator 0x14f82b458 <line:21:3, col:10> 'int' '='
    |     |-DeclRefExpr 0x14f82b418 <col:3> 'int' lvalue Var 0x14f82ab50 'mult' 'int'
    |     `-IntegerLiteral 0x14f82b438 <col:10> 'int' 7
    |-BinaryOperator 0x14f82b540 <line:24:2, col:9> 'unsigned int' '='
    | |-DeclRefExpr 0x14f82b4b8 <col:2> 'unsigned int' lvalue Var 0x14f82ac08 'ret' 'unsigned int'
    | `-ImplicitCastExpr 0x14f82b528 <col:8, col:9> 'unsigned int' <LValueToRValue>
    |   `-UnaryOperator 0x14f82b510 <col:8, col:9> 'unsigned int' lvalue prefix '*' cannot overflow
    |     `-ImplicitCastExpr 0x14f82b4f8 <col:9> 'unsigned int *' <LValueToRValue>
    |       `-DeclRefExpr 0x14f82b4d8 <col:9> 'unsigned int *' lvalue Var 0x14f82aa80 'min' 'unsigned int *'
    |-CompoundAssignOperator 0x14f82b600 <line:25:2, col:10> 'unsigned int' '*=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    | |-UnaryOperator 0x14f82b598 <col:2, col:3> 'unsigned int' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x14f82b580 <col:3> 'unsigned int *' <LValueToRValue>
    | |   `-DeclRefExpr 0x14f82b560 <col:3> 'unsigned int *' lvalue Var 0x14f82aa80 'min' 'unsigned int *'
    | `-ImplicitCastExpr 0x14f82b5e8 <col:10> 'unsigned int' <IntegralCast>
    |   `-ImplicitCastExpr 0x14f82b5d0 <col:10> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x14f82b5b0 <col:10> 'int' lvalue Var 0x14f82ab50 'mult' 'int'
    `-ReturnStmt 0x14f82b668 <line:27:2, col:9>
      `-ImplicitCastExpr 0x14f82b650 <col:9> 'unsigned int' <LValueToRValue>
        `-DeclRefExpr 0x14f82b630 <col:9> 'unsigned int' lvalue Var 0x14f82ac08 'ret' 'unsigned int'
