`-FunctionDecl 0x13700dda8  line:1:1 roll 'int (int)'
  |-ParmVarDecl 0x13700dcd8 <col:6, col:10> col:10 used n 'int'
  `-CompoundStmt 0x13700e3b8 <line:2:1, line:9:1>
    |-DeclStmt 0x13700dfb8 <line:3:5, col:13>
    | |-VarDecl 0x13700deb8 <col:5, col:9> col:9 used i 'int'
    | `-VarDecl 0x13700df38 <col:5, col:12> col:12 used j 'int'
    |-WhileStmt 0x13700e2d8 <line:6:5, line:7:2>
    | |-BinaryOperator 0x13700e2b0 <line:6:12, col:28> 'int' '>='
    | | |-ParenExpr 0x13700e258 <col:12, col:23> 'int'
    | | | `-BinaryOperator 0x13700e238 <col:13, col:22> 'int' '='
    | | |   |-DeclRefExpr 0x13700e080 <col:13> 'int' lvalue Var 0x13700df38 'j' 'int'
    | | |   `-CallExpr 0x13700e218 <col:17, col:22> 'int'
    | | |     `-ImplicitCastExpr 0x13700e200 <col:17> 'int (*)()' <FunctionToPointerDecay>
    | | |       `-DeclRefExpr 0x13700e1b0 <col:17> 'int ()' Function 0x13700e0f8 'rand' 'int ()'
    | | `-ImplicitCastExpr 0x13700e298 <col:28> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x13700e278 <col:28> 'int' lvalue Var 0x13700deb8 'i' 'int'
    | `-ContinueStmt 0x13700e2d0 <line:7:2>
    `-ReturnStmt 0x13700e3a8 <line:8:5, col:18>
      `-ParenExpr 0x13700e388 <col:12, col:18> 'int'
        `-BinaryOperator 0x13700e368 <col:13, col:17> 'int' '%'
          |-ImplicitCastExpr 0x13700e338 <col:13> 'int' <LValueToRValue>
          | `-DeclRefExpr 0x13700e2f8 <col:13> 'int' lvalue Var 0x13700df38 'j' 'int'
          `-ImplicitCastExpr 0x13700e350 <col:17> 'int' <LValueToRValue>
            `-DeclRefExpr 0x13700e318 <col:17> 'int' lvalue ParmVar 0x13700dcd8 'n' 'int'
