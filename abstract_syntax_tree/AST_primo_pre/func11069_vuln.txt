`-FunctionDecl 0x10100e358  line:1:12 handle_vmptrst 'int (struct kvm_vcpu *)' static
  |-ParmVarDecl 0x10100e248 <col:27, col:44> col:44 used vcpu 'struct kvm_vcpu *'
  `-CompoundStmt 0x120122f20 <line:2:1, line:23:1>
    |-DeclStmt 0x1010268a8 <line:3:2, col:67>
    | `-VarDecl 0x101026668 <col:2, col:66> col:16 used exit_qualification 'unsigned long' cinit
    |   `-CallExpr 0x101026880 <col:37, col:66> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x101026800 <col:37> 'int ()' Function 0x101026748 'vmcs_readl' 'int ()'
    |     `-RecoveryExpr 0x101026860 <col:48> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x101026a38 <line:6:2, col:24>
    | |-RecordDecl 0x1010268c0 <col:2, col:9> col:9 struct x86_exception
    | `-VarDecl 0x1010269b8 <col:2, col:23> col:23 invalid e 'struct x86_exception'
    |-IfStmt 0x101026c40 <line:8:2, line:9:10>
    | |-UnaryOperator 0x101026bf8 <line:8:6, col:39> 'int' prefix '!' cannot overflow
    | | `-CallExpr 0x101026bb8 <col:7, col:39> 'int'
    | |   |-ImplicitCastExpr 0x101026ba0 <col:7> 'int (*)()' <FunctionToPointerDecay>
    | |   | `-DeclRefExpr 0x101026b30 <col:7> 'int ()' Function 0x101026a78 'nested_vmx_check_permission' 'int ()'
    | |   `-ImplicitCastExpr 0x101026be0 <col:35> 'struct kvm_vcpu *' <LValueToRValue>
    | |     `-DeclRefExpr 0x101026b50 <col:35> 'struct kvm_vcpu *' lvalue ParmVar 0x10100e248 'vcpu' 'struct kvm_vcpu *'
    | `-ReturnStmt 0x101026c30 <line:9:3, col:10>
    |   `-IntegerLiteral 0x101026c10 <col:10> 'int' 1
    |-IfStmt 0x101026f38 <line:11:2, line:13:10>
    | |-CallExpr 0x101026ec0 <line:11:6, line:12:41> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x101026d40 <line:11:6> 'int ()' Function 0x101026c88 'get_vmx_mem_address' 'int ()'
    | | |-DeclRefExpr 0x101026d60 <col:26> 'struct kvm_vcpu *' lvalue ParmVar 0x10100e248 'vcpu' 'struct kvm_vcpu *'
    | | |-DeclRefExpr 0x101026d80 <col:32> 'unsigned long' contains-errors lvalue Var 0x101026668 'exit_qualification' 'unsigned long'
    | | |-RecoveryExpr 0x101026e48 <line:12:4> '<dependent type>' contains-errors lvalue
    | | |-RecoveryExpr 0x101026e68 <col:26> '<dependent type>' contains-errors lvalue
    | | `-UnaryOperator 0x101026ea8 <col:32, col:33> '<dependent type>' contains-errors prefix '&' cannot overflow
    | |   `-RecoveryExpr 0x101026e88 <col:33> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x101026f28 <line:13:3, col:10>
    |   `-IntegerLiteral 0x101026f08 <col:10> 'int' 1
    |-IfStmt 0x120122c00 <line:15:2, line:20:2>
    | |-RecoveryExpr 0x1010273f0 <line:15:6, line:17:21> '_Bool' contains-errors
    | `-CompoundStmt 0x1010275c8 <col:24, line:20:2>
    |   |-CallExpr 0x101027568 <line:18:3, col:33> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x1010274f0 <col:3> 'int ()' Function 0x101027438 'kvm_inject_page_fault' 'int ()'
    |   | |-DeclRefExpr 0x101027510 <col:25> 'struct kvm_vcpu *' lvalue ParmVar 0x10100e248 'vcpu' 'struct kvm_vcpu *'
    |   | `-UnaryOperator 0x101027550 <col:31, col:32> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   |   `-RecoveryExpr 0x101027530 <col:32> '<dependent type>' contains-errors lvalue
    |   `-ReturnStmt 0x1010275b8 <line:19:3, col:10>
    |     `-IntegerLiteral 0x101027598 <col:10> 'int' 1
    |-CallExpr 0x120122d58 <line:21:2, col:25> 'int'
    | |-ImplicitCastExpr 0x120122d40 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x120122d00 <col:2> 'int ()' Function 0x120122c48 'nested_vmx_succeed' 'int ()'
    | `-ImplicitCastExpr 0x120122d80 <col:21> 'struct kvm_vcpu *' <LValueToRValue>
    |   `-DeclRefExpr 0x120122d20 <col:21> 'struct kvm_vcpu *' lvalue ParmVar 0x10100e248 'vcpu' 'struct kvm_vcpu *'
    `-ReturnStmt 0x120122f10 <line:22:2, col:43>
      `-CallExpr 0x120122ed0 <col:9, col:43> 'int'
        |-ImplicitCastExpr 0x120122eb8 <col:9> 'int (*)()' <FunctionToPointerDecay>
        | `-DeclRefExpr 0x120122e78 <col:9> 'int ()' Function 0x120122dc0 'kvm_skip_emulated_instruction' 'int ()'
        `-ImplicitCastExpr 0x120122ef8 <col:39> 'struct kvm_vcpu *' <LValueToRValue>
          `-DeclRefExpr 0x120122e98 <col:39> 'struct kvm_vcpu *' lvalue ParmVar 0x10100e248 'vcpu' 'struct kvm_vcpu *'
