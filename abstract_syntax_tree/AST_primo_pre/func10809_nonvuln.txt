`-FunctionDecl 0x12c9282e8  line:1:5 invalid gnutls_x509_crt_import 'int (int, const int *, int)'
  |-ParmVarDecl 0x12c9280f0 <col:28, col:46> col:46 referenced invalid cert 'int'
  |-ParmVarDecl 0x12c928170 <line:2:7, col:30> col:30 referenced invalid data 'const int *'
  |-ParmVarDecl 0x12c9281f0 <line:3:7, col:29> col:29 invalid format 'int'
  `-CompoundStmt 0x12c941d08 <line:4:1, line:65:1>
    |-DeclStmt 0x12c928500 <line:5:5, col:34>
    | |-VarDecl 0x12c9283c0 <col:5, col:18> col:9 used result 'int' cinit
    | | `-IntegerLiteral 0x12c928428 <col:18> 'int' 0
    | `-VarDecl 0x12c928460 <col:5, col:33> col:21 used need_free 'int' cinit
    |   `-IntegerLiteral 0x12c9284c8 <col:33> 'int' 0
    |-IfStmt 0x12e008830 <line:9:5, line:12:5>
    | |-BinaryOperator 0x12c9285c0 <line:9:9, col:17> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x12c928548 <col:9> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x12c9285a0 <col:17> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x12e008810 <col:23, line:12:5>
    |   |-CallExpr 0x12c9287a8 <line:10:2, col:16> 'int'
    |   | `-ImplicitCastExpr 0x12c928790 <col:2> 'int (*)()' <FunctionToPointerDecay>
    |   |   `-DeclRefExpr 0x12c928740 <col:2> 'int ()' Function 0x12c928688 'gnutls_assert' 'int ()'
    |   `-ReturnStmt 0x12e008800 <line:11:2, col:9>
    |     `-RecoveryExpr 0x12c9287e0 <col:9> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x12e008948 <line:14:5, col:24> '<dependent type>' contains-errors '='
    | |-CXXDependentScopeMemberExpr 0x12e008898 <col:5, col:11> '<dependent type>' contains-errors lvalue .data
    | | `-RecoveryExpr 0x12e008870 <col:5> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x12e008850 <col:5> 'const int *' lvalue ParmVar 0x12c928170 'data' 'const int *'
    | `-CXXDependentScopeMemberExpr 0x12e008900 <col:18, col:24> '<dependent type>' contains-errors lvalue ->data
    |   `-RecoveryExpr 0x12e0088e0 <col:18> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x12e008a60 <line:15:5, col:24> '<dependent type>' contains-errors '='
    | |-CXXDependentScopeMemberExpr 0x12e0089b0 <col:5, col:11> '<dependent type>' contains-errors lvalue .size
    | | `-RecoveryExpr 0x12e008988 <col:5> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x12e008968 <col:5> 'const int *' lvalue ParmVar 0x12c928170 'data' 'const int *'
    | `-CXXDependentScopeMemberExpr 0x12e008a18 <col:18, col:24> '<dependent type>' contains-errors lvalue ->size
    |   `-RecoveryExpr 0x12e0089f8 <col:18> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x12e009440 <line:18:5, line:44:5>
    | |-BinaryOperator 0x12e008af8 <line:18:9, col:19> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x12e008a80 <col:9> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x12e008ad8 <col:19> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x12e009418 <col:40, line:44:5>
    |   |-BinaryOperator 0x12e008e60 <line:22:2, line:24:12> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x12e008b30 <line:22:2> 'int' lvalue Var 0x12c9283c0 'result' 'int'
    |   | `-CallExpr 0x12e008e20 <line:23:6, line:24:12> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x12e008c30 <line:23:6> 'int ()' Function 0x12e008b78 '_gnutls_fbase64_decode' 'int ()'
    |   |   |-RecoveryExpr 0x12e008dc8 <col:29> '<dependent type>' contains-errors lvalue
    |   |   |-CXXDependentScopeMemberExpr 0x12e008c88 <col:45, col:51> '<dependent type>' contains-errors lvalue ->data
    |   |   | `-RecoveryExpr 0x12e008c68 <col:45> '<dependent type>' contains-errors lvalue
    |   |   |-CXXDependentScopeMemberExpr 0x12e008cf0 <col:57, col:63> '<dependent type>' contains-errors lvalue ->size
    |   |   | `-RecoveryExpr 0x12e008cd0 <col:57> '<dependent type>' contains-errors lvalue
    |   |   `-UnaryOperator 0x12e008e08 <line:24:8, col:9> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   |     `-RecoveryExpr 0x12e008de8 <col:9> '<dependent type>' contains-errors lvalue
    |   |-IfStmt 0x12e009378 <line:26:2, line:38:2>
    |   | |-BinaryOperator 0x12e008ed8 <line:26:6, col:16> 'int' '<='
    |   | | |-ImplicitCastExpr 0x12e008ec0 <col:6> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x12e008e80 <col:6> 'int' lvalue Var 0x12c9283c0 'result' 'int'
    |   | | `-IntegerLiteral 0x12e008ea0 <col:16> 'int' 0
    |   | `-CompoundStmt 0x12e009358 <col:19, line:38:2>
    |   |   |-BinaryOperator 0x12e009148 <line:28:6, line:30:28> 'int' contains-errors '='
    |   |   | |-DeclRefExpr 0x12e008ef8 <line:28:6> 'int' lvalue Var 0x12c9283c0 'result' 'int'
    |   |   | `-CallExpr 0x12e009108 <line:29:3, line:30:28> '<dependent type>' contains-errors
    |   |   |   |-DeclRefExpr 0x12e008f18 <line:29:3> 'int ()' Function 0x12e008b78 '_gnutls_fbase64_decode' 'int ()'
    |   |   |   |-RecoveryExpr 0x12e0090b0 <col:26> '<dependent type>' contains-errors lvalue
    |   |   |   |-CXXDependentScopeMemberExpr 0x12e008f70 <col:41, col:47> '<dependent type>' contains-errors lvalue ->data
    |   |   |   | `-RecoveryExpr 0x12e008f50 <col:41> '<dependent type>' contains-errors lvalue
    |   |   |   |-CXXDependentScopeMemberExpr 0x12e008fd8 <line:30:12, col:18> '<dependent type>' contains-errors lvalue ->size
    |   |   |   | `-RecoveryExpr 0x12e008fb8 <col:12> '<dependent type>' contains-errors lvalue
    |   |   |   `-UnaryOperator 0x12e0090f0 <col:24, col:25> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   |   |     `-RecoveryExpr 0x12e0090d0 <col:25> '<dependent type>' contains-errors lvalue
    |   |   `-IfStmt 0x12e009338 <line:32:6, line:37:6>
    |   |     |-BinaryOperator 0x12e0091c0 <line:32:10, col:20> 'int' '<='
    |   |     | |-ImplicitCastExpr 0x12e0091a8 <col:10> 'int' <LValueToRValue>
    |   |     | | `-DeclRefExpr 0x12e009168 <col:10> 'int' lvalue Var 0x12c9283c0 'result' 'int'
    |   |     | `-IntegerLiteral 0x12e009188 <col:20> 'int' 0
    |   |     `-CompoundStmt 0x12e009318 <col:23, line:37:6>
    |   |       |-CallExpr 0x12e0092b0 <line:35:3, col:17> 'int'
    |   |       | `-ImplicitCastExpr 0x12e009298 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |   |       |   `-DeclRefExpr 0x12e009278 <col:3> 'int ()' Function 0x12c928688 'gnutls_assert' 'int ()'
    |   |       `-ReturnStmt 0x12e009308 <line:36:3, col:10>
    |   |         `-ImplicitCastExpr 0x12e0092f0 <col:10> 'int' <LValueToRValue>
    |   |           `-DeclRefExpr 0x12e0092d0 <col:10> 'int' lvalue Var 0x12c9283c0 'result' 'int'
    |   `-BinaryOperator 0x12e0093f8 <line:43:2, col:14> 'int' '='
    |     |-DeclRefExpr 0x12e0093b8 <col:2> 'int' lvalue Var 0x12c928460 'need_free' 'int'
    |     `-IntegerLiteral 0x12e0093d8 <col:14> 'int' 1
    |-IfStmt 0x12c9418e8 <line:47:5, line:51:5>
    | |-RecoveryExpr 0x12e009620 <line:47:9, col:19> '_Bool' contains-errors
    | `-CompoundStmt 0x12c9418c0 <col:33, line:51:5>
    |   |-BinaryOperator 0x12e0097d8 <line:48:2, col:33> 'int' '='
    |   | |-DeclRefExpr 0x12e009640 <col:2> 'int' lvalue Var 0x12c9283c0 'result' 'int'
    |   | `-CallExpr 0x12e009798 <col:11, col:33> 'int'
    |   |   |-ImplicitCastExpr 0x12e009780 <col:11> 'int (*)()' <FunctionToPointerDecay>
    |   |   | `-DeclRefExpr 0x12e009740 <col:11> 'int ()' Function 0x12e009688 '_gnutls_asn2err' 'int ()'
    |   |   `-ImplicitCastExpr 0x12e0097c0 <col:27> 'int' <LValueToRValue>
    |   |     `-DeclRefExpr 0x12e009760 <col:27> 'int' lvalue Var 0x12c9283c0 'result' 'int'
    |   |-CallExpr 0x12c941838 <line:49:2, col:16> 'int'
    |   | `-ImplicitCastExpr 0x12c941820 <col:2> 'int (*)()' <FunctionToPointerDecay>
    |   |   `-DeclRefExpr 0x12c941800 <col:2> 'int ()' Function 0x12c928688 'gnutls_assert' 'int ()'
    |   `-GotoStmt 0x12c9418a8 <line:50:2, col:7> 'cleanup' 0x12c941858
    |-BinaryOperator 0x12c9419b8 <line:54:5, col:28> '<dependent type>' contains-errors '='
    | |-CXXDependentScopeMemberExpr 0x12c941950 <col:5, col:11> '<dependent type>' contains-errors lvalue ->use_extensions
    | | `-RecoveryExpr 0x12c941928 <col:5> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x12c941908 <col:5> 'int' lvalue ParmVar 0x12c9280f0 'cert' 'int'
    | `-IntegerLiteral 0x12c941998 <col:28> 'int' 1
    |-ReturnStmt 0x12c941b30 <line:58:5, col:12>
    | `-IntegerLiteral 0x12c941b10 <col:12> 'int' 0
    |-LabelStmt 0x12c941c48 <line:60:3, col:10> 'cleanup'
    | `-NullStmt 0x12c941c40 <col:10>
    `-ReturnStmt 0x12c941cf8 <line:64:5, col:12>
      `-ImplicitCastExpr 0x12c941ce0 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x12c941cc0 <col:12> 'int' lvalue Var 0x12c9283c0 'result' 'int'
