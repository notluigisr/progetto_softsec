`-FunctionDecl 0x1311115a8  line:1:6 invalid dtls1_ctrl 'long (int *, int, long, void *)'
  |-ParmVarDecl 0x131111328 <col:17, col:22> col:22 invalid s 'int *'
  |-ParmVarDecl 0x1311113a8 <col:25, col:29> col:29 used cmd 'int'
  |-ParmVarDecl 0x131111428 <col:34, col:39> col:39 used larg 'long'
  |-ParmVarDecl 0x1311114a8 <col:45, col:51> col:51 used parg 'void *'
  `-CompoundStmt 0x13112b3f0 <line:2:2, line:25:2>
    |-DeclStmt 0x131111710 <line:3:2, col:11>
    | `-VarDecl 0x131111688 <col:2, col:10> col:6 used ret 'int' cinit
    |   `-IntegerLiteral 0x1311116f0 <col:10> 'int' 0
    |-SwitchStmt 0x131111760 <line:5:2, line:23:3>
    | |-ImplicitCastExpr 0x131111748 <line:5:10> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x131111728 <col:10> 'int' lvalue ParmVar 0x1311113a8 'cmd' 'int'
    | `-CompoundStmt 0x13112b320 <line:6:3, line:23:3>
    |   |-IfStmt 0x13112ad58 <line:8:3, line:11:4>
    |   | |-BinaryOperator 0x13112acc0 <line:8:7, col:55> 'int' contains-errors '!='
    |   | | |-CallExpr 0x13112ac70 <col:7, col:50> '<dependent type>' contains-errors
    |   | | | |-DeclRefExpr 0x131111900 <col:7> 'int ()' Function 0x131111848 'dtls1_get_timeout' 'int ()'
    |   | | | |-RecoveryExpr 0x131111920 <col:25> '<dependent type>' contains-errors lvalue
    |   | | | `-CStyleCastExpr 0x13112ac48 <col:28, col:46> 'struct timeval *' <BitCast>
    |   | | |   `-ImplicitCastExpr 0x13112ac30 <col:46> 'void *' <LValueToRValue> part_of_explicit_cast
    |   | | |     `-DeclRefExpr 0x1311119e0 <col:46> 'void *' lvalue ParmVar 0x1311114a8 'parg' 'void *'
    |   | | `-RecoveryExpr 0x13112aca0 <col:55> '<dependent type>' contains-errors lvalue
    |   | `-CompoundStmt 0x13112ad40 <line:9:4, line:11:4>
    |   |   `-BinaryOperator 0x13112ad20 <line:10:4, col:10> 'int' '='
    |   |     |-DeclRefExpr 0x13112ace0 <col:4> 'int' lvalue Var 0x131111688 'ret' 'int'
    |   |     `-IntegerLiteral 0x13112ad00 <col:10> 'int' 1
    |   |-BreakStmt 0x13112ad78 <line:12:3>
    |   |-BinaryOperator 0x13112af00 <line:14:3, col:31> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x13112ad98 <col:3> 'int' lvalue Var 0x131111688 'ret' 'int'
    |   | `-CallExpr 0x13112aed8 <col:9, col:31> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x13112ae98 <col:9> 'int ()' Function 0x13112ade0 'dtls1_handle_timeout' 'int ()'
    |   |   `-RecoveryExpr 0x13112aeb8 <col:30> '<dependent type>' contains-errors lvalue
    |   |-BreakStmt 0x13112af20 <line:15:3>
    |   |-BinaryOperator 0x13112b0d0 <line:17:3, col:29> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x13112af40 <col:3> 'int' lvalue Var 0x131111688 'ret' 'int'
    |   | `-CallExpr 0x13112b0a0 <col:9, col:29> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x13112b040 <col:9> 'int ()' Function 0x13112af88 'dtls1_listen' 'int ()'
    |   |   |-RecoveryExpr 0x13112b060 <col:22> '<dependent type>' contains-errors lvalue
    |   |   `-DeclRefExpr 0x13112b080 <col:25> 'void *' lvalue ParmVar 0x1311114a8 'parg' 'void *'
    |   |-BreakStmt 0x13112b0f0 <line:18:3>
    |   |-DefaultStmt 0x13112b2f8 <line:20:2, line:21:37>
    |   | `-BinaryOperator 0x13112b2d8 <col:3, col:37> 'int' contains-errors '='
    |   |   |-DeclRefExpr 0x13112b0f8 <col:3> 'int' lvalue Var 0x131111688 'ret' 'int'
    |   |   `-CallExpr 0x13112b298 <col:9, col:37> '<dependent type>' contains-errors
    |   |     |-DeclRefExpr 0x13112b1f8 <col:9> 'int ()' Function 0x13112b140 'ssl3_ctrl' 'int ()'
    |   |     |-RecoveryExpr 0x13112b218 <col:19> '<dependent type>' contains-errors lvalue
    |   |     |-DeclRefExpr 0x13112b238 <col:22> 'int' lvalue ParmVar 0x1311113a8 'cmd' 'int'
    |   |     |-DeclRefExpr 0x13112b258 <col:27> 'long' lvalue ParmVar 0x131111428 'larg' 'long'
    |   |     `-DeclRefExpr 0x13112b278 <col:33> 'void *' lvalue ParmVar 0x1311114a8 'parg' 'void *'
    |   `-BreakStmt 0x13112b318 <line:22:3>
    `-ReturnStmt 0x13112b3e0 <line:24:2, col:12>
      `-ImplicitCastExpr 0x13112b3c8 <col:8, col:12> 'long' <IntegralCast>
        `-ImplicitCastExpr 0x13112b3b0 <col:8, col:12> 'int' <LValueToRValue>
          `-ParenExpr 0x13112b390 <col:8, col:12> 'int' lvalue
            `-DeclRefExpr 0x13112b370 <col:9> 'int' lvalue Var 0x131111688 'ret' 'int'
