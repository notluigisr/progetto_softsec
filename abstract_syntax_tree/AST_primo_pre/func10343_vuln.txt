`-FunctionDecl 0x13f8c6da8  line:1:1 cmdloop 'int (int)'
  |-ParmVarDecl 0x13f8c6cd8 <col:9, col:13> col:13 used top 'int'
  `-CompoundStmt 0x13f8e29a8 <line:2:1, line:58:1>
    |-DeclStmt 0x13f8c7088 <line:3:2, col:15>
    | |-RecordDecl 0x13f8c6ea0 <col:2, col:8> col:8 union node
    | `-VarDecl 0x13f8c7008 <col:2, col:14> col:14 used n 'union node *'
    |-DeclStmt 0x13f8df888 <line:4:2, col:24>
    | |-RecordDecl 0x13f8c70a0 <col:2, col:9> col:9 struct stackmark
    | `-VarDecl 0x13f8c7198 <col:2, col:19> col:19 invalid smark 'struct stackmark'
    |-DeclStmt 0x13f8df920 <line:5:2, col:11>
    | `-VarDecl 0x13f8df8b8 <col:2, col:6> col:6 used inter 'int'
    |-DeclStmt 0x13f8df9d8 <line:6:2, col:16>
    | `-VarDecl 0x13f8df950 <col:2, col:15> col:6 used status 'int' cinit
    |   `-IntegerLiteral 0x13f8df9b8 <col:15> 'int' 0
    |-DeclStmt 0x13f8dfa90 <line:7:2, col:16>
    | `-VarDecl 0x13f8dfa08 <col:2, col:15> col:6 used numeof 'int' cinit
    |   `-IntegerLiteral 0x13f8dfa70 <col:15> 'int' 0
    |-CallExpr 0x13f8dfd28 <line:9:2, col:20> 'int'
    | |-ImplicitCastExpr 0x13f8dfd10 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x13f8dfbd0 <col:2> 'int ()' Function 0x13f8dfb18 'TRACE' 'int ()'
    | `-ParenExpr 0x13f8dfcc0 <col:8, col:19> 'int'
    |   `-BinaryOperator 0x13f8dfca0 <col:9, col:16> 'int' ','
    |     |-ImplicitCastExpr 0x13f8dfc70 <col:9> 'char *' <ArrayToPointerDecay>
    |     | `-StringLiteral 0x13f8dfc30 <col:9> 'char[4]' lvalue "STR"
    |     `-ImplicitCastExpr 0x13f8dfc88 <col:16> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x13f8dfc50 <col:16> 'int' lvalue ParmVar 0x13f8c6cd8 'top' 'int'
    |-ForStmt 0x13f8e2928 <line:10:2, line:55:2>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | `-CompoundStmt 0x13f8e28d0 <line:10:11, line:55:2>
    |   |-DeclStmt 0x13f8dfdd0 <line:11:3, col:11>
    |   | `-VarDecl 0x13f8dfd68 <col:3, col:7> col:7 used skip 'int'
    |   |-CallExpr 0x13f8dff20 <line:13:3, col:22> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x13f8dfec8 <col:3> 'int ()' Function 0x13f8dfe10 'setstackmark' 'int ()'
    |   | `-UnaryOperator 0x13f8dff08 <col:16, col:17> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   |   `-RecoveryExpr 0x13f8dfee8 <col:17> '<dependent type>' contains-errors lvalue
    |   |-IfStmt 0x13f8e0150 <line:14:3, line:15:31>
    |   | |-RecoveryExpr 0x13f8dff60 <line:14:7> '<dependent type>' contains-errors lvalue
    |   | `-CallExpr 0x13f8e0120 <line:15:4, col:31> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x13f8e0060 <col:4> 'int ()' Function 0x13f8dffa8 'showjobs' 'int ()'
    |   |   |-RecoveryExpr 0x13f8e00e0 <col:13> '<dependent type>' contains-errors lvalue
    |   |   `-RecoveryExpr 0x13f8e0100 <col:19> '<dependent type>' contains-errors lvalue
    |   |-BinaryOperator 0x13f8e01b0 <line:16:3, col:11> 'int' '='
    |   | |-DeclRefExpr 0x13f8e0170 <col:3> 'int' lvalue Var 0x13f8df8b8 'inter' 'int'
    |   | `-IntegerLiteral 0x13f8e0190 <col:11> 'int' 0
    |   |-IfStmt 0x13f8e03f8 <line:17:3, line:20:3>
    |   | |-BinaryOperator 0x13f8e0248 <line:17:7, col:16> 'int' contains-errors '&&'
    |   | | |-RecoveryExpr 0x13f8e0228 <col:7> '<dependent type>' contains-errors lvalue
    |   | | `-DeclRefExpr 0x13f8e01e8 <col:16> 'int' lvalue ParmVar 0x13f8c6cd8 'top' 'int'
    |   | `-CompoundStmt 0x13f8e03d8 <col:21, line:20:3>
    |   |   |-UnaryOperator 0x13f8e0288 <line:18:4, col:9> 'int' postfix '++'
    |   |   | `-DeclRefExpr 0x13f8e0268 <col:4> 'int' lvalue Var 0x13f8df8b8 'inter' 'int'
    |   |   `-CallExpr 0x13f8e03b8 <line:19:4, col:12> 'int'
    |   |     `-ImplicitCastExpr 0x13f8e03a0 <col:4> 'int (*)()' <FunctionToPointerDecay>
    |   |       `-DeclRefExpr 0x13f8e0380 <col:4> 'int ()' Function 0x13f8e02c8 'chkmail' 'int ()'
    |   |-BinaryOperator 0x13f8e05c8 <line:21:3, col:21> 'union node *' '='
    |   | |-DeclRefExpr 0x13f8e0418 <col:3> 'union node *' lvalue Var 0x13f8c7008 'n' 'union node *'
    |   | `-ImplicitCastExpr 0x13f8e05b0 <col:7, col:21> 'union node *' <IntegralToPointer>
    |   |   `-CallExpr 0x13f8e0570 <col:7, col:21> 'int'
    |   |     |-ImplicitCastExpr 0x13f8e0558 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |   |     | `-DeclRefExpr 0x13f8e0518 <col:7> 'int ()' Function 0x13f8e0460 'parsecmd' 'int ()'
    |   |     `-ImplicitCastExpr 0x13f8e0598 <col:16> 'int' <LValueToRValue>
    |   |       `-DeclRefExpr 0x13f8e0538 <col:16> 'int' lvalue Var 0x13f8df8b8 'inter' 'int'
    |   |-IfStmt 0x13f8e26a8 <line:23:3, line:47:3> has_else
    |   | |-BinaryOperator 0x13f8e1a78 <line:23:7, col:12> 'int' contains-errors '=='
    |   | | |-DeclRefExpr 0x13f8e1a00 <col:7> 'union node *' lvalue Var 0x13f8c7008 'n' 'union node *'
    |   | | `-RecoveryExpr 0x13f8e1a58 <col:12> '<dependent type>' contains-errors lvalue
    |   | |-CompoundStmt 0x13f8e2190 <col:18, line:39:3>
    |   | | |-IfStmt 0x13f8e1b88 <line:24:4, line:25:5>
    |   | | | |-BinaryOperator 0x13f8e1b60 <line:24:8, col:26> 'int' '||'
    |   | | | | |-UnaryOperator 0x13f8e1ad0 <col:8, col:9> 'int' prefix '!' cannot overflow
    |   | | | | | `-ImplicitCastExpr 0x13f8e1ab8 <col:9> 'int' <LValueToRValue>
    |   | | | | |   `-DeclRefExpr 0x13f8e1a98 <col:9> 'int' lvalue ParmVar 0x13f8c6cd8 'top' 'int'
    |   | | | | `-BinaryOperator 0x13f8e1b40 <col:16, col:26> 'int' '>='
    |   | | | |   |-ImplicitCastExpr 0x13f8e1b28 <col:16> 'int' <LValueToRValue>
    |   | | | |   | `-DeclRefExpr 0x13f8e1ae8 <col:16> 'int' lvalue Var 0x13f8dfa08 'numeof' 'int'
    |   | | | |   `-IntegerLiteral 0x13f8e1b08 <col:26> 'int' 50
    |   | | | `-BreakStmt 0x13f8e1b80 <line:25:5>
    |   | | |-IfStmt 0x13f8e2138 <line:26:4, line:37:4>
    |   | | | |-UnaryOperator 0x13f8e1ce0 <line:26:8, col:21> 'int' prefix '!' cannot overflow
    |   | | | | `-CallExpr 0x13f8e1cc0 <col:9, col:21> 'int'
    |   | | | |   `-ImplicitCastExpr 0x13f8e1ca8 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   | | | |     `-DeclRefExpr 0x13f8e1c88 <col:9> 'int ()' Function 0x13f8e1bd0 'stoppedjobs' 'int ()'
    |   | | | `-CompoundStmt 0x13f8e2118 <col:24, line:37:4>
    |   | | |   |-IfStmt 0x13f8e1f80 <line:27:5, line:35:5>
    |   | | |   | |-UnaryOperator 0x13f8e1d78 <line:27:9, col:10> '<dependent type>' contains-errors prefix '!' cannot overflow
    |   | | |   | | `-ImplicitCastExpr 0x13f8e1d60 <col:10> '<dependent type>' contains-errors <LValueToRValue>
    |   | | |   | |   `-RecoveryExpr 0x13f8e1d40 <col:10> '<dependent type>' contains-errors lvalue
    |   | | |   | `-CompoundStmt 0x13f8e1f60 <col:17, line:35:5>
    |   | | |   |   |-IfStmt 0x13f8e1f38 <line:28:6, line:33:6>
    |   | | |   |   | |-RecoveryExpr 0x13f8e1da8 <line:28:10> '<dependent type>' contains-errors lvalue
    |   | | |   |   | `-CompoundStmt 0x13f8e1f20 <col:17, line:33:6>
    |   | | |   |   |   `-CallExpr 0x13f8e1ef8 <line:29:7, col:17> 'int'
    |   | | |   |   |     |-ImplicitCastExpr 0x13f8e1ee0 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |   | | |   |   |     | `-DeclRefExpr 0x13f8e1ea8 <col:7> 'int ()' Function 0x13f8e1df0 'out2c' 'int ()'
    |   | | |   |   |     `-CharacterLiteral 0x13f8e1ec8 <col:13> 'int' 10
    |   | | |   |   `-BreakStmt 0x13f8e1f58 <line:34:6>
    |   | | |   `-CallExpr 0x13f8e20d8 <line:36:5, col:18> 'int'
    |   | | |     |-ImplicitCastExpr 0x13f8e20c0 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |   | | |     | `-DeclRefExpr 0x13f8e2080 <col:5> 'int ()' Function 0x13f8e1fc8 'out2str' 'int ()'
    |   | | |     `-ImplicitCastExpr 0x13f8e2100 <col:13> 'char *' <ArrayToPointerDecay>
    |   | | |       `-StringLiteral 0x13f8e20a0 <col:13> 'char[4]' lvalue "STR"
    |   | | `-UnaryOperator 0x13f8e2178 <line:38:4, col:10> 'int' postfix '++'
    |   | |   `-DeclRefExpr 0x13f8e2158 <col:4> 'int' lvalue Var 0x13f8dfa08 'numeof' 'int'
    |   | `-IfStmt 0x13f8e2688 <line:39:10, line:47:3>
    |   |   |-BinaryOperator 0x13f8e2230 <line:39:14, col:23> 'int' contains-errors '=='
    |   |   | |-RecoveryExpr 0x13f8e2210 <col:14> '<dependent type>' contains-errors lvalue
    |   |   | `-IntegerLiteral 0x13f8e21d0 <col:23> 'int' 0
    |   |   `-CompoundStmt 0x13f8e2658 <col:26, line:47:3>
    |   |     |-DeclStmt 0x13f8e22d0 <line:40:4, col:9>
    |   |     | `-VarDecl 0x13f8e2268 <col:4, col:8> col:8 used i 'int'
    |   |     |-BinaryOperator 0x13f8e2388 <line:43:4, col:13> 'int' '='
    |   |     | |-DeclRefExpr 0x13f8e2348 <col:4> 'int' lvalue Var 0x13f8dfa08 'numeof' 'int'
    |   |     | `-IntegerLiteral 0x13f8e2368 <col:13> 'int' 0
    |   |     |-BinaryOperator 0x13f8e2568 <line:44:4, col:21> 'int' '='
    |   |     | |-DeclRefExpr 0x13f8e23a8 <col:4> 'int' lvalue Var 0x13f8e2268 'i' 'int'
    |   |     | `-CallExpr 0x13f8e2520 <col:8, col:21> 'int'
    |   |     |   |-ImplicitCastExpr 0x13f8e2508 <col:8> 'int (*)()' <FunctionToPointerDecay>
    |   |     |   | `-DeclRefExpr 0x13f8e24a8 <col:8> 'int ()' Function 0x13f8e23f0 'evaltree' 'int ()'
    |   |     |   |-ImplicitCastExpr 0x13f8e2550 <col:17> 'union node *' <LValueToRValue>
    |   |     |   | `-DeclRefExpr 0x13f8e24c8 <col:17> 'union node *' lvalue Var 0x13f8c7008 'n' 'union node *'
    |   |     |   `-IntegerLiteral 0x13f8e24e8 <col:20> 'int' 0
    |   |     `-IfStmt 0x13f8e2638 <line:45:4, line:46:14>
    |   |       |-ImplicitCastExpr 0x13f8e25a8 <line:45:8> 'union node *' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x13f8e2588 <col:8> 'union node *' lvalue Var 0x13f8c7008 'n' 'union node *'
    |   |       `-BinaryOperator 0x13f8e2618 <line:46:5, col:14> 'int' '='
    |   |         |-DeclRefExpr 0x13f8e25c0 <col:5> 'int' lvalue Var 0x13f8df950 'status' 'int'
    |   |         `-ImplicitCastExpr 0x13f8e2600 <col:14> 'int' <LValueToRValue>
    |   |           `-DeclRefExpr 0x13f8e25e0 <col:14> 'int' lvalue Var 0x13f8e2268 'i' 'int'
    |   |-CallExpr 0x13f8e2810 <line:48:3, col:22> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x13f8e27b8 <col:3> 'int ()' Function 0x13f8e2700 'popstackmark' 'int ()'
    |   | `-UnaryOperator 0x13f8e27f8 <col:16, col:17> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   |   `-RecoveryExpr 0x13f8e27d8 <col:17> '<dependent type>' contains-errors lvalue
    |   `-IfStmt 0x13f8e28b0 <line:51:3, line:54:3>
    |     |-ImplicitCastExpr 0x13f8e2878 <line:51:7> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x13f8e2858 <col:7> 'int' lvalue Var 0x13f8dfd68 'skip' 'int'
    |     `-CompoundStmt 0x13f8e2898 <col:13, line:54:3>
    |       `-BreakStmt 0x13f8e2890 <line:53:4>
    `-ReturnStmt 0x13f8e2998 <line:57:2, col:9>
      `-ImplicitCastExpr 0x13f8e2980 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x13f8e2960 <col:9> 'int' lvalue Var 0x13f8df950 'status' 'int'
