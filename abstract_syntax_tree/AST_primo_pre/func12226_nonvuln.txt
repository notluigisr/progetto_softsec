`-FunctionDecl 0x14a80dda8  line:1:1 fill_submatch_list 'int (int)'
  |-ParmVarDecl 0x14a80dcd8 <col:20, col:24> col:24 used argc 'int'
  `-CompoundStmt 0x14a8289f0 <line:2:1, line:29:1>
    |-DeclStmt 0x14a80df50 <line:4:5, col:11>
    | `-VarDecl 0x14a80dee8 <col:5, col:10> col:10 used i 'int'
    |-DeclStmt 0x14a80dfe8 <line:5:5, col:14>
    | `-VarDecl 0x14a80df80 <col:5, col:13> col:13 used s 'char *'
    |-IfStmt 0x14a80e180 <line:8:5, line:10:9>
    | |-BinaryOperator 0x14a80e118 <line:8:9, col:21> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x14a80e0d8 <col:9> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x14a80e0f8 <col:21> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x14a80e170 <line:10:2, col:9>
    |   `-RecoveryExpr 0x14a80e150 <col:9> '<dependent type>' contains-errors lvalue
    `-ForStmt 0x14a828998 <line:17:5, line:27:5>
      |-BinaryOperator 0x14a8284d0 <line:17:10, col:14> 'int' '='
      | |-DeclRefExpr 0x14a828490 <col:10> 'int' lvalue Var 0x14a80dee8 'i' 'int'
      | `-IntegerLiteral 0x14a8284b0 <col:14> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x14a828548 <col:17, col:21> 'int' '<'
      | |-ImplicitCastExpr 0x14a828530 <col:17> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x14a8284f0 <col:17> 'int' lvalue Var 0x14a80dee8 'i' 'int'
      | `-IntegerLiteral 0x14a828510 <col:21> 'int' 10
      |-UnaryOperator 0x14a828588 <col:25, col:27> 'int' prefix '++'
      | `-DeclRefExpr 0x14a828568 <col:27> 'int' lvalue Var 0x14a80dee8 'i' 'int'
      `-CompoundStmt 0x14a828988 <line:18:5, line:27:5>
