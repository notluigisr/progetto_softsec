`-FunctionDecl 0x1491284c8  line:1:12 invalid devicepbasecolor 'int (int *, int *, int, int *, int *, int *)' static
  |-ParmVarDecl 0x149128128 <col:29, col:39> col:39 invalid i_ctx_p 'int *'
  |-ParmVarDecl 0x1491281a8 <col:48, col:53> col:53 invalid space 'int *'
  |-ParmVarDecl 0x149128228 <col:60, col:64> col:64 base 'int'
  |-ParmVarDecl 0x1491282a8 <col:70, col:75> col:75 used stage 'int *'
  |-ParmVarDecl 0x149128328 <col:82, col:87> col:87 used cont 'int *'
  |-ParmVarDecl 0x1491283a8 <col:93, col:98> col:98 stack_depth 'int *'
  `-CompoundStmt 0x1491419c0 <line:2:1, line:9:1>
    |-BinaryOperator 0x149128610 <line:5:5, col:14> 'int' '='
    | |-UnaryOperator 0x1491285d8 <col:5, col:6> 'int' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x1491285c0 <col:6> 'int *' <LValueToRValue>
    | |   `-DeclRefExpr 0x1491285a0 <col:6> 'int *' lvalue ParmVar 0x1491282a8 'stage' 'int *'
    | `-IntegerLiteral 0x1491285f0 <col:14> 'int' 0
    |-BinaryOperator 0x1491286a0 <line:6:5, col:13> 'int' '='
    | |-UnaryOperator 0x149128668 <col:5, col:6> 'int' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x149128650 <col:6> 'int *' <LValueToRValue>
    | |   `-DeclRefExpr 0x149128630 <col:6> 'int *' lvalue ParmVar 0x149128328 'cont' 'int *'
    | `-IntegerLiteral 0x149128680 <col:13> 'int' 0
    |-CallExpr 0x149141960 <line:7:5, col:19> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x1491418b8 <col:5> 'int ()' Function 0x149141800 'make_int' 'int ()'
    | |-RecoveryExpr 0x149141940 <col:14> '<dependent type>' contains-errors lvalue
    | `-IntegerLiteral 0x1491418f0 <col:18> 'int' 0
    `-ReturnStmt 0x1491419b0 <line:8:5, col:12>
      `-IntegerLiteral 0x149141990 <col:12> 'int' 0
