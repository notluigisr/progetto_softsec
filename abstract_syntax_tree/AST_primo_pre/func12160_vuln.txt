`-FunctionDecl 0x146128318  line:1:12 invalid __socket_slurp 'int (int *, int *, int)' static
  |-ParmVarDecl 0x146128128 <col:28, col:37> col:37 invalid s 'int *'
  |-ParmVarDecl 0x1461281a8 <col:40, col:45> col:45 referenced invalid buf 'int *'
  |-ParmVarDecl 0x146128228 <col:50, col:54> col:54 used bufsz 'int'
  `-CompoundStmt 0x146808d60 <col:61, line:18:1>
    |-DeclStmt 0x146128458 <line:2:2, col:7>
    | `-VarDecl 0x1461283f0 <col:2, col:6> col:6 used i 'int'
    |-DeclStmt 0x146128510 <line:3:2, col:14>
    | `-VarDecl 0x146128488 <col:2, col:13> col:6 used chsz 'int' cinit
    |   `-IntegerLiteral 0x1461284f0 <col:13> 'int' 1
    |-IfStmt 0x146128780 <line:5:2, line:7:2>
    | |-RecoveryExpr 0x146128718 <line:5:6, col:49> '_Bool' contains-errors
    | `-CompoundStmt 0x146128768 <col:52, line:7:2>
    |   `-ReturnStmt 0x146128758 <line:6:3, col:10>
    |     `-IntegerLiteral 0x146128738 <col:10> 'int' 0
    |-ForStmt 0x146808ce0 <line:8:2, line:16:2>
    | |-BinaryOperator 0x1461287e0 <line:8:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x1461287a0 <col:7> 'int' lvalue Var 0x1461283f0 'i' 'int'
    | | `-IntegerLiteral 0x1461287c0 <col:11> 'int' 1
    | |-<<<NULL>>>
    | |-BinaryOperator 0x146808670 <col:14, col:18> 'int' '<'
    | | |-ImplicitCastExpr 0x146808640 <col:14> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x146808600 <col:14> 'int' lvalue Var 0x1461283f0 'i' 'int'
    | | `-ImplicitCastExpr 0x146808658 <col:18> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x146808620 <col:18> 'int' lvalue ParmVar 0x146128228 'bufsz' 'int'
    | |-CompoundAssignOperator 0x1468086e8 <col:25, col:30> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    | | |-DeclRefExpr 0x146808690 <col:25> 'int' lvalue Var 0x1461283f0 'i' 'int'
    | | `-ImplicitCastExpr 0x1468086d0 <col:30> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x1468086b0 <col:30> 'int' lvalue Var 0x146128488 'chsz' 'int'
    | `-CompoundStmt 0x146808cb0 <col:36, line:16:2>
    |   |-BinaryOperator 0x1468087f0 <line:9:3, col:11> '<dependent type>' contains-errors '='
    |   | |-ArraySubscriptExpr 0x1468087b0 <col:3, col:8> '<dependent type>' contains-errors lvalue
    |   | | |-ImplicitCastExpr 0x146808780 <col:3> '<dependent type>' contains-errors <LValueToRValue>
    |   | | | `-RecoveryExpr 0x146808738 <col:3> '<dependent type>' contains-errors lvalue
    |   | | |   `-DeclRefExpr 0x146808718 <col:3> 'int *' lvalue ParmVar 0x1461281a8 'buf' 'int *'
    |   | | `-ImplicitCastExpr 0x146808798 <col:7> 'int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x146808760 <col:7> 'int' lvalue Var 0x1461283f0 'i' 'int'
    |   | `-IntegerLiteral 0x1468087d0 <col:11> 'int' 0
    |   |-CallExpr 0x146808990 <line:10:3, col:37> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x1468088f0 <col:3> 'int ()' Function 0x146808838 'r_socket_block_time' 'int ()'
    |   | |-RecoveryExpr 0x146808910 <col:24> '<dependent type>' contains-errors lvalue
    |   | |-IntegerLiteral 0x146808930 <col:27> 'int' 1
    |   | |-IntegerLiteral 0x146808950 <col:30> 'int' 0
    |   | `-IntegerLiteral 0x146808970 <col:33> 'int' 1000
    |   |-DeclStmt 0x146808ac8 <line:11:3, col:61>
    |   | `-VarDecl 0x1468089e8 <col:3, col:7> col:7 used olen 'int'
    |   `-IfStmt 0x146808c90 <line:12:3, line:15:3>
    |     |-BinaryOperator 0x146808b50 <line:12:7, col:15> 'int' '!='
    |     | |-ImplicitCastExpr 0x146808b20 <col:7> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x146808ae0 <col:7> 'int' lvalue Var 0x1468089e8 'olen' 'int'
    |     | `-ImplicitCastExpr 0x146808b38 <col:15> 'int' <LValueToRValue>
    |     |   `-DeclRefExpr 0x146808b00 <col:15> 'int' lvalue Var 0x146128488 'chsz' 'int'
    |     `-CompoundStmt 0x146808c70 <col:21, line:15:3>
    |       |-BinaryOperator 0x146808c48 <line:13:4, col:13> '<dependent type>' contains-errors '='
    |       | |-ArraySubscriptExpr 0x146808c08 <col:4, col:9> '<dependent type>' contains-errors lvalue
    |       | | |-ImplicitCastExpr 0x146808bd8 <col:4> '<dependent type>' contains-errors <LValueToRValue>
    |       | | | `-RecoveryExpr 0x146808b90 <col:4> '<dependent type>' contains-errors lvalue
    |       | | |   `-DeclRefExpr 0x146808b70 <col:4> 'int *' lvalue ParmVar 0x1461281a8 'buf' 'int *'
    |       | | `-ImplicitCastExpr 0x146808bf0 <col:8> 'int' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x146808bb8 <col:8> 'int' lvalue Var 0x1461283f0 'i' 'int'
    |       | `-IntegerLiteral 0x146808c28 <col:13> 'int' 0
    |       `-BreakStmt 0x146808c68 <line:14:4>
    `-ReturnStmt 0x146808d50 <line:17:2, col:9>
      `-ImplicitCastExpr 0x146808d38 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x146808d18 <col:9> 'int' lvalue Var 0x1461283f0 'i' 'int'
