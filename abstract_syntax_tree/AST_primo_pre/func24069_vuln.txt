`-FunctionDecl 0x14a80e038  line:1:12 invalid send_full_color_rect 'int (int *, int, int, int, int)' static
  |-ParmVarDecl 0x14a80dd28 <col:33, col:43> col:43 invalid vs 'int *'
  |-ParmVarDecl 0x14a80dda8 <col:47, col:51> col:51 x 'int'
  |-ParmVarDecl 0x14a80de28 <col:54, col:58> col:58 y 'int'
  |-ParmVarDecl 0x14a80dea8 <col:61, col:65> col:65 used w 'int'
  |-ParmVarDecl 0x14a80df28 <col:68, col:72> col:72 used h 'int'
  `-CompoundStmt 0x14a827d90 <line:2:1, line:26:1>
    |-DeclStmt 0x14a80e1a8 <line:3:5, col:19>
    | `-VarDecl 0x14a80e120 <col:5, col:18> col:9 used stream 'int' cinit
    |   `-IntegerLiteral 0x14a80e188 <col:18> 'int' 0
    |-CallExpr 0x14a827400 <line:12:5, col:33> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x14a80e320 <col:5> 'int ()' Function 0x14a80e268 'vnc_write_u8' 'int ()'
    | |-RecoveryExpr 0x14a80e340 <col:18> '<dependent type>' contains-errors lvalue
    | `-BinaryOperator 0x14a80e3b8 <col:22, col:32> 'int' '<<'
    |   |-ImplicitCastExpr 0x14a80e3a0 <col:22> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x14a80e360 <col:22> 'int' lvalue Var 0x14a80e120 'stream' 'int'
    |   `-IntegerLiteral 0x14a80e380 <col:32> 'int' 4
    `-IfStmt 0x14a8279d0 <line:14:5, line:19:5> has_else
      |-CXXDependentScopeMemberExpr 0x14a827498 <line:14:9, col:19> '<dependent type>' contains-errors lvalue .pixel24
      | `-CXXDependentScopeMemberExpr 0x14a827450 <col:9, col:13> '<dependent type>' contains-errors lvalue ->tight
      |   `-RecoveryExpr 0x14a827430 <col:9> '<dependent type>' contains-errors lvalue
      |-CompoundStmt 0x14a8278f8 <col:28, line:17:5>
      | `-CallExpr 0x14a827898 <line:15:9, col:80> '<dependent type>' contains-errors
      |   |-DeclRefExpr 0x14a8275c0 <col:9> 'int ()' Function 0x14a827508 'tight_pack24' 'int ()'
      |   |-RecoveryExpr 0x14a8275e0 <col:22> '<dependent type>' contains-errors lvalue
      |   |-CXXDependentScopeMemberExpr 0x14a8276b0 <col:26, col:42> '<dependent type>' contains-errors lvalue .buffer
      |   | `-CXXDependentScopeMemberExpr 0x14a827668 <col:26, col:36> '<dependent type>' contains-errors lvalue .tight
      |   |   `-CXXDependentScopeMemberExpr 0x14a827620 <col:26, col:30> '<dependent type>' contains-errors lvalue ->tight
      |   |     `-RecoveryExpr 0x14a827600 <col:26> '<dependent type>' contains-errors lvalue
      |   |-BinaryOperator 0x14a827768 <col:50, col:54> 'int' '*'
      |   | |-ImplicitCastExpr 0x14a827738 <col:50> 'int' <LValueToRValue>
      |   | | `-DeclRefExpr 0x14a8276f8 <col:50> 'int' lvalue ParmVar 0x14a80dea8 'w' 'int'
      |   | `-ImplicitCastExpr 0x14a827750 <col:54> 'int' <LValueToRValue>
      |   |   `-DeclRefExpr 0x14a827718 <col:54> 'int' lvalue ParmVar 0x14a80df28 'h' 'int'
      |   `-UnaryOperator 0x14a827880 <col:57, col:74> '<dependent type>' contains-errors prefix '&' cannot overflow
      |     `-CXXDependentScopeMemberExpr 0x14a827838 <col:58, col:74> '<dependent type>' contains-errors lvalue .offset
      |       `-CXXDependentScopeMemberExpr 0x14a8277f0 <col:58, col:68> '<dependent type>' contains-errors lvalue .tight
      |         `-CXXDependentScopeMemberExpr 0x14a8277a8 <col:58, col:62> '<dependent type>' contains-errors lvalue ->tight
      |           `-RecoveryExpr 0x14a827788 <col:58> '<dependent type>' contains-errors lvalue
      `-CompoundStmt 0x14a8279c0 <line:17:12, line:19:5>
