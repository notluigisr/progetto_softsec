`-FunctionDecl 0x15200de38  line:1:20 object_common1 'long (int, int)' static inline
  |-ParmVarDecl 0x15200dd58 <col:35> col:35 UNSERIALIZE_PARAMETER 'int'
  |-ParmVarDecl 0x15200dcd8 <col:58> col:58 zend_class_entry 'int'
  `-CompoundStmt 0x152029cf8 <line:2:1, line:19:1>
    |-DeclStmt 0x15200dfb8 <line:3:2, col:15>
    | `-VarDecl 0x15200df50 <col:2, col:7> col:7 used elements 'long'
    |-IfStmt 0x152029c80 <line:10:2, line:16:2> has_else
    | |-RecoveryExpr 0x1520296d8 <line:10:6, col:136> '_Bool' contains-errors
    | |-CompoundStmt 0x152029928 <col:139, line:12:2>
    | | `-CallExpr 0x1520298f8 <line:11:3, col:27> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x1520297d8 <col:3> 'int ()' Function 0x152029720 'object_init_ex' 'int ()'
    | |   |-UnaryOperator 0x1520298c0 <col:18, col:19> '<dependent type>' contains-errors prefix '*' cannot overflow
    | |   | `-ImplicitCastExpr 0x1520298a8 <col:19> '<dependent type>' contains-errors <LValueToRValue>
    | |   |   `-RecoveryExpr 0x152029888 <col:19> '<dependent type>' contains-errors lvalue
    | |   `-RecoveryExpr 0x1520298d8 <col:25> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x152029c60 <line:12:9, line:16:2>
    |   |-CallExpr 0x152029be0 <line:14:3, col:40> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x152029a20 <col:3> 'int ()' Function 0x152029968 'zend_error' 'int ()'
    |   | |-RecoveryExpr 0x152029b58 <col:14> '<dependent type>' contains-errors lvalue
    |   | |-StringLiteral 0x152029aa0 <col:25> 'char[4]' lvalue "STR"
    |   | `-CXXDependentScopeMemberExpr 0x152029b98 <col:32, col:36> '<dependent type>' contains-errors lvalue ->name
    |   |   `-RecoveryExpr 0x152029b78 <col:32> '<dependent type>' contains-errors lvalue
    |   `-ReturnStmt 0x152029c50 <line:15:3, col:10>
    |     `-ImplicitCastExpr 0x152029c38 <col:10> 'long' <IntegralCast>
    |       `-IntegerLiteral 0x152029c18 <col:10> 'int' 0
    `-ReturnStmt 0x152029ce8 <line:18:2, col:9>
      `-ImplicitCastExpr 0x152029cd0 <col:9> 'long' <LValueToRValue>
        `-DeclRefExpr 0x152029cb0 <col:9> 'long' lvalue Var 0x15200df50 'elements' 'long'
