`-FunctionDecl 0x121128280  line:1:13 invalid AddStringToLexer 'void (int *, int)' static
  |-ParmVarDecl 0x121128128 <col:31, col:38> col:38 invalid lexer 'int *'
  |-ParmVarDecl 0x1211281a8 <col:45, col:53> col:53 invalid str 'int'
  `-CompoundStmt 0x1211287d8 <line:2:1, line:8:1>
    |-DeclStmt 0x1211283b8 <line:3:5, col:11>
    | `-VarDecl 0x121128350 <col:5, col:10> col:10 used c 'int'
    `-WhileStmt 0x1211287b8 <line:6:5, line:7:39>
      |-BinaryOperator 0x1211284f8 <line:6:12, col:45> 'int' contains-errors '!='
      | |-IntegerLiteral 0x1211283d0 <col:12> 'int' 0
      | `-ParenExpr 0x1211284d8 <col:17, col:45> 'int' contains-errors
      |   `-BinaryOperator 0x1211284b8 <col:18, col:42> 'int' contains-errors '='
      |     |-DeclRefExpr 0x1211283f0 <col:18> 'int' lvalue Var 0x121128350 'c' 'int'
      |     `-ImplicitCastExpr 0x1211284a0 <col:22, col:42> 'int' contains-errors <IntegralCast>
      |       `-CStyleCastExpr 0x121128478 <col:22, col:42> 'unsigned char' contains-errors <Dependent>
      |         `-UnaryOperator 0x121128448 <col:38, col:42> '<dependent type>' contains-errors prefix '*' cannot overflow
      |           `-UnaryOperator 0x121128430 <col:39, col:42> '<dependent type>' contains-errors postfix '++' cannot overflow
      |             `-RecoveryExpr 0x121128410 <col:39> '<dependent type>' contains-errors lvalue
      `-CallExpr 0x121128788 <line:7:9, col:39> '<dependent type>' contains-errors
        |-CallExpr 0x121128760 <col:9, col:27> '<dependent type>' contains-errors
        | |-DeclRefExpr 0x121128670 <col:9> 'int ()' Function 0x1211285b8 'TY_' 'int ()'
        | `-RecoveryExpr 0x121128740 <col:13> '<dependent type>' contains-errors lvalue
        |-RecoveryExpr 0x1211286d0 <col:30> '<dependent type>' contains-errors lvalue
        `-DeclRefExpr 0x1211286f0 <col:37> 'int' lvalue Var 0x121128350 'c' 'int'
