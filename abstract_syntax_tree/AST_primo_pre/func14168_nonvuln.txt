`-FunctionDecl 0x13480de88  line:1:1 invalid fix_unset_addr_list 'int (int *, int *)'
  |-ParmVarDecl 0x13480dd28 <col:21, col:36> col:36 invalid uslist 'int *'
  |-ParmVarDecl 0x13480dda8 <col:44, col:53> col:53 invalid reg 'int *'
  `-CompoundStmt 0x134828030 <line:2:1, line:20:1>
    |-DeclStmt 0x13480e058 <line:3:3, col:16>
    | |-VarDecl 0x13480df58 <col:3, col:7> col:7 used i 'int'
    | `-VarDecl 0x13480dfd8 <col:3, col:10> col:10 used offset 'int'
    |-ForStmt 0x134827fc8 <line:8:3, line:18:3>
    | |-BinaryOperator 0x13480e0e0 <line:8:8, col:12> 'int' '='
    | | |-DeclRefExpr 0x13480e0a0 <col:8> 'int' lvalue Var 0x13480df58 'i' 'int'
    | | `-IntegerLiteral 0x13480e0c0 <col:12> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x13480e188 <col:15, col:27> 'int' contains-errors '<'
    | | |-DeclRefExpr 0x13480e100 <col:15> 'int' lvalue Var 0x13480df58 'i' 'int'
    | | `-CXXDependentScopeMemberExpr 0x13480e140 <col:19, col:27> '<dependent type>' contains-errors lvalue ->num
    | |   `-RecoveryExpr 0x13480e120 <col:19> '<dependent type>' contains-errors lvalue
    | |-UnaryOperator 0x13480e1c8 <col:32, col:33> 'int' postfix '++'
    | | `-DeclRefExpr 0x13480e1a8 <col:32> 'int' lvalue Var 0x13480df58 'i' 'int'
    | `-CompoundStmt 0x134827fa0 <col:37, line:18:3>
    |   |-IfStmt 0x134827908 <line:9:5, line:10:14>
    |   | |-UnaryOperator 0x1348278a8 <line:9:9, col:50> '<dependent type>' contains-errors prefix '!' cannot overflow
    |   | | `-CallExpr 0x134827880 <col:11, col:50> '<dependent type>' contains-errors
    |   | |   |-DeclRefExpr 0x13480e340 <col:11> 'int ()' Function 0x13480e288 'NODE_IS_ADDR_FIXED' 'int ()'
    |   | |   `-CXXDependentScopeMemberExpr 0x134827838 <col:30, col:44> '<dependent type>' contains-errors lvalue .target
    |   | |     `-ArraySubscriptExpr 0x134827818 <col:30, col:42> '<dependent type>' contains-errors lvalue
    |   | |       |-ImplicitCastExpr 0x13480e3e8 <col:30, col:38> '<dependent type>' contains-errors <LValueToRValue>
    |   | |       | `-CXXDependentScopeMemberExpr 0x13480e380 <col:30, col:38> '<dependent type>' contains-errors lvalue ->us
    |   | |       |   `-RecoveryExpr 0x13480e360 <col:30> '<dependent type>' contains-errors lvalue
    |   | |       `-ImplicitCastExpr 0x134827800 <col:41> 'int' <LValueToRValue>
    |   | |         `-DeclRefExpr 0x13480e3c8 <col:41> 'int' lvalue Var 0x13480df58 'i' 'int'
    |   | `-ReturnStmt 0x1348278f8 <line:10:7, col:14>
    |   |   `-RecoveryExpr 0x1348278d8 <col:14> '<dependent type>' contains-errors lvalue
    |   |-BinaryOperator 0x134827d58 <line:14:5, col:28> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x134827c18 <col:5> 'int' lvalue Var 0x13480dfd8 'offset' 'int'
    |   | `-CXXDependentScopeMemberExpr 0x134827d10 <col:14, col:28> '<dependent type>' contains-errors lvalue .offset
    |   |   `-ArraySubscriptExpr 0x134827cf0 <col:14, col:26> '<dependent type>' contains-errors lvalue
    |   |     |-ImplicitCastExpr 0x134827cc0 <col:14, col:22> '<dependent type>' contains-errors <LValueToRValue>
    |   |     | `-CXXDependentScopeMemberExpr 0x134827c58 <col:14, col:22> '<dependent type>' contains-errors lvalue ->us
    |   |     |   `-RecoveryExpr 0x134827c38 <col:14> '<dependent type>' contains-errors lvalue
    |   |     `-ImplicitCastExpr 0x134827cd8 <col:25> 'int' <LValueToRValue>
    |   |       `-DeclRefExpr 0x134827ca0 <col:25> 'int' lvalue Var 0x13480df58 'i' 'int'
    |   `-BinaryOperator 0x134827f80 <line:17:5, col:14> '<dependent type>' contains-errors '='
    |     |-UnaryOperator 0x134827f48 <col:5, col:6> '<dependent type>' contains-errors prefix '*' cannot overflow
    |     | `-ImplicitCastExpr 0x134827f30 <col:6> '<dependent type>' contains-errors <LValueToRValue>
    |     |   `-RecoveryExpr 0x134827f10 <col:6> '<dependent type>' contains-errors lvalue
    |     `-RecoveryExpr 0x134827f60 <col:14> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x134828020 <line:19:3, col:10>
      `-IntegerLiteral 0x134828000 <col:10> 'int' 0
