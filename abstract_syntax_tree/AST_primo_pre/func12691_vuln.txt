`-FunctionDecl 0x13d128328  line:1:5 main 'int (int, char **)'
  |-ParmVarDecl 0x13d1280d8 <col:10, col:14> col:14 used argc 'int'
  |-ParmVarDecl 0x13d128200 <col:20, col:31> col:26 used argv 'char **'
  `-CompoundStmt 0x13d143230 <line:2:1, line:62:1>
    |-IfStmt 0x13d128670 <line:3:5, line:6:5>
    | |-BinaryOperator 0x13d128480 <line:3:9, col:17> 'int' '!='
    | | |-ImplicitCastExpr 0x13d128468 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x13d128428 <col:9> 'int' lvalue ParmVar 0x13d1280d8 'argc' 'int'
    | | `-IntegerLiteral 0x13d128448 <col:17> 'int' 6
    | `-CompoundStmt 0x13d128658 <line:4:5, line:6:5>
    |   `-CallExpr 0x13d128638 <line:5:9, col:15> 'int'
    |     `-ImplicitCastExpr 0x13d128620 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x13d1285d0 <col:9> 'int ()' Function 0x13d128518 'usage' 'int ()'
    |-DeclStmt 0x13d1287a0 <line:8:5, col:31>
    | `-VarDecl 0x13d1286a8 <col:5, col:30> col:11 infilename 'char *' cinit
    |   `-ImplicitCastExpr 0x13d128788 <col:24, col:30> 'char *' <LValueToRValue>
    |     `-ArraySubscriptExpr 0x13d128768 <col:24, col:30> 'char *' lvalue
    |       |-ImplicitCastExpr 0x13d128750 <col:24> 'char **' <LValueToRValue>
    |       | `-DeclRefExpr 0x13d128710 <col:24> 'char **' lvalue ParmVar 0x13d128200 'argv' 'char **'
    |       `-IntegerLiteral 0x13d128730 <col:29> 'int' 1
    |-DeclStmt 0x13d141ef8 <line:9:5, col:32>
    | `-VarDecl 0x13d141e00 <col:5, col:31> col:11 outfilename 'char *' cinit
    |   `-ImplicitCastExpr 0x13d141ee0 <col:25, col:31> 'char *' <LValueToRValue>
    |     `-ArraySubscriptExpr 0x13d141ec0 <col:25, col:31> 'char *' lvalue
    |       |-ImplicitCastExpr 0x13d141ea8 <col:25> 'char **' <LValueToRValue>
    |       | `-DeclRefExpr 0x13d141e68 <col:25> 'char **' lvalue ParmVar 0x13d128200 'argv' 'char **'
    |       `-IntegerLiteral 0x13d141e88 <col:30> 'int' 2
    |-DeclStmt 0x13d142178 <line:10:5, col:39>
    | `-VarDecl 0x13d141f28 <col:5, col:38> col:18 width 'unsigned int' cinit
    |   `-ImplicitCastExpr 0x13d142160 <col:26, col:38> 'unsigned int' <IntegralCast>
    |     `-CallExpr 0x13d142120 <col:26, col:38> 'int'
    |       |-ImplicitCastExpr 0x13d142108 <col:26> 'int (*)()' <FunctionToPointerDecay>
    |       | `-DeclRefExpr 0x13d142070 <col:26> 'int ()' Function 0x13d141fb8 'atoi' 'int ()'
    |       `-ImplicitCastExpr 0x13d142148 <col:31, col:37> 'char *' <LValueToRValue>
    |         `-ArraySubscriptExpr 0x13d1420e8 <col:31, col:37> 'char *' lvalue
    |           |-ImplicitCastExpr 0x13d1420d0 <col:31> 'char **' <LValueToRValue>
    |           | `-DeclRefExpr 0x13d142090 <col:31> 'char **' lvalue ParmVar 0x13d128200 'argv' 'char **'
    |           `-IntegerLiteral 0x13d1420b0 <col:36> 'int' 3
    |-DeclStmt 0x13d142318 <line:11:5, col:40>
    | `-VarDecl 0x13d1421a8 <col:5, col:39> col:18 height 'unsigned int' cinit
    |   `-ImplicitCastExpr 0x13d142300 <col:27, col:39> 'unsigned int' <IntegralCast>
    |     `-CallExpr 0x13d1422c0 <col:27, col:39> 'int'
    |       |-ImplicitCastExpr 0x13d1422a8 <col:27> 'int (*)()' <FunctionToPointerDecay>
    |       | `-DeclRefExpr 0x13d142210 <col:27> 'int ()' Function 0x13d141fb8 'atoi' 'int ()'
    |       `-ImplicitCastExpr 0x13d1422e8 <col:32, col:38> 'char *' <LValueToRValue>
    |         `-ArraySubscriptExpr 0x13d142288 <col:32, col:38> 'char *' lvalue
    |           |-ImplicitCastExpr 0x13d142270 <col:32> 'char **' <LValueToRValue>
    |           | `-DeclRefExpr 0x13d142230 <col:32> 'char **' lvalue ParmVar 0x13d128200 'argv' 'char **'
    |           `-IntegerLiteral 0x13d142250 <col:37> 'int' 4
    |-DeclStmt 0x13d142440 <line:12:5, col:31>
    | `-VarDecl 0x13d142348 <col:5, col:30> col:11 colorspace 'char *' cinit
    |   `-ImplicitCastExpr 0x13d142428 <col:24, col:30> 'char *' <LValueToRValue>
    |     `-ArraySubscriptExpr 0x13d142408 <col:24, col:30> 'char *' lvalue
    |       |-ImplicitCastExpr 0x13d1423f0 <col:24> 'char **' <LValueToRValue>
    |       | `-DeclRefExpr 0x13d1423b0 <col:24> 'char **' lvalue ParmVar 0x13d128200 'argv' 'char **'
    |       `-IntegerLiteral 0x13d1423d0 <col:29> 'int' 5
    |-DeclStmt 0x13d1424f8 <line:18:5, col:23>
    | `-VarDecl 0x13d142470 <col:5, col:22> col:9 used components 'int' cinit
    |   `-IntegerLiteral 0x13d1424d8 <col:22> 'int' 0
    |-SwitchStmt 0x13d142560 <line:19:5, line:33:5>
    | |-RecoveryExpr 0x13d142540 <line:19:13> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x13d142788 <line:20:5, line:33:5>
    |   |-BinaryOperator 0x13d1425e0 <line:22:9, col:22> 'int' '='
    |   | |-DeclRefExpr 0x13d1425a0 <col:9> 'int' lvalue Var 0x13d142470 'components' 'int'
    |   | `-IntegerLiteral 0x13d1425c0 <col:22> 'int' 3
    |   |-BreakStmt 0x13d142600 <line:23:9>
    |   |-BinaryOperator 0x13d142660 <line:25:9, col:22> 'int' '='
    |   | |-DeclRefExpr 0x13d142620 <col:9> 'int' lvalue Var 0x13d142470 'components' 'int'
    |   | `-IntegerLiteral 0x13d142640 <col:22> 'int' 4
    |   |-BreakStmt 0x13d142680 <line:26:9>
    |   |-BinaryOperator 0x13d1426e0 <line:28:9, col:22> 'int' '='
    |   | |-DeclRefExpr 0x13d1426a0 <col:9> 'int' lvalue Var 0x13d142470 'components' 'int'
    |   | `-IntegerLiteral 0x13d1426c0 <col:22> 'int' 1
    |   |-BreakStmt 0x13d142700 <line:29:9>
    |   |-DefaultStmt 0x13d142760 <line:30:7, line:31:15>
    |   | `-CallExpr 0x13d142740 <col:9, col:15> 'int'
    |   |   `-ImplicitCastExpr 0x13d142728 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   |     `-DeclRefExpr 0x13d142708 <col:9> 'int ()' Function 0x13d128518 'usage' 'int ()'
    |   `-BreakStmt 0x13d142780 <line:32:9>
    |-DeclStmt 0x13d142950 <line:38:5, col:27>
    | `-VarDecl 0x13d1428e8 <col:5, col:26> col:19 used buf 'unsigned char[100]'
    |-WhileStmt 0x13d142c68 <line:42:5, line:53:5>
    | |-UnaryOperator 0x13d1429e8 <line:42:12, col:14> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x13d1429d0 <col:14> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x13d1429b0 <col:14> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x13d142c50 <line:43:5, line:53:5>
    |   `-IfStmt 0x13d142c20 <line:45:2, line:52:2> has_else
    |     |-RecoveryExpr 0x13d142bc0 <line:45:6, col:13> '_Bool' contains-errors
    |     |-CompoundStmt 0x13d142be0 <line:46:2, line:48:2>
    |     `-CompoundStmt 0x13d142c10 <line:50:2, line:52:2>
    |-IfStmt 0x13d142cb8 <line:55:5, line:58:5>
    | |-RecoveryExpr 0x13d142c88 <line:55:9, col:20> '_Bool' contains-errors
    | `-CompoundStmt 0x13d142ca8 <line:56:5, line:58:5>
    `-ReturnStmt 0x13d143220 <line:61:5, col:12>
      `-IntegerLiteral 0x13d143200 <col:12> 'int' 0
