`-FunctionDecl 0x1330f9088  line:1:1 invalid hb_set_union 'int (int *, const int *)'
  |-ParmVarDecl 0x1330f8f28 <col:15, col:31> col:31 referenced invalid set 'int *'
  |-ParmVarDecl 0x1330f8fa8 <line:2:8, col:24> col:24 invalid other 'const int *'
  `-CompoundStmt 0x1330f9568 <line:3:1, line:8:1>
    |-IfStmt 0x1330f9440 <line:4:3, line:5:5>
    | |-CallExpr 0x1330f9408 <line:4:7, col:45> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x1330f92a0 <col:7> 'int ()' Function 0x1330f91e8 'unlikely' 'int ()'
    | | `-CallExpr 0x1330f93e0 <col:17, col:44> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x1330f93a0 <col:17> 'int ()' Function 0x1330f92e8 'hb_object_is_immutable' 'int ()'
    | |   `-RecoveryExpr 0x1330f93c0 <col:41> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x1330f9430 <line:5:5>
    `-CallExpr 0x1330f9540 <line:7:3, col:22> '<dependent type>' contains-errors
      |-CXXDependentScopeMemberExpr 0x1330f94a8 <col:3, col:8> '<dependent type>' contains-errors lvalue ->union_
      | `-RecoveryExpr 0x1330f9480 <col:3> '<dependent type>' contains-errors lvalue
      |   `-DeclRefExpr 0x1330f9460 <col:3> 'int *' lvalue ParmVar 0x1330f8f28 'set' 'int *'
      `-UnaryOperator 0x1330f9528 <col:16, col:17> '<dependent type>' contains-errors prefix '*' cannot overflow
        `-ImplicitCastExpr 0x1330f9510 <col:17> '<dependent type>' contains-errors <LValueToRValue>
          `-RecoveryExpr 0x1330f94f0 <col:17> '<dependent type>' contains-errors lvalue
