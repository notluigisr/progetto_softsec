`-FunctionDecl 0x160026600  line:1:1 winlink_next_index 'int (struct winlinks *, int)'
  |-ParmVarDecl 0x16000e248 <col:20, col:37> col:37 used wwl 'struct winlinks *'
  |-ParmVarDecl 0x16000e2c8 <col:42, col:46> col:46 used idx 'int'
  `-CompoundStmt 0x160026ed0 <line:2:1, line:15:1>
    |-DeclStmt 0x160026780 <line:3:2, col:7>
    | `-VarDecl 0x160026718 <col:2, col:6> col:6 used i 'int'
    |-BinaryOperator 0x1600267f0 <line:5:2, col:6> 'int' '='
    | |-DeclRefExpr 0x160026798 <col:2> 'int' lvalue Var 0x160026718 'i' 'int'
    | `-ImplicitCastExpr 0x1600267d8 <col:6> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x1600267b8 <col:6> 'int' lvalue ParmVar 0x16000e2c8 'idx' 'int'
    |-DoStmt 0x160026e48 <line:6:2, line:13:19>
    | |-CompoundStmt 0x160026d98 <line:6:5, line:13:2>
    | | |-IfStmt 0x160026c18 <line:7:3, line:8:13>
    | | | |-BinaryOperator 0x160026b90 <line:7:7, col:40> 'int' contains-errors '=='
    | | | | |-CallExpr 0x160026b10 <col:7, col:35> 'int'
    | | | | | |-ImplicitCastExpr 0x160026af8 <col:7> 'int (*)()' <FunctionToPointerDecay>
    | | | | | | `-DeclRefExpr 0x160026940 <col:7> 'int ()' Function 0x160026888 'winlink_find_by_index' 'int ()'
    | | | | | |-ImplicitCastExpr 0x160026b40 <col:29> 'struct winlinks *' <LValueToRValue>
    | | | | | | `-DeclRefExpr 0x160026960 <col:29> 'struct winlinks *' lvalue ParmVar 0x16000e248 'wwl' 'struct winlinks *'
    | | | | | `-ImplicitCastExpr 0x160026b58 <col:34> 'int' <LValueToRValue>
    | | | | |   `-DeclRefExpr 0x160026980 <col:34> 'int' lvalue Var 0x160026718 'i' 'int'
    | | | | `-RecoveryExpr 0x160026b70 <col:40> '<dependent type>' contains-errors lvalue
    | | | `-ReturnStmt 0x160026c08 <line:8:4, col:13>
    | | |   `-ImplicitCastExpr 0x160026bf0 <col:11, col:13> 'int' <LValueToRValue>
    | | |     `-ParenExpr 0x160026bd0 <col:11, col:13> 'int' lvalue
    | | |       `-DeclRefExpr 0x160026bb0 <col:12> 'int' lvalue Var 0x160026718 'i' 'int'
    | | `-IfStmt 0x160026d68 <line:9:3, line:12:5> has_else
    | |   |-BinaryOperator 0x160026cb0 <line:9:7, col:12> 'int' contains-errors '=='
    | |   | |-DeclRefExpr 0x160026c38 <col:7> 'int' lvalue Var 0x160026718 'i' 'int'
    | |   | `-RecoveryExpr 0x160026c90 <col:12> '<dependent type>' contains-errors lvalue
    | |   |-BinaryOperator 0x160026d10 <line:10:4, col:8> 'int' '='
    | |   | |-DeclRefExpr 0x160026cd0 <col:4> 'int' lvalue Var 0x160026718 'i' 'int'
    | |   | `-IntegerLiteral 0x160026cf0 <col:8> 'int' 0
    | |   `-UnaryOperator 0x160026d50 <line:12:4, col:5> 'int' postfix '++'
    | |     `-DeclRefExpr 0x160026d30 <col:4> 'int' lvalue Var 0x160026718 'i' 'int'
    | `-BinaryOperator 0x160026e28 <line:13:11, col:16> 'int' '!='
    |   |-ImplicitCastExpr 0x160026df8 <col:11> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x160026db8 <col:11> 'int' lvalue Var 0x160026718 'i' 'int'
    |   `-ImplicitCastExpr 0x160026e10 <col:16> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x160026dd8 <col:16> 'int' lvalue ParmVar 0x16000e2c8 'idx' 'int'
    `-ReturnStmt 0x160026ec0 <line:14:2, col:12>
      `-ParenExpr 0x160026ea0 <col:9, col:12> 'int'
        `-UnaryOperator 0x160026e88 <col:10, col:11> 'int' prefix '-'
          `-IntegerLiteral 0x160026e68 <col:11> 'int' 1
