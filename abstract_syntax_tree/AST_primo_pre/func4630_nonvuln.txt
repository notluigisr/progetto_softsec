`-FunctionDecl 0x135124e58  line:1:7 invalid enc_untrusted_realloc 'void *(void *, int)'
  |-ParmVarDecl 0x135124cd8 <col:29, col:35> col:35 used ptr 'void *'
  |-ParmVarDecl 0x135124d70 <col:40, col:47> col:47 invalid size 'int'
  `-CompoundStmt 0x13580bb20 <col:53, line:27:1>
    |-RecoveryExpr 0x1351250a0 <line:7:3> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x135125370 <line:10:3, col:52> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x135125220 <col:3> 'int ()' Function 0x135125168 'CheckStatusAndParamCount' 'int ()'
    | |-RecoveryExpr 0x135125330 <col:28> '<dependent type>' contains-errors lvalue
    | |-RecoveryExpr 0x135125350 <col:36> '<dependent type>' contains-errors lvalue
    | |-StringLiteral 0x1351252b0 <col:44> 'char[4]' lvalue "STR"
    | `-IntegerLiteral 0x1351252d0 <col:51> 'int' 2
    |-DeclStmt 0x13580b6c8 <line:12:3, col:39>
    | `-VarDecl 0x13580b600 <col:3, col:9> col:9 used result 'void *'
    |-DeclStmt 0x13580b7c0 <line:13:3, col:40>
    | `-VarDecl 0x13580b6f8 <col:3, col:7> col:7 used klinux_errno 'int'
    |-IfStmt 0x13580ba68 <line:17:3, line:19:3>
    | |-BinaryOperator 0x13580b888 <line:17:7, col:26> 'int' contains-errors '&&'
    | | |-UnaryOperator 0x13580b810 <col:7, col:8> 'int' prefix '!' cannot overflow
    | | | `-ImplicitCastExpr 0x13580b7f8 <col:8> 'void *' <LValueToRValue>
    | | |   `-DeclRefExpr 0x13580b7d8 <col:8> 'void *' lvalue Var 0x13580b600 'result' 'void *'
    | | `-BinaryOperator 0x13580b868 <col:18, col:26> 'int' contains-errors '!='
    | |   |-RecoveryExpr 0x13580b828 <col:18> '<dependent type>' contains-errors lvalue
    | |   `-IntegerLiteral 0x13580b848 <col:26> 'int' 0
    | `-CompoundStmt 0x13580ba58 <col:29, line:19:3>
    |-IfStmt 0x13580bab8 <line:21:3, line:25:3>
    | |-RecoveryExpr 0x13580ba88 <line:21:7, col:77> '_Bool' contains-errors
    | `-CompoundStmt 0x13580baa8 <col:80, line:25:3>
    `-ReturnStmt 0x13580bb10 <line:26:3, col:10>
      `-ImplicitCastExpr 0x13580baf8 <col:10> 'void *' <LValueToRValue>
        `-DeclRefExpr 0x13580bad8 <col:10> 'void *' lvalue Var 0x13580b600 'result' 'void *'
