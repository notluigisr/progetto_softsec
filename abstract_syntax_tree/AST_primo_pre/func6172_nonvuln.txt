`-FunctionDecl 0x11e928288  line:1:16 invalid getGeometryRef 'int *(int, const char *)'
  |-ParmVarDecl 0x11e9280f0 <col:31, col:35> col:35 used ncid 'int'
  |-ParmVarDecl 0x11e928170 <col:41, col:54> col:54 used varName 'const char *'
  `-CompoundStmt 0x11e9286f0 <line:2:5, line:6:5>
    |-DeclStmt 0x11e9283e0 <line:3:9, col:22>
    | `-VarDecl 0x11e928358 <col:9, col:21> col:13 used varId 'int' cinit
    |   `-IntegerLiteral 0x11e9283c0 <col:21> 'int' 0
    |-CallExpr 0x11e928638 <line:4:9, col:43> 'int'
    | |-ImplicitCastExpr 0x11e928620 <col:9> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x11e928550 <col:9> 'int ()' Function 0x11e928498 'nc_inq_varid' 'int ()'
    | |-ImplicitCastExpr 0x11e928670 <col:22> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x11e928570 <col:22> 'int' lvalue ParmVar 0x11e9280f0 'ncid' 'int'
    | |-ImplicitCastExpr 0x11e928688 <col:28> 'const char *' <LValueToRValue>
    | | `-DeclRefExpr 0x11e928590 <col:28> 'const char *' lvalue ParmVar 0x11e928170 'varName' 'const char *'
    | `-UnaryOperator 0x11e9285d0 <col:37, col:38> 'int *' prefix '&' cannot overflow
    |   `-DeclRefExpr 0x11e9285b0 <col:38> 'int' lvalue Var 0x11e928358 'varId' 'int'
    |-ReturnStmt 0x11e9286d8 <line:5:9, col:16>
    | `-RecoveryExpr 0x11e9286b8 <col:16> '<dependent type>' contains-errors lvalue
    `-NullStmt 0x11e9286e8 <col:42>
