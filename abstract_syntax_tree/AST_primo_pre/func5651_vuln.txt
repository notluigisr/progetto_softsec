`-FunctionDecl 0x12e00dda8  line:1:1 limited_rand 'int (unsigned long)'
  |-ParmVarDecl 0x12e00dcd8 <col:14, col:28> col:28 used limit 'unsigned long'
  `-CompoundStmt 0x12e028a80 <line:2:1, line:18:1>
    |-DeclStmt 0x12e00e130 <line:3:5, col:42>
    | `-VarDecl 0x12e00deb8 <col:5, col:41> col:19 used mask 'unsigned long' cinit
    |   `-ImplicitCastExpr 0x12e00e118 <col:26, col:41> 'unsigned long' <IntegralCast>
    |     `-CallExpr 0x12e00e0d8 <col:26, col:41> 'int'
    |       |-ImplicitCastExpr 0x12e00e0c0 <col:26> 'int (*)()' <FunctionToPointerDecay>
    |       | `-DeclRefExpr 0x12e00e050 <col:26> 'int ()' Function 0x12e00df98 'make_mask' 'int ()'
    |       `-ImplicitCastExpr 0x12e00e100 <col:36> 'unsigned long' <LValueToRValue>
    |         `-DeclRefExpr 0x12e00e070 <col:36> 'unsigned long' lvalue ParmVar 0x12e00dcd8 'limit' 'unsigned long'
    |-DeclStmt 0x12e00e1c8 <line:4:5, col:10>
    | `-VarDecl 0x12e00e160 <col:5, col:9> col:9 used i 'int'
    |-DeclStmt 0x12e00e260 <line:5:5, col:22>
    | `-VarDecl 0x12e00e1f8 <col:5, col:19> col:19 used val 'unsigned long'
    |-LabelStmt 0x12e00e340 <line:7:3, line:8:11> 'retry'
    | `-BinaryOperator 0x12e00e2d0 <col:5, col:11> 'unsigned long' '='
    |   |-DeclRefExpr 0x12e00e278 <col:5> 'unsigned long' lvalue Var 0x12e00e1f8 'val' 'unsigned long'
    |   `-ImplicitCastExpr 0x12e00e2b8 <col:11> 'unsigned long' <IntegralCast>
    |     `-IntegerLiteral 0x12e00e298 <col:11> 'int' 0
    |-ForStmt 0x12e0289e8 <line:9:5, line:16:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-BinaryOperator 0x12e028498 <line:9:31, col:36> 'int' '<='
    | | |-IntegerLiteral 0x12e028440 <col:31> 'int' 0
    | | `-ImplicitCastExpr 0x12e028480 <col:36> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x12e028460 <col:36> 'int' lvalue Var 0x12e00e160 'i' 'int'
    | |-UnaryOperator 0x12e0284d8 <col:39, col:40> 'int' postfix '--'
    | | `-DeclRefExpr 0x12e0284b8 <col:39> 'int' lvalue Var 0x12e00e160 'i' 'int'
    | `-CompoundStmt 0x12e0289d0 <col:44, line:16:5>
    |   `-IfStmt 0x12e0289b0 <line:10:9, line:15:9>
    |     |-BinaryOperator 0x12e0285c0 <line:10:13, col:28> 'unsigned long' '>>'
    |     | |-ImplicitCastExpr 0x12e0285a8 <col:13> 'unsigned long' <LValueToRValue>
    |     | | `-DeclRefExpr 0x12e0284f0 <col:13> 'unsigned long' lvalue Var 0x12e00deb8 'mask' 'unsigned long'
    |     | `-ParenExpr 0x12e028588 <col:21, col:28> 'int'
    |     |   `-BinaryOperator 0x12e028568 <col:22, col:26> 'int' '*'
    |     |     |-ImplicitCastExpr 0x12e028550 <col:22> 'int' <LValueToRValue>
    |     |     | `-DeclRefExpr 0x12e028510 <col:22> 'int' lvalue Var 0x12e00e160 'i' 'int'
    |     |     `-IntegerLiteral 0x12e028530 <col:26> 'int' 32
    |     `-CompoundStmt 0x12e028988 <col:31, line:15:9>
    |       |-CompoundAssignOperator 0x12e028808 <line:11:13, col:46> 'unsigned long' '|=' ComputeLHSTy='unsigned long' ComputeResultTy='unsigned long'
    |       | |-DeclRefExpr 0x12e0285e0 <col:13> 'unsigned long' lvalue Var 0x12e00e1f8 'val' 'unsigned long'
    |       | `-ImplicitCastExpr 0x12e0287f0 <col:20, col:46> 'unsigned long' <IntegralCast>
    |       |   `-BinaryOperator 0x12e0287d0 <col:20, col:46> 'int' '<<'
    |       |     |-CallExpr 0x12e028718 <col:20, col:34> 'int'
    |       |     | `-ImplicitCastExpr 0x12e028700 <col:20> 'int (*)()' <FunctionToPointerDecay>
    |       |     |   `-DeclRefExpr 0x12e0286e0 <col:20> 'int ()' Function 0x12e028628 'genrand_int32' 'int ()'
    |       |     `-ParenExpr 0x12e0287b0 <col:39, col:46> 'int'
    |       |       `-BinaryOperator 0x12e028790 <col:40, col:44> 'int' '*'
    |       |         |-ImplicitCastExpr 0x12e028778 <col:40> 'int' <LValueToRValue>
    |       |         | `-DeclRefExpr 0x12e028738 <col:40> 'int' lvalue Var 0x12e00e160 'i' 'int'
    |       |         `-IntegerLiteral 0x12e028758 <col:44> 'int' 32
    |       |-CompoundAssignOperator 0x12e028890 <line:12:13, col:20> 'unsigned long' '&=' ComputeLHSTy='unsigned long' ComputeResultTy='unsigned long'
    |       | |-DeclRefExpr 0x12e028838 <col:13> 'unsigned long' lvalue Var 0x12e00e1f8 'val' 'unsigned long'
    |       | `-ImplicitCastExpr 0x12e028878 <col:20> 'unsigned long' <LValueToRValue>
    |       |   `-DeclRefExpr 0x12e028858 <col:20> 'unsigned long' lvalue Var 0x12e00deb8 'mask' 'unsigned long'
    |       `-IfStmt 0x12e028968 <line:13:13, line:14:22>
    |         |-BinaryOperator 0x12e028930 <line:13:17, col:25> 'int' '<'
    |         | |-ImplicitCastExpr 0x12e028900 <col:17> 'unsigned long' <LValueToRValue>
    |         | | `-DeclRefExpr 0x12e0288c0 <col:17> 'unsigned long' lvalue ParmVar 0x12e00dcd8 'limit' 'unsigned long'
    |         | `-ImplicitCastExpr 0x12e028918 <col:25> 'unsigned long' <LValueToRValue>
    |         |   `-DeclRefExpr 0x12e0288e0 <col:25> 'unsigned long' lvalue Var 0x12e00e1f8 'val' 'unsigned long'
    |         `-GotoStmt 0x12e028950 <line:14:17, col:22> 'retry' 0x12e00e2f0
    `-ReturnStmt 0x12e028a70 <line:17:5, col:12>
      `-ImplicitCastExpr 0x12e028a58 <col:12> 'int' <IntegralCast>
        `-ImplicitCastExpr 0x12e028a40 <col:12> 'unsigned long' <LValueToRValue>
          `-DeclRefExpr 0x12e028a20 <col:12> 'unsigned long' lvalue Var 0x12e00e1f8 'val' 'unsigned long'
