`-FunctionDecl 0x12f00df10  line:1:6 invalid gdImageWBMPCtx 'void (int, int, int *)'
  |-ParmVarDecl 0x12f00dcf0 <col:22, col:33> col:33 invalid image 'int'
  |-ParmVarDecl 0x12f00dd70 <col:40, col:44> col:44 used fg 'int'
  |-ParmVarDecl 0x12f00de28 <col:48, col:58> col:58 invalid out 'int *'
  `-CompoundStmt 0x12f028930 <line:2:1, line:29:1>
    |-DeclStmt 0x12f00e170 <line:3:2, col:15>
    | |-VarDecl 0x12f00dfe8 <col:2, col:6> col:6 used x 'int'
    | |-VarDecl 0x12f00e068 <col:2, col:9> col:9 used y 'int'
    | `-VarDecl 0x12f00e0e8 <col:2, col:12> col:12 used pos 'int'
    |-IfStmt 0x12f027e88 <line:7:2, line:10:2>
    | |-RecoveryExpr 0x12f027c48 <line:7:6, col:80> '_Bool' contains-errors
    | `-CompoundStmt 0x12f027e68 <col:86, line:10:2>
    |   |-CallExpr 0x12f027e18 <line:8:3, col:17> 'int'
    |   | |-ImplicitCastExpr 0x12f027e00 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x12f027d48 <col:3> 'int ()' Function 0x12f027c90 'gd_error' 'int ()'
    |   | `-ImplicitCastExpr 0x12f027e40 <col:12> 'char *' <ArrayToPointerDecay>
    |   |   `-StringLiteral 0x12f027db0 <col:12> 'char[4]' lvalue "STR"
    |   `-ReturnStmt 0x12f027e58 <line:9:3>
    |-BinaryOperator 0x12f027ee8 <line:13:2, col:8> 'int' '='
    | |-DeclRefExpr 0x12f027ea8 <col:2> 'int' lvalue Var 0x12f00e0e8 'pos' 'int'
    | `-IntegerLiteral 0x12f027ec8 <col:8> 'int' 0
    |-ForStmt 0x12f028470 <line:14:2, line:21:2>
    | |-BinaryOperator 0x12f027f48 <line:14:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x12f027f08 <col:7> 'int' lvalue Var 0x12f00e068 'y' 'int'
    | | `-IntegerLiteral 0x12f027f28 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x12f027ff0 <col:14, col:33> 'int' contains-errors '<'
    | | |-DeclRefExpr 0x12f027f68 <col:14> 'int' lvalue Var 0x12f00e068 'y' 'int'
    | | `-CallExpr 0x12f027fc8 <col:18, col:33> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x12f027f88 <col:18> 'int ()' Function 0x12f027aa0 'gdImageSY' 'int ()'
    | |   `-RecoveryExpr 0x12f027fa8 <col:28> '<dependent type>' contains-errors lvalue
    | |-UnaryOperator 0x12f028030 <col:36, col:37> 'int' postfix '++'
    | | `-DeclRefExpr 0x12f028010 <col:36> 'int' lvalue Var 0x12f00e068 'y' 'int'
    | `-CompoundStmt 0x12f028458 <col:41, line:21:2>
    |   `-ForStmt 0x12f028420 <line:15:3, line:20:3>
    |     |-BinaryOperator 0x12f028088 <line:15:8, col:12> 'int' '='
    |     | |-DeclRefExpr 0x12f028048 <col:8> 'int' lvalue Var 0x12f00dfe8 'x' 'int'
    |     | `-IntegerLiteral 0x12f028068 <col:12> 'int' 0
    |     |-<<<NULL>>>
    |     |-BinaryOperator 0x12f028130 <col:15, col:34> 'int' contains-errors '<'
    |     | |-DeclRefExpr 0x12f0280a8 <col:15> 'int' lvalue Var 0x12f00dfe8 'x' 'int'
    |     | `-CallExpr 0x12f028108 <col:19, col:34> '<dependent type>' contains-errors
    |     |   |-DeclRefExpr 0x12f0280c8 <col:19> 'int ()' Function 0x12f00e358 'gdImageSX' 'int ()'
    |     |   `-RecoveryExpr 0x12f0280e8 <col:29> '<dependent type>' contains-errors lvalue
    |     |-UnaryOperator 0x12f028170 <col:37, col:38> 'int' postfix '++'
    |     | `-DeclRefExpr 0x12f028150 <col:37> 'int' lvalue Var 0x12f00dfe8 'x' 'int'
    |     `-CompoundStmt 0x12f028400 <col:42, line:20:3>
    |       |-IfStmt 0x12f0283a8 <line:16:4, line:18:4>
    |       | |-BinaryOperator 0x12f028340 <line:16:8, col:41> 'int' contains-errors '=='
    |       | | |-CallExpr 0x12f0282e8 <col:8, col:36> '<dependent type>' contains-errors
    |       | | | |-DeclRefExpr 0x12f028268 <col:8> 'int ()' Function 0x12f0281b0 'gdImageGetPixel' 'int ()'
    |       | | | |-RecoveryExpr 0x12f028288 <col:25> '<dependent type>' contains-errors lvalue
    |       | | | |-DeclRefExpr 0x12f0282a8 <col:32> 'int' lvalue Var 0x12f00dfe8 'x' 'int'
    |       | | | `-DeclRefExpr 0x12f0282c8 <col:35> 'int' lvalue Var 0x12f00e068 'y' 'int'
    |       | | `-DeclRefExpr 0x12f028320 <col:41> 'int' lvalue ParmVar 0x12f00dd70 'fg' 'int'
    |       | `-CompoundStmt 0x12f028398 <col:45, line:18:4>
    |       `-UnaryOperator 0x12f0283e8 <line:19:4, col:7> 'int' postfix '++'
    |         `-DeclRefExpr 0x12f0283c8 <col:4> 'int' lvalue Var 0x12f00e0e8 'pos' 'int'
    |-IfStmt 0x12f028788 <line:24:2, line:26:2>
    | |-CallExpr 0x12f0286a0 <line:24:6, col:38> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x12f028588 <col:6> 'int ()' Function 0x12f0284d0 'writewbmp' 'int ()'
    | | |-RecoveryExpr 0x12f028648 <col:17> '<dependent type>' contains-errors lvalue
    | | |-UnaryOperator 0x12f028688 <col:23, col:24> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | | `-RecoveryExpr 0x12f028668 <col:24> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x12f0285f0 <col:35> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x12f028770 <col:41, line:26:2>
    |   `-CallExpr 0x12f028730 <line:25:3, col:17> 'int'
    |     |-ImplicitCastExpr 0x12f028718 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x12f0286d8 <col:3> 'int ()' Function 0x12f027c90 'gd_error' 'int ()'
    |     `-ImplicitCastExpr 0x12f028758 <col:12> 'char *' <ArrayToPointerDecay>
    |       `-StringLiteral 0x12f0286f8 <col:12> 'char[4]' lvalue "STR"
    `-CallExpr 0x12f028908 <line:28:2, col:15> '<dependent type>' contains-errors
      |-DeclRefExpr 0x12f028888 <col:2> 'int ()' Function 0x12f0287d0 'freewbmp' 'int ()'
      `-RecoveryExpr 0x12f0288e8 <col:11> '<dependent type>' contains-errors lvalue
