`-FunctionDecl 0x1461226d8  line:1:5 invalid nft_parse_register_load 'int (const struct nlattr *, int *, int)'
  |-ParmVarDecl 0x14680e248 <col:29, col:50> col:50 used attr 'const struct nlattr *'
  |-ParmVarDecl 0x14680e318 <col:56, col:60> col:60 referenced invalid sreg 'int *'
  |-ParmVarDecl 0x14680e398 <col:66, col:70> col:70 invalid len 'int'
  `-CompoundStmt 0x146122f48 <line:2:1, line:13:1>
    |-DeclStmt 0x146122818 <line:4:2, col:9>
    | `-VarDecl 0x1461227b0 <col:2, col:6> col:6 used err 'int'
    |-BinaryOperator 0x146122a98 <line:6:2, col:31> '<dependent type>' contains-errors '='
    | |-RecoveryExpr 0x146122850 <col:2> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x146122830 <col:2> 'int *' lvalue ParmVar 0x14680e318 'sreg' 'int *'
    | `-CallExpr 0x146122a58 <col:8, col:31> 'int'
    |   |-ImplicitCastExpr 0x146122a40 <col:8> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x1461229d0 <col:8> 'int ()' Function 0x146122918 'nft_parse_register' 'int ()'
    |   `-ImplicitCastExpr 0x146122a80 <col:27> 'const struct nlattr *' <LValueToRValue>
    |     `-DeclRefExpr 0x1461229f0 <col:27> 'const struct nlattr *' lvalue ParmVar 0x14680e248 'attr' 'const struct nlattr *'
    |-BinaryOperator 0x146122cd0 <line:7:2, col:43> 'int' contains-errors '='
    | |-DeclRefExpr 0x146122ab8 <col:2> 'int' lvalue Var 0x1461227b0 'err' 'int'
    | `-CallExpr 0x146122ca0 <col:8, col:43> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x146122bb8 <col:8> 'int ()' Function 0x146122b00 'nft_validate_register_load' 'int ()'
    |   |-RecoveryExpr 0x146122c80 <col:35> '<dependent type>' contains-errors lvalue
    |   `-RecoveryExpr 0x146122bf0 <col:40> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x146122db0 <line:8:2, line:9:10>
    | |-BinaryOperator 0x146122d48 <line:8:6, col:12> 'int' '<'
    | | |-ImplicitCastExpr 0x146122d30 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x146122cf0 <col:6> 'int' lvalue Var 0x1461227b0 'err' 'int'
    | | `-IntegerLiteral 0x146122d10 <col:12> 'int' 0
    | `-ReturnStmt 0x146122da0 <line:9:3, col:10>
    |   `-ImplicitCastExpr 0x146122d88 <col:10> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x146122d68 <col:10> 'int' lvalue Var 0x1461227b0 'err' 'int'
    |-BinaryOperator 0x146122ef8 <line:11:2, col:10> '<dependent type>' contains-errors '='
    | |-UnaryOperator 0x146122ec0 <col:2, col:3> '<dependent type>' contains-errors prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x146122ea8 <col:3> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x146122dd0 <col:3> '<dependent type>' contains-errors lvalue
    | `-RecoveryExpr 0x146122ed8 <col:10> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x146122f38 <line:12:2, col:9>
      `-IntegerLiteral 0x146122f18 <col:9> 'int' 0
