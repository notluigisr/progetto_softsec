`-FunctionDecl 0x153017238  line:1:1 SPL_METHOD 'int (int, int)'
  |-ParmVarDecl 0x153017158 <col:12> col:12 SplFileObject 'int'
  |-ParmVarDecl 0x1530170d8 <col:27> col:27 fgetcsv 'int'
  `-CompoundStmt 0x1538ff660 <line:2:1, line:37:1>
    |-DeclStmt 0x1538fd0c8 <line:4:2, col:113>
    | |-VarDecl 0x153017390 <col:2, col:34> col:7 used delimiter 'char' cinit
    | | `-CXXDependentScopeMemberExpr 0x153017598 <col:19, col:34> '<dependent type>' contains-errors lvalue .delimiter
    | |   `-CXXDependentScopeMemberExpr 0x153017550 <col:19, col:29> '<dependent type>' contains-errors lvalue .file
    | |     `-CXXDependentScopeMemberExpr 0x153017508 <col:19, col:27> '<dependent type>' contains-errors lvalue ->u
    | |       `-RecoveryExpr 0x1530174e8 <col:19> '<dependent type>' contains-errors lvalue
    | |-VarDecl 0x1530175f0 <col:2, col:72> col:45 used enclosure 'char' cinit
    | | `-CXXDependentScopeMemberExpr 0x1538fce00 <col:57, col:72> '<dependent type>' contains-errors lvalue .enclosure
    | |   `-CXXDependentScopeMemberExpr 0x1530177b0 <col:57, col:67> '<dependent type>' contains-errors lvalue .file
    | |     `-CXXDependentScopeMemberExpr 0x153017768 <col:57, col:65> '<dependent type>' contains-errors lvalue ->u
    | |       `-RecoveryExpr 0x153017748 <col:57> '<dependent type>' contains-errors lvalue
    | `-VarDecl 0x1538fce58 <col:2, col:107> col:83 used escape 'char' cinit
    |   `-CXXDependentScopeMemberExpr 0x1538fd060 <col:92, col:107> '<dependent type>' contains-errors lvalue .escape
    |     `-CXXDependentScopeMemberExpr 0x1538fd018 <col:92, col:102> '<dependent type>' contains-errors lvalue .file
    |       `-CXXDependentScopeMemberExpr 0x1538fcfd0 <col:92, col:100> '<dependent type>' contains-errors lvalue ->u
    |         `-RecoveryExpr 0x1538fcfb0 <col:92> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x1538fd328 <line:5:2, col:48>
    | |-VarDecl 0x1538fd0f8 <col:2, col:16> col:8 used delim 'char *' cinit
    | | `-RecoveryExpr 0x1538fd178 <col:16> '<dependent type>' contains-errors lvalue
    | |-VarDecl 0x1538fd1b0 <col:2, col:31> col:23 used enclo 'char *' cinit
    | | `-RecoveryExpr 0x1538fd230 <col:31> '<dependent type>' contains-errors lvalue
    | `-VarDecl 0x1538fd268 <col:2, col:44> col:38 used esc 'char *' cinit
    |   `-RecoveryExpr 0x1538fd2e8 <col:44> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x1538fd540 <line:6:2, col:39>
    | |-VarDecl 0x1538fd358 <col:2, col:14> col:6 used d_len 'int' cinit
    | | `-IntegerLiteral 0x1538fd3c0 <col:14> 'int' 0
    | |-VarDecl 0x1538fd3f8 <col:2, col:25> col:17 used e_len 'int' cinit
    | | `-IntegerLiteral 0x1538fd460 <col:25> 'int' 0
    | `-VarDecl 0x1538fd498 <col:2, col:38> col:28 used esc_len 'int' cinit
    |   `-IntegerLiteral 0x1538fd500 <col:38> 'int' 0
    `-IfStmt 0x1538ff640 <line:8:2, line:36:2>
      |-RecoveryExpr 0x1538fd810 <line:8:6, col:113> '_Bool' contains-errors
      `-CompoundStmt 0x1538ff628 <col:122, line:36:2>
        `-SwitchStmt 0x1538fd888 <line:9:3, line:34:3>
          |-CallExpr 0x1538fd868 <line:9:10, col:24> 'int'
          | `-ImplicitCastExpr 0x1538fd850 <col:10> 'int (*)()' <FunctionToPointerDecay>
          |   `-DeclRefExpr 0x1538fd830 <col:10> 'int ()' Function 0x1538fd6b8 'ZEND_NUM_ARGS' 'int ()'
          `-CompoundStmt 0x1538ff480 <line:10:3, line:34:3>
            |-CaseStmt 0x1538fd8e8 <line:11:3, line:15:4>
            | |-ConstantExpr 0x1538fd8d0 <line:11:8> 'int'
            | | `-IntegerLiteral 0x1538fd8b0 <col:8> 'int' 3
            | `-IfStmt 0x1538fdab0 <line:12:4, line:15:4>
            |   |-BinaryOperator 0x1538fd968 <line:12:8, col:19> 'int' '!='
            |   | |-ImplicitCastExpr 0x1538fd950 <col:8> 'int' <LValueToRValue>
            |   | | `-DeclRefExpr 0x1538fd910 <col:8> 'int' lvalue Var 0x1538fd498 'esc_len' 'int'
            |   | `-IntegerLiteral 0x1538fd930 <col:19> 'int' 1
            |   `-CompoundStmt 0x1538fdaa0 <col:22, line:15:4>
            |-BinaryOperator 0x1538fdb80 <line:16:4, col:18> 'char' contains-errors '='
            | |-DeclRefExpr 0x1538fdad0 <col:4> 'char' contains-errors lvalue Var 0x1538fce58 'escape' 'char'
            | `-ImplicitCastExpr 0x1538fdb68 <col:13, col:18> 'char' contains-errors <LValueToRValue>
            |   `-ArraySubscriptExpr 0x1538fdb48 <col:13, col:18> 'char' contains-errors lvalue
            |     |-ImplicitCastExpr 0x1538fdb30 <col:13> 'char *' contains-errors <LValueToRValue>
            |     | `-DeclRefExpr 0x1538fdaf0 <col:13> 'char *' contains-errors lvalue Var 0x1538fd268 'esc' 'char *'
            |     `-IntegerLiteral 0x1538fdb10 <col:17> 'int' 0
            |-CaseStmt 0x1538fdbd8 <line:18:3, line:22:4>
            | |-ConstantExpr 0x1538fdbc0 <line:18:8> 'int'
            | | `-IntegerLiteral 0x1538fdba0 <col:8> 'int' 2
            | `-IfStmt 0x1538fdd10 <line:19:4, line:22:4>
            |   |-BinaryOperator 0x1538fdc58 <line:19:8, col:17> 'int' '!='
            |   | |-ImplicitCastExpr 0x1538fdc40 <col:8> 'int' <LValueToRValue>
            |   | | `-DeclRefExpr 0x1538fdc00 <col:8> 'int' lvalue Var 0x1538fd3f8 'e_len' 'int'
            |   | `-IntegerLiteral 0x1538fdc20 <col:17> 'int' 1
            |   `-CompoundStmt 0x1538fdd00 <col:20, line:22:4>
            |-BinaryOperator 0x1538fdde0 <line:23:4, col:23> 'char' contains-errors '='
            | |-DeclRefExpr 0x1538fdd30 <col:4> 'char' contains-errors lvalue Var 0x1530175f0 'enclosure' 'char'
            | `-ImplicitCastExpr 0x1538fddc8 <col:16, col:23> 'char' contains-errors <LValueToRValue>
            |   `-ArraySubscriptExpr 0x1538fdda8 <col:16, col:23> 'char' contains-errors lvalue
            |     |-ImplicitCastExpr 0x1538fdd90 <col:16> 'char *' contains-errors <LValueToRValue>
            |     | `-DeclRefExpr 0x1538fdd50 <col:16> 'char *' contains-errors lvalue Var 0x1538fd1b0 'enclo' 'char *'
            |     `-IntegerLiteral 0x1538fdd70 <col:22> 'int' 0
            |-CaseStmt 0x1538ff238 <line:25:3, line:29:4>
            | |-ConstantExpr 0x1538ff220 <line:25:8> 'int'
            | | `-IntegerLiteral 0x1538ff200 <col:8> 'int' 1
            | `-IfStmt 0x1538ff328 <line:26:4, line:29:4>
            |   |-BinaryOperator 0x1538ff2b8 <line:26:8, col:17> 'int' '!='
            |   | |-ImplicitCastExpr 0x1538ff2a0 <col:8> 'int' <LValueToRValue>
            |   | | `-DeclRefExpr 0x1538ff260 <col:8> 'int' lvalue Var 0x1538fd358 'd_len' 'int'
            |   | `-IntegerLiteral 0x1538ff280 <col:17> 'int' 1
            |   `-CompoundStmt 0x1538ff318 <col:20, line:29:4>
            |-BinaryOperator 0x1538ff3f8 <line:30:4, col:23> 'char' contains-errors '='
            | |-DeclRefExpr 0x1538ff348 <col:4> 'char' contains-errors lvalue Var 0x153017390 'delimiter' 'char'
            | `-ImplicitCastExpr 0x1538ff3e0 <col:16, col:23> 'char' contains-errors <LValueToRValue>
            |   `-ArraySubscriptExpr 0x1538ff3c0 <col:16, col:23> 'char' contains-errors lvalue
            |     |-ImplicitCastExpr 0x1538ff3a8 <col:16> 'char *' contains-errors <LValueToRValue>
            |     | `-DeclRefExpr 0x1538ff368 <col:16> 'char *' contains-errors lvalue Var 0x1538fd0f8 'delim' 'char *'
            |     `-IntegerLiteral 0x1538ff388 <col:22> 'int' 0
            `-CaseStmt 0x1538ff450 <line:32:3, line:33:4>
              |-ConstantExpr 0x1538ff438 <line:32:8> 'int'
              | `-IntegerLiteral 0x1538ff418 <col:8> 'int' 0
              `-BreakStmt 0x1538ff478 <line:33:4>
