`-FunctionDecl 0x14d126268  line:1:5 fbytes 'int (unsigned char *, int)'
  |-ParmVarDecl 0x14d126108 <col:12, col:27> col:27 used buf 'unsigned char *'
  |-ParmVarDecl 0x14d126188 <col:32, col:36> col:36 used num 'int'
  `-CompoundStmt 0x14c80baf0 <line:2:1, line:23:1>
    |-DeclStmt 0x14d1263e8 <line:3:5, col:12>
    | `-VarDecl 0x14d126380 <col:5, col:9> col:9 used ret 'int'
    |-IfStmt 0x14d126510 <line:6:5, line:7:16>
    | |-BinaryOperator 0x14d1264c0 <line:6:9, col:27> 'int' contains-errors '>='
    | | |-RecoveryExpr 0x14d1264a0 <col:9> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x14d126460 <col:27> 'int' 8
    | `-ReturnStmt 0x14d126500 <line:7:9, col:16>
    |   `-IntegerLiteral 0x14d1264e0 <col:16> 'int' 0
    |-IfStmt 0x14d126790 <line:9:5, line:10:16>
    | |-UnaryOperator 0x14d126748 <line:9:9, col:10> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x14d126730 <col:10> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x14d126710 <col:10> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x14d126780 <line:10:9, col:16>
    |   `-IntegerLiteral 0x14d126760 <col:16> 'int' 0
    |-IfStmt 0x14c80b530 <line:11:5, line:14:5>
    | |-RecoveryExpr 0x14c80b338 <line:11:9, col:49> '_Bool' contains-errors
    | `-CompoundStmt 0x14c80b510 <col:52, line:14:5>
    |   |-CallExpr 0x14c80b4b8 <line:12:9, col:20> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x14c80b438 <col:9> 'int ()' Function 0x14c80b380 'BN_free' 'int ()'
    |   | `-RecoveryExpr 0x14c80b498 <col:17> '<dependent type>' contains-errors lvalue
    |   `-ReturnStmt 0x14c80b500 <line:13:9, col:16>
    |     `-IntegerLiteral 0x14c80b4e0 <col:16> 'int' 0
    |-IfStmt 0x14c80ba20 <line:16:5, line:19:15> has_else
    | |-BinaryOperator 0x14c80b940 <line:16:9, col:56> 'int' contains-errors '||'
    | | |-BinaryOperator 0x14c80b8b8 <col:9, col:32> 'int' contains-errors '!='
    | | | |-DeclRefExpr 0x14c80b550 <col:9> 'int' lvalue ParmVar 0x14d126188 'num' 'int'
    | | | `-CallExpr 0x14c80b890 <col:16, col:32> '<dependent type>' contains-errors
    | | |   |-DeclRefExpr 0x14c80b650 <col:16> 'int ()' Function 0x14c80b598 'BN_num_bytes' 'int ()'
    | | |   `-RecoveryExpr 0x14c80b870 <col:29> '<dependent type>' contains-errors lvalue
    | | `-UnaryOperator 0x14c80b928 <col:37, col:56> '<dependent type>' contains-errors prefix '!' cannot overflow
    | |   `-CallExpr 0x14c80b8f8 <col:38, col:56> '<dependent type>' contains-errors
    | |     |-DeclRefExpr 0x14c80b7b0 <col:38> 'int ()' Function 0x14c80b6f8 'BN_bn2bin' 'int ()'
    | |     |-RecoveryExpr 0x14c80b8d8 <col:48> '<dependent type>' contains-errors lvalue
    | |     `-DeclRefExpr 0x14c80b7e8 <col:53> 'unsigned char *' lvalue ParmVar 0x14d126108 'buf' 'unsigned char *'
    | |-BinaryOperator 0x14c80b9a0 <line:17:9, col:15> 'int' '='
    | | |-DeclRefExpr 0x14c80b960 <col:9> 'int' lvalue Var 0x14d126380 'ret' 'int'
    | | `-IntegerLiteral 0x14c80b980 <col:15> 'int' 0
    | `-BinaryOperator 0x14c80ba00 <line:19:9, col:15> 'int' '='
    |   |-DeclRefExpr 0x14c80b9c0 <col:9> 'int' lvalue Var 0x14d126380 'ret' 'int'
    |   `-IntegerLiteral 0x14c80b9e0 <col:15> 'int' 1
    `-ReturnStmt 0x14c80bae0 <line:22:5, col:12>
      `-ImplicitCastExpr 0x14c80bac8 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x14c80baa8 <col:12> 'int' lvalue Var 0x14d126380 'ret' 'int'
