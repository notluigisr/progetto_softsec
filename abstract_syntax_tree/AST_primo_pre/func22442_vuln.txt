`-FunctionDecl 0x13c928758  line:1:5 lgff_init 'int (struct hid_device *)'
  |-ParmVarDecl 0x13c928648 <col:15, col:34> col:34 used hid 'struct hid_device *'
  `-CompoundStmt 0x13d0098b8 <line:2:1, line:34:1>
    |-DeclStmt 0x13c940e48 <line:3:2, col:83>
    | |-RecordDecl 0x13c940a50 <col:2, col:9> col:9 struct hid_input
    | `-VarDecl 0x13c940bb8 <col:2, col:20> col:20 used hidinput 'struct hid_input *'
    |-DeclStmt 0x13c9410a8 <line:4:2, col:41>
    | |-RecordDecl 0x13c940e60 <col:2, col:9> col:9 struct input_dev
    | `-VarDecl 0x13c940fc8 <col:2, col:36> col:20 used dev 'struct input_dev *' cinit
    |   `-RecoveryExpr 0x13c941068 <col:26, col:36> '<dependent type>' contains-errors lvalue
    |     `-DeclRefExpr 0x13c941030 <col:26> 'struct hid_input *' lvalue Var 0x13c940bb8 'hidinput' 'struct hid_input *'
    |-DeclStmt 0x13c9411a8 <line:5:2, col:43>
    | `-VarDecl 0x13c941108 <col:2, col:32> col:22 used ff_bits 'const short *' cinit
    |   `-RecoveryExpr 0x13c941188 <col:32> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x13c941240 <line:6:2, col:11>
    | `-VarDecl 0x13c9411d8 <col:2, col:6> col:6 used error 'int'
    |-DeclStmt 0x13c9412d8 <line:7:2, col:7>
    | `-VarDecl 0x13c941270 <col:2, col:6> col:6 used i 'int'
    |-IfStmt 0x13c941610 <line:10:2, line:11:11>
    | |-UnaryOperator 0x13c941550 <line:10:6, col:58> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-CallExpr 0x13c941508 <col:7, col:58> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x13c9413d0 <col:7> 'int ()' Function 0x13c941318 'hid_validate_values' 'int ()'
    | |   |-DeclRefExpr 0x13c9413f0 <col:27> 'struct hid_device *' lvalue ParmVar 0x13c928648 'hid' 'struct hid_device *'
    | |   |-RecoveryExpr 0x13c9414e8 <col:32> '<dependent type>' contains-errors lvalue
    | |   |-IntegerLiteral 0x13c941428 <col:51> 'int' 0
    | |   |-IntegerLiteral 0x13c941448 <col:54> 'int' 0
    | |   `-IntegerLiteral 0x13c941468 <col:57> 'int' 7
    | `-ReturnStmt 0x13c941600 <line:11:3, col:11>
    |   `-UnaryOperator 0x13c9415e8 <col:10, col:11> '<dependent type>' contains-errors prefix '-' cannot overflow
    |     `-ImplicitCastExpr 0x13c9415d0 <col:11> '<dependent type>' contains-errors <LValueToRValue>
    |       `-RecoveryExpr 0x13c9415b0 <col:11> '<dependent type>' contains-errors lvalue
    |-ForStmt 0x13d008d50 <line:13:2, line:19:2>
    | |-BinaryOperator 0x13c941670 <line:13:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x13c941630 <col:7> 'int' lvalue Var 0x13c941270 'i' 'int'
    | | `-IntegerLiteral 0x13c941650 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x13c941858 <col:14, col:36> 'int' contains-errors '<'
    | | |-DeclRefExpr 0x13c941690 <col:14> 'int' lvalue Var 0x13c941270 'i' 'int'
    | | `-CallExpr 0x13c941830 <col:18, col:36> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x13c941790 <col:18> 'int ()' Function 0x13c9416d8 'ARRAY_SIZE' 'int ()'
    | |   `-RecoveryExpr 0x13c941810 <col:29> '<dependent type>' contains-errors lvalue
    | |-UnaryOperator 0x13c941898 <col:39, col:40> 'int' postfix '++'
    | | `-DeclRefExpr 0x13c941878 <col:39> 'int' lvalue Var 0x13c941270 'i' 'int'
    | `-CompoundStmt 0x13d008d38 <col:44, line:19:2>
    |   `-IfStmt 0x13d008d18 <line:14:3, line:18:3>
    |     |-RecoveryExpr 0x13d008c80 <line:14:7, line:15:37> '_Bool' contains-errors
    |     `-CompoundStmt 0x13d008d00 <col:48, line:18:3>
    |       `-BreakStmt 0x13d008cf8 <line:17:4>
    |-ForStmt 0x13d009140 <line:21:2, line:22:33>
    | |-BinaryOperator 0x13d008dc8 <line:21:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x13d008d88 <col:7> 'int' lvalue Var 0x13c941270 'i' 'int'
    | | `-IntegerLiteral 0x13d008da8 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x13d008ec8 <col:14, col:28> 'int' contains-errors '>='
    | | |-ImplicitCastExpr 0x13d008eb0 <col:14, col:23> 'int' contains-errors <IntegralCast>
    | | | `-ImplicitCastExpr 0x13d008e98 <col:14, col:23> 'short' contains-errors <LValueToRValue>
    | | |   `-ArraySubscriptExpr 0x13d008e58 <col:14, col:23> 'const short' contains-errors lvalue
    | | |     |-ImplicitCastExpr 0x13d008e28 <col:14> 'const short *' contains-errors <LValueToRValue>
    | | |     | `-DeclRefExpr 0x13d008de8 <col:14> 'const short *' contains-errors lvalue Var 0x13c941108 'ff_bits' 'const short *'
    | | |     `-ImplicitCastExpr 0x13d008e40 <col:22> 'int' <LValueToRValue>
    | | |       `-DeclRefExpr 0x13d008e08 <col:22> 'int' lvalue Var 0x13c941270 'i' 'int'
    | | `-IntegerLiteral 0x13d008e78 <col:28> 'int' 0
    | |-UnaryOperator 0x13d008f08 <col:31, col:32> 'int' postfix '++'
    | | `-DeclRefExpr 0x13d008ee8 <col:31> 'int' lvalue Var 0x13c941270 'i' 'int'
    | `-CallExpr 0x13d009110 <line:22:3, col:33> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x13d009000 <col:3> 'int ()' Function 0x13d008f48 'set_bit' 'int ()'
    |   |-ArraySubscriptExpr 0x13d009090 <col:11, col:20> 'const short' contains-errors lvalue
    |   | |-ImplicitCastExpr 0x13d009060 <col:11> 'const short *' contains-errors <LValueToRValue>
    |   | | `-DeclRefExpr 0x13d009020 <col:11> 'const short *' contains-errors lvalue Var 0x13c941108 'ff_bits' 'const short *'
    |   | `-ImplicitCastExpr 0x13d009078 <col:19> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x13d009040 <col:19> 'int' lvalue Var 0x13c941270 'i' 'int'
    |   `-RecoveryExpr 0x13d0090e8 <col:23, col:28> '<dependent type>' contains-errors lvalue
    |     `-DeclRefExpr 0x13d0090b0 <col:23> 'struct input_dev *' contains-errors lvalue Var 0x13c940fc8 'dev' 'struct input_dev *'
    |-BinaryOperator 0x13d0093b8 <line:24:2, col:58> 'int' contains-errors '='
    | |-DeclRefExpr 0x13d009178 <col:2> 'int' lvalue Var 0x13c9411d8 'error' 'int'
    | `-CallExpr 0x13d009380 <col:10, col:58> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x13d009278 <col:10> 'int ()' Function 0x13d0091c0 'input_ff_create_memless' 'int ()'
    |   |-DeclRefExpr 0x13d009298 <col:34> 'struct input_dev *' contains-errors lvalue Var 0x13c940fc8 'dev' 'struct input_dev *'
    |   |-RecoveryExpr 0x13d009340 <col:39> '<dependent type>' contains-errors lvalue
    |   `-RecoveryExpr 0x13d009360 <col:45> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x13d009458 <line:25:2, line:26:10>
    | |-ImplicitCastExpr 0x13d0093f8 <line:25:6> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x13d0093d8 <col:6> 'int' lvalue Var 0x13c9411d8 'error' 'int'
    | `-ReturnStmt 0x13d009448 <line:26:3, col:10>
    |   `-ImplicitCastExpr 0x13d009430 <col:10> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x13d009410 <col:10> 'int' lvalue Var 0x13c9411d8 'error' 'int'
    |-CallExpr 0x13d009848 <line:31:2, col:15> 'int'
    | |-ImplicitCastExpr 0x13d009830 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x13d009780 <col:2> 'int ()' Function 0x13d0096c8 'pr_info' 'int ()'
    | `-ImplicitCastExpr 0x13d009870 <col:10> 'char *' <ArrayToPointerDecay>
    |   `-StringLiteral 0x13d0097e0 <col:10> 'char[4]' lvalue "STR"
    `-ReturnStmt 0x13d0098a8 <line:33:2, col:9>
      `-IntegerLiteral 0x13d009888 <col:9> 'int' 0
