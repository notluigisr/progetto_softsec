`-FunctionDecl 0x139128348  line:1:1 invalid get_visual_text 'int (int *, char **, int *)'
  |-ParmVarDecl 0x139128128 <line:2:5, col:15> col:15 invalid cap 'int *'
  |-ParmVarDecl 0x1391281d8 <line:3:5, col:14> col:14 used pp 'char **'
  |-ParmVarDecl 0x139128258 <line:4:5, col:11> col:11 used lenp 'int *'
  `-CompoundStmt 0x139809d10 <line:5:1, line:37:1>
    |-IfStmt 0x139128678 <line:6:5, line:7:19>
    | |-BinaryOperator 0x139128478 <line:6:9, col:24> 'int' contains-errors '!='
    | | |-RecoveryExpr 0x139128458 <col:9> '<dependent type>' contains-errors lvalue
    | | `-CharacterLiteral 0x139128420 <col:24> 'int' 86
    | `-CallExpr 0x139128658 <line:7:2, col:19> 'int'
    |   `-ImplicitCastExpr 0x139128640 <col:2> 'int (*)()' <FunctionToPointerDecay>
    |     `-DeclRefExpr 0x1391285f0 <col:2> 'int ()' Function 0x139128538 'unadjust_for_sel' 'int ()'
    |-IfStmt 0x139141bc8 <line:8:5, line:13:5>
    | |-BinaryOperator 0x1391418f8 <line:8:9, col:41> 'int' contains-errors '!='
    | | |-CXXDependentScopeMemberExpr 0x139141800 <col:9, col:16> '<dependent type>' contains-errors lvalue .lnum
    | | | `-RecoveryExpr 0x1391287c0 <col:9> '<dependent type>' contains-errors lvalue
    | | `-CXXDependentScopeMemberExpr 0x1391418b0 <col:24, col:41> '<dependent type>' contains-errors lvalue .lnum
    | |   `-CXXDependentScopeMemberExpr 0x139141868 <col:24, col:32> '<dependent type>' contains-errors lvalue ->w_cursor
    | |     `-RecoveryExpr 0x139141848 <col:24> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x139141ba8 <line:9:5, line:13:5>
    |   |-IfStmt 0x139141b40 <line:10:2, line:11:26>
    |   | |-BinaryOperator 0x139141990 <line:10:6, col:13> 'int' contains-errors '!='
    |   | | |-RecoveryExpr 0x139141918 <col:6> '<dependent type>' contains-errors lvalue
    |   | | `-RecoveryExpr 0x139141970 <col:13> '<dependent type>' contains-errors lvalue
    |   | `-CallExpr 0x139141b18 <line:11:6, col:26> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x139141a90 <col:6> 'int ()' Function 0x1391419d8 'clearopbeep' 'int ()'
    |   |   `-CXXDependentScopeMemberExpr 0x139141ad0 <col:18, col:23> '<dependent type>' contains-errors lvalue ->oap
    |   |     `-RecoveryExpr 0x139141ab0 <col:18> '<dependent type>' contains-errors lvalue
    |   `-ReturnStmt 0x139141b98 <line:12:2, col:9>
    |     `-RecoveryExpr 0x139141b78 <col:9> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x139809ba8 <line:14:5, line:34:5> has_else
    | |-BinaryOperator 0x139141c58 <line:14:9, col:24> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x139141c38 <col:9> '<dependent type>' contains-errors lvalue
    | | `-CharacterLiteral 0x139141c00 <col:24> 'int' 86
    | |-CompoundStmt 0x1391424b8 <line:15:5, line:18:5>
    | | |-BinaryOperator 0x139142240 <line:16:2, col:23> 'char *' '='
    | | | |-UnaryOperator 0x139141cb0 <col:2, col:3> 'char *' lvalue prefix '*' cannot overflow
    | | | | `-ImplicitCastExpr 0x139141c98 <col:3> 'char **' <LValueToRValue>
    | | | |   `-DeclRefExpr 0x139141c78 <col:3> 'char **' lvalue ParmVar 0x1391281d8 'pp' 'char **'
    | | | `-ImplicitCastExpr 0x139141e00 <col:8, col:23> 'char *' <IntegralToPointer>
    | | |   `-CallExpr 0x139141de0 <col:8, col:23> 'int'
    | | |     `-ImplicitCastExpr 0x139141dc8 <col:8> 'int (*)()' <FunctionToPointerDecay>
    | | |       `-DeclRefExpr 0x139141da8 <col:8> 'int ()' Function 0x139141cf0 'ml_get_curline' 'int ()'
    | | `-BinaryOperator 0x139142498 <line:17:2, col:25> 'int' '='
    | |   |-UnaryOperator 0x139142298 <col:2, col:3> 'int' lvalue prefix '*' cannot overflow
    | |   | `-ImplicitCastExpr 0x139142280 <col:3> 'int *' <LValueToRValue>
    | |   |   `-DeclRefExpr 0x139142260 <col:3> 'int *' lvalue ParmVar 0x139128258 'lenp' 'int *'
    | |   `-CStyleCastExpr 0x139142470 <col:10, col:25> 'int' <NoOp>
    | |     `-CallExpr 0x139142418 <col:15, col:25> 'int'
    | |       |-ImplicitCastExpr 0x139142400 <col:15> 'int (*)()' <FunctionToPointerDecay>
    | |       | `-DeclRefExpr 0x139142390 <col:15> 'int ()' Function 0x1391422d8 'STRLEN' 'int ()'
    | |       `-ImplicitCastExpr 0x139142440 <col:22, col:23> 'char *' <LValueToRValue>
    | |         `-UnaryOperator 0x1391423e8 <col:22, col:23> 'char *' lvalue prefix '*' cannot overflow
    | |           `-ImplicitCastExpr 0x1391423d0 <col:23> 'char **' <LValueToRValue>
    | |             `-DeclRefExpr 0x1391423b0 <col:23> 'char **' lvalue ParmVar 0x1391281d8 'pp' 'char **'
    | `-CompoundStmt 0x139809b90 <line:20:5, line:34:5>
    |   `-IfStmt 0x139809980 <line:21:2, line:30:2> has_else
    |     |-CallExpr 0x139142708 <line:21:6, col:37> '<dependent type>' contains-errors
    |     | |-DeclRefExpr 0x1391425b8 <col:6> 'int ()' Function 0x139142500 'LT_POS' 'int ()'
    |     | |-CXXDependentScopeMemberExpr 0x1391426a0 <col:13, col:21> '<dependent type>' contains-errors lvalue ->w_cursor
    |     | | `-RecoveryExpr 0x139142680 <col:13> '<dependent type>' contains-errors lvalue
    |     | `-RecoveryExpr 0x1391426e8 <col:31> '<dependent type>' contains-errors lvalue
    |     |-CompoundStmt 0x139809870 <line:22:2, line:25:2>
    |     | |-BinaryOperator 0x1398094a0 <line:23:6, col:40> 'char *' contains-errors '='
    |     | | |-UnaryOperator 0x1398093e0 <col:6, col:7> 'char *' lvalue prefix '*' cannot overflow
    |     | | | `-ImplicitCastExpr 0x1398093c8 <col:7> 'char **' <LValueToRValue>
    |     | | |   `-DeclRefExpr 0x139142738 <col:7> 'char **' lvalue ParmVar 0x1391281d8 'pp' 'char **'
    |     | | `-CallExpr 0x139809478 <col:12, col:40> '<dependent type>' contains-errors
    |     | |   |-DeclRefExpr 0x1398092b8 <col:12> 'int ()' Function 0x139809200 'ml_get_pos' 'int ()'
    |     | |   `-UnaryOperator 0x139809460 <col:23, col:32> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     | |     `-CXXDependentScopeMemberExpr 0x139809418 <col:24, col:32> '<dependent type>' contains-errors lvalue ->w_cursor
    |     | |       `-RecoveryExpr 0x1398093f8 <col:24> '<dependent type>' contains-errors lvalue
    |     | `-BinaryOperator 0x139809850 <line:24:6, col:50> 'int' contains-errors '='
    |     |   |-UnaryOperator 0x1398096e0 <col:6, col:7> 'int' lvalue prefix '*' cannot overflow
    |     |   | `-ImplicitCastExpr 0x1398096c8 <col:7> 'int *' <LValueToRValue>
    |     |   |   `-DeclRefExpr 0x1398094c0 <col:7> 'int *' lvalue ParmVar 0x139128258 'lenp' 'int *'
    |     |   `-BinaryOperator 0x139809830 <col:14, col:50> '<dependent type>' contains-errors '+'
    |     |     |-BinaryOperator 0x139809810 <col:14, col:44> '<dependent type>' contains-errors '-'
    |     |     | |-CXXDependentScopeMemberExpr 0x139809718 <col:14, col:21> '<dependent type>' contains-errors lvalue .col
    |     |     | | `-RecoveryExpr 0x1398096f8 <col:14> '<dependent type>' contains-errors lvalue
    |     |     | `-CXXDependentScopeMemberExpr 0x1398097c8 <col:27, col:44> '<dependent type>' contains-errors lvalue .col
    |     |     |   `-CXXDependentScopeMemberExpr 0x139809780 <col:27, col:35> '<dependent type>' contains-errors lvalue ->w_cursor
    |     |     |     `-RecoveryExpr 0x139809760 <col:27> '<dependent type>' contains-errors lvalue
    |     |     `-IntegerLiteral 0x139809638 <col:50> 'int' 1
    |     `-CompoundStmt 0x139809970 <line:27:2, line:30:2>
    `-CallExpr 0x139809cf0 <line:35:5, col:28> 'int'
      `-ImplicitCastExpr 0x139809cd8 <col:5> 'int (*)()' <FunctionToPointerDecay>
        `-DeclRefExpr 0x139809cb8 <col:5> 'int ()' Function 0x139809c00 'reset_VIsual_and_resel' 'int ()'
