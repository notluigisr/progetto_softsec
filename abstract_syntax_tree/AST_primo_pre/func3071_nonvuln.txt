`-FunctionDecl 0x12d00df18  line:1:1 invalid semantic_type_code_props_set 'int (int *, int, const int *)'
  |-ParmVarDecl 0x12d00dd28 <col:31, col:46> col:46 referenced invalid type 'int *'
  |-ParmVarDecl 0x12d00dda8 <line:2:31, col:47> col:47 invalid kind 'int'
  |-ParmVarDecl 0x12d00de28 <line:3:31, col:49> col:49 invalid code 'const int *'
  `-CompoundStmt 0x12c922948 <line:4:1, line:11:1>
    `-IfStmt 0x12c922918 <line:5:3, line:10:26> has_else
      |-CXXDependentScopeMemberExpr 0x12d00e0b0 <line:5:7, col:25> '<dependent type>' contains-errors lvalue .code
      | `-ArraySubscriptExpr 0x12d00e090 <col:7, col:23> '<dependent type>' contains-errors lvalue
      |   |-ImplicitCastExpr 0x12d00e060 <col:7, col:13> '<dependent type>' contains-errors <LValueToRValue>
      |   | `-CXXDependentScopeMemberExpr 0x12d00dff8 <col:7, col:13> '<dependent type>' contains-errors lvalue ->props
      |   |   `-RecoveryExpr 0x12d00dfd8 <col:7> '<dependent type>' contains-errors lvalue
      |   `-ImplicitCastExpr 0x12d00e078 <col:19> '<dependent type>' contains-errors <LValueToRValue>
      |     `-RecoveryExpr 0x12d00e040 <col:19> '<dependent type>' contains-errors lvalue
      |-CallExpr 0x12c922768 <line:6:5, line:8:54> '<dependent type>' contains-errors
      | |-DeclRefExpr 0x12d00e250 <line:6:5> 'int ()' Function 0x12d00e198 'complain_semantic_type_redeclared' 'int ()'
      | |-RecoveryExpr 0x12d00e270 <col:40> '<dependent type>' contains-errors lvalue
      | |-CallExpr 0x12d00e3b0 <col:46, col:74> '<dependent type>' contains-errors
      | | |-DeclRefExpr 0x12d00e370 <col:46> 'int ()' Function 0x12d00e2b8 'code_props_type_string' 'int ()'
      | | `-RecoveryExpr 0x12d00e390 <col:70> '<dependent type>' contains-errors lvalue
      | |-CXXDependentScopeMemberExpr 0x12c9226b8 <line:7:40, col:58> '<dependent type>' contains-errors lvalue .location
      | | `-ArraySubscriptExpr 0x12c922698 <col:40, col:56> '<dependent type>' contains-errors lvalue
      | |   |-ImplicitCastExpr 0x12c922668 <col:40, col:46> '<dependent type>' contains-errors <LValueToRValue>
      | |   | `-CXXDependentScopeMemberExpr 0x12c922600 <col:40, col:46> '<dependent type>' contains-errors lvalue ->props
      | |   |   `-RecoveryExpr 0x12d00e3d8 <col:40> '<dependent type>' contains-errors lvalue
      | |   `-ImplicitCastExpr 0x12c922680 <col:52> '<dependent type>' contains-errors <LValueToRValue>
      | |     `-RecoveryExpr 0x12c922648 <col:52> '<dependent type>' contains-errors lvalue
      | `-CXXDependentScopeMemberExpr 0x12c922720 <line:8:40, col:46> '<dependent type>' contains-errors lvalue ->location
      |   `-RecoveryExpr 0x12c922700 <col:40> '<dependent type>' contains-errors lvalue
      `-BinaryOperator 0x12c9228f8 <line:10:5, col:26> '<dependent type>' contains-errors '='
        |-ArraySubscriptExpr 0x12c922888 <col:5, col:21> '<dependent type>' contains-errors lvalue
        | |-ImplicitCastExpr 0x12c922858 <col:5, col:11> '<dependent type>' contains-errors <LValueToRValue>
        | | `-CXXDependentScopeMemberExpr 0x12c9227f0 <col:5, col:11> '<dependent type>' contains-errors lvalue ->props
        | |   `-RecoveryExpr 0x12c9227c8 <col:5> '<dependent type>' contains-errors lvalue
        | |     `-DeclRefExpr 0x12c9227a8 <col:5> 'int *' lvalue ParmVar 0x12d00dd28 'type' 'int *'
        | `-ImplicitCastExpr 0x12c922870 <col:17> '<dependent type>' contains-errors <LValueToRValue>
        |   `-RecoveryExpr 0x12c922838 <col:17> '<dependent type>' contains-errors lvalue
        `-UnaryOperator 0x12c9228e0 <col:25, col:26> '<dependent type>' contains-errors prefix '*' cannot overflow
          `-ImplicitCastExpr 0x12c9228c8 <col:26> '<dependent type>' contains-errors <LValueToRValue>
            `-RecoveryExpr 0x12c9228a8 <col:26> '<dependent type>' contains-errors lvalue
