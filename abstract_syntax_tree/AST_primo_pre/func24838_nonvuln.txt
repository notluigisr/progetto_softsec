`-FunctionDecl 0x1249284c8  line:1:5 invalid geoAppendIfWithinRadius 'int (int *, double, double, double, double, int)'
  |-ParmVarDecl 0x124928128 <col:29, col:39> col:39 invalid ga 'int *'
  |-ParmVarDecl 0x1249281a8 <col:43, col:50> col:50 used lon 'double'
  |-ParmVarDecl 0x124928228 <col:55, col:62> col:62 used lat 'double'
  |-ParmVarDecl 0x1249282a8 <col:67, col:74> col:74 used radius 'double'
  |-ParmVarDecl 0x124928328 <col:82, col:89> col:89 used score 'double'
  |-ParmVarDecl 0x1249283a8 <col:96, col:100> col:100 invalid member 'int'
  `-CompoundStmt 0x124942190 <col:108, line:20:1>
    |-DeclStmt 0x124928748 <line:2:5, col:27>
    | |-VarDecl 0x1249285b8 <col:5, col:12> col:12 used distance 'double'
    | `-VarDecl 0x1249286c8 <col:5, col:26> col:22 used xy 'double[2]'
    |-IfStmt 0x124941a78 <line:4:5, col:42>
    | |-UnaryOperator 0x124941a18 <col:9, col:32> 'int' prefix '!' cannot overflow
    | | `-CallExpr 0x124941988 <col:10, col:32> 'int'
    | |   |-ImplicitCastExpr 0x124941970 <col:10> 'int (*)()' <FunctionToPointerDecay>
    | |   | `-DeclRefExpr 0x1249418e0 <col:10> 'int ()' Function 0x124941828 'decodeGeohash' 'int ()'
    | |   |-ImplicitCastExpr 0x1249419b8 <col:24> 'double' <LValueToRValue>
    | |   | `-DeclRefExpr 0x124941900 <col:24> 'double' lvalue ParmVar 0x124928328 'score' 'double'
    | |   `-ImplicitCastExpr 0x124941a00 <col:30> 'double *' <ArrayToPointerDecay>
    | |     `-DeclRefExpr 0x124941920 <col:30> 'double[2]' lvalue Var 0x1249286c8 'xy' 'double[2]'
    | `-ReturnStmt 0x124941a68 <col:35, col:42>
    |   `-RecoveryExpr 0x124941a48 <col:42> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x124941e78 <line:6:5, line:10:5>
    | |-UnaryOperator 0x124941e00 <line:6:9, line:7:61> 'int' prefix '!' cannot overflow
    | | `-CallExpr 0x124941d38 <line:6:10, line:7:61> 'int'
    | |   |-ImplicitCastExpr 0x124941d20 <line:6:10> 'int (*)()' <FunctionToPointerDecay>
    | |   | `-DeclRefExpr 0x124941b78 <col:10> 'int ()' Function 0x124941ac0 'geohashGetDistanceIfInRadiusWGS84' 'int ()'
    | |   |-ImplicitCastExpr 0x124941d88 <col:44> 'double' <LValueToRValue>
    | |   | `-DeclRefExpr 0x124941b98 <col:44> 'double' lvalue ParmVar 0x1249281a8 'lon' 'double'
    | |   |-ImplicitCastExpr 0x124941da0 <col:48> 'double' <LValueToRValue>
    | |   | `-DeclRefExpr 0x124941bb8 <col:48> 'double' lvalue ParmVar 0x124928228 'lat' 'double'
    | |   |-ImplicitCastExpr 0x124941db8 <col:53, col:57> 'double' <LValueToRValue>
    | |   | `-ArraySubscriptExpr 0x124941c30 <col:53, col:57> 'double' lvalue
    | |   |   |-ImplicitCastExpr 0x124941c18 <col:53> 'double *' <ArrayToPointerDecay>
    | |   |   | `-DeclRefExpr 0x124941bd8 <col:53> 'double[2]' lvalue Var 0x1249286c8 'xy' 'double[2]'
    | |   |   `-IntegerLiteral 0x124941bf8 <col:56> 'int' 0
    | |   |-ImplicitCastExpr 0x124941dd0 <col:60, col:64> 'double' <LValueToRValue>
    | |   | `-ArraySubscriptExpr 0x124941ca8 <col:60, col:64> 'double' lvalue
    | |   |   |-ImplicitCastExpr 0x124941c90 <col:60> 'double *' <ArrayToPointerDecay>
    | |   |   | `-DeclRefExpr 0x124941c50 <col:60> 'double[2]' lvalue Var 0x1249286c8 'xy' 'double[2]'
    | |   |   `-IntegerLiteral 0x124941c70 <col:63> 'int' 1
    | |   |-ImplicitCastExpr 0x124941de8 <line:7:44> 'double' <LValueToRValue>
    | |   | `-DeclRefExpr 0x124941cc8 <col:44> 'double' lvalue ParmVar 0x1249282a8 'radius' 'double'
    | |   `-UnaryOperator 0x124941d08 <col:52, col:53> 'double *' prefix '&' cannot overflow
    | |     `-DeclRefExpr 0x124941ce8 <col:53> 'double' lvalue Var 0x1249285b8 'distance' 'double'
    | `-CompoundStmt 0x124941e60 <line:8:5, line:10:5>
    |   `-ReturnStmt 0x124941e50 <line:9:9, col:16>
    |     `-RecoveryExpr 0x124941e30 <col:16> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x124942180 <line:19:5, col:12>
      `-RecoveryExpr 0x124942160 <col:12> '<dependent type>' contains-errors lvalue
