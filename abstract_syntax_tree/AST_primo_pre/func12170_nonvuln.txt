`-FunctionDecl 0x155128288  line:1:12 invalid jpc_seq_upsample 'int *(int *, int)'
  |-ParmVarDecl 0x155128128 <col:29, col:40> col:40 invalid x 'int *'
  |-ParmVarDecl 0x1551281a8 <col:43, col:47> col:47 used m 'int'
  `-CompoundStmt 0x1551429f0 <line:2:1, line:14:1>
    |-DeclStmt 0x1551283d8 <line:4:2, col:7>
    | `-VarDecl 0x155128370 <col:2, col:6> col:6 used i 'int'
    |-IfStmt 0x155141e00 <line:6:2, line:7:10>
    | |-RecoveryExpr 0x155141d98 <line:6:6, col:78> '_Bool' contains-errors
    | `-ReturnStmt 0x155141df0 <line:7:3, col:10>
    |   `-ImplicitCastExpr 0x155141dd8 <col:10> 'int *' <NullToPointer>
    |     `-IntegerLiteral 0x155141db8 <col:10> 'int' 0
    |-ForStmt 0x155142970 <line:8:2, line:11:2>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-BinaryOperator 0x155141fa8 <line:8:29, col:46> 'int' contains-errors '<'
    | | |-DeclRefExpr 0x155141ec0 <col:29> 'int' lvalue Var 0x155128370 'i' 'int'
    | | `-CallExpr 0x155141f80 <col:33, col:46> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x155141ee0 <col:33> 'int ()' Function 0x155128730 'jas_seq_end' 'int ()'
    | |   `-RecoveryExpr 0x155141f60 <col:45> '<dependent type>' contains-errors lvalue
    | |-UnaryOperator 0x155141fe8 <col:49, col:50> 'int' postfix '++'
    | | `-DeclRefExpr 0x155141fc8 <col:49> 'int' lvalue Var 0x155128370 'i' 'int'
    | `-CompoundStmt 0x155142958 <col:54, line:11:2>
    |   `-BinaryOperator 0x155142938 <line:9:3, line:10:19> '<dependent type>' contains-errors '='
    |     |-UnaryOperator 0x155142780 <line:9:3, col:23> '<dependent type>' contains-errors prefix '*' cannot overflow
    |     | `-CallExpr 0x155142750 <col:4, col:23> '<dependent type>' contains-errors
    |     |   |-DeclRefExpr 0x1551420e0 <col:4> 'int ()' Function 0x155142028 'jas_seq_getref' 'int ()'
    |     |   |-RecoveryExpr 0x155142730 <col:19> '<dependent type>' contains-errors lvalue
    |     |   `-DeclRefExpr 0x155142118 <col:22> 'int' lvalue Var 0x155128370 'i' 'int'
    |     `-ConditionalOperator 0x155142908 <col:27, line:10:19> '<dependent type>' contains-errors
    |       |-ParenExpr 0x155142828 <line:9:27, col:42> 'int'
    |       | `-UnaryOperator 0x155142810 <col:28, col:41> 'int' prefix '!' cannot overflow
    |       |   `-CallExpr 0x1551427b0 <col:29, col:41> 'int'
    |       |     |-ImplicitCastExpr 0x155142798 <col:29> 'int (*)()' <FunctionToPointerDecay>
    |       |     | `-DeclRefExpr 0x155142260 <col:29> 'int ()' Function 0x1551421a8 'JAS_MOD' 'int ()'
    |       |     |-ImplicitCastExpr 0x1551427e0 <col:37> 'int' <LValueToRValue>
    |       |     | `-DeclRefExpr 0x155142280 <col:37> 'int' lvalue Var 0x155128370 'i' 'int'
    |       |     `-ImplicitCastExpr 0x1551427f8 <col:40> 'int' <LValueToRValue>
    |       |       `-DeclRefExpr 0x1551422a0 <col:40> 'int' lvalue ParmVar 0x1551281a8 'm' 'int'
    |       |-CallExpr 0x155142898 <col:46, col:66> '<dependent type>' contains-errors
    |       | |-DeclRefExpr 0x155142480 <col:46> 'int ()' Function 0x1551423c8 'jas_seq_get' 'int ()'
    |       | |-RecoveryExpr 0x1551424a0 <col:58> '<dependent type>' contains-errors lvalue
    |       | `-BinaryOperator 0x155142878 <col:61, col:65> 'int' '/'
    |       |   |-ImplicitCastExpr 0x155142848 <col:61> 'int' <LValueToRValue>
    |       |   | `-DeclRefExpr 0x1551424c0 <col:61> 'int' lvalue Var 0x155128370 'i' 'int'
    |       |   `-ImplicitCastExpr 0x155142860 <col:65> 'int' <LValueToRValue>
    |       |     `-DeclRefExpr 0x1551424e0 <col:65> 'int' lvalue ParmVar 0x1551281a8 'm' 'int'
    |       `-CallExpr 0x1551428e0 <line:10:5, col:19> 'int'
    |         |-ImplicitCastExpr 0x1551428c8 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |         | `-DeclRefExpr 0x155142660 <col:5> 'int ()' Function 0x1551425a8 'jpc_inttofix' 'int ()'
    |         `-IntegerLiteral 0x155142680 <col:18> 'int' 0
    `-ReturnStmt 0x1551429e0 <line:13:2, col:9>
      `-RecoveryExpr 0x1551429c0 <col:9> '<dependent type>' contains-errors lvalue
