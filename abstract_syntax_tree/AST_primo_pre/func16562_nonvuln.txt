`-FunctionDecl 0x128128288  line:1:16 invalid decode_rice 'int (int *, unsigned int)' static
  |-ParmVarDecl 0x128128128 <col:28, col:43> col:43 invalid gb 'int *'
  |-ParmVarDecl 0x1281281a8 <col:47, col:60> col:60 used k 'unsigned int'
  `-CompoundStmt 0x128142130 <line:2:1, line:14:1>
    |-DeclStmt 0x1281285c8 <line:3:5, col:36>
    | `-VarDecl 0x128128358 <col:5, col:35> col:9 used max 'int' cinit
    |   `-BinaryOperator 0x1281285a8 <col:15, col:35> '<dependent type>' contains-errors '-'
    |     |-CallExpr 0x128128560 <col:15, col:31> '<dependent type>' contains-errors
    |     | |-DeclRefExpr 0x128128520 <col:15> 'int ()' Function 0x128128468 'get_bits_left' 'int ()'
    |     | `-RecoveryExpr 0x128128540 <col:29> '<dependent type>' contains-errors lvalue
    |     `-DeclRefExpr 0x128128588 <col:35> 'unsigned int' lvalue ParmVar 0x1281281a8 'k' 'unsigned int'
    |-DeclStmt 0x128141800 <line:4:5, col:36>
    | `-VarDecl 0x1281285f8 <col:5, col:35> col:9 used q 'int' cinit
    |   `-CallExpr 0x1281287c0 <col:15, col:35> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x128128740 <col:15> 'int ()' Function 0x128128688 'get_unary' 'int ()'
    |     |-RecoveryExpr 0x128128760 <col:25> '<dependent type>' contains-errors lvalue
    |     |-IntegerLiteral 0x128128780 <col:29> 'int' 0
    |     `-DeclRefExpr 0x1281287a0 <col:32> 'int' contains-errors lvalue Var 0x128128358 'max' 'int'
    |-DeclStmt 0x128141ae0 <line:5:5, col:43>
    | `-VarDecl 0x128141830 <col:5, col:42> col:9 used r 'int' cinit
    |   `-ConditionalOperator 0x128141ab0 <col:15, col:42> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x128141898 <col:15> 'unsigned int' lvalue ParmVar 0x1281281a8 'k' 'unsigned int'
    |     |-CallExpr 0x1281419d8 <col:19, col:31> '<dependent type>' contains-errors
    |     | |-DeclRefExpr 0x128141998 <col:19> 'int ()' Function 0x1281418e0 'get_bits1' 'int ()'
    |     | `-RecoveryExpr 0x1281419b8 <col:29> '<dependent type>' contains-errors lvalue
    |     `-UnaryOperator 0x128141a98 <col:35, col:42> 'int' contains-errors prefix '!' cannot overflow
    |       `-ParenExpr 0x128141a78 <col:36, col:42> 'int' contains-errors
    |         `-BinaryOperator 0x128141a58 <col:37, col:41> 'int' contains-errors '&'
    |           |-ImplicitCastExpr 0x128141a40 <col:37> 'int' contains-errors <LValueToRValue>
    |           | `-DeclRefExpr 0x128141a00 <col:37> 'int' contains-errors lvalue Var 0x1281285f8 'q' 'int'
    |           `-IntegerLiteral 0x128141a20 <col:41> 'int' 1
    |-IfStmt 0x128142000 <line:7:5, line:12:5> has_else
    | |-BinaryOperator 0x128141b68 <line:7:9, col:13> 'int' '>'
    | | |-ImplicitCastExpr 0x128141b38 <col:9> 'unsigned int' <LValueToRValue>
    | | | `-DeclRefExpr 0x128141af8 <col:9> 'unsigned int' lvalue ParmVar 0x1281281a8 'k' 'unsigned int'
    | | `-ImplicitCastExpr 0x128141b50 <col:13> 'unsigned int' <IntegralCast>
    | |   `-IntegerLiteral 0x128141b18 <col:13> 'int' 1
    | |-CompoundStmt 0x128141ed0 <col:16, line:10:5>
    | | |-CompoundAssignOperator 0x128141c70 <line:8:9, col:21> 'int' contains-errors '<<=' ComputeLHSTy='int' ComputeResultTy='int'
    | | | |-DeclRefExpr 0x128141b88 <col:9> 'int' contains-errors lvalue Var 0x1281285f8 'q' 'int'
    | | | `-ParenExpr 0x128141c38 <col:15, col:21> 'unsigned int'
    | | |   `-BinaryOperator 0x128141c18 <col:16, col:20> 'unsigned int' '-'
    | | |     |-ImplicitCastExpr 0x128141be8 <col:16> 'unsigned int' <LValueToRValue>
    | | |     | `-DeclRefExpr 0x128141ba8 <col:16> 'unsigned int' lvalue ParmVar 0x1281281a8 'k' 'unsigned int'
    | | |     `-ImplicitCastExpr 0x128141c00 <col:20> 'unsigned int' <IntegralCast>
    | | |       `-IntegerLiteral 0x128141bc8 <col:20> 'int' 1
    | | `-CompoundAssignOperator 0x128141ea0 <line:9:9, col:38> 'int' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    | |   |-DeclRefExpr 0x128141ca0 <col:9> 'int' contains-errors lvalue Var 0x1281285f8 'q' 'int'
    | |   `-CallExpr 0x128141e70 <col:15, col:38> '<dependent type>' contains-errors
    | |     |-DeclRefExpr 0x128141da0 <col:15> 'int ()' Function 0x128141ce8 'get_bits_long' 'int ()'
    | |     |-RecoveryExpr 0x128141dc0 <col:29> '<dependent type>' contains-errors lvalue
    | |     `-BinaryOperator 0x128141e50 <col:33, col:37> 'unsigned int' '-'
    | |       |-ImplicitCastExpr 0x128141e20 <col:33> 'unsigned int' <LValueToRValue>
    | |       | `-DeclRefExpr 0x128141de0 <col:33> 'unsigned int' lvalue ParmVar 0x1281281a8 'k' 'unsigned int'
    | |       `-ImplicitCastExpr 0x128141e38 <col:37> 'unsigned int' <IntegralCast>
    | |         `-IntegerLiteral 0x128141e00 <col:37> 'int' 1
    | `-IfStmt 0x128141fe0 <line:10:12, line:12:5>
    |   |-UnaryOperator 0x128141f28 <line:10:16, col:17> 'int' prefix '!' cannot overflow
    |   | `-ImplicitCastExpr 0x128141f10 <col:17> 'unsigned int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x128141ef0 <col:17> 'unsigned int' lvalue ParmVar 0x1281281a8 'k' 'unsigned int'
    |   `-CompoundStmt 0x128141fc8 <col:20, line:12:5>
    |     `-CompoundAssignOperator 0x128141f98 <line:11:9, col:15> 'int' contains-errors '>>=' ComputeLHSTy='int' ComputeResultTy='int'
    |       |-DeclRefExpr 0x128141f40 <col:9> 'int' contains-errors lvalue Var 0x1281285f8 'q' 'int'
    |       `-IntegerLiteral 0x128141f60 <col:15> 'int' 1
    `-ReturnStmt 0x128142120 <line:13:5, col:21>
      `-ConditionalOperator 0x1281420f0 <col:12, col:21> 'int' contains-errors
        |-ImplicitCastExpr 0x1281420c0 <col:12> 'int' contains-errors <LValueToRValue>
        | `-DeclRefExpr 0x128142030 <col:12> 'int' contains-errors lvalue Var 0x128141830 'r' 'int'
        |-ImplicitCastExpr 0x1281420d8 <col:16> 'int' contains-errors <LValueToRValue>
        | `-DeclRefExpr 0x128142050 <col:16> 'int' contains-errors lvalue Var 0x1281285f8 'q' 'int'
        `-UnaryOperator 0x1281420a8 <col:20, col:21> 'int' contains-errors prefix '~' cannot overflow
          `-ImplicitCastExpr 0x128142090 <col:21> 'int' contains-errors <LValueToRValue>
            `-DeclRefExpr 0x128142070 <col:21> 'int' contains-errors lvalue Var 0x1281285f8 'q' 'int'
