`-FunctionDecl 0x14f1283a8  line:1:12 invalid decode_last_significant_coeff_prefix 'int (int *, int, int, int *)' static
  |-ParmVarDecl 0x14f128128 <col:49, col:65> col:65 invalid tctx 'int *'
  |-ParmVarDecl 0x14f1281a8 <line:2:7, col:11> col:11 used log2TrafoSize 'int'
  |-ParmVarDecl 0x14f128228 <line:3:7, col:11> col:11 used cIdx 'int'
  |-ParmVarDecl 0x14f1282a8 <line:4:7, col:22> col:22 invalid model 'int *'
  `-CompoundStmt 0x158808a98 <line:5:1, line:38:1>
    |-CallExpr 0x14f128710 <line:6:3, col:45> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x14f1285d0 <col:3> 'int ()' Function 0x14f128518 'logtrace' 'int ()'
    | |-RecoveryExpr 0x14f1286f0 <col:12> '<dependent type>' contains-errors lvalue
    | |-StringLiteral 0x14f128650 <col:21> 'char[4]' lvalue "STR"
    | |-DeclRefExpr 0x14f128670 <col:27> 'int' lvalue ParmVar 0x14f1281a8 'log2TrafoSize' 'int'
    | `-DeclRefExpr 0x14f128690 <col:41> 'int' lvalue ParmVar 0x14f128228 'cIdx' 'int'
    |-DeclStmt 0x14f8090b8 <line:8:3, col:34>
    | `-VarDecl 0x14f128768 <col:3, col:33> col:7 used cMax 'int' cinit
    |   `-BinaryOperator 0x14f809098 <col:14, col:33> 'int' '-'
    |     |-ParenExpr 0x14f809058 <col:14, col:31> 'int'
    |     | `-BinaryOperator 0x14f809038 <col:15, col:30> 'int' '<<'
    |     |   |-ImplicitCastExpr 0x14f809020 <col:15> 'int' <LValueToRValue>
    |     |   | `-DeclRefExpr 0x14f1287d0 <col:15> 'int' lvalue ParmVar 0x14f1281a8 'log2TrafoSize' 'int'
    |     |   `-IntegerLiteral 0x14f809000 <col:30> 'int' 1
    |     `-IntegerLiteral 0x14f809078 <col:33> 'int' 1
    |-DeclStmt 0x14f8091e8 <line:10:3, col:26>
    | |-VarDecl 0x14f8090e8 <col:3, col:7> col:7 used ctxOffset 'int'
    | `-VarDecl 0x14f809168 <col:3, col:18> col:18 used ctxShift 'int'
    |-IfStmt 0x14f809718 <line:11:3, line:18:3> has_else
    | |-BinaryOperator 0x14f809258 <line:11:7, col:13> 'int' '=='
    | | |-ImplicitCastExpr 0x14f809240 <col:7> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14f809200 <col:7> 'int' lvalue ParmVar 0x14f128228 'cIdx' 'int'
    | | `-IntegerLiteral 0x14f809220 <col:13> 'int' 0
    | |-CompoundStmt 0x14f8095c0 <col:16, line:14:3>
    | | |-BinaryOperator 0x14f809488 <line:12:5, col:60> 'int' '='
    | | | |-DeclRefExpr 0x14f809278 <col:5> 'int' lvalue Var 0x14f8090e8 'ctxOffset' 'int'
    | | | `-BinaryOperator 0x14f809468 <col:17, col:60> 'int' '+'
    | | |   |-BinaryOperator 0x14f809350 <col:17, col:35> 'int' '*'
    | | |   | |-IntegerLiteral 0x14f809298 <col:17> 'int' 3
    | | |   | `-ParenExpr 0x14f809330 <col:19, col:35> 'int'
    | | |   |   `-BinaryOperator 0x14f809310 <col:20, col:34> 'int' '-'
    | | |   |     |-ImplicitCastExpr 0x14f8092f8 <col:20> 'int' <LValueToRValue>
    | | |   |     | `-DeclRefExpr 0x14f8092b8 <col:20> 'int' lvalue ParmVar 0x14f1281a8 'log2TrafoSize' 'int'
    | | |   |     `-IntegerLiteral 0x14f8092d8 <col:34> 'int' 2
    | | |   `-ParenExpr 0x14f809448 <col:39, col:60> 'int'
    | | |     `-BinaryOperator 0x14f809428 <col:40, col:59> 'int' '>>'
    | | |       |-ParenExpr 0x14f8093e8 <col:40, col:56> 'int'
    | | |       | `-BinaryOperator 0x14f8093c8 <col:41, col:55> 'int' '-'
    | | |       |   |-ImplicitCastExpr 0x14f8093b0 <col:41> 'int' <LValueToRValue>
    | | |       |   | `-DeclRefExpr 0x14f809370 <col:41> 'int' lvalue ParmVar 0x14f1281a8 'log2TrafoSize' 'int'
    | | |       |   `-IntegerLiteral 0x14f809390 <col:55> 'int' 1
    | | |       `-IntegerLiteral 0x14f809408 <col:59> 'int' 2
    | | `-BinaryOperator 0x14f8095a0 <line:13:5, col:36> 'int' '='
    | |   |-DeclRefExpr 0x14f8094a8 <col:5> 'int' lvalue Var 0x14f809168 'ctxShift' 'int'
    | |   `-BinaryOperator 0x14f809580 <col:17, col:36> 'int' '>>'
    | |     |-ParenExpr 0x14f809540 <col:17, col:33> 'int'
    | |     | `-BinaryOperator 0x14f809520 <col:18, col:32> 'int' '+'
    | |     |   |-ImplicitCastExpr 0x14f809508 <col:18> 'int' <LValueToRValue>
    | |     |   | `-DeclRefExpr 0x14f8094c8 <col:18> 'int' lvalue ParmVar 0x14f1281a8 'log2TrafoSize' 'int'
    | |     |   `-IntegerLiteral 0x14f8094e8 <col:32> 'int' 1
    | |     `-IntegerLiteral 0x14f809560 <col:36> 'int' 2
    | `-CompoundStmt 0x14f8096f8 <line:15:8, line:18:3>
    |   |-BinaryOperator 0x14f809620 <line:16:5, col:17> 'int' '='
    |   | |-DeclRefExpr 0x14f8095e0 <col:5> 'int' lvalue Var 0x14f8090e8 'ctxOffset' 'int'
    |   | `-IntegerLiteral 0x14f809600 <col:17> 'int' 15
    |   `-BinaryOperator 0x14f8096d8 <line:17:5, col:31> 'int' '='
    |     |-DeclRefExpr 0x14f809640 <col:5> 'int' lvalue Var 0x14f809168 'ctxShift' 'int'
    |     `-BinaryOperator 0x14f8096b8 <col:17, col:31> 'int' '-'
    |       |-ImplicitCastExpr 0x14f8096a0 <col:17> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x14f809660 <col:17> 'int' lvalue ParmVar 0x14f1281a8 'log2TrafoSize' 'int'
    |       `-IntegerLiteral 0x14f809680 <col:31> 'int' 2
    |-DeclStmt 0x14f8097c8 <line:20:3, col:13>
    | `-VarDecl 0x14f809760 <col:3, col:7> col:7 used binIdx 'int'
    |-DeclStmt 0x14f809898 <line:21:3, col:19>
    | `-VarDecl 0x14f8097f8 <col:3, col:15> col:7 used value 'int' cinit
    |   `-ImplicitCastExpr 0x14f809880 <col:15> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x14f809860 <col:15> 'int' lvalue Var 0x14f128768 'cMax' 'int'
    |-ForStmt 0x158808910 <line:22:3, line:33:5>
    | |-BinaryOperator 0x14f8098f0 <line:22:8, col:15> 'int' '='
    | | |-DeclRefExpr 0x14f8098b0 <col:8> 'int' lvalue Var 0x14f809760 'binIdx' 'int'
    | | `-IntegerLiteral 0x14f8098d0 <col:15> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x14f809980 <col:17, col:24> 'int' '<'
    | | |-ImplicitCastExpr 0x14f809950 <col:17> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14f809910 <col:17> 'int' lvalue Var 0x14f809760 'binIdx' 'int'
    | | `-ImplicitCastExpr 0x14f809968 <col:24> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x14f809930 <col:24> 'int' lvalue Var 0x14f128768 'cMax' 'int'
    | |-UnaryOperator 0x14f8099c0 <col:29, col:35> 'int' postfix '++'
    | | `-DeclRefExpr 0x14f8099a0 <col:29> 'int' lvalue Var 0x14f809760 'binIdx' 'int'
    | `-CompoundStmt 0x1588088e0 <line:23:5, line:33:5>
    |   |-DeclStmt 0x14f809b08 <line:24:7, col:43>
    |   | `-VarDecl 0x14f8099f0 <col:7, col:42> col:11 used ctxIdxInc 'int' cinit
    |   |   `-ParenExpr 0x14f809ae8 <col:23, col:42> 'int'
    |   |     `-BinaryOperator 0x14f809ac8 <col:24, col:34> 'int' '>>'
    |   |       |-ImplicitCastExpr 0x14f809a98 <col:24> 'int' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x14f809a58 <col:24> 'int' lvalue Var 0x14f809760 'binIdx' 'int'
    |   |       `-ImplicitCastExpr 0x14f809ab0 <col:34> 'int' <LValueToRValue>
    |   |         `-DeclRefExpr 0x14f809a78 <col:34> 'int' lvalue Var 0x14f809168 'ctxShift' 'int'
    |   |-CallExpr 0x14f809c18 <line:26:7, col:50> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x14f809b20 <col:7> 'int ()' Function 0x14f128518 'logtrace' 'int ()'
    |   | |-RecoveryExpr 0x14f809bf8 <col:16> '<dependent type>' contains-errors lvalue
    |   | |-StringLiteral 0x14f809b58 <col:25> 'char[4]' lvalue "STR"
    |   | |-DeclRefExpr 0x14f809b78 <col:31> 'int' lvalue Var 0x14f8090e8 'ctxOffset' 'int'
    |   | `-DeclRefExpr 0x14f809b98 <col:41> 'int' lvalue Var 0x14f8099f0 'ctxIdxInc' 'int'
    |   |-DeclStmt 0x14f809f88 <line:28:7, col:86>
    |   | `-VarDecl 0x14f809c70 <col:7, col:85> col:11 used bit 'int' cinit
    |   |   `-CallExpr 0x14f809f58 <col:17, col:85> '<dependent type>' contains-errors
    |   |     |-DeclRefExpr 0x14f809db8 <col:17> 'int ()' Function 0x14f809d00 'decode_CABAC_bit' 'int ()'
    |   |     |-UnaryOperator 0x14f809e40 <col:34, col:41> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   |     | `-CXXDependentScopeMemberExpr 0x14f809df8 <col:35, col:41> '<dependent type>' contains-errors lvalue ->cabac_decoder
    |   |     |   `-RecoveryExpr 0x14f809dd8 <col:35> '<dependent type>' contains-errors lvalue
    |   |     `-UnaryOperator 0x14f809f40 <col:56, col:84> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   |       `-ArraySubscriptExpr 0x14f809f20 <col:57, col:84> '<dependent type>' contains-errors lvalue
    |   |         |-ImplicitCastExpr 0x14f809f08 <col:57> '<dependent type>' contains-errors <LValueToRValue>
    |   |         | `-RecoveryExpr 0x14f809e58 <col:57> '<dependent type>' contains-errors lvalue
    |   |         `-BinaryOperator 0x14f809ee8 <col:63, col:75> 'int' '+'
    |   |           |-ImplicitCastExpr 0x14f809eb8 <col:63> 'int' <LValueToRValue>
    |   |           | `-DeclRefExpr 0x14f809e78 <col:63> 'int' lvalue Var 0x14f8090e8 'ctxOffset' 'int'
    |   |           `-ImplicitCastExpr 0x14f809ed0 <col:75> 'int' <LValueToRValue>
    |   |             `-DeclRefExpr 0x14f809e98 <col:75> 'int' lvalue Var 0x14f8099f0 'ctxIdxInc' 'int'
    |   `-IfStmt 0x1588088c0 <line:29:7, line:32:7>
    |     |-BinaryOperator 0x158808800 <line:29:11, col:16> 'int' contains-errors '=='
    |     | |-ImplicitCastExpr 0x14f809fe0 <col:11> 'int' contains-errors <LValueToRValue>
    |     | | `-DeclRefExpr 0x14f809fa0 <col:11> 'int' contains-errors lvalue Var 0x14f809c70 'bit' 'int'
    |     | `-IntegerLiteral 0x14f809fc0 <col:16> 'int' 0
    |     `-CompoundStmt 0x1588088a0 <col:19, line:32:7>
    |       |-BinaryOperator 0x158808878 <line:30:9, col:15> 'int' '='
    |       | |-DeclRefExpr 0x158808820 <col:9> 'int' lvalue Var 0x14f8097f8 'value' 'int'
    |       | `-ImplicitCastExpr 0x158808860 <col:15> 'int' <LValueToRValue>
    |       |   `-DeclRefExpr 0x158808840 <col:15> 'int' lvalue Var 0x14f809760 'binIdx' 'int'
    |       `-BreakStmt 0x158808898 <line:31:9>
    |-CallExpr 0x158808a18 <line:35:3, col:33> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x158808948 <col:3> 'int ()' Function 0x14f128518 'logtrace' 'int ()'
    | |-RecoveryExpr 0x1588089f8 <col:12> '<dependent type>' contains-errors lvalue
    | |-StringLiteral 0x158808980 <col:21> 'char[4]' lvalue "STR"
    | `-DeclRefExpr 0x1588089a0 <col:28> 'int' lvalue Var 0x14f8097f8 'value' 'int'
    `-ReturnStmt 0x158808a88 <line:37:3, col:10>
      `-ImplicitCastExpr 0x158808a70 <col:10> 'int' <LValueToRValue>
        `-DeclRefExpr 0x158808a50 <col:10> 'int' lvalue Var 0x14f8097f8 'value' 'int'
