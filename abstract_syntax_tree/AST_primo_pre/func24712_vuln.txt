`-FunctionDecl 0x1271281f8  line:1:1 invalid zundef 'int (int *)'
  |-ParmVarDecl 0x127128128 <col:8, col:17> col:17 invalid i_ctx_p 'int *'
  `-CompoundStmt 0x131008ee0 <line:2:1, line:15:1>
    |-DeclStmt 0x127128328 <line:5:5, col:13>
    | `-VarDecl 0x1271282c0 <col:5, col:9> col:9 used code 'int'
    |-CallExpr 0x1271285c0 <line:7:5, col:34> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x1271284a0 <col:5> 'int ()' Function 0x1271283e8 'check_type' 'int ()'
    | |-UnaryOperator 0x127128588 <col:16, col:17> '<dependent type>' contains-errors prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x127128570 <col:17> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x127128550 <col:17> '<dependent type>' contains-errors lvalue
    | `-RecoveryExpr 0x1271285a0 <col:22> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x1310088a0 <line:8:5, line:9:30>
    | |-BinaryOperator 0x127128678 <line:8:9, col:34> 'int' contains-errors '=='
    | | |-CXXDependentScopeMemberExpr 0x127128610 <col:9, col:18> '<dependent type>' contains-errors lvalue ->in_superexec
    | | | `-RecoveryExpr 0x1271285f0 <col:9> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x127128658 <col:34> 'int' 0
    | `-CallExpr 0x131008878 <line:9:9, col:30> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x127128778 <col:9> 'int ()' Function 0x1271286c0 'check_dict_write' 'int ()'
    |   `-UnaryOperator 0x131008860 <col:26, col:27> '<dependent type>' contains-errors prefix '*' cannot overflow
    |     `-ImplicitCastExpr 0x131008848 <col:27> '<dependent type>' contains-errors <LValueToRValue>
    |       `-RecoveryExpr 0x131008828 <col:27> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x131008ad0 <line:10:5, col:31> 'int' contains-errors '='
    | |-DeclRefExpr 0x1310088c0 <col:5> 'int' lvalue Var 0x1271282c0 'code' 'int'
    | `-CallExpr 0x131008aa0 <col:12, col:31> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x1310089c0 <col:12> 'int ()' Function 0x131008908 'idict_undef' 'int ()'
    |   |-RecoveryExpr 0x131008a60 <col:24> '<dependent type>' contains-errors lvalue
    |   `-RecoveryExpr 0x131008a80 <col:29> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x131008cf8 <line:11:5, line:12:16>
    | |-BinaryOperator 0x131008c90 <line:11:9, col:29> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x131008c30 <col:9, col:16> 'int' '<'
    | | | |-ImplicitCastExpr 0x131008c18 <col:9> 'int' <LValueToRValue>
    | | | | `-DeclRefExpr 0x131008af0 <col:9> 'int' lvalue Var 0x1271282c0 'code' 'int'
    | | | `-IntegerLiteral 0x131008b10 <col:16> 'int' 0
    | | `-BinaryOperator 0x131008c70 <col:21, col:29> 'int' contains-errors '!='
    | |   |-DeclRefExpr 0x131008b68 <col:21> 'int' lvalue Var 0x1271282c0 'code' 'int'
    | |   `-RecoveryExpr 0x131008c50 <col:29> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x131008ce8 <line:12:9, col:16>
    |   `-ImplicitCastExpr 0x131008cd0 <col:16> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x131008cb0 <col:16> 'int' lvalue Var 0x1271282c0 'code' 'int'
    |-CallExpr 0x131008e88 <line:13:5, col:10> 'int'
    | |-ImplicitCastExpr 0x131008e70 <col:5> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x131008df8 <col:5> 'int ()' Function 0x131008d40 'pop' 'int ()'
    | `-IntegerLiteral 0x131008e18 <col:9> 'int' 2
    `-ReturnStmt 0x131008ed0 <line:14:5, col:12>
      `-IntegerLiteral 0x131008eb0 <col:12> 'int' 0
