`-FunctionDecl 0x14d80de88  line:1:1 invalid infinite_recursive_call_check_trav 'int (int *, int *)'
  |-ParmVarDecl 0x14d80dd28 <col:36, col:42> col:42 invalid node 'int *'
  |-ParmVarDecl 0x14d80dda8 <col:48, col:57> col:57 invalid env 'int *'
  `-CompoundStmt 0x14e809da0 <line:2:1, line:62:1>
    |-DeclStmt 0x14d80dfc0 <line:3:3, col:8>
    | `-VarDecl 0x14d80df58 <col:3, col:7> col:7 used r 'int'
    |-SwitchStmt 0x14d80e198 <line:5:3, line:59:3>
    | |-CallExpr 0x14d80e170 <line:5:11, col:25> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x14d80e130 <col:11> 'int ()' Function 0x14d80e078 'NODE_TYPE' 'int ()'
    | | `-RecoveryExpr 0x14d80e150 <col:21> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x14e809cf8 <col:28, line:59:3>
    |   |-DoStmt 0x14d827b48 <line:8:5, line:10:58>
    |   | |-CompoundStmt 0x14d80e3e8 <line:8:8, line:10:5>
    |   | | `-BinaryOperator 0x14d80e3c8 <line:9:7, col:65> 'int' contains-errors '='
    |   | |   |-DeclRefExpr 0x14d80e1f0 <col:7> 'int' lvalue Var 0x14d80df58 'r' 'int'
    |   | |   `-CallExpr 0x14d80e398 <col:11, col:65> '<dependent type>' contains-errors
    |   | |     |-RecoveryExpr 0x14d80e210 <col:11> '<dependent type>' contains-errors lvalue
    |   | |     |-CallExpr 0x14d80e350 <col:46, col:59> '<dependent type>' contains-errors
    |   | |     | |-DeclRefExpr 0x14d80e310 <col:46> 'int ()' Function 0x14d80e258 'NODE_CAR' 'int ()'
    |   | |     | `-RecoveryExpr 0x14d80e330 <col:55> '<dependent type>' contains-errors lvalue
    |   | |     `-RecoveryExpr 0x14d80e378 <col:62> '<dependent type>' contains-errors lvalue
    |   | `-BinaryOperator 0x14d827b28 <line:10:14, col:57> 'int' contains-errors '&&'
    |   |   |-BinaryOperator 0x14d827858 <col:14, col:19> 'int' '=='
    |   |   | |-ImplicitCastExpr 0x14d827840 <col:14> 'int' <LValueToRValue>
    |   |   | | `-DeclRefExpr 0x14d827800 <col:14> 'int' lvalue Var 0x14d80df58 'r' 'int'
    |   |   | `-IntegerLiteral 0x14d827820 <col:19> 'int' 0
    |   |   `-CallExpr 0x14d827b00 <col:24, col:57> '<dependent type>' contains-errors
    |   |     |-DeclRefExpr 0x14d827958 <col:24> 'int ()' Function 0x14d8278a0 'IS_NOT_NULL' 'int ()'
    |   |     `-BinaryOperator 0x14d827ae0 <col:36, col:56> '<dependent type>' contains-errors '='
    |   |       |-RecoveryExpr 0x14d827978 <col:36> '<dependent type>' contains-errors lvalue
    |   |       `-CallExpr 0x14d827ab8 <col:43, col:56> '<dependent type>' contains-errors
    |   |         |-DeclRefExpr 0x14d827a78 <col:43> 'int ()' Function 0x14d8279c0 'NODE_CDR' 'int ()'
    |   |         `-RecoveryExpr 0x14d827a98 <col:52> '<dependent type>' contains-errors lvalue
    |   |-BreakStmt 0x14d827b68 <line:11:5>
    |   |-CaseStmt 0x14d827ba8 <line:13:3, line:17:5>
    |   | |-DeclRefExpr 0x14d827b88 <line:13:8> 'int ()' Function 0x14d8279c0 'NODE_CDR' 'int ()'
    |   | `-IfStmt 0x14d827ee0 <line:14:5, line:17:5>
    |   |   |-UnaryOperator 0x14d827e40 <line:14:9, col:40> '<dependent type>' contains-errors prefix '!' cannot overflow
    |   |   | `-CallExpr 0x14d827e18 <col:11, col:40> '<dependent type>' contains-errors
    |   |   |   |-DeclRefExpr 0x14d827cb0 <col:11> 'int ()' Function 0x14d827bf8 'ANCHOR_HAS_BODY' 'int ()'
    |   |   |   `-CallExpr 0x14d827df0 <col:27, col:39> '<dependent type>' contains-errors
    |   |   |     |-DeclRefExpr 0x14d827db0 <col:27> 'int ()' Function 0x14d827cf8 'ANCHOR_' 'int ()'
    |   |   |     `-RecoveryExpr 0x14d827dd0 <col:35> '<dependent type>' contains-errors lvalue
    |   |   `-CompoundStmt 0x14d827ec0 <col:43, line:17:5>
    |   |     |-BinaryOperator 0x14d827e98 <line:15:7, col:11> 'int' '='
    |   |     | |-DeclRefExpr 0x14d827e58 <col:7> 'int' lvalue Var 0x14d80df58 'r' 'int'
    |   |     | `-IntegerLiteral 0x14d827e78 <col:11> 'int' 0
    |   |     `-BreakStmt 0x14d827eb8 <line:16:7>
    |   |-BinaryOperator 0x14d8280f0 <line:20:5, col:64> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x14d827f18 <col:5> 'int' lvalue Var 0x14d80df58 'r' 'int'
    |   | `-CallExpr 0x14d8280c0 <col:9, col:64> '<dependent type>' contains-errors
    |   |   |-RecoveryExpr 0x14d827f38 <col:9> '<dependent type>' contains-errors lvalue
    |   |   |-CallExpr 0x14d828078 <col:44, col:58> '<dependent type>' contains-errors
    |   |   | |-DeclRefExpr 0x14d828038 <col:44> 'int ()' Function 0x14d827f80 'NODE_BODY' 'int ()'
    |   |   | `-RecoveryExpr 0x14d828058 <col:54> '<dependent type>' contains-errors lvalue
    |   |   `-RecoveryExpr 0x14d8280a0 <col:61> '<dependent type>' contains-errors lvalue
    |   |-BreakStmt 0x14d828110 <line:21:5>
    |   |-CompoundStmt 0x14e809b38 <line:24:5, line:51:5>
    |   | `-IfStmt 0x14e809b08 <line:27:7, line:50:7> has_else
    |   |   |-BinaryOperator 0x14d8283b0 <line:27:11, col:23> 'int' contains-errors '=='
    |   |   | |-CXXDependentScopeMemberExpr 0x14d828348 <col:11, col:15> '<dependent type>' contains-errors lvalue ->type
    |   |   | | `-RecoveryExpr 0x14d828328 <col:11> '<dependent type>' contains-errors lvalue
    |   |   | `-RecoveryExpr 0x14d828390 <col:23> '<dependent type>' contains-errors lvalue
    |   |   |-CompoundStmt 0x14e809720 <col:41, line:40:7>
    |   |   | `-IfStmt 0x14e809700 <line:28:9, line:39:9>
    |   |   |   |-BinaryOperator 0x14d828660 <line:28:13, col:59> 'int' contains-errors '&&'
    |   |   |   | |-CallExpr 0x14d8284f0 <col:13, col:35> '<dependent type>' contains-errors
    |   |   |   | | |-DeclRefExpr 0x14d8284b0 <col:13> 'int ()' Function 0x14d8283f8 'NODE_IS_RECURSION' 'int ()'
    |   |   |   | | `-RecoveryExpr 0x14d8284d0 <col:31> '<dependent type>' contains-errors lvalue
    |   |   |   | `-CallExpr 0x14d828638 <col:40, col:59> '<dependent type>' contains-errors
    |   |   |   |   |-DeclRefExpr 0x14d8285f8 <col:40> 'int ()' Function 0x14d828540 'NODE_IS_CALLED' 'int ()'
    |   |   |   |   `-RecoveryExpr 0x14d828618 <col:55> '<dependent type>' contains-errors lvalue
    |   |   |   `-CompoundStmt 0x14e8096d8 <col:62, line:39:9>
    |   |   |     |-DeclStmt 0x14d828700 <line:29:11, col:18>
    |   |   |     | `-VarDecl 0x14d828698 <col:11, col:15> col:15 used ret 'int'
    |   |   |     |-BinaryOperator 0x14e809440 <line:33:11, col:70> 'int' contains-errors '='
    |   |   |     | |-DeclRefExpr 0x14e809240 <col:11> 'int' lvalue Var 0x14d828698 'ret' 'int'
    |   |   |     | `-CallExpr 0x14e809408 <col:17, col:70> '<dependent type>' contains-errors
    |   |   |     |   |-DeclRefExpr 0x14e809340 <col:17> 'int ()' Function 0x14e809288 'infinite_recursive_call_check' 'int ()'
    |   |   |     |   |-CallExpr 0x14e8093a0 <col:47, col:61> '<dependent type>' contains-errors
    |   |   |     |   | |-DeclRefExpr 0x14e809360 <col:47> 'int ()' Function 0x14d827f80 'NODE_BODY' 'int ()'
    |   |   |     |   | `-RecoveryExpr 0x14e809380 <col:57> '<dependent type>' contains-errors lvalue
    |   |   |     |   |-RecoveryExpr 0x14e8093c8 <col:64> '<dependent type>' contains-errors lvalue
    |   |   |     |   `-IntegerLiteral 0x14e8093e8 <col:69> 'int' 1
    |   |   |     `-IfStmt 0x14e809588 <line:34:11, line:35:16> has_else
    |   |   |       |-BinaryOperator 0x14e8094b8 <line:34:15, col:21> 'int' '<'
    |   |   |       | |-ImplicitCastExpr 0x14e8094a0 <col:15> 'int' <LValueToRValue>
    |   |   |       | | `-DeclRefExpr 0x14e809460 <col:15> 'int' lvalue Var 0x14d828698 'ret' 'int'
    |   |   |       | `-IntegerLiteral 0x14e809480 <col:21> 'int' 0
    |   |   |       |-ReturnStmt 0x14e809510 <col:24, col:31>
    |   |   |       | `-ImplicitCastExpr 0x14e8094f8 <col:31> 'int' <LValueToRValue>
    |   |   |       |   `-DeclRefExpr 0x14e8094d8 <col:31> 'int' lvalue Var 0x14d828698 'ret' 'int'
    |   |   |       `-NullStmt 0x14e809580 <line:35:16>
    |   |   `-IfStmt 0x14e809ae8 <line:41:12, line:50:7>
    |   |     |-RecoveryExpr 0x14e809738 <line:41:16, col:28> '_Bool' contains-errors
    |   |     `-CompoundStmt 0x14e809ac8 <col:47, line:50:7>
    |   |       |-IfStmt 0x14e8098f0 <line:42:9, line:45:9>
    |   |       | |-RecoveryExpr 0x14e809778 <line:42:13, col:36> '_Bool' contains-errors
    |   |       | `-CompoundStmt 0x14e8098d8 <col:39, line:45:9>
    |   |       |   `-IfStmt 0x14e8098b8 <line:44:11, col:30>
    |   |       |     |-BinaryOperator 0x14e809850 <col:15, col:20> 'int' '!='
    |   |       |     | |-ImplicitCastExpr 0x14e809838 <col:15> 'int' <LValueToRValue>
    |   |       |     | | `-DeclRefExpr 0x14e8097f8 <col:15> 'int' lvalue Var 0x14d80df58 'r' 'int'
    |   |       |     | `-IntegerLiteral 0x14e809818 <col:20> 'int' 0
    |   |       |     `-ReturnStmt 0x14e8098a8 <col:23, col:30>
    |   |       |       `-ImplicitCastExpr 0x14e809890 <col:30> 'int' <LValueToRValue>
    |   |       |         `-DeclRefExpr 0x14e809870 <col:30> 'int' lvalue Var 0x14d80df58 'r' 'int'
    |   |       `-IfStmt 0x14e809aa8 <line:46:9, line:49:9>
    |   |         |-RecoveryExpr 0x14e809930 <line:46:13, col:36> '_Bool' contains-errors
    |   |         `-CompoundStmt 0x14e809a90 <col:39, line:49:9>
    |   |           `-IfStmt 0x14e809a70 <line:48:11, col:30>
    |   |             |-BinaryOperator 0x14e809a08 <col:15, col:20> 'int' '!='
    |   |             | |-ImplicitCastExpr 0x14e8099f0 <col:15> 'int' <LValueToRValue>
    |   |             | | `-DeclRefExpr 0x14e8099b0 <col:15> 'int' lvalue Var 0x14d80df58 'r' 'int'
    |   |             | `-IntegerLiteral 0x14e8099d0 <col:20> 'int' 0
    |   |             `-ReturnStmt 0x14e809a60 <col:23, col:30>
    |   |               `-ImplicitCastExpr 0x14e809a48 <col:30> 'int' <LValueToRValue>
    |   |                 `-DeclRefExpr 0x14e809a28 <col:30> 'int' lvalue Var 0x14d80df58 'r' 'int'
    |   |-BinaryOperator 0x14e809c48 <line:53:5, col:64> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x14e809b50 <col:5> 'int' lvalue Var 0x14d80df58 'r' 'int'
    |   | `-CallExpr 0x14e809c18 <col:9, col:64> '<dependent type>' contains-errors
    |   |   |-RecoveryExpr 0x14e809b70 <col:9> '<dependent type>' contains-errors lvalue
    |   |   |-CallExpr 0x14e809bd0 <col:44, col:58> '<dependent type>' contains-errors
    |   |   | |-DeclRefExpr 0x14e809b90 <col:44> 'int ()' Function 0x14d827f80 'NODE_BODY' 'int ()'
    |   |   | `-RecoveryExpr 0x14e809bb0 <col:54> '<dependent type>' contains-errors lvalue
    |   |   `-RecoveryExpr 0x14e809bf8 <col:61> '<dependent type>' contains-errors lvalue
    |   |-BreakStmt 0x14e809c68 <line:54:5>
    |   |-DefaultStmt 0x14e809cd0 <line:56:3, line:57:9>
    |   | `-BinaryOperator 0x14e809cb0 <col:5, col:9> 'int' '='
    |   |   |-DeclRefExpr 0x14e809c70 <col:5> 'int' lvalue Var 0x14d80df58 'r' 'int'
    |   |   `-IntegerLiteral 0x14e809c90 <col:9> 'int' 0
    |   `-BreakStmt 0x14e809cf0 <line:58:5>
    `-ReturnStmt 0x14e809d90 <line:61:3, col:10>
      `-ImplicitCastExpr 0x14e809d78 <col:10> 'int' <LValueToRValue>
        `-DeclRefExpr 0x14e809d58 <col:10> 'int' lvalue Var 0x14d80df58 'r' 'int'
