`-FunctionDecl 0x13400dee8  line:1:1 invalid xsltNumberFormatRoman 'int (int, double, int)'
  |-ParmVarDecl 0x13400dcf0 <col:23, col:36> col:36 invalid buffer 'int'
  |-ParmVarDecl 0x13400dd70 <line:2:9, col:16> col:16 used number 'double'
  |-ParmVarDecl 0x13400ddf0 <line:3:9, col:13> col:13 used is_upper 'int'
  `-CompoundStmt 0x1350085d0 <line:4:1, line:58:1>
    |-WhileStmt 0x13400e2e8 <line:6:5, line:9:5>
    | |-BinaryOperator 0x13400e000 <line:6:12, col:22> 'int' '>='
    | | |-ImplicitCastExpr 0x13400dfe8 <col:12> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x13400dfa8 <col:12> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    | | `-FloatingLiteral 0x13400dfc8 <col:22> 'double' 1.000000e+03
    | `-CompoundStmt 0x13400e2d0 <col:30, line:9:5>
    |   `-CompoundAssignOperator 0x13400e2a0 <line:8:2, col:12> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
    |     |-DeclRefExpr 0x13400e260 <col:2> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    |     `-FloatingLiteral 0x13400e280 <col:12> 'double' 1.000000e+03
    |-IfStmt 0x1340274a8 <line:10:5, line:13:5>
    | |-BinaryOperator 0x13400e360 <line:10:9, col:19> 'int' '>='
    | | |-ImplicitCastExpr 0x13400e348 <col:9> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x13400e308 <col:9> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    | | `-FloatingLiteral 0x13400e328 <col:19> 'double' 9.000000e+02
    | `-CompoundStmt 0x134027490 <col:26, line:13:5>
    |   `-CompoundAssignOperator 0x134027460 <line:12:2, col:12> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
    |     |-DeclRefExpr 0x134027420 <col:2> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    |     `-FloatingLiteral 0x134027440 <col:12> 'double' 9.000000e+02
    |-WhileStmt 0x134027668 <line:14:5, line:17:5>
    | |-BinaryOperator 0x134027520 <line:14:12, col:22> 'int' '>='
    | | |-ImplicitCastExpr 0x134027508 <col:12> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x1340274c8 <col:12> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    | | `-FloatingLiteral 0x1340274e8 <col:22> 'double' 5.000000e+02
    | `-CompoundStmt 0x134027650 <col:29, line:17:5>
    |   `-CompoundAssignOperator 0x134027620 <line:16:2, col:12> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
    |     |-DeclRefExpr 0x1340275e0 <col:2> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    |     `-FloatingLiteral 0x134027600 <col:12> 'double' 5.000000e+02
    |-IfStmt 0x134027828 <line:18:5, line:21:5>
    | |-BinaryOperator 0x1340276e0 <line:18:9, col:19> 'int' '>='
    | | |-ImplicitCastExpr 0x1340276c8 <col:9> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x134027688 <col:9> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    | | `-FloatingLiteral 0x1340276a8 <col:19> 'double' 4.000000e+02
    | `-CompoundStmt 0x134027810 <col:26, line:21:5>
    |   `-CompoundAssignOperator 0x1340277e0 <line:20:2, col:12> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
    |     |-DeclRefExpr 0x1340277a0 <col:2> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    |     `-FloatingLiteral 0x1340277c0 <col:12> 'double' 4.000000e+02
    |-WhileStmt 0x1340279e8 <line:22:5, line:25:5>
    | |-BinaryOperator 0x1340278a0 <line:22:12, col:22> 'int' '>='
    | | |-ImplicitCastExpr 0x134027888 <col:12> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x134027848 <col:12> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    | | `-FloatingLiteral 0x134027868 <col:22> 'double' 1.000000e+02
    | `-CompoundStmt 0x1340279d0 <col:29, line:25:5>
    |   `-CompoundAssignOperator 0x1340279a0 <line:24:2, col:12> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
    |     |-DeclRefExpr 0x134027960 <col:2> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    |     `-FloatingLiteral 0x134027980 <col:12> 'double' 1.000000e+02
    |-IfStmt 0x134027ba8 <line:26:5, line:29:5>
    | |-BinaryOperator 0x134027a60 <line:26:9, col:19> 'int' '>='
    | | |-ImplicitCastExpr 0x134027a48 <col:9> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x134027a08 <col:9> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    | | `-FloatingLiteral 0x134027a28 <col:19> 'double' 9.000000e+01
    | `-CompoundStmt 0x134027b90 <col:25, line:29:5>
    |   `-CompoundAssignOperator 0x134027b60 <line:28:2, col:12> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
    |     |-DeclRefExpr 0x134027b20 <col:2> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    |     `-FloatingLiteral 0x134027b40 <col:12> 'double' 9.000000e+01
    |-WhileStmt 0x134027d68 <line:30:5, line:33:5>
    | |-BinaryOperator 0x134027c20 <line:30:12, col:22> 'int' '>='
    | | |-ImplicitCastExpr 0x134027c08 <col:12> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x134027bc8 <col:12> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    | | `-FloatingLiteral 0x134027be8 <col:22> 'double' 5.000000e+01
    | `-CompoundStmt 0x134027d50 <col:28, line:33:5>
    |   `-CompoundAssignOperator 0x134027d20 <line:32:2, col:12> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
    |     |-DeclRefExpr 0x134027ce0 <col:2> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    |     `-FloatingLiteral 0x134027d00 <col:12> 'double' 5.000000e+01
    |-IfStmt 0x134027f28 <line:34:5, line:37:5>
    | |-BinaryOperator 0x134027de0 <line:34:9, col:19> 'int' '>='
    | | |-ImplicitCastExpr 0x134027dc8 <col:9> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x134027d88 <col:9> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    | | `-FloatingLiteral 0x134027da8 <col:19> 'double' 4.000000e+01
    | `-CompoundStmt 0x134027f10 <col:25, line:37:5>
    |   `-CompoundAssignOperator 0x134027ee0 <line:36:2, col:12> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
    |     |-DeclRefExpr 0x134027ea0 <col:2> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    |     `-FloatingLiteral 0x134027ec0 <col:12> 'double' 4.000000e+01
    |-WhileStmt 0x1340280e8 <line:38:5, line:41:5>
    | |-BinaryOperator 0x134027fa0 <line:38:12, col:22> 'int' '>='
    | | |-ImplicitCastExpr 0x134027f88 <col:12> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x134027f48 <col:12> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    | | `-FloatingLiteral 0x134027f68 <col:22> 'double' 1.000000e+01
    | `-CompoundStmt 0x1340280d0 <col:28, line:41:5>
    |   `-CompoundAssignOperator 0x1340280a0 <line:40:2, col:12> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
    |     |-DeclRefExpr 0x134028060 <col:2> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    |     `-FloatingLiteral 0x134028080 <col:12> 'double' 1.000000e+01
    |-IfStmt 0x1340282a8 <line:42:5, line:45:5>
    | |-BinaryOperator 0x134028160 <line:42:9, col:19> 'int' '>='
    | | |-ImplicitCastExpr 0x134028148 <col:9> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x134028108 <col:9> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    | | `-FloatingLiteral 0x134028128 <col:19> 'double' 9.000000e+00
    | `-CompoundStmt 0x134028290 <col:24, line:45:5>
    |   `-CompoundAssignOperator 0x134028260 <line:44:2, col:12> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
    |     |-DeclRefExpr 0x134028220 <col:2> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    |     `-FloatingLiteral 0x134028240 <col:12> 'double' 9.000000e+00
    |-WhileStmt 0x135008268 <line:46:5, line:49:5>
    | |-BinaryOperator 0x134028320 <line:46:12, col:22> 'int' '>='
    | | |-ImplicitCastExpr 0x134028308 <col:12> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x1340282c8 <col:12> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    | | `-FloatingLiteral 0x1340282e8 <col:22> 'double' 5.000000e+00
    | `-CompoundStmt 0x135008250 <col:27, line:49:5>
    |   `-CompoundAssignOperator 0x135008220 <line:48:2, col:12> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
    |     |-DeclRefExpr 0x1340283e0 <col:2> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    |     `-FloatingLiteral 0x135008200 <col:12> 'double' 5.000000e+00
    |-IfStmt 0x135008428 <line:50:5, line:53:5>
    | |-BinaryOperator 0x1350082e0 <line:50:9, col:19> 'int' '>='
    | | |-ImplicitCastExpr 0x1350082c8 <col:9> 'double' <LValueToRValue>
    | | | `-DeclRefExpr 0x135008288 <col:9> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    | | `-FloatingLiteral 0x1350082a8 <col:19> 'double' 4.000000e+00
    | `-CompoundStmt 0x135008410 <col:24, line:53:5>
    |   `-CompoundAssignOperator 0x1350083e0 <line:52:2, col:12> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
    |     |-DeclRefExpr 0x1350083a0 <col:2> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
    |     `-FloatingLiteral 0x1350083c0 <col:12> 'double' 4.000000e+00
    `-WhileStmt 0x1350085b0 <line:54:5, line:57:5>
      |-BinaryOperator 0x1350084a0 <line:54:12, col:22> 'int' '>='
      | |-ImplicitCastExpr 0x135008488 <col:12> 'double' <LValueToRValue>
      | | `-DeclRefExpr 0x135008448 <col:12> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
      | `-FloatingLiteral 0x135008468 <col:22> 'double' 1.000000e+00
      `-CompoundStmt 0x135008598 <col:27, line:57:5>
        `-UnaryOperator 0x135008580 <line:56:2, col:8> 'double' postfix '--'
          `-DeclRefExpr 0x135008560 <col:2> 'double' lvalue ParmVar 0x13400dd70 'number' 'double'
