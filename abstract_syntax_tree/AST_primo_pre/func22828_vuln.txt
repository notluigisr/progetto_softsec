`-FunctionDecl 0x14c912fd8  line:1:1 invalid may_get_cmd_block 'int (int *, char *, char **, int *)'
  |-ParmVarDecl 0x14c912d28 <col:19, col:28> col:28 invalid eap 'int *'
  |-ParmVarDecl 0x14c912da8 <col:33, col:41> col:41 used p 'char *'
  |-ParmVarDecl 0x14c912e58 <col:44, col:53> col:53 used tofree 'char **'
  |-ParmVarDecl 0x14c912ed8 <col:61, col:66> col:66 used flags 'int *'
  `-CompoundStmt 0x14c92f8c0 <line:2:1, line:40:1>
    |-DeclStmt 0x14c913158 <line:3:5, col:21>
    | `-VarDecl 0x14c9130b8 <col:5, col:20> col:13 used retp 'char *' cinit
    |   `-ImplicitCastExpr 0x14c913140 <col:20> 'char *' <LValueToRValue>
    |     `-DeclRefExpr 0x14c913120 <col:20> 'char *' lvalue ParmVar 0x14c912da8 'p' 'char *'
    |-IfStmt 0x14c92f840 <line:5:5, line:38:5>
    | |-BinaryOperator 0x14c92ca10 <line:5:9, line:6:33> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x14c92c9b0 <line:5:9, col:60> 'int' contains-errors '&&'
    | | | |-BinaryOperator 0x14c92c8e8 <col:9, col:15> 'int' '=='
    | | | | |-ImplicitCastExpr 0x14c92c8d0 <col:9, col:10> 'int' <IntegralCast>
    | | | | | `-ImplicitCastExpr 0x14c92c8b8 <col:9, col:10> 'char' <LValueToRValue>
    | | | | |   `-UnaryOperator 0x14c92c8a0 <col:9, col:10> 'char' lvalue prefix '*' cannot overflow
    | | | | |     `-ImplicitCastExpr 0x14c92c888 <col:10> 'char *' <LValueToRValue>
    | | | | |       `-DeclRefExpr 0x14c913170 <col:10> 'char *' lvalue ParmVar 0x14c912da8 'p' 'char *'
    | | | | `-CharacterLiteral 0x14c9131c0 <col:15> 'int' 123
    | | | `-CallExpr 0x14c92c980 <col:22, col:60> '<dependent type>' contains-errors
    | | |   |-DeclRefExpr 0x14c913380 <col:22> 'int ()' Function 0x14c9132c8 'ends_excmd2' 'int ()'
    | | |   |-CXXDependentScopeMemberExpr 0x14c92c400 <col:34, col:39> '<dependent type>' contains-errors lvalue ->arg
    | | |   | `-RecoveryExpr 0x14c9133a0 <col:34> '<dependent type>' contains-errors lvalue
    | | |   `-CallExpr 0x14c92c958 <col:44, col:59> 'int'
    | | |     |-ImplicitCastExpr 0x14c92c940 <col:44> 'int (*)()' <FunctionToPointerDecay>
    | | |     | `-DeclRefExpr 0x14c92c528 <col:44> 'int ()' Function 0x14c92c470 'skipwhite' 'int ()'
    | | |     `-BinaryOperator 0x14c92c920 <col:54, col:58> 'char *' '+'
    | | |       |-ImplicitCastExpr 0x14c92c908 <col:54> 'char *' <LValueToRValue>
    | | |       | `-DeclRefExpr 0x14c92c548 <col:54> 'char *' lvalue ParmVar 0x14c912da8 'p' 'char *'
    | | |       `-IntegerLiteral 0x14c92c568 <col:58> 'int' 1
    | | `-BinaryOperator 0x14c92c9f0 <line:6:17, col:33> 'int' contains-errors '!='
    | |   |-CXXDependentScopeMemberExpr 0x14c92c6a0 <col:17, col:22> '<dependent type>' contains-errors lvalue ->getline
    | |   | `-RecoveryExpr 0x14c92c680 <col:17> '<dependent type>' contains-errors lvalue
    | |   `-RecoveryExpr 0x14c92c9d0 <col:33> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x14c92f810 <line:7:5, line:38:5>
    |   |-DeclStmt 0x14c92cae8 <line:9:2, col:25>
    |   | `-VarDecl 0x14c92ca48 <col:2, col:21> col:14 used line 'char *' cinit
    |   |   `-RecoveryExpr 0x14c92cac8 <col:21> '<dependent type>' contains-errors lvalue
    |   |-IfStmt 0x14c92d350 <line:12:2, line:13:13>
    |   | |-BinaryOperator 0x14c92cea8 <line:12:6, col:31> 'int' contains-errors '=='
    |   | | |-CallExpr 0x14c92ce58 <col:6, col:26> '<dependent type>' contains-errors
    |   | | | |-DeclRefExpr 0x14c92cd48 <col:6> 'int ()' Function 0x14c92cc90 'ga_add_string' 'int ()'
    |   | | | |-UnaryOperator 0x14c92ce40 <col:20, col:21> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | | | | `-RecoveryExpr 0x14c92ce20 <col:21> '<dependent type>' contains-errors lvalue
    |   | | | `-DeclRefExpr 0x14c92cd98 <col:25> 'char *' lvalue ParmVar 0x14c912da8 'p' 'char *'
    |   | | `-RecoveryExpr 0x14c92ce88 <col:31> '<dependent type>' contains-errors lvalue
    |   | `-ReturnStmt 0x14c92d340 <line:13:6, col:13>
    |   |   `-ImplicitCastExpr 0x14c92cf00 <col:13> 'int' <PointerToIntegral>
    |   |     `-ImplicitCastExpr 0x14c92cee8 <col:13> 'char *' <LValueToRValue>
    |   |       `-DeclRefExpr 0x14c92cec8 <col:13> 'char *' lvalue Var 0x14c9130b8 'retp' 'char *'
    |   |-IfStmt 0x14c92f438 <line:17:2, line:33:6>
    |   | |-BinaryOperator 0x14c92ec10 <line:17:6, col:26> 'int' '!='
    |   | | |-ImplicitCastExpr 0x14c92ebf8 <col:6, col:21> 'int' <IntegralCast>
    |   | | | `-ImplicitCastExpr 0x14c92ebe0 <col:6, col:21> 'char' <LValueToRValue>
    |   | | |   `-ArraySubscriptExpr 0x14c92eba8 <col:6, col:21> 'char' lvalue
    |   | | |     |-ImplicitCastExpr 0x14c92eb90 <col:6> 'char *' <LValueToRValue>
    |   | | |     | `-DeclRefExpr 0x14c92d370 <col:6> 'char *' lvalue ParmVar 0x14c912da8 'p' 'char *'
    |   | | |     `-BinaryOperator 0x14c92eb70 <col:8, col:20> 'int' '-'
    |   | | |       |-CallExpr 0x14c92eb10 <col:8, col:16> 'int'
    |   | | |       | |-ImplicitCastExpr 0x14c92eaf8 <col:8> 'int (*)()' <FunctionToPointerDecay>
    |   | | |       | | `-DeclRefExpr 0x14c92eab8 <col:8> 'int ()' Function 0x14c92ea00 'STRLEN' 'int ()'
    |   | | |       | `-ImplicitCastExpr 0x14c92eb38 <col:15> 'char *' <LValueToRValue>
    |   | | |       |   `-DeclRefExpr 0x14c92ead8 <col:15> 'char *' lvalue ParmVar 0x14c912da8 'p' 'char *'
    |   | | |       `-IntegerLiteral 0x14c92eb50 <col:20> 'int' 1
    |   | | `-CharacterLiteral 0x14c92ebc8 <col:26> 'int' 125
    |   | `-ForStmt 0x14c92f400 <line:20:6, line:33:6>
    |   |   |-<<<NULL>>>
    |   |   |-<<<NULL>>>
    |   |   |-<<<NULL>>>
    |   |   |-<<<NULL>>>
    |   |   `-CompoundStmt 0x14c92f3d0 <line:21:6, line:33:6>
    |   |     |-CallExpr 0x14c92ed68 <line:22:3, col:16> 'int' contains-errors
    |   |     | |-ImplicitCastExpr 0x14c92ed50 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |   |     | | `-DeclRefExpr 0x14c92ed10 <col:3> 'int ()' Function 0x14c92ec58 'vim_free' 'int ()'
    |   |     | `-ImplicitCastExpr 0x14c92ed90 <col:12> 'char *' contains-errors <LValueToRValue>
    |   |     |   `-DeclRefExpr 0x14c92ed30 <col:12> 'char *' contains-errors lvalue Var 0x14c92ca48 'line' 'char *'
    |   |     |-IfStmt 0x14c92f110 <line:23:3, line:28:3>
    |   |     | |-RecoveryExpr 0x14c92eed0 <line:23:7, line:24:40> '_Bool' contains-errors
    |   |     | `-CompoundStmt 0x14c92f0f8 <line:25:3, line:28:3>
    |   |     |   `-BreakStmt 0x14c92f0f0 <line:27:7>
    |   |     |-IfStmt 0x14c92f198 <line:29:3, line:30:7>
    |   |     | |-RecoveryExpr 0x14c92f170 <line:29:7, col:35> '_Bool' contains-errors
    |   |     | `-BreakStmt 0x14c92f190 <line:30:7>
    |   |     `-IfStmt 0x14c92f3b0 <line:31:3, line:32:7>
    |   |       |-BinaryOperator 0x14c92f388 <line:31:7, col:27> 'int' contains-errors '=='
    |   |       | |-RecoveryExpr 0x14c92f360 <col:7, col:22> '<dependent type>' contains-errors lvalue
    |   |       | | `-CallExpr 0x14c92f320 <col:8, col:22> 'int' contains-errors
    |   |       | |   |-ImplicitCastExpr 0x14c92f308 <col:8> 'int (*)()' <FunctionToPointerDecay>
    |   |       | |   | `-DeclRefExpr 0x14c92f1b8 <col:8> 'int ()' Function 0x14c92c470 'skipwhite' 'int ()'
    |   |       | |   `-ImplicitCastExpr 0x14c92f348 <col:18> 'char *' contains-errors <LValueToRValue>
    |   |       | |     `-DeclRefExpr 0x14c92f1d8 <col:18> 'char *' contains-errors lvalue Var 0x14c92ca48 'line' 'char *'
    |   |       | `-CharacterLiteral 0x14c92f278 <col:27> 'int' 125
    |   |       `-BreakStmt 0x14c92f3a8 <line:32:7>
    |   `-CallExpr 0x14c92f4b0 <line:34:2, col:15> 'int' contains-errors
    |     |-ImplicitCastExpr 0x14c92f498 <col:2> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x14c92f458 <col:2> 'int ()' Function 0x14c92ec58 'vim_free' 'int ()'
    |     `-ImplicitCastExpr 0x14c92f4d8 <col:11> 'char *' contains-errors <LValueToRValue>
    |       `-DeclRefExpr 0x14c92f478 <col:11> 'char *' contains-errors lvalue Var 0x14c92ca48 'line' 'char *'
    `-ReturnStmt 0x14c92f8b0 <line:39:5, col:12>
      `-ImplicitCastExpr 0x14c92f898 <col:12> 'int' <PointerToIntegral>
        `-ImplicitCastExpr 0x14c92f880 <col:12> 'char *' <LValueToRValue>
          `-DeclRefExpr 0x14c92f860 <col:12> 'char *' lvalue Var 0x14c9130b8 'retp' 'char *'
