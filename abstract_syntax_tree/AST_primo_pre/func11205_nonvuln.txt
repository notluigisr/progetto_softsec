`-FunctionDecl 0x13b9281f8  line:1:8 invalid MakeUID 'int (unsigned int *)'
  |-ParmVarDecl 0x13b928128 <col:16, col:30> col:30 used seed 'unsigned int *'
  `-CompoundStmt 0x13c008918 <col:36, line:35:1>
    |-ForStmt 0x13c008898 <line:8:3, line:32:3>
    | |-DeclStmt 0x13b928348 <line:8:8, col:17>
    | | `-VarDecl 0x13b9282c0 <col:8, col:16> col:12 used i 'int' cinit
    | |   `-IntegerLiteral 0x13b928328 <col:16> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x13b9283b8 <col:19, col:23> 'int' '<'
    | | |-ImplicitCastExpr 0x13b9283a0 <col:19> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x13b928360 <col:19> 'int' lvalue Var 0x13b9282c0 'i' 'int'
    | | `-IntegerLiteral 0x13b928380 <col:23> 'int' 7
    | |-UnaryOperator 0x13b9283f8 <col:26, col:28> 'int' prefix '++'
    | | `-DeclRefExpr 0x13b9283d8 <col:28> 'int' lvalue Var 0x13b9282c0 'i' 'int'
    | `-CompoundStmt 0x13c008878 <col:31, line:32:3>
    |   |-DeclStmt 0x13b9286d8 <line:27:5, col:34>
    |   | `-VarDecl 0x13b928448 <col:5, col:17> col:17 invalid nn 'const int'
    |   `-DeclStmt 0x13c008840 <line:29:5, col:37>
    |     `-VarDecl 0x13b928708 <col:5, col:17> col:17 invalid n 'const int'
    `-ReturnStmt 0x13c008908 <line:34:3, col:10>
      `-RecoveryExpr 0x13c0088e8 <col:10> '<dependent type>' contains-errors lvalue
