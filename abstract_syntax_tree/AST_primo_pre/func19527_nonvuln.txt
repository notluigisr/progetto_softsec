`-FunctionDecl 0x15190e3a8  line:1:1 check_uuid 'int (const char *)'
  |-ParmVarDecl 0x15190e2d8 <col:12, col:24> col:24 used uuid 'const char *'
  `-CompoundStmt 0x1510146e8 <line:2:1, line:10:1>
    |-DeclStmt 0x15190e520 <line:3:4, col:17>
    | `-VarDecl 0x15190e4b8 <col:4, col:16> col:16 used p 'const char *'
    |-ForStmt 0x151014668 <line:5:4, line:8:6>
    | |-BinaryOperator 0x15190e590 <line:5:9, col:13> 'const char *' '='
    | | |-DeclRefExpr 0x15190e538 <col:9> 'const char *' lvalue Var 0x15190e4b8 'p' 'const char *'
    | | `-ImplicitCastExpr 0x15190e578 <col:13> 'const char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x15190e558 <col:13> 'const char *' lvalue ParmVar 0x15190e2d8 'uuid' 'const char *'
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x15190e628 <col:19, col:22> 'char' <LValueToRValue>
    | | `-ArraySubscriptExpr 0x15190e608 <col:19, col:22> 'const char' lvalue
    | |   |-ImplicitCastExpr 0x15190e5f0 <col:19> 'const char *' <LValueToRValue>
    | |   | `-DeclRefExpr 0x15190e5b0 <col:19> 'const char *' lvalue Var 0x15190e4b8 'p' 'const char *'
    | |   `-IntegerLiteral 0x15190e5d0 <col:21> 'int' 0
    | |-UnaryOperator 0x15190e660 <col:25, col:26> 'const char *' postfix '++'
    | | `-DeclRefExpr 0x15190e640 <col:25> 'const char *' lvalue Var 0x15190e4b8 'p' 'const char *'
    | `-CompoundStmt 0x151014650 <line:6:6, line:8:6>
    |   `-IfStmt 0x151014630 <line:7:9, col:62>
    |     |-BinaryOperator 0x15190e9c0 <col:13, col:52> 'int' '&&'
    |     | |-ParenExpr 0x15190e8c8 <col:13, col:37> 'int'
    |     | | `-UnaryOperator 0x15190e8b0 <col:14, col:36> 'int' prefix '!' cannot overflow
    |     | |   `-CallExpr 0x15190e858 <col:15, col:36> 'int'
    |     | |     |-ImplicitCastExpr 0x15190e840 <col:15> 'int (*)()' <FunctionToPointerDecay>
    |     | |     | `-DeclRefExpr 0x15190e7a0 <col:15> 'int ()' Function 0x15190e6e8 'check_is_alpha_num' 'int ()'
    |     | |     `-ImplicitCastExpr 0x15190e898 <col:34, col:35> 'int' <IntegralCast>
    |     | |       `-ImplicitCastExpr 0x15190e880 <col:34, col:35> 'char' <LValueToRValue>
    |     | |         `-UnaryOperator 0x15190e7f8 <col:34, col:35> 'const char' lvalue prefix '*' cannot overflow
    |     | |           `-ImplicitCastExpr 0x15190e7e0 <col:35> 'const char *' <LValueToRValue>
    |     | |             `-DeclRefExpr 0x15190e7c0 <col:35> 'const char *' lvalue Var 0x15190e4b8 'p' 'const char *'
    |     | `-ParenExpr 0x15190e9a0 <col:42, col:52> 'int'
    |     |   `-BinaryOperator 0x15190e980 <col:43, col:49> 'int' '!='
    |     |     |-ImplicitCastExpr 0x15190e968 <col:43, col:44> 'int' <IntegralCast>
    |     |     | `-ImplicitCastExpr 0x15190e950 <col:43, col:44> 'char' <LValueToRValue>
    |     |     |   `-UnaryOperator 0x15190e920 <col:43, col:44> 'const char' lvalue prefix '*' cannot overflow
    |     |     |     `-ImplicitCastExpr 0x15190e908 <col:44> 'const char *' <LValueToRValue>
    |     |     |       `-DeclRefExpr 0x15190e8e8 <col:44> 'const char *' lvalue Var 0x15190e4b8 'p' 'const char *'
    |     |     `-CharacterLiteral 0x15190e938 <col:49> 'int' 45
    |     `-ReturnStmt 0x151014620 <col:55, col:62>
    |       `-RecoveryExpr 0x151014600 <col:62> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x1510146d8 <line:9:4, col:11>
      `-RecoveryExpr 0x1510146b8 <col:11> '<dependent type>' contains-errors lvalue
