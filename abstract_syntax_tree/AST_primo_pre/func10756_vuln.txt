`-FunctionDecl 0x15700ddc8  line:1:1 skip_string 'int (char *)'
  |-ParmVarDecl 0x15700dcf0 <col:13, col:21> col:21 used p 'char *'
  `-CompoundStmt 0x15702b678 <line:2:1, line:63:1>
    |-DeclStmt 0x15700df40 <line:3:5, col:14>
    | `-VarDecl 0x15700ded8 <col:5, col:13> col:13 used i 'int'
    |-ForStmt 0x15702b508 <line:6:5, line:59:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator 0x15700df78 <line:6:15, col:17> 'char *' prefix '++'
    | | `-DeclRefExpr 0x15700df58 <col:17> 'char *' lvalue ParmVar 0x15700dcf0 'p' 'char *'
    | `-CompoundStmt 0x15702b4e8 <line:7:5, line:59:5>
    |   |-IfStmt 0x15702b4b0 <line:8:2, line:57:2> has_else
    |   | |-BinaryOperator 0x15700e050 <line:8:6, col:14> 'int' '=='
    |   | | |-ImplicitCastExpr 0x15700e038 <col:6, col:9> 'int' <IntegralCast>
    |   | | | `-ImplicitCastExpr 0x15700e020 <col:6, col:9> 'char' <LValueToRValue>
    |   | | |   `-ArraySubscriptExpr 0x15700dfe8 <col:6, col:9> 'char' lvalue
    |   | | |     |-ImplicitCastExpr 0x15700dfd0 <col:6> 'char *' <LValueToRValue>
    |   | | |     | `-DeclRefExpr 0x15700df90 <col:6> 'char *' lvalue ParmVar 0x15700dcf0 'p' 'char *'
    |   | | |     `-IntegerLiteral 0x15700dfb0 <col:8> 'int' 0
    |   | | `-CharacterLiteral 0x15700e008 <col:14> 'int' 39
    |   | |-CompoundStmt 0x157026d40 <line:9:2, line:24:2>
    |   | | |-IfStmt 0x15700e1d8 <line:10:6, line:11:3>
    |   | | | |-BinaryOperator 0x15700e1b0 <line:10:10, col:18> 'int' contains-errors '=='
    |   | | | | |-ArraySubscriptExpr 0x15700e170 <col:10, col:13> 'char' lvalue
    |   | | | | | |-ImplicitCastExpr 0x15700e158 <col:10> 'char *' <LValueToRValue>
    |   | | | | | | `-DeclRefExpr 0x15700e070 <col:10> 'char *' lvalue ParmVar 0x15700dcf0 'p' 'char *'
    |   | | | | | `-IntegerLiteral 0x15700e090 <col:12> 'int' 1
    |   | | | | `-RecoveryExpr 0x15700e190 <col:18> '<dependent type>' contains-errors lvalue
    |   | | | `-BreakStmt 0x15700e1d0 <line:11:3>
    |   | | |-BinaryOperator 0x15700e238 <line:12:6, col:10> 'int' '='
    |   | | | |-DeclRefExpr 0x15700e1f8 <col:6> 'int' lvalue Var 0x15700ded8 'i' 'int'
    |   | | | `-IntegerLiteral 0x15700e218 <col:10> 'int' 2
    |   | | |-IfStmt 0x157026b58 <line:13:6, line:18:6>
    |   | | | |-BinaryOperator 0x1570267e0 <line:13:10, col:34> 'int' contains-errors '&&'
    |   | | | | |-BinaryOperator 0x157026748 <col:10, col:18> 'int' '=='
    |   | | | | | |-ImplicitCastExpr 0x157026730 <col:10, col:13> 'int' <IntegralCast>
    |   | | | | | | `-ImplicitCastExpr 0x157026718 <col:10, col:13> 'char' <LValueToRValue>
    |   | | | | | |   `-ArraySubscriptExpr 0x1570266f8 <col:10, col:13> 'char' lvalue
    |   | | | | | |     |-ImplicitCastExpr 0x1570266e0 <col:10> 'char *' <LValueToRValue>
    |   | | | | | |     | `-DeclRefExpr 0x15700e258 <col:10> 'char *' lvalue ParmVar 0x15700dcf0 'p' 'char *'
    |   | | | | | |     `-IntegerLiteral 0x15700e278 <col:12> 'int' 1
    |   | | | | | `-CharacterLiteral 0x15700e2d0 <col:18> 'int' 92
    |   | | | | `-BinaryOperator 0x1570267c0 <col:26, col:34> 'int' contains-errors '!='
    |   | | | |   |-ArraySubscriptExpr 0x157026780 <col:26, col:29> 'char' lvalue
    |   | | | |   | |-ImplicitCastExpr 0x157026768 <col:26> 'char *' <LValueToRValue>
    |   | | | |   | | `-DeclRefExpr 0x15700e338 <col:26> 'char *' lvalue ParmVar 0x15700dcf0 'p' 'char *'
    |   | | | |   | `-IntegerLiteral 0x15700e358 <col:28> 'int' 2
    |   | | | |   `-RecoveryExpr 0x1570267a0 <col:34> '<dependent type>' contains-errors lvalue
    |   | | | `-CompoundStmt 0x157026b38 <line:14:6, line:18:6>
    |   | | |   |-UnaryOperator 0x157026820 <line:15:3, col:5> 'int' prefix '++'
    |   | | |   | `-DeclRefExpr 0x157026800 <col:5> 'int' lvalue Var 0x15700ded8 'i' 'int'
    |   | | |   `-WhileStmt 0x157026b18 <line:16:3, line:17:9>
    |   | | |     |-CallExpr 0x157026a88 <line:16:10, col:30> 'int'
    |   | | |     | |-ImplicitCastExpr 0x157026a70 <col:10> 'int (*)()' <FunctionToPointerDecay>
    |   | | |     | | `-DeclRefExpr 0x157026950 <col:10> 'int ()' Function 0x157026898 'vim_isdigit' 'int ()'
    |   | | |     | `-ImplicitCastExpr 0x157026ac8 <col:22, col:29> 'int' <IntegralCast>
    |   | | |     |   `-ImplicitCastExpr 0x157026ab0 <col:22, col:29> 'char' <LValueToRValue>
    |   | | |     |     `-ArraySubscriptExpr 0x157026a20 <col:22, col:29> 'char' lvalue
    |   | | |     |       |-ImplicitCastExpr 0x157026a08 <col:22> 'char *' <LValueToRValue>
    |   | | |     |       | `-DeclRefExpr 0x157026970 <col:22> 'char *' lvalue ParmVar 0x15700dcf0 'p' 'char *'
    |   | | |     |       `-BinaryOperator 0x1570269e8 <col:24, col:28> 'int' '-'
    |   | | |     |         |-ImplicitCastExpr 0x1570269d0 <col:24> 'int' <LValueToRValue>
    |   | | |     |         | `-DeclRefExpr 0x157026990 <col:24> 'int' lvalue Var 0x15700ded8 'i' 'int'
    |   | | |     |         `-IntegerLiteral 0x1570269b0 <col:28> 'int' 1
    |   | | |     `-UnaryOperator 0x157026b00 <line:17:7, col:9> 'int' prefix '++'
    |   | | |       `-DeclRefExpr 0x157026ae0 <col:9> 'int' lvalue Var 0x15700ded8 'i' 'int'
    |   | | `-IfStmt 0x157026d20 <line:19:6, line:23:6>
    |   | |   |-BinaryOperator 0x157026c50 <line:19:10, col:18> 'int' '=='
    |   | |   | |-ImplicitCastExpr 0x157026c38 <col:10, col:13> 'int' <IntegralCast>
    |   | |   | | `-ImplicitCastExpr 0x157026c20 <col:10, col:13> 'char' <LValueToRValue>
    |   | |   | |   `-ArraySubscriptExpr 0x157026be8 <col:10, col:13> 'char' lvalue
    |   | |   | |     |-ImplicitCastExpr 0x157026bb8 <col:10> 'char *' <LValueToRValue>
    |   | |   | |     | `-DeclRefExpr 0x157026b78 <col:10> 'char *' lvalue ParmVar 0x15700dcf0 'p' 'char *'
    |   | |   | |     `-ImplicitCastExpr 0x157026bd0 <col:12> 'int' <LValueToRValue>
    |   | |   | |       `-DeclRefExpr 0x157026b98 <col:12> 'int' lvalue Var 0x15700ded8 'i' 'int'
    |   | |   | `-CharacterLiteral 0x157026c08 <col:18> 'int' 39
    |   | |   `-CompoundStmt 0x157026d00 <line:20:6, line:23:6>
    |   | |     |-CompoundAssignOperator 0x157026cc8 <line:21:3, col:8> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
    |   | |     | |-DeclRefExpr 0x157026c70 <col:3> 'char *' lvalue ParmVar 0x15700dcf0 'p' 'char *'
    |   | |     | `-ImplicitCastExpr 0x157026cb0 <col:8> 'int' <LValueToRValue>
    |   | |     |   `-DeclRefExpr 0x157026c90 <col:8> 'int' lvalue Var 0x15700ded8 'i' 'int'
    |   | |     `-ContinueStmt 0x157026cf8 <line:22:3>
    |   | `-IfStmt 0x15702b480 <line:25:7, line:57:2> has_else
    |   |   |-BinaryOperator 0x157026e30 <line:25:11, col:19> 'int' '=='
    |   |   | |-ImplicitCastExpr 0x157026e18 <col:11, col:14> 'int' <IntegralCast>
    |   |   | | `-ImplicitCastExpr 0x157026e00 <col:11, col:14> 'char' <LValueToRValue>
    |   |   | |   `-ArraySubscriptExpr 0x157026dc8 <col:11, col:14> 'char' lvalue
    |   |   | |     |-ImplicitCastExpr 0x157026db0 <col:11> 'char *' <LValueToRValue>
    |   |   | |     | `-DeclRefExpr 0x157026d70 <col:11> 'char *' lvalue ParmVar 0x15700dcf0 'p' 'char *'
    |   |   | |     `-IntegerLiteral 0x157026d90 <col:13> 'int' 0
    |   |   | `-CharacterLiteral 0x157026de8 <col:19> 'int' 34
    |   |   |-CompoundStmt 0x1570275a8 <line:26:2, line:36:2>
    |   |   | |-ForStmt 0x157027468 <line:27:6, line:33:6>
    |   |   | | |-UnaryOperator 0x157026e70 <line:27:11, col:13> 'char *' prefix '++'
    |   |   | | | `-DeclRefExpr 0x157026e50 <col:13> 'char *' lvalue ParmVar 0x15700dcf0 'p' 'char *'
    |   |   | | |-<<<NULL>>>
    |   |   | | |-ImplicitCastExpr 0x157026f00 <col:16, col:19> 'char' <LValueToRValue>
    |   |   | | | `-ArraySubscriptExpr 0x157026ee0 <col:16, col:19> 'char' lvalue
    |   |   | | |   |-ImplicitCastExpr 0x157026ec8 <col:16> 'char *' <LValueToRValue>
    |   |   | | |   | `-DeclRefExpr 0x157026e88 <col:16> 'char *' lvalue ParmVar 0x15700dcf0 'p' 'char *'
    |   |   | | |   `-IntegerLiteral 0x157026ea8 <col:18> 'int' 0
    |   |   | | |-UnaryOperator 0x157026f38 <col:22, col:24> 'char *' prefix '++'
    |   |   | | | `-DeclRefExpr 0x157026f18 <col:24> 'char *' lvalue ParmVar 0x15700dcf0 'p' 'char *'
    |   |   | | `-CompoundStmt 0x157027450 <line:28:6, line:33:6>
    |   |   | |   `-IfStmt 0x157027420 <line:29:3, line:32:7> has_else
    |   |   | |     |-BinaryOperator 0x1570272c0 <line:29:7, col:31> 'int' contains-errors '&&'
    |   |   | |     | |-BinaryOperator 0x157027228 <col:7, col:15> 'int' '=='
    |   |   | |     | | |-ImplicitCastExpr 0x157027210 <col:7, col:10> 'int' <IntegralCast>
    |   |   | |     | | | `-ImplicitCastExpr 0x1570271f8 <col:7, col:10> 'char' <LValueToRValue>
    |   |   | |     | | |   `-ArraySubscriptExpr 0x1570271d8 <col:7, col:10> 'char' lvalue
    |   |   | |     | | |     |-ImplicitCastExpr 0x1570271c0 <col:7> 'char *' <LValueToRValue>
    |   |   | |     | | |     | `-DeclRefExpr 0x157026f50 <col:7> 'char *' lvalue ParmVar 0x15700dcf0 'p' 'char *'
    |   |   | |     | | |     `-IntegerLiteral 0x157026f70 <col:9> 'int' 0
    |   |   | |     | | `-CharacterLiteral 0x157026fc8 <col:15> 'int' 92
    |   |   | |     | `-BinaryOperator 0x1570272a0 <col:23, col:31> 'int' contains-errors '!='
    |   |   | |     |   |-ArraySubscriptExpr 0x157027260 <col:23, col:26> 'char' lvalue
    |   |   | |     |   | |-ImplicitCastExpr 0x157027248 <col:23> 'char *' <LValueToRValue>
    |   |   | |     |   | | `-DeclRefExpr 0x157027030 <col:23> 'char *' lvalue ParmVar 0x15700dcf0 'p' 'char *'
    |   |   | |     |   | `-IntegerLiteral 0x157027050 <col:25> 'int' 1
    |   |   | |     |   `-RecoveryExpr 0x157027280 <col:31> '<dependent type>' contains-errors lvalue
    |   |   | |     |-UnaryOperator 0x157027300 <line:30:7, col:9> 'char *' prefix '++'
    |   |   | |     | `-DeclRefExpr 0x1570272e0 <col:9> 'char *' lvalue ParmVar 0x15700dcf0 'p' 'char *'
    |   |   | |     `-IfStmt 0x157027400 <line:31:8, line:32:7>
    |   |   | |       |-BinaryOperator 0x1570273d8 <line:31:12, col:20> 'int' '=='
    |   |   | |       | |-ImplicitCastExpr 0x1570273c0 <col:12, col:15> 'int' <IntegralCast>
    |   |   | |       | | `-ImplicitCastExpr 0x1570273a8 <col:12, col:15> 'char' <LValueToRValue>
    |   |   | |       | |   `-ArraySubscriptExpr 0x157027370 <col:12, col:15> 'char' lvalue
    |   |   | |       | |     |-ImplicitCastExpr 0x157027358 <col:12> 'char *' <LValueToRValue>
    |   |   | |       | |     | `-DeclRefExpr 0x157027318 <col:12> 'char *' lvalue ParmVar 0x15700dcf0 'p' 'char *'
    |   |   | |       | |     `-IntegerLiteral 0x157027338 <col:14> 'int' 0
    |   |   | |       | `-CharacterLiteral 0x157027390 <col:20> 'int' 34
    |   |   | |       `-BreakStmt 0x1570273f8 <line:32:7>
    |   |   | `-IfStmt 0x157027588 <line:34:6, line:35:3>
    |   |   |   |-BinaryOperator 0x157027560 <line:34:10, col:18> 'int' '=='
    |   |   |   | |-ImplicitCastExpr 0x157027548 <col:10, col:13> 'int' <IntegralCast>
    |   |   |   | | `-ImplicitCastExpr 0x157027530 <col:10, col:13> 'char' <LValueToRValue>
    |   |   |   | |   `-ArraySubscriptExpr 0x1570274f8 <col:10, col:13> 'char' lvalue
    |   |   |   | |     |-ImplicitCastExpr 0x1570274e0 <col:10> 'char *' <LValueToRValue>
    |   |   |   | |     | `-DeclRefExpr 0x1570274a0 <col:10> 'char *' lvalue ParmVar 0x15700dcf0 'p' 'char *'
    |   |   |   | |     `-IntegerLiteral 0x1570274c0 <col:12> 'int' 0
    |   |   |   | `-CharacterLiteral 0x157027518 <col:18> 'int' 34
    |   |   |   `-ContinueStmt 0x157027580 <line:35:3>
    |   |   `-IfStmt 0x15702b460 <line:37:7, line:57:2>
    |   |     |-BinaryOperator 0x157028fa0 <line:37:11, col:34> 'int' '&&'
    |   |     | |-BinaryOperator 0x157028ea0 <col:11, col:19> 'int' '=='
    |   |     | | |-ImplicitCastExpr 0x157028e88 <col:11, col:14> 'int' <IntegralCast>
    |   |     | | | `-ImplicitCastExpr 0x157028e70 <col:11, col:14> 'char' <LValueToRValue>
    |   |     | | |   `-ArraySubscriptExpr 0x157028e38 <col:11, col:14> 'char' lvalue
    |   |     | | |     |-ImplicitCastExpr 0x157028e20 <col:11> 'char *' <LValueToRValue>
    |   |     | | |     | `-DeclRefExpr 0x1570275c8 <col:11> 'char *' lvalue ParmVar 0x15700dcf0 'p' 'char *'
    |   |     | | |     `-IntegerLiteral 0x157028e00 <col:13> 'int' 0
    |   |     | | `-CharacterLiteral 0x157028e58 <col:19> 'int' 82
    |   |     | `-BinaryOperator 0x157028f80 <col:26, col:34> 'int' '=='
    |   |     |   |-ImplicitCastExpr 0x157028f68 <col:26, col:29> 'int' <IntegralCast>
    |   |     |   | `-ImplicitCastExpr 0x157028f50 <col:26, col:29> 'char' <LValueToRValue>
    |   |     |   |   `-ArraySubscriptExpr 0x157028f18 <col:26, col:29> 'char' lvalue
    |   |     |   |     |-ImplicitCastExpr 0x157028f00 <col:26> 'char *' <LValueToRValue>
    |   |     |   |     | `-DeclRefExpr 0x157028ec0 <col:26> 'char *' lvalue ParmVar 0x15700dcf0 'p' 'char *'
    |   |     |   |     `-IntegerLiteral 0x157028ee0 <col:28> 'int' 1
    |   |     |   `-CharacterLiteral 0x157028f38 <col:34> 'int' 34
    |   |     `-CompoundStmt 0x15702b438 <line:38:2, line:57:2>
    |   |       |-DeclStmt 0x1570290b8 <line:40:6, col:27>
    |   |       | `-VarDecl 0x157028fd8 <col:6, col:26> col:14 used delim 'char *' cinit
    |   |       |   `-BinaryOperator 0x157029098 <col:22, col:26> 'char *' '+'
    |   |       |     |-ImplicitCastExpr 0x157029080 <col:22> 'char *' <LValueToRValue>
    |   |       |     | `-DeclRefExpr 0x157029040 <col:22> 'char *' lvalue ParmVar 0x15700dcf0 'p' 'char *'
    |   |       |     `-IntegerLiteral 0x157029060 <col:26> 'int' 2
    |   |       |-DeclStmt 0x157029720 <line:41:6, col:44>
    |   |       | `-VarDecl 0x1570290e8 <col:6, col:43> col:14 used paren 'char *' cinit
    |   |       |   `-ImplicitCastExpr 0x1570292e8 <col:22, col:43> 'char *' <IntegralToPointer>
    |   |       |     `-CallExpr 0x1570292a0 <col:22, col:43> 'int'
    |   |       |       |-ImplicitCastExpr 0x157029288 <col:22> 'int (*)()' <FunctionToPointerDecay>
    |   |       |       | `-DeclRefExpr 0x157029230 <col:22> 'int ()' Function 0x157029178 'vim_strchr' 'int ()'
    |   |       |       |-ImplicitCastExpr 0x1570292d0 <col:33> 'char *' <LValueToRValue>
    |   |       |       | `-DeclRefExpr 0x157029250 <col:33> 'char *' lvalue Var 0x157028fd8 'delim' 'char *'
    |   |       |       `-CharacterLiteral 0x157029270 <col:40> 'int' 40
    |   |       `-IfStmt 0x15702b418 <line:43:6, line:56:6>
    |   |         |-BinaryOperator 0x1570297b0 <line:43:10, col:19> 'int' contains-errors '!='
    |   |         | |-DeclRefExpr 0x157029738 <col:10> 'char *' lvalue Var 0x1570290e8 'paren' 'char *'
    |   |         | `-RecoveryExpr 0x157029790 <col:19> '<dependent type>' contains-errors lvalue
    |   |         `-CompoundStmt 0x15702b3f0 <line:44:6, line:56:6>
    |   |           |-RecoveryExpr 0x157029970 <line:45:3, col:30> '<dependent type>' contains-errors lvalue
    |   |           | |-UnaryExprOrTypeTraitExpr 0x157029900 <col:3, col:10> 'unsigned long' contains-errors sizeof
    |   |           | | `-RecoveryExpr 0x1570298e0 <col:10> '<dependent type>' contains-errors lvalue
    |   |           | `-BinaryOperator 0x157029950 <col:22, col:30> 'long' '-'
    |   |           |   |-ImplicitCastExpr 0x157029920 <col:22> 'char *' <LValueToRValue>
    |   |           |   | `-DeclRefExpr 0x157029808 <col:22> 'char *' lvalue Var 0x1570290e8 'paren' 'char *'
    |   |           |   `-ImplicitCastExpr 0x157029938 <col:30> 'char *' <LValueToRValue>
    |   |           |     `-DeclRefExpr 0x157029828 <col:30> 'char *' lvalue Var 0x157028fd8 'delim' 'char *'
    |   |           |-ForStmt 0x15702b2b0 <line:47:3, line:53:7>
    |   |           | |-CompoundAssignOperator 0x1570299e0 <line:47:8, col:13> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
    |   |           | | |-DeclRefExpr 0x1570299a0 <col:8> 'char *' lvalue ParmVar 0x15700dcf0 'p' 'char *'
    |   |           | | `-IntegerLiteral 0x1570299c0 <col:13> 'int' 3
    |   |           | |-<<<NULL>>>
    |   |           | |-ImplicitCastExpr 0x157029a60 <col:16, col:17> 'char' <LValueToRValue>
    |   |           | | `-UnaryOperator 0x157029a48 <col:16, col:17> 'char' lvalue prefix '*' cannot overflow
    |   |           | |   `-ImplicitCastExpr 0x157029a30 <col:17> 'char *' <LValueToRValue>
    |   |           | |     `-DeclRefExpr 0x157029a10 <col:17> 'char *' lvalue ParmVar 0x15700dcf0 'p' 'char *'
    |   |           | |-UnaryOperator 0x157029a98 <col:20, col:22> 'char *' prefix '++'
    |   |           | | `-DeclRefExpr 0x157029a78 <col:22> 'char *' lvalue ParmVar 0x15700dcf0 'p' 'char *'
    |   |           | `-IfStmt 0x15702b290 <line:48:7, line:53:7>
    |   |           |   |-RecoveryExpr 0x15702b130 <line:48:11, line:49:31> '_Bool' contains-errors
    |   |           |   `-CompoundStmt 0x15702b270 <line:50:7, line:53:7>
    |   |           |     |-CompoundAssignOperator 0x15702b238 <line:51:4, col:21> 'char *' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    |   |           |     | |-DeclRefExpr 0x15702b150 <col:4> 'char *' lvalue ParmVar 0x15700dcf0 'p' 'char *'
    |   |           |     | `-BinaryOperator 0x15702b218 <col:9, col:21> '<dependent type>' contains-errors '+'
    |   |           |     |   |-RecoveryExpr 0x15702b1f8 <col:9> '<dependent type>' contains-errors lvalue
    |   |           |     |   `-IntegerLiteral 0x15702b188 <col:21> 'int' 1
    |   |           |     `-BreakStmt 0x15702b268 <line:52:4>
    |   |           `-IfStmt 0x15702b3d0 <line:54:3, line:55:7>
    |   |             |-BinaryOperator 0x15702b3a8 <line:54:7, col:15> 'int' '=='
    |   |             | |-ImplicitCastExpr 0x15702b390 <col:7, col:10> 'int' <IntegralCast>
    |   |             | | `-ImplicitCastExpr 0x15702b378 <col:7, col:10> 'char' <LValueToRValue>
    |   |             | |   `-ArraySubscriptExpr 0x15702b340 <col:7, col:10> 'char' lvalue
    |   |             | |     |-ImplicitCastExpr 0x15702b328 <col:7> 'char *' <LValueToRValue>
    |   |             | |     | `-DeclRefExpr 0x15702b2e8 <col:7> 'char *' lvalue ParmVar 0x15700dcf0 'p' 'char *'
    |   |             | |     `-IntegerLiteral 0x15702b308 <col:9> 'int' 0
    |   |             | `-CharacterLiteral 0x15702b360 <col:15> 'int' 34
    |   |             `-ContinueStmt 0x15702b3c8 <line:55:7>
    |   `-BreakStmt 0x15702b4e0 <line:58:2>
    |-IfStmt 0x15702b5f8 <line:60:5, line:61:4>
    | |-UnaryOperator 0x15702b5a8 <line:60:9, col:11> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x15702b590 <col:10, col:11> 'char' <LValueToRValue>
    | |   `-UnaryOperator 0x15702b578 <col:10, col:11> 'char' lvalue prefix '*' cannot overflow
    | |     `-ImplicitCastExpr 0x15702b560 <col:11> 'char *' <LValueToRValue>
    | |       `-DeclRefExpr 0x15702b540 <col:11> 'char *' lvalue ParmVar 0x15700dcf0 'p' 'char *'
    | `-UnaryOperator 0x15702b5e0 <line:61:2, col:4> 'char *' prefix '--'
    |   `-DeclRefExpr 0x15702b5c0 <col:4> 'char *' lvalue ParmVar 0x15700dcf0 'p' 'char *'
    `-ReturnStmt 0x15702b668 <line:62:5, col:12>
      `-ImplicitCastExpr 0x15702b650 <col:12> 'int' <PointerToIntegral>
        `-ImplicitCastExpr 0x15702b638 <col:12> 'char *' <LValueToRValue>
          `-DeclRefExpr 0x15702b618 <col:12> 'char *' lvalue ParmVar 0x15700dcf0 'p' 'char *'
