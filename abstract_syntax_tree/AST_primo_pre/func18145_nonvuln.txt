`-FunctionDecl 0x154928288  line:1:5 invalid json_string_set 'int (int *, const char *)'
  |-ParmVarDecl 0x154928128 <col:21, col:29> col:29 invalid json 'int *'
  |-ParmVarDecl 0x1549281a8 <col:35, col:47> col:47 used value 'const char *'
  `-CompoundStmt 0x154941840 <line:2:1, line:7:1>
    |-IfStmt 0x154928680 <line:3:5, line:4:17>
    | |-BinaryOperator 0x154928618 <line:3:8, col:46> 'int' '||'
    | | |-UnaryOperator 0x154928378 <col:8, col:9> 'int' prefix '!' cannot overflow
    | | | `-ImplicitCastExpr 0x154928360 <col:9> 'const char *' <LValueToRValue>
    | | |   `-DeclRefExpr 0x154928340 <col:9> 'const char *' lvalue ParmVar 0x1549281a8 'value' 'const char *'
    | | `-UnaryOperator 0x154928600 <col:18, col:46> 'int' prefix '!' cannot overflow
    | |   `-CallExpr 0x1549285b8 <col:19, col:46> 'int'
    | |     |-ImplicitCastExpr 0x1549285a0 <col:19> 'int (*)()' <FunctionToPointerDecay>
    | |     | `-DeclRefExpr 0x1549284f0 <col:19> 'int ()' Function 0x154928438 'utf8_check_string' 'int ()'
    | |     |-ImplicitCastExpr 0x1549285e8 <col:37> 'const char *' <LValueToRValue>
    | |     | `-DeclRefExpr 0x154928510 <col:37> 'const char *' lvalue ParmVar 0x1549281a8 'value' 'const char *'
    | |     `-UnaryOperator 0x154928550 <col:44, col:45> 'int' prefix '-'
    | |       `-IntegerLiteral 0x154928530 <col:45> 'int' 1
    | `-ReturnStmt 0x154928670 <line:4:9, col:17>
    |   `-UnaryOperator 0x154928658 <col:16, col:17> 'int' prefix '-'
    |     `-IntegerLiteral 0x154928638 <col:17> 'int' 1
    `-ReturnStmt 0x154941830 <line:6:5, col:47>
      `-CallExpr 0x154941800 <col:12, col:47> '<dependent type>' contains-errors
        |-DeclRefExpr 0x154928780 <col:12> 'int ()' Function 0x1549286c8 'json_string_set_nocheck' 'int ()'
        |-RecoveryExpr 0x1549287a0 <col:36> '<dependent type>' contains-errors lvalue
        `-DeclRefExpr 0x1549287c0 <col:42> 'const char *' lvalue ParmVar 0x1549281a8 'value' 'const char *'
