`-FunctionDecl 0x12c80e278  line:1:12 invalid codeCompare 'int (int *, int *, int *, int, int, int, int, int, int)' static
  |-ParmVarDecl 0x12c80dd28 <line:2:3, col:10> col:10 invalid pParse 'int *'
  |-ParmVarDecl 0x12c80dda8 <line:3:3, col:9> col:9 invalid pLeft 'int *'
  |-ParmVarDecl 0x12c80de28 <line:4:3, col:9> col:9 invalid pRight 'int *'
  |-ParmVarDecl 0x12c80dea8 <line:5:3, col:7> col:7 used opcode 'int'
  |-ParmVarDecl 0x12c80df28 <line:6:3, col:7> col:7 used in1 'int'
  |-ParmVarDecl 0x12c80dfa8 <col:12, col:16> col:16 used in2 'int'
  |-ParmVarDecl 0x12c80e028 <line:7:3, col:7> col:7 used dest 'int'
  |-ParmVarDecl 0x12c80e0a8 <line:8:3, col:7> col:7 used jumpIfNull 'int'
  |-ParmVarDecl 0x12c80e128 <line:9:3, col:7> col:7 used isCommuted 'int'
  `-CompoundStmt 0x12c122ff0 <line:10:2, line:25:1>
    |-DeclStmt 0x12c80e3e8 <line:11:3, col:9>
    | `-VarDecl 0x12c80e380 <col:3, col:7> col:7 used p5 'int'
    |-DeclStmt 0x12c122680 <line:12:3, col:11>
    | `-VarDecl 0x12c122618 <col:3, col:7> col:7 used addr 'int'
    |-IfStmt 0x12c1229d0 <line:15:3, line:19:3> has_else
    | |-ImplicitCastExpr 0x12c1226d0 <line:15:7> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x12c1226b0 <col:7> 'int' lvalue ParmVar 0x12c80e128 'isCommuted' 'int'
    | |-CompoundStmt 0x12c1228f8 <col:19, line:17:3>
    | `-CompoundStmt 0x12c1229c0 <col:8, line:19:3>
    |-BinaryOperator 0x12c122bb8 <line:20:3, col:49> 'int' contains-errors '='
    | |-DeclRefExpr 0x12c122a00 <col:3> 'int' lvalue Var 0x12c80e380 'p5' 'int'
    | `-CallExpr 0x12c122b80 <col:8, col:49> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x12c122b00 <col:8> 'int ()' Function 0x12c122a48 'binaryCompareP5' 'int ()'
    |   |-RecoveryExpr 0x12c122b20 <col:24> '<dependent type>' contains-errors lvalue
    |   |-RecoveryExpr 0x12c122b40 <col:31> '<dependent type>' contains-errors lvalue
    |   `-DeclRefExpr 0x12c122b60 <col:39> 'int' lvalue ParmVar 0x12c80e0a8 'jumpIfNull' 'int'
    `-ReturnStmt 0x12c122fe0 <line:24:3, col:10>
      `-ImplicitCastExpr 0x12c122fc8 <col:10> 'int' <LValueToRValue>
        `-DeclRefExpr 0x12c122fa8 <col:10> 'int' lvalue Var 0x12c122618 'addr' 'int'
