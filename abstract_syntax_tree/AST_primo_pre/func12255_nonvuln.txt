`-FunctionDecl 0x14800de80  line:1:13 invalid do_free_upto 'void (int *, int *)' static
  |-ParmVarDecl 0x14800dd28 <col:26, col:31> col:31 referenced invalid f 'int *'
  |-ParmVarDecl 0x14800dda8 <col:34, col:39> col:39 invalid upto 'int *'
  `-CompoundStmt 0x1480275b0 <line:2:2, line:16:2>
    `-IfStmt 0x148027580 <line:3:2, line:15:17> has_else
      |-RecoveryExpr 0x14800df38 <line:3:6> '<dependent type>' contains-errors lvalue
      |-CompoundStmt 0x148027420 <line:4:3, line:13:3>
      | `-DoStmt 0x148027400 <line:6:3, line:12:24>
      |   |-CompoundStmt 0x14800e340 <line:7:4, line:11:4>
      |   | |-CallExpr 0x14800e258 <line:9:4, col:14> '<dependent type>' contains-errors
      |   | | |-DeclRefExpr 0x14800e218 <col:4> 'int ()' Function 0x14800e160 'BIO_free' 'int ()'
      |   | | `-RecoveryExpr 0x14800e238 <col:13> '<dependent type>' contains-errors lvalue
      |   | `-BinaryOperator 0x14800e320 <line:10:4, col:8> '<dependent type>' contains-errors '='
      |   |   |-RecoveryExpr 0x14800e2a0 <col:4> '<dependent type>' contains-errors lvalue
      |   |   | `-DeclRefExpr 0x14800e280 <col:4> 'int *' lvalue ParmVar 0x14800dd28 'f' 'int *'
      |   |   `-RecoveryExpr 0x14800e300 <col:8> '<dependent type>' contains-errors lvalue
      |   `-BinaryOperator 0x14800e3e0 <line:12:10, col:20> 'int' contains-errors '&&'
      |     |-RecoveryExpr 0x14800e360 <col:10> '<dependent type>' contains-errors lvalue
      |     `-BinaryOperator 0x14800e3c0 <col:15, col:20> 'int' contains-errors '!='
      |       |-RecoveryExpr 0x14800e380 <col:15> '<dependent type>' contains-errors lvalue
      |       `-RecoveryExpr 0x14800e3a0 <col:20> '<dependent type>' contains-errors lvalue
      `-CallExpr 0x148027558 <line:15:3, col:17> '<dependent type>' contains-errors
        |-DeclRefExpr 0x148027518 <col:3> 'int ()' Function 0x148027460 'BIO_free_all' 'int ()'
        `-RecoveryExpr 0x148027538 <col:16> '<dependent type>' contains-errors lvalue
