`-FunctionDecl 0x15180ddf8  line:1:19 invalid bson_oid_gen 'int (int *)'
  |-ParmVarDecl 0x15180dd28 <col:33, col:45> col:45 referenced invalid oid 'int *'
  `-CompoundStmt 0x1528096a0 <col:51, line:24:1>
    |-DeclStmt 0x15180df48 <line:2:5, col:24>
    | `-VarDecl 0x15180dec0 <col:5, col:23> col:16 used incr 'int' static cinit
    |   `-IntegerLiteral 0x15180df28 <col:23> 'int' 0
    |-DeclStmt 0x15180e000 <line:3:5, col:24>
    | `-VarDecl 0x15180df78 <col:5, col:23> col:16 used fuzz 'int' static cinit
    |   `-IntegerLiteral 0x15180dfe0 <col:23> 'int' 0
    |-DeclStmt 0x15180e098 <line:4:5, col:10>
    | `-VarDecl 0x15180e030 <col:5, col:9> col:9 used i 'int'
    |-IfStmt 0x15180e380 <line:7:5, line:10:17> has_else
    | |-RecoveryExpr 0x15180e0c8 <line:7:9> '<dependent type>' contains-errors lvalue
    | |-BinaryOperator 0x15180e2e8 <line:8:9, col:26> 'int' '='
    | | |-DeclRefExpr 0x15180e0e8 <col:9> 'int' lvalue Var 0x15180e030 'i' 'int'
    | | `-CallExpr 0x15180e2c8 <col:13, col:26> 'int'
    | |   `-ImplicitCastExpr 0x15180e2b0 <col:13> 'int (*)()' <FunctionToPointerDecay>
    | |     `-DeclRefExpr 0x15180e260 <col:13> 'int ()' Function 0x15180e1a8 'oid_inc_func' 'int ()'
    | `-BinaryOperator 0x15180e360 <line:10:9, col:17> 'int' '='
    |   |-DeclRefExpr 0x15180e308 <col:9> 'int' lvalue Var 0x15180e030 'i' 'int'
    |   `-UnaryOperator 0x15180e348 <col:13, col:17> 'int' postfix '++'
    |     `-DeclRefExpr 0x15180e328 <col:13> 'int' lvalue Var 0x15180dec0 'incr' 'int'
    |-IfStmt 0x1528090b8 <line:12:5, line:19:5>
    | |-UnaryOperator 0x15180e3e8 <line:12:10, col:11> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x15180e3d0 <col:11> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x15180e3b0 <col:11> 'int' lvalue Var 0x15180df78 'fuzz' 'int'
    | `-CompoundStmt 0x1528090a0 <col:18, line:19:5>
    |   `-IfStmt 0x152809070 <line:13:9, line:18:9> has_else
    |     |-DeclRefExpr 0x152808c18 <line:13:14> 'int ()' Function 0x15180e1a8 'oid_inc_func' 'int ()'
    |     |-BinaryOperator 0x152808d90 <line:14:13, col:34> 'int' '='
    |     | |-DeclRefExpr 0x152808c38 <col:13> 'int' lvalue Var 0x15180df78 'fuzz' 'int'
    |     | `-CallExpr 0x152808d70 <col:20, col:34> 'int'
    |     |   `-ImplicitCastExpr 0x152808d58 <col:20> 'int (*)()' <FunctionToPointerDecay>
    |     |     `-DeclRefExpr 0x152808d38 <col:20> 'int ()' Function 0x152808c80 'oid_fuzz_func' 'int ()'
    |     `-CompoundStmt 0x152809058 <line:15:14, line:18:9>
    |       `-BinaryOperator 0x152809038 <line:17:13, col:25> 'int' '='
    |         |-DeclRefExpr 0x152808ee0 <col:13> 'int' lvalue Var 0x15180df78 'fuzz' 'int'
    |         `-CallExpr 0x152809018 <col:20, col:25> 'int'
    |           `-ImplicitCastExpr 0x152809000 <col:20> 'int (*)()' <FunctionToPointerDecay>
    |             `-DeclRefExpr 0x152808fe0 <col:20> 'int ()' Function 0x152808f28 'rand' 'int ()'
    |-CallExpr 0x1528093e8 <line:21:5, col:42> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x1528091b8 <col:5> 'int ()' Function 0x152809100 'bson_big_endian32' 'int ()'
    | |-UnaryOperator 0x152809398 <col:24, col:36> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | `-ArraySubscriptExpr 0x152809378 <col:25, col:36> '<dependent type>' contains-errors lvalue
    | |   |-ImplicitCastExpr 0x152809360 <col:25, col:30> '<dependent type>' contains-errors <LValueToRValue>
    | |   | `-CXXDependentScopeMemberExpr 0x1528091f8 <col:25, col:30> '<dependent type>' contains-errors lvalue ->ints
    | |   |   `-RecoveryExpr 0x1528091d8 <col:25> '<dependent type>' contains-errors lvalue
    | |   `-IntegerLiteral 0x152809240 <col:35> 'int' 0
    | `-UnaryOperator 0x1528093d0 <col:39, col:40> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   `-RecoveryExpr 0x1528093b0 <col:40> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x152809520 <line:22:5, col:20> '<dependent type>' contains-errors '='
    | |-ArraySubscriptExpr 0x1528094e0 <col:5, col:16> '<dependent type>' contains-errors lvalue
    | | |-ImplicitCastExpr 0x1528094c8 <col:5, col:10> '<dependent type>' contains-errors <LValueToRValue>
    | | | `-CXXDependentScopeMemberExpr 0x152809460 <col:5, col:10> '<dependent type>' contains-errors lvalue ->ints
    | | |   `-RecoveryExpr 0x152809438 <col:5> '<dependent type>' contains-errors lvalue
    | | |     `-DeclRefExpr 0x152809418 <col:5> 'int *' lvalue ParmVar 0x15180dd28 'oid' 'int *'
    | | `-IntegerLiteral 0x1528094a8 <col:15> 'int' 1
    | `-DeclRefExpr 0x152809500 <col:20> 'int' lvalue Var 0x15180df78 'fuzz' 'int'
    `-CallExpr 0x152809670 <line:23:5, col:42> '<dependent type>' contains-errors
      |-DeclRefExpr 0x152809540 <col:5> 'int ()' Function 0x152809100 'bson_big_endian32' 'int ()'
      |-UnaryOperator 0x152809620 <col:24, col:36> '<dependent type>' contains-errors prefix '&' cannot overflow
      | `-ArraySubscriptExpr 0x152809600 <col:25, col:36> '<dependent type>' contains-errors lvalue
      |   |-ImplicitCastExpr 0x1528095e8 <col:25, col:30> '<dependent type>' contains-errors <LValueToRValue>
      |   | `-CXXDependentScopeMemberExpr 0x152809580 <col:25, col:30> '<dependent type>' contains-errors lvalue ->ints
      |   |   `-RecoveryExpr 0x152809560 <col:25> '<dependent type>' contains-errors lvalue
      |   `-IntegerLiteral 0x1528095c8 <col:35> 'int' 2
      `-UnaryOperator 0x152809658 <col:39, col:40> 'int *' prefix '&' cannot overflow
        `-DeclRefExpr 0x152809638 <col:40> 'int' lvalue Var 0x15180e030 'i' 'int'
