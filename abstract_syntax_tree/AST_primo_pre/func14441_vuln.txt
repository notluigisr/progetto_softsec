`-FunctionDecl 0x127128198  line:1:1 IPV6DefragReverseSimpleTest 'int (void)'
  `-CompoundStmt 0x12780a8f8 <line:2:1, line:67:1>
    |-DeclStmt 0x1271284d0 <line:6:5, col:16>
    | `-VarDecl 0x127128448 <col:5, col:14> col:9 used id 'int' cinit
    |   `-IntegerLiteral 0x1271284b0 <col:14> 'int' 12
    |-DeclStmt 0x127128568 <line:7:5, col:10>
    | `-VarDecl 0x127128500 <col:5, col:9> col:9 used i 'int'
    |-DeclStmt 0x127128620 <line:8:5, col:16>
    | `-VarDecl 0x127128598 <col:5, col:15> col:9 used ret 'int' cinit
    |   `-IntegerLiteral 0x127128600 <col:15> 'int' 0
    |-CallExpr 0x1271287b8 <line:10:5, col:16> 'int'
    | `-ImplicitCastExpr 0x1271287a0 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x127128750 <col:5> 'int ()' Function 0x127128698 'DefragInit' 'int ()'
    |-IfStmt 0x127808428 <line:13:5, line:14:14>
    | |-BinaryOperator 0x1278083a0 <line:13:9, col:15> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x127808360 <col:9> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x127808380 <col:15> '<dependent type>' contains-errors lvalue
    | `-GotoStmt 0x127808410 <line:14:9, col:14> 'end' 0x1278083c0
    |-IfStmt 0x127808690 <line:17:5, line:18:14>
    | |-RecoveryExpr 0x127808658 <line:17:9, col:15> '_Bool' contains-errors
    | `-GotoStmt 0x127808678 <line:18:9, col:14> 'end' 0x1278083c0
    |-IfStmt 0x127808818 <line:20:5, line:21:14>
    | |-RecoveryExpr 0x1278087e0 <line:20:9, col:15> '_Bool' contains-errors
    | `-GotoStmt 0x127808800 <line:21:9, col:14> 'end' 0x1278083c0
    |-IfStmt 0x1278089a0 <line:23:5, line:24:14>
    | |-RecoveryExpr 0x127808968 <line:23:9, col:15> '_Bool' contains-errors
    | `-GotoStmt 0x127808988 <line:24:9, col:14> 'end' 0x1278083c0
    |-IfStmt 0x127808af8 <line:26:5, line:27:14>
    | |-RecoveryExpr 0x127808ac0 <line:26:9, col:41> '_Bool' contains-errors
    | `-GotoStmt 0x127808ae0 <line:27:9, col:14> 'end' 0x1278083c0
    |-IfStmt 0x127808b70 <line:28:5, line:29:14>
    | |-RecoveryExpr 0x127808b38 <line:28:9, col:41> '_Bool' contains-errors
    | `-GotoStmt 0x127808b58 <line:29:9, col:14> 'end' 0x1278083c0
    |-IfStmt 0x127808be8 <line:31:5, line:32:14>
    | |-RecoveryExpr 0x127808bb0 <line:31:9, col:24> '_Bool' contains-errors
    | `-GotoStmt 0x127808bd0 <line:32:9, col:14> 'end' 0x1278083c0
    |-ForStmt 0x127808f00 <line:35:5, line:38:5>
    | |-BinaryOperator 0x127808c48 <line:35:10, col:14> 'int' '='
    | | |-DeclRefExpr 0x127808c08 <col:10> 'int' lvalue Var 0x127128500 'i' 'int'
    | | `-IntegerLiteral 0x127808c28 <col:14> 'int' 40
    | |-<<<NULL>>>
    | |-BinaryOperator 0x127808d00 <col:18, col:27> 'int' '<'
    | | |-ImplicitCastExpr 0x127808ce8 <col:18> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x127808c68 <col:18> 'int' lvalue Var 0x127128500 'i' 'int'
    | | `-BinaryOperator 0x127808cc8 <col:22, col:27> 'int' '+'
    | |   |-IntegerLiteral 0x127808c88 <col:22> 'int' 40
    | |   `-IntegerLiteral 0x127808ca8 <col:27> 'int' 8
    | |-UnaryOperator 0x127808d40 <col:30, col:31> 'int' postfix '++'
    | | `-DeclRefExpr 0x127808d20 <col:30> 'int' lvalue Var 0x127128500 'i' 'int'
    | `-CompoundStmt 0x127808ee8 <col:35, line:38:5>
    |   `-IfStmt 0x127808ec8 <line:36:9, line:37:18>
    |     |-RecoveryExpr 0x127808e90 <line:36:13, col:45> '_Bool' contains-errors
    |     `-GotoStmt 0x127808eb0 <line:37:13, col:18> 'end' 0x1278083c0
    |-ForStmt 0x127809150 <line:41:5, line:44:5>
    | |-BinaryOperator 0x127808f78 <line:41:10, col:14> 'int' '='
    | | |-DeclRefExpr 0x127808f38 <col:10> 'int' lvalue Var 0x127128500 'i' 'int'
    | | `-IntegerLiteral 0x127808f58 <col:14> 'int' 48
    | |-<<<NULL>>>
    | |-BinaryOperator 0x127809030 <col:18, col:27> 'int' '<'
    | | |-ImplicitCastExpr 0x127809018 <col:18> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x127808f98 <col:18> 'int' lvalue Var 0x127128500 'i' 'int'
    | | `-BinaryOperator 0x127808ff8 <col:22, col:27> 'int' '+'
    | |   |-IntegerLiteral 0x127808fb8 <col:22> 'int' 48
    | |   `-IntegerLiteral 0x127808fd8 <col:27> 'int' 8
    | |-UnaryOperator 0x127809070 <col:30, col:31> 'int' postfix '++'
    | | `-DeclRefExpr 0x127809050 <col:30> 'int' lvalue Var 0x127128500 'i' 'int'
    | `-CompoundStmt 0x127809138 <col:35, line:44:5>
    |   `-IfStmt 0x127809118 <line:42:9, line:43:18>
    |     |-RecoveryExpr 0x1278090e0 <line:42:13, col:45> '_Bool' contains-errors
    |     `-GotoStmt 0x127809100 <line:43:13, col:18> 'end' 0x1278083c0
    |-ForStmt 0x12780a3b8 <line:47:5, line:50:5>
    | |-BinaryOperator 0x1278091c8 <line:47:10, col:14> 'int' '='
    | | |-DeclRefExpr 0x127809188 <col:10> 'int' lvalue Var 0x127128500 'i' 'int'
    | | `-IntegerLiteral 0x1278091a8 <col:14> 'int' 56
    | |-<<<NULL>>>
    | |-BinaryOperator 0x12780a298 <col:18, col:27> 'int' '<'
    | | |-ImplicitCastExpr 0x12780a280 <col:18> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x12780a200 <col:18> 'int' lvalue Var 0x127128500 'i' 'int'
    | | `-BinaryOperator 0x12780a260 <col:22, col:27> 'int' '+'
    | |   |-IntegerLiteral 0x12780a220 <col:22> 'int' 56
    | |   `-IntegerLiteral 0x12780a240 <col:27> 'int' 3
    | |-UnaryOperator 0x12780a2d8 <col:30, col:31> 'int' postfix '++'
    | | `-DeclRefExpr 0x12780a2b8 <col:30> 'int' lvalue Var 0x127128500 'i' 'int'
    | `-CompoundStmt 0x12780a3a0 <col:35, line:50:5>
    |   `-IfStmt 0x12780a380 <line:48:9, line:49:18>
    |     |-RecoveryExpr 0x12780a348 <line:48:13, col:45> '_Bool' contains-errors
    |     `-GotoStmt 0x12780a368 <line:49:13, col:18> 'end' 0x1278083c0
    |-BinaryOperator 0x12780a430 <line:52:5, col:11> 'int' '='
    | |-DeclRefExpr 0x12780a3f0 <col:5> 'int' lvalue Var 0x127128598 'ret' 'int'
    | `-IntegerLiteral 0x12780a410 <col:11> 'int' 1
    |-LabelStmt 0x12780a578 <line:53:1, col:4> 'end'
    | `-NullStmt 0x12780a570 <col:4>
    |-CallExpr 0x12780a890 <line:65:5, col:19> 'int'
    | `-ImplicitCastExpr 0x12780a878 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x12780a858 <col:5> 'int ()' Function 0x12780a7a0 'DefragDestroy' 'int ()'
    `-ReturnStmt 0x12780a8e8 <line:66:5, col:12>
      `-ImplicitCastExpr 0x12780a8d0 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x12780a8b0 <col:12> 'int' lvalue Var 0x127128598 'ret' 'int'
