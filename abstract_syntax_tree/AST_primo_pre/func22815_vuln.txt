`-FunctionDecl 0x13d857c68  line:1:5 generate_password 'int (int, unsigned char *)'
  |-ParmVarDecl 0x13d857ad8 <col:23, col:27> col:27 used length 'int'
  |-ParmVarDecl 0x13d857b88 <col:35, col:50> col:50 used password 'unsigned char *'
  `-CompoundStmt 0x13d870068 <line:2:1, line:53:1>
    |-DeclStmt 0x13e0d6d60 <line:3:5, line:10:6>
    | `-VarDecl 0x13d857df0 <line:3:5, line:10:5> line:3:16 used pwchars 'const char[64]' cinit
    |   `-InitListExpr 0x13e0d62a8 <line:4:5, line:10:5> 'const char[64]'
    |     |-ImplicitCastExpr 0x13e0d62e8 <line:5:9> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d857e58 <col:9> 'int' 48
    |     |-ImplicitCastExpr 0x13e0d6308 <col:14> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d857e70 <col:14> 'int' 49
    |     |-ImplicitCastExpr 0x13e0d6330 <col:19> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d857e88 <col:19> 'int' 50
    |     |-ImplicitCastExpr 0x13e0d6368 <col:24> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d857ea0 <col:24> 'int' 51
    |     |-ImplicitCastExpr 0x13e0d6380 <col:29> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d857eb8 <col:29> 'int' 52
    |     |-ImplicitCastExpr 0x13e0d63d8 <col:34> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d857ed0 <col:34> 'int' 53
    |     |-ImplicitCastExpr 0x13e0d63f0 <col:39> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d857ee8 <col:39> 'int' 54
    |     |-ImplicitCastExpr 0x13e0d6408 <col:44> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d857f00 <col:44> 'int' 55
    |     |-ImplicitCastExpr 0x13e0d6420 <col:49> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d857f18 <col:49> 'int' 56
    |     |-ImplicitCastExpr 0x13e0d64b8 <col:54> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d857f30 <col:54> 'int' 57
    |     |-ImplicitCastExpr 0x13e0d64d0 <col:59> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d857f48 <col:59> 'int' 97
    |     |-ImplicitCastExpr 0x13e0d64e8 <col:64> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d857f60 <col:64> 'int' 98
    |     |-ImplicitCastExpr 0x13e0d6500 <col:69> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d857f78 <col:69> 'int' 99
    |     |-ImplicitCastExpr 0x13e0d6518 <col:74> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d857f90 <col:74> 'int' 100
    |     |-ImplicitCastExpr 0x13e0d6530 <line:6:9> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d857fa8 <col:9> 'int' 101
    |     |-ImplicitCastExpr 0x13e0d6548 <col:14> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d857fc0 <col:14> 'int' 102
    |     |-ImplicitCastExpr 0x13e0d6560 <col:19> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d857fd8 <col:19> 'int' 103
    |     |-ImplicitCastExpr 0x13e0d6678 <col:24> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d857ff0 <col:24> 'int' 104
    |     |-ImplicitCastExpr 0x13e0d6690 <col:29> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d858008 <col:29> 'int' 105
    |     |-ImplicitCastExpr 0x13e0d66a8 <col:34> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d858020 <col:34> 'int' 106
    |     |-ImplicitCastExpr 0x13e0d66c0 <col:39> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d858038 <col:39> 'int' 107
    |     |-ImplicitCastExpr 0x13e0d66d8 <col:44> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d858050 <col:44> 'int' 108
    |     |-ImplicitCastExpr 0x13e0d66f0 <col:49> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d858068 <col:49> 'int' 109
    |     |-ImplicitCastExpr 0x13e0d6708 <col:54> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d858080 <col:54> 'int' 110
    |     |-ImplicitCastExpr 0x13e0d6720 <col:59> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d858098 <col:59> 'int' 111
    |     |-ImplicitCastExpr 0x13e0d6738 <col:64> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d8580b0 <col:64> 'int' 112
    |     |-ImplicitCastExpr 0x13e0d6750 <col:69> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d8580c8 <col:69> 'int' 113
    |     |-ImplicitCastExpr 0x13e0d6768 <col:74> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d8580e0 <col:74> 'int' 114
    |     |-ImplicitCastExpr 0x13e0d6780 <line:7:9> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d8580f8 <col:9> 'int' 115
    |     |-ImplicitCastExpr 0x13e0d6798 <col:14> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d858110 <col:14> 'int' 116
    |     |-ImplicitCastExpr 0x13e0d67b0 <col:19> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d858128 <col:19> 'int' 117
    |     |-ImplicitCastExpr 0x13e0d67c8 <col:24> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d858140 <col:24> 'int' 118
    |     |-ImplicitCastExpr 0x13e0d67e0 <col:29> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d858158 <col:29> 'int' 119
    |     |-ImplicitCastExpr 0x13e0d69f8 <col:34> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d858170 <col:34> 'int' 120
    |     |-ImplicitCastExpr 0x13e0d6a10 <col:39> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d858188 <col:39> 'int' 121
    |     |-ImplicitCastExpr 0x13e0d6a28 <col:44> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d8581a0 <col:44> 'int' 122
    |     |-ImplicitCastExpr 0x13e0d6a40 <col:49> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d8581b8 <col:49> 'int' 65
    |     |-ImplicitCastExpr 0x13e0d6a58 <col:54> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d8581d0 <col:54> 'int' 66
    |     |-ImplicitCastExpr 0x13e0d6a70 <col:59> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13d8581e8 <col:59> 'int' 67
    |     |-ImplicitCastExpr 0x13e0d6a88 <col:64> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13e0d5e00 <col:64> 'int' 68
    |     |-ImplicitCastExpr 0x13e0d6aa0 <col:69> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13e0d5e18 <col:69> 'int' 69
    |     |-ImplicitCastExpr 0x13e0d6ab8 <col:74> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13e0d5e30 <col:74> 'int' 70
    |     |-ImplicitCastExpr 0x13e0d6ad0 <line:8:9> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13e0d5e48 <col:9> 'int' 71
    |     |-ImplicitCastExpr 0x13e0d6ae8 <col:14> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13e0d5e60 <col:14> 'int' 72
    |     |-ImplicitCastExpr 0x13e0d6b00 <col:19> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13e0d5e78 <col:19> 'int' 73
    |     |-ImplicitCastExpr 0x13e0d6b18 <col:24> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13e0d5e90 <col:24> 'int' 74
    |     |-ImplicitCastExpr 0x13e0d6b30 <col:29> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13e0d5ea8 <col:29> 'int' 75
    |     |-ImplicitCastExpr 0x13e0d6b48 <col:34> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13e0d5ec0 <col:34> 'int' 76
    |     |-ImplicitCastExpr 0x13e0d6b60 <col:39> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13e0d5ed8 <col:39> 'int' 77
    |     |-ImplicitCastExpr 0x13e0d6b78 <col:44> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13e0d5ef0 <col:44> 'int' 78
    |     |-ImplicitCastExpr 0x13e0d6b90 <col:49> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13e0d5f08 <col:49> 'int' 79
    |     |-ImplicitCastExpr 0x13e0d6ba8 <col:54> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13e0d5f20 <col:54> 'int' 80
    |     |-ImplicitCastExpr 0x13e0d6bc0 <col:59> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13e0d5f38 <col:59> 'int' 81
    |     |-ImplicitCastExpr 0x13e0d6bd8 <col:64> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13e0d5f50 <col:64> 'int' 82
    |     |-ImplicitCastExpr 0x13e0d6bf0 <col:69> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13e0d5f68 <col:69> 'int' 83
    |     |-ImplicitCastExpr 0x13e0d6c08 <col:74> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13e0d5f80 <col:74> 'int' 84
    |     |-ImplicitCastExpr 0x13e0d6c20 <line:9:9> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13e0d5f98 <col:9> 'int' 85
    |     |-ImplicitCastExpr 0x13e0d6c38 <col:14> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13e0d5fb0 <col:14> 'int' 86
    |     |-ImplicitCastExpr 0x13e0d6c50 <col:19> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13e0d5fc8 <col:19> 'int' 87
    |     |-ImplicitCastExpr 0x13e0d6c68 <col:24> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13e0d5fe0 <col:24> 'int' 88
    |     |-ImplicitCastExpr 0x13e0d6c80 <col:29> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13e0d5ff8 <col:29> 'int' 89
    |     |-ImplicitCastExpr 0x13e0d6c98 <col:34> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13e0d6010 <col:34> 'int' 90
    |     |-ImplicitCastExpr 0x13e0d6cb0 <col:39> 'char' <IntegralCast>
    |     | `-CharacterLiteral 0x13e0d6028 <col:39> 'int' 37
    |     `-ImplicitCastExpr 0x13e0d6cc8 <col:44> 'char' <IntegralCast>
    |       `-CharacterLiteral 0x13e0d6040 <col:44> 'int' 36
    |-DeclStmt 0x13d86e268 <line:13:5, col:41>
    | `-VarDecl 0x13d86e200 <col:5, col:19> col:19 invalid pwtemp 'unsigned char'
    |-DeclStmt 0x13d86e300 <line:14:5, col:21>
    | `-VarDecl 0x13d86e298 <col:5, col:20> col:20 used p 'unsigned char *'
    |-DeclStmt 0x13d86e430 <line:15:5, col:13>
    | |-VarDecl 0x13d86e330 <col:5, col:9> col:9 used i 'int'
    | `-VarDecl 0x13d86e3b0 <col:5, col:12> col:12 used n 'int'
    |-DeclStmt 0x13d86e4c8 <line:16:5, col:16>
    | `-VarDecl 0x13d86e460 <col:5, col:9> col:9 used passlen 'int'
    |-IfStmt 0x13d86e888 <line:18:5, line:22:5>
    | |-RecoveryExpr 0x13d86e5d0 <line:18:9, col:50> '_Bool' contains-errors
    | `-CompoundStmt 0x13d86e868 <line:19:5, line:22:5>
    |   |-CallExpr 0x13d86e7f0 <line:20:9, col:30> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x13d86e700 <col:9> 'int ()' Function 0x13d86e648 'fprintf' 'int ()'
    |   | |-RecoveryExpr 0x13d86e7d0 <col:17> '<dependent type>' contains-errors lvalue
    |   | `-StringLiteral 0x13d86e780 <col:25> 'char[4]' lvalue "STR"
    |   `-ReturnStmt 0x13d86e858 <line:21:9, col:17>
    |     `-UnaryOperator 0x13d86e840 <col:16, col:17> 'int' prefix '-'
    |       `-IntegerLiteral 0x13d86e820 <col:17> 'int' 1
    |-IfStmt 0x13d86eca0 <line:25:5, line:29:5>
    | |-RecoveryExpr 0x13d86eaa0 <line:25:9, col:36> '_Bool' contains-errors
    | `-CompoundStmt 0x13d86ec80 <line:26:5, line:29:5>
    |   |-CallExpr 0x13d86ebf8 <line:27:9, col:21> 'int'
    |   | |-ImplicitCastExpr 0x13d86ebe0 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x13d86eba0 <col:9> 'int ()' Function 0x13d86eae8 'perror' 'int ()'
    |   | `-ImplicitCastExpr 0x13d86ec20 <col:16> 'char *' <ArrayToPointerDecay>
    |   |   `-StringLiteral 0x13d86ebc0 <col:16> 'char[4]' lvalue "STR"
    |   `-ReturnStmt 0x13d86ec70 <line:28:9, col:18>
    |     `-UnaryOperator 0x13d86ec58 <col:17, col:18> 'int' prefix '-'
    |       `-IntegerLiteral 0x13d86ec38 <col:18> 'int' 1
    |-IfStmt 0x13d86f850 <line:32:5, line:37:5>
    | |-RecoveryExpr 0x13d86ef58 <line:32:9, col:58> '_Bool' contains-errors
    | `-CompoundStmt 0x13d86f828 <line:33:5, line:37:5>
    |   |-CallExpr 0x13d86f020 <line:34:9, col:30> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x13d86ef78 <col:9> 'int ()' Function 0x13d86e648 'fprintf' 'int ()'
    |   | |-RecoveryExpr 0x13d86f000 <col:17> '<dependent type>' contains-errors lvalue
    |   | `-StringLiteral 0x13d86efb0 <col:25> 'char[4]' lvalue "STR"
    |   |-CallExpr 0x13d86f1b0 <line:35:9, col:22> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x13d86f130 <col:9> 'int ()' Function 0x13d86f078 'fclose' 'int ()'
    |   | `-RecoveryExpr 0x13d86f190 <col:16> '<dependent type>' contains-errors lvalue
    |   `-ReturnStmt 0x13d86f818 <line:36:9, col:18>
    |     `-UnaryOperator 0x13d86f800 <col:17, col:18> 'int' prefix '-'
    |       `-IntegerLiteral 0x13d86f1d8 <col:18> 'int' 1
    |-CallExpr 0x13d86f8f0 <line:38:5, col:18> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x13d86f870 <col:5> 'int ()' Function 0x13d86f078 'fclose' 'int ()'
    | `-RecoveryExpr 0x13d86f8d0 <col:12> '<dependent type>' contains-errors lvalue
    |-ForStmt 0x13d86fd70 <line:41:5, line:44:5>
    | |-BinaryOperator 0x13d86f9d8 <line:41:9, col:20> 'unsigned char *' contains-errors ','
    | | |-BinaryOperator 0x13d86f958 <col:9, col:13> 'int' '='
    | | | |-DeclRefExpr 0x13d86f918 <col:9> 'int' lvalue Var 0x13d86e330 'i' 'int'
    | | | `-IntegerLiteral 0x13d86f938 <col:13> 'int' 0
    | | `-BinaryOperator 0x13d86f9b8 <col:16, col:20> 'unsigned char *' contains-errors '='
    | |   |-DeclRefExpr 0x13d86f978 <col:16> 'unsigned char *' lvalue Var 0x13d86e298 'p' 'unsigned char *'
    | |   `-RecoveryExpr 0x13d86f998 <col:20> '<dependent type>' contains-errors lvalue
    | |-<<<NULL>>>
    | |-BinaryOperator 0x13d86fa68 <col:28, col:32> 'int' '<'
    | | |-ImplicitCastExpr 0x13d86fa38 <col:28> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x13d86f9f8 <col:28> 'int' lvalue Var 0x13d86e330 'i' 'int'
    | | `-ImplicitCastExpr 0x13d86fa50 <col:32> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x13d86fa18 <col:32> 'int' lvalue ParmVar 0x13d857ad8 'length' 'int'
    | |-BinaryOperator 0x13d86faf8 <col:40, col:46> 'unsigned char *' ','
    | | |-UnaryOperator 0x13d86faa8 <col:40, col:41> 'int' postfix '++'
    | | | `-DeclRefExpr 0x13d86fa88 <col:40> 'int' lvalue Var 0x13d86e330 'i' 'int'
    | | `-UnaryOperator 0x13d86fae0 <col:45, col:46> 'unsigned char *' postfix '++'
    | |   `-DeclRefExpr 0x13d86fac0 <col:45> 'unsigned char *' lvalue Var 0x13d86e298 'p' 'unsigned char *'
    | `-CompoundStmt 0x13d86fd58 <line:42:5, line:44:5>
    |   `-BinaryOperator 0x13d86fd38 <line:43:9, col:38> 'unsigned char' '='
    |     |-UnaryOperator 0x13d86fb50 <col:9, col:10> 'unsigned char' lvalue prefix '*' cannot overflow
    |     | `-ImplicitCastExpr 0x13d86fb38 <col:10> 'unsigned char *' <LValueToRValue>
    |     |   `-DeclRefExpr 0x13d86fb18 <col:10> 'unsigned char *' lvalue Var 0x13d86e298 'p' 'unsigned char *'
    |     `-ImplicitCastExpr 0x13d86fd20 <col:14, col:38> 'unsigned char' <IntegralCast>
    |       `-ImplicitCastExpr 0x13d86fd08 <col:14, col:38> 'char' <LValueToRValue>
    |         `-ArraySubscriptExpr 0x13d86fce8 <col:14, col:38> 'const char' lvalue
    |           |-ImplicitCastExpr 0x13d86fcd0 <col:14> 'const char *' <ArrayToPointerDecay>
    |           | `-DeclRefExpr 0x13d86fb68 <col:14> 'const char[64]' lvalue Var 0x13d857df0 'pwchars' 'const char[64]'
    |           `-BinaryOperator 0x13d86fcb0 <col:22, col:36> 'int' '%'
    |             |-ParenExpr 0x13d86fc70 <col:22, col:32> 'int'
    |             | `-CStyleCastExpr 0x13d86fc48 <col:23, col:31> 'int' <IntegralCast>
    |             |   `-ImplicitCastExpr 0x13d86fc30 <col:28, col:31> 'unsigned char' <LValueToRValue> part_of_explicit_cast
    |             |     `-ParenExpr 0x13d86fc10 <col:28, col:31> 'unsigned char' lvalue
    |             |       `-UnaryOperator 0x13d86fbc0 <col:29, col:30> 'unsigned char' lvalue prefix '*' cannot overflow
    |             |         `-ImplicitCastExpr 0x13d86fba8 <col:30> 'unsigned char *' <LValueToRValue>
    |             |           `-DeclRefExpr 0x13d86fb88 <col:30> 'unsigned char *' lvalue Var 0x13d86e298 'p' 'unsigned char *'
    |             `-IntegerLiteral 0x13d86fc90 <col:36> 'int' 64
    |-BinaryOperator 0x13d870000 <line:47:5, line:50:41> 'int' contains-errors '='
    | |-DeclRefExpr 0x13d86fda8 <line:47:5> 'int' lvalue Var 0x13d86e460 'passlen' 'int'
    | `-CallExpr 0x13d86ffc0 <col:15, line:50:41> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x13d86fea8 <line:47:15> 'int ()' Function 0x13d86fdf0 'passwd_to_utf16' 'int ()'
    |   |-RecoveryExpr 0x13d86fec8 <col:33> '<dependent type>' contains-errors lvalue
    |   |-DeclRefExpr 0x13d86fee8 <line:48:33> 'int' lvalue ParmVar 0x13d857ad8 'length' 'int'
    |   |-RecoveryExpr 0x13d86ffa0 <line:49:33> '<dependent type>' contains-errors lvalue
    |   `-DeclRefExpr 0x13d86ff20 <line:50:33> 'unsigned char *' lvalue ParmVar 0x13d857b88 'password' 'unsigned char *'
    `-ReturnStmt 0x13d870058 <line:52:5, col:12>
      `-ImplicitCastExpr 0x13d870040 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x13d870020 <col:12> 'int' lvalue Var 0x13d86e460 'passlen' 'int'
