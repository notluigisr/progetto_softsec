`-FunctionDecl 0x11e80dda8  line:1:1 apdu_connect 'int (int)'
  |-ParmVarDecl 0x11e80dcd8 <col:15, col:19> col:19 used slot 'int'
  `-CompoundStmt 0x11e828610 <line:2:1, line:42:1>
    |-DeclStmt 0x11e80df20 <line:3:3, col:9>
    | `-VarDecl 0x11e80deb8 <col:3, col:7> col:7 used sw 'int'
    |-DeclStmt 0x11e80dfb8 <line:4:3, col:22>
    | `-VarDecl 0x11e80df50 <col:3, col:16> col:16 used status 'unsigned int'
    |-IfStmt 0x11e80e278 <line:6:3, line:7:27>
    | |-RecoveryExpr 0x11e80e000 <line:6:7> '<dependent type>' contains-errors lvalue
    | `-CallExpr 0x11e80e218 <line:7:5, col:27> 'int'
    |   |-ImplicitCastExpr 0x11e80e200 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x11e80e130 <col:5> 'int ()' Function 0x11e80e078 'log_debug' 'int ()'
    |   |-ImplicitCastExpr 0x11e80e248 <col:16> 'char *' <ArrayToPointerDecay>
    |   | `-StringLiteral 0x11e80e190 <col:16> 'char[4]' lvalue "STR"
    |   `-ImplicitCastExpr 0x11e80e260 <col:23> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x11e80e1b0 <col:23> 'int' lvalue ParmVar 0x11e80dcd8 'slot' 'int'
    |-IfStmt 0x11e827978 <line:9:3, line:14:5>
    | |-RecoveryExpr 0x11e827800 <line:9:7, col:61> '_Bool' contains-errors
    | `-CompoundStmt 0x11e827958 <line:10:5, line:14:5>
    |   |-IfStmt 0x11e8278f0 <line:11:7, line:12:25>
    |   | |-RecoveryExpr 0x11e827838 <line:11:11> '<dependent type>' contains-errors lvalue
    |   | `-CallExpr 0x11e8278b0 <line:12:9, col:25> 'int'
    |   |   |-ImplicitCastExpr 0x11e827898 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   |   | `-DeclRefExpr 0x11e827858 <col:9> 'int ()' Function 0x11e80e078 'log_debug' 'int ()'
    |   |   `-ImplicitCastExpr 0x11e8278d8 <col:20> 'char *' <ArrayToPointerDecay>
    |   |     `-StringLiteral 0x11e827878 <col:20> 'char[4]' lvalue "STR"
    |   `-ReturnStmt 0x11e827948 <line:13:7, col:14>
    |     `-RecoveryExpr 0x11e827928 <col:14> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x11e827ea0 <line:17:3, line:27:10> has_else
    | |-RecoveryExpr 0x11e8279d0 <line:17:7, col:26> '_Bool' contains-errors
    | |-CompoundStmt 0x11e827e20 <line:18:5, line:25:5>
    | | |-BinaryOperator 0x11e827b88 <line:19:7, col:27> 'int' '='
    | | | |-DeclRefExpr 0x11e8279f0 <col:7> 'int' lvalue Var 0x11e80deb8 'sw' 'int'
    | | | `-CallExpr 0x11e827b48 <col:12, col:27> 'int'
    | | |   |-ImplicitCastExpr 0x11e827b30 <col:12> 'int (*)()' <FunctionToPointerDecay>
    | | |   | `-DeclRefExpr 0x11e827af0 <col:12> 'int ()' Function 0x11e827a38 'lock_slot' 'int ()'
    | | |   `-ImplicitCastExpr 0x11e827b70 <col:23> 'int' <LValueToRValue>
    | | |     `-DeclRefExpr 0x11e827b10 <col:23> 'int' lvalue ParmVar 0x11e80dcd8 'slot' 'int'
    | | `-IfStmt 0x11e827e00 <line:20:7, line:24:9>
    | |   |-UnaryOperator 0x11e827be0 <line:20:11, col:12> 'int' prefix '!' cannot overflow
    | |   | `-ImplicitCastExpr 0x11e827bc8 <col:12> 'int' <LValueToRValue>
    | |   |   `-DeclRefExpr 0x11e827ba8 <col:12> 'int' lvalue Var 0x11e80deb8 'sw' 'int'
    | |   `-CompoundStmt 0x11e827de8 <line:21:9, line:24:9>
    | |     `-CallExpr 0x11e827da8 <line:23:11, col:28> 'int'
    | |       |-ImplicitCastExpr 0x11e827d90 <col:11> 'int (*)()' <FunctionToPointerDecay>
    | |       | `-DeclRefExpr 0x11e827d50 <col:11> 'int ()' Function 0x11e827c98 'unlock_slot' 'int ()'
    | |       `-ImplicitCastExpr 0x11e827dd0 <col:24> 'int' <LValueToRValue>
    | |         `-DeclRefExpr 0x11e827d70 <col:24> 'int' lvalue ParmVar 0x11e80dcd8 'slot' 'int'
    | `-BinaryOperator 0x11e827e80 <line:27:5, col:10> 'int' '='
    |   |-DeclRefExpr 0x11e827e40 <col:5> 'int' lvalue Var 0x11e80deb8 'sw' 'int'
    |   `-IntegerLiteral 0x11e827e60 <col:10> 'int' 0
    |-CallExpr 0x11e828118 <line:30:3, col:54> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x11e827fb0 <col:3> 'int ()' Function 0x11e827ef8 'apdu_get_status_internal' 'int ()'
    | |-DeclRefExpr 0x11e827fd0 <col:29> 'int' lvalue ParmVar 0x11e80dcd8 'slot' 'int'
    | |-IntegerLiteral 0x11e827ff0 <col:35> 'int' 1
    | |-IntegerLiteral 0x11e828010 <col:38> 'int' 1
    | |-UnaryOperator 0x11e828080 <col:41, col:42> 'unsigned int *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x11e828030 <col:42> 'unsigned int' lvalue Var 0x11e80df50 'status' 'unsigned int'
    | `-RecoveryExpr 0x11e8280f8 <col:50> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x11e828468 <line:31:3, line:36:10> has_else
    | |-ImplicitCastExpr 0x11e828180 <line:31:7> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x11e828160 <col:7> 'int' lvalue Var 0x11e80deb8 'sw' 'int'
    | |-NullStmt 0x11e828198 <line:32:5>
    | `-IfStmt 0x11e828438 <line:33:8, line:36:10> has_else
    |   |-RecoveryExpr 0x11e8281f8 <line:33:12, col:40> '_Bool' contains-errors
    |   |-BinaryOperator 0x11e828290 <line:34:5, col:10> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x11e828218 <col:5> 'int' lvalue Var 0x11e80deb8 'sw' 'int'
    |   | `-RecoveryExpr 0x11e828270 <col:10> '<dependent type>' contains-errors lvalue
    |   `-IfStmt 0x11e828418 <line:35:8, line:36:10>
    |     |-RecoveryExpr 0x11e828360 <line:35:12, col:71> '_Bool' contains-errors
    |     `-BinaryOperator 0x11e8283f8 <line:36:5, col:10> 'int' contains-errors '='
    |       |-DeclRefExpr 0x11e828380 <col:5> 'int' lvalue Var 0x11e80deb8 'sw' 'int'
    |       `-RecoveryExpr 0x11e8283d8 <col:10> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x11e8285a8 <line:38:3, line:39:25>
    | |-RecoveryExpr 0x11e8284b0 <line:38:7> '<dependent type>' contains-errors lvalue
    | `-CallExpr 0x11e828548 <line:39:5, col:25> 'int'
    |   |-ImplicitCastExpr 0x11e828530 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x11e8284d0 <col:5> 'int ()' Function 0x11e80e078 'log_debug' 'int ()'
    |   |-ImplicitCastExpr 0x11e828578 <col:16> 'char *' <ArrayToPointerDecay>
    |   | `-StringLiteral 0x11e8284f0 <col:16> 'char[4]' lvalue "STR"
    |   `-ImplicitCastExpr 0x11e828590 <col:23> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x11e828510 <col:23> 'int' lvalue Var 0x11e80deb8 'sw' 'int'
    `-ReturnStmt 0x11e828600 <line:41:3, col:10>
      `-ImplicitCastExpr 0x11e8285e8 <col:10> 'int' <LValueToRValue>
        `-DeclRefExpr 0x11e8285c8 <col:10> 'int' lvalue Var 0x11e80deb8 'sw' 'int'
