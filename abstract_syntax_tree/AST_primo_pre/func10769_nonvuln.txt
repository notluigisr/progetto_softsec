`-FunctionDecl 0x1281281a8  line:1:1 number_format 'int (int)'
  |-ParmVarDecl 0x1281280d8 <col:15, col:19> col:19 used value 'int'
  `-CompoundStmt 0x10280aca0 <line:2:1, line:18:1>
    |-DeclStmt 0x1281283b0 <line:3:5, col:31>
    | `-VarDecl 0x1281282b8 <col:5, col:26> col:17 used result 'const char *' cinit
    |   `-ImplicitCastExpr 0x128128398 <col:26> 'const char *' <NoOp>
    |     `-ImplicitCastExpr 0x128128380 <col:26> 'char *' <ArrayToPointerDecay>
    |       `-StringLiteral 0x128128360 <col:26> 'char[4]' lvalue "STR"
    |-IfStmt 0x10280a7f8 <line:4:5, line:16:5>
    | |-RecoveryExpr 0x1281284c8 <line:4:9, col:47> '_Bool' contains-errors
    | `-CompoundStmt 0x10280a7c0 <col:50, line:16:5>
    |   |-DeclStmt 0x1281285e0 <line:5:2, col:42>
    |   | `-VarDecl 0x128128500 <col:2, col:37> col:16 used lv 'unsigned long' cinit
    |   |   `-CStyleCastExpr 0x1281285b8 <col:21, col:37> 'unsigned long' <IntegralCast>
    |   |     `-ImplicitCastExpr 0x1281285a0 <col:37> 'int' <LValueToRValue> part_of_explicit_cast
    |   |       `-DeclRefExpr 0x128128568 <col:37> 'int' lvalue ParmVar 0x1281280d8 'value' 'int'
    |   |-DeclStmt 0x128128678 <line:6:2, col:18>
    |   | `-VarDecl 0x128128610 <col:2, col:16> col:16 used mm 'unsigned long'
    |   |-DeclStmt 0x1281287b8 <line:7:2, col:38>
    |   | `-VarDecl 0x1281286a8 <col:2, col:37> col:6 used bits 'int' cinit
    |   |   `-ImplicitCastExpr 0x1281287a0 <col:13, col:37> 'int' <IntegralCast>
    |   |     `-BinaryOperator 0x128128780 <col:13, col:37> 'unsigned long' '*'
    |   |       |-UnaryExprOrTypeTraitExpr 0x128128728 <col:13, col:33> 'unsigned long' sizeof 'unsigned long'
    |   |       `-ImplicitCastExpr 0x128128768 <col:37> 'unsigned long' <IntegralCast>
    |   |         `-IntegerLiteral 0x128128748 <col:37> 'int' 8
    |   |-DeclStmt 0x10280a268 <line:8:2, col:8>
    |   | `-VarDecl 0x10280a200 <col:2, col:6> col:6 used nn 'int'
    |   `-ForStmt 0x10280a788 <line:9:2, line:15:2>
    |     |-BinaryOperator 0x10280a2c0 <line:9:7, col:12> 'int' '='
    |     | |-DeclRefExpr 0x10280a280 <col:7> 'int' lvalue Var 0x10280a200 'nn' 'int'
    |     | `-IntegerLiteral 0x10280a2a0 <col:12> 'int' 8
    |     |-<<<NULL>>>
    |     |-BinaryOperator 0x10280a350 <col:15, col:20> 'int' '<'
    |     | |-ImplicitCastExpr 0x10280a320 <col:15> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x10280a2e0 <col:15> 'int' lvalue Var 0x10280a200 'nn' 'int'
    |     | `-ImplicitCastExpr 0x10280a338 <col:20> 'int' <LValueToRValue>
    |     |   `-DeclRefExpr 0x10280a300 <col:20> 'int' lvalue Var 0x1281286a8 'bits' 'int'
    |     |-UnaryOperator 0x10280a390 <col:26, col:28> 'int' prefix '++'
    |     | `-DeclRefExpr 0x10280a370 <col:28> 'int' lvalue Var 0x10280a200 'nn' 'int'
    |     `-CompoundStmt 0x10280a768 <col:32, line:15:2>
    |       |-BinaryOperator 0x10280a440 <line:10:6, col:18> 'unsigned long' '='
    |       | |-DeclRefExpr 0x10280a3a8 <col:6> 'unsigned long' lvalue Var 0x128128610 'mm' 'unsigned long'
    |       | `-BinaryOperator 0x10280a420 <col:11, col:18> 'unsigned long' '<<'
    |       |   |-IntegerLiteral 0x10280a3c8 <col:11> 'unsigned long' 1
    |       |   `-ImplicitCastExpr 0x10280a408 <col:18> 'int' <LValueToRValue>
    |       |     `-DeclRefExpr 0x10280a3e8 <col:18> 'int' lvalue Var 0x10280a200 'nn' 'int'
    |       `-IfStmt 0x10280a748 <line:11:6, line:14:6>
    |         |-BinaryOperator 0x10280a670 <line:11:10, col:41> 'int' '&&'
    |         | |-BinaryOperator 0x10280a548 <col:10, col:23> 'int' '<='
    |         | | |-ParenExpr 0x10280a4f0 <col:10, col:18> 'unsigned long'
    |         | | | `-BinaryOperator 0x10280a4d0 <col:11, col:16> 'unsigned long' '-'
    |         | | |   |-ImplicitCastExpr 0x10280a4a0 <col:11> 'unsigned long' <LValueToRValue>
    |         | | |   | `-DeclRefExpr 0x10280a460 <col:11> 'unsigned long' lvalue Var 0x128128610 'mm' 'unsigned long'
    |         | | |   `-ImplicitCastExpr 0x10280a4b8 <col:16> 'unsigned long' <IntegralCast>
    |         | | |     `-IntegerLiteral 0x10280a480 <col:16> 'int' 16
    |         | | `-ImplicitCastExpr 0x10280a530 <col:23> 'unsigned long' <LValueToRValue>
    |         | |   `-DeclRefExpr 0x10280a510 <col:23> 'unsigned long' lvalue Var 0x128128500 'lv' 'unsigned long'
    |         | `-BinaryOperator 0x10280a650 <col:29, col:41> 'int' '>'
    |         |   |-ParenExpr 0x10280a5f8 <col:29, col:37> 'unsigned long'
    |         |   | `-BinaryOperator 0x10280a5d8 <col:30, col:35> 'unsigned long' '+'
    |         |   |   |-ImplicitCastExpr 0x10280a5a8 <col:30> 'unsigned long' <LValueToRValue>
    |         |   |   | `-DeclRefExpr 0x10280a568 <col:30> 'unsigned long' lvalue Var 0x128128610 'mm' 'unsigned long'
    |         |   |   `-ImplicitCastExpr 0x10280a5c0 <col:35> 'unsigned long' <IntegralCast>
    |         |   |     `-IntegerLiteral 0x10280a588 <col:35> 'int' 16
    |         |   `-ImplicitCastExpr 0x10280a638 <col:41> 'unsigned long' <LValueToRValue>
    |         |     `-DeclRefExpr 0x10280a618 <col:41> 'unsigned long' lvalue Var 0x128128500 'lv' 'unsigned long'
    |         `-CompoundStmt 0x10280a728 <col:45, line:14:6>
    |           |-BinaryOperator 0x10280a700 <line:12:3, col:12> 'const char *' '='
    |           | |-DeclRefExpr 0x10280a690 <col:3> 'const char *' lvalue Var 0x1281282b8 'result' 'const char *'
    |           | `-ImplicitCastExpr 0x10280a6e8 <col:12> 'const char *' <NoOp>
    |           |   `-ImplicitCastExpr 0x10280a6d0 <col:12> 'char *' <ArrayToPointerDecay>
    |           |     `-StringLiteral 0x10280a6b0 <col:12> 'char[4]' lvalue "STR"
    |           `-BreakStmt 0x10280a720 <line:13:3>
    `-ReturnStmt 0x10280ac90 <line:17:5, col:12>
      `-ImplicitCastExpr 0x10280a850 <col:12> 'int' <PointerToIntegral>
        `-ImplicitCastExpr 0x10280a838 <col:12> 'const char *' <LValueToRValue>
          `-DeclRefExpr 0x10280a818 <col:12> 'const char *' lvalue Var 0x1281282b8 'result' 'const char *'
