`-FunctionDecl 0x11e80dee8  line:1:1 event_raise 'int (char *, const char *, char *)'
  |-ParmVarDecl 0x11e80dcf0 <col:13, col:22> col:22 used action 'char *'
  |-ParmVarDecl 0x11e80dd70 <col:30, col:45> col:45 used event 'const char *'
  |-ParmVarDecl 0x11e80ddf0 <col:52, col:61> col:61 used ev_data 'char *'
  `-CompoundStmt 0x11e829358 <line:2:1, line:30:1>
    |-DeclStmt 0x11e80e070 <line:3:1, col:11>
    | `-VarDecl 0x11e80e008 <col:1, col:10> col:10 used s 'char *'
    `-IfStmt 0x11e829338 <line:4:1, line:28:3>
      |-ImplicitCastExpr 0x11e80e0a8 <line:4:5> 'char *' <LValueToRValue>
      | `-DeclRefExpr 0x11e80e088 <col:5> 'char *' lvalue ParmVar 0x11e80dcf0 'action' 'char *'
      `-CompoundStmt 0x11e829300 <line:5:3, line:28:3>
        |-CallExpr 0x11e80e250 <line:6:3, col:18> '<dependent type>' contains-errors
        | |-DeclRefExpr 0x11e80e1d0 <col:3> 'int ()' Function 0x11e80e118 'DEBUG' 'int ()'
        | `-RecoveryExpr 0x11e80e230 <col:9> '<dependent type>' contains-errors lvalue
        |-CallExpr 0x11e828498 <line:7:5, line:9:35> '<dependent type>' contains-errors
        | |-DeclRefExpr 0x11e80e358 <line:7:5> 'int ()' Function 0x11e80e2a0 'debug_printf' 'int ()'
        | |-StringLiteral 0x11e80e3c0 <col:18> 'char[4]' lvalue "STR"
        | |-DeclRefExpr 0x11e80e3e0 <line:8:7> 'const char *' lvalue ParmVar 0x11e80dd70 'event' 'const char *'
        | |-DeclRefExpr 0x11e828400 <line:9:7> 'char *' lvalue ParmVar 0x11e80dcf0 'action' 'char *'
        | `-RecoveryExpr 0x11e828478 <col:15> '<dependent type>' contains-errors lvalue
        |-BinaryOperator 0x11e828550 <line:12:3, col:16> 'char *' '='
        | |-DeclRefExpr 0x11e8284f8 <col:3> 'char *' lvalue ParmVar 0x11e80ddf0 'ev_data' 'char *'
        | `-ImplicitCastExpr 0x11e828538 <col:16> 'char *' <LValueToRValue>
        |   `-DeclRefExpr 0x11e828518 <col:16> 'char *' lvalue ParmVar 0x11e80ddf0 'ev_data' 'char *'
        |-IfStmt 0x11e829150 <line:14:3, line:17:51>
        | |-BinaryOperator 0x11e828e10 <line:14:7, col:40> 'int' contains-errors '&&'
        | | |-UnaryOperator 0x11e828da8 <col:7, col:34> 'int' prefix '!' cannot overflow
        | | | `-ParenExpr 0x11e828d88 <col:8, col:34> 'char *'
        | | |   `-BinaryOperator 0x11e828d68 <col:9, col:33> 'char *' '='
        | | |     |-DeclRefExpr 0x11e828570 <col:9> 'char *' lvalue Var 0x11e80e008 's' 'char *'
        | | |     `-ImplicitCastExpr 0x11e828d50 <col:13, col:33> 'char *' <IntegralToPointer>
        | | |       `-CallExpr 0x11e828d10 <col:13, col:33> 'int'
        | | |         |-ImplicitCastExpr 0x11e828cf8 <col:13> 'int (*)()' <FunctionToPointerDecay>
        | | |         | `-DeclRefExpr 0x11e828670 <col:13> 'int ()' Function 0x11e8285b8 'expand_string' 'int ()'
        | | |         `-ImplicitCastExpr 0x11e828d38 <col:27> 'char *' <LValueToRValue>
        | | |           `-DeclRefExpr 0x11e828690 <col:27> 'char *' lvalue ParmVar 0x11e80dcf0 'action' 'char *'
        | | `-UnaryOperator 0x11e828df8 <col:39, col:40> '<dependent type>' contains-errors prefix '*' cannot overflow
        | |   `-ImplicitCastExpr 0x11e828de0 <col:40> '<dependent type>' contains-errors <LValueToRValue>
        | |     `-RecoveryExpr 0x11e828dc0 <col:40> '<dependent type>' contains-errors lvalue
        | `-CallExpr 0x11e829100 <line:15:5, line:17:51> '<dependent type>' contains-errors
        |   |-DeclRefExpr 0x11e828f10 <line:15:5> 'int ()' Function 0x11e828e58 'log_write' 'int ()'
        |   |-IntegerLiteral 0x11e828f30 <col:15> 'int' 0
        |   |-BinaryOperator 0x11e8290a0 <col:18, col:27> '<dependent type>' contains-errors '|'
        |   | |-RecoveryExpr 0x11e829060 <col:18> '<dependent type>' contains-errors lvalue
        |   | `-RecoveryExpr 0x11e829080 <col:27> '<dependent type>' contains-errors lvalue
        |   |-StringLiteral 0x11e828fa0 <line:16:7> 'char[4]' lvalue "STR"
        |   |-DeclRefExpr 0x11e828fc0 <line:17:7> 'const char *' lvalue ParmVar 0x11e80dd70 'event' 'const char *'
        |   |-RecoveryExpr 0x11e8290c0 <col:14> '<dependent type>' contains-errors lvalue
        |   `-RecoveryExpr 0x11e8290e0 <col:30> '<dependent type>' contains-errors lvalue
        `-IfStmt 0x11e8292e0 <line:22:3, line:27:5>
          |-BinaryOperator 0x11e829228 <line:22:7, col:13> 'int' '&&'
          | |-ImplicitCastExpr 0x11e8291e0 <col:7> 'char *' <LValueToRValue>
          | | `-DeclRefExpr 0x11e829170 <col:7> 'char *' lvalue Var 0x11e80e008 's' 'char *'
          | `-ImplicitCastExpr 0x11e829210 <col:12, col:13> 'int' <IntegralCast>
          |   `-ImplicitCastExpr 0x11e8291f8 <col:12, col:13> 'char' <LValueToRValue>
          |     `-UnaryOperator 0x11e8291c8 <col:12, col:13> 'char' lvalue prefix '*' cannot overflow
          |       `-ImplicitCastExpr 0x11e8291b0 <col:13> 'char *' <LValueToRValue>
          |         `-DeclRefExpr 0x11e829190 <col:13> 'char *' lvalue Var 0x11e80e008 's' 'char *'
          `-CompoundStmt 0x11e8292c8 <line:23:5, line:27:5>
            `-ReturnStmt 0x11e8292b8 <line:26:5, col:12>
              `-ImplicitCastExpr 0x11e8292a0 <col:12> 'int' <PointerToIntegral>
                `-ImplicitCastExpr 0x11e829288 <col:12> 'char *' <LValueToRValue>
                  `-DeclRefExpr 0x11e829268 <col:12> 'char *' lvalue Var 0x11e80e008 's' 'char *'
