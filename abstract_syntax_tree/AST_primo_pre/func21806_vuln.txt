`-FunctionDecl 0x14e8fa4c0  line:1:13 opl3_panning 'void (int, int, int)' static
  |-ParmVarDecl 0x14e8fa2d8 <col:26, col:30> col:30 used dev 'int'
  |-ParmVarDecl 0x14e8fa358 <col:35, col:39> col:39 used voice 'int'
  |-ParmVarDecl 0x14e8fa3d8 <col:46, col:50> col:50 used value 'int'
  `-CompoundStmt 0x14e912d80 <line:2:1, line:4:1>
    `-BinaryOperator 0x14e912d60 <line:3:2, col:29> '<dependent type>' contains-errors '='
      |-CXXDependentScopeMemberExpr 0x14e912cf8 <col:2, col:19> '<dependent type>' contains-errors lvalue .panning
      | `-ArraySubscriptExpr 0x14e912cd8 <col:2, col:17> '<dependent type>' contains-errors lvalue
      |   |-ImplicitCastExpr 0x14e912ca8 <col:2, col:8> '<dependent type>' contains-errors <LValueToRValue>
      |   | `-RecoveryExpr 0x14e912c60 <col:2, col:8> '<dependent type>' contains-errors lvalue
      |   |   `-DeclRefExpr 0x14e8fa5e0 <col:2> 'int' lvalue ParmVar 0x14e8fa2d8 'dev' 'int'
      |   `-ImplicitCastExpr 0x14e912cc0 <col:12> 'int' <LValueToRValue>
      |     `-DeclRefExpr 0x14e912c88 <col:12> 'int' lvalue ParmVar 0x14e8fa358 'voice' 'int'
      `-DeclRefExpr 0x14e912d40 <col:29> 'int' lvalue ParmVar 0x14e8fa3d8 'value' 'int'
