`-FunctionDecl 0x148928288  line:1:12 invalid get_refcount 'int (int *, int)' static
  |-ParmVarDecl 0x148928128 <col:25, col:43> col:43 invalid bs 'int *'
  |-ParmVarDecl 0x1489281a8 <col:47, col:55> col:55 invalid cluster_index 'int'
  `-CompoundStmt 0x148942ba0 <line:2:1, line:35:1>
    |-DeclStmt 0x1489284d8 <line:4:5, col:42>
    | |-VarDecl 0x1489283d8 <col:5, col:9> col:9 used refcount_table_index 'int'
    | `-VarDecl 0x148928458 <col:5, col:31> col:31 used block_index 'int'
    |-DeclStmt 0x148928570 <line:6:5, col:12>
    | `-VarDecl 0x148928508 <col:5, col:9> col:9 used ret 'int'
    |-IfStmt 0x1489287d0 <line:11:5, line:12:16>
    | |-BinaryOperator 0x148928780 <line:11:9, col:36> 'int' contains-errors '>='
    | | |-DeclRefExpr 0x148928678 <col:9> 'int' lvalue Var 0x1489283d8 'refcount_table_index' 'int'
    | | `-CXXDependentScopeMemberExpr 0x148928738 <col:33, col:36> '<dependent type>' contains-errors lvalue ->refcount_table_size
    | |   `-RecoveryExpr 0x148928718 <col:33> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x1489287c0 <line:12:9, col:16>
    |   `-IntegerLiteral 0x1489287a0 <col:16> 'int' 0
    |-IfStmt 0x148942360 <line:15:5, line:16:16>
    | |-UnaryOperator 0x148942318 <line:15:9, col:10> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x148942300 <col:10> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x1489422e0 <col:10> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x148942350 <line:16:9, col:16>
    |   `-IntegerLiteral 0x148942330 <col:16> 'int' 0
    |-IfStmt 0x148942710 <line:20:5, line:22:5>
    | |-BinaryOperator 0x148942690 <line:20:9, col:15> 'int' '<'
    | | |-ImplicitCastExpr 0x148942678 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x148942638 <col:9> 'int' lvalue Var 0x148928508 'ret' 'int'
    | | `-IntegerLiteral 0x148942658 <col:15> 'int' 0
    | `-CompoundStmt 0x1489426f8 <col:18, line:22:5>
    |   `-ReturnStmt 0x1489426e8 <line:21:9, col:16>
    |     `-ImplicitCastExpr 0x1489426d0 <col:16> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x1489426b0 <col:16> 'int' lvalue Var 0x148928508 'ret' 'int'
    `-IfStmt 0x148942b80 <line:30:5, line:32:5>
      |-BinaryOperator 0x148942b00 <line:30:9, col:15> 'int' '<'
      | |-ImplicitCastExpr 0x148942ae8 <col:9> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x148942aa8 <col:9> 'int' lvalue Var 0x148928508 'ret' 'int'
      | `-IntegerLiteral 0x148942ac8 <col:15> 'int' 0
      `-CompoundStmt 0x148942b68 <col:18, line:32:5>
        `-ReturnStmt 0x148942b58 <line:31:9, col:16>
          `-ImplicitCastExpr 0x148942b40 <col:16> 'int' <LValueToRValue>
            `-DeclRefExpr 0x148942b20 <col:16> 'int' lvalue Var 0x148928508 'ret' 'int'
