`-FunctionDecl 0x14700de88  line:1:14 invalid theme_format_compress_colors 'char *(int *, const char *)' static
  |-ParmVarDecl 0x14700dd28 <col:43, col:54> col:54 invalid theme 'int *'
  |-ParmVarDecl 0x14700dda8 <col:61, col:73> col:73 used format 'const char *'
  `-CompoundStmt 0x150009740 <line:2:1, line:50:1>
    |-DeclStmt 0x14700dfd8 <line:4:2, col:11>
    | `-VarDecl 0x14700df70 <col:2, col:8> col:8 used ret 'char *'
    |-DeclStmt 0x14700e0f8 <line:5:2, col:23>
    | |-VarDecl 0x14700e000 <col:2, col:7> col:7 used last_fg 'char'
    | `-VarDecl 0x14700e078 <col:2, col:16> col:16 used last_bg 'char'
    |-BinaryOperator 0x14700e360 <line:9:2, col:22> 'char' '='
    | |-DeclRefExpr 0x14700e2d0 <col:2> 'char' lvalue Var 0x14700e000 'last_fg' 'char'
    | `-BinaryOperator 0x14700e340 <col:12, col:22> 'char' '='
    |   |-DeclRefExpr 0x14700e2f0 <col:12> 'char' lvalue Var 0x14700e078 'last_bg' 'char'
    |   `-ImplicitCastExpr 0x14700e328 <col:22> 'char' <IntegralCast>
    |     `-CharacterLiteral 0x14700e310 <col:22> 'int' 0
    |-WhileStmt 0x1500093e0 <line:10:2, line:45:2>
    | |-BinaryOperator 0x146922c18 <line:10:9, col:20> 'int' '!='
    | | |-ImplicitCastExpr 0x146922c00 <col:9, col:10> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x14700e3e8 <col:9, col:10> 'char' <LValueToRValue>
    | | |   `-UnaryOperator 0x14700e3b8 <col:9, col:10> 'const char' lvalue prefix '*' cannot overflow
    | | |     `-ImplicitCastExpr 0x14700e3a0 <col:10> 'const char *' <LValueToRValue>
    | | |       `-DeclRefExpr 0x14700e380 <col:10> 'const char *' lvalue ParmVar 0x14700dda8 'format' 'const char *'
    | | `-CharacterLiteral 0x14700e3d0 <col:20> 'int' 0
    | `-CompoundStmt 0x1500093c8 <col:26, line:45:2>
    |   `-IfStmt 0x150009398 <line:11:3, line:44:3> has_else
    |     |-BinaryOperator 0x146922cd0 <line:11:7, col:18> 'int' '=='
    |     | |-ImplicitCastExpr 0x146922cb8 <col:7, col:8> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x146922ca0 <col:7, col:8> 'char' <LValueToRValue>
    |     | |   `-UnaryOperator 0x146922c70 <col:7, col:8> 'const char' lvalue prefix '*' cannot overflow
    |     | |     `-ImplicitCastExpr 0x146922c58 <col:8> 'const char *' <LValueToRValue>
    |     | |       `-DeclRefExpr 0x146922c38 <col:8> 'const char *' lvalue ParmVar 0x14700dda8 'format' 'const char *'
    |     | `-CharacterLiteral 0x146922c88 <col:18> 'int' 36
    |     |-CompoundStmt 0x146922fa8 <col:23, line:15:3>
    |     | |-CallExpr 0x146922ec8 <line:13:4, col:45> '<dependent type>' contains-errors
    |     | | |-DeclRefExpr 0x146922dd0 <col:4> 'int ()' Function 0x146922d18 'theme_format_append_variable' 'int ()'
    |     | | |-RecoveryExpr 0x146922ea8 <col:33> '<dependent type>' contains-errors lvalue
    |     | | `-UnaryOperator 0x146922e60 <col:38, col:39> 'const char **' prefix '&' cannot overflow
    |     | |   `-DeclRefExpr 0x146922e08 <col:39> 'const char *' lvalue ParmVar 0x14700dda8 'format' 'const char *'
    |     | `-BinaryOperator 0x146922f88 <line:14:25, col:45> 'char' '='
    |     |   |-DeclRefExpr 0x146922ef8 <col:25> 'char' lvalue Var 0x14700e000 'last_fg' 'char'
    |     |   `-BinaryOperator 0x146922f68 <col:35, col:45> 'char' '='
    |     |     |-DeclRefExpr 0x146922f18 <col:35> 'char' lvalue Var 0x14700e078 'last_bg' 'char'
    |     |     `-ImplicitCastExpr 0x146922f50 <col:45> 'char' <IntegralCast>
    |     |       `-CharacterLiteral 0x146922f38 <col:45> 'int' 0
    |     `-IfStmt 0x150009368 <line:15:10, line:44:3> has_else
    |       |-BinaryOperator 0x146923060 <line:15:14, col:25> 'int' '!='
    |       | |-ImplicitCastExpr 0x146923048 <col:14, col:15> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x146923030 <col:14, col:15> 'char' <LValueToRValue>
    |       | |   `-UnaryOperator 0x146923000 <col:14, col:15> 'const char' lvalue prefix '*' cannot overflow
    |       | |     `-ImplicitCastExpr 0x146922fe8 <col:15> 'const char *' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x146922fc8 <col:15> 'const char *' lvalue ParmVar 0x14700dda8 'format' 'const char *'
    |       | `-CharacterLiteral 0x146923018 <col:25> 'int' 37
    |       |-CompoundStmt 0x1469232d0 <col:30, line:19:3>
    |       | |-CallExpr 0x146923268 <line:17:4, col:34> '<dependent type>' contains-errors
    |       | | |-DeclRefExpr 0x146923160 <col:4> 'int ()' Function 0x1469230a8 'g_string_append_c' 'int ()'
    |       | | |-RecoveryExpr 0x146923218 <col:22> '<dependent type>' contains-errors lvalue
    |       | | `-UnaryOperator 0x146923250 <col:27, col:28> 'const char' lvalue prefix '*' cannot overflow
    |       | |   `-ImplicitCastExpr 0x146923238 <col:28> 'const char *' <LValueToRValue>
    |       | |     `-DeclRefExpr 0x146923198 <col:28> 'const char *' lvalue ParmVar 0x14700dda8 'format' 'const char *'
    |       | `-UnaryOperator 0x1469232b8 <line:18:4, col:10> 'const char *' postfix '++'
    |       |   `-DeclRefExpr 0x146923298 <col:4> 'const char *' lvalue ParmVar 0x14700dda8 'format' 'const char *'
    |       `-CompoundStmt 0x150009340 <line:19:10, line:44:3>
    |         |-UnaryOperator 0x146923310 <line:21:4, col:10> 'const char *' postfix '++'
    |         | `-DeclRefExpr 0x1469232f0 <col:4> 'const char *' lvalue ParmVar 0x14700dda8 'format' 'const char *'
    |         |-IfStmt 0x1500092d8 <line:22:4, line:42:4> has_else
    |         | |-CallExpr 0x146923508 <line:22:8, col:47> 'int'
    |         | | |-ImplicitCastExpr 0x1469234f0 <col:8> 'int (*)()' <FunctionToPointerDecay>
    |         | | | `-DeclRefExpr 0x146923408 <col:8> 'int ()' Function 0x146923350 'IS_OLD_FORMAT' 'int ()'
    |         | | |-ImplicitCastExpr 0x146923558 <col:22, col:23> 'int' <IntegralCast>
    |         | | | `-ImplicitCastExpr 0x146923540 <col:22, col:23> 'char' <LValueToRValue>
    |         | | |   `-UnaryOperator 0x146923460 <col:22, col:23> 'const char' lvalue prefix '*' cannot overflow
    |         | | |     `-ImplicitCastExpr 0x146923448 <col:23> 'const char *' <LValueToRValue>
    |         | | |       `-DeclRefExpr 0x146923428 <col:23> 'const char *' lvalue ParmVar 0x14700dda8 'format' 'const char *'
    |         | | |-ImplicitCastExpr 0x146923588 <col:31> 'int' <IntegralCast>
    |         | | | `-ImplicitCastExpr 0x146923570 <col:31> 'char' <LValueToRValue>
    |         | | |   `-DeclRefExpr 0x146923478 <col:31> 'char' lvalue Var 0x14700e000 'last_fg' 'char'
    |         | | `-ImplicitCastExpr 0x1469235b8 <col:40> 'int' <IntegralCast>
    |         | |   `-ImplicitCastExpr 0x1469235a0 <col:40> 'char' <LValueToRValue>
    |         | |     `-DeclRefExpr 0x146923498 <col:40> 'char' lvalue Var 0x14700e078 'last_bg' 'char'
    |         | |-CompoundStmt 0x1469235d0 <col:50, line:24:4>
    |         | `-IfStmt 0x1500092a8 <col:11, line:42:4> has_else
    |         |   |-BinaryOperator 0x146923ba0 <line:24:15, line:27:43> 'int' '&&'
    |         |   | |-BinaryOperator 0x1469239a8 <line:24:15, line:26:35> 'int' '&&'
    |         |   | | |-BinaryOperator 0x146923880 <line:24:15, line:25:21> 'int' '&&'
    |         |   | | | |-CallExpr 0x146923748 <line:24:15, col:40> 'int'
    |         |   | | | | |-ImplicitCastExpr 0x146923730 <col:15> 'int (*)()' <FunctionToPointerDecay>
    |         |   | | | | | `-DeclRefExpr 0x1469236c0 <col:15> 'int ()' Function 0x146923608 'IS_FGCOLOR_FORMAT' 'int ()'
    |         |   | | | | `-ImplicitCastExpr 0x146923788 <col:33, col:34> 'int' <IntegralCast>
    |         |   | | | |   `-ImplicitCastExpr 0x146923770 <col:33, col:34> 'char' <LValueToRValue>
    |         |   | | | |     `-UnaryOperator 0x146923718 <col:33, col:34> 'const char' lvalue prefix '*' cannot overflow
    |         |   | | | |       `-ImplicitCastExpr 0x146923700 <col:34> 'const char *' <LValueToRValue>
    |         |   | | | |         `-DeclRefExpr 0x1469236e0 <col:34> 'const char *' lvalue ParmVar 0x14700dda8 'format' 'const char *'
    |         |   | | | `-BinaryOperator 0x146923860 <line:25:8, col:21> 'int' '=='
    |         |   | | |   |-ImplicitCastExpr 0x146923848 <col:8, col:16> 'int' <IntegralCast>
    |         |   | | |   | `-ImplicitCastExpr 0x146923830 <col:8, col:16> 'char' <LValueToRValue>
    |         |   | | |   |   `-ArraySubscriptExpr 0x1469237f8 <col:8, col:16> 'const char' lvalue
    |         |   | | |   |     |-ImplicitCastExpr 0x1469237e0 <col:8> 'const char *' <LValueToRValue>
    |         |   | | |   |     | `-DeclRefExpr 0x1469237a0 <col:8> 'const char *' lvalue ParmVar 0x14700dda8 'format' 'const char *'
    |         |   | | |   |     `-IntegerLiteral 0x1469237c0 <col:15> 'int' 1
    |         |   | | |   `-CharacterLiteral 0x146923818 <col:21> 'int' 37
    |         |   | | `-CallExpr 0x146923950 <line:26:8, col:35> 'int'
    |         |   | |   |-ImplicitCastExpr 0x146923938 <col:8> 'int (*)()' <FunctionToPointerDecay>
    |         |   | |   | `-DeclRefExpr 0x1469238a0 <col:8> 'int ()' Function 0x146923608 'IS_FGCOLOR_FORMAT' 'int ()'
    |         |   | |   `-ImplicitCastExpr 0x146923990 <col:26, col:34> 'int' <IntegralCast>
    |         |   | |     `-ImplicitCastExpr 0x146923978 <col:26, col:34> 'char' <LValueToRValue>
    |         |   | |       `-ArraySubscriptExpr 0x146923918 <col:26, col:34> 'const char' lvalue
    |         |   | |         |-ImplicitCastExpr 0x146923900 <col:26> 'const char *' <LValueToRValue>
    |         |   | |         | `-DeclRefExpr 0x1469238c0 <col:26> 'const char *' lvalue ParmVar 0x14700dda8 'format' 'const char *'
    |         |   | |         `-IntegerLiteral 0x1469238e0 <col:33> 'int' 2
    |         |   | `-ParenExpr 0x146923b80 <line:27:8, col:43> 'int'
    |         |   |   `-BinaryOperator 0x146923b60 <col:9, col:40> 'int' '||'
    |         |   |     |-BinaryOperator 0x146923a60 <col:9, col:20> 'int' '!='
    |         |   |     | |-ImplicitCastExpr 0x146923a48 <col:9, col:10> 'int' <IntegralCast>
    |         |   |     | | `-ImplicitCastExpr 0x146923a30 <col:9, col:10> 'char' <LValueToRValue>
    |         |   |     | |   `-UnaryOperator 0x146923a00 <col:9, col:10> 'const char' lvalue prefix '*' cannot overflow
    |         |   |     | |     `-ImplicitCastExpr 0x1469239e8 <col:10> 'const char *' <LValueToRValue>
    |         |   |     | |       `-DeclRefExpr 0x1469239c8 <col:10> 'const char *' lvalue ParmVar 0x14700dda8 'format' 'const char *'
    |         |   |     | `-CharacterLiteral 0x146923a18 <col:20> 'int' 110
    |         |   |     `-BinaryOperator 0x146923b40 <col:27, col:40> 'int' '=='
    |         |   |       |-ImplicitCastExpr 0x146923b28 <col:27, col:35> 'int' <IntegralCast>
    |         |   |       | `-ImplicitCastExpr 0x146923b10 <col:27, col:35> 'char' <LValueToRValue>
    |         |   |       |   `-ArraySubscriptExpr 0x146923ad8 <col:27, col:35> 'const char' lvalue
    |         |   |       |     |-ImplicitCastExpr 0x146923ac0 <col:27> 'const char *' <LValueToRValue>
    |         |   |       |     | `-DeclRefExpr 0x146923a80 <col:27> 'const char *' lvalue ParmVar 0x14700dda8 'format' 'const char *'
    |         |   |       |     `-IntegerLiteral 0x146923aa0 <col:34> 'int' 2
    |         |   |       `-CharacterLiteral 0x146923af8 <col:40> 'int' 110
    |         |   |-CompoundStmt 0x146923bc0 <col:46, line:29:4>
    |         |   `-CompoundStmt 0x150009278 <col:11, line:42:4>
    |         |     |-CallExpr 0x150008880 <line:31:5, col:31> '<dependent type>' contains-errors
    |         |     | |-DeclRefExpr 0x146923bd0 <col:5> 'int ()' Function 0x1469230a8 'g_string_append_c' 'int ()'
    |         |     | |-RecoveryExpr 0x150008860 <col:23> '<dependent type>' contains-errors lvalue
    |         |     | `-CharacterLiteral 0x150008818 <col:28> 'int' 37
    |         |     |-CallExpr 0x1500089b8 <line:32:5, col:35> '<dependent type>' contains-errors
    |         |     | |-DeclRefExpr 0x1500088b0 <col:5> 'int ()' Function 0x1469230a8 'g_string_append_c' 'int ()'
    |         |     | |-RecoveryExpr 0x150008968 <col:23> '<dependent type>' contains-errors lvalue
    |         |     | `-UnaryOperator 0x1500089a0 <col:28, col:29> 'const char' lvalue prefix '*' cannot overflow
    |         |     |   `-ImplicitCastExpr 0x150008988 <col:29> 'const char *' <LValueToRValue>
    |         |     |     `-DeclRefExpr 0x1500088e8 <col:29> 'const char *' lvalue ParmVar 0x14700dda8 'format' 'const char *'
    |         |     |-IfStmt 0x150008d90 <line:34:5, line:37:16> has_else
    |         |     | |-CallExpr 0x150008a70 <line:34:9, col:34> 'int'
    |         |     | | |-ImplicitCastExpr 0x150008a58 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |         |     | | | `-DeclRefExpr 0x1500089e8 <col:9> 'int ()' Function 0x146923608 'IS_FGCOLOR_FORMAT' 'int ()'
    |         |     | | `-ImplicitCastExpr 0x150008ab0 <col:27, col:28> 'int' <IntegralCast>
    |         |     | |   `-ImplicitCastExpr 0x150008a98 <col:27, col:28> 'char' <LValueToRValue>
    |         |     | |     `-UnaryOperator 0x150008a40 <col:27, col:28> 'const char' lvalue prefix '*' cannot overflow
    |         |     | |       `-ImplicitCastExpr 0x150008a28 <col:28> 'const char *' <LValueToRValue>
    |         |     | |         `-DeclRefExpr 0x150008a08 <col:28> 'const char *' lvalue ParmVar 0x14700dda8 'format' 'const char *'
    |         |     | |-BinaryOperator 0x150008b50 <line:35:6, col:17> 'char' '='
    |         |     | | |-DeclRefExpr 0x150008ac8 <col:6> 'char' lvalue Var 0x14700e000 'last_fg' 'char'
    |         |     | | `-ImplicitCastExpr 0x150008b38 <col:16, col:17> 'char' <LValueToRValue>
    |         |     | |   `-UnaryOperator 0x150008b20 <col:16, col:17> 'const char' lvalue prefix '*' cannot overflow
    |         |     | |     `-ImplicitCastExpr 0x150008b08 <col:17> 'const char *' <LValueToRValue>
    |         |     | |       `-DeclRefExpr 0x150008ae8 <col:17> 'const char *' lvalue ParmVar 0x14700dda8 'format' 'const char *'
    |         |     | `-IfStmt 0x150008d70 <line:36:10, line:37:16>
    |         |     |   |-BinaryOperator 0x150008ce0 <line:36:14, col:43> 'int' '||'
    |         |     |   | |-BinaryOperator 0x150008c08 <col:14, col:25> 'int' '=='
    |         |     |   | | |-ImplicitCastExpr 0x150008bf0 <col:14, col:15> 'int' <IntegralCast>
    |         |     |   | | | `-ImplicitCastExpr 0x150008bd8 <col:14, col:15> 'char' <LValueToRValue>
    |         |     |   | | |   `-UnaryOperator 0x150008ba8 <col:14, col:15> 'const char' lvalue prefix '*' cannot overflow
    |         |     |   | | |     `-ImplicitCastExpr 0x150008b90 <col:15> 'const char *' <LValueToRValue>
    |         |     |   | | |       `-DeclRefExpr 0x150008b70 <col:15> 'const char *' lvalue ParmVar 0x14700dda8 'format' 'const char *'
    |         |     |   | | `-CharacterLiteral 0x150008bc0 <col:25> 'int' 90
    |         |     |   | `-BinaryOperator 0x150008cc0 <col:32, col:43> 'int' '=='
    |         |     |   |   |-ImplicitCastExpr 0x150008ca8 <col:32, col:33> 'int' <IntegralCast>
    |         |     |   |   | `-ImplicitCastExpr 0x150008c90 <col:32, col:33> 'char' <LValueToRValue>
    |         |     |   |   |   `-UnaryOperator 0x150008c60 <col:32, col:33> 'const char' lvalue prefix '*' cannot overflow
    |         |     |   |   |     `-ImplicitCastExpr 0x150008c48 <col:33> 'const char *' <LValueToRValue>
    |         |     |   |   |       `-DeclRefExpr 0x150008c28 <col:33> 'const char *' lvalue ParmVar 0x14700dda8 'format' 'const char *'
    |         |     |   |   `-CharacterLiteral 0x150008c78 <col:43> 'int' 88
    |         |     |   `-BinaryOperator 0x150008d50 <line:37:6, col:16> 'char' '='
    |         |     |     |-DeclRefExpr 0x150008d00 <col:6> 'char' lvalue Var 0x14700e000 'last_fg' 'char'
    |         |     |     `-ImplicitCastExpr 0x150008d38 <col:16> 'char' <IntegralCast>
    |         |     |       `-CharacterLiteral 0x150008d20 <col:16> 'int' 0
    |         |     `-IfStmt 0x150009248 <line:38:5, line:41:16> has_else
    |         |       |-CallExpr 0x150008f28 <line:38:9, col:34> 'int'
    |         |       | |-ImplicitCastExpr 0x150008f10 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |         |       | | `-DeclRefExpr 0x150008ea0 <col:9> 'int ()' Function 0x150008de8 'IS_BGCOLOR_FORMAT' 'int ()'
    |         |       | `-ImplicitCastExpr 0x150008f68 <col:27, col:28> 'int' <IntegralCast>
    |         |       |   `-ImplicitCastExpr 0x150008f50 <col:27, col:28> 'char' <LValueToRValue>
    |         |       |     `-UnaryOperator 0x150008ef8 <col:27, col:28> 'const char' lvalue prefix '*' cannot overflow
    |         |       |       `-ImplicitCastExpr 0x150008ee0 <col:28> 'const char *' <LValueToRValue>
    |         |       |         `-DeclRefExpr 0x150008ec0 <col:28> 'const char *' lvalue ParmVar 0x14700dda8 'format' 'const char *'
    |         |       |-BinaryOperator 0x150009008 <line:39:6, col:17> 'char' '='
    |         |       | |-DeclRefExpr 0x150008f80 <col:6> 'char' lvalue Var 0x14700e078 'last_bg' 'char'
    |         |       | `-ImplicitCastExpr 0x150008ff0 <col:16, col:17> 'char' <LValueToRValue>
    |         |       |   `-UnaryOperator 0x150008fd8 <col:16, col:17> 'const char' lvalue prefix '*' cannot overflow
    |         |       |     `-ImplicitCastExpr 0x150008fc0 <col:17> 'const char *' <LValueToRValue>
    |         |       |       `-DeclRefExpr 0x150008fa0 <col:17> 'const char *' lvalue ParmVar 0x14700dda8 'format' 'const char *'
    |         |       `-IfStmt 0x150009228 <line:40:10, line:41:16>
    |         |         |-BinaryOperator 0x150009198 <line:40:14, col:43> 'int' '||'
    |         |         | |-BinaryOperator 0x1500090c0 <col:14, col:25> 'int' '=='
    |         |         | | |-ImplicitCastExpr 0x1500090a8 <col:14, col:15> 'int' <IntegralCast>
    |         |         | | | `-ImplicitCastExpr 0x150009090 <col:14, col:15> 'char' <LValueToRValue>
    |         |         | | |   `-UnaryOperator 0x150009060 <col:14, col:15> 'const char' lvalue prefix '*' cannot overflow
    |         |         | | |     `-ImplicitCastExpr 0x150009048 <col:15> 'const char *' <LValueToRValue>
    |         |         | | |       `-DeclRefExpr 0x150009028 <col:15> 'const char *' lvalue ParmVar 0x14700dda8 'format' 'const char *'
    |         |         | | `-CharacterLiteral 0x150009078 <col:25> 'int' 122
    |         |         | `-BinaryOperator 0x150009178 <col:32, col:43> 'int' '=='
    |         |         |   |-ImplicitCastExpr 0x150009160 <col:32, col:33> 'int' <IntegralCast>
    |         |         |   | `-ImplicitCastExpr 0x150009148 <col:32, col:33> 'char' <LValueToRValue>
    |         |         |   |   `-UnaryOperator 0x150009118 <col:32, col:33> 'const char' lvalue prefix '*' cannot overflow
    |         |         |   |     `-ImplicitCastExpr 0x150009100 <col:33> 'const char *' <LValueToRValue>
    |         |         |   |       `-DeclRefExpr 0x1500090e0 <col:33> 'const char *' lvalue ParmVar 0x14700dda8 'format' 'const char *'
    |         |         |   `-CharacterLiteral 0x150009130 <col:43> 'int' 120
    |         |         `-BinaryOperator 0x150009208 <line:41:6, col:16> 'char' '='
    |         |           |-DeclRefExpr 0x1500091b8 <col:6> 'char' lvalue Var 0x14700e078 'last_bg' 'char'
    |         |           `-ImplicitCastExpr 0x1500091f0 <col:16> 'char' <IntegralCast>
    |         |             `-CharacterLiteral 0x1500091d8 <col:16> 'int' 0
    |         `-UnaryOperator 0x150009328 <line:43:4, col:10> 'const char *' postfix '++'
    |           `-DeclRefExpr 0x150009308 <col:4> 'const char *' lvalue ParmVar 0x14700dda8 'format' 'const char *'
    |-BinaryOperator 0x150009508 <line:47:2, col:13> 'char *' contains-errors '='
    | |-DeclRefExpr 0x150009400 <col:2> 'char *' lvalue Var 0x14700df70 'ret' 'char *'
    | `-CXXDependentScopeMemberExpr 0x1500094c0 <col:8, col:13> '<dependent type>' contains-errors lvalue ->str
    |   `-RecoveryExpr 0x1500094a0 <col:8> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x1500096c8 <line:48:9, col:33> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x150009608 <col:9> 'int ()' Function 0x150009550 'g_string_free' 'int ()'
    | |-RecoveryExpr 0x150009688 <col:23> '<dependent type>' contains-errors lvalue
    | `-RecoveryExpr 0x1500096a8 <col:28> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x150009730 <line:49:9, col:16>
      `-ImplicitCastExpr 0x150009718 <col:16> 'char *' <LValueToRValue>
        `-DeclRefExpr 0x1500096f8 <col:16> 'char *' lvalue Var 0x14700df70 'ret' 'char *'
