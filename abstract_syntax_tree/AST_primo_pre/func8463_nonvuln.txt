`-FunctionDecl 0x15a928370  line:1:6 invalid GetBeginAndSizeVectors 'void (int, const int *, const int *, int)'
  |-ParmVarDecl 0x15a9280d8 <col:29, col:33> col:33 used dimensions 'int'
  |-ParmVarDecl 0x15a928170 <col:45, col:65> col:65 referenced invalid begin 'const int *'
  |-ParmVarDecl 0x15a9281f0 <line:2:29, col:49> col:49 referenced invalid size 'const int *'
  |-ParmVarDecl 0x15a928270 <col:55, <invalid sloc>> col:58 invalid 'int'
  `-CompoundStmt 0x15b00a3c0 <line:3:54, line:8:1>
    `-ForStmt 0x15b00a388 <line:4:3, line:7:3>
      |-DeclStmt 0x15a9284d8 <line:4:8, col:19>
      | `-VarDecl 0x15a928450 <col:8, col:18> col:12 used idx 'int' cinit
      |   `-IntegerLiteral 0x15a9284b8 <col:18> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x15a928560 <col:21, col:27> 'int' '<'
      | |-ImplicitCastExpr 0x15a928530 <col:21> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x15a9284f0 <col:21> 'int' lvalue Var 0x15a928450 'idx' 'int'
      | `-ImplicitCastExpr 0x15a928548 <col:27> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x15a928510 <col:27> 'int' lvalue ParmVar 0x15a9280d8 'dimensions' 'int'
      |-UnaryOperator 0x15a9285a0 <col:39, col:41> 'int' prefix '++'
      | `-DeclRefExpr 0x15a928580 <col:41> 'int' lvalue Var 0x15a928450 'idx' 'int'
      `-CompoundStmt 0x15b00a368 <col:46, line:7:3>
        |-CallExpr 0x15b00a070 <line:5:5, col:51> '<dependent type>' contains-errors
        | |-CXXDependentScopeMemberExpr 0x15a928600 <col:5, col:13> '<dependent type>' contains-errors lvalue ->push_back
        | | `-RecoveryExpr 0x15a9285d8 <col:5> '<dependent type>' contains-errors lvalue
        | |   `-DeclRefExpr 0x15a9285b8 <col:5> 'const int *' lvalue ParmVar 0x15a928170 'begin' 'const int *'
        | `-BinaryOperator 0x15b00a050 <col:23, col:50> 'int' contains-errors '>'
        |   |-BinaryOperator 0x15a9287d0 <col:23, col:37> 'int' contains-errors '<'
        |   | |-RecoveryExpr 0x15a928790 <col:23> '<dependent type>' contains-errors lvalue
        |   | `-RecoveryExpr 0x15a9287b0 <col:37> '<dependent type>' contains-errors lvalue
        |   `-ArraySubscriptExpr 0x15b00a030 <col:39, col:50> '<dependent type>' contains-errors lvalue
        |     |-ImplicitCastExpr 0x15b00a000 <col:39, col:45> '<dependent type>' contains-errors <LValueToRValue>
        |     | `-ParenExpr 0x15a9286b8 <col:39, col:45> '<dependent type>' contains-errors lvalue
        |     |   `-RecoveryExpr 0x15a928698 <col:40> '<dependent type>' contains-errors lvalue
        |     `-ImplicitCastExpr 0x15b00a018 <col:47> 'int' <LValueToRValue>
        |       `-DeclRefExpr 0x15a9286d8 <col:47> 'int' lvalue Var 0x15a928450 'idx' 'int'
        `-CallExpr 0x15b00a340 <line:6:5, col:49> '<dependent type>' contains-errors
          |-CXXDependentScopeMemberExpr 0x15b00a0e0 <col:5, col:12> '<dependent type>' contains-errors lvalue ->push_back
          | `-RecoveryExpr 0x15b00a0b8 <col:5> '<dependent type>' contains-errors lvalue
          |   `-DeclRefExpr 0x15b00a098 <col:5> 'const int *' lvalue ParmVar 0x15a9281f0 'size' 'const int *'
          `-BinaryOperator 0x15b00a320 <col:22, col:48> 'int' contains-errors '>'
            |-BinaryOperator 0x15b00a2b0 <col:22, col:36> 'int' contains-errors '<'
            | |-RecoveryExpr 0x15b00a270 <col:22> '<dependent type>' contains-errors lvalue
            | `-RecoveryExpr 0x15b00a290 <col:36> '<dependent type>' contains-errors lvalue
            `-ArraySubscriptExpr 0x15b00a300 <col:38, col:48> '<dependent type>' contains-errors lvalue
              |-ImplicitCastExpr 0x15b00a2d0 <col:38, col:43> '<dependent type>' contains-errors <LValueToRValue>
              | `-ParenExpr 0x15b00a198 <col:38, col:43> '<dependent type>' contains-errors lvalue
              |   `-RecoveryExpr 0x15b00a178 <col:39> '<dependent type>' contains-errors lvalue
              `-ImplicitCastExpr 0x15b00a2e8 <col:45> 'int' <LValueToRValue>
                `-DeclRefExpr 0x15b00a1b8 <col:45> 'int' lvalue Var 0x15a928450 'idx' 'int'
