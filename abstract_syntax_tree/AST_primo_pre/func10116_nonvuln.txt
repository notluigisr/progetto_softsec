`-FunctionDecl 0x15a80de88  line:1:1 invalid e_mail_parser_get_parsers_for_part 'int (int *, int *)'
  |-ParmVarDecl 0x15a80dd28 <col:37, col:50> col:50 referenced invalid parser 'int *'
  |-ParmVarDecl 0x15a80dda8 <line:2:9, col:24> col:24 invalid part 'int *'
  `-CompoundStmt 0x15a827ff0 <line:3:1, line:27:1>
    |-DeclStmt 0x15a80dfd8 <line:5:2, col:18>
    | `-VarDecl 0x15a80df70 <col:2, col:9> col:9 used mime_type 'char *'
    |-CallExpr 0x15a80e350 <line:8:2, col:55> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x15a80e180 <col:2> 'int ()' Function 0x15a80e0c8 'g_return_val_if_fail' 'int ()'
    | |-CallExpr 0x15a80e2c0 <col:24, col:48> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x15a80e280 <col:24> 'int ()' Function 0x15a80e1c8 'E_IS_MAIL_PARSER' 'int ()'
    | | `-RecoveryExpr 0x15a80e2a0 <col:42> '<dependent type>' contains-errors lvalue
    | `-RecoveryExpr 0x15a80e330 <col:51> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x15a827588 <line:9:2, col:55> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x15a80e380 <col:2> 'int ()' Function 0x15a80e0c8 'g_return_val_if_fail' 'int ()'
    | |-CallExpr 0x15a8274f8 <col:24, col:48> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x15a8274b8 <col:24> 'int ()' Function 0x15a827400 'CAMEL_IS_MIME_PART' 'int ()'
    | | `-RecoveryExpr 0x15a8274d8 <col:44> '<dependent type>' contains-errors lvalue
    | `-RecoveryExpr 0x15a827568 <col:51> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x15a827d78 <line:12:2, line:19:2> has_else
    | |-UnaryOperator 0x15a827780 <line:12:6, col:7> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x15a827768 <col:7> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x15a827748 <col:7> '<dependent type>' contains-errors lvalue
    | |-CompoundStmt 0x15a8277d0 <col:11, line:14:2>
    | `-CompoundStmt 0x15a827d50 <col:9, line:19:2>
    |   |-DeclStmt 0x15a827860 <line:15:3, col:13>
    |   | `-VarDecl 0x15a8277f8 <col:3, col:10> col:10 used tmp 'char *'
    |   |-BinaryOperator 0x15a827bb8 <line:17:3, col:39> 'char *' '='
    |   | |-DeclRefExpr 0x15a827998 <col:3> 'char *' lvalue Var 0x15a80df70 'mime_type' 'char *'
    |   | `-ImplicitCastExpr 0x15a827ba0 <col:15, col:39> 'char *' <IntegralToPointer>
    |   |   `-CallExpr 0x15a827b58 <col:15, col:39> 'int'
    |   |     |-ImplicitCastExpr 0x15a827b40 <col:15> 'int (*)()' <FunctionToPointerDecay>
    |   |     | `-DeclRefExpr 0x15a827a98 <col:15> 'int ()' Function 0x15a8279e0 'g_ascii_strdown' 'int ()'
    |   |     |-ImplicitCastExpr 0x15a827b88 <col:32> 'char *' <LValueToRValue>
    |   |     | `-DeclRefExpr 0x15a827ab8 <col:32> 'char *' lvalue Var 0x15a8277f8 'tmp' 'char *'
    |   |     `-UnaryOperator 0x15a827af8 <col:37, col:38> 'int' prefix '-'
    |   |       `-IntegerLiteral 0x15a827ad8 <col:38> 'int' 1
    |   `-CallExpr 0x15a827d10 <line:18:3, col:14> 'int'
    |     |-ImplicitCastExpr 0x15a827cf8 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x15a827cb8 <col:3> 'int ()' Function 0x15a827c00 'g_free' 'int ()'
    |     `-ImplicitCastExpr 0x15a827d38 <col:11> 'char *' <LValueToRValue>
    |       `-DeclRefExpr 0x15a827cd8 <col:11> 'char *' lvalue Var 0x15a8277f8 'tmp' 'char *'
    `-IfStmt 0x15a827fd0 <line:23:2, line:24:20>
      |-RecoveryExpr 0x15a827f18 <line:23:6> '_Bool' contains-errors
      `-CallExpr 0x15a827f90 <line:24:3, col:20> 'int'
        |-ImplicitCastExpr 0x15a827f78 <col:3> 'int (*)()' <FunctionToPointerDecay>
        | `-DeclRefExpr 0x15a827f38 <col:3> 'int ()' Function 0x15a827c00 'g_free' 'int ()'
        `-ImplicitCastExpr 0x15a827fb8 <col:11> 'char *' <LValueToRValue>
          `-DeclRefExpr 0x15a827f58 <col:11> 'char *' lvalue Var 0x15a80df70 'mime_type' 'char *'
