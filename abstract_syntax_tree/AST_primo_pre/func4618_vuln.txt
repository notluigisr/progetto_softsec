`-FunctionDecl 0x15803c518  line:1:12 invalid calcstepsizes 'int (int, int, int *)' static
  |-ParmVarDecl 0x15803c2f0 <col:26, col:40> col:40 invalid refstepsize 'int'
  |-ParmVarDecl 0x15803c370 <col:53, col:57> col:57 used numrlvls 'int'
  |-ParmVarDecl 0x15803c428 <line:2:3, col:18> col:18 referenced invalid stepsizes 'int *'
  `-CompoundStmt 0x158056340 <line:3:1, line:16:1>
    |-DeclStmt 0x15803c658 <line:4:2, col:12>
    | `-VarDecl 0x15803c5f0 <col:2, col:6> col:6 used bandno 'int'
    |-DeclStmt 0x15803c6f0 <line:5:2, col:14>
    | `-VarDecl 0x15803c688 <col:2, col:6> col:6 used numbands 'int'
    |-BinaryOperator 0x158055b00 <line:10:2, col:28> 'int' '='
    | |-DeclRefExpr 0x158055a28 <col:2> 'int' lvalue Var 0x15803c688 'numbands' 'int'
    | `-BinaryOperator 0x158055ae0 <col:13, col:28> 'int' '-'
    |   |-BinaryOperator 0x158055aa0 <col:13, col:17> 'int' '*'
    |   | |-IntegerLiteral 0x158055a48 <col:13> 'int' 3
    |   | `-ImplicitCastExpr 0x158055a88 <col:17> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x158055a68 <col:17> 'int' lvalue ParmVar 0x15803c370 'numrlvls' 'int'
    |   `-IntegerLiteral 0x158055ac0 <col:28> 'int' 2
    |-ForStmt 0x1580562d8 <line:11:2, line:14:2>
    | |-BinaryOperator 0x158055b60 <line:11:7, col:16> 'int' '='
    | | |-DeclRefExpr 0x158055b20 <col:7> 'int' lvalue Var 0x15803c5f0 'bandno' 'int'
    | | `-IntegerLiteral 0x158055b40 <col:16> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x158055bf0 <col:19, col:28> 'int' '<'
    | | |-ImplicitCastExpr 0x158055bc0 <col:19> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x158055b80 <col:19> 'int' lvalue Var 0x15803c5f0 'bandno' 'int'
    | | `-ImplicitCastExpr 0x158055bd8 <col:28> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x158055ba0 <col:28> 'int' lvalue Var 0x15803c688 'numbands' 'int'
    | |-UnaryOperator 0x158055c30 <col:38, col:40> 'int' prefix '++'
    | | `-DeclRefExpr 0x158055c10 <col:40> 'int' lvalue Var 0x15803c5f0 'bandno' 'int'
    | `-CompoundStmt 0x1580562c0 <col:48, line:14:2>
    |   `-BinaryOperator 0x1580562a0 <line:13:3, col:80> '<dependent type>' contains-errors '='
    |     |-ArraySubscriptExpr 0x158056138 <col:3, col:19> '<dependent type>' contains-errors lvalue
    |     | |-ImplicitCastExpr 0x158056108 <col:3> '<dependent type>' contains-errors <LValueToRValue>
    |     | | `-RecoveryExpr 0x158055c68 <col:3> '<dependent type>' contains-errors lvalue
    |     | |   `-DeclRefExpr 0x158055c48 <col:3> 'int *' lvalue ParmVar 0x15803c428 'stepsizes' 'int *'
    |     | `-ImplicitCastExpr 0x158056120 <col:13> 'int' <LValueToRValue>
    |     |   `-DeclRefExpr 0x158055c90 <col:13> 'int' lvalue Var 0x15803c5f0 'bandno' 'int'
    |     `-BinaryOperator 0x158056280 <col:23, col:80> '<dependent type>' contains-errors '|'
    |       |-CallExpr 0x158056178 <col:23, col:40> '<dependent type>' contains-errors
    |       | |-DeclRefExpr 0x158055de0 <col:23> 'int ()' Function 0x158055d28 'JPC_QCX_MANT' 'int ()'
    |       | `-RecoveryExpr 0x158056158 <col:36> '<dependent type>' contains-errors lvalue
    |       `-CallExpr 0x158056258 <col:44, col:80> '<dependent type>' contains-errors
    |         |-DeclRefExpr 0x158055f20 <col:44> 'int ()' Function 0x158055e68 'JPC_QCX_EXPN' 'int ()'
    |         `-BinaryOperator 0x158056238 <col:57, col:79> '<dependent type>' contains-errors '+'
    |           |-RecoveryExpr 0x1580561a0 <col:57> '<dependent type>' contains-errors lvalue
    |           `-BinaryOperator 0x158056218 <col:64, col:79> 'int' '/'
    |             |-ParenExpr 0x1580561f8 <col:64, col:75> 'int'
    |             | `-BinaryOperator 0x1580561d8 <col:65, col:74> 'int' '+'
    |             |   |-ImplicitCastExpr 0x1580561c0 <col:65> 'int' <LValueToRValue>
    |             |   | `-DeclRefExpr 0x158055f58 <col:65> 'int' lvalue Var 0x15803c5f0 'bandno' 'int'
    |             |   `-IntegerLiteral 0x158055f78 <col:74> 'int' 2
    |             `-IntegerLiteral 0x158055ff0 <col:79> 'int' 3
    `-ReturnStmt 0x158056330 <line:15:2, col:9>
      `-IntegerLiteral 0x158056310 <col:9> 'int' 0
