`-FunctionDecl 0x13100dee8  line:1:1 msg_outtrans_special 'int (char *, int, int)'
  |-ParmVarDecl 0x13100dcf0 <line:2:5, col:13> col:13 used strstart 'char *'
  |-ParmVarDecl 0x13100dd70 <line:3:5, col:10> col:10 used from 'int'
  |-ParmVarDecl 0x13100ddf0 <line:4:5, col:10> col:10 used maxlen 'int'
  `-CompoundStmt 0x13102b848 <line:5:1, line:35:1>
    |-DeclStmt 0x13100e0a8 <line:6:5, col:27>
    | `-VarDecl 0x13100e008 <col:5, col:19> col:13 used str 'char *' cinit
    |   `-ImplicitCastExpr 0x13100e090 <col:19> 'char *' <LValueToRValue>
    |     `-DeclRefExpr 0x13100e070 <col:19> 'char *' lvalue ParmVar 0x13100dcf0 'strstart' 'char *'
    |-DeclStmt 0x13100e160 <line:7:5, col:20>
    | `-VarDecl 0x13100e0d8 <col:5, col:19> col:10 used retval 'int' cinit
    |   `-IntegerLiteral 0x13100e140 <col:19> 'int' 0
    |-DeclStmt 0x13100e1f8 <line:8:5, col:15>
    | `-VarDecl 0x13100e190 <col:5, col:11> col:11 used text 'char *'
    |-DeclStmt 0x13100e290 <line:9:5, col:14>
    | `-VarDecl 0x13100e228 <col:5, col:10> col:10 used attr 'int'
    |-DeclStmt 0x13100e328 <line:10:5, col:13>
    | `-VarDecl 0x13100e2c0 <col:5, col:10> col:10 used len 'int'
    |-BinaryOperator 0x131026780 <line:12:5, col:25> 'int' contains-errors '='
    | |-DeclRefExpr 0x13100e340 <col:5> 'int' lvalue Var 0x13100e228 'attr' 'int'
    | `-CallExpr 0x131026758 <col:12, col:25> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x1310266b8 <col:12> 'int ()' Function 0x131026600 'HL_ATTR' 'int ()'
    |   `-RecoveryExpr 0x131026738 <col:20> '<dependent type>' contains-errors lvalue
    |-WhileStmt 0x13102b7e0 <line:13:5, line:33:5>
    | |-BinaryOperator 0x1310268a8 <line:13:12, col:20> 'int' contains-errors '!='
    | | |-UnaryOperator 0x131026870 <col:12, col:13> 'char' lvalue prefix '*' cannot overflow
    | | | `-ImplicitCastExpr 0x131026858 <col:13> 'char *' <LValueToRValue>
    | | |   `-DeclRefExpr 0x1310267a0 <col:13> 'char *' lvalue Var 0x13100e008 'str' 'char *'
    | | `-RecoveryExpr 0x131026888 <col:20> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x13102b7b8 <line:14:5, line:33:5>
    |   |-IfStmt 0x131027368 <line:16:2, line:22:43> has_else
    |   | |-RecoveryExpr 0x131026b68 <line:16:6, col:52> '_Bool' contains-errors
    |   | |-CompoundStmt 0x131026c80 <line:17:2, line:20:2>
    |   | | |-BinaryOperator 0x131026c28 <line:18:6, col:13> 'char *' '='
    |   | | | |-DeclRefExpr 0x131026b88 <col:6> 'char *' lvalue Var 0x13100e190 'text' 'char *'
    |   | | | `-ImplicitCastExpr 0x131026c10 <col:13> 'char *' <ArrayToPointerDecay>
    |   | | |   `-StringLiteral 0x131026bf0 <col:13> 'char[4]' lvalue "STR"
    |   | | `-UnaryOperator 0x131026c68 <line:19:6, col:8> 'char *' prefix '++'
    |   | |   `-DeclRefExpr 0x131026c48 <col:8> 'char *' lvalue Var 0x13100e008 'str' 'char *'
    |   | `-BinaryOperator 0x131027348 <line:22:6, col:43> 'char *' '='
    |   |   |-DeclRefExpr 0x131026ca0 <col:6> 'char *' lvalue Var 0x13100e190 'text' 'char *'
    |   |   `-CStyleCastExpr 0x131027320 <col:13, col:43> 'char *' <IntegralToPointer>
    |   |     `-CallExpr 0x131026e98 <col:21, col:43> 'int'
    |   |       |-ImplicitCastExpr 0x131026e80 <col:21> 'int (*)()' <FunctionToPointerDecay>
    |   |       | `-DeclRefExpr 0x131026da0 <col:21> 'int ()' Function 0x131026ce8 'str2special' 'int ()'
    |   |       |-UnaryOperator 0x131026e10 <col:33, col:34> 'char **' prefix '&' cannot overflow
    |   |       | `-DeclRefExpr 0x131026dc0 <col:34> 'char *' lvalue Var 0x13100e008 'str' 'char *'
    |   |       `-ImplicitCastExpr 0x131026ec8 <col:39> 'int' <LValueToRValue>
    |   |         `-DeclRefExpr 0x131026e28 <col:39> 'int' lvalue ParmVar 0x13100dd70 'from' 'int'
    |   |-IfStmt 0x13102b4b8 <line:27:2, line:28:6>
    |   | |-BinaryOperator 0x13102b490 <line:27:6, col:36> 'int' '&&'
    |   | | |-BinaryOperator 0x13102b388 <col:6, col:15> 'int' '>'
    |   | | | |-ImplicitCastExpr 0x13102b370 <col:6> 'int' <LValueToRValue>
    |   | | | | `-DeclRefExpr 0x13102b330 <col:6> 'int' lvalue ParmVar 0x13100ddf0 'maxlen' 'int'
    |   | | | `-IntegerLiteral 0x13102b350 <col:15> 'int' 0
    |   | | `-BinaryOperator 0x13102b470 <col:20, col:36> 'int' '>='
    |   | |   |-BinaryOperator 0x13102b418 <col:20, col:29> 'int' '+'
    |   | |   | |-ImplicitCastExpr 0x13102b3e8 <col:20> 'int' <LValueToRValue>
    |   | |   | | `-DeclRefExpr 0x13102b3a8 <col:20> 'int' lvalue Var 0x13100e0d8 'retval' 'int'
    |   | |   | `-ImplicitCastExpr 0x13102b400 <col:29> 'int' <LValueToRValue>
    |   | |   |   `-DeclRefExpr 0x13102b3c8 <col:29> 'int' lvalue Var 0x13100e2c0 'len' 'int'
    |   | |   `-ImplicitCastExpr 0x13102b458 <col:36> 'int' <LValueToRValue>
    |   | |     `-DeclRefExpr 0x13102b438 <col:36> 'int' lvalue ParmVar 0x13100ddf0 'maxlen' 'int'
    |   | `-BreakStmt 0x13102b4b0 <line:28:6>
    |   `-CompoundAssignOperator 0x13102b788 <line:32:2, col:12> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |     |-DeclRefExpr 0x13102b730 <col:2> 'int' lvalue Var 0x13100e0d8 'retval' 'int'
    |     `-ImplicitCastExpr 0x13102b770 <col:12> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x13102b750 <col:12> 'int' lvalue Var 0x13100e2c0 'len' 'int'
    `-ReturnStmt 0x13102b838 <line:34:5, col:12>
      `-ImplicitCastExpr 0x13102b820 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x13102b800 <col:12> 'int' lvalue Var 0x13100e0d8 'retval' 'int'
