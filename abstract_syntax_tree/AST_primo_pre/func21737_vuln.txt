`-FunctionDecl 0x14000e0f8  line:1:12 invalid preg_do_repl_func 'int (int *, char *, int *, char **, int, char **)' static
  |-ParmVarDecl 0x14000dd28 <col:30, col:36> col:36 invalid function 'int *'
  |-ParmVarDecl 0x14000dda8 <col:46, col:52> col:52 used subject 'char *'
  |-ParmVarDecl 0x14000de28 <col:61, col:66> col:66 used offsets 'int *'
  |-ParmVarDecl 0x14000ded8 <col:75, col:82> col:82 used subpat_names 'char **'
  |-ParmVarDecl 0x14000df58 <col:96, col:100> col:100 used count 'int'
  |-ParmVarDecl 0x14000dfd8 <col:107, col:114> col:114 used result 'char **'
  `-CompoundStmt 0x140808ce8 <line:2:1, line:35:1>
    |-DeclStmt 0x14000e2b8 <line:6:2, col:19>
    | `-VarDecl 0x14000e250 <col:2, col:9> col:9 used result_len 'int'
    |-DeclStmt 0x14000e350 <line:7:2, col:10>
    | `-VarDecl 0x14000e2e8 <col:2, col:9> col:9 used i 'int'
    |-CallExpr 0x148123360 <line:9:2, col:23> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x1481232e0 <col:2> 'int ()' Function 0x148123228 'MAKE_STD_ZVAL' 'int ()'
    | `-RecoveryExpr 0x148123340 <col:16> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x1481234e8 <line:10:2, col:20> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x148123468 <col:2> 'int ()' Function 0x1481233b0 'array_init' 'int ()'
    | `-RecoveryExpr 0x1481234c8 <col:13> '<dependent type>' contains-errors lvalue
    |-ForStmt 0x1481255c8 <line:11:2, line:16:2>
    | |-BinaryOperator 0x148123550 <line:11:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x148123510 <col:7> 'int' lvalue Var 0x14000e2e8 'i' 'int'
    | | `-IntegerLiteral 0x148123530 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x1481235e0 <col:14, col:18> 'int' '<'
    | | |-ImplicitCastExpr 0x1481235b0 <col:14> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x148123570 <col:14> 'int' lvalue Var 0x14000e2e8 'i' 'int'
    | | `-ImplicitCastExpr 0x1481235c8 <col:18> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x148123590 <col:18> 'int' lvalue ParmVar 0x14000df58 'count' 'int'
    | |-UnaryOperator 0x148123620 <col:25, col:26> 'int' postfix '++'
    | | `-DeclRefExpr 0x148123600 <col:25> 'int' lvalue Var 0x14000e2e8 'i' 'int'
    | `-CompoundStmt 0x1481255a8 <col:30, line:16:2>
    |   |-IfStmt 0x148123fb0 <line:12:3, line:14:3>
    |   | |-ImplicitCastExpr 0x1481236c8 <line:12:7, col:21> 'char *' <LValueToRValue>
    |   | | `-ArraySubscriptExpr 0x1481236a8 <col:7, col:21> 'char *' lvalue
    |   | |   |-ImplicitCastExpr 0x148123678 <col:7> 'char **' <LValueToRValue>
    |   | |   | `-DeclRefExpr 0x148123638 <col:7> 'char **' lvalue ParmVar 0x14000ded8 'subpat_names' 'char **'
    |   | |   `-ImplicitCastExpr 0x148123690 <col:20> 'int' <LValueToRValue>
    |   | |     `-DeclRefExpr 0x148123658 <col:20> 'int' lvalue Var 0x14000e2e8 'i' 'int'
    |   | `-CompoundStmt 0x148123f98 <col:24, line:14:3>
    |   |   `-CallExpr 0x148123f50 <line:13:4, col:110> '<dependent type>' contains-errors
    |   |     |-DeclRefExpr 0x1481237c0 <col:4> 'int ()' Function 0x148123708 'add_assoc_stringl' 'int ()'
    |   |     |-RecoveryExpr 0x148123c98 <col:22> '<dependent type>' contains-errors lvalue
    |   |     |-ArraySubscriptExpr 0x148123ce8 <col:31, col:45> 'char *' lvalue
    |   |     | |-ImplicitCastExpr 0x148123cb8 <col:31> 'char **' <LValueToRValue>
    |   |     | | `-DeclRefExpr 0x1481237f8 <col:31> 'char **' lvalue ParmVar 0x14000ded8 'subpat_names' 'char **'
    |   |     | `-ImplicitCastExpr 0x148123cd0 <col:44> 'int' <LValueToRValue>
    |   |     |   `-DeclRefExpr 0x148123818 <col:44> 'int' lvalue Var 0x14000e2e8 'i' 'int'
    |   |     |-UnaryOperator 0x148123dc8 <col:48, col:70> 'char *' prefix '&' cannot overflow
    |   |     | `-ArraySubscriptExpr 0x148123da8 <col:49, col:70> 'char' lvalue
    |   |     |   |-ImplicitCastExpr 0x148123d78 <col:49> 'char *' <LValueToRValue>
    |   |     |   | `-DeclRefExpr 0x148123888 <col:49> 'char *' lvalue ParmVar 0x14000dda8 'subject' 'char *'
    |   |     |   `-ImplicitCastExpr 0x148123d90 <col:57, col:69> 'int' <LValueToRValue>
    |   |     |     `-ArraySubscriptExpr 0x148123d58 <col:57, col:69> 'int' lvalue
    |   |     |       |-ImplicitCastExpr 0x148123d40 <col:57> 'int *' <LValueToRValue>
    |   |     |       | `-DeclRefExpr 0x1481238a8 <col:57> 'int *' lvalue ParmVar 0x14000de28 'offsets' 'int *'
    |   |     |       `-BinaryOperator 0x148123d20 <col:65, col:68> 'int' '<<'
    |   |     |         |-ImplicitCastExpr 0x148123d08 <col:65> 'int' <LValueToRValue>
    |   |     |         | `-DeclRefExpr 0x1481238c8 <col:65> 'int' lvalue Var 0x14000e2e8 'i' 'int'
    |   |     |         `-IntegerLiteral 0x1481238e8 <col:68> 'int' 1
    |   |     |-BinaryOperator 0x148123f30 <col:74, col:106> 'int' '-'
    |   |     | |-ImplicitCastExpr 0x148123f00 <col:74, col:90> 'int' <LValueToRValue>
    |   |     | | `-ArraySubscriptExpr 0x148123e70 <col:74, col:90> 'int' lvalue
    |   |     | |   |-ImplicitCastExpr 0x148123e58 <col:74> 'int *' <LValueToRValue>
    |   |     | |   | `-DeclRefExpr 0x1481239e0 <col:74> 'int *' lvalue ParmVar 0x14000de28 'offsets' 'int *'
    |   |     | |   `-BinaryOperator 0x148123e38 <col:82, col:89> 'int' '+'
    |   |     | |     |-ParenExpr 0x148123e18 <col:82, col:87> 'int'
    |   |     | |     | `-BinaryOperator 0x148123df8 <col:83, col:86> 'int' '<<'
    |   |     | |     |   |-ImplicitCastExpr 0x148123de0 <col:83> 'int' <LValueToRValue>
    |   |     | |     |   | `-DeclRefExpr 0x148123a00 <col:83> 'int' lvalue Var 0x14000e2e8 'i' 'int'
    |   |     | |     |   `-IntegerLiteral 0x148123a20 <col:86> 'int' 1
    |   |     | |     `-IntegerLiteral 0x148123a98 <col:89> 'int' 1
    |   |     | `-ImplicitCastExpr 0x148123f18 <col:94, col:106> 'int' <LValueToRValue>
    |   |     |   `-ArraySubscriptExpr 0x148123ee0 <col:94, col:106> 'int' lvalue
    |   |     |     |-ImplicitCastExpr 0x148123ec8 <col:94> 'int *' <LValueToRValue>
    |   |     |     | `-DeclRefExpr 0x148123b10 <col:94> 'int *' lvalue ParmVar 0x14000de28 'offsets' 'int *'
    |   |     |     `-BinaryOperator 0x148123ea8 <col:102, col:105> 'int' '<<'
    |   |     |       |-ImplicitCastExpr 0x148123e90 <col:102> 'int' <LValueToRValue>
    |   |     |       | `-DeclRefExpr 0x148123b30 <col:102> 'int' lvalue Var 0x14000e2e8 'i' 'int'
    |   |     |       `-IntegerLiteral 0x148123b50 <col:105> 'int' 1
    |   |     `-IntegerLiteral 0x148123c30 <col:109> 'int' 1
    |   `-CallExpr 0x148125568 <line:15:3, col:96> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x1481240b0 <col:3> 'int ()' Function 0x148123ff8 'add_next_index_stringl' 'int ()'
    |     |-RecoveryExpr 0x148125300 <col:26> '<dependent type>' contains-errors lvalue
    |     |-UnaryOperator 0x1481253e0 <col:35, col:57> 'char *' prefix '&' cannot overflow
    |     | `-ArraySubscriptExpr 0x1481253c0 <col:36, col:57> 'char' lvalue
    |     |   |-ImplicitCastExpr 0x148125390 <col:36> 'char *' <LValueToRValue>
    |     |   | `-DeclRefExpr 0x1481240e8 <col:36> 'char *' lvalue ParmVar 0x14000dda8 'subject' 'char *'
    |     |   `-ImplicitCastExpr 0x1481253a8 <col:44, col:56> 'int' <LValueToRValue>
    |     |     `-ArraySubscriptExpr 0x148125370 <col:44, col:56> 'int' lvalue
    |     |       |-ImplicitCastExpr 0x148125358 <col:44> 'int *' <LValueToRValue>
    |     |       | `-DeclRefExpr 0x148124108 <col:44> 'int *' lvalue ParmVar 0x14000de28 'offsets' 'int *'
    |     |       `-BinaryOperator 0x148125338 <col:52, col:55> 'int' '<<'
    |     |         |-ImplicitCastExpr 0x148125320 <col:52> 'int' <LValueToRValue>
    |     |         | `-DeclRefExpr 0x148124128 <col:52> 'int' lvalue Var 0x14000e2e8 'i' 'int'
    |     |         `-IntegerLiteral 0x148124148 <col:55> 'int' 1
    |     |-BinaryOperator 0x148125548 <col:60, col:92> 'int' '-'
    |     | |-ImplicitCastExpr 0x148125518 <col:60, col:76> 'int' <LValueToRValue>
    |     | | `-ArraySubscriptExpr 0x148125488 <col:60, col:76> 'int' lvalue
    |     | |   |-ImplicitCastExpr 0x148125470 <col:60> 'int *' <LValueToRValue>
    |     | |   | `-DeclRefExpr 0x148125050 <col:60> 'int *' lvalue ParmVar 0x14000de28 'offsets' 'int *'
    |     | |   `-BinaryOperator 0x148125450 <col:68, col:75> 'int' '+'
    |     | |     |-ParenExpr 0x148125430 <col:68, col:73> 'int'
    |     | |     | `-BinaryOperator 0x148125410 <col:69, col:72> 'int' '<<'
    |     | |     |   |-ImplicitCastExpr 0x1481253f8 <col:69> 'int' <LValueToRValue>
    |     | |     |   | `-DeclRefExpr 0x148125070 <col:69> 'int' lvalue Var 0x14000e2e8 'i' 'int'
    |     | |     |   `-IntegerLiteral 0x148125090 <col:72> 'int' 1
    |     | |     `-IntegerLiteral 0x148125108 <col:75> 'int' 1
    |     | `-ImplicitCastExpr 0x148125530 <col:80, col:92> 'int' <LValueToRValue>
    |     |   `-ArraySubscriptExpr 0x1481254f8 <col:80, col:92> 'int' lvalue
    |     |     |-ImplicitCastExpr 0x1481254e0 <col:80> 'int *' <LValueToRValue>
    |     |     | `-DeclRefExpr 0x148125180 <col:80> 'int *' lvalue ParmVar 0x14000de28 'offsets' 'int *'
    |     |     `-BinaryOperator 0x1481254c0 <col:88, col:91> 'int' '<<'
    |     |       |-ImplicitCastExpr 0x1481254a8 <col:88> 'int' <LValueToRValue>
    |     |       | `-DeclRefExpr 0x1481251a0 <col:88> 'int' lvalue Var 0x14000e2e8 'i' 'int'
    |     |       `-IntegerLiteral 0x1481251c0 <col:91> 'int' 1
    |     `-IntegerLiteral 0x1481252a0 <col:95> 'int' 1
    |-IfStmt 0x140808c50 <line:19:2, line:30:2> has_else
    | |-RecoveryExpr 0x1481258b0 <line:19:6, col:119> '_Bool' contains-errors
    | |-CompoundStmt 0x148125e60 <col:131, line:24:2>
    | `-CompoundStmt 0x140808c28 <col:9, line:30:2>
    |   |-IfStmt 0x140808830 <line:25:3, line:27:3>
    |   | |-RecoveryExpr 0x148125e90 <line:25:7, col:20> '_Bool' contains-errors
    |   | `-CompoundStmt 0x140808820 <col:23, line:27:3>
    |   |-BinaryOperator 0x1408089b0 <line:28:3, col:38> 'int' '='
    |   | |-DeclRefExpr 0x140808850 <col:3> 'int' lvalue Var 0x14000e250 'result_len' 'int'
    |   | `-BinaryOperator 0x140808990 <col:16, col:38> 'int' '-'
    |   |   |-ImplicitCastExpr 0x140808960 <col:16, col:25> 'int' <LValueToRValue>
    |   |   | `-ArraySubscriptExpr 0x1408088c8 <col:16, col:25> 'int' lvalue
    |   |   |   |-ImplicitCastExpr 0x1408088b0 <col:16> 'int *' <LValueToRValue>
    |   |   |   | `-DeclRefExpr 0x140808870 <col:16> 'int *' lvalue ParmVar 0x14000de28 'offsets' 'int *'
    |   |   |   `-IntegerLiteral 0x140808890 <col:24> 'int' 1
    |   |   `-ImplicitCastExpr 0x140808978 <col:29, col:38> 'int' <LValueToRValue>
    |   |     `-ArraySubscriptExpr 0x140808940 <col:29, col:38> 'int' lvalue
    |   |       |-ImplicitCastExpr 0x140808928 <col:29> 'int *' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x1408088e8 <col:29> 'int *' lvalue ParmVar 0x14000de28 'offsets' 'int *'
    |   |       `-IntegerLiteral 0x140808908 <col:37> 'int' 0
    |   `-BinaryOperator 0x140808c08 <line:29:3, col:54> 'char *' '='
    |     |-UnaryOperator 0x140808a08 <col:3, col:4> 'char *' lvalue prefix '*' cannot overflow
    |     | `-ImplicitCastExpr 0x1408089f0 <col:4> 'char **' <LValueToRValue>
    |     |   `-DeclRefExpr 0x1408089d0 <col:4> 'char **' lvalue ParmVar 0x14000dfd8 'result' 'char **'
    |     `-ImplicitCastExpr 0x140808bf0 <col:13, col:54> 'char *' <IntegralToPointer>
    |       `-CallExpr 0x140808ba8 <col:13, col:54> 'int'
    |         |-ImplicitCastExpr 0x140808b90 <col:13> 'int (*)()' <FunctionToPointerDecay>
    |         | `-DeclRefExpr 0x140808a20 <col:13> 'int ()' Function 0x148125a48 'estrndup' 'int ()'
    |         |-UnaryOperator 0x140808b28 <col:22, col:41> 'char *' prefix '&' cannot overflow
    |         | `-ArraySubscriptExpr 0x140808b08 <col:23, col:41> 'char' lvalue
    |         |   |-ImplicitCastExpr 0x140808ad8 <col:23> 'char *' <LValueToRValue>
    |         |   | `-DeclRefExpr 0x140808a40 <col:23> 'char *' lvalue ParmVar 0x14000dda8 'subject' 'char *'
    |         |   `-ImplicitCastExpr 0x140808af0 <col:31, col:40> 'int' <LValueToRValue>
    |         |     `-ArraySubscriptExpr 0x140808ab8 <col:31, col:40> 'int' lvalue
    |         |       |-ImplicitCastExpr 0x140808aa0 <col:31> 'int *' <LValueToRValue>
    |         |       | `-DeclRefExpr 0x140808a60 <col:31> 'int *' lvalue ParmVar 0x14000de28 'offsets' 'int *'
    |         |       `-IntegerLiteral 0x140808a80 <col:39> 'int' 0
    |         `-ImplicitCastExpr 0x140808bd8 <col:44> 'int' <LValueToRValue>
    |           `-DeclRefExpr 0x140808b40 <col:44> 'int' lvalue Var 0x14000e250 'result_len' 'int'
    `-ReturnStmt 0x140808cd8 <line:34:2, col:9>
      `-ImplicitCastExpr 0x140808cc0 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x140808ca0 <col:9> 'int' lvalue Var 0x14000e250 'result_len' 'int'
