`-FunctionDecl 0x128128238  line:1:1 SetXtermOSC 'int (int, char *)'
  |-ParmVarDecl 0x1281280d8 <line:2:1, col:5> col:5 used i 'int'
  |-ParmVarDecl 0x128128158 <line:3:1, col:7> col:7 used s 'char *'
  `-CompoundStmt 0x128142430 <line:4:1, line:28:1>
    |-DeclStmt 0x128128638 <line:5:3, line:10:4>
    | `-VarDecl 0x128128428 <line:5:3, col:24> col:16 used oscs 'char *[][2]' static
    |-CallExpr 0x128141800 <line:12:3, col:17> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x128128760 <col:3> 'int ()' Function 0x1281286a8 'ASSERT' 'int ()'
    | `-RecoveryExpr 0x1281287c0 <col:10> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x1281418d0 <line:13:3, line:14:5>
    | |-UnaryOperator 0x1281418a8 <line:13:7, col:8> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x128141890 <col:8> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x128141870 <col:8> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x1281418c0 <line:14:5>
    |-IfStmt 0x1281419f0 <line:15:3, line:16:9>
    | |-UnaryOperator 0x128141928 <line:15:7, col:8> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x128141910 <col:8> 'char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x1281418f0 <col:8> 'char *' lvalue ParmVar 0x128128158 's' 'char *'
    | `-BinaryOperator 0x1281419d0 <line:16:5, col:9> 'char *' '='
    |   |-DeclRefExpr 0x128141940 <col:5> 'char *' lvalue ParmVar 0x128128158 's' 'char *'
    |   `-ImplicitCastExpr 0x1281419b8 <col:9> 'char *' <ArrayToPointerDecay>
    |     `-StringLiteral 0x1281419a0 <col:9> 'char[1]' lvalue ""
    |-IfStmt 0x128141af8 <line:17:3, line:18:5>
    | |-RecoveryExpr 0x128141ac8 <line:17:7, col:27> '_Bool' contains-errors
    | `-ReturnStmt 0x128141ae8 <line:18:5>
    |-IfStmt 0x128141d98 <line:19:3, line:20:17>
    | |-RecoveryExpr 0x128141bc8 <line:19:7, col:30> '_Bool' contains-errors
    | `-CallExpr 0x128141d58 <line:20:5, col:17> 'int'
    |   |-ImplicitCastExpr 0x128141d40 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x128141cc8 <col:5> 'int ()' Function 0x128141c10 'AddStr' 'int ()'
    |   `-ImplicitCastExpr 0x128141d80 <col:12> 'char *' <ArrayToPointerDecay>
    |     `-StringLiteral 0x128141ce8 <col:12> 'char[4]' lvalue "STR"
    |-IfStmt 0x128141fe0 <line:21:3, line:22:18>
    | |-UnaryOperator 0x128141e20 <line:21:7, col:9> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x128141e08 <col:8, col:9> 'char' <LValueToRValue>
    | |   `-UnaryOperator 0x128141df0 <col:8, col:9> 'char' lvalue prefix '*' cannot overflow
    | |     `-ImplicitCastExpr 0x128141dd8 <col:9> 'char *' <LValueToRValue>
    | |       `-DeclRefExpr 0x128141db8 <col:9> 'char *' lvalue ParmVar 0x128128158 's' 'char *'
    | `-BinaryOperator 0x128141fc0 <line:22:5, col:18> 'char *' '='
    |   |-DeclRefExpr 0x128141e38 <col:5> 'char *' lvalue ParmVar 0x128128158 's' 'char *'
    |   `-ImplicitCastExpr 0x128141fa8 <col:9, col:18> 'char *' <LValueToRValue>
    |     `-ArraySubscriptExpr 0x128141f88 <col:9, col:18> 'char *' lvalue
    |       |-ImplicitCastExpr 0x128141f70 <col:9, col:15> 'char **' <ArrayToPointerDecay>
    |       | `-ArraySubscriptExpr 0x128141f00 <col:9, col:15> 'char *[2]' lvalue
    |       |   |-ImplicitCastExpr 0x128141ed0 <col:9> 'char *(*)[2]' <ArrayToPointerDecay>
    |       |   | `-DeclRefExpr 0x128141e58 <col:9> 'char *[][2]' lvalue Var 0x128128428 'oscs' 'char *[][2]'
    |       |   `-ImplicitCastExpr 0x128141ee8 <col:14> 'int' <LValueToRValue>
    |       |     `-DeclRefExpr 0x128141e78 <col:14> 'int' lvalue ParmVar 0x1281280d8 'i' 'int'
    |       `-IntegerLiteral 0x128141f20 <col:17> 'int' 1
    |-CallExpr 0x128142098 <line:24:3, col:15> 'int'
    | |-ImplicitCastExpr 0x128142080 <col:3> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x128142040 <col:3> 'int ()' Function 0x128141c10 'AddStr' 'int ()'
    | `-ImplicitCastExpr 0x1281420c0 <col:10> 'char *' <ArrayToPointerDecay>
    |   `-StringLiteral 0x128142060 <col:10> 'char[4]' lvalue "STR"
    |-CallExpr 0x1281421f8 <line:25:3, col:20> 'int'
    | |-ImplicitCastExpr 0x1281421e0 <col:3> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x1281420d8 <col:3> 'int ()' Function 0x128141c10 'AddStr' 'int ()'
    | `-ImplicitCastExpr 0x128142220 <col:10, col:19> 'char *' <LValueToRValue>
    |   `-ArraySubscriptExpr 0x1281421c0 <col:10, col:19> 'char *' lvalue
    |     |-ImplicitCastExpr 0x1281421a8 <col:10, col:16> 'char **' <ArrayToPointerDecay>
    |     | `-ArraySubscriptExpr 0x128142168 <col:10, col:16> 'char *[2]' lvalue
    |     |   |-ImplicitCastExpr 0x128142138 <col:10> 'char *(*)[2]' <ArrayToPointerDecay>
    |     |   | `-DeclRefExpr 0x1281420f8 <col:10> 'char *[][2]' lvalue Var 0x128128428 'oscs' 'char *[][2]'
    |     |   `-ImplicitCastExpr 0x128142150 <col:15> 'int' <LValueToRValue>
    |     |     `-DeclRefExpr 0x128142118 <col:15> 'int' lvalue ParmVar 0x1281280d8 'i' 'int'
    |     `-IntegerLiteral 0x128142188 <col:18> 'int' 0
    |-CallExpr 0x128142290 <line:26:3, col:11> 'int'
    | |-ImplicitCastExpr 0x128142278 <col:3> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x128142238 <col:3> 'int ()' Function 0x128141c10 'AddStr' 'int ()'
    | `-ImplicitCastExpr 0x1281422b8 <col:10> 'char *' <LValueToRValue>
    |   `-DeclRefExpr 0x128142258 <col:10> 'char *' lvalue ParmVar 0x128128158 's' 'char *'
    `-CallExpr 0x128142408 <line:27:3, col:12> 'int'
      |-ImplicitCastExpr 0x1281423f0 <col:3> 'int (*)()' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x1281423b0 <col:3> 'int ()' Function 0x1281422f8 'AddChar' 'int ()'
      `-IntegerLiteral 0x1281423d0 <col:11> 'int' 7
