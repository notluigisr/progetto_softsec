`-FunctionDecl 0x12100dd98  line:1:12 test_gf2m_mod 'int (void)' static
  `-CompoundStmt 0x1209235b0 <line:2:1, line:39:1>
    |-DeclStmt 0x12100e0c8 <line:4:5, col:21>
    | |-VarDecl 0x12100df20 <col:5, col:9> col:9 used i 'int'
    | |-VarDecl 0x12100dfa0 <col:5, col:12> col:12 used j 'int'
    | `-VarDecl 0x12100e020 <col:5, col:20> col:15 used st 'int' cinit
    |   `-IntegerLiteral 0x12100e088 <col:20> 'int' 0
    |-IfStmt 0x121027eb8 <line:6:5, line:12:14>
    | |-RecoveryExpr 0x121027e30 <line:6:9, line:11:38> '_Bool' contains-errors
    | `-GotoStmt 0x121027ea0 <line:12:9, col:14> 'err' 0x121027e50
    |-IfStmt 0x1210281f0 <line:14:5, line:16:14>
    | |-RecoveryExpr 0x1210281b8 <line:14:9, line:15:53> '_Bool' contains-errors
    | `-GotoStmt 0x1210281d8 <line:16:9, col:14> 'err' 0x121027e50
    |-ForStmt 0x1209232c8 <line:18:5, line:29:5>
    | |-BinaryOperator 0x121028250 <line:18:10, col:14> 'int' '='
    | | |-DeclRefExpr 0x121028210 <col:10> 'int' lvalue Var 0x12100df20 'i' 'int'
    | | `-IntegerLiteral 0x121028230 <col:14> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x1210282e8 <col:17, col:21> 'int' contains-errors '<'
    | | |-DeclRefExpr 0x121028270 <col:17> 'int' lvalue Var 0x12100df20 'i' 'int'
    | | `-RecoveryExpr 0x1210282c8 <col:21> '<dependent type>' contains-errors lvalue
    | |-UnaryOperator 0x121028328 <col:27, col:28> 'int' postfix '++'
    | | `-DeclRefExpr 0x121028308 <col:27> 'int' lvalue Var 0x12100df20 'i' 'int'
    | `-CompoundStmt 0x1209232a8 <col:32, line:29:5>
    |   |-IfStmt 0x1210284f8 <line:19:9, line:20:18>
    |   | |-RecoveryExpr 0x1210284c0 <line:19:13, col:53> '_Bool' contains-errors
    |   | `-GotoStmt 0x1210284e0 <line:20:13, col:18> 'err' 0x121027e50
    |   `-ForStmt 0x120923270 <line:21:9, line:28:9>
    |     |-BinaryOperator 0x121028558 <line:21:14, col:18> 'int' '='
    |     | |-DeclRefExpr 0x121028518 <col:14> 'int' lvalue Var 0x12100dfa0 'j' 'int'
    |     | `-IntegerLiteral 0x121028538 <col:18> 'int' 0
    |     |-<<<NULL>>>
    |     |-BinaryOperator 0x1210285d0 <col:21, col:25> 'int' '<'
    |     | |-ImplicitCastExpr 0x1210285b8 <col:21> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x121028578 <col:21> 'int' lvalue Var 0x12100dfa0 'j' 'int'
    |     | `-IntegerLiteral 0x121028598 <col:25> 'int' 2
    |     |-UnaryOperator 0x121028610 <col:28, col:29> 'int' postfix '++'
    |     | `-DeclRefExpr 0x1210285f0 <col:28> 'int' lvalue Var 0x12100dfa0 'j' 'int'
    |     `-CompoundStmt 0x120923258 <col:33, line:28:9>
    |       `-IfStmt 0x120923238 <line:22:13, line:27:22>
    |         |-RecoveryExpr 0x120923200 <line:22:17, line:26:42> '_Bool' contains-errors
    |         `-GotoStmt 0x120923220 <line:27:17, col:22> 'err' 0x121027e50
    |-BinaryOperator 0x120923340 <line:30:5, col:10> 'int' '='
    | |-DeclRefExpr 0x120923300 <col:5> 'int' lvalue Var 0x12100e020 'st' 'int'
    | `-IntegerLiteral 0x120923320 <col:10> 'int' 1
    |-LabelStmt 0x120923468 <line:31:2, col:5> 'err'
    | `-NullStmt 0x120923460 <col:5>
    `-ReturnStmt 0x1209235a0 <line:38:5, col:12>
      `-ImplicitCastExpr 0x120923588 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x120923568 <col:12> 'int' lvalue Var 0x12100e020 'st' 'int'
