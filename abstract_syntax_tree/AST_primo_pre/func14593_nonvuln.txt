`-FunctionDecl 0x1571281a8  line:1:1 chop 'int (char *)'
  |-ParmVarDecl 0x1571280d8 <col:6, col:12> col:12 used s 'char *'
  `-CompoundStmt 0x157140dc8 <line:2:1, line:13:1>
    |-DeclStmt 0x157128358 <line:3:2, col:13>
    | `-VarDecl 0x1571282b8 <col:2, col:12> col:8 used t 'char *' cinit
    |   `-ImplicitCastExpr 0x157128340 <col:12> 'char *' <LValueToRValue>
    |     `-DeclRefExpr 0x157128320 <col:12> 'char *' lvalue ParmVar 0x1571280d8 's' 'char *'
    |-WhileStmt 0x157140d48 <line:4:2, line:10:2>
    | |-ImplicitCastExpr 0x1571283c0 <line:4:9, col:10> 'char' <LValueToRValue>
    | | `-UnaryOperator 0x1571283a8 <col:9, col:10> 'char' lvalue prefix '*' cannot overflow
    | |   `-ImplicitCastExpr 0x157128390 <col:10> 'char *' <LValueToRValue>
    | |     `-DeclRefExpr 0x157128370 <col:10> 'char *' lvalue Var 0x1571282b8 't' 'char *'
    | `-CompoundStmt 0x157140d28 <col:13, line:10:2>
    |   |-IfStmt 0x157140cd0 <line:5:3, line:8:3>
    |   | |-BinaryOperator 0x157128548 <line:5:7, col:27> 'int' '||'
    |   | | |-BinaryOperator 0x157128470 <col:7, col:13> 'int' '=='
    |   | | | |-ImplicitCastExpr 0x157128458 <col:7, col:8> 'int' <IntegralCast>
    |   | | | | `-ImplicitCastExpr 0x157128440 <col:7, col:8> 'char' <LValueToRValue>
    |   | | | |   `-UnaryOperator 0x157128410 <col:7, col:8> 'char' lvalue prefix '*' cannot overflow
    |   | | | |     `-ImplicitCastExpr 0x1571283f8 <col:8> 'char *' <LValueToRValue>
    |   | | | |       `-DeclRefExpr 0x1571283d8 <col:8> 'char *' lvalue Var 0x1571282b8 't' 'char *'
    |   | | | `-CharacterLiteral 0x157128428 <col:13> 'int' 10
    |   | | `-BinaryOperator 0x157128528 <col:21, col:27> 'int' '=='
    |   | |   |-ImplicitCastExpr 0x157128510 <col:21, col:22> 'int' <IntegralCast>
    |   | |   | `-ImplicitCastExpr 0x1571284f8 <col:21, col:22> 'char' <LValueToRValue>
    |   | |   |   `-UnaryOperator 0x1571284c8 <col:21, col:22> 'char' lvalue prefix '*' cannot overflow
    |   | |   |     `-ImplicitCastExpr 0x1571284b0 <col:22> 'char *' <LValueToRValue>
    |   | |   |       `-DeclRefExpr 0x157128490 <col:22> 'char *' lvalue Var 0x1571282b8 't' 'char *'
    |   | |   `-CharacterLiteral 0x1571284e0 <col:27> 'int' 13
    |   | `-CompoundStmt 0x157140cb0 <col:33, line:8:3>
    |   |   |-BinaryOperator 0x1571285e8 <line:6:4, col:9> 'char' '='
    |   |   | |-UnaryOperator 0x1571285a0 <col:4, col:5> 'char' lvalue prefix '*' cannot overflow
    |   |   | | `-ImplicitCastExpr 0x157128588 <col:5> 'char *' <LValueToRValue>
    |   |   | |   `-DeclRefExpr 0x157128568 <col:5> 'char *' lvalue Var 0x1571282b8 't' 'char *'
    |   |   | `-ImplicitCastExpr 0x1571285d0 <col:9> 'char' <IntegralCast>
    |   |   |   `-CharacterLiteral 0x1571285b8 <col:9> 'int' 0
    |   |   `-ReturnStmt 0x157140ca0 <line:7:4, col:11>
    |   |     `-ImplicitCastExpr 0x157128640 <col:11> 'int' <PointerToIntegral>
    |   |       `-ImplicitCastExpr 0x157128628 <col:11> 'char *' <LValueToRValue>
    |   |         `-DeclRefExpr 0x157128608 <col:11> 'char *' lvalue ParmVar 0x1571280d8 's' 'char *'
    |   `-UnaryOperator 0x157140d10 <line:9:3, col:4> 'char *' postfix '++'
    |     `-DeclRefExpr 0x157140cf0 <col:3> 'char *' lvalue Var 0x1571282b8 't' 'char *'
    `-ReturnStmt 0x157140db8 <line:11:2, col:9>
      `-ImplicitCastExpr 0x157140da0 <col:9> 'int' <PointerToIntegral>
        `-ImplicitCastExpr 0x157140d88 <col:9> 'char *' <LValueToRValue>
          `-DeclRefExpr 0x157140d68 <col:9> 'char *' lvalue ParmVar 0x1571280d8 's' 'char *'
