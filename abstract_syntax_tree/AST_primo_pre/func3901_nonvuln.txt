`-FunctionDecl 0x12b106ba8  line:1:5 BN_get_params 'int (int)'
  |-ParmVarDecl 0x12b106ad8 <col:19, col:23> col:23 used which 'int'
  `-CompoundStmt 0x12b107028 <line:2:2, line:8:2>
    `-IfStmt 0x12b106ff8 <line:3:2, line:7:15> has_else
      |-BinaryOperator 0x12b106cf8 <line:3:11, col:20> 'int' '=='
      | |-ImplicitCastExpr 0x12b106ce0 <col:11> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x12b106ca0 <col:11> 'int' lvalue ParmVar 0x12b106ad8 'which' 'int'
      | `-IntegerLiteral 0x12b106cc0 <col:20> 'int' 0
      |-NullStmt 0x12b106ff0 <col:23>
      `-IfStmt 0x12b106fc0 <line:4:7, line:7:15> has_else
        |-BinaryOperator 0x12b106da0 <line:4:11, col:20> 'int' '=='
        | |-ImplicitCastExpr 0x12b106d88 <col:11> 'int' <LValueToRValue>
        | | `-DeclRefExpr 0x12b106d48 <col:11> 'int' lvalue ParmVar 0x12b106ad8 'which' 'int'
        | `-IntegerLiteral 0x12b106d68 <col:20> 'int' 1
        |-NullStmt 0x12b106fb8 <col:23>
        `-IfStmt 0x12b106f88 <line:5:7, line:7:15> has_else
          |-BinaryOperator 0x12b106e30 <line:5:11, col:20> 'int' '=='
          | |-ImplicitCastExpr 0x12b106e18 <col:11> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x12b106dd8 <col:11> 'int' lvalue ParmVar 0x12b106ad8 'which' 'int'
          | `-IntegerLiteral 0x12b106df8 <col:20> 'int' 2
          |-NullStmt 0x12b106f80 <col:23>
          `-IfStmt 0x12b106f50 <line:6:7, line:7:15> has_else
            |-BinaryOperator 0x12b106ec0 <line:6:11, col:20> 'int' '=='
            | |-ImplicitCastExpr 0x12b106ea8 <col:11> 'int' <LValueToRValue>
            | | `-DeclRefExpr 0x12b106e68 <col:11> 'int' lvalue ParmVar 0x12b106ad8 'which' 'int'
            | `-IntegerLiteral 0x12b106e88 <col:20> 'int' 3
            |-NullStmt 0x12b106f48 <col:23>
            `-ReturnStmt 0x12b106f38 <line:7:7, col:15>
              `-ParenExpr 0x12b106f18 <col:13, col:15> 'int'
                `-IntegerLiteral 0x12b106ef8 <col:14> 'int' 0
