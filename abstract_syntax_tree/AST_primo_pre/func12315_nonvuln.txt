`-FunctionDecl 0x12e9282c8  line:1:1 base64_encode 'int (char *, char *, unsigned int)'
  |-ParmVarDecl 0x12e9280d8 <col:16, col:22> col:22 used to 'char *'
  |-ParmVarDecl 0x12e928158 <col:26, col:32> col:32 used from 'char *'
  |-ParmVarDecl 0x12e9281d8 <col:38, col:51> col:51 used len 'unsigned int'
  `-CompoundStmt 0x12e9416a0 <line:2:1, line:30:1>
    |-WhileStmt 0x12e940a30 <line:3:2, line:9:2>
    | |-BinaryOperator 0x12e928440 <line:3:9, col:16> 'int' '>='
    | | |-ImplicitCastExpr 0x12e928410 <col:9> 'unsigned int' <LValueToRValue>
    | | | `-DeclRefExpr 0x12e9283d0 <col:9> 'unsigned int' lvalue ParmVar 0x12e9281d8 'len' 'unsigned int'
    | | `-ImplicitCastExpr 0x12e928428 <col:16> 'unsigned int' <IntegralCast>
    | |   `-IntegerLiteral 0x12e9283f0 <col:16> 'int' 3
    | `-CompoundStmt 0x12e940a00 <line:4:2, line:9:2>
    |   |-CallExpr 0x12e928638 <line:5:3, col:26> 'int'
    |   | |-ImplicitCastExpr 0x12e928620 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x12e928590 <col:3> 'int ()' Function 0x12e9284d8 'three_to_four' 'int ()'
    |   | |-ImplicitCastExpr 0x12e928668 <col:18> 'char *' <LValueToRValue>
    |   | | `-DeclRefExpr 0x12e9285b0 <col:18> 'char *' lvalue ParmVar 0x12e928158 'from' 'char *'
    |   | `-ImplicitCastExpr 0x12e928680 <col:24> 'char *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x12e9285d0 <col:24> 'char *' lvalue ParmVar 0x12e9280d8 'to' 'char *'
    |   |-CompoundAssignOperator 0x12e9286f0 <line:6:3, col:10> 'unsigned int' '-=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    |   | |-DeclRefExpr 0x12e928698 <col:3> 'unsigned int' lvalue ParmVar 0x12e9281d8 'len' 'unsigned int'
    |   | `-ImplicitCastExpr 0x12e9286d8 <col:10> 'unsigned int' <IntegralCast>
    |   |   `-IntegerLiteral 0x12e9286b8 <col:10> 'int' 3
    |   |-CompoundAssignOperator 0x12e928760 <line:7:3, col:11> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
    |   | |-DeclRefExpr 0x12e928720 <col:3> 'char *' lvalue ParmVar 0x12e928158 'from' 'char *'
    |   | `-IntegerLiteral 0x12e928740 <col:11> 'int' 3
    |   `-CompoundAssignOperator 0x12e9287d0 <line:8:3, col:9> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
    |     |-DeclRefExpr 0x12e928790 <col:3> 'char *' lvalue ParmVar 0x12e9280d8 'to' 'char *'
    |     `-IntegerLiteral 0x12e9287b0 <col:9> 'int' 4
    |-IfStmt 0x12e9415a8 <line:10:2, line:28:2>
    | |-ImplicitCastExpr 0x12e940a70 <line:10:6> 'unsigned int' <LValueToRValue>
    | | `-DeclRefExpr 0x12e940a50 <col:6> 'unsigned int' lvalue ParmVar 0x12e9281d8 'len' 'unsigned int'
    | `-CompoundStmt 0x12e941568 <line:11:2, line:28:2>
    |   |-DeclStmt 0x12e940d00 <line:12:3, col:26>
    |   | `-VarDecl 0x12e940b30 <col:3, col:25> col:8 used three 'char[3]' cinit
    |   |   `-InitListExpr 0x12e940c60 <col:19, col:25> 'char[3]'
    |   |     |-ImplicitCastExpr 0x12e940cb8 <col:20> 'char' <IntegralCast>
    |   |     | `-IntegerLiteral 0x12e940b98 <col:20> 'int' 0
    |   |     |-ImplicitCastExpr 0x12e940cd0 <col:22> 'char' <IntegralCast>
    |   |     | `-IntegerLiteral 0x12e940bb8 <col:22> 'int' 0
    |   |     `-ImplicitCastExpr 0x12e940ce8 <col:24> 'char' <IntegralCast>
    |   |       `-IntegerLiteral 0x12e940bd8 <col:24> 'int' 0
    |   |-DeclStmt 0x12e940d98 <line:13:3, col:17>
    |   | `-VarDecl 0x12e940d30 <col:3, col:16> col:16 used i 'unsigned int'
    |   |-ForStmt 0x12e941020 <line:14:3, line:17:3>
    |   | |-BinaryOperator 0x12e940e08 <line:14:8, col:12> 'unsigned int' '='
    |   | | |-DeclRefExpr 0x12e940db0 <col:8> 'unsigned int' lvalue Var 0x12e940d30 'i' 'unsigned int'
    |   | | `-ImplicitCastExpr 0x12e940df0 <col:12> 'unsigned int' <IntegralCast>
    |   | |   `-IntegerLiteral 0x12e940dd0 <col:12> 'int' 0
    |   | |-<<<NULL>>>
    |   | |-BinaryOperator 0x12e940e98 <col:15, col:19> 'int' '<'
    |   | | |-ImplicitCastExpr 0x12e940e68 <col:15> 'unsigned int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x12e940e28 <col:15> 'unsigned int' lvalue Var 0x12e940d30 'i' 'unsigned int'
    |   | | `-ImplicitCastExpr 0x12e940e80 <col:19> 'unsigned int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x12e940e48 <col:19> 'unsigned int' lvalue ParmVar 0x12e9281d8 'len' 'unsigned int'
    |   | |-UnaryOperator 0x12e940ed8 <col:24, col:25> 'unsigned int' postfix '++'
    |   | | `-DeclRefExpr 0x12e940eb8 <col:24> 'unsigned int' lvalue Var 0x12e940d30 'i' 'unsigned int'
    |   | `-CompoundStmt 0x12e941008 <line:15:3, line:17:3>
    |   |   `-BinaryOperator 0x12e940fe8 <line:16:4, col:20> 'char' '='
    |   |     |-ArraySubscriptExpr 0x12e940f60 <col:4, col:11> 'char' lvalue
    |   |     | |-ImplicitCastExpr 0x12e940f30 <col:4> 'char *' <ArrayToPointerDecay>
    |   |     | | `-DeclRefExpr 0x12e940ef0 <col:4> 'char[3]' lvalue Var 0x12e940b30 'three' 'char[3]'
    |   |     | `-ImplicitCastExpr 0x12e940f48 <col:10> 'unsigned int' <LValueToRValue>
    |   |     |   `-DeclRefExpr 0x12e940f10 <col:10> 'unsigned int' lvalue Var 0x12e940d30 'i' 'unsigned int'
    |   |     `-ImplicitCastExpr 0x12e940fd0 <col:15, col:20> 'char' <LValueToRValue>
    |   |       `-UnaryOperator 0x12e940fb8 <col:15, col:20> 'char' lvalue prefix '*' cannot overflow
    |   |         `-UnaryOperator 0x12e940fa0 <col:16, col:20> 'char *' postfix '++'
    |   |           `-DeclRefExpr 0x12e940f80 <col:16> 'char *' lvalue ParmVar 0x12e928158 'from' 'char *'
    |   |-CallExpr 0x12e9410d0 <line:18:3, col:27> 'int'
    |   | |-ImplicitCastExpr 0x12e9410b8 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x12e941058 <col:3> 'int ()' Function 0x12e9284d8 'three_to_four' 'int ()'
    |   | |-ImplicitCastExpr 0x12e941100 <col:18> 'char *' <ArrayToPointerDecay>
    |   | | `-DeclRefExpr 0x12e941078 <col:18> 'char[3]' lvalue Var 0x12e940b30 'three' 'char[3]'
    |   | `-ImplicitCastExpr 0x12e941118 <col:25> 'char *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x12e941098 <col:25> 'char *' lvalue ParmVar 0x12e9280d8 'to' 'char *'
    |   |-IfStmt 0x12e9414c8 <line:19:3, line:26:3> has_else
    |   | |-BinaryOperator 0x12e9411a0 <line:19:7, col:14> 'int' '=='
    |   | | |-ImplicitCastExpr 0x12e941170 <col:7> 'unsigned int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x12e941130 <col:7> 'unsigned int' lvalue ParmVar 0x12e9281d8 'len' 'unsigned int'
    |   | | `-ImplicitCastExpr 0x12e941188 <col:14> 'unsigned int' <IntegralCast>
    |   | |   `-IntegerLiteral 0x12e941150 <col:14> 'int' 1
    |   | |-CompoundStmt 0x12e941320 <line:20:3, line:22:3>
    |   | | `-BinaryOperator 0x12e941300 <line:21:4, col:20> 'char' '='
    |   | |   |-ArraySubscriptExpr 0x12e941218 <col:4, col:8> 'char' lvalue
    |   | |   | |-ImplicitCastExpr 0x12e941200 <col:4> 'char *' <LValueToRValue>
    |   | |   | | `-DeclRefExpr 0x12e9411c0 <col:4> 'char *' lvalue ParmVar 0x12e9280d8 'to' 'char *'
    |   | |   | `-IntegerLiteral 0x12e9411e0 <col:7> 'int' 2
    |   | |   `-BinaryOperator 0x12e9412e0 <col:12, col:20> 'char' '='
    |   | |     |-ArraySubscriptExpr 0x12e941290 <col:12, col:16> 'char' lvalue
    |   | |     | |-ImplicitCastExpr 0x12e941278 <col:12> 'char *' <LValueToRValue>
    |   | |     | | `-DeclRefExpr 0x12e941238 <col:12> 'char *' lvalue ParmVar 0x12e9280d8 'to' 'char *'
    |   | |     | `-IntegerLiteral 0x12e941258 <col:15> 'int' 3
    |   | |     `-ImplicitCastExpr 0x12e9412c8 <col:20> 'char' <IntegralCast>
    |   | |       `-CharacterLiteral 0x12e9412b0 <col:20> 'int' 61
    |   | `-IfStmt 0x12e9414a8 <line:23:8, line:26:3>
    |   |   |-BinaryOperator 0x12e9413a8 <line:23:12, col:19> 'int' '=='
    |   |   | |-ImplicitCastExpr 0x12e941378 <col:12> 'unsigned int' <LValueToRValue>
    |   |   | | `-DeclRefExpr 0x12e941338 <col:12> 'unsigned int' lvalue ParmVar 0x12e9281d8 'len' 'unsigned int'
    |   |   | `-ImplicitCastExpr 0x12e941390 <col:19> 'unsigned int' <IntegralCast>
    |   |   |   `-IntegerLiteral 0x12e941358 <col:19> 'int' 2
    |   |   `-CompoundStmt 0x12e941490 <line:24:3, line:26:3>
    |   |     `-BinaryOperator 0x12e941470 <line:25:4, col:12> 'char' '='
    |   |       |-ArraySubscriptExpr 0x12e941420 <col:4, col:8> 'char' lvalue
    |   |       | |-ImplicitCastExpr 0x12e941408 <col:4> 'char *' <LValueToRValue>
    |   |       | | `-DeclRefExpr 0x12e9413c8 <col:4> 'char *' lvalue ParmVar 0x12e9280d8 'to' 'char *'
    |   |       | `-IntegerLiteral 0x12e9413e8 <col:7> 'int' 3
    |   |       `-ImplicitCastExpr 0x12e941458 <col:12> 'char' <IntegralCast>
    |   |         `-CharacterLiteral 0x12e941440 <col:12> 'int' 61
    |   `-CompoundAssignOperator 0x12e941538 <line:27:3, col:9> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
    |     |-DeclRefExpr 0x12e9414f8 <col:3> 'char *' lvalue ParmVar 0x12e9280d8 'to' 'char *'
    |     `-IntegerLiteral 0x12e941518 <col:9> 'int' 4
    |-NullStmt 0x12e9415c8 <line:28:3>
    `-BinaryOperator 0x12e941680 <line:29:2, col:10> 'char' '='
      |-ArraySubscriptExpr 0x12e941628 <col:2, col:6> 'char' lvalue
      | |-ImplicitCastExpr 0x12e941610 <col:2> 'char *' <LValueToRValue>
      | | `-DeclRefExpr 0x12e9415d0 <col:2> 'char *' lvalue ParmVar 0x12e9280d8 'to' 'char *'
      | `-IntegerLiteral 0x12e9415f0 <col:5> 'int' 0
      `-ImplicitCastExpr 0x12e941668 <col:10> 'char' <IntegralCast>
        `-IntegerLiteral 0x12e941648 <col:10> 'int' 0
