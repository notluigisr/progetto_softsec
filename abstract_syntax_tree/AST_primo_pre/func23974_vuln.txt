`-FunctionDecl 0x150928258  line:1:1 cstrchr 'int (char *, int)'
  |-ParmVarDecl 0x1509280f0 <col:9, col:17> col:17 used s 'char *'
  |-ParmVarDecl 0x150928170 <col:20, col:24> col:24 used c 'int'
  `-CompoundStmt 0x150943c68 <line:2:1, line:42:1>
    |-DeclStmt 0x1509283d8 <line:3:5, col:14>
    | `-VarDecl 0x150928370 <col:5, col:13> col:13 used p 'char *'
    |-DeclStmt 0x150928470 <line:4:5, col:12>
    | `-VarDecl 0x150928408 <col:5, col:10> col:10 used cc 'int'
    |-IfStmt 0x150940ba0 <line:6:5, line:7:24>
    | |-RecoveryExpr 0x150928798 <line:6:9, col:56> '_Bool' contains-errors
    | `-ReturnStmt 0x150940b90 <line:7:2, col:24>
    |   `-CallExpr 0x150940b30 <col:9, col:24> 'int'
    |     |-ImplicitCastExpr 0x150940b18 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x150940ab8 <col:9> 'int ()' Function 0x150940a00 'vim_strchr' 'int ()'
    |     |-ImplicitCastExpr 0x150940b60 <col:20> 'char *' <LValueToRValue>
    |     | `-DeclRefExpr 0x150940ad8 <col:20> 'char *' lvalue ParmVar 0x1509280f0 's' 'char *'
    |     `-ImplicitCastExpr 0x150940b78 <col:23> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x150940af8 <col:23> 'int' lvalue ParmVar 0x150928170 'c' 'int'
    |-IfStmt 0x150941648 <line:12:5, line:20:24> has_else
    | |-BinaryOperator 0x150940cc8 <line:12:9, col:25> 'int' contains-errors '&&'
    | | |-RecoveryExpr 0x150940c70 <col:9> '<dependent type>' contains-errors lvalue
    | | `-BinaryOperator 0x150940ca8 <col:21, col:25> 'int' '>'
    | |   |-ImplicitCastExpr 0x150940c90 <col:21> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x150940bd8 <col:21> 'int' lvalue ParmVar 0x150928170 'c' 'int'
    | |   `-IntegerLiteral 0x150940bf8 <col:25> 'int' 128
    | |-BinaryOperator 0x150940e80 <line:13:2, col:17> 'int' '='
    | | |-DeclRefExpr 0x150940ce8 <col:2> 'int' lvalue Var 0x150928408 'cc' 'int'
    | | `-CallExpr 0x150940e40 <col:7, col:17> 'int'
    | |   |-ImplicitCastExpr 0x150940e28 <col:7> 'int (*)()' <FunctionToPointerDecay>
    | |   | `-DeclRefExpr 0x150940de8 <col:7> 'int ()' Function 0x150940d30 'utf_fold' 'int ()'
    | |   `-ImplicitCastExpr 0x150940e68 <col:16> 'int' <LValueToRValue>
    | |     `-DeclRefExpr 0x150940e08 <col:16> 'int' lvalue ParmVar 0x150928170 'c' 'int'
    | `-IfStmt 0x150941618 <line:15:3, line:20:24> has_else
    |   |-CallExpr 0x150940fd8 <line:15:7, col:19> 'int'
    |   | |-ImplicitCastExpr 0x150940fc0 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x150940f80 <col:7> 'int ()' Function 0x150940ec8 'MB_ISUPPER' 'int ()'
    |   | `-ImplicitCastExpr 0x150941000 <col:18> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x150940fa0 <col:18> 'int' lvalue ParmVar 0x150928170 'c' 'int'
    |   |-BinaryOperator 0x1509411b0 <line:16:2, col:19> 'int' '='
    |   | |-DeclRefExpr 0x150941018 <col:2> 'int' lvalue Var 0x150928408 'cc' 'int'
    |   | `-CallExpr 0x150941170 <col:7, col:19> 'int'
    |   |   |-ImplicitCastExpr 0x150941158 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |   |   | `-DeclRefExpr 0x150941118 <col:7> 'int ()' Function 0x150941060 'MB_TOLOWER' 'int ()'
    |   |   `-ImplicitCastExpr 0x150941198 <col:18> 'int' <LValueToRValue>
    |   |     `-DeclRefExpr 0x150941138 <col:18> 'int' lvalue ParmVar 0x150928170 'c' 'int'
    |   `-IfStmt 0x1509415e8 <line:17:10, line:20:24> has_else
    |     |-CallExpr 0x150941308 <line:17:14, col:26> 'int'
    |     | |-ImplicitCastExpr 0x1509412f0 <col:14> 'int (*)()' <FunctionToPointerDecay>
    |     | | `-DeclRefExpr 0x1509412b0 <col:14> 'int ()' Function 0x1509411f8 'MB_ISLOWER' 'int ()'
    |     | `-ImplicitCastExpr 0x150941330 <col:25> 'int' <LValueToRValue>
    |     |   `-DeclRefExpr 0x1509412d0 <col:25> 'int' lvalue ParmVar 0x150928170 'c' 'int'
    |     |-BinaryOperator 0x1509414e0 <line:18:2, col:19> 'int' '='
    |     | |-DeclRefExpr 0x150941348 <col:2> 'int' lvalue Var 0x150928408 'cc' 'int'
    |     | `-CallExpr 0x1509414a0 <col:7, col:19> 'int'
    |     |   |-ImplicitCastExpr 0x150941488 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |     |   | `-DeclRefExpr 0x150941448 <col:7> 'int ()' Function 0x150941390 'MB_TOUPPER' 'int ()'
    |     |   `-ImplicitCastExpr 0x1509414c8 <col:18> 'int' <LValueToRValue>
    |     |     `-DeclRefExpr 0x150941468 <col:18> 'int' lvalue ParmVar 0x150928170 'c' 'int'
    |     `-ReturnStmt 0x1509415d8 <line:20:2, col:24>
    |       `-CallExpr 0x150941578 <col:9, col:24> 'int'
    |         |-ImplicitCastExpr 0x150941560 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |         | `-DeclRefExpr 0x150941500 <col:9> 'int ()' Function 0x150940a00 'vim_strchr' 'int ()'
    |         |-ImplicitCastExpr 0x1509415a8 <col:20> 'char *' <LValueToRValue>
    |         | `-DeclRefExpr 0x150941520 <col:20> 'char *' lvalue ParmVar 0x1509280f0 's' 'char *'
    |         `-ImplicitCastExpr 0x1509415c0 <col:23> 'int' <LValueToRValue>
    |           `-DeclRefExpr 0x150941540 <col:23> 'int' lvalue ParmVar 0x150928170 'c' 'int'
    `-IfStmt 0x150943c38 <line:22:5, line:37:2> has_else
      |-RecoveryExpr 0x150941690 <line:22:9> '<dependent type>' contains-errors lvalue
      |-CompoundStmt 0x1509438c8 <line:23:5, line:34:5>
      | `-ForStmt 0x150943890 <line:24:2, line:33:2>
      |   |-BinaryOperator 0x150941708 <line:24:7, col:11> 'char *' '='
      |   | |-DeclRefExpr 0x1509416b0 <col:7> 'char *' lvalue Var 0x150928370 'p' 'char *'
      |   | `-ImplicitCastExpr 0x1509416f0 <col:11> 'char *' <LValueToRValue>
      |   |   `-DeclRefExpr 0x1509416d0 <col:11> 'char *' lvalue ParmVar 0x1509280f0 's' 'char *'
      |   |-<<<NULL>>>
      |   |-BinaryOperator 0x150941830 <col:14, col:20> 'int' contains-errors '!='
      |   | |-UnaryOperator 0x1509417f8 <col:14, col:15> 'char' lvalue prefix '*' cannot overflow
      |   | | `-ImplicitCastExpr 0x1509417e0 <col:15> 'char *' <LValueToRValue>
      |   | |   `-DeclRefExpr 0x150941728 <col:15> 'char *' lvalue Var 0x150928370 'p' 'char *'
      |   | `-RecoveryExpr 0x150941810 <col:20> '<dependent type>' contains-errors lvalue
      |   |-CompoundAssignOperator 0x1509419a0 <col:25, col:45> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
      |   | |-DeclRefExpr 0x150941850 <col:25> 'char *' lvalue Var 0x150928370 'p' 'char *'
      |   | `-CallExpr 0x150941960 <col:30, col:45> 'int'
      |   |   |-ImplicitCastExpr 0x150941948 <col:30, col:42> 'int (*)()' <FunctionToPointerDecay>
      |   |   | `-ParenExpr 0x150941908 <col:30, col:42> 'int ()'
      |   |   |   `-UnaryOperator 0x1509418f0 <col:31, col:32> 'int ()' prefix '*' cannot overflow
      |   |   |     `-ImplicitCastExpr 0x1509418d8 <col:32> 'int (*)()' <FunctionToPointerDecay>
      |   |   |       `-DeclRefExpr 0x1509418b8 <col:32> 'int ()' Function 0x1509285b8 'mb_char2len' 'int ()'
      |   |   `-ImplicitCastExpr 0x150941988 <col:44> 'char *' <LValueToRValue>
      |   |     `-DeclRefExpr 0x150941928 <col:44> 'char *' lvalue Var 0x150928370 'p' 'char *'
      |   `-CompoundStmt 0x150943878 <line:25:2, line:33:2>
      |     `-IfStmt 0x150943848 <line:26:6, line:32:10> has_else
      |       |-BinaryOperator 0x150942ef0 <line:26:10, col:26> 'int' contains-errors '&&'
      |       | |-RecoveryExpr 0x150942e98 <col:10> '<dependent type>' contains-errors lvalue
      |       | `-BinaryOperator 0x150942ed0 <col:22, col:26> 'int' '>'
      |       |   |-ImplicitCastExpr 0x150942eb8 <col:22> 'int' <LValueToRValue>
      |       |   | `-DeclRefExpr 0x150942e00 <col:22> 'int' lvalue ParmVar 0x150928170 'c' 'int'
      |       |   `-IntegerLiteral 0x150942e20 <col:26> 'int' 128
      |       |-CompoundStmt 0x1509435e0 <line:27:6, line:30:6>
      |       | `-IfStmt 0x1509435c0 <line:28:3, line:29:14>
      |       |   |-BinaryOperator 0x150943120 <line:28:7, col:36> 'int' '=='
      |       |   | |-CallExpr 0x1509430c0 <col:7, col:31> 'int'
      |       |   | | |-ImplicitCastExpr 0x1509430a8 <col:7> 'int (*)()' <FunctionToPointerDecay>
      |       |   | | | `-DeclRefExpr 0x150942f10 <col:7> 'int ()' Function 0x150940d30 'utf_fold' 'int ()'
      |       |   | | `-CallExpr 0x150943068 <col:16, col:30> 'int'
      |       |   | |   |-ImplicitCastExpr 0x150943050 <col:16> 'int (*)()' <FunctionToPointerDecay>
      |       |   | |   | `-DeclRefExpr 0x150943010 <col:16> 'int ()' Function 0x150942f58 'utf_ptr2char' 'int ()'
      |       |   | |   `-ImplicitCastExpr 0x150943090 <col:29> 'char *' <LValueToRValue>
      |       |   | |     `-DeclRefExpr 0x150943030 <col:29> 'char *' lvalue Var 0x150928370 'p' 'char *'
      |       |   | `-ImplicitCastExpr 0x150943108 <col:36> 'int' <LValueToRValue>
      |       |   |   `-DeclRefExpr 0x1509430e8 <col:36> 'int' lvalue Var 0x150928408 'cc' 'int'
      |       |   `-ReturnStmt 0x1509435b0 <line:29:7, col:14>
      |       |     `-ImplicitCastExpr 0x150943178 <col:14> 'int' <PointerToIntegral>
      |       |       `-ImplicitCastExpr 0x150943160 <col:14> 'char *' <LValueToRValue>
      |       |         `-DeclRefExpr 0x150943140 <col:14> 'char *' lvalue Var 0x150928370 'p' 'char *'
      |       `-IfStmt 0x150943828 <line:31:11, line:32:10>
      |         |-BinaryOperator 0x1509437a8 <line:31:15, col:32> 'int' '||'
      |         | |-BinaryOperator 0x1509436b0 <col:15, col:21> 'int' '=='
      |         | | |-ImplicitCastExpr 0x150943698 <col:15, col:16> 'int' <IntegralCast>
      |         | | | `-ImplicitCastExpr 0x150943668 <col:15, col:16> 'char' <LValueToRValue>
      |         | | |   `-UnaryOperator 0x150943630 <col:15, col:16> 'char' lvalue prefix '*' cannot overflow
      |         | | |     `-ImplicitCastExpr 0x150943618 <col:16> 'char *' <LValueToRValue>
      |         | | |       `-DeclRefExpr 0x1509435f8 <col:16> 'char *' lvalue Var 0x150928370 'p' 'char *'
      |         | | `-ImplicitCastExpr 0x150943680 <col:21> 'int' <LValueToRValue>
      |         | |   `-DeclRefExpr 0x150943648 <col:21> 'int' lvalue ParmVar 0x150928170 'c' 'int'
      |         | `-BinaryOperator 0x150943788 <col:26, col:32> 'int' '=='
      |         |   |-ImplicitCastExpr 0x150943770 <col:26, col:27> 'int' <IntegralCast>
      |         |   | `-ImplicitCastExpr 0x150943740 <col:26, col:27> 'char' <LValueToRValue>
      |         |   |   `-UnaryOperator 0x150943708 <col:26, col:27> 'char' lvalue prefix '*' cannot overflow
      |         |   |     `-ImplicitCastExpr 0x1509436f0 <col:27> 'char *' <LValueToRValue>
      |         |   |       `-DeclRefExpr 0x1509436d0 <col:27> 'char *' lvalue Var 0x150928370 'p' 'char *'
      |         |   `-ImplicitCastExpr 0x150943758 <col:32> 'int' <LValueToRValue>
      |         |     `-DeclRefExpr 0x150943720 <col:32> 'int' lvalue Var 0x150928408 'cc' 'int'
      |         `-ReturnStmt 0x150943818 <line:32:3, col:10>
      |           `-ImplicitCastExpr 0x150943800 <col:10> 'int' <PointerToIntegral>
      |             `-ImplicitCastExpr 0x1509437e8 <col:10> 'char *' <LValueToRValue>
      |               `-DeclRefExpr 0x1509437c8 <col:10> 'char *' lvalue Var 0x150928370 'p' 'char *'
      `-NullStmt 0x150943c30 <line:37:2>
