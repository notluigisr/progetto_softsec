`-FunctionDecl 0x126128268  line:1:1 sug_compare 'int (const void *, const void *)'
  |-ParmVarDecl 0x126128108 <col:13, col:25> col:25 s1 'const void *'
  |-ParmVarDecl 0x126128188 <col:29, col:41> col:41 s2 'const void *'
  `-CompoundStmt 0x12680a198 <line:2:1, line:14:1>
    |-DeclStmt 0x126128630 <line:5:5, col:41>
    | `-VarDecl 0x1261283f8 <col:5, col:33> col:10 used n 'int' cinit
    |   `-BinaryOperator 0x126128610 <col:14, col:33> '<dependent type>' contains-errors '-'
    |     |-CXXDependentScopeMemberExpr 0x126128560 <col:14, col:18> '<dependent type>' contains-errors lvalue ->st_score
    |     | `-RecoveryExpr 0x126128540 <col:14> '<dependent type>' contains-errors lvalue
    |     `-CXXDependentScopeMemberExpr 0x1261285c8 <col:29, col:33> '<dependent type>' contains-errors lvalue ->st_score
    |       `-RecoveryExpr 0x1261285a8 <col:29> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x12680a130 <line:7:5, line:12:5>
    | |-BinaryOperator 0x1261286a0 <line:7:9, col:14> 'int' contains-errors '=='
    | | |-ImplicitCastExpr 0x126128688 <col:9> 'int' contains-errors <LValueToRValue>
    | | | `-DeclRefExpr 0x126128648 <col:9> 'int' contains-errors lvalue Var 0x1261283f8 'n' 'int'
    | | `-IntegerLiteral 0x126128668 <col:14> 'int' 0
    | `-CompoundStmt 0x12680a110 <line:8:5, line:12:5>
    |   |-BinaryOperator 0x126809cd0 <line:9:2, col:28> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x1261286c0 <col:2> 'int' contains-errors lvalue Var 0x1261283f8 'n' 'int'
    |   | `-BinaryOperator 0x126809cb0 <col:6, col:28> '<dependent type>' contains-errors '-'
    |   |   |-CXXDependentScopeMemberExpr 0x126809c00 <col:6, col:10> '<dependent type>' contains-errors lvalue ->st_altscore
    |   |   | `-RecoveryExpr 0x1261287e0 <col:6> '<dependent type>' contains-errors lvalue
    |   |   `-CXXDependentScopeMemberExpr 0x126809c68 <col:24, col:28> '<dependent type>' contains-errors lvalue ->st_altscore
    |   |     `-RecoveryExpr 0x126809c48 <col:24> '<dependent type>' contains-errors lvalue
    |   `-IfStmt 0x12680a0f0 <line:10:2, line:11:42>
    |     |-BinaryOperator 0x126809d48 <line:10:6, col:11> 'int' contains-errors '=='
    |     | |-ImplicitCastExpr 0x126809d30 <col:6> 'int' contains-errors <LValueToRValue>
    |     | | `-DeclRefExpr 0x126809cf0 <col:6> 'int' contains-errors lvalue Var 0x1261283f8 'n' 'int'
    |     | `-IntegerLiteral 0x126809d10 <col:11> 'int' 0
    |     `-BinaryOperator 0x12680a0d0 <line:11:6, col:42> 'int' contains-errors '='
    |       |-DeclRefExpr 0x126809d68 <col:6> 'int' contains-errors lvalue Var 0x1261283f8 'n' 'int'
    |       `-CallExpr 0x12680a0a0 <col:10, col:42> '<dependent type>' contains-errors
    |         |-DeclRefExpr 0x126809ea0 <col:10> 'int ()' Function 0x126809de8 'STRICMP' 'int ()'
    |         |-CXXDependentScopeMemberExpr 0x126809ff0 <col:18, col:22> '<dependent type>' contains-errors lvalue ->st_word
    |         | `-RecoveryExpr 0x126809fd0 <col:18> '<dependent type>' contains-errors lvalue
    |         `-CXXDependentScopeMemberExpr 0x12680a058 <col:31, col:35> '<dependent type>' contains-errors lvalue ->st_word
    |           `-RecoveryExpr 0x12680a038 <col:31> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x12680a188 <line:13:5, col:12>
      `-ImplicitCastExpr 0x12680a170 <col:12> 'int' contains-errors <LValueToRValue>
        `-DeclRefExpr 0x12680a150 <col:12> 'int' contains-errors lvalue Var 0x1261283f8 'n' 'int'
