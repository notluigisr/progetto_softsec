`-FunctionDecl 0x12780de08  line:1:17 invalid ParseEquation 'int (const int)' static
  |-ParmVarDecl 0x12780dcf0 <col:31, <invalid sloc>> col:43 invalid 'const int'
  `-CompoundStmt 0x1278282c0 <line:8:58, line:56:3>
    |-RecoveryExpr 0x12780dee8 <line:9:5> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x12780e320 <line:11:5, col:78> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x12780e060 <col:5> 'int ()' Function 0x12780dfa8 'TF_RETURN_IF_ERROR' 'int ()'
    | `-CallExpr 0x12780e2e8 <col:24, col:77> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x12780e160 <col:24> 'int ()' Function 0x12780e0a8 'ParseEinsumEquation' 'int ()'
    |   |-RecoveryExpr 0x12780e258 <col:44> '<dependent type>' contains-errors lvalue
    |   |-UnaryOperator 0x12780e298 <col:54, col:55> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | `-RecoveryExpr 0x12780e278 <col:55> '<dependent type>' contains-errors lvalue
    |   `-UnaryOperator 0x12780e2d0 <col:66, col:67> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-RecoveryExpr 0x12780e2b0 <col:67> '<dependent type>' contains-errors lvalue
    |-RecoveryExpr 0x12780e378 <line:15:5> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x127827570 <line:16:5, col:38>
    | `-VarDecl 0x127827400 <col:5, col:37> col:9 used num_inputs 'int' cinit
    |   `-CallExpr 0x127827550 <col:22, col:37> '<dependent type>' contains-errors
    |     `-CXXDependentScopeMemberExpr 0x127827508 <col:22, col:32> '<dependent type>' contains-errors lvalue .size
    |       `-RecoveryExpr 0x1278274e8 <col:22> '<dependent type>' contains-errors lvalue
    |-ForStmt 0x127827960 <line:20:5, line:22:5>
    | |-DeclStmt 0x127827648 <line:20:10, col:19>
    | | `-VarDecl 0x1278275c0 <col:10, col:18> col:14 used i 'int' cinit
    | |   `-IntegerLiteral 0x127827628 <col:18> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x1278276d0 <col:21, col:25> 'int' contains-errors '<'
    | | |-ImplicitCastExpr 0x1278276a0 <col:21> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x127827660 <col:21> 'int' lvalue Var 0x1278275c0 'i' 'int'
    | | `-ImplicitCastExpr 0x1278276b8 <col:25> 'int' contains-errors <LValueToRValue>
    | |   `-DeclRefExpr 0x127827680 <col:25> 'int' contains-errors lvalue Var 0x127827400 'num_inputs' 'int'
    | |-UnaryOperator 0x127827710 <col:37, col:39> 'int' prefix '++'
    | | `-DeclRefExpr 0x1278276f0 <col:39> 'int' lvalue Var 0x1278275c0 'i' 'int'
    | `-CompoundStmt 0x127827950 <col:42, line:22:5>
    |-DeclStmt 0x127827a38 <line:26:5, col:42>
    | `-VarDecl 0x1278279d0 <col:5, col:9> col:9 used num_labels 'int'
    |-ForStmt 0x127827dc8 <line:29:5, line:37:5>
    | |-DeclStmt 0x127827b30 <line:29:10, col:19>
    | | `-VarDecl 0x127827aa8 <col:10, col:18> col:14 used i 'int' cinit
    | |   `-IntegerLiteral 0x127827b10 <col:18> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x127827bb8 <col:21, col:25> 'int' contains-errors '<'
    | | |-ImplicitCastExpr 0x127827b88 <col:21> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x127827b48 <col:21> 'int' lvalue Var 0x127827aa8 'i' 'int'
    | | `-ImplicitCastExpr 0x127827ba0 <col:25> 'int' contains-errors <LValueToRValue>
    | |   `-DeclRefExpr 0x127827b68 <col:25> 'int' contains-errors lvalue Var 0x127827400 'num_inputs' 'int'
    | |-UnaryOperator 0x127827bf8 <col:37, col:39> 'int' prefix '++'
    | | `-DeclRefExpr 0x127827bd8 <col:39> 'int' lvalue Var 0x127827aa8 'i' 'int'
    | `-CompoundStmt 0x127827db8 <col:42, line:37:5>
    `-ForStmt 0x127828288 <line:48:5, line:54:5>
      |-DeclStmt 0x127828008 <line:48:10, col:23>
      | `-VarDecl 0x127827f80 <col:10, col:22> col:14 used label 'int' cinit
      |   `-IntegerLiteral 0x127827fe8 <col:22> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x127828090 <col:25, col:33> 'int' '<'
      | |-ImplicitCastExpr 0x127828060 <col:25> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x127828020 <col:25> 'int' lvalue Var 0x127827f80 'label' 'int'
      | `-ImplicitCastExpr 0x127828078 <col:33> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x127828040 <col:33> 'int' lvalue Var 0x1278279d0 'num_labels' 'int'
      |-UnaryOperator 0x1278280d0 <col:45, col:47> 'int' prefix '++'
      | `-DeclRefExpr 0x1278280b0 <col:47> 'int' lvalue Var 0x127827f80 'label' 'int'
      `-CompoundStmt 0x127828270 <col:54, line:54:5>
        `-IfStmt 0x127828130 <line:49:7, col:36>
          |-RecoveryExpr 0x127828108 <col:11, col:20> '_Bool' contains-errors
          `-ContinueStmt 0x127828128 <col:36>
