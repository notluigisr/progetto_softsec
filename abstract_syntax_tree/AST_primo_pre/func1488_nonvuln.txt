`-FunctionDecl 0x1568275f8  line:1:1 invalid authzPretty 'int (int *, struct berval *, struct berval *, void *)'
  |-ParmVarDecl 0x15680dd28 <line:2:2, col:10> col:10 invalid syntax 'int *'
  |-ParmVarDecl 0x15680e318 <line:3:2, col:17> col:17 used val 'struct berval *'
  |-ParmVarDecl 0x156827428 <line:4:2, col:17> col:17 used out 'struct berval *'
  |-ParmVarDecl 0x1568274a8 <line:5:2, col:8> col:8 used ctx 'void *'
  `-CompoundStmt 0x156827fd0 <line:6:1, line:18:1>
    |-DeclStmt 0x156827740 <line:7:2, col:9>
    | `-VarDecl 0x1568276d8 <col:2, col:7> col:7 used rc 'int'
    |-CallExpr 0x156827a58 <line:9:2, line:10:21> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x1568278b0 <line:9:2> 'int ()' Function 0x1568277f8 'Debug' 'int ()'
    | |-RecoveryExpr 0x156827a38 <col:9> '<dependent type>' contains-errors lvalue
    | |-StringLiteral 0x156827930 <col:27> 'char[4]' lvalue "STR"
    | |-RecoveryExpr 0x156827988 <line:10:3, col:8> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x156827950 <col:3> 'struct berval *' lvalue ParmVar 0x15680e318 'val' 'struct berval *'
    | |-IntegerLiteral 0x1568279b0 <col:16> 'int' 0
    | `-IntegerLiteral 0x1568279d0 <col:19> 'int' 0
    |-BinaryOperator 0x156827d10 <line:12:2, col:43> 'int' '='
    | |-DeclRefExpr 0x156827aa0 <col:2> 'int' lvalue Var 0x1568276d8 'rc' 'int'
    | `-CallExpr 0x156827c88 <col:7, col:43> 'int'
    |   |-ImplicitCastExpr 0x156827c70 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x156827ba0 <col:7> 'int ()' Function 0x156827ae8 'authzPrettyNormal' 'int ()'
    |   |-ImplicitCastExpr 0x156827cc8 <col:26> 'struct berval *' <LValueToRValue>
    |   | `-DeclRefExpr 0x156827bc0 <col:26> 'struct berval *' lvalue ParmVar 0x15680e318 'val' 'struct berval *'
    |   |-ImplicitCastExpr 0x156827ce0 <col:31> 'struct berval *' <LValueToRValue>
    |   | `-DeclRefExpr 0x156827be0 <col:31> 'struct berval *' lvalue ParmVar 0x156827428 'out' 'struct berval *'
    |   |-ImplicitCastExpr 0x156827cf8 <col:36> 'void *' <LValueToRValue>
    |   | `-DeclRefExpr 0x156827c00 <col:36> 'void *' lvalue ParmVar 0x1568274a8 'ctx' 'void *'
    |   `-IntegerLiteral 0x156827c20 <col:41> 'int' 0
    |-CallExpr 0x156827f40 <line:14:2, line:15:45> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x156827d30 <line:14:2> 'int ()' Function 0x1568277f8 'Debug' 'int ()'
    | |-RecoveryExpr 0x156827f20 <col:9> '<dependent type>' contains-errors lvalue
    | |-StringLiteral 0x156827d68 <col:27> 'char[4]' lvalue "STR"
    | |-ConditionalOperator 0x156827e68 <line:15:3, col:31> '<dependent type>' contains-errors
    | | |-RecoveryExpr 0x156827dc0 <col:3, col:8> '<dependent type>' contains-errors lvalue
    | | | `-DeclRefExpr 0x156827d88 <col:3> 'struct berval *' lvalue ParmVar 0x156827428 'out' 'struct berval *'
    | | |-RecoveryExpr 0x156827e20 <col:17, col:22> '<dependent type>' contains-errors lvalue
    | | | `-DeclRefExpr 0x156827de8 <col:17> 'struct berval *' lvalue ParmVar 0x156827428 'out' 'struct berval *'
    | | `-StringLiteral 0x156827e48 <col:31> 'char[4]' lvalue "STR"
    | |-DeclRefExpr 0x156827e98 <col:39> 'int' lvalue Var 0x1568276d8 'rc' 'int'
    | `-IntegerLiteral 0x156827eb8 <col:43> 'int' 0
    `-ReturnStmt 0x156827fc0 <line:17:2, col:9>
      `-ImplicitCastExpr 0x156827fa8 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x156827f88 <col:9> 'int' lvalue Var 0x1568276d8 'rc' 'int'
