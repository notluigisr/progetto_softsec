`-FunctionDecl 0x1580eb758  line:1:12 write_empty_blocks 'int (struct page *, unsigned int, unsigned int, int)' static
  |-ParmVarDecl 0x1580cf848 <col:31, col:44> col:44 used page 'struct page *'
  |-ParmVarDecl 0x1580cf8c8 <col:50, col:59> col:59 used from 'unsigned int'
  |-ParmVarDecl 0x1580cf948 <col:65, col:74> col:74 used to 'unsigned int'
  |-ParmVarDecl 0x1580eb600 <line:2:10, col:14> col:14 used mode 'int'
  `-CompoundStmt 0x1580edf38 <line:3:1, line:49:1>
    |-DeclStmt 0x1580ebb00 <line:4:2, col:43>
    | |-RecordDecl 0x1580eb868 <col:2, col:9> col:9 struct inode
    | `-VarDecl 0x1580eb9d8 <col:2, col:39> col:16 used inode 'struct inode *' cinit
    |   `-CXXDependentScopeMemberExpr 0x1580ebaa0 <col:24, col:39> '<dependent type>' contains-errors lvalue ->host
    |     `-RecoveryExpr 0x1580eba78 <col:24, col:30> '<dependent type>' contains-errors lvalue
    |       `-DeclRefExpr 0x1580eba40 <col:24> 'struct page *' lvalue ParmVar 0x1580cf848 'page' 'struct page *'
    |-DeclStmt 0x1580ebd40 <line:5:2, col:36>
    | |-VarDecl 0x1580ebb30 <col:2, col:11> col:11 used start 'unsigned int'
    | |-VarDecl 0x1580ebbb0 <col:2, col:18> col:18 used end 'unsigned int'
    | |-VarDecl 0x1580ebc30 <col:2, col:23> col:23 used next 'unsigned int'
    | `-VarDecl 0x1580ebcb0 <col:2, col:29> col:29 used blksize 'unsigned int'
    |-DeclStmt 0x1580ebdf0 <line:7:2, col:9>
    | `-VarDecl 0x1580ebd88 <col:2, col:6> col:6 used ret 'int'
    |-BinaryOperator 0x1580ebec8 <line:9:2, col:24> 'unsigned int' contains-errors '='
    | |-DeclRefExpr 0x1580ebe08 <col:2> 'unsigned int' lvalue Var 0x1580ebcb0 'blksize' 'unsigned int'
    | `-BinaryOperator 0x1580ebea8 <col:12, col:24> '<dependent type>' contains-errors '<<'
    |   |-IntegerLiteral 0x1580ebe28 <col:12> 'int' 1
    |   `-RecoveryExpr 0x1580ebe80 <col:17, col:24> '<dependent type>' contains-errors lvalue
    |     `-DeclRefExpr 0x1580ebe48 <col:17> 'struct inode *' contains-errors lvalue Var 0x1580eb9d8 'inode' 'struct inode *'
    |-BinaryOperator 0x1580ebf80 <line:10:2, col:15> 'unsigned int' '='
    | |-DeclRefExpr 0x1580ebee8 <col:2> 'unsigned int' lvalue Var 0x1580ebc30 'next' 'unsigned int'
    | `-BinaryOperator 0x1580ebf60 <col:9, col:15> 'unsigned int' '='
    |   |-DeclRefExpr 0x1580ebf08 <col:9> 'unsigned int' lvalue Var 0x1580ebbb0 'end' 'unsigned int'
    |   `-ImplicitCastExpr 0x1580ebf48 <col:15> 'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x1580ebf28 <col:15> 'int' 0
    |-WhileStmt 0x1580ec0d0 <line:11:2, line:14:2>
    | |-BinaryOperator 0x1580ec010 <line:11:9, col:16> 'int' '<'
    | | |-ImplicitCastExpr 0x1580ebfe0 <col:9> 'unsigned int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1580ebfa0 <col:9> 'unsigned int' lvalue Var 0x1580ebc30 'next' 'unsigned int'
    | | `-ImplicitCastExpr 0x1580ebff8 <col:16> 'unsigned int' <LValueToRValue>
    | |   `-DeclRefExpr 0x1580ebfc0 <col:16> 'unsigned int' lvalue ParmVar 0x1580cf8c8 'from' 'unsigned int'
    | `-CompoundStmt 0x1580ec0b8 <col:22, line:14:2>
    |   `-CompoundAssignOperator 0x1580ec088 <line:12:3, col:11> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    |     |-DeclRefExpr 0x1580ec030 <col:3> 'unsigned int' lvalue Var 0x1580ebc30 'next' 'unsigned int'
    |     `-ImplicitCastExpr 0x1580ec070 <col:11> 'unsigned int' <LValueToRValue>
    |       `-DeclRefExpr 0x1580ec050 <col:11> 'unsigned int' lvalue Var 0x1580ebcb0 'blksize' 'unsigned int'
    |-BinaryOperator 0x1580ec148 <line:15:2, col:10> 'unsigned int' '='
    | |-DeclRefExpr 0x1580ec0f0 <col:2> 'unsigned int' lvalue Var 0x1580ebb30 'start' 'unsigned int'
    | `-ImplicitCastExpr 0x1580ec130 <col:10> 'unsigned int' <LValueToRValue>
    |   `-DeclRefExpr 0x1580ec110 <col:10> 'unsigned int' lvalue Var 0x1580ebc30 'next' 'unsigned int'
    |-DoStmt 0x1580ed810 <line:16:2, line:37:20>
    | |-CompoundStmt 0x1580ed750 <line:16:5, line:37:2>
    | | |-CompoundAssignOperator 0x1580ec1c0 <line:17:3, col:11> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    | | | |-DeclRefExpr 0x1580ec168 <col:3> 'unsigned int' lvalue Var 0x1580ebc30 'next' 'unsigned int'
    | | | `-ImplicitCastExpr 0x1580ec1a8 <col:11> 'unsigned int' <LValueToRValue>
    | | |   `-DeclRefExpr 0x1580ec188 <col:11> 'unsigned int' lvalue Var 0x1580ebcb0 'blksize' 'unsigned int'
    | | |-BinaryOperator 0x1580ec418 <line:18:3, col:39> 'int' contains-errors '='
    | | | |-DeclRefExpr 0x1580ec1f0 <col:3> 'int' lvalue Var 0x1580ebd88 'ret' 'int'
    | | | `-CallExpr 0x1580ec3e8 <col:9, col:39> '<dependent type>' contains-errors
    | | |   |-DeclRefExpr 0x1580ec320 <col:9> 'int ()' Function 0x1580ec268 'needs_empty_write' 'int ()'
    | | |   |-RecoveryExpr 0x1580ec3c8 <col:27> '<dependent type>' contains-errors lvalue
    | | |   `-DeclRefExpr 0x1580ec358 <col:34> 'struct inode *' contains-errors lvalue Var 0x1580eb9d8 'inode' 'struct inode *'
    | | |-IfStmt 0x1580ecc70 <line:19:3, line:20:11>
    | | | |-CallExpr 0x1580ecc00 <line:19:7, col:23> 'int'
    | | | | |-ImplicitCastExpr 0x1580ec5e0 <col:7> 'int (*)()' <FunctionToPointerDecay>
    | | | | | `-DeclRefExpr 0x1580ec518 <col:7> 'int ()' Function 0x1580ec460 'unlikely' 'int ()'
    | | | | `-BinaryOperator 0x1580ec590 <col:16, col:22> 'int' '<'
    | | | |   |-ImplicitCastExpr 0x1580ec578 <col:16> 'int' <LValueToRValue>
    | | | |   | `-DeclRefExpr 0x1580ec538 <col:16> 'int' lvalue Var 0x1580ebd88 'ret' 'int'
    | | | |   `-IntegerLiteral 0x1580ec558 <col:22> 'int' 0
    | | | `-ReturnStmt 0x1580ecc60 <line:20:4, col:11>
    | | |   `-ImplicitCastExpr 0x1580ecc48 <col:11> 'int' <LValueToRValue>
    | | |     `-DeclRefExpr 0x1580ecc28 <col:11> 'int' lvalue Var 0x1580ebd88 'ret' 'int'
    | | `-IfStmt 0x1580ed720 <line:21:3, line:35:10> has_else
    | |   |-BinaryOperator 0x1580ecce8 <line:21:7, col:14> 'int' '=='
    | |   | |-ImplicitCastExpr 0x1580eccd0 <col:7> 'int' <LValueToRValue>
    | |   | | `-DeclRefExpr 0x1580ecc90 <col:7> 'int' lvalue Var 0x1580ebd88 'ret' 'int'
    | |   | `-IntegerLiteral 0x1580eccb0 <col:14> 'int' 0
    | |   |-CompoundStmt 0x1580ed688 <col:17, line:33:3>
    | |   | |-IfStmt 0x1580ed5f0 <line:22:4, line:31:4>
    | |   | | |-ImplicitCastExpr 0x1580ecd28 <line:22:8> 'unsigned int' <LValueToRValue>
    | |   | | | `-DeclRefExpr 0x1580ecd08 <col:8> 'unsigned int' lvalue Var 0x1580ebbb0 'end' 'unsigned int'
    | |   | | `-CompoundStmt 0x1580ed5b8 <col:13, line:31:4>
    | |   | |   |-BinaryOperator 0x1580ed0a8 <line:23:5, line:24:24> 'int' contains-errors '='
    | |   | |   | |-DeclRefExpr 0x1580ecd40 <line:23:5> 'int' lvalue Var 0x1580ebd88 'ret' 'int'
    | |   | |   | `-CallExpr 0x1580ed068 <col:11, line:24:24> '<dependent type>' contains-errors
    | |   | |   |   |-DeclRefExpr 0x1580ece40 <line:23:11> 'int ()' Function 0x1580ecd88 '__block_write_begin' 'int ()'
    | |   | |   |   |-DeclRefExpr 0x1580ece60 <col:31> 'struct page *' lvalue ParmVar 0x1580cf848 'page' 'struct page *'
    | |   | |   |   |-DeclRefExpr 0x1580ece80 <col:37> 'unsigned int' lvalue Var 0x1580ebb30 'start' 'unsigned int'
    | |   | |   |   |-BinaryOperator 0x1580ed028 <col:44, col:50> 'unsigned int' '-'
    | |   | |   |   | |-ImplicitCastExpr 0x1580ecff8 <col:44> 'unsigned int' <LValueToRValue>
    | |   | |   |   | | `-DeclRefExpr 0x1580ecea0 <col:44> 'unsigned int' lvalue Var 0x1580ebbb0 'end' 'unsigned int'
    | |   | |   |   | `-ImplicitCastExpr 0x1580ed010 <col:50> 'unsigned int' <LValueToRValue>
    | |   | |   |   |   `-DeclRefExpr 0x1580ecec0 <col:50> 'unsigned int' lvalue Var 0x1580ebb30 'start' 'unsigned int'
    | |   | |   |   `-RecoveryExpr 0x1580ed048 <line:24:10> '<dependent type>' contains-errors lvalue
    | |   | |   |-IfStmt 0x1580ed1a8 <line:25:5, line:26:13>
    | |   | |   | |-CallExpr 0x1580ed120 <line:25:9, col:21> 'int'
    | |   | |   | | |-ImplicitCastExpr 0x1580ed108 <col:9> 'int (*)()' <FunctionToPointerDecay>
    | |   | |   | | | `-DeclRefExpr 0x1580ed0c8 <col:9> 'int ()' Function 0x1580ec460 'unlikely' 'int ()'
    | |   | |   | | `-ImplicitCastExpr 0x1580ed148 <col:18> 'int' <LValueToRValue>
    | |   | |   | |   `-DeclRefExpr 0x1580ed0e8 <col:18> 'int' lvalue Var 0x1580ebd88 'ret' 'int'
    | |   | |   | `-ReturnStmt 0x1580ed198 <line:26:6, col:13>
    | |   | |   |   `-ImplicitCastExpr 0x1580ed180 <col:13> 'int' <LValueToRValue>
    | |   | |   |     `-DeclRefExpr 0x1580ed160 <col:13> 'int' lvalue Var 0x1580ebd88 'ret' 'int'
    | |   | |   |-BinaryOperator 0x1580ed420 <line:27:5, col:49> 'int' '='
    | |   | |   | |-DeclRefExpr 0x1580ed1c8 <col:5> 'int' lvalue Var 0x1580ebd88 'ret' 'int'
    | |   | |   | `-CallExpr 0x1580ed380 <col:11, col:49> 'int'
    | |   | |   |   |-ImplicitCastExpr 0x1580ed368 <col:11> 'int (*)()' <FunctionToPointerDecay>
    | |   | |   |   | `-DeclRefExpr 0x1580ed2c8 <col:11> 'int ()' Function 0x1580ed210 'empty_write_end' 'int ()'
    | |   | |   |   |-ImplicitCastExpr 0x1580ed3c0 <col:27> 'struct page *' <LValueToRValue>
    | |   | |   |   | `-DeclRefExpr 0x1580ed2e8 <col:27> 'struct page *' lvalue ParmVar 0x1580cf848 'page' 'struct page *'
    | |   | |   |   |-ImplicitCastExpr 0x1580ed3d8 <col:33> 'unsigned int' <LValueToRValue>
    | |   | |   |   | `-DeclRefExpr 0x1580ed308 <col:33> 'unsigned int' lvalue Var 0x1580ebb30 'start' 'unsigned int'
    | |   | |   |   |-ImplicitCastExpr 0x1580ed3f0 <col:40> 'unsigned int' <LValueToRValue>
    | |   | |   |   | `-DeclRefExpr 0x1580ed328 <col:40> 'unsigned int' lvalue Var 0x1580ebbb0 'end' 'unsigned int'
    | |   | |   |   `-ImplicitCastExpr 0x1580ed408 <col:45> 'int' <LValueToRValue>
    | |   | |   |     `-DeclRefExpr 0x1580ed348 <col:45> 'int' lvalue ParmVar 0x1580eb600 'mode' 'int'
    | |   | |   |-IfStmt 0x1580ed520 <line:28:5, line:29:13>
    | |   | |   | |-CallExpr 0x1580ed498 <line:28:9, col:21> 'int'
    | |   | |   | | |-ImplicitCastExpr 0x1580ed480 <col:9> 'int (*)()' <FunctionToPointerDecay>
    | |   | |   | | | `-DeclRefExpr 0x1580ed440 <col:9> 'int ()' Function 0x1580ec460 'unlikely' 'int ()'
    | |   | |   | | `-ImplicitCastExpr 0x1580ed4c0 <col:18> 'int' <LValueToRValue>
    | |   | |   | |   `-DeclRefExpr 0x1580ed460 <col:18> 'int' lvalue Var 0x1580ebd88 'ret' 'int'
    | |   | |   | `-ReturnStmt 0x1580ed510 <line:29:6, col:13>
    | |   | |   |   `-ImplicitCastExpr 0x1580ed4f8 <col:13> 'int' <LValueToRValue>
    | |   | |   |     `-DeclRefExpr 0x1580ed4d8 <col:13> 'int' lvalue Var 0x1580ebd88 'ret' 'int'
    | |   | |   `-BinaryOperator 0x1580ed598 <line:30:5, col:11> 'unsigned int' '='
    | |   | |     |-DeclRefExpr 0x1580ed540 <col:5> 'unsigned int' lvalue Var 0x1580ebbb0 'end' 'unsigned int'
    | |   | |     `-ImplicitCastExpr 0x1580ed580 <col:11> 'unsigned int' <IntegralCast>
    | |   | |       `-IntegerLiteral 0x1580ed560 <col:11> 'int' 0
    | |   | `-BinaryOperator 0x1580ed668 <line:32:4, col:12> 'unsigned int' '='
    | |   |   |-DeclRefExpr 0x1580ed610 <col:4> 'unsigned int' lvalue Var 0x1580ebb30 'start' 'unsigned int'
    | |   |   `-ImplicitCastExpr 0x1580ed650 <col:12> 'unsigned int' <LValueToRValue>
    | |   |     `-DeclRefExpr 0x1580ed630 <col:12> 'unsigned int' lvalue Var 0x1580ebc30 'next' 'unsigned int'
    | |   `-BinaryOperator 0x1580ed700 <line:35:4, col:10> 'unsigned int' '='
    | |     |-DeclRefExpr 0x1580ed6a8 <col:4> 'unsigned int' lvalue Var 0x1580ebbb0 'end' 'unsigned int'
    | |     `-ImplicitCastExpr 0x1580ed6e8 <col:10> 'unsigned int' <LValueToRValue>
    | |       `-DeclRefExpr 0x1580ed6c8 <col:10> 'unsigned int' lvalue Var 0x1580ebc30 'next' 'unsigned int'
    | `-BinaryOperator 0x1580ed7f0 <line:37:11, col:18> 'int' '<'
    |   |-ImplicitCastExpr 0x1580ed7c0 <col:11> 'unsigned int' <LValueToRValue>
    |   | `-DeclRefExpr 0x1580ed780 <col:11> 'unsigned int' lvalue Var 0x1580ebc30 'next' 'unsigned int'
    |   `-ImplicitCastExpr 0x1580ed7d8 <col:18> 'unsigned int' <LValueToRValue>
    |     `-DeclRefExpr 0x1580ed7a0 <col:18> 'unsigned int' lvalue ParmVar 0x1580cf948 'to' 'unsigned int'
    |-IfStmt 0x1580edee8 <line:39:2, line:46:2>
    | |-ImplicitCastExpr 0x1580ed850 <line:39:6> 'unsigned int' <LValueToRValue>
    | | `-DeclRefExpr 0x1580ed830 <col:6> 'unsigned int' lvalue Var 0x1580ebbb0 'end' 'unsigned int'
    | `-CompoundStmt 0x1580edeb8 <col:11, line:46:2>
    |   |-BinaryOperator 0x1580edaf0 <line:40:3, col:69> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x1580ed868 <col:3> 'int' lvalue Var 0x1580ebd88 'ret' 'int'
    |   | `-CallExpr 0x1580edab0 <col:9, col:69> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x1580ed888 <col:9> 'int ()' Function 0x1580ecd88 '__block_write_begin' 'int ()'
    |   |   |-DeclRefExpr 0x1580ed8a8 <col:29> 'struct page *' lvalue ParmVar 0x1580cf848 'page' 'struct page *'
    |   |   |-DeclRefExpr 0x1580ed8c8 <col:35> 'unsigned int' lvalue Var 0x1580ebb30 'start' 'unsigned int'
    |   |   |-BinaryOperator 0x1580eda70 <col:42, col:48> 'unsigned int' '-'
    |   |   | |-ImplicitCastExpr 0x1580eda40 <col:42> 'unsigned int' <LValueToRValue>
    |   |   | | `-DeclRefExpr 0x1580ed8e8 <col:42> 'unsigned int' lvalue Var 0x1580ebbb0 'end' 'unsigned int'
    |   |   | `-ImplicitCastExpr 0x1580eda58 <col:48> 'unsigned int' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x1580ed908 <col:48> 'unsigned int' lvalue Var 0x1580ebb30 'start' 'unsigned int'
    |   |   `-RecoveryExpr 0x1580eda90 <col:55> '<dependent type>' contains-errors lvalue
    |   |-IfStmt 0x1580edc00 <line:41:3, line:42:11>
    |   | |-CallExpr 0x1580edb68 <line:41:7, col:19> 'int'
    |   | | |-ImplicitCastExpr 0x1580edb50 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |   | | | `-DeclRefExpr 0x1580edb10 <col:7> 'int ()' Function 0x1580ec460 'unlikely' 'int ()'
    |   | | `-ImplicitCastExpr 0x1580edb90 <col:16> 'int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x1580edb30 <col:16> 'int' lvalue Var 0x1580ebd88 'ret' 'int'
    |   | `-ReturnStmt 0x1580edbe0 <line:42:4, col:11>
    |   |   `-ImplicitCastExpr 0x1580edbc8 <col:11> 'int' <LValueToRValue>
    |   |     `-DeclRefExpr 0x1580edba8 <col:11> 'int' lvalue Var 0x1580ebd88 'ret' 'int'
    |   |-BinaryOperator 0x1580edd98 <line:43:3, col:47> 'int' '='
    |   | |-DeclRefExpr 0x1580edc20 <col:3> 'int' lvalue Var 0x1580ebd88 'ret' 'int'
    |   | `-CallExpr 0x1580edcf8 <col:9, col:47> 'int'
    |   |   |-ImplicitCastExpr 0x1580edce0 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   |   | `-DeclRefExpr 0x1580edc40 <col:9> 'int ()' Function 0x1580ed210 'empty_write_end' 'int ()'
    |   |   |-ImplicitCastExpr 0x1580edd38 <col:25> 'struct page *' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x1580edc60 <col:25> 'struct page *' lvalue ParmVar 0x1580cf848 'page' 'struct page *'
    |   |   |-ImplicitCastExpr 0x1580edd50 <col:31> 'unsigned int' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x1580edc80 <col:31> 'unsigned int' lvalue Var 0x1580ebb30 'start' 'unsigned int'
    |   |   |-ImplicitCastExpr 0x1580edd68 <col:38> 'unsigned int' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x1580edca0 <col:38> 'unsigned int' lvalue Var 0x1580ebbb0 'end' 'unsigned int'
    |   |   `-ImplicitCastExpr 0x1580edd80 <col:43> 'int' <LValueToRValue>
    |   |     `-DeclRefExpr 0x1580edcc0 <col:43> 'int' lvalue ParmVar 0x1580eb600 'mode' 'int'
    |   `-IfStmt 0x1580ede98 <line:44:3, line:45:11>
    |     |-CallExpr 0x1580ede10 <line:44:7, col:19> 'int'
    |     | |-ImplicitCastExpr 0x1580eddf8 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |     | | `-DeclRefExpr 0x1580eddb8 <col:7> 'int ()' Function 0x1580ec460 'unlikely' 'int ()'
    |     | `-ImplicitCastExpr 0x1580ede38 <col:16> 'int' <LValueToRValue>
    |     |   `-DeclRefExpr 0x1580eddd8 <col:16> 'int' lvalue Var 0x1580ebd88 'ret' 'int'
    |     `-ReturnStmt 0x1580ede88 <line:45:4, col:11>
    |       `-ImplicitCastExpr 0x1580ede70 <col:11> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x1580ede50 <col:11> 'int' lvalue Var 0x1580ebd88 'ret' 'int'
    `-ReturnStmt 0x1580edf28 <line:48:2, col:9>
      `-IntegerLiteral 0x1580edf08 <col:9> 'int' 0
