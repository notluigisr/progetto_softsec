`-FunctionDecl 0x14100df18  line:1:1 invalid search_upvar 'int (int *, int, int *)'
  |-ParmVarDecl 0x14100dd28 <col:14, col:29> col:29 invalid s 'int *'
  |-ParmVarDecl 0x14100dda8 <col:32, col:40> col:40 invalid id 'int'
  |-ParmVarDecl 0x14100de28 <col:44, col:49> col:49 used idx 'int *'
  `-CompoundStmt 0x14102a0e8 <line:2:1, line:39:1>
    |-DeclStmt 0x14100e1c8 <line:3:3, col:24>
    | |-RecordDecl 0x14100dfd8 <col:9, col:16> col:16 struct RProc
    | `-VarDecl 0x14100e148 <col:3, col:23> col:23 used u 'const struct RProc *'
    |-DeclStmt 0x14100e280 <line:4:3, col:13>
    | `-VarDecl 0x14100e1f8 <col:3, col:12> col:7 used lv 'int' cinit
    |   `-IntegerLiteral 0x14100e260 <col:12> 'int' 0
    |-WhileStmt 0x141027c70 <line:7:3, line:14:3>
    | |-RecoveryExpr 0x14100e330 <line:7:10> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x141027c48 <col:14, line:14:3>
    |   |-BinaryOperator 0x141027a68 <line:8:5, col:25> 'int' contains-errors '='
    |   | |-UnaryOperator 0x141027a00 <col:5, col:6> 'int' lvalue prefix '*' cannot overflow
    |   | | `-ImplicitCastExpr 0x1410279e8 <col:6> 'int *' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x14100e350 <col:6> 'int *' lvalue ParmVar 0x14100de28 'idx' 'int *'
    |   | `-CallExpr 0x141027a38 <col:12, col:25> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x141027910 <col:12> 'int ()' Function 0x141027858 'lv_idx' 'int ()'
    |   |   |-RecoveryExpr 0x141027a18 <col:19> '<dependent type>' contains-errors lvalue
    |   |   `-RecoveryExpr 0x141027948 <col:23> '<dependent type>' contains-errors lvalue
    |   |-IfStmt 0x141027b90 <line:9:5, line:11:5>
    |   | |-BinaryOperator 0x141027b10 <line:9:9, col:16> 'int' '>'
    |   | | |-ImplicitCastExpr 0x141027af8 <col:9, col:10> 'int' <LValueToRValue>
    |   | | | `-UnaryOperator 0x141027ac0 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
    |   | | |   `-ImplicitCastExpr 0x141027aa8 <col:10> 'int *' <LValueToRValue>
    |   | | |     `-DeclRefExpr 0x141027a88 <col:10> 'int *' lvalue ParmVar 0x14100de28 'idx' 'int *'
    |   | | `-IntegerLiteral 0x141027ad8 <col:16> 'int' 0
    |   | `-CompoundStmt 0x141027b78 <col:19, line:11:5>
    |   |   `-ReturnStmt 0x141027b68 <line:10:7, col:14>
    |   |     `-ImplicitCastExpr 0x141027b50 <col:14> 'int' <LValueToRValue>
    |   |       `-DeclRefExpr 0x141027b30 <col:14> 'int' lvalue Var 0x14100e1f8 'lv' 'int'
    |   `-UnaryOperator 0x141027bd0 <line:12:5, col:8> 'int' postfix '++'
    |     `-DeclRefExpr 0x141027bb0 <col:5> 'int' lvalue Var 0x14100e1f8 'lv' 'int'
    |-IfStmt 0x141027d68 <line:16:3, col:20>
    | |-BinaryOperator 0x141027ce8 <col:7, col:12> 'int' '<'
    | | |-ImplicitCastExpr 0x141027cd0 <col:7> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x141027c90 <col:7> 'int' lvalue Var 0x14100e1f8 'lv' 'int'
    | | `-IntegerLiteral 0x141027cb0 <col:12> 'int' 1
    | `-BinaryOperator 0x141027d48 <col:15, col:20> 'int' '='
    |   |-DeclRefExpr 0x141027d08 <col:15> 'int' lvalue Var 0x14100e1f8 'lv' 'int'
    |   `-IntegerLiteral 0x141027d28 <col:20> 'int' 1
    |-BinaryOperator 0x141027e58 <line:17:3, col:18> 'const struct RProc *' contains-errors '='
    | |-DeclRefExpr 0x141027d88 <col:3> 'const struct RProc *' lvalue Var 0x14100e148 'u' 'const struct RProc *'
    | `-CXXDependentScopeMemberExpr 0x141027e10 <col:7, col:18> '<dependent type>' contains-errors lvalue ->upper
    |   `-CXXDependentScopeMemberExpr 0x141027dc8 <col:7, col:10> '<dependent type>' contains-errors lvalue ->parser
    |     `-RecoveryExpr 0x141027da8 <col:7> '<dependent type>' contains-errors lvalue
    |-WhileStmt 0x141029ec8 <line:18:3, line:35:3>
    | |-BinaryOperator 0x141028078 <line:18:10, col:34> 'int' '&&'
    | | |-ImplicitCastExpr 0x141028060 <col:10> 'const struct RProc *' <LValueToRValue>
    | | | `-DeclRefExpr 0x141027e78 <col:10> 'const struct RProc *' lvalue Var 0x14100e148 'u' 'const struct RProc *'
    | | `-UnaryOperator 0x141028048 <col:15, col:34> 'int' prefix '!' cannot overflow
    | |   `-CallExpr 0x141028008 <col:16, col:34> 'int'
    | |     |-ImplicitCastExpr 0x141027ff0 <col:16> 'int (*)()' <FunctionToPointerDecay>
    | |     | `-DeclRefExpr 0x141027f78 <col:16> 'int ()' Function 0x141027ec0 'MRB_PROC_CFUNC_P' 'int ()'
    | |     `-ImplicitCastExpr 0x141028030 <col:33> 'const struct RProc *' <LValueToRValue>
    | |       `-DeclRefExpr 0x141027f98 <col:33> 'const struct RProc *' lvalue Var 0x14100e148 'u' 'const struct RProc *'
    | `-CompoundStmt 0x141029e80 <col:37, line:35:3>
    |   |-DeclStmt 0x141028758 <line:19:5, col:45>
    |   | |-RecordDecl 0x141028098 <col:11, col:18> col:18 struct mrb_irep
    |   | `-VarDecl 0x141028208 <col:5, col:41> col:28 used ir 'const struct mrb_irep *' cinit
    |   |   `-CXXDependentScopeMemberExpr 0x1410286f8 <col:33, col:41> '<dependent type>' contains-errors lvalue .irep
    |   |     `-RecoveryExpr 0x1410286d0 <col:33, col:36> '<dependent type>' contains-errors lvalue
    |   |       `-DeclRefExpr 0x141028270 <col:33> 'const struct RProc *' lvalue Var 0x14100e148 'u' 'const struct RProc *'
    |   |-DeclStmt 0x141029600 <line:21:5, col:10>
    |   | `-VarDecl 0x141028788 <col:5, col:9> col:9 used i 'int'
    |   |-DeclStmt 0x1410296f8 <line:23:5, col:30>
    |   | `-VarDecl 0x141029630 <col:5, col:20> col:20 invalid v 'const int *'
    |   |-IfStmt 0x141029be8 <line:24:5, line:31:5>
    |   | |-RecoveryExpr 0x141029710 <line:24:9> '<dependent type>' contains-errors lvalue
    |   | `-CompoundStmt 0x141029bd0 <col:12, line:31:5>
    |   |   `-ForStmt 0x141029b98 <line:25:7, line:30:7>
    |   |     |-BinaryOperator 0x141029770 <line:25:12, col:14> 'int' '='
    |   |     | |-DeclRefExpr 0x141029730 <col:12> 'int' lvalue Var 0x141028788 'i' 'int'
    |   |     | `-IntegerLiteral 0x141029750 <col:14> 'int' 1
    |   |     |-<<<NULL>>>
    |   |     |-BinaryOperator 0x141029808 <col:17, col:21> 'int' contains-errors '>'
    |   |     | |-RecoveryExpr 0x1410297e8 <col:17> '<dependent type>' contains-errors lvalue
    |   |     | `-IntegerLiteral 0x1410297a8 <col:21> 'int' 1
    |   |     |-BinaryOperator 0x141029960 <col:24, col:35> 'int' contains-errors ','
    |   |     | |-BinaryOperator 0x141029940 <col:24, col:30> '<dependent type>' contains-errors ','
    |   |     | | |-UnaryOperator 0x141029928 <col:24, col:25> '<dependent type>' contains-errors postfix '--' cannot overflow
    |   |     | | | `-RecoveryExpr 0x141029908 <col:24> '<dependent type>' contains-errors lvalue
    |   |     | | `-UnaryOperator 0x141029878 <col:29, col:30> '<dependent type>' contains-errors postfix '++' cannot overflow
    |   |     | |   `-RecoveryExpr 0x141029858 <col:29> '<dependent type>' contains-errors lvalue
    |   |     | `-UnaryOperator 0x1410298d0 <col:34, col:35> 'int' postfix '++'
    |   |     |   `-DeclRefExpr 0x1410298b0 <col:34> 'int' lvalue Var 0x141028788 'i' 'int'
    |   |     `-CompoundStmt 0x141029b80 <col:39, line:30:7>
    |   |       `-IfStmt 0x141029b60 <line:26:9, line:29:9>
    |   |         |-BinaryOperator 0x1410299f0 <line:26:13, col:19> 'int' contains-errors '=='
    |   |         | |-UnaryOperator 0x1410299b8 <col:13, col:14> '<dependent type>' contains-errors prefix '*' cannot overflow
    |   |         | | `-ImplicitCastExpr 0x1410299a0 <col:14> '<dependent type>' contains-errors <LValueToRValue>
    |   |         | |   `-RecoveryExpr 0x141029980 <col:14> '<dependent type>' contains-errors lvalue
    |   |         | `-RecoveryExpr 0x1410299d0 <col:19> '<dependent type>' contains-errors lvalue
    |   |         `-CompoundStmt 0x141029b40 <col:23, line:29:9>
    |   |           |-BinaryOperator 0x141029a98 <line:27:11, col:18> 'int' '='
    |   |           | |-UnaryOperator 0x141029a48 <col:11, col:12> 'int' lvalue prefix '*' cannot overflow
    |   |           | | `-ImplicitCastExpr 0x141029a30 <col:12> 'int *' <LValueToRValue>
    |   |           | |   `-DeclRefExpr 0x141029a10 <col:12> 'int *' lvalue ParmVar 0x14100de28 'idx' 'int *'
    |   |           | `-ImplicitCastExpr 0x141029a80 <col:18> 'int' <LValueToRValue>
    |   |           |   `-DeclRefExpr 0x141029a60 <col:18> 'int' lvalue Var 0x141028788 'i' 'int'
    |   |           `-ReturnStmt 0x141029b30 <line:28:11, col:23>
    |   |             `-BinaryOperator 0x141029b10 <col:18, col:23> 'int' '-'
    |   |               |-ImplicitCastExpr 0x141029af8 <col:18> 'int' <LValueToRValue>
    |   |               | `-DeclRefExpr 0x141029ab8 <col:18> 'int' lvalue Var 0x14100e1f8 'lv' 'int'
    |   |               `-IntegerLiteral 0x141029ad8 <col:23> 'int' 1
    |   |-IfStmt 0x141029d88 <line:32:5, col:30>
    |   | |-CallExpr 0x141029d40 <col:9, col:27> 'int'
    |   | | |-ImplicitCastExpr 0x141029d28 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   | | | `-DeclRefExpr 0x141029ce8 <col:9> 'int ()' Function 0x141029c30 'MRB_PROC_SCOPE_P' 'int ()'
    |   | | `-ImplicitCastExpr 0x141029d68 <col:26> 'const struct RProc *' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x141029d08 <col:26> 'const struct RProc *' lvalue Var 0x14100e148 'u' 'const struct RProc *'
    |   | `-BreakStmt 0x141029d80 <col:30>
    |   |-BinaryOperator 0x141029e28 <line:33:5, col:12> 'const struct RProc *' contains-errors '='
    |   | |-DeclRefExpr 0x141029da8 <col:5> 'const struct RProc *' lvalue Var 0x14100e148 'u' 'const struct RProc *'
    |   | `-RecoveryExpr 0x141029e00 <col:9, col:12> '<dependent type>' contains-errors lvalue
    |   |   `-DeclRefExpr 0x141029dc8 <col:9> 'const struct RProc *' lvalue Var 0x14100e148 'u' 'const struct RProc *'
    |   `-UnaryOperator 0x141029e68 <line:34:5, col:8> 'int' postfix '++'
    |     `-DeclRefExpr 0x141029e48 <col:5> 'int' lvalue Var 0x14100e1f8 'lv' 'int'
    |-CallExpr 0x14102a070 <line:37:3, col:25> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x141029fc8 <col:3> 'int ()' Function 0x141029f10 'codegen_error' 'int ()'
    | |-RecoveryExpr 0x141029fe8 <col:17> '<dependent type>' contains-errors lvalue
    | `-StringLiteral 0x14102a050 <col:20> 'char[4]' lvalue "STR"
    `-ReturnStmt 0x14102a0d8 <line:38:3, col:11>
      `-UnaryOperator 0x14102a0c0 <col:10, col:11> 'int' prefix '-'
        `-IntegerLiteral 0x14102a0a0 <col:11> 'int' 1
