`-FunctionDecl 0x15480dda0  line:1:6 make_random_permutation 'void (int)'
  |-ParmVarDecl 0x15480dcd8 <col:30, col:34> col:34 used start 'int'
  `-CompoundStmt 0x154828d20 <col:41, line:12:1>
    |-DeclStmt 0x15480dfb0 <line:2:9, col:17>
    | |-VarDecl 0x15480deb0 <col:9, col:13> col:13 used i 'int'
    | `-VarDecl 0x15480df30 <col:9, col:16> col:16 used j 'int'
    `-ForStmt 0x154828ce8 <line:5:9, line:11:9>
      |-BinaryOperator 0x15480e060 <line:5:14, col:18> 'int' '='
      | |-DeclRefExpr 0x15480e020 <col:14> 'int' lvalue Var 0x15480deb0 'i' 'int'
      | `-IntegerLiteral 0x15480e040 <col:18> 'int' 1
      |-<<<NULL>>>
      |-BinaryOperator 0x15480e0f8 <col:21, col:25> 'int' contains-errors '<'
      | |-DeclRefExpr 0x15480e080 <col:21> 'int' lvalue Var 0x15480deb0 'i' 'int'
      | `-RecoveryExpr 0x15480e0d8 <col:25> '<dependent type>' contains-errors lvalue
      |-UnaryOperator 0x15480e138 <col:37, col:38> 'int' postfix '++'
      | `-DeclRefExpr 0x15480e118 <col:37> 'int' lvalue Var 0x15480deb0 'i' 'int'
      `-CompoundStmt 0x154828cc8 <col:42, line:11:9>
        |-BinaryOperator 0x154828ae0 <line:6:17, col:50> 'int' contains-errors '='
        | |-DeclRefExpr 0x15480e150 <col:17> 'int' lvalue Var 0x15480df30 'j' 'int'
        | `-BinaryOperator 0x154828ac0 <col:21, col:50> '<dependent type>' contains-errors '/'
        |   |-BinaryOperator 0x154828a80 <col:21, col:46> 'double' '*'
        |   | |-ImplicitCastExpr 0x154828a68 <col:21, col:28> 'double' <IntegralToFloating>
        |   | | `-CallExpr 0x1548289b0 <col:21, col:28> 'int'
        |   | |   `-ImplicitCastExpr 0x154828998 <col:21> 'int (*)()' <FunctionToPointerDecay>
        |   | |     `-DeclRefExpr 0x15480e280 <col:21> 'int ()' Function 0x15480e1c8 'random' 'int ()'
        |   | `-CStyleCastExpr 0x154828a40 <col:32, col:46> 'double' <IntegralToFloating>
        |   |   `-ParenExpr 0x154828a20 <col:40, col:46> 'int'
        |   |     `-BinaryOperator 0x154828a00 <col:41, col:45> 'int' '+'
        |   |       |-ImplicitCastExpr 0x1548289e8 <col:41> 'int' <LValueToRValue>
        |   |       | `-DeclRefExpr 0x15480e308 <col:41> 'int' lvalue Var 0x15480deb0 'i' 'int'
        |   |       `-IntegerLiteral 0x15480e328 <col:45> 'int' 1
        |   `-RecoveryExpr 0x154828aa0 <col:50> '<dependent type>' contains-errors lvalue
        `-IfStmt 0x154828bf8 <line:7:17, line:9:17>
          |-BinaryOperator 0x154828b70 <line:7:21, col:26> 'int' '!='
          | |-ImplicitCastExpr 0x154828b40 <col:21> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x154828b00 <col:21> 'int' lvalue Var 0x15480df30 'j' 'int'
          | `-ImplicitCastExpr 0x154828b58 <col:26> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x154828b20 <col:26> 'int' lvalue Var 0x15480deb0 'i' 'int'
          `-CompoundStmt 0x154828be8 <col:29, line:9:17>
