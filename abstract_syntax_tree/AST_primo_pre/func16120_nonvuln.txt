`-FunctionDecl 0x14200de58  line:1:17 invalid checkColorValidity 'unsigned int (int, unsigned int)' static
  |-ParmVarDecl 0x14200dcf0 <col:36, col:53> col:53 invalid colortype 'int'
  |-ParmVarDecl 0x14200dd70 <col:64, col:73> col:73 used bd 'unsigned int'
  `-CompoundStmt 0x142027ef0 <line:2:1, line:13:1>
    |-SwitchStmt 0x14200df48 <line:3:3, line:11:3>
    | |-ImplicitCastExpr 0x14200df30 <line:3:10> '<dependent type>' contains-errors <LValueToRValue>
    | | `-RecoveryExpr 0x14200df10 <col:10> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x142027e40 <line:4:3, line:11:3>
    |   |-CaseStmt 0x14200df90 <line:5:5, col:80>
    |   | |-IntegerLiteral 0x14200df70 <col:10> 'int' 0
    |   | `-IfStmt 0x14200e388 <col:13, col:80>
    |   |   |-UnaryOperator 0x14200e328 <col:16, col:70> 'int' prefix '!' cannot overflow
    |   |   | `-ParenExpr 0x14200e308 <col:17, col:70> 'int'
    |   |   |   `-BinaryOperator 0x14200e2e8 <col:18, col:68> 'int' '||'
    |   |   |     |-BinaryOperator 0x14200e238 <col:18, col:57> 'int' '||'
    |   |   |     | |-BinaryOperator 0x14200e188 <col:18, col:46> 'int' '||'
    |   |   |     | | |-BinaryOperator 0x14200e0d8 <col:18, col:35> 'int' '||'
    |   |   |     | | | |-BinaryOperator 0x14200e028 <col:18, col:24> 'int' '=='
    |   |   |     | | | | |-ImplicitCastExpr 0x14200dff8 <col:18> 'unsigned int' <LValueToRValue>
    |   |   |     | | | | | `-DeclRefExpr 0x14200dfb8 <col:18> 'unsigned int' lvalue ParmVar 0x14200dd70 'bd' 'unsigned int'
    |   |   |     | | | | `-ImplicitCastExpr 0x14200e010 <col:24> 'unsigned int' <IntegralCast>
    |   |   |     | | | |   `-IntegerLiteral 0x14200dfd8 <col:24> 'int' 1
    |   |   |     | | | `-BinaryOperator 0x14200e0b8 <col:29, col:35> 'int' '=='
    |   |   |     | | |   |-ImplicitCastExpr 0x14200e088 <col:29> 'unsigned int' <LValueToRValue>
    |   |   |     | | |   | `-DeclRefExpr 0x14200e048 <col:29> 'unsigned int' lvalue ParmVar 0x14200dd70 'bd' 'unsigned int'
    |   |   |     | | |   `-ImplicitCastExpr 0x14200e0a0 <col:35> 'unsigned int' <IntegralCast>
    |   |   |     | | |     `-IntegerLiteral 0x14200e068 <col:35> 'int' 2
    |   |   |     | | `-BinaryOperator 0x14200e168 <col:40, col:46> 'int' '=='
    |   |   |     | |   |-ImplicitCastExpr 0x14200e138 <col:40> 'unsigned int' <LValueToRValue>
    |   |   |     | |   | `-DeclRefExpr 0x14200e0f8 <col:40> 'unsigned int' lvalue ParmVar 0x14200dd70 'bd' 'unsigned int'
    |   |   |     | |   `-ImplicitCastExpr 0x14200e150 <col:46> 'unsigned int' <IntegralCast>
    |   |   |     | |     `-IntegerLiteral 0x14200e118 <col:46> 'int' 4
    |   |   |     | `-BinaryOperator 0x14200e218 <col:51, col:57> 'int' '=='
    |   |   |     |   |-ImplicitCastExpr 0x14200e1e8 <col:51> 'unsigned int' <LValueToRValue>
    |   |   |     |   | `-DeclRefExpr 0x14200e1a8 <col:51> 'unsigned int' lvalue ParmVar 0x14200dd70 'bd' 'unsigned int'
    |   |   |     |   `-ImplicitCastExpr 0x14200e200 <col:57> 'unsigned int' <IntegralCast>
    |   |   |     |     `-IntegerLiteral 0x14200e1c8 <col:57> 'int' 8
    |   |   |     `-BinaryOperator 0x14200e2c8 <col:62, col:68> 'int' '=='
    |   |   |       |-ImplicitCastExpr 0x14200e298 <col:62> 'unsigned int' <LValueToRValue>
    |   |   |       | `-DeclRefExpr 0x14200e258 <col:62> 'unsigned int' lvalue ParmVar 0x14200dd70 'bd' 'unsigned int'
    |   |   |       `-ImplicitCastExpr 0x14200e2b0 <col:68> 'unsigned int' <IntegralCast>
    |   |   |         `-IntegerLiteral 0x14200e278 <col:68> 'int' 16
    |   |   `-ReturnStmt 0x14200e378 <col:73, col:80>
    |   |     `-ImplicitCastExpr 0x14200e360 <col:80> 'unsigned int' <IntegralCast>
    |   |       `-IntegerLiteral 0x14200e340 <col:80> 'int' 37
    |   |-BreakStmt 0x14200e3a8 <col:84>
    |   |-CaseStmt 0x14200e3d0 <line:6:5, col:80>
    |   | |-IntegerLiteral 0x14200e3b0 <col:10> 'int' 2
    |   | `-IfStmt 0x1420275c0 <col:13, col:80>
    |   |   |-UnaryOperator 0x142027560 <col:16, col:70> 'int' prefix '!' cannot overflow
    |   |   | `-ParenExpr 0x142027540 <col:17, col:70> 'int'
    |   |   |   `-BinaryOperator 0x142027520 <col:51, col:68> 'int' '||'
    |   |   |     |-BinaryOperator 0x142027470 <col:51, col:57> 'int' '=='
    |   |   |     | |-ImplicitCastExpr 0x142027440 <col:51> 'unsigned int' <LValueToRValue>
    |   |   |     | | `-DeclRefExpr 0x142027400 <col:51> 'unsigned int' lvalue ParmVar 0x14200dd70 'bd' 'unsigned int'
    |   |   |     | `-ImplicitCastExpr 0x142027458 <col:57> 'unsigned int' <IntegralCast>
    |   |   |     |   `-IntegerLiteral 0x142027420 <col:57> 'int' 8
    |   |   |     `-BinaryOperator 0x142027500 <col:62, col:68> 'int' '=='
    |   |   |       |-ImplicitCastExpr 0x1420274d0 <col:62> 'unsigned int' <LValueToRValue>
    |   |   |       | `-DeclRefExpr 0x142027490 <col:62> 'unsigned int' lvalue ParmVar 0x14200dd70 'bd' 'unsigned int'
    |   |   |       `-ImplicitCastExpr 0x1420274e8 <col:68> 'unsigned int' <IntegralCast>
    |   |   |         `-IntegerLiteral 0x1420274b0 <col:68> 'int' 16
    |   |   `-ReturnStmt 0x1420275b0 <col:73, col:80>
    |   |     `-ImplicitCastExpr 0x142027598 <col:80> 'unsigned int' <IntegralCast>
    |   |       `-IntegerLiteral 0x142027578 <col:80> 'int' 37
    |   |-BreakStmt 0x1420275e0 <col:84>
    |   |-CaseStmt 0x142027608 <line:7:5, col:80>
    |   | |-IntegerLiteral 0x1420275e8 <col:10> 'int' 3
    |   | `-IfStmt 0x142027950 <col:13, col:80>
    |   |   |-UnaryOperator 0x1420278f0 <col:16, col:70> 'int' prefix '!' cannot overflow
    |   |   | `-ParenExpr 0x1420278d0 <col:17, col:70> 'int'
    |   |   |   `-BinaryOperator 0x1420278b0 <col:18, col:57> 'int' '||'
    |   |   |     |-BinaryOperator 0x142027800 <col:18, col:46> 'int' '||'
    |   |   |     | |-BinaryOperator 0x142027750 <col:18, col:35> 'int' '||'
    |   |   |     | | |-BinaryOperator 0x1420276a0 <col:18, col:24> 'int' '=='
    |   |   |     | | | |-ImplicitCastExpr 0x142027670 <col:18> 'unsigned int' <LValueToRValue>
    |   |   |     | | | | `-DeclRefExpr 0x142027630 <col:18> 'unsigned int' lvalue ParmVar 0x14200dd70 'bd' 'unsigned int'
    |   |   |     | | | `-ImplicitCastExpr 0x142027688 <col:24> 'unsigned int' <IntegralCast>
    |   |   |     | | |   `-IntegerLiteral 0x142027650 <col:24> 'int' 1
    |   |   |     | | `-BinaryOperator 0x142027730 <col:29, col:35> 'int' '=='
    |   |   |     | |   |-ImplicitCastExpr 0x142027700 <col:29> 'unsigned int' <LValueToRValue>
    |   |   |     | |   | `-DeclRefExpr 0x1420276c0 <col:29> 'unsigned int' lvalue ParmVar 0x14200dd70 'bd' 'unsigned int'
    |   |   |     | |   `-ImplicitCastExpr 0x142027718 <col:35> 'unsigned int' <IntegralCast>
    |   |   |     | |     `-IntegerLiteral 0x1420276e0 <col:35> 'int' 2
    |   |   |     | `-BinaryOperator 0x1420277e0 <col:40, col:46> 'int' '=='
    |   |   |     |   |-ImplicitCastExpr 0x1420277b0 <col:40> 'unsigned int' <LValueToRValue>
    |   |   |     |   | `-DeclRefExpr 0x142027770 <col:40> 'unsigned int' lvalue ParmVar 0x14200dd70 'bd' 'unsigned int'
    |   |   |     |   `-ImplicitCastExpr 0x1420277c8 <col:46> 'unsigned int' <IntegralCast>
    |   |   |     |     `-IntegerLiteral 0x142027790 <col:46> 'int' 4
    |   |   |     `-BinaryOperator 0x142027890 <col:51, col:57> 'int' '=='
    |   |   |       |-ImplicitCastExpr 0x142027860 <col:51> 'unsigned int' <LValueToRValue>
    |   |   |       | `-DeclRefExpr 0x142027820 <col:51> 'unsigned int' lvalue ParmVar 0x14200dd70 'bd' 'unsigned int'
    |   |   |       `-ImplicitCastExpr 0x142027878 <col:57> 'unsigned int' <IntegralCast>
    |   |   |         `-IntegerLiteral 0x142027840 <col:57> 'int' 8
    |   |   `-ReturnStmt 0x142027940 <col:73, col:80>
    |   |     `-ImplicitCastExpr 0x142027928 <col:80> 'unsigned int' <IntegralCast>
    |   |       `-IntegerLiteral 0x142027908 <col:80> 'int' 37
    |   |-BreakStmt 0x142027970 <col:84>
    |   |-CaseStmt 0x142027998 <line:8:5, col:80>
    |   | |-IntegerLiteral 0x142027978 <col:10> 'int' 4
    |   | `-IfStmt 0x142027b80 <col:13, col:80>
    |   |   |-UnaryOperator 0x142027b20 <col:16, col:70> 'int' prefix '!' cannot overflow
    |   |   | `-ParenExpr 0x142027b00 <col:17, col:70> 'int'
    |   |   |   `-BinaryOperator 0x142027ae0 <col:51, col:68> 'int' '||'
    |   |   |     |-BinaryOperator 0x142027a30 <col:51, col:57> 'int' '=='
    |   |   |     | |-ImplicitCastExpr 0x142027a00 <col:51> 'unsigned int' <LValueToRValue>
    |   |   |     | | `-DeclRefExpr 0x1420279c0 <col:51> 'unsigned int' lvalue ParmVar 0x14200dd70 'bd' 'unsigned int'
    |   |   |     | `-ImplicitCastExpr 0x142027a18 <col:57> 'unsigned int' <IntegralCast>
    |   |   |     |   `-IntegerLiteral 0x1420279e0 <col:57> 'int' 8
    |   |   |     `-BinaryOperator 0x142027ac0 <col:62, col:68> 'int' '=='
    |   |   |       |-ImplicitCastExpr 0x142027a90 <col:62> 'unsigned int' <LValueToRValue>
    |   |   |       | `-DeclRefExpr 0x142027a50 <col:62> 'unsigned int' lvalue ParmVar 0x14200dd70 'bd' 'unsigned int'
    |   |   |       `-ImplicitCastExpr 0x142027aa8 <col:68> 'unsigned int' <IntegralCast>
    |   |   |         `-IntegerLiteral 0x142027a70 <col:68> 'int' 16
    |   |   `-ReturnStmt 0x142027b70 <col:73, col:80>
    |   |     `-ImplicitCastExpr 0x142027b58 <col:80> 'unsigned int' <IntegralCast>
    |   |       `-IntegerLiteral 0x142027b38 <col:80> 'int' 37
    |   |-BreakStmt 0x142027ba0 <col:84>
    |   |-CaseStmt 0x142027bc8 <line:9:5, col:80>
    |   | |-IntegerLiteral 0x142027ba8 <col:10> 'int' 6
    |   | `-IfStmt 0x142027db0 <col:13, col:80>
    |   |   |-UnaryOperator 0x142027d50 <col:16, col:70> 'int' prefix '!' cannot overflow
    |   |   | `-ParenExpr 0x142027d30 <col:17, col:70> 'int'
    |   |   |   `-BinaryOperator 0x142027d10 <col:51, col:68> 'int' '||'
    |   |   |     |-BinaryOperator 0x142027c60 <col:51, col:57> 'int' '=='
    |   |   |     | |-ImplicitCastExpr 0x142027c30 <col:51> 'unsigned int' <LValueToRValue>
    |   |   |     | | `-DeclRefExpr 0x142027bf0 <col:51> 'unsigned int' lvalue ParmVar 0x14200dd70 'bd' 'unsigned int'
    |   |   |     | `-ImplicitCastExpr 0x142027c48 <col:57> 'unsigned int' <IntegralCast>
    |   |   |     |   `-IntegerLiteral 0x142027c10 <col:57> 'int' 8
    |   |   |     `-BinaryOperator 0x142027cf0 <col:62, col:68> 'int' '=='
    |   |   |       |-ImplicitCastExpr 0x142027cc0 <col:62> 'unsigned int' <LValueToRValue>
    |   |   |       | `-DeclRefExpr 0x142027c80 <col:62> 'unsigned int' lvalue ParmVar 0x14200dd70 'bd' 'unsigned int'
    |   |   |       `-ImplicitCastExpr 0x142027cd8 <col:68> 'unsigned int' <IntegralCast>
    |   |   |         `-IntegerLiteral 0x142027ca0 <col:68> 'int' 16
    |   |   `-ReturnStmt 0x142027da0 <col:73, col:80>
    |   |     `-ImplicitCastExpr 0x142027d88 <col:80> 'unsigned int' <IntegralCast>
    |   |       `-IntegerLiteral 0x142027d68 <col:80> 'int' 37
    |   |-BreakStmt 0x142027dd0 <col:84>
    |   `-DefaultStmt 0x142027e20 <line:10:5, col:21>
    |     `-ReturnStmt 0x142027e10 <col:14, col:21>
    |       `-ImplicitCastExpr 0x142027df8 <col:21> 'unsigned int' <IntegralCast>
    |         `-IntegerLiteral 0x142027dd8 <col:21> 'int' 31
    `-ReturnStmt 0x142027ee0 <line:12:3, col:10>
      `-ImplicitCastExpr 0x142027ec8 <col:10> 'unsigned int' <IntegralCast>
        `-IntegerLiteral 0x142027ea8 <col:10> 'int' 0
