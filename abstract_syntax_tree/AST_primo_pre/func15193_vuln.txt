`-FunctionDecl 0x14c0fa5a8  line:1:1 invalid externalParEntProcessor 'int (int, const char *, const char *, const char **)'
  |-ParmVarDecl 0x14c0fa2f0 <col:25, col:36> col:36 referenced invalid parser 'int'
  |-ParmVarDecl 0x14c0fa370 <col:44, col:56> col:56 used s 'const char *'
  |-ParmVarDecl 0x14c0fa3f0 <col:59, col:71> col:71 used end 'const char *'
  |-ParmVarDecl 0x14c0fa4a8 <line:2:25, col:38> col:38 used nextPtr 'const char **'
  `-CompoundStmt 0x14c1146d0 <col:47, line:33:1>
    |-DeclStmt 0x14c0fa728 <line:3:3, col:23>
    | `-VarDecl 0x14c0fa688 <col:3, col:22> col:15 used next 'const char *' cinit
    |   `-ImplicitCastExpr 0x14c0fa710 <col:22> 'const char *' <LValueToRValue>
    |     `-DeclRefExpr 0x14c0fa6f0 <col:22> 'const char *' lvalue ParmVar 0x14c0fa370 's' 'const char *'
    |-DeclStmt 0x14c0fa7c0 <line:4:3, col:10>
    | `-VarDecl 0x14c0fa758 <col:3, col:7> col:7 used tok 'int'
    |-BinaryOperator 0x14c113a98 <line:6:3, col:55> 'int' contains-errors '='
    | |-DeclRefExpr 0x14c0fa7d8 <col:3> 'int' lvalue Var 0x14c0fa758 'tok' 'int'
    | `-CallExpr 0x14c113a58 <col:9, col:55> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x14c0fa950 <col:9> 'int ()' Function 0x14c0fa898 'XmlPrologTok' 'int ()'
    |   |-CXXDependentScopeMemberExpr 0x14c0fa990 <col:22, col:30> '<dependent type>' contains-errors lvalue ->m_encoding
    |   | `-RecoveryExpr 0x14c0fa970 <col:22> '<dependent type>' contains-errors lvalue
    |   |-DeclRefExpr 0x14c0fa9d8 <col:42> 'const char *' lvalue ParmVar 0x14c0fa370 's' 'const char *'
    |   |-DeclRefExpr 0x14c113a00 <col:45> 'const char *' lvalue ParmVar 0x14c0fa3f0 'end' 'const char *'
    |   `-UnaryOperator 0x14c113a40 <col:50, col:51> 'const char **' prefix '&' cannot overflow
    |     `-DeclRefExpr 0x14c113a20 <col:51> 'const char *' lvalue Var 0x14c0fa688 'next' 'const char *'
    |-IfStmt 0x14c114358 <line:7:3, line:28:3> has_else
    | |-BinaryOperator 0x14c113b10 <line:7:7, col:14> 'int' '<='
    | | |-ImplicitCastExpr 0x14c113af8 <col:7> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14c113ab8 <col:7> 'int' lvalue Var 0x14c0fa758 'tok' 'int'
    | | `-IntegerLiteral 0x14c113ad8 <col:14> 'int' 0
    | |-CompoundStmt 0x14c114068 <col:17, line:23:3>
    | | |-IfStmt 0x14c113e58 <line:8:5, line:11:5>
    | | | |-BinaryOperator 0x14c113d28 <line:8:9, col:57> 'int' contains-errors '&&'
    | | | | |-UnaryOperator 0x14c113cd0 <col:9, col:35> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | | | | `-ImplicitCastExpr 0x14c113cb8 <col:11, col:35> '<dependent type>' contains-errors <LValueToRValue>
    | | | | |   `-CXXDependentScopeMemberExpr 0x14c113b98 <col:11, col:35> '<dependent type>' contains-errors lvalue .finalBuffer
    | | | | |     `-CXXDependentScopeMemberExpr 0x14c113b50 <col:11, col:19> '<dependent type>' contains-errors lvalue ->m_parsingStatus
    | | | | |       `-RecoveryExpr 0x14c113b30 <col:11> '<dependent type>' contains-errors lvalue
    | | | | `-BinaryOperator 0x14c113d08 <col:50, col:57> 'int' contains-errors '!='
    | | | |   |-DeclRefExpr 0x14c113c10 <col:50> 'int' lvalue Var 0x14c0fa758 'tok' 'int'
    | | | |   `-RecoveryExpr 0x14c113ce8 <col:57> '<dependent type>' contains-errors lvalue
    | | | `-CompoundStmt 0x14c113e38 <col:74, line:11:5>
    | | |   |-BinaryOperator 0x14c113dd0 <line:9:7, col:18> 'const char *' '='
    | | |   | |-UnaryOperator 0x14c113d80 <col:7, col:8> 'const char *' lvalue prefix '*' cannot overflow
    | | |   | | `-ImplicitCastExpr 0x14c113d68 <col:8> 'const char **' <LValueToRValue>
    | | |   | |   `-DeclRefExpr 0x14c113d48 <col:8> 'const char **' lvalue ParmVar 0x14c0fa4a8 'nextPtr' 'const char **'
    | | |   | `-ImplicitCastExpr 0x14c113db8 <col:18> 'const char *' <LValueToRValue>
    | | |   |   `-DeclRefExpr 0x14c113d98 <col:18> 'const char *' lvalue ParmVar 0x14c0fa370 's' 'const char *'
    | | |   `-ReturnStmt 0x14c113e28 <line:10:7, col:14>
    | | |     `-RecoveryExpr 0x14c113e08 <col:14> '<dependent type>' contains-errors lvalue
    | | `-SwitchStmt 0x14c113eb0 <line:12:5, line:22:5>
    | |   |-ImplicitCastExpr 0x14c113e98 <line:12:13> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x14c113e78 <col:13> 'int' lvalue Var 0x14c0fa758 'tok' 'int'
    | |   `-CompoundStmt 0x14c114038 <col:18, line:22:5>
    | |     |-ReturnStmt 0x14c113f28 <line:14:7, col:14>
    | |     | `-RecoveryExpr 0x14c113f08 <col:14> '<dependent type>' contains-errors lvalue
    | |     |-ReturnStmt 0x14c113f88 <line:16:7, col:14>
    | |     | `-RecoveryExpr 0x14c113f68 <col:14> '<dependent type>' contains-errors lvalue
    | |     |-ReturnStmt 0x14c113fe8 <line:18:7, col:14>
    | |     | `-RecoveryExpr 0x14c113fc8 <col:14> '<dependent type>' contains-errors lvalue
    | |     `-DefaultStmt 0x14c114018 <line:20:5, line:21:7>
    | |       `-BreakStmt 0x14c114010 <col:7>
    | `-IfStmt 0x14c114338 <line:25:8, line:28:3>
    |   |-BinaryOperator 0x14c114100 <line:25:12, col:19> 'int' contains-errors '=='
    |   | |-DeclRefExpr 0x14c114088 <col:12> 'int' lvalue Var 0x14c0fa758 'tok' 'int'
    |   | `-RecoveryExpr 0x14c1140e0 <col:19> '<dependent type>' contains-errors lvalue
    |   `-CompoundStmt 0x14c114318 <col:32, line:28:3>
    |     |-BinaryOperator 0x14c114178 <line:26:5, col:9> 'const char *' '='
    |     | |-DeclRefExpr 0x14c114120 <col:5> 'const char *' lvalue ParmVar 0x14c0fa370 's' 'const char *'
    |     | `-ImplicitCastExpr 0x14c114160 <col:9> 'const char *' <LValueToRValue>
    |     |   `-DeclRefExpr 0x14c114140 <col:9> 'const char *' lvalue Var 0x14c0fa688 'next' 'const char *'
    |     `-BinaryOperator 0x14c1142f8 <line:27:5, col:57> 'int' contains-errors '='
    |       |-DeclRefExpr 0x14c114198 <col:5> 'int' lvalue Var 0x14c0fa758 'tok' 'int'
    |       `-CallExpr 0x14c1142b8 <col:11, col:57> '<dependent type>' contains-errors
    |         |-DeclRefExpr 0x14c1141b8 <col:11> 'int ()' Function 0x14c0fa898 'XmlPrologTok' 'int ()'
    |         |-CXXDependentScopeMemberExpr 0x14c1141f8 <col:24, col:32> '<dependent type>' contains-errors lvalue ->m_encoding
    |         | `-RecoveryExpr 0x14c1141d8 <col:24> '<dependent type>' contains-errors lvalue
    |         |-DeclRefExpr 0x14c114240 <col:44> 'const char *' lvalue ParmVar 0x14c0fa370 's' 'const char *'
    |         |-DeclRefExpr 0x14c114260 <col:47> 'const char *' lvalue ParmVar 0x14c0fa3f0 'end' 'const char *'
    |         `-UnaryOperator 0x14c1142a0 <col:52, col:53> 'const char **' prefix '&' cannot overflow
    |           `-DeclRefExpr 0x14c114280 <col:53> 'const char *' lvalue Var 0x14c0fa688 'next' 'const char *'
    `-BinaryOperator 0x14c114470 <line:30:3, col:25> '<dependent type>' contains-errors '='
      |-CXXDependentScopeMemberExpr 0x14c1143d0 <col:3, col:11> '<dependent type>' contains-errors lvalue ->m_processor
      | `-RecoveryExpr 0x14c1143a8 <col:3> '<dependent type>' contains-errors lvalue
      |   `-DeclRefExpr 0x14c114388 <col:3> 'int' lvalue ParmVar 0x14c0fa2f0 'parser' 'int'
      `-RecoveryExpr 0x14c114450 <col:25> '<dependent type>' contains-errors lvalue
