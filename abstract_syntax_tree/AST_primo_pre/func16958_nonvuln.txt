`-FunctionDecl 0x12d808288  line:1:12 open_logfile 'int (const char *, const struct logInfo *, int)' static
  |-ParmVarDecl 0x12c80dcd8 <col:25, col:37> col:37 used path 'const char *'
  |-ParmVarDecl 0x12c80e2c8 <col:43, col:65> col:65 used log 'const struct logInfo *'
  |-ParmVarDecl 0x12c80e348 <col:70, col:74> col:74 used write_access 'int'
  `-CompoundStmt 0x12c828888 <col:88, line:27:1>
    |-DeclStmt 0x12d808410 <line:2:5, col:11>
    | `-VarDecl 0x12d8083a8 <col:5, col:9> col:9 used fd 'int'
    |-DeclStmt 0x12d8085a8 <line:3:5, col:19>
    | |-RecordDecl 0x12d808428 <col:5, col:12> col:12 struct stat
    | `-VarDecl 0x12d808528 <col:5, col:17> col:17 invalid sb 'struct stat'
    |-IfStmt 0x12d8088a8 <line:6:5, line:7:16>
    | |-BinaryOperator 0x12d808840 <line:6:9, col:14> 'int' '<'
    | | |-ImplicitCastExpr 0x12d808828 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x12d8087e8 <col:9> 'int' lvalue Var 0x12d8083a8 'fd' 'int'
    | | `-IntegerLiteral 0x12d808808 <col:14> 'int' 0
    | `-ReturnStmt 0x12d808898 <line:7:9, col:16>
    |   `-ImplicitCastExpr 0x12d808880 <col:16> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x12d808860 <col:16> 'int' lvalue Var 0x12d8083a8 'fd' 'int'
    |-IfStmt 0x12d808ca0 <line:9:5, line:12:5>
    | |-BinaryOperator 0x12d808a70 <line:9:9, col:27> 'int' contains-errors '!='
    | | |-CallExpr 0x12d808a20 <col:9, col:22> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x12d8089a8 <col:9> 'int ()' Function 0x12d8088f0 'fstat' 'int ()'
    | | | |-DeclRefExpr 0x12d8089c8 <col:15> 'int' lvalue Var 0x12d8083a8 'fd' 'int'
    | | | `-UnaryOperator 0x12d808a08 <col:19, col:20> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | |   `-RecoveryExpr 0x12d8089e8 <col:20> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x12d808a50 <col:27> 'int' 0
    | `-CompoundStmt 0x12d808c80 <col:30, line:12:5>
    |   |-CallExpr 0x12d808bf8 <line:10:9, col:17> 'int'
    |   | |-ImplicitCastExpr 0x12d808be0 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x12d808b70 <col:9> 'int ()' Function 0x12d808ab8 'close' 'int ()'
    |   | `-ImplicitCastExpr 0x12d808c20 <col:15> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x12d808b90 <col:15> 'int' lvalue Var 0x12d8083a8 'fd' 'int'
    |   `-ReturnStmt 0x12d808c70 <line:11:9, col:17>
    |     `-UnaryOperator 0x12d808c58 <col:16, col:17> 'int' prefix '-'
    |       `-IntegerLiteral 0x12d808c38 <col:17> 'int' 1
    |-IfStmt 0x12d808f80 <line:14:5, line:18:5>
    | |-UnaryOperator 0x12d808e50 <line:14:9, col:29> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-CallExpr 0x12d808e28 <col:11, col:29> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x12d808da0 <col:11> 'int ()' Function 0x12d808ce8 'S_ISREG' 'int ()'
    | |   `-CXXDependentScopeMemberExpr 0x12d808de0 <col:19, col:22> '<dependent type>' contains-errors lvalue .st_mode
    | |     `-RecoveryExpr 0x12d808dc0 <col:19> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x12d808f60 <col:32, line:18:5>
    |   |-CallExpr 0x12d808ec0 <line:15:9, col:17> 'int'
    |   | |-ImplicitCastExpr 0x12d808ea8 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x12d808e68 <col:9> 'int ()' Function 0x12d808ab8 'close' 'int ()'
    |   | `-ImplicitCastExpr 0x12d808ee8 <col:15> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x12d808e88 <col:15> 'int' lvalue Var 0x12d8083a8 'fd' 'int'
    |   `-ReturnStmt 0x12d808f50 <line:17:9, col:17>
    |     `-UnaryOperator 0x12d808f38 <col:16, col:17> 'int' prefix '-'
    |       `-IntegerLiteral 0x12d808f18 <col:17> 'int' 1
    |-IfStmt 0x12c828820 <line:20:5, line:24:5>
    | |-RecoveryExpr 0x12d8090e0 <line:20:9, col:66> '_Bool' contains-errors
    | `-CompoundStmt 0x12c828800 <col:69, line:24:5>
    |   |-CallExpr 0x12d809158 <line:21:9, col:17> 'int'
    |   | |-ImplicitCastExpr 0x12d809140 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x12d809100 <col:9> 'int ()' Function 0x12d808ab8 'close' 'int ()'
    |   | `-ImplicitCastExpr 0x12d809180 <col:15> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x12d809120 <col:15> 'int' lvalue Var 0x12d8083a8 'fd' 'int'
    |   `-ReturnStmt 0x12d8091e8 <line:23:9, col:17>
    |     `-UnaryOperator 0x12d8091d0 <col:16, col:17> 'int' prefix '-'
    |       `-IntegerLiteral 0x12d8091b0 <col:17> 'int' 1
    `-ReturnStmt 0x12c828878 <line:26:5, col:12>
      `-ImplicitCastExpr 0x12c828860 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x12c828840 <col:12> 'int' lvalue Var 0x12d8083a8 'fd' 'int'
