`-FunctionDecl 0x15580dda0  line:1:15 skip_FDEF 'void (int)' static
  |-ParmVarDecl 0x15580dcd8 <col:26> col:26 EXEC_OP 'int'
  `-CompoundStmt 0x15580e3b0 <line:2:3, line:18:3>
    `-WhileStmt 0x15580e390 <line:5:5, line:17:5>
      |-BinaryOperator 0x15580e110 <line:5:13, col:28> 'int' contains-errors '=='
      | |-CallExpr 0x15580e0d0 <col:13, col:23> 'int'
      | | `-ImplicitCastExpr 0x15580e0b8 <col:13> 'int (*)()' <FunctionToPointerDecay>
      | |   `-DeclRefExpr 0x15580dfc0 <col:13> 'int ()' Function 0x15580df08 'SKIP_Code' 'int ()'
      | `-RecoveryExpr 0x15580e0f0 <col:28> '<dependent type>' contains-errors lvalue
      `-CompoundStmt 0x15580e378 <line:6:5, line:17:5>
        `-SwitchStmt 0x15580e210 <line:7:7, line:16:7>
          |-CXXDependentScopeMemberExpr 0x15580e1c8 <line:7:16, col:20> '<dependent type>' contains-errors lvalue .opcode
          | `-RecoveryExpr 0x15580e1a8 <col:16> '<dependent type>' contains-errors lvalue
          `-CompoundStmt 0x15580e350 <line:8:7, line:16:7>
            |-CaseStmt 0x15580e258 <line:9:7, <invalid sloc>>
            | |-IntegerLiteral 0x15580e238 <col:12> 'int' 137
            | `-CaseStmt 0x15580e2a0 <line:10:7, <invalid sloc>>
            |   |-IntegerLiteral 0x15580e280 <col:12> 'int' 44
            |   `-NullStmt 0x15580e2e0 <<invalid sloc>>
            |-ReturnStmt 0x15580e2e8 <line:12:9>
            `-CaseStmt 0x15580e318 <line:14:7, line:15:9>
              |-IntegerLiteral 0x15580e2f8 <line:14:12> 'int' 45
              `-ReturnStmt 0x15580e340 <line:15:9>
