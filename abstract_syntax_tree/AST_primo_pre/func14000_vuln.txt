`-FunctionDecl 0x12c81eba0  line:1:13 invalid mutt_decode_uuencoded 'void (int *, int, int, int)' static
  |-ParmVarDecl 0x12c81e928 <col:36, col:43> col:43 invalid s 'int *'
  |-ParmVarDecl 0x12c81e9a8 <col:46, col:53> col:53 referenced invalid len 'int'
  |-ParmVarDecl 0x12c81ea28 <col:58, col:62> col:62 used istext 'int'
  |-ParmVarDecl 0x12c81eaa8 <col:70, col:78> col:78 invalid cd 'int'
  `-CompoundStmt 0x12c84e808 <line:2:1, line:51:1>
    |-DeclStmt 0x12c81ecf8 <line:3:3, col:26>
    | `-VarDecl 0x12c81ec90 <col:3, col:8> col:8 invalid tmps 'char'
    |-DeclStmt 0x12c81ef18 <line:4:3, col:26>
    | |-VarDecl 0x12c81ed20 <col:3, col:8> col:8 used linelen 'char'
    | |-VarDecl 0x12c81ed98 <col:3, col:17> col:17 used c 'char'
    | |-VarDecl 0x12c81ee10 <col:3, col:20> col:20 used l 'char'
    | `-VarDecl 0x12c81ee88 <col:3, col:23> col:23 used out 'char'
    |-DeclStmt 0x12c81efb0 <line:5:3, col:11>
    | `-VarDecl 0x12c81ef48 <col:3, col:9> col:9 used pt 'char *'
    |-DeclStmt 0x12c84b868 <line:6:3, col:23>
    | `-VarDecl 0x12c84b800 <col:3, col:8> col:8 referenced invalid bufi 'char'
    |-RecoveryExpr 0x12c84b960 <line:7:3, col:14> '<dependent type>' contains-errors lvalue
    | |-UnaryExprOrTypeTraitExpr 0x12c84b940 <col:3, col:10> 'unsigned long' contains-errors sizeof
    | | `-RecoveryExpr 0x12c84b920 <col:10> '<dependent type>' contains-errors lvalue
    | `-IntegerLiteral 0x12c84b8b8 <col:14> 'int' 0
    |-IfStmt 0x12c84bb88 <line:9:3, line:10:23>
    | |-ImplicitCastExpr 0x12c84b9b0 <line:9:7> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x12c84b990 <col:7> 'int' lvalue ParmVar 0x12c81ea28 'istext' 'int'
    | `-CallExpr 0x12c84bb60 <line:10:5, col:23> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x12c84bb20 <col:5> 'int ()' Function 0x12c84ba68 'state_set_prefix' 'int ()'
    |   `-RecoveryExpr 0x12c84bb40 <col:22> '<dependent type>' contains-errors lvalue
    |-WhileStmt 0x12c84c4d0 <line:12:3, line:19:3>
    | |-BinaryOperator 0x12c84bbe8 <line:12:10, col:16> 'int' contains-errors '>'
    | | |-RecoveryExpr 0x12c84bba8 <col:10> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x12c84bbc8 <col:16> 'int' 0
    | `-CompoundStmt 0x12c84c4a8 <line:13:3, line:19:3>
    |   |-IfStmt 0x12c84bed0 <line:14:5, line:15:7>
    |   | |-BinaryOperator 0x12c84bea0 <line:14:9, col:49> 'int' contains-errors '=='
    |   | | |-ParenExpr 0x12c84be28 <col:9, col:44> '<dependent type>' contains-errors
    |   | | | `-CallExpr 0x12c84bdf0 <col:10, col:43> '<dependent type>' contains-errors
    |   | | |   |-DeclRefExpr 0x12c84bce8 <col:10> 'int ()' Function 0x12c84bc30 'fgets' 'int ()'
    |   | | |   |-RecoveryExpr 0x12c84bd08 <col:16> '<dependent type>' contains-errors lvalue
    |   | | |   |-UnaryExprOrTypeTraitExpr 0x12c84bd68 <col:22, col:33> 'unsigned long' contains-errors sizeof
    |   | | |   | `-ParenExpr 0x12c84bd48 <col:28, col:33> '<dependent type>' contains-errors lvalue
    |   | | |   |   `-RecoveryExpr 0x12c84bd28 <col:29> '<dependent type>' contains-errors lvalue
    |   | | |   `-CXXDependentScopeMemberExpr 0x12c84bda8 <col:36, col:39> '<dependent type>' contains-errors lvalue ->fpin
    |   | | |     `-RecoveryExpr 0x12c84bd88 <col:36> '<dependent type>' contains-errors lvalue
    |   | | `-RecoveryExpr 0x12c84be80 <col:49> '<dependent type>' contains-errors lvalue
    |   | `-ReturnStmt 0x12c84bec0 <line:15:7>
    |   |-CompoundAssignOperator 0x12c84c080 <line:16:5, col:28> '<dependent type>' contains-errors '-=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    |   | |-RecoveryExpr 0x12c84bf10 <col:5> '<dependent type>' contains-errors lvalue
    |   | | `-DeclRefExpr 0x12c84bef0 <col:5> 'int' lvalue ParmVar 0x12c81e9a8 'len' 'int'
    |   | `-CallExpr 0x12c84c058 <col:12, col:28> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x12c84c018 <col:12> 'int ()' Function 0x12c84bf60 'mutt_strlen' 'int ()'
    |   |   `-RecoveryExpr 0x12c84c038 <col:24> '<dependent type>' contains-errors lvalue
    |   `-IfStmt 0x12c84c488 <line:17:5, line:18:7>
    |     |-BinaryOperator 0x12c84c460 <line:17:9, col:61> 'int' contains-errors '&&'
    |     | |-ParenExpr 0x12c84c2a0 <col:9, col:40> '<dependent type>' contains-errors
    |     | | `-UnaryOperator 0x12c84c288 <col:10, col:39> '<dependent type>' contains-errors prefix '!' cannot overflow
    |     | |   `-CallExpr 0x12c84c250 <col:11, col:39> '<dependent type>' contains-errors
    |     | |     |-DeclRefExpr 0x12c84c190 <col:11> 'int ()' Function 0x12c84c0d8 'mutt_strncmp' 'int ()'
    |     | |     |-RecoveryExpr 0x12c84c1b0 <col:25> '<dependent type>' contains-errors lvalue
    |     | |     |-StringLiteral 0x12c84c210 <col:31> 'char[4]' lvalue "STR"
    |     | |     `-IntegerLiteral 0x12c84c230 <col:38> 'int' 5
    |     | `-CallExpr 0x12c84c438 <col:45, col:61> '<dependent type>' contains-errors
    |     |   |-DeclRefExpr 0x12c84c3a0 <col:45> 'int ()' Function 0x12c84c2e8 'ISSPACE' 'int ()'
    |     |   `-ArraySubscriptExpr 0x12c84c418 <col:54, col:60> '<dependent type>' contains-errors lvalue
    |     |     |-ImplicitCastExpr 0x12c84c400 <col:54> '<dependent type>' contains-errors <LValueToRValue>
    |     |     | `-RecoveryExpr 0x12c84c3c0 <col:54> '<dependent type>' contains-errors lvalue
    |     |     `-IntegerLiteral 0x12c84c3e0 <col:59> 'int' 5
    |     `-BreakStmt 0x12c84c480 <line:18:7>
    |-WhileStmt 0x12c84df40 <line:20:3, line:45:3>
    | |-BinaryOperator 0x12c84c530 <line:20:10, col:16> 'int' contains-errors '>'
    | | |-RecoveryExpr 0x12c84c4f0 <col:10> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x12c84c510 <col:16> 'int' 0
    | `-CompoundStmt 0x12c84def8 <line:21:3, line:45:3>
    |   |-IfStmt 0x12c84c738 <line:22:5, line:23:7>
    |   | |-BinaryOperator 0x12c84c708 <line:22:9, col:49> 'int' contains-errors '=='
    |   | | |-ParenExpr 0x12c84c690 <col:9, col:44> '<dependent type>' contains-errors
    |   | | | `-CallExpr 0x12c84c658 <col:10, col:43> '<dependent type>' contains-errors
    |   | | |   |-DeclRefExpr 0x12c84c550 <col:10> 'int ()' Function 0x12c84bc30 'fgets' 'int ()'
    |   | | |   |-RecoveryExpr 0x12c84c570 <col:16> '<dependent type>' contains-errors lvalue
    |   | | |   |-UnaryExprOrTypeTraitExpr 0x12c84c5d0 <col:22, col:33> 'unsigned long' contains-errors sizeof
    |   | | |   | `-ParenExpr 0x12c84c5b0 <col:28, col:33> '<dependent type>' contains-errors lvalue
    |   | | |   |   `-RecoveryExpr 0x12c84c590 <col:29> '<dependent type>' contains-errors lvalue
    |   | | |   `-CXXDependentScopeMemberExpr 0x12c84c610 <col:36, col:39> '<dependent type>' contains-errors lvalue ->fpin
    |   | | |     `-RecoveryExpr 0x12c84c5f0 <col:36> '<dependent type>' contains-errors lvalue
    |   | | `-RecoveryExpr 0x12c84c6e8 <col:49> '<dependent type>' contains-errors lvalue
    |   | `-ReturnStmt 0x12c84c728 <line:23:7>
    |   |-CompoundAssignOperator 0x12c84d028 <line:24:5, col:28> '<dependent type>' contains-errors '-=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    |   | |-RecoveryExpr 0x12c84c778 <col:5> '<dependent type>' contains-errors lvalue
    |   | | `-DeclRefExpr 0x12c84c758 <col:5> 'int' lvalue ParmVar 0x12c81e9a8 'len' 'int'
    |   | `-CallExpr 0x12c84d000 <col:12, col:28> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x12c84c7a0 <col:12> 'int ()' Function 0x12c84bf60 'mutt_strlen' 'int ()'
    |   |   `-RecoveryExpr 0x12c84c7c0 <col:24> '<dependent type>' contains-errors lvalue
    |   |-IfStmt 0x12c84d130 <line:25:5, line:26:7>
    |   | |-UnaryOperator 0x12c84d110 <line:25:9, col:38> '<dependent type>' contains-errors prefix '!' cannot overflow
    |   | | `-CallExpr 0x12c84d0d8 <col:10, col:38> '<dependent type>' contains-errors
    |   | |   |-DeclRefExpr 0x12c84d058 <col:10> 'int ()' Function 0x12c84c0d8 'mutt_strncmp' 'int ()'
    |   | |   |-RecoveryExpr 0x12c84d078 <col:24> '<dependent type>' contains-errors lvalue
    |   | |   |-StringLiteral 0x12c84d098 <col:30> 'char[4]' lvalue "STR"
    |   | |   `-IntegerLiteral 0x12c84d0b8 <col:37> 'int' 3
    |   | `-BreakStmt 0x12c84d128 <line:26:7>
    |   |-BinaryOperator 0x12c84d190 <line:27:5, col:10> 'char *' contains-errors '='
    |   | |-DeclRefExpr 0x12c84d150 <col:5> 'char *' lvalue Var 0x12c81ef48 'pt' 'char *'
    |   | `-RecoveryExpr 0x12c84d170 <col:10> '<dependent type>' contains-errors lvalue
    |   |-BinaryOperator 0x12c84d3d8 <line:28:5, col:31> 'char' '='
    |   | |-DeclRefExpr 0x12c84d1b0 <col:5> 'char' lvalue Var 0x12c81ed20 'linelen' 'char'
    |   | `-ImplicitCastExpr 0x12c84d3c0 <col:15, col:31> 'char' <IntegralCast>
    |   |   `-CallExpr 0x12c84d368 <col:15, col:31> 'int'
    |   |     |-ImplicitCastExpr 0x12c84d350 <col:15> 'int (*)()' <FunctionToPointerDecay>
    |   |     | `-DeclRefExpr 0x12c84d2b0 <col:15> 'int ()' Function 0x12c84d1f8 'decode_byte' 'int ()'
    |   |     `-ImplicitCastExpr 0x12c84d3a8 <col:28, col:29> 'int' <IntegralCast>
    |   |       `-ImplicitCastExpr 0x12c84d390 <col:28, col:29> 'char' <LValueToRValue>
    |   |         `-UnaryOperator 0x12c84d308 <col:28, col:29> 'char' lvalue prefix '*' cannot overflow
    |   |           `-ImplicitCastExpr 0x12c84d2f0 <col:29> 'char *' <LValueToRValue>
    |   |             `-DeclRefExpr 0x12c84d2d0 <col:29> 'char *' lvalue Var 0x12c81ef48 'pt' 'char *'
    |   |-UnaryOperator 0x12c84d418 <line:29:5, col:7> 'char *' postfix '++'
    |   | `-DeclRefExpr 0x12c84d3f8 <col:5> 'char *' lvalue Var 0x12c81ef48 'pt' 'char *'
    |   `-ForStmt 0x12c84dec0 <line:30:5, line:44:5>
    |     |-BinaryOperator 0x12c84d488 <line:30:10, col:14> 'char' '='
    |     | |-DeclRefExpr 0x12c84d430 <col:10> 'char' lvalue Var 0x12c81ed98 'c' 'char'
    |     | `-ImplicitCastExpr 0x12c84d470 <col:14> 'char' <IntegralCast>
    |     |   `-IntegerLiteral 0x12c84d450 <col:14> 'int' 0
    |     |-<<<NULL>>>
    |     |-BinaryOperator 0x12c84d548 <col:17, col:21> 'int' '<'
    |     | |-ImplicitCastExpr 0x12c84d518 <col:17> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x12c84d4e8 <col:17> 'char' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x12c84d4a8 <col:17> 'char' lvalue Var 0x12c81ed98 'c' 'char'
    |     | `-ImplicitCastExpr 0x12c84d530 <col:21> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x12c84d500 <col:21> 'char' <LValueToRValue>
    |     |     `-DeclRefExpr 0x12c84d4c8 <col:21> 'char' lvalue Var 0x12c81ed20 'linelen' 'char'
    |     |-<<<NULL>>>
    |     `-CompoundStmt 0x12c84dea0 <line:31:5, line:44:5>
    |       |-ForStmt 0x12c84dcd0 <line:32:7, line:41:7>
    |       | |-BinaryOperator 0x12c84d5c0 <line:32:12, col:16> 'char' '='
    |       | | |-DeclRefExpr 0x12c84d568 <col:12> 'char' lvalue Var 0x12c81ee10 'l' 'char'
    |       | | `-ImplicitCastExpr 0x12c84d5a8 <col:16> 'char' <IntegralCast>
    |       | |   `-IntegerLiteral 0x12c84d588 <col:16> 'int' 2
    |       | |-<<<NULL>>>
    |       | |-BinaryOperator 0x12c84d650 <col:19, col:24> 'int' '<='
    |       | | |-ImplicitCastExpr 0x12c84d638 <col:19> 'int' <IntegralCast>
    |       | | | `-ImplicitCastExpr 0x12c84d620 <col:19> 'char' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x12c84d5e0 <col:19> 'char' lvalue Var 0x12c81ee10 'l' 'char'
    |       | | `-IntegerLiteral 0x12c84d600 <col:24> 'int' 6
    |       | |-CompoundAssignOperator 0x12c84d6b0 <col:27, col:32> 'char' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |       | | |-DeclRefExpr 0x12c84d670 <col:27> 'char' lvalue Var 0x12c81ee10 'l' 'char'
    |       | | `-IntegerLiteral 0x12c84d690 <col:32> 'int' 2
    |       | `-CompoundStmt 0x12c84dc98 <line:33:7, line:41:7>
    |       |   |-BinaryOperator 0x12c84d868 <line:34:2, col:29> 'char' '='
    |       |   | |-DeclRefExpr 0x12c84d6e0 <col:2> 'char' lvalue Var 0x12c81ee88 'out' 'char'
    |       |   | `-ImplicitCastExpr 0x12c84d850 <col:8, col:29> 'char' <IntegralCast>
    |       |   |   `-BinaryOperator 0x12c84d830 <col:8, col:29> 'int' '<<'
    |       |   |     |-CallExpr 0x12c84d788 <col:8, col:24> 'int'
    |       |   |     | |-ImplicitCastExpr 0x12c84d770 <col:8> 'int (*)()' <FunctionToPointerDecay>
    |       |   |     | | `-DeclRefExpr 0x12c84d700 <col:8> 'int ()' Function 0x12c84d1f8 'decode_byte' 'int ()'
    |       |   |     | `-ImplicitCastExpr 0x12c84d7c8 <col:21, col:22> 'int' <IntegralCast>
    |       |   |     |   `-ImplicitCastExpr 0x12c84d7b0 <col:21, col:22> 'char' <LValueToRValue>
    |       |   |     |     `-UnaryOperator 0x12c84d758 <col:21, col:22> 'char' lvalue prefix '*' cannot overflow
    |       |   |     |       `-ImplicitCastExpr 0x12c84d740 <col:22> 'char *' <LValueToRValue>
    |       |   |     |         `-DeclRefExpr 0x12c84d720 <col:22> 'char *' lvalue Var 0x12c81ef48 'pt' 'char *'
    |       |   |     `-ImplicitCastExpr 0x12c84d818 <col:29> 'int' <IntegralCast>
    |       |   |       `-ImplicitCastExpr 0x12c84d800 <col:29> 'char' <LValueToRValue>
    |       |   |         `-DeclRefExpr 0x12c84d7e0 <col:29> 'char' lvalue Var 0x12c81ee10 'l' 'char'
    |       |   |-UnaryOperator 0x12c84d8a8 <line:35:2, col:4> 'char *' postfix '++'
    |       |   | `-DeclRefExpr 0x12c84d888 <col:2> 'char *' lvalue Var 0x12c81ef48 'pt' 'char *'
    |       |   |-CompoundAssignOperator 0x12c84dab0 <line:36:2, col:38> 'char' '|=' ComputeLHSTy='int' ComputeResultTy='int'
    |       |   | |-DeclRefExpr 0x12c84d8c0 <col:2> 'char' lvalue Var 0x12c81ee88 'out' 'char'
    |       |   | `-ParenExpr 0x12c84da90 <col:9, col:38> 'int'
    |       |   |   `-BinaryOperator 0x12c84da70 <col:10, col:37> 'int' '>>'
    |       |   |     |-CallExpr 0x12c84d968 <col:10, col:26> 'int'
    |       |   |     | |-ImplicitCastExpr 0x12c84d950 <col:10> 'int (*)()' <FunctionToPointerDecay>
    |       |   |     | | `-DeclRefExpr 0x12c84d8e0 <col:10> 'int ()' Function 0x12c84d1f8 'decode_byte' 'int ()'
    |       |   |     | `-ImplicitCastExpr 0x12c84d9a8 <col:23, col:24> 'int' <IntegralCast>
    |       |   |     |   `-ImplicitCastExpr 0x12c84d990 <col:23, col:24> 'char' <LValueToRValue>
    |       |   |     |     `-UnaryOperator 0x12c84d938 <col:23, col:24> 'char' lvalue prefix '*' cannot overflow
    |       |   |     |       `-ImplicitCastExpr 0x12c84d920 <col:24> 'char *' <LValueToRValue>
    |       |   |     |         `-DeclRefExpr 0x12c84d900 <col:24> 'char *' lvalue Var 0x12c81ef48 'pt' 'char *'
    |       |   |     `-ParenExpr 0x12c84da50 <col:31, col:37> 'int'
    |       |   |       `-BinaryOperator 0x12c84da30 <col:32, col:36> 'int' '-'
    |       |   |         |-IntegerLiteral 0x12c84d9c0 <col:32> 'int' 6
    |       |   |         `-ImplicitCastExpr 0x12c84da18 <col:36> 'int' <IntegralCast>
    |       |   |           `-ImplicitCastExpr 0x12c84da00 <col:36> 'char' <LValueToRValue>
    |       |   |             `-DeclRefExpr 0x12c84d9e0 <col:36> 'char' lvalue Var 0x12c81ee10 'l' 'char'
    |       |   |-UnaryOperator 0x12c84db98 <line:38:2, col:3> 'char' postfix '++' cannot overflow
    |       |   | `-DeclRefExpr 0x12c84db78 <col:2> 'char' lvalue Var 0x12c81ed98 'c' 'char'
    |       |   `-IfStmt 0x12c84dc78 <line:39:2, line:40:4>
    |       |     |-BinaryOperator 0x12c84dc50 <line:39:6, col:11> 'int' '=='
    |       |     | |-ImplicitCastExpr 0x12c84dc20 <col:6> 'int' <IntegralCast>
    |       |     | | `-ImplicitCastExpr 0x12c84dbf0 <col:6> 'char' <LValueToRValue>
    |       |     | |   `-DeclRefExpr 0x12c84dbb0 <col:6> 'char' lvalue Var 0x12c81ed98 'c' 'char'
    |       |     | `-ImplicitCastExpr 0x12c84dc38 <col:11> 'int' <IntegralCast>
    |       |     |   `-ImplicitCastExpr 0x12c84dc08 <col:11> 'char' <LValueToRValue>
    |       |     |     `-DeclRefExpr 0x12c84dbd0 <col:11> 'char' lvalue Var 0x12c81ed20 'linelen' 'char'
    |       |     `-BreakStmt 0x12c84dc70 <line:40:4>
    |       `-UnaryOperator 0x12c84de88 <line:43:7, col:9> 'char *' postfix '++'
    |         `-DeclRefExpr 0x12c84de68 <col:7> 'char *' lvalue Var 0x12c81ef48 'pt' 'char *'
    |-CallExpr 0x12c84e680 <line:48:3, col:37> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x12c84dfe0 <col:3> 'int ()' Function 0x12c84dd30 'mutt_convert_to_state' 'int ()'
    | |-RecoveryExpr 0x12c84e600 <col:26> '<dependent type>' contains-errors lvalue
    | |-IntegerLiteral 0x12c84e620 <col:30> 'int' 0
    | |-IntegerLiteral 0x12c84e640 <col:33> 'int' 0
    | `-RecoveryExpr 0x12c84e660 <col:36> '<dependent type>' contains-errors lvalue
    `-CallExpr 0x12c84e7e0 <line:50:3, col:23> '<dependent type>' contains-errors
      |-DeclRefExpr 0x12c84e7a0 <col:3> 'int ()' Function 0x12c84e6e8 'state_reset_prefix' 'int ()'
      `-RecoveryExpr 0x12c84e7c0 <col:22> '<dependent type>' contains-errors lvalue
