`-FunctionDecl 0x13f80df18  line:1:1 invalid fname_match 'int (int *, char *, int)'
  |-ParmVarDecl 0x13f80dd28 <line:2:5, col:17> col:17 referenced invalid rmp 'int *'
  |-ParmVarDecl 0x13f80dda8 <line:3:5, col:13> col:13 used name 'char *'
  |-ParmVarDecl 0x13f80de28 <line:4:5, col:10> col:10 used ignore_case 'int'
  `-CompoundStmt 0x13f828030 <line:5:1, line:26:1>
    |-DeclStmt 0x13f80e090 <line:6:5, col:25>
    | `-VarDecl 0x13f80dff0 <col:5, col:21> col:13 used match 'char *' cinit
    |   `-RecoveryExpr 0x13f80e070 <col:21> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x13f80e128 <line:7:5, col:14>
    | `-VarDecl 0x13f80e0c0 <col:5, col:13> col:13 used p 'char *'
    |-IfStmt 0x13f827b90 <line:9:5, line:23:5>
    | |-BinaryOperator 0x13f80e1b8 <line:9:9, col:17> 'int' contains-errors '!='
    | | |-DeclRefExpr 0x13f80e140 <col:9> 'char *' lvalue ParmVar 0x13f80dda8 'name' 'char *'
    | | `-RecoveryExpr 0x13f80e198 <col:17> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x13f827b70 <line:10:5, line:23:5>
    |   |-BinaryOperator 0x13f80e320 <line:12:2, col:24> '<dependent type>' contains-errors '='
    |   | |-CXXDependentScopeMemberExpr 0x13f80e220 <col:2, col:7> '<dependent type>' contains-errors lvalue ->rm_ic
    |   | | `-RecoveryExpr 0x13f80e1f8 <col:2> '<dependent type>' contains-errors lvalue
    |   | |   `-DeclRefExpr 0x13f80e1d8 <col:2> 'int *' lvalue ParmVar 0x13f80dd28 'rmp' 'int *'
    |   | `-BinaryOperator 0x13f80e300 <col:15, col:24> 'int' contains-errors '||'
    |   |   |-RecoveryExpr 0x13f80e2e0 <col:15> '<dependent type>' contains-errors lvalue
    |   |   `-DeclRefExpr 0x13f80e280 <col:24> 'int' lvalue ParmVar 0x13f80de28 'ignore_case' 'int'
    |   `-IfStmt 0x13f827b40 <line:13:2, line:22:2> has_else
    |     |-RecoveryExpr 0x13f827530 <line:13:6, col:39> '_Bool' contains-errors
    |     |-BinaryOperator 0x13f8275a8 <line:14:6, col:14> 'char *' contains-errors '='
    |     | |-DeclRefExpr 0x13f827550 <col:6> 'char *' contains-errors lvalue Var 0x13f80dff0 'match' 'char *'
    |     | `-ImplicitCastExpr 0x13f827590 <col:14> 'char *' <LValueToRValue>
    |     |   `-DeclRefExpr 0x13f827570 <col:14> 'char *' lvalue ParmVar 0x13f80dda8 'name' 'char *'
    |     `-CompoundStmt 0x13f827b18 <line:16:2, line:22:2>
    |       |-BinaryOperator 0x13f8277c0 <line:18:6, col:38> 'char *' contains-errors '='
    |       | |-DeclRefExpr 0x13f8275c8 <col:6> 'char *' lvalue Var 0x13f80e0c0 'p' 'char *'
    |       | `-CallExpr 0x13f827790 <col:10, col:38> '<dependent type>' contains-errors
    |       |   |-DeclRefExpr 0x13f8276c8 <col:10> 'int ()' Function 0x13f827610 'home_replace_save' 'int ()'
    |       |   |-RecoveryExpr 0x13f827770 <col:28> '<dependent type>' contains-errors lvalue
    |       |   `-DeclRefExpr 0x13f827700 <col:34> 'char *' lvalue ParmVar 0x13f80dda8 'name' 'char *'
    |       |-IfStmt 0x13f827948 <line:19:6, line:20:11>
    |       | |-RecoveryExpr 0x13f8278b0 <line:19:10, col:53> '_Bool' contains-errors
    |       | `-BinaryOperator 0x13f827928 <line:20:3, col:11> 'char *' contains-errors '='
    |       |   |-DeclRefExpr 0x13f8278d0 <col:3> 'char *' contains-errors lvalue Var 0x13f80dff0 'match' 'char *'
    |       |   `-ImplicitCastExpr 0x13f827910 <col:11> 'char *' <LValueToRValue>
    |       |     `-DeclRefExpr 0x13f8278f0 <col:11> 'char *' lvalue ParmVar 0x13f80dda8 'name' 'char *'
    |       `-CallExpr 0x13f827ad8 <line:21:6, col:16> 'int'
    |         |-ImplicitCastExpr 0x13f827ac0 <col:6> 'int (*)()' <FunctionToPointerDecay>
    |         | `-DeclRefExpr 0x13f827a48 <col:6> 'int ()' Function 0x13f827990 'vim_free' 'int ()'
    |         `-ImplicitCastExpr 0x13f827b00 <col:15> 'char *' <LValueToRValue>
    |           `-DeclRefExpr 0x13f827a68 <col:15> 'char *' lvalue Var 0x13f80e0c0 'p' 'char *'
    `-ReturnStmt 0x13f828020 <line:25:5, col:12>
      `-ImplicitCastExpr 0x13f827be8 <col:12> 'int' contains-errors <PointerToIntegral>
        `-ImplicitCastExpr 0x13f827bd0 <col:12> 'char *' contains-errors <LValueToRValue>
          `-DeclRefExpr 0x13f827bb0 <col:12> 'char *' contains-errors lvalue Var 0x13f80dff0 'match' 'char *'
