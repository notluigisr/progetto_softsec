`-FunctionDecl 0x11e128318  line:1:20 invalid set_default_type 'const char *(int *, void *, const char *)' static
  |-ParmVarDecl 0x11e128128 <col:37, col:48> col:48 invalid cmd 'int *'
  |-ParmVarDecl 0x11e1281a8 <col:53, col:59> col:59 d_ 'void *'
  |-ParmVarDecl 0x11e128228 <line:2:36, col:48> col:48 used arg 'const char *'
  `-CompoundStmt 0x11e142060 <line:3:1, line:11:1>
    |-IfStmt 0x11e141ff8 <line:4:5, line:8:5>
    | |-BinaryOperator 0x11e128698 <line:4:9, col:40> 'int' '!='
    | | |-CallExpr 0x11e128618 <col:9, col:35> 'int'
    | | | |-ImplicitCastExpr 0x11e128600 <col:9> 'int (*)()' <FunctionToPointerDecay>
    | | | | `-DeclRefExpr 0x11e128530 <col:9> 'int ()' Function 0x11e128478 'ap_cstr_casecmp' 'int ()'
    | | | |-ImplicitCastExpr 0x11e128648 <col:25> 'const char *' <LValueToRValue>
    | | | | `-DeclRefExpr 0x11e128550 <col:25> 'const char *' lvalue ParmVar 0x11e128228 'arg' 'const char *'
    | | | `-ImplicitCastExpr 0x11e128660 <col:30> 'char *' <ArrayToPointerDecay>
    | | |   `-StringLiteral 0x11e1285b0 <col:30> 'char[4]' lvalue "STR"
    | | `-IntegerLiteral 0x11e128678 <col:40> 'int' 0
    | `-CompoundStmt 0x11e141fe8 <col:43, line:8:5>
    `-ReturnStmt 0x11e142050 <line:10:5, col:12>
      `-RecoveryExpr 0x11e142030 <col:12> '<dependent type>' contains-errors lvalue
