`-FunctionDecl 0x12c80df18  line:1:12 invalid icccomponents 'int (int *, int *, int *)' static
  |-ParmVarDecl 0x12c80dd28 <col:26, col:36> col:36 invalid i_ctx_p 'int *'
  |-ParmVarDecl 0x12c80dda8 <col:45, col:50> col:50 invalid space 'int *'
  |-ParmVarDecl 0x12c80de28 <col:57, col:62> col:62 used n 'int *'
  `-CompoundStmt 0x12c122f68 <line:2:1, line:17:1>
    |-DeclStmt 0x12c80e078 <line:3:5, col:17>
    | `-VarDecl 0x12c80dff0 <col:5, col:16> col:9 used code 'int' cinit
    |   `-IntegerLiteral 0x12c80e058 <col:16> 'int' 0
    |-BinaryOperator 0x12c80e3e0 <line:6:5, col:49> 'int' contains-errors '='
    | |-DeclRefExpr 0x12c80e0c0 <col:5> 'int' lvalue Var 0x12c80dff0 'code' 'int'
    | `-CallExpr 0x12c80e3a0 <col:12, col:49> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x12c80e240 <col:12> 'int ()' Function 0x12c80e188 'array_get' 'int ()'
    |   |-RecoveryExpr 0x12c80e348 <col:22> '<dependent type>' contains-errors lvalue
    |   |-RecoveryExpr 0x12c80e278 <col:31> '<dependent type>' contains-errors lvalue
    |   |-IntegerLiteral 0x12c80e298 <col:38> 'int' 1
    |   `-UnaryOperator 0x12c80e388 <col:41, col:42> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-RecoveryExpr 0x12c80e368 <col:42> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x12c1226c0 <line:7:5, line:8:16>
    | |-BinaryOperator 0x12c122658 <line:7:9, col:16> 'int' '<'
    | | |-ImplicitCastExpr 0x12c122640 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x12c122600 <col:9> 'int' lvalue Var 0x12c80dff0 'code' 'int'
    | | `-IntegerLiteral 0x12c122620 <col:16> 'int' 0
    | `-ReturnStmt 0x12c1226b0 <line:8:9, col:16>
    |   `-ImplicitCastExpr 0x12c122698 <col:16> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x12c122678 <col:16> 'int' lvalue Var 0x12c80dff0 'code' 'int'
    |-BinaryOperator 0x12c1229c0 <line:10:5, col:54> 'int' contains-errors '='
    | |-DeclRefExpr 0x12c1226e0 <col:5> 'int' lvalue Var 0x12c80dff0 'code' 'int'
    | `-CallExpr 0x12c122988 <col:12, col:54> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x12c1227e0 <col:12> 'int ()' Function 0x12c122728 'dict_find_string' 'int ()'
    |   |-UnaryOperator 0x12c122938 <col:29, col:30> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | `-RecoveryExpr 0x12c122918 <col:30> '<dependent type>' contains-errors lvalue
    |   |-StringLiteral 0x12c122870 <col:39> 'char[4]' lvalue "STR"
    |   `-UnaryOperator 0x12c122970 <col:46, col:47> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-RecoveryExpr 0x12c122950 <col:47> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x12c122aa0 <line:11:5, line:12:16>
    | |-BinaryOperator 0x12c122a38 <line:11:9, col:16> 'int' '<'
    | | |-ImplicitCastExpr 0x12c122a20 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x12c1229e0 <col:9> 'int' lvalue Var 0x12c80dff0 'code' 'int'
    | | `-IntegerLiteral 0x12c122a00 <col:16> 'int' 0
    | `-ReturnStmt 0x12c122a90 <line:12:9, col:16>
    |   `-ImplicitCastExpr 0x12c122a78 <col:16> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x12c122a58 <col:16> 'int' lvalue Var 0x12c80dff0 'code' 'int'
    |-IfStmt 0x12c122cd0 <line:13:5, line:14:48>
    | |-BinaryOperator 0x12c122b18 <line:13:9, col:17> 'int' '=='
    | | |-ImplicitCastExpr 0x12c122b00 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x12c122ac0 <col:9> 'int' lvalue Var 0x12c80dff0 'code' 'int'
    | | `-IntegerLiteral 0x12c122ae0 <col:17> 'int' 0
    | `-ReturnStmt 0x12c122cc0 <line:14:9, col:48>
    |   `-CallExpr 0x12c122c98 <col:16, col:48> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x12c122c18 <col:16> 'int ()' Function 0x12c122b60 'gs_note_error' 'int ()'
    |     `-RecoveryExpr 0x12c122c78 <col:30> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x12c122f18 <line:15:5, col:25> 'int' contains-errors '='
    | |-UnaryOperator 0x12c122e50 <col:5, col:6> 'int' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x12c122e38 <col:6> 'int *' <LValueToRValue>
    | |   `-DeclRefExpr 0x12c122cf0 <col:6> 'int *' lvalue ParmVar 0x12c80de28 'n' 'int *'
    | `-CXXDependentScopeMemberExpr 0x12c122ed0 <col:10, col:25> '<dependent type>' contains-errors lvalue .intval
    |   `-CXXDependentScopeMemberExpr 0x12c122e88 <col:10, col:19> '<dependent type>' contains-errors lvalue ->value
    |     `-RecoveryExpr 0x12c122e68 <col:10> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x12c122f58 <line:16:5, col:12>
      `-IntegerLiteral 0x12c122f38 <col:12> 'int' 0
