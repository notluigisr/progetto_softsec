`-FunctionDecl 0x14a9281c8  line:1:1 skipdigits 'int (char *)'
  |-ParmVarDecl 0x14a9280f0 <col:12, col:20> col:20 used q 'char *'
  `-CompoundStmt 0x14a940cb0 <line:2:1, line:8:1>
    |-DeclStmt 0x14a928378 <line:3:5, col:18>
    | `-VarDecl 0x14a9282d8 <col:5, col:17> col:13 used p 'char *' cinit
    |   `-ImplicitCastExpr 0x14a928360 <col:17> 'char *' <LValueToRValue>
    |     `-DeclRefExpr 0x14a928340 <col:17> 'char *' lvalue ParmVar 0x14a9280f0 'q' 'char *'
    |-WhileStmt 0x14a9285e8 <line:5:5, line:6:4>
    | |-CallExpr 0x14a928558 <line:5:12, col:26> 'int'
    | | |-ImplicitCastExpr 0x14a928540 <col:12> 'int (*)()' <FunctionToPointerDecay>
    | | | `-DeclRefExpr 0x14a9284a0 <col:12> 'int ()' Function 0x14a9283e8 'VIM_ISDIGIT' 'int ()'
    | | `-ImplicitCastExpr 0x14a928598 <col:24, col:25> 'int' <IntegralCast>
    | |   `-ImplicitCastExpr 0x14a928580 <col:24, col:25> 'char' <LValueToRValue>
    | |     `-UnaryOperator 0x14a9284f8 <col:24, col:25> 'char' lvalue prefix '*' cannot overflow
    | |       `-ImplicitCastExpr 0x14a9284e0 <col:25> 'char *' <LValueToRValue>
    | |         `-DeclRefExpr 0x14a9284c0 <col:25> 'char *' lvalue Var 0x14a9282d8 'p' 'char *'
    | `-UnaryOperator 0x14a9285d0 <line:6:2, col:4> 'char *' prefix '++'
    |   `-DeclRefExpr 0x14a9285b0 <col:4> 'char *' lvalue Var 0x14a9282d8 'p' 'char *'
    `-ReturnStmt 0x14a940ca0 <line:7:5, col:12>
      `-ImplicitCastExpr 0x14a928640 <col:12> 'int' <PointerToIntegral>
        `-ImplicitCastExpr 0x14a928628 <col:12> 'char *' <LValueToRValue>
          `-DeclRefExpr 0x14a928608 <col:12> 'char *' lvalue Var 0x14a9282d8 'p' 'char *'
