`-FunctionDecl 0x13d128ab8  line:1:1 invalid mono_method_get_param_names 'int (int *, const char **)'
  |-ParmVarDecl 0x13d128928 <col:30, col:42> col:42 referenced invalid method 'int *'
  |-ParmVarDecl 0x13d1289d8 <col:50, col:63> col:63 used names 'const char **'
  `-CompoundStmt 0x13d80a570 <line:2:1, line:61:1>
    |-DeclStmt 0x13d128c88 <line:3:2, col:14>
    | |-VarDecl 0x13d128b88 <col:2, col:6> col:6 used i 'int'
    | `-VarDecl 0x13d128c08 <col:2, col:9> col:9 used lastp 'int'
    |-IfStmt 0x13d809270 <line:15:2, line:16:3>
    | |-BinaryOperator 0x13d809240 <line:15:6, col:19> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x13d809200 <col:6> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x13d809220 <col:19> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x13d809260 <line:16:3>
    |-IfStmt 0x13d8093c8 <line:18:2, line:19:3>
    | |-UnaryOperator 0x13d8093a0 <line:18:6, col:18> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x13d809388 <col:7, col:18> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-CXXDependentScopeMemberExpr 0x13d809340 <col:7, col:18> '<dependent type>' contains-errors lvalue ->param_count
    | |     `-RecoveryExpr 0x13d809320 <col:7> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x13d8093b8 <line:19:3>
    |-ForStmt 0x13d8096e8 <line:21:2, line:22:15>
    | |-BinaryOperator 0x13d809428 <line:21:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x13d8093e8 <col:7> 'int' lvalue Var 0x13d128b88 'i' 'int'
    | | `-IntegerLiteral 0x13d809408 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x13d809550 <col:14, col:29> 'int' contains-errors '<'
    | | |-DeclRefExpr 0x13d809448 <col:14> 'int' lvalue Var 0x13d128b88 'i' 'int'
    | | `-CXXDependentScopeMemberExpr 0x13d809508 <col:18, col:29> '<dependent type>' contains-errors lvalue ->param_count
    | |   `-RecoveryExpr 0x13d8094e8 <col:18> '<dependent type>' contains-errors lvalue
    | |-UnaryOperator 0x13d809590 <col:42, col:44> 'int' prefix '++'
    | | `-DeclRefExpr 0x13d809570 <col:44> 'int' lvalue Var 0x13d128b88 'i' 'int'
    | `-BinaryOperator 0x13d8096c8 <line:22:3, col:15> 'const char *' '='
    |   |-ArraySubscriptExpr 0x13d809618 <col:3, col:11> 'const char *' lvalue
    |   | |-ImplicitCastExpr 0x13d8095e8 <col:3> 'const char **' <LValueToRValue>
    |   | | `-DeclRefExpr 0x13d8095a8 <col:3> 'const char **' lvalue ParmVar 0x13d1289d8 'names' 'const char **'
    |   | `-ImplicitCastExpr 0x13d809600 <col:10> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x13d8095c8 <col:10> 'int' lvalue Var 0x13d128b88 'i' 'int'
    |   `-ImplicitCastExpr 0x13d8096b0 <col:15> 'const char *' <NoOp>
    |     `-ImplicitCastExpr 0x13d809698 <col:15> 'char *' <ArrayToPointerDecay>
    |       `-StringLiteral 0x13d809680 <col:15> 'char[1]' lvalue ""
    |-IfStmt 0x13d8097b8 <line:25:2, line:26:3>
    | |-RecoveryExpr 0x13d809788 <line:25:6, col:13> '_Bool' contains-errors
    | `-ReturnStmt 0x13d8097a8 <line:26:3>
    |-IfStmt 0x13d809dc0 <line:30:2, line:40:2>
    | |-RecoveryExpr 0x13d8098d8 <line:30:6, col:20> '_Bool' contains-errors
    | `-CompoundStmt 0x13d809da0 <col:29, line:40:2>
    |   |-IfStmt 0x13d809d70 <line:34:3, line:38:3>
    |   | |-RecoveryExpr 0x13d809a18 <line:34:7, col:33> '_Bool' contains-errors
    |   | `-CompoundStmt 0x13d809d60 <col:46, line:38:3>
    |   `-ReturnStmt 0x13d809d90 <line:39:3>
    `-IfStmt 0x13d80a550 <line:45:2, line:60:2>
      |-RecoveryExpr 0x13d809f48 <line:45:6, col:12> '_Bool' contains-errors
      `-CompoundStmt 0x13d80a538 <col:15, line:60:2>
        `-ForStmt 0x13d80a500 <line:55:3, line:59:3>
          |-<<<NULL>>>
          |-<<<NULL>>>
          |-BinaryOperator 0x13d80a1b8 <line:55:25, col:29> 'int' '<'
          | |-ImplicitCastExpr 0x13d80a188 <col:25> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x13d80a148 <col:25> 'int' lvalue Var 0x13d128b88 'i' 'int'
          | `-ImplicitCastExpr 0x13d80a1a0 <col:29> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x13d80a168 <col:29> 'int' lvalue Var 0x13d128c08 'lastp' 'int'
          |-UnaryOperator 0x13d80a200 <col:36, col:38> 'int' prefix '++'
          | `-DeclRefExpr 0x13d80a1d8 <col:38> 'int' lvalue Var 0x13d128b88 'i' 'int'
          `-CompoundStmt 0x13d80a4f0 <col:41, line:59:3>
