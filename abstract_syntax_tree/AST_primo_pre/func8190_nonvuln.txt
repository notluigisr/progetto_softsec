`-FunctionDecl 0x13b80df78  line:1:1 set_option_value 'int (char *, long, char *, int)'
  |-ParmVarDecl 0x13b80dcf0 <line:2:5, col:13> col:13 used name 'char *'
  |-ParmVarDecl 0x13b80dd70 <line:3:5, col:10> col:10 used number 'long'
  |-ParmVarDecl 0x13b80ddf0 <line:4:5, col:13> col:13 used string 'char *'
  |-ParmVarDecl 0x13b80de70 <line:5:5, col:10> col:10 used opt_flags 'int'
  `-CompoundStmt 0x13b82ad20 <line:6:1, line:87:1>
    |-DeclStmt 0x13b80e108 <line:7:5, col:17>
    | `-VarDecl 0x13b80e0a0 <col:5, col:10> col:10 used opt_idx 'int'
    |-DeclStmt 0x13b80e1a0 <line:8:5, col:17>
    | `-VarDecl 0x13b80e138 <col:5, col:13> col:13 used varp 'char *'
    |-DeclStmt 0x13b80e238 <line:9:5, col:17>
    | `-VarDecl 0x13b80e1d0 <col:5, col:12> col:12 used flags 'long'
    |-BinaryOperator 0x13b826658 <line:11:5, col:30> 'int' '='
    | |-DeclRefExpr 0x13b80e250 <col:5> 'int' lvalue Var 0x13b80e0a0 'opt_idx' 'int'
    | `-CallExpr 0x13b826618 <col:15, col:30> 'int'
    |   |-ImplicitCastExpr 0x13b826600 <col:15> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x13b80e380 <col:15> 'int ()' Function 0x13b80e2c8 'findoption' 'int ()'
    |   `-ImplicitCastExpr 0x13b826640 <col:26> 'char *' <LValueToRValue>
    |     `-DeclRefExpr 0x13b80e3a0 <col:26> 'char *' lvalue ParmVar 0x13b80dcf0 'name' 'char *'
    `-IfStmt 0x13b82acf0 <line:12:5, line:85:5> has_else
      |-BinaryOperator 0x13b8266d0 <line:12:9, col:19> 'int' '<'
      | |-ImplicitCastExpr 0x13b8266b8 <col:9> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x13b826678 <col:9> 'int' lvalue Var 0x13b80e0a0 'opt_idx' 'int'
      | `-IntegerLiteral 0x13b826698 <col:19> 'int' 0
      |-CompoundStmt 0x13b8299f8 <line:13:5, line:39:5>
      | |-DeclStmt 0x13b826770 <line:14:2, col:9>
      | | `-VarDecl 0x13b826708 <col:2, col:6> col:6 used key 'int'
      | `-IfStmt 0x13b8297b8 <line:16:2, line:36:2>
      |   |-RecoveryExpr 0x13b826d08 <line:16:6, line:17:46> '_Bool' contains-errors
      |   `-CompoundStmt 0x13b829780 <line:18:2, line:36:2>
      |     |-DeclStmt 0x13b826e38 <line:19:6, col:24>
      |     | `-VarDecl 0x13b826dd0 <col:6, col:23> col:13 used key_name 'char[2]'
      |     |-IfStmt 0x13b829200 <line:21:6, line:30:6> has_else
      |     | |-BinaryOperator 0x13b826ea8 <line:21:10, col:16> 'int' '<'
      |     | | |-ImplicitCastExpr 0x13b826e90 <col:10> 'int' <LValueToRValue>
      |     | | | `-DeclRefExpr 0x13b826e50 <col:10> 'int' lvalue Var 0x13b826708 'key' 'int'
      |     | | `-IntegerLiteral 0x13b826e70 <col:16> 'int' 0
      |     | |-CompoundStmt 0x13b827318 <line:22:6, line:25:6>
      |     | | |-BinaryOperator 0x13b8270d0 <line:23:3, col:33> 'char' '='
      |     | | | |-ArraySubscriptExpr 0x13b826f20 <col:3, col:13> 'char' lvalue
      |     | | | | |-ImplicitCastExpr 0x13b826f08 <col:3> 'char *' <ArrayToPointerDecay>
      |     | | | | | `-DeclRefExpr 0x13b826ec8 <col:3> 'char[2]' lvalue Var 0x13b826dd0 'key_name' 'char[2]'
      |     | | | | `-IntegerLiteral 0x13b826ee8 <col:12> 'int' 0
      |     | | | `-ImplicitCastExpr 0x13b8270b8 <col:17, col:33> 'char' <IntegralCast>
      |     | | |   `-CallExpr 0x13b827078 <col:17, col:33> 'int'
      |     | | |     |-ImplicitCastExpr 0x13b827060 <col:17> 'int (*)()' <FunctionToPointerDecay>
      |     | | |     | `-DeclRefExpr 0x13b827020 <col:17> 'int ()' Function 0x13b826f68 'KEY2TERMCAP0' 'int ()'
      |     | | |     `-ImplicitCastExpr 0x13b8270a0 <col:30> 'int' <LValueToRValue>
      |     | | |       `-DeclRefExpr 0x13b827040 <col:30> 'int' lvalue Var 0x13b826708 'key' 'int'
      |     | | `-BinaryOperator 0x13b8272f8 <line:24:3, col:33> 'char' '='
      |     | |   |-ArraySubscriptExpr 0x13b827148 <col:3, col:13> 'char' lvalue
      |     | |   | |-ImplicitCastExpr 0x13b827130 <col:3> 'char *' <ArrayToPointerDecay>
      |     | |   | | `-DeclRefExpr 0x13b8270f0 <col:3> 'char[2]' lvalue Var 0x13b826dd0 'key_name' 'char[2]'
      |     | |   | `-IntegerLiteral 0x13b827110 <col:12> 'int' 1
      |     | |   `-ImplicitCastExpr 0x13b8272e0 <col:17, col:33> 'char' <IntegralCast>
      |     | |     `-CallExpr 0x13b8272a0 <col:17, col:33> 'int'
      |     | |       |-ImplicitCastExpr 0x13b827288 <col:17> 'int (*)()' <FunctionToPointerDecay>
      |     | |       | `-DeclRefExpr 0x13b827248 <col:17> 'int ()' Function 0x13b827190 'KEY2TERMCAP1' 'int ()'
      |     | |       `-ImplicitCastExpr 0x13b8272c8 <col:30> 'int' <LValueToRValue>
      |     | |         `-DeclRefExpr 0x13b827268 <col:30> 'int' lvalue Var 0x13b826708 'key' 'int'
      |     | `-CompoundStmt 0x13b8275e0 <line:27:6, line:30:6>
      |     |   |-BinaryOperator 0x13b827478 <line:28:3, col:17> 'char' contains-errors '='
      |     |   | |-ArraySubscriptExpr 0x13b827438 <col:3, col:13> 'char' lvalue
      |     |   | | |-ImplicitCastExpr 0x13b827420 <col:3> 'char *' <ArrayToPointerDecay>
      |     |   | | | `-DeclRefExpr 0x13b827338 <col:3> 'char[2]' lvalue Var 0x13b826dd0 'key_name' 'char[2]'
      |     |   | | `-IntegerLiteral 0x13b827358 <col:12> 'int' 0
      |     |   | `-RecoveryExpr 0x13b827458 <col:17> '<dependent type>' contains-errors lvalue
      |     |   `-BinaryOperator 0x13b8275c0 <line:29:3, col:28> 'char' '='
      |     |     |-ArraySubscriptExpr 0x13b8274f0 <col:3, col:13> 'char' lvalue
      |     |     | |-ImplicitCastExpr 0x13b8274d8 <col:3> 'char *' <ArrayToPointerDecay>
      |     |     | | `-DeclRefExpr 0x13b827498 <col:3> 'char[2]' lvalue Var 0x13b826dd0 'key_name' 'char[2]'
      |     |     | `-IntegerLiteral 0x13b8274b8 <col:12> 'int' 1
      |     |     `-ImplicitCastExpr 0x13b8275a8 <col:17, col:28> 'char' <IntegralCast>
      |     |       `-ParenExpr 0x13b827588 <col:17, col:28> 'int'
      |     |         `-BinaryOperator 0x13b827568 <col:18, col:24> 'int' '&'
      |     |           |-ImplicitCastExpr 0x13b827550 <col:18> 'int' <LValueToRValue>
      |     |           | `-DeclRefExpr 0x13b827510 <col:18> 'int' lvalue Var 0x13b826708 'key' 'int'
      |     |           `-IntegerLiteral 0x13b827530 <col:24> 'int' 255
      |     |-CallExpr 0x13b8293e0 <line:31:6, col:42> '<dependent type>' contains-errors
      |     | |-DeclRefExpr 0x13b829310 <col:6> 'int ()' Function 0x13b829258 'add_termcode' 'int ()'
      |     | |-DeclRefExpr 0x13b829330 <col:19> 'char[2]' lvalue Var 0x13b826dd0 'key_name' 'char[2]'
      |     | |-DeclRefExpr 0x13b829350 <col:29> 'char *' lvalue ParmVar 0x13b80ddf0 'string' 'char *'
      |     | `-RecoveryExpr 0x13b8293c0 <col:37> '<dependent type>' contains-errors lvalue
      |     |-IfStmt 0x13b8295d8 <line:32:6, line:33:14>
      |     | |-RecoveryExpr 0x13b829430 <line:32:10> '<dependent type>' contains-errors lvalue
      |     | `-CallExpr 0x13b8295b0 <line:33:3, col:14> '<dependent type>' contains-errors
      |     |   |-DeclRefExpr 0x13b829530 <col:3> 'int ()' Function 0x13b829478 'ttest' 'int ()'
      |     |   `-RecoveryExpr 0x13b829590 <col:9> '<dependent type>' contains-errors lvalue
      |     `-CallExpr 0x13b829758 <line:34:6, col:28> '<dependent type>' contains-errors
      |       |-DeclRefExpr 0x13b8296d8 <col:6> 'int ()' Function 0x13b829620 'redraw_all_later' 'int ()'
      |       `-RecoveryExpr 0x13b829738 <col:23> '<dependent type>' contains-errors lvalue
      `-CompoundStmt 0x13b82acd8 <line:41:5, line:85:5>
        `-IfStmt 0x13b82aca8 <line:51:2, line:84:2> has_else
          |-RecoveryExpr 0x13b829a78 <line:51:6, col:14> '_Bool' contains-errors
          |-ReturnStmt 0x13b829c90 <line:52:6, col:57>
          | `-CallExpr 0x13b829c10 <col:13, col:57> 'int'
          |   |-ImplicitCastExpr 0x13b829bf8 <col:13> 'int (*)()' <FunctionToPointerDecay>
          |   | `-DeclRefExpr 0x13b829b78 <col:13> 'int ()' Function 0x13b829ac0 'set_string_option' 'int ()'
          |   |-ImplicitCastExpr 0x13b829c48 <col:31> 'int' <LValueToRValue>
          |   | `-DeclRefExpr 0x13b829b98 <col:31> 'int' lvalue Var 0x13b80e0a0 'opt_idx' 'int'
          |   |-ImplicitCastExpr 0x13b829c60 <col:40> 'char *' <LValueToRValue>
          |   | `-DeclRefExpr 0x13b829bb8 <col:40> 'char *' lvalue ParmVar 0x13b80ddf0 'string' 'char *'
          |   `-ImplicitCastExpr 0x13b829c78 <col:48> 'int' <LValueToRValue>
          |     `-DeclRefExpr 0x13b829bd8 <col:48> 'int' lvalue ParmVar 0x13b80de70 'opt_flags' 'int'
          `-CompoundStmt 0x13b82ac90 <line:54:2, line:84:2>
            `-IfStmt 0x13b82ac70 <line:56:6, line:83:6>
              |-RecoveryExpr 0x13b829e20 <line:56:10, col:18> '_Bool' contains-errors
              `-CompoundStmt 0x13b82ac50 <line:57:6, line:83:6>
                |-IfStmt 0x13b82a790 <line:58:3, line:76:3>
                | |-RecoveryExpr 0x13b829ef0 <line:58:7, col:32> '_Bool' contains-errors
                | `-CompoundStmt 0x13b82a768 <line:59:3, line:76:3>
                |   |-DeclStmt 0x13b829f90 <line:60:7, col:14>
                |   | `-VarDecl 0x13b829f28 <col:7, col:11> col:11 used idx 'int'
                |   |-ForStmt 0x13b82a140 <line:64:7, line:65:4>
                |   | |-BinaryOperator 0x13b829fe8 <line:64:12, col:18> 'int' '='
                |   | | |-DeclRefExpr 0x13b829fa8 <col:12> 'int' lvalue Var 0x13b829f28 'idx' 'int'
                |   | | `-IntegerLiteral 0x13b829fc8 <col:18> 'int' 0
                |   | |-<<<NULL>>>
                |   | |-BinaryOperator 0x13b82a0e0 <col:21, col:36> 'int' '=='
                |   | | |-ImplicitCastExpr 0x13b82a0c8 <col:21, col:31> 'int' <IntegralCast>
                |   | | | `-ImplicitCastExpr 0x13b82a0b0 <col:21, col:31> 'char' <LValueToRValue>
                |   | | |   `-ArraySubscriptExpr 0x13b82a078 <col:21, col:31> 'char' lvalue
                |   | | |     |-ImplicitCastExpr 0x13b82a048 <col:21> 'char *' <LValueToRValue>
                |   | | |     | `-DeclRefExpr 0x13b82a008 <col:21> 'char *' lvalue ParmVar 0x13b80ddf0 'string' 'char *'
                |   | | |     `-ImplicitCastExpr 0x13b82a060 <col:28> 'int' <LValueToRValue>
                |   | | |       `-DeclRefExpr 0x13b82a028 <col:28> 'int' lvalue Var 0x13b829f28 'idx' 'int'
                |   | | `-CharacterLiteral 0x13b82a098 <col:36> 'int' 48
                |   | |-UnaryOperator 0x13b82a120 <col:41, col:43> 'int' prefix '++'
                |   | | `-DeclRefExpr 0x13b82a100 <col:43> 'int' lvalue Var 0x13b829f28 'idx' 'int'
                |   | `-NullStmt 0x13b82a138 <line:65:4>
                |   `-IfStmt 0x13b82a748 <line:66:7, line:75:7>
                |     |-RecoveryExpr 0x13b82a698 <line:66:11, col:40> '_Bool' contains-errors
                |     `-CompoundStmt 0x13b82a738 <line:67:7, line:75:7>
                `-IfStmt 0x13b82ac20 <line:77:3, line:82:21> has_else
                  |-RecoveryExpr 0x13b82a7d0 <line:77:7, col:15> '_Bool' contains-errors
                  |-NullStmt 0x13b82ac18 <line:78:7>
                  `-ReturnStmt 0x13b82ac08 <line:81:7, line:82:21>
                    `-CallExpr 0x13b82ab80 <line:81:14, line:82:21> 'int'
                      |-ImplicitCastExpr 0x13b82ab68 <line:81:14> 'int (*)()' <FunctionToPointerDecay>
                      | `-DeclRefExpr 0x13b82aa70 <col:14> 'int ()' Function 0x13b82a9b8 'set_bool_option' 'int ()'
                      |-ImplicitCastExpr 0x13b82abc0 <col:30> 'int' <LValueToRValue>
                      | `-DeclRefExpr 0x13b82aa90 <col:30> 'int' lvalue Var 0x13b80e0a0 'opt_idx' 'int'
                      |-ImplicitCastExpr 0x13b82abd8 <col:39> 'char *' <LValueToRValue>
                      | `-DeclRefExpr 0x13b82aab0 <col:39> 'char *' lvalue Var 0x13b80e138 'varp' 'char *'
                      |-CStyleCastExpr 0x13b82ab20 <col:45, col:50> 'int' <IntegralCast>
                      | `-ImplicitCastExpr 0x13b82ab08 <col:50> 'long' <LValueToRValue> part_of_explicit_cast
                      |   `-DeclRefExpr 0x13b82aad0 <col:50> 'long' lvalue ParmVar 0x13b80dd70 'number' 'long'
                      `-ImplicitCastExpr 0x13b82abf0 <line:82:12> 'int' <LValueToRValue>
                        `-DeclRefExpr 0x13b82ab48 <col:12> 'int' lvalue ParmVar 0x13b80de70 'opt_flags' 'int'
