`-FunctionDecl 0x14d80df18  line:1:1 invalid ber_parse_header 'int (int, int, int *)'
  |-ParmVarDecl 0x14d80dcf0 <col:18, col:25> col:25 invalid s 'int'
  |-ParmVarDecl 0x14d80dd70 <col:28, col:32> col:32 used tagval 'int'
  |-ParmVarDecl 0x14d80de28 <col:40, col:45> col:45 used length 'int *'
  `-CompoundStmt 0x14d123d08 <line:2:1, line:33:1>
    |-DeclStmt 0x14d80e0f0 <line:3:2, col:14>
    | |-VarDecl 0x14d80dff0 <col:2, col:6> col:6 used tag 'int'
    | `-VarDecl 0x14d80e070 <col:2, col:11> col:11 used len 'int'
    |-IfStmt 0x14d123360 <line:5:2, line:12:2> has_else
    | |-BinaryOperator 0x14d80e160 <line:5:6, col:15> 'int' '>'
    | | |-ImplicitCastExpr 0x14d80e148 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14d80e108 <col:6> 'int' lvalue ParmVar 0x14d80dd70 'tagval' 'int'
    | | `-IntegerLiteral 0x14d80e128 <col:15> 'int' 255
    | |-CompoundStmt 0x14d80e370 <line:6:2, line:8:2>
    | | `-CallExpr 0x14d80e340 <line:7:3, col:22> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x14d80e2e0 <col:3> 'int ()' Function 0x14d80e228 'in_uint16_be' 'int ()'
    | |   |-RecoveryExpr 0x14d80e300 <col:16> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x14d80e320 <col:19> 'int' lvalue Var 0x14d80dff0 'tag' 'int'
    | `-CompoundStmt 0x14d123348 <line:10:2, line:12:2>
    |   `-CallExpr 0x14d123318 <line:11:3, col:18> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x14d1232b8 <col:3> 'int ()' Function 0x14d123200 'in_uint8' 'int ()'
    |     |-RecoveryExpr 0x14d1232d8 <col:12> '<dependent type>' contains-errors lvalue
    |     `-DeclRefExpr 0x14d1232f8 <col:15> 'int' lvalue Var 0x14d80dff0 'tag' 'int'
    |-IfStmt 0x14d123618 <line:14:2, line:18:2>
    | |-BinaryOperator 0x14d123400 <line:14:6, col:13> 'int' '!='
    | | |-ImplicitCastExpr 0x14d1233d0 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14d123390 <col:6> 'int' lvalue Var 0x14d80dff0 'tag' 'int'
    | | `-ImplicitCastExpr 0x14d1233e8 <col:13> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x14d1233b0 <col:13> 'int' lvalue ParmVar 0x14d80dd70 'tagval' 'int'
    | `-CompoundStmt 0x14d123608 <line:15:2, line:18:2>
    |-CallExpr 0x14d123698 <line:20:2, col:17> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x14d123638 <col:2> 'int ()' Function 0x14d123200 'in_uint8' 'int ()'
    | |-RecoveryExpr 0x14d123658 <col:11> '<dependent type>' contains-errors lvalue
    | `-DeclRefExpr 0x14d123678 <col:14> 'int' lvalue Var 0x14d80e070 'len' 'int'
    |-IfStmt 0x14d123b80 <line:22:2, line:30:13> has_else
    | |-BinaryOperator 0x14d123720 <line:22:6, col:12> 'int' '&'
    | | |-ImplicitCastExpr 0x14d123708 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14d1236c8 <col:6> 'int' lvalue Var 0x14d80e070 'len' 'int'
    | | `-IntegerLiteral 0x14d1236e8 <col:12> 'int' 128
    | |-CompoundStmt 0x14d123ab0 <line:23:2, line:28:2>
    | | |-CompoundAssignOperator 0x14d123798 <line:24:3, col:11> 'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
    | | | |-DeclRefExpr 0x14d123740 <col:3> 'int' lvalue Var 0x14d80e070 'len' 'int'
    | | | `-UnaryOperator 0x14d123780 <col:10, col:11> 'int' prefix '~' cannot overflow
    | | |   `-IntegerLiteral 0x14d123760 <col:11> 'int' 128
    | | |-BinaryOperator 0x14d123838 <line:25:3, col:13> 'int' '='
    | | | |-UnaryOperator 0x14d123800 <col:3, col:4> 'int' lvalue prefix '*' cannot overflow
    | | | | `-ImplicitCastExpr 0x14d1237e8 <col:4> 'int *' <LValueToRValue>
    | | | |   `-DeclRefExpr 0x14d1237c8 <col:4> 'int *' lvalue ParmVar 0x14d80de28 'length' 'int *'
    | | | `-IntegerLiteral 0x14d123818 <col:13> 'int' 0
    | | `-WhileStmt 0x14d123a90 <line:26:3, line:27:22>
    | |   |-UnaryOperator 0x14d123878 <line:26:10, col:13> 'int' postfix '--'
    | |   | `-DeclRefExpr 0x14d123858 <col:10> 'int' lvalue Var 0x14d80e070 'len' 'int'
    | |   `-CallExpr 0x14d123a60 <line:27:4, col:22> '<dependent type>' contains-errors
    | |     |-DeclRefExpr 0x14d123970 <col:4> 'int ()' Function 0x14d1238b8 'next_be' 'int ()'
    | |     |-RecoveryExpr 0x14d123990 <col:12> '<dependent type>' contains-errors lvalue
    | |     `-UnaryOperator 0x14d123a48 <col:15, col:16> 'int' lvalue prefix '*' cannot overflow
    | |       `-ImplicitCastExpr 0x14d123a30 <col:16> 'int *' <LValueToRValue>
    | |         `-DeclRefExpr 0x14d1239b0 <col:16> 'int *' lvalue ParmVar 0x14d80de28 'length' 'int *'
    | `-BinaryOperator 0x14d123b60 <line:30:3, col:13> 'int' '='
    |   |-UnaryOperator 0x14d123b10 <col:3, col:4> 'int' lvalue prefix '*' cannot overflow
    |   | `-ImplicitCastExpr 0x14d123af8 <col:4> 'int *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x14d123ad8 <col:4> 'int *' lvalue ParmVar 0x14d80de28 'length' 'int *'
    |   `-ImplicitCastExpr 0x14d123b48 <col:13> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x14d123b28 <col:13> 'int' lvalue Var 0x14d80e070 'len' 'int'
    `-ReturnStmt 0x14d123cf8 <line:32:2, col:18>
      `-CallExpr 0x14d123cd0 <col:9, col:18> '<dependent type>' contains-errors
        |-DeclRefExpr 0x14d123c90 <col:9> 'int ()' Function 0x14d123bd8 's_check' 'int ()'
        `-RecoveryExpr 0x14d123cb0 <col:17> '<dependent type>' contains-errors lvalue
