`-FunctionDecl 0x121940c08  line:1:5 group_send_sig_info 'int (int, struct siginfo *, struct task_struct *)'
  |-ParmVarDecl 0x1219280d8 <col:25, col:29> col:29 used sig 'int'
  |-ParmVarDecl 0x1219286c8 <col:34, col:50> col:50 used info 'struct siginfo *'
  |-ParmVarDecl 0x121940ac8 <col:56, col:76> col:76 used p 'struct task_struct *'
  `-CompoundStmt 0x121941940 <line:2:1, line:17:1>
    |-DeclStmt 0x121940d90 <line:3:2, col:21>
    | `-VarDecl 0x121940d28 <col:2, col:16> col:16 used flags 'unsigned long'
    |-DeclStmt 0x121940e28 <line:4:2, col:9>
    | `-VarDecl 0x121940dc0 <col:2, col:6> col:6 used ret 'int'
    |-BinaryOperator 0x1219410d8 <line:6:2, col:42> 'int' '='
    | |-DeclRefExpr 0x121940e40 <col:2> 'int' lvalue Var 0x121940dc0 'ret' 'int'
    | `-CallExpr 0x121941058 <col:8, col:42> 'int'
    |   |-ImplicitCastExpr 0x121941040 <col:8> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x121940f90 <col:8> 'int ()' Function 0x121940ed8 'check_kill_permission' 'int ()'
    |   |-ImplicitCastExpr 0x121941090 <col:30> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x121940fb0 <col:30> 'int' lvalue ParmVar 0x1219280d8 'sig' 'int'
    |   |-ImplicitCastExpr 0x1219410a8 <col:35> 'struct siginfo *' <LValueToRValue>
    |   | `-DeclRefExpr 0x121940fd0 <col:35> 'struct siginfo *' lvalue ParmVar 0x1219286c8 'info' 'struct siginfo *'
    |   `-ImplicitCastExpr 0x1219410c0 <col:41> 'struct task_struct *' <LValueToRValue>
    |     `-DeclRefExpr 0x121940ff0 <col:41> 'struct task_struct *' lvalue ParmVar 0x121940ac8 'p' 'struct task_struct *'
    |-IfStmt 0x1219418d8 <line:8:2, line:14:2>
    | |-BinaryOperator 0x121941180 <line:8:6, col:14> 'int' '&&'
    | | |-UnaryOperator 0x121941130 <col:6, col:7> 'int' prefix '!' cannot overflow
    | | | `-ImplicitCastExpr 0x121941118 <col:7> 'int' <LValueToRValue>
    | | |   `-DeclRefExpr 0x1219410f8 <col:7> 'int' lvalue Var 0x121940dc0 'ret' 'int'
    | | `-ImplicitCastExpr 0x121941168 <col:14> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x121941148 <col:14> 'int' lvalue ParmVar 0x1219280d8 'sig' 'int'
    | `-CompoundStmt 0x1219418b8 <col:19, line:14:2>
    |   |-BinaryOperator 0x121941278 <line:9:3, col:10> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x1219411a0 <col:3> 'int' lvalue Var 0x121940dc0 'ret' 'int'
    |   | `-UnaryOperator 0x121941260 <col:9, col:10> '<dependent type>' contains-errors prefix '-' cannot overflow
    |   |   `-ImplicitCastExpr 0x121941248 <col:10> '<dependent type>' contains-errors <LValueToRValue>
    |   |     `-RecoveryExpr 0x121941228 <col:10> '<dependent type>' contains-errors lvalue
    |   `-IfStmt 0x121941898 <line:10:3, line:13:3>
    |     |-CallExpr 0x121941440 <line:10:7, col:34> 'int'
    |     | |-ImplicitCastExpr 0x121941428 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |     | | `-DeclRefExpr 0x121941378 <col:7> 'int ()' Function 0x1219412c0 'lock_task_sighand' 'int ()'
    |     | |-ImplicitCastExpr 0x121941470 <col:25> 'struct task_struct *' <LValueToRValue>
    |     | | `-DeclRefExpr 0x121941398 <col:25> 'struct task_struct *' lvalue ParmVar 0x121940ac8 'p' 'struct task_struct *'
    |     | `-UnaryOperator 0x121941410 <col:28, col:29> 'unsigned long *' prefix '&' cannot overflow
    |     |   `-DeclRefExpr 0x1219413b8 <col:29> 'unsigned long' lvalue Var 0x121940d28 'flags' 'unsigned long'
    |     `-CompoundStmt 0x121941878 <col:37, line:13:3>
    |       |-BinaryOperator 0x1219416a0 <line:11:4, col:44> 'int' '='
    |       | |-DeclRefExpr 0x121941488 <col:4> 'int' lvalue Var 0x121940dc0 'ret' 'int'
    |       | `-CallExpr 0x121941620 <col:10, col:44> 'int'
    |       |   |-ImplicitCastExpr 0x121941608 <col:10> 'int (*)()' <FunctionToPointerDecay>
    |       |   | `-DeclRefExpr 0x121941588 <col:10> 'int ()' Function 0x1219414d0 '__group_send_sig_info' 'int ()'
    |       |   |-ImplicitCastExpr 0x121941658 <col:32> 'int' <LValueToRValue>
    |       |   | `-DeclRefExpr 0x1219415a8 <col:32> 'int' lvalue ParmVar 0x1219280d8 'sig' 'int'
    |       |   |-ImplicitCastExpr 0x121941670 <col:37> 'struct siginfo *' <LValueToRValue>
    |       |   | `-DeclRefExpr 0x1219415c8 <col:37> 'struct siginfo *' lvalue ParmVar 0x1219286c8 'info' 'struct siginfo *'
    |       |   `-ImplicitCastExpr 0x121941688 <col:43> 'struct task_struct *' <LValueToRValue>
    |       |     `-DeclRefExpr 0x1219415e8 <col:43> 'struct task_struct *' lvalue ParmVar 0x121940ac8 'p' 'struct task_struct *'
    |       `-CallExpr 0x121941830 <line:12:4, col:33> 'int'
    |         |-ImplicitCastExpr 0x121941818 <col:4> 'int (*)()' <FunctionToPointerDecay>
    |         | `-DeclRefExpr 0x1219417a0 <col:4> 'int ()' Function 0x1219416e8 'unlock_task_sighand' 'int ()'
    |         |-ImplicitCastExpr 0x121941860 <col:24> 'struct task_struct *' <LValueToRValue>
    |         | `-DeclRefExpr 0x1219417c0 <col:24> 'struct task_struct *' lvalue ParmVar 0x121940ac8 'p' 'struct task_struct *'
    |         `-UnaryOperator 0x121941800 <col:27, col:28> 'unsigned long *' prefix '&' cannot overflow
    |           `-DeclRefExpr 0x1219417e0 <col:28> 'unsigned long' lvalue Var 0x121940d28 'flags' 'unsigned long'
    `-ReturnStmt 0x121941930 <line:16:2, col:9>
      `-ImplicitCastExpr 0x121941918 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x1219418f8 <col:9> 'int' lvalue Var 0x121940dc0 'ret' 'int'
