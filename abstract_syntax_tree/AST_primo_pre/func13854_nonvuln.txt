`-FunctionDecl 0x12e00ddf8  line:1:12 invalid file_modmul 'int (int *)' static
  |-ParmVarDecl 0x12e00dd28 <col:24, col:32> col:32 invalid s 'int *'
  `-CompoundStmt 0x12d1155b0 <line:2:1, line:51:1>
    |-DeclStmt 0x12e00e178 <line:4:5, col:15>
    | `-VarDecl 0x12e00e0f0 <col:5, col:14> col:9 used st 'int' cinit
    |   `-IntegerLiteral 0x12e00e158 <col:14> 'int' 0
    |-IfStmt 0x12d112ad8 <line:6:5, line:11:14>
    | |-BinaryOperator 0x12d112a50 <line:6:9, line:10:40> 'int' contains-errors '||'
    | | |-BinaryOperator 0x12d112978 <line:6:9, line:9:51> 'int' contains-errors '||'
    | | | |-BinaryOperator 0x12d1128d8 <line:6:9, line:8:45> 'int' contains-errors '||'
    | | | | |-BinaryOperator 0x12d112838 <line:6:9, line:7:45> 'int' contains-errors '||'
    | | | | | |-UnaryOperator 0x12d1127a0 <line:6:9, col:38> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | | | | | `-CallExpr 0x12d112778 <col:10, col:38> '<dependent type>' contains-errors
    | | | | | |   |-DeclRefExpr 0x12e00e2f0 <col:10> 'int ()' Function 0x12e00e238 'TEST_ptr' 'int ()'
    | | | | | |   `-BinaryOperator 0x12d112758 <col:19, col:37> '<dependent type>' contains-errors '='
    | | | | | |     |-RecoveryExpr 0x12d112738 <col:19> '<dependent type>' contains-errors lvalue
    | | | | | |     `-CallExpr 0x12d1120b0 <col:23, col:37> '<dependent type>' contains-errors
    | | | | | |       |-DeclRefExpr 0x12d112010 <col:23> 'int ()' Function 0x12e00e350 'getBN' 'int ()'
    | | | | | |       |-RecoveryExpr 0x12d112030 <col:29> '<dependent type>' contains-errors lvalue
    | | | | | |       `-StringLiteral 0x12d112090 <col:32> 'char[4]' lvalue "STR"
    | | | | | `-UnaryOperator 0x12d112820 <line:7:16, col:45> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | | | |   `-CallExpr 0x12d1127f8 <col:17, col:45> '<dependent type>' contains-errors
    | | | | |     |-DeclRefExpr 0x12d112140 <col:17> 'int ()' Function 0x12e00e238 'TEST_ptr' 'int ()'
    | | | | |     `-BinaryOperator 0x12d1127d8 <col:26, col:44> '<dependent type>' contains-errors '='
    | | | | |       |-RecoveryExpr 0x12d1127b8 <col:26> '<dependent type>' contains-errors lvalue
    | | | | |       `-CallExpr 0x12d1121d8 <col:30, col:44> '<dependent type>' contains-errors
    | | | | |         |-DeclRefExpr 0x12d112178 <col:30> 'int ()' Function 0x12e00e350 'getBN' 'int ()'
    | | | | |         |-RecoveryExpr 0x12d112198 <col:36> '<dependent type>' contains-errors lvalue
    | | | | |         `-StringLiteral 0x12d1121b8 <col:39> 'char[4]' lvalue "STR"
    | | | | `-UnaryOperator 0x12d1128c0 <line:8:16, col:45> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | | |   `-CallExpr 0x12d112898 <col:17, col:45> '<dependent type>' contains-errors
    | | | |     |-DeclRefExpr 0x12d112288 <col:17> 'int ()' Function 0x12e00e238 'TEST_ptr' 'int ()'
    | | | |     `-BinaryOperator 0x12d112878 <col:26, col:44> '<dependent type>' contains-errors '='
    | | | |       |-RecoveryExpr 0x12d112858 <col:26> '<dependent type>' contains-errors lvalue
    | | | |       `-CallExpr 0x12d112320 <col:30, col:44> '<dependent type>' contains-errors
    | | | |         |-DeclRefExpr 0x12d1122c0 <col:30> 'int ()' Function 0x12e00e350 'getBN' 'int ()'
    | | | |         |-RecoveryExpr 0x12d1122e0 <col:36> '<dependent type>' contains-errors lvalue
    | | | |         `-StringLiteral 0x12d112300 <col:39> 'char[4]' lvalue "STR"
    | | | `-UnaryOperator 0x12d112960 <line:9:16, col:51> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | |   `-CallExpr 0x12d112938 <col:17, col:51> '<dependent type>' contains-errors
    | | |     |-DeclRefExpr 0x12d1123d0 <col:17> 'int ()' Function 0x12e00e238 'TEST_ptr' 'int ()'
    | | |     `-BinaryOperator 0x12d112918 <col:26, col:50> '<dependent type>' contains-errors '='
    | | |       |-RecoveryExpr 0x12d1128f8 <col:26> '<dependent type>' contains-errors lvalue
    | | |       `-CallExpr 0x12d112468 <col:36, col:50> '<dependent type>' contains-errors
    | | |         |-DeclRefExpr 0x12d112408 <col:36> 'int ()' Function 0x12e00e350 'getBN' 'int ()'
    | | |         |-RecoveryExpr 0x12d112428 <col:42> '<dependent type>' contains-errors lvalue
    | | |         `-StringLiteral 0x12d112448 <col:45> 'char[4]' lvalue "STR"
    | | `-UnaryOperator 0x12d112a38 <line:10:16, col:40> '<dependent type>' contains-errors prefix '!' cannot overflow
    | |   `-CallExpr 0x12d112a10 <col:17, col:40> '<dependent type>' contains-errors
    | |     |-DeclRefExpr 0x12d112518 <col:17> 'int ()' Function 0x12e00e238 'TEST_ptr' 'int ()'
    | |     `-BinaryOperator 0x12d1129f0 <col:26, col:39> '<dependent type>' contains-errors '='
    | |       |-RecoveryExpr 0x12d112998 <col:26> '<dependent type>' contains-errors lvalue
    | |       `-CallExpr 0x12d1129d0 <col:32, col:39> 'int'
    | |         `-ImplicitCastExpr 0x12d1129b8 <col:32> 'int (*)()' <FunctionToPointerDecay>
    | |           `-DeclRefExpr 0x12d112630 <col:32> 'int ()' Function 0x12d112578 'BN_new' 'int ()'
    | `-GotoStmt 0x12d112ac0 <line:11:9, col:14> 'err' 0x12d112a70
    |-IfStmt 0x12d112e50 <line:13:5, line:15:14>
    | |-RecoveryExpr 0x12d112e18 <line:13:9, line:14:44> '_Bool' contains-errors
    | `-GotoStmt 0x12d112e38 <line:15:9, col:14> 'err' 0x12d112a70
    |-IfStmt 0x12d115420 <line:17:5, line:41:5>
    | |-RecoveryExpr 0x12d112f70 <line:17:9, col:20> '_Bool' contains-errors
    | `-CompoundStmt 0x12d115400 <col:23, line:41:5>
    |   |-IfStmt 0x12d115100 <line:23:9, line:35:18> has_else
    |   | |-RecoveryExpr 0x12d115020 <line:23:13, line:32:48> '_Bool' contains-errors
    |   | |-BinaryOperator 0x12d115080 <line:33:13, col:18> 'int' '='
    |   | | |-DeclRefExpr 0x12d115040 <col:13> 'int' lvalue Var 0x12e00e0f0 'st' 'int'
    |   | | `-IntegerLiteral 0x12d115060 <col:18> 'int' 0
    |   | `-BinaryOperator 0x12d1150e0 <line:35:13, col:18> 'int' '='
    |   |   |-DeclRefExpr 0x12d1150a0 <col:13> 'int' lvalue Var 0x12e00e0f0 'st' 'int'
    |   |   `-IntegerLiteral 0x12d1150c0 <col:18> 'int' 1
    |   `-IfStmt 0x12d1153e0 <line:39:9, line:40:18>
    |     |-BinaryOperator 0x12d1153a8 <line:39:13, col:19> 'int' '=='
    |     | |-ImplicitCastExpr 0x12d115390 <col:13> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x12d115350 <col:13> 'int' lvalue Var 0x12e00e0f0 'st' 'int'
    |     | `-IntegerLiteral 0x12d115370 <col:19> 'int' 0
    |     `-GotoStmt 0x12d1153c8 <line:40:13, col:18> 'err' 0x12d112a70
    |-BinaryOperator 0x12d115480 <line:43:5, col:10> 'int' '='
    | |-DeclRefExpr 0x12d115440 <col:5> 'int' lvalue Var 0x12e00e0f0 'st' 'int'
    | `-IntegerLiteral 0x12d115460 <col:10> 'int' 1
    |-LabelStmt 0x12d1154c8 <line:44:2, col:5> 'err'
    | `-NullStmt 0x12d1154c0 <col:5>
    `-ReturnStmt 0x12d1155a0 <line:50:5, col:12>
      `-ImplicitCastExpr 0x12d115588 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x12d115568 <col:12> 'int' lvalue Var 0x12e00e0f0 'st' 'int'
