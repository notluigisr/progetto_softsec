`-FunctionDecl 0x1468275f8  line:1:1 invalid issuerAndThisUpdatePretty 'int (int *, struct berval *, struct berval *, void *)'
  |-ParmVarDecl 0x14680dd28 <line:2:2, col:10> col:10 invalid syntax 'int *'
  |-ParmVarDecl 0x14680e318 <line:3:2, col:17> col:17 used in 'struct berval *'
  |-ParmVarDecl 0x146827428 <line:4:2, col:17> col:17 used out 'struct berval *'
  |-ParmVarDecl 0x1468274a8 <line:5:2, col:8> col:8 used ctx 'void *'
  `-CompoundStmt 0x146123c00 <line:6:1, line:62:1>
    |-DeclStmt 0x146827740 <line:7:2, col:8>
    | `-VarDecl 0x1468276d8 <col:2, col:6> col:6 used rc 'int'
    |-DeclStmt 0x146827928 <line:8:2, col:38>
    | |-VarDecl 0x146827778 <col:2, col:16> col:16 invalid i 'struct berval'
    | |-VarDecl 0x146827800 <col:2, col:19> col:19 invalid tu 'struct berval'
    | `-VarDecl 0x146827888 <col:2, col:23> col:23 invalid ni 'struct berval'
    |-DeclStmt 0x1468279c0 <line:9:2, col:9>
    | `-VarDecl 0x146827958 <col:2, col:8> col:8 used p 'char *'
    |-CallExpr 0x146827c10 <line:11:2, col:21> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x146827b30 <col:2> 'int ()' Function 0x146827a78 'assert' 'int ()'
    | `-BinaryOperator 0x146827bf0 <col:10, col:16> 'int' contains-errors '!='
    |   |-DeclRefExpr 0x146827b50 <col:10> 'struct berval *' lvalue ParmVar 0x14680e318 'in' 'struct berval *'
    |   `-RecoveryExpr 0x146827bd0 <col:16> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x146827d18 <line:12:2, col:22> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x146827c38 <col:2> 'int ()' Function 0x146827a78 'assert' 'int ()'
    | `-BinaryOperator 0x146827cf8 <col:10, col:17> 'int' contains-errors '!='
    |   |-DeclRefExpr 0x146827c58 <col:10> 'struct berval *' lvalue ParmVar 0x146827428 'out' 'struct berval *'
    |   `-RecoveryExpr 0x146827cd8 <col:17> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x146827ea8 <line:14:2, col:18> 'int'
    | |-ImplicitCastExpr 0x146827e90 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x146827e20 <col:2> 'int ()' Function 0x146827d68 'BER_BVZERO' 'int ()'
    | `-ImplicitCastExpr 0x146827ed0 <col:14> 'struct berval *' <LValueToRValue>
    |   `-DeclRefExpr 0x146827e40 <col:14> 'struct berval *' lvalue ParmVar 0x146827428 'out' 'struct berval *'
    |-CallExpr 0x146828168 <line:16:2, line:17:20> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x146827fc8 <line:16:2> 'int ()' Function 0x146827f10 'Debug' 'int ()'
    | |-RecoveryExpr 0x146828148 <col:9> '<dependent type>' contains-errors lvalue
    | |-StringLiteral 0x146828040 <col:27> 'char[4]' lvalue "STR"
    | |-RecoveryExpr 0x146828098 <line:17:3, col:7> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x146828060 <col:3> 'struct berval *' lvalue ParmVar 0x14680e318 'in' 'struct berval *'
    | |-IntegerLiteral 0x1468280c0 <col:15> 'int' 0
    | `-IntegerLiteral 0x1468280e0 <col:18> 'int' 0
    |-BinaryOperator 0x1468283c0 <line:19:2, col:50> 'int' contains-errors '='
    | |-DeclRefExpr 0x1468281b0 <col:2> 'int' lvalue Var 0x1468276d8 'rc' 'int'
    | `-CallExpr 0x146828380 <col:7, col:50> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x1468282b0 <col:7> 'int ()' Function 0x1468281f8 'issuerAndThisUpdateCheck' 'int ()'
    |   |-DeclRefExpr 0x1468282d0 <col:33> 'struct berval *' lvalue ParmVar 0x14680e318 'in' 'struct berval *'
    |   |-UnaryOperator 0x146828310 <col:37, col:38> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | `-RecoveryExpr 0x1468282f0 <col:38> '<dependent type>' contains-errors lvalue
    |   |-UnaryOperator 0x146828348 <col:41, col:42> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | `-RecoveryExpr 0x146828328 <col:42> '<dependent type>' contains-errors lvalue
    |   `-DeclRefExpr 0x146828360 <col:46> 'void *' lvalue ParmVar 0x1468274a8 'ctx' 'void *'
    |-IfStmt 0x14682a498 <line:20:2, line:22:2>
    | |-ImplicitCastExpr 0x14682a400 <line:20:7> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x1468283e0 <col:7> 'int' lvalue Var 0x1468276d8 'rc' 'int'
    | `-CompoundStmt 0x14682a480 <col:12, line:22:2>
    |   `-GotoStmt 0x14682a468 <line:21:3, col:8> 'done' 0x14682a418
    |-BinaryOperator 0x14682a6c8 <line:24:2, col:38> 'int' contains-errors '='
    | |-DeclRefExpr 0x14682a4b8 <col:2> 'int' lvalue Var 0x1468276d8 'rc' 'int'
    | `-CallExpr 0x14682a688 <col:7, col:38> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x14682a5b8 <col:7> 'int ()' Function 0x14682a500 'dnPretty' 'int ()'
    |   |-RecoveryExpr 0x14682a5d8 <col:17> '<dependent type>' contains-errors lvalue
    |   |-UnaryOperator 0x14682a618 <col:25, col:26> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | `-RecoveryExpr 0x14682a5f8 <col:26> '<dependent type>' contains-errors lvalue
    |   |-UnaryOperator 0x14682a650 <col:29, col:30> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | `-RecoveryExpr 0x14682a630 <col:30> '<dependent type>' contains-errors lvalue
    |   `-DeclRefExpr 0x14682a668 <col:34> 'void *' lvalue ParmVar 0x1468274a8 'ctx' 'void *'
    |-IfStmt 0x14682ac08 <line:26:2, line:28:2>
    | |-BinaryOperator 0x14682aa18 <line:26:7, col:59> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x14682a9a0 <col:7, col:24> 'int' contains-errors '=='
    | | | |-ArraySubscriptExpr 0x14682a980 <col:7, col:19> '<dependent type>' contains-errors lvalue
    | | | | |-ImplicitCastExpr 0x14682a968 <col:7, col:11> '<dependent type>' contains-errors <LValueToRValue>
    | | | | | `-RecoveryExpr 0x14682a720 <col:7, col:11> '<dependent type>' contains-errors lvalue
    | | | | |   `-DeclRefExpr 0x14682a6e8 <col:7> 'struct berval *' lvalue ParmVar 0x14680e318 'in' 'struct berval *'
    | | | | `-IntegerLiteral 0x14682a748 <col:18> 'int' 0
    | | | `-CharacterLiteral 0x14682a7a0 <col:24> 'int' 123
    | | `-BinaryOperator 0x14682a9f8 <col:31, col:59> 'int' contains-errors '=='
    | |   |-ArraySubscriptExpr 0x14682a9d8 <col:31, col:54> '<dependent type>' contains-errors lvalue
    | |   | |-ImplicitCastExpr 0x14682a9c0 <col:31, col:35> '<dependent type>' contains-errors <LValueToRValue>
    | |   | | `-RecoveryExpr 0x14682a810 <col:31, col:35> '<dependent type>' contains-errors lvalue
    | |   | |   `-DeclRefExpr 0x14682a7d8 <col:31> 'struct berval *' lvalue ParmVar 0x14680e318 'in' 'struct berval *'
    | |   | `-BinaryOperator 0x14682a8b8 <col:42, col:53> '<dependent type>' contains-errors '-'
    | |   |   |-RecoveryExpr 0x14682a870 <col:42, col:46> '<dependent type>' contains-errors lvalue
    | |   |   | `-DeclRefExpr 0x14682a838 <col:42> 'struct berval *' lvalue ParmVar 0x14680e318 'in' 'struct berval *'
    | |   |   `-IntegerLiteral 0x14682a898 <col:53> 'int' 1
    | |   `-CharacterLiteral 0x14682a910 <col:59> 'int' 125
    | `-CompoundStmt 0x14682abf0 <col:65, line:28:2>
    |   `-CallExpr 0x14682abc0 <line:27:3, col:31> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x14682ab18 <col:3> 'int ()' Function 0x14682aa60 'slap_sl_free' 'int ()'
    |     |-CXXDependentScopeMemberExpr 0x14682ab58 <col:17, col:19> '<dependent type>' contains-errors lvalue .bv_val
    |     | `-RecoveryExpr 0x14682ab38 <col:17> '<dependent type>' contains-errors lvalue
    |     `-DeclRefExpr 0x14682aba0 <col:27> 'void *' lvalue ParmVar 0x1468274a8 'ctx' 'void *'
    |-IfStmt 0x14682aea8 <line:30:2, line:33:2>
    | |-BinaryOperator 0x14682ae38 <line:30:7, col:34> 'int' contains-errors '||'
    | | |-DeclRefExpr 0x14682ac28 <col:7> 'int' lvalue Var 0x1468276d8 'rc' 'int'
    | | `-CallExpr 0x14682ae08 <col:13, col:34> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x14682ad28 <col:13> 'int ()' Function 0x14682ac70 'checkTime' 'int ()'
    | |   |-UnaryOperator 0x14682ad68 <col:24, col:25> '<dependent type>' contains-errors prefix '&' cannot overflow
    | |   | `-RecoveryExpr 0x14682ad48 <col:25> '<dependent type>' contains-errors lvalue
    | |   `-RecoveryExpr 0x14682ade8 <col:29> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x14682ae90 <col:38, line:33:2>
    |   `-GotoStmt 0x14682ae78 <line:32:3, col:8> 'done' 0x14682a418
    |-BinaryOperator 0x14682b268 <line:36:2, line:37:20> '<dependent type>' contains-errors '='
    | |-RecoveryExpr 0x14682af00 <line:36:2, col:7> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x14682aec8 <col:2> 'struct berval *' lvalue ParmVar 0x146827428 'out' 'struct berval *'
    | `-BinaryOperator 0x14682b248 <col:16, line:37:20> '<dependent type>' contains-errors '+'
    |   |-BinaryOperator 0x14682b228 <line:36:16, line:37:8> '<dependent type>' contains-errors '+'
    |   | |-CallExpr 0x14682b1e8 <line:36:16, col:30> 'int'
    |   | | |-ImplicitCastExpr 0x14682b1d0 <col:16> 'int (*)()' <FunctionToPointerDecay>
    |   | | | `-DeclRefExpr 0x14682b008 <col:16> 'int ()' Function 0x14682af50 'STRLENOF' 'int ()'
    |   | | `-ImplicitCastExpr 0x14682b210 <col:25> 'char *' <ArrayToPointerDecay>
    |   | |   `-StringLiteral 0x14682b028 <col:25> 'char[4]' lvalue "STR"
    |   | `-CXXDependentScopeMemberExpr 0x14682b0c0 <line:37:5, col:8> '<dependent type>' contains-errors lvalue .bv_len
    |   |   `-RecoveryExpr 0x14682b0a0 <col:5> '<dependent type>' contains-errors lvalue
    |   `-CXXDependentScopeMemberExpr 0x14682b148 <col:17, col:20> '<dependent type>' contains-errors lvalue .bv_len
    |     `-RecoveryExpr 0x14682b128 <col:17> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x146122cf0 <line:38:2, col:53> '<dependent type>' contains-errors '='
    | |-RecoveryExpr 0x14682b2c0 <col:2, col:7> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x14682b288 <col:2> 'struct berval *' lvalue ParmVar 0x146827428 'out' 'struct berval *'
    | `-CallExpr 0x146122cc0 <col:16, col:53> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x14682b3c8 <col:16> 'int ()' Function 0x14682b310 'slap_sl_malloc' 'int ()'
    |   |-BinaryOperator 0x146122c80 <col:32, col:46> '<dependent type>' contains-errors '+'
    |   | |-RecoveryExpr 0x146122c38 <col:32, col:37> '<dependent type>' contains-errors lvalue
    |   | | `-DeclRefExpr 0x146122c00 <col:32> 'struct berval *' lvalue ParmVar 0x146827428 'out' 'struct berval *'
    |   | `-IntegerLiteral 0x146122c60 <col:46> 'int' 1
    |   `-DeclRefExpr 0x146122ca0 <col:49> 'void *' lvalue ParmVar 0x1468274a8 'ctx' 'void *'
    |-IfStmt 0x146122e88 <line:40:2, line:44:2>
    | |-RecoveryExpr 0x146122d70 <line:40:7, col:22> '_Bool' contains-errors
    | `-CompoundStmt 0x146122e68 <col:29, line:44:2>
    |   |-BinaryOperator 0x146122e10 <line:41:3, col:17> '<dependent type>' contains-errors '='
    |   | |-RecoveryExpr 0x146122dc8 <col:3, col:8> '<dependent type>' contains-errors lvalue
    |   | | `-DeclRefExpr 0x146122d90 <col:3> 'struct berval *' lvalue ParmVar 0x146827428 'out' 'struct berval *'
    |   | `-IntegerLiteral 0x146122df0 <col:17> 'int' 0
    |   `-GotoStmt 0x146122e50 <line:43:3, col:8> 'done' 0x14682a418
    |-BinaryOperator 0x146122f28 <line:46:2, col:11> 'char *' contains-errors '='
    | |-DeclRefExpr 0x146122ea8 <col:2> 'char *' lvalue Var 0x146827958 'p' 'char *'
    | `-RecoveryExpr 0x146122f00 <col:6, col:11> '<dependent type>' contains-errors lvalue
    |   `-DeclRefExpr 0x146122ec8 <col:6> 'struct berval *' lvalue ParmVar 0x146827428 'out' 'struct berval *'
    |-BinaryOperator 0x146123138 <line:47:2, col:31> 'char *' '='
    | |-DeclRefExpr 0x146122f48 <col:2> 'char *' lvalue Var 0x146827958 'p' 'char *'
    | `-ImplicitCastExpr 0x146123120 <col:6, col:31> 'char *' <IntegralToPointer>
    |   `-CallExpr 0x1461230c0 <col:6, col:31> 'int'
    |     |-ImplicitCastExpr 0x1461230a8 <col:6> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x146123048 <col:6> 'int ()' Function 0x146122f90 'lutil_strcopy' 'int ()'
    |     |-ImplicitCastExpr 0x1461230f0 <col:21> 'char *' <LValueToRValue>
    |     | `-DeclRefExpr 0x146123068 <col:21> 'char *' lvalue Var 0x146827958 'p' 'char *'
    |     `-ImplicitCastExpr 0x146123108 <col:24> 'char *' <ArrayToPointerDecay>
    |       `-StringLiteral 0x146123088 <col:24> 'char[4]' lvalue "STR"
    |-BinaryOperator 0x146123300 <line:48:2, col:30> 'char *' contains-errors '='
    | |-DeclRefExpr 0x146123158 <col:2> 'char *' lvalue Var 0x146827958 'p' 'char *'
    | `-CallExpr 0x1461232d0 <col:6, col:30> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x146123258 <col:6> 'int ()' Function 0x1461231a0 'lutil_strbvcopy' 'int ()'
    |   |-DeclRefExpr 0x146123278 <col:23> 'char *' lvalue Var 0x146827958 'p' 'char *'
    |   `-UnaryOperator 0x1461232b8 <col:26, col:27> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-RecoveryExpr 0x146123298 <col:27> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x146123430 <line:49:2, col:30> 'char *' '='
    | |-DeclRefExpr 0x146123320 <col:2> 'char *' lvalue Var 0x146827958 'p' 'char *'
    | `-ImplicitCastExpr 0x146123418 <col:6, col:30> 'char *' <IntegralToPointer>
    |   `-CallExpr 0x1461233b8 <col:6, col:30> 'int'
    |     |-ImplicitCastExpr 0x1461233a0 <col:6> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x146123340 <col:6> 'int ()' Function 0x146122f90 'lutil_strcopy' 'int ()'
    |     |-ImplicitCastExpr 0x1461233e8 <col:21> 'char *' <LValueToRValue>
    |     | `-DeclRefExpr 0x146123360 <col:21> 'char *' lvalue Var 0x146827958 'p' 'char *'
    |     `-ImplicitCastExpr 0x146123400 <col:24> 'char *' <ArrayToPointerDecay>
    |       `-StringLiteral 0x146123380 <col:24> 'char[4]' lvalue "STR"
    |-BinaryOperator 0x146123518 <line:50:2, col:30> 'char *' contains-errors '='
    | |-DeclRefExpr 0x146123450 <col:2> 'char *' lvalue Var 0x146827958 'p' 'char *'
    | `-CallExpr 0x1461234e8 <col:6, col:30> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x146123470 <col:6> 'int ()' Function 0x1461231a0 'lutil_strbvcopy' 'int ()'
    |   |-DeclRefExpr 0x146123490 <col:23> 'char *' lvalue Var 0x146827958 'p' 'char *'
    |   `-UnaryOperator 0x1461234d0 <col:26, col:27> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-RecoveryExpr 0x1461234b0 <col:27> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x146123648 <line:51:2, col:31> 'char *' '='
    | |-DeclRefExpr 0x146123538 <col:2> 'char *' lvalue Var 0x146827958 'p' 'char *'
    | `-ImplicitCastExpr 0x146123630 <col:6, col:31> 'char *' <IntegralToPointer>
    |   `-CallExpr 0x1461235d0 <col:6, col:31> 'int'
    |     |-ImplicitCastExpr 0x1461235b8 <col:6> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x146123558 <col:6> 'int ()' Function 0x146122f90 'lutil_strcopy' 'int ()'
    |     |-ImplicitCastExpr 0x146123600 <col:21> 'char *' <LValueToRValue>
    |     | `-DeclRefExpr 0x146123578 <col:21> 'char *' lvalue Var 0x146827958 'p' 'char *'
    |     `-ImplicitCastExpr 0x146123618 <col:25> 'char *' <ArrayToPointerDecay>
    |       `-StringLiteral 0x146123598 <col:25> 'char[4]' lvalue "STR"
    |-CallExpr 0x1461238a0 <line:53:2, col:41> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x146123668 <col:2> 'int ()' Function 0x146827a78 'assert' 'int ()'
    | `-BinaryOperator 0x146123880 <col:10, col:39> 'int' contains-errors '=='
    |   |-DeclRefExpr 0x146123688 <col:10> 'char *' lvalue Var 0x146827958 'p' 'char *'
    |   `-UnaryOperator 0x146123868 <col:15, col:39> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-ArraySubscriptExpr 0x146123848 <col:16, col:39> '<dependent type>' contains-errors lvalue
    |       |-ImplicitCastExpr 0x146123818 <col:16, col:21> '<dependent type>' contains-errors <LValueToRValue>
    |       | `-RecoveryExpr 0x1461236e0 <col:16, col:21> '<dependent type>' contains-errors lvalue
    |       |   `-DeclRefExpr 0x1461236a8 <col:16> 'struct berval *' lvalue ParmVar 0x146827428 'out' 'struct berval *'
    |       `-ImplicitCastExpr 0x146123830 <col:28, col:33> '<dependent type>' contains-errors <LValueToRValue>
    |         `-RecoveryExpr 0x146123740 <col:28, col:33> '<dependent type>' contains-errors lvalue
    |           `-DeclRefExpr 0x146123708 <col:28> 'struct berval *' lvalue ParmVar 0x146827428 'out' 'struct berval *'
    |-LabelStmt 0x1461238d0 <line:55:1, col:6> 'done'
    | `-NullStmt 0x1461238c8 <col:6>
    |-CallExpr 0x146123af8 <line:59:2, col:31> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x146123a50 <col:2> 'int ()' Function 0x14682aa60 'slap_sl_free' 'int ()'
    | |-CXXDependentScopeMemberExpr 0x146123a90 <col:16, col:19> '<dependent type>' contains-errors lvalue .bv_val
    | | `-RecoveryExpr 0x146123a70 <col:16> '<dependent type>' contains-errors lvalue
    | `-DeclRefExpr 0x146123ad8 <col:27> 'void *' lvalue ParmVar 0x1468274a8 'ctx' 'void *'
    `-ReturnStmt 0x146123b60 <line:61:2, col:9>
      `-ImplicitCastExpr 0x146123b48 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x146123b28 <col:9> 'int' lvalue Var 0x1468276d8 'rc' 'int'
