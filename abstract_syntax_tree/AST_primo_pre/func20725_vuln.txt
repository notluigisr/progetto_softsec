`-FunctionDecl 0x121928318  line:1:1 invalid ber_parse_header 'int (int, int, int *)'
  |-ParmVarDecl 0x1219280f0 <col:18, col:25> col:25 invalid s 'int'
  |-ParmVarDecl 0x121928170 <col:28, col:32> col:32 used tagval 'int'
  |-ParmVarDecl 0x121928228 <col:40, col:45> col:45 used length 'int *'
  `-CompoundStmt 0x1219423a8 <line:2:1, line:33:1>
    |-DeclStmt 0x1219284f0 <line:3:2, col:14>
    | |-VarDecl 0x1219283f0 <col:2, col:6> col:6 used tag 'int'
    | `-VarDecl 0x121928470 <col:2, col:11> col:11 used len 'int'
    |-IfStmt 0x121941960 <line:5:2, line:12:2> has_else
    | |-BinaryOperator 0x121928560 <line:5:6, col:15> 'int' '>'
    | | |-ImplicitCastExpr 0x121928548 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x121928508 <col:6> 'int' lvalue ParmVar 0x121928170 'tagval' 'int'
    | | `-IntegerLiteral 0x121928528 <col:15> 'int' 255
    | |-CompoundStmt 0x121928770 <line:6:2, line:8:2>
    | | `-CallExpr 0x121928740 <line:7:3, col:22> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x1219286e0 <col:3> 'int ()' Function 0x121928628 'in_uint16_be' 'int ()'
    | |   |-RecoveryExpr 0x121928700 <col:16> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x121928720 <col:19> 'int' lvalue Var 0x1219283f0 'tag' 'int'
    | `-CompoundStmt 0x121941948 <line:10:2, line:12:2>
    |   `-CallExpr 0x121941918 <line:11:3, col:18> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x1219418b8 <col:3> 'int ()' Function 0x121941800 'in_uint8' 'int ()'
    |     |-RecoveryExpr 0x1219418d8 <col:12> '<dependent type>' contains-errors lvalue
    |     `-DeclRefExpr 0x1219418f8 <col:15> 'int' lvalue Var 0x1219283f0 'tag' 'int'
    |-IfStmt 0x121941cb8 <line:14:2, line:18:2>
    | |-BinaryOperator 0x121941a00 <line:14:6, col:13> 'int' '!='
    | | |-ImplicitCastExpr 0x1219419d0 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x121941990 <col:6> 'int' lvalue Var 0x1219283f0 'tag' 'int'
    | | `-ImplicitCastExpr 0x1219419e8 <col:13> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x1219419b0 <col:13> 'int' lvalue ParmVar 0x121928170 'tagval' 'int'
    | `-CompoundStmt 0x121941ca0 <line:15:2, line:18:2>
    |   `-CallExpr 0x121941c08 <line:16:3, col:27> 'int'
    |     |-ImplicitCastExpr 0x121941bf0 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x121941b00 <col:3> 'int ()' Function 0x121941a48 'error' 'int ()'
    |     |-ImplicitCastExpr 0x121941c40 <col:9> 'char *' <ArrayToPointerDecay>
    |     | `-StringLiteral 0x121941b60 <col:9> 'char[4]' lvalue "STR"
    |     |-ImplicitCastExpr 0x121941c58 <col:16> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x121941b80 <col:16> 'int' lvalue ParmVar 0x121928170 'tagval' 'int'
    |     `-ImplicitCastExpr 0x121941c70 <col:24> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x121941ba0 <col:24> 'int' lvalue Var 0x1219283f0 'tag' 'int'
    |-CallExpr 0x121941d38 <line:20:2, col:17> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x121941cd8 <col:2> 'int ()' Function 0x121941800 'in_uint8' 'int ()'
    | |-RecoveryExpr 0x121941cf8 <col:11> '<dependent type>' contains-errors lvalue
    | `-DeclRefExpr 0x121941d18 <col:14> 'int' lvalue Var 0x121928470 'len' 'int'
    |-IfStmt 0x121942220 <line:22:2, line:30:13> has_else
    | |-BinaryOperator 0x121941dc0 <line:22:6, col:12> 'int' '&'
    | | |-ImplicitCastExpr 0x121941da8 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x121941d68 <col:6> 'int' lvalue Var 0x121928470 'len' 'int'
    | | `-IntegerLiteral 0x121941d88 <col:12> 'int' 128
    | |-CompoundStmt 0x121942150 <line:23:2, line:28:2>
    | | |-CompoundAssignOperator 0x121941e38 <line:24:3, col:11> 'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
    | | | |-DeclRefExpr 0x121941de0 <col:3> 'int' lvalue Var 0x121928470 'len' 'int'
    | | | `-UnaryOperator 0x121941e20 <col:10, col:11> 'int' prefix '~' cannot overflow
    | | |   `-IntegerLiteral 0x121941e00 <col:11> 'int' 128
    | | |-BinaryOperator 0x121941ed8 <line:25:3, col:13> 'int' '='
    | | | |-UnaryOperator 0x121941ea0 <col:3, col:4> 'int' lvalue prefix '*' cannot overflow
    | | | | `-ImplicitCastExpr 0x121941e88 <col:4> 'int *' <LValueToRValue>
    | | | |   `-DeclRefExpr 0x121941e68 <col:4> 'int *' lvalue ParmVar 0x121928228 'length' 'int *'
    | | | `-IntegerLiteral 0x121941eb8 <col:13> 'int' 0
    | | `-WhileStmt 0x121942130 <line:26:3, line:27:22>
    | |   |-UnaryOperator 0x121941f18 <line:26:10, col:13> 'int' postfix '--'
    | |   | `-DeclRefExpr 0x121941ef8 <col:10> 'int' lvalue Var 0x121928470 'len' 'int'
    | |   `-CallExpr 0x121942100 <line:27:4, col:22> '<dependent type>' contains-errors
    | |     |-DeclRefExpr 0x121942010 <col:4> 'int ()' Function 0x121941f58 'next_be' 'int ()'
    | |     |-RecoveryExpr 0x121942030 <col:12> '<dependent type>' contains-errors lvalue
    | |     `-UnaryOperator 0x1219420e8 <col:15, col:16> 'int' lvalue prefix '*' cannot overflow
    | |       `-ImplicitCastExpr 0x1219420d0 <col:16> 'int *' <LValueToRValue>
    | |         `-DeclRefExpr 0x121942050 <col:16> 'int *' lvalue ParmVar 0x121928228 'length' 'int *'
    | `-BinaryOperator 0x121942200 <line:30:3, col:13> 'int' '='
    |   |-UnaryOperator 0x1219421b0 <col:3, col:4> 'int' lvalue prefix '*' cannot overflow
    |   | `-ImplicitCastExpr 0x121942198 <col:4> 'int *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x121942178 <col:4> 'int *' lvalue ParmVar 0x121928228 'length' 'int *'
    |   `-ImplicitCastExpr 0x1219421e8 <col:13> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x1219421c8 <col:13> 'int' lvalue Var 0x121928470 'len' 'int'
    `-ReturnStmt 0x121942398 <line:32:2, col:18>
      `-CallExpr 0x121942370 <col:9, col:18> '<dependent type>' contains-errors
        |-DeclRefExpr 0x121942330 <col:9> 'int ()' Function 0x121942278 's_check' 'int ()'
        `-RecoveryExpr 0x121942350 <col:17> '<dependent type>' contains-errors lvalue
