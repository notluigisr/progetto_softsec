`-FunctionDecl 0x154128200  line:1:6 invalid OneHotComputeImpl 'void (const int)'
  |-ParmVarDecl 0x1541280f0 <col:24, <invalid sloc>> col:43 invalid 'const int'
  `-CompoundStmt 0x154142728 <col:57, line:32:1>
    |-DeclStmt 0x154128350 <line:5:3, col:26>
    | `-VarDecl 0x1541282c8 <col:3, col:25> col:7 used prefix_dim_size 'int' cinit
    |   `-IntegerLiteral 0x154128330 <col:25> 'int' 1
    |-ForStmt 0x1541286c0 <line:6:3, line:8:3>
    | |-DeclStmt 0x154128408 <line:6:8, col:17>
    | | `-VarDecl 0x154128380 <col:8, col:16> col:12 used i 'int' cinit
    | |   `-IntegerLiteral 0x1541283e8 <col:16> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x154128528 <col:19, col:34> 'int' contains-errors '<'
    | | |-DeclRefExpr 0x154128420 <col:19> 'int' lvalue Var 0x154128380 'i' 'int'
    | | `-CXXDependentScopeMemberExpr 0x1541284e0 <col:23, col:34> '<dependent type>' contains-errors lvalue .axis
    | |   `-RecoveryExpr 0x1541284c0 <col:23> '<dependent type>' contains-errors lvalue
    | |-UnaryOperator 0x154128568 <col:40, col:42> 'int' prefix '++'
    | | `-DeclRefExpr 0x154128548 <col:42> 'int' lvalue Var 0x154128380 'i' 'int'
    | `-CompoundStmt 0x1541286b0 <col:45, line:8:3>
    |-DeclStmt 0x154141a78 <line:9:3, col:80>
    | `-VarDecl 0x154128710 <col:3, col:65> col:13 used suffix_dim_size 'const int' cinit
    |   `-BinaryOperator 0x154141a58 <col:31, col:65> '<dependent type>' contains-errors '/'
    |     |-CallExpr 0x154141a30 <col:31, col:61> '<dependent type>' contains-errors
    |     | |-DeclRefExpr 0x1541418e0 <col:31> 'int ()' Function 0x154141828 'NumElements' 'int ()'
    |     | `-CXXDependentScopeMemberExpr 0x1541419e8 <col:43, col:54> '<dependent type>' contains-errors lvalue .indices
    |     |   `-RecoveryExpr 0x1541419c8 <col:43> '<dependent type>' contains-errors lvalue
    |     `-DeclRefExpr 0x154141988 <col:65> 'int' lvalue Var 0x1541282c8 'prefix_dim_size' 'int'
    |-DeclStmt 0x154141d58 <line:10:3, col:48>
    | `-VarDecl 0x154141aa8 <col:3, col:45> col:13 used depth 'const int' cinit
    |   `-UnaryOperator 0x154141d40 <col:21, col:45> '<dependent type>' contains-errors prefix '*' cannot overflow
    |     `-ImplicitCastExpr 0x154141d28 <col:22, col:45> '<dependent type>' contains-errors <LValueToRValue>
    |       `-CXXDependentScopeMemberExpr 0x154141ce0 <col:22, col:45> '<dependent type>' contains-errors lvalue .i32
    |         `-CXXDependentScopeMemberExpr 0x154141c98 <col:22, col:40> '<dependent type>' contains-errors lvalue ->data
    |           `-CXXDependentScopeMemberExpr 0x154141c50 <col:22, col:33> '<dependent type>' contains-errors lvalue .depth
    |             `-RecoveryExpr 0x154141c30 <col:22> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x154141ed0 <line:12:3, col:60>
    | `-VarDecl 0x154141d88 <col:3, col:11> col:11 invalid on_value 'const int'
    |-DeclStmt 0x154142048 <line:13:3, col:62>
    | `-VarDecl 0x154141f00 <col:3, col:11> col:11 invalid off_value 'const int'
    |-DeclStmt 0x1541421a8 <line:22:3, col:60>
    | `-VarDecl 0x154142140 <col:3, col:13> col:13 invalid indices 'const int *'
    `-ForStmt 0x1541426f0 <line:23:3, line:31:3>
      |-DeclStmt 0x154142260 <line:23:8, col:17>
      | `-VarDecl 0x1541421d8 <col:8, col:16> col:12 used i 'int' cinit
      |   `-IntegerLiteral 0x154142240 <col:16> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x1541422e8 <col:19, col:23> 'int' '<'
      | |-ImplicitCastExpr 0x1541422b8 <col:19> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x154142278 <col:19> 'int' lvalue Var 0x1541421d8 'i' 'int'
      | `-ImplicitCastExpr 0x1541422d0 <col:23> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x154142298 <col:23> 'int' lvalue Var 0x1541282c8 'prefix_dim_size' 'int'
      |-UnaryOperator 0x154142328 <col:40, col:42> 'int' prefix '++'
      | `-DeclRefExpr 0x154142308 <col:42> 'int' lvalue Var 0x1541421d8 'i' 'int'
      `-CompoundStmt 0x1541426d8 <col:45, line:31:3>
        `-ForStmt 0x1541426a0 <line:24:5, line:30:5>
          |-DeclStmt 0x1541423e0 <line:24:10, col:19>
          | `-VarDecl 0x154142358 <col:10, col:18> col:14 used j 'int' cinit
          |   `-IntegerLiteral 0x1541423c0 <col:18> 'int' 0
          |-<<<NULL>>>
          |-BinaryOperator 0x154142468 <col:21, col:25> 'int' contains-errors '<'
          | |-ImplicitCastExpr 0x154142438 <col:21> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x1541423f8 <col:21> 'int' lvalue Var 0x154142358 'j' 'int'
          | `-ImplicitCastExpr 0x154142450 <col:25> 'int' contains-errors <LValueToRValue>
          |   `-DeclRefExpr 0x154142418 <col:25> 'const int' contains-errors lvalue Var 0x154141aa8 'depth' 'const int'
          |-UnaryOperator 0x1541424a8 <col:32, col:34> 'int' prefix '++'
          | `-DeclRefExpr 0x154142488 <col:34> 'int' lvalue Var 0x154142358 'j' 'int'
          `-CompoundStmt 0x154142688 <col:37, line:30:5>
            `-ForStmt 0x154142650 <line:25:7, line:29:7>
              |-DeclStmt 0x154142560 <line:25:12, col:21>
              | `-VarDecl 0x1541424d8 <col:12, col:20> col:16 used k 'int' cinit
              |   `-IntegerLiteral 0x154142540 <col:20> 'int' 0
              |-<<<NULL>>>
              |-BinaryOperator 0x1541425e8 <col:23, col:27> 'int' contains-errors '<'
              | |-ImplicitCastExpr 0x1541425b8 <col:23> 'int' <LValueToRValue>
              | | `-DeclRefExpr 0x154142578 <col:23> 'int' lvalue Var 0x1541424d8 'k' 'int'
              | `-ImplicitCastExpr 0x1541425d0 <col:27> 'int' contains-errors <LValueToRValue>
              |   `-DeclRefExpr 0x154142598 <col:27> 'const int' contains-errors lvalue Var 0x154128710 'suffix_dim_size' 'const int'
              |-<<<NULL>>>
              `-CompoundStmt 0x154142640 <col:59, line:29:7>
