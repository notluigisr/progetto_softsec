`-FunctionDecl 0x136128318  line:1:1 invalid generate_common_name 'int (int *, int *, char *)'
  |-ParmVarDecl 0x136128128 <col:22, col:35> col:35 invalid cms 'int *'
  |-ParmVarDecl 0x1361281a8 <col:40, col:49> col:49 invalid der 'int *'
  |-ParmVarDecl 0x136128228 <col:54, col:60> col:60 used cn_str 'char *'
  `-CompoundStmt 0x1368088d0 <line:2:1, line:28:1>
    |-DeclStmt 0x136128458 <line:5:2, col:8>
    | `-VarDecl 0x1361283f0 <col:2, col:6> col:6 used rc 'int'
    |-BinaryOperator 0x136141c00 <line:7:2, col:63> 'int' contains-errors '='
    | |-DeclRefExpr 0x136128470 <col:2> 'int' lvalue Var 0x1361283f0 'rc' 'int'
    | `-CallExpr 0x1361287b8 <col:7, col:63> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x1361285f0 <col:7> 'int ()' Function 0x136128538 'generate_object_id' 'int ()'
    |   |-RecoveryExpr 0x136128610 <col:26> '<dependent type>' contains-errors lvalue
    |   |-UnaryOperator 0x136128780 <col:31, col:35> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | `-CXXDependentScopeMemberExpr 0x136128738 <col:32, col:35> '<dependent type>' contains-errors lvalue .oid
    |   |   `-RecoveryExpr 0x136128718 <col:32> '<dependent type>' contains-errors lvalue
    |   `-RecoveryExpr 0x136128798 <col:40> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x136141ce0 <line:8:2, line:9:10>
    | |-BinaryOperator 0x136141c78 <line:8:6, col:11> 'int' '<'
    | | |-ImplicitCastExpr 0x136141c60 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x136141c20 <col:6> 'int' lvalue Var 0x1361283f0 'rc' 'int'
    | | `-IntegerLiteral 0x136141c40 <col:11> 'int' 0
    | `-ReturnStmt 0x136141cd0 <line:9:3, col:10>
    |   `-ImplicitCastExpr 0x136141cb8 <col:10> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x136141c98 <col:10> 'int' lvalue Var 0x1361283f0 'rc' 'int'
    |-BinaryOperator 0x136141fe8 <line:10:2, col:46> 'int' contains-errors '='
    | |-DeclRefExpr 0x136141d00 <col:2> 'int' lvalue Var 0x1361283f0 'rc' 'int'
    | `-CallExpr 0x136141fb0 <col:7, col:46> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x136141e00 <col:7> 'int ()' Function 0x136141d48 'generate_string' 'int ()'
    |   |-RecoveryExpr 0x136141e20 <col:23> '<dependent type>' contains-errors lvalue
    |   |-UnaryOperator 0x136141f98 <col:28, col:32> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | `-CXXDependentScopeMemberExpr 0x136141f50 <col:29, col:32> '<dependent type>' contains-errors lvalue .string
    |   |   `-RecoveryExpr 0x136141f30 <col:29> '<dependent type>' contains-errors lvalue
    |   `-DeclRefExpr 0x136141eb8 <col:40> 'char *' lvalue ParmVar 0x136128228 'cn_str' 'char *'
    |-IfStmt 0x1361420c8 <line:11:2, line:12:10>
    | |-BinaryOperator 0x136142060 <line:11:6, col:11> 'int' '<'
    | | |-ImplicitCastExpr 0x136142048 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x136142008 <col:6> 'int' lvalue Var 0x1361283f0 'rc' 'int'
    | | `-IntegerLiteral 0x136142028 <col:11> 'int' 0
    | `-ReturnStmt 0x1361420b8 <line:12:3, col:10>
    |   `-ImplicitCastExpr 0x1361420a0 <col:10> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x136142080 <col:10> 'int' lvalue Var 0x1361283f0 'rc' 'int'
    |-DeclStmt 0x136142168 <line:14:2, col:11>
    | `-VarDecl 0x136142100 <col:2, col:8> col:8 used ret 'void *'
    |-BinaryOperator 0x136142518 <line:15:2, col:72> 'void *' contains-errors '='
    | |-DeclRefExpr 0x136142180 <col:2> 'void *' lvalue Var 0x136142100 'ret' 'void *'
    | `-CallExpr 0x1361424d8 <col:8, col:72> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x136142280 <col:8> 'int ()' Function 0x1361421c8 'SEC_ASN1EncodeItem' 'int ()'
    |   |-CXXDependentScopeMemberExpr 0x1361422c0 <col:27, col:32> '<dependent type>' contains-errors lvalue ->arena
    |   | `-RecoveryExpr 0x1361422a0 <col:27> '<dependent type>' contains-errors lvalue
    |   |-UnaryOperator 0x136142468 <col:39, col:40> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | `-RecoveryExpr 0x136142448 <col:40> '<dependent type>' contains-errors lvalue
    |   |-UnaryOperator 0x1361424a0 <col:49, col:50> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | `-RecoveryExpr 0x136142480 <col:50> '<dependent type>' contains-errors lvalue
    |   `-RecoveryExpr 0x1361424b8 <col:54> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x1361427c8 <line:16:2, line:17:26>
    | |-BinaryOperator 0x1361425b0 <line:16:6, col:13> 'int' contains-errors '=='
    | | |-DeclRefExpr 0x136142538 <col:6> 'void *' lvalue Var 0x136142100 'ret' 'void *'
    | | `-RecoveryExpr 0x136142590 <col:13> '<dependent type>' contains-errors lvalue
    | `-CallExpr 0x136142790 <line:17:3, col:26> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x1361426b0 <col:3> 'int ()' Function 0x1361425f8 'cnreterr' 'int ()'
    |   |-UnaryOperator 0x1361426f0 <col:12, col:13> 'int' prefix '-'
    |   | `-IntegerLiteral 0x1361426d0 <col:13> 'int' 1
    |   |-RecoveryExpr 0x136142708 <col:16> '<dependent type>' contains-errors lvalue
    |   `-StringLiteral 0x136142770 <col:21> 'char[4]' lvalue "STR"
    |-IfStmt 0x136142a20 <line:22:2, line:23:10>
    | |-BinaryOperator 0x1361429b8 <line:22:6, col:11> 'int' '<'
    | | |-ImplicitCastExpr 0x1361429a0 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x136142960 <col:6> 'int' lvalue Var 0x1361283f0 'rc' 'int'
    | | `-IntegerLiteral 0x136142980 <col:11> 'int' 0
    | `-ReturnStmt 0x136142a10 <line:23:3, col:10>
    |   `-ImplicitCastExpr 0x1361429f8 <col:10> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x1361429d8 <col:10> 'int' lvalue Var 0x1361283f0 'rc' 'int'
    |-IfStmt 0x136808880 <line:25:2, line:26:10>
    | |-BinaryOperator 0x136808818 <line:25:6, col:11> 'int' '<'
    | | |-ImplicitCastExpr 0x136808800 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x136142bc0 <col:6> 'int' lvalue Var 0x1361283f0 'rc' 'int'
    | | `-IntegerLiteral 0x136142be0 <col:11> 'int' 0
    | `-ReturnStmt 0x136808870 <line:26:3, col:10>
    |   `-ImplicitCastExpr 0x136808858 <col:10> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x136808838 <col:10> 'int' lvalue Var 0x1361283f0 'rc' 'int'
    `-ReturnStmt 0x1368088c0 <line:27:2, col:9>
      `-IntegerLiteral 0x1368088a0 <col:9> 'int' 0
