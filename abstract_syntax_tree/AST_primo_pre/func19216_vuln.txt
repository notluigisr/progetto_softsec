`-FunctionDecl 0x12d808958  line:1:1 invalid bgp_attr_flags_diagnose 'int (struct peer *, const int, int, int)'
  |-ParmVarDecl 0x12d128648 <line:3:3, col:17> col:17 used peer 'struct peer *'
  |-ParmVarDecl 0x12d1286e0 <line:4:3, col:18> col:18 invalid attr_code 'const int'
  |-ParmVarDecl 0x12d128760 <line:5:3, col:12> col:12 referenced invalid desired_flags 'int'
  |-ParmVarDecl 0x12d808800 <line:6:3, col:12> col:12 referenced invalid real_flags 'int'
  `-CompoundStmt 0x12d809870 <line:8:1, line:27:1>
    |-DeclStmt 0x12d808b60 <line:9:3, col:21>
    | |-VarDecl 0x12d808a30 <col:3, col:17> col:10 used seen 'char' cinit
    | | `-ImplicitCastExpr 0x12d808ab8 <col:17> 'char' <IntegralCast>
    | |   `-IntegerLiteral 0x12d808a98 <col:17> 'int' 0
    | `-VarDecl 0x12d808ae0 <col:3, col:20> col:20 used i 'char'
    |-CompoundAssignOperator 0x12d808c88 <line:11:3, col:21> '<dependent type>' contains-errors '&=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    | |-RecoveryExpr 0x12d808b98 <col:3> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x12d808b78 <col:3> 'int' lvalue ParmVar 0x12d128760 'desired_flags' 'int'
    | `-UnaryOperator 0x12d808c70 <col:20, col:21> '<dependent type>' contains-errors prefix '~' cannot overflow
    |   `-ImplicitCastExpr 0x12d808c58 <col:21> '<dependent type>' contains-errors <LValueToRValue>
    |     `-RecoveryExpr 0x12d808c38 <col:21> '<dependent type>' contains-errors lvalue
    |-CompoundAssignOperator 0x12d808dc8 <line:12:3, col:18> '<dependent type>' contains-errors '&=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
    | |-RecoveryExpr 0x12d808cd8 <col:3> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x12d808cb8 <col:3> 'int' lvalue ParmVar 0x12d808800 'real_flags' 'int'
    | `-UnaryOperator 0x12d808db0 <col:17, col:18> '<dependent type>' contains-errors prefix '~' cannot overflow
    |   `-ImplicitCastExpr 0x12d808d98 <col:18> '<dependent type>' contains-errors <LValueToRValue>
    |     `-RecoveryExpr 0x12d808d78 <col:18> '<dependent type>' contains-errors lvalue
    |-ForStmt 0x12d809668 <line:13:3, line:25:5>
    | |-BinaryOperator 0x12d808e50 <line:13:8, col:12> 'char' '='
    | | |-DeclRefExpr 0x12d808df8 <col:8> 'char' lvalue Var 0x12d808ae0 'i' 'char'
    | | `-ImplicitCastExpr 0x12d808e38 <col:12> 'char' <IntegralCast>
    | |   `-IntegerLiteral 0x12d808e18 <col:12> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x12d808ee0 <col:15, col:20> 'int' '<='
    | | |-ImplicitCastExpr 0x12d808ec8 <col:15> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x12d808eb0 <col:15> 'char' <LValueToRValue>
    | | |   `-DeclRefExpr 0x12d808e70 <col:15> 'char' lvalue Var 0x12d808ae0 'i' 'char'
    | | `-IntegerLiteral 0x12d808e90 <col:20> 'int' 2
    | |-UnaryOperator 0x12d808f20 <col:23, col:24> 'char' postfix '++' cannot overflow
    | | `-DeclRefExpr 0x12d808f00 <col:23> 'char' lvalue Var 0x12d808ae0 'i' 'char'
    | `-IfStmt 0x12d809648 <line:14:5, line:25:5>
    |   |-RecoveryExpr 0x12d809180 <line:16:7, line:17:54> '_Bool' contains-errors
    |   `-CompoundStmt 0x12d809630 <line:19:5, line:25:5>
    |     `-BinaryOperator 0x12d809610 <line:24:7, col:14> 'char' '='
    |       |-DeclRefExpr 0x12d8095b8 <col:7> 'char' lvalue Var 0x12d808a30 'seen' 'char'
    |       `-ImplicitCastExpr 0x12d8095f8 <col:14> 'char' <IntegralCast>
    |         `-IntegerLiteral 0x12d8095d8 <col:14> 'int' 1
    `-CallExpr 0x12d809818 <line:26:3, col:15> 'int'
      |-ImplicitCastExpr 0x12d809800 <col:3> 'int (*)()' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x12d809780 <col:3> 'int ()' Function 0x12d8096c8 'assert' 'int ()'
      `-ImplicitCastExpr 0x12d809858 <col:11> 'int' <IntegralCast>
        `-ImplicitCastExpr 0x12d809840 <col:11> 'char' <LValueToRValue>
          `-DeclRefExpr 0x12d8097a0 <col:11> 'char' lvalue Var 0x12d808a30 'seen' 'char'
