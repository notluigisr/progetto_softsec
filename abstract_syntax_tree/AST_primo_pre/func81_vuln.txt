`-FunctionDecl 0x1531289c8  line:1:1 invalid htmlParseComment 'int (int)'
  |-ParmVarDecl 0x1531288f0 <col:18, col:36> col:36 referenced invalid ctxt 'int'
  `-CompoundStmt 0x15380c1e8 <col:42, line:72:1>
    |-DeclStmt 0x153128b28 <line:3:5, col:12>
    | `-VarDecl 0x153128ac0 <col:5, col:9> col:9 used len 'int'
    |-DeclStmt 0x153128bf8 <line:4:5, col:39>
    | `-VarDecl 0x153128b58 <col:5, col:16> col:9 used size 'int' cinit
    |   `-RecoveryExpr 0x153128bd8 <col:16> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x153128d28 <line:5:5, col:14>
    | |-VarDecl 0x153128c28 <col:5, col:9> col:9 used q 'int'
    | `-VarDecl 0x153128ca8 <col:5, col:12> col:12 used ql 'int'
    |-DeclStmt 0x153128e58 <line:6:5, col:14>
    | |-VarDecl 0x153128d58 <col:5, col:9> col:9 used r 'int'
    | `-VarDecl 0x153128dd8 <col:5, col:12> col:12 used rl 'int'
    |-DeclStmt 0x153128f88 <line:7:5, col:15>
    | |-VarDecl 0x153128e88 <col:5, col:9> col:9 used cur 'int'
    | `-VarDecl 0x153128f08 <col:5, col:14> col:14 used l 'int'
    |-IfStmt 0x153809648 <line:11:5, line:12:45>
    | |-RecoveryExpr 0x153809618 <line:11:9, line:12:42> '_Bool' contains-errors
    | `-ReturnStmt 0x153809638 <col:45>
    |-BinaryOperator 0x1538097b8 <line:15:5, col:21> '<dependent type>' contains-errors '='
    | |-CXXDependentScopeMemberExpr 0x153809718 <col:5, col:11> '<dependent type>' contains-errors lvalue ->instate
    | | `-RecoveryExpr 0x1538096f0 <col:5> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x1538096d0 <col:5> 'int' lvalue ParmVar 0x1531288f0 'ctxt' 'int'
    | `-RecoveryExpr 0x153809798 <col:21> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x153809910 <line:17:5, col:11> 'int'
    | |-ImplicitCastExpr 0x1538098f8 <col:5> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x1538098b8 <col:5> 'int ()' Function 0x153809800 'SKIP' 'int ()'
    | `-IntegerLiteral 0x1538098d8 <col:10> 'int' 4
    |-IfStmt 0x153809cf0 <line:19:5, line:23:5>
    | |-BinaryOperator 0x1538099e0 <line:19:9, col:16> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x1538099a0 <col:9> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x1538099c0 <col:16> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x153809cc8 <col:22, line:23:5>
    |   |-CallExpr 0x153809b80 <line:20:9, col:34> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x153809ae0 <col:9> 'int ()' Function 0x153809a28 'htmlErrMemory' 'int ()'
    |   | |-RecoveryExpr 0x153809b00 <col:23> '<dependent type>' contains-errors lvalue
    |   | `-StringLiteral 0x153809b60 <col:29> 'char[4]' lvalue "STR"
    |   |-BinaryOperator 0x153809c98 <line:21:2, col:18> '<dependent type>' contains-errors '='
    |   | |-CXXDependentScopeMemberExpr 0x153809bf8 <col:2, col:8> '<dependent type>' contains-errors lvalue ->instate
    |   | | `-RecoveryExpr 0x153809bd0 <col:2> '<dependent type>' contains-errors lvalue
    |   | |   `-DeclRefExpr 0x153809bb0 <col:2> 'int' lvalue ParmVar 0x1531288f0 'ctxt' 'int'
    |   | `-RecoveryExpr 0x153809c78 <col:18> '<dependent type>' contains-errors lvalue
    |   `-ReturnStmt 0x153809cb8 <line:22:2>
    |-BinaryOperator 0x153809ea8 <line:24:5, col:20> 'int' '='
    | |-DeclRefExpr 0x153809d10 <col:5> 'int' lvalue Var 0x153128c28 'q' 'int'
    | `-CallExpr 0x153809e68 <col:9, col:20> 'int'
    |   |-ImplicitCastExpr 0x153809e50 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x153809e10 <col:9> 'int ()' Function 0x153809d58 'CUR_CHAR' 'int ()'
    |   `-ImplicitCastExpr 0x153809e90 <col:18> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x153809e30 <col:18> 'int' lvalue Var 0x153128ca8 'ql' 'int'
    |-CallExpr 0x15380a000 <line:25:5, col:13> 'int'
    | |-ImplicitCastExpr 0x153809fe8 <col:5> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x153809fa8 <col:5> 'int ()' Function 0x153809ef0 'NEXTL' 'int ()'
    | `-ImplicitCastExpr 0x15380a028 <col:11> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x153809fc8 <col:11> 'int' lvalue Var 0x153128ca8 'ql' 'int'
    |-BinaryOperator 0x15380a0f8 <line:26:5, col:20> 'int' '='
    | |-DeclRefExpr 0x15380a040 <col:5> 'int' lvalue Var 0x153128d58 'r' 'int'
    | `-CallExpr 0x15380a0b8 <col:9, col:20> 'int'
    |   |-ImplicitCastExpr 0x15380a0a0 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x15380a060 <col:9> 'int ()' Function 0x153809d58 'CUR_CHAR' 'int ()'
    |   `-ImplicitCastExpr 0x15380a0e0 <col:18> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x15380a080 <col:18> 'int' lvalue Var 0x153128dd8 'rl' 'int'
    |-CallExpr 0x15380a170 <line:27:5, col:13> 'int'
    | |-ImplicitCastExpr 0x15380a158 <col:5> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x15380a118 <col:5> 'int ()' Function 0x153809ef0 'NEXTL' 'int ()'
    | `-ImplicitCastExpr 0x15380a198 <col:11> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x15380a138 <col:11> 'int' lvalue Var 0x153128dd8 'rl' 'int'
    |-BinaryOperator 0x15380ac78 <line:28:5, col:21> 'int' '='
    | |-DeclRefExpr 0x15380a1b0 <col:5> 'int' lvalue Var 0x153128e88 'cur' 'int'
    | `-CallExpr 0x15380ac38 <col:11, col:21> 'int'
    |   |-ImplicitCastExpr 0x15380ac20 <col:11> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x15380a1d0 <col:11> 'int ()' Function 0x153809d58 'CUR_CHAR' 'int ()'
    |   `-ImplicitCastExpr 0x15380ac60 <col:20> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x15380ac00 <col:20> 'int' lvalue Var 0x153128f08 'l' 'int'
    |-BinaryOperator 0x15380acd8 <line:29:5, col:11> 'int' '='
    | |-DeclRefExpr 0x15380ac98 <col:5> 'int' lvalue Var 0x153128ac0 'len' 'int'
    | `-IntegerLiteral 0x15380acb8 <col:11> 'int' 0
    |-WhileStmt 0x15380bb38 <line:30:5, line:58:5>
    | |-BinaryOperator 0x15380b080 <line:30:12, line:32:30> 'int' '&&'
    | | |-CallExpr 0x15380ae30 <line:30:12, col:23> 'int'
    | | | |-ImplicitCastExpr 0x15380ae18 <col:12> 'int (*)()' <FunctionToPointerDecay>
    | | | | `-DeclRefExpr 0x15380add8 <col:12> 'int ()' Function 0x15380ad20 'IS_CHAR' 'int ()'
    | | | `-ImplicitCastExpr 0x15380ae58 <col:20> 'int' <LValueToRValue>
    | | |   `-DeclRefExpr 0x15380adf8 <col:20> 'int' lvalue Var 0x153128e88 'cur' 'int'
    | | `-ParenExpr 0x15380b060 <line:31:12, line:32:30> 'int'
    | |   `-BinaryOperator 0x15380b040 <line:31:13, line:32:29> 'int' '||'
    | |     |-BinaryOperator 0x15380af90 <line:31:13, line:32:15> 'int' '||'
    | |     | |-ParenExpr 0x15380aee0 <line:31:13, col:24> 'int'
    | |     | | `-BinaryOperator 0x15380aec0 <col:14, col:21> 'int' '!='
    | |     | |   |-ImplicitCastExpr 0x15380aea8 <col:14> 'int' <LValueToRValue>
    | |     | |   | `-DeclRefExpr 0x15380ae70 <col:14> 'int' lvalue Var 0x153128e88 'cur' 'int'
    | |     | |   `-CharacterLiteral 0x15380ae90 <col:21> 'int' 62
    | |     | `-ParenExpr 0x15380af70 <line:32:6, col:15> 'int'
    | |     |   `-BinaryOperator 0x15380af50 <col:7, col:12> 'int' '!='
    | |     |     |-ImplicitCastExpr 0x15380af38 <col:7> 'int' <LValueToRValue>
    | |     |     | `-DeclRefExpr 0x15380af00 <col:7> 'int' lvalue Var 0x153128d58 'r' 'int'
    | |     |     `-CharacterLiteral 0x15380af20 <col:12> 'int' 45
    | |     `-ParenExpr 0x15380b020 <col:20, col:29> 'int'
    | |       `-BinaryOperator 0x15380b000 <col:21, col:26> 'int' '!='
    | |         |-ImplicitCastExpr 0x15380afe8 <col:21> 'int' <LValueToRValue>
    | |         | `-DeclRefExpr 0x15380afb0 <col:21> 'int' lvalue Var 0x153128c28 'q' 'int'
    | |         `-CharacterLiteral 0x15380afd0 <col:26> 'int' 45
    | `-CompoundStmt 0x15380bae8 <col:33, line:58:5>
    |   |-IfStmt 0x15380b490 <line:33:2, line:45:2>
    |   | |-BinaryOperator 0x15380b150 <line:33:6, col:17> 'int' contains-errors '>='
    |   | | |-BinaryOperator 0x15380b0f8 <col:6, col:12> 'int' '+'
    |   | | | |-ImplicitCastExpr 0x15380b0e0 <col:6> 'int' <LValueToRValue>
    |   | | | | `-DeclRefExpr 0x15380b0a0 <col:6> 'int' lvalue Var 0x153128ac0 'len' 'int'
    |   | | | `-IntegerLiteral 0x15380b0c0 <col:12> 'int' 5
    |   | | `-ImplicitCastExpr 0x15380b138 <col:17> 'int' contains-errors <LValueToRValue>
    |   | |   `-DeclRefExpr 0x15380b118 <col:17> 'int' contains-errors lvalue Var 0x153128b58 'size' 'int'
    |   | `-CompoundStmt 0x15380b470 <col:23, line:45:2>
    |   |   |-CompoundAssignOperator 0x15380b1b0 <line:36:6, col:14> 'int' contains-errors '*=' ComputeLHSTy='int' ComputeResultTy='int'
    |   |   | |-DeclRefExpr 0x15380b170 <col:6> 'int' contains-errors lvalue Var 0x153128b58 'size' 'int'
    |   |   | `-IntegerLiteral 0x15380b190 <col:14> 'int' 2
    |   |   `-IfStmt 0x15380b450 <line:38:6, line:43:6>
    |   |     |-RecoveryExpr 0x15380b1e0 <line:38:10, col:17> '_Bool' contains-errors
    |   |     `-CompoundStmt 0x15380b430 <col:23, line:43:6>
    |   |       |-CallExpr 0x15380b360 <line:40:10, col:35> '<dependent type>' contains-errors
    |   |       | |-DeclRefExpr 0x15380b300 <col:10> 'int ()' Function 0x153809a28 'htmlErrMemory' 'int ()'
    |   |       | |-RecoveryExpr 0x15380b320 <col:24> '<dependent type>' contains-errors lvalue
    |   |       | `-StringLiteral 0x15380b340 <col:30> 'char[4]' lvalue "STR"
    |   |       `-ReturnStmt 0x15380b420 <line:42:3>
    |   |-BinaryOperator 0x15380b668 <line:47:2, col:6> 'int' '='
    |   | |-DeclRefExpr 0x15380b610 <col:2> 'int' lvalue Var 0x153128c28 'q' 'int'
    |   | `-ImplicitCastExpr 0x15380b650 <col:6> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x15380b630 <col:6> 'int' lvalue Var 0x153128d58 'r' 'int'
    |   |-BinaryOperator 0x15380b6e0 <line:48:2, col:7> 'int' '='
    |   | |-DeclRefExpr 0x15380b688 <col:2> 'int' lvalue Var 0x153128ca8 'ql' 'int'
    |   | `-ImplicitCastExpr 0x15380b6c8 <col:7> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x15380b6a8 <col:7> 'int' lvalue Var 0x153128dd8 'rl' 'int'
    |   |-BinaryOperator 0x15380b758 <line:49:2, col:6> 'int' '='
    |   | |-DeclRefExpr 0x15380b700 <col:2> 'int' lvalue Var 0x153128d58 'r' 'int'
    |   | `-ImplicitCastExpr 0x15380b740 <col:6> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x15380b720 <col:6> 'int' lvalue Var 0x153128e88 'cur' 'int'
    |   |-BinaryOperator 0x15380b7d0 <line:50:2, col:7> 'int' '='
    |   | |-DeclRefExpr 0x15380b778 <col:2> 'int' lvalue Var 0x153128dd8 'rl' 'int'
    |   | `-ImplicitCastExpr 0x15380b7b8 <col:7> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x15380b798 <col:7> 'int' lvalue Var 0x153128f08 'l' 'int'
    |   |-CallExpr 0x15380b848 <line:51:2, col:9> 'int'
    |   | |-ImplicitCastExpr 0x15380b830 <col:2> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x15380b7f0 <col:2> 'int ()' Function 0x153809ef0 'NEXTL' 'int ()'
    |   | `-ImplicitCastExpr 0x15380b870 <col:8> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x15380b810 <col:8> 'int' lvalue Var 0x153128f08 'l' 'int'
    |   |-BinaryOperator 0x15380b940 <line:52:2, col:18> 'int' '='
    |   | |-DeclRefExpr 0x15380b888 <col:2> 'int' lvalue Var 0x153128e88 'cur' 'int'
    |   | `-CallExpr 0x15380b900 <col:8, col:18> 'int'
    |   |   |-ImplicitCastExpr 0x15380b8e8 <col:8> 'int (*)()' <FunctionToPointerDecay>
    |   |   | `-DeclRefExpr 0x15380b8a8 <col:8> 'int ()' Function 0x153809d58 'CUR_CHAR' 'int ()'
    |   |   `-ImplicitCastExpr 0x15380b928 <col:17> 'int' <LValueToRValue>
    |   |     `-DeclRefExpr 0x15380b8c8 <col:17> 'int' lvalue Var 0x153128f08 'l' 'int'
    |   `-IfStmt 0x15380bac8 <line:53:2, line:57:2>
    |     |-BinaryOperator 0x15380b9b8 <line:53:6, col:13> 'int' '=='
    |     | |-ImplicitCastExpr 0x15380b9a0 <col:6> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x15380b960 <col:6> 'int' lvalue Var 0x153128e88 'cur' 'int'
    |     | `-IntegerLiteral 0x15380b980 <col:13> 'int' 0
    |     `-CompoundStmt 0x15380bab0 <col:16, line:57:2>
    |       `-BinaryOperator 0x15380ba90 <line:56:6, col:22> 'int' '='
    |         |-DeclRefExpr 0x15380b9d8 <col:6> 'int' lvalue Var 0x153128e88 'cur' 'int'
    |         `-CallExpr 0x15380ba50 <col:12, col:22> 'int'
    |           |-ImplicitCastExpr 0x15380ba38 <col:12> 'int (*)()' <FunctionToPointerDecay>
    |           | `-DeclRefExpr 0x15380b9f8 <col:12> 'int ()' Function 0x153809d58 'CUR_CHAR' 'int ()'
    |           `-ImplicitCastExpr 0x15380ba78 <col:21> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x15380ba18 <col:21> 'int' lvalue Var 0x153128f08 'l' 'int'
    `-IfStmt 0x15380c128 <line:60:5, line:70:5> has_else
      |-UnaryOperator 0x15380bc40 <line:60:9, col:21> 'int' prefix '!' cannot overflow
      | `-CallExpr 0x15380bc00 <col:10, col:21> 'int'
      |   |-ImplicitCastExpr 0x15380bbd8 <col:10> 'int (*)()' <FunctionToPointerDecay>
      |   | `-DeclRefExpr 0x15380bb98 <col:10> 'int ()' Function 0x15380ad20 'IS_CHAR' 'int ()'
      |   `-ImplicitCastExpr 0x15380bc28 <col:18> 'int' <LValueToRValue>
      |     `-DeclRefExpr 0x15380bbb8 <col:18> 'int' lvalue Var 0x153128e88 'cur' 'int'
      |-CompoundStmt 0x15380bdb8 <col:24, line:64:5>
      `-CompoundStmt 0x15380c118 <col:12, line:70:5>
