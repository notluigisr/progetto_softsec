`-FunctionDecl 0x12909e4e8  line:1:13 conv_jistoeuc 'int (char *, int, const char *)' static
  |-ParmVarDecl 0x12909e2f0 <col:27, col:34> col:34 used outbuf 'char *'
  |-ParmVarDecl 0x12909e370 <col:42, col:47> col:47 outlen 'int'
  |-ParmVarDecl 0x12909e3f0 <col:55, col:68> col:68 used inbuf 'const char *'
  `-CompoundStmt 0x1290ba680 <line:2:1, line:69:1>
    |-DeclStmt 0x12909e6a8 <line:3:2, col:26>
    | `-VarDecl 0x12909e608 <col:2, col:21> col:16 used in 'const char *' cinit
    |   `-ImplicitCastExpr 0x12909e690 <col:21> 'const char *' <LValueToRValue>
    |     `-DeclRefExpr 0x12909e670 <col:21> 'const char *' lvalue ParmVar 0x12909e3f0 'inbuf' 'const char *'
    |-DeclStmt 0x12909e778 <line:4:2, col:22>
    | `-VarDecl 0x12909e6d8 <col:2, col:16> col:10 used out 'char *' cinit
    |   `-ImplicitCastExpr 0x12909e760 <col:16> 'char *' <LValueToRValue>
    |     `-DeclRefExpr 0x12909e740 <col:16> 'char *' lvalue ParmVar 0x12909e2f0 'outbuf' 'char *'
    |-WhileStmt 0x1290ba590 <line:7:2, line:65:2>
    | |-BinaryOperator 0x12909e828 <line:7:9, col:16> 'int' '!='
    | | |-ImplicitCastExpr 0x12909e810 <col:9, col:10> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x12909e7f8 <col:9, col:10> 'char' <LValueToRValue>
    | | |   `-UnaryOperator 0x12909e7c8 <col:9, col:10> 'const char' lvalue prefix '*' cannot overflow
    | | |     `-ImplicitCastExpr 0x12909e7b0 <col:10> 'const char *' <LValueToRValue>
    | | |       `-DeclRefExpr 0x12909e790 <col:10> 'const char *' lvalue Var 0x12909e608 'in' 'const char *'
    | | `-CharacterLiteral 0x12909e7e0 <col:16> 'int' 0
    | `-CompoundStmt 0x1290ba578 <col:22, line:65:2>
    |   `-IfStmt 0x1290ba548 <line:8:3, line:64:3> has_else
    |     |-BinaryOperator 0x12909e950 <line:8:7, col:14> 'int' contains-errors '=='
    |     | |-UnaryOperator 0x12909e918 <col:7, col:8> 'const char' lvalue prefix '*' cannot overflow
    |     | | `-ImplicitCastExpr 0x12909e900 <col:8> 'const char *' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x12909e848 <col:8> 'const char *' lvalue Var 0x12909e608 'in' 'const char *'
    |     | `-RecoveryExpr 0x12909e930 <col:14> '<dependent type>' contains-errors lvalue
    |     |-CompoundStmt 0x1290b9758 <col:19, line:37:3>
    |     | |-UnaryOperator 0x12909e990 <line:9:4, col:6> 'const char *' postfix '++'
    |     | | `-DeclRefExpr 0x12909e970 <col:4> 'const char *' lvalue Var 0x12909e608 'in' 'const char *'
    |     | `-IfStmt 0x1290b9728 <line:10:4, line:36:4> has_else
    |     |   |-BinaryOperator 0x1290b8a48 <line:10:8, col:15> 'int' '=='
    |     |   | |-ImplicitCastExpr 0x1290b8a30 <col:8, col:9> 'int' <IntegralCast>
    |     |   | | `-ImplicitCastExpr 0x1290b8a18 <col:8, col:9> 'char' <LValueToRValue>
    |     |   | |   `-UnaryOperator 0x12909e9e0 <col:8, col:9> 'const char' lvalue prefix '*' cannot overflow
    |     |   | |     `-ImplicitCastExpr 0x12909e9c8 <col:9> 'const char *' <LValueToRValue>
    |     |   | |       `-DeclRefExpr 0x12909e9a8 <col:9> 'const char *' lvalue Var 0x12909e608 'in' 'const char *'
    |     |   | `-CharacterLiteral 0x1290b8a00 <col:15> 'int' 36
    |     |   |-CompoundStmt 0x1290b90d0 <col:20, line:22:4>
    |     |   | `-IfStmt 0x1290b90a0 <line:11:5, line:21:5> has_else
    |     |   |   |-BinaryOperator 0x1290b8c98 <line:11:9, col:42> 'int' '||'
    |     |   |   | |-BinaryOperator 0x1290b8b60 <col:9, col:22> 'int' '=='
    |     |   |   | | |-ImplicitCastExpr 0x1290b8b48 <col:9, col:17> 'int' <IntegralCast>
    |     |   |   | | | `-ImplicitCastExpr 0x1290b8b30 <col:9, col:17> 'char' <LValueToRValue>
    |     |   |   | | |   `-UnaryOperator 0x1290b8b00 <col:9, col:17> 'const char' lvalue prefix '*' cannot overflow
    |     |   |   | | |     `-ParenExpr 0x1290b8ae0 <col:10, col:17> 'const char *'
    |     |   |   | | |       `-BinaryOperator 0x1290b8ac0 <col:11, col:16> 'const char *' '+'
    |     |   |   | | |         |-ImplicitCastExpr 0x1290b8aa8 <col:11> 'const char *' <LValueToRValue>
    |     |   |   | | |         | `-DeclRefExpr 0x1290b8a68 <col:11> 'const char *' lvalue Var 0x12909e608 'in' 'const char *'
    |     |   |   | | |         `-IntegerLiteral 0x1290b8a88 <col:16> 'int' 1
    |     |   |   | | `-CharacterLiteral 0x1290b8b18 <col:22> 'int' 64
    |     |   |   | `-BinaryOperator 0x1290b8c78 <col:29, col:42> 'int' '=='
    |     |   |   |   |-ImplicitCastExpr 0x1290b8c60 <col:29, col:37> 'int' <IntegralCast>
    |     |   |   |   | `-ImplicitCastExpr 0x1290b8c48 <col:29, col:37> 'char' <LValueToRValue>
    |     |   |   |   |   `-UnaryOperator 0x1290b8c18 <col:29, col:37> 'const char' lvalue prefix '*' cannot overflow
    |     |   |   |   |     `-ParenExpr 0x1290b8bf8 <col:30, col:37> 'const char *'
    |     |   |   |   |       `-BinaryOperator 0x1290b8bd8 <col:31, col:36> 'const char *' '+'
    |     |   |   |   |         |-ImplicitCastExpr 0x1290b8bc0 <col:31> 'const char *' <LValueToRValue>
    |     |   |   |   |         | `-DeclRefExpr 0x1290b8b80 <col:31> 'const char *' lvalue Var 0x12909e608 'in' 'const char *'
    |     |   |   |   |         `-IntegerLiteral 0x1290b8ba0 <col:36> 'int' 1
    |     |   |   |   `-CharacterLiteral 0x1290b8c30 <col:42> 'int' 66
    |     |   |   |-CompoundStmt 0x1290b8d40 <col:47, line:14:5>
    |     |   |   | `-CompoundAssignOperator 0x1290b8d10 <line:13:6, col:12> 'const char *' '+=' ComputeLHSTy='const char *' ComputeResultTy='const char *'
    |     |   |   |   |-DeclRefExpr 0x1290b8cd0 <col:6> 'const char *' lvalue Var 0x12909e608 'in' 'const char *'
    |     |   |   |   `-IntegerLiteral 0x1290b8cf0 <col:12> 'int' 2
    |     |   |   `-IfStmt 0x1290b9070 <line:14:12, line:21:5> has_else
    |     |   |     |-BinaryOperator 0x1290b8f88 <line:14:16, line:15:22> 'int' '&&'
    |     |   |     | |-BinaryOperator 0x1290b8e50 <line:14:16, col:29> 'int' '=='
    |     |   |     | | |-ImplicitCastExpr 0x1290b8e38 <col:16, col:24> 'int' <IntegralCast>
    |     |   |     | | | `-ImplicitCastExpr 0x1290b8e20 <col:16, col:24> 'char' <LValueToRValue>
    |     |   |     | | |   `-UnaryOperator 0x1290b8df0 <col:16, col:24> 'const char' lvalue prefix '*' cannot overflow
    |     |   |     | | |     `-ParenExpr 0x1290b8dd0 <col:17, col:24> 'const char *'
    |     |   |     | | |       `-BinaryOperator 0x1290b8db0 <col:18, col:23> 'const char *' '+'
    |     |   |     | | |         |-ImplicitCastExpr 0x1290b8d98 <col:18> 'const char *' <LValueToRValue>
    |     |   |     | | |         | `-DeclRefExpr 0x1290b8d58 <col:18> 'const char *' lvalue Var 0x12909e608 'in' 'const char *'
    |     |   |     | | |         `-IntegerLiteral 0x1290b8d78 <col:23> 'int' 1
    |     |   |     | | `-CharacterLiteral 0x1290b8e08 <col:29> 'int' 40
    |     |   |     | `-BinaryOperator 0x1290b8f68 <line:15:9, col:22> 'int' '=='
    |     |   |     |   |-ImplicitCastExpr 0x1290b8f50 <col:9, col:17> 'int' <IntegralCast>
    |     |   |     |   | `-ImplicitCastExpr 0x1290b8f38 <col:9, col:17> 'char' <LValueToRValue>
    |     |   |     |   |   `-UnaryOperator 0x1290b8f08 <col:9, col:17> 'const char' lvalue prefix '*' cannot overflow
    |     |   |     |   |     `-ParenExpr 0x1290b8ee8 <col:10, col:17> 'const char *'
    |     |   |     |   |       `-BinaryOperator 0x1290b8ec8 <col:11, col:16> 'const char *' '+'
    |     |   |     |   |         |-ImplicitCastExpr 0x1290b8eb0 <col:11> 'const char *' <LValueToRValue>
    |     |   |     |   |         | `-DeclRefExpr 0x1290b8e70 <col:11> 'const char *' lvalue Var 0x12909e608 'in' 'const char *'
    |     |   |     |   |         `-IntegerLiteral 0x1290b8e90 <col:16> 'int' 2
    |     |   |     |   `-CharacterLiteral 0x1290b8f20 <col:22> 'int' 68
    |     |   |     |-CompoundStmt 0x1290b9030 <col:27, line:18:5>
    |     |   |     | `-CompoundAssignOperator 0x1290b9000 <line:17:6, col:12> 'const char *' '+=' ComputeLHSTy='const char *' ComputeResultTy='const char *'
    |     |   |     |   |-DeclRefExpr 0x1290b8fc0 <col:6> 'const char *' lvalue Var 0x12909e608 'in' 'const char *'
    |     |   |     |   `-IntegerLiteral 0x1290b8fe0 <col:12> 'int' 3
    |     |   |     `-CompoundStmt 0x1290b9060 <line:18:12, line:21:5>
    |     |   `-IfStmt 0x1290b96f8 <line:22:11, line:36:4> has_else
    |     |     |-BinaryOperator 0x1290b9180 <line:22:15, col:22> 'int' '=='
    |     |     | |-ImplicitCastExpr 0x1290b9168 <col:15, col:16> 'int' <IntegralCast>
    |     |     | | `-ImplicitCastExpr 0x1290b9150 <col:15, col:16> 'char' <LValueToRValue>
    |     |     | |   `-UnaryOperator 0x1290b9120 <col:15, col:16> 'const char' lvalue prefix '*' cannot overflow
    |     |     | |     `-ImplicitCastExpr 0x1290b9108 <col:16> 'const char *' <LValueToRValue>
    |     |     | |       `-DeclRefExpr 0x1290b90e8 <col:16> 'const char *' lvalue Var 0x12909e608 'in' 'const char *'
    |     |     | `-CharacterLiteral 0x1290b9138 <col:22> 'int' 40
    |     |     |-CompoundStmt 0x1290b96d0 <col:27, line:33:4>
    |     |     | `-IfStmt 0x1290b96a0 <line:23:5, line:32:5> has_else
    |     |     |   |-BinaryOperator 0x1290b93d0 <line:23:9, col:42> 'int' '||'
    |     |     |   | |-BinaryOperator 0x1290b9298 <col:9, col:22> 'int' '=='
    |     |     |   | | |-ImplicitCastExpr 0x1290b9280 <col:9, col:17> 'int' <IntegralCast>
    |     |     |   | | | `-ImplicitCastExpr 0x1290b9268 <col:9, col:17> 'char' <LValueToRValue>
    |     |     |   | | |   `-UnaryOperator 0x1290b9238 <col:9, col:17> 'const char' lvalue prefix '*' cannot overflow
    |     |     |   | | |     `-ParenExpr 0x1290b9218 <col:10, col:17> 'const char *'
    |     |     |   | | |       `-BinaryOperator 0x1290b91f8 <col:11, col:16> 'const char *' '+'
    |     |     |   | | |         |-ImplicitCastExpr 0x1290b91e0 <col:11> 'const char *' <LValueToRValue>
    |     |     |   | | |         | `-DeclRefExpr 0x1290b91a0 <col:11> 'const char *' lvalue Var 0x12909e608 'in' 'const char *'
    |     |     |   | | |         `-IntegerLiteral 0x1290b91c0 <col:16> 'int' 1
    |     |     |   | | `-CharacterLiteral 0x1290b9250 <col:22> 'int' 66
    |     |     |   | `-BinaryOperator 0x1290b93b0 <col:29, col:42> 'int' '=='
    |     |     |   |   |-ImplicitCastExpr 0x1290b9398 <col:29, col:37> 'int' <IntegralCast>
    |     |     |   |   | `-ImplicitCastExpr 0x1290b9380 <col:29, col:37> 'char' <LValueToRValue>
    |     |     |   |   |   `-UnaryOperator 0x1290b9350 <col:29, col:37> 'const char' lvalue prefix '*' cannot overflow
    |     |     |   |   |     `-ParenExpr 0x1290b9330 <col:30, col:37> 'const char *'
    |     |     |   |   |       `-BinaryOperator 0x1290b9310 <col:31, col:36> 'const char *' '+'
    |     |     |   |   |         |-ImplicitCastExpr 0x1290b92f8 <col:31> 'const char *' <LValueToRValue>
    |     |     |   |   |         | `-DeclRefExpr 0x1290b92b8 <col:31> 'const char *' lvalue Var 0x12909e608 'in' 'const char *'
    |     |     |   |   |         `-IntegerLiteral 0x1290b92d8 <col:36> 'int' 1
    |     |     |   |   `-CharacterLiteral 0x1290b9368 <col:42> 'int' 74
    |     |     |   |-CompoundStmt 0x1290b9478 <col:47, line:26:5>
    |     |     |   | `-CompoundAssignOperator 0x1290b9448 <line:25:6, col:12> 'const char *' '+=' ComputeLHSTy='const char *' ComputeResultTy='const char *'
    |     |     |   |   |-DeclRefExpr 0x1290b9408 <col:6> 'const char *' lvalue Var 0x12909e608 'in' 'const char *'
    |     |     |   |   `-IntegerLiteral 0x1290b9428 <col:12> 'int' 2
    |     |     |   `-IfStmt 0x1290b9670 <line:26:12, line:32:5> has_else
    |     |     |     |-BinaryOperator 0x1290b9588 <line:26:16, col:29> 'int' '=='
    |     |     |     | |-ImplicitCastExpr 0x1290b9570 <col:16, col:24> 'int' <IntegralCast>
    |     |     |     | | `-ImplicitCastExpr 0x1290b9558 <col:16, col:24> 'char' <LValueToRValue>
    |     |     |     | |   `-UnaryOperator 0x1290b9528 <col:16, col:24> 'const char' lvalue prefix '*' cannot overflow
    |     |     |     | |     `-ParenExpr 0x1290b9508 <col:17, col:24> 'const char *'
    |     |     |     | |       `-BinaryOperator 0x1290b94e8 <col:18, col:23> 'const char *' '+'
    |     |     |     | |         |-ImplicitCastExpr 0x1290b94d0 <col:18> 'const char *' <LValueToRValue>
    |     |     |     | |         | `-DeclRefExpr 0x1290b9490 <col:18> 'const char *' lvalue Var 0x12909e608 'in' 'const char *'
    |     |     |     | |         `-IntegerLiteral 0x1290b94b0 <col:23> 'int' 1
    |     |     |     | `-CharacterLiteral 0x1290b9540 <col:29> 'int' 73
    |     |     |     |-CompoundStmt 0x1290b9630 <col:34, line:29:5>
    |     |     |     | `-CompoundAssignOperator 0x1290b9600 <line:28:6, col:12> 'const char *' '+=' ComputeLHSTy='const char *' ComputeResultTy='const char *'
    |     |     |     |   |-DeclRefExpr 0x1290b95c0 <col:6> 'const char *' lvalue Var 0x12909e608 'in' 'const char *'
    |     |     |     |   `-IntegerLiteral 0x1290b95e0 <col:12> 'int' 2
    |     |     |     `-CompoundStmt 0x1290b9660 <line:29:12, line:32:5>
    |     |     `-CompoundStmt 0x1290b96e8 <line:33:11, line:36:4>
    |     `-IfStmt 0x1290ba518 <line:37:10, line:64:3> has_else
    |       |-BinaryOperator 0x1290b9818 <line:37:14, col:21> 'int' '=='
    |       | |-ImplicitCastExpr 0x1290b9800 <col:14, col:15> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x1290b97e8 <col:14, col:15> 'char' <LValueToRValue>
    |       | |   `-UnaryOperator 0x1290b97b0 <col:14, col:15> 'const char' lvalue prefix '*' cannot overflow
    |       | |     `-ImplicitCastExpr 0x1290b9798 <col:15> 'const char *' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x1290b9778 <col:15> 'const char *' lvalue Var 0x12909e608 'in' 'const char *'
    |       | `-IntegerLiteral 0x1290b97c8 <col:21> 'int' 14
    |       |-CompoundStmt 0x1290b9870 <col:27, line:40:3>
    |       | `-UnaryOperator 0x1290b9858 <line:39:4, col:6> 'const char *' postfix '++'
    |       |   `-DeclRefExpr 0x1290b9838 <col:4> 'const char *' lvalue Var 0x12909e608 'in' 'const char *'
    |       `-IfStmt 0x1290ba4e8 <line:40:10, line:64:3> has_else
    |         |-BinaryOperator 0x1290b9928 <line:40:14, col:21> 'int' '=='
    |         | |-ImplicitCastExpr 0x1290b9910 <col:14, col:15> 'int' <IntegralCast>
    |         | | `-ImplicitCastExpr 0x1290b98f8 <col:14, col:15> 'char' <LValueToRValue>
    |         | |   `-UnaryOperator 0x1290b98c0 <col:14, col:15> 'const char' lvalue prefix '*' cannot overflow
    |         | |     `-ImplicitCastExpr 0x1290b98a8 <col:15> 'const char *' <LValueToRValue>
    |         | |       `-DeclRefExpr 0x1290b9888 <col:15> 'const char *' lvalue Var 0x12909e608 'in' 'const char *'
    |         | `-IntegerLiteral 0x1290b98d8 <col:21> 'int' 15
    |         |-CompoundStmt 0x1290b9980 <col:27, line:43:3>
    |         | `-UnaryOperator 0x1290b9968 <line:42:4, col:6> 'const char *' postfix '++'
    |         |   `-DeclRefExpr 0x1290b9948 <col:4> 'const char *' lvalue Var 0x12909e608 'in' 'const char *'
    |         `-CompoundStmt 0x1290ba4d0 <line:43:10, line:64:3>
    |           `-SwitchStmt 0x1290b99b8 <line:44:4, line:63:4>
    |             |-RecoveryExpr 0x1290b9998 <line:44:12> 'int' contains-errors
    |             `-CompoundStmt 0x1290ba450 <col:19, line:63:4>
    |               |-BinaryOperator 0x1290b9a98 <line:46:5, col:17> 'char' '='
    |               | |-UnaryOperator 0x1290b9a18 <col:5, col:9> 'char' lvalue prefix '*' cannot overflow
    |               | | `-UnaryOperator 0x1290b9a00 <col:6, col:9> 'char *' postfix '++'
    |               | |   `-DeclRefExpr 0x1290b99e0 <col:6> 'char *' lvalue Var 0x12909e6d8 'out' 'char *'
    |               | `-ImplicitCastExpr 0x1290b9a80 <col:14, col:17> 'char' <LValueToRValue>
    |               |   `-UnaryOperator 0x1290b9a68 <col:14, col:17> 'const char' lvalue prefix '*' cannot overflow
    |               |     `-UnaryOperator 0x1290b9a50 <col:15, col:17> 'const char *' postfix '++'
    |               |       `-DeclRefExpr 0x1290b9a30 <col:15> 'const char *' lvalue Var 0x12909e608 'in' 'const char *'
    |               |-BreakStmt 0x1290b9ab8 <line:47:5>
    |               |-BinaryOperator 0x1290b9be8 <line:49:5, col:22> 'char' '='
    |               | |-UnaryOperator 0x1290b9af8 <col:5, col:9> 'char' lvalue prefix '*' cannot overflow
    |               | | `-UnaryOperator 0x1290b9ae0 <col:6, col:9> 'char *' postfix '++'
    |               | |   `-DeclRefExpr 0x1290b9ac0 <col:6> 'char *' lvalue Var 0x12909e6d8 'out' 'char *'
    |               | `-ImplicitCastExpr 0x1290b9bd0 <col:14, col:22> 'char' <IntegralCast>
    |               |   `-BinaryOperator 0x1290b9bb0 <col:14, col:22> 'int' '|'
    |               |     |-ImplicitCastExpr 0x1290b9b98 <col:14, col:17> 'int' <IntegralCast>
    |               |     | `-ImplicitCastExpr 0x1290b9b80 <col:14, col:17> 'char' <LValueToRValue>
    |               |     |   `-UnaryOperator 0x1290b9b48 <col:14, col:17> 'const char' lvalue prefix '*' cannot overflow
    |               |     |     `-UnaryOperator 0x1290b9b30 <col:15, col:17> 'const char *' postfix '++'
    |               |     |       `-DeclRefExpr 0x1290b9b10 <col:15> 'const char *' lvalue Var 0x12909e608 'in' 'const char *'
    |               |     `-IntegerLiteral 0x1290b9b60 <col:22> 'int' 128
    |               |-IfStmt 0x1290b9cc8 <line:50:5, col:22>
    |               | |-BinaryOperator 0x1290b9ca0 <col:9, col:16> 'int' '=='
    |               | | |-ImplicitCastExpr 0x1290b9c88 <col:9, col:10> 'int' <IntegralCast>
    |               | | | `-ImplicitCastExpr 0x1290b9c70 <col:9, col:10> 'char' <LValueToRValue>
    |               | | |   `-UnaryOperator 0x1290b9c40 <col:9, col:10> 'const char' lvalue prefix '*' cannot overflow
    |               | | |     `-ImplicitCastExpr 0x1290b9c28 <col:10> 'const char *' <LValueToRValue>
    |               | | |       `-DeclRefExpr 0x1290b9c08 <col:10> 'const char *' lvalue Var 0x12909e608 'in' 'const char *'
    |               | | `-CharacterLiteral 0x1290b9c58 <col:16> 'int' 0
    |               | `-BreakStmt 0x1290b9cc0 <col:22>
    |               |-BinaryOperator 0x1290b9e10 <line:51:5, col:22> 'char' '='
    |               | |-UnaryOperator 0x1290b9d20 <col:5, col:9> 'char' lvalue prefix '*' cannot overflow
    |               | | `-UnaryOperator 0x1290b9d08 <col:6, col:9> 'char *' postfix '++'
    |               | |   `-DeclRefExpr 0x1290b9ce8 <col:6> 'char *' lvalue Var 0x12909e6d8 'out' 'char *'
    |               | `-ImplicitCastExpr 0x1290b9df8 <col:14, col:22> 'char' <IntegralCast>
    |               |   `-BinaryOperator 0x1290b9dd8 <col:14, col:22> 'int' '|'
    |               |     |-ImplicitCastExpr 0x1290b9dc0 <col:14, col:17> 'int' <IntegralCast>
    |               |     | `-ImplicitCastExpr 0x1290b9da8 <col:14, col:17> 'char' <LValueToRValue>
    |               |     |   `-UnaryOperator 0x1290b9d70 <col:14, col:17> 'const char' lvalue prefix '*' cannot overflow
    |               |     |     `-UnaryOperator 0x1290b9d58 <col:15, col:17> 'const char *' postfix '++'
    |               |     |       `-DeclRefExpr 0x1290b9d38 <col:15> 'const char *' lvalue Var 0x12909e608 'in' 'const char *'
    |               |     `-IntegerLiteral 0x1290b9d88 <col:22> 'int' 128
    |               |-BreakStmt 0x1290b9e30 <line:52:5>
    |               |-BinaryOperator 0x1290b9ec0 <line:54:5, col:14> 'char' '='
    |               | |-UnaryOperator 0x1290b9e70 <col:5, col:9> 'char' lvalue prefix '*' cannot overflow
    |               | | `-UnaryOperator 0x1290b9e58 <col:6, col:9> 'char *' postfix '++'
    |               | |   `-DeclRefExpr 0x1290b9e38 <col:6> 'char *' lvalue Var 0x12909e6d8 'out' 'char *'
    |               | `-ImplicitCastExpr 0x1290b9ea8 <col:14> 'char' <IntegralCast>
    |               |   `-IntegerLiteral 0x1290b9e88 <col:14> 'int' 142
    |               |-BinaryOperator 0x1290ba008 <line:55:5, col:22> 'char' '='
    |               | |-UnaryOperator 0x1290b9f18 <col:5, col:9> 'char' lvalue prefix '*' cannot overflow
    |               | | `-UnaryOperator 0x1290b9f00 <col:6, col:9> 'char *' postfix '++'
    |               | |   `-DeclRefExpr 0x1290b9ee0 <col:6> 'char *' lvalue Var 0x12909e6d8 'out' 'char *'
    |               | `-ImplicitCastExpr 0x1290b9ff0 <col:14, col:22> 'char' <IntegralCast>
    |               |   `-BinaryOperator 0x1290b9fd0 <col:14, col:22> 'int' '|'
    |               |     |-ImplicitCastExpr 0x1290b9fb8 <col:14, col:17> 'int' <IntegralCast>
    |               |     | `-ImplicitCastExpr 0x1290b9fa0 <col:14, col:17> 'char' <LValueToRValue>
    |               |     |   `-UnaryOperator 0x1290b9f68 <col:14, col:17> 'const char' lvalue prefix '*' cannot overflow
    |               |     |     `-UnaryOperator 0x1290b9f50 <col:15, col:17> 'const char *' postfix '++'
    |               |     |       `-DeclRefExpr 0x1290b9f30 <col:15> 'const char *' lvalue Var 0x12909e608 'in' 'const char *'
    |               |     `-IntegerLiteral 0x1290b9f80 <col:22> 'int' 128
    |               |-BreakStmt 0x1290ba028 <line:56:5>
    |               |-BinaryOperator 0x1290ba0b8 <line:58:5, col:14> 'char' '='
    |               | |-UnaryOperator 0x1290ba068 <col:5, col:9> 'char' lvalue prefix '*' cannot overflow
    |               | | `-UnaryOperator 0x1290ba050 <col:6, col:9> 'char *' postfix '++'
    |               | |   `-DeclRefExpr 0x1290ba030 <col:6> 'char *' lvalue Var 0x12909e6d8 'out' 'char *'
    |               | `-ImplicitCastExpr 0x1290ba0a0 <col:14> 'char' <IntegralCast>
    |               |   `-IntegerLiteral 0x1290ba080 <col:14> 'int' 143
    |               |-BinaryOperator 0x1290ba200 <line:59:5, col:22> 'char' '='
    |               | |-UnaryOperator 0x1290ba110 <col:5, col:9> 'char' lvalue prefix '*' cannot overflow
    |               | | `-UnaryOperator 0x1290ba0f8 <col:6, col:9> 'char *' postfix '++'
    |               | |   `-DeclRefExpr 0x1290ba0d8 <col:6> 'char *' lvalue Var 0x12909e6d8 'out' 'char *'
    |               | `-ImplicitCastExpr 0x1290ba1e8 <col:14, col:22> 'char' <IntegralCast>
    |               |   `-BinaryOperator 0x1290ba1c8 <col:14, col:22> 'int' '|'
    |               |     |-ImplicitCastExpr 0x1290ba1b0 <col:14, col:17> 'int' <IntegralCast>
    |               |     | `-ImplicitCastExpr 0x1290ba198 <col:14, col:17> 'char' <LValueToRValue>
    |               |     |   `-UnaryOperator 0x1290ba160 <col:14, col:17> 'const char' lvalue prefix '*' cannot overflow
    |               |     |     `-UnaryOperator 0x1290ba148 <col:15, col:17> 'const char *' postfix '++'
    |               |     |       `-DeclRefExpr 0x1290ba128 <col:15> 'const char *' lvalue Var 0x12909e608 'in' 'const char *'
    |               |     `-IntegerLiteral 0x1290ba178 <col:22> 'int' 128
    |               |-IfStmt 0x1290ba2e0 <line:60:5, col:22>
    |               | |-BinaryOperator 0x1290ba2b8 <col:9, col:16> 'int' '=='
    |               | | |-ImplicitCastExpr 0x1290ba2a0 <col:9, col:10> 'int' <IntegralCast>
    |               | | | `-ImplicitCastExpr 0x1290ba288 <col:9, col:10> 'char' <LValueToRValue>
    |               | | |   `-UnaryOperator 0x1290ba258 <col:9, col:10> 'const char' lvalue prefix '*' cannot overflow
    |               | | |     `-ImplicitCastExpr 0x1290ba240 <col:10> 'const char *' <LValueToRValue>
    |               | | |       `-DeclRefExpr 0x1290ba220 <col:10> 'const char *' lvalue Var 0x12909e608 'in' 'const char *'
    |               | | `-CharacterLiteral 0x1290ba270 <col:16> 'int' 0
    |               | `-BreakStmt 0x1290ba2d8 <col:22>
    |               |-BinaryOperator 0x1290ba428 <line:61:5, col:22> 'char' '='
    |               | |-UnaryOperator 0x1290ba338 <col:5, col:9> 'char' lvalue prefix '*' cannot overflow
    |               | | `-UnaryOperator 0x1290ba320 <col:6, col:9> 'char *' postfix '++'
    |               | |   `-DeclRefExpr 0x1290ba300 <col:6> 'char *' lvalue Var 0x12909e6d8 'out' 'char *'
    |               | `-ImplicitCastExpr 0x1290ba410 <col:14, col:22> 'char' <IntegralCast>
    |               |   `-BinaryOperator 0x1290ba3f0 <col:14, col:22> 'int' '|'
    |               |     |-ImplicitCastExpr 0x1290ba3d8 <col:14, col:17> 'int' <IntegralCast>
    |               |     | `-ImplicitCastExpr 0x1290ba3c0 <col:14, col:17> 'char' <LValueToRValue>
    |               |     |   `-UnaryOperator 0x1290ba388 <col:14, col:17> 'const char' lvalue prefix '*' cannot overflow
    |               |     |     `-UnaryOperator 0x1290ba370 <col:15, col:17> 'const char *' postfix '++'
    |               |     |       `-DeclRefExpr 0x1290ba350 <col:15> 'const char *' lvalue Var 0x12909e608 'in' 'const char *'
    |               |     `-IntegerLiteral 0x1290ba3a0 <col:22> 'int' 128
    |               `-BreakStmt 0x1290ba448 <line:62:5>
    |-BinaryOperator 0x1290ba630 <line:67:2, col:9> 'char' '='
    | |-UnaryOperator 0x1290ba5e8 <col:2, col:3> 'char' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x1290ba5d0 <col:3> 'char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x1290ba5b0 <col:3> 'char *' lvalue Var 0x12909e6d8 'out' 'char *'
    | `-ImplicitCastExpr 0x1290ba618 <col:9> 'char' <IntegralCast>
    |   `-CharacterLiteral 0x1290ba600 <col:9> 'int' 0
    `-ReturnStmt 0x1290ba670 <line:68:2, col:9>
      `-IntegerLiteral 0x1290ba650 <col:9> 'int' 0
