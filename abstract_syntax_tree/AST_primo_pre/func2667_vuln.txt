`-FunctionDecl 0x12b00e0c8  line:1:1 invalid calculateNumTiles 'int (int *, int, int, int, int, int)'
  |-ParmVarDecl 0x12b00dd08 <col:20, col:25> col:25 used numTiles 'int *'
  |-ParmVarDecl 0x12b00dd88 <line:2:6, col:10> col:10 used numLevels 'int'
  |-ParmVarDecl 0x12b00de08 <line:3:6, col:10> col:10 used min 'int'
  |-ParmVarDecl 0x12b00de88 <col:15, col:19> col:19 used max 'int'
  |-ParmVarDecl 0x12b00df08 <line:4:6, col:10> col:10 used size 'int'
  |-ParmVarDecl 0x12b00dfa0 <line:5:6, col:24> col:24 invalid rmode 'int'
  `-CompoundStmt 0x12b0278f0 <line:6:1, line:15:1>
    `-ForStmt 0x12b0278b8 <line:7:5, line:14:5>
      |-DeclStmt 0x12b00e240 <line:7:10, col:19>
      | `-VarDecl 0x12b00e1b8 <col:10, col:18> col:14 used i 'int' cinit
      |   `-IntegerLiteral 0x12b00e220 <col:18> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x12b00e2c8 <col:21, col:25> 'int' '<'
      | |-ImplicitCastExpr 0x12b00e298 <col:21> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x12b00e258 <col:21> 'int' lvalue Var 0x12b00e1b8 'i' 'int'
      | `-ImplicitCastExpr 0x12b00e2b0 <col:25> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x12b00e278 <col:25> 'int' lvalue ParmVar 0x12b00dd88 'numLevels' 'int'
      |-UnaryOperator 0x12b00e308 <col:36, col:37> 'int' postfix '++'
      | `-DeclRefExpr 0x12b00e2e8 <col:36> 'int' lvalue Var 0x12b00e1b8 'i' 'int'
      `-CompoundStmt 0x12b027898 <line:8:5, line:14:5>
        |-DeclStmt 0x12b0275f0 <line:9:9, col:47>
        | `-VarDecl 0x12b00e338 <col:9, col:46> col:13 used l 'int' cinit
        |   `-CallExpr 0x12b0275b0 <col:17, col:46> '<dependent type>' contains-errors
        |     |-DeclRefExpr 0x12b027510 <col:17> 'int ()' Function 0x12b027458 'levelSize' 'int ()'
        |     |-DeclRefExpr 0x12b027530 <col:28> 'int' lvalue ParmVar 0x12b00de08 'min' 'int'
        |     |-DeclRefExpr 0x12b027550 <col:33> 'int' lvalue ParmVar 0x12b00de88 'max' 'int'
        |     |-DeclRefExpr 0x12b027570 <col:38> 'int' lvalue Var 0x12b00e1b8 'i' 'int'
        |     `-RecoveryExpr 0x12b027590 <col:41> '<dependent type>' contains-errors lvalue
        `-BinaryOperator 0x12b027878 <line:13:9, col:40> 'int' contains-errors '='
          |-ArraySubscriptExpr 0x12b027710 <col:9, col:19> 'int' lvalue
          | |-ImplicitCastExpr 0x12b0276e0 <col:9> 'int *' <LValueToRValue>
          | | `-DeclRefExpr 0x12b0276a0 <col:9> 'int *' lvalue ParmVar 0x12b00dd08 'numTiles' 'int *'
          | `-ImplicitCastExpr 0x12b0276f8 <col:18> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x12b0276c0 <col:18> 'int' lvalue Var 0x12b00e1b8 'i' 'int'
          `-BinaryOperator 0x12b027858 <col:23, col:40> 'int' contains-errors '/'
            |-ParenExpr 0x12b027800 <col:23, col:36> 'int' contains-errors
            | `-BinaryOperator 0x12b0277e0 <col:24, col:35> 'int' contains-errors '-'
            |   |-BinaryOperator 0x12b0277a0 <col:24, col:28> 'int' contains-errors '+'
            |   | |-ImplicitCastExpr 0x12b027770 <col:24> 'int' contains-errors <LValueToRValue>
            |   | | `-DeclRefExpr 0x12b027730 <col:24> 'int' contains-errors lvalue Var 0x12b00e338 'l' 'int'
            |   | `-ImplicitCastExpr 0x12b027788 <col:28> 'int' <LValueToRValue>
            |   |   `-DeclRefExpr 0x12b027750 <col:28> 'int' lvalue ParmVar 0x12b00df08 'size' 'int'
            |   `-IntegerLiteral 0x12b0277c0 <col:35> 'int' 1
            `-ImplicitCastExpr 0x12b027840 <col:40> 'int' <LValueToRValue>
              `-DeclRefExpr 0x12b027820 <col:40> 'int' lvalue ParmVar 0x12b00df08 'size' 'int'
