`-FunctionDecl 0x15307e3d8  line:1:1 invalid _asn1_get_octet_string 'int (int, const unsigned char *, unsigned int, int *)'
  |-ParmVarDecl 0x15307e0f0 <col:25, col:35> col:35 invalid node 'int'
  |-ParmVarDecl 0x15307e1a8 <col:41, col:62> col:62 used der 'const unsigned char *'
  |-ParmVarDecl 0x15307e228 <col:67, col:76> col:76 used der_len 'unsigned int'
  |-ParmVarDecl 0x15307e2d8 <col:85, col:90> col:90 used len 'int *'
  `-CompoundStmt 0x154809920 <line:2:1, line:88:1>
    |-DeclStmt 0x15307e750 <line:3:3, col:47>
    | |-VarDecl 0x15307e4b8 <col:3, col:7> col:7 used len2 'int'
    | |-VarDecl 0x15307e538 <col:3, col:13> col:13 used len3 'int'
    | |-VarDecl 0x15307e5b8 <col:3, col:19> col:19 used counter 'int'
    | |-VarDecl 0x15307e638 <col:3, col:28> col:28 used tot_len 'int'
    | `-VarDecl 0x15307e6b8 <col:3, col:37> col:37 used indefinite 'int'
    |-DeclStmt 0x15307e7e8 <line:4:3, col:13>
    | `-VarDecl 0x15307e780 <col:3, col:7> col:7 used result 'int'
    |-BinaryOperator 0x153095040 <line:6:3, col:13> 'int' '='
    | |-DeclRefExpr 0x153095000 <col:3> 'int' lvalue Var 0x15307e5b8 'counter' 'int'
    | `-IntegerLiteral 0x153095020 <col:13> 'int' 0
    |-IfStmt 0x154809790 <line:8:3, line:81:5> has_else
    | |-BinaryOperator 0x153095248 <line:8:7, col:20> '<dependent type>' contains-errors '&'
    | | |-UnaryOperator 0x153095210 <col:7, col:16> 'const unsigned char' lvalue prefix '*' cannot overflow
    | | | `-ParenExpr 0x1530951f0 <col:8, col:16> 'const unsigned char *'
    | | |   `-BinaryOperator 0x1530951d0 <col:9, col:15> 'const unsigned char *' '-'
    | | |     |-ImplicitCastExpr 0x1530951b8 <col:9> 'const unsigned char *' <LValueToRValue>
    | | |     | `-DeclRefExpr 0x153095060 <col:9> 'const unsigned char *' lvalue ParmVar 0x15307e1a8 'der' 'const unsigned char *'
    | | |     `-IntegerLiteral 0x153095080 <col:15> 'int' 1
    | | `-RecoveryExpr 0x153095228 <col:20> '<dependent type>' contains-errors lvalue
    | |-CompoundStmt 0x1548091d8 <line:9:5, line:70:5>
    | | |-BinaryOperator 0x1530952a8 <line:10:7, col:17> 'int' '='
    | | | |-DeclRefExpr 0x153095268 <col:7> 'int' lvalue Var 0x15307e638 'tot_len' 'int'
    | | | `-IntegerLiteral 0x153095288 <col:17> 'int' 0
    | | |-BinaryOperator 0x153095590 <line:11:7, col:60> 'int' '='
    | | | |-DeclRefExpr 0x1530952c8 <col:7> 'int' lvalue Var 0x15307e6b8 'indefinite' 'int'
    | | | `-CallExpr 0x153095528 <col:20, col:60> 'int'
    | | |   |-ImplicitCastExpr 0x153095510 <col:20> 'int (*)()' <FunctionToPointerDecay>
    | | |   | `-DeclRefExpr 0x153095440 <col:20> 'int ()' Function 0x153095388 'asn1_get_length_der' 'int ()'
    | | |   |-ImplicitCastExpr 0x153095560 <col:41> 'const unsigned char *' <LValueToRValue>
    | | |   | `-DeclRefExpr 0x153095460 <col:41> 'const unsigned char *' lvalue ParmVar 0x15307e1a8 'der' 'const unsigned char *'
    | | |   |-ImplicitCastExpr 0x153095578 <col:46> 'unsigned int' <LValueToRValue>
    | | |   | `-DeclRefExpr 0x153095480 <col:46> 'unsigned int' lvalue ParmVar 0x15307e228 'der_len' 'unsigned int'
    | | |   `-UnaryOperator 0x1530954c0 <col:55, col:56> 'int *' prefix '&' cannot overflow
    | | |     `-DeclRefExpr 0x1530954a0 <col:56> 'int' lvalue Var 0x15307e538 'len3' 'int'
    | | |-IfStmt 0x153095688 <line:12:7, line:13:9>
    | | | |-BinaryOperator 0x153095620 <line:12:11, col:25> 'int' '<'
    | | | | |-ImplicitCastExpr 0x153095608 <col:11> 'int' <LValueToRValue>
    | | | | | `-DeclRefExpr 0x1530955b0 <col:11> 'int' lvalue Var 0x15307e6b8 'indefinite' 'int'
    | | | | `-UnaryOperator 0x1530955f0 <col:24, col:25> 'int' prefix '-'
    | | | |   `-IntegerLiteral 0x1530955d0 <col:25> 'int' 1
    | | | `-ReturnStmt 0x153095678 <line:13:2, col:9>
    | | |   `-RecoveryExpr 0x153095658 <col:9> '<dependent type>' contains-errors lvalue
    | | |-CompoundAssignOperator 0x153095700 <line:15:7, col:18> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    | | | |-DeclRefExpr 0x1530956a8 <col:7> 'int' lvalue Var 0x15307e5b8 'counter' 'int'
    | | | `-ImplicitCastExpr 0x1530956e8 <col:18> 'int' <LValueToRValue>
    | | |   `-DeclRefExpr 0x1530956c8 <col:18> 'int' lvalue Var 0x15307e538 'len3' 'int'
    | | |-CallExpr 0x153095888 <line:16:7, col:29> 'int'
    | | | |-ImplicitCastExpr 0x153095870 <col:7> 'int (*)()' <FunctionToPointerDecay>
    | | | | `-DeclRefExpr 0x153095810 <col:7> 'int ()' Function 0x153095758 'DECR_LEN' 'int ()'
    | | | |-ImplicitCastExpr 0x1530958b8 <col:16> 'unsigned int' <LValueToRValue>
    | | | | `-DeclRefExpr 0x153095830 <col:16> 'unsigned int' lvalue ParmVar 0x15307e228 'der_len' 'unsigned int'
    | | | `-ImplicitCastExpr 0x1530958d0 <col:25> 'int' <LValueToRValue>
    | | |   `-DeclRefExpr 0x153095850 <col:25> 'int' lvalue Var 0x15307e538 'len3' 'int'
    | | |-IfStmt 0x1530959e8 <line:18:7, line:19:16>
    | | | |-BinaryOperator 0x153095940 <line:18:11, col:25> 'int' '>='
    | | | | |-ImplicitCastExpr 0x153095928 <col:11> 'int' <LValueToRValue>
    | | | | | `-DeclRefExpr 0x1530958e8 <col:11> 'int' lvalue Var 0x15307e6b8 'indefinite' 'int'
    | | | | `-IntegerLiteral 0x153095908 <col:25> 'int' 0
    | | | `-CompoundAssignOperator 0x1530959b8 <line:19:2, col:16> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    | | |   |-DeclRefExpr 0x153095960 <col:2> 'int' lvalue Var 0x15307e6b8 'indefinite' 'int'
    | | |   `-ImplicitCastExpr 0x1530959a0 <col:16> 'int' <LValueToRValue>
    | | |     `-DeclRefExpr 0x153095980 <col:16> 'int' lvalue Var 0x15307e538 'len3' 'int'
    | | |-WhileStmt 0x153891710 <line:21:7, line:52:2>
    | | | |-IntegerLiteral 0x153095a08 <line:21:14> 'int' 1
    | | | `-CompoundStmt 0x1538916b0 <line:22:2, line:52:2>
    | | |   |-IfStmt 0x153095b18 <line:23:4, line:24:13>
    | | |   | |-BinaryOperator 0x153095ab0 <line:23:8, col:18> 'int' '>'
    | | |   | | |-ImplicitCastExpr 0x153095a98 <col:8> 'unsigned int' <IntegralCast>
    | | |   | | | `-ImplicitCastExpr 0x153095a68 <col:8> 'int' <LValueToRValue>
    | | |   | | |   `-DeclRefExpr 0x153095a28 <col:8> 'int' lvalue Var 0x15307e5b8 'counter' 'int'
    | | |   | | `-ImplicitCastExpr 0x153095a80 <col:18> 'unsigned int' <LValueToRValue>
    | | |   | |   `-DeclRefExpr 0x153095a48 <col:18> 'unsigned int' lvalue ParmVar 0x15307e228 'der_len' 'unsigned int'
    | | |   | `-ReturnStmt 0x153095b08 <line:24:6, col:13>
    | | |   |   `-RecoveryExpr 0x153095ae8 <col:13> '<dependent type>' contains-errors lvalue
    | | |   |-IfStmt 0x153890e50 <line:26:4, line:36:6> has_else
    | | |   | |-BinaryOperator 0x153095ba8 <line:26:8, col:23> 'int' '=='
    | | |   | | |-ImplicitCastExpr 0x153095b90 <col:8> 'int' <LValueToRValue>
    | | |   | | | `-DeclRefExpr 0x153095b38 <col:8> 'int' lvalue Var 0x15307e6b8 'indefinite' 'int'
    | | |   | | `-UnaryOperator 0x153095b78 <col:22, col:23> 'int' prefix '-'
    | | |   | |   `-IntegerLiteral 0x153095b58 <col:23> 'int' 1
    | | |   | |-CompoundStmt 0x153890d80 <line:27:6, line:34:6>
    | | |   | | `-IfStmt 0x153890d60 <line:28:8, line:33:3>
    | | |   | |   |-BinaryOperator 0x153095fe0 <line:28:12, col:78> 'int' '&&'
    | | |   | |   | |-BinaryOperator 0x153095e60 <col:12, col:51> 'int' '&&'
    | | |   | |   | | |-CallExpr 0x153095d00 <col:12, col:28> 'int'
    | | |   | |   | | | |-ImplicitCastExpr 0x153095ce8 <col:12> 'int (*)()' <FunctionToPointerDecay>
    | | |   | |   | | | | `-DeclRefExpr 0x153095ca8 <col:12> 'int ()' Function 0x153095bf0 'HAVE_TWO' 'int ()'
    | | |   | |   | | | `-ImplicitCastExpr 0x153095d28 <col:21> 'unsigned int' <LValueToRValue>
    | | |   | |   | | |   `-DeclRefExpr 0x153095cc8 <col:21> 'unsigned int' lvalue ParmVar 0x15307e228 'der_len' 'unsigned int'
    | | |   | |   | | `-ParenExpr 0x153095e40 <col:33, col:51> 'int'
    | | |   | |   | |   `-BinaryOperator 0x153095e20 <col:34, col:50> 'int' '=='
    | | |   | |   | |     |-ImplicitCastExpr 0x153095e08 <col:34, col:45> 'int' <IntegralCast>
    | | |   | |   | |     | `-ImplicitCastExpr 0x153095df0 <col:34, col:45> 'unsigned char' <LValueToRValue>
    | | |   | |   | |     |   `-ArraySubscriptExpr 0x153095db0 <col:34, col:45> 'const unsigned char' lvalue
    | | |   | |   | |     |     |-ImplicitCastExpr 0x153095d80 <col:34> 'const unsigned char *' <LValueToRValue>
    | | |   | |   | |     |     | `-DeclRefExpr 0x153095d40 <col:34> 'const unsigned char *' lvalue ParmVar 0x15307e1a8 'der' 'const unsigned char *'
    | | |   | |   | |     |     `-ImplicitCastExpr 0x153095d98 <col:38> 'int' <LValueToRValue>
    | | |   | |   | |     |       `-DeclRefExpr 0x153095d60 <col:38> 'int' lvalue Var 0x15307e5b8 'counter' 'int'
    | | |   | |   | |     `-IntegerLiteral 0x153095dd0 <col:50> 'int' 0
    | | |   | |   | `-ParenExpr 0x153095fc0 <col:56, col:78> 'int'
    | | |   | |   |   `-BinaryOperator 0x153095fa0 <col:57, col:77> 'int' '=='
    | | |   | |   |     |-ImplicitCastExpr 0x153095f88 <col:57, col:72> 'int' <IntegralCast>
    | | |   | |   |     | `-ImplicitCastExpr 0x153095f70 <col:57, col:72> 'unsigned char' <LValueToRValue>
    | | |   | |   |     |   `-ArraySubscriptExpr 0x153095f30 <col:57, col:72> 'const unsigned char' lvalue
    | | |   | |   |     |     |-ImplicitCastExpr 0x153095f18 <col:57> 'const unsigned char *' <LValueToRValue>
    | | |   | |   |     |     | `-DeclRefExpr 0x153095e80 <col:57> 'const unsigned char *' lvalue ParmVar 0x15307e1a8 'der' 'const unsigned char *'
    | | |   | |   |     |     `-BinaryOperator 0x153095ef8 <col:61, col:71> 'int' '+'
    | | |   | |   |     |       |-ImplicitCastExpr 0x153095ee0 <col:61> 'int' <LValueToRValue>
    | | |   | |   |     |       | `-DeclRefExpr 0x153095ea0 <col:61> 'int' lvalue Var 0x15307e5b8 'counter' 'int'
    | | |   | |   |     |       `-IntegerLiteral 0x153095ec0 <col:71> 'int' 1
    | | |   | |   |     `-IntegerLiteral 0x153095f50 <col:77> 'int' 0
    | | |   | |   `-CompoundStmt 0x153890d38 <line:29:3, line:33:3>
    | | |   | |     |-CompoundAssignOperator 0x153890c40 <line:30:5, col:16> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    | | |   | |     | |-DeclRefExpr 0x153890c00 <col:5> 'int' lvalue Var 0x15307e5b8 'counter' 'int'
    | | |   | |     | `-IntegerLiteral 0x153890c20 <col:16> 'int' 2
    | | |   | |     |-CallExpr 0x153890ce8 <line:31:5, col:24> 'int'
    | | |   | |     | |-ImplicitCastExpr 0x153890cd0 <col:5> 'int (*)()' <FunctionToPointerDecay>
    | | |   | |     | | `-DeclRefExpr 0x153890c70 <col:5> 'int ()' Function 0x153095758 'DECR_LEN' 'int ()'
    | | |   | |     | |-ImplicitCastExpr 0x153890d18 <col:14> 'unsigned int' <LValueToRValue>
    | | |   | |     | | `-DeclRefExpr 0x153890c90 <col:14> 'unsigned int' lvalue ParmVar 0x15307e228 'der_len' 'unsigned int'
    | | |   | |     | `-IntegerLiteral 0x153890cb0 <col:23> 'int' 2
    | | |   | |     `-BreakStmt 0x153890d30 <line:32:5>
    | | |   | `-IfStmt 0x153890e30 <line:35:9, line:36:6>
    | | |   |   |-BinaryOperator 0x153890e08 <line:35:13, col:24> 'int' '>='
    | | |   |   | |-ImplicitCastExpr 0x153890dd8 <col:13> 'int' <LValueToRValue>
    | | |   |   | | `-DeclRefExpr 0x153890d98 <col:13> 'int' lvalue Var 0x15307e5b8 'counter' 'int'
    | | |   |   | `-ImplicitCastExpr 0x153890df0 <col:24> 'int' <LValueToRValue>
    | | |   |   |   `-DeclRefExpr 0x153890db8 <col:24> 'int' lvalue Var 0x15307e6b8 'indefinite' 'int'
    | | |   |   `-BreakStmt 0x153890e28 <line:36:6>
    | | |   |-CallExpr 0x153890ef8 <line:38:11, col:30> 'int'
    | | |   | |-ImplicitCastExpr 0x153890ee0 <col:11> 'int (*)()' <FunctionToPointerDecay>
    | | |   | | `-DeclRefExpr 0x153890e80 <col:11> 'int ()' Function 0x153095758 'DECR_LEN' 'int ()'
    | | |   | |-ImplicitCastExpr 0x153890f28 <col:20> 'unsigned int' <LValueToRValue>
    | | |   | | `-DeclRefExpr 0x153890ea0 <col:20> 'unsigned int' lvalue ParmVar 0x15307e228 'der_len' 'unsigned int'
    | | |   | `-IntegerLiteral 0x153890ec0 <col:29> 'int' 1
    | | |   |-IfStmt 0x153891130 <line:39:4, line:40:13>
    | | |   | |-BinaryOperator 0x1538910c8 <line:39:8, col:24> 'int' contains-errors '!='
    | | |   | | |-ArraySubscriptExpr 0x153891088 <col:8, col:19> 'const unsigned char' lvalue
    | | |   | | | |-ImplicitCastExpr 0x153891058 <col:8> 'const unsigned char *' <LValueToRValue>
    | | |   | | | | `-DeclRefExpr 0x153890f40 <col:8> 'const unsigned char *' lvalue ParmVar 0x15307e1a8 'der' 'const unsigned char *'
    | | |   | | | `-ImplicitCastExpr 0x153891070 <col:12> 'int' <LValueToRValue>
    | | |   | | |   `-DeclRefExpr 0x153890f60 <col:12> 'int' lvalue Var 0x15307e5b8 'counter' 'int'
    | | |   | | `-RecoveryExpr 0x1538910a8 <col:24> '<dependent type>' contains-errors lvalue
    | | |   | `-ReturnStmt 0x153891120 <line:40:6, col:13>
    | | |   |   `-RecoveryExpr 0x153891100 <col:13> '<dependent type>' contains-errors lvalue
    | | |   |-UnaryOperator 0x153891170 <line:42:4, col:11> 'int' postfix '++'
    | | |   | `-DeclRefExpr 0x153891150 <col:4> 'int' lvalue Var 0x15307e5b8 'counter' 'int'
    | | |   |-BinaryOperator 0x153891318 <line:44:4, col:61> 'int' '='
    | | |   | |-DeclRefExpr 0x153891188 <col:4> 'int' lvalue Var 0x15307e4b8 'len2' 'int'
    | | |   | `-CallExpr 0x1538912c8 <col:11, col:61> 'int'
    | | |   |   |-ImplicitCastExpr 0x1538912b0 <col:11> 'int (*)()' <FunctionToPointerDecay>
    | | |   |   | `-DeclRefExpr 0x1538911a8 <col:11> 'int ()' Function 0x153095388 'asn1_get_length_der' 'int ()'
    | | |   |   |-BinaryOperator 0x153891238 <col:32, col:38> 'const unsigned char *' '+'
    | | |   |   | |-ImplicitCastExpr 0x153891208 <col:32> 'const unsigned char *' <LValueToRValue>
    | | |   |   | | `-DeclRefExpr 0x1538911c8 <col:32> 'const unsigned char *' lvalue ParmVar 0x15307e1a8 'der' 'const unsigned char *'
    | | |   |   | `-ImplicitCastExpr 0x153891220 <col:38> 'int' <LValueToRValue>
    | | |   |   |   `-DeclRefExpr 0x1538911e8 <col:38> 'int' lvalue Var 0x15307e5b8 'counter' 'int'
    | | |   |   |-ImplicitCastExpr 0x153891300 <col:47> 'unsigned int' <LValueToRValue>
    | | |   |   | `-DeclRefExpr 0x153891258 <col:47> 'unsigned int' lvalue ParmVar 0x15307e228 'der_len' 'unsigned int'
    | | |   |   `-UnaryOperator 0x153891298 <col:56, col:57> 'int *' prefix '&' cannot overflow
    | | |   |     `-DeclRefExpr 0x153891278 <col:57> 'int' lvalue Var 0x15307e538 'len3' 'int'
    | | |   |-IfStmt 0x1538913f8 <line:45:4, line:46:13>
    | | |   | |-BinaryOperator 0x153891390 <line:45:8, col:16> 'int' '<='
    | | |   | | |-ImplicitCastExpr 0x153891378 <col:8> 'int' <LValueToRValue>
    | | |   | | | `-DeclRefExpr 0x153891338 <col:8> 'int' lvalue Var 0x15307e4b8 'len2' 'int'
    | | |   | | `-IntegerLiteral 0x153891358 <col:16> 'int' 0
    | | |   | `-ReturnStmt 0x1538913e8 <line:46:6, col:13>
    | | |   |   `-RecoveryExpr 0x1538913c8 <col:13> '<dependent type>' contains-errors lvalue
    | | |   |-CallExpr 0x153891500 <line:48:11, col:40> 'int'
    | | |   | |-ImplicitCastExpr 0x1538914e8 <col:11> 'int (*)()' <FunctionToPointerDecay>
    | | |   | | `-DeclRefExpr 0x153891418 <col:11> 'int ()' Function 0x153095758 'DECR_LEN' 'int ()'
    | | |   | |-ImplicitCastExpr 0x153891530 <col:20> 'unsigned int' <LValueToRValue>
    | | |   | | `-DeclRefExpr 0x153891438 <col:20> 'unsigned int' lvalue ParmVar 0x15307e228 'der_len' 'unsigned int'
    | | |   | `-BinaryOperator 0x1538914c8 <col:29, col:36> 'int' '+'
    | | |   |   |-ImplicitCastExpr 0x153891498 <col:29> 'int' <LValueToRValue>
    | | |   |   | `-DeclRefExpr 0x153891458 <col:29> 'int' lvalue Var 0x15307e538 'len3' 'int'
    | | |   |   `-ImplicitCastExpr 0x1538914b0 <col:36> 'int' <LValueToRValue>
    | | |   |     `-DeclRefExpr 0x153891478 <col:36> 'int' lvalue Var 0x15307e4b8 'len2' 'int'
    | | |   |-CompoundAssignOperator 0x1538915f8 <line:49:4, col:22> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    | | |   | |-DeclRefExpr 0x153891548 <col:4> 'int' lvalue Var 0x15307e5b8 'counter' 'int'
    | | |   | `-BinaryOperator 0x1538915d8 <col:15, col:22> 'int' '+'
    | | |   |   |-ImplicitCastExpr 0x1538915a8 <col:15> 'int' <LValueToRValue>
    | | |   |   | `-DeclRefExpr 0x153891568 <col:15> 'int' lvalue Var 0x15307e538 'len3' 'int'
    | | |   |   `-ImplicitCastExpr 0x1538915c0 <col:22> 'int' <LValueToRValue>
    | | |   |     `-DeclRefExpr 0x153891588 <col:22> 'int' lvalue Var 0x15307e4b8 'len2' 'int'
    | | |   `-CompoundAssignOperator 0x153891680 <line:51:4, col:15> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    | | |     |-DeclRefExpr 0x153891628 <col:4> 'int' lvalue Var 0x15307e638 'tot_len' 'int'
    | | |     `-ImplicitCastExpr 0x153891668 <col:15> 'int' <LValueToRValue>
    | | |       `-DeclRefExpr 0x153891648 <col:15> 'int' lvalue Var 0x15307e4b8 'len2' 'int'
    | | `-IfStmt 0x1548091b8 <line:55:7, line:69:2>
    | |   |-RecoveryExpr 0x153891730 <line:55:11> '<dependent type>' contains-errors lvalue
    | |   `-CompoundStmt 0x154809170 <line:56:2, line:69:2>
    | |     |-DeclStmt 0x1538917e8 <line:57:4, col:44>
    | |     | `-VarDecl 0x153891780 <col:4, col:18> col:18 invalid temp 'unsigned char'
    | |     |-DeclStmt 0x153891880 <line:58:4, col:11>
    | |     | `-VarDecl 0x153891818 <col:4, col:8> col:8 used ret 'int'
    | |     |-BinaryOperator 0x153891930 <line:60:4, col:23> 'int' contains-errors '='
    | |     | |-DeclRefExpr 0x153891898 <col:4> 'int' lvalue Var 0x15307e4b8 'len2' 'int'
    | |     | `-ImplicitCastExpr 0x153891918 <col:11, col:23> 'int' contains-errors <IntegralCast>
    | |     |   `-UnaryExprOrTypeTraitExpr 0x1538918f8 <col:11, col:23> 'unsigned long' contains-errors sizeof
    | |     |     `-ParenExpr 0x1538918d8 <col:18, col:23> '<dependent type>' contains-errors lvalue
    | |     |       `-RecoveryExpr 0x1538918b8 <col:19> '<dependent type>' contains-errors lvalue
    | |     |-CallExpr 0x153891ac8 <line:62:4, col:41> '<dependent type>' contains-errors
    | |     | |-DeclRefExpr 0x153891a30 <col:4> 'int ()' Function 0x153891978 'asn1_length_der' 'int ()'
    | |     | |-DeclRefExpr 0x153891a50 <col:21> 'int' lvalue Var 0x15307e638 'tot_len' 'int'
    | |     | |-RecoveryExpr 0x153891a70 <col:30> '<dependent type>' contains-errors lvalue
    | |     | `-UnaryOperator 0x153891ab0 <col:36, col:37> 'int *' prefix '&' cannot overflow
    | |     |   `-DeclRefExpr 0x153891a90 <col:37> 'int' lvalue Var 0x15307e4b8 'len2' 'int'
    | |     |-CallExpr 0x154808e60 <line:63:4, col:37> '<dependent type>' contains-errors
    | |     | |-DeclRefExpr 0x153891be0 <col:4> 'int ()' Function 0x153891b28 '_asn1_set_value' 'int ()'
    | |     | |-RecoveryExpr 0x154808e00 <col:21> '<dependent type>' contains-errors lvalue
    | |     | |-RecoveryExpr 0x154808e20 <col:27> '<dependent type>' contains-errors lvalue
    | |     | `-DeclRefExpr 0x154808e40 <col:33> 'int' lvalue Var 0x15307e4b8 'len2' 'int'
    | |     |-BinaryOperator 0x154809050 <line:65:4, col:53> 'int' contains-errors '='
    | |     | |-DeclRefExpr 0x154808e98 <col:4> 'int' lvalue Var 0x153891818 'ret' 'int'
    | |     | `-CallExpr 0x154809018 <col:10, col:53> '<dependent type>' contains-errors
    | |     |   |-DeclRefExpr 0x154808f98 <col:10> 'int ()' Function 0x154808ee0 '_asn1_extract_der_octet' 'int ()'
    | |     |   |-RecoveryExpr 0x154808fb8 <col:35> '<dependent type>' contains-errors lvalue
    | |     |   |-DeclRefExpr 0x154808fd8 <col:41> 'const unsigned char *' lvalue ParmVar 0x15307e1a8 'der' 'const unsigned char *'
    | |     |   `-DeclRefExpr 0x154808ff8 <col:46> 'unsigned int' lvalue ParmVar 0x15307e228 'der_len' 'unsigned int'
    | |     `-IfStmt 0x154809150 <line:66:4, line:67:13>
    | |       |-BinaryOperator 0x1548090e8 <line:66:8, col:15> 'int' contains-errors '!='
    | |       | |-DeclRefExpr 0x154809070 <col:8> 'int' lvalue Var 0x153891818 'ret' 'int'
    | |       | `-RecoveryExpr 0x1548090c8 <col:15> '<dependent type>' contains-errors lvalue
    | |       `-ReturnStmt 0x154809140 <line:67:6, col:13>
    | |         `-ImplicitCastExpr 0x154809128 <col:13> 'int' <LValueToRValue>
    | |           `-DeclRefExpr 0x154809108 <col:13> 'int' lvalue Var 0x153891818 'ret' 'int'
    | `-CompoundStmt 0x154809758 <line:72:5, line:81:5>
    |   |-BinaryOperator 0x154809360 <line:73:7, col:54> 'int' '='
    |   | |-DeclRefExpr 0x154809228 <col:7> 'int' lvalue Var 0x15307e4b8 'len2' 'int'
    |   | `-CallExpr 0x1548092f8 <col:14, col:54> 'int'
    |   |   |-ImplicitCastExpr 0x1548092e0 <col:14> 'int (*)()' <FunctionToPointerDecay>
    |   |   | `-DeclRefExpr 0x154809248 <col:14> 'int ()' Function 0x153095388 'asn1_get_length_der' 'int ()'
    |   |   |-ImplicitCastExpr 0x154809330 <col:35> 'const unsigned char *' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x154809268 <col:35> 'const unsigned char *' lvalue ParmVar 0x15307e1a8 'der' 'const unsigned char *'
    |   |   |-ImplicitCastExpr 0x154809348 <col:40> 'unsigned int' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x154809288 <col:40> 'unsigned int' lvalue ParmVar 0x15307e228 'der_len' 'unsigned int'
    |   |   `-UnaryOperator 0x1548092c8 <col:49, col:50> 'int *' prefix '&' cannot overflow
    |   |     `-DeclRefExpr 0x1548092a8 <col:50> 'int' lvalue Var 0x15307e538 'len3' 'int'
    |   |-IfStmt 0x154809440 <line:74:7, line:75:9>
    |   | |-BinaryOperator 0x1548093d8 <line:74:11, col:18> 'int' '<'
    |   | | |-ImplicitCastExpr 0x1548093c0 <col:11> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x154809380 <col:11> 'int' lvalue Var 0x15307e4b8 'len2' 'int'
    |   | | `-IntegerLiteral 0x1548093a0 <col:18> 'int' 0
    |   | `-ReturnStmt 0x154809430 <line:75:2, col:9>
    |   |   `-RecoveryExpr 0x154809410 <col:9> '<dependent type>' contains-errors lvalue
    |   |-CallExpr 0x154809548 <line:77:7, col:34> 'int'
    |   | |-ImplicitCastExpr 0x154809530 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x154809460 <col:7> 'int ()' Function 0x153095758 'DECR_LEN' 'int ()'
    |   | |-ImplicitCastExpr 0x154809578 <col:16> 'unsigned int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x154809480 <col:16> 'unsigned int' lvalue ParmVar 0x15307e228 'der_len' 'unsigned int'
    |   | `-BinaryOperator 0x154809510 <col:25, col:30> 'int' '+'
    |   |   |-ImplicitCastExpr 0x1548094e0 <col:25> 'int' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x1548094a0 <col:25> 'int' lvalue Var 0x15307e538 'len3' 'int'
    |   |   `-ImplicitCastExpr 0x1548094f8 <col:30> 'int' <LValueToRValue>
    |   |     `-DeclRefExpr 0x1548094c0 <col:30> 'int' lvalue Var 0x15307e4b8 'len2' 'int'
    |   |-BinaryOperator 0x154809640 <line:78:7, col:24> 'int' '='
    |   | |-DeclRefExpr 0x154809590 <col:7> 'int' lvalue Var 0x15307e5b8 'counter' 'int'
    |   | `-BinaryOperator 0x154809620 <col:17, col:24> 'int' '+'
    |   |   |-ImplicitCastExpr 0x1548095f0 <col:17> 'int' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x1548095b0 <col:17> 'int' lvalue Var 0x15307e538 'len3' 'int'
    |   |   `-ImplicitCastExpr 0x154809608 <col:24> 'int' <LValueToRValue>
    |   |     `-DeclRefExpr 0x1548095d0 <col:24> 'int' lvalue Var 0x15307e4b8 'len2' 'int'
    |   `-IfStmt 0x154809738 <line:79:7, line:80:37>
    |     |-RecoveryExpr 0x154809660 <line:79:11> '<dependent type>' contains-errors lvalue
    |     `-CallExpr 0x154809700 <line:80:2, col:37> '<dependent type>' contains-errors
    |       |-DeclRefExpr 0x154809680 <col:2> 'int ()' Function 0x153891b28 '_asn1_set_value' 'int ()'
    |       |-RecoveryExpr 0x1548096a0 <col:19> '<dependent type>' contains-errors lvalue
    |       |-DeclRefExpr 0x1548096c0 <col:25> 'const unsigned char *' lvalue ParmVar 0x15307e1a8 'der' 'const unsigned char *'
    |       `-DeclRefExpr 0x1548096e0 <col:30> 'int' lvalue Var 0x15307e5b8 'counter' 'int'
    |-BinaryOperator 0x154809848 <line:83:3, col:10> 'int' '='
    | |-UnaryOperator 0x1548097f8 <col:3, col:4> 'int' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x1548097e0 <col:4> 'int *' <LValueToRValue>
    | |   `-DeclRefExpr 0x1548097c0 <col:4> 'int *' lvalue ParmVar 0x15307e2d8 'len' 'int *'
    | `-ImplicitCastExpr 0x154809830 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x154809810 <col:10> 'int' lvalue Var 0x15307e5b8 'counter' 'int'
    `-LabelStmt 0x154809900 <line:86:1, line:87:10> 'cleanup'
      `-ReturnStmt 0x1548098a0 <col:3, col:10>
        `-ImplicitCastExpr 0x154809888 <col:10> 'int' <LValueToRValue>
          `-DeclRefExpr 0x154809868 <col:10> 'int' lvalue Var 0x15307e780 'result' 'int'
