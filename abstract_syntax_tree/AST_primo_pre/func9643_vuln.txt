`-FunctionDecl 0x12b80e350  line:1:13 ax25_kill_by_device 'void (struct net_device *)' static
  |-ParmVarDecl 0x12b80e248 <col:33, col:52> col:52 used dev 'struct net_device *'
  `-CompoundStmt 0x12b122c20 <line:2:1, line:29:1>
    |-DeclStmt 0x12b826878 <line:5:2, col:17>
    | |-RecordDecl 0x12b826690 <col:2, col:9> col:9 struct sock
    | `-VarDecl 0x12b8267f8 <col:2, col:15> col:15 used sk 'struct sock *'
    |-IfStmt 0x12b826af0 <line:7:2, line:8:3>
    | |-RecoveryExpr 0x12b826ac0 <line:7:6, col:44> '_Bool' contains-errors
    | `-ReturnStmt 0x12b826ae0 <line:8:3>
    |-CallExpr 0x12b826ca0 <line:10:2, col:30> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x12b826bf0 <col:2> 'int ()' Function 0x12b826b38 'spin_lock_bh' 'int ()'
    | `-UnaryOperator 0x12b826c88 <col:15, col:16> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   `-RecoveryExpr 0x12b826c68 <col:16> '<dependent type>' contains-errors lvalue
    |-LabelStmt 0x12b826f18 <line:11:1, line:12:29> 'again'
    | `-CallExpr 0x12b826e98 <col:2, col:29> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x12b826da8 <col:2> 'int ()' Function 0x12b826cf0 'ax25_for_each' 'int ()'
    |   |-RecoveryExpr 0x12b826e40 <col:16> '<dependent type>' contains-errors lvalue
    |   `-UnaryOperator 0x12b826e80 <col:19, col:20> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-RecoveryExpr 0x12b826e60 <col:20> '<dependent type>' contains-errors lvalue
    `-CompoundStmt 0x12b122be8 <col:31, line:27:2>
      `-IfStmt 0x12b122bc8 <line:13:3, line:26:3>
        |-BinaryOperator 0x12b827058 <line:13:7, col:22> 'int' contains-errors '=='
        | |-CXXDependentScopeMemberExpr 0x12b826ff0 <col:7, col:10> '<dependent type>' contains-errors lvalue ->ax25_dev
        | | `-RecoveryExpr 0x12b826fd0 <col:7> '<dependent type>' contains-errors lvalue
        | `-RecoveryExpr 0x12b827038 <col:22> '<dependent type>' contains-errors lvalue
        `-CompoundStmt 0x12b122b80 <col:32, line:26:3>
          |-BinaryOperator 0x12b827180 <line:14:4, col:12> 'struct sock *' contains-errors '='
          | |-DeclRefExpr 0x12b827078 <col:4> 'struct sock *' lvalue Var 0x12b8267f8 'sk' 'struct sock *'
          | `-CXXDependentScopeMemberExpr 0x12b827138 <col:9, col:12> '<dependent type>' contains-errors lvalue ->sk
          |   `-RecoveryExpr 0x12b827118 <col:9> '<dependent type>' contains-errors lvalue
          |-CallExpr 0x12b8272d8 <line:15:4, col:16> 'int'
          | |-ImplicitCastExpr 0x12b8272c0 <col:4> 'int (*)()' <FunctionToPointerDecay>
          | | `-DeclRefExpr 0x12b827280 <col:4> 'int ()' Function 0x12b8271c8 'sock_hold' 'int ()'
          | `-ImplicitCastExpr 0x12b827300 <col:14> 'struct sock *' <LValueToRValue>
          |   `-DeclRefExpr 0x12b8272a0 <col:14> 'struct sock *' lvalue Var 0x12b8267f8 'sk' 'struct sock *'
          |-CallExpr 0x12b8274a8 <line:16:4, col:34> '<dependent type>' contains-errors
          | |-DeclRefExpr 0x12b8273f8 <col:4> 'int ()' Function 0x12b827340 'spin_unlock_bh' 'int ()'
          | `-UnaryOperator 0x12b827490 <col:19, col:20> '<dependent type>' contains-errors prefix '&' cannot overflow
          |   `-RecoveryExpr 0x12b827470 <col:20> '<dependent type>' contains-errors lvalue
          |-CallExpr 0x12b122618 <line:17:4, col:16> 'int'
          | |-ImplicitCastExpr 0x12b122600 <col:4> 'int (*)()' <FunctionToPointerDecay>
          | | `-DeclRefExpr 0x12b8275b0 <col:4> 'int ()' Function 0x12b8274f8 'lock_sock' 'int ()'
          | `-ImplicitCastExpr 0x12b122640 <col:14> 'struct sock *' <LValueToRValue>
          |   `-DeclRefExpr 0x12b8275d0 <col:14> 'struct sock *' lvalue Var 0x12b8267f8 'sk' 'struct sock *'
          |-CallExpr 0x12b122890 <line:20:4, col:19> 'int'
          | |-ImplicitCastExpr 0x12b122878 <col:4> 'int (*)()' <FunctionToPointerDecay>
          | | `-DeclRefExpr 0x12b122838 <col:4> 'int ()' Function 0x12b122780 'release_sock' 'int ()'
          | `-ImplicitCastExpr 0x12b1228b8 <col:17> 'struct sock *' <LValueToRValue>
          |   `-DeclRefExpr 0x12b122858 <col:17> 'struct sock *' lvalue Var 0x12b8267f8 'sk' 'struct sock *'
          |-CallExpr 0x12b122b28 <line:23:4, col:15> 'int'
          | |-ImplicitCastExpr 0x12b122b10 <col:4> 'int (*)()' <FunctionToPointerDecay>
          | | `-DeclRefExpr 0x12b122ad0 <col:4> 'int ()' Function 0x12b122a18 'sock_put' 'int ()'
          | `-ImplicitCastExpr 0x12b122b50 <col:13> 'struct sock *' <LValueToRValue>
          |   `-DeclRefExpr 0x12b122af0 <col:13> 'struct sock *' lvalue Var 0x12b8267f8 'sk' 'struct sock *'
          `-GotoStmt 0x12b122b68 <line:25:4, col:9> 'again' 0x12b826ec8
