`-FunctionDecl 0x128128c98  line:1:12 invalid asn1_find_indefinite_length 'int (const unsigned char *, int, int *, int *, const char **)' static
  |-ParmVarDecl 0x128128908 <col:40, col:61> col:61 used data 'const unsigned char *'
  |-ParmVarDecl 0x1281289a0 <col:67, col:74> col:74 invalid datalen 'int'
  |-ParmVarDecl 0x128128a58 <line:2:12, col:20> col:20 invalid _dp 'int *'
  |-ParmVarDecl 0x128128ad8 <col:25, col:33> col:33 referenced invalid _len 'int *'
  |-ParmVarDecl 0x128128b88 <line:3:12, col:25> col:25 used _errmsg 'const char **'
  `-CompoundStmt 0x128143e70 <line:4:1, line:82:1>
    |-DeclStmt 0x128128e80 <line:5:2, col:24>
    | |-VarDecl 0x128128d80 <col:2, col:16> col:16 used tag 'unsigned char'
    | `-VarDecl 0x128128e00 <col:2, col:21> col:21 used tmp 'unsigned char'
    |-BinaryOperator 0x1281420b0 <line:6:2, col:25> '<dependent type>' contains-errors ','
    | |-BinaryOperator 0x128142070 <col:2, col:20> '<dependent type>' contains-errors ','
    | | |-BinaryOperator 0x128142030 <col:2, col:15> 'unsigned long' contains-errors '='
    | | | |-UnaryExprOrTypeTraitExpr 0x128128fd0 <col:2, col:9> 'unsigned long' contains-errors sizeof
    | | | | `-RecoveryExpr 0x128128fb0 <col:9> '<dependent type>' contains-errors lvalue
    | | | `-UnaryOperator 0x128142018 <col:14, col:15> '<dependent type>' contains-errors prefix '*' cannot overflow
    | | |   `-ImplicitCastExpr 0x128142000 <col:15> '<dependent type>' contains-errors <LValueToRValue>
    | | |     `-RecoveryExpr 0x128128ed0 <col:15> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x128142050 <col:20> '<dependent type>' contains-errors lvalue
    | `-RecoveryExpr 0x128142090 <col:25> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x128142170 <line:7:2, col:21>
    | `-VarDecl 0x1281420e8 <col:2, col:20> col:6 used indef_level 'int' cinit
    |   `-IntegerLiteral 0x128142150 <col:20> 'int' 1
    |-LabelStmt 0x128142660 <line:9:1, line:14:2> 'next_tag'
    | `-IfStmt 0x1281425f0 <line:10:2, line:14:2>
    |   |-CallExpr 0x128142420 <line:10:6, col:31> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x1281422e0 <col:6> 'int ()' Function 0x128142228 'unlikely' 'int ()'
    |   | `-BinaryOperator 0x128142400 <col:15, col:30> 'int' contains-errors '<'
    |   |   |-BinaryOperator 0x1281423e0 <col:15, col:25> '<dependent type>' contains-errors '-'
    |   |   | |-RecoveryExpr 0x128142300 <col:15> '<dependent type>' contains-errors lvalue
    |   |   | `-RecoveryExpr 0x1281423c0 <col:25> '<dependent type>' contains-errors lvalue
    |   |   `-IntegerLiteral 0x128142358 <col:30> 'int' 2
    |   `-CompoundStmt 0x1281425d0 <col:34, line:14:2>
    |     |-IfStmt 0x128142548 <line:11:3, line:12:9>
    |     | |-BinaryOperator 0x1281424c0 <line:11:7, col:18> 'int' contains-errors '=='
    |     | | |-RecoveryExpr 0x128142448 <col:7> '<dependent type>' contains-errors lvalue
    |     | | `-RecoveryExpr 0x1281424a0 <col:18> '<dependent type>' contains-errors lvalue
    |     | `-GotoStmt 0x128142530 <line:12:4, col:9> 'missing_eoc' 0x1281424e0
    |     `-GotoStmt 0x1281425b8 <line:13:3, col:8> 'data_overrun_error' 0x128142568
    |-IfStmt 0x128142cd8 <line:18:2, line:28:2>
    | |-BinaryOperator 0x128142760 <line:18:6, col:13> 'int' '=='
    | | |-ImplicitCastExpr 0x128142748 <col:6> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x128142730 <col:6> 'unsigned char' <LValueToRValue>
    | | |   `-DeclRefExpr 0x1281426f0 <col:6> 'unsigned char' lvalue Var 0x128128d80 'tag' 'unsigned char'
    | | `-IntegerLiteral 0x128142710 <col:13> 'int' 0
    | `-CompoundStmt 0x128142cb0 <col:16, line:28:2>
    |   |-IfStmt 0x128142878 <line:20:3, line:21:9>
    |   | |-RecoveryExpr 0x1281427f0 <line:20:7, col:21> '_Bool' contains-errors
    |   | `-GotoStmt 0x128142860 <line:21:4, col:9> 'invalid_eoc' 0x128142810
    |   |-IfStmt 0x128142c78 <line:22:3, line:26:3>
    |   | |-BinaryOperator 0x1281428f0 <line:22:7, col:24> 'int' '<='
    |   | | |-UnaryOperator 0x1281428b8 <col:7, col:9> 'int' prefix '--'
    |   | | | `-DeclRefExpr 0x128142898 <col:9> 'int' lvalue Var 0x1281420e8 'indef_level' 'int'
    |   | | `-IntegerLiteral 0x1281428d0 <col:24> 'int' 0
    |   | `-CompoundStmt 0x128142c50 <col:27, line:26:3>
    |   |   |-BinaryOperator 0x128142ad8 <line:23:4, col:18> '<dependent type>' contains-errors '='
    |   |   | |-UnaryOperator 0x128142a50 <col:4, col:5> '<dependent type>' contains-errors prefix '*' cannot overflow
    |   |   | | `-ImplicitCastExpr 0x128142a38 <col:5> '<dependent type>' contains-errors <LValueToRValue>
    |   |   | |   `-RecoveryExpr 0x128142910 <col:5> '<dependent type>' contains-errors lvalue
    |   |   | `-BinaryOperator 0x128142ab8 <col:12, col:18> '<dependent type>' contains-errors '-'
    |   |   |   |-RecoveryExpr 0x128142a68 <col:12> '<dependent type>' contains-errors lvalue
    |   |   |   `-UnaryOperator 0x128142aa0 <col:17, col:18> '<dependent type>' contains-errors prefix '*' cannot overflow
    |   |   |     `-ImplicitCastExpr 0x128142a88 <col:18> '<dependent type>' contains-errors <LValueToRValue>
    |   |   |       `-RecoveryExpr 0x128142978 <col:18> '<dependent type>' contains-errors lvalue
    |   |   |-BinaryOperator 0x128142c00 <line:24:4, col:11> '<dependent type>' contains-errors '='
    |   |   | |-UnaryOperator 0x128142bc8 <col:4, col:5> '<dependent type>' contains-errors prefix '*' cannot overflow
    |   |   | | `-ImplicitCastExpr 0x128142bb0 <col:5> '<dependent type>' contains-errors <LValueToRValue>
    |   |   | |   `-RecoveryExpr 0x128142af8 <col:5> '<dependent type>' contains-errors lvalue
    |   |   | `-RecoveryExpr 0x128142be0 <col:11> '<dependent type>' contains-errors lvalue
    |   |   `-ReturnStmt 0x128142c40 <line:25:4, col:11>
    |   |     `-IntegerLiteral 0x128142c20 <col:11> 'int' 0
    |   `-GotoStmt 0x128142c98 <line:27:3, col:8> 'next_tag' 0x128142610
    |-IfStmt 0x128143278 <line:30:2, line:36:2>
    | |-CallExpr 0x128142f48 <line:30:6, col:44> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x128142cf8 <col:6> 'int ()' Function 0x128142228 'unlikely' 'int ()'
    | | `-BinaryOperator 0x128142f28 <col:15, col:31> 'int' contains-errors '=='
    | |   |-ParenExpr 0x128142ee8 <col:15, col:26> 'int'
    | |   | `-BinaryOperator 0x128142ec8 <col:16, col:22> 'int' '&'
    | |   |   |-ImplicitCastExpr 0x128142eb0 <col:16> 'int' <IntegralCast>
    | |   |   | `-ImplicitCastExpr 0x128142e98 <col:16> 'unsigned char' <LValueToRValue>
    | |   |   |   `-DeclRefExpr 0x128142d18 <col:16> 'unsigned char' lvalue Var 0x128128d80 'tag' 'unsigned char'
    | |   |   `-IntegerLiteral 0x128142d38 <col:22> 'int' 31
    | |   `-RecoveryExpr 0x128142f08 <col:31> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x128143260 <col:47, line:36:2>
    |   `-DoStmt 0x128143240 <line:31:3, line:35:22>
    |     |-CompoundStmt 0x128143198 <line:31:6, line:35:3>
    |     | `-IfStmt 0x128143108 <line:32:4, line:33:10>
    |     |   |-CallExpr 0x1281430c8 <line:32:8, col:33> '<dependent type>' contains-errors
    |     |   | |-DeclRefExpr 0x128142f70 <col:8> 'int ()' Function 0x128142228 'unlikely' 'int ()'
    |     |   | `-BinaryOperator 0x1281430a8 <col:17, col:32> 'int' contains-errors '<'
    |     |   |   |-BinaryOperator 0x128143088 <col:17, col:27> '<dependent type>' contains-errors '-'
    |     |   |   | |-RecoveryExpr 0x128142f90 <col:17> '<dependent type>' contains-errors lvalue
    |     |   |   | `-RecoveryExpr 0x128143068 <col:27> '<dependent type>' contains-errors lvalue
    |     |   |   `-IntegerLiteral 0x128143000 <col:32> 'int' 2
    |     |   `-GotoStmt 0x1281430f0 <line:33:5, col:10> 'data_overrun_error' 0x128142568
    |     `-BinaryOperator 0x128143220 <line:35:12, col:18> 'int' '&'
    |       |-ImplicitCastExpr 0x128143208 <col:12> 'int' <IntegralCast>
    |       | `-ImplicitCastExpr 0x1281431f0 <col:12> 'unsigned char' <LValueToRValue>
    |       |   `-DeclRefExpr 0x1281431b0 <col:12> 'unsigned char' lvalue Var 0x128128e00 'tmp' 'unsigned char'
    |       `-IntegerLiteral 0x1281431d0 <col:18> 'int' 128
    |-IfStmt 0x128143418 <line:40:2, line:43:2>
    | |-BinaryOperator 0x1281433c8 <line:40:6, col:13> 'int' contains-errors '<='
    | | |-RecoveryExpr 0x1281433a8 <col:6> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x128143348 <col:13> 'int' 127
    | `-CompoundStmt 0x128143400 <col:19, line:43:2>
    |   `-GotoStmt 0x1281433e8 <line:42:3, col:8> 'next_tag' 0x128142610
    |-IfStmt 0x1281435f8 <line:45:2, line:51:2>
    | |-RecoveryExpr 0x128143458 <line:45:6, col:44> '_Bool' contains-errors
    | `-CompoundStmt 0x1281435d0 <col:47, line:51:2>
    |   |-IfStmt 0x128143560 <line:47:3, line:48:9>
    |   | |-RecoveryExpr 0x1281434d8 <line:47:7, col:55> '_Bool' contains-errors
    |   | `-GotoStmt 0x128143548 <line:48:4, col:9> 'indefinite_len_primitive' 0x1281434f8
    |   |-UnaryOperator 0x1281435a0 <line:49:3, col:14> 'int' postfix '++'
    |   | `-DeclRefExpr 0x128143580 <col:3> 'int' lvalue Var 0x1281420e8 'indef_level' 'int'
    |   `-GotoStmt 0x1281435b8 <line:50:3, col:8> 'next_tag' 0x128142610
    |-IfStmt 0x128143700 <line:54:2, line:55:8>
    | |-RecoveryExpr 0x128143678 <line:54:6, col:37> '_Bool' contains-errors
    | `-GotoStmt 0x1281436e8 <line:55:3, col:8> 'length_too_long' 0x128143698
    |-IfStmt 0x128143798 <line:56:2, line:57:8>
    | |-RecoveryExpr 0x128143760 <line:56:6, col:31> '_Bool' contains-errors
    | `-GotoStmt 0x128143780 <line:57:3, col:8> 'data_overrun_error' 0x128142568
    |-GotoStmt 0x128143848 <line:63:2, col:7> 'next_tag' 0x128142610
    |-LabelStmt 0x128143960 <line:65:1, line:66:13> 'length_too_long'
    | `-BinaryOperator 0x128143940 <col:2, col:13> 'const char *' '='
    |   |-UnaryOperator 0x128143898 <col:2, col:3> 'const char *' lvalue prefix '*' cannot overflow
    |   | `-ImplicitCastExpr 0x128143880 <col:3> 'const char **' <LValueToRValue>
    |   |   `-DeclRefExpr 0x128143860 <col:3> 'const char **' lvalue ParmVar 0x128128b88 '_errmsg' 'const char **'
    |   `-ImplicitCastExpr 0x128143928 <col:13> 'const char *' <NoOp>
    |     `-ImplicitCastExpr 0x128143910 <col:13> 'char *' <ArrayToPointerDecay>
    |       `-StringLiteral 0x1281438f0 <col:13> 'char[4]' lvalue "STR"
    |-GotoStmt 0x1281439d0 <line:67:2, col:7> 'error' 0x128143980
    |-LabelStmt 0x128143aa8 <line:68:1, line:69:13> 'indefinite_len_primitive'
    | `-BinaryOperator 0x128143a88 <col:2, col:13> 'const char *' '='
    |   |-UnaryOperator 0x128143a20 <col:2, col:3> 'const char *' lvalue prefix '*' cannot overflow
    |   | `-ImplicitCastExpr 0x128143a08 <col:3> 'const char **' <LValueToRValue>
    |   |   `-DeclRefExpr 0x1281439e8 <col:3> 'const char **' lvalue ParmVar 0x128128b88 '_errmsg' 'const char **'
    |   `-ImplicitCastExpr 0x128143a70 <col:13> 'const char *' <NoOp>
    |     `-ImplicitCastExpr 0x128143a58 <col:13> 'char *' <ArrayToPointerDecay>
    |       `-StringLiteral 0x128143a38 <col:13> 'char[4]' lvalue "STR"
    |-GotoStmt 0x128143ac8 <line:70:2, col:7> 'error' 0x128143980
    |-LabelStmt 0x128143ba0 <line:71:1, line:72:13> 'invalid_eoc'
    | `-BinaryOperator 0x128143b80 <col:2, col:13> 'const char *' '='
    |   |-UnaryOperator 0x128143b18 <col:2, col:3> 'const char *' lvalue prefix '*' cannot overflow
    |   | `-ImplicitCastExpr 0x128143b00 <col:3> 'const char **' <LValueToRValue>
    |   |   `-DeclRefExpr 0x128143ae0 <col:3> 'const char **' lvalue ParmVar 0x128128b88 '_errmsg' 'const char **'
    |   `-ImplicitCastExpr 0x128143b68 <col:13> 'const char *' <NoOp>
    |     `-ImplicitCastExpr 0x128143b50 <col:13> 'char *' <ArrayToPointerDecay>
    |       `-StringLiteral 0x128143b30 <col:13> 'char[4]' lvalue "STR"
    |-GotoStmt 0x128143bc0 <line:73:2, col:7> 'error' 0x128143980
    |-LabelStmt 0x128143c98 <line:74:1, line:75:13> 'data_overrun_error'
    | `-BinaryOperator 0x128143c78 <col:2, col:13> 'const char *' '='
    |   |-UnaryOperator 0x128143c10 <col:2, col:3> 'const char *' lvalue prefix '*' cannot overflow
    |   | `-ImplicitCastExpr 0x128143bf8 <col:3> 'const char **' <LValueToRValue>
    |   |   `-DeclRefExpr 0x128143bd8 <col:3> 'const char **' lvalue ParmVar 0x128128b88 '_errmsg' 'const char **'
    |   `-ImplicitCastExpr 0x128143c60 <col:13> 'const char *' <NoOp>
    |     `-ImplicitCastExpr 0x128143c48 <col:13> 'char *' <ArrayToPointerDecay>
    |       `-StringLiteral 0x128143c28 <col:13> 'char[4]' lvalue "STR"
    |-GotoStmt 0x128143cb8 <line:76:2, col:7> 'error' 0x128143980
    |-LabelStmt 0x128143d90 <line:77:1, line:78:13> 'missing_eoc'
    | `-BinaryOperator 0x128143d70 <col:2, col:13> 'const char *' '='
    |   |-UnaryOperator 0x128143d08 <col:2, col:3> 'const char *' lvalue prefix '*' cannot overflow
    |   | `-ImplicitCastExpr 0x128143cf0 <col:3> 'const char **' <LValueToRValue>
    |   |   `-DeclRefExpr 0x128143cd0 <col:3> 'const char **' lvalue ParmVar 0x128128b88 '_errmsg' 'const char **'
    |   `-ImplicitCastExpr 0x128143d58 <col:13> 'const char *' <NoOp>
    |     `-ImplicitCastExpr 0x128143d40 <col:13> 'char *' <ArrayToPointerDecay>
    |       `-StringLiteral 0x128143d20 <col:13> 'char[4]' lvalue "STR"
    |-LabelStmt 0x128143e08 <line:79:1, col:6> 'error'
    | `-NullStmt 0x128143e00 <col:6>
    `-ReturnStmt 0x128143e60 <line:81:2, col:10>
      `-UnaryOperator 0x128143e48 <col:9, col:10> 'int' prefix '-'
        `-IntegerLiteral 0x128143e28 <col:10> 'int' 1
