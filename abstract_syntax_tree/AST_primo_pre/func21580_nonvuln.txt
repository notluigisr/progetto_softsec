`-FunctionDecl 0x1590a2cd8  line:1:1 invalid layout_store 'int (struct mddev *, const char *, int)'
  |-ParmVarDecl 0x159085848 <col:14, col:28> col:28 used mddev 'struct mddev *'
  |-ParmVarDecl 0x1590858c8 <col:35, col:47> col:47 used buf 'const char *'
  |-ParmVarDecl 0x159085960 <col:52, col:59> col:59 invalid len 'int'
  `-CompoundStmt 0x1590a5138 <line:2:1, line:31:1>
    |-DeclStmt 0x1590a2e18 <line:3:2, col:16>
    | `-VarDecl 0x1590a2db0 <col:2, col:15> col:15 used n 'unsigned int'
    |-DeclStmt 0x1590a2eb0 <line:4:2, col:9>
    | `-VarDecl 0x1590a2e48 <col:2, col:6> col:6 used err 'int'
    |-BinaryOperator 0x1590a31a8 <line:6:2, col:30> 'int' '='
    | |-DeclRefExpr 0x1590a2ec8 <col:2> 'int' lvalue Var 0x1590a2e48 'err' 'int'
    | `-CallExpr 0x1590a3158 <col:8, col:30> 'int'
    |   |-ImplicitCastExpr 0x1590a3140 <col:8> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x1590a3040 <col:8> 'int ()' Function 0x1590a2f88 'kstrtouint' 'int ()'
    |   |-ImplicitCastExpr 0x1590a3190 <col:19> 'const char *' <LValueToRValue>
    |   | `-DeclRefExpr 0x1590a3060 <col:19> 'const char *' lvalue ParmVar 0x1590858c8 'buf' 'const char *'
    |   |-IntegerLiteral 0x1590a3080 <col:24> 'int' 10
    |   `-UnaryOperator 0x1590a30f0 <col:28, col:29> 'unsigned int *' prefix '&' cannot overflow
    |     `-DeclRefExpr 0x1590a30a0 <col:29> 'unsigned int' lvalue Var 0x1590a2db0 'n' 'unsigned int'
    |-IfStmt 0x1590a3288 <line:7:2, line:8:10>
    | |-BinaryOperator 0x1590a3220 <line:7:6, col:12> 'int' '<'
    | | |-ImplicitCastExpr 0x1590a3208 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1590a31c8 <col:6> 'int' lvalue Var 0x1590a2e48 'err' 'int'
    | | `-IntegerLiteral 0x1590a31e8 <col:12> 'int' 0
    | `-ReturnStmt 0x1590a3278 <line:8:3, col:10>
    |   `-ImplicitCastExpr 0x1590a3260 <col:10> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x1590a3240 <col:10> 'int' lvalue Var 0x1590a2e48 'err' 'int'
    |-BinaryOperator 0x1590a3440 <line:9:2, col:24> 'int' '='
    | |-DeclRefExpr 0x1590a32a8 <col:2> 'int' lvalue Var 0x1590a2e48 'err' 'int'
    | `-CallExpr 0x1590a3400 <col:8, col:24> 'int'
    |   |-ImplicitCastExpr 0x1590a33e8 <col:8> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x1590a33a8 <col:8> 'int ()' Function 0x1590a32f0 'mddev_lock' 'int ()'
    |   `-ImplicitCastExpr 0x1590a3428 <col:19> 'struct mddev *' <LValueToRValue>
    |     `-DeclRefExpr 0x1590a33c8 <col:19> 'struct mddev *' lvalue ParmVar 0x159085848 'mddev' 'struct mddev *'
    |-IfStmt 0x1590a34e0 <line:10:2, line:11:10>
    | |-ImplicitCastExpr 0x1590a3480 <line:10:6> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x1590a3460 <col:6> 'int' lvalue Var 0x1590a2e48 'err' 'int'
    | `-ReturnStmt 0x1590a34d0 <line:11:3, col:10>
    |   `-ImplicitCastExpr 0x1590a34b8 <col:10> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x1590a3498 <col:10> 'int' lvalue Var 0x1590a2e48 'err' 'int'
    |-IfStmt 0x1590a4ed0 <line:13:2, line:28:2> has_else
    | |-RecoveryExpr 0x1590a3538 <line:13:6, col:13> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x1590a3500 <col:6> 'struct mddev *' lvalue ParmVar 0x159085848 'mddev' 'struct mddev *'
    | |-CompoundStmt 0x1590a4c60 <col:19, line:24:2>
    | | `-IfStmt 0x1590a4c30 <line:14:3, line:23:3> has_else
    | |   |-BinaryOperator 0x1590a3660 <line:14:7, col:37> 'int' contains-errors '=='
    | |   | |-CXXDependentScopeMemberExpr 0x1590a35c0 <col:7, col:20> '<dependent type>' contains-errors lvalue ->check_reshape
    | |   | | `-RecoveryExpr 0x1590a3598 <col:7, col:14> '<dependent type>' contains-errors lvalue
    | |   | |   `-DeclRefExpr 0x1590a3560 <col:7> 'struct mddev *' lvalue ParmVar 0x159085848 'mddev' 'struct mddev *'
    | |   | `-RecoveryExpr 0x1590a3640 <col:37> '<dependent type>' contains-errors lvalue
    | |   |-BinaryOperator 0x1590a3758 <line:15:4, col:11> 'int' contains-errors '='
    | |   | |-DeclRefExpr 0x1590a3680 <col:4> 'int' lvalue Var 0x1590a2e48 'err' 'int'
    | |   | `-UnaryOperator 0x1590a3740 <col:10, col:11> '<dependent type>' contains-errors prefix '-' cannot overflow
    | |   |   `-ImplicitCastExpr 0x1590a3728 <col:11> '<dependent type>' contains-errors <LValueToRValue>
    | |   |     `-RecoveryExpr 0x1590a3708 <col:11> '<dependent type>' contains-errors lvalue
    | |   `-IfStmt 0x1590a4c00 <line:16:8, line:23:3> has_else
    | |     |-RecoveryExpr 0x1590a37b0 <line:16:12, col:19> '<dependent type>' contains-errors lvalue
    | |     | `-DeclRefExpr 0x1590a3778 <col:12> 'struct mddev *' lvalue ParmVar 0x159085848 'mddev' 'struct mddev *'
    | |     |-BinaryOperator 0x1590a38b0 <line:17:4, col:11> 'int' contains-errors '='
    | |     | |-DeclRefExpr 0x1590a37d8 <col:4> 'int' lvalue Var 0x1590a2e48 'err' 'int'
    | |     | `-UnaryOperator 0x1590a3898 <col:10, col:11> '<dependent type>' contains-errors prefix '-' cannot overflow
    | |     |   `-ImplicitCastExpr 0x1590a3880 <col:11> '<dependent type>' contains-errors <LValueToRValue>
    | |     |     `-RecoveryExpr 0x1590a3860 <col:11> '<dependent type>' contains-errors lvalue
    | |     `-CompoundStmt 0x1590a3bd8 <line:18:8, line:23:3>
    | |       |-BinaryOperator 0x1590a3950 <line:19:4, col:24> '<dependent type>' contains-errors '='
    | |       | |-RecoveryExpr 0x1590a3908 <col:4, col:11> '<dependent type>' contains-errors lvalue
    | |       | | `-DeclRefExpr 0x1590a38d0 <col:4> 'struct mddev *' lvalue ParmVar 0x159085848 'mddev' 'struct mddev *'
    | |       | `-DeclRefExpr 0x1590a3930 <col:24> 'unsigned int' lvalue Var 0x1590a2db0 'n' 'unsigned int'
    | |       |-BinaryOperator 0x1590a3a80 <line:20:4, col:42> 'int' contains-errors '='
    | |       | |-DeclRefExpr 0x1590a3970 <col:4> 'int' lvalue Var 0x1590a2e48 'err' 'int'
    | |       | `-CallExpr 0x1590a3a58 <col:10, col:42> '<dependent type>' contains-errors
    | |       |   |-CXXDependentScopeMemberExpr 0x1590a39f0 <col:10, col:23> '<dependent type>' contains-errors lvalue ->check_reshape
    | |       |   | `-RecoveryExpr 0x1590a39c8 <col:10, col:17> '<dependent type>' contains-errors lvalue
    | |       |   |   `-DeclRefExpr 0x1590a3990 <col:10> 'struct mddev *' lvalue ParmVar 0x159085848 'mddev' 'struct mddev *'
    | |       |   `-DeclRefExpr 0x1590a3a38 <col:37> 'struct mddev *' lvalue ParmVar 0x159085848 'mddev' 'struct mddev *'
    | |       `-IfStmt 0x1590a3bb8 <line:21:4, line:22:32>
    | |         |-ImplicitCastExpr 0x1590a3ac0 <line:21:8> 'int' <LValueToRValue>
    | |         | `-DeclRefExpr 0x1590a3aa0 <col:8> 'int' lvalue Var 0x1590a2e48 'err' 'int'
    | |         `-BinaryOperator 0x1590a3b98 <line:22:5, col:32> '<dependent type>' contains-errors '='
    | |           |-RecoveryExpr 0x1590a3b10 <col:5, col:12> '<dependent type>' contains-errors lvalue
    | |           | `-DeclRefExpr 0x1590a3ad8 <col:5> 'struct mddev *' lvalue ParmVar 0x159085848 'mddev' 'struct mddev *'
    | |           `-RecoveryExpr 0x1590a3b70 <col:25, col:32> '<dependent type>' contains-errors lvalue
    | |             `-DeclRefExpr 0x1590a3b38 <col:25> 'struct mddev *' lvalue ParmVar 0x159085848 'mddev' 'struct mddev *'
    | `-CompoundStmt 0x1590a4eb0 <line:24:9, line:28:2>
    |   |-BinaryOperator 0x1590a4cf8 <line:25:3, col:23> '<dependent type>' contains-errors '='
    |   | |-RecoveryExpr 0x1590a4cb0 <col:3, col:10> '<dependent type>' contains-errors lvalue
    |   | | `-DeclRefExpr 0x1590a4c78 <col:3> 'struct mddev *' lvalue ParmVar 0x159085848 'mddev' 'struct mddev *'
    |   | `-DeclRefExpr 0x1590a4cd8 <col:23> 'unsigned int' lvalue Var 0x1590a2db0 'n' 'unsigned int'
    |   `-IfStmt 0x1590a4e90 <line:26:3, line:27:20>
    |     |-BinaryOperator 0x1590a4dd0 <line:26:7, col:34> 'int' contains-errors '=='
    |     | |-RecoveryExpr 0x1590a4d50 <col:7, col:14> '<dependent type>' contains-errors lvalue
    |     | | `-DeclRefExpr 0x1590a4d18 <col:7> 'struct mddev *' lvalue ParmVar 0x159085848 'mddev' 'struct mddev *'
    |     | `-RecoveryExpr 0x1590a4db0 <col:34> '<dependent type>' contains-errors lvalue
    |     `-BinaryOperator 0x1590a4e70 <line:27:4, col:20> '<dependent type>' contains-errors '='
    |       |-RecoveryExpr 0x1590a4e28 <col:4, col:11> '<dependent type>' contains-errors lvalue
    |       | `-DeclRefExpr 0x1590a4df0 <col:4> 'struct mddev *' lvalue ParmVar 0x159085848 'mddev' 'struct mddev *'
    |       `-DeclRefExpr 0x1590a4e50 <col:20> 'unsigned int' lvalue Var 0x1590a2db0 'n' 'unsigned int'
    |-CallExpr 0x1590a5038 <line:29:2, col:20> 'int'
    | |-ImplicitCastExpr 0x1590a5020 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x1590a4fe0 <col:2> 'int ()' Function 0x1590a4f28 'mddev_unlock' 'int ()'
    | `-ImplicitCastExpr 0x1590a5060 <col:15> 'struct mddev *' <LValueToRValue>
    |   `-DeclRefExpr 0x1590a5000 <col:15> 'struct mddev *' lvalue ParmVar 0x159085848 'mddev' 'struct mddev *'
    `-ReturnStmt 0x1590a5128 <line:30:2, col:16>
      `-BinaryConditionalOperator 0x1590a50e8 <col:9, col:16> '<dependent type>' contains-errors
        |-ImplicitCastExpr 0x1590a50b8 <col:9> 'int' <LValueToRValue>
        | `-DeclRefExpr 0x1590a5078 <col:9> 'int' lvalue Var 0x1590a2e48 'err' 'int'
        |-OpaqueValueExpr 0x1590a50d0 <col:9> 'int'
        | `-ImplicitCastExpr 0x1590a50b8 <col:9> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x1590a5078 <col:9> 'int' lvalue Var 0x1590a2e48 'err' 'int'
        |-OpaqueValueExpr 0x1590a50d0 <col:9> 'int'
        | `-ImplicitCastExpr 0x1590a50b8 <col:9> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x1590a5078 <col:9> 'int' lvalue Var 0x1590a2e48 'err' 'int'
        `-RecoveryExpr 0x1590a5098 <col:16> '<dependent type>' contains-errors lvalue
