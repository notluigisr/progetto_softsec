`-FunctionDecl 0x1249281f8  line:1:14 invalid token 'char *(int *)' static
  |-ParmVarDecl 0x124928128 <col:20, col:26> col:26 invalid stream 'int *'
  `-CompoundStmt 0x124942608 <line:2:1, line:24:1>
    |-DeclStmt 0x1249283c0 <line:3:5, col:16>
    | |-VarDecl 0x1249282c0 <col:5, col:9> col:9 used ch 'int'
    | `-VarDecl 0x124928340 <col:5, col:13> col:13 used idx 'int'
    |-WhileStmt 0x1249419c8 <line:6:5, line:7:50>
    | |-BinaryOperator 0x1249419a0 <line:6:12, line:7:46> 'int' contains-errors '||'
    | | |-BinaryOperator 0x124941948 <line:6:12, line:7:32> 'int' contains-errors '||'
    | | | |-BinaryOperator 0x1249418f0 <line:6:12, line:7:19> 'int' contains-errors '||'
    | | | | |-BinaryOperator 0x124941898 <line:6:12, col:49> 'int' contains-errors '||'
    | | | | | |-BinaryOperator 0x124928610 <col:12, col:36> 'int' contains-errors '=='
    | | | | | | |-ParenExpr 0x1249285d8 <col:12, col:31> 'int' contains-errors
    | | | | | | | `-BinaryOperator 0x1249285b8 <col:13, col:30> 'int' contains-errors '='
    | | | | | | |   |-DeclRefExpr 0x1249283d8 <col:13> 'int' lvalue Var 0x1249282c0 'ch' 'int'
    | | | | | | |   `-CallExpr 0x124928590 <col:18, col:30> '<dependent type>' contains-errors
    | | | | | | |     |-DeclRefExpr 0x124928550 <col:18> 'int ()' Function 0x124928498 'fgetc' 'int ()'
    | | | | | | |     `-RecoveryExpr 0x124928570 <col:24> '<dependent type>' contains-errors lvalue
    | | | | | | `-CharacterLiteral 0x1249285f8 <col:36> 'int' 32
    | | | | | `-BinaryOperator 0x124941878 <col:43, col:49> 'int' contains-errors '=='
    | | | | |   |-DeclRefExpr 0x124928630 <col:43> 'int' lvalue Var 0x1249282c0 'ch' 'int'
    | | | | |   `-RecoveryExpr 0x124941858 <col:49> '<dependent type>' contains-errors lvalue
    | | | | `-BinaryOperator 0x1249418d0 <line:7:13, col:19> 'int' '=='
    | | | |   |-ImplicitCastExpr 0x1249418b8 <col:13> 'int' <LValueToRValue>
    | | | |   | `-DeclRefExpr 0x1249286a8 <col:13> 'int' lvalue Var 0x1249282c0 'ch' 'int'
    | | | |   `-CharacterLiteral 0x1249286c8 <col:19> 'int' 44
    | | | `-BinaryOperator 0x124941928 <col:26, col:32> 'int' '=='
    | | |   |-ImplicitCastExpr 0x124941910 <col:26> 'int' <LValueToRValue>
    | | |   | `-DeclRefExpr 0x124928738 <col:26> 'int' lvalue Var 0x1249282c0 'ch' 'int'
    | | |   `-CharacterLiteral 0x124928758 <col:32> 'int' 9
    | | `-BinaryOperator 0x124941980 <col:40, col:46> 'int' '=='
    | |   |-ImplicitCastExpr 0x124941968 <col:40> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x1249287c8 <col:40> 'int' lvalue Var 0x1249282c0 'ch' 'int'
    | |   `-CharacterLiteral 0x1249287e8 <col:46> 'int' 59
    | `-NullStmt 0x1249419c0 <col:50>
    |-BinaryOperator 0x124941a28 <line:9:5, col:11> 'int' '='
    | |-DeclRefExpr 0x1249419e8 <col:5> 'int' lvalue Var 0x124928340 'idx' 'int'
    | `-IntegerLiteral 0x124941a08 <col:11> 'int' 0
    |-WhileStmt 0x124942070 <line:10:5, line:15:5>
    | |-BinaryOperator 0x124941f38 <line:10:12, line:11:48> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x124941ee0 <line:10:12, line:11:35> 'int' contains-errors '&&'
    | | | |-BinaryOperator 0x124941e88 <line:10:12, line:11:21> 'int' contains-errors '&&'
    | | | | |-BinaryOperator 0x124941e30 <line:10:12, col:44> 'int' contains-errors '&&'
    | | | | | |-BinaryOperator 0x124941dd0 <col:12, col:31> 'int' contains-errors '&&'
    | | | | | | |-BinaryOperator 0x124941d78 <col:12, col:18> 'int' contains-errors '!='
    | | | | | | | |-DeclRefExpr 0x124941a48 <col:12> 'int' lvalue Var 0x1249282c0 'ch' 'int'
    | | | | | | | `-RecoveryExpr 0x124941d58 <col:18> '<dependent type>' contains-errors lvalue
    | | | | | | `-BinaryOperator 0x124941db0 <col:25, col:31> 'int' '!='
    | | | | | |   |-ImplicitCastExpr 0x124941d98 <col:25> 'int' <LValueToRValue>
    | | | | | |   | `-DeclRefExpr 0x124941aa0 <col:25> 'int' lvalue Var 0x1249282c0 'ch' 'int'
    | | | | | |   `-CharacterLiteral 0x124941ac0 <col:31> 'int' 32
    | | | | | `-BinaryOperator 0x124941e10 <col:38, col:44> 'int' contains-errors '!='
    | | | | |   |-DeclRefExpr 0x124941b30 <col:38> 'int' lvalue Var 0x1249282c0 'ch' 'int'
    | | | | |   `-RecoveryExpr 0x124941df0 <col:44> '<dependent type>' contains-errors lvalue
    | | | | `-BinaryOperator 0x124941e68 <line:11:15, col:21> 'int' '!='
    | | | |   |-ImplicitCastExpr 0x124941e50 <col:15> 'int' <LValueToRValue>
    | | | |   | `-DeclRefExpr 0x124941ba8 <col:15> 'int' lvalue Var 0x1249282c0 'ch' 'int'
    | | | |   `-CharacterLiteral 0x124941bc8 <col:21> 'int' 9
    | | | `-BinaryOperator 0x124941ec0 <col:29, col:35> 'int' '!='
    | | |   |-ImplicitCastExpr 0x124941ea8 <col:29> 'int' <LValueToRValue>
    | | |   | `-DeclRefExpr 0x124941c38 <col:29> 'int' lvalue Var 0x1249282c0 'ch' 'int'
    | | |   `-CharacterLiteral 0x124941c58 <col:35> 'int' 58
    | | `-BinaryOperator 0x124941f18 <col:42, col:48> 'int' '!='
    | |   |-ImplicitCastExpr 0x124941f00 <col:42> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x124941cc8 <col:42> 'int' lvalue Var 0x1249282c0 'ch' 'int'
    | |   `-CharacterLiteral 0x124941ce8 <col:48> 'int' 59
    | `-CompoundStmt 0x124942058 <line:12:5, line:15:5>
    |   `-BinaryOperator 0x124942038 <line:14:9, col:26> 'int' contains-errors '='
    |     |-DeclRefExpr 0x124941fb0 <col:9> 'int' lvalue Var 0x1249282c0 'ch' 'int'
    |     `-CallExpr 0x124942010 <col:14, col:26> '<dependent type>' contains-errors
    |       |-DeclRefExpr 0x124941fd0 <col:14> 'int ()' Function 0x124928498 'fgetc' 'int ()'
    |       `-RecoveryExpr 0x124941ff0 <col:20> '<dependent type>' contains-errors lvalue
    `-IfStmt 0x1249424c0 <line:18:5, col:50>
      |-BinaryOperator 0x124942330 <col:9, col:27> 'int' '&&'
      | |-BinaryOperator 0x1249422a0 <col:9, col:16> 'int' '>='
      | | |-ImplicitCastExpr 0x124942288 <col:9> 'int' <LValueToRValue>
      | | | `-DeclRefExpr 0x124942248 <col:9> 'int' lvalue Var 0x124928340 'idx' 'int'
      | | `-IntegerLiteral 0x124942268 <col:16> 'int' 1
      | `-BinaryOperator 0x124942310 <col:21, col:27> 'int' '!='
      |   |-ImplicitCastExpr 0x1249422f8 <col:21> 'int' <LValueToRValue>
      |   | `-DeclRefExpr 0x1249422c0 <col:21> 'int' lvalue Var 0x1249282c0 'ch' 'int'
      |   `-CharacterLiteral 0x1249422e0 <col:27> 'int' 58
      `-CallExpr 0x124942490 <col:33, col:50> '<dependent type>' contains-errors
        |-DeclRefExpr 0x124942430 <col:33> 'int ()' Function 0x124942378 'ungetc' 'int ()'
        |-DeclRefExpr 0x124942450 <col:40> 'int' lvalue Var 0x1249282c0 'ch' 'int'
        `-RecoveryExpr 0x124942470 <col:44> '<dependent type>' contains-errors lvalue
