`-FunctionDecl 0x12e128e48  line:1:1 invalid parse_ber_header 'int (const unsigned char **, int *, int *, int *, int *, int *, int *, int *)'
  |-ParmVarDecl 0x12e128940 <col:19, col:41> col:41 used buffer 'const unsigned char **'
  |-ParmVarDecl 0x12e128a08 <col:49, col:57> col:57 invalid size 'int *'
  |-ParmVarDecl 0x12e128a88 <line:2:19, col:24> col:24 used r_class 'int *'
  |-ParmVarDecl 0x12e128b08 <col:33, col:38> col:38 used r_tag 'int *'
  |-ParmVarDecl 0x12e128b88 <line:3:19, col:24> col:24 used r_constructed 'int *'
  |-ParmVarDecl 0x12e128c08 <col:39, col:44> col:44 used r_ndef 'int *'
  |-ParmVarDecl 0x12e128c88 <line:4:19, col:27> col:27 referenced invalid r_length 'int *'
  |-ParmVarDecl 0x12e128d08 <col:37, col:45> col:45 invalid r_nhdr 'int *'
  `-CompoundStmt 0x12e80c938 <line:5:1, line:77:1>
    |-DeclStmt 0x12e128fb0 <line:6:3, col:8>
    | `-VarDecl 0x12e128f48 <col:3, col:7> col:7 used c 'int'
    |-DeclStmt 0x12e808868 <line:7:3, col:20>
    | `-VarDecl 0x12e808800 <col:3, col:17> col:17 used tag 'unsigned long'
    |-DeclStmt 0x12e808968 <line:8:3, col:37>
    | `-VarDecl 0x12e808898 <col:3, col:31> col:24 used buf 'const unsigned char *' cinit
    |   `-ImplicitCastExpr 0x12e808950 <col:30, col:31> 'const unsigned char *' <LValueToRValue>
    |     `-UnaryOperator 0x12e808938 <col:30, col:31> 'const unsigned char *' lvalue prefix '*' cannot overflow
    |       `-ImplicitCastExpr 0x12e808920 <col:31> 'const unsigned char **' <LValueToRValue>
    |         `-DeclRefExpr 0x12e808900 <col:31> 'const unsigned char **' lvalue ParmVar 0x12e128940 'buffer' 'const unsigned char **'
    |-BinaryOperator 0x12e808ad0 <line:9:3, col:20> 'unsigned long' contains-errors '='
    | |-UnaryExprOrTypeTraitExpr 0x12e808a80 <col:3, col:10> 'unsigned long' contains-errors sizeof
    | | `-RecoveryExpr 0x12e808a60 <col:10> '<dependent type>' contains-errors lvalue
    | `-UnaryOperator 0x12e808ab8 <col:19, col:20> '<dependent type>' contains-errors prefix '*' cannot overflow
    |   `-ImplicitCastExpr 0x12e808aa0 <col:20> '<dependent type>' contains-errors <LValueToRValue>
    |     `-RecoveryExpr 0x12e8089d0 <col:20> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x12e808b60 <line:11:3, col:13> 'int' '='
    | |-UnaryOperator 0x12e808b28 <col:3, col:4> 'int' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x12e808b10 <col:4> 'int *' <LValueToRValue>
    | |   `-DeclRefExpr 0x12e808af0 <col:4> 'int *' lvalue ParmVar 0x12e128c08 'r_ndef' 'int *'
    | `-IntegerLiteral 0x12e808b40 <col:13> 'int' 0
    |-BinaryOperator 0x12e808c40 <line:12:3, col:15> '<dependent type>' contains-errors '='
    | |-UnaryOperator 0x12e808c28 <col:3, col:4> '<dependent type>' contains-errors prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x12e808c10 <col:4> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x12e808b80 <col:4> '<dependent type>' contains-errors lvalue
    | `-IntegerLiteral 0x12e808bd0 <col:15> 'int' 0
    |-BinaryOperator 0x12e808d20 <line:13:3, col:13> '<dependent type>' contains-errors '='
    | |-UnaryOperator 0x12e808d08 <col:3, col:4> '<dependent type>' contains-errors prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x12e808cf0 <col:4> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x12e808c60 <col:4> '<dependent type>' contains-errors lvalue
    | `-IntegerLiteral 0x12e808cb0 <col:13> 'int' 0
    |-IfStmt 0x12e809050 <line:16:3, line:17:56>
    | |-UnaryOperator 0x12e808de0 <line:16:7, col:8> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x12e808dc8 <col:8> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x12e808da8 <col:8> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x12e809040 <line:17:5, col:56>
    |   `-CallExpr 0x12e809010 <col:12, col:56> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x12e808f50 <col:12> 'int ()' Function 0x12e808e98 'gpg_err_make' 'int ()'
    |     |-RecoveryExpr 0x12e808fd0 <col:26> '<dependent type>' contains-errors lvalue
    |     `-RecoveryExpr 0x12e808ff0 <col:45> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x12e809110 <line:18:3, col:11> 'int' '='
    | |-DeclRefExpr 0x12e809070 <col:3> 'int' lvalue Var 0x12e128f48 'c' 'int'
    | `-ImplicitCastExpr 0x12e8090f8 <col:7, col:11> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x12e8090e0 <col:7, col:11> 'unsigned char' <LValueToRValue>
    |     `-UnaryOperator 0x12e8090c8 <col:7, col:11> 'const unsigned char' lvalue prefix '*' cannot overflow
    |       `-UnaryOperator 0x12e8090b0 <col:8, col:11> 'const unsigned char *' postfix '++'
    |         `-DeclRefExpr 0x12e809090 <col:8> 'const unsigned char *' lvalue Var 0x12e808898 'buf' 'const unsigned char *'
    |-UnaryOperator 0x12e809178 <col:15, col:21> '<dependent type>' contains-errors postfix '--' cannot overflow
    | `-RecoveryExpr 0x12e809150 <col:15> '<dependent type>' contains-errors lvalue
    |   `-DeclRefExpr 0x12e809130 <col:15> 'int *' lvalue ParmVar 0x12e128c88 'r_length' 'int *'
    |-UnaryOperator 0x12e809228 <col:25, col:28> '<dependent type>' contains-errors prefix '++' cannot overflow
    | `-UnaryOperator 0x12e809210 <col:27, col:28> '<dependent type>' contains-errors prefix '*' cannot overflow
    |   `-ImplicitCastExpr 0x12e8091f8 <col:28> '<dependent type>' contains-errors <LValueToRValue>
    |     `-RecoveryExpr 0x12e809190 <col:28> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x12e809368 <line:20:3, col:28> 'int' '='
    | |-UnaryOperator 0x12e809278 <col:3, col:4> 'int' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x12e809260 <col:4> 'int *' <LValueToRValue>
    | |   `-DeclRefExpr 0x12e809240 <col:4> 'int *' lvalue ParmVar 0x12e128a88 'r_class' 'int *'
    | `-BinaryOperator 0x12e809348 <col:14, col:28> 'int' '>>'
    |   |-ParenExpr 0x12e809308 <col:14, col:23> 'int'
    |   | `-BinaryOperator 0x12e8092e8 <col:15, col:19> 'int' '&'
    |   |   |-ImplicitCastExpr 0x12e8092d0 <col:15> 'int' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x12e809290 <col:15> 'int' lvalue Var 0x12e128f48 'c' 'int'
    |   |   `-IntegerLiteral 0x12e8092b0 <col:19> 'int' 192
    |   `-IntegerLiteral 0x12e809328 <col:28> 'int' 6
    |-BinaryOperator 0x12e8094a0 <line:21:3, col:31> 'int' '='
    | |-UnaryOperator 0x12e8093c0 <col:3, col:4> 'int' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x12e8093a8 <col:4> 'int *' <LValueToRValue>
    | |   `-DeclRefExpr 0x12e809388 <col:4> 'int *' lvalue ParmVar 0x12e128b88 'r_constructed' 'int *'
    | `-UnaryOperator 0x12e809488 <col:20, col:31> 'int' prefix '!' cannot overflow
    |   `-UnaryOperator 0x12e809470 <col:21, col:31> 'int' prefix '!' cannot overflow
    |     `-ParenExpr 0x12e809450 <col:22, col:31> 'int'
    |       `-BinaryOperator 0x12e809430 <col:23, col:27> 'int' '&'
    |         |-ImplicitCastExpr 0x12e809418 <col:23> 'int' <LValueToRValue>
    |         | `-DeclRefExpr 0x12e8093d8 <col:23> 'int' lvalue Var 0x12e128f48 'c' 'int'
    |         `-IntegerLiteral 0x12e8093f8 <col:27> 'int' 32
    |-BinaryOperator 0x12e809570 <line:22:3, col:13> 'unsigned long' '='
    | |-DeclRefExpr 0x12e8094c0 <col:3> 'unsigned long' lvalue Var 0x12e808800 'tag' 'unsigned long'
    | `-ImplicitCastExpr 0x12e809558 <col:9, col:13> 'unsigned long' <IntegralCast>
    |   `-BinaryOperator 0x12e809538 <col:9, col:13> 'int' '&'
    |     |-ImplicitCastExpr 0x12e809520 <col:9> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x12e8094e0 <col:9> 'int' lvalue Var 0x12e128f48 'c' 'int'
    |     `-IntegerLiteral 0x12e809500 <col:13> 'int' 31
    |-IfStmt 0x12e80b0a8 <line:24:3, line:37:5>
    | |-BinaryOperator 0x12e809600 <line:24:7, col:14> 'int' '=='
    | | |-ImplicitCastExpr 0x12e8095d0 <col:7> 'unsigned long' <LValueToRValue>
    | | | `-DeclRefExpr 0x12e809590 <col:7> 'unsigned long' lvalue Var 0x12e808800 'tag' 'unsigned long'
    | | `-ImplicitCastExpr 0x12e8095e8 <col:14> 'unsigned long' <IntegralCast>
    | |   `-IntegerLiteral 0x12e8095b0 <col:14> 'int' 31
    | `-CompoundStmt 0x12e80b088 <line:25:5, line:37:5>
    |   |-BinaryOperator 0x12e809678 <line:26:7, col:13> 'unsigned long' '='
    |   | |-DeclRefExpr 0x12e809620 <col:7> 'unsigned long' lvalue Var 0x12e808800 'tag' 'unsigned long'
    |   | `-ImplicitCastExpr 0x12e809660 <col:13> 'unsigned long' <IntegralCast>
    |   |   `-IntegerLiteral 0x12e809640 <col:13> 'int' 0
    |   `-DoStmt 0x12e80b068 <line:27:7, line:36:22>
    |     |-CompoundStmt 0x12e80afb0 <line:28:9, line:35:9>
    |     | |-CompoundAssignOperator 0x12e8096f0 <line:29:11, col:19> 'unsigned long' '<<=' ComputeLHSTy='unsigned long' ComputeResultTy='unsigned long'
    |     | | |-DeclRefExpr 0x12e809698 <col:11> 'unsigned long' lvalue Var 0x12e808800 'tag' 'unsigned long'
    |     | | `-IntegerLiteral 0x12e8096b8 <col:19> 'int' 7
    |     | |-IfStmt 0x12e80ace0 <line:30:11, line:31:64>
    |     | | |-UnaryOperator 0x12e8097c0 <line:30:15, col:16> '<dependent type>' contains-errors prefix '!' cannot overflow
    |     | | | `-ImplicitCastExpr 0x12e8097a8 <col:16> '<dependent type>' contains-errors <LValueToRValue>
    |     | | |   `-RecoveryExpr 0x12e809788 <col:16> '<dependent type>' contains-errors lvalue
    |     | | `-ReturnStmt 0x12e80acd0 <line:31:13, col:64>
    |     | |   `-CallExpr 0x12e80aca0 <col:20, col:64> '<dependent type>' contains-errors
    |     | |     |-DeclRefExpr 0x12e8097d8 <col:20> 'int ()' Function 0x12e808e98 'gpg_err_make' 'int ()'
    |     | |     |-RecoveryExpr 0x12e80ac60 <col:34> '<dependent type>' contains-errors lvalue
    |     | |     `-RecoveryExpr 0x12e80ac80 <col:53> '<dependent type>' contains-errors lvalue
    |     | |-BinaryOperator 0x12e80ada0 <line:32:11, col:19> 'int' '='
    |     | | |-DeclRefExpr 0x12e80ad00 <col:11> 'int' lvalue Var 0x12e128f48 'c' 'int'
    |     | | `-ImplicitCastExpr 0x12e80ad88 <col:15, col:19> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x12e80ad70 <col:15, col:19> 'unsigned char' <LValueToRValue>
    |     | |     `-UnaryOperator 0x12e80ad58 <col:15, col:19> 'const unsigned char' lvalue prefix '*' cannot overflow
    |     | |       `-UnaryOperator 0x12e80ad40 <col:16, col:19> 'const unsigned char *' postfix '++'
    |     | |         `-DeclRefExpr 0x12e80ad20 <col:16> 'const unsigned char *' lvalue Var 0x12e808898 'buf' 'const unsigned char *'
    |     | |-UnaryOperator 0x12e80ae08 <col:23, col:29> '<dependent type>' contains-errors postfix '--' cannot overflow
    |     | | `-RecoveryExpr 0x12e80ade0 <col:23> '<dependent type>' contains-errors lvalue
    |     | |   `-DeclRefExpr 0x12e80adc0 <col:23> 'int *' lvalue ParmVar 0x12e128c88 'r_length' 'int *'
    |     | |-UnaryOperator 0x12e80aeb8 <col:33, col:36> '<dependent type>' contains-errors prefix '++' cannot overflow
    |     | | `-UnaryOperator 0x12e80aea0 <col:35, col:36> '<dependent type>' contains-errors prefix '*' cannot overflow
    |     | |   `-ImplicitCastExpr 0x12e80ae88 <col:36> '<dependent type>' contains-errors <LValueToRValue>
    |     | |     `-RecoveryExpr 0x12e80ae20 <col:36> '<dependent type>' contains-errors lvalue
    |     | `-CompoundAssignOperator 0x12e80af80 <line:33:11, col:22> 'unsigned long' '|=' ComputeLHSTy='unsigned long' ComputeResultTy='unsigned long'
    |     |   |-DeclRefExpr 0x12e80aed0 <col:11> 'unsigned long' lvalue Var 0x12e808800 'tag' 'unsigned long'
    |     |   `-ImplicitCastExpr 0x12e80af68 <col:18, col:22> 'unsigned long' <IntegralCast>
    |     |     `-BinaryOperator 0x12e80af48 <col:18, col:22> 'int' '&'
    |     |       |-ImplicitCastExpr 0x12e80af30 <col:18> 'int' <LValueToRValue>
    |     |       | `-DeclRefExpr 0x12e80aef0 <col:18> 'int' lvalue Var 0x12e128f48 'c' 'int'
    |     |       `-IntegerLiteral 0x12e80af10 <col:22> 'int' 127
    |     `-BinaryOperator 0x12e80b048 <line:36:14, col:18> 'int' '&'
    |       |-ImplicitCastExpr 0x12e80b030 <col:14> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x12e80aff0 <col:14> 'int' lvalue Var 0x12e128f48 'c' 'int'
    |       `-IntegerLiteral 0x12e80b010 <col:18> 'int' 128
    |-BinaryOperator 0x12e80b168 <line:38:3, col:12> 'int' '='
    | |-UnaryOperator 0x12e80b100 <col:3, col:4> 'int' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x12e80b0e8 <col:4> 'int *' <LValueToRValue>
    | |   `-DeclRefExpr 0x12e80b0c8 <col:4> 'int *' lvalue ParmVar 0x12e128b08 'r_tag' 'int *'
    | `-ImplicitCastExpr 0x12e80b150 <col:12> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x12e80b138 <col:12> 'unsigned long' <LValueToRValue>
    |     `-DeclRefExpr 0x12e80b118 <col:12> 'unsigned long' lvalue Var 0x12e808800 'tag' 'unsigned long'
    |-IfStmt 0x12e80b340 <line:41:3, line:42:56>
    | |-UnaryOperator 0x12e80b228 <line:41:7, col:8> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x12e80b210 <col:8> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x12e80b1f0 <col:8> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x12e80b330 <line:42:5, col:56>
    |   `-CallExpr 0x12e80b300 <col:12, col:56> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x12e80b240 <col:12> 'int ()' Function 0x12e808e98 'gpg_err_make' 'int ()'
    |     |-RecoveryExpr 0x12e80b2c0 <col:26> '<dependent type>' contains-errors lvalue
    |     `-RecoveryExpr 0x12e80b2e0 <col:45> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x12e80b400 <line:43:3, col:11> 'int' '='
    | |-DeclRefExpr 0x12e80b360 <col:3> 'int' lvalue Var 0x12e128f48 'c' 'int'
    | `-ImplicitCastExpr 0x12e80b3e8 <col:7, col:11> 'int' <IntegralCast>
    |   `-ImplicitCastExpr 0x12e80b3d0 <col:7, col:11> 'unsigned char' <LValueToRValue>
    |     `-UnaryOperator 0x12e80b3b8 <col:7, col:11> 'const unsigned char' lvalue prefix '*' cannot overflow
    |       `-UnaryOperator 0x12e80b3a0 <col:8, col:11> 'const unsigned char *' postfix '++'
    |         `-DeclRefExpr 0x12e80b380 <col:8> 'const unsigned char *' lvalue Var 0x12e808898 'buf' 'const unsigned char *'
    |-UnaryOperator 0x12e80b468 <col:15, col:21> '<dependent type>' contains-errors postfix '--' cannot overflow
    | `-RecoveryExpr 0x12e80b440 <col:15> '<dependent type>' contains-errors lvalue
    |   `-DeclRefExpr 0x12e80b420 <col:15> 'int *' lvalue ParmVar 0x12e128c88 'r_length' 'int *'
    |-UnaryOperator 0x12e80b518 <col:25, col:28> '<dependent type>' contains-errors prefix '++' cannot overflow
    | `-UnaryOperator 0x12e80b500 <col:27, col:28> '<dependent type>' contains-errors prefix '*' cannot overflow
    |   `-ImplicitCastExpr 0x12e80b4e8 <col:28> '<dependent type>' contains-errors <LValueToRValue>
    |     `-RecoveryExpr 0x12e80b480 <col:28> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x12e80c5c0 <line:45:3, line:68:5> has_else
    | |-UnaryOperator 0x12e80b5c8 <line:45:8, col:18> 'int' prefix '!' cannot overflow
    | | `-ParenExpr 0x12e80b5a8 <col:9, col:18> 'int'
    | |   `-BinaryOperator 0x12e80b588 <col:10, col:14> 'int' '&'
    | |     |-ImplicitCastExpr 0x12e80b570 <col:10> 'int' <LValueToRValue>
    | |     | `-DeclRefExpr 0x12e80b530 <col:10> 'int' lvalue Var 0x12e128f48 'c' 'int'
    | |     `-IntegerLiteral 0x12e80b550 <col:14> 'int' 128
    | |-BinaryOperator 0x12e80b6a0 <line:46:5, col:17> '<dependent type>' contains-errors '='
    | | |-UnaryOperator 0x12e80b688 <col:5, col:6> '<dependent type>' contains-errors prefix '*' cannot overflow
    | | | `-ImplicitCastExpr 0x12e80b670 <col:6> '<dependent type>' contains-errors <LValueToRValue>
    | | |   `-RecoveryExpr 0x12e80b5e0 <col:6> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x12e80b630 <col:17> 'int' lvalue Var 0x12e128f48 'c' 'int'
    | `-IfStmt 0x12e80c590 <line:47:8, line:68:5> has_else
    |   |-BinaryOperator 0x12e80b718 <line:47:12, col:17> 'int' '=='
    |   | |-ImplicitCastExpr 0x12e80b700 <col:12> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x12e80b6c0 <col:12> 'int' lvalue Var 0x12e128f48 'c' 'int'
    |   | `-IntegerLiteral 0x12e80b6e0 <col:17> 'int' 128
    |   |-BinaryOperator 0x12e80b7a8 <line:48:5, col:15> 'int' '='
    |   | |-UnaryOperator 0x12e80b770 <col:5, col:6> 'int' lvalue prefix '*' cannot overflow
    |   | | `-ImplicitCastExpr 0x12e80b758 <col:6> 'int *' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x12e80b738 <col:6> 'int *' lvalue ParmVar 0x12e128c08 'r_ndef' 'int *'
    |   | `-IntegerLiteral 0x12e80b788 <col:15> 'int' 1
    |   `-IfStmt 0x12e80c560 <line:49:8, line:68:5> has_else
    |     |-BinaryOperator 0x12e80b820 <line:49:12, col:17> 'int' '=='
    |     | |-ImplicitCastExpr 0x12e80b808 <col:12> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x12e80b7c8 <col:12> 'int' lvalue Var 0x12e128f48 'c' 'int'
    |     | `-IntegerLiteral 0x12e80b7e8 <col:17> 'int' 255
    |     |-ReturnStmt 0x12e80b930 <line:50:5, col:60>
    |     | `-CallExpr 0x12e80b900 <col:12, col:60> '<dependent type>' contains-errors
    |     |   |-DeclRefExpr 0x12e80b840 <col:12> 'int ()' Function 0x12e808e98 'gpg_err_make' 'int ()'
    |     |   |-RecoveryExpr 0x12e80b8c0 <col:26> '<dependent type>' contains-errors lvalue
    |     |   `-RecoveryExpr 0x12e80b8e0 <col:45> '<dependent type>' contains-errors lvalue
    |     `-CompoundStmt 0x12e80c530 <line:52:5, line:68:5>
    |       |-DeclStmt 0x12e80b9f8 <line:53:7, col:28>
    |       | `-VarDecl 0x12e80b958 <col:7, col:27> col:21 used len 'unsigned long' cinit
    |       |   `-ImplicitCastExpr 0x12e80b9e0 <col:27> 'unsigned long' <IntegralCast>
    |       |     `-IntegerLiteral 0x12e80b9c0 <col:27> 'int' 0
    |       |-DeclStmt 0x12e80bb08 <line:54:7, col:27>
    |       | `-VarDecl 0x12e80ba28 <col:7, col:23> col:11 used count 'int' cinit
    |       |   `-BinaryOperator 0x12e80bae8 <col:19, col:23> 'int' '&'
    |       |     |-ImplicitCastExpr 0x12e80bad0 <col:19> 'int' <LValueToRValue>
    |       |     | `-DeclRefExpr 0x12e80ba90 <col:19> 'int' lvalue Var 0x12e128f48 'c' 'int'
    |       |     `-IntegerLiteral 0x12e80bab0 <col:23> 'int' 127
    |       |-ForStmt 0x12e80c418 <line:59:7, line:66:9>
    |       | |-<<<NULL>>>
    |       | |-<<<NULL>>>
    |       | |-ImplicitCastExpr 0x12e80c080 <line:59:14> 'int' <LValueToRValue>
    |       | | `-DeclRefExpr 0x12e80c060 <col:14> 'int' lvalue Var 0x12e80ba28 'count' 'int'
    |       | |-UnaryOperator 0x12e80c0b8 <col:21, col:26> 'int' postfix '--'
    |       | | `-DeclRefExpr 0x12e80c098 <col:21> 'int' lvalue Var 0x12e80ba28 'count' 'int'
    |       | `-CompoundStmt 0x12e80c3e8 <line:60:9, line:66:9>
    |       |   |-CompoundAssignOperator 0x12e80c128 <line:61:11, col:19> 'unsigned long' '<<=' ComputeLHSTy='unsigned long' ComputeResultTy='unsigned long'
    |       |   | |-DeclRefExpr 0x12e80c0d0 <col:11> 'unsigned long' lvalue Var 0x12e80b958 'len' 'unsigned long'
    |       |   | `-IntegerLiteral 0x12e80c0f0 <col:19> 'int' 8
    |       |   |-BinaryOperator 0x12e80c238 <line:64:11, col:19> 'int' '='
    |       |   | |-DeclRefExpr 0x12e80c198 <col:11> 'int' lvalue Var 0x12e128f48 'c' 'int'
    |       |   | `-ImplicitCastExpr 0x12e80c220 <col:15, col:19> 'int' <IntegralCast>
    |       |   |   `-ImplicitCastExpr 0x12e80c208 <col:15, col:19> 'unsigned char' <LValueToRValue>
    |       |   |     `-UnaryOperator 0x12e80c1f0 <col:15, col:19> 'const unsigned char' lvalue prefix '*' cannot overflow
    |       |   |       `-UnaryOperator 0x12e80c1d8 <col:16, col:19> 'const unsigned char *' postfix '++'
    |       |   |         `-DeclRefExpr 0x12e80c1b8 <col:16> 'const unsigned char *' lvalue Var 0x12e808898 'buf' 'const unsigned char *'
    |       |   |-UnaryOperator 0x12e80c2f0 <col:33, col:36> '<dependent type>' contains-errors prefix '++' cannot overflow
    |       |   | `-UnaryOperator 0x12e80c2d8 <col:35, col:36> '<dependent type>' contains-errors prefix '*' cannot overflow
    |       |   |   `-ImplicitCastExpr 0x12e80c2c0 <col:36> '<dependent type>' contains-errors <LValueToRValue>
    |       |   |     `-RecoveryExpr 0x12e80c258 <col:36> '<dependent type>' contains-errors lvalue
    |       |   `-CompoundAssignOperator 0x12e80c3b8 <line:65:11, col:22> 'unsigned long' '|=' ComputeLHSTy='unsigned long' ComputeResultTy='unsigned long'
    |       |     |-DeclRefExpr 0x12e80c308 <col:11> 'unsigned long' lvalue Var 0x12e80b958 'len' 'unsigned long'
    |       |     `-ImplicitCastExpr 0x12e80c3a0 <col:18, col:22> 'unsigned long' <IntegralCast>
    |       |       `-BinaryOperator 0x12e80c380 <col:18, col:22> 'int' '&'
    |       |         |-ImplicitCastExpr 0x12e80c368 <col:18> 'int' <LValueToRValue>
    |       |         | `-DeclRefExpr 0x12e80c328 <col:18> 'int' lvalue Var 0x12e128f48 'c' 'int'
    |       |         `-IntegerLiteral 0x12e80c348 <col:22> 'int' 255
    |       `-BinaryOperator 0x12e80c510 <line:67:7, col:19> '<dependent type>' contains-errors '='
    |         |-UnaryOperator 0x12e80c4f8 <col:7, col:8> '<dependent type>' contains-errors prefix '*' cannot overflow
    |         | `-ImplicitCastExpr 0x12e80c4e0 <col:8> '<dependent type>' contains-errors <LValueToRValue>
    |         |   `-RecoveryExpr 0x12e80c450 <col:8> '<dependent type>' contains-errors lvalue
    |         `-DeclRefExpr 0x12e80c4a0 <col:19> 'unsigned long' lvalue Var 0x12e80b958 'len' 'unsigned long'
    |-IfStmt 0x12e80c7c0 <line:71:3, line:72:17>
    | |-RecoveryExpr 0x12e80c6c0 <line:71:7, col:40> '_Bool' contains-errors
    | `-BinaryOperator 0x12e80c7a0 <line:72:5, col:17> '<dependent type>' contains-errors '='
    |   |-UnaryOperator 0x12e80c788 <col:5, col:6> '<dependent type>' contains-errors prefix '*' cannot overflow
    |   | `-ImplicitCastExpr 0x12e80c770 <col:6> '<dependent type>' contains-errors <LValueToRValue>
    |   |   `-RecoveryExpr 0x12e80c6e0 <col:6> '<dependent type>' contains-errors lvalue
    |   `-IntegerLiteral 0x12e80c730 <col:17> 'int' 0
    |-BinaryOperator 0x12e80c868 <line:74:3, col:13> 'const unsigned char *' '='
    | |-UnaryOperator 0x12e80c818 <col:3, col:4> 'const unsigned char *' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x12e80c800 <col:4> 'const unsigned char **' <LValueToRValue>
    | |   `-DeclRefExpr 0x12e80c7e0 <col:4> 'const unsigned char **' lvalue ParmVar 0x12e128940 'buffer' 'const unsigned char **'
    | `-ImplicitCastExpr 0x12e80c850 <col:13> 'const unsigned char *' <LValueToRValue>
    |   `-DeclRefExpr 0x12e80c830 <col:13> 'const unsigned char *' lvalue Var 0x12e808898 'buf' 'const unsigned char *'
    `-ReturnStmt 0x12e80c928 <line:76:3, col:10>
      `-IntegerLiteral 0x12e80c908 <col:10> 'int' 0
