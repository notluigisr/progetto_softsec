`-FunctionDecl 0x14b128b10  line:1:13 dom_load_html 'void ()' static
  `-CompoundStmt 0x14b142968 <line:2:1, line:78:1>
    |-DeclStmt 0x14b128d40 <line:7:2, col:14>
    | `-VarDecl 0x14b128cd8 <col:2, col:8> col:8 used source 'char *'
    |-DeclStmt 0x14b128ef8 <line:8:2, col:31>
    | |-VarDecl 0x14b128d70 <col:2, col:6> col:6 used source_len 'int'
    | |-VarDecl 0x14b128df0 <col:2, col:18> col:18 used refcount 'int'
    | `-VarDecl 0x14b128e70 <col:2, col:28> col:28 used ret 'int'
    |-DeclStmt 0x14b128fc8 <line:9:2, col:18>
    | `-VarDecl 0x14b128f28 <col:2, col:17> col:7 used options 'long' cinit
    |   `-ImplicitCastExpr 0x14b128fb0 <col:17> 'long' <IntegralCast>
    |     `-IntegerLiteral 0x14b128f90 <col:17> 'int' 0
    |-IfStmt 0x14c809070 <line:14:2, line:16:2>
    | |-RecoveryExpr 0x14c809028 <line:14:6, col:97> '_Bool' contains-errors
    | `-CompoundStmt 0x14c809058 <col:106, line:16:2>
    |   `-ReturnStmt 0x14c809048 <line:15:3>
    |-IfStmt 0x14c809208 <line:18:2, line:21:2>
    | |-UnaryOperator 0x14c8090c8 <line:18:6, col:7> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x14c8090b0 <col:7> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x14c809090 <col:7> 'int' lvalue Var 0x14b128d70 'source_len' 'int'
    | `-CompoundStmt 0x14c8091f8 <col:19, line:21:2>
    |-IfStmt 0x14c809700 <line:23:2, line:28:2> has_else
    | |-RecoveryExpr 0x14c809228 <line:23:6, col:14> '_Bool' contains-errors
    | |-CompoundStmt 0x14c809368 <col:29, line:25:2>
    | `-CompoundStmt 0x14c8096e8 <col:9, line:28:2>
    |   `-BinaryOperator 0x14c809510 <line:26:3, col:32> 'int' '='
    |     |-DeclRefExpr 0x14c809378 <col:3> 'int' lvalue Var 0x14b128d70 'source_len' 'int'
    |     `-CallExpr 0x14c8094d0 <col:16, col:32> 'int'
    |       |-ImplicitCastExpr 0x14c8094b8 <col:16> 'int (*)()' <FunctionToPointerDecay>
    |       | `-DeclRefExpr 0x14c809478 <col:16> 'int ()' Function 0x14c8093c0 'xmlStrlen' 'int ()'
    |       `-ImplicitCastExpr 0x14c8094f8 <col:26> 'char *' <LValueToRValue>
    |         `-DeclRefExpr 0x14c809498 <col:26> 'char *' lvalue Var 0x14b128cd8 'source' 'char *'
    |-IfStmt 0x14c809760 <line:30:2, line:32:2>
    | |-RecoveryExpr 0x14c809730 <line:30:6, col:7> '_Bool' contains-errors
    | `-CompoundStmt 0x14c809750 <col:13, line:32:2>
    |-IfStmt 0x14c8098e8 <line:34:2, line:36:2>
    | |-ImplicitCastExpr 0x14c8097a0 <line:34:6> 'long' <LValueToRValue>
    | | `-DeclRefExpr 0x14c809780 <col:6> 'long' lvalue Var 0x14b128f28 'options' 'long'
    | `-CompoundStmt 0x14c8098d8 <col:15, line:36:2>
    |-IfStmt 0x14c809938 <line:40:2, line:43:2>
    | |-RecoveryExpr 0x14c809908 <line:40:6, col:19> '_Bool' contains-errors
    | `-CompoundStmt 0x14c809928 <col:25, line:43:2>
    `-IfStmt 0x14b142938 <line:51:2, line:77:2> has_else
      |-RecoveryExpr 0x14c809d78 <line:51:6, col:89> '_Bool' contains-errors
      |-CompoundStmt 0x14b1427a0 <col:92, line:75:2>
      | `-IfStmt 0x14b142680 <line:53:3, line:70:3>
      |   |-RecoveryExpr 0x14c809d98 <line:53:7, col:17> '_Bool' contains-errors
      |   `-CompoundStmt 0x14b142660 <col:23, line:70:3>
      |     |-IfStmt 0x14b1424b8 <line:56:4, line:64:4>
      |     | |-RecoveryExpr 0x14c809db8 <line:56:8, col:16> '_Bool' contains-errors
      |     | `-CompoundStmt 0x14b1424a0 <col:22, line:64:4>
      |     |   `-IfStmt 0x14b142480 <line:61:5, line:63:5>
      |     |     |-BinaryOperator 0x14b142450 <line:61:9, col:21> 'int' '!='
      |     |     | |-ImplicitCastExpr 0x14b142438 <col:9> 'int' <LValueToRValue>
      |     |     | | `-DeclRefExpr 0x14b1423f8 <col:9> 'int' lvalue Var 0x14b128df0 'refcount' 'int'
      |     |     | `-IntegerLiteral 0x14b142418 <col:21> 'int' 0
      |     |     `-CompoundStmt 0x14b142470 <col:24, line:63:5>
      |     `-IfStmt 0x14b142640 <line:66:4, line:68:4>
      |       |-RecoveryExpr 0x14b142610 <line:66:8, col:93> '_Bool' contains-errors
      |       `-CompoundStmt 0x14b142630 <col:96, line:68:4>
      `-CompoundStmt 0x14b142928 <line:75:9, line:77:2>
