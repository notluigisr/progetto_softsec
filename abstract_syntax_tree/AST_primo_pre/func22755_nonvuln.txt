`-FunctionDecl 0x11f82e6c0  line:1:6 invalid gdImageString16 'void (int, int, int, int, unsigned short *, int)'
  |-ParmVarDecl 0x11f82e2f0 <col:23, col:34> col:34 invalid im 'int'
  |-ParmVarDecl 0x11f82e370 <col:38, col:48> col:48 invalid f 'int'
  |-ParmVarDecl 0x11f82e3f0 <col:51, col:55> col:55 used x 'int'
  |-ParmVarDecl 0x11f82e470 <col:58, col:62> col:62 used y 'int'
  |-ParmVarDecl 0x11f82e528 <col:65, col:81> col:81 used s 'unsigned short *'
  |-ParmVarDecl 0x11f82e5a8 <col:84, col:88> col:88 used color 'int'
  `-CompoundStmt 0x11f102c80 <line:2:1, line:10:1>
    |-DeclStmt 0x11f82e818 <line:3:2, col:7>
    | `-VarDecl 0x11f82e7b0 <col:2, col:6> col:6 used i 'int'
    |-DeclStmt 0x11f82e8b0 <line:4:2, col:7>
    | `-VarDecl 0x11f82e848 <col:2, col:6> col:6 used l 'int'
    |-BinaryOperator 0x11f102788 <line:5:2, col:16> 'int' '='
    | |-DeclRefExpr 0x11f82e8c8 <col:2> 'int' lvalue Var 0x11f82e848 'l' 'int'
    | `-CallExpr 0x11f102748 <col:6, col:16> 'int'
    |   |-ImplicitCastExpr 0x11f102730 <col:6> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x11f1026b8 <col:6> 'int ()' Function 0x11f102600 'strlen16' 'int ()'
    |   `-ImplicitCastExpr 0x11f102770 <col:15> 'unsigned short *' <LValueToRValue>
    |     `-DeclRefExpr 0x11f1026d8 <col:15> 'unsigned short *' lvalue ParmVar 0x11f82e528 's' 'unsigned short *'
    `-ForStmt 0x11f102c48 <line:6:2, line:9:2>
      |-BinaryOperator 0x11f1027e8 <line:6:7, col:11> 'int' '='
      | |-DeclRefExpr 0x11f1027a8 <col:7> 'int' lvalue Var 0x11f82e7b0 'i' 'int'
      | `-IntegerLiteral 0x11f1027c8 <col:11> 'int' 0
      |-<<<NULL>>>
      |-ParenExpr 0x11f102898 <col:14, col:20> 'int'
      | `-BinaryOperator 0x11f102878 <col:15, col:19> 'int' '<'
      |   |-ImplicitCastExpr 0x11f102848 <col:15> 'int' <LValueToRValue>
      |   | `-DeclRefExpr 0x11f102808 <col:15> 'int' lvalue Var 0x11f82e7b0 'i' 'int'
      |   `-ImplicitCastExpr 0x11f102860 <col:19> 'int' <LValueToRValue>
      |     `-DeclRefExpr 0x11f102828 <col:19> 'int' lvalue Var 0x11f82e848 'l' 'int'
      |-UnaryOperator 0x11f1028d8 <col:23, col:24> 'int' postfix '++'
      | `-DeclRefExpr 0x11f1028b8 <col:23> 'int' lvalue Var 0x11f82e7b0 'i' 'int'
      `-CompoundStmt 0x11f102c28 <col:28, line:9:2>
        |-CallExpr 0x11f102b20 <line:7:3, col:39> '<dependent type>' contains-errors
        | |-DeclRefExpr 0x11f1029d0 <col:3> 'int ()' Function 0x11f102918 'gdImageChar' 'int ()'
        | |-RecoveryExpr 0x11f1029f0 <col:15> '<dependent type>' contains-errors lvalue
        | |-RecoveryExpr 0x11f102a10 <col:19> '<dependent type>' contains-errors lvalue
        | |-DeclRefExpr 0x11f102a30 <col:22> 'int' lvalue ParmVar 0x11f82e3f0 'x' 'int'
        | |-DeclRefExpr 0x11f102a50 <col:25> 'int' lvalue ParmVar 0x11f82e470 'y' 'int'
        | |-ArraySubscriptExpr 0x11f102ae0 <col:28, col:31> 'unsigned short' lvalue
        | | |-ImplicitCastExpr 0x11f102ab0 <col:28> 'unsigned short *' <LValueToRValue>
        | | | `-DeclRefExpr 0x11f102a70 <col:28> 'unsigned short *' lvalue ParmVar 0x11f82e528 's' 'unsigned short *'
        | | `-ImplicitCastExpr 0x11f102ac8 <col:30> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x11f102a90 <col:30> 'int' lvalue Var 0x11f82e7b0 'i' 'int'
        | `-DeclRefExpr 0x11f102b00 <col:34> 'int' lvalue ParmVar 0x11f82e5a8 'color' 'int'
        `-CompoundAssignOperator 0x11f102bf8 <line:8:3, col:11> 'int' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
          |-DeclRefExpr 0x11f102b70 <col:3> 'int' lvalue ParmVar 0x11f82e3f0 'x' 'int'
          `-CXXDependentScopeMemberExpr 0x11f102bb0 <col:8, col:11> '<dependent type>' contains-errors lvalue ->w
            `-RecoveryExpr 0x11f102b90 <col:8> '<dependent type>' contains-errors lvalue
