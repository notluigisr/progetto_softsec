`-FunctionDecl 0x13280df18  line:1:1 invalid token_continue 'int (int *, int *, int)'
  |-ParmVarDecl 0x13280dd28 <col:16, col:25> col:25 invalid i_ctx_p 'int *'
  |-ParmVarDecl 0x13280dda8 <col:34, col:50> col:50 invalid pstate 'int *'
  |-ParmVarDecl 0x13280de28 <col:58, col:63> col:63 invalid save 'int'
  `-CompoundStmt 0x132829670 <line:2:1, line:45:1>
    |-DeclStmt 0x13280e058 <line:4:5, col:13>
    | `-VarDecl 0x13280dff0 <col:5, col:9> col:9 used code 'int'
    |-CallExpr 0x13280e258 <line:8:5, col:10> 'int'
    | |-ImplicitCastExpr 0x13280e240 <col:5> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x13280e1d0 <col:5> 'int ()' Function 0x13280e118 'pop' 'int ()'
    | `-IntegerLiteral 0x13280e1f0 <col:9> 'int' 1
    |-LabelStmt 0x132827958 <line:9:1, line:10:49> 'again'
    | `-BinaryOperator 0x1328278e8 <col:5, col:49> 'int' contains-errors '='
    |   |-DeclRefExpr 0x13280e280 <col:5> 'int' lvalue Var 0x13280dff0 'code' 'int'
    |   `-CallExpr 0x1328278b0 <col:12, col:49> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x13280e380 <col:12> 'int ()' Function 0x13280e2c8 'gs_scan_token' 'int ()'
    |     |-RecoveryExpr 0x13280e3a0 <col:26> '<dependent type>' contains-errors lvalue
    |     |-UnaryOperator 0x132827898 <col:35, col:36> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     | `-RecoveryExpr 0x132827878 <col:36> '<dependent type>' contains-errors lvalue
    |     `-RecoveryExpr 0x132827800 <col:43> '<dependent type>' contains-errors lvalue
    |-SwitchStmt 0x1328279c8 <line:12:5, line:40:5>
    | |-ImplicitCastExpr 0x1328279b0 <line:12:13> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x132827990 <col:13> 'int' lvalue Var 0x13280dff0 'code' 'int'
    | `-CompoundStmt 0x1328292e8 <col:19, line:40:5>
    |   |-DefaultStmt 0x132827c70 <line:13:9, line:15:58>
    |   | `-IfStmt 0x132827c50 <line:14:13, line:15:58>
    |   |   |-BinaryOperator 0x132827a48 <line:14:17, col:24> 'int' '>'
    |   |   | |-ImplicitCastExpr 0x132827a30 <col:17> 'int' <LValueToRValue>
    |   |   | | `-DeclRefExpr 0x1328279f0 <col:17> 'int' lvalue Var 0x13280dff0 'code' 'int'
    |   |   | `-IntegerLiteral 0x132827a10 <col:24> 'int' 0
    |   |   `-BinaryOperator 0x132827c30 <line:15:17, col:58> 'int' contains-errors '='
    |   |     |-DeclRefExpr 0x132827a68 <col:17> 'int' lvalue Var 0x13280dff0 'code' 'int'
    |   |     `-CallExpr 0x132827c08 <col:24, col:58> '<dependent type>' contains-errors
    |   |       |-DeclRefExpr 0x132827b68 <col:24> 'int ()' Function 0x132827ab0 'gs_note_error' 'int ()'
    |   |       `-RecoveryExpr 0x132827be8 <col:38> '<dependent type>' contains-errors lvalue
    |   |-CallExpr 0x132827e50 <line:16:13, col:76> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x132827d70 <col:13> 'int ()' Function 0x132827cb8 'gs_scanner_error_object' 'int ()'
    |   | |-RecoveryExpr 0x132827d90 <col:37> '<dependent type>' contains-errors lvalue
    |   | |-RecoveryExpr 0x132827db0 <col:46> '<dependent type>' contains-errors lvalue
    |   | `-UnaryOperator 0x132827e38 <col:54, col:64> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   |   `-CXXDependentScopeMemberExpr 0x132827df0 <col:55, col:64> '<dependent type>' contains-errors lvalue ->error_object
    |   |     `-RecoveryExpr 0x132827dd0 <col:55> '<dependent type>' contains-errors lvalue
    |   |-BreakStmt 0x132827e88 <line:17:13>
    |   |-BinaryOperator 0x132827ee8 <line:19:13, col:20> 'int' '='
    |   | |-DeclRefExpr 0x132827ea8 <col:13> 'int' lvalue Var 0x13280dff0 'code' 'int'
    |   | `-IntegerLiteral 0x132827ec8 <col:20> 'int' 0
    |   |-CaseStmt 0x132827f40 <line:20:9, line:21:19>
    |   | |-ConstantExpr 0x132827f28 <line:20:14> 'int'
    |   | | `-IntegerLiteral 0x132827f08 <col:14> 'int' 0
    |   | `-CallExpr 0x1328280a0 <line:21:13, col:19> 'int'
    |   |   |-ImplicitCastExpr 0x132828088 <col:13> 'int (*)()' <FunctionToPointerDecay>
    |   |   | `-DeclRefExpr 0x132828048 <col:13> 'int ()' Function 0x132827f90 'push' 'int ()'
    |   |   `-IntegerLiteral 0x132828068 <col:18> 'int' 2
    |   |-CallExpr 0x1328282f8 <line:22:13, col:38> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x1328281a8 <col:13> 'int ()' Function 0x1328280f0 'ref_assign' 'int ()'
    |   | |-BinaryOperator 0x1328282a0 <col:24, col:29> '<dependent type>' contains-errors '-'
    |   | | |-RecoveryExpr 0x132828280 <col:24> '<dependent type>' contains-errors lvalue
    |   | | `-IntegerLiteral 0x1328281e0 <col:29> 'int' 1
    |   | `-UnaryOperator 0x1328282e0 <col:32, col:33> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   |   `-RecoveryExpr 0x1328282c0 <col:33> '<dependent type>' contains-errors lvalue
    |   |-BreakStmt 0x132828428 <line:24:13>
    |   |-CallExpr 0x132828488 <line:26:13, col:19> 'int'
    |   | |-ImplicitCastExpr 0x132828470 <col:13> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x132828430 <col:13> 'int ()' Function 0x132827f90 'push' 'int ()'
    |   | `-IntegerLiteral 0x132828450 <col:18> 'int' 1
    |   |-BinaryOperator 0x1328285f0 <line:28:13, col:20> 'int' '='
    |   | |-DeclRefExpr 0x1328285b0 <col:13> 'int' lvalue Var 0x13280dff0 'code' 'int'
    |   | `-IntegerLiteral 0x1328285d0 <col:20> 'int' 0
    |   |-BreakStmt 0x132828610 <line:29:13>
    |   |-SwitchStmt 0x1328287d0 <line:33:13, line:38:13>
    |   | |-ImplicitCastExpr 0x1328287b8 <line:33:21> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x132828798 <col:21> 'int' lvalue Var 0x13280dff0 'code' 'int'
    |   | `-CompoundStmt 0x1328292c0 <col:27, line:38:13>
    |   |   |-CaseStmt 0x132829238 <line:34:17, line:35:26>
    |   |   | |-ConstantExpr 0x132829220 <line:34:22> 'int'
    |   |   | | `-IntegerLiteral 0x132829200 <col:22> 'int' 0
    |   |   | `-GotoStmt 0x132829260 <line:35:21, col:26> 'again' 0x132827908
    |   |   `-ReturnStmt 0x1328292b0 <line:37:21, col:28>
    |   |     `-ImplicitCastExpr 0x132829298 <col:28> 'int' <LValueToRValue>
    |   |       `-DeclRefExpr 0x132829278 <col:28> 'int' lvalue Var 0x13280dff0 'code' 'int'
    |   `-BreakStmt 0x1328292e0 <line:39:13>
    |-IfStmt 0x132829608 <line:41:5, line:43:5>
    | |-BinaryOperator 0x132829420 <line:41:9, col:23> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x1328293b0 <col:9, col:17> 'int' '<='
    | | | |-ImplicitCastExpr 0x132829398 <col:9> 'int' <LValueToRValue>
    | | | | `-DeclRefExpr 0x132829358 <col:9> 'int' lvalue Var 0x13280dff0 'code' 'int'
    | | | `-IntegerLiteral 0x132829378 <col:17> 'int' 0
    | | `-UnaryOperator 0x132829408 <col:22, col:23> '<dependent type>' contains-errors prefix '!' cannot overflow
    | |   `-ImplicitCastExpr 0x1328293f0 <col:23> '<dependent type>' contains-errors <LValueToRValue>
    | |     `-RecoveryExpr 0x1328293d0 <col:23> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x1328295f0 <col:29, line:43:5>
    |   `-CallExpr 0x1328295c0 <line:42:9, col:35> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x132829520 <col:9> 'int ()' Function 0x132829468 'ifree_object' 'int ()'
    |     |-RecoveryExpr 0x132829540 <col:22> '<dependent type>' contains-errors lvalue
    |     `-StringLiteral 0x1328295a0 <col:30> 'char[4]' lvalue "STR"
    `-ReturnStmt 0x132829660 <line:44:5, col:12>
      `-ImplicitCastExpr 0x132829648 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x132829628 <col:12> 'int' lvalue Var 0x13280dff0 'code' 'int'
