`-FunctionDecl 0x15181f5a8  line:1:1 invalid DU_getStringDOElement 'int (int *, int, char *, int)'
  |-ParmVarDecl 0x15181f328 <col:23, col:32> col:32 invalid obj 'int *'
  |-ParmVarDecl 0x15181f3a8 <col:37, col:47> col:47 invalid t 'int'
  |-ParmVarDecl 0x15181f428 <col:50, col:56> col:56 used s 'char *'
  |-ParmVarDecl 0x15181f4a8 <col:59, col:66> col:66 invalid bufsize 'int'
  `-CompoundStmt 0x152012268 <line:2:1, line:19:1>
    |-DeclStmt 0x15181f708 <line:6:5, col:18>
    | `-VarDecl 0x15181f6a0 <col:5, col:11> col:11 used aString 'char *'
    `-IfStmt 0x152012248 <line:10:5, line:17:5>
      |-RecoveryExpr 0x15181f870 <line:10:9, col:36> '_Bool' contains-errors
      `-CompoundStmt 0x152012230 <col:42, line:17:5>
        `-IfStmt 0x152012200 <line:11:9, line:16:9> has_else
          |-RecoveryExpr 0x15181f8a8 <line:11:13, col:34> '_Bool' contains-errors
          |-CompoundStmt 0x15181f990 <col:37, line:13:9>
          | `-BinaryOperator 0x15181f970 <line:12:13, col:20> 'char' '='
          |   |-ArraySubscriptExpr 0x15181f920 <col:13, col:16> 'char' lvalue
          |   | |-ImplicitCastExpr 0x15181f908 <col:13> 'char *' <LValueToRValue>
          |   | | `-DeclRefExpr 0x15181f8c8 <col:13> 'char *' lvalue ParmVar 0x15181f428 's' 'char *'
          |   | `-IntegerLiteral 0x15181f8e8 <col:15> 'int' 0
          |   `-ImplicitCastExpr 0x15181f958 <col:20> 'char' <IntegralCast>
          |     `-CharacterLiteral 0x15181f940 <col:20> 'int' 0
          `-CompoundStmt 0x15181f9c8 <line:13:16, line:16:9>
