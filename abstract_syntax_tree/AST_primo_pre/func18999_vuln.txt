`-FunctionDecl 0x126128238  line:1:12 getStrrtokenPos 'int (char *, int)' static
  |-ParmVarDecl 0x1261280d8 <col:28, col:34> col:34 used str 'char *'
  |-ParmVarDecl 0x126128158 <col:39, col:43> col:43 used savedPos 'int'
  `-CompoundStmt 0x126141e88 <line:2:1, line:23:1>
    |-DeclStmt 0x1261283f0 <line:3:2, col:16>
    | `-VarDecl 0x126128350 <col:2, col:15> col:6 used result 'int' cinit
    |   `-UnaryOperator 0x1261283d8 <col:14, col:15> 'int' prefix '-'
    |     `-IntegerLiteral 0x1261283b8 <col:15> 'int' 1
    |-DeclStmt 0x126128488 <line:4:2, col:7>
    | `-VarDecl 0x126128420 <col:2, col:6> col:6 used i 'int'
    |-ForStmt 0x126141ce0 <line:6:2, line:17:2>
    | |-BinaryOperator 0x126128538 <line:6:6, col:17> 'int' '='
    | | |-DeclRefExpr 0x1261284a0 <col:6> 'int' lvalue Var 0x126128420 'i' 'int'
    | | `-BinaryOperator 0x126128518 <col:8, col:17> 'int' '-'
    | |   |-ImplicitCastExpr 0x126128500 <col:8> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x1261284c0 <col:8> 'int' lvalue ParmVar 0x126128158 'savedPos' 'int'
    | |   `-IntegerLiteral 0x1261284e0 <col:17> 'int' 1
    | |-<<<NULL>>>
    | |-BinaryOperator 0x1261285b0 <col:20, col:23> 'int' '>='
    | | |-ImplicitCastExpr 0x126128598 <col:20> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x126128558 <col:20> 'int' lvalue Var 0x126128420 'i' 'int'
    | | `-IntegerLiteral 0x126128578 <col:23> 'int' 0
    | |-UnaryOperator 0x1261285f0 <col:26, col:27> 'int' postfix '--'
    | | `-DeclRefExpr 0x1261285d0 <col:26> 'int' lvalue Var 0x126128420 'i' 'int'
    | `-CompoundStmt 0x126141cc8 <col:31, line:17:2>
    |   `-IfStmt 0x126141ca8 <line:7:3, line:16:3>
    |     |-CallExpr 0x126141868 <line:7:6, col:28> 'int'
    |     | |-ImplicitCastExpr 0x126141850 <col:6> 'int (*)()' <FunctionToPointerDecay>
    |     | | `-DeclRefExpr 0x126128730 <col:6> 'int ()' Function 0x126128678 'isIDSeparator' 'int ()'
    |     | `-ImplicitCastExpr 0x1261418a8 <col:20, col:27> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x126141890 <col:20, col:27> 'char' <LValueToRValue>
    |     |     `-UnaryOperator 0x126141800 <col:20, col:27> 'char' lvalue prefix '*' cannot overflow
    |     |       `-ParenExpr 0x1261287e0 <col:21, col:27> 'char *'
    |     |         `-BinaryOperator 0x1261287c0 <col:22, col:26> 'char *' '+'
    |     |           |-ImplicitCastExpr 0x126128790 <col:22> 'char *' <LValueToRValue>
    |     |           | `-DeclRefExpr 0x126128750 <col:22> 'char *' lvalue ParmVar 0x1261280d8 'str' 'char *'
    |     |           `-ImplicitCastExpr 0x1261287a8 <col:26> 'int' <LValueToRValue>
    |     |             `-DeclRefExpr 0x126128770 <col:26> 'int' lvalue Var 0x126128420 'i' 'int'
    |     `-CompoundStmt 0x126141c88 <col:31, line:16:3>
    |       |-IfStmt 0x126141c50 <line:9:4, line:14:4> has_else
    |       | |-BinaryOperator 0x126141ad0 <line:9:7, col:39> 'int' '&&'
    |       | | |-BinaryOperator 0x126141918 <col:7, col:10> 'int' '>='
    |       | | | |-ImplicitCastExpr 0x126141900 <col:7> 'int' <LValueToRValue>
    |       | | | | `-DeclRefExpr 0x1261418c0 <col:7> 'int' lvalue Var 0x126128420 'i' 'int'
    |       | | | `-IntegerLiteral 0x1261418e0 <col:10> 'int' 2
    |       | | `-CallExpr 0x126141a78 <col:15, col:39> 'int'
    |       | |   |-ImplicitCastExpr 0x126141a60 <col:15> 'int (*)()' <FunctionToPointerDecay>
    |       | |   | `-DeclRefExpr 0x126141938 <col:15> 'int ()' Function 0x126128678 'isIDSeparator' 'int ()'
    |       | |   `-ImplicitCastExpr 0x126141ab8 <col:29, col:38> 'int' <IntegralCast>
    |       | |     `-ImplicitCastExpr 0x126141aa0 <col:29, col:38> 'char' <LValueToRValue>
    |       | |       `-UnaryOperator 0x126141a48 <col:29, col:38> 'char' lvalue prefix '*' cannot overflow
    |       | |         `-ParenExpr 0x126141a28 <col:30, col:38> 'char *'
    |       | |           `-BinaryOperator 0x126141a08 <col:31, col:37> 'char *' '-'
    |       | |             |-BinaryOperator 0x1261419c8 <col:31, col:35> 'char *' '+'
    |       | |             | |-ImplicitCastExpr 0x126141998 <col:31> 'char *' <LValueToRValue>
    |       | |             | | `-DeclRefExpr 0x126141958 <col:31> 'char *' lvalue ParmVar 0x1261280d8 'str' 'char *'
    |       | |             | `-ImplicitCastExpr 0x1261419b0 <col:35> 'int' <LValueToRValue>
    |       | |             |   `-DeclRefExpr 0x126141978 <col:35> 'int' lvalue Var 0x126128420 'i' 'int'
    |       | |             `-IntegerLiteral 0x1261419e8 <col:37> 'int' 2
    |       | |-CompoundStmt 0x126141ba8 <col:42, line:12:4>
    |       | | `-BinaryOperator 0x126141b88 <line:11:5, col:16> 'int' '='
    |       | |   |-DeclRefExpr 0x126141af0 <col:5> 'int' lvalue Var 0x126128350 'result' 'int'
    |       | |   `-BinaryOperator 0x126141b68 <col:14, col:16> 'int' '-'
    |       | |     |-ImplicitCastExpr 0x126141b50 <col:14> 'int' <LValueToRValue>
    |       | |     | `-DeclRefExpr 0x126141b10 <col:14> 'int' lvalue Var 0x126128420 'i' 'int'
    |       | |     `-IntegerLiteral 0x126141b30 <col:16> 'int' 2
    |       | `-CompoundStmt 0x126141c38 <line:12:11, line:14:4>
    |       |   `-BinaryOperator 0x126141c18 <line:13:5, col:14> 'int' '='
    |       |     |-DeclRefExpr 0x126141bc0 <col:5> 'int' lvalue Var 0x126128350 'result' 'int'
    |       |     `-ImplicitCastExpr 0x126141c00 <col:14> 'int' <LValueToRValue>
    |       |       `-DeclRefExpr 0x126141be0 <col:14> 'int' lvalue Var 0x126128420 'i' 'int'
    |       `-BreakStmt 0x126141c80 <line:15:4>
    |-IfStmt 0x126141e20 <line:18:2, line:21:2>
    | |-BinaryOperator 0x126141d70 <line:18:5, col:14> 'int' '<'
    | | |-ImplicitCastExpr 0x126141d58 <col:5> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x126141d18 <col:5> 'int' lvalue Var 0x126128350 'result' 'int'
    | | `-IntegerLiteral 0x126141d38 <col:14> 'int' 1
    | `-CompoundStmt 0x126141e08 <col:16, line:21:2>
    |   `-BinaryOperator 0x126141de8 <line:20:3, col:12> 'int' '='
    |     |-DeclRefExpr 0x126141d90 <col:3> 'int' lvalue Var 0x126128350 'result' 'int'
    |     `-UnaryOperator 0x126141dd0 <col:11, col:12> 'int' prefix '-'
    |       `-IntegerLiteral 0x126141db0 <col:12> 'int' 1
    `-ReturnStmt 0x126141e78 <line:22:2, col:9>
      `-ImplicitCastExpr 0x126141e60 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x126141e40 <col:9> 'int' lvalue Var 0x126128350 'result' 'int'
