`-FunctionDecl 0x13500ddc8  line:1:1 referenced invalid seamless_process 'int (int)'
  |-ParmVarDecl 0x13500dcf0 <col:18, col:25> col:25 invalid s 'int'
  `-CompoundStmt 0x135027eb0 <line:2:1, line:18:1>
    |-DeclStmt 0x13500def8 <line:3:2, col:21>
    | `-VarDecl 0x13500de90 <col:2, col:15> col:15 used pkglen 'unsigned int'
    |-DeclStmt 0x13500df90 <line:4:2, col:11>
    | `-VarDecl 0x13500df28 <col:2, col:8> col:8 used buf 'char *'
    |-BinaryOperator 0x13500e0b8 <line:6:2, col:23> 'unsigned int' contains-errors '='
    | |-DeclRefExpr 0x13500dfa8 <col:2> 'unsigned int' lvalue Var 0x13500de90 'pkglen' 'unsigned int'
    | `-BinaryOperator 0x13500e098 <col:11, col:23> '<dependent type>' contains-errors '-'
    |   |-CXXDependentScopeMemberExpr 0x13500dfe8 <col:11, col:14> '<dependent type>' contains-errors lvalue ->end
    |   | `-RecoveryExpr 0x13500dfc8 <col:11> '<dependent type>' contains-errors lvalue
    |   `-CXXDependentScopeMemberExpr 0x13500e050 <col:20, col:23> '<dependent type>' contains-errors lvalue ->p
    |     `-RecoveryExpr 0x13500e030 <col:20> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x1350277c0 <line:8:2, col:26> 'char *' '='
    | |-DeclRefExpr 0x13500e0d8 <col:2> 'char *' lvalue Var 0x13500df28 'buf' 'char *'
    | `-ImplicitCastExpr 0x13500e370 <col:8, col:26> 'char *' <IntegralToPointer>
    |   `-CallExpr 0x13500e348 <col:8, col:26> 'int'
    |     |-ImplicitCastExpr 0x13500e330 <col:8> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x13500e250 <col:8> 'int ()' Function 0x13500e198 'xmalloc' 'int ()'
    |     `-BinaryOperator 0x13500e2e0 <col:16, col:25> 'unsigned int' '+'
    |       |-ImplicitCastExpr 0x13500e2b0 <col:16> 'unsigned int' <LValueToRValue>
    |       | `-DeclRefExpr 0x13500e270 <col:16> 'unsigned int' lvalue Var 0x13500de90 'pkglen' 'unsigned int'
    |       `-ImplicitCastExpr 0x13500e2c8 <col:25> 'unsigned int' <IntegralCast>
    |         `-IntegerLiteral 0x13500e290 <col:25> 'int' 1
    |-CallExpr 0x135027a50 <line:9:2, col:40> 'int' contains-errors
    | |-ImplicitCastExpr 0x135027a38 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x1350278c0 <col:2> 'int ()' Function 0x135027808 'STRNCPY' 'int ()'
    | |-ImplicitCastExpr 0x135027a88 <col:10> 'char *' <LValueToRValue>
    | | `-DeclRefExpr 0x1350278e0 <col:10> 'char *' lvalue Var 0x13500df28 'buf' 'char *'
    | |-CStyleCastExpr 0x135027980 <col:15, col:27> 'char *' contains-errors <Dependent>
    | | `-CXXDependentScopeMemberExpr 0x135027920 <col:24, col:27> '<dependent type>' contains-errors lvalue ->p
    | |   `-RecoveryExpr 0x135027900 <col:24> '<dependent type>' contains-errors lvalue
    | `-BinaryOperator 0x135027a18 <col:30, col:39> 'unsigned int' '+'
    |   |-ImplicitCastExpr 0x1350279e8 <col:30> 'unsigned int' <LValueToRValue>
    |   | `-DeclRefExpr 0x1350279a8 <col:30> 'unsigned int' lvalue Var 0x13500de90 'pkglen' 'unsigned int'
    |   `-ImplicitCastExpr 0x135027a00 <col:39> 'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x1350279c8 <col:39> 'int' 1
    |-CallExpr 0x135027cf8 <line:15:2, col:67> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x135027b80 <col:2> 'int ()' Function 0x135027ac8 'str_handle_lines' 'int ()'
    | |-DeclRefExpr 0x135027ba0 <col:19> 'char *' lvalue Var 0x13500df28 'buf' 'char *'
    | |-UnaryOperator 0x135027ca0 <col:24, col:25> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | `-RecoveryExpr 0x135027c80 <col:25> '<dependent type>' contains-errors lvalue
    | |-RecoveryExpr 0x135027cb8 <col:40> '<dependent type>' contains-errors lvalue
    | `-RecoveryExpr 0x135027cd8 <col:63> '<dependent type>' contains-errors lvalue
    `-CallExpr 0x135027e70 <line:17:2, col:11> 'int'
      |-ImplicitCastExpr 0x135027e58 <col:2> 'int (*)()' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x135027e18 <col:2> 'int ()' Function 0x135027d60 'xfree' 'int ()'
      `-ImplicitCastExpr 0x135027e98 <col:8> 'char *' <LValueToRValue>
        `-DeclRefExpr 0x135027e38 <col:8> 'char *' lvalue Var 0x13500df28 'buf' 'char *'
