`-FunctionDecl 0x10680de88  line:1:22 invalid ConvertScalar 'const char *(int *, int *)' static
  |-ParmVarDecl 0x10680dd28 <col:36, col:46> col:46 invalid v 'int *'
  |-ParmVarDecl 0x10680dda8 <col:49, col:56> col:56 invalid out 'int *'
  `-CompoundStmt 0x106828698 <col:61, line:25:3>
    |-IfStmt 0x106827850 <line:3:5, line:6:5>
    | |-CallExpr 0x10680e208 <line:3:9, col:39> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x10680e0a0 <col:9> 'int ()' Function 0x10680dfe8 'TF_PREDICT_TRUE' 'int ()'
    | | `-CallExpr 0x10680e1e0 <col:25, col:38> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x10680e1a0 <col:25> 'int ()' Function 0x10680e0e8 'PyInt_Check' 'int ()'
    | |   `-RecoveryExpr 0x10680e1c0 <col:37> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x106827830 <col:42, line:6:5>
    |   |-BinaryOperator 0x10680e3c8 <line:4:7, col:29> '<dependent type>' contains-errors '='
    |   | |-UnaryOperator 0x10680e268 <col:7, col:8> '<dependent type>' contains-errors prefix '*' cannot overflow
    |   | | `-ImplicitCastExpr 0x10680e250 <col:8> '<dependent type>' contains-errors <LValueToRValue>
    |   | |   `-RecoveryExpr 0x10680e230 <col:8> '<dependent type>' contains-errors lvalue
    |   | `-CallExpr 0x10680e3a0 <col:14, col:29> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x10680e360 <col:14> 'int ()' Function 0x10680e2a8 'PyInt_AS_LONG' 'int ()'
    |   |   `-RecoveryExpr 0x10680e380 <col:28> '<dependent type>' contains-errors lvalue
    |   `-ReturnStmt 0x106827820 <line:5:7, col:14>
    |     `-RecoveryExpr 0x106827800 <col:14> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x1068280a8 <line:8:5, line:14:5>
    | |-CallExpr 0x106827b40 <line:8:9, col:60> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x106827870 <col:9> 'int ()' Function 0x10680dfe8 'TF_PREDICT_TRUE' 'int ()'
    | | `-BinaryOperator 0x106827b20 <col:25, col:59> 'int' contains-errors '||'
    | |   |-CallExpr 0x1068279b0 <col:25, col:39> '<dependent type>' contains-errors
    | |   | |-DeclRefExpr 0x106827970 <col:25> 'int ()' Function 0x1068278b8 'PyLong_Check' 'int ()'
    | |   | `-RecoveryExpr 0x106827990 <col:38> '<dependent type>' contains-errors lvalue
    | |   `-CallExpr 0x106827af8 <col:44, col:59> '<dependent type>' contains-errors
    | |     |-DeclRefExpr 0x106827ab8 <col:44> 'int ()' Function 0x106827a00 'IsPyDimension' 'int ()'
    | |     `-RecoveryExpr 0x106827ad8 <col:58> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x106828078 <col:63, line:14:5>
    |   |-DeclStmt 0x106827c08 <line:9:7, col:23>
    |   | `-VarDecl 0x106827b80 <col:7, col:22> col:11 used overflow 'int' cinit
    |   |   `-IntegerLiteral 0x106827be8 <col:22> 'int' 0
    |   |-BinaryOperator 0x106827df8 <line:11:7, col:55> '<dependent type>' contains-errors '='
    |   | |-UnaryOperator 0x106827c58 <col:7, col:8> '<dependent type>' contains-errors prefix '*' cannot overflow
    |   | | `-ImplicitCastExpr 0x106827c40 <col:8> '<dependent type>' contains-errors <LValueToRValue>
    |   | |   `-RecoveryExpr 0x106827c20 <col:8> '<dependent type>' contains-errors lvalue
    |   | `-CallExpr 0x106827dc8 <col:14, col:55> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x106827d50 <col:14> 'int ()' Function 0x106827c98 'PyLong_AsLongLongAndOverflow' 'int ()'
    |   |   |-RecoveryExpr 0x106827d70 <col:43> '<dependent type>' contains-errors lvalue
    |   |   `-UnaryOperator 0x106827db0 <col:46, col:47> 'int *' prefix '&' cannot overflow
    |   |     `-DeclRefExpr 0x106827d90 <col:47> 'int' lvalue Var 0x106827b80 'overflow' 'int'
    |   |-IfStmt 0x106828010 <line:12:7, col:46>
    |   | |-CallExpr 0x106827f88 <col:11, col:36> 'int'
    |   | | |-ImplicitCastExpr 0x106827f70 <col:11> 'int (*)()' <FunctionToPointerDecay>
    |   | | | `-DeclRefExpr 0x106827ef8 <col:11> 'int ()' Function 0x106827e40 'TF_PREDICT_FALSE' 'int ()'
    |   | | `-ImplicitCastExpr 0x106827fb0 <col:28> 'int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x106827f18 <col:28> 'int' lvalue Var 0x106827b80 'overflow' 'int'
    |   | `-ReturnStmt 0x106828000 <col:39, col:46>
    |   |   `-RecoveryExpr 0x106827fe0 <col:46> '<dependent type>' contains-errors lvalue
    |   `-ReturnStmt 0x106828068 <line:13:7, col:14>
    |     `-RecoveryExpr 0x106828048 <col:14> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x106828480 <line:15:5, line:22:5>
    | |-CallExpr 0x106828280 <line:15:9, col:47> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x1068281a8 <col:9> 'int ()' Function 0x1068280f0 'PyIsInstance' 'int ()'
    | | |-RecoveryExpr 0x1068281c8 <col:22> '<dependent type>' contains-errors lvalue
    | | `-UnaryOperator 0x106828268 <col:25, col:26> '<dependent type>' contains-errors prefix '&' cannot overflow
    | |   `-RecoveryExpr 0x106828248 <col:26> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x106828468 <col:50, line:22:5>
    |   `-ReturnStmt 0x106828458 <line:21:7, col:45>
    |     `-CallExpr 0x106828428 <col:14, col:45> '<dependent type>' contains-errors
    |       |-RecoveryExpr 0x1068282b0 <col:14> '<dependent type>' contains-errors lvalue
    |       |-CallExpr 0x106828408 <col:28, col:39> '<dependent type>' contains-errors
    |       | `-CXXDependentScopeMemberExpr 0x1068283c0 <col:28, col:35> '<dependent type>' contains-errors lvalue .get
    |       |   `-RecoveryExpr 0x1068283a0 <col:28> '<dependent type>' contains-errors lvalue
    |       `-RecoveryExpr 0x106828350 <col:42> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x106828630 <line:23:5, col:30>
    | |-CallExpr 0x1068285c0 <col:9, col:20> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x106828580 <col:9> 'int ()' Function 0x1068284c8 'IsPyFloat' 'int ()'
    | | `-RecoveryExpr 0x1068285a0 <col:19> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x106828620 <col:23, col:30>
    |   `-RecoveryExpr 0x106828600 <col:30> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x106828688 <line:24:5, col:12>
      `-RecoveryExpr 0x106828668 <col:12> '<dependent type>' contains-errors lvalue
