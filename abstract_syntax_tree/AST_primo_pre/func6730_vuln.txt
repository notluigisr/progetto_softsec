`-FunctionDecl 0x15a80de88  line:1:21 invalid gset_decode_next 'int (int *, int *)' static
  |-ParmVarDecl 0x15a80dd28 <col:38, col:52> col:52 referenced invalid decoder 'int *'
  |-ParmVarDecl 0x15a80dda8 <col:61, col:75> col:75 invalid phash 'int *'
  `-CompoundStmt 0x15b8092c8 <line:2:1, line:37:1>
    |-DeclStmt 0x15a80dfc0 <line:4:5, col:10>
    | `-VarDecl 0x15a80df58 <col:5, col:9> col:9 used i 'int'
    |-WhileStmt 0x15b808898 <line:7:5, line:16:5>
    | |-IntegerLiteral 0x15a80dfd8 <line:7:12> 'int' 1
    | `-CompoundStmt 0x15b808868 <col:15, line:16:5>
    |   |-DeclStmt 0x15a80e238 <line:8:9, col:48>
    |   | `-VarDecl 0x15a80e010 <col:9, col:47> col:13 used bit 'int' cinit
    |   |   `-CallExpr 0x15a80e210 <col:19, col:47> '<dependent type>' contains-errors
    |   |     |-DeclRefExpr 0x15a80e1d0 <col:19> 'int ()' Function 0x15a80e118 'gset_decode_next_bit' 'int ()'
    |   |     `-RecoveryExpr 0x15a80e1f0 <col:40> '<dependent type>' contains-errors lvalue
    |   |-IfStmt 0x15a80e340 <line:9:9, line:11:9>
    |   | |-BinaryOperator 0x15a80e2c0 <line:9:13, col:21> 'int' contains-errors '=='
    |   | | |-ImplicitCastExpr 0x15a80e2a8 <col:13> 'int' contains-errors <LValueToRValue>
    |   | | | `-DeclRefExpr 0x15a80e250 <col:13> 'int' contains-errors lvalue Var 0x15a80e010 'bit' 'int'
    |   | | `-UnaryOperator 0x15a80e290 <col:20, col:21> 'int' prefix '-'
    |   | |   `-IntegerLiteral 0x15a80e270 <col:21> 'int' 1
    |   | `-CompoundStmt 0x15a80e328 <col:24, line:11:9>
    |   |   `-ReturnStmt 0x15a80e318 <line:10:13, col:20>
    |   |     `-RecoveryExpr 0x15a80e2f8 <col:20> '<dependent type>' contains-errors lvalue
    |   |-IfStmt 0x15a80e3d0 <line:12:9, line:14:9>
    |   | |-UnaryOperator 0x15a80e398 <line:12:13, col:14> 'int' contains-errors prefix '!' cannot overflow
    |   | | `-ImplicitCastExpr 0x15a80e380 <col:14> 'int' contains-errors <LValueToRValue>
    |   | |   `-DeclRefExpr 0x15a80e360 <col:14> 'int' contains-errors lvalue Var 0x15a80e010 'bit' 'int'
    |   | `-CompoundStmt 0x15a80e3b8 <col:19, line:14:9>
    |   |   `-BreakStmt 0x15a80e3b0 <line:13:13>
    |   `-UnaryOperator 0x15b808850 <line:15:9, col:11> '<dependent type>' contains-errors prefix '++' cannot overflow
    |     `-RecoveryExpr 0x15b808830 <col:11> '<dependent type>' contains-errors lvalue
    |-ForStmt 0x15b808ca0 <line:18:5, line:24:5>
    | |-BinaryOperator 0x15b8088f8 <line:18:10, col:14> 'int' '='
    | | |-DeclRefExpr 0x15b8088b8 <col:10> 'int' lvalue Var 0x15a80df58 'i' 'int'
    | | `-IntegerLiteral 0x15b8088d8 <col:14> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x15b8089a0 <col:17, col:30> 'int' contains-errors '<'
    | | |-DeclRefExpr 0x15b808918 <col:17> 'int' lvalue Var 0x15a80df58 'i' 'int'
    | | `-CXXDependentScopeMemberExpr 0x15b808958 <col:21, col:30> '<dependent type>' contains-errors lvalue ->log2p
    | |   `-RecoveryExpr 0x15b808938 <col:21> '<dependent type>' contains-errors lvalue
    | |-UnaryOperator 0x15b8089e0 <col:37, col:39> 'int' prefix '++'
    | | `-DeclRefExpr 0x15b8089c0 <col:39> 'int' lvalue Var 0x15a80df58 'i' 'int'
    | `-CompoundStmt 0x15b808c80 <col:42, line:24:5>
    |   |-DeclStmt 0x15b808ae0 <line:19:9, col:48>
    |   | `-VarDecl 0x15b808a10 <col:9, col:47> col:13 used bit 'int' cinit
    |   |   `-CallExpr 0x15b808ab8 <col:19, col:47> '<dependent type>' contains-errors
    |   |     |-DeclRefExpr 0x15b808a78 <col:19> 'int ()' Function 0x15a80e118 'gset_decode_next_bit' 'int ()'
    |   |     `-RecoveryExpr 0x15b808a98 <col:40> '<dependent type>' contains-errors lvalue
    |   `-IfStmt 0x15b808be8 <line:20:9, line:22:9>
    |     |-BinaryOperator 0x15b808b68 <line:20:13, col:21> 'int' contains-errors '=='
    |     | |-ImplicitCastExpr 0x15b808b50 <col:13> 'int' contains-errors <LValueToRValue>
    |     | | `-DeclRefExpr 0x15b808af8 <col:13> 'int' contains-errors lvalue Var 0x15b808a10 'bit' 'int'
    |     | `-UnaryOperator 0x15b808b38 <col:20, col:21> 'int' prefix '-'
    |     |   `-IntegerLiteral 0x15b808b18 <col:21> 'int' 1
    |     `-CompoundStmt 0x15b808bd0 <col:24, line:22:9>
    |       `-ReturnStmt 0x15b808bc0 <line:21:13, col:20>
    |         `-RecoveryExpr 0x15b808ba0 <col:20> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x15b808f40 <line:27:5, col:31> '<dependent type>' contains-errors '='
    | |-UnaryOperator 0x15b808ee8 <col:5, col:6> '<dependent type>' contains-errors prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x15b808ed0 <col:6> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x15b808d90 <col:6> '<dependent type>' contains-errors lvalue
    | `-BinaryOperator 0x15b808f20 <col:14, col:31> '<dependent type>' contains-errors '+'
    |   |-RecoveryExpr 0x15b808f00 <col:14> '<dependent type>' contains-errors lvalue
    |   `-CXXDependentScopeMemberExpr 0x15b808e18 <col:22, col:31> '<dependent type>' contains-errors lvalue ->last_val
    |     `-RecoveryExpr 0x15b808df8 <col:22> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x15b809040 <line:28:5, col:26> '<dependent type>' contains-errors '='
    | |-CXXDependentScopeMemberExpr 0x15b808fa8 <col:5, col:14> '<dependent type>' contains-errors lvalue ->last_val
    | | `-RecoveryExpr 0x15b808f80 <col:5> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x15b808f60 <col:5> 'int *' lvalue ParmVar 0x15a80dd28 'decoder' 'int *'
    | `-UnaryOperator 0x15b809028 <col:25, col:26> '<dependent type>' contains-errors prefix '*' cannot overflow
    |   `-ImplicitCastExpr 0x15b809010 <col:26> '<dependent type>' contains-errors <LValueToRValue>
    |     `-RecoveryExpr 0x15b808ff0 <col:26> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x15b8092b8 <line:36:5, col:12>
      `-RecoveryExpr 0x15b809298 <col:12> '<dependent type>' contains-errors lvalue
