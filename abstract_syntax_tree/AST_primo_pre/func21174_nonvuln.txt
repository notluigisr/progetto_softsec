`-FunctionDecl 0x153127d58  line:1:1 did_set_option 'int (int, int, int, int)'
  |-ParmVarDecl 0x153127ad8 <line:2:5, col:13> col:13 used opt_idx 'int'
  |-ParmVarDecl 0x153127b58 <line:3:5, col:13> col:13 used opt_flags 'int'
  |-ParmVarDecl 0x153127bd8 <line:4:5, col:13> col:13 used new_value 'int'
  |-ParmVarDecl 0x153127c58 <line:5:5, col:13> col:13 used value_checked 'int'
  `-CompoundStmt 0x153140e08 <line:7:1, line:24:1>
    |-DeclStmt 0x153127f30 <line:8:5, col:14>
    | `-VarDecl 0x153127ec8 <col:5, col:13> col:13 used p 'long *'
    |-BinaryOperator 0x1531407f0 <line:15:5, col:41> 'long *' '='
    | |-DeclRefExpr 0x153127f80 <col:5> 'long *' lvalue Var 0x153127ec8 'p' 'long *'
    | `-ImplicitCastExpr 0x1531281b8 <col:9, col:41> 'long *' <IntegralToPointer>
    |   `-CallExpr 0x153128158 <col:9, col:41> 'int'
    |     |-ImplicitCastExpr 0x153128140 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x1531280b0 <col:9> 'int ()' Function 0x153127ff8 'insecure_flag' 'int ()'
    |     |-ImplicitCastExpr 0x153128188 <col:23> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x1531280d0 <col:23> 'int' lvalue ParmVar 0x153127ad8 'opt_idx' 'int'
    |     `-ImplicitCastExpr 0x1531281a0 <col:32> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x1531280f0 <col:32> 'int' lvalue ParmVar 0x153127b58 'opt_flags' 'int'
    `-IfStmt 0x153140dd8 <line:16:5, line:23:13> has_else
      |-RecoveryExpr 0x1531408d0 <line:16:9, line:20:35> '_Bool' contains-errors
      |-BinaryOperator 0x153140ae8 <line:21:2, col:12> 'long' contains-errors '='
      | |-UnaryOperator 0x153140a60 <col:2, col:3> 'long' lvalue prefix '*' cannot overflow
      | | `-ImplicitCastExpr 0x153140a48 <col:3> 'long *' <LValueToRValue>
      | |   `-DeclRefExpr 0x1531408f0 <col:3> 'long *' lvalue Var 0x153127ec8 'p' 'long *'
      | `-BinaryOperator 0x153140ac8 <col:7, col:12> '<dependent type>' contains-errors '|'
      |   |-UnaryOperator 0x153140a90 <col:7, col:8> 'long' lvalue prefix '*' cannot overflow
      |   | `-ImplicitCastExpr 0x153140a78 <col:8> 'long *' <LValueToRValue>
      |   |   `-DeclRefExpr 0x153140940 <col:8> 'long *' lvalue Var 0x153127ec8 'p' 'long *'
      |   `-RecoveryExpr 0x153140aa8 <col:12> '<dependent type>' contains-errors lvalue
      `-IfStmt 0x153140db8 <line:22:10, line:23:13>
        |-ImplicitCastExpr 0x153140b28 <line:22:14> 'int' <LValueToRValue>
        | `-DeclRefExpr 0x153140b08 <col:14> 'int' lvalue ParmVar 0x153127bd8 'new_value' 'int'
        `-BinaryOperator 0x153140d98 <line:23:2, col:13> 'long' contains-errors '='
          |-UnaryOperator 0x153140ce0 <col:2, col:3> 'long' lvalue prefix '*' cannot overflow
          | `-ImplicitCastExpr 0x153140cc8 <col:3> 'long *' <LValueToRValue>
          |   `-DeclRefExpr 0x153140b40 <col:3> 'long *' lvalue Var 0x153127ec8 'p' 'long *'
          `-BinaryOperator 0x153140d78 <col:7, col:13> '<dependent type>' contains-errors '&'
            |-UnaryOperator 0x153140d10 <col:7, col:8> 'long' lvalue prefix '*' cannot overflow
            | `-ImplicitCastExpr 0x153140cf8 <col:8> 'long *' <LValueToRValue>
            |   `-DeclRefExpr 0x153140b90 <col:8> 'long *' lvalue Var 0x153127ec8 'p' 'long *'
            `-UnaryOperator 0x153140d60 <col:12, col:13> '<dependent type>' contains-errors prefix '~' cannot overflow
              `-ImplicitCastExpr 0x153140d48 <col:13> '<dependent type>' contains-errors <LValueToRValue>
                `-RecoveryExpr 0x153140d28 <col:13> '<dependent type>' contains-errors lvalue
