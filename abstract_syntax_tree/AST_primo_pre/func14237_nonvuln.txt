`-FunctionDecl 0x124826680  line:1:13 print_objinfo 'void (struct kmem_cache *, void *, int)' static
  |-ParmVarDecl 0x12480e248 <col:27, col:46> col:46 used cachep 'struct kmem_cache *'
  |-ParmVarDecl 0x12480e2c8 <col:54, col:60> col:60 used objp 'void *'
  |-ParmVarDecl 0x12480e348 <col:66, col:70> col:70 used lines 'int'
  `-CompoundStmt 0x12580b2c8 <line:2:1, line:26:1>
    |-DeclStmt 0x1248268a0 <line:3:2, col:13>
    | |-VarDecl 0x1248267a0 <col:2, col:6> col:6 used i 'int'
    | `-VarDecl 0x124826820 <col:2, col:9> col:9 used size 'int'
    |-DeclStmt 0x124826938 <line:4:2, col:15>
    | `-VarDecl 0x1248268d0 <col:2, col:8> col:8 used realobj 'char *'
    |-IfStmt 0x124827010 <line:6:2, line:10:2>
    | |-BinaryOperator 0x124826a20 <line:6:6, col:22> '<dependent type>' contains-errors '&'
    | | |-RecoveryExpr 0x124826988 <col:6, col:14> '<dependent type>' contains-errors lvalue
    | | | `-DeclRefExpr 0x124826950 <col:6> 'struct kmem_cache *' lvalue ParmVar 0x12480e248 'cachep' 'struct kmem_cache *'
    | | `-RecoveryExpr 0x124826a00 <col:22> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x124826ff8 <col:37, line:10:2>
    |   `-CallExpr 0x124826fc0 <line:7:3, line:9:37> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x124826b50 <line:7:3> 'int ()' Function 0x124826a98 'pr_err' 'int ()'
    |     |-StringLiteral 0x124826bb0 <col:10> 'char[4]' lvalue "STR"
    |     |-RecoveryExpr 0x124826db8 <line:8:10, col:36> '<dependent type>' contains-errors lvalue
    |     | `-CallExpr 0x124826d58 <col:11, col:36> 'int'
    |     |   |-ImplicitCastExpr 0x124826d40 <col:11> 'int (*)()' <FunctionToPointerDecay>
    |     |   | `-DeclRefExpr 0x124826cb0 <col:11> 'int ()' Function 0x124826bf8 'dbg_redzone1' 'int ()'
    |     |   |-ImplicitCastExpr 0x124826d88 <col:24> 'struct kmem_cache *' <LValueToRValue>
    |     |   | `-DeclRefExpr 0x124826cd0 <col:24> 'struct kmem_cache *' lvalue ParmVar 0x12480e248 'cachep' 'struct kmem_cache *'
    |     |   `-ImplicitCastExpr 0x124826da0 <col:32> 'void *' <LValueToRValue>
    |     |     `-DeclRefExpr 0x124826cf0 <col:32> 'void *' lvalue ParmVar 0x12480e2c8 'objp' 'void *'
    |     `-RecoveryExpr 0x124826f98 <line:9:10, col:36> '<dependent type>' contains-errors lvalue
    |       `-CallExpr 0x124826f38 <col:11, col:36> 'int'
    |         |-ImplicitCastExpr 0x124826f20 <col:11> 'int (*)()' <FunctionToPointerDecay>
    |         | `-DeclRefExpr 0x124826ec0 <col:11> 'int ()' Function 0x124826e08 'dbg_redzone2' 'int ()'
    |         |-ImplicitCastExpr 0x124826f68 <col:24> 'struct kmem_cache *' <LValueToRValue>
    |         | `-DeclRefExpr 0x124826ee0 <col:24> 'struct kmem_cache *' lvalue ParmVar 0x12480e248 'cachep' 'struct kmem_cache *'
    |         `-ImplicitCastExpr 0x124826f80 <col:32> 'void *' <LValueToRValue>
    |           `-DeclRefExpr 0x124826f00 <col:32> 'void *' lvalue ParmVar 0x12480e2c8 'objp' 'void *'
    |-IfStmt 0x124827478 <line:12:2, line:16:2>
    | |-BinaryOperator 0x1248270e8 <line:12:6, col:22> '<dependent type>' contains-errors '&'
    | | |-RecoveryExpr 0x124827068 <col:6, col:14> '<dependent type>' contains-errors lvalue
    | | | `-DeclRefExpr 0x124827030 <col:6> 'struct kmem_cache *' lvalue ParmVar 0x12480e248 'cachep' 'struct kmem_cache *'
    | | `-RecoveryExpr 0x1248270c8 <col:22> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x124827460 <col:39, line:16:2>
    |   `-CallExpr 0x124827428 <line:13:3, line:15:37> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x124827108 <line:13:3> 'int ()' Function 0x124826a98 'pr_err' 'int ()'
    |     |-StringLiteral 0x124827128 <col:10> 'char[4]' lvalue "STR"
    |     |-RecoveryExpr 0x124827300 <line:14:10, col:36> '<dependent type>' contains-errors lvalue
    |     | `-CallExpr 0x1248272a0 <col:11, col:36> 'int'
    |     |   |-ImplicitCastExpr 0x124827288 <col:11> 'int (*)()' <FunctionToPointerDecay>
    |     |   | `-DeclRefExpr 0x124827228 <col:11> 'int ()' Function 0x124827170 'dbg_userword' 'int ()'
    |     |   |-ImplicitCastExpr 0x1248272d0 <col:24> 'struct kmem_cache *' <LValueToRValue>
    |     |   | `-DeclRefExpr 0x124827248 <col:24> 'struct kmem_cache *' lvalue ParmVar 0x12480e248 'cachep' 'struct kmem_cache *'
    |     |   `-ImplicitCastExpr 0x1248272e8 <col:32> 'void *' <LValueToRValue>
    |     |     `-DeclRefExpr 0x124827268 <col:32> 'void *' lvalue ParmVar 0x12480e2c8 'objp' 'void *'
    |     `-RecoveryExpr 0x124827400 <line:15:10, col:36> '<dependent type>' contains-errors lvalue
    |       `-CallExpr 0x1248273a0 <col:11, col:36> 'int'
    |         |-ImplicitCastExpr 0x124827388 <col:11> 'int (*)()' <FunctionToPointerDecay>
    |         | `-DeclRefExpr 0x124827328 <col:11> 'int ()' Function 0x124827170 'dbg_userword' 'int ()'
    |         |-ImplicitCastExpr 0x1248273d0 <col:24> 'struct kmem_cache *' <LValueToRValue>
    |         | `-DeclRefExpr 0x124827348 <col:24> 'struct kmem_cache *' lvalue ParmVar 0x12480e248 'cachep' 'struct kmem_cache *'
    |         `-ImplicitCastExpr 0x1248273e8 <col:32> 'void *' <LValueToRValue>
    |           `-DeclRefExpr 0x124827368 <col:32> 'void *' lvalue ParmVar 0x12480e2c8 'objp' 'void *'
    |-BinaryOperator 0x12580aac8 <line:17:2, col:44> 'char *' '='
    | |-DeclRefExpr 0x124827498 <col:2> 'char *' lvalue Var 0x1248268d0 'realobj' 'char *'
    | `-BinaryOperator 0x12580aaa8 <col:12, col:44> 'char *' '+'
    |   |-CStyleCastExpr 0x124827508 <col:12, col:20> 'char *' <BitCast>
    |   | `-ImplicitCastExpr 0x1248274f0 <col:20> 'void *' <LValueToRValue> part_of_explicit_cast
    |   |   `-DeclRefExpr 0x1248274b8 <col:20> 'void *' lvalue ParmVar 0x12480e2c8 'objp' 'void *'
    |   `-CallExpr 0x12580aa68 <col:27, col:44> 'int'
    |     |-ImplicitCastExpr 0x12580aa50 <col:27> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x12580aa10 <col:27> 'int ()' Function 0x124827558 'obj_offset' 'int ()'
    |     `-ImplicitCastExpr 0x12580aa90 <col:38> 'struct kmem_cache *' <LValueToRValue>
    |       `-DeclRefExpr 0x12580aa30 <col:38> 'struct kmem_cache *' lvalue ParmVar 0x12480e248 'cachep' 'struct kmem_cache *'
    |-BinaryOperator 0x12580ab68 <line:18:2, col:17> 'int' contains-errors '='
    | |-DeclRefExpr 0x12580aae8 <col:2> 'int' lvalue Var 0x124826820 'size' 'int'
    | `-RecoveryExpr 0x12580ab40 <col:9, col:17> '<dependent type>' contains-errors lvalue
    |   `-DeclRefExpr 0x12580ab08 <col:9> 'struct kmem_cache *' lvalue ParmVar 0x12480e248 'cachep' 'struct kmem_cache *'
    `-ForStmt 0x12580b290 <line:19:2, line:25:2>
      |-BinaryOperator 0x12580abc8 <line:19:7, col:11> 'int' '='
      | |-DeclRefExpr 0x12580ab88 <col:7> 'int' lvalue Var 0x1248267a0 'i' 'int'
      | `-IntegerLiteral 0x12580aba8 <col:11> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x12580acb0 <col:14, col:26> 'int' '&&'
      | |-BinaryOperator 0x12580ac58 <col:14, col:18> 'int' '<'
      | | |-ImplicitCastExpr 0x12580ac28 <col:14> 'int' <LValueToRValue>
      | | | `-DeclRefExpr 0x12580abe8 <col:14> 'int' lvalue Var 0x1248267a0 'i' 'int'
      | | `-ImplicitCastExpr 0x12580ac40 <col:18> 'int' <LValueToRValue>
      | |   `-DeclRefExpr 0x12580ac08 <col:18> 'int' lvalue Var 0x124826820 'size' 'int'
      | `-ImplicitCastExpr 0x12580ac98 <col:26> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x12580ac78 <col:26> 'int' lvalue ParmVar 0x12480e348 'lines' 'int'
      |-BinaryOperator 0x12580ad78 <col:33, col:47> 'int' ','
      | |-CompoundAssignOperator 0x12580ad10 <col:33, col:38> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | | |-DeclRefExpr 0x12580acd0 <col:33> 'int' lvalue Var 0x1248267a0 'i' 'int'
      | | `-IntegerLiteral 0x12580acf0 <col:38> 'int' 16
      | `-UnaryOperator 0x12580ad60 <col:42, col:47> 'int' postfix '--'
      |   `-DeclRefExpr 0x12580ad40 <col:42> 'int' lvalue ParmVar 0x12480e348 'lines' 'int'
      `-CompoundStmt 0x12580b260 <col:51, line:25:2>
        |-DeclStmt 0x12580ae18 <line:20:3, col:12>
        | `-VarDecl 0x12580adb0 <col:3, col:7> col:7 used limit 'int'
        |-BinaryOperator 0x12580ae70 <line:21:3, col:11> 'int' '='
        | |-DeclRefExpr 0x12580ae30 <col:3> 'int' lvalue Var 0x12580adb0 'limit' 'int'
        | `-IntegerLiteral 0x12580ae50 <col:11> 'int' 16
        |-IfStmt 0x12580b048 <line:22:3, line:23:19>
        | |-BinaryOperator 0x12580af58 <line:22:7, col:19> 'int' '>'
        | | |-BinaryOperator 0x12580af00 <col:7, col:11> 'int' '+'
        | | | |-ImplicitCastExpr 0x12580aed0 <col:7> 'int' <LValueToRValue>
        | | | | `-DeclRefExpr 0x12580ae90 <col:7> 'int' lvalue Var 0x1248267a0 'i' 'int'
        | | | `-ImplicitCastExpr 0x12580aee8 <col:11> 'int' <LValueToRValue>
        | | |   `-DeclRefExpr 0x12580aeb0 <col:11> 'int' lvalue Var 0x12580adb0 'limit' 'int'
        | | `-ImplicitCastExpr 0x12580af40 <col:19> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x12580af20 <col:19> 'int' lvalue Var 0x124826820 'size' 'int'
        | `-BinaryOperator 0x12580b028 <line:23:4, col:19> 'int' '='
        |   |-DeclRefExpr 0x12580af78 <col:4> 'int' lvalue Var 0x12580adb0 'limit' 'int'
        |   `-BinaryOperator 0x12580b008 <col:12, col:19> 'int' '-'
        |     |-ImplicitCastExpr 0x12580afd8 <col:12> 'int' <LValueToRValue>
        |     | `-DeclRefExpr 0x12580af98 <col:12> 'int' lvalue Var 0x124826820 'size' 'int'
        |     `-ImplicitCastExpr 0x12580aff0 <col:19> 'int' <LValueToRValue>
        |       `-DeclRefExpr 0x12580afb8 <col:19> 'int' lvalue Var 0x1248267a0 'i' 'int'
        `-CallExpr 0x12580b1e0 <line:24:3, col:30> 'int'
          |-ImplicitCastExpr 0x12580b1c8 <col:3> 'int (*)()' <FunctionToPointerDecay>
          | `-DeclRefExpr 0x12580b148 <col:3> 'int ()' Function 0x12580b090 'dump_line' 'int ()'
          |-ImplicitCastExpr 0x12580b218 <col:13> 'char *' <LValueToRValue>
          | `-DeclRefExpr 0x12580b168 <col:13> 'char *' lvalue Var 0x1248268d0 'realobj' 'char *'
          |-ImplicitCastExpr 0x12580b230 <col:22> 'int' <LValueToRValue>
          | `-DeclRefExpr 0x12580b188 <col:22> 'int' lvalue Var 0x1248267a0 'i' 'int'
          `-ImplicitCastExpr 0x12580b248 <col:25> 'int' <LValueToRValue>
            `-DeclRefExpr 0x12580b1a8 <col:25> 'int' lvalue Var 0x12580adb0 'limit' 'int'
