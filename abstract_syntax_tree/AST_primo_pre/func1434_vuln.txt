`-FunctionDecl 0x12d928758  line:1:1 limited_big_rand 'int (struct RBignum *)'
  |-ParmVarDecl 0x12d928648 <col:18, col:34> col:34 used limit 'struct RBignum *'
  `-CompoundStmt 0x12e009138 <line:2:1, line:43:1>
    |-DeclStmt 0x12d940bf0 <line:3:5, col:33>
    | |-VarDecl 0x12d940a68 <col:5, col:19> col:19 used mask 'unsigned long'
    | |-VarDecl 0x12d940ae8 <col:5, col:25> col:25 used lim 'unsigned long'
    | `-VarDecl 0x12d940b68 <col:5, col:30> col:30 used rnd 'unsigned long'
    |-DeclStmt 0x12d940d00 <line:4:5, col:24>
    | `-VarDecl 0x12d940c98 <col:5, col:21> col:21 used val 'struct RBignum *'
    |-DeclStmt 0x12d940eb8 <line:5:5, col:25>
    | |-VarDecl 0x12d940d30 <col:5, col:9> col:9 used i 'int'
    | |-VarDecl 0x12d940db0 <col:5, col:12> col:12 used len 'int'
    | `-VarDecl 0x12d940e30 <col:5, col:17> col:17 used boundary 'int'
    |-BinaryOperator 0x12d9411e8 <line:9:5, col:17> '<dependent type>' contains-errors '='
    | |-RecoveryExpr 0x12d9411a0 <col:5, col:10> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x12d941168 <col:5> 'struct RBignum *' lvalue Var 0x12d940c98 'val' 'struct RBignum *'
    | `-IntegerLiteral 0x12d9411c8 <col:17> 'int' 1
    |-LabelStmt 0x12d9412d0 <line:22:3, line:23:12> 'retry'
    | `-BinaryOperator 0x12d941260 <col:5, col:12> 'unsigned long' '='
    |   |-DeclRefExpr 0x12d941208 <col:5> 'unsigned long' lvalue Var 0x12d940a68 'mask' 'unsigned long'
    |   `-ImplicitCastExpr 0x12d941248 <col:12> 'unsigned long' <IntegralCast>
    |     `-IntegerLiteral 0x12d941228 <col:12> 'int' 0
    |-BinaryOperator 0x12d941330 <line:24:5, col:16> 'int' '='
    | |-DeclRefExpr 0x12d9412f0 <col:5> 'int' lvalue Var 0x12d940e30 'boundary' 'int'
    | `-IntegerLiteral 0x12d941310 <col:16> 'int' 1
    `-ForStmt 0x12e008fe8 <line:25:5, line:41:5>
      |-BinaryOperator 0x12d9413e8 <line:25:10, col:18> 'int' '='
      | |-DeclRefExpr 0x12d941350 <col:10> 'int' lvalue Var 0x12d940d30 'i' 'int'
      | `-BinaryOperator 0x12d9413c8 <col:14, col:18> 'int' '-'
      |   |-ImplicitCastExpr 0x12d9413b0 <col:14> 'int' <LValueToRValue>
      |   | `-DeclRefExpr 0x12d941370 <col:14> 'int' lvalue Var 0x12d940db0 'len' 'int'
      |   `-IntegerLiteral 0x12d941390 <col:18> 'int' 1
      |-<<<NULL>>>
      |-BinaryOperator 0x12d941460 <col:21, col:26> 'int' '<='
      | |-IntegerLiteral 0x12d941408 <col:21> 'int' 0
      | `-ImplicitCastExpr 0x12d941448 <col:26> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x12d941428 <col:26> 'int' lvalue Var 0x12d940d30 'i' 'int'
      |-UnaryOperator 0x12d9414a0 <col:29, col:30> 'int' postfix '--'
      | `-DeclRefExpr 0x12d941480 <col:29> 'int' lvalue Var 0x12d940d30 'i' 'int'
      `-CompoundStmt 0x12e008fc8 <col:34, line:41:5>
        |-BinaryOperator 0x12d9417b0 <line:27:9, col:49> 'unsigned long' '='
        | |-DeclRefExpr 0x12d941530 <col:9> 'unsigned long' lvalue Var 0x12d940a68 'mask' 'unsigned long'
        | `-ImplicitCastExpr 0x12d941798 <col:16, col:49> 'unsigned long' <IntegralCast>
        |   `-ConditionalOperator 0x12d941768 <col:16, col:49> 'unsigned int'
        |     |-ImplicitCastExpr 0x12d941738 <col:16> 'unsigned long' <LValueToRValue>
        |     | `-DeclRefExpr 0x12d941550 <col:16> 'unsigned long' lvalue Var 0x12d940a68 'mask' 'unsigned long'
        |     |-IntegerLiteral 0x12d941570 <col:23> 'unsigned int' 4294967295
        |     `-ImplicitCastExpr 0x12d941750 <col:36, col:49> 'unsigned int' <IntegralCast>
        |       `-CallExpr 0x12d9416f8 <col:36, col:49> 'int'
        |         |-ImplicitCastExpr 0x12d9416e0 <col:36> 'int (*)()' <FunctionToPointerDecay>
        |         | `-DeclRefExpr 0x12d941670 <col:36> 'int ()' Function 0x12d9415b8 'make_mask' 'int ()'
        |         `-ImplicitCastExpr 0x12d941720 <col:46> 'unsigned long' <LValueToRValue>
        |           `-DeclRefExpr 0x12d941690 <col:46> 'unsigned long' lvalue Var 0x12d940ae8 'lim' 'unsigned long'
        `-IfStmt 0x12e008f00 <line:28:9, line:39:9> has_else
          |-ImplicitCastExpr 0x12d9417f0 <line:28:13> 'unsigned long' <LValueToRValue>
          | `-DeclRefExpr 0x12d9417d0 <col:13> 'unsigned long' lvalue Var 0x12d940a68 'mask' 'unsigned long'
          |-CompoundStmt 0x12e008e50 <col:19, line:36:9>
          | |-BinaryOperator 0x12d9419d0 <line:29:13, col:37> 'unsigned long' '='
          | | |-DeclRefExpr 0x12d941808 <col:13> 'unsigned long' lvalue Var 0x12d940b68 'rnd' 'unsigned long'
          | | `-BinaryOperator 0x12d9419b0 <col:19, col:37> 'unsigned long' '&'
          | |   |-ImplicitCastExpr 0x12d941998 <col:19, col:33> 'unsigned long' <IntegralCast>
          | |   | `-CallExpr 0x12d941940 <col:19, col:33> 'int'
          | |   |   `-ImplicitCastExpr 0x12d941928 <col:19> 'int (*)()' <FunctionToPointerDecay>
          | |   |     `-DeclRefExpr 0x12d941908 <col:19> 'int ()' Function 0x12d941850 'genrand_int32' 'int ()'
          | |   `-ImplicitCastExpr 0x12d941980 <col:37> 'unsigned long' <LValueToRValue>
          | |     `-DeclRefExpr 0x12d941960 <col:37> 'unsigned long' lvalue Var 0x12d940a68 'mask' 'unsigned long'
          | `-IfStmt 0x12e008e30 <line:30:13, line:35:13>
          |   |-ImplicitCastExpr 0x12e008c20 <line:30:17> 'int' <LValueToRValue>
          |   | `-DeclRefExpr 0x12e008c00 <col:17> 'int' lvalue Var 0x12d940e30 'boundary' 'int'
          |   `-CompoundStmt 0x12e008e10 <col:27, line:35:13>
          |     |-IfStmt 0x12e008ce0 <line:31:17, line:32:26>
          |     | |-BinaryOperator 0x12e008ca8 <line:31:21, col:27> 'int' '<'
          |     | | |-ImplicitCastExpr 0x12e008c78 <col:21> 'unsigned long' <LValueToRValue>
          |     | | | `-DeclRefExpr 0x12e008c38 <col:21> 'unsigned long' lvalue Var 0x12d940ae8 'lim' 'unsigned long'
          |     | | `-ImplicitCastExpr 0x12e008c90 <col:27> 'unsigned long' <LValueToRValue>
          |     | |   `-DeclRefExpr 0x12e008c58 <col:27> 'unsigned long' lvalue Var 0x12d940b68 'rnd' 'unsigned long'
          |     | `-GotoStmt 0x12e008cc8 <line:32:21, col:26> 'retry' 0x12d941280
          |     `-IfStmt 0x12e008df0 <line:33:17, line:34:32>
          |       |-BinaryOperator 0x12e008d70 <line:33:21, col:27> 'int' '<'
          |       | |-ImplicitCastExpr 0x12e008d40 <col:21> 'unsigned long' <LValueToRValue>
          |       | | `-DeclRefExpr 0x12e008d00 <col:21> 'unsigned long' lvalue Var 0x12d940b68 'rnd' 'unsigned long'
          |       | `-ImplicitCastExpr 0x12e008d58 <col:27> 'unsigned long' <LValueToRValue>
          |       |   `-DeclRefExpr 0x12e008d20 <col:27> 'unsigned long' lvalue Var 0x12d940ae8 'lim' 'unsigned long'
          |       `-BinaryOperator 0x12e008dd0 <line:34:21, col:32> 'int' '='
          |         |-DeclRefExpr 0x12e008d90 <col:21> 'int' lvalue Var 0x12d940e30 'boundary' 'int'
          |         `-IntegerLiteral 0x12e008db0 <col:32> 'int' 0
          `-CompoundStmt 0x12e008ee8 <line:37:14, line:39:9>
            `-BinaryOperator 0x12e008ec8 <line:38:13, col:19> 'unsigned long' '='
              |-DeclRefExpr 0x12e008e70 <col:13> 'unsigned long' lvalue Var 0x12d940b68 'rnd' 'unsigned long'
              `-ImplicitCastExpr 0x12e008eb0 <col:19> 'unsigned long' <IntegralCast>
                `-IntegerLiteral 0x12e008e90 <col:19> 'int' 0
