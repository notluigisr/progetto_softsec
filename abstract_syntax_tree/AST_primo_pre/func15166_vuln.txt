`-FunctionDecl 0x13c1282a8  line:1:20 parse_iv2 'long (const unsigned char *, const unsigned char **)' static inline
  |-ParmVarDecl 0x13c128108 <col:30, col:51> col:51 used p 'const unsigned char *'
  |-ParmVarDecl 0x13c1281c0 <col:54, col:76> col:76 used q 'const unsigned char **'
  `-CompoundStmt 0x13c141168 <line:2:1, line:27:1>
    |-DeclStmt 0x13c128420 <line:3:2, col:13>
    | `-VarDecl 0x13c1283b8 <col:2, col:7> col:7 used cursor 'char'
    |-DeclStmt 0x13c1284f0 <line:4:2, col:17>
    | `-VarDecl 0x13c128450 <col:2, col:16> col:7 used result 'long' cinit
    |   `-ImplicitCastExpr 0x13c1284d8 <col:16> 'long' <IntegralCast>
    |     `-IntegerLiteral 0x13c1284b8 <col:16> 'int' 0
    |-DeclStmt 0x13c1285a8 <line:5:2, col:13>
    | `-VarDecl 0x13c128520 <col:2, col:12> col:6 used neg 'int' cinit
    |   `-IntegerLiteral 0x13c128588 <col:12> 'int' 0
    |-SwitchStmt 0x13c128640 <line:7:2, line:13:2>
    | |-ImplicitCastExpr 0x13c128628 <line:7:10, col:11> 'int' <IntegralCast>
    | | `-ImplicitCastExpr 0x13c128610 <col:10, col:11> 'unsigned char' <LValueToRValue>
    | |   `-UnaryOperator 0x13c1285f8 <col:10, col:11> 'const unsigned char' lvalue prefix '*' cannot overflow
    | |     `-ImplicitCastExpr 0x13c1285e0 <col:11> 'const unsigned char *' <LValueToRValue>
    | |       `-DeclRefExpr 0x13c1285c0 <col:11> 'const unsigned char *' lvalue ParmVar 0x13c128108 'p' 'const unsigned char *'
    | `-CompoundStmt 0x13c128788 <col:14, line:13:2>
    |   |-CaseStmt 0x13c128698 <line:8:3, line:9:7>
    |   | |-ConstantExpr 0x13c128680 <line:8:8> 'int'
    |   | | `-CharacterLiteral 0x13c128668 <col:8> 'int' 45
    |   | `-UnaryOperator 0x13c1286e0 <line:9:4, col:7> 'int' postfix '++'
    |   |   `-DeclRefExpr 0x13c1286c0 <col:4> 'int' lvalue Var 0x13c128520 'neg' 'int'
    |   `-CaseStmt 0x13c128728 <line:11:3, line:12:5>
    |     |-ConstantExpr 0x13c128710 <line:11:8> 'int'
    |     | `-CharacterLiteral 0x13c1286f8 <col:8> 'int' 43
    |     `-UnaryOperator 0x13c128770 <line:12:4, col:5> 'const unsigned char *' postfix '++'
    |       `-DeclRefExpr 0x13c128750 <col:4> 'const unsigned char *' lvalue ParmVar 0x13c128108 'p' 'const unsigned char *'
    |-WhileStmt 0x13c140f48 <line:15:2, line:23:2>
    | |-IntegerLiteral 0x13c1287a8 <line:15:9> 'int' 1
    | `-CompoundStmt 0x13c140f20 <col:12, line:23:2>
    |   |-BinaryOperator 0x13c140aa0 <line:16:3, col:19> 'char' '='
    |   | |-DeclRefExpr 0x13c1287c8 <col:3> 'char' lvalue Var 0x13c1283b8 'cursor' 'char'
    |   | `-CStyleCastExpr 0x13c140a78 <col:12, col:19> 'char' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x13c140a60 <col:18, col:19> 'unsigned char' <LValueToRValue> part_of_explicit_cast
    |   |     `-UnaryOperator 0x13c140a38 <col:18, col:19> 'const unsigned char' lvalue prefix '*' cannot overflow
    |   |       `-ImplicitCastExpr 0x13c140a20 <col:19> 'const unsigned char *' <LValueToRValue>
    |   |         `-DeclRefExpr 0x13c140a00 <col:19> 'const unsigned char *' lvalue ParmVar 0x13c128108 'p' 'const unsigned char *'
    |   |-IfStmt 0x13c140eb8 <line:17:3, line:21:3> has_else
    |   | |-BinaryOperator 0x13c140bd0 <line:17:7, col:34> 'int' '&&'
    |   | | |-BinaryOperator 0x13c140b28 <col:7, col:17> 'int' '>='
    |   | | | |-ImplicitCastExpr 0x13c140b10 <col:7> 'int' <IntegralCast>
    |   | | | | `-ImplicitCastExpr 0x13c140af8 <col:7> 'char' <LValueToRValue>
    |   | | | |   `-DeclRefExpr 0x13c140ac0 <col:7> 'char' lvalue Var 0x13c1283b8 'cursor' 'char'
    |   | | | `-CharacterLiteral 0x13c140ae0 <col:17> 'int' 48
    |   | | `-BinaryOperator 0x13c140bb0 <col:24, col:34> 'int' '<='
    |   | |   |-ImplicitCastExpr 0x13c140b98 <col:24> 'int' <IntegralCast>
    |   | |   | `-ImplicitCastExpr 0x13c140b80 <col:24> 'char' <LValueToRValue>
    |   | |   |   `-DeclRefExpr 0x13c140b48 <col:24> 'char' lvalue Var 0x13c1283b8 'cursor' 'char'
    |   | |   `-CharacterLiteral 0x13c140b68 <col:34> 'int' 57
    |   | |-CompoundStmt 0x13c140e80 <col:39, line:19:3>
    |   | | `-BinaryOperator 0x13c140e60 <line:18:4, col:63> 'long' contains-errors '='
    |   | |   |-DeclRefExpr 0x13c140bf0 <col:4> 'long' lvalue Var 0x13c128450 'result' 'long'
    |   | |   `-BinaryOperator 0x13c140e40 <col:13, col:63> '<dependent type>' contains-errors '+'
    |   | |     |-BinaryOperator 0x13c140c80 <col:13, col:22> 'long' '*'
    |   | |     | |-ImplicitCastExpr 0x13c140c50 <col:13> 'long' <LValueToRValue>
    |   | |     | | `-DeclRefExpr 0x13c140c10 <col:13> 'long' lvalue Var 0x13c128450 'result' 'long'
    |   | |     | `-ImplicitCastExpr 0x13c140c68 <col:22> 'long' <IntegralCast>
    |   | |     |   `-IntegerLiteral 0x13c140c30 <col:22> 'int' 10
    |   | |     `-RecoveryExpr 0x13c140e10 <col:27, col:63> '<dependent type>' contains-errors lvalue
    |   | |       |-ParenExpr 0x13c140d10 <col:27, col:34> '<overloaded function type>' lvalue
    |   | |       | `-UnresolvedLookupExpr 0x13c140cd0 <col:28> '<overloaded function type>' lvalue (no ADL) = 'size_t' empty
    |   | |       `-BinaryOperator 0x13c140df0 <col:36, col:60> 'int' '-'
    |   | |         |-ImplicitCastExpr 0x13c140dc0 <col:36> 'int' <IntegralCast>
    |   | |         | `-ImplicitCastExpr 0x13c140da8 <col:36> 'char' <LValueToRValue>
    |   | |         |   `-DeclRefExpr 0x13c140d30 <col:36> 'char' lvalue Var 0x13c1283b8 'cursor' 'char'
    |   | |         `-ImplicitCastExpr 0x13c140dd8 <col:45, col:60> 'int' <IntegralCast>
    |   | |           `-CStyleCastExpr 0x13c140d80 <col:45, col:60> 'unsigned char' <IntegralCast>
    |   | |             `-CharacterLiteral 0x13c140d50 <col:60> 'int' 48
    |   | `-CompoundStmt 0x13c140ea0 <line:19:10, line:21:3>
    |   |   `-BreakStmt 0x13c140e98 <line:20:4>
    |   `-UnaryOperator 0x13c140f08 <line:22:3, col:4> 'const unsigned char *' postfix '++'
    |     `-DeclRefExpr 0x13c140ee8 <col:3> 'const unsigned char *' lvalue ParmVar 0x13c128108 'p' 'const unsigned char *'
    |-IfStmt 0x13c141048 <line:24:2, col:14>
    | |-ImplicitCastExpr 0x13c140f88 <col:6> 'const unsigned char **' <LValueToRValue>
    | | `-DeclRefExpr 0x13c140f68 <col:6> 'const unsigned char **' lvalue ParmVar 0x13c1281c0 'q' 'const unsigned char **'
    | `-BinaryOperator 0x13c141028 <col:9, col:14> 'const unsigned char *' '='
    |   |-UnaryOperator 0x13c140fd8 <col:9, col:10> 'const unsigned char *' lvalue prefix '*' cannot overflow
    |   | `-ImplicitCastExpr 0x13c140fc0 <col:10> 'const unsigned char **' <LValueToRValue>
    |   |   `-DeclRefExpr 0x13c140fa0 <col:10> 'const unsigned char **' lvalue ParmVar 0x13c1281c0 'q' 'const unsigned char **'
    |   `-ImplicitCastExpr 0x13c141010 <col:14> 'const unsigned char *' <LValueToRValue>
    |     `-DeclRefExpr 0x13c140ff0 <col:14> 'const unsigned char *' lvalue ParmVar 0x13c128108 'p' 'const unsigned char *'
    |-IfStmt 0x13c141100 <line:25:2, col:19>
    | |-ImplicitCastExpr 0x13c141088 <col:6> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x13c141068 <col:6> 'int' lvalue Var 0x13c128520 'neg' 'int'
    | `-ReturnStmt 0x13c1410f0 <col:11, col:19>
    |   `-UnaryOperator 0x13c1410d8 <col:18, col:19> 'long' prefix '-'
    |     `-ImplicitCastExpr 0x13c1410c0 <col:19> 'long' <LValueToRValue>
    |       `-DeclRefExpr 0x13c1410a0 <col:19> 'long' lvalue Var 0x13c128450 'result' 'long'
    `-ReturnStmt 0x13c141158 <line:26:2, col:9>
      `-ImplicitCastExpr 0x13c141140 <col:9> 'long' <LValueToRValue>
        `-DeclRefExpr 0x13c141120 <col:9> 'long' lvalue Var 0x13c128450 'result' 'long'
