`-FunctionDecl 0x13791b9a8  line:1:3 make_tag 'int (char *)'
  |-ParmVarDecl 0x13791b8d8 <col:13, col:20> col:20 used s 'char *'
  `-CompoundStmt 0x13791ea98 <line:2:3, line:16:3>
    |-DeclStmt 0x13791bb20 <line:3:5, col:21>
    | `-VarDecl 0x13791bab8 <col:5, col:20> col:20 used i 'int'
    |-DeclStmt 0x13791bbf0 <line:4:5, col:25>
    | `-VarDecl 0x13791bb50 <col:5, col:24> col:20 used l 'unsigned long' cinit
    |   `-ImplicitCastExpr 0x13791bbd8 <col:24> 'unsigned long' <IntegralCast>
    |     `-IntegerLiteral 0x13791bbb8 <col:24> 'int' 0
    |-ForStmt 0x13791ea00 <line:7:5, line:13:5>
    | |-BinaryOperator 0x13791bc48 <line:7:11, col:15> 'int' '='
    | | |-DeclRefExpr 0x13791bc08 <col:11> 'int' lvalue Var 0x13791bab8 'i' 'int'
    | | `-IntegerLiteral 0x13791bc28 <col:15> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x13791bcc0 <col:18, col:22> 'int' '<'
    | | |-ImplicitCastExpr 0x13791bca8 <col:18> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x13791bc68 <col:18> 'int' lvalue Var 0x13791bab8 'i' 'int'
    | | `-IntegerLiteral 0x13791bc88 <col:22> 'int' 4
    | |-UnaryOperator 0x13791bd00 <col:25, col:26> 'int' postfix '++'
    | | `-DeclRefExpr 0x13791bce0 <col:25> 'int' lvalue Var 0x13791bab8 'i' 'int'
    | `-CompoundStmt 0x13791bfc0 <line:8:5, line:13:5>
    |   |-IfStmt 0x13791bde0 <line:9:7, line:10:9>
    |   | |-UnaryOperator 0x13791bdc0 <line:9:12, col:16> 'int' prefix '!' cannot overflow
    |   | | `-ImplicitCastExpr 0x13791bda8 <col:13, col:16> 'char' <LValueToRValue>
    |   | |   `-ArraySubscriptExpr 0x13791bd88 <col:13, col:16> 'char' lvalue
    |   | |     |-ImplicitCastExpr 0x13791bd58 <col:13> 'char *' <LValueToRValue>
    |   | |     | `-DeclRefExpr 0x13791bd18 <col:13> 'char *' lvalue ParmVar 0x13791b8d8 's' 'char *'
    |   | |     `-ImplicitCastExpr 0x13791bd70 <col:15> 'int' <LValueToRValue>
    |   | |       `-DeclRefExpr 0x13791bd38 <col:15> 'int' lvalue Var 0x13791bab8 'i' 'int'
    |   | `-BreakStmt 0x13791bdd8 <line:10:9>
    |   |-CompoundAssignOperator 0x13791be58 <line:11:7, col:13> 'unsigned long' '<<=' ComputeLHSTy='unsigned long' ComputeResultTy='unsigned long'
    |   | |-DeclRefExpr 0x13791be00 <col:7> 'unsigned long' lvalue Var 0x13791bb50 'l' 'unsigned long'
    |   | `-IntegerLiteral 0x13791be20 <col:13> 'int' 8
    |   `-CompoundAssignOperator 0x13791bf90 <line:12:7, col:31> 'unsigned long' '+=' ComputeLHSTy='unsigned long' ComputeResultTy='unsigned long'
    |     |-DeclRefExpr 0x13791be88 <col:7> 'unsigned long' lvalue Var 0x13791bb50 'l' 'unsigned long'
    |     `-CStyleCastExpr 0x13791bf68 <col:13, col:31> 'unsigned long' <IntegralCast>
    |       `-ImplicitCastExpr 0x13791bf50 <col:28, col:31> 'char' <LValueToRValue> part_of_explicit_cast
    |         `-ArraySubscriptExpr 0x13791bf18 <col:28, col:31> 'char' lvalue
    |           |-ImplicitCastExpr 0x13791bee8 <col:28> 'char *' <LValueToRValue>
    |           | `-DeclRefExpr 0x13791bea8 <col:28> 'char *' lvalue ParmVar 0x13791b8d8 's' 'char *'
    |           `-ImplicitCastExpr 0x13791bf00 <col:30> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x13791bec8 <col:30> 'int' lvalue Var 0x13791bab8 'i' 'int'
    `-ReturnStmt 0x13791ea88 <line:15:5, col:12>
      `-ImplicitCastExpr 0x13791ea70 <col:12> 'int' <IntegralCast>
        `-ImplicitCastExpr 0x13791ea58 <col:12> 'unsigned long' <LValueToRValue>
          `-DeclRefExpr 0x13791ea38 <col:12> 'unsigned long' lvalue Var 0x13791bb50 'l' 'unsigned long'
