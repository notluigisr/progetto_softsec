`-FunctionDecl 0x15400de00  line:1:6 invalid groupGenerate 'void (const int)'
  |-ParmVarDecl 0x15400dcf0 <col:20, <invalid sloc>> col:29 invalid 'const int'
  `-CompoundStmt 0x154027f38 <line:2:1, line:35:1>
    |-RecoveryExpr 0x15400dee0 <line:3:5> '<dependent type>' contains-errors lvalue
    `-IfStmt 0x154027f08 <line:4:5, line:34:5> has_else
      |-BinaryOperator 0x15400e1d8 <line:4:8, col:35> 'int' contains-errors '&&'
      | |-CallExpr 0x15400e188 <col:8, col:30> '<dependent type>' contains-errors
      | | |-DeclRefExpr 0x15400e060 <col:8> 'int ()' Function 0x15400dfa8 'startsWith' 'int ()'
      | | |-RecoveryExpr 0x15400e168 <col:19> '<dependent type>' contains-errors lvalue
      | | `-StringLiteral 0x15400e0e0 <col:25> 'char[4]' lvalue "STR"
      | `-RecoveryExpr 0x15400e1b8 <col:35> '<dependent type>' contains-errors lvalue
      |-CompoundStmt 0x15400e2a0 <line:5:5, line:7:5>
      `-IfStmt 0x154027ed8 <line:9:10, line:34:5> has_else
        |-CallExpr 0x15400e358 <line:9:13, col:35> '<dependent type>' contains-errors
        | |-DeclRefExpr 0x15400e2b0 <col:13> 'int ()' Function 0x15400dfa8 'startsWith' 'int ()'
        | |-RecoveryExpr 0x15400e338 <col:24> '<dependent type>' contains-errors lvalue
        | `-StringLiteral 0x15400e2e8 <col:30> 'char[4]' lvalue "STR"
        |-CompoundStmt 0x154027bf8 <line:10:5, line:25:5>
        `-CompoundStmt 0x154027ec0 <line:28:5, line:34:5>
          `-ForStmt 0x154027e88 <line:29:9, line:33:9>
            |-<<<NULL>>>
            |-<<<NULL>>>
            |-<<<NULL>>>
            |-<<<NULL>>>
            `-CompoundStmt 0x154027e78 <line:30:9, line:33:9>
