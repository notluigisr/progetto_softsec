`-FunctionDecl 0x124030a80  line:1:13 invalid SetLexerLocus 'void (int *, int *)' static
  |-ParmVarDecl 0x124030928 <col:28, col:41> col:41 invalid doc 'int *'
  |-ParmVarDecl 0x1240309a8 <col:46, col:53> col:53 referenced invalid lexer 'int *'
  `-CompoundStmt 0x124030df8 <line:2:1, line:5:1>
    |-BinaryOperator 0x124030c78 <line:3:5, col:32> '<dependent type>' contains-errors '='
    | |-CXXDependentScopeMemberExpr 0x124030b80 <col:5, col:12> '<dependent type>' contains-errors lvalue ->lines
    | | `-RecoveryExpr 0x124030b58 <col:5> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x124030b38 <col:5> 'int *' lvalue ParmVar 0x1240309a8 'lexer' 'int *'
    | `-CXXDependentScopeMemberExpr 0x124030c30 <col:20, col:32> '<dependent type>' contains-errors lvalue ->curline
    |   `-CXXDependentScopeMemberExpr 0x124030be8 <col:20, col:25> '<dependent type>' contains-errors lvalue ->docIn
    |     `-RecoveryExpr 0x124030bc8 <col:20> '<dependent type>' contains-errors lvalue
    `-BinaryOperator 0x124030dd8 <line:4:5, col:34> '<dependent type>' contains-errors '='
      |-CXXDependentScopeMemberExpr 0x124030ce0 <col:5, col:12> '<dependent type>' contains-errors lvalue ->columns
      | `-RecoveryExpr 0x124030cb8 <col:5> '<dependent type>' contains-errors lvalue
      |   `-DeclRefExpr 0x124030c98 <col:5> 'int *' lvalue ParmVar 0x1240309a8 'lexer' 'int *'
      `-CXXDependentScopeMemberExpr 0x124030d90 <col:22, col:34> '<dependent type>' contains-errors lvalue ->curcol
        `-CXXDependentScopeMemberExpr 0x124030d48 <col:22, col:27> '<dependent type>' contains-errors lvalue ->docIn
          `-RecoveryExpr 0x124030d28 <col:22> '<dependent type>' contains-errors lvalue
