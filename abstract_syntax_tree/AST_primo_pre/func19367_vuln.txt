`-FunctionDecl 0x12b128f18  line:1:1 invalid mj_color_correct 'int (int *, int *, int *)'
  |-ParmVarDecl 0x12b128d28 <col:18, col:34> col:34 invalid Rptr 'int *'
  |-ParmVarDecl 0x12b128da8 <col:40, col:56> col:56 invalid Gptr 'int *'
  |-ParmVarDecl 0x12b128e28 <col:63, col:79> col:79 invalid Bptr 'int *'
  `-CompoundStmt 0x12b142688 <line:3:1, line:95:1>
    |-DeclStmt 0x12b129178 <line:4:9, col:20>
    | |-VarDecl 0x12b128ff0 <col:9, col:15> col:15 used R 'short'
    | |-VarDecl 0x12b129070 <col:9, col:17> col:17 used G 'short'
    | `-VarDecl 0x12b1290f0 <col:9, col:19> col:19 used B 'short'
    |-DeclStmt 0x12b129330 <line:5:9, col:20>
    | |-VarDecl 0x12b1291a8 <col:9, col:15> col:15 used C 'short'
    | |-VarDecl 0x12b129228 <col:9, col:17> col:17 used M 'short'
    | `-VarDecl 0x12b1292a8 <col:9, col:19> col:19 used Y 'short'
    |-DeclStmt 0x12c008908 <line:6:9, col:21>
    | |-VarDecl 0x12b129360 <col:9, col:15> col:15 used H 'short'
    | |-VarDecl 0x12c008800 <col:9, col:17> col:17 used D 'short'
    | `-VarDecl 0x12c008880 <col:9, col:19> col:19 used Wa 'short'
    |-DeclStmt 0x12c0089a0 <line:7:9, col:15>
    | `-VarDecl 0x12c008938 <col:9, col:14> col:14 used S 'long'
    |-BinaryOperator 0x12c008a28 <line:9:9, col:14> 'short' contains-errors '='
    | |-DeclRefExpr 0x12c0089b8 <col:9> 'short' lvalue Var 0x12b128ff0 'R' 'short'
    | `-UnaryOperator 0x12c008a10 <col:13, col:14> '<dependent type>' contains-errors prefix '*' cannot overflow
    |   `-ImplicitCastExpr 0x12c0089f8 <col:14> '<dependent type>' contains-errors <LValueToRValue>
    |     `-RecoveryExpr 0x12c0089d8 <col:14> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x12c008ab8 <line:10:9, col:14> 'short' contains-errors '='
    | |-DeclRefExpr 0x12c008a48 <col:9> 'short' lvalue Var 0x12b129070 'G' 'short'
    | `-UnaryOperator 0x12c008aa0 <col:13, col:14> '<dependent type>' contains-errors prefix '*' cannot overflow
    |   `-ImplicitCastExpr 0x12c008a88 <col:14> '<dependent type>' contains-errors <LValueToRValue>
    |     `-RecoveryExpr 0x12c008a68 <col:14> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x12c008b48 <line:11:9, col:14> 'short' contains-errors '='
    | |-DeclRefExpr 0x12c008ad8 <col:9> 'short' lvalue Var 0x12b1290f0 'B' 'short'
    | `-UnaryOperator 0x12c008b30 <col:13, col:14> '<dependent type>' contains-errors prefix '*' cannot overflow
    |   `-ImplicitCastExpr 0x12c008b18 <col:14> '<dependent type>' contains-errors <LValueToRValue>
    |     `-RecoveryExpr 0x12c008af8 <col:14> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x12c009528 <line:12:9, line:28:9>
    | |-BinaryOperator 0x12c008c08 <line:12:13, col:16> 'int' '=='
    | | |-ImplicitCastExpr 0x12c008bd8 <col:13> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x12c008ba8 <col:13> 'short' <LValueToRValue>
    | | |   `-DeclRefExpr 0x12c008b68 <col:13> 'short' lvalue Var 0x12b128ff0 'R' 'short'
    | | `-ImplicitCastExpr 0x12c008bf0 <col:16> 'int' <IntegralCast>
    | |   `-ImplicitCastExpr 0x12c008bc0 <col:16> 'short' <LValueToRValue>
    | |     `-DeclRefExpr 0x12c008b88 <col:16> 'short' lvalue Var 0x12b129070 'G' 'short'
    | `-CompoundStmt 0x12c009510 <col:19, line:28:9>
    |   `-IfStmt 0x12c0094e0 <line:13:17, line:27:17> has_else
    |     |-BinaryOperator 0x12c008cc8 <line:13:21, col:24> 'int' '=='
    |     | |-ImplicitCastExpr 0x12c008c98 <col:21> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x12c008c68 <col:21> 'short' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x12c008c28 <col:21> 'short' lvalue Var 0x12b129070 'G' 'short'
    |     | `-ImplicitCastExpr 0x12c008cb0 <col:24> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x12c008c80 <col:24> 'short' <LValueToRValue>
    |     |     `-DeclRefExpr 0x12c008c48 <col:24> 'short' lvalue Var 0x12b1290f0 'B' 'short'
    |     |-CompoundStmt 0x12c008f60 <col:27, line:19:17>
    |     | |-BinaryOperator 0x12c008e10 <line:15:25, col:33> '<dependent type>' contains-errors '='
    |     | | |-UnaryOperator 0x12c008dd8 <col:25, col:26> '<dependent type>' contains-errors prefix '*' cannot overflow
    |     | | | `-ImplicitCastExpr 0x12c008dc0 <col:26> '<dependent type>' contains-errors <LValueToRValue>
    |     | | |   `-RecoveryExpr 0x12c008da0 <col:26> '<dependent type>' contains-errors lvalue
    |     | | `-DeclRefExpr 0x12c008df0 <col:33> 'short' lvalue Var 0x12b1291a8 'C' 'short'
    |     | |-BinaryOperator 0x12c008ea0 <line:16:25, col:33> '<dependent type>' contains-errors '='
    |     | | |-UnaryOperator 0x12c008e68 <col:25, col:26> '<dependent type>' contains-errors prefix '*' cannot overflow
    |     | | | `-ImplicitCastExpr 0x12c008e50 <col:26> '<dependent type>' contains-errors <LValueToRValue>
    |     | | |   `-RecoveryExpr 0x12c008e30 <col:26> '<dependent type>' contains-errors lvalue
    |     | | `-DeclRefExpr 0x12c008e80 <col:33> 'short' lvalue Var 0x12b129228 'M' 'short'
    |     | |-BinaryOperator 0x12c008f30 <line:17:25, col:33> '<dependent type>' contains-errors '='
    |     | | |-UnaryOperator 0x12c008ef8 <col:25, col:26> '<dependent type>' contains-errors prefix '*' cannot overflow
    |     | | | `-ImplicitCastExpr 0x12c008ee0 <col:26> '<dependent type>' contains-errors <LValueToRValue>
    |     | | |   `-RecoveryExpr 0x12c008ec0 <col:26> '<dependent type>' contains-errors lvalue
    |     | | `-DeclRefExpr 0x12c008f10 <col:33> 'short' lvalue Var 0x12b1292a8 'Y' 'short'
    |     | `-ReturnStmt 0x12c008f50 <line:18:25>
    |     `-IfStmt 0x12c0094b0 <line:19:24, line:27:17> has_else
    |       |-BinaryOperator 0x12c009030 <line:19:28, col:30> 'int' '>'
    |       | |-ImplicitCastExpr 0x12c009000 <col:28> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x12c008fd0 <col:28> 'short' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x12c008f90 <col:28> 'short' lvalue Var 0x12b129070 'G' 'short'
    |       | `-ImplicitCastExpr 0x12c009018 <col:30> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x12c008fe8 <col:30> 'short' <LValueToRValue>
    |       |     `-DeclRefExpr 0x12c008fb0 <col:30> 'short' lvalue Var 0x12b1290f0 'B' 'short'
    |       |-CompoundStmt 0x12c009258 <col:33, line:23:17>
    |       | |-BinaryOperator 0x12c009148 <line:20:25, col:31> 'short' '='
    |       | | |-DeclRefExpr 0x12c009050 <col:25> 'short' lvalue Var 0x12c008800 'D' 'short'
    |       | | `-ImplicitCastExpr 0x12c009130 <col:29, col:31> 'short' <IntegralCast>
    |       | |   `-BinaryOperator 0x12c009110 <col:29, col:31> 'int' '-'
    |       | |     |-ImplicitCastExpr 0x12c0090c8 <col:29> 'int' <IntegralCast>
    |       | |     | `-ImplicitCastExpr 0x12c0090b0 <col:29> 'short' <LValueToRValue>
    |       | |     |   `-DeclRefExpr 0x12c009070 <col:29> 'short' lvalue Var 0x12b129070 'G' 'short'
    |       | |     `-ImplicitCastExpr 0x12c0090f8 <col:31> 'int' <IntegralCast>
    |       | |       `-ImplicitCastExpr 0x12c0090e0 <col:31> 'short' <LValueToRValue>
    |       | |         `-DeclRefExpr 0x12c009090 <col:31> 'short' lvalue Var 0x12b1290f0 'B' 'short'
    |       | |-BinaryOperator 0x12c0091c0 <line:21:25, col:31> 'short' '='
    |       | | |-DeclRefExpr 0x12c009168 <col:25> 'short' lvalue Var 0x12c008880 'Wa' 'short'
    |       | | `-ImplicitCastExpr 0x12c0091a8 <col:31> 'short' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x12c009188 <col:31> 'short' lvalue Var 0x12b128ff0 'R' 'short'
    |       | `-BinaryOperator 0x12c009238 <line:22:25, col:30> 'short' '='
    |       |   |-DeclRefExpr 0x12c0091e0 <col:25> 'short' lvalue Var 0x12b129360 'H' 'short'
    |       |   `-ImplicitCastExpr 0x12c009220 <col:30> 'short' <IntegralCast>
    |       |     `-IntegerLiteral 0x12c009200 <col:30> 'int' 256
    |       `-CompoundStmt 0x12c009488 <line:23:24, line:27:17>
    |         |-BinaryOperator 0x12c009378 <line:24:25, col:31> 'short' '='
    |         | |-DeclRefExpr 0x12c009280 <col:25> 'short' lvalue Var 0x12c008800 'D' 'short'
    |         | `-ImplicitCastExpr 0x12c009360 <col:29, col:31> 'short' <IntegralCast>
    |         |   `-BinaryOperator 0x12c009340 <col:29, col:31> 'int' '-'
    |         |     |-ImplicitCastExpr 0x12c0092f8 <col:29> 'int' <IntegralCast>
    |         |     | `-ImplicitCastExpr 0x12c0092e0 <col:29> 'short' <LValueToRValue>
    |         |     |   `-DeclRefExpr 0x12c0092a0 <col:29> 'short' lvalue Var 0x12b129070 'G' 'short'
    |         |     `-ImplicitCastExpr 0x12c009328 <col:31> 'int' <IntegralCast>
    |         |       `-ImplicitCastExpr 0x12c009310 <col:31> 'short' <LValueToRValue>
    |         |         `-DeclRefExpr 0x12c0092c0 <col:31> 'short' lvalue Var 0x12b1290f0 'B' 'short'
    |         |-BinaryOperator 0x12c0093f0 <line:25:25, col:30> 'short' '='
    |         | |-DeclRefExpr 0x12c009398 <col:25> 'short' lvalue Var 0x12c008880 'Wa' 'short'
    |         | `-ImplicitCastExpr 0x12c0093d8 <col:30> 'short' <LValueToRValue>
    |         |   `-DeclRefExpr 0x12c0093b8 <col:30> 'short' lvalue Var 0x12b128ff0 'R' 'short'
    |         `-BinaryOperator 0x12c009468 <line:26:25, col:29> 'short' '='
    |           |-DeclRefExpr 0x12c009410 <col:25> 'short' lvalue Var 0x12b129360 'H' 'short'
    |           `-ImplicitCastExpr 0x12c009450 <col:29> 'short' <IntegralCast>
    |             `-IntegerLiteral 0x12c009430 <col:29> 'int' 1024
    |-IfStmt 0x12b809af8 <line:30:9, line:58:9> has_else
    | |-BinaryOperator 0x12c0095e8 <line:30:13, col:15> 'int' '>'
    | | |-ImplicitCastExpr 0x12c0095b8 <col:13> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x12c009588 <col:13> 'short' <LValueToRValue>
    | | |   `-DeclRefExpr 0x12c009548 <col:13> 'short' lvalue Var 0x12b128ff0 'R' 'short'
    | | `-ImplicitCastExpr 0x12c0095d0 <col:15> 'int' <IntegralCast>
    | |   `-ImplicitCastExpr 0x12c0095a0 <col:15> 'short' <LValueToRValue>
    | |     `-DeclRefExpr 0x12c009568 <col:15> 'short' lvalue Var 0x12b129070 'G' 'short'
    | |-CompoundStmt 0x12b808d48 <col:18, line:44:9>
    | | `-IfStmt 0x12b808d18 <line:31:17, line:43:17> has_else
    | |   |-BinaryOperator 0x12c0096a8 <line:31:21, col:24> 'int' '>='
    | |   | |-ImplicitCastExpr 0x12c009678 <col:21> 'int' <IntegralCast>
    | |   | | `-ImplicitCastExpr 0x12c009648 <col:21> 'short' <LValueToRValue>
    | |   | |   `-DeclRefExpr 0x12c009608 <col:21> 'short' lvalue Var 0x12b129070 'G' 'short'
    | |   | `-ImplicitCastExpr 0x12c009690 <col:24> 'int' <IntegralCast>
    | |   |   `-ImplicitCastExpr 0x12c009660 <col:24> 'short' <LValueToRValue>
    | |   |     `-DeclRefExpr 0x12c009628 <col:24> 'short' lvalue Var 0x12b1290f0 'B' 'short'
    | |   |-CompoundStmt 0x12b808440 <col:27, line:35:17>
    | |   | |-BinaryOperator 0x12c009720 <line:32:25, col:28> 'short' '='
    | |   | | |-DeclRefExpr 0x12c0096c8 <col:25> 'short' lvalue Var 0x12c008880 'Wa' 'short'
    | |   | | `-ImplicitCastExpr 0x12c009708 <col:28> 'short' <LValueToRValue>
    | |   | |   `-DeclRefExpr 0x12c0096e8 <col:28> 'short' lvalue Var 0x12b128ff0 'R' 'short'
    | |   | |-BinaryOperator 0x12b808238 <line:33:25, col:29> 'short' '='
    | |   | | |-DeclRefExpr 0x12c009740 <col:25> 'short' lvalue Var 0x12c008800 'D' 'short'
    | |   | | `-ImplicitCastExpr 0x12b808220 <col:27, col:29> 'short' <IntegralCast>
    | |   | |   `-BinaryOperator 0x12b808200 <col:27, col:29> 'int' '-'
    | |   | |     |-ImplicitCastExpr 0x12c0097b8 <col:27> 'int' <IntegralCast>
    | |   | |     | `-ImplicitCastExpr 0x12c0097a0 <col:27> 'short' <LValueToRValue>
    | |   | |     |   `-DeclRefExpr 0x12c009760 <col:27> 'short' lvalue Var 0x12b128ff0 'R' 'short'
    | |   | |     `-ImplicitCastExpr 0x12c0097e8 <col:29> 'int' <IntegralCast>
    | |   | |       `-ImplicitCastExpr 0x12c0097d0 <col:29> 'short' <LValueToRValue>
    | |   | |         `-DeclRefExpr 0x12c009780 <col:29> 'short' lvalue Var 0x12b1290f0 'B' 'short'
    | |   | `-BinaryOperator 0x12b808420 <line:34:25, col:37> 'short' '='
    | |   |   |-DeclRefExpr 0x12b808258 <col:25> 'short' lvalue Var 0x12b129360 'H' 'short'
    | |   |   `-ImplicitCastExpr 0x12b808408 <col:27, col:37> 'short' <IntegralCast>
    | |   |     `-BinaryOperator 0x12b8083e8 <col:27, col:37> 'int' '/'
    | |   |       |-BinaryOperator 0x12b808378 <col:27, col:33> 'int' '*'
    | |   |       | |-ParenExpr 0x12b808338 <col:27, col:31> 'int'
    | |   |       | | `-BinaryOperator 0x12b808318 <col:28, col:30> 'int' '-'
    | |   |       | |   |-ImplicitCastExpr 0x12b8082d0 <col:28> 'int' <IntegralCast>
    | |   |       | |   | `-ImplicitCastExpr 0x12b8082b8 <col:28> 'short' <LValueToRValue>
    | |   |       | |   |   `-DeclRefExpr 0x12b808278 <col:28> 'short' lvalue Var 0x12b129070 'G' 'short'
    | |   |       | |   `-ImplicitCastExpr 0x12b808300 <col:30> 'int' <IntegralCast>
    | |   |       | |     `-ImplicitCastExpr 0x12b8082e8 <col:30> 'short' <LValueToRValue>
    | |   |       | |       `-DeclRefExpr 0x12b808298 <col:30> 'short' lvalue Var 0x12b1290f0 'B' 'short'
    | |   |       | `-IntegerLiteral 0x12b808358 <col:33> 'int' 256
    | |   |       `-ImplicitCastExpr 0x12b8083d0 <col:37> 'int' <IntegralCast>
    | |   |         `-ImplicitCastExpr 0x12b8083b8 <col:37> 'short' <LValueToRValue>
    | |   |           `-DeclRefExpr 0x12b808398 <col:37> 'short' lvalue Var 0x12c008800 'D' 'short'
    | |   `-IfStmt 0x12b808ce8 <line:35:24, line:43:17> has_else
    | |     |-BinaryOperator 0x12b808508 <line:35:28, col:30> 'int' '>'
    | |     | |-ImplicitCastExpr 0x12b8084d8 <col:28> 'int' <IntegralCast>
    | |     | | `-ImplicitCastExpr 0x12b8084a8 <col:28> 'short' <LValueToRValue>
    | |     | |   `-DeclRefExpr 0x12b808468 <col:28> 'short' lvalue Var 0x12b128ff0 'R' 'short'
    | |     | `-ImplicitCastExpr 0x12b8084f0 <col:30> 'int' <IntegralCast>
    | |     |   `-ImplicitCastExpr 0x12b8084c0 <col:30> 'short' <LValueToRValue>
    | |     |     `-DeclRefExpr 0x12b808488 <col:30> 'short' lvalue Var 0x12b1290f0 'B' 'short'
    | |     |-CompoundStmt 0x12b8088e0 <col:33, line:39:17>
    | |     | |-BinaryOperator 0x12b808580 <line:36:25, col:28> 'short' '='
    | |     | | |-DeclRefExpr 0x12b808528 <col:25> 'short' lvalue Var 0x12c008880 'Wa' 'short'
    | |     | | `-ImplicitCastExpr 0x12b808568 <col:28> 'short' <LValueToRValue>
    | |     | |   `-DeclRefExpr 0x12b808548 <col:28> 'short' lvalue Var 0x12b128ff0 'R' 'short'
    | |     | |-BinaryOperator 0x12b808698 <line:37:25, col:29> 'short' '='
    | |     | | |-DeclRefExpr 0x12b8085a0 <col:25> 'short' lvalue Var 0x12c008800 'D' 'short'
    | |     | | `-ImplicitCastExpr 0x12b808680 <col:27, col:29> 'short' <IntegralCast>
    | |     | |   `-BinaryOperator 0x12b808660 <col:27, col:29> 'int' '-'
    | |     | |     |-ImplicitCastExpr 0x12b808618 <col:27> 'int' <IntegralCast>
    | |     | |     | `-ImplicitCastExpr 0x12b808600 <col:27> 'short' <LValueToRValue>
    | |     | |     |   `-DeclRefExpr 0x12b8085c0 <col:27> 'short' lvalue Var 0x12b128ff0 'R' 'short'
    | |     | |     `-ImplicitCastExpr 0x12b808648 <col:29> 'int' <IntegralCast>
    | |     | |       `-ImplicitCastExpr 0x12b808630 <col:29> 'short' <LValueToRValue>
    | |     | |         `-DeclRefExpr 0x12b8085e0 <col:29> 'short' lvalue Var 0x12b129070 'G' 'short'
    | |     | `-BinaryOperator 0x12b8088c0 <line:38:25, col:42> 'short' '='
    | |     |   |-DeclRefExpr 0x12b8086b8 <col:25> 'short' lvalue Var 0x12b129360 'H' 'short'
    | |     |   `-ImplicitCastExpr 0x12b8088a8 <col:27, col:42> 'short' <IntegralCast>
    | |     |     `-BinaryOperator 0x12b808888 <col:27, col:42> 'int' '-'
    | |     |       |-IntegerLiteral 0x12b8086d8 <col:27> 'int' 1536
    | |     |       `-BinaryOperator 0x12b808868 <col:32, col:42> 'int' '/'
    | |     |         |-BinaryOperator 0x12b8087f8 <col:32, col:38> 'int' '*'
    | |     |         | |-ParenExpr 0x12b8087b8 <col:32, col:36> 'int'
    | |     |         | | `-BinaryOperator 0x12b808798 <col:33, col:35> 'int' '-'
    | |     |         | |   |-ImplicitCastExpr 0x12b808750 <col:33> 'int' <IntegralCast>
    | |     |         | |   | `-ImplicitCastExpr 0x12b808738 <col:33> 'short' <LValueToRValue>
    | |     |         | |   |   `-DeclRefExpr 0x12b8086f8 <col:33> 'short' lvalue Var 0x12b1290f0 'B' 'short'
    | |     |         | |   `-ImplicitCastExpr 0x12b808780 <col:35> 'int' <IntegralCast>
    | |     |         | |     `-ImplicitCastExpr 0x12b808768 <col:35> 'short' <LValueToRValue>
    | |     |         | |       `-DeclRefExpr 0x12b808718 <col:35> 'short' lvalue Var 0x12b129070 'G' 'short'
    | |     |         | `-IntegerLiteral 0x12b8087d8 <col:38> 'int' 256
    | |     |         `-ImplicitCastExpr 0x12b808850 <col:42> 'int' <IntegralCast>
    | |     |           `-ImplicitCastExpr 0x12b808838 <col:42> 'short' <LValueToRValue>
    | |     |             `-DeclRefExpr 0x12b808818 <col:42> 'short' lvalue Var 0x12c008800 'D' 'short'
    | |     `-CompoundStmt 0x12b808cc0 <line:39:24, line:43:17>
    | |       |-BinaryOperator 0x12b808960 <line:40:25, col:28> 'short' '='
    | |       | |-DeclRefExpr 0x12b808908 <col:25> 'short' lvalue Var 0x12c008880 'Wa' 'short'
    | |       | `-ImplicitCastExpr 0x12b808948 <col:28> 'short' <LValueToRValue>
    | |       |   `-DeclRefExpr 0x12b808928 <col:28> 'short' lvalue Var 0x12b1290f0 'B' 'short'
    | |       |-BinaryOperator 0x12b808a78 <line:41:25, col:29> 'short' '='
    | |       | |-DeclRefExpr 0x12b808980 <col:25> 'short' lvalue Var 0x12c008800 'D' 'short'
    | |       | `-ImplicitCastExpr 0x12b808a60 <col:27, col:29> 'short' <IntegralCast>
    | |       |   `-BinaryOperator 0x12b808a40 <col:27, col:29> 'int' '-'
    | |       |     |-ImplicitCastExpr 0x12b8089f8 <col:27> 'int' <IntegralCast>
    | |       |     | `-ImplicitCastExpr 0x12b8089e0 <col:27> 'short' <LValueToRValue>
    | |       |     |   `-DeclRefExpr 0x12b8089a0 <col:27> 'short' lvalue Var 0x12b1290f0 'B' 'short'
    | |       |     `-ImplicitCastExpr 0x12b808a28 <col:29> 'int' <IntegralCast>
    | |       |       `-ImplicitCastExpr 0x12b808a10 <col:29> 'short' <LValueToRValue>
    | |       |         `-DeclRefExpr 0x12b8089c0 <col:29> 'short' lvalue Var 0x12b129070 'G' 'short'
    | |       `-BinaryOperator 0x12b808ca0 <line:42:25, col:42> 'short' '='
    | |         |-DeclRefExpr 0x12b808a98 <col:25> 'short' lvalue Var 0x12b129360 'H' 'short'
    | |         `-ImplicitCastExpr 0x12b808c88 <col:27, col:42> 'short' <IntegralCast>
    | |           `-BinaryOperator 0x12b808c68 <col:27, col:42> 'int' '+'
    | |             |-IntegerLiteral 0x12b808ab8 <col:27> 'int' 1024
    | |             `-BinaryOperator 0x12b808c48 <col:32, col:42> 'int' '/'
    | |               |-BinaryOperator 0x12b808bd8 <col:32, col:38> 'int' '*'
    | |               | |-ParenExpr 0x12b808b98 <col:32, col:36> 'int'
    | |               | | `-BinaryOperator 0x12b808b78 <col:33, col:35> 'int' '-'
    | |               | |   |-ImplicitCastExpr 0x12b808b30 <col:33> 'int' <IntegralCast>
    | |               | |   | `-ImplicitCastExpr 0x12b808b18 <col:33> 'short' <LValueToRValue>
    | |               | |   |   `-DeclRefExpr 0x12b808ad8 <col:33> 'short' lvalue Var 0x12b128ff0 'R' 'short'
    | |               | |   `-ImplicitCastExpr 0x12b808b60 <col:35> 'int' <IntegralCast>
    | |               | |     `-ImplicitCastExpr 0x12b808b48 <col:35> 'short' <LValueToRValue>
    | |               | |       `-DeclRefExpr 0x12b808af8 <col:35> 'short' lvalue Var 0x12b129070 'G' 'short'
    | |               | `-IntegerLiteral 0x12b808bb8 <col:38> 'int' 256
    | |               `-ImplicitCastExpr 0x12b808c30 <col:42> 'int' <IntegralCast>
    | |                 `-ImplicitCastExpr 0x12b808c18 <col:42> 'short' <LValueToRValue>
    | |                   `-DeclRefExpr 0x12b808bf8 <col:42> 'short' lvalue Var 0x12c008800 'D' 'short'
    | `-CompoundStmt 0x12b809ae0 <line:44:16, line:58:9>
    |   `-IfStmt 0x12b809ab0 <line:45:17, line:57:17> has_else
    |     |-BinaryOperator 0x12b808e00 <line:45:21, col:23> 'int' '>'
    |     | |-ImplicitCastExpr 0x12b808dd0 <col:21> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x12b808da0 <col:21> 'short' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x12b808d60 <col:21> 'short' lvalue Var 0x12b128ff0 'R' 'short'
    |     | `-ImplicitCastExpr 0x12b808de8 <col:23> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x12b808db8 <col:23> 'short' <LValueToRValue>
    |     |     `-DeclRefExpr 0x12b808d80 <col:23> 'short' lvalue Var 0x12b1290f0 'B' 'short'
    |     |-CompoundStmt 0x12b8091d8 <col:26, line:49:17>
    |     | |-BinaryOperator 0x12b808e78 <line:46:25, col:28> 'short' '='
    |     | | |-DeclRefExpr 0x12b808e20 <col:25> 'short' lvalue Var 0x12c008880 'Wa' 'short'
    |     | | `-ImplicitCastExpr 0x12b808e60 <col:28> 'short' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x12b808e40 <col:28> 'short' lvalue Var 0x12b129070 'G' 'short'
    |     | |-BinaryOperator 0x12b808f90 <line:47:25, col:29> 'short' '='
    |     | | |-DeclRefExpr 0x12b808e98 <col:25> 'short' lvalue Var 0x12c008800 'D' 'short'
    |     | | `-ImplicitCastExpr 0x12b808f78 <col:27, col:29> 'short' <IntegralCast>
    |     | |   `-BinaryOperator 0x12b808f58 <col:27, col:29> 'int' '-'
    |     | |     |-ImplicitCastExpr 0x12b808f10 <col:27> 'int' <IntegralCast>
    |     | |     | `-ImplicitCastExpr 0x12b808ef8 <col:27> 'short' <LValueToRValue>
    |     | |     |   `-DeclRefExpr 0x12b808eb8 <col:27> 'short' lvalue Var 0x12b129070 'G' 'short'
    |     | |     `-ImplicitCastExpr 0x12b808f40 <col:29> 'int' <IntegralCast>
    |     | |       `-ImplicitCastExpr 0x12b808f28 <col:29> 'short' <LValueToRValue>
    |     | |         `-DeclRefExpr 0x12b808ed8 <col:29> 'short' lvalue Var 0x12b1290f0 'B' 'short'
    |     | `-BinaryOperator 0x12b8091b8 <line:48:25, col:41> 'short' '='
    |     |   |-DeclRefExpr 0x12b808fb0 <col:25> 'short' lvalue Var 0x12b129360 'H' 'short'
    |     |   `-ImplicitCastExpr 0x12b8091a0 <col:27, col:41> 'short' <IntegralCast>
    |     |     `-BinaryOperator 0x12b809180 <col:27, col:41> 'int' '-'
    |     |       |-IntegerLiteral 0x12b808fd0 <col:27> 'int' 512
    |     |       `-BinaryOperator 0x12b809160 <col:31, col:41> 'int' '/'
    |     |         |-BinaryOperator 0x12b8090f0 <col:31, col:37> 'int' '*'
    |     |         | |-ParenExpr 0x12b8090b0 <col:31, col:35> 'int'
    |     |         | | `-BinaryOperator 0x12b809090 <col:32, col:34> 'int' '-'
    |     |         | |   |-ImplicitCastExpr 0x12b809048 <col:32> 'int' <IntegralCast>
    |     |         | |   | `-ImplicitCastExpr 0x12b809030 <col:32> 'short' <LValueToRValue>
    |     |         | |   |   `-DeclRefExpr 0x12b808ff0 <col:32> 'short' lvalue Var 0x12b128ff0 'R' 'short'
    |     |         | |   `-ImplicitCastExpr 0x12b809078 <col:34> 'int' <IntegralCast>
    |     |         | |     `-ImplicitCastExpr 0x12b809060 <col:34> 'short' <LValueToRValue>
    |     |         | |       `-DeclRefExpr 0x12b809010 <col:34> 'short' lvalue Var 0x12b1290f0 'B' 'short'
    |     |         | `-IntegerLiteral 0x12b8090d0 <col:37> 'int' 256
    |     |         `-ImplicitCastExpr 0x12b809148 <col:41> 'int' <IntegralCast>
    |     |           `-ImplicitCastExpr 0x12b809130 <col:41> 'short' <LValueToRValue>
    |     |             `-DeclRefExpr 0x12b809110 <col:41> 'short' lvalue Var 0x12c008800 'D' 'short'
    |     `-IfStmt 0x12b809a80 <line:49:24, line:57:17> has_else
    |       |-BinaryOperator 0x12b8092a0 <line:49:28, col:30> 'int' '>'
    |       | |-ImplicitCastExpr 0x12b809270 <col:28> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x12b809240 <col:28> 'short' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x12b809200 <col:28> 'short' lvalue Var 0x12b129070 'G' 'short'
    |       | `-ImplicitCastExpr 0x12b809288 <col:30> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x12b809258 <col:30> 'short' <LValueToRValue>
    |       |     `-DeclRefExpr 0x12b809220 <col:30> 'short' lvalue Var 0x12b1290f0 'B' 'short'
    |       |-CompoundStmt 0x12b809678 <col:33, line:53:17>
    |       | |-BinaryOperator 0x12b809318 <line:50:25, col:28> 'short' '='
    |       | | |-DeclRefExpr 0x12b8092c0 <col:25> 'short' lvalue Var 0x12c008880 'Wa' 'short'
    |       | | `-ImplicitCastExpr 0x12b809300 <col:28> 'short' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x12b8092e0 <col:28> 'short' lvalue Var 0x12b129070 'G' 'short'
    |       | |-BinaryOperator 0x12b809430 <line:51:25, col:29> 'short' '='
    |       | | |-DeclRefExpr 0x12b809338 <col:25> 'short' lvalue Var 0x12c008800 'D' 'short'
    |       | | `-ImplicitCastExpr 0x12b809418 <col:27, col:29> 'short' <IntegralCast>
    |       | |   `-BinaryOperator 0x12b8093f8 <col:27, col:29> 'int' '-'
    |       | |     |-ImplicitCastExpr 0x12b8093b0 <col:27> 'int' <IntegralCast>
    |       | |     | `-ImplicitCastExpr 0x12b809398 <col:27> 'short' <LValueToRValue>
    |       | |     |   `-DeclRefExpr 0x12b809358 <col:27> 'short' lvalue Var 0x12b129070 'G' 'short'
    |       | |     `-ImplicitCastExpr 0x12b8093e0 <col:29> 'int' <IntegralCast>
    |       | |       `-ImplicitCastExpr 0x12b8093c8 <col:29> 'short' <LValueToRValue>
    |       | |         `-DeclRefExpr 0x12b809378 <col:29> 'short' lvalue Var 0x12b128ff0 'R' 'short'
    |       | `-BinaryOperator 0x12b809658 <line:52:25, col:41> 'short' '='
    |       |   |-DeclRefExpr 0x12b809450 <col:25> 'short' lvalue Var 0x12b129360 'H' 'short'
    |       |   `-ImplicitCastExpr 0x12b809640 <col:27, col:41> 'short' <IntegralCast>
    |       |     `-BinaryOperator 0x12b809620 <col:27, col:41> 'int' '+'
    |       |       |-IntegerLiteral 0x12b809470 <col:27> 'int' 512
    |       |       `-BinaryOperator 0x12b809600 <col:31, col:41> 'int' '/'
    |       |         |-BinaryOperator 0x12b809590 <col:31, col:37> 'int' '*'
    |       |         | |-ParenExpr 0x12b809550 <col:31, col:35> 'int'
    |       |         | | `-BinaryOperator 0x12b809530 <col:32, col:34> 'int' '-'
    |       |         | |   |-ImplicitCastExpr 0x12b8094e8 <col:32> 'int' <IntegralCast>
    |       |         | |   | `-ImplicitCastExpr 0x12b8094d0 <col:32> 'short' <LValueToRValue>
    |       |         | |   |   `-DeclRefExpr 0x12b809490 <col:32> 'short' lvalue Var 0x12b1290f0 'B' 'short'
    |       |         | |   `-ImplicitCastExpr 0x12b809518 <col:34> 'int' <IntegralCast>
    |       |         | |     `-ImplicitCastExpr 0x12b809500 <col:34> 'short' <LValueToRValue>
    |       |         | |       `-DeclRefExpr 0x12b8094b0 <col:34> 'short' lvalue Var 0x12b128ff0 'R' 'short'
    |       |         | `-IntegerLiteral 0x12b809570 <col:37> 'int' 256
    |       |         `-ImplicitCastExpr 0x12b8095e8 <col:41> 'int' <IntegralCast>
    |       |           `-ImplicitCastExpr 0x12b8095d0 <col:41> 'short' <LValueToRValue>
    |       |             `-DeclRefExpr 0x12b8095b0 <col:41> 'short' lvalue Var 0x12c008800 'D' 'short'
    |       `-CompoundStmt 0x12b809a58 <line:53:24, line:57:17>
    |         |-BinaryOperator 0x12b8096f8 <line:54:25, col:28> 'short' '='
    |         | |-DeclRefExpr 0x12b8096a0 <col:25> 'short' lvalue Var 0x12c008880 'Wa' 'short'
    |         | `-ImplicitCastExpr 0x12b8096e0 <col:28> 'short' <LValueToRValue>
    |         |   `-DeclRefExpr 0x12b8096c0 <col:28> 'short' lvalue Var 0x12b1290f0 'B' 'short'
    |         |-BinaryOperator 0x12b809810 <line:55:25, col:29> 'short' '='
    |         | |-DeclRefExpr 0x12b809718 <col:25> 'short' lvalue Var 0x12c008800 'D' 'short'
    |         | `-ImplicitCastExpr 0x12b8097f8 <col:27, col:29> 'short' <IntegralCast>
    |         |   `-BinaryOperator 0x12b8097d8 <col:27, col:29> 'int' '-'
    |         |     |-ImplicitCastExpr 0x12b809790 <col:27> 'int' <IntegralCast>
    |         |     | `-ImplicitCastExpr 0x12b809778 <col:27> 'short' <LValueToRValue>
    |         |     |   `-DeclRefExpr 0x12b809738 <col:27> 'short' lvalue Var 0x12b1290f0 'B' 'short'
    |         |     `-ImplicitCastExpr 0x12b8097c0 <col:29> 'int' <IntegralCast>
    |         |       `-ImplicitCastExpr 0x12b8097a8 <col:29> 'short' <LValueToRValue>
    |         |         `-DeclRefExpr 0x12b809758 <col:29> 'short' lvalue Var 0x12b128ff0 'R' 'short'
    |         `-BinaryOperator 0x12b809a38 <line:56:25, col:42> 'short' '='
    |           |-DeclRefExpr 0x12b809830 <col:25> 'short' lvalue Var 0x12b129360 'H' 'short'
    |           `-ImplicitCastExpr 0x12b809a20 <col:27, col:42> 'short' <IntegralCast>
    |             `-BinaryOperator 0x12b809a00 <col:27, col:42> 'int' '-'
    |               |-IntegerLiteral 0x12b809850 <col:27> 'int' 1024
    |               `-BinaryOperator 0x12b8099e0 <col:32, col:42> 'int' '/'
    |                 |-BinaryOperator 0x12b809970 <col:32, col:38> 'int' '*'
    |                 | |-ParenExpr 0x12b809930 <col:32, col:36> 'int'
    |                 | | `-BinaryOperator 0x12b809910 <col:33, col:35> 'int' '-'
    |                 | |   |-ImplicitCastExpr 0x12b8098c8 <col:33> 'int' <IntegralCast>
    |                 | |   | `-ImplicitCastExpr 0x12b8098b0 <col:33> 'short' <LValueToRValue>
    |                 | |   |   `-DeclRefExpr 0x12b809870 <col:33> 'short' lvalue Var 0x12b129070 'G' 'short'
    |                 | |   `-ImplicitCastExpr 0x12b8098f8 <col:35> 'int' <IntegralCast>
    |                 | |     `-ImplicitCastExpr 0x12b8098e0 <col:35> 'short' <LValueToRValue>
    |                 | |       `-DeclRefExpr 0x12b809890 <col:35> 'short' lvalue Var 0x12b128ff0 'R' 'short'
    |                 | `-IntegerLiteral 0x12b809950 <col:38> 'int' 256
    |                 `-ImplicitCastExpr 0x12b8099c8 <col:42> 'int' <IntegralCast>
    |                   `-ImplicitCastExpr 0x12b8099b0 <col:42> 'short' <LValueToRValue>
    |                     `-DeclRefExpr 0x12b809990 <col:42> 'short' lvalue Var 0x12c008800 'D' 'short'
    |-IfStmt 0x12b80a1d8 <line:60:9, line:69:9>
    | |-BinaryOperator 0x12b809b98 <line:60:12, col:16> 'int' '!='
    | | |-ImplicitCastExpr 0x12b809b80 <col:12> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x12b809b68 <col:12> 'short' <LValueToRValue>
    | | |   `-DeclRefExpr 0x12b809b28 <col:12> 'short' lvalue Var 0x12c008880 'Wa' 'short'
    | | `-IntegerLiteral 0x12b809b48 <col:16> 'int' 0
    | `-CompoundStmt 0x12b80a1c0 <col:18, line:69:9>
    |   `-IfStmt 0x12b80a190 <line:61:17, line:68:17> has_else
    |     |-BinaryOperator 0x12b809c58 <line:61:20, col:24> 'int' '=='
    |     | |-ImplicitCastExpr 0x12b809c28 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x12b809bf8 <col:20> 'short' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x12b809bb8 <col:20> 'short' lvalue Var 0x12c008880 'Wa' 'short'
    |     | `-ImplicitCastExpr 0x12b809c40 <col:24> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x12b809c10 <col:24> 'short' <LValueToRValue>
    |     |     `-DeclRefExpr 0x12b809bd8 <col:24> 'short' lvalue Var 0x12c008800 'D' 'short'
    |     |-CompoundStmt 0x12b809db8 <col:26, line:64:17>
    |     | `-BinaryOperator 0x12b809d98 <line:63:25, col:30> 'short' '='
    |     |   |-DeclRefExpr 0x12b809cd0 <col:25> 'short' lvalue Var 0x12c008800 'D' 'short'
    |     |   `-ImplicitCastExpr 0x12b809d80 <col:27, col:30> 'short' <IntegralCast>
    |     |     `-BinaryOperator 0x12b809d60 <col:27, col:30> 'int' '/'
    |     |       |-ImplicitCastExpr 0x12b809d48 <col:27> 'int' <IntegralCast>
    |     |       | `-ImplicitCastExpr 0x12b809d30 <col:27> 'short' <LValueToRValue>
    |     |       |   `-DeclRefExpr 0x12b809cf0 <col:27> 'short' lvalue Var 0x12c008880 'Wa' 'short'
    |     |       `-IntegerLiteral 0x12b809d10 <col:30> 'int' 4
    |     `-CompoundStmt 0x12b80a170 <line:64:24, line:68:17>
    |       |-BinaryOperator 0x12b809f38 <line:65:25, col:41> 'long' '='
    |       | |-DeclRefExpr 0x12b809dd0 <col:25> 'long' lvalue Var 0x12c008938 'S' 'long'
    |       | `-BinaryOperator 0x12b809f18 <col:27, col:41> 'long' '/'
    |       |   |-ParenExpr 0x12b809ea8 <col:27, col:39> 'long'
    |       |   | `-BinaryOperator 0x12b809e88 <col:28, col:37> 'long' '<<'
    |       |   |   |-CStyleCastExpr 0x12b809e40 <col:28, col:34> 'long' <IntegralCast>
    |       |   |   | `-ImplicitCastExpr 0x12b809e28 <col:34> 'short' <LValueToRValue> part_of_explicit_cast
    |       |   |   |   `-DeclRefExpr 0x12b809df0 <col:34> 'short' lvalue Var 0x12c008800 'D' 'short'
    |       |   |   `-IntegerLiteral 0x12b809e68 <col:37> 'int' 16
    |       |   `-ImplicitCastExpr 0x12b809f00 <col:41> 'long' <IntegralCast>
    |       |     `-ImplicitCastExpr 0x12b809ee8 <col:41> 'short' <LValueToRValue>
    |       |       `-DeclRefExpr 0x12b809ec8 <col:41> 'short' lvalue Var 0x12c008880 'Wa' 'short'
    |       `-BinaryOperator 0x12b80a150 <line:67:25, col:47> 'short' '='
    |         |-DeclRefExpr 0x12b809fb0 <col:25> 'short' lvalue Var 0x12c008800 'D' 'short'
    |         `-ImplicitCastExpr 0x12b80a138 <col:28, col:47> 'short' <IntegralCast>
    |           `-ParenExpr 0x12b80a118 <col:28, col:47> 'long'
    |             `-BinaryOperator 0x12b80a0f8 <col:30, col:44> 'long' '>>'
    |               |-ParenExpr 0x12b80a0b8 <col:30, col:41> 'long'
    |               | `-BinaryOperator 0x12b80a098 <col:31, col:39> 'long' '*'
    |               |   |-CStyleCastExpr 0x12b80a020 <col:31, col:37> 'long' <NoOp>
    |               |   | `-ImplicitCastExpr 0x12b80a008 <col:37> 'long' <LValueToRValue> part_of_explicit_cast
    |               |   |   `-DeclRefExpr 0x12b809fd0 <col:37> 'long' lvalue Var 0x12c008938 'S' 'long'
    |               |   `-ImplicitCastExpr 0x12b80a080 <col:39> 'long' <IntegralCast>
    |               |     `-ImplicitCastExpr 0x12b80a068 <col:39> 'short' <LValueToRValue>
    |               |       `-DeclRefExpr 0x12b80a048 <col:39> 'short' lvalue Var 0x12c008880 'Wa' 'short'
    |               `-IntegerLiteral 0x12b80a0d8 <col:44> 'int' 18
    |-BinaryOperator 0x12b80c2c8 <line:70:9, col:17> 'short' '='
    | |-DeclRefExpr 0x12b80c200 <col:9> 'short' lvalue Var 0x12c008880 'Wa' 'short'
    | `-ImplicitCastExpr 0x12b80c2b0 <col:12, col:17> 'short' <IntegralCast>
    |   `-BinaryOperator 0x12b80c290 <col:12, col:17> 'int' '-'
    |     |-IntegerLiteral 0x12b80c220 <col:12> 'int' 1023
    |     `-ImplicitCastExpr 0x12b80c278 <col:17> 'int' <IntegralCast>
    |       `-ImplicitCastExpr 0x12b80c260 <col:17> 'short' <LValueToRValue>
    |         `-DeclRefExpr 0x12b80c240 <col:17> 'short' lvalue Var 0x12c008880 'Wa' 'short'
    |-IfStmt 0x12b80c7e8 <line:75:9, line:76:19>
    | |-BinaryOperator 0x12b80c750 <line:75:13, col:15> 'int' '<'
    | | |-ImplicitCastExpr 0x12b80c738 <col:13> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x12b80c720 <col:13> 'short' <LValueToRValue>
    | | |   `-DeclRefExpr 0x12b80c6e0 <col:13> 'short' lvalue Var 0x12b1291a8 'C' 'short'
    | | `-IntegerLiteral 0x12b80c700 <col:15> 'int' 0
    | `-BinaryOperator 0x12b80c7c8 <line:76:17, col:19> 'short' '='
    |   |-DeclRefExpr 0x12b80c770 <col:17> 'short' lvalue Var 0x12b1291a8 'C' 'short'
    |   `-ImplicitCastExpr 0x12b80c7b0 <col:19> 'short' <IntegralCast>
    |     `-IntegerLiteral 0x12b80c790 <col:19> 'int' 0
    |-IfStmt 0x12b80c910 <line:77:9, line:78:19>
    | |-BinaryOperator 0x12b80c878 <line:77:13, col:15> 'int' '<'
    | | |-ImplicitCastExpr 0x12b80c860 <col:13> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x12b80c848 <col:13> 'short' <LValueToRValue>
    | | |   `-DeclRefExpr 0x12b80c808 <col:13> 'short' lvalue Var 0x12b129228 'M' 'short'
    | | `-IntegerLiteral 0x12b80c828 <col:15> 'int' 0
    | `-BinaryOperator 0x12b80c8f0 <line:78:17, col:19> 'short' '='
    |   |-DeclRefExpr 0x12b80c898 <col:17> 'short' lvalue Var 0x12b129228 'M' 'short'
    |   `-ImplicitCastExpr 0x12b80c8d8 <col:19> 'short' <IntegralCast>
    |     `-IntegerLiteral 0x12b80c8b8 <col:19> 'int' 0
    |-IfStmt 0x12b80ca38 <line:79:9, line:80:19>
    | |-BinaryOperator 0x12b80c9a0 <line:79:13, col:15> 'int' '<'
    | | |-ImplicitCastExpr 0x12b80c988 <col:13> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x12b80c970 <col:13> 'short' <LValueToRValue>
    | | |   `-DeclRefExpr 0x12b80c930 <col:13> 'short' lvalue Var 0x12b1292a8 'Y' 'short'
    | | `-IntegerLiteral 0x12b80c950 <col:15> 'int' 0
    | `-BinaryOperator 0x12b80ca18 <line:80:17, col:19> 'short' '='
    |   |-DeclRefExpr 0x12b80c9c0 <col:17> 'short' lvalue Var 0x12b1292a8 'Y' 'short'
    |   `-ImplicitCastExpr 0x12b80ca00 <col:19> 'short' <IntegralCast>
    |     `-IntegerLiteral 0x12b80c9e0 <col:19> 'int' 0
    |-IfStmt 0x12b1424b8 <line:82:9, line:90:9>
    | |-BinaryOperator 0x12b80cb78 <line:82:12, col:23> 'int' '&&'
    | | |-BinaryOperator 0x12b80cac8 <col:12, col:14> 'int' '>'
    | | | |-ImplicitCastExpr 0x12b80cab0 <col:12> 'int' <IntegralCast>
    | | | | `-ImplicitCastExpr 0x12b80ca98 <col:12> 'short' <LValueToRValue>
    | | | |   `-DeclRefExpr 0x12b80ca58 <col:12> 'short' lvalue Var 0x12b129360 'H' 'short'
    | | | `-IntegerLiteral 0x12b80ca78 <col:14> 'int' 256
    | | `-BinaryOperator 0x12b80cb58 <col:21, col:23> 'int' '<'
    | |   |-ImplicitCastExpr 0x12b80cb40 <col:21> 'int' <IntegralCast>
    | |   | `-ImplicitCastExpr 0x12b80cb28 <col:21> 'short' <LValueToRValue>
    | |   |   `-DeclRefExpr 0x12b80cae8 <col:21> 'short' lvalue Var 0x12b129360 'H' 'short'
    | |   `-IntegerLiteral 0x12b80cb08 <col:23> 'int' 1024
    | `-CompoundStmt 0x12b142478 <col:28, line:90:9>
    |   |-DeclStmt 0x12b80cc18 <line:83:17, col:27>
    |   | `-VarDecl 0x12b80cbb0 <col:17, col:23> col:23 used work 'short'
    |   |-CompoundAssignOperator 0x12b80cdc0 <line:85:17, col:20> 'short' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |   | |-DeclRefExpr 0x12b80cd50 <col:17> 'short' lvalue Var 0x12b1291a8 'C' 'short'
    |   | `-ImplicitCastExpr 0x12b80cda8 <col:20> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x12b80cd90 <col:20> 'short' <LValueToRValue>
    |   |     `-DeclRefExpr 0x12b80cd70 <col:20> 'short' lvalue Var 0x12b80cbb0 'work' 'short'
    |   |-CompoundAssignOperator 0x12b80ced0 <line:86:17, col:25> 'short' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |   | |-DeclRefExpr 0x12b80cdf0 <col:17> 'short' lvalue Var 0x12b1292a8 'Y' 'short'
    |   | `-BinaryOperator 0x12b80ceb0 <col:20, col:25> 'int' '+'
    |   |   |-ImplicitCastExpr 0x12b80ce68 <col:20> 'int' <IntegralCast>
    |   |   | `-ImplicitCastExpr 0x12b80ce50 <col:20> 'short' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x12b80ce10 <col:20> 'short' lvalue Var 0x12b80cbb0 'work' 'short'
    |   |   `-ImplicitCastExpr 0x12b80ce98 <col:25> 'int' <IntegralCast>
    |   |     `-ImplicitCastExpr 0x12b80ce80 <col:25> 'short' <LValueToRValue>
    |   |       `-DeclRefExpr 0x12b80ce30 <col:25> 'short' lvalue Var 0x12b80cbb0 'work' 'short'
    |   |-CompoundAssignOperator 0x12b80cfe0 <line:87:17, col:25> 'short' '-=' ComputeLHSTy='int' ComputeResultTy='int'
    |   | |-DeclRefExpr 0x12b80cf00 <col:17> 'short' lvalue Var 0x12b129228 'M' 'short'
    |   | `-BinaryOperator 0x12b80cfc0 <col:20, col:25> 'int' '+'
    |   |   |-ImplicitCastExpr 0x12b80cf78 <col:20> 'int' <IntegralCast>
    |   |   | `-ImplicitCastExpr 0x12b80cf60 <col:20> 'short' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x12b80cf20 <col:20> 'short' lvalue Var 0x12b80cbb0 'work' 'short'
    |   |   `-ImplicitCastExpr 0x12b80cfa8 <col:25> 'int' <IntegralCast>
    |   |     `-ImplicitCastExpr 0x12b80cf90 <col:25> 'short' <LValueToRValue>
    |   |       `-DeclRefExpr 0x12b80cf40 <col:25> 'short' lvalue Var 0x12b80cbb0 'work' 'short'
    |   |-IfStmt 0x12b80d118 <line:88:17, col:30>
    |   | |-BinaryOperator 0x12b80d080 <col:20, col:22> 'int' '>'
    |   | | |-ImplicitCastExpr 0x12b80d068 <col:20> 'int' <IntegralCast>
    |   | | | `-ImplicitCastExpr 0x12b80d050 <col:20> 'short' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x12b80d010 <col:20> 'short' lvalue Var 0x12b1291a8 'C' 'short'
    |   | | `-IntegerLiteral 0x12b80d030 <col:22> 'int' 1023
    |   | `-BinaryOperator 0x12b80d0f8 <col:28, col:30> 'short' '='
    |   |   |-DeclRefExpr 0x12b80d0a0 <col:28> 'short' lvalue Var 0x12b1291a8 'C' 'short'
    |   |   `-ImplicitCastExpr 0x12b80d0e0 <col:30> 'short' <IntegralCast>
    |   |     `-IntegerLiteral 0x12b80d0c0 <col:30> 'int' 1023
    |   `-IfStmt 0x12b142458 <line:89:17, col:30>
    |     |-BinaryOperator 0x12b80d1a8 <col:20, col:22> 'int' '>'
    |     | |-ImplicitCastExpr 0x12b80d190 <col:20> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x12b80d178 <col:20> 'short' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x12b80d138 <col:20> 'short' lvalue Var 0x12b1292a8 'Y' 'short'
    |     | `-IntegerLiteral 0x12b80d158 <col:22> 'int' 1023
    |     `-BinaryOperator 0x12b142438 <col:28, col:30> 'short' '='
    |       |-DeclRefExpr 0x12b80d1c8 <col:28> 'short' lvalue Var 0x12b1292a8 'Y' 'short'
    |       `-ImplicitCastExpr 0x12b142420 <col:30> 'short' <IntegralCast>
    |         `-IntegerLiteral 0x12b142400 <col:30> 'int' 1023
    |-BinaryOperator 0x12b142548 <line:92:9, col:17> '<dependent type>' contains-errors '='
    | |-UnaryOperator 0x12b142510 <col:9, col:10> '<dependent type>' contains-errors prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x12b1424f8 <col:10> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x12b1424d8 <col:10> '<dependent type>' contains-errors lvalue
    | `-DeclRefExpr 0x12b142528 <col:17> 'short' lvalue Var 0x12b1291a8 'C' 'short'
    |-BinaryOperator 0x12b1425d8 <line:93:9, col:17> '<dependent type>' contains-errors '='
    | |-UnaryOperator 0x12b1425a0 <col:9, col:10> '<dependent type>' contains-errors prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x12b142588 <col:10> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x12b142568 <col:10> '<dependent type>' contains-errors lvalue
    | `-DeclRefExpr 0x12b1425b8 <col:17> 'short' lvalue Var 0x12b129228 'M' 'short'
    `-BinaryOperator 0x12b142668 <line:94:9, col:17> '<dependent type>' contains-errors '='
      |-UnaryOperator 0x12b142630 <col:9, col:10> '<dependent type>' contains-errors prefix '*' cannot overflow
      | `-ImplicitCastExpr 0x12b142618 <col:10> '<dependent type>' contains-errors <LValueToRValue>
      |   `-RecoveryExpr 0x12b1425f8 <col:10> '<dependent type>' contains-errors lvalue
      `-DeclRefExpr 0x12b142648 <col:17> 'short' lvalue Var 0x12b1292a8 'Y' 'short'
