`-FunctionDecl 0x13d911ae0  line:1:6 invalid mbedtls_strerror 'void (int, char *, int)'
  |-ParmVarDecl 0x13d9118d8 <col:24, col:28> col:28 used ret 'int'
  |-ParmVarDecl 0x13d911958 <col:33, col:39> col:39 used buf 'char *'
  |-ParmVarDecl 0x13d9119f0 <col:44, col:51> col:51 invalid buflen 'int'
  `-CompoundStmt 0x13d911d78 <line:2:1, line:7:1>
    |-ParenExpr 0x13d911c10 <line:3:5, col:16> 'void'
    | `-CStyleCastExpr 0x13d911be8 <col:6, col:13> 'void' <ToVoid>
    |   `-ImplicitCastExpr 0x13d911bd0 <col:13> 'int' <LValueToRValue> part_of_explicit_cast
    |     `-DeclRefExpr 0x13d911ba0 <col:13> 'int' lvalue ParmVar 0x13d9118d8 'ret' 'int'
    `-IfStmt 0x13d911d58 <line:5:5, line:6:18>
      |-BinaryOperator 0x13d911c70 <line:5:9, col:18> 'int' contains-errors '>'
      | |-RecoveryExpr 0x13d911c30 <col:9> '<dependent type>' contains-errors lvalue
      | `-IntegerLiteral 0x13d911c50 <col:18> 'int' 0
      `-BinaryOperator 0x13d911d38 <line:6:9, col:18> 'char' '='
        |-ArraySubscriptExpr 0x13d911ce8 <col:9, col:14> 'char' lvalue
        | |-ImplicitCastExpr 0x13d911cd0 <col:9> 'char *' <LValueToRValue>
        | | `-DeclRefExpr 0x13d911c90 <col:9> 'char *' lvalue ParmVar 0x13d911958 'buf' 'char *'
        | `-IntegerLiteral 0x13d911cb0 <col:13> 'int' 0
        `-ImplicitCastExpr 0x13d911d20 <col:18> 'char' <IntegralCast>
          `-CharacterLiteral 0x13d911d08 <col:18> 'int' 0
