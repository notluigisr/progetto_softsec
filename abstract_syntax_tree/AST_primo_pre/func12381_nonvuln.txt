`-FunctionDecl 0x13000dfd8  line:1:13 invalid _ber_read_OID_String_impl 'int (int *, int, char **, int *)' static
  |-ParmVarDecl 0x13000dd28 <col:39, col:51> col:51 invalid mem_ctx 'int *'
  |-ParmVarDecl 0x13000dda8 <col:60, col:70> col:70 invalid blob 'int'
  |-ParmVarDecl 0x13000de58 <line:2:11, col:18> col:18 used OID 'char **'
  |-ParmVarDecl 0x13000ded8 <col:23, col:31> col:31 invalid bytes_eaten 'int *'
  `-CompoundStmt 0x130029ad0 <line:3:1, line:38:1>
    |-DeclStmt 0x13000e120 <line:4:2, col:7>
    | `-VarDecl 0x13000e0b8 <col:2, col:6> col:6 used i 'int'
    |-DeclStmt 0x13000e1d0 <line:6:2, col:16>
    | `-VarDecl 0x13000e168 <col:2, col:15> col:15 used v 'unsigned int'
    |-DeclStmt 0x13000e2a0 <line:7:2, col:22>
    | `-VarDecl 0x13000e200 <col:2, col:18> col:8 used tmp_oid 'char *' cinit
    |   `-RecoveryExpr 0x13000e280 <col:18> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x130027b10 <line:14:2, col:21>
    | |-UnaryOperator 0x130027a90 <col:6, col:7> 'int' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x130027a78 <col:7> 'char *' contains-errors <LValueToRValue>
    | |   `-DeclRefExpr 0x130027a58 <col:7> 'char *' contains-errors lvalue Var 0x13000e200 'tmp_oid' 'char *'
    | `-GotoStmt 0x130027af8 <col:16, col:21> 'nomem' 0x130027aa8
    |-IfStmt 0x130027d50 <line:16:2, col:21>
    | |-UnaryOperator 0x130027d20 <col:6, col:7> 'int' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x130027d08 <col:7> 'char *' contains-errors <LValueToRValue>
    | |   `-DeclRefExpr 0x130027ce8 <col:7> 'char *' contains-errors lvalue Var 0x13000e200 'tmp_oid' 'char *'
    | `-GotoStmt 0x130027d38 <col:16, col:21> 'nomem' 0x130027aa8
    |-IfStmt 0x130027f00 <line:18:2, line:20:2>
    | |-BinaryOperator 0x130027de8 <line:18:6, col:21> 'int' contains-errors '!='
    | | |-RecoveryExpr 0x130027d70 <col:6> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x130027dc8 <col:21> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x130027ee8 <col:27, line:20:2>
    |   `-BinaryOperator 0x130027ec8 <line:19:3, col:18> '<dependent type>' contains-errors '='
    |     |-UnaryOperator 0x130027eb0 <col:3, col:4> '<dependent type>' contains-errors prefix '*' cannot overflow
    |     | `-ImplicitCastExpr 0x130027e98 <col:4> '<dependent type>' contains-errors <LValueToRValue>
    |     |   `-RecoveryExpr 0x130027e08 <col:4> '<dependent type>' contains-errors lvalue
    |     `-IntegerLiteral 0x130027e58 <col:18> 'int' 0
    |-ForStmt 0x130029968 <line:22:2, line:31:2>
    | |-BinaryOperator 0x130027ff8 <line:22:6, col:17> 'unsigned int' ','
    | | |-BinaryOperator 0x130027f60 <col:6, col:10> 'int' '='
    | | | |-DeclRefExpr 0x130027f20 <col:6> 'int' lvalue Var 0x13000e0b8 'i' 'int'
    | | | `-IntegerLiteral 0x130027f40 <col:10> 'int' 1
    | | `-BinaryOperator 0x130027fd8 <col:13, col:17> 'unsigned int' '='
    | |   |-DeclRefExpr 0x130027f80 <col:13> 'unsigned int' lvalue Var 0x13000e168 'v' 'unsigned int'
    | |   `-ImplicitCastExpr 0x130027fc0 <col:17> 'unsigned int' <IntegralCast>
    | |     `-IntegerLiteral 0x130027fa0 <col:17> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x1300280a0 <col:20, col:29> 'int' contains-errors '<'
    | | |-DeclRefExpr 0x130028018 <col:20> 'int' lvalue Var 0x13000e0b8 'i' 'int'
    | | `-CXXDependentScopeMemberExpr 0x130028058 <col:24, col:29> '<dependent type>' contains-errors lvalue .length
    | |   `-RecoveryExpr 0x130028038 <col:24> '<dependent type>' contains-errors lvalue
    | |-UnaryOperator 0x1300280e0 <col:37, col:38> 'int' postfix '++'
    | | `-DeclRefExpr 0x1300280c0 <col:37> 'int' lvalue Var 0x13000e0b8 'i' 'int'
    | `-CompoundStmt 0x130029948 <col:42, line:31:2>
    |   |-IfStmt 0x1300298a0 <line:24:3, line:29:3>
    |   | |-RecoveryExpr 0x130028260 <line:24:8, col:22> '_Bool' contains-errors
    |   | `-CompoundStmt 0x130029878 <col:25, line:29:3>
    |   |   |-BinaryOperator 0x130029630 <line:25:4, col:62> 'char *' contains-errors '='
    |   |   | |-DeclRefExpr 0x130028280 <col:4> 'char *' contains-errors lvalue Var 0x13000e200 'tmp_oid' 'char *'
    |   |   | `-ImplicitCastExpr 0x1300283e8 <col:14, col:62> 'char *' contains-errors <IntegralToPointer>
    |   |   |   `-CallExpr 0x130028368 <col:14, col:62> 'int' contains-errors
    |   |   |     |-ImplicitCastExpr 0x130028350 <col:14> 'int (*)()' <FunctionToPointerDecay>
    |   |   |     | `-DeclRefExpr 0x1300282a0 <col:14> 'int ()' Function 0x130027b78 'talloc_asprintf_append_buffer' 'int ()'
    |   |   |     |-ImplicitCastExpr 0x1300283a0 <col:44> 'char *' contains-errors <LValueToRValue>
    |   |   |     | `-DeclRefExpr 0x1300282c0 <col:44> 'char *' contains-errors lvalue Var 0x13000e200 'tmp_oid' 'char *'
    |   |   |     |-ImplicitCastExpr 0x1300283b8 <col:53> 'char *' <ArrayToPointerDecay>
    |   |   |     | `-StringLiteral 0x1300282e0 <col:53> 'char[4]' lvalue "STR"
    |   |   |     `-ImplicitCastExpr 0x1300283d0 <col:61> 'unsigned int' <LValueToRValue>
    |   |   |       `-DeclRefExpr 0x130028300 <col:61> 'unsigned int' lvalue Var 0x13000e168 'v' 'unsigned int'
    |   |   |-BinaryOperator 0x1300296a8 <line:26:4, col:8> 'unsigned int' '='
    |   |   | |-DeclRefExpr 0x130029650 <col:4> 'unsigned int' lvalue Var 0x13000e168 'v' 'unsigned int'
    |   |   | `-ImplicitCastExpr 0x130029690 <col:8> 'unsigned int' <IntegralCast>
    |   |   |   `-IntegerLiteral 0x130029670 <col:8> 'int' 0
    |   |   `-IfStmt 0x130029858 <line:27:4, line:28:22>
    |   |     |-RecoveryExpr 0x1300296c8 <line:27:8> '<dependent type>' contains-errors lvalue
    |   |     `-BinaryOperator 0x130029838 <line:28:5, col:22> '<dependent type>' contains-errors '='
    |   |       |-UnaryOperator 0x1300297e8 <col:5, col:6> '<dependent type>' contains-errors prefix '*' cannot overflow
    |   |       | `-ImplicitCastExpr 0x1300297d0 <col:6> '<dependent type>' contains-errors <LValueToRValue>
    |   |       |   `-RecoveryExpr 0x1300296e8 <col:6> '<dependent type>' contains-errors lvalue
    |   |       `-BinaryOperator 0x130029818 <col:20, col:22> 'int' '+'
    |   |         |-ImplicitCastExpr 0x130029800 <col:20> 'int' <LValueToRValue>
    |   |         | `-DeclRefExpr 0x130029738 <col:20> 'int' lvalue Var 0x13000e0b8 'i' 'int'
    |   |         `-IntegerLiteral 0x130029758 <col:22> 'int' 1
    |   `-IfStmt 0x130029928 <line:30:3, col:22>
    |     |-UnaryOperator 0x1300298f8 <col:7, col:8> 'int' contains-errors prefix '!' cannot overflow
    |     | `-ImplicitCastExpr 0x1300298e0 <col:8> 'char *' contains-errors <LValueToRValue>
    |     |   `-DeclRefExpr 0x1300298c0 <col:8> 'char *' contains-errors lvalue Var 0x13000e200 'tmp_oid' 'char *'
    |     `-GotoStmt 0x130029910 <col:17, col:22> 'nomem' 0x130027aa8
    |-BinaryOperator 0x130029a28 <line:33:2, col:9> 'char *' contains-errors '='
    | |-UnaryOperator 0x1300299d8 <col:2, col:3> 'char *' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x1300299c0 <col:3> 'char **' <LValueToRValue>
    | |   `-DeclRefExpr 0x1300299a0 <col:3> 'char **' lvalue ParmVar 0x13000de58 'OID' 'char **'
    | `-ImplicitCastExpr 0x130029a10 <col:9> 'char *' contains-errors <LValueToRValue>
    |   `-DeclRefExpr 0x1300299f0 <col:9> 'char *' contains-errors lvalue Var 0x13000e200 'tmp_oid' 'char *'
    |-ReturnStmt 0x130029a80 <line:34:2, col:9>
    | `-RecoveryExpr 0x130029a60 <col:9> '<dependent type>' contains-errors lvalue
    `-LabelStmt 0x130029ab0 <line:36:1, col:6> 'nomem'
      `-NullStmt 0x130029aa8 <col:6>
