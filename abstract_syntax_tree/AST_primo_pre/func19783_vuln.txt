`-FunctionDecl 0x13000df18  line:1:1 invalid bgp_capabilities_print 'int (int *, const char *, int)'
  |-ParmVarDecl 0x13000dd28 <col:24, col:44> col:44 invalid ndo 'int *'
  |-ParmVarDecl 0x13000dda8 <line:2:24, col:38> col:38 used opt 'const char *'
  |-ParmVarDecl 0x13000de28 <col:43, col:47> col:47 used caps_len 'int'
  `-CompoundStmt 0x138125d28 <line:3:1, line:99:1>
    |-DeclStmt 0x13000e200 <line:4:2, col:45>
    | |-VarDecl 0x13000dff0 <col:2, col:6> col:6 used cap_type 'int'
    | |-VarDecl 0x13000e070 <col:2, col:16> col:16 used cap_len 'int'
    | |-VarDecl 0x13000e0f0 <col:2, col:25> col:25 used tcap_len 'int'
    | `-VarDecl 0x13000e170 <col:2, col:35> col:35 used cap_offset 'int'
    |-DeclStmt 0x13000e2b8 <line:5:9, col:18>
    | `-VarDecl 0x13000e230 <col:9, col:17> col:13 used i 'int' cinit
    |   `-IntegerLiteral 0x13000e298 <col:17> 'int' 0
    |-WhileStmt 0x138125bc0 <line:7:9, line:94:9>
    | |-BinaryOperator 0x13000e340 <line:7:16, col:20> 'int' '<'
    | | |-ImplicitCastExpr 0x13000e310 <col:16> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x13000e2d0 <col:16> 'int' lvalue Var 0x13000e230 'i' 'int'
    | | `-ImplicitCastExpr 0x13000e328 <col:20> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x13000e2f0 <col:20> 'int' lvalue ParmVar 0x13000de28 'caps_len' 'int'
    | `-CompoundStmt 0x138125b78 <col:30, line:94:9>
    |   |-CallExpr 0x130027698 <line:8:17, col:55> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x1300274e0 <col:17> 'int ()' Function 0x130027428 'ND_TCHECK2' 'int ()'
    |   | |-ArraySubscriptExpr 0x130027658 <col:28, col:33> 'const char' lvalue
    |   | | |-ImplicitCastExpr 0x130027628 <col:28> 'const char *' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x130027500 <col:28> 'const char *' lvalue ParmVar 0x13000dda8 'opt' 'const char *'
    |   | | `-ImplicitCastExpr 0x130027640 <col:32> 'int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x130027520 <col:32> 'int' lvalue Var 0x13000e230 'i' 'int'
    |   | `-RecoveryExpr 0x130027678 <col:36> '<dependent type>' contains-errors lvalue
    |   |-BinaryOperator 0x1300277a8 <line:9:17, col:31> 'int' '='
    |   | |-DeclRefExpr 0x1300276c8 <col:17> 'int' lvalue Var 0x13000dff0 'cap_type' 'int'
    |   | `-ImplicitCastExpr 0x130027790 <col:26, col:31> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x130027778 <col:26, col:31> 'char' <LValueToRValue>
    |   |     `-ArraySubscriptExpr 0x130027758 <col:26, col:31> 'const char' lvalue
    |   |       |-ImplicitCastExpr 0x130027728 <col:26> 'const char *' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x1300276e8 <col:26> 'const char *' lvalue ParmVar 0x13000dda8 'opt' 'const char *'
    |   |       `-ImplicitCastExpr 0x130027740 <col:30> 'int' <LValueToRValue>
    |   |         `-DeclRefExpr 0x130027708 <col:30> 'int' lvalue Var 0x13000e230 'i' 'int'
    |   |-BinaryOperator 0x1300278e8 <line:10:17, col:32> 'int' '='
    |   | |-DeclRefExpr 0x1300277c8 <col:17> 'int' lvalue Var 0x13000e070 'cap_len' 'int'
    |   | `-ImplicitCastExpr 0x1300278d0 <col:25, col:32> 'int' <IntegralCast>
    |   |   `-ImplicitCastExpr 0x1300278b8 <col:25, col:32> 'char' <LValueToRValue>
    |   |     `-ArraySubscriptExpr 0x130027898 <col:25, col:32> 'const char' lvalue
    |   |       |-ImplicitCastExpr 0x130027880 <col:25> 'const char *' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x1300277e8 <col:25> 'const char *' lvalue ParmVar 0x13000dda8 'opt' 'const char *'
    |   |       `-BinaryOperator 0x130027860 <col:29, col:31> 'int' '+'
    |   |         |-ImplicitCastExpr 0x130027848 <col:29> 'int' <LValueToRValue>
    |   |         | `-DeclRefExpr 0x130027808 <col:29> 'int' lvalue Var 0x13000e230 'i' 'int'
    |   |         `-IntegerLiteral 0x130027828 <col:31> 'int' 1
    |   |-BinaryOperator 0x130027960 <line:11:17, col:26> 'int' '='
    |   | |-DeclRefExpr 0x130027908 <col:17> 'int' lvalue Var 0x13000e0f0 'tcap_len' 'int'
    |   | `-ImplicitCastExpr 0x130027948 <col:26> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x130027928 <col:26> 'int' lvalue Var 0x13000e070 'cap_len' 'int'
    |   |-CallExpr 0x130027ea8 <line:17:17, col:45> 'int'
    |   | |-ImplicitCastExpr 0x130027e90 <col:17> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x130027d50 <col:17> 'int ()' Function 0x130027428 'ND_TCHECK2' 'int ()'
    |   | |-ImplicitCastExpr 0x130027ef0 <col:28, col:35> 'int' <IntegralCast>
    |   | | `-ImplicitCastExpr 0x130027ed8 <col:28, col:35> 'char' <LValueToRValue>
    |   | |   `-ArraySubscriptExpr 0x130027e20 <col:28, col:35> 'const char' lvalue
    |   | |     |-ImplicitCastExpr 0x130027e08 <col:28> 'const char *' <LValueToRValue>
    |   | |     | `-DeclRefExpr 0x130027d70 <col:28> 'const char *' lvalue ParmVar 0x13000dda8 'opt' 'const char *'
    |   | |     `-BinaryOperator 0x130027de8 <col:32, col:34> 'int' '+'
    |   | |       |-ImplicitCastExpr 0x130027dd0 <col:32> 'int' <LValueToRValue>
    |   | |       | `-DeclRefExpr 0x130027d90 <col:32> 'int' lvalue Var 0x13000e230 'i' 'int'
    |   | |       `-IntegerLiteral 0x130027db0 <col:34> 'int' 2
    |   | `-ImplicitCastExpr 0x130027f08 <col:38> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x130027e40 <col:38> 'int' lvalue Var 0x13000e070 'cap_len' 'int'
    |   |-SwitchStmt 0x130027f58 <line:18:17, line:89:17>
    |   | |-ImplicitCastExpr 0x130027f40 <line:18:25> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x130027f20 <col:25> 'int' lvalue Var 0x13000dff0 'cap_type' 'int'
    |   | `-CompoundStmt 0x138125788 <col:35, line:89:17>
    |   |   |-BreakStmt 0x1308090b8 <line:27:21>
    |   |   |-CallExpr 0x1308092c0 <line:30:21, col:49> 'int'
    |   |   | |-ImplicitCastExpr 0x1308092a8 <col:21> 'int (*)()' <FunctionToPointerDecay>
    |   |   | | `-DeclRefExpr 0x1308091b8 <col:21> 'int ()' Function 0x130809100 'ND_TCHECK_16BITS' 'int ()'
    |   |   | `-BinaryOperator 0x130809288 <col:38, col:48> 'const char *' '+'
    |   |   |   |-BinaryOperator 0x130809248 <col:38, col:44> 'const char *' '+'
    |   |   |   | |-ImplicitCastExpr 0x130809218 <col:38> 'const char *' <LValueToRValue>
    |   |   |   | | `-DeclRefExpr 0x1308091d8 <col:38> 'const char *' lvalue ParmVar 0x13000dda8 'opt' 'const char *'
    |   |   |   | `-ImplicitCastExpr 0x130809230 <col:44> 'int' <LValueToRValue>
    |   |   |   |   `-DeclRefExpr 0x1308091f8 <col:44> 'int' lvalue Var 0x13000e230 'i' 'int'
    |   |   |   `-IntegerLiteral 0x130809268 <col:48> 'int' 2
    |   |   |-CompoundAssignOperator 0x1308096f0 <line:34:21, col:31> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
    |   |   | |-DeclRefExpr 0x1308096b0 <col:21> 'int' lvalue Var 0x13000e0f0 'tcap_len' 'int'
    |   |   | `-IntegerLiteral 0x1308096d0 <col:31> 'int' 2
    |   |   |-BinaryOperator 0x130809760 <line:35:21, col:32> 'int' '='
    |   |   | |-DeclRefExpr 0x130809720 <col:21> 'int' lvalue Var 0x13000e170 'cap_offset' 'int'
    |   |   | `-IntegerLiteral 0x130809740 <col:32> 'int' 4
    |   |   |-WhileStmt 0x138124200 <line:36:21, line:47:21>
    |   |   | |-BinaryOperator 0x1308097d8 <line:36:27, col:37> 'int' '>='
    |   |   | | |-ImplicitCastExpr 0x1308097c0 <col:27> 'int' <LValueToRValue>
    |   |   | | | `-DeclRefExpr 0x130809780 <col:27> 'int' lvalue Var 0x13000e0f0 'tcap_len' 'int'
    |   |   | | `-IntegerLiteral 0x1308097a0 <col:37> 'int' 4
    |   |   | `-CompoundStmt 0x1381241e0 <col:40, line:47:21>
    |   |   |   |-CompoundAssignOperator 0x138124140 <line:45:25, col:35> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
    |   |   |   | |-DeclRefExpr 0x138124100 <col:25> 'int' lvalue Var 0x13000e0f0 'tcap_len' 'int'
    |   |   |   | `-IntegerLiteral 0x138124120 <col:35> 'int' 4
    |   |   |   `-CompoundAssignOperator 0x1381241b0 <line:46:25, col:37> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |   |   |     |-DeclRefExpr 0x138124170 <col:25> 'int' lvalue Var 0x13000e170 'cap_offset' 'int'
    |   |   |     `-IntegerLiteral 0x138124190 <col:37> 'int' 4
    |   |   |-BreakStmt 0x138124220 <line:48:21>
    |   |   |-BreakStmt 0x138124228 <line:51:21>
    |   |   |-IfStmt 0x138124668 <line:55:21, line:59:21>
    |   |   | |-BinaryOperator 0x138124288 <line:55:25, col:36> 'int' '=='
    |   |   | | |-ImplicitCastExpr 0x138124270 <col:25> 'int' <LValueToRValue>
    |   |   | | | `-DeclRefExpr 0x138124230 <col:25> 'int' lvalue Var 0x13000e070 'cap_len' 'int'
    |   |   | | `-IntegerLiteral 0x138124250 <col:36> 'int' 4
    |   |   | `-CompoundStmt 0x138124658 <col:39, line:59:21>
    |   |   |-BreakStmt 0x138124688 <line:60:21>
    |   |   |-BinaryOperator 0x1381246d0 <line:62:21, col:32> 'int' '='
    |   |   | |-DeclRefExpr 0x138124690 <col:21> 'int' lvalue Var 0x13000e170 'cap_offset' 'int'
    |   |   | `-IntegerLiteral 0x1381246b0 <col:32> 'int' 2
    |   |   |-IfStmt 0x138124858 <line:63:21, line:66:21>
    |   |   | |-BinaryOperator 0x138124748 <line:63:25, col:37> 'int' '=='
    |   |   | | |-ImplicitCastExpr 0x138124730 <col:25> 'int' <LValueToRValue>
    |   |   | | | `-DeclRefExpr 0x1381246f0 <col:25> 'int' lvalue Var 0x13000e0f0 'tcap_len' 'int'
    |   |   | | `-IntegerLiteral 0x138124710 <col:37> 'int' 0
    |   |   | `-CompoundStmt 0x138124838 <col:40, line:66:21>
    |   |   |   |-CallExpr 0x138124808 <line:64:25, col:46> '<dependent type>' contains-errors
    |   |   |   | |-DeclRefExpr 0x138124768 <col:25> 'int ()' Function 0x1300279a8 'ND_PRINT' 'int ()'
    |   |   |   | `-ParenExpr 0x1381247e8 <col:34, col:45> 'char[4]' contains-errors
    |   |   |   |   `-BinaryOperator 0x1381247c8 <col:35, col:40> 'char[4]' contains-errors ','
    |   |   |   |     |-RecoveryExpr 0x138124788 <col:35> '<dependent type>' contains-errors lvalue
    |   |   |   |     `-StringLiteral 0x1381247a8 <col:40> 'char[4]' lvalue "STR"
    |   |   |   `-BreakStmt 0x138124830 <line:65:25>
    |   |   |-WhileStmt 0x1381252e0 <line:67:21, line:81:21>
    |   |   | |-BinaryOperator 0x1381248d0 <line:67:28, col:39> 'int' '>'
    |   |   | | |-ImplicitCastExpr 0x1381248b8 <col:28> 'int' <LValueToRValue>
    |   |   | | | `-DeclRefExpr 0x138124878 <col:28> 'int' lvalue Var 0x13000e0f0 'tcap_len' 'int'
    |   |   | | `-IntegerLiteral 0x138124898 <col:39> 'int' 0
    |   |   | `-CompoundStmt 0x1381252b8 <col:42, line:81:21>
    |   |   |   |-IfStmt 0x138124a58 <line:68:25, line:71:25>
    |   |   |   | |-BinaryOperator 0x138124948 <line:68:29, col:40> 'int' '<'
    |   |   |   | | |-ImplicitCastExpr 0x138124930 <col:29> 'int' <LValueToRValue>
    |   |   |   | | | `-DeclRefExpr 0x1381248f0 <col:29> 'int' lvalue Var 0x13000e0f0 'tcap_len' 'int'
    |   |   |   | | `-IntegerLiteral 0x138124910 <col:40> 'int' 4
    |   |   |   | `-CompoundStmt 0x138124a38 <col:43, line:71:25>
    |   |   |   |   |-CallExpr 0x138124a08 <line:69:29, col:50> '<dependent type>' contains-errors
    |   |   |   |   | |-DeclRefExpr 0x138124968 <col:29> 'int ()' Function 0x1300279a8 'ND_PRINT' 'int ()'
    |   |   |   |   | `-ParenExpr 0x1381249e8 <col:38, col:49> 'char[4]' contains-errors
    |   |   |   |   |   `-BinaryOperator 0x1381249c8 <col:39, col:44> 'char[4]' contains-errors ','
    |   |   |   |   |     |-RecoveryExpr 0x138124988 <col:39> '<dependent type>' contains-errors lvalue
    |   |   |   |   |     `-StringLiteral 0x1381249a8 <col:44> 'char[4]' lvalue "STR"
    |   |   |   |   `-BreakStmt 0x138124a30 <line:70:29>
    |   |   |   |-CompoundAssignOperator 0x138125218 <line:79:25, col:35> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
    |   |   |   | |-DeclRefExpr 0x1381251d8 <col:25> 'int' lvalue Var 0x13000e0f0 'tcap_len' 'int'
    |   |   |   | `-IntegerLiteral 0x1381251f8 <col:35> 'int' 4
    |   |   |   `-CompoundAssignOperator 0x138125288 <line:80:25, col:37> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |   |   |     |-DeclRefExpr 0x138125248 <col:25> 'int' lvalue Var 0x13000e170 'cap_offset' 'int'
    |   |   |     `-IntegerLiteral 0x138125268 <col:37> 'int' 4
    |   |   |-BreakStmt 0x138125300 <line:82:21>
    |   |   |-DefaultStmt 0x138125410 <line:83:17, line:85:37>
    |   |   | `-CallExpr 0x1381253e8 <line:84:21, line:85:37> '<dependent type>' contains-errors
    |   |   |   |-DeclRefExpr 0x138125308 <line:84:21> 'int ()' Function 0x1300279a8 'ND_PRINT' 'int ()'
    |   |   |   `-ParenExpr 0x1381253c8 <col:30, line:85:36> 'int' contains-errors
    |   |   |     `-BinaryOperator 0x1381253a8 <line:84:31, line:85:28> 'int' contains-errors ','
    |   |   |       |-BinaryOperator 0x138125368 <line:84:31, col:36> 'char[4]' contains-errors ','
    |   |   |       | |-RecoveryExpr 0x138125328 <col:31> '<dependent type>' contains-errors lvalue
    |   |   |       | `-StringLiteral 0x138125348 <col:36> 'char[4]' lvalue "STR"
    |   |   |       `-DeclRefExpr 0x138125388 <line:85:28> 'int' lvalue Var 0x13000dff0 'cap_type' 'int'
    |   |   |-IfStmt 0x138125760 <line:86:21, line:87:74>
    |   |   | |-BinaryOperator 0x1381254b8 <line:86:25, col:43> 'int' contains-errors '<='
    |   |   | | |-CXXDependentScopeMemberExpr 0x138125450 <col:25, col:30> '<dependent type>' contains-errors lvalue ->ndo_vflag
    |   |   | | | `-RecoveryExpr 0x138125430 <col:25> '<dependent type>' contains-errors lvalue
    |   |   | | `-IntegerLiteral 0x138125498 <col:43> 'int' 1
    |   |   | `-CallExpr 0x138125720 <line:87:25, col:74> '<dependent type>' contains-errors
    |   |   |   |-DeclRefExpr 0x1381255b8 <col:25> 'int ()' Function 0x138125500 'print_unknown_data' 'int ()'
    |   |   |   |-RecoveryExpr 0x1381255d8 <col:44> '<dependent type>' contains-errors lvalue
    |   |   |   |-UnaryOperator 0x1381256c8 <col:49, col:57> 'const char *' prefix '&' cannot overflow
    |   |   |   | `-ArraySubscriptExpr 0x1381256a8 <col:50, col:57> 'const char' lvalue
    |   |   |   |   |-ImplicitCastExpr 0x138125690 <col:50> 'const char *' <LValueToRValue>
    |   |   |   |   | `-DeclRefExpr 0x1381255f8 <col:50> 'const char *' lvalue ParmVar 0x13000dda8 'opt' 'const char *'
    |   |   |   |   `-BinaryOperator 0x138125670 <col:54, col:56> 'int' '+'
    |   |   |   |     |-ImplicitCastExpr 0x138125658 <col:54> 'int' <LValueToRValue>
    |   |   |   |     | `-DeclRefExpr 0x138125618 <col:54> 'int' lvalue Var 0x13000e230 'i' 'int'
    |   |   |   |     `-IntegerLiteral 0x138125638 <col:56> 'int' 2
    |   |   |   |-StringLiteral 0x1381256e0 <col:60> 'char[4]' lvalue "STR"
    |   |   |   `-DeclRefExpr 0x138125700 <col:67> 'int' lvalue Var 0x13000e070 'cap_len' 'int'
    |   |   `-BreakStmt 0x138125780 <line:88:21>
    |   `-IfStmt 0x138125b18 <line:90:17, line:92:17>
    |     |-BinaryOperator 0x138125938 <line:90:21, col:53> 'int' contains-errors '&&'
    |     | |-BinaryOperator 0x1381258a0 <col:21, col:38> 'int' contains-errors '>'
    |     | | |-CXXDependentScopeMemberExpr 0x138125838 <col:21, col:26> '<dependent type>' contains-errors lvalue ->ndo_vflag
    |     | | | `-RecoveryExpr 0x138125818 <col:21> '<dependent type>' contains-errors lvalue
    |     | | `-IntegerLiteral 0x138125880 <col:38> 'int' 1
    |     | `-BinaryOperator 0x138125918 <col:43, col:53> 'int' '>'
    |     |   |-ImplicitCastExpr 0x138125900 <col:43> 'int' <LValueToRValue>
    |     |   | `-DeclRefExpr 0x1381258c0 <col:43> 'int' lvalue Var 0x13000e070 'cap_len' 'int'
    |     |   `-IntegerLiteral 0x1381258e0 <col:53> 'int' 0
    |     `-CompoundStmt 0x138125b00 <col:56, line:92:17>
    |       `-CallExpr 0x138125ac0 <line:91:21, col:70> '<dependent type>' contains-errors
    |         |-DeclRefExpr 0x138125958 <col:21> 'int ()' Function 0x138125500 'print_unknown_data' 'int ()'
    |         |-RecoveryExpr 0x138125978 <col:40> '<dependent type>' contains-errors lvalue
    |         |-UnaryOperator 0x138125a68 <col:45, col:53> 'const char *' prefix '&' cannot overflow
    |         | `-ArraySubscriptExpr 0x138125a48 <col:46, col:53> 'const char' lvalue
    |         |   |-ImplicitCastExpr 0x138125a30 <col:46> 'const char *' <LValueToRValue>
    |         |   | `-DeclRefExpr 0x138125998 <col:46> 'const char *' lvalue ParmVar 0x13000dda8 'opt' 'const char *'
    |         |   `-BinaryOperator 0x138125a10 <col:50, col:52> 'int' '+'
    |         |     |-ImplicitCastExpr 0x1381259f8 <col:50> 'int' <LValueToRValue>
    |         |     | `-DeclRefExpr 0x1381259b8 <col:50> 'int' lvalue Var 0x13000e230 'i' 'int'
    |         |     `-IntegerLiteral 0x1381259d8 <col:52> 'int' 2
    |         |-StringLiteral 0x138125a80 <col:56> 'char[4]' lvalue "STR"
    |         `-DeclRefExpr 0x138125aa0 <col:63> 'int' lvalue Var 0x13000e070 'cap_len' 'int'
    |-ReturnStmt 0x138125be0 <line:95:9>
    `-LabelStmt 0x138125d08 <line:97:1, line:98:23> 'trunc'
      `-CallExpr 0x138125c90 <col:2, col:23> '<dependent type>' contains-errors
        |-DeclRefExpr 0x138125bf0 <col:2> 'int ()' Function 0x1300279a8 'ND_PRINT' 'int ()'
        `-ParenExpr 0x138125c70 <col:11, col:22> 'char[4]' contains-errors
          `-BinaryOperator 0x138125c50 <col:12, col:17> 'char[4]' contains-errors ','
            |-RecoveryExpr 0x138125c10 <col:12> '<dependent type>' contains-errors lvalue
            `-StringLiteral 0x138125c30 <col:17> 'char[4]' lvalue "STR"
