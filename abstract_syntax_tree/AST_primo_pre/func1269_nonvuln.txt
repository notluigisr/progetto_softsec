`-FunctionDecl 0x1200309d0  line:1:13 seq_sysex_message 'void (unsigned char *)' static
  |-ParmVarDecl 0x120030908 <col:31, col:46> col:46 used event_rec 'unsigned char *'
  `-CompoundStmt 0x120054418 <line:2:1, line:22:1>
    |-DeclStmt 0x120030bf0 <line:3:2, col:33>
    | `-VarDecl 0x120030ae0 <col:2, col:32> col:15 used dev 'unsigned int' cinit
    |   `-ImplicitCastExpr 0x120030bd8 <col:21, col:32> 'unsigned int' <IntegralCast>
    |     `-ImplicitCastExpr 0x120030bc0 <col:21, col:32> 'unsigned char' <LValueToRValue>
    |       `-ArraySubscriptExpr 0x120030ba0 <col:21, col:32> 'unsigned char' lvalue
    |         |-ImplicitCastExpr 0x120030b88 <col:21> 'unsigned char *' <LValueToRValue>
    |         | `-DeclRefExpr 0x120030b48 <col:21> 'unsigned char *' lvalue ParmVar 0x120030908 'event_rec' 'unsigned char *'
    |         `-IntegerLiteral 0x120030b68 <col:31> 'int' 1
    |-DeclStmt 0x120030d40 <line:4:2, col:14>
    | |-VarDecl 0x120030c20 <col:2, col:6> col:6 used i 'int'
    | `-VarDecl 0x120030ca0 <col:2, col:13> col:9 used l 'int' cinit
    |   `-IntegerLiteral 0x120030d08 <col:13> 'int' 0
    |-DeclStmt 0x120030e68 <line:5:2, col:37>
    | `-VarDecl 0x120030d70 <col:2, col:36> col:18 used buf 'unsigned char *' cinit
    |   `-UnaryOperator 0x120030e50 <col:24, col:36> 'unsigned char *' prefix '&' cannot overflow
    |     `-ArraySubscriptExpr 0x120030e30 <col:25, col:36> 'unsigned char' lvalue
    |       |-ImplicitCastExpr 0x120030e18 <col:25> 'unsigned char *' <LValueToRValue>
    |       | `-DeclRefExpr 0x120030dd8 <col:25> 'unsigned char *' lvalue ParmVar 0x120030908 'event_rec' 'unsigned char *'
    |       `-IntegerLiteral 0x120030df8 <col:35> 'int' 2
    |-IfStmt 0x120030f40 <line:7:2, line:8:3>
    | |-BinaryOperator 0x120030f10 <line:7:6, col:12> 'int' contains-errors '>'
    | | |-DeclRefExpr 0x120030e80 <col:6> 'unsigned int' lvalue Var 0x120030ae0 'dev' 'unsigned int'
    | | `-RecoveryExpr 0x120030ef0 <col:12> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x120030f30 <line:8:3>
    |-IfStmt 0x120053e70 <line:9:2, line:10:3>
    | |-RecoveryExpr 0x120053e40 <line:9:6, col:36> '_Bool' contains-errors
    | `-ReturnStmt 0x120053e60 <line:10:3>
    |-IfStmt 0x120053ef8 <line:11:2, line:12:3>
    | |-RecoveryExpr 0x120053ec8 <line:11:6, col:21> '_Bool' contains-errors
    | `-ReturnStmt 0x120053ee8 <line:12:3>
    |-BinaryOperator 0x120053f58 <line:14:2, col:6> 'int' '='
    | |-DeclRefExpr 0x120053f18 <col:2> 'int' lvalue Var 0x120030ca0 'l' 'int'
    | `-IntegerLiteral 0x120053f38 <col:6> 'int' 0
    |-ForStmt 0x120054260 <line:15:2, line:16:11>
    | |-BinaryOperator 0x120053fb8 <line:15:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x120053f78 <col:7> 'int' lvalue Var 0x120030c20 'i' 'int'
    | | `-IntegerLiteral 0x120053f98 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x120054150 <col:14, col:33> 'int' '&&'
    | | |-BinaryOperator 0x120054030 <col:14, col:18> 'int' '<'
    | | | |-ImplicitCastExpr 0x120054018 <col:14> 'int' <LValueToRValue>
    | | | | `-DeclRefExpr 0x120053fd8 <col:14> 'int' lvalue Var 0x120030c20 'i' 'int'
    | | | `-IntegerLiteral 0x120053ff8 <col:18> 'int' 6
    | | `-BinaryOperator 0x120054130 <col:23, col:33> 'int' '!='
    | |   |-ImplicitCastExpr 0x120054118 <col:23, col:28> 'int' <IntegralCast>
    | |   | `-ImplicitCastExpr 0x120054100 <col:23, col:28> 'unsigned char' <LValueToRValue>
    | |   |   `-ArraySubscriptExpr 0x1200540c0 <col:23, col:28> 'unsigned char' lvalue
    | |   |     |-ImplicitCastExpr 0x120054090 <col:23> 'unsigned char *' <LValueToRValue>
    | |   |     | `-DeclRefExpr 0x120054050 <col:23> 'unsigned char *' lvalue Var 0x120030d70 'buf' 'unsigned char *'
    | |   |     `-ImplicitCastExpr 0x1200540a8 <col:27> 'int' <LValueToRValue>
    | |   |       `-DeclRefExpr 0x120054070 <col:27> 'int' lvalue Var 0x120030c20 'i' 'int'
    | |   `-IntegerLiteral 0x1200540e0 <col:33> 'int' 255
    | |-UnaryOperator 0x120054190 <col:39, col:40> 'int' postfix '++'
    | | `-DeclRefExpr 0x120054170 <col:39> 'int' lvalue Var 0x120030c20 'i' 'int'
    | `-BinaryOperator 0x120054240 <line:16:3, col:11> 'int' '='
    |   |-DeclRefExpr 0x1200541a8 <col:3> 'int' lvalue Var 0x120030ca0 'l' 'int'
    |   `-BinaryOperator 0x120054220 <col:7, col:11> 'int' '+'
    |     |-ImplicitCastExpr 0x120054208 <col:7> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x1200541c8 <col:7> 'int' lvalue Var 0x120030c20 'i' 'int'
    |     `-IntegerLiteral 0x1200541e8 <col:11> 'int' 1
    `-IfStmt 0x120054300 <line:18:2, line:19:3>
      |-RecoveryExpr 0x1200542d0 <line:18:6, col:24> '_Bool' contains-errors
      `-ReturnStmt 0x1200542f0 <line:19:3>
