`-FunctionDecl 0x12800dec8  line:1:1 invalid dwg_encode_eed 'int (int *restrict, int *restrict)'
  |-ParmVarDecl 0x12800dd28 <col:17, col:37> col:37 invalid dat 'int *restrict'
  |-ParmVarDecl 0x12800dda8 <col:42, col:63> col:63 invalid obj 'int *restrict'
  `-CompoundStmt 0x130122cc8 <line:2:1, line:40:1>
    |-DeclStmt 0x12800e068 <line:3:3, col:35>
    | `-VarDecl 0x12800df98 <col:3, col:28> col:17 off 'unsigned long' cinit
    |   `-CXXDependentScopeMemberExpr 0x12800e020 <col:23, col:28> '<dependent type>' contains-errors lvalue ->address
    |     `-RecoveryExpr 0x12800e000 <col:23> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x12800e290 <line:8:3, col:44>
    | |-VarDecl 0x12800e098 <col:3, col:7> col:7 used i 'int'
    | `-VarDecl 0x12800e118 <col:3, col:37> col:10 used num_eed 'int' cinit
    |   `-CXXDependentScopeMemberExpr 0x12800e230 <col:20, col:37> '<dependent type>' contains-errors lvalue ->num_eed
    |     `-CXXDependentScopeMemberExpr 0x12800e1e8 <col:20, col:29> '<dependent type>' contains-errors lvalue .object
    |       `-CXXDependentScopeMemberExpr 0x12800e1a0 <col:20, col:25> '<dependent type>' contains-errors lvalue ->tio
    |         `-RecoveryExpr 0x12800e180 <col:20> '<dependent type>' contains-errors lvalue
    |-ForStmt 0x12880b090 <line:9:3, line:33:5>
    | |-BinaryOperator 0x12800e2e8 <line:9:8, col:12> 'int' '='
    | | |-DeclRefExpr 0x12800e2a8 <col:8> 'int' lvalue Var 0x12800e098 'i' 'int'
    | | `-IntegerLiteral 0x12800e2c8 <col:12> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x12800e378 <col:15, col:19> 'int' contains-errors '<'
    | | |-ImplicitCastExpr 0x12800e348 <col:15> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x12800e308 <col:15> 'int' lvalue Var 0x12800e098 'i' 'int'
    | | `-ImplicitCastExpr 0x12800e360 <col:19> 'int' contains-errors <LValueToRValue>
    | |   `-DeclRefExpr 0x12800e328 <col:19> 'int' contains-errors lvalue Var 0x12800e118 'num_eed' 'int'
    | |-UnaryOperator 0x12800e3b8 <col:28, col:29> 'int' postfix '++'
    | | `-DeclRefExpr 0x12800e398 <col:28> 'int' lvalue Var 0x12800e098 'i' 'int'
    | `-CompoundStmt 0x12880b070 <line:10:5, line:33:5>
    |   |-IfStmt 0x12880ab28 <line:13:7, line:27:9>
    |   | |-RecoveryExpr 0x12880a398 <line:13:11> '<dependent type>' contains-errors lvalue
    |   | `-CompoundStmt 0x12880ab00 <line:14:9, line:27:9>
    |   |   |-CallExpr 0x12880a5b8 <line:15:11, col:34> '<dependent type>' contains-errors
    |   |   | |-DeclRefExpr 0x12880a510 <col:11> 'int ()' Function 0x12880a458 'bit_write_BS' 'int ()'
    |   |   | |-RecoveryExpr 0x12880a530 <col:25> '<dependent type>' contains-errors lvalue
    |   |   | `-RecoveryExpr 0x12880a598 <col:30> '<dependent type>' contains-errors lvalue
    |   |   |-CallExpr 0x12880a7e0 <line:16:11, col:36> '<dependent type>' contains-errors
    |   |   | |-DeclRefExpr 0x12880a6c8 <col:11> 'int ()' Function 0x12880a610 'LOG_TRACE' 'int ()'
    |   |   | |-StringLiteral 0x12880a730 <col:22> 'char[4]' lvalue "STR"
    |   |   | |-DeclRefExpr 0x12880a750 <col:29> 'int' lvalue Var 0x12800e098 'i' 'int'
    |   |   | `-RecoveryExpr 0x12880a7c0 <col:32> '<dependent type>' contains-errors lvalue
    |   |   `-CallExpr 0x12880aac8 <line:19:11, line:20:42> '<dependent type>' contains-errors
    |   |     |-DeclRefExpr 0x12880a818 <line:19:11> 'int ()' Function 0x12880a610 'LOG_TRACE' 'int ()'
    |   |     |-StringLiteral 0x12880a838 <col:22> 'char[4]' lvalue "STR"
    |   |     |-DeclRefExpr 0x12880a858 <col:29> 'int' lvalue Var 0x12800e098 'i' 'int'
    |   |     `-CallExpr 0x12880aaa0 <line:20:22, col:41> '<dependent type>' contains-errors
    |   |       |-DeclRefExpr 0x12880a958 <col:22> 'int ()' Function 0x12880a8a0 'ARGS_H' 'int ()'
    |   |       `-CXXDependentScopeMemberExpr 0x12880aa58 <col:30, col:35> '<dependent type>' contains-errors lvalue ->handle
    |   |         `-RecoveryExpr 0x12880aa38 <col:30> '<dependent type>' contains-errors lvalue
    |   `-IfStmt 0x12880b050 <line:28:7, line:32:9>
    |     |-BinaryOperator 0x12880ad58 <line:28:11, col:29> 'int' contains-errors '&&'
    |     | |-UnaryOperator 0x12880acd8 <col:11, col:17> '<dependent type>' contains-errors prefix '!' cannot overflow
    |     | | `-ImplicitCastExpr 0x12880acc0 <col:12, col:17> '<dependent type>' contains-errors <LValueToRValue>
    |     | |   `-CXXDependentScopeMemberExpr 0x12880ac78 <col:12, col:17> '<dependent type>' contains-errors lvalue ->raw
    |     | |     `-RecoveryExpr 0x12880ac58 <col:12> '<dependent type>' contains-errors lvalue
    |     | `-CXXDependentScopeMemberExpr 0x12880ad10 <col:24, col:29> '<dependent type>' contains-errors lvalue ->data
    |     |   `-RecoveryExpr 0x12880acf0 <col:24> '<dependent type>' contains-errors lvalue
    |     `-CompoundStmt 0x12880b038 <line:29:9, line:32:9>
    |       `-CallExpr 0x12880aff8 <line:30:11, col:55> '<dependent type>' contains-errors
    |         |-DeclRefExpr 0x12880ae58 <col:11> 'int ()' Function 0x12880ada0 'dwg_encode_eed_data' 'int ()'
    |         |-RecoveryExpr 0x12880ae78 <col:32> '<dependent type>' contains-errors lvalue
    |         |-CXXDependentScopeMemberExpr 0x12880af90 <col:37, col:42> '<dependent type>' contains-errors lvalue ->data
    |         | `-RecoveryExpr 0x12880af70 <col:37> '<dependent type>' contains-errors lvalue
    |         |-RecoveryExpr 0x12880afd8 <col:48> '<dependent type>' contains-errors lvalue
    |         `-DeclRefExpr 0x12880af10 <col:54> 'int' lvalue Var 0x12800e098 'i' 'int'
    |-CallExpr 0x12880b128 <line:34:3, col:23> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x12880b0c8 <col:3> 'int ()' Function 0x12880a458 'bit_write_BS' 'int ()'
    | |-RecoveryExpr 0x12880b0e8 <col:17> '<dependent type>' contains-errors lvalue
    | `-IntegerLiteral 0x12880b108 <col:22> 'int' 0
    `-IfStmt 0x130122ca8 <line:35:3, line:36:24>
      |-ImplicitCastExpr 0x12880b178 <line:35:7> 'int' <LValueToRValue>
      | `-DeclRefExpr 0x12880b158 <col:7> 'int' lvalue Var 0x12800e098 'i' 'int'
      `-CallExpr 0x130122c48 <line:36:5, col:24> 'int'
        |-ImplicitCastExpr 0x130122c30 <col:5> 'int (*)()' <FunctionToPointerDecay>
        | `-DeclRefExpr 0x12880b190 <col:5> 'int ()' Function 0x12880a610 'LOG_TRACE' 'int ()'
        |-ImplicitCastExpr 0x130122c78 <col:16> 'char *' <ArrayToPointerDecay>
        | `-StringLiteral 0x12880b1b0 <col:16> 'char[4]' lvalue "STR"
        `-ImplicitCastExpr 0x130122c90 <col:23> 'int' <LValueToRValue>
          `-DeclRefExpr 0x12880b1d0 <col:23> 'int' lvalue Var 0x12800e098 'i' 'int'
