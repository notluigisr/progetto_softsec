`-FunctionDecl 0x1279289f8  line:1:1 invalid znumicc_components 'int (int *)'
  |-ParmVarDecl 0x127928928 <col:20, col:30> col:30 invalid i_ctx_p 'int *'
  `-CompoundStmt 0x13180b0b0 <line:2:1, line:67:1>
    |-DeclStmt 0x127928cb0 <line:6:5, col:55>
    | |-VarDecl 0x127928b08 <col:5, col:29> col:29 used ncomps 'int'
    | |-VarDecl 0x127928b88 <col:5, col:48> col:37 used expected 'int' cinit
    | | `-IntegerLiteral 0x127928bf0 <col:48> 'int' 0
    | `-VarDecl 0x127928c28 <col:5, col:51> col:51 used code 'int'
    |-CallExpr 0x127928f60 <line:10:5, col:33> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x127928e40 <col:5> 'int ()' Function 0x127928d88 'check_type' 'int ()'
    | |-UnaryOperator 0x127928f28 <col:16, col:17> '<dependent type>' contains-errors prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x127928f10 <col:17> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x127928ef0 <col:17> '<dependent type>' contains-errors lvalue
    | `-RecoveryExpr 0x127928f40 <col:21> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x131809398 <line:11:5, col:24> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x1318092b8 <col:5> 'int ()' Function 0x131809200 'check_dict_read' 'int ()'
    | `-UnaryOperator 0x131809380 <col:21, col:22> '<dependent type>' contains-errors prefix '*' cannot overflow
    |   `-ImplicitCastExpr 0x131809368 <col:22> '<dependent type>' contains-errors <LValueToRValue>
    |     `-RecoveryExpr 0x131809348 <col:22> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x131809678 <line:13:5, col:46> 'int' contains-errors '='
    | |-DeclRefExpr 0x1318093c0 <col:5> 'int' lvalue Var 0x127928c28 'code' 'int'
    | `-CallExpr 0x131809640 <col:12, col:46> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x1318094c0 <col:12> 'int ()' Function 0x131809408 'dict_find_string' 'int ()'
    |   |-RecoveryExpr 0x1318095e8 <col:29> '<dependent type>' contains-errors lvalue
    |   |-StringLiteral 0x131809540 <col:33> 'char[4]' lvalue "STR"
    |   `-UnaryOperator 0x131809628 <col:40, col:41> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-RecoveryExpr 0x131809608 <col:41> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x131809758 <line:14:5, line:15:16>
    | |-BinaryOperator 0x1318096f0 <line:14:9, col:16> 'int' '<'
    | | |-ImplicitCastExpr 0x1318096d8 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x131809698 <col:9> 'int' lvalue Var 0x127928c28 'code' 'int'
    | | `-IntegerLiteral 0x1318096b8 <col:16> 'int' 0
    | `-ReturnStmt 0x131809748 <line:15:9, col:16>
    |   `-ImplicitCastExpr 0x131809730 <col:16> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x131809710 <col:16> 'int' lvalue Var 0x127928c28 'code' 'int'
    |-IfStmt 0x13180ac18 <line:33:5, line:37:5>
    | |-RecoveryExpr 0x131809f70 <line:33:9, col:41> '_Bool' contains-errors
    | `-CompoundStmt 0x13180ac00 <col:47, line:37:5>
    |   `-ReturnStmt 0x13180a1f0 <line:36:9, col:16>
    |     `-IntegerLiteral 0x13180a1d0 <col:16> 'int' 0
    |-SwitchStmt 0x13180ad58 <line:42:5, line:61:5>
    | |-RecoveryExpr 0x13180ad38 <line:42:13, col:27> 'int' contains-errors
    | `-CompoundStmt 0x13180afa0 <col:36, line:61:5>
    |   |-BinaryOperator 0x13180adc0 <line:46:13, col:24> 'int' '='
    |   | |-DeclRefExpr 0x13180ad80 <col:13> 'int' lvalue Var 0x127928b88 'expected' 'int'
    |   | `-IntegerLiteral 0x13180ada0 <col:24> 'int' 3
    |   |-BreakStmt 0x13180ade0 <line:47:13>
    |   |-BinaryOperator 0x13180ae28 <line:49:13, col:24> 'int' '='
    |   | |-DeclRefExpr 0x13180ade8 <col:13> 'int' lvalue Var 0x127928b88 'expected' 'int'
    |   | `-IntegerLiteral 0x13180ae08 <col:24> 'int' 1
    |   |-BreakStmt 0x13180ae48 <line:50:13>
    |   |-BinaryOperator 0x13180ae90 <line:52:13, col:24> 'int' '='
    |   | |-DeclRefExpr 0x13180ae50 <col:13> 'int' lvalue Var 0x127928b88 'expected' 'int'
    |   | `-IntegerLiteral 0x13180ae70 <col:24> 'int' 4
    |   |-BreakStmt 0x13180aeb0 <line:53:13>
    |   |-BinaryOperator 0x13180aef8 <line:55:13, col:24> 'int' '='
    |   | |-DeclRefExpr 0x13180aeb8 <col:13> 'int' lvalue Var 0x127928b88 'expected' 'int'
    |   | `-IntegerLiteral 0x13180aed8 <col:24> 'int' 0
    |   |-BreakStmt 0x13180af18 <line:56:13>
    |   |-BinaryOperator 0x13180af78 <line:59:13, col:25> 'int' '='
    |   | |-DeclRefExpr 0x13180af20 <col:13> 'int' lvalue Var 0x127928b88 'expected' 'int'
    |   | `-UnaryOperator 0x13180af60 <col:24, col:25> 'int' prefix '-'
    |   |   `-IntegerLiteral 0x13180af40 <col:25> 'int' 1
    |   `-BreakStmt 0x13180af98 <line:60:13>
    `-ReturnStmt 0x13180b0a0 <line:66:5, col:12>
      `-IntegerLiteral 0x13180b080 <col:12> 'int' 0
