`-FunctionDecl 0x141928438  line:1:1 invalid shiftAnchorPosition 'int (int *, int *, int, int, int)'
  |-ParmVarDecl 0x141928128 <col:21, col:33> col:33 invalid al 'int *'
  |-ParmVarDecl 0x1419281a8 <col:37, col:50> col:50 referenced invalid hl 'int *'
  |-ParmVarDecl 0x141928228 <col:54, col:58> col:58 used line 'int'
  |-ParmVarDecl 0x1419282a8 <col:64, col:68> col:68 used pos 'int'
  |-ParmVarDecl 0x141928328 <line:2:7, col:11> col:11 used shift 'int'
  `-CompoundStmt 0x141942500 <line:3:1, line:36:1>
    |-BinaryOperator 0x1419286c8 <line:5:5, col:22> '<dependent type>' contains-errors ','
    | |-BinaryOperator 0x141928668 <col:5, col:15> '<dependent type>' contains-errors ','
    | | |-UnaryExprOrTypeTraitExpr 0x141928628 <col:5, col:12> 'unsigned long' contains-errors sizeof
    | | | `-RecoveryExpr 0x141928608 <col:12> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x141928648 <col:15> '<dependent type>' contains-errors lvalue
    | `-BinaryOperator 0x1419286a8 <col:18, col:22> '<dependent type>' contains-errors '='
    |   |-RecoveryExpr 0x141928688 <col:18> '<dependent type>' contains-errors lvalue
    |   `-IntegerLiteral 0x1419285a8 <col:22> 'int' 0
    |-DeclStmt 0x141928768 <line:6:5, col:12>
    | `-VarDecl 0x141928700 <col:5, col:9> col:9 used cmp 'int'
    |-IfStmt 0x141941918 <line:8:5, line:9:2>
    | |-BinaryOperator 0x1419418e8 <line:8:9, col:38> 'int' contains-errors '||'
    | | |-BinaryOperator 0x1419418c8 <col:9, col:15> 'int' contains-errors '=='
    | | | |-RecoveryExpr 0x141928780 <col:9> '<dependent type>' contains-errors lvalue
    | | | `-RecoveryExpr 0x1419418a8 <col:15> '<dependent type>' contains-errors lvalue
    | | `-BinaryOperator 0x141941868 <col:23, col:38> 'int' contains-errors '=='
    | |   |-CXXDependentScopeMemberExpr 0x141941800 <col:23, col:27> '<dependent type>' contains-errors lvalue ->nanchor
    | |   | `-RecoveryExpr 0x1419287d8 <col:23> '<dependent type>' contains-errors lvalue
    | |   `-IntegerLiteral 0x141941848 <col:38> 'int' 0
    | `-ReturnStmt 0x141941908 <line:9:2>
    `-ForStmt 0x141942148 <line:12:5, line:23:5>
      |-<<<NULL>>>
      |-<<<NULL>>>
      |-BinaryOperator 0x141941bc8 <line:12:38, col:43> 'int' contains-errors '<='
      | |-RecoveryExpr 0x141941b88 <col:38> '<dependent type>' contains-errors lvalue
      | `-RecoveryExpr 0x141941ba8 <col:43> '<dependent type>' contains-errors lvalue
      |-<<<NULL>>>
      `-CompoundStmt 0x141942130 <col:67, line:23:5>
        `-IfStmt 0x141942100 <line:15:2, line:22:6> has_else
          |-BinaryOperator 0x141941f68 <line:15:6, col:13> 'int' '=='
          | |-ImplicitCastExpr 0x141941f50 <col:6> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x141941f10 <col:6> 'int' lvalue Var 0x141928700 'cmp' 'int'
          | `-IntegerLiteral 0x141941f30 <col:13> 'int' 0
          |-BreakStmt 0x141941f88 <line:16:6>
          `-IfStmt 0x1419420d0 <line:17:7, line:22:6> has_else
            |-BinaryOperator 0x141941fe8 <line:17:11, col:17> 'int' '>'
            | |-ImplicitCastExpr 0x141941fd0 <col:11> 'int' <LValueToRValue>
            | | `-DeclRefExpr 0x141941f90 <col:11> 'int' lvalue Var 0x141928700 'cmp' 'int'
            | `-IntegerLiteral 0x141941fb0 <col:17> 'int' 0
            |-NullStmt 0x1419420c8 <line:18:6>
            `-IfStmt 0x141942098 <line:19:7, line:22:6> has_else
              |-RecoveryExpr 0x141942048 <line:19:11, col:16> '_Bool' contains-errors
              |-BreakStmt 0x141942068 <line:20:6>
              `-NullStmt 0x141942090 <line:22:6>
