`-FunctionDecl 0x1549281a8  line:1:19 guestwidth_to_adjustwidth 'int (int)' static inline
  |-ParmVarDecl 0x1549280d8 <col:45, col:49> col:49 used gaw 'int'
  `-CompoundStmt 0x154940a28 <line:2:1, line:13:1>
    |-DeclStmt 0x154928320 <line:3:2, col:10>
    | `-VarDecl 0x1549282b8 <col:2, col:6> col:6 used agaw 'int'
    |-DeclStmt 0x154928490 <line:4:2, col:24>
    | `-VarDecl 0x154928350 <col:2, col:23> col:6 used r 'int' cinit
    |   `-BinaryOperator 0x154928470 <col:10, col:23> 'int' '%'
    |     |-ParenExpr 0x154928430 <col:10, col:19> 'int'
    |     | `-BinaryOperator 0x154928410 <col:11, col:17> 'int' '-'
    |     |   |-ImplicitCastExpr 0x1549283f8 <col:11> 'int' <LValueToRValue>
    |     |   | `-DeclRefExpr 0x1549283b8 <col:11> 'int' lvalue ParmVar 0x1549280d8 'gaw' 'int'
    |     |   `-IntegerLiteral 0x1549283d8 <col:17> 'int' 12
    |     `-IntegerLiteral 0x154928450 <col:23> 'int' 9
    |-IfStmt 0x1549286a8 <line:6:2, line:9:20> has_else
    | |-BinaryOperator 0x154928500 <line:6:6, col:11> 'int' '=='
    | | |-ImplicitCastExpr 0x1549284e8 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1549284a8 <col:6> 'int' lvalue Var 0x154928350 'r' 'int'
    | | `-IntegerLiteral 0x1549284c8 <col:11> 'int' 0
    | |-BinaryOperator 0x154928578 <line:7:3, col:10> 'int' '='
    | | |-DeclRefExpr 0x154928520 <col:3> 'int' lvalue Var 0x1549282b8 'agaw' 'int'
    | | `-ImplicitCastExpr 0x154928560 <col:10> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x154928540 <col:10> 'int' lvalue ParmVar 0x1549280d8 'gaw' 'int'
    | `-BinaryOperator 0x154928688 <line:9:3, col:20> 'int' '='
    |   |-DeclRefExpr 0x154928598 <col:3> 'int' lvalue Var 0x1549282b8 'agaw' 'int'
    |   `-BinaryOperator 0x154928668 <col:10, col:20> 'int' '-'
    |     |-BinaryOperator 0x154928610 <col:10, col:16> 'int' '+'
    |     | |-ImplicitCastExpr 0x1549285f8 <col:10> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x1549285b8 <col:10> 'int' lvalue ParmVar 0x1549280d8 'gaw' 'int'
    |     | `-IntegerLiteral 0x1549285d8 <col:16> 'int' 9
    |     `-ImplicitCastExpr 0x154928650 <col:20> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x154928630 <col:20> 'int' lvalue Var 0x154928350 'r' 'int'
    |-IfStmt 0x1549287b0 <line:10:2, line:11:10>
    | |-BinaryOperator 0x154928730 <line:10:6, col:13> 'int' '>'
    | | |-ImplicitCastExpr 0x154928718 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1549286d8 <col:6> 'int' lvalue Var 0x1549282b8 'agaw' 'int'
    | | `-IntegerLiteral 0x1549286f8 <col:13> 'int' 64
    | `-BinaryOperator 0x154928790 <line:11:3, col:10> 'int' '='
    |   |-DeclRefExpr 0x154928750 <col:3> 'int' lvalue Var 0x1549282b8 'agaw' 'int'
    |   `-IntegerLiteral 0x154928770 <col:10> 'int' 64
    `-ReturnStmt 0x154940a18 <line:12:2, col:9>
      `-ImplicitCastExpr 0x154940a00 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x1549287d0 <col:9> 'int' lvalue Var 0x1549282b8 'agaw' 'int'
