`-FunctionDecl 0x15000de38  line:1:1 TEST 'int (int, int)'
  |-ParmVarDecl 0x15000dd58 <col:6> col:6 OverflowArithmetic 'int'
  |-ParmVarDecl 0x15000dcd8 <col:26> col:26 HeterogeneousArguments 'int'
  `-CompoundStmt 0x158123f08 <col:50, line:11:1>
    |-CompoundStmt 0x15000e310 <line:2:5, line:6:5>
    | |-DeclStmt 0x15000dfb8 <line:3:9, col:14>
    | | `-VarDecl 0x15000df50 <col:9, col:13> col:13 used r 'int'
    | `-CallExpr 0x15000e2c8 <line:5:9, col:23> 'int'
    |   |-ImplicitCastExpr 0x15000e2b0 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x15000e218 <col:9> 'int ()' Function 0x15000e160 'ASSERT_EQ' 'int ()'
    |   |-ImplicitCastExpr 0x15000e2f8 <col:19> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x15000e238 <col:19> 'int' lvalue Var 0x15000df50 'r' 'int'
    |   `-IntegerLiteral 0x15000e258 <col:22> 'int' 2
    `-CompoundStmt 0x158123ef0 <line:7:5, line:10:5>
      `-DeclStmt 0x15000e3b0 <line:8:9, col:29>
        `-VarDecl 0x15000e348 <col:9, col:28> col:28 r 'unsigned long long'
