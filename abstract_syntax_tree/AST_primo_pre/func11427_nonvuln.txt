`-FunctionDecl 0x12d80dec8  line:1:12 strncpy_with_color_codes 'int (char *, char *, int)' static
  |-ParmVarDecl 0x12d80dcd8 <col:37, col:43> col:43 used s1 'char *'
  |-ParmVarDecl 0x12d80dd58 <col:47, col:53> col:53 used s2 'char *'
  |-ParmVarDecl 0x12d80ddd8 <col:57, col:61> col:61 used n 'int'
  `-CompoundStmt 0x12d826f50 <col:64, line:22:1>
    |-DeclStmt 0x12d80e128 <line:2:2, col:18>
    | |-VarDecl 0x12d80dfe8 <col:2, col:10> col:6 used i 'int' cinit
    | | `-IntegerLiteral 0x12d80e050 <col:10> 'int' 0
    | `-VarDecl 0x12d80e088 <col:2, col:17> col:13 used j 'int' cinit
    |   `-IntegerLiteral 0x12d80e0f0 <col:17> 'int' 0
    |-DeclStmt 0x12d80e1e0 <line:3:2, col:15>
    | `-VarDecl 0x12d80e158 <col:2, col:14> col:6 used count 'int' cinit
    |   `-IntegerLiteral 0x12d80e1c0 <col:14> 'int' 0
    |-WhileStmt 0x12d826ee8 <line:4:2, line:20:2>
    | |-BinaryOperator 0x12d80e348 <line:4:9, col:26> 'int' '&&'
    | | |-ImplicitCastExpr 0x12d80e330 <col:9, col:13> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x12d80e318 <col:9, col:13> 'char' <LValueToRValue>
    | | |   `-ArraySubscriptExpr 0x12d80e268 <col:9, col:13> 'char' lvalue
    | | |     |-ImplicitCastExpr 0x12d80e238 <col:9> 'char *' <LValueToRValue>
    | | |     | `-DeclRefExpr 0x12d80e1f8 <col:9> 'char *' lvalue ParmVar 0x12d80dd58 's2' 'char *'
    | | |     `-ImplicitCastExpr 0x12d80e250 <col:12> 'int' <LValueToRValue>
    | | |       `-DeclRefExpr 0x12d80e218 <col:12> 'int' lvalue Var 0x12d80e088 'j' 'int'
    | | `-BinaryOperator 0x12d80e2f8 <col:18, col:26> 'int' '<'
    | |   |-ImplicitCastExpr 0x12d80e2c8 <col:18> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x12d80e288 <col:18> 'int' lvalue Var 0x12d80e158 'count' 'int'
    | |   `-ImplicitCastExpr 0x12d80e2e0 <col:26> 'int' <LValueToRValue>
    | |     `-DeclRefExpr 0x12d80e2a8 <col:26> 'int' lvalue ParmVar 0x12d80ddd8 'n' 'int'
    | `-CompoundStmt 0x12d826ec8 <col:29, line:20:2>
    |   |-WhileStmt 0x12d826c30 <line:6:3, line:15:3>
    |   | |-BinaryOperator 0x12d826650 <line:6:10, col:19> 'int' '=='
    |   | | |-ImplicitCastExpr 0x12d826638 <col:10, col:14> 'int' <IntegralCast>
    |   | | | `-ImplicitCastExpr 0x12d826620 <col:10, col:14> 'char' <LValueToRValue>
    |   | | |   `-ArraySubscriptExpr 0x12d80e3d8 <col:10, col:14> 'char' lvalue
    |   | | |     |-ImplicitCastExpr 0x12d80e3a8 <col:10> 'char *' <LValueToRValue>
    |   | | |     | `-DeclRefExpr 0x12d80e368 <col:10> 'char *' lvalue ParmVar 0x12d80dd58 's2' 'char *'
    |   | | |     `-ImplicitCastExpr 0x12d80e3c0 <col:13> 'int' <LValueToRValue>
    |   | | |       `-DeclRefExpr 0x12d80e388 <col:13> 'int' lvalue Var 0x12d80e088 'j' 'int'
    |   | | `-IntegerLiteral 0x12d826600 <col:19> 'int' 27
    |   | `-CompoundStmt 0x12d826c10 <col:25, line:15:3>
    |   |   |-WhileStmt 0x12d8269b8 <line:8:4, line:10:4>
    |   |   | |-BinaryOperator 0x12d826828 <line:8:11, col:29> 'int' '&&'
    |   |   | | |-ImplicitCastExpr 0x12d826810 <col:11, col:15> 'int' <IntegralCast>
    |   |   | | | `-ImplicitCastExpr 0x12d8267f8 <col:11, col:15> 'char' <LValueToRValue>
    |   |   | | |   `-ArraySubscriptExpr 0x12d8266e0 <col:11, col:15> 'char' lvalue
    |   |   | | |     |-ImplicitCastExpr 0x12d8266b0 <col:11> 'char *' <LValueToRValue>
    |   |   | | |     | `-DeclRefExpr 0x12d826670 <col:11> 'char *' lvalue ParmVar 0x12d80dd58 's2' 'char *'
    |   |   | | |     `-ImplicitCastExpr 0x12d8266c8 <col:14> 'int' <LValueToRValue>
    |   |   | | |       `-DeclRefExpr 0x12d826690 <col:14> 'int' lvalue Var 0x12d80e088 'j' 'int'
    |   |   | | `-BinaryOperator 0x12d8267d8 <col:20, col:29> 'int' '!='
    |   |   | |   |-ImplicitCastExpr 0x12d8267c0 <col:20, col:24> 'int' <IntegralCast>
    |   |   | |   | `-ImplicitCastExpr 0x12d8267a8 <col:20, col:24> 'char' <LValueToRValue>
    |   |   | |   |   `-ArraySubscriptExpr 0x12d826770 <col:20, col:24> 'char' lvalue
    |   |   | |   |     |-ImplicitCastExpr 0x12d826740 <col:20> 'char *' <LValueToRValue>
    |   |   | |   |     | `-DeclRefExpr 0x12d826700 <col:20> 'char *' lvalue ParmVar 0x12d80dd58 's2' 'char *'
    |   |   | |   |     `-ImplicitCastExpr 0x12d826758 <col:23> 'int' <LValueToRValue>
    |   |   | |   |       `-DeclRefExpr 0x12d826720 <col:23> 'int' lvalue Var 0x12d80e088 'j' 'int'
    |   |   | |   `-CharacterLiteral 0x12d826790 <col:29> 'int' 109
    |   |   | `-CompoundStmt 0x12d8269a0 <col:34, line:10:4>
    |   |   |   `-BinaryOperator 0x12d826980 <line:9:5, col:21> 'char' '='
    |   |   |     |-ArraySubscriptExpr 0x12d8268b8 <col:5, col:11> 'char' lvalue
    |   |   |     | |-ImplicitCastExpr 0x12d8268a0 <col:5> 'char *' <LValueToRValue>
    |   |   |     | | `-DeclRefExpr 0x12d826848 <col:5> 'char *' lvalue ParmVar 0x12d80dcd8 's1' 'char *'
    |   |   |     | `-UnaryOperator 0x12d826888 <col:8, col:9> 'int' postfix '++'
    |   |   |     |   `-DeclRefExpr 0x12d826868 <col:8> 'int' lvalue Var 0x12d80dfe8 'i' 'int'
    |   |   |     `-ImplicitCastExpr 0x12d826968 <col:15, col:21> 'char' <LValueToRValue>
    |   |   |       `-ArraySubscriptExpr 0x12d826948 <col:15, col:21> 'char' lvalue
    |   |   |         |-ImplicitCastExpr 0x12d826930 <col:15> 'char *' <LValueToRValue>
    |   |   |         | `-DeclRefExpr 0x12d8268d8 <col:15> 'char *' lvalue ParmVar 0x12d80dd58 's2' 'char *'
    |   |   |         `-UnaryOperator 0x12d826918 <col:18, col:19> 'int' postfix '++'
    |   |   |           `-DeclRefExpr 0x12d8268f8 <col:18> 'int' lvalue Var 0x12d80e088 'j' 'int'
    |   |   `-IfStmt 0x12d826bf0 <line:12:4, line:14:4>
    |   |     |-ImplicitCastExpr 0x12d826a68 <line:12:8, col:12> 'char' <LValueToRValue>
    |   |     | `-ArraySubscriptExpr 0x12d826a48 <col:8, col:12> 'char' lvalue
    |   |     |   |-ImplicitCastExpr 0x12d826a18 <col:8> 'char *' <LValueToRValue>
    |   |     |   | `-DeclRefExpr 0x12d8269d8 <col:8> 'char *' lvalue ParmVar 0x12d80dd58 's2' 'char *'
    |   |     |   `-ImplicitCastExpr 0x12d826a30 <col:11> 'int' <LValueToRValue>
    |   |     |     `-DeclRefExpr 0x12d8269f8 <col:11> 'int' lvalue Var 0x12d80e088 'j' 'int'
    |   |     `-CompoundStmt 0x12d826bd8 <col:15, line:14:4>
    |   |       `-BinaryOperator 0x12d826bb8 <line:13:5, col:21> 'char' '='
    |   |         |-ArraySubscriptExpr 0x12d826af0 <col:5, col:11> 'char' lvalue
    |   |         | |-ImplicitCastExpr 0x12d826ad8 <col:5> 'char *' <LValueToRValue>
    |   |         | | `-DeclRefExpr 0x12d826a80 <col:5> 'char *' lvalue ParmVar 0x12d80dcd8 's1' 'char *'
    |   |         | `-UnaryOperator 0x12d826ac0 <col:8, col:9> 'int' postfix '++'
    |   |         |   `-DeclRefExpr 0x12d826aa0 <col:8> 'int' lvalue Var 0x12d80dfe8 'i' 'int'
    |   |         `-ImplicitCastExpr 0x12d826ba0 <col:15, col:21> 'char' <LValueToRValue>
    |   |           `-ArraySubscriptExpr 0x12d826b80 <col:15, col:21> 'char' lvalue
    |   |             |-ImplicitCastExpr 0x12d826b68 <col:15> 'char *' <LValueToRValue>
    |   |             | `-DeclRefExpr 0x12d826b10 <col:15> 'char *' lvalue ParmVar 0x12d80dd58 's2' 'char *'
    |   |             `-UnaryOperator 0x12d826b50 <col:18, col:19> 'int' postfix '++'
    |   |               `-DeclRefExpr 0x12d826b30 <col:18> 'int' lvalue Var 0x12d80e088 'j' 'int'
    |   `-IfStmt 0x12d826ea8 <line:16:3, line:19:3>
    |     |-ImplicitCastExpr 0x12d826ce0 <line:16:7, col:11> 'char' <LValueToRValue>
    |     | `-ArraySubscriptExpr 0x12d826cc0 <col:7, col:11> 'char' lvalue
    |     |   |-ImplicitCastExpr 0x12d826c90 <col:7> 'char *' <LValueToRValue>
    |     |   | `-DeclRefExpr 0x12d826c50 <col:7> 'char *' lvalue ParmVar 0x12d80dd58 's2' 'char *'
    |     |   `-ImplicitCastExpr 0x12d826ca8 <col:10> 'int' <LValueToRValue>
    |     |     `-DeclRefExpr 0x12d826c70 <col:10> 'int' lvalue Var 0x12d80e088 'j' 'int'
    |     `-CompoundStmt 0x12d826e88 <col:14, line:19:3>
    |       |-BinaryOperator 0x12d826e30 <line:17:4, col:20> 'char' '='
    |       | |-ArraySubscriptExpr 0x12d826d68 <col:4, col:10> 'char' lvalue
    |       | | |-ImplicitCastExpr 0x12d826d50 <col:4> 'char *' <LValueToRValue>
    |       | | | `-DeclRefExpr 0x12d826cf8 <col:4> 'char *' lvalue ParmVar 0x12d80dcd8 's1' 'char *'
    |       | | `-UnaryOperator 0x12d826d38 <col:7, col:8> 'int' postfix '++'
    |       | |   `-DeclRefExpr 0x12d826d18 <col:7> 'int' lvalue Var 0x12d80dfe8 'i' 'int'
    |       | `-ImplicitCastExpr 0x12d826e18 <col:14, col:20> 'char' <LValueToRValue>
    |       |   `-ArraySubscriptExpr 0x12d826df8 <col:14, col:20> 'char' lvalue
    |       |     |-ImplicitCastExpr 0x12d826de0 <col:14> 'char *' <LValueToRValue>
    |       |     | `-DeclRefExpr 0x12d826d88 <col:14> 'char *' lvalue ParmVar 0x12d80dd58 's2' 'char *'
    |       |     `-UnaryOperator 0x12d826dc8 <col:17, col:18> 'int' postfix '++'
    |       |       `-DeclRefExpr 0x12d826da8 <col:17> 'int' lvalue Var 0x12d80e088 'j' 'int'
    |       `-UnaryOperator 0x12d826e70 <line:18:4, col:9> 'int' postfix '++'
    |         `-DeclRefExpr 0x12d826e50 <col:4> 'int' lvalue Var 0x12d80e158 'count' 'int'
    `-ReturnStmt 0x12d826f40 <line:21:2, col:9>
      `-ImplicitCastExpr 0x12d826f28 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x12d826f08 <col:9> 'int' lvalue Var 0x12d80dfe8 'i' 'int'
