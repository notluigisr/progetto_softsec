`-FunctionDecl 0x141128310  line:1:6 invalid MSG_WriteBits 'void (int *, int, int)'
  |-ParmVarDecl 0x141128128 <col:21, col:28> col:28 referenced invalid msg 'int *'
  |-ParmVarDecl 0x1411281a8 <col:33, col:37> col:37 used value 'int'
  |-ParmVarDecl 0x141128228 <col:44, col:48> col:48 used bits 'int'
  `-CompoundStmt 0x14180a510 <col:55, line:57:1>
    |-DeclStmt 0x141128450 <line:2:2, col:7>
    | `-VarDecl 0x1411283e8 <col:2, col:6> col:6 used i 'int'
    |-IfStmt 0x1411286f0 <line:7:2, line:10:2>
    | |-BinaryOperator 0x141128598 <line:7:7, col:37> 'int' contains-errors '<'
    | | |-BinaryOperator 0x141128558 <col:7, col:27> '<dependent type>' contains-errors '-'
    | | | |-CXXDependentScopeMemberExpr 0x1411284a8 <col:7, col:12> '<dependent type>' contains-errors lvalue ->maxsize
    | | | | `-RecoveryExpr 0x141128488 <col:7> '<dependent type>' contains-errors lvalue
    | | | `-CXXDependentScopeMemberExpr 0x141128510 <col:22, col:27> '<dependent type>' contains-errors lvalue ->cursize
    | | |   `-RecoveryExpr 0x1411284f0 <col:22> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x141128578 <col:37> 'int' 4
    | `-CompoundStmt 0x1411286d0 <col:41, line:10:2>
    |   |-BinaryOperator 0x1411286a0 <line:8:3, col:21> '<dependent type>' contains-errors '='
    |   | |-CXXDependentScopeMemberExpr 0x141128600 <col:3, col:8> '<dependent type>' contains-errors lvalue ->overflowed
    |   | | `-RecoveryExpr 0x1411285d8 <col:3> '<dependent type>' contains-errors lvalue
    |   | |   `-DeclRefExpr 0x1411285b8 <col:3> 'int *' lvalue ParmVar 0x141128128 'msg' 'int *'
    |   | `-RecoveryExpr 0x141128680 <col:21> '<dependent type>' contains-errors lvalue
    |   `-ReturnStmt 0x1411286c0 <line:9:3>
    |-IfStmt 0x141141b98 <line:12:2, line:14:2>
    | |-BinaryOperator 0x1411418b8 <line:12:7, col:41> 'int' '||'
    | | |-BinaryOperator 0x141141820 <col:7, col:28> 'int' '||'
    | | | |-BinaryOperator 0x141128768 <col:7, col:15> 'int' '=='
    | | | | |-ImplicitCastExpr 0x141128750 <col:7> 'int' <LValueToRValue>
    | | | | | `-DeclRefExpr 0x141128710 <col:7> 'int' lvalue ParmVar 0x141128228 'bits' 'int'
    | | | | `-IntegerLiteral 0x141128730 <col:15> 'int' 0
    | | | `-BinaryOperator 0x141141800 <col:20, col:28> 'int' '<'
    | | |   |-ImplicitCastExpr 0x1411287e0 <col:20> 'int' <LValueToRValue>
    | | |   | `-DeclRefExpr 0x141128788 <col:20> 'int' lvalue ParmVar 0x141128228 'bits' 'int'
    | | |   `-UnaryOperator 0x1411287c8 <col:27, col:28> 'int' prefix '-'
    | | |     `-IntegerLiteral 0x1411287a8 <col:28> 'int' 31
    | | `-BinaryOperator 0x141141898 <col:34, col:41> 'int' '>'
    | |   |-ImplicitCastExpr 0x141141880 <col:34> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x141141840 <col:34> 'int' lvalue ParmVar 0x141128228 'bits' 'int'
    | |   `-IntegerLiteral 0x141141860 <col:41> 'int' 32
    | `-CompoundStmt 0x141141b80 <col:46, line:14:2>
    |   `-CallExpr 0x141141b48 <line:13:3, col:36> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x141141a30 <col:3> 'int ()' Function 0x141141978 'Com_Error' 'int ()'
    |     |-RecoveryExpr 0x141141b28 <col:14> '<dependent type>' contains-errors lvalue
    |     |-StringLiteral 0x141141ab0 <col:24> 'char[4]' lvalue "STR"
    |     `-DeclRefExpr 0x141141ad0 <col:31> 'int' lvalue ParmVar 0x141128228 'bits' 'int'
    |-IfStmt 0x141141cd8 <line:16:2, line:18:2>
    | |-BinaryOperator 0x141141c10 <line:16:7, col:14> 'int' '<'
    | | |-ImplicitCastExpr 0x141141bf8 <col:7> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x141141bb8 <col:7> 'int' lvalue ParmVar 0x141128228 'bits' 'int'
    | | `-IntegerLiteral 0x141141bd8 <col:14> 'int' 0
    | `-CompoundStmt 0x141141cc0 <col:18, line:18:2>
    |   `-BinaryOperator 0x141141ca0 <line:17:3, col:11> 'int' '='
    |     |-DeclRefExpr 0x141141c30 <col:3> 'int' lvalue ParmVar 0x141128228 'bits' 'int'
    |     `-UnaryOperator 0x141141c88 <col:10, col:11> 'int' prefix '-'
    |       `-ImplicitCastExpr 0x141141c70 <col:11> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x141141c50 <col:11> 'int' lvalue ParmVar 0x141128228 'bits' 'int'
    `-IfStmt 0x14180a4e0 <line:20:2, line:56:2> has_else
      |-CXXDependentScopeMemberExpr 0x141141d18 <line:20:7, col:12> '<dependent type>' contains-errors lvalue ->oob
      | `-RecoveryExpr 0x141141cf8 <col:7> '<dependent type>' contains-errors lvalue
      |-CompoundStmt 0x141808838 <col:18, line:38:2>
      | `-IfStmt 0x141808808 <line:21:3, line:37:3> has_else
      |   |-BinaryOperator 0x141141db8 <line:21:8, col:16> 'int' '=='
      |   | |-ImplicitCastExpr 0x141141da0 <col:8> 'int' <LValueToRValue>
      |   | | `-DeclRefExpr 0x141141d60 <col:8> 'int' lvalue ParmVar 0x141128228 'bits' 'int'
      |   | `-IntegerLiteral 0x141141d80 <col:16> 'int' 8
      |   |-CompoundStmt 0x141142120 <col:20, line:25:3>
      |   | |-BinaryOperator 0x141141f40 <line:22:4, col:30> '<dependent type>' contains-errors '='
      |   | | |-ArraySubscriptExpr 0x141141f00 <col:4, col:26> '<dependent type>' contains-errors lvalue
      |   | | | |-ImplicitCastExpr 0x141141ed0 <col:4, col:9> '<dependent type>' contains-errors <LValueToRValue>
      |   | | | | `-CXXDependentScopeMemberExpr 0x141141e20 <col:4, col:9> '<dependent type>' contains-errors lvalue ->data
      |   | | | |   `-RecoveryExpr 0x141141df8 <col:4> '<dependent type>' contains-errors lvalue
      |   | | | |     `-DeclRefExpr 0x141141dd8 <col:4> 'int *' lvalue ParmVar 0x141128128 'msg' 'int *'
      |   | | | `-ImplicitCastExpr 0x141141ee8 <col:14, col:19> '<dependent type>' contains-errors <LValueToRValue>
      |   | | |   `-CXXDependentScopeMemberExpr 0x141141e88 <col:14, col:19> '<dependent type>' contains-errors lvalue ->cursize
      |   | | |     `-RecoveryExpr 0x141141e68 <col:14> '<dependent type>' contains-errors lvalue
      |   | | `-DeclRefExpr 0x141141f20 <col:30> 'int' lvalue ParmVar 0x1411281a8 'value' 'int'
      |   | |-CompoundAssignOperator 0x141142010 <line:23:4, col:20> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
      |   | | |-CXXDependentScopeMemberExpr 0x141141fa8 <col:4, col:9> '<dependent type>' contains-errors lvalue ->cursize
      |   | | | `-RecoveryExpr 0x141141f80 <col:4> '<dependent type>' contains-errors lvalue
      |   | | |   `-DeclRefExpr 0x141141f60 <col:4> 'int *' lvalue ParmVar 0x141128128 'msg' 'int *'
      |   | | `-IntegerLiteral 0x141141ff0 <col:20> 'int' 1
      |   | `-CompoundAssignOperator 0x1411420f0 <line:24:4, col:16> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
      |   |   |-CXXDependentScopeMemberExpr 0x141142088 <col:4, col:9> '<dependent type>' contains-errors lvalue ->bit
      |   |   | `-RecoveryExpr 0x141142060 <col:4> '<dependent type>' contains-errors lvalue
      |   |   |   `-DeclRefExpr 0x141142040 <col:4> 'int *' lvalue ParmVar 0x141128128 'msg' 'int *'
      |   |   `-IntegerLiteral 0x1411420d0 <col:16> 'int' 8
      |   `-IfStmt 0x1418087d8 <line:25:10, line:37:3> has_else
      |     |-BinaryOperator 0x1411421a0 <line:25:15, col:23> 'int' '=='
      |     | |-ImplicitCastExpr 0x141142188 <col:15> 'int' <LValueToRValue>
      |     | | `-DeclRefExpr 0x141142148 <col:15> 'int' lvalue ParmVar 0x141128228 'bits' 'int'
      |     | `-IntegerLiteral 0x141142168 <col:23> 'int' 16
      |     |-CompoundStmt 0x141142738 <col:28, line:31:3>
      |     | |-DeclStmt 0x141142290 <line:26:4, col:22>
      |     | | `-VarDecl 0x1411421d8 <col:4, col:17> col:10 used temp 'short' cinit
      |     | |   `-ImplicitCastExpr 0x141142278 <col:17> 'short' <IntegralCast>
      |     | |     `-ImplicitCastExpr 0x141142260 <col:17> 'int' <LValueToRValue>
      |     | |       `-DeclRefExpr 0x141142240 <col:17> 'int' lvalue ParmVar 0x1411281a8 'value' 'int'
      |     | |-CallExpr 0x141142548 <line:28:4, col:53> '<dependent type>' contains-errors
      |     | | |-DeclRefExpr 0x141142388 <col:4> 'int ()' Function 0x1411422d0 'CopyLittleShort' 'int ()'
      |     | | |-UnaryOperator 0x1411424c8 <col:21, col:44> '<dependent type>' contains-errors prefix '&' cannot overflow
      |     | | | `-ArraySubscriptExpr 0x1411424a8 <col:22, col:44> '<dependent type>' contains-errors lvalue
      |     | | |   |-ImplicitCastExpr 0x141142478 <col:22, col:27> '<dependent type>' contains-errors <LValueToRValue>
      |     | | |   | `-CXXDependentScopeMemberExpr 0x1411423c8 <col:22, col:27> '<dependent type>' contains-errors lvalue ->data
      |     | | |   |   `-RecoveryExpr 0x1411423a8 <col:22> '<dependent type>' contains-errors lvalue
      |     | | |   `-ImplicitCastExpr 0x141142490 <col:32, col:37> '<dependent type>' contains-errors <LValueToRValue>
      |     | | |     `-CXXDependentScopeMemberExpr 0x141142430 <col:32, col:37> '<dependent type>' contains-errors lvalue ->cursize
      |     | | |       `-RecoveryExpr 0x141142410 <col:32> '<dependent type>' contains-errors lvalue
      |     | | `-UnaryOperator 0x141142530 <col:47, col:48> 'short *' prefix '&' cannot overflow
      |     | |   `-DeclRefExpr 0x1411424e0 <col:48> 'short' lvalue Var 0x1411421d8 'temp' 'short'
      |     | |-CompoundAssignOperator 0x141142628 <line:29:4, col:20> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
      |     | | |-CXXDependentScopeMemberExpr 0x1411425c0 <col:4, col:9> '<dependent type>' contains-errors lvalue ->cursize
      |     | | | `-RecoveryExpr 0x141142598 <col:4> '<dependent type>' contains-errors lvalue
      |     | | |   `-DeclRefExpr 0x141142578 <col:4> 'int *' lvalue ParmVar 0x141128128 'msg' 'int *'
      |     | | `-IntegerLiteral 0x141142608 <col:20> 'int' 2
      |     | `-CompoundAssignOperator 0x141142708 <line:30:4, col:16> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
      |     |   |-CXXDependentScopeMemberExpr 0x1411426a0 <col:4, col:9> '<dependent type>' contains-errors lvalue ->bit
      |     |   | `-RecoveryExpr 0x141142678 <col:4> '<dependent type>' contains-errors lvalue
      |     |   |   `-DeclRefExpr 0x141142658 <col:4> 'int *' lvalue ParmVar 0x141128128 'msg' 'int *'
      |     |   `-IntegerLiteral 0x1411426e8 <col:16> 'int' 16
      |     `-IfStmt 0x1418087a8 <line:31:10, line:37:3> has_else
      |       |-BinaryOperator 0x1411427c0 <line:31:15, col:21> 'int' '=='
      |       | |-ImplicitCastExpr 0x1411427a8 <col:15> 'int' <LValueToRValue>
      |       | | `-DeclRefExpr 0x141142768 <col:15> 'int' lvalue ParmVar 0x141128228 'bits' 'int'
      |       | `-IntegerLiteral 0x141142788 <col:21> 'int' 32
      |       |-CompoundStmt 0x141808660 <col:26, line:35:3>
      |       | |-CallExpr 0x141808470 <line:32:4, col:53> '<dependent type>' contains-errors
      |       | | |-DeclRefExpr 0x1418082e0 <col:4> 'int ()' Function 0x141808228 'CopyLittleLong' 'int ()'
      |       | | |-UnaryOperator 0x141808420 <col:20, col:43> '<dependent type>' contains-errors prefix '&' cannot overflow
      |       | | | `-ArraySubscriptExpr 0x141808400 <col:21, col:43> '<dependent type>' contains-errors lvalue
      |       | | |   |-ImplicitCastExpr 0x1418083d0 <col:21, col:26> '<dependent type>' contains-errors <LValueToRValue>
      |       | | |   | `-CXXDependentScopeMemberExpr 0x141808320 <col:21, col:26> '<dependent type>' contains-errors lvalue ->data
      |       | | |   |   `-RecoveryExpr 0x141808300 <col:21> '<dependent type>' contains-errors lvalue
      |       | | |   `-ImplicitCastExpr 0x1418083e8 <col:31, col:36> '<dependent type>' contains-errors <LValueToRValue>
      |       | | |     `-CXXDependentScopeMemberExpr 0x141808388 <col:31, col:36> '<dependent type>' contains-errors lvalue ->cursize
      |       | | |       `-RecoveryExpr 0x141808368 <col:31> '<dependent type>' contains-errors lvalue
      |       | | `-UnaryOperator 0x141808458 <col:46, col:47> 'int *' prefix '&' cannot overflow
      |       | |   `-DeclRefExpr 0x141808438 <col:47> 'int' lvalue ParmVar 0x1411281a8 'value' 'int'
      |       | |-CompoundAssignOperator 0x141808550 <line:33:4, col:20> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
      |       | | |-CXXDependentScopeMemberExpr 0x1418084e8 <col:4, col:9> '<dependent type>' contains-errors lvalue ->cursize
      |       | | | `-RecoveryExpr 0x1418084c0 <col:4> '<dependent type>' contains-errors lvalue
      |       | | |   `-DeclRefExpr 0x1418084a0 <col:4> 'int *' lvalue ParmVar 0x141128128 'msg' 'int *'
      |       | | `-IntegerLiteral 0x141808530 <col:20> 'int' 4
      |       | `-CompoundAssignOperator 0x141808630 <line:34:4, col:16> '<dependent type>' contains-errors '+=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
      |       |   |-CXXDependentScopeMemberExpr 0x1418085c8 <col:4, col:9> '<dependent type>' contains-errors lvalue ->bit
      |       |   | `-RecoveryExpr 0x1418085a0 <col:4> '<dependent type>' contains-errors lvalue
      |       |   |   `-DeclRefExpr 0x141808580 <col:4> 'int *' lvalue ParmVar 0x141128128 'msg' 'int *'
      |       |   `-IntegerLiteral 0x141808610 <col:16> 'int' 32
      |       `-CompoundStmt 0x141808790 <line:35:10, line:37:3>
      |         `-CallExpr 0x141808758 <line:36:4, col:37> '<dependent type>' contains-errors
      |           |-DeclRefExpr 0x141808688 <col:4> 'int ()' Function 0x141141978 'Com_Error' 'int ()'
      |           |-RecoveryExpr 0x141808738 <col:15> '<dependent type>' contains-errors lvalue
      |           |-StringLiteral 0x1418086c0 <col:25> 'char[4]' lvalue "STR"
      |           `-DeclRefExpr 0x1418086e0 <col:32> 'int' lvalue ParmVar 0x141128228 'bits' 'int'
      `-CompoundStmt 0x14180a4b0 <line:38:9, line:56:2>
        |-CompoundAssignOperator 0x141808968 <line:39:3, col:38> 'int' '&=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
        | |-DeclRefExpr 0x141808850 <col:3> 'int' lvalue ParmVar 0x1411281a8 'value' 'int'
        | `-ParenExpr 0x141808948 <col:12, col:38> 'unsigned int'
        |   `-BinaryOperator 0x141808928 <col:13, col:37> 'unsigned int' '>>'
        |     |-IntegerLiteral 0x141808870 <col:13> 'unsigned int' 4294967295
        |     `-ParenExpr 0x141808908 <col:27, col:37> 'int'
        |       `-BinaryOperator 0x1418088e8 <col:28, col:33> 'int' '-'
        |         |-IntegerLiteral 0x141808890 <col:28> 'int' 32
        |         `-ImplicitCastExpr 0x1418088d0 <col:33> 'int' <LValueToRValue>
        |           `-DeclRefExpr 0x1418088b0 <col:33> 'int' lvalue ParmVar 0x141128228 'bits' 'int'
        |-IfStmt 0x141809170 <line:40:3, line:48:3>
        | |-BinaryOperator 0x1418089f0 <line:40:8, col:13> 'int' '&'
        | | |-ImplicitCastExpr 0x1418089d8 <col:8> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x141808998 <col:8> 'int' lvalue ParmVar 0x141128228 'bits' 'int'
        | | `-IntegerLiteral 0x1418089b8 <col:13> 'int' 7
        | `-CompoundStmt 0x141809140 <col:17, line:48:3>
        |   |-DeclStmt 0x141808a90 <line:41:4, col:13>
        |   | `-VarDecl 0x141808a28 <col:4, col:8> col:8 used nbits 'int'
        |   |-BinaryOperator 0x141808b40 <line:42:4, col:17> 'int' '='
        |   | |-DeclRefExpr 0x141808aa8 <col:4> 'int' lvalue Var 0x141808a28 'nbits' 'int'
        |   | `-BinaryOperator 0x141808b20 <col:12, col:17> 'int' '&'
        |   |   |-ImplicitCastExpr 0x141808b08 <col:12> 'int' <LValueToRValue>
        |   |   | `-DeclRefExpr 0x141808ac8 <col:12> 'int' lvalue ParmVar 0x141128228 'bits' 'int'
        |   |   `-IntegerLiteral 0x141808ae8 <col:17> 'int' 7
        |   |-ForStmt 0x141809038 <line:43:4, line:46:4>
        |   | |-BinaryOperator 0x141808ba0 <line:43:9, col:13> 'int' '='
        |   | | |-DeclRefExpr 0x141808b60 <col:9> 'int' lvalue Var 0x1411283e8 'i' 'int'
        |   | | `-IntegerLiteral 0x141808b80 <col:13> 'int' 0
        |   | |-<<<NULL>>>
        |   | |-BinaryOperator 0x141808c30 <col:16, col:20> 'int' '<'
        |   | | |-ImplicitCastExpr 0x141808c00 <col:16> 'int' <LValueToRValue>
        |   | | | `-DeclRefExpr 0x141808bc0 <col:16> 'int' lvalue Var 0x1411283e8 'i' 'int'
        |   | | `-ImplicitCastExpr 0x141808c18 <col:20> 'int' <LValueToRValue>
        |   | |   `-DeclRefExpr 0x141808be0 <col:20> 'int' lvalue Var 0x141808a28 'nbits' 'int'
        |   | |-UnaryOperator 0x141808c70 <col:27, col:28> 'int' postfix '++'
        |   | | `-DeclRefExpr 0x141808c50 <col:27> 'int' lvalue Var 0x1411283e8 'i' 'int'
        |   | `-CompoundStmt 0x141809018 <col:33, line:46:4>
        |   |   |-CallExpr 0x141808f08 <line:44:5, col:52> '<dependent type>' contains-errors
        |   |   | |-DeclRefExpr 0x141808d68 <col:5> 'int ()' Function 0x141808cb0 'Huff_putBit' 'int ()'
        |   |   | |-ParenExpr 0x141808e00 <col:18, col:28> 'int'
        |   |   | | `-BinaryOperator 0x141808de0 <col:19, col:27> 'int' '&'
        |   |   | |   |-ImplicitCastExpr 0x141808dc8 <col:19> 'int' <LValueToRValue>
        |   |   | |   | `-DeclRefExpr 0x141808d88 <col:19> 'int' lvalue ParmVar 0x1411281a8 'value' 'int'
        |   |   | |   `-IntegerLiteral 0x141808da8 <col:27> 'int' 1
        |   |   | |-CXXDependentScopeMemberExpr 0x141808e40 <col:31, col:36> '<dependent type>' contains-errors lvalue ->data
        |   |   | | `-RecoveryExpr 0x141808e20 <col:31> '<dependent type>' contains-errors lvalue
        |   |   | `-UnaryOperator 0x141808ef0 <col:42, col:48> '<dependent type>' contains-errors prefix '&' cannot overflow
        |   |   |   `-CXXDependentScopeMemberExpr 0x141808ea8 <col:43, col:48> '<dependent type>' contains-errors lvalue ->bit
        |   |   |     `-RecoveryExpr 0x141808e88 <col:43> '<dependent type>' contains-errors lvalue
        |   |   `-BinaryOperator 0x141808ff8 <line:45:5, col:24> 'int' '='
        |   |     |-DeclRefExpr 0x141808f40 <col:5> 'int' lvalue ParmVar 0x1411281a8 'value' 'int'
        |   |     `-ParenExpr 0x141808fd8 <col:13, col:24> 'int'
        |   |       `-BinaryOperator 0x141808fb8 <col:14, col:23> 'int' '>>'
        |   |         |-ImplicitCastExpr 0x141808fa0 <col:14> 'int' <LValueToRValue>
        |   |         | `-DeclRefExpr 0x141808f60 <col:14> 'int' lvalue ParmVar 0x1411281a8 'value' 'int'
        |   |         `-IntegerLiteral 0x141808f80 <col:23> 'int' 1
        |   `-BinaryOperator 0x141809120 <line:47:4, col:18> 'int' '='
        |     |-DeclRefExpr 0x141809070 <col:4> 'int' lvalue ParmVar 0x141128228 'bits' 'int'
        |     `-BinaryOperator 0x141809100 <col:11, col:18> 'int' '-'
        |       |-ImplicitCastExpr 0x1418090d0 <col:11> 'int' <LValueToRValue>
        |       | `-DeclRefExpr 0x141809090 <col:11> 'int' lvalue ParmVar 0x141128228 'bits' 'int'
        |       `-ImplicitCastExpr 0x1418090e8 <col:18> 'int' <LValueToRValue>
        |         `-DeclRefExpr 0x1418090b0 <col:18> 'int' lvalue Var 0x141808a28 'nbits' 'int'
        |-IfStmt 0x14180a2d8 <line:49:3, line:54:3>
        | |-ImplicitCastExpr 0x1418091b0 <line:49:8> 'int' <LValueToRValue>
        | | `-DeclRefExpr 0x141809190 <col:8> 'int' lvalue ParmVar 0x141128228 'bits' 'int'
        | `-CompoundStmt 0x14180a2c0 <col:15, line:54:3>
        |   `-ForStmt 0x14180a288 <line:50:4, line:53:4>
        |     |-BinaryOperator 0x141809c20 <line:50:9, col:13> 'int' '='
        |     | |-DeclRefExpr 0x1418091c8 <col:9> 'int' lvalue Var 0x1411283e8 'i' 'int'
        |     | `-IntegerLiteral 0x141809c00 <col:13> 'int' 0
        |     |-<<<NULL>>>
        |     |-BinaryOperator 0x141809cb0 <col:16, col:20> 'int' '<'
        |     | |-ImplicitCastExpr 0x141809c80 <col:16> 'int' <LValueToRValue>
        |     | | `-DeclRefExpr 0x141809c40 <col:16> 'int' lvalue Var 0x1411283e8 'i' 'int'
        |     | `-ImplicitCastExpr 0x141809c98 <col:20> 'int' <LValueToRValue>
        |     |   `-DeclRefExpr 0x141809c60 <col:20> 'int' lvalue ParmVar 0x141128228 'bits' 'int'
        |     |-CompoundAssignOperator 0x141809d10 <col:26, col:31> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
        |     | |-DeclRefExpr 0x141809cd0 <col:26> 'int' lvalue Var 0x1411283e8 'i' 'int'
        |     | `-IntegerLiteral 0x141809cf0 <col:31> 'int' 8
        |     `-CompoundStmt 0x14180a268 <col:35, line:53:4>
        |       |-CallExpr 0x14180a150 <line:51:5, col:84> '<dependent type>' contains-errors
        |       | |-DeclRefExpr 0x141809e20 <col:5> 'int ()' Function 0x141809d68 'Huff_offsetTransmit' 'int ()'
        |       | |-UnaryOperator 0x14180a0e0 <col:26, col:35> '<dependent type>' contains-errors prefix '&' cannot overflow
        |       | | `-CXXDependentScopeMemberExpr 0x14180a098 <col:27, col:35> '<dependent type>' contains-errors lvalue .compressor
        |       | |   `-RecoveryExpr 0x14180a078 <col:27> '<dependent type>' contains-errors lvalue
        |       | |-ParenExpr 0x14180a130 <col:47, col:60> 'int'
        |       | | `-BinaryOperator 0x14180a110 <col:48, col:56> 'int' '&'
        |       | |   |-ImplicitCastExpr 0x14180a0f8 <col:48> 'int' <LValueToRValue>
        |       | |   | `-DeclRefExpr 0x141809eb8 <col:48> 'int' lvalue ParmVar 0x1411281a8 'value' 'int'
        |       | |   `-IntegerLiteral 0x141809ed8 <col:56> 'int' 255
        |       | |-CXXDependentScopeMemberExpr 0x141809f70 <col:63, col:68> '<dependent type>' contains-errors lvalue ->data
        |       | | `-RecoveryExpr 0x141809f50 <col:63> '<dependent type>' contains-errors lvalue
        |       | `-UnaryOperator 0x14180a020 <col:74, col:80> '<dependent type>' contains-errors prefix '&' cannot overflow
        |       |   `-CXXDependentScopeMemberExpr 0x141809fd8 <col:75, col:80> '<dependent type>' contains-errors lvalue ->bit
        |       |     `-RecoveryExpr 0x141809fb8 <col:75> '<dependent type>' contains-errors lvalue
        |       `-BinaryOperator 0x14180a248 <line:52:5, col:24> 'int' '='
        |         |-DeclRefExpr 0x14180a190 <col:5> 'int' lvalue ParmVar 0x1411281a8 'value' 'int'
        |         `-ParenExpr 0x14180a228 <col:13, col:24> 'int'
        |           `-BinaryOperator 0x14180a208 <col:14, col:23> 'int' '>>'
        |             |-ImplicitCastExpr 0x14180a1f0 <col:14> 'int' <LValueToRValue>
        |             | `-DeclRefExpr 0x14180a1b0 <col:14> 'int' lvalue ParmVar 0x1411281a8 'value' 'int'
        |             `-IntegerLiteral 0x14180a1d0 <col:23> 'int' 8
        `-BinaryOperator 0x14180a490 <line:55:3, col:36> '<dependent type>' contains-errors '='
          |-CXXDependentScopeMemberExpr 0x14180a340 <col:3, col:8> '<dependent type>' contains-errors lvalue ->cursize
          | `-RecoveryExpr 0x14180a318 <col:3> '<dependent type>' contains-errors lvalue
          |   `-DeclRefExpr 0x14180a2f8 <col:3> 'int *' lvalue ParmVar 0x141128128 'msg' 'int *'
          `-BinaryOperator 0x14180a470 <col:18, col:36> '<dependent type>' contains-errors '+'
            |-ParenExpr 0x14180a430 <col:18, col:32> '<dependent type>' contains-errors
            | `-BinaryOperator 0x14180a410 <col:19, col:31> '<dependent type>' contains-errors '>>'
            |   |-CXXDependentScopeMemberExpr 0x14180a3a8 <col:19, col:24> '<dependent type>' contains-errors lvalue ->bit
            |   | `-RecoveryExpr 0x14180a388 <col:19> '<dependent type>' contains-errors lvalue
            |   `-IntegerLiteral 0x14180a3f0 <col:31> 'int' 3
            `-IntegerLiteral 0x14180a450 <col:36> 'int' 1
