`-FunctionDecl 0x15a928238  line:1:12 is_ascii_string 'int (char *, int)' static
  |-ParmVarDecl 0x15a9280d8 <col:28, col:34> col:34 used s 'char *'
  |-ParmVarDecl 0x15a928158 <col:37, col:41> col:41 used len 'int'
  `-CompoundStmt 0x15a9419b0 <line:2:1, line:13:1>
    |-DeclStmt 0x15a928490 <line:3:3, col:21>
    | |-VarDecl 0x15a928350 <col:3, col:13> col:7 used ret 'int' cinit
    | | `-IntegerLiteral 0x15a9283b8 <col:13> 'int' 1
    | `-VarDecl 0x15a9283f0 <col:3, col:20> col:16 used i 'int' cinit
    |   `-IntegerLiteral 0x15a928458 <col:20> 'int' 0
    |-ForStmt 0x15a941930 <line:4:3, line:11:3>
    | |-BinaryOperator 0x15a9284e8 <line:4:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x15a9284a8 <col:7> 'int' lvalue Var 0x15a9283f0 'i' 'int'
    | | `-IntegerLiteral 0x15a9284c8 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x15a928578 <col:14, col:18> 'int' '<'
    | | |-ImplicitCastExpr 0x15a928548 <col:14> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x15a928508 <col:14> 'int' lvalue Var 0x15a9283f0 'i' 'int'
    | | `-ImplicitCastExpr 0x15a928560 <col:18> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x15a928528 <col:18> 'int' lvalue ParmVar 0x15a928158 'len' 'int'
    | |-UnaryOperator 0x15a9285b8 <col:23, col:24> 'int' postfix '++'
    | | `-DeclRefExpr 0x15a928598 <col:23> 'int' lvalue Var 0x15a9283f0 'i' 'int'
    | `-CompoundStmt 0x15a941918 <line:5:3, line:11:3>
    |   `-IfStmt 0x15a9418f8 <line:6:7, line:10:7>
    |     |-UnaryOperator 0x15a941858 <line:6:12, col:27> 'int' prefix '!' cannot overflow
    |     | `-CallExpr 0x15a941800 <col:13, col:27> 'int'
    |     |   |-ImplicitCastExpr 0x15a9287e0 <col:13> 'int (*)()' <FunctionToPointerDecay>
    |     |   | `-DeclRefExpr 0x15a928700 <col:13> 'int ()' Function 0x15a928648 'isascii' 'int ()'
    |     |   `-ImplicitCastExpr 0x15a941840 <col:22, col:25> 'int' <IntegralCast>
    |     |     `-ImplicitCastExpr 0x15a941828 <col:22, col:25> 'char' <LValueToRValue>
    |     |       `-ArraySubscriptExpr 0x15a928790 <col:22, col:25> 'char' lvalue
    |     |         |-ImplicitCastExpr 0x15a928760 <col:22> 'char *' <LValueToRValue>
    |     |         | `-DeclRefExpr 0x15a928720 <col:22> 'char *' lvalue ParmVar 0x15a9280d8 's' 'char *'
    |     |         `-ImplicitCastExpr 0x15a928778 <col:24> 'int' <LValueToRValue>
    |     |           `-DeclRefExpr 0x15a928740 <col:24> 'int' lvalue Var 0x15a9283f0 'i' 'int'
    |     `-CompoundStmt 0x15a9418d8 <line:7:7, line:10:7>
    |       |-BinaryOperator 0x15a9418b0 <line:8:11, col:17> 'int' '='
    |       | |-DeclRefExpr 0x15a941870 <col:11> 'int' lvalue Var 0x15a928350 'ret' 'int'
    |       | `-IntegerLiteral 0x15a941890 <col:17> 'int' 0
    |       `-BreakStmt 0x15a9418d0 <line:9:11>
    `-ReturnStmt 0x15a9419a0 <line:12:3, col:10>
      `-ImplicitCastExpr 0x15a941988 <col:10> 'int' <LValueToRValue>
        `-DeclRefExpr 0x15a941968 <col:10> 'int' lvalue Var 0x15a928350 'ret' 'int'
