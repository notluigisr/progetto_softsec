`-FunctionDecl 0x10580e038  line:1:1 invalid compile_lock_unlock 'int (int *, char *, int *, int, void *)'
  |-ParmVarDecl 0x10580dd28 <line:2:5, col:14> col:14 invalid lvp 'int *'
  |-ParmVarDecl 0x10580dda8 <line:3:5, col:14> col:14 used name_end 'char *'
  |-ParmVarDecl 0x10580de28 <line:4:5, col:14> col:14 invalid eap 'int *'
  |-ParmVarDecl 0x10580dea8 <line:5:5, col:13> col:13 used deep 'int'
  |-ParmVarDecl 0x10580df28 <line:6:5, col:14> col:14 used coookie 'void *'
  `-CompoundStmt 0x120924080 <line:7:1, line:62:1>
    |-DeclStmt 0x10580e240 <line:9:5, col:24>
    | `-VarDecl 0x10580e158 <col:5, col:16> col:10 used cc 'int' cinit
    |   `-ImplicitCastExpr 0x10580e228 <col:15, col:16> 'int' <IntegralCast>
    |     `-ImplicitCastExpr 0x10580e210 <col:15, col:16> 'char' <LValueToRValue>
    |       `-UnaryOperator 0x10580e1f8 <col:15, col:16> 'char' lvalue prefix '*' cannot overflow
    |         `-ImplicitCastExpr 0x10580e1e0 <col:16> 'char *' <LValueToRValue>
    |           `-DeclRefExpr 0x10580e1c0 <col:16> 'char *' lvalue ParmVar 0x10580dda8 'name_end' 'char *'
    |-DeclStmt 0x10580e340 <line:10:5, col:29>
    | `-VarDecl 0x10580e270 <col:5, col:22> col:13 used p 'char *' cinit
    |   `-CXXDependentScopeMemberExpr 0x10580e2f8 <col:17, col:22> '<dependent type>' contains-errors lvalue ->ll_name
    |     `-RecoveryExpr 0x10580e2d8 <col:17> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x105827420 <line:11:5, col:18>
    | `-VarDecl 0x10580e370 <col:5, col:16> col:10 used ret 'int' cinit
    |   `-RecoveryExpr 0x105827400 <col:16> '<dependent type>' contains-errors lvalue
    |-UnaryExprOrTypeTraitExpr 0x105827490 <line:12:5, col:12> 'unsigned long' contains-errors sizeof
    | `-RecoveryExpr 0x105827470 <col:12> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x105827530 <line:13:5, col:16>
    | `-VarDecl 0x1058274c8 <col:5, col:13> col:13 used buf 'char *'
    |-IfStmt 0x1058276d0 <line:16:5, line:17:9>
    | |-BinaryOperator 0x105827668 <line:16:9, col:27> 'int' contains-errors '=='
    | | |-CXXDependentScopeMemberExpr 0x105827600 <col:9, col:15> '<dependent type>' contains-errors lvalue ->ctx_skip
    | | | `-RecoveryExpr 0x1058275e0 <col:9> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x105827648 <col:27> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x1058276c0 <line:17:2, col:9>
    |   `-RecoveryExpr 0x1058276a0 <col:9> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x105828278 <line:20:5, line:40:5>
    | |-BinaryOperator 0x1058277b0 <line:20:9, col:17> 'int' contains-errors '!='
    | | |-ImplicitCastExpr 0x105827798 <col:9, col:12> 'int' contains-errors <IntegralCast>
    | | | `-ImplicitCastExpr 0x105827780 <col:9, col:12> 'char' contains-errors <LValueToRValue>
    | | |   `-ArraySubscriptExpr 0x105827748 <col:9, col:12> 'char' contains-errors lvalue
    | | |     |-ImplicitCastExpr 0x105827730 <col:9> 'char *' contains-errors <LValueToRValue>
    | | |     | `-DeclRefExpr 0x1058276f0 <col:9> 'char *' contains-errors lvalue Var 0x10580e270 'p' 'char *'
    | | |     `-IntegerLiteral 0x105827710 <col:11> 'int' 1
    | | `-CharacterLiteral 0x105827768 <col:17> 'int' 58
    | `-CompoundStmt 0x105828258 <line:21:5, line:40:5>
    |   |-DeclStmt 0x105827b18 <line:22:2, col:61>
    |   | `-VarDecl 0x1058277e8 <col:2, col:60> col:10 used end 'char *' cinit
    |   |   `-CallExpr 0x105827ad8 <col:16, col:60> '<dependent type>' contains-errors
    |   |     |-DeclRefExpr 0x1058279b0 <col:16> 'int ()' Function 0x1058278f8 'find_name_end' 'int ()'
    |   |     |-DeclRefExpr 0x1058279d0 <col:30> 'char *' contains-errors lvalue Var 0x10580e270 'p' 'char *'
    |   |     |-RecoveryExpr 0x105827a78 <col:33> '<dependent type>' contains-errors lvalue
    |   |     |-RecoveryExpr 0x105827a98 <col:39> '<dependent type>' contains-errors lvalue
    |   |     `-RecoveryExpr 0x105827ab8 <col:45> '<dependent type>' contains-errors lvalue
    |   `-IfStmt 0x105828238 <line:24:2, line:39:2>
    |     |-RecoveryExpr 0x105827ce0 <line:24:6, col:46> '_Bool' contains-errors
    |     `-CompoundStmt 0x105828220 <line:25:2, line:39:2>
    |       `-IfStmt 0x1058280c0 <line:28:6, line:32:6>
    |         |-BinaryOperator 0x105827e90 <line:28:10, col:33> 'int' contains-errors '&&'
    |         | |-BinaryOperator 0x105827db8 <col:10, col:18> 'int' contains-errors '!='
    |         | | |-ImplicitCastExpr 0x105827da0 <col:10, col:11> 'int' contains-errors <IntegralCast>
    |         | | | `-ImplicitCastExpr 0x105827d88 <col:10, col:11> 'char' contains-errors <LValueToRValue>
    |         | | |   `-UnaryOperator 0x105827d58 <col:10, col:11> 'char' contains-errors lvalue prefix '*' cannot overflow
    |         | | |     `-ImplicitCastExpr 0x105827d40 <col:11> 'char *' contains-errors <LValueToRValue>
    |         | | |       `-DeclRefExpr 0x105827d20 <col:11> 'char *' contains-errors lvalue Var 0x1058277e8 'end' 'char *'
    |         | | `-CharacterLiteral 0x105827d70 <col:18> 'int' 46
    |         | `-BinaryOperator 0x105827e70 <col:25, col:33> 'int' contains-errors '!='
    |         |   |-ImplicitCastExpr 0x105827e58 <col:25, col:26> 'int' contains-errors <IntegralCast>
    |         |   | `-ImplicitCastExpr 0x105827e40 <col:25, col:26> 'char' contains-errors <LValueToRValue>
    |         |   |   `-UnaryOperator 0x105827e10 <col:25, col:26> 'char' contains-errors lvalue prefix '*' cannot overflow
    |         |   |     `-ImplicitCastExpr 0x105827df8 <col:26> 'char *' contains-errors <LValueToRValue>
    |         |   |       `-DeclRefExpr 0x105827dd8 <col:26> 'char *' contains-errors lvalue Var 0x1058277e8 'end' 'char *'
    |         |   `-CharacterLiteral 0x105827e28 <col:33> 'int' 91
    |         `-CompoundStmt 0x1058280b0 <line:29:6, line:32:6>
    |-IfStmt 0x120924008 <line:46:5, line:60:5> has_else
    | |-RecoveryExpr 0x120923720 <line:46:9, col:16> '_Bool' contains-errors
    | |-NullStmt 0x120924000 <line:47:2>
    | `-CompoundStmt 0x120923fd8 <line:49:5, line:60:5>
    |   |-DeclStmt 0x1209238b0 <line:50:2, col:48>
    |   | `-VarDecl 0x120923778 <col:2, col:8> col:8 used cmd 'char *'
    |   |-CallExpr 0x120923ed8 <line:58:2, col:14> 'int'
    |   | |-ImplicitCastExpr 0x120923ec0 <col:2> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x120923e50 <col:2> 'int ()' Function 0x120923d98 'vim_free' 'int ()'
    |   | `-ImplicitCastExpr 0x120923f00 <col:11> 'char *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x120923e70 <col:11> 'char *' lvalue Var 0x1058274c8 'buf' 'char *'
    |   `-BinaryOperator 0x120923fb8 <line:59:2, col:14> 'char' '='
    |     |-UnaryOperator 0x120923f50 <col:2, col:3> 'char' lvalue prefix '*' cannot overflow
    |     | `-ImplicitCastExpr 0x120923f38 <col:3> 'char *' <LValueToRValue>
    |     |   `-DeclRefExpr 0x120923f18 <col:3> 'char *' lvalue ParmVar 0x10580dda8 'name_end' 'char *'
    |     `-ImplicitCastExpr 0x120923fa0 <col:14> 'char' <IntegralCast>
    |       `-ImplicitCastExpr 0x120923f88 <col:14> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x120923f68 <col:14> 'int' lvalue Var 0x10580e158 'cc' 'int'
    `-ReturnStmt 0x120924070 <line:61:5, col:12>
      `-ImplicitCastExpr 0x120924058 <col:12> 'int' contains-errors <LValueToRValue>
        `-DeclRefExpr 0x120924038 <col:12> 'int' contains-errors lvalue Var 0x10580e370 'ret' 'int'
