`-FunctionDecl 0x15280ddd8  line:1:1 sloppy_parse_line 'int (char **)'
  |-ParmVarDecl 0x15280dd08 <col:19, col:26> col:26 used str 'char **'
  `-CompoundStmt 0x1528268e0 <line:2:1, line:15:1>
    `-IfStmt 0x1528268b0 <line:3:5, line:14:5> has_else
      |-BinaryOperator 0x15280df98 <line:3:9, col:18> 'int' '=='
      | |-ImplicitCastExpr 0x15280df80 <col:9, col:11> 'int' <IntegralCast>
      | | `-ImplicitCastExpr 0x15280df68 <col:9, col:11> 'char' <LValueToRValue>
      | |   `-UnaryOperator 0x15280df38 <col:9, col:11> 'char' lvalue prefix '*' cannot overflow
      | |     `-ImplicitCastExpr 0x15280df20 <col:10, col:11> 'char *' <LValueToRValue>
      | |       `-UnaryOperator 0x15280df08 <col:10, col:11> 'char *' lvalue prefix '*' cannot overflow
      | |         `-ImplicitCastExpr 0x15280def0 <col:11> 'char **' <LValueToRValue>
      | |           `-DeclRefExpr 0x15280ded0 <col:11> 'char **' lvalue ParmVar 0x15280dd08 'str' 'char **'
      | `-CharacterLiteral 0x15280df50 <col:18> 'int' 60
      |-CompoundStmt 0x15280e3d8 <col:23, line:9:5>
      | |-WhileStmt 0x15280e1f8 <line:4:2, line:5:12>
      | | |-BinaryOperator 0x15280e150 <line:4:9, col:27> 'int' '&&'
      | | | |-ImplicitCastExpr 0x15280e138 <col:9, col:11> 'int' <IntegralCast>
      | | | | `-ImplicitCastExpr 0x15280e120 <col:9, col:11> 'char' <LValueToRValue>
      | | | |   `-UnaryOperator 0x15280e020 <col:9, col:11> 'char' lvalue prefix '*' cannot overflow
      | | | |     `-ImplicitCastExpr 0x15280e008 <col:10, col:11> 'char *' <LValueToRValue>
      | | | |       `-UnaryOperator 0x15280dff0 <col:10, col:11> 'char *' lvalue prefix '*' cannot overflow
      | | | |         `-ImplicitCastExpr 0x15280dfd8 <col:11> 'char **' <LValueToRValue>
      | | | |           `-DeclRefExpr 0x15280dfb8 <col:11> 'char **' lvalue ParmVar 0x15280dd08 'str' 'char **'
      | | | `-BinaryOperator 0x15280e100 <col:18, col:27> 'int' '!='
      | | |   |-ImplicitCastExpr 0x15280e0e8 <col:18, col:20> 'int' <IntegralCast>
      | | |   | `-ImplicitCastExpr 0x15280e0d0 <col:18, col:20> 'char' <LValueToRValue>
      | | |   |   `-UnaryOperator 0x15280e0a0 <col:18, col:20> 'char' lvalue prefix '*' cannot overflow
      | | |   |     `-ImplicitCastExpr 0x15280e088 <col:19, col:20> 'char *' <LValueToRValue>
      | | |   |       `-UnaryOperator 0x15280e070 <col:19, col:20> 'char *' lvalue prefix '*' cannot overflow
      | | |   |         `-ImplicitCastExpr 0x15280e058 <col:20> 'char **' <LValueToRValue>
      | | |   |           `-DeclRefExpr 0x15280e038 <col:20> 'char **' lvalue ParmVar 0x15280dd08 'str' 'char **'
      | | |   `-CharacterLiteral 0x15280e0b8 <col:27> 'int' 62
      | | `-UnaryOperator 0x15280e1e0 <line:5:6, col:12> 'char *' postfix '++'
      | |   `-ParenExpr 0x15280e1c0 <col:6, col:11> 'char *' lvalue
      | |     `-UnaryOperator 0x15280e1a8 <col:7, col:8> 'char *' lvalue prefix '*' cannot overflow
      | |       `-ImplicitCastExpr 0x15280e190 <col:8> 'char **' <LValueToRValue>
      | |         `-DeclRefExpr 0x15280e170 <col:8> 'char **' lvalue ParmVar 0x15280dd08 'str' 'char **'
      | |-IfStmt 0x15280e388 <line:6:2, line:7:12>
      | | |-BinaryOperator 0x15280e2e0 <line:6:6, col:15> 'int' '=='
      | | | |-ImplicitCastExpr 0x15280e2c8 <col:6, col:8> 'int' <IntegralCast>
      | | | | `-ImplicitCastExpr 0x15280e2b0 <col:6, col:8> 'char' <LValueToRValue>
      | | | |   `-UnaryOperator 0x15280e280 <col:6, col:8> 'char' lvalue prefix '*' cannot overflow
      | | | |     `-ImplicitCastExpr 0x15280e268 <col:7, col:8> 'char *' <LValueToRValue>
      | | | |       `-UnaryOperator 0x15280e250 <col:7, col:8> 'char *' lvalue prefix '*' cannot overflow
      | | | |         `-ImplicitCastExpr 0x15280e238 <col:8> 'char **' <LValueToRValue>
      | | | |           `-DeclRefExpr 0x15280e218 <col:8> 'char **' lvalue ParmVar 0x15280dd08 'str' 'char **'
      | | | `-CharacterLiteral 0x15280e298 <col:15> 'int' 62
      | | `-UnaryOperator 0x15280e370 <line:7:6, col:12> 'char *' postfix '++'
      | |   `-ParenExpr 0x15280e350 <col:6, col:11> 'char *' lvalue
      | |     `-UnaryOperator 0x15280e338 <col:7, col:8> 'char *' lvalue prefix '*' cannot overflow
      | |       `-ImplicitCastExpr 0x15280e320 <col:8> 'char **' <LValueToRValue>
      | |         `-DeclRefExpr 0x15280e300 <col:8> 'char **' lvalue ParmVar 0x15280dd08 'str' 'char **'
      | `-ReturnStmt 0x15280e3c8 <line:8:2, col:9>
      |   `-IntegerLiteral 0x15280e3a8 <col:9> 'int' 1
      `-CompoundStmt 0x152826890 <line:10:10, line:14:5>
        |-WhileStmt 0x152826840 <line:11:2, line:12:12>
        | |-BinaryOperator 0x152826798 <line:11:9, col:27> 'int' '&&'
        | | |-ImplicitCastExpr 0x152826780 <col:9, col:11> 'int' <IntegralCast>
        | | | `-ImplicitCastExpr 0x152826768 <col:9, col:11> 'char' <LValueToRValue>
        | | |   `-UnaryOperator 0x152826668 <col:9, col:11> 'char' lvalue prefix '*' cannot overflow
        | | |     `-ImplicitCastExpr 0x152826650 <col:10, col:11> 'char *' <LValueToRValue>
        | | |       `-UnaryOperator 0x152826638 <col:10, col:11> 'char *' lvalue prefix '*' cannot overflow
        | | |         `-ImplicitCastExpr 0x152826620 <col:11> 'char **' <LValueToRValue>
        | | |           `-DeclRefExpr 0x152826600 <col:11> 'char **' lvalue ParmVar 0x15280dd08 'str' 'char **'
        | | `-BinaryOperator 0x152826748 <col:18, col:27> 'int' '!='
        | |   |-ImplicitCastExpr 0x152826730 <col:18, col:20> 'int' <IntegralCast>
        | |   | `-ImplicitCastExpr 0x152826718 <col:18, col:20> 'char' <LValueToRValue>
        | |   |   `-UnaryOperator 0x1528266e8 <col:18, col:20> 'char' lvalue prefix '*' cannot overflow
        | |   |     `-ImplicitCastExpr 0x1528266d0 <col:19, col:20> 'char *' <LValueToRValue>
        | |   |       `-UnaryOperator 0x1528266b8 <col:19, col:20> 'char *' lvalue prefix '*' cannot overflow
        | |   |         `-ImplicitCastExpr 0x1528266a0 <col:20> 'char **' <LValueToRValue>
        | |   |           `-DeclRefExpr 0x152826680 <col:20> 'char **' lvalue ParmVar 0x15280dd08 'str' 'char **'
        | |   `-CharacterLiteral 0x152826700 <col:27> 'int' 60
        | `-UnaryOperator 0x152826828 <line:12:6, col:12> 'char *' postfix '++'
        |   `-ParenExpr 0x152826808 <col:6, col:11> 'char *' lvalue
        |     `-UnaryOperator 0x1528267f0 <col:7, col:8> 'char *' lvalue prefix '*' cannot overflow
        |       `-ImplicitCastExpr 0x1528267d8 <col:8> 'char **' <LValueToRValue>
        |         `-DeclRefExpr 0x1528267b8 <col:8> 'char **' lvalue ParmVar 0x15280dd08 'str' 'char **'
        `-ReturnStmt 0x152826880 <line:13:2, col:9>
          `-IntegerLiteral 0x152826860 <col:9> 'int' 0
