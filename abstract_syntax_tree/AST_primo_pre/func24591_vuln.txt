`-FunctionDecl 0x136128318  line:1:12 invalid base64decode_block 'int (unsigned char *, const char *, int)' static
  |-ParmVarDecl 0x136128108 <col:31, col:46> col:46 used target 'unsigned char *'
  |-ParmVarDecl 0x136128188 <col:54, col:66> col:66 used data 'const char *'
  |-ParmVarDecl 0x136128220 <col:72, col:79> col:79 invalid data_size 'int'
  `-CompoundStmt 0x136142730 <line:2:1, line:31:1>
    |-DeclStmt 0x136128600 <line:3:2, col:17>
    | |-VarDecl 0x1361283f0 <col:2, col:6> col:6 used w1 'int'
    | |-VarDecl 0x136128470 <col:2, col:9> col:9 used w2 'int'
    | |-VarDecl 0x1361284f0 <col:2, col:12> col:12 used w3 'int'
    | `-VarDecl 0x136128570 <col:2, col:15> col:15 used w4 'int'
    |-DeclStmt 0x136128698 <line:4:2, col:7>
    | `-VarDecl 0x136128630 <col:2, col:6> col:6 used i 'int'
    |-UnaryExprOrTypeTraitExpr 0x136128708 <line:5:2, col:9> 'unsigned long' contains-errors sizeof
    | `-RecoveryExpr 0x1361286e8 <col:9> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x136141868 <line:7:2, line:9:2>
    | |-BinaryOperator 0x136141800 <line:7:6, col:30> 'int' contains-errors '||'
    | | |-UnaryOperator 0x136128760 <col:6, col:7> 'int' prefix '!' cannot overflow
    | | | `-ImplicitCastExpr 0x136128748 <col:7> 'const char *' <LValueToRValue>
    | | |   `-DeclRefExpr 0x136128728 <col:7> 'const char *' lvalue ParmVar 0x136128188 'data' 'const char *'
    | | `-ParenExpr 0x1361287d8 <col:15, col:30> 'int' contains-errors
    | |   `-BinaryOperator 0x1361287b8 <col:16, col:29> 'int' contains-errors '<='
    | |     |-RecoveryExpr 0x136128778 <col:16> '<dependent type>' contains-errors lvalue
    | |     `-IntegerLiteral 0x136128798 <col:29> 'int' 0
    | `-CompoundStmt 0x136141850 <col:33, line:9:2>
    |   `-ReturnStmt 0x136141840 <line:8:3, col:10>
    |     `-IntegerLiteral 0x136141820 <col:10> 'int' 0
    |-BinaryOperator 0x1361418e8 <line:12:2, col:6> 'int' '='
    | |-DeclRefExpr 0x1361418a8 <col:2> 'int' lvalue Var 0x136128630 'i' 'int'
    | `-IntegerLiteral 0x1361418c8 <col:6> 'int' 0
    |-WhileStmt 0x1361426c8 <line:13:2, line:29:2>
    | |-BinaryOperator 0x1361419c0 <line:13:9, col:23> 'int' contains-errors '<'
    | | |-RecoveryExpr 0x1361419a0 <col:9> '<dependent type>' contains-errors lvalue
    | | `-BinaryOperator 0x136141960 <col:13, col:23> '<dependent type>' contains-errors '-'
    | |   |-RecoveryExpr 0x136141920 <col:13> '<dependent type>' contains-errors lvalue
    | |   `-IntegerLiteral 0x136141940 <col:23> 'int' 3
    | `-CompoundStmt 0x1361426a0 <col:26, line:29:2>
    |   |-IfStmt 0x136141fc0 <line:19:3, line:21:3>
    |   | |-BinaryOperator 0x136141cb8 <line:19:7, col:13> 'int' '>='
    |   | | |-ImplicitCastExpr 0x136141ca0 <col:7> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x136141c60 <col:7> 'int' lvalue Var 0x136128470 'w2' 'int'
    |   | | `-IntegerLiteral 0x136141c80 <col:13> 'int' 0
    |   | `-CompoundStmt 0x136141fa8 <col:16, line:21:3>
    |   |   `-BinaryOperator 0x136141f88 <line:20:4, col:49> 'unsigned char' '='
    |   |     |-ArraySubscriptExpr 0x136141d48 <col:4, col:14> 'unsigned char' lvalue
    |   |     | |-ImplicitCastExpr 0x136141d30 <col:4> 'unsigned char *' <LValueToRValue>
    |   |     | | `-DeclRefExpr 0x136141cd8 <col:4> 'unsigned char *' lvalue ParmVar 0x136128108 'target' 'unsigned char *'
    |   |     | `-UnaryOperator 0x136141d18 <col:11, col:12> 'int' postfix '++'
    |   |     |   `-DeclRefExpr 0x136141cf8 <col:11> 'int' lvalue Var 0x136128630 'i' 'int'
    |   |     `-ImplicitCastExpr 0x136141f70 <col:18, col:49> 'unsigned char' <IntegralCast>
    |   |       `-CStyleCastExpr 0x136141f48 <col:18, col:49> 'char' <IntegralCast>
    |   |         `-ParenExpr 0x136141f28 <col:24, col:49> 'int'
    |   |           `-BinaryOperator 0x136141ed8 <col:25, col:46> 'int' '&'
    |   |             |-ParenExpr 0x136141e98 <col:25, col:42> 'int'
    |   |             | `-BinaryOperator 0x136141e78 <col:26, col:41> 'int' '+'
    |   |             |   |-BinaryOperator 0x136141dc0 <col:26, col:29> 'int' '*'
    |   |             |   | |-ImplicitCastExpr 0x136141da8 <col:26> 'int' <LValueToRValue>
    |   |             |   | | `-DeclRefExpr 0x136141d68 <col:26> 'int' lvalue Var 0x1361283f0 'w1' 'int'
    |   |             |   | `-IntegerLiteral 0x136141d88 <col:29> 'int' 4
    |   |             |   `-ParenExpr 0x136141e58 <col:33, col:41> 'int'
    |   |             |     `-BinaryOperator 0x136141e38 <col:34, col:40> 'int' '>>'
    |   |             |       |-ImplicitCastExpr 0x136141e20 <col:34> 'int' <LValueToRValue>
    |   |             |       | `-DeclRefExpr 0x136141de0 <col:34> 'int' lvalue Var 0x136128470 'w2' 'int'
    |   |             |       `-IntegerLiteral 0x136141e00 <col:40> 'int' 4
    |   |             `-IntegerLiteral 0x136141eb8 <col:46> 'int' 255
    |   |-IfStmt 0x136142340 <line:22:3, line:24:3>
    |   | |-BinaryOperator 0x136142038 <line:22:7, col:13> 'int' '>='
    |   | | |-ImplicitCastExpr 0x136142020 <col:7> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x136141fe0 <col:7> 'int' lvalue Var 0x1361284f0 'w3' 'int'
    |   | | `-IntegerLiteral 0x136142000 <col:13> 'int' 0
    |   | `-CompoundStmt 0x136142328 <col:16, line:24:3>
    |   |   `-BinaryOperator 0x136142308 <line:23:4, col:50> 'unsigned char' '='
    |   |     |-ArraySubscriptExpr 0x1361420c8 <col:4, col:14> 'unsigned char' lvalue
    |   |     | |-ImplicitCastExpr 0x1361420b0 <col:4> 'unsigned char *' <LValueToRValue>
    |   |     | | `-DeclRefExpr 0x136142058 <col:4> 'unsigned char *' lvalue ParmVar 0x136128108 'target' 'unsigned char *'
    |   |     | `-UnaryOperator 0x136142098 <col:11, col:12> 'int' postfix '++'
    |   |     |   `-DeclRefExpr 0x136142078 <col:11> 'int' lvalue Var 0x136128630 'i' 'int'
    |   |     `-ImplicitCastExpr 0x1361422f0 <col:18, col:50> 'unsigned char' <IntegralCast>
    |   |       `-CStyleCastExpr 0x1361422c8 <col:18, col:50> 'char' <IntegralCast>
    |   |         `-ParenExpr 0x1361422a8 <col:24, col:50> 'int'
    |   |           `-BinaryOperator 0x136142258 <col:25, col:47> 'int' '&'
    |   |             |-ParenExpr 0x136142218 <col:25, col:43> 'int'
    |   |             | `-BinaryOperator 0x1361421f8 <col:26, col:42> 'int' '+'
    |   |             |   |-BinaryOperator 0x136142140 <col:26, col:29> 'int' '*'
    |   |             |   | |-ImplicitCastExpr 0x136142128 <col:26> 'int' <LValueToRValue>
    |   |             |   | | `-DeclRefExpr 0x1361420e8 <col:26> 'int' lvalue Var 0x136128470 'w2' 'int'
    |   |             |   | `-IntegerLiteral 0x136142108 <col:29> 'int' 16
    |   |             |   `-ParenExpr 0x1361421d8 <col:34, col:42> 'int'
    |   |             |     `-BinaryOperator 0x1361421b8 <col:35, col:41> 'int' '>>'
    |   |             |       |-ImplicitCastExpr 0x1361421a0 <col:35> 'int' <LValueToRValue>
    |   |             |       | `-DeclRefExpr 0x136142160 <col:35> 'int' lvalue Var 0x1361284f0 'w3' 'int'
    |   |             |       `-IntegerLiteral 0x136142180 <col:41> 'int' 2
    |   |             `-IntegerLiteral 0x136142238 <col:47> 'int' 255
    |   `-IfStmt 0x136142660 <line:25:3, line:27:3>
    |     |-BinaryOperator 0x1361423b8 <line:25:7, col:13> 'int' '>='
    |     | |-ImplicitCastExpr 0x1361423a0 <col:7> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x136142360 <col:7> 'int' lvalue Var 0x136128570 'w4' 'int'
    |     | `-IntegerLiteral 0x136142380 <col:13> 'int' 0
    |     `-CompoundStmt 0x136142648 <col:16, line:27:3>
    |       `-BinaryOperator 0x136142628 <line:26:4, col:43> 'unsigned char' '='
    |         |-ArraySubscriptExpr 0x136142448 <col:4, col:14> 'unsigned char' lvalue
    |         | |-ImplicitCastExpr 0x136142430 <col:4> 'unsigned char *' <LValueToRValue>
    |         | | `-DeclRefExpr 0x1361423d8 <col:4> 'unsigned char *' lvalue ParmVar 0x136128108 'target' 'unsigned char *'
    |         | `-UnaryOperator 0x136142418 <col:11, col:12> 'int' postfix '++'
    |         |   `-DeclRefExpr 0x1361423f8 <col:11> 'int' lvalue Var 0x136128630 'i' 'int'
    |         `-ImplicitCastExpr 0x136142610 <col:18, col:43> 'unsigned char' <IntegralCast>
    |           `-CStyleCastExpr 0x1361425e8 <col:18, col:43> 'char' <IntegralCast>
    |             `-ParenExpr 0x1361425c8 <col:24, col:43> 'int'
    |               `-BinaryOperator 0x136142578 <col:25, col:40> 'int' '&'
    |                 |-ParenExpr 0x136142538 <col:25, col:36> 'int'
    |                 | `-BinaryOperator 0x136142518 <col:26, col:34> 'int' '+'
    |                 |   |-BinaryOperator 0x1361424c0 <col:26, col:29> 'int' '*'
    |                 |   | |-ImplicitCastExpr 0x1361424a8 <col:26> 'int' <LValueToRValue>
    |                 |   | | `-DeclRefExpr 0x136142468 <col:26> 'int' lvalue Var 0x1361284f0 'w3' 'int'
    |                 |   | `-IntegerLiteral 0x136142488 <col:29> 'int' 64
    |                 |   `-ImplicitCastExpr 0x136142500 <col:34> 'int' <LValueToRValue>
    |                 |     `-DeclRefExpr 0x1361424e0 <col:34> 'int' lvalue Var 0x136128570 'w4' 'int'
    |                 `-IntegerLiteral 0x136142558 <col:40> 'int' 255
    `-ReturnStmt 0x136142720 <line:30:2, col:9>
      `-ImplicitCastExpr 0x136142708 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x1361426e8 <col:9> 'int' lvalue Var 0x136128630 'i' 'int'
