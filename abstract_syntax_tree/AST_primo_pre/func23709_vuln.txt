`-FunctionDecl 0x147128318  line:1:5 invalid jas_stream_pad 'int (int *, int, int)'
  |-ParmVarDecl 0x147128128 <col:20, col:34> col:34 invalid stream 'int *'
  |-ParmVarDecl 0x1471281a8 <col:42, col:46> col:46 used n 'int'
  |-ParmVarDecl 0x147128228 <col:49, col:53> col:53 used c 'int'
  `-CompoundStmt 0x1471419d0 <line:2:1, line:10:1>
    |-DeclStmt 0x147128458 <line:3:2, col:7>
    | `-VarDecl 0x1471283f0 <col:2, col:6> col:6 used m 'int'
    |-BinaryOperator 0x1471284c8 <line:4:2, col:6> 'int' '='
    | |-DeclRefExpr 0x147128470 <col:2> 'int' lvalue Var 0x1471283f0 'm' 'int'
    | `-ImplicitCastExpr 0x1471284b0 <col:6> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x147128490 <col:6> 'int' lvalue ParmVar 0x1471281a8 'n' 'int'
    |-ForStmt 0x147141950 <line:5:2, line:8:2>
    | |-BinaryOperator 0x147128540 <line:5:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x1471284e8 <col:7> 'int' lvalue Var 0x1471283f0 'm' 'int'
    | | `-ImplicitCastExpr 0x147128528 <col:11> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x147128508 <col:11> 'int' lvalue ParmVar 0x1471281a8 'n' 'int'
    | |-<<<NULL>>>
    | |-BinaryOperator 0x1471285b8 <col:14, col:18> 'int' '>'
    | | |-ImplicitCastExpr 0x1471285a0 <col:14> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x147128560 <col:14> 'int' lvalue Var 0x1471283f0 'm' 'int'
    | | `-IntegerLiteral 0x147128580 <col:18> 'int' 0
    | |-UnaryOperator 0x1471285f8 <col:21, col:23> 'int' prefix '--'
    | | `-DeclRefExpr 0x1471285d8 <col:23> 'int' lvalue Var 0x1471283f0 'm' 'int'
    | `-CompoundStmt 0x147141938 <col:26, line:8:2>
    |   `-IfStmt 0x147141918 <line:6:3, line:7:15>
    |     |-BinaryOperator 0x147141858 <line:6:7, col:37> 'int' contains-errors '=='
    |     | |-CallExpr 0x1471287d0 <col:7, col:32> '<dependent type>' contains-errors
    |     | | |-DeclRefExpr 0x147128770 <col:7> 'int ()' Function 0x1471286b8 'jas_stream_putc' 'int ()'
    |     | | |-RecoveryExpr 0x147128790 <col:23> '<dependent type>' contains-errors lvalue
    |     | | `-DeclRefExpr 0x1471287b0 <col:31> 'int' lvalue ParmVar 0x147128228 'c' 'int'
    |     | `-RecoveryExpr 0x147141838 <col:37> '<dependent type>' contains-errors lvalue
    |     `-ReturnStmt 0x147141908 <line:7:4, col:15>
    |       `-BinaryOperator 0x1471418e8 <col:11, col:15> 'int' '-'
    |         |-ImplicitCastExpr 0x1471418b8 <col:11> 'int' <LValueToRValue>
    |         | `-DeclRefExpr 0x147141878 <col:11> 'int' lvalue ParmVar 0x1471281a8 'n' 'int'
    |         `-ImplicitCastExpr 0x1471418d0 <col:15> 'int' <LValueToRValue>
    |           `-DeclRefExpr 0x147141898 <col:15> 'int' lvalue Var 0x1471283f0 'm' 'int'
    `-ReturnStmt 0x1471419c0 <line:9:2, col:9>
      `-ImplicitCastExpr 0x1471419a8 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x147141988 <col:9> 'int' lvalue ParmVar 0x1471281a8 'n' 'int'
