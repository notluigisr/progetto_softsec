`-FunctionDecl 0x14000ddc8  line:1:1 invalid evutil_socket_geterror 'int (int)'
  |-ParmVarDecl 0x14000dcf0 <col:24, col:40> col:40 invalid sock 'int'
  `-CompoundStmt 0x140028eb0 <line:2:1, line:13:1>
    |-DeclStmt 0x14000e008 <line:3:2, col:38>
    | |-VarDecl 0x14000de90 <col:2, col:6> col:6 used optval 'int'
    | `-VarDecl 0x14000df10 <col:2, col:37> col:14 used optvallen 'int' cinit
    |   `-ImplicitCastExpr 0x14000dfd8 <col:24, col:37> 'int' <IntegralCast>
    |     `-UnaryExprOrTypeTraitExpr 0x14000dfb8 <col:24, col:37> 'unsigned long' sizeof
    |       `-ParenExpr 0x14000df98 <col:30, col:37> 'int' lvalue
    |         `-DeclRefExpr 0x14000df78 <col:31> 'int' lvalue Var 0x14000de90 'optval' 'int' non_odr_use_unevaluated
    |-DeclStmt 0x14000e288 <line:4:2, col:29>
    | `-VarDecl 0x14000e038 <col:2, col:28> col:6 used err 'int' cinit
    |   `-CallExpr 0x14000e268 <col:12, col:28> 'int'
    |     `-ImplicitCastExpr 0x14000e250 <col:12> 'int (*)()' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x14000e200 <col:12> 'int ()' Function 0x14000e148 'WSAGetLastError' 'int ()'
    |-IfStmt 0x140028e48 <line:5:2, line:11:2>
    | |-BinaryOperator 0x14000e3b8 <line:5:6, col:39> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x14000e398 <col:6, col:13> 'int' contains-errors '=='
    | | | |-DeclRefExpr 0x14000e2a0 <col:6> 'int' lvalue Var 0x14000e038 'err' 'int'
    | | | `-RecoveryExpr 0x14000e378 <col:13> '<dependent type>' contains-errors lvalue
    | | `-BinaryOperator 0x14000e338 <col:31, col:39> 'int' contains-errors '>='
    | |   |-RecoveryExpr 0x14000e2f8 <col:31> '<dependent type>' contains-errors lvalue
    | |   `-IntegerLiteral 0x14000e318 <col:39> 'int' 0
    | `-CompoundStmt 0x140028e28 <col:42, line:11:2>
    |   |-IfStmt 0x140028d68 <line:6:3, line:8:11>
    |   | |-CallExpr 0x140028cd8 <line:6:7, line:7:19> '<dependent type>' contains-errors
    |   | | |-DeclRefExpr 0x140028ab8 <line:6:7> 'int ()' Function 0x140028a00 'getsockopt' 'int ()'
    |   | | |-RecoveryExpr 0x140028ad8 <col:18> '<dependent type>' contains-errors lvalue
    |   | | |-RecoveryExpr 0x140028c58 <col:24> '<dependent type>' contains-errors lvalue
    |   | | |-RecoveryExpr 0x140028c78 <col:36> '<dependent type>' contains-errors lvalue
    |   | | |-CStyleCastExpr 0x140028cb0 <col:46, col:54> 'void *' <BitCast>
    |   | | | `-UnaryOperator 0x140028b80 <col:53, col:54> 'int *' prefix '&' cannot overflow
    |   | | |   `-DeclRefExpr 0x140028b28 <col:54> 'int' lvalue Var 0x14000de90 'optval' 'int'
    |   | | `-UnaryOperator 0x140028bf8 <line:7:9, col:10> 'int *' prefix '&' cannot overflow
    |   | |   `-DeclRefExpr 0x140028bd8 <col:10> 'int' lvalue Var 0x14000df10 'optvallen' 'int'
    |   | `-ReturnStmt 0x140028d58 <line:8:4, col:11>
    |   |   `-ImplicitCastExpr 0x140028d40 <col:11> 'int' <LValueToRValue>
    |   |     `-DeclRefExpr 0x140028d20 <col:11> 'int' lvalue Var 0x14000e038 'err' 'int'
    |   `-IfStmt 0x140028e08 <line:9:3, line:10:11>
    |     |-ImplicitCastExpr 0x140028da8 <line:9:7> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x140028d88 <col:7> 'int' lvalue Var 0x14000de90 'optval' 'int'
    |     `-ReturnStmt 0x140028df8 <line:10:4, col:11>
    |       `-ImplicitCastExpr 0x140028de0 <col:11> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x140028dc0 <col:11> 'int' lvalue Var 0x14000de90 'optval' 'int'
    `-ReturnStmt 0x140028ea0 <line:12:2, col:9>
      `-ImplicitCastExpr 0x140028e88 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x140028e68 <col:9> 'int' lvalue Var 0x14000e038 'err' 'int'
