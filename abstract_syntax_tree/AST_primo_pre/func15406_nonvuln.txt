`-FunctionDecl 0x1591281a8  line:1:1 ignorableWhitespaceDebug 'int (void *)'
  |-ParmVarDecl 0x1591280d8 <col:26, col:32> col:32 ctx 'void *'
  `-CompoundStmt 0x159140cc8 <line:2:1, line:13:1>
    |-DeclStmt 0x1591283a8 <line:3:5, col:17>
    | `-VarDecl 0x159128340 <col:5, col:16> col:10 used out 'char[40]'
    |-DeclStmt 0x159128440 <line:4:5, col:10>
    | `-VarDecl 0x1591283d8 <col:5, col:9> col:9 used i 'int'
    |-IfStmt 0x1591284b8 <line:7:5, line:8:2>
    | |-RecoveryExpr 0x159128488 <line:7:9> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x1591284a8 <line:8:2>
    |-BinaryOperator 0x159140a00 <line:11:5, col:14> 'char' '='
    | |-ArraySubscriptExpr 0x159128798 <col:5, col:10> 'char' lvalue
    | | |-ImplicitCastExpr 0x159128768 <col:5> 'char *' <ArrayToPointerDecay>
    | | | `-DeclRefExpr 0x159128728 <col:5> 'char[40]' lvalue Var 0x159128340 'out' 'char[40]'
    | | `-ImplicitCastExpr 0x159128780 <col:9> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x159128748 <col:9> 'int' lvalue Var 0x1591283d8 'i' 'int'
    | `-ImplicitCastExpr 0x1591287d8 <col:14> 'char' <IntegralCast>
    |   `-IntegerLiteral 0x1591287b8 <col:14> 'int' 0
    `-CallExpr 0x159140c88 <line:12:5, col:36> '<dependent type>' contains-errors
      |-DeclRefExpr 0x159140b30 <col:5> 'int ()' Function 0x159140a78 'fprintf' 'int ()'
      |-RecoveryExpr 0x159140c48 <col:13> '<dependent type>' contains-errors lvalue
      |-StringLiteral 0x159140bb0 <col:21> 'char[4]' lvalue "STR"
      |-DeclRefExpr 0x159140bd0 <col:28> 'char[40]' lvalue Var 0x159128340 'out' 'char[40]'
      `-RecoveryExpr 0x159140c68 <col:33> '<dependent type>' contains-errors lvalue
