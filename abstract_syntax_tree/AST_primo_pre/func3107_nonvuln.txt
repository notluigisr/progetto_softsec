`-FunctionDecl 0x11e80ddf8  line:1:1 au_get_grouparg 'int (char **)'
  |-ParmVarDecl 0x11e80dd28 <col:17, col:26> col:26 used argp 'char **'
  `-CompoundStmt 0x11e82b080 <line:2:1, line:23:1>
    |-DeclStmt 0x11e80df70 <line:3:5, col:23>
    | `-VarDecl 0x11e80df08 <col:5, col:13> col:13 used group_name 'char *'
    |-DeclStmt 0x11e80e008 <line:4:5, col:14>
    | `-VarDecl 0x11e80dfa0 <col:5, col:13> col:13 used p 'char *'
    |-DeclStmt 0x11e80e108 <line:5:5, col:24>
    | `-VarDecl 0x11e80e038 <col:5, col:20> col:13 used arg 'char *' cinit
    |   `-ImplicitCastExpr 0x11e80e0f0 <col:19, col:20> 'char *' <LValueToRValue>
    |     `-UnaryOperator 0x11e80e0d8 <col:19, col:20> 'char *' lvalue prefix '*' cannot overflow
    |       `-ImplicitCastExpr 0x11e80e0c0 <col:20> 'char **' <LValueToRValue>
    |         `-DeclRefExpr 0x11e80e0a0 <col:20> 'char **' lvalue ParmVar 0x11e80dd28 'argp' 'char **'
    |-DeclStmt 0x11e80e1d8 <line:6:5, col:29>
    | `-VarDecl 0x11e80e138 <col:5, col:18> col:10 used group 'int' cinit
    |   `-RecoveryExpr 0x11e80e1b8 <col:18> '<dependent type>' contains-errors lvalue
    |-ForStmt 0x11e827c70 <line:8:5, line:9:2>
    | |-BinaryOperator 0x11e80e248 <line:8:10, col:14> 'char *' '='
    | | |-DeclRefExpr 0x11e80e1f0 <col:10> 'char *' lvalue Var 0x11e80dfa0 'p' 'char *'
    | | `-ImplicitCastExpr 0x11e80e230 <col:14> 'char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x11e80e210 <col:14> 'char *' lvalue Var 0x11e80e038 'arg' 'char *'
    | |-<<<NULL>>>
    | |-BinaryOperator 0x11e827c10 <col:19, col:51> 'int' '&&'
    | | |-BinaryOperator 0x11e827b38 <col:19, col:40> 'int' '&&'
    | | | |-ImplicitCastExpr 0x11e827b20 <col:19, col:20> 'int' <IntegralCast>
    | | | | `-ImplicitCastExpr 0x11e827b08 <col:19, col:20> 'char' <LValueToRValue>
    | | | |   `-UnaryOperator 0x11e80e2a0 <col:19, col:20> 'char' lvalue prefix '*' cannot overflow
    | | | |     `-ImplicitCastExpr 0x11e80e288 <col:20> 'char *' <LValueToRValue>
    | | | |       `-DeclRefExpr 0x11e80e268 <col:20> 'char *' lvalue Var 0x11e80dfa0 'p' 'char *'
    | | | `-UnaryOperator 0x11e827af0 <col:25, col:40> 'int' prefix '!' cannot overflow
    | | |   `-CallExpr 0x11e827a98 <col:26, col:40> 'int'
    | | |     |-ImplicitCastExpr 0x11e827a80 <col:26> 'int (*)()' <FunctionToPointerDecay>
    | | |     | `-DeclRefExpr 0x11e80e3d0 <col:26> 'int ()' Function 0x11e80e318 'VIM_ISWHITE' 'int ()'
    | | |     `-ImplicitCastExpr 0x11e827ad8 <col:38, col:39> 'int' <IntegralCast>
    | | |       `-ImplicitCastExpr 0x11e827ac0 <col:38, col:39> 'char' <LValueToRValue>
    | | |         `-UnaryOperator 0x11e827a38 <col:38, col:39> 'char' lvalue prefix '*' cannot overflow
    | | |           `-ImplicitCastExpr 0x11e827a20 <col:39> 'char *' <LValueToRValue>
    | | |             `-DeclRefExpr 0x11e827a00 <col:39> 'char *' lvalue Var 0x11e80dfa0 'p' 'char *'
    | | `-BinaryOperator 0x11e827bf0 <col:45, col:51> 'int' '!='
    | |   |-ImplicitCastExpr 0x11e827bd8 <col:45, col:46> 'int' <IntegralCast>
    | |   | `-ImplicitCastExpr 0x11e827bc0 <col:45, col:46> 'char' <LValueToRValue>
    | |   |   `-UnaryOperator 0x11e827b90 <col:45, col:46> 'char' lvalue prefix '*' cannot overflow
    | |   |     `-ImplicitCastExpr 0x11e827b78 <col:46> 'char *' <LValueToRValue>
    | |   |       `-DeclRefExpr 0x11e827b58 <col:46> 'char *' lvalue Var 0x11e80dfa0 'p' 'char *'
    | |   `-CharacterLiteral 0x11e827ba8 <col:51> 'int' 124
    | |-UnaryOperator 0x11e827c50 <col:56, col:58> 'char *' prefix '++'
    | | `-DeclRefExpr 0x11e827c30 <col:58> 'char *' lvalue Var 0x11e80dfa0 'p' 'char *'
    | `-NullStmt 0x11e827c68 <line:9:2>
    |-IfStmt 0x11e82b018 <line:10:5, line:21:5>
    | |-BinaryOperator 0x11e827d18 <line:10:9, col:13> 'int' '>'
    | | |-ImplicitCastExpr 0x11e827ce8 <col:9> 'char *' <LValueToRValue>
    | | | `-DeclRefExpr 0x11e827ca8 <col:9> 'char *' lvalue Var 0x11e80dfa0 'p' 'char *'
    | | `-ImplicitCastExpr 0x11e827d00 <col:13> 'char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x11e827cc8 <col:13> 'char *' lvalue Var 0x11e80e038 'arg' 'char *'
    | `-CompoundStmt 0x11e82afe0 <line:11:5, line:21:5>
    |   |-BinaryOperator 0x11e828420 <line:12:2, col:47> 'char *' '='
    |   | |-DeclRefExpr 0x11e827d38 <col:2> 'char *' lvalue Var 0x11e80df08 'group_name' 'char *'
    |   | `-ImplicitCastExpr 0x11e827fe8 <col:15, col:47> 'char *' <IntegralToPointer>
    |   |   `-CallExpr 0x11e827fa0 <col:15, col:47> 'int'
    |   |     |-ImplicitCastExpr 0x11e827f88 <col:15> 'int (*)()' <FunctionToPointerDecay>
    |   |     | `-DeclRefExpr 0x11e827e38 <col:15> 'int ()' Function 0x11e827d80 'vim_strnsave' 'int ()'
    |   |     |-ImplicitCastExpr 0x11e827fd0 <col:28> 'char *' <LValueToRValue>
    |   |     | `-DeclRefExpr 0x11e827e58 <col:28> 'char *' lvalue Var 0x11e80e038 'arg' 'char *'
    |   |     `-CStyleCastExpr 0x11e827f60 <col:33, col:46> 'int' <IntegralCast>
    |   |       `-ParenExpr 0x11e827f40 <col:38, col:46> 'long'
    |   |         `-BinaryOperator 0x11e827ee8 <col:39, col:43> 'long' '-'
    |   |           |-ImplicitCastExpr 0x11e827eb8 <col:39> 'char *' <LValueToRValue>
    |   |           | `-DeclRefExpr 0x11e827e78 <col:39> 'char *' lvalue Var 0x11e80dfa0 'p' 'char *'
    |   |           `-ImplicitCastExpr 0x11e827ed0 <col:43> 'char *' <LValueToRValue>
    |   |             `-DeclRefExpr 0x11e827e98 <col:43> 'char *' lvalue Var 0x11e80e038 'arg' 'char *'
    |   |-IfStmt 0x11e828520 <line:13:2, line:14:13>
    |   | |-BinaryOperator 0x11e8284b8 <line:13:6, col:20> 'int' contains-errors '=='
    |   | | |-DeclRefExpr 0x11e828440 <col:6> 'char *' lvalue Var 0x11e80df08 'group_name' 'char *'
    |   | | `-RecoveryExpr 0x11e828498 <col:20> '<dependent type>' contains-errors lvalue
    |   | `-ReturnStmt 0x11e828510 <line:14:6, col:13>
    |   |   `-RecoveryExpr 0x11e8284f0 <col:13> '<dependent type>' contains-errors lvalue
    |   |-BinaryOperator 0x11e8286d8 <line:15:2, col:34> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x11e828540 <col:2> 'int' contains-errors lvalue Var 0x11e80e138 'group' 'int'
    |   | `-CallExpr 0x11e828698 <col:10, col:34> 'int'
    |   |   |-ImplicitCastExpr 0x11e828680 <col:10> 'int (*)()' <FunctionToPointerDecay>
    |   |   | `-DeclRefExpr 0x11e828640 <col:10> 'int ()' Function 0x11e828588 'au_find_group' 'int ()'
    |   |   `-ImplicitCastExpr 0x11e8286c0 <col:24> 'char *' <LValueToRValue>
    |   |     `-DeclRefExpr 0x11e828660 <col:24> 'char *' lvalue Var 0x11e80df08 'group_name' 'char *'
    |   |-IfStmt 0x11e82ae38 <line:16:2, line:19:25> has_else
    |   | |-BinaryOperator 0x11e828770 <line:16:6, col:15> 'int' contains-errors '=='
    |   | | |-DeclRefExpr 0x11e8286f8 <col:6> 'int' contains-errors lvalue Var 0x11e80e138 'group' 'int'
    |   | | `-RecoveryExpr 0x11e828750 <col:15> '<dependent type>' contains-errors lvalue
    |   | |-BinaryOperator 0x11e828808 <line:17:6, col:14> 'int' contains-errors '='
    |   | | |-DeclRefExpr 0x11e828790 <col:6> 'int' contains-errors lvalue Var 0x11e80e138 'group' 'int'
    |   | | `-RecoveryExpr 0x11e8287e8 <col:14> '<dependent type>' contains-errors lvalue
    |   | `-BinaryOperator 0x11e82ae18 <line:19:6, col:25> 'char *' '='
    |   |   |-UnaryOperator 0x11e828860 <col:6, col:7> 'char *' lvalue prefix '*' cannot overflow
    |   |   | `-ImplicitCastExpr 0x11e828848 <col:7> 'char **' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x11e828828 <col:7> 'char **' lvalue ParmVar 0x11e80dd28 'argp' 'char **'
    |   |   `-ImplicitCastExpr 0x11e82ae00 <col:14, col:25> 'char *' <IntegralToPointer>
    |   |     `-CallExpr 0x11e8289b0 <col:14, col:25> 'int'
    |   |       |-ImplicitCastExpr 0x11e828998 <col:14> 'int (*)()' <FunctionToPointerDecay>
    |   |       | `-DeclRefExpr 0x11e828958 <col:14> 'int ()' Function 0x11e8288a0 'skipwhite' 'int ()'
    |   |       `-ImplicitCastExpr 0x11e8289d8 <col:24> 'char *' <LValueToRValue>
    |   |         `-DeclRefExpr 0x11e828978 <col:24> 'char *' lvalue Var 0x11e80dfa0 'p' 'char *'
    |   `-CallExpr 0x11e82afa0 <line:20:2, col:21> 'int'
    |     |-ImplicitCastExpr 0x11e82af88 <col:2> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x11e82af48 <col:2> 'int ()' Function 0x11e82ae90 'vim_free' 'int ()'
    |     `-ImplicitCastExpr 0x11e82afc8 <col:11> 'char *' <LValueToRValue>
    |       `-DeclRefExpr 0x11e82af68 <col:11> 'char *' lvalue Var 0x11e80df08 'group_name' 'char *'
    `-ReturnStmt 0x11e82b070 <line:22:5, col:12>
      `-ImplicitCastExpr 0x11e82b058 <col:12> 'int' contains-errors <LValueToRValue>
        `-DeclRefExpr 0x11e82b038 <col:12> 'int' contains-errors lvalue Var 0x11e80e138 'group' 'int'
