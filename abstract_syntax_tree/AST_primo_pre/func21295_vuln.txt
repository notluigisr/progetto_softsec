`-FunctionDecl 0x14480de88  line:1:1 invalid hb_set_symmetric_difference 'int (int *, const int *)'
  |-ParmVarDecl 0x14480dd28 <col:30, col:46> col:46 referenced invalid set 'int *'
  |-ParmVarDecl 0x14480dda8 <line:2:9, col:25> col:25 invalid other 'const int *'
  `-CompoundStmt 0x14480e368 <line:3:1, line:8:1>
    |-IfStmt 0x14480e240 <line:4:3, line:5:5>
    | |-CallExpr 0x14480e208 <line:4:7, col:45> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x14480e0a0 <col:7> 'int ()' Function 0x14480dfe8 'unlikely' 'int ()'
    | | `-CallExpr 0x14480e1e0 <col:17, col:44> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x14480e1a0 <col:17> 'int ()' Function 0x14480e0e8 'hb_object_is_immutable' 'int ()'
    | |   `-RecoveryExpr 0x14480e1c0 <col:41> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x14480e230 <line:5:5>
    `-CallExpr 0x14480e340 <line:7:3, col:36> '<dependent type>' contains-errors
      |-CXXDependentScopeMemberExpr 0x14480e2a8 <col:3, col:8> '<dependent type>' contains-errors lvalue ->symmetric_difference
      | `-RecoveryExpr 0x14480e280 <col:3> '<dependent type>' contains-errors lvalue
      |   `-DeclRefExpr 0x14480e260 <col:3> 'int *' lvalue ParmVar 0x14480dd28 'set' 'int *'
      `-UnaryOperator 0x14480e328 <col:30, col:31> '<dependent type>' contains-errors prefix '*' cannot overflow
        `-ImplicitCastExpr 0x14480e310 <col:31> '<dependent type>' contains-errors <LValueToRValue>
          `-RecoveryExpr 0x14480e2f0 <col:31> '<dependent type>' contains-errors lvalue
