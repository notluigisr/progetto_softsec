`-FunctionDecl 0x12800df18  line:1:1 invalid Map1to1 'int (int *, int *, int *)'
  |-ParmVarDecl 0x12800dd28 <col:9, col:23> col:23 invalid src 'int *'
  |-ParmVarDecl 0x12800dda8 <col:28, col:42> col:42 invalid dst 'int *'
  |-ParmVarDecl 0x12800de28 <col:47, col:52> col:52 used identical 'int *'
  `-CompoundStmt 0x11e015740 <line:2:1, line:31:1>
    |-DeclStmt 0x12800e070 <line:4:5, col:10>
    | `-VarDecl 0x12800e008 <col:5, col:9> col:9 used i 'int'
    |-IfStmt 0x11e014cf0 <line:6:5, line:19:5>
    | |-ImplicitCastExpr 0x12800e0a8 <line:6:9> 'int *' <LValueToRValue>
    | | `-DeclRefExpr 0x12800e088 <col:9> 'int *' lvalue ParmVar 0x12800de28 'identical' 'int *'
    | `-CompoundStmt 0x11e014cd0 <col:20, line:19:5>
    |   |-IfStmt 0x11e014c20 <line:7:9, line:17:9>
    |   | |-BinaryOperator 0x12800e190 <line:7:13, col:34> 'int' contains-errors '<='
    |   | | |-CXXDependentScopeMemberExpr 0x12800e0e0 <col:13, col:18> '<dependent type>' contains-errors lvalue ->ncolors
    |   | | | `-RecoveryExpr 0x12800e0c0 <col:13> '<dependent type>' contains-errors lvalue
    |   | | `-CXXDependentScopeMemberExpr 0x12800e148 <col:29, col:34> '<dependent type>' contains-errors lvalue ->ncolors
    |   | |   `-RecoveryExpr 0x12800e128 <col:29> '<dependent type>' contains-errors lvalue
    |   | `-CompoundStmt 0x11e014c08 <col:43, line:17:9>
    |   |   `-IfStmt 0x11e014be8 <line:9:13, line:16:13>
    |   |     |-RecoveryExpr 0x11e014b08 <line:9:17, line:13:57> '_Bool' contains-errors
    |   |     `-CompoundStmt 0x11e014bd0 <col:60, line:16:13>
    |   |       `-BinaryOperator 0x11e014b98 <line:14:17, col:30> 'int' '='
    |   |         |-UnaryOperator 0x11e014b60 <col:17, col:18> 'int' lvalue prefix '*' cannot overflow
    |   |         | `-ImplicitCastExpr 0x11e014b48 <col:18> 'int *' <LValueToRValue>
    |   |         |   `-DeclRefExpr 0x11e014b28 <col:18> 'int *' lvalue ParmVar 0x12800de28 'identical' 'int *'
    |   |         `-IntegerLiteral 0x11e014b78 <col:30> 'int' 1
    |   `-BinaryOperator 0x11e014cb0 <line:18:9, col:22> 'int' '='
    |     |-UnaryOperator 0x11e014c78 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
    |     | `-ImplicitCastExpr 0x11e014c60 <col:10> 'int *' <LValueToRValue>
    |     |   `-DeclRefExpr 0x11e014c40 <col:10> 'int *' lvalue ParmVar 0x12800de28 'identical' 'int *'
    |     `-IntegerLiteral 0x11e014c90 <col:22> 'int' 0
    |-IfStmt 0x11e014f78 <line:21:5, line:24:5>
    | |-BinaryOperator 0x11e014db8 <line:21:9, col:16> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x11e014d78 <col:9> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x11e014d98 <col:16> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x11e014f60 <col:22, line:24:5>
    |   `-CallExpr 0x11e014f28 <line:22:9, col:25> 'int'
    |     `-ImplicitCastExpr 0x11e014f10 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x11e014eb8 <col:9> 'int ()' Function 0x11e014e00 'SDL_OutOfMemory' 'int ()'
    `-ForStmt 0x11e0156f0 <line:25:5, line:29:5>
      |-BinaryOperator 0x11e014fd8 <line:25:10, col:14> 'int' '='
      | |-DeclRefExpr 0x11e014f98 <col:10> 'int' lvalue Var 0x12800e008 'i' 'int'
      | `-IntegerLiteral 0x11e014fb8 <col:14> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x11e015080 <col:17, col:26> 'int' contains-errors '<'
      | |-DeclRefExpr 0x11e014ff8 <col:17> 'int' lvalue Var 0x12800e008 'i' 'int'
      | `-CXXDependentScopeMemberExpr 0x11e015038 <col:21, col:26> '<dependent type>' contains-errors lvalue ->ncolors
      |   `-RecoveryExpr 0x11e015018 <col:21> '<dependent type>' contains-errors lvalue
      |-UnaryOperator 0x11e0150c0 <col:35, col:37> 'int' prefix '++'
      | `-DeclRefExpr 0x11e0150a0 <col:37> 'int' lvalue Var 0x12800e008 'i' 'int'
      `-CompoundStmt 0x11e0156e0 <col:40, line:29:5>
