`-FunctionDecl 0x12b140c18  line:1:12 do_i2c_loop 'int (struct cmd_tbl *, int, int, char *const *)' static
  |-ParmVarDecl 0x12b128648 <col:24, col:40> col:40 cmdtp 'struct cmd_tbl *'
  |-ParmVarDecl 0x12b1286c8 <col:47, col:51> col:51 flag 'int'
  |-ParmVarDecl 0x12b128748 <col:57, col:61> col:61 used argc 'int'
  |-ParmVarDecl 0x12b140ac0 <line:2:10, col:27> col:22 used argv 'char *const *'
  `-CompoundStmt 0x12b1448b8 <line:3:1, line:58:1>
    |-DeclStmt 0x12b140dc0 <line:4:2, col:11>
    | `-VarDecl 0x12b140d58 <col:2, col:7> col:7 used chip 'int'
    |-DeclStmt 0x12b140e58 <line:5:2, col:10>
    | `-VarDecl 0x12b140df0 <col:2, col:6> col:6 used alen 'int'
    |-DeclStmt 0x12b140ef0 <line:6:2, col:11>
    | `-VarDecl 0x12b140e88 <col:2, col:7> col:7 used addr 'int'
    |-DeclStmt 0x12b140f88 <line:7:2, col:13>
    | `-VarDecl 0x12b140f20 <col:2, col:7> col:7 used length 'int'
    |-DeclStmt 0x12b1410a8 <line:8:2, col:18>
    | `-VarDecl 0x12b141040 <col:2, col:17> col:9 used bytes 'char[16]'
    |-DeclStmt 0x12b141140 <line:9:2, col:11>
    | `-VarDecl 0x12b1410d8 <col:2, col:6> col:6 used delay 'int'
    |-DeclStmt 0x12b1411d8 <line:10:2, col:9>
    | `-VarDecl 0x12b141170 <col:2, col:6> col:6 used ret 'int'
    |-IfStmt 0x12b1412b0 <line:15:2, line:16:10>
    | |-BinaryOperator 0x12b141248 <line:15:6, col:13> 'int' '<'
    | | |-ImplicitCastExpr 0x12b141230 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x12b1411f0 <col:6> 'int' lvalue ParmVar 0x12b128748 'argc' 'int'
    | | `-IntegerLiteral 0x12b141210 <col:13> 'int' 3
    | `-ReturnStmt 0x12b1412a0 <line:16:3, col:10>
    |   `-RecoveryExpr 0x12b141280 <col:10> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x12b1415c0 <line:19:2, col:30> 'int' contains-errors '='
    | |-DeclRefExpr 0x12b1412d0 <col:2> 'int' lvalue Var 0x12b140d58 'chip' 'int'
    | `-CallExpr 0x12b141590 <col:9, col:30> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x12b141400 <col:9> 'int ()' Function 0x12b141348 'hextoul' 'int ()'
    |   |-ArraySubscriptExpr 0x12b141550 <col:17, col:23> 'char *const' lvalue
    |   | |-ImplicitCastExpr 0x12b141538 <col:17> 'char *const *' <LValueToRValue>
    |   | | `-DeclRefExpr 0x12b141420 <col:17> 'char *const *' lvalue ParmVar 0x12b140ac0 'argv' 'char *const *'
    |   | `-IntegerLiteral 0x12b141440 <col:22> 'int' 1
    |   `-RecoveryExpr 0x12b141570 <col:26> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x12b1417c0 <line:22:2, col:30> 'int' contains-errors '='
    | |-DeclRefExpr 0x12b1415e0 <col:2> 'int' lvalue Var 0x12b140e88 'addr' 'int'
    | `-CallExpr 0x12b141790 <col:9, col:30> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x12b141600 <col:9> 'int ()' Function 0x12b141348 'hextoul' 'int ()'
    |   |-ArraySubscriptExpr 0x12b141750 <col:17, col:23> 'char *const' lvalue
    |   | |-ImplicitCastExpr 0x12b141738 <col:17> 'char *const *' <LValueToRValue>
    |   | | `-DeclRefExpr 0x12b141620 <col:17> 'char *const *' lvalue ParmVar 0x12b140ac0 'argv' 'char *const *'
    |   | `-IntegerLiteral 0x12b141640 <col:22> 'int' 2
    |   `-RecoveryExpr 0x12b141770 <col:26> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x12b1434a8 <line:23:2, col:43> 'int' contains-errors '='
    | |-DeclRefExpr 0x12b1417e0 <col:2> 'int' lvalue Var 0x12b140df0 'alen' 'int'
    | `-CallExpr 0x12b143478 <col:9, col:43> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x12b1418e0 <col:9> 'int ()' Function 0x12b141828 'get_alen' 'int ()'
    |   |-ArraySubscriptExpr 0x12b143438 <col:18, col:24> 'char *const' lvalue
    |   | |-ImplicitCastExpr 0x12b143420 <col:18> 'char *const *' <LValueToRValue>
    |   | | `-DeclRefExpr 0x12b141900 <col:18> 'char *const *' lvalue ParmVar 0x12b140ac0 'argv' 'char *const *'
    |   | `-IntegerLiteral 0x12b141920 <col:23> 'int' 2
    |   `-RecoveryExpr 0x12b143458 <col:27> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x12b143588 <line:24:2, line:25:10>
    | |-BinaryOperator 0x12b143520 <line:24:6, col:13> 'int' '>'
    | | |-ImplicitCastExpr 0x12b143508 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x12b1434c8 <col:6> 'int' lvalue Var 0x12b140df0 'alen' 'int'
    | | `-IntegerLiteral 0x12b1434e8 <col:13> 'int' 3
    | `-ReturnStmt 0x12b143578 <line:25:3, col:10>
    |   `-RecoveryExpr 0x12b143558 <col:10> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x12b1435e8 <line:35:2, col:11> 'int' '='
    | |-DeclRefExpr 0x12b1435a8 <col:2> 'int' lvalue Var 0x12b140f20 'length' 'int'
    | `-IntegerLiteral 0x12b1435c8 <col:11> 'int' 1
    |-BinaryOperator 0x12b1437e8 <line:36:2, col:32> 'int' contains-errors '='
    | |-DeclRefExpr 0x12b143608 <col:2> 'int' lvalue Var 0x12b140f20 'length' 'int'
    | `-CallExpr 0x12b1437b8 <col:11, col:32> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x12b143628 <col:11> 'int ()' Function 0x12b141348 'hextoul' 'int ()'
    |   |-ArraySubscriptExpr 0x12b143778 <col:19, col:25> 'char *const' lvalue
    |   | |-ImplicitCastExpr 0x12b143760 <col:19> 'char *const *' <LValueToRValue>
    |   | | `-DeclRefExpr 0x12b143648 <col:19> 'char *const *' lvalue ParmVar 0x12b140ac0 'argv' 'char *const *'
    |   | `-IntegerLiteral 0x12b143668 <col:24> 'int' 3
    |   `-RecoveryExpr 0x12b143798 <col:28> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x12b143990 <line:37:2, line:38:24>
    | |-BinaryOperator 0x12b1438b8 <line:37:6, col:27> 'int' '>'
    | | |-ImplicitCastExpr 0x12b1438a0 <col:6> 'unsigned long' <IntegralCast>
    | | | `-ImplicitCastExpr 0x12b143888 <col:6> 'int' <LValueToRValue>
    | | |   `-DeclRefExpr 0x12b143808 <col:6> 'int' lvalue Var 0x12b140f20 'length' 'int'
    | | `-UnaryExprOrTypeTraitExpr 0x12b143868 <col:15, col:27> 'unsigned long' sizeof
    | |   `-ParenExpr 0x12b143848 <col:21, col:27> 'char[16]' lvalue
    | |     `-DeclRefExpr 0x12b143828 <col:22> 'char[16]' lvalue Var 0x12b141040 'bytes' 'char[16]' non_odr_use_unevaluated
    | `-BinaryOperator 0x12b143970 <line:38:3, col:24> 'int' '='
    |   |-DeclRefExpr 0x12b1438d8 <col:3> 'int' lvalue Var 0x12b140f20 'length' 'int'
    |   `-ImplicitCastExpr 0x12b143958 <col:12, col:24> 'int' <IntegralCast>
    |     `-UnaryExprOrTypeTraitExpr 0x12b143938 <col:12, col:24> 'unsigned long' sizeof
    |       `-ParenExpr 0x12b143918 <col:18, col:24> 'char[16]' lvalue
    |         `-DeclRefExpr 0x12b1438f8 <col:19> 'char[16]' lvalue Var 0x12b141040 'bytes' 'char[16]' non_odr_use_unevaluated
    |-BinaryOperator 0x12b1439f0 <line:41:2, col:10> 'int' '='
    | |-DeclRefExpr 0x12b1439b0 <col:2> 'int' lvalue Var 0x12b1410d8 'delay' 'int'
    | `-IntegerLiteral 0x12b1439d0 <col:10> 'int' 1000
    |-IfStmt 0x12b143d68 <line:42:2, line:43:32>
    | |-BinaryOperator 0x12b143a68 <line:42:6, col:13> 'int' '>'
    | | |-ImplicitCastExpr 0x12b143a50 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x12b143a10 <col:6> 'int' lvalue ParmVar 0x12b128748 'argc' 'int'
    | | `-IntegerLiteral 0x12b143a30 <col:13> 'int' 3
    | `-BinaryOperator 0x12b143d48 <line:43:3, col:32> 'int' contains-errors '='
    |   |-DeclRefExpr 0x12b143a88 <col:3> 'int' lvalue Var 0x12b1410d8 'delay' 'int'
    |   `-CallExpr 0x12b143d18 <col:11, col:32> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x12b143b88 <col:11> 'int ()' Function 0x12b143ad0 'dectoul' 'int ()'
    |     |-ArraySubscriptExpr 0x12b143cd8 <col:19, col:25> 'char *const' lvalue
    |     | |-ImplicitCastExpr 0x12b143cc0 <col:19> 'char *const *' <LValueToRValue>
    |     | | `-DeclRefExpr 0x12b143ba8 <col:19> 'char *const *' lvalue ParmVar 0x12b140ac0 'argv' 'char *const *'
    |     | `-IntegerLiteral 0x12b143bc8 <col:24> 'int' 4
    |     `-RecoveryExpr 0x12b143cf8 <col:28> '<dependent type>' contains-errors lvalue
    |-WhileStmt 0x12b144868 <line:45:2, line:54:2>
    | |-IntegerLiteral 0x12b143d88 <line:45:9> 'int' 1
    | `-CompoundStmt 0x12b144840 <col:12, line:54:2>
    |   |-BinaryOperator 0x12b144078 <line:49:3, col:49> 'int' '='
    |   | |-DeclRefExpr 0x12b143da8 <col:3> 'int' lvalue Var 0x12b141170 'ret' 'int'
    |   | `-CallExpr 0x12b143fb8 <col:9, col:49> 'int'
    |   |   |-ImplicitCastExpr 0x12b143fa0 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   |   | `-DeclRefExpr 0x12b143ea8 <col:9> 'int ()' Function 0x12b143df0 'i2c_read' 'int ()'
    |   |   |-ImplicitCastExpr 0x12b144000 <col:18> 'int' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x12b143ec8 <col:18> 'int' lvalue Var 0x12b140d58 'chip' 'int'
    |   |   |-ImplicitCastExpr 0x12b144018 <col:24> 'int' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x12b143ee8 <col:24> 'int' lvalue Var 0x12b140e88 'addr' 'int'
    |   |   |-ImplicitCastExpr 0x12b144030 <col:30> 'int' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x12b143f08 <col:30> 'int' lvalue Var 0x12b140df0 'alen' 'int'
    |   |   |-ImplicitCastExpr 0x12b144048 <col:36> 'char *' <ArrayToPointerDecay>
    |   |   | `-DeclRefExpr 0x12b143f28 <col:36> 'char[16]' lvalue Var 0x12b141040 'bytes' 'char[16]'
    |   |   `-ImplicitCastExpr 0x12b144060 <col:43> 'int' <LValueToRValue>
    |   |     `-DeclRefExpr 0x12b143f48 <col:43> 'int' lvalue Var 0x12b140f20 'length' 'int'
    |   |-IfStmt 0x12b144288 <line:51:3, line:52:36>
    |   | |-ImplicitCastExpr 0x12b1440b8 <line:51:7> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x12b144098 <col:7> 'int' lvalue Var 0x12b141170 'ret' 'int'
    |   | `-CallExpr 0x12b144258 <line:52:4, col:36> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x12b1441b0 <col:4> 'int ()' Function 0x12b1440f8 'i2c_report_err' 'int ()'
    |   |   |-DeclRefExpr 0x12b1441d0 <col:19> 'int' lvalue Var 0x12b141170 'ret' 'int'
    |   |   `-RecoveryExpr 0x12b144238 <col:24> '<dependent type>' contains-errors lvalue
    |   `-CallExpr 0x12b144800 <line:53:3, col:15> 'int'
    |     |-ImplicitCastExpr 0x12b1443c8 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x12b144388 <col:3> 'int ()' Function 0x12b1442d0 'udelay' 'int ()'
    |     `-ImplicitCastExpr 0x12b144828 <col:10> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x12b1443a8 <col:10> 'int' lvalue Var 0x12b1410d8 'delay' 'int'
    `-ReturnStmt 0x12b1448a8 <line:57:2, col:9>
      `-IntegerLiteral 0x12b144888 <col:9> 'int' 0
