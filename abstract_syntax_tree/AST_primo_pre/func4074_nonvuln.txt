`-FunctionDecl 0x1309281a8  line:1:12 checkcmd 'int (const char *)' static
  |-ParmVarDecl 0x1309280d8 <col:21, col:33> col:33 used c 'const char *'
  `-CompoundStmt 0x130940a00 <col:36, line:12:1>
    |-DeclStmt 0x130928350 <line:2:2, col:13>
    | `-VarDecl 0x1309282b0 <col:2, col:12> col:7 used oc 'char' cinit
    |   `-ImplicitCastExpr 0x130928338 <col:12> 'char' <IntegralCast>
    |     `-IntegerLiteral 0x130928318 <col:12> 'int' 0
    |-ForStmt 0x130928788 <line:3:2, line:10:2>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x1309283b8 <line:3:8, col:9> 'char' <LValueToRValue>
    | | `-UnaryOperator 0x1309283a0 <col:8, col:9> 'const char' lvalue prefix '*' cannot overflow
    | |   `-ImplicitCastExpr 0x130928388 <col:9> 'const char *' <LValueToRValue>
    | |     `-DeclRefExpr 0x130928368 <col:9> 'const char *' lvalue ParmVar 0x1309280d8 'c' 'const char *'
    | |-UnaryOperator 0x1309283f0 <col:11, col:12> 'const char *' postfix '++'
    | | `-DeclRefExpr 0x1309283d0 <col:11> 'const char *' lvalue ParmVar 0x1309280d8 'c' 'const char *'
    | `-CompoundStmt 0x130928768 <col:16, line:10:2>
    |   |-IfStmt 0x1309286a0 <line:4:3, line:8:3>
    |   | |-BinaryOperator 0x130928470 <line:4:7, col:13> 'int' '=='
    |   | | |-ImplicitCastExpr 0x130928458 <col:7> 'int' <IntegralCast>
    |   | | | `-ImplicitCastExpr 0x130928440 <col:7> 'char' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x130928408 <col:7> 'char' lvalue Var 0x1309282b0 'oc' 'char'
    |   | | `-CharacterLiteral 0x130928428 <col:13> 'int' 37
    |   | `-CompoundStmt 0x130928688 <col:18, line:8:3>
    |   |   `-IfStmt 0x130928668 <line:5:4, line:7:4>
    |   |     |-BinaryOperator 0x130928600 <line:5:8, col:27> 'int' '&&'
    |   |     | |-BinaryOperator 0x130928528 <col:8, col:14> 'int' '!='
    |   |     | | |-ImplicitCastExpr 0x130928510 <col:8, col:9> 'int' <IntegralCast>
    |   |     | | | `-ImplicitCastExpr 0x1309284f8 <col:8, col:9> 'char' <LValueToRValue>
    |   |     | | |   `-UnaryOperator 0x1309284c8 <col:8, col:9> 'const char' lvalue prefix '*' cannot overflow
    |   |     | | |     `-ImplicitCastExpr 0x1309284b0 <col:9> 'const char *' <LValueToRValue>
    |   |     | | |       `-DeclRefExpr 0x130928490 <col:9> 'const char *' lvalue ParmVar 0x1309280d8 'c' 'const char *'
    |   |     | | `-CharacterLiteral 0x1309284e0 <col:14> 'int' 100
    |   |     | `-BinaryOperator 0x1309285e0 <col:21, col:27> 'int' '!='
    |   |     |   |-ImplicitCastExpr 0x1309285c8 <col:21, col:22> 'int' <IntegralCast>
    |   |     |   | `-ImplicitCastExpr 0x1309285b0 <col:21, col:22> 'char' <LValueToRValue>
    |   |     |   |   `-UnaryOperator 0x130928580 <col:21, col:22> 'const char' lvalue prefix '*' cannot overflow
    |   |     |   |     `-ImplicitCastExpr 0x130928568 <col:22> 'const char *' <LValueToRValue>
    |   |     |   |       `-DeclRefExpr 0x130928548 <col:22> 'const char *' lvalue ParmVar 0x1309280d8 'c' 'const char *'
    |   |     |   `-CharacterLiteral 0x130928598 <col:27> 'int' 37
    |   |     `-CompoundStmt 0x130928650 <col:32, line:7:4>
    |   |       `-ReturnStmt 0x130928640 <line:6:5, col:12>
    |   |         `-IntegerLiteral 0x130928620 <col:12> 'int' 0
    |   `-BinaryOperator 0x130928748 <line:9:3, col:9> 'char' '='
    |     |-DeclRefExpr 0x1309286c0 <col:3> 'char' lvalue Var 0x1309282b0 'oc' 'char'
    |     `-ImplicitCastExpr 0x130928730 <col:8, col:9> 'char' <LValueToRValue>
    |       `-UnaryOperator 0x130928718 <col:8, col:9> 'const char' lvalue prefix '*' cannot overflow
    |         `-ImplicitCastExpr 0x130928700 <col:9> 'const char *' <LValueToRValue>
    |           `-DeclRefExpr 0x1309286e0 <col:9> 'const char *' lvalue ParmVar 0x1309280d8 'c' 'const char *'
    `-ReturnStmt 0x1309287e0 <line:11:2, col:9>
      `-IntegerLiteral 0x1309287c0 <col:9> 'int' 1
