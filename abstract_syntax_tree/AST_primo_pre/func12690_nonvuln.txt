`-FunctionDecl 0x15781f458  line:1:1 invalid debug_indent 'int (const int *, int)'
  |-ParmVarDecl 0x15781f2f0 <col:14, col:33> col:33 invalid mem 'const int *'
  |-ParmVarDecl 0x15781f370 <col:38, col:42> col:42 used indent 'int'
  `-CompoundStmt 0x15781f8f0 <line:2:1, line:7:1>
    |-DeclStmt 0x15781f590 <line:3:5, col:10>
    | `-VarDecl 0x15781f528 <col:5, col:9> col:9 used i 'int'
    `-ForStmt 0x15781f8b8 <line:5:5, line:6:24>
      |-BinaryOperator 0x15781f600 <line:5:10, col:14> 'int' '='
      | |-DeclRefExpr 0x15781f5a8 <col:10> 'int' lvalue Var 0x15781f528 'i' 'int'
      | `-ImplicitCastExpr 0x15781f5e8 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x15781f5c8 <col:14> 'int' lvalue ParmVar 0x15781f370 'indent' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x15781f678 <col:22, col:26> 'int' '>'
      | |-ImplicitCastExpr 0x15781f660 <col:22> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x15781f620 <col:22> 'int' lvalue Var 0x15781f528 'i' 'int'
      | `-IntegerLiteral 0x15781f640 <col:26> 'int' 0
      |-UnaryOperator 0x15781f6b8 <col:29, col:31> 'int' prefix '--'
      | `-DeclRefExpr 0x15781f698 <col:31> 'int' lvalue Var 0x15781f528 'i' 'int'
      `-CallExpr 0x15781f888 <line:6:9, col:24> '<dependent type>' contains-errors
        |-DeclRefExpr 0x15781f830 <col:9> 'int ()' Function 0x15781f778 'dmputc' 'int ()'
        |-RecoveryExpr 0x15781f850 <col:16> '<dependent type>' contains-errors lvalue
        `-CharacterLiteral 0x15781f870 <col:21> 'int' 32
