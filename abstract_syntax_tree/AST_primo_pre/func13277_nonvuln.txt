`-FunctionDecl 0x15100dda8  line:1:1 sv_dispprefix 'int (const char *)'
  |-ParmVarDecl 0x15100dcd8 <line:2:6, col:18> col:18 used value 'const char *'
  `-CompoundStmt 0x151026600 <line:3:1, line:14:1>
    |-DeclStmt 0x15100df40 <line:4:3, col:15>
    | `-VarDecl 0x15100deb8 <col:3, col:14> col:7 used nval 'int' cinit
    |   `-IntegerLiteral 0x15100df20 <col:14> 'int' 0
    |-IfStmt 0x15100e380 <line:6:3, line:11:5>
    | |-BinaryOperator 0x15100e010 <line:6:7, col:17> 'int' '&&'
    | | |-ImplicitCastExpr 0x15100dfc8 <col:7> 'const char *' <LValueToRValue>
    | | | `-DeclRefExpr 0x15100df58 <col:7> 'const char *' lvalue ParmVar 0x15100dcd8 'value' 'const char *'
    | | `-ImplicitCastExpr 0x15100dff8 <col:16, col:17> 'int' <IntegralCast>
    | |   `-ImplicitCastExpr 0x15100dfe0 <col:16, col:17> 'char' <LValueToRValue>
    | |     `-UnaryOperator 0x15100dfb0 <col:16, col:17> 'const char' lvalue prefix '*' cannot overflow
    | |       `-ImplicitCastExpr 0x15100df98 <col:17> 'const char *' <LValueToRValue>
    | |         `-DeclRefExpr 0x15100df78 <col:17> 'const char *' lvalue ParmVar 0x15100dcd8 'value' 'const char *'
    | `-CompoundStmt 0x15100e360 <line:7:5, line:11:5>
    |   |-BinaryOperator 0x15100e248 <line:8:7, col:25> 'int' '='
    |   | |-DeclRefExpr 0x15100e030 <col:7> 'int' lvalue Var 0x15100deb8 'nval' 'int'
    |   | `-CallExpr 0x15100e208 <col:14, col:25> 'int'
    |   |   |-ImplicitCastExpr 0x15100e1f0 <col:14> 'int (*)()' <FunctionToPointerDecay>
    |   |   | `-DeclRefExpr 0x15100e180 <col:14> 'int ()' Function 0x15100e0c8 'atoi' 'int ()'
    |   |   `-ImplicitCastExpr 0x15100e230 <col:20> 'const char *' <LValueToRValue>
    |   |     `-DeclRefExpr 0x15100e1a0 <col:20> 'const char *' lvalue ParmVar 0x15100dcd8 'value' 'const char *'
    |   `-IfStmt 0x15100e340 <line:9:7, line:10:9>
    |     |-BinaryOperator 0x15100e2c0 <line:9:11, col:18> 'int' '<'
    |     | |-ImplicitCastExpr 0x15100e2a8 <col:11> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x15100e268 <col:11> 'int' lvalue Var 0x15100deb8 'nval' 'int'
    |     | `-IntegerLiteral 0x15100e288 <col:18> 'int' 0
    |     `-BinaryOperator 0x15100e320 <line:10:2, col:9> 'int' '='
    |       |-DeclRefExpr 0x15100e2e0 <col:2> 'int' lvalue Var 0x15100deb8 'nval' 'int'
    |       `-IntegerLiteral 0x15100e300 <col:9> 'int' 0
    `-ReturnStmt 0x15100e3e0 <line:13:3, col:10>
      `-IntegerLiteral 0x15100e3c0 <col:10> 'int' 0
