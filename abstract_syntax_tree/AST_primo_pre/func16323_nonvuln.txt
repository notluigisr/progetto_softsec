`-FunctionDecl 0x12e80de68  line:1:1 tabstop_eq 'int (int *, int *)'
  |-ParmVarDecl 0x12e80dd08 <col:12, col:17> col:17 used ts1 'int *'
  |-ParmVarDecl 0x12e80dd88 <col:22, col:27> col:27 used ts2 'int *'
  `-CompoundStmt 0x12e826b28 <line:2:1, line:17:1>
    |-DeclStmt 0x12e80dfe8 <line:3:5, col:11>
    | `-VarDecl 0x12e80df80 <col:5, col:10> col:10 used t 'int'
    |-IfStmt 0x12e80e290 <line:5:5, line:6:9>
    | |-BinaryOperator 0x12e80e210 <line:5:9, col:46> 'int' '||'
    | | |-ParenExpr 0x12e80e0e8 <col:9, col:25> 'int'
    | | | `-BinaryOperator 0x12e80e0c8 <col:10, col:22> 'int' '&&'
    | | |   |-BinaryOperator 0x12e80e070 <col:10, col:17> 'int' '=='
    | | |   | |-ImplicitCastExpr 0x12e80e040 <col:10> 'int *' <LValueToRValue>
    | | |   | | `-DeclRefExpr 0x12e80e000 <col:10> 'int *' lvalue ParmVar 0x12e80dd08 'ts1' 'int *'
    | | |   | `-ImplicitCastExpr 0x12e80e058 <col:17> 'int *' <NullToPointer>
    | | |   |   `-IntegerLiteral 0x12e80e020 <col:17> 'int' 0
    | | |   `-ImplicitCastExpr 0x12e80e0b0 <col:22> 'int *' <LValueToRValue>
    | | |     `-DeclRefExpr 0x12e80e090 <col:22> 'int *' lvalue ParmVar 0x12e80dd88 'ts2' 'int *'
    | | `-ParenExpr 0x12e80e1f0 <col:30, col:46> 'int'
    | |   `-BinaryOperator 0x12e80e1d0 <col:31, col:45> 'int' '&&'
    | |     |-ImplicitCastExpr 0x12e80e1b8 <col:31> 'int *' <LValueToRValue>
    | |     | `-DeclRefExpr 0x12e80e108 <col:31> 'int *' lvalue ParmVar 0x12e80dd08 'ts1' 'int *'
    | |     `-BinaryOperator 0x12e80e198 <col:38, col:45> 'int' '=='
    | |       |-ImplicitCastExpr 0x12e80e168 <col:38> 'int *' <LValueToRValue>
    | |       | `-DeclRefExpr 0x12e80e128 <col:38> 'int *' lvalue ParmVar 0x12e80dd88 'ts2' 'int *'
    | |       `-ImplicitCastExpr 0x12e80e180 <col:45> 'int *' <NullToPointer>
    | |         `-IntegerLiteral 0x12e80e148 <col:45> 'int' 0
    | `-ReturnStmt 0x12e80e280 <line:6:2, col:9>
    |   `-RecoveryExpr 0x12e80e260 <col:9> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x12e80e388 <line:7:5, line:8:9>
    | |-BinaryOperator 0x12e80e320 <line:7:9, col:16> 'int' '=='
    | | |-ImplicitCastExpr 0x12e80e2f0 <col:9> 'int *' <LValueToRValue>
    | | | `-DeclRefExpr 0x12e80e2b0 <col:9> 'int *' lvalue ParmVar 0x12e80dd08 'ts1' 'int *'
    | | `-ImplicitCastExpr 0x12e80e308 <col:16> 'int *' <LValueToRValue>
    | |   `-DeclRefExpr 0x12e80e2d0 <col:16> 'int *' lvalue ParmVar 0x12e80dd88 'ts2' 'int *'
    | `-ReturnStmt 0x12e80e378 <line:8:2, col:9>
    |   `-RecoveryExpr 0x12e80e358 <col:9> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x12e826730 <line:9:5, line:10:9>
    | |-BinaryOperator 0x12e8266c8 <line:9:9, col:24> 'int' '!='
    | | |-ImplicitCastExpr 0x12e826698 <col:9, col:14> 'int' <LValueToRValue>
    | | | `-ArraySubscriptExpr 0x12e826600 <col:9, col:14> 'int' lvalue
    | | |   |-ImplicitCastExpr 0x12e80e3e8 <col:9> 'int *' <LValueToRValue>
    | | |   | `-DeclRefExpr 0x12e80e3a8 <col:9> 'int *' lvalue ParmVar 0x12e80dd08 'ts1' 'int *'
    | | |   `-IntegerLiteral 0x12e80e3c8 <col:13> 'int' 0
    | | `-ImplicitCastExpr 0x12e8266b0 <col:19, col:24> 'int' <LValueToRValue>
    | |   `-ArraySubscriptExpr 0x12e826678 <col:19, col:24> 'int' lvalue
    | |     |-ImplicitCastExpr 0x12e826660 <col:19> 'int *' <LValueToRValue>
    | |     | `-DeclRefExpr 0x12e826620 <col:19> 'int *' lvalue ParmVar 0x12e80dd88 'ts2' 'int *'
    | |     `-IntegerLiteral 0x12e826640 <col:23> 'int' 0
    | `-ReturnStmt 0x12e826720 <line:10:2, col:9>
    |   `-RecoveryExpr 0x12e826700 <col:9> '<dependent type>' contains-errors lvalue
    |-ForStmt 0x12e826aa8 <line:12:5, line:14:13>
    | |-BinaryOperator 0x12e826790 <line:12:10, col:14> 'int' '='
    | | |-DeclRefExpr 0x12e826750 <col:10> 'int' lvalue Var 0x12e80df80 't' 'int'
    | | `-IntegerLiteral 0x12e826770 <col:14> 'int' 1
    | |-<<<NULL>>>
    | |-BinaryOperator 0x12e826878 <col:17, col:27> 'int' '<='
    | | |-ImplicitCastExpr 0x12e826848 <col:17> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x12e8267b0 <col:17> 'int' lvalue Var 0x12e80df80 't' 'int'
    | | `-ImplicitCastExpr 0x12e826860 <col:22, col:27> 'int' <LValueToRValue>
    | |   `-ArraySubscriptExpr 0x12e826828 <col:22, col:27> 'int' lvalue
    | |     |-ImplicitCastExpr 0x12e826810 <col:22> 'int *' <LValueToRValue>
    | |     | `-DeclRefExpr 0x12e8267d0 <col:22> 'int *' lvalue ParmVar 0x12e80dd08 'ts1' 'int *'
    | |     `-IntegerLiteral 0x12e8267f0 <col:26> 'int' 0
    | |-UnaryOperator 0x12e8268b8 <col:30, col:32> 'int' prefix '++'
    | | `-DeclRefExpr 0x12e826898 <col:32> 'int' lvalue Var 0x12e80df80 't' 'int'
    | `-IfStmt 0x12e826a88 <line:13:2, line:14:13>
    |   |-BinaryOperator 0x12e826a20 <line:13:6, col:21> 'int' '!='
    |   | |-ImplicitCastExpr 0x12e8269f0 <col:6, col:11> 'int' <LValueToRValue>
    |   | | `-ArraySubscriptExpr 0x12e826940 <col:6, col:11> 'int' lvalue
    |   | |   |-ImplicitCastExpr 0x12e826910 <col:6> 'int *' <LValueToRValue>
    |   | |   | `-DeclRefExpr 0x12e8268d0 <col:6> 'int *' lvalue ParmVar 0x12e80dd08 'ts1' 'int *'
    |   | |   `-ImplicitCastExpr 0x12e826928 <col:10> 'int' <LValueToRValue>
    |   | |     `-DeclRefExpr 0x12e8268f0 <col:10> 'int' lvalue Var 0x12e80df80 't' 'int'
    |   | `-ImplicitCastExpr 0x12e826a08 <col:16, col:21> 'int' <LValueToRValue>
    |   |   `-ArraySubscriptExpr 0x12e8269d0 <col:16, col:21> 'int' lvalue
    |   |     |-ImplicitCastExpr 0x12e8269a0 <col:16> 'int *' <LValueToRValue>
    |   |     | `-DeclRefExpr 0x12e826960 <col:16> 'int *' lvalue ParmVar 0x12e80dd88 'ts2' 'int *'
    |   |     `-ImplicitCastExpr 0x12e8269b8 <col:20> 'int' <LValueToRValue>
    |   |       `-DeclRefExpr 0x12e826980 <col:20> 'int' lvalue Var 0x12e80df80 't' 'int'
    |   `-ReturnStmt 0x12e826a78 <line:14:6, col:13>
    |     `-RecoveryExpr 0x12e826a58 <col:13> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x12e826b18 <line:16:5, col:12>
      `-RecoveryExpr 0x12e826af8 <col:12> '<dependent type>' contains-errors lvalue
