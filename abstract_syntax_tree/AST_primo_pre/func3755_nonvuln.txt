`-FunctionDecl 0x14c00e108  line:1:15 invalid PrelinOpt16alloc 'int *(int, const int *, int, int **, int, int **)'
  |-ParmVarDecl 0x14c00dcf0 <col:32, col:43> col:43 invalid ContextID 'int'
  |-ParmVarDecl 0x14c00dd70 <line:2:32, col:55> col:55 invalid ColorMap 'const int *'
  |-ParmVarDecl 0x14c00ddf0 <line:3:32, col:36> col:36 used nInputs 'int'
  |-ParmVarDecl 0x14c00dee0 <col:45, col:60> col:60 invalid In 'int **'
  |-ParmVarDecl 0x14c00df60 <line:4:32, col:36> col:36 used nOutputs 'int'
  |-ParmVarDecl 0x14c00dfe8 <col:46, col:61> col:61 invalid Out 'int **'
  `-CompoundStmt 0x14b923f28 <line:5:1, line:49:1>
    |-DeclStmt 0x14c00e260 <line:6:5, col:10>
    | `-VarDecl 0x14c00e1f8 <col:5, col:9> col:9 used i 'int'
    |-IfStmt 0x14b923550 <line:8:5, col:29>
    | |-BinaryOperator 0x14b9234e8 <col:9, col:16> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x14b9234a8 <col:9> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x14b9234c8 <col:16> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x14b923540 <col:22, col:29>
    |   `-RecoveryExpr 0x14b923520 <col:29> '<dependent type>' contains-errors lvalue
    |-ForStmt 0x14b923980 <line:14:5, line:25:5>
    | |-BinaryOperator 0x14b9235f0 <line:14:10, col:12> 'int' '='
    | | |-DeclRefExpr 0x14b9235b0 <col:10> 'int' lvalue Var 0x14c00e1f8 'i' 'int'
    | | `-IntegerLiteral 0x14b9235d0 <col:12> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x14b923680 <col:15, col:19> 'int' '<'
    | | |-ImplicitCastExpr 0x14b923650 <col:15> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14b923610 <col:15> 'int' lvalue Var 0x14c00e1f8 'i' 'int'
    | | `-ImplicitCastExpr 0x14b923668 <col:19> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x14b923630 <col:19> 'int' lvalue ParmVar 0x14c00ddf0 'nInputs' 'int'
    | |-UnaryOperator 0x14b9236c0 <col:28, col:29> 'int' postfix '++'
    | | `-DeclRefExpr 0x14b9236a0 <col:28> 'int' lvalue Var 0x14c00e1f8 'i' 'int'
    | `-CompoundStmt 0x14b923968 <col:33, line:25:5>
    |   `-IfStmt 0x14b923938 <line:16:9, line:24:9> has_else
    |     |-BinaryOperator 0x14b923750 <line:16:13, col:19> 'int' contains-errors '=='
    |     | |-RecoveryExpr 0x14b9236d8 <col:13> '<dependent type>' contains-errors lvalue
    |     | `-RecoveryExpr 0x14b923730 <col:19> '<dependent type>' contains-errors lvalue
    |     |-CompoundStmt 0x14b9237e0 <col:25, line:20:9>
    |     `-CompoundStmt 0x14b923928 <line:21:14, line:24:9>
    `-ForStmt 0x14b923ef0 <line:35:5, line:46:5>
      |-BinaryOperator 0x14b923be8 <line:35:10, col:12> 'int' '='
      | |-DeclRefExpr 0x14b923ba8 <col:10> 'int' lvalue Var 0x14c00e1f8 'i' 'int'
      | `-IntegerLiteral 0x14b923bc8 <col:12> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x14b923c78 <col:15, col:19> 'int' '<'
      | |-ImplicitCastExpr 0x14b923c48 <col:15> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x14b923c08 <col:15> 'int' lvalue Var 0x14c00e1f8 'i' 'int'
      | `-ImplicitCastExpr 0x14b923c60 <col:19> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x14b923c28 <col:19> 'int' lvalue ParmVar 0x14c00df60 'nOutputs' 'int'
      |-UnaryOperator 0x14b923cb8 <col:29, col:30> 'int' postfix '++'
      | `-DeclRefExpr 0x14b923c98 <col:29> 'int' lvalue Var 0x14c00e1f8 'i' 'int'
      `-CompoundStmt 0x14b923ed8 <col:34, line:46:5>
        `-IfStmt 0x14b923ea8 <line:37:9, line:45:9> has_else
          |-RecoveryExpr 0x14b923cf0 <line:37:13, col:20> '_Bool' contains-errors
          |-CompoundStmt 0x14b923d50 <col:26, line:40:9>
          `-CompoundStmt 0x14b923e98 <line:41:14, line:45:9>
