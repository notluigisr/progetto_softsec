`-FunctionDecl 0x15a80deb0  line:1:13 invalid read_binary_datetime 'void (int *, char **)' static
  |-ParmVarDecl 0x15a80dd28 <col:34, col:46> col:46 referenced invalid tm 'int *'
  |-ParmVarDecl 0x15a80ddd8 <col:50, col:58> col:58 used pos 'char **'
  `-CompoundStmt 0x15a8297f0 <line:2:1, line:29:1>
    |-DeclStmt 0x15a80e208 <line:3:3, col:37>
    | `-VarDecl 0x15a80df80 <col:3, col:36> col:8 used length 'int' cinit
    |   `-CallExpr 0x15a80e1c8 <col:16, col:36> 'int'
    |     |-ImplicitCastExpr 0x15a80e1b0 <col:16> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x15a80e140 <col:16> 'int ()' Function 0x15a80e088 'net_field_length' 'int ()'
    |     `-ImplicitCastExpr 0x15a80e1f0 <col:33> 'char **' <LValueToRValue>
    |       `-DeclRefExpr 0x15a80e160 <col:33> 'char **' lvalue ParmVar 0x15a80ddd8 'pos' 'char **'
    `-IfStmt 0x15a8297c0 <line:5:3, line:28:5> has_else
      |-ImplicitCastExpr 0x15a80e240 <line:5:7> 'int' <LValueToRValue>
      | `-DeclRefExpr 0x15a80e220 <col:7> 'int' lvalue Var 0x15a80df80 'length' 'int'
      |-CompoundStmt 0x15a829638 <line:6:3, line:26:3>
      | |-DeclStmt 0x15a80e340 <line:7:5, col:20>
      | | `-VarDecl 0x15a80e270 <col:5, col:17> col:12 used to 'char *' cinit
      | |   `-ImplicitCastExpr 0x15a80e328 <col:16, col:17> 'char *' <LValueToRValue>
      | |     `-UnaryOperator 0x15a80e310 <col:16, col:17> 'char *' lvalue prefix '*' cannot overflow
      | |       `-ImplicitCastExpr 0x15a80e2f8 <col:17> 'char **' <LValueToRValue>
      | |         `-DeclRefExpr 0x15a80e2d8 <col:17> 'char **' lvalue ParmVar 0x15a80ddd8 'pos' 'char **'
      | |-BinaryOperator 0x15a827420 <line:9:5, col:17> '<dependent type>' contains-errors '='
      | | |-CXXDependentScopeMemberExpr 0x15a80e3a0 <col:5, col:9> '<dependent type>' contains-errors lvalue ->neg
      | | | `-RecoveryExpr 0x15a80e378 <col:5> '<dependent type>' contains-errors lvalue
      | | |   `-DeclRefExpr 0x15a80e358 <col:5> 'int *' lvalue ParmVar 0x15a80dd28 'tm' 'int *'
      | | `-IntegerLiteral 0x15a827400 <col:17> 'int' 0
      | |-ImplicitCastExpr 0x15a8279a0 <line:10:5, col:22> '<dependent type>' contains-errors <LValueToRValue>
      | | `-RecoveryExpr 0x15a827970 <col:5, col:22> '<dependent type>' contains-errors lvalue
      | |   |-CXXDependentScopeMemberExpr 0x15a827488 <col:5, col:9> '<dependent type>' contains-errors lvalue ->year
      | |   | `-RecoveryExpr 0x15a827460 <col:5> '<dependent type>' contains-errors lvalue
      | |   |   `-DeclRefExpr 0x15a827440 <col:5> 'int *' lvalue ParmVar 0x15a80dd28 'tm' 'int *'
      | |   `-ParenExpr 0x15a827528 <col:17, col:22> '<overloaded function type>' lvalue
      | |     `-UnresolvedLookupExpr 0x15a8274e8 <col:18> '<overloaded function type>' lvalue (no ADL) = 'uint' empty
      | |-CallExpr 0x15a827af0 <col:24, col:36> 'int'
      | | |-ImplicitCastExpr 0x15a827ad8 <col:24> 'int (*)()' <FunctionToPointerDecay>
      | | | `-DeclRefExpr 0x15a827a98 <col:24> 'int ()' Function 0x15a8279e0 'sint2korr' 'int ()'
      | | `-ImplicitCastExpr 0x15a827b18 <col:34> 'char *' <LValueToRValue>
      | |   `-DeclRefExpr 0x15a827ab8 <col:34> 'char *' lvalue Var 0x15a80e270 'to' 'char *'
      | |-ImplicitCastExpr 0x15a827c68 <line:11:5, col:22> '<dependent type>' contains-errors <LValueToRValue>
      | | `-RecoveryExpr 0x15a827c38 <col:5, col:22> '<dependent type>' contains-errors lvalue
      | |   |-CXXDependentScopeMemberExpr 0x15a827b78 <col:5, col:9> '<dependent type>' contains-errors lvalue ->month
      | |   | `-RecoveryExpr 0x15a827b50 <col:5> '<dependent type>' contains-errors lvalue
      | |   |   `-DeclRefExpr 0x15a827b30 <col:5> 'int *' lvalue ParmVar 0x15a80dd28 'tm' 'int *'
      | |   `-ParenExpr 0x15a827c18 <col:17, col:22> '<overloaded function type>' lvalue
      | |     `-UnresolvedLookupExpr 0x15a827bd8 <col:18> '<overloaded function type>' lvalue (no ADL) = 'uint' empty
      | |-ImplicitCastExpr 0x15a827cf8 <col:24, col:28> 'char' <LValueToRValue>
      | | `-ArraySubscriptExpr 0x15a827cd8 <col:24, col:28> 'char' lvalue
      | |   |-ImplicitCastExpr 0x15a827cc0 <col:24> 'char *' <LValueToRValue>
      | |   | `-DeclRefExpr 0x15a827c80 <col:24> 'char *' lvalue Var 0x15a80e270 'to' 'char *'
      | |   `-IntegerLiteral 0x15a827ca0 <col:27> 'int' 2
      | |-ImplicitCastExpr 0x15a827e48 <line:12:5, col:22> '<dependent type>' contains-errors <LValueToRValue>
      | | `-RecoveryExpr 0x15a827e18 <col:5, col:22> '<dependent type>' contains-errors lvalue
      | |   |-CXXDependentScopeMemberExpr 0x15a827d58 <col:5, col:9> '<dependent type>' contains-errors lvalue ->day
      | |   | `-RecoveryExpr 0x15a827d30 <col:5> '<dependent type>' contains-errors lvalue
      | |   |   `-DeclRefExpr 0x15a827d10 <col:5> 'int *' lvalue ParmVar 0x15a80dd28 'tm' 'int *'
      | |   `-ParenExpr 0x15a827df8 <col:17, col:22> '<overloaded function type>' lvalue
      | |     `-UnresolvedLookupExpr 0x15a827db8 <col:18> '<overloaded function type>' lvalue (no ADL) = 'uint' empty
      | |-ImplicitCastExpr 0x15a827ed8 <col:24, col:28> 'char' <LValueToRValue>
      | | `-ArraySubscriptExpr 0x15a827eb8 <col:24, col:28> 'char' lvalue
      | |   |-ImplicitCastExpr 0x15a827ea0 <col:24> 'char *' <LValueToRValue>
      | |   | `-DeclRefExpr 0x15a827e60 <col:24> 'char *' lvalue Var 0x15a80e270 'to' 'char *'
      | |   `-IntegerLiteral 0x15a827e80 <col:27> 'int' 3
      | |-IfStmt 0x15a8291e0 <line:14:5, line:21:41> has_else
      | | |-BinaryOperator 0x15a827f48 <line:14:9, col:18> 'int' '>'
      | | | |-ImplicitCastExpr 0x15a827f30 <col:9> 'int' <LValueToRValue>
      | | | | `-DeclRefExpr 0x15a827ef0 <col:9> 'int' lvalue Var 0x15a80df80 'length' 'int'
      | | | `-IntegerLiteral 0x15a827f10 <col:18> 'int' 4
      | | |-CompoundStmt 0x15a8283b8 <line:15:5, line:19:5>
      | | | |-ImplicitCastExpr 0x15a8280a0 <line:16:7, col:24> '<dependent type>' contains-errors <LValueToRValue>
      | | | | `-RecoveryExpr 0x15a828070 <col:7, col:24> '<dependent type>' contains-errors lvalue
      | | | |   |-CXXDependentScopeMemberExpr 0x15a827fb0 <col:7, col:11> '<dependent type>' contains-errors lvalue ->hour
      | | | |   | `-RecoveryExpr 0x15a827f88 <col:7> '<dependent type>' contains-errors lvalue
      | | | |   |   `-DeclRefExpr 0x15a827f68 <col:7> 'int *' lvalue ParmVar 0x15a80dd28 'tm' 'int *'
      | | | |   `-ParenExpr 0x15a828050 <col:19, col:24> '<overloaded function type>' lvalue
      | | | |     `-UnresolvedLookupExpr 0x15a828010 <col:20> '<overloaded function type>' lvalue (no ADL) = 'uint' empty
      | | | |-ImplicitCastExpr 0x15a828130 <col:26, col:30> 'char' <LValueToRValue>
      | | | | `-ArraySubscriptExpr 0x15a828110 <col:26, col:30> 'char' lvalue
      | | | |   |-ImplicitCastExpr 0x15a8280f8 <col:26> 'char *' <LValueToRValue>
      | | | |   | `-DeclRefExpr 0x15a8280b8 <col:26> 'char *' lvalue Var 0x15a80e270 'to' 'char *'
      | | | |   `-IntegerLiteral 0x15a8280d8 <col:29> 'int' 4
      | | | |-ImplicitCastExpr 0x15a828280 <line:17:7, col:24> '<dependent type>' contains-errors <LValueToRValue>
      | | | | `-RecoveryExpr 0x15a828250 <col:7, col:24> '<dependent type>' contains-errors lvalue
      | | | |   |-CXXDependentScopeMemberExpr 0x15a828190 <col:7, col:11> '<dependent type>' contains-errors lvalue ->minute
      | | | |   | `-RecoveryExpr 0x15a828168 <col:7> '<dependent type>' contains-errors lvalue
      | | | |   |   `-DeclRefExpr 0x15a828148 <col:7> 'int *' lvalue ParmVar 0x15a80dd28 'tm' 'int *'
      | | | |   `-ParenExpr 0x15a828230 <col:19, col:24> '<overloaded function type>' lvalue
      | | | |     `-UnresolvedLookupExpr 0x15a8281f0 <col:20> '<overloaded function type>' lvalue (no ADL) = 'uint' empty
      | | | `-ImplicitCastExpr 0x15a828310 <col:26, col:30> 'char' <LValueToRValue>
      | | |   `-ArraySubscriptExpr 0x15a8282f0 <col:26, col:30> 'char' lvalue
      | | |     |-ImplicitCastExpr 0x15a8282d8 <col:26> 'char *' <LValueToRValue>
      | | |     | `-DeclRefExpr 0x15a828298 <col:26> 'char *' lvalue Var 0x15a80e270 'to' 'char *'
      | | |     `-IntegerLiteral 0x15a8282b8 <col:29> 'int' 5
      | | `-BinaryOperator 0x15a8291c0 <line:21:7, col:41> '<dependent type>' contains-errors '='
      | |   |-CXXDependentScopeMemberExpr 0x15a829048 <col:7, col:11> '<dependent type>' contains-errors lvalue ->hour
      | |   | `-RecoveryExpr 0x15a829020 <col:7> '<dependent type>' contains-errors lvalue
      | |   |   `-DeclRefExpr 0x15a829000 <col:7> 'int *' lvalue ParmVar 0x15a80dd28 'tm' 'int *'
      | |   `-BinaryOperator 0x15a8291a0 <col:17, col:41> '<dependent type>' contains-errors '='
      | |     |-CXXDependentScopeMemberExpr 0x15a8290b0 <col:17, col:21> '<dependent type>' contains-errors lvalue ->minute
      | |     | `-RecoveryExpr 0x15a829090 <col:17> '<dependent type>' contains-errors lvalue
      | |     `-BinaryOperator 0x15a829180 <col:29, col:41> '<dependent type>' contains-errors '='
      | |       |-CXXDependentScopeMemberExpr 0x15a829118 <col:29, col:33> '<dependent type>' contains-errors lvalue ->second
      | |       | `-RecoveryExpr 0x15a8290f8 <col:29> '<dependent type>' contains-errors lvalue
      | |       `-IntegerLiteral 0x15a829160 <col:41> 'int' 0
      | `-CompoundAssignOperator 0x15a829608 <line:25:5, col:12> 'char *' '+=' ComputeLHSTy='char *' ComputeResultTy='char *'
      |   |-UnaryOperator 0x15a8295b8 <col:5, col:6> 'char *' lvalue prefix '*' cannot overflow
      |   | `-ImplicitCastExpr 0x15a8295a0 <col:6> 'char **' <LValueToRValue>
      |   |   `-DeclRefExpr 0x15a829580 <col:6> 'char **' lvalue ParmVar 0x15a80ddd8 'pos' 'char **'
      |   `-ImplicitCastExpr 0x15a8295f0 <col:12> 'int' <LValueToRValue>
      |     `-DeclRefExpr 0x15a8295d0 <col:12> 'int' lvalue Var 0x15a80df80 'length' 'int'
      `-NullStmt 0x15a8297b8 <line:28:5>
