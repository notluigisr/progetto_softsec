`-FunctionDecl 0x14400ddf8  line:1:7 invalid X509_NAME2text 'char *(int *)'
  |-ParmVarDecl 0x14400dd28 <col:22, col:33> col:33 invalid name 'int *'
  `-CompoundStmt 0x144029498 <col:39, line:22:1>
    |-DeclStmt 0x14400df28 <line:2:5, col:15>
    | `-VarDecl 0x14400dec0 <col:5, col:11> col:11 used text 'char *'
    |-DeclStmt 0x14400dfd8 <line:4:5, col:10>
    | `-VarDecl 0x14400df70 <col:5, col:9> col:9 used n 'int'
    |-IfStmt 0x1440279e0 <line:7:5, line:8:29>
    | |-UnaryOperator 0x14400e398 <line:7:8, col:9> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x14400e380 <col:9> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x14400e360 <col:9> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x1440279d0 <line:8:9, col:29>
    |   `-ImplicitCastExpr 0x144027598 <col:16, col:29> 'char *' <IntegralToPointer>
    |     `-CallExpr 0x144027558 <col:16, col:29> 'int'
    |       |-ImplicitCastExpr 0x144027540 <col:16> 'int (*)()' <FunctionToPointerDecay>
    |       | `-DeclRefExpr 0x1440274b8 <col:16> 'int ()' Function 0x144027400 'str_dup' 'int ()'
    |       `-ImplicitCastExpr 0x144027580 <col:24> 'char *' <ArrayToPointerDecay>
    |         `-StringLiteral 0x144027520 <col:24> 'char[4]' lvalue "STR"
    |-CallExpr 0x144027da0 <line:9:5, line:10:66> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x144027ae0 <line:9:5> 'int ()' Function 0x144027a28 'X509_NAME_print_ex' 'int ()'
    | |-RecoveryExpr 0x144027c80 <col:24> '<dependent type>' contains-errors lvalue
    | |-RecoveryExpr 0x144027b18 <col:29> '<dependent type>' contains-errors lvalue
    | |-IntegerLiteral 0x144027b38 <col:35> 'int' 0
    | `-BinaryOperator 0x144027d80 <line:10:9, col:52> '<dependent type>' contains-errors '&'
    |   |-BinaryOperator 0x144027d10 <col:9, col:28> '<dependent type>' contains-errors '&'
    |   | |-RecoveryExpr 0x144027ca0 <col:9> '<dependent type>' contains-errors lvalue
    |   | `-UnaryOperator 0x144027cf8 <col:27, col:28> '<dependent type>' contains-errors prefix '~' cannot overflow
    |   |   `-ImplicitCastExpr 0x144027ce0 <col:28> '<dependent type>' contains-errors <LValueToRValue>
    |   |     `-RecoveryExpr 0x144027cc0 <col:28> '<dependent type>' contains-errors lvalue
    |   `-UnaryOperator 0x144027d68 <col:51, col:52> '<dependent type>' contains-errors prefix '~' cannot overflow
    |     `-ImplicitCastExpr 0x144027d50 <col:52> '<dependent type>' contains-errors <LValueToRValue>
    |       `-RecoveryExpr 0x144027d30 <col:52> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x144027fa8 <line:11:5, col:22> 'int' contains-errors '='
    | |-DeclRefExpr 0x144027de0 <col:5> 'int' lvalue Var 0x14400df70 'n' 'int'
    | `-CallExpr 0x144027f80 <col:7, col:22> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x144027ee0 <col:7> 'int ()' Function 0x144027e28 'BIO_pending' 'int ()'
    |   `-RecoveryExpr 0x144027f60 <col:19> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x144029330 <line:14:5, line:18:5>
    | |-BinaryOperator 0x144028318 <line:14:8, col:10> 'int' '<'
    | | |-ImplicitCastExpr 0x144028300 <col:8> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1440282c0 <col:8> 'int' lvalue Var 0x14400df70 'n' 'int'
    | | `-IntegerLiteral 0x1440282e0 <col:10> 'int' 0
    | `-CompoundStmt 0x144029310 <col:13, line:18:5>
    |   |-CallExpr 0x144029210 <line:16:9, col:22> 'int'
    |   | |-ImplicitCastExpr 0x1440291f8 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x1440291b8 <col:9> 'int ()' Function 0x144029100 'str_free' 'int ()'
    |   | `-ImplicitCastExpr 0x144029238 <col:18> 'char *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x1440291d8 <col:18> 'char *' lvalue Var 0x14400dec0 'text' 'char *'
    |   `-ReturnStmt 0x144029300 <line:17:9, col:29>
    |     `-ImplicitCastExpr 0x1440292e8 <col:16, col:29> 'char *' <IntegralToPointer>
    |       `-CallExpr 0x1440292a8 <col:16, col:29> 'int'
    |         |-ImplicitCastExpr 0x144029290 <col:16> 'int (*)()' <FunctionToPointerDecay>
    |         | `-DeclRefExpr 0x144029250 <col:16> 'int ()' Function 0x144027400 'str_dup' 'int ()'
    |         `-ImplicitCastExpr 0x1440292d0 <col:24> 'char *' <ArrayToPointerDecay>
    |           `-StringLiteral 0x144029270 <col:24> 'char[4]' lvalue "STR"
    |-BinaryOperator 0x144029410 <line:19:5, col:13> 'char' '='
    | |-ArraySubscriptExpr 0x1440293c0 <col:5, col:11> 'char' lvalue
    | | |-ImplicitCastExpr 0x144029390 <col:5> 'char *' <LValueToRValue>
    | | | `-DeclRefExpr 0x144029350 <col:5> 'char *' lvalue Var 0x14400dec0 'text' 'char *'
    | | `-ImplicitCastExpr 0x1440293a8 <col:10> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x144029370 <col:10> 'int' lvalue Var 0x14400df70 'n' 'int'
    | `-ImplicitCastExpr 0x1440293f8 <col:13> 'char' <IntegralCast>
    |   `-CharacterLiteral 0x1440293e0 <col:13> 'int' 0
    `-ReturnStmt 0x144029488 <line:21:5, col:12>
      `-ImplicitCastExpr 0x144029470 <col:12> 'char *' <LValueToRValue>
        `-DeclRefExpr 0x144029450 <col:12> 'char *' lvalue Var 0x14400dec0 'text' 'char *'
