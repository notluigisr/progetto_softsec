`-FunctionDecl 0x12d008518  line:1:1 invalid sidNormalize 'int (int, int *, int *, struct berval *, struct berval *, void *)'
  |-ParmVarDecl 0x12c80dcf0 <line:2:2, col:14> col:14 invalid usage 'int'
  |-ParmVarDecl 0x12c80dda8 <line:3:2, col:10> col:10 invalid syntax 'int *'
  |-ParmVarDecl 0x12c80de28 <line:4:2, col:16> col:16 invalid mr 'int *'
  |-ParmVarDecl 0x12d008228 <line:5:2, col:17> col:17 used val 'struct berval *'
  |-ParmVarDecl 0x12d008318 <line:6:2, col:17> col:17 used normalized 'struct berval *'
  |-ParmVarDecl 0x12d008398 <line:7:2, col:8> col:8 used ctx 'void *'
  `-CompoundStmt 0x12d008a30 <line:8:1, line:14:1>
    |-IfStmt 0x12d0086f0 <line:9:2, line:11:2>
    | |-BinaryOperator 0x12d008670 <line:9:7, col:22> 'int' contains-errors '!='
    | | |-RecoveryExpr 0x12d008628 <col:7, col:12> '<dependent type>' contains-errors lvalue
    | | | `-DeclRefExpr 0x12d0085f0 <col:7> 'struct berval *' lvalue ParmVar 0x12d008228 'val' 'struct berval *'
    | | `-IntegerLiteral 0x12d008650 <col:22> 'int' 3
    | `-CompoundStmt 0x12d0086d8 <col:26, line:11:2>
    |   `-ReturnStmt 0x12d0086c8 <line:10:3, col:10>
    |     `-RecoveryExpr 0x12d0086a8 <col:10> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x12d008a20 <line:13:2, col:59>
      `-CallExpr 0x12d0089d0 <col:9, col:59> '<dependent type>' contains-errors
        |-DeclRefExpr 0x12d008870 <col:9> 'int ()' Function 0x12d0087b8 'hexNormalize' 'int ()'
        |-IntegerLiteral 0x12d008890 <col:23> 'int' 0
        |-RecoveryExpr 0x12d008990 <col:26> '<dependent type>' contains-errors lvalue
        |-RecoveryExpr 0x12d0089b0 <col:32> '<dependent type>' contains-errors lvalue
        |-DeclRefExpr 0x12d0088e0 <col:38> 'struct berval *' lvalue ParmVar 0x12d008228 'val' 'struct berval *'
        |-DeclRefExpr 0x12d008900 <col:43> 'struct berval *' lvalue ParmVar 0x12d008318 'normalized' 'struct berval *'
        `-DeclRefExpr 0x12d008920 <col:55> 'void *' lvalue ParmVar 0x12d008398 'ctx' 'void *'
