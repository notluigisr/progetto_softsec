`-FunctionDecl 0x12e9109a8  line:1:1 invalid njs_string_decode_uri_cp 'int (const int *, const char **, const char *, int)'
  |-ParmVarDecl 0x12e9106f0 <col:26, col:40> col:40 invalid hex 'const int *'
  |-ParmVarDecl 0x12e9107a8 <col:45, col:60> col:60 used start 'const char **'
  |-ParmVarDecl 0x12e910828 <line:2:5, col:19> col:19 used end 'const char *'
  |-ParmVarDecl 0x12e9108a8 <col:24, col:35> col:35 invalid expect_percent 'int'
  `-CompoundStmt 0x12e011380 <line:3:1, line:35:1>
    |-DeclStmt 0x12e910af0 <line:6:5, col:29>
    | `-VarDecl 0x12e910a88 <col:5, col:28> col:28 used p 'const char *'
    |-CallExpr 0x12e910d10 <line:9:5, col:30> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x12e910c60 <col:5> 'int ()' Function 0x12e910ba8 'njs_utf8_decode_init' 'int ()'
    | `-UnaryOperator 0x12e910cf8 <col:26, col:27> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   `-RecoveryExpr 0x12e910cd8 <col:27> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x12e010c78 <line:12:5, line:14:5>
    | |-CallExpr 0x12e010b38 <line:12:9, col:32> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x12e010a60 <col:9> 'int ()' Function 0x12e0109a8 'njs_fast_path' 'int ()'
    | | `-BinaryOperator 0x12e010b18 <col:23, col:29> 'int' contains-errors '!='
    | |   |-RecoveryExpr 0x12e010af8 <col:23> '<dependent type>' contains-errors lvalue
    | |   `-CharacterLiteral 0x12e010a98 <col:29> 'int' 37
    | `-CompoundStmt 0x12e010c60 <col:35, line:14:5>
    |   `-ReturnStmt 0x12e010c50 <line:13:9, col:53>
    |     `-ConditionalOperator 0x12e010c20 <col:16, col:53> '<dependent type>' contains-errors
    |       |-RecoveryExpr 0x12e010b60 <col:16> '<dependent type>' contains-errors lvalue
    |       |-RecoveryExpr 0x12e010be0 <col:33> '<dependent type>' contains-errors lvalue
    |       `-RecoveryExpr 0x12e010c00 <col:53> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x12e010d20 <line:16:5, col:10> 'const char *' '='
    | |-DeclRefExpr 0x12e010c98 <col:5> 'const char *' lvalue Var 0x12e910a88 'p' 'const char *'
    | `-ImplicitCastExpr 0x12e010d08 <col:9, col:10> 'const char *' <LValueToRValue>
    |   `-UnaryOperator 0x12e010cf0 <col:9, col:10> 'const char *' lvalue prefix '*' cannot overflow
    |     `-ImplicitCastExpr 0x12e010cd8 <col:10> 'const char **' <LValueToRValue>
    |       `-DeclRefExpr 0x12e010cb8 <col:10> 'const char **' lvalue ParmVar 0x12e9107a8 'start' 'const char **'
    |-IfStmt 0x12e011000 <line:18:5, line:20:5>
    | |-CallExpr 0x12e010f78 <line:18:9, col:37> 'int'
    | | |-ImplicitCastExpr 0x12e010f60 <col:9> 'int (*)()' <FunctionToPointerDecay>
    | | | `-DeclRefExpr 0x12e010e20 <col:9> 'int ()' Function 0x12e010d68 'njs_slow_path' 'int ()'
    | | `-BinaryOperator 0x12e010f10 <col:23, col:34> 'int' '>='
    | |   |-ParenExpr 0x12e010eb8 <col:23, col:29> 'const char *'
    | |   | `-BinaryOperator 0x12e010e98 <col:24, col:28> 'const char *' '+'
    | |   |   |-ImplicitCastExpr 0x12e010e80 <col:24> 'const char *' <LValueToRValue>
    | |   |   | `-DeclRefExpr 0x12e010e40 <col:24> 'const char *' lvalue Var 0x12e910a88 'p' 'const char *'
    | |   |   `-IntegerLiteral 0x12e010e60 <col:28> 'int' 1
    | |   `-ImplicitCastExpr 0x12e010ef8 <col:34> 'const char *' <LValueToRValue>
    | |     `-DeclRefExpr 0x12e010ed8 <col:34> 'const char *' lvalue ParmVar 0x12e910828 'end' 'const char *'
    | `-CompoundStmt 0x12e010fe8 <col:40, line:20:5>
    |   `-ReturnStmt 0x12e010fd8 <line:19:9, col:16>
    |     `-RecoveryExpr 0x12e010fb8 <col:16> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x12e011150 <line:23:5, line:25:5>
    | |-RecoveryExpr 0x12e011120 <line:23:9, col:29> '_Bool' contains-errors
    | `-CompoundStmt 0x12e011140 <col:32, line:25:5>
    |-IfStmt 0x12e0112a0 <line:28:5, line:30:5>
    | |-RecoveryExpr 0x12e011270 <line:28:9, col:29> '_Bool' contains-errors
    | `-CompoundStmt 0x12e011290 <col:32, line:30:5>
    `-CompoundAssignOperator 0x12e011330 <line:32:5, col:15> 'const char *' '+=' ComputeLHSTy='const char *' ComputeResultTy='const char *'
      |-UnaryOperator 0x12e0112f8 <col:5, col:6> 'const char *' lvalue prefix '*' cannot overflow
      | `-ImplicitCastExpr 0x12e0112e0 <col:6> 'const char **' <LValueToRValue>
      |   `-DeclRefExpr 0x12e0112c0 <col:6> 'const char **' lvalue ParmVar 0x12e9107a8 'start' 'const char **'
      `-IntegerLiteral 0x12e011310 <col:15> 'int' 2
