`-FunctionDecl 0x15580dfa8  line:1:5 diskutil_ch 'int (const char *, const char *, const char *, const int)'
  |-ParmVarDecl 0x15580dcd8 <col:17, col:29> col:29 used path 'const char *'
  |-ParmVarDecl 0x15580dd58 <col:35, col:47> col:47 used user 'const char *'
  |-ParmVarDecl 0x15580ddd8 <col:53, col:65> col:65 used group 'const char *'
  |-ParmVarDecl 0x15580de58 <col:72, col:82> col:82 used perms 'const int'
  `-CompoundStmt 0x155828250 <line:2:1, line:36:1>
    |-DeclStmt 0x15580e188 <line:3:5, col:24>
    | `-VarDecl 0x15580e0d0 <col:5, col:20> col:11 used output 'char *' cinit
    |   `-RecoveryExpr 0x15580e168 <col:20> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x155827800 <line:5:5, col:22> 'int' ','
    | |-CallExpr 0x15580e378 <col:5, col:19> 'int'
    | | |-ImplicitCastExpr 0x15580e360 <col:5> 'int (*)()' <FunctionToPointerDecay>
    | | | `-DeclRefExpr 0x15580e2b0 <col:5> 'int ()' Function 0x15580e1f8 'LOGDEBUG' 'int ()'
    | | `-ImplicitCastExpr 0x15580e3a0 <col:14> 'char *' <ArrayToPointerDecay>
    | |   `-StringLiteral 0x15580e310 <col:14> 'char[4]' lvalue "STR"
    | `-ImplicitCastExpr 0x15580e3d8 <col:22> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x15580e3b8 <col:22> 'const int' lvalue ParmVar 0x15580de58 'perms' 'const int'
    `-IfStmt 0x155828230 <line:7:5, line:33:5>
      |-ImplicitCastExpr 0x155827840 <line:7:9> 'const char *' <LValueToRValue>
      | `-DeclRefExpr 0x155827820 <col:9> 'const char *' lvalue ParmVar 0x15580dcd8 'path' 'const char *'
      `-CompoundStmt 0x155828208 <col:15, line:33:5>
        |-IfStmt 0x155827cb8 <line:8:9, line:14:9>
        | |-ImplicitCastExpr 0x155827878 <line:8:13> 'const char *' <LValueToRValue>
        | | `-DeclRefExpr 0x155827858 <col:13> 'const char *' lvalue ParmVar 0x15580dd58 'user' 'const char *'
        | `-CompoundStmt 0x155827c98 <col:19, line:14:9>
        |   |-IfStmt 0x155827b00 <line:10:13, line:12:13>
        |   | |-UnaryOperator 0x155827ac0 <line:10:17, col:18> 'int' contains-errors prefix '!' cannot overflow
        |   | | `-ImplicitCastExpr 0x155827aa8 <col:18> 'char *' contains-errors <LValueToRValue>
        |   | |   `-DeclRefExpr 0x155827a88 <col:18> 'char *' contains-errors lvalue Var 0x15580e0d0 'output' 'char *'
        |   | `-CompoundStmt 0x155827af0 <col:26, line:12:13>
        |   `-CallExpr 0x155827c58 <line:13:13, col:29> 'int' contains-errors
        |     |-ImplicitCastExpr 0x155827c40 <col:13> 'int (*)()' <FunctionToPointerDecay>
        |     | `-DeclRefExpr 0x155827c00 <col:13> 'int ()' Function 0x155827b48 'EUCA_FREE' 'int ()'
        |     `-ImplicitCastExpr 0x155827c80 <col:23> 'char *' contains-errors <LValueToRValue>
        |       `-DeclRefExpr 0x155827c20 <col:23> 'char *' contains-errors lvalue Var 0x15580e0d0 'output' 'char *'
        |-IfStmt 0x155827f78 <line:16:9, line:22:9>
        | |-ImplicitCastExpr 0x155827cf8 <line:16:13> 'const char *' <LValueToRValue>
        | | `-DeclRefExpr 0x155827cd8 <col:13> 'const char *' lvalue ParmVar 0x15580ddd8 'group' 'const char *'
        | `-CompoundStmt 0x155827f58 <col:20, line:22:9>
        |   |-IfStmt 0x155827ea0 <line:18:13, line:20:13>
        |   | |-UnaryOperator 0x155827e60 <line:18:17, col:18> 'int' contains-errors prefix '!' cannot overflow
        |   | | `-ImplicitCastExpr 0x155827e48 <col:18> 'char *' contains-errors <LValueToRValue>
        |   | |   `-DeclRefExpr 0x155827e28 <col:18> 'char *' contains-errors lvalue Var 0x15580e0d0 'output' 'char *'
        |   | `-CompoundStmt 0x155827e90 <col:26, line:20:13>
        |   `-CallExpr 0x155827f18 <line:21:13, col:29> 'int' contains-errors
        |     |-ImplicitCastExpr 0x155827f00 <col:13> 'int (*)()' <FunctionToPointerDecay>
        |     | `-DeclRefExpr 0x155827ec0 <col:13> 'int ()' Function 0x155827b48 'EUCA_FREE' 'int ()'
        |     `-ImplicitCastExpr 0x155827f40 <col:23> 'char *' contains-errors <LValueToRValue>
        |       `-DeclRefExpr 0x155827ee0 <col:23> 'char *' contains-errors lvalue Var 0x15580e0d0 'output' 'char *'
        `-IfStmt 0x1558281e8 <line:24:9, line:30:9>
          |-BinaryOperator 0x155827ff0 <line:24:13, col:21> 'int' '>'
          | |-ImplicitCastExpr 0x155827fd8 <col:13> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x155827f98 <col:13> 'const int' lvalue ParmVar 0x15580de58 'perms' 'const int'
          | `-IntegerLiteral 0x155827fb8 <col:21> 'int' 0
          `-CompoundStmt 0x1558281c8 <col:24, line:30:9>
            |-IfStmt 0x155828110 <line:26:13, line:28:13>
            | |-UnaryOperator 0x1558280e8 <line:26:17, col:18> 'int' contains-errors prefix '!' cannot overflow
            | | `-ImplicitCastExpr 0x1558280d0 <col:18> 'char *' contains-errors <LValueToRValue>
            | |   `-DeclRefExpr 0x1558280b0 <col:18> 'char *' contains-errors lvalue Var 0x15580e0d0 'output' 'char *'
            | `-CompoundStmt 0x155828100 <col:26, line:28:13>
            `-CallExpr 0x155828188 <line:29:13, col:29> 'int' contains-errors
              |-ImplicitCastExpr 0x155828170 <col:13> 'int (*)()' <FunctionToPointerDecay>
              | `-DeclRefExpr 0x155828130 <col:13> 'int ()' Function 0x155827b48 'EUCA_FREE' 'int ()'
              `-ImplicitCastExpr 0x1558281b0 <col:23> 'char *' contains-errors <LValueToRValue>
                `-DeclRefExpr 0x155828150 <col:23> 'char *' contains-errors lvalue Var 0x15580e0d0 'output' 'char *'
