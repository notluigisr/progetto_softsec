`-FunctionDecl 0x12e928608  line:1:13 invalid fix_log 'int (char **, const char *, const char *, int, void (*)(char *))' static
  |-ParmVarDecl 0x12e928128 <col:21, col:28> col:28 used logname 'char **'
  |-ParmVarDecl 0x12e9281a8 <col:37, col:49> col:49 used default_logname 'const char *'
  |-ParmVarDecl 0x12e928228 <line:2:21, col:32> col:32 used ext 'const char *'
  |-ParmVarDecl 0x12e9282a8 <col:37, col:42> col:42 invalid enabled 'int'
  |-ParmVarDecl 0x12e928498 <col:51, col:71> col:58 used reopen 'void (*)(char *)'
  `-CompoundStmt 0x12e942428 <line:3:1, line:19:1>
    |-IfStmt 0x12e941f78 <line:4:3, line:11:3>
    | |-UnaryOperator 0x12e928740 <line:4:7, col:9> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x12e928728 <col:8, col:9> 'char *' <LValueToRValue>
    | |   `-UnaryOperator 0x12e928710 <col:8, col:9> 'char *' lvalue prefix '*' cannot overflow
    | |     `-ImplicitCastExpr 0x12e9286f8 <col:9> 'char **' <LValueToRValue>
    | |       `-DeclRefExpr 0x12e9286d8 <col:9> 'char **' lvalue ParmVar 0x12e928128 'logname' 'char **'
    | `-CompoundStmt 0x12e941f50 <line:5:3, line:11:3>
    |   |-DeclStmt 0x12e9287e8 <line:6:5, col:25>
    |   | `-VarDecl 0x12e928780 <col:5, col:10> col:10 invalid buff 'char'
    |   |-BinaryOperator 0x12e941e48 <line:7:5, line:8:43> 'char *' contains-errors '='
    |   | |-UnaryOperator 0x12e941d78 <line:7:5, col:6> 'char *' lvalue prefix '*' cannot overflow
    |   | | `-ImplicitCastExpr 0x12e941d60 <col:6> 'char **' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x12e941800 <col:6> 'char **' lvalue ParmVar 0x12e928128 'logname' 'char **'
    |   | `-CallExpr 0x12e941e18 <col:15, line:8:43> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x12e9419b0 <line:7:15> 'int ()' Function 0x12e9418f8 'my_strdup' 'int ()'
    |   |   |-CallExpr 0x12e941b30 <col:25, col:65> '<dependent type>' contains-errors
    |   |   | |-DeclRefExpr 0x12e941ab0 <col:25> 'int ()' Function 0x12e9419f8 'make_log_name' 'int ()'
    |   |   | |-RecoveryExpr 0x12e941ad0 <col:39> '<dependent type>' contains-errors lvalue
    |   |   | |-DeclRefExpr 0x12e941af0 <col:45> 'const char *' lvalue ParmVar 0x12e9281a8 'default_logname' 'const char *'
    |   |   | `-DeclRefExpr 0x12e941b10 <col:62> 'const char *' lvalue ParmVar 0x12e928228 'ext' 'const char *'
    |   |   `-CallExpr 0x12e941df0 <line:8:25, col:42> '<dependent type>' contains-errors
    |   |     |-DeclRefExpr 0x12e941c48 <col:25> 'int ()' Function 0x12e941b90 'MYF' 'int ()'
    |   |     `-BinaryOperator 0x12e941dd0 <col:29, col:36> '<dependent type>' contains-errors '+'
    |   |       |-RecoveryExpr 0x12e941d90 <col:29> '<dependent type>' contains-errors lvalue
    |   |       `-RecoveryExpr 0x12e941db0 <col:36> '<dependent type>' contains-errors lvalue
    |   `-IfStmt 0x12e941f30 <line:9:5, line:10:14>
    |     |-UnaryOperator 0x12e941ed0 <line:9:9, col:11> 'int' prefix '!' cannot overflow
    |     | `-ImplicitCastExpr 0x12e941eb8 <col:10, col:11> 'char *' <LValueToRValue>
    |     |   `-UnaryOperator 0x12e941ea0 <col:10, col:11> 'char *' lvalue prefix '*' cannot overflow
    |     |     `-ImplicitCastExpr 0x12e941e88 <col:11> 'char **' <LValueToRValue>
    |     |       `-DeclRefExpr 0x12e941e68 <col:11> 'char **' lvalue ParmVar 0x12e928128 'logname' 'char **'
    |     `-ReturnStmt 0x12e941f20 <line:10:7, col:14>
    |       `-RecoveryExpr 0x12e941f00 <col:14> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x12e942128 <line:13:3, col:51> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x12e942078 <col:3> 'int ()' Function 0x12e941fc0 'mysql_mutex_unlock' 'int ()'
    | `-UnaryOperator 0x12e942110 <col:22, col:23> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   `-RecoveryExpr 0x12e9420f0 <col:23> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x12e942238 <line:14:3, line:15:20>
    | |-RecoveryExpr 0x12e942150 <line:14:7> '<dependent type>' contains-errors lvalue
    | `-CallExpr 0x12e9421f8 <line:15:5, col:20> 'void'
    |   |-ImplicitCastExpr 0x12e9421e0 <col:5> 'void (*)(char *)' <LValueToRValue>
    |   | `-DeclRefExpr 0x12e942170 <col:5> 'void (*)(char *)' lvalue ParmVar 0x12e928498 'reopen' 'void (*)(char *)'
    |   `-ImplicitCastExpr 0x12e942220 <col:12, col:13> 'char *' <LValueToRValue>
    |     `-UnaryOperator 0x12e9421c8 <col:12, col:13> 'char *' lvalue prefix '*' cannot overflow
    |       `-ImplicitCastExpr 0x12e9421b0 <col:13> 'char **' <LValueToRValue>
    |         `-DeclRefExpr 0x12e942190 <col:13> 'char **' lvalue ParmVar 0x12e928128 'logname' 'char **'
    `-CallExpr 0x12e9423e8 <line:17:3, col:49> '<dependent type>' contains-errors
      |-DeclRefExpr 0x12e942338 <col:3> 'int ()' Function 0x12e942280 'mysql_mutex_lock' 'int ()'
      `-UnaryOperator 0x12e9423d0 <col:20, col:21> '<dependent type>' contains-errors prefix '&' cannot overflow
        `-RecoveryExpr 0x12e9423b0 <col:21> '<dependent type>' contains-errors lvalue
