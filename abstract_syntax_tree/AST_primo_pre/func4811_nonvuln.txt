`-FunctionDecl 0x12800dec8  line:1:1 quoted_substring 'int (char *, int, int)'
  |-ParmVarDecl 0x12800dcd8 <line:2:6, col:12> col:12 used string 'char *'
  |-ParmVarDecl 0x12800dd58 <line:3:6, col:10> col:10 used start 'int'
  |-ParmVarDecl 0x12800ddd8 <col:6, col:17> col:17 used end 'int'
  `-CompoundStmt 0x12802a9b8 <line:4:1, line:38:1>
    |-DeclStmt 0x12800e0e8 <line:5:3, col:22>
    | |-VarDecl 0x12800dfe8 <col:3, col:16> col:16 used len 'int' register
    | `-VarDecl 0x12800e068 <col:3, col:21> col:21 used l 'int' register
    |-DeclStmt 0x12800e2a0 <line:6:3, col:32>
    | |-VarDecl 0x12800e118 <col:3, col:18> col:18 used result 'char *' register
    | |-VarDecl 0x12800e198 <col:3, col:27> col:27 used s 'char *' register
    | `-VarDecl 0x12800e218 <col:3, col:31> col:31 used r 'char *' register
    |-BinaryOperator 0x12800e368 <line:8:3, col:15> 'int' '='
    | |-DeclRefExpr 0x12800e2b8 <col:3> 'int' lvalue Var 0x12800dfe8 'len' 'int'
    | `-BinaryOperator 0x12800e348 <col:9, col:15> 'int' '-'
    |   |-ImplicitCastExpr 0x12800e318 <col:9> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x12800e2d8 <col:9> 'int' lvalue ParmVar 0x12800ddd8 'end' 'int'
    |   `-ImplicitCastExpr 0x12800e330 <col:15> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x12800e2f8 <col:15> 'int' lvalue ParmVar 0x12800dd58 'start' 'int'
    |-ForStmt 0x128026ab8 <line:11:3, line:21:5>
    | |-BinaryOperator 0x128026660 <line:11:8, col:24> 'int' ','
    | | |-BinaryOperator 0x12800e3e0 <col:8, col:12> 'char *' '='
    | | | |-DeclRefExpr 0x12800e388 <col:8> 'char *' lvalue Var 0x12800e198 's' 'char *'
    | | | `-ImplicitCastExpr 0x12800e3c8 <col:12> 'char *' <LValueToRValue>
    | | |   `-DeclRefExpr 0x12800e3a8 <col:12> 'char *' lvalue ParmVar 0x12800dcd8 'string' 'char *'
    | | `-BinaryOperator 0x128026640 <col:20, col:24> 'int' '='
    | |   |-DeclRefExpr 0x128026600 <col:20> 'int' lvalue Var 0x12800e068 'l' 'int'
    | |   `-IntegerLiteral 0x128026620 <col:24> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x128026790 <col:27, col:37> 'int' '&&'
    | | |-ImplicitCastExpr 0x128026778 <col:27, col:28> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x128026760 <col:27, col:28> 'char' <LValueToRValue>
    | | |   `-UnaryOperator 0x1280266b8 <col:27, col:28> 'char' lvalue prefix '*' cannot overflow
    | | |     `-ImplicitCastExpr 0x1280266a0 <col:28> 'char *' <LValueToRValue>
    | | |       `-DeclRefExpr 0x128026680 <col:28> 'char *' lvalue Var 0x12800e198 's' 'char *'
    | | `-BinaryOperator 0x128026740 <col:33, col:37> 'int' '<'
    | |   |-ImplicitCastExpr 0x128026710 <col:33> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x1280266d0 <col:33> 'int' lvalue Var 0x12800e068 'l' 'int'
    | |   `-ImplicitCastExpr 0x128026728 <col:37> 'int' <LValueToRValue>
    | |     `-DeclRefExpr 0x1280266f0 <col:37> 'int' lvalue ParmVar 0x12800dd58 'start' 'int'
    | |-<<<NULL>>>
    | `-CompoundStmt 0x128026a90 <line:12:5, line:21:5>
    |   |-IfStmt 0x128026950 <line:13:7, line:17:2>
    |   | |-BinaryOperator 0x1280268d0 <line:13:11, col:17> 'int' contains-errors '=='
    |   | | |-UnaryOperator 0x128026898 <col:11, col:12> 'char' lvalue prefix '*' cannot overflow
    |   | | | `-ImplicitCastExpr 0x128026880 <col:12> 'char *' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x1280267b0 <col:12> 'char *' lvalue Var 0x12800e198 's' 'char *'
    |   | | `-RecoveryExpr 0x1280268b0 <col:17> '<dependent type>' contains-errors lvalue
    |   | `-CompoundStmt 0x128026930 <line:14:2, line:17:2>
    |   |   |-UnaryOperator 0x128026910 <line:15:4, col:5> 'char *' postfix '++'
    |   |   | `-DeclRefExpr 0x1280268f0 <col:4> 'char *' lvalue Var 0x12800e198 's' 'char *'
    |   |   `-ContinueStmt 0x128026928 <line:16:4>
    |   |-UnaryOperator 0x128026990 <line:18:7, col:8> 'int' postfix '++'
    |   | `-DeclRefExpr 0x128026970 <col:7> 'int' lvalue Var 0x12800e068 'l' 'int'
    |   `-IfStmt 0x128026a70 <line:19:7, line:20:2>
    |     |-BinaryOperator 0x128026a48 <line:19:11, col:17> 'int' '=='
    |     | |-ImplicitCastExpr 0x128026a30 <col:11, col:12> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x128026a18 <col:11, col:12> 'char' <LValueToRValue>
    |     | |   `-UnaryOperator 0x1280269e0 <col:11, col:12> 'char' lvalue prefix '*' cannot overflow
    |     | |     `-ImplicitCastExpr 0x1280269c8 <col:12> 'char *' <LValueToRValue>
    |     | |       `-DeclRefExpr 0x1280269a8 <col:12> 'char *' lvalue Var 0x12800e198 's' 'char *'
    |     | `-IntegerLiteral 0x1280269f8 <col:17> 'int' 0
    |     `-BreakStmt 0x128026a68 <line:20:2>
    |-BinaryOperator 0x128027218 <line:23:3, col:42> 'char *' '='
    | |-DeclRefExpr 0x128026af0 <col:3> 'char *' lvalue Var 0x12800e218 'r' 'char *'
    | `-BinaryOperator 0x1280271f8 <col:7, col:42> 'char *' '='
    |   |-DeclRefExpr 0x128026b10 <col:7> 'char *' lvalue Var 0x12800e118 'result' 'char *'
    |   `-CStyleCastExpr 0x1280271d0 <col:16, col:42> 'char *' <IntegralToPointer>
    |     `-CallExpr 0x128026d68 <col:24, col:42> 'int'
    |       |-ImplicitCastExpr 0x128026d50 <col:24> 'int (*)()' <FunctionToPointerDecay>
    |       | `-DeclRefExpr 0x128026c40 <col:24> 'int ()' Function 0x128026b88 'xmalloc' 'int ()'
    |       `-BinaryOperator 0x128026cf8 <col:33, col:41> 'int' '+'
    |         |-BinaryOperator 0x128026cb8 <col:33, col:35> 'int' '*'
    |         | |-IntegerLiteral 0x128026c60 <col:33> 'int' 2
    |         | `-ImplicitCastExpr 0x128026ca0 <col:35> 'int' <LValueToRValue>
    |         |   `-DeclRefExpr 0x128026c80 <col:35> 'int' lvalue Var 0x12800dfe8 'len' 'int'
    |         `-IntegerLiteral 0x128026cd8 <col:41> 'int' 1
    |-BinaryOperator 0x1280272e8 <line:26:3, col:16> 'char *' '='
    | |-DeclRefExpr 0x128027238 <col:3> 'char *' lvalue Var 0x12800e198 's' 'char *'
    | `-BinaryOperator 0x1280272c8 <col:7, col:16> 'char *' '+'
    |   |-ImplicitCastExpr 0x128027298 <col:7> 'char *' <LValueToRValue>
    |   | `-DeclRefExpr 0x128027258 <col:7> 'char *' lvalue ParmVar 0x12800dcd8 'string' 'char *'
    |   `-ImplicitCastExpr 0x1280272b0 <col:16> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x128027278 <col:16> 'int' lvalue Var 0x12800e068 'l' 'int'
    |-ForStmt 0x12802a880 <line:27:3, line:35:5>
    | |-BinaryOperator 0x128027348 <line:27:8, col:12> 'int' '='
    | | |-DeclRefExpr 0x128027308 <col:8> 'int' lvalue Var 0x12800e068 'l' 'int'
    | | `-IntegerLiteral 0x128027328 <col:12> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x1280273d8 <col:15, col:19> 'int' '<'
    | | |-ImplicitCastExpr 0x1280273a8 <col:15> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x128027368 <col:15> 'int' lvalue Var 0x12800e068 'l' 'int'
    | | `-ImplicitCastExpr 0x1280273c0 <col:19> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x128027388 <col:19> 'int' lvalue Var 0x12800dfe8 'len' 'int'
    | |-UnaryOperator 0x128027418 <col:24, col:25> 'char *' postfix '++'
    | | `-DeclRefExpr 0x1280273f8 <col:24> 'char *' lvalue Var 0x12800e198 's' 'char *'
    | `-CompoundStmt 0x12802a850 <line:28:5, line:35:5>
    |   |-IfStmt 0x12802a638 <line:29:7, line:30:11>
    |   | |-BinaryOperator 0x128027538 <line:29:11, col:17> 'int' contains-errors '=='
    |   | | |-UnaryOperator 0x128027500 <col:11, col:12> 'char' lvalue prefix '*' cannot overflow
    |   | | | `-ImplicitCastExpr 0x1280274e8 <col:12> 'char *' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x128027430 <col:12> 'char *' lvalue Var 0x12800e198 's' 'char *'
    |   | | `-RecoveryExpr 0x128027518 <col:17> '<dependent type>' contains-errors lvalue
    |   | `-BinaryOperator 0x12802a618 <line:30:2, col:11> 'char' '='
    |   |   |-UnaryOperator 0x128027590 <col:2, col:4> 'char' lvalue prefix '*' cannot overflow
    |   |   | `-UnaryOperator 0x128027578 <col:3, col:4> 'char *' postfix '++'
    |   |   |   `-DeclRefExpr 0x128027558 <col:3> 'char *' lvalue Var 0x12800e218 'r' 'char *'
    |   |   `-ImplicitCastExpr 0x12802a600 <col:9, col:11> 'char' <LValueToRValue>
    |   |     `-UnaryOperator 0x1280275e0 <col:9, col:11> 'char' lvalue prefix '*' cannot overflow
    |   |       `-UnaryOperator 0x1280275c8 <col:10, col:11> 'char *' postfix '++'
    |   |         `-DeclRefExpr 0x1280275a8 <col:10> 'char *' lvalue Var 0x12800e198 's' 'char *'
    |   |-BinaryOperator 0x12802a710 <line:31:7, col:15> 'char' '='
    |   | |-UnaryOperator 0x12802a690 <col:7, col:9> 'char' lvalue prefix '*' cannot overflow
    |   | | `-UnaryOperator 0x12802a678 <col:8, col:9> 'char *' postfix '++'
    |   | |   `-DeclRefExpr 0x12802a658 <col:8> 'char *' lvalue Var 0x12800e218 'r' 'char *'
    |   | `-ImplicitCastExpr 0x12802a6f8 <col:14, col:15> 'char' <LValueToRValue>
    |   |   `-UnaryOperator 0x12802a6e0 <col:14, col:15> 'char' lvalue prefix '*' cannot overflow
    |   |     `-ImplicitCastExpr 0x12802a6c8 <col:15> 'char *' <LValueToRValue>
    |   |       `-DeclRefExpr 0x12802a6a8 <col:15> 'char *' lvalue Var 0x12800e198 's' 'char *'
    |   |-UnaryOperator 0x12802a750 <line:32:7, col:8> 'int' postfix '++'
    |   | `-DeclRefExpr 0x12802a730 <col:7> 'int' lvalue Var 0x12800e068 'l' 'int'
    |   `-IfStmt 0x12802a830 <line:33:7, line:34:2>
    |     |-BinaryOperator 0x12802a808 <line:33:11, col:17> 'int' '=='
    |     | |-ImplicitCastExpr 0x12802a7f0 <col:11, col:12> 'int' <IntegralCast>
    |     | | `-ImplicitCastExpr 0x12802a7d8 <col:11, col:12> 'char' <LValueToRValue>
    |     | |   `-UnaryOperator 0x12802a7a0 <col:11, col:12> 'char' lvalue prefix '*' cannot overflow
    |     | |     `-ImplicitCastExpr 0x12802a788 <col:12> 'char *' <LValueToRValue>
    |     | |       `-DeclRefExpr 0x12802a768 <col:12> 'char *' lvalue Var 0x12800e198 's' 'char *'
    |     | `-IntegerLiteral 0x12802a7b8 <col:17> 'int' 0
    |     `-BreakStmt 0x12802a828 <line:34:2>
    |-BinaryOperator 0x12802a938 <line:36:3, col:8> 'char' '='
    | |-UnaryOperator 0x12802a8f0 <col:3, col:4> 'char' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x12802a8d8 <col:4> 'char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x12802a8b8 <col:4> 'char *' lvalue Var 0x12800e218 'r' 'char *'
    | `-ImplicitCastExpr 0x12802a920 <col:8> 'char' <IntegralCast>
    |   `-CharacterLiteral 0x12802a908 <col:8> 'int' 0
    `-ReturnStmt 0x12802a9a8 <line:37:3, col:10>
      `-ImplicitCastExpr 0x12802a990 <col:10> 'int' <PointerToIntegral>
        `-ImplicitCastExpr 0x12802a978 <col:10> 'char *' <LValueToRValue>
          `-DeclRefExpr 0x12802a958 <col:10> 'char *' lvalue Var 0x12800e118 'result' 'char *'
