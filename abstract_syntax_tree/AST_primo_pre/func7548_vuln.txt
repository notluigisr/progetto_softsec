`-FunctionDecl 0x126128320  line:1:13 array_cleanup 'void (char **, int)' static
  |-ParmVarDecl 0x126128180 <col:28, col:38> col:34 used arr 'char **'
  |-ParmVarDecl 0x126128200 <col:42, col:46> col:46 used arr_size 'int'
  `-CompoundStmt 0x126141aa8 <line:2:1, line:10:1>
    |-DeclStmt 0x1261284c0 <line:3:2, col:9>
    | `-VarDecl 0x126128438 <col:2, col:8> col:6 used i 'int' cinit
    |   `-IntegerLiteral 0x1261284a0 <col:8> 'int' 0
    |-ForStmt 0x1261419d8 <line:4:2, line:8:2>
    | |-BinaryOperator 0x126128518 <line:4:7, col:9> 'int' '='
    | | |-DeclRefExpr 0x1261284d8 <col:7> 'int' lvalue Var 0x126128438 'i' 'int'
    | | `-IntegerLiteral 0x1261284f8 <col:9> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x1261285a8 <col:12, col:15> 'int' '<'
    | | |-ImplicitCastExpr 0x126128578 <col:12> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x126128538 <col:12> 'int' lvalue Var 0x126128438 'i' 'int'
    | | `-ImplicitCastExpr 0x126128590 <col:15> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x126128558 <col:15> 'int' lvalue ParmVar 0x126128200 'arr_size' 'int'
    | |-UnaryOperator 0x1261285e8 <col:25, col:26> 'int' postfix '++'
    | | `-DeclRefExpr 0x1261285c8 <col:25> 'int' lvalue Var 0x126128438 'i' 'int'
    | `-CompoundStmt 0x1261419c0 <col:30, line:8:2>
    |   `-IfStmt 0x1261419a0 <line:5:3, line:7:3>
    |     |-ImplicitCastExpr 0x1261286d0 <line:5:7, col:14> 'char *' <LValueToRValue>
    |     | `-ArraySubscriptExpr 0x1261286b0 <col:7, col:14> 'char *' lvalue
    |     |   |-ImplicitCastExpr 0x126128698 <col:7> 'char **' <LValueToRValue>
    |     |   | `-DeclRefExpr 0x126128600 <col:7> 'char **' lvalue ParmVar 0x126128180 'arr' 'char **'
    |     |   `-BinaryOperator 0x126128678 <col:11, col:13> 'int' '*'
    |     |     |-ImplicitCastExpr 0x126128660 <col:11> 'int' <LValueToRValue>
    |     |     | `-DeclRefExpr 0x126128620 <col:11> 'int' lvalue Var 0x126128438 'i' 'int'
    |     |     `-IntegerLiteral 0x126128640 <col:13> 'int' 2
    |     `-CompoundStmt 0x126141988 <col:17, line:7:3>
    |       `-CallExpr 0x126141948 <line:6:4, col:19> 'int'
    |         |-ImplicitCastExpr 0x126141930 <col:4> 'int (*)()' <FunctionToPointerDecay>
    |         | `-DeclRefExpr 0x126141810 <col:4> 'int ()' Function 0x126128758 'efree' 'int ()'
    |         `-ImplicitCastExpr 0x126141970 <col:11, col:18> 'char *' <LValueToRValue>
    |           `-ArraySubscriptExpr 0x1261418e0 <col:11, col:18> 'char *' lvalue
    |             |-ImplicitCastExpr 0x1261418c8 <col:11> 'char **' <LValueToRValue>
    |             | `-DeclRefExpr 0x126141830 <col:11> 'char **' lvalue ParmVar 0x126128180 'arr' 'char **'
    |             `-BinaryOperator 0x1261418a8 <col:15, col:17> 'int' '*'
    |               |-ImplicitCastExpr 0x126141890 <col:15> 'int' <LValueToRValue>
    |               | `-DeclRefExpr 0x126141850 <col:15> 'int' lvalue Var 0x126128438 'i' 'int'
    |               `-IntegerLiteral 0x126141870 <col:17> 'int' 2
    `-CallExpr 0x126141a68 <line:9:2, col:11> 'int'
      |-ImplicitCastExpr 0x126141a50 <col:2> 'int (*)()' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x126141a10 <col:2> 'int ()' Function 0x126128758 'efree' 'int ()'
      `-ImplicitCastExpr 0x126141a90 <col:8> 'char **' <LValueToRValue>
        `-DeclRefExpr 0x126141a30 <col:8> 'char **' lvalue ParmVar 0x126128180 'arr' 'char **'
