`-FunctionDecl 0x144928208  line:2:19 invalid is_nan 'int (const float)' static
  |-ParmVarDecl 0x1449280f0 <col:26, col:38> col:38 used val 'const float'
  `-CompoundStmt 0x144928668 <col:43, line:12:7>
    |-IfStmt 0x144928570 <line:3:9, line:7:9>
    | |-BinaryOperator 0x144928328 <line:3:13, col:28> 'int' '=='
    | | |-UnaryExprOrTypeTraitExpr 0x1449282d0 <col:13, col:25> 'unsigned long' sizeof 'float'
    | | `-ImplicitCastExpr 0x144928310 <col:28> 'unsigned long' <IntegralCast>
    | |   `-IntegerLiteral 0x1449282f0 <col:28> 'int' 4
    | `-CompoundStmt 0x144928548 <col:31, line:7:9>
    |   |-DeclStmt 0x1449283c8 <line:4:11, col:25>
    |   | `-VarDecl 0x144928360 <col:11, col:24> col:24 used u 'unsigned int'
    |   |-RecoveryExpr 0x144928410 <line:5:11> '<dependent type>' contains-errors lvalue
    |   `-ReturnStmt 0x144928538 <line:6:11, col:33>
    |     `-BinaryOperator 0x144928518 <col:18, col:33> 'int' '>'
    |       |-ParenExpr 0x1449284c0 <col:18, col:31> 'unsigned int'
    |       | `-BinaryOperator 0x1449284a0 <col:19, col:21> 'unsigned int' '&'
    |       |   |-ImplicitCastExpr 0x144928470 <col:19> 'unsigned int' <LValueToRValue>
    |       |   | `-DeclRefExpr 0x144928430 <col:19> 'unsigned int' lvalue Var 0x144928360 'u' 'unsigned int'
    |       |   `-ImplicitCastExpr 0x144928488 <col:21> 'unsigned int' <IntegralCast>
    |       |     `-IntegerLiteral 0x144928450 <col:21> 'int' 2147483647
    |       `-ImplicitCastExpr 0x144928500 <col:33> 'unsigned int' <IntegralCast>
    |         `-IntegerLiteral 0x1449284e0 <col:33> 'int' 2139095040
    `-ReturnStmt 0x144928658 <line:11:9, col:26>
      `-UnaryOperator 0x144928640 <col:16, col:26> 'int' prefix '!' cannot overflow
        `-ParenExpr 0x144928620 <col:17, col:26> 'int'
          `-BinaryOperator 0x144928600 <col:18, col:23> 'int' '=='
            |-ImplicitCastExpr 0x1449285d0 <col:18> 'float' <LValueToRValue>
            | `-DeclRefExpr 0x144928590 <col:18> 'const float' lvalue ParmVar 0x1449280f0 'val' 'const float'
            `-ImplicitCastExpr 0x1449285e8 <col:23> 'float' <LValueToRValue>
              `-DeclRefExpr 0x1449285b0 <col:23> 'const float' lvalue ParmVar 0x1449280f0 'val' 'const float'
