`-FunctionDecl 0x15b9281a8  line:1:8 ZIPARCHIVE_METHOD 'int (int)' static
  |-ParmVarDecl 0x15b9280d8 <col:26> col:26 getStatusString 'int'
  `-CompoundStmt 0x15b941448 <line:2:1, line:18:1>
    |-DeclStmt 0x15b928488 <line:3:2, col:20>
    | |-RecordDecl 0x15b9282a0 <col:2, col:9> col:9 struct zip
    | `-VarDecl 0x15b928408 <col:2, col:14> col:14 used intern 'struct zip *'
    |-DeclStmt 0x15b940a20 <line:5:2, col:19>
    | |-VarDecl 0x15b928680 <col:2, col:6> col:6 used zep 'int'
    | |-VarDecl 0x15b928700 <col:2, col:11> col:11 used syp 'int'
    | `-VarDecl 0x15b928780 <col:2, col:16> col:16 used len 'int'
    |-DeclStmt 0x15b940b48 <line:6:2, col:24>
    | `-VarDecl 0x15b940ae0 <col:2, col:23> col:7 used error_string 'char[128]'
    |-IfStmt 0x15b940c08 <line:8:2, line:10:2>
    | |-UnaryOperator 0x15b940be0 <line:8:6, col:7> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x15b940bc8 <col:7> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x15b940ba8 <col:7> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x15b940bf8 <col:13, line:10:2>
    |-CallExpr 0x15b940db0 <line:12:2, col:30> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x15b940d08 <col:2> 'int ()' Function 0x15b940c50 'ZIP_FROM_OBJECT' 'int ()'
    | |-DeclRefExpr 0x15b940d28 <col:18> 'struct zip *' lvalue Var 0x15b928408 'intern' 'struct zip *'
    | `-RecoveryExpr 0x15b940d90 <col:26> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x15b940fb8 <line:14:2, col:34> 'int'
    | |-ImplicitCastExpr 0x15b940fa0 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x15b940ec0 <col:2> 'int ()' Function 0x15b940e08 'zip_error_get' 'int ()'
    | |-ImplicitCastExpr 0x15b940ff0 <col:16> 'struct zip *' <LValueToRValue>
    | | `-DeclRefExpr 0x15b940ee0 <col:16> 'struct zip *' lvalue Var 0x15b928408 'intern' 'struct zip *'
    | |-UnaryOperator 0x15b940f50 <col:24, col:25> 'int *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x15b940f00 <col:25> 'int' lvalue Var 0x15b928680 'zep' 'int'
    | `-UnaryOperator 0x15b940f88 <col:30, col:31> 'int *' prefix '&' cannot overflow
    |   `-DeclRefExpr 0x15b940f68 <col:31> 'int' lvalue Var 0x15b928700 'syp' 'int'
    |-BinaryOperator 0x15b941248 <line:16:2, col:52> 'int' '='
    | |-DeclRefExpr 0x15b941008 <col:2> 'int' lvalue Var 0x15b928780 'len' 'int'
    | `-CallExpr 0x15b9411c0 <col:8, col:52> 'int'
    |   |-ImplicitCastExpr 0x15b9411a8 <col:8> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x15b941108 <col:8> 'int ()' Function 0x15b941050 'zip_error_to_str' 'int ()'
    |   |-ImplicitCastExpr 0x15b941200 <col:25> 'char *' <ArrayToPointerDecay>
    |   | `-DeclRefExpr 0x15b941128 <col:25> 'char[128]' lvalue Var 0x15b940ae0 'error_string' 'char[128]'
    |   |-IntegerLiteral 0x15b941148 <col:39> 'int' 128
    |   |-ImplicitCastExpr 0x15b941218 <col:44> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x15b941168 <col:44> 'int' lvalue Var 0x15b928680 'zep' 'int'
    |   `-ImplicitCastExpr 0x15b941230 <col:49> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x15b941188 <col:49> 'int' lvalue Var 0x15b928700 'syp' 'int'
    `-CallExpr 0x15b9413e0 <line:17:2, col:37> 'int'
      |-ImplicitCastExpr 0x15b9413c8 <col:2> 'int (*)()' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x15b941348 <col:2> 'int ()' Function 0x15b941290 'RETVAL_STRINGL' 'int ()'
      |-ImplicitCastExpr 0x15b941418 <col:17> 'char *' <ArrayToPointerDecay>
      | `-DeclRefExpr 0x15b941368 <col:17> 'char[128]' lvalue Var 0x15b940ae0 'error_string' 'char[128]'
      |-ImplicitCastExpr 0x15b941430 <col:31> 'int' <LValueToRValue>
      | `-DeclRefExpr 0x15b941388 <col:31> 'int' lvalue Var 0x15b928780 'len' 'int'
      `-IntegerLiteral 0x15b9413a8 <col:36> 'int' 1
