`-FunctionDecl 0x1518127f8  line:1:1 invalid zsetdevice 'int (int *)'
  |-ParmVarDecl 0x151812728 <col:12, col:21> col:21 invalid i_ctx_p 'int *'
  `-CompoundStmt 0x15182d200 <line:2:1, line:29:1>
    |-DeclStmt 0x15182b970 <line:5:5, line:6:71>
    | `-VarDecl 0x151812b18 <line:5:5, line:6:70> line:5:9 used code 'int' cinit
    |   `-CallExpr 0x15182b930 <col:16, line:6:70> '<dependent type>' contains-errors
    |     |-CallExpr 0x15182b880 <line:5:16, col:41> '<dependent type>' contains-errors
    |     | |-DeclRefExpr 0x151812c60 <col:16> 'int ()' Function 0x151812ba8 'dev_proc' 'int ()'
    |     | |-RecoveryExpr 0x15182b840 <col:25> '<dependent type>' contains-errors lvalue
    |     | `-RecoveryExpr 0x15182b860 <col:30> '<dependent type>' contains-errors lvalue
    |     |-RecoveryExpr 0x15182b8b0 <col:43> '<dependent type>' contains-errors lvalue
    |     |-RecoveryExpr 0x15182b8d0 <line:6:25> '<dependent type>' contains-errors lvalue
    |     |-CStyleCastExpr 0x15182b908 <col:54, col:63> 'void *' <BitCast>
    |     | `-UnaryOperator 0x151812d78 <col:62, col:63> 'int *' prefix '&' cannot overflow
    |     |   `-DeclRefExpr 0x151812d58 <col:63> 'int' lvalue Var 0x151812b18 'code' 'int'
    |     `-IntegerLiteral 0x151812db8 <col:69> 'int' 0
    |-IfStmt 0x15182ba48 <line:8:5, line:9:16>
    | |-BinaryOperator 0x15182b9e0 <line:8:9, col:16> 'int' contains-errors '<'
    | | |-ImplicitCastExpr 0x15182b9c8 <col:9> 'int' contains-errors <LValueToRValue>
    | | | `-DeclRefExpr 0x15182b988 <col:9> 'int' contains-errors lvalue Var 0x151812b18 'code' 'int'
    | | `-IntegerLiteral 0x15182b9a8 <col:16> 'int' 0
    | `-ReturnStmt 0x15182ba38 <line:9:9, col:16>
    |   `-ImplicitCastExpr 0x15182ba20 <col:16> 'int' contains-errors <LValueToRValue>
    |     `-DeclRefExpr 0x15182ba00 <col:16> 'int' contains-errors lvalue Var 0x151812b18 'code' 'int'
    |-CallExpr 0x15182bc68 <line:11:5, col:35> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x15182bb48 <col:5> 'int ()' Function 0x15182ba90 'check_write_type' 'int ()'
    | |-UnaryOperator 0x15182bc30 <col:22, col:23> '<dependent type>' contains-errors prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x15182bc18 <col:23> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x15182bbf8 <col:23> '<dependent type>' contains-errors lvalue
    | `-RecoveryExpr 0x15182bc48 <col:27> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x15182c078 <line:12:5, line:15:5>
    | |-CXXDependentScopeMemberExpr 0x15182bd50 <line:12:9, col:15> '<dependent type>' contains-errors lvalue ->LockSafetyParams
    | | `-RecoveryExpr 0x15182bd30 <col:9> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x15182c068 <col:33, line:15:5>
    |-IfStmt 0x15182c3d8 <line:22:5, line:23:16>
    | |-BinaryOperator 0x15182c370 <line:22:9, col:16> 'int' contains-errors '<'
    | | |-ImplicitCastExpr 0x15182c358 <col:9> 'int' contains-errors <LValueToRValue>
    | | | `-DeclRefExpr 0x15182c318 <col:9> 'int' contains-errors lvalue Var 0x151812b18 'code' 'int'
    | | `-IntegerLiteral 0x15182c338 <col:16> 'int' 0
    | `-ReturnStmt 0x15182c3c8 <line:23:9, col:16>
    |   `-ImplicitCastExpr 0x15182c3b0 <col:16> 'int' contains-errors <LValueToRValue>
    |     `-DeclRefExpr 0x15182c390 <col:16> 'int' contains-errors lvalue Var 0x151812b18 'code' 'int'
    |-CallExpr 0x15182c690 <line:26:5, col:37> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x15182c650 <col:5> 'int ()' Function 0x15182c598 'invalidate_stack_devices' 'int ()'
    | `-RecoveryExpr 0x15182c670 <col:30> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x15182c7f0 <line:28:5, col:12>
      `-ImplicitCastExpr 0x15182c7d8 <col:12> 'int' contains-errors <LValueToRValue>
        `-DeclRefExpr 0x15182c7b8 <col:12> 'int' contains-errors lvalue Var 0x151812b18 'code' 'int'
