`-FunctionDecl 0x12f928238  line:1:1 ctcompare 'int (const char *, const char *)'
  |-ParmVarDecl 0x12f9280d8 <col:11, col:23> col:23 used a 'const char *'
  |-ParmVarDecl 0x12f928158 <line:2:11, col:23> col:23 used b 'const char *'
  `-CompoundStmt 0x12f9287a0 <line:3:1, line:15:1>
    |-DeclStmt 0x12f9283d8 <line:4:3, col:17>
    | `-VarDecl 0x12f928350 <col:3, col:16> col:7 used result 'int' cinit
    |   `-IntegerLiteral 0x12f9283b8 <col:16> 'int' 0
    |-WhileStmt 0x12f928718 <line:7:3, line:12:3>
    | |-BinaryOperator 0x12f9284f0 <line:7:10, col:17> 'int' '&&'
    | | |-ImplicitCastExpr 0x12f9284a8 <col:10, col:11> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x12f928490 <col:10, col:11> 'char' <LValueToRValue>
    | | |   `-UnaryOperator 0x12f928428 <col:10, col:11> 'const char' lvalue prefix '*' cannot overflow
    | | |     `-ImplicitCastExpr 0x12f928410 <col:11> 'const char *' <LValueToRValue>
    | | |       `-DeclRefExpr 0x12f9283f0 <col:11> 'const char *' lvalue ParmVar 0x12f9280d8 'a' 'const char *'
    | | `-ImplicitCastExpr 0x12f9284d8 <col:16, col:17> 'int' <IntegralCast>
    | |   `-ImplicitCastExpr 0x12f9284c0 <col:16, col:17> 'char' <LValueToRValue>
    | |     `-UnaryOperator 0x12f928478 <col:16, col:17> 'const char' lvalue prefix '*' cannot overflow
    | |       `-ImplicitCastExpr 0x12f928460 <col:17> 'const char *' <LValueToRValue>
    | |         `-DeclRefExpr 0x12f928440 <col:17> 'const char *' lvalue ParmVar 0x12f928158 'b' 'const char *'
    | `-CompoundStmt 0x12f9286f0 <line:8:3, line:12:3>
    |   |-CompoundAssignOperator 0x12f928650 <line:9:5, col:21> 'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
    |   | |-DeclRefExpr 0x12f928510 <col:5> 'int' lvalue Var 0x12f928350 'result' 'int'
    |   | `-BinaryOperator 0x12f928630 <col:15, col:21> 'int' '^'
    |   |   |-ImplicitCastExpr 0x12f9285e8 <col:15, col:16> 'int' <IntegralCast>
    |   |   | `-ImplicitCastExpr 0x12f9285d0 <col:15, col:16> 'char' <LValueToRValue>
    |   |   |   `-UnaryOperator 0x12f928568 <col:15, col:16> 'const char' lvalue prefix '*' cannot overflow
    |   |   |     `-ImplicitCastExpr 0x12f928550 <col:16> 'const char *' <LValueToRValue>
    |   |   |       `-DeclRefExpr 0x12f928530 <col:16> 'const char *' lvalue ParmVar 0x12f9280d8 'a' 'const char *'
    |   |   `-ImplicitCastExpr 0x12f928618 <col:20, col:21> 'int' <IntegralCast>
    |   |     `-ImplicitCastExpr 0x12f928600 <col:20, col:21> 'char' <LValueToRValue>
    |   |       `-UnaryOperator 0x12f9285b8 <col:20, col:21> 'const char' lvalue prefix '*' cannot overflow
    |   |         `-ImplicitCastExpr 0x12f9285a0 <col:21> 'const char *' <LValueToRValue>
    |   |           `-DeclRefExpr 0x12f928580 <col:21> 'const char *' lvalue ParmVar 0x12f928158 'b' 'const char *'
    |   |-UnaryOperator 0x12f9286a0 <line:10:5, col:7> 'const char *' postfix '++'
    |   | `-DeclRefExpr 0x12f928680 <col:5> 'const char *' lvalue ParmVar 0x12f9280d8 'a' 'const char *'
    |   `-UnaryOperator 0x12f9286d8 <line:11:5, col:7> 'const char *' postfix '++'
    |     `-DeclRefExpr 0x12f9286b8 <col:5> 'const char *' lvalue ParmVar 0x12f928158 'b' 'const char *'
    `-ReturnStmt 0x12f928790 <line:14:3, col:17>
      `-ImplicitCastExpr 0x12f928778 <col:10, col:17> 'int' <LValueToRValue>
        `-ParenExpr 0x12f928758 <col:10, col:17> 'int' lvalue
          `-DeclRefExpr 0x12f928738 <col:11> 'int' lvalue Var 0x12f928350 'result' 'int'
