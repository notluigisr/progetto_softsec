`-FunctionDecl 0x1369281a8  line:1:12 sapi_extract_response_code 'int (const char *)' static
  |-ParmVarDecl 0x1369280d8 <col:39, col:51> col:51 used header_line 'const char *'
  `-CompoundStmt 0x136941ac0 <line:2:1, line:14:1>
    |-DeclStmt 0x136928340 <line:3:2, col:16>
    | `-VarDecl 0x1369282b8 <col:2, col:13> col:6 used code 'int' cinit
    |   `-IntegerLiteral 0x136928320 <col:13> 'int' 200
    |-DeclStmt 0x1369283d8 <line:4:2, col:17>
    | `-VarDecl 0x136928370 <col:2, col:14> col:14 used ptr 'const char *'
    |-ForStmt 0x136941a40 <line:6:2, line:11:2>
    | |-BinaryOperator 0x136928448 <line:6:7, col:13> 'const char *' '='
    | | |-DeclRefExpr 0x1369283f0 <col:7> 'const char *' lvalue Var 0x136928370 'ptr' 'const char *'
    | | `-ImplicitCastExpr 0x136928430 <col:13> 'const char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x136928410 <col:13> 'const char *' lvalue ParmVar 0x1369280d8 'header_line' 'const char *'
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x1369284b8 <col:26, col:27> 'char' <LValueToRValue>
    | | `-UnaryOperator 0x1369284a0 <col:26, col:27> 'const char' lvalue prefix '*' cannot overflow
    | |   `-ImplicitCastExpr 0x136928488 <col:27> 'const char *' <LValueToRValue>
    | |     `-DeclRefExpr 0x136928468 <col:27> 'const char *' lvalue Var 0x136928370 'ptr' 'const char *'
    | |-UnaryOperator 0x1369284f0 <col:32, col:35> 'const char *' postfix '++'
    | | `-DeclRefExpr 0x1369284d0 <col:32> 'const char *' lvalue Var 0x136928370 'ptr' 'const char *'
    | `-CompoundStmt 0x136941a28 <col:39, line:11:2>
    |   `-IfStmt 0x136941a08 <line:7:3, line:10:3>
    |     |-BinaryOperator 0x1369286d8 <line:7:7, col:36> 'int' '&&'
    |     | |-BinaryOperator 0x1369285a0 <col:7, col:15> 'int' '=='
    |     | | |-ImplicitCastExpr 0x136928588 <col:7, col:8> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x136928570 <col:7, col:8> 'char' <LValueToRValue>
    |     | | |   `-UnaryOperator 0x136928540 <col:7, col:8> 'const char' lvalue prefix '*' cannot overflow
    |     | | |     `-ImplicitCastExpr 0x136928528 <col:8> 'const char *' <LValueToRValue>
    |     | | |       `-DeclRefExpr 0x136928508 <col:8> 'const char *' lvalue Var 0x136928370 'ptr' 'const char *'
    |     | | `-CharacterLiteral 0x136928558 <col:15> 'int' 32
    |     | `-BinaryOperator 0x1369286b8 <col:22, col:36> 'int' '!='
    |     |   |-ImplicitCastExpr 0x1369286a0 <col:22, col:31> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x136928688 <col:22, col:31> 'char' <LValueToRValue>
    |     |   |   `-UnaryOperator 0x136928658 <col:22, col:31> 'const char' lvalue prefix '*' cannot overflow
    |     |   |     `-ParenExpr 0x136928638 <col:23, col:31> 'const char *'
    |     |   |       `-BinaryOperator 0x136928618 <col:24, col:30> 'const char *' '+'
    |     |   |         |-ImplicitCastExpr 0x136928600 <col:24> 'const char *' <LValueToRValue>
    |     |   |         | `-DeclRefExpr 0x1369285c0 <col:24> 'const char *' lvalue Var 0x136928370 'ptr' 'const char *'
    |     |   |         `-IntegerLiteral 0x1369285e0 <col:30> 'int' 1
    |     |   `-CharacterLiteral 0x136928670 <col:36> 'int' 32
    |     `-CompoundStmt 0x1369419e8 <col:41, line:10:3>
    |       |-BinaryOperator 0x1369419c0 <line:8:4, col:23> 'int' '='
    |       | |-DeclRefExpr 0x1369286f8 <col:4> 'int' lvalue Var 0x1369282b8 'code' 'int'
    |       | `-CallExpr 0x136941998 <col:11, col:23> 'int'
    |       |   |-ImplicitCastExpr 0x136941980 <col:11> 'int (*)()' <FunctionToPointerDecay>
    |       |   | `-DeclRefExpr 0x1369418b8 <col:11> 'int ()' Function 0x136941800 'atoi' 'int ()'
    |       |   `-BinaryOperator 0x136941930 <col:16, col:22> 'const char *' '+'
    |       |     |-ImplicitCastExpr 0x136941918 <col:16> 'const char *' <LValueToRValue>
    |       |     | `-DeclRefExpr 0x1369418d8 <col:16> 'const char *' lvalue Var 0x136928370 'ptr' 'const char *'
    |       |     `-IntegerLiteral 0x1369418f8 <col:22> 'int' 1
    |       `-BreakStmt 0x1369419e0 <line:9:4>
    `-ReturnStmt 0x136941ab0 <line:13:2, col:9>
      `-ImplicitCastExpr 0x136941a98 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x136941a78 <col:9> 'int' lvalue Var 0x1369282b8 'code' 'int'
