`-FunctionDecl 0x11f00ddc8  line:1:16 invalid decode_unicode_escape 'int (const char *)' static
  |-ParmVarDecl 0x11f00dcf0 <col:38, col:50> col:50 used str 'const char *'
  `-CompoundStmt 0x11f027ca8 <line:2:1, line:22:1>
    |-DeclStmt 0x11f00def8 <line:3:5, col:10>
    | `-VarDecl 0x11f00de90 <col:5, col:9> col:9 used i 'int'
    |-CallExpr 0x11f00e1b8 <line:6:5, col:25> 'int'
    | |-ImplicitCastExpr 0x11f00e1a0 <col:5> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x11f00e070 <col:5> 'int ()' Function 0x11f00dfb8 'assert' 'int ()'
    | `-BinaryOperator 0x11f00e150 <col:12, col:22> 'int' '=='
    |   |-ImplicitCastExpr 0x11f00e138 <col:12, col:17> 'int' <IntegralCast>
    |   | `-ImplicitCastExpr 0x11f00e120 <col:12, col:17> 'char' <LValueToRValue>
    |   |   `-ArraySubscriptExpr 0x11f00e0e8 <col:12, col:17> 'const char' lvalue
    |   |     |-ImplicitCastExpr 0x11f00e0d0 <col:12> 'const char *' <LValueToRValue>
    |   |     | `-DeclRefExpr 0x11f00e090 <col:12> 'const char *' lvalue ParmVar 0x11f00dcf0 'str' 'const char *'
    |   |     `-IntegerLiteral 0x11f00e0b0 <col:16> 'int' 0
    |   `-CharacterLiteral 0x11f00e108 <col:22> 'int' 117
    |-ForStmt 0x11f027c28 <line:8:5, line:19:5>
    | |-BinaryOperator 0x11f00e220 <line:8:9, col:13> 'int' '='
    | | |-DeclRefExpr 0x11f00e1e0 <col:9> 'int' lvalue Var 0x11f00de90 'i' 'int'
    | | `-IntegerLiteral 0x11f00e200 <col:13> 'int' 1
    | |-<<<NULL>>>
    | |-BinaryOperator 0x11f00e298 <col:16, col:21> 'int' '<='
    | | |-ImplicitCastExpr 0x11f00e280 <col:16> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x11f00e240 <col:16> 'int' lvalue Var 0x11f00de90 'i' 'int'
    | | `-IntegerLiteral 0x11f00e260 <col:21> 'int' 4
    | |-UnaryOperator 0x11f00e2d8 <col:24, col:25> 'int' postfix '++'
    | | `-DeclRefExpr 0x11f00e2b8 <col:24> 'int' lvalue Var 0x11f00de90 'i' 'int'
    | `-CompoundStmt 0x11f027c08 <col:29, line:19:5>
    |   |-DeclStmt 0x11f027418 <line:9:9, col:24>
    |   | `-VarDecl 0x11f00e300 <col:9, col:23> col:14 used c 'char' cinit
    |   |   `-ImplicitCastExpr 0x11f027400 <col:18, col:23> 'char' <LValueToRValue>
    |   |     `-ArraySubscriptExpr 0x11f00e3d8 <col:18, col:23> 'const char' lvalue
    |   |       |-ImplicitCastExpr 0x11f00e3a8 <col:18> 'const char *' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x11f00e368 <col:18> 'const char *' lvalue ParmVar 0x11f00dcf0 'str' 'const char *'
    |   |       `-ImplicitCastExpr 0x11f00e3c0 <col:22> 'int' <LValueToRValue>
    |   |         `-DeclRefExpr 0x11f00e388 <col:22> 'int' lvalue Var 0x11f00de90 'i' 'int'
    |   `-IfStmt 0x11f027bd8 <line:11:9, line:18:21> has_else
    |     |-CallExpr 0x11f027588 <line:11:12, col:23> 'int'
    |     | |-ImplicitCastExpr 0x11f027570 <col:12> 'int (*)()' <FunctionToPointerDecay>
    |     | | `-DeclRefExpr 0x11f027530 <col:12> 'int ()' Function 0x11f027478 'l_isdigit' 'int ()'
    |     | `-ImplicitCastExpr 0x11f0275c8 <col:22> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x11f0275b0 <col:22> 'char' <LValueToRValue>
    |     |     `-DeclRefExpr 0x11f027550 <col:22> 'char' lvalue Var 0x11f00e300 'c' 'char'
    |     |-NullStmt 0x11f027bd0 <line:12:13>
    |     `-IfStmt 0x11f027ba0 <line:13:14, line:18:21> has_else
    |       |-CallExpr 0x11f0277a0 <line:13:17, col:28> 'int'
    |       | |-ImplicitCastExpr 0x11f027788 <col:17> 'int (*)()' <FunctionToPointerDecay>
    |       | | `-DeclRefExpr 0x11f027748 <col:17> 'int ()' Function 0x11f027690 'l_islower' 'int ()'
    |       | `-ImplicitCastExpr 0x11f0277e0 <col:27> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x11f0277c8 <col:27> 'char' <LValueToRValue>
    |       |     `-DeclRefExpr 0x11f027768 <col:27> 'char' lvalue Var 0x11f00e300 'c' 'char'
    |       |-NullStmt 0x11f027b98 <line:14:13>
    |       `-IfStmt 0x11f027b68 <line:15:14, line:18:21> has_else
    |         |-CallExpr 0x11f0279f8 <line:15:17, col:28> 'int'
    |         | |-ImplicitCastExpr 0x11f0279e0 <col:17> 'int (*)()' <FunctionToPointerDecay>
    |         | | `-DeclRefExpr 0x11f0279a0 <col:17> 'int ()' Function 0x11f0278e8 'l_isupper' 'int ()'
    |         | `-ImplicitCastExpr 0x11f027a38 <col:27> 'int' <IntegralCast>
    |         |   `-ImplicitCastExpr 0x11f027a20 <col:27> 'char' <LValueToRValue>
    |         |     `-DeclRefExpr 0x11f0279c0 <col:27> 'char' lvalue Var 0x11f00e300 'c' 'char'
    |         |-NullStmt 0x11f027b60 <line:16:13>
    |         `-ReturnStmt 0x11f027b50 <line:18:13, col:21>
    |           `-UnaryOperator 0x11f027b38 <col:20, col:21> 'int' prefix '-'
    |             `-IntegerLiteral 0x11f027b18 <col:21> 'int' 1
    `-ReturnStmt 0x11f027c98 <line:21:5, col:12>
      `-RecoveryExpr 0x11f027c78 <col:12> '<dependent type>' contains-errors lvalue
