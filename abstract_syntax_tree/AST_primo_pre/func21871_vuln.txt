`-FunctionDecl 0x158128310  line:1:13 invalid credential_write_item 'void (int *, const char *, const char *)' static
  |-ParmVarDecl 0x158128128 <col:35, col:41> col:41 invalid fp 'int *'
  |-ParmVarDecl 0x1581281a8 <col:45, col:57> col:57 used key 'const char *'
  |-ParmVarDecl 0x158128228 <col:62, col:74> col:74 used value 'const char *'
  `-CompoundStmt 0x1581286d0 <line:2:1, line:6:1>
    |-IfStmt 0x158128430 <line:3:2, line:4:3>
    | |-UnaryOperator 0x158128408 <line:3:6, col:7> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x1581283f0 <col:7> 'const char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x1581283d0 <col:7> 'const char *' lvalue ParmVar 0x158128228 'value' 'const char *'
    | `-ReturnStmt 0x158128420 <line:4:3>
    `-CallExpr 0x158128690 <line:5:2, col:31> '<dependent type>' contains-errors
      |-DeclRefExpr 0x1581285b0 <col:2> 'int ()' Function 0x1581284f8 'fprintf' 'int ()'
      |-RecoveryExpr 0x1581285d0 <col:10> '<dependent type>' contains-errors lvalue
      |-StringLiteral 0x158128630 <col:14> 'char[4]' lvalue "STR"
      |-DeclRefExpr 0x158128650 <col:21> 'const char *' lvalue ParmVar 0x1581281a8 'key' 'const char *'
      `-DeclRefExpr 0x158128670 <col:26> 'const char *' lvalue ParmVar 0x158128228 'value' 'const char *'
