`-FunctionDecl 0x12c140b58  line:1:12 chip_write_masked 'int (struct CHIPSTATE *, int, int, int)' static
  |-ParmVarDecl 0x12c128648 <col:30, col:48> col:48 used chip 'struct CHIPSTATE *'
  |-ParmVarDecl 0x12c1286c8 <col:54, col:58> col:58 used subaddr 'int'
  |-ParmVarDecl 0x12c128748 <col:67, col:71> col:71 used val 'int'
  |-ParmVarDecl 0x12c140a00 <col:76, col:80> col:80 used mask 'int'
  `-CompoundStmt 0x12c141628 <line:2:1, line:11:1>
    |-IfStmt 0x12c141380 <line:3:2, line:9:2>
    | |-BinaryOperator 0x12c140cc0 <line:3:6, col:14> 'int' '!='
    | | |-ImplicitCastExpr 0x12c140ca8 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x12c140c68 <col:6> 'int' lvalue ParmVar 0x12c140a00 'mask' 'int'
    | | `-IntegerLiteral 0x12c140c88 <col:14> 'int' 0
    | `-CompoundStmt 0x12c141368 <col:17, line:9:2>
    |   `-IfStmt 0x12c141338 <line:4:3, line:8:3> has_else
    |     |-BinaryOperator 0x12c140d50 <line:4:7, col:13> 'int' '=='
    |     | |-UnaryOperator 0x12c140d00 <col:7, col:8> 'int' prefix '-'
    |     | | `-IntegerLiteral 0x12c140ce0 <col:8> 'int' 1
    |     | `-ImplicitCastExpr 0x12c140d38 <col:13> 'int' <LValueToRValue>
    |     |   `-DeclRefExpr 0x12c140d18 <col:13> 'int' lvalue ParmVar 0x12c1286c8 'subaddr' 'int'
    |     |-CompoundStmt 0x12c141010 <col:22, line:6:3>
    |     | `-BinaryOperator 0x12c140ff0 <line:5:4, col:55> 'int' contains-errors '='
    |     |   |-DeclRefExpr 0x12c140d70 <col:4> 'int' lvalue ParmVar 0x12c128748 'val' 'int'
    |     |   `-BinaryOperator 0x12c140fd0 <col:10, col:55> '<dependent type>' contains-errors '|'
    |     |     |-ParenExpr 0x12c140f00 <col:10, col:40> '<dependent type>' contains-errors
    |     |     | `-BinaryOperator 0x12c140ee0 <col:11, col:36> '<dependent type>' contains-errors '&'
    |     |     |   |-ArraySubscriptExpr 0x12c140e70 <col:11, col:31> '<dependent type>' contains-errors lvalue
    |     |     |   | |-ImplicitCastExpr 0x12c140e58 <col:11, col:24> '<dependent type>' contains-errors <LValueToRValue>
    |     |     |   | | `-CXXDependentScopeMemberExpr 0x12c140df0 <col:11, col:24> '<dependent type>' contains-errors lvalue .bytes
    |     |     |   | |   `-RecoveryExpr 0x12c140dc8 <col:11, col:17> '<dependent type>' contains-errors lvalue
    |     |     |   | |     `-DeclRefExpr 0x12c140d90 <col:11> 'struct CHIPSTATE *' lvalue ParmVar 0x12c128648 'chip' 'struct CHIPSTATE *'
    |     |     |   | `-IntegerLiteral 0x12c140e38 <col:30> 'int' 1
    |     |     |   `-UnaryOperator 0x12c140ec8 <col:35, col:36> 'int' prefix '~' cannot overflow
    |     |     |     `-ImplicitCastExpr 0x12c140eb0 <col:36> 'int' <LValueToRValue>
    |     |     |       `-DeclRefExpr 0x12c140e90 <col:36> 'int' lvalue ParmVar 0x12c140a00 'mask' 'int'
    |     |     `-ParenExpr 0x12c140fb0 <col:44, col:55> 'int'
    |     |       `-BinaryOperator 0x12c140f90 <col:45, col:51> 'int' '&'
    |     |         |-ImplicitCastExpr 0x12c140f60 <col:45> 'int' <LValueToRValue>
    |     |         | `-DeclRefExpr 0x12c140f20 <col:45> 'int' lvalue ParmVar 0x12c128748 'val' 'int'
    |     |         `-ImplicitCastExpr 0x12c140f78 <col:51> 'int' <LValueToRValue>
    |     |           `-DeclRefExpr 0x12c140f40 <col:51> 'int' lvalue ParmVar 0x12c140a00 'mask' 'int'
    |     `-CompoundStmt 0x12c141320 <line:6:10, line:8:3>
    |       `-BinaryOperator 0x12c141300 <line:7:4, col:63> 'int' contains-errors '='
    |         |-DeclRefExpr 0x12c141028 <col:4> 'int' lvalue ParmVar 0x12c128748 'val' 'int'
    |         `-BinaryOperator 0x12c1412e0 <col:10, col:63> '<dependent type>' contains-errors '|'
    |           |-ParenExpr 0x12c141210 <col:10, col:48> '<dependent type>' contains-errors
    |           | `-BinaryOperator 0x12c1411f0 <col:11, col:44> '<dependent type>' contains-errors '&'
    |           |   |-ArraySubscriptExpr 0x12c141180 <col:11, col:39> '<dependent type>' contains-errors lvalue
    |           |   | |-ImplicitCastExpr 0x12c141168 <col:11, col:24> '<dependent type>' contains-errors <LValueToRValue>
    |           |   | | `-CXXDependentScopeMemberExpr 0x12c1410a8 <col:11, col:24> '<dependent type>' contains-errors lvalue .bytes
    |           |   | |   `-RecoveryExpr 0x12c141080 <col:11, col:17> '<dependent type>' contains-errors lvalue
    |           |   | |     `-DeclRefExpr 0x12c141048 <col:11> 'struct CHIPSTATE *' lvalue ParmVar 0x12c128648 'chip' 'struct CHIPSTATE *'
    |           |   | `-BinaryOperator 0x12c141148 <col:30, col:38> 'int' '+'
    |           |   |   |-ImplicitCastExpr 0x12c141130 <col:30> 'int' <LValueToRValue>
    |           |   |   | `-DeclRefExpr 0x12c1410f0 <col:30> 'int' lvalue ParmVar 0x12c1286c8 'subaddr' 'int'
    |           |   |   `-IntegerLiteral 0x12c141110 <col:38> 'int' 1
    |           |   `-UnaryOperator 0x12c1411d8 <col:43, col:44> 'int' prefix '~' cannot overflow
    |           |     `-ImplicitCastExpr 0x12c1411c0 <col:44> 'int' <LValueToRValue>
    |           |       `-DeclRefExpr 0x12c1411a0 <col:44> 'int' lvalue ParmVar 0x12c140a00 'mask' 'int'
    |           `-ParenExpr 0x12c1412c0 <col:52, col:63> 'int'
    |             `-BinaryOperator 0x12c1412a0 <col:53, col:59> 'int' '&'
    |               |-ImplicitCastExpr 0x12c141270 <col:53> 'int' <LValueToRValue>
    |               | `-DeclRefExpr 0x12c141230 <col:53> 'int' lvalue ParmVar 0x12c128748 'val' 'int'
    |               `-ImplicitCastExpr 0x12c141288 <col:59> 'int' <LValueToRValue>
    |                 `-DeclRefExpr 0x12c141250 <col:59> 'int' lvalue ParmVar 0x12c140a00 'mask' 'int'
    `-ReturnStmt 0x12c141618 <line:10:2, col:38>
      `-CallExpr 0x12c141598 <col:9, col:38> 'int'
        |-ImplicitCastExpr 0x12c141580 <col:9> 'int (*)()' <FunctionToPointerDecay>
        | `-DeclRefExpr 0x12c1414d0 <col:9> 'int ()' Function 0x12c141418 'chip_write' 'int ()'
        |-ImplicitCastExpr 0x12c1415d0 <col:20> 'struct CHIPSTATE *' <LValueToRValue>
        | `-DeclRefExpr 0x12c1414f0 <col:20> 'struct CHIPSTATE *' lvalue ParmVar 0x12c128648 'chip' 'struct CHIPSTATE *'
        |-ImplicitCastExpr 0x12c1415e8 <col:26> 'int' <LValueToRValue>
        | `-DeclRefExpr 0x12c141510 <col:26> 'int' lvalue ParmVar 0x12c1286c8 'subaddr' 'int'
        `-ImplicitCastExpr 0x12c141600 <col:35> 'int' <LValueToRValue>
          `-DeclRefExpr 0x12c141530 <col:35> 'int' lvalue ParmVar 0x12c128748 'val' 'int'
