`-FunctionDecl 0x158008288  line:1:12 smk_curacc_on_task 'int (struct task_struct *, int, const char *)' static
  |-ParmVarDecl 0x14f928648 <col:31, col:51> col:51 used p 'struct task_struct *'
  |-ParmVarDecl 0x14f9286c8 <col:54, col:58> col:58 used access 'int'
  |-ParmVarDecl 0x14f928748 <line:2:5, col:17> col:17 used caller 'const char *'
  `-CompoundStmt 0x15800a600 <line:3:1, line:13:1>
    |-DeclStmt 0x158008508 <line:4:2, col:26>
    | |-RecordDecl 0x158008390 <col:2, col:9> col:9 struct smk_audit_info
    | `-VarDecl 0x158008488 <col:2, col:24> col:24 invalid ad 'struct smk_audit_info'
    |-DeclStmt 0x158008918 <line:5:2, col:53>
    | |-RecordDecl 0x158008520 <col:2, col:9> col:9 struct smack_known
    | `-VarDecl 0x158008688 <col:2, col:52> col:22 used skp 'struct smack_known *' cinit
    |   `-ImplicitCastExpr 0x1580088e8 <col:28, col:52> 'struct smack_known *' <IntegralToPointer>
    |     `-CallExpr 0x1580088a8 <col:28, col:52> 'int'
    |       |-ImplicitCastExpr 0x158008890 <col:28> 'int (*)()' <FunctionToPointerDecay>
    |       | `-DeclRefExpr 0x158008820 <col:28> 'int ()' Function 0x158008768 'smk_of_task_struct_obj' 'int ()'
    |       `-ImplicitCastExpr 0x1580088d0 <col:51> 'struct task_struct *' <LValueToRValue>
    |         `-DeclRefExpr 0x158008840 <col:51> 'struct task_struct *' lvalue ParmVar 0x14f928648 'p' 'struct task_struct *'
    |-DeclStmt 0x1580089b0 <line:6:2, col:8>
    | `-VarDecl 0x158008948 <col:2, col:6> col:6 used rc 'int'
    |-CallExpr 0x158008b90 <line:8:2, col:46> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x158008aa8 <col:2> 'int ()' Function 0x1580089f0 'smk_ad_init' 'int ()'
    | |-UnaryOperator 0x158008ae8 <col:14, col:15> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | `-RecoveryExpr 0x158008ac8 <col:15> '<dependent type>' contains-errors lvalue
    | |-DeclRefExpr 0x158008b00 <col:19> 'const char *' lvalue ParmVar 0x14f928748 'caller' 'const char *'
    | `-RecoveryExpr 0x158008b70 <col:27> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x158008d20 <line:9:2, col:30> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x158008ca8 <col:2> 'int ()' Function 0x158008bf0 'smk_ad_setfield_u_tsk' 'int ()'
    | |-UnaryOperator 0x158008ce8 <col:24, col:25> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | `-RecoveryExpr 0x158008cc8 <col:25> '<dependent type>' contains-errors lvalue
    | `-DeclRefExpr 0x158008d00 <col:29> 'struct task_struct *' lvalue ParmVar 0x14f928648 'p' 'struct task_struct *'
    |-BinaryOperator 0x158008f20 <line:10:2, col:34> 'int' contains-errors '='
    | |-DeclRefExpr 0x158008d50 <col:2> 'int' lvalue Var 0x158008948 'rc' 'int'
    | `-CallExpr 0x158008ee8 <col:7, col:34> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x158008e50 <col:7> 'int ()' Function 0x158008d98 'smk_curacc' 'int ()'
    |   |-DeclRefExpr 0x158008e70 <col:18> 'struct smack_known *' lvalue Var 0x158008688 'skp' 'struct smack_known *'
    |   |-DeclRefExpr 0x158008e90 <col:23> 'int' lvalue ParmVar 0x14f9286c8 'access' 'int'
    |   `-UnaryOperator 0x158008ed0 <col:31, col:32> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-RecoveryExpr 0x158008eb0 <col:32> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x158009158 <line:11:2, col:32> 'int' '='
    | |-DeclRefExpr 0x158008f40 <col:2> 'int' lvalue Var 0x158008948 'rc' 'int'
    | `-CallExpr 0x1580090d8 <col:7, col:32> 'int'
    |   |-ImplicitCastExpr 0x1580090c0 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x158009040 <col:7> 'int ()' Function 0x158008f88 'smk_bu_task' 'int ()'
    |   |-ImplicitCastExpr 0x158009110 <col:19> 'struct task_struct *' <LValueToRValue>
    |   | `-DeclRefExpr 0x158009060 <col:19> 'struct task_struct *' lvalue ParmVar 0x14f928648 'p' 'struct task_struct *'
    |   |-ImplicitCastExpr 0x158009128 <col:22> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x158009080 <col:22> 'int' lvalue ParmVar 0x14f9286c8 'access' 'int'
    |   `-ImplicitCastExpr 0x158009140 <col:30> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x1580090a0 <col:30> 'int' lvalue Var 0x158008948 'rc' 'int'
    `-ReturnStmt 0x1580091b0 <line:12:2, col:9>
      `-ImplicitCastExpr 0x158009198 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x158009178 <col:9> 'int' lvalue Var 0x158008948 'rc' 'int'
