`-FunctionDecl 0x1439282c0  line:1:6 auth_client 'void (int, const char *, const char *)'
  |-ParmVarDecl 0x1439280d8 <col:18, col:22> col:22 used fd 'int'
  |-ParmVarDecl 0x143928158 <col:26, col:38> col:38 used user 'const char *'
  |-ParmVarDecl 0x1439281d8 <col:44, col:56> col:56 used challenge 'const char *'
  `-CompoundStmt 0x143942650 <line:2:1, line:20:1>
    |-DeclStmt 0x143928448 <line:3:2, col:18>
    | `-VarDecl 0x1439283e0 <col:2, col:14> col:14 used pass 'const char *'
    |-DeclStmt 0x143928548 <line:4:2, col:30>
    | `-VarDecl 0x1439284e0 <col:2, col:7> col:7 invalid pass2 'char'
    |-IfStmt 0x143928720 <line:6:2, line:7:10>
    | |-BinaryOperator 0x143928630 <line:6:6, col:17> 'int' '||'
    | | |-UnaryOperator 0x143928598 <col:6, col:7> 'int' prefix '!' cannot overflow
    | | | `-ImplicitCastExpr 0x143928580 <col:7> 'const char *' <LValueToRValue>
    | | |   `-DeclRefExpr 0x143928560 <col:7> 'const char *' lvalue ParmVar 0x143928158 'user' 'const char *'
    | | `-UnaryOperator 0x143928618 <col:15, col:17> 'int' prefix '!' cannot overflow
    | |   `-ImplicitCastExpr 0x143928600 <col:16, col:17> 'char' <LValueToRValue>
    | |     `-UnaryOperator 0x1439285e8 <col:16, col:17> 'const char' lvalue prefix '*' cannot overflow
    | |       `-ImplicitCastExpr 0x1439285d0 <col:17> 'const char *' <LValueToRValue>
    | |         `-DeclRefExpr 0x1439285b0 <col:17> 'const char *' lvalue ParmVar 0x143928158 'user' 'const char *'
    | `-BinaryOperator 0x143928700 <line:7:3, col:10> 'const char *' '='
    |   |-DeclRefExpr 0x143928650 <col:3> 'const char *' lvalue ParmVar 0x143928158 'user' 'const char *'
    |   `-ImplicitCastExpr 0x1439286e8 <col:10> 'const char *' <NoOp>
    |     `-ImplicitCastExpr 0x1439286d0 <col:10> 'char *' <ArrayToPointerDecay>
    |       `-StringLiteral 0x1439286b0 <col:10> 'char[4]' lvalue "STR"
    |-IfStmt 0x1439421a0 <line:9:2, line:13:2>
    | |-RecoveryExpr 0x143941f98 <line:9:6, line:10:28> '_Bool' contains-errors
    | `-CompoundStmt 0x143942188 <col:31, line:13:2>
    |   `-BinaryOperator 0x143942168 <line:12:3, col:23> 'const char *' '='
    |     |-DeclRefExpr 0x143941fb8 <col:3> 'const char *' lvalue Var 0x1439283e0 'pass' 'const char *'
    |     `-ImplicitCastExpr 0x143942150 <col:10, col:23> 'const char *' <IntegralToPointer>
    |       `-CallExpr 0x143942110 <col:10, col:23> 'int'
    |         |-ImplicitCastExpr 0x1439420f8 <col:10> 'int (*)()' <FunctionToPointerDecay>
    |         | `-DeclRefExpr 0x1439420b8 <col:10> 'int ()' Function 0x143942000 'getpass' 'int ()'
    |         `-ImplicitCastExpr 0x143942138 <col:18> 'char *' <ArrayToPointerDecay>
    |           `-StringLiteral 0x1439420d8 <col:18> 'char[4]' lvalue "STR"
    |-IfStmt 0x1439422d8 <line:15:2, line:16:10>
    | |-UnaryOperator 0x1439421f8 <line:15:6, col:7> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x1439421e0 <col:7> 'const char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x1439421c0 <col:7> 'const char *' lvalue Var 0x1439283e0 'pass' 'const char *'
    | `-BinaryOperator 0x1439422b8 <line:16:3, col:10> 'const char *' '='
    |   |-DeclRefExpr 0x143942210 <col:3> 'const char *' lvalue Var 0x1439283e0 'pass' 'const char *'
    |   `-ImplicitCastExpr 0x1439422a0 <col:10> 'const char *' <NoOp>
    |     `-ImplicitCastExpr 0x143942288 <col:10> 'char *' <ArrayToPointerDecay>
    |       `-StringLiteral 0x143942270 <col:10> 'char[1]' lvalue ""
    |-CallExpr 0x143942458 <line:18:2, col:38> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x1439423d8 <col:2> 'int ()' Function 0x143942320 'generate_hash' 'int ()'
    | |-DeclRefExpr 0x1439423f8 <col:16> 'const char *' lvalue Var 0x1439283e0 'pass' 'const char *'
    | |-DeclRefExpr 0x143942418 <col:22> 'const char *' lvalue ParmVar 0x1439281d8 'challenge' 'const char *'
    | `-RecoveryExpr 0x143942438 <col:33> '<dependent type>' contains-errors lvalue
    `-CallExpr 0x143942610 <line:19:2, col:34> '<dependent type>' contains-errors
      |-DeclRefExpr 0x143942570 <col:2> 'int ()' Function 0x1439424b8 'io_printf' 'int ()'
      |-DeclRefExpr 0x143942590 <col:12> 'int' lvalue ParmVar 0x1439280d8 'fd' 'int'
      |-StringLiteral 0x1439425b0 <col:16> 'char[4]' lvalue "STR"
      |-DeclRefExpr 0x1439425d0 <col:23> 'const char *' lvalue ParmVar 0x143928158 'user' 'const char *'
      `-RecoveryExpr 0x1439425f0 <col:29> '<dependent type>' contains-errors lvalue
