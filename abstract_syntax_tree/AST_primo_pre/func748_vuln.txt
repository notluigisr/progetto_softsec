`-FunctionDecl 0x12680de88  line:1:1 invalid hstoreArrayToPairs 'int (int *, int *)'
  |-ParmVarDecl 0x12680dd28 <col:20, col:31> col:31 invalid a 'int *'
  |-ParmVarDecl 0x12680dda8 <col:34, col:39> col:39 used npairs 'int *'
  `-CompoundStmt 0x127809a48 <line:2:1, line:40:1>
    |-DeclStmt 0x12680dff0 <line:5:2, col:17>
    | `-VarDecl 0x12680df88 <col:2, col:8> col:8 used key_count 'int'
    |-DeclStmt 0x12680e0a0 <line:7:2, col:14>
    | `-VarDecl 0x12680e038 <col:2, col:8> col:8 used bufsiz 'int'
    |-DeclStmt 0x12680e1d0 <line:8:2, line:9:6>
    | |-VarDecl 0x12680e0d0 <line:8:2, col:8> col:8 used i 'int'
    | `-VarDecl 0x12680e150 <col:2, line:9:5> col:5 used j 'int'
    |-IfStmt 0x127809008 <line:15:2, line:19:2>
    | |-BinaryOperator 0x127808ef0 <line:15:6, col:19> 'int' '=='
    | | |-ImplicitCastExpr 0x127808ed8 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x127808e98 <col:6> 'int' lvalue Var 0x12680df88 'key_count' 'int'
    | | `-IntegerLiteral 0x127808eb8 <col:19> 'int' 0
    | `-CompoundStmt 0x127808fe8 <line:16:2, line:19:2>
    |   |-BinaryOperator 0x127808f80 <line:17:3, col:13> 'int' '='
    |   | |-UnaryOperator 0x127808f48 <col:3, col:4> 'int' lvalue prefix '*' cannot overflow
    |   | | `-ImplicitCastExpr 0x127808f30 <col:4> 'int *' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x127808f10 <col:4> 'int *' lvalue ParmVar 0x12680dda8 'npairs' 'int *'
    |   | `-IntegerLiteral 0x127808f60 <col:13> 'int' 0
    |   `-ReturnStmt 0x127808fd8 <line:18:3, col:10>
    |     `-RecoveryExpr 0x127808fb8 <col:10> '<dependent type>' contains-errors lvalue
    `-ForStmt 0x127809868 <line:23:2, line:35:2>
      |-BinaryOperator 0x127809340 <line:23:7, col:18> 'int' ','
      | |-BinaryOperator 0x1278092c0 <col:7, col:11> 'int' '='
      | | |-DeclRefExpr 0x127809280 <col:7> 'int' lvalue Var 0x12680e0d0 'i' 'int'
      | | `-IntegerLiteral 0x1278092a0 <col:11> 'int' 0
      | `-BinaryOperator 0x127809320 <col:14, col:18> 'int' '='
      |   |-DeclRefExpr 0x1278092e0 <col:14> 'int' lvalue Var 0x12680e150 'j' 'int'
      |   `-IntegerLiteral 0x127809300 <col:18> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x1278093d0 <col:21, col:25> 'int' '<'
      | |-ImplicitCastExpr 0x1278093a0 <col:21> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x127809360 <col:21> 'int' lvalue Var 0x12680e0d0 'i' 'int'
      | `-ImplicitCastExpr 0x1278093b8 <col:25> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x127809380 <col:25> 'int' lvalue Var 0x12680df88 'key_count' 'int'
      |-UnaryOperator 0x127809410 <col:36, col:37> 'int' postfix '++'
      | `-DeclRefExpr 0x1278093f0 <col:36> 'int' lvalue Var 0x12680e0d0 'i' 'int'
      `-CompoundStmt 0x127809850 <line:24:2, line:35:2>
        `-IfStmt 0x127809830 <line:25:3, line:34:3>
          |-RecoveryExpr 0x127809460 <line:25:7, col:19> '_Bool' contains-errors
          `-CompoundStmt 0x127809818 <line:26:3, line:34:3>
            `-UnaryOperator 0x127809800 <line:33:4, col:5> 'int' postfix '++'
              `-DeclRefExpr 0x1278097e0 <col:4> 'int' lvalue Var 0x12680e150 'j' 'int'
