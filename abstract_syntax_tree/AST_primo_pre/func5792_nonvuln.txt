`-FunctionDecl 0x13b928258  line:1:8 invalid git_path_common_dirlen 'int (const char *, const char *)'
  |-ParmVarDecl 0x13b9280f0 <col:31, col:43> col:43 used one 'const char *'
  |-ParmVarDecl 0x13b928170 <col:48, col:60> col:60 used two 'const char *'
  `-CompoundStmt 0x13b941d68 <line:2:1, line:13:1>
    |-DeclStmt 0x13b9284e8 <line:3:2, col:35>
    | |-VarDecl 0x13b928328 <col:2, col:14> col:14 used p 'const char *'
    | |-VarDecl 0x13b9283a8 <col:2, col:18> col:18 used q 'const char *'
    | `-VarDecl 0x13b928428 <col:2, col:31> col:22 used dirsep 'const char *' cinit
    |   `-RecoveryExpr 0x13b9284a8 <col:31> '<dependent type>' contains-errors lvalue
    |-ForStmt 0x13b941b60 <line:5:2, line:10:2>
    | |-BinaryOperator 0x13b9285f0 <line:5:7, col:20> 'const char *' ','
    | | |-BinaryOperator 0x13b928558 <col:7, col:11> 'const char *' '='
    | | | |-DeclRefExpr 0x13b928500 <col:7> 'const char *' lvalue Var 0x13b928328 'p' 'const char *'
    | | | `-ImplicitCastExpr 0x13b928540 <col:11> 'const char *' <LValueToRValue>
    | | |   `-DeclRefExpr 0x13b928520 <col:11> 'const char *' lvalue ParmVar 0x13b9280f0 'one' 'const char *'
    | | `-BinaryOperator 0x13b9285d0 <col:16, col:20> 'const char *' '='
    | |   |-DeclRefExpr 0x13b928578 <col:16> 'const char *' lvalue Var 0x13b9283a8 'q' 'const char *'
    | |   `-ImplicitCastExpr 0x13b9285b8 <col:20> 'const char *' <LValueToRValue>
    | |     `-DeclRefExpr 0x13b928598 <col:20> 'const char *' lvalue ParmVar 0x13b928170 'two' 'const char *'
    | |-<<<NULL>>>
    | |-BinaryOperator 0x13b928710 <col:25, col:32> 'int' '&&'
    | | |-ImplicitCastExpr 0x13b9286c8 <col:25, col:26> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x13b9286b0 <col:25, col:26> 'char' <LValueToRValue>
    | | |   `-UnaryOperator 0x13b928648 <col:25, col:26> 'const char' lvalue prefix '*' cannot overflow
    | | |     `-ImplicitCastExpr 0x13b928630 <col:26> 'const char *' <LValueToRValue>
    | | |       `-DeclRefExpr 0x13b928610 <col:26> 'const char *' lvalue Var 0x13b928328 'p' 'const char *'
    | | `-ImplicitCastExpr 0x13b9286f8 <col:31, col:32> 'int' <IntegralCast>
    | |   `-ImplicitCastExpr 0x13b9286e0 <col:31, col:32> 'char' <LValueToRValue>
    | |     `-UnaryOperator 0x13b928698 <col:31, col:32> 'const char' lvalue prefix '*' cannot overflow
    | |       `-ImplicitCastExpr 0x13b928680 <col:32> 'const char *' <LValueToRValue>
    | |         `-DeclRefExpr 0x13b928660 <col:32> 'const char *' lvalue Var 0x13b9283a8 'q' 'const char *'
    | |-BinaryOperator 0x13b9287a0 <col:35, col:41> 'const char *' ','
    | | |-UnaryOperator 0x13b928750 <col:35, col:36> 'const char *' postfix '++'
    | | | `-DeclRefExpr 0x13b928730 <col:35> 'const char *' lvalue Var 0x13b928328 'p' 'const char *'
    | | `-UnaryOperator 0x13b928788 <col:40, col:41> 'const char *' postfix '++'
    | |   `-DeclRefExpr 0x13b928768 <col:40> 'const char *' lvalue Var 0x13b9283a8 'q' 'const char *'
    | `-CompoundStmt 0x13b941b48 <col:45, line:10:2>
    |   `-IfStmt 0x13b941b18 <line:6:3, line:9:4> has_else
    |     |-BinaryOperator 0x13b941938 <line:6:7, col:26> 'int' '&&'
    |     | |-BinaryOperator 0x13b941860 <col:7, col:13> 'int' '=='
    |     | | |-ImplicitCastExpr 0x13b941848 <col:7, col:8> 'int' <IntegralCast>
    |     | | | `-ImplicitCastExpr 0x13b941830 <col:7, col:8> 'char' <LValueToRValue>
    |     | | |   `-UnaryOperator 0x13b941800 <col:7, col:8> 'const char' lvalue prefix '*' cannot overflow
    |     | | |     `-ImplicitCastExpr 0x13b9287e0 <col:8> 'const char *' <LValueToRValue>
    |     | | |       `-DeclRefExpr 0x13b9287c0 <col:8> 'const char *' lvalue Var 0x13b928328 'p' 'const char *'
    |     | | `-CharacterLiteral 0x13b941818 <col:13> 'int' 47
    |     | `-BinaryOperator 0x13b941918 <col:20, col:26> 'int' '=='
    |     |   |-ImplicitCastExpr 0x13b941900 <col:20, col:21> 'int' <IntegralCast>
    |     |   | `-ImplicitCastExpr 0x13b9418e8 <col:20, col:21> 'char' <LValueToRValue>
    |     |   |   `-UnaryOperator 0x13b9418b8 <col:20, col:21> 'const char' lvalue prefix '*' cannot overflow
    |     |   |     `-ImplicitCastExpr 0x13b9418a0 <col:21> 'const char *' <LValueToRValue>
    |     |   |       `-DeclRefExpr 0x13b941880 <col:21> 'const char *' lvalue Var 0x13b9283a8 'q' 'const char *'
    |     |   `-CharacterLiteral 0x13b9418d0 <col:26> 'int' 47
    |     |-BinaryOperator 0x13b9419b0 <line:7:4, col:13> 'const char *' contains-errors '='
    |     | |-DeclRefExpr 0x13b941958 <col:4> 'const char *' contains-errors lvalue Var 0x13b928428 'dirsep' 'const char *'
    |     | `-ImplicitCastExpr 0x13b941998 <col:13> 'const char *' <LValueToRValue>
    |     |   `-DeclRefExpr 0x13b941978 <col:13> 'const char *' lvalue Var 0x13b928328 'p' 'const char *'
    |     `-IfStmt 0x13b941af8 <line:8:8, line:9:4>
    |       |-BinaryOperator 0x13b941ad0 <line:8:12, col:19> 'int' '!='
    |       | |-ImplicitCastExpr 0x13b941aa0 <col:12, col:13> 'int' <IntegralCast>
    |       | | `-ImplicitCastExpr 0x13b941a70 <col:12, col:13> 'char' <LValueToRValue>
    |       | |   `-UnaryOperator 0x13b941a08 <col:12, col:13> 'const char' lvalue prefix '*' cannot overflow
    |       | |     `-ImplicitCastExpr 0x13b9419f0 <col:13> 'const char *' <LValueToRValue>
    |       | |       `-DeclRefExpr 0x13b9419d0 <col:13> 'const char *' lvalue Var 0x13b928328 'p' 'const char *'
    |       | `-ImplicitCastExpr 0x13b941ab8 <col:18, col:19> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x13b941a88 <col:18, col:19> 'char' <LValueToRValue>
    |       |     `-UnaryOperator 0x13b941a58 <col:18, col:19> 'const char' lvalue prefix '*' cannot overflow
    |       |       `-ImplicitCastExpr 0x13b941a40 <col:19> 'const char *' <LValueToRValue>
    |       |         `-DeclRefExpr 0x13b941a20 <col:19> 'const char *' lvalue Var 0x13b9283a8 'q' 'const char *'
    |       `-BreakStmt 0x13b941af0 <line:9:4>
    `-ReturnStmt 0x13b941d58 <line:12:2, col:39>
      `-ImplicitCastExpr 0x13b941d40 <col:9, col:39> 'int' contains-errors <IntegralCast>
        `-ConditionalOperator 0x13b941d10 <col:9, col:39> 'long' contains-errors
          |-ImplicitCastExpr 0x13b941ce0 <col:9> 'const char *' contains-errors <LValueToRValue>
          | `-DeclRefExpr 0x13b941b98 <col:9> 'const char *' contains-errors lvalue Var 0x13b928428 'dirsep' 'const char *'
          |-BinaryOperator 0x13b941ca0 <col:18, col:35> 'long' contains-errors '+'
          | |-ParenExpr 0x13b941c48 <col:18, col:31> 'long' contains-errors
          | | `-BinaryOperator 0x13b941c28 <col:19, col:28> 'long' contains-errors '-'
          | |   |-ImplicitCastExpr 0x13b941bf8 <col:19> 'const char *' contains-errors <LValueToRValue>
          | |   | `-DeclRefExpr 0x13b941bb8 <col:19> 'const char *' contains-errors lvalue Var 0x13b928428 'dirsep' 'const char *'
          | |   `-ImplicitCastExpr 0x13b941c10 <col:28> 'const char *' <LValueToRValue>
          | |     `-DeclRefExpr 0x13b941bd8 <col:28> 'const char *' lvalue ParmVar 0x13b9280f0 'one' 'const char *'
          | `-ImplicitCastExpr 0x13b941c88 <col:35> 'long' <IntegralCast>
          |   `-IntegerLiteral 0x13b941c68 <col:35> 'int' 1
          `-ImplicitCastExpr 0x13b941cf8 <col:39> 'long' <IntegralCast>
            `-IntegerLiteral 0x13b941cc0 <col:39> 'int' 0
