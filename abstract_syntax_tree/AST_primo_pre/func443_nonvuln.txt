`-FunctionDecl 0x132140b28  line:1:1 loop_get_status_compat 'int (struct loop_device *, struct compat_loop_info)'
  |-ParmVarDecl 0x132128648 <col:24, col:44> col:44 used lo 'struct loop_device *'
  |-ParmVarDecl 0x132140a00 <line:2:10, col:34> col:34 invalid __user 'struct compat_loop_info'
  `-CompoundStmt 0x132141590 <line:3:1, line:14:1>
    |-DeclStmt 0x132140da8 <line:4:2, col:27>
    | |-RecordDecl 0x132140c28 <col:2, col:9> col:9 struct loop_info64
    | `-VarDecl 0x132140d28 <col:2, col:21> col:21 invalid info64 'struct loop_info64'
    |-DeclStmt 0x132140e60 <line:5:2, col:13>
    | `-VarDecl 0x132140dd8 <col:2, col:12> col:6 used err 'int' cinit
    |   `-IntegerLiteral 0x132140e40 <col:12> 'int' 0
    |-IfStmt 0x132141020 <line:7:2, line:8:10>
    | |-UnaryOperator 0x132140f10 <line:7:6, col:7> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x132140ef8 <col:7> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x132140ed8 <col:7> '<dependent type>' contains-errors lvalue
    | `-BinaryOperator 0x132141000 <line:8:3, col:10> 'int' contains-errors '='
    |   |-DeclRefExpr 0x132140f28 <col:3> 'int' lvalue Var 0x132140dd8 'err' 'int'
    |   `-UnaryOperator 0x132140fe8 <col:9, col:10> '<dependent type>' contains-errors prefix '-' cannot overflow
    |     `-ImplicitCastExpr 0x132140fd0 <col:10> '<dependent type>' contains-errors <LValueToRValue>
    |       `-RecoveryExpr 0x132140fb0 <col:10> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x132141288 <line:9:2, line:10:36>
    | |-UnaryOperator 0x132141078 <line:9:6, col:7> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x132141060 <col:7> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x132141040 <col:7> 'int' lvalue Var 0x132140dd8 'err' 'int'
    | `-BinaryOperator 0x132141268 <line:10:3, col:36> 'int' contains-errors '='
    |   |-DeclRefExpr 0x132141090 <col:3> 'int' lvalue Var 0x132140dd8 'err' 'int'
    |   `-CallExpr 0x132141238 <col:9, col:36> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x1321411c0 <col:9> 'int ()' Function 0x132141108 'loop_get_status' 'int ()'
    |     |-DeclRefExpr 0x1321411e0 <col:25> 'struct loop_device *' lvalue ParmVar 0x132128648 'lo' 'struct loop_device *'
    |     `-UnaryOperator 0x132141220 <col:29, col:30> '<dependent type>' contains-errors prefix '&' cannot overflow
    |       `-RecoveryExpr 0x132141200 <col:30> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x132141528 <line:11:2, line:12:43>
    | |-UnaryOperator 0x1321412e0 <line:11:6, col:7> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x1321412c8 <col:7> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x1321412a8 <col:7> 'int' lvalue Var 0x132140dd8 'err' 'int'
    | `-BinaryOperator 0x132141508 <line:12:3, col:43> 'int' contains-errors '='
    |   |-DeclRefExpr 0x1321412f8 <col:3> 'int' lvalue Var 0x132140dd8 'err' 'int'
    |   `-CallExpr 0x1321414d8 <col:9, col:43> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x1321413f8 <col:9> 'int ()' Function 0x132141340 'loop_info64_to_compat' 'int ()'
    |     |-UnaryOperator 0x132141438 <col:31, col:32> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     | `-RecoveryExpr 0x132141418 <col:32> '<dependent type>' contains-errors lvalue
    |     `-RecoveryExpr 0x1321414b8 <col:40> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x132141580 <line:13:2, col:9>
      `-ImplicitCastExpr 0x132141568 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x132141548 <col:9> 'int' lvalue Var 0x132140dd8 'err' 'int'
