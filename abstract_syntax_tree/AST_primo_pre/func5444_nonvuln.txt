`-FunctionDecl 0x13b00dda8  line:1:22 GetDrawValue 'double (const char *)' static inline
  |-ParmVarDecl 0x13b00dcd8 <col:35, col:47> col:47 magick_restrict 'const char *'
  `-CompoundStmt 0x13b02ab90 <line:3:1, line:14:1>
    |-DeclStmt 0x13b00e370 <line:4:3, line:5:23>
    | `-VarDecl 0x13b00dee8 <line:4:3, line:5:7> col:7 invalid magick_restrict 'char **'
    |-DeclStmt 0x13b02a868 <line:7:3, line:8:10>
    | `-VarDecl 0x13b02a800 <line:7:3, line:8:5> col:5 used value 'double'
    |-BinaryOperator 0x13b02aaf0 <line:11:3, col:38> 'double' contains-errors '='
    | |-DeclRefExpr 0x13b02a8b0 <col:3> 'double' lvalue Var 0x13b02a800 'value' 'double'
    | `-CallExpr 0x13b02aac0 <col:9, col:38> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x13b02a9e0 <col:9> 'int ()' Function 0x13b02a928 'InterpretLocaleValue' 'int ()'
    |   |-RecoveryExpr 0x13b02aa80 <col:30> '<dependent type>' contains-errors lvalue
    |   `-RecoveryExpr 0x13b02aaa0 <col:37> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x13b02ab80 <line:13:3, col:15>
      `-ImplicitCastExpr 0x13b02ab68 <col:9, col:15> 'double' <LValueToRValue>
        `-ParenExpr 0x13b02ab48 <col:9, col:15> 'double' lvalue
          `-DeclRefExpr 0x13b02ab28 <col:10> 'double' lvalue Var 0x13b02a800 'value' 'double'
