`-FunctionDecl 0x11f142338  line:1:12 invalid proppatch_caltransp 'int (int, unsigned int, struct proppatch_ctx *, int, void *)' static
  |-ParmVarDecl 0x11f1288f0 <col:32, col:43> col:43 invalid prop 'int'
  |-ParmVarDecl 0x11f128970 <col:49, col:58> col:58 used set 'unsigned int'
  |-ParmVarDecl 0x11f128f68 <line:2:11, col:33> col:33 used pctx 'struct proppatch_ctx *'
  |-ParmVarDecl 0x11f1420f0 <line:3:11, col:27> col:27 invalid propstat 'int'
  |-ParmVarDecl 0x11f142170 <line:4:11, col:17> col:17 rock 'void *'
  | `-UnusedAttr 0x11f1421d8 <col:37> unused
  `-CompoundStmt 0x11f1496a8 <line:5:1, line:61:1>
    |-DeclStmt 0x11f142488 <line:6:5, col:10>
    | `-VarDecl 0x11f142420 <col:5, col:9> col:9 used r 'int'
    |-IfStmt 0x11f149648 <line:8:5, line:58:5> has_else
    | |-BinaryOperator 0x11f142620 <line:8:9, col:54> 'int' contains-errors '&&'
    | | |-CXXDependentScopeMemberExpr 0x11f142500 <col:9, col:24> '<dependent type>' contains-errors lvalue ->collection
    | | | `-RecoveryExpr 0x11f1424d8 <col:9, col:15> '<dependent type>' contains-errors lvalue
    | | |   `-DeclRefExpr 0x11f1424a0 <col:9> 'struct proppatch_ctx *' lvalue ParmVar 0x11f128f68 'pctx' 'struct proppatch_ctx *'
    | | `-UnaryOperator 0x11f142608 <col:38, col:54> '<dependent type>' contains-errors prefix '!' cannot overflow
    | |   `-ImplicitCastExpr 0x11f1425f0 <col:39, col:54> '<dependent type>' contains-errors <LValueToRValue>
    | |     `-CXXDependentScopeMemberExpr 0x11f1425a8 <col:39, col:54> '<dependent type>' contains-errors lvalue ->resource
    | |       `-RecoveryExpr 0x11f142580 <col:39, col:45> '<dependent type>' contains-errors lvalue
    | |         `-DeclRefExpr 0x11f142548 <col:39> 'struct proppatch_ctx *' lvalue ParmVar 0x11f128f68 'pctx' 'struct proppatch_ctx *'
    | |-CompoundStmt 0x11f1493e8 <col:64, line:51:5>
    | | |-DeclStmt 0x11f1426f8 <line:9:2, line:10:15>
    | | | `-VarDecl 0x11f142658 <line:9:2, line:10:6> line:9:14 used prop_annot 'const char *' cinit
    | | |   `-RecoveryExpr 0x11f1426d8 <line:10:6> '<dependent type>' contains-errors lvalue
    | | |-CallExpr 0x11f142938 <line:12:2, col:22> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x11f1428a0 <col:2> 'int ()' Function 0x11f1427e8 'buf_reset' 'int ()'
    | | | `-UnaryOperator 0x11f142920 <col:12, col:19> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | |   `-RecoveryExpr 0x11f1428f8 <col:13, col:19> '<dependent type>' contains-errors lvalue
    | | |     `-DeclRefExpr 0x11f1428c0 <col:13> 'struct proppatch_ctx *' lvalue ParmVar 0x11f128f68 'pctx' 'struct proppatch_ctx *'
    | | |-IfStmt 0x11f148c60 <line:14:2, line:38:2>
    | | | |-ImplicitCastExpr 0x11f142980 <line:14:6> 'unsigned int' <LValueToRValue>
    | | | | `-DeclRefExpr 0x11f142960 <col:6> 'unsigned int' lvalue ParmVar 0x11f128970 'set' 'unsigned int'
    | | | `-CompoundStmt 0x11f148c48 <col:11, line:38:2>
    | | |   `-ForStmt 0x11f148c10 <line:18:6, line:37:6>
    | | |     |-<<<NULL>>>
    | | |     |-<<<NULL>>>
    | | |     |-RecoveryExpr 0x11f142a50 <line:18:33> '<dependent type>' contains-errors lvalue
    | | |     |-BinaryOperator 0x11f142b90 <col:38, col:49> '<dependent type>' contains-errors '='
    | | |     | |-RecoveryExpr 0x11f142b08 <col:38> '<dependent type>' contains-errors lvalue
    | | |     | `-CXXDependentScopeMemberExpr 0x11f142b48 <col:44, col:49> '<dependent type>' contains-errors lvalue ->next
    | | |     |   `-RecoveryExpr 0x11f142b28 <col:44> '<dependent type>' contains-errors lvalue
    | | |     `-CompoundStmt 0x11f148bf0 <col:55, line:37:6>
    | | |       |-IfStmt 0x11f142cf8 <line:21:3, col:38>
    | | |       | |-BinaryOperator 0x11f142cd0 <col:7, col:20> 'int' contains-errors '!='
    | | |       | | |-CXXDependentScopeMemberExpr 0x11f142c68 <col:7, col:12> '<dependent type>' contains-errors lvalue ->type
    | | |       | | | `-RecoveryExpr 0x11f142c48 <col:7> '<dependent type>' contains-errors lvalue
    | | |       | | `-RecoveryExpr 0x11f142cb0 <col:20> '<dependent type>' contains-errors lvalue
    | | |       | `-ContinueStmt 0x11f142cf0 <col:38>
    | | |       `-IfStmt 0x11f148bc0 <line:22:3, line:36:3> has_else
    | | |         |-RecoveryExpr 0x11f142eb0 <line:22:7, line:23:43> '_Bool' contains-errors
    | | |         |-CompoundStmt 0x11f148860 <col:46, line:26:3>
    | | |         | `-BreakStmt 0x11f148858 <line:25:7>
    | | |         `-CompoundStmt 0x11f148ba8 <line:27:8, line:36:3>
    | | |           `-ReturnStmt 0x11f148b98 <line:35:7, col:14>
    | | |             `-IntegerLiteral 0x11f148b78 <col:14> 'int' 0
    | | `-IfStmt 0x11f1493b8 <line:42:2, line:50:2> has_else
    | |   |-UnaryOperator 0x11f149060 <line:42:6, col:7> 'int' prefix '!' cannot overflow
    | |   | `-ImplicitCastExpr 0x11f149048 <col:7> 'int' <LValueToRValue>
    | |   |   `-DeclRefExpr 0x11f149028 <col:7> 'int' lvalue Var 0x11f142420 'r' 'int'
    | |   |-CompoundStmt 0x11f149208 <col:10, line:45:2>
    | |   `-CompoundStmt 0x11f1493a8 <line:46:7, line:50:2>
    | `-CompoundStmt 0x11f149638 <line:52:10, line:58:5>
    `-ReturnStmt 0x11f149698 <line:60:5, col:12>
      `-IntegerLiteral 0x11f149678 <col:12> 'int' 0
