`-FunctionDecl 0x11f80dda8  line:1:1 PHP_FUNCTION 'int (int)'
  |-ParmVarDecl 0x11f80dcd8 <col:14> col:14 posix_mknod 'int'
  `-CompoundStmt 0x11f827408 <line:2:1, line:47:1>
    |-DeclStmt 0x11f80df20 <line:3:2, col:12>
    | `-VarDecl 0x11f80deb8 <col:2, col:8> col:8 used path 'char *'
    |-DeclStmt 0x11f80dfb8 <line:4:2, col:14>
    | `-VarDecl 0x11f80df50 <col:2, col:6> col:6 path_len 'int'
    |-DeclStmt 0x11f80e050 <line:5:2, col:11>
    | `-VarDecl 0x11f80dfe8 <col:2, col:7> col:7 used mode 'long'
    |-DeclStmt 0x11f80e1f0 <line:6:2, col:27>
    | |-VarDecl 0x11f80e080 <col:2, col:15> col:7 used major 'long' cinit
    | | `-ImplicitCastExpr 0x11f80e108 <col:15> 'long' <IntegralCast>
    | |   `-IntegerLiteral 0x11f80e0e8 <col:15> 'int' 0
    | `-VarDecl 0x11f80e138 <col:2, col:26> col:18 minor 'long' cinit
    |   `-ImplicitCastExpr 0x11f80e1c0 <col:26> 'long' <IntegralCast>
    |     `-IntegerLiteral 0x11f80e1a0 <col:26> 'int' 0
    |-DeclStmt 0x11f80e288 <line:7:2, col:12>
    | `-VarDecl 0x11f80e220 <col:2, col:6> col:6 used result 'int'
    |-IfStmt 0x11f8267d0 <line:12:2, line:15:2>
    | |-RecoveryExpr 0x11f8267a0 <line:12:6, line:13:30> '_Bool' contains-errors
    | `-CompoundStmt 0x11f8267c0 <col:39, line:15:2>
    |-IfStmt 0x11f826c40 <line:17:2, line:20:2>
    | |-RecoveryExpr 0x11f826c10 <line:17:6, line:18:74> '_Bool' contains-errors
    | `-CompoundStmt 0x11f826c30 <col:77, line:20:2>
    |-IfStmt 0x11f8270e0 <line:22:2, line:38:2>
    | |-RecoveryExpr 0x11f826d10 <line:22:6, col:41> '_Bool' contains-errors
    | `-CompoundStmt 0x11f8270c0 <col:44, line:38:2>
    |   |-IfStmt 0x11f826f40 <line:23:3, line:26:3>
    |   | |-BinaryOperator 0x11f826da8 <line:23:7, col:26> 'int' '=='
    |   | | |-CallExpr 0x11f826d68 <col:7, col:21> 'int'
    |   | | | `-ImplicitCastExpr 0x11f826d50 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |   | | |   `-DeclRefExpr 0x11f826d30 <col:7> 'int ()' Function 0x11f826648 'ZEND_NUM_ARGS' 'int ()'
    |   | | `-IntegerLiteral 0x11f826d88 <col:26> 'int' 2
    |   | `-CompoundStmt 0x11f826f30 <col:29, line:26:3>
    |   `-IfStmt 0x11f827090 <line:27:3, line:37:3> has_else
    |     |-BinaryOperator 0x11f826fd0 <line:27:7, col:16> 'int' '=='
    |     | |-ImplicitCastExpr 0x11f826fa0 <col:7> 'long' <LValueToRValue>
    |     | | `-DeclRefExpr 0x11f826f60 <col:7> 'long' lvalue Var 0x11f80e080 'major' 'long'
    |     | `-ImplicitCastExpr 0x11f826fb8 <col:16> 'long' <IntegralCast>
    |     |   `-IntegerLiteral 0x11f826f80 <col:16> 'int' 0
    |     |-CompoundStmt 0x11f827030 <col:19, line:31:3>
    |     `-CompoundStmt 0x11f827080 <col:10, line:37:3>
    `-IfStmt 0x11f8273e8 <line:41:2, line:44:2>
      |-BinaryOperator 0x11f8272b8 <line:41:6, col:15> 'int' '<'
      | |-ImplicitCastExpr 0x11f8272a0 <col:6> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x11f827260 <col:6> 'int' lvalue Var 0x11f80e220 'result' 'int'
      | `-IntegerLiteral 0x11f827280 <col:15> 'int' 0
      `-CompoundStmt 0x11f8273d8 <col:18, line:44:2>
