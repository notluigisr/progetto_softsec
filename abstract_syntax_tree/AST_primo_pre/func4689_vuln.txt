`-FunctionDecl 0x11e9282f8  line:1:1 prepend_args 'int (const char *, char *, char **)'
  |-ParmVarDecl 0x11e9280d8 <col:15, col:27> col:27 used options 'const char *'
  |-ParmVarDecl 0x11e928158 <col:36, col:42> col:42 used buf 'char *'
  |-ParmVarDecl 0x11e928208 <col:47, col:54> col:54 used argv 'char **'
  `-CompoundStmt 0x11e9413d0 <line:2:1, line:24:1>
    |-DeclStmt 0x11e9284b8 <line:3:3, col:26>
    | `-VarDecl 0x11e928418 <col:3, col:19> col:15 used o 'const char *' cinit
    |   `-ImplicitCastExpr 0x11e9284a0 <col:19> 'const char *' <LValueToRValue>
    |     `-DeclRefExpr 0x11e928480 <col:19> 'const char *' lvalue ParmVar 0x11e9280d8 'options' 'const char *'
    |-DeclStmt 0x11e928588 <line:4:3, col:16>
    | `-VarDecl 0x11e9284e8 <col:3, col:13> col:9 used b 'char *' cinit
    |   `-ImplicitCastExpr 0x11e928570 <col:13> 'char *' <LValueToRValue>
    |     `-DeclRefExpr 0x11e928550 <col:13> 'char *' lvalue ParmVar 0x11e928158 'buf' 'char *'
    |-DeclStmt 0x11e928640 <line:5:3, col:12>
    | `-VarDecl 0x11e9285b8 <col:3, col:11> col:7 used n 'int' cinit
    |   `-IntegerLiteral 0x11e928620 <col:11> 'int' 0
    `-ForStmt 0x11e941398 <line:7:3, line:23:5>
      |-<<<NULL>>>
      |-<<<NULL>>>
      |-<<<NULL>>>
      |-<<<NULL>>>
      `-CompoundStmt 0x11e941358 <line:8:5, line:23:5>
        |-WhileStmt 0x11e940b20 <line:9:7, line:10:10>
        | |-CallExpr 0x11e940aa8 <line:9:14, col:43> 'int'
        | | |-ImplicitCastExpr 0x11e940a90 <col:14> 'int (*)()' <FunctionToPointerDecay>
        | | | `-DeclRefExpr 0x11e928780 <col:14> 'int ()' Function 0x11e9286c8 'c_isspace' 'int ()'
        | | `-ImplicitCastExpr 0x11e940ad0 <col:25, col:42> 'int' <IntegralCast>
        | |   `-CStyleCastExpr 0x11e940a30 <col:25, col:42> 'unsigned char' <IntegralCast>
        | |     `-ImplicitCastExpr 0x11e940a18 <col:41, col:42> 'char' <LValueToRValue> part_of_explicit_cast
        | |       `-UnaryOperator 0x11e9287d8 <col:41, col:42> 'const char' lvalue prefix '*' cannot overflow
        | |         `-ImplicitCastExpr 0x11e9287c0 <col:42> 'const char *' <LValueToRValue>
        | |           `-DeclRefExpr 0x11e9287a0 <col:42> 'const char *' lvalue Var 0x11e928418 'o' 'const char *'
        | `-UnaryOperator 0x11e940b08 <line:10:9, col:10> 'const char *' postfix '++'
        |   `-DeclRefExpr 0x11e940ae8 <col:9> 'const char *' lvalue Var 0x11e928418 'o' 'const char *'
        |-IfStmt 0x11e940c08 <line:11:7, line:12:16>
        | |-UnaryOperator 0x11e940ba8 <line:11:11, col:13> 'int' prefix '!' cannot overflow
        | | `-ImplicitCastExpr 0x11e940b90 <col:12, col:13> 'char' <LValueToRValue>
        | |   `-UnaryOperator 0x11e940b78 <col:12, col:13> 'const char' lvalue prefix '*' cannot overflow
        | |     `-ImplicitCastExpr 0x11e940b60 <col:13> 'const char *' <LValueToRValue>
        | |       `-DeclRefExpr 0x11e940b40 <col:13> 'const char *' lvalue Var 0x11e928418 'o' 'const char *'
        | `-ReturnStmt 0x11e940bf8 <line:12:9, col:16>
        |   `-ImplicitCastExpr 0x11e940be0 <col:16> 'int' <LValueToRValue>
        |     `-DeclRefExpr 0x11e940bc0 <col:16> 'int' lvalue Var 0x11e9285b8 'n' 'int'
        |-IfStmt 0x11e940d48 <line:13:7, line:14:19>
        | |-ImplicitCastExpr 0x11e940c48 <line:13:11> 'char **' <LValueToRValue>
        | | `-DeclRefExpr 0x11e940c28 <col:11> 'char **' lvalue ParmVar 0x11e928208 'argv' 'char **'
        | `-BinaryOperator 0x11e940d28 <line:14:9, col:19> 'char *' '='
        |   |-ArraySubscriptExpr 0x11e940cd0 <col:9, col:15> 'char *' lvalue
        |   | |-ImplicitCastExpr 0x11e940ca0 <col:9> 'char **' <LValueToRValue>
        |   | | `-DeclRefExpr 0x11e940c60 <col:9> 'char **' lvalue ParmVar 0x11e928208 'argv' 'char **'
        |   | `-ImplicitCastExpr 0x11e940cb8 <col:14> 'int' <LValueToRValue>
        |   |   `-DeclRefExpr 0x11e940c80 <col:14> 'int' lvalue Var 0x11e9285b8 'n' 'int'
        |   `-ImplicitCastExpr 0x11e940d10 <col:19> 'char *' <LValueToRValue>
        |     `-DeclRefExpr 0x11e940cf0 <col:19> 'char *' lvalue Var 0x11e9284e8 'b' 'char *'
        |-UnaryOperator 0x11e940d88 <line:15:7, col:8> 'int' postfix '++'
        | `-DeclRefExpr 0x11e940d68 <col:7> 'int' lvalue Var 0x11e9285b8 'n' 'int'
        |-DoStmt 0x11e941298 <line:17:7, line:20:52>
        | |-IfStmt 0x11e9410a0 <line:18:9, line:19:21>
        | | |-BinaryOperator 0x11e940f68 <line:18:13, col:39> 'int' '&&'
        | | | |-BinaryOperator 0x11e940ec8 <col:13, col:30> 'int' '=='
        | | | | |-ImplicitCastExpr 0x11e940eb0 <col:13, col:25> 'int' <IntegralCast>
        | | | | | `-ParenExpr 0x11e940e78 <col:13, col:25> 'char'
        | | | | |   `-BinaryOperator 0x11e940e58 <col:14, col:23> 'char' '='
        | | | | |     |-UnaryOperator 0x11e940dd8 <col:14, col:16> 'char' lvalue prefix '*' cannot overflow
        | | | | |     | `-UnaryOperator 0x11e940dc0 <col:15, col:16> 'char *' postfix '++'
        | | | | |     |   `-DeclRefExpr 0x11e940da0 <col:15> 'char *' lvalue Var 0x11e9284e8 'b' 'char *'
        | | | | |     `-ImplicitCastExpr 0x11e940e40 <col:21, col:23> 'char' <LValueToRValue>
        | | | | |       `-UnaryOperator 0x11e940e28 <col:21, col:23> 'const char' lvalue prefix '*' cannot overflow
        | | | | |         `-UnaryOperator 0x11e940e10 <col:22, col:23> 'const char *' postfix '++'
        | | | | |           `-DeclRefExpr 0x11e940df0 <col:22> 'const char *' lvalue Var 0x11e928418 'o' 'const char *'
        | | | | `-CharacterLiteral 0x11e940e98 <col:30> 'int' 92
        | | | `-ImplicitCastExpr 0x11e940f50 <col:38, col:39> 'int' <IntegralCast>
        | | |   `-ImplicitCastExpr 0x11e940f38 <col:38, col:39> 'char' <LValueToRValue>
        | | |     `-UnaryOperator 0x11e940f20 <col:38, col:39> 'const char' lvalue prefix '*' cannot overflow
        | | |       `-ImplicitCastExpr 0x11e940f08 <col:39> 'const char *' <LValueToRValue>
        | | |         `-DeclRefExpr 0x11e940ee8 <col:39> 'const char *' lvalue Var 0x11e928418 'o' 'const char *'
        | | `-BinaryOperator 0x11e941080 <line:19:11, col:21> 'char' '='
        | |   |-ArraySubscriptExpr 0x11e940ff8 <col:11, col:15> 'char' lvalue
        | |   | |-ImplicitCastExpr 0x11e940fe0 <col:11> 'char *' <LValueToRValue>
        | |   | | `-DeclRefExpr 0x11e940f88 <col:11> 'char *' lvalue Var 0x11e9284e8 'b' 'char *'
        | |   | `-UnaryOperator 0x11e940fc8 <col:13, col:14> 'int' prefix '-'
        | |   |   `-IntegerLiteral 0x11e940fa8 <col:14> 'int' 1
        | |   `-ImplicitCastExpr 0x11e941068 <col:19, col:21> 'char' <LValueToRValue>
        | |     `-UnaryOperator 0x11e941050 <col:19, col:21> 'const char' lvalue prefix '*' cannot overflow
        | |       `-UnaryOperator 0x11e941038 <col:20, col:21> 'const char *' postfix '++'
        | |         `-DeclRefExpr 0x11e941018 <col:20> 'const char *' lvalue Var 0x11e928418 'o' 'const char *'
        | `-BinaryOperator 0x11e941278 <line:20:14, col:51> 'int' '&&'
        |   |-ImplicitCastExpr 0x11e941260 <col:14, col:15> 'int' <IntegralCast>
        |   | `-ImplicitCastExpr 0x11e941248 <col:14, col:15> 'char' <LValueToRValue>
        |   |   `-UnaryOperator 0x11e9410f8 <col:14, col:15> 'const char' lvalue prefix '*' cannot overflow
        |   |     `-ImplicitCastExpr 0x11e9410e0 <col:15> 'const char *' <LValueToRValue>
        |   |       `-DeclRefExpr 0x11e9410c0 <col:15> 'const char *' lvalue Var 0x11e928418 'o' 'const char *'
        |   `-UnaryOperator 0x11e941230 <col:20, col:51> 'int' prefix '!' cannot overflow
        |     `-CallExpr 0x11e9411f0 <col:22, col:51> 'int'
        |       |-ImplicitCastExpr 0x11e9411d8 <col:22> 'int (*)()' <FunctionToPointerDecay>
        |       | `-DeclRefExpr 0x11e941110 <col:22> 'int ()' Function 0x11e9286c8 'c_isspace' 'int ()'
        |       `-ImplicitCastExpr 0x11e941218 <col:33, col:50> 'int' <IntegralCast>
        |         `-CStyleCastExpr 0x11e9411b0 <col:33, col:50> 'unsigned char' <IntegralCast>
        |           `-ImplicitCastExpr 0x11e941198 <col:49, col:50> 'char' <LValueToRValue> part_of_explicit_cast
        |             `-UnaryOperator 0x11e941168 <col:49, col:50> 'const char' lvalue prefix '*' cannot overflow
        |               `-ImplicitCastExpr 0x11e941150 <col:50> 'const char *' <LValueToRValue>
        |                 `-DeclRefExpr 0x11e941130 <col:50> 'const char *' lvalue Var 0x11e928418 'o' 'const char *'
        `-BinaryOperator 0x11e941338 <line:22:7, col:14> 'char' '='
          |-UnaryOperator 0x11e9412f0 <col:7, col:9> 'char' lvalue prefix '*' cannot overflow
          | `-UnaryOperator 0x11e9412d8 <col:8, col:9> 'char *' postfix '++'
          |   `-DeclRefExpr 0x11e9412b8 <col:8> 'char *' lvalue Var 0x11e9284e8 'b' 'char *'
          `-ImplicitCastExpr 0x11e941320 <col:14> 'char' <IntegralCast>
            `-CharacterLiteral 0x11e941308 <col:14> 'int' 0
