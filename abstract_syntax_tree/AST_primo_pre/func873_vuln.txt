`-FunctionDecl 0x1259281c8  line:1:8 invalid PHP_FUNCTION 'int (int)'
  |-ParmVarDecl 0x1259280f0 <col:21> col:21 fread 'int'
  `-CompoundStmt 0x125942258 <line:2:1, line:24:1>
    |-DeclStmt 0x125928310 <line:4:2, col:10>
    | `-VarDecl 0x1259282a8 <col:2, col:7> col:7 used len 'long'
    |-IfStmt 0x125928670 <line:7:2, line:9:2>
    | |-RecoveryExpr 0x125928640 <line:7:6, col:78> '_Bool' contains-errors
    | `-CompoundStmt 0x125928660 <col:87, line:9:2>
    |-CallExpr 0x125941888 <line:11:2, col:34> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x125928770 <col:2> 'int ()' Function 0x1259286b8 'PHP_STREAM_TO_ZVAL' 'int ()'
    | |-RecoveryExpr 0x125941830 <col:21> '<dependent type>' contains-errors lvalue
    | `-UnaryOperator 0x125941870 <col:29, col:30> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   `-RecoveryExpr 0x125941850 <col:30> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x125941a70 <line:13:2, line:16:2>
    | |-BinaryOperator 0x125941928 <line:13:6, col:13> 'int' '<='
    | | |-ImplicitCastExpr 0x1259418f8 <col:6> 'long' <LValueToRValue>
    | | | `-DeclRefExpr 0x1259418b8 <col:6> 'long' lvalue Var 0x1259282a8 'len' 'long'
    | | `-ImplicitCastExpr 0x125941910 <col:13> 'long' <IntegralCast>
    | |   `-IntegerLiteral 0x1259418d8 <col:13> 'int' 0
    | `-CompoundStmt 0x125941a60 <col:16, line:16:2>
    `-BinaryOperator 0x125941e98 <line:18:2, col:44> '<dependent type>' contains-errors '='
      |-CallExpr 0x125941de0 <col:2, col:25> '<dependent type>' contains-errors
      | |-DeclRefExpr 0x125941b70 <col:2> 'int ()' Function 0x125941ab8 'Z_STRVAL_P' 'int ()'
      | `-RecoveryExpr 0x125941dc0 <col:13> '<dependent type>' contains-errors lvalue
      `-CallExpr 0x125941e70 <col:29, col:44> 'int'
        |-ImplicitCastExpr 0x125941e58 <col:29> 'int (*)()' <FunctionToPointerDecay>
        | `-DeclRefExpr 0x125941cb0 <col:29> 'int ()' Function 0x125941bf8 'emalloc' 'int ()'
        `-BinaryOperator 0x125941e38 <col:37, col:43> 'long' '+'
          |-ImplicitCastExpr 0x125941e08 <col:37> 'long' <LValueToRValue>
          | `-DeclRefExpr 0x125941cd0 <col:37> 'long' lvalue Var 0x1259282a8 'len' 'long'
          `-ImplicitCastExpr 0x125941e20 <col:43> 'long' <IntegralCast>
            `-IntegerLiteral 0x125941cf0 <col:43> 'int' 1
