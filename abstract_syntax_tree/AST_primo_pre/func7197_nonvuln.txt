`-FunctionDecl 0x1308b8c88  line:1:12 _activate_check_status 'int (struct crypt_device *, const char *, unsigned int)' static
  |-ParmVarDecl 0x1308a0848 <col:35, col:56> col:56 used cd 'struct crypt_device *'
  |-ParmVarDecl 0x1308a08c8 <col:60, col:72> col:72 used name 'const char *'
  |-ParmVarDecl 0x1308a0948 <col:78, col:87> col:87 used reload 'unsigned int'
  `-CompoundStmt 0x1308bae00 <line:2:1, line:23:1>
    |-DeclStmt 0x1308b8e10 <line:3:2, col:7>
    | `-VarDecl 0x1308b8da8 <col:2, col:6> col:6 used r 'int'
    |-IfStmt 0x1308b8ea8 <line:5:2, line:6:10>
    | |-UnaryOperator 0x1308b8e60 <line:5:6, col:7> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x1308b8e48 <col:7> 'const char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x1308b8e28 <col:7> 'const char *' lvalue ParmVar 0x1308a08c8 'name' 'const char *'
    | `-ReturnStmt 0x1308b8e98 <line:6:3, col:10>
    |   `-IntegerLiteral 0x1308b8e78 <col:10> 'int' 0
    |-BinaryOperator 0x1308b9118 <line:8:2, col:31> 'int' '='
    | |-DeclRefExpr 0x1308b8ec8 <col:2> 'int' lvalue Var 0x1308b8da8 'r' 'int'
    | `-CallExpr 0x1308b90b8 <col:6, col:31> 'int'
    |   |-ImplicitCastExpr 0x1308b90a0 <col:6> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x1308b9010 <col:6> 'int ()' Function 0x1308b8f58 'dm_status_device' 'int ()'
    |   |-ImplicitCastExpr 0x1308b90e8 <col:23> 'struct crypt_device *' <LValueToRValue>
    |   | `-DeclRefExpr 0x1308b9030 <col:23> 'struct crypt_device *' lvalue ParmVar 0x1308a0848 'cd' 'struct crypt_device *'
    |   `-ImplicitCastExpr 0x1308b9100 <col:27> 'const char *' <LValueToRValue>
    |     `-DeclRefExpr 0x1308b9050 <col:27> 'const char *' lvalue ParmVar 0x1308a08c8 'name' 'const char *'
    |-IfStmt 0x1308b9238 <line:10:2, line:11:10>
    | |-BinaryOperator 0x1308b91e8 <line:10:6, col:16> 'int' '&&'
    | | |-BinaryOperator 0x1308b9190 <col:6, col:11> 'int' '>='
    | | | |-ImplicitCastExpr 0x1308b9178 <col:6> 'int' <LValueToRValue>
    | | | | `-DeclRefExpr 0x1308b9138 <col:6> 'int' lvalue Var 0x1308b8da8 'r' 'int'
    | | | `-IntegerLiteral 0x1308b9158 <col:11> 'int' 0
    | | `-ImplicitCastExpr 0x1308b91d0 <col:16> 'unsigned int' <LValueToRValue>
    | |   `-DeclRefExpr 0x1308b91b0 <col:16> 'unsigned int' lvalue ParmVar 0x1308a0948 'reload' 'unsigned int'
    | `-ReturnStmt 0x1308b9228 <line:11:3, col:10>
    |   `-IntegerLiteral 0x1308b9208 <col:10> 'int' 0
    |-IfStmt 0x1308b98c0 <line:13:2, line:16:2>
    | |-BinaryOperator 0x1308b9458 <line:13:6, col:22> 'int' contains-errors '||'
    | | |-BinaryOperator 0x1308b93c8 <col:6, col:11> 'int' '>='
    | | | |-ImplicitCastExpr 0x1308b93b0 <col:6> 'int' <LValueToRValue>
    | | | | `-DeclRefExpr 0x1308b9258 <col:6> 'int' lvalue Var 0x1308b8da8 'r' 'int'
    | | | `-IntegerLiteral 0x1308b9278 <col:11> 'int' 0
    | | `-BinaryOperator 0x1308b9438 <col:16, col:22> 'int' contains-errors '=='
    | |   |-DeclRefExpr 0x1308b92d0 <col:16> 'int' lvalue Var 0x1308b8da8 'r' 'int'
    | |   `-UnaryOperator 0x1308b9420 <col:21, col:22> '<dependent type>' contains-errors prefix '-' cannot overflow
    | |     `-ImplicitCastExpr 0x1308b9408 <col:22> '<dependent type>' contains-errors <LValueToRValue>
    | |       `-RecoveryExpr 0x1308b93e8 <col:22> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x1308b98a0 <col:30, line:16:2>
    |   |-CallExpr 0x1308b9790 <line:14:3, col:29> 'int'
    |   | |-ImplicitCastExpr 0x1308b9778 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x1308b9558 <col:3> 'int ()' Function 0x1308b94a0 'log_err' 'int ()'
    |   | |-ImplicitCastExpr 0x1308b97c8 <col:11> 'struct crypt_device *' <LValueToRValue>
    |   | | `-DeclRefExpr 0x1308b9578 <col:11> 'struct crypt_device *' lvalue ParmVar 0x1308a0848 'cd' 'struct crypt_device *'
    |   | |-CallExpr 0x1308b9718 <col:15, col:22> 'int'
    |   | | |-ImplicitCastExpr 0x1308b9700 <col:15> 'int (*)()' <FunctionToPointerDecay>
    |   | | | `-DeclRefExpr 0x1308b9678 <col:15> 'int ()' Function 0x1308b95c0 '_' 'int ()'
    |   | | `-ImplicitCastExpr 0x1308b9740 <col:17> 'char *' <ArrayToPointerDecay>
    |   | |   `-StringLiteral 0x1308b96e0 <col:17> 'char[4]' lvalue "STR"
    |   | `-ImplicitCastExpr 0x1308b97e0 <col:25> 'const char *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x1308b9758 <col:25> 'const char *' lvalue ParmVar 0x1308a08c8 'name' 'const char *'
    |   `-ReturnStmt 0x1308b9890 <line:15:3, col:11>
    |     `-UnaryOperator 0x1308b9878 <col:10, col:11> '<dependent type>' contains-errors prefix '-' cannot overflow
    |       `-ImplicitCastExpr 0x1308b9860 <col:11> '<dependent type>' contains-errors <LValueToRValue>
    |         `-RecoveryExpr 0x1308b9840 <col:11> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x1308b9a08 <line:18:2, line:19:10>
    | |-BinaryOperator 0x1308b99b8 <line:18:6, col:12> 'int' contains-errors '=='
    | | |-DeclRefExpr 0x1308b98e0 <col:6> 'int' lvalue Var 0x1308b8da8 'r' 'int'
    | | `-UnaryOperator 0x1308b99a0 <col:11, col:12> '<dependent type>' contains-errors prefix '-' cannot overflow
    | |   `-ImplicitCastExpr 0x1308b9988 <col:12> '<dependent type>' contains-errors <LValueToRValue>
    | |     `-RecoveryExpr 0x1308b9968 <col:12> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x1308b99f8 <line:19:3, col:10>
    |   `-IntegerLiteral 0x1308b99d8 <col:10> 'int' 0
    |-CallExpr 0x1308b9b38 <line:21:2, col:28> 'int'
    | |-ImplicitCastExpr 0x1308b9b20 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x1308b9a28 <col:2> 'int ()' Function 0x1308b94a0 'log_err' 'int ()'
    | |-ImplicitCastExpr 0x1308b9b70 <col:10> 'struct crypt_device *' <LValueToRValue>
    | | `-DeclRefExpr 0x1308b9a48 <col:10> 'struct crypt_device *' lvalue ParmVar 0x1308a0848 'cd' 'struct crypt_device *'
    | |-CallExpr 0x1308b9ac0 <col:14, col:21> 'int'
    | | |-ImplicitCastExpr 0x1308b9aa8 <col:14> 'int (*)()' <FunctionToPointerDecay>
    | | | `-DeclRefExpr 0x1308b9a68 <col:14> 'int ()' Function 0x1308b95c0 '_' 'int ()'
    | | `-ImplicitCastExpr 0x1308b9ae8 <col:16> 'char *' <ArrayToPointerDecay>
    | |   `-StringLiteral 0x1308b9a88 <col:16> 'char[4]' lvalue "STR"
    | `-ImplicitCastExpr 0x1308b9b88 <col:24> 'const char *' <LValueToRValue>
    |   `-DeclRefExpr 0x1308b9b00 <col:24> 'const char *' lvalue ParmVar 0x1308a08c8 'name' 'const char *'
    `-ReturnStmt 0x1308b9bd8 <line:22:2, col:9>
      `-ImplicitCastExpr 0x1308b9bc0 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x1308b9ba0 <col:9> 'int' lvalue Var 0x1308b8da8 'r' 'int'
