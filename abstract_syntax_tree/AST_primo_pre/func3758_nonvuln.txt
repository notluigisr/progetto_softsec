`-FunctionDecl 0x1580fac88  line:1:1 invalid typval_tostring 'int (int *, int)'
  |-ParmVarDecl 0x1580fab28 <col:17, col:27> col:27 invalid arg 'int *'
  |-ParmVarDecl 0x1580faba8 <col:32, col:36> col:36 used quotes 'int'
  `-CompoundStmt 0x158114ac0 <line:2:1, line:22:1>
    |-DeclStmt 0x1580fadc0 <line:3:5, col:19>
    | `-VarDecl 0x1580fad58 <col:5, col:13> col:13 used tofree 'char *'
    |-DeclStmt 0x1580fae68 <line:4:5, col:29>
    | `-VarDecl 0x1580fae00 <col:5, col:12> col:12 invalid numbuf 'char'
    |-DeclStmt 0x1580faf38 <line:5:5, col:23>
    | `-VarDecl 0x1580fae98 <col:5, col:19> col:13 used ret 'char *' cinit
    |   `-RecoveryExpr 0x1580faf18 <col:19> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x158114a30 <line:9:5, line:20:5> has_else
    | |-BinaryOperator 0x158114340 <line:9:9, col:35> 'int' contains-errors '&&'
    | | |-UnaryOperator 0x1581142e8 <col:9, col:10> 'int' prefix '!' cannot overflow
    | | | `-ImplicitCastExpr 0x1581142d0 <col:10> 'int' <LValueToRValue>
    | | |   `-DeclRefExpr 0x1580fb178 <col:10> 'int' lvalue ParmVar 0x1580faba8 'quotes' 'int'
    | | `-BinaryOperator 0x158114320 <col:20, col:35> 'int' contains-errors '=='
    | |   |-CXXDependentScopeMemberExpr 0x158114200 <col:20, col:25> '<dependent type>' contains-errors lvalue ->v_type
    | |   | `-RecoveryExpr 0x1580fb1c8 <col:20> '<dependent type>' contains-errors lvalue
    | |   `-RecoveryExpr 0x158114300 <col:35> '<dependent type>' contains-errors lvalue
    | |-CompoundStmt 0x1581144f8 <line:10:5, line:13:5>
    | `-CompoundStmt 0x158114a10 <line:15:5, line:20:5>
    |   |-BinaryOperator 0x158114738 <line:16:2, col:41> 'char *' contains-errors '='
    |   | |-DeclRefExpr 0x158114508 <col:2> 'char *' contains-errors lvalue Var 0x1580fae98 'ret' 'char *'
    |   | `-CallExpr 0x1581146f8 <col:8, col:41> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x158114608 <col:8> 'int ()' Function 0x158114550 'tv2string' 'int ()'
    |   |   |-RecoveryExpr 0x158114628 <col:18> '<dependent type>' contains-errors lvalue
    |   |   |-UnaryOperator 0x1581146a0 <col:23, col:24> 'char **' prefix '&' cannot overflow
    |   |   | `-DeclRefExpr 0x158114648 <col:24> 'char *' lvalue Var 0x1580fad58 'tofree' 'char *'
    |   |   |-RecoveryExpr 0x1581146b8 <col:32> '<dependent type>' contains-errors lvalue
    |   |   `-IntegerLiteral 0x1581146d8 <col:40> 'int' 0
    |   `-IfStmt 0x1581149f0 <line:18:2, line:19:27>
    |     |-BinaryOperator 0x1581148a8 <line:18:6, col:31> 'int' contains-errors '&&'
    |     | |-BinaryOperator 0x158114848 <col:6, col:13> 'int' contains-errors '!='
    |     | | |-DeclRefExpr 0x158114758 <col:6> 'char *' contains-errors lvalue Var 0x1580fae98 'ret' 'char *'
    |     | | `-RecoveryExpr 0x158114828 <col:13> '<dependent type>' contains-errors lvalue
    |     | `-BinaryOperator 0x158114888 <col:21, col:31> 'int' contains-errors '=='
    |     |   |-DeclRefExpr 0x1581147b0 <col:21> 'char *' lvalue Var 0x1580fad58 'tofree' 'char *'
    |     |   `-RecoveryExpr 0x158114868 <col:31> '<dependent type>' contains-errors lvalue
    |     `-BinaryOperator 0x1581149d0 <line:19:6, col:27> 'char *' contains-errors '='
    |       |-DeclRefExpr 0x1581148c8 <col:6> 'char *' contains-errors lvalue Var 0x1580fae98 'ret' 'char *'
    |       `-ImplicitCastExpr 0x1581149b8 <col:12, col:27> 'char *' contains-errors <IntegralToPointer>
    |         `-CallExpr 0x158114978 <col:12, col:27> 'int' contains-errors
    |           |-ImplicitCastExpr 0x158114960 <col:12> 'int (*)()' <FunctionToPointerDecay>
    |           | `-DeclRefExpr 0x1581148e8 <col:12> 'int ()' Function 0x1580fb088 'vim_strsave' 'int ()'
    |           `-ImplicitCastExpr 0x1581149a0 <col:24> 'char *' contains-errors <LValueToRValue>
    |             `-DeclRefExpr 0x158114908 <col:24> 'char *' contains-errors lvalue Var 0x1580fae98 'ret' 'char *'
    `-ReturnStmt 0x158114ab0 <line:21:5, col:12>
      `-ImplicitCastExpr 0x158114a98 <col:12> 'int' contains-errors <PointerToIntegral>
        `-ImplicitCastExpr 0x158114a80 <col:12> 'char *' contains-errors <LValueToRValue>
          `-DeclRefExpr 0x158114a60 <col:12> 'char *' contains-errors lvalue Var 0x1580fae98 'ret' 'char *'
