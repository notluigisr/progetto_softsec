`-FunctionDecl 0x13f128190  line:1:14 have_gcrypt '_Bool (void)' static
  `-CompoundStmt 0x13f1285c8 <line:2:1, line:26:1>
    |-DeclStmt 0x13f128330 <line:3:3, col:26>
    | `-VarDecl 0x13f128290 <col:3, col:25> col:16 used result '_Bool' static cinit
    |   `-ImplicitCastExpr 0x13f128318 <col:25> '_Bool' <IntegralToBoolean>
    |     `-IntegerLiteral 0x13f1282f8 <col:25> 'int' 0
    |-DeclStmt 0x13f1283f8 <line:4:3, col:29>
    | `-VarDecl 0x13f128358 <col:3, col:28> col:16 used need_init '_Bool' static cinit
    |   `-ImplicitCastExpr 0x13f1283e0 <col:28> '_Bool' <IntegralToBoolean>
    |     `-IntegerLiteral 0x13f1283c0 <col:28> 'int' 1
    |-IfStmt 0x13f1284c8 <line:6:3, line:7:19>
    | |-UnaryOperator 0x13f128448 <line:6:7, col:8> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x13f128430 <col:8> '_Bool' <LValueToRValue>
    | |   `-DeclRefExpr 0x13f128410 <col:8> '_Bool' lvalue Var 0x13f128358 'need_init' '_Bool'
    | `-ReturnStmt 0x13f1284b8 <line:7:5, col:19>
    |   `-ImplicitCastExpr 0x13f1284a0 <col:12, col:19> '_Bool' <LValueToRValue>
    |     `-ParenExpr 0x13f128480 <col:12, col:19> '_Bool' lvalue
    |       `-DeclRefExpr 0x13f128460 <col:13> '_Bool' lvalue Var 0x13f128290 'result' '_Bool'
    |-BinaryOperator 0x13f128540 <line:8:3, col:15> '_Bool' '='
    | |-DeclRefExpr 0x13f1284e8 <col:3> '_Bool' lvalue Var 0x13f128358 'need_init' '_Bool'
    | `-ImplicitCastExpr 0x13f128528 <col:15> '_Bool' <IntegralToBoolean>
    |   `-IntegerLiteral 0x13f128508 <col:15> 'int' 0
    `-ReturnStmt 0x13f1285b8 <line:24:3, col:11>
      `-ImplicitCastExpr 0x13f1285a0 <col:9, col:11> '_Bool' <IntegralToBoolean>
        `-ParenExpr 0x13f128580 <col:9, col:11> 'int'
          `-IntegerLiteral 0x13f128560 <col:10> 'int' 0
