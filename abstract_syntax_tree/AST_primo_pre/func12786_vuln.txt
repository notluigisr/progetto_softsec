`-FunctionDecl 0x157128288  line:1:1 invalid f_settabvar 'int (int *, int *)'
  |-ParmVarDecl 0x157128128 <col:13, col:23> col:23 invalid argvars 'int *'
  |-ParmVarDecl 0x1571281a8 <col:32, col:42> col:42 referenced invalid rettv 'int *'
  `-CompoundStmt 0x157142e10 <line:2:1, line:35:1>
    |-DeclStmt 0x157128488 <line:5:5, col:33>
    | |-VarDecl 0x157128388 <col:5, col:13> col:13 used varname 'char *'
    | `-VarDecl 0x157128408 <col:5, col:23> col:23 used tabvarname 'char *'
    |-BinaryOperator 0x1571285b0 <line:8:5, col:28> '<dependent type>' contains-errors '='
    | |-CXXDependentScopeMemberExpr 0x157128548 <col:5, col:17> '<dependent type>' contains-errors lvalue .v_number
    | | `-CXXDependentScopeMemberExpr 0x157128500 <col:5, col:12> '<dependent type>' contains-errors lvalue ->vval
    | |   `-RecoveryExpr 0x1571284d8 <col:5> '<dependent type>' contains-errors lvalue
    | |     `-DeclRefExpr 0x1571284b8 <col:5> 'int *' lvalue ParmVar 0x1571281a8 'rettv' 'int *'
    | `-IntegerLiteral 0x157128590 <col:28> 'int' 0
    |-IfStmt 0x157141940 <line:10:5, line:11:2>
    | |-BinaryOperator 0x157141910 <line:10:9, col:44> 'int' '||'
    | | |-CallExpr 0x157128798 <col:9, col:26> 'int'
    | | | `-ImplicitCastExpr 0x157128780 <col:9> 'int (*)()' <FunctionToPointerDecay>
    | | |   `-DeclRefExpr 0x157128730 <col:9> 'int ()' Function 0x157128678 'check_restricted' 'int ()'
    | | `-CallExpr 0x1571418f0 <col:31, col:44> 'int'
    | |   `-ImplicitCastExpr 0x1571418d8 <col:31> 'int (*)()' <FunctionToPointerDecay>
    | |     `-DeclRefExpr 0x1571418b8 <col:31> 'int ()' Function 0x157141800 'check_secure' 'int ()'
    | `-ReturnStmt 0x157141930 <line:11:2>
    |-BinaryOperator 0x157141e78 <line:14:5, col:44> 'char *' contains-errors '='
    | |-DeclRefExpr 0x157141ca0 <col:5> 'char *' lvalue Var 0x157128388 'varname' 'char *'
    | `-CallExpr 0x157141e50 <col:15, col:44> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x157141da0 <col:15> 'int ()' Function 0x157141ce8 'tv_get_string_chk' 'int ()'
    |   `-UnaryOperator 0x157141e38 <col:33, col:43> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     `-ArraySubscriptExpr 0x157141e18 <col:34, col:43> '<dependent type>' contains-errors lvalue
    |       |-ImplicitCastExpr 0x157141e00 <col:34> '<dependent type>' contains-errors <LValueToRValue>
    |       | `-RecoveryExpr 0x157141dc0 <col:34> '<dependent type>' contains-errors lvalue
    |       `-IntegerLiteral 0x157141de0 <col:42> 'int' 1
    `-IfStmt 0x157142df0 <line:17:5, line:34:5>
      |-BinaryOperator 0x157142180 <line:17:9, col:50> 'int' contains-errors '&&'
      | |-BinaryOperator 0x157142100 <col:9, col:36> 'int' contains-errors '&&'
      | | |-BinaryOperator 0x157142080 <col:9, col:20> 'int' contains-errors '!='
      | | | |-DeclRefExpr 0x157141f28 <col:9> 'char *' lvalue Var 0x157128388 'varname' 'char *'
      | | | `-RecoveryExpr 0x157142060 <col:20> '<dependent type>' contains-errors lvalue
      | | `-BinaryOperator 0x1571420e0 <col:28, col:36> 'int' contains-errors '!='
      | |   |-RecoveryExpr 0x1571420a0 <col:28> '<dependent type>' contains-errors lvalue
      | |   `-RecoveryExpr 0x1571420c0 <col:36> '<dependent type>' contains-errors lvalue
      | `-BinaryOperator 0x157142160 <col:44, col:50> 'int' contains-errors '!='
      |   |-RecoveryExpr 0x157142120 <col:44> '<dependent type>' contains-errors lvalue
      |   `-RecoveryExpr 0x157142140 <col:50> '<dependent type>' contains-errors lvalue
      `-CompoundStmt 0x157142dd0 <line:18:5, line:34:5>
        |-BinaryOperator 0x157142628 <line:22:2, col:50> 'char *' '='
        | |-DeclRefExpr 0x1571422a0 <col:2> 'char *' lvalue Var 0x157128408 'tabvarname' 'char *'
        | `-ImplicitCastExpr 0x157142610 <col:15, col:50> 'char *' <IntegralToPointer>
        |   `-CallExpr 0x1571425e8 <col:15, col:50> 'int'
        |     |-ImplicitCastExpr 0x1571425d0 <col:15> 'int (*)()' <FunctionToPointerDecay>
        |     | `-DeclRefExpr 0x1571423a0 <col:15> 'int ()' Function 0x1571422e8 'alloc' 'int ()'
        |     `-BinaryOperator 0x1571425b0 <col:21, col:49> 'unsigned int' '+'
        |       |-CStyleCastExpr 0x157142550 <col:21, col:45> 'unsigned int' <IntegralCast>
        |       | `-CallExpr 0x1571424f8 <col:31, col:45> 'int'
        |       |   |-ImplicitCastExpr 0x1571424e0 <col:31> 'int (*)()' <FunctionToPointerDecay>
        |       |   | `-DeclRefExpr 0x1571424a0 <col:31> 'int ()' Function 0x1571423e8 'STRLEN' 'int ()'
        |       |   `-ImplicitCastExpr 0x157142520 <col:38> 'char *' <LValueToRValue>
        |       |     `-DeclRefExpr 0x1571424c0 <col:38> 'char *' lvalue Var 0x157128388 'varname' 'char *'
        |       `-ImplicitCastExpr 0x157142598 <col:49> 'unsigned int' <IntegralCast>
        |         `-IntegerLiteral 0x157142578 <col:49> 'int' 3
        `-IfStmt 0x157142c70 <line:23:2, line:29:2>
          |-RecoveryExpr 0x157142668 <line:23:6, col:20> '_Bool' contains-errors
          `-CompoundStmt 0x157142c48 <line:24:2, line:29:2>
            |-CallExpr 0x157142838 <line:25:6, col:30> 'int'
            | |-ImplicitCastExpr 0x157142820 <col:6> 'int (*)()' <FunctionToPointerDecay>
            | | `-DeclRefExpr 0x157142768 <col:6> 'int ()' Function 0x1571426b0 'STRCPY' 'int ()'
            | |-ImplicitCastExpr 0x157142868 <col:13> 'char *' <LValueToRValue>
            | | `-DeclRefExpr 0x157142788 <col:13> 'char *' lvalue Var 0x157128408 'tabvarname' 'char *'
            | `-ImplicitCastExpr 0x157142880 <col:25> 'char *' <ArrayToPointerDecay>
            |   `-StringLiteral 0x157142800 <col:25> 'char[4]' lvalue "STR"
            |-CallExpr 0x157142968 <line:26:6, col:36> 'int'
            | |-ImplicitCastExpr 0x157142950 <col:6> 'int (*)()' <FunctionToPointerDecay>
            | | `-DeclRefExpr 0x157142898 <col:6> 'int ()' Function 0x1571426b0 'STRCPY' 'int ()'
            | |-BinaryOperator 0x157142910 <col:13, col:26> 'char *' '+'
            | | |-ImplicitCastExpr 0x1571428f8 <col:13> 'char *' <LValueToRValue>
            | | | `-DeclRefExpr 0x1571428b8 <col:13> 'char *' lvalue Var 0x157128408 'tabvarname' 'char *'
            | | `-IntegerLiteral 0x1571428d8 <col:26> 'int' 2
            | `-ImplicitCastExpr 0x157142998 <col:29> 'char *' <LValueToRValue>
            |   `-DeclRefExpr 0x157142930 <col:29> 'char *' lvalue Var 0x157128388 'varname' 'char *'
            `-CallExpr 0x157142c08 <line:28:6, col:25> 'int'
              |-ImplicitCastExpr 0x157142bf0 <col:6> 'int (*)()' <FunctionToPointerDecay>
              | `-DeclRefExpr 0x157142bb0 <col:6> 'int ()' Function 0x157142af8 'vim_free' 'int ()'
              `-ImplicitCastExpr 0x157142c30 <col:15> 'char *' <LValueToRValue>
                `-DeclRefExpr 0x157142bd0 <col:15> 'char *' lvalue Var 0x157128408 'tabvarname' 'char *'
