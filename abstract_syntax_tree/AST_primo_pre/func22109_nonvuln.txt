`-FunctionDecl 0x14d80df48  line:1:5 referenced invalid gf_utf8_mbstowcs 'int (unsigned short *, int, const char **)'
  |-ParmVarDecl 0x14d80dd28 <col:22, col:38> col:38 used dest 'unsigned short *'
  |-ParmVarDecl 0x14d80dda8 <col:44, col:51> col:51 invalid len 'int'
  |-ParmVarDecl 0x14d80de58 <col:56, col:69> col:69 used srcp 'const char **'
  `-CompoundStmt 0x14d8294e8 <line:2:1, line:64:1>
    |-BinaryOperator 0x14d80e150 <line:3:2, col:27> '<dependent type>' contains-errors '='
    | |-BinaryOperator 0x14d80e0f8 <col:2, col:21> '<dependent type>' contains-errors '*'
    | | |-RecoveryExpr 0x14d80e028 <col:2> '<dependent type>' contains-errors lvalue
    | | | `-DeclRefExpr 0x14d80e008 <col:2> 'int (unsigned short *, int, const char **)' Function 0x14d80df48 'gf_utf8_mbstowcs' 'int (unsigned short *, int, const char **)'
    | | `-RecoveryExpr 0x14d80e0d8 <col:21> '<dependent type>' contains-errors lvalue
    | `-UnaryOperator 0x14d80e138 <col:26, col:27> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   `-RecoveryExpr 0x14d80e118 <col:27> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x14d80e258 <line:4:2, col:25>
    | `-VarDecl 0x14d80e188 <col:2, col:21> col:14 used src 'const char *' cinit
    |   `-ImplicitCastExpr 0x14d80e240 <col:20, col:21> 'const char *' <LValueToRValue>
    |     `-UnaryOperator 0x14d80e228 <col:20, col:21> 'const char *' lvalue prefix '*' cannot overflow
    |       `-ImplicitCastExpr 0x14d80e210 <col:21> 'const char **' <LValueToRValue>
    |         `-DeclRefExpr 0x14d80e1f0 <col:21> 'const char **' lvalue ParmVar 0x14d80de58 'srcp' 'const char **'
    |-DeclStmt 0x14d80e328 <line:6:2, col:32>
    | `-VarDecl 0x14d80e288 <col:2, col:28> col:18 used destptr 'unsigned short *' cinit
    |   `-ImplicitCastExpr 0x14d80e310 <col:28> 'unsigned short *' <LValueToRValue>
    |     `-DeclRefExpr 0x14d80e2f0 <col:28> 'unsigned short *' lvalue ParmVar 0x14d80dd28 'dest' 'unsigned short *'
    |-ForStmt 0x14d8292b0 <line:7:2, line:57:2>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-BinaryOperator 0x14d80e380 <line:7:9, col:15> 'int' contains-errors '>'
    | | |-RecoveryExpr 0x14d80e340 <col:9> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x14d80e360 <col:15> 'int' 0
    | |-BinaryOperator 0x14d122618 <col:18, col:32> '<dependent type>' contains-errors ','
    | | |-UnaryOperator 0x14d80e3c0 <col:18, col:25> 'unsigned short *' postfix '++'
    | | | `-DeclRefExpr 0x14d80e3a0 <col:18> 'unsigned short *' lvalue Var 0x14d80e288 'destptr' 'unsigned short *'
    | | `-UnaryOperator 0x14d122600 <col:29, col:32> '<dependent type>' contains-errors postfix '--' cannot overflow
    | |   `-RecoveryExpr 0x14d80e3d8 <col:29> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x14d829250 <col:36, line:57:2>
    |   |-DeclStmt 0x14d1226f0 <line:8:3, col:31>
    |   | `-VarDecl 0x14d122650 <col:3, col:28> col:15 used backup_src 'const char *' cinit
    |   |   `-ImplicitCastExpr 0x14d1226d8 <col:28> 'const char *' <LValueToRValue>
    |   |     `-DeclRefExpr 0x14d1226b8 <col:28> 'const char *' lvalue Var 0x14d80e188 'src' 'const char *'
    |   |-DeclStmt 0x14d122788 <line:9:3, col:18>
    |   | `-VarDecl 0x14d122720 <col:3, col:17> col:17 used c 'unsigned char'
    |   |-DeclStmt 0x14d122820 <line:10:3, col:20>
    |   | `-VarDecl 0x14d1227b8 <col:3, col:18> col:18 used wc 'unsigned short'
    |   |-UnaryExprOrTypeTraitExpr 0x14d122890 <line:11:3, col:10> 'unsigned long' contains-errors sizeof
    |   | `-RecoveryExpr 0x14d122870 <col:10> '<dependent type>' contains-errors lvalue
    |   |-IfStmt 0x14d828a00 <line:12:3, line:39:3> has_else
    |   | |-BinaryOperator 0x14d1229b8 <line:12:7, col:20> 'int' contains-errors '=='
    |   | | |-CXXDependentScopeMemberExpr 0x14d122970 <col:7, col:11> '<dependent type>' contains-errors lvalue ->count
    |   | | | `-RecoveryExpr 0x14d122950 <col:7> '<dependent type>' contains-errors lvalue
    |   | | `-IntegerLiteral 0x14d122910 <col:20> 'int' 0
    |   | |-CompoundStmt 0x14d1233c0 <col:23, line:36:3>
    |   | | |-BinaryOperator 0x14d122aa0 <line:13:4, col:25> 'unsigned char' '='
    |   | | | |-DeclRefExpr 0x14d1229d8 <col:4> 'unsigned char' lvalue Var 0x14d122720 'c' 'unsigned char'
    |   | | | `-CStyleCastExpr 0x14d122a78 <col:8, col:25> 'unsigned char' <IntegralCast>
    |   | | |   `-ImplicitCastExpr 0x14d122a60 <col:24, col:25> 'char' <LValueToRValue> part_of_explicit_cast
    |   | | |     `-UnaryOperator 0x14d122a30 <col:24, col:25> 'const char' lvalue prefix '*' cannot overflow
    |   | | |       `-ImplicitCastExpr 0x14d122a18 <col:25> 'const char *' <LValueToRValue>
    |   | | |         `-DeclRefExpr 0x14d1229f8 <col:25> 'const char *' lvalue Var 0x14d80e188 'src' 'const char *'
    |   | | |-IfStmt 0x14d122ec0 <line:14:4, line:25:4> has_else
    |   | | | |-BinaryOperator 0x14d122b30 <line:14:8, col:12> 'int' '<'
    |   | | | | |-ImplicitCastExpr 0x14d122b18 <col:8> 'int' <IntegralCast>
    |   | | | | | `-ImplicitCastExpr 0x14d122b00 <col:8> 'unsigned char' <LValueToRValue>
    |   | | | | |   `-DeclRefExpr 0x14d122ac0 <col:8> 'unsigned char' lvalue Var 0x14d122720 'c' 'unsigned char'
    |   | | | | `-IntegerLiteral 0x14d122ae0 <col:12> 'int' 128
    |   | | | |-CompoundStmt 0x14d122d68 <col:18, line:22:4>
    |   | | | | |-IfStmt 0x14d122d08 <line:16:5, line:19:5>
    |   | | | | | |-BinaryOperator 0x14d122c28 <line:16:9, col:14> 'int' '=='
    |   | | | | | | |-ImplicitCastExpr 0x14d122c10 <col:9> 'int' <IntegralCast>
    |   | | | | | | | `-ImplicitCastExpr 0x14d122bf8 <col:9> 'unsigned char' <LValueToRValue>
    |   | | | | | | |   `-DeclRefExpr 0x14d122bb8 <col:9> 'unsigned char' lvalue Var 0x14d122720 'c' 'unsigned char'
    |   | | | | | | `-IntegerLiteral 0x14d122bd8 <col:14> 'int' 0
    |   | | | | | `-CompoundStmt 0x14d122ce8 <col:17, line:19:5>
    |   | | | | |   |-BinaryOperator 0x14d122cc0 <line:17:6, col:12> 'const char *' contains-errors '='
    |   | | | | |   | |-DeclRefExpr 0x14d122c48 <col:6> 'const char *' lvalue Var 0x14d80e188 'src' 'const char *'
    |   | | | | |   | `-RecoveryExpr 0x14d122ca0 <col:12> '<dependent type>' contains-errors lvalue
    |   | | | | |   `-BreakStmt 0x14d122ce0 <line:18:6>
    |   | | | | |-UnaryOperator 0x14d122d48 <line:20:5, col:8> 'const char *' postfix '++'
    |   | | | | | `-DeclRefExpr 0x14d122d28 <col:5> 'const char *' lvalue Var 0x14d80e188 'src' 'const char *'
    |   | | | | `-ContinueStmt 0x14d122d60 <line:21:5>
    |   | | | `-IfStmt 0x14d122ea0 <line:22:11, line:25:4>
    |   | | |   |-BinaryOperator 0x14d122e00 <line:22:15, col:19> 'int' '<'
    |   | | |   | |-ImplicitCastExpr 0x14d122de8 <col:15> 'int' <IntegralCast>
    |   | | |   | | `-ImplicitCastExpr 0x14d122dd0 <col:15> 'unsigned char' <LValueToRValue>
    |   | | |   | |   `-DeclRefExpr 0x14d122d90 <col:15> 'unsigned char' lvalue Var 0x14d122720 'c' 'unsigned char'
    |   | | |   | `-IntegerLiteral 0x14d122db0 <col:19> 'int' 192
    |   | | |   `-CompoundStmt 0x14d122e88 <col:25, line:25:4>
    |   | | |     `-GotoStmt 0x14d122e70 <line:24:5, col:10> 'bad_input' 0x14d122e20
    |   | | |-IfStmt 0x14d123358 <line:26:4, line:34:14> has_else
    |   | | | |-BinaryOperator 0x14d122f60 <line:26:8, col:12> 'int' '<'
    |   | | | | |-ImplicitCastExpr 0x14d122f48 <col:8> 'int' <IntegralCast>
    |   | | | | | `-ImplicitCastExpr 0x14d122f30 <col:8> 'unsigned char' <LValueToRValue>
    |   | | | | |   `-DeclRefExpr 0x14d122ef0 <col:8> 'unsigned char' lvalue Var 0x14d122720 'c' 'unsigned char'
    |   | | | | `-IntegerLiteral 0x14d122f10 <col:12> 'int' 224
    |   | | | |-CompoundStmt 0x14d123150 <col:18, line:30:4>
    |   | | | | `-IfStmt 0x14d123130 <line:29:5, col:24>
    |   | | | |   |-BinaryOperator 0x14d1230f8 <col:9, col:13> 'int' '<'
    |   | | | |   | |-ImplicitCastExpr 0x14d1230e0 <col:9> 'int' <IntegralCast>
    |   | | | |   | | `-ImplicitCastExpr 0x14d1230c8 <col:9> 'unsigned char' <LValueToRValue>
    |   | | | |   | |   `-DeclRefExpr 0x14d123088 <col:9> 'unsigned char' lvalue Var 0x14d122720 'c' 'unsigned char'
    |   | | | |   | `-IntegerLiteral 0x14d1230a8 <col:13> 'int' 194
    |   | | | |   `-GotoStmt 0x14d123118 <col:19, col:24> 'bad_input' 0x14d122e20
    |   | | | `-IfStmt 0x14d123328 <line:30:11, line:34:14> has_else
    |   | | |   |-BinaryOperator 0x14d1231d8 <line:30:15, col:19> 'int' '<'
    |   | | |   | |-ImplicitCastExpr 0x14d1231c0 <col:15> 'int' <IntegralCast>
    |   | | |   | | `-ImplicitCastExpr 0x14d1231a8 <col:15> 'unsigned char' <LValueToRValue>
    |   | | |   | |   `-DeclRefExpr 0x14d123168 <col:15> 'unsigned char' lvalue Var 0x14d122720 'c' 'unsigned char'
    |   | | |   | `-IntegerLiteral 0x14d123188 <col:19> 'int' 240
    |   | | |   |-CompoundStmt 0x14d123300 <col:25, line:33:4>
    |   | | |   `-GotoStmt 0x14d123310 <line:34:9, col:14> 'bad_input' 0x14d122e20
    |   | | `-UnaryOperator 0x14d1233a8 <line:35:4, col:7> 'const char *' postfix '++'
    |   | |   `-DeclRefExpr 0x14d123388 <col:4> 'const char *' lvalue Var 0x14d80e188 'src' 'const char *'
    |   | `-CompoundStmt 0x14d1235d8 <line:36:10, line:39:3>
    |   |   `-BinaryOperator 0x14d123558 <line:37:4, col:22> 'unsigned short' contains-errors '='
    |   |     |-DeclRefExpr 0x14d1233f0 <col:4> 'unsigned short' lvalue Var 0x14d1227b8 'wc' 'unsigned short'
    |   |     `-BinaryOperator 0x14d123538 <col:9, col:22> '<dependent type>' contains-errors '<<'
    |   |       |-CXXDependentScopeMemberExpr 0x14d1234f0 <col:9, col:13> '<dependent type>' contains-errors lvalue ->value
    |   |       | `-RecoveryExpr 0x14d1234d0 <col:9> '<dependent type>' contains-errors lvalue
    |   |       `-IntegerLiteral 0x14d123470 <col:22> 'int' 6
    |   |-ForStmt 0x14d829098 <line:40:3, line:49:3>
    |   | |-<<<NULL>>>
    |   | |-<<<NULL>>>
    |   | |-<<<NULL>>>
    |   | |-<<<NULL>>>
    |   | `-CompoundStmt 0x14d829068 <line:40:12, line:49:3>
    |   |   |-BinaryOperator 0x14d828b68 <line:41:4, col:33> 'unsigned char' '='
    |   |   | |-DeclRefExpr 0x14d828a30 <col:4> 'unsigned char' lvalue Var 0x14d122720 'c' 'unsigned char'
    |   |   | `-ImplicitCastExpr 0x14d828b50 <col:8, col:33> 'unsigned char' <IntegralCast>
    |   |   |   `-BinaryOperator 0x14d828b30 <col:8, col:33> 'int' '^'
    |   |   |     |-ImplicitCastExpr 0x14d828b18 <col:8, col:28> 'int' <IntegralCast>
    |   |   |     | `-CStyleCastExpr 0x14d828ad0 <col:8, col:28> 'unsigned char' <IntegralCast>
    |   |   |     |   `-ImplicitCastExpr 0x14d828ab8 <col:24, col:28> 'char' <LValueToRValue> part_of_explicit_cast
    |   |   |     |     `-UnaryOperator 0x14d828a88 <col:24, col:28> 'const char' lvalue prefix '*' cannot overflow
    |   |   |     |       `-UnaryOperator 0x14d828a70 <col:25, col:28> 'const char *' postfix '++'
    |   |   |     |         `-DeclRefExpr 0x14d828a50 <col:25> 'const char *' lvalue Var 0x14d80e188 'src' 'const char *'
    |   |   |     `-IntegerLiteral 0x14d828af8 <col:33> 'int' 128
    |   |   |-IfStmt 0x14d828cb8 <line:42:4, col:26>
    |   |   | |-UnaryOperator 0x14d828c38 <col:8, col:18> 'int' prefix '!' cannot overflow
    |   |   | | `-ParenExpr 0x14d828c18 <col:9, col:18> 'int'
    |   |   | |   `-BinaryOperator 0x14d828bf8 <col:10, col:14> 'int' '<'
    |   |   | |     |-ImplicitCastExpr 0x14d828be0 <col:10> 'int' <IntegralCast>
    |   |   | |     | `-ImplicitCastExpr 0x14d828bc8 <col:10> 'unsigned char' <LValueToRValue>
    |   |   | |     |   `-DeclRefExpr 0x14d828b88 <col:10> 'unsigned char' lvalue Var 0x14d122720 'c' 'unsigned char'
    |   |   | |     `-IntegerLiteral 0x14d828ba8 <col:14> 'int' 64
    |   |   | `-GotoStmt 0x14d828ca0 <col:21, col:26> 'bad_input_backup' 0x14d828c50
    |   |   |-IfStmt 0x14d828e80 <line:44:4, line:45:5>
    |   |   | |-BinaryOperator 0x14d828e58 <line:44:8, col:17> 'int' contains-errors '=='
    |   |   | | |-RecoveryExpr 0x14d828e38 <col:8> '<dependent type>' contains-errors lvalue
    |   |   | | `-IntegerLiteral 0x14d828df8 <col:17> 'int' 0
    |   |   | `-BreakStmt 0x14d828e78 <line:45:5>
    |   |   `-IfStmt 0x14d829048 <line:47:4, line:48:10>
    |   |     |-RecoveryExpr 0x14d829010 <line:47:8, col:68> '_Bool' contains-errors
    |   |     `-GotoStmt 0x14d829030 <line:48:5, col:10> 'bad_input_backup' 0x14d828c50
    |   |-BinaryOperator 0x14d829158 <line:50:3, col:14> 'unsigned short' '='
    |   | |-UnaryOperator 0x14d829108 <col:3, col:4> 'unsigned short' lvalue prefix '*' cannot overflow
    |   | | `-ImplicitCastExpr 0x14d8290f0 <col:4> 'unsigned short *' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x14d8290d0 <col:4> 'unsigned short *' lvalue Var 0x14d80e288 'destptr' 'unsigned short *'
    |   | `-ImplicitCastExpr 0x14d829140 <col:14> 'unsigned short' <LValueToRValue>
    |   |   `-DeclRefExpr 0x14d829120 <col:14> 'unsigned short' lvalue Var 0x14d1227b8 'wc' 'unsigned short'
    |   |-ContinueStmt 0x14d829198 <line:52:3>
    |   |-LabelStmt 0x14d829218 <line:54:1, line:55:9> 'bad_input_backup'
    |   | `-BinaryOperator 0x14d8291f8 <col:3, col:9> 'const char *' '='
    |   |   |-DeclRefExpr 0x14d8291a0 <col:3> 'const char *' lvalue Var 0x14d80e188 'src' 'const char *'
    |   |   `-ImplicitCastExpr 0x14d8291e0 <col:9> 'const char *' <LValueToRValue>
    |   |     `-DeclRefExpr 0x14d8291c0 <col:9> 'const char *' lvalue Var 0x14d122650 'backup_src' 'const char *'
    |   `-GotoStmt 0x14d829238 <line:56:3, col:8> 'bad_input' 0x14d122e20
    |-BinaryOperator 0x14d829370 <line:58:2, col:10> 'const char *' '='
    | |-UnaryOperator 0x14d829320 <col:2, col:3> 'const char *' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x14d829308 <col:3> 'const char **' <LValueToRValue>
    | |   `-DeclRefExpr 0x14d8292e8 <col:3> 'const char **' lvalue ParmVar 0x14d80de58 'srcp' 'const char **'
    | `-ImplicitCastExpr 0x14d829358 <col:10> 'const char *' <LValueToRValue>
    |   `-DeclRefExpr 0x14d829338 <col:10> 'const char *' lvalue Var 0x14d80e188 'src' 'const char *'
    `-LabelStmt 0x14d8294c8 <line:61:1, line:62:10> 'bad_input'
      `-BinaryOperator 0x14d8294a8 <col:2, col:10> 'const char *' '='
        |-UnaryOperator 0x14d829458 <col:2, col:3> 'const char *' lvalue prefix '*' cannot overflow
        | `-ImplicitCastExpr 0x14d829440 <col:3> 'const char **' <LValueToRValue>
        |   `-DeclRefExpr 0x14d829420 <col:3> 'const char **' lvalue ParmVar 0x14d80de58 'srcp' 'const char **'
        `-ImplicitCastExpr 0x14d829490 <col:10> 'const char *' <LValueToRValue>
          `-DeclRefExpr 0x14d829470 <col:10> 'const char *' lvalue Var 0x14d80e188 'src' 'const char *'
