`-FunctionDecl 0x12580e358  line:1:1 get_c_time 'int (union DateData *)'
  |-ParmVarDecl 0x12580e248 <col:12, col:28> col:28 used x 'union DateData *'
  `-CompoundStmt 0x125827580 <line:2:1, line:23:1>
    |-CallExpr 0x125826960 <line:3:5, col:28> 'int'
    | |-ImplicitCastExpr 0x125826948 <col:5> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x125826780 <col:5> 'int ()' Function 0x1258266c8 'assert' 'int ()'
    | `-CallExpr 0x125826908 <col:12, col:27> 'int'
    |   |-ImplicitCastExpr 0x1258268f0 <col:12> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x125826880 <col:12> 'int ()' Function 0x1258267c8 'complex_dat_p' 'int ()'
    |   `-ImplicitCastExpr 0x125826930 <col:26> 'union DateData *' <LValueToRValue>
    |     `-DeclRefExpr 0x1258268a0 <col:26> 'union DateData *' lvalue ParmVar 0x12580e248 'x' 'union DateData *'
    `-IfStmt 0x125827560 <line:4:5, line:22:5>
      |-UnaryOperator 0x125826b00 <line:4:9, col:23> 'int' prefix '!' cannot overflow
      | `-CallExpr 0x125826ac0 <col:10, col:23> 'int'
      |   |-ImplicitCastExpr 0x125826aa8 <col:10> 'int (*)()' <FunctionToPointerDecay>
      |   | `-DeclRefExpr 0x125826a68 <col:10> 'int ()' Function 0x1258269b0 'have_time_p' 'int ()'
      |   `-ImplicitCastExpr 0x125826ae8 <col:22> 'union DateData *' <LValueToRValue>
      |     `-DeclRefExpr 0x125826a88 <col:22> 'union DateData *' lvalue ParmVar 0x12580e248 'x' 'union DateData *'
      `-CompoundStmt 0x125827528 <col:26, line:22:5>
        |-DeclStmt 0x125826b98 <line:6:2, col:7>
        | `-VarDecl 0x125826b30 <col:2, col:6> col:6 used r 'int'
        |-CallExpr 0x125826d60 <line:7:2, col:21> 'int'
        | |-ImplicitCastExpr 0x125826d48 <col:2> 'int (*)()' <FunctionToPointerDecay>
        | | `-DeclRefExpr 0x125826bb0 <col:2> 'int ()' Function 0x1258266c8 'assert' 'int ()'
        | `-CallExpr 0x125826d08 <col:9, col:20> 'int'
        |   |-ImplicitCastExpr 0x125826cf0 <col:9> 'int (*)()' <FunctionToPointerDecay>
        |   | `-DeclRefExpr 0x125826cb0 <col:9> 'int ()' Function 0x125826bf8 'have_df_p' 'int ()'
        |   `-ImplicitCastExpr 0x125826d30 <col:19> 'union DateData *' <LValueToRValue>
        |     `-DeclRefExpr 0x125826cd0 <col:19> 'union DateData *' lvalue ParmVar 0x12580e248 'x' 'union DateData *'
        |-BinaryOperator 0x125827028 <line:8:2, col:38> 'int' contains-errors '='
        | |-DeclRefExpr 0x125826d88 <col:2> 'int' lvalue Var 0x125826b30 'r' 'int'
        | `-CallExpr 0x125826ff8 <col:6, col:38> '<dependent type>' contains-errors
        |   |-DeclRefExpr 0x125826e88 <col:6> 'int ()' Function 0x125826dd0 'df_utc_to_local' 'int ()'
        |   |-CXXDependentScopeMemberExpr 0x125826f08 <col:22, col:27> '<dependent type>' contains-errors lvalue .df
        |   | `-RecoveryExpr 0x125826ee0 <col:22, col:25> '<dependent type>' contains-errors lvalue
        |   |   `-DeclRefExpr 0x125826ea8 <col:22> 'union DateData *' lvalue ParmVar 0x12580e248 'x' 'union DateData *'
        |   `-CXXDependentScopeMemberExpr 0x125826fb0 <col:31, col:36> '<dependent type>' contains-errors lvalue .of
        |     `-RecoveryExpr 0x125826f88 <col:31, col:34> '<dependent type>' contains-errors lvalue
        |       `-DeclRefExpr 0x125826f50 <col:31> 'union DateData *' lvalue ParmVar 0x12580e248 'x' 'union DateData *'
        |-CallExpr 0x1258273a8 <line:9:2, col:48> '<dependent type>' contains-errors
        | |-DeclRefExpr 0x125827128 <col:2> 'int ()' Function 0x125827070 'df_to_time' 'int ()'
        | |-DeclRefExpr 0x125827148 <col:13> 'int' lvalue Var 0x125826b30 'r' 'int'
        | |-UnaryOperator 0x125827210 <col:16, col:22> '<dependent type>' contains-errors prefix '&' cannot overflow
        | | `-CXXDependentScopeMemberExpr 0x1258271c8 <col:17, col:22> '<dependent type>' contains-errors lvalue .hour
        | |   `-RecoveryExpr 0x1258271a0 <col:17, col:20> '<dependent type>' contains-errors lvalue
        | |     `-DeclRefExpr 0x125827168 <col:17> 'union DateData *' lvalue ParmVar 0x12580e248 'x' 'union DateData *'
        | |-UnaryOperator 0x1258272d0 <col:28, col:34> '<dependent type>' contains-errors prefix '&' cannot overflow
        | | `-CXXDependentScopeMemberExpr 0x125827288 <col:29, col:34> '<dependent type>' contains-errors lvalue .min
        | |   `-RecoveryExpr 0x125827260 <col:29, col:32> '<dependent type>' contains-errors lvalue
        | |     `-DeclRefExpr 0x125827228 <col:29> 'union DateData *' lvalue ParmVar 0x12580e248 'x' 'union DateData *'
        | `-UnaryOperator 0x125827390 <col:39, col:45> '<dependent type>' contains-errors prefix '&' cannot overflow
        |   `-CXXDependentScopeMemberExpr 0x125827348 <col:40, col:45> '<dependent type>' contains-errors lvalue .sec
        |     `-RecoveryExpr 0x125827320 <col:40, col:43> '<dependent type>' contains-errors lvalue
        |       `-DeclRefExpr 0x1258272e8 <col:40> 'union DateData *' lvalue ParmVar 0x12580e248 'x' 'union DateData *'
        `-CompoundAssignOperator 0x1258274f8 <line:10:2, col:16> '<dependent type>' contains-errors '|=' ComputeLHSTy='NULL TYPE' ComputeResultTy='NULL TYPE'
          |-CXXDependentScopeMemberExpr 0x125827448 <col:2, col:7> '<dependent type>' contains-errors lvalue .flags
          | `-RecoveryExpr 0x125827420 <col:2, col:5> '<dependent type>' contains-errors lvalue
          |   `-DeclRefExpr 0x1258273e8 <col:2> 'union DateData *' lvalue ParmVar 0x12580e248 'x' 'union DateData *'
          `-RecoveryExpr 0x1258274d8 <col:16> '<dependent type>' contains-errors lvalue
