`-FunctionDecl 0x12600de88  line:1:16 invalid conditional 'int *(int *, int)' static
  |-ParmVarDecl 0x12600dd28 <col:28, col:38> col:38 invalid J 'int *'
  |-ParmVarDecl 0x12600dda8 <col:41, col:45> col:45 used notin 'int'
  `-CompoundStmt 0x125922c38 <line:2:1, line:12:1>
    |-IfStmt 0x125922bd0 <line:5:2, line:10:2>
    | |-CallExpr 0x12600e308 <line:5:6, col:23> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x12600e2b0 <col:6> 'int ()' Function 0x12600e1f8 'jsP_accept' 'int ()'
    | | |-RecoveryExpr 0x12600e2d0 <col:17> '<dependent type>' contains-errors lvalue
    | | `-CharacterLiteral 0x12600e2f0 <col:20> 'int' 63
    | `-CompoundStmt 0x125922bb0 <col:26, line:10:2>
    |   |-CallExpr 0x125922880 <line:7:3, col:20> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x125922828 <col:3> 'int ()' Function 0x125922770 'jsP_expect' 'int ()'
    |   | |-RecoveryExpr 0x125922848 <col:14> '<dependent type>' contains-errors lvalue
    |   | `-CharacterLiteral 0x125922868 <col:17> 'int' 58
    |   `-ReturnStmt 0x125922ba0 <line:9:3, col:28>
    |     `-CallExpr 0x125922b60 <col:10, col:28> '<dependent type>' contains-errors
    |       |-DeclRefExpr 0x125922a20 <col:10> 'int ()' Function 0x125922968 'EXP3' 'int ()'
    |       |-RecoveryExpr 0x125922ae0 <col:15> '<dependent type>' contains-errors lvalue
    |       |-RecoveryExpr 0x125922b00 <col:21> '<dependent type>' contains-errors lvalue
    |       |-RecoveryExpr 0x125922b20 <col:24> '<dependent type>' contains-errors lvalue
    |       `-RecoveryExpr 0x125922b40 <col:27> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x125922c28 <line:11:2, col:9>
      `-RecoveryExpr 0x125922c08 <col:9> '<dependent type>' contains-errors lvalue
