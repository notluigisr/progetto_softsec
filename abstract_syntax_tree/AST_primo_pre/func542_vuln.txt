`-FunctionDecl 0x12c80ddf8  line:1:1 invalid zstatus 'int (int *)'
  |-ParmVarDecl 0x12c80dd28 <col:9, col:18> col:18 invalid i_ctx_p 'int *'
  `-CompoundStmt 0x12c828978 <line:2:1, line:59:1>
    `-SwitchStmt 0x12c80e0a8 <line:5:5, line:58:5>
      |-CallExpr 0x12c80e080 <line:5:13, col:22> '<dependent type>' contains-errors
      | |-DeclRefExpr 0x12c80e000 <col:13> 'int ()' Function 0x12c80df48 'r_type' 'int ()'
      | `-RecoveryExpr 0x12c80e060 <col:20> '<dependent type>' contains-errors lvalue
      `-CompoundStmt 0x12c828948 <col:25, line:58:5>
        |-CompoundStmt 0x12c80e3e8 <line:7:13, line:11:13>
        |-ReturnStmt 0x12c124420 <line:12:13, col:20>
        | `-IntegerLiteral 0x12c124400 <col:20> 'int' 0
        |-CompoundStmt 0x12c8287e0 <line:14:13, line:55:13>
        | |-DeclStmt 0x12c1249e8 <line:16:17, col:34>
        | | |-RecordDecl 0x12c124448 <col:17, col:24> col:24 struct stat
        | | `-VarDecl 0x12c124548 <col:17, col:29> col:29 invalid fstat 'struct stat'
        | |-DeclStmt 0x12c124d40 <line:17:17, line:18:82>
        | | `-VarDecl 0x12c124a18 <line:17:17, line:18:81> line:17:21 used code 'int' cinit
        | |   `-CallExpr 0x12c124d00 <col:28, line:18:81> '<dependent type>' contains-errors
        | |     |-DeclRefExpr 0x12c124b60 <line:17:28> 'int ()' Function 0x12c124aa8 'parse_file_name' 'int ()'
        | |     |-RecoveryExpr 0x12c124c88 <col:44> '<dependent type>' contains-errors lvalue
        | |     |-UnaryOperator 0x12c124cc8 <col:48, col:49> '<dependent type>' contains-errors prefix '&' cannot overflow
        | |     | `-RecoveryExpr 0x12c124ca8 <col:49> '<dependent type>' contains-errors lvalue
        | |     |-CXXDependentScopeMemberExpr 0x12c124be8 <line:18:44, col:53> '<dependent type>' contains-errors lvalue ->LockFilePermissions
        | |     | `-RecoveryExpr 0x12c124bc8 <col:44> '<dependent type>' contains-errors lvalue
        | |     `-RecoveryExpr 0x12c124ce0 <col:74> '<dependent type>' contains-errors lvalue
        | |-IfStmt 0x12c124f50 <line:19:17, line:25:17>
        | | |-BinaryOperator 0x12c124db0 <line:19:21, col:28> 'int' contains-errors '<'
        | | | |-ImplicitCastExpr 0x12c124d98 <col:21> 'int' contains-errors <LValueToRValue>
        | | | | `-DeclRefExpr 0x12c124d58 <col:21> 'int' contains-errors lvalue Var 0x12c124a18 'code' 'int'
        | | | `-IntegerLiteral 0x12c124d78 <col:28> 'int' 0
        | | `-CompoundStmt 0x12c124f30 <col:31, line:25:17>
        | |   |-IfStmt 0x12c124ec8 <line:20:21, line:23:21>
        | |   | |-RecoveryExpr 0x12c124df0 <line:20:25, col:33> '_Bool' contains-errors
        | |   | `-CompoundStmt 0x12c124eb0 <col:61, line:23:21>
        | |   |   `-BinaryOperator 0x12c124e90 <line:22:25, col:32> 'int' contains-errors '='
        | |   |     |-DeclRefExpr 0x12c124e50 <col:25> 'int' contains-errors lvalue Var 0x12c124a18 'code' 'int'
        | |   |     `-IntegerLiteral 0x12c124e70 <col:32> 'int' 0
        | |   `-ReturnStmt 0x12c124f20 <line:24:21, col:28>
        | |     `-ImplicitCastExpr 0x12c124f08 <col:28> 'int' contains-errors <LValueToRValue>
        | |       `-DeclRefExpr 0x12c124ee8 <col:28> 'int' contains-errors lvalue Var 0x12c124a18 'code' 'int'
        | |-IfStmt 0x12c1251b0 <line:27:17, line:28:28>
        | | |-BinaryOperator 0x12c125148 <line:27:21, col:28> 'int' contains-errors '<'
        | | | |-ImplicitCastExpr 0x12c125130 <col:21> 'int' contains-errors <LValueToRValue>
        | | | | `-DeclRefExpr 0x12c1250f0 <col:21> 'int' contains-errors lvalue Var 0x12c124a18 'code' 'int'
        | | | `-IntegerLiteral 0x12c125110 <col:28> 'int' 0
        | | `-ReturnStmt 0x12c1251a0 <line:28:21, col:28>
        | |   `-ImplicitCastExpr 0x12c125188 <col:28> 'int' contains-errors <LValueToRValue>
        | |     `-DeclRefExpr 0x12c125168 <col:28> 'int' contains-errors lvalue Var 0x12c124a18 'code' 'int'
        | |-SwitchStmt 0x12c125260 <line:31:17, line:52:17>
        | | |-ImplicitCastExpr 0x12c125248 <line:31:25> 'int' contains-errors <LValueToRValue>
        | | | `-DeclRefExpr 0x12c125228 <col:25> 'int' contains-errors lvalue Var 0x12c124a18 'code' 'int'
        | | `-CompoundStmt 0x12c828648 <col:31, line:52:17>
        | |   |-CaseStmt 0x12c1252c0 <line:32:21, line:33:39>
        | |   | |-ConstantExpr 0x12c1252a8 <line:32:26> 'int'
        | |   | | `-IntegerLiteral 0x12c125288 <col:26> 'int' 0
        | |   | `-CallExpr 0x12c827c68 <line:33:25, col:39> 'int'
        | |   |   |-ImplicitCastExpr 0x12c827c50 <col:25> 'int (*)()' <FunctionToPointerDecay>
        | |   |   | `-DeclRefExpr 0x12c1253c8 <col:25> 'int ()' Function 0x12c125310 'check_ostack' 'int ()'
        | |   |   `-IntegerLiteral 0x12c827c00 <col:38> 'int' 4
        | |   |-CallExpr 0x12c827dc8 <line:35:25, col:31> 'int'
        | |   | |-ImplicitCastExpr 0x12c827db0 <col:25> 'int (*)()' <FunctionToPointerDecay>
        | |   | | `-DeclRefExpr 0x12c827d70 <col:25> 'int ()' Function 0x12c827cb8 'push' 'int ()'
        | |   | `-IntegerLiteral 0x12c827d90 <col:30> 'int' 4
        | |   |-BreakStmt 0x12c8285a0 <line:48:25>
        | |   `-BinaryOperator 0x12c828628 <line:51:25, col:32> 'int' contains-errors '='
        | |     |-DeclRefExpr 0x12c8285e8 <col:25> 'int' contains-errors lvalue Var 0x12c124a18 'code' 'int'
        | |     `-IntegerLiteral 0x12c828608 <col:32> 'int' 0
        | `-ReturnStmt 0x12c8287d0 <line:54:17, col:24>
        |   `-ImplicitCastExpr 0x12c8287b8 <col:24> 'int' contains-errors <LValueToRValue>
        |     `-DeclRefExpr 0x12c828798 <col:24> 'int' contains-errors lvalue Var 0x12c124a18 'code' 'int'
        `-DefaultStmt 0x12c828928 <line:56:9, col:16>
          `-NullStmt 0x12c828920 <col:16>
