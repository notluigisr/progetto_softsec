`-FunctionDecl 0x155928a88  line:1:14 invalid Eval 'int (int *, int *)'
  |-ParmVarDecl 0x155928928 <col:19, col:34> col:34 referenced invalid context 'int *'
  |-ParmVarDecl 0x1559289a8 <col:43, col:55> col:55 invalid node 'int *'
  `-CompoundStmt 0x1560099e8 <col:61, line:71:1>
    |-DeclStmt 0x155928dc8 <line:2:3, col:48>
    | `-VarDecl 0x155928b58 <col:3, col:14> col:14 invalid is_soft_nms 'const int'
    |-DeclStmt 0x157009200 <line:4:3, col:79>
    | `-VarDecl 0x155928df8 <col:3, col:23> col:23 invalid input_boxes 'const int *'
    |-DeclStmt 0x157009408 <line:5:3, col:56>
    | `-VarDecl 0x157009230 <col:3, col:55> col:13 num_boxes 'const int' cinit
    |   `-CallExpr 0x1570093d8 <col:25, col:55> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x157009378 <col:25> 'int ()' Function 0x1570092c0 'SizeOfDimension' 'int ()'
    |     |-RecoveryExpr 0x157009398 <col:41> '<dependent type>' contains-errors lvalue
    |     `-IntegerLiteral 0x1570093b8 <col:54> 'int' 0
    |-DeclStmt 0x157009550 <line:6:3, line:7:50>
    | `-VarDecl 0x157009438 <line:6:3, col:23> col:23 invalid input_scores 'const int *'
    |-DeclStmt 0x157009698 <line:8:3, line:9:57>
    | `-VarDecl 0x157009580 <line:8:3, col:23> col:23 invalid input_max_output_size 'const int *'
    |-DeclStmt 0x157009778 <line:10:3, col:79>
    | `-VarDecl 0x1570096c8 <col:3, col:13> col:13 used max_output_size_value 'const int'
    |-CallExpr 0x157009948 <line:11:3, col:55> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x157009870 <col:3> 'int ()' Function 0x1570097b8 'TF_LITE_ENSURE' 'int ()'
    | |-RecoveryExpr 0x157009890 <col:18> '<dependent type>' contains-errors lvalue
    | `-ParenExpr 0x157009928 <col:27, col:54> 'int'
    |   `-BinaryOperator 0x157009908 <col:28, col:53> 'int' '>='
    |     |-ImplicitCastExpr 0x1570098f0 <col:28> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x1570098b0 <col:28> 'const int' lvalue Var 0x1570096c8 'max_output_size_value' 'const int'
    |     `-IntegerLiteral 0x1570098d0 <col:53> 'int' 0
    |-DeclStmt 0x157009b40 <line:12:3, col:80>
    | `-VarDecl 0x157009990 <col:3, col:14> col:14 invalid is_max_output_size_const 'const int'
    |-DeclStmt 0x157009c88 <line:13:3, line:14:56>
    | `-VarDecl 0x157009b70 <line:13:3, col:23> col:23 invalid input_iou_threshold 'const int *'
    |-DeclStmt 0x157009d20 <line:15:3, col:73>
    | `-VarDecl 0x157009cb8 <col:3, col:15> col:15 iou_threshold 'const float'
    |-DeclStmt 0x157009e18 <line:16:3, line:17:58>
    | `-VarDecl 0x157009d50 <line:16:3, col:23> col:23 invalid input_score_threshold 'const int *'
    |-DeclStmt 0x157009eb0 <line:18:3, col:77>
    | `-VarDecl 0x157009e48 <col:3, col:15> col:15 score_threshold 'const float'
    `-IfStmt 0x1560099b8 <line:24:3, line:68:3> has_else
      |-RecoveryExpr 0x157009ec8 <line:24:7> '<dependent type>' contains-errors lvalue
      |-CompoundStmt 0x1560097b0 <col:20, line:52:3>
      | |-DeclStmt 0x157009fc8 <line:25:5, line:26:51>
      | | `-VarDecl 0x157009f00 <line:25:5, col:25> col:25 invalid input_sigma 'const int *'
      | |-DeclStmt 0x15700a060 <line:27:5, col:68>
      | | `-VarDecl 0x157009ff8 <col:5, col:17> col:17 used soft_nms_sigma 'const float'
      | |-IfStmt 0x156009290 <line:28:5, line:32:5>
      | | |-BinaryOperator 0x15700a0e8 <line:28:9, col:26> 'int' '<'
      | | | |-ImplicitCastExpr 0x15700a0b8 <col:9> 'float' <LValueToRValue>
      | | | | `-DeclRefExpr 0x15700a078 <col:9> 'const float' lvalue Var 0x157009ff8 'soft_nms_sigma' 'const float'
      | | | `-ImplicitCastExpr 0x15700a0d0 <col:26> 'float' <IntegralToFloating>
      | | |   `-IntegerLiteral 0x15700a098 <col:26> 'int' 0
      | | `-CompoundStmt 0x156009278 <col:29, line:32:5>
      | |   `-CallExpr 0x156009240 <line:29:7, line:30:42> '<dependent type>' contains-errors
      | |     |-CXXDependentScopeMemberExpr 0x15700a150 <line:29:7, col:16> '<dependent type>' contains-errors lvalue ->ReportError
      | |     | `-RecoveryExpr 0x15700a128 <col:7> '<dependent type>' contains-errors lvalue
      | |     |   `-DeclRefExpr 0x15700a108 <col:7> 'int *' lvalue ParmVar 0x155928928 'context' 'int *'
      | |     |-RecoveryExpr 0x15700a198 <col:28> '<dependent type>' contains-errors lvalue
      | |     |-StringLiteral 0x156009200 <col:37> 'char[4]' lvalue "STR"
      | |     `-DeclRefExpr 0x156009220 <line:30:28> 'const float' lvalue Var 0x157009ff8 'soft_nms_sigma' 'const float'
      | `-IfStmt 0x156009670 <line:40:5, line:43:5>
      |   |-UnaryOperator 0x1560094e8 <line:40:9, col:10> '<dependent type>' contains-errors prefix '!' cannot overflow
      |   | `-ImplicitCastExpr 0x1560094d0 <col:10> '<dependent type>' contains-errors <LValueToRValue>
      |   |   `-RecoveryExpr 0x1560094b0 <col:10> '<dependent type>' contains-errors lvalue
      |   `-CompoundStmt 0x156009660 <col:36, line:43:5>
      `-CompoundStmt 0x1560099a0 <line:52:10, line:68:3>
        `-IfStmt 0x156009940 <line:57:5, line:59:5>
          |-UnaryOperator 0x1560098d8 <line:57:9, col:10> '<dependent type>' contains-errors prefix '!' cannot overflow
          | `-ImplicitCastExpr 0x1560098c0 <col:10> '<dependent type>' contains-errors <LValueToRValue>
          |   `-RecoveryExpr 0x1560098a0 <col:10> '<dependent type>' contains-errors lvalue
          `-CompoundStmt 0x156009930 <col:36, line:59:5>
