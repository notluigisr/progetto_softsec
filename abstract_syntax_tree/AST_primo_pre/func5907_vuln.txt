`-FunctionDecl 0x14c927ba8  line:1:5 sum_end 'int (char *)'
  |-ParmVarDecl 0x14c927ad8 <col:13, col:19> col:19 used sum 'char *'
  `-CompoundStmt 0x14c941470 <line:2:1, line:23:1>
    `-SwitchStmt 0x14c927d08 <line:3:2, line:20:2>
      |-RecoveryExpr 0x14c927ce8 <line:3:10> '<dependent type>' contains-errors lvalue
      `-CompoundStmt 0x14c941338 <col:23, line:20:2>
        |-BreakStmt 0x14c927ec8 <line:6:3>
        |-BreakStmt 0x14c9281a8 <line:11:3>
        |-BreakStmt 0x14c941288 <line:16:3>
        |-BinaryOperator 0x14c941310 <line:18:3, col:10> 'char' '='
        | |-UnaryOperator 0x14c9412c8 <col:3, col:4> 'char' lvalue prefix '*' cannot overflow
        | | `-ImplicitCastExpr 0x14c9412b0 <col:4> 'char *' <LValueToRValue>
        | |   `-DeclRefExpr 0x14c941290 <col:4> 'char *' lvalue ParmVar 0x14c927ad8 'sum' 'char *'
        | `-ImplicitCastExpr 0x14c9412f8 <col:10> 'char' <IntegralCast>
        |   `-CharacterLiteral 0x14c9412e0 <col:10> 'int' 0
        `-BreakStmt 0x14c941330 <line:19:3>
