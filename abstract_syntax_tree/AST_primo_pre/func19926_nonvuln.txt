`-FunctionDecl 0x12f023488  line:1:1 invalid spell_iswordp 'int (char *, int *)'
  |-ParmVarDecl 0x12f0232f0 <line:2:5, col:13> col:13 used p 'char *'
  |-ParmVarDecl 0x12f0233a8 <line:3:5, col:12> col:12 invalid wp 'int *'
  `-CompoundStmt 0x12e0934b8 <line:4:1, line:35:1>
    |-DeclStmt 0x12f0235c0 <line:5:5, col:14>
    | `-VarDecl 0x12f023558 <col:5, col:13> col:13 used s 'char *'
    |-DeclStmt 0x12f023658 <line:6:5, col:11>
    | `-VarDecl 0x12f0235f0 <col:5, col:10> col:10 used l 'int'
    |-DeclStmt 0x12f0236f0 <line:7:5, col:11>
    | `-VarDecl 0x12f023688 <col:5, col:10> col:10 used c 'int'
    `-IfStmt 0x12e0923c8 <line:9:5, line:32:5>
      |-RecoveryExpr 0x12f023720 <line:9:9> '<dependent type>' contains-errors lvalue
      `-CompoundStmt 0x12e092390 <line:10:5, line:32:5>
        |-BinaryOperator 0x12f023988 <line:11:2, col:18> 'int' '='
        | |-DeclRefExpr 0x12f023740 <col:2> 'int' lvalue Var 0x12f0235f0 'l' 'int'
        | `-CallExpr 0x12f023948 <col:6, col:18> 'int'
        |   |-ImplicitCastExpr 0x12f023930 <col:6> 'int (*)()' <FunctionToPointerDecay>
        |   | `-DeclRefExpr 0x12f0238c0 <col:6> 'int ()' Function 0x12f023808 'mb_ptr2len' 'int ()'
        |   `-ImplicitCastExpr 0x12f023970 <col:17> 'char *' <LValueToRValue>
        |     `-DeclRefExpr 0x12f0238e0 <col:17> 'char *' lvalue ParmVar 0x12f0232f0 'p' 'char *'
        |-BinaryOperator 0x12e091400 <line:12:2, col:6> 'char *' '='
        | |-DeclRefExpr 0x12f0239a8 <col:2> 'char *' lvalue Var 0x12f023558 's' 'char *'
        | `-ImplicitCastExpr 0x12f0239e8 <col:6> 'char *' <LValueToRValue>
        |   `-DeclRefExpr 0x12f0239c8 <col:6> 'char *' lvalue ParmVar 0x12f0232f0 'p' 'char *'
        |-IfStmt 0x12e091e98 <line:13:2, line:26:2> has_else
        | |-BinaryOperator 0x12e091478 <line:13:6, col:11> 'int' '=='
        | | |-ImplicitCastExpr 0x12e091460 <col:6> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x12e091420 <col:6> 'int' lvalue Var 0x12f0235f0 'l' 'int'
        | | `-IntegerLiteral 0x12e091440 <col:11> 'int' 1
        | |-CompoundStmt 0x12e0916c0 <line:14:2, line:18:2>
        | | `-IfStmt 0x12e0916a0 <line:16:6, line:17:11>
        | |   |-ArraySubscriptExpr 0x12e0915c8 <line:16:10, col:34> '<dependent type>' contains-errors lvalue
        | |   | |-ImplicitCastExpr 0x12e091598 <col:10, col:19> '<dependent type>' contains-errors <LValueToRValue>
        | |   | | `-CXXDependentScopeMemberExpr 0x12e091500 <col:10, col:19> '<dependent type>' contains-errors lvalue ->b_spell_ismw
        | |   | |   `-CXXDependentScopeMemberExpr 0x12e0914b8 <col:10, col:14> '<dependent type>' contains-errors lvalue ->w_s
        | |   | |     `-RecoveryExpr 0x12e091498 <col:10> '<dependent type>' contains-errors lvalue
        | |   | `-ImplicitCastExpr 0x12e0915b0 <col:32, col:33> 'char' <LValueToRValue>
        | |   |   `-UnaryOperator 0x12e091580 <col:32, col:33> 'char' lvalue prefix '*' cannot overflow
        | |   |     `-ImplicitCastExpr 0x12e091568 <col:33> 'char *' <LValueToRValue>
        | |   |       `-DeclRefExpr 0x12e091548 <col:33> 'char *' lvalue ParmVar 0x12f0232f0 'p' 'char *'
        | |   `-BinaryOperator 0x12e091680 <line:17:3, col:11> 'char *' '='
        | |     |-DeclRefExpr 0x12e0915e8 <col:3> 'char *' lvalue Var 0x12f023558 's' 'char *'
        | |     `-BinaryOperator 0x12e091660 <col:7, col:11> 'char *' '+'
        | |       |-ImplicitCastExpr 0x12e091648 <col:7> 'char *' <LValueToRValue>
        | |       | `-DeclRefExpr 0x12e091608 <col:7> 'char *' lvalue ParmVar 0x12f0232f0 'p' 'char *'
        | |       `-IntegerLiteral 0x12e091628 <col:11> 'int' 1
        | `-CompoundStmt 0x12e091e78 <line:20:2, line:26:2>
        |   |-BinaryOperator 0x12e091870 <line:21:6, col:23> 'int' '='
        |   | |-DeclRefExpr 0x12e0916d8 <col:6> 'int' lvalue Var 0x12f023688 'c' 'int'
        |   | `-CallExpr 0x12e091830 <col:10, col:23> 'int'
        |   |   |-ImplicitCastExpr 0x12e091818 <col:10> 'int (*)()' <FunctionToPointerDecay>
        |   |   | `-DeclRefExpr 0x12e0917d8 <col:10> 'int ()' Function 0x12e091720 'mb_ptr2char' 'int ()'
        |   |   `-ImplicitCastExpr 0x12e091858 <col:22> 'char *' <LValueToRValue>
        |   |     `-DeclRefExpr 0x12e0917f8 <col:22> 'char *' lvalue ParmVar 0x12f0232f0 'p' 'char *'
        |   `-IfStmt 0x12e091e58 <line:22:6, line:25:11>
        |     |-RecoveryExpr 0x12e091d68 <line:22:10, line:24:57> '_Bool' contains-errors
        |     `-BinaryOperator 0x12e091e38 <line:25:3, col:11> 'char *' '='
        |       |-DeclRefExpr 0x12e091d88 <col:3> 'char *' lvalue Var 0x12f023558 's' 'char *'
        |       `-BinaryOperator 0x12e091e18 <col:7, col:11> 'char *' '+'
        |         |-ImplicitCastExpr 0x12e091de8 <col:7> 'char *' <LValueToRValue>
        |         | `-DeclRefExpr 0x12e091da8 <col:7> 'char *' lvalue ParmVar 0x12f0232f0 'p' 'char *'
        |         `-ImplicitCastExpr 0x12e091e00 <col:11> 'int' <LValueToRValue>
        |           `-DeclRefExpr 0x12e091dc8 <col:11> 'int' lvalue Var 0x12f0235f0 'l' 'int'
        |-BinaryOperator 0x12e091f80 <line:28:2, col:19> 'int' '='
        | |-DeclRefExpr 0x12e091ec8 <col:2> 'int' lvalue Var 0x12f023688 'c' 'int'
        | `-CallExpr 0x12e091f40 <col:6, col:19> 'int'
        |   |-ImplicitCastExpr 0x12e091f28 <col:6> 'int (*)()' <FunctionToPointerDecay>
        |   | `-DeclRefExpr 0x12e091ee8 <col:6> 'int ()' Function 0x12e091720 'mb_ptr2char' 'int ()'
        |   `-ImplicitCastExpr 0x12e091f68 <col:18> 'char *' <LValueToRValue>
        |     `-DeclRefExpr 0x12e091f08 <col:18> 'char *' lvalue Var 0x12f023558 's' 'char *'
        `-IfStmt 0x12e0922f0 <line:29:2, line:30:54>
          |-BinaryOperator 0x12e091ff8 <line:29:6, col:10> 'int' '>'
          | |-ImplicitCastExpr 0x12e091fe0 <col:6> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x12e091fa0 <col:6> 'int' lvalue Var 0x12f023688 'c' 'int'
          | `-IntegerLiteral 0x12e091fc0 <col:10> 'int' 255
          `-ReturnStmt 0x12e0922e0 <line:30:6, col:54>
            `-CallExpr 0x12e0922b0 <col:13, col:54> '<dependent type>' contains-errors
              |-DeclRefExpr 0x12e0920f8 <col:13> 'int ()' Function 0x12e092040 'spell_mb_isword_class' 'int ()'
              |-CallExpr 0x12e092250 <col:35, col:49> 'int'
              | |-ImplicitCastExpr 0x12e092238 <col:35> 'int (*)()' <FunctionToPointerDecay>
              | | `-DeclRefExpr 0x12e0921f8 <col:35> 'int ()' Function 0x12e092140 'mb_get_class' 'int ()'
              | `-ImplicitCastExpr 0x12e092278 <col:48> 'char *' <LValueToRValue>
              |   `-DeclRefExpr 0x12e092218 <col:48> 'char *' lvalue Var 0x12f023558 's' 'char *'
              `-RecoveryExpr 0x12e092290 <col:52> '<dependent type>' contains-errors lvalue
