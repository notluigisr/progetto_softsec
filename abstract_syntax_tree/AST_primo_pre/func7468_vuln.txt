`-FunctionDecl 0x121944e78  line:1:12 ax25_create 'int (struct net *, struct socket *, int, int)' static
  |-ParmVarDecl 0x121928648 <col:24, col:36> col:36 used net 'struct net *'
  |-ParmVarDecl 0x121944c28 <col:41, col:56> col:56 used sock 'struct socket *'
  |-ParmVarDecl 0x121944ca8 <col:62, col:66> col:66 used protocol 'int'
  |-ParmVarDecl 0x121944d28 <line:2:10, col:14> col:14 used kern 'int'
  `-CompoundStmt 0x121948190 <line:3:1, line:75:1>
    |-DeclStmt 0x121945178 <line:4:2, col:17>
    | |-RecordDecl 0x121944f88 <col:2, col:9> col:9 struct sock
    | `-VarDecl 0x1219450f8 <col:2, col:15> col:15 used sk 'struct sock *'
    |-IfStmt 0x1219454b0 <line:7:2, line:8:11>
    | |-UnaryOperator 0x1219453f0 <line:7:6, col:28> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-CallExpr 0x1219453c0 <col:7, col:28> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x1219452d0 <col:7> 'int ()' Function 0x121945218 'net_eq' 'int ()'
    | |   |-DeclRefExpr 0x1219452f0 <col:14> 'struct net *' lvalue ParmVar 0x121928648 'net' 'struct net *'
    | |   `-UnaryOperator 0x1219453a8 <col:19, col:20> '<dependent type>' contains-errors prefix '&' cannot overflow
    | |     `-RecoveryExpr 0x121945388 <col:20> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x1219454a0 <line:8:3, col:11>
    |   `-UnaryOperator 0x121945488 <col:10, col:11> '<dependent type>' contains-errors prefix '-' cannot overflow
    |     `-ImplicitCastExpr 0x121945470 <col:11> '<dependent type>' contains-errors <LValueToRValue>
    |       `-RecoveryExpr 0x121945450 <col:11> '<dependent type>' contains-errors lvalue
    |-SwitchStmt 0x121945548 <line:10:2, line:54:2>
    | |-ImplicitCastExpr 0x121945530 <line:10:10, col:16> '<dependent type>' contains-errors <LValueToRValue>
    | | `-RecoveryExpr 0x121945508 <col:10, col:16> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x1219454d0 <col:10> 'struct socket *' lvalue ParmVar 0x121944c28 'sock' 'struct socket *'
    | `-CompoundStmt 0x121945ba0 <col:22, line:54:2>
    |   |-IfStmt 0x1219457e0 <line:12:3, line:13:15>
    |   | |-BinaryOperator 0x121945728 <line:12:7, col:36> 'int' contains-errors '||'
    |   | | |-BinaryOperator 0x1219456c8 <col:7, col:19> 'int' '=='
    |   | | | |-ImplicitCastExpr 0x1219456b0 <col:7> 'int' <LValueToRValue>
    |   | | | | `-DeclRefExpr 0x121945588 <col:7> 'int' lvalue ParmVar 0x121944ca8 'protocol' 'int'
    |   | | | `-IntegerLiteral 0x1219455a8 <col:19> 'int' 0
    |   | | `-BinaryOperator 0x121945708 <col:24, col:36> 'int' contains-errors '=='
    |   | |   |-DeclRefExpr 0x121945600 <col:24> 'int' lvalue ParmVar 0x121944ca8 'protocol' 'int'
    |   | |   `-RecoveryExpr 0x1219456e8 <col:36> '<dependent type>' contains-errors lvalue
    |   | `-BinaryOperator 0x1219457c0 <line:13:4, col:15> 'int' contains-errors '='
    |   |   |-DeclRefExpr 0x121945748 <col:4> 'int' lvalue ParmVar 0x121944ca8 'protocol' 'int'
    |   |   `-RecoveryExpr 0x1219457a0 <col:15> '<dependent type>' contains-errors lvalue
    |   |-BreakStmt 0x121945800 <line:14:3>
    |   |-SwitchStmt 0x121945858 <line:17:3, line:47:3>
    |   | |-ImplicitCastExpr 0x121945840 <line:17:11> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x121945820 <col:11> 'int' lvalue ParmVar 0x121944ca8 'protocol' 'int'
    |   | `-CompoundStmt 0x121945a80 <col:21, line:47:3>
    |   |   |-CaseStmt 0x1219458b8 <line:18:3, line:20:15>
    |   |   | |-ConstantExpr 0x1219458a0 <line:18:8> 'int'
    |   |   | | `-IntegerLiteral 0x121945880 <col:8> 'int' 0
    |   |   | `-BinaryOperator 0x121945970 <line:20:4, col:15> 'int' contains-errors '='
    |   |   |   |-DeclRefExpr 0x1219458f8 <col:4> 'int' lvalue ParmVar 0x121944ca8 'protocol' 'int'
    |   |   |   `-RecoveryExpr 0x121945950 <col:15> '<dependent type>' contains-errors lvalue
    |   |   |-BreakStmt 0x121945990 <line:21:4>
    |   |   |-ReturnStmt 0x121945a48 <line:33:4, col:12>
    |   |   | `-UnaryOperator 0x121945a30 <col:11, col:12> '<dependent type>' contains-errors prefix '-' cannot overflow
    |   |   |   `-ImplicitCastExpr 0x121945a18 <col:12> '<dependent type>' contains-errors <LValueToRValue>
    |   |   |     `-RecoveryExpr 0x1219459f8 <col:12> '<dependent type>' contains-errors lvalue
    |   |   `-DefaultStmt 0x121945a60 <line:45:3, line:46:4>
    |   |     `-BreakStmt 0x121945a58 <col:4>
    |   |-BreakStmt 0x121945ab0 <line:48:3>
    |   |-BreakStmt 0x121945ad0 <line:51:3>
    |   `-DefaultStmt 0x121945b80 <line:52:2, line:53:11>
    |     `-ReturnStmt 0x121945b70 <col:3, col:11>
    |       `-UnaryOperator 0x121945b58 <col:10, col:11> '<dependent type>' contains-errors prefix '-' cannot overflow
    |         `-ImplicitCastExpr 0x121945b40 <col:11> '<dependent type>' contains-errors <LValueToRValue>
    |           `-RecoveryExpr 0x121945b20 <col:11> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x1219478c8 <line:56:2, col:59> 'struct sock *' contains-errors '='
    | |-DeclRefExpr 0x121945be0 <col:2> 'struct sock *' lvalue Var 0x1219450f8 'sk' 'struct sock *'
    | `-CallExpr 0x121947880 <col:7, col:59> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x1219476e0 <col:7> 'int ()' Function 0x121947628 'sk_alloc' 'int ()'
    |   |-DeclRefExpr 0x121947700 <col:16> 'struct net *' lvalue ParmVar 0x121928648 'net' 'struct net *'
    |   |-RecoveryExpr 0x121947808 <col:21> '<dependent type>' contains-errors lvalue
    |   |-RecoveryExpr 0x121947828 <col:30> '<dependent type>' contains-errors lvalue
    |   |-UnaryOperator 0x121947868 <col:42, col:43> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | `-RecoveryExpr 0x121947848 <col:43> '<dependent type>' contains-errors lvalue
    |   `-DeclRefExpr 0x121947780 <col:55> 'int' lvalue ParmVar 0x121944d28 'kern' 'int'
    |-IfStmt 0x121947e08 <line:61:2, line:64:2>
    | |-RecoveryExpr 0x121947c58 <line:61:6, col:7> '_Bool' contains-errors
    | `-CompoundStmt 0x121947df0 <col:13, line:64:2>
    |   `-CallExpr 0x121947db0 <line:62:3, col:13> 'int'
    |     |-ImplicitCastExpr 0x121947d98 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x121947d58 <col:3> 'int ()' Function 0x121947ca0 'sk_free' 'int ()'
    |     `-ImplicitCastExpr 0x121947dd8 <col:11> 'struct sock *' <LValueToRValue>
    |       `-DeclRefExpr 0x121947d78 <col:11> 'struct sock *' lvalue Var 0x1219450f8 'sk' 'struct sock *'
    |-CallExpr 0x121947f80 <line:66:2, col:25> 'int'
    | |-ImplicitCastExpr 0x121947f68 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x121947f08 <col:2> 'int ()' Function 0x121947e50 'sock_init_data' 'int ()'
    | |-ImplicitCastExpr 0x121947fb0 <col:17> 'struct socket *' <LValueToRValue>
    | | `-DeclRefExpr 0x121947f28 <col:17> 'struct socket *' lvalue ParmVar 0x121944c28 'sock' 'struct socket *'
    | `-ImplicitCastExpr 0x121947fc8 <col:23> 'struct sock *' <LValueToRValue>
    |   `-DeclRefExpr 0x121947f48 <col:23> 'struct sock *' lvalue Var 0x1219450f8 'sk' 'struct sock *'
    |-BinaryOperator 0x121948120 <line:70:2, col:20> '<dependent type>' contains-errors '='
    | |-RecoveryExpr 0x1219480d8 <col:2, col:6> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x1219480a0 <col:2> 'struct sock *' lvalue Var 0x1219450f8 'sk' 'struct sock *'
    | `-DeclRefExpr 0x121948100 <col:20> 'int' lvalue ParmVar 0x121944ca8 'protocol' 'int'
    `-ReturnStmt 0x121948180 <line:74:2, col:9>
      `-IntegerLiteral 0x121948160 <col:9> 'int' 0
