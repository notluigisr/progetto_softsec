`-FunctionDecl 0x144093a88  line:1:15 invalid jas_matrix_create 'int *(int, int)'
  |-ParmVarDecl 0x1440938f0 <col:33, col:37> col:37 used numrows 'int'
  |-ParmVarDecl 0x144093970 <col:46, col:50> col:50 used numcols 'int'
  `-CompoundStmt 0x1440ade78 <line:2:1, line:47:1>
    |-DeclStmt 0x144093bd8 <line:4:2, col:7>
    | `-VarDecl 0x144093b70 <col:2, col:6> col:6 used i 'int'
    |-IfStmt 0x144093e18 <line:6:2, line:8:2>
    | |-RecoveryExpr 0x144093d98 <line:6:6, col:49> '_Bool' contains-errors
    | `-CompoundStmt 0x144093e00 <col:52, line:8:2>
    |   `-ReturnStmt 0x144093df0 <line:7:3, col:10>
    |     `-ImplicitCastExpr 0x144093dd8 <col:10> 'int *' <NullToPointer>
    |       `-IntegerLiteral 0x144093db8 <col:10> 'int' 0
    |-IfStmt 0x1440ada08 <line:17:2, line:23:2>
    | |-BinaryOperator 0x1440ad6a8 <line:17:6, col:25> 'int' contains-errors '>'
    | | |-CXXDependentScopeMemberExpr 0x1440ad660 <col:6, col:14> '<dependent type>' contains-errors lvalue ->maxrows_
    | | | `-RecoveryExpr 0x1440ad640 <col:6> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x1440ad600 <col:25> 'int' 0
    | `-CompoundStmt 0x1440ad9f0 <col:28, line:23:2>
    |   `-IfStmt 0x1440ad9d0 <line:18:3, line:22:3>
    |     |-RecoveryExpr 0x1440ad7c0 <line:18:7, line:19:28> '_Bool' contains-errors
    |     `-CompoundStmt 0x1440ad9b0 <col:31, line:22:3>
    |       |-CallExpr 0x1440ad940 <line:20:4, col:29> '<dependent type>' contains-errors
    |       | |-DeclRefExpr 0x1440ad8c0 <col:4> 'int ()' Function 0x1440ad808 'jas_matrix_destroy' 'int ()'
    |       | `-RecoveryExpr 0x1440ad920 <col:23> '<dependent type>' contains-errors lvalue
    |       `-ReturnStmt 0x1440ad9a0 <line:21:4, col:11>
    |         `-ImplicitCastExpr 0x1440ad988 <col:11> 'int *' <NullToPointer>
    |           `-IntegerLiteral 0x1440ad968 <col:11> 'int' 0
    |-IfStmt 0x1440adb60 <line:25:2, line:31:2>
    | |-RecoveryExpr 0x1440ada48 <line:25:6, col:26> '_Bool' contains-errors
    | `-CompoundStmt 0x1440adb48 <col:29, line:31:2>
    |   `-IfStmt 0x1440adb28 <line:26:3, line:30:3>
    |     |-RecoveryExpr 0x1440ada88 <line:26:7, line:27:26> '_Bool' contains-errors
    |     `-CompoundStmt 0x1440adb10 <col:29, line:30:3>
    |       `-ReturnStmt 0x1440adb00 <line:29:4, col:11>
    |         `-ImplicitCastExpr 0x1440adae8 <col:11> 'int *' <NullToPointer>
    |           `-IntegerLiteral 0x1440adac8 <col:11> 'int' 0
    `-ForStmt 0x1440adcf8 <line:33:2, line:35:2>
      |-BinaryOperator 0x1440adbc0 <line:33:7, col:11> 'int' '='
      | |-DeclRefExpr 0x1440adb80 <col:7> 'int' lvalue Var 0x144093b70 'i' 'int'
      | `-IntegerLiteral 0x1440adba0 <col:11> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x1440adc50 <col:14, col:18> 'int' '<'
      | |-ImplicitCastExpr 0x1440adc20 <col:14> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x1440adbe0 <col:14> 'int' lvalue Var 0x144093b70 'i' 'int'
      | `-ImplicitCastExpr 0x1440adc38 <col:18> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x1440adc00 <col:18> 'int' lvalue ParmVar 0x1440938f0 'numrows' 'int'
      |-UnaryOperator 0x1440adc90 <col:27, col:29> 'int' prefix '++'
      | `-DeclRefExpr 0x1440adc70 <col:29> 'int' lvalue Var 0x144093b70 'i' 'int'
      `-CompoundStmt 0x1440adce8 <col:32, line:35:2>
