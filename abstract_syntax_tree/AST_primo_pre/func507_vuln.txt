`-FunctionDecl 0x12d128118  line:1:1 SYSCALL_DEFINE2 'int ()'
  `-CompoundStmt 0x12d143400 <line:2:1, line:22:1>
    |-DeclStmt 0x12d128288 <line:3:2, col:14>
    | `-VarDecl 0x12d128220 <col:2, col:11> col:11 used len 'unsigned int'
    |-DeclStmt 0x12d128320 <line:4:2, col:7>
    | `-VarDecl 0x12d1282b8 <col:2, col:6> col:6 used i 'int'
    |-IfStmt 0x12d128640 <line:6:2, line:7:11>
    | |-UnaryOperator 0x12d128580 <line:6:6, col:44> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-CallExpr 0x12d128548 <col:7, col:44> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x12d128430 <col:7> 'int ()' Function 0x12d128378 'access_ok' 'int ()'
    | |   |-RecoveryExpr 0x12d1284e8 <col:17> '<dependent type>' contains-errors lvalue
    | |   |-RecoveryExpr 0x12d128508 <col:31> '<dependent type>' contains-errors lvalue
    | |   `-RecoveryExpr 0x12d128528 <col:37> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x12d128630 <line:7:3, col:11>
    |   `-UnaryOperator 0x12d128618 <col:10, col:11> '<dependent type>' contains-errors prefix '-' cannot overflow
    |     `-ImplicitCastExpr 0x12d128600 <col:11> '<dependent type>' contains-errors <LValueToRValue>
    |       `-RecoveryExpr 0x12d1285e0 <col:11> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x12d1286d8 <line:9:2, col:8> 'unsigned int' contains-errors '='
    | |-DeclRefExpr 0x12d128660 <col:2> 'unsigned int' lvalue Var 0x12d128220 'len' 'unsigned int'
    | `-RecoveryExpr 0x12d1286b8 <col:8> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x12d140a20 <line:10:2, line:11:9>
    | |-BinaryOperator 0x12d128770 <line:10:6, col:16> 'int' contains-errors '>'
    | | |-RecoveryExpr 0x12d128750 <col:6> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x12d128710 <col:16> 'int' 32
    | `-BinaryOperator 0x12d140a00 <line:11:3, col:9> 'unsigned int' '='
    |   |-DeclRefExpr 0x12d128790 <col:3> 'unsigned int' lvalue Var 0x12d128220 'len' 'unsigned int'
    |   `-ImplicitCastExpr 0x12d1287d0 <col:9> 'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x12d1287b0 <col:9> 'int' 32
    |-CallExpr 0x12d140bd0 <line:13:2, col:20> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x12d140b20 <col:2> 'int ()' Function 0x12d140a68 'down_read' 'int ()'
    | `-UnaryOperator 0x12d140bb8 <col:12, col:13> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   `-RecoveryExpr 0x12d140b98 <col:13> '<dependent type>' contains-errors lvalue
    |-ForStmt 0x12d1417b8 <line:14:2, line:18:2>
    | |-BinaryOperator 0x12d140c38 <line:14:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x12d140bf8 <col:7> 'int' lvalue Var 0x12d1282b8 'i' 'int'
    | | `-IntegerLiteral 0x12d140c18 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x12d140ce0 <col:14, col:18> 'int' '<'
    | | |-ImplicitCastExpr 0x12d140cc8 <col:14> 'unsigned int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x12d140c98 <col:14> 'int' <LValueToRValue>
    | | |   `-DeclRefExpr 0x12d140c58 <col:14> 'int' lvalue Var 0x12d1282b8 'i' 'int'
    | | `-ImplicitCastExpr 0x12d140cb0 <col:18> 'unsigned int' <LValueToRValue>
    | |   `-DeclRefExpr 0x12d140c78 <col:18> 'unsigned int' lvalue Var 0x12d128220 'len' 'unsigned int'
    | |-UnaryOperator 0x12d140d20 <col:23, col:25> 'int' prefix '++'
    | | `-DeclRefExpr 0x12d140d00 <col:25> 'int' lvalue Var 0x12d1282b8 'i' 'int'
    | `-CompoundStmt 0x12d141798 <col:28, line:18:2>
    |   |-CallExpr 0x12d141618 <line:15:3, col:48> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x12d140e18 <col:3> 'int ()' Function 0x12d140d60 '__put_user' 'int ()'
    |   | |-ArraySubscriptExpr 0x12d1415b8 <col:14, col:37> '<dependent type>' contains-errors lvalue
    |   | | |-ImplicitCastExpr 0x12d141588 <col:14, col:25> '<dependent type>' contains-errors <LValueToRValue>
    |   | | | `-RecoveryExpr 0x12d141560 <col:14, col:25> '<dependent type>' contains-errors lvalue
    |   | | |   `-CallExpr 0x12d141540 <col:14, col:22> 'int'
    |   | | |     `-ImplicitCastExpr 0x12d141528 <col:14> 'int (*)()' <FunctionToPointerDecay>
    |   | | |       `-DeclRefExpr 0x12d140f18 <col:14> 'int ()' Function 0x12d140e60 'utsname' 'int ()'
    |   | | `-ImplicitCastExpr 0x12d1415a0 <col:36> 'int' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x12d1413f8 <col:36> 'int' lvalue Var 0x12d1282b8 'i' 'int'
    |   | `-BinaryOperator 0x12d1415f8 <col:40, col:47> '<dependent type>' contains-errors '+'
    |   |   |-RecoveryExpr 0x12d1415d8 <col:40> '<dependent type>' contains-errors lvalue
    |   |   `-DeclRefExpr 0x12d141480 <col:47> 'int' lvalue Var 0x12d1282b8 'i' 'int'
    |   `-IfStmt 0x12d141778 <line:16:3, line:17:4>
    |     |-BinaryOperator 0x12d141750 <line:16:7, col:35> 'int' contains-errors '=='
    |     | |-ArraySubscriptExpr 0x12d141718 <col:7, col:30> '<dependent type>' contains-errors lvalue
    |     | | |-ImplicitCastExpr 0x12d1416e8 <col:7, col:18> '<dependent type>' contains-errors <LValueToRValue>
    |     | | | `-RecoveryExpr 0x12d1416a0 <col:7, col:18> '<dependent type>' contains-errors lvalue
    |     | | |   `-CallExpr 0x12d141680 <col:7, col:15> 'int'
    |     | | |     `-ImplicitCastExpr 0x12d141668 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |     | | |       `-DeclRefExpr 0x12d141648 <col:7> 'int ()' Function 0x12d140e60 'utsname' 'int ()'
    |     | | `-ImplicitCastExpr 0x12d141700 <col:29> 'int' <LValueToRValue>
    |     | |   `-DeclRefExpr 0x12d1416c8 <col:29> 'int' lvalue Var 0x12d1282b8 'i' 'int'
    |     | `-CharacterLiteral 0x12d141738 <col:35> 'int' 0
    |     `-BreakStmt 0x12d141770 <line:17:4>
    |-CallExpr 0x12d141980 <line:19:2, col:18> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x12d1418d0 <col:2> 'int ()' Function 0x12d141818 'up_read' 'int ()'
    | `-UnaryOperator 0x12d141968 <col:10, col:11> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   `-RecoveryExpr 0x12d141948 <col:11> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x12d1419c8 <line:21:2, col:9>
      `-IntegerLiteral 0x12d1419a8 <col:9> 'int' 0
