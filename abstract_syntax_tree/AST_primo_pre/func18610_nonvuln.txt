`-FunctionDecl 0x133128258  line:1:8 invalid headerReload 'int (int, int)'
  |-ParmVarDecl 0x1331280f0 <col:21, col:28> col:28 referenced invalid h 'int'
  |-ParmVarDecl 0x133128170 <col:31, col:41> col:41 invalid tag 'int'
  `-CompoundStmt 0x1331426a0 <line:2:1, line:20:1>
    |-DeclStmt 0x1331283c8 <line:4:5, col:24>
    | `-VarDecl 0x133128328 <col:5, col:23> col:18 used uc 'unsigned int' cinit
    |   `-ImplicitCastExpr 0x1331283b0 <col:23> 'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x133128390 <col:23> 'int' 0
    |-DeclStmt 0x133128698 <line:5:5, col:37>
    | `-VarDecl 0x1331283f8 <col:5, col:36> col:12 used uh 'void *' cinit
    |   `-CallExpr 0x133128668 <col:17, col:36> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x1331285c0 <col:17> 'int ()' Function 0x133128508 'headerExport' 'int ()'
    |     |-RecoveryExpr 0x1331285e0 <col:30> '<dependent type>' contains-errors lvalue
    |     `-UnaryOperator 0x133128650 <col:33, col:34> 'unsigned int *' prefix '&' cannot overflow
    |       `-DeclRefExpr 0x133128600 <col:34> 'unsigned int' lvalue Var 0x133128328 'uc' 'unsigned int'
    |-BinaryOperator 0x133141848 <line:7:5, col:21> '<dependent type>' contains-errors '='
    | |-RecoveryExpr 0x1331286d0 <col:5> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x1331286b0 <col:5> 'int' lvalue ParmVar 0x1331280f0 'h' 'int'
    | `-CallExpr 0x133141820 <col:9, col:21> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x1331287d8 <col:9> 'int ()' Function 0x133128720 'headerFree' 'int ()'
    |   `-RecoveryExpr 0x133141800 <col:20> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x133141948 <line:8:5, line:9:9>
    | |-BinaryOperator 0x1331418e0 <line:8:9, col:15> 'int' contains-errors '=='
    | | |-DeclRefExpr 0x133141868 <col:9> 'void *' contains-errors lvalue Var 0x1331283f8 'uh' 'void *'
    | | `-RecoveryExpr 0x1331418c0 <col:15> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x133141938 <line:9:2, col:9>
    |   `-RecoveryExpr 0x133141918 <col:9> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x133142288 <line:11:5, line:14:5>
    | |-BinaryOperator 0x133141c10 <line:11:9, col:15> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x133141bd0 <col:9> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x133141bf0 <col:15> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x133142268 <col:21, line:14:5>
    |   |-BinaryOperator 0x133142200 <line:12:2, col:15> 'void *' contains-errors '='
    |   | |-DeclRefExpr 0x133141c30 <col:2> 'void *' contains-errors lvalue Var 0x1331283f8 'uh' 'void *'
    |   | `-ImplicitCastExpr 0x133141dc8 <col:7, col:15> 'void *' contains-errors <IntegralToPointer>
    |   |   `-CallExpr 0x133141d88 <col:7, col:15> 'int' contains-errors
    |   |     |-ImplicitCastExpr 0x133141d70 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |   |     | `-DeclRefExpr 0x133141d30 <col:7> 'int ()' Function 0x133141c78 '_free' 'int ()'
    |   |     `-ImplicitCastExpr 0x133141db0 <col:13> 'void *' contains-errors <LValueToRValue>
    |   |       `-DeclRefExpr 0x133141d50 <col:13> 'void *' contains-errors lvalue Var 0x1331283f8 'uh' 'void *'
    |   `-ReturnStmt 0x133142258 <line:13:2, col:9>
    |     `-RecoveryExpr 0x133142238 <col:9> '<dependent type>' contains-errors lvalue
    `-IfStmt 0x133142680 <line:15:5, line:18:5>
      |-CallExpr 0x133142498 <line:15:9, col:34> '<dependent type>' contains-errors
      | |-DeclRefExpr 0x133142388 <col:9> 'int ()' Function 0x1331422d0 'ENTRY_IS_REGION' 'int ()'
      | `-CXXDependentScopeMemberExpr 0x133142450 <col:25, col:29> '<dependent type>' contains-errors lvalue ->index
      |   `-RecoveryExpr 0x133142430 <col:25> '<dependent type>' contains-errors lvalue
      `-CompoundStmt 0x133142670 <col:37, line:18:5>
