`-FunctionDecl 0x12483ea88  line:1:15 invalid jas_matrix_create 'int *(int, int)'
  |-ParmVarDecl 0x12483e8f0 <col:33, col:37> col:37 used numrows 'int'
  |-ParmVarDecl 0x12483e970 <col:46, col:50> col:50 used numcols 'int'
  `-CompoundStmt 0x125809658 <line:2:1, line:51:1>
    |-DeclStmt 0x12483ebd8 <line:4:2, col:7>
    | `-VarDecl 0x12483eb70 <col:2, col:6> col:6 used i 'int'
    |-IfStmt 0x12483ed60 <line:6:2, line:8:2>
    | |-BinaryOperator 0x12483ece0 <line:6:6, col:31> 'int' '||'
    | | |-BinaryOperator 0x12483ec48 <col:6, col:16> 'int' '<'
    | | | |-ImplicitCastExpr 0x12483ec30 <col:6> 'int' <LValueToRValue>
    | | | | `-DeclRefExpr 0x12483ebf0 <col:6> 'int' lvalue ParmVar 0x12483e8f0 'numrows' 'int'
    | | | `-IntegerLiteral 0x12483ec10 <col:16> 'int' 0
    | | `-BinaryOperator 0x12483ecc0 <col:21, col:31> 'int' '<'
    | |   |-ImplicitCastExpr 0x12483eca8 <col:21> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x12483ec68 <col:21> 'int' lvalue ParmVar 0x12483e970 'numcols' 'int'
    | |   `-IntegerLiteral 0x12483ec88 <col:31> 'int' 0
    | `-CompoundStmt 0x12483ed48 <col:34, line:8:2>
    |   `-ReturnStmt 0x12483ed38 <line:7:3, col:10>
    |     `-ImplicitCastExpr 0x12483ed20 <col:10> 'int *' <NullToPointer>
    |       `-IntegerLiteral 0x12483ed00 <col:10> 'int' 0
    |-IfStmt 0x12483efa8 <line:10:2, line:12:2>
    | |-RecoveryExpr 0x12483ef28 <line:10:6, col:49> '_Bool' contains-errors
    | `-CompoundStmt 0x12483ef90 <col:52, line:12:2>
    |   `-ReturnStmt 0x12483ef80 <line:11:3, col:10>
    |     `-ImplicitCastExpr 0x12483ef68 <col:10> 'int *' <NullToPointer>
    |       `-IntegerLiteral 0x12483ef48 <col:10> 'int' 0
    |-IfStmt 0x1258091e8 <line:21:2, line:27:2>
    | |-BinaryOperator 0x125808e38 <line:21:6, col:25> 'int' contains-errors '>'
    | | |-CXXDependentScopeMemberExpr 0x125808df0 <col:6, col:14> '<dependent type>' contains-errors lvalue ->maxrows_
    | | | `-RecoveryExpr 0x125808dd0 <col:6> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x125808d90 <col:25> 'int' 0
    | `-CompoundStmt 0x1258091d0 <col:28, line:27:2>
    |   `-IfStmt 0x1258091b0 <line:22:3, line:26:3>
    |     |-RecoveryExpr 0x125809030 <line:22:7, line:23:28> '_Bool' contains-errors
    |     `-CompoundStmt 0x125809198 <col:31, line:26:3>
    |       `-ReturnStmt 0x125809188 <line:25:4, col:11>
    |         `-ImplicitCastExpr 0x125809170 <col:11> 'int *' <NullToPointer>
    |           `-IntegerLiteral 0x125809150 <col:11> 'int' 0
    |-IfStmt 0x125809340 <line:29:2, line:35:2>
    | |-RecoveryExpr 0x125809228 <line:29:6, col:26> '_Bool' contains-errors
    | `-CompoundStmt 0x125809328 <col:29, line:35:2>
    |   `-IfStmt 0x125809308 <line:30:3, line:34:3>
    |     |-RecoveryExpr 0x125809268 <line:30:7, line:31:26> '_Bool' contains-errors
    |     `-CompoundStmt 0x1258092f0 <col:29, line:34:3>
    |       `-ReturnStmt 0x1258092e0 <line:33:4, col:11>
    |         `-ImplicitCastExpr 0x1258092c8 <col:11> 'int *' <NullToPointer>
    |           `-IntegerLiteral 0x1258092a8 <col:11> 'int' 0
    `-ForStmt 0x1258094d8 <line:37:2, line:39:2>
      |-BinaryOperator 0x1258093a0 <line:37:7, col:11> 'int' '='
      | |-DeclRefExpr 0x125809360 <col:7> 'int' lvalue Var 0x12483eb70 'i' 'int'
      | `-IntegerLiteral 0x125809380 <col:11> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x125809430 <col:14, col:18> 'int' '<'
      | |-ImplicitCastExpr 0x125809400 <col:14> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x1258093c0 <col:14> 'int' lvalue Var 0x12483eb70 'i' 'int'
      | `-ImplicitCastExpr 0x125809418 <col:18> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x1258093e0 <col:18> 'int' lvalue ParmVar 0x12483e8f0 'numrows' 'int'
      |-UnaryOperator 0x125809470 <col:27, col:29> 'int' prefix '++'
      | `-DeclRefExpr 0x125809450 <col:29> 'int' lvalue Var 0x12483eb70 'i' 'int'
      `-CompoundStmt 0x1258094c8 <col:32, line:39:2>
