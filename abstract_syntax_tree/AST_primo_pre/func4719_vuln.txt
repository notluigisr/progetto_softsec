`-FunctionDecl 0x13380df18  line:1:1 invalid handle_mlppp 'int (int *, const char *, int)'
  |-ParmVarDecl 0x13380dd28 <col:14, col:34> col:34 invalid ndo 'int *'
  |-ParmVarDecl 0x13380dda8 <line:2:14, col:28> col:28 used p 'const char *'
  |-ParmVarDecl 0x13380de28 <col:31, col:35> col:35 used length 'int'
  `-CompoundStmt 0x133123150 <line:3:1, line:11:1>
    `-IfStmt 0x13380e2d8 <line:4:5, line:5:30>
      |-UnaryOperator 0x13380e058 <line:4:9, col:15> '<dependent type>' contains-errors prefix '!' cannot overflow
      | `-ImplicitCastExpr 0x13380e040 <col:10, col:15> '<dependent type>' contains-errors <LValueToRValue>
      |   `-CXXDependentScopeMemberExpr 0x13380dff8 <col:10, col:15> '<dependent type>' contains-errors lvalue ->ndo_eflag
      |     `-RecoveryExpr 0x13380dfd8 <col:10> '<dependent type>' contains-errors lvalue
      `-CallExpr 0x13380e2b0 <line:5:9, col:30> '<dependent type>' contains-errors
        |-DeclRefExpr 0x13380e1d0 <col:9> 'int ()' Function 0x13380e118 'ND_PRINT' 'int ()'
        `-ParenExpr 0x13380e290 <col:18, col:29> 'char[4]' contains-errors
          `-BinaryOperator 0x13380e270 <col:19, col:24> 'char[4]' contains-errors ','
            |-RecoveryExpr 0x13380e1f0 <col:19> '<dependent type>' contains-errors lvalue
            `-StringLiteral 0x13380e250 <col:24> 'char[4]' lvalue "STR"
