`-FunctionDecl 0x1518275f8  line:1:1 invalid authzPretty 'int (int *, struct berval *, struct berval *, void *)'
  |-ParmVarDecl 0x15180dd28 <line:2:2, col:10> col:10 invalid syntax 'int *'
  |-ParmVarDecl 0x15180e318 <line:3:2, col:17> col:17 used val 'struct berval *'
  |-ParmVarDecl 0x151827428 <line:4:2, col:17> col:17 used out 'struct berval *'
  |-ParmVarDecl 0x1518274a8 <line:5:2, col:8> col:8 used ctx 'void *'
  `-CompoundStmt 0x151827f20 <line:6:1, line:18:1>
    |-DeclStmt 0x151827740 <line:7:2, col:9>
    | `-VarDecl 0x1518276d8 <col:2, col:7> col:7 used rc 'int'
    |-CallExpr 0x151827a58 <line:9:2, line:10:21> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x1518278b0 <line:9:2> 'int ()' Function 0x1518277f8 'Debug' 'int ()'
    | |-RecoveryExpr 0x151827a38 <col:9> '<dependent type>' contains-errors lvalue
    | |-StringLiteral 0x151827930 <col:27> 'char[4]' lvalue "STR"
    | |-RecoveryExpr 0x151827988 <line:10:3, col:8> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x151827950 <col:3> 'struct berval *' lvalue ParmVar 0x15180e318 'val' 'struct berval *'
    | |-IntegerLiteral 0x1518279b0 <col:16> 'int' 0
    | `-IntegerLiteral 0x1518279d0 <col:19> 'int' 0
    |-BinaryOperator 0x151827d10 <line:12:2, col:43> 'int' '='
    | |-DeclRefExpr 0x151827aa0 <col:2> 'int' lvalue Var 0x1518276d8 'rc' 'int'
    | `-CallExpr 0x151827c88 <col:7, col:43> 'int'
    |   |-ImplicitCastExpr 0x151827c70 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x151827ba0 <col:7> 'int ()' Function 0x151827ae8 'authzPrettyNormal' 'int ()'
    |   |-ImplicitCastExpr 0x151827cc8 <col:26> 'struct berval *' <LValueToRValue>
    |   | `-DeclRefExpr 0x151827bc0 <col:26> 'struct berval *' lvalue ParmVar 0x15180e318 'val' 'struct berval *'
    |   |-ImplicitCastExpr 0x151827ce0 <col:31> 'struct berval *' <LValueToRValue>
    |   | `-DeclRefExpr 0x151827be0 <col:31> 'struct berval *' lvalue ParmVar 0x151827428 'out' 'struct berval *'
    |   |-ImplicitCastExpr 0x151827cf8 <col:36> 'void *' <LValueToRValue>
    |   | `-DeclRefExpr 0x151827c00 <col:36> 'void *' lvalue ParmVar 0x1518274a8 'ctx' 'void *'
    |   `-IntegerLiteral 0x151827c20 <col:41> 'int' 0
    |-CallExpr 0x151827e90 <line:14:2, line:15:22> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x151827d30 <line:14:2> 'int ()' Function 0x1518277f8 'Debug' 'int ()'
    | |-RecoveryExpr 0x151827e70 <col:9> '<dependent type>' contains-errors lvalue
    | |-StringLiteral 0x151827d68 <col:27> 'char[4]' lvalue "STR"
    | |-RecoveryExpr 0x151827dc0 <line:15:3, col:8> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x151827d88 <col:3> 'struct berval *' lvalue ParmVar 0x151827428 'out' 'struct berval *'
    | |-DeclRefExpr 0x151827de8 <col:16> 'int' lvalue Var 0x1518276d8 'rc' 'int'
    | `-IntegerLiteral 0x151827e08 <col:20> 'int' 0
    `-ReturnStmt 0x151827f10 <line:17:2, col:9>
      `-ImplicitCastExpr 0x151827ef8 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x151827ed8 <col:9> 'int' lvalue Var 0x1518276d8 'rc' 'int'
