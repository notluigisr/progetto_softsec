`-FunctionDecl 0x12d87d318  line:1:1 invalid ossl_cipher_update 'int (int, int *, int)'
  |-ParmVarDecl 0x12d87d0d8 <col:20, col:24> col:24 used argc 'int'
  |-ParmVarDecl 0x12d87d1a8 <col:30, col:37> col:37 invalid argv 'int *'
  |-ParmVarDecl 0x12d87d228 <col:43, col:49> col:49 invalid self 'int'
  `-CompoundStmt 0x12d897cf8 <line:2:1, line:34:1>
    |-DeclStmt 0x12d87d4a0 <line:4:5, col:22>
    | `-VarDecl 0x12d87d438 <col:5, col:20> col:20 used in 'unsigned char *'
    |-DeclStmt 0x12d87d5d0 <line:5:5, col:25>
    | |-VarDecl 0x12d87d4d0 <col:5, col:10> col:10 used in_len 'long'
    | `-VarDecl 0x12d87d550 <col:5, col:18> col:18 used out_len 'long'
    |-CallExpr 0x12d896918 <line:8:5, col:48> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x12d87d740 <col:5> 'int ()' Function 0x12d87d688 'rb_scan_args' 'int ()'
    | |-DeclRefExpr 0x12d87d760 <col:18> 'int' lvalue ParmVar 0x12d87d0d8 'argc' 'int'
    | |-RecoveryExpr 0x12d87d780 <col:24> '<dependent type>' contains-errors lvalue
    | |-StringLiteral 0x12d87d7e0 <col:30> 'char[4]' lvalue "STR"
    | |-UnaryOperator 0x12d8968c8 <col:37, col:38> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | `-RecoveryExpr 0x12d8968a8 <col:38> '<dependent type>' contains-errors lvalue
    | `-UnaryOperator 0x12d896900 <col:44, col:45> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   `-RecoveryExpr 0x12d8968e0 <col:45> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x12d896ac0 <line:10:5, col:21> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x12d896a40 <col:5> 'int ()' Function 0x12d896988 'StringValue' 'int ()'
    | `-RecoveryExpr 0x12d896aa0 <col:17> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x12d896fd8 <line:12:5, line:13:39>
    | |-RecoveryExpr 0x12d896e00 <line:12:9, col:41> '_Bool' contains-errors
    | `-CallExpr 0x12d896fa8 <line:13:9, col:39> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x12d896f00 <col:9> 'int ()' Function 0x12d896e48 'ossl_raise' 'int ()'
    |   |-RecoveryExpr 0x12d896f88 <col:20> '<dependent type>' contains-errors lvalue
    |   `-StringLiteral 0x12d896f38 <col:34> 'char[4]' lvalue "STR"
    |-CallExpr 0x12d897180 <line:14:5, col:24> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x12d8970d8 <col:5> 'int ()' Function 0x12d897020 'GetCipher' 'int ()'
    | |-RecoveryExpr 0x12d8970f8 <col:15> '<dependent type>' contains-errors lvalue
    | `-RecoveryExpr 0x12d897160 <col:21> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x12d8973f0 <line:16:5, line:19:5>
    | |-BinaryOperator 0x12d897360 <line:16:9, col:20> 'int' '<='
    | | |-ImplicitCastExpr 0x12d897330 <col:9> 'long' <LValueToRValue>
    | | | `-DeclRefExpr 0x12d8972f0 <col:9> 'long' lvalue Var 0x12d87d550 'out_len' 'long'
    | | `-ImplicitCastExpr 0x12d897348 <col:20> 'long' <IntegralCast>
    | |   `-IntegerLiteral 0x12d897310 <col:20> 'int' 0
    | `-CompoundStmt 0x12d8973e0 <col:23, line:19:5>
    `-IfStmt 0x12d897860 <line:21:5, line:26:5> has_else
      |-RecoveryExpr 0x12d897510 <line:21:9, col:18> '_Bool' contains-errors
      |-CompoundStmt 0x12d897700 <col:21, line:23:5>
      `-CompoundStmt 0x12d897850 <col:12, line:26:5>
