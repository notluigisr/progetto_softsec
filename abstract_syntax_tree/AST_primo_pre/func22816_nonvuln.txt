`-FunctionDecl 0x107826600  line:1:12 skcipher_wait_for_data 'int (struct sock *, unsigned int)' static
  |-ParmVarDecl 0x10780e248 <col:35, col:48> col:48 used sk 'struct sock *'
  |-ParmVarDecl 0x10780e2c8 <col:52, col:61> col:61 used flags 'unsigned int'
  `-CompoundStmt 0x128030ae0 <line:2:1, line:30:1>
    |-DeclStmt 0x107826af8 <line:3:2, col:35>
    | |-RecordDecl 0x107826700 <col:2, col:9> col:9 struct alg_sock
    | `-VarDecl 0x107826868 <col:2, col:34> col:19 used ask 'struct alg_sock *' cinit
    |   `-ImplicitCastExpr 0x107826ac8 <col:25, col:34> 'struct alg_sock *' <IntegralToPointer>
    |     `-CallExpr 0x107826a88 <col:25, col:34> 'int'
    |       |-ImplicitCastExpr 0x107826a70 <col:25> 'int (*)()' <FunctionToPointerDecay>
    |       | `-DeclRefExpr 0x107826a00 <col:25> 'int ()' Function 0x107826948 'alg_sk' 'int ()'
    |       `-ImplicitCastExpr 0x107826ab0 <col:32> 'struct sock *' <LValueToRValue>
    |         `-DeclRefExpr 0x107826a20 <col:32> 'struct sock *' lvalue ParmVar 0x10780e248 'sk' 'struct sock *'
    |-DeclStmt 0x107826d58 <line:4:2, col:41>
    | |-RecordDecl 0x107826b10 <col:2, col:9> col:9 struct skcipher_ctx
    | `-VarDecl 0x107826c78 <col:2, col:34> col:23 used ctx 'struct skcipher_ctx *' cinit
    |   `-RecoveryExpr 0x107826d18 <col:29, col:34> '<dependent type>' contains-errors lvalue
    |     `-DeclRefExpr 0x107826ce0 <col:29> 'struct alg_sock *' lvalue Var 0x107826868 'ask' 'struct alg_sock *'
    |-DeclStmt 0x107826df0 <line:5:2, col:14>
    | `-VarDecl 0x107826d88 <col:2, col:7> col:7 used timeout 'long'
    |-CallExpr 0x107826f68 <line:6:2, col:18> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x107826ee8 <col:2> 'int ()' Function 0x107826e30 'DEFINE_WAIT' 'int ()'
    | `-RecoveryExpr 0x107826f48 <col:14> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x1078270a8 <line:7:2, col:24>
    | `-VarDecl 0x107826fa8 <col:2, col:13> col:6 used err 'int' cinit
    |   `-UnaryOperator 0x107827090 <col:12, col:13> '<dependent type>' contains-errors prefix '-' cannot overflow
    |     `-ImplicitCastExpr 0x107827078 <col:13> '<dependent type>' contains-errors <LValueToRValue>
    |       `-RecoveryExpr 0x107827058 <col:13> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x107827218 <line:9:2, line:11:2>
    | |-BinaryOperator 0x107827138 <line:9:6, col:14> '<dependent type>' contains-errors '&'
    | | |-DeclRefExpr 0x1078270c0 <col:6> 'unsigned int' lvalue ParmVar 0x10780e2c8 'flags' 'unsigned int'
    | | `-RecoveryExpr 0x107827118 <col:14> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x107827200 <col:28, line:11:2>
    |   `-ReturnStmt 0x1078271f0 <line:10:3, col:11>
    |     `-UnaryOperator 0x1078271d8 <col:10, col:11> '<dependent type>' contains-errors prefix '-' cannot overflow
    |       `-ImplicitCastExpr 0x1078271c0 <col:11> '<dependent type>' contains-errors <LValueToRValue>
    |         `-RecoveryExpr 0x1078271a0 <col:11> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x1078273c0 <line:13:2, col:38> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x107827318 <col:2> 'int ()' Function 0x107827260 'sk_set_bit' 'int ()'
    | |-RecoveryExpr 0x1078273a0 <col:13> '<dependent type>' contains-errors lvalue
    | `-DeclRefExpr 0x107827350 <col:36> 'struct sock *' lvalue ParmVar 0x10780e248 'sk' 'struct sock *'
    |-ForStmt 0x1280307a8 <line:15:2, line:24:2>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | `-CompoundStmt 0x128030778 <line:15:11, line:24:2>
    |   |-IfStmt 0x107827580 <line:16:3, line:17:4>
    |   | |-CallExpr 0x107827550 <line:16:7, col:29> '<dependent type>' contains-errors
    |   | | |-DeclRefExpr 0x1078274d0 <col:7> 'int ()' Function 0x107827418 'signal_pending' 'int ()'
    |   | | `-RecoveryExpr 0x107827530 <col:22> '<dependent type>' contains-errors lvalue
    |   | `-BreakStmt 0x107827578 <line:17:4>
    |   |-CallExpr 0x1280303d8 <line:18:3, col:58> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x1280300b8 <col:3> 'int ()' Function 0x128030000 'prepare_to_wait' 'int ()'
    |   | |-CallExpr 0x128030340 <col:19, col:30> 'int'
    |   | | |-ImplicitCastExpr 0x128030328 <col:19> 'int (*)()' <FunctionToPointerDecay>
    |   | | | `-DeclRefExpr 0x1280301b8 <col:19> 'int ()' Function 0x128030100 'sk_sleep' 'int ()'
    |   | | `-ImplicitCastExpr 0x128030368 <col:28> 'struct sock *' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x1280301d8 <col:28> 'struct sock *' lvalue ParmVar 0x10780e248 'sk' 'struct sock *'
    |   | |-UnaryOperator 0x1280303a0 <col:33, col:34> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | | `-RecoveryExpr 0x128030380 <col:34> '<dependent type>' contains-errors lvalue
    |   | `-RecoveryExpr 0x1280303b8 <col:40> '<dependent type>' contains-errors lvalue
    |   |-BinaryOperator 0x128030488 <line:19:3, col:13> 'long' contains-errors '='
    |   | |-DeclRefExpr 0x128030410 <col:3> 'long' lvalue Var 0x107826d88 'timeout' 'long'
    |   | `-RecoveryExpr 0x128030468 <col:13> '<dependent type>' contains-errors lvalue
    |   `-IfStmt 0x128030758 <line:20:3, line:23:3>
    |     |-CallExpr 0x128030698 <line:20:7, col:44> '<dependent type>' contains-errors
    |     | |-DeclRefExpr 0x128030588 <col:7> 'int ()' Function 0x1280304d0 'sk_wait_event' 'int ()'
    |     | |-DeclRefExpr 0x1280305a8 <col:21> 'struct sock *' lvalue ParmVar 0x10780e248 'sk' 'struct sock *'
    |     | |-UnaryOperator 0x128030620 <col:25, col:26> 'long *' prefix '&' cannot overflow
    |     | | `-DeclRefExpr 0x1280305c8 <col:26> 'long' lvalue Var 0x107826d88 'timeout' 'long'
    |     | `-RecoveryExpr 0x128030670 <col:35, col:40> '<dependent type>' contains-errors lvalue
    |     |   `-DeclRefExpr 0x128030638 <col:35> 'struct skcipher_ctx *' contains-errors lvalue Var 0x107826c78 'ctx' 'struct skcipher_ctx *'
    |     `-CompoundStmt 0x128030738 <col:47, line:23:3>
    |       |-BinaryOperator 0x128030710 <line:21:4, col:10> 'int' contains-errors '='
    |       | |-DeclRefExpr 0x1280306d0 <col:4> 'int' contains-errors lvalue Var 0x107826fa8 'err' 'int'
    |       | `-IntegerLiteral 0x1280306f0 <col:10> 'int' 0
    |       `-BreakStmt 0x128030730 <line:22:4>
    `-ReturnStmt 0x128030ad0 <line:29:2, col:9>
      `-ImplicitCastExpr 0x128030ab8 <col:9> 'int' contains-errors <LValueToRValue>
        `-DeclRefExpr 0x128030a98 <col:9> 'int' contains-errors lvalue Var 0x107826fa8 'err' 'int'
