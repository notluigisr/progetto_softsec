`-FunctionDecl 0x13a128368  line:1:1 invalid proto_register_fields_section 'int (const int, int *, const int)'
  |-ParmVarDecl 0x13a1280d8 <col:31, col:41> col:41 used parent 'const int'
  |-ParmVarDecl 0x13a1281a8 <col:49, col:68> col:68 invalid hfi 'int *'
  |-ParmVarDecl 0x13a128228 <col:73, col:83> col:83 used num_records 'const int'
  `-CompoundStmt 0x13a80a848 <line:2:1, line:23:1>
    |-DeclStmt 0x13a1284a8 <line:3:2, col:10>
    | `-VarDecl 0x13a128440 <col:2, col:9> col:9 used i 'int'
    |-IfStmt 0x13a809eb8 <line:8:2, line:10:2>
    | |-RecoveryExpr 0x13a128710 <line:8:6, col:23> '_Bool' contains-errors
    | `-CompoundStmt 0x13a809ea8 <col:29, line:10:2>
    `-ForStmt 0x13a80a810 <line:12:2, line:22:2>
      |-BinaryOperator 0x13a809f18 <line:12:7, col:11> 'int' '='
      | |-DeclRefExpr 0x13a809ed8 <col:7> 'int' lvalue Var 0x13a128440 'i' 'int'
      | `-IntegerLiteral 0x13a809ef8 <col:11> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x13a809fa8 <col:14, col:18> 'int' '<'
      | |-ImplicitCastExpr 0x13a809f78 <col:14> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x13a809f38 <col:14> 'int' lvalue Var 0x13a128440 'i' 'int'
      | `-ImplicitCastExpr 0x13a809f90 <col:18> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x13a809f58 <col:18> 'const int' lvalue ParmVar 0x13a128228 'num_records' 'const int'
      |-UnaryOperator 0x13a809fe8 <col:31, col:32> 'int' postfix '++'
      | `-DeclRefExpr 0x13a809fc8 <col:31> 'int' lvalue Var 0x13a128440 'i' 'int'
      `-CompoundStmt 0x13a80a7f8 <col:36, line:22:2>
        `-IfStmt 0x13a80a590 <line:14:3, line:19:3>
          |-BinaryOperator 0x13a80a1c8 <line:14:7, col:21> 'int' contains-errors '!='
          | |-CXXDependentScopeMemberExpr 0x13a80a180 <col:7, col:14> '<dependent type>' contains-errors lvalue .id
          | | `-ArraySubscriptExpr 0x13a80a160 <col:7, col:12> '<dependent type>' contains-errors lvalue
          | |   |-ImplicitCastExpr 0x13a80a130 <col:7> '<dependent type>' contains-errors <LValueToRValue>
          | |   | `-RecoveryExpr 0x13a80a000 <col:7> '<dependent type>' contains-errors lvalue
          | |   `-ImplicitCastExpr 0x13a80a148 <col:11> 'int' <LValueToRValue>
          | |     `-DeclRefExpr 0x13a80a020 <col:11> 'int' lvalue Var 0x13a128440 'i' 'int'
          | `-UnaryOperator 0x13a80a0f8 <col:20, col:21> 'int' prefix '-'
          |   `-IntegerLiteral 0x13a80a0d8 <col:21> 'int' 1
          `-CompoundStmt 0x13a80a570 <col:24, line:19:3>
            |-CallExpr 0x13a80a528 <line:15:4, line:17:18> '<dependent type>' contains-errors
            | |-DeclRefExpr 0x13a80a2c8 <line:15:4> 'int ()' Function 0x13a80a210 'fprintf' 'int ()'
            | |-RecoveryExpr 0x13a80a470 <col:12> '<dependent type>' contains-errors lvalue
            | |-StringLiteral 0x13a80a340 <line:16:5> 'char[4]' lvalue "STR"
            | `-CXXDependentScopeMemberExpr 0x13a80a4e0 <line:17:5, col:12> '<dependent type>' contains-errors lvalue .abbrev
            |   `-ArraySubscriptExpr 0x13a80a4c0 <col:5, col:10> '<dependent type>' contains-errors lvalue
            |     |-ImplicitCastExpr 0x13a80a490 <col:5> '<dependent type>' contains-errors <LValueToRValue>
            |     | `-RecoveryExpr 0x13a80a360 <col:5> '<dependent type>' contains-errors lvalue
            |     `-ImplicitCastExpr 0x13a80a4a8 <col:9> 'int' <LValueToRValue>
            |       `-DeclRefExpr 0x13a80a380 <col:9> 'int' lvalue Var 0x13a128440 'i' 'int'
            `-ReturnStmt 0x13a80a560 <line:18:4>
