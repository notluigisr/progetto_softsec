`-FunctionDecl 0x1329267f8  line:1:1 invalid divide_look_behind_alternatives 'int (int *)'
  |-ParmVarDecl 0x132926728 <col:33, col:39> col:39 referenced invalid node 'int *'
  `-CompoundStmt 0x132940d98 <line:2:1, line:33:1>
    |-DeclStmt 0x132926928 <line:3:3, col:8>
    | `-VarDecl 0x1329268c0 <col:3, col:7> col:7 used r 'int'
    |-DeclStmt 0x1329269c0 <line:4:3, col:15>
    | `-VarDecl 0x132926958 <col:3, col:7> col:7 used anc_type 'int'
    |-BinaryOperator 0x132926c28 <line:5:3, col:21> '<dependent type>' contains-errors ','
    | |-BinaryOperator 0x132926bb8 <col:3, col:16> '<dependent type>' contains-errors ','
    | | |-BinaryOperator 0x132926b48 <col:3, col:9> '<dependent type>' contains-errors '*'
    | | | |-RecoveryExpr 0x1329269f8 <col:3> '<dependent type>' contains-errors lvalue
    | | | | `-DeclRefExpr 0x1329269d8 <col:3> 'int *' lvalue ParmVar 0x132926728 'node' 'int *'
    | | | `-RecoveryExpr 0x132926b28 <col:9> '<dependent type>' contains-errors lvalue
    | | `-UnaryOperator 0x132926ba0 <col:15, col:16> '<dependent type>' contains-errors prefix '*' cannot overflow
    | |   `-ImplicitCastExpr 0x132926b88 <col:16> '<dependent type>' contains-errors <LValueToRValue>
    | |     `-RecoveryExpr 0x132926b68 <col:16> '<dependent type>' contains-errors lvalue
    | `-UnaryOperator 0x132926c10 <col:20, col:21> '<dependent type>' contains-errors prefix '*' cannot overflow
    |   `-ImplicitCastExpr 0x132926bf8 <col:21> '<dependent type>' contains-errors <LValueToRValue>
    |     `-RecoveryExpr 0x132926bd8 <col:21> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x13293ff30 <line:9:3, col:18> 'int' contains-errors '='
    | |-DeclRefExpr 0x13293fe28 <col:3> 'int' lvalue Var 0x132926958 'anc_type' 'int'
    | `-CXXDependentScopeMemberExpr 0x13293fee8 <col:14, col:18> '<dependent type>' contains-errors lvalue ->type
    |   `-RecoveryExpr 0x13293fec8 <col:14> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x132940358 <line:13:3, col:23> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x1329402b0 <col:3> 'int ()' Function 0x1329401f8 'node_swap' 'int ()'
    | |-RecoveryExpr 0x1329402d0 <col:13> '<dependent type>' contains-errors lvalue
    | `-RecoveryExpr 0x132940338 <col:19> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x132940448 <line:14:3, col:20> '<dependent type>' contains-errors '='
    | |-CallExpr 0x1329403c8 <col:3, col:16> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x132940388 <col:3> 'int ()' Function 0x1329400b8 'NODE_CAR' 'int ()'
    | | `-RecoveryExpr 0x1329403a8 <col:12> '<dependent type>' contains-errors lvalue
    | `-RecoveryExpr 0x132940428 <col:20> '<dependent type>' contains-errors lvalue
    |-WhileStmt 0x132940b20 <line:18:3, line:24:3>
    | |-RecoveryExpr 0x132940788 <line:18:10, col:39> '_Bool' contains-errors
    | `-CompoundStmt 0x132940b08 <col:42, line:24:3>
    |   `-IfStmt 0x132940988 <line:20:5, col:24>
    |     |-BinaryOperator 0x132940920 <col:9, col:14> 'int' '!='
    |     | |-ImplicitCastExpr 0x132940908 <col:9> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x1329408c8 <col:9> 'int' lvalue Var 0x1329268c0 'r' 'int'
    |     | `-IntegerLiteral 0x1329408e8 <col:14> 'int' 0
    |     `-ReturnStmt 0x132940978 <col:17, col:24>
    |       `-ImplicitCastExpr 0x132940960 <col:24> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x132940940 <col:24> 'int' lvalue Var 0x1329268c0 'r' 'int'
    |-IfStmt 0x132940d48 <line:26:3, line:31:3>
    | |-RecoveryExpr 0x132940b60 <line:26:7, col:19> '_Bool' contains-errors
    | `-CompoundStmt 0x132940d30 <col:41, line:31:3>
    |   `-DoStmt 0x132940d10 <line:28:5, line:30:44>
    |     |-CompoundStmt 0x132940ca0 <line:28:8, line:30:5>
    |     `-RecoveryExpr 0x132940cf0 <col:14, col:43> '_Bool' contains-errors
    `-ReturnStmt 0x132940d88 <line:32:3, col:10>
      `-IntegerLiteral 0x132940d68 <col:10> 'int' 0
