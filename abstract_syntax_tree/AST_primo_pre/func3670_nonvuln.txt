`-FunctionDecl 0x14400e028  line:1:1 invalid onig_regset_new 'int (int **, int, int **)'
  |-ParmVarDecl 0x14400dd60 <col:17, col:30> col:30 referenced invalid rset 'int **'
  |-ParmVarDecl 0x14400dde0 <col:36, col:40> col:40 used n 'int'
  |-ParmVarDecl 0x14400dee0 <col:43, col:57> col:52 invalid regs 'int **'
  `-CompoundStmt 0x1440282f0 <line:2:1, line:45:1>
    |-DeclStmt 0x14400e168 <line:5:3, col:8>
    | `-VarDecl 0x14400e100 <col:3, col:7> col:7 used i 'int'
    |-DeclStmt 0x14400e200 <line:6:3, col:8>
    | `-VarDecl 0x14400e198 <col:3, col:7> col:7 used r 'int'
    |-DeclStmt 0x14400e298 <line:7:3, col:12>
    | `-VarDecl 0x14400e230 <col:3, col:7> col:7 used alloc 'int'
    |-BinaryOperator 0x14400e370 <line:11:3, col:11> '<dependent type>' contains-errors '='
    | |-UnaryOperator 0x14400e338 <col:3, col:4> '<dependent type>' contains-errors prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x14400e320 <col:4> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x14400e300 <col:4> '<dependent type>' contains-errors lvalue
    | `-IntegerLiteral 0x14400e350 <col:11> 'int' 0
    |-CallExpr 0x144027600 <line:14:3, col:31> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x144027560 <col:3> 'int ()' Function 0x1440274a8 'CHECK_NULL_RETURN_MEMERR' 'int ()'
    | `-RecoveryExpr 0x1440275e0 <col:28> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x1440277b8 <line:16:3, col:47> 'int' contains-errors '='
    | |-DeclRefExpr 0x144027628 <col:3> 'int' lvalue Var 0x14400e230 'alloc' 'int'
    | `-ConditionalOperator 0x144027788 <col:11, col:47> '<dependent type>' contains-errors
    |   |-BinaryOperator 0x144027748 <col:11, col:15> 'int' contains-errors '>'
    |   | |-DeclRefExpr 0x144027648 <col:11> 'int' lvalue ParmVar 0x14400dde0 'n' 'int'
    |   | `-RecoveryExpr 0x144027728 <col:15> '<dependent type>' contains-errors lvalue
    |   |-DeclRefExpr 0x1440276a0 <col:43> 'int' lvalue ParmVar 0x14400dde0 'n' 'int'
    |   `-RecoveryExpr 0x144027768 <col:47> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x144027a88 <line:18:3, line:21:3>
    | |-CallExpr 0x144027950 <line:18:7, col:17> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x1440278d0 <col:7> 'int ()' Function 0x144027818 'IS_NULL' 'int ()'
    | | `-RecoveryExpr 0x144027930 <col:15> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x144027a78 <col:20, line:21:3>
    |-ForStmt 0x144028238 <line:27:3, line:41:3>
    | |-BinaryOperator 0x144027b28 <line:27:8, col:12> 'int' '='
    | | |-DeclRefExpr 0x144027ae8 <col:8> 'int' lvalue Var 0x14400e100 'i' 'int'
    | | `-IntegerLiteral 0x144027b08 <col:12> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x144027bb8 <col:15, col:19> 'int' '<'
    | | |-ImplicitCastExpr 0x144027b88 <col:15> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x144027b48 <col:15> 'int' lvalue Var 0x14400e100 'i' 'int'
    | | `-ImplicitCastExpr 0x144027ba0 <col:19> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x144027b68 <col:19> 'int' lvalue ParmVar 0x14400dde0 'n' 'int'
    | |-UnaryOperator 0x144027bf8 <col:22, col:23> 'int' postfix '++'
    | | `-DeclRefExpr 0x144027bd8 <col:22> 'int' lvalue Var 0x14400e100 'i' 'int'
    | `-CompoundStmt 0x144028220 <col:27, line:41:3>
    |   `-IfStmt 0x144028200 <line:31:5, line:40:5>
    |     |-BinaryOperator 0x144027e18 <line:31:9, col:14> 'int' '!='
    |     | |-ImplicitCastExpr 0x144027e00 <col:9> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x144027dc0 <col:9> 'int' lvalue Var 0x14400e198 'r' 'int'
    |     | `-IntegerLiteral 0x144027de0 <col:14> 'int' 0
    |     `-CompoundStmt 0x1440281e8 <col:17, line:40:5>
    |       `-ReturnStmt 0x1440281d8 <line:39:7, col:14>
    |         `-ImplicitCastExpr 0x1440281c0 <col:14> 'int' <LValueToRValue>
    |           `-DeclRefExpr 0x1440281a0 <col:14> 'int' lvalue Var 0x14400e198 'r' 'int'
    `-ReturnStmt 0x1440282e0 <line:44:3, col:10>
      `-IntegerLiteral 0x1440282c0 <col:10> 'int' 0
