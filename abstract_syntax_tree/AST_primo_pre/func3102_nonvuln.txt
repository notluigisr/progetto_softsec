`-FunctionDecl 0x10680def8  line:1:1 scan_string 'int (const char **, char *, int)'
  |-ParmVarDecl 0x10680dd08 <col:13, col:26> col:26 used bufp 'const char **'
  |-ParmVarDecl 0x10680dd88 <col:32, col:38> col:38 used out 'char *'
  |-ParmVarDecl 0x10680de08 <col:43, col:47> col:47 used width 'int'
  `-CompoundStmt 0x120030588 <line:2:1, line:12:1>
    |-DeclStmt 0x10680e0a0 <line:3:3, col:25>
    | `-VarDecl 0x10680e018 <col:3, col:24> col:7 used scanned_so_far 'int' cinit
    |   `-IntegerLiteral 0x10680e080 <col:24> 'int' 0
    |-IfStmt 0x10680e258 <line:4:3, line:5:13>
    | |-BinaryOperator 0x10680e1f0 <line:4:7, col:32> 'int' '||'
    | | |-BinaryOperator 0x10680e158 <col:7, col:17> 'int' '||'
    | | | |-UnaryOperator 0x10680e0f0 <col:7, col:8> 'int' prefix '!' cannot overflow
    | | | | `-ImplicitCastExpr 0x10680e0d8 <col:8> 'const char **' <LValueToRValue>
    | | | |   `-DeclRefExpr 0x10680e0b8 <col:8> 'const char **' lvalue ParmVar 0x10680dd08 'bufp' 'const char **'
    | | | `-UnaryOperator 0x10680e140 <col:16, col:17> 'int' prefix '!' cannot overflow
    | | |   `-ImplicitCastExpr 0x10680e128 <col:17> 'char *' <LValueToRValue>
    | | |     `-DeclRefExpr 0x10680e108 <col:17> 'char *' lvalue ParmVar 0x10680dd88 'out' 'char *'
    | | `-BinaryOperator 0x10680e1d0 <col:24, col:32> 'int' '<'
    | |   |-ImplicitCastExpr 0x10680e1b8 <col:24> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x10680e178 <col:24> 'int' lvalue ParmVar 0x10680de08 'width' 'int'
    | |   `-IntegerLiteral 0x10680e198 <col:32> 'int' 0
    | `-ReturnStmt 0x10680e248 <line:5:5, col:13>
    |   `-UnaryOperator 0x10680e230 <col:12, col:13> 'int' prefix '-'
    |     `-IntegerLiteral 0x10680e210 <col:13> 'int' 1
    |-WhileStmt 0x120030498 <line:6:3, line:9:3>
    | |-BinaryOperator 0x1200302f8 <line:6:10, col:62> 'int' '&&'
    | | |-BinaryOperator 0x120030248 <col:10, col:40> 'int' '&&'
    | | | |-ImplicitCastExpr 0x120030230 <col:10, col:12> 'int' <IntegralCast>
    | | | | `-ImplicitCastExpr 0x120030218 <col:10, col:12> 'char' <LValueToRValue>
    | | | |   `-UnaryOperator 0x10680e2e0 <col:10, col:12> 'const char' lvalue prefix '*' cannot overflow
    | | | |     `-ImplicitCastExpr 0x10680e2c8 <col:11, col:12> 'const char *' <LValueToRValue>
    | | | |       `-UnaryOperator 0x10680e2b0 <col:11, col:12> 'const char *' lvalue prefix '*' cannot overflow
    | | | |         `-ImplicitCastExpr 0x10680e298 <col:12> 'const char **' <LValueToRValue>
    | | | |           `-DeclRefExpr 0x10680e278 <col:12> 'const char **' lvalue ParmVar 0x10680dd08 'bufp' 'const char **'
    | | | `-UnaryOperator 0x120030200 <col:20, col:40> 'int' prefix '!' cannot overflow
    | | |   `-CallExpr 0x1200301a8 <col:22, col:40> 'int'
    | | |     |-ImplicitCastExpr 0x120030190 <col:22> 'int (*)()' <FunctionToPointerDecay>
    | | |     | `-DeclRefExpr 0x1200300b8 <col:22> 'int ()' Function 0x120030000 'TOR_ISSPACE' 'int ()'
    | | |     `-ImplicitCastExpr 0x1200301e8 <col:34, col:36> 'int' <IntegralCast>
    | | |       `-ImplicitCastExpr 0x1200301d0 <col:34, col:36> 'char' <LValueToRValue>
    | | |         `-UnaryOperator 0x120030140 <col:34, col:36> 'const char' lvalue prefix '*' cannot overflow
    | | |           `-ImplicitCastExpr 0x120030128 <col:35, col:36> 'const char *' <LValueToRValue>
    | | |             `-UnaryOperator 0x120030110 <col:35, col:36> 'const char *' lvalue prefix '*' cannot overflow
    | | |               `-ImplicitCastExpr 0x1200300f8 <col:36> 'const char **' <LValueToRValue>
    | | |                 `-DeclRefExpr 0x1200300d8 <col:36> 'const char **' lvalue ParmVar 0x10680dd08 'bufp' 'const char **'
    | | `-BinaryOperator 0x1200302d8 <col:45, col:62> 'int' '<'
    | |   |-ImplicitCastExpr 0x1200302a8 <col:45> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x120030268 <col:45> 'int' lvalue Var 0x10680e018 'scanned_so_far' 'int'
    | |   `-ImplicitCastExpr 0x1200302c0 <col:62> 'int' <LValueToRValue>
    | |     `-DeclRefExpr 0x120030288 <col:62> 'int' lvalue ParmVar 0x10680de08 'width' 'int'
    | `-CompoundStmt 0x120030478 <col:69, line:9:3>
    |   |-BinaryOperator 0x120030420 <line:7:5, col:22> 'char' '='
    |   | |-UnaryOperator 0x120030350 <col:5, col:9> 'char' lvalue prefix '*' cannot overflow
    |   | | `-UnaryOperator 0x120030338 <col:6, col:9> 'char *' postfix '++'
    |   | |   `-DeclRefExpr 0x120030318 <col:6> 'char *' lvalue ParmVar 0x10680dd88 'out' 'char *'
    |   | `-ImplicitCastExpr 0x120030408 <col:14, col:22> 'char' <LValueToRValue>
    |   |   `-UnaryOperator 0x1200303f0 <col:14, col:22> 'const char' lvalue prefix '*' cannot overflow
    |   |     `-UnaryOperator 0x1200303d8 <col:15, col:22> 'const char *' postfix '++'
    |   |       `-ParenExpr 0x1200303b8 <col:15, col:21> 'const char *' lvalue
    |   |         `-UnaryOperator 0x1200303a0 <col:16, col:17> 'const char *' lvalue prefix '*' cannot overflow
    |   |           `-ImplicitCastExpr 0x120030388 <col:17> 'const char **' <LValueToRValue>
    |   |             `-DeclRefExpr 0x120030368 <col:17> 'const char **' lvalue ParmVar 0x10680dd08 'bufp' 'const char **'
    |   `-UnaryOperator 0x120030460 <line:8:5, col:7> 'int' prefix '++'
    |     `-DeclRefExpr 0x120030440 <col:7> 'int' lvalue Var 0x10680e018 'scanned_so_far' 'int'
    |-BinaryOperator 0x120030538 <line:10:3, col:10> 'char' '='
    | |-UnaryOperator 0x1200304f0 <col:3, col:4> 'char' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x1200304d8 <col:4> 'char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x1200304b8 <col:4> 'char *' lvalue ParmVar 0x10680dd88 'out' 'char *'
    | `-ImplicitCastExpr 0x120030520 <col:10> 'char' <IntegralCast>
    |   `-CharacterLiteral 0x120030508 <col:10> 'int' 0
    `-ReturnStmt 0x120030578 <line:11:3, col:10>
      `-IntegerLiteral 0x120030558 <col:10> 'int' 0
