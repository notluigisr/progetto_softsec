`-FunctionDecl 0x12980e098  line:1:1 invalid str_lower_case_match 'int (int, int, const int *, const int *, const int *, const int *)'
  |-ParmVarDecl 0x12980dcf0 <col:22, col:35> col:35 invalid enc 'int'
  |-ParmVarDecl 0x12980dd70 <col:40, col:44> col:44 used case_fold_flag 'int'
  |-ParmVarDecl 0x12980ddf0 <line:2:22, col:35> col:35 invalid t 'const int *'
  |-ParmVarDecl 0x12980de70 <col:38, col:51> col:51 invalid tend 'const int *'
  |-ParmVarDecl 0x12980def0 <line:3:22, col:35> col:35 invalid p 'const int *'
  |-ParmVarDecl 0x12980df70 <col:38, col:51> col:51 invalid end 'const int *'
  `-CompoundStmt 0x12b009168 <line:4:1, line:18:1>
    |-DeclStmt 0x12980e1f0 <line:5:3, col:13>
    | `-VarDecl 0x12980e188 <col:3, col:7> col:7 used lowlen 'int'
    |-WhileStmt 0x12b009118 <line:8:3, line:15:3>
    | |-BinaryOperator 0x12980e290 <line:8:10, col:14> 'int' contains-errors '<'
    | | |-RecoveryExpr 0x12980e250 <col:10> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x12980e270 <col:14> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x12b0090f8 <col:20, line:15:3>
    |   |-BinaryOperator 0x12b008e58 <line:9:5, col:72> 'int' contains-errors '='
    |   | |-DeclRefExpr 0x12980e2b0 <col:5> 'int' lvalue Var 0x12980e188 'lowlen' 'int'
    |   | `-CallExpr 0x12b008e10 <col:14, col:72> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x12b008cb8 <col:14> 'int ()' Function 0x12b008c00 'ONIGENC_MBC_CASE_FOLD' 'int ()'
    |   |   |-RecoveryExpr 0x12b008cd8 <col:36> '<dependent type>' contains-errors lvalue
    |   |   |-DeclRefExpr 0x12b008cf8 <col:41> 'int' lvalue ParmVar 0x12980dd70 'case_fold_flag' 'int'
    |   |   |-UnaryOperator 0x12b008d38 <col:57, col:58> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   |   | `-RecoveryExpr 0x12b008d18 <col:58> '<dependent type>' contains-errors lvalue
    |   |   |-RecoveryExpr 0x12b008d50 <col:61> '<dependent type>' contains-errors lvalue
    |   |   `-RecoveryExpr 0x12b008df0 <col:66> '<dependent type>' contains-errors lvalue
    |   `-WhileStmt 0x12b0090d8 <line:11:5, line:14:5>
    |     |-BinaryOperator 0x12b008ee8 <line:11:12, col:21> 'int' '>'
    |     | |-ImplicitCastExpr 0x12b008ed0 <col:12> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x12b008e90 <col:12> 'int' lvalue Var 0x12980e188 'lowlen' 'int'
    |     | `-IntegerLiteral 0x12b008eb0 <col:21> 'int' 0
    |     `-CompoundStmt 0x12b0090b8 <col:24, line:14:5>
    |       |-IfStmt 0x12b009060 <line:12:7, col:32>
    |       | |-BinaryOperator 0x12b009010 <col:11, col:21> 'int' contains-errors '!='
    |       | | |-UnaryOperator 0x12b008f40 <col:11, col:13> '<dependent type>' contains-errors prefix '*' cannot overflow
    |       | | | `-UnaryOperator 0x12b008f28 <col:12, col:13> '<dependent type>' contains-errors postfix '++' cannot overflow
    |       | | |   `-RecoveryExpr 0x12b008f08 <col:12> '<dependent type>' contains-errors lvalue
    |       | | `-UnaryOperator 0x12b008ff8 <col:19, col:21> '<dependent type>' contains-errors prefix '*' cannot overflow
    |       | |   `-UnaryOperator 0x12b008fe0 <col:20, col:21> '<dependent type>' contains-errors postfix '++' cannot overflow
    |       | |     `-RecoveryExpr 0x12b008fc0 <col:20> '<dependent type>' contains-errors lvalue
    |       | `-ReturnStmt 0x12b009050 <col:25, col:32>
    |       |   `-IntegerLiteral 0x12b009030 <col:32> 'int' 0
    |       `-UnaryOperator 0x12b0090a0 <line:13:7, col:13> 'int' postfix '--'
    |         `-DeclRefExpr 0x12b009080 <col:7> 'int' lvalue Var 0x12980e188 'lowlen' 'int'
    `-ReturnStmt 0x12b009158 <line:17:3, col:10>
      `-IntegerLiteral 0x12b009138 <col:10> 'int' 1
