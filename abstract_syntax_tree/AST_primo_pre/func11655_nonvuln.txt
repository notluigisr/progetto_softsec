`-FunctionDecl 0x14282a800  line:1:12 wait_serial_change 'int (struct acm *, unsigned long)' static
  |-ParmVarDecl 0x14280e248 <col:31, col:43> col:43 used acm 'struct acm *'
  |-ParmVarDecl 0x14280e2c8 <col:48, col:62> col:62 used arg 'unsigned long'
  `-CompoundStmt 0x14282eac0 <line:2:1, line:44:1>
    |-DeclStmt 0x14282a9a0 <line:3:2, col:12>
    | `-VarDecl 0x14282a918 <col:2, col:11> col:6 used rv 'int' cinit
    |   `-IntegerLiteral 0x14282a980 <col:11> 'int' 0
    |-CallExpr 0x14282aba0 <line:4:2, col:33> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x14282aae0 <col:2> 'int ()' Function 0x14282aa28 'DECLARE_WAITQUEUE' 'int ()'
    | |-RecoveryExpr 0x14282ab60 <col:20> '<dependent type>' contains-errors lvalue
    | `-RecoveryExpr 0x14282ab80 <col:26> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x14282add8 <line:5:2, col:30>
    | |-RecordDecl 0x14282abd0 <col:2, col:9> col:9 struct async_icount
    | |-VarDecl 0x14282acc8 <col:2, col:22> col:22 referenced invalid old 'struct async_icount'
    | `-VarDecl 0x14282ad50 <col:2, col:27> col:27 referenced invalid new 'struct async_icount'
    |-IfStmt 0x14282af60 <line:7:2, line:8:11>
    | |-RecoveryExpr 0x14282ae98 <line:7:6, col:45> '_Bool' contains-errors
    | `-ReturnStmt 0x14282af50 <line:8:3, col:11>
    |   `-UnaryOperator 0x14282af38 <col:10, col:11> '<dependent type>' contains-errors prefix '-' cannot overflow
    |     `-ImplicitCastExpr 0x14282af20 <col:11> '<dependent type>' contains-errors <LValueToRValue>
    |       `-RecoveryExpr 0x14282af00 <col:11> '<dependent type>' contains-errors lvalue
    |-DoStmt 0x14282ea58 <line:9:2, line:39:14>
    | |-CompoundStmt 0x14282e9a8 <line:9:5, line:39:2>
    | | |-CallExpr 0x14282b0f8 <line:10:3, col:32> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x14282b060 <col:3> 'int ()' Function 0x14282afa8 'spin_lock_irq' 'int ()'
    | | | `-UnaryOperator 0x14282b0e0 <col:17, col:23> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | |   `-RecoveryExpr 0x14282b0b8 <col:18, col:23> '<dependent type>' contains-errors lvalue
    | | |     `-DeclRefExpr 0x14282b080 <col:18> 'struct acm *' lvalue ParmVar 0x14280e248 'acm' 'struct acm *'
    | | |-BinaryOperator 0x14282b1c8 <line:11:3, col:14> '<dependent type>' contains-errors '='
    | | | |-RecoveryExpr 0x14282b140 <col:3> '<dependent type>' contains-errors lvalue
    | | | | `-DeclRefExpr 0x14282b120 <col:3> 'struct async_icount' lvalue Var 0x14282acc8 'old' 'struct async_icount'
    | | | `-RecoveryExpr 0x14282b1a0 <col:9, col:14> '<dependent type>' contains-errors lvalue
    | | |   `-DeclRefExpr 0x14282b168 <col:9> 'struct acm *' lvalue ParmVar 0x14280e248 'acm' 'struct acm *'
    | | |-BinaryOperator 0x14282b290 <line:12:3, col:14> '<dependent type>' contains-errors '='
    | | | |-RecoveryExpr 0x14282b208 <col:3> '<dependent type>' contains-errors lvalue
    | | | | `-DeclRefExpr 0x14282b1e8 <col:3> 'struct async_icount' lvalue Var 0x14282ad50 'new' 'struct async_icount'
    | | | `-RecoveryExpr 0x14282b268 <col:9, col:14> '<dependent type>' contains-errors lvalue
    | | |   `-DeclRefExpr 0x14282b230 <col:9> 'struct acm *' lvalue ParmVar 0x14280e248 'acm' 'struct acm *'
    | | |-BinaryOperator 0x14282b330 <line:13:3, col:19> '<dependent type>' contains-errors '='
    | | | |-RecoveryExpr 0x14282b2e8 <col:3, col:8> '<dependent type>' contains-errors lvalue
    | | | | `-DeclRefExpr 0x14282b2b0 <col:3> 'struct acm *' lvalue ParmVar 0x14280e248 'acm' 'struct acm *'
    | | | `-RecoveryExpr 0x14282b310 <col:19> '<dependent type>' contains-errors lvalue
    | | |-CallExpr 0x14282b4c8 <line:14:3, col:34> '<dependent type>' contains-errors
    | | | |-DeclRefExpr 0x14282b430 <col:3> 'int ()' Function 0x14282b378 'spin_unlock_irq' 'int ()'
    | | | `-UnaryOperator 0x14282b4b0 <col:19, col:25> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | |   `-RecoveryExpr 0x14282b488 <col:20, col:25> '<dependent type>' contains-errors lvalue
    | | |     `-DeclRefExpr 0x14282b450 <col:20> 'struct acm *' lvalue ParmVar 0x14280e248 'acm' 'struct acm *'
    | | |-IfStmt 0x14282b660 <line:16:3, line:18:4>
    | | | |-RecoveryExpr 0x14282b638 <line:16:7, line:17:19> '_Bool' contains-errors
    | | | `-BreakStmt 0x14282b658 <line:18:4>
    | | |-IfStmt 0x14282e000 <line:19:3, line:21:4>
    | | | |-RecoveryExpr 0x14282b7c8 <line:19:7, line:20:19> '_Bool' contains-errors
    | | | `-BreakStmt 0x14282b7e8 <line:21:4>
    | | |-IfStmt 0x14282e190 <line:22:3, line:24:4>
    | | | |-RecoveryExpr 0x14282e168 <line:22:7, line:23:19> '_Bool' contains-errors
    | | | `-BreakStmt 0x14282e188 <line:24:4>
    | | |-CallExpr 0x14282e578 <line:28:3, col:12> 'int'
    | | | `-ImplicitCastExpr 0x14282e560 <col:3> 'int (*)()' <FunctionToPointerDecay>
    | | |   `-DeclRefExpr 0x14282e508 <col:3> 'int ()' Function 0x14282e450 'schedule' 'int ()'
    | | `-IfStmt 0x14282e978 <line:30:3, line:38:3> has_else
    | |   |-RecoveryExpr 0x14282e748 <line:30:7, col:12> '<dependent type>' contains-errors lvalue
    | |   | `-DeclRefExpr 0x14282e710 <col:7> 'struct acm *' lvalue ParmVar 0x14280e248 'acm' 'struct acm *'
    | |   |-CompoundStmt 0x14282e810 <col:26, line:35:3>
    | |   | `-IfStmt 0x14282e7e0 <line:31:4, line:34:5> has_else
    | |   |   |-RecoveryExpr 0x14282e790 <line:31:8, col:14> '_Bool' contains-errors
    | |   |   |-BreakStmt 0x14282e7b0 <line:32:5>
    | |   |   `-NullStmt 0x14282e7d8 <line:34:5>
    | |   `-CompoundStmt 0x14282e968 <line:35:10, line:38:3>
    | `-UnaryOperator 0x14282ea40 <line:39:11, col:12> 'int' prefix '!' cannot overflow
    |   `-ImplicitCastExpr 0x14282ea28 <col:12> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x14282ea08 <col:12> 'int' lvalue Var 0x14282a918 'rv' 'int'
    `-ReturnStmt 0x14282eab0 <line:43:2, col:9>
      `-ImplicitCastExpr 0x14282ea98 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x14282ea78 <col:9> 'int' lvalue Var 0x14282a918 'rv' 'int'
