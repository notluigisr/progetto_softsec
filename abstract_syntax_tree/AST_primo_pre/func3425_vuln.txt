`-FunctionDecl 0x1538b4c38  line:1:5 invalid ASN1_item_verify 'int (const int *, int *, int *, void *, int *)'
  |-ParmVarDecl 0x1538b48f0 <col:22, col:39> col:39 invalid it 'const int *'
  |-ParmVarDecl 0x1538b49a8 <col:43, col:55> col:55 invalid a 'int *'
  |-ParmVarDecl 0x1538b4a28 <col:58, col:75> col:75 invalid signature 'int *'
  |-ParmVarDecl 0x1538b4aa8 <line:2:7, col:13> col:13 used asn 'void *'
  |-ParmVarDecl 0x1538b4b28 <col:18, col:28> col:28 invalid pkey 'int *'
  `-CompoundStmt 0x154809da8 <line:3:2, line:51:2>
    |-DeclStmt 0x1538b4d88 <line:5:2, col:20>
    | `-VarDecl 0x1538b4d20 <col:2, col:16> col:16 referenced invalid type 'const int *'
    |-DeclStmt 0x1538b4e88 <line:6:2, col:28>
    | `-VarDecl 0x1538b4de8 <col:2, col:24> col:17 used buf_in 'unsigned char *' cinit
    |   `-RecoveryExpr 0x1538b4e68 <col:24> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x1538ce088 <line:7:2, col:19>
    | |-VarDecl 0x1538b4eb8 <col:2, col:12> col:6 used ret 'int' cinit
    | | `-UnaryOperator 0x1538b4f40 <col:11, col:12> 'int' prefix '-'
    | |   `-IntegerLiteral 0x1538b4f20 <col:12> 'int' 1
    | |-VarDecl 0x1538b4f70 <col:2, col:14> col:14 used i 'int'
    | `-VarDecl 0x1538ce000 <col:2, col:16> col:16 used inl 'int'
    |-CallExpr 0x1538ce2b0 <line:9:2, col:22> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x1538ce200 <col:2> 'int ()' Function 0x1538ce148 'EVP_MD_CTX_init' 'int ()'
    | `-UnaryOperator 0x1538ce298 <col:18, col:19> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   `-RecoveryExpr 0x1538ce278 <col:19> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x1538ce488 <line:10:2, col:28> 'int' contains-errors '='
    | |-DeclRefExpr 0x1538ce2d8 <col:2> 'int' lvalue Var 0x1538b4f70 'i' 'int'
    | `-CallExpr 0x1538ce460 <col:4, col:28> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x1538ce3d8 <col:4> 'int ()' Function 0x1538ce320 'OBJ_obj2nid' 'int ()'
    |   `-CXXDependentScopeMemberExpr 0x1538ce418 <col:16, col:19> '<dependent type>' contains-errors lvalue ->algorithm
    |     `-RecoveryExpr 0x1538ce3f8 <col:16> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x1538ce7d8 <line:11:2, col:41> '<dependent type>' contains-errors '='
    | |-RecoveryExpr 0x1538ce4c8 <col:2> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x1538ce4a8 <col:2> 'const int *' lvalue Var 0x1538b4d20 'type' 'const int *'
    | `-CallExpr 0x1538ce7b0 <col:7, col:41> 'int'
    |   |-ImplicitCastExpr 0x1538ce798 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x1538ce5d0 <col:7> 'int ()' Function 0x1538ce518 'EVP_get_digestbyname' 'int ()'
    |   `-CallExpr 0x1538ce758 <col:28, col:40> 'int'
    |     |-ImplicitCastExpr 0x1538ce740 <col:28> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x1538ce6d0 <col:28> 'int ()' Function 0x1538ce618 'OBJ_nid2sn' 'int ()'
    |     `-ImplicitCastExpr 0x1538ce780 <col:39> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x1538ce6f0 <col:39> 'int' lvalue Var 0x1538b4f70 'i' 'int'
    |-IfStmt 0x1538ceae8 <line:12:2, line:16:3>
    | |-BinaryOperator 0x1538ce870 <line:12:6, col:14> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x1538ce7f8 <col:6> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x1538ce850 <col:14> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x1538ceac8 <line:13:3, line:16:3>
    |   |-CallExpr 0x1538cea30 <line:14:3, col:74> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x1538ce970 <col:3> 'int ()' Function 0x1538ce8b8 'ASN1err' 'int ()'
    |   | |-RecoveryExpr 0x1538ce9f0 <col:11> '<dependent type>' contains-errors lvalue
    |   | `-RecoveryExpr 0x1538cea10 <col:35> '<dependent type>' contains-errors lvalue
    |   `-GotoStmt 0x1538ceab0 <line:15:3, col:8> 'err' 0x1538cea60
    |-IfStmt 0x1538cee20 <line:18:2, line:23:3>
    | |-UnaryOperator 0x1538ced50 <line:18:6, col:40> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-CallExpr 0x1538ced18 <col:7, col:40> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x1538cebe8 <col:7> 'int ()' Function 0x1538ceb30 'EVP_VerifyInit_ex' 'int ()'
    | |   |-UnaryOperator 0x1538cece0 <col:25, col:26> '<dependent type>' contains-errors prefix '&' cannot overflow
    | |   | `-RecoveryExpr 0x1538cecc0 <col:26> '<dependent type>' contains-errors lvalue
    | |   |-RecoveryExpr 0x1538cec38 <col:30> '<dependent type>' contains-errors lvalue
    | |   `-RecoveryExpr 0x1538cecf8 <col:36> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x1538cee00 <line:19:3, line:23:3>
    |   |-BinaryOperator 0x1538cedc8 <line:21:3, col:7> 'int' '='
    |   | |-DeclRefExpr 0x1538ced88 <col:3> 'int' lvalue Var 0x1538b4eb8 'ret' 'int'
    |   | `-IntegerLiteral 0x1538ceda8 <col:7> 'int' 0
    |   `-GotoStmt 0x1538cede8 <line:22:3, col:8> 'err' 0x1538cea60
    |-BinaryOperator 0x154809258 <line:25:2, col:38> 'int' contains-errors '='
    | |-DeclRefExpr 0x1538cee40 <col:2> 'int' lvalue Var 0x1538ce000 'inl' 'int'
    | `-CallExpr 0x154809220 <col:8, col:38> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x1538cef40 <col:8> 'int ()' Function 0x1538cee88 'ASN1_item_i2d' 'int ()'
    |   |-DeclRefExpr 0x1538cef60 <col:22> 'void *' lvalue ParmVar 0x1538b4aa8 'asn' 'void *'
    |   |-UnaryOperator 0x1538cefd0 <col:27, col:28> 'unsigned char **' contains-errors prefix '&' cannot overflow
    |   | `-DeclRefExpr 0x1538cef80 <col:28> 'unsigned char *' contains-errors lvalue Var 0x1538b4de8 'buf_in' 'unsigned char *'
    |   `-RecoveryExpr 0x154809200 <col:36> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x154809308 <line:27:2, line:31:3>
    | |-RecoveryExpr 0x154809298 <line:27:6, col:16> '_Bool' contains-errors
    | `-CompoundStmt 0x1548092f0 <line:28:3, line:31:3>
    |   `-GotoStmt 0x1548092d8 <line:30:3, col:8> 'err' 0x1538cea60
    |-CallExpr 0x154809670 <line:35:2, col:42> 'int' contains-errors
    | |-ImplicitCastExpr 0x154809658 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x1548095a0 <col:2> 'int ()' Function 0x1548094e8 'OPENSSL_cleanse' 'int ()'
    | |-ImplicitCastExpr 0x1548096a0 <col:18> 'unsigned char *' contains-errors <LValueToRValue>
    | | `-DeclRefExpr 0x1548095c0 <col:18> 'unsigned char *' contains-errors lvalue Var 0x1538b4de8 'buf_in' 'unsigned char *'
    | `-CStyleCastExpr 0x154809630 <col:25, col:39> 'unsigned int' <IntegralCast>
    |   `-ImplicitCastExpr 0x154809618 <col:39> 'int' <LValueToRValue> part_of_explicit_cast
    |     `-DeclRefExpr 0x1548095e0 <col:39> 'int' lvalue Var 0x1538ce000 'inl' 'int'
    |-CallExpr 0x1548097f0 <line:36:2, col:21> 'int' contains-errors
    | |-ImplicitCastExpr 0x1548097d8 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x154809798 <col:2> 'int ()' Function 0x1548096e0 'OPENSSL_free' 'int ()'
    | `-ImplicitCastExpr 0x154809818 <col:15> 'unsigned char *' contains-errors <LValueToRValue>
    |   `-DeclRefExpr 0x1548097b8 <col:15> 'unsigned char *' contains-errors lvalue Var 0x1538b4de8 'buf_in' 'unsigned char *'
    |-IfStmt 0x154809b98 <line:38:2, line:44:3>
    | |-RecoveryExpr 0x154809ac0 <line:38:6, line:39:45> '_Bool' contains-errors
    | `-CompoundStmt 0x154809b78 <line:40:3, line:44:3>
    |   |-BinaryOperator 0x154809b40 <line:42:3, col:7> 'int' '='
    |   | |-DeclRefExpr 0x154809b00 <col:3> 'int' lvalue Var 0x1538b4eb8 'ret' 'int'
    |   | `-IntegerLiteral 0x154809b20 <col:7> 'int' 0
    |   `-GotoStmt 0x154809b60 <line:43:3, col:8> 'err' 0x1538cea60
    |-BinaryOperator 0x154809bf8 <line:47:2, col:6> 'int' '='
    | |-DeclRefExpr 0x154809bb8 <col:2> 'int' lvalue Var 0x1538b4eb8 'ret' 'int'
    | `-IntegerLiteral 0x154809bd8 <col:6> 'int' 1
    |-LabelStmt 0x154809d20 <line:48:1, col:4> 'err'
    | `-NullStmt 0x154809d18 <col:4>
    `-ReturnStmt 0x154809d98 <line:50:2, col:12>
      `-ImplicitCastExpr 0x154809d80 <col:8, col:12> 'int' <LValueToRValue>
        `-ParenExpr 0x154809d60 <col:8, col:12> 'int' lvalue
          `-DeclRefExpr 0x154809d40 <col:9> 'int' lvalue Var 0x1538b4eb8 'ret' 'int'
