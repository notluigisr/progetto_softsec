`-FunctionDecl 0x130928288  line:1:1 invalid print_anchor 'int (int *, int)'
  |-ParmVarDecl 0x130928128 <col:14, col:20> col:20 invalid f 'int *'
  |-ParmVarDecl 0x1309281a8 <col:23, col:27> col:27 used anchor 'int'
  `-CompoundStmt 0x131008b58 <line:2:1, line:47:1>
    |-DeclStmt 0x1309283e0 <line:3:3, col:12>
    | `-VarDecl 0x130928358 <col:3, col:11> col:7 used q 'int' cinit
    |   `-IntegerLiteral 0x1309283c0 <col:11> 'int' 0
    |-CallExpr 0x1309285f0 <line:5:3, col:19> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x130928550 <col:3> 'int ()' Function 0x130928498 'fprintf' 'int ()'
    | |-RecoveryExpr 0x130928570 <col:11> '<dependent type>' contains-errors lvalue
    | `-StringLiteral 0x1309285d0 <col:14> 'char[4]' lvalue "STR"
    |-IfStmt 0x1309287c8 <line:7:3, line:10:3>
    | |-BinaryOperator 0x130928698 <line:7:7, col:16> '<dependent type>' contains-errors '&'
    | | |-DeclRefExpr 0x130928620 <col:7> 'int' lvalue ParmVar 0x1309281a8 'anchor' 'int'
    | | `-RecoveryExpr 0x130928678 <col:16> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x1309287a8 <col:32, line:10:3>
    |   |-CallExpr 0x130928718 <line:8:5, col:21> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x1309286b8 <col:5> 'int ()' Function 0x130928498 'fprintf' 'int ()'
    |   | |-RecoveryExpr 0x1309286d8 <col:13> '<dependent type>' contains-errors lvalue
    |   | `-StringLiteral 0x1309286f8 <col:16> 'char[4]' lvalue "STR"
    |   `-BinaryOperator 0x130928788 <line:9:5, col:9> 'int' '='
    |     |-DeclRefExpr 0x130928748 <col:5> 'int' lvalue Var 0x130928358 'q' 'int'
    |     `-IntegerLiteral 0x130928768 <col:9> 'int' 1
    |-IfStmt 0x130941a98 <line:11:3, line:15:3>
    | |-BinaryOperator 0x130941878 <line:11:7, col:16> '<dependent type>' contains-errors '&'
    | | |-DeclRefExpr 0x130941800 <col:7> 'int' lvalue ParmVar 0x1309281a8 'anchor' 'int'
    | | `-RecoveryExpr 0x130941858 <col:16> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x130941a70 <col:33, line:15:3>
    |   |-IfStmt 0x130941960 <line:12:5, col:28>
    |   | |-ImplicitCastExpr 0x1309418b8 <col:9> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x130941898 <col:9> 'int' lvalue Var 0x130928358 'q' 'int'
    |   | `-CallExpr 0x130941930 <col:12, col:28> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x1309418d0 <col:12> 'int ()' Function 0x130928498 'fprintf' 'int ()'
    |   |   |-RecoveryExpr 0x1309418f0 <col:20> '<dependent type>' contains-errors lvalue
    |   |   `-StringLiteral 0x130941910 <col:23> 'char[4]' lvalue "STR"
    |   |-BinaryOperator 0x1309419c0 <line:13:5, col:9> 'int' '='
    |   | |-DeclRefExpr 0x130941980 <col:5> 'int' lvalue Var 0x130928358 'q' 'int'
    |   | `-IntegerLiteral 0x1309419a0 <col:9> 'int' 1
    |   `-CallExpr 0x130941a40 <line:14:5, col:21> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x1309419e0 <col:5> 'int ()' Function 0x130928498 'fprintf' 'int ()'
    |     |-RecoveryExpr 0x130941a00 <col:13> '<dependent type>' contains-errors lvalue
    |     `-StringLiteral 0x130941a20 <col:16> 'char[4]' lvalue "STR"
    |-IfStmt 0x130941d50 <line:16:3, line:20:3>
    | |-BinaryOperator 0x130941b30 <line:16:7, col:16> '<dependent type>' contains-errors '&'
    | | |-DeclRefExpr 0x130941ab8 <col:7> 'int' lvalue ParmVar 0x1309281a8 'anchor' 'int'
    | | `-RecoveryExpr 0x130941b10 <col:16> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x130941d28 <col:37, line:20:3>
    |   |-IfStmt 0x130941c18 <line:17:5, col:28>
    |   | |-ImplicitCastExpr 0x130941b70 <col:9> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x130941b50 <col:9> 'int' lvalue Var 0x130928358 'q' 'int'
    |   | `-CallExpr 0x130941be8 <col:12, col:28> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x130941b88 <col:12> 'int ()' Function 0x130928498 'fprintf' 'int ()'
    |   |   |-RecoveryExpr 0x130941ba8 <col:20> '<dependent type>' contains-errors lvalue
    |   |   `-StringLiteral 0x130941bc8 <col:23> 'char[4]' lvalue "STR"
    |   |-BinaryOperator 0x130941c78 <line:18:5, col:9> 'int' '='
    |   | |-DeclRefExpr 0x130941c38 <col:5> 'int' lvalue Var 0x130928358 'q' 'int'
    |   | `-IntegerLiteral 0x130941c58 <col:9> 'int' 1
    |   `-CallExpr 0x130941cf8 <line:19:5, col:21> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x130941c98 <col:5> 'int ()' Function 0x130928498 'fprintf' 'int ()'
    |     |-RecoveryExpr 0x130941cb8 <col:13> '<dependent type>' contains-errors lvalue
    |     `-StringLiteral 0x130941cd8 <col:16> 'char[4]' lvalue "STR"
    |-IfStmt 0x130942008 <line:21:3, line:25:3>
    | |-BinaryOperator 0x130941de8 <line:21:7, col:16> '<dependent type>' contains-errors '&'
    | | |-DeclRefExpr 0x130941d70 <col:7> 'int' lvalue ParmVar 0x1309281a8 'anchor' 'int'
    | | `-RecoveryExpr 0x130941dc8 <col:16> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x130941fe0 <col:30, line:25:3>
    |   |-IfStmt 0x130941ed0 <line:22:5, col:28>
    |   | |-ImplicitCastExpr 0x130941e28 <col:9> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x130941e08 <col:9> 'int' lvalue Var 0x130928358 'q' 'int'
    |   | `-CallExpr 0x130941ea0 <col:12, col:28> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x130941e40 <col:12> 'int ()' Function 0x130928498 'fprintf' 'int ()'
    |   |   |-RecoveryExpr 0x130941e60 <col:20> '<dependent type>' contains-errors lvalue
    |   |   `-StringLiteral 0x130941e80 <col:23> 'char[4]' lvalue "STR"
    |   |-BinaryOperator 0x130941f30 <line:23:5, col:9> 'int' '='
    |   | |-DeclRefExpr 0x130941ef0 <col:5> 'int' lvalue Var 0x130928358 'q' 'int'
    |   | `-IntegerLiteral 0x130941f10 <col:9> 'int' 1
    |   `-CallExpr 0x130941fb0 <line:24:5, col:21> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x130941f50 <col:5> 'int ()' Function 0x130928498 'fprintf' 'int ()'
    |     |-RecoveryExpr 0x130941f70 <col:13> '<dependent type>' contains-errors lvalue
    |     `-StringLiteral 0x130941f90 <col:16> 'char[4]' lvalue "STR"
    |-IfStmt 0x1309422c0 <line:26:3, line:30:3>
    | |-BinaryOperator 0x1309420a0 <line:26:7, col:16> '<dependent type>' contains-errors '&'
    | | |-DeclRefExpr 0x130942028 <col:7> 'int' lvalue ParmVar 0x1309281a8 'anchor' 'int'
    | | `-RecoveryExpr 0x130942080 <col:16> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x130942298 <col:35, line:30:3>
    |   |-IfStmt 0x130942188 <line:27:5, col:28>
    |   | |-ImplicitCastExpr 0x1309420e0 <col:9> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x1309420c0 <col:9> 'int' lvalue Var 0x130928358 'q' 'int'
    |   | `-CallExpr 0x130942158 <col:12, col:28> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x1309420f8 <col:12> 'int ()' Function 0x130928498 'fprintf' 'int ()'
    |   |   |-RecoveryExpr 0x130942118 <col:20> '<dependent type>' contains-errors lvalue
    |   |   `-StringLiteral 0x130942138 <col:23> 'char[4]' lvalue "STR"
    |   |-BinaryOperator 0x1309421e8 <line:28:5, col:9> 'int' '='
    |   | |-DeclRefExpr 0x1309421a8 <col:5> 'int' lvalue Var 0x130928358 'q' 'int'
    |   | `-IntegerLiteral 0x1309421c8 <col:9> 'int' 1
    |   `-CallExpr 0x130942268 <line:29:5, col:21> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x130942208 <col:5> 'int ()' Function 0x130928498 'fprintf' 'int ()'
    |     |-RecoveryExpr 0x130942228 <col:13> '<dependent type>' contains-errors lvalue
    |     `-StringLiteral 0x130942248 <col:16> 'char[4]' lvalue "STR"
    |-IfStmt 0x130942578 <line:31:3, line:35:3>
    | |-BinaryOperator 0x130942358 <line:31:7, col:16> '<dependent type>' contains-errors '&'
    | | |-DeclRefExpr 0x1309422e0 <col:7> 'int' lvalue ParmVar 0x1309281a8 'anchor' 'int'
    | | `-RecoveryExpr 0x130942338 <col:16> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x130942550 <col:31, line:35:3>
    |   |-IfStmt 0x130942440 <line:32:5, col:28>
    |   | |-ImplicitCastExpr 0x130942398 <col:9> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x130942378 <col:9> 'int' lvalue Var 0x130928358 'q' 'int'
    |   | `-CallExpr 0x130942410 <col:12, col:28> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x1309423b0 <col:12> 'int ()' Function 0x130928498 'fprintf' 'int ()'
    |   |   |-RecoveryExpr 0x1309423d0 <col:20> '<dependent type>' contains-errors lvalue
    |   |   `-StringLiteral 0x1309423f0 <col:23> 'char[4]' lvalue "STR"
    |   |-BinaryOperator 0x1309424a0 <line:33:5, col:9> 'int' '='
    |   | |-DeclRefExpr 0x130942460 <col:5> 'int' lvalue Var 0x130928358 'q' 'int'
    |   | `-IntegerLiteral 0x130942480 <col:9> 'int' 1
    |   `-CallExpr 0x130942520 <line:34:5, col:21> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x1309424c0 <col:5> 'int ()' Function 0x130928498 'fprintf' 'int ()'
    |     |-RecoveryExpr 0x1309424e0 <col:13> '<dependent type>' contains-errors lvalue
    |     `-StringLiteral 0x130942500 <col:16> 'char[4]' lvalue "STR"
    |-IfStmt 0x131008858 <line:36:3, line:40:3>
    | |-BinaryOperator 0x130942610 <line:36:7, col:16> '<dependent type>' contains-errors '&'
    | | |-DeclRefExpr 0x130942598 <col:7> 'int' lvalue ParmVar 0x1309281a8 'anchor' 'int'
    | | `-RecoveryExpr 0x1309425f0 <col:16> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x131008830 <col:34, line:40:3>
    |   |-IfStmt 0x1309426f8 <line:37:5, col:28>
    |   | |-ImplicitCastExpr 0x130942650 <col:9> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x130942630 <col:9> 'int' lvalue Var 0x130928358 'q' 'int'
    |   | `-CallExpr 0x1309426c8 <col:12, col:28> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x130942668 <col:12> 'int ()' Function 0x130928498 'fprintf' 'int ()'
    |   |   |-RecoveryExpr 0x130942688 <col:20> '<dependent type>' contains-errors lvalue
    |   |   `-StringLiteral 0x1309426a8 <col:23> 'char[4]' lvalue "STR"
    |   |-BinaryOperator 0x130942758 <line:38:5, col:9> 'int' '='
    |   | |-DeclRefExpr 0x130942718 <col:5> 'int' lvalue Var 0x130928358 'q' 'int'
    |   | `-IntegerLiteral 0x130942738 <col:9> 'int' 1
    |   `-CallExpr 0x131008800 <line:39:5, col:21> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x130942778 <col:5> 'int ()' Function 0x130928498 'fprintf' 'int ()'
    |     |-RecoveryExpr 0x130942798 <col:13> '<dependent type>' contains-errors lvalue
    |     `-StringLiteral 0x1309427b8 <col:16> 'char[4]' lvalue "STR"
    |-IfStmt 0x131008aa8 <line:41:3, line:44:3>
    | |-BinaryOperator 0x1310088f0 <line:41:7, col:16> '<dependent type>' contains-errors '&'
    | | |-DeclRefExpr 0x131008878 <col:7> 'int' lvalue ParmVar 0x1309281a8 'anchor' 'int'
    | | `-RecoveryExpr 0x1310088d0 <col:16> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x131008a88 <col:37, line:44:3>
    |   |-IfStmt 0x1310089d8 <line:42:5, col:28>
    |   | |-ImplicitCastExpr 0x131008930 <col:9> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x131008910 <col:9> 'int' lvalue Var 0x130928358 'q' 'int'
    |   | `-CallExpr 0x1310089a8 <col:12, col:28> '<dependent type>' contains-errors
    |   |   |-DeclRefExpr 0x131008948 <col:12> 'int ()' Function 0x130928498 'fprintf' 'int ()'
    |   |   |-RecoveryExpr 0x131008968 <col:20> '<dependent type>' contains-errors lvalue
    |   |   `-StringLiteral 0x131008988 <col:23> 'char[4]' lvalue "STR"
    |   `-CallExpr 0x131008a58 <line:43:5, col:21> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x1310089f8 <col:5> 'int ()' Function 0x130928498 'fprintf' 'int ()'
    |     |-RecoveryExpr 0x131008a18 <col:13> '<dependent type>' contains-errors lvalue
    |     `-StringLiteral 0x131008a38 <col:16> 'char[4]' lvalue "STR"
    `-CallExpr 0x131008b28 <line:46:3, col:19> '<dependent type>' contains-errors
      |-DeclRefExpr 0x131008ac8 <col:3> 'int ()' Function 0x130928498 'fprintf' 'int ()'
      |-RecoveryExpr 0x131008ae8 <col:11> '<dependent type>' contains-errors lvalue
      `-StringLiteral 0x131008b08 <col:14> 'char[4]' lvalue "STR"
