`-FunctionDecl 0x11c81e088  line:1:15 invalid jas_matrix_create 'int *(int, int)'
  |-ParmVarDecl 0x11c81def0 <col:33, col:37> col:37 used numrows 'int'
  |-ParmVarDecl 0x11c81df70 <col:46, col:50> col:50 used numcols 'int'
  `-CompoundStmt 0x11c8420c8 <line:2:1, line:47:1>
    |-DeclStmt 0x11c81e1d8 <line:4:2, col:7>
    | `-VarDecl 0x11c81e170 <col:2, col:6> col:6 used i 'int'
    |-IfStmt 0x11c81e418 <line:6:2, line:8:2>
    | |-RecoveryExpr 0x11c81e398 <line:6:6, col:49> '_Bool' contains-errors
    | `-CompoundStmt 0x11c81e400 <col:52, line:8:2>
    |   `-ReturnStmt 0x11c81e3f0 <line:7:3, col:10>
    |     `-ImplicitCastExpr 0x11c81e3d8 <col:10> 'int *' <NullToPointer>
    |       `-IntegerLiteral 0x11c81e3b8 <col:10> 'int' 0
    |-IfStmt 0x11c841c58 <line:17:2, line:23:2>
    | |-BinaryOperator 0x11c8418a8 <line:17:6, col:25> 'int' contains-errors '>'
    | | |-CXXDependentScopeMemberExpr 0x11c841860 <col:6, col:14> '<dependent type>' contains-errors lvalue ->maxrows_
    | | | `-RecoveryExpr 0x11c841840 <col:6> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x11c841800 <col:25> 'int' 0
    | `-CompoundStmt 0x11c841c40 <col:28, line:23:2>
    |   `-IfStmt 0x11c841c20 <line:18:3, line:22:3>
    |     |-RecoveryExpr 0x11c841aa0 <line:18:7, line:19:28> '_Bool' contains-errors
    |     `-CompoundStmt 0x11c841c08 <col:31, line:22:3>
    |       `-ReturnStmt 0x11c841bf8 <line:21:4, col:11>
    |         `-ImplicitCastExpr 0x11c841be0 <col:11> 'int *' <NullToPointer>
    |           `-IntegerLiteral 0x11c841bc0 <col:11> 'int' 0
    |-IfStmt 0x11c841db0 <line:25:2, line:31:2>
    | |-RecoveryExpr 0x11c841c98 <line:25:6, col:26> '_Bool' contains-errors
    | `-CompoundStmt 0x11c841d98 <col:29, line:31:2>
    |   `-IfStmt 0x11c841d78 <line:26:3, line:30:3>
    |     |-RecoveryExpr 0x11c841cd8 <line:26:7, line:27:26> '_Bool' contains-errors
    |     `-CompoundStmt 0x11c841d60 <col:29, line:30:3>
    |       `-ReturnStmt 0x11c841d50 <line:29:4, col:11>
    |         `-ImplicitCastExpr 0x11c841d38 <col:11> 'int *' <NullToPointer>
    |           `-IntegerLiteral 0x11c841d18 <col:11> 'int' 0
    `-ForStmt 0x11c841f48 <line:33:2, line:35:2>
      |-BinaryOperator 0x11c841e10 <line:33:7, col:11> 'int' '='
      | |-DeclRefExpr 0x11c841dd0 <col:7> 'int' lvalue Var 0x11c81e170 'i' 'int'
      | `-IntegerLiteral 0x11c841df0 <col:11> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x11c841ea0 <col:14, col:18> 'int' '<'
      | |-ImplicitCastExpr 0x11c841e70 <col:14> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x11c841e30 <col:14> 'int' lvalue Var 0x11c81e170 'i' 'int'
      | `-ImplicitCastExpr 0x11c841e88 <col:18> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x11c841e50 <col:18> 'int' lvalue ParmVar 0x11c81def0 'numrows' 'int'
      |-UnaryOperator 0x11c841ee0 <col:27, col:29> 'int' prefix '++'
      | `-DeclRefExpr 0x11c841ec0 <col:29> 'int' lvalue Var 0x11c81e170 'i' 'int'
      `-CompoundStmt 0x11c841f38 <col:32, line:35:2>
