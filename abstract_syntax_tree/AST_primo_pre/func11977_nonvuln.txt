`-FunctionDecl 0x1359281a8  line:1:1 INST_HANDLER 'int (int)'
  |-ParmVarDecl 0x1359280d8 <col:15> col:15 des 'int'
  `-CompoundStmt 0x135941820 <col:20, line:7:1>
    `-IfStmt 0x135941800 <line:2:2, line:6:2>
      |-BinaryOperator 0x1359283c0 <line:2:6, col:21> 'int' contains-errors '<'
      | |-CXXDependentScopeMemberExpr 0x135928378 <col:6, col:13> '<dependent type>' contains-errors lvalue .round
      | | `-RecoveryExpr 0x135928358 <col:6> '<dependent type>' contains-errors lvalue
      | `-IntegerLiteral 0x135928318 <col:21> 'int' 16
      `-CompoundStmt 0x1359287e8 <col:25, line:6:2>
        `-CallExpr 0x1359287b0 <line:5:3, col:48> '<dependent type>' contains-errors
          |-DeclRefExpr 0x135928530 <col:3> 'int ()' Function 0x135928478 'r_strbuf_setf' 'int ()'
          |-UnaryOperator 0x135928730 <col:18, col:23> '<dependent type>' contains-errors prefix '&' cannot overflow
          | `-CXXDependentScopeMemberExpr 0x1359286e8 <col:19, col:23> '<dependent type>' contains-errors lvalue ->esil
          |   `-RecoveryExpr 0x1359286c8 <col:19> '<dependent type>' contains-errors lvalue
          |-StringLiteral 0x135928610 <col:29> 'char[4]' lvalue "STR"
          `-CXXDependentScopeMemberExpr 0x135928768 <col:36, col:43> '<dependent type>' contains-errors lvalue .round
            `-RecoveryExpr 0x135928748 <col:36> '<dependent type>' contains-errors lvalue
