`-FunctionDecl 0x1581282e8  line:1:13 conv_sjistoeuc 'int (char *, int, const char *)' static
  |-ParmVarDecl 0x1581280f0 <col:28, col:35> col:35 used outbuf 'char *'
  |-ParmVarDecl 0x158128170 <col:43, col:48> col:48 outlen 'int'
  |-ParmVarDecl 0x1581281f0 <col:56, col:69> col:69 used inbuf 'const char *'
  `-CompoundStmt 0x1581434f8 <line:2:1, line:46:1>
    |-DeclStmt 0x1581284a8 <line:3:2, col:26>
    | `-VarDecl 0x158128408 <col:2, col:21> col:16 used in 'const char *' cinit
    |   `-ImplicitCastExpr 0x158128490 <col:21> 'const char *' <LValueToRValue>
    |     `-DeclRefExpr 0x158128470 <col:21> 'const char *' lvalue ParmVar 0x1581281f0 'inbuf' 'const char *'
    |-DeclStmt 0x158128578 <line:4:2, col:22>
    | `-VarDecl 0x1581284d8 <col:2, col:16> col:10 used out 'char *' cinit
    |   `-ImplicitCastExpr 0x158128560 <col:16> 'char *' <LValueToRValue>
    |     `-DeclRefExpr 0x158128540 <col:16> 'char *' lvalue ParmVar 0x1581280f0 'outbuf' 'char *'
    |-WhileStmt 0x158143408 <line:6:2, line:42:2>
    | |-BinaryOperator 0x158128628 <line:6:9, col:16> 'int' '!='
    | | |-ImplicitCastExpr 0x158128610 <col:9, col:10> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x1581285f8 <col:9, col:10> 'char' <LValueToRValue>
    | | |   `-UnaryOperator 0x1581285c8 <col:9, col:10> 'const char' lvalue prefix '*' cannot overflow
    | | |     `-ImplicitCastExpr 0x1581285b0 <col:10> 'const char *' <LValueToRValue>
    | | |       `-DeclRefExpr 0x158128590 <col:10> 'const char *' lvalue Var 0x158128408 'in' 'const char *'
    | | `-CharacterLiteral 0x1581285e0 <col:16> 'int' 0
    | `-CompoundStmt 0x1581433f0 <col:22, line:42:2>
    |   `-IfStmt 0x1581433c0 <line:7:3, line:41:3> has_else
    |     |-CallExpr 0x158140a18 <line:7:7, col:19> 'int'
    |     | |-ImplicitCastExpr 0x158140a00 <col:7> 'int (*)()' <FunctionToPointerDecay>
    |     | | `-DeclRefExpr 0x158128760 <col:7> 'int ()' Function 0x1581286a8 'IS_ASCII' 'int ()'
    |     | `-ImplicitCastExpr 0x158140a58 <col:16, col:17> 'int' <IntegralCast>
    |     |   `-ImplicitCastExpr 0x158140a40 <col:16, col:17> 'char' <LValueToRValue>
    |     |     `-UnaryOperator 0x1581287b8 <col:16, col:17> 'const char' lvalue prefix '*' cannot overflow
    |     |       `-ImplicitCastExpr 0x1581287a0 <col:17> 'const char *' <LValueToRValue>
    |     |         `-DeclRefExpr 0x158128780 <col:17> 'const char *' lvalue Var 0x158128408 'in' 'const char *'
    |     |-CompoundStmt 0x158140b48 <col:22, line:9:3>
    |     | `-BinaryOperator 0x158140b28 <line:8:4, col:16> 'char' '='
    |     |   |-UnaryOperator 0x158140aa8 <col:4, col:8> 'char' lvalue prefix '*' cannot overflow
    |     |   | `-UnaryOperator 0x158140a90 <col:5, col:8> 'char *' postfix '++'
    |     |   |   `-DeclRefExpr 0x158140a70 <col:5> 'char *' lvalue Var 0x1581284d8 'out' 'char *'
    |     |   `-ImplicitCastExpr 0x158140b10 <col:13, col:16> 'char' <LValueToRValue>
    |     |     `-UnaryOperator 0x158140af8 <col:13, col:16> 'const char' lvalue prefix '*' cannot overflow
    |     |       `-UnaryOperator 0x158140ae0 <col:14, col:16> 'const char *' postfix '++'
    |     |         `-DeclRefExpr 0x158140ac0 <col:14> 'const char *' lvalue Var 0x158128408 'in' 'const char *'
    |     `-IfStmt 0x158143390 <line:9:10, line:41:3> has_else
    |       |-CallExpr 0x158140cc8 <line:9:14, col:30> 'int'
    |       | |-ImplicitCastExpr 0x158140cb0 <col:14> 'int (*)()' <FunctionToPointerDecay>
    |       | | `-DeclRefExpr 0x158140c40 <col:14> 'int ()' Function 0x158140b88 'issjiskanji1' 'int ()'
    |       | `-ImplicitCastExpr 0x158140d08 <col:27, col:28> 'int' <IntegralCast>
    |       |   `-ImplicitCastExpr 0x158140cf0 <col:27, col:28> 'char' <LValueToRValue>
    |       |     `-UnaryOperator 0x158140c98 <col:27, col:28> 'const char' lvalue prefix '*' cannot overflow
    |       |       `-ImplicitCastExpr 0x158140c80 <col:28> 'const char *' <LValueToRValue>
    |       |         `-DeclRefExpr 0x158140c60 <col:28> 'const char *' lvalue Var 0x158128408 'in' 'const char *'
    |       |-CompoundStmt 0x158142ec8 <col:33, line:35:3>
    |       | `-IfStmt 0x158142e98 <line:10:4, line:34:4> has_else
    |       |   |-CallExpr 0x158140ee8 <line:10:8, col:30> 'int'
    |       |   | |-ImplicitCastExpr 0x158140ed0 <col:8> 'int (*)()' <FunctionToPointerDecay>
    |       |   | | `-DeclRefExpr 0x158140e00 <col:8> 'int ()' Function 0x158140d48 'issjiskanji2' 'int ()'
    |       |   | `-ImplicitCastExpr 0x158140f28 <col:21, col:29> 'int' <IntegralCast>
    |       |   |   `-ImplicitCastExpr 0x158140f10 <col:21, col:29> 'char' <LValueToRValue>
    |       |   |     `-UnaryOperator 0x158140eb8 <col:21, col:29> 'const char' lvalue prefix '*' cannot overflow
    |       |   |       `-ParenExpr 0x158140e98 <col:22, col:29> 'const char *'
    |       |   |         `-BinaryOperator 0x158140e78 <col:23, col:28> 'const char *' '+'
    |       |   |           |-ImplicitCastExpr 0x158140e60 <col:23> 'const char *' <LValueToRValue>
    |       |   |           | `-DeclRefExpr 0x158140e20 <col:23> 'const char *' lvalue Var 0x158128408 'in' 'const char *'
    |       |   |           `-IntegerLiteral 0x158140e40 <col:28> 'int' 1
    |       |   |-CompoundStmt 0x158142a10 <col:33, line:27:4>
    |       |   | |-DeclStmt 0x158141020 <line:11:5, col:22>
    |       |   | | `-VarDecl 0x158140f50 <col:5, col:20> col:12 used out1 'char' cinit
    |       |   | |   `-ImplicitCastExpr 0x158141008 <col:19, col:20> 'char' <LValueToRValue>
    |       |   | |     `-UnaryOperator 0x158140ff0 <col:19, col:20> 'const char' lvalue prefix '*' cannot overflow
    |       |   | |       `-ImplicitCastExpr 0x158140fd8 <col:20> 'const char *' <LValueToRValue>
    |       |   | |         `-DeclRefExpr 0x158140fb8 <col:20> 'const char *' lvalue Var 0x158128408 'in' 'const char *'
    |       |   | |-DeclStmt 0x158141178 <line:12:5, col:28>
    |       |   | | `-VarDecl 0x158141048 <col:5, col:27> col:12 used out2 'char' cinit
    |       |   | |   `-ImplicitCastExpr 0x158141160 <col:19, col:27> 'char' <LValueToRValue>
    |       |   | |     `-UnaryOperator 0x158141148 <col:19, col:27> 'const char' lvalue prefix '*' cannot overflow
    |       |   | |       `-ParenExpr 0x158141128 <col:20, col:27> 'const char *'
    |       |   | |         `-BinaryOperator 0x158141108 <col:21, col:26> 'const char *' '+'
    |       |   | |           |-ImplicitCastExpr 0x1581410f0 <col:21> 'const char *' <LValueToRValue>
    |       |   | |           | `-DeclRefExpr 0x1581410b0 <col:21> 'const char *' lvalue Var 0x158128408 'in' 'const char *'
    |       |   | |           `-IntegerLiteral 0x1581410d0 <col:26> 'int' 1
    |       |   | |-DeclStmt 0x158141208 <line:13:5, col:15>
    |       |   | | `-VarDecl 0x1581411a0 <col:5, col:12> col:12 used row 'char'
    |       |   | |-BinaryOperator 0x158141358 <line:15:5, col:32> 'char' '='
    |       |   | | |-DeclRefExpr 0x158141220 <col:5> 'char' lvalue Var 0x1581411a0 'row' 'char'
    |       |   | | `-ImplicitCastExpr 0x158141340 <col:11, col:32> 'char' <IntegralCast>
    |       |   | |   `-ConditionalOperator 0x158141310 <col:11, col:32> 'int'
    |       |   | |     |-BinaryOperator 0x1581412b0 <col:11, col:18> 'int' '<'
    |       |   | |     | |-ImplicitCastExpr 0x158141298 <col:11> 'int' <IntegralCast>
    |       |   | |     | | `-ImplicitCastExpr 0x158141280 <col:11> 'char' <LValueToRValue>
    |       |   | |     | |   `-DeclRefExpr 0x158141240 <col:11> 'char' lvalue Var 0x158140f50 'out1' 'char'
    |       |   | |     | `-IntegerLiteral 0x158141260 <col:18> 'int' 160
    |       |   | |     |-IntegerLiteral 0x1581412d0 <col:25> 'int' 112
    |       |   | |     `-IntegerLiteral 0x1581412f0 <col:32> 'int' 176
    |       |   | |-IfStmt 0x158141938 <line:16:5, line:22:5> has_else
    |       |   | | |-BinaryOperator 0x1581413e8 <line:16:9, col:16> 'int' '<'
    |       |   | | | |-ImplicitCastExpr 0x1581413d0 <col:9> 'int' <IntegralCast>
    |       |   | | | | `-ImplicitCastExpr 0x1581413b8 <col:9> 'char' <LValueToRValue>
    |       |   | | | |   `-DeclRefExpr 0x158141378 <col:9> 'char' lvalue Var 0x158141048 'out2' 'char'
    |       |   | | | `-IntegerLiteral 0x158141398 <col:16> 'int' 159
    |       |   | | |-CompoundStmt 0x158141710 <col:22, line:19:5>
    |       |   | | | |-BinaryOperator 0x1581415a0 <line:17:6, col:32> 'char' '='
    |       |   | | | | |-DeclRefExpr 0x158141408 <col:6> 'char' lvalue Var 0x158140f50 'out1' 'char'
    |       |   | | | | `-ImplicitCastExpr 0x158141588 <col:13, col:32> 'char' <IntegralCast>
    |       |   | | | |   `-BinaryOperator 0x158141568 <col:13, col:32> 'int' '-'
    |       |   | | | |     |-BinaryOperator 0x158141528 <col:13, col:28> 'int' '*'
    |       |   | | | |     | |-ParenExpr 0x1581414e8 <col:13, col:24> 'int'
    |       |   | | | |     | | `-BinaryOperator 0x1581414c8 <col:14, col:21> 'int' '-'
    |       |   | | | |     | |   |-ImplicitCastExpr 0x158141480 <col:14> 'int' <IntegralCast>
    |       |   | | | |     | |   | `-ImplicitCastExpr 0x158141468 <col:14> 'char' <LValueToRValue>
    |       |   | | | |     | |   |   `-DeclRefExpr 0x158141428 <col:14> 'char' lvalue Var 0x158140f50 'out1' 'char'
    |       |   | | | |     | |   `-ImplicitCastExpr 0x1581414b0 <col:21> 'int' <IntegralCast>
    |       |   | | | |     | |     `-ImplicitCastExpr 0x158141498 <col:21> 'char' <LValueToRValue>
    |       |   | | | |     | |       `-DeclRefExpr 0x158141448 <col:21> 'char' lvalue Var 0x1581411a0 'row' 'char'
    |       |   | | | |     | `-IntegerLiteral 0x158141508 <col:28> 'int' 2
    |       |   | | | |     `-IntegerLiteral 0x158141548 <col:32> 'int' 1
    |       |   | | | `-CompoundAssignOperator 0x1581416e0 <line:18:6, col:35> 'char' '-=' ComputeLHSTy='int' ComputeResultTy='int'
    |       |   | | |   |-DeclRefExpr 0x1581415c0 <col:6> 'char' lvalue Var 0x158141048 'out2' 'char'
    |       |   | | |   `-ConditionalOperator 0x1581416b0 <col:14, col:35> 'int'
    |       |   | | |     |-BinaryOperator 0x158141650 <col:14, col:21> 'int' '>'
    |       |   | | |     | |-ImplicitCastExpr 0x158141638 <col:14> 'int' <IntegralCast>
    |       |   | | |     | | `-ImplicitCastExpr 0x158141620 <col:14> 'char' <LValueToRValue>
    |       |   | | |     | |   `-DeclRefExpr 0x1581415e0 <col:14> 'char' lvalue Var 0x158141048 'out2' 'char'
    |       |   | | |     | `-IntegerLiteral 0x158141600 <col:21> 'int' 127
    |       |   | | |     |-IntegerLiteral 0x158141670 <col:28> 'int' 32
    |       |   | | |     `-IntegerLiteral 0x158141690 <col:35> 'int' 31
    |       |   | | `-CompoundStmt 0x158141918 <line:19:12, line:22:5>
    |       |   | |   |-BinaryOperator 0x158141888 <line:20:6, col:28> 'char' '='
    |       |   | |   | |-DeclRefExpr 0x158141730 <col:6> 'char' lvalue Var 0x158140f50 'out1' 'char'
    |       |   | |   | `-ImplicitCastExpr 0x158141870 <col:13, col:28> 'char' <IntegralCast>
    |       |   | |   |   `-BinaryOperator 0x158141850 <col:13, col:28> 'int' '*'
    |       |   | |   |     |-ParenExpr 0x158141810 <col:13, col:24> 'int'
    |       |   | |   |     | `-BinaryOperator 0x1581417f0 <col:14, col:21> 'int' '-'
    |       |   | |   |     |   |-ImplicitCastExpr 0x1581417a8 <col:14> 'int' <IntegralCast>
    |       |   | |   |     |   | `-ImplicitCastExpr 0x158141790 <col:14> 'char' <LValueToRValue>
    |       |   | |   |     |   |   `-DeclRefExpr 0x158141750 <col:14> 'char' lvalue Var 0x158140f50 'out1' 'char'
    |       |   | |   |     |   `-ImplicitCastExpr 0x1581417d8 <col:21> 'int' <IntegralCast>
    |       |   | |   |     |     `-ImplicitCastExpr 0x1581417c0 <col:21> 'char' <LValueToRValue>
    |       |   | |   |     |       `-DeclRefExpr 0x158141770 <col:21> 'char' lvalue Var 0x1581411a0 'row' 'char'
    |       |   | |   |     `-IntegerLiteral 0x158141830 <col:28> 'int' 2
    |       |   | |   `-CompoundAssignOperator 0x1581418e8 <line:21:6, col:14> 'char' '-=' ComputeLHSTy='int' ComputeResultTy='int'
    |       |   | |     |-DeclRefExpr 0x1581418a8 <col:6> 'char' lvalue Var 0x158141048 'out2' 'char'
    |       |   | |     `-IntegerLiteral 0x1581418c8 <col:14> 'int' 126
    |       |   | |-BinaryOperator 0x158142868 <line:24:5, col:21> 'char' '='
    |       |   | | |-UnaryOperator 0x1581419a0 <col:5, col:9> 'char' lvalue prefix '*' cannot overflow
    |       |   | | | `-UnaryOperator 0x158141988 <col:6, col:9> 'char *' postfix '++'
    |       |   | | |   `-DeclRefExpr 0x158141968 <col:6> 'char *' lvalue Var 0x1581284d8 'out' 'char *'
    |       |   | | `-ImplicitCastExpr 0x158142850 <col:14, col:21> 'char' <IntegralCast>
    |       |   | |   `-BinaryOperator 0x158142830 <col:14, col:21> 'int' '|'
    |       |   | |     |-ImplicitCastExpr 0x158142818 <col:14> 'int' <IntegralCast>
    |       |   | |     | `-ImplicitCastExpr 0x158142800 <col:14> 'char' <LValueToRValue>
    |       |   | |     |   `-DeclRefExpr 0x1581419b8 <col:14> 'char' lvalue Var 0x158140f50 'out1' 'char'
    |       |   | |     `-IntegerLiteral 0x1581419d8 <col:21> 'int' 128
    |       |   | |-BinaryOperator 0x158142980 <line:25:5, col:21> 'char' '='
    |       |   | | |-UnaryOperator 0x1581428c0 <col:5, col:9> 'char' lvalue prefix '*' cannot overflow
    |       |   | | | `-UnaryOperator 0x1581428a8 <col:6, col:9> 'char *' postfix '++'
    |       |   | | |   `-DeclRefExpr 0x158142888 <col:6> 'char *' lvalue Var 0x1581284d8 'out' 'char *'
    |       |   | | `-ImplicitCastExpr 0x158142968 <col:14, col:21> 'char' <IntegralCast>
    |       |   | |   `-BinaryOperator 0x158142948 <col:14, col:21> 'int' '|'
    |       |   | |     |-ImplicitCastExpr 0x158142930 <col:14> 'int' <IntegralCast>
    |       |   | |     | `-ImplicitCastExpr 0x158142918 <col:14> 'char' <LValueToRValue>
    |       |   | |     |   `-DeclRefExpr 0x1581428d8 <col:14> 'char' lvalue Var 0x158141048 'out2' 'char'
    |       |   | |     `-IntegerLiteral 0x1581428f8 <col:21> 'int' 128
    |       |   | `-CompoundAssignOperator 0x1581429e0 <line:26:5, col:11> 'const char *' '+=' ComputeLHSTy='const char *' ComputeResultTy='const char *'
    |       |   |   |-DeclRefExpr 0x1581429a0 <col:5> 'const char *' lvalue Var 0x158128408 'in' 'const char *'
    |       |   |   `-IntegerLiteral 0x1581429c0 <col:11> 'int' 2
    |       |   `-CompoundStmt 0x158142e70 <line:27:11, line:34:4>
    |       |     |-BinaryOperator 0x158142b08 <line:28:5, col:14> 'char' contains-errors '='
    |       |     | |-UnaryOperator 0x158142a98 <col:5, col:9> 'char' lvalue prefix '*' cannot overflow
    |       |     | | `-UnaryOperator 0x158142a80 <col:6, col:9> 'char *' postfix '++'
    |       |     | |   `-DeclRefExpr 0x158142a60 <col:6> 'char *' lvalue Var 0x1581284d8 'out' 'char *'
    |       |     | `-RecoveryExpr 0x158142ae8 <col:14> '<dependent type>' contains-errors lvalue
    |       |     |-UnaryOperator 0x158142b48 <line:29:5, col:7> 'const char *' postfix '++'
    |       |     | `-DeclRefExpr 0x158142b28 <col:5> 'const char *' lvalue Var 0x158128408 'in' 'const char *'
    |       |     `-IfStmt 0x158142e50 <line:30:5, line:33:5>
    |       |       |-BinaryOperator 0x158142d10 <line:30:9, col:37> 'int' '&&'
    |       |       | |-BinaryOperator 0x158142bf8 <col:9, col:16> 'int' '!='
    |       |       | | |-ImplicitCastExpr 0x158142be0 <col:9, col:10> 'int' <IntegralCast>
    |       |       | | | `-ImplicitCastExpr 0x158142bc8 <col:9, col:10> 'char' <LValueToRValue>
    |       |       | | |   `-UnaryOperator 0x158142b98 <col:9, col:10> 'const char' lvalue prefix '*' cannot overflow
    |       |       | | |     `-ImplicitCastExpr 0x158142b80 <col:10> 'const char *' <LValueToRValue>
    |       |       | | |       `-DeclRefExpr 0x158142b60 <col:10> 'const char *' lvalue Var 0x158128408 'in' 'const char *'
    |       |       | | `-CharacterLiteral 0x158142bb0 <col:16> 'int' 0
    |       |       | `-UnaryOperator 0x158142cf8 <col:24, col:37> 'int' prefix '!' cannot overflow
    |       |       |   `-CallExpr 0x158142ca0 <col:25, col:37> 'int'
    |       |       |     |-ImplicitCastExpr 0x158142c88 <col:25> 'int (*)()' <FunctionToPointerDecay>
    |       |       |     | `-DeclRefExpr 0x158142c18 <col:25> 'int ()' Function 0x1581286a8 'IS_ASCII' 'int ()'
    |       |       |     `-ImplicitCastExpr 0x158142ce0 <col:34, col:35> 'int' <IntegralCast>
    |       |       |       `-ImplicitCastExpr 0x158142cc8 <col:34, col:35> 'char' <LValueToRValue>
    |       |       |         `-UnaryOperator 0x158142c70 <col:34, col:35> 'const char' lvalue prefix '*' cannot overflow
    |       |       |           `-ImplicitCastExpr 0x158142c58 <col:35> 'const char *' <LValueToRValue>
    |       |       |             `-DeclRefExpr 0x158142c38 <col:35> 'const char *' lvalue Var 0x158128408 'in' 'const char *'
    |       |       `-CompoundStmt 0x158142e30 <col:40, line:33:5>
    |       |         |-BinaryOperator 0x158142dd8 <line:31:6, col:15> 'char' contains-errors '='
    |       |         | |-UnaryOperator 0x158142d68 <col:6, col:10> 'char' lvalue prefix '*' cannot overflow
    |       |         | | `-UnaryOperator 0x158142d50 <col:7, col:10> 'char *' postfix '++'
    |       |         | |   `-DeclRefExpr 0x158142d30 <col:7> 'char *' lvalue Var 0x1581284d8 'out' 'char *'
    |       |         | `-RecoveryExpr 0x158142db8 <col:15> '<dependent type>' contains-errors lvalue
    |       |         `-UnaryOperator 0x158142e18 <line:32:6, col:8> 'const char *' postfix '++'
    |       |           `-DeclRefExpr 0x158142df8 <col:6> 'const char *' lvalue Var 0x158128408 'in' 'const char *'
    |       `-IfStmt 0x158143360 <line:35:10, line:41:3> has_else
    |         |-CallExpr 0x158143048 <line:35:14, col:30> 'int'
    |         | |-ImplicitCastExpr 0x158143030 <col:14> 'int (*)()' <FunctionToPointerDecay>
    |         | | `-DeclRefExpr 0x158142fc0 <col:14> 'int ()' Function 0x158142f08 'issjishwkana' 'int ()'
    |         | `-ImplicitCastExpr 0x158143088 <col:27, col:28> 'int' <IntegralCast>
    |         |   `-ImplicitCastExpr 0x158143070 <col:27, col:28> 'char' <LValueToRValue>
    |         |     `-UnaryOperator 0x158143018 <col:27, col:28> 'const char' lvalue prefix '*' cannot overflow
    |         |       `-ImplicitCastExpr 0x158143000 <col:28> 'const char *' <LValueToRValue>
    |         |         `-DeclRefExpr 0x158142fe0 <col:28> 'const char *' lvalue Var 0x158128408 'in' 'const char *'
    |         |-CompoundStmt 0x158143220 <col:33, line:38:3>
    |         | |-BinaryOperator 0x158143128 <line:36:4, col:13> 'char' '='
    |         | | |-UnaryOperator 0x1581430d8 <col:4, col:8> 'char' lvalue prefix '*' cannot overflow
    |         | | | `-UnaryOperator 0x1581430c0 <col:5, col:8> 'char *' postfix '++'
    |         | | |   `-DeclRefExpr 0x1581430a0 <col:5> 'char *' lvalue Var 0x1581284d8 'out' 'char *'
    |         | | `-ImplicitCastExpr 0x158143110 <col:13> 'char' <IntegralCast>
    |         | |   `-IntegerLiteral 0x1581430f0 <col:13> 'int' 142
    |         | `-BinaryOperator 0x158143200 <line:37:4, col:16> 'char' '='
    |         |   |-UnaryOperator 0x158143180 <col:4, col:8> 'char' lvalue prefix '*' cannot overflow
    |         |   | `-UnaryOperator 0x158143168 <col:5, col:8> 'char *' postfix '++'
    |         |   |   `-DeclRefExpr 0x158143148 <col:5> 'char *' lvalue Var 0x1581284d8 'out' 'char *'
    |         |   `-ImplicitCastExpr 0x1581431e8 <col:13, col:16> 'char' <LValueToRValue>
    |         |     `-UnaryOperator 0x1581431d0 <col:13, col:16> 'const char' lvalue prefix '*' cannot overflow
    |         |       `-UnaryOperator 0x1581431b8 <col:14, col:16> 'const char *' postfix '++'
    |         |         `-DeclRefExpr 0x158143198 <col:14> 'const char *' lvalue Var 0x158128408 'in' 'const char *'
    |         `-CompoundStmt 0x158143340 <line:38:10, line:41:3>
    |           |-BinaryOperator 0x1581432e8 <line:39:4, col:13> 'char' contains-errors '='
    |           | |-UnaryOperator 0x158143278 <col:4, col:8> 'char' lvalue prefix '*' cannot overflow
    |           | | `-UnaryOperator 0x158143260 <col:5, col:8> 'char *' postfix '++'
    |           | |   `-DeclRefExpr 0x158143240 <col:5> 'char *' lvalue Var 0x1581284d8 'out' 'char *'
    |           | `-RecoveryExpr 0x1581432c8 <col:13> '<dependent type>' contains-errors lvalue
    |           `-UnaryOperator 0x158143328 <line:40:4, col:6> 'const char *' postfix '++'
    |             `-DeclRefExpr 0x158143308 <col:4> 'const char *' lvalue Var 0x158128408 'in' 'const char *'
    |-BinaryOperator 0x1581434a8 <line:44:2, col:9> 'char' '='
    | |-UnaryOperator 0x158143460 <col:2, col:3> 'char' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x158143448 <col:3> 'char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x158143428 <col:3> 'char *' lvalue Var 0x1581284d8 'out' 'char *'
    | `-ImplicitCastExpr 0x158143490 <col:9> 'char' <IntegralCast>
    |   `-CharacterLiteral 0x158143478 <col:9> 'int' 0
    `-ReturnStmt 0x1581434e8 <line:45:2, col:9>
      `-IntegerLiteral 0x1581434c8 <col:9> 'int' 0
