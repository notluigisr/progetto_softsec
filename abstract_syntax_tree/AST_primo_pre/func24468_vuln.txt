`-FunctionDecl 0x146928ee0  line:1:6 invalid _xml_characterDataHandler 'void (void *, const int *, int)'
  |-ParmVarDecl 0x146928cd8 <col:32, col:38> col:38 userData 'void *'
  |-ParmVarDecl 0x146928d70 <col:48, col:64> col:64 invalid s 'const int *'
  |-ParmVarDecl 0x146928df0 <col:67, col:71> col:71 used len 'int'
  `-CompoundStmt 0x146944f00 <line:2:1, line:93:1>
    `-IfStmt 0x146944ee0 <line:5:2, line:92:2>
      |-RecoveryExpr 0x146928fe8 <line:5:6> '<dependent type>' contains-errors lvalue
      `-CompoundStmt 0x146944ec0 <col:14, line:92:2>
        |-IfStmt 0x1469429a8 <line:8:3, line:14:3>
        | |-CXXDependentScopeMemberExpr 0x1469290d8 <line:8:7, col:15> '<dependent type>' contains-errors lvalue ->characterDataHandler
        | | `-RecoveryExpr 0x1469290b8 <col:7> '<dependent type>' contains-errors lvalue
        | `-CompoundStmt 0x146942990 <col:37, line:14:3>
        |   `-IfStmt 0x146942970 <line:11:4, line:13:4>
        |     |-RecoveryExpr 0x146942840 <line:11:8, col:107> '_Bool' contains-errors
        |     `-CompoundStmt 0x146942960 <col:110, line:13:4>
        `-IfStmt 0x146944ea0 <line:16:3, line:91:3>
          |-RecoveryExpr 0x1469429c8 <line:16:7, col:15> '_Bool' contains-errors
          `-CompoundStmt 0x146944e60 <col:21, line:91:3>
            |-DeclStmt 0x146942a68 <line:17:4, col:9>
            | `-VarDecl 0x146942a00 <col:4, col:8> col:8 used i 'int'
            |-DeclStmt 0x146942b20 <line:18:4, col:19>
            | `-VarDecl 0x146942a98 <col:4, col:18> col:8 used doprint 'int' cinit
            |   `-IntegerLiteral 0x146942b00 <col:18> 'int' 0
            |-DeclStmt 0x146942bb8 <line:20:4, col:23>
            | `-VarDecl 0x146942b50 <col:4, col:10> col:10 used decoded_value 'char *'
            |-DeclStmt 0x146942c50 <line:21:4, col:19>
            | `-VarDecl 0x146942be8 <col:4, col:8> col:8 used decoded_len 'int'
            |-ForStmt 0x1469432a0 <line:24:4, line:37:4>
            | |-BinaryOperator 0x146942e78 <line:24:9, col:13> 'int' '='
            | | |-DeclRefExpr 0x146942e38 <col:9> 'int' lvalue Var 0x146942a00 'i' 'int'
            | | `-IntegerLiteral 0x146942e58 <col:13> 'int' 0
            | |-<<<NULL>>>
            | |-BinaryOperator 0x146942f08 <col:16, col:20> 'int' '<'
            | | |-ImplicitCastExpr 0x146942ed8 <col:16> 'int' <LValueToRValue>
            | | | `-DeclRefExpr 0x146942e98 <col:16> 'int' lvalue Var 0x146942a00 'i' 'int'
            | | `-ImplicitCastExpr 0x146942ef0 <col:20> 'int' <LValueToRValue>
            | |   `-DeclRefExpr 0x146942eb8 <col:20> 'int' lvalue Var 0x146942be8 'decoded_len' 'int'
            | |-UnaryOperator 0x146942f48 <col:33, col:34> 'int' postfix '++'
            | | `-DeclRefExpr 0x146942f28 <col:33> 'int' lvalue Var 0x146942a00 'i' 'int'
            | `-CompoundStmt 0x146943280 <col:38, line:37:4>
            |   |-SwitchStmt 0x146943020 <line:25:5, line:33:5>
            |   | |-ImplicitCastExpr 0x146943008 <line:25:13, col:28> 'int' <IntegralCast>
            |   | | `-ImplicitCastExpr 0x146942ff0 <col:13, col:28> 'char' <LValueToRValue>
            |   | |   `-ArraySubscriptExpr 0x146942fd0 <col:13, col:28> 'char' lvalue
            |   | |     |-ImplicitCastExpr 0x146942fa0 <col:13> 'char *' <LValueToRValue>
            |   | |     | `-DeclRefExpr 0x146942f60 <col:13> 'char *' lvalue Var 0x146942b50 'decoded_value' 'char *'
            |   | |     `-ImplicitCastExpr 0x146942fb8 <col:27> 'int' <LValueToRValue>
            |   | |       `-DeclRefExpr 0x146942f80 <col:27> 'int' lvalue Var 0x146942a00 'i' 'int'
            |   | `-CompoundStmt 0x1469431e0 <col:31, line:33:5>
            |   |   |-CaseStmt 0x146943078 <line:26:5, line:29:6>
            |   |   | |-ConstantExpr 0x146943060 <line:26:10> 'int'
            |   |   | | `-CharacterLiteral 0x146943048 <col:10> 'int' 32
            |   |   | `-CaseStmt 0x1469430d0 <line:27:5, line:29:6>
            |   |   |   |-ConstantExpr 0x1469430b8 <line:27:10> 'int'
            |   |   |   | `-CharacterLiteral 0x1469430a0 <col:10> 'int' 9
            |   |   |   `-CaseStmt 0x146943128 <line:28:5, line:29:6>
            |   |   |     |-ConstantExpr 0x146943110 <line:28:10> 'int'
            |   |   |     | `-CharacterLiteral 0x1469430f8 <col:10> 'int' 10
            |   |   |     `-ContinueStmt 0x146943150 <line:29:6>
            |   |   |-DefaultStmt 0x1469431b8 <line:30:5, line:31:16>
            |   |   | `-BinaryOperator 0x146943198 <col:6, col:16> 'int' '='
            |   |   |   |-DeclRefExpr 0x146943158 <col:6> 'int' lvalue Var 0x146942a98 'doprint' 'int'
            |   |   |   `-IntegerLiteral 0x146943178 <col:16> 'int' 1
            |   |   `-BreakStmt 0x1469431d8 <line:32:6>
            |   `-IfStmt 0x146943260 <line:34:5, line:36:5>
            |     |-ImplicitCastExpr 0x146943228 <line:34:9> 'int' <LValueToRValue>
            |     | `-DeclRefExpr 0x146943208 <col:9> 'int' lvalue Var 0x146942a98 'doprint' 'int'
            |     `-CompoundStmt 0x146943248 <col:18, line:36:5>
            |       `-BreakStmt 0x146943240 <line:35:6>
            `-IfStmt 0x146944e30 <line:38:4, line:90:4> has_else
              |-RecoveryExpr 0x1469432f8 <line:38:8, col:39> '_Bool' contains-errors
              |-CompoundStmt 0x146944648 <col:42, line:88:4>
              | `-IfStmt 0x146944618 <line:39:5, line:87:5> has_else
              |   |-RecoveryExpr 0x146943318 <line:39:9, col:17> '_Bool' contains-errors
              |   |-CompoundStmt 0x146943a60 <col:30, line:53:5>
              |   `-CompoundStmt 0x146944600 <col:12, line:87:5>
              |     `-IfStmt 0x146943e40 <line:60:6, line:73:6>
              |       |-RecoveryExpr 0x146943d90 <line:60:10, col:111> '_Bool' contains-errors
              |       `-CompoundStmt 0x146943e30 <col:114, line:73:6>
              `-CompoundStmt 0x146944e18 <line:88:11, line:90:4>
                `-CallExpr 0x1469447c8 <line:89:5, col:24> 'int'
                  |-ImplicitCastExpr 0x1469447b0 <col:5> 'int (*)()' <FunctionToPointerDecay>
                  | `-DeclRefExpr 0x146944740 <col:5> 'int ()' Function 0x146944688 'efree' 'int ()'
                  `-ImplicitCastExpr 0x146944e00 <col:11> 'char *' <LValueToRValue>
                    `-DeclRefExpr 0x146944760 <col:11> 'char *' lvalue Var 0x146942b50 'decoded_value' 'char *'
