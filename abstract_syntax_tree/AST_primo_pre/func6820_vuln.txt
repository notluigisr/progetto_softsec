`-FunctionDecl 0x14800dfe8  line:1:1 invalid function_call 'int (int, int *, int)'
  |-ParmVarDecl 0x14800dcd8 <col:15, col:19> col:19 used argc 'int'
  |-ParmVarDecl 0x14800de20 <col:25, col:36> col:31 invalid argv 'int *'
  |-ParmVarDecl 0x14800dea0 <col:39, col:45> col:45 invalid self 'int'
  `-CompoundStmt 0x14802d170 <line:2:1, line:63:1>
    |-DeclStmt 0x1480276b8 <line:3:5, col:44>
    | |-RecordDecl 0x14800e0a8 <col:5, col:12> col:12 struct nogvl_ffi_call_args
    | `-VarDecl 0x14800e1a8 <col:5, col:32> col:32 referenced invalid args 'struct nogvl_ffi_call_args'
    |-DeclStmt 0x148027768 <line:6:5, col:10>
    | `-VarDecl 0x148027700 <col:5, col:9> col:9 used i 'int'
    |-CallExpr 0x148027e90 <line:13:5, col:31> 'int'
    | |-ImplicitCastExpr 0x148027e78 <col:5> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x148027e18 <col:5> 'int ()' Function 0x148027d60 'Check_Max_Args' 'int ()'
    | |-ImplicitCastExpr 0x148027ec0 <col:20> 'char *' <ArrayToPointerDecay>
    | | `-StringLiteral 0x148027e38 <col:20> 'char[4]' lvalue "STR"
    | `-ImplicitCastExpr 0x148027ed8 <col:27> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x148027e58 <col:27> 'int' lvalue ParmVar 0x14800dcd8 'argc' 'int'
    |-IfStmt 0x1480282c0 <line:14:5, line:16:5>
    | |-RecoveryExpr 0x148028090 <line:14:9, col:42> '_Bool' contains-errors
    | `-CompoundStmt 0x1480282a8 <col:45, line:16:5>
    |   `-CallExpr 0x148028228 <line:15:2, col:27> 'int'
    |     |-ImplicitCastExpr 0x148028210 <col:2> 'int (*)()' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x148028190 <col:2> 'int ()' Function 0x1480280d8 'rb_error_arity' 'int ()'
    |     |-ImplicitCastExpr 0x148028260 <col:17> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x1480281b0 <col:17> 'int' lvalue ParmVar 0x14800dcd8 'argc' 'int'
    |     |-ImplicitCastExpr 0x148028278 <col:23> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x1480281d0 <col:23> 'int' lvalue Var 0x148027700 'i' 'int'
    |     `-ImplicitCastExpr 0x148028290 <col:26> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x1480281f0 <col:26> 'int' lvalue Var 0x148027700 'i' 'int'
    |-IfStmt 0x14802a1e0 <line:20:5, line:27:5>
    | |-BinaryOperator 0x148029dc0 <line:20:9, col:28> 'int' '>='
    | | |-CallExpr 0x148029d80 <col:9, col:23> 'int'
    | | | `-ImplicitCastExpr 0x148029d68 <col:9> 'int (*)()' <FunctionToPointerDecay>
    | | |   `-DeclRefExpr 0x148029d48 <col:9> 'int ()' Function 0x148029c90 'rb_safe_level' 'int ()'
    | | `-IntegerLiteral 0x148029da0 <col:28> 'int' 1
    | `-CompoundStmt 0x14802a1c8 <col:31, line:27:5>
    |   `-ForStmt 0x14802a190 <line:21:2, line:26:2>
    |     |-BinaryOperator 0x148029e20 <line:21:7, col:11> 'int' '='
    |     | |-DeclRefExpr 0x148029de0 <col:7> 'int' lvalue Var 0x148027700 'i' 'int'
    |     | `-IntegerLiteral 0x148029e00 <col:11> 'int' 0
    |     |-<<<NULL>>>
    |     |-BinaryOperator 0x148029eb0 <col:14, col:18> 'int' '<'
    |     | |-ImplicitCastExpr 0x148029e80 <col:14> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x148029e40 <col:14> 'int' lvalue Var 0x148027700 'i' 'int'
    |     | `-ImplicitCastExpr 0x148029e98 <col:18> 'int' <LValueToRValue>
    |     |   `-DeclRefExpr 0x148029e60 <col:18> 'int' lvalue ParmVar 0x14800dcd8 'argc' 'int'
    |     |-UnaryOperator 0x148029ef0 <col:24, col:25> 'int' postfix '++'
    |     | `-DeclRefExpr 0x148029ed0 <col:24> 'int' lvalue Var 0x148027700 'i' 'int'
    |     `-CompoundStmt 0x14802a178 <col:29, line:26:2>
    |       `-IfStmt 0x14802a158 <line:23:6, line:25:6>
    |         |-RecoveryExpr 0x14802a008 <line:23:10, col:25> '_Bool' contains-errors
    |         `-CompoundStmt 0x14802a148 <col:28, line:25:6>
    |-ForStmt 0x14802c800 <line:34:5, line:49:5>
    | |-BinaryOperator 0x14802a480 <line:34:10, col:14> 'int' '='
    | | |-DeclRefExpr 0x14802a440 <col:10> 'int' lvalue Var 0x148027700 'i' 'int'
    | | `-IntegerLiteral 0x14802a460 <col:14> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x14802a510 <col:17, col:21> 'int' '<'
    | | |-ImplicitCastExpr 0x14802a4e0 <col:17> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x14802a4a0 <col:17> 'int' lvalue Var 0x148027700 'i' 'int'
    | | `-ImplicitCastExpr 0x14802a4f8 <col:21> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x14802a4c0 <col:21> 'int' lvalue ParmVar 0x14800dcd8 'argc' 'int'
    | |-UnaryOperator 0x14802a550 <col:27, col:28> 'int' postfix '++'
    | | `-DeclRefExpr 0x14802a530 <col:27> 'int' lvalue Var 0x148027700 'i' 'int'
    | `-CompoundStmt 0x14802c7e8 <col:32, line:49:5>
    |   `-IfStmt 0x14802c568 <line:38:2, line:45:2>
    |     |-RecoveryExpr 0x14802a668 <line:38:5, col:22> '_Bool' contains-errors
    |     `-CompoundStmt 0x14802c550 <col:34, line:45:2>
    |       `-IfStmt 0x14802c420 <line:39:6, line:43:6> has_else
    |         |-RecoveryExpr 0x14802a788 <line:39:9, col:18> '_Bool' contains-errors
    |         |-CompoundStmt 0x14802a908 <col:21, line:41:6>
    |         `-IfStmt 0x14802c400 <col:13, line:43:6>
    |           |-RecoveryExpr 0x14802aa18 <line:41:16, col:40> '_Bool' contains-errors
    |           `-CompoundStmt 0x14802abf0 <col:43, line:43:6>
    `-ReturnStmt 0x14802d160 <line:62:5, col:61>
      `-CallExpr 0x14802d130 <col:12, col:61> '<dependent type>' contains-errors
        |-DeclRefExpr 0x14802d018 <col:12> 'int ()' Function 0x14802cf60 'GENERIC2VALUE' 'int ()'
        |-CallExpr 0x14802d098 <col:26, col:47> '<dependent type>' contains-errors
        | |-DeclRefExpr 0x14802d038 <col:26> 'int ()' Function 0x148027828 'rb_iv_get' 'int ()'
        | |-RecoveryExpr 0x14802d058 <col:36> '<dependent type>' contains-errors lvalue
        | `-StringLiteral 0x14802d078 <col:42> 'char[4]' lvalue "STR"
        `-CXXDependentScopeMemberExpr 0x14802d0e8 <col:50, col:55> '<dependent type>' contains-errors lvalue .retval
          `-RecoveryExpr 0x14802d0c8 <col:50> '<dependent type>' contains-errors lvalue
