`-FunctionDecl 0x153128528  line:1:20 invalid ConvertRGBToLCHab 'int (const double, const double, const double, double *, double *, double *)'
  |-ParmVarDecl 0x1531280f0 <col:38, col:51> col:51 used red 'const double'
  |-ParmVarDecl 0x153128170 <col:55, col:68> col:68 used green 'const double'
  |-ParmVarDecl 0x1531281f0 <line:2:3, col:16> col:16 used blue 'const double'
  |-ParmVarDecl 0x1531282a8 <col:21, col:29> col:29 used luma 'double *'
  |-ParmVarDecl 0x153128328 <col:34, col:42> col:42 used chroma 'double *'
  |-ParmVarDecl 0x1531283a8 <col:49, col:57> col:57 used hue 'double *'
  `-CompoundStmt 0x153142008 <line:3:1, line:15:1>
    |-DeclStmt 0x1531287a0 <line:4:3, line:7:6>
    | |-VarDecl 0x153128618 <line:4:3, line:5:5> col:5 used X 'double'
    | |-VarDecl 0x153128698 <line:4:3, line:6:5> col:5 used Y 'double'
    | `-VarDecl 0x153128718 <line:4:3, line:7:5> col:5 used Z 'double'
    |-CallExpr 0x153141cb8 <line:13:3, col:42> 'int'
    | |-ImplicitCastExpr 0x153141ca0 <col:3> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x153141b40 <col:3> 'int ()' Function 0x153141a88 'ConvertRGBToXYZ' 'int ()'
    | |-ImplicitCastExpr 0x153141d08 <col:19> 'double' <LValueToRValue>
    | | `-DeclRefExpr 0x153141b60 <col:19> 'const double' lvalue ParmVar 0x1531280f0 'red' 'const double'
    | |-ImplicitCastExpr 0x153141d20 <col:23> 'double' <LValueToRValue>
    | | `-DeclRefExpr 0x153141b80 <col:23> 'const double' lvalue ParmVar 0x153128170 'green' 'const double'
    | |-ImplicitCastExpr 0x153141d38 <col:29> 'double' <LValueToRValue>
    | | `-DeclRefExpr 0x153141ba0 <col:29> 'const double' lvalue ParmVar 0x1531281f0 'blue' 'const double'
    | |-UnaryOperator 0x153141be0 <col:34, col:35> 'double *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x153141bc0 <col:35> 'double' lvalue Var 0x153128618 'X' 'double'
    | |-UnaryOperator 0x153141c18 <col:37, col:38> 'double *' prefix '&' cannot overflow
    | | `-DeclRefExpr 0x153141bf8 <col:38> 'double' lvalue Var 0x153128698 'Y' 'double'
    | `-UnaryOperator 0x153141c50 <col:40, col:41> 'double *' prefix '&' cannot overflow
    |   `-DeclRefExpr 0x153141c30 <col:41> 'double' lvalue Var 0x153128718 'Z' 'double'
    `-CallExpr 0x153141f28 <line:14:3, col:42> 'int'
      |-ImplicitCastExpr 0x153141f10 <col:3> 'int (*)()' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x153141e30 <col:3> 'int ()' Function 0x153141d78 'ConvertXYZToLCHab' 'int ()'
      |-ImplicitCastExpr 0x153141f78 <col:21> 'double' <LValueToRValue>
      | `-DeclRefExpr 0x153141e50 <col:21> 'double' lvalue Var 0x153128618 'X' 'double'
      |-ImplicitCastExpr 0x153141f90 <col:23> 'double' <LValueToRValue>
      | `-DeclRefExpr 0x153141e70 <col:23> 'double' lvalue Var 0x153128698 'Y' 'double'
      |-ImplicitCastExpr 0x153141fa8 <col:25> 'double' <LValueToRValue>
      | `-DeclRefExpr 0x153141e90 <col:25> 'double' lvalue Var 0x153128718 'Z' 'double'
      |-ImplicitCastExpr 0x153141fc0 <col:27> 'double *' <LValueToRValue>
      | `-DeclRefExpr 0x153141eb0 <col:27> 'double *' lvalue ParmVar 0x1531282a8 'luma' 'double *'
      |-ImplicitCastExpr 0x153141fd8 <col:32> 'double *' <LValueToRValue>
      | `-DeclRefExpr 0x153141ed0 <col:32> 'double *' lvalue ParmVar 0x153128328 'chroma' 'double *'
      `-ImplicitCastExpr 0x153141ff0 <col:39> 'double *' <LValueToRValue>
        `-DeclRefExpr 0x153141ef0 <col:39> 'double *' lvalue ParmVar 0x1531283a8 'hue' 'double *'
