`-FunctionDecl 0x12300de88  line:1:12 invalid vp8dx_decode_bool 'int (int *, int)' static
  |-ParmVarDecl 0x12300dd28 <col:30, col:44> col:44 referenced invalid br 'int *'
  |-ParmVarDecl 0x12300dda8 <col:48, col:52> col:52 used probability 'int'
  `-CompoundStmt 0x122923df0 <col:65, line:37:1>
    |-DeclStmt 0x12300dff8 <line:2:3, col:23>
    | `-VarDecl 0x12300df58 <col:3, col:22> col:16 used bit 'unsigned int' cinit
    |   `-ImplicitCastExpr 0x12300dfe0 <col:22> 'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x12300dfc0 <col:22> 'int' 0
    |-DeclStmt 0x12300e090 <line:4:3, col:21>
    | `-VarDecl 0x12300e028 <col:3, col:16> col:16 used split 'unsigned int'
    |-DeclStmt 0x12300e128 <line:6:3, col:12>
    | `-VarDecl 0x12300e0c0 <col:3, col:7> col:7 used count 'int'
    |-DeclStmt 0x12300e1c0 <line:7:3, col:21>
    | `-VarDecl 0x12300e158 <col:3, col:16> col:16 used range 'unsigned int'
    |-BinaryOperator 0x12300e3c0 <line:9:3, col:52> 'unsigned int' contains-errors '='
    | |-DeclRefExpr 0x12300e1d8 <col:3> 'unsigned int' lvalue Var 0x12300e028 'split' 'unsigned int'
    | `-BinaryOperator 0x12300e3a0 <col:11, col:52> '<dependent type>' contains-errors '+'
    |   |-IntegerLiteral 0x12300e1f8 <col:11> 'int' 1
    |   `-ParenExpr 0x12300e380 <col:15, col:52> '<dependent type>' contains-errors
    |     `-BinaryOperator 0x12300e360 <col:16, col:51> '<dependent type>' contains-errors '>>'
    |       |-ParenExpr 0x12300e320 <col:16, col:46> '<dependent type>' contains-errors
    |       | `-BinaryOperator 0x12300e300 <col:17, col:35> '<dependent type>' contains-errors '*'
    |       |   |-ParenExpr 0x12300e2c0 <col:17, col:31> '<dependent type>' contains-errors
    |       |   | `-BinaryOperator 0x12300e2a0 <col:18, col:30> '<dependent type>' contains-errors '-'
    |       |   |   |-CXXDependentScopeMemberExpr 0x12300e238 <col:18, col:22> '<dependent type>' contains-errors lvalue ->range
    |       |   |   | `-RecoveryExpr 0x12300e218 <col:18> '<dependent type>' contains-errors lvalue
    |       |   |   `-IntegerLiteral 0x12300e280 <col:30> 'int' 1
    |       |   `-DeclRefExpr 0x12300e2e0 <col:35> 'int' lvalue ParmVar 0x12300dda8 'probability' 'int'
    |       `-IntegerLiteral 0x12300e340 <col:51> 'int' 8
    |-IfStmt 0x122923448 <line:11:3, col:48>
    | |-BinaryOperator 0x122923268 <col:7, col:19> 'int' contains-errors '<'
    | | |-CXXDependentScopeMemberExpr 0x122923200 <col:7, col:11> '<dependent type>' contains-errors lvalue ->count
    | | | `-RecoveryExpr 0x12300e3e0 <col:7> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x122923248 <col:19> 'int' 0
    | `-CallExpr 0x122923420 <col:22, col:48> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x1229233e0 <col:22> 'int ()' Function 0x122923328 'vp8dx_bool_decoder_fill' 'int ()'
    |   `-RecoveryExpr 0x122923400 <col:46> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x122923558 <line:14:3, col:15> 'int' contains-errors '='
    | |-DeclRefExpr 0x1229234d0 <col:3> 'int' lvalue Var 0x12300e0c0 'count' 'int'
    | `-CXXDependentScopeMemberExpr 0x122923510 <col:11, col:15> '<dependent type>' contains-errors lvalue ->count
    |   `-RecoveryExpr 0x1229234f0 <col:11> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x1229235e8 <line:18:3, col:11> 'unsigned int' '='
    | |-DeclRefExpr 0x122923590 <col:3> 'unsigned int' lvalue Var 0x12300e158 'range' 'unsigned int'
    | `-ImplicitCastExpr 0x1229235d0 <col:11> 'unsigned int' <LValueToRValue>
    |   `-DeclRefExpr 0x1229235b0 <col:11> 'unsigned int' lvalue Var 0x12300e028 'split' 'unsigned int'
    |-IfStmt 0x122923888 <line:20:3, line:24:3>
    | |-BinaryOperator 0x122923698 <line:20:7, col:16> 'int' contains-errors '>='
    | | |-RecoveryExpr 0x122923658 <col:7> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x122923678 <col:16> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x122923868 <col:26, line:24:3>
    |   |-BinaryOperator 0x122923780 <line:21:5, col:25> 'unsigned int' contains-errors '='
    |   | |-DeclRefExpr 0x1229236b8 <col:5> 'unsigned int' lvalue Var 0x12300e158 'range' 'unsigned int'
    |   | `-BinaryOperator 0x122923760 <col:13, col:25> '<dependent type>' contains-errors '-'
    |   |   |-CXXDependentScopeMemberExpr 0x1229236f8 <col:13, col:17> '<dependent type>' contains-errors lvalue ->range
    |   |   | `-RecoveryExpr 0x1229236d8 <col:13> '<dependent type>' contains-errors lvalue
    |   |   `-DeclRefExpr 0x122923740 <col:25> 'unsigned int' lvalue Var 0x12300e028 'split' 'unsigned int'
    |   `-BinaryOperator 0x122923848 <line:23:5, col:11> 'unsigned int' '='
    |     |-DeclRefExpr 0x1229237f0 <col:5> 'unsigned int' lvalue Var 0x12300df58 'bit' 'unsigned int'
    |     `-ImplicitCastExpr 0x122923830 <col:11> 'unsigned int' <IntegralCast>
    |       `-IntegerLiteral 0x122923810 <col:11> 'int' 1
    |-CompoundStmt 0x122923ac0 <line:26:3, line:31:3>
    | |-DeclStmt 0x122923960 <line:27:5, col:38>
    | | `-VarDecl 0x1229238c0 <col:5, col:15> col:15 used shift 'const int'
    | |-CompoundAssignOperator 0x1229239e8 <line:28:5, col:15> 'unsigned int' '<<=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    | | |-DeclRefExpr 0x122923978 <col:5> 'unsigned int' lvalue Var 0x12300e158 'range' 'unsigned int'
    | | `-ImplicitCastExpr 0x1229239d0 <col:15> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x122923998 <col:15> 'const int' lvalue Var 0x1229238c0 'shift' 'const int'
    | `-CompoundAssignOperator 0x122923a90 <line:30:5, col:14> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
    |   |-DeclRefExpr 0x122923a38 <col:5> 'int' lvalue Var 0x12300e0c0 'count' 'int'
    |   `-ImplicitCastExpr 0x122923a78 <col:14> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x122923a58 <col:14> 'const int' lvalue Var 0x1229238c0 'shift' 'const int'
    |-BinaryOperator 0x122923bd0 <line:32:3, col:15> '<dependent type>' contains-errors '='
    | |-CXXDependentScopeMemberExpr 0x122923b30 <col:3, col:7> '<dependent type>' contains-errors lvalue ->value
    | | `-RecoveryExpr 0x122923b08 <col:3> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x122923ae8 <col:3> 'int *' lvalue ParmVar 0x12300dd28 'br' 'int *'
    | `-RecoveryExpr 0x122923bb0 <col:15> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x122923ca0 <line:33:3, col:15> '<dependent type>' contains-errors '='
    | |-CXXDependentScopeMemberExpr 0x122923c38 <col:3, col:7> '<dependent type>' contains-errors lvalue ->count
    | | `-RecoveryExpr 0x122923c10 <col:3> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x122923bf0 <col:3> 'int *' lvalue ParmVar 0x12300dd28 'br' 'int *'
    | `-DeclRefExpr 0x122923c80 <col:15> 'int' lvalue Var 0x12300e0c0 'count' 'int'
    |-BinaryOperator 0x122923d70 <line:34:3, col:15> '<dependent type>' contains-errors '='
    | |-CXXDependentScopeMemberExpr 0x122923d08 <col:3, col:7> '<dependent type>' contains-errors lvalue ->range
    | | `-RecoveryExpr 0x122923ce0 <col:3> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x122923cc0 <col:3> 'int *' lvalue ParmVar 0x12300dd28 'br' 'int *'
    | `-DeclRefExpr 0x122923d50 <col:15> 'unsigned int' lvalue Var 0x12300e158 'range' 'unsigned int'
    `-ReturnStmt 0x122923de0 <line:36:3, col:10>
      `-ImplicitCastExpr 0x122923dc8 <col:10> 'int' <IntegralCast>
        `-ImplicitCastExpr 0x122923db0 <col:10> 'unsigned int' <LValueToRValue>
          `-DeclRefExpr 0x122923d90 <col:10> 'unsigned int' lvalue Var 0x12300df58 'bit' 'unsigned int'
