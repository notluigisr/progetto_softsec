`-FunctionDecl 0x11f9281a8  line:1:1 g_utf8_strchomp 'int (char *)'
  |-ParmVarDecl 0x11f9280d8 <col:18, col:24> col:24 used string 'char *'
  `-CompoundStmt 0x11f9416d0 <line:2:1, line:25:1>
    |-DeclStmt 0x11f928320 <line:3:2, col:14>
    | `-VarDecl 0x11f9282b8 <col:2, col:10> col:10 used scan 'char *'
    |-CallExpr 0x11f928580 <line:6:2, col:44> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x11f928460 <col:2> 'int ()' Function 0x11f9283a8 'g_return_val_if_fail' 'int ()'
    | |-BinaryOperator 0x11f928540 <col:24, col:34> 'int' contains-errors '!='
    | | |-DeclRefExpr 0x11f928480 <col:24> 'char *' lvalue ParmVar 0x11f9280d8 'string' 'char *'
    | | `-RecoveryExpr 0x11f928520 <col:34> '<dependent type>' contains-errors lvalue
    | `-RecoveryExpr 0x11f928560 <col:40> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x11f940ec0 <line:10:2, line:11:10>
    | |-BinaryOperator 0x11f940a20 <line:10:6, col:13> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x11f940a00 <col:6> '<dependent type>' contains-errors lvalue
    | | `-IntegerLiteral 0x11f9287b8 <col:13> 'int' 0
    | `-ReturnStmt 0x11f940eb0 <line:11:3, col:10>
    |   `-ImplicitCastExpr 0x11f940a78 <col:10> 'int' <PointerToIntegral>
    |     `-ImplicitCastExpr 0x11f940a60 <col:10> 'char *' <LValueToRValue>
    |       `-DeclRefExpr 0x11f940a40 <col:10> 'char *' lvalue ParmVar 0x11f9280d8 'string' 'char *'
    |-BinaryOperator 0x11f941138 <line:13:2, col:50> 'char *' contains-errors '='
    | |-DeclRefExpr 0x11f940ee0 <col:2> 'char *' lvalue Var 0x11f9282b8 'scan' 'char *'
    | `-CallExpr 0x11f941108 <col:9, col:50> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x11f940fe0 <col:9> 'int ()' Function 0x11f940f28 'g_utf8_offset_to_pointer' 'int ()'
    |   |-DeclRefExpr 0x11f941000 <col:35> 'char *' lvalue ParmVar 0x11f9280d8 'string' 'char *'
    |   `-BinaryOperator 0x11f9410e8 <col:43, col:49> '<dependent type>' contains-errors '-'
    |     |-RecoveryExpr 0x11f9410c8 <col:43> '<dependent type>' contains-errors lvalue
    |     `-IntegerLiteral 0x11f941038 <col:49> 'int' 1
    |-WhileStmt 0x11f941650 <line:15:2, line:22:2>
    | |-UnaryOperator 0x11f9411a8 <line:15:9, col:12> '<dependent type>' contains-errors postfix '--' cannot overflow
    | | `-RecoveryExpr 0x11f941188 <col:9> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x11f941630 <col:16, line:22:2>
    |   |-IfStmt 0x11f9413f0 <line:17:3, line:20:4> has_else
    |   | |-CallExpr 0x11f941320 <line:17:7, col:27> '<dependent type>' contains-errors
    |   | | |-DeclRefExpr 0x11f9412a0 <col:7> 'int ()' Function 0x11f9411e8 'g_unichar_isspace' 'int ()'
    |   | | `-RecoveryExpr 0x11f941300 <col:26> '<dependent type>' contains-errors lvalue
    |   | |-BinaryOperator 0x11f9413c8 <line:18:4, col:12> 'char' '='
    |   | | |-UnaryOperator 0x11f941380 <col:4, col:5> 'char' lvalue prefix '*' cannot overflow
    |   | | | `-ImplicitCastExpr 0x11f941368 <col:5> 'char *' <LValueToRValue>
    |   | | |   `-DeclRefExpr 0x11f941348 <col:5> 'char *' lvalue Var 0x11f9282b8 'scan' 'char *'
    |   | | `-ImplicitCastExpr 0x11f9413b0 <col:12> 'char' <IntegralCast>
    |   | |   `-CharacterLiteral 0x11f941398 <col:12> 'int' 0
    |   | `-BreakStmt 0x11f9413e8 <line:20:4>
    |   `-BinaryOperator 0x11f941610 <line:21:3, col:45> 'char *' '='
    |     |-DeclRefExpr 0x11f941420 <col:3> 'char *' lvalue Var 0x11f9282b8 'scan' 'char *'
    |     `-ImplicitCastExpr 0x11f9415f8 <col:10, col:45> 'char *' <IntegralToPointer>
    |       `-CallExpr 0x11f941598 <col:10, col:45> 'int'
    |         |-ImplicitCastExpr 0x11f941580 <col:10> 'int (*)()' <FunctionToPointerDecay>
    |         | `-DeclRefExpr 0x11f941520 <col:10> 'int ()' Function 0x11f941468 'g_utf8_find_prev_char' 'int ()'
    |         |-ImplicitCastExpr 0x11f9415c8 <col:33> 'char *' <LValueToRValue>
    |         | `-DeclRefExpr 0x11f941540 <col:33> 'char *' lvalue ParmVar 0x11f9280d8 'string' 'char *'
    |         `-ImplicitCastExpr 0x11f9415e0 <col:41> 'char *' <LValueToRValue>
    |           `-DeclRefExpr 0x11f941560 <col:41> 'char *' lvalue Var 0x11f9282b8 'scan' 'char *'
    `-ReturnStmt 0x11f9416c0 <line:24:2, col:9>
      `-ImplicitCastExpr 0x11f9416a8 <col:9> 'int' <PointerToIntegral>
        `-ImplicitCastExpr 0x11f941690 <col:9> 'char *' <LValueToRValue>
          `-DeclRefExpr 0x11f941670 <col:9> 'char *' lvalue ParmVar 0x11f9280d8 'string' 'char *'
