`-FunctionDecl 0x105026748  line:1:1 __ip_vs_bind_svc 'int (struct ip_vs_dest *, struct ip_vs_service *)'
  |-ParmVarDecl 0x10500e248 <col:18, col:37> col:37 used dest 'struct ip_vs_dest *'
  |-ParmVarDecl 0x105026628 <col:43, col:65> col:65 used svc 'struct ip_vs_service *'
  `-CompoundStmt 0x105026ad0 <line:2:1, line:5:1>
    |-CallExpr 0x105026a08 <line:3:2, col:25> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x105026970 <col:2> 'int ()' Function 0x1050268b8 'atomic_inc' 'int ()'
    | `-UnaryOperator 0x1050269f0 <col:13, col:19> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   `-RecoveryExpr 0x1050269c8 <col:14, col:19> '<dependent type>' contains-errors lvalue
    |     `-DeclRefExpr 0x105026990 <col:14> 'struct ip_vs_service *' lvalue ParmVar 0x105026628 'svc' 'struct ip_vs_service *'
    `-BinaryOperator 0x105026ab0 <line:4:2, col:14> '<dependent type>' contains-errors '='
      |-RecoveryExpr 0x105026a68 <col:2, col:8> '<dependent type>' contains-errors lvalue
      | `-DeclRefExpr 0x105026a30 <col:2> 'struct ip_vs_dest *' lvalue ParmVar 0x10500e248 'dest' 'struct ip_vs_dest *'
      `-DeclRefExpr 0x105026a90 <col:14> 'struct ip_vs_service *' lvalue ParmVar 0x105026628 'svc' 'struct ip_vs_service *'
