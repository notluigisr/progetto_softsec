`-FunctionDecl 0x13180dfa8  line:1:12 invalid putint 'int (int *, int, int, long)' static
  |-ParmVarDecl 0x13180dd28 <col:19, col:33> col:33 invalid out 'int *'
  |-ParmVarDecl 0x13180dda8 <col:38, col:42> col:42 used sgnd 'int'
  |-ParmVarDecl 0x13180de28 <col:48, col:52> col:52 used prec 'int'
  |-ParmVarDecl 0x13180dea8 <col:58, col:63> col:63 used val 'long'
  `-CompoundStmt 0x132009ec8 <line:2:1, line:20:1>
    |-DeclStmt 0x13180e0f0 <line:3:2, col:7>
    | `-VarDecl 0x13180e088 <col:2, col:6> col:6 used n 'int'
    |-DeclStmt 0x13180e188 <line:4:2, col:7>
    | `-VarDecl 0x13180e120 <col:2, col:6> col:6 used c 'int'
    |-DeclStmt 0x13180e220 <line:6:2, col:11>
    | `-VarDecl 0x13180e1b8 <col:2, col:8> col:8 tmp 'long'
    |-CallExpr 0x132009418 <line:7:2, col:52> 'int'
    | |-ImplicitCastExpr 0x132009400 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x13180e390 <col:2> 'int ()' Function 0x13180e2d8 'assert' 'int ()'
    | `-BinaryOperator 0x1320093a8 <col:9, col:51> 'int' '||'
    |   |-ParenExpr 0x132009298 <col:9, col:28> 'int'
    |   | `-BinaryOperator 0x132009278 <col:10, col:27> 'int' '&&'
    |   |   |-UnaryOperator 0x13180e3e8 <col:10, col:11> 'int' prefix '!' cannot overflow
    |   |   | `-ImplicitCastExpr 0x13180e3d0 <col:11> 'int' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x13180e3b0 <col:11> 'int' lvalue ParmVar 0x13180dda8 'sgnd' 'int'
    |   |   `-BinaryOperator 0x132009258 <col:19, col:27> 'int' '>='
    |   |     |-ImplicitCastExpr 0x132009240 <col:19> 'int' <LValueToRValue>
    |   |     | `-DeclRefExpr 0x132009200 <col:19> 'int' lvalue ParmVar 0x13180de28 'prec' 'int'
    |   |     `-IntegerLiteral 0x132009220 <col:27> 'int' 1
    |   `-ParenExpr 0x132009388 <col:33, col:51> 'int'
    |     `-BinaryOperator 0x132009368 <col:34, col:50> 'int' '&&'
    |       |-ImplicitCastExpr 0x132009350 <col:34> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x1320092b8 <col:34> 'int' lvalue ParmVar 0x13180dda8 'sgnd' 'int'
    |       `-BinaryOperator 0x132009330 <col:42, col:50> 'int' '>='
    |         |-ImplicitCastExpr 0x132009318 <col:42> 'int' <LValueToRValue>
    |         | `-DeclRefExpr 0x1320092d8 <col:42> 'int' lvalue ParmVar 0x13180de28 'prec' 'int'
    |         `-IntegerLiteral 0x1320092f8 <col:50> 'int' 2
    |-IfStmt 0x1320096a0 <line:8:2, line:10:2>
    | |-ImplicitCastExpr 0x132009460 <line:8:6> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x132009440 <col:6> 'int' lvalue ParmVar 0x13180dda8 'sgnd' 'int'
    | `-CompoundStmt 0x132009688 <col:12, line:10:2>
    |   `-BinaryOperator 0x132009668 <line:9:3, col:35> 'long' '='
    |     |-DeclRefExpr 0x132009478 <col:3> 'long' lvalue ParmVar 0x13180dea8 'val' 'long'
    |     `-ImplicitCastExpr 0x132009650 <col:9, col:35> 'long' <IntegralCast>
    |       `-CallExpr 0x1320095f0 <col:9, col:35> 'int'
    |         |-ImplicitCastExpr 0x1320095d8 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |         | `-DeclRefExpr 0x132009578 <col:9> 'int ()' Function 0x1320094c0 'encode_twos_comp' 'int ()'
    |         |-ImplicitCastExpr 0x132009620 <col:26> 'long' <LValueToRValue>
    |         | `-DeclRefExpr 0x132009598 <col:26> 'long' lvalue ParmVar 0x13180dea8 'val' 'long'
    |         `-ImplicitCastExpr 0x132009638 <col:31> 'int' <LValueToRValue>
    |           `-DeclRefExpr 0x1320095b8 <col:31> 'int' lvalue ParmVar 0x13180de28 'prec' 'int'
    |-CallExpr 0x132009788 <line:11:2, col:17> 'int'
    | |-ImplicitCastExpr 0x132009770 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x1320096c0 <col:2> 'int ()' Function 0x13180e2d8 'assert' 'int ()'
    | `-BinaryOperator 0x132009750 <col:9, col:16> 'int' '>='
    |   |-ImplicitCastExpr 0x132009720 <col:9> 'long' <LValueToRValue>
    |   | `-DeclRefExpr 0x1320096e0 <col:9> 'long' lvalue ParmVar 0x13180dea8 'val' 'long'
    |   `-ImplicitCastExpr 0x132009738 <col:16> 'long' <IntegralCast>
    |     `-IntegerLiteral 0x132009700 <col:16> 'int' 0
    |-CompoundAssignOperator 0x1320098c0 <line:12:2, col:23> 'long' '&=' ComputeLHSTy='long' ComputeResultTy='long'
    | |-DeclRefExpr 0x1320097b0 <col:2> 'long' lvalue ParmVar 0x13180dea8 'val' 'long'
    | `-ImplicitCastExpr 0x1320098a8 <col:9, col:23> 'long' <IntegralCast>
    |   `-BinaryOperator 0x132009888 <col:9, col:23> 'int' '-'
    |     |-ParenExpr 0x132009848 <col:9, col:19> 'int'
    |     | `-BinaryOperator 0x132009828 <col:10, col:15> 'int' '<<'
    |     |   |-IntegerLiteral 0x1320097d0 <col:10> 'int' 1
    |     |   `-ImplicitCastExpr 0x132009810 <col:15> 'int' <LValueToRValue>
    |     |     `-DeclRefExpr 0x1320097f0 <col:15> 'int' lvalue ParmVar 0x13180de28 'prec' 'int'
    |     `-IntegerLiteral 0x132009868 <col:23> 'int' 1
    |-BinaryOperator 0x1320099e8 <line:13:2, col:19> 'int' '='
    | |-DeclRefExpr 0x1320098f0 <col:2> 'int' lvalue Var 0x13180e088 'n' 'int'
    | `-BinaryOperator 0x1320099c8 <col:6, col:19> 'int' '/'
    |   |-ParenExpr 0x132009988 <col:6, col:15> 'int'
    |   | `-BinaryOperator 0x132009968 <col:7, col:14> 'int' '+'
    |   |   |-ImplicitCastExpr 0x132009950 <col:7> 'int' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x132009910 <col:7> 'int' lvalue ParmVar 0x13180de28 'prec' 'int'
    |   |   `-IntegerLiteral 0x132009930 <col:14> 'int' 7
    |   `-IntegerLiteral 0x1320099a8 <col:19> 'int' 8
    |-WhileStmt 0x132009e78 <line:14:2, line:18:2>
    | |-BinaryOperator 0x132009a60 <line:14:9, col:16> 'int' '>='
    | | |-UnaryOperator 0x132009a28 <col:9, col:11> 'int' prefix '--'
    | | | `-DeclRefExpr 0x132009a08 <col:11> 'int' lvalue Var 0x13180e088 'n' 'int'
    | | `-IntegerLiteral 0x132009a40 <col:16> 'int' 0
    | `-CompoundStmt 0x132009e58 <col:19, line:18:2>
    |   |-BinaryOperator 0x132009c20 <line:15:3, col:26> 'int' '='
    |   | |-DeclRefExpr 0x132009a80 <col:3> 'int' lvalue Var 0x13180e120 'c' 'int'
    |   | `-ImplicitCastExpr 0x132009c08 <col:7, col:26> 'int' <IntegralCast>
    |   |   `-BinaryOperator 0x132009be8 <col:7, col:26> 'long' '&'
    |   |     |-ParenExpr 0x132009b90 <col:7, col:22> 'long'
    |   |     | `-BinaryOperator 0x132009b70 <col:8, col:21> 'long' '>>'
    |   |     |   |-ImplicitCastExpr 0x132009b58 <col:8> 'long' <LValueToRValue>
    |   |     |   | `-DeclRefExpr 0x132009aa0 <col:8> 'long' lvalue ParmVar 0x13180dea8 'val' 'long'
    |   |     |   `-ParenExpr 0x132009b38 <col:15, col:21> 'int'
    |   |     |     `-BinaryOperator 0x132009b18 <col:16, col:20> 'int' '*'
    |   |     |       |-ImplicitCastExpr 0x132009b00 <col:16> 'int' <LValueToRValue>
    |   |     |       | `-DeclRefExpr 0x132009ac0 <col:16> 'int' lvalue Var 0x13180e088 'n' 'int'
    |   |     |       `-IntegerLiteral 0x132009ae0 <col:20> 'int' 8
    |   |     `-ImplicitCastExpr 0x132009bd0 <col:26> 'long' <IntegralCast>
    |   |       `-IntegerLiteral 0x132009bb0 <col:26> 'int' 255
    |   `-IfStmt 0x132009e38 <line:16:3, line:17:12>
    |     |-BinaryOperator 0x132009dd0 <line:16:7, col:34> 'int' contains-errors '!='
    |     | |-CallExpr 0x132009d80 <col:7, col:29> '<dependent type>' contains-errors
    |     | | |-DeclRefExpr 0x132009d20 <col:7> 'int ()' Function 0x132009c68 'jas_stream_putc' 'int ()'
    |     | | |-RecoveryExpr 0x132009d40 <col:23> '<dependent type>' contains-errors lvalue
    |     | | `-DeclRefExpr 0x132009d60 <col:28> 'int' lvalue Var 0x13180e120 'c' 'int'
    |     | `-DeclRefExpr 0x132009db0 <col:34> 'int' lvalue Var 0x13180e120 'c' 'int'
    |     `-ReturnStmt 0x132009e28 <line:17:4, col:12>
    |       `-UnaryOperator 0x132009e10 <col:11, col:12> 'int' prefix '-'
    |         `-IntegerLiteral 0x132009df0 <col:12> 'int' 1
    `-ReturnStmt 0x132009eb8 <line:19:2, col:9>
      `-IntegerLiteral 0x132009e98 <col:9> 'int' 0
