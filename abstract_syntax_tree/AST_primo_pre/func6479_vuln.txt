`-FunctionDecl 0x12e9281c0  line:1:13 invalid doubleBoxSize 'void (int)' static
  |-ParmVarDecl 0x12e9280f0 <col:27, <invalid sloc>> col:43 invalid 'int'
  `-CompoundStmt 0x12e9287b0 <line:2:1, line:23:1>
    |-IfStmt 0x12e9283a0 <line:6:5, line:9:5>
    | |-CallExpr 0x12e928358 <line:6:9, col:20> '<dependent type>' contains-errors
    | | `-CXXDependentScopeMemberExpr 0x12e928310 <col:9, col:13> '<dependent type>' contains-errors lvalue .isNull
    | |   `-RecoveryExpr 0x12e9282f0 <col:9> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x12e928388 <line:7:5, line:9:5>
    |   `-ReturnStmt 0x12e928378 <line:8:2>
    |-IfStmt 0x12e928530 <line:10:5, line:14:5>
    | |-RecoveryExpr 0x12e928500 <line:10:9, col:56> '_Bool' contains-errors
    | `-CompoundStmt 0x12e928520 <line:11:5, line:14:5>
    |-RecoveryExpr 0x12e928580 <line:15:5> '<dependent type>' contains-errors lvalue
    `-ForStmt 0x12e928748 <line:16:5, line:21:5>
      |-DeclStmt 0x12e928658 <line:16:10, col:28>
      | `-VarDecl 0x12e9285b8 <col:10, col:27> col:23 used i 'unsigned int' cinit
      |   `-ImplicitCastExpr 0x12e928640 <col:27> 'unsigned int' <IntegralCast>
      |     `-IntegerLiteral 0x12e928620 <col:27> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x12e9286e0 <col:30, col:34> 'int' '<'
      | |-ImplicitCastExpr 0x12e9286b0 <col:30> 'unsigned int' <LValueToRValue>
      | | `-DeclRefExpr 0x12e928670 <col:30> 'unsigned int' lvalue Var 0x12e9285b8 'i' 'unsigned int'
      | `-ImplicitCastExpr 0x12e9286c8 <col:34> 'unsigned int' <IntegralCast>
      |   `-IntegerLiteral 0x12e928690 <col:34> 'int' 4
      |-UnaryOperator 0x12e928720 <col:37, col:39> 'unsigned int' prefix '++'
      | `-DeclRefExpr 0x12e928700 <col:39> 'unsigned int' lvalue Var 0x12e9285b8 'i' 'unsigned int'
      `-CompoundStmt 0x12e928738 <line:17:5, line:21:5>
