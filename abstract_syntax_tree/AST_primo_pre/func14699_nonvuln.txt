`-FunctionDecl 0x123128258  line:1:1 invalid distance_multiply 'int (int, int)'
  |-ParmVarDecl 0x1231280f0 <col:19, col:32> col:32 invalid d 'int'
  |-ParmVarDecl 0x123128170 <col:35, col:39> col:39 used m 'int'
  `-CompoundStmt 0x1231285b8 <line:2:1, line:9:1>
    |-IfStmt 0x1231283b8 <line:3:3, col:22>
    | |-BinaryOperator 0x123128368 <col:7, col:12> 'int' '=='
    | | |-ImplicitCastExpr 0x123128350 <col:7> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x123128310 <col:7> 'int' lvalue ParmVar 0x123128170 'm' 'int'
    | | `-IntegerLiteral 0x123128330 <col:12> 'int' 0
    | `-ReturnStmt 0x1231283a8 <col:15, col:22>
    |   `-IntegerLiteral 0x123128388 <col:22> 'int' 0
    `-IfStmt 0x123128588 <line:5:3, line:8:12> has_else
      |-BinaryOperator 0x1231284b0 <line:5:7, col:36> 'int' contains-errors '<'
      | |-RecoveryExpr 0x1231283d8 <col:7> '<dependent type>' contains-errors lvalue
      | `-BinaryOperator 0x123128490 <col:11, col:36> '<dependent type>' contains-errors '/'
      |   |-RecoveryExpr 0x123128470 <col:11> '<dependent type>' contains-errors lvalue
      |   `-DeclRefExpr 0x123128410 <col:36> 'int' lvalue ParmVar 0x123128170 'm' 'int'
      |-ReturnStmt 0x123128530 <line:6:5, col:16>
      | `-BinaryOperator 0x123128510 <col:12, col:16> '<dependent type>' contains-errors '*'
      |   |-RecoveryExpr 0x1231284d0 <col:12> '<dependent type>' contains-errors lvalue
      |   `-DeclRefExpr 0x1231284f0 <col:16> 'int' lvalue ParmVar 0x123128170 'm' 'int'
      `-ReturnStmt 0x123128578 <line:8:5, col:12>
        `-RecoveryExpr 0x123128558 <col:12> '<dependent type>' contains-errors lvalue
