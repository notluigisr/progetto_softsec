`-FunctionDecl 0x12800de58  line:1:1 regtail 'int (char *, char *)'
  |-ParmVarDecl 0x12800dcf0 <col:9, col:17> col:17 used p 'char *'
  |-ParmVarDecl 0x12800dd70 <col:20, col:28> col:28 used val 'char *'
  `-CompoundStmt 0x11f926f40 <line:2:1, line:34:1>
    |-DeclStmt 0x12800dfd8 <line:3:5, col:17>
    | `-VarDecl 0x12800df70 <col:5, col:13> col:13 used scan 'char *'
    |-DeclStmt 0x12800e070 <line:4:5, col:17>
    | `-VarDecl 0x12800e008 <col:5, col:13> col:13 used temp 'char *'
    |-DeclStmt 0x12800e108 <line:5:5, col:16>
    | `-VarDecl 0x12800e0a0 <col:5, col:10> col:10 used offset 'int'
    |-IfStmt 0x12800e1c8 <line:7:5, line:8:2>
    | |-BinaryOperator 0x12800e198 <line:7:9, col:14> 'int' contains-errors '=='
    | | |-DeclRefExpr 0x12800e120 <col:9> 'char *' lvalue ParmVar 0x12800dcf0 'p' 'char *'
    | | `-RecoveryExpr 0x12800e178 <col:14> '<dependent type>' contains-errors lvalue
    | `-ReturnStmt 0x12800e1b8 <line:8:2>
    |-BinaryOperator 0x12800e240 <line:11:5, col:12> 'char *' '='
    | |-DeclRefExpr 0x12800e1e8 <col:5> 'char *' lvalue Var 0x12800df70 'scan' 'char *'
    | `-ImplicitCastExpr 0x12800e228 <col:12> 'char *' <LValueToRValue>
    |   `-DeclRefExpr 0x12800e208 <col:12> 'char *' lvalue ParmVar 0x12800dcf0 'p' 'char *'
    |-ForStmt 0x11f924610 <line:12:5, line:18:5>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | `-CompoundStmt 0x11f9245e8 <line:13:5, line:18:5>
    |   |-BinaryOperator 0x11f924490 <line:14:2, col:21> 'char *' '='
    |   | |-DeclRefExpr 0x12800e260 <col:2> 'char *' lvalue Var 0x12800e008 'temp' 'char *'
    |   | `-ImplicitCastExpr 0x11f924058 <col:9, col:21> 'char *' <IntegralToPointer>
    |   |   `-CallExpr 0x11f924018 <col:9, col:21> 'int'
    |   |     |-ImplicitCastExpr 0x11f924000 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   |     | `-DeclRefExpr 0x12800e390 <col:9> 'int ()' Function 0x12800e2d8 'regnext' 'int ()'
    |   |     `-ImplicitCastExpr 0x11f924040 <col:17> 'char *' <LValueToRValue>
    |   |       `-DeclRefExpr 0x12800e3b0 <col:17> 'char *' lvalue Var 0x12800df70 'scan' 'char *'
    |   |-IfStmt 0x11f924550 <line:15:2, line:16:6>
    |   | |-BinaryOperator 0x11f924528 <line:15:6, col:14> 'int' contains-errors '=='
    |   | | |-DeclRefExpr 0x11f9244b0 <col:6> 'char *' lvalue Var 0x12800e008 'temp' 'char *'
    |   | | `-RecoveryExpr 0x11f924508 <col:14> '<dependent type>' contains-errors lvalue
    |   | `-BreakStmt 0x11f924548 <line:16:6>
    |   `-BinaryOperator 0x11f9245c8 <line:17:2, col:9> 'char *' '='
    |     |-DeclRefExpr 0x11f924570 <col:2> 'char *' lvalue Var 0x12800df70 'scan' 'char *'
    |     `-ImplicitCastExpr 0x11f9245b0 <col:9> 'char *' <LValueToRValue>
    |       `-DeclRefExpr 0x11f924590 <col:9> 'char *' lvalue Var 0x12800e008 'temp' 'char *'
    |-IfStmt 0x11f924b88 <line:20:5, line:23:27> has_else
    | |-BinaryOperator 0x11f9248c8 <line:20:9, col:21> 'int' contains-errors '=='
    | | |-CallExpr 0x11f924868 <col:9, col:16> 'int'
    | | | |-ImplicitCastExpr 0x11f924850 <col:9> 'int (*)()' <FunctionToPointerDecay>
    | | | | `-DeclRefExpr 0x11f924728 <col:9> 'int ()' Function 0x11f924670 'OP' 'int ()'
    | | | `-ImplicitCastExpr 0x11f924890 <col:12> 'char *' <LValueToRValue>
    | | |   `-DeclRefExpr 0x11f924748 <col:12> 'char *' lvalue Var 0x12800df70 'scan' 'char *'
    | | `-RecoveryExpr 0x11f9248a8 <col:21> '<dependent type>' contains-errors lvalue
    | |-BinaryOperator 0x11f924a18 <line:21:2, col:27> 'int' '='
    | | |-DeclRefExpr 0x11f9248e8 <col:2> 'int' lvalue Var 0x12800e0a0 'offset' 'int'
    | | `-CStyleCastExpr 0x11f9249f0 <col:11, col:27> 'int' <IntegralCast>
    | |   `-ParenExpr 0x11f9249d0 <col:16, col:27> 'long'
    | |     `-BinaryOperator 0x11f924978 <col:17, col:24> 'long' '-'
    | |       |-ImplicitCastExpr 0x11f924948 <col:17> 'char *' <LValueToRValue>
    | |       | `-DeclRefExpr 0x11f924908 <col:17> 'char *' lvalue Var 0x12800df70 'scan' 'char *'
    | |       `-ImplicitCastExpr 0x11f924960 <col:24> 'char *' <LValueToRValue>
    | |         `-DeclRefExpr 0x11f924928 <col:24> 'char *' lvalue ParmVar 0x12800dd70 'val' 'char *'
    | `-BinaryOperator 0x11f924b68 <line:23:2, col:27> 'int' '='
    |   |-DeclRefExpr 0x11f924a38 <col:2> 'int' lvalue Var 0x12800e0a0 'offset' 'int'
    |   `-CStyleCastExpr 0x11f924b40 <col:11, col:27> 'int' <IntegralCast>
    |     `-ParenExpr 0x11f924b20 <col:16, col:27> 'long'
    |       `-BinaryOperator 0x11f924ac8 <col:17, col:23> 'long' '-'
    |         |-ImplicitCastExpr 0x11f924a98 <col:17> 'char *' <LValueToRValue>
    |         | `-DeclRefExpr 0x11f924a58 <col:17> 'char *' lvalue ParmVar 0x12800dd70 'val' 'char *'
    |         `-ImplicitCastExpr 0x11f924ab0 <col:23> 'char *' <LValueToRValue>
    |           `-DeclRefExpr 0x11f924a78 <col:23> 'char *' lvalue Var 0x12800df70 'scan' 'char *'
    `-IfStmt 0x11f926f10 <line:27:5, line:33:5> has_else
      |-BinaryOperator 0x11f924c10 <line:27:9, col:18> 'int' '>'
      | |-ImplicitCastExpr 0x11f924bf8 <col:9> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x11f924bb8 <col:9> 'int' lvalue Var 0x12800e0a0 'offset' 'int'
      | `-IntegerLiteral 0x11f924bd8 <col:18> 'int' 65535
      |-NullStmt 0x11f926f08 <line:28:2>
      `-CompoundStmt 0x11f926ee8 <line:30:5, line:33:5>
        |-BinaryOperator 0x11f924ed0 <line:31:2, col:56> 'char' contains-errors '='
        | |-UnaryOperator 0x11f924ce0 <col:2, col:12> 'char' lvalue prefix '*' cannot overflow
        | | `-ParenExpr 0x11f924cc0 <col:3, col:12> 'char *'
        | |   `-BinaryOperator 0x11f924ca0 <col:4, col:11> 'char *' '+'
        | |     |-ImplicitCastExpr 0x11f924c88 <col:4> 'char *' <LValueToRValue>
        | |     | `-DeclRefExpr 0x11f924c48 <col:4> 'char *' lvalue Var 0x12800df70 'scan' 'char *'
        | |     `-IntegerLiteral 0x11f924c68 <col:11> 'int' 1
        | `-RecoveryExpr 0x11f924ea0 <col:16, col:56> '<dependent type>' contains-errors lvalue
        |   |-ParenExpr 0x11f924d50 <col:16, col:23> '<overloaded function type>' lvalue
        |   | `-UnresolvedLookupExpr 0x11f924d10 <col:17> '<overloaded function type>' lvalue (no ADL) = 'char_u' empty
        |   `-BinaryOperator 0x11f924e80 <col:26, col:52> 'unsigned int' '&'
        |     |-ParenExpr 0x11f924e28 <col:26, col:48> 'unsigned int'
        |     | `-BinaryOperator 0x11f924e08 <col:27, col:47> 'unsigned int' '>>'
        |     |   |-CStyleCastExpr 0x11f924dc0 <col:27, col:37> 'unsigned int' <IntegralCast>
        |     |   | `-ImplicitCastExpr 0x11f924da8 <col:37> 'int' <LValueToRValue> part_of_explicit_cast
        |     |   |   `-DeclRefExpr 0x11f924d70 <col:37> 'int' lvalue Var 0x12800e0a0 'offset' 'int'
        |     |   `-IntegerLiteral 0x11f924de8 <col:47> 'int' 8
        |     `-ImplicitCastExpr 0x11f924e68 <col:52> 'unsigned int' <IntegralCast>
        |       `-IntegerLiteral 0x11f924e48 <col:52> 'int' 255
        `-BinaryOperator 0x11f926ec8 <line:32:2, col:39> 'char' contains-errors '='
          |-UnaryOperator 0x11f924f88 <col:2, col:12> 'char' lvalue prefix '*' cannot overflow
          | `-ParenExpr 0x11f924f68 <col:3, col:12> 'char *'
          |   `-BinaryOperator 0x11f924f48 <col:4, col:11> 'char *' '+'
          |     |-ImplicitCastExpr 0x11f924f30 <col:4> 'char *' <LValueToRValue>
          |     | `-DeclRefExpr 0x11f924ef0 <col:4> 'char *' lvalue Var 0x12800df70 'scan' 'char *'
          |     `-IntegerLiteral 0x11f924f10 <col:11> 'int' 2
          `-RecoveryExpr 0x11f926e98 <col:16, col:39> '<dependent type>' contains-errors lvalue
            |-ParenExpr 0x11f926e00 <col:16, col:23> '<overloaded function type>' lvalue
            | `-UnresolvedLookupExpr 0x11f924fb8 <col:17> '<overloaded function type>' lvalue (no ADL) = 'char_u' empty
            `-BinaryOperator 0x11f926e78 <col:26, col:35> 'int' '&'
              |-ImplicitCastExpr 0x11f926e60 <col:26> 'int' <LValueToRValue>
              | `-DeclRefExpr 0x11f926e20 <col:26> 'int' lvalue Var 0x12800e0a0 'offset' 'int'
              `-IntegerLiteral 0x11f926e40 <col:35> 'int' 255
