`-FunctionDecl 0x14280dda0  line:1:13 print_line 'void (char *)' static
  |-ParmVarDecl 0x14280dcd8 <col:24, col:30> col:30 used line 'char *'
  `-CompoundStmt 0x14280e3d0 <line:2:1, line:9:1>
    |-WhileStmt 0x14280e2e0 <line:3:3, line:7:3>
    | |-BinaryOperator 0x14280dfd0 <line:3:10, col:28> 'int' '&&'
    | | |-ImplicitCastExpr 0x14280dfb8 <col:10, col:11> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x14280dfa0 <col:10, col:11> 'char' <LValueToRValue>
    | | |   `-UnaryOperator 0x14280ded0 <col:10, col:11> 'char' lvalue prefix '*' cannot overflow
    | | |     `-ImplicitCastExpr 0x14280deb8 <col:11> 'char *' <LValueToRValue>
    | | |       `-DeclRefExpr 0x14280de98 <col:11> 'char *' lvalue ParmVar 0x14280dcd8 'line' 'char *'
    | | `-BinaryOperator 0x14280df80 <col:19, col:28> 'int' '!='
    | |   |-ImplicitCastExpr 0x14280df68 <col:19, col:20> 'int' <IntegralCast>
    | |   | `-ImplicitCastExpr 0x14280df50 <col:19, col:20> 'char' <LValueToRValue>
    | |   |   `-UnaryOperator 0x14280df20 <col:19, col:20> 'char' lvalue prefix '*' cannot overflow
    | |   |     `-ImplicitCastExpr 0x14280df08 <col:20> 'char *' <LValueToRValue>
    | |   |       `-DeclRefExpr 0x14280dee8 <col:20> 'char *' lvalue ParmVar 0x14280dcd8 'line' 'char *'
    | |   `-CharacterLiteral 0x14280df38 <col:28> 'int' 10
    | `-CompoundStmt 0x14280e2c0 <line:4:3, line:7:3>
    |   |-CallExpr 0x14280e258 <line:5:5, col:24> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x14280e120 <col:5> 'int ()' Function 0x14280e068 'fputc' 'int ()'
    |   | |-UnaryOperator 0x14280e220 <col:11, col:12> 'char' lvalue prefix '*' cannot overflow
    |   | | `-ImplicitCastExpr 0x14280e208 <col:12> 'char *' <LValueToRValue>
    |   | |   `-DeclRefExpr 0x14280e140 <col:12> 'char *' lvalue ParmVar 0x14280dcd8 'line' 'char *'
    |   | `-RecoveryExpr 0x14280e238 <col:18> '<dependent type>' contains-errors lvalue
    |   `-UnaryOperator 0x14280e2a8 <line:6:5, col:9> 'char *' postfix '++'
    |     `-DeclRefExpr 0x14280e288 <col:5> 'char *' lvalue ParmVar 0x14280dcd8 'line' 'char *'
    `-CallExpr 0x14280e3a0 <line:8:3, col:21> '<dependent type>' contains-errors
      |-DeclRefExpr 0x14280e300 <col:3> 'int ()' Function 0x14280e068 'fputc' 'int ()'
      |-CharacterLiteral 0x14280e320 <col:9> 'int' 10
      `-RecoveryExpr 0x14280e380 <col:15> '<dependent type>' contains-errors lvalue
