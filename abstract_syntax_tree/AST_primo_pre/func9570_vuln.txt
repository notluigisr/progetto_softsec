`-FunctionDecl 0x12b027048  line:1:19 ip6_ufo_append_data 'int (struct sock *, int (*)(void *, char *, int, int, int, struct sk_buff *), void *, int, int, int, int, int, unsigned int)' static inline
  |-ParmVarDecl 0x12b00e248 <col:39, col:52> col:52 used sk 'struct sock *'
  |-ParmVarDecl 0x12b026af0 <line:2:4, line:3:32> line:2:8 used getfrag 'int (*)(void *, char *, int, int, int, struct sk_buff *)'
  |-ParmVarDecl 0x12b026b70 <line:4:4, col:10> col:10 used from 'void *'
  |-ParmVarDecl 0x12b026bf0 <col:16, col:20> col:20 used length 'int'
  |-ParmVarDecl 0x12b026c70 <col:28, col:32> col:32 used hh_len 'int'
  |-ParmVarDecl 0x12b026cf0 <col:40, col:44> col:44 used fragheaderlen 'int'
  |-ParmVarDecl 0x12b026d70 <line:5:4, col:8> col:8 used transhdrlen 'int'
  |-ParmVarDecl 0x12b026df0 <col:21, col:25> col:25 used mtu 'int'
  |-ParmVarDecl 0x12b026e70 <col:29, col:42> col:42 used flags 'unsigned int'
  `-CompoundStmt 0x12b02af30 <line:7:1, line:54:1>
    |-DeclStmt 0x12b027368 <line:8:2, col:21>
    | |-RecordDecl 0x12b027180 <col:2, col:9> col:9 struct sk_buff
    | `-VarDecl 0x12b0272e8 <col:2, col:18> col:18 used skb 'struct sk_buff *'
    |-DeclStmt 0x12b027400 <line:9:2, col:9>
    | `-VarDecl 0x12b027398 <col:2, col:6> col:6 used err 'int'
    |-IfStmt 0x12b0297c0 <line:12:2, line:33:2>
    | |-BinaryOperator 0x12b028ac0 <line:12:6, col:52> 'int' contains-errors '=='
    | | |-ParenExpr 0x12b028a48 <col:6, col:47> 'struct sk_buff *' contains-errors
    | | | `-BinaryOperator 0x12b028a28 <col:7, col:46> 'struct sk_buff *' contains-errors '='
    | | |   |-DeclRefExpr 0x12b027418 <col:7> 'struct sk_buff *' lvalue Var 0x12b0272e8 'skb' 'struct sk_buff *'
    | | |   `-CallExpr 0x12b028a00 <col:13, col:46> '<dependent type>' contains-errors
    | | |     |-DeclRefExpr 0x12b027560 <col:13> 'int ()' Function 0x12b0274a8 'skb_peek_tail' 'int ()'
    | | |     `-UnaryOperator 0x12b0275e0 <col:27, col:32> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | |       `-RecoveryExpr 0x12b0275b8 <col:28, col:32> '<dependent type>' contains-errors lvalue
    | | |         `-DeclRefExpr 0x12b027580 <col:28> 'struct sock *' lvalue ParmVar 0x12b00e248 'sk' 'struct sock *'
    | | `-RecoveryExpr 0x12b028aa0 <col:52> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x12b029778 <col:58, line:33:2>
    |   |-IfStmt 0x12b028f48 <line:16:3, line:17:12>
    |   | |-BinaryOperator 0x12b028e80 <line:16:7, col:14> 'int' contains-errors '=='
    |   | | |-DeclRefExpr 0x12b028e08 <col:7> 'struct sk_buff *' lvalue Var 0x12b0272e8 'skb' 'struct sk_buff *'
    |   | | `-RecoveryExpr 0x12b028e60 <col:14> '<dependent type>' contains-errors lvalue
    |   | `-ReturnStmt 0x12b028f38 <line:17:4, col:12>
    |   |   `-UnaryOperator 0x12b028f20 <col:11, col:12> '<dependent type>' contains-errors prefix '-' cannot overflow
    |   |     `-ImplicitCastExpr 0x12b028f08 <col:12> '<dependent type>' contains-errors <LValueToRValue>
    |   |       `-RecoveryExpr 0x12b028ee8 <col:12> '<dependent type>' contains-errors lvalue
    |   |-CallExpr 0x12b0290f8 <line:20:3, col:26> 'int'
    |   | |-ImplicitCastExpr 0x12b0290e0 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x12b029048 <col:3> 'int ()' Function 0x12b028f90 'skb_reserve' 'int ()'
    |   | |-ImplicitCastExpr 0x12b029128 <col:15> 'struct sk_buff *' <LValueToRValue>
    |   | | `-DeclRefExpr 0x12b029068 <col:15> 'struct sk_buff *' lvalue Var 0x12b0272e8 'skb' 'struct sk_buff *'
    |   | `-ImplicitCastExpr 0x12b029140 <col:20> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x12b029088 <col:20> 'int' lvalue ParmVar 0x12b026c70 'hh_len' 'int'
    |   |-CallExpr 0x12b029320 <line:23:3, col:42> 'int'
    |   | |-ImplicitCastExpr 0x12b029308 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x12b029238 <col:3> 'int ()' Function 0x12b029180 'skb_put' 'int ()'
    |   | |-ImplicitCastExpr 0x12b029350 <col:11> 'struct sk_buff *' <LValueToRValue>
    |   | | `-DeclRefExpr 0x12b029258 <col:11> 'struct sk_buff *' lvalue Var 0x12b0272e8 'skb' 'struct sk_buff *'
    |   | `-BinaryOperator 0x12b0292e8 <col:15, col:31> 'int' '+'
    |   |   |-ImplicitCastExpr 0x12b0292b8 <col:15> 'int' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x12b029278 <col:15> 'int' lvalue ParmVar 0x12b026cf0 'fragheaderlen' 'int'
    |   |   `-ImplicitCastExpr 0x12b0292d0 <col:31> 'int' <LValueToRValue>
    |   |     `-DeclRefExpr 0x12b029298 <col:31> 'int' lvalue ParmVar 0x12b026d70 'transhdrlen' 'int'
    |   |-CallExpr 0x12b0294a0 <line:26:3, col:31> 'int'
    |   | |-ImplicitCastExpr 0x12b029488 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x12b029448 <col:3> 'int ()' Function 0x12b029390 'skb_reset_network_header' 'int ()'
    |   | `-ImplicitCastExpr 0x12b0294c8 <col:28> 'struct sk_buff *' <LValueToRValue>
    |   |   `-DeclRefExpr 0x12b029468 <col:28> 'struct sk_buff *' lvalue Var 0x12b0272e8 'skb' 'struct sk_buff *'
    |   |-BinaryOperator 0x12b0295e0 <line:29:3, col:49> '<dependent type>' contains-errors '='
    |   | |-RecoveryExpr 0x12b029518 <col:3, col:8> '<dependent type>' contains-errors lvalue
    |   | | `-DeclRefExpr 0x12b0294e0 <col:3> 'struct sk_buff *' lvalue Var 0x12b0272e8 'skb' 'struct sk_buff *'
    |   | `-BinaryOperator 0x12b0295c0 <col:27, col:49> '<dependent type>' contains-errors '+'
    |   |   |-RecoveryExpr 0x12b029578 <col:27, col:32> '<dependent type>' contains-errors lvalue
    |   |   | `-DeclRefExpr 0x12b029540 <col:27> 'struct sk_buff *' lvalue Var 0x12b0272e8 'skb' 'struct sk_buff *'
    |   |   `-DeclRefExpr 0x12b0295a0 <col:49> 'int' lvalue ParmVar 0x12b026cf0 'fragheaderlen' 'int'
    |   |-BinaryOperator 0x12b0296b8 <line:31:3, col:20> '<dependent type>' contains-errors '='
    |   | |-RecoveryExpr 0x12b029638 <col:3, col:8> '<dependent type>' contains-errors lvalue
    |   | | `-DeclRefExpr 0x12b029600 <col:3> 'struct sk_buff *' lvalue Var 0x12b0272e8 'skb' 'struct sk_buff *'
    |   | `-RecoveryExpr 0x12b029698 <col:20> '<dependent type>' contains-errors lvalue
    |   `-BinaryOperator 0x12b029758 <line:32:3, col:15> '<dependent type>' contains-errors '='
    |     |-RecoveryExpr 0x12b029710 <col:3, col:8> '<dependent type>' contains-errors lvalue
    |     | `-DeclRefExpr 0x12b0296d8 <col:3> 'struct sk_buff *' lvalue Var 0x12b0272e8 'skb' 'struct sk_buff *'
    |     `-IntegerLiteral 0x12b029738 <col:15> 'int' 0
    |-BinaryOperator 0x12b02a300 <line:35:2, line:36:33> 'int' '='
    | |-DeclRefExpr 0x12b0297e0 <line:35:2> 'int' lvalue Var 0x12b027398 'err' 'int'
    | `-CallExpr 0x12b02a258 <col:8, line:36:33> 'int'
    |   |-ImplicitCastExpr 0x12b02a240 <line:35:8> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x12b0298e0 <col:8> 'int ()' Function 0x12b029828 'skb_append_datato_frags' 'int ()'
    |   |-ImplicitCastExpr 0x12b02a2a0 <col:32> 'struct sock *' <LValueToRValue>
    |   | `-DeclRefExpr 0x12b029900 <col:32> 'struct sock *' lvalue ParmVar 0x12b00e248 'sk' 'struct sock *'
    |   |-ImplicitCastExpr 0x12b02a2b8 <col:35> 'struct sk_buff *' <LValueToRValue>
    |   | `-DeclRefExpr 0x12b029920 <col:35> 'struct sk_buff *' lvalue Var 0x12b0272e8 'skb' 'struct sk_buff *'
    |   |-ImplicitCastExpr 0x12b02a2d0 <col:40> 'int (*)(void *, char *, int, int, int, struct sk_buff *)' <LValueToRValue>
    |   | `-DeclRefExpr 0x12b029940 <col:40> 'int (*)(void *, char *, int, int, int, struct sk_buff *)' lvalue ParmVar 0x12b026af0 'getfrag' 'int (*)(void *, char *, int, int, int, struct sk_buff *)'
    |   |-ImplicitCastExpr 0x12b02a2e8 <col:49> 'void *' <LValueToRValue>
    |   | `-DeclRefExpr 0x12b029960 <col:49> 'void *' lvalue ParmVar 0x12b026b70 'from' 'void *'
    |   `-ParenExpr 0x12b02a220 <line:36:11, col:32> 'int'
    |     `-BinaryOperator 0x12b02a200 <col:12, col:21> 'int' '-'
    |       |-ImplicitCastExpr 0x12b0299c0 <col:12> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x12b029980 <col:12> 'int' lvalue ParmVar 0x12b026bf0 'length' 'int'
    |       `-ImplicitCastExpr 0x12b0299d8 <col:21> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x12b0299a0 <col:21> 'int' lvalue ParmVar 0x12b026d70 'transhdrlen' 'int'
    |-IfStmt 0x12b02ad50 <line:37:2, line:49:2>
    | |-UnaryOperator 0x12b02a358 <line:37:6, col:7> 'int' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x12b02a340 <col:7> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x12b02a320 <col:7> 'int' lvalue Var 0x12b027398 'err' 'int'
    | `-CompoundStmt 0x12b02ad18 <col:12, line:49:2>
    |   |-DeclStmt 0x12b02a4e8 <line:38:3, col:23>
    |   | |-RecordDecl 0x12b02a370 <col:3, col:10> col:10 struct frag_hdr
    |   | `-VarDecl 0x12b02a468 <col:3, col:19> col:19 invalid fhdr 'struct frag_hdr'
    |   |-CallExpr 0x12b02a9b0 <line:44:3, col:26> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x12b02a958 <col:3> 'int ()' Function 0x12b02a8a0 'ipv6_select_ident' 'int ()'
    |   | `-UnaryOperator 0x12b02a998 <col:21, col:22> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   |   `-RecoveryExpr 0x12b02a978 <col:22> '<dependent type>' contains-errors lvalue
    |   |-BinaryOperator 0x12b02ab00 <line:45:3, col:39> '<dependent type>' contains-errors '='
    |   | |-RecoveryExpr 0x12b02aa70 <col:3, col:20> '<dependent type>' contains-errors lvalue
    |   | | `-CallExpr 0x12b02aa30 <col:3, col:17> 'int'
    |   | |   |-ImplicitCastExpr 0x12b02aa18 <col:3> 'int (*)()' <FunctionToPointerDecay>
    |   | |   | `-DeclRefExpr 0x12b02a9d8 <col:3> 'int ()' Function 0x12b02a528 'skb_shinfo' 'int ()'
    |   | |   `-ImplicitCastExpr 0x12b02aa58 <col:14> 'struct sk_buff *' <LValueToRValue>
    |   | |     `-DeclRefExpr 0x12b02a9f8 <col:14> 'struct sk_buff *' lvalue Var 0x12b0272e8 'skb' 'struct sk_buff *'
    |   | `-CXXDependentScopeMemberExpr 0x12b02aab8 <col:34, col:39> '<dependent type>' contains-errors lvalue .identification
    |   |   `-RecoveryExpr 0x12b02aa98 <col:34> '<dependent type>' contains-errors lvalue
    |   |-CallExpr 0x12b02acb8 <line:46:3, col:44> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x12b02ac00 <col:3> 'int ()' Function 0x12b02ab48 '__skb_queue_tail' 'int ()'
    |   | |-UnaryOperator 0x12b02ac80 <col:20, col:25> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   | | `-RecoveryExpr 0x12b02ac58 <col:21, col:25> '<dependent type>' contains-errors lvalue
    |   | |   `-DeclRefExpr 0x12b02ac20 <col:21> 'struct sock *' lvalue ParmVar 0x12b00e248 'sk' 'struct sock *'
    |   | `-DeclRefExpr 0x12b02ac98 <col:41> 'struct sk_buff *' lvalue Var 0x12b0272e8 'skb' 'struct sk_buff *'
    |   `-ReturnStmt 0x12b02ad08 <line:48:3, col:10>
    |     `-IntegerLiteral 0x12b02ace8 <col:10> 'int' 0
    |-CallExpr 0x12b02aea8 <line:51:2, col:15> 'int'
    | |-ImplicitCastExpr 0x12b02ae90 <col:2> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x12b02ae50 <col:2> 'int ()' Function 0x12b02ad98 'kfree_skb' 'int ()'
    | `-ImplicitCastExpr 0x12b02aed0 <col:12> 'struct sk_buff *' <LValueToRValue>
    |   `-DeclRefExpr 0x12b02ae70 <col:12> 'struct sk_buff *' lvalue Var 0x12b0272e8 'skb' 'struct sk_buff *'
    `-ReturnStmt 0x12b02af20 <line:53:2, col:9>
      `-ImplicitCastExpr 0x12b02af08 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x12b02aee8 <col:9> 'int' lvalue Var 0x12b027398 'err' 'int'
