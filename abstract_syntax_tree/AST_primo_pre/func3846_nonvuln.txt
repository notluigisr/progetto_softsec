`-FunctionDecl 0x15800ddc8  line:1:21 invalid mp_argmaxabs 'double (int)' static
  |-ParmVarDecl 0x15800dcf0 <col:34, <invalid sloc>> col:51 invalid 'int'
  `-CompoundStmt 0x158028128 <col:57, line:10:7>
    |-DeclStmt 0x15800df78 <line:2:9, col:62>
    | `-VarDecl 0x15800de90 <col:9, col:28> col:28 used i_end 'const unsigned int'
    |-DeclStmt 0x15800e308 <line:3:9, col:47>
    | |-VarDecl 0x15800dfa8 <col:9, col:31> col:16 used val 'double' cinit
    | | `-ImplicitCastExpr 0x15800e220 <col:22, col:31> 'double' <IntegralToFloating>
    | |   `-CallExpr 0x15800e1f8 <col:22, col:31> 'int'
    | |     |-ImplicitCastExpr 0x15800e1e0 <col:22> 'int (*)()' <FunctionToPointerDecay>
    | |     | `-DeclRefExpr 0x15800e170 <col:22> 'int ()' Function 0x15800e0b8 '_mp_arg' 'int ()'
    | |     `-IntegerLiteral 0x15800e190 <col:30> 'int' 3
    | `-VarDecl 0x15800e250 <col:9, col:43> col:34 used absval 'double' cinit
    |   `-RecoveryExpr 0x15800e2d0 <col:43> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x15800e3d8 <line:4:9, col:32>
    | `-VarDecl 0x15800e338 <col:9, col:31> col:22 used argval 'unsigned int' cinit
    |   `-ImplicitCastExpr 0x15800e3c0 <col:31> 'unsigned int' <IntegralCast>
    |     `-IntegerLiteral 0x15800e3a0 <col:31> 'int' 0
    |-ForStmt 0x158028068 <line:5:9, line:8:9>
    | |-DeclStmt 0x158027ab8 <line:5:14, col:32>
    | | `-VarDecl 0x158027a18 <col:14, col:31> col:27 used i 'unsigned int' cinit
    | |   `-ImplicitCastExpr 0x158027aa0 <col:31> 'unsigned int' <IntegralCast>
    | |     `-IntegerLiteral 0x158027a80 <col:31> 'int' 4
    | |-<<<NULL>>>
    | |-BinaryOperator 0x158027b40 <col:34, col:36> 'int' '<'
    | | |-ImplicitCastExpr 0x158027b10 <col:34> 'unsigned int' <LValueToRValue>
    | | | `-DeclRefExpr 0x158027ad0 <col:34> 'unsigned int' lvalue Var 0x158027a18 'i' 'unsigned int'
    | | `-ImplicitCastExpr 0x158027b28 <col:36> 'unsigned int' <LValueToRValue>
    | |   `-DeclRefExpr 0x158027af0 <col:36> 'const unsigned int' lvalue Var 0x15800de90 'i_end' 'const unsigned int'
    | |-UnaryOperator 0x158027b80 <col:43, col:45> 'unsigned int' prefix '++'
    | | `-DeclRefExpr 0x158027b60 <col:45> 'unsigned int' lvalue Var 0x158027a18 'i' 'unsigned int'
    | `-CompoundStmt 0x158028048 <col:48, line:8:9>
    |   |-DeclStmt 0x158027d98 <line:6:11, col:57>
    |   | |-VarDecl 0x158027bb0 <col:11, col:40> col:24 used _val 'const double' cinit
    |   | | `-ImplicitCastExpr 0x158027cb0 <col:31, col:40> 'double' <IntegralToFloating>
    |   | |   `-CallExpr 0x158027c70 <col:31, col:40> 'int'
    |   | |     |-ImplicitCastExpr 0x158027c58 <col:31> 'int (*)()' <FunctionToPointerDecay>
    |   | |     | `-DeclRefExpr 0x158027c18 <col:31> 'int ()' Function 0x15800e0b8 '_mp_arg' 'int ()'
    |   | |     `-ImplicitCastExpr 0x158027c98 <col:39> 'unsigned int' <LValueToRValue>
    |   | |       `-DeclRefExpr 0x158027c38 <col:39> 'unsigned int' lvalue Var 0x158027a18 'i' 'unsigned int'
    |   | `-VarDecl 0x158027ce0 <col:11, col:53> col:43 used _absval 'const double' cinit
    |   |   `-RecoveryExpr 0x158027d60 <col:53> '<dependent type>' contains-errors lvalue
    |   `-IfStmt 0x158028028 <line:7:11, col:79>
    |     |-BinaryOperator 0x158027e20 <col:15, col:23> 'int' contains-errors '>'
    |     | |-ImplicitCastExpr 0x158027df0 <col:15> 'double' contains-errors <LValueToRValue>
    |     | | `-DeclRefExpr 0x158027db0 <col:15> 'const double' contains-errors lvalue Var 0x158027ce0 '_absval' 'const double'
    |     | `-ImplicitCastExpr 0x158027e08 <col:23> 'double' contains-errors <LValueToRValue>
    |     |   `-DeclRefExpr 0x158027dd0 <col:23> 'double' contains-errors lvalue Var 0x15800e250 'absval' 'double'
    |     `-CompoundStmt 0x158028000 <col:31, col:79>
    |       |-BinaryOperator 0x158027e98 <col:33, col:39> 'double' '='
    |       | |-DeclRefExpr 0x158027e40 <col:33> 'double' lvalue Var 0x15800dfa8 'val' 'double'
    |       | `-ImplicitCastExpr 0x158027e80 <col:39> 'double' <LValueToRValue>
    |       |   `-DeclRefExpr 0x158027e60 <col:39> 'const double' lvalue Var 0x158027bb0 '_val' 'const double'
    |       |-BinaryOperator 0x158027f10 <col:45, col:54> 'double' contains-errors '='
    |       | |-DeclRefExpr 0x158027eb8 <col:45> 'double' contains-errors lvalue Var 0x15800e250 'absval' 'double'
    |       | `-ImplicitCastExpr 0x158027ef8 <col:54> 'double' contains-errors <LValueToRValue>
    |       |   `-DeclRefExpr 0x158027ed8 <col:54> 'const double' contains-errors lvalue Var 0x158027ce0 '_absval' 'const double'
    |       `-BinaryOperator 0x158027fe0 <col:63, col:76> 'unsigned int' '='
    |         |-DeclRefExpr 0x158027f30 <col:63> 'unsigned int' lvalue Var 0x15800e338 'argval' 'unsigned int'
    |         `-BinaryOperator 0x158027fc0 <col:72, col:76> 'unsigned int' '-'
    |           |-ImplicitCastExpr 0x158027f90 <col:72> 'unsigned int' <LValueToRValue>
    |           | `-DeclRefExpr 0x158027f50 <col:72> 'unsigned int' lvalue Var 0x158027a18 'i' 'unsigned int'
    |           `-ImplicitCastExpr 0x158027fa8 <col:76> 'unsigned int' <IntegralCast>
    |             `-IntegerLiteral 0x158027f70 <col:76> 'int' 3
    `-ReturnStmt 0x158028118 <line:9:9, col:24>
      `-CStyleCastExpr 0x1580280f0 <col:16, col:24> 'double' <IntegralToFloating>
        `-ImplicitCastExpr 0x1580280d8 <col:24> 'unsigned int' <LValueToRValue> part_of_explicit_cast
          `-DeclRefExpr 0x1580280a0 <col:24> 'unsigned int' lvalue Var 0x15800e338 'argval' 'unsigned int'
