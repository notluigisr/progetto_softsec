`-FunctionDecl 0x12200de08  line:1:20 invalid mpOk 'int (const int)' static inline
  |-ParmVarDecl 0x12200dcf0 <col:25, <invalid sloc>> col:39 invalid 'const int'
  `-CompoundStmt 0x12200e1b8 <line:2:1, line:4:1>
    `-ReturnStmt 0x12200e1a8 <line:3:5, col:48>
      `-BinaryOperator 0x12200e188 <col:12, col:48> 'int' contains-errors '&&'
        |-UnaryOperator 0x12200e0e0 <col:12, col:24> '<dependent type>' contains-errors prefix '!' cannot overflow
        | `-CallExpr 0x12200e0c0 <col:13, col:24> '<dependent type>' contains-errors
        |   `-CXXDependentScopeMemberExpr 0x12200e078 <col:13, col:16> '<dependent type>' contains-errors lvalue .isEmpty
        |     `-RecoveryExpr 0x12200e058 <col:13> '<dependent type>' contains-errors lvalue
        `-CallExpr 0x12200e160 <col:29, col:48> '<dependent type>' contains-errors
          |-CXXDependentScopeMemberExpr 0x12200e118 <col:29, col:32> '<dependent type>' contains-errors lvalue .startsWith
          | `-RecoveryExpr 0x12200e0f8 <col:29> '<dependent type>' contains-errors lvalue
          `-StringLiteral 0x12200dff0 <col:43> 'char[4]' lvalue "STR"
