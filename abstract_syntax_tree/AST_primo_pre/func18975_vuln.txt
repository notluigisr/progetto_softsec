`-FunctionDecl 0x135128400  line:1:6 create_subpartition_name 'void (char *, const char *, const char *, const char *, int)'
  |-ParmVarDecl 0x1351280d8 <col:31, col:37> col:37 used out 'char *'
  |-ParmVarDecl 0x135128158 <col:42, col:54> col:54 used in1 'const char *'
  |-ParmVarDecl 0x1351281d8 <line:2:31, col:43> col:43 used in2 'const char *'
  |-ParmVarDecl 0x135128258 <col:48, col:60> col:60 used in3 'const char *'
  |-ParmVarDecl 0x1351282f0 <line:3:31, col:36> col:36 used name_variant 'int'
  `-CompoundStmt 0x136008be0 <line:4:1, line:18:1>
    |-DeclStmt 0x1351285c0 <line:5:3, col:67>
    | `-VarDecl 0x135128540 <col:3, col:8> col:8 referenced invalid transl_part_name 'char'
    |-CallExpr 0x1351287c0 <line:7:3, col:57> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x1351286f0 <col:3> 'int ()' Function 0x135128638 'tablename_to_filename' 'int ()'
    | |-DeclRefExpr 0x135128710 <col:25> 'const char *' lvalue ParmVar 0x1351281d8 'in2' 'const char *'
    | |-RecoveryExpr 0x135128730 <col:30> '<dependent type>' contains-errors lvalue
    | `-RecoveryExpr 0x1351287a0 <col:48> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x136008308 <line:8:3, col:60> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x136008200 <col:3> 'int ()' Function 0x135128638 'tablename_to_filename' 'int ()'
    | |-DeclRefExpr 0x136008220 <col:25> 'const char *' lvalue ParmVar 0x135128258 'in3' 'const char *'
    | |-RecoveryExpr 0x1360082c8 <col:30> '<dependent type>' contains-errors lvalue
    | `-RecoveryExpr 0x1360082e8 <col:51> '<dependent type>' contains-errors lvalue
    `-IfStmt 0x136008bb0 <line:9:3, line:17:25> has_else
      |-BinaryOperator 0x1360083b8 <line:9:7, col:23> 'int' contains-errors '=='
      | |-DeclRefExpr 0x136008340 <col:7> 'int' lvalue ParmVar 0x1351282f0 'name_variant' 'int'
      | `-RecoveryExpr 0x136008398 <col:23> '<dependent type>' contains-errors lvalue
      |-CallExpr 0x1360086a8 <line:10:5, line:11:46> '<dependent type>' contains-errors
      | |-DeclRefExpr 0x1360084b8 <line:10:5> 'int ()' Function 0x136008400 'strxmov' 'int ()'
      | |-DeclRefExpr 0x1360084d8 <col:13> 'char *' lvalue ParmVar 0x1351280d8 'out' 'char *'
      | |-DeclRefExpr 0x1360084f8 <col:18> 'const char *' lvalue ParmVar 0x135128158 'in1' 'const char *'
      | |-StringLiteral 0x136008560 <col:23> 'char[4]' lvalue "STR"
      | |-RecoveryExpr 0x136008580 <col:30> '<dependent type>' contains-errors lvalue
      | |-StringLiteral 0x1360085a0 <line:11:13> 'char[4]' lvalue "STR"
      | |-RecoveryExpr 0x136008668 <col:20> '<dependent type>' contains-errors lvalue
      | `-RecoveryExpr 0x136008688 <col:41> '<dependent type>' contains-errors lvalue
      `-IfStmt 0x136008b80 <line:12:8, line:17:25> has_else
        |-BinaryOperator 0x136008778 <line:12:12, col:28> 'int' contains-errors '=='
        | |-DeclRefExpr 0x136008700 <col:12> 'int' lvalue ParmVar 0x1351282f0 'name_variant' 'int'
        | `-RecoveryExpr 0x136008758 <col:28> '<dependent type>' contains-errors lvalue
        |-CallExpr 0x1360088e0 <line:13:5, line:14:25> '<dependent type>' contains-errors
        | |-DeclRefExpr 0x136008798 <line:13:5> 'int ()' Function 0x136008400 'strxmov' 'int ()'
        | |-DeclRefExpr 0x1360087b8 <col:13> 'char *' lvalue ParmVar 0x1351280d8 'out' 'char *'
        | |-DeclRefExpr 0x1360087d8 <col:18> 'const char *' lvalue ParmVar 0x135128158 'in1' 'const char *'
        | |-StringLiteral 0x1360087f8 <col:23> 'char[4]' lvalue "STR"
        | |-RecoveryExpr 0x136008818 <col:30> '<dependent type>' contains-errors lvalue
        | |-StringLiteral 0x136008838 <line:14:13> 'char[4]' lvalue "STR"
        | `-RecoveryExpr 0x1360088c0 <col:20> '<dependent type>' contains-errors lvalue
        `-IfStmt 0x136008b60 <line:15:8, line:17:25>
          |-BinaryOperator 0x1360089a8 <line:15:12, col:28> 'int' contains-errors '=='
          | |-DeclRefExpr 0x136008930 <col:12> 'int' lvalue ParmVar 0x1351282f0 'name_variant' 'int'
          | `-RecoveryExpr 0x136008988 <col:28> '<dependent type>' contains-errors lvalue
          `-CallExpr 0x136008b10 <line:16:5, line:17:25> '<dependent type>' contains-errors
            |-DeclRefExpr 0x1360089c8 <line:16:5> 'int ()' Function 0x136008400 'strxmov' 'int ()'
            |-DeclRefExpr 0x1360089e8 <col:13> 'char *' lvalue ParmVar 0x1351280d8 'out' 'char *'
            |-DeclRefExpr 0x136008a08 <col:18> 'const char *' lvalue ParmVar 0x135128158 'in1' 'const char *'
            |-StringLiteral 0x136008a28 <col:23> 'char[4]' lvalue "STR"
            |-RecoveryExpr 0x136008a48 <col:30> '<dependent type>' contains-errors lvalue
            |-StringLiteral 0x136008a68 <line:17:13> 'char[4]' lvalue "STR"
            `-RecoveryExpr 0x136008af0 <col:20> '<dependent type>' contains-errors lvalue
