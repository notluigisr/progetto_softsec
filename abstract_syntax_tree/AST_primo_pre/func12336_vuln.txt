`-FunctionDecl 0x12b80dfa8  line:1:1 invalid prologProcessor 'int (int, const char *, const char *, const char **)'
  |-ParmVarDecl 0x12b80dcf0 <col:17, col:28> col:28 invalid parser 'int'
  |-ParmVarDecl 0x12b80dd70 <col:36, col:48> col:48 used s 'const char *'
  |-ParmVarDecl 0x12b80ddf0 <col:51, col:63> col:63 used end 'const char *'
  |-ParmVarDecl 0x12b80dea8 <line:2:17, col:30> col:30 used nextPtr 'const char **'
  `-CompoundStmt 0x12b1228d0 <col:39, line:7:1>
    |-DeclStmt 0x12b80e128 <line:3:3, col:23>
    | `-VarDecl 0x12b80e088 <col:3, col:22> col:15 used next 'const char *' cinit
    |   `-ImplicitCastExpr 0x12b80e110 <col:22> 'const char *' <LValueToRValue>
    |     `-DeclRefExpr 0x12b80e0f0 <col:22> 'const char *' lvalue ParmVar 0x12b80dd70 's' 'const char *'
    `-DeclStmt 0x12b122678 <line:4:3, col:60>
      `-VarDecl 0x12b80e158 <col:3, col:59> col:7 used tok 'int' cinit
        `-CallExpr 0x12b122638 <col:13, col:59> '<dependent type>' contains-errors
          |-DeclRefExpr 0x12b80e320 <col:13> 'int ()' Function 0x12b80e268 'XmlPrologTok' 'int ()'
          |-CXXDependentScopeMemberExpr 0x12b80e360 <col:26, col:34> '<dependent type>' contains-errors lvalue ->m_encoding
          | `-RecoveryExpr 0x12b80e340 <col:26> '<dependent type>' contains-errors lvalue
          |-DeclRefExpr 0x12b80e3a8 <col:46> 'const char *' lvalue ParmVar 0x12b80dd70 's' 'const char *'
          |-DeclRefExpr 0x12b80e3c8 <col:49> 'const char *' lvalue ParmVar 0x12b80ddf0 'end' 'const char *'
          `-UnaryOperator 0x12b122620 <col:54, col:55> 'const char **' prefix '&' cannot overflow
            `-DeclRefExpr 0x12b122600 <col:55> 'const char *' lvalue Var 0x12b80e088 'next' 'const char *'
