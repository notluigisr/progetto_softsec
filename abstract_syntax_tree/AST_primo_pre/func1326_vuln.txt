`-FunctionDecl 0x12a9281a8  line:1:1 PS_SERIALIZER_DECODE_FUNC 'int (int)'
  |-ParmVarDecl 0x12a9280d8 <col:27> col:27 php_binary 'int'
  `-CompoundStmt 0x12a945d60 <line:2:1, line:51:1>
    |-DeclStmt 0x12a928320 <line:3:2, col:15>
    | `-VarDecl 0x12a9282b8 <col:2, col:14> col:14 used p 'const char *'
    |-DeclStmt 0x12a9283b8 <line:4:2, col:12>
    | `-VarDecl 0x12a928350 <col:2, col:8> col:8 used name 'char *'
    |-DeclStmt 0x12a928518 <line:5:2, col:35>
    | `-VarDecl 0x12a9283e8 <col:2, col:29> col:14 used endptr 'const char *' cinit
    |   `-BinaryOperator 0x12a9284f8 <col:23, col:29> '<dependent type>' contains-errors '+'
    |     |-RecoveryExpr 0x12a9284b8 <col:23> '<dependent type>' contains-errors lvalue
    |     `-RecoveryExpr 0x12a9284d8 <col:29> '<dependent type>' contains-errors lvalue
    |-DeclStmt 0x12a9285c8 <line:7:2, col:13>
    | `-VarDecl 0x12a928560 <col:2, col:6> col:6 used namelen 'int'
    |-DeclStmt 0x12a928660 <line:8:2, col:15>
    | `-VarDecl 0x12a9285f8 <col:2, col:6> col:6 used has_value 'int'
    |-CallExpr 0x12a941820 <line:11:2, col:35> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x12a928790 <col:2> 'int ()' Function 0x12a9286d8 'PHP_VAR_UNSERIALIZE_INIT' 'int ()'
    | `-RecoveryExpr 0x12a941800 <col:27> '<dependent type>' contains-errors lvalue
    `-ForStmt 0x12a945d08 <line:13:2, line:46:2>
      |-<<<NULL>>>
      |-<<<NULL>>>
      |-BinaryOperator 0x12a941910 <line:13:16, col:20> 'int' contains-errors '<'
      | |-ImplicitCastExpr 0x12a9418e0 <col:16> 'const char *' <LValueToRValue>
      | | `-DeclRefExpr 0x12a9418a0 <col:16> 'const char *' lvalue Var 0x12a9282b8 'p' 'const char *'
      | `-ImplicitCastExpr 0x12a9418f8 <col:20> 'const char *' contains-errors <LValueToRValue>
      |   `-DeclRefExpr 0x12a9418c0 <col:20> 'const char *' contains-errors lvalue Var 0x12a9283e8 'endptr' 'const char *'
      |-<<<NULL>>>
      `-CompoundStmt 0x12a945cb8 <col:30, line:46:2>
        |-IfStmt 0x12a941ef8 <line:17:3, line:19:3>
        | |-BinaryOperator 0x12a941e78 <line:17:7, col:63> 'int' contains-errors '||'
        | | |-BinaryOperator 0x12a941db0 <col:7, col:32> 'int' contains-errors '||'
        | | | |-BinaryOperator 0x12a941d50 <col:7, col:17> 'int' '<'
        | | | | |-ImplicitCastExpr 0x12a941d38 <col:7> 'int' <LValueToRValue>
        | | | | | `-DeclRefExpr 0x12a941ae8 <col:7> 'int' lvalue Var 0x12a928560 'namelen' 'int'
        | | | | `-IntegerLiteral 0x12a941b08 <col:17> 'int' 0
        | | | `-BinaryOperator 0x12a941d90 <col:22, col:32> 'int' contains-errors '>'
        | | |   |-DeclRefExpr 0x12a941b60 <col:22> 'int' lvalue Var 0x12a928560 'namelen' 'int'
        | | |   `-RecoveryExpr 0x12a941d70 <col:32> '<dependent type>' contains-errors lvalue
        | | `-BinaryOperator 0x12a941e58 <col:46, col:63> 'int' contains-errors '>='
        | |   |-ParenExpr 0x12a941e20 <col:46, col:58> 'const char *'
        | |   | `-BinaryOperator 0x12a941e00 <col:47, col:51> 'const char *' '+'
        | |   |   |-ImplicitCastExpr 0x12a941dd0 <col:47> 'const char *' <LValueToRValue>
        | |   |   | `-DeclRefExpr 0x12a941bd8 <col:47> 'const char *' lvalue Var 0x12a9282b8 'p' 'const char *'
        | |   |   `-ImplicitCastExpr 0x12a941de8 <col:51> 'int' <LValueToRValue>
        | |   |     `-DeclRefExpr 0x12a941bf8 <col:51> 'int' lvalue Var 0x12a928560 'namelen' 'int'
        | |   `-ImplicitCastExpr 0x12a941e40 <col:63> 'const char *' contains-errors <LValueToRValue>
        | |     `-DeclRefExpr 0x12a941c88 <col:63> 'const char *' contains-errors lvalue Var 0x12a9283e8 'endptr' 'const char *'
        | `-CompoundStmt 0x12a941ee0 <col:71, line:19:3>
        |   `-ReturnStmt 0x12a941ed0 <line:18:4, col:11>
        |     `-RecoveryExpr 0x12a941eb0 <col:11> '<dependent type>' contains-errors lvalue
        |-BinaryOperator 0x12a942120 <line:21:3, col:39> 'int' contains-errors '='
        | |-DeclRefExpr 0x12a941f18 <col:3> 'int' lvalue Var 0x12a9285f8 'has_value' 'int'
        | `-ConditionalOperator 0x12a9420f0 <col:15, col:39> '<dependent type>' contains-errors
        |   |-BinaryOperator 0x12a9420d0 <col:15, col:20> '<dependent type>' contains-errors '&'
        |   | |-UnaryOperator 0x12a942098 <col:15, col:16> 'const char' lvalue prefix '*' cannot overflow
        |   | | `-ImplicitCastExpr 0x12a942080 <col:16> 'const char *' <LValueToRValue>
        |   | |   `-DeclRefExpr 0x12a941f38 <col:16> 'const char *' lvalue Var 0x12a9282b8 'p' 'const char *'
        |   | `-RecoveryExpr 0x12a9420b0 <col:20> '<dependent type>' contains-errors lvalue
        |   |-IntegerLiteral 0x12a941fc0 <col:35> 'int' 0
        |   `-IntegerLiteral 0x12a941fe0 <col:39> 'int' 1
        |-BinaryOperator 0x12a9427d0 <line:23:3, col:33> 'char *' '='
        | |-DeclRefExpr 0x12a942140 <col:3> 'char *' lvalue Var 0x12a928350 'name' 'char *'
        | `-ImplicitCastExpr 0x12a942390 <col:10, col:33> 'char *' <IntegralToPointer>
        |   `-CallExpr 0x12a942348 <col:10, col:33> 'int'
        |     |-ImplicitCastExpr 0x12a942330 <col:10> 'int (*)()' <FunctionToPointerDecay>
        |     | `-DeclRefExpr 0x12a942240 <col:10> 'int ()' Function 0x12a942188 'estrndup' 'int ()'
        |     |-BinaryOperator 0x12a9422b8 <col:19, col:23> 'const char *' '+'
        |     | |-ImplicitCastExpr 0x12a9422a0 <col:19> 'const char *' <LValueToRValue>
        |     | | `-DeclRefExpr 0x12a942260 <col:19> 'const char *' lvalue Var 0x12a9282b8 'p' 'const char *'
        |     | `-IntegerLiteral 0x12a942280 <col:23> 'int' 1
        |     `-ImplicitCastExpr 0x12a942378 <col:26> 'int' <LValueToRValue>
        |       `-DeclRefExpr 0x12a9422d8 <col:26> 'int' lvalue Var 0x12a928560 'namelen' 'int'
        |-CompoundAssignOperator 0x12a944a98 <line:25:3, col:18> 'const char *' '+=' ComputeLHSTy='const char *' ComputeResultTy='const char *'
        | |-DeclRefExpr 0x12a944a00 <col:3> 'const char *' lvalue Var 0x12a9282b8 'p' 'const char *'
        | `-BinaryOperator 0x12a944a78 <col:8, col:18> 'int' '+'
        |   |-ImplicitCastExpr 0x12a944a60 <col:8> 'int' <LValueToRValue>
        |   | `-DeclRefExpr 0x12a944a20 <col:8> 'int' lvalue Var 0x12a928560 'namelen' 'int'
        |   `-IntegerLiteral 0x12a944a40 <col:18> 'int' 1
        |-IfStmt 0x12a945298 <line:27:3, line:32:3>
        | |-RecoveryExpr 0x12a944d60 <line:27:7, col:79> '_Bool' contains-errors
        | `-CompoundStmt 0x12a945280 <col:88, line:32:3>
        |   `-IfStmt 0x12a945260 <line:28:4, line:31:4>
        |     |-RecoveryExpr 0x12a9450a0 <line:28:8, col:109> '_Bool' contains-errors
        |     `-CompoundStmt 0x12a945240 <col:112, line:31:4>
        |       |-CallExpr 0x12a9451f8 <line:29:5, col:15> 'int'
        |       | |-ImplicitCastExpr 0x12a9451e0 <col:5> 'int (*)()' <FunctionToPointerDecay>
        |       | | `-DeclRefExpr 0x12a9451a0 <col:5> 'int ()' Function 0x12a9450e8 'efree' 'int ()'
        |       | `-ImplicitCastExpr 0x12a945220 <col:11> 'char *' <LValueToRValue>
        |       |   `-DeclRefExpr 0x12a9451c0 <col:11> 'char *' lvalue Var 0x12a928350 'name' 'char *'
        |       `-ContinueStmt 0x12a945238 <line:30:5>
        |-IfStmt 0x12a945a48 <line:34:3, line:43:3>
        | |-ImplicitCastExpr 0x12a9452d8 <line:34:7> 'int' <LValueToRValue>
        | | `-DeclRefExpr 0x12a9452b8 <col:7> 'int' lvalue Var 0x12a9285f8 'has_value' 'int'
        | `-CompoundStmt 0x12a945a30 <col:18, line:43:3>
        |   `-IfStmt 0x12a945900 <line:36:4, line:41:4> has_else
        |     |-RecoveryExpr 0x12a945680 <line:36:8, col:118> '_Bool' contains-errors
        |     |-CompoundStmt 0x12a9457e0 <col:121, line:38:4>
        |     `-CompoundStmt 0x12a9458f0 <col:11, line:41:4>
        |-CallExpr 0x12a945bc0 <line:44:3, col:28> 'int'
        | |-ImplicitCastExpr 0x12a945ba8 <col:3> 'int (*)()' <FunctionToPointerDecay>
        | | `-DeclRefExpr 0x12a945b48 <col:3> 'int ()' Function 0x12a945a90 'PS_ADD_VARL' 'int ()'
        | |-ImplicitCastExpr 0x12a945bf0 <col:15> 'char *' <LValueToRValue>
        | | `-DeclRefExpr 0x12a945b68 <col:15> 'char *' lvalue Var 0x12a928350 'name' 'char *'
        | `-ImplicitCastExpr 0x12a945c08 <col:21> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x12a945b88 <col:21> 'int' lvalue Var 0x12a928560 'namelen' 'int'
        `-CallExpr 0x12a945c78 <line:45:3, col:13> 'int'
          |-ImplicitCastExpr 0x12a945c60 <col:3> 'int (*)()' <FunctionToPointerDecay>
          | `-DeclRefExpr 0x12a945c20 <col:3> 'int ()' Function 0x12a9450e8 'efree' 'int ()'
          `-ImplicitCastExpr 0x12a945ca0 <col:9> 'char *' <LValueToRValue>
            `-DeclRefExpr 0x12a945c40 <col:9> 'char *' lvalue Var 0x12a928350 'name' 'char *'
