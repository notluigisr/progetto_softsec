`-FunctionDecl 0x15c00ddf8  line:1:5 invalid wc_ecc_sig_size 'int (int *)'
  |-ParmVarDecl 0x15c00dd28 <col:21, col:30> col:30 invalid key 'int *'
  `-CompoundStmt 0x15c00e398 <line:2:1, line:8:1>
    |-DeclStmt 0x15c00e0e8 <line:3:5, col:30>
    | `-VarDecl 0x15c00dec0 <col:5, col:29> col:9 used sz 'int' cinit
    |   `-CallExpr 0x15c00e0c0 <col:14, col:29> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x15c00e080 <col:14> 'int ()' Function 0x15c00dfc8 'wc_ecc_size' 'int ()'
    |     `-RecoveryExpr 0x15c00e0a0 <col:26> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x15c00e1c0 <line:4:5, line:5:16>
    | |-BinaryOperator 0x15c00e158 <line:4:9, col:15> 'int' contains-errors '<='
    | | |-ImplicitCastExpr 0x15c00e140 <col:9> 'int' contains-errors <LValueToRValue>
    | | | `-DeclRefExpr 0x15c00e100 <col:9> 'int' contains-errors lvalue Var 0x15c00dec0 'sz' 'int'
    | | `-IntegerLiteral 0x15c00e120 <col:15> 'int' 0
    | `-ReturnStmt 0x15c00e1b0 <line:5:9, col:16>
    |   `-ImplicitCastExpr 0x15c00e198 <col:16> 'int' contains-errors <LValueToRValue>
    |     `-DeclRefExpr 0x15c00e178 <col:16> 'int' contains-errors lvalue Var 0x15c00dec0 'sz' 'int'
    `-ReturnStmt 0x15c00e388 <line:7:5, col:35>
      `-CallExpr 0x15c00e348 <col:12, col:35> 'int' contains-errors
        |-ImplicitCastExpr 0x15c00e330 <col:12> 'int (*)()' <FunctionToPointerDecay>
        | `-DeclRefExpr 0x15c00e2c0 <col:12> 'int ()' Function 0x15c00e208 'wc_ecc_sig_size_calc' 'int ()'
        `-ImplicitCastExpr 0x15c00e370 <col:33> 'int' contains-errors <LValueToRValue>
          `-DeclRefExpr 0x15c00e2e0 <col:33> 'int' contains-errors lvalue Var 0x15c00dec0 'sz' 'int'
