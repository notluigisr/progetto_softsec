`-FunctionDecl 0x12e928238  line:1:24 safe_shift 'unsigned int (unsigned int, int)' static inline
  |-ParmVarDecl 0x12e9280d8 <col:35, col:44> col:44 used d 'unsigned int'
  |-ParmVarDecl 0x12e928158 <col:47, col:51> col:51 used n 'int'
  `-CompoundStmt 0x12e928528 <line:2:1, line:4:1>
    `-ReturnStmt 0x12e928518 <line:3:2, col:32>
      `-ConditionalOperator 0x12e9284e8 <col:9, col:32> 'unsigned int'
        |-BinaryOperator 0x12e928390 <col:9, col:13> 'int' '<'
        | |-ImplicitCastExpr 0x12e928378 <col:9> 'int' <LValueToRValue>
        | | `-DeclRefExpr 0x12e928338 <col:9> 'int' lvalue ParmVar 0x12e928158 'n' 'int'
        | `-IntegerLiteral 0x12e928358 <col:13> 'int' 0
        |-BinaryOperator 0x12e928438 <col:17, col:23> 'unsigned int' '>>'
        | |-ImplicitCastExpr 0x12e928420 <col:17> 'unsigned int' <LValueToRValue>
        | | `-DeclRefExpr 0x12e9283b0 <col:17> 'unsigned int' lvalue ParmVar 0x12e9280d8 'd' 'unsigned int'
        | `-UnaryOperator 0x12e928408 <col:22, col:23> 'int' prefix '-'
        |   `-ImplicitCastExpr 0x12e9283f0 <col:23> 'int' <LValueToRValue>
        |     `-DeclRefExpr 0x12e9283d0 <col:23> 'int' lvalue ParmVar 0x12e928158 'n' 'int'
        `-BinaryOperator 0x12e9284c8 <col:27, col:32> 'unsigned int' '<<'
          |-ImplicitCastExpr 0x12e928498 <col:27> 'unsigned int' <LValueToRValue>
          | `-DeclRefExpr 0x12e928458 <col:27> 'unsigned int' lvalue ParmVar 0x12e9280d8 'd' 'unsigned int'
          `-ImplicitCastExpr 0x12e9284b0 <col:32> 'int' <LValueToRValue>
            `-DeclRefExpr 0x12e928478 <col:32> 'int' lvalue ParmVar 0x12e928158 'n' 'int'
