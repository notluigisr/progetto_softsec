`-FunctionDecl 0x13a00dee8  line:1:12 invalid skcipher_setkey 'int (void *, const int *, unsigned int)' static
  |-ParmVarDecl 0x13a00dcd8 <col:28, col:34> col:34 used private 'void *'
  |-ParmVarDecl 0x13a00dd70 <col:43, col:53> col:53 invalid key 'const int *'
  |-ParmVarDecl 0x13a00ddf0 <col:58, col:71> col:71 used keylen 'unsigned int'
  `-CompoundStmt 0x13a027a68 <line:2:1, line:10:1>
    |-DeclStmt 0x13a00e1e8 <line:3:2, col:36>
    | |-RecordDecl 0x13a00dfa8 <col:2, col:9> col:9 struct skcipher_tfm
    | `-VarDecl 0x13a00e118 <col:2, col:29> col:23 used tfm 'struct skcipher_tfm *' cinit
    |   `-ImplicitCastExpr 0x13a00e1b8 <col:29> 'struct skcipher_tfm *' <BitCast>
    |     `-ImplicitCastExpr 0x13a00e1a0 <col:29> 'void *' <LValueToRValue>
    |       `-DeclRefExpr 0x13a00e180 <col:29> 'void *' lvalue ParmVar 0x13a00dcd8 'private' 'void *'
    |-DeclStmt 0x13a00e280 <line:4:2, col:9>
    | `-VarDecl 0x13a00e218 <col:2, col:6> col:6 used err 'int'
    |-BinaryOperator 0x13a027930 <line:6:2, col:59> 'int' contains-errors '='
    | |-DeclRefExpr 0x13a00e298 <col:2> 'int' lvalue Var 0x13a00e218 'err' 'int'
    | `-CallExpr 0x13a0278f8 <col:8, col:59> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x13a027410 <col:8> 'int ()' Function 0x13a00e358 'crypto_ablkcipher_setkey' 'int ()'
    |   |-RecoveryExpr 0x13a027890 <col:33, col:38> '<dependent type>' contains-errors lvalue
    |   | `-DeclRefExpr 0x13a027430 <col:33> 'struct skcipher_tfm *' lvalue Var 0x13a00e118 'tfm' 'struct skcipher_tfm *'
    |   |-RecoveryExpr 0x13a0278b8 <col:48> '<dependent type>' contains-errors lvalue
    |   `-DeclRefExpr 0x13a0278d8 <col:53> 'unsigned int' lvalue ParmVar 0x13a00ddf0 'keylen' 'unsigned int'
    |-BinaryOperator 0x13a027a00 <line:7:2, col:18> '<dependent type>' contains-errors '='
    | |-RecoveryExpr 0x13a027988 <col:2, col:7> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x13a027950 <col:2> 'struct skcipher_tfm *' lvalue Var 0x13a00e118 'tfm' 'struct skcipher_tfm *'
    | `-UnaryOperator 0x13a0279e8 <col:17, col:18> 'int' prefix '!' cannot overflow
    |   `-ImplicitCastExpr 0x13a0279d0 <col:18> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x13a0279b0 <col:18> 'int' lvalue Var 0x13a00e218 'err' 'int'
    `-ReturnStmt 0x13a027a58 <line:9:2, col:9>
      `-ImplicitCastExpr 0x13a027a40 <col:9> 'int' <LValueToRValue>
        `-DeclRefExpr 0x13a027a20 <col:9> 'int' lvalue Var 0x13a00e218 'err' 'int'
