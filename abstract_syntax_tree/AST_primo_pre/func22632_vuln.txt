`-FunctionDecl 0x1379281c8  line:1:1 invalid htmlParseNameComplex 'int (int)'
  |-ParmVarDecl 0x1379280f0 <col:22, col:39> col:39 invalid ctxt 'int'
  `-CompoundStmt 0x1379432e0 <col:45, line:30:1>
    |-DeclStmt 0x1379283b0 <line:2:5, col:19>
    | |-VarDecl 0x137928290 <col:5, col:15> col:9 used len 'int' cinit
    | | `-IntegerLiteral 0x1379282f8 <col:15> 'int' 0
    | `-VarDecl 0x137928330 <col:5, col:18> col:18 used l 'int'
    |-DeclStmt 0x137928448 <line:3:5, col:10>
    | `-VarDecl 0x1379283e0 <col:5, col:9> col:9 used c 'int'
    |-DeclStmt 0x137928500 <line:4:5, col:18>
    | `-VarDecl 0x137928478 <col:5, col:17> col:9 used count 'int' cinit
    |   `-IntegerLiteral 0x1379284e0 <col:17> 'int' 0
    |-BinaryOperator 0x137928758 <line:8:5, col:19> 'int' '='
    | |-DeclRefExpr 0x137928518 <col:5> 'int' lvalue Var 0x1379283e0 'c' 'int'
    | `-CallExpr 0x137928718 <col:9, col:19> 'int'
    |   |-ImplicitCastExpr 0x137928700 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x137928690 <col:9> 'int ()' Function 0x1379285d8 'CUR_CHAR' 'int ()'
    |   `-ImplicitCastExpr 0x137928740 <col:18> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x1379286b0 <col:18> 'int' lvalue Var 0x137928330 'l' 'int'
    |-IfStmt 0x137941cd8 <line:9:5, line:13:5>
    | |-BinaryOperator 0x137941c90 <line:9:9, line:11:20> 'int' '||'
    | | |-BinaryOperator 0x137941960 <line:9:9, col:46> 'int' '||'
    | | | |-BinaryOperator 0x1379418b0 <col:9, col:32> 'int' '||'
    | | | | |-ParenExpr 0x137941800 <col:9, col:18> 'int'
    | | | | | `-BinaryOperator 0x1379287c8 <col:10, col:15> 'int' '=='
    | | | | |   |-ImplicitCastExpr 0x1379287b0 <col:10> 'int' <LValueToRValue>
    | | | | |   | `-DeclRefExpr 0x137928778 <col:10> 'int' lvalue Var 0x1379283e0 'c' 'int'
    | | | | |   `-CharacterLiteral 0x137928798 <col:15> 'int' 32
    | | | | `-ParenExpr 0x137941890 <col:23, col:32> 'int'
    | | | |   `-BinaryOperator 0x137941870 <col:24, col:29> 'int' '=='
    | | | |     |-ImplicitCastExpr 0x137941858 <col:24> 'int' <LValueToRValue>
    | | | |     | `-DeclRefExpr 0x137941820 <col:24> 'int' lvalue Var 0x1379283e0 'c' 'int'
    | | | |     `-CharacterLiteral 0x137941840 <col:29> 'int' 62
    | | | `-ParenExpr 0x137941940 <col:37, col:46> 'int'
    | | |   `-BinaryOperator 0x137941920 <col:38, col:43> 'int' '=='
    | | |     |-ImplicitCastExpr 0x137941908 <col:38> 'int' <LValueToRValue>
    | | |     | `-DeclRefExpr 0x1379418d0 <col:38> 'int' lvalue Var 0x1379283e0 'c' 'int'
    | | |     `-CharacterLiteral 0x1379418f0 <col:43> 'int' 47
    | | `-ParenExpr 0x137941c70 <line:10:2, line:11:20> 'int'
    | |   `-BinaryOperator 0x137941c50 <line:10:3, line:11:19> 'int' '&&'
    | |     |-BinaryOperator 0x137941ba0 <line:10:3, col:29> 'int' '&&'
    | |     | |-UnaryOperator 0x137941af8 <col:3, col:15> 'int' prefix '!' cannot overflow
    | |     | | `-CallExpr 0x137941ab8 <col:4, col:15> 'int'
    | |     | |   |-ImplicitCastExpr 0x137941aa0 <col:4> 'int (*)()' <FunctionToPointerDecay>
    | |     | |   | `-DeclRefExpr 0x137941a60 <col:4> 'int ()' Function 0x1379419a8 'IS_LETTER' 'int ()'
    | |     | |   `-ImplicitCastExpr 0x137941ae0 <col:14> 'int' <LValueToRValue>
    | |     | |     `-DeclRefExpr 0x137941a80 <col:14> 'int' lvalue Var 0x1379283e0 'c' 'int'
    | |     | `-ParenExpr 0x137941b80 <col:20, col:29> 'int'
    | |     |   `-BinaryOperator 0x137941b60 <col:21, col:26> 'int' '!='
    | |     |     |-ImplicitCastExpr 0x137941b48 <col:21> 'int' <LValueToRValue>
    | |     |     | `-DeclRefExpr 0x137941b10 <col:21> 'int' lvalue Var 0x1379283e0 'c' 'int'
    | |     |     `-CharacterLiteral 0x137941b30 <col:26> 'int' 95
    | |     `-ParenExpr 0x137941c30 <line:11:10, col:19> 'int'
    | |       `-BinaryOperator 0x137941c10 <col:11, col:16> 'int' '!='
    | |         |-ImplicitCastExpr 0x137941bf8 <col:11> 'int' <LValueToRValue>
    | |         | `-DeclRefExpr 0x137941bc0 <col:11> 'int' lvalue Var 0x1379283e0 'c' 'int'
    | |         `-CharacterLiteral 0x137941be0 <col:16> 'int' 58
    | `-CompoundStmt 0x137941cc8 <col:23, line:13:5>
    |-WhileStmt 0x137942fe0 <line:15:5, line:28:5>
    | |-BinaryOperator 0x1379427a8 <line:15:12, line:20:22> 'int' '&&'
    | | |-BinaryOperator 0x137941ec8 <line:15:12, col:49> 'int' '&&'
    | | | |-BinaryOperator 0x137941e18 <col:12, col:35> 'int' '&&'
    | | | | |-ParenExpr 0x137941d68 <col:12, col:21> 'int'
    | | | | | `-BinaryOperator 0x137941d48 <col:13, col:18> 'int' '!='
    | | | | |   |-ImplicitCastExpr 0x137941d30 <col:13> 'int' <LValueToRValue>
    | | | | |   | `-DeclRefExpr 0x137941cf8 <col:13> 'int' lvalue Var 0x1379283e0 'c' 'int'
    | | | | |   `-CharacterLiteral 0x137941d18 <col:18> 'int' 32
    | | | | `-ParenExpr 0x137941df8 <col:26, col:35> 'int'
    | | | |   `-BinaryOperator 0x137941dd8 <col:27, col:32> 'int' '!='
    | | | |     |-ImplicitCastExpr 0x137941dc0 <col:27> 'int' <LValueToRValue>
    | | | |     | `-DeclRefExpr 0x137941d88 <col:27> 'int' lvalue Var 0x1379283e0 'c' 'int'
    | | | |     `-CharacterLiteral 0x137941da8 <col:32> 'int' 62
    | | | `-ParenExpr 0x137941ea8 <col:40, col:49> 'int'
    | | |   `-BinaryOperator 0x137941e88 <col:41, col:46> 'int' '!='
    | | |     |-ImplicitCastExpr 0x137941e70 <col:41> 'int' <LValueToRValue>
    | | |     | `-DeclRefExpr 0x137941e38 <col:41> 'int' lvalue Var 0x1379283e0 'c' 'int'
    | | |     `-CharacterLiteral 0x137941e58 <col:46> 'int' 47
    | | `-ParenExpr 0x137942788 <line:16:5, line:20:22> 'int'
    | |   `-BinaryOperator 0x137942768 <line:16:6, line:20:21> 'int' '||'
    | |     |-BinaryOperator 0x1379425b0 <line:16:6, line:19:22> 'int' '||'
    | |     | |-BinaryOperator 0x1379423f8 <line:16:6, line:18:29> 'int' '||'
    | |     | | |-BinaryOperator 0x137942348 <line:16:6, line:18:15> 'int' '||'
    | |     | | | |-BinaryOperator 0x137942298 <line:16:6, line:17:36> 'int' '||'
    | |     | | | | |-BinaryOperator 0x1379421e8 <line:16:6, line:17:22> 'int' '||'
    | |     | | | | | |-BinaryOperator 0x137942138 <line:16:6, col:36> 'int' '||'
    | |     | | | | | | |-ParenExpr 0x137941f80 <col:6, col:19> 'int'
    | |     | | | | | | | `-CallExpr 0x137941f40 <col:7, col:18> 'int'
    | |     | | | | | | |   |-ImplicitCastExpr 0x137941f28 <col:7> 'int (*)()' <FunctionToPointerDecay>
    | |     | | | | | | |   | `-DeclRefExpr 0x137941ee8 <col:7> 'int ()' Function 0x1379419a8 'IS_LETTER' 'int ()'
    | |     | | | | | | |   `-ImplicitCastExpr 0x137941f68 <col:17> 'int' <LValueToRValue>
    | |     | | | | | | |     `-DeclRefExpr 0x137941f08 <col:17> 'int' lvalue Var 0x1379283e0 'c' 'int'
    | |     | | | | | | `-ParenExpr 0x137942118 <col:24, col:36> 'int'
    | |     | | | | | |   `-CallExpr 0x1379420d8 <col:25, col:35> 'int'
    | |     | | | | | |     |-ImplicitCastExpr 0x1379420c0 <col:25> 'int (*)()' <FunctionToPointerDecay>
    | |     | | | | | |     | `-DeclRefExpr 0x137942080 <col:25> 'int ()' Function 0x137941fc8 'IS_DIGIT' 'int ()'
    | |     | | | | | |     `-ImplicitCastExpr 0x137942100 <col:34> 'int' <LValueToRValue>
    | |     | | | | | |       `-DeclRefExpr 0x1379420a0 <col:34> 'int' lvalue Var 0x1379283e0 'c' 'int'
    | |     | | | | | `-ParenExpr 0x1379421c8 <line:17:13, col:22> 'int'
    | |     | | | | |   `-BinaryOperator 0x1379421a8 <col:14, col:19> 'int' '=='
    | |     | | | | |     |-ImplicitCastExpr 0x137942190 <col:14> 'int' <LValueToRValue>
    | |     | | | | |     | `-DeclRefExpr 0x137942158 <col:14> 'int' lvalue Var 0x1379283e0 'c' 'int'
    | |     | | | | |     `-CharacterLiteral 0x137942178 <col:19> 'int' 46
    | |     | | | | `-ParenExpr 0x137942278 <col:27, col:36> 'int'
    | |     | | | |   `-BinaryOperator 0x137942258 <col:28, col:33> 'int' '=='
    | |     | | | |     |-ImplicitCastExpr 0x137942240 <col:28> 'int' <LValueToRValue>
    | |     | | | |     | `-DeclRefExpr 0x137942208 <col:28> 'int' lvalue Var 0x1379283e0 'c' 'int'
    | |     | | | |     `-CharacterLiteral 0x137942228 <col:33> 'int' 45
    | |     | | | `-ParenExpr 0x137942328 <line:18:6, col:15> 'int'
    | |     | | |   `-BinaryOperator 0x137942308 <col:7, col:12> 'int' '=='
    | |     | | |     |-ImplicitCastExpr 0x1379422f0 <col:7> 'int' <LValueToRValue>
    | |     | | |     | `-DeclRefExpr 0x1379422b8 <col:7> 'int' lvalue Var 0x1379283e0 'c' 'int'
    | |     | | |     `-CharacterLiteral 0x1379422d8 <col:12> 'int' 95
    | |     | | `-ParenExpr 0x1379423d8 <col:20, col:29> 'int'
    | |     | |   `-BinaryOperator 0x1379423b8 <col:21, col:26> 'int' '=='
    | |     | |     |-ImplicitCastExpr 0x1379423a0 <col:21> 'int' <LValueToRValue>
    | |     | |     | `-DeclRefExpr 0x137942368 <col:21> 'int' lvalue Var 0x1379283e0 'c' 'int'
    | |     | |     `-CharacterLiteral 0x137942388 <col:26> 'int' 58
    | |     | `-ParenExpr 0x137942590 <line:19:6, col:22> 'int'
    | |     |   `-CallExpr 0x137942550 <col:7, col:21> 'int'
    | |     |     |-ImplicitCastExpr 0x137942538 <col:7> 'int (*)()' <FunctionToPointerDecay>
    | |     |     | `-DeclRefExpr 0x1379424f8 <col:7> 'int ()' Function 0x137942440 'IS_COMBINING' 'int ()'
    | |     |     `-ImplicitCastExpr 0x137942578 <col:20> 'int' <LValueToRValue>
    | |     |       `-DeclRefExpr 0x137942518 <col:20> 'int' lvalue Var 0x1379283e0 'c' 'int'
    | |     `-ParenExpr 0x137942748 <line:20:6, col:21> 'int'
    | |       `-CallExpr 0x137942708 <col:7, col:20> 'int'
    | |         |-ImplicitCastExpr 0x1379426f0 <col:7> 'int (*)()' <FunctionToPointerDecay>
    | |         | `-DeclRefExpr 0x1379426b0 <col:7> 'int ()' Function 0x1379425f8 'IS_EXTENDER' 'int ()'
    | |         `-ImplicitCastExpr 0x137942730 <col:19> 'int' <LValueToRValue>
    | |           `-DeclRefExpr 0x1379426d0 <col:19> 'int' lvalue Var 0x1379283e0 'c' 'int'
    | `-CompoundStmt 0x137942fb0 <col:25, line:28:5>
    |   |-IfStmt 0x137942cb8 <line:21:2, line:24:2>
    |   | |-BinaryOperator 0x137942c20 <line:21:6, col:16> 'int' '>'
    |   | | |-UnaryOperator 0x1379427e8 <col:6, col:11> 'int' postfix '++'
    |   | | | `-DeclRefExpr 0x1379427c8 <col:6> 'int' lvalue Var 0x137928478 'count' 'int'
    |   | | `-IntegerLiteral 0x137942c00 <col:16> 'int' 100
    |   | `-CompoundStmt 0x137942ca0 <col:21, line:24:2>
    |   |   `-BinaryOperator 0x137942c80 <line:22:6, col:14> 'int' '='
    |   |     |-DeclRefExpr 0x137942c40 <col:6> 'int' lvalue Var 0x137928478 'count' 'int'
    |   |     `-IntegerLiteral 0x137942c60 <col:14> 'int' 0
    |   |-CompoundAssignOperator 0x137942d30 <line:25:2, col:9> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |   | |-DeclRefExpr 0x137942cd8 <col:2> 'int' lvalue Var 0x137928290 'len' 'int'
    |   | `-ImplicitCastExpr 0x137942d18 <col:9> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x137942cf8 <col:9> 'int' lvalue Var 0x137928330 'l' 'int'
    |   |-CallExpr 0x137942e98 <line:26:2, col:9> 'int'
    |   | |-ImplicitCastExpr 0x137942e80 <col:2> 'int (*)()' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x137942e40 <col:2> 'int ()' Function 0x137942d88 'NEXTL' 'int ()'
    |   | `-ImplicitCastExpr 0x137942ec0 <col:8> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x137942e60 <col:8> 'int' lvalue Var 0x137928330 'l' 'int'
    |   `-BinaryOperator 0x137942f90 <line:27:2, col:16> 'int' '='
    |     |-DeclRefExpr 0x137942ed8 <col:2> 'int' lvalue Var 0x1379283e0 'c' 'int'
    |     `-CallExpr 0x137942f50 <col:6, col:16> 'int'
    |       |-ImplicitCastExpr 0x137942f38 <col:6> 'int (*)()' <FunctionToPointerDecay>
    |       | `-DeclRefExpr 0x137942ef8 <col:6> 'int ()' Function 0x1379285d8 'CUR_CHAR' 'int ()'
    |       `-ImplicitCastExpr 0x137942f78 <col:15> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x137942f18 <col:15> 'int' lvalue Var 0x137928330 'l' 'int'
    `-ReturnStmt 0x1379432d0 <line:29:5, col:66>
      `-ParenExpr 0x1379432b0 <col:11, col:66> '<dependent type>' contains-errors
        `-CallExpr 0x137943278 <col:12, col:65> '<dependent type>' contains-errors
          |-DeclRefExpr 0x1379430e0 <col:12> 'int ()' Function 0x137943028 'xmlDictLookup' 'int ()'
          |-CXXDependentScopeMemberExpr 0x137943120 <col:26, col:32> '<dependent type>' contains-errors lvalue ->dict
          | `-RecoveryExpr 0x137943100 <col:26> '<dependent type>' contains-errors lvalue
          |-BinaryOperator 0x137943238 <col:38, col:57> '<dependent type>' contains-errors '-'
          | |-CXXDependentScopeMemberExpr 0x1379431d0 <col:38, col:51> '<dependent type>' contains-errors lvalue ->cur
          | | `-CXXDependentScopeMemberExpr 0x137943188 <col:38, col:44> '<dependent type>' contains-errors lvalue ->input
          | |   `-RecoveryExpr 0x137943168 <col:38> '<dependent type>' contains-errors lvalue
          | `-DeclRefExpr 0x137943218 <col:57> 'int' lvalue Var 0x137928290 'len' 'int'
          `-DeclRefExpr 0x137943258 <col:62> 'int' lvalue Var 0x137928290 'len' 'int'
