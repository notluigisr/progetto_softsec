`-FunctionDecl 0x15a928288  line:1:1 invalid zget_device_params 'int (int *, int)'
  |-ParmVarDecl 0x15a928128 <col:20, col:29> col:29 invalid i_ctx_p 'int *'
  |-ParmVarDecl 0x15a9281a8 <col:38, col:43> col:43 invalid is_hardware 'int'
  `-CompoundStmt 0x15a9425b8 <line:2:1, line:36:1>
    |-DeclStmt 0x15a9283d8 <line:7:5, col:13>
    | `-VarDecl 0x15a928370 <col:5, col:9> col:9 used code 'int'
    |-IfStmt 0x15a941a48 <line:12:5, line:14:5>
    | |-UnaryOperator 0x15a9287d0 <line:12:8, col:30> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-CallExpr 0x15a9287a0 <col:9, col:30> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x15a9286c8 <col:9> 'int ()' Function 0x15a928610 'r_has_type' 'int ()'
    | |   |-RecoveryExpr 0x15a928760 <col:20> '<dependent type>' contains-errors lvalue
    | |   `-RecoveryExpr 0x15a928780 <col:24> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x15a941a30 <col:33, line:14:5>
    |   `-CallExpr 0x15a941a00 <line:13:9, col:37> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x15a9418e0 <col:9> 'int ()' Function 0x15a941828 'check_type' 'int ()'
    |     |-UnaryOperator 0x15a9419c8 <col:20, col:21> '<dependent type>' contains-errors prefix '*' cannot overflow
    |     | `-ImplicitCastExpr 0x15a9419b0 <col:21> '<dependent type>' contains-errors <LValueToRValue>
    |     |   `-RecoveryExpr 0x15a941990 <col:21> '<dependent type>' contains-errors lvalue
    |     `-RecoveryExpr 0x15a9419e0 <col:25> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x15a941d68 <line:20:5, col:10> 'int'
    | |-ImplicitCastExpr 0x15a941d50 <col:5> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x15a941cd8 <col:5> 'int ()' Function 0x15a941c20 'pop' 'int ()'
    | `-IntegerLiteral 0x15a941cf8 <col:9> 'int' 1
    |-IfStmt 0x15a942348 <line:24:5, line:32:5>
    | |-BinaryOperator 0x15a942028 <line:24:9, col:16> 'int' '<'
    | | |-ImplicitCastExpr 0x15a942010 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x15a941fd0 <col:9> 'int' lvalue Var 0x15a928370 'code' 'int'
    | | `-IntegerLiteral 0x15a941ff0 <col:16> 'int' 0
    | `-CompoundStmt 0x15a942330 <col:19, line:32:5>
    |   `-ReturnStmt 0x15a942320 <line:31:9, col:16>
    |     `-ImplicitCastExpr 0x15a942308 <col:16> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x15a9422e8 <col:16> 'int' lvalue Var 0x15a928370 'code' 'int'
    `-ReturnStmt 0x15a9425a8 <line:35:5, col:12>
      `-IntegerLiteral 0x15a942588 <col:12> 'int' 0
