`-FunctionDecl 0x1441283f8  line:1:1 invalid dwg_add_handle 'int (int *restrict, const int, const unsigned long, const int *restrict)'
  |-ParmVarDecl 0x144128128 <col:17, col:38> col:38 referenced invalid hdl 'int *restrict'
  |-ParmVarDecl 0x1441281a8 <col:43, col:60> col:60 invalid code 'const int'
  |-ParmVarDecl 0x144128228 <line:2:17, col:37> col:37 used absref 'const unsigned long'
  |-ParmVarDecl 0x1441282a8 <col:45, col:72> col:72 invalid obj 'const int *restrict'
  `-CompoundStmt 0x144144d40 <line:3:1, line:47:1>
    |-DeclStmt 0x144128730 <line:4:3, col:59>
    | `-VarDecl 0x1441284d8 <col:3, col:58> col:7 used offset 'int' cinit
    |   `-ConditionalOperator 0x144128700 <col:16, col:58> '<dependent type>' contains-errors
    |     |-RecoveryExpr 0x144128540 <col:16> '<dependent type>' contains-errors lvalue
    |     |-ParenExpr 0x1441286c0 <col:22, col:54> 'unsigned long' contains-errors
    |     | `-BinaryOperator 0x1441286a0 <col:23, col:49> 'unsigned long' contains-errors '-'
    |     |   |-ImplicitCastExpr 0x144128670 <col:23> 'unsigned long' <LValueToRValue>
    |     |   | `-DeclRefExpr 0x144128560 <col:23> 'const unsigned long' lvalue ParmVar 0x144128228 'absref' 'const unsigned long'
    |     |   `-ImplicitCastExpr 0x144128688 <col:32, col:49> 'unsigned long' contains-errors <IntegralCast>
    |     |     `-CStyleCastExpr 0x144128648 <col:32, col:49> 'int' contains-errors <Dependent>
    |     |       `-CXXDependentScopeMemberExpr 0x1441285e8 <col:37, col:49> '<dependent type>' contains-errors lvalue .value
    |     |         `-CXXDependentScopeMemberExpr 0x1441285a0 <col:37, col:42> '<dependent type>' contains-errors lvalue ->handle
    |     |           `-RecoveryExpr 0x144128580 <col:37> '<dependent type>' contains-errors lvalue
    |     `-IntegerLiteral 0x1441286e0 <col:58> 'int' 0
    |-BinaryOperator 0x144142800 <line:5:3, col:15> '<dependent type>' contains-errors '='
    | |-CXXDependentScopeMemberExpr 0x144128790 <col:3, col:8> '<dependent type>' contains-errors lvalue ->code
    | | `-RecoveryExpr 0x144128768 <col:3> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x144128748 <col:3> 'int *restrict' lvalue ParmVar 0x144128128 'hdl' 'int *restrict'
    | `-RecoveryExpr 0x1441287d8 <col:15> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x1441428d0 <line:6:3, col:16> '<dependent type>' contains-errors '='
    | |-CXXDependentScopeMemberExpr 0x144142868 <col:3, col:8> '<dependent type>' contains-errors lvalue ->value
    | | `-RecoveryExpr 0x144142840 <col:3> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x144142820 <col:3> 'int *restrict' lvalue ParmVar 0x144128128 'hdl' 'int *restrict'
    | `-DeclRefExpr 0x1441428b0 <col:16> 'const unsigned long' lvalue ParmVar 0x144128228 'absref' 'const unsigned long'
    |-IfStmt 0x144143378 <line:7:3, line:15:5>
    | |-BinaryOperator 0x144142a40 <line:7:7, col:40> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x144142a00 <col:7, col:35> 'int' contains-errors '&&'
    | | | |-RecoveryExpr 0x1441428f0 <col:7> '<dependent type>' contains-errors lvalue
    | | | `-ParenExpr 0x1441429e0 <col:14, col:35> 'int' contains-errors
    | | |   `-BinaryOperator 0x1441429c0 <col:15, col:29> 'int' contains-errors '||'
    | | |     |-BinaryOperator 0x144142950 <col:15, col:23> 'int' contains-errors '=='
    | | |     | |-RecoveryExpr 0x144142910 <col:15> '<dependent type>' contains-errors lvalue
    | | |     | `-IntegerLiteral 0x144142930 <col:23> 'int' 0
    | | |     `-UnaryOperator 0x1441429a8 <col:28, col:29> 'int' contains-errors prefix '!' cannot overflow
    | | |       `-ImplicitCastExpr 0x144142990 <col:29> 'int' contains-errors <LValueToRValue>
    | | |         `-DeclRefExpr 0x144142970 <col:29> 'int' contains-errors lvalue Var 0x1441284d8 'offset' 'int'
    | | `-DeclRefExpr 0x144142a20 <col:40> 'const unsigned long' lvalue ParmVar 0x144128228 'absref' 'const unsigned long'
    | `-CompoundStmt 0x144143358 <line:8:5, line:15:5>
    |   |-CallExpr 0x144142d48 <line:10:7, col:44> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x144142c40 <col:7> 'int ()' Function 0x144142b88 'LOG_HANDLE' 'int ()'
    |   | |-StringLiteral 0x144142ca0 <col:19> 'char[4]' lvalue "STR"
    |   | |-DeclRefExpr 0x144142cc0 <col:26> 'const unsigned long' lvalue ParmVar 0x144128228 'absref' 'const unsigned long'
    |   | `-CXXDependentScopeMemberExpr 0x144142d00 <col:34, col:39> '<dependent type>' contains-errors lvalue ->index
    |   |   `-RecoveryExpr 0x144142ce0 <col:34> '<dependent type>' contains-errors lvalue
    |   `-CallExpr 0x144142ee0 <line:11:7, col:18> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x144142e60 <col:7> 'int ()' Function 0x144142da8 'assert' 'int ()'
    |     `-RecoveryExpr 0x144142ec0 <col:15> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x1441434b8 <line:17:3, col:23> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x144143478 <col:3> 'int ()' Function 0x1441433c0 'set_handle_size' 'int ()'
    | `-RecoveryExpr 0x144143498 <col:20> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x144144cf0 <line:18:3, line:45:5>
    | |-BinaryOperator 0x144143640 <line:18:7, col:41> 'int' contains-errors '&&'
    | | |-BinaryOperator 0x144143600 <col:7, col:34> 'int' contains-errors '&&'
    | | | |-ParenExpr 0x1441435c0 <col:7, col:29> 'int' contains-errors
    | | | | `-BinaryOperator 0x1441435a0 <col:8, col:28> 'int' contains-errors '||'
    | | | |   |-BinaryOperator 0x144143520 <col:8, col:16> 'int' contains-errors '=='
    | | | |   | |-RecoveryExpr 0x1441434e0 <col:8> '<dependent type>' contains-errors lvalue
    | | | |   | `-IntegerLiteral 0x144143500 <col:16> 'int' 4
    | | | |   `-BinaryOperator 0x144143580 <col:21, col:28> 'int' contains-errors '>'
    | | | |     |-RecoveryExpr 0x144143540 <col:21> '<dependent type>' contains-errors lvalue
    | | | |     `-IntegerLiteral 0x144143560 <col:28> 'int' 5
    | | | `-RecoveryExpr 0x1441435e0 <col:34> '<dependent type>' contains-errors lvalue
    | | `-DeclRefExpr 0x144143620 <col:41> 'const unsigned long' lvalue ParmVar 0x144128228 'absref' 'const unsigned long'
    | `-CompoundStmt 0x144144cd8 <line:19:5, line:45:5>
    |   `-IfStmt 0x144144ca8 <line:21:7, line:44:9> has_else
    |     |-BinaryOperator 0x1441436b8 <line:21:11, col:21> 'int' contains-errors '=='
    |     | |-ImplicitCastExpr 0x1441436a0 <col:11> 'int' contains-errors <LValueToRValue>
    |     | | `-DeclRefExpr 0x144143660 <col:11> 'int' contains-errors lvalue Var 0x1441284d8 'offset' 'int'
    |     | `-IntegerLiteral 0x144143680 <col:21> 'int' 1
    |     |-CompoundStmt 0x144144358 <line:22:9, line:26:9>
    |     | |-BinaryOperator 0x144143788 <line:23:11, col:23> '<dependent type>' contains-errors '='
    |     | | |-CXXDependentScopeMemberExpr 0x144143720 <col:11, col:16> '<dependent type>' contains-errors lvalue ->code
    |     | | | `-RecoveryExpr 0x1441436f8 <col:11> '<dependent type>' contains-errors lvalue
    |     | | |   `-DeclRefExpr 0x1441436d8 <col:11> 'int *restrict' lvalue ParmVar 0x144128128 'hdl' 'int *restrict'
    |     | | `-IntegerLiteral 0x144143768 <col:23> 'int' 6
    |     | |-BinaryOperator 0x144144268 <line:24:11, col:24> '<dependent type>' contains-errors '='
    |     | | |-CXXDependentScopeMemberExpr 0x144144200 <col:11, col:16> '<dependent type>' contains-errors lvalue ->value
    |     | | | `-RecoveryExpr 0x1441437c8 <col:11> '<dependent type>' contains-errors lvalue
    |     | | |   `-DeclRefExpr 0x1441437a8 <col:11> 'int *restrict' lvalue ParmVar 0x144128128 'hdl' 'int *restrict'
    |     | | `-IntegerLiteral 0x144144248 <col:24> 'int' 0
    |     | `-BinaryOperator 0x144144338 <line:25:11, col:23> '<dependent type>' contains-errors '='
    |     |   |-CXXDependentScopeMemberExpr 0x1441442d0 <col:11, col:16> '<dependent type>' contains-errors lvalue ->size
    |     |   | `-RecoveryExpr 0x1441442a8 <col:11> '<dependent type>' contains-errors lvalue
    |     |   |   `-DeclRefExpr 0x144144288 <col:11> 'int *restrict' lvalue ParmVar 0x144128128 'hdl' 'int *restrict'
    |     |   `-IntegerLiteral 0x144144318 <col:23> 'int' 0
    |     `-IfStmt 0x144144c78 <line:27:12, line:44:9> has_else
    |       |-BinaryOperator 0x1441443f0 <line:27:16, col:27> 'int' contains-errors '=='
    |       | |-ImplicitCastExpr 0x1441443d8 <col:16> 'int' contains-errors <LValueToRValue>
    |       | | `-DeclRefExpr 0x144144380 <col:16> 'int' contains-errors lvalue Var 0x1441284d8 'offset' 'int'
    |       | `-UnaryOperator 0x1441443c0 <col:26, col:27> 'int' prefix '-'
    |       |   `-IntegerLiteral 0x1441443a0 <col:27> 'int' 1
    |       |-CompoundStmt 0x144144680 <line:28:9, line:32:9>
    |       | |-BinaryOperator 0x1441444c0 <line:29:11, col:23> '<dependent type>' contains-errors '='
    |       | | |-CXXDependentScopeMemberExpr 0x144144458 <col:11, col:16> '<dependent type>' contains-errors lvalue ->code
    |       | | | `-RecoveryExpr 0x144144430 <col:11> '<dependent type>' contains-errors lvalue
    |       | | |   `-DeclRefExpr 0x144144410 <col:11> 'int *restrict' lvalue ParmVar 0x144128128 'hdl' 'int *restrict'
    |       | | `-IntegerLiteral 0x1441444a0 <col:23> 'int' 8
    |       | |-BinaryOperator 0x144144590 <line:30:11, col:24> '<dependent type>' contains-errors '='
    |       | | |-CXXDependentScopeMemberExpr 0x144144528 <col:11, col:16> '<dependent type>' contains-errors lvalue ->value
    |       | | | `-RecoveryExpr 0x144144500 <col:11> '<dependent type>' contains-errors lvalue
    |       | | |   `-DeclRefExpr 0x1441444e0 <col:11> 'int *restrict' lvalue ParmVar 0x144128128 'hdl' 'int *restrict'
    |       | | `-IntegerLiteral 0x144144570 <col:24> 'int' 0
    |       | `-BinaryOperator 0x144144660 <line:31:11, col:23> '<dependent type>' contains-errors '='
    |       |   |-CXXDependentScopeMemberExpr 0x1441445f8 <col:11, col:16> '<dependent type>' contains-errors lvalue ->size
    |       |   | `-RecoveryExpr 0x1441445d0 <col:11> '<dependent type>' contains-errors lvalue
    |       |   |   `-DeclRefExpr 0x1441445b0 <col:11> 'int *restrict' lvalue ParmVar 0x144128128 'hdl' 'int *restrict'
    |       |   `-IntegerLiteral 0x144144640 <col:23> 'int' 0
    |       `-IfStmt 0x144144c48 <line:33:12, line:44:9> has_else
    |         |-BinaryOperator 0x144144700 <line:33:16, col:25> 'int' contains-errors '>'
    |         | |-ImplicitCastExpr 0x1441446e8 <col:16> 'int' contains-errors <LValueToRValue>
    |         | | `-DeclRefExpr 0x1441446a8 <col:16> 'int' contains-errors lvalue Var 0x1441284d8 'offset' 'int'
    |         | `-IntegerLiteral 0x1441446c8 <col:25> 'int' 0
    |         |-CompoundStmt 0x144144928 <line:34:9, line:38:9>
    |         | |-BinaryOperator 0x1441447d0 <line:35:11, col:23> '<dependent type>' contains-errors '='
    |         | | |-CXXDependentScopeMemberExpr 0x144144768 <col:11, col:16> '<dependent type>' contains-errors lvalue ->code
    |         | | | `-RecoveryExpr 0x144144740 <col:11> '<dependent type>' contains-errors lvalue
    |         | | |   `-DeclRefExpr 0x144144720 <col:11> 'int *restrict' lvalue ParmVar 0x144128128 'hdl' 'int *restrict'
    |         | | `-IntegerLiteral 0x1441447b0 <col:23> 'int' 10
    |         | |-BinaryOperator 0x1441448a0 <line:36:11, col:24> '<dependent type>' contains-errors '='
    |         | | |-CXXDependentScopeMemberExpr 0x144144838 <col:11, col:16> '<dependent type>' contains-errors lvalue ->value
    |         | | | `-RecoveryExpr 0x144144810 <col:11> '<dependent type>' contains-errors lvalue
    |         | | |   `-DeclRefExpr 0x1441447f0 <col:11> 'int *restrict' lvalue ParmVar 0x144128128 'hdl' 'int *restrict'
    |         | | `-DeclRefExpr 0x144144880 <col:24> 'int' contains-errors lvalue Var 0x1441284d8 'offset' 'int'
    |         | `-CallExpr 0x144144900 <line:37:11, col:31> '<dependent type>' contains-errors
    |         |   |-DeclRefExpr 0x1441448c0 <col:11> 'int ()' Function 0x1441433c0 'set_handle_size' 'int ()'
    |         |   `-RecoveryExpr 0x1441448e0 <col:28> '<dependent type>' contains-errors lvalue
    |         `-IfStmt 0x144144c28 <line:39:12, line:44:9>
    |           |-BinaryOperator 0x1441449a8 <line:39:16, col:25> 'int' contains-errors '<'
    |           | |-ImplicitCastExpr 0x144144990 <col:16> 'int' contains-errors <LValueToRValue>
    |           | | `-DeclRefExpr 0x144144950 <col:16> 'int' contains-errors lvalue Var 0x1441284d8 'offset' 'int'
    |           | `-IntegerLiteral 0x144144970 <col:25> 'int' 0
    |           `-CompoundStmt 0x144144c00 <line:40:9, line:44:9>
    |             |-BinaryOperator 0x144144a78 <line:41:11, col:23> '<dependent type>' contains-errors '='
    |             | |-CXXDependentScopeMemberExpr 0x144144a10 <col:11, col:16> '<dependent type>' contains-errors lvalue ->code
    |             | | `-RecoveryExpr 0x1441449e8 <col:11> '<dependent type>' contains-errors lvalue
    |             | |   `-DeclRefExpr 0x1441449c8 <col:11> 'int *restrict' lvalue ParmVar 0x144128128 'hdl' 'int *restrict'
    |             | `-IntegerLiteral 0x144144a58 <col:23> 'int' 12
    |             |-BinaryOperator 0x144144b78 <line:42:11, col:25> '<dependent type>' contains-errors '='
    |             | |-CXXDependentScopeMemberExpr 0x144144ae0 <col:11, col:16> '<dependent type>' contains-errors lvalue ->value
    |             | | `-RecoveryExpr 0x144144ab8 <col:11> '<dependent type>' contains-errors lvalue
    |             | |   `-DeclRefExpr 0x144144a98 <col:11> 'int *restrict' lvalue ParmVar 0x144128128 'hdl' 'int *restrict'
    |             | `-UnaryOperator 0x144144b60 <col:24, col:25> 'int' contains-errors prefix '-'
    |             |   `-ImplicitCastExpr 0x144144b48 <col:25> 'int' contains-errors <LValueToRValue>
    |             |     `-DeclRefExpr 0x144144b28 <col:25> 'int' contains-errors lvalue Var 0x1441284d8 'offset' 'int'
    |             `-CallExpr 0x144144bd8 <line:43:11, col:31> '<dependent type>' contains-errors
    |               |-DeclRefExpr 0x144144b98 <col:11> 'int ()' Function 0x1441433c0 'set_handle_size' 'int ()'
    |               `-RecoveryExpr 0x144144bb8 <col:28> '<dependent type>' contains-errors lvalue
    `-ReturnStmt 0x144144d30 <line:46:3, col:10>
      `-IntegerLiteral 0x144144d10 <col:10> 'int' 0
