`-FunctionDecl 0x11e80e078  line:1:14 invalid xml_call_handler 'int *(int *, int *, int *, int, int **)' static
  |-ParmVarDecl 0x11e80dd28 <col:31, col:43> col:43 invalid parser 'int *'
  |-ParmVarDecl 0x11e80dda8 <col:51, col:57> col:57 invalid handler 'int *'
  |-ParmVarDecl 0x11e80de28 <col:66, col:81> col:81 invalid function_ptr 'int *'
  |-ParmVarDecl 0x11e80dea8 <col:95, col:99> col:99 used argc 'int'
  |-ParmVarDecl 0x11e80df60 <col:105, col:112> col:112 referenced invalid argv 'int **'
  `-CompoundStmt 0x11e125f80 <line:2:1, line:60:1>
    |-DeclStmt 0x11e80e1c8 <line:3:2, col:7>
    | `-VarDecl 0x11e80e160 <col:2, col:6> col:6 used i 'int'
    |-CallExpr 0x11e80e3a8 <line:4:2, col:15> 'int'
    | `-ImplicitCastExpr 0x11e80e390 <col:2> 'int (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x11e80e340 <col:2> 'int ()' Function 0x11e80e288 'TSRMLS_FETCH' 'int ()'
    `-IfStmt 0x11e125f50 <line:6:2, line:59:2> has_else
      |-BinaryOperator 0x11e123618 <line:6:6, col:40> 'int' contains-errors '&&'
      | |-BinaryOperator 0x11e123420 <col:6, col:16> 'int' contains-errors '&&'
      | | |-RecoveryExpr 0x11e80e3c8 <col:6> '<dependent type>' contains-errors lvalue
      | | `-RecoveryExpr 0x11e123400 <col:16> '<dependent type>' contains-errors lvalue
      | `-UnaryOperator 0x11e123600 <col:27, col:40> '<dependent type>' contains-errors prefix '!' cannot overflow
      |   `-CallExpr 0x11e1235d8 <col:28, col:40> '<dependent type>' contains-errors
      |     |-DeclRefExpr 0x11e123520 <col:28> 'int ()' Function 0x11e123468 'EG' 'int ()'
      |     `-RecoveryExpr 0x11e1235b8 <col:31> '<dependent type>' contains-errors lvalue
      |-CompoundStmt 0x11e125c98 <col:43, line:54:2>
      | |-DeclStmt 0x11e123788 <line:9:3, col:13>
      | | `-VarDecl 0x11e123720 <col:3, col:7> col:7 used result 'int'
      | |-ForStmt 0x11e123bd8 <line:13:3, line:15:3>
      | | |-BinaryOperator 0x11e123990 <line:13:8, col:12> 'int' '='
      | | | |-DeclRefExpr 0x11e123950 <col:8> 'int' lvalue Var 0x11e80e160 'i' 'int'
      | | | `-IntegerLiteral 0x11e123970 <col:12> 'int' 0
      | | |-<<<NULL>>>
      | | |-BinaryOperator 0x11e123a20 <col:15, col:19> 'int' '<'
      | | | |-ImplicitCastExpr 0x11e1239f0 <col:15> 'int' <LValueToRValue>
      | | | | `-DeclRefExpr 0x11e1239b0 <col:15> 'int' lvalue Var 0x11e80e160 'i' 'int'
      | | | `-ImplicitCastExpr 0x11e123a08 <col:19> 'int' <LValueToRValue>
      | | |   `-DeclRefExpr 0x11e1239d0 <col:19> 'int' lvalue ParmVar 0x11e80dea8 'argc' 'int'
      | | |-UnaryOperator 0x11e123a60 <col:25, col:26> 'int' postfix '++'
      | | | `-DeclRefExpr 0x11e123a40 <col:25> 'int' lvalue Var 0x11e80e160 'i' 'int'
      | | `-CompoundStmt 0x11e123bc8 <col:30, line:15:3>
      | |-IfStmt 0x11e125838 <line:29:3, line:42:3>
      | | |-RecoveryExpr 0x11e123e38 <line:29:7, col:17> '_Bool' contains-errors
      | | `-CompoundStmt 0x11e125820 <col:26, line:42:3>
      | |   `-IfStmt 0x11e1257f0 <line:33:4, line:41:5> has_else
      | |     |-RecoveryExpr 0x11e123fa0 <line:33:8, col:29> '_Bool' contains-errors
      | |     |-CompoundStmt 0x11e124268 <col:40, line:35:4>
      | |     `-IfStmt 0x11e1257c0 <col:11, line:41:5> has_else
      | |       |-RecoveryExpr 0x11e125508 <line:35:15, line:38:30> '_Bool' contains-errors
      | |       |-CompoundStmt 0x11e125768 <col:41, line:40:4>
      | |       `-NullStmt 0x11e1257b8 <line:41:5>
      | |-ForStmt 0x11e125ab0 <line:44:3, line:46:3>
      | | |-BinaryOperator 0x11e125898 <line:44:8, col:12> 'int' '='
      | | | |-DeclRefExpr 0x11e125858 <col:8> 'int' lvalue Var 0x11e80e160 'i' 'int'
      | | | `-IntegerLiteral 0x11e125878 <col:12> 'int' 0
      | | |-<<<NULL>>>
      | | |-BinaryOperator 0x11e125928 <col:15, col:19> 'int' '<'
      | | | |-ImplicitCastExpr 0x11e1258f8 <col:15> 'int' <LValueToRValue>
      | | | | `-DeclRefExpr 0x11e1258b8 <col:15> 'int' lvalue Var 0x11e80e160 'i' 'int'
      | | | `-ImplicitCastExpr 0x11e125910 <col:19> 'int' <LValueToRValue>
      | | |   `-DeclRefExpr 0x11e1258d8 <col:19> 'int' lvalue ParmVar 0x11e80dea8 'argc' 'int'
      | | |-UnaryOperator 0x11e125968 <col:25, col:26> 'int' postfix '++'
      | | | `-DeclRefExpr 0x11e125948 <col:25> 'int' lvalue Var 0x11e80e160 'i' 'int'
      | | `-CompoundStmt 0x11e125aa0 <col:30, line:46:3>
      | `-IfStmt 0x11e125c68 <line:49:3, line:53:3> has_else
      |   |-RecoveryExpr 0x11e125c08 <line:49:7, col:17> '_Bool' contains-errors
      |   |-CompoundStmt 0x11e125c28 <col:26, line:51:3>
      |   `-CompoundStmt 0x11e125c58 <col:10, line:53:3>
      `-CompoundStmt 0x11e125f38 <line:54:9, line:59:2>
        `-ForStmt 0x11e125f00 <line:55:3, line:57:3>
          |-BinaryOperator 0x11e125d10 <line:55:8, col:12> 'int' '='
          | |-DeclRefExpr 0x11e125cd0 <col:8> 'int' lvalue Var 0x11e80e160 'i' 'int'
          | `-IntegerLiteral 0x11e125cf0 <col:12> 'int' 0
          |-<<<NULL>>>
          |-BinaryOperator 0x11e125da0 <col:15, col:19> 'int' '<'
          | |-ImplicitCastExpr 0x11e125d70 <col:15> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x11e125d30 <col:15> 'int' lvalue Var 0x11e80e160 'i' 'int'
          | `-ImplicitCastExpr 0x11e125d88 <col:19> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x11e125d50 <col:19> 'int' lvalue ParmVar 0x11e80dea8 'argc' 'int'
          |-UnaryOperator 0x11e125de0 <col:25, col:26> 'int' postfix '++'
          | `-DeclRefExpr 0x11e125dc0 <col:25> 'int' lvalue Var 0x11e80e160 'i' 'int'
          `-CompoundStmt 0x11e125ee8 <col:30, line:57:3>
            `-CallExpr 0x11e125ec0 <line:56:4, col:26> '<dependent type>' contains-errors
              |-DeclRefExpr 0x11e125df8 <col:4> 'int ()' Function 0x11e1259a8 'zval_ptr_dtor' 'int ()'
              `-UnaryOperator 0x11e125ea8 <col:18, col:25> '<dependent type>' contains-errors prefix '&' cannot overflow
                `-ArraySubscriptExpr 0x11e125e88 <col:19, col:25> '<dependent type>' contains-errors lvalue
                  |-ImplicitCastExpr 0x11e125e58 <col:19> '<dependent type>' contains-errors <LValueToRValue>
                  | `-RecoveryExpr 0x11e125e18 <col:19> '<dependent type>' contains-errors lvalue
                  `-ImplicitCastExpr 0x11e125e70 <col:24> 'int' <LValueToRValue>
                    `-DeclRefExpr 0x11e125e38 <col:24> 'int' lvalue Var 0x11e80e160 'i' 'int'
