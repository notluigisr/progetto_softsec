`-FunctionDecl 0x13800def8  line:1:7 uwsgi_get_line 'char *(char *, char *, int *)'
  |-ParmVarDecl 0x13800dcd8 <col:22, col:28> col:28 used ptr 'char *'
  |-ParmVarDecl 0x13800dd58 <col:33, col:39> col:39 used watermark 'char *'
  |-ParmVarDecl 0x13800de08 <col:50, col:55> col:55 used size 'int *'
  `-CompoundStmt 0x138026788 <col:61, line:15:1>
    |-DeclStmt 0x13800e0b8 <line:2:2, col:15>
    | `-VarDecl 0x13800e018 <col:2, col:12> col:8 used p 'char *' cinit
    |   `-ImplicitCastExpr 0x13800e0a0 <col:12> 'char *' <LValueToRValue>
    |     `-DeclRefExpr 0x13800e080 <col:12> 'char *' lvalue ParmVar 0x13800dcd8 'ptr' 'char *'
    |-DeclStmt 0x13800e170 <line:3:2, col:15>
    | `-VarDecl 0x13800e0e8 <col:2, col:14> col:6 used count 'int' cinit
    |   `-IntegerLiteral 0x13800e150 <col:14> 'int' 0
    |-WhileStmt 0x138026708 <line:5:2, line:12:2>
    | |-BinaryOperator 0x13800e1f8 <line:5:9, col:13> 'int' '<'
    | | |-ImplicitCastExpr 0x13800e1c8 <col:9> 'char *' <LValueToRValue>
    | | | `-DeclRefExpr 0x13800e188 <col:9> 'char *' lvalue Var 0x13800e018 'p' 'char *'
    | | `-ImplicitCastExpr 0x13800e1e0 <col:13> 'char *' <LValueToRValue>
    | |   `-DeclRefExpr 0x13800e1a8 <col:13> 'char *' lvalue ParmVar 0x13800dd58 'watermark' 'char *'
    | `-CompoundStmt 0x1380266e0 <col:24, line:12:2>
    |   |-IfStmt 0x138026650 <line:6:3, line:9:3>
    |   | |-BinaryOperator 0x13800e2b0 <line:6:7, col:13> 'int' '=='
    |   | | |-ImplicitCastExpr 0x13800e298 <col:7, col:8> 'int' <IntegralCast>
    |   | | | `-ImplicitCastExpr 0x13800e280 <col:7, col:8> 'char' <LValueToRValue>
    |   | | |   `-UnaryOperator 0x13800e250 <col:7, col:8> 'char' lvalue prefix '*' cannot overflow
    |   | | |     `-ImplicitCastExpr 0x13800e238 <col:8> 'char *' <LValueToRValue>
    |   | | |       `-DeclRefExpr 0x13800e218 <col:8> 'char *' lvalue Var 0x13800e018 'p' 'char *'
    |   | | `-CharacterLiteral 0x13800e268 <col:13> 'int' 10
    |   | `-CompoundStmt 0x138026630 <col:19, line:9:3>
    |   |   |-BinaryOperator 0x13800e358 <line:7:4, col:12> 'int' '='
    |   |   | |-UnaryOperator 0x13800e308 <col:4, col:5> 'int' lvalue prefix '*' cannot overflow
    |   |   | | `-ImplicitCastExpr 0x13800e2f0 <col:5> 'int *' <LValueToRValue>
    |   |   | |   `-DeclRefExpr 0x13800e2d0 <col:5> 'int *' lvalue ParmVar 0x13800de08 'size' 'int *'
    |   |   | `-ImplicitCastExpr 0x13800e340 <col:12> 'int' <LValueToRValue>
    |   |   |   `-DeclRefExpr 0x13800e320 <col:12> 'int' lvalue Var 0x13800e0e8 'count' 'int'
    |   |   `-ReturnStmt 0x138026620 <line:8:4, col:17>
    |   |     `-BinaryOperator 0x138026600 <col:11, col:17> 'char *' '+'
    |   |       |-ImplicitCastExpr 0x13800e3b8 <col:11> 'char *' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x13800e378 <col:11> 'char *' lvalue ParmVar 0x13800dcd8 'ptr' 'char *'
    |   |       `-ImplicitCastExpr 0x13800e3d0 <col:17> 'int' <LValueToRValue>
    |   |         `-DeclRefExpr 0x13800e398 <col:17> 'int' lvalue Var 0x13800e0e8 'count' 'int'
    |   |-UnaryOperator 0x138026690 <line:10:3, col:8> 'int' postfix '++'
    |   | `-DeclRefExpr 0x138026670 <col:3> 'int' lvalue Var 0x13800e0e8 'count' 'int'
    |   `-UnaryOperator 0x1380266c8 <line:11:3, col:4> 'char *' postfix '++'
    |     `-DeclRefExpr 0x1380266a8 <col:3> 'char *' lvalue Var 0x13800e018 'p' 'char *'
    `-ReturnStmt 0x138026778 <line:14:2, col:9>
      `-RecoveryExpr 0x138026758 <col:9> '<dependent type>' contains-errors lvalue
