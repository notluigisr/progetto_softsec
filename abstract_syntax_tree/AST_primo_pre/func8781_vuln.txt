`-FunctionDecl 0x14280dec8  line:1:1 spa_base64_to_bits 'int (char *, int, const char *)'
  |-ParmVarDecl 0x14280dcd8 <col:21, col:27> col:27 used out 'char *'
  |-ParmVarDecl 0x14280dd58 <col:32, col:36> col:36 used outlength 'int'
  |-ParmVarDecl 0x14280ddd8 <col:47, col:59> col:59 used in 'const char *'
  `-CompoundStmt 0x14282abc8 <line:3:1, line:50:1>
    |-DeclStmt 0x14280e070 <line:4:3, col:14>
    | `-VarDecl 0x14280dfe8 <col:3, col:13> col:7 used len 'int' cinit
    |   `-IntegerLiteral 0x14280e050 <col:13> 'int' 0
    |-DeclStmt 0x14280e2a8 <line:5:3, col:49>
    | |-VarDecl 0x14280e0b0 <col:3, col:19> col:19 used digit1 'char' register
    | |-VarDecl 0x14280e128 <col:3, col:27> col:27 used digit2 'char' register
    | |-VarDecl 0x14280e1a0 <col:3, col:35> col:35 used digit3 'char' register
    | `-VarDecl 0x14280e218 <col:3, col:43> col:43 used digit4 'char' register
    |-IfStmt 0x142826718 <line:7:3, line:8:11>
    | |-BinaryOperator 0x142826688 <line:7:7, col:32> 'int' '&&'
    | | |-BinaryOperator 0x14280e380 <col:7, col:16> 'int' '=='
    | | | |-ImplicitCastExpr 0x14280e368 <col:7, col:11> 'int' <IntegralCast>
    | | | | `-ImplicitCastExpr 0x14280e350 <col:7, col:11> 'char' <LValueToRValue>
    | | | |   `-ArraySubscriptExpr 0x14280e318 <col:7, col:11> 'const char' lvalue
    | | | |     |-ImplicitCastExpr 0x14280e300 <col:7> 'const char *' <LValueToRValue>
    | | | |     | `-DeclRefExpr 0x14280e2c0 <col:7> 'const char *' lvalue ParmVar 0x14280ddd8 'in' 'const char *'
    | | | |     `-IntegerLiteral 0x14280e2e0 <col:10> 'int' 0
    | | | `-CharacterLiteral 0x14280e338 <col:16> 'int' 43
    | | `-BinaryOperator 0x142826668 <col:23, col:32> 'int' '=='
    | |   |-ImplicitCastExpr 0x142826650 <col:23, col:27> 'int' <IntegralCast>
    | |   | `-ImplicitCastExpr 0x142826638 <col:23, col:27> 'char' <LValueToRValue>
    | |   |   `-ArraySubscriptExpr 0x142826600 <col:23, col:27> 'const char' lvalue
    | |   |     |-ImplicitCastExpr 0x14280e3e0 <col:23> 'const char *' <LValueToRValue>
    | |   |     | `-DeclRefExpr 0x14280e3a0 <col:23> 'const char *' lvalue ParmVar 0x14280ddd8 'in' 'const char *'
    | |   |     `-IntegerLiteral 0x14280e3c0 <col:26> 'int' 1
    | |   `-CharacterLiteral 0x142826620 <col:32> 'int' 32
    | `-CompoundAssignOperator 0x1428266e8 <line:8:5, col:11> 'const char *' '+=' ComputeLHSTy='const char *' ComputeResultTy='const char *'
    |   |-DeclRefExpr 0x1428266a8 <col:5> 'const char *' lvalue ParmVar 0x14280ddd8 'in' 'const char *'
    |   `-IntegerLiteral 0x1428266c8 <col:11> 'int' 2
    |-IfStmt 0x142826840 <line:9:3, line:10:14>
    | |-BinaryOperator 0x1428267d0 <line:9:7, col:14> 'int' '=='
    | | |-ImplicitCastExpr 0x1428267b8 <col:7, col:8> 'int' <IntegralCast>
    | | | `-ImplicitCastExpr 0x1428267a0 <col:7, col:8> 'char' <LValueToRValue>
    | | |   `-UnaryOperator 0x142826770 <col:7, col:8> 'const char' lvalue prefix '*' cannot overflow
    | | |     `-ImplicitCastExpr 0x142826758 <col:8> 'const char *' <LValueToRValue>
    | | |       `-DeclRefExpr 0x142826738 <col:8> 'const char *' lvalue ParmVar 0x14280ddd8 'in' 'const char *'
    | | `-CharacterLiteral 0x142826788 <col:14> 'int' 13
    | `-ReturnStmt 0x142826830 <line:10:5, col:14>
    |   `-ParenExpr 0x142826810 <col:12, col:14> 'int'
    |     `-IntegerLiteral 0x1428267f0 <col:13> 'int' 0
    |-DoStmt 0x14282ab40 <line:12:3, line:47:45>
    | |-CompoundStmt 0x14282a8c8 <line:13:5, line:46:5>
    | | |-IfStmt 0x142826958 <line:14:7, line:15:19>
    | | | |-BinaryOperator 0x1428268d0 <line:14:11, col:18> 'int' '>='
    | | | | |-ImplicitCastExpr 0x1428268a0 <col:11> 'int' <LValueToRValue>
    | | | | | `-DeclRefExpr 0x142826860 <col:11> 'int' lvalue Var 0x14280dfe8 'len' 'int'
    | | | | `-ImplicitCastExpr 0x1428268b8 <col:18> 'int' <LValueToRValue>
    | | | |   `-DeclRefExpr 0x142826880 <col:18> 'int' lvalue ParmVar 0x14280dd58 'outlength' 'int'
    | | | `-ReturnStmt 0x142826948 <line:15:9, col:19>
    | | |   `-ParenExpr 0x142826928 <col:16, col:19> 'int'
    | | |     `-UnaryOperator 0x142826910 <col:17, col:18> 'int' prefix '-'
    | | |       `-IntegerLiteral 0x1428268f0 <col:18> 'int' 1
    | | |-BinaryOperator 0x142826a28 <line:16:7, col:20> 'char' '='
    | | | |-DeclRefExpr 0x142826978 <col:7> 'char' lvalue Var 0x14280e0b0 'digit1' 'char'
    | | | `-ImplicitCastExpr 0x142826a10 <col:16, col:20> 'char' <LValueToRValue>
    | | |   `-ArraySubscriptExpr 0x1428269f0 <col:16, col:20> 'const char' lvalue
    | | |     |-ImplicitCastExpr 0x1428269d8 <col:16> 'const char *' <LValueToRValue>
    | | |     | `-DeclRefExpr 0x142826998 <col:16> 'const char *' lvalue ParmVar 0x14280ddd8 'in' 'const char *'
    | | |     `-IntegerLiteral 0x1428269b8 <col:19> 'int' 0
    | | |-IfStmt 0x142826e00 <line:17:7, line:18:18>
    | | | |-BinaryOperator 0x142826d78 <line:17:11, col:32> 'int' contains-errors '=='
    | | | | |-CallExpr 0x142826d00 <col:11, col:27> 'int'
    | | | | | |-ImplicitCastExpr 0x142826ce8 <col:11> 'int (*)()' <FunctionToPointerDecay>
    | | | | | | `-DeclRefExpr 0x142826b60 <col:11> 'int ()' Function 0x142826aa8 'DECODE64' 'int ()'
    | | | | | `-ImplicitCastExpr 0x142826d40 <col:21> 'int' <IntegralCast>
    | | | | |   `-ImplicitCastExpr 0x142826d28 <col:21> 'char' <LValueToRValue>
    | | | | |     `-DeclRefExpr 0x142826b80 <col:21> 'char' lvalue Var 0x14280e0b0 'digit1' 'char'
    | | | | `-RecoveryExpr 0x142826d58 <col:32> '<dependent type>' contains-errors lvalue
    | | | `-ReturnStmt 0x142826df0 <line:18:8, col:18>
    | | |   `-ParenExpr 0x142826dd0 <col:15, col:18> 'int'
    | | |     `-UnaryOperator 0x142826db8 <col:16, col:17> 'int' prefix '-'
    | | |       `-IntegerLiteral 0x142826d98 <col:17> 'int' 1
    | | |-BinaryOperator 0x142826ed0 <line:19:7, col:20> 'char' '='
    | | | |-DeclRefExpr 0x142826e20 <col:7> 'char' lvalue Var 0x14280e128 'digit2' 'char'
    | | | `-ImplicitCastExpr 0x142826eb8 <col:16, col:20> 'char' <LValueToRValue>
    | | |   `-ArraySubscriptExpr 0x142826e98 <col:16, col:20> 'const char' lvalue
    | | |     |-ImplicitCastExpr 0x142826e80 <col:16> 'const char *' <LValueToRValue>
    | | |     | `-DeclRefExpr 0x142826e40 <col:16> 'const char *' lvalue ParmVar 0x14280ddd8 'in' 'const char *'
    | | |     `-IntegerLiteral 0x142826e60 <col:19> 'int' 1
    | | |-IfStmt 0x142827160 <line:20:7, line:21:18>
    | | | |-BinaryOperator 0x1428270d8 <line:20:11, col:32> 'int' contains-errors '=='
    | | | | |-CallExpr 0x142827060 <col:11, col:27> 'int'
    | | | | | |-ImplicitCastExpr 0x142827048 <col:11> 'int (*)()' <FunctionToPointerDecay>
    | | | | | | `-DeclRefExpr 0x142826ef0 <col:11> 'int ()' Function 0x142826aa8 'DECODE64' 'int ()'
    | | | | | `-ImplicitCastExpr 0x1428270a0 <col:21> 'int' <IntegralCast>
    | | | | |   `-ImplicitCastExpr 0x142827088 <col:21> 'char' <LValueToRValue>
    | | | | |     `-DeclRefExpr 0x142826f10 <col:21> 'char' lvalue Var 0x14280e128 'digit2' 'char'
    | | | | `-RecoveryExpr 0x1428270b8 <col:32> '<dependent type>' contains-errors lvalue
    | | | `-ReturnStmt 0x142827150 <line:21:8, col:18>
    | | |   `-ParenExpr 0x142827130 <col:15, col:18> 'int'
    | | |     `-UnaryOperator 0x142827118 <col:16, col:17> 'int' prefix '-'
    | | |       `-IntegerLiteral 0x1428270f8 <col:17> 'int' 1
    | | |-BinaryOperator 0x142827230 <line:22:7, col:20> 'char' '='
    | | | |-DeclRefExpr 0x142827180 <col:7> 'char' lvalue Var 0x14280e1a0 'digit3' 'char'
    | | | `-ImplicitCastExpr 0x142827218 <col:16, col:20> 'char' <LValueToRValue>
    | | |   `-ArraySubscriptExpr 0x1428271f8 <col:16, col:20> 'const char' lvalue
    | | |     |-ImplicitCastExpr 0x1428271e0 <col:16> 'const char *' <LValueToRValue>
    | | |     | `-DeclRefExpr 0x1428271a0 <col:16> 'const char *' lvalue ParmVar 0x14280ddd8 'in' 'const char *'
    | | |     `-IntegerLiteral 0x1428271c0 <col:19> 'int' 2
    | | |-IfStmt 0x142828e30 <line:23:7, line:24:18>
    | | | |-BinaryOperator 0x1428275a0 <line:23:11, col:49> 'int' contains-errors '&&'
    | | | | |-BinaryOperator 0x1428274d0 <col:11, col:21> 'int' '!='
    | | | | | |-ImplicitCastExpr 0x1428274b8 <col:11> 'int' <IntegralCast>
    | | | | | | `-ImplicitCastExpr 0x1428274a0 <col:11> 'char' <LValueToRValue>
    | | | | | |   `-DeclRefExpr 0x142827250 <col:11> 'char' lvalue Var 0x14280e1a0 'digit3' 'char'
    | | | | | `-CharacterLiteral 0x142827270 <col:21> 'int' 61
    | | | | `-BinaryOperator 0x142827580 <col:28, col:49> 'int' contains-errors '=='
    | | | |   |-CallExpr 0x142827508 <col:28, col:44> 'int'
    | | | |   | |-ImplicitCastExpr 0x1428274f0 <col:28> 'int (*)()' <FunctionToPointerDecay>
    | | | |   | | `-DeclRefExpr 0x1428272d8 <col:28> 'int ()' Function 0x142826aa8 'DECODE64' 'int ()'
    | | | |   | `-ImplicitCastExpr 0x142827548 <col:38> 'int' <IntegralCast>
    | | | |   |   `-ImplicitCastExpr 0x142827530 <col:38> 'char' <LValueToRValue>
    | | | |   |     `-DeclRefExpr 0x1428272f8 <col:38> 'char' lvalue Var 0x14280e1a0 'digit3' 'char'
    | | | |   `-RecoveryExpr 0x142827560 <col:49> '<dependent type>' contains-errors lvalue
    | | | `-ReturnStmt 0x142828e20 <line:24:8, col:18>
    | | |   `-ParenExpr 0x142828e00 <col:15, col:18> 'int'
    | | |     `-UnaryOperator 0x1428275e0 <col:16, col:17> 'int' prefix '-'
    | | |       `-IntegerLiteral 0x1428275c0 <col:17> 'int' 1
    | | |-BinaryOperator 0x142828f00 <line:25:7, col:20> 'char' '='
    | | | |-DeclRefExpr 0x142828e50 <col:7> 'char' lvalue Var 0x14280e218 'digit4' 'char'
    | | | `-ImplicitCastExpr 0x142828ee8 <col:16, col:20> 'char' <LValueToRValue>
    | | |   `-ArraySubscriptExpr 0x142828ec8 <col:16, col:20> 'const char' lvalue
    | | |     |-ImplicitCastExpr 0x142828eb0 <col:16> 'const char *' <LValueToRValue>
    | | |     | `-DeclRefExpr 0x142828e70 <col:16> 'const char *' lvalue ParmVar 0x14280ddd8 'in' 'const char *'
    | | |     `-IntegerLiteral 0x142828e90 <col:19> 'int' 3
    | | |-IfStmt 0x1428292f8 <line:26:7, line:27:18>
    | | | |-BinaryOperator 0x142829270 <line:26:11, col:49> 'int' contains-errors '&&'
    | | | | |-BinaryOperator 0x1428291a0 <col:11, col:21> 'int' '!='
    | | | | | |-ImplicitCastExpr 0x142829188 <col:11> 'int' <IntegralCast>
    | | | | | | `-ImplicitCastExpr 0x142829170 <col:11> 'char' <LValueToRValue>
    | | | | | |   `-DeclRefExpr 0x142828f20 <col:11> 'char' lvalue Var 0x14280e218 'digit4' 'char'
    | | | | | `-CharacterLiteral 0x142828f40 <col:21> 'int' 61
    | | | | `-BinaryOperator 0x142829250 <col:28, col:49> 'int' contains-errors '=='
    | | | |   |-CallExpr 0x1428291d8 <col:28, col:44> 'int'
    | | | |   | |-ImplicitCastExpr 0x1428291c0 <col:28> 'int (*)()' <FunctionToPointerDecay>
    | | | |   | | `-DeclRefExpr 0x142828fa8 <col:28> 'int ()' Function 0x142826aa8 'DECODE64' 'int ()'
    | | | |   | `-ImplicitCastExpr 0x142829218 <col:38> 'int' <IntegralCast>
    | | | |   |   `-ImplicitCastExpr 0x142829200 <col:38> 'char' <LValueToRValue>
    | | | |   |     `-DeclRefExpr 0x142828fc8 <col:38> 'char' lvalue Var 0x14280e218 'digit4' 'char'
    | | | |   `-RecoveryExpr 0x142829230 <col:49> '<dependent type>' contains-errors lvalue
    | | | `-ReturnStmt 0x1428292e8 <line:27:8, col:18>
    | | |   `-ParenExpr 0x1428292c8 <col:15, col:18> 'int'
    | | |     `-UnaryOperator 0x1428292b0 <col:16, col:17> 'int' prefix '-'
    | | |       `-IntegerLiteral 0x142829290 <col:17> 'int' 1
    | | |-CompoundAssignOperator 0x142829358 <line:28:7, col:13> 'const char *' '+=' ComputeLHSTy='const char *' ComputeResultTy='const char *'
    | | | |-DeclRefExpr 0x142829318 <col:7> 'const char *' lvalue ParmVar 0x14280ddd8 'in' 'const char *'
    | | | `-IntegerLiteral 0x142829338 <col:13> 'int' 4
    | | |-BinaryOperator 0x142829630 <line:29:7, col:66> 'char' '='
    | | | |-UnaryOperator 0x1428293c0 <col:7, col:11> 'char' lvalue prefix '*' cannot overflow
    | | | | `-UnaryOperator 0x1428293a8 <col:8, col:11> 'char *' postfix '++'
    | | | |   `-DeclRefExpr 0x142829388 <col:8> 'char *' lvalue ParmVar 0x14280dcd8 'out' 'char *'
    | | | `-ImplicitCastExpr 0x142829618 <col:16, col:66> 'char' <IntegralCast>
    | | |   `-BinaryOperator 0x1428295f8 <col:16, col:66> 'int' '|'
    | | |     |-ParenExpr 0x1428294c8 <col:16, col:39> 'int'
    | | |     | `-BinaryOperator 0x1428294a8 <col:17, col:38> 'int' '<<'
    | | |     |   |-CallExpr 0x142829430 <col:17, col:33> 'int'
    | | |     |   | |-ImplicitCastExpr 0x142829418 <col:17> 'int (*)()' <FunctionToPointerDecay>
    | | |     |   | | `-DeclRefExpr 0x1428293d8 <col:17> 'int ()' Function 0x142826aa8 'DECODE64' 'int ()'
    | | |     |   | `-ImplicitCastExpr 0x142829470 <col:27> 'int' <IntegralCast>
    | | |     |   |   `-ImplicitCastExpr 0x142829458 <col:27> 'char' <LValueToRValue>
    | | |     |   |     `-DeclRefExpr 0x1428293f8 <col:27> 'char' lvalue Var 0x14280e0b0 'digit1' 'char'
    | | |     |   `-IntegerLiteral 0x142829488 <col:38> 'int' 2
    | | |     `-ParenExpr 0x1428295d8 <col:43, col:66> 'int'
    | | |       `-BinaryOperator 0x1428295b8 <col:44, col:65> 'int' '>>'
    | | |         |-CallExpr 0x142829540 <col:44, col:60> 'int'
    | | |         | |-ImplicitCastExpr 0x142829528 <col:44> 'int (*)()' <FunctionToPointerDecay>
    | | |         | | `-DeclRefExpr 0x1428294e8 <col:44> 'int ()' Function 0x142826aa8 'DECODE64' 'int ()'
    | | |         | `-ImplicitCastExpr 0x142829580 <col:54> 'int' <IntegralCast>
    | | |         |   `-ImplicitCastExpr 0x142829568 <col:54> 'char' <LValueToRValue>
    | | |         |     `-DeclRefExpr 0x142829508 <col:54> 'char' lvalue Var 0x14280e128 'digit2' 'char'
    | | |         `-IntegerLiteral 0x142829598 <col:65> 'int' 4
    | | |-UnaryOperator 0x142829670 <line:30:7, col:9> 'int' prefix '++'
    | | | `-DeclRefExpr 0x142829650 <col:9> 'int' lvalue Var 0x14280dfe8 'len' 'int'
    | | `-IfStmt 0x14282a8a8 <line:31:7, line:45:8>
    | |   |-BinaryOperator 0x1428296f0 <line:31:11, col:21> 'int' '!='
    | |   | |-ImplicitCastExpr 0x1428296d8 <col:11> 'int' <IntegralCast>
    | |   | | `-ImplicitCastExpr 0x1428296c0 <col:11> 'char' <LValueToRValue>
    | |   | |   `-DeclRefExpr 0x142829688 <col:11> 'char' lvalue Var 0x14280e1a0 'digit3' 'char'
    | |   | `-CharacterLiteral 0x1428296a8 <col:21> 'int' 61
    | |   `-CompoundStmt 0x14282a878 <line:32:8, line:45:8>
    | |     |-IfStmt 0x142829808 <line:33:10, line:34:22>
    | |     | |-BinaryOperator 0x142829780 <line:33:14, col:21> 'int' '>='
    | |     | | |-ImplicitCastExpr 0x142829750 <col:14> 'int' <LValueToRValue>
    | |     | | | `-DeclRefExpr 0x142829710 <col:14> 'int' lvalue Var 0x14280dfe8 'len' 'int'
    | |     | | `-ImplicitCastExpr 0x142829768 <col:21> 'int' <LValueToRValue>
    | |     | |   `-DeclRefExpr 0x142829730 <col:21> 'int' lvalue ParmVar 0x14280dd58 'outlength' 'int'
    | |     | `-ReturnStmt 0x1428297f8 <line:34:12, col:22>
    | |     |   `-ParenExpr 0x1428297d8 <col:19, col:22> 'int'
    | |     |     `-UnaryOperator 0x1428297c0 <col:20, col:21> 'int' prefix '-'
    | |     |       `-IntegerLiteral 0x1428297a0 <col:21> 'int' 1
    | |     |-BinaryOperator 0x142829b30 <line:35:10, line:36:71> 'char' '='
    | |     | |-UnaryOperator 0x142829860 <line:35:10, col:14> 'char' lvalue prefix '*' cannot overflow
    | |     | | `-UnaryOperator 0x142829848 <col:11, col:14> 'char *' postfix '++'
    | |     | |   `-DeclRefExpr 0x142829828 <col:11> 'char *' lvalue ParmVar 0x14280dcd8 'out' 'char *'
    | |     | `-ImplicitCastExpr 0x142829b18 <line:36:12, col:71> 'char' <IntegralCast>
    | |     |   `-BinaryOperator 0x142829af8 <col:12, col:71> 'int' '|'
    | |     |     |-ParenExpr 0x1428299c8 <col:12, col:44> 'int'
    | |     |     | `-BinaryOperator 0x1428299a8 <col:13, col:40> 'int' '&'
    | |     |     |   |-ParenExpr 0x142829968 <col:13, col:36> 'int'
    | |     |     |   | `-BinaryOperator 0x142829948 <col:14, col:35> 'int' '<<'
    | |     |     |   |   |-CallExpr 0x1428298d0 <col:14, col:30> 'int'
    | |     |     |   |   | |-ImplicitCastExpr 0x1428298b8 <col:14> 'int (*)()' <FunctionToPointerDecay>
    | |     |     |   |   | | `-DeclRefExpr 0x142829878 <col:14> 'int ()' Function 0x142826aa8 'DECODE64' 'int ()'
    | |     |     |   |   | `-ImplicitCastExpr 0x142829910 <col:24> 'int' <IntegralCast>
    | |     |     |   |   |   `-ImplicitCastExpr 0x1428298f8 <col:24> 'char' <LValueToRValue>
    | |     |     |   |   |     `-DeclRefExpr 0x142829898 <col:24> 'char' lvalue Var 0x14280e128 'digit2' 'char'
    | |     |     |   |   `-IntegerLiteral 0x142829928 <col:35> 'int' 4
    | |     |     |   `-IntegerLiteral 0x142829988 <col:40> 'int' 240
    | |     |     `-ParenExpr 0x142829ad8 <col:48, col:71> 'int'
    | |     |       `-BinaryOperator 0x142829ab8 <col:49, col:70> 'int' '>>'
    | |     |         |-CallExpr 0x142829a40 <col:49, col:65> 'int'
    | |     |         | |-ImplicitCastExpr 0x142829a28 <col:49> 'int (*)()' <FunctionToPointerDecay>
    | |     |         | | `-DeclRefExpr 0x1428299e8 <col:49> 'int ()' Function 0x142826aa8 'DECODE64' 'int ()'
    | |     |         | `-ImplicitCastExpr 0x142829a80 <col:59> 'int' <IntegralCast>
    | |     |         |   `-ImplicitCastExpr 0x142829a68 <col:59> 'char' <LValueToRValue>
    | |     |         |     `-DeclRefExpr 0x142829a08 <col:59> 'char' lvalue Var 0x14280e1a0 'digit3' 'char'
    | |     |         `-IntegerLiteral 0x142829a98 <col:70> 'int' 2
    | |     |-UnaryOperator 0x142829b70 <line:37:10, col:12> 'int' prefix '++'
    | |     | `-DeclRefExpr 0x142829b50 <col:12> 'int' lvalue Var 0x14280dfe8 'len' 'int'
    | |     `-IfStmt 0x14282a858 <line:38:10, line:44:12>
    | |       |-BinaryOperator 0x142829bf0 <line:38:14, col:24> 'int' '!='
    | |       | |-ImplicitCastExpr 0x142829bd8 <col:14> 'int' <IntegralCast>
    | |       | | `-ImplicitCastExpr 0x142829bc0 <col:14> 'char' <LValueToRValue>
    | |       | |   `-DeclRefExpr 0x142829b88 <col:14> 'char' lvalue Var 0x14280e218 'digit4' 'char'
    | |       | `-CharacterLiteral 0x142829ba8 <col:24> 'int' 61
    | |       `-CompoundStmt 0x14282a830 <line:39:12, line:44:12>
    | |         |-IfStmt 0x142829d08 <line:40:14, line:41:26>
    | |         | |-BinaryOperator 0x142829c80 <line:40:18, col:25> 'int' '>='
    | |         | | |-ImplicitCastExpr 0x142829c50 <col:18> 'int' <LValueToRValue>
    | |         | | | `-DeclRefExpr 0x142829c10 <col:18> 'int' lvalue Var 0x14280dfe8 'len' 'int'
    | |         | | `-ImplicitCastExpr 0x142829c68 <col:25> 'int' <LValueToRValue>
    | |         | |   `-DeclRefExpr 0x142829c30 <col:25> 'int' lvalue ParmVar 0x14280dd58 'outlength' 'int'
    | |         | `-ReturnStmt 0x142829cf8 <line:41:16, col:26>
    | |         |   `-ParenExpr 0x142829cd8 <col:23, col:26> 'int'
    | |         |     `-UnaryOperator 0x142829cc0 <col:24, col:25> 'int' prefix '-'
    | |         |       `-IntegerLiteral 0x142829ca0 <col:25> 'int' 1
    | |         |-BinaryOperator 0x14282a7d8 <line:42:14, col:75> 'char' '='
    | |         | |-UnaryOperator 0x142829d60 <col:14, col:18> 'char' lvalue prefix '*' cannot overflow
    | |         | | `-UnaryOperator 0x142829d48 <col:15, col:18> 'char *' postfix '++'
    | |         | |   `-DeclRefExpr 0x142829d28 <col:15> 'char *' lvalue ParmVar 0x14280dcd8 'out' 'char *'
    | |         | `-ImplicitCastExpr 0x14282a7c0 <col:23, col:75> 'char' <IntegralCast>
    | |         |   `-BinaryOperator 0x14282a7a0 <col:23, col:75> 'int' '|'
    | |         |     |-ParenExpr 0x14282a6d0 <col:23, col:55> 'int'
    | |         |     | `-BinaryOperator 0x14282a6b0 <col:24, col:51> 'int' '&'
    | |         |     |   |-ParenExpr 0x14282a670 <col:24, col:47> 'int'
    | |         |     |   | `-BinaryOperator 0x14282a650 <col:25, col:46> 'int' '<<'
    | |         |     |   |   |-CallExpr 0x142829dd0 <col:25, col:41> 'int'
    | |         |     |   |   | |-ImplicitCastExpr 0x142829db8 <col:25> 'int (*)()' <FunctionToPointerDecay>
    | |         |     |   |   | | `-DeclRefExpr 0x142829d78 <col:25> 'int ()' Function 0x142826aa8 'DECODE64' 'int ()'
    | |         |     |   |   | `-ImplicitCastExpr 0x14282a618 <col:35> 'int' <IntegralCast>
    | |         |     |   |   |   `-ImplicitCastExpr 0x14282a600 <col:35> 'char' <LValueToRValue>
    | |         |     |   |   |     `-DeclRefExpr 0x142829d98 <col:35> 'char' lvalue Var 0x14280e1a0 'digit3' 'char'
    | |         |     |   |   `-IntegerLiteral 0x14282a630 <col:46> 'int' 6
    | |         |     |   `-IntegerLiteral 0x14282a690 <col:51> 'int' 192
    | |         |     `-CallExpr 0x14282a748 <col:59, col:75> 'int'
    | |         |       |-ImplicitCastExpr 0x14282a730 <col:59> 'int (*)()' <FunctionToPointerDecay>
    | |         |       | `-DeclRefExpr 0x14282a6f0 <col:59> 'int ()' Function 0x142826aa8 'DECODE64' 'int ()'
    | |         |       `-ImplicitCastExpr 0x14282a788 <col:69> 'int' <IntegralCast>
    | |         |         `-ImplicitCastExpr 0x14282a770 <col:69> 'char' <LValueToRValue>
    | |         |           `-DeclRefExpr 0x14282a710 <col:69> 'char' lvalue Var 0x14280e218 'digit4' 'char'
    | |         `-UnaryOperator 0x14282a818 <line:43:14, col:16> 'int' prefix '++'
    | |           `-DeclRefExpr 0x14282a7f8 <col:16> 'int' lvalue Var 0x14280dfe8 'len' 'int'
    | `-BinaryOperator 0x14282ab20 <line:47:10, col:42> 'int' '&&'
    |   |-BinaryOperator 0x14282aa78 <col:10, col:24> 'int' '&&'
    |   | |-ImplicitCastExpr 0x14282aa60 <col:10, col:11> 'int' <IntegralCast>
    |   | | `-ImplicitCastExpr 0x14282aa48 <col:10, col:11> 'char' <LValueToRValue>
    |   | |   `-UnaryOperator 0x14282a978 <col:10, col:11> 'const char' lvalue prefix '*' cannot overflow
    |   | |     `-ImplicitCastExpr 0x14282a960 <col:11> 'const char *' <LValueToRValue>
    |   | |       `-DeclRefExpr 0x14282a940 <col:11> 'const char *' lvalue ParmVar 0x14280ddd8 'in' 'const char *'
    |   | `-BinaryOperator 0x14282aa28 <col:17, col:24> 'int' '!='
    |   |   |-ImplicitCastExpr 0x14282aa10 <col:17, col:18> 'int' <IntegralCast>
    |   |   | `-ImplicitCastExpr 0x14282a9f8 <col:17, col:18> 'char' <LValueToRValue>
    |   |   |   `-UnaryOperator 0x14282a9c8 <col:17, col:18> 'const char' lvalue prefix '*' cannot overflow
    |   |   |     `-ImplicitCastExpr 0x14282a9b0 <col:18> 'const char *' <LValueToRValue>
    |   |   |       `-DeclRefExpr 0x14282a990 <col:18> 'const char *' lvalue ParmVar 0x14280ddd8 'in' 'const char *'
    |   |   `-CharacterLiteral 0x14282a9e0 <col:24> 'int' 13
    |   `-BinaryOperator 0x14282ab00 <col:32, col:42> 'int' '!='
    |     |-ImplicitCastExpr 0x14282aae8 <col:32> 'int' <IntegralCast>
    |     | `-ImplicitCastExpr 0x14282aad0 <col:32> 'char' <LValueToRValue>
    |     |   `-DeclRefExpr 0x14282aa98 <col:32> 'char' lvalue Var 0x14280e218 'digit4' 'char'
    |     `-CharacterLiteral 0x14282aab8 <col:42> 'int' 61
    `-ReturnStmt 0x14282abb8 <line:49:3, col:14>
      `-ImplicitCastExpr 0x14282aba0 <col:10, col:14> 'int' <LValueToRValue>
        `-ParenExpr 0x14282ab80 <col:10, col:14> 'int' lvalue
          `-DeclRefExpr 0x14282ab60 <col:11> 'int' lvalue Var 0x14280dfe8 'len' 'int'
