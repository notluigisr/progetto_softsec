`-FunctionDecl 0x120030ba0  line:1:6 invalid streamGetEdgeID 'void (int *, int, int, int *)'
  |-ParmVarDecl 0x120030928 <col:22, col:30> col:30 invalid s 'int *'
  |-ParmVarDecl 0x1200309a8 <col:33, col:37> col:37 used first 'int'
  |-ParmVarDecl 0x120030a28 <col:44, col:48> col:48 used skip_tombstones 'int'
  |-ParmVarDecl 0x120030aa8 <col:65, col:75> col:75 invalid edge_id 'int *'
  `-CompoundStmt 0x1070f6b80 <line:2:1, line:13:1>
    |-CallExpr 0x120030fa0 <line:5:5, col:47> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x120030dc0 <col:5> 'int ()' Function 0x120030d08 'streamIteratorStart' 'int ()'
    | |-UnaryOperator 0x120030f18 <col:25, col:26> '<dependent type>' contains-errors prefix '&' cannot overflow
    | | `-RecoveryExpr 0x120030ef8 <col:26> '<dependent type>' contains-errors lvalue
    | |-RecoveryExpr 0x120030e10 <col:29> '<dependent type>' contains-errors lvalue
    | |-RecoveryExpr 0x120030f30 <col:31> '<dependent type>' contains-errors lvalue
    | |-RecoveryExpr 0x120030f50 <col:36> '<dependent type>' contains-errors lvalue
    | `-UnaryOperator 0x120030f88 <col:41, col:42> 'int' prefix '!' cannot overflow
    |   `-ImplicitCastExpr 0x120030f70 <col:42> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x120030e60 <col:42> 'int' lvalue ParmVar 0x1200309a8 'first' 'int'
    |-DeclStmt 0x1070f6900 <line:7:5, col:60>
    | `-VarDecl 0x1070f6638 <col:5, col:59> col:9 used found 'int' cinit
    |   `-CallExpr 0x1070f68c8 <col:17, col:59> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x1070f6780 <col:17> 'int ()' Function 0x1070f66c8 'streamIteratorGetID' 'int ()'
    |     |-UnaryOperator 0x1070f6878 <col:37, col:38> '<dependent type>' contains-errors prefix '&' cannot overflow
    |     | `-RecoveryExpr 0x1070f6858 <col:38> '<dependent type>' contains-errors lvalue
    |     |-RecoveryExpr 0x1070f67d0 <col:41> '<dependent type>' contains-errors lvalue
    |     `-UnaryOperator 0x1070f68b0 <col:49, col:50> '<dependent type>' contains-errors prefix '&' cannot overflow
    |       `-RecoveryExpr 0x1070f6890 <col:50> '<dependent type>' contains-errors lvalue
    `-IfStmt 0x1070f6b60 <line:8:5, line:11:5>
      |-UnaryOperator 0x1070f6950 <line:8:9, col:10> 'int' contains-errors prefix '!' cannot overflow
      | `-ImplicitCastExpr 0x1070f6938 <col:10> 'int' contains-errors <LValueToRValue>
      |   `-DeclRefExpr 0x1070f6918 <col:10> 'int' contains-errors lvalue Var 0x1070f6638 'found' 'int'
      `-CompoundStmt 0x1070f6b48 <col:17, line:11:5>
        `-BinaryOperator 0x1070f6b28 <line:10:9, col:37> '<dependent type>' contains-errors '='
          |-UnaryOperator 0x1070f6aa0 <col:9, col:10> '<dependent type>' contains-errors prefix '*' cannot overflow
          | `-ImplicitCastExpr 0x1070f6a88 <col:10> '<dependent type>' contains-errors <LValueToRValue>
          |   `-RecoveryExpr 0x1070f6968 <col:10> '<dependent type>' contains-errors lvalue
          `-ConditionalOperator 0x1070f6af8 <col:20, col:37> '<dependent type>' contains-errors
            |-DeclRefExpr 0x1070f69b8 <col:20> 'int' lvalue ParmVar 0x1200309a8 'first' 'int'
            |-RecoveryExpr 0x1070f6ab8 <col:28> '<dependent type>' contains-errors lvalue
            `-RecoveryExpr 0x1070f6ad8 <col:37> '<dependent type>' contains-errors lvalue
