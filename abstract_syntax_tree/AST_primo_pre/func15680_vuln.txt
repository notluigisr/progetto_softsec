`-FunctionDecl 0x12f00de48  line:1:6 invalid keyctl_read_key 'long (int, char)'
  |-ParmVarDecl 0x12f00dcf0 <col:22, col:35> col:35 invalid keyid 'int'
  |-ParmVarDecl 0x12f00dd68 <col:42, col:47> col:47 __user 'char'
  `-CompoundStmt 0x12f02ed70 <line:2:1, line:50:1>
    |-DeclStmt 0x12f00e0e8 <line:3:2, col:17>
    | |-RecordDecl 0x12f00df00 <col:2, col:9> col:9 struct key
    | `-VarDecl 0x12f00e068 <col:2, col:14> col:14 used key 'struct key *'
    |-DeclStmt 0x12f00e180 <line:5:2, col:10>
    | `-VarDecl 0x12f00e118 <col:2, col:7> col:7 used ret 'long'
    |-IfStmt 0x12f02b8e0 <line:9:2, line:12:2>
    | |-CallExpr 0x12f02b738 <line:9:6, col:20> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x12f02b6b8 <col:6> 'int ()' Function 0x12f02b600 'IS_ERR' 'int ()'
    | | `-RecoveryExpr 0x12f02b718 <col:13> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x12f02b8c0 <col:23, line:12:2>
    |   |-BinaryOperator 0x12f02b838 <line:10:3, col:10> 'long' contains-errors '='
    |   | |-DeclRefExpr 0x12f02b760 <col:3> 'long' lvalue Var 0x12f00e118 'ret' 'long'
    |   | `-UnaryOperator 0x12f02b820 <col:9, col:10> '<dependent type>' contains-errors prefix '-' cannot overflow
    |   |   `-ImplicitCastExpr 0x12f02b808 <col:10> '<dependent type>' contains-errors <LValueToRValue>
    |   |     `-RecoveryExpr 0x12f02b7e8 <col:10> '<dependent type>' contains-errors lvalue
    |   `-GotoStmt 0x12f02b8a8 <line:11:3, col:8> 'error' 0x12f02b858
    |-BinaryOperator 0x12f02bac8 <line:14:2, col:30> 'struct key *' contains-errors '='
    | |-DeclRefExpr 0x12f02b900 <col:2> 'struct key *' lvalue Var 0x12f00e068 'key' 'struct key *'
    | `-CallExpr 0x12f02baa0 <col:8, col:30> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x12f02ba00 <col:8> 'int ()' Function 0x12f02b948 'key_ref_to_ptr' 'int ()'
    |   `-RecoveryExpr 0x12f02ba80 <col:23> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x12f02c2a0 <line:16:2, line:19:2>
    | |-CallExpr 0x12f02c0f0 <line:16:6, col:45> '<dependent type>' contains-errors
    | | |-DeclRefExpr 0x12f02bbc8 <col:6> 'int ()' Function 0x12f02bb10 'test_bit' 'int ()'
    | | |-RecoveryExpr 0x12f02c0d0 <col:15> '<dependent type>' contains-errors lvalue
    | | `-UnaryOperator 0x12f02c088 <col:34, col:40> '<dependent type>' contains-errors prefix '&' cannot overflow
    | |   `-RecoveryExpr 0x12f02c060 <col:35, col:40> '<dependent type>' contains-errors lvalue
    | |     `-DeclRefExpr 0x12f02bc00 <col:35> 'struct key *' lvalue Var 0x12f00e068 'key' 'struct key *'
    | `-CompoundStmt 0x12f02c280 <col:48, line:19:2>
    |   |-BinaryOperator 0x12f02c1f8 <line:17:3, col:10> 'long' contains-errors '='
    |   | |-DeclRefExpr 0x12f02c120 <col:3> 'long' lvalue Var 0x12f00e118 'ret' 'long'
    |   | `-UnaryOperator 0x12f02c1e0 <col:9, col:10> '<dependent type>' contains-errors prefix '-' cannot overflow
    |   |   `-ImplicitCastExpr 0x12f02c1c8 <col:10> '<dependent type>' contains-errors <LValueToRValue>
    |   |     `-RecoveryExpr 0x12f02c1a8 <col:10> '<dependent type>' contains-errors lvalue
    |   `-GotoStmt 0x12f02c268 <line:18:3, col:8> 'error2' 0x12f02c218
    |-BinaryOperator 0x12f02c4d0 <line:22:2, col:45> 'long' contains-errors '='
    | |-DeclRefExpr 0x12f02c2c0 <col:2> 'long' lvalue Var 0x12f00e118 'ret' 'long'
    | `-CallExpr 0x12f02c4a0 <col:8, col:45> '<dependent type>' contains-errors
    |   |-DeclRefExpr 0x12f02c3c0 <col:8> 'int ()' Function 0x12f02c308 'key_permission' 'int ()'
    |   |-RecoveryExpr 0x12f02c460 <col:23> '<dependent type>' contains-errors lvalue
    |   `-RecoveryExpr 0x12f02c480 <col:32> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x12f02e000 <line:23:2, line:24:8>
    | |-BinaryOperator 0x12f02c560 <line:23:6, col:13> 'int' '=='
    | | |-ImplicitCastExpr 0x12f02c530 <col:6> 'long' <LValueToRValue>
    | | | `-DeclRefExpr 0x12f02c4f0 <col:6> 'long' lvalue Var 0x12f00e118 'ret' 'long'
    | | `-ImplicitCastExpr 0x12f02c548 <col:13> 'long' <IntegralCast>
    | |   `-IntegerLiteral 0x12f02c510 <col:13> 'int' 0
    | `-GotoStmt 0x12f02c5d0 <line:24:3, col:8> 'can_read_key' 0x12f02c580
    |-IfStmt 0x12f02e130 <line:25:2, line:26:8>
    | |-BinaryOperator 0x12f02e0f8 <line:25:6, col:14> 'int' contains-errors '!='
    | | |-DeclRefExpr 0x12f02e020 <col:6> 'long' lvalue Var 0x12f00e118 'ret' 'long'
    | | `-UnaryOperator 0x12f02e0e0 <col:13, col:14> '<dependent type>' contains-errors prefix '-' cannot overflow
    | |   `-ImplicitCastExpr 0x12f02e0c8 <col:14> '<dependent type>' contains-errors <LValueToRValue>
    | |     `-RecoveryExpr 0x12f02e0a8 <col:14> '<dependent type>' contains-errors lvalue
    | `-GotoStmt 0x12f02e118 <line:26:3, col:8> 'error2' 0x12f02c218
    |-IfStmt 0x12f02e358 <line:29:2, line:32:2>
    | |-UnaryOperator 0x12f02e2f0 <line:29:6, col:31> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-CallExpr 0x12f02e2c8 <col:7, col:31> '<dependent type>' contains-errors
    | |   |-DeclRefExpr 0x12f02e230 <col:7> 'int ()' Function 0x12f02e178 'is_key_possessed' 'int ()'
    | |   `-RecoveryExpr 0x12f02e2a8 <col:24> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x12f02e340 <col:34, line:32:2>
    |   `-GotoStmt 0x12f02e328 <line:31:3, col:8> 'error2' 0x12f02c218
    |-LabelStmt 0x12f02e3a0 <line:35:1, col:13> 'can_read_key'
    | `-NullStmt 0x12f02e398 <col:13>
    |-IfStmt 0x12f02eb50 <line:37:2, line:44:2>
    | |-CXXDependentScopeMemberExpr 0x12f02e420 <line:37:6, col:17> '<dependent type>' contains-errors lvalue ->read
    | | `-RecoveryExpr 0x12f02e3f8 <col:6, col:11> '<dependent type>' contains-errors lvalue
    | |   `-DeclRefExpr 0x12f02e3c0 <col:6> 'struct key *' lvalue Var 0x12f00e068 'key' 'struct key *'
    | `-CompoundStmt 0x12f02eb28 <col:23, line:44:2>
    |   |-CallExpr 0x12f02e5e0 <line:39:3, col:22> '<dependent type>' contains-errors
    |   | |-DeclRefExpr 0x12f02e548 <col:3> 'int ()' Function 0x12f02e490 'down_read' 'int ()'
    |   | `-UnaryOperator 0x12f02e5c8 <col:13, col:19> '<dependent type>' contains-errors prefix '&' cannot overflow
    |   |   `-RecoveryExpr 0x12f02e5a0 <col:14, col:19> '<dependent type>' contains-errors lvalue
    |   |     `-DeclRefExpr 0x12f02e568 <col:14> 'struct key *' lvalue Var 0x12f00e068 'key' 'struct key *'
    |   |-BinaryOperator 0x12f02e7f0 <line:40:3, col:25> 'long' '='
    |   | |-DeclRefExpr 0x12f02e608 <col:3> 'long' lvalue Var 0x12f00e118 'ret' 'long'
    |   | `-ImplicitCastExpr 0x12f02e7d8 <col:9, col:25> 'long' <IntegralCast>
    |   |   `-CallExpr 0x12f02e798 <col:9, col:25> 'int'
    |   |     |-ImplicitCastExpr 0x12f02e780 <col:9> 'int (*)()' <FunctionToPointerDecay>
    |   |     | `-DeclRefExpr 0x12f02e708 <col:9> 'int ()' Function 0x12f02e650 'key_validate' 'int ()'
    |   |     `-ImplicitCastExpr 0x12f02e7c0 <col:22> 'struct key *' <LValueToRValue>
    |   |       `-DeclRefExpr 0x12f02e728 <col:22> 'struct key *' lvalue Var 0x12f00e068 'key' 'struct key *'
    |   `-CallExpr 0x12f02eb00 <line:43:3, col:20> '<dependent type>' contains-errors
    |     |-DeclRefExpr 0x12f02ea68 <col:3> 'int ()' Function 0x12f02e9b0 'up_read' 'int ()'
    |     `-UnaryOperator 0x12f02eae8 <col:11, col:17> '<dependent type>' contains-errors prefix '&' cannot overflow
    |       `-RecoveryExpr 0x12f02eac0 <col:12, col:17> '<dependent type>' contains-errors lvalue
    |         `-DeclRefExpr 0x12f02ea88 <col:12> 'struct key *' lvalue Var 0x12f00e068 'key' 'struct key *'
    |-LabelStmt 0x12f02ece8 <line:46:1, line:47:13> 'error2'
    | `-CallExpr 0x12f02eca8 <col:2, col:13> 'int'
    |   |-ImplicitCastExpr 0x12f02ec90 <col:2> 'int (*)()' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x12f02ec50 <col:2> 'int ()' Function 0x12f02eb98 'key_put' 'int ()'
    |   `-ImplicitCastExpr 0x12f02ecd0 <col:10> 'struct key *' <LValueToRValue>
    |     `-DeclRefExpr 0x12f02ec70 <col:10> 'struct key *' lvalue Var 0x12f00e068 'key' 'struct key *'
    `-LabelStmt 0x12f02ed50 <line:48:1, line:49:9> 'error'
      `-ReturnStmt 0x12f02ed40 <col:2, col:9>
        `-ImplicitCastExpr 0x12f02ed28 <col:9> 'long' <LValueToRValue>
          `-DeclRefExpr 0x12f02ed08 <col:9> 'long' lvalue Var 0x12f00e118 'ret' 'long'
