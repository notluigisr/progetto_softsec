`-FunctionDecl 0x11d921ba8  line:1:1 is_csi 'int (const char *)'
  |-ParmVarDecl 0x11d921ad8 <col:8, col:20> col:20 used s 'const char *'
  `-CompoundStmt 0x11d93a878 <line:2:1, line:11:1>
    |-DeclStmt 0x11d921d40 <line:3:5, col:19>
    | `-VarDecl 0x11d921cb8 <col:5, col:18> col:9 used result 'int' cinit
    |   `-IntegerLiteral 0x11d921d20 <col:18> 'int' 0
    |-IfStmt 0x11d93a810 <line:4:5, line:9:5>
    | |-BinaryOperator 0x11d921dc8 <line:4:9, col:14> 'int' '!='
    | | |-ImplicitCastExpr 0x11d921d98 <col:9> 'const char *' <LValueToRValue>
    | | | `-DeclRefExpr 0x11d921d58 <col:9> 'const char *' lvalue ParmVar 0x11d921ad8 's' 'const char *'
    | | `-ImplicitCastExpr 0x11d921db0 <col:14> 'const char *' <NullToPointer>
    | |   `-IntegerLiteral 0x11d921d78 <col:14> 'int' 0
    | `-CompoundStmt 0x11d93a7f8 <col:17, line:9:5>
    |   `-IfStmt 0x11d93a7c8 <line:5:2, line:8:15> has_else
    |     |-BinaryOperator 0x11d93a400 <line:5:6, col:21> 'int' contains-errors '=='
    |     | |-CallExpr 0x11d922180 <col:6, col:16> 'int'
    |     | | |-ImplicitCastExpr 0x11d922168 <col:6> 'int (*)()' <FunctionToPointerDecay>
    |     | | | `-DeclRefExpr 0x11d921f10 <col:6> 'int ()' Function 0x11d921e58 'UChar' 'int ()'
    |     | | `-ImplicitCastExpr 0x11d9221c0 <col:12, col:15> 'int' <IntegralCast>
    |     | |   `-ImplicitCastExpr 0x11d9221a8 <col:12, col:15> 'char' <LValueToRValue>
    |     | |     `-ArraySubscriptExpr 0x11d922148 <col:12, col:15> 'const char' lvalue
    |     | |       |-ImplicitCastExpr 0x11d922130 <col:12> 'const char *' <LValueToRValue>
    |     | |       | `-DeclRefExpr 0x11d921f30 <col:12> 'const char *' lvalue ParmVar 0x11d921ad8 's' 'const char *'
    |     | |       `-IntegerLiteral 0x11d921f50 <col:14> 'int' 0
    |     | `-RecoveryExpr 0x11d9221d8 <col:21> '<dependent type>' contains-errors lvalue
    |     |-BinaryOperator 0x11d93a460 <line:6:6, col:15> 'int' '='
    |     | |-DeclRefExpr 0x11d93a420 <col:6> 'int' lvalue Var 0x11d921cb8 'result' 'int'
    |     | `-IntegerLiteral 0x11d93a440 <col:15> 'int' 1
    |     `-IfStmt 0x11d93a7a8 <line:7:7, line:8:15>
    |       |-BinaryOperator 0x11d93a728 <line:7:11, col:34> 'int' contains-errors '&&'
    |       | |-BinaryOperator 0x11d93a690 <col:11, col:19> 'int' contains-errors '=='
    |       | | |-ArraySubscriptExpr 0x11d93a650 <col:11, col:14> 'const char' lvalue
    |       | | | |-ImplicitCastExpr 0x11d93a638 <col:11> 'const char *' <LValueToRValue>
    |       | | | | `-DeclRefExpr 0x11d93a480 <col:11> 'const char *' lvalue ParmVar 0x11d921ad8 's' 'const char *'
    |       | | | `-IntegerLiteral 0x11d93a4a0 <col:13> 'int' 0
    |       | | `-RecoveryExpr 0x11d93a670 <col:19> '<dependent type>' contains-errors lvalue
    |       | `-BinaryOperator 0x11d93a708 <col:26, col:34> 'int' contains-errors '=='
    |       |   |-ArraySubscriptExpr 0x11d93a6c8 <col:26, col:29> 'const char' lvalue
    |       |   | |-ImplicitCastExpr 0x11d93a6b0 <col:26> 'const char *' <LValueToRValue>
    |       |   | | `-DeclRefExpr 0x11d93a530 <col:26> 'const char *' lvalue ParmVar 0x11d921ad8 's' 'const char *'
    |       |   | `-IntegerLiteral 0x11d93a550 <col:28> 'int' 1
    |       |   `-RecoveryExpr 0x11d93a6e8 <col:34> '<dependent type>' contains-errors lvalue
    |       `-BinaryOperator 0x11d93a788 <line:8:6, col:15> 'int' '='
    |         |-DeclRefExpr 0x11d93a748 <col:6> 'int' lvalue Var 0x11d921cb8 'result' 'int'
    |         `-IntegerLiteral 0x11d93a768 <col:15> 'int' 2
    `-ReturnStmt 0x11d93a868 <line:10:5, col:12>
      `-ImplicitCastExpr 0x11d93a850 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x11d93a830 <col:12> 'int' lvalue Var 0x11d921cb8 'result' 'int'
