`-FunctionDecl 0x12d128470  line:1:13 invalid sig_complete_target 'void (int **, int *, const char *, const char *, int *)' static
  |-ParmVarDecl 0x12d128160 <col:33, col:41> col:41 invalid list 'int **'
  |-ParmVarDecl 0x12d1281e0 <col:47, col:59> col:59 invalid window 'int *'
  |-ParmVarDecl 0x12d128260 <line:2:5, col:17> col:17 used word 'const char *'
  |-ParmVarDecl 0x12d1282e0 <col:23, col:35> col:35 used line 'const char *'
  |-ParmVarDecl 0x12d128360 <line:3:5, col:10> col:10 want_space 'int *'
  `-CompoundStmt 0x12d142748 <line:4:1, line:20:1>
    |-DeclStmt 0x12d1285c0 <line:5:2, col:24>
    | `-VarDecl 0x12d128558 <col:2, col:14> col:14 used definition 'const char *'
    |-CallExpr 0x12d141820 <line:7:2, col:31> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x12d128730 <col:2> 'int ()' Function 0x12d128678 'g_return_if_fail' 'int ()'
    | `-BinaryOperator 0x12d141800 <col:19, col:27> 'int' contains-errors '!='
    |   |-RecoveryExpr 0x12d128750 <col:19> '<dependent type>' contains-errors lvalue
    |   `-RecoveryExpr 0x12d1287d0 <col:27> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x12d141928 <line:8:2, col:31> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x12d141848 <col:2> 'int ()' Function 0x12d128678 'g_return_if_fail' 'int ()'
    | `-BinaryOperator 0x12d141908 <col:19, col:27> 'int' contains-errors '!='
    |   |-DeclRefExpr 0x12d141868 <col:19> 'const char *' lvalue ParmVar 0x12d128260 'word' 'const char *'
    |   `-RecoveryExpr 0x12d1418e8 <col:27> '<dependent type>' contains-errors lvalue
    |-CallExpr 0x12d141a30 <line:9:2, col:31> '<dependent type>' contains-errors
    | |-DeclRefExpr 0x12d141950 <col:2> 'int ()' Function 0x12d128678 'g_return_if_fail' 'int ()'
    | `-BinaryOperator 0x12d141a10 <col:19, col:27> 'int' contains-errors '!='
    |   |-DeclRefExpr 0x12d141970 <col:19> 'const char *' lvalue ParmVar 0x12d1282e0 'line' 'const char *'
    |   `-RecoveryExpr 0x12d1419f0 <col:27> '<dependent type>' contains-errors lvalue
    `-IfStmt 0x12d142718 <line:11:2, line:19:2> has_else
      |-BinaryOperator 0x12d141af0 <line:11:6, col:15> 'int' '!='
      | |-ImplicitCastExpr 0x12d141ad8 <col:6, col:7> 'int' <IntegralCast>
      | | `-ImplicitCastExpr 0x12d141ac0 <col:6, col:7> 'char' <LValueToRValue>
      | |   `-UnaryOperator 0x12d141a90 <col:6, col:7> 'const char' lvalue prefix '*' cannot overflow
      | |     `-ImplicitCastExpr 0x12d141a78 <col:7> 'const char *' <LValueToRValue>
      | |       `-DeclRefExpr 0x12d141a58 <col:7> 'const char *' lvalue ParmVar 0x12d1282e0 'line' 'const char *'
      | `-CharacterLiteral 0x12d141aa8 <col:15> 'int' 0
      |-CompoundStmt 0x12d142358 <col:21, line:16:2>
      | `-IfStmt 0x12d142338 <line:12:3, line:15:3>
      |   |-RecoveryExpr 0x12d141d38 <line:12:7, col:60> '_Bool' contains-errors
      |   `-CompoundStmt 0x12d142318 <col:66, line:15:3>
      |     |-BinaryOperator 0x12d1421c0 <line:13:4, col:52> '<dependent type>' contains-errors '='
      |     | |-UnaryOperator 0x12d142100 <col:4, col:5> '<dependent type>' contains-errors prefix '*' cannot overflow
      |     | | `-ImplicitCastExpr 0x12d1420e8 <col:5> '<dependent type>' contains-errors <LValueToRValue>
      |     | |   `-RecoveryExpr 0x12d141d58 <col:5> '<dependent type>' contains-errors lvalue
      |     | `-CallExpr 0x12d142190 <col:12, col:52> '<dependent type>' contains-errors
      |     |   |-DeclRefExpr 0x12d141e88 <col:12> 'int ()' Function 0x12d141dd0 'g_list_append' 'int ()'
      |     |   |-RecoveryExpr 0x12d142118 <col:26> '<dependent type>' contains-errors lvalue
      |     |   `-CallExpr 0x12d142150 <col:32, col:51> 'int'
      |     |     |-ImplicitCastExpr 0x12d142138 <col:32> 'int (*)()' <FunctionToPointerDecay>
      |     |     | `-DeclRefExpr 0x12d141fa0 <col:32> 'int ()' Function 0x12d141ee8 'g_strdup' 'int ()'
      |     |     `-ImplicitCastExpr 0x12d142178 <col:41> 'const char *' <LValueToRValue>
      |     |       `-DeclRefExpr 0x12d141fc0 <col:41> 'const char *' lvalue Var 0x12d128558 'definition' 'const char *'
      |     `-CallExpr 0x12d1422f8 <line:14:4, col:16> 'int'
      |       `-ImplicitCastExpr 0x12d1422e0 <col:4> 'int (*)()' <FunctionToPointerDecay>
      |         `-DeclRefExpr 0x12d1422c0 <col:4> 'int ()' Function 0x12d142208 'signal_stop' 'int ()'
      `-CompoundStmt 0x12d1426f8 <line:16:9, line:19:2>
        |-BinaryOperator 0x12d142538 <line:17:3, col:38> '<dependent type>' contains-errors '='
        | |-UnaryOperator 0x12d1423a8 <col:3, col:4> '<dependent type>' contains-errors prefix '*' cannot overflow
        | | `-ImplicitCastExpr 0x12d142390 <col:4> '<dependent type>' contains-errors <LValueToRValue>
        | |   `-RecoveryExpr 0x12d142370 <col:4> '<dependent type>' contains-errors lvalue
        | `-CallExpr 0x12d1424f8 <col:11, col:38> 'int'
        |   |-ImplicitCastExpr 0x12d1424e0 <col:11> 'int (*)()' <FunctionToPointerDecay>
        |   | `-DeclRefExpr 0x12d1424a0 <col:11> 'int ()' Function 0x12d1423e8 'completion_get_targets' 'int ()'
        |   `-ImplicitCastExpr 0x12d142520 <col:34> 'const char *' <LValueToRValue>
        |     `-DeclRefExpr 0x12d1424c0 <col:34> 'const char *' lvalue ParmVar 0x12d128260 'word' 'const char *'
        `-IfStmt 0x12d1426d8 <line:18:3, col:34>
          |-BinaryOperator 0x12d142660 <col:7, col:16> 'int' contains-errors '!='
          | |-UnaryOperator 0x12d142628 <col:7, col:8> '<dependent type>' contains-errors prefix '*' cannot overflow
          | | `-ImplicitCastExpr 0x12d142610 <col:8> '<dependent type>' contains-errors <LValueToRValue>
          | |   `-RecoveryExpr 0x12d142558 <col:8> '<dependent type>' contains-errors lvalue
          | `-RecoveryExpr 0x12d142640 <col:16> '<dependent type>' contains-errors lvalue
          `-CallExpr 0x12d1426b8 <col:22, col:34> 'int'
            `-ImplicitCastExpr 0x12d1426a0 <col:22> 'int (*)()' <FunctionToPointerDecay>
              `-DeclRefExpr 0x12d142680 <col:22> 'int ()' Function 0x12d142208 'signal_stop' 'int ()'
