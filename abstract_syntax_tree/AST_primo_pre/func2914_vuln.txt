`-FunctionDecl 0x15300dfe8  line:1:1 invalid mbfl_identify_encoding2 'int (int *, const int **, int, int)'
  |-ParmVarDecl 0x15300dd28 <col:25, col:38> col:38 invalid string 'int *'
  |-ParmVarDecl 0x15300dde0 <col:46, col:68> col:68 referenced invalid elist 'const int **'
  |-ParmVarDecl 0x15300de60 <col:75, col:79> col:79 used elistsz 'int'
  |-ParmVarDecl 0x15300dee0 <col:88, col:92> col:92 used strict 'int'
  `-CompoundStmt 0x152925748 <line:2:1, line:81:1>
    |-DeclStmt 0x15300e2d8 <line:3:2, col:20>
    | |-VarDecl 0x15300e0c8 <col:2, col:6> col:6 used i 'int'
    | |-VarDecl 0x15300e148 <col:2, col:9> col:9 used n 'int'
    | |-VarDecl 0x15300e1c8 <col:2, col:12> col:12 used num 'int'
    | `-VarDecl 0x15300e248 <col:2, col:17> col:17 used bad 'int'
    |-DeclStmt 0x15300e3a0 <line:4:2, col:18>
    | `-VarDecl 0x15300e338 <col:2, col:17> col:17 used p 'unsigned char *'
    |-DeclStmt 0x1529226c8 <line:6:2, col:31>
    | `-VarDecl 0x152922660 <col:2, col:23> col:23 referenced invalid encoding 'const int *'
    |-IfStmt 0x152922870 <line:10:2, line:12:2>
    | |-BinaryOperator 0x1529227f0 <line:10:6, col:15> 'int' contains-errors '=='
    | | |-RecoveryExpr 0x1529227b0 <col:6> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x1529227d0 <col:15> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x152922858 <col:21, line:12:2>
    |   `-ReturnStmt 0x152922848 <line:11:3, col:10>
    |     `-RecoveryExpr 0x152922828 <col:10> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x1529228d0 <line:14:2, col:8> 'int' '='
    | |-DeclRefExpr 0x152922890 <col:2> 'int' lvalue Var 0x15300e1c8 'num' 'int'
    | `-IntegerLiteral 0x1529228b0 <col:8> 'int' 0
    |-IfStmt 0x152922e10 <line:15:2, line:21:2>
    | |-BinaryOperator 0x152922968 <line:15:6, col:15> 'int' contains-errors '!='
    | | |-RecoveryExpr 0x1529228f0 <col:6> '<dependent type>' contains-errors lvalue
    | | `-RecoveryExpr 0x152922948 <col:15> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x152922df8 <col:21, line:21:2>
    |   `-ForStmt 0x152922dc0 <line:16:3, line:20:3>
    |     |-BinaryOperator 0x1529229c8 <line:16:8, col:12> 'int' '='
    |     | |-DeclRefExpr 0x152922988 <col:8> 'int' lvalue Var 0x15300e0c8 'i' 'int'
    |     | `-IntegerLiteral 0x1529229a8 <col:12> 'int' 0
    |     |-<<<NULL>>>
    |     |-BinaryOperator 0x152922a58 <col:15, col:19> 'int' '<'
    |     | |-ImplicitCastExpr 0x152922a28 <col:15> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x1529229e8 <col:15> 'int' lvalue Var 0x15300e0c8 'i' 'int'
    |     | `-ImplicitCastExpr 0x152922a40 <col:19> 'int' <LValueToRValue>
    |     |   `-DeclRefExpr 0x152922a08 <col:19> 'int' lvalue ParmVar 0x15300de60 'elistsz' 'int'
    |     |-UnaryOperator 0x152922a98 <col:28, col:29> 'int' postfix '++'
    |     | `-DeclRefExpr 0x152922a78 <col:28> 'int' lvalue Var 0x15300e0c8 'i' 'int'
    |     `-CompoundStmt 0x152922da8 <col:33, line:20:3>
    |       `-IfStmt 0x152922d88 <line:17:4, line:19:4>
    |         |-RecoveryExpr 0x152922d18 <line:17:8, col:57> '_Bool' contains-errors
    |         `-CompoundStmt 0x152922d70 <col:60, line:19:4>
    |           `-UnaryOperator 0x152922d58 <line:18:5, col:8> 'int' postfix '++'
    |             `-DeclRefExpr 0x152922d38 <col:5> 'int' lvalue Var 0x15300e1c8 'num' 'int'
    |-BinaryOperator 0x152922eb8 <line:24:2, col:14> 'int' contains-errors '='
    | |-DeclRefExpr 0x152922e30 <col:2> 'int' lvalue Var 0x15300e148 'n' 'int'
    | `-CXXDependentScopeMemberExpr 0x152922e70 <col:6, col:14> '<dependent type>' contains-errors lvalue ->len
    |   `-RecoveryExpr 0x152922e50 <col:6> '<dependent type>' contains-errors lvalue
    |-BinaryOperator 0x152922f60 <line:25:2, col:14> 'unsigned char *' contains-errors '='
    | |-DeclRefExpr 0x152922ed8 <col:2> 'unsigned char *' lvalue Var 0x15300e338 'p' 'unsigned char *'
    | `-CXXDependentScopeMemberExpr 0x152922f18 <col:6, col:14> '<dependent type>' contains-errors lvalue ->val
    |   `-RecoveryExpr 0x152922ef8 <col:6> '<dependent type>' contains-errors lvalue
    |-IfStmt 0x152924d90 <line:27:2, line:45:2>
    | |-BinaryOperator 0x152922ff8 <line:27:6, col:11> 'int' contains-errors '!='
    | | |-DeclRefExpr 0x152922f80 <col:6> 'unsigned char *' lvalue Var 0x15300e338 'p' 'unsigned char *'
    | | `-RecoveryExpr 0x152922fd8 <col:11> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x152924d70 <col:17, line:45:2>
    |   |-BinaryOperator 0x152923058 <line:28:3, col:9> 'int' '='
    |   | |-DeclRefExpr 0x152923018 <col:3> 'int' lvalue Var 0x15300e248 'bad' 'int'
    |   | `-IntegerLiteral 0x152923038 <col:9> 'int' 0
    |   `-WhileStmt 0x152924d50 <line:29:3, line:44:3>
    |     |-BinaryOperator 0x1529230d0 <line:29:10, col:14> 'int' '>'
    |     | |-ImplicitCastExpr 0x1529230b8 <col:10> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x152923078 <col:10> 'int' lvalue Var 0x15300e148 'n' 'int'
    |     | `-IntegerLiteral 0x152923098 <col:14> 'int' 0
    |     `-CompoundStmt 0x152924d20 <col:17, line:44:3>
    |       |-ForStmt 0x1529234c8 <line:30:4, line:38:4>
    |       | |-BinaryOperator 0x152923130 <line:30:9, col:13> 'int' '='
    |       | | |-DeclRefExpr 0x1529230f0 <col:9> 'int' lvalue Var 0x15300e0c8 'i' 'int'
    |       | | `-IntegerLiteral 0x152923110 <col:13> 'int' 0
    |       | |-<<<NULL>>>
    |       | |-BinaryOperator 0x1529231c0 <col:16, col:20> 'int' '<'
    |       | | |-ImplicitCastExpr 0x152923190 <col:16> 'int' <LValueToRValue>
    |       | | | `-DeclRefExpr 0x152923150 <col:16> 'int' lvalue Var 0x15300e0c8 'i' 'int'
    |       | | `-ImplicitCastExpr 0x1529231a8 <col:20> 'int' <LValueToRValue>
    |       | |   `-DeclRefExpr 0x152923170 <col:20> 'int' lvalue Var 0x15300e1c8 'num' 'int'
    |       | |-UnaryOperator 0x152923200 <col:25, col:26> 'int' postfix '++'
    |       | | `-DeclRefExpr 0x1529231e0 <col:25> 'int' lvalue Var 0x15300e0c8 'i' 'int'
    |       | `-CompoundStmt 0x1529234b0 <col:30, line:38:4>
    |       |   `-IfStmt 0x152923490 <line:32:5, line:37:5>
    |       |     |-UnaryOperator 0x152923380 <line:32:9, col:18> '<dependent type>' contains-errors prefix '!' cannot overflow
    |       |     | `-ImplicitCastExpr 0x152923368 <col:10, col:18> '<dependent type>' contains-errors <LValueToRValue>
    |       |     |   `-CXXDependentScopeMemberExpr 0x152923320 <col:10, col:18> '<dependent type>' contains-errors lvalue ->flag
    |       |     |     `-RecoveryExpr 0x152923300 <col:10> '<dependent type>' contains-errors lvalue
    |       |     `-CompoundStmt 0x152923478 <col:24, line:37:5>
    |       |       `-IfStmt 0x152923458 <line:34:6, line:36:6>
    |       |         |-RecoveryExpr 0x1529233e8 <line:34:10, col:18> '_Bool' contains-errors
    |       |         `-CompoundStmt 0x152923440 <col:24, line:36:6>
    |       |           `-UnaryOperator 0x152923428 <line:35:7, col:10> 'int' postfix '++'
    |       |             `-DeclRefExpr 0x152923408 <col:7> 'int' lvalue Var 0x15300e248 'bad' 'int'
    |       |-IfStmt 0x152924c90 <line:39:4, line:41:4>
    |       | |-BinaryOperator 0x152924c50 <line:39:8, col:29> 'int' '&&'
    |       | | |-BinaryOperator 0x1529235d0 <col:8, col:21> 'int' '<='
    |       | | | |-ParenExpr 0x152923578 <col:8, col:16> 'int'
    |       | | | | `-BinaryOperator 0x152923558 <col:9, col:15> 'int' '-'
    |       | | | |   |-ImplicitCastExpr 0x152923540 <col:9> 'int' <LValueToRValue>
    |       | | | |   | `-DeclRefExpr 0x152923500 <col:9> 'int' lvalue Var 0x15300e1c8 'num' 'int'
    |       | | | |   `-IntegerLiteral 0x152923520 <col:15> 'int' 1
    |       | | | `-ImplicitCastExpr 0x1529235b8 <col:21> 'int' <LValueToRValue>
    |       | | |   `-DeclRefExpr 0x152923598 <col:21> 'int' lvalue Var 0x15300e248 'bad' 'int'
    |       | | `-UnaryOperator 0x152924c38 <col:28, col:29> 'int' prefix '!' cannot overflow
    |       | |   `-ImplicitCastExpr 0x152924c20 <col:29> 'int' <LValueToRValue>
    |       | |     `-DeclRefExpr 0x152924c00 <col:29> 'int' lvalue ParmVar 0x15300dee0 'strict' 'int'
    |       | `-CompoundStmt 0x152924c78 <col:37, line:41:4>
    |       |   `-BreakStmt 0x152924c70 <line:40:5>
    |       |-UnaryOperator 0x152924cd0 <line:42:4, col:5> 'unsigned char *' postfix '++'
    |       | `-DeclRefExpr 0x152924cb0 <col:4> 'unsigned char *' lvalue Var 0x15300e338 'p' 'unsigned char *'
    |       `-UnaryOperator 0x152924d08 <line:43:4, col:5> 'int' postfix '--'
    |         `-DeclRefExpr 0x152924ce8 <col:4> 'int' lvalue Var 0x15300e148 'n' 'int'
    |-ForStmt 0x152925088 <line:50:2, line:59:2>
    | |-BinaryOperator 0x152924e38 <line:50:7, col:11> 'int' '='
    | | |-DeclRefExpr 0x152924df8 <col:7> 'int' lvalue Var 0x15300e0c8 'i' 'int'
    | | `-IntegerLiteral 0x152924e18 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x152924ec8 <col:14, col:18> 'int' '<'
    | | |-ImplicitCastExpr 0x152924e98 <col:14> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x152924e58 <col:14> 'int' lvalue Var 0x15300e0c8 'i' 'int'
    | | `-ImplicitCastExpr 0x152924eb0 <col:18> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x152924e78 <col:18> 'int' lvalue Var 0x15300e1c8 'num' 'int'
    | |-UnaryOperator 0x152924f08 <col:23, col:24> 'int' postfix '++'
    | | `-DeclRefExpr 0x152924ee8 <col:23> 'int' lvalue Var 0x15300e0c8 'i' 'int'
    | `-CompoundStmt 0x152925070 <col:28, line:59:2>
    |   `-IfStmt 0x152925050 <line:52:3, line:58:3>
    |     |-RecoveryExpr 0x152924f40 <line:52:7, col:16> '_Bool' contains-errors
    |     `-CompoundStmt 0x152925030 <col:22, line:58:3>
    |       |-IfStmt 0x152924fc0 <line:53:4, line:55:5>
    |       | |-RecoveryExpr 0x152924f80 <line:53:8, col:26> '_Bool' contains-errors
    |       | `-CompoundStmt 0x152924fa8 <col:34, line:55:5>
    |       |   `-ContinueStmt 0x152924fa0 <line:54:6>
    |       `-BreakStmt 0x152925028 <line:57:4>
    |-IfStmt 0x1529253b8 <line:62:2, line:70:2>
    | |-UnaryOperator 0x1529250f8 <line:62:6, col:7> '<dependent type>' contains-errors prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x1529250e0 <col:7> '<dependent type>' contains-errors <LValueToRValue>
    | |   `-RecoveryExpr 0x1529250c0 <col:7> '<dependent type>' contains-errors lvalue
    | `-CompoundStmt 0x1529253a0 <col:17, line:70:2>
    |   `-ForStmt 0x152925368 <line:63:3, line:69:3>
    |     |-BinaryOperator 0x152925150 <line:63:8, col:12> 'int' '='
    |     | |-DeclRefExpr 0x152925110 <col:8> 'int' lvalue Var 0x15300e0c8 'i' 'int'
    |     | `-IntegerLiteral 0x152925130 <col:12> 'int' 0
    |     |-<<<NULL>>>
    |     |-BinaryOperator 0x1529251e0 <col:15, col:19> 'int' '<'
    |     | |-ImplicitCastExpr 0x1529251b0 <col:15> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x152925170 <col:15> 'int' lvalue Var 0x15300e0c8 'i' 'int'
    |     | `-ImplicitCastExpr 0x1529251c8 <col:19> 'int' <LValueToRValue>
    |     |   `-DeclRefExpr 0x152925190 <col:19> 'int' lvalue Var 0x15300e1c8 'num' 'int'
    |     |-UnaryOperator 0x152925220 <col:24, col:25> 'int' postfix '++'
    |     | `-DeclRefExpr 0x152925200 <col:24> 'int' lvalue Var 0x15300e0c8 'i' 'int'
    |     `-CompoundStmt 0x152925350 <col:29, line:69:3>
    |       `-IfStmt 0x152925330 <line:65:4, line:68:4>
    |         |-RecoveryExpr 0x1529252a8 <line:65:8, col:52> '_Bool' contains-errors
    |         `-CompoundStmt 0x152925318 <col:55, line:68:4>
    |           `-BreakStmt 0x152925310 <line:67:5>
    |-BinaryOperator 0x152925430 <line:74:2, col:6> 'int' '='
    | |-DeclRefExpr 0x1529253d8 <col:2> 'int' lvalue Var 0x15300e0c8 'i' 'int'
    | `-ImplicitCastExpr 0x152925418 <col:6> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x1529253f8 <col:6> 'int' lvalue Var 0x15300e1c8 'num' 'int'
    |-WhileStmt 0x1529255f8 <col:11, line:76:2>
    | |-BinaryOperator 0x1529254a8 <line:74:18, col:25> 'int' '>='
    | | |-UnaryOperator 0x152925470 <col:18, col:20> 'int' prefix '--'
    | | | `-DeclRefExpr 0x152925450 <col:20> 'int' lvalue Var 0x15300e0c8 'i' 'int'
    | | `-IntegerLiteral 0x152925488 <col:25> 'int' 0
    | `-CompoundStmt 0x1529255e8 <col:28, line:76:2>
    `-ReturnStmt 0x152925738 <line:80:2, col:9>
      `-RecoveryExpr 0x152925718 <col:9> '<dependent type>' contains-errors lvalue
